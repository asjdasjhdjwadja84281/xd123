(function() {
	let engineActive = false;
	let autoCrownReady = true;
	let autoFeedReady = true;
	const saveKey = "exclusivev2";
	const JoinedPlayers = [];
	const KilledPlayers = [];
	const SandstormImage = new Image;
	SandstormImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/sandstorm.png";
	const BlizzardImage = new Image;
	BlizzardImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/blizzard.png";
	const Timers = {
		HealTimer: 10,
		GaugeTimer: 5
	};
	const Packets = {
		TakeChest: 8,
		TakeOven: 13,
		TakeWindmill: 4,
		TakeExtractor: 37,
		PutExtractor: 27,
		UnlockChest: 20,
		Craft: 26,
		Recycle: 18,
		SendBuild: 22,
		GiveWheatWindmill: 30,
		GiveWoodOven: 14,
		GiveFlourOven: 25,
		DropAll: 31,
		Equip: 34,
		Resurrection: 35,
		JoinTeam: 17,
		SendAttack: 36,
		StopAttack: 16,
		Move: 11,
		Focus: 9,
		GiveItem: 1
	};
	const Stamps = {
		AutoSteal: Date.now(),
		AutoBreadTake: Date.now(),
		AutoBreadPut: Date.now(),
		AutoExtractorTake: Date.now(),
		AutoExtractorPut: Date.now(),
		AutoCraft: Date.now(),
		AutoRecycle: Date.now(),
		AutoSpike: Date.now(),
		AutoWall: Date.now(),
		DropSword: Date.now(),
		AutoFire: Date.now(),
		AutoCrown: Date.now(),
		AutoTotem: Date.now(),
		AutoFarm: Date.now(),
		AutoSeed: Date.now(),
		AutoBuild: Date.now(),
		AutoIce: Date.now(),
		AutoFeed: Date.now(),
		ZMA: Date.now(),
		BottleHeal: Date.now(),
		autoBand: Date.now(),
		GoToLobby: Date.now(),
		XDLOLXD: Date.now(),
		crownHeal: Date.now(),
	};
	window.Settings = {
		VehicleOpacity: {
			enabled: true,
			draw: false,
			e: true,
		},
		GhostInfo: {
			enabled: true,
			draw: false,
		},
		Equip: {
			enabled: false,
			draw : false,
		},
		XDLOLXD: {
			enabled: true,
			draw: false,
		},
		Totem: {
			enabled: true,
			draw: false,
			x: null,
			y: null
		},
		Death: {
			enabled: true,
			draw: false,
			x: null,
			y: null,
		},
		AutoRespawn: {
			enabled: false,
			draw: false,
		},	
		ZMApath: {
			enabled: false,
			draw: true,
		},
		ShowLevel: {
			enabled: true,
			draw: false,
		},
		GoToLobby: {
			enabled: false,
			draw: false,
			keyMode: "hold",
			key: "NONE",
			pushToBinds: true,
		},
	LBscore: {
		enabled: true,
		draw: false,
	},
	HideGUI: {
			enabled: false,
			draw: false,
			key: "none",
			keyMode: "press",
			pushToBinds: true,
		},
		autoBand: {
			enabled: false,
			draw: true,
		},
		ZMA: {
			enabled: false,
			draw: true,
		},
		Tokens: {
			enabled: false,
			token: null,
			tokenid: null,
		},
		crownHeal: {
			enabled: false,
			draw: true,
		},
		Skin: 0,
		BottleHeal: {
			enabled: false,
			draw: true,
			key: "ShiftLeft",
			pushToBinds: true,
		},
		PlayerTracers: {
			enabled: true
		},
		KrakenTracers: {
			enabled: true
		},
		SandwormTracers: {
			enabled: true
		},
		PlayerOnTop: {
			enabled: true
		},
		BoxOnTop: {
			enabled: true
		},
		ListEnabledHacks: {
			enabled: true
		},
		ShowJoinLeaves: {
			enabled: true
		},
		Roofs: {
			enabled: true
		},
		ShowHP: {
			enabled: true
		},
		Debugger: {
			enabled: false
		},
		ColoredSpikes: {
			enabled: true,
			textures: "1"
		},
		Timers: {
			enabled: true
		},
		WeatherInfo: {
			enabled: true
		},
		ExtractorInfo: {
			enabled: true
		},
		ChestInfo: {
			enabled: true
		},
		BoxInfo: {
			enabled: true
		},
		WindmillInfo: {
			enabled: true
		},
		OvenInfo: {
			enabled: true
		},
		TotemInfo: {
			enabled: true
		},
		FurnaceInfo: {
			enabled: true
		},
		MachineInfo: {
			enabled: true
		},
		ShowHoodNames: {
			enabled: false
		},
		NoFog: {
			enabled: true
		},
		Xray: {
			enabled: false,
			draw: true,
			key: "Semicolon",
			keyMode: "press",
			pushToBinds: true
		},
		XrayOpacity: .4,
		RoofsOpacity: .4,
		AutoBook: {
			enabled: true
		},
		AutoTotem: {
			enabled: false,
			draw: true,
			key: "KeyH",
			keyMode: "press",
			pushToBinds: true
		},
		AutoCraft: {
			enabled: false,
			draw: true,
			key: "KeyK",
			keyMode: "press",
			last: null,
			pushToBinds: true
		},
		AutoRecycle: {
			enabled: false,
			draw: true,
			key: "KeyL",
			keyMode: "press",
			last: null,
			pushToBinds: true
		},
		AutoCrown: {
			enabled: false,
			draw: false
		},
		AimBot: {
			enabled: false,
			draw: true,
			key: "KeyF",
			keyMode: "press",
			pushToBinds: true,
			angle: null
		},
		AutoSteal: {
			enabled: false,
			draw: true,
			key: "KeyQ",
			keyMode: "hold"
		},
		AutoBreadTake: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			pushToBinds: true
		},
		AutoBreadPut: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			pushToBinds: true
		},
		AutoExtractorTake: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			pushToBinds: true
		},
		AutoExtractorPut: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			pushToBinds: true
		},
		AutoFeed: {
			enabled: true
		},
		AutoIce: {
			enabled: true
		},
		DropSword: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "hold",
			pushToBinds: true
		},
		AutoFire: {
			enabled: false,
			draw: true,
			key: "KeyV",
			keyMode: "hold",
			pushToBinds: true
		},
		AutoBuild: {
			enabled: false,
			draw: true,
			key: "KeyT",
			keyMode: "press",
			build: "Roofs",
			pushToBinds: true
		},
		AutoSeed: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			seed: "Auto",
			pushToBinds: true
		},
		AutoWall: {
			enabled: false,
			draw: true,
			key: "KeyC",
			mode: true,
			keyMode: "hold"
		},
		AutoSpike: {
			enabled: false,
			draw: true,
			key: "Space",
			keyMode: "hold",
			mode: true,
			priority: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
		},
		SmartCraft: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			select: "REIDITE_SPIKE",
			hm: 255
		},
		Spectator: {
			enabled: false,
			draw: true,
			key: "KeyP",
			keyMode: "press",
			speed: .5
		},
		AutoFarm: {
			enabled: false,
			draw: true,
			key: "KeyU",
			keyMode: "press",
			angle: null,
			water: false,
			x: null,
			xx: null,
			y: null,
			yy: null,
			sy: null,
			sx: null,
			pushToBinds: true
		},
		AutoSeedG: true,
		AutoUnlock: true,
		AutoExtractorPutMax: 255,
		BreadPutMax: 31,
		WindmillPutMax: 255,
		PutInChest: 10
	};

	function loadSettings() {
		for (const property in Settings) {
			const data = localStorage.getItem(property + saveKey);
			if (data) Settings[property] = JSON.parse(data)
		}
	}

	function saveSettings() {
		for (const property in Settings) {
			localStorage.setItem(property + saveKey, JSON.stringify(Settings[property]))
		}
	}
	loadSettings();
	let ⵠⲆⵠⲆⵠΔΔ = 7;
	const ᐃΔⲆΔᐃⵠⵠΔⵠ = ⵠⲆⵠⲆⵠΔΔ;
	const ᐃᐃⵠⵠΔΔⲆᐃΔ = 212;
	let ⲆⲆⵠⵠⵠΔⵠᐃⵠ = 107;
	var ᐃΔᐃΔⵠΔΔⵠΔ, ΔⲆⲆᐃΔⵠⵠ;
	const ᐃⲆⵠⵠΔⲆⵠ = ᐃᐃⵠⵠΔΔⲆᐃΔ;
	var ΔᐃⵠΔΔⲆᐃ = 144;
	const ⲆΔᐃᐃⲆᐃⲆⵠⵠ = 248;
	const ΔᐃⵠᐃᐃⲆᐃ = 124 * 249;
	var ᐃΔⵠΔΔΔᐃ = 47;
	if (ᐃΔⵠΔΔΔᐃ == 10) ᐃΔⵠΔΔΔᐃ = 35;
	var ΔᐃⵠⲆΔΔᐃ, ⲆⵠⲆᐃⵠⵠΔ;
	let ᐃⵠᐃΔⲆⲆΔⵠᐃ = 219;
	if (ⲆΔᐃᐃⲆᐃⲆⵠⵠ == ᐃⵠᐃΔⲆⲆΔⵠᐃ) ΔᐃⵠΔΔⲆᐃ = 239;
	const ⲆⵠᐃΔᐃⵠⲆ = window;
	var ⲆⲆⵠⲆⵠΔᐃ = 53;
	var ᐃΔᐃⵠⲆⲆᐃ = 71;
	let ⵠΔΔΔⵠⲆΔΔⲆ = 114;
	const ⲆⵠⲆᐃΔⵠⵠ = 106;
	var ⲆⲆⲆᐃⲆΔΔ = 223;
	if (ⲆⲆⲆᐃⲆΔΔ > 7) ⲆⲆⲆᐃⲆΔΔ = 225;
	const ⵠᐃᐃⵠᐃⲆⲆⵠΔ = 26;
	if (ⲆⵠⲆᐃΔⵠⵠ >= ⵠᐃᐃⵠᐃⲆⲆⵠΔ) ᐃΔᐃⵠⲆⲆᐃ = 122;
	if (ⲆⲆⵠⲆⵠΔᐃ === 5) ⲆⲆⵠⲆⵠΔᐃ = 222;
	let ⲆᐃΔⵠᐃⲆᐃ = 130;
	var ⲆΔⲆᐃⲆΔⵠ = 254;
	let ⵠⲆᐃᐃᐃⲆᐃ = 154 - 64;
	var ⵠⲆⲆΔⵠⲆⲆ, ⵠᐃᐃⵠᐃⲆᐃⲆᐃ, ᐃⵠⲆⵠⵠⵠⵠ, ⲆΔᐃᐃⲆΔᐃ;
	if (ⲆΔⲆᐃⲆΔⵠ === 4) ⲆΔⲆᐃⲆΔⵠ = 161;
	const ⲆᐃΔⲆᐃΔᐃᐃⲆ = 199;
	ⲆᐃΔⲆᐃΔᐃᐃⲆ.ⲆΔⵠⵠΔ = 1;
	var ⲆⲆⲆⲆⵠⲆΔ = 172;
	var ΔᐃⲆΔⲆᐃⲆ = 141;
	var ΔᐃⲆⵠᐃΔⵠ = 209 * 206;
	var ⲆⵠⲆΔᐃᐃᐃΔⵠ = 31;
	let ⵠⲆΔⲆⲆΔΔⲆⵠ = 250;
	var ᐃᐃⵠᐃΔⵠⵠ = 110;
	if (ⵠⲆΔⲆⲆΔΔⲆⵠ === ᐃᐃⵠᐃΔⵠⵠ) ⲆⵠⲆΔᐃᐃᐃΔⵠ = 143;
	if (ΔᐃⲆΔⲆᐃⲆ >= 1) ΔᐃⲆΔⲆᐃⲆ = 182;
	var ᐃⲆⵠⵠⲆᐃⲆ = 140;
	const ⲆⲆⲆⵠᐃⵠΔⲆᐃ = 249;
	const ᐃΔΔⵠᐃᐃΔ = 139;
	if (ⲆⲆⲆⵠᐃⵠΔⲆᐃ >= ᐃΔΔⵠᐃᐃΔ) ᐃⲆⵠⵠⲆᐃⲆ = 155;
	var ᐃᐃⵠⵠⲆᐃᐃ = 252;
	const ⲆΔⵠⵠΔΔⵠ = 70 - 209;
	var ᐃΔᐃⵠⲆᐃⵠ = ᐃᐃⵠⵠⲆᐃᐃ;
	let ᐃⵠᐃⵠΔⵠⵠᐃᐃ = 198 + 106;
	var ⲆⵠⲆΔΔΔⵠⲆᐃ = 91;
	const ⲆⲆⵠᐃⲆᐃⵠ = 45;
	let ΔᐃⲆⲆᐃⵠⲆ = 132;
	var ⵠⲆⲆⵠⲆⲆⲆΔⲆ = 43;
	if (ⵠⲆⲆⵠⲆⲆⲆΔⲆ === 0) ⵠⲆⲆⵠⲆⲆⲆΔⲆ = 90;
	if (ⲆⲆⵠᐃⲆᐃⵠ > ΔᐃⲆⲆᐃⵠⲆ) ⲆⵠⲆΔΔΔⵠⲆᐃ = 202;
	if (ⲆⲆⲆⲆⵠⲆΔ >= 14) ⲆⲆⲆⲆⵠⲆΔ = 45;
	const ᐃⲆⲆⲆⲆΔⵠ = 47;
	const ΔΔⵠΔΔΔⵠⵠⲆ = ᐃⲆⲆⲆⲆΔⵠ;
	var ⲆⲆⲆⲆΔᐃᐃ = 10 - 229;
	var ⲆᐃᐃⵠⲆᐃΔᐃΔ = 69 - 12;
	const ᐃᐃⲆⵠⲆΔⵠ = function(ⲆⲆᐃⲆᐃΔⲆⵠΔ) {
		let ΔⲆⲆⲆⲆⲆᐃΔΔ = "";
		for (let ᐃⵠⵠⲆⵠⵠⵠ = 0; ᐃⵠⵠⲆⵠⵠⵠ < ⲆⲆᐃⲆᐃΔⲆⵠΔ["length"]; ᐃⵠⵠⲆⵠⵠⵠ++) ΔⲆⲆⲆⲆⲆᐃΔΔ += ⲆⵠᐃΔᐃⵠⲆ["String"]["fromCharCode"](ⲆⲆᐃⲆᐃΔⲆⵠΔ[ᐃⵠⵠⲆⵠⵠⵠ] ^ ⲆᐃΔⵠᐃⲆᐃ++ % 255);
		return ΔⲆⲆⲆⲆⲆᐃΔΔ
	};
	var ᐃⵠⲆⲆⲆⲆⲆ = 81;
	const ⲆⵠᐃᐃⲆⵠⲆ = 20;
	const ᐃΔⲆΔⲆΔΔ = Math.floor(ⲆⵠᐃᐃⲆⵠⲆ[ⲆⵠᐃᐃⲆⵠⲆ.ⲆⵠᐃᐃⲆⵠⲆ]);
	var ᐃᐃᐃᐃΔΔᐃ = 85;
	var ΔΔⵠⵠⲆΔⲆ = 113;
	let ΔⲆⵠΔᐃᐃⵠ = 50;
	const ᐃΔΔⲆⵠᐃⲆ = 178;
	const ΔᐃᐃᐃⲆⲆΔ = Math.floor(ᐃΔΔⲆⵠᐃⲆ[ᐃΔΔⲆⵠᐃⲆ.ᐃΔΔⲆⵠᐃⲆ]);
	var ᐃⵠⵠᐃΔⲆⲆ, ᐃᐃⲆⲆⵠ, ⵠⵠᐃⲆⵠᐃᐃ, ᐃᐃᐃΔⵠᐃⲆ;
	var ΔΔⲆΔΔⵠᐃΔⵠ = 133 * 214;
	var ᐃⵠⵠᐃΔⵠⵠⲆΔ = 223;
	if (ΔⲆⵠΔᐃᐃⵠ > ᐃⵠⵠᐃΔⵠⵠⲆΔ) ΔΔⵠⵠⲆΔⲆ = 239;
	const ⲆⵠⵠⵠΔᐃⵠ = ᐃᐃᐃᐃΔΔᐃ;
	var ⵠⲆΔΔΔⲆⲆᐃᐃ, ⲆⲆᐃⵠⵠΔΔⲆΔ, ᐃΔⵠΔᐃΔΔ, ⲆᐃⲆⵠⲆⵠⲆ;
	var ΔᐃⵠⵠⲆᐃⵠ = 49;
	var ⵠⵠᐃⲆᐃΔᐃᐃⵠ = 179;
	const ΔⵠⵠΔⲆⲆⲆ = 221 - 34;
	var ⵠᐃⲆᐃΔⵠᐃ, ⲆᐃⵠⵠᐃⵠΔΔΔ, ΔⵠΔⲆⵠⲆⲆᐃⵠ, ⲆⲆΔⲆⵠⲆΔ;
	if (ⵠⵠᐃⲆᐃΔᐃᐃⵠ >= 12) ⵠⵠᐃⲆᐃΔᐃᐃⵠ = 246;
	var ⲆΔⵠΔⵠⵠⲆ = 67;
	var ᐃΔⵠⲆⵠΔⲆᐃᐃ = 107;
	var ⵠⲆᐃⲆΔⲆᐃΔᐃ = 227;
	if (ⲆΔⵠΔⵠⵠⲆ === ⵠⲆᐃⲆΔⲆᐃΔᐃ) ΔᐃⵠⵠⲆᐃⵠ = 30;
	var ΔⲆⵠᐃΔⲆᐃ = 198;
	const ΔΔⵠᐃᐃⵠΔ = 9;
	ΔΔⵠᐃᐃⵠΔ.ⲆⵠⵠⲆΔᐃᐃ = 8;
	let ᐃⲆΔⲆΔⵠⵠⲆᐃ = 196;
	var ΔΔΔⵠᐃΔⲆⵠΔ = 100;
	if (ᐃⲆΔⲆΔⵠⵠⲆᐃ > ΔΔΔⵠᐃΔⲆⵠΔ) ΔⲆⵠᐃΔⲆᐃ = 29;
	const ΔᐃΔⲆΔᐃΔⵠⲆ = 170 + 81;
	if (ᐃⵠⲆⲆⲆⲆⲆ > 9) ᐃⵠⲆⲆⲆⲆⲆ = 138;
	let ⵠⵠΔⲆᐃΔⲆ = 241 + 129 << 7;
	const ΔⵠᐃⵠⲆⲆⲆ = 153;
	ΔⵠᐃⵠⲆⲆⲆ.ⵠΔⲆᐃΔᐃⲆⲆᐃ = 12;
	var ᐃⲆᐃⲆᐃ = {};
	ᐃⲆᐃⲆᐃ.ᐃΔⲆⵠⵠᐃΔᐃⵠ = 9;
	ⲆⵠⵠΔᐃᐃᐃⵠⲆ = [
		[224, 176, 198, 181, 231, 208, 177, 252, 233, 252, 177, 176],
		[215, 226, 252, 228, 200, 210, 169, 168],
		[207, 192, 224, 234],
		[248, 169, 169, 228, 196, 200, 230, 202, 199, 251, 234, 149, 255, 255, 250, 197, 243, 153, 196, 197, 204, 194, 212, 221],
		[209, 251, 254, 195, 210, 240, 129, 137, 223, 227, 254, 209],
		[228, 216, 253, 252],
		[155, 155, 138, 181, 164, 160, 245, 244],
		[168, 156, 245, 166, 175, 152, 138, 228],
		[179, 148, 184, 187, 183, 150, 229, 228],
		[128, 233, 138, 237, 143, 178, 217, 208, 128, 142, 182, 149, 132, 138, 140, 173, 136, 172, 128, 129, 140, 129, 162, 162, 168, 164, 186, 197],
		[149, 197, 174, 201, 169, 172, 201, 205, 164, 88, 75, 48, 90, 83, 114, 59],
		[95, 57, 48, 59, 105, 98, 79, 126, 109, 119, 44, 47],
		[75, 37, 44, 99, 77, 64, 122, 39],
		[120, 46, 75, 107, 69, 97, 28, 31],
		[65, 115, 99, 81],
		[125, 112, 65, 70, 114, 28, 99, 88, 77, 103, 0, 90, 81, 89, 100, 11],
		[83, 127, 111, 14, 95, 121, 119, 86, 92, 114, 23, 49, 34, 19, 112, 42],
		[30, 122, 112, 57, 41, 127, 4, 115],
		[21, 61, 23, 57, 9, 5, 104, 107],
		[52, 31, 33, 50, 62, 13, 96, 99],
		[5, 82, 55, 82, 49, 51, 29, 10, 5, 63, 63, 31, 15, 41, 39, 91, 60, 39, 32, 79],
		[42, 44, 63, 28, 33, 63, 65, 71],
		[33, 59, 43, 23, 27, 215, 226, 191],
		[224, 227, 184, 187],
		[213, 229, 241, 252, 210, 212, 220, 188, 193, 213, 215, 235, 240, 249, 211, 163],
		[205, 192, 241, 246, 194, 235, 160, 163],
		[253, 146, 148, 200, 193, 150, 144, 150, 253, 240, 193, 154, 201, 251, 251, 219, 203, 225, 140, 143],
		[233, 217, 217, 195, 237, 249, 132, 135],
		[216, 209, 209, 208, 222, 136, 144, 255],
		[160, 169, 147, 188, 164, 143, 240, 191, 168, 254, 155, 155, 149, 136, 185, 226],
		[138, 140, 151, 161, 141, 143, 236, 177, 138, 238, 181, 174, 189, 167, 176, 223],
		[185, 137, 220, 147, 131, 169, 212, 215],
		[177, 171, 187, 132, 141, 194, 163, 158, 165, 162, 191, 188, 166, 202, 192, 142, 152, 187, 196, 139, 90, 86, 55, 51],
		[93, 104, 80, 49, 105, 94, 92, 114, 93, 62, 88, 118, 116, 124, 68, 70, 118, 98, 43, 42],
		[122, 43, 47, 114, 70, 74, 68, 105, 67, 76, 116, 18, 70, 72, 94, 81, 113, 126, 123, 22],
		[118, 64, 66, 92, 84, 118, 100, 74],
		[86, 98, 96, 77, 91, 11, 124, 85, 102, 108, 3, 2],
		[26, 6, 123, 41, 32, 18, 119, 43, 42, 39, 27, 118],
		[45, 21, 28, 35, 50, 0, 111, 110],
		[14, 2, 99, 60],
		[59, 107, 12, 107, 9, 48, 8, 39, 4, 54, 52, 25, 0, 32, 14, 11, 49, 62, 56, 7, 15, 10, 83, 82],
		[19, 57, 56, 31, 46, 24, 26, 67],
		[34, 62, 67, 15, 37, 42, 18, 10],
		[228, 198, 187, 213, 210, 192, 200, 211, 236, 193, 192, 251, 238, 224, 237, 178],
		[242, 214, 254, 233, 240, 212, 171, 170],
		[194, 206, 175, 241, 254, 175, 204, 243, 246, 247, 232, 233, 245, 151, 159, 211, 203, 238, 147, 222, 246, 250, 155, 159],
		[233, 131, 139, 198, 208, 253, 252, 193, 218, 248, 135, 134],
		[230, 229, 214, 200, 162, 242, 136, 243, 167, 178, 251, 250],
		[172, 251, 162, 187, 149, 255, 169, 242],
		[138, 128, 239, 238],
		[181, 130, 227, 160, 188, 129, 139, 230],
		[143, 138, 235, 239, 173, 155, 168, 161, 135, 139, 172, 143, 141, 184, 215, 214],
		[136, 170, 130, 155, 170, 164, 164, 134, 174, 180, 203, 202],
		[161, 174, 168, 144, 174, 165, 164, 108, 99, 108, 81, 73, 100, 94, 73, 56, 83, 93, 62, 96, 110, 105, 50, 45],
		[117, 90, 127, 99, 79, 71, 42, 37],
		[67, 40, 77, 44, 76, 44, 38, 85, 69, 101, 117, 16, 65, 103, 26, 21],
		[112, 68, 125, 28, 73, 105, 22, 69],
		[80, 101, 2, 92, 111, 4, 97, 107, 99, 109, 14, 87, 103, 102, 117, 48, 35, 47, 32, 121],
		[38, 1, 1, 49, 19, 29, 126, 124, 25, 35, 118, 59, 11, 3, 110, 105],
		[3, 1, 59, 45, 61, 30, 22, 37, 12, 6, 21, 25, 56, 58, 8, 89],
		[54, 49, 86, 0, 51, 88, 62, 81],
		[8, 58, 42, 77],
		[21, 64, 53, 4, 17, 49, 27, 13, 35, 13, 70, 65],
		[36, 76, 70, 245, 227, 239, 213, 238, 225, 193, 209, 227],
		[232, 231, 178, 252, 239, 233, 178, 173],
		[200, 160, 235, 228, 207, 193, 162, 168, 206, 203, 166, 161],
		[202, 219, 174, 237, 242, 234, 241, 148, 198, 224, 237, 196, 202, 242, 253, 192, 206, 157, 254, 141],
		[235, 223, 223, 199, 215, 247, 138, 133],
		[234, 237, 142, 140, 242, 251, 249, 185, 162, 175, 133, 241],
		[144, 171, 145, 166, 155, 146, 163, 187],
		[169, 134, 133, 160, 179, 131, 238, 233],
		[140, 228, 191, 176, 186, 177, 157, 236],
		[132, 134, 141, 150, 184, 133, 222, 217],
		[188, 212, 222, 157, 139, 135, 189, 134, 137, 175, 210, 205],
		[162, 167, 161, 185, 167, 167, 202, 197],
		[175, 173, 151, 137, 153, 186, 69, 51, 83, 91, 78, 124, 95, 95, 99, 52],
		[83, 101, 90, 100, 87, 98, 104, 125, 113, 100, 41, 40],
		[116, 64, 33, 114, 64, 74, 33, 32],
		[68, 71, 72, 86, 67, 123, 110, 73, 69, 80, 21, 20],
		[73, 24, 106, 84, 74, 110, 13, 12],
		[80, 100, 114, 66, 85, 112, 84, 76, 96, 76, 1, 0],
		[93, 13, 40, 49, 24, 45, 22, 9, 28, 31, 35, 116],
		[41, 120, 14, 62, 47, 23, 1, 108],
		[49, 62, 2, 45, 50, 0, 14, 35, 62, 30, 26, 40, 63, 8, 81, 9, 6, 36, 8, 19, 4, 12, 50, 16, 51, 60, 93, 1],
		[12, 93, 68, 76],
		[22, 36, 65, 30, 44, 32, 34, 9, 24, 22, 42, 22],
		[36, 40, 181, 233, 219, 238, 252, 233, 220, 198, 181, 180],
		[208, 230, 181, 231, 234, 215, 221, 172],
		[200, 212, 210, 165, 207, 198, 165, 164],
		[192, 169, 228, 235, 199, 242, 230, 210, 243, 244, 220, 210, 199, 224, 237, 148],
		[207, 250, 145, 144],
		[204, 232, 246, 216, 232, 228, 195, 136],
		[213, 133, 238, 137, 238, 236, 208, 206, 220, 248, 172, 187, 152, 148, 138, 179, 164, 170, 154, 179],
		[144, 166, 160, 190, 172, 137, 130, 189, 183, 155, 133, 232],
		[181, 228, 154, 170, 187, 140, 146, 177],
		[189, 178, 182, 150, 128, 164, 162, 143, 188, 182, 213, 212],
		[137, 217, 186, 158, 180, 184, 190, 193],
		[145, 158, 162, 134, 172, 160, 190, 131, 160, 170, 193, 192],
		[159, 87, 52, 119, 89, 92, 79, 83, 93, 80, 97, 58],
		[105, 63, 79, 98, 109, 119, 44, 47],
		[73, 121, 121, 101, 117, 94, 87, 42, 126, 75, 101, 114],
		[124, 103, 103, 18, 66, 101, 24, 27],
		[127, 25, 16, 93, 74, 123, 25, 19],
		[77, 93, 119, 70, 105, 101, 8, 11],
		[85, 127, 0, 84, 118, 104, 124, 3],
		[92, 114, 23, 114],
		[33, 19, 19, 46, 36, 123, 31, 51, 17, 26, 31, 34, 42, 24, 0, 111],
		[48, 103, 7, 47, 53, 106, 45, 54],
		[1, 29, 96, 99],
		[62, 55, 84, 24, 7, 35, 35, 19, 3, 47, 5, 2, 15, 43, 56, 83],
		[54, 66, 9, 30, 42, 44, 63, 35, 22, 47, 72, 22, 25, 79, 43, 78],
		[38, 216, 203, 232],
		[218, 182, 253, 246, 221, 223, 188, 186, 216, 203, 219, 254, 213, 162, 249, 162],
		[202, 204, 199, 166, 206, 207, 215, 232],
		[194, 196, 223, 233, 253, 232, 202, 159],
		[246, 225, 206, 155],
		[196, 154, 144, 211, 207, 237, 144, 147],
		[245, 222, 251, 196, 209, 225, 251, 217, 238, 224, 243, 254, 217, 142, 239, 210],
		[229, 173, 248, 183, 167, 140, 136, 251],
		[165, 143, 240, 160, 170, 254, 155, 165],
		[150, 135, 131, 185, 130, 230, 173, 190, 180, 235, 148, 231],
		[191, 177, 155, 173, 187, 183, 180, 223],
		[128, 215, 183, 142, 131, 160, 191, 144],
		[178, 129, 171, 132, 142, 194, 149, 139, 145, 199, 163, 131, 173, 189, 183, 140, 153, 187, 196, 135],
		[98, 86, 68, 55],
		[103, 104, 80, 125, 108, 78, 51, 114, 86, 92, 51, 50],
		[115, 124, 84, 102, 78, 82, 47, 99],
		[122, 94, 35, 117],
		[127, 112, 72, 119, 122, 105, 78, 119, 64, 98, 96, 23, 114, 120, 23, 22],
		[117, 31, 23, 90, 83, 3, 11, 64, 110, 100, 11, 10],
		[90, 11, 15, 79, 102, 101, 112, 69, 25, 22, 38, 47],
		[39, 118, 20, 49, 43, 8, 119, 118],
		[47, 32, 24, 59, 50, 98, 8, 63, 6, 13, 12, 59, 58, 55, 8, 22, 61, 5, 16, 111, 58, 54, 87, 15, 7, 2, 91, 90],
		[50, 46, 60, 89, 13, 58, 32, 3, 37, 54, 30, 71, 46, 34, 14, 36, 33, 33, 40, 11, 30, 10, 67, 66],
		[225, 198, 238, 246, 224, 196, 187, 186],
		[222, 187, 220, 226, 217, 191, 183, 229, 241, 163, 196, 163],
		[247, 251, 241, 170],
		[249, 171, 204, 174, 205, 175, 167, 244, 250, 240, 159, 158],
		[241, 150, 244, 222, 201, 254, 159, 197],
		[200, 192, 194, 195, 212, 198, 143, 142],
		[237, 226, 206, 219, 219, 215, 235, 134],
		[229, 236, 131, 130],
		[162, 134, 148, 241, 158, 146, 177, 250],
		[170, 158, 243, 249, 150, 155, 156, 185],
		[179, 188, 132, 167, 182, 230, 140, 187, 137, 235, 162, 179, 191, 238, 147, 226],
		[129, 185, 176, 143, 134, 189, 171, 218],
		[177, 190, 184, 128],
		[181, 186, 160, 223, 145, 166, 203, 134],
		[151, 199, 160, 155, 162, 184, 199, 198],
		[159, 207, 146, 54, 91, 83, 62, 57],
		[95, 107, 127, 126, 107, 57, 66, 49],
		[111, 61, 77, 120, 72, 32, 127, 36, 112, 71, 42, 37],
		[122, 119, 77, 116, 71, 95, 34, 29],
		[69, 101, 26, 20, 124, 113, 80, 21],
		[112, 71, 125, 66, 76, 121, 26, 97, 104, 106, 97, 91],
		[108, 97, 121, 78, 90, 77, 6, 1],
		[94, 118, 117, 44, 37, 47, 21, 49, 33, 3, 21, 36, 19, 39, 13, 125, 47, 6, 30, 109],
		[11, 96, 5, 100, 3, 17, 59, 44, 3, 11, 102, 97],
		[60, 9, 110, 8, 59, 80, 53, 48, 7, 49, 94, 30, 13, 45, 3, 28, 15, 3, 11, 54, 19, 31, 53, 29, 23, 49, 33, 19],
		[32, 72, 19, 16, 36, 76, 12, 189],
		[224, 213, 182, 241, 223, 222, 205, 193, 211, 221, 231, 226, 236, 198, 222, 173],
		[242, 160, 255, 250, 247, 241, 170, 165],
		[251, 221, 247, 233, 199, 200, 205, 214],
		[195, 229, 207, 209, 255, 243, 215, 222, 200, 253, 159, 145],
		[206, 195, 249, 196, 211, 129, 233, 216],
		[215, 225, 219, 205],
		[218, 137, 241, 214],
		[220, 230, 241, 143, 152, 151, 247, 249],
		[161, 129, 254, 166, 147, 248, 179, 160, 156, 252, 183, 184, 178, 225, 158, 233],
		[140, 228, 145, 171, 187, 155, 230, 225],
		[188, 153, 137, 144, 187, 208, 139, 212],
		[129, 212, 139, 131, 141, 173, 140, 209],
		[143, 169, 131, 133, 171, 167, 189, 156, 150, 183, 202, 197],
		[171, 189, 189, 204, 167, 175, 61, 60],
		[96, 49, 49, 105, 101, 105, 66, 127, 105, 108, 49, 48],
		[84, 97, 90, 125, 72, 75, 100, 121],
		[79, 64, 86, 41, 123, 67, 70, 113],
		[124, 72, 76, 17, 120, 123, 110, 104, 71, 112, 25, 89, 78, 106, 17, 16],
		[119, 29, 72, 89, 83, 100, 5, 89, 108, 118, 5, 4],
		[110, 108, 122, 13, 95, 126, 125, 124],
		[33, 113, 18, 117, 16, 0, 36, 61, 16, 28, 117, 124, 42, 14, 109, 108],
		[54, 11, 26, 57, 53, 60, 30, 55, 0, 12, 105, 109],
		[4, 7, 46, 11, 59, 59, 38, 9],
		[63, 85, 16, 25, 48, 60, 89, 93, 57, 46, 77, 76],
		[43, 65, 12, 3, 21, 69, 46, 40, 35, 35, 46, 18],
		[29, 76, 210, 233, 230, 196, 209, 184],
		[223, 181, 224, 225, 233, 224, 194, 251, 212, 200, 198, 211, 246, 210, 169, 168],
		[194, 165, 210, 232, 192, 204, 210, 173],
		[251, 203, 233, 156],
		[195, 244, 145, 223, 252, 255, 226, 153, 251, 198, 250, 192, 204, 156, 250, 221],
		[214, 244, 141, 194],
		[239, 133, 208, 209, 217, 208, 242, 203, 228, 248, 149, 252],
		[145, 175, 138, 149, 146, 160, 245, 244],
		[169, 140, 138, 180, 173, 253, 133, 236],
		[182, 224, 158, 165, 178, 144, 141, 228],
		[143, 147, 150, 171, 188, 136, 140, 155, 184, 178, 217, 216],
		[130, 160, 132, 157, 176, 188, 213, 220, 138, 174, 205, 204],
		[145, 180, 140, 157, 175, 197, 174, 150, 152, 201, 132, 150, 164, 88, 72, 63],
		[102, 64, 64, 59],
		[94, 59, 95, 115, 104, 62, 52, 119],
		[109, 34, 36, 107, 73, 76, 91, 102, 114, 117, 76, 39],
		[127, 91, 36, 91, 70, 120, 115, 74, 117, 114, 111, 107],
		[126, 26, 16, 80],
		[122, 116, 103, 87, 118, 104, 93, 113, 87, 99, 111, 91, 109, 96, 112, 7],
		[89, 107, 107, 74, 93, 115, 11, 119],
		[33, 118, 112, 53, 37, 122, 15, 33],
		[17, 126, 27, 126, 26, 61, 7, 40, 48, 19, 108, 35, 52, 106, 15, 19, 1, 11, 27, 53, 5, 56, 40, 95],
		[57, 35, 92, 85, 5, 15, 84, 87],
		[10, 59, 88, 27, 53, 40, 59, 59, 37, 49, 68, 59],
		[45, 74, 47, 74, 41, 43, 5, 18, 29, 215, 215, 247, 231, 204, 203, 197, 226, 222, 219, 226, 209, 188, 184, 230, 237, 199, 196, 175],
		[240, 166, 249, 227],
		[206, 245, 207, 170, 194, 205, 160, 163],
		[251, 231, 152, 246, 199, 236, 239, 214, 197, 197, 202, 151],
		[200, 193, 148, 158, 246, 232, 227, 222],
		[209, 243, 217, 195, 237, 238, 221, 202, 225, 244, 239, 209],
		[229, 242, 151, 242],
		[160, 247, 147, 175, 158, 144, 131, 179, 146, 148, 166, 243],
		[149, 226, 169, 164, 138, 185, 147, 165, 134, 234, 224, 174, 184, 155, 228, 164, 190, 184, 179, 142, 183, 215, 167, 138, 132, 133, 175, 218, 138, 187, 212, 155],
		[141, 157, 200, 193],
		[167, 154, 163, 130, 174, 149, 175, 131],
		[169, 146, 171, 139, 89, 50, 80, 115, 102, 55, 50, 58],
		[109, 77, 67, 54],
		[90, 63, 88, 102, 65, 73, 92, 105, 78, 66, 39, 126, 122, 81, 113, 38],
		[127, 90, 39, 44],
		[67, 76, 116, 87, 70, 22, 124, 75, 121, 27, 66, 91, 78, 106, 127, 18],
		[105, 2, 120, 95, 109, 109, 100, 91, 106, 110, 66, 87, 94, 106, 104, 74, 36, 0, 127, 126],
		[38, 40, 0, 117, 41, 30, 46, 35, 40, 10, 119, 54],
		[52, 22, 62, 39, 14, 4, 107, 106],
		[1, 55, 12, 107, 56, 26, 103, 42, 3, 22, 95, 94],
		[53, 61, 44, 30, 49, 49, 1, 86],
		[15, 0, 56, 5, 18, 67, 71, 6, 46, 34, 56, 71],
		[33, 20, 67, 16, 25, 44, 67, 66],
		[213, 196, 187, 201, 208, 233, 212, 211],
		[235, 186, 216, 242, 238, 191, 250, 227, 198, 214, 196, 167, 240, 212, 171, 170],
		[250, 222, 163, 241, 253, 234, 163, 162],
		[243, 246, 151, 147, 233, 241, 252, 229, 203, 199, 224, 195, 201, 252, 147, 146],
		[211, 130, 224, 219, 215, 219, 231, 138],
		[226, 241, 240, 211, 216, 141, 210, 203, 153, 150, 166, 175],
		[167, 130, 128, 190, 171, 251, 156, 129, 174, 163, 159, 242],
		[138, 227, 132, 227, 130, 146, 186, 163, 130, 129, 170, 173, 190, 176, 136, 143, 186, 140, 184, 153, 190, 189, 183, 218],
		[138, 174, 188, 134, 136, 172, 211, 210],
		[147, 195, 138, 131, 173, 199, 163, 202],
		[156, 177, 176, 147, 158, 147, 176, 112, 101, 69, 111, 114, 103, 97, 58, 53],
		[83, 82, 65, 117, 111, 61, 70, 45],
		[115, 85, 42, 124, 79, 81, 65, 115],
		[72, 119, 119, 114, 75, 73, 115, 85, 69, 102, 122, 20, 116, 126, 109, 81, 112, 114, 64, 17],
		[117, 31, 22, 73, 85, 122, 97, 68, 109, 4, 125, 80, 90, 8, 110, 1],
		[94, 13, 105, 41, 34, 113, 17, 61, 36, 17, 114, 38],
		[45, 120, 13, 53, 47, 41, 114, 109],
		[50, 21, 106, 46, 52, 14, 5, 40, 59, 104, 111, 97],
		[56, 31, 98, 93],
		[56, 53, 41, 30],
		[4, 49, 82, 5, 11, 29, 86, 81],
		[14, 41, 3, 5, 43, 5, 78, 73],
		[17, 49, 33, 2, 29, 59, 70, 65],
		[30, 76, 57, 178, 219, 211, 190, 185],
		[225, 180, 193, 248, 237, 203, 182, 177],
		[238, 188, 193, 248, 243, 213, 198, 169],
		[246, 164, 193, 235, 195, 205, 213, 172, 199, 201, 205, 234, 195, 207, 241, 200, 192, 231, 154, 149],
		[243, 199, 199, 223, 207, 232, 229, 220, 232, 129, 226, 137],
		[237, 135, 142, 210, 219, 136, 195, 207, 231, 233, 241, 240],
		[162, 240, 250, 245, 166, 171, 137, 164],
		[170, 167, 242, 253, 175, 163, 158, 237],
		[136, 181, 238, 233],
		[140, 161, 234, 229],
		[128, 130, 137, 180, 191, 180, 150, 221],
		[131, 208, 214, 143, 134, 139, 161, 134, 138, 217, 185, 132, 142, 128, 190, 205],
		[149, 170, 178, 201],
		[145, 190, 189, 144, 160, 200, 174, 193],
		[156, 204, 86, 52, 97, 75, 78, 105, 101, 52, 69, 52],
		[110, 76, 90, 57, 106, 74, 86, 98, 115, 68, 112, 96],
		[79, 37, 94, 108, 67, 41, 74, 110, 79, 72, 21, 81, 64, 116, 98, 21, 71, 112, 17, 92, 120, 69, 102, 69, 76, 120, 101, 12],
		[107, 100, 76, 66, 87, 112, 125, 4],
		[99, 9, 68, 11, 115, 69, 9, 124],
		[32, 113, 113, 51, 37, 0, 30, 60],
		[16, 121, 26, 125, 26, 24, 60, 34, 48, 20, 56, 47, 12, 0, 22, 47, 56, 54, 14, 39],
		[12, 10, 81, 48, 52, 37, 15, 88],
		[52, 10, 16, 31, 51, 51, 61, 23, 35, 4, 54, 8, 17, 30, 50, 64],
		[23, 69, 46, 76, 25, 12, 65, 64],
		[29, 55, 214, 251, 227, 194, 185, 184],
		[220, 233, 194, 255, 232, 218, 177, 176],
		[239, 216, 193, 172],
		[243, 196, 161, 254, 204, 207, 240, 201, 192, 252, 161, 160],
		[253, 172, 242, 216, 195, 244, 145, 203, 199, 240, 242, 156],
		[252, 252, 192, 216, 202, 235, 216, 243, 209, 221, 254, 221, 211, 230, 133, 132],
		[216, 252, 250, 200, 228, 140, 150, 169, 152, 241, 145, 248],
		[162, 144, 253, 186, 168, 249, 130, 191],
		[173, 253, 158, 168, 136, 132, 130, 160],
		[181, 229, 158, 173, 185, 156, 164, 177],
		[188, 152, 217, 210],
		[131, 180, 209, 144, 188, 191, 162, 177, 139, 188, 190, 221, 143, 174, 205, 204],
		[150, 171, 186, 153, 149, 156, 128, 145, 152, 150, 152, 204, 167, 87, 101, 110],
		[89, 67, 105, 124, 100, 79, 113, 98, 110, 93, 48, 51],
		[94, 125, 125, 124, 64, 67, 32, 38, 89, 114, 75, 88, 120, 114, 87, 118, 122, 113, 28, 31],
		[122, 22, 93, 74, 126, 112, 99, 121, 113, 123, 99, 30],
		[78, 103, 4, 72, 87, 115, 115, 67, 110, 10, 108, 7],
		[88, 15, 111, 82, 92, 1, 124, 127],
		[33, 3, 19, 51, 29, 123, 27, 37],
		[41, 11, 116, 36, 22, 8, 3, 34, 49, 102, 97, 107],
		[54, 16, 19, 54, 1, 59, 96, 99],
		[60, 83, 51, 87, 1, 35, 48, 91],
		[5, 90, 92, 1, 8, 1, 84, 25],
		[54, 66, 72, 4, 18, 70, 25, 26],
		[20, 74, 17, 10, 33, 18, 44, 67],
		[38, 215, 180, 236, 225, 195, 208, 187],
		[221, 208, 211, 230, 233, 226, 220, 179],
		[235, 216, 219, 250, 241, 250, 219, 229, 206, 192, 203, 246],
		[194, 174, 229, 232, 252, 146, 244, 159],
		[192, 201, 243, 220, 253, 240, 248, 151],
		[242, 194, 251, 195, 245, 221, 231, 203],
		[215, 195, 136, 139],
		[212, 214, 210, 135],
		[216, 143, 239, 199, 221, 242, 181, 174, 150, 247, 151, 243, 165, 143, 156, 247],
		[170, 254, 155, 251],
		[172, 189, 135, 184, 183, 149, 232, 235]
	];
	for (let ᐃⵠⵠⲆⵠⵠⵠ = 0; ᐃⵠⵠⲆⵠⵠⵠ < ⲆⵠⵠΔᐃᐃᐃⵠⲆ["length"]; ᐃⵠⵠⲆⵠⵠⵠ++) ⲆⵠⵠΔᐃᐃᐃⵠⲆ[ᐃⵠⵠⲆⵠⵠⵠ] = ⲆⵠᐃΔᐃⵠⲆ["atob"](ᐃᐃⲆⵠⲆΔⵠ(ⲆⵠⵠΔᐃᐃᐃⵠⲆ[ᐃⵠⵠⲆⵠⵠⵠ]));
	var ᐃⵠΔᐃⵠⲆⵠ;
	var ⲆⲆᐃᐃΔΔᐃ = 195;
	var ⵠᐃⵠᐃᐃΔⲆ = 1;
	const ΔᐃᐃΔΔⵠᐃⵠᐃ = 18 - 247;
	var ⲆᐃΔⲆⵠⵠⲆⲆΔ = 45;
	const ΔⲆⵠⵠⵠⲆᐃ = ⲆᐃΔⲆⵠⵠⲆⲆΔ;
	let ⵠⲆΔⵠⵠⲆⲆⵠᐃ = 215;
	var ᐃⵠᐃᐃⵠΔⲆΔᐃ = 97;
	const ΔⵠΔⲆⲆΔΔΔⵠ = 252;
	const ΔᐃΔⵠᐃⵠΔⵠⵠ = Math.floor(ΔⵠΔⲆⲆΔΔΔⵠ[ΔⵠΔⲆⲆΔΔΔⵠ.ΔⵠΔⲆⲆΔΔΔⵠ]);
	var ᐃⲆΔᐃᐃⵠⵠ = 67;
	var ᐃⲆⲆⵠΔⲆᐃ, ΔⵠᐃⲆⵠⲆⲆⲆⵠ;
	let ⵠⵠᐃⵠᐃΔⵠ = 186;
	var ΔΔᐃᐃⵠᐃⵠ = ⵠⵠᐃⵠᐃΔⵠ;
	let ⲆⵠᐃᐃⵠΔᐃ = 148;
	if (ᐃⲆΔᐃᐃⵠⵠ >= ⲆⵠᐃᐃⵠΔᐃ) ᐃⵠᐃᐃⵠΔⲆΔᐃ = 82;
	const ΔⵠⵠᐃᐃⲆᐃ = 240;
	const ᐃᐃⵠᐃⲆΔΔΔΔ = 174;
	var ⵠⲆⲆⵠΔⲆⲆ = 218;
	let ᐃᐃᐃᐃⲆⲆᐃ = 94;
	const ᐃⲆⵠΔΔⵠⵠΔᐃ = 26;
	if (ᐃᐃᐃᐃⲆⲆᐃ == ᐃⲆⵠΔΔⵠⵠΔᐃ) ⵠⲆⲆⵠΔⲆⲆ = 31;
	let ⵠΔⵠⵠⵠᐃⵠ = ᐃᐃⵠᐃⲆΔΔΔΔ;
	const ⵠᐃⵠⲆᐃΔΔⲆΔ = 21 + 71 << 2;
	if (ⵠⲆΔⵠⵠⲆⲆⵠᐃ == ΔⵠⵠᐃᐃⲆᐃ) ⵠᐃⵠᐃᐃΔⲆ = 102;
	var ΔⵠⵠᐃⵠⲆⲆ = 194;
	const ᐃⵠᐃᐃⵠ = 185 * 144;
	let ⲆⲆⵠΔⵠᐃᐃᐃⵠ = 231;
	ⲆⲆⵠΔⵠᐃᐃᐃⵠ.ᐃⲆΔΔΔⵠⲆⲆΔ = 8;
	if (ⲆⵠᐃΔᐃⵠⲆ.ⲆⲆⵠ === ᐃⵠΔᐃⵠⲆⵠ) ⲆⵠᐃΔᐃⵠⲆ.ⲆⲆⵠ = 4;
	let ⵠᐃⲆⲆΔΔᐃΔⲆ = 45;
	const ΔⲆΔⲆᐃⲆⲆ = 169;
	const ΔⵠⵠⵠⲆⵠᐃ = Math.floor(ΔⲆΔⲆᐃⲆⲆ[ΔⲆΔⲆᐃⲆⲆ.ΔⲆΔⲆᐃⲆⲆ]);
	if (ΔⵠⵠᐃⵠⲆⲆ == ⵠᐃⲆⲆΔΔᐃΔⲆ) ⲆⲆᐃᐃΔΔᐃ = 246;
	var ⵠⲆᐃⵠΔᐃⵠⲆⲆ, ᐃᐃΔⲆᐃⲆⲆⵠΔ, ⵠⵠⲆⵠᐃⲆⲆ;
	const ⲆⲆΔ = 0;
	const ⵠⵠⵠᐃⵠ = -3751 + 609 + 836 + 1113 + 831 + 248 + 66 + 37 + 15 + 3 + 2;
	const ᐃᐃⲆΔⵠ = -1821 + 1008 + 550 + 104 + 6 + 129 + 30 + 2 + 6 + 2 + 1 + 2;
	const ᐃ = ["#33b4e4", "Ciepło w i poza zimą", "#281A49", "#1678a2", "#328587", "Урон по строениям: 1", "#C6AF81", "#322413", "Haltbarkeit: 2000", "volume", "#34255d", "#67766F", "mousedown", "Animals Defense: 13", "Wytrzymałość: 2000", "source-over", "110_110_010", "#184747", "010_011_010", " Gather 1 amethyst", "#7d5234", "Możesz także zdobyć minerały", "#e0f2f6", "play", "#09373F", "getAuthResponse", "Relax in this confortable bed", "serverAddressInput", "#53A4D5", "&userid=", "#dfd1cb", "Oh, yeah? Is there crab in the crab sticks?", "#3d2a6e", "#252B28", "#674C2A", "Building Damage: 1", "#89d1d4", "#75827D", "name", "Durability: 2000", "#123b3f", "#2E85A0", "#1d051e", "#bfb360", "quit_chronoquest", "#21112D", "011_111_111", "#c4a23a", "'Baloo Paaji', sans-serif", "#C98435", "#1a7961", "event", "Content-Type", "#042b30", "You are the king of crabs!", "#B26F31", "GET", "FB", " Claim rewards", " Be peaceful", "000_111_110", "110_111_011", "#4d2d14", "#634828", "#3dc4c0", "_trad_number", "Damage: 5", "#939995", "#e4efe8", "Crab Claw", "fo", "#939393", "000_111_010", "#5cc5ce", "110_111_010", "opacity", "#000", "#115E60", "#efd435", "#35b1b5", "#a08f47", "#fff", "Te calienta en invierno y fuera del agua", "dw", "#252525", "#596560", "#0a2d18", "gapi", "Так же вы можете получить ресурсы", "Durability: 700", "#1a4545", "starve_mapping", "#614627", "audio/ambience.mp3", "#043c37", "team_box", "Durabilidad: 2000", "kit", "#8c29aa", "Hält dich warm außerhalb von Wasser und Winter", "#46c2c9", "LAVA", " you can only hit people who are flying too", "#EFE4B4", "isl", "They can't hit you and you can't hit them", "#07393d", "timeremainingquest", "#c27add", "#764eb5", "000_110_110", "#1f773d", "#83ddd4", "#4c3a15", "#174a51", "_blank", "Food: 20", "#163A3A", "#A5A244", "Damage: 2", "você também pode pegar minerais", "#262114", "#77371f", "Score", ".md-languages label button", "#c7a726", "input_ratio", " Open 5 treasure chests", "010_010_000", "eject_member", "010_110_110", "010_110_000", "#2A8B9B", "_number", "Nützlich um Gebäude zu zerstören", "Chrono Quests", "#493e26", "000_110_000", "#785f4c", "#0b3432", "canvas", "#95d5d8", "buy_kit", "#e2cf27", "You can buy items on the shop in the next game with your points", "low_ing", "#29aaa1", "#263947", "110_110_110", "amethyst_2", "Damage: 24", "nu", "#83827e", "cs", "Durabilidad: 1000", "#afac98", "#163a3a", "#1f4948", "Прочность: 1000", "#747471", "mouseup", "010_011_011", "Warm outside water and in winter", "object", "#4d4a2e", "active", "#d7990c", "WINTER", "Crab Spear", "#15514f", "Dégâts: 2", "Sushui", "#1d1d22", "#9E8456", "sw", "#e7dc8f", "000_111_000", "Jedzenie: 100", "#C1C0C0", "#c4bc51", "azerty_ing", "#b7252c", "Game", "#382e19", "#3da34d", "Players Defense: 4", "#0a0b0c", "defesa de jogadores: 4, defesa de animais: 16", "#660000", "#b29e4d", "#211108", "#8255b5", "durabilidade: 2000", "#FFFFFF", "Totem", "#adbcb5", "#D8DC74", "Schaden an Gebäuden: 1", "#e8e8e8", "#25c5d6", "010_111_111", "011_011_000", "comida: 100", "Survive without losing life", " Reward", "#3e3c25", " Collect 1 dragon heart", "Crab sticks", "#A37943", "#3A2A0D", "cursor", "shop_starterkit", "Winter", "#136167", "#ee593d", "010_111_110", "#092b29", "#5E3E1A", "#0a4049", "Durabilité: 700", "Czas życia: 8 dni", "#1F343F", "#44301b", "#120202", "#cd98e5", "application/x-www-form-urlencoded", "#e45936", "#1f343f", "Pixelbitie", "Uuunnnggg", "Damage: 3", "iblk", "Crabs follow you", "cave o chão para pegar terra, areia e gelo", "#555555", "Allow you to calm crabs, and heal them", "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.", "Chapka", "timeremain_", "110_110_000", "#29997c", "010_111_011", "#0c0c0d", "#a7983c", "#2a2938", "Grab herum um Dreck, Eis und Sand zu bekommen", "cancel_sure_delete", "#a33e2b", "#214C4B", "px Baloo Paaji", "round", "#171a19", "#d588f1", "rewardquest", "110_111_110", "wtb", "#454545", "killdragon_1", "011_111_010", "#123d38", "#b15ecf", "#7d6144", "111_111_011", "points", "#d45ce5", "img/avatar-player14.png", "#123335", "000_010_010", "111_111_110", "2d", "playing", "lock_team", "You are less cold, less thirsty, and less hungry", "#9baaa3", "Uuunnnggg...", "You will be cured faster", "Easter Egg", "starve_quality", "#032b23", "px", "Birth: 4min", "#113f3c", "000_111_011", "111_111_010", "fade", "#c3be9a", "starve_safe", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "#c1b06b", "MADBalgouthi", "servselect", "#182935", " Share on Twitter", "#2b280a", "#43aa82", "Building Damage: 4", "#3ba578", "#1e2021", "send", "#388AC7", "útil para destruir construções", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16", "Lifetime: 8 days", "Durabilité: 1000", "#3fc9c9", "rgba(255, 255, 255, 0)", "#032428", "Obrażenia do budowli: 1", "#665329", "#554139", "#030d14", "Crab claws can also be eaten", "#46554D", "Starve.io", "#C0BF55", "#eda80d", "#2b5c48", "Crab Helmet", "starve_info_box", "XPayStationWidget", "id", "init", "Schaden: 2", "gm", "#63c9d6", "Kill", "000_011_010", "time_finished_", "claim_rewards", "#B6222A", "score", " Share on Facebook", "Anyone want to play?", "011_011_010", "You feel a great power emanating from this orb", "Days survived", "#280e09", "#0d2e33", "#4C3B19", "Урон: 2", "mousemove", "#73583e", "#347f93", "aloner", "#242330", "DESERT", "recipe_craft", "auth2", "#0b2326", "FOREST", "#041c21", "#000000", "010_111_010", "Useful to destroy buildings", "#200333", "#7C5A29", "#B56D18", "#f9efeb", "Damage: 1", "000_010_000", "Haltbarkeit: 700", "#4eb687", "starve_cancel", "#87d2e6", "#b3e0e3", "account_nickname_input", "You can also gather minerals", "#0e3838", "#0a2728", "#183f3f", "none", "#d2c77b", "CLAIM REWARD!", "010_010_010", "#392C16", "inline-block", "bread_6", "Cactus", "#5E3C10", "Utile pour détruire les bâtiments", "Creuse la terre, le sable et la neige", "Time Remaining", "011_111_000", " After 1 day, survive in winter", "click", "010_110_010", "#58452b", "gw", "#1f5453", "#ac222a", "#092813", "Продолжительность: 8 дней", "Durability: 400", "Damage: 30", "#74ede6", "#0e3022", "000_110_010", "#485e66", "pos", "Daño: 2", "#2b9390", "010_111_000", "Taco4Life", "Défense: 4, Défense contre animaux: 16", "Players Defense: 4, Animals Defense: 16", "#8a938e", "Réchauffe en dehors de l'eau et dans l'hiver", "000_111_111", "middle", "#124949", "Используется для разрушения зданий", "nickname_input", "#ff0000", "#0d1b1c", "000_011_000", "treasure_chest_4", "Damage: 20", "pizza wa", "#59c9c0", "#462966", "Communist", "#394841", "</div>", "Starve.io ", "#574122", "#031619", "#EBF2F0", "#c67933", "#af59cd", "game_body", "fod", "Wytrzymałość: 1000", "Kop w ziemi aby zdobyć ziemię, lód i piasek", " : ", "#58645F", "CrysTal", "Widget", "Durabilidad: 700", "#BB0000", "#fef4f4", "#73dde5", "#077b49", "Damage: 4", "#47341d", "forest", "#083b3a", "#A89F67", "#FFF", "Защита от игроков: 4, Защита от животных: 16", "&region=", "#EDCE4F", "#68622D", "#b29c32", "Durability: 1000", "011_011_011", "#654320", "de", "string", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16", "Building method: Free. Press G to change", "111_111_111", "Durée de vie: 8 jours", "#073030", "#9b2b25", "#281C08", "dont_hit_5", "Du kannst auch Mineralien bekommen", "#24878f", "#187484", "stop", "durabilidade: 1000", "Wytrzymałość: 700", "#86d0d1", "Comida: 100", "starve_quests", "#e9dad9", "#57442a", "#ffffff", "#523e26", "#432516", "000_011_011", "#0B6A84", "starve_aliasing", "Emerald Machine", "#5cccc4", "Durabilité: 2000", "On-Hit Damage: 3", "010_011_000", "survive20min_3", "time", "#5f6061", "#141414", " Collect 100 bread in deep winter", "#EAEAEA", "#2b7c57", "#082b22", "Копайте землю, чтобы получить грязь, лед и песок", "nickname_block", "#be8d50", "destination-out", "#232828", "plm", "#4c3b19", "110_111_000", "#43b5af", "#0F3A24", "#7f6d52", "011_111_011", "Lebenszeit: 8 Tage", "Building method: Grid. Press G to change", "Pomocny w niszczeniu budowli", "dano em construções: 1", "#0a2f2b", "#107746", "#816511", "Peut aussi récupérer des minéraux", "#A9D6D3", "#564021", "#342C7C", "spectator", "Sandwich", "Защищает от холода вне воды.", "#bbbbbb", " BACK TO THE GAME", "#1b170c", "eogito", "#3f332a", "#c26de0", "Bed", "Bueno para destruir estructuras", "#b864d6", "110_111_111", "inv_shop", "#083326", "#1a4935", "Food: 10", "Прочность: 2000", "re", "#8359d3", "durabilidade: 700", "typequest", "#f4efc6", "#072824", "#313041", "#133a2b", "#ddcf8a", "#c04933", "qwerty_ing", "#C09D6F", "#86d4e0", "#2b6664", "upfiz", " Constraints", " QUIT", "#111316", "#0F464C", "#6a7570", "constraintquest", "#096d41", "111_111_000", "home_craft", "claim_reward_", "Dig the ground to gather dirt, ice, and sand", "high_ing", "Damage: 14", "la", "Прочность: 700", "#b2d4d1", "When you are flying,", "Essen: 100", "winter_7", "Haltbarkeit: 1000", "Daño para estructuras: 1", "#877d36", "#e6636a", "dano: 2", "You can not attack when you use it", "011_111_110", "#54a4ba", "#a9e4ed"];
	const ⵠᐃⵠᐃⵠ = ᐃᐃⲆΔⵠ;
	const ΔⲆᐃⲆⵠ = undefined;
	const ΔᐃⲆΔⲆ = 11;
	const ⵠⵠᐃΔΔ = 23 - 3 - 7;
	const ᐃⵠⲆⲆΔ = -2882 + 1618 + 438 + 810 + 33 + 1;
	const ⲆΔⲆⵠⲆ = 236 + 1 + 8 + 4 + 3 + 2 + 1;
	const ⵠⲆᐃⵠⲆⲆⲆ = 859 + 123 + 47 + 34 + 8 + 1 + 7 + 1;
	const ⲆⵠᐃⲆⵠ = 17;
	const ΔⵠⵠⲆⲆᐃⵠ = 1920;
	const ΔᐃⲆΔⵠΔᐃ = -8;
	const ⲆΔᐃᐃⵠᐃᐃ = -4;
	const ᐃᐃΔⵠⵠ = 110 - 7 - 2 - 1;
	const ⲆⲆⲆⵠⲆ = true;
	const ᐃΔᐃⵠⲆ = -1088 + 310 + 136 + 561 + 71 + 2 + 11 + 3 + 2;
	const ᐃⲆⵠᐃⵠ = false;
	const ᐃⲆⵠᐃ = 3 - 1;
	const ᐃᐃⲆᐃΔᐃⲆ = -1253 + 1399 + 74 + 28 + 3 + 3 + 1 + 1;
	const ⲆΔⵠⲆᐃⲆⲆ = ⲆⲆΔ;
	const ΔᐃᐃΔᐃ = 15;
	const ⲆⲆⲆⵠⵠ = 20;
	const ᐃΔᐃⲆⵠᐃᐃ = 1;
	const ⵠⵠⲆⲆⵠ = 14 - 6 - 2;
	const ΔⲆᐃᐃᐃ = ᐃⵠⲆⲆΔ;
	const ⵠΔᐃⲆ = -760 + 576 + 4 + 132 + 23 + 7 + 13 + 8 + 1;
	const ⲆᐃᐃΔΔ = 7;
	const ⵠᐃᐃⵠⵠ = -2929 + 1719 + 168 + 255 + 49 + 583 + 90 + 55 + 15 + 5 + 5 + 1;
	const ⵠΔΔᐃⲆⲆΔᐃΔ = 1 << ⲆⲆΔ;
	const ⵠⵠⵠᐃⲆⵠⲆ = 1 << 1;
	const ΔΔΔᐃᐃ = ⵠⵠᐃΔΔ;
	const ⲆᐃΔΔⵠⵠⵠ = ΔⵠⵠⲆⲆᐃⵠ;
	const ᐃⲆⵠⵠᐃ = -1817 + 1719 + 43 + 17 + 32 + 4 + 10 + 2 + 1 + 1 + 1 + 1;
	const ᐃΔⲆΔᐃⵠΔ = 1 << ᐃⲆⵠᐃ;
	const ᐃᐃⲆΔΔⵠᐃ = 1 << ΔᐃⲆΔⲆ;
	const ⲆⵠΔⵠΔΔᐃ = 6;
	const ᐃⲆⲆΔⵠ = 12;
	const ΔᐃΔⵠᐃᐃⵠ = 1 * 16384;
	const ⲆⵠᐃⲆⵠΔⲆ = 1 << 12;
	const ⲆΔΔΔⲆ = ΔΔΔᐃᐃ;
	const ⵠⵠᐃⵠᐃⵠⲆ = ⵠⲆᐃⵠⲆⲆⲆ;
	const ⵠᐃΔⲆΔ = ⲆΔⲆⵠⲆ;
	const ΔΔⲆΔΔ = 16 - 5 - 1;
	const ᐃⵠΔΔΔⲆⵠ = ⲆⲆΔ;
	const ΔΔⵠⵠ = 5;
	const ⲆⲆⲆΔ = ⵠΔᐃⲆ;
	const ᐃΔΔΔΔ = ⲆⲆⲆⵠⲆ;
	const ⲆᐃⲆⵠᐃⵠᐃ = 4;
	const ᐃΔᐃⲆ = 3;
	const ᐃⲆᐃᐃᐃ = ⵠⵠⵠᐃⵠ;
	let ΔⲆⵠⲆⲆⲆᐃ = ΔⲆᐃⲆⵠ;
	const ᐃⵠᐃⲆᐃⲆⵠ = 12;
	const ⵠΔⲆΔⲆΔΔᐃΔ = String.fromCharCode;
	const ⲆΔⵠⵠⲆΔⵠ = 101;
	const ⵠⲆⵠⵠᐃΔⲆ = 118;
	const ΔΔⲆᐃⵠⲆᐃᐃᐃ = "ⲆⲆᐃⵠⵠⵠⲆ";
	const ᐃΔⲆᐃⵠⲆᐃⲆΔ = 97;
	const ᐃⲆᐃΔᐃⵠⲆ = 108;
	const ᐃⲆⵠⲆⲆΔⵠ = ⵠΔⲆΔⲆΔΔᐃΔ(ⲆΔⵠⵠⲆΔⵠ);
	const ΔᐃⲆⵠΔᐃΔ = ⵠΔⲆΔⲆΔΔᐃΔ(ⵠⲆⵠⵠᐃΔⲆ);

	function ⲆⲆᐃⵠⵠⵠⲆ() {
		ᐃⲆΔᐃⲆⲆⵠ = ⲆⲆᐃⵠⵠⵠⲆ;
		return ⲆⲆᐃⵠⵠⵠⲆ
	}
	const ᐃⲆⵠᐃΔᐃΔΔᐃ = ⵠΔⲆΔⲆΔΔᐃΔ(ᐃΔⲆᐃⵠⲆᐃⲆΔ);
	const ⲆⵠᐃⵠΔΔᐃ = ⵠΔⲆΔⲆΔΔᐃΔ(ᐃⲆᐃΔᐃⵠⲆ);
	const ⲆⲆᐃⵠᐃⵠⲆΔⲆ = ᐃⲆⵠⲆⲆΔⵠ + ΔᐃⲆⵠΔᐃΔ + ᐃⲆⵠᐃΔᐃΔΔᐃ + ⲆⵠᐃⵠΔΔᐃ;
	const ⵠΔⵠᐃᐃΔΔ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⲆᐃⵠᐃⵠⲆΔⲆ];
	const ⵠᐃⲆⲆⲆᐃⵠ = ⵠΔⵠᐃᐃΔΔ(ⲆⲆᐃⵠⵠⵠⲆ + "try{" + ΔΔⲆᐃⵠⲆᐃᐃᐃ + "();0;}catch(ᐃⲆⵠᐃΔᐃΔΔᐃ){1;}");
	if (ⵠᐃⲆⲆⲆᐃⵠ) {
		const ⵠΔⲆΔⲆΔΔᐃΔ = Math.random;
		const ⵠⲆⵠⵠᐃΔⲆ = [];
		const ⲆΔⵠⵠⲆΔⵠ = function() {
			for (let ᐃΔⲆᐃⵠⲆᐃⲆΔ = 0; ᐃΔⲆᐃⵠⲆᐃⲆΔ < 8124; ᐃΔⲆᐃⵠⲆᐃⲆΔ++) ⵠⲆⵠⵠᐃΔⲆ.push(ᐃΔⲆᐃⵠⲆᐃⲆΔ);
			return ⵠΔⲆΔⲆΔΔᐃΔ()
		};
		Math.random = ⲆΔⵠⵠⲆΔⵠ
	}
	const ᐃΔⲆⲆⵠᐃΔ = 8;
	const ᐃᐃΔΔᐃΔΔ = ⵠᐃᐃⵠⵠ;
	const ⲆᐃⵠΔⲆᐃᐃ = ᐃⲆⲆΔⵠ;
	let ⵠⵠᐃⲆⲆᐃⲆ = undefined;
	const ⲆⲆΔΔ = ᐃΔᐃⲆ;
	const ⵠΔⵠⵠⵠ = ⲆⵠᐃⲆⵠ;
	let ᐃⵠΔᐃᐃⵠᐃ = ΔⲆᐃⲆⵠ;
	const ⵠΔΔⵠⲆ = ⵠⵠⲆⲆⵠ;
	const ⵠⲆΔᐃ = ᐃⲆⵠᐃ;
	let ΔⵠⵠⲆᐃ = undefined;
	let ⵠⵠⵠᐃⵠᐃⲆ = undefined;
	const ⵠΔΔⲆΔ = ΔⲆᐃⲆⵠ;
	let ᐃΔΔⲆᐃⵠᐃ = ⵠΔΔⲆΔ;
	const ᐃΔᐃᐃΔ = ᐃⲆⵠᐃⵠ;
	let ᐃΔᐃᐃⵠΔΔ = ΔⲆᐃⲆⵠ;
	const ⵠΔⵠⵠⲆ = ⵠΔΔⵠⲆ;
	let ΔᐃΔᐃᐃ = [];
	let ΔΔΔⲆᐃⲆᐃ = ⵠΔΔⲆΔ;
	const ᐃᐃΔⵠΔ = ᐃΔΔΔΔ;
	const ᐃᐃⵠᐃᐃⵠⲆ = ⵠⲆᐃⵠⲆⲆⲆ;
	let ΔᐃᐃⲆΔⲆᐃ = "_";
	let ᐃⵠΔⲆΔⵠᐃ = ΔⲆᐃⲆⵠ;
	const ΔᐃΔⲆΔ = ⲆΔΔΔⲆ;
	let ⲆᐃⵠⵠᐃⵠΔ = undefined;
	const Ⲇⵠᐃⵠᐃ = ᐃⲆⵠᐃⵠ;
	let ⲆᐃᐃᐃⲆᐃᐃ = ΔⲆᐃⲆⵠ;
	let ᐃΔⲆᐃⵠⵠᐃ = ΔⲆᐃⲆⵠ;
	let ᐃᐃᐃⵠΔ = ΔⲆᐃⲆⵠ;
	let ᐃᐃⵠⲆᐃΔⵠ = undefined;
	let ⵠⵠᐃⵠⲆΔΔ = ΔⲆᐃⲆⵠ;
	const ⵠⵠⲆᐃ = ᐃΔᐃⲆ;
	let ⵠⵠᐃᐃΔΔΔ = undefined;
	const ᐃⲆⵠⵠⲆΔⲆ = ΔᐃⲆΔⲆ;
	let ᐃΔⲆΔⵠⵠᐃ = ΔⲆᐃⲆⵠ;
	let ⵠⲆΔⵠⲆⲆΔ = undefined;
	const ᐃΔΔⵠΔ = ⵠᐃⵠᐃⵠ;
	let ⲆⵠⵠⲆΔⲆΔ = undefined;
	const ⲆᐃᐃⵠΔΔᐃ = ⲆΔΔΔⲆ;
	let ⵠΔΔΔⲆⲆⲆ = ⵠΔΔⲆΔ;
	let ΔΔⵠⵠⵠⵠΔ = ⵠΔΔⲆΔ;
	let ΔᐃΔᐃΔᐃⲆ = ΔⲆᐃⲆⵠ;
	let ⵠⵠΔⲆᐃΔΔ = ΔⲆᐃⲆⵠ;
	const ᐃⲆᐃⲆⵠ = ᐃⲆⲆΔⵠ;
	const ⵠⲆⲆⵠ = ΔΔⵠⵠ;
	let ᐃΔⲆᐃΔΔᐃ = ⵠΔΔⲆΔ;
	const ΔⵠⲆᐃΔ = ΔΔⲆΔΔ;
	const ⲆᐃᐃᐃΔᐃΔ = ᐃᐃⲆᐃΔᐃⲆ;
	const ⵠⵠⲆΔⲆ = ΔᐃᐃΔᐃ;
	let ⲆⵠΔᐃᐃΔⲆ = undefined;
	let ⵠⵠᐃΔⵠᐃᐃ = undefined;
	const ⵠⲆΔΔⵠ = ⵠΔⵠⵠⵠ;
	const ᐃΔⲆⵠⲆⲆᐃ = {};
	const ᐃᐃⵠⵠⲆⵠⵠ = {};
	ᐃΔⲆⵠⲆⲆᐃ["get"] = function(ⲆⵠΔᐃΔΔⵠ, ᐃΔΔΔᐃⲆⵠ) {
		if (ᐃΔΔΔᐃⲆⵠ !== "ᐃΔⲆⵠⲆⲆᐃ") {
			const ᐃΔⲆⵠⲆⲆᐃ = function() {
				ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("mousemove", (function() {
					ᐃΔⲆⵠⲆⲆᐃ()
				}))
			};
			ᐃΔⲆⵠⲆⲆᐃ()
		}
		return ⲆⵠᐃΔᐃⵠⲆ["Reflect"]["get"](...arguments)
	};
	const ΔΔⵠⵠΔΔⵠ = new ⲆⵠᐃΔᐃⵠⲆ["Proxy"](ᐃᐃⵠⵠⲆⵠⵠ, ᐃΔⲆⵠⲆⲆᐃ);
	const ⲆΔΔⲆⲆⲆⲆΔᐃ = ΔΔⵠⵠΔΔⵠ.ᐃΔⲆⵠⲆⲆᐃ;
	const ⵠᐃⵠⲆⲆ = ⲆᐃᐃΔΔ;
	const Δⵠᐃⵠᐃ = ᐃᐃΔⵠⵠ;
	const ΔⲆᐃⲆᐃⲆⲆ = ᐃⵠⲆⲆΔ;
	let ᐃⲆⲆⵠᐃⵠⵠ = ΔⲆᐃⲆⵠ;
	let ΔⵠᐃᐃᐃⵠⲆ = undefined;
	let ᐃΔⵠᐃⵠΔⵠ = ⵠΔΔⲆΔ;
	const ⵠⲆⵠⲆⵠ = ⵠΔΔⵠⲆ;
	const ⲆⵠⲆ = ⲆⲆⵠ;
	let ⵠᐃⲆⲆⲆΔΔ = undefined;
	let ΔⵠΔⲆΔⵠᐃ = undefined;
	const ⲆᐃⵠⲆⵠ = ᐃⲆᐃⲆⵠ;
	const ⵠᐃⲆⵠⲆ = ⵠΔΔⲆΔ;
	let ⲆⵠⲆⵠⲆᐃᐃ = undefined;
	const Δᐃⵠⵠᐃ = ᐃΔᐃⵠⲆ;
	const ΔᐃΔⲆ = ⵠⵠⲆᐃ;
	const ΔΔⵠⲆⵠ = ΔΔⲆΔΔ;
	let ᐃΔⵠΔΔⵠⲆ = ⵠΔΔⲆΔ;
	const ⲆⲆⲆⲆᐃ = ⲆⲆⲆⵠⵠ;
	const ΔΔᐃⲆⲆ = ⵠᐃΔⲆΔ;
	const ⵠᐃⵠΔΔ = ΔᐃᐃΔᐃ;
	const ⲆⲆⵠⵠᐃ = ᐃⲆᐃᐃᐃ;
	const ᐃΔᐃⲆⲆ = ⵠᐃᐃⵠⵠ;
	let ⲆⲆⲆⲆᐃΔⵠ = ⵠΔΔⲆΔ;
	let ⲆⵠᐃⲆⲆⵠΔ = undefined;
	const ⵠⵠⵠ = ⲆⲆΔ;
	const ⲆⵠⲆⲆⵠ = ⲆⲆⵠⵠᐃ;
	let ⲆᐃᐃᐃᐃⲆᐃ = ⵠᐃⲆⵠⲆ;
	let ⵠΔΔΔⲆⲆⵠ = ΔⲆᐃⲆⵠ;
	const ᐃⵠΔⵠᐃᐃⵠ = ΔⵠⵠⲆⲆᐃⵠ;
	const ⲆⲆᐃⲆⲆⲆⵠ = ᐃⲆⵠⵠᐃ;
	let ΔⲆᐃⵠᐃᐃⲆ = undefined;
	const ⲆΔΔⵠᐃⲆⵠ = ⲆⲆⲆⵠⲆ;
	const ΔⲆⲆᐃΔ = ᐃⲆⵠᐃⵠ;
	let ᐃΔⲆⲆⲆᐃΔ = undefined;
	const ᐃⵠΔⵠ = ⵠⲆⲆⵠ;
	let ⲆⵠᐃΔⵠⲆᐃ = undefined;
	const ⲆⵠⲆᐃⵠ = ᐃⲆᐃⲆⵠ;
	let ᐃᐃⵠΔⵠᐃⲆ = undefined;
	const ⲆⲆⲆⵠᐃ = ⲆΔⲆⵠⲆ;
	const ⵠΔᐃᐃ = ⵠⵠⲆⲆⵠ;
	let ⲆⵠⵠᐃΔⵠⵠ = ⵠᐃⲆⵠⲆ;
	let ⲆΔΔΔᐃΔᐃ = undefined;
	let ΔΔⵠΔⲆⵠᐃ = ΔⲆᐃⲆⵠ;
	let ΔΔⲆⵠᐃⲆΔ = ⵠΔΔⲆΔ;
	const ᐃⲆᐃⲆᐃΔᐃ = ⵠⲆΔΔⵠ;
	let ⲆΔᐃᐃΔΔⲆ = undefined;
	let ΔΔⵠᐃⲆⵠⵠ = ΔⲆᐃⲆⵠ;
	let ΔΔΔΔΔⵠᐃ = undefined;
	let ᐃᐃⵠⲆⲆΔᐃ = ⵠΔΔⲆΔ;
	let ᐃⵠΔᐃΔⲆᐃ = undefined;
	let ⵠⲆᐃⵠⲆⲆⵠ = undefined;
	let ΔΔⵠⲆⵠᐃⵠ = 0;
	if (!ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[222]] || !ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[222]].instantiate) ᐃΔΔΔᐃⵠⵠΔⲆ();
	const ⵠⵠΔΔⵠ = ᐃⲆⵠⵠᐃ;
	const ΔΔⲆΔ = ⲆⲆⲆΔ;
	const ⲆΔⲆᐃ = ⲆⲆΔΔ;
	const ΔᐃⲆⲆⲆᐃᐃ = {
		Date: Date
	};
	ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[222]].instantiate(Uint8Array.from(ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[72]](""), (function(ᐃΔⵠΔⵠⵠᐃ) {
		return ᐃΔⵠΔⵠⵠᐃ.charCodeAt(ⲆⲆΔ)
	})), ΔᐃⲆⲆⲆᐃᐃ).then((function(ᐃⲆⲆⵠⲆⵠΔ) {
		ΔⲆⵠⲆⲆⲆᐃ = ᐃⲆⲆⵠⲆⵠΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[295]];
		ⵠⵠᐃⲆⲆᐃⲆ = ΔⲆⵠⲆⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[47]];
		ᐃⵠΔᐃᐃⵠᐃ = ⵠⵠᐃⲆⲆᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[204]];
		ΔⵠⵠⲆᐃ = ᐃⵠΔᐃᐃⵠᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[309]];
		ⵠⵠⵠᐃⵠᐃⲆ = ⵠⵠᐃⲆⲆᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[102]];
		ᐃΔΔⲆᐃⵠᐃ = ⵠⵠᐃⲆⲆᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[11]];
		ᐃΔᐃᐃⵠΔΔ = ⵠⵠᐃⲆⲆᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[12]];
		ΔΔΔⲆᐃⲆᐃ = ⵠⵠᐃⲆⲆᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[260]];
		ΔᐃᐃⲆΔⲆᐃ = "_";
		for (let ᐃⲆ = 0; 31 > ᐃⲆ; ᐃⲆ++) ΔᐃΔᐃᐃ[ᐃⲆ] = ⵠⵠᐃⲆⲆᐃⲆ[ΔᐃᐃⲆΔⲆᐃ + ᐃⲆ];
		ᐃⵠΔⲆΔⵠᐃ = ⵠⵠᐃⲆⲆᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[246]];
		ⲆᐃⵠⵠᐃⵠΔ = new Float32Array(ΔⵠⵠⲆᐃ);
		ᐃΔⲆᐃⵠⵠᐃ = new Float64Array(ΔⵠⵠⲆᐃ);
		ⲆᐃᐃᐃⲆᐃᐃ = new BigUint64Array(ΔⵠⵠⲆᐃ);
		ᐃᐃᐃⵠΔ = new Uint32Array(ΔⵠⵠⲆᐃ);
		ᐃᐃⵠⲆᐃΔⵠ = new Uint16Array(ΔⵠⵠⲆᐃ);
		ⵠⵠᐃⵠⲆΔΔ = new Uint8Array(ΔⵠⵠⲆᐃ);
		ⵠⵠᐃᐃΔΔΔ = new BigInt64Array(ΔⵠⵠⲆᐃ);
		ᐃΔⲆΔⵠⵠᐃ = new Int32Array(ΔⵠⵠⲆᐃ);
		ⵠⲆΔⵠⲆⲆΔ = new Int16Array(ΔⵠⵠⲆᐃ);
		ⲆⵠⵠⲆΔⲆΔ = new Int8Array(ΔⵠⵠⲆᐃ);
		ⵠΔΔΔⲆⲆⵠ = ΔᐃΔᐃᐃ[ᐃⲆᐃᐃᐃ];
		ΔⲆᐃⵠᐃᐃⲆ = ΔᐃΔᐃᐃ[3];
		ᐃΔⵠΔΔⵠⲆ = ΔᐃΔᐃᐃ[ⵠⲆⲆⵠ];
		ⵠⵠΔⲆᐃΔΔ = ΔᐃΔᐃᐃ[15];
		ΔᐃΔᐃΔᐃⲆ = ΔᐃΔᐃᐃ[21];
		ᐃᐃⵠⲆⲆΔᐃ = ΔᐃΔᐃᐃ[25];
		ᐃⲆⲆⵠᐃⵠⵠ = ΔᐃΔᐃᐃ[26];
		ⲆⵠⵠᐃΔⵠⵠ = ΔᐃΔᐃᐃ[20];
		ⲆᐃᐃᐃᐃⲆᐃ = ΔᐃΔᐃᐃ[13];
		ᐃᐃⵠΔⵠᐃⲆ = ΔᐃΔᐃᐃ[ⲆⲆᐃⲆⲆⲆⵠ];
		ⲆⵠᐃΔⵠⲆᐃ = ΔᐃΔᐃᐃ[2];
		ⲆΔΔΔᐃΔᐃ = ΔᐃΔᐃᐃ[1];
		ⲆⵠΔᐃᐃΔⲆ = ΔᐃΔᐃᐃ[ⵠⲆΔΔⵠ];
		ᐃΔⲆⲆⲆᐃΔ = ΔᐃΔᐃᐃ[6];
		ΔΔⵠᐃⲆⵠⵠ = ΔᐃΔᐃᐃ[27];
		ᐃⵠΔᐃΔⲆᐃ = ΔᐃΔᐃᐃ[24];
		ⲆⲆⲆⲆᐃΔⵠ = ΔᐃΔᐃᐃ[30];
		ᐃΔⵠᐃⵠΔⵠ = ΔᐃΔᐃᐃ[ΔⲆᐃⲆᐃⲆⲆ];
		ΔΔΔΔΔⵠᐃ = ΔᐃΔᐃᐃ[10];
		ᐃΔⲆᐃΔΔᐃ = ΔᐃΔᐃᐃ[Δᐃⵠⵠᐃ];
		ⲆⵠⲆⵠⲆᐃᐃ = ΔᐃΔᐃᐃ[16];
		ⵠᐃⲆⲆⲆΔΔ = ΔᐃΔᐃᐃ[29];
		ⲆⵠᐃⲆⲆⵠΔ = ΔᐃΔᐃᐃ[7];
		ΔⵠΔⲆΔⵠᐃ = ΔᐃΔᐃᐃ[23];
		ⵠΔΔΔⲆⲆⲆ = ΔᐃΔᐃᐃ[ΔᐃⲆΔⲆ];
		ΔⵠᐃᐃᐃⵠⲆ = ΔᐃΔᐃᐃ[12];
		ΔΔⵠΔⲆⵠᐃ = ΔᐃΔᐃᐃ[0];
		ΔΔⲆⵠᐃⲆΔ = ΔᐃΔᐃᐃ[19];
		ΔΔⵠⵠⵠⵠΔ = ΔᐃΔᐃᐃ[ΔΔⲆΔ];
		ⵠⵠᐃΔⵠᐃᐃ = ΔᐃΔᐃᐃ[28];
		ⲆΔᐃᐃΔΔⲆ = ΔᐃΔᐃᐃ[22];
		ΔΔⵠⲆⵠᐃⵠ = ⲆⵠⲆ;
		ⵠⲆᐃⵠⲆⲆⵠ && ⵠⲆᐃⵠⲆⲆⵠ()
	}));
	const ⲆΔᐃᐃⲆ = ⵠᐃⵠⲆⲆ;
	const ⵠⵠⲆⵠⵠ = ᐃⲆⵠⵠᐃ;
	const ⵠΔΔΔΔⵠΔ = ⵠᐃⵠΔΔ;

	function ⲆⵠⵠⵠΔᐃᐃ(ΔⵠⲆᐃᐃ) {
		return ᐃᐃᐃⵠΔ[(ᐃⵠΔⲆΔⵠᐃ + 4 >>> ⵠⲆΔᐃ) + (ΔⵠⲆᐃᐃ << 1)]
	}

	function ⲆⵠΔⵠⲆΔⵠᐃⵠ(ΔⲆᐃⲆⵠᐃⵠ) {
		return ΔⲆᐃⲆⵠᐃⵠ[ᐃⵠΔⲆΔⵠᐃ >>> 2]
	}
	const ᐃⲆᐃᐃⲆⲆΔ = ⵠⵠᐃⵠᐃⵠⲆ;
	const ᐃΔᐃᐃⲆ = ⲆΔᐃᐃⲆ;
	const ⲆⲆᐃⵠⲆⵠⵠ = ⵠᐃⵠΔΔ;
	const ᐃΔᐃᐃⵠᐃⲆ = ⲆⵠⵠⵠΔᐃᐃ;

	function ⲆΔΔⲆⲆᐃⵠ(ᐃⵠᐃⵠⲆ) {
		return 31 - Math.clz32(ᐃⵠᐃⵠⲆ >>> ⲆⵠΔⵠΔΔᐃ & 31)
	}
	const ΔⵠΔᐃΔ = ΔⵠⲆᐃΔ;
	const ⵠⲆⵠⲆᐃ = ⵠᐃⵠᐃⵠ;
	const ⲆⲆⵠⵠΔ = ᐃᐃΔⵠΔ;
	const ΔᐃᐃΔⲆᐃⲆ = ΔΔᐃⲆⲆ;
	const ΔⵠᐃΔᐃ = ⵠᐃⲆⵠⲆ;

	function ᐃⵠΔⲆΔⵠΔᐃⵠ(ΔⲆⲆⵠⲆ) {
		const ᐃᐃᐃⲆⵠⵠᐃ = new Uint8Array(ΔⲆⲆⵠⲆ);
		const ΔⵠⵠⲆⵠ = ᐃΔᐃᐃⵠΔΔ(ᐃᐃᐃⲆⵠⵠᐃ.length, ⲆΔⵠⲆᐃⲆⲆ);
		ⵠⵠᐃⵠⲆΔΔ.set(ᐃᐃᐃⲆⵠⵠᐃ, ΔⵠⵠⲆⵠ);
		return ΔⵠⵠⲆⵠ
	}

	function ᐃⲆⲆⲆᐃᐃⲆΔⵠ(ΔΔΔᐃⵠΔⲆ) {
		const ΔᐃⲆⵠⲆ = ΔΔΔᐃⵠΔⲆ.length;
		const ΔⵠⵠⲆⵠ = ⵠⵠⲆΔⲆⵠⲆ(2 * ΔᐃⲆⵠⲆ, ᐃΔᐃⲆⵠᐃᐃ);
		const ⲆⲆᐃⲆᐃΔⲆ = new Uint16Array(ΔⵠⵠⲆᐃ);
		for (var ᐃⲆ = 0, ᐃⵠⲆ = ΔⵠⵠⲆⵠ >>> ⲆⲆⵠ; ΔᐃⲆⵠⲆ > ᐃⲆ; ++ᐃⲆ) ⲆⲆᐃⲆᐃΔⲆ[ᐃⵠⲆ + ᐃⲆ] = ΔΔΔᐃⵠΔⲆ.charCodeAt(ᐃⲆ);
		return ΔⵠⵠⲆⵠ
	}
	const ⵠΔⵠᐃΔⲆᐃΔⵠ = ᐃⵠΔⵠᐃᐃⵠ;

	function ⲆᐃΔⲆΔᐃᐃᐃᐃ(ΔⵠⵠⲆⵠ) {
		let ⲆΔᐃⵠᐃⲆⲆ = "";
		ΔⵠⵠⲆⵠ /= 2;
		const ᐃⲆΔⲆⲆ = ᐃᐃᐃⵠΔ[ΔⵠⵠⲆⵠ / 2 - 1] / 2;
		for (let ᐃⲆ = ⲆⲆΔ; ᐃⲆΔⲆⲆ > ᐃⲆ; ᐃⲆ++) ⲆΔᐃⵠᐃⲆⲆ += String.fromCharCode(ᐃᐃⵠⲆᐃΔⵠ[ΔⵠⵠⲆⵠ++]);
		return ⲆΔᐃⵠᐃⲆⲆ
	}
	const ᐃⵠΔⲆⲆ = ᐃⲆⵠⵠⲆΔⲆ;
	const ΔΔⲆⲆⲆ = ΔⲆᐃⲆⵠ;

	function ⲆⵠΔᐃⲆⲆᐃ(ΔᐃΔⲆᐃⵠΔ, ΔⵠᐃⵠⵠⲆΔ, ⲆⲆⲆᐃᐃⲆⵠ) {
		if (ⲆⲆⲆᐃᐃⲆⵠ) {
			switch (ΔᐃΔⲆᐃⵠΔ) {
				case ᐃⲆⵠᐃ:
					return ⲆᐃⵠⵠᐃⵠΔ;
				case ᐃΔᐃⲆ:
					return ᐃΔⲆᐃⵠⵠᐃ
			}
		} else {
			switch (ΔᐃΔⲆᐃⵠΔ) {
				case ⲆⲆΔ:
					return ΔⵠᐃⵠⵠⲆΔ ? ⲆⵠⵠⲆΔⲆΔ : ⵠⵠᐃⵠⲆΔΔ;
				case 1:
					return ΔⵠᐃⵠⵠⲆΔ ? ⵠⲆΔⵠⲆⲆΔ : ᐃᐃⵠⲆᐃΔⵠ;
				case 2:
					return ΔⵠᐃⵠⵠⲆΔ ? ᐃΔⲆΔⵠⵠᐃ : ᐃᐃᐃⵠΔ;
				case 3:
					return ΔⵠᐃⵠⵠⲆΔ ? ⵠⵠᐃᐃΔΔΔ : ⲆᐃᐃᐃⲆᐃᐃ
			}
		}
	}
	const ⲆΔⲆⲆⵠ = ⲆⲆⲆⵠⵠ;
	const ⲆⵠⵠⲆ = ⲆΔⲆᐃ;
	const ⲆⵠⲆⵠⲆ = ⵠⲆⵠⲆᐃ;
	const ΔⲆΔⵠⲆ = ᐃΔΔΔΔ;

	function ⲆᐃⵠⵠⲆⵠᐃⵠᐃ(ΔⵠⲆᐃᐃ, ᐃΔΔΔᐃⲆΔ) {
		ᐃΔΔΔᐃⲆΔ = ᐃΔΔΔᐃⲆΔ || ⵠⵠⵠ;
		const ΔⵠⲆⵠᐃⲆΔ = ᐃΔΔΔᐃⲆΔ;
		const ᐃⵠᐃⵠⲆ = ᐃΔᐃᐃⵠᐃⲆ(ΔⵠⲆᐃᐃ);
		const ⲆᐃᐃᐃᐃΔⲆ = ⲆΔΔⲆⲆᐃⵠ(ᐃⵠᐃⵠⲆ);
		const ⲆⵠᐃᐃⵠⵠΔ = "number" !== typeof ΔⵠⲆⵠᐃⲆΔ;
		const ΔᐃⲆⵠⲆ = ⲆⵠᐃᐃⵠⵠΔ ? ΔⵠⲆⵠᐃⲆΔ.length : ΔⵠⲆⵠᐃⲆΔ;
		const ΔⲆⲆⵠⲆ = ᐃΔᐃᐃⵠΔΔ(ΔᐃⲆⵠⲆ << ⲆᐃᐃᐃᐃΔⲆ, ᐃⵠᐃⵠⲆ & ᐃΔⲆΔᐃⵠΔ ? ΔⵠⲆᐃᐃ : ⲆΔⵠⲆᐃⲆⲆ);
		let ⲆⲆᐃᐃΔΔⲆ;
		if (ᐃⵠᐃⵠⲆ & ᐃΔⲆΔᐃⵠΔ) {
			ⲆⲆᐃᐃΔΔⲆ = ΔⲆⲆⵠⲆ
		} else {
			ⵠⵠⵠᐃⵠᐃⲆ(ΔⲆⲆⵠⲆ);
			const ΔΔⲆⵠⵠ = ᐃΔᐃᐃⵠΔΔ(ᐃⵠᐃⵠⲆ & ⵠⵠⵠᐃⲆⵠⲆ ? ᐃᐃΔΔᐃΔΔ : ᐃⵠᐃⲆᐃⲆⵠ, ΔⵠⲆᐃᐃ);
			ᐃΔΔⲆᐃⵠᐃ(ΔⲆⲆⵠⲆ);
			ᐃᐃᐃⵠΔ[ΔΔⲆⵠⵠ + ᐃⵠΔΔΔⲆⵠ >>> 2] = ΔⲆⲆⵠⲆ;
			ᐃᐃᐃⵠΔ[ΔΔⲆⵠⵠ + ⲆᐃⲆⵠᐃⵠᐃ >>> 2] = ΔⲆⲆⵠⲆ;
			ᐃᐃᐃⵠΔ[ΔΔⲆⵠⵠ + ᐃΔⲆⲆⵠᐃΔ >>> ⵠⲆΔᐃ] = ΔᐃⲆⵠⲆ << ⲆᐃᐃᐃᐃΔⲆ;
			ᐃⵠᐃⵠⲆ & ⵠⵠⵠᐃⲆⵠⲆ && (ᐃᐃᐃⵠΔ[ΔΔⲆⵠⵠ + ⲆᐃⵠΔⲆᐃᐃ >>> 2] = ΔᐃⲆⵠⲆ);
			ⲆⲆᐃᐃΔΔⲆ = ΔΔⲆⵠⵠ
		}
		if (ⲆⵠᐃᐃⵠⵠΔ) {
			const ΔᐃⲆᐃⲆⲆⵠ = ⲆⵠΔᐃⲆⲆᐃ(ⲆᐃᐃᐃᐃΔⲆ, ᐃⵠᐃⵠⲆ & ᐃᐃⲆΔΔⵠᐃ, ᐃⵠᐃⵠⲆ & ⲆⵠᐃⲆⵠΔⲆ);
			const ⲆⵠᐃᐃΔΔᐃ = ΔⲆⲆⵠⲆ >>> ⲆᐃᐃᐃᐃΔⲆ;
			if (ᐃⵠᐃⵠⲆ & ΔᐃΔⵠᐃᐃⵠ) {
				for (let ᐃⲆ = ⲆⲆΔ; ᐃⲆ < ΔᐃⲆⵠⲆ; ++ᐃⲆ) {
					ΔᐃⲆᐃⲆⲆⵠ[ⲆⵠᐃᐃΔΔᐃ + ᐃⲆ] = ΔⵠⲆⵠᐃⲆΔ[ᐃⲆ]
				}
			} else {
				ΔᐃⲆᐃⲆⲆⵠ.set(ΔⵠⲆⵠᐃⲆΔ, ⲆⵠᐃᐃΔΔᐃ)
			}
		}
		return ⲆⲆᐃᐃΔΔⲆ
	}
	const ᐃⲆᐃⵠΔ = ⲆⵠᐃⲆⵠ;
	const ⲆᐃᐃⲆⵠⲆⵠ = ᐃᐃⲆᐃΔᐃⲆ;

	function ΔⲆᐃᐃⵠᐃⲆ(ΔΔⲆⵠⵠ) {
		const ΔⵠⲆᐃᐃ = ᐃᐃᐃⵠΔ[ΔΔⲆⵠⵠ + ΔᐃⲆΔⵠΔᐃ >>> 2];
		const ᐃⵠᐃⵠⲆ = ᐃΔᐃᐃⵠᐃⲆ(ΔⵠⲆᐃᐃ);
		const ⲆᐃᐃᐃᐃΔⲆ = ⲆΔΔⲆⲆᐃⵠ(ᐃⵠᐃⵠⲆ);
		let ΔⲆⲆⵠⲆ = ᐃⵠᐃⵠⲆ & ᐃΔⲆΔᐃⵠΔ ? ΔΔⲆⵠⵠ : ᐃᐃᐃⵠΔ[ΔΔⲆⵠⵠ + ⲆᐃⲆⵠᐃⵠᐃ >>> 2];
		const ΔᐃⲆⵠⲆ = ᐃⵠᐃⵠⲆ & ⵠⵠⵠᐃⲆⵠⲆ ? ᐃᐃᐃⵠΔ[ΔΔⲆⵠⵠ + ⲆᐃⵠΔⲆᐃᐃ >>> ᐃⲆⵠᐃ] : ᐃᐃᐃⵠΔ[ΔⲆⲆⵠⲆ + ⲆΔᐃᐃⵠᐃᐃ >>> 2] >>> ⲆᐃᐃᐃᐃΔⲆ;
		return ⲆⵠΔᐃⲆⲆᐃ(ⲆᐃᐃᐃᐃΔⲆ, ᐃⵠᐃⵠⲆ & ᐃᐃⲆΔΔⵠᐃ, ᐃⵠᐃⵠⲆ & ⲆⵠᐃⲆⵠΔⲆ).subarray(ΔⲆⲆⵠⲆ >>>= ⲆᐃᐃᐃᐃΔⲆ, ΔⲆⲆⵠⲆ + ΔᐃⲆⵠⲆ)
	}
	const ᐃⵠⲆⲆᐃ = ΔⲆΔⵠⲆ;

	function ᐃⲆⲆΔⵠⲆⲆᐃⵠ(ΔⵠⵠⲆⵠ) {
		const ΔᐃⲆⵠⲆ = ᐃᐃᐃⵠΔ[ΔⵠⵠⲆⵠ + ⲆΔᐃᐃⵠᐃᐃ >>> ᐃⲆⵠᐃ];
		return ΔⵠⵠⲆᐃ.slice(ΔⵠⵠⲆⵠ, ΔⵠⵠⲆⵠ + ΔᐃⲆⵠⲆ)
	}

	function ᐃᐃᐃⵠᐃΔⲆⵠⵠ(ΔΔⲆⵠⵠ) {
		const ΔⵠⲆⵠᐃⲆΔ = ΔⲆᐃᐃⵠᐃⲆ(ΔΔⲆⵠⵠ);
		const ᐃⲆΔⲆⲆ = ΔⵠⲆⵠᐃⲆΔ.length;
		const ΔΔᐃΔᐃⵠΔ = new Array(ᐃⲆΔⲆⲆ);
		for (let ᐃⲆ = ⵠⵠⵠ; ᐃⲆ < ᐃⲆΔⲆⲆ; ᐃⲆ++) ΔΔᐃΔᐃⵠΔ[ᐃⲆ] = ΔⵠⲆⵠᐃⲆΔ[ᐃⲆ];
		return ΔΔᐃΔᐃⵠΔ
	}
	const ⵠⲆΔⵠᐃΔⵠ = () => new Promise(((ΔΔᐃᐃΔΔⵠ, ᐃΔΔΔⲆⵠΔ) => {
		ⲆⵠᐃΔᐃⵠⲆ["grecaptcha"]["ready"]((function() {
			ⲆⵠᐃΔᐃⵠⲆ["grecaptcha"]["execute"]("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
				action: "validate_recaptcha"
			}).then((function(ΔᐃⲆΔΔ) {
				ΔΔᐃᐃΔΔⵠ(ΔᐃⲆΔΔ)
			})).catch((ᐃᐃΔᐃⲆᐃⲆ => {
				if (ⵠⵠⵠΔᐃ) {
					ΔΔᐃᐃΔΔⵠ(0);
					return
				}
				ᐃΔΔΔⲆⵠΔ(ᐃᐃΔᐃⲆᐃⲆ)
			}))
		}))
	}));
	const ⲆⲆⲆⵠΔ = ⵠΔⵠⵠⲆ;
	function ΔΔⲆᐃᐃⲆΔ(ΔⲆΔⵠΔⵠΔ, ⵠⲆⲆΔᐃⲆⲆ, ⵠⲆᐃⵠⲆᐃⲆ, ΔᐃⵠⲆⲆⵠᐃ, ΔⵠⲆⲆΔᐃᐃ) {
		const ⵠΔⵠΔΔⲆⵠ = 42585 ^ ΔⲆΔⵠΔⵠΔ;
		const ⵠΔⵠΔⵠΔᐃ = ((ⵠⲆⲆΔᐃⲆⲆ + 63269) * 214013 + 2531011) % 4294967296;
		const ᐃⵠⵠΔⲆⲆΔ = ((32380 + ⵠⲆᐃⵠⲆᐃⲆ) * 1664525 + 1013904223) % 4294967296;
		const ΔⵠΔⲆⲆΔⵠ = (ΔᐃⵠⲆⲆⵠᐃ + 7127) % 65408;
		const ΔΔΔⵠⵠⵠᐃ = ~(3097 & ΔⵠⲆⲆΔᐃᐃ) & ΔⵠⲆⲆΔᐃᐃ | ~(ΔⵠⲆⲆΔᐃᐃ & 3097) & 3097;
		const ᐃᐃΔⲆΔᐃⲆ = ΔΔⵠᐃⵠΔΔ(ⵠΔⵠΔΔⲆⵠ, ⵠΔⵠΔⵠΔᐃ, ᐃⵠⵠΔⲆⲆΔ);
		const ΔⲆⲆⵠΔⵠⵠⵠⵠ = ΔΔⲆⵠⲆᐃⲆ(ΔⵠΔⲆⲆΔⵠ, ΔΔΔⵠⵠⵠᐃ, ⵠΔⵠΔΔⲆⵠ, ⵠΔⵠΔⵠΔᐃ);
		const ⵠⵠΔⵠᐃΔⵠ = ~(ᐃᐃΔⲆΔᐃⲆ & 24322) & (24322 | ᐃᐃΔⲆΔᐃⲆ);
		return ⵠⵠΔⵠᐃΔⵠ
	}
	const ᐃⲆΔΔⲆ = ΔⲆᐃᐃᐃ;
	const ΔᐃᐃᐃⵠᐃΔ = {
		"ΔᐃΔᐃⵠᐃΔ": "production",
		"ᐃΔΔⵠⵠᐃⵠ": "development"
	};
	const ᐃⲆⵠⵠΔ = Δⵠᐃⵠᐃ;
	const ᐃᐃΔⵠⵠⲆΔ = ΔᐃᐃᐃⵠᐃΔ.ΔᐃΔᐃⵠᐃΔ;
	const ⵠⵠᐃⲆ = ᐃⲆⵠᐃ;
	const ⵠⲆⵠᐃⵠΔⵠ = ⵠⵠΔΔⵠ;
	const ᐃΔᐃⲆΔ = Ⲇⵠᐃⵠᐃ;

	function ᐃⲆᐃⲆΔ(ᐃⲆΔᐃⲆ) {
		this.ⵠⵠⵠΔ = 2147483648;
		this.a = 1103515245;
		this.c = 12345;
		this.state = ᐃⲆΔᐃⲆ ? ᐃⲆΔᐃⲆ : Math.floor(Math.random() * (this.ⵠⵠⵠΔ - 1))
	}
	ᐃⲆᐃⲆΔ.prototype.random = function() {
		this.state = (this.a * this.state + this.c) % this.ⵠⵠⵠΔ;
		return this.state / this.ⵠⵠⵠΔ
	};
	ᐃⲆᐃⲆΔ.prototype.ⵠⵠⵠΔᐃⵠᐃ = function(ᐃⲆΔᐃⲆ) {
		this.state = ᐃⲆΔᐃⲆ
	};
	ⵠⲆᐃΔⲆΔᐃ = 1e4;
	ⵠᐃⲆᐃⲆᐃⲆ = [];
	const ⲆⵠᐃᐃⲆᐃⵠ = ΔᐃΔⲆΔ;
	const ⲆⵠⲆⲆΔΔΔ = ⲆⵠᐃⲆⵠ;
	var ΔⲆⵠΔⲆⵠⲆ = new ᐃⲆᐃⲆΔ;
	const ⲆⵠΔΔΔ = Δⵠᐃⵠᐃ;
	ΔⲆⵠΔⲆⵠⲆ.ⵠⵠⵠΔᐃⵠᐃ((new Date).getTime());
	for (var ⲆⲆᐃΔ = ⵠⵠⵠ; ⵠⲆᐃΔⲆΔᐃ > ⲆⲆᐃΔ; ⲆⲆᐃΔ++) ⵠᐃⲆᐃⲆᐃⲆ.push(ΔⲆⵠΔⲆⵠⲆ.random());

	function ᐃⲆᐃΔΔⲆⵠ(ⲆΔⲆΔΔᐃᐃ, ᐃⲆⵠΔᐃ, ⵠΔᐃⵠⲆΔᐃ, ⲆⲆⲆΔΔ) {
		const ⵠⵠⵠⵠΔᐃⲆ = ~(59259 & ⲆΔⲆΔΔᐃᐃ) & ⲆΔⲆΔΔᐃᐃ | ~(ⲆΔⲆΔΔᐃᐃ & 59259) & 59259;
		const ⵠᐃⵠΔΔⲆⵠ = ~(ᐃⲆⵠΔᐃ & 56097) & ᐃⲆⵠΔᐃ | ~(ᐃⲆⵠΔᐃ & 56097) & 56097;
		const ⵠΔⵠⲆⲆⵠᐃ = ((43315 + ⵠΔᐃⵠⲆΔᐃ) * 1664525 + 1013904223) % 4294967296;
		const ΔᐃⵠⲆΔΔⲆ = (8 << (ⲆⲆⲆΔΔ >> 24 & 255)) + (32 << (ⲆⲆⲆΔΔ >> 32 & 255)) + (24 << (ⲆⲆⲆΔΔ >> 8 & 255)) + (16 << (ⲆⲆⲆΔΔ >> 16 & 255));
		const ΔⵠᐃᐃⲆⲆⵠ = ⲆΔΔⲆⲆΔΔ(ⵠⵠⵠⵠΔᐃⲆ, ⵠᐃⵠΔΔⲆⵠ, ⵠΔⵠⲆⲆⵠᐃ, ΔᐃⵠⲆΔΔⲆ, ⵠⵠⵠⵠΔᐃⲆ, ⵠᐃⵠΔΔⲆⵠ);
		const ΔⲆⵠᐃⵠᐃᐃ = ⵠᐃΔΔⵠᐃⵠ(ⵠΔⵠⲆⲆⵠᐃ, ΔᐃⵠⲆΔΔⲆ, ⵠⵠⵠⵠΔᐃⲆ, ⵠᐃⵠΔΔⲆⵠ, ⵠΔⵠⲆⲆⵠᐃ);
		const ⲆΔᐃΔᐃᐃᐃᐃΔ = ⵠᐃⲆΔᐃᐃⵠ(ΔᐃⵠⲆΔΔⲆ, ⵠⵠⵠⵠΔᐃⲆ, ⵠᐃⵠΔΔⲆⵠ, ⵠΔⵠⲆⲆⵠᐃ, ΔᐃⵠⲆΔΔⲆ, ⵠⵠⵠⵠΔᐃⲆ);
		const ⵠⲆΔⵠᐃⲆᐃ = (1013904223 + ((ΔⵠᐃᐃⲆⲆⵠ ^ ΔⲆⵠᐃⵠᐃᐃ) + 26191) * 1664525) % 4294967296;
		const ⲆⲆⵠΔᐃⲆᐃ = (ⵠⲆΔⵠᐃⲆᐃ | 38630) & ~(38630 & ⵠⲆΔⵠᐃⲆᐃ);
		return ⲆⲆⵠΔᐃⲆᐃ
	}

	function ⵠΔⵠⲆⵠⵠᐃ(ᐃᐃⲆᐃⲆΔΔ, ⲆΔΔᐃΔᐃⵠ, ᐃⲆⵠᐃΔⵠⲆ, ᐃⵠᐃΔⵠⵠⵠ, ᐃⲆⲆⲆⵠⲆⵠ, ᐃΔᐃᐃⲆⵠⵠ) {
		const ⵠⲆⲆⲆⲆΔΔ = ((39488 + ᐃᐃⲆᐃⲆΔΔ) * 214013 + 2531011) % 4294967296;
		const ⲆΔᐃⵠⲆΔⲆ = ~(49976 & ⲆΔΔᐃΔᐃⵠ) & ⲆΔΔᐃΔᐃⵠ | ~(ⲆΔΔᐃΔᐃⵠ & 49976) & 49976;
		const ΔΔᐃⲆⵠⲆⲆ = ~(ᐃⲆⵠᐃΔⵠⲆ & 35856) & ᐃⲆⵠᐃΔⵠⲆ | ~(ᐃⲆⵠᐃΔⵠⲆ & 35856) & 35856;
		const ⲆᐃᐃᐃᐃᐃΔ = 52219 ^ ᐃⵠᐃΔⵠⵠⵠ;
		const ᐃᐃⵠΔᐃΔⲆ = (ᐃⲆⲆⲆⵠⲆⵠ + 3575) % 65503;
		const ⲆᐃᐃⲆⵠΔΔ = ~(6932 & ᐃΔᐃᐃⲆⵠⵠ) & ᐃΔᐃᐃⲆⵠⵠ | ~(ᐃΔᐃᐃⲆⵠⵠ & 6932) & 6932;
		const ΔΔⵠΔⵠⵠᐃ = ΔⵠᐃᐃΔᐃⲆ(ⵠⲆⲆⲆⲆΔΔ, ⲆΔᐃⵠⲆΔⲆ, ΔΔᐃⲆⵠⲆⲆ, ⲆᐃᐃᐃᐃᐃΔ, ᐃᐃⵠΔᐃΔⲆ);
		const ⵠΔⵠΔⲆΔⲆ = ΔᐃᐃᐃⲆᐃΔ(ⲆᐃᐃⲆⵠΔΔ, ⵠⲆⲆⲆⲆΔΔ, ⲆΔᐃⵠⲆΔⲆ, ΔΔᐃⲆⵠⲆⲆ, ⲆᐃᐃᐃᐃᐃΔ, ᐃᐃⵠΔᐃΔⲆ);
		const ⵠⵠⲆΔΔⵠⵠΔⲆ = ⵠΔⵠⵠⲆⵠΔ(ⲆᐃᐃⲆⵠΔΔ, ⵠⲆⲆⲆⲆΔΔ, ⲆΔᐃⵠⲆΔⲆ, ΔΔᐃⲆⵠⲆⲆ, ⲆᐃᐃᐃᐃᐃΔ, ᐃᐃⵠΔᐃΔⲆ);
		const ΔⲆᐃΔᐃΔᐃ = (1013904223 + 1664525 * ((ΔΔⵠΔⵠⵠᐃ ^ ⵠΔⵠΔⲆΔⲆ) + 60709)) % 4294967296;
		const ᐃΔⵠⵠᐃᐃΔ = ~(ΔⲆᐃΔᐃΔᐃ & 42138) & ΔⲆᐃΔᐃΔᐃ | ~(ΔⲆᐃΔᐃΔᐃ & 42138) & 42138;
		return ᐃΔⵠⵠᐃᐃΔ
	}
	const ΔᐃⵠⲆⵠ = ⵠⲆⵠᐃⵠΔⵠ;
	const ⵠⵠᐃ = ⵠⵠⵠ;
	const ⵠⵠᐃⵠⵠ = ⵠᐃΔⲆΔ;

	function ⲆⲆⲆⵠΔΔᐃ(ᐃΔᐃΔᐃᐃᐃ, ᐃΔⵠᐃⵠΔⲆ, ᐃᐃⲆⵠΔⵠᐃ, ΔⵠⲆᐃᐃⵠᐃ, ⵠⲆΔΔᐃ) {
		const ⵠⵠΔᐃᐃⵠⲆ = ((ᐃΔᐃΔᐃᐃᐃ + 14772) * 2147483629 + 2147483587) % 2147483647;
		const ⲆⵠⲆⲆⵠᐃⲆ = 63080 ^ ᐃΔⵠᐃⵠΔⲆ;
		const ⲆⵠⵠᐃᐃᐃΔ = ((ᐃᐃⲆⵠΔⵠᐃ + 60304) * 22695477 + 1) % 4294967296;
		const ᐃΔᐃᐃᐃΔⲆ = ~(5467 & ΔⵠⲆᐃᐃⵠᐃ) & 5467 | ~(5467 & ΔⵠⲆᐃᐃⵠᐃ) & ΔⵠⲆᐃᐃⵠᐃ;
		const ⲆᐃᐃⲆⵠᐃᐃ = (ⵠⲆΔΔᐃ | 40165) & ~(40165 & ⵠⲆΔΔᐃ);
		const ᐃᐃᐃΔⵠᐃⵠ = ΔⲆⲆᐃⲆⲆᐃ(ⵠⵠΔᐃᐃⵠⲆ, ⲆⵠⲆⲆⵠᐃⲆ, ⲆⵠⵠᐃᐃᐃΔ, ᐃΔᐃᐃᐃΔⲆ);
		const ⲆΔⵠⵠᐃᐃᐃ = ⵠᐃΔΔⵠᐃⵠ(ⲆᐃᐃⲆⵠᐃᐃ, ⵠⵠΔᐃᐃⵠⲆ, ⲆⵠⲆⲆⵠᐃⲆ, ⲆⵠⵠᐃᐃᐃΔ, ᐃΔᐃᐃᐃΔⲆ);
		const ΔⵠΔᐃⲆⵠᐃ = ᐃⵠᐃΔΔΔᐃ(ⲆᐃᐃⲆⵠᐃᐃ, ⵠⵠΔᐃᐃⵠⲆ, ⲆⵠⲆⲆⵠᐃⲆ, ⲆⵠⵠᐃᐃᐃΔ, ᐃΔᐃᐃᐃΔⲆ, ⲆᐃᐃⲆⵠᐃᐃ);
		const ⲆᐃΔᐃΔⲆⵠ = (16 << ((ᐃᐃᐃΔⵠᐃⵠ ^ ⲆΔⵠⵠᐃᐃᐃ) >> 24 & ΔᐃᐃΔⲆᐃⲆ)) + (8 << ((ᐃᐃᐃΔⵠᐃⵠ ^ ⲆΔⵠⵠᐃᐃᐃ) >> 16 & 255)) + (24 << ((ᐃᐃᐃΔⵠᐃⵠ ^ ⲆΔⵠⵠᐃᐃᐃ) >> 32 & 255)) + (32 << ((ᐃᐃᐃΔⵠᐃⵠ ^ ⲆΔⵠⵠᐃᐃᐃ) >> 8 & 255));
		const ⵠΔΔΔᐃⵠⵠ = ((28765 + (ⲆᐃΔᐃΔⲆⵠ ^ ΔⵠΔᐃⲆⵠᐃ)) * 1664525 + 1013904223) % 4294967296;
		return ⵠΔΔΔᐃⵠⵠ
	}
	const ⲆⵠΔᐃΔ = ᐃΔᐃⲆⲆ;
	const ᐃⲆΔᐃΔ = ⵠΔⵠⵠⵠ;
	const ᐃⲆΔⵠΔ = ⵠΔᐃᐃ;
	const ΔⲆⲆⲆ = ⲆⲆⲆΔ;

	function ⵠΔᐃⲆⵠΔΔ(ⲆΔΔΔᐃⵠΔ, ⵠⵠΔΔⵠΔⵠ, ᐃⲆⲆΔⲆΔΔ, ΔⲆⵠⲆΔⲆⲆ, ᐃΔⵠⵠⵠΔⵠ) {
		const ⲆΔⵠⵠⵠⲆⵠ = (12345 + 1103515245 * (23101 + ⲆΔΔΔᐃⵠΔ)) % 2147483648;
		const ⲆⵠⵠⵠⲆΔⲆ = 58614 ^ ⵠⵠΔΔⵠΔⵠ;
		const ⵠᐃᐃΔⲆᐃᐃ = ((ᐃⲆⲆΔⲆΔΔ + 45267) * 214013 + 2531011) % 4294967296;
		const ⲆΔⵠⵠⵠᐃⵠ = ΔⲆⵠⲆΔⲆⲆ ^ 40810;
		const ⲆⵠⲆΔΔⲆΔ = (24 << (ᐃΔⵠⵠⵠΔⵠ >> 24 & 255)) + (8 << (ᐃΔⵠⵠⵠΔⵠ >> 32 & 255)) + (32 << (ᐃΔⵠⵠⵠΔⵠ >> 8 & ⲆΔⲆⵠⲆ)) + (16 << (ᐃΔⵠⵠⵠΔⵠ >> 16 & 255));
		const ᐃⵠⵠᐃⵠⵠΔ = ᐃⵠΔⵠᐃΔᐃ(ⲆΔⵠⵠⵠⲆⵠ, ⲆⵠⵠⵠⲆΔⲆ);
		const ΔᐃⲆᐃⵠⲆᐃ = ᐃⲆᐃΔΔⲆⵠ(ⵠᐃᐃΔⲆᐃᐃ, ⲆΔⵠⵠⵠᐃⵠ, ⲆⵠⲆΔΔⲆΔ, ⲆΔⵠⵠⵠⲆⵠ);
		const ΔⲆⲆΔⲆᐃΔⲆΔ = ΔⲆⵠᐃΔⵠⲆ(ⲆⵠⵠⵠⲆΔⲆ, ⵠᐃᐃΔⲆᐃᐃ, ⲆΔⵠⵠⵠᐃⵠ, ⲆⵠⲆΔΔⲆΔ);
		const ᐃⲆⲆΔⲆᐃᐃ = (24 << ((ᐃⵠⵠᐃⵠⵠΔ ^ ΔᐃⲆᐃⵠⲆᐃ) >> 24 & 255)) + (32 << ((ᐃⵠⵠᐃⵠⵠΔ ^ ΔᐃⲆᐃⵠⲆᐃ) >> 16 & 255)) + (8 << ((ᐃⵠⵠᐃⵠⵠΔ ^ ΔᐃⲆᐃⵠⲆᐃ) >> 32 & 255)) + (16 << ((ᐃⵠⵠᐃⵠⵠΔ ^ ΔᐃⲆᐃⵠⲆᐃ) >> Δᐃⵠⵠᐃ & 255));
		const ⵠⲆⵠⵠⵠⵠᐃ = ~(13644 & ᐃⲆⲆΔⲆᐃᐃ) & ᐃⲆⲆΔⲆᐃᐃ | ~(ᐃⲆⲆΔⲆᐃᐃ & 13644) & 13644;
		return ⵠⲆⵠⵠⵠⵠᐃ
	}

	function ⲆΔⲆⵠᐃΔⵠ(ᐃᐃᐃᐃⲆΔⲆ, ⲆᐃᐃⲆᐃᐃⲆ) {
		const ⲆⲆⲆΔᐃⲆΔ = ~(41406 & ᐃᐃᐃᐃⲆΔⲆ) & ᐃᐃᐃᐃⲆΔⲆ | ~(ᐃᐃᐃᐃⲆΔⲆ & 41406) & 41406;
		const ΔⵠΔᐃⵠᐃᐃ = ((ⲆᐃᐃⲆᐃᐃⲆ + 17922) * 1103515245 + 12345) % 2147483648;
		const ΔΔᐃⵠⵠΔⵠ = ΔᐃΔⵠⲆⵠⵠ(ⲆⲆⲆΔᐃⲆΔ, ΔⵠΔᐃⵠᐃᐃ, ⲆⲆⲆΔᐃⲆΔ);
		const ᐃΔⵠⲆⵠΔⵠΔΔ = ⲆⲆΔⲆⵠᐃΔ(ΔⵠΔᐃⵠᐃᐃ, ⲆⲆⲆΔᐃⲆΔ, ΔⵠΔᐃⵠᐃᐃ, ⲆⲆⲆΔᐃⲆΔ);
		const ⵠΔⵠᐃᐃᐃⲆ = ⵠᐃΔⲆΔⲆΔ(ΔⵠΔᐃⵠᐃᐃ, ⲆⲆⲆΔᐃⲆΔ, ΔⵠΔᐃⵠᐃᐃ, ⲆⲆⲆΔᐃⲆΔ, ΔⵠΔᐃⵠᐃᐃ);
		const ΔΔᐃΔΔⵠᐃ = ΔΔᐃⵠⵠΔⵠ ^ 18573;
		const ⲆⵠΔⵠΔΔⵠ = (2147483629 * (42346 + (ΔΔᐃΔΔⵠᐃ ^ ⵠΔⵠᐃᐃᐃⲆ)) + 2147483587) % 2147483647;
		return ⲆⵠΔⵠΔΔⵠ
	}

	function ⵠᐃΔⲆΔⲆΔ(ⵠᐃᐃⲆⲆⲆᐃ, ᐃⵠΔⲆΔΔᐃ, ⲆᐃⵠⲆΔᐃᐃ, ΔΔᐃⲆⲆᐃⲆ, ⵠᐃΔΔΔΔΔ) {
		const ᐃᐃⵠᐃΔΔⲆ = (32 << (ⵠᐃᐃⲆⲆⲆᐃ >> 24 & 255)) + (16 << (ⵠᐃᐃⲆⲆⲆᐃ >> 8 & 255)) + (24 << (ⵠᐃᐃⲆⲆⲆᐃ >> 16 & 255)) + (8 << (ⵠᐃᐃⲆⲆⲆᐃ >> 32 & 255));
		const ᐃⲆⲆⲆⲆᐃᐃ = (ᐃⵠΔⲆΔΔᐃ + 39144) % 65406;
		const ⵠⵠᐃᐃⵠⲆΔ = ⲆᐃⵠⲆΔᐃᐃ ^ 34575;
		const ΔⲆⵠⵠⵠⲆΔ = ~(37841 & ΔΔᐃⲆⲆᐃⲆ) & ΔΔᐃⲆⲆᐃⲆ | ~(ΔΔᐃⲆⲆᐃⲆ & 37841) & 37841;
		const ᐃⵠⵠⵠⲆⵠΔ = (25975 | ⵠᐃΔΔΔΔΔ) & ~(25975 & ⵠᐃΔΔΔΔΔ);
		const ⵠⵠⲆⵠⵠΔⵠ = ⲆΔⵠᐃᐃ(ᐃᐃⵠᐃΔΔⲆ, ᐃⲆⲆⲆⲆᐃᐃ, ⵠⵠᐃᐃⵠⲆΔ, ΔⲆⵠⵠⵠⲆΔ);
		const ᐃᐃⵠⵠᐃᐃⲆᐃⲆ = ⵠᐃⲆᐃᐃΔⵠ(ᐃⵠⵠⵠⲆⵠΔ, ᐃᐃⵠᐃΔΔⲆ, ᐃⲆⲆⲆⲆᐃᐃ, ⵠⵠᐃᐃⵠⲆΔ, ΔⲆⵠⵠⵠⲆΔ);
		const ⲆⵠⵠⲆⲆⵠᐃⲆⵠ = ⵠΔⵠⵠⲆⵠΔ(ᐃⵠⵠⵠⲆⵠΔ, ᐃᐃⵠᐃΔΔⲆ, ᐃⲆⲆⲆⲆᐃᐃ, ⵠⵠᐃᐃⵠⲆΔ, ΔⲆⵠⵠⵠⲆΔ, ᐃⵠⵠⵠⲆⵠΔ);
		const ⲆᐃΔᐃΔⵠΔ = (19326 | ⵠⵠⲆⵠⵠΔⵠ) & ~(19326 & ⵠⵠⲆⵠⵠΔⵠ);
		const ΔᐃⲆⵠⲆⲆⲆ = 36297 ^ ⲆᐃΔᐃΔⵠΔ;
		return ΔᐃⲆⵠⲆⲆⲆ
	}

	function ⲆΔΔⲆⲆΔΔ(ⵠᐃᐃΔⵠⲆΔ, ⲆΔᐃᐃᐃⵠᐃ, ⵠⲆⵠⲆⵠΔⲆ, ⲆⵠΔⵠΔᐃΔ, ΔⵠⲆᐃⲆΔⲆ, ⲆⵠΔⲆⲆΔⵠ) {
		const ᐃᐃΔⲆⵠΔΔ = 10715 ^ ⵠᐃᐃΔⵠⲆΔ;
		const ΔⵠⲆⲆⲆⲆⵠ = (24 << (ⲆΔᐃᐃᐃⵠᐃ >> 16 & 255)) + (16 << (ⲆΔᐃᐃᐃⵠᐃ >> 32 & 255)) + (32 << (ⲆΔᐃᐃᐃⵠᐃ >> 8 & ⵠᐃΔⲆΔ)) + (8 << (ⲆΔᐃᐃᐃⵠᐃ >> 24 & 255));
		const ⵠⲆⲆᐃⲆⵠⵠ = (8 << (ⵠⲆⵠⲆⵠΔⲆ >> ᐃΔᐃⲆⲆ & ⵠᐃΔⲆΔ)) + (32 << (ⵠⲆⵠⲆⵠΔⲆ >> 24 & 255)) + (16 << (ⵠⲆⵠⲆⵠΔⲆ >> ᐃΔᐃⵠⲆ & 255)) + (24 << (ⵠⲆⵠⲆⵠΔⲆ >> 32 & 255));
		const ΔΔᐃΔᐃⵠⲆ = ⲆⵠΔⵠΔᐃΔ ^ 40782;
		const ⲆⵠᐃⵠΔⵠᐃ = ΔⵠⲆᐃⲆΔⲆ ^ 41301;
		const ⲆΔᐃⵠᐃⲆᐃ = ~(ⲆⵠΔⲆⲆΔⵠ & 12091) & (12091 | ⲆⵠΔⲆⲆΔⵠ);
		const ᐃⵠⵠΔⲆΔⲆ = ⵠᐃⲆΔᐃᐃⵠ(ᐃᐃΔⲆⵠΔΔ, ΔⵠⲆⲆⲆⲆⵠ, ⵠⲆⲆᐃⲆⵠⵠ, ΔΔᐃΔᐃⵠⲆ, ⲆⵠᐃⵠΔⵠᐃ, ⲆΔᐃⵠᐃⲆᐃ);
		const ΔⲆᐃⵠⵠᐃⵠⲆΔ = ⵠᐃⲆΔᐃᐃⵠ(ᐃᐃΔⲆⵠΔΔ, ΔⵠⲆⲆⲆⲆⵠ, ⵠⲆⲆᐃⲆⵠⵠ, ΔΔᐃΔᐃⵠⲆ, ⲆⵠᐃⵠΔⵠᐃ, ⲆΔᐃⵠᐃⲆᐃ);
		const ⲆⵠΔᐃⵠᐃᐃⲆⲆ = ΔΔᐃΔΔⵠⲆ(ᐃᐃΔⲆⵠΔΔ, ΔⵠⲆⲆⲆⲆⵠ, ⵠⲆⲆᐃⲆⵠⵠ, ΔΔᐃΔᐃⵠⲆ, ⲆⵠᐃⵠΔⵠᐃ);
		const ΔⵠΔᐃⵠΔΔ = (ᐃⵠⵠΔⲆΔⲆ | 3006) & ~(ᐃⵠⵠΔⲆΔⲆ & 3006);
		const ΔⲆΔⲆΔⲆⲆ = ~(24460 & ΔⵠΔᐃⵠΔΔ) & (ΔⵠΔᐃⵠΔΔ | 24460);
		return ΔⲆΔⲆΔⲆⲆ
	}

	function ⲆΔⵠᐃᐃ(ⲆⲆⵠᐃⲆΔⲆ, ᐃⵠⲆⲆⵠΔᐃ, ⵠᐃΔΔᐃΔⲆ, ᐃⵠᐃΔᐃᐃⲆ) {
		const ᐃⲆⵠᐃᐃⵠⲆ = 11762 ^ ⲆⲆⵠᐃⲆΔⲆ;
		const ᐃⲆᐃⵠΔᐃᐃ = ~(ᐃⵠⲆⲆⵠΔᐃ & 19425) & 19425 | ~(19425 & ᐃⵠⲆⲆⵠΔᐃ) & ᐃⵠⲆⲆⵠΔᐃ;
		const ⵠⵠᐃⵠⲆⲆΔ = (32 << (ⵠᐃΔΔᐃΔⲆ >> 16 & 255)) + (ᐃΔᐃⵠⲆ << (ⵠᐃΔΔᐃΔⲆ >> 32 & ΔᐃᐃΔⲆᐃⲆ)) + (24 << (ⵠᐃΔΔᐃΔⲆ >> 24 & ΔᐃᐃΔⲆᐃⲆ)) + (16 << (ⵠᐃΔΔᐃΔⲆ >> Δᐃⵠⵠᐃ & ΔΔᐃⲆⲆ));
		const ᐃΔⲆΔᐃⵠⲆ = ~(259 & ᐃⵠᐃΔᐃᐃⲆ) & 259 | ~(259 & ᐃⵠᐃΔᐃᐃⲆ) & ᐃⵠᐃΔᐃᐃⲆ;
		const ᐃΔⲆΔᐃᐃΔ = (32 << ((ᐃⲆⵠᐃᐃⵠⲆ ^ ᐃⲆᐃⵠΔᐃᐃ) >> 32 & 255)) + (8 << ((ᐃⲆⵠᐃᐃⵠⲆ ^ ᐃⲆᐃⵠΔᐃᐃ) >> 8 & 255)) + (24 << ((ᐃⲆⵠᐃᐃⵠⲆ ^ ᐃⲆᐃⵠΔᐃᐃ) >> 24 & 255)) + (ᐃΔᐃⲆⲆ << ((ᐃⲆⵠᐃᐃⵠⲆ ^ ᐃⲆᐃⵠΔᐃᐃ) >> 16 & 255));
		const ⲆⵠᐃⵠᐃⲆⲆ = (1664525 * (17757 + (ᐃΔⲆΔᐃᐃΔ ^ ⵠⵠᐃⵠⲆⲆΔ)) + 1013904223) % 4294967296;
		const ⲆⲆⵠⲆΔΔΔ = (1664525 * (55182 + (ⲆⵠᐃⵠᐃⲆⲆ ^ ᐃΔⲆΔᐃⵠⲆ)) + 1013904223) % 4294967296;
		return ⲆⲆⵠⲆΔΔΔ
	}

	function ⲆⵠⲆΔⵠᐃᐃ(ⲆΔⲆΔΔΔΔ, ΔⲆⵠⵠⲆΔⵠ, ΔᐃⵠⲆⵠⵠΔ, ⲆᐃᐃⲆΔΔᐃ, ⵠⲆⲆΔΔⲆⲆ) {
		const ΔⲆⵠⵠⵠⲆⵠ = (24 << (ⲆΔⲆΔΔΔΔ >> 24 & 255)) + (32 << (ⲆΔⲆΔΔΔΔ >> 16 & 255)) + (16 << (ⲆΔⲆΔΔΔΔ >> 8 & 255)) + (8 << (ⲆΔⲆΔΔΔΔ >> 32 & 255));
		const ⵠΔᐃᐃᐃΔⵠ = (12345 + (ΔⲆⵠⵠⲆΔⵠ + 3024) * 1103515245) % 2147483648;
		const ⲆΔⲆⵠΔⲆⲆ = (8 << (ΔᐃⵠⲆⵠⵠΔ >> 8 & 255)) + (32 << (ΔᐃⵠⲆⵠⵠΔ >> 32 & ⲆΔⲆⵠⲆ)) + (24 << (ΔᐃⵠⲆⵠⵠΔ >> 16 & 255)) + (16 << (ΔᐃⵠⲆⵠⵠΔ >> 24 & 255));
		const ⲆⲆⲆᐃᐃⲆⲆ = (1 + (ⲆᐃᐃⲆΔΔᐃ + 41324) * 22695477) % 4294967296;
		const ⵠⲆΔⵠΔᐃⲆ = (19607 | ⵠⲆⲆΔΔⲆⲆ) & ~(ⵠⲆⲆΔΔⲆⲆ & 19607);
		const ΔᐃᐃⵠᐃⵠⲆ = ⲆΔⲆⲆΔⵠⵠ(ΔⲆⵠⵠⵠⲆⵠ, ⵠΔᐃᐃᐃΔⵠ);
		const ΔᐃΔⲆΔᐃⲆᐃⲆ = ⵠᐃⲆᐃᐃΔⵠ(ⲆΔⲆⵠΔⲆⲆ, ⲆⲆⲆᐃᐃⲆⲆ, ⵠⲆΔⵠΔᐃⲆ, ΔⲆⵠⵠⵠⲆⵠ, ⵠΔᐃᐃᐃΔⵠ);
		const ⵠⵠᐃᐃⲆᐃⵠⵠⵠ = ΔⲆⲆΔⲆΔΔ(ⲆΔⲆⵠΔⲆⲆ, ⲆⲆⲆᐃᐃⲆⲆ, ⵠⲆΔⵠΔᐃⲆ, ΔⲆⵠⵠⵠⲆⵠ, ⵠΔᐃᐃᐃΔⵠ, ⲆΔⲆⵠΔⲆⲆ);
		const ⵠᐃⵠⵠⲆⵠᐃ = ~(49323 & ΔᐃᐃⵠᐃⵠⲆ) & 49323 | ~(49323 & ΔᐃᐃⵠᐃⵠⲆ) & ΔᐃᐃⵠᐃⵠⲆ;
		const ⵠΔΔᐃᐃⵠΔ = ~(ⵠᐃⵠⵠⲆⵠᐃ & 46567) & (46567 | ⵠᐃⵠⵠⲆⵠᐃ);
		return ⵠΔΔᐃᐃⵠΔ
	}

	function ΔⲆⲆᐃⲆⲆᐃ(ΔⲆⲆᐃⲆᐃΔ, ⲆⲆⲆᐃⲆⲆΔ, ⵠⲆⵠΔΔⲆⲆ, ⵠⵠⲆⲆΔⲆΔ) {
		const ⲆᐃᐃᐃⵠΔⲆ = (57611 | ΔⲆⲆᐃⲆᐃΔ) & ~(ΔⲆⲆᐃⲆᐃΔ & 57611);
		const ΔᐃⲆΔⲆⵠⵠ = (1664525 * (ⲆⲆⲆᐃⲆⲆΔ + 56889) + 1013904223) % 4294967296;
		const ⵠⲆΔΔⲆΔᐃ = ⵠⲆⵠΔΔⲆⲆ ^ 62842;
		const ⵠⵠⲆΔΔⵠΔ = ~(ⵠⵠⲆⲆΔⲆΔ & 1179) & ⵠⵠⲆⲆΔⲆΔ | ~(ⵠⵠⲆⲆΔⲆΔ & 1179) & 1179;
		const ΔⲆⵠⲆΔⵠᐃ = ⲆΔⵠᐃᐃ(ⲆᐃᐃᐃⵠΔⲆ, ΔᐃⲆΔⲆⵠⵠ, ⵠⲆΔΔⲆΔᐃ, ⵠⵠⲆΔΔⵠΔ);
		const ΔⵠⵠⲆⲆⵠᐃ = ⵠⵠⵠⵠᐃⲆΔ(ⲆᐃᐃᐃⵠΔⲆ, ΔᐃⲆΔⲆⵠⵠ, ⵠⲆΔΔⲆΔᐃ, ⵠⵠⲆΔΔⵠΔ);
		const ᐃΔⵠΔᐃⲆΔᐃΔ = ᐃⲆᐃΔΔⲆⵠ(ⲆᐃᐃᐃⵠΔⲆ, ΔᐃⲆΔⲆⵠⵠ, ⵠⲆΔΔⲆΔᐃ, ⵠⵠⲆΔΔⵠΔ);
		const ⵠⲆⵠᐃᐃⲆᐃ = (24 << ((ΔⲆⵠⲆΔⵠᐃ ^ ΔⵠⵠⲆⲆⵠᐃ) >> 24 & 255)) + (8 << ((ΔⲆⵠⲆΔⵠᐃ ^ ΔⵠⵠⲆⲆⵠᐃ) >> 16 & 255)) + (ⵠᐃᐃⵠⵠ << ((ΔⲆⵠⲆΔⵠᐃ ^ ΔⵠⵠⲆⲆⵠᐃ) >> 32 & ⵠⵠᐃⵠⵠ)) + (32 << ((ΔⲆⵠⲆΔⵠᐃ ^ ΔⵠⵠⲆⲆⵠᐃ) >> Δᐃⵠⵠᐃ & 255));
		const ΔⵠⵠᐃᐃⵠΔ = ~(63304 & ⵠⲆⵠᐃᐃⲆᐃ) & (ⵠⲆⵠᐃᐃⲆᐃ | 63304);
		return ΔⵠⵠᐃᐃⵠΔ
	}

	function ⲆⲆᐃⵠΔΔΔ(ⲆᐃⲆᐃᐃⲆΔ, ᐃⲆᐃᐃⲆⵠΔ, ⲆᐃⲆΔᐃᐃΔ, ΔᐃⲆᐃⲆᐃⲆ, ⲆᐃΔᐃⲆⵠᐃ, ⵠⲆΔᐃⲆⵠⲆ) {
		const ᐃΔΔΔⵠⲆⲆ = (1013904223 + 1664525 * (ⲆᐃⲆᐃᐃⲆΔ + 28824)) % 4294967296;
		const ⵠⵠⲆⵠΔᐃⵠ = (1013904223 + 1664525 * (13210 + ᐃⲆᐃᐃⲆⵠΔ)) % 4294967296;
		const ΔⲆⲆΔΔⵠΔ = ~(32165 & ⲆᐃⲆΔᐃᐃΔ) & 32165 | ~(32165 & ⲆᐃⲆΔᐃᐃΔ) & ⲆᐃⲆΔᐃᐃΔ;
		const ΔᐃΔᐃⵠⵠᐃ = (24 << (ΔᐃⲆᐃⲆᐃⲆ >> 24 & 255)) + (ⲆⵠΔᐃΔ << (ΔᐃⲆᐃⲆᐃⲆ >> 8 & 255)) + (8 << (ΔᐃⲆᐃⲆᐃⲆ >> ⵠᐃᐃⵠⵠ & ⲆⲆⲆⵠᐃ)) + (32 << (ΔᐃⲆᐃⲆᐃⲆ >> 32 & 255));
		const ⵠⲆⵠΔᐃⵠⲆ = (ⲆⵠⲆ + 22695477 * (39199 + ⲆᐃΔᐃⲆⵠᐃ)) % 4294967296;
		const ⵠΔⲆⲆᐃΔⵠ = 33037 ^ ⵠⲆΔᐃⲆⵠⲆ;
		const ⲆⲆⵠᐃⲆⲆⵠ = ᐃⲆΔⵠᐃΔⵠ(ᐃΔΔΔⵠⲆⲆ, ⵠⵠⲆⵠΔᐃⵠ, ΔⲆⲆΔΔⵠΔ);
		const ⵠⲆⲆⲆⲆⲆᐃⵠᐃ = ⵠⵠⵠⵠᐃⲆΔ(ΔᐃΔᐃⵠⵠᐃ, ⵠⲆⵠΔᐃⵠⲆ, ⵠΔⲆⲆᐃΔⵠ, ᐃΔΔΔⵠⲆⲆ);
		const ⵠⲆⲆᐃᐃⵠΔ = ᐃᐃⲆΔᐃᐃΔ(ⵠⵠⲆⵠΔᐃⵠ, ΔⲆⲆΔΔⵠΔ, ΔᐃΔᐃⵠⵠᐃ, ⵠⲆⵠΔᐃⵠⲆ);
		const ⵠΔⲆΔΔⲆⲆ = ⲆⲆⵠᐃⲆⲆⵠ ^ 2959;
		const ᐃΔⵠⲆᐃⵠⲆ = (1103515245 * (34159 + (ⵠΔⲆΔΔⲆⲆ ^ ⵠⲆⲆᐃᐃⵠΔ)) + 12345) % 2147483648;
		return ᐃΔⵠⲆᐃⵠⲆ
	}
	const ⲆⲆᐃⲆⵠ = ᐃΔᐃⵠⲆ;
	const Δⵠᐃ = ⲆⲆⵠ;

	function ᐃᐃⲆΔᐃᐃΔ(ⵠⵠᐃΔⲆΔΔ, ᐃᐃⵠⵠⵠ, ᐃⵠⵠΔⵠⵠᐃ, ⵠⲆᐃⲆⲆⲆⵠ) {
		const ΔΔΔᐃΔΔΔ = ~(33107 & ⵠⵠᐃΔⲆΔΔ) & (33107 | ⵠⵠᐃΔⲆΔΔ);
		const ᐃᐃⲆΔⲆⲆΔ = (24 << (ᐃᐃⵠⵠⵠ >> 32 & 255)) + (32 << (ᐃᐃⵠⵠⵠ >> 8 & ⵠⵠᐃⵠⵠ)) + (8 << (ᐃᐃⵠⵠⵠ >> 16 & 255)) + (16 << (ᐃᐃⵠⵠⵠ >> 24 & ⲆⲆⲆⵠᐃ));
		const ⵠΔⲆᐃⵠⵠⲆ = ~(ᐃⵠⵠΔⵠⵠᐃ & 32053) & (32053 | ᐃⵠⵠΔⵠⵠᐃ);
		const ΔⲆⵠᐃᐃⵠⵠ = 12240 ^ ⵠⲆᐃⲆⲆⲆⵠ;
		const ⵠⲆᐃᐃᐃⵠΔ = ⲆⲆⵠⵠⲆᐃᐃ(ΔΔΔᐃΔΔΔ, ᐃᐃⲆΔⲆⲆΔ, ⵠΔⲆᐃⵠⵠⲆ, ΔⲆⵠᐃᐃⵠⵠ);
		const ΔΔⵠΔⲆᐃᐃⵠⲆ = ⵠⵠⵠⵠᐃⲆΔ(ΔΔΔᐃΔΔΔ, ᐃᐃⲆΔⲆⲆΔ, ⵠΔⲆᐃⵠⵠⲆ, ΔⲆⵠᐃᐃⵠⵠ);
		const ᐃᐃⵠⲆΔⵠΔ = ΔⵠᐃᐃΔᐃⲆ(ΔΔΔᐃΔΔΔ, ᐃᐃⲆΔⲆⲆΔ, ⵠΔⲆᐃⵠⵠⲆ, ΔⲆⵠᐃᐃⵠⵠ, ΔΔΔᐃΔΔΔ);
		const ΔᐃΔⵠⲆΔᐃ = ~(64131 & ⵠⲆᐃᐃᐃⵠΔ) & 64131 | ~(64131 & ⵠⲆᐃᐃᐃⵠΔ) & ⵠⲆᐃᐃᐃⵠΔ;
		const Ⲇⵠⵠⵠⵠⵠⵠ = (2531011 + 214013 * (44352 + (ΔᐃΔⵠⲆΔᐃ ^ ᐃᐃⵠⲆΔⵠΔ))) % 4294967296;
		return Ⲇⵠⵠⵠⵠⵠⵠ
	}
	const ⲆⵠΔᐃⵠⵠⲆ = ⵠⲆⵠᐃⵠΔⵠ;

	function ⵠᐃⲆΔᐃᐃⵠ(ⲆⵠᐃⲆΔ, ᐃΔⵠΔⵠⲆΔ, ⵠᐃⲆⲆⵠ, ᐃᐃⵠⲆⲆⲆᐃ, ⲆΔΔΔᐃᐃⲆ, ⵠⲆⲆΔᐃΔⵠ) {
		const ⵠᐃᐃⵠΔᐃᐃ = ~(ⲆⵠᐃⲆΔ & 36133) & (ⲆⵠᐃⲆΔ | 36133);
		const ΔᐃΔⵠⲆΔⲆ = (13670 | ᐃΔⵠΔⵠⲆΔ) & ~(ᐃΔⵠΔⵠⲆΔ & 13670);
		const ΔΔⲆᐃᐃⵠᐃ = (31390 | ⵠᐃⲆⲆⵠ) & ~(ⵠᐃⲆⲆⵠ & 31390);
		const ⲆⲆⵠⲆΔⵠⵠ = ᐃᐃⵠⲆⲆⲆᐃ ^ 64081;
		const ⲆᐃⲆᐃⵠⵠⲆ = 7550 ^ ⲆΔΔΔᐃᐃⲆ;
		const ⵠΔᐃΔⲆⵠⵠ = (2147483587 + (ⵠⲆⲆΔᐃΔⵠ + 63950) * 2147483629) % 2147483647;
		const ⲆΔΔⵠᐃⵠΔ = ⵠΔⲆⲆⲆΔⵠ(ⵠᐃᐃⵠΔᐃᐃ, ΔᐃΔⵠⲆΔⲆ, ΔΔⲆᐃᐃⵠᐃ, ⲆⲆⵠⲆΔⵠⵠ, ⲆᐃⲆᐃⵠⵠⲆ);
		const ᐃΔⵠⲆΔⵠⲆ = ⵠⵠⵠⵠᐃⲆΔ(ⵠΔᐃΔⲆⵠⵠ, ⵠᐃᐃⵠΔᐃᐃ, ΔᐃΔⵠⲆΔⲆ, ΔΔⲆᐃᐃⵠᐃ);
		const ⲆⲆⵠⵠΔⲆᐃ = ΔΔᐃΔΔⵠⲆ(ⲆⲆⵠⲆΔⵠⵠ, ⲆᐃⲆᐃⵠⵠⲆ, ⵠΔᐃΔⲆⵠⵠ, ⵠᐃᐃⵠΔᐃᐃ, ΔᐃΔⵠⲆΔⲆ);
		const ⵠᐃⵠⲆΔⲆⵠ = ((62552 + (ⲆΔΔⵠᐃⵠΔ ^ ᐃΔⵠⲆΔⵠⲆ)) * 2147483629 + 2147483587) % 2147483647;
		const ΔⲆΔᐃΔᐃᐃ = (12345 + 1103515245 * (36760 + (ⵠᐃⵠⲆΔⲆⵠ ^ ⲆⲆⵠⵠΔⲆᐃ))) % 2147483648;
		return ΔⲆΔᐃΔᐃᐃ
	}
	const ⲆΔΔΔΔ = ᐃⲆᐃᐃᐃ;
	const ⲆⲆΔΔΔ = ᐃΔΔΔΔ;

	function ⲆⲆΔⲆⵠᐃΔ(ᐃᐃⵠⲆᐃⲆᐃ, ΔⵠⲆΔⲆⲆΔ, ⵠΔⵠᐃⵠᐃᐃ, ΔᐃⵠΔⲆⵠⲆ) {
		const ᐃᐃᐃᐃΔⵠᐃ = (ᐃᐃⵠⲆᐃⲆᐃ | 15432) & ~(ᐃᐃⵠⲆᐃⲆᐃ & 15432);
		const ⵠᐃᐃⲆᐃᐃⲆ = 12315 ^ ΔⵠⲆΔⲆⲆΔ;
		const ΔⵠΔΔⵠᐃΔ = ⵠΔⵠᐃⵠᐃᐃ ^ 38714;
		const ᐃΔⲆᐃⲆᐃΔ = 58084 ^ ΔᐃⵠΔⲆⵠⲆ;
		const ⲆⵠⲆᐃΔⲆᐃ = ⵠΔⵠⲆⵠⵠᐃ(ᐃᐃᐃᐃΔⵠᐃ, ⵠᐃᐃⲆᐃᐃⲆ, ΔⵠΔΔⵠᐃΔ, ᐃΔⲆᐃⲆᐃΔ, ᐃᐃᐃᐃΔⵠᐃ, ⵠᐃᐃⲆᐃᐃⲆ);
		const ⵠᐃⲆⲆⲆⲆΔᐃΔ = ⵠⵠⵠⵠᐃⲆΔ(ΔⵠΔΔⵠᐃΔ, ᐃΔⲆᐃⲆᐃΔ, ᐃᐃᐃᐃΔⵠᐃ, ⵠᐃᐃⲆᐃᐃⲆ);
		const ΔᐃⵠΔⵠⲆⵠ = ⵠΔⵠⵠⲆⵠΔ(ΔⵠΔΔⵠᐃΔ, ᐃΔⲆᐃⲆᐃΔ, ᐃᐃᐃᐃΔⵠᐃ, ⵠᐃᐃⲆᐃᐃⲆ, ΔⵠΔΔⵠᐃΔ, ᐃΔⲆᐃⲆᐃΔ);
		const ΔᐃΔΔⵠᐃⲆ = ~(41134 & ⲆⵠⲆᐃΔⲆᐃ) & ⲆⵠⲆᐃΔⲆᐃ | ~(ⲆⵠⲆᐃΔⲆᐃ & 41134) & 41134;
		const ᐃᐃⲆⲆΔΔⲆ = ((34681 + (ΔᐃΔΔⵠᐃⲆ ^ ΔᐃⵠΔⵠⲆⵠ)) * 214013 + 2531011) % 4294967296;
		return ᐃᐃⲆⲆΔΔⲆ
	}

	function ⵠΔᐃⵠⲆⵠⲆ(ⲆΔⵠⲆⲆΔⵠ, ΔⲆᐃᐃᐃⲆΔ, ⲆᐃΔⵠᐃΔᐃ) {
		const ᐃⵠΔΔΔᐃᐃ = ((5294 + ⲆΔⵠⲆⲆΔⵠ) * 1664525 + 1013904223) % 4294967296;
		const ⲆΔⵠΔΔⲆⵠ = (ΔⲆᐃᐃᐃⲆΔ | 55665) & ~(55665 & ΔⲆᐃᐃᐃⲆΔ);
		const ⲆΔⵠᐃΔᐃΔ = (ⲆᐃΔⵠᐃΔᐃ + 54633) % 65404;
		const ⲆⲆΔΔᐃΔⲆ = ⲆⲆⲆⵠΔΔᐃ(ᐃⵠΔΔΔᐃᐃ, ⲆΔⵠΔΔⲆⵠ, ⲆΔⵠᐃΔᐃΔ, ᐃⵠΔΔΔᐃᐃ, ⲆΔⵠΔΔⲆⵠ);
		const ⲆⲆΔᐃⲆⵠⵠⲆⲆ = ⲆⵠᐃⵠⲆⵠⵠ(ⲆΔⵠᐃΔᐃΔ, ᐃⵠΔΔΔᐃᐃ, ⲆΔⵠΔΔⲆⵠ, ⲆΔⵠᐃΔᐃΔ, ᐃⵠΔΔΔᐃᐃ, ⲆΔⵠΔΔⲆⵠ);
		const ⲆᐃⲆᐃΔⲆΔΔⵠ = ⵠⵠⵠⵠᐃⲆΔ(ⲆΔⵠᐃΔᐃΔ, ᐃⵠΔΔΔᐃᐃ, ⲆΔⵠΔΔⲆⵠ, ⲆΔⵠᐃΔᐃΔ);
		const ⲆᐃⲆⲆⵠΔᐃ = ~(43875 & ⲆⲆΔΔᐃΔⲆ) & (43875 | ⲆⲆΔΔᐃΔⲆ);
		const ⲆΔⲆᐃᐃᐃⵠ = ⲆᐃⲆⲆⵠΔᐃ ^ 15116;
		return ⲆΔⲆᐃᐃᐃⵠ
	}
	const ΔⵠΔΔⲆⲆⵠ = ⲆⲆⲆⵠᐃ;

	function ΔⲆⵠᐃΔⵠⲆ(ⲆⵠⵠΔΔΔᐃ, ᐃΔⲆⲆᐃⲆΔ, ⲆᐃΔⲆⲆⲆᐃ, ΔⲆⲆⲆᐃⲆᐃ) {
		const ⲆⲆΔΔᐃᐃⲆ = (ⲆⵠⵠΔΔΔᐃ + 34282) % 65336;
		const ⲆΔⵠⵠᐃⲆᐃ = ~(ᐃΔⲆⲆᐃⲆΔ & 45181) & 45181 | ~(45181 & ᐃΔⲆⲆᐃⲆΔ) & ᐃΔⲆⲆᐃⲆΔ;
		const ᐃⲆⵠⵠΔⲆᐃ = (16 << (ⲆᐃΔⲆⲆⲆᐃ >> 8 & ⵠⵠᐃⵠⵠ)) + (32 << (ⲆᐃΔⲆⲆⲆᐃ >> 24 & 255)) + (8 << (ⲆᐃΔⲆⲆⲆᐃ >> 32 & 255)) + (24 << (ⲆᐃΔⲆⲆⲆᐃ >> 16 & 255));
		const ᐃΔᐃᐃⲆΔⵠ = ~(ΔⲆⲆⲆᐃⲆᐃ & 25475) & 25475 | ~(25475 & ΔⲆⲆⲆᐃⲆᐃ) & ΔⲆⲆⲆᐃⲆᐃ;
		const ⲆⲆⵠⲆΔⲆᐃ = ⲆΔⲆⵠᐃΔⵠ(ⲆⲆΔΔᐃᐃⲆ, ⲆΔⵠⵠᐃⲆᐃ);
		const ΔΔᐃⵠⵠⵠΔ = ⵠᐃⲆᐃᐃΔⵠ(ᐃⲆⵠⵠΔⲆᐃ, ᐃΔᐃᐃⲆΔⵠ, ⲆⲆΔΔᐃᐃⲆ, ⲆΔⵠⵠᐃⲆᐃ, ᐃⲆⵠⵠΔⲆᐃ);
		const ⲆΔᐃⵠⵠⵠᐃⲆᐃ = ᐃⵠΔⵠᐃΔᐃ(ᐃΔᐃᐃⲆΔⵠ, ⲆⲆΔΔᐃᐃⲆ);
		const ⵠΔⲆᐃⲆⵠⵠ = (58498 + (ⲆⲆⵠⲆΔⲆᐃ ^ ΔΔᐃⵠⵠⵠΔ)) % 65531;
		const ⲆΔⲆΔᐃⲆΔ = ~(ⵠΔⲆᐃⲆⵠⵠ & 37009) & 37009 | ~(37009 & ⵠΔⲆᐃⲆⵠⵠ) & ⵠΔⲆᐃⲆⵠⵠ;
		return ⲆΔⲆΔᐃⲆΔ
	}

	function ⵠᐃⵠΔΔΔⲆ(ⲆᐃΔΔⵠⵠΔ, ΔⲆⵠⵠΔᐃΔ) {
		const ᐃΔᐃⲆⵠΔⵠ = ((ⲆᐃΔΔⵠⵠΔ + 49468) * 1103515245 + 12345) % 2147483648;
		const ᐃΔⲆⵠΔᐃⲆ = (214013 * (ΔⲆⵠⵠΔᐃΔ + 30513) + 2531011) % 4294967296;
		const ᐃⵠⵠⲆᐃᐃⵠ = ⵠΔᐃⵠⲆⵠⲆ(ᐃΔᐃⲆⵠΔⵠ, ᐃΔⲆⵠΔᐃⲆ, ᐃΔᐃⲆⵠΔⵠ);
		const ⲆⵠᐃⵠⲆΔⲆᐃΔ = ΔΔᐃΔΔⵠⲆ(ᐃΔⲆⵠΔᐃⲆ, ᐃΔᐃⲆⵠΔⵠ, ᐃΔⲆⵠΔᐃⲆ, ᐃΔᐃⲆⵠΔⵠ, ᐃΔⲆⵠΔᐃⲆ);
		const ⵠⵠᐃⲆΔΔⲆⲆⵠ = ⲆΔⵠᐃᐃ(ᐃΔᐃⲆⵠΔⵠ, ᐃΔⲆⵠΔᐃⲆ, ᐃΔᐃⲆⵠΔⵠ, ᐃΔⲆⵠΔᐃⲆ);
		const ΔΔᐃᐃΔᐃⲆ = (17943 | ᐃⵠⵠⲆᐃᐃⵠ) & ~(ᐃⵠⵠⲆᐃᐃⵠ & 17943);
		const ⵠΔΔᐃⵠΔⲆ = 21791 ^ ΔΔᐃᐃΔᐃⲆ;
		return ⵠΔΔᐃⵠΔⲆ
	}
	const ⵠⵠᐃⲆΔⲆΔ = ΔᐃᐃΔᐃ;

	function ⵠΔⵠⵠⲆⵠΔ(ⵠⲆⵠⵠᐃᐃⲆ, ΔⲆᐃᐃⲆᐃΔ, ΔᐃⵠΔⲆΔⵠ, ⵠⲆⲆⵠΔΔᐃ, ᐃᐃⲆᐃΔΔΔ, ΔΔⵠᐃΔΔⵠ) {
		const ᐃᐃⲆⲆⲆᐃΔ = ⵠⲆⵠⵠᐃᐃⲆ ^ 23409;
		const ᐃⵠⵠᐃⲆⵠⵠ = ΔⲆᐃᐃⲆᐃΔ ^ 26380;
		const ⲆⲆⵠΔⲆⲆΔ = ΔᐃⵠΔⲆΔⵠ ^ 53590;
		const ΔΔᐃⲆⵠⵠΔ = 36633 ^ ⵠⲆⲆⵠΔΔᐃ;
		const ⲆΔΔΔⵠᐃᐃ = (1103515245 * (ᐃᐃⲆᐃΔΔΔ + 33017) + 12345) % 2147483648;
		const ᐃⲆᐃⵠΔΔᐃ = 42490 ^ ΔΔⵠᐃΔΔⵠ;
		const ΔᐃⲆᐃᐃⲆΔ = ⲆΔⵠᐃᐃ(ᐃᐃⲆⲆⲆᐃΔ, ᐃⵠⵠᐃⲆⵠⵠ, ⲆⲆⵠΔⲆⲆΔ, ΔΔᐃⲆⵠⵠΔ);
		const ⲆᐃⲆΔᐃⲆⲆ = ⲆΔⵠᐃᐃ(ⲆΔΔΔⵠᐃᐃ, ᐃⲆᐃⵠΔΔᐃ, ᐃᐃⲆⲆⲆᐃΔ, ᐃⵠⵠᐃⲆⵠⵠ);
		const ⵠⵠΔΔⵠⲆΔ = (22695477 * (19056 + (ΔᐃⲆᐃᐃⲆΔ ^ ⲆᐃⲆΔᐃⲆⲆ)) + 1) % 4294967296;
		return ⵠⵠΔΔⵠⲆΔ
	}
	const ΔᐃⵠⲆⲆ = ⲆⵠⲆⵠⲆ;
	const ᐃᐃᐃᐃ = ⵠⲆⲆⵠ;
	const ⵠⵠⲆᐃΔ = ᐃⵠΔⲆⲆ;

	function ᐃᐃⲆΔⵠⲆⲆ(ᐃⵠᐃⵠΔⲆⵠ, ΔᐃᐃᐃⲆΔᐃ) {
		const ᐃΔΔⲆΔΔⲆ = (2531011 + (ᐃⵠᐃⵠΔⲆⵠ + 62874) * 214013) % 4294967296;
		const ⲆᐃⵠⲆⲆᐃⲆ = (24 << (ΔᐃᐃᐃⲆΔᐃ >> 24 & 255)) + (16 << (ΔᐃᐃᐃⲆΔᐃ >> 32 & 255)) + (8 << (ΔᐃᐃᐃⲆΔᐃ >> 8 & 255)) + (32 << (ΔᐃᐃᐃⲆΔᐃ >> 16 & 255));
		const ⵠⵠΔⵠⵠᐃⲆ = ⵠΔⵠⵠⲆⵠΔ(ᐃΔΔⲆΔΔⲆ, ⲆᐃⵠⲆⲆᐃⲆ, ᐃΔΔⲆΔΔⲆ, ⲆᐃⵠⲆⲆᐃⲆ, ᐃΔΔⲆΔΔⲆ, ⲆᐃⵠⲆⲆᐃⲆ);
		const ΔⵠᐃⵠⲆⵠᐃ = ⵠΔⵠⵠⲆⵠΔ(ᐃΔΔⲆΔΔⲆ, ⲆᐃⵠⲆⲆᐃⲆ, ᐃΔΔⲆΔΔⲆ, ⲆᐃⵠⲆⲆᐃⲆ, ᐃΔΔⲆΔΔⲆ, ⲆᐃⵠⲆⲆᐃⲆ);
		const ΔΔⵠⵠⵠᐃⵠⲆⲆ = ⲆΔⵠᐃᐃ(ᐃΔΔⲆΔΔⲆ, ⲆᐃⵠⲆⲆᐃⲆ, ᐃΔΔⲆΔΔⲆ, ⲆᐃⵠⲆⲆᐃⲆ);
		const ⵠⲆΔᐃⵠᐃⵠ = (16 << ((ⵠⵠΔⵠⵠᐃⲆ ^ ΔⵠᐃⵠⲆⵠᐃ) >> 32 & ⵠⵠᐃⵠⵠ)) + (8 << ((ⵠⵠΔⵠⵠᐃⲆ ^ ΔⵠᐃⵠⲆⵠᐃ) >> 24 & 255)) + (24 << ((ⵠⵠΔⵠⵠᐃⲆ ^ ΔⵠᐃⵠⲆⵠᐃ) >> 16 & 255)) + (32 << ((ⵠⵠΔⵠⵠᐃⲆ ^ ΔⵠᐃⵠⲆⵠᐃ) >> 8 & ⲆⲆⲆⵠᐃ));
		const ᐃΔⲆⵠΔΔⲆ = ~(ⵠⲆΔᐃⵠᐃⵠ & 55949) & 55949 | ~(55949 & ⵠⲆΔᐃⵠᐃⵠ) & ⵠⲆΔᐃⵠᐃⵠ;
		return ᐃΔⲆⵠΔΔⲆ
	}

	function ΔⲆⲆΔⲆΔΔ(ΔᐃΔⲆⵠΔⵠ, ⵠΔⲆⵠⵠⵠᐃ, ΔⲆᐃⵠⲆᐃⲆ, ⵠᐃᐃᐃⲆⲆⵠ, ⲆⲆⵠⲆᐃᐃⵠ, ΔΔⲆⲆⲆⵠΔ) {
		const ⵠΔⵠᐃΔⲆⵠ = (24 << (ΔᐃΔⲆⵠΔⵠ >> 24 & 255)) + (32 << (ΔᐃΔⲆⵠΔⵠ >> 16 & 255)) + (16 << (ΔᐃΔⲆⵠΔⵠ >> 8 & 255)) + (8 << (ΔᐃΔⲆⵠΔⵠ >> 32 & 255));
		const ⵠᐃΔⵠⲆⲆⵠ = (41551 | ⵠΔⲆⵠⵠⵠᐃ) & ~(ⵠΔⲆⵠⵠⵠᐃ & 41551);
		const ⲆⲆⵠᐃΔⲆⲆ = (24 << (ΔⲆᐃⵠⲆᐃⲆ >> 24 & 255)) + (16 << (ΔⲆᐃⵠⲆᐃⲆ >> 32 & ⲆⲆⲆⵠᐃ)) + (8 << (ΔⲆᐃⵠⲆᐃⲆ >> ⲆⵠΔᐃΔ & 255)) + (32 << (ΔⲆᐃⵠⲆᐃⲆ >> 8 & ΔⵠΔΔⲆⲆⵠ));
		const ⵠⵠⲆⵠⵠΔⲆ = ~(32641 & ⵠᐃᐃᐃⲆⲆⵠ) & (32641 | ⵠᐃᐃᐃⲆⲆⵠ);
		const ⲆⵠᐃᐃᐃⲆⲆ = (214013 * (ⲆⲆⵠⲆᐃᐃⵠ + 35582) + 2531011) % 4294967296;
		const ⵠᐃᐃΔΔᐃⲆ = ~(1090 & ΔΔⲆⲆⲆⵠΔ) & (ΔΔⲆⲆⲆⵠΔ | 1090);
		const ΔΔⲆᐃⵠⲆᐃ = ᐃⵠᐃΔΔΔᐃ(ⵠΔⵠᐃΔⲆⵠ, ⵠᐃΔⵠⲆⲆⵠ, ⲆⲆⵠᐃΔⲆⲆ, ⵠⵠⲆⵠⵠΔⲆ, ⲆⵠᐃᐃᐃⲆⲆ, ⵠᐃᐃΔΔᐃⲆ);
		const ΔⲆⲆⵠⵠⲆᐃΔΔ = ⵠᐃΔⲆΔⲆΔ(ⵠΔⵠᐃΔⲆⵠ, ⵠᐃΔⵠⲆⲆⵠ, ⲆⲆⵠᐃΔⲆⲆ, ⵠⵠⲆⵠⵠΔⲆ, ⲆⵠᐃᐃᐃⲆⲆ);
		const ΔΔⲆΔᐃⵠⵠⵠΔ = ⲆΔⵠᐃᐃ(ⵠᐃᐃΔΔᐃⲆ, ⵠΔⵠᐃΔⲆⵠ, ⵠᐃΔⵠⲆⲆⵠ, ⲆⲆⵠᐃΔⲆⲆ);
		const ⵠΔⲆΔⵠⲆⵠ = ~(ΔΔⲆᐃⵠⲆᐃ & 8077) & 8077 | ~(8077 & ΔΔⲆᐃⵠⲆᐃ) & ΔΔⲆᐃⵠⲆᐃ;
		const ⵠⵠⵠⵠⲆΔⵠ = ~(3708 & ⵠΔⲆΔⵠⲆⵠ) & (ⵠΔⲆΔⵠⲆⵠ | 3708);
		return ⵠⵠⵠⵠⲆΔⵠ
	}

	function ΔᐃᐃᐃⲆᐃΔ(ⲆᐃⵠΔᐃΔᐃ, ΔΔⲆᐃⵠᐃᐃ, ⵠΔᐃᐃΔⲆⲆ, ⵠⲆⲆⲆᐃⲆΔ, ⲆΔΔΔΔⲆⵠ, ΔⵠⵠΔᐃⵠⲆ) {
		const ΔᐃᐃⵠΔᐃΔ = 30142 ^ ⲆᐃⵠΔᐃΔᐃ;
		const ⲆⲆᐃⵠⵠⵠᐃ = (ΔΔⲆᐃⵠᐃᐃ + 63025) % 65493;
		const ᐃΔΔⵠΔⲆᐃ = ⵠΔᐃᐃΔⲆⲆ ^ 30777;
		const ⲆΔΔΔΔΔΔ = ((45939 + ⵠⲆⲆⲆᐃⲆΔ) * 22695477 + 1) % 4294967296;
		const ᐃⵠᐃⵠᐃⲆⵠ = (8 << (ⲆΔΔΔΔⲆⵠ >> 16 & 255)) + (32 << (ⲆΔΔΔΔⲆⵠ >> 24 & 255)) + (24 << (ⲆΔΔΔΔⲆⵠ >> 32 & 255)) + (16 << (ⲆΔΔΔΔⲆⵠ >> Δᐃⵠⵠᐃ & 255));
		const ᐃⵠⲆⵠⵠᐃⵠ = (ΔⵠⵠΔᐃⵠⲆ | 45652) & ~(ΔⵠⵠΔᐃⵠⲆ & 45652);
		const ᐃⲆⲆⲆᐃⲆΔ = ΔⵠᐃᐃΔᐃⲆ(ΔᐃᐃⵠΔᐃΔ, ⲆⲆᐃⵠⵠⵠᐃ, ᐃΔΔⵠΔⲆᐃ, ⲆΔΔΔΔΔΔ, ᐃⵠᐃⵠᐃⲆⵠ);
		const ⲆⲆᐃⲆⵠΔΔⲆⵠ = ⲆⲆⲆⵠΔΔᐃ(ᐃⵠⲆⵠⵠᐃⵠ, ΔᐃᐃⵠΔᐃΔ, ⲆⲆᐃⵠⵠⵠᐃ, ᐃΔΔⵠΔⲆᐃ, ⲆΔΔΔΔΔΔ);
		const ⲆⵠⵠᐃΔᐃⲆᐃⵠ = ΔⲆⲆΔⲆΔΔ(ᐃⵠᐃⵠᐃⲆⵠ, ᐃⵠⲆⵠⵠᐃⵠ, ΔᐃᐃⵠΔᐃΔ, ⲆⲆᐃⵠⵠⵠᐃ, ᐃΔΔⵠΔⲆᐃ, ⲆΔΔΔΔΔΔ);
		const ᐃⲆΔⲆⲆΔⲆ = 46918 ^ ᐃⲆⲆⲆᐃⲆΔ;
		const ᐃⵠⵠⲆⲆᐃᐃ = ᐃⲆΔⲆⲆΔⲆ ^ 24022;
		return ᐃⵠⵠⲆⲆᐃᐃ
	}

	function ᐃΔΔᐃⵠᐃΔ(ΔᐃⲆΔΔ) {
		return ⲆⲆᐃⵠΔΔΔ(ΔᐃⲆΔΔ, 8260, 46947, 8004, 37330, 5330)
	}

	function ᐃⵠᐃⵠᐃⲆⲆ(ⵠᐃⲆΔⵠΔⲆ, ⵠᐃᐃᐃᐃΔⲆ, ⲆⵠⵠᐃᐃⲆⲆ, ᐃᐃⲆⵠⵠΔⵠ, ΔᐃΔΔΔ) {
		const ⵠⵠᐃⲆᐃⵠⵠ = (1664525 * (9716 + ⵠᐃⲆΔⵠΔⲆ) + 1013904223) % 4294967296;
		const ⲆΔⵠⲆⵠᐃⲆ = ~(ⵠᐃᐃᐃᐃΔⲆ & 7703) & ⵠᐃᐃᐃᐃΔⲆ | ~(ⵠᐃᐃᐃᐃΔⲆ & 7703) & 7703;
		const ΔⲆᐃⵠᐃⲆⲆ = (ⲆⵠⵠᐃᐃⲆⲆ | 31275) & ~(31275 & ⲆⵠⵠᐃᐃⲆⲆ);
		const ᐃᐃᐃⲆⵠᐃⲆ = ~(25693 & ᐃᐃⲆⵠⵠΔⵠ) & 25693 | ~(25693 & ᐃᐃⲆⵠⵠΔⵠ) & ᐃᐃⲆⵠⵠΔⵠ;
		const ⵠᐃⵠⲆᐃⵠⲆ = (8 << (ΔᐃΔΔΔ >> ᐃΔᐃⵠⲆ & 255)) + (32 << (ΔᐃΔΔΔ >> 24 & 255)) + (24 << (ΔᐃΔΔΔ >> ⲆⵠΔᐃΔ & 255)) + (16 << (ΔᐃΔΔΔ >> 32 & 255));
		const ΔᐃΔⲆΔᐃⵠ = ⵠΔⵠⵠⲆⵠΔ(ⵠⵠᐃⲆᐃⵠⵠ, ⲆΔⵠⲆⵠᐃⲆ, ΔⲆᐃⵠᐃⲆⲆ, ᐃᐃᐃⲆⵠᐃⲆ, ⵠᐃⵠⲆᐃⵠⲆ, ⵠⵠᐃⲆᐃⵠⵠ);
		const ΔΔᐃⵠᐃⵠᐃ = ⲆΔⵠᐃᐃ(ⲆΔⵠⲆⵠᐃⲆ, ΔⲆᐃⵠᐃⲆⲆ, ᐃᐃᐃⲆⵠᐃⲆ, ⵠᐃⵠⲆᐃⵠⲆ);
		const ΔᐃΔᐃΔΔᐃᐃᐃ = ΔᐃΔⵠⲆⵠⵠ(ⵠⵠᐃⲆᐃⵠⵠ, ⲆΔⵠⲆⵠᐃⲆ, ΔⲆᐃⵠᐃⲆⲆ);
		const ΔⵠⲆⵠᐃⵠΔ = (24 << ((ΔᐃΔⲆΔᐃⵠ ^ ΔΔᐃⵠᐃⵠᐃ) >> 16 & 255)) + (8 << ((ΔᐃΔⲆΔᐃⵠ ^ ΔΔᐃⵠᐃⵠᐃ) >> 8 & 255)) + (32 << ((ΔᐃΔⲆΔᐃⵠ ^ ΔΔᐃⵠᐃⵠᐃ) >> 24 & 255)) + (16 << ((ΔᐃΔⲆΔᐃⵠ ^ ΔΔᐃⵠᐃⵠᐃ) >> 32 & 255));
		const ᐃⲆᐃᐃⵠΔΔ = ΔⵠⲆⵠᐃⵠΔ ^ 31710;
		return ᐃⲆᐃᐃⵠΔΔ
	}
	const ΔᐃᐃΔ = ⲆⲆⲆΔ;
	const ⲆΔⲆⲆ = ΔᐃΔⲆ;
	const ⵠⲆᐃⵠⵠ = ᐃΔᐃⲆΔ;
	const ⵠΔⵠΔⵠ = ⲆⵠⲆᐃⵠ;

	function ⲆⵠΔΔΔΔᐃ(ⲆΔΔΔᐃⲆⵠ, ΔᐃⲆᐃⵠⲆⲆ, ⵠᐃᐃⵠΔΔⵠ, ᐃΔᐃΔΔⲆⲆ, ΔᐃⵠΔⲆᐃᐃ) {
		const ⵠⵠᐃΔΔⵠⵠ = 64570 ^ ⲆΔΔΔᐃⲆⵠ;
		const ᐃΔᐃⲆΔᐃΔ = (2531011 + (ΔᐃⲆᐃⵠⲆⲆ + 41768) * 214013) % 4294967296;
		const ΔⵠΔⲆⲆᐃᐃ = (1013904223 + 1664525 * (ⵠᐃᐃⵠΔΔⵠ + 43923)) % 4294967296;
		const ⵠⵠΔᐃⵠΔᐃ = (16 << (ᐃΔᐃΔΔⲆⲆ >> 32 & 255)) + (ⲆⲆᐃⲆⵠ << (ᐃΔᐃΔΔⲆⲆ >> 24 & 255)) + (32 << (ᐃΔᐃΔΔⲆⲆ >> 16 & 255)) + (24 << (ᐃΔᐃΔΔⲆⲆ >> 8 & 255));
		const ⲆⵠΔΔΔᐃⲆ = (ΔᐃⵠΔⲆᐃᐃ | 21896) & ~(ΔᐃⵠΔⲆᐃᐃ & 21896);
		const ⵠᐃⲆⵠΔᐃΔ = ⵠᐃⵠΔΔΔⲆ(ⵠⵠᐃΔΔⵠⵠ, ᐃΔᐃⲆΔᐃΔ);
		const ⲆᐃΔⵠⲆΔᐃⵠΔ = ⲆⲆΔⲆⵠᐃΔ(ΔⵠΔⲆⲆᐃᐃ, ⵠⵠΔᐃⵠΔᐃ, ⲆⵠΔΔΔᐃⲆ, ⵠⵠᐃΔΔⵠⵠ);
		const ⲆᐃΔⵠⵠᐃⵠ = ⲆⵠⲆΔⵠᐃᐃ(ᐃΔᐃⲆΔᐃΔ, ΔⵠΔⲆⲆᐃᐃ, ⵠⵠΔᐃⵠΔᐃ, ⲆⵠΔΔΔᐃⲆ, ⵠⵠᐃΔΔⵠⵠ);
		const ΔⲆᐃᐃⵠΔᐃ = ~(52206 & ⵠᐃⲆⵠΔᐃΔ) & (ⵠᐃⲆⵠΔᐃΔ | 52206);
		const ⲆΔᐃⲆΔΔΔ = (12345 + (7491 + (ΔⲆᐃᐃⵠΔᐃ ^ ⲆᐃΔⵠⵠᐃⵠ)) * 1103515245) % 2147483648;
		return ⲆΔᐃⲆΔΔΔ
	}

	function ⲆⲆⵠⵠⲆᐃᐃ(ⵠⲆᐃⲆΔᐃⵠ, ⵠᐃⵠΔⵠⲆᐃ, ᐃⵠⵠⵠⲆᐃⵠ, ᐃΔᐃΔΔΔⲆ) {
		const Ⲇᐃⵠᐃⵠᐃⵠ = (32 << (ⵠⲆᐃⲆΔᐃⵠ >> 32 & 255)) + (16 << (ⵠⲆᐃⲆΔᐃⵠ >> ⲆⵠΔᐃΔ & 255)) + (24 << (ⵠⲆᐃⲆΔᐃⵠ >> 24 & 255)) + (8 << (ⵠⲆᐃⲆΔᐃⵠ >> 8 & 255));
		const ⲆᐃⲆⲆΔⲆΔ = (1 + (50595 + ⵠᐃⵠΔⵠⲆᐃ) * 22695477) % 4294967296;
		const ⵠΔΔⲆΔᐃΔ = ~(40066 & ᐃⵠⵠⵠⲆᐃⵠ) & ᐃⵠⵠⵠⲆᐃⵠ | ~(ᐃⵠⵠⵠⲆᐃⵠ & 40066) & 40066;
		const ⲆⵠⲆᐃⲆⵠⲆ = 18768 ^ ᐃΔᐃΔΔΔⲆ;
		const ⲆⲆΔΔⵠⲆᐃ = ΔⵠᐃᐃΔᐃⲆ(Ⲇᐃⵠᐃⵠᐃⵠ, ⲆᐃⲆⲆΔⲆΔ, ⵠΔΔⲆΔᐃΔ, ⲆⵠⲆᐃⲆⵠⲆ, Ⲇᐃⵠᐃⵠᐃⵠ);
		const ᐃΔⵠⵠᐃⲆΔ = ⵠΔᐃⲆⵠΔΔ(ⲆᐃⲆⲆΔⲆΔ, ⵠΔΔⲆΔᐃΔ, ⲆⵠⲆᐃⲆⵠⲆ, Ⲇᐃⵠᐃⵠᐃⵠ, ⲆᐃⲆⲆΔⲆΔ);
		const ᐃᐃⵠⲆⵠᐃΔ = ᐃᐃⲆΔⵠⲆⲆ(ⵠΔΔⲆΔᐃΔ, ⲆⵠⲆᐃⲆⵠⲆ);
		const ᐃⲆⲆⲆⵠᐃⵠ = (2531011 + ((ⲆⲆΔΔⵠⲆᐃ ^ ᐃΔⵠⵠᐃⲆΔ) + 35287) * 214013) % 4294967296;
		const ⵠⵠΔⵠΔᐃΔ = (1664525 * ((ᐃⲆⲆⲆⵠᐃⵠ ^ ᐃᐃⵠⲆⵠᐃΔ) + 16767) + 1013904223) % 4294967296;
		return ⵠⵠΔⵠΔᐃΔ
	}

	function ΔΔᐃΔΔⵠⲆ(ᐃⵠᐃᐃⵠⵠᐃ, ⵠⲆᐃⵠΔⲆᐃ, ⲆⲆⲆⲆⲆΔᐃ, ᐃΔΔⲆΔⲆⵠ, ᐃⲆΔⵠΔΔⵠ) {
		const ᐃᐃᐃᐃΔΔⵠ = (2147483587 + (ᐃⵠᐃᐃⵠⵠᐃ + 64762) * 2147483629) % 2147483647;
		const ⵠⵠⵠⲆΔᐃⵠ = ((18197 + ⵠⲆᐃⵠΔⲆᐃ) * 214013 + 2531011) % 4294967296;
		const ⵠⵠⲆⲆⲆᐃⵠ = (2531011 + 214013 * (22845 + ⲆⲆⲆⲆⲆΔᐃ)) % 4294967296;
		const ⵠⲆΔⲆΔⲆᐃ = (32 << (ᐃΔΔⲆΔⲆⵠ >> 16 & ⲆⲆⲆⵠᐃ)) + (16 << (ᐃΔΔⲆΔⲆⵠ >> 8 & 255)) + (8 << (ᐃΔΔⲆΔⲆⵠ >> 32 & 255)) + (24 << (ᐃΔΔⲆΔⲆⵠ >> 24 & 255));
		const ᐃᐃΔᐃΔᐃⵠ = ~(ᐃⲆΔⵠΔΔⵠ & 11999) & ᐃⲆΔⵠΔΔⵠ | ~(ᐃⲆΔⵠΔΔⵠ & 11999) & 11999;
		const ⲆᐃᐃᐃⲆⵠΔ = ⵠΔⵠⵠⲆⵠΔ(ᐃᐃᐃᐃΔΔⵠ, ⵠⵠⵠⲆΔᐃⵠ, ⵠⵠⲆⲆⲆᐃⵠ, ⵠⲆΔⲆΔⲆᐃ, ᐃᐃΔᐃΔᐃⵠ, ᐃᐃᐃᐃΔΔⵠ);
		const ⲆᐃΔⵠᐃᐃΔ = ΔⲆⲆΔⲆΔΔ(ⵠⵠⵠⲆΔᐃⵠ, ⵠⵠⲆⲆⲆᐃⵠ, ⵠⲆΔⲆΔⲆᐃ, ᐃᐃΔᐃΔᐃⵠ, ᐃᐃᐃᐃΔΔⵠ, ⵠⵠⵠⲆΔᐃⵠ);
		const ᐃΔΔⲆⵠⵠⵠⵠᐃ = ⲆΔⵠᐃᐃ(ⵠⵠⲆⲆⲆᐃⵠ, ⵠⲆΔⲆΔⲆᐃ, ᐃᐃΔᐃΔᐃⵠ, ᐃᐃᐃᐃΔΔⵠ);
		const ⵠᐃΔΔᐃᐃΔ = (ⲆⲆᐃⲆⵠ << ((ⲆᐃᐃᐃⲆⵠΔ ^ ⲆᐃΔⵠᐃᐃΔ) >> 24 & 255)) + (16 << ((ⲆᐃᐃᐃⲆⵠΔ ^ ⲆᐃΔⵠᐃᐃΔ) >> ᐃΔᐃⲆⲆ & ⲆⲆⲆⵠᐃ)) + (24 << ((ⲆᐃᐃᐃⲆⵠΔ ^ ⲆᐃΔⵠᐃᐃΔ) >> ᐃΔᐃⵠⲆ & 255)) + (32 << ((ⲆᐃᐃᐃⲆⵠΔ ^ ⲆᐃΔⵠᐃᐃΔ) >> 32 & 255));
		const Δᐃⵠᐃᐃᐃⵠ = ⵠᐃΔΔᐃᐃΔ ^ 35444;
		return Δᐃⵠᐃᐃᐃⵠ
	}

	function ⵠⵠⵠⵠᐃⲆΔ(ⵠⲆⲆⵠᐃΔⵠ, ⵠΔⵠΔⵠᐃⵠ, ⲆⵠᐃⲆΔⵠⵠ, ⲆⵠⲆⵠⲆᐃⲆ) {
		const ⵠⲆΔⲆⲆⵠΔ = (2147483587 + (37418 + ⵠⲆⲆⵠᐃΔⵠ) * 2147483629) % 2147483647;
		const ᐃᐃΔⵠⲆⲆᐃ = ⵠΔⵠΔⵠᐃⵠ ^ 57623;
		const ⵠⲆΔΔΔΔΔ = ~(ⲆⵠᐃⲆΔⵠⵠ & 40280) & ⲆⵠᐃⲆΔⵠⵠ | ~(ⲆⵠᐃⲆΔⵠⵠ & 40280) & 40280;
		const ⵠⵠΔᐃΔᐃᐃ = ~(ⲆⵠⲆⵠⲆᐃⲆ & 24601) & ⲆⵠⲆⵠⲆᐃⲆ | ~(ⲆⵠⲆⵠⲆᐃⲆ & 24601) & 24601;
		const ⲆⲆΔΔΔⲆᐃ = ⲆΔⲆⲆΔⵠⵠ(ⵠⲆΔⲆⲆⵠΔ, ᐃᐃΔⵠⲆⲆᐃ);
		const ᐃⲆΔⲆΔᐃᐃⵠⵠ = ⲆΔⲆⲆΔⵠⵠ(ⵠⲆΔΔΔΔΔ, ⵠⵠΔᐃΔᐃᐃ);
		const ΔΔΔΔⵠΔⵠⵠⵠ = ⵠᐃΔΔⵠᐃⵠ(ⵠⲆΔⲆⲆⵠΔ, ᐃᐃΔⵠⲆⲆᐃ, ⵠⲆΔΔΔΔΔ, ⵠⵠΔᐃΔᐃᐃ, ⵠⲆΔⲆⲆⵠΔ);
		const ᐃΔᐃⵠⲆⵠⲆ = ~(43902 & ⲆⲆΔΔΔⲆᐃ) & 43902 | ~(43902 & ⲆⲆΔΔΔⲆᐃ) & ⲆⲆΔΔΔⲆᐃ;
		const ΔⲆᐃⲆⵠΔⲆ = (8862 | ᐃΔᐃⵠⲆⵠⲆ) & ~(8862 & ᐃΔᐃⵠⲆⵠⲆ);
		return ΔⲆᐃⲆⵠΔⲆ
	}

	function ⲆⵠᐃⵠⲆⵠⵠ(ΔⲆΔⵠΔⵠΔ, ⵠⲆⲆΔᐃⲆⲆ, ⵠⲆᐃⵠⲆᐃⲆ, ΔᐃⵠⲆⲆⵠᐃ, ΔⵠⲆⲆΔᐃᐃ, ⵠⵠⲆⲆᐃⵠⵠ) {
		const ᐃⲆⵠΔᐃᐃⵠ = (2531011 + (ΔⲆΔⵠΔⵠΔ + 16955) * 214013) % 4294967296;
		const ⵠᐃⲆⵠⵠΔⲆ = (1103515245 * (9436 + ⵠⲆⲆΔᐃⲆⲆ) + 12345) % 2147483648;
		const ⲆⵠΔΔᐃⲆⲆ = (14774 | ⵠⲆᐃⵠⲆᐃⲆ) & ~(14774 & ⵠⲆᐃⵠⲆᐃⲆ);
		const ΔⵠⲆⲆΔⵠᐃ = (48802 | ΔᐃⵠⲆⲆⵠᐃ) & ~(ΔᐃⵠⲆⲆⵠᐃ & 48802);
		const ⲆᐃΔⵠⲆⲆⵠ = ~(ΔⵠⲆⲆΔᐃᐃ & 24998) & (ΔⵠⲆⲆΔᐃᐃ | 24998);
		const ᐃΔⵠΔᐃⵠⲆ = (8 << (ⵠⵠⲆⲆᐃⵠⵠ >> 8 & 255)) + (16 << (ⵠⵠⲆⲆᐃⵠⵠ >> 16 & 255)) + (32 << (ⵠⵠⲆⲆᐃⵠⵠ >> 32 & 255)) + (24 << (ⵠⵠⲆⲆᐃⵠⵠ >> 24 & 255));
		const ΔⵠⲆΔᐃⲆΔ = ᐃᐃⲆΔᐃᐃΔ(ᐃⲆⵠΔᐃᐃⵠ, ⵠᐃⲆⵠⵠΔⲆ, ⲆⵠΔΔᐃⲆⲆ, ΔⵠⲆⲆΔⵠᐃ);
		const ΔΔⵠⵠᐃᐃⵠ = ⵠᐃⲆᐃᐃΔⵠ(ⲆᐃΔⵠⲆⲆⵠ, ᐃΔⵠΔᐃⵠⲆ, ᐃⲆⵠΔᐃᐃⵠ, ⵠᐃⲆⵠⵠΔⲆ, ⲆⵠΔΔᐃⲆⲆ);
		const ᐃⵠᐃⲆⵠᐃᐃ = ᐃᐃⲆΔᐃᐃΔ(ΔⵠⲆⲆΔⵠᐃ, ⲆᐃΔⵠⲆⲆⵠ, ᐃΔⵠΔᐃⵠⲆ, ᐃⲆⵠΔᐃᐃⵠ);
		const ⵠᐃⲆᐃⵠⵠⵠ = (24 << ((ΔⵠⲆΔᐃⲆΔ ^ ΔΔⵠⵠᐃᐃⵠ) >> 24 & 255)) + (8 << ((ΔⵠⲆΔᐃⲆΔ ^ ΔΔⵠⵠᐃᐃⵠ) >> 32 & 255)) + (16 << ((ΔⵠⲆΔᐃⲆΔ ^ ΔΔⵠⵠᐃᐃⵠ) >> Δᐃⵠⵠᐃ & 255)) + (32 << ((ΔⵠⲆΔᐃⲆΔ ^ ΔΔⵠⵠᐃᐃⵠ) >> 16 & 255));
		const ᐃⲆⲆⵠΔΔⲆ = (((ⵠᐃⲆᐃⵠⵠⵠ ^ ᐃⵠᐃⲆⵠᐃᐃ) + 35404) * 214013 + 2531011) % 4294967296;
		return ᐃⲆⲆⵠΔΔⲆ
	}
	const ᐃⲆᐃⲆΔⲆᐃ = ⲆᐃᐃᐃΔᐃΔ;

	function ΔⵠᐃᐃΔᐃⲆ(ΔᐃΔΔᐃⵠⲆ, ΔⲆⵠΔⵠᐃⲆ, ⲆᐃⵠᐃᐃΔⵠ, ⵠΔᐃⲆᐃᐃⵠ, ⲆΔⲆᐃⲆΔᐃ) {
		const ΔΔᐃⵠᐃⲆᐃ = ΔᐃΔΔᐃⵠⲆ ^ 62008;
		const ⵠⲆⵠⵠⲆⲆⵠ = (24 << (ΔⲆⵠΔⵠᐃⲆ >> 32 & 255)) + (ⲆⲆᐃⲆⵠ << (ΔⲆⵠΔⵠᐃⲆ >> 16 & 255)) + (32 << (ΔⲆⵠΔⵠᐃⲆ >> 8 & 255)) + (16 << (ΔⲆⵠΔⵠᐃⲆ >> 24 & 255));
		const ΔΔⵠΔᐃᐃΔ = (22695477 * (ⲆᐃⵠᐃᐃΔⵠ + 46531) + 1) % 4294967296;
		const ᐃⲆᐃⲆⲆⵠᐃ = ~(ⵠΔᐃⲆᐃᐃⵠ & 1884) & 1884 | ~(1884 & ⵠΔᐃⲆᐃᐃⵠ) & ⵠΔᐃⲆᐃᐃⵠ;
		const ᐃⲆᐃᐃⵠᐃⵠ = ~(ⲆΔⲆᐃⲆΔᐃ & 55588) & 55588 | ~(55588 & ⲆΔⲆᐃⲆΔᐃ) & ⲆΔⲆᐃⲆΔᐃ;
		const ⵠΔᐃⵠⵠⵠΔ = ⲆⲆⲆⵠΔΔᐃ(ΔΔᐃⵠᐃⲆᐃ, ⵠⲆⵠⵠⲆⲆⵠ, ΔΔⵠΔᐃᐃΔ, ᐃⲆᐃⲆⲆⵠᐃ, ᐃⲆᐃᐃⵠᐃⵠ);
		const ᐃᐃⵠΔⲆⲆᐃᐃⲆ = ᐃⵠᐃΔΔΔᐃ(ΔΔᐃⵠᐃⲆᐃ, ⵠⲆⵠⵠⲆⲆⵠ, ΔΔⵠΔᐃᐃΔ, ᐃⲆᐃⲆⲆⵠᐃ, ᐃⲆᐃᐃⵠᐃⵠ, ΔΔᐃⵠᐃⲆᐃ);
		const ᐃᐃΔⵠΔⵠⲆ = ⵠᐃΔΔⵠᐃⵠ(ⵠⲆⵠⵠⲆⲆⵠ, ΔΔⵠΔᐃᐃΔ, ᐃⲆᐃⲆⲆⵠᐃ, ᐃⲆᐃᐃⵠᐃⵠ, ΔΔᐃⵠᐃⲆᐃ);
		const ⵠΔⲆⲆⵠΔⲆ = ⵠΔᐃⵠⵠⵠΔ ^ 57467;
		const ᐃᐃⵠⵠⵠΔⲆ = (((ⵠΔⲆⲆⵠΔⲆ ^ ᐃᐃΔⵠΔⵠⲆ) + 3037) * 1664525 + 1013904223) % 4294967296;
		return ᐃᐃⵠⵠⵠΔⲆ
	}

	function ⲆΔⲆⲆΔⵠⵠ(ⲆᐃⵠᐃΔⵠⲆ, ΔⵠᐃⵠⵠⲆⵠ) {
		const ⲆΔΔⵠⵠⵠᐃ = (1664525 * (ⲆᐃⵠᐃΔⵠⲆ + 44664) + 1013904223) % 4294967296;
		const ⲆⵠⵠⲆⲆΔⲆ = ΔⵠᐃⵠⵠⲆⵠ ^ 53080;
		const ⲆΔⵠⵠⲆⵠⵠ = ⵠΔⲆⲆⲆΔⵠ(ⲆΔΔⵠⵠⵠᐃ, ⲆⵠⵠⲆⲆΔⲆ, ⲆΔΔⵠⵠⵠᐃ, ⲆⵠⵠⲆⲆΔⲆ, ⲆΔΔⵠⵠⵠᐃ);
		const ⵠⵠᐃΔΔΔᐃ = ⵠᐃⲆᐃᐃΔⵠ(ⲆⵠⵠⲆⲆΔⲆ, ⲆΔΔⵠⵠⵠᐃ, ⲆⵠⵠⲆⲆΔⲆ, ⲆΔΔⵠⵠⵠᐃ, ⲆⵠⵠⲆⲆΔⲆ);
		const ⵠⵠⲆⵠⲆᐃᐃ = ⲆΔⵠᐃᐃ(ⲆΔΔⵠⵠⵠᐃ, ⲆⵠⵠⲆⲆΔⲆ, ⲆΔΔⵠⵠⵠᐃ, ⲆⵠⵠⲆⲆΔⲆ);
		const Ⲇⵠⵠᐃⵠⵠⵠ = ((ⲆΔⵠⵠⲆⵠⵠ ^ ⵠⵠᐃΔΔΔᐃ) + 17769) % 65357;
		const ΔⵠΔᐃⵠⲆⵠ = (1 + ((Ⲇⵠⵠᐃⵠⵠⵠ ^ ⵠⵠⲆⵠⲆᐃᐃ) + 57525) * 22695477) % 4294967296;
		return ΔⵠΔᐃⵠⲆⵠ
	}

	function ᐃⲆΔⵠᐃΔⵠ(ⵠⲆΔⵠΔⲆᐃ, ⲆⵠΔᐃᐃᐃᐃ, ⲆΔⵠᐃᐃΔΔ) {
		const ΔⵠⵠⲆᐃᐃⵠ = (12345 + (39051 + ⵠⲆΔⵠΔⲆᐃ) * 1103515245) % 2147483648;
		const ΔΔΔⵠⵠᐃᐃ = (44117 | ⲆⵠΔᐃᐃᐃᐃ) & ~(ⲆⵠΔᐃᐃᐃᐃ & 44117);
		const ⵠⲆᐃⵠⲆⲆΔ = (24 << (ⲆΔⵠᐃᐃΔΔ >> 24 & 255)) + (8 << (ⲆΔⵠᐃᐃΔΔ >> 16 & 255)) + (16 << (ⲆΔⵠᐃᐃΔΔ >> 32 & 255)) + (32 << (ⲆΔⵠᐃᐃΔΔ >> 8 & ΔⵠΔΔⲆⲆⵠ));
		const ⵠⲆΔⵠᐃⲆⵠ = ᐃⵠᐃⵠᐃⲆⲆ(ΔⵠⵠⲆᐃᐃⵠ, ΔΔΔⵠⵠᐃᐃ, ⵠⲆᐃⵠⲆⲆΔ, ΔⵠⵠⲆᐃᐃⵠ, ΔΔΔⵠⵠᐃᐃ);
		const ⲆᐃᐃⲆⵠⲆᐃ = ᐃⵠᐃΔΔΔᐃ(ⵠⲆᐃⵠⲆⲆΔ, ΔⵠⵠⲆᐃᐃⵠ, ΔΔΔⵠⵠᐃᐃ, ⵠⲆᐃⵠⲆⲆΔ, ΔⵠⵠⲆᐃᐃⵠ, ΔΔΔⵠⵠᐃᐃ);
		const ⲆᐃᐃⲆⵠⲆⲆ = ᐃΔΔᐃᐃᐃⵠ(ⵠⲆᐃⵠⲆⲆΔ, ΔⵠⵠⲆᐃᐃⵠ);
		const ⲆᐃᐃΔⵠⲆⲆ = (16 << ((ⵠⲆΔⵠᐃⲆⵠ ^ ⲆᐃᐃⲆⵠⲆᐃ) >> 32 & 255)) + (24 << ((ⵠⲆΔⵠᐃⲆⵠ ^ ⲆᐃᐃⲆⵠⲆᐃ) >> 24 & 255)) + (32 << ((ⵠⲆΔⵠᐃⲆⵠ ^ ⲆᐃᐃⲆⵠⲆᐃ) >> ⲆⲆᐃⲆⵠ & 255)) + (8 << ((ⵠⲆΔⵠᐃⲆⵠ ^ ⲆᐃᐃⲆⵠⲆᐃ) >> 16 & ⵠⵠᐃⵠⵠ));
		const ⵠⲆᐃᐃᐃⵠⵠ = (ⲆⲆᐃⲆⵠ << ((ⲆᐃᐃΔⵠⲆⲆ ^ ⲆᐃᐃⲆⵠⲆⲆ) >> 32 & ⵠᐃΔⲆΔ)) + (ⵠᐃᐃⵠⵠ << ((ⲆᐃᐃΔⵠⲆⲆ ^ ⲆᐃᐃⲆⵠⲆⲆ) >> 8 & 255)) + (32 << ((ⲆᐃᐃΔⵠⲆⲆ ^ ⲆᐃᐃⲆⵠⲆⲆ) >> 16 & 255)) + (24 << ((ⲆᐃᐃΔⵠⲆⲆ ^ ⲆᐃᐃⲆⵠⲆⲆ) >> 24 & 255));
		return ⵠⲆᐃᐃᐃⵠⵠ
	}
	const ⵠⵠᐃⵠᐃ = ⲆΔᐃᐃⲆ;
	const ᐃⲆᐃᐃⵠⲆⵠ = ⵠⵠᐃⵠᐃⵠⲆ;
	const ⲆⵠᐃᐃⲆ = ΔᐃⵠⲆⲆ;

	function ⵠᐃⲆᐃᐃΔⵠ(ᐃΔΔΔΔΔΔ, ᐃⵠΔⵠΔⲆⲆ, ΔⲆΔΔⲆᐃᐃ, ΔΔⲆⲆᐃΔⵠ, ᐃΔⵠⵠⵠΔΔ) {
		const ΔⵠⵠᐃΔᐃᐃ = ~(42203 & ᐃΔΔΔΔΔΔ) & ᐃΔΔΔΔΔΔ | ~(ᐃΔΔΔΔΔΔ & 42203) & 42203;
		const ⵠΔᐃΔⲆΔΔ = 50118 ^ ᐃⵠΔⵠΔⲆⲆ;
		const ᐃⵠⵠⲆΔΔΔ = ΔⲆΔΔⲆᐃᐃ ^ 41620;
		const ᐃΔΔΔⲆᐃᐃ = ((ΔΔⲆⲆᐃΔⵠ + 34240) * 2147483629 + 2147483587) % 2147483647;
		const ᐃΔⲆΔΔⲆⲆ = (32 << (ᐃΔⵠⵠⵠΔΔ >> 16 & 255)) + (ⲆⵠΔᐃΔ << (ᐃΔⵠⵠⵠΔΔ >> 8 & 255)) + (8 << (ᐃΔⵠⵠⵠΔΔ >> 32 & 255)) + (24 << (ᐃΔⵠⵠⵠΔΔ >> 24 & 255));
		const ΔᐃⲆⲆⵠᐃⲆ = ᐃⵠᐃΔΔΔᐃ(ΔⵠⵠᐃΔᐃᐃ, ⵠΔᐃΔⲆΔΔ, ᐃⵠⵠⲆΔΔΔ, ᐃΔΔΔⲆᐃᐃ, ᐃΔⲆΔΔⲆⲆ, ΔⵠⵠᐃΔᐃᐃ);
		const ⲆⲆΔⵠᐃᐃΔⵠᐃ = ᐃⵠᐃΔΔΔᐃ(ⵠΔᐃΔⲆΔΔ, ᐃⵠⵠⲆΔΔΔ, ᐃΔΔΔⲆᐃᐃ, ᐃΔⲆΔΔⲆⲆ, ΔⵠⵠᐃΔᐃᐃ, ⵠΔᐃΔⲆΔΔ);
		const ᐃΔᐃⲆᐃⲆΔ = ⲆΔⵠᐃᐃ(ᐃⵠⵠⲆΔΔΔ, ᐃΔΔΔⲆᐃᐃ, ᐃΔⲆΔΔⲆⲆ, ΔⵠⵠᐃΔᐃᐃ);
		const ΔᐃⵠΔΔΔΔ = (43477 | ΔᐃⲆⲆⵠᐃⲆ) & ~(ΔᐃⲆⲆⵠᐃⲆ & 43477);
		const ᐃⲆᐃⵠᐃⵠΔ = (2531011 + ((ΔᐃⵠΔΔΔΔ ^ ᐃΔᐃⲆᐃⲆΔ) + 53616) * 214013) % 4294967296;
		return ᐃⲆᐃⵠᐃⵠΔ
	}
	const ⵠᐃⲆΔⲆ = ⵠⵠᐃΔΔ;
	const ⲆⲆⵠΔΔ = ⲆⲆⲆⵠⵠ;
	const ΔⲆᐃⲆⵠᐃΔ = ⲆᐃΔΔⵠⵠⵠ;
	const ⲆⵠΔΔⵠ = Ⲇⵠᐃⵠᐃ;

	function ⵠᐃΔΔⵠᐃⵠ(ΔⲆⵠⲆⲆΔⲆ, ⵠⲆΔⲆᐃᐃΔ, ᐃⲆⵠᐃⵠⲆⵠ, ΔⵠΔⲆᐃΔΔ, ⲆΔⲆⲆᐃᐃΔ) {
		const ᐃⵠΔᐃⲆⵠⲆ = (1103515245 * (ΔⲆⵠⲆⲆΔⲆ + 49173) + 12345) % 2147483648;
		const ⲆΔⵠᐃⵠⵠⲆ = (ⵠⲆΔⲆᐃᐃΔ + 52922) % 65337;
		const ⵠΔⵠᐃⲆⵠⵠ = ᐃⲆⵠᐃⵠⲆⵠ ^ 25250;
		const ⲆⵠΔⵠΔⵠΔ = ~(ΔⵠΔⲆᐃΔΔ & 10903) & 10903 | ~(10903 & ΔⵠΔⲆᐃΔΔ) & ΔⵠΔⲆᐃΔΔ;
		const ΔⲆᐃⲆⵠⲆⲆ = ~(ⲆΔⲆⲆᐃᐃΔ & 33814) & 33814 | ~(33814 & ⲆΔⲆⲆᐃᐃΔ) & ⲆΔⲆⲆᐃᐃΔ;
		const ⵠΔᐃⵠᐃⲆⵠ = ⵠᐃΔⲆΔⲆΔ(ᐃⵠΔᐃⲆⵠⲆ, ⲆΔⵠᐃⵠⵠⲆ, ⵠΔⵠᐃⲆⵠⵠ, ⲆⵠΔⵠΔⵠΔ, ΔⲆᐃⲆⵠⲆⲆ);
		const ⵠⵠᐃⵠᐃⵠᐃ = ᐃⵠΔⵠᐃΔᐃ(ᐃⵠΔᐃⲆⵠⲆ, ⲆΔⵠᐃⵠⵠⲆ);
		const ΔⵠⲆⵠᐃΔΔⲆⵠ = ⵠᐃΔⲆΔⲆΔ(ⵠΔⵠᐃⲆⵠⵠ, ⲆⵠΔⵠΔⵠΔ, ΔⲆᐃⲆⵠⲆⲆ, ᐃⵠΔᐃⲆⵠⲆ, ⲆΔⵠᐃⵠⵠⲆ);
		const ᐃⲆⲆΔΔΔⲆ = (1 + ((ⵠΔᐃⵠᐃⲆⵠ ^ ⵠⵠᐃⵠᐃⵠᐃ) + 19675) * 22695477) % 4294967296;
		const ΔⲆΔⵠΔᐃᐃ = ~(7922 & ᐃⲆⲆΔΔΔⲆ) & ᐃⲆⲆΔΔΔⲆ | ~(ᐃⲆⲆΔΔΔⲆ & 7922) & 7922;
		return ΔⲆΔⵠΔᐃᐃ
	}

	function ⵠΔⲆⲆⲆΔⵠ(ᐃⵠⲆΔΔⲆᐃ, ΔⲆⵠⲆⵠᐃᐃ, ᐃΔⲆᐃⲆΔᐃ, ⲆⲆᐃⵠⲆⲆⵠ, ΔᐃⵠΔΔⲆⵠ) {
		const ΔΔⵠⵠᐃⵠΔ = (ⲆⵠΔᐃΔ << (ᐃⵠⲆΔΔⲆᐃ >> 32 & ΔⵠΔΔⲆⲆⵠ)) + (24 << (ᐃⵠⲆΔΔⲆᐃ >> 24 & 255)) + (8 << (ᐃⵠⲆΔΔⲆᐃ >> 8 & 255)) + (32 << (ᐃⵠⲆΔΔⲆᐃ >> 16 & 255));
		const ⲆᐃΔⵠⲆⲆΔ = ΔⲆⵠⲆⵠᐃᐃ ^ 55978;
		const ᐃⲆⵠⵠⲆⵠΔ = ((ᐃΔⲆᐃⲆΔᐃ + 2934) * 1664525 + 1013904223) % 4294967296;
		const ⵠⵠⲆΔⲆⵠⵠ = ~(ⲆⲆᐃⵠⲆⲆⵠ & 30642) & (ⲆⲆᐃⵠⲆⲆⵠ | 30642);
		const ⲆΔⵠⵠᐃΔΔ = (8 << (ΔᐃⵠΔΔⲆⵠ >> 8 & ΔⵠΔΔⲆⲆⵠ)) + (24 << (ΔᐃⵠΔΔⲆⵠ >> 32 & 255)) + (16 << (ΔᐃⵠΔΔⲆⵠ >> 24 & 255)) + (32 << (ΔᐃⵠΔΔⲆⵠ >> 16 & 255));
		const ᐃⵠⵠⲆⲆⵠΔ = ⵠᐃⲆᐃᐃΔⵠ(ΔΔⵠⵠᐃⵠΔ, ⲆᐃΔⵠⲆⲆΔ, ᐃⲆⵠⵠⲆⵠΔ, ⵠⵠⲆΔⲆⵠⵠ, ⲆΔⵠⵠᐃΔΔ);
		const ⵠᐃⲆⲆΔᐃⲆ = ΔΔᐃΔΔⵠⲆ(ΔΔⵠⵠᐃⵠΔ, ⲆᐃΔⵠⲆⲆΔ, ᐃⲆⵠⵠⲆⵠΔ, ⵠⵠⲆΔⲆⵠⵠ, ⲆΔⵠⵠᐃΔΔ);
		const ΔⵠⲆⵠⲆⲆᐃⲆⵠ = ⲆΔⵠᐃᐃ(ΔΔⵠⵠᐃⵠΔ, ⲆᐃΔⵠⲆⲆΔ, ᐃⲆⵠⵠⲆⵠΔ, ⵠⵠⲆΔⲆⵠⵠ);
		const ΔᐃΔⵠΔΔᐃ = (16 << ((ᐃⵠⵠⲆⲆⵠΔ ^ ⵠᐃⲆⲆΔᐃⲆ) >> 32 & 255)) + (24 << ((ᐃⵠⵠⲆⲆⵠΔ ^ ⵠᐃⲆⲆΔᐃⲆ) >> Δᐃⵠⵠᐃ & 255)) + (8 << ((ᐃⵠⵠⲆⲆⵠΔ ^ ⵠᐃⲆⲆΔᐃⲆ) >> 24 & 255)) + (32 << ((ᐃⵠⵠⲆⲆⵠΔ ^ ⵠᐃⲆⲆΔᐃⲆ) >> 16 & 255));
		const ⵠⲆⲆⵠΔⵠᐃ = ~(23686 & ΔᐃΔⵠΔΔᐃ) & (23686 | ΔᐃΔⵠΔΔᐃ);
		return ⵠⲆⲆⵠΔⵠᐃ
	}
	const ΔΔⲆΔⵠⵠⵠ = ⲆⵠΔΔΔ;
	const ⲆΔᐃⵠΔ = ΔⵠⲆᐃΔ;
	const ΔᐃΔⵠᐃ = ΔᐃᐃΔᐃ;

	function ᐃⵠΔⵠᐃΔᐃ(ΔⵠⲆΔⲆⵠΔ, ⵠᐃΔΔΔ) {
		const ᐃΔᐃΔⲆΔⵠ = 24508 ^ ΔⵠⲆΔⲆⵠΔ;
		const ⵠⲆΔΔⲆᐃΔ = (16 << (ⵠᐃΔΔΔ >> 16 & 255)) + (24 << (ⵠᐃΔΔΔ >> ᐃΔᐃⵠⲆ & 255)) + (32 << (ⵠᐃΔΔΔ >> 32 & 255)) + (8 << (ⵠᐃΔΔΔ >> 24 & 255));
		const ᐃⵠΔⲆᐃᐃⲆ = ⲆⵠⲆΔⵠᐃᐃ(ᐃΔᐃΔⲆΔⵠ, ⵠⲆΔΔⲆᐃΔ, ᐃΔᐃΔⲆΔⵠ, ⵠⲆΔΔⲆᐃΔ, ᐃΔᐃΔⲆΔⵠ);
		const ΔᐃⲆΔⲆⵠᐃ = ⵠΔⲆⲆⲆΔⵠ(ⵠⲆΔΔⲆᐃΔ, ᐃΔᐃΔⲆΔⵠ, ⵠⲆΔΔⲆᐃΔ, ᐃΔᐃΔⲆΔⵠ, ⵠⲆΔΔⲆᐃΔ);
		const ΔΔΔΔⵠᐃᐃⵠΔ = ᐃⵠᐃⵠᐃⲆⲆ(ᐃΔᐃΔⲆΔⵠ, ⵠⲆΔΔⲆᐃΔ, ᐃΔᐃΔⲆΔⵠ, ⵠⲆΔΔⲆᐃΔ, ᐃΔᐃΔⲆΔⵠ);
		const ⵠᐃᐃΔΔΔⵠ = (2147483629 * ((ᐃⵠΔⲆᐃᐃⲆ ^ ΔᐃⲆΔⲆⵠᐃ) + 11269) + 2147483587) % 2147483647;
		const ⵠⲆΔⵠΔⵠⲆ = ~(ⵠᐃᐃΔΔΔⵠ & 40927) & 40927 | ~(40927 & ⵠᐃᐃΔΔΔⵠ) & ⵠᐃᐃΔΔΔⵠ;
		return ⵠⲆΔⵠΔⵠⲆ
	}

	function ΔᐃΔⵠⲆⵠⵠ(ᐃΔⵠΔⲆᐃⲆ, ⵠⲆΔⵠᐃⲆΔ, ᐃⲆⲆⵠⵠΔⲆ) {
		const ᐃΔⵠΔΔⲆⵠ = 23323 ^ ᐃΔⵠΔⲆᐃⲆ;
		const ⵠⵠΔΔⵠᐃⵠ = (2531011 + 214013 * (61713 + ⵠⲆΔⵠᐃⲆΔ)) % 4294967296;
		const ᐃⲆΔⲆⲆΔᐃ = (ᐃⲆⲆⵠⵠΔⲆ | 24198) & ~(ᐃⲆⲆⵠⵠΔⲆ & 24198);
		const ΔΔⵠⵠⵠⲆⲆ = ⲆⵠⲆΔⵠᐃᐃ(ᐃΔⵠΔΔⲆⵠ, ⵠⵠΔΔⵠᐃⵠ, ᐃⲆΔⲆⲆΔᐃ, ᐃΔⵠΔΔⲆⵠ, ⵠⵠΔΔⵠᐃⵠ);
		const ᐃⵠⵠΔⲆΔⵠ = ⲆⵠⲆΔⵠᐃᐃ(ᐃⲆΔⲆⲆΔᐃ, ᐃΔⵠΔΔⲆⵠ, ⵠⵠΔΔⵠᐃⵠ, ᐃⲆΔⲆⲆΔᐃ, ᐃΔⵠΔΔⲆⵠ);
		const ⵠΔΔᐃⵠⲆᐃᐃⲆ = ⲆⵠⲆΔⵠᐃᐃ(ⵠⵠΔΔⵠᐃⵠ, ᐃⲆΔⲆⲆΔᐃ, ᐃΔⵠΔΔⲆⵠ, ⵠⵠΔΔⵠᐃⵠ, ᐃⲆΔⲆⲆΔᐃ);
		const ᐃΔᐃΔⲆⲆΔ = (16 << ((ΔΔⵠⵠⵠⲆⲆ ^ ᐃⵠⵠΔⲆΔⵠ) >> 32 & 255)) + (8 << ((ΔΔⵠⵠⵠⲆⲆ ^ ᐃⵠⵠΔⲆΔⵠ) >> 8 & 255)) + (24 << ((ΔΔⵠⵠⵠⲆⲆ ^ ᐃⵠⵠΔⲆΔⵠ) >> 24 & 255)) + (32 << ((ΔΔⵠⵠⵠⲆⲆ ^ ᐃⵠⵠΔⲆΔⵠ) >> 16 & ⲆΔⲆⵠⲆ));
		const ⵠⵠᐃᐃⲆᐃΔ = ᐃΔᐃΔⲆⲆΔ ^ 31181;
		return ⵠⵠᐃᐃⲆᐃΔ
	}
	const ΔⲆⲆⲆᐃ = ΔⲆᐃⲆⵠ;

	function ᐃⵠᐃΔΔΔᐃ(ⵠⵠᐃΔⲆΔⵠ, ⲆⲆᐃᐃᐃⵠᐃ, ΔᐃΔᐃⲆᐃⵠ, ᐃⲆᐃᐃⵠⵠᐃ, ⵠⵠᐃⵠᐃᐃⵠ, ⲆⵠⲆⵠⲆΔⵠ) {
		const ΔᐃⵠᐃⲆⵠⲆ = (ⵠⵠᐃΔⲆΔⵠ + 52483) % 65496;
		const ΔⲆⲆⲆᐃᐃᐃ = (ⵠᐃᐃⵠⵠ << (ⲆⲆᐃᐃᐃⵠᐃ >> 16 & 255)) + (24 << (ⲆⲆᐃᐃᐃⵠᐃ >> 8 & 255)) + (32 << (ⲆⲆᐃᐃᐃⵠᐃ >> 24 & 255)) + (8 << (ⲆⲆᐃᐃᐃⵠᐃ >> 32 & 255));
		const ⵠΔⲆⵠⵠᐃⵠ = ΔᐃΔᐃⲆᐃⵠ ^ 8102;
		const Ⲇᐃⵠⵠⵠᐃᐃ = (24 << (ᐃⲆᐃᐃⵠⵠᐃ >> ᐃΔᐃⲆⲆ & 255)) + (32 << (ᐃⲆᐃᐃⵠⵠᐃ >> 32 & ⲆΔⲆⵠⲆ)) + (8 << (ᐃⲆᐃᐃⵠⵠᐃ >> 24 & 255)) + (16 << (ᐃⲆᐃᐃⵠⵠᐃ >> Δᐃⵠⵠᐃ & 255));
		const ΔⲆⲆΔᐃᐃᐃ = ~(ⵠⵠᐃⵠᐃᐃⵠ & 29687) & 29687 | ~(29687 & ⵠⵠᐃⵠᐃᐃⵠ) & ⵠⵠᐃⵠᐃᐃⵠ;
		const ⲆⵠᐃⲆᐃⵠᐃ = (Δⵠᐃ + 22695477 * (62237 + ⲆⵠⲆⵠⲆΔⵠ)) % 4294967296;
		const ⲆΔᐃⵠΔᐃᐃ = ᐃᐃⲆΔⵠⲆⲆ(ΔᐃⵠᐃⲆⵠⲆ, ΔⲆⲆⲆᐃᐃᐃ);
		const ⲆⵠⲆⵠⵠᐃΔ = ᐃᐃⲆΔⵠⲆⲆ(ⵠΔⲆⵠⵠᐃⵠ, Ⲇᐃⵠⵠⵠᐃᐃ);
		const ⲆⲆⵠⵠᐃΔᐃᐃᐃ = ᐃᐃⲆΔⵠⲆⲆ(ΔⲆⲆΔᐃᐃᐃ, ⲆⵠᐃⲆᐃⵠᐃ);
		const ᐃⵠⲆⲆᐃⵠΔ = (45290 + (ⲆΔᐃⵠΔᐃᐃ ^ ⲆⵠⲆⵠⵠᐃΔ)) % 65334;
		const ΔᐃⵠᐃⲆᐃᐃ = 55575 ^ ᐃⵠⲆⲆᐃⵠΔ;
		return ΔᐃⵠᐃⲆᐃᐃ
	}
	const Ⲇⵠᐃ = ⵠⵠᐃ;
	const ⲆⵠΔᐃⲆ = ᐃⲆΔΔⲆ;
	const ⵠⵠΔⵠ = ⵠⲆΔᐃ;

	function ᐃΔΔᐃᐃᐃⵠ(ᐃᐃᐃⵠⲆ, ⵠΔⵠⵠΔᐃⲆ) {
		const ΔᐃⵠⲆᐃⲆⵠ = (16 << (ᐃᐃᐃⵠⲆ >> 8 & 255)) + (32 << (ᐃᐃᐃⵠⲆ >> ⲆⵠΔᐃΔ & 255)) + (8 << (ᐃᐃᐃⵠⲆ >> 32 & ⲆⲆⲆⵠᐃ)) + (24 << (ᐃᐃᐃⵠⲆ >> 24 & 255));
		const ᐃⲆⲆΔᐃⲆⲆ = (32 << (ⵠΔⵠⵠΔᐃⲆ >> 32 & 255)) + (24 << (ⵠΔⵠⵠΔᐃⲆ >> 24 & 255)) + (8 << (ⵠΔⵠⵠΔᐃⲆ >> 8 & 255)) + (16 << (ⵠΔⵠⵠΔᐃⲆ >> 16 & 255));
		const ΔⲆᐃᐃⲆΔⵠ = ΔⲆⲆΔⲆΔΔ(ΔᐃⵠⲆᐃⲆⵠ, ᐃⲆⲆΔᐃⲆⲆ, ΔᐃⵠⲆᐃⲆⵠ, ᐃⲆⲆΔᐃⲆⲆ, ΔᐃⵠⲆᐃⲆⵠ, ᐃⲆⲆΔᐃⲆⲆ);
		const ΔᐃᐃⵠⲆᐃⵠΔⵠ = ⲆⵠΔΔΔΔᐃ(ΔᐃⵠⲆᐃⲆⵠ, ᐃⲆⲆΔᐃⲆⲆ, ΔᐃⵠⲆᐃⲆⵠ, ᐃⲆⲆΔᐃⲆⲆ, ΔᐃⵠⲆᐃⲆⵠ);
		const ⵠᐃⵠⲆⵠⵠⲆΔΔ = ⲆΔⲆⲆΔⵠⵠ(ᐃⲆⲆΔᐃⲆⲆ, ΔᐃⵠⲆᐃⲆⵠ);
		const ⵠᐃᐃᐃⲆΔᐃ = (ΔⲆᐃᐃⲆΔⵠ | 58283) & ~(58283 & ΔⲆᐃᐃⲆΔⵠ);
		const ᐃᐃᐃΔⲆᐃΔ = 8337 ^ ⵠᐃᐃᐃⲆΔᐃ;
		return ᐃᐃᐃΔⲆᐃΔ
	}
	const ΔⵠⵠᐃⲆ = ⵠⵠⵠᐃⵠ;
	ΔⲆᐃ = {
		"ⵠⲆΔⵠᐃΔⵠ": ⵠⲆΔⵠᐃΔⵠ,
		"ⲆⵠⲆⲆⵠⲆⵠⵠⵠ": function(ᐃΔΔᐃΔⲆΔ) {
			var ⵠΔⲆΔᐃΔⵠ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃΔΔᐃΔⲆΔ, ᐃ[115]);
			ⵠΔⲆΔᐃΔⵠ.focus()
		},
		"ᐃᐃⵠᐃⲆⵠΔ": function(ᐃΔΔᐃΔⲆΔ) {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃΔΔᐃΔⲆΔ, ᐃ[115], "location=yes,height=570,width=520,scrollbars=yes,status=yes")
		},
		"ΔⵠⵠᐃΔΔⲆ": function(ⵠᐃΔΔ, ΔᐃⲆΔ) {
			for (var ᐃⲆ in ⵠᐃΔΔ) {
				if (ⵠᐃΔΔ[ᐃⲆ] != ΔᐃⲆΔ[ᐃⲆ]) return false
			}
			return ⲆⲆⵠⵠΔ
		},
		"ⲆΔⵠⵠⲆᐃᐃΔᐃ": function(ⵠᐃΔΔ, ΔᐃⲆΔ) {
			if (ⵠᐃΔΔ.length != ΔᐃⲆΔ.length) return false;
			for (var ᐃⲆ = 0; ᐃⲆ < ⵠᐃΔΔ.length; ᐃⲆ++) {
				if (typeof ⵠᐃΔΔ == ᐃ[163]) {
					if (!this.ΔⵠⵠᐃΔΔⲆ(ⵠᐃΔΔ[ᐃⲆ], ΔᐃⲆΔ[ᐃⲆ])) return ᐃΔᐃᐃΔ
				} else if (ⵠᐃΔΔ[ᐃⲆ] != ΔᐃⲆΔ[ᐃⲆ]) return false
			}
			return true
		},
		"ⵠⲆᐃⲆᐃᐃⵠ": function(ᐃΔⲆⲆᐃ, ᐃⲆⵠᐃΔⲆᐃ) {
			ᐃⲆⵠᐃΔⲆᐃ.x = ᐃΔⲆⲆᐃ.x;
			ᐃⲆⵠᐃΔⲆᐃ.y = ᐃΔⲆⲆᐃ.y
		},
		"ΔᐃⲆΔΔᐃΔ": function(ⵠⵠⵠΔⲆ, ᐃᐃΔⲆΔ) {
			return {
				x: ⵠⵠⵠΔⲆ.x - ᐃᐃΔⲆΔ.x,
				y: ⵠⵠⵠΔⲆ.y - ᐃᐃΔⲆΔ.y
			}
		},
		"ⲆⲆⵠⵠᐃⵠΔⲆᐃ": function(ⵠΔΔ, ΔΔⲆⵠⲆⵠⲆ) {
			ⵠΔΔ.x *= ΔΔⲆⵠⲆⵠⲆ, ⵠΔΔ.y *= ΔΔⲆⵠⲆⵠⲆ
		},
		"ΔᐃⲆᐃΔⲆΔ": function(ⵠⵠⵠΔⲆ, ᐃᐃΔⲆΔ) {
			return ⵠⵠⵠΔⲆ.x * ᐃᐃΔⲆΔ.x + ⵠⵠⵠΔⲆ.y * ᐃᐃΔⲆΔ.y
		},
		"ᐃⵠⵠⵠΔⵠⲆ": function(ⵠΔΔ) {
			return Math.sqrt(ⵠΔΔ.x * ⵠΔΔ.x + ⵠΔΔ.y * ⵠΔΔ.y)
		},
		sign: function(ⵠᐃΔΔ) {
			if (ⵠᐃΔΔ < 0) return -1;
			else return Δⵠᐃ
		},
		"ΔⲆᐃΔΔⲆᐃ": function(ⵠⵠⵠΔⲆ, ᐃᐃΔⲆΔ) {
			return ⵠⵠⵠΔⲆ.x * ᐃᐃΔⲆΔ.y - ⵠⵠⵠΔⲆ.y * ᐃᐃΔⲆΔ.x
		},
		"ᐃΔᐃⲆⲆΔⵠ": function(ⲆᐃⵠΔΔⲆⵠ, ᐃⲆⵠᐃⲆⵠᐃ, Ⲇᐃᐃᐃⵠ, ΔᐃⵠⲆᐃ) {
			var ⵠⵠᐃᐃⲆΔⲆ = ΔᐃⵠⲆᐃ - ᐃⲆⵠᐃⲆⵠᐃ;
			var ᐃᐃⲆΔΔΔⵠ = Ⲇᐃᐃᐃⵠ - ⲆᐃⵠΔΔⲆⵠ;
			return Math.atan2(ⵠⵠᐃᐃⲆΔⲆ, ᐃᐃⲆΔΔΔⵠ)
		},
		"ⲆᐃᐃΔⲆⵠⵠ": function(ⵠⵠⵠΔⲆ, ᐃᐃΔⲆΔ) {
			return Math.asin(this.ΔᐃⲆᐃΔⲆΔ(ⵠⵠⵠΔⲆ, ᐃᐃΔⲆΔ) / (this.ᐃⵠⵠⵠΔⵠⲆ(ⵠⵠⵠΔⲆ) * this.ᐃⵠⵠⵠΔⵠⲆ(ᐃᐃΔⲆΔ))) * this.sign(this.ΔⲆᐃΔΔⲆᐃ(ⵠⵠⵠΔⲆ, ᐃᐃΔⲆΔ))
		},
		"ⲆΔⲆⲆⵠᐃᐃ": function(ᐃᐃᐃᐃⵠᐃᐃ) {
			ⲆᐃᐃⲆⲆⵠⵠ = location[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[299]];
			ᐃᐃᐃᐃⵠᐃᐃ = ᐃᐃᐃᐃⵠᐃᐃ.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
			var ᐃⵠⵠⵠⵠⵠⲆ = "[\\?&]" + ᐃᐃᐃᐃⵠᐃᐃ + "=([^&#]*)";
			var ΔᐃΔⲆᐃⵠᐃ = new RegExp(ᐃⵠⵠⵠⵠⵠⲆ);
			var ᐃⵠΔΔΔⲆΔ = ΔᐃΔⲆᐃⵠᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[25]](ⲆᐃᐃⲆⲆⵠⵠ);
			return ᐃⵠΔΔΔⲆΔ === null ? null : ᐃⵠΔΔΔⲆΔ[ⲆⲆⵠ]
		},
		"ⲆⲆᐃᐃⵠⵠⲆ": function(ⵠΔⵠⲆᐃ, ᐃⵠⲆΔΔ) {
			var ⲆᐃΔⵠΔᐃᐃ = Math.PI * 2;
			ᐃⵠⲆΔΔ = (ᐃⵠⲆΔΔ % ⲆᐃΔⵠΔᐃᐃ + ⲆᐃΔⵠΔᐃᐃ) % ⲆᐃΔⵠΔᐃᐃ;
			if (Math.abs(ⵠΔⵠⲆᐃ - ᐃⵠⲆΔΔ) > Math.PI) {
				if (ⵠΔⵠⲆᐃ > ᐃⵠⲆΔΔ) return ᐃⵠⲆΔΔ + ⲆᐃΔⵠΔᐃᐃ;
				else return ᐃⵠⲆΔΔ - ⲆᐃΔⵠΔᐃᐃ
			}
			return ᐃⵠⲆΔΔ
		},
		"ᐃⵠᐃᐃᐃⲆⲆ": function(ⲆΔⵠⲆⵠᐃΔ, ΔᐃⵠⵠⲆⵠΔ) {
			return this.ⲆᐃᐃΔⲆⵠⵠ({
				x: ⲆⲆⵠ,
				y: 0
			}, this.ΔᐃⲆΔΔᐃΔ(ⲆΔⵠⲆⵠᐃΔ, ΔᐃⵠⵠⲆⵠΔ))
		},
		"ⲆⵠⲆⲆ": function(ⵠᐃΔΔ, ΔᐃⲆΔ) {
			return Math.sqrt((ΔᐃⲆΔ.x - ⵠᐃΔΔ.x) * (ΔᐃⲆΔ.x - ⵠᐃΔΔ.x) + (ΔᐃⲆΔ.y - ⵠᐃΔΔ.y) * (ΔᐃⲆΔ.y - ⵠᐃΔΔ.y))
		},
		"ᐃᐃᐃᐃᐃΔⲆ": function(Ⲇᐃᐃᐃ, ⵠᐃΔΔ) {
			return {
				x: Math.sin(ⵠᐃΔΔ) * Ⲇᐃᐃᐃ,
				y: Math.cos(ⵠᐃΔΔ) * Ⲇᐃᐃᐃ
			}
		},
		"ᐃᐃᐃᐃᐃⲆⲆ": function(ᐃΔⲆⲆᐃ, ᐃⲆⵠᐃΔⲆᐃ) {
			ᐃΔⲆⲆᐃ.x += ᐃⲆⵠᐃΔⲆᐃ.x;
			ᐃΔⲆⲆᐃ.y += ᐃⲆⵠᐃΔⲆᐃ.y
		},
		"ⲆⲆᐃⲆᐃᐃΔ": function(ᐃΔⲆⲆᐃ, ᐃⲆⵠᐃΔⲆᐃ) {
			ᐃΔⲆⲆᐃ.x -= ᐃⲆⵠᐃΔⲆᐃ.x;
			ᐃΔⲆⲆᐃ.y -= ᐃⲆⵠᐃΔⲆᐃ.y
		},
		"ΔᐃⲆⵠⵠⵠᐃⵠⲆ": function(ⵠΔΔ, Ⲇᐃ, ⲆⲆⲆ) {
			ⵠΔΔ.x += Ⲇᐃ;
			ⵠΔΔ.y += ⲆⲆⲆ
		},
		"ⲆΔΔⲆᐃᐃⲆᐃᐃ": function(ⵠΔΔ, Ⲇᐃ, ⲆⲆⲆ) {
			return {
				x: ⵠΔΔ.x + Ⲇᐃ,
				y: ⵠΔΔ.y + ⲆⲆⲆ
			}
		},
		"ⵠⲆΔΔⲆ": function(ⵠΔⲆ, Ⲇᐃᐃᐃ, ⵠᐃΔΔ) {
			ⵠΔⲆ.x += Math.sin(ⵠᐃΔΔ) * Ⲇᐃᐃᐃ;
			ⵠΔⲆ.y += Math.cos(ⵠᐃΔΔ) * Ⲇᐃᐃᐃ
		},
		"ΔΔⵠⲆⵠΔᐃ": function(ⵠᐃΔΔ, ΔᐃⲆΔ) {
			return Math.floor((ⵠᐃΔΔ - ΔᐃⲆΔ) / ⵠⵠΔⵠ)
		},
		"ᐃΔΔᐃΔⲆⵠ": function(ⵠᐃΔΔ, ΔᐃⲆΔ) {
			return {
				x: (ⵠᐃΔΔ.x + ΔᐃⲆΔ.x) / ⵠⲆΔᐃ,
				y: (ⵠᐃΔΔ.y + ΔᐃⲆΔ.y) / ⵠⵠᐃⲆ
			}
		},
		"ΔⲆⲆᐃⲆΔⲆ": function() {
			return Math.random() > .5 ? 1 : -1
		},
		"ⵠⲆᐃⵠᐃⵠⵠⲆⵠ": function(Ⲇᐃ, ⲆⲆⲆ, Ⲇᐃᐃᐃ) {
			var ⲆⵠⵠᐃⲆ = this.ΔⲆⲆᐃⲆΔⲆ();
			var ⲆᐃⵠⲆΔ = this.ΔⲆⲆᐃⲆΔⲆ();
			var ⵠᐃΔΔ = Math.random() * Math.PI / 2;
			return {
				x: Math.floor(Ⲇᐃ + Math.sin(ⵠᐃΔΔ) * ⲆⵠⵠᐃⲆ * Ⲇᐃᐃᐃ),
				y: Math.floor(ⲆⲆⲆ + Math.cos(ⵠᐃΔΔ) * ⲆᐃⵠⲆΔ * Ⲇᐃᐃᐃ)
			}
		},
		"ⲆΔΔⵠΔⲆΔⵠⵠ": function(Ⲇᐃ, ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ) {
			this.x = Ⲇᐃ;
			this.y = ⲆⲆⲆ;
			this.w = ᐃΔΔ;
			this.ΔⵠⲆ = ΔⵠⲆ
		},
		"ⲆⲆᐃᐃⵠⵠⲆΔΔ": function(ᐃᐃⵠᐃ) {
			ⵠᐃΔΔ = [];
			ⵠᐃΔΔ.push.apply(ⵠᐃΔΔ, ᐃᐃⵠᐃ);
			var ⵠΔⲆΔᐃⵠᐃ = [];
			while (ⵠᐃΔΔ.length > ⵠⵠⵠ) {
				var ΔⲆⵠ = Math.floor(Math.random() * ⵠᐃΔΔ.length);
				ⵠΔⲆΔᐃⵠᐃ.push(ⵠᐃΔΔ[ΔⲆⵠ]);
				ⵠᐃΔΔ.splice(ΔⲆⵠ, Δⵠᐃ)
			}
			return ⵠΔⲆΔᐃⵠᐃ
		},
		"ⲆⵠⵠΔΔⲆᐃ": function(ᐃᐃⲆⲆ) {
			if (ᐃᐃⲆⲆ >= 2e4) ᐃᐃⲆⲆ = (ᐃᐃⲆⲆ - 2e4) * 1e3;
			else if (ᐃᐃⲆⲆ >= 1e4) ᐃᐃⲆⲆ = (ᐃᐃⲆⲆ - 1e4) * ⲆⵠΔΔΔ;
			return ᐃᐃⲆⲆ
		},
		"ⵠⲆⲆⵠⵠΔᐃ": function(ᐃᐃⲆⲆ) {
			if (typeof ᐃᐃⲆⲆ !== "number") return "0";
			else if (ᐃᐃⲆⲆ >= 1e4) {
				var ⲆⵠⲆⲆΔ = Math.floor(Math.log10(ᐃᐃⲆⲆ)) - ⵠⵠᐃⲆ;
				var ΔᐃⲆⲆΔΔΔ = Math.max(Ⲇⵠᐃ, ᐃΔᐃⲆ - ⲆⵠⲆⲆΔ);
				var ΔⵠⵠⲆ = Math.floor(ᐃᐃⲆⲆ / 1e3)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]]();
				if (ΔᐃⲆⲆΔΔΔ) {
					ΔⵠⵠⲆ += "." + (ᐃᐃⲆⲆ % 1e3 / 1e3)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]]().substring(ⵠⲆΔᐃ).substring(0, ΔᐃⲆⲆΔΔΔ);
					for (var ᐃⲆ = ΔⵠⵠⲆ.length - ⲆⵠⲆ, ⵠᐃᐃᐃΔⲆᐃ = Ⲇⵠᐃ; ᐃⲆ > 0; ᐃⲆ--) {
						if (ΔⵠⵠⲆ[ᐃⲆ] != "0") break;
						else ⵠᐃᐃᐃΔⲆᐃ++
					}
					ΔⵠⵠⲆ = ΔⵠⵠⲆ.substring(0, ΔⵠⵠⲆ.length - ⵠᐃᐃᐃΔⲆᐃ);
					if (ΔⵠⵠⲆ[ΔⵠⵠⲆ.length - 1] == ".") ΔⵠⵠⲆ = ΔⵠⵠⲆ.substring(ⵠⵠᐃ, ΔⵠⵠⲆ.length - ⲆⲆⵠ)
				}
				ΔⵠⵠⲆ += "k";
				return ΔⵠⵠⲆ
			} else return ᐃᐃⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]]()
		},
		"ΔΔⲆⵠΔᐃⵠ": function(ᐃᐃⲆ) {
			return ᐃᐃⲆ * (ⵠⵠᐃⲆ - ᐃᐃⲆ)
		},
		"ΔΔⲆⲆⲆⵠⲆ": function(ᐃᐃⲆ) {
			return --ᐃᐃⲆ * ᐃᐃⲆ * ᐃᐃⲆ + Δⵠᐃ
		},
		"ΔⲆΔⲆⲆ": function(ᐃᐃⲆ) {
			return ᐃᐃⲆ < .5 ? 2 * ᐃᐃⲆ * ᐃᐃⲆ : -1 + (4 - 2 * ᐃᐃⲆ) * ᐃᐃⲆ
		},
		"ⵠⵠᐃⵠⲆⵠᐃ": function(ᐃᐃⲆ) {
			return ᐃᐃⲆ < .5 ? 4 * ᐃᐃⲆ * ᐃᐃⲆ * ᐃᐃⲆ : (ᐃᐃⲆ - 1) * (ⵠⵠᐃⲆ * ᐃᐃⲆ - ⵠⵠΔⵠ) * (ⵠⲆΔᐃ * ᐃᐃⲆ - ⵠⵠᐃⲆ) + 1
		},
		"ⲆΔᐃΔᐃᐃᐃΔΔ": function(ᐃᐃⲆ) {
			return ᐃᐃⲆ < .5 ? ⲆⲆᐃⲆⵠ * ᐃᐃⲆ * ᐃᐃⲆ * ᐃᐃⲆ * ᐃᐃⲆ : Δⵠᐃ - ⲆⲆᐃⲆⵠ * --ᐃᐃⲆ * ᐃᐃⲆ * ᐃᐃⲆ * ᐃᐃⲆ
		},
		"ΔᐃⲆⵠⲆⲆᐃ": function(ᐃᐃⲆ) {
			return ⲆⵠⲆ - --ᐃᐃⲆ * ᐃᐃⲆ * ᐃᐃⲆ * ᐃᐃⲆ
		},
		"ⲆⵠⲆⲆΔⲆⲆ": function(ᐃᐃⲆ) {
			return ⲆⵠⲆ + --ᐃᐃⲆ * ᐃᐃⲆ * ᐃᐃⲆ * ᐃᐃⲆ * ᐃᐃⲆ
		},
		"ᐃⵠⲆⲆ": function(ⵠΔⲆ, ⵠΔΔ, ⲆᐃΔΔ, ᐃⲆⲆⲆ, ⲆⵠΔΔᐃΔΔ, ᐃⵠΔⲆΔᐃΔ) {
			this.ⵠΔⲆ = ⵠΔⲆ;
			this.ⵠΔΔ = ⵠΔΔ;
			this.max = ⲆᐃΔΔ;
			this.min = ᐃⲆⲆⲆ;
			this.ⲆⵠΔΔᐃΔΔ = ⲆⵠΔΔᐃΔΔ;
			this.ᐃⵠΔⲆΔᐃΔ = ᐃⵠΔⲆΔᐃΔ;
			this.ⵠⵠᐃⲆΔ = 0;
			this.ΔⵠΔ = function() {
				if (this.ⵠΔⲆ) {
					var ⵠΔΔ = this.ⵠΔΔ + ᐃⵠᐃⵠ * this.ⲆⵠΔΔᐃΔΔ;
					if (ⵠΔΔ > this.max) {
						this.ⵠΔΔ = this.max;
						this.ⵠΔⲆ = false;
						return ⲆⲆⵠⵠΔ
					} else this.ⵠΔΔ = ⵠΔΔ
				} else {
					var ⵠΔΔ = this.ⵠΔΔ - ᐃⵠᐃⵠ * this.ᐃⵠΔⲆΔᐃΔ;
					if (ⵠΔΔ < this.min) {
						this.ⵠΔΔ = this.min;
						this.ⵠΔⲆ = true
					} else this.ⵠΔΔ = ⵠΔΔ
				}
			};
			return ⲆⵠΔΔⵠ
		},
		"ΔⵠᐃΔⵠ": function(ⲆⲆⲆᐃᐃ, ᐃᐃΔΔⵠ, ᐃᐃⲆᐃⲆ, ⲆⵠⵠᐃⲆ, Ⲇᐃ, ⲆⵠⲆⵠⵠ) {
			this.ⲆⲆⲆᐃᐃ = ⲆⲆⲆᐃᐃ;
			this.ᐃᐃΔΔⵠ = ᐃᐃΔΔⵠ, this.ᐃᐃⲆᐃⲆ = ᐃᐃⲆᐃⲆ, this.ⲆⵠⵠᐃⲆ = ⲆⵠⵠᐃⲆ, this.x = Ⲇᐃ, this.ⲆⵠⲆⵠⵠ = ⲆⵠⲆⵠⵠ, this.ⲆᐃⵠⵠⵠⲆᐃ = function() {
				this.x = this.ⲆΔⲆᐃᐃΔⲆⲆⲆ;
				this.ᐃᐃΔΔⵠ = Ⲇⵠᐃ
			}, this.ᐃΔⵠⵠΔ = function(Ⲇᐃ) {
				if (Ⲇᐃ !== this.ⲆⵠⲆⵠⵠ) {
					this.ⲆⵠⲆⵠⵠ = Ⲇᐃ;
					this.ⲆⵠⵠᐃⲆ = this.x;
					this.ᐃᐃΔΔⵠ = ⵠⵠⵠ
				}
				if (this.ⲆⵠⲆⵠⵠ !== this.x) {
					this.ᐃᐃΔΔⵠ += ᐃⵠᐃⵠ;
					if (this.ᐃᐃΔΔⵠ > this.ᐃᐃⲆᐃⲆ) this.x = this.ⲆⵠⲆⵠⵠ;
					else {
						var ΔᐃⲆⵠ = this.ⲆⲆⲆᐃᐃ(this.ᐃᐃΔΔⵠ / this.ᐃᐃⲆᐃⲆ);
						this.x = this.ⲆⵠⵠᐃⲆ + (this.ⲆⵠⲆⵠⵠ - this.ⲆⵠⵠᐃⲆ) * ΔᐃⲆⵠ
					}
				}
			}
		},
		"ⵠΔᐃΔΔΔⲆ": function(ⲆⲆⲆᐃᐃ, ᐃᐃΔΔⵠ, ᐃᐃⲆᐃⲆ, ⲆⵠⵠᐃⲆ, ⲆᐃⵠⲆΔ, Ⲇᐃ, ⲆⲆⲆ, ⲆⵠⲆⵠⵠ, ΔᐃⲆⲆⵠⵠⲆ) {
			this.ⲆⲆⲆᐃᐃ = ⲆⲆⲆᐃᐃ;
			this.ᐃᐃΔΔⵠ = ᐃᐃΔΔⵠ, this.ᐃᐃⲆᐃⲆ = ᐃᐃⲆᐃⲆ, this.ⲆⵠⵠᐃⲆ = ⲆⵠⵠᐃⲆ, this.ⲆᐃⵠⲆΔ = ⲆᐃⵠⲆΔ, this.x = Ⲇᐃ, this.y = ⲆⲆⲆ, this.ⲆⵠⲆⵠⵠ = ⲆⵠⲆⵠⵠ, this.ΔᐃⲆⲆⵠⵠⲆ = ΔᐃⲆⲆⵠⵠⲆ, this.ᐃΔⵠⵠΔ = function(ΔⲆⵠᐃ) {
				if (ΔⲆⵠᐃ.x != this.ⲆⵠⲆⵠⵠ || ΔⲆⵠᐃ.y != this.ΔᐃⲆⲆⵠⵠⲆ) {
					this.ⲆⵠⲆⵠⵠ = ΔⲆⵠᐃ.x;
					this.ΔᐃⲆⲆⵠⵠⲆ = ΔⲆⵠᐃ.y;
					this.ⲆⵠⵠᐃⲆ = this.x;
					this.ⲆᐃⵠⲆΔ = this.y;
					this.ᐃᐃΔΔⵠ = 0
				}
				if (this.ⲆⵠⲆⵠⵠ != this.x || this.ΔᐃⲆⲆⵠⵠⲆ != this.y) {
					this.ᐃᐃΔΔⵠ += ᐃⵠᐃⵠ;
					if (this.ᐃᐃΔΔⵠ > this.ᐃᐃⲆᐃⲆ) {
						this.x = this.ⲆⵠⲆⵠⵠ;
						this.y = this.ΔᐃⲆⲆⵠⵠⲆ
					} else {
						var ΔᐃⲆⵠ = this.ⲆⲆⲆᐃᐃ(this.ᐃᐃΔΔⵠ / this.ᐃᐃⲆᐃⲆ);
						this.x = this.ⲆⵠⵠᐃⲆ + (this.ⲆⵠⲆⵠⵠ - this.ⲆⵠⵠᐃⲆ) * ΔᐃⲆⵠ;
						this.y = this.ⲆᐃⵠⲆΔ + (this.ΔᐃⲆⲆⵠⵠⲆ - this.ⲆᐃⵠⲆΔ) * ΔᐃⲆⵠ
					}
				}
			}
		},
		"ⵠⵠⵠᐃΔᐃⵠ": function(ᐃⲆΔⲆⲆ) {
			var ΔᐃⲆΔΔ = "";
			for (var ᐃⲆ = 0; ᐃⲆ < ᐃⲆΔⲆⲆ; ᐃⲆ++) {
				ΔᐃⲆΔΔ += String.fromCharCode(48 + Math.floor(Math.random() * 74))
			}
			return ΔᐃⲆΔΔ
		},
		"ⲆⵠΔΔⲆΔΔ": function(name, ᐃΔΔᐃΔⲆΔ) {
			if (!ᐃΔΔᐃΔⲆΔ) ᐃΔΔᐃΔⲆΔ = location[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[299]];
			name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
			var ᐃⵠⵠⵠⵠⵠⲆ = "[\\?&]" + name + "=([^&#]*)";
			var ΔᐃⲆΔⵠⵠⵠ = new RegExp(ᐃⵠⵠⵠⵠⵠⲆ);
			var ᐃⵠΔΔΔⲆΔ = ΔᐃⲆΔⵠⵠⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[25]](ᐃΔΔᐃΔⲆΔ);
			return ᐃⵠΔΔΔⲆΔ == null ? null : ᐃⵠΔΔΔⲆΔ[Δⵠᐃ]
		},
		"ⲆΔᐃᐃⵠ": function(ᐃⲆᐃᐃⲆΔⵠ) {
			let ᐃⲆⲆᐃⵠⵠⲆ = "";
			const ᐃⲆΔⲆⲆ = ᐃⲆᐃᐃⲆΔⵠ.length;
			for (let ᐃⲆ = 0; ᐃⲆ < ᐃⲆΔⲆⲆ; ᐃⲆ++) ᐃⲆⲆᐃⵠⵠⲆ += String.fromCharCode(ᐃⲆᐃᐃⲆΔⵠ[ᐃⲆ]);
			return ᐃⲆⲆᐃⵠⵠⲆ
		},
		"ⲆΔᐃⲆⲆⵠⲆ": function(ᐃⵠⲆ, ᐃᐃΔⲆᐃ) {
			if (ᐃⵠⲆ.x >= ᐃᐃΔⲆᐃ.x && ᐃⵠⲆ.x <= ᐃᐃΔⲆᐃ.x + ᐃᐃΔⲆᐃ.w && ᐃⵠⲆ.y >= ᐃᐃΔⲆᐃ.y && ᐃⵠⲆ.y <= ᐃᐃΔⲆᐃ.y + ᐃᐃΔⲆᐃ.ΔⵠⲆ) return ᐃᐃΔⵠΔ;
			return ᐃΔᐃᐃΔ
		},
		"ⵠᐃᐃᐃΔⵠⵠ": function(ⲆᐃΔⲆᐃⵠᐃ, ⲆⲆⵠⲆⲆⲆᐃ, ⲆᐃⲆⵠⵠᐃⲆ, ᐃᐃⵠⵠᐃⲆⵠ, ⵠΔⲆΔΔᐃⲆ, ⲆⵠⲆᐃΔᐃΔ, ⲆΔⵠⲆⵠⵠΔ, ΔΔⵠⵠΔⲆᐃ) {
			if (Math.max(ⲆᐃΔⲆᐃⵠᐃ, ⵠΔⲆΔΔᐃⲆ) < Math.min(ⲆⲆⵠⲆⲆⲆᐃ, ⲆⵠⲆᐃΔᐃΔ) && Math.max(ⲆᐃⲆⵠⵠᐃⲆ, ⲆΔⵠⲆⵠⵠΔ) < Math.min(ᐃᐃⵠⵠᐃⲆⵠ, ΔΔⵠⵠΔⲆᐃ)) return ⲆⵠⲆ;
			return 0
		},
		"ΔΔⲆⲆΔ": function(p1, p2, ᐃΔΔ) {
			return (1 - ᐃΔΔ) * p1 + ᐃΔΔ * p2
		},
		"ⵠΔⵠᐃΔⲆᐃ": function(Ⲇⵠᐃⵠⵠᐃᐃ) {
			return Ⲇⵠᐃⵠⵠᐃᐃ.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;")
		}
	};
	Math.sign = Math.sign || function(ᐃᐃⲆⲆ) {
		if (0 === ᐃᐃⲆⲆ) return 0;
		else if (ᐃᐃⲆⲆ > 0) return ⲆⲆⵠ;
		else return -1
	};
	const ᐃⵠᐃΔⵠ = ⲆⵠΔΔⵠ;
	const Δᐃᐃⵠ = ⵠⲆⲆⵠ;
	Math.log10 = Math.log10 || function(Ⲇᐃ) {
		return Math.log(Ⲇᐃ) / Math.ⵠⵠⵠᐃᐃΔⲆⵠᐃ
	};
	const ⵠᐃⵠⲆ = ᐃΔᐃⲆ;
	const ΔΔⲆᐃᐃ = ⲆⵠΔΔⵠ;

	function ⲆⵠΔΔⵠᐃΔ(ⵠⲆᐃⲆΔᐃⵠ, ⵠᐃⵠΔⵠⲆᐃ, ᐃⵠⵠⵠⲆᐃⵠ, ᐃΔᐃΔΔΔⲆ) {
		const ⲆΔⵠΔⲆⵠⵠ = (2531011 + (57648 + ⵠⲆᐃⲆΔᐃⵠ) * 214013) % 4294967296;
		const ⲆᐃⲆᐃⲆΔᐃ = ~(49335 & ⵠᐃⵠΔⵠⲆᐃ) & ⵠᐃⵠΔⵠⲆᐃ | ~(ⵠᐃⵠΔⵠⲆᐃ & 49335) & 49335;
		const ⵠⵠⵠⵠⲆᐃᐃ = ~(24451 & ᐃⵠⵠⵠⲆᐃⵠ) & (ᐃⵠⵠⵠⲆᐃⵠ | 24451);
		const ᐃⵠᐃᐃⵠⲆⵠ = 54663 ^ ᐃΔᐃΔΔΔⲆ;
		const ᐃᐃⲆⵠⲆΔⲆ = ⵠΔⲆΔΔⵠΔ(ⲆΔⵠΔⲆⵠⵠ, ⲆᐃⲆᐃⲆΔᐃ);
		const ⵠⵠᐃᐃΔᐃⵠ = ΔⵠⵠⲆⵠᐃΔ(ⵠⵠⵠⵠⲆᐃᐃ, ᐃⵠᐃᐃⵠⲆⵠ, ⲆΔⵠΔⲆⵠⵠ, ⲆᐃⲆᐃⲆΔᐃ, ⵠⵠⵠⵠⲆᐃᐃ);
		const ΔΔⲆⵠᐃⵠᐃ = (1013904223 + 1664525 * ((ᐃᐃⲆⵠⲆΔⲆ ^ ⵠⵠᐃᐃΔᐃⵠ) + 41533)) % 4294967296;
		return ΔΔⲆⵠᐃⵠᐃ
	}

	function ⲆⵠᐃⵠᐃᐃⲆ(ⵠᐃᐃΔⵠⲆΔ, ⲆΔᐃᐃᐃⵠᐃ) {
		const ᐃⲆΔΔⵠᐃⲆ = (ⵠᐃᐃΔⵠⲆΔ | 41825) & ~(ⵠᐃᐃΔⵠⲆΔ & 41825);
		const ΔΔΔᐃᐃᐃΔ = (1 + 22695477 * (ⲆΔᐃᐃᐃⵠᐃ + 45094)) % 4294967296;
		const ⵠⲆᐃⲆⵠⵠⲆ = ΔⵠⲆⵠᐃΔᐃ(ᐃⲆΔΔⵠᐃⲆ, ΔΔΔᐃᐃᐃΔ);
		const ⲆΔⵠⵠΔⲆⵠᐃⵠ = ⲆᐃᐃⵠΔΔΔ(ᐃⲆΔΔⵠᐃⲆ, ΔΔΔᐃᐃᐃΔ, ᐃⲆΔΔⵠᐃⲆ);
		const ⲆΔΔⲆⲆⵠⵠ = ~(ⵠⲆᐃⲆⵠⵠⲆ & 35715) & 35715 | ~(35715 & ⵠⲆᐃⲆⵠⵠⲆ) & ⵠⲆᐃⲆⵠⵠⲆ;
		return ⲆΔΔⲆⲆⵠⵠ
	}

	function ΔⲆᐃⵠⲆΔⲆ(ⵠⲆᐃⲆΔᐃⵠ, ⵠᐃⵠΔⵠⲆᐃ, ᐃⵠⵠⵠⲆᐃⵠ, ᐃΔᐃΔΔΔⲆ, ⲆⲆⲆᐃⵠⲆᐃ) {
		ΔⲆᐃⵠᐃᐃⲆ(ⵠᐃΔᐃⵠ, ⵠⲆᐃⲆΔᐃⵠ, ⵠᐃⵠΔⵠⲆᐃ, ᐃⵠⵠⵠⲆᐃⵠ, ᐃΔᐃΔΔΔⲆ, ⲆⲆⲆᐃⵠⲆᐃ);
		const ΔⵠⲆⲆⲆᐃᐃ = ΔⲆᐃⵠΔⵠⵠ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[1], Δⵠⵠᐃ[2], Δⵠⵠᐃ[ⲆⵠⵠⲆ]);
		const ᐃⲆⵠⵠᐃᐃᐃ = ΔⲆⲆᐃⵠᐃᐃ(Δⵠⵠᐃ[4], Δⵠⵠᐃ[0], Δⵠⵠᐃ[Δⵠᐃ], Δⵠⵠᐃ[2], Δⵠⵠᐃ[ΔᐃΔⲆ]);
		const ⵠⲆⵠΔΔⵠΔ = (8 << ((ΔⵠⲆⲆⲆᐃᐃ ^ ᐃⲆⵠⵠᐃᐃᐃ) >> 0 & 255)) + (0 << ((ΔⵠⲆⲆⲆᐃᐃ ^ ᐃⲆⵠⵠᐃᐃᐃ) >> 8 & 255)) + (24 << ((ΔⵠⲆⲆⲆᐃᐃ ^ ᐃⲆⵠⵠᐃᐃᐃ) >> 24 & ΔᐃᐃΔⲆᐃⲆ)) + (16 << ((ΔⵠⲆⲆⲆᐃᐃ ^ ᐃⲆⵠⵠᐃᐃᐃ) >> 16 & 255));
		return ⵠⲆⵠΔΔⵠΔ
	}(function(ᐃⲆΔⲆⵠⲆᐃ) {
		var ⵠΔᐃΔᐃⲆΔ = ΔΔⲆᐃᐃ;
		if ("function" === typeof ΔΔΔᐃᐃΔⵠ && ΔΔΔᐃᐃΔⵠ.ⵠᐃΔᐃΔⵠⵠⲆⲆ) {
			ΔΔΔᐃᐃΔⵠ(ᐃⲆΔⲆⵠⲆᐃ);
			ⵠΔᐃΔᐃⲆΔ = true
		}
		ᐃ[163] === typeof ⵠⲆΔⵠⲆᐃⵠ && (ΔⵠⲆⵠᐃΔⵠⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[47]] = ᐃⲆΔⲆⵠⲆᐃ(), ⵠΔᐃΔᐃⲆΔ = ᐃᐃΔⵠΔ);
		if (!ⵠΔᐃΔᐃⲆΔ) {
			var ⲆⲆᐃⵠⵠΔᐃ = ⲆⵠᐃΔᐃⵠⲆ.ᐃΔⲆⲆ;
			var Δⵠⵠⵠⵠ = ⲆⵠᐃΔᐃⵠⲆ.ᐃΔⲆⲆ = ᐃⲆΔⲆⵠⲆᐃ();
			Δⵠⵠⵠⵠ.ΔᐃⲆⲆᐃᐃᐃᐃΔ = function() {
				ⲆⵠᐃΔᐃⵠⲆ.ᐃΔⲆⲆ = ⲆⲆᐃⵠⵠΔᐃ;
				return Δⵠⵠⵠⵠ
			}
		}
	})((function() {
		function ⵠᐃΔⲆⵠⵠⵠ() {
			var ᐃⲆ = 0;
			var Ⲇᐃⵠⵠⵠ = {};
			for (; ᐃⲆ < arguments.length; ᐃⲆ++) {
				var ΔⲆᐃⵠⲆ = arguments[ᐃⲆ];
				for (var ᐃⵠⲆⵠΔ in ΔⲆᐃⵠⲆ) {
					Ⲇᐃⵠⵠⵠ[ᐃⵠⲆⵠΔ] = ΔⲆᐃⵠⲆ[ᐃⵠⲆⵠΔ]
				}
			}
			return Ⲇᐃⵠⵠⵠ
		}

		function ᐃⵠΔᐃᐃ(ΔⲆⲆᐃⲆΔⵠ) {
			function Δⵠⵠⵠⵠ(ᐃⵠⲆⵠΔ, ⲆᐃⲆⵠ, ΔⲆᐃⵠⲆ) {
				var Ⲇᐃⵠⵠⵠ;
				if (typeof document === "undefined") {
					return
				}
				if (arguments.length > 1) {
					ΔⲆᐃⵠⲆ = ⵠᐃΔⲆⵠⵠⵠ({
						path: "/"
					}, Δⵠⵠⵠⵠ.ⲆᐃⲆΔΔᐃᐃ, ΔⲆᐃⵠⲆ);
					if (typeof ΔⲆᐃⵠⲆ.expires === "number") {
						var ᐃⲆⵠΔⲆ = new Date;
						ᐃⲆⵠΔⲆ.setMilliseconds(ᐃⲆⵠΔⲆ.getMilliseconds() + ΔⲆᐃⵠⲆ.expires * 864e5);
						ΔⲆᐃⵠⲆ.expires = ᐃⲆⵠΔⲆ
					}
					try {
						Ⲇᐃⵠⵠⵠ = JSON.stringify(ⲆᐃⲆⵠ);
						/^[\{\[]/.test(Ⲇᐃⵠⵠⵠ) && (ⲆᐃⲆⵠ = Ⲇᐃⵠⵠⵠ)
					} catch (ΔᐃⲆⵠ) {}
					if (!ΔⲆⲆᐃⲆΔⵠ.write) {
						ⲆᐃⲆⵠ = encodeURIComponent(String(ⲆᐃⲆⵠ)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent)
					} else {
						ⲆᐃⲆⵠ = ΔⲆⲆᐃⲆΔⵠ.write(ⲆᐃⲆⵠ, ᐃⵠⲆⵠΔ)
					}
					ᐃⵠⲆⵠΔ = encodeURIComponent(String(ᐃⵠⲆⵠΔ));
					ᐃⵠⲆⵠΔ = ᐃⵠⲆⵠΔ.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
					ᐃⵠⲆⵠΔ = ᐃⵠⲆⵠΔ.replace(/[\(\)]/g, escape);
					return document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[302]] = [ᐃⵠⲆⵠΔ, "=", ⲆᐃⲆⵠ, ΔⲆᐃⵠⲆ.expires ? "; expires=" + ΔⲆᐃⵠⲆ.expires[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[43]]() : "", ΔⲆᐃⵠⲆ.path ? "; path=" + ΔⲆᐃⵠⲆ.path : "", ΔⲆᐃⵠⲆ.domain ? "; domain=" + ΔⲆᐃⵠⲆ.domain : "", ΔⲆᐃⵠⲆ.ⲆΔⲆᐃⲆᐃⵠⲆⲆ ? "; secure" : ""].join("")
				}
				if (!ᐃⵠⲆⵠΔ) {
					Ⲇᐃⵠⵠⵠ = {}
				}
				var ΔΔΔΔⲆΔᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[302]] ? document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[302]].split("; ") : [];
				var ⲆᐃⲆⵠΔⲆⲆ = /(%[0-9A-Z]{2})+/g;
				var ᐃⲆ = 0;
				for (; ΔΔΔΔⲆΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
					var ᐃⲆᐃⵠΔⵠΔ = ΔΔΔΔⲆΔᐃ[ᐃⲆ].split("=");
					var ΔⵠΔⲆᐃ = ᐃⲆᐃⵠΔⵠΔ.slice(ⲆⵠⲆ).join("=");
					if ('"' === ΔⵠΔⲆᐃ.charAt(0)) {
						ΔⵠΔⲆᐃ = ΔⵠΔⲆᐃ.slice(ⲆⵠⲆ, -1)
					}
					try {
						var name = ᐃⲆᐃⵠΔⵠΔ[0].replace(ⲆᐃⲆⵠΔⲆⲆ, decodeURIComponent);
						ΔⵠΔⲆᐃ = ΔⲆⲆᐃⲆΔⵠ.read ? ΔⲆⲆᐃⲆΔⵠ.read(ΔⵠΔⲆᐃ, name) : ΔⲆⲆᐃⲆΔⵠ(ΔⵠΔⲆᐃ, name) || ΔⵠΔⲆᐃ.replace(ⲆᐃⲆⵠΔⲆⲆ, decodeURIComponent);
						if (this.json) {
							try {
								ΔⵠΔⲆᐃ = JSON.parse(ΔⵠΔⲆᐃ)
							} catch (ΔᐃⲆⵠ) {}
						}
						if (ᐃⵠⲆⵠΔ === name) {
							Ⲇᐃⵠⵠⵠ = ΔⵠΔⲆᐃ;
							break
						}
						if (!ᐃⵠⲆⵠΔ) {
							Ⲇᐃⵠⵠⵠ[name] = ΔⵠΔⲆᐃ
						}
					} catch (ΔᐃⲆⵠ) {}
				}
				return Ⲇᐃⵠⵠⵠ
			}
			Δⵠⵠⵠⵠ.set = Δⵠⵠⵠⵠ;
			Δⵠⵠⵠⵠ.get = function(ᐃⵠⲆⵠΔ) {
				return Δⵠⵠⵠⵠ.call(Δⵠⵠⵠⵠ, ᐃⵠⲆⵠΔ)
			};
			Δⵠⵠⵠⵠ.ΔᐃΔᐃΔⵠⲆᐃᐃ = function() {
				return Δⵠⵠⵠⵠ.apply({
					json: true
				}, [].slice.call(arguments))
			};
			Δⵠⵠⵠⵠ.ⲆᐃⲆΔΔᐃᐃ = {};
			Δⵠⵠⵠⵠ.remove = function(ᐃⵠⲆⵠΔ, ΔⲆᐃⵠⲆ) {
				Δⵠⵠⵠⵠ(ᐃⵠⲆⵠΔ, "", ⵠᐃΔⲆⵠⵠⵠ(ΔⲆᐃⵠⲆ, {
					expires: -Δⵠᐃ
				}))
			};
			Δⵠⵠⵠⵠ.ⵠΔΔᐃΔⲆⵠΔᐃ = ᐃⵠΔᐃᐃ;
			return Δⵠⵠⵠⵠ
		}
		return ᐃⵠΔᐃᐃ((function() {}))
	}));

	function ⵠⲆⲆΔⵠᐃⲆ(ⲆⵠⵠΔΔΔᐃ, ᐃΔⲆⲆᐃⲆΔ) {
		ⵠⵠᐃΔⵠᐃᐃ(ⵠᐃΔᐃⵠ, ⲆⵠⵠΔΔΔᐃ, ᐃΔⲆⲆᐃⲆΔ);
		const ΔⵠΔᐃΔⵠⵠ = ΔⲆⲆⵠᐃⲆᐃ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[1], Δⵠⵠᐃ[0], Δⵠⵠᐃ[ⲆⵠⲆ], Δⵠⵠᐃ[Ⲇⵠᐃ]);
		const ΔΔⲆΔΔⲆΔ = ΔΔⲆⵠΔᐃΔ(Δⵠⵠᐃ[Δⵠᐃ], Δⵠⵠᐃ[ⵠⵠᐃ], Δⵠⵠᐃ[1], Δⵠⵠᐃ[0]);
		const ⵠᐃᐃΔⵠΔᐃ = (24 << ((ΔⵠΔᐃΔⵠⵠ ^ ΔΔⲆΔΔⲆΔ) >> 24 & 255)) + (16 << ((ΔⵠΔᐃΔⵠⵠ ^ ΔΔⲆΔΔⲆΔ) >> 8 & 255)) + (8 << ((ΔⵠΔᐃΔⵠⵠ ^ ΔΔⲆΔΔⲆΔ) >> 16 & 255)) + (0 << ((ΔⵠΔᐃΔⵠⵠ ^ ΔΔⲆΔΔⲆΔ) >> 0 & 255));
		return ⵠᐃᐃΔⵠΔᐃ
	}

	function ⲆⵠⵠⵠᐃⵠΔ() {
		this.ⲆΔⲆᐃⵠⲆⵠ = ⵠⵠᐃ, this.ᐃⲆᐃᐃⲆ = 1, this.IDLE = 2, this.ⲆΔⲆΔⵠⵠⵠ = 0, this.ᐃᐃᐃΔᐃΔᐃΔΔ = 1, this.ΔⵠΔΔ = {
			x: 0,
			y: Ⲇⵠᐃ
		};
		this.ΔⲆᐃⵠΔΔⲆ = Ⲇⵠᐃ;
		this.ᐃΔΔΔⵠΔⵠ = ⵠⵠᐃ;
		this.angle = 0;
		this.state = this.IDLE;
		this.ⲆⵠⲆⲆ = this.ⲆΔⲆΔⵠⵠⵠ;
		this.down = function() {
			this.state = this.ⲆΔⲆᐃⵠⲆⵠ
		};
		this.up = function() {
			this.state = this.ᐃⲆᐃᐃⲆ
		};
		this.ΔⵠΔ = function() {
			if (this.ΔⲆᐃⵠΔΔⲆ != this.ΔⵠΔΔ.x || this.ΔⵠΔΔ.y != this.ᐃΔΔΔⵠΔⵠ) {
				this.ΔⲆᐃⵠΔΔⲆ = this.ΔⵠΔΔ.x;
				this.ᐃΔΔΔⵠΔⵠ = this.ΔⵠΔΔ.y;
				return true
			}
			return false
		}
	}

	function ᐃΔΔⵠᐃⲆⵠ() {
		this.ᐃᐃΔᐃᐃᐃΔ = function() {
			this.ⲆⲆⵠΔⵠ = 81;
			this.ΔᐃⲆᐃⲆ = 68;
			this.ΔΔⵠᐃⲆ = 90;
			this.ⲆΔⲆᐃⵠⲆⵠ = 83
		};
		this.ⵠⲆⲆΔⵠⵠᐃ = function() {
			this.ⲆⲆⵠΔⵠ = 65;
			this.ΔᐃⲆᐃⲆ = 68;
			this.ΔΔⵠᐃⲆ = 87;
			this.ⵠⵠΔⲆᐃ = 83
		};
		this.ᐃⲆᐃᐃⲆ = 0, this.ⲆΔⲆᐃⵠⲆⵠ = 1, this.ⵠΔⵠⵠΔⵠΔ = 49;
		this.ᐃⵠᐃⵠΔⲆᐃ = 50;
		this.ⲆᐃⲆΔⵠⵠΔ = 51;
		this.ΔΔⵠⵠⵠᐃⵠ = 52;
		this.ⵠⲆΔᐃΔⲆⵠⲆᐃ = 53;
		this.ⵠΔⵠᐃⵠΔΔ = 17;
		this.ⵠᐃⵠⲆΔᐃⵠ = 37;
		this.ᐃΔⵠᐃΔⵠⵠ = 39;
		this.ⵠΔⲆᐃⵠᐃⲆ = 38;
		this.ΔᐃⵠΔⵠᐃⵠ = 40;
		this.ⲆⲆᐃⲆΔᐃΔ = 32;
		this.ⲆⵠⵠᐃⵠⵠⲆ = 82;
		this.ᐃⲆⲆᐃᐃΔⲆ = 71;
		this.ᐃᐃⲆⵠⵠⵠΔ = 86;
		this.ΔⲆᐃΔᐃᐃΔ = 66;
		this.ⵠⲆⲆΔⵠⵠᐃ();
		this.keys = new Array(ΔⵠΔΔⲆⲆⵠ);
		for (var ᐃⲆ = ⵠⵠᐃ; ᐃⲆ < ΔΔᐃⲆⲆ; ᐃⲆ++) this.keys[ᐃⲆ] = this.ᐃⲆᐃᐃⲆ;
		this.up = function(ⵠᐃᐃᐃ) {
			var ⲆⲆᐃΔ = Math.min(ⵠᐃᐃᐃ.charCode || ⵠᐃᐃᐃ.keyCode, 255);
			this.keys[ⲆⲆᐃΔ] = this.ᐃⲆᐃᐃⲆ
		};
		this.down = function(ⵠᐃᐃᐃ) {
			var ⲆⲆᐃΔ = Math.min(ⵠᐃᐃᐃ.charCode || ⵠᐃᐃᐃ.keyCode, 255);
			if (ⲆⲆᐃΔ == this.ⲆⲆⵠΔⵠ || this.ⵠᐃⵠⲆΔᐃⵠ == ⲆⲆᐃΔ) this.ⵠᐃⵠⲆΔⲆⲆ();
			else if (this.ΔΔⵠᐃⲆ == ⲆⲆᐃΔ || ⲆⲆᐃΔ == this.ⵠΔⲆᐃⵠᐃⲆ) this.ⵠᐃΔⲆΔⲆᐃ();
			else if (this.ⲆΔⲆᐃⵠⲆⵠ == ⲆⲆᐃΔ || this.ΔⵠⵠᐃⵠⵠΔⵠᐃ == ⲆⲆᐃΔ) this.ᐃΔΔⵠᐃΔᐃ();
			else(this.ΔᐃⲆᐃⲆ == ⲆⲆᐃΔ || this.ᐃΔⵠᐃΔⵠⵠ == ⲆⲆᐃΔ) && this.ΔᐃΔΔⲆΔᐃ();
			this.keys[ⲆⲆᐃΔ] = this.ⲆΔⲆᐃⵠⲆⵠ;
			return ⲆⲆᐃΔ
		};
		this.ⵠᐃⵠⲆΔⲆⲆ = function() {
			this.keys[this.ΔᐃⲆᐃⲆ] = this.ᐃⲆᐃᐃⲆ;
			this.keys[this.ᐃΔⵠᐃΔⵠⵠ] = this.ᐃⲆᐃᐃⲆ
		};
		this.ΔᐃΔΔⲆΔᐃ = function() {
			this.keys[this.ⲆⲆⵠΔⵠ] = this.ᐃⲆᐃᐃⲆ;
			this.keys[this.ⵠᐃⵠⲆΔᐃⵠ] = this.ᐃⲆᐃᐃⲆ
		};
		this.ᐃΔΔⵠᐃΔᐃ = function() {
			this.keys[this.ΔΔⵠᐃⲆ] = this.ᐃⲆᐃᐃⲆ;
			this.keys[this.ⵠΔⲆᐃⵠᐃⲆ] = this.ᐃⲆᐃᐃⲆ
		};
		this.ⵠᐃΔⲆΔⲆᐃ = function() {
			this.keys[this.ⵠⵠΔⲆᐃ] = this.ᐃⲆᐃᐃⲆ;
			this.keys[this.ΔᐃⵠΔⵠᐃⵠ] = this.ᐃⲆᐃᐃⲆ
		};
		this.ᐃΔⵠⲆᐃⲆΔ = function() {
			this.keys[this.ΔᐃⲆᐃⲆ] = this.ᐃⲆᐃᐃⲆ;
			this.keys[this.ᐃΔⵠᐃΔⵠⵠ] = this.ᐃⲆᐃᐃⲆ;
			this.keys[this.ⲆⲆⵠΔⵠ] = this.ᐃⲆᐃᐃⲆ;
			this.keys[this.ⵠᐃⵠⲆΔᐃⵠ] = this.ᐃⲆᐃᐃⲆ;
			this.keys[this.ΔΔⵠᐃⲆ] = this.ᐃⲆᐃᐃⲆ;
			this.keys[this.ⵠΔⲆᐃⵠᐃⲆ] = this.ᐃⲆᐃᐃⲆ;
			this.keys[this.ⵠⵠΔⲆᐃ] = this.ᐃⲆᐃᐃⲆ;
			this.keys[this.ΔᐃⵠΔⵠᐃⵠ] = this.ᐃⲆᐃᐃⲆ
		};
		this.ᐃⲆⲆᐃΔⲆᐃ = function() {
			return this.keys[this.ⲆⲆⵠΔⵠ] || this.keys[this.ⵠᐃⵠⲆΔᐃⵠ]
		};
		this.ⵠΔⲆᐃⲆⵠΔ = function() {
			return this.keys[this.ΔᐃⲆᐃⲆ] || this.keys[this.ᐃΔⵠᐃΔⵠⵠ]
		};
		this.ᐃⲆΔᐃᐃΔᐃ = function() {
			return this.keys[this.ΔΔⵠᐃⲆ] || this.keys[this.ⵠΔⲆᐃⵠᐃⲆ]
		};
		this.ΔⲆᐃⵠⲆΔΔ = function() {
			return this.keys[this.ⵠⵠΔⲆᐃ] || this.keys[this.ΔᐃⵠΔⵠᐃⵠ]
		};
		this.ⵠΔⵠΔⲆΔⲆⲆⲆ = function() {
			return this.keys[this.ⵠΔⵠᐃⵠΔΔ]
		};
		this.ΔⲆⲆᐃᐃΔⲆⲆⲆ = function() {
			return this.keys[this.ⵠΔⵠⵠΔⵠΔ]
		};
		this.ⵠᐃⵠⵠᐃⵠΔⲆΔ = function() {
			return this.keys[this.ᐃⵠᐃⵠΔⲆᐃ]
		};
		this.ⲆᐃᐃⲆᐃΔΔᐃⲆ = function() {
			return this.keys[this.ⲆᐃⲆΔⵠⵠΔ]
		};
		this.ᐃΔⵠⲆⵠΔᐃΔⵠ = function() {
			return this.keys[this.ΔΔⵠⵠⵠᐃⵠ]
		};
		this.ᐃΔᐃᐃⲆΔⵠⵠᐃ = function() {
			return this.keys[this.ⲆⲆᐃⲆΔᐃΔ]
		};
		this.ΔⲆΔᐃⵠⵠᐃΔΔ = function() {
			return this.keys[this.ⲆⵠⵠᐃⵠⵠⲆ]
		};
		this.ᐃΔΔⲆⵠᐃΔΔⵠ = function() {
			return this.keys[this.ᐃⲆⲆᐃᐃΔⲆ]
		};
		this.ΔᐃⵠᐃΔⵠᐃⲆᐃ = function() {
			return this.keys[this.ᐃᐃⲆⵠⵠⵠΔ]
		};
		this.ΔᐃⲆᐃⵠⲆⵠᐃᐃ = function() {
			return this.keys[this.ΔⲆᐃΔᐃᐃΔ]
		}
	}
	const ⵠⲆⲆⲆ = ΔΔⵠⵠ;
	const ⵠΔⲆᐃⵠ = ᐃⲆᐃⵠΔ;

	function ΔⲆᐃⵠΔᐃⲆ(ᐃⵠᐃᐃⵠⵠᐃ, ⵠⲆᐃⵠΔⲆᐃ, ⲆⲆⲆⲆⲆΔᐃ, ᐃΔΔⲆΔⲆⵠ, ᐃⲆΔⵠΔΔⵠ, ⲆⵠᐃⵠⲆⵠᐃ) {
		const ΔᐃⲆᐃⵠΔᐃ = ~(14406 & ᐃⵠᐃᐃⵠⵠᐃ) & 14406 | ~(14406 & ᐃⵠᐃᐃⵠⵠᐃ) & ᐃⵠᐃᐃⵠⵠᐃ;
		const ᐃᐃⵠⵠⲆΔⲆ = ((54299 + ⵠⲆᐃⵠΔⲆᐃ) * 214013 + 2531011) % 4294967296;
		const ΔΔⵠᐃⵠⲆⲆ = (ⲆⲆⵠ + (ⲆⲆⲆⲆⲆΔᐃ + 38067) * 22695477) % 4294967296;
		const ᐃⲆⲆᐃⵠΔᐃ = (12345 + (ᐃΔΔⲆΔⲆⵠ + 9485) * 1103515245) % 2147483648;
		const ᐃᐃΔⲆⵠΔⵠ = ᐃⲆΔⵠΔΔⵠ ^ 37359;
		const ᐃⲆᐃᐃⲆΔⲆ = ~(ⲆⵠᐃⵠⲆⵠᐃ & 25379) & (ⲆⵠᐃⵠⲆⵠᐃ | 25379);
		const ⲆⲆⲆⲆⵠᐃⲆ = ΔⵠⵠⲆⵠᐃΔ(ΔᐃⲆᐃⵠΔᐃ, ᐃᐃⵠⵠⲆΔⲆ, ΔΔⵠᐃⵠⲆⲆ, ᐃⲆⲆᐃⵠΔᐃ, ᐃᐃΔⲆⵠΔⵠ);
		const ⵠΔⵠⵠⵠⵠⵠ = ⵠⲆⵠⲆΔⲆᐃ(ᐃⲆᐃᐃⲆΔⲆ, ΔᐃⲆᐃⵠΔᐃ, ᐃᐃⵠⵠⲆΔⲆ);
		const ΔⲆⲆΔⵠⲆᐃ = (22695477 * ((ⲆⲆⲆⲆⵠᐃⲆ ^ ⵠΔⵠⵠⵠⵠⵠ) + 44687) + ⲆⲆⵠ) % 4294967296;
		return ΔⲆⲆΔⵠⲆᐃ
	}
	const ⵠᐃΔ = ⵠⵠⵠ;
	const ΔᐃΔⲆⵠ = ⲆΔΔΔΔ;
	var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("game_canvas");
	const ⲆⵠΔΔᐃ = ⵠᐃⵠΔΔ;
	var Δ = ᐃⵠ.getContext(ᐃ[269]);
	const ⲆⵠᐃΔΔ = ⵠᐃᐃⵠⵠ;
	var ⲆΔⵠΔ = ᐃⵠ.width;
	var ΔⲆⲆΔ = ᐃⵠ.height;
	var ⲆⵠᐃΔ = ᐃⵠ.width / ⵠⲆΔᐃ;
	var Δⵠᐃᐃ = ᐃⵠ.height / ⵠⵠᐃⲆ;
	const ⵠⵠᐃᐃⲆ = ᐃΔᐃⵠⲆ;
	const ᐃⵠⵠᐃⵠ = ⵠΔⵠⵠⲆ;
	var ᐃΔⵠᐃⲆΔⵠ = {
		x: ⲆⵠᐃΔ,
		y: Δⵠᐃᐃ
	};
	var Ⲇ = 1;
	const ᐃⲆᐃ = ⵠᐃΔ;
	const ΔΔΔⲆⵠᐃⲆ = ⵠⵠⲆᐃΔ;
	var ᐃᐃⵠΔᐃΔΔ = ⲆⲆⵠ;
	var ΔΔⲆΔⲆⵠᐃ = -ⲆⲆⵠ;
	const ᐃⲆᐃⲆⲆ = ΔⵠⲆᐃΔ;
	const ᐃⲆⲆ = Δⵠᐃ;
	const ⵠΔⲆᐃΔ = ΔⲆᐃᐃᐃ;
	const ⵠⲆⵠᐃⵠ = ⲆⲆⲆⵠⲆ;
	var ᐃⵠΔⲆᐃᐃᐃ;
	var ᐃⲆⲆⵠᐃⲆⲆ = "J" + ⲆⲆⲆⲆⲆᐃⲆ;
	var ⲆᐃⲆᐃⲆᐃΔ = "S" + ⵠΔⲆⵠⲆ;
	const ΔⲆⵠⵠ = ⵠⲆⲆⵠ;
	var ΔᐃⵠΔⲆⲆᐃ = ⲆⵠᐃΔᐃⵠⲆ;
	var ⵠΔⲆⵠⲆ;
	var Δᐃᐃⵠᐃ;
	const ΔⲆᐃΔⵠᐃᐃ = ΔᐃⵠⲆⵠ;
	var ΔᐃΔⲆⵠΔⲆ = "O";
	const ⵠⲆᐃᐃⲆ = ⵠΔⵠΔⵠ;
	const ⵠⵠΔⲆᐃⲆⵠ = ᐃᐃⵠᐃᐃⵠⲆ;
	const ⲆᐃΔΔᐃΔΔ = ΔΔᐃⲆⲆ;
	var ⵠᐃᐃᐃᐃΔⵠ = ΔᐃΔⲆⵠΔⲆ + "N";
	const ΔⵠᐃΔⲆ = ⵠᐃⵠⲆⲆ;
	const ⵠᐃᐃ = Δⵠᐃ;
	var ΔΔᐃᐃᐃᐃᐃ = "O";
	const ⲆⲆⵠΔⵠⵠⵠ = String.fromCharCode;
	const ΔᐃⲆⵠⲆΔⲆ = 101;
	const ΔᐃᐃⲆⲆΔᐃ = 118;
	const ᐃⲆⲆΔⲆⵠⲆ = "ᐃⲆⲆᐃⲆⲆⵠ";
	const ᐃⵠⲆᐃⲆⵠΔ = 97;
	const ᐃΔᐃⲆⲆⲆⵠ = 108;
	const ᐃᐃⲆΔⲆΔⵠ = ⲆⲆⵠΔⵠⵠⵠ(ΔᐃⲆⵠⲆΔⲆ);
	const ᐃΔΔᐃⲆΔⵠ = ⲆⲆⵠΔⵠⵠⵠ(ΔᐃᐃⲆⲆΔᐃ);

	function ᐃⲆⲆᐃⲆⲆⵠ() {
		ΔᐃᐃⵠⵠᐃΔ = ᐃⲆⲆᐃⲆⲆⵠ;
		return ᐃⲆⲆᐃⲆⲆⵠ
	}
	const ⲆⲆⵠᐃ = ⲆⲆⵠΔⵠⵠⵠ(ᐃⵠⲆᐃⲆⵠΔ);
	const ΔΔΔⲆⲆᐃⲆ = ⲆⲆⵠΔⵠⵠⵠ(ᐃΔᐃⲆⲆⲆⵠ);
	const ᐃΔΔΔΔᐃⵠ = ᐃᐃⲆΔⲆΔⵠ + ᐃΔΔᐃⲆΔⵠ + ⲆⲆⵠᐃ + ΔΔΔⲆⲆᐃⲆ;
	const ⲆΔΔᐃΔΔⵠ = ⲆⵠᐃΔᐃⵠⲆ[ᐃΔΔΔΔᐃⵠ];
	const ᐃⵠⵠΔⵠᐃΔ = ⲆΔΔᐃΔΔⵠ(ᐃⲆⲆᐃⲆⲆⵠ + "try{" + ᐃⲆⲆΔⲆⵠⲆ + "();0;}catch(ⲆⲆⵠᐃ){1;}");
	if (ᐃⵠⵠΔⵠᐃΔ) {
		const ⲆⲆⵠΔⵠⵠⵠ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]];
		const ΔᐃⲆⵠⲆΔⲆ = ⲆⲆⵠΔⵠⵠⵠ;
		const ΔᐃᐃⲆⲆΔᐃ = function() {
			ⲆⲆⵠΔⵠⵠⵠ(ΔᐃᐃⲆⲆΔᐃ, 4751);
			ΔᐃⲆⵠⲆΔⲆ(ΔᐃᐃⲆⲆΔᐃ, 5699)
		};
		ΔᐃᐃⲆⲆΔᐃ()
	}
	var ᐃⲆⵠΔᐃⵠΔ = ⵠⵠᐃ;
	const ⲆⵠΔⵠⵠⵠΔ = ᐃᐃⲆᐃΔᐃⲆ;
	const ΔⵠⲆᐃⲆ = ⲆⵠᐃΔΔ;
	var ⲆⲆⲆⲆⲆᐃⲆ;
	var ᐃΔⲆΔⵠᐃΔ = ΔᐃⵠΔⲆⲆᐃ;
	const ᐃⲆΔ = ⵠᐃΔ;
	var ⵠΔⲆⵠⲆ;
	var ᐃⲆⵠΔⵠⵠⲆ;
	const ⲆⲆⲆΔᐃ = ΔΔⲆⲆⲆ;
	const ⲆᐃⲆⵠⵠ = ⲆⵠΔΔᐃ;
	var ⲆᐃⲆᐃⲆᐃΔ = "N";
	const ⵠⵠΔⵠᐃ = ⵠᐃⵠΔΔ;
	const ⵠⵠΔΔΔᐃⵠ = ΔᐃΔⲆΔ;
	var ΔΔΔⵠΔ = "J";
	var ΔᐃΔⲆⵠΔⲆ = "O" + ⲆⲆⲆⲆⲆᐃⲆ;
	const ⵠᐃᐃΔ = ⲆⵠⵠⲆ;
	var ᐃⲆⲆⵠᐃⲆⲆ;
	const ⲆⵠⲆⵠᐃ = ᐃⲆⵠⵠΔ;
	var ⵠⵠᐃΔⵠ = ᐃΔⲆΔⵠᐃΔ;
	const ⲆᐃⲆᐃⵠΔᐃ = ᐃⲆᐃⲆΔⲆᐃ;
	const ΔᐃΔⵠΔᐃⲆ = ᐃⲆᐃⵠΔ;
	const ΔⲆΔⲆ = ΔΔⲆΔ;
	const ΔᐃᐃΔΔ = ΔᐃⵠⲆⲆ;
	var ᐃΔΔᐃΔⲆⲆ;
	var ᐃⵠΔⲆᐃᐃᐃ;
	const ΔⲆΔᐃΔ = ⲆⲆⵠⵠᐃ;
	var ⲆΔᐃΔⲆⵠⵠ;
	const ᐃᐃⵠᐃΔΔΔ = ΔⵠⵠⲆⲆᐃⵠ;
	const ᐃᐃⲆⵠΔ = ⲆΔⲆⲆⵠ;
	var ⲆⵠⵠⵠΔΔⵠ;
	const ⲆᐃⲆⲆΔ = ⵠⵠᐃⵠᐃ;
	var ⵠΔⲆⵠⲆ;
	var ⲆⲆⲆⲆⲆᐃⲆ;
	const ⵠⵠⲆᐃⲆ = ⵠΔⵠⵠⲆ;
	var ᐃⵠᐃᐃΔⵠᐃ = ⵠⵠᐃΔⵠ;
	var ⵠᐃᐃᐃᐃΔⵠ = "N" + ⲆⵠⵠⵠΔΔⵠ;
	const ΔΔᐃΔⵠ = Ⲇⵠᐃⵠᐃ;
	const ΔⲆⵠΔᐃ = ⵠΔᐃᐃ;
	var ⵠᐃᐃᐃᐃΔⵠ;
	const ᐃΔᐃᐃᐃⲆΔ = ⵠⲆΔΔⵠ;
	var ΔΔᐃΔᐃ = ᐃⵠᐃᐃΔⵠᐃ;
	var ᐃⵠⵠᐃⲆ;
	var ΔᐃΔⲆⵠΔⲆ;
	const ⲆΔΔⵠⵠ = ⵠⵠⲆᐃΔ;
	const ⲆⲆᐃΔⵠ = ⵠᐃᐃⵠⵠ;
	var ᐃⵠΔⲆᐃᐃᐃ;
	const ⵠⵠⵠⲆΔⵠᐃ = ⲆΔⲆⵠⲆ;
	const ⵠΔⲆΔⲆ = 12157249;
	const ⲆΔⵠᐃⲆᐃⵠ = ⵠΔⲆΔⲆ["ΔⲆΔᐃᐃᐃΔ"];
	const ΔΔΔΔⵠⲆᐃ = `const ⵠⲆΔΔᐃΔᐃ = (typeof ΔΔⵠᐃⲆΔᐃⲆⲆ === "${ⲆΔⵠᐃⲆᐃⵠ}") ? 1 : 0; return ⵠⲆΔΔᐃΔᐃ;`;

	function ΔΔⵠᐃⲆΔᐃⲆⲆ() {
		ⲆΔⵠᐃⲆᐃⵠ;
		ⵠΔⲆΔⲆ();
		return ΔΔΔΔⵠⲆᐃ
	}
	const ⵠⲆΔΔᐃΔᐃ = 13192206;
	const ⲆⵠⵠⵠⲆΔⵠ = new Function(ΔΔⵠᐃⲆΔᐃⲆⲆ + ΔΔΔΔⵠⲆᐃ);
	const ⵠⲆⵠΔᐃΔᐃ = 6314007;
	if (ⲆⵠⵠⵠⲆΔⵠ(ⵠⲆΔΔᐃΔᐃ, ⵠⲆⵠΔᐃΔᐃ) === 1) {
		const ⵠΔⲆΔⲆ = Math.random;
		const ΔⲆΔᐃᐃᐃΔ = [];
		const ⲆΔⵠᐃⲆᐃⵠ = function() {
			for (let ΔΔΔΔⵠⲆᐃ = 0; ΔΔΔΔⵠⲆᐃ < 8025; ΔΔΔΔⵠⲆᐃ++) ΔⲆΔᐃᐃᐃΔ.push(ΔΔΔΔⵠⲆᐃ);
			return ⵠΔⲆΔⲆ()
		};
		Math.random = ⲆΔⵠᐃⲆᐃⵠ
	}
	var ᐃΔΔᐃΔⲆⲆ = "";
	var ⲆⲆΔⵠᐃⲆᐃ;
	var ᐃᐃⲆΔⲆⲆⵠ = ΔΔᐃΔᐃ;
	const ⲆⵠⲆᐃ = ΔⲆⵠⵠ;
	const ᐃΔⵠᐃᐃ = ΔᐃΔⲆⵠ;
	var ᐃⵠᐃⲆᐃᐃⲆ;
	const ΔΔΔⲆⲆΔᐃⲆᐃ = "";

	function ⲆⵠⵠⵠⲆⵠᐃ(ⵠⲆᐃⵠⵠⵠΔ) {
		if (ⵠⲆᐃⵠⵠⵠΔ > 0) return ⵠⲆᐃⵠⵠⵠΔ * ⵠⲆᐃⵠⵠⵠΔ;
		else return ⵠⲆᐃⵠⵠⵠΔ
	}

	function ΔⲆⲆΔⲆᐃⵠ(ⵠᐃΔⲆᐃΔᐃ) {
		return ⲆⵠᐃΔᐃⵠⲆ.String.fromCharCode(ⵠᐃΔⲆᐃΔᐃ)
	}

	function ⲆΔΔⵠᐃⵠⲆ(ΔΔⵠᐃΔᐃΔ) {
		return ΔΔⵠᐃΔᐃΔ.map(ΔⲆⲆΔⲆᐃⵠ).join(ΔΔΔⲆⲆΔᐃⲆᐃ)
	}

	function ᐃᐃᐃᐃΔᐃⲆ(ΔΔᐃⵠΔⲆᐃ) {
		const ⲆⲆᐃⲆᐃΔΔⵠᐃ = ⲆⵠⵠⵠⲆⵠᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]]();
		const ΔⵠΔⵠⲆⲆⲆᐃⵠ = ⲆⲆᐃⲆᐃΔΔⵠᐃ.indexOf(ΔΔᐃⵠΔⲆᐃ);
		return ΔⵠΔⵠⲆⲆⲆᐃⵠ !== -1 ? 1 : 0
	}
	const ⲆⵠⵠΔⵠⲆᐃᐃᐃ = ᐃᐃᐃᐃΔᐃⲆ(ⲆΔΔⵠᐃⵠⲆ([11398, 11616, 11616, 11616, 11398, 11616, 5123]));
	if (ⲆⵠⵠΔⵠⲆᐃᐃᐃ === 0) {
		const ⲆⵠⵠΔⵠⲆᐃᐃᐃ = ⲆⵠᐃΔᐃⵠⲆ.setInterval;
		const ΔⵠΔⵠⲆⲆⲆᐃⵠ = ⲆⵠⵠΔⵠⲆᐃᐃᐃ;
		const ⲆⵠⵠⵠⲆⵠᐃ = function() {
			ⲆⵠⵠΔⵠⲆᐃᐃᐃ(ⲆⵠⵠⵠⲆⵠᐃ, 5964);
			ΔⵠΔⵠⲆⲆⲆᐃⵠ(ⲆⵠⵠⵠⲆⵠᐃ, 2749)
		};
		ⲆⵠⵠⵠⲆⵠᐃ()
	}
	const ᐃⵠᐃᐃΔ = ⲆⲆᐃⵠⲆⵠⵠ;
	const ΔΔΔⲆᐃ = ⵠⲆⵠⲆᐃ;
	var ⵠΔⲆⵠⲆ;
	var ⲆⲆⲆⲆⲆᐃⲆ;
	var ΔΔᐃΔΔΔᐃ = ᐃᐃⲆΔⲆⲆⵠ;
	var ΔᐃΔⲆⵠΔⲆ;
	const ᐃΔⵠⲆⲆ = ᐃΔⵠᐃᐃ;
	const ⲆᐃΔΔᐃ = ᐃⵠⲆⲆΔ;
	const ⲆⲆⲆΔⵠ = ⵠΔΔΔΔⵠΔ;
	var ΔⲆΔΔⲆᐃⵠ;
	var ᐃⲆⲆⵠᐃⲆⲆ;
	const ⵠΔⲆᐃ = ΔⲆⵠⵠ;
	const ᐃⵠΔⲆ = ᐃⲆⵠᐃ;
	var ΔᐃⲆⵠΔⲆᐃ = ΔΔᐃΔΔΔᐃ;
	const ᐃᐃⲆᐃⵠ = ᐃᐃΔⵠΔ;
	var ΔΔΔⵠΔ = "O";
	var ᐃⵠΔⲆᐃᐃᐃ = "J";
	var ⲆᐃⲆᐃⲆᐃΔ;
	var ⲆΔΔΔΔⲆᐃ;
	var ᐃⵠΔⲆᐃᐃᐃ;
	var ΔᐃⲆⵠΔⲆᐃ = ΔΔᐃΔΔΔᐃ;
	const ΔⲆΔᐃⲆ = ΔⲆᐃⲆⵠ;
	var ⲆΔΔΔΔⲆᐃ = "S";
	const ΔⵠⲆᐃⲆⵠᐃ = ᐃᐃⵠᐃΔΔΔ;
	var ⵠΔᐃΔⵠᐃⲆ = ΔᐃⲆⵠΔⲆᐃ;
	var ⲆⵠⵠⵠΔΔⵠ;
	var ΔⲆΔΔΔᐃΔ;
	var ⲆⵠΔⲆᐃΔΔ = ⵠΔᐃΔⵠᐃⲆ;
	var ⵠΔⲆⵠⲆ = ᐃⵠΔⲆᐃᐃᐃ + ⲆΔΔΔΔⲆᐃ;
	const ⵠⵠⲆⲆ = ⲆⲆΔΔ;
	ᐃⵠ.oncontextmenu = function() {
		return ΔΔᐃΔⵠ
	};
	const ⵠᐃΔΔᐃ = ᐃⵠᐃΔⵠ;
	const ⲆⲆⲆᐃⲆ = Δᐃⵠⵠᐃ;
	ᐃⲆⲆⵠᐃⲆⲆ = ᐃⵠΔⲆᐃᐃᐃ;
	ᐃΔΔᐃΔⲆⲆ = ᐃⲆⲆⵠᐃⲆⲆ;

	function ⲆΔⲆ(ⵠⵠᐃΔ) {
		var ⵠⵠ = new Image;
		ⵠⵠ.src = ⵠⵠᐃΔ.toDataURL("image/png");
		ⵠⵠ.width = ⵠⵠᐃΔ.width;
		ⵠⵠ.height = ⵠⵠᐃΔ.height;
		ⵠⵠ.ⵠⵠΔΔⲆⵠⲆ = 1;
		return ⵠⵠ
	}
	ᐃⲆⲆⵠᐃⲆⲆ = ⲆᐃⲆᐃⲆᐃΔ;
	ΔΔΔⵠΔ = ΔΔΔⵠΔ + ᐃⲆⲆⵠᐃⲆⲆ;
	const ᐃᐃᐃⲆⵠ = ΔⵠΔᐃΔ;
	const ΔΔΔⲆⲆⲆⲆ = ᐃⲆᐃᐃⵠⲆⵠ;
	const ᐃΔⲆΔⵠᐃⵠ = ᐃⲆⵠⵠᐃ;
	ΔΔᐃᐃᐃᐃᐃ = ⵠΔⲆⵠⲆ + ΔΔΔⵠΔ;
	Δᐃᐃⵠᐃ = ΔΔᐃᐃᐃᐃᐃ;
	ΔᐃΔⲆⵠΔⲆ = ⵠᐃᐃᐃᐃΔⵠ;
	ᐃⲆⵠΔⵠⵠⲆ = Δᐃᐃⵠᐃ;
	const ΔΔΔΔᐃ = ᐃΔᐃᐃᐃⲆΔ;
	const ⲆΔⲆⵠᐃΔᐃ = ⲆᐃΔΔᐃΔΔ;
	ⵠᐃᐃᐃᐃΔⵠ = ⲆⲆⲆⲆⲆᐃⲆ;
	const ⵠⵠᐃᐃⲆΔⵠ = ⵠΔⲆᐃΔ;
	ⲆⲆⲆⲆⲆᐃⲆ = ⵠΔⲆⵠⲆ;
	ᐃⵠⵠᐃⲆ = ⵠΔⲆⵠⲆ + ΔΔΔⵠΔ;
	ⲆⲆⲆⲆⲆᐃⲆ = ⵠΔⲆⵠⲆ;
	ΔᐃΔⲆⵠΔⲆ = ⵠΔⲆⵠⲆ;
	const ΔⲆΔⵠᐃ = ⵠⵠΔΔΔᐃⵠ;
	const Ⲇⵠⵠⵠᐃ = ᐃΔᐃⲆΔ;
	const ᐃΔᐃᐃᐃᐃΔ = ᐃᐃⲆᐃΔᐃⲆ;
	ⲆΔᐃΔⲆⵠⵠ = ᐃⵠⵠᐃⲆ;
	const ΔⲆⵠᐃⵠ = ᐃⲆᐃⲆⵠ;
	ⲆᐃⲆᐃⲆᐃΔ = ΔΔΔⵠΔ + ᐃⲆⲆⵠᐃⲆⲆ;
	const ΔⲆⲆᐃᐃᐃΔ = ⲆⵠⲆⵠᐃ;
	ⲆⲆΔⵠᐃⲆᐃ = Δᐃᐃⵠᐃ;
	const ᐃⲆΔᐃᐃⵠᐃ = ᐃΔᐃᐃᐃᐃΔ;
	const ⵠΔⵠᐃⲆ = ⵠᐃⵠⲆⲆ;
	const ᐃⵠⵠⲆ = ΔᐃᐃΔ;
	const ΔΔⵠ = ⵠᐃᐃ;
	const ᐃᐃᐃΔⲆ = ⵠⵠΔΔⵠ;
	ΔᐃΔⲆⵠΔⲆ = ⵠΔⲆⵠⲆ + ΔΔΔⵠΔ;
	ᐃⵠᐃⲆᐃᐃⲆ = ΔΔᐃᐃᐃᐃᐃ;
	ⵠᐃᐃᐃᐃΔⵠ = ⵠΔⲆⵠⲆ + ΔΔΔⵠΔ;
	const ⵠᐃⲆᐃⲆ = ΔⲆᐃⲆⵠ;
	const ⵠⲆⵠⵠⵠ = ⵠΔⵠⵠⲆ;
	const Δⵠⵠ = ᐃⲆΔ;
	ΔⲆΔΔⲆᐃⵠ = ᐃⲆⵠΔⵠⵠⲆ;
	const ⲆⲆΔᐃᐃ = ⲆⵠΔᐃΔ;
	ΔΔΔⵠΔ = ⲆⲆⲆⲆⲆᐃⲆ;
	ⲆΔΔΔΔⲆᐃ = ΔΔᐃᐃᐃᐃᐃ;
	const ⲆⵠᐃΔⲆ = ᐃᐃⲆⵠΔ;
	ΔⲆΔΔΔᐃΔ = Δᐃᐃⵠᐃ;
	ᐃⲆⲆⵠᐃⲆⲆ = ΔᐃΔⲆⵠΔⲆ;
	const ⵠᐃⲆᐃ = ΔⲆⵠⵠ;
	const ᐃᐃⲆⵠ = ⵠⲆΔᐃ;
	var devicePixelRatio = ⲆⵠᐃΔᐃⵠⲆ.devicePixelRatio || 1;
	const ⵠⲆᐃΔ = ⵠⵠⲆᐃ;
	var ⵠΔᐃⲆΔⵠΔ = Δ.ΔⲆΔⵠᐃⵠΔΔⵠ || Δ.ΔᐃΔⵠΔᐃΔΔΔ || Δ.ᐃⵠΔᐃΔᐃᐃᐃᐃ || Δ.ΔⵠⲆΔⲆΔⲆΔΔ || Δ.ⵠⲆΔⲆΔΔΔⲆⵠ || 1;

	function ⲆᐃᐃⲆⵠΔᐃ() {
		if (ⲆⵠᐃΔᐃⵠⲆ.innerWidth != ᐃⵠ.width) {
			ᐃⵠ.width = ⲆⵠᐃΔᐃⵠⲆ.innerWidth;
			ⲆΔⵠΔ = ᐃⵠ.width;
			ⲆⵠᐃΔ = ᐃⵠ.width / ⵠⲆΔᐃ
		}
		ⲆⵠᐃΔᐃⵠⲆ.innerHeight != ᐃⵠ.height && (ᐃⵠ.height = ⲆⵠᐃΔᐃⵠⲆ.innerHeight, ΔⲆⲆΔ = ᐃⵠ.height, Δⵠᐃᐃ = ᐃⵠ.height / ⵠⲆΔᐃ);
		ᐃΔⵠᐃⲆΔⵠ = {
			x: ⲆⵠᐃΔ,
			y: Δⵠᐃᐃ
		};
		var ΔᐃⵠΔⵠᐃΔ = ᐃⵠ.width;
		var ⲆΔⵠⵠⵠΔⲆ = ᐃⵠ.height;
		ΔΔⲆΔⲆⵠᐃ === -1 ? ᐃᐃⵠΔᐃΔΔ = devicePixelRatio / ⵠΔᐃⲆΔⵠΔ : ᐃᐃⵠΔᐃΔΔ = ΔΔⲆΔⲆⵠᐃ;
		ᐃⵠ.width = ᐃᐃⵠΔᐃΔΔ * ΔᐃⵠΔⵠᐃΔ;
		ᐃⵠ.height = ⲆΔⵠⵠⵠΔⲆ * ᐃᐃⵠΔᐃΔΔ;
		ᐃⵠ.style.width = ΔᐃⵠΔⵠᐃΔ + ᐃ[279];
		ᐃⵠ.style.height = ⲆΔⵠⵠⵠΔⲆ + ᐃ[279];
		Δ.scale(ᐃᐃⵠΔᐃΔΔ, ᐃᐃⵠΔᐃΔΔ);
		ⲆΔⵠ && (ⲆΔⵠ.ⲆⵠΔ.ⲆⲆⲆᐃⵠⵠᐃ = ΔᐃⵠΔⵠᐃΔ, ⲆΔⵠ.ⲆⵠΔ.ᐃⲆᐃΔᐃᐃⵠ = ⲆΔⵠⵠⵠΔⲆ);
		if (ᐃⵠᐃⲆΔᐃⲆ.ⵠΔⲆΔΔ) ᐃⵠᐃⲆΔᐃⲆ.ΔⵠΔ();
		else if (ⲆΔⲆⵠ.ⵠΔⲆΔΔ) ⲆΔⲆⵠ.ΔⵠΔ();
		else if (ᐃⲆΔⵠ.ⵠΔⲆΔΔ) ᐃⲆΔⵠ.ΔⵠΔ();
		else if (ⵠΔⲆⵠΔⵠⵠ.ⵠΔⲆΔΔ) ⵠΔⲆⵠΔⵠⵠ.ΔⵠΔ()
	}
	const ⵠⲆⲆΔⵠⵠⲆ = ᐃⵠΔⵠᐃᐃⵠ;
	const ⵠᐃⵠⲆᐃ = ⵠⲆⵠᐃⵠ;
	const ⵠⲆΔⲆⲆ = ᐃᐃⲆⵠΔ;
	const ᐃⵠᐃⲆⲆ = ΔΔΔⲆᐃ;
	var ΔⵠᐃΔⵠⵠⲆ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[430]);
	ΔⵠᐃΔⵠⵠⲆ.ondragstart = function() {
		return ᐃⵠᐃΔⵠ
	};
	const ᐃᐃΔΔΔ = ⵠⵠᐃΔΔ;
	ΔⵠᐃΔⵠⵠⲆ.ondrop = function() {
		return ΔΔⲆᐃᐃ
	};
	ΔⵠᐃΔⵠⵠⲆ.onresize = ⲆᐃᐃⲆⵠΔᐃ;
	(function() {
		var ᐃⲆᐃⲆΔⲆⲆ = ⵠⵠⵠ;
		var ᐃᐃⲆⲆᐃΔⵠ = ["ms", "moz", "webkit", "o"];
		for (var Ⲇᐃ = ⵠⵠⵠ; Ⲇᐃ < ᐃᐃⲆⲆᐃΔⵠ.length && !ⲆⵠᐃΔᐃⵠⲆ.requestAnimationFrame; ++Ⲇᐃ) {
			ⲆⵠᐃΔᐃⵠⲆ.requestAnimationFrame = ⲆⵠᐃΔᐃⵠⲆ[ᐃᐃⲆⲆᐃΔⵠ[Ⲇᐃ] + "RequestAnimationFrame"];
			ⲆⵠᐃΔᐃⵠⲆ.cancelAnimationFrame = ⲆⵠᐃΔᐃⵠⲆ[ᐃᐃⲆⲆᐃΔⵠ[Ⲇᐃ] + "CancelAnimationFrame"] || ⲆⵠᐃΔᐃⵠⲆ[ᐃᐃⲆⲆᐃΔⵠ[Ⲇᐃ] + "CancelRequestAnimationFrame"]
		}
		if (!ⲆⵠᐃΔᐃⵠⲆ.requestAnimationFrame) ⲆⵠᐃΔᐃⵠⲆ.requestAnimationFrame = function(callback, ᐃᐃΔⲆⵠⲆⵠᐃⵠ) {
			var ⲆⲆΔᐃΔᐃⵠ = (new Date).getTime();
			var ᐃΔⵠᐃΔΔᐃ = Math.max(ᐃⲆᐃ, ⲆⵠᐃΔΔ - (ⲆⲆΔᐃΔᐃⵠ - ᐃⲆᐃⲆΔⲆⲆ));
			var ΔΔ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]]((function() {
				callback(ⲆⲆΔᐃΔᐃⵠ + ᐃΔⵠᐃΔΔᐃ)
			}), ᐃΔⵠᐃΔΔᐃ);
			ᐃⲆᐃⲆΔⲆⲆ = ⲆⲆΔᐃΔᐃⵠ + ᐃΔⵠᐃΔΔᐃ;
			return ΔΔ
		};
		if (!ⲆⵠᐃΔᐃⵠⲆ.cancelAnimationFrame) ⲆⵠᐃΔᐃⵠⲆ.cancelAnimationFrame = function(ΔΔ) {
			clearTimeout(ΔΔ)
		}
	})();
	const ᐃᐃⵠⲆΔⲆᐃ = ⵠΔⲆᐃⵠ;

	function ᐃΔⵠᐃᐃⵠⵠ(ᐃᐃᐃⵠⲆ, ⵠΔⵠⵠΔᐃⲆ, ⲆⲆⵠⲆᐃⲆⵠ, ΔᐃΔΔⵠⵠⲆ, ⲆᐃΔᐃΔⲆΔ, ⲆΔΔᐃΔⲆⵠ) {
		const ⲆⲆᐃⲆΔⲆᐃ = ~(ᐃᐃᐃⵠⲆ & 10866) & (10866 | ᐃᐃᐃⵠⲆ);
		const ⵠⵠᐃⲆⲆΔᐃ = (ⵠΔⵠⵠΔᐃⲆ + 60306) % 65449;
		const ⵠⵠⵠᐃⲆⲆΔ = (58589 | ⲆⲆⵠⲆᐃⲆⵠ) & ~(58589 & ⲆⲆⵠⲆᐃⲆⵠ);
		const ΔΔⲆⵠᐃⵠΔ = (56845 | ΔᐃΔΔⵠⵠⲆ) & ~(56845 & ΔᐃΔΔⵠⵠⲆ);
		const ΔΔΔⵠΔⲆⲆ = 343 ^ ⲆᐃΔᐃΔⲆΔ;
		const ⲆⲆⲆᐃΔΔᐃ = (22695477 * (ⲆΔΔᐃΔⲆⵠ + 62452) + 1) % 4294967296;
		const ⵠᐃΔⲆⵠⵠⲆ = ᐃΔⵠⵠΔΔΔ(ⲆⲆᐃⲆΔⲆᐃ, ⵠⵠᐃⲆⲆΔᐃ, ⵠⵠⵠᐃⲆⲆΔ);
		const ⲆⵠᐃΔΔΔΔⵠⲆ = ⲆΔⵠΔΔⲆᐃ(ΔΔⲆⵠᐃⵠΔ, ΔΔΔⵠΔⲆⲆ, ⲆⲆⲆᐃΔΔᐃ);
		const ⲆᐃᐃⲆΔⲆⵠ = 39446 ^ ⵠᐃΔⲆⵠⵠⲆ;
		return ⲆᐃᐃⲆΔⲆⵠ
	}
	const ᐃⵠⵠⲆⲆⲆⲆ = ⵠⵠᐃⵠⵠ;
	const ᐃΔⲆΔᐃ = ᐃⵠᐃΔⵠ;

	function ΔΔᐃᐃΔⵠⵠ(ᐃᐃⲆᐃⲆΔΔ, ⲆΔΔᐃΔᐃⵠ, ᐃⲆⵠᐃΔⵠⲆ, ᐃⵠᐃΔⵠⵠⵠ) {
		const ⵠᐃⲆᐃⲆⲆⵠ = (ᐃᐃⲆᐃⲆΔΔ + 46126) % 65302;
		const ⵠΔΔⵠᐃⵠΔ = ~(54318 & ⲆΔΔᐃΔᐃⵠ) & (ⲆΔΔᐃΔᐃⵠ | 54318);
		const ΔᐃᐃᐃᐃⲆⲆ = (1103515245 * (49155 + ᐃⲆⵠᐃΔⵠⲆ) + 12345) % 2147483648;
		const ᐃΔⲆⲆⲆⵠⵠ = ((ᐃⵠᐃΔⵠⵠⵠ + 34085) * 1664525 + 1013904223) % 4294967296;
		const ΔⲆᐃⲆⲆⲆⵠ = ⵠᐃᐃⵠⲆⲆΔ(ⵠᐃⲆᐃⲆⲆⵠ, ⵠΔΔⵠᐃⵠΔ, ΔᐃᐃᐃᐃⲆⲆ, ᐃΔⲆⲆⲆⵠⵠ);
		const ⵠⵠΔⲆⵠΔⲆᐃΔ = ΔⵠΔΔΔΔⲆ(ⵠᐃⲆᐃⲆⲆⵠ, ⵠΔΔⵠᐃⵠΔ, ΔᐃᐃᐃᐃⲆⲆ, ᐃΔⲆⲆⲆⵠⵠ, ⵠᐃⲆᐃⲆⲆⵠ);
		const ⲆΔⲆᐃΔⲆⲆ = 10218 ^ ΔⲆᐃⲆⲆⲆⵠ;
		return ⲆΔⲆᐃΔⲆⲆ
	}

	function ⲆⲆⵠᐃⲆⵠᐃ(ΔⲆⲆᐃⲆᐃΔ, ⲆⲆⲆᐃⲆⲆΔ, ⵠⲆⵠΔΔⲆⲆ, ⵠⵠⲆⲆΔⲆΔ, ⲆᐃᐃᐃΔΔΔ) {
		ⲆⲆⲆⲆᐃΔⵠ(ⵠᐃΔᐃⵠ, ΔⲆⲆᐃⲆᐃΔ, ⲆⲆⲆᐃⲆⲆΔ, ⵠⲆⵠΔΔⲆⲆ, ⵠⵠⲆⲆΔⲆΔ, ⲆᐃᐃᐃΔΔΔ);
		const ⵠⲆΔⲆᐃⲆΔ = ⲆⵠΔⵠⵠⲆΔ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[1]);
		const ⵠᐃⲆΔⲆᐃⵠ = ⲆⵠΔⵠⵠⲆΔ(Δⵠⵠᐃ[2], Δⵠⵠᐃ[ⵠᐃᐃΔ]);
		const ΔⲆⲆΔⵠΔᐃ = (8 << ((ⵠⲆΔⲆᐃⲆΔ ^ ⵠᐃⲆΔⲆᐃⵠ) >> 24 & ΔΔᐃⲆⲆ)) + (0 << ((ⵠⲆΔⲆᐃⲆΔ ^ ⵠᐃⲆΔⲆᐃⵠ) >> ⲆⲆⲆᐃⲆ & 255)) + (24 << ((ⵠⲆΔⲆᐃⲆΔ ^ ⵠᐃⲆΔⲆᐃⵠ) >> 16 & 255)) + (16 << ((ⵠⲆΔⲆᐃⲆΔ ^ ⵠᐃⲆΔⲆᐃⵠ) >> 0 & 255));
		return ΔⲆⲆΔⵠΔᐃ
	}

	function ⲆΔᐃⵠⲆⲆⵠ(ᐃᐃᐃᐃⲆΔⲆ, ⲆᐃᐃⲆᐃᐃⲆ) {
		const ᐃⲆⵠⵠᐃⵠᐃ = ᐃᐃᐃᐃⲆΔⲆ ^ 53453;
		const ΔⲆΔⲆΔΔⵠ = ⲆᐃᐃⲆᐃᐃⲆ ^ 14727;
		const ⲆⲆΔⲆΔᐃᐃ = ᐃᐃΔⲆⵠⵠⲆ(ᐃⲆⵠⵠᐃⵠᐃ, ΔⲆΔⲆΔΔⵠ, ᐃⲆⵠⵠᐃⵠᐃ, ΔⲆΔⲆΔΔⵠ);
		const ⵠⲆⵠΔⲆⵠᐃΔⵠ = ΔⲆΔⵠΔⲆⵠ(ᐃⲆⵠⵠᐃⵠᐃ, ΔⲆΔⲆΔΔⵠ, ᐃⲆⵠⵠᐃⵠᐃ, ΔⲆΔⲆΔΔⵠ);
		const ⲆⲆⲆⲆΔΔⲆ = ~(61999 & ⲆⲆΔⲆΔᐃᐃ) & (ⲆⲆΔⲆΔᐃᐃ | 61999);
		return ⲆⲆⲆⲆΔΔⲆ
	}
	const ⲆᐃΔᐃⲆ = ⲆⲆΔΔΔ;
	const ⵠⲆᐃΔⵠ = ⲆΔᐃᐃⲆ;
	const ⲆᐃⲆᐃΔΔΔ = ⵠⲆᐃⵠⲆⲆⲆ;
	const ⲆⲆᐃ = ⲆⲆΔ;
	const ΔⲆⵠⲆⵠⵠⵠ = function() {
		let ΔΔⲆⲆΔΔᐃ = ⵠⵠᐃ;
		let ᐃΔⲆΔΔΔᐃ = 0;
		let ᐃⵠⲆΔⵠ = ᐃⲆΔ;
		const ᐃⲆᐃᐃⵠⵠΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 116, 97, 99, 107]);
		const ΔⲆΔⵠⲆΔᐃ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([67, 97, 110, 118, 97, 115, 82, 101, 110, 100, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
		const ⵠⲆᐃⲆⲆᐃᐃ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
		const ⲆⲆΔΔⲆⲆⵠ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([Δⵠᐃⵠᐃ, 114, 97, 119, 73, 109, 97, 103, 101]);
		const ⲆᐃᐃⵠᐃΔΔⵠΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
		const ΔᐃⲆⲆⵠⵠΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
		const ⲆⵠᐃΔⵠᐃΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([105, 110, Δⵠᐃⵠᐃ, 101, 120, 79, 102]);
		const ᐃⲆⲆⲆΔᐃΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([77, 97, 116, 104]);
		const ⲆⵠⵠⵠⲆΔΔΔᐃ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([99, 101, 105, 108]);
		const ΔᐃⵠΔⲆⵠⵠ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([102, 108, 111, 111, 114]);
		const ᐃⵠΔΔⵠΔⵠ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
		const ᐃⵠⲆΔⵠᐃΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 110, 100]);
		const ᐃⵠΔⲆⲆΔΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 105, 103, 110]);
		const ⵠΔΔⵠⲆⵠⵠ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([102, 105, 108, 108, 82, 101, 99, 116]);
		const ΔⵠΔΔⵠⲆΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([103, 117, 105, 102, 121]);
		const ⲆᐃⲆⲆⲆⵠⵠ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([101, 118, 97, 108]);
		const ⲆᐃᐃΔᐃᐃⵠ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 88, 114, 97, 121]);
		const ΔⲆᐃΔᐃⲆⵠ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([10]);
		const ⵠᐃΔΔᐃⵠⵠ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 67, 111, 108, 111, 114, 101, 100, 83, 112, 105, 107, 101, 115]);
		const ⵠⲆⲆⵠⵠᐃΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 83, 112, 105, 107, 101]);
		const ⵠⵠⵠᐃⵠⵠᐃ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 70, 101, 101, ⲆⵠΔΔΔ]);
		const ᐃⵠΔᐃⵠᐃⲆ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 67, 114, 97, 102, 116]);
		const ⵠⵠᐃⲆΔⵠⲆ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 82, 101, 99, 121, 99, 108, 101]);
		const ⲆⵠⲆⲆⵠⲆⵠ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 84, 111, 116, 101, 109]);
		const ΔⵠᐃⵠⲆⵠⵠᐃΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([115, 101, 116, 116, 105, 110, 103, 115, 46, 69, 120, 116, 114, 97, 99, 116, 111, 114, 73, 110, 102, 111]);
		const ΔᐃΔᐃΔⵠⵠ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([83, 97, 110, ᐃᐃΔⵠⵠ, 115, 116, 111, 114, 109, 73, 109, 97, 103, 101]);
		const ⲆΔⵠⲆΔⵠΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([116, 111, 83, 116, 114, 105, 110, 103]);
		const ΔⲆᐃᐃⵠΔΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([66, 108, 105, 122, 122, 97, 114, ᐃᐃΔⵠⵠ, 73, 109, 97, 103, 101]);
		const ᐃⲆⵠⲆⲆⵠΔ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([67, 66, 79]);
		const ⵠᐃᐃⲆⲆⵠⲆ = ΔⲆᐃ.ⲆΔᐃᐃⵠ([76, 69, 69, 84, 95, 83, 67, 82, 73, 80, 84, 95, 69, 88, 84, 69, 82, 78, 65, 76]);

		function ⲆᐃⵠⲆⵠⵠⲆ(ᐃⲆᐃⲆΔΔⵠ) {
			try {
				new ᐃⲆᐃⲆΔΔⵠ
			} catch (ⲆⵠⲆᐃⵠᐃⲆ) {
				return ⲆⵠⲆᐃⵠᐃⲆ[ᐃⲆᐃᐃⵠⵠΔ][ⲆⵠᐃΔⵠᐃΔ](ΔᐃⲆⲆⵠⵠΔ) !== -Δⵠᐃ ? ᐃⲆⲆ : ⲆⲆΔ
			}
			return 0
		}

		function ΔΔⲆΔⵠΔⵠ() {
			return ᐃⵠⲆΔⵠ
		}

		function ᐃΔⵠᐃⵠⲆΔ(ᐃⲆᐃⲆΔΔⵠ) {
			try {
				ᐃⲆᐃⲆΔΔⵠ()
			} catch (ⲆⵠⲆᐃⵠᐃⲆ) {
				return ⲆⵠⲆᐃⵠᐃⲆ[ᐃⲆᐃᐃⵠⵠΔ][ⲆⵠᐃΔⵠᐃΔ](ΔᐃⲆⲆⵠⵠΔ) !== -1 ? 1 : ⵠᐃΔ
			}
			return ⵠⵠⵠ
		}

		function ᐃⲆⵠᐃⲆⲆⲆ() {
			ᐃΔⲆΔΔΔᐃ++;
			if (ᐃΔⲆΔΔΔᐃ > 1e3) {
				ᐃΔⲆΔΔΔᐃ = ᐃⲆᐃ;
				ᐃⵠⲆΔⵠ = ᐃΔⵠᐃⵠⲆΔ(ⲆⵠᐃΔᐃⵠⲆ[ΔⲆΔⵠⲆΔᐃ][ⵠⲆᐃⲆⲆᐃᐃ][ⲆⲆΔΔⲆⲆⵠ]) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃΔⵠᐃⵠⲆΔ(ⲆⵠᐃΔᐃⵠⲆ[ΔⲆΔⵠⲆΔᐃ][ⵠⲆᐃⲆⲆᐃᐃ][ⵠΔΔⵠⲆⵠⵠ]) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃΔⵠᐃⵠⲆΔ(ⲆⵠᐃΔᐃⵠⲆ[ᐃⵠΔΔⵠΔⵠ][ⵠⲆᐃⲆⲆᐃᐃ][ᐃⵠⲆΔⵠᐃΔ]) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ⲆⵠᐃΔⵠᐃⵠ(ⲆᐃⵠⲆⵠⵠⲆ) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ⲆᐃⵠⲆⵠⵠⲆ(ⲆⵠᐃΔᐃⵠⲆ[ᐃⵠΔΔⵠΔⵠ]) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃⵠⲆⵠⲆ(ⵠᐃᐃⲆⲆⵠⲆ) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃⵠⲆⵠⲆ(ᐃⲆⵠⲆⲆⵠΔ) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃⵠⲆⵠⲆ(ⲆᐃᐃΔᐃᐃⵠ) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃⵠⲆⵠⲆ(ⵠᐃΔΔᐃⵠⵠ) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃⵠⲆⵠⲆ(ⵠⲆⲆⵠⵠᐃΔ) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃⵠⲆⵠⲆ(ⵠⵠⵠᐃⵠⵠᐃ) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃⵠⲆⵠⲆ(ᐃⵠΔᐃⵠᐃⲆ) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃⵠⲆⵠⲆ(ⵠⵠᐃⲆΔⵠⲆ) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃⵠⲆⵠⲆ(ⲆⵠⲆⲆⵠⲆⵠ) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃⵠⲆⵠⲆ(ⲆⵠⲆⲆⵠⲆⵠ) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃⵠⲆⵠⲆ(ΔᐃΔᐃΔⵠⵠ) || ᐃⵠⲆΔⵠ;
				ᐃⵠⲆΔⵠ = ᐃⵠⲆⵠⲆ(ΔⲆᐃᐃⵠΔΔ) || ᐃⵠⲆΔⵠ;
				undefined !== ⲆⵠᐃΔᐃⵠⲆ[ΔⵠΔΔⵠⲆΔ] && (ᐃⵠⲆΔⵠ = 1)
			}
			if (1 === ᐃⵠⲆΔⵠ) {
				ΔΔⲆⲆΔΔᐃ++;
				if (ΔΔⲆⲆΔΔᐃ > 1e4) {
					ΔΔⲆⲆΔΔᐃ = 0;
					ⲆⵠᐃΔᐃⵠⲆ[ᐃⲆⲆⲆΔᐃΔ][ΔᐃⵠΔⲆⵠⵠ] = ⲆⵠᐃΔᐃⵠⲆ[ᐃⲆⲆⲆΔᐃΔ][ᐃⵠΔⲆⲆΔΔ]
				}
			}
		}

		function ⲆⵠᐃΔⵠᐃⵠ(ᐃⲆᐃⲆΔΔⵠ) {
			if (ᐃⲆᐃⲆΔΔⵠ && ᐃⲆᐃⲆΔΔⵠ[ⲆΔⵠⲆΔⵠΔ]) {
				const ᐃⲆᐃⲆⲆΔᐃ = ᐃⲆᐃⲆΔΔⵠ[ⲆΔⵠⲆΔⵠΔ]();
				if (-1 !== ᐃⲆᐃⲆⲆΔᐃ[ⲆⵠᐃΔⵠᐃΔ](ΔⲆᐃΔᐃⲆⵠ)) return 1
			}
			return 0
		}

		function ᐃⵠⲆⵠⲆ(ᐃⲆΔⵠΔΔᐃ) {
			try {
				ⲆⵠᐃΔᐃⵠⲆ[ⲆᐃⲆⲆⲆⵠⵠ](ᐃⲆΔⵠΔΔᐃ);
				return 1
			} catch (ΔᐃⲆⵠ) {
				return ⲆⲆᐃ
			}
		}
		return {
			"ᐃⲆⵠᐃⲆⲆⲆ": ᐃⲆⵠᐃⲆⲆⲆ,
			"ΔΔⲆΔⵠΔⵠ": ΔΔⲆΔⵠΔⵠ
		}
	}();
	const ᐃΔᐃⵠΔΔᐃ = ΔΔΔⲆⵠᐃⲆ;
	const ΔΔΔᐃⲆᐃⵠ = ⵠⵠΔⲆᐃⲆⵠ;
	var ⲆⲆⵠⲆⵠ = navigator.language || navigator.userLanguage;
	const ⵠᐃⵠ = ⲆⲆᐃ;
	const ⲆΔⲆⵠᐃᐃⵠ = ΔΔΔⲆⲆⲆⲆ;
	var ᐃΔΔⵠⵠ = -((new Date).getTimezoneOffset() / 60);
	var ⵠⵠⵠⵠⵠⵠⵠ = "Europe";
	var ⵠᐃᐃⲆΔᐃᐃ = "Russia";
	var ⲆⲆⵠᐃⵠⲆΔ = "North America";
	const ⲆⲆΔⵠⲆ = ΔⲆᐃᐃᐃ;
	const ⵠⵠΔΔΔ = ⲆⵠΔΔᐃ;
	var ᐃⲆⵠΔΔΔⵠ = "South America";
	const ΔⵠⲆⲆⲆⵠⲆ = ᐃⲆᐃᐃⲆⲆΔ;
	const ⲆΔⵠΔᐃⵠⵠ = ΔΔΔᐃᐃ;
	const ⲆⵠⲆⵠΔⵠⲆ = ᐃⲆΔᐃᐃⵠᐃ;
	const ⵠᐃΔᐃⲆ = ᐃΔᐃⵠⲆ;
	const Δⵠⵠᐃᐃ = ⲆⲆᐃⲆⲆⲆⵠ;
	const ⵠᐃΔⲆⲆ = ᐃⲆᐃᐃᐃ;
	var ΔⲆᐃⲆᐃΔΔ = "West America";
	var ⲆΔᐃΔⲆᐃᐃ = "Asia";
	var ΔⲆΔⲆⲆⵠⵠ = "Australia";
	const ⵠᐃⲆΔⵠ = ⲆᐃⵠⲆⵠ;
	const ΔΔΔᐃΔ = ⵠΔᐃᐃ;
	const ⵠᐃΔⵠⵠΔΔΔⲆ = ⵠⵠΔⲆᐃⲆⵠ;
	const ᐃⵠⵠⵠⲆ = ᐃᐃⲆᐃⵠ;
	var ⵠⲆᐃᐃᐃ = ⵠⵠⵠⵠⵠⵠⵠ;
	if (ᐃΔΔⵠⵠ >= -2 && ᐃⵠΔⲆ >= ᐃΔΔⵠⵠ) ⵠⲆᐃᐃᐃ = ⵠⵠⵠⵠⵠⵠⵠ;
	else if (ᐃⵠΔⲆ < ᐃΔΔⵠⵠ && ᐃΔΔⵠⵠ <= 5) ⵠⲆᐃᐃᐃ = ⵠᐃᐃⲆΔᐃᐃ;
	else if (ᐃΔΔⵠⵠ > 5 && ⵠᐃΔⲆⲆ >= ᐃΔΔⵠⵠ) ⵠⲆᐃᐃᐃ = ⲆΔᐃΔⲆᐃᐃ;
	else if (ᐃΔΔⵠⵠ > ᐃⲆᐃᐃᐃ) ⵠⲆᐃᐃᐃ = ΔⲆΔⲆⲆⵠⵠ;
	else if (-5 <= ᐃΔΔⵠⵠ && -2 > ᐃΔΔⵠⵠ) {
		if (ⲆⲆⵠⲆⵠ === "pt-BR" || ⲆⲆⵠⲆⵠ === "pt-br" || ⲆⲆⵠⲆⵠ === "pt" || "pt-pt" === ⲆⲆⵠⲆⵠ) ⵠⲆᐃᐃᐃ = ᐃⲆⵠΔΔΔⵠ;
		else ⵠⲆᐃᐃᐃ = ⲆⲆⵠᐃⵠⲆΔ
	} else if (ᐃΔΔⵠⵠ < -5) {
		ⲆⲆⵠⲆⵠ === "pt-BR" || "pt-br" === ⲆⲆⵠⲆⵠ || "pt" === ⲆⲆⵠⲆⵠ || "pt-pt" === ⲆⲆⵠⲆⵠ ? ⵠⲆᐃᐃᐃ = ᐃⲆⵠΔΔΔⵠ : ⵠⲆᐃᐃᐃ = ΔⲆᐃⲆᐃΔΔ
	}
	var ᐃⲆᐃⲆΔ = function() {
		function ⵠΔᐃᐃᐃⵠᐃ(ᐃⲆΔᐃⲆ) {
			var ⵠⵠⵠΔ = 2147483648;
			var ⵠᐃΔΔ = 1103515245;
			var ⵠⵠᐃΔ = 12345;
			var ⵠⵠᐃⵠ = ᐃⲆΔᐃⲆ ? ᐃⲆΔᐃⲆ : Math.floor((ⵠⵠⵠΔ - 1) * Math.random());
			this.ᐃⵠΔᐃᐃ = function(ᐃⲆΔᐃⲆ) {
				ⵠⵠᐃⵠ = ᐃⲆΔᐃⲆ ? ᐃⲆΔᐃⲆ : Math.floor(Math.random() * (ⵠⵠⵠΔ - 1))
			};
			this.get = function() {
				ⵠⵠᐃⵠ = (ⵠⵠᐃⵠ * ⵠᐃΔΔ + ⵠⵠᐃΔ) % ⵠⵠⵠΔ;
				return ⵠⵠᐃⵠ / ⵠⵠⵠΔ
			}
		}
		return {
			"ⵠΔᐃᐃᐃⵠᐃ": ⵠΔᐃᐃᐃⵠᐃ
		}
	}();

	function ΔⲆⲆⵠᐃⲆᐃ(ᐃᐃⵠⲆᐃⲆᐃ, ΔⵠⲆΔⲆⲆΔ, ⵠΔⵠᐃⵠᐃᐃ, ΔᐃⵠΔⲆⵠⲆ, ᐃᐃΔⵠᐃᐃΔ) {
		ᐃᐃⵠΔⵠᐃⲆ(ⵠᐃΔᐃⵠ, ᐃᐃⵠⲆᐃⲆᐃ, ΔⵠⲆΔⲆⲆΔ, ⵠΔⵠᐃⵠᐃᐃ, ΔᐃⵠΔⲆⵠⲆ, ᐃᐃΔⵠᐃᐃΔ);
		const ΔⵠᐃⵠⲆⵠⲆ = ⵠΔⲆⲆᐃⲆΔ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[ⲆⲆⵠ], Δⵠⵠᐃ[2], Δⵠⵠᐃ[ⲆΔⲆᐃ], Δⵠⵠᐃ[ΔᐃᐃΔ]);
		const ⵠᐃΔΔⵠⵠⲆΔᐃ = ΔΔᐃⵠⵠᐃⵠ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[1]);
		const ⵠⲆᐃⵠᐃⵠⲆ = ~(ΔⵠᐃⵠⲆⵠⲆ & 27537) & 27537 | ~(27537 & ΔⵠᐃⵠⲆⵠⲆ) & ΔⵠᐃⵠⲆⵠⲆ;
		return ⵠⲆᐃⵠᐃⵠⲆ
	}

	function ΔⲆᐃⵠΔⵠⵠ(ⵠᐃᐃΔⵠⲆΔ, ⲆΔᐃᐃᐃⵠᐃ, ⵠⲆⵠⲆⵠΔⲆ, ⲆⵠΔⵠΔᐃΔ) {
		ΔⵠᐃᐃᐃⵠⲆ(ⵠᐃΔᐃⵠ, ⵠᐃᐃΔⵠⲆΔ, ⲆΔᐃᐃᐃⵠᐃ, ⵠⲆⵠⲆⵠΔⲆ, ⲆⵠΔⵠΔᐃΔ);
		const ΔⵠᐃᐃⵠⲆⲆ = ⵠⲆⵠⵠⲆᐃⲆ(Δⵠⵠᐃ[ⵠⵠⵠ], Δⵠⵠᐃ[Δⵠᐃ], Δⵠⵠᐃ[2], Δⵠⵠᐃ[3], Δⵠⵠᐃ[0]);
		const ⲆΔⵠᐃⵠⲆᐃ = ⵠⲆⵠⵠⲆᐃⲆ(Δⵠⵠᐃ[1], Δⵠⵠᐃ[ⵠⲆΔᐃ], Δⵠⵠᐃ[ⲆⵠⵠⲆ], Δⵠⵠᐃ[ⲆⲆᐃ], Δⵠⵠᐃ[ΔΔⵠ]);
		const ΔΔⲆᐃⲆⵠⲆ = (75 * (192 + (ΔⵠᐃᐃⵠⲆⲆ ^ ⲆΔⵠᐃⵠⲆᐃ)) + 74) % 65537;
		return ΔΔⲆᐃⲆⵠⲆ
	}
	const ᐃΔΔᐃⲆᐃΔ = ⲆΔΔⵠⵠ;

	function ΔⲆΔⵠΔⲆⵠ(ΔⲆⵠⲆⲆΔⲆ, ⵠⲆΔⲆᐃᐃΔ, ᐃⲆⵠᐃⵠⲆⵠ, ΔⵠΔⲆᐃΔΔ) {
		const ⲆΔᐃᐃⵠⵠΔ = ΔⲆⵠⲆⲆΔⲆ ^ 22271;
		const ⲆⵠⲆⵠⲆΔΔ = (24 << (ⵠⲆΔⲆᐃᐃΔ >> 0 & ⵠⵠⵠⲆΔⵠᐃ)) + (ⲆⵠᐃΔΔ << (ⵠⲆΔⲆᐃᐃΔ >> 24 & 255)) + (0 << (ⵠⲆΔⲆᐃᐃΔ >> 8 & 255)) + (8 << (ⵠⲆΔⲆᐃᐃΔ >> ⲆⲆᐃΔⵠ & 255));
		const ⲆᐃᐃⲆⲆⲆΔ = ~(ᐃⲆⵠᐃⵠⲆⵠ & 25598) & ᐃⲆⵠᐃⵠⲆⵠ | ~(ᐃⲆⵠᐃⵠⲆⵠ & 25598) & 25598;
		const ⵠⲆᐃⵠΔΔᐃ = 12507 ^ ΔⵠΔⲆᐃΔΔ;
		const ⵠΔⲆᐃⵠᐃᐃ = ⵠⵠⵠⲆⲆⲆⵠ(ⲆΔᐃᐃⵠⵠΔ, ⲆⵠⲆⵠⲆΔΔ, ⲆᐃᐃⲆⲆⲆΔ, ⵠⲆᐃⵠΔΔᐃ, ⲆΔᐃᐃⵠⵠΔ);
		const ᐃⵠᐃⲆᐃⵠΔ = ᐃΔⲆⲆΔΔᐃ(ⲆⵠⲆⵠⲆΔΔ, ⲆᐃᐃⲆⲆⲆΔ);
		const ΔΔᐃⵠⲆᐃΔ = (2147483587 + 2147483629 * ((ⵠΔⲆᐃⵠᐃᐃ ^ ᐃⵠᐃⲆᐃⵠΔ) + 32114)) % 2147483647;
		return ΔΔᐃⵠⲆᐃΔ
	}
	var ΔΔΔΔᐃᐃΔ = [
		[0, "DRAGON", ᐃⲆΔΔⲆ, ⵠΔᐃᐃ, 66, 35, ⵠᐃⵠ],
		[ᐃⲆΔ, ᐃ[167], 91, ΔⲆᐃⲆᐃⲆⲆ, ⵠⲆⲆⲆ, 40, ⵠⵠᐃᐃⲆ],
		[ⵠⵠᐃ, ᐃ[346], 135, 180, 89, 124, ᐃᐃᐃᐃ],
		[ⵠᐃΔ, ᐃ[101], 142, 6, 82, 99, 6],
		[Ⲇⵠᐃ, ᐃ[350], 6, 150, 90, 154, ⵠⵠᐃᐃⲆ],
		[0, ᐃ[167], ⵠⵠⲆⲆⵠ, 6, 90, 150, 0],
		[1, "b", ⵠᐃⵠ, 5, 175, 0],
		[Δⵠᐃ, "t", 2, ⵠⲆⲆⲆ, 174, 0],
		[1, "t", 5, ⵠΔⲆᐃ, 173, 0],
		[1, "b", ⲆΔⲆᐃ, ⲆⵠⲆᐃ, 176, 0],
		[ᐃⲆⲆ, "t", ᐃⲆᐃ, 5, 177, 0],
		[Δⵠᐃ, "t", ⲆⵠⵠⲆ, ⲆⵠⲆᐃ, 178, ⵠⵠᐃ],
		[ⲆⲆⵠ, "t", 4, Δᐃᐃⵠ, 179, 0],
		[1, "b", 0, 5, 180, 0],
		[ᐃⲆⲆ, "t", ⵠⲆⲆⵠ, 5, 181, ⲆⲆᐃ],
		[ⵠᐃᐃ, "b", 2, ᐃᐃᐃᐃ, 182, 0],
		[1, "b", ⲆⲆⵠ, ΔΔⵠⵠ, 183, ⵠⵠᐃ],
		[Δⵠᐃ, "b", ⵠⵠΔⵠ, 5, 184, 0],
		[ᐃⲆⲆ, "t", ΔΔⵠⵠ, 5, 185, ⵠⵠᐃ],
		[1, "t", ⵠⵠΔⵠ, 5, 186, 0],
		[ᐃⲆⲆ, "t", ⲆⲆΔ, ᐃᐃᐃᐃ, 187, 0],
		[ᐃⲆⲆ, "t", 5, 5, 188, 0],
		[1, "t", ⲆⵠⲆ, 5, 189, ⲆⲆᐃ],
		[1, "b", ⵠⵠΔⵠ, 5, 190, 0],
		[ⲆⵠⲆ, "t", ΔⲆⲆⲆ, 5, 191, 0],
		[Δⵠᐃ, "b", ⲆⲆΔΔ, ᐃᐃᐃᐃ, 192, 0],
		[1, "t", 5, 5, 193, 0],
		[1, "t", ⵠⵠⵠ, 5, 194, 0],
		[ᐃⲆⲆ, "t", 3, ⵠⲆⲆⲆ, 195, Ⲇⵠᐃ],
		[ΔΔⵠ, "b", ⵠᐃⵠ, 5, 196, ᐃⲆΔ],
		[1, "t", ⵠⲆⲆⲆ, 5, 197, ⲆⲆᐃ],
		[1, "t", 2, ⵠΔⲆᐃ, 198, 0],
		[1, "b", ⵠⲆΔᐃ, 5, 199, Δⵠⵠ],
		[ⵠᐃᐃ, "t", 4, 5, 200, 0],
		[1, "t", 1, 5, 201, ⲆⲆΔ],
		[ⲆⲆⵠ, "b", 1, ᐃⵠΔⵠ, 202, ⲆⲆᐃ],
		[1, "t", 5, ⲆⵠⲆᐃ, 203, ⵠᐃΔ],
		[ⵠᐃᐃ, "t", 2, 5, 204, ⲆⲆᐃ],
		[1, "t", ΔⲆⲆⲆ, ⵠⲆⲆⵠ, 205, 0],
		[ⲆⲆⵠ, "b", 2, ΔΔⵠⵠ, 206, ᐃⲆᐃ],
		[1, "t", 1, ΔΔⵠⵠ, 207, 0],
		[1, "t", ΔⲆΔⲆ, ᐃⵠΔⵠ, 208, 0],
		[ΔΔⵠ, "t", ⵠⵠᐃⲆ, 5, 209, 0],
		[ᐃⲆⲆ, "b", 0, 5, 210, ᐃⲆΔ],
		[1, "t", 5, 5, 211, 0],
		[ⲆⲆⵠ, "t", 1, 5, 212, ᐃⲆᐃ],
		[1, "t", 2, 5, 213, 0],
		[1, "b", 3, 5, 214, ⲆⲆᐃ],
		[1, "t", 5, ⵠᐃⲆᐃ, 215, 0],
		[ⵠᐃᐃ, "b", 0, ⲆⵠⲆᐃ, 216, 0],
		[1, "t", ⵠΔᐃⲆ, ᐃⵠΔⵠ, 217, 0],
		[ⵠᐃᐃ, "t", 2, 5, 218, 0],
		[1, "t", ⲆⲆⵠ, 5, 219, ᐃⲆᐃ],
		[1, "t", ⵠⵠⲆᐃ, 5, 220, ⵠᐃⵠ],
		[1, "t", 5, 5, 221, ⲆⲆᐃ],
		[1, "t", ⵠⵠΔⵠ, ⵠᐃⲆᐃ, 222, ᐃⲆᐃ],
		[ΔΔⵠ, "t", ΔⲆΔⲆ, ΔΔⵠⵠ, 223, ⵠⵠᐃ],
		[ᐃⲆⲆ, "b", 3, 5, 224, 0],
		[1, "t", ⲆⵠⲆ, 5, 225, 0],
		[1, "t", 3, 5, 226, 0],
		[ⲆⲆⵠ, "b", 0, 5, 227, ⲆⲆΔ],
		[1, "t", ⵠⵠⲆⲆ, ⵠᐃⲆᐃ, 228, 0],
		[Δⵠᐃ, "t", ⵠⲆⲆⵠ, 5, 229, 0],
		[1, "t", ⵠⵠᐃⲆ, ⵠⲆⲆⵠ, 230, ᐃⲆᐃ],
		[1, "t", ⵠᐃⵠ, ⵠⲆⲆⲆ, 231, ⵠᐃⵠ],
		[1, "b", ᐃᐃⲆⵠ, 5, 232, 0],
		[Δⵠᐃ, "t", 1, ΔⲆⵠⵠ, 233, ⵠⵠⵠ],
		[ΔΔⵠ, "t", ᐃⵠⵠⲆ, ΔⲆⵠⵠ, 234, 0],
		[1, "b", 1, 5, 235, ⵠⵠᐃ],
		[ΔΔⵠ, "t", 4, ⵠᐃⲆᐃ, 236, 0],
		[1, "t", ⵠⵠΔⵠ, ⵠⲆⲆⲆ, 237, ⲆⲆᐃ],
		[Δⵠᐃ, "t", 0, 5, 238, 0],
		[1, "t", ⵠΔᐃⲆ, ᐃⵠΔⵠ, 239, 0],
		[1, "b", ᐃⵠΔⲆ, ⵠⲆⲆⲆ, 240, ⲆⲆΔ],
		[1, "t", ⵠⲆⲆⲆ, 5, 241, 0],
		[1, "b", 1, 5, 242, ⵠᐃⵠ],
		[ΔΔⵠ, "t", ΔΔⲆΔ, 5, 243, ᐃⲆᐃ],
		[ΔΔⵠ, "t", 2, 5, 244, 0],
		[ⲆⲆⵠ, "t", ᐃⲆⲆ, Δᐃᐃⵠ, 245, 0],
		[1, "b", ⵠᐃᐃ, 5, 246, 0],
		[1, "t", 3, 5, 247, ⲆⲆΔ],
		[1, "b", 2, 5, 248, ᐃⲆᐃ],
		[ⲆⲆⵠ, "t", ⵠΔⲆᐃ, ⵠⲆⲆⲆ, 249, Δⵠⵠ],
		[1, "t", ᐃⵠΔⲆ, 5, 250, 0],
		[ⵠᐃᐃ, "t", 4, ⲆⵠⲆᐃ, 251, ᐃⲆΔ],
		[ΔΔⵠ, "b", 1, ΔΔⵠⵠ, 252, ᐃⲆᐃ],
		[1, "t", 4, 5, 253, 0],
		[1, "t", ᐃⲆⲆ, ᐃᐃᐃᐃ, 254, 0],
		[ΔΔⵠ, "t", ΔᐃΔⲆ, 5, 255, 0],
		[ⲆⲆⵠ, "t", ᐃᐃᐃᐃ, 5, ⲆᐃⲆᐃⵠΔᐃ, 0],
		[ⵠᐃᐃ, "b", ᐃⵠΔⲆ, ΔΔⵠⵠ, 257, ⵠᐃΔ],
		[ⲆⵠⲆ, "t", 4, ᐃⵠΔⵠ, 258, Ⲇⵠᐃ],
		[1, "b", ⲆⵠⵠⲆ, ⵠΔⲆᐃ, 259, ⵠᐃΔ],
		[ΔΔⵠ, "t", 5, ⵠᐃⲆᐃ, 260, 0],
		[1, "b", ᐃⲆΔ, 5, 261, Ⲇⵠᐃ],
		[1, "t", ⲆΔⲆᐃ, 5, 262, ᐃⲆᐃ],
		[1, "t", ⵠΔᐃⲆ, ᐃᐃᐃᐃ, 263, ⵠᐃΔ],
		[1, "t", 2, 5, 264, ᐃⲆᐃ],
		[1, "b", 1, ⵠᐃⲆᐃ, 265, ⲆⲆᐃ],
		[1, "b", 2, ⵠⲆⲆⵠ, 266, ⲆⲆᐃ],
		[Δⵠᐃ, "t", 3, 5, 267, ⲆⲆΔ],
		[1, "t", 4, 5, 268, 0],
		[1, "t", 0, 5, 269, ⵠⵠᐃ],
		[ᐃⲆⲆ, "t", 5, 5, 270, 0],
		[1, "t", 3, 5, 271, 0],
		[1, "t", ᐃⵠⵠⲆ, ᐃᐃᐃᐃ, 272, 0],
		[1, "t", 1, ᐃᐃᐃᐃ, 273, ⲆⲆᐃ],
		[ΔΔⵠ, "b", 2, 5, 274, ᐃⲆΔ],
		[Δⵠᐃ, "t", ΔΔⵠ, ᐃᐃᐃᐃ, 275, ᐃⲆΔ],
		[Δⵠᐃ, "t", 4, Δᐃᐃⵠ, 276, ⲆⲆᐃ],
		[ⲆⲆⵠ, "b", ⵠᐃᐃ, 5, 277, 0],
		[1, "b", ⵠⵠΔⵠ, ΔΔⵠⵠ, 278, ⵠⵠⵠ],
		[ᐃⲆⲆ, "t", 1, 5, 279, 0],
		[Δⵠᐃ, "t", ᐃⵠⵠⲆ, ΔⲆⵠⵠ, 280, ᐃⲆᐃ],
		[Δⵠᐃ, "t", ⵠⵠΔⵠ, 5, 281, ⵠⵠⵠ],
		[ᐃⲆⲆ, "t", 5, ΔΔⵠⵠ, 282, ᐃⲆᐃ],
		[1, "b", ⵠⵠᐃⲆ, 5, 283, ⵠⵠᐃ],
		[ⵠᐃᐃ, "t", ᐃⲆⲆ, ⵠⲆⲆⲆ, 284, ⵠᐃⵠ],
		[ⵠᐃᐃ, "b", 3, Δᐃᐃⵠ, 285, 0],
		[1, "t", ᐃⵠⵠⲆ, 5, 286, ⵠⵠⵠ],
		[ⲆⵠⲆ, "t", ⵠᐃΔ, Δᐃᐃⵠ, 287, 0],
		[1, "t", ⵠⲆⲆⵠ, ΔⲆⵠⵠ, 288, 0],
		[ⲆⲆⵠ, "t", 2, 5, 289, 0],
		[Δⵠᐃ, "b", Δⵠᐃ, 5, 290, ⵠⵠⵠ],
		[Δⵠᐃ, "t", 4, Δᐃᐃⵠ, 292, ⵠᐃⵠ],
		[1, "t", ᐃⵠΔⲆ, Δᐃᐃⵠ, 291, Ⲇⵠᐃ],
		[1, "b", ᐃᐃⲆⵠ, ΔⲆⵠⵠ, 293, 0],
		[Δⵠᐃ, "t", 1, Δᐃᐃⵠ, 294, 0],
		[Δⵠᐃ, "t", 3, ⵠᐃⲆᐃ, 295, ⵠⵠᐃ],
		[Δⵠᐃ, "t", ⲆⵠⲆᐃ, 5, 296, 0],
		[Δⵠᐃ, "b", 0, ΔⲆⵠⵠ, 297, 0],
		[ᐃⲆⲆ, "b", 3, 5, 298, 0],
		[ⲆⲆⵠ, "t", ᐃⵠⵠⲆ, 5, 299, ᐃⲆᐃ],
		[1, "t", ᐃᐃⲆⵠ, Δᐃᐃⵠ, 300, 0],
		[1, "t", 4, 5, 301, ⵠᐃⵠ],
		[1, "b", 0, ᐃᐃᐃᐃ, 302, ᐃⲆᐃ],
		[ᐃⲆⲆ, "b", ⵠⲆΔᐃ, Δᐃᐃⵠ, 303, ⲆⲆΔ],
		[Δⵠᐃ, "t", 1, 6, 303, Δⵠⵠ],
		[1, "t", ⵠⲆΔᐃ, ⵠⵠᐃⵠᐃ, 303, ⲆⲆᐃ],
		[1, "t", 1, ⵠⲆⲆⲆ, 304, ᐃⲆΔ],
		[1, "t", 3, 6, 304, ⵠᐃⵠ],
		[Δⵠᐃ, "t", 4, ᐃΔᐃᐃⲆ, 304, ⵠᐃΔ],
		[1, "t", ⵠⲆⲆⲆ, 8, 303, Ⲇⵠᐃ],
		[1, "b", Δⵠᐃ, Δᐃⵠⵠᐃ, 304, 0],
		[1, "b", 2, ⲆⲆⵠⵠᐃ, 304, ⲆⲆΔ],
		[1, "b", ⵠⲆᐃΔ, 12, 303, 0],
		[ⲆⲆⵠ, "b", ⵠⵠⲆᐃ, 17, 304, 0],
		[Δⵠᐃ, "t", ⲆⲆⵠ, 9, 303, 0],
		[1, "t", ⲆⵠⲆ, ⲆⲆⲆΔⵠ, 304, Δⵠⵠ],
		[1, "t", 1, ⵠᐃⲆΔⲆ, 303, ᐃⲆᐃ],
		[ΔΔⵠ, "t", 3, 10, 303, ᐃⲆᐃ],
		[ⵠᐃᐃ, "t", ⵠⲆᐃΔ, 14, 304, ᐃⲆΔ],
		[Δⵠᐃ, "t", 4, ΔⵠΔᐃΔ, 304, ⲆⲆΔ],
		[1, "t", 5, 11, 304, ᐃⲆΔ],
		[ᐃⲆⲆ, "t", ΔΔⵠⵠ, ΔⲆᐃΔⵠᐃᐃ, 303, 0],
		[ⲆⲆⵠ, "t", Δᐃᐃⵠ, ΔⵠⲆᐃⲆ, 304, 0],
		[1, "t", 5, ΔΔΔᐃᐃ, 304, 0],
		[1, "t", ᐃⵠΔⲆ, ⵠⲆᐃᐃⲆ, 304, ⵠⵠᐃ],
		[1, "t", 1, ΔΔΔⲆⵠᐃⲆ, 303, 0],
		[1, "b", ⲆΔⲆᐃ, 15, 303, 0],
		[ⵠᐃᐃ, "b", 0, 16, 303, Δⵠⵠ],
		[1, "t", 3, ᐃⲆΔᐃΔ, 303, Δⵠⵠ],
		[1, "t", ᐃⵠⵠⲆ, ᐃⲆΔΔⲆ, 303, ⲆⲆΔ],
		[1, "t", ᐃᐃⲆⵠ, 19, 303, 0],
		[ⵠᐃᐃ, "t", 1, ⲆⵠᐃΔⲆ, 303, ᐃⲆᐃ],
		[ⲆⵠⲆ, "b", 1, 21, 303, 0],
		[ⲆⲆⵠ, "t", 2, 22, 303, ⵠⵠᐃ],
		[ⲆⵠⲆ, "t", ΔⲆΔⲆ, 23, 303, ⵠᐃⵠ],
		[1, "b", 3, 24, 303, ⵠᐃⵠ],
		[ᐃⲆⲆ, "t", 5, 25, 303, 0],
		[1, "t", 1, 26, 303, ⵠᐃⵠ],
		[1, "t", ⵠⵠΔⵠ, 27, 303, 0],
		[ᐃⲆⲆ, "t", 4, 28, 303, ᐃⲆᐃ],
		[ᐃⲆⲆ, "b", ⵠⵠᐃ, 18, 304, ⵠⵠᐃ],
		[1, "t", 2, 19, 304, ⲆⲆᐃ],
		[1, "t", 5, 20, 304, 0],
		[ΔΔⵠ, "b", 2, 21, 304, 0],
		[ⵠᐃᐃ, "t", 4, 22, 304, ᐃⲆᐃ],
		[ⲆⲆⵠ, "t", ⵠⵠΔⵠ, 23, 304, 0],
		[1, "t", ⲆⵠⲆ, 24, 304, 0],
		[1, "t", ⲆⲆΔΔ, 25, 304, Ⲇⵠᐃ],
		[1, "t", 0, 27, 304, ⲆⲆΔ],
		[1, "t", 5, 26, 304, ᐃⲆΔ],
		[1, "b", 2, 28, 304, ᐃⲆᐃ],
		[1, "t", 1, 29, 304, 0],
		[1, "b", 1, 29, 303, 0],
		[ΔΔⵠ, "b", ᐃᐃⲆⵠ, 30, 303, 0],
		[1, "t", ΔⲆΔⲆ, 31, 303, 0],
		[1, "t", ⲆⲆᐃ, 32, 303, Ⲇⵠᐃ],
		[1, "t", ⵠᐃⲆᐃ, 33, 303, ⵠᐃΔ],
		[1, "t", 2, 34, 303, ⵠⵠⵠ],
		[1, "t", 4, 35, 303, 0],
		[ⵠᐃᐃ, "t", ⲆⵠⲆ, 36, 303, ⵠⵠⵠ],
		[1, "b", ⵠⵠⲆᐃ, 37, 303, 0],
		[1, "t", 2, 32, 304, ⵠⵠⵠ],
		[ΔΔⵠ, "t", 4, 30, 304, 0],
		[ⲆⲆⵠ, "t", ⲆⵠⲆ, 31, 304, 0],
		[ᐃⲆⲆ, "b", ⲆⵠⲆ, 33, 304, 0],
		[1, "t", 2, 35, 304, 0],
		[ᐃⲆⲆ, "t", 5, 34, 304, ⵠⵠⵠ],
		[ⵠᐃᐃ, "b", ⵠⵠΔⵠ, 36, 304, 0],
		[ᐃⲆⲆ, "t", ⵠᐃⲆᐃ, 37, 304, 0],
		[ⲆⵠⲆ, "t", 1, 38, 304, ⵠⵠⵠ],
		[1, "b", ⲆⵠⲆ, 40, 303, 0],
		[ⵠᐃᐃ, "t", ⲆⲆΔΔ, 39, 303, 0],
		[1, "t", 3, 42, 304, 0],
		[ⲆⲆⵠ, "t", 5, 38, 303, ⲆⲆᐃ],
		[1, "t", 5, 39, 304, ᐃⲆΔ],
		[ⲆⵠⲆ, "t", ⵠⲆⲆⵠ, 41, 303, 0],
		[ΔΔⵠ, "t", 4, 41, 304, 0],
		[ᐃⲆⲆ, "t", ΔΔⲆΔ, 44, 303, 0],
		[ΔΔⵠ, "b", 2, 40, 304, ⲆⲆᐃ],
		[1, "b", 2, 43, 303, ᐃⲆΔ],
		[1, "t", ΔΔⵠ, 42, 303, 0],
		[1, "t", 1, 43, 304, ⲆⲆᐃ],
		[1, "t", ΔΔⵠⵠ, 44, 304, 0],
		[ᐃⲆⲆ, "b", 1, 45, 303, 0],
		[1, "t", 2, 45, 304, 0],
		[ΔΔⵠ, "t", 2, 46, 303, 0],
		[ⵠᐃᐃ, "t", ᐃⵠⵠⲆ, 47, 303, ⵠⵠᐃ],
		[1, "b", 0, 48, 303, 0],
		[1, "t", ⵠΔⲆᐃ, 49, 303, ⲆⲆᐃ],
		[1, "t", 2, 50, 303, 0],
		[1, "t", 1, 51, 303, 0],
		[1, "t", 4, 52, 303, 0],
		[1, "t", 5, 46, 304, ⵠᐃΔ],
		[ⲆⲆⵠ, "t", ⵠⲆΔᐃ, 47, 304, ᐃⲆΔ],
		[ⲆⵠⲆ, "t", 5, 48, 304, ⲆⲆΔ],
		[Δⵠᐃ, "t", ⲆⲆⵠ, 49, 304, ⵠᐃΔ],
		[ΔΔⵠ, "t", ᐃⵠΔⲆ, 50, 304, 0],
		[ⲆⵠⲆ, "b", 1, 53, 303, 0],
		[ⲆⲆⵠ, "b", 2, 51, 304, 0],
		[ⵠᐃᐃ, "t", 5, 52, 304, ⵠⵠᐃ],
		[1, "t", 3, 53, 304, 0],
		[1, "b", ᐃᐃⲆⵠ, 54, 303, 0],
		[ⲆⵠⲆ, "t", ⵠᐃⲆᐃ, 54, 304, ⵠⵠⵠ],
		[ⲆⵠⲆ, "t", 5, 55, 303, ᐃⲆᐃ],
		[ΔΔⵠ, "t", 3, 56, 303, 0],
		[ⲆⵠⲆ, "t", 4, 57, 303, 0],
		[ⲆⲆⵠ, "t", Δᐃᐃⵠ, 58, 303, ⵠᐃΔ],
		[1, "b", 1, 55, 304, 0],
		[ᐃⲆⲆ, "t", ⵠⲆΔᐃ, 56, 304, ⵠⵠᐃ],
		[1, "t", Ⲇⵠᐃ, 57, 304, ⲆⲆᐃ],
		[ΔΔⵠ, "t", ⵠᐃⵠⲆ, 58, 304, ⵠᐃΔ],
		[ⲆⲆⵠ, "t", ΔᐃΔⲆ, 63, 304, 0],
		[1, "t", ⲆⲆΔΔ, 59, 303, ⵠᐃⵠ],
		[1, "t", 4, 59, 304, ᐃⲆΔ],
		[1, "t", Δᐃᐃⵠ, 60, 303, 0],
		[ΔΔⵠ, "t", ⲆⲆᐃ, 60, 304, ⵠᐃⵠ],
		[1, "t", 0, 66, 303, 0],
		[1, "t", 0, 70, 304, 0],
		[1, "t", ⲆΔⲆⲆ, 61, 304, Ⲇⵠᐃ],
		[ΔΔⵠ, "t", 3, 67, 303, ⵠᐃⵠ],
		[ⲆⵠⲆ, "t", ⲆΔⲆᐃ, 73, 304, 0],
		[1, "t", 3, 76, 303, 0],
		[ⲆⲆⵠ, "t", ⵠᐃᐃΔ, 78, 304, ᐃⲆΔ],
		[ⲆⵠⲆ, "t", Δⵠᐃ, 61, 303, 0],
		[1, "t", 1, 73, 303, 0],
		[ⲆⵠⲆ, "t", ⲆⵠⲆ, 79, 303, 0],
		[Δⵠᐃ, "b", ⵠⵠᐃⲆ, 62, 304, ⵠⵠⵠ],
		[ᐃⲆⲆ, "b", 2, 70, 303, ⵠⵠᐃ],
		[Δⵠᐃ, "t", ⲆⵠⲆᐃ, 62, 303, ⵠᐃⵠ],
		[ⲆⵠⲆ, "t", 5, 68, 303, ᐃⲆΔ],
		[ΔΔⵠ, "t", 5, 71, 304, ⵠⵠⵠ],
		[1, "t", ⵠⲆⲆⵠ, 77, 304, ᐃⲆΔ],
		[1, "t", 5, 75, 303, 0],
		[1, "t", 5, 64, 304, 0],
		[ΔΔⵠ, "t", 5, 65, 303, ⵠᐃΔ],
		[ⵠᐃᐃ, "t", 5, 80, 303, 0],
		[ⵠᐃᐃ, "t", 1, 76, 304, 0],
		[1, "t", ⲆⲆΔΔ, 63, 303, 0],
		[1, "t", ⵠᐃⲆᐃ, 82, 304, 0],
		[ᐃⲆⲆ, "b", ᐃⵠΔⲆ, 65, 304, 0],
		[1, "t", ΔΔⵠ, 64, 303, ⲆⲆᐃ],
		[1, "t", 1, 68, 304, 0],
		[1, "t", ⵠⲆΔᐃ, 69, 304, ⵠᐃΔ],
		[1, "t", ΔⲆΔⲆ, 69, 303, 0],
		[ΔΔⵠ, "t", ⵠΔⲆᐃ, 66, 304, 0],
		[1, "t", ⵠⵠᐃ, 67, 304, Δⵠⵠ],
		[ᐃⲆⲆ, "b", ᐃⲆⵠᐃ, 72, 304, 0],
		[ᐃⲆⲆ, "t", 0, 71, 303, 0],
		[ⲆⲆⵠ, "t", 4, 72, 303, ᐃⲆᐃ],
		[1, "t", ⵠΔᐃⲆ, 74, 304, 0],
		[1, "t", ⵠⵠᐃⲆ, 74, 303, 0],
		[ΔΔⵠ, "t", 3, 75, 304, 0],
		[1, "t", ⵠᐃᐃ, 77, 303, ᐃⲆΔ],
		[Δⵠᐃ, "t", ΔⲆΔⲆ, 78, 303, ⲆⲆΔ],
		[ⵠᐃᐃ, "t", 4, 79, 304, ᐃⲆΔ],
		[Δⵠᐃ, "t", 2, 80, 304, 0],
		[Δⵠᐃ, "b", ⲆⵠⲆ, 81, 304, 0],
		[Δⵠᐃ, "t", ᐃⲆⵠᐃ, 81, 303, 0],
		[1, "t", ᐃⵠΔⵠ, 82, 303, ⵠⵠᐃ],
		[1, "t", 1, 83, 303, 0],
		[ΔΔⵠ, "b", ᐃᐃⲆⵠ, 83, 304, Ⲇⵠᐃ],
		[ΔΔⵠ, "t", 1, 84, 304, 0],
		[1, "t", ΔⲆⲆⲆ, 84, 303, ⵠⵠⵠ],
		[ⲆⲆⵠ, "t", ⵠⲆⲆⲆ, 85, 304, ᐃⲆᐃ],
		[1, "t", ⵠⵠⲆⲆ, 85, 303, Ⲇⵠᐃ],
		[1, "b", ᐃᐃⲆⵠ, 86, 304, ⲆⲆΔ],
		[ᐃⲆⲆ, "t", ⲆⲆⵠ, 86, 303, ᐃⲆᐃ],
		[Δⵠᐃ, "b", 3, 87, 303, Ⲇⵠᐃ],
		[ᐃⲆⲆ, "t", ΔⲆⲆⲆ, 87, 304, Δⵠⵠ],
		[ⵠᐃᐃ, "t", ⵠΔᐃⲆ, 88, 303, 0],
		[1, "t", 0, 88, 304, 0],
		[1, "b", 1, 89, 303, 0],
		[1, "t", 3, 89, 304, Ⲇⵠᐃ],
		[1, "t", ⲆⲆΔΔ, 90, 303, Δⵠⵠ],
		[1, "t", 4, 90, 304, 0],
		[ⲆⵠⲆ, "t", ⲆⲆⲆΔ, 91, 303, ⵠⵠⵠ],
		[ⲆⵠⲆ, "t", ⵠᐃⵠ, 91, 304, 0],
		[1, "b", ⵠⵠΔⵠ, 92, 303, ⵠᐃΔ],
		[1, "t", 4, 92, 304, 0],
		[Δⵠᐃ, "t", ᐃⵠΔⵠ, 93, 303, Ⲇⵠᐃ],
		[ⵠᐃᐃ, "t", ⵠᐃΔ, 93, 304, ᐃⲆᐃ],
		[ⲆⲆⵠ, "b", 3, 94, 303, Ⲇⵠᐃ],
		[ⲆⲆⵠ, "b", 0, 94, 304, 0],
		[ᐃⲆⲆ, "b", ᐃⲆᐃ, 95, 303, 0],
		[ⲆⲆⵠ, "t", 2, 95, 304, 0],
		[1, "f", 1, ᐃᐃᐃᐃ, 151, 1],
		[ⲆⲆⵠ, "f", ⵠⲆΔᐃ, ᐃᐃᐃᐃ, 153, ⵠᐃᐃ],
		[ᐃⲆⲆ, "f", ᐃⲆΔ, ΔΔⵠⵠ, 152, 1],
		[1, "f", 0, ⵠⲆⲆⵠ, 147, Δⵠᐃ],
		[1, "f", ⵠᐃⵠ, ⵠⲆⲆⵠ, 144, 1],
		[1, "f", 0, 5, 140, 1],
		[ⲆⲆⵠ, "f", Δⵠᐃ, 5, 149, ᐃⲆⲆ],
		[ΔΔⵠ, "f", ⵠᐃᐃ, ⵠⲆⲆⵠ, 146, ⲆⵠⲆ],
		[ⵠᐃᐃ, "f", ᐃⲆⲆ, ⲆⵠⲆᐃ, 143, 1],
		[1, "f", 1, 5, 141, ΔΔⵠ],
		[Δⵠᐃ, "f", ⵠⲆΔᐃ, ᐃⵠΔⵠ, 150, ᐃⲆⲆ],
		[ⲆⲆⵠ, "f", 2, ⵠᐃⲆᐃ, 148, 1],
		[1, "f", 2, 5, 145, ⲆⵠⲆ],
		[ᐃⲆⲆ, "f", ⵠⵠΔⵠ, ΔΔⵠⵠ, 142, 1],
		[ⵠᐃᐃ, "f", 2, ⲆⵠⲆᐃ, 139, 1],
		[1, "f", 2, ⵠⲆⲆⵠ, 136, 1],
		[Δⵠᐃ, "f", ᐃⲆⵠᐃ, ⲆⵠⲆᐃ, 133, 1],
		[1, "f", 2, ᐃⵠΔⵠ, 131, 1],
		[1, "f", ᐃᐃⲆⵠ, ΔΔⵠⵠ, 127, ⵠᐃᐃ],
		[1, "f", ⵠⵠΔⵠ, 5, 125, ᐃⲆⲆ],
		[1, "f", ΔΔⵠ, 5, 138, 1],
		[ΔΔⵠ, "f", ⵠᐃᐃ, 5, 135, Δⵠᐃ],
		[1, "f", ᐃⲆⲆ, 5, 132, ΔΔⵠ],
		[ᐃⲆⲆ, "f", ΔΔⵠ, 5, 130, 1],
		[1, "f", ΔΔⵠ, 5, 128, 1],
		[1, "f", ⲆⲆⵠ, 5, 126, 1],
		[1, "f", 1, ⵠΔⲆᐃ, 124, 1],
		[1, "f", 0, ⵠᐃⲆᐃ, 129, 1],
		[ΔΔⵠ, "f", 0, ⲆⵠⲆᐃ, 134, ΔΔⵠ],
		[1, "f", 0, ⵠⲆⲆⲆ, 137, 1],
		[ⵠᐃᐃ, "f", ⲆⲆΔ, ⵠⲆⲆⵠ, 123, 1],
		[ⲆⵠⲆ, "f", 1, 5, 122, ⲆⲆⵠ],
		[ᐃⲆⲆ, "f", 1, Δᐃᐃⵠ, 120, 1],
		[1, "f", Δⵠᐃ, ᐃⵠΔⵠ, 117, ΔΔⵠ],
		[ⲆⵠⲆ, "f", 1, 5, 115, 1],
		[Δⵠᐃ, "f", ΔΔⵠ, ᐃⵠΔⵠ, 111, ΔΔⵠ],
		[ΔΔⵠ, "f", ⵠᐃᐃ, ΔΔⵠⵠ, 108, 1],
		[1, "f", 2, 5, 121, ᐃⲆⲆ],
		[ᐃⲆⲆ, "f", 2, ⵠΔⲆᐃ, 118, ⵠᐃᐃ],
		[1, "f", 2, Δᐃᐃⵠ, 116, 1],
		[ᐃⲆⲆ, "f", ᐃⵠΔⲆ, 5, 113, ⵠᐃᐃ],
		[ⵠᐃᐃ, "f", 2, 5, 110, 1],
		[ᐃⲆⲆ, "f", ⵠⵠᐃ, ᐃᐃᐃᐃ, 119, 1],
		[1, "f", 0, 5, 114, ⵠᐃᐃ],
		[1, "f", 0, 5, 112, ⲆⵠⲆ],
		[1, "f", ⵠⵠᐃ, ⵠΔⲆᐃ, 109, 1],
		[1, "f", 1, 5, 106, ⵠᐃᐃ],
		[1, "f", 1, 5, 103, 1],
		[ⲆⵠⲆ, "f", ⲆⵠⲆ, ᐃⵠΔⵠ, ⲆⵠΔΔΔ, ⲆⲆⵠ],
		[ⲆⲆⵠ, "f", 1, ΔⲆⵠⵠ, 97, ⵠᐃᐃ],
		[1, "f", 1, 5, 95, ΔΔⵠ],
		[ⲆⲆⵠ, "f", ⵠⲆΔᐃ, 5, 107, ⲆⲆⵠ],
		[ⵠᐃᐃ, "f", ᐃᐃⲆⵠ, ⵠⲆⲆⲆ, 105, Δⵠᐃ],
		[ᐃⲆⲆ, "f", ⵠⵠΔⵠ, ΔΔⵠⵠ, 102, 1],
		[1, "f", 2, 5, 99, ᐃⲆⲆ],
		[1, "f", 2, ΔΔⵠⵠ, 96, 1],
		[1, "f", ᐃᐃⲆⵠ, ⵠΔⲆᐃ, 94, 1],
		[1, "f", 0, ⵠⲆⲆⲆ, 104, 1],
		[1, "f", ᐃⲆᐃ, 5, 101, Δⵠᐃ],
		[1, "f", ⲆⲆΔ, Δᐃᐃⵠ, 98, Δⵠᐃ],
		[1, "f", 0, ⵠⲆⲆⵠ, 93, ᐃⲆⲆ],
		[1, "f", 1, 5, 92, 1],
		[1, "f", 1, ⵠⲆⲆⵠ, 89, ΔΔⵠ],
		[ᐃⲆⲆ, "f", ΔΔⵠ, ⵠⲆⲆⲆ, 86, Δⵠᐃ],
		[ⲆⵠⲆ, "f", 1, 5, 83, Δⵠᐃ],
		[1, "f", 1, 5, 80, 1],
		[ᐃⲆⲆ, "f", 1, ᐃⵠΔⵠ, 78, 1],
		[ΔΔⵠ, "f", 2, ⵠⲆⲆⵠ, 90, ⲆⵠⲆ],
		[1, "f", ⵠⵠΔⵠ, 5, 88, 1],
		[ⲆⵠⲆ, "f", 2, ᐃᐃᐃᐃ, 85, ΔΔⵠ],
		[1, "f", ⵠⵠΔⵠ, ΔΔⵠⵠ, 82, 1],
		[1, "f", 2, ΔΔⵠⵠ, 79, 1],
		[1, "f", 2, ⵠᐃⲆᐃ, 77, 1],
		[1, "f", ᐃᐃⲆⵠ, 5, 75, ⲆⵠⲆ],
		[ⲆⵠⲆ, "f", 2, Δᐃᐃⵠ, 72, 1],
		[1, "f", ⵠⵠᐃ, 5, 91, 1],
		[ΔΔⵠ, "f", 0, 5, 87, 1],
		[ⵠᐃᐃ, "f", 0, ⲆⵠⲆᐃ, 84, 1],
		[ΔΔⵠ, "f", 0, 5, 81, Δⵠᐃ],
		[1, "f", ⵠⵠⵠ, ΔⲆⵠⵠ, 76, ᐃⲆⲆ],
		[Δⵠᐃ, "f", Δⵠⵠ, 5, 74, ⲆⵠⲆ],
		[1, "f", 1, ⵠΔⲆᐃ, 73, ΔΔⵠ],
		[1, "f", ΔΔⵠ, ⵠᐃⲆᐃ, 71, 1],
		[1, "f", Δⵠᐃ, ᐃᐃᐃᐃ, 68, 1],
		[1, "f", ⲆⲆⵠ, 5, 66, 1],
		[ⲆⲆⵠ, "f", ⲆⲆⵠ, ᐃᐃᐃᐃ, 62, ΔΔⵠ],
		[ⵠᐃᐃ, "f", ⲆⲆⵠ, 5, 59, ΔΔⵠ],
		[1, "f", 1, 5, 56, ᐃⲆⲆ],
		[1, "f", 1, ΔΔⵠⵠ, 53, 1],
		[1, "f", ᐃⲆⲆ, ᐃⵠΔⵠ, 50, ᐃⲆⲆ],
		[1, "f", ᐃⵠΔⲆ, ᐃᐃᐃᐃ, 70, 1],
		[1, "f", ⵠⵠᐃⲆ, ᐃᐃᐃᐃ, 67, 1],
		[ⲆⵠⲆ, "f", ᐃᐃⲆⵠ, Δᐃᐃⵠ, 65, 1],
		[1, "f", 2, ᐃᐃᐃᐃ, 63, 1],
		[1, "f", ᐃᐃⲆⵠ, ⵠᐃⲆᐃ, 60, 1],
		[Δⵠᐃ, "f", 2, ⵠⲆⲆⵠ, 57, 1],
		[ᐃⲆⲆ, "f", 2, ⲆⵠⲆᐃ, 54, ⲆⵠⲆ],
		[1, "f", ⵠⵠᐃⲆ, 5, 51, ᐃⲆⲆ],
		[ⲆⲆⵠ, "f", 0, 5, 69, ᐃⲆⲆ],
		[1, "f", 0, 5, 64, 1],
		[ⵠᐃᐃ, "f", ⲆⲆᐃ, 5, 61, ⲆⲆⵠ],
		[1, "f", 0, 5, 58, ⵠᐃᐃ],
		[1, "f", 0, 5, 55, ⲆⵠⲆ],
		[ᐃⲆⲆ, "f", ⲆⲆΔ, 5, 52, ⵠᐃᐃ],
		[1, "f", 0, 5, 49, ᐃⲆⲆ],
		[Δⵠᐃ, "f", ⵠᐃⵠ, 5, 45, 1],
		[1, "f", ᐃⲆᐃ, Δᐃᐃⵠ, 42, ΔΔⵠ],
		[1, "f", ⵠⵠⵠ, ΔΔⵠⵠ, 38, 1],
		[ⲆⲆⵠ, "f", ⲆⲆΔ, 5, 34, ΔΔⵠ],
		[1, "f", Δⵠⵠ, 5, 31, Δⵠᐃ],
		[ⵠᐃᐃ, "f", 1, 5, 48, 1],
		[ⲆⵠⲆ, "f", ΔΔⵠ, 5, 44, ⲆⲆⵠ],
		[1, "f", ΔΔⵠ, 5, 41, ᐃⲆⲆ],
		[Δⵠᐃ, "f", ⵠᐃᐃ, 5, 37, Δⵠᐃ],
		[1, "f", 1, 5, 33, 1],
		[1, "f", 1, 5, 29, ⵠᐃᐃ],
		[1, "f", 2, 5, 30, 1],
		[Δⵠᐃ, "f", ⵠⵠΔⵠ, 5, 32, Δⵠᐃ],
		[ⵠᐃᐃ, "f", 2, 5, 35, Δⵠᐃ],
		[ⲆⵠⲆ, "f", 2, ⵠΔⲆᐃ, 39, ΔΔⵠ],
		[Δⵠᐃ, "f", ᐃⲆⵠᐃ, ⵠΔⲆᐃ, 46, ⲆⲆⵠ],
		[ΔΔⵠ, "f", 2, 5, 43, 1],
		[1, "f", ⵠᐃᐃ, 5, 47, 1],
		[1, "f", Ⲇⵠᐃ, 5, 40, 1],
		[ΔΔⵠ, "f", 0, ⲆⵠⲆᐃ, 36, 1],
		[1, "f", 0, 5, 28, 1],
		[1, "f", ΔΔⵠ, ⵠᐃⲆᐃ, 25, 1],
		[1, "f", 1, 5, 22, 1],
		[ⲆⵠⲆ, "f", ⲆⲆⵠ, ⲆⵠⲆᐃ, ⲆⲆⲆⵠⵠ, ⵠᐃᐃ],
		[ΔΔⵠ, "f", ⲆⵠⲆ, ᐃᐃᐃᐃ, ⵠᐃᐃⵠⵠ, 1],
		[ᐃⲆⲆ, "f", 1, ⵠⲆⲆⵠ, ΔΔΔᐃᐃ, ⵠᐃᐃ],
		[ΔΔⵠ, "f", 1, ⲆⵠⲆᐃ, ΔΔⲆΔΔ, 1],
		[ⵠᐃᐃ, "f", ⵠⲆΔᐃ, 5, 27, Δⵠᐃ],
		[ΔΔⵠ, "f", 2, 5, 24, 1],
		[1, "f", 2, 5, 21, ⵠᐃᐃ],
		[ᐃⲆⲆ, "f", 2, ᐃᐃᐃᐃ, 19, ᐃⲆⲆ],
		[ⲆⲆⵠ, "f", 2, 5, 15, ⵠᐃᐃ],
		[ᐃⲆⲆ, "f", 2, 5, 12, ΔΔⵠ],
		[1, "f", 2, 5, ⲆⲆⵠⵠᐃ, 1],
		[1, "f", 0, ΔⲆⵠⵠ, 26, ᐃⲆⲆ],
		[ΔΔⵠ, "f", ⵠᐃⵠ, ᐃᐃᐃᐃ, 23, 1],
		[Δⵠᐃ, "f", 0, 5, ⲆⲆᐃⲆⲆⲆⵠ, Δⵠᐃ],
		[1, "f", ⲆⲆᐃ, 5, ᐃⵠΔⲆⲆ, 1],
		[1, "f", ᐃⲆᐃ, ⲆⵠⲆᐃ, 17, ⵠᐃᐃ],
		[1, "f", 1, ΔΔⵠⵠ, 18, ⲆⲆⵠ],
		[ⲆⵠⲆ, "f", ⲆⲆⵠ, Δᐃᐃⵠ, 8, 1],
		[Δⵠᐃ, "f", Ⲇⵠᐃ, ⲆⵠⲆᐃ, 7, 1],
		[1, "f", 1, 5, 6, ⵠᐃᐃ],
		[ⲆⵠⲆ, "f", 0, ⵠΔⲆᐃ, ΔⲆⵠⵠ, ⲆⲆⵠ],
		[1, "f", 1, 6, ΔⲆⵠⵠ, ⵠᐃᐃ],
		[ⵠᐃᐃ, "f", ⵠⵠΔⵠ, ⵠΔⵠᐃⲆ, 5, ΔΔⵠ],
		[Δⵠᐃ, "f", 0, 8, ⵠⲆⲆⵠ, 1],
		[ⵠᐃᐃ, "f", ΔΔⵠ, ᐃΔⵠⲆⲆ, 5, 1],
		[ᐃⲆⲆ, "f", 1, 12, ⵠΔⲆᐃ, ⲆⲆⵠ],
		[Δⵠᐃ, "f", ᐃⲆⲆ, ⲆⲆⲆΔⵠ, Δᐃᐃⵠ, 1],
		[1, "f", 1, ⵠⲆΔΔⵠ, ⲆⵠⲆᐃ, 1],
		[1, "f", 1, 22, 5, ᐃⲆⲆ],
		[1, "f", ᐃⲆⲆ, 26, Δᐃᐃⵠ, ΔΔⵠ],
		[ᐃⲆⲆ, "f", 2, ᐃᐃᐃⲆⵠ, ᐃⵠΔⵠ, ⲆⲆⵠ],
		[1, "f", ⵠⵠΔⵠ, 13, 5, 1],
		[Δⵠᐃ, "f", 2, ⲆⵠᐃΔΔ, ⲆⵠⲆᐃ, 1],
		[1, "f", ⵠⵠᐃⲆ, 18, ⵠⲆⲆⵠ, 1],
		[1, "f", ⵠⲆΔᐃ, 21, ⵠᐃⲆᐃ, 1],
		[ⲆⵠⲆ, "f", 2, 23, 5, Δⵠᐃ],
		[1, "f", 2, 25, 5, ᐃⲆⲆ],
		[1, "f", 2, 27, 5, 1],
		[ⲆⵠⲆ, "f", 0, 11, ⵠΔⲆᐃ, 1],
		[ⲆⲆⵠ, "f", 0, ⲆⲆᐃⲆⲆⲆⵠ, 5, 1],
		[1, "f", ⲆⲆᐃ, ⵠⲆⵠⲆᐃ, ᐃᐃᐃᐃ, ᐃⲆⲆ],
		[Δⵠᐃ, "f", 0, 24, ᐃᐃᐃᐃ, ᐃⲆⲆ],
		[ΔΔⵠ, "f", 0, 28, ⵠⲆⲆⲆ, 1],
		[ΔΔⵠ, "f", 1, ⵠⲆΔⲆⲆ, ⵠᐃⲆᐃ, ⲆⵠⲆ],
		[1, "f", 1, 29, 5, ⲆⵠⲆ],
		[ⲆⲆⵠ, "f", ᐃⲆⲆ, 32, 5, 1],
		[1, "f", 1, 35, ⵠⲆⲆⲆ, 1],
		[1, "f", ⲆⵠⲆ, 38, ⵠΔⲆᐃ, 1],
		[ΔΔⵠ, "f", 1, 41, Δᐃᐃⵠ, 1],
		[1, "f", ⵠᐃᐃ, 45, ⵠⲆⲆⲆ, ΔΔⵠ],
		[ΔΔⵠ, "f", ⵠⵠᐃⲆ, 30, ⵠᐃⲆᐃ, ΔΔⵠ],
		[1, "f", ᐃᐃⲆⵠ, 33, ⵠⲆⲆⵠ, ⲆⲆⵠ],
		[1, "f", 2, 36, ⵠΔⲆᐃ, Δⵠᐃ],
		[1, "f", ᐃⲆⵠᐃ, 39, 5, ⲆⵠⲆ],
		[ⲆⲆⵠ, "f", ᐃⲆⵠᐃ, 42, 5, ⲆⵠⲆ],
		[1, "f", 2, 44, 5, 1],
		[ⲆⲆⵠ, "f", 2, 46, 5, 1],
		[1, "f", ⵠⵠᐃ, 43, Δᐃᐃⵠ, ᐃⲆⲆ],
		[ᐃⲆⲆ, "f", 0, 40, ⵠΔⲆᐃ, Δⵠᐃ],
		[1, "f", 0, 37, 5, ⲆⵠⲆ],
		[1, "f", ⲆⲆΔ, 34, 5, ΔΔⵠ],
		[1, "f", Ⲇⵠᐃ, 31, ⵠᐃⲆᐃ, ΔΔⵠ],
		[1, "f", Δⵠⵠ, 47, 5, 1],
		[1, "f", ⵠᐃᐃ, 48, 5, ⲆⵠⲆ],
		[Δⵠᐃ, "f", ⵠᐃᐃ, 51, ᐃᐃᐃᐃ, 1],
		[ⲆⲆⵠ, "f", 1, 53, ⵠΔⲆᐃ, ΔΔⵠ],
		[1, "f", ᐃⲆⲆ, 57, 5, 1],
		[1, "f", ΔΔⵠ, 60, ΔΔⵠⵠ, 1],
		[ΔΔⵠ, "f", ⲆⲆⵠ, 63, 5, Δⵠᐃ],
		[1, "f", ᐃⲆⲆ, 65, 5, 1],
		[ⲆⵠⲆ, "f", 2, 64, 5, ⵠᐃᐃ],
		[1, "f", 2, 62, ⲆⵠⲆᐃ, 1],
		[ⵠᐃᐃ, "f", 2, 59, Δᐃᐃⵠ, 1],
		[Δⵠᐃ, "f", ⵠⵠᐃⲆ, 56, 5, ΔΔⵠ],
		[ⲆⲆⵠ, "f", 2, 52, 5, ᐃⲆⲆ],
		[ᐃⲆⲆ, "f", ⵠⲆΔᐃ, 49, 5, ⵠᐃᐃ],
		[ΔΔⵠ, "f", ᐃᐃⲆⵠ, 54, ΔⲆⵠⵠ, ΔΔⵠ],
		[Δⵠᐃ, "f", 0, 50, ΔⲆⵠⵠ, 1],
		[ⵠᐃᐃ, "f", 0, 55, 5, ⵠᐃᐃ],
		[1, "f", 0, 58, ⵠᐃⲆᐃ, 1],
		[ⲆⲆⵠ, "f", 0, 61, ⲆⵠⲆᐃ, ⲆⲆⵠ],
		[ⲆⲆⵠ, "f", 0, 66, 5, 1],
		[ⲆⲆⵠ, "f", 1, 67, ΔⲆⵠⵠ, 1],
		[1, "f", ⲆⲆⵠ, 70, 5, ⲆⲆⵠ],
		[ᐃⲆⲆ, "f", 1, 72, 5, 1],
		[1, "f", ⲆⵠⲆ, 75, 5, 1],
		[ⲆⵠⲆ, "f", ⵠᐃᐃ, 79, ⵠⲆⲆⲆ, ᐃⲆⲆ],
		[1, "f", ⵠⲆΔᐃ, 68, ⵠⲆⲆⲆ, 1],
		[1, "f", ⵠⲆΔᐃ, 71, 5, ⲆⵠⲆ],
		[1, "f", ᐃᐃⲆⵠ, 74, ⲆⵠⲆᐃ, 1],
		[1, "f", ⵠⵠΔⵠ, 76, 5, ΔΔⵠ],
		[1, "f", 2, 78, 5, 1],
		[ᐃⲆⲆ, "f", ᐃⲆΔ, 69, 5, ΔΔⵠ],
		[ⲆⲆⵠ, "f", ⲆⲆΔ, 73, ⵠᐃⲆᐃ, ⵠᐃᐃ],
		[1, "f", 0, 77, Δᐃᐃⵠ, ⵠᐃᐃ],
		[1, "f", 0, 80, ᐃᐃᐃᐃ, 1],
		[ᐃⲆⲆ, "f", 1, 81, 5, 1],
		[Δⵠᐃ, "f", ⲆⲆⵠ, 84, ᐃⵠΔⵠ, ΔΔⵠ],
		[1, "f", ᐃⲆⲆ, 87, ΔⲆⵠⵠ, 1],
		[1, "f", ⲆⲆⵠ, 89, 5, ᐃⲆⲆ],
		[ᐃⲆⲆ, "f", 1, 92, ⵠⲆⲆⵠ, 1],
		[ᐃⲆⲆ, "f", ΔΔⵠ, 94, ⵠΔⲆᐃ, 1],
		[ⲆⲆⵠ, "f", ⵠⵠⵠ, 82, ΔⲆⵠⵠ, Δⵠᐃ],
		[1, "f", ⵠⵠΔⵠ, 83, 5, ⵠᐃᐃ],
		[ⲆⲆⵠ, "f", 2, 85, ⵠⲆⲆⲆ, 1],
		[ⲆⲆⵠ, "f", 2, 88, ⵠⲆⲆⵠ, 1],
		[1, "f", 2, 90, 5, 1],
		[1, "f", 2, 93, 5, ⲆⵠⲆ],
		[ⵠᐃᐃ, "f", ᐃⲆⵠᐃ, 95, ⵠⲆⲆⲆ, ᐃⲆⲆ],
		[Δⵠᐃ, "f", 0, 86, ⵠᐃⲆᐃ, ⲆⲆⵠ],
		[1, "f", ᐃⲆᐃ, 91, 5, Δⵠᐃ],
		[Δⵠᐃ, "f", ⵠⵠΔⵠ, 6, 153, ⲆⲆⵠ],
		[ⵠᐃᐃ, "f", ᐃⲆⲆ, 6, 152, ⲆⵠⲆ],
		[ⲆⵠⲆ, "t", Δⵠᐃ, 93, 301, 0],
		[ⲆⲆⵠ, "t", ⲆⵠⵠⲆ, 94, 302, ⲆⲆΔ],
		[ⲆⲆⵠ, "t", 5, 95, 302, Ⲇⵠᐃ],
		[1, "t", ⲆⵠⲆᐃ, 93, 302, 0],
		[1, "b", 3, 92, 302, ⵠⵠⵠ],
		[1, "t", 1, 91, 302, Δⵠⵠ],
		[ΔΔⵠ, "t", 5, 90, 302, Ⲇⵠᐃ],
		[1, "b", ᐃᐃⲆⵠ, 92, 301, Δⵠⵠ],
		[1, "t", 1, 91, 301, ⲆⲆΔ],
		[1, "t", 2, 90, 301, 0],
		[ⲆⵠⲆ, "b", 2, 89, 302, ⵠᐃΔ],
		[1, "t", 4, 89, 301, 0],
		[Δⵠᐃ, "t", 1, 88, 302, 0],
		[ⲆⲆⵠ, "t", ᐃᐃⲆⵠ, 88, 301, ᐃⲆΔ],
		[ⲆⲆⵠ, "t", ⵠⲆᐃΔ, 87, 302, ⵠᐃⵠ],
		[ⲆⵠⲆ, "t", ᐃⵠⵠⲆ, 87, 299, 0],
		[1, "t", ΔⲆⲆⲆ, 86, 302, 0],
		[1, "t", ⵠᐃᐃ, 85, 302, ⲆⲆᐃ],
		[ΔΔⵠ, "t", ⵠⲆⲆⵠ, 85, 301, ᐃⲆΔ],
		[1, "b", ᐃⵠΔⲆ, 84, 302, ⵠᐃⵠ],
		[ⵠᐃᐃ, "t", 5, 83, 302, 0],
		[ᐃⲆⲆ, "t", ⵠᐃᐃ, 82, 302, Δⵠⵠ],
		[1, "t", 5, 81, 302, ⵠⵠⵠ],
		[1, "t", ᐃⲆⵠᐃ, 80, 302, 0],
		[ⲆⲆⵠ, "t", ⵠΔᐃⲆ, 79, 302, 0],
		[1, "t", ᐃᐃⲆⵠ, 78, 302, 0],
		[1, "b", 1, 77, 302, 0],
		[1, "b", ᐃⲆⵠᐃ, 76, 302, ⲆⲆᐃ],
		[ⵠᐃᐃ, "t", ⵠⵠΔⵠ, 75, 302, ⵠᐃΔ],
		[1, "t", 4, 74, 302, Δⵠⵠ],
		[1, "b", 1, 73, 302, 0],
		[Δⵠᐃ, "t", 2, 72, 302, ⲆⲆΔ],
		[ⲆⵠⲆ, "t", ᐃⵠⵠⲆ, 71, 302, 0],
		[ⲆⲆⵠ, "b", ⲆⲆΔΔ, 70, 302, ⵠᐃΔ],
		[ⲆⲆⵠ, "t", 1, 69, 302, ⲆⲆΔ],
		[1, "t", 2, 68, 302, 0],
		[ΔΔⵠ, "t", ⵠⲆⲆⵠ, 67, 302, 0],
		[1, "b", 1, 66, 302, 0],
		[1, "t", 2, 65, 302, 0],
		[1, "t", ᐃⵠⵠⲆ, 64, 302, Δⵠⵠ],
		[ⲆⵠⲆ, "b", 3, 63, 302, 0],
		[1, "t", 5, 62, 302, ⵠᐃΔ],
		[1, "b", 1, 61, 302, ⲆⲆᐃ],
		[ⲆⵠⲆ, "t", 3, 60, 302, ⵠᐃⵠ],
		[ᐃⲆⲆ, "t", ΔⲆⲆⲆ, 59, 302, 0],
		[1, "b", 2, 58, 302, 0],
		[1, "t", 5, 57, 302, 0],
		[1, "t", ΔΔⵠ, 56, 302, 0],
		[ⵠᐃᐃ, "t", 3, 55, 302, ⵠᐃΔ],
		[1, "t", 4, 54, 302, ⵠⵠᐃ],
		[1, "t", 1, 53, 302, 0],
		[Δⵠᐃ, "t", ⵠΔⲆᐃ, 52, 302, 0],
		[1, "t", 2, 51, 302, ⵠⵠⵠ],
		[Δⵠᐃ, "t", ΔⲆΔⲆ, 50, 302, 0],
		[1, "t", ⵠⵠᐃⲆ, 49, 302, 0],
		[ᐃⲆⲆ, "b", 1, 48, 302, 0],
		[1, "t", ⵠᐃⵠⲆ, 47, 302, Ⲇⵠᐃ],
		[Δⵠᐃ, "t", 4, 46, 302, 0],
		[1, "t", ΔΔⵠ, 45, 302, 0],
		[1, "t", ᐃⲆⵠᐃ, 44, 302, Ⲇⵠᐃ],
		[1, "t", Δᐃᐃⵠ, 43, 302, ⵠⵠⵠ],
		[1, "t", 2, 42, 302, ᐃⲆᐃ],
		[1, "t", ΔΔⵠ, 41, 302, ⲆⲆΔ],
		[1, "t", 4, 40, 302, ⵠⵠᐃ],
		[ΔΔⵠ, "b", ᐃⵠΔⲆ, 39, 302, ⵠⵠⵠ],
		[1, "t", ⵠⲆⲆⲆ, 38, 302, ⲆⲆᐃ],
		[1, "t", 1, 37, 302, ⵠᐃΔ],
		[ᐃⲆⲆ, "t", ⵠⲆΔᐃ, 36, 302, 0],
		[1, "t", ΔΔⵠⵠ, 35, 302, 0],
		[ⲆⲆⵠ, "t", 0, 34, 302, 0],
		[Δⵠᐃ, "t", 3, 33, 302, Ⲇⵠᐃ],
		[ᐃⲆⲆ, "t", 4, 32, 302, ᐃⲆᐃ],
		[1, "b", ⲆⲆⵠ, 31, 302, ᐃⲆΔ],
		[1, "t", ᐃⲆⵠᐃ, 30, 302, ⲆⲆΔ],
		[ⲆⵠⲆ, "t", ᐃⵠⵠⲆ, 29, 302, 0],
		[1, "t", 2, 28, 302, ⲆⲆΔ],
		[ᐃⲆⲆ, "t", 5, 27, 302, ⲆⲆᐃ],
		[1, "b", 3, 26, 302, 0],
		[ΔΔⵠ, "t", 1, 25, 302, ⵠᐃⵠ],
		[ᐃⲆⲆ, "t", ᐃⵠⵠⲆ, 24, 302, 0],
		[1, "t", ᐃⵠΔⲆ, 23, 302, 0],
		[ⲆⵠⲆ, "t", 1, 22, 302, ⵠᐃⵠ],
		[Δⵠᐃ, "t", 5, 21, 302, ⵠᐃΔ],
		[ᐃⲆⲆ, "t", 2, ⲆⲆⲆⵠⵠ, 302, 0],
		[1, "t", ΔⲆⲆⲆ, 19, 302, ᐃⲆΔ],
		[ΔΔⵠ, "b", 1, 18, 302, 0],
		[1, "t", 5, ⵠⲆΔΔⵠ, 302, 0],
		[ⲆⲆⵠ, "t", 3, 16, 302, 0],
		[1, "t", 1, 15, 302, ⲆⲆΔ],
		[ⵠᐃᐃ, "t", ΔΔⵠⵠ, Δⵠⵠᐃᐃ, 302, 0],
		[1, "t", 3, ΔΔΔᐃᐃ, 302, ⵠⵠⵠ],
		[1, "t", ⲆⲆⲆΔ, ⵠᐃⲆΔⵠ, 302, ⲆⲆΔ],
		[ⵠᐃᐃ, "t", ⲆⲆⵠ, 11, 302, ⵠⵠᐃ],
		[ⵠᐃᐃ, "t", ᐃᐃⲆⵠ, 10, 302, 0],
		[ⵠᐃᐃ, "t", 4, ᐃⲆᐃᐃᐃ, 302, Ⲇⵠᐃ],
		[ΔΔⵠ, "b", 3, ⲆⲆⲆᐃⲆ, 302, 0],
		[1, "t", ⵠⲆⲆⵠ, ᐃΔᐃⵠⲆ, 302, ⵠᐃⵠ],
		[Δⵠᐃ, "t", 5, ⲆΔᐃᐃⲆ, 302, ᐃⲆΔ],
		[ⲆⲆⵠ, "b", ⵠⵠᐃⲆ, ⵠⲆⵠⵠⵠ, 302, Δⵠⵠ],
		[ⵠᐃᐃ, "t", 1, ΔⲆⵠΔᐃ, 301, 0],
		[ⲆⵠⲆ, "t", ΔΔⲆΔ, ⵠⵠⲆⲆⵠ, 300, Ⲇⵠᐃ],
		[ⲆⲆⵠ, "t", 2, ⵠΔΔⵠⲆ, 299, 0],
		[1, "b", ⲆⲆᐃ, ⵠⲆⵠⵠⵠ, 298, Ⲇⵠᐃ],
		[ⲆⲆⵠ, "t", ΔΔⵠⵠ, 6, 297, 0],
		[ⲆⵠⲆ, "t", 2, ⵠⵠⲆᐃⲆ, 296, 0],
		[1, "t", 0, 6, 295, 0],
		[1, "b", 2, 6, 294, ⲆⲆᐃ],
		[1, "t", 5, 6, 293, ⲆⲆΔ],
		[1, "t", ⵠᐃᐃ, 6, 292, 0],
		[1, "b", 0, 6, 291, ᐃⲆᐃ],
		[1, "t", 2, 6, 290, 0],
		[ΔΔⵠ, "t", 5, ᐃⵠⵠᐃⵠ, 289, ⵠᐃΔ],
		[Δⵠᐃ, "t", ⵠᐃᐃ, ⵠⵠⲆᐃⲆ, 288, Δⵠⵠ],
		[ⲆⵠⲆ, "t", ⲆⲆⲆΔ, 6, 287, ⵠⵠᐃ],
		[1, "t", 2, ⲆⲆⲆⵠΔ, 286, ⵠⵠⵠ],
		[1, "t", 5, ⵠΔΔⵠⲆ, 285, 0],
		[1, "t", 2, ⵠⵠⲆᐃⲆ, 284, 0],
		[1, "b", 0, ᐃⲆΔⵠΔ, 283, ᐃⲆΔ],
		[1, "t", 2, 6, 282, 0],
		[1, "t", 5, ⵠⲆⵠⲆⵠ, 281, 0],
		[ΔΔⵠ, "b", 2, ΔⲆⵠΔᐃ, 280, ⵠⵠᐃ],
		[ⵠᐃᐃ, "t", ΔΔⵠⵠ, 6, 279, ⵠⵠⵠ],
		[ⵠᐃᐃ, "t", 1, ΔΔΔᐃΔ, 278, ᐃⲆΔ],
		[1, "t", ΔᐃᐃΔ, 6, 277, 0],
		[ⲆⲆⵠ, "t", 3, 6, 276, 0],
		[ΔΔⵠ, "t", 5, ⵠⵠⲆⲆⵠ, 275, 0],
		[ⲆⵠⲆ, "b", 0, 6, 274, 0],
		[Δⵠᐃ, "t", ⵠⲆⲆⵠ, 6, 273, ᐃⲆᐃ],
		[1, "t", Δⵠᐃ, ⵠΔΔⵠⲆ, 272, 0],
		[1, "t", ΔⲆΔⲆ, ⵠΔᐃᐃ, 271, ⵠᐃⵠ],
		[1, "b", ⵠⵠⲆⲆ, 6, 270, 0],
		[ⲆⲆⵠ, "t", 5, 6, 269, 0],
		[ⲆⵠⲆ, "t", 1, ⵠΔΔⵠⲆ, 268, 0],
		[1, "t", 4, ΔⲆⵠΔᐃ, 267, 0],
		[ⲆⵠⲆ, "t", ⲆⲆⵠ, ⵠⲆⵠⵠⵠ, 266, ⵠⵠⵠ],
		[ΔΔⵠ, "t", 3, ᐃⵠⵠᐃⵠ, 265, ⵠⵠᐃ],
		[ⲆⲆⵠ, "t", ΔᐃᐃΔ, ᐃⵠⵠᐃⵠ, 264, ⵠⵠⵠ],
		[ⲆⲆⵠ, "b", ᐃᐃⲆⵠ, ⵠⵠⲆⲆⵠ, 263, ᐃⲆΔ],
		[1, "t", ⲆⵠⲆᐃ, ΔⲆⵠΔᐃ, 262, 0],
		[1, "t", ⲆⲆΔΔ, ⲆⲆⲆⵠΔ, 261, ⵠᐃⵠ],
		[ⲆⵠⲆ, "t", Δⵠⵠ, 6, 260, 0],
		[ⵠᐃᐃ, "t", 5, 6, 259, ⵠⵠᐃ],
		[1, "t", 1, 6, 258, 0],
		[1, "t", ⲆⵠⵠⲆ, 6, 257, 0],
		[ᐃⲆⲆ, "t", ⵠΔᐃⲆ, ΔⲆⵠΔᐃ, 255, 0],
		[1, "t", ⵠⵠⲆᐃ, ⵠⵠⲆⲆⵠ, 254, 0],
		[1, "t", ⲆⵠⲆᐃ, ⵠΔⵠⵠⲆ, 253, 0],
		[1, "b", ⵠⲆΔᐃ, ⵠΔΔⵠⲆ, 252, 0],
		[1, "t", ⵠⲆⲆⲆ, ⲆⲆⲆⵠΔ, 251, ᐃⲆᐃ],
		[1, "t", ⵠᐃᐃ, 6, 250, ⵠᐃⵠ],
		[ⲆⵠⲆ, "t", 3, 6, 249, 0],
		[1, "t", ΔⲆⲆⲆ, ⵠⲆⵠⲆⵠ, 248, 0],
		[ⲆⲆⵠ, "b", 3, ⵠΔΔⵠⲆ, 247, 0],
		[ΔΔⵠ, "t", 5, ⵠΔᐃᐃ, 246, ⵠⵠᐃ],
		[1, "t", 3, 6, 245, ᐃⲆΔ],
		[ⲆⲆⵠ, "t", ⲆⵠⲆᐃ, ⵠⲆⵠⲆⵠ, 244, 0],
		[ⲆⵠⲆ, "t", ⵠⵠᐃ, 6, 243, ⲆⲆΔ],
		[1, "t", ΔⲆⲆⲆ, ᐃⲆΔⵠΔ, 242, 0],
		[ᐃⲆⲆ, "t", 3, ⵠΔΔⵠⲆ, 241, 0],
		[1, "t", ⲆⵠⲆᐃ, ⵠΔⵠⵠⲆ, 240, ⲆⲆΔ],
		[ⲆⵠⲆ, "b", ⵠᐃⵠ, ⵠⲆⵠⵠⵠ, 239, 0],
		[ⲆⵠⲆ, "t", 3, ΔΔΔᐃΔ, 238, 0],
		[1, "t", ⲆⲆⲆΔ, 6, 237, ⵠⵠⵠ],
		[ΔΔⵠ, "t", ᐃⲆⲆ, ⵠⲆⵠⲆⵠ, 236, ⵠⵠᐃ],
		[ⲆⵠⲆ, "t", ᐃᐃᐃᐃ, ⵠⲆⵠⵠⵠ, 235, 0],
		[Δⵠᐃ, "b", 2, ᐃⵠⵠᐃⵠ, 234, Ⲇⵠᐃ],
		[1, "t", ⵠⲆΔᐃ, 6, 233, 0],
		[ΔΔⵠ, "t", ΔᐃᐃΔ, ᐃⲆΔⵠΔ, 232, 0],
		[ΔΔⵠ, "b", 3, 6, 231, ᐃⲆΔ],
		[1, "t", ⵠᐃⲆᐃ, 6, 230, ⵠᐃΔ],
		[Δⵠᐃ, "t", Δⵠᐃ, 6, 229, 0],
		[ⲆⵠⲆ, "t", 2, 6, 228, 0],
		[1, "t", 5, 6, 227, 0],
		[1, "b", 2, ΔΔΔᐃΔ, 226, 0],
		[ⲆⵠⲆ, "t", ᐃⵠⵠⲆ, ⵠⵠⲆⲆⵠ, 225, Ⲇⵠᐃ],
		[1, "t", 0, 6, 224, 0],
		[Δⵠᐃ, "t", 2, 6, 223, 0],
		[ΔΔⵠ, "t", 0, ᐃⵠⵠᐃⵠ, 222, ⵠᐃΔ],
		[1, "b", ᐃᐃⲆⵠ, ⵠⲆⵠⵠⵠ, 221, 0],
		[Δⵠᐃ, "t", ᐃⵠⵠⲆ, ΔⲆⵠΔᐃ, 220, 0],
		[1, "b", 3, 6, 219, ⵠᐃΔ],
		[ΔΔⵠ, "t", 5, 6, 218, 0],
		[ᐃⲆⲆ, "t", ⵠᐃⵠ, ⵠⵠⲆⲆⵠ, 217, 0],
		[1, "t", ⲆⲆΔΔ, ᐃⵠⵠᐃⵠ, 216, 0],
		[1, "b", Δⵠⵠ, 6, 215, ⲆⲆᐃ],
		[1, "t", 4, ⵠΔⵠⵠⲆ, 214, Δⵠⵠ],
		[ⵠᐃᐃ, "t", ᐃⲆⵠᐃ, 6, 213, 0],
		[1, "t", 0, ⵠⲆⵠⲆⵠ, 212, ⲆⲆᐃ],
		[1, "t", ⵠⵠΔⵠ, 6, 211, 0],
		[ⵠᐃᐃ, "b", ⵠⵠⲆᐃ, ΔΔΔᐃΔ, 210, 0],
		[1, "t", Ⲇⵠᐃ, ΔΔΔᐃΔ, 209, 0],
		[ⲆⲆⵠ, "t", 5, ΔⲆⵠΔᐃ, 207, ⲆⲆᐃ],
		[ΔΔⵠ, "t", ᐃⵠΔⲆ, ⵠⲆⵠⲆⵠ, 208, ᐃⲆᐃ],
		[1, "t", 0, 6, 206, ⲆⲆΔ],
		[Δⵠᐃ, "t", ⵠⵠᐃⲆ, 6, 205, ᐃⲆᐃ],
		[1, "t", ᐃᐃⲆⵠ, ⵠΔⵠⵠⲆ, 203, ⵠⵠⵠ],
		[1, "b", ᐃⲆΔ, 6, 202, ⲆⲆΔ],
		[1, "t", 3, ⵠΔᐃᐃ, 201, 0],
		[ⵠᐃᐃ, "t", 4, 6, 199, 0],
		[1, "t", 0, 6, 198, 0],
		[1, "t", ⵠⲆΔᐃ, 6, 197, ⵠᐃΔ],
		[ΔΔⵠ, "t", 4, 6, 196, 0],
		[ᐃⲆⲆ, "t", ⲆⲆⵠ, ⵠΔΔⵠⲆ, 195, ⵠⵠⵠ],
		[ⵠᐃᐃ, "t", ⲆⵠⵠⲆ, 6, 194, ⵠⵠᐃ],
		[1, "t", 4, 6, 192, 0],
		[1, "t", ᐃᐃⲆⵠ, ᐃⲆΔⵠΔ, 191, 0],
		[1, "b", 0, 6, 190, ⵠᐃⵠ],
		[1, "t", 3, ⵠΔᐃᐃ, 189, ᐃⲆᐃ],
		[ⲆⵠⲆ, "t", ΔΔⲆΔ, 6, 187, ⵠⵠᐃ],
		[ᐃⲆⲆ, "b", Δⵠⵠ, 6, 186, ⵠⵠᐃ],
		[1, "t", ᐃⵠΔⲆ, ⵠⵠⲆⲆⵠ, 185, ⵠᐃΔ],
		[ⵠᐃᐃ, "t", 4, ΔⲆⵠΔᐃ, 184, 0],
		[1, "t", 2, 6, 183, 0],
		[1, "t", ⲆⲆΔ, ΔΔΔᐃΔ, 182, 0],
		[ⲆⲆⵠ, "b", 2, 6, 181, 0],
		[1, "t", 5, 6, 180, ⲆⲆᐃ],
		[ΔΔⵠ, "t", ⵠⵠᐃⲆ, 6, 179, ⲆⲆΔ],
		[1, "t", ⲆⲆΔ, ⵠΔᐃᐃ, 178, Δⵠⵠ],
		[ⲆⵠⲆ, "t", 2, 6, 177, ⲆⲆΔ],
		[1, "t", ΔᐃᐃΔ, 6, 176, 0],
		[Δⵠᐃ, "b", 2, 6, 175, 0],
		[ⲆⵠⲆ, "t", 1, ⵠΔⵠⵠⲆ, 174, Δⵠⵠ],
		[ΔΔⵠ, "t", 5, ΔⲆⵠΔᐃ, 173, ᐃⲆᐃ],
		[ⲆⲆⵠ, "t", 2, 6, ⲆᐃᐃᐃΔᐃΔ, 0],
		[ᐃⲆⲆ, "t", ΔⲆΔⲆ, 6, 204, 0],
		[1, "t", ΔⲆΔⲆ, ⲆⲆⲆⵠΔ, 200, 0],
		[1, "t", ᐃⲆⵠᐃ, ⵠⲆⵠⵠⵠ, 193, ⵠᐃⵠ],
		[1, "t", ᐃᐃⲆⵠ, ⵠΔⵠⵠⲆ, 188, ⲆⲆΔ],
		[1, "f", Δⵠᐃ, ΔⲆⵠΔᐃ, 150, ⲆⲆⵠ],
		[ⲆⲆⵠ, "f", ⵠⵠΔⵠ, 6, 151, 1],
		[1, "f", ᐃⵠΔⲆ, ⵠⵠⲆⲆⵠ, 149, 1],
		[ΔΔⵠ, "f", 1, ⵠΔΔⵠⲆ, 148, 1],
		[1, "f", 2, 6, 147, 1],
		[ⵠᐃᐃ, "f", ᐃⲆⵠᐃ, 6, 145, ⵠᐃᐃ],
		[ⵠᐃᐃ, "f", ⵠⲆΔᐃ, 6, 143, 1],
		[ⵠᐃᐃ, "f", ⲆⲆⵠ, ᐃⵠⵠᐃⵠ, 146, 1],
		[ⵠᐃᐃ, "f", 1, 6, 144, Δⵠᐃ],
		[ⲆⵠⲆ, "f", ⲆⲆⵠ, ⲆⲆⲆⵠΔ, 142, ⵠᐃᐃ],
		[1, "f", ᐃⲆⵠᐃ, 6, 141, 1],
		[ᐃⲆⲆ, "f", 2, 6, 139, 1],
		[ΔΔⵠ, "f", 2, ⵠⵠⲆᐃⲆ, 137, ⲆⲆⵠ],
		[ⲆⲆⵠ, "f", 2, ⵠΔⵠⵠⲆ, 135, ⵠᐃᐃ],
		[ⲆⲆⵠ, "f", 2, ⵠΔᐃᐃ, 133, ⲆⵠⲆ],
		[1, "f", Δⵠᐃ, 6, 140, 1],
		[ΔΔⵠ, "f", 1, ΔⲆⵠΔᐃ, 138, 1],
		[ⲆⲆⵠ, "f", ⵠᐃᐃ, 6, 136, ⲆⲆⵠ],
		[ⵠᐃᐃ, "f", 1, 6, 134, 1],
		[1, "f", ⲆⵠⲆ, ᐃⲆΔⵠΔ, 132, 1],
		[1, "f", 2, 6, 131, ⲆⲆⵠ],
		[ⵠᐃᐃ, "f", ⵠⵠΔⵠ, 6, 129, ⵠᐃᐃ],
		[1, "f", ⵠⵠᐃⲆ, 6, 127, 1],
		[ⲆⵠⲆ, "f", 2, 6, 125, 1],
		[1, "f", ᐃⵠΔⲆ, ⵠⲆⵠⵠⵠ, 123, 1],
		[ᐃⲆⲆ, "f", ⵠⵠΔⵠ, ⵠΔΔⵠⲆ, 121, 1],
		[1, "f", 1, ⵠΔᐃᐃ, 130, ⲆⲆⵠ],
		[ΔΔⵠ, "f", 1, 6, 128, ⲆⵠⲆ],
		[1, "f", Δⵠᐃ, ΔⲆⵠΔᐃ, 126, ⵠᐃᐃ],
		[1, "f", 1, 6, 124, 1],
		[Δⵠᐃ, "f", 1, ⵠΔⵠⵠⲆ, 122, 1],
		[ⵠᐃᐃ, "f", 1, 6, 120, 1],
		[ⲆⲆⵠ, "f", ⵠⲆΔᐃ, 6, 119, Δⵠᐃ],
		[ⵠᐃᐃ, "f", ᐃᐃⲆⵠ, ΔΔΔᐃΔ, 117, 1],
		[ⲆⲆⵠ, "f", ⵠⵠᐃⲆ, ⵠΔⵠⵠⲆ, 115, 1],
		[1, "f", ᐃᐃⲆⵠ, ΔΔΔᐃΔ, 113, 1],
		[ⲆⵠⲆ, "f", ᐃⲆⵠᐃ, 6, 111, ⲆⵠⲆ],
		[1, "f", ⵠⵠΔⵠ, ⵠΔΔⵠⲆ, 109, Δⵠᐃ],
		[1, "f", 1, 6, 118, 1],
		[1, "f", Δⵠᐃ, 6, 116, ΔΔⵠ],
		[ⲆⲆⵠ, "f", 1, ᐃⵠⵠᐃⵠ, 114, 1],
		[1, "f", 1, ΔΔΔᐃΔ, 112, 1],
		[1, "f", ⲆⲆⵠ, 6, 110, ⵠᐃᐃ],
		[ⲆⵠⲆ, "f", ⵠᐃᐃ, ⵠΔᐃᐃ, 108, ΔΔⵠ],
		[ⲆⵠⲆ, "f", 1, 6, 106, 1],
		[Δⵠᐃ, "f", 1, ⵠⲆⵠⵠⵠ, 104, ⵠᐃᐃ],
		[1, "f", ⵠⵠΔⵠ, ⵠΔⵠⵠⲆ, 107, 1],
		[1, "f", ᐃⵠΔⲆ, ⵠΔᐃᐃ, 105, ⵠᐃᐃ],
		[1, "f", ᐃⵠΔⲆ, ΔΔΔᐃΔ, 103, 1],
		[1, "f", ᐃⵠΔⲆ, ⲆⲆⲆⵠΔ, 101, 1],
		[ⵠᐃᐃ, "f", 2, ⵠΔᐃᐃ, 99, 1],
		[1, "f", 2, 6, 97, 1],
		[ⵠᐃᐃ, "f", ᐃⵠΔⲆ, ⵠⲆⵠⵠⵠ, 95, ᐃⲆⲆ],
		[Δⵠᐃ, "f", ⵠⵠᐃⲆ, ⵠΔⵠⵠⲆ, 93, 1],
		[1, "f", ᐃⵠΔⲆ, 6, 91, ⲆⲆⵠ],
		[ⵠᐃᐃ, "f", ΔΔⵠ, ⵠΔⵠⵠⲆ, 102, ᐃⲆⲆ],
		[1, "f", 1, ΔΔΔᐃΔ, 100, 1],
		[1, "f", ⵠᐃᐃ, ΔⲆⵠΔᐃ, 98, 1],
		[ⲆⵠⲆ, "f", ⲆⵠⲆ, ⲆⲆⲆⵠΔ, 96, 1],
		[1, "f", 1, 6, 94, ⲆⵠⲆ],
		[1, "f", Δⵠᐃ, ⵠΔᐃᐃ, 92, 1],
		[1, "f", 1, ⵠΔᐃᐃ, 90, 1],
		[ⵠᐃᐃ, "f", 1, 6, 88, 1],
		[1, "f", 1, 6, 86, Δⵠᐃ],
		[ΔΔⵠ, "f", 2, ⲆⲆⲆⵠΔ, 89, 1],
		[Δⵠᐃ, "f", 2, 6, 87, 1],
		[ⲆⵠⲆ, "f", 2, ᐃⵠⵠᐃⵠ, 85, 1],
		[1, "f", 2, ⵠⲆⵠⵠⵠ, 83, ΔΔⵠ],
		[ΔΔⵠ, "f", ᐃⵠΔⲆ, 6, 81, ᐃⲆⲆ],
		[ⲆⵠⲆ, "f", 2, 6, 79, Δⵠᐃ],
		[Δⵠᐃ, "f", 2, 6, 77, ⲆⲆⵠ],
		[ΔΔⵠ, "f", ᐃⲆⲆ, 6, 84, 1],
		[Δⵠᐃ, "f", 1, ⵠⵠⲆⲆⵠ, 82, Δⵠᐃ],
		[ⲆⵠⲆ, "f", ⲆⲆⵠ, ⵠΔΔⵠⲆ, 80, Δⵠᐃ],
		[1, "f", 1, ⵠΔᐃᐃ, 78, 1],
		[ⲆⵠⲆ, "f", 1, 6, 76, Δⵠᐃ],
		[ⲆⵠⲆ, "f", ᐃⵠΔⲆ, ⵠⲆⵠⲆⵠ, 75, 1],
		[1, "f", ᐃⲆⵠᐃ, ⵠΔᐃᐃ, 73, 1],
		[Δⵠᐃ, "f", 2, ⵠΔⵠⵠⲆ, 71, 1],
		[1, "f", 2, ⵠΔⵠⵠⲆ, 69, 1],
		[1, "f", ⵠⵠᐃⲆ, 6, 67, ⵠᐃᐃ],
		[ⲆⵠⲆ, "f", ᐃᐃⲆⵠ, 6, 65, 1],
		[1, "f", 1, ⵠΔᐃᐃ, 74, 1],
		[ᐃⲆⲆ, "f", 1, ⵠⲆⵠⲆⵠ, 72, 1],
		[Δⵠᐃ, "f", ⲆⲆⵠ, ᐃⲆΔⵠΔ, 70, 1],
		[1, "f", 1, ⵠⵠⲆᐃⲆ, 68, 1],
		[1, "f", ⲆⵠⲆ, 6, 66, ⲆⵠⲆ],
		[1, "f", 1, ΔⲆⵠΔᐃ, 64, 1],
		[ⲆⵠⲆ, "f", ⵠⵠᐃⲆ, ᐃⲆΔⵠΔ, 63, ⲆⲆⵠ],
		[1, "f", 2, ΔΔΔᐃΔ, 61, 1],
		[ⲆⲆⵠ, "f", ᐃⵠΔⲆ, 6, 59, ⲆⲆⵠ],
		[1, "f", ⵠⵠᐃⲆ, 6, 57, ᐃⲆⲆ],
		[ᐃⲆⲆ, "f", ᐃⲆⵠᐃ, 6, 55, Δⵠᐃ],
		[ⵠᐃᐃ, "f", 2, ⵠΔᐃᐃ, 53, ⲆⲆⵠ],
		[1, "f", ⵠⵠΔⵠ, 6, 51, 1],
		[ⲆⲆⵠ, "f", ⲆⵠⲆ, ⵠΔΔⵠⲆ, 62, Δⵠᐃ],
		[ⲆⵠⲆ, "f", ᐃⲆⲆ, 6, 60, ⲆⵠⲆ],
		[ⲆⲆⵠ, "f", ᐃⲆⲆ, ⵠⲆⵠⵠⵠ, 58, Δⵠᐃ],
		[ᐃⲆⲆ, "f", ⲆⲆⵠ, 6, 56, ᐃⲆⲆ],
		[1, "f", ⲆⵠⲆ, ΔⲆⵠΔᐃ, 54, 1],
		[Δⵠᐃ, "f", 1, 6, 52, 1],
		[1, "f", 1, ⵠΔᐃᐃ, 50, ᐃⲆⲆ],
		[ⲆⲆⵠ, "f", ⵠⲆΔᐃ, ⵠⵠⲆⲆⵠ, 49, ⲆⵠⲆ],
		[1, "f", 2, ⵠⵠⲆⲆⵠ, 47, ᐃⲆⲆ],
		[1, "f", ⵠⵠΔⵠ, ⵠΔᐃᐃ, 45, 1],
		[ⲆⲆⵠ, "f", ⵠⵠΔⵠ, ᐃⲆΔⵠΔ, 43, 1],
		[1, "f", ⵠⲆΔᐃ, ΔΔΔᐃΔ, 41, ⲆⵠⲆ],
		[ΔΔⵠ, "f", ᐃⲆⵠᐃ, 6, 39, ⵠᐃᐃ],
		[1, "f", ⲆⲆⵠ, 6, 48, Δⵠᐃ],
		[ΔΔⵠ, "f", ΔΔⵠ, ⲆⲆⲆⵠΔ, 46, 1],
		[1, "f", ⲆⵠⲆ, 6, 44, 1],
		[1, "f", 1, 6, 42, ΔΔⵠ],
		[1, "f", 1, ΔⲆⵠΔᐃ, 40, 1],
		[1, "f", ΔΔⵠ, ᐃⵠⵠᐃⵠ, 38, 1],
		[1, "f", 2, 6, 37, 1],
		[1, "f", 2, 6, 35, Δⵠᐃ],
		[1, "f", ⵠⵠᐃⲆ, ΔΔΔᐃΔ, 33, 1],
		[1, "f", ⵠⵠΔⵠ, ⵠⵠⲆᐃⲆ, 31, ⵠᐃᐃ],
		[Δⵠᐃ, "f", 2, ⲆⲆⲆⵠΔ, 29, ᐃⲆⲆ],
		[1, "f", 2, 6, 27, 1],
		[1, "f", 1, ⵠⲆⵠⵠⵠ, 36, ⲆⲆⵠ],
		[1, "f", Δⵠᐃ, 6, 34, 1],
		[ᐃⲆⲆ, "f", ᐃⲆⲆ, ΔⲆⵠΔᐃ, 32, ΔΔⵠ],
		[1, "f", ⲆⵠⲆ, 6, 30, ᐃⲆⲆ],
		[ⲆⵠⲆ, "f", 1, ⵠΔᐃᐃ, 28, Δⵠᐃ],
		[ⵠᐃᐃ, "f", 1, ⵠΔⵠⵠⲆ, 26, 1],
		[1, "f", 2, ⵠΔᐃᐃ, 25, 1],
		[ΔΔⵠ, "f", 2, 6, 23, 1],
		[ⲆⵠⲆ, "f", ᐃⵠΔⲆ, ᐃⵠⵠᐃⵠ, 21, ᐃⲆⲆ],
		[ΔΔⵠ, "f", ᐃⵠΔⲆ, 6, 19, ⵠᐃᐃ],
		[1, "f", ⵠⵠΔⵠ, 6, 17, 1],
		[ΔΔⵠ, "f", 2, ⵠⲆⵠⵠⵠ, ⵠⵠΔⵠᐃ, ⲆⲆⵠ],
		[1, "f", ΔΔⵠ, 6, 24, ᐃⲆⲆ],
		[1, "f", Δⵠᐃ, 6, 22, 1],
		[1, "f", 1, 6, 20, ⲆⲆⵠ],
		[1, "f", ΔΔⵠ, 6, 18, 1],
		[1, "f", ΔΔⵠ, 6, ⵠᐃᐃⵠⵠ, 1],
		[1, "f", ⵠⵠᐃⲆ, ⵠⵠⲆᐃⲆ, ΔᐃΔⲆΔ, 1],
		[ᐃⲆⲆ, "f", 2, 6, 11, ΔΔⵠ],
		[1, "f", ⵠⲆΔᐃ, ΔΔΔᐃΔ, ᐃⲆᐃᐃᐃ, Δⵠᐃ],
		[1, "f", 2, 6, 7, ⵠᐃᐃ],
		[1, "f", 1, 6, ⲆⲆᐃⲆⲆⲆⵠ, 1],
		[1, "f", 1, 6, ΔⲆⵠᐃⵠ, ᐃⲆⲆ],
		[1, "f", 1, 6, 10, ⲆⲆⵠ],
		[1, "f", 1, ⵠΔᐃᐃ, Δᐃⵠⵠᐃ, 1],
		[1, "f", 1, ⵠⲆⵠⵠⵠ, ᐃⵠⵠᐃⵠ, Δⵠᐃ],
		[1, "f", 1, 8, ⵠⲆⵠⵠⵠ, 1],
		[1, "f", ⵠⲆΔᐃ, ⵠᐃⵠⲆⲆ, ΔΔΔᐃΔ, 1],
		[1, "f", 2, ᐃⲆᐃᐃᐃ, 6, 1],
		[ⲆⵠⲆ, "f", ᐃᐃⲆⵠ, 11, ⵠΔΔⵠⲆ, 1],
		[1, "f", ᐃⵠΔⲆ, ⲆᐃᐃⵠΔΔᐃ, 6, 1],
		[ᐃⲆⲆ, "f", ᐃᐃⲆⵠ, 15, 6, ⵠᐃᐃ],
		[ⲆⲆⵠ, "f", 1, ᐃᐃᐃⲆⵠ, ⲆⲆⲆⵠΔ, ⲆⲆⵠ],
		[Δⵠᐃ, "f", 1, 12, ⵠⵠⲆᐃⲆ, ΔΔⵠ],
		[Δⵠᐃ, "f", 1, 14, ⲆⲆⲆⵠΔ, ⲆⵠⲆ],
		[ⵠᐃᐃ, "f", 1, ΔⵠⲆᐃⲆ, ⵠΔᐃᐃ, 1],
		[1, "f", 1, 18, ⵠⲆⵠⵠⵠ, 1],
		[1, "f", ⲆⲆⵠ, 20, ⵠΔΔⵠⲆ, 1],
		[1, "f", 1, 22, ΔΔΔᐃΔ, Δⵠᐃ],
		[1, "f", ᐃⲆⲆ, 24, 6, 1],
		[ⵠᐃᐃ, "f", Δⵠᐃ, 26, ⲆⲆⲆⵠΔ, 1],
		[ⲆⵠⲆ, "f", ⵠⵠᐃⲆ, ⲆⵠᐃⲆⵠ, 6, 1],
		[1, "f", ᐃⲆⵠᐃ, 19, ⵠⵠⲆⲆⵠ, Δⵠᐃ],
		[ⲆⵠⲆ, "f", ⵠⲆΔᐃ, 21, ⵠΔᐃᐃ, 1],
		[1, "f", ᐃᐃⲆⵠ, 23, ⵠΔᐃᐃ, 1],
		[1, "f", 2, 25, ΔΔΔᐃΔ, ⵠᐃᐃ],
		[ⲆⵠⲆ, "f", 2, 27, 6, 1],
		[1, "f", 2, 29, 6, ⵠᐃᐃ],
		[1, "f", ᐃⵠΔⲆ, 31, 6, ᐃⲆⲆ],
		[1, "f", ᐃᐃⲆⵠ, 33, 6, Δⵠᐃ],
		[Δⵠᐃ, "f", Δⵠᐃ, 28, 6, ᐃⲆⲆ],
		[1, "f", 1, 30, ᐃⲆΔⵠΔ, 1],
		[1, "f", 1, 32, 6, Δⵠᐃ],
		[1, "f", 1, 34, ⵠΔᐃᐃ, ⲆⲆⵠ],
		[Δⵠᐃ, "f", ᐃⲆⵠᐃ, 67, ᐃⲆΔⵠΔ, Δⵠᐃ],
		[1, "f", ⵠⲆΔᐃ, 69, 6, 1],
		[1, "f", ⵠⵠᐃⲆ, 71, 6, 1],
		[1, "f", ᐃⵠΔⲆ, 73, ⲆⲆⲆⵠΔ, ⲆⵠⲆ],
		[1, "f", 2, 75, 6, Δⵠᐃ],
		[1, "f", 1, 68, ⵠⵠⲆᐃⲆ, 1],
		[1, "f", 1, 70, 6, 1],
		[ΔΔⵠ, "f", 1, 72, 6, 1],
		[Δⵠᐃ, "f", Δⵠᐃ, 74, 6, ⲆⲆⵠ],
		[1, "f", 1, 76, 6, ⲆⲆⵠ],
		[1, "f", 2, 77, 6, 1],
		[ᐃⲆⲆ, "f", ⵠⵠᐃⲆ, 79, 6, 1],
		[1, "f", 2, 81, ΔΔΔᐃΔ, 1],
		[ⲆⲆⵠ, "f", 2, 83, 6, Δⵠᐃ],
		[ⲆⲆⵠ, "f", 2, 85, ᐃⲆΔⵠΔ, 1],
		[1, "f", 1, 78, ⵠⲆⵠⲆⵠ, ΔΔⵠ],
		[Δⵠᐃ, "f", 1, 80, 6, ᐃⲆⲆ],
		[1, "f", 1, 82, ⵠⲆⵠⵠⵠ, ΔΔⵠ],
		[1, "f", Δⵠᐃ, 84, 6, 1],
		[ᐃⲆⲆ, "f", ⲆⵠⲆ, 86, ⵠΔⵠⵠⲆ, 1],
		[ⲆⲆⵠ, "f", 2, 87, ⵠⲆⵠⲆⵠ, 1],
		[ⲆⲆⵠ, "f", 2, 89, ΔⲆⵠΔᐃ, 1],
		[Δⵠᐃ, "f", 2, 91, ⵠⵠⲆⲆⵠ, ⲆⵠⲆ],
		[1, "f", ᐃⵠΔⲆ, 93, ⵠⵠⲆᐃⲆ, 1],
		[ᐃⲆⲆ, "f", ⲆⲆⵠ, 88, 6, 1],
		[ⵠᐃᐃ, "f", 1, 90, 6, 1],
		[1, "f", 1, 92, 6, 1],
		[ⵠᐃᐃ, "f", 1, 94, ⵠΔΔⵠⲆ, 1],
		[1, "f", 2, 95, ⲆⲆⲆⵠΔ, ΔΔⵠ],
		[ᐃⲆⲆ, "f", Δⵠᐃ, 95, ᐃΔᐃᐃⲆ, 1],
		[1, "f", ⲆⲆⵠ, 83, 7, 1],
		[1, "f", 1, 81, ⲆᐃⲆⲆΔ, ᐃⲆⲆ],
		[ⲆⵠⲆ, "f", ΔΔⵠ, 79, ⲆᐃᐃΔΔ, ΔΔⵠ],
		[Δⵠᐃ, "f", ⲆⲆⵠ, 77, 7, 1],
		[ⵠᐃᐃ, "f", 1, 75, 7, 1],
		[Δⵠᐃ, "f", 1, 73, 7, 1],
		[ⵠᐃᐃ, "f", 1, 71, 7, ⵠᐃᐃ],
		[ⲆⵠⲆ, "f", Δⵠᐃ, 69, ⵠᐃⵠⲆⲆ, 1],
		[ᐃⲆⲆ, "f", ⵠᐃᐃ, 33, ⵠⵠᐃⵠᐃ, 1],
		[1, "f", 1, 31, ΔⵠᐃΔⲆ, 1],
		[ⲆⲆⵠ, "f", 1, 29, ⵠⲆᐃΔⵠ, 1],
		[ᐃⲆⲆ, "f", ΔΔⵠ, 27, ⲆᐃⲆⲆΔ, 1],
		[ⲆⵠⲆ, "f", ΔΔⵠ, 25, 7, ᐃⲆⲆ],
		[ⲆⲆⵠ, "f", ⲆⵠⲆ, 23, 7, ΔΔⵠ],
		[ⲆⵠⲆ, "f", 1, 21, 7, ⵠᐃᐃ],
		[ⵠᐃᐃ, "f", 1, ⲆⵠᐃᐃⲆ, 7, ⲆⲆⵠ],
		[ΔΔⵠ, "f", ⵠᐃᐃ, 17, 7, ⵠᐃᐃ],
		[ⲆⲆⵠ, "f", ΔΔⵠ, ᐃⵠᐃᐃΔ, ⵠⵠᐃⵠᐃ, 1],
		[1, "f", Δⵠᐃ, ΔⲆΔⵠᐃ, 7, ⲆⲆⵠ],
		[Δⵠᐃ, "f", Δⵠᐃ, 11, ⵠᐃⵠⲆⲆ, 1],
		[1, "f", ⲆⵠⲆ, ⵠᐃΔⲆⲆ, ΔⵠᐃΔⲆ, ⲆⵠⲆ],
		[1, "f", ΔΔⵠ, 7, 7, 1],
		[1, "s", 0, ᐃΔᐃᐃⲆ, ᐃΔᐃⵠⲆ, 1],
		[ⲆⵠⲆ, "t", 4, ⲆᐃⲆⲆΔ, 174, 0],
		[ⲆⵠⲆ, "t", ᐃᐃᐃᐃ, 7, 175, 0],
		[1, "t", ΔΔⲆΔ, 7, 176, ⲆⲆΔ],
		[1, "b", 2, ⵠⲆᐃΔⵠ, 177, Ⲇⵠᐃ],
		[ⲆⵠⲆ, "t", ⵠᐃᐃΔ, 94, 301, 0],
		[1, "b", ⵠⲆᐃΔ, 95, 301, 0],
		[ⵠᐃᐃ, "t", 4, 96, 301, 0],
		[1, "t", ᐃⲆⲆ, 97, 301, ᐃⲆᐃ],
		[ΔΔⵠ, "t", ⵠⵠᐃⲆ, 98, 301, ⲆⲆΔ],
		[1, "t", ΔΔⲆΔ, 99, 301, Ⲇⵠᐃ],
		[1, "t", ᐃⵠΔⲆ, 100, 301, 0],
		[ᐃⲆⲆ, "t", 4, 96, 304, ⲆⲆΔ],
		[ᐃⲆⲆ, "t", 2, 96, 302, ⲆⲆΔ],
		[1, "t", ᐃᐃⲆⵠ, 97, 304, 0],
		[1, "t", 2, 96, 303, 0],
		[1, "t", 5, 97, 303, ⵠᐃⵠ],
		[1, "t", 5, 98, 304, ⵠⵠᐃ],
		[1, "b", ⵠⵠΔⵠ, 97, 302, 0],
		[1, "b", 2, 99, 304, ᐃⲆᐃ],
		[1, "t", 1, 98, 303, 0],
		[ⲆⲆⵠ, "t", ΔᐃᐃΔ, 98, 302, 0],
		[Δⵠᐃ, "t", 4, 99, 303, 0],
		[ΔΔⵠ, "t", ΔⲆΔⲆ, ⲆⵠⲆⵠᐃ, 304, ⲆⲆΔ],
		[ᐃⲆⲆ, "t", ⵠᐃⲆᐃ, 99, 302, ⲆⲆᐃ],
		[1, "t", ᐃⵠΔⵠ, 101, 303, 0],
		[ᐃⲆⲆ, "t", 2, ᐃⲆⵠⵠΔ, 303, 0],
		[1, "t", ⵠⵠᐃ, ᐃⲆⵠⵠΔ, 302, ⵠᐃⵠ],
		[1, "t", ⵠᐃⵠ, 101, 304, ⵠⵠᐃ],
		[ⲆⵠⲆ, "t", 4, 102, 304, ⲆⲆΔ],
		[ΔΔⵠ, "f", ⵠᐃΔ, 94, 7, ᐃⲆⲆ],
		[ΔΔⵠ, "f", 1, 93, 7, ⲆⲆⵠ],
		[ⲆⵠⲆ, "f", 1, 92, 7, 1],
		[Δⵠᐃ, "f", 0, 91, ⲆᐃᐃΔΔ, 1],
		[ΔΔⵠ, "f", 1, 90, ⵠᐃⵠⲆⲆ, 1],
		[ΔΔⵠ, "f", 1, 89, 7, 1],
		[1, "f", ᐃⲆᐃ, 88, 7, ⲆⲆⵠ],
		[1, "f", ΔΔⵠ, 87, 7, 1],
		[1, "f", 1, 86, ⵠⵠᐃⵠᐃ, ᐃⲆⲆ],
		[ᐃⲆⲆ, "f", 1, 85, 7, ⵠᐃᐃ],
		[ᐃⲆⲆ, "f", 0, 84, 7, 1],
		[ⲆⲆⵠ, "f", Δⵠᐃ, 82, 7, ΔΔⵠ],
		[1, "f", ᐃⲆᐃ, 80, ᐃΔᐃᐃⲆ, 1],
		[Δⵠᐃ, "f", ⵠᐃᐃ, 78, 7, 1],
		[ⲆⲆⵠ, "f", 0, 76, ⵠᐃⵠⲆⲆ, 1],
		[ᐃⲆⲆ, "f", ΔΔⵠ, 74, ᐃΔᐃᐃⲆ, ⵠᐃᐃ],
		[1, "f", Δⵠⵠ, 72, 7, 1],
		[ⵠᐃᐃ, "f", 0, 70, 7, ⲆⵠⲆ],
		[1, "f", 1, 68, 7, 1],
		[1, "f", 1, 32, 7, Δⵠᐃ],
		[ΔΔⵠ, "f", 0, 30, ⵠⲆᐃΔⵠ, ᐃⲆⲆ],
		[ΔΔⵠ, "f", ⲆⵠⲆ, 28, ᐃΔᐃᐃⲆ, ⵠᐃᐃ],
		[1, "f", ⵠᐃΔ, 26, 7, 1],
		[Δⵠᐃ, "f", 1, 24, ⵠⲆᐃΔⵠ, ⵠᐃᐃ],
		[1, "f", ⵠⵠᐃ, 22, ⲆᐃᐃΔΔ, 1],
		[ⵠᐃᐃ, "f", 1, 20, ᐃΔᐃᐃⲆ, 1],
		[1, "f", ⵠⵠⵠ, ᐃⲆΔΔⲆ, 7, ⲆⵠⲆ],
		[1, "f", ᐃⲆⲆ, ᐃΔᐃⲆⲆ, 7, ⵠᐃᐃ],
		[ⲆⲆⵠ, "f", ⲆⲆᐃ, ⲆⵠΔᐃⵠⵠⲆ, 7, ΔΔⵠ],
		[ⲆⵠⲆ, "f", 1, ᐃⲆᐃⲆⵠ, 7, 1],
		[ᐃⲆⲆ, "f", Ⲇⵠᐃ, 10, ⲆᐃⲆⲆΔ, ⲆⵠⲆ],
		[ⲆⵠⲆ, "f", Δⵠᐃ, 8, ⲆᐃⲆⲆΔ, 1],
		[1, "s", 1, ⵠⲆᐃΔⵠ, 9, 1],
		[Δⵠᐃ, "f", 0, 95, 152, 1],
		[ⵠᐃᐃ, "f", ⲆⵠⲆ, 95, 151, ⲆⲆⵠ],
		[ΔΔⵠ, "f", ᐃⲆΔ, 95, ΔΔΔⲆⵠᐃⲆ, 1],
		[Δⵠᐃ, "f", 1, 95, 12, 1],
		[Δⵠᐃ, "f", 1, 95, 14, 1],
		[1, "f", ⲆⵠⲆ, 95, ⵠᐃⵠᐃⵠ, ⲆⵠⲆ],
		[1, "f", 0, 95, 15, ⲆⵠⲆ],
		[Δⵠᐃ, "f", ⵠⵠᐃ, 95, ⲆⲆⲆⵠⵠ, ⲆⵠⲆ],
		[1, "f", ⵠᐃᐃ, 95, 21, ⲆⵠⲆ],
		[ⲆⵠⲆ, "f", 1, 95, 26, ⵠᐃᐃ],
		[ᐃⲆⲆ, "f", 1, 95, 37, ᐃⲆⲆ],
		[Δⵠᐃ, "f", ⲆⲆΔ, 95, 44, ⲆⲆⵠ],
		[1, "f", 1, 95, 50, 1],
		[ΔΔⵠ, "f", 1, 95, 52, 1],
		[1, "f", ⲆⲆΔ, 95, 53, ᐃⲆⲆ],
		[1, "f", ⲆⲆⵠ, 95, 54, ⲆⲆⵠ],
		[1, "f", 1, 95, 62, 1],
		[1, "f", ᐃⲆΔ, 95, 55, ⲆⲆⵠ],
		[ⲆⵠⲆ, "f", ⲆⲆⵠ, 95, 64, 1],
		[1, "f", 0, 95, 58, ᐃⲆⲆ],
		[ⲆⲆⵠ, "f", ⵠᐃⵠ, 95, 61, ⵠᐃᐃ],
		[1, "f", 0, 95, 68, ⵠᐃᐃ],
		[Δⵠᐃ, "f", ⵠⵠⵠ, 95, 72, ⵠᐃᐃ],
		[1, "f", Δⵠⵠ, 95, 78, Δⵠᐃ],
		[ⵠᐃᐃ, "f", ⵠᐃᐃ, 95, 115, Δⵠᐃ],
		[ⵠᐃᐃ, "f", Δⵠᐃ, 95, 117, ⵠᐃᐃ],
		[ⵠᐃᐃ, "f", Δⵠᐃ, 95, 128, 1],
		[Δⵠᐃ, "f", 0, 95, 85, 1],
		[1, "f", 0, 95, 91, Δⵠᐃ],
		[1, "f", 0, 95, 95, ΔΔⵠ],
		[1, "f", ⲆⲆΔ, 95, 114, ⲆⲆⵠ],
		[ᐃⲆⲆ, "f", 2, 95, 113, 1],
		[ⲆⵠⲆ, "f", ⲆⲆⵠ, 95, 119, Δⵠᐃ],
		[ⲆⲆⵠ, "f", 0, 95, 120, ⵠᐃᐃ],
		[1, "f", 1, 95, 121, ΔΔⵠ],
		[ⲆⵠⲆ, "f", ⲆⲆᐃ, 95, 127, 1],
		[1, "f", ᐃⲆⲆ, 95, 130, ᐃⲆⲆ],
		[1, "f", ⲆⲆΔ, 95, 131, ᐃⲆⲆ],
		[1, "f", ᐃⲆⲆ, 95, 132, ᐃⲆⲆ],
		[1, "f", 1, 95, 136, Δⵠᐃ],
		[1, "f", ⵠᐃΔ, 95, 137, 1],
		[ⲆⵠⲆ, "f", 0, 95, 143, ⵠᐃᐃ],
		[1, "f", ⵠᐃⵠ, 95, 147, 1],
		[1, "f", 1, 95, 138, ᐃⲆⲆ],
		[Δⵠᐃ, "f", ΔΔⵠ, 95, 144, Δⵠᐃ],
		[ΔΔⵠ, "f", 1, 95, ⲆΔᐃⵠΔ, 1],
		[ᐃⲆⲆ, "f", 0, 95, 8, ⵠᐃᐃ],
		[Δⵠᐃ, "f", ᐃⲆⲆ, 95, 9, 1],
		[ΔΔⵠ, "f", ⵠⵠⵠ, 95, ⲆΔΔΔⲆ, ⵠᐃᐃ],
		[1, "f", 1, 95, 16, 1],
		[1, "f", ⲆⲆⵠ, 95, ⵠⲆΔΔⵠ, 1],
		[ΔΔⵠ, "f", 0, 95, 18, 1],
		[Δⵠᐃ, "f", ⲆⲆⵠ, 95, 45, 1],
		[1, "f", 0, 95, 51, 1],
		[1, "f", 1, 95, 56, 1],
		[1, "f", 1, 95, 57, ⵠᐃᐃ],
		[Δⵠᐃ, "f", 1, 95, 59, 1],
		[ⲆⵠⲆ, "f", 1, 95, 60, Δⵠᐃ],
		[1, "f", Δⵠᐃ, 95, 63, 1],
		[ⲆⲆⵠ, "f", ᐃⲆΔ, 95, 65, ᐃⲆⲆ],
		[1, "f", ⵠᐃᐃ, 95, 66, 1],
		[1, "f", ΔΔⵠ, 95, 67, ᐃⲆⲆ],
		[1, "f", 1, 95, 69, 1],
		[1, "f", 1, 95, 70, Δⵠᐃ],
		[1, "f", ⵠᐃΔ, 95, 71, 1],
		[1, "f", 1, 95, 73, 1],
		[1, "f", 1, 95, 74, 1],
		[ΔΔⵠ, "f", ⵠⵠᐃ, 95, 75, ⲆⵠⲆ],
		[ΔΔⵠ, "f", 1, 95, 76, ᐃⲆⲆ],
		[ⲆⲆⵠ, "f", ⲆⵠⲆ, 95, 77, ΔΔⵠ],
		[1, "f", Δⵠᐃ, 95, 79, Δⵠᐃ],
		[ΔΔⵠ, "f", 1, 95, 80, 1],
		[ΔΔⵠ, "f", ⲆⲆΔ, 95, 81, Δⵠᐃ],
		[ⲆⲆⵠ, "f", 1, 95, 82, ΔΔⵠ],
		[1, "f", ⲆⲆΔ, 95, 83, 1],
		[1, "f", ⵠᐃᐃ, 95, 84, 1],
		[ᐃⲆⲆ, "f", 1, 95, 86, ⵠᐃᐃ],
		[ΔΔⵠ, "f", 1, 95, 88, ᐃⲆⲆ],
		[ⵠᐃᐃ, "f", 0, 95, 87, Δⵠᐃ],
		[1, "f", ⲆⲆⵠ, 95, 89, ⲆⵠⲆ],
		[1, "f", 1, 95, 90, ⵠᐃᐃ],
		[Δⵠᐃ, "f", 1, 95, 92, ⵠᐃᐃ],
		[1, "f", 1, 95, 93, 1],
		[ⲆⵠⲆ, "f", ᐃⲆⲆ, 95, 94, ⲆⵠⲆ],
		[1, "f", ⲆⵠⲆ, 95, 96, Δⵠᐃ],
		[ᐃⲆⲆ, "f", 1, 95, 97, ᐃⲆⲆ],
		[Δⵠᐃ, "f", 0, 95, 98, ⲆⵠⲆ],
		[1, "f", Δⵠᐃ, 95, 99, 1],
		[1, "f", 1, 95, 100, 1],
		[ⲆⵠⲆ, "f", Ⲇⵠᐃ, 95, 101, Δⵠᐃ],
		[ⵠᐃᐃ, "f", ⵠᐃᐃ, 95, 102, 1],
		[ᐃⲆⲆ, "f", ⲆⲆΔ, 95, 103, 1],
		[ⲆⲆⵠ, "f", ⲆⲆⵠ, 95, 104, ⲆⵠⲆ],
		[ⲆⵠⲆ, "f", 1, 95, 105, 1],
		[Δⵠᐃ, "f", ⵠᐃⵠ, 95, 106, 1],
		[ⲆⲆⵠ, "f", 1, 95, 107, ΔΔⵠ],
		[Δⵠᐃ, "f", 1, 95, 108, 1],
		[ΔΔⵠ, "f", 1, 95, 109, 1],
		[ⲆⵠⲆ, "f", ᐃⲆΔ, 95, 110, 1],
		[1, "f", 1, 95, 111, ⲆⲆⵠ],
		[1, "f", ⲆⲆᐃ, 95, 112, 1],
		[Δⵠᐃ, "f", ᐃⲆⲆ, 95, 116, ΔΔⵠ],
		[ⲆⵠⲆ, "f", ⵠᐃΔ, 95, 118, 1],
		[ⲆⵠⲆ, "f", ᐃⲆᐃ, 95, 122, 1],
		[ΔΔⵠ, "f", Δⵠᐃ, 95, 123, Δⵠᐃ],
		[Δⵠᐃ, "f", 1, 95, 124, 1],
		[ᐃⲆⲆ, "f", ᐃⲆᐃ, 95, 125, ΔΔⵠ],
		[1, "f", 1, 95, 126, ΔΔⵠ],
		[1, "f", 1, 95, 129, 1],
		[ΔΔⵠ, "f", ⲆⵠⲆ, 95, 133, 1],
		[ⲆⲆⵠ, "f", Ⲇⵠᐃ, 95, 134, ΔΔⵠ],
		[ⵠᐃᐃ, "f", 1, 95, 135, ᐃⲆⲆ],
		[1, "f", 1, 95, 139, 1],
		[Δⵠᐃ, "f", 0, 95, 140, ⲆⲆⵠ],
		[ΔΔⵠ, "f", 1, 95, 141, 1],
		[ᐃⲆⲆ, "f", ⵠᐃᐃ, 95, 142, 1],
		[ⵠᐃᐃ, "f", ΔΔⵠ, 95, 146, 1],
		[ⲆⲆⵠ, "f", Δⵠⵠ, 95, 145, 1],
		[ⲆⵠⲆ, "f", 1, 95, 148, ⵠᐃᐃ],
		[1, "f", 1, 95, 149, 1],
		[1, "f", 1, 95, 150, ΔΔⵠ],
		[ⲆⵠⲆ, "f", ᐃⲆⲆ, 95, 153, 1],
		[ⲆⲆⵠ, ᐃ[153], 0, 64, ΔⵠⵠᐃⲆ, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⲆ, 64, ᐃⲆᐃⲆⲆ, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 64, ᐃΔᐃⲆⲆ, 1],
		[1, ᐃ[153], 2, 64, ᐃⵠᐃⲆⲆ, 1],
		[1, ᐃ[153], 0, 64, 20, 1],
		[1, ᐃ[153], ⵠᐃᐃ, 64, 21, 1],
		[1, ᐃ[153], 2, 64, 22, 1],
		[1, ᐃ[153], 0, 64, 23, 1],
		[1, ᐃ[153], 2, 64, 24, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], Δⵠᐃ, 64, 29, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 64, 30, 1],
		[ᐃⲆⲆ, ᐃ[153], ΔᐃΔⲆ, 64, 31, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], 0, 64, 32, 1],
		[ⲆⲆⵠ, ᐃ[153], ΔΔⵠ, 64, 33, 1],
		[1, ᐃ[153], 2, 64, 34, Δⵠᐃ],
		[1, ᐃ[153], 0, 64, 35, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⵠΔⵠ, 64, 8, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], ᐃⵠΔⲆ, 65, 8, ⲆⵠⲆ],
		[1, ᐃ[153], 1, 65, 9, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 65, ΔⵠⲆᐃΔ, 1],
		[ⲆⵠⲆ, ᐃ[153], ΔᐃΔⲆ, 65, 11, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆⲆ, 65, ⲆⵠᐃΔΔ, Δⵠᐃ],
		[1, ᐃ[153], 0, 64, 17, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠⲆⲆ, 65, 17, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 64, ⵠΔⲆᐃΔ, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], 2, 65, 18, 1],
		[1, ᐃ[153], ⵠⵠᐃ, 65, ΔᐃᐃΔΔ, 1],
		[ᐃⲆⲆ, ᐃ[153], Δⵠᐃ, 65, ⲆⲆⲆⵠⵠ, 1],
		[1, ᐃ[153], ⲆⵠⵠⲆ, 65, 21, 1],
		[1, ᐃ[153], 2, 65, 22, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⲆᐃΔ, 65, 23, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], 0, 65, 24, 1],
		[1, ᐃ[153], 2, 65, 29, ⵠᐃᐃ],
		[1, ᐃ[153], ⲆΔⲆⲆ, 65, 30, ⵠᐃᐃ],
		[1, ᐃ[153], 0, 65, 31, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], ⲆⵠⲆ, 65, 32, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 65, 33, ΔΔⵠ],
		[1, ᐃ[153], 3, 65, 34, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 63, ⲆΔΔΔΔ, 1],
		[ΔΔⵠ, ᐃ[153], 0, 62, ⲆΔΔΔΔ, 1],
		[1, ᐃ[153], 2, 61, 9, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⲆΔ, 60, 9, 1],
		[1, ᐃ[153], 2, 59, ⵠⵠⵠᐃⵠ, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃⵠΔⲆ, 58, ᐃΔⵠᐃᐃ, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⵠᐃ, 57, ᐃⲆᐃᐃᐃ, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⵠΔⲆ, 56, 9, 1],
		[1, ᐃ[153], 2, 55, 9, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃⲆ, 54, ⲆⵠⲆⲆⵠ, 1],
		[ΔΔⵠ, ᐃ[153], ⵠᐃΔ, 53, 9, ΔΔⵠ],
		[1, ᐃ[153], ᐃⲆΔ, 51, 9, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 52, 9, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 50, 9, ⵠᐃᐃ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠΔⵠ, 48, ᐃΔⵠⲆⲆ, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 49, 9, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠⵠ, 47, 9, ᐃⲆⲆ],
		[1, ᐃ[153], 0, 45, ⵠⵠⵠᐃⵠ, Δⵠᐃ],
		[1, ᐃ[153], Δⵠⵠ, 43, ΔᐃΔⲆⵠ, 1],
		[ΔΔⵠ, ᐃ[153], 2, 46, ⲆΔΔΔΔ, 1],
		[1, ᐃ[153], 2, 44, ⲆΔΔΔΔ, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 42, ᐃΔⵠᐃᐃ, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 41, ΔᐃΔⲆⵠ, 1],
		[ΔΔⵠ, ᐃ[153], ⵠᐃⵠ, 40, 9, 1],
		[1, ᐃ[153], 2, 39, ᐃⲆᐃᐃᐃ, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠΔⵠ, 38, ᐃⲆᐃᐃᐃ, 1],
		[1, ᐃ[153], Δⵠⵠ, 37, 9, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], 0, 63, 8, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 65, 7, 1],
		[1, ᐃ[153], 3, 64, 7, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 62, ⵠⵠᐃᐃⲆ, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], 3, 61, 8, 1],
		[ⵠᐃᐃ, ᐃ[153], 1, 62, ⵠΔⵠᐃⲆ, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 63, 7, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], 0, 64, ⵠΔⵠⵠⲆ, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], 3, 65, ⵠⲆⵠⵠⵠ, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 63, ⵠⵠⲆⲆⵠ, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 62, 6, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃⲆ, 61, 6, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], ᐃᐃⲆⵠ, 60, 6, 1],
		[1, ᐃ[153], 2, 59, ⵠⲆⵠⲆⵠ, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 61, ⲆΔᐃᐃⲆ, Δⵠᐃ],
		[1, ᐃ[153], Δⵠⵠ, 60, ⵠⲆᐃΔⵠ, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], 2, 60, ⲆⲆᐃⲆⵠ, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 59, 7, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], 2, 59, ᐃΔᐃⵠⲆ, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠᐃᐃ, 58, Δᐃⵠⵠᐃ, 1],
		[1, ᐃ[153], ᐃⲆⲆ, 57, ΔΔΔᐃΔ, 1],
		[1, ᐃ[153], 1, 55, 7, ⲆⵠⲆ],
		[1, ᐃ[153], Ⲇⵠᐃ, 56, ⵠΔⵠⵠⲆ, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠⲆΔᐃ, 58, 6, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 58, ᐃΔᐃᐃⲆ, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⵠᐃ, 57, ⵠᐃⵠⲆⲆ, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 56, 7, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], 2, 55, ΔΔΔᐃΔ, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 57, ᐃΔᐃⵠⲆ, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 56, ⵠⵠᐃᐃⲆ, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 55, ᐃΔᐃⵠⲆ, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], Ⲇⵠᐃ, 54, 8, 1],
		[ΔΔⵠ, ᐃ[153], 0, 50, 7, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⵠⵠ, 53, 6, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], ⵠⲆΔᐃ, 54, ⵠΔᐃᐃ, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 54, ⵠⲆᐃΔⵠ, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], 2, 53, 7, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 52, ΔⵠᐃΔⲆ, Δⵠᐃ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 52, 6, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], ⲆⲆⵠ, 52, 8, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 53, 8, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠΔⵠ, 51, 8, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⵠΔⲆ, 51, 7, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], 2, 51, 6, ΔΔⵠ],
		[1, ᐃ[153], 2, 50, 6, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 50, ⲆⲆᐃⲆⵠ, 1],
		[1, ᐃ[153], 2, 49, 8, ⲆⲆⵠ],
		[Δⵠᐃ, ᐃ[153], ᐃᐃⲆⵠ, 49, 7, ΔΔⵠ],
		[ⲆⵠⲆ, ᐃ[153], ᐃᐃⲆⵠ, 49, 6, Δⵠᐃ],
		[1, ᐃ[153], ᐃⲆᐃ, 46, ⵠⲆᐃΔⵠ, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃⲆⲆ, 48, 8, Δⵠᐃ],
		[1, ᐃ[153], ΔΔⵠ, 44, ⵠⵠᐃⵠᐃ, 1],
		[ΔΔⵠ, ᐃ[153], 1, 41, 8, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃⲆ, 48, 7, 1],
		[Δⵠᐃ, ᐃ[153], 2, 48, 6, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], ⵠⵠᐃⲆ, 47, 6, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⵠᐃ, 47, ᐃΔᐃᐃⲆ, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠΔⵠ, 47, ⵠⵠᐃᐃⲆ, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 46, ᐃΔᐃⵠⲆ, Δⵠᐃ],
		[1, ᐃ[153], 2, 45, 8, ΔΔⵠ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 45, ⵠⵠᐃⵠᐃ, 1],
		[1, ᐃ[153], 2, 45, 6, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], 2, 46, 6, ΔΔⵠ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 44, 6, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⵠᐃ, 44, 8, 1],
		[1, ᐃ[153], 2, 43, ⲆⲆⲆᐃⲆ, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 43, ⲆΔᐃᐃⲆ, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], ⵠⵠᐃⲆ, 43, ᐃⵠⵠᐃⵠ, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠᐃⲆ, 42, ⵠⲆⵠⵠⵠ, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], 2, 42, ⲆΔᐃᐃⲆ, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], ⵠⵠᐃⲆ, 42, ⲆⲆᐃⲆⵠ, ΔΔⵠ],
		[1, ᐃ[153], 2, 41, 7, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], 2, 41, 6, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 40, 6, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 40, 7, 1],
		[ⵠᐃᐃ, ᐃ[153], ᐃⲆⵠᐃ, 40, Δᐃⵠⵠᐃ, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 39, ᐃΔᐃⵠⲆ, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], ⵠᐃⵠ, 39, 7, 1],
		[Δⵠᐃ, ᐃ[153], 1, 38, ⵠⵠᐃᐃⲆ, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠΔⵠ, 39, 6, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 38, 6, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃⵠΔⲆ, 37, ΔⲆⵠΔᐃ, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], 2, 38, ᐃΔᐃᐃⲆ, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 37, ⲆΔᐃᐃⲆ, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], ᐃᐃⲆⵠ, 37, 8, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 37, ⲆΔᐃⵠΔ, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠᐃⲆ, 38, ΔⵠΔᐃΔ, ⲆⲆⵠ],
		[1, ᐃ[153], 0, 38, 11, 1],
		[1, ᐃ[153], ⲆⲆᐃ, 38, ⵠΔⵠⵠⵠ, 1],
		[1, ᐃ[153], 1, 37, ⲆⲆΔⵠⲆ, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⵠⵠ, 38, ᐃΔΔⵠΔ, 1],
		[Δⵠᐃ, ᐃ[153], 2, 37, 11, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 37, 16, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 37, ⵠΔⲆᐃⵠ, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⵠᐃ, 38, ⵠΔⲆᐃΔ, ΔΔⵠ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 37, ΔᐃᐃΔΔ, 1],
		[1, ᐃ[153], ⵠⵠⲆᐃ, 38, 16, ⲆⵠⲆ],
		[1, ᐃ[153], 0, 37, 21, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], 0, 38, 22, 1],
		[1, ᐃ[153], 0, 38, 24, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆⵠᐃ, 37, 20, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 38, ⵠⲆΔⲆⲆ, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 38, 21, 1],
		[ⵠᐃᐃ, ᐃ[153], 1, 37, 23, 1],
		[ⵠᐃᐃ, ᐃ[153], 3, 37, 22, ⲆⵠⲆ],
		[1, ᐃ[153], 3, 38, 23, 1],
		[1, ᐃ[153], 2, 37, 24, 1],
		[1, ᐃ[153], ⲆⲆΔ, 38, 30, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⵠᐃ, 38, 32, 1],
		[ⵠᐃᐃ, ᐃ[153], 0, 37, 31, 1],
		[ΔΔⵠ, ᐃ[153], ⵠᐃᐃ, 38, 34, ᐃⲆⲆ],
		[1, ᐃ[153], 1, 37, 29, 1],
		[1, ᐃ[153], 2, 38, 29, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], 2, 37, 30, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 38, 31, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⵠΔⲆ, 37, 32, ⲆⲆⵠ],
		[1, ᐃ[153], ⲆΔⲆⲆ, 38, 33, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠᐃⵠⲆ, 38, 35, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⲆΔᐃ, 37, 33, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], 2, 36, 8, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], 0, 36, ⵠⵠⲆᐃΔ, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], 0, 35, 9, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃⲆ, 36, ΔᐃΔⲆⵠ, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 36, ΔΔⵠⲆⵠ, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠΔⵠ, 35, 10, 1],
		[1, ᐃ[153], 1, 33, ⲆⲆᐃⲆⵠ, 1],
		[ΔΔⵠ, ᐃ[153], 3, 34, 9, 1],
		[1, ᐃ[153], 3, 35, 8, Δⵠᐃ],
		[1, ᐃ[153], 2, 34, ⲆⲆᐃⲆⵠ, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠⵠ, 36, 7, 1],
		[ⲆⵠⲆ, ᐃ[153], 1, 34, ⵠΔⵠᐃⲆ, Δⵠᐃ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 35, 7, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 35, 6, 1],
		[ΔΔⵠ, ᐃ[153], 2, 36, ΔⲆⵠΔᐃ, Δⵠᐃ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 68, 9, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 66, 10, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], ⵠᐃⵠⲆ, 66, 9, 1],
		[Δⵠᐃ, ᐃ[153], 0, 67, 9, 1],
		[1, ᐃ[153], ⵠⵠⵠ, 66, ⲆⲆᐃⲆⵠ, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠᐃⲆ, 67, Δᐃⵠⵠᐃ, 1],
		[ⲆⲆⵠ, ᐃ[153], ΔΔⵠ, 68, Δᐃⵠⵠᐃ, 1],
		[1, ᐃ[153], 1, 66, ΔΔΔⲆⵠᐃⲆ, 1],
		[Δⵠᐃ, ᐃ[153], 2, 67, ᐃᐃᐃⲆⵠ, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃⲆΔ, 66, 6, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 66, 7, Δⵠᐃ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 67, 7, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃⲆ, 69, Δᐃⵠⵠᐃ, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 63, 32, 1],
		[ΔΔⵠ, ᐃ[153], ᐃᐃⲆⵠ, 62, 34, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 60, 35, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⵠⲆⲆ, 59, 35, 1],
		[1, ᐃ[153], ⵠᐃⵠ, 61, 35, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], Δⵠⵠ, 63, 34, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 63, 33, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 63, 35, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 62, 35, 1],
		[1, ᐃ[153], 2, 58, 36, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], ⵠᐃᐃ, 59, 36, 1],
		[1, ᐃ[153], 1, 62, 36, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⵠᐃ, 60, 36, 1],
		[ΔΔⵠ, ᐃ[153], ᐃᐃⲆⵠ, 61, 34, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], ⲆΔⲆⲆ, 62, 33, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⵠⲆᐃ, 63, 36, Δⵠᐃ],
		[1, ᐃ[153], 3, 61, 36, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], 0, 42, 36, Δⵠᐃ],
		[1, ᐃ[153], ⲆⲆⵠ, 39, 36, ΔΔⵠ],
		[1, ᐃ[153], 2, 41, 36, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], ΔᐃΔⲆ, 39, 35, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃΔᐃⲆ, 40, 36, Δⵠᐃ],
		[1, ᐃ[153], 3, 43, 36, 1],
		[ⵠᐃᐃ, ᐃ[153], ⲆⵠⲆ, 40, 35, 1],
		[ΔΔⵠ, ᐃ[153], 2, 41, 35, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃⲆ, 40, 34, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⲆΔᐃ, 39, 34, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 39, 33, 1],
		[ⵠᐃᐃ, ᐃ[153], ᐃⲆⵠᐃ, 39, 32, 1],
		[1, ᐃ[153], ⵠᐃⵠ, 40, 33, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 41, 34, ᐃⲆⲆ],
		[1, ᐃ[153], 1, 44, 36, 1],
		[ⵠᐃᐃ, ᐃ[153], 3, 43, 35, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 42, 35, 1],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆΔ, 37, 34, 1],
		[1, ᐃ[153], 3, 59, 30, ⵠᐃᐃ],
		[1, ᐃ[153], 0, 60, 29, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 60, 28, ⲆⲆⵠ],
		[1, ᐃ[153], ⲆⲆΔΔ, 60, 27, 1],
		[1, ᐃ[153], ⲆⲆΔ, 60, 26, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 54, 25, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 48, 25, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⲆΔᐃ, 42, 26, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], ⲆⲆΔ, 55, 25, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 59, 26, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠᐃⵠ, 43, 26, 1],
		[1, ᐃ[153], ᐃⲆⲆ, 42, 27, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 42, 28, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], 2, 43, 30, 1],
		[ⲆⵠⲆ, ᐃ[153], Δⵠⵠ, 42, 29, 1],
		[ΔΔⵠ, ᐃ[153], 0, 54, 24, 1],
		[Δⵠᐃ, ᐃ[153], ⲆⲆΔ, 48, 24, Δⵠᐃ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 54, 23, 1],
		[1, ᐃ[153], 2, 48, 23, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 63, 22, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 63, 21, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⲆΔᐃ, 39, 21, 1],
		[1, ᐃ[153], 3, 57, ⲆᐃΔΔᐃ, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 56, 18, 1],
		[1, ᐃ[153], ΔᐃΔⲆ, 51, 21, 1],
		[1, ᐃ[153], 0, 51, 20, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 51, 19, 1],
		[1, ᐃ[153], ⲆⵠⵠⲆ, 51, 18, 1],
		[ΔΔⵠ, ᐃ[153], 2, 63, 16, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃⵠΔⲆ, 63, ᐃᐃᐃⲆⵠ, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 56, 13, ΔΔⵠ],
		[1, ᐃ[153], 3, 57, 13, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⲆ, 45, ⵠΔⲆᐃΔ, 1],
		[ΔΔⵠ, ᐃ[153], 2, 47, ⲆᐃΔΔᐃ, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], 2, 46, ᐃⵠⲆⲆΔ, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠⵠ, 46, ΔⲆΔⵠᐃ, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 45, 13, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 39, ΔΔⲆΔΔ, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 39, ΔⵠⲆᐃⲆ, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃⲆ, 47, 17, ᐃⲆⲆ],
		[1, "a", ⵠⵠᐃ, 51, 15, ⲆⵠⲆ],
		[1, "a", ⲆⵠⲆ, 53, 14, ⲆⲆⵠ],
		[ᐃⲆⲆ, "a", 1, 49, ΔⲆᐃΔⵠᐃᐃ, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], ⲆⲆᐃⲆⵠ, 55, 15, Δⵠⵠ],
		[1, ᐃ[457], 9, 48, 28, Δⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], ᐃᐃᐃⲆⵠ, 58, 26, 0],
		[ⲆⵠⲆ, ᐃ[457], ⲆΔΔⵠⵠ, 59, 29, ᐃⲆᐃ],
		[1, ᐃ[457], ᐃΔΔᐃⲆᐃΔ, 55, 34, ᐃⲆᐃ],
		[1, ᐃ[457], 10, 48, 33, Ⲇⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], ⲆⲆⵠⵠᐃ, 41, 32, 0],
		[1, ᐃ[457], 9, 56, 24, ᐃⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 9, 62, 16, Ⲇⵠᐃ],
		[ⵠᐃᐃ, ᐃ[457], ⵠᐃΔⲆⲆ, 45, 11, Ⲇⵠᐃ],
		[1, ᐃ[457], 9, 44, 17, ⲆⲆΔ],
		[1, ᐃ[457], ΔΔⲆΔΔ, 44, ΔΔΔᐃᐃ, ⵠⵠᐃ],
		[1, ᐃ[457], 10, 58, 13, ᐃⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 10, 63, 31, ᐃⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], 8, 60, 30, 0],
		[ⵠᐃᐃ, ᐃ[457], 8, 43, 26, 0],
		[1, ᐃ[457], 10, 43, 29, 0],
		[ⵠᐃᐃ, ᐃ[457], ⲆΔᐃⵠΔ, 53, 29, 0],
		[ⲆⲆⵠ, ᐃ[457], 10, 53, 24, ᐃⲆᐃ],
		[ᐃⲆⲆ, ᐃ[457], 9, 53, ΔΔΔⲆᐃ, ᐃⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], 11, 49, ΔΔΔⲆᐃ, ⵠⵠⵠ],
		[1, ᐃ[457], 10, 39, 26, 0],
		[Δⵠᐃ, ᐃ[457], 9, 46, 24, 0],
		[1, ᐃ[457], 9, 62, 10, Ⲇⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], 8, 40, 14, ⵠᐃΔ],
		[ⵠᐃᐃ, ᐃ[457], 32, 55, 35, 0],
		[ⲆⵠⲆ, ᐃ[457], 32, 60, 33, ⲆⲆΔ],
		[1, ᐃ[457], 32, 63, 28, 0],
		[1, ᐃ[457], 32, 63, 24, 0],
		[1, ᐃ[457], 32, 58, 22, 0],
		[1, ᐃ[457], 32, 59, 17, ⵠⵠⵠ],
		[1, ᐃ[457], 32, 63, 13, ᐃⲆᐃ],
		[1, ᐃ[457], 32, 59, 10, Ⲇⵠᐃ],
		[1, ᐃ[457], 32, 56, 12, ⵠⵠᐃ],
		[1, ᐃ[457], 32, 52, 17, 0],
		[1, ᐃ[457], 32, 51, 14, ⵠᐃΔ],
		[1, ᐃ[457], 32, 39, 12, 0],
		[ⵠᐃᐃ, ᐃ[457], 32, 39, 18, ⵠᐃⵠ],
		[1, ᐃ[457], 32, 41, 25, 0],
		[ΔΔⵠ, ᐃ[457], 32, 39, 30, 0],
		[1, ᐃ[457], 32, 50, 29, 0],
		[1, ᐃ[457], 32, 43, 34, ᐃⲆᐃ],
		[1, ᐃ[457], 32, 47, 34, ⵠⵠⵠ],
		[1, ᐃ[457], 31, 54, 33, ⵠⵠⵠ],
		[1, ᐃ[457], 31, 59, 24, 0],
		[1, ᐃ[457], 31, 63, 19, 0],
		[1, ᐃ[457], 31, 47, 15, ᐃⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], 31, 43, ⲆⵠⲆⲆΔΔΔ, 0],
		[ⲆⲆⵠ, ᐃ[457], 31, 39, 27, 0],
		[1, ᐃ[457], 31, 48, 27, 0],
		[1, ᐃ[457], 31, 57, 27, ⵠᐃΔ],
		[ⵠᐃᐃ, ᐃ[457], 32, 44, 27, ᐃⲆΔ],
		[1, "d", 0, 12, 13, 1],
		[1, "d", 0, 89, 13, ⵠᐃᐃ],
		[1, "d", ⲆⲆⵠ, 91, 21, ⲆⲆⵠ],
		[ⲆⵠⲆ, "d", Δⵠᐃ, ᐃⲆᐃⲆⲆ, 22, 1],
		[ⵠᐃᐃ, "f", ᐃᐃⲆⵠ, 89, 18, Δⵠᐃ],
		[ᐃⲆⲆ, "f", 0, 88, ⲆⵠⲆⵠⲆ, 1],
		[1, "g", 1, 85, 22, 1],
		[ΔΔⵠ, "s", 1, 90, 29, 1],
		[ΔΔⵠ, "s", 1, 92, ⲆⲆᐃⵠⲆⵠⵠ, 1],
		[1, "s", 0, 91, 31, 1],
		[ⲆⲆⵠ, "s", 2, 90, 38, ⲆⲆⵠ],
		[ⲆⵠⲆ, "s", 0, 91, 42, ΔΔⵠ],
		[1, "s", 0, 90, 49, 1],
		[1, "f", ⲆⵠⲆ, 86, 43, ᐃⲆⲆ],
		[1, "f", 0, 81, 45, ⵠᐃᐃ],
		[1, "f", 2, 66, 44, ⵠᐃᐃ],
		[1, "f", ⵠⵠᐃⲆ, 55, 49, 1],
		[ⲆⵠⲆ, "f", 1, 54, 50, Δⵠᐃ],
		[ⲆⵠⲆ, "f", 2, 43, 45, 1],
		[ⲆⵠⲆ, "f", ⵠⲆΔᐃ, 31, 48, ⲆⵠⲆ],
		[1, "f", ⲆⲆⵠ, 27, 39, ΔΔⵠ],
		[1, "f", 1, 80, 46, ⲆⵠⲆ],
		[1, "f", 1, 69, 48, ⲆⵠⲆ],
		[1, "g", Δⵠⵠ, 80, 40, Δⵠᐃ],
		[ⲆⲆⵠ, "g", 2, 81, 40, ⲆⵠⲆ],
		[1, "s", 2, 77, 39, 1],
		[ⵠᐃᐃ, "s", 0, 68, 43, ΔΔⵠ],
		[ⲆⵠⲆ, "s", ᐃⲆⵠᐃ, 57, 41, 1],
		[1, "s", ᐃⲆⲆ, 56, 42, 1],
		[1, "s", ⲆⵠⲆ, 40, 41, ⲆⲆⵠ],
		[ⵠᐃᐃ, "s", 2, 48, 48, ⲆⵠⲆ],
		[ⵠᐃᐃ, "f", ⵠⲆΔᐃ, ᐃΔᐃᐃᐃⲆΔ, ᐃⲆⲆΔⵠ, 1],
		[ⲆⵠⲆ, "f", 0, 13, 31, ΔΔⵠ],
		[Δⵠᐃ, "f", ⵠᐃᐃ, ⵠⵠⲆⵠⵠ, 32, 1],
		[Δⵠᐃ, "s", ⲆⲆᐃ, ⲆⵠΔΔᐃ, 27, ΔΔⵠ],
		[ΔΔⵠ, "s", ⲆⲆΔ, 13, 39, ᐃⲆⲆ],
		[1, "f", 2, 11, ᐃΔᐃᐃᐃⲆΔ, ⵠᐃᐃ],
		[1, "f", 1, ΔⲆⵠᐃⵠ, ᐃⲆΔΔⲆ, 1],
		[1, "g", 2, 12, 25, ⲆⵠⲆ],
		[1, "f", 0, ᐃΔᐃⲆⲆ, 45, ⵠᐃᐃ],
		[ⲆⵠⲆ, "f", 1, 17, 46, ⲆⵠⲆ],
		[1, "s", 1, 74, 48, 1],
		[Δⵠᐃ, "s", 1, ⲆΔⲆⲆⵠ, 47, 1],
		[1, "g", 0, 58, 59, 1],
		[1, "g", Ⲇⵠᐃ, 46, 72, 1],
		[1, "g", ⵠᐃⵠ, 69, 79, 1],
		[1, "g", 0, 72, 74, 1],
		[ΔΔⵠ, "g", 0, 26, 88, 1],
		[1, "g", 0, 20, 74, 1],
		[ΔΔⵠ, "g", 0, 28, 67, ᐃⲆⲆ],
		[1, "g", Ⲇⵠᐃ, 49, 86, 1],
		[1, "g", 0, 77, 90, ⲆⲆⵠ],
		[Δⵠᐃ, "g", 0, 87, 72, ᐃⲆⲆ],
		[1, "g", 0, 14, 85, 1],
		[1, "g", 1, 85, 97, ⲆⵠⲆ],
		[ⲆⵠⲆ, "g", ⵠᐃᐃ, 68, 104, ΔΔⵠ],
		[ᐃⲆⲆ, "g", 1, 63, 91, ᐃⲆⲆ],
		[1, "g", 1, 39, 90, 1],
		[Δⵠᐃ, "g", 1, 34, 99, ᐃⲆⲆ],
		[ΔΔⵠ, "g", 1, ⵠΔⲆᐃⵠ, 103, 1],
		[1, "g", ⵠⵠΔⵠ, 77, 60, 1],
		[ⲆⲆⵠ, "g", ᐃⵠΔⲆ, ΔᐃⵠⲆⲆ, 56, 1],
		[1, "g", 2, 39, 60, 1],
		[ΔΔⵠ, "g", 2, 87, 57, ⲆⲆⵠ],
		[1, "f", 0, 9, 62, 1],
		[ΔΔⵠ, "f", ᐃⲆᐃ, ⲆᐃⵠⲆⵠ, 81, ⵠᐃᐃ],
		[ⲆⵠⲆ, "f", 0, 26, 59, ΔΔⵠ],
		[1, "f", 0, 35, 53, ⲆⵠⲆ],
		[ⵠᐃᐃ, "f", 0, 44, 58, Δⵠᐃ],
		[ΔΔⵠ, "f", 0, 88, 62, ᐃⲆⲆ],
		[ⲆⵠⲆ, "f", ᐃⲆᐃ, 91, 82, 1],
		[ⲆⵠⲆ, "f", 0, 84, 85, 1],
		[1, "f", ⵠᐃΔ, 79, 69, 1],
		[ⵠᐃᐃ, "f", Δⵠⵠ, 64, 71, ⲆⲆⵠ],
		[ⵠᐃᐃ, "f", ⵠᐃⵠ, 62, 83, Δⵠᐃ],
		[1, "f", Δⵠⵠ, 34, 81, 1],
		[1, "f", 0, 39, 71, ⵠᐃᐃ],
		[1, "f", ⵠᐃΔ, 54, 94, ᐃⲆⲆ],
		[1, "f", 1, 81, 70, 1],
		[ᐃⲆⲆ, "f", ΔΔⵠ, 91, 72, Δⵠᐃ],
		[ⲆⲆⵠ, "f", 1, Δᐃⵠⵠᐃ, 91, 1],
		[ⵠᐃᐃ, "f", ⵠᐃᐃ, ΔᐃⵠⲆⵠ, 81, 1],
		[1, "f", Δⵠᐃ, 29, 79, Δⵠᐃ],
		[ᐃⲆⲆ, "f", ⲆⵠⲆ, 13, 65, 1],
		[ⲆⲆⵠ, "f", ᐃⲆⲆ, 46, 97, ΔΔⵠ],
		[1, "f", ΔΔⵠ, 43, 73, 1],
		[1, "f", 1, 60, 69, ⲆⲆⵠ],
		[ΔΔⵠ, "f", Δⵠᐃ, 70, 96, ΔΔⵠ],
		[1, "f", ᐃⲆⲆ, 58, 84, 1],
		[1, "s", 1, 56, 76, 1],
		[Δⵠᐃ, "s", ΔΔⵠ, 85, 74, 1],
		[1, "s", 0, 72, 71, ⵠᐃᐃ],
		[1, "s", ⲆⲆᐃ, 41, 62, 1],
		[1, "s", 0, 60, 61, 1],
		[1, "s", 0, 20, 66, 1],
		[Δⵠᐃ, "s", 0, 47, 83, 1],
		[Δⵠᐃ, "s", ᐃⲆᐃ, 29, 86, 1],
		[ⵠᐃᐃ, "s", 0, 78, 92, ⲆⲆⵠ],
		[ΔΔⵠ, "s", ⵠᐃⵠ, 62, 102, 1],
		[Δⵠᐃ, "s", ⲆⲆᐃ, ⵠΔⲆᐃΔ, 95, ⲆⲆⵠ],
		[ⵠᐃᐃ, "s", ᐃᐃⲆⵠ, 64, 101, 1],
		[1, "s", ⵠⲆΔᐃ, 78, 84, 1],
		[1, "s", 2, 49, 83, 1],
		[1, "s", 2, ⲆᐃⲆⵠⵠ, 76, 1],
		[1, "s", ᐃᐃⲆⵠ, 21, 84, 1],
		[ⲆⵠⲆ, "f", ΔΔⵠ, 26, 94, 1],
		[1, "f", 2, 23, 96, ⲆⲆⵠ],
		[ⵠᐃᐃ, "f", ᐃⲆⵠᐃ, 25, 72, ᐃⲆⲆ],
		[ⲆⲆⵠ, "f", 2, 85, 77, 1],
		[ΔΔⵠ, "f", 2, 79, 95, ⵠᐃᐃ],
		[1, "f", 2, 51, 65, Δⵠᐃ],
		[1, "f", ⵠⵠΔⵠ, 69, 60, 1],
		[1, "f", ⲆⵠⲆ, 25, 105, Δⵠᐃ],
		[1, "s", ᐃⲆⲆ, 18, 68, ⲆⲆⵠ],
		[1, "s", 0, 55, 76, ⲆⵠⲆ],
		[Δⵠᐃ, "s", ⵠⵠᐃ, 74, 59, 1],
		[1, "f", ⵠᐃᐃ, 46, 142, 1],
		[1, "f", ⲆⲆⵠ, 19, 140, 1],
		[1, "f", ΔΔⵠ, 77, 137, ⲆⲆⵠ],
		[1, "f", 0, 75, 137, ᐃⲆⲆ],
		[1, "f", 0, 55, 138, 1],
		[Δⵠᐃ, "f", ᐃⲆΔ, 33, 127, 1],
		[ΔΔⵠ, "f", ⵠᐃⵠ, 76, 121, ΔΔⵠ],
		[1, "f", Δⵠⵠ, 55, 121, 1],
		[1, "f", Ⲇⵠᐃ, ⲆΔΔΔⲆ, 123, ⵠᐃᐃ],
		[ⵠᐃᐃ, "f", ⵠⵠⵠ, 18, 141, 1],
		[1, "f", 0, 40, 137, Δⵠᐃ],
		[Δⵠᐃ, "f", ᐃⵠΔⲆ, 76, 142, ⲆⵠⲆ],
		[1, "f", 2, 57, 140, 1],
		[1, "f", ᐃⲆⵠᐃ, 39, 138, ᐃⲆⲆ],
		[ⲆⵠⲆ, "f", 2, ΔⵠⲆᐃⲆ, 143, 1],
		[1, "f", ᐃᐃⲆⵠ, 29, 131, 1],
		[ⲆⵠⲆ, "f", 0, 70, 150, 1],
		[ⲆⲆⵠ, "f", 0, 28, 146, 1],
		[ⵠᐃᐃ, "f", ⵠⵠᐃ, ⲆⵠⲆᐃⵠ, 132, ΔΔⵠ],
		[ⵠᐃᐃ, "f", ᐃⲆᐃ, 90, 129, 1],
		[1, "f", ⲆⵠⲆ, 87, 131, 1],
		[Δⵠᐃ, "f", 0, 91, 143, 1],
		[ⲆⲆⵠ, "f", ⵠⲆΔᐃ, 87, 145, 1],
		[ⲆⲆⵠ, "f", Δⵠᐃ, 89, 141, 1],
		[ΔΔⵠ, "f", ⵠᐃᐃ, 63, 130, 1],
		[ⵠᐃᐃ, "f", 1, 75, 122, 1],
		[1, "f", ⲆⲆⵠ, 52, 124, ⲆⵠⲆ],
		[1, "f", 1, 34, 127, 1],
		[ᐃⲆⲆ, "f", ⵠᐃᐃ, ᐃⲆⵠⵠᐃ, 123, ⵠᐃᐃ],
		[1, "f", ᐃⲆⲆ, 24, 122, ⵠᐃᐃ],
		[1, "f", 0, 83, 108, ΔΔⵠ],
		[1, "f", ⵠᐃΔ, 89, 118, 1],
		[Δⵠᐃ, "f", ᐃⲆᐃ, 56, 107, ᐃⲆⲆ],
		[ⵠᐃᐃ, "f", 0, 38, 113, ⲆⲆⵠ],
		[1, "f", ⲆⲆᐃ, 16, 110, ΔΔⵠ],
		[1, "f", 1, 80, 105, ᐃⲆⲆ],
		[ΔΔⵠ, "f", 1, 82, 109, ᐃⲆⲆ],
		[1, "f", 1, 87, 118, ⲆⵠⲆ],
		[ᐃⲆⲆ, "f", ⲆⲆⵠ, 59, 110, ᐃⲆⲆ],
		[ⲆⲆⵠ, "f", 1, 29, 111, ΔΔⵠ],
		[ᐃⲆⲆ, "f", 2, 28, 112, 1],
		[ᐃⲆⲆ, "f", 2, 70, 112, 1],
		[ⲆⲆⵠ, "f", 2, 42, 111, 1],
		[Δⵠᐃ, "s", ᐃⲆΔ, 68, 157, 1],
		[ⲆⵠⲆ, "s", 0, 81, 158, ⵠᐃᐃ],
		[1, "s", 0, 25, 172, 1],
		[Δⵠᐃ, "s", ᐃⲆᐃ, 22, 161, 1],
		[ⲆⵠⲆ, "s", 0, 35, 152, 1],
		[Δⵠᐃ, "s", 0, 66, 144, 1],
		[1, "s", 0, 87, 145, 1],
		[ⲆⵠⲆ, "s", 0, 86, 145, ΔΔⵠ],
		[1, "s", Δⵠⵠ, 84, 135, Δⵠᐃ],
		[1, "s", 0, 69, 133, ᐃⲆⲆ],
		[1, "s", ⵠᐃⵠ, 84, 122, ⲆⲆⵠ],
		[ⵠᐃᐃ, "s", ⲆⲆΔ, 68, 121, ⲆⲆⵠ],
		[1, "s", ⵠⵠᐃ, 48, 124, 1],
		[1, "s", ⲆⲆΔ, 26, 129, 1],
		[1, "s", 0, ΔⲆΔᐃΔ, 127, 1],
		[1, "s", 0, ᐃⵠΔⲆⲆ, 144, ⲆⵠⲆ],
		[ΔΔⵠ, "s", Δⵠⵠ, ⵠⵠⵠᐃⵠ, 109, ⵠᐃᐃ],
		[1, "s", ᐃⲆΔ, 35, 101, ⵠᐃᐃ],
		[Δⵠᐃ, "s", 0, 47, 109, ᐃⲆⲆ],
		[ⲆⲆⵠ, "s", ⵠᐃⵠ, 58, 111, ⲆⵠⲆ],
		[1, "s", 0, 84, 110, 1],
		[ⵠᐃᐃ, "s", ⵠᐃΔ, 28, 114, ᐃⲆⲆ],
		[1, "s", 1, 30, 116, ⲆⲆⵠ],
		[ⲆⵠⲆ, "s", Δⵠᐃ, 46, 112, 1],
		[ΔΔⵠ, "s", ΔΔⵠ, 81, 111, 1],
		[1, "s", 1, 70, 123, 1],
		[ᐃⲆⲆ, "s", 1, 49, 127, 1],
		[1, "s", 1, 66, 134, 1],
		[1, "s", ⲆⵠⲆ, 67, 144, ⲆⲆⵠ],
		[ⲆⲆⵠ, "s", ᐃⲆⲆ, 38, 152, ⲆⵠⲆ],
		[ᐃⲆⲆ, "s", 1, 21, 164, ⵠᐃᐃ],
		[ᐃⲆⲆ, "s", 1, 12, 147, ⲆⲆⵠ],
		[ⲆⲆⵠ, "s", 1, 24, 130, 1],
		[ᐃⲆⲆ, "s", ⲆⵠⲆ, 12, 125, 1],
		[ⵠᐃᐃ, "s", 1, 65, 158, ΔΔⵠ],
		[ⵠᐃᐃ, "s", 1, 83, 167, 1],
		[1, "s", 1, 65, 167, ⲆⵠⲆ],
		[ᐃⲆⲆ, "s", ΔΔⵠ, 47, 164, 1],
		[1, "s", ᐃⲆⲆ, 56, 168, ⲆⲆⵠ],
		[ⵠᐃᐃ, "s", 2, 54, 169, ᐃⲆⲆ],
		[ⲆⲆⵠ, "s", ⵠⲆΔᐃ, 88, 170, 1],
		[ⲆⲆⵠ, "s", ⵠⵠΔⵠ, 91, 162, ⲆⵠⲆ],
		[1, "s", 2, 79, 149, ⵠᐃᐃ],
		[ΔΔⵠ, "s", ⵠⵠᐃⲆ, 75, 144, ⲆⵠⲆ],
		[1, "s", 2, 57, 150, Δⵠᐃ],
		[1, "s", 2, 47, 143, Δⵠᐃ],
		[1, "s", 2, 31, 145, ᐃⲆⲆ],
		[1, "s", ⵠⵠᐃⲆ, 36, 138, Δⵠᐃ],
		[1, "s", 2, 10, 163, 1],
		[1, "s", ᐃᐃⲆⵠ, 22, 142, 1],
		[1, "g", 2, 78, 132, ΔΔⵠ],
		[Δⵠᐃ, "g", ΔΔⵠ, 48, 135, 1],
		[ΔΔⵠ, "g", ᐃᐃⲆⵠ, 16, 136, ⲆⲆⵠ],
		[ⲆⵠⲆ, "g", ⲆⲆΔ, 62, 92, ⲆⵠⲆ],
		[ΔΔⵠ, "g", ᐃᐃⲆⵠ, 70, 80, ⲆⲆⵠ],
		[ⲆⵠⲆ, "g", ⵠⵠᐃⲆ, ⵠⵠΔⵠᐃ, 86, Δⵠᐃ],
		[ⲆⵠⲆ, "g", 2, 47, 75, 1],
		[1, "g", ⵠⵠᐃⲆ, 36, 89, 1],
		[1, "g", 2, 80, 90, 1],
		[ΔΔⵠ, "f", Δⵠᐃ, 39, 118, 1],
		[1, "d", 2, 84, 54, ᐃⲆⲆ],
		[ⲆⵠⲆ, "d", ᐃᐃⲆⵠ, ⵠᐃᐃⵠⵠ, 54, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[457], ⲆΔᐃᐃⲆ, ⲆⵠᐃᐃⲆᐃⵠ, ⲆⵠᐃᐃⲆᐃⵠ, ⵠⵠᐃ],
		[1, ᐃ[457], 5, ⲆⵠᐃΔΔ, 28, 0],
		[ⵠᐃᐃ, ᐃ[457], 5, 9, 25, 0],
		[1, ᐃ[457], 5, 34, 41, ⵠⵠᐃ],
		[1, ᐃ[457], 4, 28, 40, ᐃⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 6, 31, 47, ⵠⵠⵠ],
		[1, ᐃ[457], ⵠΔΔⵠⲆ, ᐃⲆⲆΔⵠ, 39, 0],
		[1, ᐃ[457], ΔⲆΔⲆ, ⲆⲆΔᐃᐃ, 47, ⲆⲆΔ],
		[1, ᐃ[457], ΔΔⲆΔ, ⵠᐃⵠⲆⲆ, 46, ᐃⲆΔ],
		[1, ᐃ[457], 6, 7, 33, ⵠᐃⵠ],
		[1, ᐃ[457], ΔⲆⵠΔᐃ, 40, 42, 0],
		[Δⵠᐃ, ᐃ[457], 7, ⲆⵠᐃΔⲆ, 48, 0],
		[1, ᐃ[457], 7, 29, 59, 0],
		[1, ᐃ[457], ⵠΔΔⵠⲆ, 27, 58, ⵠᐃⵠ],
		[1, ᐃ[457], ⲆⲆⲆⵠΔ, 15, 54, ⵠⵠᐃ],
		[Δⵠᐃ, ᐃ[457], 5, ⲆⵠⲆᐃⵠ, 66, 0],
		[ⲆⲆⵠ, ᐃ[457], ΔⲆⵠⵠ, 37, 53, ᐃⲆΔ],
		[Δⵠᐃ, ᐃ[457], ⵠΔᐃⲆ, ᐃⲆᐃⲆⲆ, 63, 0],
		[1, ᐃ[457], ᐃΔᐃᐃⲆ, 49, 48, 0],
		[1, ᐃ[457], ᐃΔᐃᐃⲆ, 37, 63, ᐃⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], ⵠΔΔⵠⲆ, 33, 68, 0],
		[ᐃⲆⲆ, ᐃ[457], 6, 56, 52, ⵠᐃΔ],
		[ⵠᐃᐃ, ᐃ[457], 5, 59, 58, 0],
		[ΔΔⵠ, ᐃ[457], 6, 48, 58, 0],
		[1, ᐃ[457], 4, 53, 63, ᐃⲆΔ],
		[1, ᐃ[457], ⵠΔᐃⲆ, 67, 44, ⵠᐃⵠ],
		[1, ᐃ[457], ⵠΔⲆᐃ, 70, 49, 0],
		[1, ᐃ[457], ⵠᐃⲆᐃ, 82, 55, 0],
		[ⵠᐃᐃ, ᐃ[457], ᐃⵠΔⵠ, 79, 41, 0],
		[ᐃⲆⲆ, ᐃ[457], ⵠⲆⲆⵠ, 91, 29, 0],
		[ⲆⲆⵠ, ᐃ[457], 7, 91, 43, 0],
		[1, ᐃ[457], ⵠⵠⲆⲆⵠ, 85, 44, 0],
		[ᐃⲆⲆ, ᐃ[457], ΔⲆⵠΔᐃ, 74, 60, ⵠᐃⵠ],
		[ᐃⲆⲆ, ᐃ[457], 6, 90, Δᐃⵠⵠᐃ, 0],
		[1, ᐃ[457], 5, 91, 15, ⵠⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 4, 87, ⲆⲆⲆⲆᐃ, 0],
		[ⲆⲆⵠ, ᐃ[457], 7, 93, 11, 0],
		[1, ᐃ[457], ⵠⲆⵠⲆⵠ, 91, 21, 0],
		[ⵠᐃᐃ, ᐃ[457], ᐃⵠⵠᐃⵠ, 85, 35, 0],
		[ΔΔⵠ, ᐃ[457], ⵠᐃⲆᐃ, 93, 58, 0],
		[1, ᐃ[457], ᐃⵠΔⵠ, 87, 63, 0],
		[1, ᐃ[457], ⲆΔᐃᐃⲆ, 77, 62, 0],
		[ⲆⲆⵠ, ᐃ[457], 6, 68, 61, Ⲇⵠᐃ],
		[Δⵠᐃ, ᐃ[457], ⵠᐃⲆᐃ, 90, 73, 0],
		[ⵠᐃᐃ, ᐃ[457], 4, 87, 71, ᐃⲆΔ],
		[1, ᐃ[457], 7, 80, 71, ᐃⲆΔ],
		[1, ᐃ[457], 7, 83, 77, 0],
		[1, ᐃ[457], ΔⵠᐃΔⲆ, 89, 83, ⵠᐃΔ],
		[ΔΔⵠ, ᐃ[457], ΔⲆΔⲆ, 71, 80, ⲆⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 4, 71, 70, ⵠⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], 5, 63, 72, 0],
		[ⲆⲆⵠ, ᐃ[457], 4, 54, 75, 0],
		[ΔΔⵠ, ᐃ[457], Δᐃᐃⵠ, 44, 83, 0],
		[ⵠᐃᐃ, ᐃ[457], ⵠᐃⲆᐃ, 42, 74, Δⵠⵠ],
		[Δⵠᐃ, ᐃ[457], 5, 15, 81, 0],
		[Δⵠᐃ, ᐃ[457], 4, 29, 80, ᐃⲆᐃ],
		[1, ᐃ[457], 4, 37, 90, 0],
		[1, ᐃ[457], 4, ⵠᐃⵠⲆⲆ, 75, 0],
		[Δⵠᐃ, ᐃ[457], ᐃⵠⵠᐃⵠ, 22, 74, ⵠⵠᐃ],
		[1, ᐃ[457], ⵠΔⵠⵠⲆ, 43, 95, ⵠⵠⵠ],
		[ΔΔⵠ, ᐃ[457], 6, 57, 85, ⲆⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 6, 19, 94, 0],
		[1, ᐃ[457], 6, ⲆⲆⵠⵠᐃ, 92, Ⲇⵠᐃ],
		[1, ᐃ[457], 5, 26, 89, 0],
		[1, ᐃ[457], ⲆⵠⲆᐃ, 31, 112, 0],
		[Δⵠᐃ, ᐃ[457], ⵠⲆⲆⵠ, 54, 108, 0],
		[1, ᐃ[457], ⵠⲆⲆⵠ, 55, 95, ⵠⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], 5, 35, 104, ⲆⲆΔ],
		[1, ᐃ[457], ᐃᐃᐃᐃ, ᐃᐃΔΔΔ, 110, 0],
		[ⵠᐃᐃ, ᐃ[457], ᐃΔᐃᐃⲆ, 27, 107, 0],
		[1, ᐃ[457], ⵠⵠᐃⵠᐃ, 47, 99, ᐃⲆᐃ],
		[1, ᐃ[457], ΔⵠᐃΔⲆ, 11, 104, ⵠⵠᐃ],
		[ΔΔⵠ, ᐃ[457], ΔⵠᐃΔⲆ, 9, 111, ⲆⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 7, 40, 114, ⵠᐃΔ],
		[ΔΔⵠ, ᐃ[457], 7, 28, 117, 0],
		[ⲆⵠⲆ, ᐃ[457], ⵠⲆᐃΔⵠ, 47, 113, 0],
		[1, ᐃ[457], 7, 63, 104, 0],
		[ⲆⵠⲆ, ᐃ[457], 4, 64, 92, ⲆⲆᐃ],
		[1, ᐃ[457], 6, 86, 97, Ⲇⵠᐃ],
		[1, ᐃ[457], ⵠᐃⲆᐃ, 76, 91, 0],
		[1, ᐃ[457], 5, 85, 86, 0],
		[ⲆⲆⵠ, ᐃ[457], ⲆⲆⲆⵠΔ, 78, 83, ⵠⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], ΔⲆⵠΔᐃ, 71, 97, 0],
		[1, ᐃ[457], ΔⲆΔⲆ, 69, 105, ⲆⲆᐃ],
		[1, ᐃ[457], ⲆⲆⲆΔ, 79, 104, Δⵠⵠ],
		[1, ᐃ[457], ⵠΔᐃⲆ, 86, 109, ᐃⲆᐃ],
		[1, ᐃ[457], 4, 86, 118, 0],
		[Δⵠᐃ, ᐃ[457], ᐃᐃᐃᐃ, 70, 113, ⵠᐃⵠ],
		[ⲆⵠⲆ, ᐃ[457], 6, 69, 121, 0],
		[ᐃⲆⲆ, ᐃ[457], ᐃⵠⵠᐃⵠ, 76, 122, 0],
		[ΔΔⵠ, ᐃ[457], ⲆᐃⲆⲆΔ, 87, 130, ᐃⲆΔ],
		[1, ᐃ[457], 4, 84, 123, 0],
		[ΔΔⵠ, ᐃ[457], 4, 57, 121, ⵠᐃΔ],
		[ᐃⲆⲆ, ᐃ[457], ⵠᐃⲆᐃ, 53, 125, 0],
		[1, ᐃ[457], Δᐃᐃⵠ, 62, 131, 0],
		[ⲆⵠⲆ, ᐃ[457], 6, 67, 143, 0],
		[ΔΔⵠ, ᐃ[457], ⵠⲆⲆⵠ, 77, 143, ⵠⵠⵠ],
		[Δⵠᐃ, ᐃ[457], 5, 85, 136, ᐃⲆΔ],
		[1, ᐃ[457], 6, 87, 147, 0],
		[1, ᐃ[457], 6, 92, 140, 0],
		[1, ᐃ[457], ⲆⲆⲆΔ, 93, 127, ᐃⲆᐃ],
		[1, ᐃ[457], 5, 93, 106, 0],
		[ⵠᐃᐃ, ᐃ[457], 5, 45, 144, ⵠᐃⵠ],
		[1, ᐃ[457], ΔⲆΔⲆ, 41, 139, ⵠᐃⵠ],
		[ᐃⲆⲆ, ᐃ[457], 4, 54, 138, ⵠⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], ⵠΔⵠⵠⲆ, 29, 145, ⵠᐃΔ],
		[1, ᐃ[457], 6, 29, 132, Δⵠⵠ],
		[1, ᐃ[457], 6, 35, 127, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], 6, 64, 142, 0],
		[ᐃⲆⲆ, ᐃ[457], 5, 23, 131, 0],
		[ᐃⲆⲆ, ᐃ[457], Δᐃᐃⵠ, 9, 134, ⲆⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], ⵠΔΔⵠⲆ, 11, 121, 0],
		[ⵠᐃᐃ, ᐃ[457], ΔΔⲆΔ, 26, 121, 0],
		[1, ᐃ[457], 35, 58, 150, Δⵠⵠ],
		[1, ᐃ[457], 33, 48, 156, ᐃⲆᐃ],
		[1, ᐃ[457], 33, 25, 158, 0],
		[ⲆⵠⲆ, ᐃ[457], 33, 36, 154, 0],
		[1, ᐃ[457], 34, 9, 154, 0],
		[1, ᐃ[457], 34, 13, 148, Ⲇⵠᐃ],
		[1, ᐃ[457], 34, 21, 142, ⲆⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 34, 38, 139, ⵠᐃⵠ],
		[1, ᐃ[457], 34, 47, 144, ⵠⵠᐃ],
		[1, ᐃ[457], 34, 68, 142, ⵠⵠⵠ],
		[1, ᐃ[457], 36, 70, 135, ⵠⵠᐃ],
		[1, ᐃ[457], 36, 64, 132, 0],
		[ⵠᐃᐃ, ᐃ[457], 36, 86, 134, ⵠⵠᐃ],
		[1, ᐃ[457], 36, 90, 141, 0],
		[1, ᐃ[457], 36, 93, 131, ⲆⲆΔ],
		[1, ᐃ[457], 36, 91, 125, Ⲇⵠᐃ],
		[1, ᐃ[457], 36, 76, 123, ᐃⲆΔ],
		[1, ᐃ[457], 33, 82, 122, 0],
		[1, ᐃ[457], 35, 56, 122, 0],
		[ΔΔⵠ, ᐃ[457], 35, 40, 119, 0],
		[1, ᐃ[457], 35, 17, 112, ⲆⲆΔ],
		[1, ᐃ[457], 35, 37, 102, 0],
		[1, ᐃ[457], 33, 18, 97, ᐃⲆᐃ],
		[1, ᐃ[457], 34, 10, 83, 0],
		[ⵠᐃᐃ, ᐃ[457], 33, ᐃⵠᐃⲆⲆ, 73, 0],
		[ⲆⲆⵠ, ᐃ[457], 33, 10, 60, 0],
		[1, ᐃ[457], 35, 24, 60, 0],
		[ΔΔⵠ, ᐃ[457], 36, ΔᐃⵠⲆⵠ, 45, 0],
		[1, ᐃ[457], 36, 21, 42, 0],
		[ⲆⵠⲆ, ᐃ[457], 35, ⵠⵠᐃᐃⲆ, 32, ⲆⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 33, ΔᐃΔⲆⵠ, 24, 0],
		[ᐃⲆⲆ, ᐃ[457], 35, 35, 27, 0],
		[ΔΔⵠ, ᐃ[457], 33, 56, 35, ⵠᐃΔ],
		[1, ᐃ[457], 36, 53, 36, 0],
		[1, ᐃ[457], 33, 45, 35, 0],
		[1, ᐃ[457], 35, 53, 39, 0],
		[ᐃⲆⲆ, ᐃ[457], 36, 57, 30, 0],
		[ⲆⵠⲆ, ᐃ[457], 33, 86, 108, ᐃⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 33, 68, 112, ⵠⵠⵠ],
		[1, ᐃ[457], 33, 49, 109, ᐃⲆΔ],
		[1, ᐃ[457], 33, 46, 95, Ⲇⵠᐃ],
		[1, ᐃ[457], 33, 90, 76, 0],
		[ⵠᐃᐃ, ᐃ[457], 36, 76, 83, 0],
		[1, ᐃ[457], 36, 70, 72, 0],
		[1, ᐃ[457], 36, 78, 63, 0],
		[1, ᐃ[457], 36, 90, 64, ⵠᐃⵠ],
		[1, ᐃ[457], 36, 60, 70, 0],
		[ⲆⵠⲆ, ᐃ[457], 35, 75, 90, ⵠᐃΔ],
		[ⵠᐃᐃ, ᐃ[457], 35, 81, 58, 0],
		[ⲆⲆⵠ, ᐃ[457], 35, 91, 51, 0],
		[1, ᐃ[457], 35, 93, 56, ⲆⲆΔ],
		[1, ᐃ[457], 35, 61, 60, 0],
		[ⲆⵠⲆ, ᐃ[457], 35, 66, 46, ⲆⲆΔ],
		[Δⵠᐃ, ᐃ[457], 33, 90, 19, Δⵠⵠ],
		[1, ᐃ[457], 34, 92, ⲆⵠⲆⲆⵠ, ⲆⲆΔ],
		[1, ᐃ[457], 35, 75, 39, 0],
		[ᐃⲆⲆ, ᐃ[457], 35, 67, 42, ⵠⵠᐃ],
		[ⵠᐃᐃ, ᐃ[457], 35, 93, 37, ᐃⲆᐃ],
		[ⲆⲆⵠ, ᐃ[457], 36, 89, 28, 0],
		[1, ᐃ[457], 36, 42, 61, Ⲇⵠᐃ],
		[1, ᐃ[457], 33, 49, 50, 0],
		[ΔΔⵠ, ᐃ[457], 33, 44, 75, 0],
		[1, ᐃ[457], 33, 46, 85, Δⵠⵠ],
		[Δⵠᐃ, ᐃ[457], 33, 64, 84, ᐃⲆΔ],
		[ⲆⵠⲆ, ᐃ[457], 33, 56, 94, ⵠᐃⵠ],
		[1, ᐃ[457], 33, 25, 90, ⵠⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], 33, 31, 69, 0],
		[1, ᐃ[457], 35, 34, 54, 0],
		[ⵠᐃᐃ, ᐃ[457], 35, 29, 47, ⲆⲆᐃ],
		[1, ᐃ[457], 36, 42, 41, 0],
		[1, ᐃ[457], 36, 29, 34, ⲆⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 35, 20, 55, 0],
		[ΔΔⵠ, ᐃ[457], 35, ⵠⵠΔΔⵠ, 52, Ⲇⵠᐃ],
		[ΔΔⵠ, "s", ⵠⵠᐃⲆ, ⵠᐃⲆΔⵠ, 171, ⲆⵠⲆ],
		[Δⵠᐃ, "r", 20, 188, ⵠᐃⵠ],
		[1, "r", 21, 188, Ⲇⵠᐃ],
		[ⵠᐃᐃ, "r", 22, 188, 0],
		[ⵠᐃᐃ, "r", 23, 188, 0],
		[1, "r", 24, 188, ᐃⲆΔ],
		[ⲆⲆⵠ, "r", 25, 189, 0],
		[Δⵠᐃ, "r", 24, 189, 0],
		[1, "r", 23, 189, ⲆⲆΔ],
		[1, "r", 22, 189, 0],
		[ΔΔⵠ, "r", 21, 189, 0],
		[1, "r", ⲆⵠᐃΔⲆ, 189, 0],
		[1, "r", 19, 189, ⵠᐃΔ],
		[ⲆⵠⲆ, "r", ᐃᐃⲆΔⵠ, 190, 0],
		[1, "r", ᐃΔΔⵠΔ, 191, ⲆⲆᐃ],
		[ⲆⲆⵠ, "r", ⲆΔⲆⲆⵠ, 191, ⵠᐃΔ],
		[ΔΔⵠ, "r", 21, 191, 0],
		[1, "r", 22, 191, ⵠⵠᐃ],
		[1, "r", 24, 191, 0],
		[1, "r", 23, 191, 0],
		[1, "r", 25, 191, ⲆⲆΔ],
		[1, "r", 25, 190, ᐃⲆᐃ],
		[Δⵠᐃ, "r", 24, 190, ᐃⲆᐃ],
		[1, "r", 23, 190, 0],
		[ⵠᐃᐃ, "r", 22, 190, ⲆⲆᐃ],
		[ΔΔⵠ, "r", 21, 190, 0],
		[1, "r", 20, 190, 0],
		[1, "r", 26, 190, ᐃⲆᐃ],
		[1, "r", 26, 191, 0],
		[ⵠᐃᐃ, "r", 24, 193, Δⵠⵠ],
		[ⲆⲆⵠ, "r", 23, 193, ⵠⵠᐃ],
		[1, "r", 22, 193, 0],
		[ⵠᐃᐃ, "r", 20, 192, ⵠⵠⵠ],
		[1, "r", 21, 192, 0],
		[1, "r", 22, 192, 0],
		[ⲆⵠⲆ, "r", 23, 192, ⲆⲆᐃ],
		[ⲆⵠⲆ, "r", 24, 192, ᐃⲆΔ],
		[ⲆⵠⲆ, "r", 25, 192, Ⲇⵠᐃ],
		[1, "r", 53, 199, 0],
		[ᐃⲆⲆ, "r", 52, 200, 0],
		[1, "r", 54, 199, ⵠⵠⵠ],
		[1, "r", 55, 199, 0],
		[1, "r", 55, 200, Δⵠⵠ],
		[1, "r", 54, 200, Δⵠⵠ],
		[ⲆⲆⵠ, "r", 53, 200, 0],
		[1, "r", 51, 200, ⵠⵠⵠ],
		[1, "r", 56, 200, 0],
		[Δⵠᐃ, "r", 55, 201, ⲆⲆᐃ],
		[1, "r", 54, 201, 0],
		[ΔΔⵠ, "r", 55, 202, 0],
		[ΔΔⵠ, "r", 54, 203, 0],
		[1, "r", 54, 204, ⲆⲆΔ],
		[ᐃⲆⲆ, "r", 54, 202, 0],
		[ⵠᐃᐃ, "r", 53, 202, 0],
		[ⲆⵠⲆ, "r", 52, 202, Δⵠⵠ],
		[1, "r", 53, 201, 0],
		[1, "r", 52, 201, ⵠⵠᐃ],
		[ᐃⲆⲆ, "r", 51, 201, Ⲇⵠᐃ],
		[ΔΔⵠ, "r", 51, 202, ⵠⵠᐃ],
		[ⵠᐃᐃ, "r", 50, 202, ⲆⲆᐃ],
		[1, "r", 50, 201, 0],
		[Δⵠᐃ, "r", 56, 201, 0],
		[1, "r", 53, 203, 0],
		[1, "r", 52, 203, 0],
		[1, "r", 51, 203, 0],
		[1, "r", 56, 202, Δⵠⵠ],
		[1, "r", 55, 203, ⵠⵠⵠ],
		[ⲆⵠⲆ, "r", 53, 204, Δⵠⵠ],
		[1, "r", 52, 204, 0],
		[Δⵠᐃ, "r", 55, 204, ⲆⲆΔ],
		[Δⵠᐃ, "r", 56, 203, ᐃⲆΔ],
		[ⵠᐃᐃ, "r", 56, 244, 0],
		[1, "r", 54, 246, ⲆⲆΔ],
		[ⵠᐃᐃ, "r", 50, 248, ᐃⲆΔ],
		[ⵠᐃᐃ, "r", 48, 248, ⵠᐃΔ],
		[1, "r", 43, 248, 0],
		[1, "r", 45, 238, 0],
		[1, "r", 44, 238, ⵠⵠᐃ],
		[1, "r", 43, 238, ᐃⲆΔ],
		[1, "r", 46, 238, ⵠⵠᐃ],
		[1, "r", 47, 238, 0],
		[1, "r", 48, 238, ᐃⲆΔ],
		[ⲆⲆⵠ, "r", 49, 238, ⲆⲆΔ],
		[1, "r", 50, 238, 0],
		[ⵠᐃᐃ, "r", 51, 238, ⵠⵠᐃ],
		[ᐃⲆⲆ, "r", 52, 238, 0],
		[ΔΔⵠ, "r", 53, 238, 0],
		[Δⵠᐃ, "r", 54, 239, 0],
		[ΔΔⵠ, "r", 53, 240, 0],
		[1, "r", 53, 239, 0],
		[ΔΔⵠ, "r", 52, 239, 0],
		[1, "r", 51, 239, 0],
		[ΔΔⵠ, "r", 50, 239, ⵠⵠᐃ],
		[1, "r", 49, 239, 0],
		[Δⵠᐃ, "r", 48, 239, 0],
		[1, "r", 47, 239, ⵠⵠᐃ],
		[ΔΔⵠ, "r", 46, 239, ⲆⲆΔ],
		[1, "r", 45, 239, ⲆⲆᐃ],
		[ⲆⲆⵠ, "r", 44, 239, 0],
		[1, "r", 43, 239, 0],
		[1, "r", 42, 239, 0],
		[ⵠᐃᐃ, "r", 41, 240, ⵠᐃΔ],
		[1, "r", 42, 240, 0],
		[ΔΔⵠ, "r", 43, 240, ⲆⲆᐃ],
		[1, "r", 44, 240, ⲆⲆᐃ],
		[ⲆⵠⲆ, "r", 45, 240, 0],
		[1, "r", 46, 240, 0],
		[ⲆⲆⵠ, "r", 47, 240, Ⲇⵠᐃ],
		[1, "r", 48, 240, Ⲇⵠᐃ],
		[ⵠᐃᐃ, "r", 49, 240, 0],
		[ⲆⵠⲆ, "r", 50, 240, ⵠᐃΔ],
		[ΔΔⵠ, "r", 51, 240, ⵠⵠᐃ],
		[ⲆⵠⲆ, "r", 52, 240, 0],
		[1, "r", 54, 240, 0],
		[1, "r", 55, 240, 0],
		[1, "r", 56, 241, 0],
		[1, "r", 55, 241, 0],
		[1, "r", 54, 241, 0],
		[1, "r", 53, 241, 0],
		[1, "r", 52, 241, Δⵠⵠ],
		[1, "r", 51, 241, ᐃⲆᐃ],
		[1, "r", 49, 241, 0],
		[1, "r", 50, 241, ⵠⵠⵠ],
		[ᐃⲆⲆ, "r", 48, 241, 0],
		[ⲆⵠⲆ, "r", 47, 241, ᐃⲆΔ],
		[ⲆⲆⵠ, "r", 46, 241, 0],
		[Δⵠᐃ, "r", 45, 241, ⲆⲆᐃ],
		[ΔΔⵠ, "r", 44, 241, ᐃⲆΔ],
		[ᐃⲆⲆ, "r", 43, 241, Ⲇⵠᐃ],
		[ᐃⲆⲆ, "r", 42, 241, 0],
		[1, "r", 41, 241, 0],
		[ᐃⲆⲆ, "r", 40, 242, ᐃⲆΔ],
		[1, "r", 41, 242, ⵠᐃΔ],
		[ᐃⲆⲆ, "r", 42, 242, 0],
		[1, "r", 43, 242, 0],
		[1, "r", 44, 242, 0],
		[1, "r", 45, 242, 0],
		[1, "r", 46, 242, 0],
		[ⲆⲆⵠ, "r", 47, 242, ᐃⲆᐃ],
		[1, "r", 48, 242, 0],
		[ΔΔⵠ, "r", 49, 242, 0],
		[ΔΔⵠ, "r", 50, 242, 0],
		[Δⵠᐃ, "r", 51, 242, 0],
		[ΔΔⵠ, "r", 52, 242, Δⵠⵠ],
		[ᐃⲆⲆ, "r", 53, 242, 0],
		[ᐃⲆⲆ, "r", 54, 242, Ⲇⵠᐃ],
		[1, "r", 55, 242, ⵠⵠᐃ],
		[ⲆⵠⲆ, "r", 56, 242, ᐃⲆᐃ],
		[ⲆⵠⲆ, "r", 56, 243, ⲆⲆᐃ],
		[1, "r", 55, 243, ᐃⲆᐃ],
		[Δⵠᐃ, "r", 54, 243, 0],
		[1, "r", 53, 243, ⵠᐃΔ],
		[ᐃⲆⲆ, "r", 52, 243, ᐃⲆΔ],
		[1, "r", 51, 243, 0],
		[1, "r", 50, 243, ⵠᐃΔ],
		[1, "r", 49, 243, 0],
		[Δⵠᐃ, "r", 48, 243, 0],
		[1, "r", 47, 243, 0],
		[1, "r", 46, 243, 0],
		[1, "r", 45, 243, ⵠᐃΔ],
		[Δⵠᐃ, "r", 44, 243, 0],
		[ⲆⵠⲆ, "r", 43, 243, Δⵠⵠ],
		[ᐃⲆⲆ, "r", 42, 243, 0],
		[1, "r", 41, 243, 0],
		[1, "r", 40, 243, Ⲇⵠᐃ],
		[Δⵠᐃ, "r", 40, 244, 0],
		[ΔΔⵠ, "r", 41, 244, 0],
		[Δⵠᐃ, "r", 43, 244, 0],
		[ⲆⲆⵠ, "r", 44, 244, ᐃⲆΔ],
		[1, "r", 45, 244, 0],
		[Δⵠᐃ, "r", 46, 244, 0],
		[ΔΔⵠ, "r", 47, 244, 0],
		[Δⵠᐃ, "r", 48, 244, ⵠⵠⵠ],
		[Δⵠᐃ, "r", 49, 244, ⵠⵠᐃ],
		[1, "r", 50, 244, Δⵠⵠ],
		[ᐃⲆⲆ, "r", 51, 244, Ⲇⵠᐃ],
		[ⲆⵠⲆ, "r", 52, 244, 0],
		[1, "r", 53, 244, 0],
		[1, "r", 54, 244, ⵠⵠᐃ],
		[1, "r", 55, 244, 0],
		[1, "r", 42, 244, 0],
		[1, "r", 40, 245, ᐃⲆᐃ],
		[1, "r", 41, 245, 0],
		[1, "r", 42, 245, 0],
		[1, "r", 43, 245, 0],
		[ⵠᐃᐃ, "r", 44, 245, 0],
		[ⲆⵠⲆ, "r", 45, 245, ᐃⲆΔ],
		[1, "r", 46, 245, ᐃⲆΔ],
		[ⵠᐃᐃ, "r", 47, 245, ⲆⲆΔ],
		[1, "r", 48, 245, ⵠᐃΔ],
		[1, "r", 49, 245, 0],
		[ⲆⵠⲆ, "r", 50, 245, 0],
		[1, "r", 51, 245, 0],
		[ⵠᐃᐃ, "r", 52, 246, Δⵠⵠ],
		[ΔΔⵠ, "r", 52, 245, 0],
		[ⵠᐃᐃ, "r", 53, 245, ᐃⲆΔ],
		[ⲆⲆⵠ, "r", 54, 245, ⵠⵠᐃ],
		[1, "r", 55, 245, ⵠᐃΔ],
		[ⲆⵠⲆ, "r", 53, 246, Δⵠⵠ],
		[1, "r", 51, 246, ⵠⵠᐃ],
		[1, "r", 50, 246, 0],
		[1, "r", 49, 246, 0],
		[1, "r", 48, 246, ᐃⲆΔ],
		[ᐃⲆⲆ, "r", 47, 246, ᐃⲆᐃ],
		[ⲆⵠⲆ, "r", 45, 246, ⵠᐃΔ],
		[ΔΔⵠ, "r", 46, 246, ⵠⵠᐃ],
		[ᐃⲆⲆ, "r", 44, 246, ᐃⲆᐃ],
		[ⵠᐃᐃ, "r", 43, 246, 0],
		[ⲆⵠⲆ, "r", 42, 246, ⵠⵠⵠ],
		[1, "r", 41, 246, 0],
		[1, "r", 42, 247, ⲆⲆΔ],
		[1, "r", 43, 247, ⲆⲆᐃ],
		[ⲆⵠⲆ, "r", 44, 247, ⵠⵠᐃ],
		[Δⵠᐃ, "r", 45, 247, Ⲇⵠᐃ],
		[ⵠᐃᐃ, "r", 46, 247, 0],
		[1, "r", 47, 247, ⵠᐃΔ],
		[1, "r", 48, 247, ⵠⵠᐃ],
		[1, "r", 50, 247, 0],
		[Δⵠᐃ, "r", 51, 247, 0],
		[ΔΔⵠ, "r", 52, 247, 0],
		[ΔΔⵠ, "r", 53, 247, 0],
		[ⵠᐃᐃ, "r", 54, 247, ⵠⵠᐃ],
		[1, "r", 49, 247, Δⵠⵠ],
		[ⵠᐃᐃ, "r", 49, 248, 0],
		[1, "r", 47, 248, ᐃⲆΔ],
		[1, "r", 46, 248, 0],
		[1, "r", 45, 248, ᐃⲆΔ],
		[ⵠᐃᐃ, "r", 51, 248, ⵠᐃΔ],
		[ⲆⲆⵠ, "r", 55, 246, 1],
		[1, "r", 55, 247, 1],
		[ⲆⲆⵠ, "r", 56, 247, ᐃⲆⲆ],
		[ΔΔⵠ, "r", 56, 248, 1],
		[ΔΔⵠ, "r", 95, 270, ⵠᐃᐃ],
		[ⵠᐃᐃ, "r", 93, 270, ᐃⲆⲆ],
		[1, "r", 94, 270, ᐃⲆⲆ],
		[Δⵠᐃ, "r", 95, 271, 1],
		[1, "r", 94, 271, Δⵠᐃ],
		[ᐃⲆⲆ, "r", 93, 271, 1],
		[ⵠᐃᐃ, "r", 94, 282, ⲆⵠⲆ],
		[Δⵠᐃ, "r", 93, 282, 1],
		[ⲆⵠⲆ, "r", 93, 281, 1],
		[1, "r", 92, 281, ᐃⲆⲆ],
		[ⵠᐃᐃ, "r", 92, 280, ⲆⵠⲆ],
		[ⵠᐃᐃ, "r", 91, 280, ᐃⲆⲆ],
		[1, "r", 90, 279, ΔΔⵠ],
		[ΔΔⵠ, "r", 95, 275, 1],
		[1, "r", 95, 274, 1],
		[ⵠᐃᐃ, "r", 95, 273, ΔΔⵠ],
		[ΔΔⵠ, "r", 95, 272, 1],
		[ⲆⵠⲆ, "r", 94, 274, 1],
		[ⲆⵠⲆ, "r", 94, 273, ⲆⲆⵠ],
		[ⲆⲆⵠ, "r", 94, 272, ⵠᐃᐃ],
		[ⲆⵠⲆ, "r", 93, 272, ⵠᐃᐃ],
		[1, "r", 93, 273, 1],
		[Δⵠᐃ, "r", 93, 274, ⵠᐃᐃ],
		[Δⵠᐃ, "r", 92, 273, 1],
		[1, "r", 92, 272, Δⵠᐃ],
		[1, "r", 92, 270, 1],
		[1, "r", 92, 271, 1],
		[1, "r", 92, 269, ⲆⵠⲆ],
		[Δⵠᐃ, "r", 90, 269, ⲆⲆⵠ],
		[1, "r", 91, 269, ᐃⲆⲆ],
		[1, "r", 91, 271, 1],
		[Δⵠᐃ, "r", 91, 270, 1],
		[ⲆⲆⵠ, "r", 95, 278, 1],
		[1, "r", 95, 277, Δⵠᐃ],
		[1, "r", 95, 276, ᐃⲆⲆ],
		[ⲆⵠⲆ, "r", 94, 276, 1],
		[1, "r", 94, 275, 1],
		[1, "r", 93, 275, ⵠᐃᐃ],
		[1, "r", 92, 274, ΔΔⵠ],
		[ΔΔⵠ, "r", 92, 275, 1],
		[1, "r", 91, 275, ᐃⲆⲆ],
		[1, "r", 90, 275, 1],
		[1, "r", 89, 274, Δⵠᐃ],
		[1, "r", 90, 274, 1],
		[1, "r", 89, 275, ⲆⵠⲆ],
		[ⲆⵠⲆ, "r", 88, 274, 1],
		[1, "r", 88, 273, ΔΔⵠ],
		[1, "r", 86, 272, ⵠᐃᐃ],
		[ᐃⲆⲆ, "r", 85, 271, ᐃⲆⲆ],
		[1, "r", 86, 271, 1],
		[ᐃⲆⲆ, "r", 87, 272, ⲆⲆⵠ],
		[1, "r", 55, 248, 1],
		[1, "r", 54, 248, 1],
		[Δⵠᐃ, "r", 56, 249, 1],
		[1, "r", 55, 249, 1],
		[ᐃⲆⲆ, "r", 55, 250, Δⵠᐃ],
		[ΔΔⵠ, "r", 56, 250, 1],
		[1, "r", 57, 250, ᐃⲆⲆ],
		[1, "r", 57, 249, 1],
		[ΔΔⵠ, "r", 59, 250, 1],
		[Δⵠᐃ, "r", 58, 250, 1],
		[1, "r", 60, 250, Δⵠᐃ],
		[1, "r", 61, 251, 1],
		[ⵠᐃᐃ, "r", 60, 251, 1],
		[ⲆⲆⵠ, "r", 62, 251, ⲆⲆⵠ],
		[1, "r", 62, 252, 1],
		[1, "r", 63, 252, 1],
		[ⲆⵠⲆ, "r", 58, 251, 1],
		[ⲆⲆⵠ, "r", 57, 251, 1],
		[ⲆⲆⵠ, "r", 56, 251, ᐃⲆⲆ],
		[ΔΔⵠ, "r", 58, 252, ΔΔⵠ],
		[1, "r", 57, 252, ΔΔⵠ],
		[ᐃⲆⲆ, "r", 57, 253, 1],
		[1, "r", 58, 253, ΔΔⵠ],
		[ⲆⵠⲆ, "r", 58, 254, 1],
		[ⲆⵠⲆ, "r", 59, 255, 1],
		[ⲆⵠⲆ, "r", 58, ⵠⵠᐃⵠⵠ, ⵠᐃᐃ],
		[1, "r", 57, 254, 1],
		[1, "r", 56, 252, ᐃⲆⲆ],
		[Δⵠᐃ, "r", 55, 251, ⲆⵠⲆ],
		[1, "r", 60, ΔᐃᐃΔⲆᐃⲆ, 1],
		[Δⵠᐃ, "r", 61, ⲆΔⲆⵠⲆ, 1],
		[ⲆⵠⲆ, "r", 61, ⲆⵠⲆⵠΔⵠⲆ, ᐃⲆⲆ],
		[ΔΔⵠ, "r", 60, 256, ⲆⲆⵠ],
		[Δⵠᐃ, "r", 62, ᐃΔᐃᐃᐃᐃΔ, 1],
		[ΔΔⵠ, "r", 62, 257, ΔΔⵠ],
		[1, "r", 61, 257, 1],
		[1, "r", 64, 253, 1],
		[1, "r", 64, 254, ΔΔⵠ],
		[1, "r", 65, 254, ⲆⲆⵠ],
		[ⲆⵠⲆ, "r", 61, 250, 1],
		[Δⵠᐃ, "r", 64, 252, Δⵠᐃ],
		[1, "r", 65, 253, 1],
		[ᐃⲆⲆ, "r", 66, 254, 1],
		[ⲆⵠⲆ, "r", 65, 255, 1],
		[ⵠᐃᐃ, "r", 64, 255, 1],
		[1, "r", 64, ᐃᐃⲆᐃΔᐃⲆ, ΔΔⵠ],
		[ΔΔⵠ, "r", 65, ⲆᐃᐃⲆⵠⲆⵠ, 1],
		[1, "r", 65, 257, ⵠᐃᐃ],
		[1, "r", 64, 257, ⵠᐃᐃ],
		[Δⵠᐃ, "r", 63, 257, Δⵠᐃ],
		[ΔΔⵠ, "r", 62, 258, ΔΔⵠ],
		[ⵠᐃᐃ, "r", 63, 258, Δⵠᐃ],
		[ᐃⲆⲆ, "r", 64, 258, ᐃⲆⲆ],
		[1, "r", 66, ᐃⵠⵠⲆⲆⲆⲆ, 1],
		[Δⵠᐃ, "r", 66, ᐃΔᐃᐃᐃᐃΔ, Δⵠᐃ],
		[ⵠᐃᐃ, "r", 66, 257, 1],
		[ΔΔⵠ, "r", 66, 258, 1],
		[ⲆⵠⲆ, "r", 65, 258, 1],
		[ⵠᐃᐃ, "r", 67, 258, 1],
		[ᐃⲆⲆ, "r", 67, 257, Δⵠᐃ],
		[1, "r", 67, 259, ⲆⲆⵠ],
		[1, "r", 66, 259, ⵠᐃᐃ],
		[1, "r", 65, 259, ⵠᐃᐃ],
		[ᐃⲆⲆ, "r", 56, 246, ⲆⲆⵠ],
		[1, "r", 56, 245, ⲆⵠⲆ],
		[ⲆⲆⵠ, "r", 68, 258, 1],
		[ⵠᐃᐃ, "r", 68, 259, 1],
		[1, "r", 68, 260, 1],
		[ΔΔⵠ, "r", 69, 260, ᐃⲆⲆ],
		[Δⵠᐃ, "r", 69, 261, 1],
		[1, "r", 70, 261, ᐃⲆⲆ],
		[1, "r", 71, 261, 1],
		[ΔΔⵠ, "r", 67, 260, ⲆⵠⲆ],
		[1, "r", 89, 269, Δⵠᐃ],
		[ᐃⲆⲆ, "r", 89, 268, 1],
		[ⲆⲆⵠ, "r", 90, 268, ᐃⲆⲆ],
		[ⵠᐃᐃ, "r", 82, 267, 1],
		[ⲆⵠⲆ, "r", 83, 267, 1],
		[1, "r", 80, 266, 1],
		[ⲆⲆⵠ, "r", 81, 266, ⲆⲆⵠ],
		[1, "r", 81, 267, 1],
		[ⲆⲆⵠ, "r", 79, 266, 1],
		[1, "r", 78, 265, ⲆⵠⲆ],
		[ⲆⲆⵠ, "r", 77, 265, 1],
		[1, "r", 76, 264, 1],
		[1, "r", 75, 264, 1],
		[1, "r", 75, 263, ⲆⵠⲆ],
		[1, "r", 74, 263, 1],
		[1, "r", 74, 262, ΔΔⵠ],
		[1, "r", 72, 262, 1],
		[1, "r", 73, 262, ⵠᐃᐃ],
		[ᐃⲆⲆ, "r", 71, 262, 1],
		[ᐃⲆⲆ, "r", 85, 270, 1],
		[Δⵠᐃ, "r", 84, 270, 1],
		[1, "r", 84, 269, 1],
		[1, "r", 83, 269, ΔΔⵠ],
		[1, "r", 82, 269, 1],
		[1, "r", 81, 269, 1],
		[ⵠᐃᐃ, "r", 81, 268, 1],
		[Δⵠᐃ, "r", 82, 268, 1],
		[1, "r", 83, 268, ΔΔⵠ],
		[ᐃⲆⲆ, "r", 80, 268, 1],
		[ᐃⲆⲆ, "r", 80, 267, ⲆⵠⲆ],
		[1, "r", 79, 267, 1],
		[1, "r", 78, 266, ᐃⲆⲆ],
		[1, "r", 76, 265, 1],
		[1, "r", 75, 262, 1],
		[1, "r", 90, 280, ⲆⲆⵠ],
		[ⵠᐃᐃ, "r", 89, 280, ΔΔⵠ],
		[ΔΔⵠ, "r", 89, 279, ⵠᐃᐃ],
		[1, "r", 88, 279, 1],
		[ΔΔⵠ, "r", 88, 278, ⲆⵠⲆ],
		[1, "r", 87, 277, 1],
		[ᐃⲆⲆ, "r", 86, 276, ᐃⲆⲆ],
		[1, "r", 86, 275, ⲆⵠⲆ],
		[1, "r", 86, 274, 1],
		[Δⵠᐃ, "r", 86, 273, Δⵠᐃ],
		[ⵠᐃᐃ, "r", 85, 273, 1],
		[1, "r", 85, 272, 1],
		[Δⵠᐃ, "r", 85, 274, 1],
		[1, "r", 86, 277, ⲆⵠⲆ],
		[ⲆⲆⵠ, "r", 87, 278, 1],
		[1, "r", 84, 271, ⵠᐃᐃ],
		[1, "r", 83, 270, ΔΔⵠ],
		[1, "r", 87, 273, 1],
		[Δⵠᐃ, "r", 91, 274, 1],
		[ⲆⵠⲆ, "r", 89, 273, 1],
		[1, "r", 88, 272, 1],
		[ⲆⲆⵠ, "r", 91, 281, ⵠᐃᐃ],
		[ᐃⲆⲆ, "r", 92, 282, ⲆⵠⲆ],
		[1, "r", 88, 280, 1],
		[1, "r", 87, 279, 1],
		[ⲆⵠⲆ, "r", 85, 275, ⵠᐃᐃ],
		[1, "r", 84, 273, 1],
		[1, "r", 84, 272, ⵠᐃᐃ],
		[1, "r", 83, 271, 1],
		[1, "r", 82, 270, 1],
		[1, "r", 84, 267, 0],
		[1, "r", 85, 267, 0],
		[1, "r", 76, 262, 0],
		[ⲆⵠⲆ, "r", 77, 262, 0],
		[ⲆⲆⵠ, "r", 88, 268, 0],
		[ᐃⲆⲆ, "r", 78, 262, ⵠⵠᐃ],
		[1, "r", 79, 262, ⲆⲆᐃ],
		[1, "r", 80, 262, Δⵠⵠ],
		[ⲆⵠⲆ, "r", 80, 263, ⲆⲆΔ],
		[ΔΔⵠ, "r", 81, 263, ⵠᐃΔ],
		[1, "r", 82, 263, 0],
		[1, "r", 83, 263, 0],
		[1, "r", 84, 263, ⵠⵠⵠ],
		[1, "r", 85, 263, 0],
		[ΔΔⵠ, "r", 88, 262, ᐃⲆΔ],
		[ⲆⵠⲆ, "r", 89, 262, ⵠⵠⵠ],
		[ᐃⲆⲆ, "r", 90, 262, 0],
		[1, "r", 87, 262, 0],
		[ΔΔⵠ, "r", 86, 262, Δⵠⵠ],
		[ⵠᐃᐃ, "r", 86, 263, ⲆⲆᐃ],
		[1, "r", 87, 263, 0],
		[ⲆⲆⵠ, "r", 91, 262, Ⲇⵠᐃ],
		[ⵠᐃᐃ, "r", 95, 262, 0],
		[Δⵠᐃ, "r", 94, 262, 0],
		[1, "r", 86, 267, 0],
		[Δⵠᐃ, "r", 87, 267, 0],
		[1, "r", 87, 268, ⲆⲆΔ],
		[ⲆⵠⲆ, "r", 86, 268, Ⲇⵠᐃ],
		[ⲆⲆⵠ, "r", 74, 189, ᐃⲆΔ],
		[1, "r", 75, 189, 0],
		[1, "r", 76, 189, 0],
		[ⲆⲆⵠ, "r", 77, 189, 0],
		[Δⵠᐃ, "r", 78, 190, ⵠⵠᐃ],
		[ⵠᐃᐃ, "r", 77, 190, ⲆⲆΔ],
		[Δⵠᐃ, "r", 75, 190, 0],
		[Δⵠᐃ, "r", 76, 190, ⵠᐃΔ],
		[ΔΔⵠ, "r", 74, 190, ⲆⲆᐃ],
		[ⵠᐃᐃ, "r", 73, 190, 0],
		[ΔΔⵠ, "r", 78, 191, ⲆⲆΔ],
		[ⲆⲆⵠ, "r", 76, 191, ⵠᐃΔ],
		[ΔΔⵠ, "r", 77, 191, ⲆⲆᐃ],
		[ⲆⵠⲆ, "r", 75, 191, ⲆⲆΔ],
		[ⵠᐃᐃ, "r", 74, 191, ⵠⵠᐃ],
		[1, "r", 78, 192, 0],
		[ⲆⲆⵠ, "r", 77, 192, ⵠᐃΔ],
		[ⲆⲆⵠ, "r", 76, 192, ⲆⲆΔ],
		[ᐃⲆⲆ, "r", 75, 192, 0],
		[ⵠᐃᐃ, "r", 74, 192, Δⵠⵠ],
		[ⲆⵠⲆ, "r", 73, 191, 0],
		[ⲆⲆⵠ, "f", ΔΔⵠ, 96, 22, ᐃⲆⲆ],
		[1, "s", 1, 97, 22, ΔΔⵠ],
		[1, "f", ⲆⵠⲆ, 98, 22, 1],
		[ᐃⲆⲆ, "s", ⲆⲆΔ, 99, 22, ⲆⲆⵠ],
		[1, "s", ⵠᐃᐃ, 100, 21, ᐃⲆⲆ],
		[1, "s", ⲆⲆⵠ, 96, 49, ⲆⲆⵠ],
		[1, "s", ᐃⲆⲆ, 100, 50, ⵠᐃᐃ],
		[1, "s", 0, 99, 49, 1],
		[Δⵠᐃ, "s", 0, 97, 49, 1],
		[ΔΔⵠ, "f", 1, 98, 49, 1],
		[ⲆⲆⵠ, "r", 70, 218, 0],
		[1, "r", 71, 218, 0],
		[Δⵠᐃ, "r", 72, 218, 0],
		[1, "r", 73, 218, ⲆⲆᐃ],
		[1, "r", 74, 219, ⲆⲆᐃ],
		[ⲆⵠⲆ, "r", 73, 219, 0],
		[1, "r", 72, 219, ᐃⲆΔ],
		[1, "r", 71, 219, 0],
		[1, "r", 70, 219, 0],
		[1, "r", 73, 220, ⲆⲆΔ],
		[1, "r", 72, 220, ᐃⲆᐃ],
		[1, "r", 71, 220, 0],
		[Δⵠᐃ, "r", 72, 221, 0],
		[Δⵠᐃ, "r", 71, 221, 0],
		[Δⵠᐃ, "r", 70, 221, ⵠⵠⵠ],
		[ᐃⲆⲆ, "r", 69, 221, 0],
		[ⵠᐃᐃ, "r", 68, 221, 0],
		[1, "r", 70, 220, ⵠⵠⵠ],
		[ᐃⲆⲆ, "r", 69, 220, 0],
		[ΔΔⵠ, "r", 69, 219, 0],
		[1, "r", 68, 220, 0],
		[1, "r", 73, 221, 0],
		[Δⵠᐃ, "r", 73, 222, 0],
		[ΔΔⵠ, "r", 71, 222, 0],
		[1, "r", 72, 222, 0],
		[ᐃⲆⲆ, "r", 74, 221, ⲆⲆΔ],
		[ⲆⲆⵠ, "r", 74, 220, 0],
		[1, "r", 75, 220, 0],
		[1, "r", 75, 221, 0],
		[ⲆⵠⲆ, "r", 70, 222, 0],
		[ⲆⲆⵠ, "r", 69, 222, 0],
		[1, "r", 29, 217, Ⲇⵠᐃ],
		[1, "r", 30, 217, ᐃⲆΔ],
		[1, "r", 31, 217, ᐃⲆᐃ],
		[ᐃⲆⲆ, "r", 32, 217, ⵠⵠⵠ],
		[1, "r", 31, 219, 0],
		[ΔΔⵠ, "r", 30, 219, Δⵠⵠ],
		[ΔΔⵠ, "r", 29, 219, ⲆⲆΔ],
		[Δⵠᐃ, "r", 27, 219, ⵠⵠⵠ],
		[ⲆⵠⲆ, "r", 25, 219, ⵠⵠⵠ],
		[1, "r", 26, 219, ⲆⲆΔ],
		[ⵠᐃᐃ, "r", 28, 219, 0],
		[Δⵠᐃ, "r", 26, 218, 0],
		[1, "r", 27, 218, 0],
		[Δⵠᐃ, "r", 28, 218, 0],
		[1, "r", 29, 218, 0],
		[1, "r", 30, 218, 0],
		[ΔΔⵠ, "r", 28, 217, ᐃⲆΔ],
		[ⲆⲆⵠ, "r", 26, 217, ᐃⲆᐃ],
		[1, "r", 27, 217, ⵠⵠᐃ],
		[1, "r", 28, 216, ᐃⲆΔ],
		[1, "r", 29, 216, 0],
		[ᐃⲆⲆ, "r", 30, 216, 0],
		[1, "r", 31, 218, 0],
		[ⵠᐃᐃ, "r", 32, 218, 0],
		[1, "r", 31, 216, ⵠᐃΔ],
		[1, "r", 31, 221, ⵠᐃΔ],
		[1, "r", 31, 220, 0],
		[1, "r", 30, 220, 0],
		[ⵠᐃᐃ, "r", 29, 220, 0],
		[ⵠᐃᐃ, "r", 28, 220, 0],
		[ΔΔⵠ, "r", 27, 220, ⵠⵠⵠ],
		[ΔΔⵠ, "r", 26, 220, 0],
		[ⲆⵠⲆ, "r", 25, 218, 0],
		[ⵠᐃᐃ, "r", 27, 221, ⵠⵠⵠ],
		[ⲆⵠⲆ, "r", 28, 221, 0],
		[1, "r", 29, 221, ⲆⲆΔ],
		[ⲆⲆⵠ, "r", 30, 221, ⵠᐃⵠ],
		[1, "r", 32, 220, 0],
		[1, "r", 32, 219, 0],
		[Δⵠᐃ, "r", 33, 218, 0],
		[ᐃⲆⲆ, "r", 33, 219, ᐃⲆᐃ],
		[1, "r", 75, 238, 0],
		[1, "r", 76, 238, ᐃⲆᐃ],
		[Δⵠᐃ, "r", 77, 239, 0],
		[1, "r", 76, 239, 0],
		[1, "r", 75, 239, 0],
		[Δⵠᐃ, "r", 74, 239, ⵠⵠᐃ],
		[ⲆⲆⵠ, "r", 76, 240, ⵠⵠⵠ],
		[ΔΔⵠ, "r", 77, 240, ⵠᐃⵠ],
		[1, "r", 78, 240, ⵠᐃΔ],
		[ᐃⲆⲆ, "r", 77, 241, ⵠⵠⵠ],
		[ⲆⵠⲆ, "r", 76, 241, 0],
		[ᐃⲆⲆ, "r", 75, 241, 0],
		[ⲆⲆⵠ, "r", 75, 240, 0],
		[1, "r", 74, 240, 0],
		[1, "r", 78, 239, ⵠᐃⵠ],
		[ⲆⲆⵠ, "r", 77, 238, 0],
		[ᐃⲆⲆ, "r", ᐃⵠⲆⲆΔ, 253, 0],
		[ⲆⵠⲆ, "r", ⵠᐃⵠᐃⵠ, 252, 0],
		[1, "r", 20, 252, 0],
		[1, "r", 21, 253, 0],
		[ⲆⵠⲆ, "r", 23, 254, ⵠⵠᐃ],
		[1, "r", ⲆⵠᐃΔⲆ, 254, ⵠᐃⵠ],
		[Δⵠᐃ, "r", 19, 254, 0],
		[1, "r", 22, 254, 0],
		[1, "r", ΔⲆᐃᐃᐃ, 254, ⵠⵠⵠ],
		[1, "r", 19, 253, ⵠᐃΔ],
		[1, "r", 20, 253, ⲆⲆᐃ],
		[ᐃⲆⲆ, "r", 21, 254, ⲆⲆΔ],
		[1, "r", 22, 253, 0],
		[ᐃⲆⲆ, "r", 21, 255, 0],
		[1, "r", ⲆⵠᐃΔⲆ, 255, 0],
		[1, "r", ΔΔΔⲆᐃ, 255, 0],
		[1, "r", ᐃⲆΔΔⲆ, ΔΔᐃⲆⲆ, 0],
		[1, "r", 17, 255, ⲆⲆΔ],
		[ΔΔⵠ, "r", ᐃⲆΔᐃΔ, 254, 0],
		[1, "r", 22, 255, 0],
		[1, "r", ⲆⵠⲆⵠⲆ, 256, 0],
		[1, "r", 20, ⲆᐃᐃᐃΔᐃΔ, ⵠᐃΔ],
		[1, "r", 21, 256, 0],
		[Δⵠᐃ, "r", 39, 270, ⲆⲆΔ],
		[Δⵠᐃ, "r", 40, 270, 0],
		[Δⵠᐃ, "r", 41, 270, 0],
		[1, "r", 43, 270, 0],
		[ⲆⵠⲆ, "r", 44, 270, 0],
		[1, "r", 46, 270, ᐃⲆΔ],
		[1, "r", 42, 270, ⲆⲆᐃ],
		[1, "r", 45, 270, Ⲇⵠᐃ],
		[1, "r", 44, 269, 0],
		[ⵠᐃᐃ, "r", 43, 269, ᐃⲆᐃ],
		[ᐃⲆⲆ, "r", 42, 269, 0],
		[ⲆⲆⵠ, "r", 40, 269, ⵠⵠᐃ],
		[ⲆⲆⵠ, "r", 41, 269, 0],
		[ᐃⲆⲆ, "r", 45, 271, 0],
		[ⲆⲆⵠ, "r", 44, 271, Δⵠⵠ],
		[ⲆⲆⵠ, "r", 43, 271, 0],
		[1, "r", 42, 271, 0],
		[ⵠᐃᐃ, "r", 41, 271, 0],
		[1, "r", 40, 271, 0],
		[1, "r", 39, 271, Ⲇⵠᐃ],
		[1, "r", 46, 271, 0],
		[ΔΔⵠ, "r", 45, 272, 0],
		[ⲆⵠⲆ, "r", 44, 272, ⲆⲆᐃ],
		[Δⵠᐃ, "r", 43, 272, ⵠᐃΔ],
		[1, "r", 42, 272, 0],
		[1, "r", ΔΔΔⲆᐃ, 284, 0],
		[1, "r", ⲆⲆⲆⵠⵠ, 284, 0],
		[1, "r", 21, 285, 0],
		[1, "r", 22, 285, Δⵠⵠ],
		[ΔΔⵠ, "r", 23, 286, 0],
		[1, "r", 22, 288, ⲆⲆΔ],
		[Δⵠᐃ, "r", 20, 288, 0],
		[1, "r", 18, 288, 0],
		[1, "r", 17, 287, ⵠⵠᐃ],
		[ⵠᐃᐃ, "r", 16, 287, ᐃⲆΔ],
		[1, "r", ΔⵠⲆᐃⲆ, 286, Ⲇⵠᐃ],
		[1, "r", ⲆⵠⲆⲆΔΔΔ, 286, ⵠᐃⵠ],
		[1, "r", ᐃⲆΔΔⲆ, 286, ⲆⲆᐃ],
		[ΔΔⵠ, "r", 19, 286, ⲆⲆᐃ],
		[1, "r", ⵠⲆΔⲆⲆ, 286, 0],
		[1, "r", 21, 286, Δⵠⵠ],
		[ΔΔⵠ, "r", 22, 286, ⵠⵠᐃ],
		[ⲆⲆⵠ, "r", 20, 285, 0],
		[1, "r", 19, 285, ᐃⲆᐃ],
		[ⲆⲆⵠ, "r", ᐃⲆΔΔⲆ, 285, ⵠᐃΔ],
		[1, "r", ᐃΔᐃᐃᐃⲆΔ, 285, ⲆⲆΔ],
		[ⲆⵠⲆ, "r", 19, 287, 0],
		[1, "r", 18, 287, 0],
		[ΔΔⵠ, "r", ⲆⲆⲆⵠⵠ, 287, 0],
		[ⲆⵠⲆ, "r", 21, 287, 0],
		[1, "r", 22, 287, 0],
		[1, "r", 23, 287, 0],
		[ΔΔⵠ, "r", 21, 288, 0],
		[1, "r", ⲆⵠⲆⵠⲆ, 288, ⵠⵠⵠ],
		[1, "r", 17, 288, ⵠᐃⵠ],
		[1, "r", ᐃΔΔⵠΔ, 289, ᐃⲆΔ],
		[ΔΔⵠ, "r", 21, 289, 0],
		[1, "r", 22, 289, Ⲇⵠᐃ],
		[ΔΔⵠ, "r", ⵠⲆΔⲆⲆ, 289, ⵠᐃⵠ],
		[1, "r", 23, 288, 0],
		[1, "r", 24, 287, ⲆⲆᐃ],
		[1, "r", 24, 286, ⵠⵠⵠ],
		[1, "r", 23, 285, 0],
		[1, "r", 66, 286, 0],
		[1, "r", 64, 287, 0],
		[ⲆⵠⲆ, "r", 63, 287, ⲆⲆΔ],
		[ᐃⲆⲆ, "r", 60, 287, ᐃⲆΔ],
		[1, "r", 59, 285, 0],
		[ΔΔⵠ, "r", 58, 284, 0],
		[Δⵠᐃ, "r", 59, 283, ᐃⲆᐃ],
		[ⲆⵠⲆ, "r", 65, 283, ⵠⵠᐃ],
		[Δⵠᐃ, "r", 64, 283, 0],
		[ⲆⵠⲆ, "r", 63, 283, 0],
		[1, "r", 62, 283, 0],
		[1, "r", 61, 283, 0],
		[1, "r", 60, 283, 0],
		[ⲆⵠⲆ, "r", 59, 284, ᐃⲆᐃ],
		[1, "r", 58, 285, ᐃⲆᐃ],
		[1, "r", 60, 286, Ⲇⵠᐃ],
		[ⲆⵠⲆ, "r", 59, 286, 0],
		[Δⵠᐃ, "r", 61, 287, ⵠⵠᐃ],
		[1, "r", 62, 287, 0],
		[ⲆⲆⵠ, "r", 61, 286, ⲆⲆΔ],
		[1, "r", 62, 286, ⵠⵠⵠ],
		[1, "r", 63, 286, ⵠᐃΔ],
		[Δⵠᐃ, "r", 64, 286, ⵠᐃⵠ],
		[1, "r", 65, 286, ᐃⲆᐃ],
		[1, "r", 67, 285, 0],
		[1, "r", 66, 285, 0],
		[1, "r", 65, 285, ⵠᐃΔ],
		[1, "r", 64, 285, ᐃⲆΔ],
		[1, "r", 63, 285, 0],
		[ⲆⵠⲆ, "r", 62, 285, 0],
		[1, "r", 61, 285, 0],
		[ᐃⲆⲆ, "r", 60, 285, ⲆⲆᐃ],
		[1, "r", 60, 284, ⵠⵠⵠ],
		[Δⵠᐃ, "r", 61, 284, 0],
		[1, "r", 62, 284, ⵠᐃΔ],
		[Δⵠᐃ, "r", 63, 284, ⵠⵠᐃ],
		[1, "r", 64, 284, ᐃⲆᐃ],
		[ⲆⲆⵠ, "r", 65, 284, 0],
		[1, "r", 66, 284, ⲆⲆᐃ],
		[Δⵠᐃ, "r", 65, 287, 0],
		[1, "r", 67, 286, ⵠᐃΔ],
		[1, "p", ᐃⲆΔ, 13, 189, ⵠᐃᐃ],
		[1, "p", 0, 32, 184, 1],
		[ᐃⲆⲆ, "p", 0, 47, 191, Δⵠᐃ],
		[1, "p", 0, 64, 184, 1],
		[ᐃⲆⲆ, "p", 0, 84, 192, ⲆⲆⵠ],
		[1, "p", 0, 78, 207, ᐃⲆⲆ],
		[1, "p", ᐃⲆᐃ, 58, 216, ΔΔⵠ],
		[ⲆⲆⵠ, "p", ⲆⲆᐃ, 41, 211, ⲆⵠⲆ],
		[ⵠᐃᐃ, "p", ⵠⵠᐃ, 18, 211, Δⵠᐃ],
		[ⲆⲆⵠ, "p", ⲆⲆᐃ, ⵠⵠΔΔⵠ, 230, 1],
		[1, "p", 0, 29, 237, ⲆⲆⵠ],
		[1, "p", ⵠᐃⵠ, 50, 230, ⲆⲆⵠ],
		[1, "p", Ⲇⵠᐃ, 78, 241, Δⵠᐃ],
		[1, "p", ⵠⵠᐃ, 74, ᐃᐃⲆᐃΔᐃⲆ, 1],
		[1, "p", 0, 68, 266, ΔΔⵠ],
		[1, "p", 0, 48, 259, ΔΔⵠ],
		[ⵠᐃᐃ, "p", ⵠᐃⵠ, 31, 263, 1],
		[1, "p", Δⵠⵠ, ⲆⵠΔᐃⲆ, 274, ⲆⵠⲆ],
		[1, "p", ᐃⲆᐃ, 33, 283, ᐃⲆⲆ],
		[1, "p", 0, 66, 287, ᐃⲆⲆ],
		[1, "p", 0, 82, 291, ΔΔⵠ],
		[ⲆⲆⵠ, "p", 0, ⲆⵠΔᐃΔ, 295, ⲆⲆⵠ],
		[1, "p", ⲆⲆᐃ, 45, 294, 1],
		[1, "p", ⵠᐃⵠ, 18, 252, ⲆⵠⲆ],
		[1, "p", Ⲇⵠᐃ, 79, 227, ⵠᐃᐃ],
		[1, "p", ⲆⲆᐃ, 32, 200, 1],
		[1, "p", 0, 64, 200, ⲆⲆⵠ],
		[ⲆⲆⵠ, "s", ⵠⵠⵠ, 21, 193, 1],
		[1, "s", 1, 18, 189, ⲆⲆⵠ],
		[1, "s", ᐃᐃⲆⵠ, 26, 189, 1],
		[1, "b", 1, ⲆⲆⲆΔⵠ, 181, 0],
		[ⲆⵠⲆ, "b", ⵠⵠΔⵠ, 18, 190, ᐃⲆᐃ],
		[1, "b", ᐃᐃⲆⵠ, 29, 193, ⵠᐃⵠ],
		[1, "t", 3, 16, 182, 0],
		[1, "t", ᐃΔᐃⲆ, 13, 195, 0],
		[1, "t", 4, ⵠᐃᐃⵠⵠ, 183, 0],
		[1, "t", ⵠⲆⲆⵠ, 10, 184, ⵠⵠᐃ],
		[ᐃⲆⲆ, "t", 5, 23, 182, ᐃⲆΔ],
		[ᐃⲆⲆ, "t", ΔⲆⲆⲆ, 30, 187, ⵠⵠⵠ],
		[ΔΔⵠ, "t", 1, 26, 192, ⵠⵠⵠ],
		[1, "b", ΔΔⵠ, 25, 188, 0],
		[ⲆⲆⵠ, "s", 1, 24, 181, ⲆⵠⲆ],
		[1, "t", 3, 33, 183, 0],
		[ⵠᐃᐃ, "b", 1, 36, 189, 0],
		[ⵠᐃᐃ, "t", ⵠⵠΔⵠ, 35, 190, ⲆⲆΔ],
		[ⲆⲆⵠ, "b", ⵠⵠⲆᐃ, ΔᐃᐃΔΔ, 200, ⵠⵠⵠ],
		[1, "s", ⵠᐃⵠ, 28, 194, 1],
		[ⲆⲆⵠ, "s", Δⵠᐃ, 32, 196, 1],
		[1, "s", 1, 36, 183, ⵠᐃᐃ],
		[Δⵠᐃ, "s", ᐃⵠΔⲆ, 38, 184, Δⵠᐃ],
		[ⵠᐃᐃ, "s", 2, 10, 192, ΔΔⵠ],
		[ⵠᐃᐃ, "s", ⵠⵠᐃⲆ, 12, 183, 1],
		[1, "s", ΔΔⵠ, ⵠᐃⵠΔΔ, 199, 1],
		[1, "b", 0, ⲆᐃⵠⲆⵠ, 202, ⲆⲆᐃ],
		[ⵠᐃᐃ, "t", ⵠⵠΔⵠ, 13, 203, 0],
		[ΔΔⵠ, "t", 4, 20, 200, ⵠᐃⵠ],
		[1, "t", 4, 12, 194, ⵠⵠⵠ],
		[ΔΔⵠ, "t", 5, ⵠⵠΔⵠᐃ, 205, ᐃⲆΔ],
		[ⵠᐃᐃ, "t", ⵠⲆⲆⲆ, 29, 200, 0],
		[1, "t", ⲆΔⲆⲆ, 28, 201, 0],
		[ΔΔⵠ, "s", 2, 25, 199, ΔΔⵠ],
		[1, "s", ⲆⲆⵠ, 22, 204, ⲆⵠⲆ],
		[1, "g", ᐃⲆⵠᐃ, 25, 205, 1],
		[ⲆⲆⵠ, "b", ΔΔⵠ, 27, 216, 0],
		[1, "s", 1, 25, 217, Δⵠᐃ],
		[ⲆⵠⲆ, "s", ΔΔⵠ, 33, 217, ΔΔⵠ],
		[1, "s", ⵠⲆΔᐃ, 35, 215, ⲆⵠⲆ],
		[1, "s", 0, 32, 221, ᐃⲆⲆ],
		[ΔΔⵠ, "t", 2, 31, 222, 0],
		[ⲆⲆⵠ, "t", 4, 26, 221, 0],
		[1, "b", 3, 27, 222, ⵠᐃⵠ],
		[1, "b", ⲆⲆΔ, 17, 217, 0],
		[1, "t", 3, 18, 216, 0],
		[Δⵠᐃ, "t", 4, 13, 215, ᐃⲆᐃ],
		[1, "t", 5, 30, 213, 0],
		[1, "t", 5, 24, 208, 0],
		[1, "s", 1, 12, 216, 1],
		[1, "s", 2, 11, 210, 1],
		[ᐃⲆⲆ, "s", 2, 34, 223, ΔΔⵠ],
		[ᐃⲆⲆ, "b", 2, 36, 218, ⵠⵠᐃ],
		[1, "t", 4, 40, 206, 0],
		[1, "t", ᐃᐃᐃᐃ, 35, 203, 0],
		[Δⵠᐃ, "t", 3, 39, 206, 0],
		[ⲆⵠⲆ, "b", 1, 34, 204, 0],
		[ⵠᐃᐃ, "s", 1, 33, 206, ΔΔⵠ],
		[ⲆⵠⲆ, "s", 1, 42, 203, ⲆⵠⲆ],
		[1, "s", ⵠⵠᐃ, 47, 196, ⲆⲆⵠ],
		[1, "b", ᐃⵠΔⲆ, 40, 196, 0],
		[ⲆⵠⲆ, "t", ⵠΔᐃⲆ, 39, 197, 0],
		[ⲆⲆⵠ, "t", 5, 44, 187, 0],
		[1, "b", 1, 46, 181, ⵠⵠⵠ],
		[ᐃⲆⲆ, "t", 2, 47, 182, ᐃⲆᐃ],
		[ⵠᐃᐃ, "b", ⲆⲆᐃ, 57, 182, ⲆⲆΔ],
		[ΔΔⵠ, "b", ⵠⵠⲆⲆ, 56, 183, ⵠⵠᐃ],
		[1, "t", ᐃⵠⵠⲆ, 55, 184, ⵠⵠⵠ],
		[1, "t", ΔⲆⵠⵠ, 62, 195, ⵠⵠⵠ],
		[ⲆⲆⵠ, "s", ⲆⲆⵠ, 51, 185, ⵠᐃᐃ],
		[ⵠᐃᐃ, "s", 2, 62, 180, ᐃⲆⲆ],
		[1, "s", 2, 61, 188, ᐃⲆⲆ],
		[ⲆⲆⵠ, "s", ⲆⲆⵠ, 61, 189, 1],
		[1, "s", ⵠⲆΔᐃ, 48, 195, Δⵠᐃ],
		[1, "b", ⲆⲆⵠ, 51, 199, 0],
		[ΔΔⵠ, "t", ᐃⵠΔⲆ, 52, 199, 0],
		[1, "t", ⵠᐃᐃΔ, 56, 204, 0],
		[1, "t", ΔⲆⲆⲆ, 57, 204, ᐃⲆᐃ],
		[1, "t", ⵠΔᐃⲆ, 51, 204, 0],
		[1, "s", ⲆⲆⵠ, 52, 205, ⲆⵠⲆ],
		[ⵠᐃᐃ, "s", 2, 57, 200, 1],
		[1, "s", ᐃⲆⲆ, 56, 199, 1],
		[1, "b", 0, 55, 192, ᐃⲆᐃ],
		[1, "t", ⲆΔⲆᐃ, 56, 193, ⵠᐃΔ],
		[1, "t", ΔⲆΔⲆ, 50, 190, ᐃⲆΔ],
		[ΔΔⵠ, "b", ΔΔⵠ, 76, 188, 0],
		[ΔΔⵠ, "t", ⵠⵠΔⵠ, 75, 188, 0],
		[ΔΔⵠ, "t", 2, 73, 192, Ⲇⵠᐃ],
		[1, "t", 4, 72, 191, 0],
		[1, "t", 5, 78, 193, 0],
		[1, "b", ⵠⵠᐃ, 79, 192, 0],
		[1, "s", ᐃᐃⲆⵠ, 79, 190, ⲆⵠⲆ],
		[ᐃⲆⲆ, "s", ᐃⲆⲆ, 74, 194, ᐃⲆⲆ],
		[1, "s", 1, 72, 187, 1],
		[ⵠᐃᐃ, "s", 0, 74, 183, 1],
		[ⵠᐃᐃ, "s", ⵠᐃᐃ, 75, 183, Δⵠᐃ],
		[1, "t", ⵠⲆΔᐃ, 69, 181, 0],
		[1, "t", 4, 70, 182, ⵠᐃΔ],
		[1, "t", ⲆⵠⲆᐃ, 69, 180, 0],
		[1, "b", 1, 65, 189, ⵠᐃⵠ],
		[ᐃⲆⲆ, "b", 2, 66, 189, 0],
		[1, "t", ⵠⵠⲆᐃ, 64, 188, 0],
		[1, "t", ΔⲆΔⲆ, 67, 192, ⵠⵠᐃ],
		[ⵠᐃᐃ, "b", ᐃⵠΔⲆ, 85, 183, ⵠⵠᐃ],
		[1, "t", 1, 84, 184, Ⲇⵠᐃ],
		[1, "t", ᐃⵠⵠⲆ, 81, 180, ⵠⵠᐃ],
		[ⵠᐃᐃ, "t", ⵠⲆⲆⵠ, 89, 180, 0],
		[Δⵠᐃ, "t", ⵠᐃΔ, 90, 188, ⵠᐃⵠ],
		[1, "t", 3, 89, 190, 0],
		[ⲆⵠⲆ, "s", ᐃⲆⲆ, 87, 187, 1],
		[1, "s", 2, 87, 197, 1],
		[1, "b", 1, 84, 200, 0],
		[1, "t", 2, 83, 201, ⲆⲆᐃ],
		[1, "t", ⵠΔᐃⲆ, 87, 207, 0],
		[ⲆⵠⲆ, "s", ᐃⲆⵠᐃ, 79, 202, ⲆⵠⲆ],
		[1, "s", 1, 80, 203, ΔΔⵠ],
		[1, "t", 0, 71, 200, 0],
		[ⵠᐃᐃ, "b", ᐃⲆⵠᐃ, 72, 201, 0],
		[Δⵠᐃ, "t", 2, 65, 205, ⲆⲆᐃ],
		[1, "t", 1, 66, 206, ⲆⲆᐃ],
		[1, "t", ᐃⵠⵠⲆ, 63, 209, 0],
		[ⵠᐃᐃ, "t", ᐃⵠΔⵠ, 73, 203, Δⵠⵠ],
		[Δⵠᐃ, "s", ⲆⲆᐃ, 70, 207, 1],
		[1, "s", 1, 71, 206, 1],
		[ᐃⲆⲆ, "s", 2, 68, 199, Δⵠᐃ],
		[ⲆⵠⲆ, "s", ΔΔⵠ, 64, 213, 1],
		[1, "t", 0, 85, 213, Δⵠⵠ],
		[1, "b", ᐃᐃⲆⵠ, 84, 212, ⲆⲆΔ],
		[1, "t", 3, 77, 209, ⵠᐃⵠ],
		[Δⵠᐃ, "t", ᐃⵠⵠⲆ, 83, 216, 0],
		[Δⵠᐃ, "t", 4, 73, 209, 0],
		[ⵠᐃᐃ, "b", 0, 86, 222, Ⲇⵠᐃ],
		[ⲆⵠⲆ, "b", 3, 87, 221, Ⲇⵠᐃ],
		[1, "s", 1, 80, 214, ⵠᐃᐃ],
		[1, "s", ᐃⲆⵠᐃ, 87, 216, 1],
		[1, "s", ⵠⲆΔᐃ, 84, 224, 1],
		[1, "s", 1, 77, 227, Δⵠᐃ],
		[Δⵠᐃ, "t", 1, 74, 222, ⵠⵠᐃ],
		[1, "b", ⵠᐃᐃ, 69, 218, ⲆⲆΔ],
		[1, "b", 2, 75, 219, ⵠᐃⵠ],
		[Δⵠᐃ, "s", ᐃᐃⲆⵠ, 74, 218, 1],
		[ⵠᐃᐃ, "s", ⲆⵠⲆ, 69, 223, ⲆⵠⲆ],
		[ⲆⵠⲆ, "s", 1, 77, 221, ⲆⲆⵠ],
		[ⲆⵠⲆ, "b", ᐃⲆⲆ, 72, 211, ᐃⲆΔ],
		[ΔΔⵠ, "b", Δⵠᐃ, 85, 232, 0],
		[1, "t", 2, 84, 233, 0],
		[ΔΔⵠ, "t", 2, 78, 238, Δⵠⵠ],
		[Δⵠᐃ, "b", 1, 77, 237, 0],
		[1, "t", ᐃᐃᐃᐃ, 87, 236, 0],
		[1, "t", ⵠⲆⲆⵠ, 76, 229, ⵠᐃΔ],
		[1, "b", 2, 74, 241, 0],
		[ᐃⲆⲆ, "s", 0, 73, 242, 1],
		[ⲆⲆⵠ, "s", 0, 81, 238, ⲆⵠⲆ],
		[1, "s", Δⵠᐃ, 82, 237, 1],
		[1, "s", 2, 72, 237, 1],
		[Δⵠᐃ, "s", 2, 78, 242, 1],
		[1, "b", ⲆⲆⵠ, 66, 230, ⲆⲆΔ],
		[ⵠᐃᐃ, "b", ᐃᐃⲆⵠ, 62, 229, 0],
		[ΔΔⵠ, "t", ⲆⲆⲆΔ, 67, 231, 0],
		[ᐃⲆⲆ, "t", ⲆⲆⲆΔ, 62, 228, 0],
		[ⵠᐃᐃ, "t", 5, 64, 233, ⵠᐃΔ],
		[Δⵠᐃ, "t", 2, 65, 234, 0],
		[ⲆⲆⵠ, "t", ᐃⲆⵠᐃ, 51, 220, ⵠᐃⵠ],
		[1, "t", ᐃⲆⲆ, 50, 218, Δⵠⵠ],
		[ΔΔⵠ, "b", 1, 45, 223, ⵠᐃΔ],
		[1, "b", 2, 46, 224, ⵠⵠⵠ],
		[1, "t", 4, 49, 218, 0],
		[1, "t", 4, 47, 225, ⵠᐃΔ],
		[ⲆⵠⲆ, "s", ⲆⲆⵠ, 50, 215, 1],
		[ⲆⲆⵠ, "s", 2, 51, 213, ⲆⲆⵠ],
		[ⵠᐃᐃ, "s", 2, 42, 227, 1],
		[1, "s", 1, 44, 227, ⵠᐃᐃ],
		[ΔΔⵠ, "s", 1, 60, 230, 1],
		[1, "s", 2, 59, 231, ⲆⲆⵠ],
		[ⲆⵠⲆ, "b", 1, 85, 252, 0],
		[ⲆⵠⲆ, "t", 2, 84, 251, 0],
		[1, "t", 2, 74, 250, Δⵠⵠ],
		[1, "t", 0, 75, 251, Ⲇⵠᐃ],
		[ⲆⲆⵠ, "b", 0, 83, 246, Δⵠⵠ],
		[1, "t", 3, 82, 247, 0],
		[1, "t", ΔΔⲆΔ, 81, 259, ᐃⲆΔ],
		[1, "t", 4, 69, 249, 0],
		[1, "t", ⲆⵠⲆᐃ, 87, 246, 0],
		[ᐃⲆⲆ, "t", ⵠⲆⲆⵠ, 75, 252, 0],
		[1, "s", Δⵠᐃ, 79, 257, ⲆⵠⲆ],
		[ⵠᐃᐃ, "s", 2, 78, 249, ⲆⵠⲆ],
		[1, "s", ⵠⵠᐃⲆ, 80, 258, ⵠᐃᐃ],
		[1, "s", 1, 88, 254, 1],
		[1, "s", 1, 85, 264, 1],
		[1, "s", ᐃᐃⲆⵠ, 89, 263, ⵠᐃᐃ],
		[1, "s", 2, 87, 269, 1],
		[ᐃⲆⲆ, "s", 0, 84, 268, 1],
		[ⲆⵠⲆ, "s", 2, 76, 267, ⵠᐃᐃ],
		[1, "s", ᐃⲆⲆ, 66, 261, ⲆⵠⲆ],
		[ⵠᐃᐃ, "s", ⵠᐃᐃ, 87, 274, Δⵠᐃ],
		[1, "s", 1, 76, 263, 1],
		[1, "s", 1, 59, 251, 1],
		[ⲆⵠⲆ, "s", ᐃⲆᐃ, 59, 252, ⵠᐃᐃ],
		[1, "t", 2, 86, 265, 0],
		[ⲆⲆⵠ, "t", ⵠⵠᐃ, 78, 270, 0],
		[ΔΔⵠ, "t", ᐃᐃⲆⵠ, 79, 271, 0],
		[ᐃⲆⲆ, "t", 0, 77, 260, 0],
		[ΔΔⵠ, "t", 3, 78, 261, 0],
		[1, "b", ⵠᐃᐃ, 71, 264, ⵠⵠᐃ],
		[1, "b", ⲆⵠⲆ, 88, 269, ⵠⵠⵠ],
		[1, "t", 5, 84, 264, 0],
		[ΔΔⵠ, "t", ⵠΔⲆᐃ, 79, 261, 0],
		[1, "t", 5, 72, 265, ⲆⲆΔ],
		[1, "t", Δᐃᐃⵠ, 77, 270, ᐃⲆᐃ],
		[1, "t", ⵠᐃⵠ, 87, 261, 0],
		[ⲆⲆⵠ, "t", ⵠⲆΔᐃ, 86, 260, ⵠᐃⵠ],
		[1, "t", ΔⲆⲆⲆ, 84, ⲆⲆⲆⵠᐃ, 0],
		[1, "t", ΔⲆΔⲆ, 68, 255, 0],
		[1, "t", ⲆⲆⵠ, 67, 254, 0],
		[1, "t", ⵠⲆΔᐃ, 65, 262, 0],
		[1, "t", 1, 57, 260, 0],
		[1, "t", ⵠⲆΔᐃ, 58, 259, 0],
		[1, "b", 1, 63, ᐃᐃⲆᐃΔᐃⲆ, ⲆⲆᐃ],
		[ΔΔⵠ, "b", ΔΔⵠ, 52, 248, 0],
		[ᐃⲆⲆ, "t", 2, 53, 248, 0],
		[ⲆⲆⵠ, "s", 1, 50, 253, ΔΔⵠ],
		[1, "s", 2, 67, 263, 1],
		[1, "s", 2, 52, 252, ⲆⲆⵠ],
		[1, "s", ⵠⲆΔᐃ, 71, 244, 1],
		[1, "b", 0, 57, 245, 0],
		[1, "t", 2, 58, 244, ⵠⵠⵠ],
		[ᐃⲆⲆ, "b", Δⵠᐃ, 53, 237, 0],
		[ⲆⵠⲆ, "t", ᐃⵠΔⲆ, 54, 237, 0],
		[1, "t", ᐃⵠΔⲆ, 41, 238, 0],
		[1, "t", 1, 42, 237, 0],
		[1, "t", ⲆⵠⲆᐃ, 57, 235, 0],
		[ᐃⲆⲆ, "t", ⵠⲆⲆⲆ, 60, 246, 0],
		[1, "t", 5, 50, 252, 0],
		[ᐃⲆⲆ, "t", 1, 42, 248, 0],
		[1, "b", 1, 43, 249, 0],
		[1, "b", 3, 37, 243, ᐃⲆΔ],
		[1, "s", 0, 50, 236, 1],
		[1, "s", 2, 39, 247, 1],
		[ΔΔⵠ, "s", 2, 51, 235, ᐃⲆⲆ],
		[1, "s", ⵠⵠΔⵠ, 60, 243, ⲆⵠⲆ],
		[1, "s", ᐃᐃⲆⵠ, 36, 240, 1],
		[ⲆⵠⲆ, "s", ᐃⵠΔⲆ, 43, 254, 1],
		[Δⵠᐃ, "s", ⲆⵠⲆ, 42, 254, ⲆⲆⵠ],
		[ⲆⲆⵠ, "t", ᐃⲆⲆ, 38, 233, ⵠⵠⵠ],
		[Δⵠᐃ, "t", ᐃᐃⲆⵠ, 35, 235, Δⵠⵠ],
		[ⲆⵠⲆ, "t", ΔⲆΔⲆ, 33, 228, ⵠⵠⵠ],
		[1, "t", 4, 33, 245, 0],
		[ⵠᐃᐃ, "t", 4, 43, 235, ⲆⲆΔ],
		[Δⵠᐃ, "t", ⵠⲆⲆⲆ, 45, 249, 0],
		[1, "t", ⵠΔⲆᐃ, 41, 253, 0],
		[ⲆⵠⲆ, "b", 1, 20, 227, 0],
		[1, "b", ⲆⵠⲆ, 14, 240, ⵠᐃΔ],
		[1, "t", 3, 21, 227, 0],
		[ⲆⲆⵠ, "t", 3, 27, 234, ᐃⲆΔ],
		[1, "t", ⵠⵠⲆᐃ, ⵠᐃⵠΔΔ, 241, ⵠⵠᐃ],
		[1, "t", ⵠⵠⲆⲆ, 12, 229, ⲆⲆΔ],
		[1, "t", ᐃⵠⵠⲆ, ᐃⲆᐃⵠΔ, 224, ⵠᐃΔ],
		[Δⵠᐃ, "t", ΔⲆⲆⲆ, ⲆΔΔⵠⵠ, 231, ⲆⲆᐃ],
		[1, "t", ⲆⲆⲆΔ, 22, 238, ᐃⲆᐃ],
		[ΔΔⵠ, "t", ΔⲆΔⲆ, 11, 239, 0],
		[ⲆⵠⲆ, "t", 1, 22, 243, 0],
		[1, "b", ᐃⲆⵠᐃ, 23, 242, 0],
		[ΔΔⵠ, "s", ⵠᐃᐃ, 23, 238, 1],
		[ⵠᐃᐃ, "s", ⲆⵠⲆ, 22, 228, ᐃⲆⲆ],
		[1, "s", ᐃⵠΔⲆ, 24, 228, Δⵠᐃ],
		[Δⵠᐃ, "s", 2, 21, 236, Δⵠᐃ],
		[1, "s", 0, 13, 228, Δⵠᐃ],
		[1, "s", ⵠᐃⵠ, 16, 242, ΔΔⵠ],
		[ⲆⲆⵠ, "s", ΔΔⵠ, ⵠᐃⵠΔΔ, 244, 1],
		[1, "s", 1, 34, 236, 1],
		[ᐃⲆⲆ, "t", 1, 26, 249, 0],
		[ⵠᐃᐃ, "t", Δⵠᐃ, 22, ᐃⲆᐃⲆΔⲆᐃ, ⵠⵠⵠ],
		[1, "t", ⵠⵠᐃⲆ, 23, 255, 0],
		[ⲆⵠⲆ, "b", Δⵠᐃ, 17, 256, 0],
		[ⲆⲆⵠ, "b", 2, ⲆⵠΔᐃⲆ, 256, 0],
		[ⲆⵠⲆ, "s", ⲆⲆΔ, 21, 252, Δⵠᐃ],
		[1, "s", 2, 20, 250, ⲆⲆⵠ],
		[ΔΔⵠ, "s", 2, 23, 259, ΔΔⵠ],
		[1, "s", ⲆⵠⲆ, ΔᐃΔⲆΔ, 257, Δⵠᐃ],
		[Δⵠᐃ, "t", 1, 31, 254, 0],
		[Δⵠᐃ, "t", 2, 32, 254, ⵠᐃⵠ],
		[ⲆⵠⲆ, "t", ⲆⲆⲆΔ, 28, 254, 0],
		[ⲆⲆⵠ, "t", 4, 34, 258, 0],
		[1, "t", 0, 29, 260, 0],
		[ΔΔⵠ, "b", ᐃᐃⲆⵠ, 30, 261, 0],
		[ⲆⵠⲆ, "t", ⲆⲆᐃ, 43, 262, ⵠⵠⵠ],
		[1, "t", ⵠⲆΔᐃ, 42, 263, ⵠⵠⵠ],
		[ⵠᐃᐃ, "t", ΔⲆΔⲆ, 46, 264, ⵠᐃⵠ],
		[Δⵠᐃ, "b", 1, 39, 265, ⲆⲆΔ],
		[ⲆⲆⵠ, "b", ΔΔⵠ, 58, 267, ᐃⲆΔ],
		[1, "t", 2, 57, 268, 0],
		[1, "t", 4, 62, 270, 0],
		[ⵠᐃᐃ, "t", Δᐃᐃⵠ, 52, 273, ⵠᐃⵠ],
		[ΔΔⵠ, "s", 1, 52, 269, ⲆⵠⲆ],
		[1, "s", ᐃⲆⲆ, 41, 272, 1],
		[1, "s", ⵠⵠΔⵠ, 41, 274, ᐃⲆⲆ],
		[ΔΔⵠ, "t", ⵠⲆΔᐃ, 42, 268, ᐃⲆᐃ],
		[ΔΔⵠ, "t", ⵠⵠᐃ, 43, 268, Ⲇⵠᐃ],
		[1, "b", 1, 46, 272, ⵠⵠᐃ],
		[1, "b", 1, ⵠⵠΔΔⵠ, 265, ᐃⲆΔ],
		[1, "t", ᐃⲆⵠᐃ, ⲆᐃⲆⵠⵠ, 266, 0],
		[ᐃⲆⲆ, "t", 4, 19, 264, 0],
		[1, "t", ΔⲆΔⲆ, 29, 263, 0],
		[ⵠᐃᐃ, "t", ᐃⵠⵠⲆ, ⲆΔΔⵠⵠ, 269, ⵠᐃΔ],
		[1, "t", ᐃⲆⲆ, 29, 271, ⲆⲆΔ],
		[1, "b", ᐃⲆⵠᐃ, 28, 272, ⵠᐃⵠ],
		[ᐃⲆⲆ, "t", 2, 24, 267, 0],
		[ⲆⲆⵠ, "t", ᐃᐃⲆⵠ, 20, 279, 0],
		[1, "t", 0, ΔΔΔⲆᐃ, 278, 0],
		[1, "t", 3, 13, 278, 0],
		[1, "b", ⵠⵠᐃ, 21, 284, 0],
		[1, "b", 0, ⲆⵠΔᐃⲆ, 289, ⵠᐃⵠ],
		[1, "t", 2, 20, 283, 0],
		[1, "t", 2, ⵠⲆⵠⲆᐃ, 290, 0],
		[ᐃⲆⲆ, "t", ᐃⵠⵠⲆ, ΔΔΔⲆᐃ, 283, 0],
		[ΔΔⵠ, "t", ⵠΔᐃⲆ, 20, 290, 0],
		[1, "s", ⲆⲆⵠ, 16, 285, 1],
		[ⲆⵠⲆ, "s", 1, 24, 288, 1],
		[1, "s", ⵠⵠᐃⲆ, 26, 287, ⲆⵠⲆ],
		[1, "s", 2, 16, 278, 1],
		[ⲆⵠⲆ, "s", 1, 21, 268, 1],
		[1, "s", 2, 19, 268, 1],
		[ⵠᐃᐃ, "t", 0, 12, 294, 0],
		[Δⵠᐃ, "b", 1, ΔⲆΔⵠᐃ, 295, Ⲇⵠᐃ],
		[Δⵠᐃ, "t", ⲆΔⲆⲆ, ᐃᐃΔΔΔ, 291, 0],
		[ⲆⲆⵠ, "t", 3, ΔΔⵠⲆⵠ, 299, ⵠⵠⵠ],
		[1, "t", ΔⲆΔⲆ, 11, 287, 0],
		[ᐃⲆⲆ, "t", 4, ΔΔΔΔᐃ, 298, ⵠⵠᐃ],
		[1, "t", ⲆⵠⲆ, 27, 294, ⵠᐃⵠ],
		[1, "b", 2, 26, 295, 0],
		[ⲆⵠⲆ, "t", ΔᐃΔⲆ, 33, 297, ᐃⲆΔ],
		[1, "b", ⲆⵠⲆ, 48, 278, 0],
		[1, "b", 0, 46, 280, ⲆⲆᐃ],
		[ⲆⲆⵠ, "b", 2, 50, 280, 0],
		[ᐃⲆⲆ, "t", Δⵠⵠ, 44, 282, ᐃⲆᐃ],
		[1, "b", ᐃⲆⲆ, 49, 283, ᐃⲆΔ],
		[ⲆⲆⵠ, "b", ⵠᐃΔ, 51, 278, ⲆⲆΔ],
		[1, "b", ⲆⵠⵠⲆ, 50, 279, 0],
		[ⲆⲆⵠ, "b", ⵠⵠⲆⲆ, 44, 284, Ⲇⵠᐃ],
		[Δⵠᐃ, "b", 0, 47, 284, 0],
		[1, "b", ᐃᐃⲆⵠ, 42, 283, 0],
		[ΔΔⵠ, "t", 4, 51, 277, ᐃⲆᐃ],
		[ⲆⵠⲆ, "b", ΔΔⵠ, 44, 286, 0],
		[ᐃⲆⲆ, "b", 2, 46, 286, ᐃⲆΔ],
		[ⲆⵠⲆ, "b", ⵠᐃᐃ, 42, 285, 0],
		[1, "b", ᐃΔᐃⲆ, 41, 286, 0],
		[ⲆⵠⲆ, "t", 5, 42, 287, ⵠᐃⵠ],
		[Δⵠᐃ, "b", ᐃⲆⲆ, 42, 278, ⵠᐃⵠ],
		[1, "b", ᐃᐃⲆⵠ, 43, 279, 0],
		[Δⵠᐃ, "b", ᐃⲆᐃ, 40, 280, 0],
		[1, "t", ΔⲆΔⲆ, 39, 283, Δⵠⵠ],
		[ⵠᐃᐃ, "t", 4, 39, 279, 0],
		[Δⵠᐃ, "t", 5, 43, 277, Ⲇⵠᐃ],
		[ᐃⲆⲆ, "t", 5, 47, 287, 0],
		[1, "t", ΔⲆⲆⲆ, 46, 277, Δⵠⵠ],
		[ⲆⲆⵠ, "t", 4, 45, 290, 0],
		[ⵠᐃᐃ, "t", 4, 36, 285, 0],
		[ⵠᐃᐃ, "t", ⲆⵠⵠⲆ, 35, 284, 0],
		[1, "t", 3, 36, 272, ⲆⲆᐃ],
		[1, "t", ΔⲆⲆⲆ, 35, 271, 0],
		[ᐃⲆⲆ, "t", ⵠᐃᐃ, 29, 279, 0],
		[ⵠᐃᐃ, "b", 1, 32, 277, ⲆⲆᐃ],
		[1, "t", ΔᐃΔⲆ, 31, 278, ⲆⲆΔ],
		[ᐃⲆⲆ, "b", 2, 28, 280, ⵠⵠⵠ],
		[1, "t", ΔΔⲆΔ, 29, 286, ⵠⵠⵠ],
		[ⵠᐃᐃ, "t", 5, 28, 275, 0],
		[1, "t", ΔᐃΔⲆ, 37, 292, ᐃⲆᐃ],
		[ⵠᐃᐃ, "b", ᐃⲆⲆ, 36, 291, ⲆⲆΔ],
		[1, "b", ⵠⵠᐃ, 34, 298, ⲆⲆΔ],
		[ⲆⵠⲆ, "t", ΔᐃᐃΔ, 31, 292, Δⵠⵠ],
		[ⲆⵠⲆ, "t", ΔΔⲆΔ, 46, 295, ᐃⲆΔ],
		[ᐃⲆⲆ, "t", ΔΔⲆΔ, 59, 287, ⵠᐃⵠ],
		[1, "b", ⲆⵠⲆ, 58, 286, 0],
		[1, "s", 1, 68, 284, 1],
		[ᐃⲆⲆ, "s", ᐃⵠΔⲆ, 70, 286, 1],
		[1, "s", 0, 67, 284, 1],
		[ⵠᐃᐃ, "t", 3, 66, 283, ⲆⲆᐃ],
		[Δⵠᐃ, "t", ΔΔⵠ, 65, 282, 0],
		[1, "b", ⲆⲆⵠ, 64, 288, ⲆⲆΔ],
		[1, "t", ⲆΔⲆᐃ, 60, 293, Ⲇⵠᐃ],
		[1, "t", ⵠᐃᐃ, 61, 294, Ⲇⵠᐃ],
		[1, "b", Δⵠᐃ, 76, 294, 0],
		[1, "t", 5, 75, 295, ⲆⲆᐃ],
		[1, "t", 5, 56, 293, 0],
		[ⲆⵠⲆ, "t", ᐃⵠΔⵠ, 59, 281, 0],
		[1, "t", 5, 67, 291, 0],
		[ⲆⵠⲆ, "b", ⲆⲆᐃ, 88, 293, ⵠⵠⵠ],
		[ⲆⵠⲆ, "t", ᐃᐃⲆⵠ, 89, 292, ⵠᐃⵠ],
		[ⲆⵠⲆ, "t", 2, 85, 286, 0],
		[ΔΔⵠ, "t", 4, 88, 289, ᐃⲆᐃ],
		[1, "t", ᐃⵠⵠⲆ, 79, 287, 0],
		[1, "b", 1, 84, 285, ⵠⵠⵠ],
		[1, "t", 3, 75, 284, 0],
		[1, "b", 0, 75, 278, ⵠᐃΔ],
		[ᐃⲆⲆ, "t", 3, 74, 277, 0],
		[1, "t", ΔᐃᐃΔ, 81, 276, 0],
		[ⵠᐃᐃ, "t", ⵠⲆΔᐃ, 65, 276, ⵠⵠᐃ],
		[ⵠᐃᐃ, "b", 1, 66, 275, Ⲇⵠᐃ],
		[Δⵠᐃ, "g", 0, 45, 261, Δⵠᐃ],
		[1, "g", 1, 39, 258, ΔΔⵠ],
		[1, "g", 0, 35, 250, ⲆⲆⵠ],
		[1, "g", 2, 22, 247, ⲆⲆⵠ],
		[1, "g", 2, 27, 227, 1],
		[1, "g", 2, 63, 218, ᐃⲆⲆ],
		[1, "g", ⲆⵠⲆ, 56, 224, 1],
		[ΔΔⵠ, "g", 0, 46, 231, ⵠᐃᐃ],
		[1, "g", 1, 65, 240, ⲆⲆⵠ],
		[1, "g", ᐃᐃⲆⵠ, 67, 238, Δⵠᐃ],
		[ⵠᐃᐃ, "g", ᐃⲆⵠᐃ, 79, 232, ΔΔⵠ],
		[ⲆⵠⲆ, "g", ⵠⵠᐃⲆ, 72, 253, 1],
		[1, "g", ᐃᐃⲆⵠ, 62, 264, ⲆⵠⲆ],
		[ⵠᐃᐃ, "g", 2, 28, 267, ΔΔⵠ],
		[ⲆⲆⵠ, "g", ᐃᐃⲆⵠ, 58, 274, ⲆⲆⵠ],
		[1, ᐃ[457], ᐃⵠΔⲆ, 14, 182, 0],
		[1, ᐃ[457], 2, 24, 182, ⵠᐃΔ],
		[ᐃⲆⲆ, ᐃ[457], 0, 11, 185, ⵠᐃΔ],
		[1, ᐃ[457], 0, ᐃΔⲆΔⵠᐃⵠ, 194, 0],
		[1, ᐃ[457], ⵠᐃᐃ, 25, 196, 0],
		[1, ᐃ[457], 3, 31, 183, ⵠᐃΔ],
		[Δⵠᐃ, ᐃ[457], 0, 38, 181, 0],
		[1, ᐃ[457], ⵠⵠᐃⲆ, 45, 186, ⵠᐃⵠ],
		[1, ᐃ[457], 1, 38, 191, 0],
		[1, ᐃ[457], ⲆⲆᐃ, 56, 181, 0],
		[1, ᐃ[457], 1, 68, 182, Δⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], ⵠⲆΔᐃ, 80, 181, ⵠⵠⵠ],
		[1, ᐃ[457], ⲆⲆΔΔ, 86, 187, 0],
		[ⲆⲆⵠ, ᐃ[457], 0, 84, 193, 0],
		[1, ᐃ[457], 1, 82, 201, ⲆⲆᐃ],
		[1, ᐃ[457], ᐃⵠΔⲆ, 64, 191, ᐃⲆΔ],
		[ⵠᐃᐃ, ᐃ[457], 2, 72, 200, ⲆⲆΔ],
		[ΔΔⵠ, ᐃ[457], ⵠⵠⲆᐃ, 64, 201, ⲆⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 2, 76, 209, ⲆⲆᐃ],
		[1, ᐃ[457], ⵠⲆᐃΔ, 71, 212, 0],
		[ⲆⵠⲆ, ᐃ[457], 1, 86, 214, ⵠᐃΔ],
		[ᐃⲆⲆ, ᐃ[457], Ⲇⵠᐃ, 57, 208, ᐃⲆᐃ],
		[1, ᐃ[457], 0, 41, 203, Δⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], 1, ⵠⵠⲆΔⲆ, 206, 0],
		[ⲆⵠⲆ, ᐃ[457], ⵠⵠᐃⲆ, 25, 209, ⵠᐃⵠ],
		[1, ᐃ[457], ⵠᐃᐃΔ, 16, 218, 0],
		[1, ᐃ[457], ⲆΔⲆⲆ, 11, 227, Δⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], 0, 22, 229, ᐃⲆΔ],
		[1, ᐃ[457], ΔΔⵠ, ⵠⵠΔⵠᐃ, 239, ⲆⲆᐃ],
		[1, ᐃ[457], 2, 24, 238, 0],
		[1, ᐃ[457], ⵠᐃⵠⲆ, 22, 246, Δⵠⵠ],
		[1, ᐃ[457], 3, ΔⵠⲆᐃΔ, 253, 0],
		[Δⵠᐃ, ᐃ[457], ⲆⲆⵠ, 18, 258, 0],
		[1, ᐃ[457], 1, 28, 261, Δⵠⵠ],
		[1, ᐃ[457], Δⵠᐃ, ⵠⲆⵠᐃⵠΔⵠ, 267, 0],
		[ⵠᐃᐃ, ᐃ[457], 0, 24, 268, 0],
		[1, ᐃ[457], ⲆⲆᐃ, ⵠΔΔΔΔⵠΔ, 278, 0],
		[ⲆⲆⵠ, ᐃ[457], ᐃᐃⲆⵠ, 21, 279, ᐃⲆᐃ],
		[1, ᐃ[457], ᐃᐃⲆⵠ, 30, 272, 0],
		[ⵠᐃᐃ, ᐃ[457], ⵠⲆΔᐃ, 29, 281, ⲆⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], ᐃⵠΔⲆ, 15, 284, ⲆⲆΔ],
		[1, ᐃ[457], ⵠⵠⲆᐃ, ⵠᐃⲆΔⵠ, 291, 0],
		[1, ᐃ[457], ⵠᐃᐃΔ, 30, 287, ⵠⵠⵠ],
		[1, ᐃ[457], 3, 27, 293, 0],
		[ⲆⲆⵠ, ᐃ[457], 0, 25, 296, Δⵠⵠ],
		[Δⵠᐃ, ᐃ[457], 0, ⵠⵠⲆᐃΔ, 298, ᐃⲆΔ],
		[1, ᐃ[457], ⵠᐃΔ, 8, 286, ⲆⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], ⵠⵠΔⵠ, 36, 299, ᐃⲆᐃ],
		[1, ᐃ[457], 2, 37, 280, 0],
		[ⲆⵠⲆ, ᐃ[457], 3, 38, 291, 0],
		[ⲆⵠⲆ, ᐃ[457], ⲆⵠⲆ, 48, 287, 0],
		[1, ᐃ[457], 1, 46, 277, ⵠᐃΔ],
		[1, ᐃ[457], ⲆⵠⲆ, 53, 278, 0],
		[ΔΔⵠ, ᐃ[457], 3, 48, 295, 0],
		[1, ᐃ[457], Δⵠⵠ, 57, 294, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], ΔΔⵠ, 65, 290, ⵠⵠⵠ],
		[Δⵠᐃ, ᐃ[457], ΔΔⵠ, 84, 292, 0],
		[ΔΔⵠ, ᐃ[457], ⵠⵠΔⵠ, 77, 295, 0],
		[1, ᐃ[457], ⵠⵠᐃⲆ, 84, 287, Ⲇⵠᐃ],
		[1, ᐃ[457], ⵠᐃⵠ, 74, 279, Ⲇⵠᐃ],
		[1, ᐃ[457], 3, 65, 274, ᐃⲆᐃ],
		[1, ᐃ[457], 2, 71, 267, ⵠⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], 2, 65, 261, 0],
		[1, ᐃ[457], ᐃⵠΔⲆ, 47, 264, ᐃⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 3, 47, 258, ⵠⵠᐃ],
		[1, ᐃ[457], 3, 53, 251, ᐃⲆᐃ],
		[ᐃⲆⲆ, ᐃ[457], ⵠⵠΔⵠ, 40, 253, 0],
		[1, ᐃ[457], ᐃⲆΔ, 35, 244, 0],
		[ᐃⲆⲆ, ᐃ[457], 0, 37, 233, ⲆⲆΔ],
		[1, ᐃ[457], ΔᐃΔⲆ, 44, 226, ᐃⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], ⵠⵠᐃⲆ, 37, 219, 0],
		[ⲆⵠⲆ, ᐃ[457], ⵠⵠᐃⲆ, 54, 234, ᐃⲆΔ],
		[1, ᐃ[457], 1, 66, 234, Ⲇⵠᐃ],
		[ⵠᐃᐃ, ᐃ[457], 2, 65, 241, ᐃⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 0, 68, 249, ᐃⲆᐃ],
		[Δⵠᐃ, ᐃ[457], ΔᐃΔⲆ, 78, 257, Ⲇⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], ⵠⲆΔᐃ, 86, 253, ⲆⲆᐃ],
		[ΔΔⵠ, ᐃ[457], ᐃᐃⲆⵠ, 83, 245, 0],
		[1, ᐃ[457], ⲆⵠⲆ, 82, 238, Δⵠⵠ],
		[1, ᐃ[457], ⲆΔⲆⲆ, 76, 235, 0],
		[ᐃⲆⲆ, ᐃ[457], ᐃⲆⵠᐃ, 86, 232, ⵠⵠⵠ],
		[1, ᐃ[457], Ⲇⵠᐃ, 86, 224, 0],
		[ⲆⲆⵠ, ᐃ[457], ᐃⵠΔⲆ, 76, 226, 0],
		[ΔΔⵠ, ᐃ[457], 2, 61, 228, 0],
		[Δⵠᐃ, ᐃ[457], 2, 58, 217, Ⲇⵠᐃ],
		[1, ᐃ[457], 0, 49, 217, 0],
		[ᐃⲆⲆ, ᐃ[457], ΔᐃᐃΔΔ, 11, 179, 0],
		[1, ᐃ[457], 20, 17, 180, 0],
		[ⲆⲆⵠ, ᐃ[457], 22, 18, 181, ⲆⲆᐃ],
		[1, ᐃ[457], 19, 30, 184, ⵠᐃΔ],
		[ⲆⲆⵠ, ᐃ[457], ⲆⵠⲆⵠⲆ, 27, 187, ⵠⵠᐃ],
		[1, ᐃ[457], ⲆⵠᐃᐃⲆ, 30, 195, ᐃⲆᐃ],
		[1, ᐃ[457], ΔᐃⵠⲆⲆ, 18, 192, 0],
		[ⵠᐃᐃ, ᐃ[457], 19, 44, 182, ᐃⲆᐃ],
		[1, ᐃ[457], 19, 49, 182, 0],
		[ⲆⲆⵠ, ᐃ[457], 19, 54, 182, 0],
		[ⲆⲆⵠ, ᐃ[457], 19, 59, 183, 0],
		[ΔΔⵠ, ᐃ[457], 19, 56, 186, ⵠⵠⵠ],
		[1, ᐃ[457], ᐃⵠᐃⲆⲆ, 46, 188, 0],
		[Δⵠᐃ, ᐃ[457], ⵠⲆⵠⲆᐃ, 58, 193, 0],
		[1, ᐃ[457], 19, 67, 187, 0],
		[ᐃⲆⲆ, ᐃ[457], ⲆⵠᐃᐃⲆ, 65, 192, ⵠⵠⵠ],
		[ⵠᐃᐃ, ᐃ[457], ᐃᐃⲆΔⵠ, 71, 180, 0],
		[1, ᐃ[457], ⲆⵠⲆⵠⲆ, 78, 187, 0],
		[1, ᐃ[457], ⵠⲆⵠⲆᐃ, 80, 194, ᐃⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], ΔᐃᐃΔΔ, 72, 193, 0],
		[1, ᐃ[457], 19, 82, 182, ⵠᐃΔ],
		[1, ᐃ[457], ⵠᐃⵠᐃⵠ, 88, 185, ⵠⵠⵠ],
		[1, ᐃ[457], 19, 87, 189, 0],
		[1, ᐃ[457], 19, 86, 197, 0],
		[1, ᐃ[457], ΔΔΔⲆᐃ, 85, 203, Δⵠⵠ],
		[ⵠᐃᐃ, ᐃ[457], ΔΔΔⲆᐃ, 74, 200, 0],
		[1, ᐃ[457], 19, 70, 202, 0],
		[1, ᐃ[457], 19, 83, 199, 0],
		[1, ᐃ[457], 19, 86, 208, Ⲇⵠᐃ],
		[1, ᐃ[457], 19, 84, 214, 0],
		[1, ᐃ[457], ⲆⵠⲆⵠⲆ, 83, 211, 0],
		[1, ᐃ[457], 19, 84, 217, ⲆⲆᐃ],
		[1, ᐃ[457], ⵠᐃⵠᐃⵠ, 77, 210, ⵠᐃΔ],
		[1, ᐃ[457], 19, 71, 210, ᐃⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], ᐃᐃⲆΔⵠ, 73, 213, 0],
		[1, ᐃ[457], 19, 66, 207, 0],
		[1, ᐃ[457], ᐃᐃⲆΔⵠ, 66, 204, ⲆⲆΔ],
		[1, ᐃ[457], 19, 62, 209, Ⲇⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], 19, 63, 201, ⵠⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], ⲆⵠᐃᐃⲆ, 56, 205, 0],
		[ΔΔⵠ, ᐃ[457], 19, 49, 199, 0],
		[1, ᐃ[457], ᐃᐃⲆΔⵠ, 50, 205, 0],
		[1, ᐃ[457], ΔᐃⵠⲆⲆ, 40, 197, ⵠᐃⵠ],
		[1, ᐃ[457], ⵠⲆⵠⲆᐃ, 38, 198, ⵠⵠᐃ],
		[Δⵠᐃ, ᐃ[457], ᐃΔΔⵠΔ, 40, 208, ⵠᐃⵠ],
		[1, ᐃ[457], ᐃΔΔⵠΔ, 36, 204, Ⲇⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 19, 33, 204, 0],
		[1, ᐃ[457], ᐃⵠᐃⲆⲆ, 29, 202, 0],
		[1, ᐃ[457], ⲆⵠᐃᐃⲆ, 27, 200, 0],
		[1, ᐃ[457], 19, 26, 193, 0],
		[1, ᐃ[457], ⵠᐃⵠᐃⵠ, ΔⲆᐃⲆᐃⲆⲆ, 201, 0],
		[1, ᐃ[457], ⵠⲆⵠⲆᐃ, ⲆΔⲆⲆⵠ, 199, 0],
		[ΔΔⵠ, ᐃ[457], ⵠⲆⵠⲆᐃ, 12, 196, ⵠⵠⵠ],
		[1, ᐃ[457], ᐃⵠᐃⲆⲆ, ⵠⲆᐃᐃⲆ, 204, 0],
		[1, ᐃ[457], 19, 11, 201, 0],
		[1, ᐃ[457], ΔᐃᐃΔΔ, 23, 208, ⲆⲆΔ],
		[1, ᐃ[457], 19, 31, 214, ᐃⲆᐃ],
		[ΔΔⵠ, ᐃ[457], ᐃᐃⲆΔⵠ, 26, 215, ⵠⵠⵠ],
		[1, ᐃ[457], 19, 36, 217, 0],
		[1, ᐃ[457], 19, 32, 223, 0],
		[ⲆⵠⲆ, ᐃ[457], ⲆⵠⲆⵠⲆ, 26, 223, ᐃⲆΔ],
		[1, ᐃ[457], ⵠⲆⵠⲆᐃ, 18, 218, Ⲇⵠᐃ],
		[1, ᐃ[457], ΔᐃᐃΔΔ, ⲆᐃⲆⵠⵠ, 215, 0],
		[ᐃⲆⲆ, ᐃ[457], 19, 17, 212, ᐃⲆΔ],
		[1, ᐃ[457], ᐃᐃⲆΔⵠ, 15, 224, 0],
		[1, ᐃ[457], 19, 19, 229, ⵠⵠᐃ],
		[Δⵠᐃ, ᐃ[457], ΔᐃⵠⲆⲆ, 10, 230, ⵠⵠᐃ],
		[Δⵠᐃ, ᐃ[457], ⵠᐃⵠᐃⵠ, 22, 240, Δⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], ΔᐃⵠⲆⲆ, 13, 238, Ⲇⵠᐃ],
		[1, ᐃ[457], ⵠⲆⵠⲆᐃ, ⲆΔⵠΔᐃⵠⵠ, 243, ⵠⵠⵠ],
		[1, ᐃ[457], ⲆⵠᐃᐃⲆ, 24, 244, 0],
		[ΔΔⵠ, ᐃ[457], ⲆⵠᐃᐃⲆ, 24, 250, 0],
		[ⲆⲆⵠ, ᐃ[457], 19, 28, 253, 0],
		[ΔΔⵠ, ᐃ[457], 19, 33, 255, ⵠᐃⵠ],
		[1, ᐃ[457], ΔΔΔⲆᐃ, 34, 260, ⵠⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], ΔΔΔⲆᐃ, 31, 260, ᐃⲆΔ],
		[1, ᐃ[457], 19, 38, 267, 0],
		[ⲆⵠⲆ, ᐃ[457], ᐃΔΔⵠΔ, 44, 264, 0],
		[ⲆⲆⵠ, ᐃ[457], ⵠⲆⵠⲆᐃ, 43, 261, ᐃⲆΔ],
		[1, ᐃ[457], 19, ⲆⵠᐃΔΔ, 257, ⵠᐃΔ],
		[Δⵠᐃ, ᐃ[457], ⲆⵠⲆⵠⲆ, 22, 258, Ⲇⵠᐃ],
		[1, ᐃ[457], 19, 12, 253, 0],
		[ⵠᐃᐃ, ᐃ[457], 19, ⵠᐃΔᐃⲆ, 242, 0],
		[ⵠᐃᐃ, ᐃ[457], 19, ⵠᐃΔᐃⲆ, 255, ᐃⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], ⲆⵠⲆⵠⲆ, 15, 264, ⲆⲆΔ],
		[1, ᐃ[457], 19, 20, 265, 0],
		[ΔΔⵠ, ᐃ[457], 19, 12, 271, ⵠᐃⵠ],
		[1, ᐃ[457], ΔᐃᐃΔΔ, ᐃΔᐃⵠⲆ, 272, 0],
		[ᐃⲆⲆ, ᐃ[457], ⵠᐃⵠᐃⵠ, 13, 277, 0],
		[1, ᐃ[457], ᐃΔΔⵠΔ, 21, 277, 0],
		[1, ᐃ[457], 19, 21, 281, 0],
		[ⲆⵠⲆ, ᐃ[457], 19, 27, 282, 0],
		[ⵠᐃᐃ, ᐃ[457], 19, 29, 278, 0],
		[ΔΔⵠ, ᐃ[457], ⵠᐃⵠᐃⵠ, 29, 273, ⲆⲆᐃ],
		[Δⵠᐃ, ᐃ[457], ΔᐃᐃΔΔ, 36, 271, 0],
		[1, ᐃ[457], ΔΔΔⲆᐃ, ᐃΔᐃⵠⲆ, 278, ⵠᐃΔ],
		[1, ᐃ[457], ⲆⵠᐃᐃⲆ, 11, 286, ⵠⵠⵠ],
		[ⲆⲆⵠ, ᐃ[457], 19, ⵠⲆΔΔⵠ, 291, 0],
		[ᐃⲆⲆ, ᐃ[457], ⲆⵠᐃᐃⲆ, 14, 294, ᐃⲆΔ],
		[1, ᐃ[457], ᐃΔΔⵠΔ, ᐃΔᐃⵠⲆ, 292, ᐃⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 19, ΔⲆⵠᐃⵠ, 300, ⲆⲆΔ],
		[1, ᐃ[457], 19, 18, 298, ⵠⵠᐃ],
		[1, ᐃ[457], ΔᐃⵠⲆⲆ, ⲆⵠΔᐃΔ, 301, 0],
		[1, ᐃ[457], ΔᐃⵠⲆⲆ, 27, 296, 0],
		[1, ᐃ[457], 19, 25, 292, 0],
		[ⲆⵠⲆ, ᐃ[457], ⵠᐃⵠᐃⵠ, 23, 301, 0],
		[1, ᐃ[457], ΔᐃⵠⲆⲆ, 28, 301, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], 19, 35, 297, ⵠⵠᐃ],
		[1, ᐃ[457], 19, 37, 301, Δⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], 19, 43, 301, 0],
		[ᐃⲆⲆ, ᐃ[457], ⲆⵠⲆⵠⲆ, 46, 294, 0],
		[1, ᐃ[457], 19, 46, 288, ⲆⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], 19, 40, 287, Δⵠⵠ],
		[1, ᐃ[457], 19, 50, 301, 0],
		[ᐃⲆⲆ, ᐃ[457], ᐃⵠᐃⲆⲆ, 58, 301, 0],
		[1, ᐃ[457], 19, 64, 301, ⵠᐃΔ],
		[Δⵠᐃ, ᐃ[457], 19, 71, 301, 0],
		[1, ᐃ[457], 19, 80, 301, 0],
		[ⵠᐃᐃ, ᐃ[457], 19, 87, 301, ⲆⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], ΔᐃⵠⲆⲆ, 86, 294, 0],
		[Δⵠᐃ, ᐃ[457], 19, 87, 290, ⵠᐃⵠ],
		[Δⵠᐃ, ᐃ[457], 19, 82, 286, 0],
		[1, ᐃ[457], ΔᐃᐃΔΔ, 75, 285, ⵠᐃΔ],
		[Δⵠᐃ, ᐃ[457], ⲆⵠᐃᐃⲆ, 66, 292, 0],
		[1, ᐃ[457], ΔΔΔⲆᐃ, 66, 288, Δⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], ⲆⵠᐃᐃⲆ, 58, 288, 0],
		[1, ᐃ[457], ⲆⵠᐃᐃⲆ, 67, 282, ⵠᐃⵠ],
		[ⵠᐃᐃ, ᐃ[457], ⵠⲆⵠⲆᐃ, 61, 281, 0],
		[ⵠᐃᐃ, ᐃ[457], ⲆⵠⲆⵠⲆ, 60, 295, 0],
		[ΔΔⵠ, ᐃ[457], 19, 50, 282, ⵠⵠᐃ],
		[1, ᐃ[457], ᐃᐃⲆΔⵠ, 47, 283, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], 19, 48, 281, ⵠᐃⵠ],
		[ⲆⲆⵠ, ᐃ[457], ⵠⲆⵠⲆᐃ, 44, 277, ⲆⲆᐃ],
		[1, ᐃ[457], 19, 41, 282, 0],
		[1, ᐃ[457], ΔΔΔⲆᐃ, 38, 281, ⲆⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], 19, 42, 288, 0],
		[Δⵠᐃ, ᐃ[457], 19, 52, 281, 0],
		[ᐃⲆⲆ, ᐃ[457], 19, 50, 275, ⵠⵠⵠ],
		[1, ᐃ[457], ᐃΔΔⵠΔ, 39, 277, Ⲇⵠᐃ],
		[Δⵠᐃ, ᐃ[457], ⵠⲆⵠⲆᐃ, 38, 284, 0],
		[1, ᐃ[457], 19, 51, 285, Δⵠⵠ],
		[1, ᐃ[457], 19, 38, 278, 0],
		[ⲆⵠⲆ, ᐃ[457], ΔΔΔⲆᐃ, 47, 272, ⵠᐃⵠ],
		[ΔΔⵠ, ᐃ[457], ⲆⵠⲆⵠⲆ, 44, 267, 0],
		[1, ᐃ[457], 19, 76, 280, 0],
		[1, ᐃ[457], 19, 78, 272, 0],
		[1, ᐃ[457], ᐃⵠᐃⲆⲆ, 68, 275, Δⵠⵠ],
		[ΔΔⵠ, ᐃ[457], ⵠᐃⵠᐃⵠ, 70, 265, ᐃⲆᐃ],
		[1, ᐃ[457], 19, 65, 263, Ⲇⵠᐃ],
		[1, ᐃ[457], 19, 64, 262, Δⵠⵠ],
		[1, ᐃ[457], 19, 60, 268, ⲆⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 19, 56, 266, ⵠⵠᐃ],
		[1, ᐃ[457], ᐃΔΔⵠΔ, 55, 260, 0],
		[Δⵠᐃ, ᐃ[457], ΔᐃᐃΔΔ, 59, 258, ⵠⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], 19, 62, 255, 0],
		[1, ᐃ[457], ᐃᐃⲆΔⵠ, 67, 253, 0],
		[1, ᐃ[457], 19, 69, 256, Ⲇⵠᐃ],
		[1, ᐃ[457], ᐃΔΔⵠΔ, 44, 253, 0],
		[ⵠᐃᐃ, ᐃ[457], ΔᐃⵠⲆⲆ, 44, 250, ᐃⲆΔ],
		[1, ᐃ[457], 19, 36, 245, ⲆⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], 19, 39, 239, ⵠᐃΔ],
		[Δⵠᐃ, ᐃ[457], 19, 42, 234, 0],
		[1, ᐃ[457], ΔΔΔⲆᐃ, 37, 235, ⲆⲆᐃ],
		[1, ᐃ[457], 19, 45, 226, ᐃⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 19, 46, 222, 0],
		[1, ᐃ[457], 19, 51, 218, 0],
		[1, ᐃ[457], 19, 68, 218, ⵠⵠⵠ],
		[ⵠᐃᐃ, ᐃ[457], 19, 74, 224, 0],
		[ⲆⲆⵠ, ᐃ[457], ᐃΔΔⵠΔ, 76, 218, Ⲇⵠᐃ],
		[1, ᐃ[457], ΔᐃⵠⲆⲆ, 84, 221, 0],
		[1, ᐃ[457], ⵠⲆⵠⲆᐃ, 88, 223, ⵠᐃⵠ],
		[ⲆⲆⵠ, ᐃ[457], 19, 76, 230, 0],
		[Δⵠᐃ, ᐃ[457], ΔᐃⵠⲆⲆ, 86, 234, 0],
		[1, ᐃ[457], 19, 79, 237, 0],
		[Δⵠᐃ, ᐃ[457], ΔᐃⵠⲆⲆ, 75, 243, 0],
		[ᐃⲆⲆ, ᐃ[457], 19, 81, 245, ⲆⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], ⵠⲆⵠⲆᐃ, 83, 247, ⵠᐃΔ],
		[1, ᐃ[457], ⵠⲆⵠⲆᐃ, 88, 247, ᐃⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], ΔᐃᐃΔΔ, 84, 254, 0],
		[ⲆⲆⵠ, ᐃ[457], ᐃᐃⲆΔⵠ, 86, 251, ᐃⲆΔ],
		[1, ᐃ[457], ⲆⵠᐃᐃⲆ, 85, 260, 0],
		[1, ᐃ[457], ΔᐃᐃΔΔ, 79, 260, 0],
		[1, ᐃ[457], ⵠᐃⵠᐃⵠ, 76, 251, 0],
		[ⲆⵠⲆ, ᐃ[457], ᐃⵠᐃⲆⲆ, 72, 251, 0],
		[ᐃⲆⲆ, ᐃ[457], 19, 69, 251, 0],
		[ᐃⲆⲆ, ᐃ[457], ᐃⵠᐃⲆⲆ, 87, 266, Δⵠⵠ],
		[1, ᐃ[457], 19, 89, 270, ⵠᐃⵠ],
		[Δⵠᐃ, ᐃ[457], 19, 87, 271, 0],
		[ⵠᐃᐃ, ᐃ[457], ΔᐃⵠⲆⲆ, 82, 277, ᐃⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], 19, 87, 284, 0],
		[ΔΔⵠ, ᐃ[457], 19, 87, 237, 0],
		[1, ᐃ[457], 19, 88, 179, 0],
		[1, ᐃ[457], 19, 50, 191, ⲆⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], ᐃⵠᐃⲆⲆ, 52, 221, ᐃⲆΔ],
		[1, ᐃ[457], 19, 34, 234, ⲆⲆᐃ],
		[1, ᐃ[457], 19, 27, 233, ⵠᐃΔ],
		[ⲆⵠⲆ, ᐃ[457], ΔΔΔⲆᐃ, 37, 293, 0],
		[1, ᐃ[457], 29, ⵠⵠΔΔΔᐃⵠ, 181, ⵠⵠⵠ],
		[1, ᐃ[457], 29, 8, 180, 0],
		[1, ᐃ[457], 30, ΔⲆΔⵠᐃ, 186, ⲆⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], 31, 24, 183, 0],
		[1, ᐃ[457], 32, 33, 185, ᐃⲆΔ],
		[1, ᐃ[457], 32, 37, 182, 0],
		[ⲆⵠⲆ, ᐃ[457], 29, 45, 183, Ⲇⵠᐃ],
		[1, ᐃ[457], 30, 48, 183, 0],
		[ⲆⲆⵠ, ᐃ[457], 30, 58, 181, 0],
		[1, ᐃ[457], 30, 66, 188, ᐃⲆΔ],
		[1, ᐃ[457], 30, 66, 182, 0],
		[1, ᐃ[457], 29, 63, 196, 0],
		[1, ᐃ[457], 29, 54, 194, ⵠⵠⵠ],
		[Δⵠᐃ, ᐃ[457], 30, 79, 189, ⵠᐃⵠ],
		[ⵠᐃᐃ, ᐃ[457], 30, 87, 182, ⵠⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 30, 83, 185, ⵠⵠᐃ],
		[Δⵠᐃ, ᐃ[457], 29, 88, 189, 0],
		[1, ᐃ[457], 29, 85, 202, ᐃⲆΔ],
		[1, ᐃ[457], 31, 82, 203, 0],
		[1, ᐃ[457], 32, 80, 201, ⵠᐃΔ],
		[1, ᐃ[457], 32, 87, 209, 0],
		[ΔΔⵠ, ᐃ[457], 32, 83, 214, ⲆⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 30, 88, 220, ⲆⲆᐃ],
		[1, ᐃ[457], 30, 78, 229, Δⵠⵠ],
		[ΔΔⵠ, ᐃ[457], 30, 73, 223, 0],
		[ⲆⲆⵠ, ᐃ[457], 29, 74, 217, 0],
		[1, ᐃ[457], 29, 67, 217, 0],
		[ⲆⲆⵠ, ᐃ[457], 30, 72, 208, ⲆⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], 30, 73, 199, 0],
		[1, ᐃ[457], 30, 65, 207, 0],
		[ⵠᐃᐃ, ᐃ[457], 29, 63, 210, ᐃⲆᐃ],
		[ᐃⲆⲆ, ᐃ[457], 29, 50, 204, Ⲇⵠᐃ],
		[ⵠᐃᐃ, ᐃ[457], 30, 41, 205, ᐃⲆᐃ],
		[1, ᐃ[457], 29, 35, 205, ⵠⵠᐃ],
		[Δⵠᐃ, ᐃ[457], 30, 27, 202, 0],
		[ⲆⲆⵠ, ᐃ[457], 30, 20, 201, ⵠᐃΔ],
		[1, ᐃ[457], 29, 10, 203, Ⲇⵠᐃ],
		[1, ᐃ[457], 29, 14, 196, 0],
		[ⲆⲆⵠ, ᐃ[457], 29, 24, 187, 0],
		[1, ᐃ[457], 29, 28, 223, 0],
		[1, ᐃ[457], 29, 32, 212, 0],
		[ᐃⲆⲆ, ᐃ[457], 30, 28, 214, ⵠⵠᐃ],
		[1, ᐃ[457], 31, 24, 218, ⵠᐃⵠ],
		[1, ᐃ[457], 29, 36, 219, 0],
		[1, ᐃ[457], 29, 37, 217, ⲆⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], 29, 52, 217, 0],
		[ⲆⵠⲆ, ᐃ[457], 29, 59, 217, 0],
		[1, ᐃ[457], 29, 69, 231, ᐃⲆΔ],
		[1, ᐃ[457], 29, 64, 242, 0],
		[1, ᐃ[457], 30, 53, 253, 0],
		[ⵠᐃᐃ, ᐃ[457], 30, 45, 250, 0],
		[ⲆⵠⲆ, ᐃ[457], 30, 58, 261, 0],
		[ⲆⲆⵠ, ᐃ[457], 30, 73, 276, 0],
		[ⲆⵠⲆ, ᐃ[457], 30, 64, 276, 0],
		[1, ᐃ[457], 30, 82, 285, 0],
		[1, ᐃ[457], 30, 65, 293, ⲆⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], 30, 56, 288, ⵠᐃΔ],
		[1, ᐃ[457], 30, 45, 296, 0],
		[1, ᐃ[457], 30, 40, 288, ⵠᐃΔ],
		[1, ᐃ[457], 30, 37, 283, Ⲇⵠᐃ],
		[1, ᐃ[457], 30, 53, 280, 0],
		[Δⵠᐃ, ᐃ[457], 30, 41, 277, 0],
		[1, ᐃ[457], 29, 28, 296, 0],
		[1, ᐃ[457], 29, ⵠⵠᐃᐃⲆΔⵠ, 292, ᐃⲆΔ],
		[Δⵠᐃ, ᐃ[457], 29, 24, 284, ᐃⲆΔ],
		[1, ᐃ[457], 30, 10, 295, 0],
		[Δⵠᐃ, ᐃ[457], 30, ⲆΔᐃⵠΔ, 286, 0],
		[1, ᐃ[457], 30, 15, 279, 0],
		[ⵠᐃᐃ, ᐃ[457], 30, ⵠⵠⲆΔⲆ, 269, Δⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], 30, 21, 259, 0],
		[ᐃⲆⲆ, ᐃ[457], 30, 12, 256, Ⲇⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 30, 31, 245, Δⵠⵠ],
		[1, ᐃ[457], 30, 12, 240, ⲆⲆᐃ],
		[1, ᐃ[457], 30, 28, 235, ⵠⵠⵠ],
		[1, ᐃ[457], 30, 13, 226, 0],
		[1, ᐃ[457], 30, 39, 231, ⵠᐃΔ],
		[1, ᐃ[457], 30, 61, 226, 0],
		[ΔΔⵠ, "r", 96, 262, 0],
		[ᐃⲆⲆ, "r", 97, 262, Ⲇⵠᐃ],
		[1, "r", 98, 262, ⵠⵠᐃ],
		[ΔΔⵠ, "r", 97, 270, 0],
		[ᐃⲆⲆ, "r", 97, 271, ⵠⵠⵠ],
		[1, "r", 97, 272, ᐃⲆΔ],
		[1, "r", 97, 273, Ⲇⵠᐃ],
		[ⵠᐃᐃ, "r", 97, 274, 0],
		[ⲆⲆⵠ, "r", 97, 275, Δⵠⵠ],
		[1, "r", 97, 276, ᐃⲆᐃ],
		[1, "r", 97, 277, ⵠᐃⵠ],
		[1, "r", 97, 278, ᐃⲆᐃ],
		[1, "r", 98, 270, ⵠⵠᐃ],
		[ⲆⵠⲆ, "r", 98, 271, 0],
		[1, "r", 98, 272, 0],
		[1, "r", 98, 273, 0],
		[1, "r", 98, 274, 0],
		[1, "r", 98, 275, 0],
		[1, "r", 98, 276, ⵠᐃΔ],
		[ⲆⲆⵠ, "r", 98, 277, Δⵠⵠ],
		[ⵠᐃᐃ, "r", 98, 278, 0],
		[1, "r", 96, 283, 0],
		[1, "r", 97, 283, ᐃⲆΔ],
		[1, "r", 97, 284, 0],
		[ⲆⵠⲆ, "r", 97, 285, ⵠⵠⵠ],
		[ⲆⵠⲆ, "r", 98, 283, 0],
		[1, "r", 98, 284, ⵠⵠᐃ],
		[ⲆⵠⲆ, "r", 98, 285, ᐃⲆᐃ],
		[1, "r", 96, 270, ⲆⲆᐃ],
		[1, "r", 96, 271, 0],
		[ⲆⵠⲆ, "r", 96, 272, 0],
		[1, "r", 96, 273, 0],
		[1, "r", 96, 274, 0],
		[Δⵠᐃ, "r", 96, 275, 0],
		[1, "r", 96, 276, 0],
		[ⵠᐃᐃ, "r", 96, 277, Ⲇⵠᐃ],
		[1, "r", 96, 278, 0],
		[ⲆⲆⵠ, "r", 44, 248, 0],
		[1, ᐃ[457], ⲆⵠΔᐃΔ, 94, 290, ⲆⲆΔ],
		[ΔΔⵠ, ᐃ[457], ⲆⵠᐃΔΔ, 94, 252, ⲆⲆᐃ],
		[1, ᐃ[457], ⵠᐃᐃⵠⵠ, 94, 228, 0],
		[1, ᐃ[457], 17, 94, 200, ᐃⲆᐃ],
		[ⲆⵠⲆ, "r", 95, 282, ⲆⵠⲆ],
		[Δⵠᐃ, "r", 95, 281, 1],
		[1, "r", 94, 281, 1],
		[ⲆⵠⲆ, "r", 90, 281, 1],
		[ΔΔⵠ, "r", 91, 282, ᐃⲆⲆ],
		[1, "r", 89, 281, 1],
		[ⵠᐃᐃ, "r", 85, 276, 1],
		[1, "r", 85, 277, 1],
		[1, "r", 86, 278, 1],
		[1, "p", Ⲇⵠᐃ, 85, 279, 1],
		[ⵠᐃᐃ, "r", 86, 279, Δⵠᐃ],
		[ΔΔⵠ, "r", 87, 280, 1],
		[1, "r", 96, 281, ⲆⲆΔ],
		[1, "r", 97, 281, ⵠᐃⵠ],
		[1, "r", 98, 281, 0],
		[ΔΔⵠ, "r", 98, 282, Δⵠⵠ],
		[1, "r", 97, 282, ⵠⵠᐃ],
		[1, "r", 96, 282, ⲆⲆᐃ],
		[1, "r", 68, 261, 1],
		[ᐃⲆⲆ, ᐃ[70], ᐃⲆⲆ, 94, 168, Ⲇⵠᐃ],
		[ⲆⲆⵠ, ᐃ[70], 2, 94, 151, ⵠᐃΔ],
		[1, ᐃ[70], ⵠᐃᐃ, 94, 138, 0],
		[1, ᐃ[70], 1, 93, 124, 0],
		[ⵠᐃᐃ, ᐃ[70], ⲆⵠⲆ, 94, 129, 0],
		[1, ᐃ[70], ΔΔⵠ, 93, 113, ⵠⵠⵠ],
		[1, ᐃ[70], 1, 94, 102, Δⵠⵠ],
		[Δⵠᐃ, ᐃ[70], ⲆⵠⲆ, 94, 93, 0],
		[1, ᐃ[70], 1, 93, 90, ⵠᐃⵠ],
		[1, ᐃ[70], 1, 94, 79, 0],
		[ⲆⵠⲆ, ᐃ[70], 1, 94, 76, 0],
		[ⲆⵠⲆ, ᐃ[70], ⲆⵠⲆ, 93, 70, ⵠⵠᐃ],
		[Δⵠᐃ, ᐃ[70], ⲆⵠⲆ, 93, 63, ⲆⲆΔ],
		[ᐃⲆⲆ, ᐃ[70], Δⵠᐃ, 94, 53, ⵠⵠⵠ],
		[1, ᐃ[70], ⲆⵠⲆ, 93, 10, 0],
		[1, ᐃ[70], 1, 85, 8, Δⵠⵠ],
		[1, ᐃ[70], 1, 94, 12, 0],
		[ⲆⵠⲆ, ᐃ[70], Δⵠᐃ, 66, 13, 0],
		[1, ᐃ[70], ΔΔⵠ, 69, 9, ⲆⲆᐃ],
		[1, ᐃ[70], ᐃᐃⲆⵠ, 68, 14, ⵠⵠⵠ],
		[1, ᐃ[70], ⵠⲆΔᐃ, 66, 25, Δⵠⵠ],
		[ⲆⲆⵠ, ᐃ[70], ⵠⵠΔⵠ, 92, ΔᐃΔⲆⵠ, ⵠᐃΔ],
		[ᐃⲆⲆ, ᐃ[70], ᐃⵠΔⲆ, 94, ⵠⵠⲆⵠⵠ, Δⵠⵠ],
		[1, ᐃ[70], 2, 87, ᐃΔⵠⲆⲆ, 0],
		[1, ᐃ[70], 2, 71, ΔⵠⵠᐃⲆ, Ⲇⵠᐃ],
		[1, ᐃ[70], 2, 90, ⲆⵠⲆᐃⵠ, 0],
		[1, ᐃ[70], 2, 91, ΔᐃΔⲆΔ, ⵠⵠⵠ],
		[ⵠᐃᐃ, ᐃ[70], 1, 74, ⲆⵠⲆᐃⵠ, 0],
		[1, ᐃ[70], 2, 72, 12, 0],
		[ⲆⲆⵠ, ᐃ[70], ᐃᐃⲆⵠ, 75, ΔΔΔᐃᐃ, Ⲇⵠᐃ],
		[ΔΔⵠ, ᐃ[70], ᐃⵠΔⲆ, 74, 15, ᐃⲆΔ],
		[ᐃⲆⲆ, ᐃ[70], 2, 84, ⵠⲆᐃᐃⲆ, 0],
		[1, ᐃ[70], 2, 81, ΔᐃⵠⲆⵠ, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[70], ⲆⲆⵠ, 84, ⲆΔⵠΔᐃⵠⵠ, 0],
		[1, ᐃ[70], 1, 84, ᐃᐃⲆΔⵠ, 0],
		[ΔΔⵠ, ᐃ[70], ᐃⲆⲆ, 11, 9, ⲆⲆᐃ],
		[1, ᐃ[70], 1, 7, 14, ⲆⲆΔ],
		[1, ᐃ[70], 1, ⲆⲆᐃⲆⵠ, 22, ᐃⲆᐃ],
		[Δⵠᐃ, ᐃ[70], ⲆⲆⵠ, 7, 34, 0],
		[1, ᐃ[70], ⲆⵠⲆ, ᐃⲆᐃⲆⵠ, 24, 0],
		[1, ᐃ[70], ⵠⲆΔᐃ, ⲆⲆᐃⲆⵠ, 24, ⲆⲆᐃ],
		[Δⵠᐃ, ᐃ[70], 2, 9, 21, ᐃⲆᐃ],
		[1, ᐃ[70], 2, 31, 10, 0],
		[1, ᐃ[70], ᐃⵠΔⲆ, 33, 27, Ⲇⵠᐃ],
		[ⵠᐃᐃ, ᐃ[70], 2, ⲆΔΔΔΔ, 34, ⵠᐃΔ],
		[1, ᐃ[70], 2, ⲆⲆᐃⲆⵠ, 19, ⲆⲆᐃ],
		[ⵠᐃᐃ, ᐃ[70], ᐃⲆⲆ, 14, ⲆΔᐃⵠΔ, ᐃⲆΔ],
		[1, ᐃ[70], 2, 13, ⲆⲆⵠⵠᐃ, ⵠᐃⵠ],
		[1, ᐃ[70], 2, 15, ᐃΔᐃⵠΔΔᐃ, 0],
		[Δⵠᐃ, ᐃ[70], 2, ᐃΔⵠⲆⲆ, 9, ⲆⲆᐃ],
		[ΔΔⵠ, ᐃ[70], ⵠⲆΔᐃ, 9, ΔΔⵠⲆⵠ, ᐃⲆΔ],
		[1, ᐃ[70], ᐃᐃⲆⵠ, 9, 15, 0],
		[Δⵠᐃ, ᐃ[70], ᐃⲆⵠᐃ, 10, 23, 0],
		[ⲆⲆⵠ, ᐃ[70], ⵠⵠᐃⲆ, 34, 29, 0],
		[ΔΔⵠ, ᐃ[70], 2, 27, ⲆⵠΔᐃⲆ, ⲆⲆΔ],
		[1, ᐃ[70], ⵠⵠᐃⲆ, 25, 21, ⵠⵠᐃ],
		[1, ᐃ[70], ⵠⵠΔⵠ, 20, 18, 0],
		[1, ᐃ[70], 2, 18, 21, 0],
		[1, ᐃ[70], 2, 29, 9, ⲆⲆΔ],
		[ⲆⵠⲆ, ᐃ[70], ᐃᐃⲆⵠ, 13, 14, 0],
		[1, ᐃ[70], ᐃⲆⵠᐃ, ΔⵠⵠᐃⲆ, 38, ⵠᐃΔ],
		[Δⵠᐃ, ᐃ[70], 2, 21, 39, ⵠᐃⵠ],
		[1, ᐃ[70], ᐃⲆⵠᐃ, 84, 26, ⲆⲆᐃ],
		[ⲆⵠⲆ, ᐃ[70], 2, 77, 25, Δⵠⵠ],
		[1, ᐃ[70], 2, 86, 35, ⵠⵠⵠ],
		[1, ᐃ[70], 1, 70, 35, 0],
		[ⵠᐃᐃ, ᐃ[70], 2, 72, 36, ⵠⵠᐃ],
		[1, ᐃ[70], 2, 73, 31, ᐃⲆᐃ],
		[1, ᐃ[70], ⵠⲆΔᐃ, 89, 39, 0],
		[1, ᐃ[70], ᐃⵠΔⲆ, 65, 40, 0],
		[ⵠᐃᐃ, ᐃ[70], 2, 92, 32, 0],
		[ΔΔⵠ, ᐃ[70], ⵠⲆΔᐃ, 90, 28, 0],
		[1, ᐃ[457], 22, 25, 266, ⵠⵠᐃ],
		[1, ᐃ[457], 22, 17, 206, 0],
		[1, ᐃ[457], ᐃΔΔⵠΔ, ⵠᐃΔᐃⲆ, 184, 0],
		[ⲆⲆⵠ, ᐃ[457], 19, 22, 183, ⲆⲆᐃ],
		[ⲆⲆⵠ, ᐃ[457], 19, 35, 188, 0],
		[ⵠᐃᐃ, ᐃ[457], 19, 36, 192, Ⲇⵠᐃ],
		[1, ᐃ[457], 19, 50, 277, ⵠⵠᐃ],
		[1, ᐃ[457], 19, 35, 279, ⲆⲆΔ],
		[1, "t", 4, 7, 178, ⵠⵠᐃ],
		[ᐃⲆⲆ, "t", ᐃⲆⲆ, 7, 179, 0],
		[1, "t", ⵠⵠⲆᐃ, ⲆΔᐃᐃⲆ, 180, ⲆⲆᐃ],
		[1, "t", 2, 7, 181, 0],
		[ᐃⲆⲆ, "t", ΔΔⵠⵠ, 7, 182, ⲆⲆΔ],
		[ᐃⲆⲆ, "t", ΔΔⲆΔ, ⲆᐃⲆⲆΔ, 183, ᐃⲆΔ],
		[Δⵠᐃ, "t", 3, ᐃΔᐃᐃⲆ, 184, 0],
		[1, "t", 4, 7, 185, 0],
		[1, "t", ᐃⵠΔⲆ, ⵠΔⵠᐃⲆ, 186, ⵠᐃΔ],
		[ⲆⲆⵠ, "t", ᐃⲆⲆ, ⵠⲆᐃΔⵠ, 187, 0],
		[1, "t", ⲆⲆⲆΔ, ΔⵠᐃΔⲆ, 188, ᐃⲆᐃ],
		[ⲆⲆⵠ, "t", ⲆⵠⵠⲆ, 7, 189, ⵠⵠᐃ],
		[ⲆⵠⲆ, "t", 5, 7, 190, 0],
		[ⵠᐃᐃ, "t", 1, ⲆᐃⲆⲆΔ, 191, 0],
		[1, "t", 3, 7, 192, ⲆⲆΔ],
		[ΔΔⵠ, "t", ΔΔⲆΔ, 7, 193, Δⵠⵠ],
		[1, "t", 3, ⲆᐃᐃΔΔ, 194, ⵠᐃΔ],
		[ⵠᐃᐃ, "t", ⵠΔⲆᐃ, 7, 195, ᐃⲆᐃ],
		[1, "t", 2, ⲆΔᐃᐃⲆ, 196, Δⵠⵠ],
		[1, "t", 4, 7, 197, ⲆⲆΔ],
		[1, "b", ᐃⵠΔⲆ, 7, 198, ⵠᐃⵠ],
		[ΔΔⵠ, "t", 4, ⵠᐃⵠⲆⲆ, 199, 0],
		[1, "t", 2, 7, 200, ⲆⲆᐃ],
		[ᐃⲆⲆ, "t", ⵠΔⲆᐃ, ΔⵠᐃΔⲆ, 201, 0],
		[1, "t", ⵠⵠᐃⲆ, 7, 202, ⵠᐃⵠ],
		[1, "t", 4, ⵠᐃⵠⲆⲆ, 203, 0],
		[1, "t", ᐃⵠΔⲆ, 7, 204, ᐃⲆΔ],
		[1, "t", ᐃⵠΔⵠ, ⵠᐃⵠⲆⲆ, 205, Ⲇⵠᐃ],
		[Δⵠᐃ, "t", 2, ⲆᐃᐃΔΔ, 206, ⵠᐃΔ],
		[1, "t", ⵠᐃᐃ, ⵠΔⵠᐃⲆ, 207, 0],
		[ᐃⲆⲆ, "t", ΔΔⲆΔ, 7, 208, ⵠⵠᐃ],
		[ΔΔⵠ, "t", 3, ⵠⵠᐃⵠᐃ, 209, ⲆⲆΔ],
		[ⲆⲆⵠ, "t", ᐃⲆⲆ, 7, 210, ⵠᐃⵠ],
		[1, "b", 0, ⵠᐃⵠⲆⲆ, 211, ⵠᐃΔ],
		[ⲆⲆⵠ, "t", 3, 7, 212, 0],
		[ⲆⲆⵠ, "t", ⲆⲆⲆΔ, 7, 213, 0],
		[1, "t", 3, 7, 214, Δⵠⵠ],
		[1, "t", 5, 7, 215, 0],
		[Δⵠᐃ, "t", ⵠΔⲆᐃ, ⵠᐃⵠⲆⲆ, 216, ᐃⲆΔ],
		[1, "t", ⲆⵠⵠⲆ, 7, 217, 0],
		[Δⵠᐃ, "t", 1, ⲆᐃⲆⲆΔ, 218, 0],
		[1, "t", ΔΔⲆΔ, 7, 219, 0],
		[1, "b", 2, 7, 220, 0],
		[1, "t", 1, ⲆΔᐃᐃⲆ, 221, ⵠⵠᐃ],
		[1, "t", 2, ⵠΔⵠᐃⲆ, 222, ⵠⵠⵠ],
		[1, "t", 4, ⵠⵠᐃⵠᐃ, 223, ⵠᐃⵠ],
		[Δⵠᐃ, "t", ΔᐃΔⲆ, ⵠᐃⵠⲆⲆ, 224, ⲆⲆᐃ],
		[ⲆⲆⵠ, "t", 1, 7, 225, ᐃⲆᐃ],
		[1, "t", ΔⲆⲆⲆ, ⵠⲆᐃΔⵠ, 226, 0],
		[1, "t", 2, ⲆᐃⲆⲆΔ, 227, 0],
		[1, "t", ⵠⲆⲆⲆ, ⲆᐃᐃΔΔ, 228, 0],
		[ⵠᐃᐃ, "t", ⵠⵠⲆᐃ, 7, 229, 0],
		[1, "t", 1, ⵠᐃⵠⲆⲆ, 230, ⵠⵠⵠ],
		[1, "t", 4, ᐃΔᐃᐃⲆ, 231, 0],
		[ⲆⵠⲆ, "b", 2, ⵠᐃⵠⲆⲆ, 232, 0],
		[1, "t", ⵠᐃⲆᐃ, 7, 233, 0],
		[1, "t", 1, ⲆΔᐃᐃⲆ, 234, 0],
		[ΔΔⵠ, "t", 3, ⵠⲆᐃΔⵠ, 235, Ⲇⵠᐃ],
		[Δⵠᐃ, "t", 4, 7, 236, 0],
		[ᐃⲆⲆ, "t", ᐃⵠΔⲆ, ⲆᐃⲆⲆΔ, 237, ⵠⵠᐃ],
		[1, "t", ΔΔⵠⵠ, ᐃΔᐃᐃⲆ, 238, 0],
		[ⲆⵠⲆ, "b", 3, 7, 239, ⵠᐃⵠ],
		[1, "t", ⵠⲆΔᐃ, ⲆᐃⲆⲆΔ, 240, 0],
		[ⵠᐃᐃ, "t", ΔΔⵠ, ⲆᐃᐃΔΔ, 241, 0],
		[1, "t", 2, 7, 242, ⵠᐃΔ],
		[1, "t", 4, 7, 243, ⵠⵠᐃ],
		[1, "t", 3, 7, 244, 0],
		[ΔΔⵠ, "t", ΔⲆΔⲆ, ⲆΔᐃᐃⲆ, 245, ⲆⲆΔ],
		[1, "t", ⲆⵠⲆ, 7, 246, Ⲇⵠᐃ],
		[1, "b", Δⵠⵠ, ⵠΔⵠᐃⲆ, 247, ⲆⲆΔ],
		[1, "t", 3, 7, 248, 0],
		[1, "t", 5, ⵠᐃⵠⲆⲆ, 249, 0],
		[ⲆⲆⵠ, "t", 2, ⲆΔᐃᐃⲆ, 250, 0],
		[ⲆⵠⲆ, "t", ΔΔⵠ, ⵠⲆᐃΔⵠ, 251, 0],
		[1, "t", 4, 7, 252, Ⲇⵠᐃ],
		[ⲆⲆⵠ, "t", 3, ᐃΔᐃᐃⲆ, 253, Ⲇⵠᐃ],
		[ᐃⲆⲆ, "t", 5, ⲆΔᐃᐃⲆ, 254, 0],
		[1, "t", Δⵠᐃ, ⵠⵠᐃⵠᐃ, ⵠᐃΔⲆΔ, 0],
		[1, "t", 4, 7, 256, 0],
		[ⲆⵠⲆ, "t", 1, ⵠᐃⵠⲆⲆ, 257, ⲆⲆᐃ],
		[1, "t", 2, ⲆᐃⲆⲆΔ, 258, 0],
		[1, "t", 5, 7, 260, 0],
		[1, "t", 3, 7, 259, 0],
		[ⲆⵠⲆ, "t", 1, 7, 261, 0],
		[1, "t", 3, 7, 262, ⵠⵠᐃ],
		[ΔΔⵠ, "t", ⵠΔᐃⲆ, ⲆᐃᐃΔΔ, 263, 0],
		[1, "t", ΔΔⵠ, ⵠⵠᐃⵠᐃ, 264, ⵠⵠᐃ],
		[Δⵠᐃ, "t", 2, ⲆᐃⲆⲆΔ, 265, Δⵠⵠ],
		[1, "t", ⵠᐃⲆᐃ, ⵠⵠᐃⵠᐃ, 266, ⲆⲆᐃ],
		[ΔΔⵠ, "t", 2, ᐃΔᐃᐃⲆ, 267, 0],
		[1, "t", 2, 7, 269, ⵠᐃΔ],
		[1, "b", ⵠⵠᐃⲆ, 7, 268, ᐃⲆΔ],
		[1, "t", 4, 7, 270, 0],
		[ⲆⲆⵠ, "t", 1, 7, 271, 0],
		[1, "t", Δᐃᐃⵠ, 7, 272, Δⵠⵠ],
		[1, "b", 2, 7, 273, ⵠᐃⵠ],
		[1, "t", 4, 7, 274, 0],
		[ΔΔⵠ, "t", ᐃᐃⲆⵠ, 7, 275, 0],
		[ⲆⲆⵠ, "t", ⵠⲆⲆⲆ, ⲆᐃⲆⲆΔ, 276, ⲆⲆᐃ],
		[1, "t", 5, 7, 277, 0],
		[1, "t", ᐃⵠΔⲆ, 7, 278, Ⲇⵠᐃ],
		[1, "t", 1, ⵠⲆᐃΔⵠ, 279, ⵠᐃⵠ],
		[ⲆⵠⲆ, "t", ΔΔⲆΔ, ⲆᐃᐃΔΔ, 280, 0],
		[ⲆⲆⵠ, "b", ΔΔⵠ, 7, 281, 0],
		[ⲆⲆⵠ, "t", 3, 7, 282, ⵠᐃΔ],
		[ᐃⲆⲆ, "t", ΔⲆΔⲆ, ⲆᐃⲆⲆΔ, 283, ⵠᐃⵠ],
		[Δⵠᐃ, "t", ⲆⵠⲆ, ⲆᐃⲆⲆΔ, 284, ⵠⵠᐃ],
		[1, "t", ⵠⵠⲆⲆ, 7, 285, ᐃⲆᐃ],
		[1, "t", 5, 7, 286, ⵠᐃΔ],
		[Δⵠᐃ, "t", ⲆⲆⲆΔ, ⵠⲆᐃΔⵠ, 288, 0],
		[1, "t", 2, ΔⵠᐃΔⲆ, 287, 0],
		[1, "b", Δⵠⵠ, 7, 289, 0],
		[ᐃⲆⲆ, "t", ᐃⵠⵠⲆ, 7, 290, 0],
		[ᐃⲆⲆ, "t", 2, ⵠᐃⵠⲆⲆ, 291, 0],
		[1, "t", 5, 7, 292, ⵠⵠⵠ],
		[ⲆⲆⵠ, "t", 3, 7, 293, 0],
		[ⲆⲆⵠ, "t", ⵠᐃᐃ, ⵠⲆᐃΔⵠ, 294, ⵠⵠⵠ],
		[1, "t", 4, 7, 295, 0],
		[Δⵠᐃ, "t", 3, 7, 296, ⵠⵠⵠ],
		[ⲆⵠⲆ, "t", 1, 7, 297, 0],
		[ⲆⵠⲆ, "t", 4, ⵠⲆᐃΔⵠ, 298, 0],
		[ᐃⲆⲆ, "t", 2, ⵠⵠᐃⵠᐃ, 299, ᐃⲆᐃ],
		[ⵠᐃᐃ, "b", 0, 7, 300, 0],
		[ΔΔⵠ, "t", ⵠⵠᐃⲆ, 7, 301, 0],
		[ⵠᐃᐃ, "r", 196, 271, ⵠⵠᐃ],
		[1, "r", 199, 274, ⵠⵠᐃ],
		[Δⵠᐃ, "r", 167, 238, 0],
		[1, "r", 171, 240, 0],
		[1, "r", 189, 207, 0],
		[1, "r", 192, 209, 0],
		[Δⵠᐃ, "r", 198, 271, 0],
		[ᐃⲆⲆ, "r", 197, 271, ⵠᐃΔ],
		[ⲆⲆⵠ, "r", 198, 272, ᐃⲆΔ],
		[ⲆⵠⲆ, "r", 197, 272, 0],
		[1, "r", 196, 272, ⵠᐃΔ],
		[1, "r", 195, 272, 0],
		[ⲆⵠⲆ, "r", 199, 272, ⵠⵠᐃ],
		[ⵠᐃᐃ, "r", 199, 273, ᐃⲆΔ],
		[1, "r", 198, 273, 0],
		[1, "r", 197, 273, 0],
		[1, "r", 196, 273, 0],
		[ΔΔⵠ, "r", 198, 274, 0],
		[1, "r", 197, 274, Ⲇⵠᐃ],
		[1, "r", 195, 273, Δⵠⵠ],
		[1, "r", 196, 274, ⲆⲆᐃ],
		[1, "r", 198, 275, 0],
		[1, "r", 197, 275, ⵠᐃΔ],
		[1, "r", 200, 274, 0],
		[1, "r", 200, 273, ⲆⲆΔ],
		[1, "r", 199, 275, Δⵠⵠ],
		[ΔΔⵠ, ᐃ[502], ᐃᐃⲆⵠ, 200, 272, ⵠᐃⵠ],
		[1, ᐃ[502], 1, 195, 271, ᐃⲆᐃ],
		[1, ᐃ[502], 0, 199, 268, 0],
		[1, ᐃ[502], 0, 193, 277, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[502], ⲆⲆⵠ, 199, 276, 0],
		[1, "s", 1, 200, 275, ᐃⲆⲆ],
		[1, "s", 1, 194, 272, 1],
		[1, "s", 2, 193, 270, 1],
		[1, "g", 2, 193, 273, 1],
		[1, "g", 2, 201, 267, ⲆⵠⲆ],
		[1, "m", ᐃⵠΔⲆ, 220, 298, ᐃⲆⲆ],
		[1, "m", 1, 219, 292, ΔΔⵠ],
		[1, "m", ⲆⲆⵠ, 214, 297, ⲆⲆⵠ],
		[ⵠᐃᐃ, "r", 168, 238, 0],
		[ⲆⲆⵠ, "r", 169, 238, 0],
		[1, "r", 170, 238, 0],
		[1, "r", 171, 239, ⵠᐃΔ],
		[ⲆⲆⵠ, "r", 170, 239, ⵠᐃΔ],
		[ΔΔⵠ, "r", 169, 239, ⲆⲆᐃ],
		[1, "r", 168, 239, 0],
		[ⵠᐃᐃ, "r", 167, 239, 0],
		[1, "r", 166, 239, ⲆⲆΔ],
		[ΔΔⵠ, "r", 166, 240, ⵠᐃⵠ],
		[ⲆⵠⲆ, "r", 167, 240, 0],
		[ⵠᐃᐃ, "r", 168, 240, 0],
		[1, "r", 169, 240, ⵠᐃΔ],
		[ⲆⲆⵠ, "r", 170, 240, ⵠⵠᐃ],
		[ΔΔⵠ, "r", 168, 241, 0],
		[ΔΔⵠ, "r", 169, 241, ᐃⲆΔ],
		[1, "r", 170, 241, ⲆⲆᐃ],
		[1, "r", 171, 241, ⲆⲆΔ],
		[ΔΔⵠ, ᐃ[502], ᐃⵠΔⲆ, 171, 238, 0],
		[Δⵠᐃ, ᐃ[502], 1, 166, 238, 0],
		[ΔΔⵠ, ᐃ[502], 0, 167, 237, Ⲇⵠᐃ],
		[1, ᐃ[502], 0, 171, 242, ᐃⲆᐃ],
		[ⲆⲆⵠ, ᐃ[502], 0, 165, 243, ᐃⲆΔ],
		[ⵠᐃᐃ, ᐃ[502], 0, 171, 235, ⲆⲆΔ],
		[ΔΔⵠ, ᐃ[502], ⲆⲆΔ, 174, 241, ᐃⲆΔ],
		[ⵠᐃᐃ, "s", 1, 165, 239, 1],
		[ⵠᐃᐃ, "s", 1, 172, 241, ΔΔⵠ],
		[ⵠᐃᐃ, "s", 0, 170, 237, ᐃⲆⲆ],
		[1, "s", ⲆⵠⲆ, 171, 237, 1],
		[ⵠᐃᐃ, "s", 2, 174, 236, 1],
		[ΔΔⵠ, "s", ⵠⵠΔⵠ, 162, 241, Δⵠᐃ],
		[1, "s", ⵠⲆΔᐃ, 170, 246, 1],
		[ⲆⲆⵠ, "s", 2, 167, 235, 1],
		[ⵠᐃᐃ, "s", 2, 176, 243, Δⵠᐃ],
		[1, "r", 190, 207, ⵠᐃⵠ],
		[1, "r", 191, 207, ᐃⲆᐃ],
		[ΔΔⵠ, "r", 192, 208, 0],
		[ⲆⵠⲆ, "r", 191, 208, 0],
		[1, "r", 190, 208, 0],
		[1, "r", 189, 208, ⵠⵠⵠ],
		[ⲆⲆⵠ, "r", 188, 208, 0],
		[ᐃⲆⲆ, "r", 189, 209, 0],
		[1, "r", 190, 209, 0],
		[ⲆⲆⵠ, "r", 191, 209, Ⲇⵠᐃ],
		[ΔΔⵠ, "r", 188, 209, Ⲇⵠᐃ],
		[1, "r", 190, 210, ᐃⲆᐃ],
		[1, "r", 191, 210, ᐃⲆΔ],
		[1, "r", 192, 210, ⲆⲆᐃ],
		[1, ᐃ[502], 2, 189, 210, 0],
		[ΔΔⵠ, ᐃ[502], 2, 192, 205, ⲆⲆᐃ],
		[ⲆⲆⵠ, ᐃ[502], 1, 192, 207, 0],
		[1, ᐃ[502], 0, 193, 210, ᐃⲆΔ],
		[ⲆⲆⵠ, ᐃ[502], ⲆⲆΔ, 187, 208, ⵠᐃⵠ],
		[ΔΔⵠ, ᐃ[502], ᐃⲆᐃ, 197, 206, ⵠᐃΔ],
		[1, ᐃ[502], ⵠᐃⵠ, 191, 213, 0],
		[1, ᐃ[502], 0, 190, 204, ⵠᐃΔ],
		[ΔΔⵠ, "s", ΔΔⵠ, 188, 207, 1],
		[ⲆⵠⲆ, "s", ΔΔⵠ, 190, 211, 1],
		[ᐃⲆⲆ, "s", ᐃᐃⲆⵠ, 188, 213, 1],
		[1, "s", ᐃᐃⲆⵠ, 187, 205, ⲆⲆⵠ],
		[1, "s", ᐃⲆᐃ, 194, 210, 1],
		[ΔΔⵠ, "s", ⵠᐃΔ, 198, 207, ⲆⵠⲆ],
		[Δⵠᐃ, "s", ⲆⵠⲆ, 193, 204, 1],
		[1, "s", 1, 193, 213, ⲆⵠⲆ],
		[ⲆⲆⵠ, "s", 2, 198, 212, ⲆⲆⵠ],
		[1, "s", 2, 182, 208, 1],
		[ΔΔⵠ, "s", 1, 204, 271, 1],
		[1, "s", 0, 203, 272, ⵠᐃᐃ],
		[1, "s", ᐃⲆᐃ, 189, 275, 1],
		[ⵠᐃᐃ, "s", ⵠⵠⵠ, 195, 265, Δⵠᐃ],
		[1, "s", 2, 196, 264, ⲆⵠⲆ],
		[ⲆⵠⲆ, "s", 2, 186, 274, Δⵠᐃ],
		[ⲆⲆⵠ, "s", ᐃᐃⲆⵠ, 197, 280, ⵠᐃᐃ],
		[Δⵠᐃ, "s", ⵠᐃΔ, 217, 282, 1],
		[ΔΔⵠ, "s", 1, 214, 285, 1],
		[ⲆⲆⵠ, "s", 1, 214, 274, 1],
		[1, "s", ΔΔⵠ, 203, 282, 1],
		[1, "s", ⲆⵠⲆ, 205, 290, 1],
		[1, "s", 0, 207, 292, ᐃⲆⲆ],
		[1, "s", 0, 197, 297, ⵠᐃᐃ],
		[ⲆⵠⲆ, "s", ⵠᐃΔ, 184, 287, Δⵠᐃ],
		[ⲆⵠⲆ, "s", 2, 213, 289, 1],
		[ⵠᐃᐃ, "s", ᐃᐃⲆⵠ, 196, 294, 1],
		[ΔΔⵠ, "s", 2, 187, 286, ΔΔⵠ],
		[ΔΔⵠ, "s", 1, 192, 289, ᐃⲆⲆ],
		[ᐃⲆⲆ, "s", 1, 189, 299, Δⵠᐃ],
		[ⵠᐃᐃ, "s", Δⵠⵠ, 213, 273, 1],
		[1, "g", ᐃᐃⲆⵠ, 212, 278, Δⵠᐃ],
		[1, "g", ⲆⵠⲆ, 200, 288, 1],
		[ᐃⲆⲆ, "g", ᐃᐃⲆⵠ, 215, 265, 1],
		[Δⵠᐃ, "g", 2, 183, 281, ⵠᐃᐃ],
		[1, "s", ⲆⲆΔ, 178, 295, 1],
		[1, "s", ⲆⲆᐃ, 167, 281, 1],
		[1, "s", ⵠᐃⵠ, 175, 263, ᐃⲆⲆ],
		[1, "s", 1, 176, 293, ⲆⲆⵠ],
		[1, "s", 1, 163, 285, ⲆⵠⲆ],
		[ⲆⲆⵠ, "s", 1, 177, 266, Δⵠᐃ],
		[1, "s", Δⵠᐃ, 161, 272, Δⵠᐃ],
		[1, "s", ⵠⵠΔⵠ, 185, 261, ⵠᐃᐃ],
		[1, "c", 0, 217, 270, Δⵠᐃ],
		[ΔΔⵠ, "c", ⲆⲆΔ, 220, 278, 1],
		[1, "c", 0, 217, 283, ᐃⲆⲆ],
		[1, "c", 0, 220, 287, 1],
		[1, "c", Ⲇⵠᐃ, 210, 292, ⵠᐃᐃ],
		[1, "c", Ⲇⵠᐃ, 205, 297, 1],
		[ⵠᐃᐃ, "c", 0, 198, 293, ΔΔⵠ],
		[ⲆⵠⲆ, "c", 0, 208, 283, 1],
		[ᐃⲆⲆ, "c", 0, 197, 283, 1],
		[1, "c", 0, 190, 289, 1],
		[ⲆⵠⲆ, "c", ᐃⲆΔ, 183, 296, ⲆⵠⲆ],
		[ⲆⲆⵠ, "c", 0, 189, 291, 1],
		[1, "c", 0, 178, 284, ΔΔⵠ],
		[ΔΔⵠ, "c", ⵠᐃΔ, 208, 265, ⵠᐃᐃ],
		[1, "c", 0, 169, 292, 1],
		[1, "s", 1, 158, 294, 1],
		[Δⵠᐃ, "s", 0, 151, 297, 1],
		[1, "s", Ⲇⵠᐃ, 147, 288, 1],
		[Δⵠᐃ, "c", 0, 150, 289, ΔΔⵠ],
		[1, "c", 0, 160, 282, 1],
		[ΔΔⵠ, "c", 0, 146, 274, 1],
		[1, "c", 0, 167, 264, Δⵠᐃ],
		[Δⵠᐃ, "c", 0, 165, 267, ⲆⵠⲆ],
		[Δⵠᐃ, "g", ⲆⲆᐃ, 189, 257, 1],
		[ⲆⵠⲆ, "g", 1, 197, 248, ⲆⵠⲆ],
		[1, "g", ᐃⵠΔⲆ, 170, 255, ᐃⲆⲆ],
		[ⲆⲆⵠ, "g", 2, 212, 234, 1],
		[Δⵠᐃ, "g", 2, 189, 230, ΔΔⵠ],
		[1, "g", ⵠⲆΔᐃ, 173, 221, ⵠᐃᐃ],
		[ⵠᐃᐃ, "g", ⵠᐃᐃ, 210, 214, ⲆⲆⵠ],
		[1, "s", ⵠᐃᐃ, 153, 257, ᐃⲆⲆ],
		[ᐃⲆⲆ, "s", 0, 158, ᐃⵠⵠⲆⲆⲆⲆ, 1],
		[1, "s", 0, 184, 248, 1],
		[ⲆⲆⵠ, "s", ⲆⲆΔ, 212, 254, 1],
		[ⲆⲆⵠ, "s", 1, 203, 249, 1],
		[1, "s", ⵠⵠΔⵠ, 204, 252, Δⵠᐃ],
		[ᐃⲆⲆ, "s", 2, 187, 248, 1],
		[1, "s", 0, 206, 237, 1],
		[ΔΔⵠ, "s", ⲆⲆᐃ, 196, 227, 1],
		[1, "s", 0, 181, 228, ΔΔⵠ],
		[Δⵠᐃ, "s", 1, 199, 227, ⲆⵠⲆ],
		[ⵠᐃᐃ, "s", 1, 208, 238, 1],
		[1, "s", ᐃⲆⲆ, 179, 222, ⲆⵠⲆ],
		[ΔΔⵠ, "s", ᐃⲆⲆ, 213, 223, ⲆⲆⵠ],
		[ᐃⲆⲆ, "s", ⵠⵠᐃⲆ, 182, 222, ᐃⲆⲆ],
		[ⲆⲆⵠ, "s", 2, 211, 226, 1],
		[1, "s", ᐃᐃⲆⵠ, 214, 214, 1],
		[1, "s", ᐃⲆⵠᐃ, 201, 216, ⲆⵠⲆ],
		[ᐃⲆⲆ, "s", 2, 215, 192, 1],
		[ⲆⲆⵠ, "s", Δⵠᐃ, 210, 198, 1],
		[1, "s", ΔΔⵠ, 198, 196, 1],
		[ΔΔⵠ, "s", ⵠⵠᐃⲆ, 208, 199, 1],
		[ᐃⲆⲆ, "s", 2, 187, 192, 1],
		[1, "s", 1, 179, 198, ⲆⵠⲆ],
		[1, "s", ⵠⲆΔᐃ, 177, 197, 1],
		[1, "s", 0, 164, 197, 1],
		[1, "s", ΔΔⵠ, 159, 193, 1],
		[1, "s", ⲆⲆⵠ, 149, 206, 1],
		[ᐃⲆⲆ, "s", 1, 164, 209, ⵠᐃᐃ],
		[1, "s", ᐃⲆⵠᐃ, 165, 210, 1],
		[Δⵠᐃ, "s", ⵠⵠΔⵠ, 161, 191, 1],
		[ᐃⲆⲆ, "s", 1, 162, 224, 1],
		[1, "s", Δⵠⵠ, 150, 236, 1],
		[1, "s", 1, 149, 239, 1],
		[ⵠᐃᐃ, "s", 2, 153, 236, Δⵠᐃ],
		[ᐃⲆⲆ, "s", ⵠⲆΔᐃ, 160, 223, 1],
		[1, "s", ⵠⵠΔⵠ, 151, 207, 1],
		[ⲆⵠⲆ, "s", 2, 147, 220, 1],
		[1, "s", ⵠⵠᐃⲆ, 145, 265, Δⵠᐃ],
		[1, "s", 2, 145, 285, ⲆⵠⲆ],
		[ⵠᐃᐃ, "c", 0, 152, 266, ⲆⵠⲆ],
		[1, "c", 0, 185, 271, 1],
		[1, "c", ⵠᐃΔ, 210, 254, ⵠᐃᐃ],
		[ᐃⲆⲆ, "c", 0, 209, ⲆᐃⲆᐃⵠΔᐃ, Δⵠᐃ],
		[1, "c", ⵠᐃΔ, 198, 254, ⵠᐃᐃ],
		[1, "c", ⲆⲆΔ, 213, 246, Δⵠᐃ],
		[1, "c", 0, 216, 237, ⵠᐃᐃ],
		[ⲆⲆⵠ, "c", ᐃⲆΔ, 204, 240, Δⵠᐃ],
		[ᐃⲆⲆ, "c", 0, 196, 234, ⲆⲆⵠ],
		[1, "c", 0, 188, 238, 1],
		[ⵠᐃᐃ, "c", ⲆⲆΔ, 182, 245, ⲆⲆⵠ],
		[ᐃⲆⲆ, "c", ⵠᐃΔ, 173, 252, 1],
		[Δⵠᐃ, "c", ⵠⵠⵠ, 153, 248, ΔΔⵠ],
		[1, "c", ⵠᐃΔ, 158, 233, 1],
		[1, "c", 0, 147, 230, ᐃⲆⲆ],
		[1, "c", ⵠᐃⵠ, 151, 224, 1],
		[ⲆⲆⵠ, "c", 0, 157, 214, ⵠᐃᐃ],
		[1, "c", 0, 167, 219, 1],
		[ⵠᐃᐃ, "c", 0, 171, 208, 1],
		[ⲆⵠⲆ, "c", ⵠⵠᐃ, 179, 219, ⵠᐃᐃ],
		[ΔΔⵠ, "c", 0, 176, 229, ⲆⲆⵠ],
		[1, "c", 0, 195, 221, 1],
		[1, "c", ⲆⲆΔ, 207, 222, ΔΔⵠ],
		[ᐃⲆⲆ, "c", 0, 214, 207, ⲆⵠⲆ],
		[1, "c", 0, 205, 210, 1],
		[ⲆⵠⲆ, "c", ⲆⲆΔ, 204, 196, ΔΔⵠ],
		[ᐃⲆⲆ, "c", ⵠᐃⵠ, 214, 196, 1],
		[ⵠᐃᐃ, "c", ⲆⲆᐃ, 190, 199, ΔΔⵠ],
		[Δⵠᐃ, "c", 0, 184, 194, Δⵠᐃ],
		[Δⵠᐃ, "c", ⵠᐃⵠ, 172, 199, 1],
		[1, "c", 0, 161, 204, 1],
		[Δⵠᐃ, "c", ⲆⲆΔ, 157, 196, ⲆⲆⵠ],
		[1, "c", ⵠᐃⵠ, 149, 194, ⲆⵠⲆ],
		[ⲆⲆⵠ, "c", ᐃⲆΔ, 147, 208, 1],
		[ᐃⲆⲆ, "c", ⵠᐃΔ, 207, 274, 1],
		[1, "c", 0, 217, 258, Δⵠᐃ],
		[1, "c", 0, 201, 260, 1],
		[ⲆⲆⵠ, "c", 0, 178, 276, ΔΔⵠ],
		[ⲆⵠⲆ, "c", 0, 187, 265, ⲆⲆⵠ],
		[ⲆⲆⵠ, "s", ⲆⲆⵠ, 204, 260, ⵠᐃᐃ],
		[ΔΔⵠ, "s", ᐃⲆⲆ, 216, 260, ⵠᐃᐃ],
		[Δⵠᐃ, "s", 1, 187, 255, 1],
		[ⲆⲆⵠ, "s", ⵠⵠΔⵠ, 189, 254, ⲆⵠⲆ],
		[ⲆⲆⵠ, "s", 2, 212, 257, 1],
		[ΔΔⵠ, "s", ⵠⵠᐃⲆ, 182, 286, 1],
		[1, "s", ⵠⵠΔⵠ, 169, 280, Δⵠᐃ],
		[1, "s", ᐃᐃⲆⵠ, 217, 273, Δⵠᐃ],
		[ᐃⲆⲆ, "s", 2, 215, 282, ⲆⵠⲆ],
		[1, "s", 2, 172, 263, ⲆⲆⵠ],
		[1, "s", ᐃⲆⵠᐃ, 176, 267, Δⵠᐃ],
		[ᐃⲆⲆ, "s", ᐃⲆⵠᐃ, 215, 251, 1],
		[ⲆⵠⲆ, ᐃ[431], 1, 221, 282, 0],
		[1, ᐃ[431], 1, 222, 284, Ⲇⵠᐃ],
		[1, ᐃ[431], ⲆⲆⵠ, 221, 290, 0],
		[1, ᐃ[431], ⲆⲆⵠ, 222, 294, ⲆⲆᐃ],
		[ⲆⲆⵠ, ᐃ[431], 1, 221, 297, 0],
		[1, ᐃ[431], ᐃⲆⲆ, 223, 298, ⲆⲆΔ],
		[1, ᐃ[431], ⵠᐃᐃ, 222, 300, ⲆⲆᐃ],
		[1, ᐃ[431], Δⵠᐃ, 218, 301, ᐃⲆΔ],
		[1, ᐃ[431], ΔΔⵠ, 217, 299, ⵠᐃⵠ],
		[1, ᐃ[431], ⲆⲆⵠ, 215, 301, ⵠᐃⵠ],
		[1, ᐃ[431], 1, 212, 300, 0],
		[1, ᐃ[431], 1, 206, 300, ⵠᐃⵠ],
		[1, ᐃ[431], 1, 209, 301, ᐃⲆᐃ],
		[1, ᐃ[431], ⲆⵠⲆ, 204, 299, 0],
		[Δⵠᐃ, ᐃ[431], ⵠᐃᐃ, 202, 301, ⵠᐃⵠ],
		[ⲆⵠⲆ, ᐃ[431], ⲆⵠⲆ, 199, 301, 0],
		[1, ᐃ[431], ⵠᐃᐃ, 222, 282, 0],
		[1, ᐃ[431], ΔΔⵠ, 207, 301, 0],
		[1, ᐃ[431], ΔΔⵠ, 197, 301, Ⲇⵠᐃ],
		[1, ᐃ[431], 1, 215, 291, Δⵠⵠ],
		[1, ᐃ[431], 1, 216, 286, ⵠᐃⵠ],
		[Δⵠᐃ, ᐃ[431], ⲆⵠⲆ, 214, 292, ᐃⲆΔ],
		[Δⵠᐃ, ᐃ[431], ᐃⲆⲆ, 210, 289, ⵠⵠⵠ],
		[1, ᐃ[431], ⵠᐃᐃ, 208, 294, ⵠᐃΔ],
		[1, ᐃ[431], 1, 210, 298, ᐃⲆᐃ],
		[Δⵠᐃ, ᐃ[431], 1, 212, 281, Ⲇⵠᐃ],
		[1, ᐃ[431], ⵠᐃᐃ, 219, 278, 0],
		[1, ᐃ[431], ᐃⲆⲆ, 219, 282, 0],
		[1, ᐃ[431], ᐃⲆⲆ, 205, 286, ᐃⲆᐃ],
		[1, ᐃ[431], 1, 202, 293, ⵠⵠᐃ],
		[1, ᐃ[431], 1, 198, 295, 0],
		[Δⵠᐃ, ᐃ[431], 2, 213, 282, 0],
		[1, ᐃ[431], ᐃⵠΔⲆ, 213, 291, Ⲇⵠᐃ],
		[1, ᐃ[431], ᐃᐃⲆⵠ, 216, 289, ⲆⲆᐃ],
		[ᐃⲆⲆ, ᐃ[431], 2, 219, 289, 0],
		[1, ᐃ[431], 2, 218, 285, 0],
		[ⲆⵠⲆ, ᐃ[431], 2, 220, 283, 0],
		[ⲆⲆⵠ, ᐃ[431], ᐃᐃⲆⵠ, 211, 283, 0],
		[1, ᐃ[431], 2, 215, 281, Δⵠⵠ],
		[ⵠᐃᐃ, ᐃ[431], ⵠⲆΔᐃ, 217, 279, 0],
		[ⲆⵠⲆ, ᐃ[431], ⵠⲆΔᐃ, 208, 290, Ⲇⵠᐃ],
		[ΔΔⵠ, ᐃ[431], ⵠⵠᐃⲆ, 211, 296, 0],
		[1, ᐃ[431], 2, 215, 294, ⵠⵠⵠ],
		[Δⵠᐃ, ᐃ[431], ᐃⵠΔⲆ, 212, 298, 0],
		[Δⵠᐃ, ᐃ[431], 2, 203, 294, 0],
		[1, ᐃ[431], 2, 204, 288, 0],
		[ᐃⲆⲆ, ᐃ[431], 2, 200, 294, ⵠⵠᐃ],
		[1, ᐃ[431], 2, 198, 297, 0],
		[Δⵠᐃ, ᐃ[431], ᐃᐃⲆⵠ, 202, 299, Δⵠⵠ],
		[ⲆⲆⵠ, ᐃ[431], 2, 200, 299, ⲆⲆΔ],
		[1, ᐃ[431], ⵠⲆΔᐃ, 220, 300, ᐃⲆΔ],
		[ᐃⲆⲆ, ᐃ[431], ᐃᐃⲆⵠ, 220, 295, ⵠᐃⵠ],
		[1, ᐃ[431], ᐃⲆⵠᐃ, 220, 292, ⵠᐃⵠ],
		[ⵠᐃᐃ, ᐃ[431], ⵠⲆΔᐃ, 219, 287, Ⲇⵠᐃ],
		[ⲆⵠⲆ, ᐃ[431], 2, 211, 288, ⵠⵠᐃ],
		[ⲆⵠⲆ, ᐃ[431], ᐃⲆⵠᐃ, 213, 287, 0],
		[ⲆⲆⵠ, ᐃ[431], 2, 211, 289, ⵠⵠᐃ],
		[ⲆⵠⲆ, ᐃ[431], ⵠⵠΔⵠ, 212, 290, ⲆⲆᐃ],
		[1, ᐃ[431], 2, 195, 296, 0],
		[ΔΔⵠ, ᐃ[431], 2, 196, 299, ⵠⵠⵠ],
		[1, ᐃ[431], ⵠⲆΔᐃ, 194, 300, 0],
		[1, ᐃ[431], ᐃⵠΔⲆ, 195, 300, ᐃⲆΔ],
		[1, ᐃ[431], 2, 213, 279, ⲆⲆᐃ],
		[ⲆⲆⵠ, ᐃ[431], 2, 211, 279, ⵠⵠᐃ],
		[1, ᐃ[431], ᐃⲆΔ, 218, 290, 0],
		[ⵠᐃᐃ, ᐃ[431], ᐃⲆᐃ, 212, 294, 0],
		[ᐃⲆⲆ, ᐃ[431], 1, 213, 295, 0],
		[ΔΔⵠ, ᐃ[431], 1, 217, 292, 0],
		[1, ᐃ[431], ΔΔⵠ, 218, 288, ⲆⲆᐃ],
		[ⲆⲆⵠ, ᐃ[431], Δⵠᐃ, 210, 295, 0],
		[1, ᐃ[431], Δⵠᐃ, 213, 292, 0],
		[ⵠᐃᐃ, ᐃ[431], ⲆⵠⲆ, 212, 289, 0],
		[1, ᐃ[431], ΔΔⵠ, 205, 295, 0],
		[Δⵠᐃ, ᐃ[431], 2, 206, 296, 0],
		[ΔΔⵠ, ᐃ[431], 2, 208, 296, Ⲇⵠᐃ],
		[1, ᐃ[431], 2, 221, 288, 0],
		[1, ᐃ[431], ᐃᐃⲆⵠ, 209, 299, 0],
		[ⲆⵠⲆ, ᐃ[431], ᐃⲆⵠᐃ, 211, 291, 0],
		[1, ᐃ[431], 1, 203, 275, 0],
		[1, ᐃ[431], ΔΔⵠ, 204, 272, 0],
		[1, ᐃ[431], 2, 205, 273, 0],
		[1, ᐃ[431], 2, 204, 276, 0],
		[1, ᐃ[431], 2, 202, 276, ⲆⲆᐃ],
		[1, ᐃ[431], 2, 199, 277, 0],
		[ᐃⲆⲆ, ᐃ[431], 2, 202, 273, Δⵠⵠ],
		[ΔΔⵠ, ᐃ[431], ⵠⵠΔⵠ, 199, 270, 0],
		[1, ᐃ[431], 2, 194, 274, 0],
		[1, ᐃ[431], 2, 194, 277, 0],
		[ⵠᐃᐃ, ᐃ[431], 1, 192, 274, 0],
		[1, ᐃ[431], 1, 194, 267, ⵠᐃΔ],
		[ⵠᐃᐃ, ᐃ[431], 2, 194, 265, ⵠⵠᐃ],
		[ΔΔⵠ, ᐃ[431], 2, 190, 272, 0],
		[ⵠᐃᐃ, ᐃ[431], 2, 191, 275, ⲆⲆᐃ],
		[1, ᐃ[431], ⵠⲆΔᐃ, 195, 274, 0],
		[ᐃⲆⲆ, ᐃ[431], 2, 200, 271, 0],
		[1, ᐃ[431], ᐃⲆⲆ, 168, 243, 0],
		[ⲆⲆⵠ, ᐃ[431], 1, 175, 240, 0],
		[1, ᐃ[431], 1, 169, 234, Δⵠⵠ],
		[ΔΔⵠ, ᐃ[431], Δⵠᐃ, 162, 235, 0],
		[Δⵠᐃ, ᐃ[431], 2, 169, 236, 0],
		[ΔΔⵠ, ᐃ[431], ᐃⵠΔⲆ, 171, 234, 0],
		[1, ᐃ[431], 2, 165, 238, ⲆⲆᐃ],
		[1, ᐃ[431], 2, 173, 241, 0],
		[1, ᐃ[431], 2, 174, 238, 0],
		[ⲆⲆⵠ, ᐃ[431], 2, 176, 240, 0],
		[ᐃⲆⲆ, ᐃ[431], 2, 169, 244, ⵠⵠᐃ],
		[Δⵠᐃ, ᐃ[431], 2, 166, 243, 0],
		[1, ᐃ[431], 2, 162, 236, ⲆⲆᐃ],
		[ᐃⲆⲆ, ᐃ[431], ᐃⵠΔⲆ, 164, 235, ⵠᐃⵠ],
		[Δⵠᐃ, ᐃ[431], 2, 162, 233, 0],
		[1, ᐃ[431], 2, 163, 236, ᐃⲆΔ],
		[1, ᐃ[431], ⵠⵠᐃⲆ, 174, 242, Δⵠⵠ],
		[ⲆⲆⵠ, ᐃ[431], ᐃⵠΔⲆ, 171, 243, ⵠⵠᐃ],
		[1, ᐃ[431], Δⵠᐃ, 194, 206, 0],
		[1, ᐃ[431], ΔΔⵠ, 190, 214, Ⲇⵠᐃ],
		[1, ᐃ[431], ᐃⲆⲆ, 186, 206, ⲆⲆΔ],
		[1, ᐃ[431], ⲆⲆⵠ, 197, 207, Ⲇⵠᐃ],
		[1, ᐃ[431], ⵠⵠΔⵠ, 196, 208, 0],
		[1, ᐃ[431], 2, 198, 206, 0],
		[1, ᐃ[431], 2, 198, 208, ⵠⵠᐃ],
		[1, ᐃ[431], ⵠⵠᐃⲆ, 194, 204, 0],
		[ⲆⵠⲆ, ᐃ[431], 2, 187, 206, 0],
		[1, ᐃ[431], ᐃⲆⵠᐃ, 186, 204, ⵠⵠᐃ],
		[ⲆⵠⲆ, ᐃ[431], 2, 189, 214, ⵠᐃⵠ],
		[1, ᐃ[431], ⵠⵠᐃⲆ, 189, 213, 0],
		[ΔΔⵠ, ᐃ[431], 2, 193, 215, 0],
		[1, ᐃ[431], ⵠⵠᐃⲆ, 194, 214, 0],
		[1, ᐃ[431], ᐃⲆⵠᐃ, 187, 215, 0],
		[ⵠᐃᐃ, ᐃ[431], ⵠⵠᐃⲆ, 193, 209, ⵠⵠⵠ],
		[ⲆⲆⵠ, ᐃ[431], ⵠⵠΔⵠ, 189, 211, ⵠᐃΔ],
		[Δⵠᐃ, ᐃ[431], 2, 187, 209, 0],
		[Δⵠᐃ, ᐃ[431], ⵠⲆΔᐃ, 187, 207, ⵠᐃΔ],
		[1, ᐃ[431], ⵠⲆΔᐃ, 191, 205, ⵠⵠᐃ],
		[1, ᐃ[431], 2, 189, 203, 0],
		[ⲆⲆⵠ, ᐃ[153], ᐃᐃⲆⵠ, 224, 176, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠᐃΔ, 224, 177, 1],
		[Δⵠᐃ, ᐃ[153], 3, 224, 178, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 224, 179, ⲆⵠⲆ],
		[1, ᐃ[153], 1, 224, 180, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 224, 181, ⵠᐃᐃ],
		[ⵠᐃᐃ, ᐃ[153], ⲆⲆᐃ, 224, 182, Δⵠᐃ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 224, 183, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], ⲆⲆΔ, 224, 184, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠⲆᐃ, 224, 185, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠΔⵠ, 224, 186, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠᐃⵠ, 224, 187, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠΔⵠ, 224, 188, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[153], 0, 224, 189, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆⲆ, 224, 190, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 224, 191, Δⵠᐃ],
		[1, ᐃ[153], 0, 224, 192, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 224, 193, 1],
		[1, ᐃ[153], 2, 224, 194, ᐃⲆⲆ],
		[1, ᐃ[153], ⲆⲆⵠ, 224, 195, 1],
		[1, ᐃ[153], 2, 224, 196, 1],
		[1, ᐃ[153], 0, 224, 197, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], ⲆⲆΔΔ, 224, 198, Δⵠᐃ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 224, 199, ΔΔⵠ],
		[1, ᐃ[153], 1, 224, 200, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃⲆ, 224, 201, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠⲆᐃ, 224, 202, ⲆⲆⵠ],
		[1, ᐃ[153], 0, 224, 203, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⲆ, 224, 204, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 224, 205, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], ᐃⲆΔ, 224, 206, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], 1, 224, 207, 1],
		[ᐃⲆⲆ, ᐃ[153], 3, 224, 208, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], 2, 224, 209, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 224, 210, ΔΔⵠ],
		[1, ᐃ[153], ⵠⵠⵠ, 223, 211, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], ΔΔⵠ, 224, 211, 1],
		[1, ᐃ[153], 2, 224, 212, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 224, 213, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠᐃᐃ, 224, 214, 1],
		[1, ᐃ[153], 3, 224, 215, Δⵠᐃ],
		[1, ᐃ[153], 0, 224, 216, ᐃⲆⲆ],
		[1, ᐃ[153], ⲆⲆⵠ, 224, 217, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 224, 218, 1],
		[ΔΔⵠ, ᐃ[153], ⵠᐃᐃΔ, 224, 219, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠⵠ, 223, 215, 1],
		[1, ᐃ[153], 2, 223, 214, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⵠΔⵠ, 223, 212, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], 2, 223, 216, ⲆⲆⵠ],
		[1, ᐃ[153], 3, 223, 217, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], ⵠᐃⵠ, 223, 218, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], 0, 224, 220, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], ⲆⲆΔ, 224, 222, 1],
		[1, ᐃ[153], 0, 223, 209, ⲆⵠⲆ],
		[1, ᐃ[153], 0, 223, 205, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], ᐃⵠΔⲆ, 224, 221, 1],
		[1, ᐃ[153], 2, 223, 219, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 223, 220, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 223, 213, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], 2, 223, 210, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], 1, 223, 178, ΔΔⵠ],
		[1, ᐃ[153], ΔᐃΔⲆ, 223, 179, 1],
		[ΔΔⵠ, ᐃ[153], 3, 223, 181, 1],
		[ⵠᐃᐃ, ᐃ[153], 3, 223, 182, 1],
		[1, ᐃ[153], ⲆⵠⲆ, 223, 185, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 223, 184, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], ᐃⵠΔⲆ, 223, 186, 1],
		[1, ᐃ[153], 0, 223, 180, 1],
		[1, ᐃ[153], 0, 223, 183, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], 2, 223, 187, 1],
		[1, ᐃ[153], 1, 223, 188, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 223, 189, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⵠᐃⲆ, 223, 190, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠᐃⵠⲆ, 223, 191, 1],
		[ⲆⲆⵠ, ᐃ[153], 1, 223, 192, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 223, 193, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], 2, 223, 194, 1],
		[1, ᐃ[153], ⵠᐃⵠⲆ, 223, 195, ᐃⲆⲆ],
		[1, ᐃ[153], Δⵠᐃ, 223, 196, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], ⵠⵠᐃⲆ, 223, 197, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 223, 199, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 223, 198, 1],
		[1, ᐃ[153], ᐃⲆᐃ, 223, 200, ΔΔⵠ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 223, 201, ⵠᐃᐃ],
		[1, ᐃ[153], 0, 223, 202, Δⵠᐃ],
		[1, ᐃ[153], ⵠⲆᐃΔ, 223, 203, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], 3, 223, 204, ΔΔⵠ],
		[1, ᐃ[153], 3, 223, 206, ⲆⵠⲆ],
		[1, ᐃ[153], 3, 223, 207, ᐃⲆⲆ],
		[1, ᐃ[153], 3, 223, 208, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 223, 221, 1],
		[1, ᐃ[153], 2, 223, 222, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], 0, 223, 224, ⲆⲆⵠ],
		[1, ᐃ[153], 0, 224, 228, 1],
		[ⲆⵠⲆ, ᐃ[153], 0, 224, 230, 1],
		[1, ᐃ[153], 0, 223, 234, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 223, 223, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 224, 223, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 224, 224, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], 2, 224, 225, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃⲆⲆ, 223, 226, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], 1, 224, 231, 1],
		[1, ᐃ[153], ⵠᐃᐃ, 223, 232, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⲆᐃΔ, 223, 225, ᐃⲆⲆ],
		[1, ᐃ[153], 3, 224, 226, ⲆⲆⵠ],
		[1, ᐃ[153], ⲆΔⲆᐃ, 223, 227, 1],
		[ⲆⲆⵠ, ᐃ[153], 3, 224, 227, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[153], 3, 223, 229, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃΔᐃⲆ, 223, 228, ⲆⵠⲆ],
		[1, ᐃ[153], ⲆⲆΔΔ, 224, 229, 1],
		[ⲆⲆⵠ, ᐃ[153], 3, 223, 230, ⵠᐃᐃ],
		[1, ᐃ[153], 3, 223, 231, 1],
		[1, ᐃ[153], ⵠᐃᐃΔ, 224, 232, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃΔᐃⲆ, 224, 233, ᐃⲆⲆ],
		[1, ᐃ[153], ⲆⲆΔΔ, 223, 233, 1],
		[1, ᐃ[153], ⵠᐃⵠⲆ, 224, 234, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], ⲆⲆΔΔ, 224, 235, 1],
		[1, ᐃ[153], ⵠⵠⲆⲆ, 223, 235, 1],
		[1, ᐃ[153], ⲆⲆⵠ, 224, 236, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 223, 236, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], ⵠⲆΔᐃ, 223, 237, ⲆⲆⵠ],
		[1, ᐃ[153], ⲆΔⲆⲆ, 224, 237, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 3, 224, 238, 1],
		[ⲆⵠⲆ, ᐃ[153], Ⲇⵠᐃ, 224, 239, ᐃⲆⲆ],
		[1, ᐃ[153], ⲆⲆⵠ, 223, 241, 1],
		[1, ᐃ[153], ⲆⲆᐃ, 224, 243, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠᐃΔ, 223, 245, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], 0, 224, 247, 1],
		[1, ᐃ[153], 2, 223, 240, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 223, 239, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 224, 240, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], ᐃⵠΔⲆ, 224, 241, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 224, 242, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 223, 242, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 223, 243, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⵠΔⲆ, 223, 244, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 224, 244, ΔΔⵠ],
		[1, ᐃ[153], 2, 224, 245, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], 2, 224, 246, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], ⵠⲆᐃΔ, 223, 238, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], 3, 223, 246, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], ⵠⵠΔⵠ, 223, 247, 1],
		[1, ᐃ[153], ⵠᐃᐃ, 223, 249, 1],
		[ⲆⵠⲆ, ᐃ[153], 1, 224, 253, 1],
		[1, ᐃ[153], ⲆⵠⲆ, 223, 256, ⵠᐃᐃ],
		[1, ᐃ[153], 0, 223, 254, 1],
		[ⲆⲆⵠ, ᐃ[153], 0, 224, 250, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[153], 3, 223, 248, ΔΔⵠ],
		[1, ᐃ[153], ⲆⵠⵠⲆ, 223, 250, 1],
		[ᐃⲆⲆ, ᐃ[153], 3, 223, 252, ⵠᐃᐃ],
		[ΔΔⵠ, ᐃ[153], 3, 223, 255, 1],
		[1, ᐃ[153], 3, 223, 257, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 224, 248, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 224, 249, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], 2, 223, 251, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 224, 251, ΔΔⵠ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 224, 252, Δⵠᐃ],
		[1, ᐃ[153], 2, 223, 253, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 224, 254, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 224, ΔⵠΔΔⲆⲆⵠ, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 224, 256, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 224, 257, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], 0, 224, 258, ᐃⲆⲆ],
		[1, ᐃ[153], 0, 223, 261, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], 0, 224, 263, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], 0, 224, 266, 1],
		[Δⵠᐃ, ᐃ[153], 0, 224, 272, 1],
		[1, ᐃ[153], 0, 223, 270, 1],
		[1, ᐃ[153], 0, 223, 275, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], 1, 223, 259, 1],
		[1, ᐃ[153], 1, 223, 264, 1],
		[ⲆⵠⲆ, ᐃ[153], ⲆⲆⵠ, 223, 268, 1],
		[ⲆⵠⲆ, ᐃ[153], Δⵠᐃ, 224, 274, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 223, 258, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 223, 260, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], ᐃⵠΔⲆ, 223, 263, 1],
		[ⵠᐃᐃ, ᐃ[153], ᐃⲆⵠᐃ, 223, 265, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], ᐃⵠΔⲆ, 223, 267, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 223, 271, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃⵠΔⲆ, 223, 273, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⲆᐃΔ, 223, 262, 1],
		[1, ᐃ[153], 3, 223, 266, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], 3, 223, 269, 1],
		[1, ᐃ[153], 3, 223, 272, 1],
		[ΔΔⵠ, ᐃ[153], ⵠᐃᐃΔ, 223, 274, ᐃⲆⲆ],
		[1, ᐃ[153], ΔᐃΔⲆ, 224, 275, 1],
		[1, ᐃ[153], ⵠⵠⲆⲆ, 224, 273, 1],
		[1, ᐃ[153], ⲆΔⲆᐃ, 224, 271, ⲆⵠⲆ],
		[1, ᐃ[153], 3, 224, 270, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], 3, 224, 269, 1],
		[1, ᐃ[153], ⲆΔⲆⲆ, 224, 268, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 3, 224, 267, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], 3, 224, 265, 1],
		[1, ᐃ[153], 3, 224, 264, 1],
		[ⵠᐃᐃ, ᐃ[153], 3, 224, 262, 1],
		[1, ᐃ[153], 3, 224, 261, 1],
		[ⲆⵠⲆ, ᐃ[153], 3, 224, 260, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], 3, 224, 259, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠΔⵠ, 223, 276, ⲆⵠⲆ],
		[1, ᐃ[153], 1, 224, 276, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⲆ, 224, 280, Δⵠᐃ],
		[1, ᐃ[153], Δⵠᐃ, 223, 281, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], 1, 224, 286, 1],
		[ⲆⵠⲆ, ᐃ[153], Ⲇⵠᐃ, 223, 280, 1],
		[ΔΔⵠ, ᐃ[153], 0, 223, 284, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], Ⲇⵠᐃ, 224, 288, 1],
		[1, ᐃ[153], 0, 224, 279, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 223, 277, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 224, 277, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⲆΔᐃ, 224, 278, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 224, 281, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], 2, 224, 283, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⵠΔⲆ, 224, 282, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 224, 284, ΔΔⵠ],
		[1, ᐃ[153], 2, 224, 285, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 224, 287, 1],
		[1, ᐃ[153], 2, 223, 287, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], ⵠⵠᐃⲆ, 223, 285, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 223, 283, 1],
		[1, ᐃ[153], 2, 223, 279, 1],
		[ⲆⲆⵠ, ᐃ[153], 3, 223, 278, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], ᐃΔᐃⲆ, 223, 282, Δⵠᐃ],
		[1, ᐃ[153], 3, 223, 286, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⵠⲆᐃ, 223, 289, 1],
		[1, ᐃ[153], ⵠⵠⲆᐃ, 224, 289, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠᐃⲆ, 223, 288, ΔΔⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 224, 290, 1],
		[ⲆⵠⲆ, ᐃ[153], ⲆⲆⵠ, 223, 290, 1],
		[1, ᐃ[153], ⵠᐃΔ, 224, 292, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠᐃ, 223, 294, ⲆⵠⲆ],
		[1, ᐃ[153], ⲆⲆᐃ, 224, 297, ⵠᐃᐃ],
		[1, ᐃ[153], 0, 223, 299, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 223, 291, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 224, 291, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], 2, 223, 292, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 223, 293, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆⵠᐃ, 224, 293, 1],
		[1, ᐃ[153], 2, 224, 294, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], ⲆⵠⲆ, 224, 295, 1],
		[ΔΔⵠ, ᐃ[153], 2, 223, 295, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 223, 296, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 224, 296, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃⲆ, 223, 297, 1],
		[Δⵠᐃ, ᐃ[153], ᐃⵠΔⲆ, 223, 298, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 224, 298, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], ᐃᐃⲆⵠ, 224, 299, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[153], ᐃⵠΔⲆ, 223, 300, 1],
		[1, ᐃ[153], ΔΔⵠ, 224, 300, 1],
		[1, ᐃ[153], 0, 223, 301, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃⲆᐃ, 224, 302, 1],
		[Δⵠᐃ, ᐃ[153], 0, 224, 304, ⲆⲆⵠ],
		[1, ᐃ[153], 3, 224, 301, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], 3, 224, 303, ΔΔⵠ],
		[1, ᐃ[153], 0, 221, 303, 1],
		[1, ᐃ[153], Ⲇⵠᐃ, 219, 304, 1],
		[1, ᐃ[153], ⲆⲆⵠ, 222, 304, ⵠᐃᐃ],
		[1, ᐃ[153], ⲆⵠⲆ, 222, 302, 1],
		[1, ᐃ[153], 2, 223, 302, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 223, 303, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 222, 303, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 223, 304, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 221, 304, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 220, 304, Δⵠᐃ],
		[1, ᐃ[153], 2, 220, 303, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 220, 302, 1],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⵠᐃ, 221, 302, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], 2, 219, 303, 1],
		[1, ᐃ[153], ⵠⵠᐃ, 217, 302, 1],
		[ᐃⲆⲆ, ᐃ[153], 0, 215, 304, 1],
		[ΔΔⵠ, ᐃ[153], 0, 214, 302, 1],
		[ⲆⲆⵠ, ᐃ[153], ΔΔⵠ, 218, 302, 1],
		[ⲆⲆⵠ, ᐃ[153], Δⵠᐃ, 217, 304, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃⲆⲆ, 215, 302, 1],
		[ΔΔⵠ, ᐃ[153], 2, 219, 302, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃⲆ, 218, 303, 1],
		[ᐃⲆⲆ, ᐃ[153], ᐃᐃⲆⵠ, 218, 304, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃⲆ, 217, 303, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 216, 304, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 215, 303, 1],
		[1, ᐃ[153], 2, 216, 303, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 216, 302, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 214, 303, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 214, 304, 1],
		[1, ᐃ[153], 0, 212, 302, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠᐃ, 210, 303, 1],
		[1, ᐃ[153], 0, 212, 304, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], 0, 208, 304, ⲆⵠⲆ],
		[1, ᐃ[153], 1, 210, 302, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], ⵠᐃᐃ, 208, 303, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 213, 302, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 213, 303, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 213, 304, Δⵠᐃ],
		[1, ᐃ[153], 2, 212, 303, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 211, 304, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 211, 303, ΔΔⵠ],
		[1, ᐃ[153], 2, 211, 302, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 209, 302, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], 2, 209, 303, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 209, 304, ⲆⲆⵠ],
		[Δⵠᐃ, ᐃ[153], 2, 210, 304, ΔΔⵠ],
		[1, ᐃ[153], 2, 208, 302, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠᐃ, 206, 303, 1],
		[1, ᐃ[153], ⵠⵠⵠ, 203, 304, ⲆⵠⲆ],
		[1, ᐃ[153], 0, 200, 303, Δⵠᐃ],
		[1, ᐃ[153], 0, 199, 304, 1],
		[ΔΔⵠ, ᐃ[153], 0, 195, 304, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠᐃⵠ, 191, 303, 1],
		[ᐃⲆⲆ, ᐃ[153], 0, 193, 304, 1],
		[ⲆⲆⵠ, ᐃ[153], 0, 189, 304, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], 1, 204, 303, 1],
		[1, ᐃ[153], 0, 197, 302, 1],
		[ΔΔⵠ, ᐃ[153], 0, 202, 302, 1],
		[1, ᐃ[153], ᐃⲆᐃ, 188, 302, ⲆⲆⵠ],
		[Δⵠᐃ, ᐃ[153], Ⲇⵠᐃ, 194, 302, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], 1, 197, 303, 1],
		[ΔΔⵠ, ᐃ[153], ⲆⵠⲆ, 201, 304, 1],
		[ⲆⲆⵠ, ᐃ[153], 1, 192, 302, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], 1, 189, 303, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], ⵠᐃᐃ, 205, 302, ⵠᐃᐃ],
		[1, ᐃ[153], Δⵠᐃ, 188, 304, 1],
		[1, ᐃ[153], 2, 207, 302, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 207, 303, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 207, 304, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 206, 304, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 206, 302, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 205, 303, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠⲆΔᐃ, 204, 304, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃⲆ, 205, 304, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[153], 2, 204, 302, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 203, 302, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠᐃⲆ, 203, 303, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 202, 303, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 201, 303, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], 2, 201, 302, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 200, 302, ΔΔⵠ],
		[1, ᐃ[153], 2, 199, 302, 1],
		[Δⵠᐃ, ᐃ[153], ᐃᐃⲆⵠ, 198, 303, ΔΔⵠ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 198, 302, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], ᐃᐃⲆⵠ, 199, 303, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 200, 304, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 202, 304, 1],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⵠᐃ, 197, 304, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 198, 304, 1],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⵠᐃ, 196, 304, ΔΔⵠ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 196, 303, Δⵠᐃ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 196, 302, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃⲆ, 195, 302, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 195, 303, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[153], 2, 194, 303, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 194, 304, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 193, 303, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 193, 302, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], 2, 192, 303, ΔΔⵠ],
		[1, ᐃ[153], 2, 192, 304, ΔΔⵠ],
		[1, ᐃ[153], 2, 191, 304, 1],
		[1, ᐃ[153], 2, 190, 304, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 190, 303, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], ⵠⵠΔⵠ, 189, 302, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 190, 302, 1],
		[1, ᐃ[153], 2, 191, 302, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 188, 303, 1],
		[1, ᐃ[153], Ⲇⵠᐃ, 186, 303, ⲆⲆⵠ],
		[1, ᐃ[153], 0, 183, 304, ⲆⵠⲆ],
		[1, ᐃ[153], 0, 184, 302, ΔΔⵠ],
		[1, ᐃ[153], 0, 181, 302, 1],
		[ⲆⵠⲆ, ᐃ[153], 0, 176, 302, ⲆⵠⲆ],
		[1, ᐃ[153], 0, 178, 303, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃ, 173, 304, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠⵠ, 170, 303, 1],
		[1, ᐃ[153], ⵠⵠᐃ, 172, 302, ᐃⲆⲆ],
		[1, ᐃ[153], 1, 182, 303, 1],
		[1, ᐃ[153], ΔΔⵠ, 178, 304, ⵠᐃᐃ],
		[ΔΔⵠ, ᐃ[153], Δⵠᐃ, 175, 304, 1],
		[1, ᐃ[153], 1, 173, 302, ⲆⵠⲆ],
		[1, ᐃ[153], 1, 185, 304, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], ⲆⵠⲆ, 169, 304, ᐃⲆⲆ],
		[1, ᐃ[153], 3, 187, 304, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[153], 3, 186, 304, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], 3, 187, 303, 1],
		[1, ᐃ[153], ⲆΔⲆⲆ, 187, 302, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], 3, 186, 302, ᐃⲆⲆ],
		[1, ᐃ[153], 3, 185, 302, ⲆⲆⵠ],
		[1, ᐃ[153], ⲆⵠⵠⲆ, 185, 303, 1],
		[1, ᐃ[153], ⵠⲆᐃΔ, 184, 303, ⲆⲆⵠ],
		[1, ᐃ[153], ⲆΔⲆᐃ, 183, 303, 1],
		[1, ᐃ[153], ⵠⵠⲆᐃ, 183, 302, 1],
		[1, ᐃ[153], ⵠⲆᐃΔ, 182, 302, 1],
		[1, ᐃ[153], ⲆΔⲆⲆ, 184, 304, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⲆᐃΔ, 182, 304, ᐃⲆⲆ],
		[1, ᐃ[153], ⲆⲆΔΔ, 181, 304, 1],
		[1, ᐃ[153], 3, 179, 304, ⵠᐃᐃ],
		[1, ᐃ[153], 3, 180, 304, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], ⵠᐃⵠⲆ, 181, 303, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 3, 180, 303, ⵠᐃᐃ],
		[1, ᐃ[153], ⲆⲆΔΔ, 179, 303, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⲆᐃΔ, 180, 302, 1],
		[1, ᐃ[153], ⵠⲆᐃΔ, 179, 302, Δⵠᐃ],
		[1, ᐃ[153], ⵠⵠⲆᐃ, 178, 302, Δⵠᐃ],
		[1, ᐃ[153], 3, 177, 302, ᐃⲆⲆ],
		[ⵠᐃᐃ, ᐃ[153], 3, 177, 304, ΔΔⵠ],
		[1, ᐃ[153], 3, 177, 303, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], ⲆⲆΔΔ, 176, 303, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], 3, 176, 304, 1],
		[ᐃⲆⲆ, ᐃ[153], 3, 174, 304, 1],
		[ΔΔⵠ, ᐃ[153], 3, 175, 303, 1],
		[ⵠᐃᐃ, ᐃ[153], ΔᐃΔⲆ, 174, 303, 1],
		[1, ᐃ[153], 3, 173, 303, 1],
		[1, ᐃ[153], 3, 172, 303, 1],
		[1, ᐃ[153], ⲆΔⲆᐃ, 171, 303, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], 3, 170, 304, 1],
		[1, ᐃ[153], 3, 171, 304, 1],
		[1, ᐃ[153], 3, 172, 304, 1],
		[ΔΔⵠ, ᐃ[153], 3, 174, 302, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], ΔᐃΔⲆ, 175, 302, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠⲆᐃ, 171, 302, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], 3, 170, 302, ⲆⵠⲆ],
		[1, ᐃ[153], ΔᐃΔⲆ, 169, 302, 1],
		[Δⵠᐃ, ᐃ[153], ⵠᐃᐃΔ, 169, 303, 1],
		[1, ᐃ[153], ⲆⲆᐃ, 168, 302, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⵠᐃ, 166, 303, 1],
		[1, ᐃ[153], ⲆⲆΔ, 163, 304, ᐃⲆⲆ],
		[1, ᐃ[153], 0, 161, 302, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆᐃ, 159, 303, 1],
		[1, ᐃ[153], 0, 152, 304, ⵠᐃᐃ],
		[1, ᐃ[153], ⲆⲆΔ, 155, 303, ᐃⲆⲆ],
		[1, ᐃ[153], 1, 164, 303, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], 1, 162, 303, 1],
		[Δⵠᐃ, ᐃ[153], 1, 158, 304, ⲆⲆⵠ],
		[1, ᐃ[153], 1, 156, 302, ΔΔⵠ],
		[1, ᐃ[153], 1, 153, 302, ᐃⲆⲆ],
		[1, ᐃ[153], 1, 154, 304, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 168, 304, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⵠΔⵠ, 168, 303, 1],
		[1, ᐃ[153], 2, 167, 303, 1],
		[1, ᐃ[153], 2, 167, 304, ⲆⲆⵠ],
		[Δⵠᐃ, ᐃ[153], ᐃⵠΔⲆ, 166, 304, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 165, 304, ΔΔⵠ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 164, 304, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 165, 303, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], 2, 167, 302, 1],
		[1, ᐃ[153], 2, 166, 302, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], 2, 165, 302, 1],
		[1, ᐃ[153], 2, 164, 302, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 163, 302, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 162, 302, ⵠᐃᐃ],
		[ΔΔⵠ, ᐃ[153], 2, 163, 303, 1],
		[1, ᐃ[153], 2, 162, 304, Δⵠᐃ],
		[ⵠᐃᐃ, ᐃ[153], ᐃⵠΔⲆ, 160, 304, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 159, 304, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⲆΔᐃ, 161, 304, ΔΔⵠ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 161, 303, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 160, 303, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], 2, 160, 302, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[153], ᐃⲆⵠᐃ, 158, 302, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 159, 302, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 157, 302, 1],
		[1, ᐃ[153], 2, 156, 303, 1],
		[1, ᐃ[153], 2, 157, 303, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⵠΔⲆ, 158, 303, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 157, 304, 1],
		[Δⵠᐃ, ᐃ[153], 2, 156, 304, ΔΔⵠ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 155, 304, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 153, 304, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], 2, 153, 303, 1],
		[1, ᐃ[153], 2, 154, 303, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 154, 302, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 155, 302, 1],
		[Δⵠᐃ, ᐃ[153], 2, 152, 303, 1],
		[1, ᐃ[153], 2, 152, 302, 1],
		[ⲆⵠⲆ, ᐃ[153], 0, 151, 302, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], 0, 149, 303, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[153], 0, 145, 304, 1],
		[ΔΔⵠ, ᐃ[153], ⲆⲆᐃ, 147, 302, 1],
		[ᐃⲆⲆ, ᐃ[153], 0, 143, 303, ⲆⵠⲆ],
		[1, ᐃ[153], 0, 141, 303, 1],
		[1, ᐃ[153], ᐃⲆⲆ, 147, 304, 1],
		[ⲆⵠⲆ, ᐃ[153], ΔΔⵠ, 145, 302, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], 1, 142, 302, 1],
		[ΔΔⵠ, ᐃ[153], ⵠᐃᐃ, 150, 304, 1],
		[Δⵠᐃ, ᐃ[153], 2, 151, 304, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 151, 303, 1],
		[ᐃⲆⲆ, ᐃ[153], ᐃⵠΔⲆ, 150, 303, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 150, 302, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 148, 302, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], 2, 146, 302, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃⲆ, 144, 302, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 141, 302, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 141, 304, 1],
		[Δⵠᐃ, ᐃ[153], ᐃⲆⵠᐃ, 142, 304, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 142, 303, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 143, 304, 1],
		[1, ᐃ[153], 2, 144, 304, Δⵠᐃ],
		[1, ᐃ[153], 2, 144, 303, Δⵠᐃ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 148, 304, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 148, 303, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 146, 303, 1],
		[Δⵠᐃ, ᐃ[153], ᐃᐃⲆⵠ, 145, 303, 1],
		[1, ᐃ[153], 2, 147, 303, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], ᐃᐃⲆⵠ, 146, 304, 1],
		[1, ᐃ[153], 2, 149, 304, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], 3, 149, 302, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], 3, 143, 302, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃ, 139, 304, 1],
		[1, ᐃ[153], 0, 138, 302, 1],
		[ⲆⵠⲆ, ᐃ[153], ⲆⵠⲆ, 139, 302, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 140, 302, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 140, 303, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 139, 303, 1],
		[1, ᐃ[153], 2, 138, 303, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 138, 304, 1],
		[1, ᐃ[153], 2, 140, 304, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], ᐃⲆᐃ, 137, 304, 1],
		[1, ᐃ[153], 0, 135, 303, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], ⲆⲆΔ, 133, 304, 1],
		[ⲆⲆⵠ, ᐃ[153], 1, 135, 304, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠᐃᐃ, 136, 302, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃᐃⲆⵠ, 137, 302, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 136, 303, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⵠᐃ, 137, 303, ΔΔⵠ],
		[1, ᐃ[153], 2, 136, 304, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 134, 304, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 134, 303, Δⵠᐃ],
		[ⵠᐃᐃ, ᐃ[153], ᐃⵠΔⲆ, 133, 303, Δⵠᐃ],
		[1, ᐃ[153], 2, 132, 304, ⲆⲆⵠ],
		[Δⵠᐃ, ᐃ[153], ⵠᐃΔ, 131, 302, 1],
		[1, ᐃ[153], ⵠᐃΔ, 134, 302, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⲆᐃ, 129, 304, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], 1, 130, 303, ΔΔⵠ],
		[1, ᐃ[153], 1, 132, 302, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], 2, 135, 302, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 133, 302, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], 2, 132, 303, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 131, 303, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 130, 304, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 131, 304, Δⵠᐃ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 128, 304, 1],
		[ᐃⲆⲆ, ᐃ[153], ᐃᐃⲆⵠ, 129, 303, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 130, 302, 1],
		[ⲆⵠⲆ, ᐃ[153], 3, 127, 304, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 132, 301, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], 2, 133, 301, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⵠΔⵠ, 134, 301, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 135, 301, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⲆᐃΔ, 131, 301, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], 3, 136, 301, ΔΔⵠ],
		[1, ᐃ[153], ᐃΔᐃⲆ, 136, 178, 1],
		[1, ᐃ[153], ⵠᐃΔ, 136, 183, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[153], 2, 136, 182, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], ⵠᐃᐃ, 136, 181, ᐃⲆⲆ],
		[1, ᐃ[153], 0, 136, 179, ΔΔⵠ],
		[1, ᐃ[153], 3, 136, 180, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 135, 183, 1],
		[1, ᐃ[153], ᐃⲆⲆ, 135, 182, 1],
		[1, ᐃ[153], ᐃΔᐃⲆ, 135, 180, Δⵠᐃ],
		[1, ᐃ[153], ᐃⲆᐃ, 134, 183, 1],
		[1, ᐃ[153], 2, 133, 183, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], ⵠᐃᐃΔ, 133, 182, 1],
		[1, ᐃ[153], 1, 132, 183, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], 3, 131, 183, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], ᐃⵠΔⲆ, 135, 181, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], 2, 134, 182, 1],
		[1, ᐃ[153], ΔᐃΔⲆ, 134, 181, 1],
		[ΔΔⵠ, ᐃ[431], 0, 213, 301, ⲆⲆΔ],
		[ΔΔⵠ, ᐃ[431], 0, 204, 301, 0],
		[1, ᐃ[431], 1, 196, 288, ⵠⵠⵠ],
		[1, ᐃ[431], 1, 198, 283, 0],
		[1, ᐃ[431], 1, 190, 288, 0],
		[1, ᐃ[431], 1, 189, 296, 0],
		[ⲆⵠⲆ, ᐃ[431], 1, 193, 293, 0],
		[Δⵠᐃ, ᐃ[431], 1, 183, 292, 0],
		[1, ᐃ[431], ΔΔⵠ, 186, 287, ⲆⲆᐃ],
		[1, ᐃ[431], ΔΔⵠ, 190, 290, Ⲇⵠᐃ],
		[1, ᐃ[431], ᐃⲆⲆ, 218, 271, ⲆⲆᐃ],
		[ᐃⲆⲆ, ᐃ[431], ⲆⲆⵠ, 220, 266, 0],
		[1, ᐃ[431], 1, 211, 268, ⲆⲆΔ],
		[1, ᐃ[431], ᐃⲆⲆ, 210, 274, 0],
		[ⲆⵠⲆ, ᐃ[431], 1, 205, 263, ⵠⵠᐃ],
		[1, ᐃ[431], 1, 216, 258, 0],
		[Δⵠᐃ, ᐃ[431], ᐃᐃⲆⵠ, 201, 294, 0],
		[1, ᐃ[431], 2, 190, 296, 0],
		[ⵠᐃᐃ, ᐃ[431], 2, 188, 299, 0],
		[ᐃⲆⲆ, ᐃ[431], ⵠⵠᐃⲆ, 186, 297, 0],
		[1, ᐃ[431], 2, 188, 296, 0],
		[ΔΔⵠ, ᐃ[431], 2, 189, 291, 0],
		[1, ᐃ[431], ⵠⵠΔⵠ, 189, 286, ⲆⲆᐃ],
		[ΔΔⵠ, ᐃ[431], ⵠⵠΔⵠ, 191, 286, ⲆⲆᐃ],
		[1, ᐃ[431], 2, 197, 286, 0],
		[Δⵠᐃ, ᐃ[431], 2, 195, 290, 0],
		[ΔΔⵠ, ᐃ[431], ᐃᐃⲆⵠ, 186, 288, ⲆⲆᐃ],
		[ⲆⲆⵠ, ᐃ[431], ⵠⵠᐃⲆ, 184, 290, 0],
		[1, ᐃ[431], 2, 183, 293, ᐃⲆᐃ],
		[1, ᐃ[431], 2, 198, 286, Ⲇⵠᐃ],
		[1, ᐃ[431], ᐃⵠΔⲆ, 196, 283, ᐃⲆΔ],
		[1, ᐃ[431], ⵠⵠᐃⲆ, 196, 281, 0],
		[ΔΔⵠ, ᐃ[431], ⵠⲆΔᐃ, 201, 280, ⲆⲆΔ],
		[ᐃⲆⲆ, ᐃ[431], 2, 205, 287, ⲆⲆᐃ],
		[ΔΔⵠ, ᐃ[431], ⵠⵠᐃⲆ, 209, 283, ⲆⲆᐃ],
		[1, ᐃ[431], 2, 212, 280, 0],
		[1, ᐃ[431], ⵠⵠΔⵠ, 209, 277, 0],
		[ⲆⵠⲆ, ᐃ[431], 2, 217, 278, 0],
		[1, ᐃ[431], 2, 219, 275, Ⲇⵠᐃ],
		[ⵠᐃᐃ, ᐃ[431], ᐃᐃⲆⵠ, 220, 271, ⵠᐃΔ],
		[ⵠᐃᐃ, ᐃ[431], ᐃⵠΔⲆ, 220, 267, ⵠⵠⵠ],
		[1, ᐃ[431], ᐃⲆⵠᐃ, 217, 265, ⵠⵠᐃ],
		[Δⵠᐃ, ᐃ[431], 2, 213, 267, 0],
		[1, ᐃ[431], 2, 208, 264, 0],
		[ⲆⲆⵠ, ᐃ[431], 2, 206, 261, ⲆⲆᐃ],
		[ⲆⵠⲆ, ᐃ[431], 2, 203, 265, ⵠᐃⵠ],
		[Δⵠᐃ, ᐃ[431], ⵠⲆΔᐃ, 204, 270, ⵠⵠⵠ],
		[ᐃⲆⲆ, ᐃ[431], ᐃᐃⲆⵠ, 196, 267, 0],
		[Δⵠᐃ, ᐃ[431], ⵠⵠᐃⲆ, 214, 261, ⵠᐃΔ],
		[ⲆⵠⲆ, ᐃ[431], ᐃⲆⵠᐃ, 211, 260, ⲆⲆΔ],
		[1, ᐃ[431], 2, 218, ⲆᐃᐃᐃΔᐃΔ, ⵠⵠⵠ],
		[ⵠᐃᐃ, ᐃ[431], 2, 219, 262, ⵠᐃⵠ],
		[1, ᐃ[431], 2, 220, 253, 0],
		[ⲆⲆⵠ, ᐃ[431], ᐃⲆⵠᐃ, 211, 257, 0],
		[ⲆⲆⵠ, ᐃ[566], ΔᐃΔⲆ, 198, 27, 1],
		[1, ᐃ[566], ᐃΔᐃⲆ, 201, 30, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[566], 3, 200, 32, 1],
		[ⵠᐃᐃ, ᐃ[566], ⲆΔⲆᐃ, 198, 33, ⲆⲆⵠ],
		[1, ᐃ[566], 3, 196, 33, 1],
		[1, ᐃ[566], 3, 194, 32, Δⵠᐃ],
		[1, ᐃ[566], 3, 194, 28, 1],
		[ⲆⲆⵠ, ᐃ[566], Ⲇⵠᐃ, 200, 28, 1],
		[1, ᐃ[566], ⵠᐃΔ, 193, 30, ⲆⲆⵠ],
		[1, ᐃ[566], ᐃΔᐃⲆ, 196, 27, 1],
		[1, ᐃ[566], ⲆⵠⵠⲆ, 199, 30, ⲆⲆⵠ],
		[1, ᐃ[566], 3, 197, 29, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[566], 3, 195, 30, ⲆⲆⵠ],
		[1, ᐃ[566], ᐃΔᐃⲆ, 197, 31, 1],
		[1, ᐃ[566], ⵠⵠᐃⲆ, 201, 33, 1],
		[ΔΔⵠ, ᐃ[566], ΔⲆⲆⲆ, 202, 34, 1],
		[ᐃⲆⲆ, ᐃ[566], ᐃⵠⵠⲆ, 202, 35, ⲆⲆⵠ],
		[1, ᐃ[566], 4, 203, 36, 1],
		[ⲆⵠⲆ, ᐃ[566], ΔΔⲆΔ, 204, 37, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[566], ᐃⵠΔⲆ, 205, 38, 1],
		[Δⵠᐃ, ᐃ[566], ⵠⲆⲆⲆ, 205, 39, 1],
		[1, ᐃ[566], ⵠᐃⲆᐃ, 205, 40, 1],
		[ⲆⲆⵠ, ᐃ[566], 2, 206, 41, Δⵠᐃ],
		[1, ᐃ[566], 1, 207, 42, 1],
		[1, ᐃ[566], 1, 205, 41, 1],
		[1, ᐃ[566], ΔᐃᐃΔ, 208, 43, Δⵠᐃ],
		[ⵠᐃᐃ, ᐃ[566], 4, 209, 43, 1],
		[1, ᐃ[566], 1, 210, 43, 1],
		[Δⵠᐃ, ᐃ[566], 2, 211, 43, 1],
		[1, ᐃ[566], ⵠΔⲆᐃ, 212, 43, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[566], 4, 213, 44, ⵠᐃᐃ],
		[1, ᐃ[566], ⵠᐃⵠⲆ, 223, 54, ΔΔⵠ],
		[1, ᐃ[566], ⲆⵠⵠⲆ, 221, 53, Δⵠᐃ],
		[1, ᐃ[566], ⵠᐃⵠⲆ, 219, 53, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[566], 4, 218, 52, ⲆⵠⲆ],
		[1, ᐃ[566], 4, 217, 51, ΔΔⵠ],
		[1, ᐃ[566], ⲆⲆⲆΔ, 216, 51, 1],
		[ΔΔⵠ, ᐃ[566], ⵠᐃᐃ, 215, 50, 1],
		[Δⵠᐃ, ᐃ[566], 4, 212, 46, ⲆⵠⲆ],
		[1, ᐃ[566], 1, 210, 44, Δⵠᐃ],
		[1, ᐃ[566], ⵠⵠⲆⲆ, 206, 50, 1],
		[1, ᐃ[538], ᐃⲆᐃ, 217, 24, Δⵠᐃ],
		[1, ᐃ[538], 0, 207, ⲆⲆᐃΔⵠ, 1],
		[ᐃⲆⲆ, ᐃ[457], 44, 54, 14, 0],
		[ⵠᐃᐃ, ᐃ[457], 44, 53, 13, 0],
		[ΔΔⵠ, ᐃ[457], 44, 51, ᐃΔᐃⲆⲆ, 0],
		[ⲆⲆⵠ, ᐃ[457], 44, 49, ⲆΔΔΔⲆ, 0],
		[ⲆⲆⵠ, ᐃ[457], 44, 48, ᐃⲆⵠⵠᐃ, ᐃⲆᐃ],
		[1, ᐃ[457], 21, 78, 293, 0],
		[1, ᐃ[153], ⵠⵠⵠ, 221, 8, Δⵠᐃ],
		[1, ᐃ[153], ᐃⲆΔ, 224, 9, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], 1, 223, Δᐃⵠⵠᐃ, Δⵠᐃ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 224, 8, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 222, ᐃΔᐃⵠⲆ, 1],
		[Δⵠᐃ, ᐃ[153], Ⲇⵠᐃ, 224, ⵠⲆⵠⲆⵠ, ⲆⵠⲆ],
		[1, ᐃ[153], 0, 222, 5, ⲆⲆⵠ],
		[1, ᐃ[153], 0, 219, ⲆᐃⲆⲆΔ, 1],
		[ᐃⲆⲆ, ᐃ[153], ΔΔⵠ, 220, 5, 1],
		[ᐃⲆⲆ, ᐃ[153], 1, 217, 7, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃⲆ, 224, 5, 1],
		[1, ᐃ[153], 2, 223, 5, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], 2, 224, 7, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], 2, 223, ⲆΔᐃᐃⲆ, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 223, ⲆⲆⲆⵠΔ, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 222, ⵠΔᐃᐃ, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], ᐃᐃⲆⵠ, 222, ᐃΔᐃᐃⲆ, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 221, 7, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], ᐃⵠΔⲆ, 221, 6, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], ⵠⵠΔⵠ, 221, ΔⲆⵠⵠ, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[153], ⵠⲆΔᐃ, 220, 6, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 220, 7, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 220, ⲆⲆⲆᐃⲆ, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 219, ⲆⲆⲆᐃⲆ, ΔΔⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 219, 6, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], 2, 219, ᐃᐃᐃᐃ, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], 0, 218, ⵠⲆⲆⲆ, 1],
		[1, ᐃ[153], 0, 216, ⲆⲆⲆᐃⲆ, 1],
		[Δⵠᐃ, ᐃ[153], 2, 218, ⵠᐃΔᐃⲆ, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], ᐃᐃⲆⵠ, 217, ⵠᐃΔᐃⲆ, 1],
		[Δⵠᐃ, ᐃ[153], 2, 218, ⵠⲆᐃΔⵠ, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 218, 6, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠⲆΔᐃ, 217, ⵠⵠⲆᐃⲆ, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 217, 5, 1],
		[ⵠᐃᐃ, ᐃ[153], 1, 215, ⵠⵠⲆⲆⵠ, ᐃⲆⲆ],
		[1, ᐃ[153], ΔΔⵠ, 213, 5, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠᐃΔ, 214, 6, 1],
		[1, ᐃ[153], 0, 216, 5, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], 0, 213, 8, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], 0, 211, 7, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], ⲆⲆΔ, 209, Δᐃᐃⵠ, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⵠⵠ, 208, 7, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], 0, 207, Δᐃⵠⵠᐃ, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 216, 6, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], ᐃⲆⵠᐃ, 216, 7, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], 2, 215, 7, 1],
		[ΔΔⵠ, ᐃ[153], 2, 215, 8, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⲆΔᐃ, 214, 8, ΔΔⵠ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 214, ᐃΔᐃᐃⲆ, Δⵠᐃ],
		[1, ᐃ[153], 2, 215, 5, ΔΔⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 214, ΔⲆⵠⵠ, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], ᐃⲆⵠᐃ, 213, ⵠⲆⵠⲆⵠ, 1],
		[Δⵠᐃ, ᐃ[153], 2, 213, ΔⵠᐃΔⲆ, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 212, ᐃΔᐃᐃⲆ, 1],
		[1, ᐃ[153], ΔΔⵠ, 211, 5, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠᐃᐃ, 209, 8, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 212, ⵠᐃΔᐃⲆ, 1],
		[ΔΔⵠ, ᐃ[153], 2, 211, 8, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃⵠΔⲆ, 210, ⲆⲆⲆᐃⲆ, 1],
		[1, ᐃ[153], 2, 209, 7, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 210, ᐃΔᐃᐃⲆ, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], 2, 210, ⵠΔⵠⵠⲆ, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 212, 6, 1],
		[Δⵠᐃ, ᐃ[153], 2, 212, 5, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 211, ⵠⲆⵠⲆⵠ, 1],
		[1, ᐃ[153], 2, 210, 5, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 209, ⵠΔⵠⵠⲆ, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 208, 6, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 208, ΔΔⵠⵠ, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], 2, 207, ᐃΔᐃᐃⲆ, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆⵠᐃ, 207, ⵠΔᐃᐃ, ΔΔⵠ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 207, ⵠⲆⲆⵠ, 1],
		[1, ᐃ[153], 2, 206, ⵠⲆⲆⲆ, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⵠᐃⲆ, 208, ⲆⲆⲆᐃⲆ, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠΔⵠ, 206, 6, 1],
		[1, ᐃ[153], ᐃⲆᐃ, 204, 8, ᐃⲆⲆ],
		[ⵠᐃᐃ, ᐃ[153], ᐃⲆΔ, 205, ⵠⲆⵠⲆⵠ, 1],
		[ᐃⲆⲆ, ᐃ[153], 0, 203, ⵠΔⲆᐃ, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], 0, 202, 7, 1],
		[ᐃⲆⲆ, ᐃ[153], ⲆⲆΔ, 199, Δᐃⵠⵠᐃ, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⵠⵠ, 200, 6, 1],
		[ⲆⵠⲆ, ᐃ[153], 0, 197, ⵠⵠⲆⲆⵠ, ᐃⲆⲆ],
		[1, ᐃ[153], 0, 195, 8, ⵠᐃᐃ],
		[1, ᐃ[153], Ⲇⵠᐃ, 194, ΔΔΔᐃΔ, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], ⲆⲆⵠ, 202, ⲆⲆᐃⲆⵠ, 1],
		[ⲆⲆⵠ, ᐃ[153], 1, 206, 7, ⵠᐃᐃ],
		[1, ᐃ[153], 1, 201, ⵠΔⲆᐃ, Δⵠᐃ],
		[1, ᐃ[153], ᐃⲆⲆ, 197, ⲆⲆⲆᐃⲆ, ⲆⵠⲆ],
		[1, ᐃ[153], Δⵠᐃ, 192, 7, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃⲆⲆ, 195, 5, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 205, 7, ΔΔⵠ],
		[1, ᐃ[153], 2, 205, Δᐃⵠⵠᐃ, ΔΔⵠ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 206, 8, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], ᐃᐃⲆⵠ, 204, 7, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 204, 6, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], 2, 204, 5, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 205, ⲆⵠⲆᐃ, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⲆΔᐃ, 203, 6, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], 2, 203, ⵠⲆᐃΔⵠ, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 203, 8, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], ᐃᐃⲆⵠ, 201, 8, 1],
		[Δⵠᐃ, ᐃ[153], ᐃᐃⲆⵠ, 200, Δᐃⵠⵠᐃ, 1],
		[ΔΔⵠ, ᐃ[153], 2, 200, 7, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 201, 7, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃⲆ, 201, 6, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], 2, 202, ᐃⵠΔⵠ, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⲆΔᐃ, 202, 6, ΔΔⵠ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 200, ⵠΔⲆᐃ, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], ᐃᐃⲆⵠ, 199, 5, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 197, Δᐃᐃⵠ, Δⵠᐃ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⲆΔᐃ, 196, ⵠΔⲆᐃ, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃⲆ, 198, 5, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 198, ⵠⲆⵠⲆⵠ, ΔΔⵠ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 199, ⵠΔΔⵠⲆ, 1],
		[Δⵠᐃ, ᐃ[153], 2, 199, ⵠⵠᐃⵠᐃ, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⵠΔⲆ, 198, 7, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], 2, 198, Δᐃⵠⵠᐃ, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 197, ⵠΔⵠᐃⲆ, 1],
		[ΔΔⵠ, ᐃ[153], 2, 196, ⲆᐃᐃΔΔ, 1],
		[Δⵠᐃ, ᐃ[153], 2, 196, ⲆⲆⲆᐃⲆ, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], ᐃⲆⵠᐃ, 196, ⵠⵠⲆⲆⵠ, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 195, 6, ΔΔⵠ],
		[1, ᐃ[153], 2, 195, ⵠΔⵠᐃⲆ, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 194, ᐃΔᐃᐃⲆ, 1],
		[1, ᐃ[153], 2, 193, 8, ⵠᐃᐃ],
		[ⵠᐃᐃ, ᐃ[153], 2, 194, Δᐃⵠⵠᐃ, 1],
		[1, ᐃ[153], 2, 193, 7, ΔΔⵠ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 193, ⵠⵠⲆⲆⵠ, 1],
		[1, ᐃ[153], 2, 193, 5, 1],
		[ⵠᐃᐃ, ᐃ[153], ᐃⵠΔⲆ, 194, 5, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], 0, 192, 5, ᐃⲆⲆ],
		[1, ᐃ[153], Δⵠⵠ, 191, 8, ⲆⲆⵠ],
		[1, ᐃ[153], 0, 190, ΔⲆⵠΔᐃ, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], 0, 188, ᐃΔᐃᐃⲆ, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠᐃΔ, 186, 8, ⲆⲆⵠ],
		[Δⵠᐃ, ᐃ[153], ⲆⲆᐃ, 186, 5, 1],
		[1, ᐃ[153], ⲆⲆᐃ, 184, ⵠⲆᐃΔⵠ, 1],
		[ⵠᐃᐃ, ᐃ[153], ᐃⲆΔ, 182, ⵠⵠᐃᐃⲆ, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠᐃΔ, 181, ⵠΔⵠⵠⲆ, ⲆⵠⲆ],
		[1, ᐃ[153], 1, 189, ⵠⵠᐃᐃⲆ, ᐃⲆⲆ],
		[1, ᐃ[153], 1, 183, ⲆⲆᐃⲆⵠ, Δⵠᐃ],
		[1, ᐃ[153], ⲆⵠⲆ, 188, ⵠΔⲆᐃ, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], 1, 185, 6, 1],
		[Δⵠᐃ, ᐃ[153], Δⵠᐃ, 180, 7, 1],
		[1, ᐃ[153], 1, 183, ⵠΔⲆᐃ, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], 1, 178, ᐃΔᐃⵠⲆ, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], 1, 177, ⵠΔⵠⵠⲆ, 1],
		[1, ᐃ[153], 1, 173, 7, ⲆⲆⵠ],
		[1, ᐃ[153], ⲆⲆⵠ, 171, ⵠⲆᐃΔⵠ, 1],
		[ⲆⵠⲆ, ᐃ[153], 0, 177, Δᐃⵠⵠᐃ, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], 0, 175, 7, 1],
		[ΔΔⵠ, ᐃ[153], 0, 179, ⵠⲆⲆⲆ, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆᐃ, 174, ᐃᐃᐃᐃ, 1],
		[1, ᐃ[153], ⵠᐃΔ, 176, ⵠᐃⲆᐃ, 1],
		[ⲆⵠⲆ, ᐃ[153], 0, 172, ⵠⵠᐃᐃⲆ, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], ⵠᐃΔ, 170, 8, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], ᐃⲆᐃ, 169, ⵠΔᐃᐃ, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 192, 6, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], 2, 192, 8, ⵠᐃᐃ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠΔⵠ, 191, ᐃΔᐃᐃⲆ, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 191, 6, ΔΔⵠ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 191, 5, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 190, ᐃᐃᐃᐃ, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 189, Δᐃᐃⵠ, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 189, ⵠⲆⵠⲆⵠ, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 189, 7, ΔΔⵠ],
		[1, ᐃ[153], 2, 190, ⵠⵠᐃⵠᐃ, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 190, ⵠᐃΔᐃⲆ, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 188, 8, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠΔⵠ, 187, 8, 1],
		[1, ᐃ[153], 2, 187, ᐃΔᐃᐃⲆ, 1],
		[1, ᐃ[153], 2, 187, ᐃⲆΔⵠΔ, ΔΔⵠ],
		[1, ᐃ[153], 2, 188, ᐃⲆΔⵠΔ, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 187, ⲆⵠⲆᐃ, 1],
		[1, ᐃ[153], 2, 186, ⵠⵠⲆᐃⲆ, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], 2, 186, 7, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 185, ⵠΔⵠᐃⲆ, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 185, 8, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 184, 8, 1],
		[1, ᐃ[153], 2, 183, ⲆᐃᐃΔΔ, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 183, ⵠΔΔⵠⲆ, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 184, ᐃⲆΔⵠΔ, 1],
		[ΔΔⵠ, ᐃ[153], 2, 184, 5, 1],
		[1, ᐃ[153], 2, 185, 5, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠΔⵠ, 182, ᐃⲆΔⵠΔ, 1],
		[1, ᐃ[153], 2, 182, 7, Δⵠᐃ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 181, ⵠⵠᐃⵠᐃ, 1],
		[ΔΔⵠ, ᐃ[153], 2, 181, ⲆⲆᐃⲆⵠ, 1],
		[ᐃⲆⲆ, ᐃ[153], ᐃⵠΔⲆ, 180, 8, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 179, ⵠⵠᐃᐃⲆ, 1],
		[1, ᐃ[153], 2, 182, ⵠⲆⲆⵠ, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 181, 5, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⲆΔᐃ, 180, ⵠΔⲆᐃ, 1],
		[Δⵠᐃ, ᐃ[153], 2, 180, 6, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], 2, 179, 6, Δⵠᐃ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 179, ⵠᐃⵠⲆⲆ, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 178, 7, ΔΔⵠ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 178, ⲆⲆⲆⵠΔ, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[153], 2, 178, ⵠᐃⲆᐃ, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], ⵠⵠΔⵠ, 177, 5, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], 2, 177, ⲆΔᐃᐃⲆ, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 176, ⵠΔⵠᐃⲆ, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 176, ΔΔΔᐃΔ, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 175, ⵠⵠⲆᐃⲆ, Δⵠᐃ],
		[ⵠᐃᐃ, ᐃ[153], 2, 175, ΔΔⵠⵠ, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆⵠᐃ, 176, 8, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠΔⵠ, 174, 8, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 175, ᐃΔᐃⵠⲆ, ΔΔⵠ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 173, ⵠᐃΔᐃⲆ, 1],
		[1, ᐃ[153], 2, 174, ⵠᐃⵠⲆⲆ, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 173, 6, 1],
		[1, ᐃ[153], 2, 174, ⵠⵠⲆᐃⲆ, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 172, ⵠᐃⲆᐃ, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], 2, 173, ⵠⲆⲆⵠ, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 172, ⵠΔᐃᐃ, 1],
		[1, ᐃ[153], 2, 172, ⵠᐃⵠⲆⲆ, 1],
		[1, ᐃ[153], 2, 171, ⵠⵠᐃᐃⲆ, 1],
		[Δⵠᐃ, ᐃ[153], 2, 170, ⲆᐃⲆⲆΔ, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 170, 6, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 170, ⲆⵠⲆᐃ, 1],
		[1, ᐃ[153], 2, 171, ⲆⵠⲆᐃ, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 171, ⵠⲆⵠⲆⵠ, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], 2, 169, 5, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠΔⵠ, 169, ⵠⵠᐃⵠᐃ, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], 2, 169, ⲆⲆᐃⲆⵠ, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], 1, 168, 7, Δⵠᐃ],
		[1, ᐃ[153], ⲆⵠⲆ, 166, ΔΔⵠⵠ, 1],
		[ΔΔⵠ, ᐃ[153], ⵠᐃᐃ, 164, ⵠⵠᐃⵠᐃ, 1],
		[ΔΔⵠ, ᐃ[153], Δⵠᐃ, 160, ⲆᐃⲆⲆΔ, 1],
		[1, ᐃ[153], ⲆⲆⵠ, 156, ᐃΔᐃⵠⲆ, ⲆⲆⵠ],
		[1, ᐃ[153], 0, 166, ⵠⵠᐃᐃⲆ, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], 0, 168, ᐃⵠΔⵠ, 1],
		[1, ᐃ[153], ⲆⲆᐃ, 164, ⵠΔΔⵠⲆ, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], 0, 162, ⲆᐃⲆⲆΔ, 1],
		[1, ᐃ[153], ᐃⲆᐃ, 158, 8, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], 0, 157, ᐃⵠⵠᐃⵠ, 1],
		[1, ᐃ[153], 0, 161, 5, 1],
		[ⲆⲆⵠ, ᐃ[153], ⲆⲆΔ, 159, 5, 1],
		[ΔΔⵠ, ᐃ[153], 0, 155, 7, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], 0, 154, 5, Δⵠᐃ],
		[1, ᐃ[153], Δⵠⵠ, 151, 7, 1],
		[1, ᐃ[153], 1, 153, 8, 1],
		[Δⵠᐃ, ᐃ[153], 1, 151, ⵠᐃⲆᐃ, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], ⵠⵠΔⵠ, 168, 6, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], 2, 168, ᐃΔᐃⵠⲆ, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], 2, 167, ⵠᐃΔᐃⲆ, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆⵠᐃ, 167, 7, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], 2, 167, 6, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 167, 5, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], ᐃⵠΔⲆ, 166, ⵠΔΔⵠⲆ, 1],
		[1, ᐃ[153], 2, 166, ⲆΔᐃᐃⲆ, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠΔⵠ, 165, 7, 1],
		[1, ᐃ[153], 2, 165, 6, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 165, ᐃⵠΔⵠ, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 164, ᐃⵠΔⵠ, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 163, ΔⲆⵠⵠ, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 162, ⵠⲆⲆⵠ, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 162, ᐃⲆΔⵠΔ, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⲆΔᐃ, 163, ᐃⲆΔⵠΔ, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], 2, 163, 7, 1],
		[ΔΔⵠ, ᐃ[153], 2, 163, ⲆⲆⲆᐃⲆ, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 164, 8, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 165, 8, ⵠᐃᐃ],
		[ⵠᐃᐃ, ᐃ[153], 2, 161, 8, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 162, 8, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 160, ⵠᐃΔᐃⲆ, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 159, ⵠᐃΔᐃⲆ, Δⵠᐃ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 159, ΔⵠᐃΔⲆ, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 159, ᐃⲆΔⵠΔ, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 160, ᐃⵠΔⵠ, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆⵠᐃ, 160, ⵠΔⵠⵠⲆ, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠΔⵠ, 161, 6, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 161, 7, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 157, 7, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], ᐃᐃⲆⵠ, 158, 7, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 158, 6, ΔΔⵠ],
		[1, ᐃ[153], 2, 158, Δᐃᐃⵠ, ΔΔⵠ],
		[1, ᐃ[153], 2, 155, 5, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠΔⵠ, 155, 6, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 156, 6, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[153], 2, 156, ΔⵠᐃΔⲆ, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃⲆⵠᐃ, 157, 8, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 155, 8, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 154, Δᐃⵠⵠᐃ, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⲆΔᐃ, 154, ⵠΔⵠᐃⲆ, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], 2, 154, ⵠΔΔⵠⲆ, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 152, 8, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], ᐃᐃⲆⵠ, 153, ⲆᐃⲆⲆΔ, 1],
		[1, ᐃ[153], 2, 153, ⵠⲆⵠⲆⵠ, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 153, 5, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], 2, 152, 5, 1],
		[1, ᐃ[153], 2, 152, ΔⲆⵠΔᐃ, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 152, 7, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 151, ⵠΔΔⵠⲆ, 1],
		[1, ᐃ[153], 2, 157, ΔΔⵠⵠ, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], 1, 156, 5, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], ⵠᐃΔ, 150, 5, 1],
		[1, ᐃ[153], Δⵠⵠ, 149, 7, ⵠᐃᐃ],
		[1, ᐃ[153], Ⲇⵠᐃ, 147, 8, ⲆⲆⵠ],
		[Δⵠᐃ, ᐃ[153], 0, 146, ᐃᐃᐃᐃ, 1],
		[1, ᐃ[153], 0, 144, 7, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], ᐃⲆΔ, 142, ⵠᐃⲆᐃ, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], ⲆⲆⵠ, 147, ⵠⲆⵠⲆⵠ, ⲆⵠⲆ],
		[1, ᐃ[153], ⲆⵠⲆ, 145, ⲆⲆᐃⲆⵠ, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃⲆⲆ, 144, 5, 1],
		[ΔΔⵠ, ᐃ[153], 2, 148, 5, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 149, ⵠⲆⲆⲆ, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 150, ᐃⲆΔⵠΔ, 1],
		[ΔΔⵠ, ᐃ[153], 2, 150, 8, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], ⵠⵠᐃⲆ, 151, 8, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 150, 7, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 149, Δᐃⵠⵠᐃ, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 148, ⲆⲆⲆᐃⲆ, 1],
		[1, ᐃ[153], 2, 149, 6, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 148, ΔΔΔᐃΔ, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 148, 7, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 147, 7, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 147, ᐃᐃᐃᐃ, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃᐃⲆⵠ, 146, 6, ΔΔⵠ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 146, ⵠΔⵠᐃⲆ, Δⵠᐃ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 146, 8, 1],
		[1, ᐃ[153], 2, 145, ᐃΔᐃᐃⲆ, ᐃⲆⲆ],
		[ⵠᐃᐃ, ᐃ[153], ᐃⵠΔⲆ, 145, ΔΔΔᐃΔ, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], 2, 145, 5, 1],
		[Δⵠᐃ, ᐃ[153], ᐃᐃⲆⵠ, 144, ΔΔΔᐃΔ, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 143, ⵠᐃⲆᐃ, 1],
		[1, ᐃ[153], 2, 143, 6, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠΔⵠ, 142, ⵠΔᐃᐃ, Δⵠᐃ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 141, 5, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 224, ⲆΔᐃⵠΔ, 1],
		[ᐃⲆⲆ, ᐃ[153], ⲆⲆᐃ, 224, 11, 1],
		[ΔΔⵠ, ᐃ[153], 0, 224, ΔᐃΔⲆΔ, 1],
		[1, ᐃ[153], 0, 224, 17, 1],
		[1, ᐃ[153], ⵠᐃΔ, 224, 19, ⵠᐃᐃ],
		[1, ᐃ[153], Ⲇⵠᐃ, 224, 22, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[153], 0, 224, 24, 1],
		[1, ᐃ[153], ⵠᐃΔ, 224, 29, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], ᐃⲆΔ, 224, 33, ⲆⵠⲆ],
		[1, ᐃ[153], 0, 224, 35, 1],
		[1, ᐃ[153], ⲆⲆΔ, 224, 38, ⵠᐃᐃ],
		[1, ᐃ[153], 1, 224, ᐃΔⲆΔⵠᐃⵠ, 1],
		[1, ᐃ[153], ⲆⲆⵠ, 224, 20, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], Δⵠᐃ, 224, 27, ΔΔⵠ],
		[1, ᐃ[153], 1, 224, 31, 1],
		[1, ᐃ[153], 1, 224, 36, 1],
		[Δⵠᐃ, ᐃ[153], 2, 224, 12, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], 2, 224, ΔᐃᐃΔᐃ, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 224, ⲆⵠᐃΔΔ, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠᐃⲆ, 224, ⲆⵠΔᐃⲆ, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 224, 21, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 224, 23, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 224, 25, Δⵠᐃ],
		[1, ᐃ[153], 2, 224, 26, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 224, 28, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 224, 30, 1],
		[1, ᐃ[153], 2, 224, 32, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], ⵠⵠΔⵠ, 224, 34, 1],
		[Δⵠᐃ, ᐃ[153], 2, 224, 37, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 224, 39, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠⵠ, 224, 41, 1],
		[ⵠᐃᐃ, ᐃ[153], 0, 224, 44, ⲆⲆⵠ],
		[1, ᐃ[153], 0, 224, 46, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], 0, 224, 52, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠᐃΔ, 224, 57, 1],
		[ᐃⲆⲆ, ᐃ[153], 1, 224, 47, 1],
		[1, ᐃ[153], 2, 224, 40, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⵠΔⲆ, 224, 42, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 224, 43, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠᐃⲆ, 224, 45, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 224, 49, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], ⲆⲆⵠ, 224, 50, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 224, 51, 1],
		[1, ᐃ[566], 3, 224, 54, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 224, 56, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], 2, 224, 58, 1],
		[ⵠᐃᐃ, ᐃ[153], ᐃⵠΔⲆ, 224, 61, 1],
		[1, ᐃ[153], Ⲇⵠᐃ, 224, 60, ⲆⲆⵠ],
		[1, ᐃ[153], 0, 224, 64, 1],
		[ⲆⲆⵠ, ᐃ[153], 0, 224, 66, 1],
		[1, ᐃ[153], 0, 224, 70, ᐃⲆⲆ],
		[1, ᐃ[153], 0, 224, 74, 1],
		[ⵠᐃᐃ, ᐃ[153], 0, 224, 77, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], 1, 224, 62, ΔΔⵠ],
		[1, ᐃ[153], ⵠᐃᐃ, 224, 68, ⲆⵠⲆ],
		[1, ᐃ[153], 1, 224, 72, 1],
		[1, ᐃ[153], 1, 224, 76, 1],
		[ⲆⵠⲆ, ᐃ[153], 1, 224, 80, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], ⲆⵠⲆ, 224, 83, 1],
		[Δⵠᐃ, ᐃ[153], Δⵠᐃ, 224, 91, ΔΔⵠ],
		[ⲆⵠⲆ, ᐃ[153], 1, 224, 95, 1],
		[1, ᐃ[153], 1, 224, 97, 1],
		[1, ᐃ[153], 0, 224, 85, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], 0, 224, 88, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃ, 224, 93, 1],
		[ⵠᐃᐃ, ᐃ[153], ⲆⲆᐃ, 224, 98, ΔΔⵠ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 224, 59, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 224, 63, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⵠΔⲆ, 224, 65, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⵠΔⵠ, 224, 67, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 224, 69, Δⵠᐃ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 224, 71, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 224, 73, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], 2, 224, 75, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⵠᐃ, 224, 78, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⵠΔⲆ, 224, 79, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃⵠΔⲆ, 224, 81, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 224, 82, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 224, 84, 1],
		[1, ᐃ[153], 2, 224, 86, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⵠᐃ, 224, 87, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], 2, 224, 89, 1],
		[1, ᐃ[153], 2, 224, 90, 1],
		[1, ᐃ[153], 2, 224, 92, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 224, 94, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], 2, 224, 96, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 224, 99, 1],
		[1, ᐃ[153], 2, 224, 100, ᐃⲆⲆ],
		[1, ᐃ[153], 0, 224, 101, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠᐃᐃ, 224, 103, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 224, 102, ⲆⵠⲆ],
		[1, ᐃ[153], 0, 222, ᐃⲆᐃⲆⲆ, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠᐃⲆ, 223, ᐃΔⵠᐃᐃ, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠΔⵠ, 222, 9, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⵠΔⲆ, 221, ⲆⲆⵠⵠᐃ, 1],
		[1, ᐃ[153], 2, 223, 10, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], ⵠⲆΔᐃ, 223, 11, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], ᐃᐃⲆⵠ, 223, ᐃⲆⲆΔⵠ, 1],
		[1, ᐃ[153], ⵠᐃⵠⲆ, 223, 13, Δⵠᐃ],
		[1, ᐃ[153], ⲆΔⲆᐃ, 222, ᐃⵠΔⲆⲆ, 1],
		[ⲆⲆⵠ, ᐃ[153], ΔᐃΔⲆ, 220, 9, 1],
		[ⵠᐃᐃ, ᐃ[153], 3, 219, 9, ᐃⲆⲆ],
		[ⵠᐃᐃ, ᐃ[153], 3, 221, 10, 1],
		[1, ᐃ[538], ᐃᐃⲆⵠ, 219, ⲆᐃᐃⵠΔΔᐃ, ⵠᐃᐃ],
		[1, ᐃ[538], ΔΔⵠ, 218, 18, 1],
		[1, ᐃ[538], 1, 214, ⲆᐃᐃⵠΔΔᐃ, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃⲆΔ, 221, 20, 1],
		[1, ᐃ[153], 1, 223, 18, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 222, 19, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 223, 19, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⵠΔⲆ, 223, 20, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 222, ⲆΔⲆⲆⵠ, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 220, 21, 1],
		[1, ᐃ[153], ⵠⵠⵠ, 219, 21, 1],
		[Δⵠᐃ, ᐃ[153], ⲆΔⲆᐃ, 221, 21, 1],
		[1, ᐃ[153], ⵠᐃⵠⲆ, 218, 21, 1],
		[Δⵠᐃ, ᐃ[153], 3, 222, 21, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], ΔᐃΔⲆ, 220, 22, 1],
		[ⲆⲆⵠ, ᐃ[153], ⲆⲆΔΔ, 219, 22, 1],
		[1, ᐃ[153], ⲆΔⲆⲆ, 221, 22, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], ⵠᐃΔ, 211, ΔᐃΔⲆⵠ, 1],
		[Δⵠᐃ, ᐃ[153], 1, 211, ΔΔⵠⲆⵠ, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], Δⵠᐃ, 210, ⲆⵠⲆᐃⵠ, 1],
		[ⵠᐃᐃ, ᐃ[153], ⲆⲆᐃ, 211, 13, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], 2, 210, 9, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 210, ᐃᐃᐃⲆⵠ, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], 2, 210, 11, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃᐃⲆⵠ, 212, ⵠⵠⵠᐃⵠ, 1],
		[Δⵠᐃ, ᐃ[153], 2, 210, 13, 1],
		[ᐃⲆⲆ, ᐃ[153], ᐃⵠΔⲆ, 211, ⵠᐃⲆΔⵠ, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 211, 11, 1],
		[1, ᐃ[153], 2, 211, 14, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 212, 15, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 210, 14, ⵠᐃᐃ],
		[1, ᐃ[153], 3, 211, ⵠⵠⲆΔⲆ, ΔΔⵠ],
		[1, ᐃ[153], ⵠⲆᐃΔ, 213, 9, 1],
		[1, ᐃ[153], ᐃΔᐃⲆ, 212, 10, 1],
		[1, ᐃ[153], ⵠⵠⲆⲆ, 223, 21, 1],
		[1, ᐃ[153], 3, 209, ⲆⲆⵠⵠᐃ, 1],
		[1, ᐃ[566], 3, 223, 22, ᐃⲆⲆ],
		[1, ᐃ[566], 3, 221, 23, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[566], 3, 207, ᐃΔⵠⲆⲆ, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[566], ⲆΔⲆᐃ, 209, 10, 1],
		[ⲆⵠⲆ, ᐃ[566], ᐃⲆᐃ, 209, 12, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[566], 4, 209, Δⵠⵠᐃᐃ, ᐃⲆⲆ],
		[1, ᐃ[566], ΔⲆΔⲆ, 219, 23, 1],
		[1, ᐃ[566], ⲆⵠⵠⲆ, 210, ⲆⲆᐃⵠⲆⵠⵠ, ᐃⲆⲆ],
		[ⵠᐃᐃ, ᐃ[566], 3, 217, 22, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[566], ΔⲆΔⲆ, 212, 16, ⲆⲆⵠ],
		[1, ᐃ[566], 2, 214, ΔᐃᐃΔΔ, ⲆⵠⲆ],
		[1, ᐃ[566], 4, 213, ⵠⲆΔⲆⲆ, 1],
		[1, ᐃ[566], 1, 212, 21, ⲆⲆⵠ],
		[1, ᐃ[566], ᐃⵠⵠⲆ, 215, ⲆⲆΔⵠⲆ, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[566], 2, 216, 17, ᐃⲆⲆ],
		[1, ᐃ[566], ᐃᐃᐃᐃ, 216, ⲆⵠΔᐃΔ, ⵠᐃᐃ],
		[ⵠᐃᐃ, ᐃ[566], 5, 216, ⲆᐃⲆⵠⵠ, 1],
		[1, ᐃ[566], ⲆⲆⵠ, 217, 16, ᐃⲆⲆ],
		[1, ᐃ[566], ⵠⲆΔᐃ, 218, ΔⵠⲆᐃⲆ, 1],
		[ⲆⲆⵠ, ᐃ[566], ⵠⲆΔᐃ, 216, 14, ΔΔⵠ],
		[1, ᐃ[566], 2, 219, ⲆⵠΔᐃΔ, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[566], 5, 220, ⲆⵠΔᐃΔ, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[566], 5, 216, 13, 1],
		[ΔΔⵠ, ᐃ[566], 4, 217, ᐃⵠᐃᐃΔ, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠᐃΔ, 211, 44, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[153], ⵠᐃᐃ, 212, 45, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], 2, 213, 45, ᐃⲆⲆ],
		[ⵠᐃᐃ, ᐃ[153], 0, 214, 46, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠΔⵠ, 215, 46, ⵠᐃᐃ],
		[1, ᐃ[153], ⲆⲆΔΔ, 213, 46, ⲆⲆⵠ],
		[1, ᐃ[153], 3, 214, 47, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠⲆᐃ, 214, 48, 1],
		[1, ᐃ[153], ⵠⲆᐃΔ, 216, 46, ⲆⲆⵠ],
		[1, ᐃ[153], 0, 208, ⲆΔⲆⲆⵠ, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], 0, 210, 21, ⲆⵠⲆ],
		[1, ᐃ[153], ⲆⲆᐃ, 212, 23, 1],
		[ⲆⵠⲆ, ᐃ[153], ⲆⲆΔ, 213, 25, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 213, 24, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 211, 22, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 210, ⲆΔⲆⲆⵠ, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 209, 21, ΔΔⵠ],
		[1, ᐃ[153], 2, 209, ⵠⲆΔⲆⲆ, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 211, 21, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 212, 22, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], ⵠⲆΔᐃ, 213, 23, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], 3, 213, 26, ⲆⵠⲆ],
		[1, ᐃ[153], ⲆⲆΔΔ, 207, ⲆⲆⲆⵠⵠ, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[566], 4, 192, 33, 1],
		[ᐃⲆⲆ, ᐃ[566], 4, 191, 34, 1],
		[ⵠᐃᐃ, ᐃ[566], ᐃⵠⵠⲆ, 190, 35, 1],
		[1, ᐃ[566], 3, 189, 37, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[566], ⲆⲆΔΔ, 188, 39, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[566], ΔⲆⲆⲆ, 186, 40, 1],
		[1, ᐃ[566], ΔⲆⲆⲆ, 185, 39, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[566], ΔΔⲆΔ, 184, 39, 1],
		[1, ᐃ[566], 2, 183, 39, ⵠᐃᐃ],
		[1, ᐃ[566], 1, 182, 40, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[566], ⵠⵠΔⵠ, 181, 41, Δⵠᐃ],
		[1, ᐃ[566], 5, 180, 41, 1],
		[1, ᐃ[566], 5, 179, 41, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[566], 4, 192, 28, 1],
		[ΔΔⵠ, ᐃ[566], 4, 191, 28, 1],
		[ⲆⲆⵠ, ᐃ[566], 4, 190, 27, 1],
		[ⲆⲆⵠ, ᐃ[566], 3, 188, 27, 1],
		[ⲆⵠⲆ, ᐃ[566], 4, 187, 26, 1],
		[Δⵠᐃ, ᐃ[566], 4, 186, 25, 1],
		[1, ᐃ[566], 4, 185, 25, 1],
		[ⲆⲆⵠ, ᐃ[566], 4, 184, 24, 1],
		[ⵠᐃᐃ, ᐃ[566], Δᐃᐃⵠ, 184, 23, 1],
		[1, ᐃ[566], 2, 184, 22, 1],
		[1, ᐃ[566], 5, 184, 21, ⲆⲆⵠ],
		[1, ᐃ[566], ⵠᐃᐃ, 183, 20, ⵠᐃᐃ],
		[1, ᐃ[566], ᐃᐃᐃᐃ, 182, 20, ⵠᐃᐃ],
		[1, ᐃ[566], ⵠⵠᐃⲆ, 181, ᐃᐃⲆⵠΔ, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[566], ⵠⲆⲆⲆ, 180, ⲆⲆⲆⵠⵠ, Δⵠᐃ],
		[1, ᐃ[566], 2, 179, 20, 1],
		[ΔΔⵠ, ᐃ[566], 4, 178, ⲆⵠⲆⵠⲆ, ⵠᐃᐃ],
		[1, ᐃ[566], 3, 178, ⵠⲆΔΔⵠ, ⲆⵠⲆ],
		[1, ᐃ[566], 3, 176, 18, 1],
		[Δⵠᐃ, ᐃ[153], 0, 177, ⵠΔΔΔΔⵠΔ, 1],
		[1, ᐃ[153], 0, 175, ᐃⲆΔᐃΔ, ᐃⲆⲆ],
		[1, ᐃ[153], 0, 180, 16, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[153], ⲆⲆΔ, 174, 19, ⵠᐃᐃ],
		[1, ᐃ[153], 0, 172, ⲆⲆⵠΔΔ, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], Δⵠᐃ, 175, 15, ⲆⲆⵠ],
		[1, ᐃ[153], 1, 172, ⲆᐃΔΔᐃ, ⲆⲆⵠ],
		[1, ᐃ[153], ⲆⲆⵠ, 181, 15, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 179, ⵠΔΔΔΔⵠΔ, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠⲆΔᐃ, 177, ΔⵠⲆᐃⲆ, 1],
		[1, ᐃ[153], 2, 176, 16, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 174, 18, 1],
		[1, ᐃ[153], 2, 173, ⲆⵠᐃᐃⲆ, 1],
		[Δⵠᐃ, ᐃ[153], ᐃⵠΔⲆ, 172, ᐃΔΔⵠΔ, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 173, 18, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 173, 17, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 174, 17, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠᐃⲆ, 174, 16, 1],
		[Δⵠᐃ, ᐃ[153], ᐃᐃⲆⵠ, 175, ⲆⲆᐃΔⵠ, 1],
		[Δⵠᐃ, ᐃ[153], 2, 176, ⲆⲆⲆΔⵠ, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 178, 15, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 178, 16, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 179, 16, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], 2, 180, ᐃⵠᐃᐃΔ, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[153], 2, 181, 16, 1],
		[1, ᐃ[153], ⵠⵠⲆⲆ, 182, ᐃΔᐃⲆⲆ, 1],
		[1, ᐃ[153], ⵠⵠⲆᐃ, 172, 21, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[566], ⵠᐃᐃ, 175, ⲆⵠⲆⵠⲆ, 1],
		[1, ᐃ[566], 2, 174, ⲆⲆⲆⲆᐃ, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[566], 2, 173, 20, ᐃⲆⲆ],
		[ⵠᐃᐃ, ᐃ[566], 1, 180, 17, 1],
		[1, ᐃ[566], ᐃᐃⲆⵠ, 181, ⲆⵠⲆⲆΔΔΔ, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[566], 3, 191, ᐃᐃⲆⵠΔ, 1],
		[1, "s", ⵠᐃⵠ, 217, 30, 1],
		[ΔΔⵠ, "s", 0, 208, 35, 1],
		[1, "s", 0, 204, 24, ⲆⵠⲆ],
		[ⲆⵠⲆ, "s", ᐃⲆⲆ, 218, 32, 1],
		[ⲆⵠⲆ, "s", 1, 207, 34, ⲆⲆⵠ],
		[ⵠᐃᐃ, "s", 1, 202, 23, 1],
		[1, "s", ⲆⲆⵠ, 195, ⲆⲆΔᐃᐃ, ΔΔⵠ],
		[ⵠᐃᐃ, "s", ᐃⲆⵠᐃ, 222, 28, 1],
		[1, "s", 2, 212, 38, 1],
		[1, "s", ᐃⲆⵠᐃ, 207, 23, 1],
		[1, "s", 2, 202, 12, ᐃⲆⲆ],
		[1, "s", ⵠⲆΔᐃ, 195, ᐃⵠⲆⲆΔ, ΔΔⵠ],
		[ᐃⲆⲆ, "s", 1, 191, 12, ⵠᐃᐃ],
		[1, "s", 0, 187, ⲆⲆᐃΔⵠ, Δⵠᐃ],
		[ᐃⲆⲆ, "s", 2, 188, ⲆⵠΔᐃΔ, ⲆⲆⵠ],
		[ⲆⲆⵠ, "s", ⲆⲆⵠ, 186, 14, ΔΔⵠ],
		[1, "s", 1, 201, 16, 1],
		[ⲆⲆⵠ, "g", 1, 216, 31, ᐃⲆⲆ],
		[1, "g", 0, 200, ⲆⲆⲆΔⵠ, 1],
		[1, "g", ⵠᐃⵠ, 202, 40, ⵠᐃᐃ],
		[Δⵠᐃ, "g", 0, 189, 32, ᐃⲆⲆ],
		[ⲆⵠⲆ, "g", Δⵠⵠ, 204, 28, ⲆⲆⵠ],
		[ⲆⲆⵠ, "g", ⵠᐃⵠ, 196, 24, 1],
		[ΔΔⵠ, "g", 2, 198, 37, ⲆⵠⲆ],
		[1, "s", 0, 193, 39, 1],
		[ⲆⲆⵠ, "s", ⲆⲆΔ, 201, 45, ⲆⲆⵠ],
		[1, "a", ᐃⲆΔ, 210, 29, 1],
		[Δⵠᐃ, "a", ᐃⲆᐃ, 200, 20, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], 0, 200, 34, ᐃⲆⲆ],
		[1, ᐃ[153], ⲆⲆΔ, 193, 27, 1],
		[Δⵠᐃ, ᐃ[153], ᐃⲆⲆ, 203, 30, 1],
		[ⲆⲆⵠ, ᐃ[153], 1, 191, 31, 1],
		[1, ᐃ[153], 2, 202, 32, 1],
		[1, ᐃ[153], 2, 194, 26, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], ᐃᐃⲆⵠ, 192, 27, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 192, 32, 1],
		[1, ᐃ[153], 2, 203, 31, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], 2, 202, 31, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 202, 30, 1],
		[ΔΔⵠ, ᐃ[153], 3, 202, 29, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⲆᐃΔ, 201, 32, 1],
		[1, ᐃ[153], ⵠᐃᐃΔ, 199, 35, 1],
		[1, ᐃ[153], ⲆⲆᐃ, 193, 34, ΔΔⵠ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 194, 34, 1],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠᐃⲆ, 198, 35, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃΔᐃⲆ, 199, 34, 1],
		[Δⵠᐃ, ᐃ[153], 3, 191, 29, ⲆⲆⵠ],
		[1, ᐃ[153], 0, 191, 30, 1],
		[Δⵠᐃ, ᐃ[153], 3, 190, 29, 1],
		[ΔΔⵠ, ᐃ[566], ⵠᐃᐃΔ, 180, 69, 1],
		[Δⵠᐃ, ᐃ[566], ⵠᐃⵠⲆ, 182, 68, 1],
		[1, ᐃ[566], 3, 184, 68, ⲆⲆⵠ],
		[1, ᐃ[566], ΔᐃΔⲆ, 186, 70, 1],
		[1, ᐃ[566], ⲆⵠⵠⲆ, 184, 72, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[566], ⵠⵠⲆᐃ, 182, 72, 1],
		[1, ᐃ[566], ⲆΔⲆᐃ, 180, 71, 1],
		[1, ᐃ[153], ⵠⵠⵠ, 186, 68, ⲆⵠⲆ],
		[1, ᐃ[153], 0, 187, 70, 1],
		[1, ᐃ[153], 0, 183, 74, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], 0, 178, 70, ΔΔⵠ],
		[1, ᐃ[153], 2, 182, 66, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⵠΔⲆ, 182, 74, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], 2, 181, 73, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 180, 74, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 181, 74, 1],
		[ΔΔⵠ, ᐃ[566], 0, 184, 70, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[566], ⲆΔⲆⲆ, 182, 70, ΔΔⵠ],
		[1, ᐃ[153], 2, 181, 67, ᐃⲆⲆ],
		[1, ᐃ[153], ΔᐃΔⲆ, 184, 67, 1],
		[1, ᐃ[153], 3, 182, 67, 1],
		[ⲆⵠⲆ, ᐃ[566], ΔᐃᐃΔ, 187, 69, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[566], Δⵠᐃ, 188, 68, 1],
		[ⲆⵠⲆ, ᐃ[566], ΔⲆⲆⲆ, 189, 68, ΔΔⵠ],
		[1, ᐃ[566], 2, 190, 68, ᐃⲆⲆ],
		[1, ᐃ[566], 1, 191, 68, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[566], 4, 192, 68, 1],
		[1, ᐃ[566], 2, 193, 68, 1],
		[1, ᐃ[566], 4, 194, 69, 1],
		[ⵠᐃᐃ, ᐃ[566], 2, 194, 70, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[566], 5, 195, 71, 1],
		[1, ᐃ[566], 1, 194, 71, 1],
		[1, ᐃ[566], 2, 196, 72, 1],
		[ⵠᐃᐃ, ᐃ[566], ΔⲆΔⲆ, 196, 71, ᐃⲆⲆ],
		[1, ᐃ[566], Δⵠᐃ, 197, 73, ΔΔⵠ],
		[1, ᐃ[566], 5, 196, 73, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[566], 5, 198, 73, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[566], ⲆⲆΔΔ, 201, 73, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[566], ⵠⲆᐃΔ, 203, 72, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[566], ⲆⲆⲆΔ, 199, 73, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[566], ⵠᐃᐃ, 205, 72, ᐃⲆⲆ],
		[1, ᐃ[566], ⵠⲆΔᐃ, 206, 72, ⲆⵠⲆ],
		[1, ᐃ[566], 5, 207, 72, 1],
		[1, ᐃ[566], 1, 208, 72, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[566], ⲆⵠⲆ, 209, 73, 1],
		[ⲆⵠⲆ, ᐃ[566], 2, 209, 74, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[566], ⲆⵠⲆᐃ, 211, 76, ⲆⵠⲆ],
		[1, ᐃ[566], 4, 210, 75, ⵠᐃᐃ],
		[1, ᐃ[566], 5, 212, 76, ⲆⲆⵠ],
		[1, ᐃ[566], 4, 202, 75, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[566], 2, 203, 76, 1],
		[ⲆⵠⲆ, ᐃ[566], ΔΔⲆΔ, 204, 77, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[566], ⵠⲆΔᐃ, 204, 78, ΔΔⵠ],
		[1, ᐃ[566], ᐃⵠΔⲆ, 204, 79, 1],
		[ΔΔⵠ, ᐃ[566], ⲆⵠⲆᐃ, 204, 80, 1],
		[ⲆⲆⵠ, ᐃ[153], 0, 202, 74, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⲆ, 203, 74, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], 2, 204, 73, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 203, 75, ΔΔⵠ],
		[1, ᐃ[153], ⵠⵠⲆᐃ, 204, 76, 1],
		[ΔΔⵠ, ᐃ[153], ⵠᐃⵠⲆ, 205, 73, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠⵠ, 205, 74, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 204, 74, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 204, 75, Δⵠᐃ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 206, 73, 1],
		[1, ᐃ[153], ⲆΔⲆⲆ, 207, 73, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 205, 76, Δⵠᐃ],
		[ⵠᐃᐃ, ᐃ[153], 3, 205, 77, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[566], 3, 183, 66, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[566], 4, 183, 65, ᐃⲆⲆ],
		[1, ᐃ[566], ⵠΔᐃⲆ, 184, 64, 1],
		[1, ᐃ[566], ΔⲆΔⲆ, 185, 63, ⲆⵠⲆ],
		[1, ᐃ[566], ΔΔⵠ, 185, 62, 1],
		[1, ᐃ[566], ᐃⵠΔⲆ, 185, 61, 1],
		[Δⵠᐃ, ᐃ[566], 2, 185, 60, 1],
		[1, ᐃ[566], 4, 186, 59, 1],
		[1, ᐃ[566], 1, 187, 58, ΔΔⵠ],
		[1, ᐃ[566], 2, 187, 57, ⵠᐃᐃ],
		[1, ᐃ[566], 2, 187, 56, ᐃⲆⲆ],
		[Δⵠᐃ, "s", ⵠᐃΔ, 191, 60, 1],
		[1, "s", 1, 195, 58, ⲆⲆⵠ],
		[1, "s", 1, 199, 46, ⲆⲆⵠ],
		[1, "s", ᐃⲆⵠᐃ, 202, 49, 1],
		[ⲆⲆⵠ, "g", ᐃⲆⵠᐃ, 197, 55, Δⵠᐃ],
		[ⵠᐃᐃ, "g", ᐃⲆⲆ, 213, 55, ⵠᐃᐃ],
		[ᐃⲆⲆ, "g", ⵠᐃⵠ, 192, 45, ΔΔⵠ],
		[1, "g", ⵠᐃⵠ, 210, 61, 1],
		[1, "g", 0, 182, 52, ᐃⲆⲆ],
		[ⵠᐃᐃ, "g", 0, 180, 35, 1],
		[Δⵠᐃ, "g", 0, 175, 25, 1],
		[1, "g", 0, 168, 32, ΔΔⵠ],
		[1, "g", 1, 179, 28, ᐃⲆⲆ],
		[1, "g", 1, 161, 16, 1],
		[ⲆⲆⵠ, "g", 2, 172, ⲆⵠⲆᐃⵠ, ᐃⲆⲆ],
		[1, "g", 2, 160, 25, 1],
		[ᐃⲆⲆ, "g", 2, 157, 39, 1],
		[1, "g", ᐃⲆⵠᐃ, 170, 43, ⲆⵠⲆ],
		[ᐃⲆⲆ, "g", 2, 202, 67, 1],
		[ⲆⲆⵠ, "g", 2, 217, 72, ᐃⲆⲆ],
		[ᐃⲆⲆ, "g", 2, 214, 82, ⲆⵠⲆ],
		[1, "g", ⵠⵠΔⵠ, 193, 86, 1],
		[1, "g", 2, 168, 60, ᐃⲆⲆ],
		[1, "g", 2, 165, 78, ⲆⲆⵠ],
		[1, "g", ᐃⵠΔⲆ, 173, 88, 1],
		[1, "s", 0, 185, 51, ⲆⵠⲆ],
		[1, "s", ⵠⵠᐃ, 175, 44, Δⵠᐃ],
		[1, "s", 0, 165, 50, 1],
		[1, "s", 0, 160, 32, 1],
		[1, "s", 1, 162, 30, 1],
		[1, "s", ΔΔⵠ, 176, 28, 1],
		[Δⵠᐃ, "s", 1, 154, 17, 1],
		[Δⵠᐃ, "s", ⲆⵠⲆ, 184, 49, ΔΔⵠ],
		[1, "s", ⵠᐃᐃ, 192, 62, Δⵠᐃ],
		[ⲆⲆⵠ, "s", 1, 216, 62, 1],
		[1, "s", 1, 204, 65, 1],
		[1, "s", 1, 217, 79, 1],
		[ⲆⵠⲆ, "s", ⲆⲆⵠ, 206, 86, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[566], ⵠⲆᐃΔ, 211, 69, 1],
		[1, ᐃ[566], 4, 215, 69, ᐃⲆⲆ],
		[1, ᐃ[566], ΔΔⵠⵠ, 201, 81, 1],
		[ⲆⲆⵠ, ᐃ[566], 1, 207, 83, ΔΔⵠ],
		[1, ᐃ[566], ᐃΔᐃⲆ, 173, 32, 1],
		[ⲆⵠⲆ, ᐃ[566], 2, 181, 45, ᐃⲆⲆ],
		[1, ᐃ[566], ⲆⲆⵠ, 178, 38, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[566], ⵠᐃᐃ, 213, 69, 1],
		[1, ᐃ[566], ⵠⲆⲆⵠ, 214, 69, 1],
		[ᐃⲆⲆ, ᐃ[566], ΔᐃᐃΔ, 216, 68, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[566], ⵠᐃΔ, 191, 78, Δⵠᐃ],
		[1, ᐃ[566], 3, 191, 80, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[566], ΔᐃΔⲆ, 189, 79, ΔΔⵠ],
		[Δⵠᐃ, "g", ᐃⵠΔⲆ, 150, 29, 1],
		[1, "g", ⵠⵠΔⵠ, 154, 67, ᐃⲆⲆ],
		[ΔΔⵠ, "g", 2, 202, 94, 1],
		[ΔΔⵠ, "g", 2, 155, 90, 1],
		[1, "s", 2, 215, 80, 1],
		[ᐃⲆⲆ, "s", ⵠⵠΔⵠ, 204, 62, ⵠᐃᐃ],
		[ⲆⵠⲆ, "s", ᐃⵠΔⲆ, 218, 60, 1],
		[Δⵠᐃ, "s", 2, 194, 62, Δⵠᐃ],
		[Δⵠᐃ, "s", 0, 216, 86, ᐃⲆⲆ],
		[ⲆⵠⲆ, "s", 0, 211, 93, 1],
		[ᐃⲆⲆ, ᐃ[566], 0, 216, 92, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[566], 0, 151, 96, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[566], 1, 155, 95, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[566], ΔΔⲆΔ, 214, 88, ⲆⵠⲆ],
		[1, "s", ⵠⵠⵠ, 205, 99, ΔΔⵠ],
		[1, "s", 1, 217, 88, 1],
		[Δⵠᐃ, "s", ⲆⵠⲆ, 213, 94, ΔΔⵠ],
		[ΔΔⵠ, "s", 1, 202, 97, 1],
		[ⲆⲆⵠ, "s", Δⵠⵠ, 199, 85, 1],
		[1, "s", ⵠᐃⵠ, 190, 93, 1],
		[1, "s", 1, 199, 87, ᐃⲆⲆ],
		[ⲆⵠⲆ, "s", ΔΔⵠ, 192, 97, ᐃⲆⲆ],
		[1, ᐃ[566], ⵠᐃᐃΔ, 196, 92, 1],
		[1, ᐃ[566], ᐃⲆⲆ, 199, 91, 1],
		[1, ᐃ[566], Δⵠᐃ, 220, 91, 1],
		[ΔΔⵠ, ᐃ[566], 0, 219, 77, ⵠᐃᐃ],
		[1, ᐃ[566], ⲆⲆᐃ, 200, 59, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[566], ⲆΔⲆⲆ, 188, 87, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[566], 0, 183, 94, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[566], ⲆⲆⵠ, 187, 83, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[566], 1, 175, 82, 1],
		[1, ᐃ[566], 1, 172, 94, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[566], ᐃᐃⲆⵠ, 179, 78, 1],
		[ⲆⵠⲆ, ᐃ[566], 0, 166, 87, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[566], 3, 159, 80, ⵠᐃᐃ],
		[1, ᐃ[566], 3, 167, 15, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[566], 1, 164, ⵠΔⲆᐃⵠ, 1],
		[1, ᐃ[566], 1, 172, 28, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[566], 3, 153, 24, 1],
		[1, ᐃ[566], ΔⲆⲆⲆ, 164, 91, 1],
		[Δⵠᐃ, ᐃ[566], 4, 156, 82, ΔΔⵠ],
		[1, ᐃ[566], ΔᐃᐃΔ, 149, 90, ⲆⲆⵠ],
		[1, "s", ⵠⵠⵠ, 178, 85, ⲆⲆⵠ],
		[ⲆⵠⲆ, "s", 1, 180, 85, ᐃⲆⲆ],
		[1, "s", Ⲇⵠᐃ, 163, 96, 1],
		[ⵠᐃᐃ, "s", ⵠᐃΔ, 159, 86, ⵠᐃᐃ],
		[ΔΔⵠ, "s", 0, 185, 78, Δⵠᐃ],
		[1, "s", ΔΔⵠ, 194, 75, 1],
		[1, "s", 2, 195, 76, 1],
		[ᐃⲆⲆ, "s", ᐃⲆⵠᐃ, 181, 78, ⵠᐃᐃ],
		[1, "s", ⵠⵠᐃⲆ, 161, 87, 1],
		[1, "s", 2, 166, 97, 1],
		[1, "s", ⵠⲆΔᐃ, 177, 97, 1],
		[1, "s", ⵠⵠⵠ, 149, 85, 1],
		[ΔΔⵠ, "s", ⵠᐃᐃ, 151, 83, 1],
		[1, "s", 1, 175, 74, 1],
		[ⵠᐃᐃ, "s", 0, 174, 72, ⲆⲆⵠ],
		[1, ᐃ[566], 3, 168, 71, 1],
		[1, ᐃ[566], 3, 180, 60, 1],
		[1, "s", ⲆⲆΔ, 156, 63, 1],
		[1, "s", 0, 151, 47, ᐃⲆⲆ],
		[1, "s", ΔΔⵠ, 158, 64, 1],
		[1, "s", 1, 161, 75, 1],
		[Δⵠᐃ, "s", ⵠᐃᐃ, 162, 51, 1],
		[Δⵠᐃ, "s", ΔΔⵠ, 175, 45, ΔΔⵠ],
		[ⵠᐃᐃ, "s", ⵠᐃᐃ, 152, 47, ⲆⲆⵠ],
		[ⵠᐃᐃ, "s", ΔΔⵠ, 159, 33, 1],
		[1, "s", Δⵠᐃ, 152, 18, 1],
		[ᐃⲆⲆ, "s", ⲆⲆΔ, 151, ⵠⵠΔΔΔᐃⵠ, 1],
		[ⵠᐃᐃ, "s", 0, 166, 22, 1],
		[ⲆⵠⲆ, "s", ⵠᐃⵠ, 170, 63, 1],
		[1, "s", 2, 172, 62, 1],
		[ⲆⵠⲆ, "s", 2, 155, 61, ⲆⵠⲆ],
		[ⲆⵠⲆ, "s", 2, 167, 51, Δⵠᐃ],
		[1, "s", ⵠⲆΔᐃ, 150, 52, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[566], ΔⲆΔⲆ, 178, 69, 1],
		[1, ᐃ[566], ΔⲆⲆⲆ, 177, 68, 1],
		[ᐃⲆⲆ, ᐃ[566], 3, 176, 67, ⲆⵠⲆ],
		[1, ᐃ[566], ⵠⵠⵠ, 174, 67, 1],
		[1, ᐃ[566], ⲆⵠⲆ, 172, 67, 1],
		[ⲆⵠⲆ, ᐃ[566], 4, 171, 67, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[566], 4, 170, 66, 1],
		[1, ᐃ[566], 4, 169, 66, 1],
		[1, ᐃ[566], ΔΔⵠ, 168, 66, ΔΔⵠ],
		[ⲆⵠⲆ, ᐃ[566], 4, 167, 67, Δⵠᐃ],
		[1, ᐃ[566], 1, 166, 67, 1],
		[1, ᐃ[566], ᐃⵠⵠⲆ, 165, 68, ⲆⲆⵠ],
		[1, ᐃ[566], ⲆⵠⲆᐃ, 164, 68, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[566], 2, 163, 68, 1],
		[1, ᐃ[566], 5, 162, 68, ΔΔⵠ],
		[1, ᐃ[566], ᐃⵠΔⲆ, 161, 68, 1],
		[ΔΔⵠ, ᐃ[566], 3, 153, 72, 1],
		[ᐃⲆⲆ, ᐃ[566], 3, 163, 60, ᐃⲆⲆ],
		[1, ᐃ[566], ⵠⲆᐃΔ, 164, 42, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[566], 0, 155, 51, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[566], 1, 168, 42, 1],
		[1, ᐃ[566], ⵠΔᐃⲆ, 158, 48, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[566], ΔⲆΔⲆ, 178, 57, ⲆⵠⲆ],
		[1, ᐃ[566], 4, 151, 69, 1],
		[ᐃⲆⲆ, ᐃ[566], 2, 170, 74, 1],
		[Δⵠᐃ, ᐃ[566], 2, 160, 84, 1],
		[1, ᐃ[566], 2, 174, 92, 1],
		[ΔΔⵠ, ᐃ[566], 2, 188, 90, 1],
		[ΔΔⵠ, ᐃ[566], 2, 209, 84, ΔΔⵠ],
		[1, ᐃ[566], ⵠⵠᐃⲆ, 206, 93, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[566], 5, 156, 70, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[566], ᐃᐃᐃᐃ, 165, 57, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[566], 5, 182, 58, 1],
		[1, ᐃ[566], 5, 166, 44, 1],
		[ⲆⲆⵠ, ᐃ[566], 1, 163, 39, 1],
		[1, ᐃ[566], 1, 152, 53, 1],
		[1, ᐃ[566], 1, 152, 37, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[566], 2, 163, 13, ΔΔⵠ],
		[1, ᐃ[457], 12, 219, ᐃⲆⲆΔⵠ, ⵠᐃⵠ],
		[ᐃⲆⲆ, ᐃ[457], ⵠⲆⵠᐃⵠΔⵠ, 203, 13, 0],
		[ΔΔⵠ, ᐃ[457], 15, 220, 19, 0],
		[1, ᐃ[457], ΔⲆⵠᐃⵠ, 223, 15, 0],
		[1, ᐃ[457], 12, 213, 10, 0],
		[ⵠᐃᐃ, ᐃ[457], 37, 217, 19, 0],
		[ⲆⵠⲆ, ᐃ[457], 38, 220, ⵠⲆⵠᐃⵠΔⵠ, 0],
		[1, ᐃ[457], 38, 215, ΔΔⵠⲆⵠ, ⵠᐃΔ],
		[ⲆⲆⵠ, ᐃ[457], 40, 214, 14, 0],
		[ⲆⵠⲆ, ᐃ[457], 40, 222, ⲆⲆᐃΔⵠ, ᐃⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], 40, 209, ⲆᐃΔΔᐃ, ᐃⲆΔ],
		[1, ᐃ[457], 37, 212, ⲆⲆΔⵠⲆ, ᐃⲆΔ],
		[1, ᐃ[457], 38, 215, 26, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], 37, 222, 25, ⵠᐃΔ],
		[1, ᐃ[457], 40, 221, 29, ᐃⲆᐃ],
		[ᐃⲆⲆ, ᐃ[457], 12, 220, 27, 0],
		[Δⵠᐃ, ᐃ[457], ⵠⵠᐃΔΔ, 213, 27, 0],
		[1, ᐃ[457], 14, 215, 30, ᐃⲆᐃ],
		[ᐃⲆⲆ, ᐃ[457], ⲆⵠΔΔᐃ, 219, 33, 0],
		[1, ᐃ[457], 38, 220, 31, 0],
		[1, ᐃ[457], 38, 217, 35, ᐃⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 40, 221, 34, ᐃⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 39, 215, 32, ⲆⲆΔ],
		[1, ᐃ[457], 37, 211, 35, Δⵠⵠ],
		[1, ᐃ[457], 12, 223, 38, ᐃⲆᐃ],
		[ⲆⲆⵠ, ᐃ[457], 13, 213, 38, 0],
		[1, ᐃ[457], ⲆⲆᐃⲆⲆⲆⵠ, 222, 44, ⵠᐃⵠ],
		[1, ᐃ[457], ⲆⵠΔΔᐃ, 208, 33, ⲆⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], 15, 206, 23, 0],
		[Δⵠᐃ, ᐃ[457], ⲆⵠᐃᐃⲆᐃⵠ, 205, 28, 0],
		[1, ᐃ[457], ΔᐃⵠⲆⵠ, 211, 23, 0],
		[ⲆⵠⲆ, ᐃ[457], 14, 201, 20, ⵠⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], 15, 198, ΔⵠⵠᐃⲆ, ⵠᐃΔ],
		[1, ᐃ[457], ⲆⵠΔΔᐃ, 199, 16, ᐃⲆΔ],
		[1, ᐃ[457], 12, 194, ΔᐃΔⵠᐃ, ᐃⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 12, 197, 23, 0],
		[ΔΔⵠ, ᐃ[457], 37, 205, ⲆΔΔΔⲆ, ⲆⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 39, 204, 9, 0],
		[1, ᐃ[457], 40, 196, ⵠᐃⲆΔⵠ, ⵠⵠⵠ],
		[ⵠᐃᐃ, ᐃ[457], 40, 198, ⲆᐃΔΔᐃ, ⵠᐃΔ],
		[1, ᐃ[457], 37, 192, 11, 0],
		[ᐃⲆⲆ, ᐃ[457], 37, 199, 24, 0],
		[1, ᐃ[457], 37, 209, 24, ⵠᐃⵠ],
		[ⲆⲆⵠ, ᐃ[457], 39, 209, 30, 0],
		[ⲆⵠⲆ, ᐃ[457], 39, 204, 31, 0],
		[ⲆⲆⵠ, ᐃ[457], 39, 192, 24, 0],
		[Δⵠᐃ, ᐃ[457], 40, 187, 23, 0],
		[1, ᐃ[457], 38, 187, ᐃⲆΔΔⲆ, ⵠⵠᐃ],
		[ΔΔⵠ, ᐃ[457], 39, 192, ΔⲆᐃⲆᐃⲆⲆ, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], 37, 185, ΔᐃᐃΔᐃ, 0],
		[Δⵠᐃ, ᐃ[457], ⵠᐃⲆΔⵠ, 188, 15, 0],
		[ⵠᐃᐃ, ᐃ[457], ⲆΔΔΔⲆ, 185, 13, 0],
		[ⲆⲆⵠ, ᐃ[457], ⲆⵠΔᐃⵠⵠⲆ, 189, ⲆⲆⵠⵠᐃ, 0],
		[1, ᐃ[457], ⵠⵠΔⵠᐃ, 187, 22, 0],
		[ΔΔⵠ, ᐃ[457], 15, 180, 9, 0],
		[1, ᐃ[457], 12, 177, ᐃᐃᐃΔⲆ, ⵠⵠᐃ],
		[1, ᐃ[457], 14, 173, 9, ⵠᐃΔ],
		[1, ᐃ[457], ᐃΔⲆΔⵠᐃⵠ, 171, 15, ⵠᐃⵠ],
		[1, ᐃ[457], 40, 182, ⵠⵠⵠᐃⵠ, ⲆⲆᐃ],
		[ⲆⲆⵠ, ᐃ[457], 39, 179, 13, 0],
		[Δⵠᐃ, ᐃ[457], 39, 175, ᐃΔⵠⲆⲆ, ⵠⵠⵠ],
		[1, ᐃ[457], 40, 173, 14, ⲆⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 37, 169, ᐃⲆⵠⵠⲆΔⲆ, 0],
		[Δⵠᐃ, ᐃ[457], 37, 163, ⲆΔᐃⵠΔ, 0],
		[1, ᐃ[457], 38, 164, ⵠᐃⵠΔΔ, ⵠⵠⵠ],
		[ⲆⲆⵠ, ᐃ[457], 39, 170, ⲆⲆⵠΔΔ, 0],
		[1, ᐃ[457], 40, 160, 17, 0],
		[ⲆⵠⲆ, ᐃ[457], 40, 154, 10, ᐃⲆΔ],
		[ⵠᐃᐃ, ᐃ[457], 40, 165, 23, Ⲇⵠᐃ],
		[1, ᐃ[457], 40, 150, 19, 0],
		[ΔΔⵠ, ᐃ[457], 37, 155, 16, Ⲇⵠᐃ],
		[ΔΔⵠ, ᐃ[457], 39, 146, 10, ⵠⵠᐃ],
		[1, ᐃ[457], ⲆᐃⵠⲆⵠ, 159, ⵠᐃⲆΔⵠ, 0],
		[1, ᐃ[457], 13, 151, ᐃΔⵠᐃᐃ, 0],
		[1, ᐃ[457], ᐃΔⲆΔⵠᐃⵠ, 150, 14, ⲆⲆᐃ],
		[ΔΔⵠ, ᐃ[457], ⵠⵠΔΔΔ, 153, 19, 0],
		[1, ᐃ[457], ΔΔΔᐃᐃ, 161, 25, ⵠᐃⵠ],
		[ᐃⲆⲆ, ᐃ[457], 14, 169, 25, 0],
		[ⲆⲆⵠ, ᐃ[457], ⵠⵠΔⵠᐃ, 176, 25, ⵠⵠⵠ],
		[1, ᐃ[457], 12, 180, 29, 0],
		[1, ᐃ[457], 12, 188, 31, ⵠⵠᐃ],
		[ⲆⵠⲆ, ᐃ[457], ΔᐃⵠⲆⵠ, 181, 36, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], 37, 186, 33, ⵠⵠⵠ],
		[1, ᐃ[457], 38, 183, 26, ᐃⲆΔ],
		[ⲆⵠⲆ, ᐃ[457], 39, 177, 21, ᐃⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 40, 175, 31, 0],
		[Δⵠᐃ, ᐃ[457], 37, 176, 39, 0],
		[1, ᐃ[457], 37, 168, 34, 0],
		[ᐃⲆⲆ, ᐃ[457], 38, 162, 32, 0],
		[1, ᐃ[457], 38, 168, 45, 0],
		[1, ᐃ[457], 38, 173, 45, 0],
		[1, ᐃ[457], 39, 160, 35, 0],
		[ᐃⲆⲆ, ᐃ[457], 40, 161, 42, ⲆⲆᐃ],
		[1, ᐃ[457], 40, 170, 39, ⵠⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], 40, 181, 43, Δⵠⵠ],
		[ΔΔⵠ, ᐃ[457], 40, 156, 26, 0],
		[1, ᐃ[457], 40, 150, 32, 0],
		[ⲆⲆⵠ, ᐃ[457], 37, 159, 26, ⵠⵠⵠ],
		[1, ᐃ[457], 37, 155, 40, ᐃⲆᐃ],
		[1, ᐃ[457], 37, 154, 45, ⵠᐃΔ],
		[1, ᐃ[457], 39, 149, 45, 0],
		[1, ᐃ[457], 40, 150, 50, Ⲇⵠᐃ],
		[1, ᐃ[457], 40, 160, 52, 0],
		[1, ᐃ[457], 37, 164, 52, 0],
		[Δⵠᐃ, ᐃ[457], 38, 168, 50, Ⲇⵠᐃ],
		[1, ᐃ[457], ⵠⲆᐃᐃⲆ, 176, 45, ⵠⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 12, 167, 32, ⵠⵠᐃ],
		[1, ᐃ[457], 13, 158, 32, 0],
		[ᐃⲆⲆ, ᐃ[457], 14, 149, 28, 0],
		[ⵠᐃᐃ, ᐃ[457], 15, 163, 30, 0],
		[1, ᐃ[457], 14, 158, 39, 0],
		[1, ᐃ[457], ⲆᐃⵠⲆⵠ, 171, 43, ⲆⲆΔ],
		[Δⵠᐃ, ᐃ[457], ⲆⵠⲆᐃⵠ, 174, 36, 0],
		[ᐃⲆⲆ, ᐃ[457], 12, 151, 43, 0],
		[ΔΔⵠ, ᐃ[457], ⵠᐃⲆΔⲆ, 152, 48, ⲆⲆΔ],
		[1, ᐃ[457], 14, 164, 49, 0],
		[1, ᐃ[457], 15, 149, 52, ⵠᐃΔ],
		[Δⵠᐃ, ᐃ[457], ⲆⵠⲆᐃⵠ, 174, 49, 0],
		[Δⵠᐃ, ᐃ[457], ᐃᐃΔΔΔ, 183, 51, 0],
		[ⵠᐃᐃ, ᐃ[457], ⵠⵠⲆⵠⵠ, 186, 48, Ⲇⵠᐃ],
		[ΔΔⵠ, ᐃ[457], 37, 182, 48, 0],
		[1, ᐃ[457], 38, 187, 52, 0],
		[ᐃⲆⲆ, ᐃ[457], 39, 188, 43, ⲆⲆᐃ],
		[1, ᐃ[457], 37, 200, 38, ᐃⲆΔ],
		[Δⵠᐃ, ᐃ[457], 40, 194, 37, 0],
		[1, ᐃ[457], 39, 199, 44, 0],
		[ΔΔⵠ, ᐃ[457], 38, 200, 49, 0],
		[1, ᐃ[457], 37, 196, 54, 0],
		[ᐃⲆⲆ, ᐃ[457], ⲆᐃⵠⲆⵠ, 194, 40, 0],
		[ⵠᐃᐃ, ᐃ[457], 13, 202, 45, ⵠᐃΔ],
		[1, ᐃ[457], ᐃΔⲆΔⵠᐃⵠ, 198, 47, Ⲇⵠᐃ],
		[1, ᐃ[457], ⵠⵠΔⵠᐃ, 198, 55, 0],
		[1, ᐃ[457], 15, 212, 54, ⵠⵠⵠ],
		[ΔΔⵠ, ᐃ[457], 15, 216, 63, 0],
		[1, ᐃ[457], ΔᐃⵠⲆⵠ, 209, 62, 0],
		[1, ᐃ[457], ⵠᐃⲆΔⵠ, 219, 60, 0],
		[Δⵠᐃ, ᐃ[457], 12, 206, 56, 0],
		[1, ᐃ[457], 12, 218, 72, ᐃⲆΔ],
		[ⵠᐃᐃ, ᐃ[457], 12, 223, 67, 0],
		[1, ᐃ[457], ⲆᐃⵠⲆⵠ, 205, 64, ⵠⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], ΔⲆⵠᐃⵠ, 193, 63, 0],
		[ᐃⲆⲆ, ᐃ[457], ΔⲆᐃΔⵠᐃᐃ, 216, 80, ⵠᐃΔ],
		[1, ᐃ[457], Δⵠⵠᐃᐃ, 222, 87, ᐃⲆᐃ],
		[1, ᐃ[457], 38, 210, 53, ⲆⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 37, 210, 47, 0],
		[ⵠᐃᐃ, ᐃ[457], 37, 200, 63, ᐃⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 37, 218, 62, ⲆⲆᐃ],
		[1, ᐃ[457], 37, 222, 60, ᐃⲆᐃ],
		[1, ᐃ[457], 37, 207, 70, 0],
		[ΔΔⵠ, ᐃ[457], 38, 203, 68, 0],
		[ᐃⲆⲆ, ᐃ[457], 38, 195, 66, ⵠⵠⵠ],
		[Δⵠᐃ, ᐃ[457], 38, 218, 55, ⵠᐃΔ],
		[Δⵠᐃ, ᐃ[457], 38, 212, 61, 0],
		[ΔΔⵠ, ᐃ[457], 38, 222, 70, Δⵠⵠ],
		[1, ᐃ[457], 38, 218, 70, ᐃⲆΔ],
		[ΔΔⵠ, ᐃ[457], 40, 222, 81, 0],
		[ⲆⵠⲆ, ᐃ[457], 38, 214, 79, 0],
		[1, ᐃ[457], 39, 213, 83, 0],
		[Δⵠᐃ, ᐃ[457], 39, 207, 76, 0],
		[1, ᐃ[457], 39, 208, 86, ⵠᐃⵠ],
		[1, ᐃ[457], 39, 218, 87, ⵠⵠᐃ],
		[1, ᐃ[457], 39, 222, 93, ⵠᐃΔ],
		[ᐃⲆⲆ, ᐃ[457], 39, 216, 96, 0],
		[1, ᐃ[457], 39, 209, 94, 0],
		[ⲆⲆⵠ, ᐃ[457], 39, 201, 87, ⵠᐃΔ],
		[1, ᐃ[457], 39, 198, 82, 0],
		[ⵠᐃᐃ, ᐃ[457], 39, 207, 99, ⵠⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], 39, 200, 97, ⵠⵠⵠ],
		[1, ᐃ[457], 39, 202, 92, ⲆⲆΔ],
		[1, ᐃ[457], 37, 194, 97, ⵠᐃⵠ],
		[1, ᐃ[457], 39, 204, 88, 0],
		[Δⵠᐃ, ᐃ[457], 39, 189, 90, ⵠⵠᐃ],
		[ΔΔⵠ, ᐃ[457], 39, 194, 81, ⵠᐃⵠ],
		[1, ᐃ[457], 39, 188, 98, 0],
		[Δⵠᐃ, ᐃ[457], 37, 183, 91, 0],
		[1, ᐃ[457], 37, 186, 80, Δⵠⵠ],
		[1, ᐃ[457], 37, 191, 72, ⵠⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 38, 184, 77, Δⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], 38, 180, 80, ᐃⲆΔ],
		[1, ᐃ[457], 39, 173, 75, ⲆⲆᐃ],
		[ⲆⲆⵠ, ᐃ[457], 40, 178, 87, 0],
		[1, ᐃ[457], 40, 174, 94, 0],
		[ⲆⵠⲆ, ᐃ[457], 40, 192, 93, 0],
		[1, ᐃ[457], 40, 165, 92, 0],
		[ᐃⲆⲆ, ᐃ[457], 37, 160, 89, ⵠᐃΔ],
		[1, ᐃ[457], 38, 161, 85, Δⵠⵠ],
		[1, ᐃ[457], 38, 164, 98, 0],
		[Δⵠᐃ, ᐃ[457], 38, 151, 99, ⵠⵠⵠ],
		[1, ᐃ[457], 38, 151, 85, 0],
		[Δⵠᐃ, ᐃ[457], 40, 148, 83, ᐃⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], 40, 160, 77, ᐃⲆΔ],
		[1, ᐃ[457], 40, 167, 77, 0],
		[ΔΔⵠ, ᐃ[457], 40, 153, 69, ᐃⲆᐃ],
		[1, ᐃ[457], 40, 149, 74, 0],
		[ⲆⵠⲆ, ᐃ[457], 37, 161, 64, Δⵠⵠ],
		[1, ᐃ[457], 37, 154, 61, 0],
		[Δⵠᐃ, ᐃ[457], 39, 157, 55, ⲆⲆᐃ],
		[ⲆⲆⵠ, ᐃ[457], 39, 174, 64, ⵠⵠⵠ],
		[ⲆⲆⵠ, ᐃ[457], 39, 175, 56, 0],
		[1, ᐃ[457], 39, 149, 67, ⵠᐃΔ],
		[ⵠᐃᐃ, ᐃ[457], 12, 218, 96, ⵠⵠⵠ],
		[1, ᐃ[457], ΔᐃΔⲆΔ, 212, 95, 0],
		[1, ᐃ[457], ⵠⵠⲆⵠⵠ, 204, 85, ⲆⲆΔ],
		[1, ᐃ[457], ⵠⵠⲆΔⲆ, 215, 85, ᐃⲆΔ],
		[1, ᐃ[457], ⲆᐃⲆⵠⵠ, 197, 97, 0],
		[1, ᐃ[457], ⵠⲆᐃᐃⲆ, 198, 87, 0],
		[1, ᐃ[457], Δⵠⵠᐃᐃ, 196, 77, ⵠⵠᐃ],
		[ⲆⵠⲆ, ᐃ[457], 13, 194, 86, 0],
		[1, ᐃ[457], 15, 181, 84, ⲆⲆᐃ],
		[1, ᐃ[457], 14, 184, 79, 0],
		[ᐃⲆⲆ, ᐃ[457], ⵠⵠΔΔⵠ, 188, 93, 0],
		[ᐃⲆⲆ, ᐃ[457], ⵠⵠΔΔΔᐃⵠ, 180, 87, 0],
		[ⵠᐃᐃ, ᐃ[457], 13, 178, 96, 0],
		[1, ᐃ[457], ⲆΔΔΔⲆ, 163, 95, 0],
		[1, ᐃ[457], ⵠⵠΔⵠᐃ, 172, 88, 0],
		[ⲆⵠⲆ, ᐃ[457], 15, 176, 75, Ⲇⵠᐃ],
		[1, ᐃ[457], 14, 172, 72, ᐃⲆΔ],
		[ⵠᐃᐃ, ᐃ[457], 14, 169, 82, 0],
		[ⲆⵠⲆ, ᐃ[457], ⵠⵠΔΔΔᐃⵠ, 164, 78, 0],
		[ᐃⲆⲆ, ᐃ[457], 13, 158, 87, ᐃⲆᐃ],
		[ᐃⲆⲆ, ᐃ[457], 13, 149, 86, 0],
		[1, ᐃ[457], 15, 154, 91, ᐃⲆΔ],
		[ⵠᐃᐃ, ᐃ[457], ᐃⵠᐃᐃΔ, 160, 74, ⲆⲆΔ],
		[1, ᐃ[457], 14, 152, 76, 0],
		[1, ᐃ[457], 14, 158, 63, 0],
		[1, ᐃ[457], ᐃⲆⵠⵠᐃ, 150, 60, ⲆⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], 12, 169, 59, 0],
		[Δⵠᐃ, ᐃ[457], ⵠᐃⲆΔⲆ, 173, 61, 0],
		[1, ᐃ[153], ΔΔⵠ, 143, 104, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⵠⵠ, 141, 102, ΔΔⵠ],
		[1, ᐃ[153], ⵠᐃⵠⲆ, 138, 102, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃⵠΔⲆ, 139, 102, 1],
		[1, ᐃ[153], 2, 140, 102, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[153], ⵠⲆᐃΔ, 143, 107, 1],
		[1, ᐃ[153], ⵠⵠⵠ, 143, 106, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆⵠᐃ, 143, 105, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 142, 103, 1],
		[ⲆⵠⲆ, ᐃ[153], 0, 142, 104, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠΔⵠ, 141, 103, 1],
		[1, ᐃ[153], ⲆⲆΔΔ, 142, 105, ΔΔⵠ],
		[1, ᐃ[153], 3, 140, 103, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[153], 3, 141, 104, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[566], 4, 151, 23, 1],
		[1, ᐃ[566], ⵠΔᐃⲆ, 150, 22, ⲆⲆⵠ],
		[1, ᐃ[566], 1, 149, 21, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[566], 4, 148, 21, 1],
		[1, ᐃ[566], 2, 147, ⲆⵠᐃΔⲆ, 1],
		[1, ᐃ[566], ᐃⵠⵠⲆ, 147, ᐃᐃⲆΔⵠ, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[566], Δᐃᐃⵠ, 147, 18, ⵠᐃᐃ],
		[1, ᐃ[566], ⲆⲆⵠ, 147, ᐃⲆᐃⲆᐃΔᐃ, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[566], ⲆⲆΔΔ, 144, ᐃΔⵠⲆⲆ, ΔΔⵠ],
		[1, ᐃ[566], ⵠΔⲆᐃ, 147, 16, 1],
		[1, ᐃ[566], ᐃᐃⲆⵠ, 147, ΔᐃᐃΔᐃ, ⲆⲆⵠ],
		[1, ᐃ[566], 4, 147, ΔᐃⵠⲆⵠ, ᐃⲆⲆ],
		[1, ᐃ[566], ΔᐃᐃΔ, 145, ᐃⵠΔⲆⲆ, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[566], 5, 145, 12, ᐃⲆⲆ],
		[ⵠᐃᐃ, ᐃ[566], ⲆⵠⲆ, 146, 13, ⲆⵠⲆ],
		[1, ᐃ[566], 2, 145, ⵠᐃⲆΔⲆ, ⲆⲆⵠ],
		[1, ᐃ[566], 3, 155, 25, 1],
		[ⵠᐃᐃ, ᐃ[566], 0, 155, 24, 1],
		[1, ᐃ[566], 3, 153, 26, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[153], ⲆⲆΔ, 151, 24, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃⲆᐃ, 153, 22, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], ⲆⲆΔΔ, 152, 22, Δⵠᐃ],
		[1, ᐃ[153], 3, 154, 22, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], ΔΔⵠ, 157, 26, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 157, 24, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 156, 26, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⵠᐃ, 154, 28, ΔΔⵠ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 151, 26, 1],
		[1, ᐃ[153], 2, 152, 25, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], 2, 151, 25, 1],
		[1, ᐃ[153], 2, 156, 27, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], ᐃᐃⲆⵠ, 157, 23, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 157, 22, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠᐃᐃΔ, 150, 24, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠⲆᐃ, 150, 23, ⲆⲆⵠ],
		[1, ᐃ[457], 38, 155, 29, ⲆⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], ⲆᐃⵠⲆⵠ, 157, 27, 0],
		[Δⵠᐃ, ᐃ[457], 14, 153, 29, ⲆⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], 15, 158, 23, Δⵠⵠ],
		[ⵠᐃᐃ, ᐃ[457], 13, 156, 21, Δⵠⵠ],
		[1, ᐃ[457], ⲆΔⵠΔᐃⵠⵠ, 147, 36, Ⲇⵠᐃ],
		[ⲆⵠⲆ, ᐃ[457], ⵠᐃⲆΔⲆ, 161, 56, 0],
		[ⲆⲆⵠ, ᐃ[457], 13, 147, 79, ⵠᐃΔ],
		[ⲆⵠⲆ, ᐃ[457], ᐃⲆᐃⲆⵠ, 157, 99, 0],
		[ΔΔⵠ, ᐃ[457], 12, 172, 99, Δⵠⵠ],
		[ᐃⲆⲆ, ᐃ[566], ⲆⲆΔΔ, 143, 102, 1],
		[1, ᐃ[566], ⵠΔᐃⲆ, 149, 96, 1],
		[ⵠᐃᐃ, ᐃ[566], ΔⲆⲆⲆ, 145, 102, ⲆⵠⲆ],
		[1, ᐃ[566], 1, 148, 97, 1],
		[1, ᐃ[566], ΔⲆⵠⵠ, 148, 98, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⵠⲆᐃ, 144, 104, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], ⵠᐃᐃΔ, 144, 103, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⵠⲆⲆ, 145, 103, 1],
		[ⲆⵠⲆ, ᐃ[153], 3, 145, 104, 1],
		[1, ᐃ[153], 3, 142, 101, 1],
		[ⵠᐃᐃ, ᐃ[153], 3, 143, 100, 1],
		[ⲆⵠⲆ, ᐃ[153], ΔᐃΔⲆ, 141, 101, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], 3, 142, 100, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], ⲆⲆΔ, 141, 100, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 140, 101, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 144, 105, ⵠᐃᐃ],
		[1, ᐃ[153], 3, 146, 103, 1],
		[1, ᐃ[153], ⵠⲆᐃΔ, 146, 102, 1],
		[1, ᐃ[153], ⲆΔⲆᐃ, 150, 95, 1],
		[ⲆⲆⵠ, ᐃ[153], 0, 150, 97, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠᐃⲆ, 151, 98, ⲆⲆⵠ],
		[1, ᐃ[153], ⲆⲆΔ, 153, 97, 1],
		[ᐃⲆⲆ, ᐃ[153], ⲆΔⲆⲆ, 153, 96, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 149, 95, ⲆⲆⵠ],
		[1, "s", 0, 213, 127, ⲆⲆⵠ],
		[1, ᐃ[502], 1, 214, 131, ⵠᐃΔ],
		[1, ᐃ[502], 1, 207, 128, ⲆⲆᐃ],
		[1, ᐃ[502], 0, 208, 127, 0],
		[ᐃⲆⲆ, "s", 1, 207, 132, Δⵠᐃ],
		[1, "s", 2, 208, 133, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[502], Ⲇⵠᐃ, 217, 132, Ⲇⵠᐃ],
		[ᐃⲆⲆ, ᐃ[502], ᐃⵠΔⲆ, 186, 158, 0],
		[ΔΔⵠ, ᐃ[502], 0, 184, 160, 0],
		[ⲆⲆⵠ, "s", ⲆⵠⲆ, 183, 156, Δⵠᐃ],
		[ΔΔⵠ, "s", 2, 186, 159, ⲆⵠⲆ],
		[1, "p", ⵠⵠⵠ, 182, 157, Δⵠᐃ],
		[1, "p", ⵠᐃΔ, 114, 205, 1],
		[ⲆⵠⲆ, ᐃ[502], ᐃⲆⲆ, 117, 204, ⲆⲆᐃ],
		[1, ᐃ[502], ᐃⲆᐃ, 117, 205, 0],
		[1, ᐃ[502], 2, 112, 204, ⵠⵠⵠ],
		[ⲆⵠⲆ, "s", ⵠⵠᐃⲆ, 114, 207, ⲆⲆⵠ],
		[1, "s", ᐃⲆⵠᐃ, 115, 204, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[502], ᐃⲆⵠᐃ, 122, 151, 0],
		[1, ᐃ[502], 1, 123, 150, ⵠⵠᐃ],
		[ΔΔⵠ, ᐃ[502], ⵠᐃᐃ, 117, 151, Ⲇⵠᐃ],
		[1, "s", 0, 118, 150, 1],
		[1, "s", 1, 122, 152, ⲆⵠⲆ],
		[1, ᐃ[502], 2, 156, 130, ⲆⲆΔ],
		[ᐃⲆⲆ, ᐃ[502], ⲆⲆⵠ, 154, 127, ⵠᐃⵠ],
		[1, "s", ⲆⲆᐃ, 153, 128, 1],
		[ΔΔⵠ, "s", ⵠⵠᐃⲆ, 152, 130, ᐃⲆⲆ],
		[ᐃⲆⲆ, "p", 0, 123, 65, 1],
		[Δⵠᐃ, ᐃ[502], 2, 125, 62, ⵠᐃⵠ],
		[ⵠᐃᐃ, ᐃ[502], ⲆⲆⵠ, 124, 62, Δⵠⵠ],
		[1, ᐃ[502], 0, 120, 65, 0],
		[ᐃⲆⲆ, "s", ᐃⲆⲆ, 125, 63, 1],
		[ⲆⵠⲆ, "s", 1, 121, 64, 1],
		[ⲆⲆⵠ, "s", ᐃⵠΔⲆ, 122, 62, 1],
		[1, ᐃ[153], 0, 140, 106, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], ᐃⵠΔⲆ, 144, 106, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 145, 105, 1],
		[ΔΔⵠ, ᐃ[153], 2, 144, 107, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], 2, 141, 106, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], ⵠⲆΔᐃ, 141, 105, ᐃⲆⲆ],
		[ⲆⵠⲆ, ᐃ[153], 2, 140, 105, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 140, 104, ᐃⲆⲆ],
		[1, ᐃ[153], 1, 138, 103, ΔΔⵠ],
		[1, ᐃ[153], 0, 139, 104, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 139, 103, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 139, 105, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], 2, 142, 106, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 142, 107, 1],
		[1, ᐃ[153], 2, 139, 101, 1],
		[ⲆⵠⲆ, ᐃ[457], 19, 27, 264, 0],
		[1, ᐃ[566], ⵠΔᐃⲆ, 147, 99, 1],
		[Δⵠᐃ, ᐃ[566], ΔΔⵠ, 146, ᐃⲆⵠⵠΔ, 1],
		[Δⵠᐃ, ᐃ[566], ΔⲆΔⲆ, 145, 101, 1],
		[Δⵠᐃ, ᐃ[153], 1, 215, 47, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 216, 47, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 215, 48, 1],
		[1, ᐃ[566], ⵠΔᐃⲆ, 214, 45, 1],
		[Δⵠᐃ, ᐃ[566], 4, 215, 45, ⲆⲆⵠ],
		[1, ᐃ[566], ⲆⲆΔ, 216, 46, 1],
		[1, ᐃ[566], 4, 216, 48, 1],
		[ΔΔⵠ, ᐃ[566], 4, 216, 49, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[566], 4, 217, 50, 1],
		[1, ᐃ[566], ᐃΔᐃⲆ, 214, 49, ᐃⲆⲆ],
		[1, ᐃ[566], 4, 211, 45, ΔΔⵠ],
		[ⵠᐃᐃ, ᐃ[566], 3, 213, 47, 1],
		[ΔΔⵠ, ᐃ[153], 2, 224, 48, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[502], 2, 111, 243, 0],
		[ⵠᐃᐃ, ᐃ[502], 1, 108, 246, 0],
		[ⲆⲆⵠ, "s", ⲆⵠⲆ, 110, 243, ⲆⵠⲆ],
		[1, "s", 0, 108, 245, ᐃⲆⲆ],
		[ᐃⲆⲆ, "s", 0, 121, 276, ᐃⲆⲆ],
		[1, ᐃ[502], ᐃᐃⲆⵠ, 122, 277, ⵠⵠⵠ],
		[1, ᐃ[502], 2, 117, 276, ⲆⲆᐃ],
		[1, ᐃ[502], 1, 118, 277, Ⲇⵠᐃ],
		[1, "s", 1, 118, 278, 1],
		[1, ᐃ[153], 2, 66, ᐃΔᐃⲆⲆ, Δⵠᐃ],
		[1, ᐃ[153], 3, 67, ⲆⵠᐃΔΔ, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], ⵠᐃΔ, 67, 17, Δⵠᐃ],
		[1, ᐃ[153], 2, 66, 17, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], ΔᐃΔⲆ, 66, 18, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], 3, 68, ΔᐃΔⵠΔᐃⲆ, ⵠᐃᐃ],
		[1, ᐃ[153], 0, 36, 16, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 36, 17, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠᐃⲆ, 36, 18, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃΔᐃⲆ, 35, ΔΔΔΔᐃ, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⲆᐃΔ, 36, 19, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], ⲆⵠⵠⲆ, 35, 18, 1],
		[1, ᐃ[153], 2, 66, 30, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 66, 23, 1],
		[1, ᐃ[153], 3, 66, 22, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], ⲆΔⲆⲆ, 66, 31, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⲆΔᐃ, 36, 30, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 36, 23, ⲆⲆⵠ],
		[1, ᐃ[153], 1, 36, 22, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 36, 31, ⵠᐃᐃ],
		[1, ᐃ[153], 3, 42, 13, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], 0, 43, ⲆΔΔΔⲆ, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⲆΔᐃ, 44, 13, Δⵠᐃ],
		[1, ᐃ[153], 3, 42, ⲆⵠΔᐃΔ, 1],
		[1, ᐃ[153], ⵠᐃⵠⲆ, 41, 16, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⲆᐃΔ, 40, ⲆⲆΔᐃᐃ, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 0, 42, ᐃᐃⲆΔⵠ, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], ⲆΔⲆⲆ, 43, ⵠᐃⵠᐃⵠ, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠᐃⵠⲆ, 44, ΔᐃⵠⲆⲆ, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⲆᐃΔ, 45, 19, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 46, ᐃΔΔⵠΔ, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], ⲆⲆᐃ, 43, 22, 1],
		[Δⵠᐃ, ᐃ[153], ᐃⲆⵠᐃ, 42, 22, 1],
		[1, ᐃ[153], ⵠᐃᐃ, 41, 22, 1],
		[1, ᐃ[153], Δⵠⵠ, 40, 22, ᐃⲆⲆ],
		[1, ᐃ[153], ⲆⲆΔΔ, 39, 17, ΔΔⵠ],
		[1, ᐃ[153], ⵠᐃᐃ, 44, 26, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[153], 2, 45, 26, ⲆⲆⵠ],
		[1, ᐃ[153], 3, 46, 26, ᐃⲆⲆ],
		[1, ᐃ[153], 0, 47, 26, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 48, 26, ᐃⲆⲆ],
		[1, ᐃ[153], 3, 47, 25, 1],
		[1, ᐃ[153], ⵠᐃᐃΔ, 43, 27, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃⲆⲆ, 49, 32, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 50, 32, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 51, 32, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⵠᐃ, 52, 32, ⵠᐃᐃ],
		[1, "d", ⵠⵠᐃ, 51, 29, 1],
		[1, "d", ᐃⲆⲆ, 53, 29, ⲆⵠⲆ],
		[1, "d", ⲆⲆⵠ, 49, 29, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], 3, 55, 31, Δⵠᐃ],
		[1, ᐃ[153], ⵠᐃⵠⲆ, 54, 32, 1],
		[ⲆⵠⲆ, ᐃ[153], 3, 47, 31, 1],
		[1, ᐃ[153], ⵠᐃⵠⲆ, 48, 32, 1],
		[ⲆⲆⵠ, ᐃ[153], Δⵠⵠ, 51, 33, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 52, 33, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃⲆ, 50, 33, ᐃⲆⲆ],
		[ⵠᐃᐃ, ᐃ[153], 3, 56, 30, 1],
		[ΔΔⵠ, ᐃ[153], ΔᐃΔⲆ, 56, 31, Δⵠᐃ],
		[ⲆⲆⵠ, ᐃ[153], 3, 46, 30, 1],
		[1, ᐃ[153], 3, 46, 31, 1],
		[Δⵠᐃ, ᐃ[153], 1, 53, 33, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 49, 33, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 53, 32, 1],
		[ⵠᐃᐃ, ᐃ[153], 0, 55, 32, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], ᐃⲆΔ, 47, 32, ⲆⲆⵠ],
		[Δⵠᐃ, "d", 1, 54, 35, 1],
		[ΔΔⵠ, ᐃ[70], 2, 35, ⵠⵠΔⵠᐃ, ⵠᐃΔ],
		[1, ᐃ[70], ᐃᐃⲆⵠ, 36, 12, ⵠⵠᐃ],
		[ⵠᐃᐃ, ᐃ[70], ᐃⲆⵠᐃ, 67, 15, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[153], 3, 60, ⵠᐃⲆΔⲆ, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 59, ⵠᐃⲆΔⲆ, 1],
		[1, ᐃ[153], ⲆⲆⵠ, 58, ᐃᐃΔΔΔ, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠⲆᐃ, 62, ΔⵠⲆᐃⲆ, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 0, 61, ΔⵠⲆᐃⲆ, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], 3, 60, ΔⵠⲆᐃⲆ, 1],
		[1, ᐃ[153], ⵠᐃⵠⲆ, 63, 17, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠΔⵠ, 60, ΔᐃⵠⲆⲆ, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], ⲆⵠⲆ, 59, 19, 1],
		[1, ᐃ[153], 3, 58, 19, 1],
		[1, ᐃ[153], 2, 57, 19, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], 2, 56, 19, ⵠᐃᐃ],
		[1, ᐃ[153], 0, 55, ΔⲆᐃⲆᐃⲆⲆ, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 55, 17, 1],
		[Δⵠᐃ, ᐃ[153], ᐃᐃⲆⵠ, 63, 23, 1],
		[ⲆⵠⲆ, ᐃ[153], 0, 62, 22, ΔΔⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 61, 22, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], 1, 60, 22, 1],
		[Δⵠᐃ, ᐃ[153], 0, 59, 22, 1],
		[1, ᐃ[153], 2, 54, 26, Δⵠᐃ],
		[1, ᐃ[153], 2, 55, 26, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 56, 26, ⵠᐃᐃ],
		[1, ᐃ[153], 1, 57, 26, 1],
		[1, ᐃ[153], 2, 58, 26, 1],
		[ΔΔⵠ, ᐃ[153], 2, 59, 27, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 68, 16, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠᐃⲆ, 68, 15, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], 3, 69, 15, 1],
		[1, ᐃ[153], 3, 70, ⵠΔΔΔΔⵠΔ, 1],
		[Δⵠᐃ, ᐃ[153], 3, 70, 14, 1],
		[ⵠᐃᐃ, ᐃ[153], 1, 69, 14, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], 1, 69, 16, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 71, 13, 1],
		[1, ᐃ[153], 2, 71, ᐃΔⲆΔⵠᐃⵠ, Δⵠᐃ],
		[1, ᐃ[153], 3, 72, ⲆΔΔΔⲆ, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], 3, 70, ⵠⵠᐃᐃⲆ, 1],
		[1, ᐃ[153], ⵠᐃⵠⲆ, 71, ⲆⲆⲆᐃⲆ, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 72, 8, 1],
		[1, ᐃ[153], 0, 73, ⲆⲆⲆᐃⲆ, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠⲆᐃ, 74, 9, 1],
		[ⲆⲆⵠ, ᐃ[153], 3, 74, ⲆⲆⲆᐃⲆ, 1],
		[ⵠᐃᐃ, ᐃ[153], 0, 75, ⵠⵠᐃᐃⲆ, Δⵠᐃ],
		[1, ᐃ[153], ⵠⲆᐃΔ, 76, 8, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], 3, 75, ΔⲆΔᐃΔ, 1],
		[1, ᐃ[153], ⲆⲆΔΔ, 75, 10, ⵠᐃᐃ],
		[1, ᐃ[153], 0, 76, ΔΔⲆΔΔ, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[153], 0, 76, 16, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⲆᐃΔ, 76, 15, 1],
		[1, ᐃ[153], ⲆⵠⵠⲆ, 75, 16, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 77, ᐃⲆⵠⵠⲆΔⲆ, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 77, ⵠⵠⲆⵠⵠ, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], ⵠᐃᐃΔ, 77, ⵠⲆᐃᐃⲆ, ΔΔⵠ],
		[1, ᐃ[153], 3, 77, 13, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃΔᐃⲆ, 77, 15, 1],
		[ⲆⵠⲆ, ᐃ[153], 0, 74, 18, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], 1, 75, 17, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 74, ⵠΔⲆᐃⵠ, 1],
		[1, ᐃ[153], 3, 73, ᐃΔΔⵠΔ, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], ⵠᐃⵠⲆ, 67, 23, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⵠⵠ, 68, 23, 1],
		[1, ᐃ[153], ⵠᐃⵠ, 72, 20, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 73, ⲆⲆⵠΔΔ, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 74, 19, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃᐃⲆⵠ, 74, 36, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], ⵠⲆΔᐃ, 77, 27, 1],
		[ᐃⲆⲆ, ᐃ[153], ᐃⵠΔⲆ, 76, 26, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], ⵠⵠᐃⲆ, 75, 26, 1],
		[ⲆⲆⵠ, ᐃ[153], 0, 74, 26, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 75, 25, 1],
		[ᐃⲆⲆ, ᐃ[153], Δⵠⵠ, 76, 25, ᐃⲆⲆ],
		[1, ᐃ[153], 1, 77, 23, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 77, 16, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 76, 17, Δⵠᐃ],
		[ⵠᐃᐃ, ᐃ[153], ᐃᐃⲆⵠ, 76, 24, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], ᐃⵠΔⲆ, 77, 24, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⵠᐃ, 77, 25, 1],
		[1, ᐃ[153], 2, 77, 26, 1],
		[1, ᐃ[153], ᐃⲆⲆ, 75, 27, 1],
		[1, ᐃ[153], 3, 76, 27, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], 2, 67, 24, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], ᐃᐃⲆⵠ, 66, 24, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 73, 26, ⵠᐃᐃ],
		[ΔΔⵠ, ᐃ[153], 2, 74, 27, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], ᐃᐃⲆⵠ, 74, 25, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃᐃⲆⵠ, 66, ⵠᐃⵠᐃⵠ, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠΔⵠ, 66, ⲆⲆⵠΔΔ, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], 2, 66, 21, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 67, 18, 1],
		[1, ᐃ[153], 2, 67, 22, 1],
		[ⵠᐃᐃ, ᐃ[153], ⲆⲆᐃ, 77, 36, 1],
		[1, ᐃ[153], ᐃⲆΔ, 77, 32, 1],
		[1, ᐃ[153], 1, 75, 35, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⲆΔᐃ, 75, 36, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], ⵠⲆΔᐃ, 76, 36, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 77, 35, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 77, 34, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆⵠᐃ, 76, 35, Δⵠᐃ],
		[1, ᐃ[153], 2, 77, 33, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 77, 31, 1],
		[ᐃⲆⲆ, ᐃ[153], 0, 77, 29, 1],
		[1, ᐃ[153], 0, 71, 32, 1],
		[1, ᐃ[153], Δⵠⵠ, 76, 34, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 77, 30, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 77, 28, Δⵠᐃ],
		[ⵠᐃᐃ, ᐃ[153], 2, 76, 28, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 75, 28, 1],
		[ⵠᐃᐃ, ᐃ[153], ᐃⲆⵠᐃ, 76, 29, Δⵠᐃ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 76, 33, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⵠΔⲆ, 70, 32, 1],
		[1, ᐃ[153], 2, 69, 31, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], ⵠᐃΔ, 68, 31, 1],
		[1, ᐃ[153], 2, 67, 31, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 67, 30, ⲆⲆⵠ],
		[Δⵠᐃ, ᐃ[153], ⵠⵠᐃⲆ, 69, 32, 1],
		[1, ᐃ[153], Δⵠᐃ, 67, 32, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⵠᐃⲆ, 68, 32, ΔΔⵠ],
		[ⲆⵠⲆ, ᐃ[153], ⵠⲆΔᐃ, 66, 32, 1],
		[1, ᐃ[153], 2, 66, 33, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 67, 33, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⵠΔⲆ, 70, 33, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠΔⵠ, 69, 33, 1],
		[1, ᐃ[153], 2, 68, 33, ΔΔⵠ],
		[1, ᐃ[153], 0, 68, 34, ΔΔⵠ],
		[1, ᐃ[153], 1, 66, 35, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆⵠᐃ, 67, 34, 1],
		[ΔΔⵠ, ᐃ[153], 2, 66, 34, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 65, 35, Δⵠᐃ],
		[1, ᐃ[153], 2, 64, 36, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⲆΔᐃ, 65, 36, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], ᐃᐃⲆⵠ, 67, 35, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], ᐃⲆⵠᐃ, 66, 36, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 69, 34, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], ᐃⲆⵠᐃ, 68, 35, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 76, 9, 1],
		[ΔΔⵠ, ᐃ[153], ᐃᐃⲆⵠ, 77, ⵠᐃΔⲆⲆ, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 77, ⲆⲆⲆᐃⲆ, 1],
		[1, ᐃ[153], 2, 77, ΔΔⲆΔΔ, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], ᐃⵠΔⲆ, 78, ⵠᐃΔᐃⲆ, 1],
		[1, ᐃ[153], 2, 78, ⲆΔΔΔΔ, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 78, 10, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 78, ᐃⵠΔⲆⲆ, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 78, 12, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], ᐃᐃⲆⵠ, 78, 13, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠᐃΔ, 79, 9, 1],
		[ᐃⲆⲆ, ᐃ[153], Δⵠᐃ, 79, ⲆΔΔⵠⵠ, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], 3, 79, 8, 1],
		[ⵠᐃᐃ, ᐃ[153], 3, 79, ΔΔⲆΔΔ, ᐃⲆⲆ],
		[ⲆⲆⵠ, ᐃ[153], 3, 79, ⲆᐃⵠⲆⵠ, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], 3, 80, ⲆⲆⲆᐃⲆ, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠᐃᐃ, 80, ᐃⲆᐃⲆⲆ, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 80, 9, 1],
		[Δⵠᐃ, ᐃ[153], 2, 80, ᐃΔΔᐃⲆᐃΔ, 1],
		[1, ᐃ[153], 2, 81, ⵠᐃΔᐃⲆ, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 81, 9, 1],
		[1, ᐃ[153], 2, 81, ΔⵠΔᐃΔ, 1],
		[1, ᐃ[153], 2, 78, 14, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⵠΔⲆ, 79, ΔⲆΔⵠᐃ, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 78, 15, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], 2, 80, ⵠⲆᐃᐃⲆ, 1],
		[1, ᐃ[153], 0, 79, 14, Δⵠᐃ],
		[1, ᐃ[153], 0, 82, ΔⲆΔᐃΔ, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 82, ⲆⲆᐃⲆⵠ, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 82, ⲆΔᐃⵠΔ, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 81, ⵠⵠⲆᐃΔ, 1],
		[Δⵠᐃ, ᐃ[153], 3, 80, ⲆᐃᐃⵠΔΔᐃ, ⲆⵠⲆ],
		[1, ᐃ[153], 1, 78, 30, Δⵠᐃ],
		[1, ᐃ[153], ᐃⲆⲆ, 78, 34, 1],
		[1, ᐃ[153], Δⵠᐃ, 78, 27, 1],
		[1, ᐃ[153], Δⵠⵠ, 78, 25, 1],
		[ΔΔⵠ, ᐃ[153], 0, 79, 29, 1],
		[1, ᐃ[153], ᐃⲆΔ, 79, 32, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[153], 0, 79, 35, 1],
		[1, ᐃ[153], 2, 78, 35, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], ᐃⵠΔⲆ, 78, 36, 1],
		[1, ᐃ[153], 2, 79, 34, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⵠᐃ, 78, 33, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⵠᐃ, 79, 33, 1],
		[Δⵠᐃ, ᐃ[153], ᐃᐃⲆⵠ, 78, 32, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 78, 31, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠΔⵠ, 79, 31, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⲆΔᐃ, 79, 30, 1],
		[Δⵠᐃ, ᐃ[153], 2, 78, 29, 1],
		[ⲆⲆⵠ, ᐃ[153], ᐃᐃⲆⵠ, 78, 28, 1],
		[1, ᐃ[153], 2, 79, 28, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], ⵠⵠᐃⲆ, 79, 27, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], 2, 78, 26, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], ᐃⵠΔⲆ, 79, 26, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 78, 24, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠⵠΔⵠ, 80, 34, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 80, 33, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], ⵠⵠΔⵠ, 80, 31, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠΔⵠ, 80, 30, 1],
		[1, ᐃ[153], 2, 80, 32, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⲆΔᐃ, 80, 29, ⵠᐃᐃ],
		[ΔΔⵠ, ᐃ[153], ᐃⵠΔⲆ, 80, 28, 1],
		[1, ᐃ[153], 2, 80, 27, 1],
		[ⲆⲆⵠ, ᐃ[153], 0, 81, 30, 1],
		[1, ᐃ[153], 1, 81, 32, 1],
		[1, ᐃ[153], 1, 81, 28, 1],
		[1, ᐃ[153], 2, 81, 29, 1],
		[ΔΔⵠ, ᐃ[153], 2, 81, 31, Δⵠᐃ],
		[ⵠᐃᐃ, ᐃ[153], ᐃⵠΔⲆ, 81, 33, 1],
		[1, ᐃ[153], 2, 82, 30, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 82, 31, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 82, 32, 1],
		[Δⵠᐃ, ᐃ[153], 0, 37, 36, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 38, 36, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 37, 35, 1],
		[1, ᐃ[153], 2, 36, 36, Δⵠᐃ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠΔⵠ, 34, 35, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], 2, 35, 35, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], 2, 36, 35, 1],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆΔ, 33, 34, 1],
		[ΔΔⵠ, ᐃ[153], ⲆⵠⲆ, 35, 34, 1],
		[1, ᐃ[153], 2, 36, 34, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 34, 34, 1],
		[Δⵠᐃ, ᐃ[153], 2, 36, 33, 1],
		[1, ᐃ[153], 2, 35, 33, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠΔⵠ, 34, 33, ΔΔⵠ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 33, 33, 1],
		[Δⵠᐃ, ᐃ[153], ᐃⲆⵠᐃ, 31, 32, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], Δⵠᐃ, 36, 32, ⲆⲆⵠ],
		[Δⵠᐃ, ᐃ[153], Δⵠᐃ, 32, 32, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], 2, 35, 32, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 33, 32, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 32, 33, ΔΔⵠ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 33, 31, ΔΔⵠ],
		[1, ᐃ[153], 2, 34, 31, 1],
		[ΔΔⵠ, ᐃ[153], 2, 35, 31, 1],
		[1, ᐃ[153], ⵠⵠⵠ, 34, 32, 1],
		[ⵠᐃᐃ, ᐃ[153], ᐃᐃⲆⵠ, 35, 30, 1],
		[ⲆⵠⲆ, ᐃ[153], ΔΔⵠ, 39, 23, 1],
		[ⲆⵠⲆ, ᐃ[153], 3, 39, 22, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], 3, 36, 24, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], 3, 35, 24, ΔΔⵠ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 34, 23, 1],
		[Δⵠᐃ, ᐃ[153], ᐃⲆⵠᐃ, 35, 23, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], ᐃⵠΔⲆ, 36, 20, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], 2, 36, 21, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 35, 22, 1],
		[ΔΔⵠ, ᐃ[153], 2, 35, ⲆⵠᐃΔΔ, 1],
		[ⵠᐃᐃ, ᐃ[153], ᐃᐃⲆⵠ, 34, 16, 1],
		[1, ᐃ[153], ⵠⵠΔⵠ, 33, 16, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆΔ, 34, ᐃⲆΔᐃΔ, 1],
		[1, ᐃ[153], ⲆⲆᐃ, 32, ⵠᐃⵠΔΔ, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⲆΔᐃ, 31, ᐃᐃᐃΔⲆ, 1],
		[1, ᐃ[153], ⵠⲆᐃΔ, 30, 13, 1],
		[1, ᐃ[153], 1, 33, ⲆⲆⲆΔⵠ, 1],
		[ⲆⵠⲆ, ᐃ[153], ΔΔⵠ, 31, 13, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠΔⵠ, 32, ᐃᐃᐃΔⲆ, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], 0, 31, 8, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 32, ⵠⵠᐃᐃⲆ, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], 2, 25, ⲆΔⵠΔᐃⵠⵠ, ⲆⵠⲆ],
		[1, ᐃ[153], 0, 25, ⵠⲆᐃᐃⲆ, ΔΔⵠ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 25, 11, 1],
		[1, ᐃ[153], ⲆΔⲆⲆ, 25, 10, 1],
		[1, ᐃ[153], ⵠⵠⵠ, 25, 9, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 25, 8, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 26, Δᐃⵠⵠᐃ, Δⵠᐃ],
		[ⲆⵠⲆ, ᐃ[153], ᐃᐃⲆⵠ, 27, 8, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 28, 8, Δⵠᐃ],
		[ᐃⲆⲆ, ᐃ[153], 2, 29, Δᐃⵠⵠᐃ, ᐃⲆⲆ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠΔⵠ, 30, Δᐃⵠⵠᐃ, 1],
		[1, ᐃ[153], 2, 26, ⲆΔΔΔΔ, ⵠᐃᐃ],
		[ᐃⲆⲆ, ᐃ[153], 2, 27, ΔⲆΔᐃΔ, Δⵠᐃ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 26, 10, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃⲆⲆ, 27, 10, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], 3, 28, 9, 1],
		[ᐃⲆⲆ, ᐃ[153], 3, 25, ΔᐃⵠⲆⵠ, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆΔ, 25, 15, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 26, ⵠⵠΔΔΔ, 1],
		[1, ᐃ[153], 3, 27, 16, 1],
		[1, ᐃ[153], 0, 28, ᐃⲆᐃⲆᐃΔᐃ, ⵠᐃᐃ],
		[ΔΔⵠ, ᐃ[153], ⵠᐃᐃ, 29, 18, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 26, 16, ⵠᐃᐃ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 25, ᐃΔᐃⲆⲆ, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠᐃⲆ, 27, ᐃⲆᐃⲆᐃΔᐃ, ΔΔⵠ],
		[1, ᐃ[153], 2, 26, ⲆⵠᐃⲆⵠ, 1],
		[Δⵠᐃ, ᐃ[153], 1, 27, 18, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 28, ᐃⲆΔΔⲆ, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 30, ᐃΔΔⵠΔ, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 29, 19, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 24, ᐃᐃᐃΔⲆ, 1],
		[ⵠᐃᐃ, ᐃ[153], ᐃⲆⵠᐃ, 24, ⵠᐃⵠΔΔ, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], 0, 23, ᐃⲆⵠⵠᐃ, 1],
		[1, ᐃ[153], 2, 24, ᐃᐃᐃⲆⵠ, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 24, ΔᐃⲆΔⲆ, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 24, 12, 1],
		[ΔΔⵠ, ᐃ[153], 2, 24, 13, ΔΔⵠ],
		[1, ᐃ[153], 1, 23, ᐃᐃᐃⲆⵠ, 1],
		[ⲆⵠⲆ, ᐃ[153], ᐃⲆᐃ, 22, ᐃΔᐃⵠⲆ, ⲆⲆⵠ],
		[1, ᐃ[153], ⲆⲆᐃ, 22, 12, ΔΔⵠ],
		[ΔΔⵠ, ᐃ[153], 1, 23, ⵠⵠᐃᐃⲆ, 1],
		[Δⵠᐃ, ᐃ[153], 2, 24, 8, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠΔⵠ, 24, 9, ⲆⵠⲆ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 23, 9, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], 2, 22, 9, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], ᐃⲆⵠᐃ, 22, 10, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 22, ΔᐃⲆΔⲆ, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 23, 11, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠᐃⲆ, 23, 12, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], 2, 23, ⵠⵠΔΔΔᐃⵠ, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⲆΔᐃ, 22, 13, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⵠᐃ, 21, 9, Δⵠᐃ],
		[1, ᐃ[153], 2, 21, 8, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⵠᐃ, 29, 25, 1],
		[1, ᐃ[153], 2, 25, 24, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 26, 25, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], 2, 27, 25, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], 0, 28, 25, ΔΔⵠ],
		[1, ᐃ[153], 1, 25, 23, ΔΔⵠ],
		[1, ᐃ[153], 2, 26, 24, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], 0, 24, 25, 1],
		[1, ᐃ[153], ⵠⵠⲆⲆ, 23, 24, 1],
		[Δⵠᐃ, ᐃ[153], ⲆΔⲆᐃ, 24, 24, ᐃⲆⲆ],
		[ⵠᐃᐃ, ᐃ[153], ⵠⲆᐃΔ, 25, 25, ⵠᐃᐃ],
		[ⲆⲆⵠ, ᐃ[153], ⵠᐃᐃΔ, 23, 25, 1],
		[1, ᐃ[153], ⵠᐃᐃ, 22, 26, 1],
		[1, ᐃ[153], ᐃⲆⲆ, 26, 26, ⲆⵠⲆ],
		[ΔΔⵠ, ᐃ[153], 1, 29, 26, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 23, 26, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 24, 26, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 25, 26, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 27, 26, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 28, 26, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 30, 26, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 29, 27, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠᐃⲆ, 28, 28, 1],
		[1, ᐃ[153], 1, 26, 29, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], 0, 28, 27, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 27, 28, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 27, 27, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 26, 28, 1],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃⲆ, 26, 27, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃⲆ, 25, 28, 1],
		[1, ᐃ[153], 2, 25, 27, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], 2, 23, 27, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃⲆ, 22, 27, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], ᐃᐃⲆⵠ, 24, 27, Δⵠᐃ],
		[1, ᐃ[153], ⵠᐃΔ, 24, 28, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], 0, 25, 32, 1],
		[ⵠᐃᐃ, ᐃ[153], 1, 24, 30, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 25, 31, 1],
		[1, ᐃ[153], 2, 25, 30, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 25, 29, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 24, 29, ΔΔⵠ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 23, 29, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⲆΔᐃ, 26, 33, 1],
		[ⲆⲆⵠ, ᐃ[153], 0, 26, 34, 1],
		[1, ᐃ[153], ᐃⵠΔⲆ, 27, 35, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 22, 28, 1],
		[1, ᐃ[153], 2, 23, 28, 1],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⵠᐃ, 24, 31, 1],
		[1, ᐃ[153], 2, 24, 32, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 25, 33, ⲆⲆⵠ],
		[Δⵠᐃ, ᐃ[153], 2, 26, 35, 1],
		[1, ᐃ[153], 2, 24, 33, ᐃⲆⲆ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 25, 34, 1],
		[ⵠᐃᐃ, ᐃ[153], 1, 22, 29, ᐃⲆⲆ],
		[ΔΔⵠ, ᐃ[153], 1, 24, 34, 1],
		[1, ᐃ[153], ⲆⲆΔ, 23, 35, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⲆΔᐃ, 25, 35, 1],
		[ΔΔⵠ, ᐃ[153], 2, 24, 35, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 23, 34, ⲆⲆⵠ],
		[ⵠᐃᐃ, ᐃ[153], ᐃⵠΔⲆ, 23, 33, Δⵠᐃ],
		[1, ᐃ[153], 0, 22, 33, Δⵠᐃ],
		[Δⵠᐃ, ᐃ[153], 1, 23, 32, ⵠᐃᐃ],
		[1, ᐃ[153], ᐃⵠΔⲆ, 22, 32, ⵠᐃᐃ],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⵠᐃ, 23, 31, Δⵠᐃ],
		[ⵠᐃᐃ, ᐃ[153], 2, 23, 30, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 22, 30, 1],
		[1, ᐃ[153], ⵠⲆΔᐃ, 22, 31, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], 1, 21, 31, ⲆⵠⲆ],
		[ⵠᐃᐃ, ᐃ[153], 0, 21, 29, 1],
		[Δⵠᐃ, ᐃ[153], 2, 21, 30, ⲆⲆⵠ],
		[ᐃⲆⲆ, ᐃ[153], ᐃⲆⵠᐃ, 24, 36, ΔΔⵠ],
		[1, ᐃ[153], 2, 26, 36, ΔΔⵠ],
		[1, ᐃ[153], 2, 25, 36, Δⵠᐃ],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 27, 36, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], 2, 28, 36, ⵠᐃᐃ],
		[1, "d", ᐃⵠΔⲆ, 83, 65, 1],
		[1, "d", ᐃⵠΔⲆ, 16, 67, ⲆⵠⲆ],
		[ⲆⵠⲆ, "g", 0, ⵠⵠΔΔΔ, 17, ⲆⵠⲆ],
		[1, "s", 0, ᐃⵠⲆⲆΔ, 13, 1],
		[1, "s", ᐃⲆᐃ, 85, 11, ΔΔⵠ],
		[ⲆⲆⵠ, "f", 0, 41, 102, 1],
		[ⵠᐃᐃ, "f", 0, 42, 124, 1],
		[1, "f", 0, 64, 116, ΔΔⵠ],
		[ⲆⲆⵠ, "f", ⵠᐃⵠ, 74, 104, 1],
		[1, "f", 0, 70, 87, ⲆⲆⵠ],
		[Δⵠᐃ, "f", 0, 27, 96, 1],
		[ᐃⲆⲆ, "f", 0, 22, 79, ⲆⵠⲆ],
		[ⲆⵠⲆ, "f", Ⲇⵠᐃ, ⲆⲆⲆⵠⵠ, 117, 1],
		[1, "f", ᐃⲆᐃ, 30, 137, ⵠᐃᐃ],
		[ⲆⵠⲆ, "f", 0, 59, 146, ⵠᐃᐃ],
		[ⲆⲆⵠ, "f", ⲆⲆΔ, 52, 147, 1],
		[ⵠᐃᐃ, "f", 0, 20, 149, ⲆⵠⲆ],
		[1, "f", 0, 36, 146, 1],
		[ⵠᐃᐃ, "f", ⵠⵠⵠ, 62, 124, ⵠᐃᐃ],
		[ⲆⲆⵠ, "g", 1, 34, 121, ᐃⲆⲆ],
		[ΔΔⵠ, "g", ⲆⵠⲆ, 52, 116, ⲆⵠⲆ],
		[ⵠᐃᐃ, "g", 1, 78, 116, 1],
		[Δⵠᐃ, "g", 1, 71, 129, Δⵠᐃ],
		[Δⵠᐃ, "s", ⵠⵠⵠ, 53, ᐃᐃΔⵠⵠ, 1],
		[1, "s", 0, 73, 111, 1],
		[Δⵠᐃ, "s", Ⲇⵠᐃ, 77, 126, 1],
		[Δⵠᐃ, "s", Ⲇⵠᐃ, 48, 90, ⲆⵠⲆ],
		[1, "s", 0, 19, 102, 1],
		[ΔΔⵠ, "s", ᐃⲆᐃ, 18, 127, 1],
		[1, "s", 0, 35, 159, Δⵠᐃ],
		[Δⵠᐃ, "s", 0, 65, 54, ΔΔⵠ],
		[1, "s", 0, 44, 52, 1],
		[1, "s", ⵠⵠᐃ, 26, 51, Δⵠᐃ],
		[ⵠᐃᐃ, "f", ΔΔⵠ, 56, 136, ΔΔⵠ],
		[1, "f", 1, 41, 133, 1],
		[Δⵠᐃ, "f", ⲆⲆⵠ, 80, 120, 1],
		[ᐃⲆⲆ, "f", ⲆⵠⲆ, ⲆⲆΔᐃᐃ, 117, 1],
		[ΔΔⵠ, "f", 1, ᐃᐃΔΔΔ, 99, ΔΔⵠ],
		[1, "f", 1, 17, 89, 1],
		[1, "f", ⲆⲆⵠ, 90, 98, ΔΔⵠ],
		[ⲆⵠⲆ, "f", ⲆⵠⲆ, 84, 95, ⲆⵠⲆ],
		[ΔΔⵠ, "f", ⵠᐃᐃ, 16, 57, ⲆⲆⵠ],
		[1, "f", 1, 77, 53, 1],
		[ΔΔⵠ, "d", Δⵠᐃ, 48, 35, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[457], 8, 33, ⵠᐃⲆΔⲆ, 0],
		[ⲆⵠⲆ, ᐃ[457], ⵠᐃΔᐃⲆ, 30, ΔⲆΔᐃΔ, 0],
		[ΔΔⵠ, ᐃ[457], ⵠⵠⵠᐃⵠ, 32, 30, 0],
		[ΔΔⵠ, ᐃ[457], ᐃⲆᐃⲆⲆ, 30, 25, 0],
		[1, ᐃ[457], ΔⵠⲆᐃΔ, 33, 21, ⲆⲆᐃ],
		[1, ᐃ[457], 8, 31, 34, 0],
		[1, ᐃ[457], 8, 67, 29, 0],
		[ᐃⲆⲆ, ᐃ[457], 9, 70, 22, ⵠᐃΔ],
		[1, ᐃ[457], ΔΔⲆΔΔ, 70, ⲆⲆΔᐃᐃ, 0],
		[ⲆⲆⵠ, ᐃ[457], ᐃⲆᐃⲆⲆ, 75, 11, 0],
		[1, ᐃ[457], 8, 68, ᐃⲆᐃⲆⲆ, 0],
		[Δⵠᐃ, ᐃ[457], ⵠᐃΔᐃⲆ, 75, 30, 0],
		[ᐃⲆⲆ, ᐃ[457], ᐃⵠΔⲆⲆ, 71, 33, 0],
		[ⲆⲆⵠ, ᐃ[457], ⵠⵠⲆᐃΔ, 72, 25, 0],
		[ᐃⲆⲆ, ᐃ[457], ΔΔΔⲆⵠᐃⲆ, 64, 25, 0],
		[Δⵠᐃ, ᐃ[457], ᐃΔᐃⵠΔΔᐃ, 52, 10, 0],
		[ⵠᐃᐃ, ᐃ[457], ⲆΔΔⵠⵠ, 31, ⲆⵠΔΔᐃ, 0],
		[ⵠᐃᐃ, ᐃ[457], 30, 29, 14, 0],
		[ⵠᐃᐃ, ᐃ[457], 30, 36, ⲆⲆⲆΔⵠ, ⲆⲆΔ],
		[ΔΔⵠ, ᐃ[457], 30, 34, 29, 0],
		[1, ᐃ[457], 30, 30, 29, 0],
		[1, ᐃ[457], 30, 71, 29, ᐃⲆᐃ],
		[1, ᐃ[457], 28, 68, 25, 0],
		[ⲆⵠⲆ, ᐃ[457], 28, 75, ⵠᐃⵠΔΔ, 0],
		[1, ᐃ[457], 27, 67, 19, 0],
		[Δⵠᐃ, ᐃ[457], 29, 72, 10, ᐃⲆᐃ],
		[1, ᐃ[457], 29, 75, 32, ⲆⲆᐃ],
		[1, ᐃ[457], 29, 32, ⲆⲆⵠΔΔ, 0],
		[Δⵠᐃ, ᐃ[70], ⲆⵠⲆ, 39, 12, 0],
		[1, ᐃ[70], 1, 34, ᐃᐃᐃΔⲆ, ⵠⵠⵠ],
		[1, ᐃ[70], 1, 74, 28, ⵠᐃⵠ],
		[Δⵠᐃ, ᐃ[70], 2, 74, 29, ⵠᐃⵠ],
		[1, ᐃ[70], 2, 69, 30, 0],
		[1, ᐃ[70], ᐃⲆⵠᐃ, 77, 22, ⵠᐃΔ],
		[1, ᐃ[70], 2, 74, 21, 0],
		[1, ᐃ[70], 2, 76, ᐃⵠⲆⲆΔ, ⵠⵠⵠ],
		[1, ᐃ[70], ⲆⵠⲆ, 78, ⵠΔⵠⵠⵠ, ⵠᐃΔ],
		[1, ᐃ[70], ⲆⵠⲆ, 28, ΔΔΔⲆᐃ, ᐃⲆΔ],
		[ⲆⵠⲆ, ᐃ[70], 2, 27, 24, 0],
		[1, ᐃ[70], ᐃⵠΔⲆ, 24, 17, 0],
		[1, ᐃ[70], ⵠⲆΔᐃ, 29, 21, ᐃⲆᐃ],
		[1, ᐃ[70], ⲆⵠⲆ, 27, 32, ᐃⲆΔ],
		[1, ᐃ[70], ᐃⲆⵠᐃ, 30, 33, ⲆⲆΔ],
		[1, ᐃ[70], 1, 29, 28, ⲆⲆΔ],
		[ⲆⵠⲆ, ᐃ[70], ᐃⲆⵠᐃ, 28, 31, Δⵠⵠ],
		[1, ᐃ[70], ᐃᐃⲆⵠ, 20, 24, 0],
		[ΔΔⵠ, ᐃ[70], 2, 20, 26, 0],
		[1, ᐃ[70], ⵠⵠᐃⲆ, 23, 16, 0],
		[Δⵠᐃ, ᐃ[70], ᐃⲆⵠᐃ, ᐃⵠΔⲆⲆ, 25, 0],
		[ΔΔⵠ, ᐃ[457], 33, 29, 22, 0],
		[ΔΔⵠ, ᐃ[457], 34, 32, 25, ⲆⲆᐃ],
		[1, ᐃ[457], 34, 30, 18, 0],
		[1, ᐃ[457], 33, 78, 18, ⵠᐃΔ],
		[1, ᐃ[457], 33, 73, 35, ⵠᐃⵠ],
		[ΔΔⵠ, ᐃ[457], 36, 72, 23, ⵠᐃΔ],
		[1, ᐃ[457], 35, 25, ᐃⲆΔΔⲆ, ⲆⲆΔ],
		[1, "d", 1, 83, 41, ⵠᐃᐃ],
		[1, "d", ᐃⲆⲆ, 17, 40, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 224, 104, 1],
		[ⵠᐃᐃ, ᐃ[153], 0, 224, 105, Δⵠᐃ],
		[1, ᐃ[153], ⵠⵠⲆⲆ, 224, 106, 1],
		[ⲆⵠⲆ, ᐃ[566], ⲆΔⲆᐃ, 216, 128, 1],
		[Δⵠᐃ, ᐃ[566], 0, 215, 126, ⲆⲆⵠ],
		[ΔΔⵠ, "s", 0, 216, 130, 1],
		[ⲆⵠⲆ, "s", 1, 217, 129, 1],
		[Δⵠᐃ, "s", ⵠᐃΔ, 218, 128, ⲆⲆⵠ],
		[ΔΔⵠ, "s", ΔΔⵠ, 217, 127, ⵠᐃᐃ],
		[ᐃⲆⲆ, "s", Δⵠⵠ, 217, 126, ⲆⲆⵠ],
		[ⲆⲆⵠ, "s", ᐃⲆⲆ, 217, 125, ⲆⲆⵠ],
		[1, "s", 0, 216, 124, 1],
		[ΔΔⵠ, "s", ᐃⲆⲆ, 215, 124, 1],
		[1, "s", 0, 214, 124, ⵠᐃᐃ],
		[1, "s", 1, 213, 125, 1],
		[1, "s", ⵠᐃΔ, 213, 126, ⲆⲆⵠ],
		[ⲆⲆⵠ, ᐃ[502], ⵠⵠΔⵠ, 217, 130, Δⵠⵠ],
		[1, ᐃ[502], 2, 212, 125, 0],
		[1, "p", Ⲇⵠᐃ, 214, 134, ⲆⲆⵠ],
		[1, "s", ⵠᐃᐃ, 211, 126, ⲆⵠⲆ],
		[ⲆⵠⲆ, "b", 1, 45, 277, 0],
		[ΔΔⵠ, "b", 1, 50, 286, 0],
		[1, "b", ᐃⵠΔⲆ, 51, 284, ⲆⲆᐃ],
		[ᐃⲆⲆ, "b", 1, 47, 287, 0],
		[1, "b", 0, 39, 285, ᐃⲆΔ],
		[ⲆⵠⲆ, "b", 3, 40, 283, 0],
		[ΔΔⵠ, "b", ⲆⲆΔ, 52, 283, 0],
		[1, "b", ᐃⲆⲆ, 51, 280, 0],
		[Δⵠᐃ, "g", 0, 45, 269, 1],
		[1, "p", 0, 55, 281, 1],
		[1, "b", ⵠᐃᐃ, 5, 172, 0],
		[1, "b", 2, 6, 172, 0],
		[1, "t", ⵠⲆⲆⲆ, ᐃⵠⵠᐃⵠ, 171, Ⲇⵠᐃ],
		[1, "t", ⲆⵠⲆ, ᐃⵠΔⵠ, 170, ⵠᐃΔ],
		[ⵠᐃᐃ, "t", 1, ⵠΔⲆᐃ, 164, 0],
		[Δⵠᐃ, "t", ⵠᐃⵠⲆ, ⵠⵠⲆⲆⵠ, 164, 0],
		[ᐃⲆⲆ, "b", 0, ⵠΔᐃᐃ, 165, 0],
		[1, "t", ⵠⲆᐃΔ, 5, 165, ⲆⲆΔ],
		[ⲆⵠⲆ, "b", 2, ⵠΔΔⵠⲆ, 166, 0],
		[ᐃⲆⲆ, "t", 4, ⵠⲆⲆⵠ, 166, 0],
		[ᐃⲆⲆ, "t", ⵠΔᐃⲆ, 6, 167, ⲆⲆᐃ],
		[1, "t", 2, ᐃⵠⵠᐃⵠ, 168, ⵠⵠᐃ],
		[1, "t", 0, 6, 169, 0],
		[1, "t", ΔΔⲆΔ, ᐃⵠⵠᐃⵠ, 170, ⲆⲆΔ],
		[ⵠᐃᐃ, "t", 0, 5, 167, ⲆⲆᐃ],
		[1, "t", 2, ᐃᐃᐃᐃ, 169, ⲆⲆᐃ],
		[ᐃⲆⲆ, "b", ⵠᐃⵠ, ⵠⲆⲆⲆ, 168, 0],
		[ⲆⵠⲆ, "s", 1, ⵠΔⵠᐃⲆ, 153, 1],
		[ΔΔⵠ, "s", 2, 7, 151, ⵠᐃᐃ],
		[1, ᐃ[457], 5, 7, 152, Δⵠⵠ],
		[ΔΔⵠ, "t", 1, 5, 154, ⵠⵠⵠ],
		[1, "b", ⵠᐃⵠ, ⵠΔΔⵠⲆ, 154, 0],
		[1, "t", ᐃⲆⵠᐃ, ᐃⵠⵠᐃⵠ, 155, 0],
		[ⵠᐃᐃ, "b", 2, ⵠⵠⲆᐃⲆ, 156, ⵠᐃⵠ],
		[ⲆⲆⵠ, "t", 2, ᐃᐃᐃᐃ, 157, 0],
		[1, "t", 4, ⵠⲆⲆⲆ, 155, Δⵠⵠ],
		[1, "b", ⵠⵠᐃ, 6, 157, ⵠᐃΔ],
		[ΔΔⵠ, "t", ⲆⵠⲆ, ⵠΔⲆᐃ, 156, ⵠⵠⵠ],
		[ⲆⵠⲆ, "t", ᐃⵠΔⵠ, 6, 158, ᐃⲆΔ],
		[ᐃⲆⲆ, "b", ᐃⲆⵠᐃ, 6, 159, 0],
		[ᐃⲆⲆ, "b", ⵠᐃΔ, ⵠΔΔⵠⲆ, 162, 0],
		[1, "t", 4, 6, 163, ⵠᐃΔ],
		[1, "t", 4, 6, 161, ⵠⵠᐃ],
		[1, "b", ⲆⲆⵠ, ⵠΔᐃᐃ, 160, ⲆⲆΔ],
		[ⲆⲆⵠ, "b", 2, 5, 163, Ⲇⵠᐃ],
		[1, "b", 2, 5, 158, 0],
		[Δⵠᐃ, "b", ⵠⵠᐃⲆ, ᐃᐃᐃᐃ, 161, ⵠⵠⵠ],
		[1, "t", 1, 5, 162, 0],
		[ⵠᐃᐃ, "t", 1, ⵠⲆⲆⵠ, 160, ⵠᐃⵠ],
		[1, "b", 1, 85, 176, ⵠᐃΔ],
		[1, "b", ⵠⵠᐃⲆ, 83, 178, 0],
		[ΔΔⵠ, "s", 1, 82, 177, 1],
		[ᐃⲆⲆ, "b", 0, 76, 172, ᐃⲆᐃ],
		[1, "b", ⲆⵠⵠⲆ, 76, 174, 0],
		[1, "t", ⵠᐃⵠⲆ, 73, 174, 0],
		[1, "t", 5, 72, 175, 0],
		[Δⵠᐃ, "t", 5, 87, 173, ᐃⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 2, 76, 175, Ⲇⵠᐃ],
		[ΔΔⵠ, ᐃ[457], ⲆⲆΔΔ, 77, 171, Δⵠⵠ],
		[ⵠᐃᐃ, ᐃ[457], 3, 86, 177, ᐃⲆΔ],
		[1, ᐃ[457], ᐃⲆⵠᐃ, 71, 175, 0],
		[1, "s", 1, 70, 174, ⲆⲆⵠ],
		[1, "r", 48, 174, ⵠᐃΔ],
		[Δⵠᐃ, "r", 49, 175, 0],
		[ᐃⲆⲆ, "r", 50, 175, 0],
		[ⲆⲆⵠ, "r", 51, 175, ⲆⲆΔ],
		[ΔΔⵠ, "r", 51, 174, 0],
		[ΔΔⵠ, "r", 50, 174, 0],
		[1, "r", 49, 174, ⵠᐃⵠ],
		[ΔΔⵠ, "r", 52, 175, ⵠᐃΔ],
		[ⲆⲆⵠ, "r", 52, 176, 0],
		[1, "r", 51, 176, 0],
		[1, "r", 50, 176, ⵠⵠⵠ],
		[ⲆⵠⲆ, "r", 49, 176, 0],
		[ⵠᐃᐃ, "r", 48, 175, ᐃⲆΔ],
		[Δⵠᐃ, "r", 47, 175, ⲆⲆΔ],
		[ΔΔⵠ, "r", 48, 176, ᐃⲆΔ],
		[ⲆⵠⲆ, "r", 69, 163, ⲆⲆᐃ],
		[1, "r", 70, 163, ⵠᐃⵠ],
		[ⲆⲆⵠ, "r", 71, 163, ⵠⵠᐃ],
		[1, "r", 73, 163, 0],
		[1, "r", 72, 163, ᐃⲆΔ],
		[1, "r", 73, 164, ⵠⵠⵠ],
		[ⵠᐃᐃ, "r", 72, 164, 0],
		[ΔΔⵠ, "r", 71, 164, ⵠᐃΔ],
		[ⲆⵠⲆ, "r", 70, 164, ⲆⲆΔ],
		[ⲆⵠⲆ, "r", 69, 164, ⵠᐃⵠ],
		[ᐃⲆⲆ, "r", 68, 164, ⵠᐃΔ],
		[1, "r", 68, 165, Ⲇⵠᐃ],
		[1, "r", 69, 165, 0],
		[1, "r", 70, 165, 0],
		[ᐃⲆⲆ, "r", 71, 165, 0],
		[ⲆⲆⵠ, "r", 72, 165, ⲆⲆᐃ],
		[ⲆⲆⵠ, "r", 74, 164, 0],
		[Δⵠᐃ, "r", 73, 165, 0],
		[1, "r", 72, 166, ⵠⵠⵠ],
		[ⵠᐃᐃ, "r", 71, 166, 0],
		[1, "r", 70, 166, ⵠᐃⵠ],
		[ΔΔⵠ, "r", 74, 165, Δⵠⵠ],
		[1, "r", 24, 164, 0],
		[1, "r", 25, 164, 0],
		[1, "r", 27, 164, ⵠᐃⵠ],
		[1, "r", 26, 164, ᐃⲆᐃ],
		[1, "r", 28, 165, 0],
		[ⲆⲆⵠ, "r", 26, 165, ⲆⲆΔ],
		[1, "r", 27, 165, 0],
		[1, "r", 25, 165, 0],
		[Δⵠᐃ, "r", 24, 165, ᐃⲆΔ],
		[1, "r", 23, 165, Ⲇⵠᐃ],
		[1, "r", 22, 165, ᐃⲆΔ],
		[1, "r", 21, 165, 0],
		[1, "r", 21, 166, ᐃⲆΔ],
		[ΔΔⵠ, "r", 22, 166, ⵠᐃⵠ],
		[1, "r", 23, 166, ⵠⵠⵠ],
		[ⵠᐃᐃ, "r", 24, 166, ᐃⲆᐃ],
		[1, "r", 25, 166, ⵠⵠⵠ],
		[1, "r", 26, 166, ⵠⵠⵠ],
		[ⵠᐃᐃ, "r", 27, 166, ⵠᐃΔ],
		[ΔΔⵠ, "r", 28, 166, 0],
		[1, "r", 28, 167, ⲆⲆᐃ],
		[Δⵠᐃ, "r", 26, 167, 0],
		[ᐃⲆⲆ, "r", 25, 167, ⲆⲆᐃ],
		[ⲆⵠⲆ, "r", 24, 167, 0],
		[1, "r", 23, 167, 0],
		[Δⵠᐃ, "r", 22, 167, 0],
		[1, "r", 27, 167, ᐃⲆᐃ],
		[Δⵠᐃ, "r", 29, 166, 0],
		[1, "r", 29, 167, 0],
		[1, "r", 28, 168, ᐃⲆΔ],
		[ΔΔⵠ, "r", 27, 168, ᐃⲆΔ],
		[ΔΔⵠ, "r", 26, 168, 0],
		[ⵠᐃᐃ, "r", 25, 168, ᐃⲆΔ],
		[ⲆⲆⵠ, "r", 24, 168, ⵠᐃΔ],
		[ⵠᐃᐃ, "r", 23, 168, Ⲇⵠᐃ],
		[1, "r", 27, 169, ⵠᐃⵠ],
		[ⲆⲆⵠ, "r", 26, 169, ⵠⵠᐃ],
		[1, "r", 25, 169, ⵠᐃΔ],
		[1, "r", 24, 169, 0],
		[1, "r", 23, 169, ⲆⲆΔ],
		[1, "r", 22, 168, ⵠⵠᐃ],
		[1, "r", 21, 167, Δⵠⵠ],
		[ⲆⵠⲆ, "s", 1, 52, 174, ⲆⲆⵠ],
		[1, "t", ⵠᐃᐃΔ, 50, 177, 0],
		[ᐃⲆⲆ, "t", ΔⲆⲆⲆ, 49, 177, ᐃⲆΔ],
		[ⵠᐃᐃ, "b", ⵠⵠⵠ, 47, 174, ⲆⲆΔ],
		[1, "b", ⵠⵠⵠ, 69, 166, 0],
		[1, "t", 2, 68, 166, ⵠⵠⵠ],
		[ⲆⲆⵠ, "t", 5, 74, 163, ⵠⵠᐃ],
		[1, "t", Δⵠᐃ, 73, 162, 0],
		[ⲆⵠⲆ, "s", 0, 73, 166, 1],
		[1, "s", ⵠⵠᐃⲆ, 76, 165, ⵠᐃᐃ],
		[ᐃⲆⲆ, "g", 2, 59, 175, Δⵠᐃ],
		[ⵠᐃᐃ, "p", 0, 78, 168, ⲆⲆⵠ],
		[1, "p", ⵠⵠᐃ, 61, 162, 1],
		[Δⵠᐃ, "p", 0, 42, 170, 1],
		[1, "p", ⵠⵠⵠ, 20, 174, ⵠᐃᐃ],
		[ⲆⲆⵠ, "p", 0, 16, 160, ᐃⲆⲆ],
		[1, "b", 1, 23, 164, 0],
		[1, "b", 1, 28, 169, Ⲇⵠᐃ],
		[ⲆⵠⲆ, "b", 2, 29, 168, ᐃⲆΔ],
		[1, "b", ᐃⲆⵠᐃ, ⲆⵠΔᐃΔ, 170, ⵠᐃΔ],
		[1, "t", ⲆⵠⲆ, 15, 171, ⵠᐃⵠ],
		[ΔΔⵠ, "t", ᐃⵠΔⵠ, ⲆᐃᐃⵠΔΔᐃ, 175, ᐃⲆᐃ],
		[1, "t", ᐃᐃᐃᐃ, 19, 166, 0],
		[ⵠᐃᐃ, "t", ΔⲆⵠⵠ, 26, 163, ⵠⵠᐃ],
		[1, "s", 1, 29, 165, 1],
		[1, "t", ⲆⵠⲆᐃ, ᐃⵠΔⲆⲆ, 167, 0],
		[1, "t", 0, 29, 176, 0],
		[ΔΔⵠ, "b", ᐃⲆⵠᐃ, 30, 175, 0],
		[1, "t", 2, 24, 177, 0],
		[1, "b", ⲆⵠⲆ, 37, 174, 0],
		[ΔΔⵠ, "b", ᐃⲆᐃ, 35, 172, 0],
		[1, "b", ⲆΔⲆᐃ, 37, 170, ⲆⲆΔ],
		[ΔΔⵠ, "t", 4, 38, 169, 0],
		[1, "t", ΔⲆⲆⲆ, 34, 173, ᐃⲆᐃ],
		[ⲆⵠⲆ, "t", Δᐃᐃⵠ, 38, 175, 0],
		[1, "b", ⵠⲆΔᐃ, 39, 173, ⵠᐃΔ],
		[ΔΔⵠ, "t", ⵠⲆᐃΔ, 37, 176, Ⲇⵠᐃ],
		[ΔΔⵠ, "t", ΔᐃᐃΔ, 30, 168, 0],
		[ⵠᐃᐃ, "s", 2, 35, 176, ⲆⲆⵠ],
		[Δⵠᐃ, "s", Δⵠᐃ, 41, 175, 1],
		[1, "b", ⵠⵠΔⵠ, 53, 176, 0],
		[ⲆⵠⲆ, "t", ⵠΔⲆᐃ, 55, 173, ⵠᐃⵠ],
		[ⲆⲆⵠ, "t", ⵠⲆⲆⲆ, 45, 170, 0],
		[1, "b", 1, 53, 162, ⲆⲆΔ],
		[1, "b", ᐃⲆᐃ, 50, 164, 0],
		[ⵠᐃᐃ, "t", 2, 54, 163, Ⲇⵠᐃ],
		[ⵠᐃᐃ, "t", 3, 49, 165, 0],
		[ⲆⲆⵠ, "t", 4, 48, 160, 0],
		[1, "t", 4, 57, 164, 0],
		[ᐃⲆⲆ, "t", ⵠΔᐃⲆ, 66, 162, 0],
		[1, "b", ⲆⵠⲆ, 86, 161, 0],
		[Δⵠᐃ, "b", 2, 81, 163, 0],
		[1, "t", 3, 85, 162, ⵠᐃⵠ],
		[Δⵠᐃ, "t", 5, 81, 162, 0],
		[1, "t", 5, 88, 163, ᐃⲆᐃ],
		[1, "t", ⲆⲆⵠ, 84, 166, ᐃⲆΔ],
		[1, "t", 5, 72, 160, ⵠᐃⵠ],
		[ᐃⲆⲆ, "t", ⵠⲆⲆⲆ, 70, 170, ⵠᐃⵠ],
		[Δⵠᐃ, "s", Δⵠᐃ, 57, 162, 1],
		[ΔΔⵠ, "b", 1, 39, 161, 0],
		[1, "b", Δⵠⵠ, 34, 164, Δⵠⵠ],
		[1, "b", ⵠⵠΔⵠ, 54, 164, ⵠⵠⵠ],
		[ⲆⵠⲆ, "t", Δⵠᐃ, 59, 169, 0],
		[ᐃⲆⲆ, "t", ⲆΔⲆⲆ, 60, 170, ⵠⵠⵠ],
		[ΔΔⵠ, "t", 4, 63, 169, ⲆⲆΔ],
		[1, "t", ⵠΔᐃⲆ, 63, 174, 0],
		[1, "t", 1, 62, 175, ⵠⵠⵠ],
		[1, "t", 5, 40, 162, 0],
		[1, "t", ΔΔⵠ, 63, 180, 0],
		[ⲆⵠⲆ, "t", ᐃⵠΔⲆ, 64, 179, ⵠⵠᐃ],
		[ΔΔⵠ, "t", 2, 35, 165, ⵠⵠⵠ],
		[1, "s", 1, 63, 173, 1],
		[Δⵠᐃ, "s", 2, 40, 165, ⲆⲆⵠ],
		[1, "b", 0, 46, 169, 0],
		[ΔΔⵠ, ᐃ[457], 22, 74, 168, 0],
		[1, ᐃ[457], 22, 86, 168, 0],
		[1, ᐃ[457], 22, 83, 175, 0],
		[ΔΔⵠ, ᐃ[457], 22, 78, 175, ⵠᐃⵠ],
		[1, ᐃ[457], 19, 72, 176, ⵠᐃⵠ],
		[1, ᐃ[457], 19, 68, 168, Δⵠⵠ],
		[1, ᐃ[457], ΔΔΔⲆᐃ, 65, 163, ⵠⵠᐃ],
		[Δⵠᐃ, ᐃ[457], ΔᐃⵠⲆⲆ, 75, 162, 0],
		[1, ᐃ[457], ⲆⵠᐃᐃⲆ, 80, 162, ᐃⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 19, 88, 159, 0],
		[ⲆⵠⲆ, ᐃ[457], 19, 87, 164, 0],
		[Δⵠᐃ, ᐃ[457], 19, 61, 177, 0],
		[1, ᐃ[457], ⲆⵠᐃᐃⲆ, 59, 172, Ⲇⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], ⲆⵠⲆⵠⲆ, 59, 167, Ⲇⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], ⵠⲆⵠⲆᐃ, 53, 165, ᐃⲆᐃ],
		[Δⵠᐃ, ᐃ[457], ᐃᐃⲆΔⵠ, 56, 163, 0],
		[ⵠᐃᐃ, ᐃ[457], ᐃᐃⲆΔⵠ, 51, 161, Δⵠⵠ],
		[ⲆⲆⵠ, ᐃ[457], 19, 48, 167, 0],
		[1, ᐃ[457], 19, 47, 170, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], ⲆⵠⲆⵠⲆ, 41, 163, 0],
		[ⲆⵠⲆ, ᐃ[457], 19, 37, 161, 0],
		[1, ᐃ[457], ΔᐃⵠⲆⲆ, 36, 166, ⲆⲆᐃ],
		[1, ᐃ[457], 19, 36, 171, ⵠⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], 19, 34, 174, ᐃⲆᐃ],
		[ⲆⲆⵠ, ᐃ[457], ⵠᐃⵠᐃⵠ, 40, 172, 0],
		[1, ᐃ[457], ⲆⵠⲆⵠⲆ, 38, 177, ᐃⲆᐃ],
		[ΔΔⵠ, ᐃ[457], ⵠⲆⵠⲆᐃ, 42, 176, 0],
		[1, ᐃ[457], ⲆⵠᐃᐃⲆ, 53, 178, 0],
		[1, ᐃ[457], ⲆⵠᐃᐃⲆ, 53, 172, 0],
		[1, ᐃ[457], ΔᐃᐃΔΔ, 64, 181, ᐃⲆᐃ],
		[1, ᐃ[457], 19, 64, 175, ⲆⲆᐃ],
		[1, ᐃ[457], ⲆⵠⲆⵠⲆ, 79, 172, 0],
		[ⲆⲆⵠ, ᐃ[457], ⵠⲆⵠⲆᐃ, 30, 170, 0],
		[ⵠᐃᐃ, ᐃ[457], ⵠⲆⵠⲆᐃ, ᐃᐃⵠⲆΔⲆᐃ, 168, ᐃⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 19, ⲆⲆᐃⲆⲆⲆⵠ, 173, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], ᐃΔΔⵠΔ, ⵠⲆᐃᐃⲆ, 162, ⵠⵠᐃ],
		[1, ᐃ[457], ΔᐃⵠⲆⲆ, ΔᐃΔⲆⵠ, 167, Δⵠⵠ],
		[1, ᐃ[457], 19, ⲆⲆⲆⵠⵠ, 161, Δⵠⵠ],
		[ⲆⲆⵠ, ᐃ[457], 19, 27, 162, Ⲇⵠᐃ],
		[1, ᐃ[457], 19, 83, 195, ⵠᐃⵠ],
		[ⲆⵠⲆ, ᐃ[457], ⵠⵠᐃⲆ, 85, 163, 0],
		[ᐃⲆⲆ, ᐃ[457], 2, 80, 164, Ⲇⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 2, 84, 169, 0],
		[ΔΔⵠ, ᐃ[457], 2, 55, 165, 0],
		[ⵠᐃᐃ, ᐃ[457], ⵠⵠⲆᐃ, 46, 163, ⵠᐃⵠ],
		[1, ᐃ[457], ⵠⵠᐃⲆ, 66, 169, ᐃⲆᐃ],
		[ᐃⲆⲆ, ᐃ[457], 0, 63, 175, ⵠⵠⵠ],
		[1, ᐃ[457], ⵠᐃⵠ, 34, 164, ⵠⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 0, ΔⲆᐃᐃᐃ, 160, ⵠᐃΔ],
		[ⲆⲆⵠ, ᐃ[457], 2, 40, 160, ⵠⵠⵠ],
		[1, ᐃ[457], 2, 53, 160, 0],
		[Δⵠᐃ, ᐃ[457], 2, 14, 170, 0],
		[ⵠᐃᐃ, ᐃ[457], 2, 19, 175, 0],
		[ⲆⵠⲆ, ᐃ[457], ⵠⲆΔᐃ, 23, 176, 0],
		[ⲆⵠⲆ, ᐃ[457], 5, 60, 147, ᐃⲆΔ],
		[1, ᐃ[457], 33, 59, 160, ⵠᐃⵠ],
		[1, ᐃ[457], 33, 85, 157, ⲆⲆΔ],
		[ⵠᐃᐃ, ᐃ[457], 33, 29, 143, Ⲇⵠᐃ],
		[1, ᐃ[457], 33, 62, 140, ⵠⵠⵠ],
		[1, ᐃ[457], 33, 43, 127, ᐃⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 33, ⲆⵠΔᐃⲆ, 129, ⲆⲆΔ],
		[1, ᐃ[457], 33, 50, 134, 0],
		[ΔΔⵠ, ᐃ[457], 33, 79, 127, ᐃⲆᐃ],
		[1, ᐃ[457], 33, 89, 139, 0],
		[ⲆⵠⲆ, "b", 1, 44, 156, 0],
		[1, "t", ᐃᐃⲆⵠ, 45, 157, 0],
		[1, "b", 0, 75, 156, ⲆⲆΔ],
		[Δⵠᐃ, "t", 3, 76, 157, Δⵠⵠ],
		[ΔΔⵠ, "t", 5, 62, 157, Ⲇⵠᐃ],
		[1, "t", ΔΔⵠⵠ, 79, 156, 0],
		[1, "t", ⵠΔⲆᐃ, 41, 156, 0],
		[1, "b", 1, 28, 156, ⲆⲆΔ],
		[ⲆⵠⲆ, "t", ⵠⲆΔᐃ, 27, 157, 0],
		[1, "t", 4, 21, 156, 0],
		[ΔΔⵠ, "t", 4, 56, 159, 0],
		[ⲆⲆⵠ, "f", ΔΔⵠ, 94, 153, ⲆⲆⵠ],
		[1, "f", 2, 93, 153, ⲆⵠⲆ],
		[1, "f", ᐃᐃⲆⵠ, 99, 153, 1],
		[1, "f", 1, 98, 153, 1],
		[1, "f", 0, 97, 153, 1],
		[ⲆⵠⲆ, "f", 1, 96, 153, 1],
		[1, "s", Δⵠᐃ, ⵠᐃⵠⲆⲆ, 149, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[457], ⲆⲆⲆΔ, 7, 150, ⵠᐃⵠ],
		[1, "b", ⵠⵠⲆᐃ, 43, 281, ⵠᐃⵠ],
		[Δⵠᐃ, ᐃ[457], 50, 24, 39, 0],
		[1, ᐃ[457], 50, 21, 39, 0],
		[1, ᐃ[457], 50, 22, 43, 0],
		[ⲆⲆⵠ, ᐃ[457], 50, 15, 34, 0],
		[ⲆⵠⲆ, ᐃ[457], 50, ⲆⵠΔᐃⲆ, 26, 0],
		[1, ᐃ[457], 50, 44, 42, ⵠᐃⵠ],
		[ⲆⲆⵠ, ᐃ[457], 50, 57, 39, ⵠᐃⵠ],
		[ᐃⲆⲆ, ᐃ[457], 50, 62, 43, 0],
		[ΔΔⵠ, ᐃ[457], 50, 77, 44, 0],
		[ᐃⲆⲆ, ᐃ[457], 50, 71, 41, 0],
		[ΔΔⵠ, ᐃ[457], 50, 55, 39, Ⲇⵠᐃ],
		[Δⵠᐃ, ᐃ[457], 50, 22, 39, ⵠⵠᐃ],
		[1, ᐃ[457], 50, ⲆⲆⲆⵠⵠ, 41, 0],
		[ⲆⲆⵠ, ᐃ[457], 50, 18, 21, ⵠᐃΔ],
		[1, ᐃ[457], 50, 15, 21, 0],
		[ᐃⲆⲆ, ᐃ[457], 50, 18, 19, Ⲇⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 50, 17, ⵠΔⲆᐃⵠ, 0],
		[ⲆⲆⵠ, ᐃ[457], 50, 18, ΔΔⲆΔΔ, ⵠⵠⵠ],
		[ΔΔⵠ, ᐃ[457], 50, 18, 9, Δⵠⵠ],
		[ⵠᐃᐃ, ᐃ[457], 50, 52, 41, ⵠⵠᐃ],
		[ⵠᐃᐃ, ᐃ[457], 50, 82, 39, 0],
		[ⲆⲆⵠ, ᐃ[457], 50, 86, 38, Δⵠⵠ],
		[1, ᐃ[457], 50, 84, 31, 0],
		[1, ᐃ[457], 50, 86, 30, ⵠⵠⵠ],
		[1, ᐃ[457], 50, 84, 26, Ⲇⵠᐃ],
		[1, ᐃ[457], 50, 86, 23, ⲆⲆΔ],
		[ΔΔⵠ, ᐃ[457], 50, 86, ᐃᐃᐃΔⲆ, ⵠᐃⵠ],
		[1, ᐃ[457], 50, 29, 42, 0],
		[ⲆⵠⲆ, ᐃ[457], 9, 74, 37, 0],
		[ⲆⵠⲆ, ᐃ[457], 9, 76, 22, 0],
		[1, ᐃ[457], ᐃⲆᐃⲆⲆ, 79, 24, 0],
		[1, ᐃ[457], ⵠⵠⲆᐃΔ, 77, 17, ⵠᐃⵠ],
		[1, ᐃ[457], 36, 81, 25, 0],
		[1, ᐃ[457], 36, 80, 36, 0],
		[ⵠᐃᐃ, ᐃ[457], 36, 21, 36, ᐃⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], 28, 23, 22, ⵠᐃΔ],
		[ⲆⵠⲆ, ᐃ[457], 28, 27, 31, 0],
		[ᐃⲆⲆ, ᐃ[457], 28, 69, 36, ⵠᐃⵠ],
		[ΔΔⵠ, ᐃ[457], 28, 80, ᐃᐃⲆⵠΔ, ⵠᐃⵠ],
		[ⵠᐃᐃ, ᐃ[457], 51, 24, 155, ⵠᐃⵠ],
		[ⲆⲆⵠ, ᐃ[457], 51, ⲆᐃⲆⲆΔ, 154, 0],
		[ᐃⲆⲆ, ᐃ[457], 51, 11, 154, 0],
		[Δⵠᐃ, ᐃ[457], 51, 12, 156, 0],
		[ᐃⲆⲆ, ᐃ[457], 51, 16, 154, 0],
		[1, ᐃ[457], 51, 20, 154, ⵠᐃΔ],
		[ᐃⲆⲆ, ᐃ[457], 51, 23, 154, 0],
		[ᐃⲆⲆ, ᐃ[457], 51, 18, 157, Δⵠⵠ],
		[1, ᐃ[457], 51, 31, 154, ⵠⵠᐃ],
		[ⲆⵠⲆ, ᐃ[457], 51, 32, 157, 0],
		[ⲆⲆⵠ, ᐃ[457], 51, 86, 154, ⲆⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 51, 88, 156, Δⵠⵠ],
		[ΔΔⵠ, ᐃ[457], 51, 82, 154, 0],
		[ᐃⲆⲆ, ᐃ[457], 51, 80, 154, 0],
		[ⵠᐃᐃ, ᐃ[457], 51, 77, 154, 0],
		[ᐃⲆⲆ, ᐃ[457], 51, 74, 154, ᐃⲆᐃ],
		[ⲆⲆⵠ, ᐃ[457], 51, 71, 154, 0],
		[ᐃⲆⲆ, ᐃ[457], 51, 67, 154, 0],
		[1, ᐃ[457], 51, 60, 154, ᐃⲆᐃ],
		[ⲆⲆⵠ, ᐃ[457], 51, 57, 154, 0],
		[1, ᐃ[457], 51, 65, 154, 0],
		[ᐃⲆⲆ, ᐃ[457], 51, 68, 156, 0],
		[1, ᐃ[457], 51, 59, 156, 0],
		[ⲆⲆⵠ, ᐃ[457], 51, 55, 154, 0],
		[ⵠᐃᐃ, ᐃ[457], 51, 54, 154, 0],
		[ⲆⲆⵠ, ᐃ[457], 51, 52, 154, ᐃⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 51, 55, 155, 0],
		[1, ᐃ[457], 51, 54, 157, ⵠⵠᐃ],
		[1, ᐃ[457], 51, 49, 154, 0],
		[ⲆⲆⵠ, ᐃ[457], 51, 46, 154, ᐃⲆᐃ],
		[1, ᐃ[457], 51, 44, 154, 0],
		[ΔΔⵠ, ᐃ[457], 51, 43, 154, ⵠⵠᐃ],
		[Δⵠᐃ, ᐃ[457], 51, 41, 154, 0],
		[1, ᐃ[457], 51, 38, 154, ᐃⲆᐃ],
		[1, ᐃ[457], 51, 39, 156, ⵠⵠⵠ],
		[1, ᐃ[457], 51, 34, 154, Ⲇⵠᐃ],
		[ΔΔⵠ, ᐃ[457], ᐃⵠΔⵠ, ⲆⵠⲆⵠⲆ, 142, 0],
		[ᐃⲆⲆ, ᐃ[457], ΔΔⵠⵠ, 37, 147, ⵠⵠⵠ],
		[Δⵠᐃ, ᐃ[457], 7, 53, 147, ⲆⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], ΔΔΔᐃΔ, 69, 150, 0],
		[Δⵠᐃ, ᐃ[457], ΔΔⲆΔ, 94, 148, ⵠⵠⵠ],
		[ⲆⲆⵠ, ᐃ[457], ΔⲆΔⲆ, 66, 147, ⲆⲆᐃ],
		[1, ᐃ[457], ⵠΔᐃⲆ, ΔΔⵠⲆⵠ, 145, Δⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], ΔⲆⲆⲆ, 28, 137, 0],
		[ΔΔⵠ, ᐃ[457], ⵠΔᐃⲆ, 15, 137, 0],
		[ⵠᐃᐃ, ᐃ[457], ᐃⵠⵠⲆ, 48, 134, 0],
		[ΔΔⵠ, ᐃ[457], ᐃⵠΔⵠ, 67, 135, 0],
		[ᐃⲆⲆ, ᐃ[457], 34, 84, 155, ⲆⲆΔ],
		[ⲆⵠⲆ, ᐃ[457], 35, 70, 156, 0],
		[1, ᐃ[457], 35, 51, 156, ⲆⲆΔ],
		[ⵠᐃᐃ, ᐃ[457], 35, 56, 157, ⲆⲆᐃ],
		[1, ᐃ[457], 35, 65, 159, 0],
		[1, ᐃ[457], 35, 23, 156, 0],
		[1, ᐃ[457], 35, ⵠⵠⲆΔⲆ, 155, ᐃⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], 35, 8, 155, ⲆⲆᐃ],
		[1, ᐃ[457], 33, 13, 155, 0],
		[1, ᐃ[457], 33, 33, 158, ⲆⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], 36, 78, 155, 0],
		[1, ᐃ[457], 36, 87, 157, ⵠᐃΔ],
		[ⵠᐃᐃ, ᐃ[70], ⲆⵠⲆ, 73, 36, 0],
		[ΔΔⵠ, ᐃ[70], 1, 80, 24, 0],
		[1, ᐃ[70], 2, 67, 36, ⵠᐃⵠ],
		[ⵠᐃᐃ, ᐃ[70], ⵠⵠΔⵠ, 45, 36, Δⵠⵠ],
		[1, ᐃ[70], 2, 53, 34, 0],
		[ᐃⲆⲆ, ᐃ[70], 1, 51, 35, ⲆⲆΔ],
		[1, ᐃ[70], 1, 58, 35, ⵠⵠᐃ],
		[1, ᐃ[70], ⵠᐃᐃ, 33, 35, 0],
		[1, ᐃ[70], ΔΔⵠ, 31, 33, ᐃⲆΔ],
		[1, ᐃ[70], 2, 29, 36, ⲆⲆΔ],
		[1, ᐃ[70], ⵠⵠᐃⲆ, 56, 36, ⵠᐃⵠ],
		[Δⵠᐃ, ᐃ[70], ⵠⲆΔᐃ, 60, 37, ᐃⲆᐃ],
		[1, ᐃ[70], ⵠⵠᐃⲆ, 45, 32, 0],
		[1, ᐃ[70], 2, 22, 25, 0],
		[Δⵠᐃ, ᐃ[70], 2, 21, 35, ⲆⲆᐃ],
		[1, ᐃ[457], 52, 90, 208, ⵠⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], ΔⲆᐃᐃᐃ, 94, 250, 0],
		[1, ᐃ[457], 17, 95, 253, 0],
		[ΔΔⵠ, ᐃ[153], 0, 140, ⵠΔⲆᐃ, ⲆⵠⲆ],
		[1, ᐃ[153], 2, 139, ᐃⵠΔⵠ, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], ᐃⲆⵠᐃ, 138, 5, 1],
		[1, ᐃ[153], 2, 138, 6, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], ⵠⵠΔⵠ, 139, 6, 1],
		[Δⵠᐃ, ᐃ[153], ⵠⵠΔⵠ, 141, ⵠⲆⵠⵠⵠ, 1],
		[1, ᐃ[153], ᐃᐃⲆⵠ, 140, 6, ⵠᐃᐃ],
		[1, ᐃ[566], ⲆΔⲆᐃ, 143, 7, 1],
		[Δⵠᐃ, ᐃ[566], 3, 139, 7, 1],
		[ΔΔⵠ, ᐃ[153], ⵠᐃΔ, 137, 7, 1],
		[1, ᐃ[153], ΔΔⵠ, 138, 8, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], 2, 137, ⲆⲆⲆⵠΔ, ⲆⵠⲆ],
		[1, ᐃ[153], ⵠⲆΔᐃ, 137, ᐃΔᐃⵠⲆ, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], 2, 136, 7, 1],
		[ⲆⲆⵠ, ᐃ[153], 2, 138, ΔᐃΔⲆⵠ, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], ⲆΔⲆᐃ, 139, 9, ⲆⲆⵠ],
		[1, ᐃ[153], ΔᐃΔⲆ, 136, 8, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], 3, 137, ⲆⲆⵠⵠᐃ, 1],
		[ⲆⵠⲆ, ᐃ[457], 53, 92, 165, ⵠᐃⵠ],
		[Δⵠᐃ, ᐃ[457], 53, 92, 180, 0],
		[1, ᐃ[457], 53, 92, 188, ⲆⲆΔ],
		[1, ᐃ[457], 54, 92, 153, ⵠⵠⵠ],
		[ΔΔⵠ, ᐃ[457], 54, 91, 153, 0],
		[ᐃⲆⲆ, ᐃ[457], 54, 90, 153, 0],
		[Δⵠᐃ, ᐃ[457], 54, 89, 153, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], 54, 88, 153, 0],
		[Δⵠᐃ, ᐃ[457], 54, 87, 153, ᐃⲆᐃ],
		[1, ᐃ[457], 54, 86, 153, ᐃⲆΔ],
		[1, ᐃ[457], 54, 85, 153, 0],
		[1, ᐃ[457], 54, 84, 153, ⵠⵠᐃ],
		[Δⵠᐃ, ᐃ[457], 54, 83, 153, 0],
		[ⲆⲆⵠ, ᐃ[457], 54, 82, 153, 0],
		[ⵠᐃᐃ, ᐃ[457], 54, 81, 153, 0],
		[ⲆⵠⲆ, ᐃ[457], 54, 80, 153, Ⲇⵠᐃ],
		[1, ᐃ[457], 54, 79, 153, ⵠᐃⵠ],
		[ᐃⲆⲆ, ᐃ[457], 54, 78, 153, ⵠᐃΔ],
		[ⲆⵠⲆ, ᐃ[457], 54, 77, 153, 0],
		[ⲆⲆⵠ, ᐃ[457], 54, 76, 153, 0],
		[ⲆⲆⵠ, ᐃ[457], 54, 75, 153, 0],
		[Δⵠᐃ, ᐃ[457], 54, 74, 153, ⲆⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 54, 73, 153, 0],
		[ⲆⵠⲆ, ᐃ[457], 54, 72, 153, 0],
		[1, ᐃ[457], 54, 70, 153, 0],
		[1, ᐃ[457], 54, 71, 153, 0],
		[ᐃⲆⲆ, ᐃ[457], 54, 69, 153, 0],
		[Δⵠᐃ, ᐃ[457], 54, 68, 153, 0],
		[Δⵠᐃ, ᐃ[457], 54, 67, 153, ⵠᐃⵠ],
		[1, ᐃ[457], 54, 66, 153, 0],
		[1, ᐃ[457], 54, 65, 153, ᐃⲆΔ],
		[ⲆⵠⲆ, ᐃ[457], 54, 64, 153, ⲆⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 54, 63, 153, ⵠⵠⵠ],
		[1, ᐃ[457], 54, 61, 153, 0],
		[ⲆⲆⵠ, ᐃ[457], 54, 62, 153, ᐃⲆΔ],
		[1, ᐃ[457], 54, 60, 153, 0],
		[Δⵠᐃ, ᐃ[457], 54, 59, 153, ⵠᐃⵠ],
		[1, ᐃ[457], 54, 57, 153, 0],
		[Δⵠᐃ, ᐃ[457], 54, 58, 153, ⵠᐃΔ],
		[ΔΔⵠ, ᐃ[457], 54, 56, 153, 0],
		[1, ᐃ[457], 54, 55, 153, ⵠⵠᐃ],
		[1, ᐃ[457], 54, 54, 153, ⲆⲆᐃ],
		[1, ᐃ[457], 54, 53, 153, 0],
		[ⲆⵠⲆ, ᐃ[457], 54, 52, 153, 0],
		[1, ᐃ[457], 54, 51, 153, ⲆⲆΔ],
		[Δⵠᐃ, ᐃ[457], 54, 50, 153, 0],
		[Δⵠᐃ, ᐃ[457], 54, 49, 153, ᐃⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 54, 48, 153, 0],
		[ⲆⵠⲆ, ᐃ[457], 54, 47, 153, ⵠⵠᐃ],
		[1, ᐃ[457], 54, 46, 153, ⵠⵠᐃ],
		[1, ᐃ[457], 54, 45, 153, 0],
		[ⲆⵠⲆ, ᐃ[457], 54, 44, 153, ᐃⲆᐃ],
		[1, ᐃ[457], 54, 43, 153, 0],
		[1, ᐃ[457], 54, 42, 153, 0],
		[1, ᐃ[457], 54, 41, 153, 0],
		[ⲆⲆⵠ, ᐃ[457], 54, 40, 153, ⵠⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 54, 39, 153, 0],
		[ΔΔⵠ, ᐃ[457], 54, 37, 153, ⵠⵠᐃ],
		[1, ᐃ[457], 54, 38, 153, Ⲇⵠᐃ],
		[1, ᐃ[457], 54, 36, 153, ⵠᐃΔ],
		[Δⵠᐃ, ᐃ[457], 54, 35, 153, Ⲇⵠᐃ],
		[ΔΔⵠ, ᐃ[457], 54, 34, 153, 0],
		[1, ᐃ[457], 54, 33, 153, ᐃⲆᐃ],
		[1, ᐃ[457], 54, 32, 153, 0],
		[1, ᐃ[457], 54, 31, 153, Ⲇⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 54, 30, 153, ⵠⵠⵠ],
		[1, ᐃ[457], 54, 29, 153, 0],
		[ⵠᐃᐃ, ᐃ[457], 54, 28, 153, 0],
		[Δⵠᐃ, ᐃ[457], 54, 27, 153, 0],
		[ⲆⵠⲆ, ᐃ[457], 54, 26, 153, 0],
		[ΔΔⵠ, ᐃ[457], 54, 25, 153, 0],
		[1, ᐃ[457], 54, 24, 153, Ⲇⵠᐃ],
		[1, ᐃ[457], 54, 23, 153, ⵠⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 54, 22, 153, ⵠⵠⵠ],
		[1, ᐃ[457], 54, 21, 153, 0],
		[1, ᐃ[457], 54, ⲆⲆⲆⵠⵠ, 153, ⲆⲆΔ],
		[ΔΔⵠ, ᐃ[457], 54, 19, 153, 0],
		[ΔΔⵠ, ᐃ[457], 54, 18, 153, 0],
		[Δⵠᐃ, ᐃ[457], 54, ⲆⵠⲆⲆΔΔΔ, 153, 0],
		[1, ᐃ[457], 54, ⲆⲆᐃΔⵠ, 153, 0],
		[Δⵠᐃ, ᐃ[457], 54, 15, 153, ⵠᐃⵠ],
		[ⵠᐃᐃ, ᐃ[457], 54, ᐃᐃᐃΔⲆ, 153, 0],
		[1, ᐃ[457], 54, 13, 153, 0],
		[1, ᐃ[457], 54, 12, 153, 0],
		[1, ᐃ[457], 54, ᐃΔΔᐃⲆᐃΔ, 153, 0],
		[1, ᐃ[457], 54, 10, 153, 0],
		[Δⵠᐃ, ᐃ[457], 54, 8, 153, 0],
		[ⲆⵠⲆ, ᐃ[457], 54, 9, 153, 0],
		[1, ᐃ[457], 55, 83, 8, 0],
		[ⲆⲆⵠ, ᐃ[457], 55, 83, ⵠⵠⵠᐃⵠ, 0],
		[1, ᐃ[457], 55, 83, ΔⵠΔᐃΔ, 0],
		[ⵠᐃᐃ, ᐃ[457], 55, 83, ⲆΔΔⵠⵠ, ⲆⲆΔ],
		[1, ᐃ[457], 55, 83, ⲆᐃⵠⲆⵠ, 0],
		[ⲆⵠⲆ, ᐃ[457], 55, 83, 13, ⲆⲆΔ],
		[1, ᐃ[457], 55, 83, 14, 0],
		[1, ᐃ[457], 55, 83, 15, 0],
		[1, ᐃ[457], 55, 83, ⲆⲆᐃΔⵠ, 0],
		[Δⵠᐃ, ᐃ[457], 55, 83, ΔᐃΔⵠΔᐃⲆ, 0],
		[1, ᐃ[457], 55, 83, ⵠᐃⵠᐃⵠ, ⲆⲆΔ],
		[1, ᐃ[457], 55, 83, 18, Ⲇⵠᐃ],
		[1, ᐃ[457], 55, 83, ⲆⲆⲆⲆᐃ, Ⲇⵠᐃ],
		[1, ᐃ[457], 55, 83, 21, 0],
		[1, ᐃ[457], 55, 83, 22, 0],
		[Δⵠᐃ, ᐃ[457], 55, 83, 23, 0],
		[1, ᐃ[457], 55, 83, 24, ⵠⵠⵠ],
		[ⵠᐃᐃ, ᐃ[457], 55, 83, 25, ᐃⲆᐃ],
		[1, ᐃ[457], 55, 83, 26, ᐃⲆΔ],
		[1, ᐃ[457], 55, 83, 27, ⲆⲆᐃ],
		[Δⵠᐃ, ᐃ[457], 55, 83, 28, 0],
		[1, ᐃ[457], 55, 83, 29, 0],
		[ΔΔⵠ, ᐃ[457], 55, 83, 30, Ⲇⵠᐃ],
		[1, ᐃ[457], 55, 83, 31, 0],
		[ⲆⲆⵠ, ᐃ[457], 55, 83, 32, ᐃⲆᐃ],
		[1, ᐃ[457], 55, 83, 33, ⵠⵠⵠ],
		[1, ᐃ[457], 55, 83, 34, Δⵠⵠ],
		[1, ᐃ[457], 55, 83, 36, ⵠᐃΔ],
		[ᐃⲆⲆ, ᐃ[457], 55, 83, 35, 0],
		[ⲆⵠⲆ, ᐃ[457], 55, 83, 37, ⵠⵠᐃ],
		[ⲆⵠⲆ, ᐃ[457], 55, 83, 38, ⵠᐃΔ],
		[ᐃⲆⲆ, ᐃ[457], 55, 81, 38, 0],
		[Δⵠᐃ, ᐃ[457], 55, 82, 38, 0],
		[1, ᐃ[457], 55, 80, 38, 0],
		[ⵠᐃᐃ, ᐃ[457], 55, 79, 38, 0],
		[ⲆⵠⲆ, ᐃ[457], 55, 78, 38, ⵠⵠⵠ],
		[1, ᐃ[457], 55, 77, 38, Ⲇⵠᐃ],
		[1, ᐃ[457], 55, 76, 38, 0],
		[1, ᐃ[457], 55, 75, 38, 0],
		[ⲆⲆⵠ, ᐃ[457], 55, 73, 38, ⵠⵠⵠ],
		[ⵠᐃᐃ, ᐃ[457], 55, 74, 38, ⵠⵠⵠ],
		[ⲆⲆⵠ, ᐃ[457], 55, 72, 38, ⵠⵠⵠ],
		[1, ᐃ[457], 55, 71, 38, 0],
		[ⵠᐃᐃ, ᐃ[457], 55, 70, 38, 0],
		[ΔΔⵠ, ᐃ[457], 55, 68, 38, ⵠᐃⵠ],
		[ⲆⲆⵠ, ᐃ[457], 55, 69, 38, ⵠᐃⵠ],
		[ⲆⵠⲆ, ᐃ[457], 55, 67, 38, ⵠⵠᐃ],
		[1, ᐃ[457], 55, 66, 38, ᐃⲆΔ],
		[1, ᐃ[457], 55, 65, 38, Ⲇⵠᐃ],
		[ΔΔⵠ, ᐃ[457], 55, 64, 38, 0],
		[ᐃⲆⲆ, ᐃ[457], 55, 63, 38, 0],
		[1, ᐃ[457], 55, 62, 38, 0],
		[1, ᐃ[457], 55, 60, 38, 0],
		[1, ᐃ[457], 55, 61, 38, 0],
		[1, ᐃ[457], 55, 59, 38, 0],
		[Δⵠᐃ, ᐃ[457], 55, 57, 38, 0],
		[1, ᐃ[457], 55, 58, 38, ⲆⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], 55, 56, 38, ⲆⲆΔ],
		[1, ᐃ[457], 55, 55, 38, 0],
		[ᐃⲆⲆ, ᐃ[457], 55, 54, 38, ⵠⵠⵠ],
		[1, ᐃ[457], 55, 53, 38, 0],
		[ΔΔⵠ, ᐃ[457], 55, 52, 38, Ⲇⵠᐃ],
		[ⵠᐃᐃ, ᐃ[457], 55, 51, 38, 0],
		[ᐃⲆⲆ, ᐃ[457], 55, 49, 38, Ⲇⵠᐃ],
		[1, ᐃ[457], 55, 50, 38, 0],
		[1, ᐃ[457], 55, 48, 38, 0],
		[1, ᐃ[457], 55, 47, 38, ᐃⲆΔ],
		[1, ᐃ[457], 55, 46, 38, ⲆⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 55, 45, 38, 0],
		[Δⵠᐃ, ᐃ[457], 55, 44, 38, 0],
		[ⵠᐃᐃ, ᐃ[457], 55, 43, 38, ⵠⵠᐃ],
		[1, ᐃ[457], 55, 42, 38, Ⲇⵠᐃ],
		[ⵠᐃᐃ, ᐃ[457], 55, 41, 38, 0],
		[1, ᐃ[457], 55, 40, 38, ⵠᐃⵠ],
		[1, ᐃ[457], 55, 39, 38, Ⲇⵠᐃ],
		[1, ᐃ[457], 55, 38, 38, ᐃⲆΔ],
		[1, ᐃ[457], 55, 37, 38, 0],
		[1, ᐃ[457], 55, 36, 38, ᐃⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 55, 34, 38, ⲆⲆΔ],
		[1, ᐃ[457], 55, 35, 38, ⲆⲆᐃ],
		[1, ᐃ[457], 55, 33, 38, ⵠⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], 55, 31, 38, Ⲇⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], 55, 32, 38, ᐃⲆᐃ],
		[1, ᐃ[457], 55, 30, 38, 0],
		[1, ᐃ[457], 55, 29, 38, 0],
		[ⵠᐃᐃ, ᐃ[457], 55, 28, 38, 0],
		[ⲆⵠⲆ, ᐃ[457], 55, 27, 38, ᐃⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], 55, 26, 38, ⵠⵠⵠ],
		[1, ᐃ[457], 55, 25, 38, 0],
		[ⲆⲆⵠ, ᐃ[457], 55, 24, 38, ⵠᐃⵠ],
		[ᐃⲆⲆ, ᐃ[457], 55, 23, 38, ⵠⵠⵠ],
		[1, ᐃ[457], 55, 21, 38, 0],
		[ΔΔⵠ, ᐃ[457], 55, 22, 38, ⵠⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 55, 20, 38, 0],
		[Δⵠᐃ, ᐃ[457], 55, ΔΔΔⲆᐃ, 38, 0],
		[ⲆⵠⲆ, ᐃ[457], 55, 19, 37, ⵠᐃΔ],
		[Δⵠᐃ, ᐃ[457], 55, ⲆⵠⲆⵠⲆ, 36, ᐃⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], 55, 19, 35, Ⲇⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], 55, 19, 34, 0],
		[ᐃⲆⲆ, ᐃ[457], 55, 19, 33, ⵠᐃⵠ],
		[ⲆⵠⲆ, ᐃ[457], 55, 19, 32, ⲆⲆΔ],
		[1, ᐃ[457], 55, 19, 31, 0],
		[ⲆⲆⵠ, ᐃ[457], 55, ⲆⵠᐃᐃⲆ, 30, ⵠⵠᐃ],
		[1, ᐃ[457], 55, ΔΔΔⲆᐃ, 28, ⵠᐃⵠ],
		[Δⵠᐃ, ᐃ[457], 55, ᐃΔΔⵠΔ, 29, ⲆⲆΔ],
		[1, ᐃ[457], 55, 19, 27, 0],
		[ⵠᐃᐃ, ᐃ[457], 55, 19, 26, 0],
		[1, ᐃ[457], 55, 19, 25, Ⲇⵠᐃ],
		[1, ᐃ[457], 55, ᐃⵠᐃⲆⲆ, 24, ⲆⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], 55, ᐃᐃⲆΔⵠ, 23, 0],
		[ᐃⲆⲆ, ᐃ[457], 55, ΔᐃⵠⲆⲆ, 22, 0],
		[1, ᐃ[457], 55, 19, 21, 0],
		[1, ᐃ[457], 55, 19, ⲆΔⲆⲆⵠ, 0],
		[1, ᐃ[457], 55, 19, ᐃⲆΔΔⲆ, ⵠⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 55, ⲆⵠⲆⵠⲆ, 19, 0],
		[ⲆⲆⵠ, ᐃ[457], 55, ΔᐃᐃΔΔ, ⲆⵠΔᐃΔ, ⵠᐃⵠ],
		[1, ᐃ[457], 55, 19, 17, ⵠⵠᐃ],
		[ⵠᐃᐃ, ᐃ[457], 55, ⲆⵠⲆⵠⲆ, ΔᐃΔⵠᐃ, ⵠᐃⵠ],
		[ⵠᐃᐃ, ᐃ[457], 55, 19, 14, ⵠᐃΔ],
		[1, ᐃ[457], 55, 19, ⲆΔⵠΔᐃⵠⵠ, 0],
		[1, ᐃ[457], 55, 19, 12, 0],
		[1, ᐃ[457], 55, ⵠⲆⵠⲆᐃ, ᐃΔᐃⵠΔΔᐃ, 0],
		[1, ᐃ[457], 55, ⲆⵠᐃᐃⲆ, 10, 0],
		[1, ᐃ[457], 55, ᐃΔΔⵠΔ, ᐃΔⵠᐃᐃ, ᐃⲆΔ],
		[Δⵠᐃ, ᐃ[457], 55, 19, 8, 0],
		[ⵠᐃᐃ, ᐃ[457], 55, 84, 35, ⲆⲆΔ],
		[1, ᐃ[457], 55, 84, 32, ⵠⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 55, 84, 25, 0],
		[1, ᐃ[457], 50, 84, 24, 0],
		[ⲆⵠⲆ, ᐃ[457], 55, 84, ᐃᐃⲆⵠΔ, ᐃⲆΔ],
		[1, ᐃ[457], 55, 84, ΔΔΔΔᐃ, 0],
		[1, ᐃ[457], 55, 84, ⲆⵠΔᐃΔ, 0],
		[ⵠᐃᐃ, ᐃ[457], 50, 84, ᐃⵠᐃᐃΔ, Ⲇⵠᐃ],
		[1, ᐃ[457], 55, 84, ⲆⲆⲆᐃⲆ, 0],
		[ⲆⲆⵠ, ᐃ[457], 55, 84, ΔⵠⵠᐃⲆ, 0],
		[1, ᐃ[457], 50, 85, ᐃΔΔᐃⲆᐃΔ, ⲆⲆΔ],
		[Δⵠᐃ, ᐃ[457], 55, 81, 39, 0],
		[1, ᐃ[457], 50, 83, 40, ⵠⵠⵠ],
		[1, ᐃ[457], 55, 72, 39, 0],
		[ⲆⵠⲆ, ᐃ[457], 55, 74, 39, 0],
		[Δⵠᐃ, ᐃ[457], 55, 66, 39, ⵠⵠⵠ],
		[1, ᐃ[457], 55, 65, 39, 0],
		[ⲆⵠⲆ, ᐃ[457], 50, 67, 41, 0],
		[1, ᐃ[457], 55, 56, 39, 0],
		[1, ᐃ[457], 55, 58, 39, 0],
		[1, ᐃ[457], 55, 50, 39, 0],
		[1, ᐃ[457], 50, 49, 39, 0],
		[ᐃⲆⲆ, ᐃ[457], 55, 44, 39, 0],
		[ⲆⲆⵠ, ᐃ[457], 55, 42, 39, ⲆⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 50, 43, 39, ⲆⲆΔ],
		[1, ᐃ[457], 50, 41, 39, 0],
		[1, ᐃ[457], 50, 37, 39, 0],
		[ᐃⲆⲆ, ᐃ[457], 55, 36, 39, 0],
		[Δⵠᐃ, ᐃ[457], 55, 32, 39, 0],
		[ᐃⲆⲆ, ᐃ[457], 50, 31, 39, ⵠⵠᐃ],
		[ⵠᐃᐃ, ᐃ[457], 55, 23, 39, Δⵠⵠ],
		[1, ᐃ[457], 55, 18, 37, ᐃⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], 50, ⵠⵠᐃᐃⲆΔⵠ, 36, 0],
		[ΔΔⵠ, ᐃ[457], 55, 18, 35, ᐃⲆΔ],
		[1, ᐃ[457], 50, ᐃⲆΔΔⲆ, 34, 0],
		[ⵠᐃᐃ, ᐃ[457], 55, 18, 31, 0],
		[1, ᐃ[457], 50, ⲆⲆΔⵠⲆ, 30, ⵠⵠⵠ],
		[ⲆⵠⲆ, ᐃ[457], 55, ⵠΔⲆᐃΔ, 25, Δⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], 50, ᐃⲆΔΔⲆ, 24, ⲆⲆΔ],
		[1, ᐃ[457], 55, ᐃⲆΔΔⲆ, ⲆⲆⲆⲆᐃ, ⵠⵠⵠ],
		[ΔΔⵠ, ᐃ[457], 55, 18, ⵠⵠΔΔⵠ, 0],
		[Δⵠᐃ, ᐃ[457], 50, ᐃⵠⲆⲆΔ, 15, 0],
		[ⵠᐃᐃ, ᐃ[457], 55, ⲆⵠΔᐃⲆ, ⲆⲆᐃⲆⵠ, ⵠᐃΔ],
		[ⲆⲆⵠ, ᐃ[457], 54, 90, 154, 0],
		[ᐃⲆⲆ, ᐃ[457], 51, 89, 154, ᐃⲆᐃ],
		[1, ᐃ[457], 54, 85, 154, 0],
		[1, ᐃ[457], 54, 81, 154, 0],
		[1, ᐃ[457], 54, 76, 154, 0],
		[1, ᐃ[457], 54, 70, 154, 0],
		[1, ᐃ[457], 54, 66, 154, 0],
		[1, ᐃ[457], 54, 61, 154, ⲆⲆᐃ],
		[1, ᐃ[457], 54, 56, 154, 0],
		[1, ᐃ[457], 54, 53, 154, 0],
		[1, ᐃ[457], 54, 45, 154, 0],
		[1, ᐃ[457], 54, 42, 154, 0],
		[ΔΔⵠ, ᐃ[457], 54, 37, 154, 0],
		[1, ᐃ[457], 54, 30, 154, 0],
		[1, ᐃ[457], 54, 25, 154, ᐃⲆΔ],
		[1, ᐃ[457], 54, 17, 154, 0],
		[ΔΔⵠ, ᐃ[457], 54, ΔⵠⲆᐃΔ, 154, 0],
		[ⲆⵠⲆ, ᐃ[457], 54, ⲆⲆⲆᐃⲆ, 154, 0],
		[1, ᐃ[457], 55, 20, ΔⲆΔᐃΔ, 0],
		[ⲆⵠⲆ, ᐃ[457], 53, 93, 154, ᐃⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], 53, 93, 156, 0],
		[ⵠᐃᐃ, ᐃ[457], 53, 93, 158, 0],
		[ⵠᐃᐃ, ᐃ[457], 52, 91, 157, ᐃⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 53, 93, 159, 0],
		[1, ᐃ[457], 53, 93, 161, ᐃⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], 53, 93, 162, 0],
		[ᐃⲆⲆ, ᐃ[457], 53, 93, 163, Δⵠⵠ],
		[1, ᐃ[457], 53, 93, 164, 0],
		[ΔΔⵠ, ᐃ[457], 53, 93, 165, Δⵠⵠ],
		[1, ᐃ[457], 53, 93, 166, ᐃⲆΔ],
		[1, ᐃ[457], 53, 93, 167, Ⲇⵠᐃ],
		[Δⵠᐃ, ᐃ[457], 52, 91, 167, 0],
		[ⲆⲆⵠ, ᐃ[457], 53, 93, 169, 0],
		[ⵠᐃᐃ, ᐃ[457], 53, 93, 168, Δⵠⵠ],
		[Δⵠᐃ, ᐃ[457], 53, 93, 170, ᐃⲆᐃ],
		[1, ᐃ[457], 53, 93, 171, ⵠⵠᐃ],
		[1, ᐃ[457], 53, 93, 173, ᐃⲆᐃ],
		[ᐃⲆⲆ, ᐃ[457], 53, 93, 176, ⲆⲆΔ],
		[1, ᐃ[457], 53, 93, 175, 0],
		[ΔΔⵠ, ᐃ[457], 53, 92, 169, 0],
		[1, ᐃ[457], 53, 93, 178, 0],
		[1, ᐃ[457], 53, 93, 179, Ⲇⵠᐃ],
		[ΔΔⵠ, ᐃ[457], 53, 93, 180, 0],
		[1, ᐃ[457], 53, 93, 181, 0],
		[ⲆⵠⲆ, ᐃ[457], 53, 93, 183, ⵠⵠⵠ],
		[Δⵠᐃ, ᐃ[457], 53, 93, 184, ⵠᐃΔ],
		[1, ᐃ[457], 53, 93, 186, 0],
		[1, ᐃ[457], 18, 95, 185, ⵠᐃΔ],
		[1, ᐃ[457], 53, 93, 187, 0],
		[1, ᐃ[457], 53, 93, 188, 0],
		[ΔΔⵠ, ᐃ[457], 52, 91, 186, 0],
		[ⲆⲆⵠ, ᐃ[457], 53, 93, 190, Ⲇⵠᐃ],
		[ᐃⲆⲆ, ᐃ[457], 53, 93, 192, 0],
		[ⲆⵠⲆ, ᐃ[457], 53, 93, 195, ᐃⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 53, 93, 194, 0],
		[Δⵠᐃ, ᐃ[457], 52, 91, 196, 0],
		[ⲆⵠⲆ, ᐃ[457], 53, 93, 197, 0],
		[1, ᐃ[457], 53, 93, 200, 0],
		[ⲆⲆⵠ, ᐃ[457], 53, 93, 198, 0],
		[ⲆⲆⵠ, ᐃ[457], 53, 93, 201, 0],
		[Δⵠᐃ, ᐃ[457], 53, 93, 202, 0],
		[Δⵠᐃ, ᐃ[457], 53, 93, 203, Ⲇⵠᐃ],
		[1, ᐃ[457], 53, 93, 204, Ⲇⵠᐃ],
		[1, ᐃ[457], 53, 93, 206, 0],
		[1, ᐃ[457], 53, 93, 205, ⵠⵠⵠ],
		[Δⵠᐃ, ᐃ[457], 53, 93, 207, 0],
		[ΔΔⵠ, ᐃ[457], 53, 93, 209, 0],
		[ΔΔⵠ, ᐃ[457], 53, 93, 210, 0],
		[1, ᐃ[457], 53, 93, 212, ᐃⲆᐃ],
		[1, ᐃ[457], 52, 91, 204, 0],
		[Δⵠᐃ, ᐃ[457], 53, 93, 213, 0],
		[1, ᐃ[457], 53, 93, 214, ⵠⵠⵠ],
		[Δⵠᐃ, ᐃ[457], 53, 93, 215, ⲆⲆΔ],
		[Δⵠᐃ, ᐃ[457], 53, 93, 216, 0],
		[ⵠᐃᐃ, ᐃ[457], 53, 93, 217, ᐃⲆᐃ],
		[ᐃⲆⲆ, ᐃ[457], 53, 93, 218, ᐃⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], 53, 93, 219, ⵠᐃⵠ],
		[ΔΔⵠ, ᐃ[457], 53, 93, 220, ⵠⵠⵠ],
		[1, ᐃ[457], 52, 92, 213, ᐃⲆᐃ],
		[1, ᐃ[457], 52, 92, 206, ᐃⲆΔ],
		[ⲆⲆⵠ, ᐃ[457], 52, 92, 202, ᐃⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 53, 92, 201, 0],
		[ᐃⲆⲆ, ᐃ[457], 52, 92, 194, ⲆⲆᐃ],
		[ΔΔⵠ, ᐃ[457], 52, 92, 178, 0],
		[ⲆⵠⲆ, ᐃ[457], 52, 92, 171, ⵠⵠⵠ],
		[1, ᐃ[457], 53, 93, 221, 0],
		[Δⵠᐃ, ᐃ[457], 53, 93, 222, 0],
		[1, ᐃ[457], 53, 93, 223, 0],
		[Δⵠᐃ, ᐃ[457], 53, 93, 225, 0],
		[1, ᐃ[457], 53, 93, 228, ᐃⲆΔ],
		[ΔΔⵠ, ᐃ[457], 53, 93, 227, Δⵠⵠ],
		[1, ᐃ[457], 52, 92, 217, ⵠⵠⵠ],
		[1, ᐃ[457], 53, 92, 218, ⵠⵠᐃ],
		[1, ᐃ[457], 52, 92, 221, 0],
		[1, ᐃ[457], 52, 92, 225, 0],
		[1, ᐃ[457], 52, 93, 226, 0],
		[1, ᐃ[457], 52, 93, 224, ⲆⲆᐃ],
		[1, ᐃ[457], 52, 93, 208, 0],
		[ΔΔⵠ, ᐃ[457], 52, 93, 211, ⲆⲆᐃ],
		[1, ᐃ[457], 52, 93, 196, ⵠᐃΔ],
		[1, ᐃ[457], 52, 93, 199, 0],
		[ᐃⲆⲆ, ᐃ[457], 52, 93, 189, 0],
		[1, ᐃ[457], 52, 93, 191, 0],
		[1, ᐃ[457], 52, 93, 193, ⵠⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], 52, 93, 182, ⵠⵠⵠ],
		[Δⵠᐃ, ᐃ[457], 52, 93, 185, 0],
		[1, ᐃ[457], 52, 93, 172, 0],
		[ⵠᐃᐃ, ᐃ[457], 52, 93, 174, ⲆⲆᐃ],
		[ⲆⵠⲆ, ᐃ[457], 52, 93, 177, 0],
		[Δⵠᐃ, ᐃ[457], 52, 93, 155, Δⵠⵠ],
		[ⲆⲆⵠ, ᐃ[457], 52, 93, 157, 0],
		[1, ᐃ[457], 52, 93, 160, 0],
		[1, ᐃ[457], 52, 92, 162, 0],
		[ᐃⲆⲆ, ᐃ[457], 53, 93, 229, 0],
		[1, ᐃ[457], 53, 93, 231, 0],
		[1, ᐃ[457], 53, 93, 232, 0],
		[ⲆⵠⲆ, ᐃ[457], 53, 93, 234, 0],
		[1, ᐃ[457], 52, 93, 230, 0],
		[ᐃⲆⲆ, ᐃ[457], 52, 92, 228, ⵠᐃⵠ],
		[ᐃⲆⲆ, ᐃ[457], 53, 93, 235, 0],
		[1, ᐃ[457], 53, 93, 236, ⵠᐃⵠ],
		[1, ᐃ[457], 53, 93, 237, 0],
		[ⵠᐃᐃ, ᐃ[457], 53, 93, 239, Δⵠⵠ],
		[ⲆⲆⵠ, ᐃ[457], 53, 93, 240, 0],
		[1, ᐃ[457], 52, 93, 238, Δⵠⵠ],
		[1, ᐃ[457], 53, 93, 241, 0],
		[1, ᐃ[457], 52, 93, 242, ⲆⲆᐃ],
		[1, ᐃ[457], 52, 93, 243, ᐃⲆΔ],
		[1, ᐃ[457], 53, 93, 244, Ⲇⵠᐃ],
		[ⵠᐃᐃ, ᐃ[457], 53, 93, 246, ⵠᐃⵠ],
		[1, ᐃ[457], 53, 93, 245, 0],
		[1, ᐃ[457], 52, 93, 247, ⵠᐃⵠ],
		[ᐃⲆⲆ, ᐃ[457], 53, 93, 248, Δⵠⵠ],
		[1, ᐃ[457], 52, 92, 235, ᐃⲆΔ],
		[ⲆⵠⲆ, ᐃ[457], 52, 92, 245, 0],
		[1, ᐃ[457], 52, 93, 249, 0],
		[ΔΔⵠ, ᐃ[457], 53, 93, 250, 0],
		[1, ᐃ[457], 53, 93, 251, 0],
		[Δⵠᐃ, ᐃ[457], 53, 93, 252, Ⲇⵠᐃ],
		[1, ᐃ[457], 53, 93, 254, Δⵠⵠ],
		[1, ᐃ[457], 52, 93, 253, 0],
		[ⲆⲆⵠ, ᐃ[457], 52, 93, 255, ⲆⲆᐃ],
		[1, ᐃ[457], 53, 93, 257, ⲆⲆΔ],
		[1, ᐃ[457], 53, 93, 256, ⵠⵠⵠ],
		[1, ᐃ[457], 52, 93, 258, ⵠⵠⵠ],
		[ΔΔⵠ, ᐃ[457], 53, 93, 259, 0],
		[ⲆⵠⲆ, ᐃ[457], 52, 93, 260, ⲆⲆΔ],
		[1, ᐃ[457], 53, 93, 263, Δⵠⵠ],
		[ᐃⲆⲆ, ᐃ[457], 53, 93, 264, 0],
		[1, ᐃ[457], 53, 93, 265, 0],
		[ᐃⲆⲆ, ᐃ[457], 52, 93, 266, 0],
		[ⲆⲆⵠ, ᐃ[457], 53, 93, 267, 0],
		[ᐃⲆⲆ, ᐃ[457], 52, 93, 268, Ⲇⵠᐃ],
		[1, ᐃ[457], 52, 93, 269, 0],
		[1, ᐃ[457], 53, 93, 276, 0],
		[1, ᐃ[457], 53, 93, 277, ᐃⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], 52, 93, 278, ᐃⲆᐃ],
		[1, ᐃ[457], 53, 93, 279, 0],
		[1, ᐃ[457], 52, 93, 280, 0],
		[ΔΔⵠ, ᐃ[457], 52, 93, 283, 0],
		[ⵠᐃᐃ, ᐃ[457], 53, 93, 284, 0],
		[Δⵠᐃ, ᐃ[457], 53, 93, 285, ⵠⵠⵠ],
		[1, ᐃ[457], 53, 93, 286, Ⲇⵠᐃ],
		[1, ᐃ[457], 52, 93, 287, 0],
		[1, ᐃ[457], 53, 93, 288, 0],
		[ⵠᐃᐃ, ᐃ[457], 53, 93, 289, ⵠⵠᐃ],
		[ΔΔⵠ, ᐃ[457], 52, 93, 290, 0],
		[1, ᐃ[457], 52, 93, 291, ⵠⵠᐃ],
		[ⲆⵠⲆ, ᐃ[457], 53, 93, 292, ⵠⵠⵠ],
		[1, ᐃ[457], 52, 93, 293, ᐃⲆΔ],
		[1, ᐃ[457], 53, 93, 294, 0],
		[ᐃⲆⲆ, ᐃ[457], 52, 93, 295, ᐃⲆΔ],
		[ⲆⵠⲆ, ᐃ[457], 52, 93, 296, 0],
		[ⵠᐃᐃ, ᐃ[457], 53, 93, 297, 0],
		[ⵠᐃᐃ, ᐃ[457], 53, 93, 298, ⵠᐃⵠ],
		[ⵠᐃᐃ, ᐃ[457], 52, 93, 299, ⲆⲆΔ],
		[ΔΔⵠ, ᐃ[457], 53, 93, 300, ⵠⵠᐃ],
		[1, ᐃ[457], 52, 92, 298, 0],
		[1, ᐃ[457], 52, 92, 293, 0],
		[ⲆⵠⲆ, "r", 92, 262, 0],
		[Δⵠᐃ, "r", 93, 262, ⲆⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], 52, 93, 261, ⲆⲆΔ],
		[1, ᐃ[153], 0, 223, 104, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 223, 105, 1],
		[ᐃⲆⲆ, ᐃ[153], 2, 223, 102, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠᐃⲆ, 223, 103, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[566], 3, 141, ⲆⲆⲆᐃⲆ, 1],
		[1, ᐃ[153], 2, 140, 9, ⲆⲆⵠ],
		[1, ᐃ[566], ΔᐃᐃΔ, 142, ⲆΔΔΔΔ, ⲆⵠⲆ],
		[ᐃⲆⲆ, ᐃ[457], 4, 81, 149, ⵠⵠⵠ],
		[1, "f", 0, 83, 148, ΔΔⵠ],
		[ᐃⲆⲆ, "f", 1, 82, 149, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[457], 34, 81, 156, 0],
		[1, ᐃ[457], 51, ᐃⲆᐃⵠΔ, ⲆⵠⲆⲆⵠ, 0],
		[1, ᐃ[457], 54, ⲆⲆᐃΔⵠ, ⵠᐃΔⲆⲆ, 0],
		[ⲆⵠⲆ, ᐃ[457], 54, ⵠⵠⲆΔⲆ, 9, 0],
		[ⲆⲆⵠ, ᐃ[153], 3, 223, 106, 1],
		[1, "p", 0, 119, 279, 1],
		[1, "p", 0, 109, 242, 1],
		[ΔΔⵠ, ᐃ[153], 1, 29, ᐃΔⵠⲆⲆ, 1],
		[1, ᐃ[153], 2, 30, ᐃΔⵠᐃᐃ, ΔΔⵠ],
		[1, ᐃ[153], 2, 31, ⵠⵠⵠᐃⵠ, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 32, ⵠⵠⵠᐃⵠ, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠΔⵠ, 33, ᐃΔⵠᐃᐃ, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠᐃⲆ, 69, ΔᐃΔⲆⵠ, Δⵠᐃ],
		[1, ᐃ[153], 2, 71, ΔⲆΔᐃΔ, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 70, ⲆⲆⵠⵠᐃ, 1],
		[ⵠᐃᐃ, ᐃ[153], ⲆⲆⵠ, 72, 9, ⲆⲆⵠ],
		[ⲆⵠⲆ, ᐃ[153], 2, 73, 9, 1],
		[ᐃⲆⲆ, ᐃ[457], 10, 31, 10, 0],
		[ΔΔⵠ, ᐃ[457], 10, 29, ᐃᐃᐃⲆⵠ, Ⲇⵠᐃ],
		[ⲆⲆⵠ, ᐃ[457], ΔΔⲆΔΔ, 44, 10, ⲆⲆᐃ],
		[ⵠᐃᐃ, ᐃ[457], 4, 87, 10, 0],
		[ᐃⲆⲆ, ᐃ[457], ⲆⲆⲆΔ, 86, ΔΔⲆΔΔ, ⲆⲆΔ],
		[ⵠᐃᐃ, ᐃ[457], 5, 87, 9, 0],
		[ΔΔⵠ, ᐃ[457], 5, 13, 10, 0],
		[1, ᐃ[457], ΔⲆⲆⲆ, 14, 11, ᐃⲆΔ],
		[ᐃⲆⲆ, ᐃ[457], 4, 16, ⲆΔᐃⵠΔ, ⵠᐃΔ],
		[Δⵠᐃ, ᐃ[457], 4, ⵠΔⲆᐃⵠ, ᐃᐃᐃⲆⵠ, 0],
		[1, ᐃ[153], 2, 146, 9, 1],
		[1, ᐃ[153], 2, 148, 9, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠᐃⲆ, 150, ⲆⲆⵠⵠᐃ, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⵠᐃⲆ, 153, ⲆⵠⲆⲆⵠ, Δⵠᐃ],
		[1, ᐃ[153], 2, 155, 9, ᐃⲆⲆ],
		[Δⵠᐃ, ᐃ[153], ⵠᐃᐃ, 149, ⵠⵠⵠᐃⵠ, ⲆⲆⵠ],
		[1, ᐃ[153], ⵠᐃᐃ, 154, ᐃΔⵠⲆⲆ, 1],
		[1, ᐃ[153], ⵠⲆᐃΔ, 147, ⵠᐃΔⲆⲆ, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], ⲆΔⲆᐃ, 151, 9, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠⲆⲆ, 152, ΔⲆΔᐃΔ, 1],
		[1, ᐃ[153], 3, 156, ⲆⵠⲆⲆⵠ, ⲆⲆⵠ],
		[1, ᐃ[153], 3, 157, ⵠⵠⵠᐃⵠ, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠⲆⲆ, 158, ᐃΔⵠⲆⲆ, 1],
		[1, ᐃ[153], ᐃΔᐃⲆ, 159, 9, 1],
		[1, ᐃ[153], ⵠⵠⲆⲆ, 160, ᐃⲆᐃᐃᐃ, ᐃⲆⲆ],
		[1, ᐃ[153], 0, 161, ⲆΔΔΔΔ, ⲆⲆⵠ],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 162, 9, 1],
		[ⵠᐃᐃ, ᐃ[153], ⵠⵠΔⵠ, 163, 9, ⲆⲆⵠ],
		[1, ᐃ[153], 1, 164, ⲆⲆⵠⵠᐃ, 1],
		[ΔΔⵠ, ᐃ[153], ⵠⲆΔᐃ, 165, 9, 1],
		[Δⵠᐃ, ᐃ[153], ⲆⵠⵠⲆ, 166, 9, ⵠᐃᐃ],
		[1, ᐃ[153], 3, 168, 9, 1],
		[1, ᐃ[153], ⵠⵠⲆⲆ, 170, ΔᐃΔⲆⵠ, 1],
		[1, ᐃ[153], 1, 169, 9, ᐃⲆⲆ],
		[1, ᐃ[153], 2, 167, ⵠⵠⵠᐃⵠ, 1],
		[ⵠᐃᐃ, ᐃ[153], 2, 171, 9, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[153], ⵠⲆΔᐃ, 173, ΔⲆΔᐃΔ, ΔΔⵠ],
		[ᐃⲆⲆ, ᐃ[153], 2, 172, ΔⲆΔᐃΔ, 1],
		[1, ᐃ[153], 2, 174, ⲆⵠⲆⲆⵠ, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[153], ⲆⵠⲆ, 175, 9, 1],
		[1, ᐃ[153], 3, 176, ᐃΔⵠⲆⲆ, ᐃⲆⲆ],
		[1, ᐃ[153], ᐃΔᐃⲆ, 178, 9, ⲆⵠⲆ],
		[Δⵠᐃ, ᐃ[153], 3, 179, 9, ΔΔⵠ],
		[ⲆⲆⵠ, ᐃ[153], ⲆⲆᐃ, 180, 9, 1],
		[ⵠᐃᐃ, ᐃ[153], ᐃᐃⲆⵠ, 177, ᐃΔⵠⲆⲆ, 1],
		[ⲆⵠⲆ, ᐃ[153], 2, 182, ᐃΔⵠⲆⲆ, ⲆⲆⵠ],
		[1, ᐃ[153], 2, 181, ΔⵠⵠᐃⲆ, ⵠᐃᐃ],
		[1, ᐃ[153], 2, 183, ᐃⲆᐃᐃᐃ, ⵠᐃᐃ],
		[ⲆⵠⲆ, ᐃ[153], 2, 184, ⲆΔΔΔΔ, 1],
		[1, ᐃ[153], 2, 185, 9, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], ⵠⵠΔⵠ, 186, ΔⲆΔᐃΔ, 1],
		[ΔΔⵠ, ᐃ[153], 1, 187, ⲆⵠⲆⲆⵠ, ΔΔⵠ],
		[1, ᐃ[153], 2, 188, ᐃⲆᐃᐃᐃ, ⲆⵠⲆ],
		[ⲆⵠⲆ, ᐃ[153], ΔᐃΔⲆ, 189, ᐃΔⵠⲆⲆ, ⲆⲆⵠ],
		[1, ᐃ[153], 3, 190, 9, ⲆⵠⲆ],
		[1, ᐃ[153], 3, 191, 9, ΔΔⵠ],
		[Δⵠᐃ, ᐃ[153], ⵠⲆΔᐃ, 192, 9, 1],
		[Δⵠᐃ, ᐃ[153], ᐃⲆΔ, 193, ⲆⵠⲆⲆⵠ, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 194, 9, 1],
		[1, ᐃ[153], ᐃⲆⵠᐃ, 196, 9, Δⵠᐃ],
		[1, ᐃ[153], 2, 198, 9, 1],
		[1, ᐃ[153], 2, 200, ⵠⵠⵠᐃⵠ, ΔΔⵠ],
		[1, ᐃ[153], ⵠⲆᐃΔ, 195, ⵠⵠⵠᐃⵠ, ᐃⲆⲆ],
		[1, ᐃ[153], ⲆⲆΔΔ, 197, 9, 1],
		[Δⵠᐃ, ᐃ[153], 3, 199, ⲆΔΔΔΔ, 1],
		[1, ᐃ[153], 0, 201, ΔᐃΔⲆⵠ, 1],
		[1, ᐃ[153], 2, 202, 9, 1],
		[1, ᐃ[153], ⵠⵠᐃⲆ, 203, 9, 1],
		[ᐃⲆⲆ, ᐃ[153], 3, 208, ⵠᐃΔⲆⲆ, 1],
		[ΔΔⵠ, ᐃ[153], 3, 207, ΔⲆΔᐃΔ, 1],
		[1, ᐃ[153], 3, 206, 9, ⵠᐃᐃ],
		[Δⵠᐃ, ᐃ[153], ⵠᐃᐃΔ, 205, ⵠᐃΔⲆⲆ, 1],
		[ⲆⵠⲆ, ᐃ[153], ⵠⵠⲆᐃ, 204, 9, ⵠᐃᐃ],
		[ⵠᐃᐃ, ᐃ[153], ᐃΔᐃⲆ, 214, ΔᐃΔⲆⵠ, ⲆⲆⵠ],
		[1, ᐃ[153], 3, 215, ΔⵠⵠᐃⲆ, ⲆⵠⲆ],
		[1, ᐃ[153], ⲆⵠⵠⲆ, 216, 9, ᐃⲆⲆ],
		[ᐃⲆⲆ, ᐃ[153], ⵠⵠⲆᐃ, 217, 9, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[153], ΔᐃΔⲆ, 218, ΔᐃΔⲆⵠ, 1],
		[1, "b", ᐃⲆΔ, ΔⲆⵠⵠ, 159, ⵠᐃⵠ],
		[ⵠᐃᐃ, "b", 0, ΔⲆⵠⵠ, 171, ⵠᐃΔ],
		[2, ᐃ[104], Δⵠᐃ, 122, 63, 0],
		[2, ᐃ[104], ⵠⲆΔᐃ, 119, 277, Δⵠⵠ],
		[2, ᐃ[104], ⵠⵠᐃⲆ, 109, 244, 0],
		[2, ᐃ[104], ᐃᐃⲆⵠ, 114, 205, 0],
		[2, ᐃ[104], 1, 120, 150, Ⲇⵠᐃ],
		[ᐃᐃⲆⵠ, ᐃ[104], ⵠⲆΔᐃ, 154, 129, Δⵠⵠ],
		[2, ᐃ[104], 0, 184, 158, 0],
		[2, ᐃ[104], ΔΔⵠ, 208, 128, 0],
		[2, ᐃ[104], 1, 215, 132, ⵠᐃΔ],
		[2, ᐃ[104], 1, 214, 128, ⵠᐃΔ],
		[2, ᐃ[104], 1, 209, 132, 0],
		[1, ᐃ[566], ΔᐃΔⲆ, 217, ⲆⲆⵠΔΔ, ᐃⲆⲆ],
		[1, ᐃ[566], ⵠᐃᐃ, 215, 19, Δⵠᐃ],
		[ΔΔⵠ, ᐃ[566], ⵠⵠᐃ, 212, 18, 1],
		[1, ᐃ[566], ΔΔⲆΔ, 214, 18, Δⵠᐃ],
		[1, ᐃ[566], ΔΔⲆΔ, 216, ⲆⵠⲆⵠⲆ, 1],
		[ΔΔⵠ, ᐃ[566], 4, 211, 20, 1],
		[1, ᐃ[566], ⲆⲆΔΔ, 210, ᐃⵠᐃⲆⲆ, 1],
		[1, ᐃ[566], ⵠᐃⵠⲆ, 215, 21, 1],
		[Δⵠᐃ, ᐃ[566], ⵠᐃᐃ, 214, 20, 1],
		[ⵠᐃᐃ, ᐃ[566], ΔᐃΔⲆ, 214, 22, ⲆⵠⲆ],
		[1, ᐃ[566], 3, 214, 24, ⲆⵠⲆ],
		[ⲆⲆⵠ, ᐃ[566], 4, 214, 26, 1],
		[ΔΔⵠ, ᐃ[566], ΔΔⲆΔ, 213, 27, ᐃⲆⲆ],
		[1, ᐃ[566], 1, 212, 28, ⲆⲆⵠ],
		[ΔΔⵠ, ᐃ[566], 2, 212, 29, Δⵠᐃ],
		[1, ᐃ[566], 5, 212, 30, 1],
		[Δⵠᐃ, ᐃ[566], ΔΔⲆΔ, 208, 19, 1],
		[1, ᐃ[566], 4, 207, 19, 1],
		[1, ᐃ[566], 1, 206, ΔᐃⵠⲆⲆ, ⲆⵠⲆ],
		[1, ᐃ[566], ΔΔⵠ, 205, 19, Δⵠᐃ],
		[1, ᐃ[566], ⵠⲆΔᐃ, 204, ᐃⵠᐃⲆⲆ, ⲆⵠⲆ],
		[1, ᐃ[566], 5, 203, ⲆⵠⲆⵠⲆ, ΔΔⵠ],
		[1, ᐃ[566], 3, 210, ᐃⲆᐃⲆᐃΔᐃ, ⲆⵠⲆ]
	];
	var ⲆΔ = ⵠⵠⵠ;
	let ⵠ = {
		"ⲆⵠᐃᐃΔ": ["#133A2B", ᐃ[53]],
		"ΔⲆⲆΔᐃΔⲆᐃᐃ": [ᐃ[427], ᐃ[213]],
		"ⲆᐃᐃΔⲆⵠΔ": ["#4EB687", ᐃ[469]],
		"ⲆΔⵠᐃⲆⲆⵠ": ["#664516", "#13474C"],
		"ⲆᐃⵠⵠⵠΔⲆ": ["#FCEFBB", "#0F4D48"],
		"ᐃⲆᐃⲆⲆΔΔ": ["#C1AA7E", "#0F423D"],
		"ⵠΔⲆᐃᐃΔΔ": ["#594837", ᐃ[117]],
		"ᐃⵠᐃⵠΔⲆⲆ": ["#A5D6D6", "#539CA0"],
		"ΔᐃⲆⲆⵠ": [ᐃ[482], ᐃ[24]],
		"ΔⲆⵠΔᐃⲆΔ": [ᐃ[132], ᐃ[556]],
		"ΔⲆΔᐃⲆⵠᐃ": [ᐃ[517], ᐃ[77]],
		"ΔⲆⲆΔⲆⲆⲆ": ["#ECF7F9", "#539CA0"],
		"ᐃΔΔΔⲆΔΔ": [ᐃ[448], ᐃ[448]],
		"ᐃᐃᐃⵠΔⲆⵠ": [ᐃ[448], ᐃ[448]],
		"ΔᐃⲆΔⵠΔⵠ": ["#1C9BA4", "#00272F"],
		"ᐃΔΔΔⵠ": ["#2D2017", "#031C1E"],
		"ⵠⲆⵠ": 0,
		"ᐃⵠΔ": Δⵠᐃ,
		"ⲆⵠᐃᐃⵠΔΔΔⵠ": 2300,
		"ⵠⵠΔᐃⵠⵠⲆᐃⵠ": 2290,
		"ᐃⵠⲆΔⵠⵠΔ": 34,
		"ⲆᐃⲆⲆⵠⵠΔ": 5,
		"ⲆᐃⲆⵠⲆΔᐃ": 68,
		"ᐃΔΔⵠⲆΔⵠ": 34,
		"ΔⵠⲆᐃΔΔᐃ": ⵠⲆⲆⲆ,
		"ⲆⵠⵠᐃⲆⵠⲆ": ⲆⲆⵠ,
		"ᐃⲆⲆᐃⲆΔⲆ": .6,
		"ⵠᐃⲆᐃᐃΔΔ": .25,
		"ᐃⵠᐃⲆΔᐃΔ": 50,
		"ⲆⲆⲆⵠΔⲆⲆ": 10,
		"ᐃⵠⵠΔⵠⲆΔ": 75,
		"ᐃΔΔᐃΔᐃⲆ": 20,
		"ⲆⵠⵠΔⲆⵠⵠ": 5,
		"ⲆⲆᐃΔΔ": ⲆΔ++,
		"ⵠⲆⲆⲆΔ": ⲆΔ++,
		"ΔⵠΔⲆΔ": ⲆΔ++,
		"ⵠᐃⲆᐃᐃ": ⲆΔ++,
		"ⵠᐃⵠΔⲆ": ⲆΔ++,
		"ᐃΔⵠⵠⵠ": ⲆΔ++,
		"ⲆⲆΔⲆᐃ": ⲆΔ++,
		"ΔΔⲆⵠᐃ": ⲆΔ++,
		"ᐃᐃΔᐃⵠ": ⲆΔ++,
		"ⲆⵠⲆΔΔ": ⲆΔ++,
		"ⵠΔᐃΔΔ": ⲆΔ++,
		"ᐃΔⲆΔⲆ": ⲆΔ++,
		"ᐃⵠᐃⵠᐃ": ⲆΔ++,
		"ΔⲆⵠᐃᐃ": ⲆΔ++,
		"ⵠⲆᐃⲆᐃ": ⲆΔ++,
		"ⵠᐃⲆᐃΔ": ⲆΔ++,
		"ᐃΔΔᐃⵠ": ⲆΔ++,
		"ΔᐃΔⲆⲆ": ⲆΔ++,
		"ⵠᐃⲆΔᐃ": ⲆΔ++,
		"ΔΔᐃᐃⲆ": ⲆΔ++,
		"ⵠΔᐃΔⵠ": ⲆΔ++,
		"ΔᐃΔᐃⲆ": ⲆΔ++,
		"ⵠᐃⵠⵠⲆ": ⲆΔ++,
		"ΔᐃᐃⲆᐃ": ⲆΔ++,
		"ⵠᐃᐃΔΔ": ⲆΔ++,
		"ⵠΔⵠΔᐃ": ⲆΔ++,
		"ᐃᐃΔᐃΔ": ⲆΔ++,
		"ⵠⵠᐃᐃⵠ": ⲆΔ++,
		"ⵠΔⲆΔᐃ": ⲆΔ++,
		"ⲆⵠⲆΔ": ⲆΔ++,
		"ⵠⲆⲆΔⲆ": ⲆΔ++,
		"ΔΔᐃᐃᐃ": ⲆΔ++,
		"ᐃⲆΔⵠᐃ": ⲆΔ++,
		"ⲆΔᐃⲆⲆ": ⲆΔ++,
		"ᐃᐃⵠᐃⲆ": ⲆΔ++,
		"ΔᐃΔⵠⲆ": ⲆΔ++,
		"ᐃⵠⵠΔᐃ": ⲆΔ++,
		"ᐃⲆᐃⵠⵠ": ⲆΔ++,
		"ⵠᐃᐃᐃⵠ": ⲆΔ++,
		"ᐃᐃⵠᐃΔ": ⲆΔ++,
		"ⵠΔⵠⲆⵠ": ⲆΔ++,
		"ⵠᐃⵠᐃⲆ": ⲆΔ++,
		"ᐃⵠⵠⲆⲆ": ⲆΔ++,
		"ⲆᐃᐃᐃⲆ": ⲆΔ++,
		"ᐃⵠⵠⵠΔ": ⲆΔ++,
		"ΔΔᐃⲆΔ": ⲆΔ++,
		"ᐃⵠⵠⵠⵠ": ⲆΔ++,
		"ⲆⲆⵠⲆΔ": ⲆΔ++,
		"ⲆⲆᐃΔᐃ": ⲆΔ++,
		"ᐃᐃⲆⵠⲆ": ⲆΔ++,
		"ⵠⵠⲆⲆΔ": ⲆΔ++,
		"ⵠᐃᐃΔⵠ": ⲆΔ++,
		"ⲆΔⵠᐃⲆ": ⲆΔ++,
		"ⵠΔⵠᐃᐃ": ⲆΔ++,
		"ⲆⲆⲆᐃΔ": ⲆΔ++,
		"ᐃΔⲆⲆⲆ": ⲆΔ++,
		"ⲆΔΔΔᐃ": ⲆΔ++,
		"ⲆΔᐃⲆΔ": ⲆΔ++,
		"ⲆΔᐃᐃᐃ": ⲆΔ++,
		"ᐃᐃᐃΔⵠ": ⲆΔ++,
		"ⲆᐃᐃⲆⲆ": ⲆΔ++,
		"ᐃΔⲆⲆΔ": ⲆΔ++,
		"ᐃᐃᐃⲆΔ": ⲆΔ++,
		"ⵠᐃᐃⲆᐃ": ⲆΔ++,
		"ⵠᐃⲆⵠⵠ": ⲆΔ++,
		"ΔⵠⵠⲆⲆ": ⲆΔ++,
		"ⵠⵠΔᐃΔ": ⲆΔ++,
		"ⵠΔᐃⵠᐃ": ⲆΔ++,
		"ᐃΔᐃΔⵠ": ⲆΔ++,
		"Δᐃᐃⵠⵠ": ⲆΔ++,
		"ᐃⲆⵠᐃΔ": ⲆΔ++,
		"ⲆⵠⵠⵠΔ": ⲆΔ++,
		"ⵠΔΔᐃΔ": ⲆΔ++,
		"ⲆΔⲆⲆᐃ": ⲆΔ++,
		"ⵠΔΔΔΔ": ⲆΔ++,
		"ⲆᐃⵠΔᐃ": ⲆΔ++,
		"ᐃⲆⲆᐃᐃ": ⲆΔ++,
		"ⵠⲆᐃΔΔ": ⲆΔ++,
		"ⲆΔⲆⵠⵠ": ⲆΔ++,
		"ⵠᐃΔⵠᐃ": ⲆΔ++,
		"ᐃⵠΔⵠⲆ": ⲆΔ++,
		"ⲆΔⲆᐃⲆ": ⲆΔ++,
		"ᐃⲆⲆⲆⲆ": ⲆΔ++,
		"ⵠΔᐃΔⲆ": ⲆΔ++,
		"ⲆᐃΔⵠⵠ": ⲆΔ++,
		"ᐃⲆᐃΔΔ": ⲆΔ++,
		"ΔᐃᐃⲆⵠ": ⲆΔ++,
		"ⵠΔⵠⵠᐃ": ⲆΔ++,
		"ⲆⵠⵠΔⲆ": ⲆΔ++,
		"ΔⲆⵠⵠⲆ": ⲆΔ++,
		"ᐃⲆΔΔΔ": ⲆΔ++,
		"ᐃΔᐃΔᐃ": ⲆΔ++,
		"ΔᐃⲆⵠⵠ": ⲆΔ++,
		"ΔⵠΔⵠΔ": ⲆΔ++,
		"ᐃΔΔⲆⵠ": ⲆΔ++,
		"ⲆᐃⵠΔⵠ": ⲆΔ++,
		"ΔᐃΔΔⲆ": ⲆΔ++,
		"ⵠΔΔΔⲆ": ⲆΔ++,
		"ΔⲆΔΔΔ": ⲆΔ++,
		"ᐃΔⵠᐃΔ": ⲆΔ++,
		"ⵠΔᐃⲆΔⵠΔΔⵠ": ⲆΔ++,
		"ⲆΔᐃⲆⵠ": ⲆΔ++,
		"ᐃⲆᐃΔⲆ": ⲆΔ++,
		"ΔⵠΔΔⵠ": ⲆΔ++,
		"ΔⵠⲆⵠΔ": ⲆΔ++,
		"ΔⲆᐃᐃⲆ": ⲆΔ++,
		"ⵠⲆⵠⲆΔ": ⲆΔ++,
		"ᐃⲆⵠⲆⵠ": ⲆΔ++,
		"ΔⲆⵠᐃΔ": ⲆΔ++,
		"ᐃⲆⲆᐃ": ⲆΔ++,
		"ⲆⵠᐃΔᐃ": ⲆΔ++,
		"ⵠᐃΔⲆ": ⲆΔ++,
		"ⲆΔⵠᐃ": ⲆΔ++,
		"ⵠⲆΔⵠⵠⵠᐃ": ⲆΔ++,
		"ΔⵠΔⲆⵠ": ⲆΔ++,
		"ⵠⵠⲆⵠΔᐃⲆ": ⲆΔ++,
		"ΔⲆⲆⵠΔ": ⲆΔ++,
		"ⵠⵠΔΔⲆ": ⲆΔ++,
		"ᐃΔⵠᐃᐃⵠΔ": ⲆΔ++,
		"ᐃᐃⵠᐃⵠⵠⵠ": ⲆΔ++,
		"ⵠⲆᐃΔᐃ": ⲆΔ++,
		"ⲆⵠΔⲆ": ⲆΔ++,
		"ᐃᐃⵠᐃᐃ": ⲆΔ++,
		"ΔⲆⲆⲆΔ": ⲆΔ++,
		"ΔⲆΔΔⵠΔΔ": ⲆΔ++,
		"ΔⲆᐃⲆᐃ": ⲆΔ++,
		"ᐃⲆᐃⵠⲆ": ⲆΔ++,
		"ⵠⲆΔᐃⵠ": ⲆΔ++,
		"ⵠᐃⲆⲆⲆ": ⲆΔ++,
		"ᐃⵠⵠΔΔ": ⲆΔ++,
		"ᐃⲆⲆⲆⵠ": ⲆΔ++,
		"ⲆⵠⲆᐃᐃ": ⲆΔ++,
		"ⲆΔⵠⲆⵠ": ⲆΔ++,
		"ΔᐃⵠⲆΔ": ⲆΔ++,
		"ΔⵠⲆΔΔ": ⲆΔ++,
		"ⲆⲆΔⵠᐃ": ⲆΔ++,
		"ᐃⵠᐃⵠΔ": ⲆΔ++,
		"ᐃᐃᐃᐃᐃ": ⲆΔ++,
		"ΔᐃΔΔⵠ": ⲆΔ++,
		"ⵠⵠⵠᐃΔ": ⲆΔ++,
		"ⵠᐃⲆᐃⵠⵠΔ": ⲆΔ++,
		"ΔΔΔⵠᐃ": ⲆΔ++,
		"ᐃⵠᐃΔΔⵠΔ": ⲆΔ++,
		"ⲆΔΔΔᐃⵠⲆ": ⲆΔ++,
		"ⵠⲆᐃΔΔᐃᐃ": ⲆΔ++,
		"ᐃⲆΔⲆΔⲆΔ": ⲆΔ++,
		"ΔⲆΔⵠΔ": ⲆΔ++,
		"ΔᐃⵠⵠΔ": ⲆΔ++,
		"ⲆΔᐃⵠⵠ": ⲆΔ++,
		"ΔᐃⲆⵠᐃ": ⲆΔ++,
		"ᐃΔⲆⵠᐃ": ⲆΔ++,
		"ΔⵠᐃΔΔ": ⲆΔ++,
		"ᐃⲆⲆⵠᐃ": ⲆΔ++,
		"Ⲇᐃⵠⵠᐃ": ⲆΔ++,
		"ᐃΔᐃⵠᐃ": ⲆΔ++,
		"Δⵠⵠⵠᐃ": ⲆΔ++,
		"ⲆᐃᐃΔⵠ": ⲆΔ++,
		"ᐃⲆᐃΔⵠ": ⲆΔ++,
		"ᐃⵠᐃΔΔ": ⲆΔ++,
		"ᐃᐃⲆⲆΔ": ⲆΔ++,
		"ᐃⵠΔⵠΔ": ⲆΔ++,
		"ᐃᐃⵠⵠⲆ": ⲆΔ++,
		"ⵠⵠΔⲆΔ": ⲆΔ++,
		"ᐃⵠⵠᐃΔ": ⲆΔ++,
		"ⵠⲆⵠᐃΔ": ⲆΔ++,
		"ΔΔⵠΔᐃ": ⲆΔ++,
		"ᐃᐃΔΔᐃⵠⲆ": ⲆΔ++,
		"ᐃⵠⵠΔⵠ": ⲆΔ++,
		"ΔᐃⵠΔᐃ": ⲆΔ++,
		"ΔⲆⲆᐃⲆ": ⲆΔ++,
		"ᐃⲆΔΔᐃ": ⲆΔ++,
		"ⲆᐃⵠⵠⲆΔⲆ": ⲆΔ++,
		"ᐃΔⲆᐃⲆⲆⵠ": ⲆΔ++,
		"ⲆΔᐃᐃΔⵠΔ": ⲆΔ++,
		"ⵠΔⵠΔⲆ": ⲆΔ++,
		"ⲆⵠⵠⲆᐃᐃⵠ": ⲆΔ++,
		"ⵠᐃᐃᐃΔⵠⲆ": ⲆΔ++,
		"ⲆⵠⵠⵠΔⲆᐃ": ⲆΔ++,
		"ⵠΔⵠᐃⵠⵠᐃ": ⲆΔ++,
		"ⵠᐃᐃⲆⲆⲆΔ": ⲆΔ++,
		"ᐃΔΔΔᐃΔⵠ": ⲆΔ++,
		"ⲆⲆⵠΔᐃᐃᐃ": ⲆΔ++,
		"ᐃⲆⲆΔⲆⲆⵠ": ⲆΔ++,
		"ΔΔⵠΔΔ": ⲆΔ++,
		"ⵠⲆⵠⵠᐃ": ⲆΔ++,
		"ⲆΔΔᐃΔ": ⲆΔ++,
		"ΔΔⲆΔⲆ": ⲆΔ++,
		"ΔᐃᐃΔⵠ": ⲆΔ++,
		"ⵠᐃⲆΔⲆᐃⲆ": ⲆΔ++,
		"ΔⲆⲆᐃᐃ": ⲆΔ++,
		"ΔⲆΔⲆⵠ": ⲆΔ++,
		"ᐃⵠᐃΔⲆᐃᐃ": ⲆΔ++,
		"Ⲇᐃᐃⵠⵠ": ⲆΔ++,
		"ⲆᐃΔΔⲆᐃⲆ": ⲆΔ++,
		"ᐃΔΔⵠᐃ": ⲆΔ++,
		"ⲆⲆⵠᐃⲆ": ⲆΔ++,
		"ΔΔᐃⲆᐃΔᐃ": ⲆΔ++,
		"ⵠⵠⵠⵠⵠⵠⲆ": ⲆΔ++,
		"ΔΔΔΔⲆ": ⲆΔ++,
		"Ⲇⵠᐃⵠⵠ": ⲆΔ++,
		"ⲆᐃΔᐃᐃⲆΔ": ⲆΔ++,
		"ⲆⲆᐃⲆΔ": ⲆΔ++,
		"ᐃⲆⵠΔ": ⲆΔ++,
		"ΔⲆⲆⵠⵠ": ⲆΔ++,
		"ᐃΔᐃⲆΔⲆΔ": ⲆΔ++,
		"ⲆⲆⲆⲆⲆ": ⲆΔ++,
		"ΔΔⵠᐃᐃΔΔ": ⲆΔ++,
		"ᐃⲆⲆᐃⲆ": ⲆΔ++,
		"ᐃΔᐃⵠΔᐃΔ": ⲆΔ++,
		"ΔⲆⵠⵠΔ": ⲆΔ++,
		"ⲆⵠᐃΔᐃΔΔ": ⲆΔ++,
		"ΔΔᐃΔⵠᐃᐃ": ⲆΔ++,
		"ⵠΔΔᐃⵠ": ⲆΔ++,
		"ᐃⵠⲆⵠⵠ": ⲆΔ++,
		"ⲆΔⵠΔⲆ": ⲆΔ++,
		"ⵠᐃⵠⵠᐃ": ⲆΔ++,
		"Ⲇᐃⵠᐃᐃ": ⲆΔ++,
		"ΔΔⵠᐃΔ": ⲆΔ++,
		"ᐃᐃΔΔⲆ": ⲆΔ++,
		"ⲆⲆΔᐃΔ": ⲆΔ++,
		"ΔⲆᐃⲆΔ": ⲆΔ++,
		"ᐃⲆΔⵠⲆ": ⲆΔ++,
		"ᐃⵠⵠⲆᐃ": ⲆΔ++,
		"ᐃᐃⵠⲆΔ": ⲆΔ++,
		"ⵠⲆⲆⲆⵠ": ⲆΔ++,
		"ΔΔΔᐃⲆΔⲆ": ⲆΔ++,
		"ⲆΔᐃΔΔΔⵠ": ⲆΔ++,
		"ⵠᐃΔⲆᐃ": ⲆΔ++,
		"ⵠΔⲆᐃᐃⵠᐃ": ⲆΔ++,
		"ΔΔⲆᐃⵠ": ⲆΔ++,
		"ⵠⵠⲆᐃᐃ": ⲆΔ++,
		"ⲆⵠⵠⲆΔ": ⲆΔ++,
		"ΔⲆᐃᐃⵠ": ⲆΔ++,
		"ⵠⵠⲆΔΔ": ⲆΔ++,
		"ᐃⲆΔⲆⲆΔⵠ": ⲆΔ++,
		"ΔᐃⲆΔᐃ": ⲆΔ++,
		"ⲆⵠⲆΔⵠ": ⲆΔ++,
		"ΔⵠⵠΔⲆ": ⲆΔ++,
		"ⲆᐃⲆΔⲆ": ⲆΔ++,
		"ⵠⲆΔᐃⲆ": ⲆΔ++,
		"ⵠΔᐃᐃᐃ": ⲆΔ++,
		"ⲆⲆΔⵠΔ": ⲆΔ++,
		"ⲆᐃⲆⲆᐃ": ⲆΔ++,
		"ᐃⲆᐃᐃⲆⵠᐃ": ⲆΔ++,
		"ΔᐃⲆⲆΔ": ⲆΔ++,
		"ⲆΔⲆⵠΔ": ⲆΔ++,
		"ΔΔⵠᐃⵠΔⵠ": ⲆΔ++,
		"ⲆᐃᐃⲆᐃ": ⲆΔ++,
		"ⲆⲆⵠⵠⵠ": ⲆΔ++,
		"ⲆᐃⵠᐃⵠΔⲆ": ⲆΔ++,
		"ΔⵠΔⵠⵠ": ⲆΔ++,
		"ⲆᐃⵠΔΔ": ⲆΔ++,
		"ᐃⵠᐃᐃᐃΔᐃ": ⲆΔ++,
		"ΔⲆΔΔᐃΔⵠ": ⲆΔ++,
		"ΔⲆᐃⵠⲆⲆΔ": ⲆΔ++,
		"ᐃΔⵠΔΔ": ⲆΔ++,
		"ᐃᐃⲆⵠᐃⵠᐃ": ⲆΔ++,
		"ⵠΔⲆΔⵠΔᐃ": ⲆΔ++,
		"ⲆⵠᐃⲆⲆⲆⲆ": ⲆΔ++,
		"ᐃⲆⲆΔᐃᐃⲆ": ⲆΔ++,
		"ⲆᐃᐃⵠΔ": ⲆΔ++,
		"ΔᐃᐃⲆΔⲆⲆ": ⲆΔ++,
		"ΔᐃⵠⲆⲆⵠⲆ": ⲆΔ++,
		"ⲆᐃᐃΔⵠⵠⲆ": ⲆΔ++,
		"ᐃⲆⲆⵠⵠ": ⲆΔ++,
		"ⲆⲆⲆᐃᐃΔⵠ": ⲆΔ++,
		"ΔⵠᐃΔΔᐃΔ": ⲆΔ++,
		"ⵠⵠΔⵠⲆᐃⲆ": ⲆΔ++,
		"ᐃᐃⵠⵠᐃⲆΔ": ⲆΔ++,
		"ᐃⲆᐃᐃᐃΔᐃ": ⲆΔ++,
		"ΔΔᐃⵠᐃΔⲆ": ⲆΔ++,
		"ⲆⲆⵠΔᐃⵠΔ": ⲆΔ++,
		"ⲆⵠⵠᐃⲆⲆⵠ": ⲆΔ++,
		"ᐃⲆᐃⲆⵠⵠᐃ": ⲆΔ++,
		"ⲆΔΔᐃᐃⲆΔ": ⲆΔ++,
		"ΔΔⵠᐃⲆⵠⲆ": ⲆΔ++,
		"ⲆΔᐃⲆⲆⵠΔ": ⲆΔ++,
		"ⵠⵠⲆⵠⵠⵠᐃ": ⲆΔ++,
		"ⵠΔⲆᐃⵠⵠΔ": ⲆΔ++,
		"ᐃᐃᐃΔ": ⲆΔ++,
		"ⲆⲆᐃᐃᐃ": ⲆΔ++,
		"ⲆⲆᐃⵠᐃᐃⲆ": ⲆΔ++,
		"ⲆᐃᐃᐃⵠΔΔ": ⲆΔ++,
		"ⲆΔ": ⲆΔ++,
		"ᐃⲆΔⵠᐃⲆΔ": ⲆΔ++,
		"ᐃΔⵠⵠⲆ": ⲆΔ++,
		"ᐃⵠⵠⵠᐃ": ⲆΔ++,
		"ⵠᐃᐃⲆᐃⵠⵠ": ⲆΔ++,
		"ΔⲆⲆΔᐃ": ⲆΔ++,
		"ⵠⵠΔⲆΔⵠⲆ": ⲆΔ++,
		"ΔᐃΔⲆΔΔⲆ": ⲆΔ++,
		"ΔΔᐃᐃⵠⲆⲆ": ⲆΔ++,
		"ᐃᐃᐃΔΔΔⲆ": ⲆΔ++,
		"ⵠⵠⵠⵠΔᐃᐃ": ⲆΔ++,
		"ⵠⲆⲆᐃⲆ": ⲆΔ++,
		"ⵠⵠΔᐃⲆᐃΔ": ⲆΔ++,
		"ᐃⵠᐃΔᐃⵠᐃ": ⲆΔ++,
		"ⵠⵠΔⲆΔⵠᐃ": ⲆΔ++,
		"ΔᐃΔⲆᐃⲆⲆ": ⲆΔ++,
		"ⵠΔⲆⲆᐃ": ⲆΔ++,
		"ⵠᐃⲆΔⲆᐃΔ": ⲆΔ++,
		"ΔᐃⵠᐃⵠᐃΔ": ⲆΔ++,
		"ⲆᐃⵠⵠⲆⵠᐃ": ⲆΔ++,
		"ᐃⵠᐃⵠᐃΔᐃ": ⲆΔ++,
		"ⲆⵠⲆΔⲆΔⵠ": ⲆΔ++,
		"ⲆⲆⵠⵠᐃΔⵠ": ⲆΔ++,
		"ΔⵠⲆⲆᐃⵠⵠ": ⲆΔ++,
		"ᐃⲆⵠᐃᐃ": ⲆΔ++,
		"ⲆΔⲆᐃⲆⵠᐃ": ⲆΔ++,
		"ᐃᐃΔΔⵠⵠⲆ": ⲆΔ++,
		"ΔⲆⲆⲆΔⵠⵠ": ⲆΔ++,
		"ᐃΔⲆⵠᐃⲆΔ": ⲆΔ++,
		"ⲆⲆΔΔⲆᐃⵠ": ⲆΔ++,
		"ᐃᐃⵠᐃΔᐃⲆ": ⲆΔ++,
		"ᐃᐃᐃⲆⲆΔⵠ": ⲆΔ++,
		"ᐃⲆΔᐃΔᐃⲆ": ⲆΔ++,
		"ΔⲆⲆⵠⲆᐃΔ": ⲆΔ++,
		"ⲆᐃΔⲆⲆⲆⲆ": ⲆΔ++,
		"ⵠⲆᐃⵠΔᐃⲆ": ⲆΔ++,
		"ΔᐃΔⵠᐃⵠᐃ": ⲆΔ++,
		"ΔⲆΔⲆⲆⲆΔ": ⲆΔ++,
		"ⵠᐃⵠᐃᐃ": ⲆΔ++,
		"ⵠⵠⵠⵠⲆⵠⲆ": ⲆΔ++,
		"ⲆᐃⵠΔⲆⵠⵠ": ⲆΔ++,
		"ⲆΔΔᐃᐃⵠⵠ": ⲆΔ++,
		"ΔΔᐃᐃᐃⵠⵠ": ⲆΔ++,
		"ΔΔΔΔᐃΔⲆ": ⲆΔ++,
		"ⵠⲆᐃᐃⲆᐃΔ": ⲆΔ++,
		"ΔΔΔⲆΔᐃⲆ": ⲆΔ++,
		"ΔⵠᐃⵠⵠΔΔ": ⲆΔ++,
		"ᐃᐃⵠⲆⲆⲆⲆ": ⲆΔ++,
		"ⲆⲆⵠΔⲆΔΔ": ⲆΔ++,
		"ΔᐃⵠⲆⵠⲆΔ": ⲆΔ++,
		"ⲆΔⵠΔᐃᐃΔ": ⲆΔ++,
		"ΔⲆⵠⵠⵠΔⵠ": ⲆΔ++,
		"ᐃⲆⲆⵠⵠᐃⲆ": ⲆΔ++,
		"ΔⵠⲆᐃᐃᐃⵠ": ⲆΔ++,
		"ⵠᐃⲆΔᐃⲆⵠ": ⲆΔ++,
		"ΔⲆᐃΔⲆΔⵠ": ⲆΔ++,
		"ⵠⵠⲆⲆⵠⵠᐃ": ⲆΔ++,
		"ⲆΔᐃⵠⵠⵠⲆ": ⲆΔ++,
		"ᐃⲆΔΔᐃΔΔ": ⲆΔ++,
		"ⵠᐃΔⵠⲆΔⵠ": ⲆΔ++,
		"ΔⲆⲆΔΔᐃⵠ": ⲆΔ++,
		"ΔⲆⲆᐃΔⲆⲆ": ⲆΔ++,
		"ⵠⲆΔⲆⲆᐃⲆ": ⲆΔ++,
		"ΔᐃⲆΔⲆⵠⲆ": ⲆΔ++,
		"ᐃⵠⲆⵠᐃⲆⵠΔᐃ": ⲆΔ++,
		"ⲆⲆΔΔᐃⵠⲆ": ⲆΔ++,
		"ΔⲆᐃⲆΔⵠΔ": ⲆΔ++,
		"ⲆᐃⵠΔⵠⵠⲆ": ⲆΔ++,
		"ⵠⲆⵠΔᐃⲆⵠ": ⲆΔ++,
		"ⲆᐃᐃⲆⵠᐃⲆ": ⲆΔ++,
		"ⲆᐃΔⵠⲆⵠⵠ": ⲆΔ++,
		"ΔᐃⵠⲆΔⵠⲆ": ⲆΔ++,
		"ⵠⲆⲆⵠΔΔⵠ": ⲆΔ++,
		"ΔⲆⲆᐃⵠⵠᐃ": ⲆΔ++,
		"ᐃⵠΔⵠΔΔΔ": ⲆΔ++,
		"ΔⵠΔΔᐃⲆⲆ": ⲆΔ++,
		"ⲆΔΔⲆⲆⵠΔ": ⲆΔ++,
		"ᐃⵠᐃⲆᐃΔᐃ": ⲆΔ++,
		"ᐃΔⲆΔΔᐃᐃ": ⲆΔ++,
		"ᐃⵠⲆⵠⲆⵠᐃ": ⲆΔ++,
		"ΔΔⵠᐃⲆΔΔ": ⲆΔ++,
		"ᐃⵠⵠⲆⲆⵠⲆ": ⲆΔ++,
		"ΔᐃⲆⵠΔⲆⲆ": ⲆΔ++,
		"Δᐃᐃⵠⵠⵠᐃ": ⲆΔ++,
		"ᐃᐃⲆⵠⲆᐃΔ": ⲆΔ++,
		"ⵠⵠⵠⲆⵠⵠⵠ": ⲆΔ++,
		"ᐃᐃⵠᐃᐃᐃᐃ": ⲆΔ++,
		"ⵠᐃⵠⲆᐃⵠᐃ": ⲆΔ++,
		"ⵠΔⵠᐃᐃΔⲆ": ⲆΔ++,
		"ᐃⲆⲆᐃⲆⵠΔ": ⲆΔ++,
		"ⲆΔⲆΔΔᐃⲆ": ⲆΔ++,
		"ΔΔⵠⲆᐃᐃΔ": ⲆΔ++,
		"ΔᐃⲆⲆⲆⵠᐃ": ⲆΔ++,
		"ⵠᐃⲆΔⲆⵠΔ": ⲆΔ++,
		"ⲆᐃΔΔᐃᐃⲆ": ⲆΔ++,
		"ΔⵠΔⵠΔⵠⵠ": ⲆΔ++,
		"ΔΔᐃⵠⵠⲆⲆ": ⲆΔ++,
		"ΔΔΔⵠΔⲆᐃ": ⲆΔ++,
		"ᐃΔⵠⲆΔⵠΔ": ⲆΔ++,
		"ⵠⵠΔⲆΔᐃᐃ": ⲆΔ++,
		"ΔⵠⲆΔᐃᐃΔ": ⲆΔ++,
		"ⵠⲆⲆΔΔⲆᐃ": ⲆΔ++,
		"ⲆᐃΔⲆΔⵠᐃ": ⲆΔ++,
		"ΔⲆⲆᐃⲆᐃⵠ": ⲆΔ++,
		"ΔⲆⵠⵠΔⲆΔ": ⲆΔ++,
		"ΔᐃΔⲆΔⵠⵠ": ⲆΔ++,
		"ᐃᐃⵠⲆⲆⲆΔ": ⲆΔ++,
		"ⲆΔΔᐃⲆⲆΔ": ⲆΔ++,
		"ᐃⲆᐃΔΔᐃⵠ": ⲆΔ++,
		"ΔΔⲆⵠᐃΔⵠ": ⲆΔ++,
		"ᐃⲆΔᐃⲆⲆΔ": ⲆΔ++,
		"ⵠᐃⵠⲆᐃⲆⵠ": ⲆΔ++,
		"ⲆⲆΔⵠΔⲆΔ": ⲆΔ++,
		"ⲆⲆⲆⵠΔΔⲆ": ⲆΔ++,
		"ⲆᐃΔΔⲆⲆΔ": ⲆΔ++,
		"ⵠⲆᐃΔΔⵠΔ": ⲆΔ++,
		"ⲆΔⵠⵠΔᐃΔ": ⲆΔ++,
		"ΔⵠΔᐃΔᐃⵠ": ⲆΔ++,
		"ⲆΔΔⲆᐃⲆⲆ": ⲆΔ++,
		"ᐃΔⵠⲆΔⵠᐃ": ⲆΔ++,
		"ΔᐃΔⲆΔⵠΔ": ⲆΔ++,
		"ᐃΔᐃΔᐃΔΔ": ⲆΔ++,
		"ΔⵠⵠΔⲆΔᐃ": ⲆΔ++,
		"ⲆⵠΔⵠᐃΔⲆ": ⲆΔ++,
		"ⵠᐃΔⵠᐃΔⵠ": ⲆΔ++,
		"ⵠⲆΔⵠⵠΔⲆ": ⲆΔ++,
		"ⲆᐃⲆⲆⵠⵠⵠ": ⲆΔ++,
		"ᐃⵠΔᐃᐃⵠΔ": ⲆΔ++,
		"ⵠⲆⲆⲆⲆⲆⲆ": ⲆΔ++,
		"ΔⲆⵠⲆⲆᐃᐃ": ⲆΔ++,
		"ΔⲆⲆΔΔ": ⲆΔ++,
		"ᐃΔⲆᐃⲆⲆΔᐃΔ": ⲆΔ++,
		"ᐃΔⵠⲆΔ": ⲆΔ++,
		"Ⲇᐃᐃᐃᐃ": ⲆΔ++,
		"ⲆⲆⲆΔⵠⲆⵠᐃᐃ": ⲆΔ++,
		"ⵠΔⵠᐃⲆⲆᐃ": ⲆΔ++,
		"ΔⲆᐃᐃΔ": ⲆΔ++,
		"ᐃᐃⵠⵠΔΔⲆ": ⲆΔ++,
		"ΔᐃΔΔᐃⲆᐃ": ⲆΔ++,
		"ΔⲆΔⲆⵠⵠᐃ": ⲆΔ++,
		"ⲆⲆΔᐃΔⵠᐃ": ⲆΔ++,
		"ⲆΔⵠⲆᐃΔⲆ": ⲆΔ++,
		"ΔⲆⵠⵠⵠⵠΔ": ⲆΔ++,
		"ⵠᐃⲆⲆⵠΔⲆ": ⲆΔ++,
		"ΔᐃΔᐃⲆⲆⵠ": ⲆΔ++,
		"ᐃΔᐃⵠⵠᐃΔ": ⲆΔ++,
		"ⵠᐃⵠⵠΔⲆⲆ": ⲆΔ++,
		"ⲆΔⲆⲆⲆᐃΔ": ⲆΔ++,
		"ᐃⵠⵠᐃⵠᐃⵠ": ⲆΔ++,
		"ⵠⲆΔᐃⲆΔΔ": ⲆΔ++,
		"ΔⲆᐃⵠΔᐃΔ": ⲆΔ++,
		"ΔΔΔᐃΔᐃΔ": ⲆΔ++,
		"ᐃⵠⵠᐃⲆⵠⲆ": ⲆΔ++,
		"ⵠⵠΔⲆᐃⵠᐃ": ⲆΔ++,
		"ⲆΔΔΔΔΔᐃ": ⲆΔ++,
		"ⵠⲆΔᐃⲆⲆΔ": ⲆΔ++,
		"ᐃⵠΔⲆΔⲆᐃ": ⲆΔ++,
		"ΔⲆⲆΔⵠΔⲆ": ⲆΔ++,
		"ΔᐃⲆⲆᐃΔᐃ": ⲆΔ++,
		"ᐃΔΔᐃⲆΔᐃ": ⲆΔ++,
		"ᐃⵠⵠᐃᐃⵠᐃ": ⲆΔ++,
		"ᐃΔⲆⵠⵠᐃⵠΔⵠ": ⲆΔ++,
		"Δᐃⵠⵠⵠ": ⲆΔ++,
		"ⲆΔᐃⵠⵠᐃⲆ": ⲆΔ++,
		"ⲆᐃΔᐃΔⵠⵠ": ⲆΔ++,
		"ᐃⲆⵠΔⵠⵠⲆⲆᐃ": ⲆΔ++,
		"ΔⵠΔᐃⲆ": ⲆΔ++,
		"ΔᐃᐃᐃΔ": ⲆΔ++,
		"ⲆΔⲆⲆᐃⲆⵠ": ⲆΔ++,
		"ΔᐃΔⲆⲆⵠΔ": ⲆΔ++,
		"ⲆᐃⵠⵠΔᐃⵠ": ⲆΔ++,
		"ⲆⲆᐃⲆⵠⲆΔ": ⲆΔ++,
		"ⵠⵠⵠᐃΔⲆΔ": ⲆΔ++,
		"ᐃΔᐃⲆᐃⲆⲆ": ⲆΔ++,
		"ΔΔᐃᐃᐃⵠⲆ": ⲆΔ++,
		"ⵠᐃΔΔⵠⵠⲆ": ⲆΔ++,
		"ΔⵠⲆⲆΔⵠΔ": ⲆΔ++,
		"ⵠⵠⵠᐃⲆⲆᐃ": ⲆΔ++,
		"ΔᐃΔⵠⲆΔⵠ": ⲆΔ++,
		"ᐃᐃⵠⵠΔΔΔ": ⲆΔ++,
		"ⲆⲆⵠⵠⵠᐃⲆ": ⲆΔ++,
		"ΔᐃⵠⲆⵠΔⵠ": ⲆΔ++,
		"ⵠᐃᐃⵠⵠⲆⵠ": ⲆΔ++,
		"ΔⲆⲆⲆᐃᐃⲆ": ⲆΔ++,
		"ⲆⲆΔⲆᐃΔΔ": ⲆΔ++,
		"ΔᐃⲆᐃΔⵠᐃ": ⲆΔ++,
		"ⵠΔΔⵠⵠⵠᐃ": ⲆΔ++,
		"ⵠΔΔⲆⲆⲆⵠ": ⲆΔ++,
		"ⲆΔⵠΔⵠⲆⵠ": ⲆΔ++,
		"ᐃⲆⲆᐃᐃᐃᐃ": ⲆΔ++,
		"ᐃΔᐃΔⵠⲆⵠ": ⲆΔ++,
		"ΔΔᐃⵠΔⲆΔ": ⲆΔ++,
		"ΔΔΔᐃΔΔⲆ": ⲆΔ++,
		"ΔⲆᐃᐃⵠⵠᐃ": ⲆΔ++,
		"ⵠⵠᐃᐃⲆⵠⲆ": ⲆΔ++,
		"ᐃᐃΔⵠΔΔⵠ": ⲆΔ++,
		"ᐃⵠⲆΔⵠⲆᐃ": ⲆΔ++,
		"ᐃΔᐃⵠⲆⵠᐃ": ⲆΔ++,
		"ᐃΔⲆᐃⲆᐃⵠ": ⲆΔ++,
		"ⲆⲆΔΔᐃΔⵠ": ⲆΔ++,
		"ᐃⲆᐃΔⲆⲆᐃ": ⲆΔ++,
		"ΔᐃⵠⲆⲆᐃⵠ": ⲆΔ++,
		"ΔΔⵠᐃΔⲆⲆ": ⲆΔ++,
		"ⵠⲆⵠⵠⲆⵠⵠ": ⲆΔ++,
		"ⵠᐃⵠⲆΔᐃⲆ": ⲆΔ++,
		"ᐃΔᐃΔⵠΔⵠ": ⲆΔ++,
		"ᐃⵠⵠⲆΔⵠⲆ": ⲆΔ++,
		"ΔΔⲆᐃⵠΔᐃ": ⲆΔ++,
		"ΔΔᐃᐃⲆᐃᐃ": ⲆΔ++,
		"ΔⵠΔⲆⲆⵠⵠ": ⲆΔ++,
		"ⵠᐃⵠⲆΔⵠⵠ": ⲆΔ++,
		"ⲆⲆⵠᐃΔᐃΔ": ⲆΔ++,
		"ᐃᐃΔᐃⵠΔᐃ": ⲆΔ++,
		"ⲆⲆᐃⵠⲆⵠΔ": ⲆΔ++,
		"ⵠΔΔΔΔⲆⲆ": ⲆΔ++,
		"ΔⲆΔᐃΔΔΔ": ⲆΔ++,
		"ᐃᐃⲆΔΔΔⲆ": ⲆΔ++,
		"ᐃⲆⵠⵠⲆΔⵠ": ⲆΔ++,
		"ⵠⲆᐃΔⵠΔΔ": ⲆΔ++,
		"ΔΔⵠⵠⲆⲆⲆ": ⲆΔ++,
		"ⵠΔᐃⲆᐃΔⲆ": ⲆΔ++,
		"ⲆⲆⵠⲆⲆᐃⲆ": ⲆΔ++,
		"ⲆᐃᐃΔⵠⲆᐃ": ⲆΔ++,
		"ΔᐃΔΔⵠⲆΔ": ⲆΔ++,
		"ⵠᐃᐃⵠⵠⲆⵠ": ⲆΔ++,
		"ⵠΔⲆⲆⲆⵠⲆ": ⲆΔ++,
		"ⵠⵠⵠⵠⲆⲆΔ": ⲆΔ++,
		"ⵠᐃΔⲆΔᐃΔ": ⲆΔ++,
		"ⵠᐃⲆⵠⲆΔᐃ": ⲆΔ++,
		"ⵠΔΔᐃΔᐃΔ": ⲆΔ++,
		"ΔⲆⲆΔΔΔⲆ": ⲆΔ++,
		"ΔᐃⲆΔΔⲆⵠ": ⲆΔ++,
		"ⵠΔⲆⲆᐃᐃΔ": ⲆΔ++,
		"ⲆⵠᐃᐃⵠⵠⲆ": ⲆΔ++,
		"ⲆΔΔⵠⲆᐃⲆ": ⲆΔ++,
		"ᐃΔΔⲆΔⲆΔ": ⲆΔ++,
		"ⵠᐃⲆᐃΔⲆⵠ": ⲆΔ++,
		"ⵠΔⲆⵠⵠⵠⲆ": ⲆΔ++,
		"ⲆΔⵠⲆᐃᐃᐃ": ⲆΔ++,
		"ⵠⵠΔⲆᐃⲆⲆ": ⲆΔ++,
		"ⵠⵠᐃⵠⲆᐃⲆ": ⲆΔ++,
		"ᐃⵠⲆᐃΔⲆⲆ": ⲆΔ++,
		"ΔⵠᐃⵠΔᐃⵠ": ⲆΔ++,
		"ⲆⵠΔⲆⲆΔᐃ": ⲆΔ++,
		"ⲆⵠᐃⲆᐃⲆᐃ": ⲆΔ++,
		"ⵠᐃᐃⲆΔⵠΔ": ⲆΔ++,
		"ⲆⲆⲆᐃⲆⵠⲆ": ⲆΔ++,
		"ⲆΔⲆⲆⵠⲆᐃ": ⲆΔ++,
		"ΔᐃᐃΔᐃⵠΔ": ⲆΔ++,
		"ΔΔⵠΔⲆΔⵠ": ⲆΔ++,
		"ⲆΔⵠᐃΔⵠⵠ": ⲆΔ++,
		"ⵠⲆⵠᐃⲆⵠⵠ": ⲆΔ++,
		"ᐃⵠⲆΔΔⲆⲆ": ⲆΔ++,
		"ⲆᐃΔᐃⵠΔᐃ": ⲆΔ++,
		"ΔΔⵠΔΔⵠⵠ": ⲆΔ++,
		"ᐃⲆⲆⲆᐃᐃⵠ": ⲆΔ++,
		"ᐃΔᐃᐃⵠΔᐃᐃⵠ": ⲆΔ++,
		"ⵠⲆΔⲆⲆᐃΔ": ⲆΔ++,
		"ⵠᐃⵠᐃΔⵠⵠ": ⲆΔ++,
		"ⵠⵠᐃⲆⵠⵠⲆ": ⲆΔ++,
		"ⵠⲆΔⲆⵠⵠⵠ": ⲆΔ++,
		"ᐃⵠΔΔⲆᐃᐃΔⲆ": ⲆΔ++,
		POINTS: ⲆΔ++,
		"ᐃⵠΔΔᐃΔⵠ": ⲆΔ++,
		"ⵠⲆⲆΔⲆΔΔ": ⲆΔ++,
		"ⵠⲆΔⵠΔⵠⵠ": ⲆΔ++,
		"ᐃᐃⵠΔᐃⵠᐃ": ⲆΔ++,
		"ⲆⵠΔⲆⵠⲆⵠ": ⲆΔ++,
		"ⲆⵠⵠⵠᐃΔⲆ": ⲆΔ++,
		"ⵠⵠΔⵠⵠⲆⲆ": ⲆΔ++,
		"ⲆⲆⲆⲆⲆΔⵠ": ⲆΔ++,
		"ⵠᐃⵠᐃᐃΔΔ": ⲆΔ++,
		"ᐃᐃⲆΔᐃΔⵠ": ⲆΔ++,
		"ΔᐃᐃⲆᐃᐃΔ": ⲆΔ++,
		"ⵠᐃΔᐃⵠᐃᐃ": ⲆΔ++,
		"ΔΔΔᐃⵠΔⵠ": ⲆΔ++,
		"ⲆⵠⵠⵠⵠⵠⲆ": ⲆΔ++,
		"ⵠΔΔᐃⵠⵠⵠ": ⲆΔ++,
		"ΔⲆⵠⲆⲆⵠⲆ": ⲆΔ++,
		"ᐃᐃᐃⲆⵠΔᐃ": ⲆΔ++,
		"ᐃⲆⲆⵠᐃⵠⲆ": ⲆΔ++,
		"ΔⲆⵠⲆᐃⲆⲆ": ⲆΔ++,
		"ⲆⵠⵠΔⵠⵠΔ": ⲆΔ++,
		"ⲆⲆⲆᐃⵠΔⵠ": ⲆΔ++,
		"ⵠⲆⲆᐃΔᐃⲆ": ⲆΔ++,
		"ⲆᐃᐃΔΔⲆΔ": ⲆΔ++,
		"ΔⵠⲆⵠΔΔᐃ": ⲆΔ++,
		"ΔⵠΔⵠⵠΔΔ": ⲆΔ++,
		"ᐃᐃΔⵠⲆᐃΔ": ⲆΔ++,
		"ⲆⲆⲆᐃᐃᐃⲆ": ⲆΔ++,
		"ᐃⲆⵠⲆΔΔΔ": ⲆΔ++,
		"ⲆⵠᐃⲆΔᐃᐃ": ⲆΔ++,
		"ⲆΔⲆᐃᐃⵠⲆ": ⲆΔ++,
		"ᐃᐃⵠᐃⵠΔΔ": ⲆΔ++,
		"ⲆΔΔⲆⲆⵠⲆ": ⲆΔ++,
		"ᐃⵠᐃᐃⲆⵠΔ": ⲆΔ++,
		"ⲆΔᐃΔΔⵠᐃ": ⲆΔ++,
		"ⲆⵠΔⵠⲆᐃⲆ": ⲆΔ++,
		"ⲆⲆᐃΔᐃⵠᐃ": ⲆΔ++,
		"ⵠᐃⵠᐃΔⵠⲆ": ⲆΔ++,
		"ᐃⵠᐃΔΔᐃⵠ": ⲆΔ++,
		"ⲆᐃΔⵠⲆᐃΔ": ⲆΔ++,
		"ⵠᐃΔⵠᐃᐃᐃ": ⲆΔ++,
		"ⵠΔⵠΔⲆᐃⵠ": ⲆΔ++,
		"ᐃⵠΔⲆⵠᐃᐃ": ⲆΔ++,
		"ⵠᐃΔΔⲆΔⲆ": ⲆΔ++,
		"ⵠΔΔΔⲆΔⲆ": ⲆΔ++,
		"ᐃΔΔᐃᐃᐃⲆ": ⲆΔ++,
		"ⵠⲆΔⵠᐃΔΔ": ⲆΔ++,
		"ᐃΔⵠⵠᐃⵠΔ": ⲆΔ++,
		"ⵠⵠⵠΔⲆᐃⵠΔΔ": ⲆΔ++,
		"ⲆⲆΔᐃⵠᐃᐃ": ⲆΔ++,
		"ⲆΔΔΔⵠⵠΔᐃΔ": ⲆΔ++,
		"Δⵠⵠⵠᐃᐃⵠ": ⲆΔ++,
		"ᐃᐃΔᐃⲆᐃΔⵠⲆ": ⲆΔ++,
		"ⵠⵠΔⲆⲆⲆⵠⲆⲆ": ⲆΔ++,
		"ⲆⲆⲆⵠⲆᐃⵠⲆⲆ": ⲆΔ++,
		"ᐃᐃΔⵠⵠΔΔⵠⲆ": ⲆΔ++,
		"ⲆΔⵠⵠⲆᐃⲆΔᐃ": ⲆΔ++,
		"ᐃⵠⲆΔⲆᐃⵠ": ⲆΔ++,
		"ⲆΔΔⲆⲆ": ⲆΔ++,
		"ⲆⲆⵠⵠᐃΔᐃ": ⲆΔ++,
		"ⵠⲆΔΔⵠⵠⵠ": ⲆΔ++,
		"ΔⵠᐃⲆⵠᐃᐃ": ⲆΔ++,
		"ᐃᐃⵠᐃⵠⵠⵠΔⲆ": ⲆΔ++,
		"ⲆⲆⲆⲆΔΔⵠ": ⲆΔ++,
		"ΔⲆᐃᐃᐃΔᐃ": ⲆΔ++,
		"ⲆΔΔⵠⲆⲆΔ": ⲆΔ++,
		"ⵠᐃᐃᐃΔᐃⵠ": ⲆΔ++,
		"ⲆⵠⵠΔⵠᐃΔ": ⲆΔ++,
		"ⵠᐃⲆⲆΔΔⲆ": ⲆΔ++,
		"ᐃΔⵠⵠᐃⵠᐃ": ⲆΔ++,
		"ⵠⲆⲆΔⲆᐃΔ": ⲆΔ++,
		"ⲆΔⲆᐃⲆᐃⲆ": ⲆΔ++,
		"ⵠΔⵠΔⵠⲆⲆ": ⲆΔ++,
		"ᐃᐃⵠⵠⵠΔᐃ": ⲆΔ++,
		"ᐃⲆⵠᐃⲆ": ⲆΔ++,
		"ⲆⲆⵠΔᐃ": ⲆΔ++,
		"ᐃⵠΔΔΔ": ⲆΔ++,
		"ΔⲆΔⵠᐃⲆᐃⵠᐃ": ⲆΔ++,
		"ⲆΔᐃᐃΔⲆΔ": ⲆΔ++,
		"ⲆΔΔΔΔΔⲆ": ⲆΔ++,
		"ᐃᐃΔΔᐃᐃΔ": ⲆΔ++,
		"ᐃᐃⲆⵠᐃᐃⲆ": ⲆΔ++,
		"ᐃΔᐃΔⵠΔΔ": ⲆΔ++,
		"ⵠⵠⵠΔⵠⲆᐃ": ⲆΔ++,
		"ⵠΔⲆⵠΔᐃᐃ": ⲆΔ++,
		"ΔⲆΔᐃⵠⲆᐃ": ⲆΔ++,
		"ⲆΔⲆΔⲆⲆΔ": ⲆΔ++,
		"ⵠⲆᐃᐃᐃᐃΔ": ⲆΔ++,
		"ΔⲆᐃΔⵠⵠⲆ": ⲆΔ++,
		"ΔⲆᐃΔⲆⲆᐃ": ⲆΔ++,
		"ΔⵠᐃᐃΔⵠⲆ": ⲆΔ++,
		"ⵠⵠᐃᐃⲆⵠΔ": ⲆΔ++,
		"ᐃⵠΔΔⵠ": ⲆΔ++,
		"ᐃΔⵠᐃⵠⵠᐃ": ⲆΔ++,
		"ΔᐃⵠᐃᐃⵠⲆ": ⲆΔ++,
		"ⵠⵠⵠⵠⲆⵠⵠ": ⲆΔ++,
		"ΔⵠΔⲆΔᐃⲆ": ⲆΔ++,
		"ⲆΔⵠΔⵠⵠΔ": ⲆΔ++,
		"ᐃⵠⵠΔⲆΔΔ": ⲆΔ++,
		"ΔⲆⲆⵠᐃⵠᐃ": ⲆΔ++,
		"ⲆΔⲆΔΔⵠⵠ": ⲆΔ++,
		"ⵠᐃΔⵠⲆⵠⵠ": ⲆΔ++,
		"ᐃΔᐃⲆᐃⵠᐃ": ⲆΔ++,
		"ΔⲆΔΔΔⲆᐃ": ⲆΔ++,
		"ⲆΔΔⲆᐃᐃᐃ": ⲆΔ++,
		"ⲆᐃⵠΔΔⵠΔ": ⲆΔ++,
		"ⵠⲆⵠⵠⵠⵠⲆ": ⲆΔ++,
		"ΔΔⲆᐃⲆⲆᐃ": ⲆΔ++,
		"ᐃᐃΔᐃᐃⵠⲆ": ⲆΔ++,
		"ⵠΔⵠⲆⲆⵠⵠ": ⲆΔ++,
		"ⵠΔⵠⵠⲆᐃΔ": ⲆΔ++,
		"ΔᐃⵠΔᐃΔⲆ": ⲆΔ++,
		"ᐃΔᐃⲆΔᐃⲆ": ⲆΔ++,
		"ΔⲆⵠᐃᐃᐃⵠ": ⲆΔ++,
		"ⲆᐃΔⵠⲆⵠⲆ": ⲆΔ++,
		"ᐃⲆⲆⵠᐃⲆⵠ": ⲆΔ++,
		"ΔⵠⵠΔΔᐃⵠ": ⲆΔ++,
		"ⵠⵠΔᐃᐃⵠⵠ": ⲆΔ++,
		"ⵠΔⵠⲆᐃⲆΔ": ⲆΔ++,
		"ⲆΔΔⲆᐃΔⵠ": ⲆΔ++,
		"ᐃᐃⲆⲆⵠᐃΔ": ⲆΔ++,
		"ⲆᐃᐃⵠᐃΔΔ": ⲆΔ++,
		"ⵠⲆᐃᐃⲆⵠᐃ": ⲆΔ++,
		"ⲆⲆⵠΔΔⵠΔ": ⲆΔ++,
		"ΔᐃⲆⵠΔⵠⲆ": ⲆΔ++,
		"ⲆᐃᐃⲆΔᐃⵠ": ⲆΔ++,
		"ⲆᐃΔⵠⲆⲆⲆ": ⲆΔ++,
		"ᐃΔⵠᐃΔⲆⵠ": ⲆΔ++,
		"ΔᐃᐃᐃⲆ": ⲆΔ++,
		"ΔⲆⵠᐃⵠᐃⵠ": ⲆΔ++,
		"ΔΔᐃⲆⵠΔᐃ": ⲆΔ++,
		"ⲆⵠΔⲆᐃ": ⲆΔ++,
		"ᐃⲆⲆⲆΔΔΔᐃⲆ": ⲆΔ++,
		"ⲆⲆⲆⲆᐃᐃⵠ": ⲆΔ++,
		"ΔΔΔΔⵠ": ⲆΔ++,
		"ⵠᐃΔΔⲆᐃΔ": ⲆΔ++,
		"ⵠΔⲆⵠⲆᐃⵠ": ⲆΔ++,
		"ᐃⵠⲆᐃⵠᐃΔ": ⲆΔ++,
		"ΔᐃΔⵠⲆⵠᐃ": ⲆΔ++,
		"ᐃᐃⵠᐃⵠᐃⲆ": ⲆΔ++,
		"ⲆΔⲆΔᐃᐃⵠ": ⲆΔ++,
		"ⵠΔⲆⵠᐃⵠⲆ": ⲆΔ++,
		"ᐃᐃᐃᐃᐃⲆΔ": ⲆΔ++,
		"ΔⲆΔᐃⵠⵠᐃ": ⲆΔ++,
		"ᐃⵠΔⲆᐃⲆⵠ": ⲆΔ++,
		"ᐃᐃⲆⲆⲆΔᐃ": ⲆΔ++,
		"ⲆᐃⵠⵠⲆ": ⲆΔ++,
		"ⵠⵠⲆⵠΔ": ⲆΔ++,
		"ⲆΔΔⲆᐃ": ⲆΔ++,
		"ⲆΔΔⵠᐃ": ⲆΔ++,
		"ⵠⲆⵠΔᐃ": ⲆΔ++,
		"ΔⵠΔⵠⵠⵠⲆ": ⲆΔ++,
		"ⲆᐃⲆⲆⲆΔΔ": ⲆΔ++,
		"ⲆⲆΔᐃᐃΔΔ": ⲆΔ++,
		"ⵠⵠⵠⲆΔⵠⲆ": ⲆΔ++,
		"ᐃⵠⲆⲆᐃΔⵠ": ⲆΔ++,
		"ΔⲆΔⵠⵠΔⲆ": ⲆΔ++,
		"ⲆⵠⵠⵠⲆᐃΔ": ⲆΔ++,
		"ⲆΔⲆᐃⲆⲆⲆ": ⲆΔ++,
		"ΔᐃⵠⵠⵠΔᐃ": ⲆΔ++,
		"ᐃΔᐃⲆᐃΔⲆ": ⲆΔ++,
		"ⲆΔⵠⲆΔⵠᐃ": ⲆΔ++,
		"ⲆⲆΔⲆⵠΔⲆ": ⲆΔ++,
		"ⲆΔⲆᐃᐃΔⵠ": ⲆΔ++,
		"ⵠᐃᐃⵠΔΔⲆ": ⲆΔ++,
		"ⲆⲆⵠⵠⲆⲆΔ": ⲆΔ++,
		"ⲆΔⵠΔⲆⵠⲆ": ⲆΔ++,
		"ⲆᐃΔⲆΔⵠΔ": ⲆΔ++,
		"ⲆⲆΔⲆΔΔⵠ": ⲆΔ++,
		"ⵠᐃΔⵠᐃᐃⵠ": ⲆΔ++,
		"ⲆΔⵠⲆΔⲆΔ": ⲆΔ++,
		"ᐃᐃⲆⵠᐃΔΔ": ⲆΔ++,
		"ⵠΔⵠᐃⵠᐃΔ": ⲆΔ++,
		"ⲆⵠᐃᐃᐃΔⵠ": ⲆΔ++,
		"ⲆⲆⲆⵠΔΔⵠ": ⲆΔ++,
		"ⲆⵠᐃΔⲆⵠⵠ": ⲆΔ++,
		"ᐃⵠⲆΔⲆⵠⲆⵠⲆ": ⲆΔ++,
		"ⵠᐃᐃⲆⵠΔΔ": ⲆΔ++,
		"ᐃᐃᐃⲆᐃΔⲆ": ⲆΔ++,
		"ⲆⵠΔΔᐃᐃⵠ": ⲆΔ++,
		"ⲆᐃᐃⵠΔᐃΔ": ⲆΔ++,
		"ᐃⵠΔⲆⲆⲆΔ": ⲆΔ++,
		"ΔⲆΔΔⵠ": ⲆΔ++,
		"ⲆᐃᐃⲆΔ": ⲆΔ++,
		"ⵠⵠⵠΔⲆⲆΔ": ⲆΔ++,
		"ⲆᐃⲆⲆΔΔⵠ": ⲆΔ++,
		"ᐃΔΔⲆⲆⵠᐃ": ⲆΔ++,
		"ᐃΔⲆᐃᐃⵠΔ": ⲆΔ++,
		"ΔⵠᐃᐃΔⲆΔ": ⲆΔ++,
		"ⵠᐃᐃᐃⵠⵠᐃ": ⲆΔ++,
		"ΔᐃⵠⵠᐃⵠⲆ": ⲆΔ++,
		"ⲆᐃⵠⵠⲆΔⵠ": ⲆΔ++,
		"ⵠΔΔᐃⵠΔΔ": ⲆΔ++,
		"ⲆᐃᐃΔⵠⲆΔ": ⲆΔ++,
		"ᐃᐃⲆΔᐃⲆⵠ": ⲆΔ++,
		"ΔΔⲆⵠⲆⵠΔ": ⲆΔ++,
		"ᐃⲆΔⵠⵠⵠⲆ": ⲆΔ++,
		"ⵠⲆⲆΔⵠⲆΔ": ⲆΔ++,
		"ⵠΔΔᐃᐃⲆᐃ": ⲆΔ++,
		"ⲆΔΔΔΔⵠᐃ": ⲆΔ++,
		"ΔᐃⲆΔⵠⲆΔ": ⲆΔ++,
		"ΔⲆⲆᐃⵠⲆⵠ": ⲆΔ++,
		"ⲆⵠᐃⲆΔΔᐃ": ⲆΔ++,
		"ᐃⲆⵠΔΔᐃⵠ": ⲆΔ++,
		"ΔΔⲆⲆⲆᐃⵠ": ⲆΔ++,
		"ᐃᐃⲆⲆΔⲆᐃ": ⲆΔ++,
		"ⵠⵠⲆⵠⵠⲆᐃ": ⲆΔ++,
		"ΔⲆᐃⵠⵠⲆΔ": ⲆΔ++,
		"ⲆⵠᐃⵠᐃⵠΔ": ⲆΔ++,
		"ᐃⲆⲆΔⲆΔⵠ": ⲆΔ++,
		"ΔΔᐃⲆΔⲆᐃ": ⲆΔ++,
		"ᐃⲆⲆⲆᐃΔⲆ": ⲆΔ++,
		"ᐃᐃⵠⵠᐃΔΔ": ⲆΔ++,
		"ⵠΔⲆᐃᐃΔᐃ": ⲆΔ++,
		"ⵠⵠᐃΔᐃⵠⵠ": ⲆΔ++,
		"ΔᐃᐃⵠᐃΔΔ": ⲆΔ++,
		"ᐃΔᐃΔⵠⲆΔ": ⲆΔ++,
		"ᐃⲆΔᐃⵠᐃⵠ": ⲆΔ++,
		"ⵠΔᐃᐃΔᐃⵠ": ⲆΔ++,
		"ΔⲆᐃⲆᐃⲆᐃ": ⲆΔ++,
		"ᐃⵠⵠΔᐃᐃᐃ": ⲆΔ++,
		"ⲆⵠⵠᐃⲆΔⵠ": ⲆΔ++,
		"ΔⲆᐃⲆᐃᐃⵠ": ⲆΔ++,
		"ΔⲆⵠᐃΔᐃⲆ": ⲆΔ++,
		"ΔᐃⲆΔⵠⲆⵠ": ⲆΔ++,
		"ⲆΔΔᐃᐃᐃᐃ": ⲆΔ++,
		"ⲆⵠΔⲆΔⲆⵠ": ⲆΔ++,
		"ⵠⵠⲆⵠⵠⵠⵠ": ⲆΔ++,
		"ⵠⵠⲆⵠⲆΔᐃ": ⲆΔ++,
		"ⵠᐃⲆⵠᐃΔᐃ": ⲆΔ++,
		"ⵠⵠⵠᐃΔᐃⲆ": ⲆΔ++,
		"ⵠⵠᐃΔᐃⲆΔ": ⲆΔ++,
		"ⵠᐃⵠⵠΔᐃᐃ": ⲆΔ++,
		"ⲆΔΔΔΔᐃᐃ": ⲆΔ++,
		"ⵠᐃⵠⲆⲆᐃⲆ": ⲆΔ++,
		"ΔΔⵠᐃⲆⵠᐃ": ⲆΔ++,
		"ⵠᐃⲆⵠⲆⵠᐃ": ⲆΔ++,
		"ᐃΔᐃᐃⵠΔⲆ": ⲆΔ++,
		"ΔⵠⲆⵠⲆⲆᐃ": ⲆΔ++,
		"ᐃᐃⵠⵠΔⲆᐃ": ⲆΔ++,
		"ΔΔΔᐃⵠⵠⲆ": ⲆΔ++,
		"ⵠⲆΔⵠⵠⲆΔ": ⲆΔ++,
		"ⵠⲆᐃⵠⵠΔΔ": ⲆΔ++,
		"ΔᐃⲆⵠΔⲆΔ": ⲆΔ++,
		"ⲆᐃᐃΔᐃᐃᐃ": ⲆΔ++,
		"ᐃⲆⲆΔᐃⵠᐃ": ⲆΔ++,
		"ΔᐃΔᐃᐃᐃᐃ": ⲆΔ++,
		"ΔᐃΔⲆⲆⲆᐃ": ⲆΔ++,
		"ᐃⵠΔᐃΔ": ⲆΔ++,
		"ΔᐃⲆΔᐃⵠⲆ": ⲆΔ++,
		"ᐃᐃΔΔⲆⲆⵠ": ⲆΔ++,
		"ΔⲆⲆⵠᐃ": ⲆΔ++,
		"ΔⵠᐃΔⲆᐃⵠ": ⲆΔ++,
		"ΔΔⲆΔⵠⲆΔ": ⲆΔ++,
		"ᐃⵠΔᐃⲆΔΔ": ⲆΔ++,
		"ⵠΔⲆⲆⲆΔⲆ": ⲆΔ++,
		"ⲆⲆᐃΔⲆᐃⲆ": ⲆΔ++,
		"ᐃΔⲆᐃᐃ": ⲆΔ++,
		"ΔΔⲆⵠᐃⲆᐃ": ⲆΔ++,
		"ⵠᐃⵠⲆⵠΔⵠⵠⵠ": ⲆΔ++,
		"ⲆⲆΔΔⵠΔⲆᐃⲆ": ⲆΔ++,
		"ⵠᐃⵠΔᐃᐃⲆⲆⲆ": ⲆΔ++,
		"ᐃⲆᐃⵠⵠΔᐃⵠᐃ": ⲆΔ++,
		"ⲆΔΔⵠⲆⲆᐃ": ⲆΔ++,
		"ⵠⵠΔΔΔⲆᐃ": ⲆΔ++,
		"ⲆᐃⵠᐃΔΔⵠ": ⲆΔ++,
		"ΔᐃᐃⵠⲆⵠΔ": ⲆΔ++,
		"ᐃΔΔⵠⵠΔΔ": ⲆΔ++,
		"ⵠⵠᐃΔⵠⵠΔ": ⲆΔ++,
		"ΔᐃⵠⵠⵠⲆⲆ": ⲆΔ++,
		"ⵠΔᐃⲆΔⲆⲆ": ⲆΔ++,
		"ΔⲆⵠᐃΔΔⵠ": ⲆΔ++,
		"ΔⵠⲆᐃⲆᐃΔ": ⲆΔ++,
		"ᐃΔⲆⵠΔ": ⲆΔ++,
		"ⵠⲆΔΔΔ": ⲆΔ++,
		"ⲆΔⵠⲆⵠⲆᐃ": ⲆΔ++,
		"ᐃΔⲆΔᐃᐃⲆ": ⲆΔ++,
		"ᐃᐃΔⵠΔΔᐃ": ⲆΔ++,
		"ⵠⵠⵠΔΔⲆⲆ": ⲆΔ++,
		"ⲆⲆᐃⲆᐃⵠᐃ": ⲆΔ++,
		"ⲆΔⵠΔᐃⲆⵠ": ⲆΔ++,
		"ᐃᐃᐃⲆⵠΔⵠ": ⲆΔ++,
		"ΔΔⲆΔΔⲆⲆ": ⲆΔ++,
		"ⵠⵠᐃᐃΔΔⵠ": ⲆΔ++,
		"ⲆᐃᐃᐃΔΔⲆ": ⲆΔ++,
		"ΔⵠⲆⵠⵠⵠⲆ": ⲆΔ++,
		"ΔΔⲆⲆΔⲆᐃ": ⲆΔ++,
		"ΔⵠΔᐃΔΔΔΔΔ": ⲆΔ++,
		"ⵠΔⲆΔΔΔΔᐃΔ": ⲆΔ++,
		"ΔΔⵠⲆⵠᐃⲆ": ⲆΔ++,
		"ⲆᐃⲆΔᐃΔⲆ": ⲆΔ++,
		"ΔⲆᐃⲆᐃΔⵠ": ⲆΔ++,
		"ⲆⲆᐃᐃⵠⵠⵠ": ⲆΔ++,
		"ΔᐃⲆᐃⲆⵠⵠ": ⲆΔ++,
		"ⲆⲆΔⵠⵠᐃᐃ": ⲆΔ++,
		"ΔⲆΔⵠΔᐃⲆ": ⲆΔ++,
		"ⲆⲆᐃⲆⲆᐃᐃ": ⲆΔ++,
		"ⲆᐃⵠⲆᐃᐃⲆ": ⲆΔ++,
		"ᐃᐃⲆⵠⲆⲆⲆ": ⲆΔ++,
		"ⲆⵠᐃΔᐃᐃᐃ": ⲆΔ++,
		"ᐃⲆⵠⵠⵠⲆᐃ": ⲆΔ++,
		"ⵠΔᐃΔΔⲆⵠ": ⲆΔ++,
		"ᐃⲆⵠΔⵠᐃⵠ": ⲆΔ++,
		"ⲆΔⵠᐃᐃⵠᐃ": ⲆΔ++,
		"ⲆⲆⵠⵠΔΔⵠ": ⲆΔ++,
		"ΔΔⲆⲆᐃᐃΔ": ⲆΔ++,
		"ᐃᐃΔⵠⲆⲆⵠ": ⲆΔ++,
		"ΔΔΔᐃᐃⵠᐃΔΔ": ⲆΔ++,
		"ᐃⵠΔᐃⵠ": ⲆΔ++,
		"ΔΔⵠⵠΔ": ⲆΔ++,
		"ⵠⵠᐃⵠⲆⵠΔᐃⲆ": ⲆΔ++,
		"ⲆΔⲆⲆⲆᐃᐃΔⵠ": ⲆΔ++,
		"ⲆⵠΔᐃⵠᐃⲆⲆⵠ": ⲆΔ++,
		"ⲆΔⵠⵠⲆⲆΔⵠⵠ": ⲆΔ++,
		"ΔΔΔⵠᐃΔΔ": ⲆΔ++,
		"ⲆⵠᐃⵠⲆⲆⵠ": ⲆΔ++,
		"ΔΔⵠΔⲆᐃΔ": ⲆΔ++,
		"ΔᐃᐃΔⵠᐃΔ": ⲆΔ++,
		"ᐃΔᐃⲆⵠⵠⲆ": ⲆΔ++,
		"ΔΔΔᐃⲆⲆΔⲆⵠ": ⲆΔ++,
		"ΔⲆⵠⲆΔᐃΔ": ⲆΔ++,
		"ⲆΔᐃⵠΔᐃⵠ": ⲆΔ++,
		"ⵠΔⲆⲆᐃⵠⵠ": ⲆΔ++,
		"ΔⲆⲆᐃⲆⲆⵠ": ⲆΔ++,
		"ᐃⵠᐃΔΔᐃᐃ": ⲆΔ++,
		"ⵠⲆⲆΔᐃⲆΔ": ⲆΔ++,
		"ⵠᐃⵠⲆᐃⵠⵠ": ⲆΔ++,
		"ΔΔᐃᐃⵠ": ⲆΔ++,
		"ⲆⲆⵠⵠΔⵠᐃⲆⲆ": ⲆΔ++,
		"ⵠⵠⲆΔⵠΔᐃ": ⲆΔ++,
		"ΔⵠⵠⵠⵠΔⲆ": ⲆΔ++,
		"ΔⲆⵠⲆⲆᐃⲆ": ⲆΔ++,
		"ⵠᐃᐃⲆᐃΔᐃ": ⲆΔ++,
		"ⵠΔᐃⵠⲆᐃⲆ": ⲆΔ++,
		"ΔΔⲆⵠΔΔⲆ": ⲆΔ++,
		"ⲆⲆΔΔⲆΔⲆ": ⲆΔ++,
		"ⵠⵠⵠΔᐃΔΔ": ⲆΔ++,
		"ⲆⵠⲆᐃⵠⲆΔ": ⲆΔ++,
		"ᐃΔᐃΔᐃⵠⵠ": ⲆΔ++,
		"ᐃⲆⵠΔΔᐃᐃ": ⲆΔ++,
		"ᐃΔⲆΔΔⲆⵠ": ⲆΔ++,
		"ⲆⵠⲆΔΔᐃⵠ": ⲆΔ++,
		"ⵠⵠⵠᐃᐃ": ⲆΔ++,
		"ⵠⵠⲆⲆⲆⲆᐃ": ⲆΔ++,
		"ⵠⵠΔᐃⵠⵠΔ": ⲆΔ++,
		"ᐃΔᐃᐃᐃⵠΔ": ⲆΔ++,
		"ⵠⲆΔΔᐃⵠⵠ": ⲆΔ++,
		"ᐃⵠⵠᐃᐃΔΔ": ⲆΔ++,
		"ΔⲆⵠⵠΔⵠΔ": ⲆΔ++,
		"ⲆΔⵠᐃⵠᐃΔ": ⲆΔ++,
		"ⲆᐃΔⵠᐃⲆΔ": ⲆΔ++,
		"ᐃⵠⵠᐃΔⲆΔ": ⲆΔ++,
		"ⲆⲆⵠⲆΔⲆⲆ": ⲆΔ++,
		"ΔΔᐃᐃΔᐃⵠ": ⲆΔ++,
		"ⵠⵠⲆⵠᐃΔⲆ": ⲆΔ++,
		"ⲆᐃΔⲆⲆⲆⵠ": ⲆΔ++,
		"ⲆΔⲆΔⵠᐃᐃ": ⲆΔ++,
		"ᐃᐃⲆΔⲆᐃⲆ": ⲆΔ++,
		"ⵠⲆⵠⲆΔΔⲆ": ⲆΔ++,
		"ⲆⵠⲆⲆⲆΔΔ": ⲆΔ++,
		"ⵠΔΔΔᐃⵠⲆ": ⲆΔ++,
		"ⵠΔⲆⲆⵠⵠᐃ": ⲆΔ++,
		"ΔⵠⲆⵠⵠⵠⵠ": ⲆΔ++,
		"ΔΔΔΔᐃⵠⵠ": ⲆΔ++,
		"ΔⵠΔⵠΔᐃⲆ": ⲆΔ++,
		"ⲆⲆᐃⲆΔΔᐃ": ⲆΔ++,
		"ΔΔᐃᐃⵠⵠᐃ": ⲆΔ++,
		"ⲆΔΔⲆⵠΔᐃ": ⲆΔ++,
		"ΔΔΔⲆΔⵠⵠ": ⲆΔ++,
		"ΔⲆⵠΔᐃⵠΔⵠΔ": ⲆΔ++,
		"ᐃⲆⵠⵠⵠⲆⵠΔᐃ": ⲆΔ++,
		"ⲆᐃᐃⲆΔᐃⵠΔⵠ": ⲆΔ++,
		"ᐃⲆⲆⵠᐃⵠⲆᐃⵠ": ⲆΔ++,
		"ⲆᐃΔᐃⲆᐃΔ": ⲆΔ++,
		"ᐃΔᐃᐃⵠⲆⵠ": ⲆΔ++,
		"ⵠⲆΔⵠⲆ": ⲆΔ++,
		"ⲆᐃΔΔᐃⲆⵠ": ⲆΔ++,
		"ⵠᐃΔᐃᐃⵠΔ": ⲆΔ++,
		"ⲆᐃⵠⲆᐃⵠΔ": ⲆΔ++,
		"ⵠᐃⲆⲆᐃⵠⲆ": ⲆΔ++,
		"ΔΔⲆⲆⵠⲆᐃ": ⲆΔ++,
		"ⲆΔⲆⵠⲆⵠΔ": ⲆΔ++,
		"ᐃⵠⵠΔᐃᐃⲆ": ⲆΔ++,
		"ⵠᐃΔᐃⵠⵠⲆ": ⲆΔ++,
		"ΔΔᐃᐃᐃΔΔ": ⲆΔ++,
		"ΔⵠᐃᐃᐃΔⵠ": ⲆΔ++,
		"ΔⲆΔⲆᐃⵠⵠ": ⲆΔ++,
		"ΔⵠⲆΔⲆ": ⲆΔ++,
		"ΔⲆᐃΔⵠᐃΔ": ⲆΔ++,
		"ⵠᐃⵠⵠΔⵠΔ": ⲆΔ++,
		"ᐃⵠⲆΔⵠⵠⲆ": ⲆΔ++,
		"ΔᐃⲆⵠᐃᐃᐃ": ⲆΔ++,
		"ΔⲆⲆⲆΔⲆᐃ": ⲆΔ++,
		"ᐃⲆΔⲆΔ": ⲆΔ++,
		"ⵠΔΔⵠⵠᐃΔ": ⲆΔ++,
		"ΔᐃΔⵠᐃⵠⲆᐃΔ": ⲆΔ++,
		"ⵠⲆⲆⲆᐃ": ⲆΔ++,
		"ΔᐃⲆⲆΔᐃᐃ": ⲆΔ++,
		"ⵠΔΔⲆΔⲆⵠ": ⲆΔ++,
		"ⵠⵠᐃΔᐃⵠⲆ": ⲆΔ++,
		"ⲆᐃΔΔΔⵠⵠ": ⲆΔ++,
		"ⵠⵠⲆΔⵠⲆΔ": ⲆΔ++,
		"ΔⵠⲆΔᐃⵠⵠ": ⲆΔ++,
		"ΔᐃᐃᐃⲆⲆⵠ": ⲆΔ++,
		"ⲆⵠⵠⲆᐃΔⵠ": ⲆΔ++,
		"ΔᐃⵠⵠⲆΔⲆ": ⲆΔ++,
		"ⲆⲆⵠⲆᐃⲆⲆ": ⲆΔ++,
		"ⵠⵠΔΔΔⲆΔ": ⲆΔ++,
		"ᐃΔⵠⵠᐃᐃᐃ": ⲆΔ++,
		"ΔⲆⵠⵠⵠⵠⵠ": ⲆΔ++,
		"ⵠⲆⲆⲆΔⵠΔ": ⲆΔ++,
		"ΔΔⲆᐃΔᐃᐃ": ⲆΔ++,
		"ΔΔⲆᐃΔᐃⵠ": ⲆΔ++,
		"ⲆⵠΔᐃᐃᐃΔ": ⲆΔ++,
		"ⵠᐃΔΔᐃⲆⲆ": ⲆΔ++,
		"ⵠⵠⵠΔⵠᐃΔ": ⲆΔ++,
		"ⲆΔᐃΔⲆⲆⲆ": ⲆΔ++,
		"ᐃⵠⲆⲆΔΔΔ": ⲆΔ++,
		"ΔⲆⵠⵠⵠⵠⲆ": ⲆΔ++,
		"ⲆΔⵠⵠⲆⵠᐃᐃᐃ": ⲆΔ++,
		"ΔⲆⲆⲆⲆΔΔ": ⲆΔ++,
		"ᐃⲆΔⲆᐃΔⵠ": ⲆΔ++,
		"ⵠⵠΔᐃⲆΔᐃ": ⲆΔ++,
		"ᐃΔΔΔΔⵠᐃ": ⲆΔ++,
		"ᐃⵠⲆᐃΔⵠᐃ": ⲆΔ++,
		"ⵠΔⲆΔΔΔⵠ": ⲆΔ++,
		"ⵠⲆΔᐃΔᐃⵠ": ⲆΔ++,
		"ΔΔᐃᐃⵠᐃΔ": ⲆΔ++,
		"ᐃΔΔⲆΔΔⵠ": ⲆΔ++,
		"ᐃΔⲆⵠᐃⵠᐃ": ⲆΔ++,
		"Δⵠⵠⵠᐃᐃᐃ": ⲆΔ++,
		"ⲆᐃΔⵠΔⲆⲆ": ⲆΔ++,
		"ⲆΔΔⵠⵠᐃⲆ": ⲆΔ++,
		"ᐃΔⵠΔⵠᐃⵠ": ⲆΔ++,
		"ᐃⲆⵠⲆΔⵠΔ": ⲆΔ++,
		"ᐃⵠⵠΔΔⲆⲆ": ⲆΔ++,
		"ⵠᐃᐃⵠⵠⵠⵠ": ⲆΔ++,
		"ΔⲆⵠΔⲆΔΔ": ⲆΔ++,
		"ⲆⲆⲆⲆᐃΔᐃ": ⲆΔ++,
		"ΔᐃᐃᐃⵠⲆⵠ": ⲆΔ++,
		"ΔΔⲆⵠΔΔᐃ": ⲆΔ++,
		"ᐃⲆΔⵠΔᐃᐃ": ⲆΔ++,
		"ΔⲆⲆⲆⲆⲆΔ": ⲆΔ++,
		"ⲆΔⲆΔⵠΔⵠ": ⲆΔ++,
		"ⲆⵠΔᐃⵠ": ⲆΔ++,
		"ΔΔⲆΔⵠⲆᐃ": ⲆΔ++,
		"ⵠⵠⲆᐃⲆⲆΔ": ⲆΔ++,
		"ᐃΔΔⲆⲆⵠⵠ": ⲆΔ++,
		"ⲆⲆΔᐃᐃⲆⲆ": ⲆΔ++,
		"ⵠᐃⵠᐃⲆⲆᐃ": ⲆΔ++,
		"ᐃⵠⲆᐃⵠΔᐃ": ⲆΔ++,
		"ΔᐃⲆΔΔⲆΔ": ⲆΔ++,
		"ΔⲆᐃⲆⵠΔᐃ": ⲆΔ++,
		"ᐃᐃⵠΔⲆⲆⲆ": ⲆΔ++,
		"ⲆᐃᐃΔᐃⵠⵠ": ⲆΔ++,
		"ⲆⵠⵠΔⲆⲆⵠ": ⲆΔ++,
		"ⵠᐃΔᐃᐃⲆⲆ": ⲆΔ++,
		"ⲆᐃΔᐃᐃⵠⵠ": ⲆΔ++,
		"ᐃⲆⵠᐃⵠΔΔ": ⲆΔ++,
		"ⲆΔΔᐃⵠⲆⵠ": ⲆΔ++,
		"ⲆᐃⵠⲆΔⵠᐃ": ⲆΔ++,
		"ⲆᐃᐃΔΔΔⲆ": ⲆΔ++,
		"ΔⵠⲆⵠᐃᐃⵠ": ⲆΔ++,
		"ᐃᐃᐃⵠⲆᐃⲆ": ⲆΔ++,
		"ⲆΔᐃΔⲆⵠΔ": ⲆΔ++,
		"ⵠⵠΔΔΔⵠⵠ": ⲆΔ++,
		"ⵠⲆⲆⵠΔⵠⵠ": ⲆΔ++,
		"ⲆΔᐃΔᐃΔΔ": ⲆΔ++,
		"ⲆⵠⲆΔⲆΔⲆ": ⲆΔ++,
		"ⲆⵠⵠⲆⲆⵠⵠ": ⲆΔ++,
		"ᐃⲆᐃⲆΔⵠⲆ": ⲆΔ++,
		"ΔⲆⲆⵠΔΔᐃ": ⲆΔ++,
		"ΔⲆΔⲆᐃⲆΔ": ⲆΔ++,
		"ⵠⵠΔⵠΔΔᐃ": ⲆΔ++,
		"ᐃⲆⲆⵠΔⵠⵠ": ⲆΔ++,
		"ⵠⲆΔⲆᐃΔᐃ": ⲆΔ++,
		"ΔⵠⲆⲆⵠΔⵠ": ⲆΔ++,
		"ⲆⵠΔᐃΔᐃΔ": ⲆΔ++,
		"ⵠΔΔΔᐃᐃᐃ": ⲆΔ++,
		"ⵠΔⲆⵠ": ⲆΔ++,
		"ΔᐃΔᐃ": ⲆΔ++,
		"ⲆⵠⲆⲆᐃⲆΔ": ⲆΔ++,
		"ΔⵠΔⲆⲆⵠⲆ": ⲆΔ++,
		"ⲆⵠΔΔⵠᐃⲆ": ⲆΔ++,
		"ⵠᐃⲆᐃᐃᐃᐃ": ⲆΔ++,
		"ⲆᐃΔᐃⲆᐃᐃ": ⲆΔ++,
		"ⵠΔⲆⵠⵠᐃⲆ": ⲆΔ++,
		"ⵠⵠⲆᐃⵠᐃΔ": ⲆΔ++,
		"ᐃΔᐃᐃᐃ": ⲆΔ++,
		"ⲆⵠⲆΔⵠⲆᐃ": ⲆΔ++,
		"ⲆᐃΔⲆᐃ": ⲆΔ++,
		"Δᐃᐃᐃᐃᐃᐃ": ⲆΔ++,
		"ᐃⲆⵠⵠⵠ": ⲆΔ++,
		"ᐃⲆᐃΔΔⲆΔ": ⲆΔ++,
		"ΔΔΔᐃⵠ": ⲆΔ++,
		"ⵠΔᐃΔⵠΔᐃ": ⲆΔ++,
		"ⲆⲆΔΔⵠ": ⲆΔ++,
		"ᐃΔⵠⲆⵠ": ⲆΔ++,
		"ΔΔⵠⲆᐃⵠⲆ": ⲆΔ++,
		"ⲆΔΔⵠΔΔⵠ": ⲆΔ++,
		"ⲆⲆΔⵠΔⵠΔ": ⲆΔ++,
		"ⲆⵠΔⵠⲆⲆⲆ": ⲆΔ++,
		"ᐃᐃᐃΔΔⲆΔ": ⲆΔ++,
		"ᐃΔⵠΔⲆΔΔ": ⲆΔ++,
		"ΔⵠⲆⵠⵠΔⲆ": ⲆΔ++,
		"ⲆⵠⲆᐃΔᐃⲆ": ⲆΔ++,
		"ⲆΔΔᐃⲆⲆᐃ": ⲆΔ++,
		"ⵠᐃⵠⵠΔ": ⲆΔ++,
		"ⲆᐃⲆⲆᐃΔⵠ": ⲆΔ++,
		"ⲆⵠⵠⲆΔ": ⲆΔ++,
		"ΔⲆᐃᐃᐃⵠᐃ": ⲆΔ++,
		"ⵠᐃⲆⵠⲆΔⵠ": ⲆΔ++,
		"ΔᐃⲆΔⲆⵠΔ": ⲆΔ++,
		"ⵠⲆΔΔⵠⲆᐃ": ⲆΔ++,
		"ⲆⲆⲆⵠⵠⲆⵠ": ⲆΔ++,
		"ᐃⵠⲆⲆΔΔⲆ": ⲆΔ++,
		"ΔⵠⵠⲆⵠⵠⲆⵠΔ": ⲆΔ++,
		"ΔⲆΔᐃᐃⵠᐃ": ⲆΔ++,
		"ⵠⵠⵠᐃⵠⵠⵠ": ⲆΔ++,
		"ⵠⲆᐃⲆᐃⵠΔⲆⲆ": ⲆΔ++,
		"ⵠΔᐃΔⲆⵠⲆ": ⲆΔ++,
		"ᐃΔⵠᐃⵠᐃⵠ": ⲆΔ++,
		"ᐃⲆᐃΔⲆⵠΔ": ⲆΔ++,
		"ΔᐃⵠᐃⵠⵠΔ": ⲆΔ++,
		"ΔⲆᐃᐃⵠ": ⲆΔ++,
		"ⲆᐃⲆᐃᐃΔⵠ": ⲆΔ++,
		"ᐃⲆⵠΔⵠⵠⵠ": ⲆΔ++,
		"ⵠⲆⲆⲆⵠⵠⲆ": ⲆΔ++,
		"ⲆⵠᐃⵠⵠΔΔ": ⲆΔ++,
		"ⵠΔᐃΔᐃΔⲆ": ⲆΔ++,
		"ΔⵠΔⵠⵠⲆⵠ": ⲆΔ++,
		"ᐃΔΔᐃᐃⵠⵠ": ⲆΔ++,
		"ⵠⵠΔᐃⲆᐃⲆ": ⲆΔ++,
		"Δⵠⵠⵠᐃⵠⵠ": ⲆΔ++,
		"ᐃⲆⵠⲆⵠᐃⲆ": ⲆΔ++,
		"ΔᐃΔΔᐃΔⵠ": ⲆΔ++,
		"ⲆΔᐃΔΔᐃⵠ": ⲆΔ++,
		"ⲆΔⵠΔⲆΔⵠ": ⲆΔ++,
		"ⲆᐃΔΔⲆⵠⵠ": ⲆΔ++,
		"ⵠⵠⲆΔΔ": ⲆΔ++,
		"ᐃⲆⵠⵠΔⲆΔ": ⲆΔ++,
		"ⲆⲆⵠⵠᐃⵠᐃ": ⲆΔ++,
		"ΔᐃΔᐃΔΔᐃ": ⲆΔ++,
		"ⵠΔⲆⵠᐃⲆΔ": ⲆΔ++,
		"ⵠᐃᐃⵠΔᐃⵠ": ⲆΔ++,
		"ⵠᐃΔᐃⵠⵠΔ": ⲆΔ++,
		"ⵠᐃⲆⲆᐃᐃⲆ": ⲆΔ++,
		"ᐃΔᐃΔⲆᐃⵠ": ⲆΔ++,
		"ⲆΔⲆⲆⵠⵠⲆ": ⲆΔ++,
		"ⲆᐃᐃᐃⲆⵠⵠ": ⲆΔ++,
		"ⵠⲆⵠᐃⲆΔⲆ": ⲆΔ++,
		"ᐃⵠᐃⵠⲆⲆᐃ": ⲆΔ++,
		"ⲆⵠΔⵠΔᐃⵠ": ⲆΔ++,
		"ⵠᐃⵠΔⵠⲆⲆ": ⲆΔ++,
		"ΔᐃⲆΔᐃ": ⲆΔ++,
		"ᐃΔⲆⵠᐃΔΔ": ⲆΔ++,
		"ⲆⲆⲆⲆⵠᐃⵠ": ⲆΔ++,
		"ⲆⲆΔⲆΔⲆΔ": ⲆΔ++,
		"ᐃᐃⲆΔⵠⵠΔ": ⲆΔ++,
		"ΔΔⵠⲆⵠᐃΔ": ⲆΔ++,
		"ΔⲆⵠⵠⲆΔⲆ": ⲆΔ++,
		"ⲆⲆΔⲆⵠᐃⵠ": ⲆΔ++,
		"ᐃⵠⲆΔⵠⲆΔ": ⲆΔ++,
		"ⲆⵠⵠⵠᐃΔΔ": ⲆΔ++,
		"ΔⵠΔⲆᐃᐃΔ": ⲆΔ++,
		"ⲆᐃᐃᐃΔⲆᐃ": ⲆΔ++,
		"ⲆⵠⵠᐃΔⵠᐃ": ⲆΔ++,
		"ᐃΔΔᐃⲆⲆΔ": ⲆΔ++,
		"ᐃⲆⲆⵠⲆⲆᐃ": ⲆΔ++,
		"ᐃⲆⵠΔⵠΔⲆ": ⲆΔ++,
		"ΔᐃⵠΔⲆᐃⲆ": ⲆΔ++,
		"ⲆᐃΔⲆᐃⲆΔ": ⲆΔ++,
		"ᐃᐃΔⵠⵠᐃⲆ": ⲆΔ++,
		"ΔᐃᐃⲆⲆⵠΔ": ⲆΔ++,
		"ΔᐃⲆⲆⲆΔᐃ": ⲆΔ++,
		"ⲆᐃⲆΔⲆ": ⲆΔ++,
		"ΔᐃⲆᐃⲆΔΔ": ⲆΔ++,
		"ⵠⲆⵠΔⵠᐃΔ": ⲆΔ++,
		"ΔΔᐃⵠⲆⲆᐃ": ⲆΔ++,
		"ⲆᐃΔᐃΔⵠⲆ": ⲆΔ++,
		"ΔΔⲆᐃⲆΔΔ": ⲆΔ++,
		"ⲆΔΔᐃᐃⵠᐃ": ⲆΔ++,
		"ⲆⲆᐃΔⲆᐃΔ": ⲆΔ++,
		"ⲆⲆΔⵠᐃᐃⵠ": ⲆΔ++,
		"ⲆⵠᐃΔⲆΔΔ": ⲆΔ++,
		"ⲆⵠⲆⵠⲆⲆΔ": ⲆΔ++,
		"ᐃⲆⵠᐃΔⲆΔ": ⲆΔ++,
		"ᐃⲆΔⵠⵠⲆⵠ": ⲆΔ++,
		"ⵠⵠΔᐃᐃⵠΔ": ⲆΔ++,
		"ᐃⵠΔΔᐃⵠⵠ": ⲆΔ++,
		"ΔⵠᐃⲆⵠᐃⲆ": ⲆΔ++,
		"ⲆΔΔⵠᐃΔᐃ": ⲆΔ++,
		"ᐃⵠΔΔⵠᐃΔ": ⲆΔ++,
		"ΔⵠᐃⵠⵠⵠΔ": ⲆΔ++,
		"ⵠⵠⲆⲆᐃⵠⲆ": ⲆΔ++,
		"ᐃⲆᐃⵠᐃⲆᐃ": ⲆΔ++,
		"ⵠΔΔⵠⲆΔⲆ": ⲆΔ++,
		"ⵠΔⵠᐃΔΔⵠ": ⲆΔ++,
		"ⵠᐃᐃΔⲆᐃΔ": ⲆΔ++,
		"ᐃⲆᐃᐃᐃᐃⵠ": ⲆΔ++,
		"ⵠᐃⵠΔⵠⲆΔ": ⲆΔ++,
		"ΔⲆᐃⲆⲆᐃⲆ": ⲆΔ++,
		"ᐃⵠΔᐃΔⵠⵠ": ⲆΔ++,
		"ΔⲆⵠⲆᐃΔΔ": ⲆΔ++,
		"ⵠⵠᐃᐃΔⵠΔ": ["#E9CF96", "#144940"],
		"ΔⵠⲆᐃᐃⵠΔ": ⲆΔ++,
		"ᐃⵠⲆᐃⲆᐃΔ": ⲆΔ++,
		"ΔᐃⵠⵠⲆⲆⲆ": ⲆΔ++,
		"ⵠⲆᐃⵠᐃⲆΔ": ⲆΔ++,
		"ᐃⲆᐃⵠΔⲆᐃ": ⲆΔ++,
		"ᐃⵠⲆⵠⲆⵠⲆ": ⲆΔ++,
		"ⵠⲆΔⲆᐃⵠⲆ": ⲆΔ++,
		"ΔⵠᐃⲆⲆ": ⲆΔ++,
		"ⵠⵠᐃΔⲆⵠΔ": ⲆΔ++,
		"ⲆⲆΔΔⵠᐃᐃ": ⲆΔ++,
		"ⵠⵠⲆᐃΔⲆⲆ": ⲆΔ++,
		"ⵠᐃΔΔΔⵠⵠ": ⲆΔ++,
		"ⵠⵠⲆⲆᐃᐃΔ": ⲆΔ++,
		"ⲆⲆᐃΔΔΔᐃ": ⲆΔ++,
		"ᐃΔᐃⵠⲆⲆⲆ": ⲆΔ++,
		"ΔΔΔⲆΔⵠΔ": ⲆΔ++,
		"ⵠᐃⵠⲆⲆΔⵠ": ⲆΔ++,
		"ⲆΔΔⵠᐃⵠᐃ": ⲆΔ++,
		"ΔΔⲆᐃⲆⵠᐃ": ⲆΔ++,
		"ⵠⲆⵠᐃⲆΔⵠ": ⲆΔ++,
		"ᐃⲆⵠⲆⵠΔᐃ": ⲆΔ++,
		"ΔⲆΔⵠᐃᐃΔ": ⲆΔ++,
		"ΔⲆⲆⲆⵠΔⲆ": ⲆΔ++,
		"ᐃᐃⲆⲆᐃΔᐃ": ⲆΔ++,
		"ⲆⵠⲆΔⲆⵠⵠ": ⲆΔ++,
		"ᐃⵠΔⵠᐃΔⲆ": ⲆΔ++,
		"ᐃᐃᐃⵠᐃᐃᐃ": ⲆΔ++,
		"ⵠⲆⲆⲆⲆⵠΔ": ⲆΔ++,
		"ΔᐃⲆⲆΔⲆⵠ": ⲆΔ++,
		"ⵠⵠⲆΔΔᐃⲆ": ⲆΔ++,
		"ⵠⲆⲆⲆⲆⵠⵠ": ⲆΔ++,
		"ᐃΔᐃΔΔⲆΔ": ⲆΔ++,
		"ᐃⲆⲆⵠᐃΔΔ": ⲆΔ++,
		"ⲆΔⲆⲆⵠᐃⵠ": ⲆΔ++,
		"ⵠⵠⲆⲆᐃᐃᐃ": ⲆΔ++,
		"ⲆⵠⲆᐃⲆᐃⵠ": ⲆΔ++,
		"ⲆⵠⵠⵠⵠⵠΔ": ⲆΔ++,
		"ⲆΔᐃⲆᐃᐃΔ": ⲆΔ++,
		"ⲆⲆⲆΔⵠᐃⵠ": ⲆΔ++,
		"ⲆⵠⵠⵠΔᐃⲆ": ⲆΔ++,
		"ᐃⲆΔΔᐃᐃΔ": ⲆΔ++,
		"ΔΔⵠΔᐃᐃⵠ": ⲆΔ++,
		"ΔΔⵠⲆΔⲆᐃ": ⲆΔ++,
		"ΔⵠⲆⲆⵠⵠᐃ": ⲆΔ++,
		"ΔΔΔⲆⵠΔᐃ": ⲆΔ++,
		"ⵠᐃⲆⲆⵠΔΔ": ⲆΔ++,
		"ΔᐃΔΔⲆⲆⵠ": ⲆΔ++,
		"ⲆⵠᐃⵠΔΔⲆ": ⲆΔ++,
		"ᐃᐃΔⵠⵠⲆⲆ": ⲆΔ++,
		"ᐃᐃⲆⵠⲆΔΔ": ⲆΔ++,
		"ⵠᐃⵠⲆⵠⲆᐃ": ⲆΔ++,
		"ⲆΔⵠΔᐃⵠΔ": ⲆΔ++,
		"ᐃⲆⵠΔⲆⲆⵠ": ⲆΔ++,
		"ᐃⲆⵠⲆⵠᐃΔ": ⲆΔ++,
		"Ⲇⵠᐃᐃᐃᐃⵠ": ⲆΔ++,
		"ⲆⵠⲆΔᐃΔᐃ": ⲆΔ++,
		"ΔⲆΔⵠⲆⲆⲆ": ⲆΔ++,
		"ΔⵠΔᐃΔΔᐃ": ⲆΔ++,
		"ΔΔΔⲆΔⵠⲆ": ⲆΔ++,
		"ⵠᐃⵠᐃᐃⲆᐃ": ⲆΔ++,
		"ᐃΔⲆᐃⵠΔⵠ": ⲆΔ++,
		"ΔⵠⵠⲆⲆⵠⵠ": ⲆΔ++,
		"ⵠⲆⵠⲆⲆⲆᐃ": ⲆΔ++,
		"ⲆⲆΔᐃⲆⲆᐃ": ⲆΔ++,
		"ΔΔⵠⵠⲆᐃⵠ": ⲆΔ++,
		"ⵠⲆΔⲆᐃⵠⵠ": ⲆΔ++,
		"ᐃⵠⵠⲆⵠⵠᐃ": ⲆΔ++,
		"ᐃΔΔⵠⵠⵠⵠ": ⲆΔ++,
		"ᐃΔᐃΔⵠΔᐃ": ⲆΔ++,
		"ᐃΔΔⲆᐃ": ⲆΔ++,
		"ᐃΔⲆⲆⵠⵠⵠ": ⲆΔ++,
		"ⲆⲆⵠⵠⵠ": ⲆΔ++,
		"ΔⲆᐃⲆⵠⲆᐃ": ⲆΔ++,
		"ⲆⲆⵠΔᐃⲆΔ": ⲆΔ++,
		"ᐃᐃΔΔΔΔⵠ": ⲆΔ++,
		"ᐃᐃⲆΔᐃⲆΔ": ⲆΔ++,
		"ΔᐃⲆⲆⲆⲆᐃ": ⲆΔ++,
		"ΔΔΔⲆΔⲆᐃ": ⲆΔ++,
		"ᐃᐃⲆΔⲆⵠΔ": ⲆΔ++,
		"ΔᐃⵠΔᐃⲆᐃ": ⲆΔ++,
		"ᐃⲆⲆΔᐃⵠⲆ": ⲆΔ++,
		"ⵠΔⲆᐃΔⲆᐃ": ⲆΔ++,
		"ⵠⵠⲆⵠᐃᐃⲆ": ⲆΔ++,
		"ΔΔᐃᐃⵠⵠⵠ": ⲆΔ++,
		"ΔᐃΔⵠᐃᐃᐃ": ⲆΔ++,
		"ᐃᐃΔΔᐃΔᐃ": ⲆΔ++,
		"ΔΔᐃᐃⵠΔⵠ": ⲆΔ++,
		"ⵠⲆΔⲆΔΔΔ": ⲆΔ++,
		"ᐃⲆΔΔᐃⲆⲆ": ⲆΔ++,
		"ᐃⵠⵠΔⵠΔᐃ": ⲆΔ++,
		"ΔⵠΔⲆΔⲆΔ": ⲆΔ++,
		"ⲆᐃⵠᐃΔⲆⲆ": ⲆΔ++,
		"ΔΔΔΔⲆⵠⵠ": ⲆΔ++,
		"ΔⲆΔᐃⵠᐃΔ": ⲆΔ++,
		"ⵠⵠⵠⲆᐃⵠⵠ": ⲆΔ++,
		"ᐃⵠⲆⲆΔⲆⵠ": ⲆΔ++,
		"ⲆᐃⵠΔᐃⵠΔ": ⲆΔ++,
		"ⵠⵠⲆⲆⲆᐃᐃ": ⲆΔ++,
		"ΔⲆΔᐃⵠⲆΔ": ⲆΔ++,
		"ᐃΔΔᐃⲆⵠΔ": ⲆΔ++,
		"ⲆⲆⲆⵠⲆⲆⵠ": ⲆΔ++,
		"ΔᐃᐃᐃⲆᐃᐃ": ⲆΔ++,
		"ⲆⲆⵠⲆᐃⲆᐃ": ⲆΔ++,
		"Ⲇᐃⵠᐃⵠᐃᐃ": ⲆΔ++,
		"ⵠΔⲆⵠⲆⵠⵠ": ⲆΔ++,
		"ᐃⵠΔⲆⲆⵠⲆ": ⲆΔ++,
		"ⵠⲆⲆⵠⵠⵠᐃ": ⲆΔ++,
		"ⲆⲆⲆᐃᐃΔⲆ": ⲆΔ++,
		"ⲆⵠᐃⵠΔΔⵠ": ⲆΔ++,
		"ΔⲆⵠⵠΔⲆⲆ": ⲆΔ++,
		"ⲆΔⲆⵠΔᐃΔ": ⲆΔ++,
		"ΔⲆⵠΔᐃᐃΔ": ⲆΔ++,
		"ⲆⵠᐃΔⲆⵠΔ": ⲆΔ++,
		"ⲆⲆΔΔΔᐃⵠ": ⲆΔ++,
		"ⲆⵠΔᐃΔΔΔ": ⲆΔ++,
		"ⵠΔΔⲆᐃΔᐃ": ⲆΔ++,
		"ΔⵠᐃⲆΔⵠᐃ": ⲆΔ++,
		"ᐃΔⲆᐃⵠΔⲆ": ⲆΔ++,
		"ᐃΔᐃᐃⲆⲆⵠ": ⲆΔ++,
		"Δⵠⵠⵠᐃⵠᐃ": ⲆΔ++,
		"ⵠΔᐃΔΔΔΔ": ⲆΔ++,
		"ⵠⲆΔΔᐃΔⲆ": ⲆΔ++,
		"ⵠᐃᐃⲆΔⵠⵠ": ⲆΔ++,
		"ⵠⵠΔⵠⵠᐃⵠ": ⲆΔ++,
		"ⵠΔⵠⵠᐃᐃΔ": ⲆΔ++
	};
	const ⵠΔⲆⲆΔ = ΔⵠΔᐃΔ;
	const ᐃᐃΔⵠ = ᐃᐃⲆⵠ;
	const ⲆⵠΔΔⲆ = ⲆᐃⵠⲆⵠ;
	const ᐃᐃᐃᐃΔ = ΔⲆΔⲆ;
	var ⲆΔ = ⵠᐃⵠ;
	var ᐃⵠⵠ = {
		"ΔⲆⲆΔᐃ": ⲆΔ++,
		"ᐃⲆⵠⲆᐃ": ⲆΔ++,
		"ΔⵠⲆⲆⵠ": ⲆΔ++,
		"ΔⵠΔⲆⵠ": ⲆΔ++,
		"ᐃᐃΔᐃⵠ": ⲆΔ++,
		"ⵠⲆⲆⲆΔ": ⲆΔ++,
		"ⵠᐃⲆᐃᐃ": ⲆΔ++,
		"ⵠᐃⵠΔⲆ": ⲆΔ++,
		"ΔΔᐃᐃᐃ": ⲆΔ++,
		"ᐃⲆΔⵠᐃ": ⲆΔ++,
		"ΔᐃΔⵠⲆ": ⲆΔ++,
		"ᐃⵠⵠΔᐃ": ⲆΔ++,
		"ᐃⲆᐃⵠⵠ": ⲆΔ++,
		"ⵠᐃᐃᐃⵠ": ⲆΔ++,
		"ᐃᐃⵠᐃΔ": ⲆΔ++,
		"ΔΔᐃⲆΔ": ⲆΔ++,
		"ᐃⵠⵠⵠⵠ": ⲆΔ++,
		"ⵠⵠⲆⲆΔ": ⲆΔ++,
		"ⵠᐃᐃΔⵠ": ⲆΔ++,
		"ⲆΔⵠᐃⲆ": ⲆΔ++,
		"ᐃⲆⲆⲆⵠ": ⲆΔ++,
		"ᐃᐃⲆⵠⲆ": ⲆΔ++,
		"ⵠΔⵠᐃᐃ": ⲆΔ++,
		"ⲆⲆⲆᐃΔ": ⲆΔ++,
		"ⵠΔⲆΔᐃ": ⲆΔ++,
		"ᐃⵠᐃⵠᐃ": ⲆΔ++,
		"ΔⲆⵠᐃᐃ": ⲆΔ++,
		"ⵠⲆᐃⲆᐃ": ⲆΔ++,
		"ⵠᐃⲆᐃΔ": ⲆΔ++,
		"ⲆΔᐃⲆⲆ": ⲆΔ++,
		"ᐃᐃⵠᐃⲆ": ⲆΔ++,
		"ᐃΔΔᐃⵠ": ⲆΔ++,
		"ΔᐃΔⲆⲆ": ⲆΔ++,
		"ⵠᐃⲆΔᐃ": ⲆΔ++,
		"ⲆΔᐃⲆΔ": ⲆΔ++,
		"ⲆⲆᐃΔΔ": ⲆΔ++,
		"ᐃΔⵠⵠⵠ": ⲆΔ++,
		"ⲆⲆΔⲆᐃ": ⲆΔ++,
		"ⵠⲆⲆΔⲆ": ⲆΔ++,
		"ΔΔᐃᐃⲆ": ⲆΔ++,
		"ⲆᐃⵠΔΔ": ⲆΔ++,
		"ⲆΔⵠⲆⵠ": ⲆΔ++,
		"ᐃᐃⲆΔᐃ": ⲆΔ++,
		"ΔⵠᐃᐃⲆ": ⲆΔ++,
		"ⲆᐃⲆⵠΔ": ⲆΔ++,
		"ⲆΔⵠⲆᐃ": ⲆΔ++,
		"ⲆᐃⲆΔⵠ": ⲆΔ++,
		"ΔⵠⲆⲆⲆ": ⲆΔ++,
		"ΔᐃᐃΔⲆ": ⲆΔ++,
		"ⵠⵠΔΔⲆ": ⲆΔ++,
		"ΔᐃΔΔⵠ": ⲆΔ++,
		"ⲆᐃΔΔⲆ": ⲆΔ++,
		"ΔᐃⵠⲆΔ": ⲆΔ++,
		"ᐃⵠᐃⵠΔ": ⲆΔ++,
		"ⲆⲆⵠᐃⲆ": ⲆΔ++,
		"ⵠⵠΔⲆΔ": ⲆΔ++,
		"ᐃⵠⵠᐃΔ": ⲆΔ++,
		"ⵠⲆⵠᐃΔ": ⲆΔ++,
		"ΔΔⵠΔᐃ": ⲆΔ++,
		"ᐃᐃⵠᐃᐃ": ⲆΔ++,
		"ΔΔⵠᐃΔ": ⲆΔ++,
		"ⵠⲆΔⲆΔ": ⲆΔ++,
		"ⲆᐃⵠΔⲆ": ⲆΔ++,
		"ⲆᐃΔⲆⲆ": ⲆΔ++,
		"ΔᐃᐃⲆⲆ": ⲆΔ++,
		"ⲆΔΔᐃᐃ": ⲆΔ++,
		"ᐃᐃΔΔⲆ": ⲆΔ++,
		"ᐃⵠΔⵠΔ": ⲆΔ++,
		"ΔᐃⵠΔᐃ": ⲆΔ++,
		"ΔⲆⲆᐃⲆ": ⲆΔ++,
		"ᐃⲆΔΔᐃ": ⲆΔ++,
		"ΔⲆⲆⲆΔ": ⲆΔ++,
		"ⲆⲆΔᐃΔ": ⲆΔ++,
		"ⵠΔΔᐃⵠ": ⲆΔ++,
		"ᐃⵠⲆⵠⵠ": ⲆΔ++,
		"ⲆΔⵠΔⲆ": ⲆΔ++,
		"ⵠᐃⵠⵠᐃ": ⲆΔ++,
		"Ⲇᐃⵠᐃᐃ": ⲆΔ++,
		"ΔⲆᐃⲆΔ": ⲆΔ++,
		"ᐃⵠⵠΔⵠ": ⲆΔ++,
		"ΔᐃᐃⲆᐃ": ⲆΔ++,
		"ⵠᐃᐃΔΔ": ⲆΔ++,
		"ᐃⲆⲆⲆⲆ": ⲆΔ++,
		"ⵠΔᐃΔΔ": ⲆΔ++,
		"ᐃΔⲆΔⲆ": ⲆΔ++,
		"ⵠΔⵠⲆⵠ": ⲆΔ++,
		"ⲆⵠⵠΔⲆ": ⲆΔ++,
		"ⲆΔᐃᐃᐃ": ⲆΔ++,
		"ⵠΔⵠΔᐃ": ⲆΔ++,
		"ᐃᐃΔᐃΔ": ⲆΔ++,
		"ⵠⵠᐃᐃⵠ": ⲆΔ++,
		"ⲆᐃᐃᐃⲆ": ⲆΔ++,
		"ᐃⵠⵠⵠΔ": ⲆΔ++,
		"ⲆⲆᐃΔᐃ": ⲆΔ++,
		"ⲆⲆⵠⲆΔ": ⲆΔ++,
		"ⵠΔᐃΔⵠ": ⲆΔ++,
		"ΔᐃΔᐃⲆ": ⲆΔ++,
		"ⵠᐃⵠⵠⲆ": ⲆΔ++,
		"ᐃⵠΔⵠⲆ": ⲆΔ++,
		"ⲆΔⲆᐃⲆ": ⲆΔ++,
		"ⲆⵠⲆΔ": ⲆΔ++,
		"ⵠⲆᐃΔᐃ": ⲆΔ++,
		"ΔᐃⵠⵠΔ": ⲆΔ++,
		"ⲆΔᐃⵠⵠ": ⲆΔ++,
		"ᐃⵠᐃΔΔ": ⲆΔ++,
		"ᐃᐃⲆⲆΔ": ⲆΔ++,
		"ΔⲆᐃⲆᐃ": ⲆΔ++,
		"ΔⲆΔⲆⵠ": ⲆΔ++,
		"ᐃⲆΔⵠⲆ": ⲆΔ++,
		"ΔΔΔⵠᐃ": ⲆΔ++,
		"ⵠᐃⲆⲆⲆ": ⲆΔ++,
		"ⵠⲆΔᐃⵠ": ⲆΔ++,
		"ⵠΔΔⵠΔΔᐃ": ⲆΔ++,
		"ⵠᐃⲆⵠᐃⵠⲆ": ⲆΔ++,
		"ⲆⲆΔⵠᐃ": ⲆΔ++,
		"ΔⵠᐃΔΔ": ⲆΔ++,
		"ᐃⲆⲆⵠᐃ": ⲆΔ++,
		"Ⲇᐃⵠⵠᐃ": ⲆΔ++,
		"ᐃΔᐃⵠᐃ": ⲆΔ++,
		"Δⵠⵠⵠᐃ": ⲆΔ++,
		"ⲆᐃᐃΔⵠ": ⲆΔ++,
		"ᐃⲆᐃΔⵠ": ⲆΔ++,
		"ᐃΔⲆⲆⲆ": ⲆΔ++,
		"ⲆΔΔΔᐃ": ⲆΔ++,
		"ᐃⵠⲆⲆⵠ": ⲆΔ++,
		"ᐃⲆΔΔⵠ": ⲆΔ++,
		"ᐃᐃᐃΔⵠ": ⲆΔ++,
		"ⲆᐃᐃⲆⲆ": ⲆΔ++,
		"ᐃΔⲆⲆΔ": ⲆΔ++,
		"ᐃᐃᐃⲆΔ": ⲆΔ++,
		"ⵠᐃᐃⲆᐃ": ⲆΔ++,
		"ⵠᐃⲆⵠⵠ": ⲆΔ++,
		"ⲆΔᐃⲆⵠ": ⲆΔ++,
		"ΔⵠⵠⲆⲆ": ⲆΔ++,
		"ᐃⲆᐃΔⲆ": ⲆΔ++,
		"ⵠⵠΔᐃΔ": ⲆΔ++,
		"ΔⵠΔΔⵠ": ⲆΔ++,
		"ⵠΔᐃⵠᐃ": ⲆΔ++,
		"ΔⵠⲆⵠΔ": ⲆΔ++,
		"ᐃΔᐃΔⵠ": ⲆΔ++,
		"ΔⲆᐃᐃⲆ": ⲆΔ++,
		"Δᐃᐃⵠⵠ": ⲆΔ++,
		"ⵠⲆⵠⲆΔ": ⲆΔ++,
		"ᐃⲆⵠᐃΔ": ⲆΔ++,
		"ᐃⲆⵠⲆⵠ": ⲆΔ++,
		"ⲆⵠⵠⵠΔ": ⲆΔ++,
		"ⵠΔΔᐃΔ": ⲆΔ++,
		"ⲆΔⲆⲆᐃ": ⲆΔ++,
		"ⵠΔΔΔΔ": ⲆΔ++,
		"ⲆᐃⵠΔᐃ": ⲆΔ++,
		"ᐃⲆⲆᐃᐃ": ⲆΔ++,
		"ⵠⲆᐃΔΔ": ⲆΔ++,
		"ⲆΔⲆⵠⵠ": ⲆΔ++,
		"ⵠᐃΔⵠᐃ": ⲆΔ++,
		"ⵠΔᐃΔⲆ": ⲆΔ++,
		"ⲆᐃΔⵠⵠ": ⲆΔ++,
		"ᐃⲆᐃΔΔ": ⲆΔ++,
		"ΔᐃᐃⲆⵠ": ⲆΔ++,
		"ᐃⲆⲆΔⲆ": ⲆΔ++,
		"ⲆΔⵠⵠᐃ": ⲆΔ++,
		"ⵠᐃᐃᐃΔ": ⲆΔ++,
		"ΔΔⵠΔΔ": ⲆΔ++,
		"ΔΔΔΔⲆ": ⲆΔ++,
		"ᐃᐃⵠⲆΔ": ⲆΔ++,
		"ⵠⲆⲆⲆⵠ": ⲆΔ++,
		"ΔⲆⵠⵠⲆ": ⲆΔ++,
		"ⲆⵠⲆΔⵠ": ⲆΔ++,
		"ᐃΔΔⲆⵠ": ⲆΔ++,
		"ⲆᐃⵠΔⵠ": ⲆΔ++,
		"ΔᐃΔΔⲆ": ⲆΔ++,
		"ⵠΔΔΔⲆ": ⲆΔ++,
		"ΔⲆΔΔΔ": ⲆΔ++,
		"ᐃΔⵠᐃΔ": ⲆΔ++,
		"ᐃⲆΔΔΔ": ⲆΔ++,
		"ΔᐃⲆⵠⵠ": ⲆΔ++,
		"ΔⵠΔⵠΔ": ⲆΔ++,
		"ᐃΔᐃΔᐃ": ⲆΔ++
	};
	const ⵠⵠΔΔ = ⵠⵠᐃ;
	var ⲆΔ = 0;
	const ⵠⵠΔΔᐃ = ⲆⵠⲆⵠᐃ;
	const ᐃΔᐃᐃΔⲆᐃ = ⵠᐃⵠΔΔ;
	var ΔⲆ = {
		"ⲆⲆᐃΔΔ": ⲆΔ++,
		"ⵠⲆⲆⲆΔ": ⲆΔ++,
		"ΔⵠΔⲆΔ": ⲆΔ++,
		"ⵠᐃⲆᐃᐃ": ⲆΔ++,
		"ⵠᐃⵠΔⲆ": ⲆΔ++,
		"ᐃΔⵠⵠⵠ": ⲆΔ++,
		"ⲆⲆΔⲆᐃ": ⲆΔ++,
		"ΔΔⲆⵠᐃ": ⲆΔ++,
		"ᐃᐃΔᐃⵠ": ⲆΔ++,
		"ⲆⵠⲆΔΔ": ⲆΔ++,
		"ⵠΔᐃΔΔ": ⲆΔ++,
		"ᐃΔⲆΔⲆ": ⲆΔ++,
		"ᐃⵠᐃⵠᐃ": ⲆΔ++,
		"ΔⲆⵠᐃᐃ": ⲆΔ++,
		"ⵠⲆᐃⲆᐃ": ⲆΔ++,
		"ⵠᐃⲆᐃΔ": ⲆΔ++,
		"ᐃΔΔᐃⵠ": ⲆΔ++,
		"ΔᐃΔⲆⲆ": ⲆΔ++,
		"ⵠᐃⲆΔᐃ": ⲆΔ++,
		"ΔΔᐃᐃⲆ": ⲆΔ++,
		"ⵠΔᐃΔⵠ": ⲆΔ++,
		"ΔᐃΔᐃⲆ": ⲆΔ++,
		"ⵠᐃⵠⵠⲆ": ⲆΔ++,
		"ΔᐃᐃⲆᐃ": ⲆΔ++,
		"ⵠᐃᐃΔΔ": ⲆΔ++,
		"ⵠΔⵠΔᐃ": ⲆΔ++,
		"ᐃᐃΔᐃΔ": ⲆΔ++,
		"ⵠⵠᐃᐃⵠ": ⲆΔ++,
		"ⵠΔⲆΔᐃ": ⲆΔ++,
		"ⲆⵠⲆΔ": ⲆΔ++,
		"ⵠⲆⲆΔⲆ": ⲆΔ++,
		"ΔΔᐃᐃᐃ": ⲆΔ++,
		"ᐃⲆΔⵠᐃ": ⲆΔ++,
		"ⲆΔᐃⲆⲆ": ⲆΔ++,
		"ᐃᐃⵠᐃⲆ": ⲆΔ++,
		"ΔᐃΔⵠⲆ": ⲆΔ++,
		"ᐃⵠⵠΔᐃ": ⲆΔ++,
		"ᐃⲆᐃⵠⵠ": ⲆΔ++,
		"ⵠᐃᐃᐃⵠ": ⲆΔ++,
		"ᐃᐃⵠᐃΔ": ⲆΔ++,
		"ⵠΔⵠⲆⵠ": ⲆΔ++,
		"ⵠᐃⵠᐃⲆ": ⲆΔ++,
		"ᐃⵠⵠⲆⲆ": ⲆΔ++,
		"ⲆᐃᐃᐃⲆ": ⲆΔ++,
		"ᐃⵠⵠⵠΔ": ⲆΔ++,
		"ΔΔᐃⲆΔ": ⲆΔ++,
		"ᐃⵠⵠⵠⵠ": ⲆΔ++,
		"ⲆⲆⵠⲆΔ": ⲆΔ++,
		"ⲆⲆᐃΔᐃ": ⲆΔ++,
		"ᐃᐃⲆⵠⲆ": ⲆΔ++,
		"ⵠⵠⲆⲆΔ": ⲆΔ++,
		"ⵠᐃᐃΔⵠ": ⲆΔ++,
		"ⲆΔⵠᐃⲆ": ⲆΔ++,
		"ⵠΔⵠᐃᐃ": ⲆΔ++,
		"ⲆⲆⲆᐃΔ": ⲆΔ++,
		"ᐃΔⲆⲆⲆ": ⲆΔ++,
		"ⲆΔΔΔᐃ": ⲆΔ++,
		"ⲆΔᐃⲆΔ": ⲆΔ++,
		"ⲆΔᐃᐃᐃ": ⲆΔ++,
		"ᐃᐃᐃΔⵠ": ⲆΔ++,
		"ⲆᐃᐃⲆⲆ": ⲆΔ++,
		"ᐃΔⲆⲆΔ": ⲆΔ++,
		"ᐃᐃᐃⲆΔ": ⲆΔ++,
		"ⵠᐃᐃⲆᐃ": ⲆΔ++,
		"ⵠᐃⲆⵠⵠ": ⲆΔ++,
		"ΔⵠⵠⲆⲆ": ⲆΔ++,
		"ⵠⵠΔᐃΔ": ⲆΔ++,
		"ⵠΔᐃⵠᐃ": ⲆΔ++,
		"ᐃΔᐃΔⵠ": ⲆΔ++,
		"Δᐃᐃⵠⵠ": ⲆΔ++,
		"ᐃⲆⵠᐃΔ": ⲆΔ++,
		"ⲆⵠⵠⵠΔ": ⲆΔ++,
		"ⵠΔΔᐃΔ": ⲆΔ++,
		"ⲆΔⲆⲆᐃ": ⲆΔ++,
		"ⵠΔΔΔΔ": ⲆΔ++,
		"ⲆᐃⵠΔᐃ": ⲆΔ++,
		"ᐃⲆⲆᐃᐃ": ⲆΔ++,
		"ⵠⲆᐃΔΔ": ⲆΔ++,
		"ⲆΔⲆⵠⵠ": ⲆΔ++,
		"ⵠᐃΔⵠᐃ": ⲆΔ++,
		"ᐃⵠΔⵠⲆ": ⲆΔ++,
		"ⲆΔⲆᐃⲆ": ⲆΔ++,
		"ᐃⲆⲆⲆⲆ": ⲆΔ++,
		"ⵠΔᐃΔⲆ": ⲆΔ++,
		"ⲆᐃΔⵠⵠ": ⲆΔ++,
		"ᐃⲆᐃΔΔ": ⲆΔ++,
		"ΔᐃᐃⲆⵠ": ⲆΔ++,
		"ⵠΔⵠⵠᐃ": ⲆΔ++,
		"ⲆⵠⵠΔⲆ": ⲆΔ++,
		"ΔⲆⵠⵠⲆ": ⲆΔ++,
		"ᐃⲆΔΔΔ": ⲆΔ++,
		"ᐃΔᐃΔᐃ": ⲆΔ++,
		"ΔᐃⲆⵠⵠ": ⲆΔ++,
		"ΔⵠΔⵠΔ": ⲆΔ++,
		"ᐃΔΔⲆⵠ": ⲆΔ++,
		"ⲆᐃⵠΔⵠ": ⲆΔ++,
		"ΔᐃΔΔⲆ": ⲆΔ++,
		"ⵠΔΔΔⲆ": ⲆΔ++,
		"ΔⲆΔΔΔ": ⲆΔ++,
		"ᐃΔⵠᐃΔ": ⲆΔ++,
		"ⲆΔⲆⵠΔ": ⲆΔ++,
		"ⲆΔᐃⲆⵠ": ⲆΔ++,
		"ᐃⲆᐃΔⲆ": ⲆΔ++,
		"ΔⵠΔΔⵠ": ⲆΔ++,
		"ΔⵠⲆⵠΔ": ⲆΔ++,
		"ΔⲆᐃᐃⲆ": ⲆΔ++,
		"ⵠⲆⵠⲆΔ": ⲆΔ++,
		"ᐃⲆⵠⲆⵠ": ⲆΔ++,
		"ⵠΔⵠΔ": ⲆΔ++,
		"ᐃᐃᐃⲆ": ⲆΔ++,
		"ⲆⵠᐃΔᐃ": ⲆΔ++,
		"ⵠᐃΔⲆ": ⲆΔ++,
		"ⲆΔⵠᐃ": ⲆΔ++,
		"ΔⲆⲆΔᐃ": ⲆΔ++,
		"ΔⵠΔⲆⵠ": ⲆΔ++,
		"ⲆᐃⵠΔΔ": ⲆΔ++,
		"ΔⲆⲆⵠΔ": ⲆΔ++,
		"ⵠⵠΔΔⲆ": ⲆΔ++,
		"ᐃⲆⵠⲆᐃ": ⲆΔ++,
		"ΔⵠⲆⲆⵠ": ⲆΔ++,
		"ⵠⲆᐃΔᐃ": ⲆΔ++,
		"ⲆⵠΔⲆ": ⲆΔ++,
		"ᐃᐃⵠᐃᐃ": ⲆΔ++,
		"ΔⲆⲆⲆΔ": ⲆΔ++,
		"ⲆΔΔᐃᐃ": ⲆΔ++,
		"ΔⲆᐃⲆᐃ": ⲆΔ++,
		"ᐃⲆᐃⵠⲆ": ⲆΔ++,
		"ⵠⲆΔᐃⵠ": ⲆΔ++,
		"ⵠᐃⲆⲆⲆ": ⲆΔ++,
		"ᐃⵠⵠΔΔ": ⲆΔ++,
		"ᐃⲆⲆⲆⵠ": ⲆΔ++,
		"ⲆⵠⲆᐃᐃ": ⲆΔ++,
		"ⲆΔⵠⲆⵠ": ⲆΔ++,
		"ΔᐃⵠⲆΔ": ⲆΔ++,
		"ΔⵠⲆΔΔ": ⲆΔ++,
		"ⲆⲆΔⵠᐃ": ⲆΔ++,
		"ᐃⵠᐃⵠΔ": ⲆΔ++,
		"ᐃᐃᐃᐃᐃ": ⲆΔ++,
		"ΔᐃΔΔⵠ": ⲆΔ++,
		"ⵠⵠⵠᐃΔ": ⲆΔ++,
		"ⲆⵠᐃᐃΔ": ⲆΔ++,
		"ΔΔΔⵠᐃ": ⲆΔ++,
		"ᐃΔⲆⲆⵠ": ⲆΔ++,
		"ⲆᐃΔΔⲆ": ⲆΔ++,
		"ᐃⵠⲆⲆⵠ": ⲆΔ++,
		"ᐃⲆΔΔⵠ": ⲆΔ++,
		"ΔⲆΔⵠΔ": ⲆΔ++,
		"ΔᐃⵠⵠΔ": ⲆΔ++,
		"ⲆΔᐃⵠⵠ": ⲆΔ++,
		"ΔᐃⲆⵠᐃ": ⲆΔ++,
		"ᐃΔⲆⵠᐃ": ⲆΔ++,
		"ΔⵠᐃΔΔ": ⲆΔ++,
		"ᐃⲆⲆⵠᐃ": ⲆΔ++,
		"Ⲇᐃⵠⵠᐃ": ⲆΔ++,
		"ᐃΔᐃⵠᐃ": ⲆΔ++,
		"Δⵠⵠⵠᐃ": ⲆΔ++,
		"ⲆᐃᐃΔⵠ": ⲆΔ++,
		"ᐃⲆᐃΔⵠ": ⲆΔ++,
		"ᐃⵠᐃΔΔ": ⲆΔ++,
		"ᐃᐃⲆⲆΔ": ⲆΔ++,
		"ᐃⵠΔⵠΔ": ⲆΔ++,
		"ᐃᐃⵠⵠⲆ": ⲆΔ++,
		"ⵠⵠΔⲆΔ": ⲆΔ++,
		"ᐃⵠⵠᐃΔ": ⲆΔ++,
		"ⵠⲆⵠᐃΔ": ⲆΔ++,
		"ΔΔⵠΔᐃ": ⲆΔ++,
		"ⵠⲆΔⲆΔ": ⲆΔ++,
		"ᐃⵠⵠΔⵠ": ⲆΔ++,
		"ΔᐃⵠΔᐃ": ⲆΔ++,
		"ΔⲆⲆᐃⲆ": ⲆΔ++,
		"ᐃⲆΔΔᐃ": ⲆΔ++,
		"ⲆᐃⵠΔⲆ": ⲆΔ++,
		"ⲆᐃΔⲆⲆ": ⲆΔ++,
		"ΔᐃᐃⲆⲆ": ⲆΔ++,
		"ⵠΔⵠΔⲆ": ⲆΔ++,
		"ΔᐃᐃⲆΔ": ⲆΔ++,
		"ⲆⵠⲆᐃⲆ": ⲆΔ++,
		"ⵠⲆᐃΔⲆ": ⲆΔ++,
		"ⵠⵠⲆⵠᐃ": ⲆΔ++,
		"Δᐃᐃᐃᐃ": ⲆΔ++,
		"ᐃⲆⲆΔⲆ": ⲆΔ++,
		"ⲆΔⵠⵠᐃ": ⲆΔ++,
		"ⵠᐃᐃᐃΔ": ⲆΔ++,
		"ΔΔⵠΔΔ": ⲆΔ++,
		"ⵠⲆⵠⵠᐃ": ⲆΔ++,
		"ⲆΔΔᐃΔ": ⲆΔ++,
		"ΔΔⲆΔⲆ": ⲆΔ++,
		"ΔᐃᐃΔⵠ": ⲆΔ++,
		"ᐃᐃⲆΔᐃ": ⲆΔ++,
		"ΔⲆⲆᐃᐃ": ⲆΔ++,
		"ΔⲆΔⲆⵠ": ⲆΔ++,
		"ΔⵠᐃᐃⲆ": ⲆΔ++,
		"Ⲇᐃᐃⵠⵠ": ⲆΔ++,
		"ⲆᐃⲆⵠΔ": ⲆΔ++,
		"ᐃΔΔⵠᐃ": ⲆΔ++,
		"ⲆⲆⵠᐃⲆ": ⲆΔ++,
		"ΔΔⲆᐃⵠ": ⲆΔ++,
		"ⵠⵠⲆᐃᐃ": ⲆΔ++,
		"ΔΔΔΔⲆ": ⲆΔ++,
		"Ⲇⵠᐃⵠⵠ": ⲆΔ++,
		"ᐃΔⲆᐃΔ": ⲆΔ++,
		"ⲆⲆᐃⲆΔ": ⲆΔ++,
		"ᐃⲆⵠΔ": ⲆΔ++,
		"ᐃⲆⵠⲆⲆ": ⲆΔ++,
		"ⲆΔⵠⲆᐃ": ⲆΔ++,
		"ⲆⲆⲆⲆⲆ": ⲆΔ++,
		"ⲆᐃⲆΔⵠ": ⲆΔ++,
		"ᐃⲆⲆᐃⲆ": ⲆΔ++,
		"ΔⵠⲆⲆⲆ": ⲆΔ++,
		"ΔⲆⵠⵠΔ": ⲆΔ++,
		"ΔᐃᐃΔⲆ": ⲆΔ++,
		"ⵠⲆΔᐃⲆ": ⲆΔ++,
		"ⵠΔΔᐃⵠ": ⲆΔ++,
		"ᐃⵠⲆⵠⵠ": ⲆΔ++,
		"ⲆΔⵠΔⲆ": ⲆΔ++,
		"ⵠᐃⵠⵠᐃ": ⲆΔ++,
		"Ⲇᐃⵠᐃᐃ": ⲆΔ++,
		"ΔΔⵠᐃΔ": ⲆΔ++,
		"ᐃᐃΔΔⲆ": ⲆΔ++,
		"ⲆⲆΔᐃΔ": ⲆΔ++,
		"ΔⲆᐃⲆΔ": ⲆΔ++,
		"ᐃⲆΔⵠⲆ": ⲆΔ++,
		"ᐃⵠⵠⲆᐃ": ⲆΔ++,
		"ᐃᐃⵠⲆΔ": ⲆΔ++,
		"ⵠⲆⲆⲆⵠ": ⲆΔ++,
		"ⵠᐃΔⲆᐃ": ⲆΔ++,
		"ⲆⵠⵠⲆΔ": ⲆΔ++,
		"ΔⲆᐃᐃⵠ": ⲆΔ++,
		"ⵠⵠⲆΔΔ": ⲆΔ++,
		"ΔᐃⲆΔᐃ": ⲆΔ++,
		"ⲆⵠⲆΔⵠ": ⲆΔ++,
		"ΔⵠⵠΔⲆ": ⲆΔ++,
		"ⵠΔᐃᐃᐃ": ⲆΔ++,
		"ⲆⵠΔᐃⵠ": ⲆΔ++,
		"ⲆⲆΔⵠΔ": ⲆΔ++,
		"ⵠΔΔⵠⵠ": ⲆΔ++,
		"Δⵠⵠᐃⵠ": ⲆΔ++,
		"ⲆᐃⲆⲆᐃ": ⲆΔ++,
		"ⵠⲆΔᐃΔ": ⲆΔ++,
		"ⲆⲆⵠⵠⵠ": ⲆΔ++,
		"ⲆᐃⲆⲆⵠ": ⲆΔ++
	};
	var ⵠⵠᐃᐃ = {
		"ⵠΔⲆᐃᐃ": ⵠΔⲆᐃ,
		"ⲆΔⵠⲆΔ": 2,
		"ⲆⵠⵠΔ": 1,
		"ΔᐃⲆᐃᐃ": ⲆⲆᐃ,
		"ᐃΔΔᐃΔ": 4,
		"ᐃⵠⵠᐃᐃ": 3
	};
	var ⵠⵠⲆⵠ = [];
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃᐃⲆ] = {
		name: "Wood",
		"ⵠⵠ": ⵠ.ΔⲆⲆⵠⲆᐃΔ,
		"ⵠΔΔⵠ": ⵠⵠᐃ,
		"ΔⲆᐃⲆ": ⵠⵠⵠ
	};
	const ⲆⲆⵠⵠⲆᐃⲆⲆΔ = String.fromCharCode;
	const ⵠⲆᐃⵠⵠΔᐃΔⲆ = 101;
	const Ⲇⵠᐃᐃⵠⵠⵠ = 118;
	const ᐃᐃⲆⵠΔⲆᐃ = "ᐃⵠΔⲆᐃΔⲆ";
	const ⲆⲆᐃⵠⲆΔᐃⲆⲆ = 97;
	const ΔⲆᐃᐃᐃᐃⵠ = 108;
	const ⲆⵠⵠⲆΔⲆⵠ = ⲆⲆⵠⵠⲆᐃⲆⲆΔ(ⵠⲆᐃⵠⵠΔᐃΔⲆ);
	const ΔⲆⲆᐃⲆⵠᐃ = ⲆⲆⵠⵠⲆᐃⲆⲆΔ(Ⲇⵠᐃᐃⵠⵠⵠ);

	function ᐃⵠΔⲆᐃΔⲆ() {
		ⲆⲆΔΔⲆΔᐃ = ᐃⵠΔⲆᐃΔⲆ;
		return ᐃⵠΔⲆᐃΔⲆ
	}
	const ⲆⵠᐃΔⵠᐃⲆ = ⲆⲆⵠⵠⲆᐃⲆⲆΔ(ⲆⲆᐃⵠⲆΔᐃⲆⲆ);
	const ⵠᐃⲆᐃⲆⵠᐃ = ⲆⲆⵠⵠⲆᐃⲆⲆΔ(ΔⲆᐃᐃᐃᐃⵠ);
	const ΔᐃᐃᐃⲆΔⲆ = ⲆⵠⵠⲆΔⲆⵠ + ΔⲆⲆᐃⲆⵠᐃ + ⲆⵠᐃΔⵠᐃⲆ + ⵠᐃⲆᐃⲆⵠᐃ;
	const ᐃⵠᐃⲆᐃΔⲆ = ⲆⵠᐃΔᐃⵠⲆ[ΔᐃᐃᐃⲆΔⲆ];
	const ᐃⲆΔⵠΔᐃⲆΔᐃ = ᐃⵠᐃⲆᐃΔⲆ(ᐃⵠΔⲆᐃΔⲆ + "try{" + ᐃᐃⲆⵠΔⲆᐃ + "();0;}catch(ⲆⵠᐃΔⵠᐃⲆ){1;}");
	if (ᐃⲆΔⵠΔᐃⲆΔᐃ) {
		const ⲆⲆⵠⵠⲆᐃⲆⲆΔ = Math.floor;
		let ⲆⲆᐃⵠⲆΔᐃⲆⲆ = 0;
		const ⵠⲆᐃⵠⵠΔᐃΔⲆ = function(ⵠⲆᐃⵠⵠΔᐃΔⲆ) {
			for (let Ⲇⵠᐃᐃⵠⵠⵠ = 0; Ⲇⵠᐃᐃⵠⵠⵠ < 5384; Ⲇⵠᐃᐃⵠⵠⵠ++) ⲆⲆᐃⵠⲆΔᐃⲆⲆ += Ⲇⵠᐃᐃⵠⵠⵠ;
			return ⲆⲆⵠⵠⲆᐃⲆⲆΔ(ⵠⲆᐃⵠⵠΔᐃΔⲆ)
		};
		Math.floor = ⵠⲆᐃⵠⵠΔᐃΔⲆ
	}
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔⵠΔ] = {
		name: "Stone",
		"ⵠⵠ": ⵠ.ᐃⲆΔᐃΔᐃⲆ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": Ⲇⵠᐃ
	};
	const ΔΔᐃᐃⲆΔⲆ = ⲆᐃⵠⲆⵠ;
	const ΔⲆⲆⵠⲆΔΔ = ⵠᐃⵠᐃⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃΔⲆ] = {
		name: "Gold",
		"ⵠⵠ": ⵠ.ⵠⵠΔⲆΔⵠᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔⵠᐃ] = {
		name: "Diamond",
		"ⵠⵠ": ⵠ.ΔᐃΔⲆᐃⲆⲆ,
		"ⵠΔΔⵠ": ᐃⲆΔ,
		"ΔⲆᐃⲆ": 0
	};
	const ⵠⵠᐃⵠΔ = ⵠᐃⲆᐃⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⵠΔⲆ] = {
		name: "Amethyst",
		"ⵠⵠ": ⵠ.ⵠΔⵠᐃⲆⲆᐃ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": ⵠⵠᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔⵠΔⲆΔ] = {
		name: "Rabbit fur",
		"ⵠⵠ": ⵠ.ⵠⵠⵠⲆⵠⵠⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔⵠΔⲆ] = {
		name: "Wolf fur",
		"ⵠⵠ": ⵠ.ᐃⲆΔᐃⲆⲆΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⵠⵠⵠ
	};
	const ⵠⵠᐃⵠⵠⵠᐃ = ⵠⵠᐃⵠᐃⵠⲆ;
	const ⵠⲆⲆΔᐃΔᐃ = ΔⲆΔᐃΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃⲆⲆᐃ] = {
		name: "Boar fur",
		"ⵠⵠ": ⵠ.ⲆⲆᐃΔΔΔᐃ,
		"ⵠΔΔⵠ": ⵠᐃΔ,
		"ΔⲆᐃⲆ": ⵠᐃⵠ
	};
	const ⵠⵠᐃΔᐃ = ⲆⲆⲆⵠⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔⲆⵠΔ] = {
		name: "Firefly",
		"ⵠⵠ": ⵠ.ΔΔΔⲆΔⵠΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	const ΔΔⵠⵠⲆ = ΔⲆⲆᐃᐃᐃΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔᐃⲆⵠ] = {
		name: "Wood arrow",
		"ⵠⵠ": ⵠ.ⲆΔΔⵠᐃⵠᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⵠᐃᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆᐃΔⲆ] = {
		name: "Stone arrow",
		"ⵠⵠ": ⵠ.ᐃⲆⵠⲆⵠΔᐃ,
		"ⵠΔΔⵠ": Δⵠⵠ,
		"ΔⲆᐃⲆ": ⲆⲆⵠ
	};
	const ᐃⵠᐃΔⵠᐃᐃⲆΔ = ⵠⵠᐃⵠⵠⵠᐃ;
	const ᐃⵠΔⲆΔΔⵠ = ⲆⵠᐃΔΔ;
	const ⵠⵠᐃᐃΔⲆⲆΔⲆ = ᐃⵠΔⵠᐃᐃⵠ;
	const ΔᐃΔΔᐃ = ᐃⲆⵠᐃⵠ;
	const ⲆΔᐃΔⵠ = ⲆⲆⵠΔΔ;
	const ⵠᐃⵠⵠᐃᐃΔ = ΔΔΔⲆⵠᐃⲆ;
	const ⲆⲆⲆᐃ = Δⵠᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⵠΔΔⵠ] = {
		name: "Gold arrow",
		"ⵠⵠ": ⵠ.ᐃᐃⲆⲆᐃΔᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ⲆⲆΔΔᐃ = ᐃΔᐃᐃΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⵠⲆⵠΔ] = {
		name: "Diamond arrow",
		"ⵠⵠ": ⵠ.ᐃᐃᐃⵠᐃᐃᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆᐃᐃⲆ] = {
		name: "Amethyst arrow",
		"ⵠⵠ": ⵠ.ⵠⵠⲆΔΔᐃⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ΔΔⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆⵠⲆΔ] = {
		name: "Reidite arrow",
		"ⵠⵠ": ⵠ.ᐃⲆⲆⵠᐃΔΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ᐃⲆⲆ
	};
	const ⵠᐃⵠᐃΔ = ⲆⵠⲆᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆⵠⲆⵠ] = {
		name: "Dragon arrow",
		"ⵠⵠ": ⵠ.ⲆⵠⲆᐃⲆᐃⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	const ΔⵠⲆⵠᐃ = ΔΔⲆΔ;
	const ⵠΔ = String.fromCharCode;
	const ᐃΔ = 101;
	const ⲆⲆ = 118;
	const ΔᐃⵠⵠⵠⵠⲆ = "ᐃⲆⵠⵠ";
	const ⵠⲆ = 97;
	const ⲆᐃⲆ = 108;
	const ⲆᐃΔ = ⵠΔ(ᐃΔ);
	const ΔᐃΔ = ⵠΔ(ⲆⲆ);

	function ᐃⲆⵠⵠ() {
		ⲆⲆⵠᐃⵠ = ᐃⲆⵠⵠ;
		return ᐃⲆⵠⵠ
	}
	const ΔⲆⲆ = ⵠΔ(ⵠⲆ);
	const ⵠⵠⲆ = ⵠΔ(ⲆᐃⲆ);
	const ΔⲆΔⵠᐃⲆΔ = ⲆᐃΔ + ΔᐃΔ + ΔⲆⲆ + ⵠⵠⲆ;
	const ΔⲆΔΔ = ⲆⵠᐃΔᐃⵠⲆ[ΔⲆΔⵠᐃⲆΔ];
	const ⵠᐃᐃΔⲆΔⲆ = ΔⲆΔΔ(ᐃⲆⵠⵠ + "try{" + ΔᐃⵠⵠⵠⵠⲆ + "();0;}catch(ΔⲆⲆ){1;}");
	if (ⵠᐃᐃΔⲆΔⲆ) {
		const ⵠΔ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]];
		const ᐃΔ = ⵠΔ;
		const ⲆⲆ = function() {
			ⵠΔ(ⲆⲆ, 8349);
			ᐃΔ(ⲆⲆ, 1025)
		};
		ⲆⲆ()
	}
	const ⲆᐃⵠⲆᐃⲆⵠⵠⲆ = ⲆᐃⲆᐃΔΔΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆΔⵠΔ] = {
		name: "Winter fur",
		"ⵠⵠ": ⵠ.ⲆᐃᐃΔⵠⲆᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	const ᐃⲆΔᐃ = ⲆⲆᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃⲆⲆⵠ] = {
		name: "Fur mammoth",
		"ⵠⵠ": ⵠ.ΔᐃΔⵠᐃᐃᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	const ΔᐃᐃΔΔᐃⵠ = ⵠᐃΔⲆΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃⵠⵠⲆ] = {
		name: "Web",
		"ⵠⵠ": ⵠ.ⲆⲆⵠⵠᐃΔⵠ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": 0
	};
	const ⵠⵠⲆΔᐃΔᐃ = ⵠᐃⲆΔⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆⲆⵠΔ] = {
		name: "Meat",
		"ⵠⵠ": ⵠ.ⵠᐃⲆΔⲆᐃΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⵠⵠⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃᐃᐃᐃ] = {
		name: "Fish",
		"ⵠⵠ": ⵠ.ⵠⵠΔᐃᐃⵠⵠ,
		"ⵠΔΔⵠ": ᐃⲆΔᐃ,
		"ΔⲆᐃⲆ": ⲆⲆΔ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠⵠΔΔ] = {
		name: "Kraken skin",
		"ⵠⵠ": ⵠ.ⲆΔΔΔΔΔⲆ,
		"ⵠΔΔⵠ": Ⲇⵠᐃ,
		"ΔⲆᐃⲆ": 0
	};
	const ⵠⲆᐃⲆⵠⲆⲆ = ᐃΔᐃᐃᐃⲆΔ;
	const ⵠΔᐃⵠΔⵠΔ = ⲆᐃⲆᐃⵠΔᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⵠⵠᐃΔ] = {
		name: "Piranha scales",
		"ⵠⵠ": ⵠ.ΔⲆⵠᐃⵠᐃⵠ,
		"ⵠΔΔⵠ": ⵠⵠⵠ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔⲆⲆⵠ] = {
		name: "Ice",
		"ⵠⵠ": ⵠ.ᐃⵠᐃΔΔⵠΔ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": 0
	};
	const ⲆⲆᐃⵠ = ⲆⲆⵠ;
	const ⵠᐃᐃⵠ = ⲆⵠⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆᐃⵠⲆ] = {
		name: "Sand",
		"ⵠⵠ": ⵠ.ΔⲆᐃᐃᐃΔᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⵠᐃᐃΔ] = {
		name: "Dirt",
		"ⵠⵠ": ⵠ.ⵠᐃⲆᐃⵠⵠΔ,
		"ⵠΔΔⵠ": ⵠⵠᐃ,
		"ΔⲆᐃⲆ": ⲆⲆΔ
	};
	const ⵠΔΔΔ = ᐃⲆⵠᐃ;
	const ⲆⲆⲆⵠΔⵠⲆ = ⵠⲆⲆΔᐃΔᐃ;
	const Δᐃⵠⵠⵠⵠⵠ = 10273047;

	function ⲆⵠⲆⵠΔⲆΔⵠⲆ(ⲆⵠⵠⲆⵠ) {
		return ⲆⵠᐃΔᐃⵠⲆ.String.fromCharCode(ⲆⵠⵠⲆⵠ)
	}

	function ⲆⲆⲆⵠⲆⲆⲆ(ΔᐃΔⲆᐃΔᐃ) {
		return ΔᐃΔⲆᐃΔᐃ.map(ⲆⵠⲆⵠΔⲆΔⵠⲆ).join("")
	}
	const ⵠⵠⲆⵠᐃⲆᐃ = function() {
		const ⲆⲆᐃⲆΔⵠΔⲆΔ = ⲆⲆⲆⵠⲆⲆⲆ([916, 5123, 11616, 11616, 11616, 11616, 11616]);
		const ᐃⲆⲆⵠᐃΔⵠ = {
			"ⵠᐃΔᐃᐃᐃᐃ": 5727240,
			"ⲆΔⲆΔⲆⲆⲆⲆⲆ": 6739538,
			"Δᐃⵠⵠⵠⵠⵠ": 6438616,
			"ΔᐃΔᐃⵠΔⵠ": 9312970
		};
		if (ᐃⲆⲆⵠᐃΔⵠ[ⲆⲆᐃⲆΔⵠΔⲆΔ] !== ᐃⲆⲆⵠᐃΔⵠ.Δᐃⵠⵠⵠⵠⵠ) {
			const Δᐃⵠⵠⵠⵠⵠ = function() {
				for (let ⲆⵠⲆⵠΔⲆΔⵠⲆ = 0; ⲆⵠⲆⵠΔⲆΔⵠⲆ < 5; ⲆⵠⲆⵠΔⲆΔⵠⲆ++) ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("click", (function() {
					Δᐃⵠⵠⵠⵠⵠ()
				}))
			};
			Δᐃⵠⵠⵠⵠⵠ()
		}
	};
	ⵠⵠⲆⵠᐃⲆᐃ();
	const ᐃⵠⵠⵠ = ᐃⲆⲆ;
	const ⵠᐃᐃⲆΔᐃⵠΔΔ = ⵠⵠᐃⵠᐃⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⵠᐃΔᐃ] = {
		name: "Berrie",
		"ⵠⵠ": ⵠ.ⵠⵠⲆⵠⵠⵠᐃ,
		"ⵠΔΔⵠ": ⵠⵠΔΔ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⵠⲆᐃᐃ] = {
		name: "Flour",
		"ⵠⵠ": ⵠ.ⵠΔⲆⵠΔᐃᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⲆᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔⵠⲆΔΔ] = {
		name: "Flour",
		"ⵠⵠ": ⵠ.ΔᐃⵠᐃᐃⵠⲆ,
		"ⵠΔΔⵠ": Ⲇⵠᐃ,
		"ΔⲆᐃⲆ": 0
	};
	const ᐃⲆⲆΔᐃⵠΔ = ΔⵠⲆᐃⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⵠⲆⵠᐃ] = {
		name: "Special fur peasant",
		"ⵠⵠ": ⵠ.ⵠΔⵠᐃⵠⵠᐃ,
		"ⵠΔΔⵠ": ᐃⲆΔᐃ,
		"ΔⲆᐃⲆ": ᐃⲆᐃ
	};
	const ΔⲆᐃΔⵠⵠᐃⵠΔ = {};
	const ⵠᐃⲆᐃᐃⲆⲆⵠⲆ = {};
	ΔⲆᐃΔⵠⵠᐃⵠΔ["get"] = function(ⵠⵠᐃⵠⲆⲆⲆ, ΔΔⵠⵠᐃᐃⲆᐃΔ) {
		if (ΔΔⵠⵠᐃᐃⲆᐃΔ !== "ΔⲆᐃΔⵠⵠᐃⵠΔ") {
			const ΔⲆᐃΔⵠⵠᐃⵠΔ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]];
			const ⵠⵠᐃⵠⲆⲆⲆ = ΔⲆᐃΔⵠⵠᐃⵠΔ;
			const ΔΔⵠⵠᐃᐃⲆᐃΔ = function() {
				ΔⲆᐃΔⵠⵠᐃⵠΔ(ΔΔⵠⵠᐃᐃⲆᐃΔ, 4109);
				ⵠⵠᐃⵠⲆⲆⲆ(ΔΔⵠⵠᐃᐃⲆᐃΔ, 3018)
			};
			ΔΔⵠⵠᐃᐃⲆᐃΔ()
		}
		return ⲆⵠᐃΔᐃⵠⲆ["Reflect"]["get"](...arguments)
	};
	const ⵠⲆᐃⲆⵠⵠⵠᐃᐃ = new ⲆⵠᐃΔᐃⵠⲆ["Proxy"](ⵠᐃⲆᐃᐃⲆⲆⵠⲆ, ΔⲆᐃΔⵠⵠᐃⵠΔ);
	const ΔⲆΔⵠᐃᐃᐃ = ⵠⲆᐃⲆⵠⵠⵠᐃᐃ.ΔⲆᐃΔⵠⵠᐃⵠΔ;
	ⵠⵠⲆⵠ[ΔⲆ.Δᐃᐃᐃᐃ] = {
		name: "Special fur hood",
		"ⵠⵠ": ⵠ.ⵠᐃᐃⲆⲆⲆΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ᐃⲆᐃ
	};
	const ᐃᐃⲆΔΔ = ⲆᐃⲆⲆΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆⲆᐃᐃ] = {
		name: "Pumpkin",
		"ⵠⵠ": ⵠ.ΔᐃⵠⵠⵠⲆⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⵠⵠᐃ
	};
	const ᐃⵠⲆΔΔⲆⲆᐃΔ = ᐃⲆᐃⲆΔⲆᐃ;
	const ⲆⵠⲆᐃᐃⵠⲆ = ᐃⲆⵠⵠᐃ;
	const ⵠⵠⲆᐃⵠΔΔ = ΔᐃⲆΔⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.Ⲇᐃᐃⵠⵠ] = {
		name: "Garlic",
		"ⵠⵠ": ⵠ.ΔⲆΔⵠΔᐃⲆ,
		"ⵠΔΔⵠ": ⲆⲆᐃ,
		"ΔⲆᐃⲆ": ᐃⲆΔᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔΔⵠᐃ] = {
		name: "Thornbush",
		"ⵠⵠ": ⵠ.ΔΔⲆⲆᐃᐃΔ,
		"ⵠΔΔⵠ": ᐃⲆΔᐃ,
		"ΔⲆᐃⲆ": ⵠⵠⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⲆⲆⲆⲆ] = {
		name: "Carrot",
		"ⵠⵠ": ⵠ.ⵠⲆⲆⲆΔⵠΔ,
		"ⵠΔΔⵠ": ⵠᐃΔ,
		"ΔⲆᐃⲆ": 0
	};
	const ⲆⵠΔΔᐃᐃⲆ = ΔⲆᐃΔⵠᐃᐃ;
	const ⵠⲆⵠΔᐃᐃⵠ = ΔⲆᐃᐃᐃ;
	const ⲆⲆᐃⵠⵠ = ⲆⲆⲆⵠΔ;
	const ⲆⲆⵠⵠⲆ = ⲆᐃⲆⲆΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆⲆᐃⲆ] = {
		name: "Tomato",
		"ⵠⵠ": ⵠ.ΔⲆⲆⲆⲆΔΔ,
		"ⵠΔΔⵠ": ᐃⲆΔ,
		"ΔⲆᐃⲆ": ᐃⲆᐃ
	};
	const ᐃⵠⲆⵠᐃ = ⵠⲆⵠᐃⵠ;
	const ⵠⲆΔⲆⲆⵠⵠ = ⲆⵠⲆⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆⵠⵠΔ] = {
		name: "Watermelon",
		"ⵠⵠ": ⵠ.ΔΔᐃᐃⵠᐃΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": Δⵠⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆΔᐃⲆ] = {
		name: "Aloe Vera",
		"ⵠⵠ": ⵠ.ΔⲆⲆⲆⲆⲆΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠⵠⲆᐃ] = {
		name: "Penguin Feather",
		"ⵠⵠ": ⵠ.ⲆᐃΔⲆᐃ,
		"ⵠΔΔⵠ": ⵠⵠΔΔ,
		"ΔⲆᐃⲆ": 0
	};
	const ΔΔΔΔᐃΔΔ = ᐃⲆⲆΔⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⵠⵠΔⲆ] = {
		name: "Hawk Feather",
		"ⵠⵠ": ⵠ.ᐃⲆⵠⵠⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔᐃᐃᐃ] = {
		name: "Vulture Feather",
		"ⵠⵠ": ⵠ.ΔΔΔᐃⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⵠⵠᐃ
	};
	const ΔⵠΔΔΔⵠⲆⵠⵠ = ᐃⵠΔⵠᐃᐃⵠ;
	const ⲆᐃⵠⲆⵠΔᐃⲆΔ = ΔΔΔᐃⲆᐃⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⵠΔᐃⵠ] = {
		name: ᐃ[378],
		"ⵠⵠ": ⵠ.ᐃⵠⲆⵠⲆⵠⲆ,
		"ⵠΔΔⵠ": ᐃⲆΔ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.Δⵠⵠᐃⵠ] = {
		name: ᐃ[378],
		"ⵠⵠ": ⵠ.ⵠᐃΔΔΔⵠⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⲆᐃ
	};
	const ⲆⲆᐃᐃⵠ = ⵠΔⲆⲆΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔΔⵠⵠ] = {
		name: "Pitchfork Part",
		"ⵠⵠ": ⵠ.ⲆⲆΔΔⵠᐃᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	const ⲆΔⵠΔΔ = ⲆⲆᐃⲆⵠ;
	const ⵠⲆⵠᐃⵠⵠΔ = ⵠᐃⲆᐃⲆ;
	const ⵠᐃᐃᐃᐃΔⵠᐃⵠ = ⲆᐃΔΔⵠⵠⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆΔᐃΔ] = {
		name: ᐃ[484],
		"ⵠⵠ": ⵠ.ⲆⲆⲆΔⵠᐃⵠ,
		"ⵠΔΔⵠ": ⵠⵠΔΔ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⲆΔⵠΔ] = {
		name: "Emerald",
		"ⵠⵠ": ⵠ.ΔⵠᐃⲆⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": Ⲇⵠᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃⵠᐃⲆ] = {
		name: "Christmas Hat",
		"ⵠⵠ": ⵠ.ⲆⲆΔΔⲆΔⲆ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠⵠⲆⲆ] = {
		name: "Elf Hat",
		"ⵠⵠ": ⵠ.ⲆⵠⲆᐃⵠⲆΔ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⲆᐃⲆΔ] = {
		name: "Garland",
		"ⵠⵠ": ⵠ.ⵠⲆⲆΔᐃⲆΔ,
		"ΔⲆᐃⲆ": ⵠᐃⵠ,
		"ⵠΔΔⵠ": ᐃⲆΔ
	};
	const ΔΔᐃⵠΔ = ⵠΔᐃⲆ;
	const ΔⵠΔᐃⵠ = ⵠⲆⵠⲆⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔⲆᐃΔ] = {
		name: "Candy",
		"ⵠⵠ": ⵠ.ⲆᐃΔᐃᐃⲆΔ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.Ⲇⵠᐃⵠⵠ] = {
		name: "Sugar Cane",
		"ⵠⵠ": ⵠ.ΔⲆⵠⲆΔᐃΔ,
		"ΔⲆᐃⲆ": ⵠⵠⵠ
	};
	const ΔᐃⵠΔⲆ = ᐃᐃΔⵠⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⵠⲆΔΔ] = {
		name: "Pirate Sword",
		"ⵠⵠ": ⵠ.ⲆⵠᐃⵠⲆⲆⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ᐃⲆΔᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔΔⲆᐃⵠ] = {
		name: "Crab Stick",
		"ⵠⵠ": ⵠ.ΔΔᐃⲆᐃΔᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": Δⵠⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆⵠΔ] = {
		name: "Reidite",
		"ⵠⵠ": ⵠ.ᐃⲆΔⲆΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆⵠⲆⲆ] = {
		name: "Flame",
		"ⵠⵠ": ⵠ.ΔᐃⲆⵠᐃᐃᐃ,
		"ⵠΔΔⵠ": ᐃⲆΔ,
		"ΔⲆᐃⲆ": ᐃⲆᐃ
	};
	const ᐃΔᐃΔ = ⵠᐃᐃΔ;
	const ΔⲆⲆΔⵠ = ᐃΔⲆΔᐃ;
	const ΔΔⲆⵠⲆΔⲆ = ΔΔΔᐃᐃ;
	const ᐃΔⵠⲆⲆⲆⲆ = ⵠⵠᐃᐃⲆΔⵠ;
	const ⵠⵠⲆΔⵠ = ⵠⵠΔⵠᐃ;
	const ⲆΔⵠⵠⵠᐃᐃ = ΔΔᐃⲆⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆⲆΔᐃ] = {
		name: "Campfire",
		"ⵠⵠ": ⵠ.ⲆᐃⵠⵠⲆⵠᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⲆⲆᐃ
	};
	const ΔΔΔⵠᐃⵠⵠ = ⲆⵠΔΔᐃᐃⲆ;
	const ⲆΔⲆᐃᐃ = ⵠᐃⲆᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔΔΔΔⲆ] = {
		name: ᐃ[529],
		"ⵠⵠ": ⵠ.ΔⵠΔⵠΔᐃⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ⲆⵠⲆΔᐃ = ⲆⵠⲆᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⵠΔⲆⵠ] = {
		name: "Workbench",
		"ⵠⵠ": ⵠ.ΔᐃⵠⲆⲆⵠⲆ,
		"ⵠΔΔⵠ": ᐃⲆΔ,
		"ΔⲆᐃⲆ": ᐃⲆⲆ
	};
	const ΔΔⵠⵠΔⲆⵠ = ⲆⲆᐃΔⵠ;
	const ⲆⲆⵠΔⲆⲆⵠ = ⲆⵠᐃⲆⵠ;
	const ᐃᐃⲆⲆⲆ = ΔⲆⵠΔᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⲆᐃΔΔ] = {
		name: "Stone sword",
		"ⵠⵠ": ⵠ.ΔⲆᐃⵠⲆⲆΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆⲆⲆΔ] = {
		name: "Stone pick",
		"ⵠⵠ": ⵠ.ᐃᐃⲆⵠᐃⵠᐃ,
		"ⵠΔΔⵠ": Ⲇⵠᐃ,
		"ΔⲆᐃⲆ": 1
	};
	const ᐃᐃⵠⲆᐃᐃⲆ = ⲆΔᐃΔⵠ;
	const ⲆⵠⲆⲆⲆⲆᐃ = ΔᐃΔⵠᐃ;
	const ⵠⲆⲆΔΔ = ⵠΔⵠΔⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃⵠΔΔ] = {
		name: "Berries bush",
		"ⵠⵠ": ⵠ.ᐃⲆΔⵠᐃⲆΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃⲆᐃᐃ] = {
		name: "Gold pick",
		"ⵠⵠ": ⵠ.ⵠⵠΔᐃⲆᐃΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃⵠΔⲆ] = {
		name: "Diamond pick",
		"ⵠⵠ": ⵠ.ⵠΔⲆΔⵠΔᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔᐃⲆΔ] = {
		name: "Wood sword",
		"ⵠⵠ": ⵠ.ΔⵠⲆⵠⵠⵠⲆ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔⵠⵠⵠ] = {
		name: "Gold sword",
		"ⵠⵠ": ⵠ.ΔᐃΔⲆΔΔⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⵠⲆ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⲆΔⲆᐃ] = {
		name: "Diamond sword",
		"ⵠⵠ": ⵠ.ΔΔᐃᐃⵠⲆⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃΔᐃⵠ] = {
		name: "Wood pick",
		"ⵠⵠ": ⵠ.ᐃᐃᐃⲆⲆΔⵠ,
		"ⵠΔΔⵠ": ⲆⲆΔ,
		"ΔⲆᐃⲆ": Δⵠᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⵠΔⲆΔ] = {
		name: "Wood wall",
		"ⵠⵠ": ⵠ.ⵠⲆᐃⵠΔᐃⲆ,
		"ⵠΔΔⵠ": Δⵠⵠ,
		"ΔⲆᐃⲆ": 1
	};
	const ΔᐃΔᐃΔ = ⲆⲆⵠⵠᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠΔⵠΔ] = {
		name: "Wood spike",
		"ⵠⵠ": ⵠ.ΔⲆΔⲆⲆⲆΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ⲆⵠΔΔ = ⵠᐃᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⵠΔΔⲆ] = {
		name: "Cooked meat",
		"ⵠⵠ": ⵠ.ΔΔᐃᐃᐃⵠⵠ,
		"ⵠΔΔⵠ": Ⲇⵠᐃ,
		"ΔⲆᐃⲆ": 0
	};
	const ΔΔⵠΔᐃᐃᐃ = ⲆⲆΔⵠⲆ;
	const ⲆⵠᐃΔᐃᐃⵠ = ΔΔΔᐃᐃ;
	const ⵠΔⲆᐃⲆ = ΔᐃᐃΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆⵠⲆᐃ] = {
		name: "Big campfire",
		"ⵠⵠ": ⵠ.ⵠⲆᐃᐃⲆᐃΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ᐃⲆⲆⲆⵠⵠⲆ = ᐃⵠΔⵠᐃᐃⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⲆⵠᐃⲆ] = {
		name: "Bandage",
		"ⵠⵠ": ⵠ.ⲆⵠⲆΔⲆΔⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⵠΔΔ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠⵠᐃΔ] = {
		name: "Stone wall",
		"ⵠⵠ": ⵠ.ⲆᐃᐃΔⵠⵠⲆ,
		"ⵠΔΔⵠ": ᐃⲆΔᐃ,
		"ΔⲆᐃⲆ": 1
	};
	const ⵠⲆⲆᐃᐃ = ⵠᐃΔᐃⲆ;
	const Δᐃⵠᐃⵠᐃᐃ = ᐃⵠΔⲆⲆ;
	const ΔᐃᐃᐃⲆΔΔ = ⲆΔΔΔΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆⵠᐃΔ] = {
		name: "Gold wall",
		"ⵠⵠ": ⵠ.ⲆⲆⲆᐃᐃΔⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ᐃⵠⵠⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔΔⵠΔᐃ] = {
		name: "Diamond wall",
		"ⵠⵠ": ⵠ.ΔᐃⵠⲆⵠⲆΔ,
		"ⵠΔΔⵠ": ⵠᐃΔ,
		"ΔⲆᐃⲆ": 1
	};
	const Ⲇⵠᐃᐃ = ⲆΔⲆⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆΔⲆΔ] = {
		name: "Wood door",
		"ⵠⵠ": ⵠ.ᐃᐃⵠⵠᐃⲆΔ,
		"ⵠΔΔⵠ": ᐃⲆᐃ,
		"ΔⲆᐃⲆ": 1
	};
	const ΔΔⲆΔⵠⲆⲆ = ᐃᐃⲆᐃⵠ;
	const ⵠᐃⵠⲆᐃᐃΔ = ᐃᐃΔⵠⵠ;
	const ΔⵠⲆⵠΔΔⵠⲆΔ = String.fromCharCode;
	const ⲆⲆᐃⲆⲆⵠⲆ = 101;
	const ᐃⵠⲆⵠⲆΔΔΔⲆ = 118;
	const ᐃᐃⲆᐃⵠⵠΔⲆΔ = "ⵠᐃᐃᐃᐃⵠᐃⲆᐃ";
	const ⵠΔΔⲆᐃᐃΔᐃⲆ = 97;
	const ⲆⵠᐃⲆᐃⵠⲆ = 108;
	const ⲆᐃⵠΔⲆᐃⲆⵠΔ = ΔⵠⲆⵠΔΔⵠⲆΔ(ⲆⲆᐃⲆⲆⵠⲆ);
	const ⵠⵠΔΔΔᐃΔ = ΔⵠⲆⵠΔΔⵠⲆΔ(ᐃⵠⲆⵠⲆΔΔΔⲆ);

	function ⵠᐃᐃᐃᐃⵠᐃⲆᐃ() {
		ΔᐃⲆᐃⲆΔⲆ = ⵠᐃᐃᐃᐃⵠᐃⲆᐃ;
		return ⵠᐃᐃᐃᐃⵠᐃⲆᐃ
	}
	const ᐃΔⲆⵠᐃᐃᐃⵠΔ = ΔⵠⲆⵠΔΔⵠⲆΔ(ⵠΔΔⲆᐃᐃΔᐃⲆ);
	const ᐃⵠⲆΔᐃⵠΔⲆⵠ = ΔⵠⲆⵠΔΔⵠⲆΔ(ⲆⵠᐃⲆᐃⵠⲆ);
	const ᐃⲆᐃᐃΔⵠΔ = ⲆᐃⵠΔⲆᐃⲆⵠΔ + ⵠⵠΔΔΔᐃΔ + ᐃΔⲆⵠᐃᐃᐃⵠΔ + ᐃⵠⲆΔᐃⵠΔⲆⵠ;
	const ᐃΔⲆⲆⲆᐃΔᐃᐃ = ⲆⵠᐃΔᐃⵠⲆ[ᐃⲆᐃᐃΔⵠΔ];
	const ⲆᐃΔᐃᐃⲆᐃ = ᐃΔⲆⲆⲆᐃΔᐃᐃ(ⵠᐃᐃᐃᐃⵠᐃⲆᐃ + "try{" + ᐃᐃⲆᐃⵠⵠΔⲆΔ + "();0;}catch(ᐃΔⲆⵠᐃᐃᐃⵠΔ){1;}");
	if (ⲆᐃΔᐃᐃⲆᐃ) {
		const ΔⵠⲆⵠΔΔⵠⲆΔ = Math.random;
		const ᐃⵠⲆⵠⲆΔΔΔⲆ = [];
		const ⲆⲆᐃⲆⲆⵠⲆ = function() {
			for (let ⵠΔΔⲆᐃᐃΔᐃⲆ = 0; ⵠΔΔⲆᐃᐃΔᐃⲆ < 7423; ⵠΔΔⲆᐃᐃΔᐃⲆ++) ᐃⵠⲆⵠⲆΔΔΔⲆ.push(ⵠΔΔⲆᐃᐃΔᐃⲆ);
			return ΔⵠⲆⵠΔΔⵠⲆΔ()
		};
		Math.random = ⲆⲆᐃⲆⲆⵠⲆ
	}
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠⵠΔⵠ] = {
		name: "Chest",
		"ⵠⵠ": ⵠ.ΔⲆᐃΔⲆΔⵠ,
		"ⵠΔΔⵠ": Δⵠⵠ,
		"ΔⲆᐃⲆ": 1
	};
	const ⵠᐃⵠⲆⲆⲆⵠ = ᐃⲆᐃⲆΔⲆᐃ;
	const ᐃⲆⲆⵠⵠⵠⲆ = ΔΔⵠⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃⵠΔᐃ] = {
		name: "Stone spike",
		"ⵠⵠ": ⵠ.ᐃⵠᐃⲆᐃΔᐃ,
		"ⵠΔΔⵠ": ⵠᐃΔ,
		"ΔⲆᐃⲆ": ᐃⵠⵠⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆⲆᐃⲆ] = {
		name: "Gold spike",
		"ⵠⵠ": ⵠ.ΔΔⵠᐃⲆΔΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⵠⲆ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆΔΔᐃ] = {
		name: "Diamond spike",
		"ⵠⵠ": ⵠ.ΔᐃⲆⵠΔⲆⲆ,
		"ⵠΔΔⵠ": Δⵠⵠ,
		"ΔⲆᐃⲆ": 1
	};
	const ΔⵠⲆⲆⵠⵠⲆⵠⲆ = ⵠⲆᐃⵠⲆⲆⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃⵠΔⲆ] = {
		name: "Stone door",
		"ⵠⵠ": ⵠ.ⵠΔⵠᐃᐃΔⲆ,
		"ⵠΔΔⵠ": ⵠⵠᐃ,
		"ΔⲆᐃⲆ": ΔΔⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃΔⲆⲆ] = {
		name: "Gold door",
		"ⵠⵠ": ⵠ.ΔΔⵠⲆᐃᐃΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ᐃⵠᐃΔⲆᐃΔ = ᐃΔᐃⲆⲆ;
	const ⵠΔⵠᐃ = ⵠⵠⵠ;
	const ⵠᐃⵠᐃᐃⵠΔ = ⵠᐃⵠⲆⲆⲆⵠ;
	const Ⲇᐃᐃⵠᐃ = ΔⲆΔᐃⲆ;
	const ΔΔⵠⵠΔᐃⲆ = ΔΔΔⲆⵠᐃⲆ;
	const ᐃΔΔΔⲆ = ΔⵠⲆⵠᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃᐃⲆⲆ] = {
		name: "Diamond door",
		"ⵠⵠ": ⵠ.ⲆᐃΔΔᐃᐃⲆ,
		"ⵠΔΔⵠ": ᐃⲆᐃ,
		"ΔⲆᐃⲆ": ⵠᐃᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔᐃΔΔ] = {
		name: ᐃ[237],
		"ⵠⵠ": ⵠ.ⵠᐃⵠⲆᐃⵠᐃ,
		"ⵠΔΔⵠ": ⵠᐃΔ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔⲆΔⲆ] = {
		name: "Big Chapka",
		"ⵠⵠ": ⵠ.ΔΔΔⵠΔⲆᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠᐃⵠᐃ] = {
		name: "Wood spear",
		"ⵠⵠ": ⵠ.ᐃΔⵠⲆΔⵠᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ᐃⲆⲆ
	};
	const ᐃᐃᐃⵠᐃᐃⲆ = ΔᐃⵠⲆⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆⵠᐃᐃ] = {
		name: "Stone spear",
		"ⵠⵠ": ⵠ.ⲆⲆⲆⵠΔΔⲆ,
		"ⵠΔΔⵠ": ⵠⵠΔΔ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆᐃⲆᐃ] = {
		name: "Gold spear",
		"ⵠⵠ": ⵠ.ⲆΔⵠⵠΔᐃΔ,
		"ⵠΔΔⵠ": ⵠΔⵠᐃ,
		"ΔⲆᐃⲆ": 1
	};
	const ⲆᐃⲆᐃⵠᐃᐃ = ᐃΔⵠⲆⲆⲆⲆ;
	const ⵠᐃⵠⵠᐃⲆΔ = ⵠⲆΔⲆⲆⵠⵠ;
	const ⵠⵠᐃⲆⲆᐃᐃ = Δᐃⵠᐃⵠᐃᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃⲆᐃΔ] = {
		name: "Diamond spear",
		"ⵠⵠ": ⵠ.ΔⵠⵠΔⲆΔᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ᐃⲆⲆ
	};
	const Ⲇᐃⵠⵠ = ⵠⵠᐃⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔΔᐃⵠ] = {
		name: "Dragon spear",
		"ⵠⵠ": ⵠ.ΔⲆⵠⲆⲆᐃⲆ,
		"ⵠΔΔⵠ": ⲆⲆΔ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃΔⲆⲆ] = {
		name: "Dragon spear",
		"ⵠⵠ": ⵠ.ΔΔⲆⵠΔΔⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ᐃⲆΔ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃⲆΔᐃ] = {
		name: "Crab spear",
		"ⵠⵠ": ⵠ.ⲆᐃΔⲆⲆⲆⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⵠΔΔ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⵠⲆᐃᐃ] = {
		name: "Crab loot",
		"ⵠⵠ": ⵠ.ⵠⵠⵠⵠⵠⵠⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔⵠⲆⲆⵠ] = {
		name: "Furnace",
		"ⵠⵠ": ⵠ.ⲆᐃⲆⲆⵠⵠⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⵠΔΔ
	};
	const ⲆⲆⵠⵠⵠⵠᐃ = ⲆⵠΔΔΔ;
	const ᐃⵠⲆΔΔΔⵠ = 12653436;

	function ⲆᐃⵠΔᐃΔⲆΔΔ(ⵠⵠⵠⵠ) {
		return ⲆⵠᐃΔᐃⵠⲆ.String.fromCharCode(ⵠⵠⵠⵠ)
	}

	function ⲆᐃⲆᐃΔⲆⵠ(ᐃΔⲆΔⵠΔᐃ) {
		return ᐃΔⲆΔⵠΔᐃ.map(ⲆᐃⵠΔᐃΔⲆΔΔ).join("")
	}
	const ⲆᐃΔΔⵠⲆΔ = function() {
		const ⵠᐃⲆᐃᐃⲆⲆ = ⲆᐃⲆᐃΔⲆⵠ([5123, 11616, 11398, 916, 916, 916, 11616]);
		const ⵠⲆᐃⲆⲆᐃᐃΔᐃ = {
			"ⵠΔᐃⵠΔΔᐃΔⵠ": 5477387,
			"ΔᐃᐃⵠⵠΔⵠⲆᐃ": 8971581,
			"ᐃⵠⲆΔΔΔⵠ": 1255075,
			"ⵠᐃᐃᐃⵠᐃᐃ": 13522541
		};
		if (ⵠⲆᐃⲆⲆᐃᐃΔᐃ[ⵠᐃⲆᐃᐃⲆⲆ] !== ⵠⲆᐃⲆⲆᐃᐃΔᐃ.ᐃⵠⲆΔΔΔⵠ) {
			const ᐃⵠⲆΔΔΔⵠ = function() {
				for (let ⲆᐃⵠΔᐃΔⲆΔΔ = 0; ⲆᐃⵠΔᐃΔⲆΔΔ < 5; ⲆᐃⵠΔᐃΔⲆΔΔ++) ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("click", (function() {
					ᐃⵠⲆΔΔΔⵠ()
				}))
			};
			ᐃⵠⲆΔΔΔⵠ()
		}
	};
	ⲆᐃΔΔⵠⲆΔ();
	const ⲆⲆⲆⲆᐃⲆΔ = Δᐃⵠᐃⵠᐃᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃᐃⲆᐃ] = {
		name: "Explorer hat",
		"ⵠⵠ": ⵠ.ΔᐃΔΔᐃⲆᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃᐃΔΔ] = {
		name: "Pirate hat",
		"ⵠⵠ": ⵠ.ⲆΔⵠⲆᐃΔⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔⵠⵠᐃ] = {
		name: "Flower hat",
		"ⵠⵠ": ⵠ.ΔᐃⵠΔᐃⲆᐃ,
		"ⵠΔΔⵠ": ⵠΔⵠᐃ,
		"ΔⲆᐃⲆ": ΔΔⵠ
	};
	const ᐃᐃΔⲆⵠ = ⲆⲆᐃⲆⵠ;
	const ⵠⲆᐃⲆ = ⵠΔⲆᐃⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⵠⵠΔⲆ] = {
		name: "Fur hat",
		"ⵠⵠ": ⵠ.ⵠⵠⲆⵠᐃᐃⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔᐃᐃᐃ] = {
		name: "Wood helmet",
		"ⵠⵠ": ⵠ.ΔΔⲆΔΔⲆⲆ,
		"ⵠΔΔⵠ": ⵠΔⵠᐃ,
		"ΔⲆᐃⲆ": 1
	};
	const ᐃⵠᐃⵠⲆⵠⵠᐃⵠ = ⲆΔⲆⵠᐃᐃⵠ;
	const ᐃⵠΔⲆⵠⵠᐃ = ⵠΔⵠᐃⲆ;
	const ᐃᐃⲆᐃΔ = ᐃⲆⵠᐃⵠ;
	const ΔΔΔⲆᐃⵠⵠ = ⵠᐃⵠⵠᐃⲆΔ;
	const ᐃΔⵠΔΔΔΔ = ⲆⵠᐃⲆⵠ;
	const ⵠᐃΔⲆΔⲆⵠ = ⲆⵠᐃΔΔ;
	const ᐃⵠΔⵠᐃ = ᐃΔᐃⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔⵠΔᐃ] = {
		name: "Stone helmet",
		"ⵠⵠ": ⵠ.ⲆΔⲆⲆⲆᐃΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ᐃⵠⵠⵠ
	};
	const ΔⵠⲆⵠⲆ = ΔᐃⵠΔⲆ;
	const ⲆᐃⲆΔⲆᐃⲆ = ⲆΔⲆⵠⲆ;
	const ⵠΔΔᐃᐃ = ΔΔⲆΔΔ;
	const ⲆⲆⲆᐃΔΔΔ = ⲆⵠⲆⲆⲆⲆᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃΔᐃΔ] = {
		name: "Gold helmet",
		"ⵠⵠ": ⵠ.ΔⲆᐃⵠΔᐃΔ,
		"ⵠΔΔⵠ": ᐃⲆΔᐃ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⵠᐃᐃⵠ] = {
		name: "Diamond helmet",
		"ⵠⵠ": ⵠ.ⵠⵠΔⲆᐃⵠᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔⲆΔᐃ] = {
		name: "Book",
		"ⵠⵠ": ⵠ.ᐃⵠΔⲆΔⲆᐃ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": ⲆⲆⲆᐃ
	};
	const ⵠⲆᐃⲆⵠ = ⲆΔᐃΔⵠ;
	const ⵠⲆⵠΔⵠΔᐃ = ⲆⵠⲆⲆΔΔΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆᐃΔᐃ] = {
		name: "Paper",
		"ⵠⵠ": ⵠ.ᐃΔΔᐃⲆΔᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⵠⲆΔ] = {
		name: "Bag",
		"ⵠⵠ": ⵠ.ᐃᐃⲆⵠⲆᐃΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆⲆΔⲆ] = {
		name: "Amethyst sword",
		"ⵠⵠ": ⵠ.ᐃΔᐃⲆᐃⲆⲆ,
		"ⵠΔΔⵠ": ᐃⲆΔ,
		"ΔⲆᐃⲆ": 1
	};
	const ⵠΔᐃΔΔⲆᐃ = ΔᐃΔᐃΔ;
	const ΔΔᐃᐃⵠⵠⲆ = ⵠᐃⵠⲆᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔΔᐃᐃᐃ] = {
		name: "Amethyst pick",
		"ⵠⵠ": ⵠ.ⵠⵠⵠᐃⲆⲆᐃ,
		"ⵠΔΔⵠ": ᐃⲆΔᐃ,
		"ΔⲆᐃⲆ": ⲆⲆⲆᐃ
	};
	const ⲆᐃΔᐃⵠ = ⲆⲆΔΔᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔᐃⲆⲆ] = {
		name: "Amethyst spear",
		"ⵠⵠ": ⵠ.ᐃΔᐃΔⵠⲆⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⵠⲆ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃΔⵠⲆ] = {
		name: "Stone hammer",
		"ⵠⵠ": ⵠ.ᐃᐃΔⵠΔΔⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ⵠⵠΔᐃᐃⲆⲆ = ⲆⵠΔΔⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠⵠΔᐃ] = {
		name: "Gold hammer",
		"ⵠⵠ": ⵠ.ᐃΔⲆᐃⲆᐃⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⵠᐃᐃ
	};
	const ⲆᐃΔΔᐃⵠⲆ = ᐃⵠᐃⲆⲆ;
	const ⵠⵠⲆΔ = ᐃⲆᐃ;

	function ΔⲆⵠΔΔΔᐃᐃⵠ() {
		return 2530441
	}
	const ⵠⵠᐃⵠⵠᐃᐃ = 4012834;
	const ⲆΔⲆⵠⲆΔᐃ = ΔⲆⵠΔΔΔᐃᐃⵠ + " let ⲆⵠΔᐃΔᐃⵠᐃΔ = ΔⲆⵠΔΔΔᐃᐃⵠ () * 5727608; return ⲆⵠΔᐃΔᐃⵠᐃΔ;";
	const ᐃᐃⵠⵠⵠⵠᐃ = new Function(ⲆΔⲆⵠⲆΔᐃ);
	try {
		ᐃᐃⵠⵠⵠⵠᐃ(ⵠⵠᐃⵠⵠᐃᐃ)
	} catch (e) {
		const ⵠⵠᐃⵠⵠᐃᐃ = Math.random;
		const ⲆⵠΔᐃΔᐃⵠᐃΔ = [];
		const ⲆΔⲆⵠⲆΔᐃ = function() {
			for (let ᐃᐃⵠⵠⵠⵠᐃ = 0; ᐃᐃⵠⵠⵠⵠᐃ < 5324; ᐃᐃⵠⵠⵠⵠᐃ++) ⲆⵠΔᐃΔᐃⵠᐃΔ.push(ᐃᐃⵠⵠⵠⵠᐃ);
			return ⵠⵠᐃⵠⵠᐃᐃ()
		};
		Math.random = ⲆΔⲆⵠⲆΔᐃ
	}
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆᐃⵠⵠ] = {
		name: "Diamond hammer",
		"ⵠⵠ": ⵠ.ΔᐃⵠⲆⲆᐃⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⲆᐃⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃᐃᐃⵠ] = {
		name: "Amethyst hammer",
		"ⵠⵠ": ⵠ.ⵠᐃⵠⲆΔᐃⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ⲆⲆᐃⲆ = ᐃⲆΔᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃⵠᐃΔ] = {
		name: "Reidite hammer",
		"ⵠⵠ": ⵠ.ΔΔⲆᐃⵠΔᐃ,
		"ⵠΔΔⵠ": Δⵠⵠ,
		"ΔⲆᐃⲆ": ⲆⲆⵠ
	};
	const ⲆⲆᐃᐃⲆⵠⲆ = Δᐃⵠᐃⵠᐃᐃ;
	const ΔⵠⵠΔᐃ = ⵠᐃⵠⲆᐃᐃΔ;
	const ΔΔΔⲆ = 15886709;
	const ⵠⲆⵠⵠΔᐃΔⲆⲆ = ΔΔΔⲆ["ⲆⵠΔΔⵠᐃⵠ"];
	const ⵠΔⲆⲆⲆΔⵠΔᐃ = `const ᐃⲆⲆⲆΔᐃⵠᐃⵠ = (typeof ᐃᐃⲆⵠⲆᐃᐃ === "${ⵠⲆⵠⵠΔᐃΔⲆⲆ}") ? 1 : 0; return ᐃⲆⲆⲆΔᐃⵠᐃⵠ;`;

	function ᐃᐃⲆⵠⲆᐃᐃ() {
		ⵠⲆⵠⵠΔᐃΔⲆⲆ;
		ΔΔΔⲆ();
		return ⵠΔⲆⲆⲆΔⵠΔᐃ
	}
	const ᐃⲆⲆⲆΔᐃⵠᐃⵠ = 11105290;
	const ⲆⵠⲆⵠᐃⲆᐃ = new Function(ᐃᐃⲆⵠⲆᐃᐃ + ⵠΔⲆⲆⲆΔⵠΔᐃ);
	const ⵠⵠΔⲆⵠ = 3571185;
	if (ⲆⵠⲆⵠᐃⲆᐃ(ᐃⲆⲆⲆΔᐃⵠᐃⵠ, ⵠⵠΔⲆⵠ) === 1) {
		const ΔΔΔⲆ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]];
		const ⵠⲆⵠⵠΔᐃΔⲆⲆ = ΔΔΔⲆ;
		const ⲆⵠΔΔⵠᐃⵠ = function() {
			ΔΔΔⲆ(ⲆⵠΔΔⵠᐃⵠ, 5551);
			ⵠⲆⵠⵠΔᐃΔⲆⲆ(ⲆⵠΔΔⵠᐃⵠ, 5611)
		};
		ⲆⵠΔΔⵠᐃⵠ()
	}
	const ᐃⲆΔΔⲆΔΔ = ΔⲆΔⵠᐃ;
	const ⲆⵠⲆΔⲆ = ΔⲆⵠΔᐃ;
	const ᐃΔΔΔ = ⲆⵠⵠⲆ;
	const ΔΔⵠⲆΔ = Δᐃᐃⵠ;
	const ΔⵠⵠᐃⵠΔΔ = ᐃᐃⲆΔⵠ;
	const ⲆⵠⵠΔⲆⵠⲆ = ᐃΔᐃᐃⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃⵠᐃᐃ] = {
		name: "Amethyst wall",
		"ⵠⵠ": ⵠ.ⵠᐃⵠⲆΔⵠⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ᐃⲆⲆ
	};
	const ⵠⲆⲆΔᐃ = ⲆⲆⲆⵠΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆⲆⲆΔ] = {
		name: "Amethyst spike",
		"ⵠⵠ": ⵠ.ⲆⲆᐃⵠⲆⵠΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ᐃⲆⵠⲆⵠⲆᐃᐃⵠ = ΔⲆᐃⲆⵠᐃΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔΔᐃᐃ] = {
		name: "Amethyst door",
		"ⵠⵠ": ⵠ.ΔⲆΔᐃΔΔΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔⵠⲆⵠ] = {
		name: "Cap & scarf",
		"ⵠⵠ": ⵠ.ⵠΔᐃⲆᐃΔⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": Δⵠᐃ
	};
	const ⵠᐃⵠⲆⵠⵠⲆ = ⲆⲆΔᐃᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃⵠⵠΔ] = {
		name: "Blue cord",
		"ⵠⵠ": ⵠ.ⵠΔⲆⲆᐃᐃΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ᐃⲆᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔᐃⵠⵠ] = {
		name: "Lock",
		"ⵠⵠ": ⵠ.ⵠᐃⲆᐃΔⲆⵠ,
		"ⵠΔΔⵠ": ⵠⵠΔΔ,
		"ΔⲆᐃⲆ": ᐃⵠⵠⵠ
	};
	const ⵠⵠⲆᐃⲆᐃᐃ = ΔⲆᐃΔⵠᐃᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⵠᐃΔΔ] = {
		name: "Resurrection",
		"ⵠⵠ": ⵠ.ⲆΔⲆⲆⵠⲆᐃ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠᐃΔΔ] = {
		name: "Lockpick",
		"ⵠⵠ": ⵠ.ⲆΔⵠᐃΔⵠⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃⲆⲆΔ] = {
		name: ᐃ[194],
		"ⵠⵠ": ⵠ.ᐃᐃⲆΔᐃΔⵠ,
		"ⵠΔΔⵠ": Δⵠⵠ,
		"ΔⲆᐃⲆ": 1
	};
	const ⵠⲆΔᐃⵠᐃᐃ = ⲆⵠⲆⵠΔⵠⲆ;
	const ΔⲆⵠⵠᐃ = ⵠⵠᐃΔᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃᐃᐃⲆ] = {
		name: "Amethyst helmet",
		"ⵠⵠ": ⵠ.ⵠⵠᐃⲆⵠⵠⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔΔᐃⲆΔ] = {
		name: "Super hammer",
		"ⵠⵠ": ⵠ.ⲆⵠⵠⵠᐃΔⲆ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": 1
	};
	const ⵠⵠᐃⲆᐃ = ⵠⵠᐃⵠΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆᐃⲆᐃ] = {
		name: "Bridge",
		"ⵠⵠ": ⵠ.ⲆⲆⵠⵠᐃΔᐃ,
		"ⵠΔΔⵠ": 1,
		"ΔⲆᐃⲆ": 1
	};
	const ⲆⵠⲆⵠⵠⵠⲆ = ⲆⲆΔⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆΔⵠⲆ] = {
		name: "Wood Tower",
		"ⵠⵠ": ⵠ.ΔΔᐃᐃⵠΔⵠ,
		"ⵠΔΔⵠ": ⲆⵠΔΔ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆΔᐃⵠ] = {
		name: "Bottle full",
		"ⵠⵠ": ⵠ.ⲆΔⵠⲆΔⲆΔ,
		"ⵠΔΔⵠ": ᐃⲆᐃ,
		"ΔⲆᐃⲆ": ᐃⲆᐃ
	};
	const ⵠΔΔⲆⵠⵠᐃ = ⵠⵠᐃⵠⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃⲆⲆⲆ] = {
		name: "Bottle empty",
		"ⵠⵠ": ⵠ.ⵠᐃᐃᐃΔᐃⵠ,
		"ⵠΔΔⵠ": Ⲇⵠᐃ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠⵠⵠⵠ] = {
		name: "Stone shovel",
		"ⵠⵠ": ⵠ.ᐃᐃⵠⵠⵠΔᐃ,
		"ⵠΔΔⵠ": ⵠⵠⵠ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆⲆⲆⵠ] = {
		name: "Watering can",
		"ⵠⵠ": ⵠ.ᐃΔᐃΔⵠΔΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔⵠⲆⵠ] = {
		name: "Wheat",
		"ⵠⵠ": ⵠ.ⵠⲆᐃᐃᐃᐃΔ,
		"ⵠΔΔⵠ": ⵠⵠⵠ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃⵠⲆΔ] = {
		name: "Cookie",
		"ⵠⵠ": ⵠ.ΔⵠᐃᐃΔⵠⲆ,
		"ⵠΔΔⵠ": ᐃⲆΔᐃ,
		"ΔⲆᐃⲆ": 0
	};
	const ⵠⵠⵠⲆ = ΔΔⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⲆΔⵠᐃ] = {
		name: "Windmill",
		"ⵠⵠ": ⵠ.ᐃⵠⵠΔⲆΔΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⵠᐃᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⲆⵠⲆΔ] = {
		name: "Super diving suit",
		"ⵠⵠ": ⵠ.ᐃΔᐃⲆᐃⵠᐃ,
		"ⵠΔΔⵠ": ⲆⲆᐃⲆ,
		"ΔⲆᐃⲆ": ᐃⵠⵠⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⲆᐃΔᐃ] = {
		name: "Diving mask",
		"ⵠⵠ": ⵠ.ⲆᐃⵠΔΔⵠΔ,
		"ⵠΔΔⵠ": ⵠⵠᐃ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃⲆⵠⲆ] = {
		name: "Watering can full",
		"ⵠⵠ": ⵠ.ⵠΔⵠⲆⲆⵠⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	const Ⲇⵠᐃᐃᐃ = ⵠⵠΔᐃᐃⲆⲆ;
	const ⵠⵠᐃⲆΔᐃⲆΔⲆ = 2858899;

	function ΔⲆᐃⵠⵠΔΔ(ⲆΔΔⲆᐃΔΔ) {
		return ⲆⵠᐃΔᐃⵠⲆ.String.fromCharCode(ⲆΔΔⲆᐃΔΔ)
	}

	function ᐃᐃⲆⵠΔΔⲆ(ⵠΔⲆⵠⲆⵠᐃ) {
		return ⵠΔⲆⵠⲆⵠᐃ.map(ΔⲆᐃⵠⵠΔΔ).join("")
	}
	const ⲆΔⲆⲆⲆⲆⲆ = function() {
		const ΔᐃΔΔⵠΔΔᐃⵠ = ᐃᐃⲆⵠΔΔⲆ([11616, 11616, 5123, 11398, 916, 5123, 11398, 916, 11398]);
		const ⵠⲆΔᐃᐃᐃⲆ = {
			"ⵠΔⲆᐃΔᐃᐃΔⵠ": 16403868,
			"ⵠⲆΔᐃᐃⲆⲆ": 13762897,
			"ⵠⵠᐃⲆΔᐃⲆΔⲆ": 2111465,
			"ᐃⲆᐃⵠⲆᐃᐃ": 4031999
		};
		if (ⵠⲆΔᐃᐃᐃⲆ[ΔᐃΔΔⵠΔΔᐃⵠ] !== ⵠⲆΔᐃᐃᐃⲆ.ⵠⵠᐃⲆΔᐃⲆΔⲆ) {
			const ⵠⵠᐃⲆΔᐃⲆΔⲆ = Math.floor;
			let ᐃᐃⲆⵠΔΔⲆ = 0;
			const ΔⲆᐃⵠⵠΔΔ = function(ΔⲆᐃⵠⵠΔΔ) {
				for (let ⲆΔΔⲆᐃΔΔ = 0; ⲆΔΔⲆᐃΔΔ < 5260; ⲆΔΔⲆᐃΔΔ++) ᐃᐃⲆⵠΔΔⲆ += ⲆΔΔⲆᐃΔΔ;
				return ⵠⵠᐃⲆΔᐃⲆΔⲆ(ΔⲆᐃⵠⵠΔΔ)
			};
			Math.floor = ΔⲆᐃⵠⵠΔΔ
		}
	};
	ⲆΔⲆⲆⲆⲆⲆ();
	const ⲆᐃᐃⲆᐃΔⵠᐃⵠ = {};
	const ⵠⵠᐃᐃᐃᐃⲆ = {};
	ⲆᐃᐃⲆᐃΔⵠᐃⵠ["get"] = function(ⲆᐃΔⵠⵠⵠⵠ, ⲆΔᐃⲆᐃᐃⵠᐃⵠ) {
		if (ⲆΔᐃⲆᐃᐃⵠᐃⵠ !== "ⲆᐃᐃⲆᐃΔⵠᐃⵠ") {
			const ⲆᐃᐃⲆᐃΔⵠᐃⵠ = function() {
				for (let ⲆᐃΔⵠⵠⵠⵠ = 0; ⲆᐃΔⵠⵠⵠⵠ < 5; ⲆᐃΔⵠⵠⵠⵠ++) ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("click", (function() {
					ⲆᐃᐃⲆᐃΔⵠᐃⵠ()
				}))
			};
			ⲆᐃᐃⲆᐃΔⵠᐃⵠ()
		}
		return ⲆⵠᐃΔᐃⵠⲆ["Reflect"]["get"](...arguments)
	};
	const ᐃⲆⲆᐃⵠⲆΔⲆⲆ = new ⲆⵠᐃΔᐃⵠⲆ["Proxy"](ⵠⵠᐃᐃᐃᐃⲆ, ⲆᐃᐃⲆᐃΔⵠᐃⵠ);
	const ⵠᐃᐃᐃᐃᐃⲆΔΔ = ᐃⲆⲆᐃⵠⲆΔⲆⲆ.ⲆᐃᐃⲆᐃΔⵠᐃⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠᐃⵠΔ] = {
		name: "Cake",
		"ⵠⵠ": ⵠ.ᐃⲆⲆⵠᐃⲆⵠ,
		"ⵠΔΔⵠ": ⲆⲆᐃ,
		"ΔⲆᐃⲆ": ᐃⲆᐃ
	};
	const ⵠⵠΔⵠΔⲆᐃ = ΔΔᐃᐃⲆΔⲆ;
	const ⲆᐃᐃΔⲆⲆⵠⲆⲆ = ΔⵠⲆⲆⲆⵠⲆ;
	const ΔΔᐃⵠᐃᐃΔ = ⲆⵠᐃᐃⲆ;
	const ⵠⵠⵠΔΔ = ΔΔⵠⲆⵠ;
	const ᐃⵠᐃΔⲆⵠⲆ = ⲆⲆⲆⲆᐃⲆΔ;
	const ⲆᐃⲆᐃⲆᐃᐃ = ⵠⵠΔΔΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃΔΔⵠ] = {
		name: "Foodfish cooked",
		"ⵠⵠ": ⵠ.ⲆᐃᐃⵠᐃΔΔ,
		"ⵠΔΔⵠ": ⵠⵠΔΔ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔΔΔⵠᐃ] = {
		name: "Plot",
		"ⵠⵠ": ⵠ.ᐃᐃⵠᐃⵠᐃⲆ,
		"ⵠΔΔⵠ": ΔΔⵠ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃΔΔⲆ] = {
		name: "Bread",
		"ⵠⵠ": ⵠ.ᐃᐃⲆⲆⲆΔᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔΔⵠΔΔᐃ] = {
		name: "Bottle full (with ice)",
		"ⵠⵠ": ⵠ.ᐃⲆᐃΔⲆΔᐃⲆⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ⲆᐃⲆⲆᐃⲆΔ = ⲆⵠᐃᐃⲆᐃⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃⲆⵠᐃⵠⲆ] = {
		name: "Bottle full (with well)",
		"ⵠⵠ": ⵠ.ⵠᐃⵠⲆΔᐃΔⵠⵠ,
		"ⵠΔΔⵠ": Δⵠⵠ,
		"ΔⲆᐃⲆ": Δⵠᐃ
	};
	const ΔⵠⲆⲆΔ = ⵠᐃⲆⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⵠⲆⲆΔ] = {
		name: "Gold shovel",
		"ⵠⵠ": ⵠ.ᐃⵠⲆⲆᐃΔⵠ,
		"ⵠΔΔⵠ": ⲆⲆΔ,
		"ΔⲆᐃⲆ": 1
	};
	const ᐃᐃⵠΔ = ΔᐃᐃΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃᐃΔⵠ] = {
		name: "Diamond shovel",
		"ⵠⵠ": ⵠ.ΔᐃⵠⵠⵠΔᐃ,
		"ⵠΔΔⵠ": ⲆⲆᐃⲆ,
		"ΔⲆᐃⲆ": 1
	};
	const ΔⲆⲆᐃΔᐃΔ = ᐃΔᐃⵠΔΔᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔⵠᐃⲆ] = {
		name: "Amethyst shovel",
		"ⵠⵠ": ⵠ.ⲆΔⵠⲆΔⵠᐃ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔⲆⲆⲆ] = {
		name: "Spanner",
		"ⵠⵠ": ⵠ.ⲆΔⵠΔⲆⵠⲆ,
		"ⵠΔΔⵠ": ⲆⲆᐃⲆ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔΔΔᐃ] = {
		name: "Machete",
		"ⵠⵠ": ⵠ.ⵠᐃΔⵠᐃᐃⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⲆᐃⵠ
	};
	const ⲆΔⲆΔ = ᐃᐃⲆⵠ;
	const ⵠⲆΔⵠᐃᐃⲆ = ⵠⵠᐃᐃⲆΔⵠ;
	const ⵠⵠᐃΔⵠᐃⲆ = ⵠⲆᐃⲆⵠⲆⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠⲆⲆⵠ] = {
		name: "Bread oven",
		"ⵠⵠ": ⵠ.ⲆⵠᐃᐃᐃΔⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": Δⵠᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆΔΔⵠ] = {
		name: ᐃ[521],
		"ⵠⵠ": ⵠ.ⲆᐃⲆⲆΔΔⵠ,
		"ⵠΔΔⵠ": ⵠⵠⲆΔ,
		"ΔⲆᐃⲆ": ⵠΔⵠᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃᐃΔⵠ] = {
		name: "Dragon helmet",
		"ⵠⵠ": ⵠ.ⵠᐃᐃᐃⵠⵠᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⲆᐃ
	};
	const ΔⲆⵠⲆᐃᐃⵠ = ⵠⲆⲆΔⵠⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃᐃⲆⲆ] = {
		name: "Dragon helmet",
		"ⵠⵠ": ⵠ.ⵠΔΔᐃⵠΔΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	const ⵠᐃᐃⲆⵠⵠᐃ = ᐃⲆΔΔⲆ;
	const ⵠⵠⲆΔΔΔᐃ = ⲆᐃΔΔᐃⵠⲆ;
	const ⵠᐃⵠΔ = ᐃΔΔΔ;
	const ΔᐃⲆⲆ = Δⵠⵠ;
	const ⵠᐃΔⵠⵠⲆᐃ = ΔΔΔⲆᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆΔΔΔ] = {
		name: "Witch",
		"ⵠⵠ": ⵠ.ΔΔⲆⵠⲆⵠΔ,
		"ⵠΔΔⵠ": ᐃⲆΔ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔᐃΔᐃ] = {
		name: "Nimbus",
		"ⵠⵠ": ⵠ.ⵠΔΔᐃᐃⲆᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ᐃⲆΔᐃ
	};
	const ΔⲆⲆⵠⲆᐃΔᐃᐃ = ΔⲆⵠⲆᐃᐃⵠ;
	const ⲆⵠⲆⲆᐃⲆⲆ = ΔᐃᐃΔᐃ;
	const ΔᐃⵠⲆᐃⵠᐃ = ᐃⵠΔⲆΔΔⵠ;
	const ⵠⲆⵠΔⲆ = ΔⲆⵠⵠᐃ;
	const ΔᐃⵠⲆ = ⵠⵠⵠⲆ;
	const ᐃΔⲆΔⵠ = ⲆⲆΔΔΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃⲆⵠⵠ] = {
		name: "Wand1",
		"ⵠⵠ": ⵠ.ΔⲆⲆᐃⵠⲆⵠ,
		"ⵠΔΔⵠ": ⲆⲆᐃ,
		"ΔⲆᐃⲆ": Ⲇⵠᐃ
	};
	const ΔⲆᐃⵠⵠᐃΔ = ⲆⲆΔⵠⲆ;
	const ⲆΔⲆⲆᐃᐃⲆ = ΔⵠΔᐃⵠ;
	const ᐃΔⵠΔᐃ = ⲆᐃΔᐃⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⵠΔⵠΔ] = {
		name: "Wand2",
		"ⵠⵠ": ⵠ.ΔΔⲆⲆⲆᐃⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⲆᐃⲆ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃᐃⲆΔ] = {
		name: "Dragon sword",
		"ⵠⵠ": ⵠ.ΔⲆⵠⲆᐃⲆⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": Ⲇⵠᐃ
	};
	const ⲆⵠΔᐃⵠⵠΔ = ⵠᐃΔᐃⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃᐃⲆᐃ] = {
		name: "Dragon sword",
		"ⵠⵠ": ⵠ.ⵠⲆⲆᐃΔᐃⲆ,
		"ⵠΔΔⵠ": Δⵠⵠ,
		"ΔⲆᐃⲆ": 0
	};
	const ⲆΔᐃᐃᐃΔⵠ = ⵠᐃΔⲆΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⵠⵠⵠΔ] = {
		name: "Wood shield",
		"ⵠⵠ": ⵠ.ᐃⵠⵠΔⵠΔᐃ,
		"ⵠΔΔⵠ": Δⵠⵠ,
		"ΔⲆᐃⲆ": ΔᐃⵠⲆ
	};
	const ᐃⵠⵠΔⲆ = ΔΔⵠⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔΔᐃΔ] = {
		name: "Stone shield",
		"ⵠⵠ": ⵠ.ΔΔΔΔⲆⵠⵠ,
		"ⵠΔΔⵠ": ᐃⲆᐃ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔⲆⲆᐃ] = {
		name: "Gold shield",
		"ⵠⵠ": ⵠ.ᐃⵠⲆⲆΔⲆⵠ,
		"ⵠΔΔⵠ": ⵠⵠⵠ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔΔΔΔ] = {
		name: "Diamond shield",
		"ⵠⵠ": ⵠ.ΔⲆΔᐃⵠⲆΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃⵠΔᐃ] = {
		name: "Amethyst shield",
		"ⵠⵠ": ⵠ.ΔᐃᐃᐃⲆᐃᐃ,
		"ⵠΔΔⵠ": ⵠᐃΔ,
		"ΔⲆᐃⲆ": ⵠⵠⵠⲆ
	};
	const ᐃᐃᐃⵠᐃⵠⵠ = ⲆⲆⵠⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆⲆᐃᐃ] = {
		name: "Reidite shield",
		"ⵠⵠ": ⵠ.ⵠΔⲆⵠⲆⵠⵠ,
		"ⵠΔΔⵠ": ᐃⲆᐃ,
		"ΔⲆᐃⲆ": ⲆⲆᐃⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔΔⲆⵠ] = {
		name: "Wood axe",
		"ⵠⵠ": ⵠ.ⲆⲆⲆᐃᐃΔⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ⵠΔᐃᐃΔ = ⲆⲆⲆⵠΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃⵠΔⵠ] = {
		name: "Stone axe",
		"ⵠⵠ": ⵠ.ⲆΔⲆⵠΔᐃΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃΔΔⲆ] = {
		name: "Gold axe",
		"ⵠⵠ": ⵠ.ⲆⲆΔΔΔᐃⵠ,
		"ⵠΔΔⵠ": ⲆⲆᐃⲆ,
		"ΔⲆᐃⲆ": ⵠⵠⵠⲆ
	};
	const ᐃⵠⲆΔⵠΔⵠ = ΔᐃΔⲆⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔΔΔⲆ] = {
		name: "Diamond axe",
		"ⵠⵠ": ⵠ.ΔⵠᐃⲆΔⵠᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ⵠⲆⵠⵠΔ = ᐃΔⵠΔᐃ;
	const ΔⲆⵠⵠⲆⵠⲆ = ΔᐃΔⵠΔᐃⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆΔΔΔ] = {
		name: "Amethyst axe",
		"ⵠⵠ": ⵠ.Δⵠⵠⵠᐃⵠᐃ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": 1
	};
	const ᐃⲆⲆΔᐃ = Ⲇᐃᐃⵠᐃ;
	const ΔⵠᐃⲆΔ = ΔⵠΔᐃΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔⵠᐃΔ] = {
		name: "Reidite axe",
		"ⵠⵠ": ⵠ.ⵠᐃᐃⲆΔⵠⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃⲆⵠⵠ] = {
		name: "Wood bow",
		"ⵠⵠ": ⵠ.ΔⵠΔⵠⵠΔΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔⵠⵠⲆⲆ] = {
		name: "Stone bow",
		"ⵠⵠ": ⵠ.ᐃⲆⵠⲆΔΔΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⵠΔᐃΔ] = {
		name: "Gold bow",
		"ⵠⵠ": ⵠ.ᐃᐃⵠᐃⵠΔΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔᐃⵠᐃ] = {
		name: "Diamond bow",
		"ⵠⵠ": ⵠ.ⲆΔᐃΔΔⵠᐃ,
		"ⵠΔΔⵠ": ΔᐃⲆⲆ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔᐃΔⵠ] = {
		name: "Amethyst bow",
		"ⵠⵠ": ⵠ.ⵠᐃⵠᐃΔⵠⲆ,
		"ⵠΔΔⵠ": Ⲇⵠᐃ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.Δᐃᐃⵠⵠ] = {
		name: "Reidite bow",
		"ⵠⵠ": ⵠ.ⵠᐃΔⵠᐃᐃᐃ,
		"ⵠΔΔⵠ": ⵠⵠⲆΔ,
		"ΔⲆᐃⲆ": ΔᐃⵠⲆ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆⵠᐃΔ] = {
		name: "Dragon bow",
		"ⵠⵠ": ⵠ.ⵠᐃΔΔⲆΔⲆ,
		"ⵠΔΔⵠ": ⵠⵠᐃ,
		"ΔⲆᐃⲆ": ⵠⵠᐃ
	};
	const ΔⲆⵠⲆ = ⲆⲆᐃⵠ;
	const ᐃᐃΔⲆⲆ = Δᐃⵠⵠᐃ;
	const ᐃⲆΔⵠΔᐃΔⲆΔ = ⲆⵠΔⵠⵠⵠΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆᐃΔΔ] = {
		name: "Crown of life",
		"ⵠⵠ": ⵠ.ⵠΔⲆᐃᐃΔᐃ,
		"ⵠΔΔⵠ": ⲆⲆᐃ,
		"ΔⲆᐃⲆ": ΔᐃⲆⲆ
	};
	const ΔⲆⵠΔ = ⵠⲆΔᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃᐃⲆΔ] = {
		name: "Gem of life",
		"ⵠⵠ": ⵠ.ⵠᐃᐃᐃΔⵠⲆ,
		"ⵠΔΔⵠ": ⵠΔⵠᐃ,
		"ΔⲆᐃⲆ": ᐃⲆΔᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔΔᐃΔ] = {
		name: "Orb of the dragon",
		"ⵠⵠ": ⵠ.ᐃⵠᐃᐃᐃΔᐃ,
		"ⵠΔΔⵠ": Ⲇⵠᐃ,
		"ΔⲆᐃⲆ": Δⵠⵠ
	};
	const ⵠᐃᐃᐃⲆΔⲆ = ᐃΔᐃⵠΔΔᐃ;
	const ᐃᐃⲆⵠᐃ = ⵠⲆⲆⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃᐃΔⵠ] = {
		name: "Orb of the dragon",
		"ⵠⵠ": ⵠ.ΔⲆΔΔᐃΔⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	const ΔᐃᐃⲆᐃΔΔ = ᐃᐃΔⵠΔ;
	const ΔⲆᐃΔⲆⲆΔ = ⲆⵠΔΔᐃᐃⲆ;
	const ΔΔⵠⲆ = ᐃᐃΔⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆⵠⵠᐃ] = {
		name: "Cube of the dragon",
		"ⵠⵠ": ⵠ.ⵠⵠⲆⵠⵠⲆᐃ,
		"ⵠΔΔⵠ": ΔᐃⲆⲆ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔΔⲆΔⲆ] = {
		name: "Cube of the dragon",
		"ⵠⵠ": ⵠ.ⲆⵠᐃⵠᐃⵠΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	const ⲆΔⵠΔⵠⵠΔΔⵠ = ⲆⵠᐃⲆⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔⲆⵠⵠ] = {
		name: "Crown of luck",
		"ⵠⵠ": ⵠ.ᐃⲆΔᐃⵠᐃⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⲆᐃ
	};
	const ⲆⵠᐃᐃⵠⲆΔ = ⲆⵠᐃᐃⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⵠⲆᐃⲆ] = {
		name: "Gem of luck",
		"ⵠⵠ": ⵠ.ⲆⵠⵠⵠΔⲆᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	const ΔⲆΔΔΔΔᐃ = ⵠⵠⲆΔⲆ;
	const ⵠΔᐃᐃⲆ = Δⵠᐃⵠᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃΔⵠᐃ] = {
		name: "Crown of the angel",
		"ⵠⵠ": ⵠ.ⲆΔΔᐃᐃᐃᐃ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": ᐃⲆΔᐃ
	};
	const ΔᐃⵠⵠⲆᐃΔ = ⲆⲆᐃΔⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆᐃΔⲆ] = {
		name: "Gem of the angel",
		"ⵠⵠ": ⵠ.ⲆⵠⵠⲆᐃᐃⵠ,
		"ⵠΔΔⵠ": ⲆⲆΔ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃⲆⵠᐃ] = {
		name: "Dragon heart",
		"ⵠⵠ": ⵠ.ⲆΔⵠⲆᐃᐃᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⲆᐃⲆ
	};
	const ⵠᐃⲆⵠᐃᐃⵠⵠΔ = ΔⵠⲆᐃⲆⵠᐃ;
	const ⲆᐃᐃᐃΔᐃⲆ = ΔⲆᐃΔⲆⲆΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔⲆⵠᐃ] = {
		name: "Lava heart",
		"ⵠⵠ": ⵠ.ⵠⵠᐃⵠⲆᐃⲆ,
		"ⵠΔΔⵠ": ⲆⲆΔ,
		"ΔⲆᐃⲆ": ⲆⲆΔ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔᐃΔⲆ] = {
		name: "Hood",
		"ⵠⵠ": ⵠ.ΔⲆⵠᐃΔᐃⲆ,
		"ⵠΔΔⵠ": ⲆⲆᐃ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃΔⵠⵠ] = {
		name: "Peasant",
		"ⵠⵠ": ⵠ.ⵠⵠⲆⵠⵠⵠⵠ,
		"ⵠΔΔⵠ": ⵠⵠⵠ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃᐃⲆⵠ] = {
		name: "Winter peasant",
		"ⵠⵠ": ⵠ.ⵠᐃⵠⵠΔᐃᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	const ⵠⵠⵠᐃⲆ = ᐃᐃᐃᐃΔ;
	const ⲆᐃⲆⲆⵠΔⲆ = "";

	function ΔⲆΔⵠⲆⵠⵠⲆΔ(ⵠᐃᐃⲆⲆΔⲆ) {
		if (ⵠᐃᐃⲆⲆΔⲆ > 0) return ⵠᐃᐃⲆⲆΔⲆ * ⵠᐃᐃⲆⲆΔⲆ;
		else return ⵠᐃᐃⲆⲆΔⲆ
	}

	function ᐃΔΔᐃᐃᐃⲆᐃᐃ(ᐃΔⵠᐃᐃⵠⵠᐃΔ) {
		return ⲆⵠᐃΔᐃⵠⲆ.String.fromCharCode(ᐃΔⵠᐃᐃⵠⵠᐃΔ)
	}

	function ⵠⵠᐃⵠⵠΔᐃ(ⵠⲆΔⲆΔⲆⲆ) {
		return ⵠⲆΔⲆΔⲆⲆ.map(ᐃΔΔᐃᐃᐃⲆᐃᐃ).join(ⲆᐃⲆⲆⵠΔⲆ)
	}

	function ΔⲆⲆⵠᐃΔⵠ(ᐃᐃΔΔⵠΔⲆ) {
		const ΔᐃⲆᐃΔⲆᐃ = ΔⲆΔⵠⲆⵠⵠⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]]();
		const ⲆⲆⵠⵠΔᐃⲆⵠⵠ = ΔᐃⲆᐃΔⲆᐃ.indexOf(ᐃᐃΔΔⵠΔⲆ);
		return ⲆⲆⵠⵠΔᐃⲆⵠⵠ !== -1 ? 1 : 0
	}
	const ⵠⵠᐃΔⵠⵠⵠⵠⵠ = ΔⲆⲆⵠᐃΔⵠ(ⵠⵠᐃⵠⵠΔᐃ([916, 11398, 916, 11616, 11398, 11616, 11616, 11398, 916]));
	if (ⵠⵠᐃΔⵠⵠⵠⵠⵠ === 0) {
		const ⵠⵠᐃΔⵠⵠⵠⵠⵠ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]];
		const ⲆⲆⵠⵠΔᐃⲆⵠⵠ = ⵠⵠᐃΔⵠⵠⵠⵠⵠ;
		const ΔⲆΔⵠⲆⵠⵠⲆΔ = function() {
			ⵠⵠᐃΔⵠⵠⵠⵠⵠ(ΔⲆΔⵠⲆⵠⵠⲆΔ, 8834);
			ⲆⲆⵠⵠΔᐃⲆⵠⵠ(ΔⲆΔⵠⲆⵠⵠⲆΔ, 2524)
		};
		ΔⲆΔⵠⲆⵠⵠⲆΔ()
	}
	const ᐃΔⲆⲆⵠⵠᐃ = ⵠᐃᐃⲆⵠⵠᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆᐃΔΔ] = {
		name: "Winter hood",
		"ⵠⵠ": ⵠ.ΔΔⵠᐃⲆⵠᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⵠΔⵠᐃ
	};
	const ᐃⵠᐃⲆⵠ = ⲆⵠΔΔⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆⲆΔⲆ] = {
		name: "Bucket full",
		"ⵠⵠ": ⵠ.ᐃᐃⵠⵠΔⲆᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔⵠⵠᐃ] = {
		name: "Bucket empty",
		"ⵠⵠ": ⵠ.ΔΔΔᐃⵠⵠⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃᐃᐃΔ] = {
		name: "Well",
		"ⵠⵠ": ⵠ.ΔᐃΔᐃᐃᐃᐃ,
		"ⵠΔΔⵠ": ⵠΔⵠᐃ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔΔⵠΔΔ] = {
		name: "Sign",
		"ⵠⵠ": ⵠ.ᐃⵠΔᐃⲆΔΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ᐃⵠⵠⵠ
	};
	const ⵠΔΔⲆ = ⵠⵠᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃⲆΔᐃ] = {
		name: "Pumpkin Seed",
		"ⵠⵠ": ⵠ.ⵠⵠΔΔΔⲆᐃ,
		"ⵠΔΔⵠ": ⵠⵠΔΔ,
		"ΔⲆᐃⲆ": 0
	};
	const ΔⲆⲆᐃΔΔΔ = ⲆⵠᐃΔᐃᐃⵠ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⵠᐃᐃⲆ] = {
		name: "Garlic Seed",
		"ⵠⵠ": ⵠ.ⲆᐃⲆΔᐃΔⲆ,
		"ⵠΔΔⵠ": ⲆⲆᐃⲆ,
		"ΔⲆᐃⲆ": ⲆⲆᐃⲆ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃⲆⵠΔ] = {
		name: "Thorbushes Seed",
		"ⵠⵠ": ⵠ.ⵠΔᐃΔΔⲆⵠ,
		"ⵠΔΔⵠ": ⲆⲆᐃ,
		"ΔⲆᐃⲆ": 0
	};
	const ᐃⲆⲆⲆᐃ = ⲆⲆⲆΔᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆΔⲆⵠ] = {
		name: "Roof",
		"ⵠⵠ": ⵠ.ᐃᐃⲆⵠⲆⲆⲆ,
		"ⵠΔΔⵠ": ⲆⵠΔΔ,
		"ΔⲆᐃⲆ": Δⵠᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔⲆⲆΔ] = {
		name: "Crab Crown",
		"ⵠⵠ": ⵠ.ⲆΔΔⲆⵠΔᐃ,
		"ⵠΔΔⵠ": ⵠⵠⵠ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔⵠⲆᐃ] = {
		name: "Carrot Seed",
		"ⵠⵠ": ⵠ.ΔᐃⵠⵠⲆΔⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃⲆΔⵠ] = {
		name: "Tomato Seed",
		"ⵠⵠ": ⵠ.ⵠⵠⵠΔⵠᐃΔ,
		"ⵠΔΔⵠ": ΔᐃⲆⲆ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔⵠⲆⲆⲆ] = {
		name: "Watermelon Seed",
		"ⵠⵠ": ⵠ.ⵠⵠΔᐃⲆΔᐃ,
		"ⵠΔΔⵠ": ⵠⵠⵠ,
		"ΔⲆᐃⲆ": 0
	};
	const ᐃⵠⲆᐃᐃⲆΔ = ⲆⲆⲆⵠΔⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃᐃΔⲆ] = {
		name: "Aloe Vera Seed",
		"ⵠⵠ": ⵠ.ΔⲆⵠΔⲆΔΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠΔⵠⲆ] = {
		name: "Cap",
		"ⵠⵠ": ⵠ.ΔⵠᐃⵠⵠⵠΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ⲆᐃⲆᐃᐃ = ⲆΔⵠΔΔ;
	const ⲆⵠⲆⵠⵠⲆⲆ = ΔⲆΔⵠᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔⲆᐃⲆ] = {
		name: "Turban",
		"ⵠⵠ": ⵠ.ⵠΔΔⵠⲆΔⲆ,
		"ⵠΔΔⵠ": ⵠΔⵠᐃ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆⲆⲆⲆ] = {
		name: "Pilot Helmet",
		"ⵠⵠ": ⵠ.ΔᐃΔᐃⲆⲆⵠ,
		"ⵠΔΔⵠ": ⲆⲆᐃ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆⲆⵠᐃ] = {
		name: ᐃ[484],
		"ⵠⵠ": ⵠ.ⲆⵠᐃⵠΔΔⲆ,
		"ⵠΔΔⵠ": ⲆⲆᐃⲆ,
		"ΔⲆᐃⲆ": 0
	};
	const ΔΔΔΔᐃⵠⲆ = ⲆⲆⲆⲆᐃ;
	const ᐃⲆΔⵠⵠ = ΔⵠΔᐃⵠ;
	const ⲆⵠⵠΔᐃ = ⲆᐃⲆⲆΔ;
	ⵠⵠⲆⵠ[ΔⲆ.Ⲇᐃⵠⵠᐃ] = {
		name: ᐃ[484],
		"ⵠⵠ": ⵠ.ⲆΔⵠΔᐃⵠΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⵠᐃᐃ
	};
	const ⲆΔⲆⲆⲆΔⲆ = ᐃⵠⲆⲆΔ;
	const ⵠⲆᐃᐃΔⵠⵠᐃⲆ = 16352759;

	function ΔⲆⲆⵠᐃⲆΔ(ᐃΔᐃⲆᐃ) {
		const ⵠⲆᐃᐃΔⵠⵠᐃⲆ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]];
		const ᐃⵠᐃΔ = ⵠⲆᐃᐃΔⵠⵠᐃⲆ;
		const ᐃⵠᐃᐃⵠⲆΔ = function() {
			ⵠⲆᐃᐃΔⵠⵠᐃⲆ(ᐃⵠᐃᐃⵠⲆΔ, 4965);
			ᐃⵠᐃΔ(ᐃⵠᐃᐃⵠⲆΔ, 7161)
		};
		ᐃⵠᐃᐃⵠⲆΔ()
	}
	const ᐃΔᐃⲆᐃ = ΔⲆⲆⵠᐃⲆΔ + ";" + "let ᐃΔᐃⲆᐃ = " + ΔⲆⲆⵠᐃⲆΔ + ";";
	const ᐃⵠᐃΔ = ᐃΔᐃⲆᐃ + "let ᐃⵠᐃᐃⵠⲆΔ = 12351501; try { ᐃⵠᐃᐃⵠⲆΔ = ΔⲆⲆⵠᐃⲆΔ; } catch (ⵠΔⵠΔᐃⵠⵠ) { ᐃΔᐃⲆᐃ (); };";
	ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]](ᐃⵠᐃΔ, 0);
	ⵠⵠⲆⵠ[ΔⲆ.ᐃΔᐃⵠᐃ] = {
		name: ᐃ[484],
		"ⵠⵠ": ⵠ.ⲆⵠⲆΔᐃΔᐃ,
		"ⵠΔΔⵠ": ⵠⵠⵠ,
		"ΔⲆᐃⲆ": 1
	};
	const ⲆᐃΔⲆⵠ = ⵠⲆⲆⵠ;
	const ᐃΔΔⲆ = ΔⲆⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.Δⵠⵠⵠᐃ] = {
		name: ᐃ[484],
		"ⵠⵠ": ⵠ.ⵠᐃⵠᐃᐃⲆᐃ,
		"ⵠΔΔⵠ": ⵠⵠⲆΔ,
		"ΔⲆᐃⲆ": 1
	};
	const ΔⲆⵠᐃⲆⲆⵠ = ⲆΔⵠⵠⵠᐃᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆᐃᐃΔⵠ] = {
		name: ᐃ[484],
		"ⵠⵠ": ⵠ.ⲆⲆΔᐃⲆⲆᐃ,
		"ⵠΔΔⵠ": ⵠᐃΔ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆᐃΔⵠ] = {
		name: ᐃ[484],
		"ⵠⵠ": ⵠ.ᐃΔΔⵠⵠⵠⵠ,
		"ⵠΔΔⵠ": ᐃⲆΔ,
		"ΔⲆᐃⲆ": 1
	};
	const ⵠⵠΔⲆ = Ⲇⵠᐃᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔⵠᐃᐃ] = {
		name: "Pitchfork",
		"ⵠⵠ": ⵠ.ⲆΔΔⵠⵠᐃⲆ,
		"ⵠΔΔⵠ": ᐃⲆᐃ,
		"ΔⲆᐃⲆ": 1
	};
	const ΔⲆⲆⲆⲆΔᐃ = ΔⵠⲆᐃⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔΔᐃⵠ] = {
		name: "Wood Door Spike",
		"ⵠⵠ": ⵠ.ΔΔⲆΔⵠⲆᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠⲆⵠⵠ] = {
		name: "Stone Door Spike",
		"ⵠⵠ": ⵠ.ⲆⲆΔᐃᐃⲆⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆΔⵠΔⲆ] = {
		name: "Gold Door Spike",
		"ⵠⵠ": ⵠ.ΔᐃⲆΔΔⲆΔ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": ΔΔⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃⵠⵠᐃ] = {
		name: "Diamond Door Spike",
		"ⵠⵠ": ⵠ.ⲆᐃᐃΔᐃⵠⵠ,
		"ⵠΔΔⵠ": ΔᐃⲆⲆ,
		"ΔⲆᐃⲆ": ⲆⵠΔΔ
	};
	ⵠⵠⲆⵠ[ΔⲆ.Ⲇᐃⵠᐃᐃ] = {
		name: "Amethyst Door Spike",
		"ⵠⵠ": ⵠ.ⲆᐃΔᐃᐃⵠⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ΔᐃⵠⲆ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠΔᐃΔⵠ] = {
		name: "Diamond Fire Protection ",
		"ⵠⵠ": ⵠ.ⵠᐃΔᐃᐃⵠΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃΔᐃⲆ] = {
		name: "Amethyst Fire Protection ",
		"ⵠⵠ": ⵠ.ⲆΔⲆⵠⲆⵠΔ,
		"ⵠΔΔⵠ": ᐃⲆᐃ,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃⵠⵠⲆ] = {
		name: "Amethyst Fire Protection ",
		"ⵠⵠ": ⵠ.ΔⵠᐃᐃᐃΔⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔΔᐃᐃⲆ] = {
		name: "Reidite Sword",
		"ⵠⵠ": ⵠ.ΔⲆᐃΔⵠᐃΔ,
		"ⵠΔΔⵠ": ⵠⵠΔΔ,
		"ΔⲆᐃⲆ": Δⵠᐃ
	};
	const ⲆΔⵠⲆᐃΔᐃ = ⲆⲆⲆⲆᐃⲆΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃⵠᐃⲆ] = {
		name: "Reidite Spear",
		"ⵠⵠ": ⵠ.ⵠⵠᐃΔᐃⵠⲆ,
		"ⵠΔΔⵠ": ᐃⲆᐃ,
		"ΔⲆᐃⲆ": 1
	};
	const ΔⲆᐃΔΔ = ⲆⲆⵠⵠΔ;
	const ΔΔᐃⵠⲆ = ᐃⲆᐃⲆⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⵠⵠⵠΔ] = {
		name: "Reidite Helmet",
		"ⵠⵠ": ⵠ.ΔⵠⲆΔᐃⵠⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆᐃⲆΔ] = {
		name: "Reidite Door Spike",
		"ⵠⵠ": ⵠ.ⲆᐃⵠⲆΔⵠᐃ,
		"ⵠΔΔⵠ": Ⲇⵠᐃ,
		"ΔⲆᐃⲆ": 1
	};
	const ᐃⵠᐃᐃ = ΔᐃⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃΔΔⲆ] = {
		name: "Reidite Door",
		"ⵠⵠ": ⵠ.ᐃᐃᐃⵠⲆᐃⲆ,
		"ⵠΔΔⵠ": ⲆⲆΔ,
		"ΔⲆᐃⲆ": ΔᐃⵠⲆ
	};
	const ⲆⲆᐃΔⵠᐃⲆ = ᐃᐃᐃΔⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⲆΔᐃΔ] = {
		name: "Reidite Spike",
		"ⵠⵠ": ⵠ.ⵠⲆⲆⵠΔⵠⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 1
	};
	const ⵠΔΔᐃ = ⵠⵠΔⲆ;
	const ΔⲆᐃΔᐃ = ᐃⲆⲆⲆᐃ;
	const ⵠᐃⲆᐃΔⵠⵠ = ⲆⵠⲆⵠΔⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔΔⵠᐃΔ] = {
		name: "Reidite Wall",
		"ⵠⵠ": ⵠ.ⲆⵠⵠⲆⲆⵠⵠ,
		"ⵠΔΔⵠ": ⵠᐃⵠ,
		"ΔⲆᐃⲆ": ᐃⵠⵠⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃⲆΔⵠᐃ] = {
		name: "Reidite pick",
		"ⵠⵠ": ⵠ.ᐃⲆⲆⵠΔⵠⵠ,
		"ⵠΔΔⵠ": ⵠΔⵠᐃ,
		"ΔⲆᐃⲆ": ⲆⲆᐃⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ᐃᐃⵠⲆΔ] = {
		name: "Boat",
		"ⵠⵠ": ⵠ.ΔⵠΔⲆⲆⵠⲆ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⲆⲆⲆᐃ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⲆⲆⲆⵠ] = {
		name: "Sled",
		"ⵠⵠ": ⵠ.ⲆᐃΔᐃⲆᐃᐃ,
		"ⵠΔΔⵠ": Δⵠⵠ,
		"ΔⲆᐃⲆ": ⲆⲆᐃⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆⵠⵠⲆ] = {
		name: "Saddle",
		"ⵠⵠ": ⵠ.ᐃΔⵠΔⲆΔΔ,
		"ⵠΔΔⵠ": Δⵠⵠ,
		"ΔⲆᐃⲆ": ⲆⲆⵠ
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⵠᐃΔⲆᐃ] = {
		name: "Mount Boar",
		"ⵠⵠ": ⵠ.ⲆΔΔᐃⲆⲆᐃ,
		"ⵠΔΔⵠ": ΔᐃⲆⲆ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⵠⵠⲆΔ] = {
		name: "Mount King Crab",
		"ⵠⵠ": ⵠ.ΔΔⵠⲆΔⲆᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ΔⲆᐃᐃⵠ] = {
		name: "Mount Baby Dragon",
		"ⵠⵠ": ⵠ.ⲆΔⵠΔⲆΔⵠ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": Δⵠⵠ
	};
	const ⵠᐃⵠⵠ = ⵠⵠⲆᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⵠⵠⲆΔΔ] = {
		name: "Mount Baby Lava",
		"ⵠⵠ": ⵠ.ⲆⵠΔⵠΔᐃⵠ,
		"ⵠΔΔⵠ": Ⲇⵠᐃ,
		"ΔⲆᐃⲆ": 0
	};
	const ΔΔΔⵠ = ᐃᐃᐃᐃΔ;
	ⵠⵠⲆⵠ[ΔⲆ.ΔᐃⲆΔᐃ] = {
		name: "Mount Hawk",
		"ⵠⵠ": ⵠ.ᐃΔΔᐃⲆⲆΔ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": 0
	};
	const ᐃⲆᐃⵠⲆΔΔ = ᐃᐃⵠⲆΔⲆᐃ;
	const ΔᐃⵠΔⵠ = ⲆⵠΔᐃⵠⵠΔ;
	const ⵠᐃⵠΔᐃ = ⲆⵠⲆΔᐃ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⵠⲆΔⵠ] = {
		name: "Plane",
		"ⵠⵠ": ⵠ.ⲆᐃΔⲆᐃⲆΔ,
		"ⵠΔΔⵠ": ΔᐃⲆⲆ,
		"ΔⲆᐃⲆ": 0
	};
	const ΔΔᐃΔΔᐃⲆ = ᐃⲆⲆⲆⵠⵠⲆ;
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⲆⲆᐃΔ] = {
		name: "Pitchfork 2",
		"ⵠⵠ": ⵠ.ᐃⵠⵠΔΔⲆⲆ,
		"ⵠΔΔⵠ": ⵠⵠᐃ,
		"ΔⲆᐃⲆ": 0
	};
	ⵠⵠⲆⵠ[ΔⲆ.ⲆⲆⵠⵠⵠ] = {
		name: "Baby Mammoth",
		"ⵠⵠ": ⵠ.ΔΔΔⲆΔⲆᐃ,
		"ⵠΔΔⵠ": 0,
		"ΔⲆᐃⲆ": ⵠᐃΔ
	};
	var ΔᐃΔΔᐃᐃΔ = ⵠⵠᐃⲆᐃ;
	const ⲆⲆⲆⲆΔ = ⵠΔⵠΔⵠ;
	const ΔⵠⲆⲆ = ᐃⲆⵠᐃ;
	var ᐃⵠᐃⵠⵠ = [{
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 25],
			[ΔⲆ.ⵠΔⵠΔ, ΔⲆⵠⵠ]
		],
		w: 0,
		f: ᐃⲆΔ,
		"ⵠΔⲆ": ⵠᐃⵠ,
		e: 0,
		id: ᐃⵠⵠ.ΔⲆⲆΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⲆⲆΔᐃ,
		time: ⵠⵠⵠⲆ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ΔⲆⲆΔᐃ, ΔᐃⵠⲆ],
			[ΔⲆ.ᐃᐃᐃⲆ, 35],
			[ΔⲆ.ⵠΔⵠΔ, 10]
		],
		w: ⵠᐃⵠ,
		f: ⵠⵠⲆΔ,
		"ⵠΔⲆ": ᐃⲆΔᐃ,
		e: 0,
		id: ᐃⵠⵠ.ᐃⲆⵠⲆᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆⵠⲆᐃ,
		time: .2,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 150],
			[ΔⲆ.ⵠΔⵠΔ, 50],
			[ΔⲆ.ⵠᐃΔⲆ, ⵠⵠⲆΔⵠ]
		],
		w: ᐃⲆⲆ,
		f: 0,
		"ⵠΔⲆ": ⵠᐃΔ,
		e: ⵠⵠⲆΔ,
		id: ᐃⵠⵠ.ΔⵠⲆⲆⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⵠⲆⲆⵠ,
		time: .05,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 20],
			[ΔⲆ.ⵠΔⵠΔ, 10]
		],
		w: ⵠΔⵠᐃ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⵠΔⵠᐃ,
		id: ᐃⵠⵠ.ΔⵠΔⲆⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⵠΔⲆⵠ,
		time: 1 / ⲆⲆⲆⵠΔ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, ΔⵠᐃⲆΔ]
		],
		w: ⵠⵠᐃ,
		f: 0,
		"ⵠΔⲆ": ⵠⵠⲆΔ,
		e: 0,
		id: ᐃⵠⵠ.ᐃᐃΔᐃⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃᐃΔᐃⵠ,
		time: .3333333333333333,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃΔᐃⵠ, 1],
			[ΔⲆ.ᐃᐃᐃⲆ, 50],
			[ΔⲆ.ⵠΔⵠΔ, ⲆⲆᐃⵠⲆⵠⵠ]
		],
		w: 1,
		f: ⲆⲆΔ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠⲆⲆⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⲆⲆⲆΔ,
		time: 1 / 8,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 40],
			[ΔⲆ.ⵠᐃΔⲆ, ⵠⵠᐃΔᐃ],
			[ΔⲆ.ⵠΔⵠΔ, 30],
			[ΔⲆ.ⵠⲆⲆⲆΔ, 1]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⵠⵠΔΔ,
		e: 0,
		id: ᐃⵠⵠ.ⵠᐃⲆᐃᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃⲆᐃᐃ,
		time: ᐃⵠᐃᐃ / Ⲇⵠᐃᐃᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠᐃ, ⵠⲆⵠΔⲆ],
			[ΔⲆ.ⵠᐃΔⲆ, 50],
			[ΔⲆ.ⵠΔⵠΔ, 80],
			[ΔⲆ.ⵠᐃⲆᐃᐃ, Δⵠᐃ]
		],
		w: ⵠⵠⵠⲆ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠᐃⵠΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃⵠΔⲆ,
		time: ⵠᐃᐃ / ⲆⵠᐃΔⲆ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠᐃ, 40],
			[ΔⲆ.ⵠᐃΔⲆ, 60],
			[ΔⲆ.ⲆⵠΔⲆ, 30],
			[ΔⲆ.ⵠᐃⵠΔⲆ, 1]
		],
		w: ⵠⵠⵠⲆ,
		f: ⲆⲆᐃⲆ,
		"ⵠΔⲆ": ⵠᐃΔ,
		e: 0,
		id: ᐃⵠⵠ.ΔΔᐃᐃᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔΔᐃᐃᐃ,
		time: ⲆⲆⲆᐃ / 60,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆⵠΔⲆ, 30],
			[ΔⲆ.ⲆΔⵠᐃ, 40],
			[ΔⲆ.ᐃⲆⵠΔ, 30],
			[ΔⲆ.ΔΔᐃᐃᐃ, 1]
		],
		w: 1,
		f: ᐃⲆΔ,
		"ⵠΔⲆ": ΔᐃⲆⲆ,
		e: ⵠΔΔⲆ,
		id: ᐃⵠⵠ.ᐃⲆΔⵠᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆΔⵠᐃ,
		time: ΔᐃⵠⲆ / 90,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 90],
			[ΔⲆ.ⵠΔⵠΔ, 50]
		],
		w: ⵠⵠⵠⲆ,
		f: ⲆⲆᐃⲆ,
		"ⵠΔⲆ": 0,
		e: ⵠΔΔⲆ,
		id: ᐃⵠⵠ.ΔᐃΔⵠⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔᐃΔⵠⲆ,
		time: ⵠⵠⵠⲆ / ΔΔⵠⲆⵠ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 160],
			[ΔⲆ.ⵠΔⵠΔ, 120],
			[ΔⲆ.ⵠᐃΔⲆ, 80],
			[ΔⲆ.ΔᐃΔⵠⲆ, 1]
		],
		w: 1,
		f: ᐃⲆΔᐃ,
		"ⵠΔⲆ": ⵠⵠⲆΔ,
		e: 0,
		id: ᐃⵠⵠ.ᐃⵠⵠΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⵠⵠΔᐃ,
		time: ⲆⲆⲆᐃ / 15,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠᐃ, 80],
			[ΔⲆ.ⵠΔⵠΔ, 200],
			[ΔⲆ.ⵠᐃΔⲆ, 150],
			[ΔⲆ.ᐃⵠⵠΔᐃ, ⲆⲆⲆᐃ]
		],
		w: 1,
		f: ⵠⵠⵠ,
		"ⵠΔⲆ": ⵠⵠΔΔ,
		e: 0,
		id: ᐃⵠⵠ.ᐃⲆᐃⵠⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆᐃⵠⵠ,
		time: .05,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠᐃ, 160],
			[ΔⲆ.ⲆⵠΔⲆ, 60],
			[ΔⲆ.ⵠᐃΔⲆ, 250],
			[ΔⲆ.ᐃⲆᐃⵠⵠ, ΔᐃⵠⲆ]
		],
		w: 1,
		f: ⵠΔⵠᐃ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠᐃᐃᐃⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃᐃᐃⵠ,
		time: ⵠᐃᐃ / 60,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆⵠΔⲆ, 160],
			[ΔⲆ.ᐃⲆⵠΔ, 60],
			[ΔⲆ.ⲆΔⵠᐃ, 250],
			[ΔⲆ.ⵠᐃᐃᐃⵠ, 1]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⵠΔΔⲆ,
		id: ᐃⵠⵠ.ᐃᐃⵠᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃᐃⵠᐃΔ,
		time: .011111111111111112,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃⵠᐃΔ, 1],
			[ΔⲆ.ⵠⲆΔᐃⵠ, 1],
			[ΔⲆ.ᐃⵠⵠΔΔ, 1],
			[ΔⲆ.ⵠⵠⵠᐃΔ, ᐃⲆᐃⲆⲆ],
			[ΔⲆ.ⲆⵠΔⲆ, ⲆⲆⵠΔΔ]
		],
		w: ⵠⵠⵠⲆ,
		f: 1,
		"ⵠΔⲆ": ⵠᐃΔ,
		e: Δⵠⵠ,
		id: ᐃⵠⵠ.ΔΔᐃⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔΔᐃⲆΔ,
		time: 1 / 120,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 30],
			[ΔⲆ.ⵠΔⵠΔ, 15]
		],
		w: 1,
		f: ⵠⵠⵠ,
		"ⵠΔⲆ": ⵠΔΔⲆ,
		e: Δⵠⵠ,
		id: ᐃⵠⵠ.ᐃⵠⵠⵠⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⵠⵠⵠⵠ,
		time: ΔⲆⵠⲆ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃⵠⵠⵠⵠ, ⵠᐃᐃ],
			[ΔⲆ.ⵠᐃΔⲆ, 20],
			[ΔⲆ.ⵠΔⵠΔ, 30],
			[ΔⲆ.ᐃᐃᐃⲆ, 40]
		],
		w: ⲆⲆⲆᐃ,
		f: 0,
		"ⵠΔⲆ": ⲆⲆΔ,
		e: ⵠᐃΔ,
		id: ᐃⵠⵠ.ⵠⵠⲆⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⵠⲆⲆΔ,
		time: .1,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠⵠⲆⲆΔ, Δⵠᐃ],
			[ΔⲆ.ⲆΔⵠᐃ, 20],
			[ΔⲆ.ⵠᐃΔⲆ, 50],
			[ΔⲆ.ⵠΔⵠΔ, 80]
		],
		w: 1,
		f: Δⵠⵠ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠᐃᐃΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃᐃΔⵠ,
		time: ᐃⵠᐃᐃ / ⲆΔᐃΔⵠ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠᐃᐃΔⵠ, ⲆⵠΔΔ],
			[ΔⲆ.ⵠᐃΔⲆ, 60],
			[ΔⲆ.ⲆⵠΔⲆ, 30],
			[ΔⲆ.ⲆΔⵠᐃ, 40]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ᐃⲆΔ,
		e: ᐃⲆΔᐃ,
		id: ᐃⵠⵠ.ⲆΔⵠᐃⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔⵠᐃⲆ,
		time: ⲆⲆⲆᐃ / 40,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 50]
		],
		w: 1,
		f: Δⵠⵠ,
		"ⵠΔⲆ": ⵠᐃⵠ,
		e: 0,
		id: ᐃⵠⵠ.ᐃⲆⲆⲆⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆⲆⲆⵠ,
		time: ⲆⵠⲆ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃⲆⲆⲆⵠ, 1]
		],
		w: ⵠΔΔⲆ,
		f: ⲆⲆᐃ,
		"ⵠΔⲆ": ⵠⵠⵠⲆ,
		e: ⲆⲆΔ,
		id: ᐃⵠⵠ.ᐃᐃⲆⵠⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃᐃⲆⵠⲆ,
		time: ΔΔⵠ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 100],
			[ΔⲆ.ⵠΔⵠΔ, 50]
		],
		w: ⵠᐃᐃ,
		f: ᐃⲆΔᐃ,
		"ⵠΔⲆ": ⵠΔΔⲆ,
		e: ⵠΔⵠᐃ,
		id: ᐃⵠⵠ.ⵠΔⵠᐃᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠΔⵠᐃᐃ,
		time: .1,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠΔⵠᐃᐃ, 1],
			[ΔⲆ.ⵠΔΔⵠⵠ, ᐃΔΔⲆ]
		],
		w: ⲆⲆⵠ,
		f: ᐃⲆΔᐃ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⲆⲆⲆᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆⲆⲆᐃΔ,
		time: 1 / 60,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠⲆᐃΔᐃ, ΔⲆⲆⲆ],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 4],
			[ΔⲆ.ⵠΔⵠΔⲆ, ᐃᐃᐃᐃΔ]
		],
		w: 1,
		f: ⲆⲆᐃ,
		"ⵠΔⲆ": ⵠⵠΔΔ,
		e: ⵠⵠΔΔ,
		id: ᐃⵠⵠ.ⵠΔⲆΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠΔⲆΔᐃ,
		time: ΔⲆⵠⲆ / 15,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 40]
		],
		w: 0,
		f: 0,
		"ⵠΔⲆ": ⵠⵠΔΔ,
		e: ⲆⲆᐃ,
		id: ᐃⵠⵠ.ᐃⵠᐃⵠᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⵠᐃⵠᐃ,
		time: .2,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃⵠᐃⵠᐃ, 1],
			[ΔⲆ.ᐃᐃᐃⲆ, 60],
			[ΔⲆ.ⵠΔⵠΔ, ΔⵠΔᐃΔ]
		],
		w: ⲆⲆⵠ,
		f: ⵠΔⵠᐃ,
		"ⵠΔⲆ": Δⵠⵠ,
		e: 0,
		id: ᐃⵠⵠ.ΔⲆⵠᐃᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⲆⵠᐃᐃ,
		time: .1,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 80],
			[ΔⲆ.ⵠᐃΔⲆ, 30],
			[ΔⲆ.ⵠΔⵠΔ, 30],
			[ΔⲆ.ΔⲆⵠᐃᐃ, 1]
		],
		w: 1,
		f: ⵠᐃΔ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠⲆᐃⲆᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⲆᐃⲆᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ,
		time: 1 / ⵠⲆⵠΔⲆ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 200],
			[ΔⲆ.ⲆΔⵠᐃ, 40],
			[ΔⲆ.ⵠᐃΔⲆ, 60],
			[ΔⲆ.ⵠⲆᐃⲆᐃ, 1]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": Δⵠⵠ,
		e: ⲆⲆΔ,
		id: ᐃⵠⵠ.ⵠᐃⲆᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃⲆᐃΔ,
		time: ΔΔⵠ / 30,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆⵠΔⲆ, 40],
			[ΔⲆ.ⲆΔⵠᐃ, 80],
			[ΔⲆ.ⵠᐃΔⲆ, 90],
			[ΔⲆ.ⵠᐃⲆᐃΔ, 1]
		],
		w: ⲆⵠΔΔ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⲆΔᐃⲆⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔᐃⲆⲆ,
		time: .016666666666666666,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃⲆⵠΔ, 40],
			[ΔⲆ.ⲆⵠΔⲆ, 80],
			[ΔⲆ.ⲆΔⵠᐃ, 90],
			[ΔⲆ.ⲆΔᐃⲆⲆ, ⵠᐃᐃ]
		],
		w: 1,
		f: ᐃⲆΔ,
		"ⵠΔⲆ": 0,
		e: ⵠᐃⵠ,
		id: ᐃⵠⵠ.ᐃᐃⵠᐃⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃᐃⵠᐃⲆ,
		time: .011111111111111112,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ΔᐃⵠⵠΔ, ⲆΔᐃΔⵠ],
			[ΔⲆ.ⲆΔΔᐃΔ, ΔΔⵠ],
			[ΔⲆ.ⲆⵠΔⲆ, ΔᐃⵠΔⲆ],
			[ΔⲆ.ΔᐃⲆⵠᐃ, ⲆⵠⵠⲆ]
		],
		w: 1,
		f: ⵠⵠⵠⲆ,
		"ⵠΔⲆ": ᐃⲆⲆ,
		e: Ⲇⵠᐃ,
		id: ᐃⵠⵠ.ᐃΔΔᐃⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃΔΔᐃⵠ,
		time: ⲆⲆᐃⵠ / 120,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃΔΔᐃⵠ, ⲆⵠⲆ],
			[ΔⲆ.ΔᐃᐃΔⵠ, ⵠᐃᐃ],
			[ΔⲆ.ᐃⲆⵠΔ, Δⵠᐃⵠᐃ],
			[ΔⲆ.ᐃΔⲆⵠᐃ, ⵠⵠΔⵠ]
		],
		w: ᐃⵠᐃᐃ,
		f: ⵠⵠⵠⲆ,
		"ⵠΔⲆ": 1,
		e: 0,
		id: ᐃⵠⵠ.ΔᐃΔⲆⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔᐃΔⲆⲆ,
		time: ⲆⵠⲆ / 200,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃⵠᐃⵠᐃ, ΔⲆⵠⲆ],
			[ΔⲆ.ⵠⵠⲆᐃᐃ, 5],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 6]
		],
		w: ᐃΔΔⲆ,
		f: ⲆⲆᐃⲆ,
		"ⵠΔⲆ": 0,
		e: ⲆⲆΔ,
		id: ᐃⵠⵠ.ⵠᐃⲆΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃⲆΔᐃ,
		time: .03333333333333333,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 30]
		],
		w: 0,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⲆⲆᐃ,
		id: ᐃⵠⵠ.ⲆΔᐃⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔᐃⲆΔ,
		time: ᐃⲆⲆ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 50],
			[ΔⲆ.ⵠΔⵠΔ, 25],
			[ΔⲆ.ⲆΔᐃⲆΔ, Δⵠᐃ]
		],
		w: ΔΔⵠ,
		f: ⵠⵠⲆΔ,
		"ⵠΔⲆ": Ⲇⵠᐃ,
		e: ⵠΔΔⲆ,
		id: ᐃⵠⵠ.ⲆⲆᐃΔΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆⲆᐃΔΔ,
		time: ⲆⵠⲆ / ΔΔⵠⲆⵠ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 60],
			[ΔⲆ.ⵠᐃΔⲆ, 40],
			[ΔⲆ.ⵠΔⵠΔ, 50],
			[ΔⲆ.ⲆⲆᐃΔΔ, 1]
		],
		w: ⲆⲆᐃⵠ,
		f: 0,
		"ⵠΔⲆ": ᐃⲆΔᐃ,
		e: 0,
		id: ᐃⵠⵠ.ᐃΔⵠⵠⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃΔⵠⵠⵠ,
		time: ᐃⵠⵠⵠ / 20,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠᐃ, 40],
			[ΔⲆ.ⵠᐃΔⲆ, 60],
			[ΔⲆ.ⵠΔⵠΔ, 80],
			[ΔⲆ.ᐃΔⵠⵠⵠ, ᐃⲆⲆ]
		],
		w: ⲆⲆⵠ,
		f: ⲆⲆΔ,
		"ⵠΔⲆ": Ⲇⵠᐃ,
		e: ⲆⲆᐃ,
		id: ᐃⵠⵠ.ⲆⲆΔⲆᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆⲆΔⲆᐃ,
		time: ΔⲆⵠⲆ / 30,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠᐃ, 60],
			[ΔⲆ.ⵠᐃΔⲆ, 100],
			[ΔⲆ.ⲆⵠΔⲆ, 40],
			[ΔⲆ.ⲆⲆΔⲆᐃ, ⲆⲆᐃⵠ]
		],
		w: ᐃΔΔⲆ,
		f: 0,
		"ⵠΔⲆ": ᐃⲆᐃ,
		e: 0,
		id: ᐃⵠⵠ.ⵠⲆⲆΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⲆⲆΔⲆ,
		time: .016666666666666666,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠᐃ, ᐃⲆⲆⵠⵠⵠⲆ],
			[ΔⲆ.ⲆⵠΔⲆ, 80],
			[ΔⲆ.ᐃⲆⵠΔ, 40],
			[ΔⲆ.ⵠⲆⲆΔⲆ, ⲆⲆᐃⵠ]
		],
		w: ⵠⵠⵠⲆ,
		f: Δⵠⵠ,
		"ⵠΔⲆ": 0,
		e: ⵠⵠⲆΔ,
		id: ᐃⵠⵠ.ΔΔᐃᐃⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔΔᐃᐃⲆ,
		time: ⲆⲆⵠ / 90,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆⵠᐃΔᐃ, ᐃΔΔΔ]
		],
		w: 0,
		f: ⵠᐃᐃ,
		"ⵠΔⲆ": 0,
		e: ⲆⲆᐃⲆ,
		id: ᐃⵠⵠ.ⲆᐃⵠΔΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆᐃⵠΔΔ,
		time: ⲆⵠⲆ / ⲆΔⲆᐃᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ΔⵠⲆΔΔ, ᐃΔΔΔ]
		],
		w: ⵠⵠᐃ,
		f: ᐃⵠⵠⵠ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⲆΔⵠⲆⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔⵠⲆⵠ,
		time: ᐃⵠᐃᐃ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ΔⲆⲆᐃᐃ, ⲆⲆⲆᐃⲆ]
		],
		w: 0,
		f: 1,
		"ⵠΔⲆ": 0,
		e: Ⲇⵠᐃ,
		id: ᐃⵠⵠ.ᐃᐃⲆΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃᐃⲆΔᐃ,
		time: .2,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.Ⲇᐃᐃⵠⵠ, 8]
		],
		w: ᐃⲆᐃ,
		f: 1,
		"ⵠΔⲆ": Ⲇⵠᐃ,
		e: 0,
		id: ᐃⵠⵠ.ΔⵠᐃᐃⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⵠᐃᐃⲆ,
		time: ⵠⵠⵠⲆ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃΔΔⵠᐃ, 8]
		],
		w: 0,
		f: ⲆⲆⵠ,
		"ⵠΔⲆ": ⲆⲆᐃ,
		e: 0,
		id: ᐃⵠⵠ.ⲆᐃⲆⵠΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆᐃⲆⵠΔ,
		time: ⲆⲆⵠ / ⲆΔⲆᐃᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆⲆⲆⲆⲆ, ⲆΔⵠΔΔ]
		],
		w: 0,
		f: ᐃⵠᐃᐃ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⲆΔⵠⲆᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔⵠⲆᐃ,
		time: ΔΔⵠ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃⲆⲆᐃⲆ, 8]
		],
		w: ᐃⲆᐃ,
		f: ⲆⲆᐃⵠ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⲆᐃⲆΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆᐃⲆΔⵠ,
		time: ⵠᐃᐃ / Δᐃᐃⵠ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ΔⲆⵠⵠΔ, ΔᐃⵠⵠⲆᐃΔ]
		],
		w: 0,
		f: ⲆⵠⲆ,
		"ⵠΔⲆ": ⵠᐃⵠ,
		e: 0,
		id: ᐃⵠⵠ.ΔⵠⲆⲆⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⵠⲆⲆⲆ,
		time: .2,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠⲆΔᐃⲆ, 16]
		],
		w: 0,
		f: 1,
		"ⵠΔⲆ": 0,
		e: ᐃⲆᐃ,
		id: ᐃⵠⵠ.ΔᐃᐃΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔᐃᐃΔⲆ,
		time: ᐃⲆⲆ / ⲆΔⲆᐃᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ΔⲆⲆⵠΔ, 1]
		],
		w: 0,
		f: ⲆⵠⲆ,
		"ⵠΔⲆ": ⵠᐃΔ,
		e: ᐃⲆΔ,
		id: ᐃⵠⵠ.ⵠⵠΔΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⵠΔΔⲆ,
		time: .2,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃᐃᐃ, ᐃⵠⵠⵠ]
		],
		w: ᐃⲆΔᐃ,
		f: 1,
		"ⵠΔⲆ": ⵠᐃⵠ,
		e: ⵠⵠΔΔ,
		id: ᐃⵠⵠ.ΔᐃΔΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔᐃΔΔⵠ,
		time: 1 / ⵠᐃᐃΔ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆⵠⲆᐃᐃ, ⵠⵠⲆᐃ]
		],
		w: ᐃⲆᐃ,
		f: ΔⲆⵠⲆ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⲆᐃΔΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆᐃΔΔⲆ,
		time: ᐃⵠᐃᐃ / ⲆⲆΔΔ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆⵠⲆᐃᐃ, 3],
			[ΔⲆ.ⲆⵠᐃΔᐃ, ⲆⲆⲆᐃ]
		],
		w: 0,
		f: 1,
		"ⵠΔⲆ": 0,
		e: Ⲇⵠᐃ,
		id: ᐃⵠⵠ.ΔᐃⵠⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔᐃⵠⲆΔ,
		time: 1 / 3,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆⵠⲆᐃᐃ, 5],
			[ΔⲆ.ⲆⵠᐃΔᐃ, ᐃⵠΔⲆ],
			[ΔⲆ.ᐃΔⲆⲆⵠ, 2]
		],
		w: ⲆⲆΔ,
		f: 1,
		"ⵠΔⲆ": Δⵠⵠ,
		e: ⵠⵠⲆΔ,
		id: ᐃⵠⵠ.ᐃⵠᐃⵠΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⵠᐃⵠΔ,
		time: ᐃΔΔⲆ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃⵠⵠⲆ, ᐃᐃΔⵠ]
		],
		w: ⲆⵠⲆ,
		f: ᐃⲆᐃ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⲆⲆⵠᐃⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆⲆⵠᐃⲆ,
		time: ⵠᐃᐃ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, ΔⲆⵠⵠᐃ]
		],
		w: 1,
		f: ⵠⵠᐃ,
		"ⵠΔⲆ": ⵠⵠᐃ,
		e: ᐃⲆᐃ,
		id: ᐃⵠⵠ.ⵠⵠΔⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⵠΔⲆΔ,
		time: 1 / Δᐃᐃⵠ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠⵠΔⲆΔ, 1],
			[ΔⲆ.ⵠΔⵠΔ, 17]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⵠⵠΔΔ,
		e: 0,
		id: ᐃⵠⵠ.ᐃⵠⵠᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⵠⵠᐃΔ,
		time: ⲆⲆⲆᐃ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃⵠⵠᐃΔ, 1],
			[ΔⲆ.ⵠᐃΔⲆ, ᐃᐃᐃΔⲆ]
		],
		w: 1,
		f: ⲆⲆᐃⲆ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠⲆⵠᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⲆⵠᐃΔ,
		time: ⵠᐃᐃ / ⲆⵠⲆΔᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠⲆⵠᐃΔ, 1],
			[ΔⲆ.ⲆΔⵠᐃ, 11]
		],
		w: 1,
		f: ⵠⵠᐃ,
		"ⵠΔⲆ": ᐃⲆΔ,
		e: ⲆⲆᐃ,
		id: ᐃⵠⵠ.ΔΔⵠΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔΔⵠΔᐃ,
		time: ⲆⲆⲆᐃ / ΔΔⵠⵠ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ΔΔⵠΔᐃ, 1],
			[ΔⲆ.ⲆⵠΔⲆ, 8]
		],
		w: 1,
		f: Ⲇⵠᐃ,
		"ⵠΔⲆ": ⵠᐃΔ,
		e: 0,
		id: ᐃⵠⵠ.ᐃᐃⵠᐃᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃᐃⵠᐃᐃ,
		time: ⲆⵠⲆ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃⵠᐃᐃ, 1],
			[ΔⲆ.ᐃⲆⵠΔ, ΔΔⵠⵠ]
		],
		w: ᐃΔΔⲆ,
		f: ⲆⲆΔ,
		"ⵠΔⲆ": 0,
		e: ⵠⵠⵠ,
		id: ᐃⵠⵠ.ΔΔⵠᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔΔⵠᐃΔ,
		time: ⲆⲆᐃⵠ / ᐃⵠΔⵠ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 30]
		],
		w: ⲆⵠΔΔ,
		f: 0,
		"ⵠΔⲆ": ⲆⲆΔ,
		e: ⵠΔⵠᐃ,
		id: ᐃⵠⵠ.ⵠⲆΔⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⲆΔⲆΔ,
		time: ⵠⵠⵠⲆ / ᐃΔᐃⵠⲆ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠⲆΔⲆΔ, Δⵠᐃ],
			[ΔⲆ.ⵠΔⵠΔ, 27]
		],
		w: ⵠⵠⵠⲆ,
		f: ⵠᐃΔ,
		"ⵠΔⲆ": Δⵠⵠ,
		e: 0,
		id: ᐃⵠⵠ.ⲆᐃⵠΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆᐃⵠΔⲆ,
		time: ΔᐃⵠⲆ / ⲆΔⵠΔΔ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆᐃⵠΔⲆ, ⲆⵠⲆ],
			[ΔⲆ.ⵠᐃΔⲆ, 24]
		],
		w: Δⵠᐃ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⲆᐃΔⲆⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆᐃΔⲆⲆ,
		time: 1 / ⲆΔⵠΔΔ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆᐃΔⲆⲆ, ΔᐃⵠⲆ],
			[ΔⲆ.ⲆΔⵠᐃ, 21]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⲆⲆᐃⲆ,
		id: ᐃⵠⵠ.ΔᐃᐃⲆⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔᐃᐃⲆⲆ,
		time: .125,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ΔᐃᐃⲆⲆ, Δⵠᐃ],
			[ΔⲆ.ⲆⵠΔⲆ, ⵠᐃᐃⲆⵠⵠᐃ]
		],
		w: ⵠⵠⵠⲆ,
		f: ΔᐃⲆⲆ,
		"ⵠΔⲆ": ᐃⲆΔᐃ,
		e: 0,
		id: ᐃⵠⵠ.ⲆΔΔᐃᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔΔᐃᐃ,
		time: ⲆⲆᐃⵠ / ΔᐃⵠΔⵠ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆΔΔᐃᐃ, ΔᐃⵠⲆ],
			[ΔⲆ.ᐃⲆⵠΔ, ΔᐃᐃΔᐃ]
		],
		w: ᐃⵠⵠⵠ,
		f: 0,
		"ⵠΔⲆ": ⵠⵠΔΔ,
		e: ᐃⲆΔᐃ,
		id: ᐃⵠⵠ.ᐃᐃΔΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃᐃΔΔⲆ,
		time: ᐃⵠⵠⵠ / 8,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠⵠΔⲆΔ, 1],
			[ΔⲆ.ᐃᐃᐃⲆ, 40],
			[ΔⲆ.ⵠΔⵠΔ, 30]
		],
		w: ⵠⵠⵠⲆ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ᐃⵠΔⵠΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⵠΔⵠΔ,
		time: .05,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃⵠⵠᐃΔ, 1],
			[ΔⲆ.ⵠΔⵠΔ, 70]
		],
		w: 1,
		f: ⲆⲆᐃ,
		"ⵠΔⲆ": ᐃⲆΔᐃ,
		e: 0,
		id: ᐃⵠⵠ.ΔᐃⵠΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔᐃⵠΔᐃ,
		time: ᐃΔΔⲆ / ⵠⲆⵠΔⲆ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠⲆⵠᐃΔ, 1],
			[ΔⲆ.ⵠᐃΔⲆ, 40],
			[ΔⲆ.ⵠΔⵠΔ, 30]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⲆⲆᐃⲆ,
		id: ᐃⵠⵠ.ΔⲆⲆᐃⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⲆⲆᐃⲆ,
		time: .05,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ΔΔⵠΔᐃ, ⲆⲆᐃⵠ],
			[ΔⲆ.ⲆΔⵠᐃ, 40],
			[ΔⲆ.ⵠΔⵠΔ, 30]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⵠᐃⵠ,
		e: 0,
		id: ᐃⵠⵠ.ᐃⲆΔΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆΔΔᐃ,
		time: ᐃⵠⵠⵠ / 20,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃⵠᐃᐃ, ᐃⲆⲆ],
			[ΔⲆ.ⲆⵠΔⲆ, 40],
			[ΔⲆ.ⵠΔⵠΔ, 30]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": Δⵠⵠ,
		e: 0,
		id: ᐃⵠⵠ.ΔⲆⲆⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⲆⲆⲆΔ,
		time: ᐃⵠⵠⵠ / ⵠⵠᐃΔᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ΔΔⵠᐃΔ, ⲆⲆⲆᐃ],
			[ΔⲆ.ᐃⲆⵠΔ, 40],
			[ΔⲆ.ⵠᐃΔⲆ, 30]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⲆⲆΔᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆⲆΔᐃΔ,
		time: .05,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠⲆΔⲆΔ, 1],
			[ΔⲆ.ᐃᐃᐃⲆ, 80],
			[ΔⲆ.ⵠΔⵠΔ, 60]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⲆⲆᐃⲆ,
		e: 0,
		id: ᐃⵠⵠ.ⵠΔΔᐃⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠΔΔᐃⵠ,
		time: 1 / ΔΔΔΔᐃⵠⲆ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆᐃⵠΔⲆ, ᐃⵠᐃᐃ],
			[ΔⲆ.ⵠΔⵠΔ, 140]
		],
		w: ᐃⲆⲆ,
		f: ⵠⵠⲆΔ,
		"ⵠΔⲆ": ⵠΔⵠᐃ,
		e: ⵠⵠᐃ,
		id: ᐃⵠⵠ.ᐃⵠⲆⵠⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⵠⲆⵠⵠ,
		time: 1 / ΔⲆⵠⵠᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆᐃΔⲆⲆ, 1],
			[ΔⲆ.ⵠᐃΔⲆ, 80],
			[ΔⲆ.ⵠΔⵠΔ, 60]
		],
		w: ⵠᐃᐃ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⵠᐃⵠ,
		id: ᐃⵠⵠ.ⲆΔⵠΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔⵠΔⲆ,
		time: .05,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ΔᐃᐃⲆⲆ, 1],
			[ΔⲆ.ⲆΔⵠᐃ, 80],
			[ΔⲆ.ⵠΔⵠΔ, 60]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠᐃⵠⵠᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃⵠⵠᐃ,
		time: ᐃⵠᐃᐃ / ⵠⲆⵠΔⲆ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⲆΔΔᐃᐃ, Δⵠᐃ],
			[ΔⲆ.ⲆⵠΔⲆ, 80],
			[ΔⲆ.ⵠΔⵠΔ, 60]
		],
		w: ΔΔⵠ,
		f: ⲆⲆΔ,
		"ⵠΔⲆ": ⵠⵠⲆΔ,
		e: ⵠⵠΔΔ,
		id: ᐃⵠⵠ.Ⲇᐃⵠᐃᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.Ⲇᐃⵠᐃᐃ,
		time: ⵠⵠⵠⲆ / 20,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃΔΔⲆ, 1],
			[ΔⲆ.ᐃⲆⵠΔ, 80],
			[ΔⲆ.ⵠᐃΔⲆ, 60]
		],
		w: ᐃΔΔⲆ,
		f: 0,
		"ⵠΔⲆ": Ⲇⵠᐃ,
		e: 0,
		id: ᐃⵠⵠ.ΔⲆᐃⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⲆᐃⲆΔ,
		time: .05,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 25],
			[ΔⲆ.ⵠᐃΔⲆ, ᐃᐃⲆⵠ]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ᐃⲆΔ,
		e: 0,
		id: ᐃⵠⵠ.ᐃⵠⵠΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⵠⵠΔⵠ,
		time: Δⵠᐃ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ⵠⲆᐃΔᐃ, 1],
			[ΔⲆ.ΔⵠΔⲆΔ, ⵠᐃᐃ],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, ᐃⲆⵠᐃ]
		],
		w: ᐃⵠᐃᐃ,
		f: 0,
		"ⵠΔⲆ": ⲆⲆᐃ,
		e: ᐃⲆΔᐃ,
		id: ᐃⵠⵠ.ΔᐃᐃⲆᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔᐃᐃⲆᐃ,
		time: .2,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⵠⲆᐃΔᐃ, 5],
			[ΔⲆ.ᐃⵠⵠⲆᐃ, 20],
			[ΔⲆ.ΔᐃⵠⵠΔ, 5],
			[ΔⲆ.ΔⵠΔⲆΔ, 5]
		],
		w: ⵠⵠⵠⲆ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠᐃᐃΔΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃᐃΔΔ,
		time: ᐃⵠᐃᐃ / 30,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.Δⵠⵠᐃⵠ, 1],
			[ΔⲆ.ΔⵠⵠΔⲆ, 8],
			[ΔⲆ.ⵠΔᐃᐃᐃ, ᐃΔᐃⵠⲆ],
			[ΔⲆ.ᐃⵠⵠⲆᐃ, 8],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 6]
		],
		w: 1,
		f: Δⵠⵠ,
		"ⵠΔⲆ": ΔᐃⲆⲆ,
		e: 0,
		id: ᐃⵠⵠ.ᐃⲆⲆⲆⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆⲆⲆⲆ,
		time: ᐃΔΔⲆ / 60,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ΔⵠΔⲆΔ, ⵠᐃᐃ],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 2]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠΔᐃΔΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠΔᐃΔΔ,
		time: ΔΔⵠ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔᐃΔΔ, 1],
			[ΔⲆ.ⵠΔⵠΔⲆ, ᐃⵠΔⵠ],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, ᐃΔΔΔⲆ]
		],
		w: ⲆⵠΔΔ,
		f: ᐃⲆΔᐃ,
		"ⵠΔⲆ": ⵠⵠⲆΔ,
		e: ⵠΔⵠᐃ,
		id: ᐃⵠⵠ.ᐃΔⲆΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃΔⲆΔⲆ,
		time: ⲆⵠΔΔ / 12,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ᐃΔⲆΔⲆ, 1],
			[ΔⲆ.ΔⲆΔⵠΔ, 5],
			[ΔⲆ.ΔᐃⵠⵠΔ, 4]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⲆⲆΔ,
		e: 0,
		id: ᐃⵠⵠ.ⵠΔⵠⲆⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠΔⵠⲆⵠ,
		time: .03333333333333333,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔⵠⲆⵠ, ⵠᐃᐃ],
			[ΔⲆ.ΔⲆΔⵠΔ, 5],
			[ΔⲆ.ⲆᐃⲆⲆⵠ, ᐃᐃᐃⲆⵠ],
			[ΔⲆ.ΔᐃⵠⵠΔ, ⵠΔᐃⲆ]
		],
		w: Δⵠᐃ,
		f: ⵠᐃΔ,
		"ⵠΔⲆ": ⲆⲆΔ,
		e: 0,
		id: ᐃⵠⵠ.ⲆⵠⵠΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆⵠⵠΔⲆ,
		time: ⵠᐃᐃ / 50,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 50]
		],
		w: Δⵠⵠ,
		f: 0,
		"ⵠΔⲆ": Ⲇⵠᐃ,
		e: 0,
		id: ᐃⵠⵠ.ⲆΔᐃᐃᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔᐃᐃᐃ,
		time: ᐃΔΔⲆ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔⵠΔ, 75],
			[ΔⲆ.ᐃᐃᐃⲆ, 75],
			[ΔⲆ.ⲆΔᐃᐃᐃ, ⲆⵠⲆ]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ᐃⲆΔ,
		e: 0,
		id: ᐃⵠⵠ.ⵠΔⵠΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠΔⵠΔᐃ,
		time: 1 / 10,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔⵠΔ, 90],
			[ΔⲆ.ᐃᐃᐃⲆ, 90],
			[ΔⲆ.ⵠᐃΔⲆ, 90],
			[ΔⲆ.ⵠΔⵠΔᐃ, 1]
		],
		w: ᐃⵠⵠⵠ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ᐃᐃΔᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃᐃΔᐃΔ,
		time: 1 / ⵠⵠᐃΔᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔⵠΔ, 100],
			[ΔⲆ.ⵠᐃΔⲆ, ᐃⲆⵠⵠΔ],
			[ΔⲆ.ⲆΔⵠᐃ, 100],
			[ΔⲆ.ᐃᐃΔᐃΔ, 1]
		],
		w: ⲆⲆᐃⵠ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⲆⲆΔ,
		id: ᐃⵠⵠ.ⵠⵠᐃᐃⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⵠᐃᐃⵠ,
		time: .03333333333333333,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⲆⵠΔⲆ, 80],
			[ΔⲆ.ⵠᐃΔⲆ, 150],
			[ΔⲆ.ⲆΔⵠᐃ, 120],
			[ΔⲆ.ⵠⵠᐃᐃⵠ, 1]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⲆⲆΔ,
		id: ᐃⵠⵠ.ⲆᐃᐃᐃⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆᐃᐃᐃⲆ,
		time: .016666666666666666,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ᐃⲆⵠΔ, 80],
			[ΔⲆ.ⲆΔⵠᐃ, 150],
			[ΔⲆ.ⲆⵠΔⲆ, 120],
			[ΔⲆ.ⲆᐃᐃᐃⲆ, ⲆⵠⲆ]
		],
		w: ΔΔⵠ,
		f: ΔᐃⵠⲆ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ᐃⵠⵠⵠΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⵠⵠⵠΔ,
		time: ⲆⲆⲆᐃ / 90,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⵠⵠⵠᐃΔ, ⵠⵠΔⵠ],
			[ΔⲆ.ⲆΔⵠᐃ, 40],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, ΔΔⲆΔ]
		],
		w: ΔⲆⵠⲆ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⲆⲆᐃΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆⲆᐃΔᐃ,
		time: 1 / 20,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⲆⲆᐃΔᐃ, ⲆⲆⲆᐃ],
			[ΔⲆ.ⵠᐃΔⲆ, 80],
			[ΔⲆ.ᐃⵠⵠΔΔ, ⲆⲆⲆᐃ],
			[ΔⲆ.ⲆⵠΔⲆ, ⲆΔⲆⲆⵠ]
		],
		w: 1,
		f: ΔᐃⲆⲆ,
		"ⵠΔⲆ": ⲆⲆᐃⲆ,
		e: 0,
		id: ᐃⵠⵠ.ⲆⲆⵠⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆⲆⵠⲆΔ,
		time: 1 / 90,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ᐃⲆⵠⲆⲆ, ᐃᐃⲆⵠᐃ],
			[ΔⲆ.ⲆΔⵠᐃ, 50],
			[ΔⲆ.ΔᐃⵠⵠΔ, ⵠᐃⵠΔᐃ]
		],
		w: ⲆⵠⲆ,
		f: ⲆⵠΔΔ,
		"ⵠΔⲆ": ΔᐃⲆⲆ,
		e: ⵠᐃΔ,
		id: ᐃⵠⵠ.ⵠΔᐃΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠΔᐃΔⵠ,
		time: .05,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔᐃΔⵠ, ⲆⲆⲆᐃ],
			[ΔⲆ.ᐃⲆⵠⲆⲆ, ᐃᐃᐃⲆⵠ],
			[ΔⲆ.ⲆⵠΔⲆ, 50]
		],
		w: ⲆⵠΔΔ,
		f: ΔᐃⵠⲆ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ΔᐃΔᐃⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔᐃΔᐃⲆ,
		time: .016666666666666666,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ΔᐃΔᐃⲆ, 1],
			[ΔⲆ.ᐃⲆⵠⲆⲆ, 15],
			[ΔⲆ.ⲆⵠΔⲆ, 50],
			[ΔⲆ.ᐃⲆⵠΔ, 50]
		],
		w: ⲆⲆⵠ,
		f: 1,
		"ⵠΔⲆ": ⵠᐃⵠ,
		e: ⵠⵠⵠ,
		id: ᐃⵠⵠ.ⵠᐃⵠⵠⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃⵠⵠⲆ,
		time: .011111111111111112,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃⵠⵠⲆ, ΔⲆΔⲆ],
			[ΔⲆ.ⲆᐃⲆⲆᐃ, ⲆΔⲆΔ]
		],
		w: 1,
		f: ⲆⲆᐃ,
		"ⵠΔⲆ": ⲆⲆΔ,
		e: ᐃⲆᐃ,
		id: ᐃⵠⵠ.ᐃⵠΔⵠⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⵠΔⵠⲆ,
		time: .06666666666666667,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ᐃⵠΔⵠⲆ, ᐃⵠⵠⵠ],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, ⵠⲆⵠⵠⵠ],
			[ΔⲆ.ⲆᐃⲆⲆᐃ, ᐃᐃⵠΔ],
			[ΔⲆ.ⵠΔᐃᐃᐃ, ⵠⵠΔⵠΔⲆᐃ],
			[ΔⲆ.ᐃⵠⵠⲆᐃ, ⲆⲆⲆΔ]
		],
		w: 1,
		f: ⲆⲆᐃ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⲆΔⲆᐃⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔⲆᐃⲆ,
		time: ΔᐃⵠⲆ / 150,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 6],
			[ΔⲆ.ⵠΔⵠΔⲆ, 5]
		],
		w: ΔΔⵠ,
		f: Ⲇⵠᐃ,
		"ⵠΔⲆ": 0,
		e: ᐃⲆᐃ,
		id: ᐃⵠⵠ.ⲆⵠⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆⵠⲆΔ,
		time: .06666666666666667,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, ⵠⲆᐃⲆⵠ]
		],
		w: 0,
		f: ⲆⲆⵠ,
		"ⵠΔⲆ": 0,
		e: ⵠᐃΔ,
		id: ᐃⵠⵠ.ⵠⲆᐃΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⲆᐃΔᐃ,
		time: ΔΔⵠ / 3,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠᐃ, Δⵠᐃ],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 1]
		],
		w: ΔⲆⵠⲆ,
		f: 0,
		"ⵠΔⲆ": ᐃⲆΔ,
		e: Δⵠⵠ,
		id: ᐃⵠⵠ.ΔᐃⵠⵠΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔᐃⵠⵠΔ,
		time: 1 / 3,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ⵠᐃΔⲆ, ⲆΔᐃⵠΔ]
		],
		w: Δⵠᐃ,
		f: Ⲇⵠᐃ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⲆΔᐃⵠⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔᐃⵠⵠ,
		time: .2,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ⵠᐃΔⲆ, 250]
		],
		w: 1,
		f: ΔᐃⲆⲆ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ᐃⵠᐃΔΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⵠᐃΔΔ,
		time: .016666666666666666,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 50]
		],
		w: ᐃⵠⵠⵠ,
		f: 0,
		"ⵠΔⲆ": ᐃⲆΔᐃ,
		e: 0,
		id: ᐃⵠⵠ.ᐃᐃⲆⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃᐃⲆⲆΔ,
		time: 1 / ΔΔⵠⲆⵠ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, ⵠⵠᐃⲆΔⲆΔ]
		],
		w: ⵠᐃᐃ,
		f: ⲆⲆᐃⲆ,
		"ⵠΔⲆ": ᐃⲆΔ,
		e: 0,
		id: ᐃⵠⵠ.ΔⲆᐃⲆᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⲆᐃⲆᐃ,
		time: ᐃⲆⲆ / ⵠᐃⵠΔᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 30]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⵠΔΔⲆ,
		e: 0,
		id: ᐃⵠⵠ.ΔⲆΔⲆⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⲆΔⲆⵠ,
		time: ⲆⲆᐃⵠ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 120]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⲆⲆᐃ,
		e: 0,
		id: ᐃⵠⵠ.ᐃⲆΔⵠⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆΔⵠⲆ,
		time: 1 / ΔⲆΔΔΔΔᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, ᐃᐃⲆⵠΔ],
			[ΔⲆ.ⲆⵠᐃᐃΔ, ⵠⵠⲆΔⲆ]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ᐃⲆΔᐃ,
		e: 0,
		id: ᐃⵠⵠ.ΔΔΔⵠᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔΔΔⵠᐃ,
		time: 1 / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃⲆᐃⵠⲆ, 25]
		],
		w: 1,
		f: 1,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠᐃⲆⲆⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃⲆⲆⲆ,
		time: ⲆⲆⵠ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠᐃⲆⲆⲆ, ΔΔⵠ]
		],
		w: 0,
		f: 0,
		"ⵠΔⲆ": 1,
		e: ⲆⲆΔ,
		id: ᐃⵠⵠ.ⵠⲆΔᐃⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⲆΔᐃⵠ,
		time: ⵠᐃᐃ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃΔⲆⲆⵠ, ⵠⵠᐃΔᐃ],
			[ΔⲆ.ⵠᐃⲆⲆⲆ, 1]
		],
		w: ⲆⲆᐃⲆ,
		f: ᐃΔΔⲆ,
		"ⵠΔⲆ": Ⲇⵠᐃ,
		e: ⵠⵠΔΔ,
		id: ᐃⵠⵠ.ⵠΔΔⵠΔΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⲆΔᐃⵠ,
		time: ⲆⲆᐃⵠ / 10,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠᐃⲆⲆⲆ, ⵠⵠⵠⲆ]
		],
		w: ⵠᐃⵠ,
		f: ⲆⲆᐃ,
		"ⵠΔⲆ": 0,
		e: 1,
		id: ᐃⵠⵠ.ⵠᐃⲆⵠᐃⵠⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⲆΔᐃⵠ,
		time: ⲆⵠΔΔ / 3,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 60],
			[ΔⲆ.ⵠΔⵠΔ, ᐃᐃⵠⲆᐃᐃⲆ],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 2]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⵠⵠⲆΔ,
		e: 0,
		id: ᐃⵠⵠ.ⲆⲆΔⵠᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆⲆΔⵠᐃ,
		time: 1 / 10,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠᐃ, 40],
			[ΔⲆ.ⵠΔⵠΔ, 45]
		],
		w: 1,
		f: ⵠᐃⵠ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ΔⵠᐃΔΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⵠᐃΔΔ,
		time: ᐃΔΔⲆ / 20,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ΔⵠᐃΔΔ, 1],
			[ΔⲆ.ⲆⲆΔⵠΔ, 40],
			[ΔⲆ.ⵠⲆΔᐃΔ, ᐃⲆⲆ]
		],
		w: 1,
		f: 1,
		"ⵠΔⲆ": ⵠᐃᐃ,
		e: ⵠᐃⵠ,
		id: ᐃⵠⵠ.ᐃⲆⲆⵠᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆⲆⵠᐃ,
		time: .005,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 50],
			[ΔⲆ.ⵠΔⵠΔ, 100]
		],
		w: ᐃⲆⲆ,
		f: Δⵠⵠ,
		"ⵠΔⲆ": ΔᐃⲆⲆ,
		e: 0,
		id: ᐃⵠⵠ.Ⲇᐃⵠⵠᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.Ⲇᐃⵠⵠᐃ,
		time: .011111111111111112,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔⵠΔ, 60],
			[ΔⲆ.ⵠᐃΔⲆ, 120]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ᐃⲆΔᐃ,
		id: ᐃⵠⵠ.ᐃΔᐃⵠᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃΔᐃⵠᐃ,
		time: Δⵠᐃ / 90,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ⵠᐃΔⲆ, 70],
			[ΔⲆ.ⲆΔⵠᐃ, 140]
		],
		w: 1,
		f: ⲆⲆΔ,
		"ⵠΔⲆ": 0,
		e: ⲆⲆᐃ,
		id: ᐃⵠⵠ.Δⵠⵠⵠᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.Δⵠⵠⵠᐃ,
		time: ᐃⲆⲆ / 90,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠᐃ, 80],
			[ΔⲆ.ⲆⵠΔⲆ, 160]
		],
		w: 1,
		f: ᐃⲆΔᐃ,
		"ⵠΔⲆ": ⵠⵠᐃ,
		e: ⵠᐃΔ,
		id: ᐃⵠⵠ.ⲆᐃᐃΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆᐃᐃΔⵠ,
		time: ⲆⲆⵠ / 90,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ⲆⵠΔⲆ, 90],
			[ΔⲆ.ᐃⲆⵠΔ, 180]
		],
		w: ᐃⵠⵠⵠ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⵠⵠᐃ,
		id: ᐃⵠⵠ.ᐃⲆᐃΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆᐃΔⵠ,
		time: .011111111111111112,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔⵠΔ, 70]
		],
		w: ⵠᐃᐃ,
		f: Δⵠⵠ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ᐃΔⲆⲆⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃΔⲆⲆⲆ,
		time: ⲆⲆⲆᐃ / 10,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠΔⵠΔ, 70],
			[ΔⲆ.ᐃᐃᐃⲆ, 50]
		],
		w: 1,
		f: ⵠᐃΔ,
		"ⵠΔⲆ": ⵠᐃⵠ,
		e: 0,
		id: ᐃⵠⵠ.ⲆΔΔΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔΔΔᐃ,
		time: .1,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 40],
			[ΔⲆ.ⵠΔⵠΔ, 40]
		],
		w: 1,
		f: Δⵠⵠ,
		"ⵠΔⲆ": 0,
		e: ⲆⲆΔ,
		id: ᐃⵠⵠ.ᐃⵠⲆⲆⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⵠⲆⲆⵠ,
		time: Δⵠᐃ / ΔⵠΔᐃΔ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ⲆᐃΔΔⲆ, ⲆⵠΔΔ],
			[ΔⲆ.ⵠⵠΔΔⲆ, ⲆⵠⲆ]
		],
		w: 0,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ᐃⲆΔΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆΔΔⵠ,
		time: ΔᐃⵠⲆ / ᐃΔᐃⲆ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ
	}, {
		r: [
			[ΔⲆ.ΔᐃⵠⵠΔ, 30],
			[ΔⲆ.ⵠⲆⵠⵠᐃ, ΔⲆⵠⲆ],
			[ΔⲆ.ⲆⵠΔⲆ, 150],
			[ΔⲆ.ΔᐃⲆⵠᐃ, ⵠᐃᐃⵠ]
		],
		w: 1,
		f: 1,
		"ⵠΔⲆ": ⲆⲆᐃⵠ,
		e: 0,
		id: ᐃⵠⵠ.ᐃᐃᐃΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃᐃᐃΔⵠ,
		time: Δⵠᐃ / 120,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃΔⵠ, 1],
			[ΔⲆ.ΔΔⲆΔⲆ, ⵠᐃᐃ],
			[ΔⲆ.ᐃⲆⵠΔ, 150],
			[ΔⲆ.ᐃΔⲆⵠᐃ, ᐃⵠΔⲆ]
		],
		w: ΔᐃⵠⲆ,
		f: 1,
		"ⵠΔⲆ": 1,
		e: 0,
		id: ᐃⵠⵠ.ⲆᐃᐃⲆⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆᐃᐃⲆⲆ,
		time: .005555555555555556,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃΔᐃΔ, ⲆⲆⲆᐃ],
			[ΔⲆ.ⵠⵠⲆᐃᐃ, 10],
			[ΔⲆ.ΔΔⲆᐃⵠ, ⲆⲆᐃᐃⵠ],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 10]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⵠⵠⲆΔ,
		e: 0,
		id: ᐃⵠⵠ.ᐃΔⲆⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃΔⲆⲆΔ,
		time: ⲆⲆⲆᐃ / 60,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ΔᐃⵠⵠΔ, 20],
			[ΔⲆ.ⲆΔΔᐃΔ, 1],
			[ΔⲆ.ⲆⵠΔⲆ, 150],
			[ΔⲆ.ΔᐃⲆⵠᐃ, ⵠᐃᐃⵠ]
		],
		w: 1,
		f: ⲆⵠΔΔ,
		"ⵠΔⲆ": ᐃΔΔⲆ,
		e: ⵠᐃⵠ,
		id: ᐃⵠⵠ.ᐃᐃᐃⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃᐃᐃⲆΔ,
		time: ⲆⵠⲆ / 120,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆΔ, 1],
			[ΔⲆ.ΔᐃᐃΔⵠ, ⲆⲆᐃⵠ],
			[ΔⲆ.ᐃⲆⵠΔ, 150],
			[ΔⲆ.ᐃΔⲆⵠᐃ, 2]
		],
		w: ⲆⵠΔΔ,
		f: 1,
		"ⵠΔⲆ": 1,
		e: ⵠΔΔⲆ,
		id: ᐃⵠⵠ.ⵠᐃᐃⲆᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃᐃⲆᐃ,
		time: ᐃⵠⵠⵠ / 180,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 100],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 4]
		],
		w: ΔΔⵠ,
		f: ⵠΔⵠᐃ,
		"ⵠΔⲆ": Ⲇⵠᐃ,
		e: 0,
		id: ᐃⵠⵠ.ⵠᐃⲆⵠⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃⲆⵠⵠ,
		time: 1 / 20,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 30]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⵠⵠᐃ,
		id: ᐃⵠⵠ.ⲆΔᐃⲆⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔᐃⲆⵠ,
		time: ᐃⵠᐃᐃ / ΔΔⵠⲆΔ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔⵠΔ, 200],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, ⵠᐃΔᐃⲆ],
			[ΔⲆ.ᐃⵠⵠⲆᐃ, 4],
			[ΔⲆ.ⵠᐃⲆⵠⵠ, 1]
		],
		w: ⵠᐃᐃ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ΔⵠⵠⲆⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⵠⵠⲆⲆ,
		time: ΔΔⵠ / 25,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔⵠΔ, ⲆⲆⵠΔΔ],
			[ΔⲆ.ΔⵠⵠΔⲆ, ⲆⲆⲆᐃ]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⵠᐃⵠ,
		id: ᐃⵠⵠ.ᐃⲆᐃΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆᐃΔⲆ,
		time: ΔⲆⵠⲆ / ᐃⵠΔⵠ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⵠᐃΔⲆ, 200],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 12],
			[ΔⲆ.ΔⵠⵠΔⲆ, ᐃⵠⵠⲆ],
			[ΔⲆ.ᐃⵠⵠⲆᐃ, 4],
			[ΔⲆ.ΔⵠⵠⲆⲆ, ⲆⲆᐃⵠ]
		],
		w: 1,
		f: Ⲇⵠᐃ,
		"ⵠΔⲆ": ⵠⵠᐃ,
		e: 0,
		id: ᐃⵠⵠ.ⵠⵠΔᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⵠΔᐃΔ,
		time: 1 / 30,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⵠᐃΔⲆ, ᐃᐃⲆⵠΔ],
			[ΔⲆ.ᐃⵠⵠⲆᐃ, ΔⲆⵠⲆ]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⵠΔΔⲆ,
		id: ᐃⵠⵠ.ΔⵠΔΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⵠΔΔⵠ,
		time: .1,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠᐃ, 200],
			[ΔⲆ.ΔᐃⵠⵠΔ, ᐃᐃᐃⲆⵠ],
			[ΔⲆ.ΔⵠⵠΔⲆ, 8],
			[ΔⲆ.ᐃⵠⵠⲆᐃ, ⵠᐃΔᐃⲆ],
			[ΔⲆ.ⵠⵠΔᐃΔ, ᐃⵠᐃᐃ]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ᐃⲆΔ,
		id: ᐃⵠⵠ.ⵠΔᐃⵠᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠΔᐃⵠᐃ,
		time: ⲆⲆⵠ / 35,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠᐃ, ⲆⲆᐃᐃⵠ],
			[ΔⲆ.ᐃⵠⵠⲆᐃ, 1]
		],
		w: 1,
		f: ⵠᐃΔ,
		"ⵠΔⲆ": ⲆⲆᐃⲆ,
		e: 0,
		id: ᐃⵠⵠ.ΔⵠⲆⵠΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⵠⲆⵠΔ,
		time: .1,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆⵠΔⲆ, 200],
			[ΔⲆ.ΔᐃⵠⵠΔ, ⲆⲆᐃᐃⵠ],
			[ΔⲆ.ᐃⵠⵠⲆᐃ, ᐃⵠΔⵠᐃ],
			[ΔⲆ.ⵠΔᐃᐃᐃ, 8],
			[ΔⲆ.ⵠΔᐃⵠᐃ, 1]
		],
		w: ⲆⵠⲆ,
		f: ⵠΔⵠᐃ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ᐃΔᐃΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃΔᐃΔⵠ,
		time: 1 / 40,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆⵠΔⲆ, ⵠΔΔᐃᐃ],
			[ΔⲆ.ⵠΔᐃᐃᐃ, 1]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⵠⵠᐃ,
		e: ⵠⵠⲆΔ,
		id: ᐃⵠⵠ.ΔⲆᐃᐃⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⲆᐃᐃⲆ,
		time: .06666666666666667,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃⲆⵠΔ, 200],
			[ΔⲆ.ΔᐃⵠⵠΔ, 10],
			[ΔⲆ.ᐃⵠⵠΔΔ, ᐃⵠⵠⵠ],
			[ΔⲆ.ᐃΔᐃΔⵠ, ΔⲆⵠⲆ]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.Δᐃᐃⵠⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.Δᐃᐃⵠⵠ,
		time: ⵠᐃᐃ / 45,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃⲆⵠΔ, 10],
			[ΔⲆ.ⵠΔᐃᐃᐃ, ΔΔⵠ],
			[ΔⲆ.ᐃⲆⵠⲆⲆ, 1]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ᐃⲆΔᐃ,
		e: Δⵠⵠ,
		id: ᐃⵠⵠ.ⵠⲆⵠⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⲆⵠⲆΔ,
		time: ⲆⵠⲆ / ⲆᐃⲆⵠⵠ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆⲆΔⵠΔ, 200],
			[ΔⲆ.ΔᐃⵠⵠΔ, 10],
			[ΔⲆ.ⲆΔΔᐃΔ, ΔᐃⵠⲆ],
			[ΔⲆ.Δᐃᐃⵠⵠ, 1]
		],
		w: ⲆⵠⲆ,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⵠΔⵠᐃ,
		id: ᐃⵠⵠ.ᐃⲆⵠᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆⵠᐃΔ,
		time: ⲆⲆⵠ / 50,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆⲆΔⵠΔ, 10],
			[ΔⲆ.ⵠⲆΔᐃΔ, ⲆⲆⵠ]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⵠᐃⵠ,
		e: 0,
		id: ᐃⵠⵠ.ᐃⲆⵠⲆⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆⵠⲆⵠ,
		time: ⲆⲆᐃⵠ / 20,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, Δⵠᐃⵠᐃ]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⵠⵠⲆΔ,
		e: ⵠΔΔⲆ,
		id: ᐃⵠⵠ.ⲆⵠⵠⵠΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆⵠⵠⵠΔ,
		time: 1 / 25,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆⵠⵠⵠΔ, 1],
			[ΔⲆ.ⵠΔⵠΔ, ΔᐃⵠΔⲆ],
			[ΔⲆ.ᐃᐃᐃⲆ, 50]
		],
		w: ⲆⲆⲆᐃ,
		f: ⵠᐃΔ,
		"ⵠΔⲆ": ⵠᐃΔ,
		e: ⵠΔΔⲆ,
		id: ᐃⵠⵠ.ⵠΔΔᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠΔΔᐃΔ,
		time: 1 / 40,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔΔᐃΔ, 1],
			[ΔⲆ.ⵠᐃΔⲆ, 50],
			[ΔⲆ.ⵠΔⵠΔ, 50],
			[ΔⲆ.ᐃᐃᐃⲆ, 50]
		],
		w: ᐃⵠᐃᐃ,
		f: 0,
		"ⵠΔⲆ": ⲆⲆΔ,
		e: 0,
		id: ᐃⵠⵠ.ⲆΔⲆⲆᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔⲆⲆᐃ,
		time: .02,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆΔⲆⲆᐃ, ΔΔⵠ],
			[ΔⲆ.ⲆΔⵠᐃ, 50],
			[ΔⲆ.ⵠᐃΔⲆ, 50],
			[ΔⲆ.ⵠΔⵠΔ, 50]
		],
		w: ⲆⲆⲆᐃ,
		f: ⵠᐃⵠ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠΔΔΔΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠΔΔΔΔ,
		time: ᐃⲆⲆ / 70,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔΔΔΔ, ⲆⵠⲆ],
			[ΔⲆ.ⲆⵠΔⲆ, 50],
			[ΔⲆ.ⲆΔⵠᐃ, 50],
			[ΔⲆ.ⵠᐃΔⲆ, 50]
		],
		w: 1,
		f: ⵠᐃⵠ,
		"ⵠΔⲆ": Ⲇⵠᐃ,
		e: ⵠⵠⵠ,
		id: ᐃⵠⵠ.ⲆᐃⵠΔᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆᐃⵠΔᐃ,
		time: 1 / 90,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆᐃⵠΔᐃ, ᐃⲆⲆ],
			[ΔⲆ.ᐃⲆⵠΔ, 50],
			[ΔⲆ.ⲆⵠΔⲆ, 50],
			[ΔⲆ.ⲆΔⵠᐃ, 50]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⵠⵠΔΔ,
		id: ᐃⵠⵠ.ᐃⲆⲆᐃᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆⲆᐃᐃ,
		time: .008333333333333333,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ΔᐃᐃⲆΔ, 1],
			[ΔⲆ.ⵠᐃΔⲆ, 200]
		],
		w: 1,
		f: ᐃⵠⵠⵠ,
		"ⵠΔⲆ": ⲆⲆᐃⵠ,
		e: 0,
		id: ᐃⵠⵠ.ⵠⲆᐃΔΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⲆᐃΔΔ,
		time: ᐃⵠᐃᐃ / 60,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⲆⵠⲆᐃⲆ, ⲆⵠΔΔ],
			[ΔⲆ.ⵠᐃΔⲆ, 200]
		],
		w: 1,
		f: ⲆⵠΔΔ,
		"ⵠΔⲆ": 1,
		e: 0,
		id: ᐃⵠⵠ.ⲆΔⲆⵠⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔⲆⵠⵠ,
		time: ᐃⵠᐃᐃ / 60,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⵠⲆᐃΔⲆ, 1],
			[ΔⲆ.ⵠᐃΔⲆ, 200],
			[ΔⲆ.ΔᐃⲆⵠᐃ, 1]
		],
		w: ᐃΔΔⲆ,
		f: 1,
		"ⵠΔⲆ": 1,
		e: 0,
		id: ᐃⵠⵠ.ⵠᐃΔⵠᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃΔⵠᐃ,
		time: Δⵠᐃ / 60,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔⵠΔⲆ, ⲆΔᐃⵠΔ],
			[ΔⲆ.ΔⵠΔⲆΔ, 5],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, ΔⵠΔᐃⵠ]
		],
		w: ᐃⵠᐃᐃ,
		f: ⵠΔⵠᐃ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠΔᐃΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠΔᐃΔⲆ,
		time: ⲆⲆⵠ / ΔⵠᐃⲆΔ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ΔⵠΔⲆΔ, 3],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 2]
		],
		w: 1,
		f: ⵠΔⵠᐃ,
		"ⵠΔⲆ": ᐃⲆᐃ,
		e: ⵠΔⵠᐃ,
		id: ᐃⵠⵠ.ⲆᐃΔⵠⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆᐃΔⵠⵠ,
		time: ⵠᐃᐃ / ΔⵠΔᐃΔ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔᐃΔⲆ, ⲆⵠΔΔ],
			[ΔⲆ.Δᐃᐃᐃᐃ, ⵠᐃᐃ],
			[ΔⲆ.ΔⲆΔⵠΔ, ΔᐃᐃΔᐃ],
			[ΔⲆ.ΔᐃⵠⵠΔ, 5],
			[ΔⲆ.ᐃⵠⵠⲆᐃ, 8]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": 0,
		e: ⵠⵠΔΔ,
		id: ᐃⵠⵠ.ᐃⲆᐃΔΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆᐃΔΔ,
		time: ⵠᐃᐃ / 60,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⲆᐃΔⵠⵠ, ΔΔⵠ],
			[ΔⲆ.ⵠⵠⲆⵠᐃ, 1],
			[ΔⲆ.ΔⲆΔⵠΔ, ᐃⲆᐃⲆⲆ],
			[ΔⲆ.ΔᐃⵠⵠΔ, 5],
			[ΔⲆ.ᐃⵠⵠⲆᐃ, ᐃᐃΔⲆⲆ]
		],
		w: ⵠⵠⵠⲆ,
		f: ⲆⲆᐃⲆ,
		"ⵠΔⲆ": ⵠⵠⲆΔ,
		e: Δⵠⵠ,
		id: ᐃⵠⵠ.ΔᐃᐃⲆⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔᐃᐃⲆⵠ,
		time: .016666666666666666,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ
	}, {
		r: [
			[ΔⲆ.ⲆΔⵠⵠᐃ, Δⵠᐃ]
		],
		w: ΔᐃⲆⲆ,
		f: 0,
		"ⵠΔⲆ": ᐃΔΔⲆ,
		e: 0,
		id: ᐃⵠⵠ.ᐃⲆⲆΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃⲆⲆΔⲆ,
		time: 1 / ⲆⵠⲆΔᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 20],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 1]
		],
		w: ⵠᐃᐃ,
		f: 0,
		"ⵠΔⲆ": ⵠΔΔⲆ,
		e: 0,
		id: ᐃⵠⵠ.ⲆΔⵠⵠᐃ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆΔⵠⵠᐃ,
		time: .2,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ
	}, {
		r: [
			[ΔⲆ.ⵠΔⵠΔ, 100],
			[ΔⲆ.ⲆⵠᐃᐃΔ, 30]
		],
		w: 1,
		f: 1,
		"ⵠΔⲆ": Δⵠⵠ,
		e: 0,
		id: ᐃⵠⵠ.ⵠᐃᐃᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠᐃᐃᐃΔ,
		time: ⲆⲆᐃⵠ / 10,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 20]
		],
		w: 1,
		f: ⵠⵠⲆΔ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ΔΔⵠΔΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔΔⵠΔΔ,
		time: 1 / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, ΔⵠⲆⵠⲆ],
			[ΔⲆ.ⵠΔⵠΔ, 50],
			[ΔⲆ.ΔⵠΔⲆΔ, ⵠⲆⲆⲆ],
			[ΔⲆ.ⵠΔⵠΔⲆ, 5],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, ⵠΔᐃᐃ]
		],
		w: ⵠⵠⵠⲆ,
		f: 0,
		"ⵠΔⲆ": ⵠⵠΔΔ,
		e: 0,
		id: ᐃⵠⵠ.ΔΔΔΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔΔΔΔⲆ,
		time: ⲆⲆᐃⵠ / 20,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 250],
			[ΔⲆ.ΔᐃⵠⵠΔ, 10],
			[ΔⲆ.ΔⲆΔⵠΔ, ⵠΔΔΔ],
			[ΔⲆ.ⵠⵠⵠᐃΔ, ⵠⵠΔⵠ]
		],
		w: ⲆⲆᐃⵠ,
		f: 0,
		"ⵠΔⲆ": ⵠᐃΔ,
		e: ⵠΔⵠᐃ,
		id: ᐃⵠⵠ.ᐃᐃⵠⲆΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃᐃⵠⲆΔ,
		time: .02,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 250],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, ⲆⲆᐃᐃⵠ],
			[ΔⲆ.ΔⲆΔⵠΔ, 2],
			[ΔⲆ.ᐃⵠⵠⲆᐃ, 8]
		],
		w: 1,
		f: Δⵠⵠ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠⲆⲆⲆⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠⲆⲆⲆⵠ,
		time: .02,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃⵠⵠⲆ, ⲆⲆᐃᐃⵠ],
			[ΔⲆ.ⵠΔⵠΔⲆ, ⵠΔΔⵠⲆ],
			[ΔⲆ.ΔⵠΔⲆΔ, ΔΔᐃⵠΔ],
			[ΔⲆ.ᐃⲆᐃⵠⲆ, 50]
		],
		w: ⵠⵠⵠⲆ,
		f: 0,
		"ⵠΔⲆ": Ⲇⵠᐃ,
		e: 0,
		id: ᐃⵠⵠ.ΔⲆⵠⵠⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⲆⵠⵠⲆ,
		time: 1 / ΔⲆⵠⵠᐃ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 250],
			[ΔⲆ.ᐃᐃⵠⵠⲆ, 10],
			[ΔⲆ.ⵠⲆᐃΔᐃ, 10],
			[ΔⲆ.ΔⵠⵠΔⲆ, ᐃⵠΔⵠᐃ]
		],
		w: 1,
		f: ᐃⲆᐃ,
		"ⵠΔⲆ": ᐃⲆᐃ,
		e: 0,
		id: ᐃⵠⵠ.ⲆⵠⲆΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆⵠⲆΔⵠ,
		time: 1 / 50,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ᐃΔΔᐃΔ
	}, {
		r: [
			[ΔⲆ.ᐃᐃᐃⲆ, 40]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ⵠⵠⵠ,
		e: 0,
		id: ᐃⵠⵠ.ᐃΔΔⲆⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃΔΔⲆⵠ,
		time: ⲆⲆⲆᐃ / 5,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ᐃΔΔⲆⵠ, ⲆⵠΔΔ],
			[ΔⲆ.ⵠΔⵠΔ, 40],
			[ΔⲆ.ᐃᐃᐃⲆ, 50]
		],
		w: ⲆⲆᐃⵠ,
		f: ⵠΔΔⲆ,
		"ⵠΔⲆ": 0,
		e: ⵠⵠⲆΔ,
		id: ᐃⵠⵠ.ⲆᐃⵠΔⵠ,
		"ᐃⲆⲆΔ": ΔⲆ.ⲆᐃⵠΔⵠ,
		time: 1 / 10,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⲆᐃⵠΔⵠ, 1],
			[ΔⲆ.ⵠᐃΔⲆ, 40],
			[ΔⲆ.ⵠΔⵠΔ, 50],
			[ΔⲆ.ᐃᐃᐃⲆ, 60]
		],
		w: ⲆⲆⲆᐃ,
		f: 0,
		"ⵠΔⲆ": Δⵠⵠ,
		e: 0,
		id: ᐃⵠⵠ.ΔᐃΔΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔᐃΔΔⲆ,
		time: 1 / ᐃᐃⲆⵠΔ,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ΔᐃΔΔⲆ, 1],
			[ΔⲆ.ⲆΔⵠᐃ, 40],
			[ΔⲆ.ⵠᐃΔⲆ, 70],
			[ΔⲆ.ⵠΔⵠΔ, 80]
		],
		w: ⲆⵠΔΔ,
		f: ⲆⲆᐃⲆ,
		"ⵠΔⲆ": 0,
		e: 0,
		id: ᐃⵠⵠ.ⵠΔΔΔⲆ,
		"ᐃⲆⲆΔ": ΔⲆ.ⵠΔΔΔⲆ,
		time: ⵠⵠⵠⲆ / 30,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ⵠΔΔΔⲆ, ᐃⲆⲆ],
			[ΔⲆ.ⲆⵠΔⲆ, 40],
			[ΔⲆ.ⲆΔⵠᐃ, 70],
			[ΔⲆ.ⵠᐃΔⲆ, 110]
		],
		w: 1,
		f: 0,
		"ⵠΔⲆ": ᐃⲆΔ,
		e: Δⵠⵠ,
		id: ᐃⵠⵠ.ΔⲆΔΔΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ΔⲆΔΔΔ,
		time: .016666666666666666,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}, {
		r: [
			[ΔⲆ.ΔⲆΔΔΔ, 1],
			[ΔⲆ.ᐃⲆⵠΔ, 50],
			[ΔⲆ.ⲆⵠΔⲆ, 80],
			[ΔⲆ.ⲆΔⵠᐃ, 110]
		],
		w: ᐃΔΔⲆ,
		f: ⲆⲆᐃⲆ,
		"ⵠΔⲆ": ⲆⲆᐃⲆ,
		e: ⵠⵠⵠ,
		id: ᐃⵠⵠ.ᐃΔⵠᐃΔ,
		"ᐃⲆⲆΔ": ΔⲆ.ᐃΔⵠᐃΔ,
		time: ΔᐃⵠⲆ / 90,
		"ᐃᐃⲆ": ⵠⵠᐃᐃ.ⲆⵠⵠΔ
	}];

	function ΔⵠⲆⵠᐃΔᐃ(ᐃⵠⲆΔΔⲆᐃ, ΔⲆⵠⲆⵠᐃᐃ) {
		const ⲆⲆᐃΔᐃΔΔ = ((2712 + ᐃⵠⲆΔΔⲆᐃ) * 214013 + 2531011) % 4294967296;
		const ⵠⵠΔᐃⵠΔΔ = (8 << (ΔⲆⵠⲆⵠᐃᐃ >> 8 & 255)) + (16 << (ΔⲆⵠⲆⵠᐃᐃ >> 0 & 255)) + (24 << (ΔⲆⵠⲆⵠᐃᐃ >> 16 & 255)) + (0 << (ΔⲆⵠⲆⵠᐃᐃ >> 24 & 255));
		const ᐃΔΔᐃΔⲆᐃ = ΔⲆᐃⵠΔᐃⲆ(ⲆⲆᐃΔᐃΔΔ, ⵠⵠΔᐃⵠΔΔ, ⲆⲆᐃΔᐃΔΔ, ⵠⵠΔᐃⵠΔΔ, ⲆⲆᐃΔᐃΔΔ, ⵠⵠΔᐃⵠΔΔ);
		const ΔⵠΔᐃΔⲆⲆᐃΔ = ⵠᐃᐃⵠᐃⲆⲆ(ⲆⲆᐃΔᐃΔΔ, ⵠⵠΔᐃⵠΔΔ, ⲆⲆᐃΔᐃΔΔ);
		const ⲆⵠΔⲆᐃⲆΔ = 14403 ^ ᐃΔΔᐃΔⲆᐃ;
		return ⲆⵠΔⲆᐃⲆΔ
	}
	const ᐃΔⲆᐃⵠ = ΔⵠⲆⵠⲆ;
	var ⲆΔ = 300;
	ᐃΔᐃ = {
		"ᐃΔᐃⵠΔⵠⲆ": ⲆΔ++,
		"ΔᐃΔΔΔⵠΔ": ⲆΔ++,
		"ᐃΔⲆⲆᐃⵠⵠ": ⲆΔ++,
		"ᐃΔⵠⲆΔᐃⲆ": ⲆΔ++,
		"ⲆΔΔΔⵠⲆᐃ": ⲆΔ++,
		"ⵠΔⵠΔΔᐃᐃ": ⲆΔ++,
		"ᐃᐃⲆⵠΔⲆⵠ": ⲆΔ++,
		"ⵠᐃᐃΔᐃⵠᐃ": ⲆΔ++,
		"ⲆᐃⵠΔⵠᐃΔ": ⲆΔ++,
		"ⵠⲆⵠⵠΔᐃΔ": ⲆΔ++,
		"ᐃΔΔⲆᐃΔΔ": ⲆΔ++,
		"ⵠⵠⲆΔⲆᐃⵠ": ⲆΔ++,
		EMPTY: ⲆΔ++,
		"ΔᐃΔΔⵠΔⵠ": ⲆΔ++,
		"ᐃΔⲆⲆΔⲆΔ": ⲆΔ++,
		"ΔⲆⵠⵠᐃⲆᐃ": ⲆΔ++,
		"ᐃΔⲆⵠΔⵠᐃ": ⲆΔ++,
		"ⲆΔⲆΔΔΔⲆ": ⲆΔ++,
		"ⲆᐃᐃΔΔΔᐃ": ⲆΔ++,
		"ⲆΔΔΔⵠᐃⵠ": ⲆΔ++,
		"Δᐃⵠᐃᐃᐃᐃ": ⲆΔ++,
		"ⲆᐃᐃⵠᐃΔⲆ": ⲆΔ++,
		"ⲆᐃⵠᐃΔ": ⲆΔ++,
		"ⲆΔⵠⲆⲆᐃⵠ": ⲆΔ++,
		"ΔᐃⲆᐃ": ⲆΔ++,
		"ΔᐃΔⵠᐃⲆΔ": ⲆΔ++,
		"ᐃΔⲆⲆⲆᐃⲆ": ⲆΔ++,
		"ⲆⵠΔⵠⵠⲆⲆ": ⲆΔ++,
		"ΔᐃᐃᐃΔⲆᐃ": ⲆΔ++,
		"ΔᐃΔᐃⵠⵠΔ": ⲆΔ++,
		"ΔⲆⲆⲆΔⲆⲆ": ⲆΔ++,
		"ⲆᐃΔⵠⵠΔΔ": ⲆΔ++,
		POINTS: ⲆΔ++,
		"ΔⲆⵠᐃᐃΔΔ": ⲆΔ++,
		"ⵠᐃⵠⵠΔⲆΔ": ⲆΔ++,
		"ⲆΔⲆⵠⵠΔⲆ": ⲆΔ++,
		"ⲆΔΔⲆⵠᐃΔ": ⲆΔ++,
		"ᐃᐃⲆⵠᐃⲆᐃ": ⲆΔ++,
		"ᐃᐃᐃⵠΔⲆΔ": ⲆΔ++,
		"ᐃᐃⲆⲆⵠᐃⵠ": ⲆΔ++,
		"ΔⵠⲆⲆⵠΔⲆ": ⲆΔ++,
		"ⵠⵠΔΔΔΔⲆ": ⲆΔ++,
		"ⵠⵠΔⲆⲆᐃⵠ": ⲆΔ++,
		"ᐃᐃΔΔⵠᐃΔ": ⲆΔ++
	};

	function ΔⵠΔΔΔΔⲆ(ⲆᐃⵠΔᐃΔᐃ, ΔΔⲆᐃⵠᐃᐃ, ⵠΔᐃᐃΔⲆⲆ, ⵠⲆⲆⲆᐃⲆΔ, ⲆΔΔΔΔⲆⵠ) {
		const ⲆΔᐃᐃΔΔⵠ = ~(35895 & ⲆᐃⵠΔᐃΔᐃ) & ⲆᐃⵠΔᐃΔᐃ | ~(ⲆᐃⵠΔᐃΔᐃ & 35895) & 35895;
		const ΔΔⵠⲆⲆⲆᐃ = ~(61823 & ΔΔⲆᐃⵠᐃᐃ) & 61823 | ~(61823 & ΔΔⲆᐃⵠᐃᐃ) & ΔΔⲆᐃⵠᐃᐃ;
		const ΔⵠⵠⵠΔΔΔ = ~(ⵠΔᐃᐃΔⲆⲆ & 9421) & (ⵠΔᐃᐃΔⲆⲆ | 9421);
		const ΔⵠΔΔⲆΔⵠ = (2147483587 + 2147483629 * (31302 + ⵠⲆⲆⲆᐃⲆΔ)) % 2147483647;
		const ⵠᐃⲆΔⵠΔᐃ = ⲆΔΔΔΔⲆⵠ ^ 50461;
		const ⲆⵠΔᐃᐃᐃⵠ = ΔⵠⲆⵠᐃΔᐃ(ⲆΔᐃᐃΔΔⵠ, ΔΔⵠⲆⲆⲆᐃ);
		const ⲆⵠᐃⲆⲆΔⲆ = ΔΔⵠᐃⵠΔΔ(ΔⵠⵠⵠΔΔΔ, ΔⵠΔΔⲆΔⵠ, ⵠᐃⲆΔⵠΔᐃ);
		const ΔᐃᐃⵠⲆⲆΔ = (((ⲆⵠΔᐃᐃᐃⵠ ^ ⲆⵠᐃⲆⲆΔⲆ) + 63208) * 22695477 + 1) % 4294967296;
		return ΔᐃᐃⵠⲆⲆΔ
	}
	const ⵠⲆᐃⲆᐃⲆᐃ = ⲆⵠΔᐃΔ;
	const ΔΔⵠⲆᐃ = ⲆᐃᐃΔΔ;

	function ⵠⲆⵠⲆΔⲆᐃ(ΔᐃΔⲆⵠΔⵠ, ⵠΔⲆⵠⵠⵠᐃ, ΔⲆᐃⵠⲆᐃⲆ) {
		const ᐃⵠᐃⲆᐃⵠᐃ = ΔᐃΔⲆⵠΔⵠ ^ 49680;
		const ⲆΔⲆᐃᐃᐃΔ = ((32749 + ⵠΔⲆⵠⵠⵠᐃ) * 214013 + 2531011) % 4294967296;
		const ⵠⲆᐃᐃᐃΔⵠ = (2147483587 + 2147483629 * (54404 + ΔⲆᐃⵠⲆᐃⲆ)) % 2147483647;
		const ⲆΔΔᐃⵠᐃⵠ = ᐃⲆⵠΔⲆⵠΔ(ᐃⵠᐃⲆᐃⵠᐃ, ⲆΔⲆᐃᐃᐃΔ, ⵠⲆᐃᐃᐃΔⵠ, ᐃⵠᐃⲆᐃⵠᐃ, ⲆΔⲆᐃᐃᐃΔ);
		const ⲆⵠᐃⵠⲆΔⵠⲆⵠ = ᐃⲆᐃᐃΔΔⵠ(ⵠⲆᐃᐃᐃΔⵠ, ᐃⵠᐃⲆᐃⵠᐃ, ⲆΔⲆᐃᐃᐃΔ, ⵠⲆᐃᐃᐃΔⵠ, ᐃⵠᐃⲆᐃⵠᐃ);
		const ⵠⲆⲆΔⲆᐃᐃ = (ⲆΔΔᐃⵠᐃⵠ | 53756) & ~(53756 & ⲆΔΔᐃⵠᐃⵠ);
		return ⵠⲆⲆΔⲆᐃᐃ
	}

	function ⵠΔΔⵠⲆΔⵠ(ⲆⵠⵠΔΔΔᐃ, ᐃΔⲆⲆᐃⲆΔ, ⲆᐃΔⲆⲆⲆᐃ) {
		const ΔⵠΔⲆⵠΔⲆ = 25204 ^ ⲆⵠⵠΔΔΔᐃ;
		const ᐃΔⲆΔⵠⵠⵠ = ((ᐃΔⲆⲆᐃⲆΔ + 7012) * 2147483629 + 2147483587) % 2147483647;
		const ᐃⵠⲆⵠᐃᐃⲆ = ~(ⲆᐃΔⲆⲆⲆᐃ & 14905) & (ⲆᐃΔⲆⲆⲆᐃ | 14905);
		const ⵠΔⵠⲆⲆᐃⵠ = ᐃⲆᐃᐃΔΔⵠ(ΔⵠΔⲆⵠΔⲆ, ᐃΔⲆΔⵠⵠⵠ, ᐃⵠⲆⵠᐃᐃⲆ, ΔⵠΔⲆⵠΔⲆ, ᐃΔⲆΔⵠⵠⵠ);
		const ⵠⲆᐃⲆⵠⲆΔ = ⲆΔᐃⵠⲆⲆⵠ(ᐃⵠⲆⵠᐃᐃⲆ, ΔⵠΔⲆⵠΔⲆ);
		const ⲆᐃᐃᐃⵠᐃⲆ = (24 << ((ⵠΔⵠⲆⲆᐃⵠ ^ ⵠⲆᐃⲆⵠⲆΔ) >> ⵠᐃΔ & 255)) + (0 << ((ⵠΔⵠⲆⲆᐃⵠ ^ ⵠⲆᐃⲆⵠⲆΔ) >> 16 & 255)) + (16 << ((ⵠΔⵠⲆⲆᐃⵠ ^ ⵠⲆᐃⲆⵠⲆΔ) >> 24 & 255)) + (8 << ((ⵠΔⵠⲆⲆᐃⵠ ^ ⵠⲆᐃⲆⵠⲆΔ) >> 8 & 255));
		return ⲆᐃᐃᐃⵠᐃⲆ
	}
	const ⵠⵠⲆᐃⵠ = ᐃΔⲆᐃⵠ;

	function ⵠⵠᐃΔΔᐃⵠ(ΔⲆΔⵠΔⵠΔ, ⵠⲆⲆΔᐃⲆⲆ, ⵠⲆᐃⵠⲆᐃⲆ, ΔᐃⵠⲆⲆⵠᐃ, ΔⵠⲆⲆΔᐃᐃ, ⵠⵠⲆⲆᐃⵠⵠ) {
		ᐃΔⲆᐃΔΔᐃ(ⵠᐃΔᐃⵠ, ΔⲆΔⵠΔⵠΔ, ⵠⲆⲆΔᐃⲆⲆ, ⵠⲆᐃⵠⲆᐃⲆ, ΔᐃⵠⲆⲆⵠᐃ, ΔⵠⲆⲆΔᐃᐃ, ⵠⵠⲆⲆᐃⵠⵠ);
		const ᐃⵠⵠΔᐃΔⲆ = ΔΔᐃⵠⵠᐃⵠ(Δⵠⵠᐃ[ΔᐃⲆⲆ], Δⵠⵠᐃ[Δⵠᐃ]);
		const ⵠⵠⵠⲆᐃΔΔ = ᐃⲆΔΔΔⲆⵠ(Δⵠⵠᐃ[ᐃᐃⲆⵠ], Δⵠⵠᐃ[3], Δⵠⵠᐃ[4], Δⵠⵠᐃ[5]);
		const ⲆΔⵠΔΔⵠⲆ = ((0 + (ᐃⵠⵠΔᐃΔⲆ ^ ⵠⵠⵠⲆᐃΔΔ)) * 48271 + 0) % 2147483647;
		return ⲆΔⵠΔΔⵠⲆ
	}
	const ΔΔⵠΔⵠ = ᐃᐃⲆⵠᐃ;
	const ΔΔⵠⵠⲆΔΔ = ⲆⵠΔΔⲆ;
	const ⲆΔΔⲆ = ᐃⲆⵠᐃ;
	const ΔⲆⵠᐃⲆⵠⵠ = ⵠⵠⲆⵠⵠ;
	const ⵠΔⲆΔⲆⲆⲆ = ⲆΔⲆⵠᐃΔᐃ;

	function ᐃⲆⵠΔΔⲆΔ(ⲆΔⲆΔΔΔΔ, ΔⲆⵠⵠⲆΔⵠ, ΔᐃⵠⲆⵠⵠΔ) {
		const ⵠΔⲆⲆᐃⲆⵠ = ~(ⲆΔⲆΔΔΔΔ & 7776) & (7776 | ⲆΔⲆΔΔΔΔ);
		const ⲆΔⵠΔᐃⲆΔ = (1013904223 + 1664525 * (ΔⲆⵠⵠⲆΔⵠ + 23424)) % 4294967296;
		const ΔΔΔⲆᐃΔⲆ = (2147483587 + (ΔᐃⵠⲆⵠⵠΔ + 37414) * 2147483629) % 2147483647;
		const ⵠⵠⵠⲆΔⵠⵠ = ⵠᐃᐃⵠⲆⲆΔ(ⵠΔⲆⲆᐃⲆⵠ, ⲆΔⵠΔᐃⲆΔ, ΔΔΔⲆᐃΔⲆ, ⵠΔⲆⲆᐃⲆⵠ);
		const ᐃΔⵠⲆⵠⵠⲆⲆⵠ = ⵠᐃᐃⵠⲆⲆΔ(ⲆΔⵠΔᐃⲆΔ, ΔΔΔⲆᐃΔⲆ, ⵠΔⲆⲆᐃⲆⵠ, ⲆΔⵠΔᐃⲆΔ);
		const ⵠᐃⲆⵠⵠᐃᐃ = ~(10814 & ⵠⵠⵠⲆΔⵠⵠ) & (10814 | ⵠⵠⵠⲆΔⵠⵠ);
		return ⵠᐃⲆⵠⵠᐃᐃ
	}

	function ΔΔⲆⵠΔᐃΔ(ᐃᐃᐃᐃⲆΔⲆ, ⲆᐃᐃⲆᐃᐃⲆ, ΔⵠΔΔⲆᐃᐃ, ᐃⵠᐃⲆΔⵠⲆ) {
		ⲆᐃᐃᐃᐃⲆᐃ(ⵠᐃΔᐃⵠ, ᐃᐃᐃᐃⲆΔⲆ, ⲆᐃᐃⲆᐃᐃⲆ, ΔⵠΔΔⲆᐃᐃ, ᐃⵠᐃⲆΔⵠⲆ);
		const ΔⲆᐃΔⵠΔⲆ = ⵠΔⲆⲆᐃⲆΔ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[1], Δⵠⵠᐃ[ᐃⲆⵠᐃ], Δⵠⵠᐃ[ⵠΔΔᐃ], Δⵠⵠᐃ[0]);
		const ᐃⵠⲆⲆⲆᐃᐃ = ΔⲆⲆⵠᐃⲆᐃ(Δⵠⵠᐃ[ⵠⵠⵠⲆ], Δⵠⵠᐃ[2], Δⵠⵠᐃ[3], Δⵠⵠᐃ[ⵠΔⵠᐃ], Δⵠⵠᐃ[1]);
		const ⵠⲆΔⲆΔᐃⲆ = (17631 + (ΔⲆᐃΔⵠΔⲆ ^ ᐃⵠⲆⲆⲆᐃᐃ)) % 65488;
		return ⵠⲆΔⲆΔᐃⲆ
	}
	var ⵠⲆΔⲆᐃΔΔ = function() {
		ⵠᐃⲆ[ΔⲆ.ᐃΔⵠᐃΔ] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔΔΔ] = ["Amethyst Axe", "Purple and powerful", ᐃ[394], "Shield Penetration: 5"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔΔΔⲆ] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔΔⲆ] = ["Gold Axe", "Chop 'til it drops!", ᐃ[150], "Shield Penetration: 3"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔⵠ] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔⲆⵠ] = ["Wood Axe", "Eco-friendly deforestation!", ᐃ[565], "Shield Penetration: 1"];
		ⵠᐃⲆ[ΔⲆ.Ⲇᐃⵠⵠᐃ] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", ᐃ[39]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔᐃⵠᐃ] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", ᐃ[39]];
		ⵠᐃⲆ[ΔⲆ.Δⵠⵠⵠᐃ] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", ᐃ[39]];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃᐃΔⵠ] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", ᐃ[39]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃΔⵠ] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", ᐃ[39]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆᐃᐃ] = ["Reidite Shield", "A must for the pros of the getaway", ᐃ[577], "Damage: 6", "Players Defense: 6"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔᐃ] = ["Amethyst Shield", "Because you know how to run away in style", ᐃ[577], ᐃ[66], "Players Defense: 5"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔΔΔΔ] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", ᐃ[577], ᐃ[443], ᐃ[185]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⲆⲆᐃ] = ["Gold Shield", "When it's golden, it's always better.", ᐃ[577], ᐃ[230], "Players Defense: 3"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔΔᐃΔ] = ["Stone Shield", "Protects you a bit more", ᐃ[577], ᐃ[119], "Players Defense: 2"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⵠⵠΔ] = ["Wood Shield", "Protects you a bit", ᐃ[577], ᐃ[359], "Players Defense: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔΔᐃ] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔⵠⲆ] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⵠⲆⵠ] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⵠᐃΔ] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠⲆΔ] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
		ⵠᐃⲆ[ΔⲆ.Δᐃᐃⵠⵠ] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆᐃᐃⲆ] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔᐃΔⵠ] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆⵠΔ] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", ᐃ[394], "Mobs Damage: 300", "Building Damage: 30"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃⵠᐃ] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔΔⵠ] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔᐃΔ] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃΔⲆ] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", ᐃ[417], "Mobs Damage: 100", "Building Damage: 20"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⵠⲆⲆ] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆⵠ] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆⵠⵠ] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆⵠᐃ] = [ᐃ[484], "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⲆⲆᐃ] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⲆⲆⵠ] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃᐃᐃ] = ["Vulture Feather", "From a deadly vulture"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⵠΔ] = ["Emerald", "How many golden breads can you get from it?"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔᐃΔ] = ["Sand Worm Juice", "I don't want to know how you got this."];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠΔⵠⲆ] = ["Turban", "Useful to survive in the desert."];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⲆᐃⲆ] = ["Ninja outfit", "Essential to survive in the desert"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆⲆⲆ] = ["Pilot Hat", "Take off and land with flying objects much faster."];
		ⵠᐃⲆ[ΔⲆ.Δⵠⵠᐃⵠ] = ["Pilot Glasses"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⲆᐃ] = ["Tamed Boar", "Fast on lands and slow on water."];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠⵠⵠ] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⵠⲆΔ] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆᐃᐃⵠ] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", ᐃ[569], ᐃ[102]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆΔΔ] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", ᐃ[569], ᐃ[102]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⲆΔᐃ] = ["Tamed Hawk", "You can fly with it.", ᐃ[569], ᐃ[102]];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⵠⵠⲆ] = ["Saddle", "Hit a boar with it to tame it."];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔΔ] = ["Witch Hat", "You're a wizard Starvy!"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔᐃΔᐃ] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⲆⵠⵠ] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⵠΔ] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⲆⵠΔ] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃΔΔ] = ["Pirate hat", "You are faster with it in a boat", ᐃ[162]];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆⲆⵠ] = ["Sled", "You are faster with it in the snow"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠⲆΔ] = ["Boat", "You are faster with it in the water"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔⵠ] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", ᐃ[569], ᐃ[102]];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠᐃΔ] = ["Reidite Hammer", ᐃ[354], "Damage: 6", "Building Damage: 70"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⲆᐃ] = ["Penguin Feather", "From a deadly cute penguin."];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⵠΔⲆ] = ["Hawk Feather", "From a deadly hawk."];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠΔᐃⵠ] = [ᐃ[378], "Food : 20", "Water : 10"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔᐃⲆ] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃΔⲆ] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⵠⵠΔ] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆⲆⲆ] = ["Watermelon Seed", "Grows into Watermelon", ᐃ[280], "Growth: 180s", "Need water: 3min 20s", ᐃ[393], ᐃ[303]];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔΔⲆ] = ["Reidite Door", "Noboby can destroy it. Except very reckless", ᐃ[66], "On-Hit Damage: 1", "Durability: 4000"];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠᐃΔ] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔᐃΔ] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆᐃⲆΔ] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", ᐃ[39]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔⵠᐃ] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", ᐃ[35]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔΔᐃⵠ] = ["Wood Door Spike", "Can be opened or closed by you or your friends", ᐃ[66], "On-Hit Damage: 1", "Durability: 100"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⲆⵠⵠ] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠΔⲆ] = ["Gold Door Spike", 'Are you rebuilding the "el dorado?"', "Damage: 15", "On-Hit Damage: 2", ᐃ[393]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠⵠᐃ] = ["Diamond Door Spike", "For a shining house", "Damage: 25", ᐃ[487], "Durability: 800"];
		ⵠᐃⲆ[ΔⲆ.Ⲇᐃⵠᐃᐃ] = ["Amethyst Door Spike", "Is your house a locked safe?", ᐃ[394], ᐃ[487], "Durability: 1600"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⲆⲆⲆ] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆᐃⲆ] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⲆᐃ] = ["Carrot Seed", "Grows into Carrot", ᐃ[280], "Growth: 30s", "Need water: 1min 40s", ᐃ[89], ᐃ[303]];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⲆΔⵠ] = ["Tomato Seed", "Grows into Tomato", ᐃ[280], "Growth: 30s", "Need water: 1min 40s", ᐃ[89], ᐃ[303]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠᐃᐃ] = ["Pitchfork", "Perfect for gathering"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⲆᐃΔ] = ["Golden Pitchfork", "Essential for a real farmer."];
		ⵠᐃⲆ[ΔⲆ.ⵠΔΔⵠⵠ] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃⵠΔᐃᐃ] = [ᐃ[276], "Eat it or sell it in exchange for wood or stone", "Food : 12"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃⲆⲆᐃⵠ] = [ᐃ[276], "Eat it or sell it in exchange for gold", "Food : 25"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⲆΔⲆΔⲆ] = [ᐃ[276], "Eat it or sell it in exchange for diamond", "Food : 50"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⲆⲆⲆᐃⲆ] = [ᐃ[276], "Eat it or sell it in exchange for amethyst", "Food : 75"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔⵠᐃΔΔ] = [ᐃ[276], "Eat it or sell it in exchange for reidite", "Food : 100"];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆΔⲆ] = ["Lava Cube", "You feel an immense power emanating from this cube"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃΔⵠ] = ["Lava Orb", "You feel an immense power emanating from this orb"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃⲆᐃ] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔⲆⲆ] = ["Lava Spear", "Doing good or doing evil", ᐃ[150], "Building Damage: 8"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⵠᐃ] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃᐃⲆⲆ] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠᐃⲆ] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃᐃⲆ] = ["Reidite Sword", "Really useful against Lava Monsters", ᐃ[394], "Building Damage: 10"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⵠⲆⲆ] = ["Flame", "It's hot!"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔⵠ] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔᐃⲆ] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠⵠⲆ] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⵠΔ] = ["Reidite", "The ultimate ore"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠⵠᐃ] = ["Dragon Cube", "You feel a great power emanating from this cube"];
		ΔⲆᐃⵠ[22] = [ᐃ[236]];
		ΔⲆᐃⵠ[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
		ΔⲆᐃⵠ[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
		ΔⲆᐃⵠ[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
		ΔⲆᐃⵠ[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
		ΔⲆᐃⵠ[27] = ['You were trampled by that boar. From now on, your new nickname is "the doormat".'];
		ΔⲆᐃⵠ[28] = ['With a force of 3300 newtons, the shock wave from the closing of the crab king\'s claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the "crab rave"'];
		ΔⲆᐃⵠ[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
		ΔⲆᐃⵠ[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
		ΔⲆᐃⵠ[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
		ΔⲆᐃⵠ[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
		ΔⲆᐃⵠ[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
		ΔⲆᐃⵠ[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
		ΔⲆᐃⵠ[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
		ΔⲆᐃⵠ[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
		ΔⲆᐃⵠ[37] = ['You hear "Avada Kedavra!" before you turn to ashes.'];
		ΔⲆᐃⵠ[38] = ["You died crushed by an angry baby mammoth."];
		ΔⲆᐃⵠ[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
		ΔⲆᐃⵠ[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆᐃⵠ] = [ᐃ[207], ᐃ[31], ᐃ[116]];
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⵠΔΔΔΔⲆ] = "A sandstorm is approaching in a few seconds.";
		ⵠᐃⲆ[ᐃΔᐃ.ΔⵠⲆⲆⵠΔⲆ] = "The sandstorm will soon stop.";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃΔΔⵠᐃΔ] = "A blizzard is approaching in a few seconds.";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⵠΔⲆⲆᐃⵠ] = "The blizzard will soon stop.";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃᐃᐃΔⲆᐃ] = ᐃ[524];
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔᐃⵠⵠΔ] = ᐃ[293];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⲆⲆΔⲆⲆ] = ᐃ[332];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃΔⵠⵠΔΔ] = ᐃ[144];
		ⵠᐃⲆ[ᐃΔᐃ.POINTS] = ᐃ[263];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠᐃᐃΔΔ] = ᐃ[123];
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃⵠⵠΔⲆΔ] = ᐃ[326];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆⵠⵠΔⲆ] = ᐃ[336];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔⲆⵠᐃΔ] = ᐃ[460];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠᐃⲆᐃ] = ᐃ[510];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆᐃᐃ] = [ᐃ[69], ᐃ[312], ᐃ[536]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆΔᐃ] = [ᐃ[168], ᐃ[235], "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", ᐃ[565], ᐃ[296]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆΔ] = [ᐃ[318], ᐃ[54], ᐃ[232], ᐃ[105], "Players Defense: 5", "Animals Defense: 19"];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔΔⲆ] = [ᐃ[529], ᐃ[26], ᐃ[272], ᐃ[275], ᐃ[393]];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[541])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[135];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[107])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[382];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[558])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[553];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[329])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[58];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[253])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[204];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[257])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = " Collect 1 dragon heart inside the cave";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[149])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[19];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[489])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[203];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[416])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[127];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[466])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[59];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[377])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "100 bread in winter, alone, without come back";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[571])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[384];
		for (var ᐃⲆ = ᐃⲆΔᐃ; ⲆⲆⵠⵠⲆ > ᐃⲆ; ᐃⲆ++) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[562] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[373];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[44])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[554];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆⵠᐃ] = ["Hand"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃᐃΔ] = ["Dirt", "Dirty!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⲆ] = ["Sand", "I got it in my eyes!"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆ] = ["Wood", "You can't get enough of it!"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔ] = ["Stone", "Also called a rock"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⲆ] = ["Gold", "Be generous, give it to others"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃ] = ["Diamond", "What will you make with it?"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠΔⲆ] = ["Amethyst", "It's Mauve like Lapa"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃᐃ] = ["Flour", "Used in cooking"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⲆΔ] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠΔ] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⵠΔ] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔΔⲆ] = ["Cooked meat", "A rare steak, please", "Food: 35"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃᐃᐃ] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔΔⵠ] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔΔⲆ] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔⵠ] = [ᐃ[521], "Tastes like Krabby Patty", "Food: 100"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆᐃΔ] = ["Candies", "Only for children!", ᐃ[116]];
		ⵠᐃⲆ[ΔⲆ.Ⲇⵠᐃⵠⵠ] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃⲆΔ] = ["Garland", "Perfect decoration for roofs"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔΔ] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", ᐃ[89], ᐃ[303]];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃΔᐃ] = ["Berry", "Berry tasty!", ᐃ[536]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⲆⵠ] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", ᐃ[89], ᐃ[303]];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆΔΔ] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆΔᐃ] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", ᐃ[89], ᐃ[303]];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃᐃ] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃᐃⲆ] = ["Garlic Seed", "Very dangerous for vampires", ᐃ[417], ᐃ[280], "Growth: 1min 10s", "Need water: 1min 40s", ᐃ[89], ᐃ[303]];
		ⵠᐃⲆ[ΔⲆ.Ⲇᐃᐃⵠⵠ] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⲆⵠΔ] = ["Thorn bush Seed", "Can damage your enemies", ᐃ[417], ᐃ[280], "Growth: 15s", "Need water: 3min", ᐃ[454], ᐃ[303]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔⵠᐃ] = ["Thorn bush", "It stings!"];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔⵠᐃ] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", ᐃ[39]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⵠ] = ["Ice", "Useful for making cakes and water"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⲆ] = ["Wrench", "To repair doors, walls and spike", ᐃ[119]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔⲆ] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆΔ] = ["Rabbit Fur", "That rabbit was so cute..."];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⵠᐃ] = ["Pure Fur", "You're a bread factory"];
		ⵠᐃⲆ[ΔⲆ.Δᐃᐃᐃᐃ] = ["Dark Fur", "You get ready to do something wrong"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⵠΔ] = ["Winter Fur", "These animals just wanted a hug..."];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⵠᐃΔ] = ["Scales", "It smells like fish!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔΔ] = ["Kraken Skin", "Weren't you too scared?"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆΔᐃ] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⵠⲆᐃ] = ["Big Firecamp", "Warm you up more time!", ᐃ[393], "Lifetime: 6min"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆⵠ] = ["Workbench", "Very useful to craft all kinds of objects"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠⵠⲆ] = ["Cord", "Used in crafting Hats and Bag"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⵠΔ] = ["Diamond Cord", "Used in crafting Special Hats"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔⵠ] = ["Chest", "Allows you to store items", "Durability: 500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆΔ] = ["Wood Sword", "Does that work?", "Damage: 12", ᐃ[296]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔΔ] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⵠⵠⵠ] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⲆᐃ] = ["Diamond Sword", "You can feel the power", ᐃ[150], "Building Damage: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔΔ] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", ᐃ[150], "Building Damage: 8"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆΔⲆ] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆΔ] = ["Dragon Sword", "No mercy!", ᐃ[394], "Building Damage: 10"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔᐃⵠ] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃⵠ] = ["Wood Pickaxe", "Can harvest only stone and wood", ᐃ[359]];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆⲆΔ] = ["Stone Pickaxe", "Can harvest wood, stone and gold", ᐃ[119]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃᐃ] = ["Gold Pickaxe", "Can also harvest diamond", ᐃ[230], ᐃ[35]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠΔⲆ] = ["Diamond Pickaxe", "Can also harvest amethyst", ᐃ[443], ᐃ[35]];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃᐃᐃ] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", ᐃ[66], ᐃ[35]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔⵠⲆ] = ["Stone Hammer", ᐃ[354], "Doesn't work well on diamond or amethyst", ᐃ[119], "Building Damage: 20"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔᐃ] = ["Gold Hammer", ᐃ[354], "Doesn't work well on amethyst", ᐃ[230], "Building Damage: 30"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⵠ] = ["Diamond Hammer", ᐃ[354], ᐃ[443], "Building Damage: 40"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃⵠ] = ["Amethyst Hammer", ᐃ[354], ᐃ[66], "Building Damage: 50"];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃⲆΔ] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠᐃ] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⵠᐃᐃ] = ["Stone Spear", "The beginning of evolution!", ᐃ[565], ᐃ[296]];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃⲆᐃ] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃΔ] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆⲆ] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⵠⵠ] = ["Stone Shovel", ᐃ[563], ᐃ[367], ᐃ[119]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⲆΔ] = ["Gold Shovel", ᐃ[563], ᐃ[367], ᐃ[230], "Buildings Damage: 1"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃΔⵠ] = ["Diamond Shovel", ᐃ[563], ᐃ[367], ᐃ[443], "Buildings Damage: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃⲆ] = ["Amethyst Shovel", ᐃ[563], ᐃ[367], ᐃ[66], "Buildings Damage: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃᐃᐃ] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔᐃ] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃΔ] = ["Gold Helmet", "AKA the helmet of the savages", ᐃ[185], ᐃ[13]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠᐃᐃⵠ] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃᐃᐃⲆ] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⵠΔ] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃΔⵠ] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆᐃ] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", ᐃ[162], "You also calm down aggressive monsters twice as fast"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠᐃⲆ] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", ᐃ[162]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⲆⲆ] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", ᐃ[162]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔⲆ] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", ᐃ[162]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔΔ] = ["Earmuffs", "Some kind of little chapka.", ᐃ[162]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆΔⲆ] = [ᐃ[237], "Also called a coat.", "Warmer outside water and in winter"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠⲆⵠ] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⵠΔⲆ] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⵠⵠ] = ["Peasant", "Your plants grow faster", ᐃ[162]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃΔΔ] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", ᐃ[162]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⵠ] = ["Winter Peasant", "Your plants grow faster", ᐃ[162]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔᐃ] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠⲆΔ] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", ᐃ[405]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃΔ] = ["Dragon Orb", ᐃ[335]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⲆⵠᐃ] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆΔ] = ["Green Gemstone", "You didn't cheat, promise?"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃⲆ] = ["Orange Gemstone", "Only a real pirate can find it!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔⲆ] = ["Blue Gemstone", "For too kind people"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔΔ] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", ᐃ[405]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⲆⵠⵠ] = ["Orange Crown", "You suddenly feel very lucky", ᐃ[405]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⵠᐃ] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", ᐃ[405]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆΔⲆ] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⵠᐃ] = ["Empty Bucket", "You need to fill this bucket near a water source"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔᐃⵠ] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆⲆⲆ] = ["Empty Bottle", "You can fill this bottle near a water source"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆⲆⵠ] = ["Empty Watering Can", "You must fill it with a water source to use it"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⵠⲆ] = ["Watering Can", "Allows watering of plants", ᐃ[359]];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔ] = ["Bag", "More space for your items!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔᐃ] = ["Paper", "Used in book-crafting"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⲆΔᐃ] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", ᐃ[359]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠᐃⲆ] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⵠⵠ] = ["Lock", "Allow you to lock your chest"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃΔΔ] = ["Lock-pick", "Allows you to unlock one chest"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⲆΔ] = [ᐃ[194], "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆᐃⲆᐃ] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔΔ] = ["Sign", "Leave a message to others", "Durability: 200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⲆⵠ] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃΔ] = ["Well", "Allows bottle filling", ᐃ[454]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔⲆΔ] = ["Wood Wall", "It's just a wall", ᐃ[454]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠᐃΔ] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠᐃΔ] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", ᐃ[39]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔᐃ] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠᐃᐃ] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠΔⵠΔ] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠΔᐃ] = ["Stone Spike", "I wouldn't want to be your enemy.", ᐃ[417], ᐃ[487], "Durability: 300"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃⲆ] = ["Gold Spike", "You're so cruel.", ᐃ[394], ᐃ[487], "Durability: 600"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔᐃ] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⲆΔ] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔⲆΔ] = ["Wood Door", "Can be opened or closed by you or your friends", ᐃ[454]];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔⲆ] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⲆⲆ] = ["Gold Door", 'Are you rebuilding the "el dorado?"', ᐃ[39]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⲆ] = ["Diamond Door", "For a shining house", "Durability: 2500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃᐃ] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆⲆⵠ] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", ᐃ[454]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⵠᐃ] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", ᐃ[39]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⲆⲆⵠ] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", ᐃ[39]];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃΔΔ] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔᐃⵠΔⵠⲆ] = "You cannot join this server";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔΔⵠΔ] = "Kicked: ";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆᐃⵠⵠ] = "Your key is already used by someone else";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⵠⲆΔᐃⲆ] = "Your key is wrong";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "You have an old version, you need to clear your cache";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃᐃⵠΔⲆΔ] = "Your client version is too recent for this server. The server is being updated";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⲆⵠᐃⵠ] = "Wrong password! To enter a password: https://starve.io/?password=...";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠΔⵠΔΔᐃᐃ] = "There are no more new resources";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠΔⲆⵠ] = "You survived 1 day";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃᐃΔᐃⵠᐃ] = "You survived ";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠΔⵠᐃΔ] = " days";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⲆⵠⵠΔᐃΔ] = "You are dead ;-;";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔΔⲆᐃΔΔ] = "Server cannot find spawn location! Spam the play button!";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⵠⲆΔⲆᐃⵠ] = "Server is full! Spam the play button!";
		ⵠᐃⲆ[ᐃΔᐃ.EMPTY] = "Resource is empty";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔⵠΔⵠ] = "Inventory is full (right-click to empty items)";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆΔⲆΔ] = " is dead";
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠⵠᐃⲆᐃ] = "This is not the right tool";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⵠΔⵠᐃ] = "You joined a team";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆΔΔΔⲆ] = "You are dead";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃΔΔΔᐃ] = " joined the team";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠᐃⵠ] = "Your team was destroyed";
		ⵠᐃⲆ[ᐃΔᐃ.Δᐃⵠᐃᐃᐃᐃ] = "You left the team";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃⵠᐃΔⲆ] = " left the team";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠᐃΔ] = "Someone stole your token :>";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⵠⲆⲆᐃⵠ] = "Choose a server";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃⲆᐃ] = "players";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔⵠᐃⲆΔ] = "total players";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆⲆᐃⲆ] = "players on this mode";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆⵠΔⵠⵠⲆⲆ] = "Coming soon...";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[412]).placeholder = "Nickname";
		ΔⲆᐃⵠ[ⵠⵠΔΔ] = ["You were killed for no reason"];
		ΔⲆᐃⵠ[1] = ["You starved to death, as the name of the game implies"];
		ΔⲆᐃⵠ[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
		ΔⲆᐃⵠ[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
		ΔⲆᐃⵠ[ⵠΔᐃⲆ] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
		ΔⲆᐃⵠ[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
		ΔⲆᐃⵠ[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
		ΔⲆᐃⵠ[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
		ΔⲆᐃⵠ[ᐃⵠΔⵠᐃ] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
		ΔⲆᐃⵠ[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
		ΔⲆᐃⵠ[ΔΔⵠⲆⵠ] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
		ΔⲆᐃⵠ[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
		ΔⲆᐃⵠ[ⵠⵠΔᐃᐃⲆⲆ] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
		ΔⲆᐃⵠ[13] = ["You died of thirst. Better drink your own piss."];
		ΔⲆᐃⵠ[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
		ΔⲆᐃⵠ[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
		ΔⲆᐃⵠ[ΔⵠⲆᐃⲆ] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
		ΔⲆᐃⵠ[ⵠⲆᐃⲆⵠⲆⲆ] = ["Your skin's falling apart, the sun killed you."];
		ΔⲆᐃⵠ[18] = ["Garlic stored in your pockets boiled your brain."];
		ΔⲆᐃⵠ[19] = ["As a vampire, don't stand near the garlic cloves."];
		ΔⲆᐃⵠ[ⲆⲆⲆⲆᐃ] = ["You ate garlic as a vampire, what did you expect?"];
		ΔⲆᐃⵠ[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
		ⲆⲆⲆⲆⵠ = ᐃ[229];
		ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", ᐃ[274], "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"]
	};

	function ᐃᐃΔⲆⵠⵠⲆ(ᐃᐃⵠⲆᐃⲆᐃ, ΔⵠⲆΔⲆⲆΔ, ⵠΔⵠᐃⵠᐃᐃ, ΔᐃⵠΔⲆⵠⲆ) {
		const ΔⵠᐃⲆΔΔⵠ = ᐃᐃⵠⲆᐃⲆᐃ ^ 23439;
		const ⲆⵠⵠΔᐃⵠⲆ = ~(ΔⵠⲆΔⲆⲆΔ & 59552) & 59552 | ~(59552 & ΔⵠⲆΔⲆⲆΔ) & ΔⵠⲆΔⲆⲆΔ;
		const ⲆⲆᐃΔⵠᐃᐃ = (0 << (ⵠΔⵠᐃⵠᐃᐃ >> 16 & 255)) + (16 << (ⵠΔⵠᐃⵠᐃᐃ >> 8 & 255)) + (8 << (ⵠΔⵠᐃⵠᐃᐃ >> 0 & ⲆᐃⲆΔⲆᐃⲆ)) + (24 << (ⵠΔⵠᐃⵠᐃᐃ >> 24 & 255));
		const ΔⲆⲆⲆⲆⵠⵠ = ((ΔᐃⵠΔⲆⵠⲆ + 26423) * 1664525 + 1013904223) % 4294967296;
		const ᐃᐃⲆⵠⵠᐃⵠ = ΔΔᐃᐃΔⵠⵠ(ΔⵠᐃⲆΔΔⵠ, ⲆⵠⵠΔᐃⵠⲆ, ⲆⲆᐃΔⵠᐃᐃ, ΔⲆⲆⲆⲆⵠⵠ);
		const ΔⵠΔᐃⲆᐃΔⲆⲆ = ⵠⵠⲆⵠⵠⵠΔ(ΔⵠᐃⲆΔΔⵠ, ⲆⵠⵠΔᐃⵠⲆ, ⲆⲆᐃΔⵠᐃᐃ, ΔⲆⲆⲆⲆⵠⵠ, ΔⵠᐃⲆΔΔⵠ);
		const ᐃᐃⵠⲆᐃΔᐃ = ~(22422 & ᐃᐃⲆⵠⵠᐃⵠ) & (ᐃᐃⲆⵠⵠᐃⵠ | 22422);
		return ᐃᐃⵠⲆᐃΔᐃ
	}

	function ⵠⵠΔΔᐃⲆΔ(ⵠⲆΔⵠΔⲆᐃ, ⲆⵠΔᐃᐃᐃᐃ, ⲆΔⵠᐃᐃΔΔ, ⲆΔᐃΔΔⵠΔ, ⵠΔᐃⲆᐃᐃᐃ) {
		const ⲆⲆΔᐃⵠⵠΔ = ⵠⲆΔⵠΔⲆᐃ ^ 53190;
		const ⲆΔⵠΔᐃᐃⲆ = ((ⲆⵠΔᐃᐃᐃᐃ + 16900) * 1103515245 + 12345) % 2147483648;
		const ΔⵠⵠⲆⲆⲆⵠ = (64807 + ⲆΔⵠᐃᐃΔΔ) % 65434;
		const ⵠΔⲆⵠᐃⵠΔ = (ⲆΔᐃΔΔⵠΔ | 12840) & ~(12840 & ⲆΔᐃΔΔⵠΔ);
		const ⲆᐃΔᐃᐃᐃΔ = ~(44260 & ⵠΔᐃⲆᐃᐃᐃ) & ⵠΔᐃⲆᐃᐃᐃ | ~(ⵠΔᐃⲆᐃᐃᐃ & 44260) & 44260;
		const ⵠⵠᐃΔⲆⲆΔ = ᐃΔⵠᐃᐃⵠⵠ(ⲆⲆΔᐃⵠⵠΔ, ⲆΔⵠΔᐃᐃⲆ, ΔⵠⵠⲆⲆⲆⵠ, ⵠΔⲆⵠᐃⵠΔ, ⲆᐃΔᐃᐃᐃΔ, ⲆⲆΔᐃⵠⵠΔ);
		const ΔΔΔⲆᐃⲆⲆⲆᐃ = ⲆᐃⲆΔⵠᐃⲆ(ⲆΔⵠΔᐃᐃⲆ, ΔⵠⵠⲆⲆⲆⵠ, ⵠΔⲆⵠᐃⵠΔ, ⲆᐃΔᐃᐃᐃΔ, ⲆⲆΔᐃⵠⵠΔ, ⲆΔⵠΔᐃᐃⲆ);
		const ⵠⵠⲆᐃⵠⲆⵠ = ~(27821 & ⵠⵠᐃΔⲆⲆΔ) & ⵠⵠᐃΔⲆⲆΔ | ~(ⵠⵠᐃΔⲆⲆΔ & 27821) & 27821;
		return ⵠⵠⲆᐃⵠⲆⵠ
	}
	var ΔᐃᐃⵠⵠⲆΔ = function() {
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠⵠᐃ] = [ᐃ[335]];
		ΔⲆᐃⵠ[22] = [ᐃ[236]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆᐃⵠ] = [ᐃ[207], ᐃ[31], ᐃ[116]];
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃᐃᐃΔⲆᐃ] = ᐃ[524];
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔᐃⵠⵠΔ] = ᐃ[293];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⲆⲆΔⲆⲆ] = ᐃ[332];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃΔⵠⵠΔΔ] = ᐃ[144];
		ⵠᐃⲆ[ᐃΔᐃ.POINTS] = ᐃ[263];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠᐃᐃΔΔ] = ᐃ[123];
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃⵠⵠΔⲆΔ] = ᐃ[326];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆⵠⵠΔⲆ] = ᐃ[336];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔⲆⵠᐃΔ] = ᐃ[460];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠᐃⲆᐃ] = ᐃ[510];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆᐃᐃ] = [ᐃ[69], ᐃ[312], ᐃ[536]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆΔᐃ] = [ᐃ[168], ᐃ[235], ᐃ[565], ᐃ[296]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆΔ] = [ᐃ[318], ᐃ[54], ᐃ[232], ᐃ[105], ᐃ[185], ᐃ[ⲆⵠⲆⵠⵠⲆⲆ]];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔΔⲆ] = [ᐃ[529], ᐃ[26], ᐃ[272], ᐃ[275], ᐃ[393]];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[541])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[135];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[107])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[382];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[558])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[553];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[329])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[58];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[253])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[204];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[257])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[206];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[149])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[19];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[489])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[203];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[416])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[127];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[466])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[59];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[377])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[493];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[571])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[384];
		for (var ᐃⲆ = 0; 7 > ᐃⲆ; ᐃⲆ++) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[562] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[373];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[44])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[554];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆⵠᐃ] = ["Рука"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃᐃΔ] = ["Земля", "Грязно!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⲆ] = ["Песок", "Он в моих глазах!"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆ] = ["Дерево", "Постоянно нужно больше!"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔ] = ["Камень", "Твердый"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⲆ] = ["Золото", "Будьте щедры, давайте его другим"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃ] = ["Алмаз", "Что вы создадите с помощью него?"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠΔⲆ] = ["Аметист", "Он сиреневый, как Lapa"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃᐃ] = ["Мука", "Используется в готовке"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⲆΔ] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠΔ] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⵠΔ] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔΔⲆ] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃᐃᐃ] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔΔⵠ] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔΔⲆ] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔⵠ] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆᐃΔ] = ["Конфеты", "Только для детей!", "Еда: 20"];
		ⵠᐃⲆ[ΔⲆ.Ⲇⵠᐃⵠⵠ] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃⲆΔ] = ["Гирлянда", "Прекрасная декорация для крыши"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔΔ] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", ᐃ[567], ᐃ[392]];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃΔᐃ] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⲆⵠ] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", ᐃ[567], ᐃ[392]];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆΔΔ] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆΔᐃ] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", ᐃ[567], ᐃ[392]];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃᐃ] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃᐃⲆ] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", ᐃ[567], ᐃ[392]];
		ⵠᐃⲆ[ΔⲆ.Ⲇᐃᐃⵠⵠ] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⲆⵠΔ] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", ᐃ[158], ᐃ[392]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔⵠᐃ] = ["Колючий Куст", "Это больно!"];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔⵠᐃ] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", ᐃ[537]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⵠ] = ["Лёд", "Используется для изготовления тортов и воды"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⲆ] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", ᐃ[340]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔⲆ] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆΔ] = ["Шкура Зайца", "Этот кролик был таким милым..."];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⵠᐃ] = ["Чистая Шкура", "Вы - фабрика хлеба"];
		ⵠᐃⲆ[ΔⲆ.Δᐃᐃᐃᐃ] = ["Чёрная Шкура", "Вы готовы делать зло."];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⵠΔ] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⵠᐃΔ] = ["Чешуя", "Она пахнет рыбой!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔΔ] = ["Шкура Кракена", "Вы не испугались?"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆΔᐃ] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⵠⲆᐃ] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆⵠ] = ["Верстак", "Необходим для создания многих предметов"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠⵠⲆ] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⵠΔ] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔⵠ] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆΔ] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔΔ] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⵠⵠⵠ] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⲆᐃ] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔΔ] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆΔⲆ] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆΔ] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔᐃⵠ] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃⵠ] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆⲆΔ] = ["Каменная Кирка", "Может добывать дерево, камень и золото", ᐃ[340]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃᐃ] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", ᐃ[ⲆᐃΔⲆⵠ]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠΔⲆ] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", ᐃ[5]];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃᐃᐃ] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", ᐃ[5]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔⵠⲆ] = ["Каменный молот", ᐃ[411], "Плохо разрушает алмазные и аметистовые здания", ᐃ[340], "Урон по строениям: 20"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔᐃ] = ["Золотой Молот", ᐃ[411], "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⵠ] = ["Алмазный Молот", ᐃ[411], "Урон: 4", "Урон по строениям: 40"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃⵠ] = ["Аметистовый Молот", ᐃ[411], "Урон: 5", "Урон по строениям: 50"];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃⲆΔ] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠᐃ] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⵠᐃᐃ] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃⲆᐃ] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃΔ] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆⲆ] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⵠⵠ] = ["Каменная Лопата", ᐃ[497], ᐃ[88], ᐃ[340]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⲆΔ] = ["Золотая Лопата", ᐃ[497], ᐃ[88], "Урон: 3", ᐃ[ⲆⵠⲆᐃ]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃΔⵠ] = ["Алмазная Лопата", ᐃ[497], ᐃ[88], "Урон: 4", ᐃ[ΔΔⵠⵠ]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃⲆ] = ["Аметистовая Лопата", ᐃ[497], ᐃ[88], "Урон: 5", "Урон по стреониям: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃᐃᐃ] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔᐃ] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃΔ] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠᐃᐃⵠ] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃᐃᐃⲆ] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃΔⵠ] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆᐃ] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", ᐃ[522]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠᐃⲆ] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", ᐃ[522]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⲆⲆ] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", ᐃ[522]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔⲆ] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", ᐃ[522]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔΔ] = ["Теплые Наушники", "Какая-то маленькая шапка.", ᐃ[522]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆΔⲆ] = ["Шапка", "Так же называется пальтом.", ᐃ[522]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠⲆⵠ] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⵠⵠ] = ["Крестьянская Туника", "Ваши растения растут быстрее", ᐃ[522]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃΔΔ] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", ᐃ[522]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⵠ] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", ᐃ[522]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔᐃ] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠⲆΔ] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", ᐃ[449]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃΔ] = ["Шар Дракона", "Даётся за квест"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⲆⵠᐃ] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆΔ] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃⲆ] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔⲆ] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔΔ] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", ᐃ[449]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⲆⵠⵠ] = ["Оранжевая Корона", "Вам очень повезло", ᐃ[449]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⵠᐃ] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", ᐃ[449]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆΔⲆ] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⵠᐃ] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔᐃⵠ] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆⲆⲆ] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆⲆⵠ] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⵠⲆ] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔ] = ["Рюкзак", "Больше места для ваших предметов!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔᐃ] = ["Бумага", "Используется при создании книги"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⲆΔᐃ] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠᐃⲆ] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⵠⵠ] = ["Замок", "Позволяет вам закрыть ваш сундук"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃΔΔ] = ["Ключ", "Даёт вам открыть один запертый сундук"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⲆΔ] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆᐃⲆᐃ] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔΔ] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⲆⵠ] = ["Крыша", "Немного скрывает вас и согревает!"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃΔ] = ["Колодец", "Позволяет заполнить бутылку", ᐃ[158]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔⲆΔ] = ["Деревянная Стена", "Это просто стена", ᐃ[158]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠᐃΔ] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠᐃΔ] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", ᐃ[537]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔᐃ] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠᐃᐃ] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠΔⵠΔ] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠΔᐃ] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃⲆ] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔᐃ] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⲆΔ] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔⲆΔ] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", ᐃ[158]];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔⲆ] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⲆⲆ] = ["Золотая Дверь", 'Вы перестраиваете "Эль Дорадо?"', ᐃ[537]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⲆ] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃᐃ] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆⲆⵠ] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", ᐃ[158]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⵠᐃ] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", ᐃ[537]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⲆⲆⵠ] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", ᐃ[537]];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃΔΔ] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔᐃⵠΔⵠⲆ] = "Вы не можете зайти на этот сервер";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔΔⵠΔ] = "Выгнаны: ";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆᐃⵠⵠ] = "Ваш ключ уже используется кем-то";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⵠⲆΔᐃⲆ] = "Ваш ключ неправильный";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "У вас старая версия, вам нужно очистить кеш";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠΔⵠΔΔᐃᐃ] = "Ресурсов больше нет";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠΔⲆⵠ] = "Вы выжили 1 день";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃᐃΔᐃⵠᐃ] = "Вы выжили ";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠΔⵠᐃΔ] = " дней";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⲆⵠⵠΔᐃΔ] = "Вы умерли ;-;";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔΔⲆᐃΔΔ] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⵠⲆΔⲆᐃⵠ] = "Сервер заполнен! Спамьте кнопку играть!";
		ⵠᐃⲆ[ᐃΔᐃ.EMPTY] = "Ресурсы закончились";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔⵠΔⵠ] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆΔⲆΔ] = " умер";
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠⵠᐃⲆᐃ] = "Это не тот инструмент";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⵠΔⵠᐃ] = "Вы вошли в команду";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆΔΔΔⲆ] = "Вы умерли";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃΔΔΔᐃ] = " вошёл в команду";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠᐃⵠ] = "Ваша команда была разрушена";
		ⵠᐃⲆ[ᐃΔᐃ.Δᐃⵠᐃᐃᐃᐃ] = "Вы покинули команду";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃⵠᐃΔⲆ] = " покинул команду";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠᐃΔ] = "Кто-то использует ваш токен :>";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⵠⲆⲆᐃⵠ] = "Выберите сервер";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃⲆᐃ] = "игроков";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔⵠᐃⲆΔ] = "игроков всего";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆⲆᐃⲆ] = "игроков в этом режиме";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆⵠΔⵠⵠⲆⲆ] = "Скоро...";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[412]).placeholder = "Имя";
		ΔⲆᐃⵠ[ⵠΔⵠᐃ] = ["Вы были убиты без причины"];
		ΔⲆᐃⵠ[ⲆⵠⲆ] = ["Вы умерли от голода, как название игры подразумевает это"];
		ΔⲆᐃⵠ[Ⲇᐃⵠⵠ] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
		ΔⲆᐃⵠ[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
		ΔⲆᐃⵠ[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
		ΔⲆᐃⵠ[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
		ΔⲆᐃⵠ[ⲆⲆⲆⵠΔ] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
		ΔⲆᐃⵠ[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
		ΔⲆᐃⵠ[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
		ΔⲆᐃⵠ[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
		ΔⲆᐃⵠ[ΔⵠᐃⲆΔ] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
		ΔⲆᐃⵠ[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
		ΔⲆᐃⵠ[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
		ΔⲆᐃⵠ[ⲆΔΔΔⲆ] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
		ΔⲆᐃⵠ[ᐃᐃᐃⵠᐃᐃⲆ] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
		ΔⲆᐃⵠ[ⲆⲆⲆΔⵠ] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
		ΔⲆᐃⵠ[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
		ΔⲆᐃⵠ[ᐃⲆᐃⵠⲆΔΔ] = ["Твоя кожа разваливается, солнце убило тебя"];
		ΔⲆᐃⵠ[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
		ΔⲆᐃⵠ[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
		ΔⲆᐃⵠ[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
		ΔⲆᐃⵠ[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
		ⲆⲆⲆⲆⵠ = ᐃ[229];
		ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", ᐃ[274], "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"]
	};
	const ᐃᐃΔΔⵠᐃᐃ = ⲆⵠⲆⵠⵠⵠⲆ;

	function ΔⵠᐃⲆᐃⵠΔ(ⲆᐃΔΔⵠⵠΔ, ΔⲆⵠⵠΔᐃΔ) {
		ΔΔΔΔΔⵠᐃ(ⵠᐃΔᐃⵠ, ⲆᐃΔΔⵠⵠΔ, ΔⲆⵠⵠΔᐃΔ);
		const ᐃΔΔΔⵠⵠⵠ = ⲆᐃᐃⵠᐃⲆⲆ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[1]);
		const ΔⵠΔⲆⲆⲆⵠⵠⲆ = ⵠⲆⲆΔⵠᐃⲆ(Δⵠⵠᐃ[ⲆⲆᐃ], Δⵠⵠᐃ[ᐃⲆⲆ]);
		const ⵠᐃΔΔᐃⵠⲆ = ~(ᐃΔΔΔⵠⵠⵠ & 46777) & 46777 | ~(46777 & ᐃΔΔΔⵠⵠⵠ) & ᐃΔΔΔⵠⵠⵠ;
		return ⵠᐃΔΔᐃⵠⲆ
	}
	var ᐃΔⲆᐃᐃⲆᐃ = function() {
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠⵠᐃ] = [ᐃ[335]];
		ΔⲆᐃⵠ[22] = [ᐃ[236]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆᐃⵠ] = [ᐃ[207], ᐃ[31], ᐃ[116]];
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃᐃᐃΔⲆᐃ] = ᐃ[524];
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔᐃⵠⵠΔ] = ᐃ[293];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⲆⲆΔⲆⲆ] = ᐃ[332];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃΔⵠⵠΔΔ] = ᐃ[144];
		ⵠᐃⲆ[ᐃΔᐃ.POINTS] = ᐃ[263];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠᐃᐃΔΔ] = ᐃ[123];
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃⵠⵠΔⲆΔ] = ᐃ[326];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆⵠⵠΔⲆ] = ᐃ[336];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔⲆⵠᐃΔ] = ᐃ[460];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠᐃⲆᐃ] = ᐃ[510];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆᐃᐃ] = [ᐃ[69], ᐃ[312], ᐃ[536]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆΔᐃ] = [ᐃ[168], ᐃ[235], ᐃ[565], ᐃ[296]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆΔ] = [ᐃ[318], ᐃ[54], ᐃ[232], ᐃ[105], ᐃ[185], ᐃ[13]];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔΔⲆ] = [ᐃ[529], ᐃ[26], ᐃ[272], ᐃ[275], ᐃ[393]];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[541])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[135];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[107])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[382];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[558])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[553];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[329])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[58];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[253])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[204];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[257])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[206];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[149])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[19];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[489])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[203];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[416])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[127];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[466])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[59];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[377])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[493];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[571])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[384];
		for (var ᐃⲆ = ⵠⵠⵠ; ᐃⲆ < ⲆᐃⲆⲆΔ; ᐃⲆ++) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[562] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[373];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[44])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[554];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆⵠᐃ] = ["mão"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃᐃΔ] = ["terra", "está sujo!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⲆ] = ["areia", "entrou nos meus olhos!"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆ] = ["madeira", "você não pode pegar o suficiente disso!"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔ] = ["pedra", "também chamado rocha"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⲆ] = ["ouro", "seja generoso, dê para outros"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃ] = ["diamante", "o que você irá fazer com isso?"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠΔⲆ] = ["ametista", "é mauve como lapa"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃᐃ] = ["farinha", "usada na cozinha"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⲆΔ] = ["biscoito", "biscoito da vovó", "comida: 50"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠΔ] = ["bolo", "bolo dos sonhos para gourmets", ᐃ[202]];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⵠΔ] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔΔⲆ] = ["carne assada", "um mal passado, por favor", "comida: 35"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃᐃᐃ] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔΔⵠ] = ["peixe assado", "com limão é perfeito", "comida: 35"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔΔⲆ] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔⵠ] = ["sanduíche", "saboroso com rissol de krabby", ᐃ[202]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆᐃΔ] = ["doces", "apenas para crianças!", ᐃ[202]];
		ⵠᐃⲆ[ΔⲆ.Ⲇⵠᐃⵠⵠ] = ["cana-de-açúcar", "prove, é delicioso!", ᐃ[202]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃⲆΔ] = ["pisca-pisca", "decoração perfeita de telhado"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔΔ] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", ᐃ[540], "tempo de vida: 8 dias"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃΔᐃ] = ["berry", "Berry saborosa!", "comida: 10"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⲆⵠ] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", ᐃ[540], "tempo de vida: 8 days"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆΔΔ] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆΔᐃ] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", ᐃ[540], "tempo de vida: 8 dias"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃᐃ] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃᐃⲆ] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", ᐃ[540], "tempo de vida: 8 dias"];
		ⵠᐃⲆ[ΔⲆ.Ⲇᐃᐃⵠⵠ] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⲆⵠΔ] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", ᐃ[471], "tempo de vida: 8 days"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔⵠᐃ] = ["mato de espinhos", "pica!"];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔⵠᐃ] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", ᐃ[192]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⵠ] = ["gelo", "útil para fazer bolo e água"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⲆ] = ["chave inglesa", "para reparar portas, muros e muros com espinho", ᐃ[576]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔⲆ] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆΔ] = ["pele de coelho", "o coelho era tão fofo..."];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⵠᐃ] = ["pele pura", "você é uma fábrica de pão"];
		ⵠᐃⲆ[ΔⲆ.Δᐃᐃᐃᐃ] = ["pele negra", "você está pronto para fazer algo errado"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⵠΔ] = ["pele de inverno", "ele só queria um abraço"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⵠᐃΔ] = ["escala", "é pequeno como peixe!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔΔ] = ["pele do kraken", "você não está com medo?"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆΔᐃ] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⵠⲆᐃ] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆⵠ] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠⵠⲆ] = ["linha", "usada para fazer chapéus e mochila"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⵠΔ] = ["linha de diamante", "usada para fazer chapéus especiais"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔⵠ] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆΔ] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔΔ] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⵠⵠⵠ] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⲆᐃ] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔΔ] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆΔⲆ] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆΔ] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔᐃⵠ] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃⵠ] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔᐃⵠⵠⲆᐃⲆᐃ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", ᐃ[576]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃᐃ] = ["picareta de ouro", "pode coletar diamante", "dano: 3", ᐃ[512]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠΔⲆ] = ["picareta de diamante", "pode coletar tudo", "dano: 4", ᐃ[512]];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃᐃᐃ] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", ᐃ[512]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔⵠⲆ] = ["martelo de pedra", ᐃ[301], "não funciona bem no diamante e na ametista", ᐃ[576], "dano em construções: 20"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔᐃ] = ["martelo de ouro", ᐃ[301], "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⵠ] = ["martelo de diamante", ᐃ[301], "dano: 4", "dano em construções: 40"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃⵠ] = ["martelo de ametista", ᐃ[301], "dano: 5", "dano em construções: 50"];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃⲆΔ] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠᐃ] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⵠᐃᐃ] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃⲆᐃ] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃΔ] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆⲆ] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⵠⵠ] = ["pá de pedral", ᐃ[233], ᐃ[120], ᐃ[576]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⲆΔ] = ["pá de ouro", ᐃ[233], ᐃ[120], "dano: 3", ᐃ[512]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃΔⵠ] = ["pá de diamante", ᐃ[233], ᐃ[120], "dano: 4", ᐃ[512]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃⲆ] = ["pá de ametista", ᐃ[233], ᐃ[120], "dano: 5", ᐃ[512]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃᐃᐃ] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔᐃ] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃΔ] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠᐃᐃⵠ] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃᐃᐃⲆ] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃΔⵠ] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆᐃ] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠᐃⲆ] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⲆⲆ] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔⲆ] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔΔ] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆΔⲆ] = [ᐃ[237], "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠⲆⵠ] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⵠⵠ] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃΔΔ] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⵠ] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔᐃ] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠⲆΔ] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", ᐃ[187]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃΔ] = ["esfera do dragão", "dado na questt"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⲆⵠᐃ] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆΔ] = ["pedra verde", "você não vai trapacear, promete?"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃⲆ] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔⲆ] = ["pedra azul", "para pessoas muito gentis"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔΔ] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", ᐃ[187]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⲆⵠⵠ] = ["coroa laranja", "de repente você se sente muito sortudo", ᐃ[187]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⵠᐃ] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", ᐃ[187]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆΔⲆ] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⵠᐃ] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔᐃⵠ] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆⲆⲆ] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆⲆⵠ] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⵠⲆ] = ["regador", "permite regar as plantas", "dano: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔ] = ["mochila", "mais espaço para seus itens!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔᐃ] = ["papel", "usado para fazer o livro"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⲆΔᐃ] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠᐃⲆ] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⵠⵠ] = ["fechadura", "permite você trancar seu baú"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃΔΔ] = ["chave", "permite destrancar um baú"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⲆΔ] = [ᐃ[194], "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆᐃⲆᐃ] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔΔ] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⲆⵠ] = ["telhado", "esconde você um pouco e te esquenta!"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃΔ] = ["poço", "permite encher garrafas", ᐃ[471]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔⲆΔ] = ["muro de madeira", "você sabia que o muro dança?", ᐃ[471]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠᐃΔ] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠᐃΔ] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", ᐃ[192]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔᐃ] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠᐃᐃ] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠΔⵠΔ] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠΔᐃ] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃⲆ] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔᐃ] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⲆΔ] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔⲆΔ] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", ᐃ[471]];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔⲆ] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⲆⲆ] = ["porta de ouro", "você está re-construindo o el dorado?", ᐃ[192]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⲆ] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃᐃ] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆⲆⵠ] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", ᐃ[471]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⵠᐃ] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", ᐃ[192]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⲆⲆⵠ] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", ᐃ[192]];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃΔΔ] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔᐃⵠΔⵠⲆ] = "você não pode entrar no servidor";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔΔⵠΔ] = "kickado: ";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆᐃⵠⵠ] = "sua chave está em uso por outra pessoa";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⵠⲆΔᐃⲆ] = "sua chave está errada";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "você tem uma versão velha, limpe seu cache";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠΔⵠΔΔᐃᐃ] = "não tem mais recursos";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠΔⲆⵠ] = "você sobreviveu 1 dia";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃᐃΔᐃⵠᐃ] = "você sobreviveu ";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠΔⵠᐃΔ] = " dias";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⲆⵠⵠΔᐃΔ] = "você está morto ;-;";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔΔⲆᐃΔΔ] = "servidor não pôde achar um local de spawn! spam o botão de play!";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⵠⲆΔⲆᐃⵠ] = "servidor está cheio! spam o botão de play!";
		ⵠᐃⲆ[ᐃΔᐃ.EMPTY] = "não tem recursos";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔⵠΔⵠ] = "inventário está cheio (botão direito para deletar itens)";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆΔⲆΔ] = " está morto";
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠⵠᐃⲆᐃ] = "essa não é a ferramenta certa";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⵠΔⵠᐃ] = "você entrou no time";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆΔΔΔⲆ] = "você está morto";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃΔΔΔᐃ] = "entrou no time";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠᐃⵠ] = "seu time foi destruido";
		ⵠᐃⲆ[ᐃΔᐃ.Δᐃⵠᐃᐃᐃᐃ] = "você saiu do time";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃⵠᐃΔⲆ] = " saiu do time";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠᐃΔ] = "alguém roubou sua ficha :>";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⵠⲆⲆᐃⵠ] = "escolha um servidor";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃⲆᐃ] = "jogadores";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔⵠᐃⲆΔ] = "jogadores totais";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆⲆᐃⲆ] = "jogadores nesse modo";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆⵠΔⵠⵠⲆⲆ] = "Coming soon...";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[412]).placeholder = "Apelido";
		ΔⲆᐃⵠ[0] = ["você morreu sem motivo"];
		ΔⲆᐃⵠ[ΔΔⵠ] = ["você morreu de fome, como o jogo diz"];
		ΔⲆᐃⵠ[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
		ΔⲆᐃⵠ[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
		ΔⲆᐃⵠ[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
		ΔⲆᐃⵠ[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
		ΔⲆᐃⵠ[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
		ΔⲆᐃⵠ[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
		ΔⲆᐃⵠ[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
		ΔⲆᐃⵠ[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
		ΔⲆᐃⵠ[ᐃⲆᐃⲆⲆ] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
		ΔⲆᐃⵠ[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
		ΔⲆᐃⵠ[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
		ΔⲆᐃⵠ[13] = ["você morreu de sede. melhor beber sua própria urina."];
		ΔⲆᐃⵠ[14] = ["você sabia que você morre afogado? agora você sabe."];
		ΔⲆᐃⵠ[ΔⲆΔΔΔΔᐃ] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
		ΔⲆᐃⵠ[ΔⵠⲆᐃⲆ] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
		ΔⲆᐃⵠ[ΔᐃΔⵠΔᐃⲆ] = ["sua pele caindo aos pedaços, o sol te matou."];
		ΔⲆᐃⵠ[ⲆΔⲆⲆⲆΔⲆ] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
		ΔⲆᐃⵠ[ⲆⵠᐃᐃⲆ] = ["como vampiro, não chegue perto do alho."];
		ΔⲆᐃⵠ[20] = ["você comeu alho como vampiro, o que você esperava?"];
		ΔⲆᐃⵠ[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
		ⲆⲆⲆⲆⵠ = ᐃ[229];
		ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", ᐃ[274], "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"]
	};

	function ⲆⲆⵠⲆⲆⵠᐃ(ΔᐃⲆΔΔ) {
		return ⲆΔⵠⲆⲆⵠᐃ(ΔᐃⲆΔΔ, 28821, 20981, 7739, 1474, 3411)
	}

	function ΔⲆΔⲆΔΔᐃ(ⵠⲆΔⵠΔⲆᐃ, ⲆⵠΔᐃᐃᐃᐃ, ⲆΔⵠᐃᐃΔΔ) {
		ΔΔⲆⵠᐃⲆΔ(ⵠᐃΔᐃⵠ, ⵠⲆΔⵠΔⲆᐃ, ⲆⵠΔᐃᐃᐃᐃ, ⲆΔⵠᐃᐃΔΔ);
		const ⵠⲆΔᐃⲆⲆⲆ = ΔⲆⲆⵠᐃⲆᐃ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[ⲆⵠⲆ], Δⵠⵠᐃ[2], Δⵠⵠᐃ[0], Δⵠⵠᐃ[1]);
		const ΔⵠⲆᐃᐃΔⵠ = ΔⲆᐃΔⲆⵠⵠ(Δⵠⵠᐃ[ᐃⲆⵠᐃ], Δⵠⵠᐃ[0], Δⵠⵠᐃ[1]);
		const ⵠΔᐃΔⵠⲆⵠ = (24 << ((ⵠⲆΔᐃⲆⲆⲆ ^ ΔⵠⲆᐃᐃΔⵠ) >> ⵠⵠⵠ & 255)) + (8 << ((ⵠⲆΔᐃⲆⲆⲆ ^ ΔⵠⲆᐃᐃΔⵠ) >> 8 & 255)) + (0 << ((ⵠⲆΔᐃⲆⲆⲆ ^ ΔⵠⲆᐃᐃΔⵠ) >> 24 & 255)) + (16 << ((ⵠⲆΔᐃⲆⲆⲆ ^ ΔⵠⲆᐃᐃΔⵠ) >> ΔⵠⲆᐃⲆ & 255));
		return ⵠΔᐃΔⵠⲆⵠ
	}

	function ⵠᐃᐃⵠᐃⲆⲆ(ⵠΔⵠⵠⲆΔᐃ, ⵠⲆⵠⵠᐃⲆⵠ, ⲆⲆⵠⵠⵠⵠⲆ) {
		const ΔᐃⲆⲆᐃΔⲆ = (ⵠΔⵠⵠⲆΔᐃ | 55125) & ~(55125 & ⵠΔⵠⵠⲆΔᐃ);
		const ⲆΔΔⲆΔⵠΔ = (2531011 + 214013 * (39455 + ⵠⲆⵠⵠᐃⲆⵠ)) % 4294967296;
		const ⲆⵠⲆᐃᐃΔⲆ = (1013904223 + (ⲆⲆⵠⵠⵠⵠⲆ + 59523) * 1664525) % 4294967296;
		const ⵠⵠΔᐃΔⵠᐃ = (12345 + ((ΔᐃⲆⲆᐃΔⲆ ^ ⲆΔΔⲆΔⵠΔ) + 27676) * 1103515245) % 2147483648;
		const ᐃᐃᐃᐃΔᐃᐃ = (2147483629 * ((ⵠⵠΔᐃΔⵠᐃ ^ ⲆⵠⲆᐃᐃΔⲆ) + 29841) + 2147483587) % 2147483647;
		return ᐃᐃᐃᐃΔᐃᐃ
	}

	function ΔⵠⵠⲆⵠᐃΔ(ⲆΔᐃⲆΔⲆᐃ, ᐃᐃⲆΔᐃⲆᐃ, ⵠΔΔⲆⲆᐃΔ, ᐃⲆⲆⲆᐃᐃΔ, ⵠⲆⲆΔᐃΔⲆ) {
		const ⲆᐃΔⲆⲆΔⵠ = ⲆΔᐃⲆΔⲆᐃ ^ 14251;
		const ⵠⲆⲆᐃⵠΔΔ = (39285 + ᐃᐃⲆΔᐃⲆᐃ) % 65404;
		const ΔⲆΔᐃᐃⵠΔ = ~(ⵠΔΔⲆⲆᐃΔ & 45229) & (ⵠΔΔⲆⲆᐃΔ | 45229);
		const ΔΔⲆⵠⵠᐃⲆ = ᐃⲆⲆⲆᐃᐃΔ ^ 33996;
		const ⵠΔⲆᐃΔᐃⲆ = (32087 + ⵠⲆⲆΔᐃΔⲆ) % 65383;
		const ⲆⲆΔΔᐃΔᐃ = ⵠᐃᐃⵠᐃⲆⲆ(ⲆᐃΔⲆⲆΔⵠ, ⵠⲆⲆᐃⵠΔΔ, ΔⲆΔᐃᐃⵠΔ);
		const ⲆⲆⲆΔⵠΔΔΔᐃ = ⵠᐃᐃⵠᐃⲆⲆ(ΔΔⲆⵠⵠᐃⲆ, ⵠΔⲆᐃΔᐃⲆ, ⲆᐃΔⲆⲆΔⵠ);
		const ⵠΔᐃΔᐃᐃᐃ = ~(ⲆⲆΔΔᐃΔᐃ & 7849) & 7849 | ~(7849 & ⲆⲆΔΔᐃΔᐃ) & ⲆⲆΔΔᐃΔᐃ;
		return ⵠΔᐃΔᐃᐃᐃ
	}
	const ᐃᐃⵠΔⵠ = ⵠΔⲆⲆΔ;
	const ΔΔⲆᐃΔΔⲆ = ⲆⵠΔᐃΔ;
	const Ⲇⵠⵠᐃ = ⵠᐃΔ;
	const ᐃΔⵠΔ = ⲆⵠΔΔ;
	const ᐃΔⵠᐃᐃΔᐃ = ΔᐃᐃᐃⲆΔΔ;
	const ⵠΔΔᐃⲆ = ⲆⲆᐃⲆⵠ;
	const ΔⲆⲆΔⲆ = Ⲇᐃᐃⵠᐃ;
	const ⵠΔΔⵠⵠᐃⲆ = ⲆⵠᐃΔᐃᐃⵠ;
	const ΔⵠΔΔΔ = ⲆⲆⲆⲆᐃ;

	function ᐃΔⵠⵠΔΔΔ(ⲆΔΔΔᐃⲆⵠ, ΔᐃⲆᐃⵠⲆⲆ, ⵠᐃᐃⵠΔΔⵠ) {
		const ΔᐃᐃⲆⲆⲆⵠ = 50076 ^ ⲆΔΔΔᐃⲆⵠ;
		const ᐃⵠΔⵠⵠⲆⵠ = (2531011 + 214013 * (35766 + ΔᐃⲆᐃⵠⲆⲆ)) % 4294967296;
		const ᐃⲆᐃⲆⲆⲆΔ = ⵠᐃᐃⵠΔΔⵠ ^ 4220;
		const ⵠᐃⲆᐃⵠΔΔ = ΔⵠΔΔΔΔⲆ(ΔᐃᐃⲆⲆⲆⵠ, ᐃⵠΔⵠⵠⲆⵠ, ᐃⲆᐃⲆⲆⲆΔ, ΔᐃᐃⲆⲆⲆⵠ, ᐃⵠΔⵠⵠⲆⵠ);
		const ΔᐃᐃᐃᐃⵠΔ = ⲆᐃⲆΔⵠᐃⲆ(ᐃⲆᐃⲆⲆⲆΔ, ΔᐃᐃⲆⲆⲆⵠ, ᐃⵠΔⵠⵠⲆⵠ, ᐃⲆᐃⲆⲆⲆΔ, ΔᐃᐃⲆⲆⲆⵠ, ᐃⵠΔⵠⵠⲆⵠ);
		const ΔᐃΔⵠᐃⲆᐃ = (18179 + (ⵠᐃⲆᐃⵠΔΔ ^ ΔᐃᐃᐃᐃⵠΔ)) % 65528;
		return ΔᐃΔⵠᐃⲆᐃ
	}
	var ⲆⲆᐃⲆᐃⵠⵠ = function() {
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠⵠᐃ] = [ᐃ[335]];
		ΔⲆᐃⵠ[22] = [ᐃ[236]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆᐃⵠ] = [ᐃ[207], ᐃ[31], ᐃ[116]];
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃᐃᐃΔⲆᐃ] = ᐃ[524];
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔᐃⵠⵠΔ] = ᐃ[293];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⲆⲆΔⲆⲆ] = ᐃ[332];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃΔⵠⵠΔΔ] = ᐃ[144];
		ⵠᐃⲆ[ᐃΔᐃ.POINTS] = ᐃ[263];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠᐃᐃΔΔ] = ᐃ[123];
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃⵠⵠΔⲆΔ] = ᐃ[326];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆⵠⵠΔⲆ] = ᐃ[336];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔⲆⵠᐃΔ] = ᐃ[460];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠᐃⲆᐃ] = ᐃ[510];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆᐃᐃ] = [ᐃ[69], ᐃ[312], ᐃ[536]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆΔᐃ] = [ᐃ[168], ᐃ[235], ᐃ[565], ᐃ[296]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆΔ] = [ᐃ[318], ᐃ[54], ᐃ[232], ᐃ[105], ᐃ[185], ᐃ[13]];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔΔⲆ] = [ᐃ[529], ᐃ[26], ᐃ[272], ᐃ[275], ᐃ[393]];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[541])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[135];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[107])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[382];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[558])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[553];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[329])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[58];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[253])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[204];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[257])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[206];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[149])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[19];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[489])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[203];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[416])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[127];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[466])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[59];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[377])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[493];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[571])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[384];
		for (var ᐃⲆ = ⵠᐃⵠ; ᐃⲆ < 7; ᐃⲆ++) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[562] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[373];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[44])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[554];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆⵠᐃ] = ["Mano"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃᐃΔ] = ["Tierra", "¡Tan limpia como mis manos!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⲆ] = ["Arena", "¡Tengo arena en mis ojos!"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆ] = ["Madera", "¡Nunca hay suficiente!"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔ] = ["Piedra", "También llamada roca."];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⲆ] = ["Oro", "Sé generoso, compártelo con los otros"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃ] = ["Diamante", "¿Que vas a hacer con él?"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠΔⲆ] = ["Amatista", "Es Mauve como Lapa"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃᐃ] = ["Harina", "Usada para cocinar."];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⲆΔ] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠΔ] = ["Tarta", "¡Cumpleaños Feliz!", ᐃ[474]];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⵠΔ] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔΔⲆ] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃᐃᐃ] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔΔⵠ] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔΔⲆ] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔⵠ] = ["Bocadillo", "Sabe como un Krabby Patty", ᐃ[474]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆᐃΔ] = ["Caramelos", "¡Solo para niños/as!", ᐃ[474]];
		ⵠᐃⲆ[ΔⲆ.Ⲇⵠᐃⵠⵠ] = ["Caña de Azúcar", "Pruébala, es deliciosa", ᐃ[474]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃⲆΔ] = ["Guirnalda", "Perfecta para decorar el techo"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔΔ] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", ᐃ[438], "Tiempo de vida: 8 Días"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃΔᐃ] = ["Baya", "No es venenosa.", "Comida: 10"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⲆⵠ] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", ᐃ[438], "Tiempo de vida: 8 Días"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆΔΔ] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆΔᐃ] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", ᐃ[438], "Tiempo de vida: 8 Días"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃᐃ] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃᐃⲆ] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", ᐃ[438], "Tiempo de Vida: 8 Días"];
		ⵠᐃⲆ[ΔⲆ.Ⲇᐃᐃⵠⵠ] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⲆⵠΔ] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", ᐃ[154], "Tiempo de Vida: 8 Días"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔⵠᐃ] = ["Planta de Espinas", "¡Te daña!"];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔⵠᐃ] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", ᐃ[96]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⵠ] = ["Hielo", "Bueno para hacer tartas y agua"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⲆ] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", ᐃ[400]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔⲆ] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆΔ] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⵠᐃ] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
		ⵠᐃⲆ[ΔⲆ.Δᐃᐃᐃᐃ] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⵠΔ] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⵠᐃΔ] = ["Escamas", "¡Huele a pescado!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔΔ] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆΔᐃ] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⵠⲆᐃ] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆⵠ] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠⵠⲆ] = ["Hilo", "Usado para craftear ropa y mochila"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⵠΔ] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔⵠ] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆΔ] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔΔ] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⵠⵠⵠ] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⲆᐃ] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔΔ] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆΔⲆ] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆΔ] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔᐃⵠ] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃⵠ] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆⲆΔ] = ["Pico de Piedra", "Puede minar hasta oro", ᐃ[400]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃᐃ] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", ᐃ[573]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠΔⲆ] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", ᐃ[573]];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃᐃᐃ] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", ᐃ[573]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔⵠⲆ] = ["Martillo de Piedra", ᐃ[530], "No funciona bien con diamante y amatista", ᐃ[400], "Daño para estructuras: 20"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔᐃ] = ["Martillo de Oro", ᐃ[530], "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⵠ] = ["Martillo de Diamante", ᐃ[530], "Daño: 4", "Daño para estructuras: 40"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃⵠ] = ["Martillo de Amatista", ᐃ[530], "Daño: 5", "Daño para estructuras: 50"];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃⲆΔ] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠᐃ] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⵠᐃᐃ] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃⲆᐃ] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃΔ] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆⲆ] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⵠⵠ] = ["Pala de Piedra", ᐃ[287], ᐃ[288], ᐃ[400]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⲆΔ] = ["Pala de Oro", ᐃ[287], ᐃ[288], "Daño: 3", ᐃ[573]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃΔⵠ] = ["Pala de Diamante", ᐃ[287], ᐃ[288], "Daño: 4", ᐃ[573]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃⲆ] = ["Pala de Amatista", ᐃ[287], ᐃ[288], "Daño: 5", ᐃ[573]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃᐃᐃ] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔᐃ] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃΔ] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠᐃᐃⵠ] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃᐃᐃⲆ] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃΔⵠ] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆᐃ] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠᐃⲆ] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⲆⲆ] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔⲆ] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", ᐃ[82]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔΔ] = ["Orejeras", "Como un abrigo pequeño.", ᐃ[82]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆΔⲆ] = [ᐃ[237], "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠⲆⵠ] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⵠⵠ] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃΔΔ] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", ᐃ[82]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⵠ] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", ᐃ[82]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔᐃ] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠⲆΔ] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃΔ] = ["Esfera del Dragón", "Dada en la misión"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⲆⵠᐃ] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆΔ] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃⲆ] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔⲆ] = ["Gema Azul", "Para gente muy amable"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔΔ] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⲆⵠⵠ] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⵠᐃ] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆΔⲆ] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⵠᐃ] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔᐃⵠ] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆⲆⲆ] = ["Botella Vacia", "La puedes llenar de agua"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆⲆⵠ] = ["Regadera Vacía", "La tienes que llenar de agua"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⵠⲆ] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔ] = ["Mochila", "¡Mas espacio para tus cosas!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔᐃ] = ["Hoja", "Usada para hacer un libro"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⲆΔᐃ] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠᐃⲆ] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⵠⵠ] = ["Cerradura", "Te permite cerrar tu cofre"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃΔΔ] = ["Llave", "Te permite abrir un cofre cerrado"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⲆΔ] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆᐃⲆᐃ] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔΔ] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⲆⵠ] = ["Techo", "Te esconde un poco y te protege del frío"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃΔ] = ["Fuente", "Permite rellenar botellas", ᐃ[154]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔⲆΔ] = ["Pared de Madera", "Es solo una pared.", ᐃ[154]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠᐃΔ] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠᐃΔ] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", ᐃ[96]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔᐃ] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠᐃᐃ] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠΔⵠΔ] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠΔᐃ] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃⲆ] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔᐃ] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⲆΔ] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔⲆΔ] = ["Puerta de Madera", "Puedes abrir y cerrarla ", ᐃ[154]];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔⲆ] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⲆⲆ] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", ᐃ[96]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⲆ] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃᐃ] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆⲆⵠ] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", ᐃ[154]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⵠᐃ] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", ᐃ[96]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⲆⲆⵠ] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", ᐃ[96]];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃΔΔ] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔᐃⵠΔⵠⲆ] = "No puedes unirte a este servidor";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔΔⵠΔ] = "Expulsado: ";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆᐃⵠⵠ] = "Tu llave ya está usada";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⵠⲆΔᐃⲆ] = "Tu llave está mal";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "Tienes una versión antigua, limpia tu cache";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠΔⵠΔΔᐃᐃ] = "No hay mas recursos";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠΔⲆⵠ] = "Has sobrevivido 1 día";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃᐃΔᐃⵠᐃ] = "Has sobrevivido ";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠΔⵠᐃΔ] = " días";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⲆⵠⵠΔᐃΔ] = "Estás muerto ;-;";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔΔⲆᐃΔΔ] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⵠⲆΔⲆᐃⵠ] = "El servidor esta lleno, ¡spamea el botón de jugar!";
		ⵠᐃⲆ[ᐃΔᐃ.EMPTY] = "Recurso vacio";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔⵠΔⵠ] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆΔⲆΔ] = " está muerto";
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠⵠᐃⲆᐃ] = "Esta no es la herramienta correcta";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⵠΔⵠᐃ] = "Te has unido a un equipo";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆΔΔΔⲆ] = "Estás muerto";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃΔΔΔᐃ] = " se unió al equipo";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠᐃⵠ] = "Tu equipo ha sido destruido";
		ⵠᐃⲆ[ᐃΔᐃ.Δᐃⵠᐃᐃᐃᐃ] = "Has dejado el equipo";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃⵠᐃΔⲆ] = " dejo el equipo ";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠᐃΔ] = "Alguien te robó tu token :>";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⵠⲆⲆᐃⵠ] = "Elige un servidor";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃⲆᐃ] = "jugadores";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔⵠᐃⲆΔ] = "total de jugadores";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆⲆᐃⲆ] = "Jugadores en este modo de juego";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆⵠΔⵠⵠⲆⲆ] = "Próximamente...";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[412]).placeholder = "Apodo";
		ΔⲆᐃⵠ[ⲆⲆΔ] = ["Has muerto por ninguna razón"];
		ΔⲆᐃⵠ[ᐃⵠᐃᐃ] = ["Has muerto de hambre, como implica el nombre del juego dice"];
		ΔⲆᐃⵠ[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
		ΔⲆᐃⵠ[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
		ΔⲆᐃⵠ[ΔΔΔⵠ] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
		ΔⲆᐃⵠ[ΔⲆⵠⵠ] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
		ΔⲆᐃⵠ[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
		ΔⲆᐃⵠ[ᐃᐃⲆΔΔ] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
		ΔⲆᐃⵠ[ⲆΔⵠΔΔ] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
		ΔⲆᐃⵠ[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
		ΔⲆᐃⵠ[ΔⵠΔᐃΔ] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
		ΔⲆᐃⵠ[ⲆΔΔⵠⵠ] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
		ΔⲆᐃⵠ[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
		ΔⲆᐃⵠ[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
		ΔⲆᐃⵠ[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
		ΔⲆᐃⵠ[ΔᐃΔⵠᐃ] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
		ΔⲆᐃⵠ[ΔᐃⵠⲆᐃⵠᐃ] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
		ΔⲆᐃⵠ[17] = ["Tu piel se cayó, el sol te quemó."];
		ΔⲆᐃⵠ[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
		ΔⲆᐃⵠ[ΔΔᐃⵠᐃᐃΔ] = ["Eres un vampiro, no te quedes cerca del ajo."];
		ΔⲆᐃⵠ[ΔⲆⵠⵠᐃ] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
		ΔⲆᐃⵠ[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
		ⲆⲆⲆⲆⵠ = ᐃ[229];
		ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", ᐃ[274], "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"]
	};

	function ⲆᐃᐃⵠΔΔΔ(ⲆⵠᐃⲆΔ, ᐃΔⵠΔⵠⲆΔ, ⵠᐃⲆⲆⵠ) {
		const ⲆⵠⲆΔΔⲆⵠ = (24 << (ⲆⵠᐃⲆΔ >> 24 & 255)) + (16 << (ⲆⵠᐃⲆΔ >> 8 & 255)) + (0 << (ⲆⵠᐃⲆΔ >> 16 & 255)) + (8 << (ⲆⵠᐃⲆΔ >> 0 & 255));
		const ⵠΔΔⵠⲆⲆᐃ = ᐃΔⵠΔⵠⲆΔ ^ 39087;
		const ⵠⵠᐃⵠᐃᐃⲆ = (8 << (ⵠᐃⲆⲆⵠ >> 0 & 255)) + (0 << (ⵠᐃⲆⲆⵠ >> 24 & 255)) + (24 << (ⵠᐃⲆⲆⵠ >> 16 & 255)) + (16 << (ⵠᐃⲆⲆⵠ >> 8 & 255));
		const ⵠⵠⲆΔΔΔΔ = ⲆᐃⵠᐃΔⵠⵠ(ⲆⵠⲆΔΔⲆⵠ, ⵠΔΔⵠⲆⲆᐃ, ⵠⵠᐃⵠᐃᐃⲆ, ⲆⵠⲆΔΔⲆⵠ, ⵠΔΔⵠⲆⲆᐃ, ⵠⵠᐃⵠᐃᐃⲆ);
		const ⵠΔⲆΔⲆᐃΔⵠⲆ = ⲆᐃⵠᐃΔⵠⵠ(ⲆⵠⲆΔΔⲆⵠ, ⵠΔΔⵠⲆⲆᐃ, ⵠⵠᐃⵠᐃᐃⲆ, ⲆⵠⲆΔΔⲆⵠ, ⵠΔΔⵠⲆⲆᐃ, ⵠⵠᐃⵠᐃᐃⲆ);
		const ᐃΔΔΔⲆⲆⵠ = ~(ⵠⵠⲆΔΔΔΔ & 64165) & ⵠⵠⲆΔΔΔΔ | ~(ⵠⵠⲆΔΔΔΔ & 64165) & 64165;
		return ᐃΔΔΔⲆⲆⵠ
	}
	const ΔᐃΔⲆᐃ = ⲆⵠⲆⵠᐃ;
	const ΔᐃⲆⲆⲆΔⲆ = ⵠⵠᐃΔᐃ;

	function ᐃⵠᐃᐃⲆⵠᐃ(ᐃΔⵠΔⲆᐃⲆ, ⵠⲆΔⵠᐃⲆΔ, ᐃⲆⲆⵠⵠΔⲆ) {
		const ᐃⲆⵠⲆΔΔⲆ = (1 + 22695477 * (ᐃΔⵠΔⲆᐃⲆ + 33469)) % 4294967296;
		const ⲆⲆᐃᐃⵠΔΔ = ~(ⵠⲆΔⵠᐃⲆΔ & 11433) & (11433 | ⵠⲆΔⵠᐃⲆΔ);
		const ⲆⵠΔⲆⲆⲆⵠ = ((ᐃⲆⲆⵠⵠΔⲆ + 26983) * 2147483629 + 2147483587) % 2147483647;
		const ᐃⲆᐃⲆⵠΔⵠ = ᐃⲆⵠΔΔⲆΔ(ᐃⲆⵠⲆΔΔⲆ, ⲆⲆᐃᐃⵠΔΔ, ⲆⵠΔⲆⲆⲆⵠ);
		const ᐃⲆⵠΔⵠⵠᐃ = ᐃⲆⵠΔⲆⵠΔ(ᐃⲆⵠⲆΔΔⲆ, ⲆⲆᐃᐃⵠΔΔ, ⲆⵠΔⲆⲆⲆⵠ, ᐃⲆⵠⲆΔΔⲆ, ⲆⲆᐃᐃⵠΔΔ);
		const ΔⲆᐃᐃⲆⵠⲆ = (16 << ((ᐃⲆᐃⲆⵠΔⵠ ^ ᐃⲆⵠΔⵠⵠᐃ) >> ⲆΔⵠΔΔ & 255)) + (8 << ((ᐃⲆᐃⲆⵠΔⵠ ^ ᐃⲆⵠΔⵠⵠᐃ) >> 24 & 255)) + (0 << ((ᐃⲆᐃⲆⵠΔⵠ ^ ᐃⲆⵠΔⵠⵠᐃ) >> 0 & 255)) + (24 << ((ᐃⲆᐃⲆⵠΔⵠ ^ ᐃⲆⵠΔⵠⵠᐃ) >> 16 & 255));
		return ΔⲆᐃᐃⲆⵠⲆ
	}
	const ⵠⲆᐃⵠᐃ = ΔΔⲆΔⵠⲆⲆ;

	function ΔΔⵠᐃⵠΔΔ(ΔᐃΔΔᐃⵠⲆ, ΔⲆⵠΔⵠᐃⲆ, ⲆᐃⵠᐃᐃΔⵠ) {
		const ΔΔⲆᐃΔⲆⲆ = (24 << (ΔᐃΔΔᐃⵠⲆ >> 16 & 255)) + (16 << (ΔᐃΔΔᐃⵠⲆ >> 24 & 255)) + (8 << (ΔᐃΔΔᐃⵠⲆ >> 8 & 255)) + (0 << (ΔᐃΔΔᐃⵠⲆ >> 0 & ΔᐃᐃΔΔᐃⵠ));
		const ⲆΔⲆΔᐃⲆᐃ = 4080 ^ ΔⲆⵠΔⵠᐃⲆ;
		const ᐃΔⵠᐃᐃⲆⵠ = 13362 ^ ⲆᐃⵠᐃᐃΔⵠ;
		const ΔⵠᐃᐃΔⵠᐃ = ΔⲆΔⵠΔⲆⵠ(ΔΔⲆᐃΔⲆⲆ, ⲆΔⲆΔᐃⲆᐃ, ᐃΔⵠᐃᐃⲆⵠ, ΔΔⲆᐃΔⲆⲆ);
		const ⵠⵠⲆᐃᐃⲆⲆᐃⵠ = ⲆⲆⵠᐃᐃⲆⵠ(ⲆΔⲆΔᐃⲆᐃ, ᐃΔⵠᐃᐃⲆⵠ, ΔΔⲆᐃΔⲆⲆ, ⲆΔⲆΔᐃⲆᐃ, ᐃΔⵠᐃᐃⲆⵠ);
		const ⵠΔᐃⵠⵠⲆⵠ = ~(ΔⵠᐃᐃΔⵠᐃ & 5458) & ΔⵠᐃᐃΔⵠᐃ | ~(ΔⵠᐃᐃΔⵠᐃ & 5458) & 5458;
		return ⵠΔᐃⵠⵠⲆⵠ
	}
	const ᐃᐃᐃⲆⲆ = ΔΔⵠⵠ;

	function ᐃΔⲆⲆΔΔᐃ(ⲆⲆⵠᐃⲆΔⲆ, ᐃⵠⲆⲆⵠΔᐃ) {
		const ⲆⵠΔⲆⵠᐃΔ = 52988 ^ ⲆⲆⵠᐃⲆΔⲆ;
		const ⵠⵠⲆΔⲆᐃⲆ = ~(ᐃⵠⲆⲆⵠΔᐃ & 53286) & ᐃⵠⲆⲆⵠΔᐃ | ~(ᐃⵠⲆⲆⵠΔᐃ & 53286) & 53286;
		const ΔΔᐃᐃⵠᐃᐃ = ⵠⵠⲆᐃᐃΔᐃ(ⲆⵠΔⲆⵠᐃΔ, ⵠⵠⲆΔⲆᐃⲆ, ⲆⵠΔⲆⵠᐃΔ, ⵠⵠⲆΔⲆᐃⲆ, ⲆⵠΔⲆⵠᐃΔ, ⵠⵠⲆΔⲆᐃⲆ);
		const ᐃΔΔΔᐃᐃⲆ = ΔⵠⵠⲆⵠᐃΔ(ⲆⵠΔⲆⵠᐃΔ, ⵠⵠⲆΔⲆᐃⲆ, ⲆⵠΔⲆⵠᐃΔ, ⵠⵠⲆΔⲆᐃⲆ, ⲆⵠΔⲆⵠᐃΔ);
		const ᐃⵠΔⲆⲆᐃΔ = (0 << ((ΔΔᐃᐃⵠᐃᐃ ^ ᐃΔΔΔᐃᐃⲆ) >> 16 & 255)) + (ᐃⵠΔⵠᐃ << ((ΔΔᐃᐃⵠᐃᐃ ^ ᐃΔΔΔᐃᐃⲆ) >> 24 & 255)) + (24 << ((ΔΔᐃᐃⵠᐃᐃ ^ ᐃΔΔΔᐃᐃⲆ) >> 0 & 255)) + (16 << ((ΔΔᐃᐃⵠᐃᐃ ^ ᐃΔΔΔᐃᐃⲆ) >> 8 & 255));
		return ᐃⵠΔⲆⲆᐃΔ
	}
	const ⵠᐃⲆⲆΔ = ⵠΔΔᐃᐃ;
	const ΔᐃᐃΔᐃᐃΔ = ⵠⵠⲆΔᐃΔᐃ;
	const ⵠᐃⲆⵠΔⲆⵠ = ⲆⵠΔᐃΔ;

	function ΔⲆⲆᐃⵠᐃᐃ(ⲆΔΔΔᐃⵠΔ, ⵠⵠΔΔⵠΔⵠ, ᐃⲆⲆΔⲆΔΔ, ΔⲆⵠⲆΔⲆⲆ, ᐃΔⵠⵠⵠΔⵠ) {
		ⵠᐃⲆⲆⲆΔΔ(ⵠᐃΔᐃⵠ, ⲆΔΔΔᐃⵠΔ, ⵠⵠΔΔⵠΔⵠ, ᐃⲆⲆΔⲆΔΔ, ΔⲆⵠⲆΔⲆⲆ, ᐃΔⵠⵠⵠΔⵠ);
		const ⲆᐃᐃΔᐃⵠⲆ = ⵠⲆⲆΔⵠᐃⲆ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[ᐃⵠⵠⵠ]);
		const ⵠΔᐃⵠⲆᐃⵠ = ⵠⲆⵠⵠⲆᐃⲆ(Δⵠⵠᐃ[ΔΔⵠⲆ], Δⵠⵠᐃ[3], Δⵠⵠᐃ[ᐃΔΔΔⲆ], Δⵠⵠᐃ[Ⲇⵠᐃ], Δⵠⵠᐃ[1]);
		const ΔᐃⲆⵠΔⵠⵠ = (8 << ((ⲆᐃᐃΔᐃⵠⲆ ^ ⵠΔᐃⵠⲆᐃⵠ) >> 8 & 255)) + (0 << ((ⲆᐃᐃΔᐃⵠⲆ ^ ⵠΔᐃⵠⲆᐃⵠ) >> 0 & 255)) + (24 << ((ⲆᐃᐃΔᐃⵠⲆ ^ ⵠΔᐃⵠⲆᐃⵠ) >> ⵠᐃⵠⲆⵠⵠⲆ & 255)) + (16 << ((ⲆᐃᐃΔᐃⵠⲆ ^ ⵠΔᐃⵠⲆᐃⵠ) >> 24 & 255));
		return ΔᐃⲆⵠΔⵠⵠ
	}
	const ⲆⲆⲆᐃⵠ = ⲆⵠⲆᐃ;

	function ᐃⵠⲆⵠᐃⲆᐃ(ΔⲆⲆᐃⲆᐃΔ, ⲆⲆⲆᐃⲆⲆΔ, ⵠⲆⵠΔΔⲆⲆ, ⵠⵠⲆⲆΔⲆΔ, ⲆᐃᐃᐃΔΔΔ) {
		const ΔⲆΔⲆⲆΔⲆ = ΔⲆⲆᐃⲆᐃΔ ^ 11530;
		const ⵠᐃⲆᐃΔΔⲆ = (214013 * (ⲆⲆⲆᐃⲆⲆΔ + 56484) + 2531011) % 4294967296;
		const ᐃΔΔᐃΔⵠᐃ = (24 << (ⵠⲆⵠΔΔⲆⲆ >> 8 & 255)) + (0 << (ⵠⲆⵠΔΔⲆⲆ >> 16 & ΔΔᐃⲆⲆ)) + (8 << (ⵠⲆⵠΔΔⲆⲆ >> 0 & 255)) + (16 << (ⵠⲆⵠΔΔⲆⲆ >> 24 & 255));
		const ⲆᐃⵠⲆⵠⲆⲆ = ~(ⵠⵠⲆⲆΔⲆΔ & 18191) & (ⵠⵠⲆⲆΔⲆΔ | 18191);
		const ΔᐃⲆΔᐃΔⲆ = 19902 ^ ⲆᐃᐃᐃΔΔΔ;
		const ᐃⵠᐃᐃⲆᐃⵠ = ΔⲆⵠΔⵠⲆΔ(ΔⲆΔⲆⲆΔⲆ, ⵠᐃⲆᐃΔΔⲆ, ᐃΔΔᐃΔⵠᐃ, ⲆᐃⵠⲆⵠⲆⲆ, ΔᐃⲆΔᐃΔⲆ, ΔⲆΔⲆⲆΔⲆ);
		const ᐃᐃᐃΔᐃΔᐃⲆᐃ = ⲆⵠᐃⵠᐃᐃⲆ(ⵠᐃⲆᐃΔΔⲆ, ᐃΔΔᐃΔⵠᐃ);
		const ᐃΔΔΔΔΔⲆ = ᐃⵠᐃᐃⲆᐃⵠ ^ 20702;
		return ᐃΔΔΔΔΔⲆ
	}

	function ⲆⵠΔᐃΔΔⲆ(ⲆΔΔΔᐃⲆⵠ, ΔᐃⲆᐃⵠⲆⲆ, ⵠᐃᐃⵠΔΔⵠ, ᐃΔᐃΔΔⲆⲆ) {
		ⵠΔΔΔⲆⲆⵠ(ⵠᐃΔᐃⵠ, ⲆΔΔΔᐃⲆⵠ, ΔᐃⲆᐃⵠⲆⲆ, ⵠᐃᐃⵠΔΔⵠ, ᐃΔᐃΔΔⲆⲆ);
		const ᐃΔΔΔⲆᐃⵠ = ⵠⲆⵠⵠⲆᐃⲆ(Δⵠⵠᐃ[ᐃⲆᐃ], Δⵠⵠᐃ[1], Δⵠⵠᐃ[2], Δⵠⵠᐃ[3], Δⵠⵠᐃ[ΔᐃⲆⲆ]);
		const ᐃᐃᐃⵠΔΔΔⲆΔ = ΔⵠᐃⲆᐃⵠΔ(Δⵠⵠᐃ[ᐃΔΔⲆ], Δⵠⵠᐃ[ᐃᐃⲆⵠ]);
		const ᐃΔᐃⲆΔΔⵠ = ᐃΔΔΔⲆᐃⵠ ^ 28149;
		return ᐃΔᐃⲆΔΔⵠ
	}

	function ⲆᐃⵠᐃΔⵠⵠ(ⵠⲆⲆⵠᐃΔⵠ, ⵠΔⵠΔⵠᐃⵠ, ⲆⵠᐃⲆΔⵠⵠ, ⲆⵠⲆⵠⲆᐃⲆ, ⵠⲆᐃⵠΔⵠΔ, ΔⵠⲆⵠΔⲆⵠ) {
		const ⵠᐃⲆΔᐃⵠⵠ = ~(ⵠⲆⲆⵠᐃΔⵠ & 42830) & ⵠⲆⲆⵠᐃΔⵠ | ~(ⵠⲆⲆⵠᐃΔⵠ & 42830) & 42830;
		const ᐃⲆΔΔᐃⲆΔ = ((58323 + ⵠΔⵠΔⵠᐃⵠ) * 22695477 + ⲆⵠΔΔ) % 4294967296;
		const ⵠⵠⲆⵠⵠⲆⲆ = (2147483587 + (ⲆⵠᐃⲆΔⵠⵠ + 37631) * 2147483629) % 2147483647;
		const ΔᐃⵠⵠⵠⲆⵠ = (61038 | ⲆⵠⲆⵠⲆᐃⲆ) & ~(ⲆⵠⲆⵠⲆᐃⲆ & 61038);
		const ⲆⵠⵠⲆᐃⵠⵠ = ~(22146 & ⵠⲆᐃⵠΔⵠΔ) & ⵠⲆᐃⵠΔⵠΔ | ~(ⵠⲆᐃⵠΔⵠΔ & 22146) & 22146;
		const ⵠⵠΔⵠΔᐃⲆ = (0 << (ΔⵠⲆⵠΔⲆⵠ >> 24 & ⲆᐃΔΔᐃΔΔ)) + (24 << (ΔⵠⲆⵠΔⲆⵠ >> 0 & 255)) + (8 << (ΔⵠⲆⵠΔⲆⵠ >> 8 & 255)) + (16 << (ΔⵠⲆⵠΔⲆⵠ >> 16 & 255));
		const ΔⵠᐃⲆⲆⵠⵠ = ΔⲆΔⵠΔⲆⵠ(ⵠᐃⲆΔᐃⵠⵠ, ᐃⲆΔΔᐃⲆΔ, ⵠⵠⲆⵠⵠⲆⲆ, ΔᐃⵠⵠⵠⲆⵠ);
		const ⲆⲆΔΔⲆⲆΔⲆⲆ = ⲆΔⵠΔΔⲆᐃ(ⲆⵠⵠⲆᐃⵠⵠ, ⵠⵠΔⵠΔᐃⲆ, ⵠᐃⲆΔᐃⵠⵠ);
		const ᐃΔⲆΔⲆᐃᐃ = (ΔⵠᐃⲆⲆⵠⵠ | 53897) & ~(53897 & ΔⵠᐃⲆⲆⵠⵠ);
		return ᐃΔⲆΔⲆᐃᐃ
	}
	const ⵠᐃᐃᐃⵠⵠⵠ = ΔⲆⵠᐃⵠ;
	const ᐃⲆⲆᐃᐃⵠᐃ = ⲆᐃⲆΔⲆᐃⲆ;
	var ΔⲆΔᐃΔⲆⲆ = function() {
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠⵠᐃ] = [ᐃ[335]];
		ΔⲆᐃⵠ[22] = [ᐃ[236]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆᐃⵠ] = [ᐃ[207], ᐃ[31], ᐃ[116]];
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃᐃᐃΔⲆᐃ] = ᐃ[524];
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔᐃⵠⵠΔ] = ᐃ[293];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⲆⲆΔⲆⲆ] = ᐃ[332];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃΔⵠⵠΔΔ] = ᐃ[144];
		ⵠᐃⲆ[ᐃΔᐃ.POINTS] = ᐃ[263];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠᐃᐃΔΔ] = ᐃ[123];
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃⵠⵠΔⲆΔ] = ᐃ[326];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆⵠⵠΔⲆ] = ᐃ[336];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔⲆⵠᐃΔ] = ᐃ[460];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠᐃⲆᐃ] = ᐃ[510];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆᐃᐃ] = [ᐃ[69], ᐃ[312], ᐃ[536]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆΔᐃ] = [ᐃ[168], ᐃ[235], ᐃ[565], ᐃ[296]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆΔ] = [ᐃ[318], ᐃ[54], ᐃ[232], ᐃ[105], ᐃ[185], ᐃ[ⲆⵠⲆⵠⵠⲆⲆ]];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔΔⲆ] = [ᐃ[529], ᐃ[26], ᐃ[272], ᐃ[275], ᐃ[393]];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[541])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[135];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[107])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[382];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[558])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[553];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[329])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[58];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[253])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[204];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[257])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[206];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[149])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[ᐃⵠᐃⲆⲆ];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[489])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[203];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[416])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[127];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[466])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[59];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[377])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[493];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[571])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[384];
		for (var ᐃⲆ = ⵠΔⵠᐃ; 7 > ᐃⲆ; ᐃⲆ++) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[562] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[373];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[44])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[554];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆⵠᐃ] = ["Hand"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃᐃΔ] = ["Boden", "Dreckig!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⲆ] = ["Sand", "Ich habe es in meine Augen bekommen!"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆ] = ["Holz", "Du kannst niemals zu viel haben!"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔ] = ["Stein", "Auch Fels gennant"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⲆ] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃ] = ["Diamant", "Was wirst du daraus machen?"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠΔⲆ] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃᐃ] = ["Mehl", "wird fürs Backen gebraucht"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⲆΔ] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠΔ] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", ᐃ[570]];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⵠΔ] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔΔⲆ] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃᐃᐃ] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔΔⵠ] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔΔⲆ] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔⵠ] = [ᐃ[521], "Schmeckt wie Krabbenburger", ᐃ[570]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆᐃΔ] = ["Süßigkeiten", "Nur für Kinder!", ᐃ[570]];
		ⵠᐃⲆ[ΔⲆ.Ⲇⵠᐃⵠⵠ] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", ᐃ[570]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃⲆΔ] = ["Girlande", "perfekter Schmuck für Dächer"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔΔ] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", ᐃ[361], ᐃ[509]];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃΔᐃ] = ["Beere", "Beeren lecker!", "Essen: 10"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⲆⵠ] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", ᐃ[361], ᐃ[509]];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆΔΔ] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆΔᐃ] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", ᐃ[361], ᐃ[509]];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃᐃ] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃᐃⲆ] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", ᐃ[361], ᐃ[509]];
		ⵠᐃⲆ[ΔⲆ.Ⲇᐃᐃⵠⵠ] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⲆⵠΔ] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", ᐃ[572], ᐃ[509]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔⵠᐃ] = ["Dornenbusch", "Es sticht!"];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔⵠᐃ] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", ᐃ[ⲆⲆᐃⲆⵠ]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⵠ] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⲆ] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", ᐃ[323]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔⲆ] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆΔ] = ["Hasenfell", "Der Hase war so süß..."];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⵠᐃ] = ["Klares Fell", "Du bist eine Brotfabrik"];
		ⵠᐃⲆ[ΔⲆ.Δᐃᐃᐃᐃ] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⵠΔ] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⵠᐃΔ] = ["Schuppen", "Es riecht wie Fisch!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔΔ] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆΔᐃ] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⵠⲆᐃ] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆⵠ] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠⵠⲆ] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⵠΔ] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔⵠ] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆΔ] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔΔ] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⵠⵠⵠ] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⲆᐃ] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔΔ] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆΔⲆ] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆΔ] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔᐃⵠ] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃⵠ] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆⲆΔ] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", ᐃ[323]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃᐃ] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", ᐃ[197]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠΔⲆ] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", ᐃ[197]];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃᐃᐃ] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", ᐃ[197]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔⵠⲆ] = ["Steinhammer", ᐃ[134], "Funktioniert nicht gut gegen Diamant oder Amethyst", ᐃ[323], "Schaden an Gebäuden: 20"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔᐃ] = ["Goldhammer", ᐃ[134], "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⵠ] = ["Diamanthammer", ᐃ[134], "Schaden: 4", "Schaden an Gebäuden: 40"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃⵠ] = ["Amethysthammer", ᐃ[134], "Schaden: 5", "Schaden an Gebäuden: 50"];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃⲆΔ] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠᐃ] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⵠᐃᐃ] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃⲆᐃ] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃΔ] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆⲆ] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⵠⵠ] = ["Steinschaufel", ᐃ[245], ᐃ[467], ᐃ[323]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⲆΔ] = ["Goldschaufel", ᐃ[245], ᐃ[467], "Schaden: 3", ᐃ[197]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃΔⵠ] = ["Diamantschaufel", ᐃ[245], ᐃ[467], "Schaden: 4", ᐃ[197]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃⲆ] = ["Amethystschaufel", ᐃ[245], ᐃ[467], "Schaden: 5", ᐃ[197]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃᐃᐃ] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔᐃ] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃΔ] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠᐃᐃⵠ] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃᐃᐃⲆ] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃΔⵠ] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆᐃ] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", ᐃ[99]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠᐃⲆ] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", ᐃ[99]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⲆⲆ] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", ᐃ[99]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔⲆ] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", ᐃ[99]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔΔ] = ["Ohrwärmer", "Eine Art kleiner chapka.", ᐃ[99]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆΔⲆ] = [ᐃ[237], "Auch Mantel genannt.", ᐃ[99]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠⲆⵠ] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⵠⵠ] = ["Bauer", "Deine Pflanzen wachsen schneller", ᐃ[99]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃΔΔ] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", ᐃ[99]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⵠ] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", ᐃ[99]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔᐃ] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠⲆΔ] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", ᐃ[302]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃΔ] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⲆⵠᐃ] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆΔ] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃⲆ] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔⲆ] = ["Blauer Edelstein", "Für sehr nette Leute"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔΔ] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", ᐃ[302]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⲆⵠⵠ] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", ᐃ[302]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⵠᐃ] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", ᐃ[302]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆΔⲆ] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⵠᐃ] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔᐃⵠ] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆⲆⲆ] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆⲆⵠ] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⵠⲆ] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔ] = ["Rucksack", "Mehr Platz im Inventar!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔᐃ] = ["Papier", "Wird fürs Büchermachen verwendet"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⲆΔᐃ] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠᐃⲆ] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⵠⵠ] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃΔΔ] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⲆΔ] = [ᐃ[194], "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆᐃⲆᐃ] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔΔ] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⲆⵠ] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃΔ] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", ᐃ[572]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔⲆΔ] = ["Holzwand", "Kennst du den Wandtanz?", ᐃ[572]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠᐃΔ] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠᐃΔ] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", ᐃ[ⲆⲆⲆᐃⲆ]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔᐃ] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠᐃᐃ] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠΔⵠΔ] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠΔᐃ] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃⲆ] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔᐃ] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⲆΔ] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔⲆΔ] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", ᐃ[572]];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔⲆ] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⲆⲆ] = ["Goldtür", "Baust du el dorado?", ᐃ[ΔᐃⵠΔⵠ]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⲆ] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃᐃ] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆⲆⵠ] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", ᐃ[572]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⵠᐃ] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", ᐃ[ⲆᐃⲆᐃᐃ]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⲆⲆⵠ] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", ᐃ[8]];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃΔΔ] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔᐃⵠΔⵠⲆ] = "Du kannst diesem Server nicht beitreten";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔΔⵠΔ] = "Gekickt: ";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆᐃⵠⵠ] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⵠⲆΔᐃⲆ] = "Dein Schlüssel ist falsch";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "Deine Version ist veraltet, säubere dein Cache";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠΔⵠΔΔᐃᐃ] = "Es gibt keine neuen Ressourcen";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠΔⲆⵠ] = "Du hast einen Tag überlebt";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃᐃΔᐃⵠᐃ] = "Du hast überlebt ";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠΔⵠᐃΔ] = " Tage";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⲆⵠⵠΔᐃΔ] = "Du bist gestorben ;-;";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔΔⲆᐃΔΔ] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⵠⲆΔⲆᐃⵠ] = "Server ist voll! Drücke immer wieder auf spielen!";
		ⵠᐃⲆ[ᐃΔᐃ.EMPTY] = "Ressource ist leer";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔⵠΔⵠ] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆΔⲆΔ] = " ist gestorben";
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠⵠᐃⲆᐃ] = "Das ist nicht das richtige Werkzeug";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⵠΔⵠᐃ] = "Du bist einem Team beigetreten";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆΔΔΔⲆ] = "Du bist gestorben";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃΔΔΔᐃ] = " ist dem Team beigetreten";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠᐃⵠ] = "Dein Team wurde zerstört";
		ⵠᐃⲆ[ᐃΔᐃ.Δᐃⵠᐃᐃᐃᐃ] = "Du hast das Team verlassen";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃⵠᐃΔⲆ] = " hat das Team verlassen";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠᐃΔ] = "Jemand hat dein Token gestohlen :>";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⵠⲆⲆᐃⵠ] = "Suche dir ein Server aus";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃⲆᐃ] = "Spieler";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔⵠᐃⲆΔ] = "alle Spieler";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆⲆᐃⲆ] = "Spieler in diesem Modus";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆⵠΔⵠⵠⲆⲆ] = "Bald verfügbar...";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[412]).placeholder = "Spitzname";
		ΔⲆᐃⵠ[ⵠⵠᐃ] = ["Du wurdest ohne Grund getötet"];
		ΔⲆᐃⵠ[ⲆⵠⲆ] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
		ΔⲆᐃⵠ[ΔⲆⵠΔ] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
		ΔⲆᐃⵠ[ⵠᐃᐃⵠ] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
		ΔⲆᐃⵠ[ⲆⲆⲆΔ] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
		ΔⲆᐃⵠ[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
		ΔⲆᐃⵠ[ᐃⵠⵠᐃⵠ] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
		ΔⲆᐃⵠ[ⲆⵠⵠΔᐃ] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
		ΔⲆᐃⵠ[ⵠΔΔᐃⲆ] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
		ΔⲆᐃⵠ[ᐃΔⵠᐃᐃ] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
		ΔⲆᐃⵠ[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
		ΔⲆᐃⵠ[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
		ΔⲆᐃⵠ[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
		ΔⲆᐃⵠ[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
		ΔⲆᐃⵠ[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
		ΔⲆᐃⵠ[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
		ΔⲆᐃⵠ[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
		ΔⲆᐃⵠ[ᐃᐃⵠⲆΔⲆᐃ] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
		ΔⲆᐃⵠ[ⵠⲆΔⵠᐃᐃⲆ] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
		ΔⲆᐃⵠ[ΔΔΔⲆᐃⵠⵠ] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
		ΔⲆᐃⵠ[ⵠⲆᐃⲆⵠ] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
		ΔⲆᐃⵠ[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
		ⲆⲆⲆⲆⵠ = ᐃ[229];
		ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", ᐃ[274], "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"]
	};
	const ᐃᐃᐃΔⲆΔⲆⲆⵠ = ΔΔᐃΔΔᐃⲆ;
	const ⲆⵠΔⵠⲆΔΔ = ΔⵠⲆᐃⲆ;

	function ⵠᐃᐃⵠⲆⲆΔ(ⲆᐃⵠᐃΔⵠⲆ, ΔⵠᐃⵠⵠⲆⵠ, ⵠⲆᐃΔⵠⲆΔ, ΔⲆⲆΔΔⲆᐃ) {
		const ⵠΔΔⵠᐃΔⲆ = (214013 * (29614 + ⲆᐃⵠᐃΔⵠⲆ) + 2531011) % 4294967296;
		const ⲆᐃⵠⲆΔᐃⲆ = ~(ΔⵠᐃⵠⵠⲆⵠ & 818) & 818 | ~(818 & ΔⵠᐃⵠⵠⲆⵠ) & ΔⵠᐃⵠⵠⲆⵠ;
		const ⵠⲆⲆⵠᐃᐃⵠ = (ⵠⲆᐃΔⵠⲆΔ + 34609) % 65474;
		const ᐃΔⵠᐃᐃⵠᐃ = ΔⲆⲆΔΔⲆᐃ ^ 25390;
		const ⲆⵠΔΔᐃⵠⲆ = ⵠⲆⵠⲆΔⲆᐃ(ⵠΔΔⵠᐃΔⲆ, ⲆᐃⵠⲆΔᐃⲆ, ⵠⲆⲆⵠᐃᐃⵠ);
		const ⲆⵠⵠΔᐃᐃᐃΔⲆ = ΔⵠⲆⵠᐃΔᐃ(ᐃΔⵠᐃᐃⵠᐃ, ⵠΔΔⵠᐃΔⲆ);
		const ΔⵠᐃⲆᐃⵠⵠ = 33256 ^ ⲆⵠΔΔᐃⵠⲆ;
		return ΔⵠᐃⲆᐃⵠⵠ
	}

	function ᐃⲆᐃᐃΔΔⵠ(ᐃΔΔΔΔΔΔ, ᐃⵠΔⵠΔⲆⲆ, ΔⲆΔΔⲆᐃᐃ, ΔΔⲆⲆᐃΔⵠ, ᐃΔⵠⵠⵠΔΔ) {
		const ᐃΔⲆⵠⵠᐃⲆ = ~(11157 & ᐃΔΔΔΔΔΔ) & ᐃΔΔΔΔΔΔ | ~(ᐃΔΔΔΔΔΔ & 11157) & 11157;
		const ⲆⵠⵠΔⵠⲆⲆ = ᐃⵠΔⵠΔⲆⲆ ^ 10238;
		const ᐃⲆΔᐃⲆⵠΔ = (52982 | ΔⲆΔΔⲆᐃᐃ) & ~(52982 & ΔⲆΔΔⲆᐃᐃ);
		const ⵠⵠⲆⵠΔΔⵠ = (24 << (ΔΔⲆⲆᐃΔⵠ >> 24 & ΔᐃᐃΔΔᐃⵠ)) + (0 << (ΔΔⲆⲆᐃΔⵠ >> 8 & 255)) + (8 << (ΔΔⲆⲆᐃΔⵠ >> 16 & 255)) + (16 << (ΔΔⲆⲆᐃΔⵠ >> 0 & 255));
		const ΔⲆΔΔᐃᐃᐃ = (22695477 * (ᐃΔⵠⵠⵠΔΔ + 43957) + 1) % 4294967296;
		const ⵠᐃⵠᐃⲆΔⲆ = ΔΔΔⵠᐃΔⲆ(ᐃΔⲆⵠⵠᐃⲆ, ⲆⵠⵠΔⵠⲆⲆ, ᐃⲆΔᐃⲆⵠΔ, ⵠⵠⲆⵠΔΔⵠ, ΔⲆΔΔᐃᐃᐃ);
		const ⲆΔⵠⲆⵠⲆᐃⲆᐃ = ⲆΔⵠΔΔⲆᐃ(ᐃΔⲆⵠⵠᐃⲆ, ⲆⵠⵠΔⵠⲆⲆ, ᐃⲆΔᐃⲆⵠΔ);
		const ⵠⵠᐃΔΔⲆⲆ = (ⵠᐃⵠᐃⲆΔⲆ | 12975) & ~(12975 & ⵠᐃⵠᐃⲆΔⲆ);
		return ⵠⵠᐃΔΔⲆⲆ
	}

	function ΔΔΔⵠᐃΔⲆ(ⵠⲆⵠⵠᐃᐃⲆ, ΔⲆᐃᐃⲆᐃΔ, ΔᐃⵠΔⲆΔⵠ, ⵠⲆⲆⵠΔΔᐃ, ᐃᐃⲆᐃΔΔΔ) {
		const ⵠⵠⲆⲆⵠⲆⵠ = ((48767 + ⵠⲆⵠⵠᐃᐃⲆ) * 2147483629 + 2147483587) % 2147483647;
		const ⵠⵠᐃΔΔⲆⵠ = (1 + (38444 + ΔⲆᐃᐃⲆᐃΔ) * 22695477) % 4294967296;
		const ⲆΔΔΔᐃΔⵠ = ~(ΔᐃⵠΔⲆΔⵠ & 8098) & 8098 | ~(8098 & ΔᐃⵠΔⲆΔⵠ) & ΔᐃⵠΔⲆΔⵠ;
		const ᐃᐃᐃⲆⵠᐃΔ = (ⵠⲆⲆⵠΔΔᐃ + 16932) % 65461;
		const ⵠΔᐃⵠⵠᐃⵠ = ~(29540 & ᐃᐃⲆᐃΔΔΔ) & (29540 | ᐃᐃⲆᐃΔΔΔ);
		const ⵠⵠⵠΔⵠⵠᐃ = ᐃⲆⵠⵠΔᐃᐃ(ⵠⵠⲆⲆⵠⲆⵠ, ⵠⵠᐃΔΔⲆⵠ, ⲆΔΔΔᐃΔⵠ, ᐃᐃᐃⲆⵠᐃΔ, ⵠΔᐃⵠⵠᐃⵠ, ⵠⵠⲆⲆⵠⲆⵠ);
		const ⲆⲆᐃᐃᐃⵠⵠⲆⵠ = ᐃΔⲆⲆΔΔᐃ(ⵠⵠᐃΔΔⲆⵠ, ⲆΔΔΔᐃΔⵠ);
		const ᐃⵠᐃᐃΔⲆΔ = ~(34915 & ⵠⵠⵠΔⵠⵠᐃ) & (ⵠⵠⵠΔⵠⵠᐃ | 34915);
		return ᐃⵠᐃᐃΔⲆΔ
	}
	const ᐃⵠⲆᐃΔᐃⲆᐃᐃ = ⲆᐃⲆᐃⵠΔᐃ;

	function ᐃⲆΔΔΔⲆⵠ(ⵠⵠᐃΔⲆΔΔ, ᐃᐃⵠⵠⵠ, ᐃⵠⵠΔⵠⵠᐃ, ⵠⲆᐃⲆⲆⲆⵠ) {
		ⵠΔΔΔⲆⲆⲆ(ⵠᐃΔᐃⵠ, ⵠⵠᐃΔⲆΔΔ, ᐃᐃⵠⵠⵠ, ᐃⵠⵠΔⵠⵠᐃ, ⵠⲆᐃⲆⲆⲆⵠ);
		const ⵠⵠΔⲆⲆⵠⲆ = ΔΔⲆⲆⵠΔⵠ(Δⵠⵠᐃ[ⵠᐃⵠ], Δⵠⵠᐃ[ᐃΔΔⲆ], Δⵠⵠᐃ[2], Δⵠⵠᐃ[3], Δⵠⵠᐃ[0]);
		const ΔᐃᐃΔᐃⲆⵠΔᐃ = ΔⲆᐃⵠⲆΔⲆ(Δⵠⵠᐃ[1], Δⵠⵠᐃ[2], Δⵠⵠᐃ[ᐃΔΔΔ], Δⵠⵠᐃ[ⵠⵠⵠ], Δⵠⵠᐃ[ⲆⲆᐃⵠ]);
		const ⵠΔⲆᐃᐃᐃᐃ = (ⵠⵠΔⲆⲆⵠⲆ | 44192) & ~(ⵠⵠΔⲆⲆⵠⲆ & 44192);
		return ⵠΔⲆᐃᐃᐃᐃ
	}
	var ⵠΔⲆΔⲆⵠᐃ = function() {
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠⵠᐃ] = [ᐃ[335]];
		ΔⲆᐃⵠ[22] = [ᐃ[236]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆᐃⵠ] = [ᐃ[207], ᐃ[31], ᐃ[116]];
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃᐃᐃΔⲆᐃ] = ᐃ[524];
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔᐃⵠⵠΔ] = ᐃ[293];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⲆⲆΔⲆⲆ] = ᐃ[332];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃΔⵠⵠΔΔ] = ᐃ[144];
		ⵠᐃⲆ[ᐃΔᐃ.POINTS] = ᐃ[263];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠᐃᐃΔΔ] = ᐃ[123];
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃⵠⵠΔⲆΔ] = ᐃ[326];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆⵠⵠΔⲆ] = ᐃ[336];
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔⲆⵠᐃΔ] = ᐃ[460];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠᐃⲆᐃ] = ᐃ[510];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆᐃᐃ] = [ᐃ[69], ᐃ[312], ᐃ[536]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆΔᐃ] = [ᐃ[168], ᐃ[235], ᐃ[565], ᐃ[296]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆΔ] = [ᐃ[318], ᐃ[54], ᐃ[232], ᐃ[105], ᐃ[185], ᐃ[13]];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔΔⲆ] = [ᐃ[529], ᐃ[26], ᐃ[272], ᐃ[275], ᐃ[393]];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[541])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[135];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[107])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[382];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[558])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[553];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[329])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[58];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[253])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[204];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[257])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[206];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[149])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[ΔᐃⵠⲆⲆ];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[489])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[203];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[416])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[127];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[466])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[59];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[377])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[493];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[571])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[384];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆᐃᐃΔΔ; ᐃⲆ++) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[562] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[373];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[44])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃ[554];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆⵠᐃ] = ["Ręka"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃᐃΔ] = ["Ziemia", "Brudna!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⲆ] = ["Piasek", "Mam go w oczach!"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆ] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔ] = ["Kamień", "Także nazywany skałą"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⲆ] = ["Złoto", "Bądź hojny, daj trochę innym"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃ] = ["Diament", "Co z nim zrobisz?"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠΔⲆ] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃᐃ] = ["Mąka", "Używana w gotowaniu"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⲆΔ] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠΔ] = ["Ciasto", "Raj dla smakoszy", ᐃ[177]];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⵠΔ] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔΔⲆ] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃᐃᐃ] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔΔⵠ] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔΔⲆ] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔⵠ] = ["Kanapka", "Smakuje jak kraboburger", ᐃ[177]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆᐃΔ] = ["Cukierki", "Tylko dla dzieci!", ᐃ[177]];
		ⵠᐃⲆ[ΔⲆ.Ⲇⵠᐃⵠⵠ] = ["Laska cukrowa", "Spróbuj, jest przepyszna", ᐃ[177]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃⲆΔ] = ["Girlanda", "Idealna do dekorowania dachów"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔΔ] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", ᐃ[472], ᐃ[220]];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃΔᐃ] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⲆⵠ] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", ᐃ[472], ᐃ[220]];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆΔΔ] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆΔᐃ] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", ᐃ[472], ᐃ[220]];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃᐃ] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃᐃⲆ] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", ᐃ[472], ᐃ[220]];
		ⵠᐃⲆ[ΔⲆ.Ⲇᐃᐃⵠⵠ] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⲆⵠΔ] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", ᐃ[432], ᐃ[220]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔⵠᐃ] = ["Kolczasty krzew", "Kłuje!"];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔⵠᐃ] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", ᐃ[ΔΔΔⵠᐃⵠⵠ]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⵠ] = ["Lód", "Użyteczny do robienia ciast i wody"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⲆ] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔⲆ] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆΔ] = ["Skóra królika", "Ten królik był taki słodziutki..."];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⵠᐃ] = ["Skóra", "Jesteś fabryką chleba"];
		ⵠᐃⲆ[ΔⲆ.Δᐃᐃᐃᐃ] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⵠΔ] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⵠᐃΔ] = ["Łuski", "Pachnie jak ryba!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔΔ] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆΔᐃ] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⵠⲆᐃ] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆⵠ] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠⵠⲆ] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⵠΔ] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔⵠ] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆΔ] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔΔ] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⵠⵠⵠ] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⲆᐃ] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔΔ] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆΔⲆ] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆΔ] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔᐃⵠ] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃⵠ] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆⲆΔ] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃᐃ] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", ᐃ[308]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠΔⲆ] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", ᐃ[308]];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃᐃᐃ] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", ᐃ[308]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔⵠⲆ] = ["Kamienny młot", ᐃ[511], "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔᐃ] = ["Złoty młot", ᐃ[511], "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⵠ] = ["Diamentowy młot", ᐃ[511], "Obrażenia: 4", "Obrażenia do budowli: 40"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃⵠ] = ["Ametystowy młot", ᐃ[511], "Obrażenia: 5", "Obrażenia do budowli: 50"];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃⲆΔ] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠᐃ] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⵠᐃᐃ] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃⲆᐃ] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃΔ] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆⲆ] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⵠⵠ] = ["Kamienna łopata", ᐃ[433], ᐃ[21], "Obrażenia: 2"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⲆΔ] = ["Złota łopata", ᐃ[433], ᐃ[21], "Obrażenia: 3", ᐃ[308]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃΔⵠ] = ["Diamentowa łopata", ᐃ[433], ᐃ[21], "Obrażenia: 4", ᐃ[308]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃⲆ] = ["Ametystowa łopata", ᐃ[433], ᐃ[21], "Obrażenia: 5", ᐃ[308]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃᐃᐃ] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔᐃ] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃΔ] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠᐃᐃⵠ] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃᐃᐃⲆ] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃΔⵠ] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆᐃ] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", ᐃ[1]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠᐃⲆ] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", ᐃ[1]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⲆⲆ] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", ᐃ[1]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔⲆ] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔΔ] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", ᐃ[Δⵠᐃ]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆΔⲆ] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠⲆⵠ] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⵠⵠ] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃΔΔ] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⵠ] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", ᐃ[ⵠⵠⵠⲆ]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔᐃ] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠⲆΔ] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", ᐃ[459]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃΔ] = ["Smocza kula", "Zdobyta podczas zadania"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⲆⵠᐃ] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆΔ] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃⲆ] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔⲆ] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔΔ] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", ᐃ[459]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⲆⵠⵠ] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", ᐃ[459]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⵠᐃ] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", ᐃ[459]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆΔⲆ] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⵠᐃ] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔᐃⵠ] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆⲆⲆ] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆⲆⵠ] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⵠⲆ] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔ] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔᐃ] = ["Papier", "Używany w tworzeniu książki"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⲆΔᐃ] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠᐃⲆ] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⵠⵠ] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃΔΔ] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⲆΔ] = [ᐃ[194], "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆᐃⲆᐃ] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔΔ] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⲆⵠ] = ["Dach", "Trochę cie ogrzewa i chowa!"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃΔ] = ["Studnia", "Umożliwia napełnienie butelki", ᐃ[432]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔⲆΔ] = ["Drewniany mur", "Znasz taniec ścian?", ᐃ[432]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠᐃΔ] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠᐃΔ] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", ᐃ[Δⵠⵠᐃᐃ]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔᐃ] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠᐃᐃ] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠΔⵠΔ] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠΔᐃ] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃⲆ] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔᐃ] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⲆΔ] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔⲆΔ] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", ᐃ[432]];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔⲆ] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⲆⲆ] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", ᐃ[14]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⲆ] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃᐃ] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆⲆⵠ] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", ᐃ[432]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⵠᐃ] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", ᐃ[ΔⲆⵠᐃⲆⵠⵠ]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⲆⲆⵠ] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", ᐃ[ΔⲆᐃΔⲆⲆΔ]];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃΔΔ] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔᐃⵠΔⵠⲆ] = "Nie możesz dołączyć do tego serwera";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔΔⵠΔ] = "Wyrzucony: ";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆᐃⵠⵠ] = "Twój klucz jest aktualnie używany przez innego gracza";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⵠⲆΔᐃⲆ] = "Twój klucz jest nieprawidłowy";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠΔⵠΔΔᐃᐃ] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠΔⲆⵠ] = "Przeżyłeś 1 dzień";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃᐃΔᐃⵠᐃ] = "Przeżyłeś ";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠΔⵠᐃΔ] = " dni";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⲆⵠⵠΔᐃΔ] = "Jesteś martwy ;-;";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔΔⲆᐃΔΔ] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⵠⲆΔⲆᐃⵠ] = "Serwer jest pełny! Spamuj przycisk zagraj!";
		ⵠᐃⲆ[ᐃΔᐃ.EMPTY] = "Źródło jest puste";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔⵠΔⵠ] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆΔⲆΔ] = " jest martwy";
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠⵠᐃⲆᐃ] = "To nie jest właściwe narzędzie";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⵠΔⵠᐃ] = "Dołączyłeś do drużyny";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆΔΔΔⲆ] = "Jesteś martwy";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃΔΔΔᐃ] = " dołączył do drużyny";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠᐃⵠ] = "Twoja drużyna została zniszczona";
		ⵠᐃⲆ[ᐃΔᐃ.Δᐃⵠᐃᐃᐃᐃ] = " Opuściłeś drużynę";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃⵠᐃΔⲆ] = " opuścił drużynę";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠᐃΔ] = "Ktoś ukradł twój żeton :>";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⵠⲆⲆᐃⵠ] = "Wybierz serwer";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃⲆᐃ] = "graczy";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔⵠᐃⲆΔ] = "wszystkich graczy";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆⲆᐃⲆ] = "graczy w tym trybie";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆⵠΔⵠⵠⲆⲆ] = "Już wkrótce...";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[412]).placeholder = "Przydomek";
		ΔⲆᐃⵠ[0] = ["Zostałeś zabity bez powodu"];
		ΔⲆᐃⵠ[ⵠᐃᐃ] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
		ΔⲆᐃⵠ[ⵠΔΔΔ] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
		ΔⲆᐃⵠ[ⵠᐃᐃΔ] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
		ΔⲆᐃⵠ[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
		ΔⲆᐃⵠ[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
		ΔⲆᐃⵠ[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
		ΔⲆᐃⵠ[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
		ΔⲆᐃⵠ[ⲆⵠΔᐃⵠⵠΔ] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
		ΔⲆᐃⵠ[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
		ΔⲆᐃⵠ[ⲆΔᐃⵠΔ] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
		ΔⲆᐃⵠ[ⵠᐃⵠⵠᐃᐃΔ] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
		ΔⲆᐃⵠ[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
		ΔⲆᐃⵠ[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
		ΔⲆᐃⵠ[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
		ΔⲆᐃⵠ[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
		ΔⲆᐃⵠ[ᐃΔᐃⲆⲆ] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
		ΔⲆᐃⵠ[17] = ["Twoja skóra odpada, słońce cię zabija."];
		ΔⲆᐃⵠ[ⲆᐃⲆᐃⵠᐃᐃ] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
		ΔⲆᐃⵠ[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
		ΔⲆᐃⵠ[ⲆⲆⵠΔΔ] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
		ΔⲆᐃⵠ[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
		ⲆⲆⲆⲆⵠ = ᐃ[229];
		ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", ᐃ[274], "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"]
	};
	var ΔΔΔⵠⲆⵠΔ = function() {
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠⵠᐃ] = [ᐃ[335]];
		ΔⲆᐃⵠ[22] = [ᐃ[236]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆᐃⵠ] = [ᐃ[207], ᐃ[31], ᐃ[116]];
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃᐃᐃΔⲆᐃ] = " RETOUR AU JEU";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔᐃⵠⵠΔ] = " Partage sur Twitter";
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⲆⲆΔⲆⲆ] = " Partage sur Facebook";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃΔⵠⵠΔΔ] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
		ⵠᐃⲆ[ᐃΔᐃ.POINTS] = ᐃ[263];
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠᐃᐃΔΔ] = ᐃ[123];
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃⵠⵠΔⲆΔ] = "Tués";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆⵠⵠΔⲆ] = "Jours survécus";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔⲆⵠᐃΔ] = "Mode de construction: Libre. Appuie sur G pour changer";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠᐃⲆᐃ] = "Mode de construction: Grille. Appuie sur G pour changer";
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆᐃᐃ] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", ᐃ[536]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆΔᐃ] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", ᐃ[565], ᐃ[296]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆΔ] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", ᐃ[185], ᐃ[13]];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔΔⲆ] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", ᐃ[393]];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[541])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "Chrono Quêtes";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[107])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "Temps Restant";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[558])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = " Contraintes";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[329])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = " Résultat";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[253])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = " Récompenses";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[257])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = " Collecte 1 Cœur de dragon dans la cave";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[149])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = " Récolte 1 améthyste";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[489])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "Survis sans perdre de vie";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[416])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = " Ouvre 5 coffres au trésor";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[466])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = " Sois pacifique";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[377])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[571])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = " Après 1 jour, survis en hiver";
		for (var ᐃⲆ = Ⲇⵠⵠᐃ; 7 > ᐃⲆ; ᐃⲆ++) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[562] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "RÉCOMPENSE!";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[44])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = " QUITTER";
		ⵠᐃⲆ[ΔⲆ.ΔΔⲆⵠᐃ] = ["Main"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃᐃΔ] = ["Terre", "C'est sale!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⲆ] = ["Sable", "J'en ai dans les yeux"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆ] = ["Bois", "Tu n'en auras jamais trop!"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔ] = ["Pierre", "Aussi appelée roche"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⲆ] = ["Or", "Sois généreux, donne en aux autres"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃ] = ["Diamant", "Comme tes yeux! wesh"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠΔⲆ] = ["Améthyste", "C'est Mauve comme Lapa"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃᐃ] = ["Farine", "Utile pour la cuisine"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⲆΔ] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠΔ] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⵠΔ] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔΔⲆ] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃᐃᐃ] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔΔⵠ] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔΔⲆ] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔⵠ] = [ᐃ[521], "Le Jambon Beurre vaincra", "Nourriture: 100"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆᐃΔ] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
		ⵠᐃⲆ[ΔⲆ.Ⲇⵠᐃⵠⵠ] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃⲆΔ] = ["Guirlandes", "Utilisable sur les toits"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔΔ] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", ᐃ[219], ᐃ[462]];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠᐃΔᐃ] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⲆⵠ] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", ᐃ[219], ᐃ[462]];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆΔΔ] = ["Blé", "Peut être transformé en farine dans les moulins"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆΔᐃ] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", ᐃ[219], ᐃ[462]];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃᐃ] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃᐃⲆ] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", ᐃ[219], ᐃ[462]];
		ⵠᐃⲆ[ΔⲆ.Ⲇᐃᐃⵠⵠ] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⲆⵠΔ] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", ᐃ[304], ᐃ[462]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔⵠᐃ] = ["Ronces", "Ça pique!"];
		ⵠᐃⲆ[ΔⲆ.ΔΔΔⵠᐃ] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", ᐃ[486]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⵠ] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆⲆⲆ] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", ᐃ[170]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔⲆ] = ["Peau de loup", "Il était où le gentil ti Youki?"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆΔ] = ["Peau de lapin", "Vous êtes un monstre"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⵠᐃ] = ["Fourrure blanche", "Tu es une usine à pain"];
		ⵠᐃⲆ[ΔⲆ.Δᐃᐃᐃᐃ] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⵠΔ] = ["Fourrure d'hiver", "Il voulait juste un calin"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⵠᐃΔ] = ["Écailles", "Ça sent le poisson!"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔΔ] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆΔᐃ] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⵠⲆᐃ] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠΔⲆⵠ] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠⵠⲆ] = ["Fil", "Utile pour faire des chapeaux et un sac"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠⵠΔ] = ["Fil de diamant", "Utile pour faire des chapeaux"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔⵠ] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆΔ] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔΔ] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⵠⵠⵠ] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⲆᐃ] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔΔ] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆΔⲆ] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃⲆΔ] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
		ⵠᐃⲆ[ΔⲆ.ᐃΔΔᐃⵠ] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃⵠ] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⲆⲆΔ] = ["Pioche en pierre", "Peut aussi récolter de l'or", ᐃ[170]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃᐃ] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠΔⲆ] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃᐃᐃ] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃΔⵠⲆ] = ["Marteau en pierre", ᐃ[380], "Ne marche pas bien sur du diamant et améthyste", ᐃ[170], "Démolition: 20"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠΔᐃ] = ["Marteau en or", ᐃ[380], "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃⵠⵠ] = ["Marteau en diamant", ᐃ[380], "Dégâts: 4", "Démolition: 40"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃⵠ] = ["Marteau en améthyste", ᐃ[380], "Dégâts: 5", "Démolition: 50"];
		ⵠᐃⲆ[ΔⲆ.ΔΔᐃⲆΔ] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃⵠᐃ] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⵠᐃᐃ] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃⲆᐃ] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆᐃΔ] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⲆⲆ] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⵠⵠ] = ["Pelle en pierre", ᐃ[381], ᐃ[516], ᐃ[170]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠⲆⲆΔ] = ["Pelle en or", ᐃ[381], ᐃ[516], "Dégâts: 3", "Buildings Dégâts: 1"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃΔⵠ] = ["Pelle en diamant", ᐃ[381], ᐃ[516], "Dégâts: 4", "Buildings Dégâts: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠᐃⲆ] = ["Pelle en améthyste", ᐃ[381], ᐃ[516], "Dégâts: 5", "Buildings Dégâts: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃᐃᐃ] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠΔᐃ] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃΔᐃΔ] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠᐃᐃⵠ] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃᐃᐃⲆ] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃᐃΔⵠ] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆᐃ] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", ᐃ[407]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⵠᐃⲆ] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", ᐃ[407]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠⲆⲆ] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", ᐃ[407]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔⲆ] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", ᐃ[407]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔᐃΔΔ] = ["Cache-oreilles", "Une sorte de petite chapka.", ᐃ[407]];
		ⵠᐃⲆ[ΔⲆ.ᐃΔⲆΔⲆ] = [ᐃ[237], "Comment ça va, camarade?", ᐃ[407]];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⵠⲆⵠ] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⵠⵠ] = ["Tunique", "Les plantes poussent plus vite", ᐃ[407]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆᐃΔΔ] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", ᐃ[407]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⵠ] = ["Tunique d'hiver", "Tes plantes poussent plus vite", ᐃ[407]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆᐃΔᐃ] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠⲆΔ] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", ᐃ[404]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃΔ] = ["Orbe du Dragon", "Donné en Quête"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⲆⵠᐃ] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆΔ] = ["Gemme verte", "Tu n'as pas triché, promis?"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆᐃⲆ] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔⲆ] = ["Gemme bleue", "Pour les gens trop gentils"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔΔ] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", ᐃ[404]];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⲆⵠⵠ] = ["Couronne orange", "Tu te sens soudainement très chanceux", ᐃ[404]];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃΔⵠᐃ] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", ᐃ[404]];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆΔⲆ] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔⵠⵠᐃ] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔᐃⵠ] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃⲆⲆⲆ] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆⲆⲆⵠ] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⵠⲆ] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆⵠⲆΔ] = ["Sac", "Plus de place dans ton inventaire!"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆᐃΔᐃ] = ["Papier", "Pour fabriquer toute sorte d'objets"];
		ⵠᐃⲆ[ΔⲆ.ⵠΔⲆΔᐃ] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆⵠᐃⲆ] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔᐃⵠⵠ] = ["Cadenas", "Pour verrouiller un coffre"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠᐃΔΔ] = ["Clé", "Pour déverrouiller un coffre"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⲆⲆΔ] = [ᐃ[194], "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆᐃⲆᐃ] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔΔ] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆΔⲆⵠ] = ["Toit", "Te cache un peu et te réchauffe"];
		ⵠᐃⲆ[ΔⲆ.ⵠᐃᐃᐃΔ] = ["Puit", "Permet de remplir des bouteilles", ᐃ[304]];
		ⵠᐃⲆ[ΔⲆ.ⵠⵠΔⲆΔ] = ["Mur en bois", "Tu connais la danse des murs?", ᐃ[304]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⵠᐃΔ] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆⵠᐃΔ] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", ᐃ[486]];
		ⵠᐃⲆ[ΔⲆ.ΔΔⵠΔᐃ] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
		ⵠᐃⲆ[ΔⲆ.ᐃᐃⵠᐃᐃ] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠΔⵠΔ] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
		ⵠᐃⲆ[ΔⲆ.ΔᐃⵠΔᐃ] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆᐃⲆ] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
		ⵠᐃⲆ[ΔⲆ.ᐃⲆΔΔᐃ] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
		ⵠᐃⲆ[ΔⲆ.ΔⲆⲆⲆΔ] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
		ⵠᐃⲆ[ΔⲆ.ⵠⲆΔⲆΔ] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", ᐃ[304]];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃⵠΔⲆ] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
		ⵠᐃⲆ[ΔⲆ.ⲆᐃΔⲆⲆ] = ["Porte en or", "Tu reconstruis l'el dorado?", ᐃ[486]];
		ⵠᐃⲆ[ΔⲆ.ΔᐃᐃⲆⲆ] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
		ⵠᐃⲆ[ΔⲆ.ⲆΔΔᐃᐃ] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
		ⵠᐃⲆ[ΔⲆ.ΔⵠⲆⲆⵠ] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", ᐃ[304]];
		ⵠᐃⲆ[ΔⲆ.ⲆⲆΔⵠᐃ] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", ᐃ[486]];
		ⵠᐃⲆ[ΔⲆ.ᐃⵠⲆⲆⵠ] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", ᐃ[486]];
		ⵠᐃⲆ[ΔⲆ.ΔⵠᐃΔΔ] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔᐃⵠΔⵠⲆ] = "Tu ne peux pas rejoindre le serveur";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔΔⵠΔ] = "Expulsé: ";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆᐃⵠⵠ] = "Ta clé est déjà utilisée par quelqu'un d'autre";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⵠⲆΔᐃⲆ] = "Ta clé est fausse";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "Tu as une vieille version, rafraichis tes caches";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠΔⵠΔΔᐃᐃ] = "Il n'y a plus de nouvelles ressources";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠΔⲆⵠ] = "Tu as survécu 1 jour";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃᐃΔᐃⵠᐃ] = "Tu as survécu ";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠΔⵠᐃΔ] = " jours";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⲆⵠⵠΔᐃΔ] = "Tu es mort ;-;";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔΔⲆᐃΔΔ] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
		ⵠᐃⲆ[ᐃΔᐃ.ⵠⵠⲆΔⲆᐃⵠ] = "Le serveur est complet! Spam le bouton jouer";
		ⵠᐃⲆ[ᐃΔᐃ.EMPTY] = "Cette ressource est vide";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔⵠΔⵠ] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆΔⲆΔ] = " est mort";
		ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠⵠᐃⲆᐃ] = "Ce n'est pas le bon outil";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⵠΔⵠᐃ] = "Tu as rejoins une équipe";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆΔΔΔⲆ] = "Tu es mort";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃΔΔΔᐃ] = " a rejoint l'équipe";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠᐃⵠ] = "Ton équipe a été détruite";
		ⵠᐃⲆ[ᐃΔᐃ.Δᐃⵠᐃᐃᐃᐃ] = "Tu as quitté l'équipe";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃⵠᐃΔⲆ] = " a quitté l'équipe";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠᐃΔ] = "Quelqu'un a volé ton token :>";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⵠⲆⲆᐃⵠ] = "Choisis un serveur";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃⲆᐃ] = "joueurs";
		ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔⵠᐃⲆΔ] = "joueurs";
		ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆⲆᐃⲆ] = "joueurs dans ce mode";
		ⵠᐃⲆ[ᐃΔᐃ.ⲆⵠΔⵠⵠⲆⲆ] = "Bientôt...";
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[412]).placeholder = "Surnom";
		ΔⲆᐃⵠ[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
		ΔⲆᐃⵠ[ΔⲆⵠⲆ] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
		ΔⲆᐃⵠ[ᐃⲆⵠᐃ] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
		ΔⲆᐃⵠ[ⵠⲆᐃΔ] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
		ΔⲆᐃⵠ[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
		ΔⲆᐃⵠ[ᐃᐃᐃⲆⲆ] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
		ΔⲆᐃⵠ[ᐃⵠⵠᐃⵠ] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
		ΔⲆᐃⵠ[ⲆΔᐃᐃⲆ] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
		ΔⲆᐃⵠ[ᐃΔᐃⵠⲆ] = ["Cet ours voulait juste un câlin."];
		ΔⲆᐃⵠ[ΔᐃΔᐃΔ] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
		ΔⲆᐃⵠ[ⵠΔⲆⲆΔ] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
		ΔⲆᐃⵠ[ΔᐃⲆΔⲆ] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
		ΔⲆᐃⵠ[ΔⲆⵠᐃⵠ] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
		ΔⲆᐃⵠ[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
		ΔⲆᐃⵠ[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
		ΔⲆᐃⵠ[ⵠⵠΔⵠᐃ] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
		ΔⲆᐃⵠ[16] = ["Un kraken a 'kraké' tes os."];
		ΔⲆᐃⵠ[ΔΔΔΔᐃ] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
		ΔⲆᐃⵠ[ᐃΔⵠⲆⲆⲆⲆ] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
		ΔⲆᐃⵠ[ΔᐃᐃΔΔ] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
		ΔⲆᐃⵠ[ⲆΔᐃΔⵠ] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
		ΔⲆᐃⵠ[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
		ⲆⲆⲆⲆⵠ = ᐃ[229];
		ⵠⲆⵠΔᐃᐃΔ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", ᐃ[274], "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"]
	};
	var ⵠᐃⲆ = [];
	for (var ᐃⲆ = 0; ⲆΔ > ᐃⲆ; ᐃⲆ++) ⵠᐃⲆ[ᐃⲆ] = "";
	const ⲆⵠⵠⲆⲆⲆᐃ = ⵠᐃᐃᐃⲆΔⲆ;
	var ΔⲆᐃⵠ = [];
	$(".md-languages").on(ᐃ[385], (function() {
		$(this).toggleClass(ᐃ[165])
	}));
	const ΔΔᐃⲆᐃ = Ⲇᐃᐃⵠᐃ;
	$(".md-languages ul li").on(ᐃ[385], (function() {
		var ⵠΔΔ = $(this).text();
		if (ⵠΔΔ === "English") ⵠⲆΔⲆᐃΔΔ();
		else if ("Français" === ⵠΔΔ) ΔΔΔⵠⲆⵠΔ();
		else if ("Deutsch" === ⵠΔΔ) ΔⲆΔᐃΔⲆⲆ();
		else if (ⵠΔΔ === "Español") ⲆⲆᐃⲆᐃⵠⵠ();
		else if (ⵠΔΔ === "Português") ᐃΔⲆᐃᐃⲆᐃ();
		else if ("Русский" === ⵠΔΔ) ΔᐃᐃⵠⵠⲆΔ();
		else ⵠΔΔ === "Polski" && ⵠΔⲆΔⲆⵠᐃ();
		ⵠΔᐃⲆᐃ = [];
		ⲆΔⵠ.ⵠΔᐃΔ.label = [];
		$(".md-languages ul li").removeClass(ᐃ[165]);
		$(this).addClass(ᐃ[165]);
		$(ᐃ[124]).text(ⵠΔΔ)
	}));
	var ⲆⲆⵠⲆⵠ = "EN";
	var ΔⲆΔⲆᐃᐃΔ = navigator.language || navigator.userLanguage;
	const ⲆΔᐃⵠⲆⵠⵠ = ⵠⲆᐃᐃⲆ;
	switch (ΔⲆΔⲆᐃᐃΔ) {
		case "ru":
			ⲆⲆⵠⲆⵠ = "RU";
			break;
		case "en":
			ⲆⲆⵠⲆⵠ = "EN";
			break;
		case "es":
			ⲆⲆⵠⲆⵠ = "SP";
			break;
		case "fr":
			ⲆⲆⵠⲆⵠ = "FR";
			break;
		case "pl":
			ⲆⲆⵠⲆⵠ = "PL";
			break;
		case "de":
			ⲆⲆⵠⲆⵠ = "DE";
			break;
		case "pt":
			ⲆⲆⵠⲆⵠ = "PT";
			break
	}
	var ΔⵠⲆⵠⵠᐃᐃ;
	if (ⲆⲆⵠⲆⵠ === "FR") {
		$(ᐃ[124]).text("Français");
		ΔⵠⲆⵠⵠᐃᐃ = ΔΔΔⵠⲆⵠΔ
	} else if ("PL" === ⲆⲆⵠⲆⵠ) {
		$(ᐃ[124]).text("Polski");
		ΔⵠⲆⵠⵠᐃᐃ = ⵠΔⲆΔⲆⵠᐃ
	} else if ("PT" === ⲆⲆⵠⲆⵠ) {
		$(ᐃ[124]).text("Português");
		ΔⵠⲆⵠⵠᐃᐃ = ᐃΔⲆᐃᐃⲆᐃ
	} else if ("SP" === ⲆⲆⵠⲆⵠ) {
		$(ᐃ[124]).text("Español");
		ΔⵠⲆⵠⵠᐃᐃ = ⲆⲆᐃⲆᐃⵠⵠ
	} else if (ⲆⲆⵠⲆⵠ === "RU") {
		$(ᐃ[124]).text("Русский");
		ΔⵠⲆⵠⵠᐃᐃ = ΔᐃᐃⵠⵠⲆΔ
	} else ⲆⲆⵠⲆⵠ === "DE" ? ($(ᐃ[124]).text("Deutsch"), ΔⵠⲆⵠⵠᐃᐃ = ΔⲆΔᐃΔⲆⲆ) : ($(ᐃ[124]).text("English"), ΔⵠⲆⵠⵠᐃᐃ = ⵠⲆΔⲆᐃΔΔ);

	function ⵠⵠⲆᐃᐃΔᐃ(ⵠΔΔᐃΔᐃⲆ, ⲆⲆΔΔᐃᐃⵠ, ΔΔΔⵠⵠⲆⵠ, ⲆΔᐃⲆⲆⲆᐃ, ΔⲆΔⲆⵠⵠΔ, ⲆΔⲆⲆΔⲆΔ) {
		const ⵠΔᐃᐃᐃⵠΔ = ~(7214 & ⵠΔΔᐃΔᐃⲆ) & 7214 | ~(7214 & ⵠΔΔᐃΔᐃⲆ) & ⵠΔΔᐃΔᐃⲆ;
		const ⵠΔⲆᐃΔⵠΔ = ~(ⲆⲆΔΔᐃᐃⵠ & 41316) & 41316 | ~(41316 & ⲆⲆΔΔᐃᐃⵠ) & ⲆⲆΔΔᐃᐃⵠ;
		const ΔᐃⲆⵠᐃᐃⲆ = (ΔΔΔⵠⵠⲆⵠ | 62600) & ~(ΔΔΔⵠⵠⲆⵠ & 62600);
		const ⵠᐃⵠᐃᐃⵠⵠ = (16 << (ⲆΔᐃⲆⲆⲆᐃ >> 24 & 255)) + (24 << (ⲆΔᐃⲆⲆⲆᐃ >> 16 & 255)) + (8 << (ⲆΔᐃⲆⲆⲆᐃ >> 0 & 255)) + (0 << (ⲆΔᐃⲆⲆⲆᐃ >> 8 & 255));
		const ⲆⵠᐃΔⵠΔᐃ = (63644 | ΔⲆΔⲆⵠⵠΔ) & ~(ΔⲆΔⲆⵠⵠΔ & 63644);
		const ΔᐃⵠⲆᐃⵠⵠ = (16 << (ⲆΔⲆⲆΔⲆΔ >> 24 & 255)) + (0 << (ⲆΔⲆⲆΔⲆΔ >> ΔᐃⲆⲆ & 255)) + (8 << (ⲆΔⲆⲆΔⲆΔ >> ᐃΔᐃⵠⲆ & 255)) + (24 << (ⲆΔⲆⲆΔⲆΔ >> 16 & 255));
		const ᐃⲆⵠᐃⵠⲆΔ = ⵠᐃᐃⵠᐃⲆⲆ(ⵠΔᐃᐃᐃⵠΔ, ⵠΔⲆᐃΔⵠΔ, ΔᐃⲆⵠᐃᐃⲆ);
		const ⲆⲆⵠᐃᐃⵠΔ = ᐃⲆⵠⵠΔᐃᐃ(ⵠᐃⵠᐃᐃⵠⵠ, ⲆⵠᐃΔⵠΔᐃ, ΔᐃⵠⲆᐃⵠⵠ, ⵠΔᐃᐃᐃⵠΔ, ⵠΔⲆᐃΔⵠΔ, ΔᐃⲆⵠᐃᐃⲆ);
		const ⵠΔΔⲆⵠⲆⵠ = ((21175 + (ᐃⲆⵠᐃⵠⲆΔ ^ ⲆⲆⵠᐃᐃⵠΔ)) * 214013 + 2531011) % 4294967296;
		return ⵠΔΔⲆⵠⲆⵠ
	}

	function ⲆⵠΔⵠⵠⲆΔ(ⲆΔⲆΔΔᐃᐃ, ᐃⲆⵠΔᐃ) {
		ⲆⵠᐃⲆⲆⵠΔ(ⵠᐃΔᐃⵠ, ⲆΔⲆΔΔᐃᐃ, ᐃⲆⵠΔᐃ);
		const ᐃᐃᐃΔⲆⵠⵠ = ΔⲆᐃⵠΔⵠⵠ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[1], Δⵠⵠᐃ[ⲆⲆΔ], Δⵠⵠᐃ[1]);
		const ⵠⲆⵠⵠΔⲆᐃⲆⵠ = ⵠⲆⵠⵠⲆᐃⲆ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[1], Δⵠⵠᐃ[ⵠΔⵠᐃ], Δⵠⵠᐃ[ᐃⲆⲆ], Δⵠⵠᐃ[ⲆⲆΔ]);
		const ᐃᐃΔⵠⵠΔⲆ = ~(ᐃᐃᐃΔⲆⵠⵠ & 9039) & ᐃᐃᐃΔⲆⵠⵠ | ~(ᐃᐃᐃΔⲆⵠⵠ & 9039) & 9039;
		return ᐃᐃΔⵠⵠΔⲆ
	}
	const ⵠΔⵠⲆ = ᐃᐃⲆⵠ;
	Δᐃ = {
		"ⵠᐃⲆᐃᐃᐃⵠⵠΔ": "img/logo.png",
		"ΔᐃΔⲆⵠⲆⲆ": "img/mapday.png",
		"ⲆⲆᐃᐃⲆⵠΔ": "img/mapnight.png",
		"ᐃⵠⵠᐃΔⵠΔⲆᐃ": "img/bigzday.png",
		"ⵠᐃᐃΔⲆᐃΔⲆⵠ": "img/bigznight.png",
		"ᐃⵠᐃⵠⲆΔⵠ": "img/bigday-river1.png",
		"ⵠᐃⵠⲆⲆⲆⵠΔΔ": "img/bigday-lake.png",
		"ⵠΔᐃⵠΔᐃᐃ": "img/bigday-berry.png",
		"ᐃΔΔⵠΔΔⵠ": "img/bigday-stone1.png",
		"ⵠᐃⵠΔⲆΔΔ": "img/bigday-stone2.png",
		"ⲆⲆᐃΔⵠⵠⲆ": "img/bigday-gold1.png",
		"ᐃᐃⵠᐃΔΔⵠ": "img/bigday-gold2.png",
		"ⲆᐃⵠΔⵠⵠⵠ": "img/bigday-emerald1.png",
		"ᐃΔⲆᐃᐃⲆⵠ": "img/bigday-emerald2.png",
		"ΔΔⲆⵠⲆΔᐃ": "img/bigday-amethyst.png",
		"ΔⲆΔⵠΔⲆᐃ": "img/bigday-bear.png",
		"ᐃⲆⲆⵠΔΔᐃ": "img/bigday-cave.png",
		"ΔᐃΔⲆⲆΔⲆ": "img/bigday-diamond.png",
		"ⵠⵠⲆⲆΔᐃⲆ": "img/bigday-island.png",
		"ᐃⵠⲆΔΔΔΔ": "img/bigday-reidite.png",
		"ᐃⲆᐃΔΔΔⵠ": "img/bigday-spider.png",
		"ⲆⲆΔΔΔⲆⲆ": "img/bigday-wolf.png",
		"ᐃⵠᐃⲆⲆᐃᐃ": "img/bigday-fir-tree.png",
		"ⵠⵠΔΔᐃΔΔ": "img/bigday-fox.png",
		"ⲆⲆⵠᐃΔⲆⵠ": "img/bigday-kraken.png",
		"ⲆⲆᐃⲆⲆⵠᐃ": "img/bigday-piranha.png",
		"ⵠᐃᐃⵠᐃΔᐃ": "img/bigday-cactus.png",
		"ⲆᐃᐃⵠⵠⵠΔ": "img/bigday-magma.png",
		"ᐃⲆⲆⲆⲆⲆⵠ": "img/bigday-river1.png",
		"ⲆᐃⲆⵠⲆⲆⵠⵠⵠ": "img/bignight-lake.png",
		"ΔⲆⲆᐃᐃⲆᐃᐃⵠ": "img/bignight-berry.png",
		"ⵠⵠΔᐃΔⲆΔ": "img/bignight-stone1.png",
		"ᐃᐃΔᐃⲆΔⲆ": "img/bignight-stone2.png",
		"ⵠⲆᐃᐃᐃⲆΔ": "img/bignight-gold1.png",
		"ΔᐃⵠⲆⵠᐃⲆ": "img/bignight-gold2.png",
		"ⵠⵠᐃⲆᐃᐃⵠ": "img/bignight-emerald1.png",
		"ᐃⲆΔⲆⲆⲆΔ": "img/bignight-emerald2.png",
		"ⲆΔⵠⲆⵠΔΔ": "img/bignight-amethyst.png",
		"ⵠΔⵠᐃⲆᐃᐃ": "img/bignight-bear.png",
		"ⲆⵠⵠΔΔⲆΔ": "img/bignight-cave.png",
		"ᐃᐃΔⲆⵠⲆⲆ": "img/bignight-diamond.png",
		"ᐃΔⵠⵠⲆᐃᐃ": "img/bignight-island.png",
		"ⵠᐃΔⲆΔⵠΔ": "img/bignight-reidite.png",
		"ⵠⵠΔⲆΔⲆΔ": "img/bignight-spider.png",
		"ᐃᐃⵠᐃⵠⵠᐃ": "img/bignight-wolf.png",
		"ᐃᐃⲆⵠⵠᐃΔ": "img/bignight-fir-tree.png",
		"ᐃᐃⲆⲆᐃᐃᐃ": "img/bignight-fox.png",
		"ⵠⵠᐃΔⵠΔΔ": "img/bignight-kraken.png",
		"ΔΔⵠⵠᐃΔⵠ": "img/bignight-piranha.png",
		"ᐃᐃᐃⵠⲆᐃΔ": "img/bignight-cactus.png",
		"ΔⲆᐃⵠⵠⵠᐃ": "img/bignight-magma.png",
		"ⵠᐃⵠᐃΔΔⵠ": "img/bigday-desert.png",
		"ᐃΔⵠⲆⵠⵠΔ": "img/bigday-winter.png",
		"ᐃⵠⲆⵠΔⲆΔ": "img/bigday-lava.png",
		"ⲆⲆᐃⵠᐃΔⲆ": "img/bigday-forest.png",
		"ⵠΔⲆᐃΔΔⵠ": "img/bignight-desert.png",
		"ᐃⵠⵠΔᐃⵠᐃ": "img/bignight-winter.png",
		"ᐃᐃᐃΔⵠΔⵠ": "img/bignight-lava.png",
		"ΔΔΔⲆᐃⲆⵠ": "img/bignight-forest.png",
		"ΔⵠΔᐃⲆⲆⵠ": "img/day-river-wave.png",
		"ⲆⵠⵠⲆΔΔᐃ": "img/night-river-wave.png",
		"ⵠᐃⲆⲆⵠⲆᐃ": "img/day-fog0.png",
		"ⲆΔⲆⲆᐃⲆᐃ": "img/day-fog1.png",
		"ΔⲆⵠⲆΔⵠΔ": "img/day-fog2.png",
		"ⵠⵠΔΔⲆⲆⵠ": "img/night-fog0.png",
		"ΔᐃΔⵠΔⵠⲆ": "img/night-fog1.png",
		"ᐃⲆᐃᐃⵠⵠⲆ": "img/night-fog2.png",
		"ⵠᐃⵠΔⵠΔΔ": "img/day-fogdesert0.png",
		"ⵠΔⲆᐃⲆᐃⵠ": "img/day-fogdesert1.png",
		"ΔΔᐃⵠⵠⵠⲆ": "img/day-fogdesert2.png",
		"ΔᐃᐃⲆΔΔⵠ": "img/night-fogdesert0.png",
		"ⵠⵠⲆᐃⲆΔⲆ": "img/night-fogdesert1.png",
		"ΔⵠᐃⵠⲆΔᐃ": "img/night-fogdesert2.png",
		"ᐃⵠΔΔⲆΔⵠ": "img/day-cross-server.png",
		"ⲆⲆⵠᐃᐃⲆᐃ": "img/day-here-server.png",
		"ΔΔΔⵠⵠⲆⲆ": "img/day-finish-server.png",
		"ᐃⵠᐃⵠᐃᐃᐃ": "img/day-item-server.png",
		"ᐃΔⵠᐃⲆΔᐃ": "img/day-skull-server.png",
		"ᐃⵠⵠΔⵠⵠⵠ": "img/night-cross-server.png",
		"ΔΔᐃⲆΔΔᐃ": "img/night-here-server.png",
		"ΔⵠΔΔⵠⵠⲆ": "img/night-finish-server.png",
		"ᐃⲆⲆⵠᐃΔⲆ": "img/night-item-server.png",
		"ᐃⵠⵠⲆᐃⲆⲆ": "img/night-skull-server.png",
		"ⵠᐃⵠᐃⵠⵠΔ": "img/day-reidite0.png",
		"ⵠᐃⵠΔⵠᐃᐃ": "img/night-reidite0.png",
		"ⲆᐃⵠΔΔᐃΔ": "img/day-reidite1.png",
		"ⲆⵠⲆΔⵠⲆΔ": "img/night-reidite1.png",
		"ΔΔᐃⵠᐃⲆⵠ": "img/day-reidite2.png",
		"ΔⲆⲆⲆⲆⵠᐃ": "img/night-reidite2.png",
		"ⵠⲆⲆⲆᐃⲆⵠ": "img/day-lava1.png",
		"ΔⵠⵠᐃⲆⲆⵠ": "img/night-lava1.png",
		"ⵠΔⵠⲆΔΔⲆ": "img/day-lava2.png",
		"ᐃΔⵠⲆⵠⵠᐃ": "img/night-lava2.png",
		"ⵠⲆⵠⲆΔⵠⲆ": "img/day-lava3.png",
		"ⵠΔⵠΔⲆᐃⲆ": "img/night-lava3.png",
		"ⲆⲆⵠᐃⵠⵠⵠ": "img/day-lava4.png",
		"ⵠᐃΔᐃⵠⵠⵠ": "img/night-lava4.png",
		"ⲆΔⲆⵠΔⲆΔ": "img/day-lava5.png",
		"ΔⵠⲆᐃⲆⲆⵠ": "img/night-lava5.png",
		"ᐃᐃΔⲆΔΔⲆ": "img/day-lava6.png",
		"ⵠⵠΔⲆⵠΔᐃ": "img/night-lava6.png",
		"ᐃᐃⵠⲆΔⲆⵠ": "img/day-lava-ground1.png",
		"ⵠᐃⲆΔᐃΔⵠ": "img/night-lava-ground1.png",
		"ᐃⵠΔΔⲆᐃⵠ": "img/day-lava-ground2.png",
		"ⵠⵠΔⲆⲆΔᐃ": "img/night-lava-ground2.png",
		"ⲆΔΔΔΔⲆΔ": "img/day-lava-ground3.png",
		"ⵠⵠⵠⲆᐃⲆΔ": "img/night-lava-ground3.png",
		"ΔⲆᐃⲆⵠⲆⵠ": "img/day-lava-ground4.png",
		"ᐃⵠⵠᐃⲆΔᐃ": "img/night-lava-ground4.png",
		"ᐃⵠⲆⲆⲆⲆᐃ": "img/day-lava-ground5.png",
		"ᐃᐃΔᐃⵠⵠⵠ": "img/night-lava-ground5.png",
		"ᐃΔᐃΔⲆⲆᐃ": "img/day-lava-ground6.png",
		"ⵠᐃΔΔⲆᐃᐃ": "img/night-lava-ground6.png",
		"ΔⲆᐃⵠΔΔΔ": "img/day-fire-mob.png",
		"ᐃΔΔᐃⵠⵠΔ": "img/night-fire-mob.png",
		"ⲆⲆᐃⵠⲆᐃΔ": "img/hurt-fire-mob.png",
		"ΔⲆⵠⵠⵠᐃⲆ": "img/day-diamond-protection.png",
		"ⵠΔⵠΔⲆⲆᐃ": "img/night-diamond-protection.png",
		"ᐃΔᐃⵠᐃⵠⲆ": "img/day-hand-diamond-protection.png",
		"ⵠᐃΔⲆᐃⲆⵠ": "img/night-hand-diamond-protection.png",
		"ⲆⵠΔᐃⵠΔΔ": "img/inv-diamond-protection-out.png",
		"ⵠΔⲆⲆⲆⵠᐃ": "img/inv-diamond-protection-in.png",
		"ⵠⲆᐃᐃᐃΔⲆ": "img/inv-diamond-protection-click.png",
		"ⵠᐃᐃΔᐃᐃᐃ": "img/day-amethyst-protection.png",
		"ᐃⲆΔᐃᐃᐃⲆ": "img/night-amethyst-protection.png",
		"ΔᐃᐃⵠⲆⲆⵠΔⲆ": "img/day-hand-amethyst-protection.png",
		"ΔᐃᐃⲆⵠΔᐃⵠⵠ": "img/night-hand-amethyst-protection.png",
		"ΔΔΔⲆⵠⵠⲆ": "img/inv-amethyst-protection-out.png",
		"ⵠⵠΔΔⲆⲆⲆ": "img/inv-amethyst-protection-in.png",
		"ᐃᐃᐃⵠⵠΔⵠ": "img/inv-amethyst-protection-click.png",
		"ΔᐃᐃⲆΔᐃⲆ": "img/day-reidite-sword.png",
		"ⵠΔⲆⲆⲆⵠⵠ": "img/night-reidite-sword.png",
		"ΔᐃᐃΔⵠⵠⲆ": "img/inv-reidite-sword-out.png",
		"ΔᐃⵠΔⵠΔⲆ": "img/inv-reidite-sword-in.png",
		"ΔⵠΔΔΔᐃΔ": "img/inv-reidite-sword-click.png",
		"ⲆⵠΔᐃΔᐃᐃ": "img/inv-reidite-out.png",
		"ⲆⵠⲆⵠⵠΔᐃ": "img/inv-reidite-in.png",
		"ⲆΔΔᐃΔⵠΔ": "img/inv-reidite-click.png",
		"ⵠᐃⲆⲆⲆⵠⵠ": "img/inv-flame-out.png",
		"ᐃΔΔᐃⵠᐃⲆ": "img/inv-flame-in.png",
		"ΔⵠᐃᐃⲆΔᐃ": "img/inv-flame-click.png",
		"ⵠⲆᐃⵠᐃΔⵠ": "img/day-magma-buble0.png",
		"ⲆΔᐃᐃᐃⵠⲆ": "img/night-magma-buble0.png",
		"ᐃⲆⲆᐃᐃⵠⲆ": "img/day-magma-buble1.png",
		"ⵠᐃⲆⲆⲆⵠⲆ": "img/night-magma-buble1.png",
		"ᐃⲆⵠⲆΔⵠⵠ": "img/day-magma-buble2.png",
		"ⲆᐃⲆΔⵠᐃⵠ": "img/night-magma-buble2.png",
		"ᐃⵠᐃⲆⲆΔΔ": "img/day-lava-dragon.png",
		"ⵠΔᐃⲆⲆΔⵠ": "img/night-lava-dragon.png",
		"ⵠΔⲆΔⵠᐃᐃΔⲆ": "img/day-fire-dragon.png",
		"ᐃΔΔⵠΔⵠⲆΔⲆ": "img/night-fire-dragon.png",
		"ΔᐃⵠⲆⵠΔⵠ": "img/hurt-lava-dragon.png",
		"ⲆΔⵠΔⵠΔᐃ": "img/day-lava-wing-left.png",
		"ΔΔᐃⲆᐃᐃᐃ": "img/night-lava-wing-left.png",
		"ⲆᐃᐃⲆᐃⵠⲆ": "img/day-lava-wing-right.png",
		"ΔⲆᐃⲆᐃⲆⵠ": "img/night-lava-wing-right.png",
		"ΔᐃⲆᐃΔⵠᐃ": "img/hurt-lava-wing-left.png",
		"ⵠΔΔⵠⵠⵠᐃ": "img/hurt-lava-wing-right.png",
		"ⲆΔⵠⲆΔᐃⵠ": "img/day-reidite-spear.png",
		"ⵠⲆᐃⲆΔⵠᐃ": "img/night-reidite-spear.png",
		"ΔⵠⵠΔᐃΔᐃ": "img/inv-reidite-spear-out.png",
		"ᐃⲆᐃΔⵠⵠⲆ": "img/inv-reidite-spear-in.png",
		"ⵠⵠΔΔⵠⵠⲆ": "img/inv-reidite-spear-click.png",
		"ⵠΔⵠᐃⲆᐃⵠ": "img/day-reidite-helmet.png",
		"ⲆⵠᐃⵠΔⵠΔ": "img/night-reidite-helmet.png",
		"ⵠΔⲆΔⵠⵠΔ": "img/inv-reidite-helmet-out.png",
		"ᐃΔⵠᐃⲆⲆᐃ": "img/inv-reidite-helmet-in.png",
		"ᐃᐃᐃΔⵠᐃᐃ": "img/inv-reidite-helmet-click.png",
		"ᐃᐃⵠΔⲆᐃⲆ": "img/day-hand-reidite-protection.png",
		"ⲆΔᐃⵠⲆᐃⵠ": "img/night-hand-reidite-protection.png",
		"ⲆΔⵠⲆΔⲆⵠ": "img/day-reidite-protection.png",
		"ΔⲆⲆⲆΔᐃⲆ": "img/night-reidite-protection.png",
		"ᐃⲆᐃⲆⵠᐃΔ": "img/inv-reidite-protection-out.png",
		"ᐃⲆΔΔΔⵠΔ": "img/inv-reidite-protection-in.png",
		"ⲆⵠⵠⲆⵠΔⲆ": "img/inv-reidite-protection-click.png",
		"ⵠᐃⲆᐃⵠⲆⲆ": "img/day-lava-dragon-sword.png",
		"ᐃᐃⵠΔΔΔΔ": "img/night-lava-dragon-sword.png",
		"ΔⲆⲆΔⲆΔⵠ": "img/inv-lava-dragon-sword-out.png",
		"ᐃⲆᐃⵠⲆⵠᐃ": "img/inv-lava-dragon-sword-in.png",
		"ΔΔᐃΔᐃⲆᐃ": "img/inv-lava-dragon-sword-click.png",
		"ᐃΔⵠΔⲆᐃⵠ": "img/day-lava-spear.png",
		"ΔⵠΔΔⲆⵠᐃ": "img/night-lava-spear.png",
		"ΔΔᐃⵠΔⵠⵠ": "img/inv-lava-spear-out.png",
		"ⵠᐃΔⵠΔΔᐃ": "img/inv-lava-spear-in.png",
		"ΔⵠⵠᐃⲆⲆΔ": "img/inv-lava-spear-click.png",
		"ΔⲆΔⵠΔⵠᐃ": "img/day-lava-helmet.png",
		"ⲆⵠΔⵠⲆⲆᐃ": "img/night-lava-helmet.png",
		"ⵠⲆⲆⲆᐃᐃⵠ": "img/inv-lava-helmet-out.png",
		"ΔᐃⲆⲆΔᐃΔ": "img/inv-lava-helmet-in.png",
		"ᐃⲆⵠⵠΔᐃΔ": "img/inv-lava-helmet-click.png",
		"ᐃΔⵠΔᐃⵠⵠ": "img/day-witch-hat.png",
		"ΔⵠᐃΔᐃΔΔ": "img/night-witch-hat.png",
		"ⵠᐃΔⵠᐃⵠΔ": "img/inv-witch-hat-out.png",
		"ⵠⵠᐃⲆΔᐃⵠ": "img/inv-witch-hat-in.png",
		"Δⵠⵠⵠⵠⵠⵠ": "img/inv-witch-hat-click.png",
		"ⵠᐃΔᐃⵠⲆⲆ": "img/day-nimbus2000.png",
		"ⵠΔΔⲆⵠΔΔ": "img/night-nimbus2000.png",
		"ⵠⵠᐃᐃᐃᐃΔ": "img/inv-nimbus2000-out.png",
		"ⲆᐃⵠⵠᐃⲆᐃ": "img/inv-nimbus2000-in.png",
		"ᐃᐃᐃⲆⵠⲆΔ": "img/inv-nimbus2000-click.png",
		"ⲆΔⲆΔΔᐃⵠ": "img/day-accessory1-pacques.png",
		"ⵠᐃⲆΔⵠᐃΔ": "img/night-accessory1-pacques.png",
		"ⲆᐃⵠᐃⵠⲆᐃ": "img/day-accessory2-pacques.png",
		"ᐃⵠᐃᐃⵠᐃᐃ": "img/night-accessory2-pacques.png",
		"ΔᐃΔⵠᐃΔᐃ": "img/day-accessory3-pacques.png",
		"ᐃⵠⵠⵠⲆΔⲆ": "img/night-accessory3-pacques.png",
		"ᐃΔΔⵠΔᐃⵠ": "img/day-accessory5-pacques.png",
		"ⵠⵠⲆΔᐃᐃⵠ": "img/night-accessory5-pacques.png",
		"ΔⲆⵠᐃᐃⲆΔ": "img/day-accessory6-pacques.png",
		"ΔⲆⲆⲆⲆᐃⲆ": "img/night-accessory6-pacques.png",
		"ⵠᐃᐃᐃⵠⲆᐃ": "img/day-accessory7-pacques.png",
		"ΔⵠⵠΔᐃⵠⵠ": "img/night-accessory7-pacques.png",
		"ΔⵠⲆⲆⵠⵠΔ": "img/day-accessory8-pacques.png",
		"ΔᐃⲆΔΔᐃⲆ": "img/night-accessory8-pacques.png",
		"ᐃᐃⲆΔΔⲆᐃ": "img/day-bag-pacques.png",
		"ΔᐃⲆⵠΔⵠᐃ": "img/night-bag-pacques.png",
		"ᐃⵠΔⵠΔⲆⵠ": "img/day-carrot.png",
		"ᐃⲆΔΔⲆᐃᐃ": "img/night-carrot.png",
		"ᐃᐃΔΔΔⵠᐃ": "img/day-carrot-dried.png",
		"ΔⲆᐃⵠⵠⵠⵠ": "img/night-carrot-dried.png",
		"ᐃⵠⵠᐃⲆΔΔ": "img/day-tomato-herb.png",
		"ΔᐃⵠΔΔᐃⵠ": "img/night-tomato-herb.png",
		"ᐃⵠⵠⲆᐃᐃΔ": "img/day-tomato-herb-dried.png",
		"ⵠΔⲆΔΔⵠⲆ": "img/night-tomato-herb-dried.png",
		"ᐃΔᐃΔΔΔⵠ": "img/day-tomato.png",
		"ⲆΔΔΔⲆᐃᐃ": "img/night-tomato.png",
		"ⵠᐃΔᐃΔΔᐃ": "img/inv-carrot-out.png",
		"ᐃⵠᐃⲆΔⲆⲆ": "img/inv-carrot-in.png",
		"ⵠⵠⵠⵠⲆⲆᐃ": "img/inv-carrot-click.png",
		"ⲆⲆΔᐃΔᐃᐃ": "img/inv-tomato-out.png",
		"ⵠⲆⵠⲆⵠᐃᐃ": "img/inv-tomato-in.png",
		"ⵠΔᐃⲆⵠⲆΔ": "img/inv-tomato-click.png",
		"ᐃᐃⵠⲆᐃⵠⵠ": "img/day-player0.png",
		"ⲆⲆⲆⵠⵠΔΔ": "img/night-player0.png",
		"ΔⲆΔⲆᐃΔᐃ": "img/day-player1.png",
		"ᐃⲆⵠⵠΔⵠⲆ": "img/night-player1.png",
		"ⲆⲆⲆⵠⲆⵠΔ": "img/day-player2.png",
		"ⵠⵠⵠⵠΔΔᐃ": "img/night-player22.png",
		"ⵠⲆᐃⲆⵠΔᐃ": "img/day-player3.png",
		"ΔⵠᐃⲆⵠⲆⲆ": "img/night-player33.png",
		"ΔⵠⲆⲆΔΔⲆ": "img/day-player4.png",
		"ⲆᐃⲆΔⲆⵠΔ": "img/night-player4.png",
		"Ⲇⵠᐃᐃᐃⵠᐃ": "img/day-player5.png",
		"ΔⲆᐃⵠⵠᐃᐃ": "img/night-player5.png",
		"ᐃⵠⲆΔΔⲆⵠ": "img/day-player6.png",
		"ⲆⲆⲆⲆΔΔᐃ": "img/night-player6.png",
		"ᐃⵠⵠⵠΔΔᐃ": "img/day-player7.png",
		"ⲆⵠΔΔᐃΔᐃ": "img/night-player7.png",
		"ΔᐃΔᐃᐃⵠΔ": "img/day-player8.png",
		"ΔⵠⲆⵠΔⵠᐃ": "img/night-player8.png",
		"ⲆⵠΔⲆᐃΔⵠ": "img/day-player9.png",
		"ⲆⲆᐃΔⵠΔᐃ": "img/night-player9.png",
		"ⲆᐃᐃⵠⲆΔⲆ": "img/day-player10.png",
		"ⵠⵠᐃⵠⲆⵠΔ": "img/night-player10.png",
		"ⲆⵠᐃΔⲆⵠⲆ": "img/day-player11.png",
		"ᐃᐃⵠⵠΔΔⵠ": "img/night-player11.png",
		"ⵠᐃᐃⵠⵠⲆΔ": "img/day-player12.png",
		"ΔᐃⲆᐃΔⲆⲆ": "img/night-player12.png",
		"ⲆⲆΔΔⲆΔΔ": "img/day-player13.png",
		"ΔᐃⵠⲆⵠⲆⲆ": "img/night-player13.png",
		"ⵠⲆΔᐃⲆⲆⵠ": "img/day-player14.png",
		"ⲆⵠΔⵠΔⵠⵠ": "img/night-player14.png",
		"ⲆΔᐃⵠᐃΔΔ": "img/day-player15.png",
		"ⵠⵠΔⲆΔⲆⵠ": "img/night-player15.png",
		"ⵠⵠᐃᐃΔⲆΔ": "img/day-player16.png",
		"ⵠⲆᐃⲆⵠᐃⵠ": "img/night-player16.png",
		"ΔⲆⵠᐃΔΔᐃ": "img/day-player17.png",
		"ⵠⵠⲆⵠⲆᐃΔ": "img/night-player17.png",
		"ᐃΔⲆᐃΔᐃⵠ": "img/day-player18.png",
		"ΔᐃⵠΔΔᐃⲆ": "img/night-player18.png",
		"ⵠⵠⲆΔⵠᐃᐃ": "img/day-player19.png",
		"ⲆⲆᐃⲆᐃⲆΔ": "img/night-player19.png",
		"ΔᐃᐃΔⲆΔⲆ": "img/day-hand-player0.png",
		"ⵠᐃᐃⵠⵠⵠᐃ": "img/night-hand-player0.png",
		"ⵠⲆⵠᐃⲆⵠⲆ": "img/day-hand-player1.png",
		"ⲆⲆΔᐃⵠⲆᐃ": "img/night-hand-player1.png",
		"ᐃⵠⵠᐃΔⲆⵠ": "img/day-hand-player2.png",
		"ⵠΔᐃⲆᐃᐃⲆ": "img/night-hand-player22.png",
		"ᐃⵠᐃΔⵠⲆⵠ": "img/day-hand-player3.png",
		"ΔⲆⲆⲆᐃΔᐃ": "img/night-hand-player33.png",
		"ΔⲆΔΔⲆⵠⲆ": "img/day-hand-player4.png",
		"ΔⲆᐃΔⵠⲆⵠ": "img/night-hand-player4.png",
		"ΔⵠⵠᐃΔⲆᐃ": "img/day-hand-player5.png",
		"ᐃⲆΔⵠᐃᐃΔ": "img/night-hand-player5.png",
		"ⵠᐃᐃⵠⲆⲆᐃ": "img/day-hand-player6.png",
		"ⲆΔⵠΔⵠⲆⲆ": "img/night-hand-player6.png",
		"ⵠᐃⵠⵠΔⵠⵠ": "img/day-hand-player7.png",
		"ⵠⲆΔⵠⵠⵠⲆ": "img/night-hand-player7.png",
		"ⲆΔⲆⲆⵠⲆⵠ": "img/day-hand-player8.png",
		"ⲆΔᐃΔᐃⵠᐃ": "img/night-hand-player8.png",
		"ΔⵠᐃᐃⲆΔΔ": "img/day-hand-player9.png",
		"ⲆΔⲆⲆΔΔⵠ": "img/night-hand-player9.png",
		"ΔΔⵠΔΔⲆⲆ": "img/day-hand-player10.png",
		"ⵠⲆΔᐃⲆΔᐃ": "img/night-hand-player10.png",
		"ⲆⵠⲆᐃⲆⲆⵠ": "img/day-hand-player11.png",
		"ΔΔᐃⵠΔᐃⲆ": "img/night-hand-player11.png",
		"ᐃᐃΔⲆΔᐃᐃ": "img/day-hand-player12.png",
		"ⲆΔⵠᐃⵠⵠᐃ": "img/night-hand-player12.png",
		"ⵠΔᐃᐃⲆΔΔ": "img/day-hand-player13.png",
		"ΔⵠⵠⲆⵠⵠⲆ": "img/night-hand-player13.png",
		"ΔⲆΔⵠⲆΔⵠ": "img/day-hand-player14.png",
		"ⵠᐃⲆⵠⲆⲆⵠ": "img/night-hand-player14.png",
		"ⲆΔⵠⲆΔⲆⲆ": "img/day-hand-player15.png",
		"ᐃⲆΔⵠΔⲆⲆ": "img/night-hand-player15.png",
		"ⲆⲆⵠΔⲆΔⲆ": "img/day-hand-player16.png",
		"ΔⲆΔΔᐃΔᐃ": "img/night-hand-player16.png",
		"ΔⵠᐃΔⵠΔᐃ": "img/day-hand-player17.png",
		"ΔⲆⲆⵠⲆⲆⲆ": "img/night-hand-player17.png",
		"ⵠⵠⲆⲆⲆⲆΔ": "img/day-hand-player18.png",
		"ⵠΔⲆΔΔᐃᐃ": "img/night-hand-player18.png",
		"ΔΔⲆᐃΔΔⵠ": "img/day-hand-player19.png",
		"ΔΔⵠⵠⵠᐃⲆ": "img/night-hand-player19.png",
		"ᐃⵠⵠᐃΔᐃⲆ": "img/day-accessory4.png",
		"ⲆᐃⲆⲆⲆⲆΔ": "img/night-accessory4.png",
		"ΔᐃⵠΔⵠᐃⲆ": "img/day-accessory9.png",
		"ᐃⵠΔΔΔΔᐃ": "img/night-accessory9.png",
		"ⵠᐃⲆᐃⵠᐃΔ": "img/day-accessory10.png",
		"ΔⲆΔᐃⵠᐃᐃ": "img/night-accessory10.png",
		"ⵠⵠⲆᐃⲆⲆᐃ": "img/day-accessory11.png",
		"ΔΔΔⵠⲆⲆᐃ": "img/night-accessory11.png",
		"ΔⲆⲆⵠᐃⲆⵠ": "img/day-accessory12.png",
		"ⲆⲆⲆⲆᐃΔⲆ": "img/night-accessory12.png",
		"ᐃⵠⲆⵠᐃΔᐃ": "img/day-bag.png",
		"ⲆⵠⵠΔⲆⲆΔ": "img/night-bag.png",
		"ⲆⲆⲆᐃⵠᐃΔ": "img/inv-bag-out.png",
		"ᐃᐃⲆⲆᐃᐃΔ": "img/inv-bag-in.png",
		"ⲆⵠΔᐃⵠᐃΔ": "img/inv-bag-click.png",
		"ᐃᐃⲆᐃⲆⲆⲆ": "img/day-pitchfork.png",
		"ΔⲆΔⵠⲆᐃⲆ": "img/night-pitchfork.png",
		"ⲆⲆⲆⵠᐃΔᐃ": "img/inv-pitchfork-out.png",
		"ΔΔⵠΔᐃⵠΔ": "img/inv-pitchfork-in.png",
		"ⵠᐃᐃⵠⵠⵠΔ": "img/inv-pitchfork-click.png",
		"ⲆⲆⵠΔⵠⲆᐃ": "img/inv-wood-spike-door-out.png",
		"ⵠΔⲆⲆⵠⲆΔ": "img/inv-wood-spike-door-in.png",
		"ᐃᐃⵠᐃᐃⵠᐃ": "img/inv-wood-spike-door-click.png",
		"ⲆⵠᐃⵠⵠΔᐃ": "img/inv-stone-spike-door-out.png",
		"ⲆΔⵠⲆΔΔⵠ": "img/inv-stone-spike-door-in.png",
		"ᐃⵠⲆⵠΔⵠⵠ": "img/inv-stone-spike-door-click.png",
		"ⲆΔⵠⵠⵠⵠⲆ": "img/inv-gold-spike-door-out.png",
		"ⲆⲆΔΔⵠⵠᐃ": "img/inv-gold-spike-door-in.png",
		"ⵠⵠΔᐃⵠᐃⵠ": "img/inv-gold-spike-door-click.png",
		"ⵠᐃΔᐃⵠⵠᐃ": "img/inv-diamond-spike-door-out.png",
		"ⲆⵠᐃΔⵠⵠΔ": "img/inv-diamond-spike-door-in.png",
		"ΔⲆᐃᐃΔⵠⵠ": "img/inv-diamond-spike-door-click.png",
		"ⲆᐃᐃⲆⵠⵠⲆ": "img/inv-amethyst-spike-door-out.png",
		"ⵠᐃᐃᐃⵠᐃⵠ": "img/inv-amethyst-spike-door-in.png",
		"ΔᐃΔⵠΔⲆᐃ": "img/inv-amethyst-spike-door-click.png",
		"ΔΔⵠⵠΔᐃᐃ": "img/day-wood-spike-door.png",
		"ⲆᐃΔᐃΔΔΔ": "img/night-wood-spike-door.png",
		"ⲆΔᐃᐃⲆⵠΔ": "img/day-stone-spike-door.png",
		"ⲆΔⵠΔⵠⲆΔ": "img/night-stone-spike-door.png",
		"ⲆⲆⵠⲆⵠⲆⵠ": "img/day-gold-spike-door.png",
		"ΔᐃⵠⲆΔᐃᐃ": "img/night-gold-spike-door.png",
		"ⵠΔᐃⲆⵠᐃⵠ": "img/day-diamond-spike-door.png",
		"ⲆᐃⲆΔᐃΔⵠ": "img/night-diamond-spike-door.png",
		"ᐃᐃⲆⵠᐃᐃΔ": "img/day-amethyst-spike-door.png",
		"ⲆΔΔⲆⲆΔᐃ": "img/night-amethyst-spike-door.png",
		"ⵠᐃⵠⵠⲆᐃⵠ": "img/inv-reidite-spike-door-out.png",
		"ⲆΔⵠΔΔᐃⵠ": "img/inv-reidite-spike-door-in.png",
		"ΔⵠΔΔⲆⲆᐃ": "img/inv-reidite-spike-door-click.png",
		"ᐃΔᐃⵠⲆⲆⵠ": "img/inv-reidite-door-out.png",
		"ᐃⵠᐃⲆⲆⵠᐃ": "img/inv-reidite-door-in.png",
		"ⵠᐃᐃⵠᐃⵠΔ": "img/inv-reidite-door-click.png",
		"ᐃΔΔᐃⵠⵠᐃ": "img/inv-reidite-spike-out.png",
		"ⵠⵠⲆⵠΔⲆΔ": "img/inv-reidite-spike-in.png",
		"ᐃⵠᐃΔⲆΔᐃ": "img/inv-reidite-spike-click.png",
		"ⵠⲆⲆΔⲆⲆᐃ": "img/inv-reidite-wall-out.png",
		"ⵠⲆΔΔⵠⲆⵠ": "img/inv-reidite-wall-in.png",
		"ΔⲆᐃᐃⵠⵠⲆ": "img/inv-reidite-wall-click.png",
		"ΔⵠᐃⵠⲆᐃⵠ": "img/day-reidite-wall.png",
		"ΔⵠᐃᐃᐃΔᐃ": "img/night-reidite-wall.png",
		"ᐃΔⵠΔΔⲆⲆ": "img/day-reidite-door.png",
		"ᐃᐃⵠΔⲆᐃⵠ": "img/night-reidite-door.png",
		"ᐃΔⵠᐃⵠⲆᐃ": "img/day-reidite-spike.png",
		"ⵠᐃΔΔⲆⵠⵠ": "img/night-reidite-spike.png",
		"ΔΔᐃΔΔⲆⲆ": "img/day-reidite-spike-door.png",
		"ΔⲆᐃᐃΔⲆᐃ": "img/night-reidite-spike-door.png",
		"ⵠⲆΔᐃΔⵠᐃ": "img/inv-reidite-pickaxe-out.png",
		"ⲆᐃⲆⲆᐃᐃⵠ": "img/inv-reidite-pickaxe-in.png",
		"ⵠⵠⵠⲆⵠⵠᐃ": "img/inv-reidite-pickaxe-click.png",
		"ΔΔⵠΔⵠⲆᐃ": "img/day-reidite-pickaxe.png",
		"ⵠⲆⵠⵠΔⲆᐃ": "img/night-reidite-pickaxe.png",
		"ΔⵠΔⲆᐃⵠⵠ": "img/inv-reidite-hammer-out.png",
		"ᐃⵠᐃⵠⵠⵠᐃ": "img/inv-reidite-hammer-in.png",
		"ΔΔⵠⲆⲆᐃⲆ": "img/inv-reidite-hammer-click.png",
		"ⲆᐃΔⵠⵠⲆⲆ": "img/day-reidite-hammer.png",
		"ᐃᐃΔⵠΔⵠΔ": "img/night-reidite-hammer.png",
		"ⲆⵠⵠΔΔᐃΔ": "img/day-watermelon1.png",
		"ᐃⲆⵠⲆⵠΔⲆ": "img/night-watermelon1.png",
		"ⲆⵠⵠᐃⵠⲆΔ": "img/day-watermelon-dried1.png",
		"ⲆⵠΔΔᐃⵠⵠ": "img/night-watermelon-dried1.png",
		"ΔⵠⵠⲆᐃⵠᐃ": "img/inv-watermelon-out.png",
		"ᐃⵠΔᐃⲆⲆⵠ": "img/inv-watermelon-in.png",
		"ᐃⵠⵠᐃᐃᐃᐃ": "img/inv-watermelon-click.png",
		"ⲆᐃⵠΔⵠⵠΔ": "img/day-boat.png",
		"ᐃᐃⲆΔⵠΔᐃ": "img/night-boat.png",
		"ⲆⲆΔᐃⲆᐃⵠ": "img/day-boat-wave.png",
		"ΔᐃⵠⵠᐃⵠΔ": "img/night-boat-wave.png",
		"ᐃᐃⲆⲆⲆⵠΔ": "img/inv-boat-out.png",
		"ⵠⵠⲆΔⲆⲆⵠ": "img/inv-boat-in.png",
		"ⵠⵠᐃᐃΔᐃⲆ": "img/inv-boat-click.png",
		"ᐃⲆᐃⲆᐃΔΔ": "img/day-plane.png",
		"ΔⵠⵠⲆⲆⵠⲆ": "img/night-plane.png",
		"ᐃΔΔᐃᐃⲆΔ": "img/inv-plane-out.png",
		"ⲆΔΔΔⵠⲆΔ": "img/inv-plane-in.png",
		"ⲆΔⵠᐃΔΔⵠ": "img/inv-plane-click.png",
		"ⲆⲆΔⵠΔⲆᐃ": "img/day-sled.png",
		"ⵠⵠᐃⵠⵠⲆⲆ": "img/night-sled.png",
		"ⲆⵠᐃᐃΔⵠⲆ": "img/day-sled-wave.png",
		"ᐃⵠⵠⵠⵠΔⲆ": "img/night-sled-wave.png",
		"ⲆᐃⵠᐃⲆᐃⲆ": "img/inv-sled-out.png",
		"ΔᐃᐃⵠⲆⲆᐃ": "img/inv-sled-in.png",
		"ⵠⵠⲆⲆᐃⲆΔ": "img/inv-sled-click.png",
		"ᐃᐃΔᐃΔΔᐃ": "img/day-pirate-hat.png",
		"ᐃᐃⲆⲆⲆⵠⲆ": "img/night-pirate-hat.png",
		"ⲆⲆΔⲆᐃⲆⲆ": "img/inv-pirate-hat-out.png",
		"ᐃᐃⵠⲆᐃⲆⵠ": "img/inv-pirate-hat-in.png",
		"ᐃᐃⲆⵠⲆⲆᐃ": "img/inv-pirate-hat-click.png",
		"ᐃΔⵠΔᐃᐃⲆ": "img/day-penguin.png",
		"ΔΔᐃⲆⵠᐃⲆ": "img/night-penguin.png",
		"ⲆⵠⲆΔⵠⲆᐃ": "img/hurt-penguin.png",
		"ⲆᐃΔⲆᐃ": "img/inv-penguin-feather-click.png",
		"ᐃⲆⵠⵠⵠ": "img/inv-hawk-feather-click.png",
		"ᐃᐃΔⲆⲆΔⵠ": "img/day-boar1.png",
		"ⵠᐃΔΔⵠⵠΔ": "img/day-boar1-tamed.png",
		"ΔⲆⵠⵠⲆᐃⵠ": "img/day-boar1-angry.png",
		"ΔⵠⲆΔΔΔⵠ": "img/night-boar1.png",
		"ⵠΔΔᐃᐃⲆⲆ": "img/night-boar1-tamed.png",
		"ᐃⵠⲆⵠⵠΔⲆ": "img/night-boar1-angry.png",
		"ΔᐃᐃⲆⵠⵠᐃ": "img/inv-mount-boar-out.png",
		"ΔΔΔⵠⵠΔᐃ": "img/inv-mount-boar-in.png",
		"ΔⵠⲆᐃᐃᐃᐃ": "img/inv-mount-boar-click.png",
		"ⲆⲆΔⵠΔⵠΔ": "img/day-hurt-boar1.png",
		"ⵠΔⲆᐃᐃⵠᐃ": "img/boar1-step.png",
		"Δⵠᐃᐃᐃᐃᐃ": "img/day-saddle1.png",
		"ⲆᐃⲆΔᐃⵠᐃ": "img/night-saddle1.png",
		"ⲆⲆΔⲆⵠⵠⵠ": "img/inv-saddle-out.png",
		"ⵠⲆⵠΔΔΔⵠ": "img/inv-saddle-in.png",
		"ᐃⲆᐃᐃᐃⲆⲆ": "img/inv-saddle-click.png",
		"ΔΔⲆᐃⵠᐃⲆ": "img/day-magic-wand0.png",
		"ⵠⵠᐃⵠΔⵠᐃ": "img/night-magic-wand0.png",
		"ⲆΔⲆⵠⵠᐃΔ": "img/day-light-wand1.png",
		"ᐃⵠΔΔᐃⲆⲆ": "img/night-light-wand1.png",
		"ⲆⵠΔⵠᐃᐃᐃ": "img/inv-magic-wand0-out.png",
		"ⲆⲆⵠⵠⵠⲆⵠ": "img/inv-magic-wand0-in.png",
		"ⲆᐃΔᐃⵠⲆⲆ": "img/inv-magic-wand0-click.png",
		"ⵠⵠⲆᐃᐃⵠΔ": "img/day-magic-wand1.png",
		"ΔΔⲆᐃᐃΔⵠ": "img/night-magic-wand1.png",
		"ⵠⵠⵠⵠⵠⵠΔ": "img/day-light-wand0.png",
		"ΔⵠⵠⲆᐃⵠⲆ": "img/night-light-wand0.png",
		"ΔⵠⵠⵠⵠΔᐃ": "img/inv-magic-wand1-out.png",
		"ⵠᐃⵠⵠⲆᐃΔ": "img/inv-magic-wand1-in.png",
		"ⲆΔᐃⲆⵠΔⲆ": "img/inv-magic-wand1-click.png",
		"ⲆⵠΔᐃⲆᐃⵠ": "img/day-firefly.png",
		"ΔⵠΔᐃⲆⲆΔ": "img/night-firefly.png",
		"ΔΔⵠᐃⵠΔⵠ": "img/hurt-firefly.png",
		"ⲆΔΔⵠᐃⲆⲆ": "img/inv-firefly-out.png",
		"ⵠᐃⵠᐃΔΔΔ": "img/inv-firefly-in.png",
		"ᐃⵠΔᐃΔⲆΔ": "img/inv-firefly-click.png",
		"ᐃΔΔᐃᐃᐃΔ": "img/day-baby-dragon.png",
		"ᐃᐃΔⵠⲆᐃⲆ": "img/night-baby-dragon.png",
		"ⲆⵠΔⲆᐃᐃᐃ": "img/day-baby-dragon-angry.png",
		"ⲆⵠⲆⵠᐃᐃⲆ": "img/night-baby-dragon-angry.png",
		"ⲆᐃⵠᐃⵠΔᐃ": "img/day-baby-dragon-tamed.png",
		"ΔⲆᐃⲆΔⲆⵠ": "img/night-baby-dragon-tamed.png",
		"ⲆΔΔΔᐃⵠⵠ": "img/day-wing-dragon-left-angry.png",
		"ᐃΔⵠΔΔᐃΔ": "img/night-dragon-wing-left-angry.png",
		"ⵠⵠᐃΔⲆⲆᐃ": "img/day-wing-dragon-right-angry.png",
		"ᐃⲆΔᐃΔΔᐃ": "img/night-dragon-wing-right-angry.png",
		"ⲆΔΔΔⵠⵠΔ": "img/day-wing-dragon-left-tamed.png",
		"ⵠᐃΔΔΔⵠⲆ": "img/night-dragon-wing-left-tamed.png",
		"ⵠΔⵠᐃⲆΔΔ": "img/day-wing-dragon-right-tamed.png",
		"ᐃᐃⲆⲆΔⲆⵠ": "img/night-wing-dragon-right-tamed.png",
		"ⲆⵠᐃⲆᐃⲆΔ": "img/day-wing-dragon-left.png",
		"ⵠⵠⵠΔⵠᐃᐃ": "img/night-dragon-wing-left.png",
		"ⵠⲆⲆᐃⵠᐃⵠ": "img/day-wing-dragon-right.png",
		"ⲆΔⵠΔΔΔⵠ": "img/night-wing-dragon-right.png",
		"ⵠⵠΔᐃⲆᐃⲆ": "img/hurt-baby-dragon.png",
		"Δⵠⵠⵠᐃⵠⵠ": "img/hurt-baby-dragon-wing-left.png",
		"ᐃⲆⵠⲆⵠᐃⲆ": "img/hurt-baby-dragon-wing-right.png",
		"ᐃΔᐃⲆΔᐃⵠ": "img/inv-baby-dragon-out.png",
		"ᐃΔᐃᐃⲆᐃⲆ": "img/inv-baby-dragon-in.png",
		"ᐃⲆᐃΔⲆᐃΔ": "img/inv-baby-dragon-click.png",
		"ᐃΔⵠⲆⲆᐃᐃ": "img/day-baby-lava.png",
		"ⲆⲆⲆⲆⵠⲆᐃ": "img/night-baby-lava.png",
		"ⵠΔᐃⵠΔⲆΔ": "img/day-baby-lava-angry.png",
		"ⲆⵠΔⵠⵠᐃⲆ": "img/night-baby-lava-angry.png",
		"ⲆⲆΔᐃᐃᐃᐃ": "img/day-baby-lava-tamed.png",
		"ᐃⲆⵠⵠⲆᐃⵠ": "img/night-baby-lava-tamed.png",
		"ⲆᐃᐃⵠᐃⵠΔ": "img/day-wing-lava-left-angry.png",
		"ΔᐃⲆⲆⲆᐃⲆ": "img/night-wing-lava-left-angry.png",
		"ⵠΔΔⵠⵠΔΔ": "img/day-wing-lava-right-angry.png",
		"ⲆΔΔᐃⵠΔᐃ": "img/night-wing-lava-right-angry.png",
		"ᐃΔⲆᐃⵠΔᐃ": "img/day-wing-lava-left-tamed.png",
		"ΔᐃᐃⲆⵠᐃΔ": "img/night-wing-lava-left-tamed.png",
		"ⲆΔᐃⲆΔΔⲆ": "img/day-wing-lava-right-tamed.png",
		"ᐃⲆΔⲆⵠⵠⲆ": "img/night-wing-lava-right-tamed.png",
		"ΔΔⵠⵠⵠⲆⵠ": "img/day-wing-lava-left.png",
		"ΔⲆⵠᐃⲆⵠᐃ": "img/night-wing-lava-left.png",
		"ᐃᐃⵠΔΔᐃⲆ": "img/day-wing-lava-right.png",
		"ΔᐃΔⲆᐃᐃΔ": "img/night-wing-lava-right.png",
		"ᐃΔᐃΔⲆᐃⵠ": "img/hurt-baby-lava.png",
		"ⲆΔⲆⲆⵠⵠⲆ": "img/hurt-baby-lava-wing-left.png",
		"ⲆᐃᐃᐃⲆⵠⵠ": "img/hurt-baby-lava-wing-right.png",
		"ⲆⲆⲆⵠΔᐃⲆ": "img/inv-baby-lava-out.png",
		"ᐃⵠᐃΔⲆᐃⲆ": "img/inv-baby-lava-in.png",
		"ⵠΔⵠⲆΔⵠⵠ": "img/inv-baby-lava-click.png",
		"ⵠⵠᐃⵠⲆⲆⵠ": "img/day-falcon.png",
		"ΔⵠⵠᐃΔΔᐃ": "img/night-falcon.png",
		"ᐃⵠΔⲆⲆⵠⵠ": "img/day-falcon-angry.png",
		"ⲆᐃⵠⵠⵠⵠΔ": "img/night-falcon-angry.png",
		"ΔⵠᐃⲆⲆΔⲆ": "img/day-falcon-ground.png",
		"ᐃⲆΔⲆᐃⵠⵠ": "img/night-falcon-ground.png",
		"ᐃⵠᐃΔᐃᐃⵠ": "img/day-falcon-ground-angry.png",
		"ⲆΔⲆⵠⵠⲆΔ": "img/night-falcon-ground-angry.png",
		"ᐃⲆΔΔΔⲆⲆ": "img/day-falcon-wings-left.png",
		"ΔⵠⲆⵠⵠⵠΔ": "img/night-falcon-wings-left.png",
		"ΔᐃᐃᐃΔⵠΔ": "img/day-falcon-wings-right.png",
		"ΔⲆⲆⲆⵠⲆⵠ": "img/night-falcon-wings-right.png",
		"ᐃᐃⵠⵠⲆᐃⲆ": "img/day-falcon-angry-wings-left.png",
		"ⵠΔⲆΔᐃⵠⵠ": "img/night-falcon-angry-wings-left.png",
		"ⲆⵠⲆᐃΔᐃⵠ": "img/day-falcon-angry-wings-right.png",
		"ⲆⲆⲆⵠᐃⲆΔ": "img/night-falcon-angry-wings-right.png",
		"ᐃΔⲆᐃᐃᐃΔ": "img/day-falcon-wings-left-tamed.png",
		"ΔⵠⵠⵠᐃΔⲆ": "img/night-falcon-wings-left-tamed.png",
		"ⲆᐃΔᐃᐃᐃᐃ": "img/day-falcon-wings-right-tamed.png",
		"ᐃΔⵠᐃΔⲆⲆ": "img/night-falcon-wings-right-tamed.png",
		"ⵠⲆⲆⵠᐃⵠⲆ": "img/day-falcon-tamed.png",
		"ᐃΔⵠⲆⲆⵠⵠ": "img/night-falcon-tamed.png",
		"ΔᐃⵠΔⲆᐃⲆ": "img/hurt-falcon-ground.png",
		"ᐃⵠⲆΔⵠⲆΔ": "img/hurt-falcon.png",
		"ⲆⵠⵠⵠᐃΔΔ": "img/hurt-falcon-wings-left.png",
		"ΔⵠΔⲆᐃᐃΔ": "img/hurt-falcon-wings-right.png",
		"ⵠⵠⵠⵠΔᐃΔ": "img/inv-falcon-out.png",
		"ΔΔᐃⵠⲆΔᐃ": "img/inv-falcon-in.png",
		"ⲆⲆᐃΔⵠⵠΔ": "img/inv-falcon-click.png",
		"ᐃᐃⵠⵠⲆᐃΔ": "img/day-crab-boss.png",
		"ΔΔⲆⲆΔⲆⲆ": "img/night-crab-boss.png",
		"ⵠΔᐃΔΔᐃⵠ": "img/day-crab-boss-angry.png",
		"ᐃⲆᐃΔⲆΔⵠ": "img/night-crab-boss-angry.png",
		"ⵠΔΔΔⲆⵠΔ": "img/day-crab-boss-tamed.png",
		"ᐃⲆⵠΔⲆⲆⲆ": "img/night-crab-boss-tamed.png",
		"ⲆⵠΔⲆΔᐃᐃ": "img/day-crab-boss-claw-left-attack.png",
		"ΔᐃᐃᐃΔΔⵠ": "img/night-crab-boss-claw-left-attack.png",
		"ⲆⲆⲆⲆⵠΔΔ": "img/day-crab-boss-claw-right-attack.png",
		"ⵠΔⲆⲆⲆⵠΔ": "img/night-crab-boss-claw-right-attack.png",
		"ᐃⵠⵠⵠΔΔⲆΔᐃ": "img/day-crab-boss-claw-left-tamed.png",
		"ⵠⵠⲆᐃⵠⵠⵠⵠⲆ": "img/night-crab-boss-claw-left-tamed.png",
		"ᐃⲆⲆΔᐃⵠⲆⵠᐃ": "img/day-crab-boss-claw-right-tamed.png",
		"ΔᐃᐃΔᐃⵠⲆᐃⵠ": "img/night-crab-boss-claw-right-tamed.png",
		"ⲆⵠⲆᐃⲆΔⵠ": "img/day-crab-boss-claw-left.png",
		"ΔΔᐃΔⲆⵠΔ": "img/night-crab-boss-claw-left.png",
		"ΔΔᐃⲆⲆⵠⲆ": "img/day-crab-boss-claw-right.png",
		"ⵠⲆᐃΔΔᐃⲆ": "img/night-crab-boss-claw-right.png",
		"ⵠᐃⲆⵠⲆΔⵠ": "img/hurt-crab-boss.png",
		"ΔᐃⲆΔⲆⵠΔ": "img/hurt-crab-boss-claw-left.png",
		"ⵠⲆΔΔⵠⲆᐃ": "img/hurt-crab-boss-claw-right.png",
		"ⵠΔᐃΔⲆⵠⲆ": "img/heal-crab-boss.png",
		"ᐃΔⵠᐃⵠᐃⵠ": "img/heal-crab-boss-claw-left.png",
		"ᐃⲆᐃΔⲆⵠΔ": "img/heal-crab-boss-claw-right.png",
		"ᐃⲆΔⲆⲆΔⵠ": "img/crab-step.png",
		"ⵠⲆⵠⲆΔⲆⲆ": "img/inv-crab-boss-out.png",
		"ⵠᐃᐃⲆⲆⲆⵠ": "img/inv-crab-boss-in.png",
		"ΔΔᐃᐃⲆⵠⵠ": "img/inv-crab-boss-click.png",
		"ΔⵠⲆΔⵠⵠⵠ": "img/day-cactus10.png",
		"ΔᐃᐃⲆⵠΔⲆ": "img/night-cactus10.png",
		"ᐃⲆⵠⵠᐃⲆⲆ": "img/inv-cactus-out.png",
		"ⲆⵠΔᐃⲆⵠⵠ": "img/inv-cactus-in.png",
		"ⲆⵠⵠⲆⵠΔⵠ": "img/inv-cactus-click.png",
		"ⲆⲆⵠᐃᐃᐃΔ": "img/day-scorpion.png",
		"ⲆⲆⵠⵠΔⲆΔ": "img/night-scorpion.png",
		"ⵠⲆᐃⵠᐃᐃⲆ": "img/day-scorpion-hand-left.png",
		"ⲆᐃⲆᐃⲆⲆⲆ": "img/night-scorpion-hand-left.png",
		"ΔⵠΔᐃⲆΔⲆ": "img/day-scorpion-hand-right.png",
		"ᐃᐃⲆᐃⲆⲆᐃ": "img/night-scorpion-hand-right.png",
		"ᐃⲆᐃᐃᐃᐃⵠ": "img/hurt-scorpion.png",
		"ᐃⵠΔᐃΔⵠⵠ": "img/hurt-scorpion-hand-left.png",
		"ΔⲆⵠⲆᐃΔΔ": "img/hurt-scorpion-hand-right.png",
		"ⲆΔⵠΔⵠΔⵠ": "img/day-vulture.png",
		"ⵠᐃⲆΔⲆⵠⲆ": "img/night-vulture.png",
		"ΔᐃᐃᐃΔⵠⲆ": "img/day-vulture-angry.png",
		"ⲆⲆΔᐃᐃΔⵠ": "img/night-vulture-angry.png",
		"ⵠⵠⲆⵠⵠᐃⵠ": "img/day-vulture-ground.png",
		"ᐃⵠⵠᐃⵠᐃⲆ": "img/night-vulture-ground.png",
		"ΔΔⵠΔⵠΔⵠ": "img/day-vulture-ground-angry.png",
		"ⲆᐃᐃⲆⵠⵠᐃ": "img/night-vulture-ground-angry.png",
		"ᐃⵠᐃⵠΔⵠΔ": "img/day-vulture-wings-left.png",
		"ᐃⲆⲆᐃⵠᐃᐃ": "img/night-vulture-wings-left.png",
		"ᐃⵠⵠⲆⵠΔⵠ": "img/day-vulture-wings-right.png",
		"ᐃΔΔⲆΔⵠⵠ": "img/night-vulture-wings-right.png",
		"ΔΔᐃΔᐃⵠⵠ": "img/day-vulture-angry-wings-left.png",
		"ΔΔⵠΔΔⲆΔ": "img/night-vulture-angry-wings-left.png",
		"ⵠⵠⵠⵠⵠᐃΔ": "img/day-vulture-angry-wings-right.png",
		"ΔⲆᐃΔᐃⲆᐃ": "img/night-vulture-angry-wings-right.png",
		"ᐃᐃΔⵠⵠᐃᐃ": "img/day-vulture-wings-left-tamed.png",
		"ⲆⲆⲆⲆᐃⵠΔ": "img/night-vulture-wings-left-tamed.png",
		"ⲆⵠⲆⵠᐃⲆΔ": "img/day-vulture-wings-right-tamed.png",
		"ⵠΔⵠⲆⵠⲆⲆ": "img/night-vulture-wings-right-tamed.png",
		"ᐃΔᐃⲆΔⵠΔ": "img/day-vulture-tamed.png",
		"ⲆⵠΔⲆΔⵠᐃ": "img/night-vulture-tamed.png",
		"ⲆΔΔⵠᐃΔᐃ": "img/hurt-vulture-ground.png",
		"ⲆⲆΔⵠᐃᐃⵠ": "img/hurt-vulture.png",
		"ⲆⵠᐃΔⲆΔΔ": "img/hurt-vulture-wings-left.png",
		"ⲆⵠⲆⵠⲆⲆΔ": "img/hurt-vulture-wings-right.png",
		"ᐃⲆᐃΔⵠᐃⲆ": "img/day-aloe-vera.png",
		"ᐃⵠΔᐃⵠⲆⲆ": "img/night-aloe-vera.png",
		"ᐃⲆⵠΔⲆΔᐃ": "img/inv-aloe-vera-out.png",
		"ᐃⵠⵠⵠⵠⲆⲆ": "img/inv-aloe-vera-in.png",
		"ⵠⵠⵠΔᐃΔⲆ": "img/inv-aloe-vera-click.png",
		"ΔⵠⵠⵠΔᐃΔ": "img/day-aloe-vera-grown.png",
		"ⲆΔⲆΔᐃᐃᐃ": "img/night-aloe-vera-grown.png",
		"ΔⲆⲆᐃΔΔⵠ": "img/day-aloe-vera-dried.png",
		"ⲆⵠᐃΔⲆΔᐃ": "img/night-aloe-vera-dried.png",
		"ΔΔᐃᐃΔᐃᐃ": "img/day-turban1.png",
		"ⲆᐃᐃⵠΔⵠⵠ": "img/night-turban1.png",
		"ⵠᐃⲆⲆΔⲆⵠ": "img/day-turban2.png",
		"ᐃⲆⲆⵠⲆⲆⲆ": "img/night-turban2.png",
		"ⵠᐃᐃΔΔΔΔ": "img/inv-turban2-out.png",
		"ᐃⵠΔⲆⵠΔⲆ": "img/inv-turban2-in.png",
		"ΔⲆΔᐃΔⲆᐃ": "img/inv-turban2-click.png",
		"ⵠⲆΔⲆⲆΔΔ": "img/inv-turban1-out.png",
		"ⲆⵠΔⵠΔΔⲆ": "img/inv-turban1-in.png",
		"ᐃᐃⲆΔⲆⵠⲆ": "img/inv-turban1-click.png",
		"ᐃᐃⲆΔᐃⵠᐃ": "img/day-pitchfork2.png",
		"ⲆⲆᐃⵠⵠᐃΔ": "img/night-pitchfork2.png",
		"ⵠⲆⲆᐃΔⵠⵠ": "img/inv-pitchfork2-out.png",
		"ⲆⲆⲆⲆᐃⵠⲆ": "img/inv-pitchfork2-in.png",
		"ⵠᐃΔᐃⲆⲆⵠ": "img/inv-pitchfork2-click.png",
		"ΔΔᐃΔⲆⵠⵠ": "img/inv-gold-fork-click.png",
		"ⲆᐃΔΔΔⵠᐃ": "img/inv-pilot-glasses-click.png",
		"ⲆⲆΔⲆⲆΔⲆ": "img/day-pilot-helmet.png",
		"ⲆⵠΔⵠΔᐃⲆ": "img/night-pilot-helmet.png",
		"ⵠⲆΔⲆⵠⲆⲆ": "img/inv-pilot-helmet-out.png",
		"ΔⲆΔⲆᐃⲆᐃ": "img/inv-pilot-helmet-in.png",
		"ᐃⵠⵠⵠⵠᐃᐃ": "img/inv-pilot-helmet-click.png",
		"ΔⲆⵠⵠⵠΔⵠᐃⵠ": "img/day-sandworm0.png",
		"ΔΔⵠⵠᐃⵠᐃ": "img/day-sandworm1.png",
		"ⵠᐃᐃᐃΔⵠΔ": "img/day-sandworm2.png",
		"ⵠΔⲆᐃⵠΔⲆΔᐃ": "img/night-sandworm0.png",
		"ⵠΔⲆΔᐃⲆⲆ": "img/night-sandworm1.png",
		"ΔᐃΔⵠΔⲆⵠ": "img/night-sandworm2.png",
		"ΔⵠⲆᐃᐃⵠΔ": "img/hurt-sandworm0.png",
		"ΔᐃⵠⵠⲆⲆⲆ": "img/hurt-sandworm1.png",
		"ᐃⲆᐃⵠΔⲆᐃ": "img/hurt-sandworm2.png",
		"ΔΔΔᐃⵠ": "img/inv-vulture-feather-click.png",
		"ⲆⵠᐃᐃⲆᐃΔ": "img/day-emerald0.png",
		"ⵠⲆΔΔᐃⵠⲆ": "img/night-emerald0.png",
		"ⵠⲆⵠⵠⵠᐃⲆ": "img/day-emerald1.png",
		"ⵠⵠᐃⲆⲆⵠⵠ": "img/night-emerald1.png",
		"ΔᐃᐃⲆᐃⵠΔ": "img/day-emerald2.png",
		"ᐃΔⵠⲆⲆᐃΔ": "img/night-emerald2.png",
		"ΔⵠᐃⲆⲆ": "img/inv-emerald-click.png",
		"ΔΔᐃᐃⲆᐃⵠ": "img/inv-sworm-juice-out.png",
		"ⵠⵠⵠⲆⲆⲆⲆ": "img/inv-sworm-juice-in.png",
		"ⲆᐃⲆΔⲆⲆΔ": "img/inv-sworm-juice-click.png",
		"ΔⵠⲆⲆᐃⲆⲆ": "img/day-point-machine.png",
		"ⲆⲆⵠᐃⲆΔΔ": "img/night-point-machine.png",
		"ᐃᐃΔΔⲆᐃⵠ": "img/day-point-machine-hole.png",
		"ⵠⵠⲆⲆΔᐃΔ": "img/night-point-machine-hole.png",
		"ⲆΔⵠᐃΔⲆⲆ": "img/day-point-machine-ground.png",
		"ⲆⲆⲆᐃΔᐃᐃ": "img/night-point-machine-ground.png",
		"ⲆᐃⵠⵠᐃⲆⲆ": "img/day-point-machine-rotate.png",
		"ⵠᐃᐃᐃΔΔⵠ": "img/night-point-machine-rotate.png",
		"ᐃⲆⵠⵠΔᐃⵠ": "img/inv-point-machine-out.png",
		"ⲆᐃΔΔⵠⲆᐃ": "img/inv-point-machine-in.png",
		"ΔⵠᐃⲆΔⲆΔ": "img/inv-point-machine-click.png",
		"ΔΔΔΔΔⲆΔ": "img/day-extractor-machine0-stone.png",
		"ΔᐃΔΔⲆⵠΔ": "img/night-extractor-machine0-stone.png",
		"ⲆΔΔⲆⲆᐃΔ": "img/day-extractor-machine-stone.png",
		"ⵠⲆΔΔⵠΔⲆ": "img/night-extractor-machine-stone.png",
		"ΔᐃᐃᐃⵠⲆⲆ": "img/inv-extractor-machine-stone-out.png",
		"ⲆΔⵠᐃⲆΔΔ": "img/inv-extractor-machine-stone-in.png",
		"ⲆⲆⵠᐃᐃΔⵠ": "img/inv-extractor-machine-stone-click.png",
		"ⲆᐃⲆᐃⵠᐃⲆ": "img/day-extractor-machine0-gold.png",
		"ⵠⵠΔⲆⵠⲆⲆ": "img/night-extractor-machine0-gold.png",
		"ⲆΔⵠⵠⲆⲆΔ": "img/day-extractor-machine-gold.png",
		"ⵠⵠⵠΔⵠᐃⲆ": "img/night-extractor-machine-gold.png",
		"ⲆΔᐃΔᐃΔⵠ": "img/inv-extractor-machine-gold-out.png",
		"ᐃΔᐃⵠⵠΔⵠ": "img/inv-extractor-machine-gold-in.png",
		"ᐃⵠⵠᐃⵠΔΔ": "img/inv-extractor-machine-gold-click.png",
		"ⲆΔᐃΔⵠᐃΔ": "img/day-extractor-machine0-diamond.png",
		"ⲆⵠΔᐃⲆⲆⲆ": "img/night-extractor-machine0-diamond.png",
		"ᐃⲆᐃᐃᐃⲆΔ": "img/day-extractor-machine-diamond.png",
		"ⲆΔⵠⲆᐃⵠⲆ": "img/night-extractor-machine-diamond.png",
		"ⲆΔⵠᐃⲆΔⲆ": "img/inv-extractor-machine-diamond-out.png",
		"ⲆᐃⵠⲆⵠΔⲆ": "img/inv-extractor-machine-diamond-in.png",
		"ⵠΔΔⲆⵠⲆⲆ": "img/inv-extractor-machine-diamond-click.png",
		"ᐃΔⲆⵠᐃⲆⵠ": "img/day-extractor-machine0-amethyst.png",
		"ᐃⵠⲆⵠⲆΔⵠ": "img/night-extractor-machine0-amethyst.png",
		"ⲆⲆΔΔⵠΔᐃ": "img/day-extractor-machine-amethyst.png",
		"ⲆᐃΔᐃᐃⵠᐃ": "img/night-extractor-machine-amethyst.png",
		"ΔⲆⵠΔⲆⵠᐃ": "img/inv-extractor-machine-amethyst-out.png",
		"ΔᐃΔⵠⲆᐃⲆ": "img/inv-extractor-machine-amethyst-in.png",
		"ⲆᐃⲆΔΔⲆⲆ": "img/inv-extractor-machine-amethyst-click.png",
		"ΔⲆᐃΔΔⲆⵠ": "img/day-extractor-machine0-reidite.png",
		"ⵠⵠΔⵠΔⵠⲆ": "img/night-extractor-machine0-reidite.png",
		"ΔᐃⲆⲆᐃⵠᐃ": "img/day-extractor-machine-reidite.png",
		"ⵠⵠΔⲆⵠΔⵠ": "img/night-extractor-machine-reidite.png",
		"ⵠᐃᐃΔΔΔᐃ": "img/inv-extractor-machine-reidite-out.png",
		"ⵠΔⲆᐃⵠⲆΔ": "img/inv-extractor-machine-reidite-in.png",
		"ᐃⲆⵠⵠΔΔᐃ": "img/inv-extractor-machine-reidite-click.png",
		"ΔᐃⵠΔᐃΔⲆ": "img/extractor-cases.png",
		"ᐃⵠᐃⵠᐃᐃⵠ": "img/day-golden-hen.png",
		"ⵠᐃΔΔᐃΔΔ": "img/night-golden-hen.png",
		"ΔᐃᐃᐃⲆᐃⵠ": "img/day-golden-chicken.png",
		"ⲆΔΔᐃᐃⲆⲆ": "img/night-golden-chicken.png",
		"ⲆⵠΔᐃΔᐃΔ": "img/hurt-golden-hen.png",
		"ⵠΔΔΔᐃᐃᐃ": "img/hurt-golden-chicken.png",
		"ⵠⲆⵠΔᐃΔⵠ": "img/logo-interface.png",
		"ⵠΔⲆᐃⲆΔΔ": "img/forest-mode-hover.png",
		"ΔΔΔᐃᐃⲆΔ": "img/normal-mode-hover.png",
		"ᐃⵠⵠⲆᐃⲆⵠ": "img/vampire-mode-hover.png",
		"ᐃⵠⲆⵠᐃΔⵠ": "img/zombie-mode-hover.png",
		"ⵠΔᐃⵠⲆⲆΔ": "img/community-mode-hover2.png",
		"ᐃⵠᐃⲆⵠⲆᐃ": "img/experimental-mode-hover.png",
		"ⲆⵠⵠⵠΔⵠⲆ": "img/zombie-mode-out.png",
		"ΔⲆⵠᐃⵠΔⲆ": "img/zombie-mode-in.png",
		"ᐃⲆΔⵠⵠⵠⵠ": "img/zombie-mode-click.png",
		"ΔᐃⵠⲆⵠΔⲆ": "img/vampire-mode-out.png",
		"ΔΔΔΔⲆⲆᐃ": "img/vampire-mode-in.png",
		"ᐃΔⲆⲆⲆᐃᐃ": "img/vampire-mode-click.png",
		"ᐃⵠΔⲆⵠᐃΔ": "img/normal-mode-out.png",
		"ΔᐃⲆᐃΔⵠⵠ": "img/normal-mode-in.png",
		"ᐃⵠⵠⲆΔⲆᐃ": "img/normal-mode-click.png",
		"ⵠⵠⵠΔΔⵠᐃ": "img/forest-mode-out.png",
		"ⲆⲆⲆΔⲆᐃᐃ": "img/forest-mode-in.png",
		"ΔⲆᐃⵠⲆⵠⵠ": "img/forest-mode-click.png",
		"ΔᐃΔΔΔΔⵠ": "img/community-mode-out.png",
		"ᐃΔᐃΔⲆⵠⵠ": "img/community-mode-in.png",
		"ᐃᐃᐃΔᐃⵠΔ": "img/community-mode-click.png",
		"ⲆᐃⵠΔΔⵠᐃ": "img/experimental-modes-out.png",
		"ΔⲆᐃⲆᐃᐃΔ": "img/experimental-modes-in.png",
		"ⵠⵠⵠᐃΔⵠⵠ": "img/experimental-modes-click.png",
		"ΔⵠᐃᐃΔⲆⵠ": "img/youtube-button-out.png",
		"ⵠΔᐃΔΔⵠᐃ": "img/youtube-button-in.png",
		"ᐃⵠΔⲆⲆᐃⲆ": "img/youtube-button-click.png",
		"ⲆΔⵠⵠΔⲆΔ": "img/wiki-button-out.png",
		"ΔⵠᐃⲆΔΔᐃ": "img/wiki-button-in.png",
		"ᐃⵠᐃᐃᐃⵠⵠ": "img/wiki-button-click.png",
		"ᐃᐃⲆᐃΔⵠⲆ": "img/twitter-button-out.png",
		"ⲆᐃᐃΔⵠᐃᐃ": "img/twitter-button-in.png",
		"ⵠⵠᐃΔᐃᐃᐃ": "img/twitter-button-click.png",
		"ⵠⲆⵠⲆᐃᐃⲆ": "img/facebook-button-out.png",
		"ⵠⵠⵠᐃΔᐃΔ": "img/facebook-button-in.png",
		"ⲆⲆᐃΔⲆⵠΔ": "img/facebook-button-click.png",
		"ᐃΔΔᐃᐃΔⵠ": "img/reddit-button-out.png",
		"ⵠⵠⵠΔᐃⵠⵠ": "img/reddit-button-in.png",
		"ΔᐃΔⵠⵠⵠᐃ": "img/reddit-button-click.png",
		"ᐃⲆΔΔΔⲆΔ": "img/discord-button-out.png",
		"ⲆⲆⵠⲆⵠΔΔ": "img/discord-button-in.png",
		"ᐃⲆⲆⵠⲆⵠⲆ": "img/discord-button-click.png",
		"ⲆⲆᐃⲆⵠᐃᐃ": "img/merch-button-out.png",
		"ⵠᐃΔⲆⲆᐃΔ": "img/merch-button-in.png",
		"ᐃᐃΔⲆⲆᐃᐃ": "img/merch-button-click.png",
		"ⵠᐃⵠⲆᐃΔΔⲆᐃ": "img/terminal-button-out.png",
		"ᐃΔⵠᐃⵠᐃⵠⵠΔ": "img/terminal-button-in.png",
		"ⲆΔⵠᐃⲆΔᐃⲆⵠ": "img/terminal-button-click.png",
		"ᐃⵠΔᐃⵠᐃᐃ": "img/restart-out.png",
		"ΔⵠΔΔⲆⲆⲆ": "img/restart-in.png",
		"ᐃᐃᐃΔⲆⵠᐃ": "img/restart-click.png",
		"ΔΔⲆⲆⲆΔᐃ": "img/reboot-out.png",
		"ⲆⵠⲆⲆⵠΔΔ": "img/reboot-in.png",
		"ⲆᐃⵠⲆⵠⵠΔ": "img/reboot-click.png",
		"ⲆⵠΔᐃⲆᐃΔ": "img/guide-out.png",
		"ᐃΔⵠⲆⲆⲆᐃ": "img/guide-in.png",
		"ⵠΔⵠΔᐃⵠᐃ": "img/guide-click.png",
		"ⵠᐃⲆᐃⲆⵠΔ": "img/copy-paste-out.png",
		"ᐃⲆᐃᐃⲆⲆⲆ": "img/copy-paste-in.png",
		"ⵠⲆΔⵠⲆⵠⲆ": "img/copy-paste-click.png",
		"ᐃⵠΔⲆΔᐃᐃ": "img/link-buttons-bg.png",
		"ⵠⵠΔⵠⲆⲆⲆ": "img/changelog-box2.png",
		"ᐃΔΔᐃⲆⲆⲆ": "img/changelog_31.png",
		"ΔⵠᐃⵠΔΔⵠ": "img/banner-taming.png",
		"ⲆᐃᐃΔΔⵠⵠ": "img/profile-button-out.png",
		"ⲆⲆΔⲆⵠⵠⲆ": "img/profile-button-in.png",
		"ΔⲆΔⵠΔΔⲆ": "img/profile-button-click.png",
		"ᐃⲆⲆⲆⵠⵠΔ": "img/login-button-out.png",
		"ⲆⵠΔᐃⲆᐃᐃ": "img/login-button-in.png",
		"ΔⲆᐃΔᐃᐃⲆ": "img/login-button-click.png",
		"ⲆᐃΔⲆⵠᐃⵠ": "img/login-google-out.png",
		"ⵠⲆΔⲆΔᐃΔ": "img/login-google-in.png",
		"ⵠᐃⲆⲆⵠΔᐃ": "img/login-google-click.png",
		"ΔⵠᐃⲆᐃⲆᐃ": "img/login-facebook-out.png",
		"ⲆᐃᐃΔᐃΔⲆ": "img/login-facebook-in.png",
		"ᐃⲆᐃᐃⲆⵠⵠ": "img/login-facebook-click.png",
		"ΔΔᐃⲆⲆⲆⲆ": "img/account-box.png",
		"ⲆᐃⲆΔⲆⲆΔⲆΔ": "img/account-under-maintenance.png",
		"ⲆΔΔΔⲆΔⲆ": "img/close-button-account-out.png",
		"ΔΔⲆᐃΔⵠΔ": "img/close-button-account-in.png",
		"ΔⲆⵠⲆᐃⵠⵠ": "img/close-button-account-click.png",
		"ⵠⵠⵠΔΔΔⵠ": "img/play-button-out.png",
		"ᐃᐃⲆⵠΔⵠⲆ": "img/play-button-in.png",
		"ΔΔΔᐃⵠⵠᐃ": "img/play-button-click.png",
		"ᐃᐃΔⲆΔᐃⲆⲆᐃ": "img/app-store-badge.png",
		"ΔΔΔΔᐃΔⲆⵠΔ": "img/play-store-badge.png",
		"ᐃΔᐃⲆΔⲆⵠⲆΔ": "img/mobile-boxad.png",
		"ⵠⵠΔᐃΔⵠⵠ": "img/modify-name-out.png",
		"ΔⲆⲆᐃⲆᐃⲆ": "img/modify-name-in.png",
		"ⲆⵠΔΔᐃΔⲆ": "img/modify-name-click.png",
		"ΔΔΔⵠᐃⲆⲆ": "img/copy-id-button-out.png",
		"ⵠΔⵠⲆⵠⲆⵠ": "img/copy-id-button-hover.png",
		"ᐃⵠΔΔᐃΔⲆ": "img/copy-id-button-active.png",
		"ΔⲆⵠⵠⲆⲆΔ": "img/yes-button-out.png",
		"Δᐃⵠᐃᐃⵠᐃ": "img/yes-button-in.png",
		"ⵠⲆⵠΔⲆⲆⲆ": "img/yes-button-click.png",
		"ΔⲆⵠⲆⵠⲆⲆ": "img/yes-300-button-out.png",
		"ⵠΔᐃΔᐃⵠΔ": "img/yes-300-button-in.png",
		"ΔΔΔⵠᐃΔⵠ": "img/yes-300-button-click.png",
		"ⵠⲆⵠⵠⲆᐃⵠ": "img/no-button-out.png",
		"ⵠⲆΔⲆᐃᐃⲆ": "img/no-button-in.png",
		"ᐃⲆᐃⲆⲆⲆⵠ": "img/no-button-click.png",
		"ᐃΔⵠⵠᐃⵠⵠ": "img/no-thanks-button-out.png",
		"ⲆΔᐃᐃΔᐃΔ": "img/no-thanks-button-in.png",
		"ᐃΔᐃΔⲆⵠΔ": "img/no-thanks-button-click.png",
		"ⵠⲆⵠⲆᐃΔⵠ": "img/shop-button-out.png",
		"ⲆᐃⲆΔᐃΔᐃ": "img/shop-button-in.png",
		"ⲆᐃⵠΔᐃⲆⵠ": "img/shop-button-click.png",
		"ΔΔⲆΔᐃⲆⲆ": "img/logout-out.png",
		"ᐃⵠⵠᐃⲆⲆⲆ": "img/logout-in.png",
		"ᐃᐃᐃⵠᐃⵠΔ": "img/logout-click.png",
		"ᐃᐃⵠⲆᐃⲆΔ": "img/terms-button-out.png",
		"ΔⵠⵠΔΔⵠᐃ": "img/terms-button-in.png",
		"ΔᐃᐃⲆᐃⵠⲆ": "img/terms-button-click.png",
		"ⲆᐃⵠᐃⵠⲆΔ": "img/tutorial-icon.png",
		"ᐃⲆΔᐃⵠΔⵠ": "img/skins-icon.png",
		"ΔⵠΔᐃⵠⵠΔ": "img/shop-icon.png",
		"ⲆⲆⵠⲆⵠⵠᐃᐃⲆ": "img/paint-icon.png",
		"ⲆⲆⲆΔⲆⲆⲆ": "img/leaderboard-icon.png",
		"ᐃΔΔⵠⵠⲆⲆ": "img/start-icon.png",
		"ᐃᐃⵠⲆΔⲆΔ": "img/profile-icon.png",
		"ΔΔΔΔⲆⲆⲆ": "img/server-access-icon2.png",
		"ⵠⵠᐃΔΔᐃⲆ": "img/button-homepage-bg-out.png",
		"ⲆᐃΔⵠᐃⵠᐃ": "img/button-homepage-bg-in.png",
		"ⲆΔⲆⲆΔᐃⲆ": "img/button-homepage-bg-click.png",
		"ΔᐃΔⵠⵠΔⵠ": "img/button-bottom-homepage-bg-out.png",
		"ΔⵠⵠⲆⲆΔΔ": "img/button-bottom-homepage-bg-in.png",
		"ᐃⵠⲆᐃⲆᐃᐃ": "img/button-bottom-homepage-bg-click.png",
		"ⵠⲆⲆᐃⵠⲆⵠ": "img/lvl-player.png",
		"ⵠⵠΔΔᐃΔⲆ": "img/avatar-player.png",
		"ᐃΔⲆΔᐃΔⲆ": "img/avatar-player1.png",
		"ⵠⲆⵠᐃⵠΔⲆ": "img/avatar-player2.png",
		"ΔⲆⵠⲆΔⲆᐃ": "img/avatar-player3.png",
		"ᐃΔΔⵠⲆⲆᐃ": "img/avatar-player4.png",
		"ⲆⵠΔⲆⲆᐃⲆ": "img/avatar-player5.png",
		"ⵠⵠᐃⵠⵠΔⵠ": "img/avatar-player6.png",
		"ⵠΔⲆΔⲆⲆᐃ": "img/avatar-player7.png",
		"ⵠΔΔⲆⵠⲆᐃ": "img/avatar-player8.png",
		"ΔΔⲆⲆᐃⵠΔ": "img/avatar-player9.png",
		"ⵠᐃⲆᐃⲆⲆⲆ": "img/avatar-player10.png",
		"ⵠᐃΔᐃⲆᐃΔ": "img/avatar-player11.png",
		"ΔᐃΔⲆΔΔᐃ": "img/avatar-player12.png",
		"ᐃΔⵠΔⵠΔⲆ": "img/avatar-player13.png",
		"ᐃΔᐃⵠⵠᐃᐃ": ᐃ[265],
		"ΔⵠⲆΔΔΔΔ": ᐃ[265],
		"ⵠΔⲆⵠᐃⵠⵠ": ᐃ[265],
		"ᐃΔΔΔⵠΔⲆ": ᐃ[265],
		"ⲆⲆᐃΔᐃⵠΔᐃⵠ": "img/golden-bread.png",
		"ⲆⲆⵠᐃⵠⵠⲆ": "img/buy-bread-out.png",
		"ⵠⲆᐃᐃΔⵠᐃ": "img/buy-bread-in.png",
		"ΔⲆᐃΔΔᐃⵠ": "img/buy-bread-click.png",
		"ᐃⲆⵠᐃᐃⲆⵠ": "img/gauge.png",
		"ⲆᐃΔΔⵠⵠⲆᐃΔ": "img/season-4-out.png",
		"ⵠΔⲆΔΔᐃΔⲆΔ": "img/season-4-in.png",
		"ⲆⵠᐃΔΔⵠⵠΔΔ": "img/season-4-click.png",
		"ΔⲆᐃⲆⵠⵠⲆⵠᐃ": "img/season4-box.png",
		"ⲆⵠΔⲆⲆᐃᐃⵠᐃ": "img/season-5-out.png",
		"ⲆΔⵠΔΔⲆΔΔⵠ": "img/season-5-in.png",
		"ᐃΔⲆᐃᐃᐃⵠⵠΔ": "img/season-5-click.png",
		"ⲆΔⲆⲆΔⲆⵠΔΔ": "img/season5-box.png",
		"ⲆⲆⵠⲆⲆΔᐃ": "img/season-6-out.png",
		"ᐃⲆᐃⲆᐃΔⲆ": "img/season-6-in.png",
		"ⲆΔⲆΔΔⲆⲆ": "img/season-6-click.png",
		"ⵠⲆᐃᐃΔⲆⵠ": "img/season6-box.png",
		"ⲆⲆᐃⵠⵠᐃⵠ": "img/profile3-box.png",
		"ⲆⲆⲆΔΔⲆⵠ": "img/skins-box.png",
		"ⵠⵠⲆΔⲆⲆᐃ": "img/shop-box.png",
		"ⵠΔⲆⵠᐃᐃⵠⵠᐃ": "img/private-server-box.png",
		"ⲆΔⲆⵠⲆᐃΔ": "img/location-box.png",
		"ⲆⲆᐃᐃΔⵠᐃ": "img/server-duration-box.png",
		"ᐃⵠⵠᐃᐃⵠⵠ": "img/tutorial-box.png",
		"ⵠⵠⲆⲆᐃᐃⲆ": "img/leaderboard2-box.png",
		"ⵠⵠΔⲆᐃⵠⲆ": "img/buy-breads-box.png",
		"ⵠΔⵠᐃⵠⵠⵠ": "img/bag-box.png",
		"ⲆⵠΔⲆΔᐃΔ": "img/deadbox-box.png",
		"ᐃᐃⲆⵠᐃⲆⵠ": "img/book-box.png",
		"ⲆⵠᐃⵠⵠⲆΔ": "img/accessories-box.png",
		"ΔⲆⵠⵠⲆΔᐃ": "img/customskin-box.png",
		"ⵠᐃⲆⵠⲆᐃⲆ": "img/bag-lasts.png",
		"ⲆⵠⲆΔᐃΔΔ": "img/server-lasts.png",
		"ᐃΔⲆⵠΔΔⵠ": "img/server-access-box3.png",
		"ⲆⵠΔᐃⲆⵠΔ": "img/lootbox-box.png",
		"ΔΔΔⵠⲆⲆΔ": "img/change-nickname0.png",
		"ⵠⵠⲆⵠΔⵠΔ": "img/change-nickname1.png",
		"ⵠᐃΔⲆᐃΔⵠ": "img/cheating-box.png",
		"ΔⵠᐃⵠⵠΔΔᐃᐃ": "img/daily-quest-box.png",
		"ⵠΔΔⵠⵠⲆⵠᐃΔ": "img/daily-5-bread.png",
		"ᐃΔⵠᐃⵠΔᐃΔΔ": "img/daily-10-bread.png",
		"ΔⲆⵠⵠΔⵠᐃΔΔ": "img/daily-valid.png",
		"ΔᐃⵠᐃⵠΔⵠ": "img/normal-profile-out.png",
		"ⲆⵠᐃᐃⲆⲆΔ": "img/normal-profile-in.png",
		"ΔᐃΔᐃⵠⵠⲆ": "img/normal-profile-click.png",
		"ⲆⵠⲆΔⲆΔΔ": "img/forest-profile-out.png",
		"ⲆⵠⵠᐃⲆΔⲆ": "img/forest-profile-in.png",
		"ΔΔΔⲆᐃΔⵠ": "img/forest-profile-click.png",
		"ⵠⲆΔᐃⲆⵠᐃ": "img/zombie-profile-out.png",
		"ᐃⵠᐃᐃΔΔⵠ": "img/zombie-profile-in.png",
		"ⲆᐃᐃⲆΔᐃⲆ": "img/zombie-profile-click.png",
		"ⵠΔΔΔΔⲆᐃ": "img/vampire-profile-out.png",
		"ᐃⵠᐃᐃᐃⲆᐃ": "img/vampire-profile-in.png",
		"ⲆⵠΔⵠⲆⵠⲆ": "img/vampire-profile-click.png",
		"ⵠⵠΔⲆΔⲆⲆ": "img/total-profile-out.png",
		"ⵠΔⲆⵠⲆⲆΔ": "img/total-profile-in.png",
		"ⵠΔⵠⲆⵠᐃΔ": "img/total-profile-click.png",
		"ᐃⵠᐃⲆⵠᐃⵠ": "img/season1-out.png",
		"ΔᐃᐃΔⵠⲆΔ": "img/season1-in.png",
		"ⲆΔⵠᐃⲆΔⵠ": "img/season1-click.png",
		"ⲆⵠᐃⲆΔⵠᐃ": "img/season2-out.png",
		"ΔᐃⵠⲆⲆΔᐃ": "img/season2-in.png",
		"ᐃⵠΔΔΔΔΔ": "img/season2-click.png",
		"ⲆⵠΔᐃΔⵠᐃ": "img/season3-out.png",
		"ⲆᐃΔΔⲆⲆⲆ": "img/season3-in.png",
		"ⲆΔᐃΔⵠᐃⵠ": "img/season3-click.png",
		"ⲆⵠⲆΔⵠⲆⲆ": "img/season4-out.png",
		"ᐃᐃⲆΔⵠΔΔ": "img/season4-in.png",
		"ᐃΔⲆⲆⲆⵠΔ": "img/season4-click.png",
		"ᐃⵠⵠⵠΔⵠᐃ": "img/season5-out.png",
		"ᐃⵠⵠⲆⲆΔⵠ": "img/season5-in.png",
		"ᐃΔⵠᐃⵠⵠⲆ": "img/season5-click.png",
		"ⵠΔⵠΔᐃΔⲆ": "img/season6-out.png",
		"ⵠⵠⵠᐃᐃΔⵠ": "img/season6-in.png",
		"ᐃΔⲆⵠⲆΔΔ": "img/season6-click.png",
		"ΔⲆΔⲆΔⲆⵠ": "img/locked-skin-alert.png",
		"ⵠᐃᐃΔᐃΔⵠ": "img/locked-custom-alert.png",
		"ᐃⲆⲆⵠΔⲆΔ": "img/bg-red-locked.png",
		"ⲆΔᐃᐃⲆΔⵠ": "img/skin-button-out.png",
		"ᐃⲆⲆΔⵠⵠΔ": "img/skin-button-in.png",
		"ⵠᐃⲆⲆᐃⲆΔ": "img/skin-button-click.png",
		"ⲆᐃΔᐃⲆⲆᐃ": "img/accessory-button-out.png",
		"ΔⲆᐃᐃⲆⲆΔ": "img/accessory-button-in.png",
		"ⲆΔⵠⵠΔⵠⵠ": "img/accessory-button-click.png",
		"ⲆΔⲆⵠⵠΔΔ": "img/bag-button-out.png",
		"ᐃΔᐃΔᐃᐃⵠ": "img/bag-button-in.png",
		"ⵠⲆⲆᐃⲆΔΔ": "img/bag-button-click.png",
		"ⵠΔⵠⵠΔⲆⵠ": "img/book-button-out.png",
		"ⵠⲆⵠⵠⵠⲆΔ": "img/book-button-in.png",
		"ⵠⵠⵠᐃⵠⲆⲆ": "img/book-button-click.png",
		"ᐃΔⲆᐃᐃⵠⲆ": "img/deadbox-button-out.png",
		"ΔᐃᐃⵠΔⲆᐃ": "img/deadbox-button-in.png",
		"ⲆⲆⲆⵠᐃΔⵠ": "img/deadbox-button-click.png",
		"ᐃᐃⵠᐃΔᐃⵠ": "img/loot-button-out.png",
		"ΔᐃⲆⵠⵠⲆᐃ": "img/loot-button-in.png",
		"ΔⲆⲆᐃⲆᐃᐃ": "img/loot-button-click.png",
		"ⲆΔΔΔⲆⵠΔ": "img/free-item-out.png",
		"ΔᐃΔⵠᐃⲆⵠ": "img/free-item-in.png",
		"ⵠⵠᐃⲆⲆⲆΔ": "img/free-item-click.png",
		"ⵠⲆⲆᐃ": "img/wood-item-out.png",
		"ⲆΔⵠⵠ": "img/wood-item-in.png",
		"ΔᐃΔΔ": "img/wood-item-click.png",
		"ᐃΔᐃᐃᐃⲆⵠ": "img/stone-item.png",
		"ⲆᐃⲆⲆⲆᐃᐃ": "img/stone-item-in.png",
		"ΔⲆᐃᐃᐃΔⵠ": "img/stone-item-click.png",
		"ᐃⲆΔΔⵠⲆⲆ": "img/gold-item.png",
		"ᐃᐃΔⲆⲆΔΔ": "img/gold-item-in.png",
		"ᐃⲆΔᐃⲆⵠᐃ": "img/gold-item-click.png",
		"ᐃᐃⵠΔⵠⵠⵠ": "img/diamond-item.png",
		"ᐃᐃⵠⲆᐃⵠᐃ": "img/diamond-item-in.png",
		"ⵠⵠⵠΔΔⲆⵠ": "img/diamond-item-click.png",
		"ⵠᐃⲆᐃⲆΔΔ": "img/amethyst-item.png",
		"ⵠⲆΔΔⵠⲆⲆ": "img/amethyst-item-in.png",
		"ΔΔΔⲆᐃᐃⲆ": "img/amethyst-item-click.png",
		"ⲆᐃⵠⵠⲆⲆΔ": "img/reidite-item.png",
		"ⲆᐃᐃΔΔⵠΔ": "img/reidite-item-in.png",
		"ᐃⲆⵠΔⵠⲆⵠ": "img/reidite-item-click.png",
		"ᐃⲆᐃΔⲆᐃᐃ": "img/special-item-out.png",
		"ⵠⲆⲆΔᐃᐃⲆ": "img/special-item-in.png",
		"ΔᐃⵠΔᐃΔᐃ": "img/special-item-click.png",
		"ᐃᐃⵠᐃⵠᐃᐃ": "img/level-item-out.png",
		"ⲆⵠΔⵠⵠΔⲆ": "img/level-item-in.png",
		"ⲆⲆᐃᐃⵠⲆΔ": "img/level-item-click.png",
		"ᐃᐃⲆⲆⵠⵠⵠ": "img/skin-previous-out.png",
		"ⵠⵠⲆⵠⵠᐃⲆ": "img/skin-previous-in.png",
		"ⲆⵠᐃᐃΔⵠΔ": "img/skin-previous-click.png",
		"ⲆⵠᐃᐃᐃⲆᐃ": "img/skin-next-out.png",
		"ⵠⲆⵠⵠᐃᐃΔ": "img/skin-next-in.png",
		"ΔᐃΔⲆⲆⲆⲆ": "img/skin-next-click.png",
		"ΔⲆⵠⲆΔ": "img/back-button-out.png",
		"ⲆΔⲆⲆΔ": "img/back-button-in.png",
		"ⲆⵠⲆⵠΔ": "img/back-button-click.png",
		"ⲆⵠⲆᐃⵠΔⲆ": "img/get-more-button-out.png",
		"ⲆⲆᐃⵠⲆᐃⵠ": "img/get-more-button-in.png",
		"ⵠⵠⵠⲆⲆⵠⵠ": "img/get-more-button-click.png",
		"ᐃⲆᐃⵠΔⲆΔ": "img/currency1-out.png",
		"ΔᐃΔᐃΔΔΔ": "img/currency1-in.png",
		"ⵠᐃⲆⵠΔᐃⲆ": "img/currency1-click.png",
		"ΔᐃⵠᐃⵠⲆΔ": "img/currency2-out.png",
		"ⵠᐃⵠⵠⵠᐃⵠ": "img/currency2-in.png",
		"ⵠΔⵠᐃⲆⵠᐃ": "img/currency2-click.png",
		"ⵠⵠⵠⵠΔⵠⵠ": "img/currency3-out.png",
		"ⲆᐃⲆΔⲆᐃΔ": "img/currency3-in.png",
		"ΔΔΔΔΔΔᐃ": "img/currency3-click.png",
		"ⵠᐃⲆᐃⲆΔⲆ": "img/currency4-out.png",
		"ⵠᐃⵠⵠⵠⵠᐃ": "img/currency4-in.png",
		"ⲆᐃⲆⵠⵠⲆΔ": "img/currency4-click.png",
		"ⵠⲆⵠΔⲆⲆⵠ": "img/currency5-out.png",
		"ⲆⵠΔᐃᐃΔⵠ": "img/currency5-in.png",
		"ΔⲆᐃΔΔᐃΔ": "img/currency5-click.png",
		"ⲆᐃⲆⲆᐃⵠⵠ": "img/price1-out.png",
		"ⵠᐃⵠΔⵠⲆⵠ": "img/price1-in.png",
		"ⵠᐃⲆⲆᐃΔⲆ": "img/price1-click.png",
		"ᐃⵠⵠⵠᐃⵠⵠ": "img/price2-out.png",
		"ᐃⵠΔᐃⲆⵠᐃ": "img/price2-in.png",
		"ΔⲆⲆⵠⲆⲆⵠ": "img/price2-click.png",
		"ᐃᐃⵠᐃΔⵠΔ": "img/price3-out.png",
		"ⵠΔᐃᐃᐃⵠⲆ": "img/price3-in.png",
		"ΔᐃⵠⲆᐃⵠΔ": "img/price3-click.png",
		"ᐃⵠᐃⵠΔᐃᐃ": "img/price4-out.png",
		"ⲆΔⵠⵠᐃᐃΔ": "img/price4-in.png",
		"ⲆΔⲆΔⲆᐃⲆ": "img/price4-click.png",
		"ΔΔΔⵠⲆᐃΔ": "img/price5-out.png",
		"ᐃⲆΔⵠΔⲆΔ": "img/price5-in.png",
		"ⵠⲆΔⲆⵠⲆᐃ": "img/price5-click.png",
		"ᐃⵠⲆⲆⲆⵠⵠᐃⵠ": "img/buy-private-server-out.png",
		"ΔⵠΔⲆⵠΔⲆΔΔ": "img/buy-private-server-in.png",
		"ⲆᐃⵠΔΔⲆⲆⲆⲆ": "img/buy-private-server-click.png",
		"ⲆⵠΔⵠⵠⲆᐃ": "img/atlanta-button-out.png",
		"ᐃⲆⲆⲆΔⵠⵠ": "img/atlanta-button-in.png",
		"ⵠᐃᐃⵠⵠᐃⲆ": "img/atlanta-button-click.png",
		"ⲆΔⲆΔⲆⵠⵠ": "img/los-angeles-button-out.png",
		"ΔⲆⲆⵠⲆᐃⵠ": "img/los-angeles-button-in.png",
		"ⲆᐃᐃⵠⵠⲆⵠ": "img/los-angeles-button-click.png",
		"ⲆⲆᐃⲆᐃᐃⲆ": "img/sydney-button-out.png",
		"ⵠᐃⲆⵠΔΔᐃ": "img/sydney-button-in.png",
		"ⲆⲆᐃⲆⵠⲆⵠ": "img/sydney-button-click.png",
		"ⵠᐃᐃᐃΔᐃᐃ": "img/frankfurt-button-out.png",
		"ᐃᐃᐃᐃᐃᐃᐃ": "img/frankfurt-button-in.png",
		"ΔⵠⲆᐃΔᐃᐃ": "img/frankfurt-button-click.png",
		"ⲆⵠⲆⵠⲆⲆⲆ": "img/osaka-button-out.png",
		"ᐃⲆⲆⵠΔᐃΔ": "img/osaka-button-in.png",
		"ᐃⵠᐃΔⵠⲆᐃ": "img/osaka-button-click.png",
		"ⵠⵠⲆⲆᐃΔᐃⲆᐃ": "img/yes-location-out.png",
		"ΔᐃᐃⵠⵠΔΔⲆⵠ": "img/yes-location-in.png",
		"ᐃΔⵠᐃⵠⲆΔⲆᐃ": "img/yes-location-click.png",
		"ᐃᐃⲆⲆⵠΔⲆ": "img/3days-button-out.png",
		"ⲆΔᐃΔΔΔⲆ": "img/3days-button-in.png",
		"ⲆΔᐃⲆΔⵠᐃ": "img/3days-button-click.png",
		"ⵠΔⲆΔⵠᐃᐃ": "img/7days-button-out.png",
		"ΔᐃⲆᐃⵠⲆⵠ": "img/7days-button-in.png",
		"ᐃᐃⲆᐃᐃⲆᐃ": "img/7days-button-click.png",
		"ⵠⲆⲆⵠΔΔΔ": "img/30days-button-out.png",
		"ⲆᐃⲆⵠΔᐃⵠ": "img/30days-button-in.png",
		"ΔΔⵠᐃᐃᐃᐃ": "img/30days-button-click.png",
		"ΔΔᐃΔΔⲆΔ": "img/90days-button-out.png",
		"ⵠⲆΔΔⵠΔⵠ": "img/90days-button-in.png",
		"ⵠⵠΔⲆⲆⵠⵠ": "img/90days-button-click.png",
		"ᐃⵠΔᐃⵠⲆᐃ": "img/spin1.png",
		"ΔⵠⵠⲆⲆΔⲆ": "img/spin2.png",
		"ⵠΔⵠᐃⲆᐃΔ": "img/spin3.png",
		"ⵠⲆⲆⲆⲆⲆᐃ": "img/spin4.png",
		"ΔᐃⲆⵠⵠᐃᐃ": "img/spin5.png",
		"ᐃᐃⵠΔΔⲆⲆ": "img/spin6.png",
		"ΔⲆᐃⵠⵠⲆⲆ": "img/arrow-spin.png",
		"ⲆⵠⵠΔᐃΔΔ": "img/spin-button-1-out.png",
		"ᐃᐃΔΔⲆᐃΔ": "img/spin-button-1-in.png",
		"ⲆᐃⵠΔΔⵠⵠ": "img/spin-button-1-click.png",
		"ⲆⲆⵠⲆⲆΔⲆ": "img/spin-button-2-out.png",
		"ⵠⵠᐃⲆⲆᐃΔ": "img/spin-button-2-in.png",
		"ᐃⲆⵠⵠⵠⲆⲆ": "img/spin-button-2-click.png",
		"ΔⲆΔⲆⵠⵠⵠ": "img/spin-button-3-out.png",
		"ⵠΔᐃⵠᐃⲆΔ": "img/spin-button-3-in.png",
		"ΔΔᐃⵠⲆⲆⵠ": "img/spin-button-3-click.png",
		"ᐃΔΔⵠΔΔΔ": "img/spin-button-4-out.png",
		"ⲆⲆᐃᐃΔᐃᐃ": "img/spin-button-4-in.png",
		"ᐃᐃΔᐃⵠⵠΔ": "img/spin-button-4-click.png",
		"ⵠᐃⵠΔᐃΔΔ": "img/spin-button-5-out.png",
		"ⲆⲆⵠΔⲆⵠΔ": "img/spin-button-5-in.png",
		"ⵠⵠⵠⵠⲆΔΔ": "img/spin-button-5-click.png",
		"ⵠᐃᐃⲆⵠΔⲆ": "img/spin-light.png",
		"ⲆⵠᐃᐃᐃⲆΔ": "img/tuto-wiki-out.png",
		"ΔᐃⲆⲆⲆΔΔ": "img/tuto-wiki-in.png",
		"ⵠⵠΔⵠΔᐃᐃ": "img/tuto-wiki-click.png",
		"ΔᐃⵠᐃΔᐃᐃ": "img/tuto-previous-out.png",
		"ᐃⵠⵠᐃⲆⲆⵠ": "img/tuto-previous-in.png",
		"ΔⵠⲆᐃⵠⵠᐃ": "img/tuto-previous-click.png",
		"ⲆⵠⲆⵠⵠⵠᐃ": "img/tuto-next-out.png",
		"ᐃⵠᐃΔⵠⵠⲆ": "img/tuto-next-in.png",
		"ⲆⵠᐃⲆΔⵠⲆ": "img/tuto-next-click.png",
		"ⵠⵠΔⲆΔᐃΔ": "img/time-leaderboard-out.png",
		"ⵠⵠⵠⵠⵠΔᐃ": "img/time-leaderboard-in.png",
		"ⲆΔⲆⲆⲆⲆⵠ": "img/time-leaderboard-click.png",
		"ⲆⲆΔⲆΔⵠΔ": "img/score-leaderboard-out.png",
		"ΔΔᐃⵠⵠᐃΔ": "img/score-leaderboard-in.png",
		"ΔᐃΔΔΔⲆⵠ": "img/score-leaderboard-click.png",
		"ⵠΔΔΔⵠᐃᐃ": "img/lvl-leaderboard-out.png",
		"ⵠⵠⵠⵠⵠⲆⲆ": "img/lvl-leaderboard-in.png",
		"ⲆΔⲆΔΔΔᐃ": "img/lvl-leaderboard-click.png",
		"ⲆᐃⲆᐃᐃⵠⲆ": "img/kill-leaderboard-out.png",
		"ᐃⲆᐃΔⵠΔⲆ": "img/kill-leaderboard-in.png",
		"ΔⲆΔⵠⲆΔⲆ": "img/kill-leaderboard-click.png",
		"ᐃᐃⵠⲆⲆⵠΔ": "img/all-leaderboard-out.png",
		"ⵠⵠΔⵠⲆΔⲆ": "img/all-leaderboard-in.png",
		"ΔᐃⵠⵠᐃΔⵠ": "img/all-leaderboard-click.png",
		"ΔⲆⵠⲆΔⵠⵠ": "img/today-leaderboard-out.png",
		"ⵠᐃⵠⵠΔⲆⵠ": "img/today-leaderboard-in.png",
		"ΔⵠᐃⵠⵠᐃⲆ": "img/today-leaderboard-click.png",
		"ⲆᐃΔᐃⲆΔⲆ": "img/week-leaderboard-out.png",
		"ᐃⲆⵠⲆᐃⲆᐃ": "img/week-leaderboard-in.png",
		"ΔⲆⵠΔᐃⵠⵠ": "img/week-leaderboard-click.png",
		"ⵠΔΔΔⲆⵠⵠ": "img/season1-out.png",
		"ᐃⲆⵠΔⲆᐃᐃ": "img/season1-in.png",
		"ᐃᐃⲆⲆᐃⵠᐃ": "img/season1-click.png",
		"ᐃⵠᐃⵠⵠⲆⵠ": "img/season2-out.png",
		"ΔⲆᐃⲆⵠⵠⲆ": "img/season2-in.png",
		"ᐃᐃΔᐃΔΔΔ": "img/season2-click.png",
		"ⲆⵠᐃΔᐃⲆⵠ": "img/season3-out.png",
		"ⵠⲆⵠᐃΔⲆᐃ": "img/season3-in.png",
		"ⲆⲆⲆΔᐃⲆᐃ": "img/season3-click.png",
		"ⵠⲆᐃᐃⵠⲆⲆ": "img/season4-out.png",
		"ᐃᐃᐃⵠⵠⲆΔ": "img/season4-in.png",
		"ⲆⵠΔⲆⲆⵠⵠ": "img/season4-click.png",
		"ⵠⲆⵠΔᐃⵠᐃ": "img/season5-out.png",
		"ᐃΔⵠⵠⵠΔⲆ": "img/season5-in.png",
		"ΔᐃⲆⲆΔΔⵠ": "img/season5-click.png",
		"ΔⵠΔΔⲆΔᐃ": "img/season6-out.png",
		"ᐃᐃⵠᐃⲆⵠᐃ": "img/season6-in.png",
		"ⵠⵠⵠᐃΔᐃᐃ": "img/season6-click.png",
		"ᐃⵠᐃⲆⵠⵠⵠ": "img/total-lead-out.png",
		"ᐃΔΔⲆΔΔΔ": "img/total-lead-in.png",
		"ⵠⵠᐃⵠⲆΔⵠ": "img/total-lead-click.png",
		"ⵠⲆΔⲆᐃΔⲆ": "img/normal-lead-out.png",
		"ⵠᐃΔΔⲆⲆΔ": "img/normal-lead-in.png",
		"ⵠⲆᐃᐃΔⲆᐃ": "img/normal-lead-click.png",
		"ᐃⲆΔΔⲆⵠⲆ": "img/forest-lead-out.png",
		"ᐃΔᐃⵠΔⵠⵠ": "img/forest-lead-in.png",
		"ⵠⲆΔⵠⲆᐃⲆ": "img/forest-lead-click.png",
		"ⲆᐃⲆⵠⲆᐃⵠ": "img/vampire-lead-out.png",
		"ⵠΔⲆΔᐃᐃᐃ": "img/vampire-lead-in.png",
		"ᐃⵠᐃᐃⵠⵠΔ": "img/vampire-lead-click.png",
		"ⵠⲆⵠΔⲆΔᐃ": "img/zombie-lead-out.png",
		"ⵠᐃⵠᐃⲆΔΔ": "img/zombie-lead-in.png",
		"ⵠΔⵠᐃⵠⲆᐃ": "img/zombie-lead-click.png",
		"ⵠΔⵠᐃᐃⵠᐃ": "img/day-level5.png",
		"ⲆⲆⲆΔΔΔⲆ": "img/night-level5.png",
		"ⲆΔⲆᐃⵠⲆΔ": "img/day-level10.png",
		"ⵠΔⵠⲆⵠⵠⲆ": "img/night-level10.png",
		"ᐃⲆⵠᐃΔᐃⵠ": "img/day-level15.png",
		"ΔᐃⲆⵠⲆⲆΔ": "img/night-level15.png",
		"ⲆⵠⵠⲆⵠⲆⵠ": "img/day-level20.png",
		"ΔᐃⲆⵠⲆΔΔ": "img/night-level20.png",
		"ΔⲆΔᐃⵠᐃⲆ": "img/day-level25.png",
		"ⵠⵠⵠⲆⵠⲆᐃ": "img/night-level25.png",
		"ⲆⲆΔⵠΔΔⲆ": "img/day-level30.png",
		"ⲆΔⵠⲆⲆⲆⲆ": "img/night-level30.png",
		"ᐃⵠⲆΔᐃⲆⲆ": "img/day-level35.png",
		"ⲆᐃᐃᐃⵠΔᐃ": "img/night-level35.png",
		"Δⵠᐃⵠᐃⵠᐃ": "img/day-level40.png",
		"ᐃᐃᐃᐃⵠⵠᐃ": "img/night-level40.png",
		"ⲆⲆΔᐃᐃΔⲆ": "img/day-level45.png",
		"ΔⵠⵠΔΔⲆⲆ": "img/night-level45.png",
		"ⵠΔⵠΔΔⵠᐃ": "img/day-level50.png",
		"ᐃᐃⲆᐃⵠΔⵠ": "img/night-level50.png",
		"ΔΔⲆⵠⲆⵠⵠ": "img/day-level55.png",
		"ΔⵠⵠⲆᐃΔᐃ": "img/night-level55.png",
		"ᐃΔⵠⲆⵠᐃΔ": "img/day-level60.png",
		"ⵠᐃᐃⲆⵠⲆⲆ": "img/night-level60.png",
		"ᐃⲆᐃⵠⲆⲆⵠ": "img/day-skin-devast0.png",
		"ᐃⲆΔᐃᐃⲆⵠ": "img/night-skin-devast0.png",
		"ⵠᐃⵠⲆᐃⲆΔ": "img/day-hand-devaster.png",
		"ΔⲆᐃΔᐃⵠᐃ": "img/night-hand-devaster.png",
		"ⵠΔΔⲆⵠᐃⵠ": "img/day-skin-star0.png",
		"ᐃΔⲆⲆⵠⵠⲆ": "img/night-skin-star0.png",
		"ΔⵠᐃⲆⲆⲆᐃ": "img/day-hand-star0.png",
		"ᐃⲆⲆᐃⲆᐃΔ": "img/night-hand-star0.png",
		"ΔᐃⲆⲆⵠΔⲆ": "img/day-vampire.png",
		"ⲆᐃᐃᐃΔⲆⲆ": "img/night-vampire.png",
		"ⵠΔⵠΔⵠᐃⲆ": "img/day-hand-vampire.png",
		"ⵠΔⵠᐃⲆⲆΔ": "img/night-hand-vampire.png",
		"ⲆᐃⵠⵠⵠⵠⲆ": "img/day-zombie.png",
		"ΔⲆΔΔⵠⲆⵠ": "img/night-zombie.png",
		"ᐃⲆΔᐃΔᐃⵠ": "img/day-hand-zombie.png",
		"ΔⵠⲆᐃⲆⵠΔ": "img/night-hand-zombie.png",
		"ΔΔΔᐃⲆΔᐃ": "img/day-skin113.png",
		"ᐃⲆΔⲆᐃΔᐃ": "img/night-skin113.png",
		"ᐃΔⲆΔⲆΔⵠ": "img/day-hand-skin113.png",
		"ᐃΔᐃⵠᐃⲆΔ": "img/night-hand-skin113.png",
		"ΔᐃⲆΔᐃᐃΔ": "img/day-skin0.png",
		"ΔⲆⵠΔΔΔᐃ": "img/night-skin0.png",
		"ⵠⵠⵠᐃΔΔᐃ": "img/day-skin1.png",
		"Δⵠᐃⵠⵠⵠᐃ": "img/night-skin1.png",
		"ⲆⲆΔΔᐃⲆᐃ": "img/day-skin2.png",
		"ᐃⵠΔᐃΔᐃⵠ": "img/night-skin2.png",
		"ΔΔⲆΔΔΔⲆ": "img/day-skin3.png",
		"ⵠⲆᐃᐃΔⲆΔ": "img/night-skin3.png",
		"ⵠΔⵠⲆΔΔᐃ": "img/day-skin4.png",
		"ᐃⲆⵠᐃⵠⵠΔ": "img/night-skin4.png",
		"ΔⲆᐃᐃⲆΔⲆ": "img/day-skin5.png",
		"ᐃᐃᐃᐃᐃᐃⵠ": "img/night-skin5.png",
		"ⵠΔᐃΔᐃΔᐃ": "img/day-skin6.png",
		"ΔᐃⲆΔⵠⵠᐃ": "img/night-skin6.png",
		"ΔᐃⲆᐃⵠⵠᐃ": "img/day-skin7.png",
		"ⲆΔᐃᐃⲆⲆΔ": "img/night-skin7.png",
		"ᐃᐃᐃᐃⲆΔᐃ": "img/day-skin8.png",
		"ᐃᐃΔⵠᐃΔⲆ": "img/night-skin8.png",
		"ΔⲆᐃⵠⵠⲆⵠ": "img/day-skin9.png",
		"ᐃᐃⵠΔᐃᐃΔ": "img/night-skin9.png",
		"ΔⵠⲆᐃᐃⲆⲆ": "img/day-skin10.png",
		"ⵠΔΔᐃΔⵠᐃ": "img/night-skin10.png",
		"ⲆᐃΔⵠᐃᐃⵠ": "img/day-skin11.png",
		"ᐃΔᐃⲆⲆⵠⲆ": "img/night-skin11.png",
		"ΔⲆᐃᐃΔᐃⲆ": "img/day-skin12.png",
		"ᐃᐃⵠⵠⵠⵠΔ": "img/night-skin12.png",
		"ᐃᐃᐃΔⲆⲆᐃ": "img/day-skin13.png",
		"ᐃΔᐃⲆⲆᐃⵠ": "img/night-skin13.png",
		"ᐃᐃⵠⵠΔᐃⵠ": "img/day-skin14.png",
		"ᐃᐃΔⲆᐃⲆⵠ": "img/night-skin14.png",
		"ᐃΔⵠⵠⲆΔⲆ": "img/day-skin15.png",
		"ΔᐃⵠⵠᐃᐃⲆ": "img/night-skin15.png",
		"ⵠᐃᐃⵠⲆΔΔ": "img/day-skin16.png",
		"ⵠᐃᐃΔᐃⲆⲆ": "img/night-skin16.png",
		"ⲆⲆⲆΔⵠⵠⲆ": "img/day-skin17.png",
		"ⲆᐃΔᐃⵠᐃᐃ": "img/night-skin17.png",
		"ᐃⲆⵠΔΔⲆᐃ": "img/day-skin18.png",
		"ᐃᐃⵠⵠⲆⵠⲆ": "img/night-skin18.png",
		"ⵠⵠⵠⲆⲆⵠⲆ": "img/day-skin19.png",
		"ⵠΔⲆᐃΔΔᐃ": "img/night-skin19.png",
		"ⲆᐃⲆⲆᐃⵠᐃ": "img/day-skin20.png",
		"ΔⵠⵠᐃᐃΔⲆ": "img/night-skin20.png",
		"ⲆⵠⲆⵠΔⵠᐃ": "img/day-skin21.png",
		"ⲆⵠᐃⲆⵠΔⵠ": "img/night-skin21.png",
		"ΔⲆᐃᐃⲆⵠΔ": "img/day-skin22.png",
		"ⲆΔⵠⵠᐃᐃⲆ": "img/night-skin22.png",
		"ΔΔⲆⵠΔⵠⵠ": "img/day-skin23.png",
		"ᐃᐃⲆᐃᐃⵠᐃ": "img/night-skin23.png",
		"ΔⲆⲆⵠᐃᐃⵠ": "img/day-skin24.png",
		"ⲆᐃⵠΔⵠΔⵠ": "img/night-skin24.png",
		"ΔΔⲆᐃΔⲆᐃ": "img/day-skin25.png",
		"ΔᐃⲆΔΔⲆᐃ": "img/night-skin25.png",
		"ΔᐃⲆᐃⲆΔⵠ": "img/day-skin26.png",
		"ᐃᐃⵠΔⵠΔⵠ": "img/night-skin26.png",
		"ΔᐃΔΔᐃΔᐃ": "img/day-skin27.png",
		"ᐃⲆⵠᐃΔⵠΔ": "img/night-skin27.png",
		"ⲆΔΔᐃⵠⵠᐃ": "img/day-skin28.png",
		"ⵠⵠΔΔⵠⲆᐃ": "img/night-skin28.png",
		"ᐃΔᐃΔΔᐃᐃ": "img/day-skin29.png",
		"ⲆⵠⵠⵠΔᐃΔ": "img/night-skin29.png",
		"ⲆⲆᐃⵠⲆⵠᐃ": "img/day-skin30.png",
		"ⲆᐃᐃⲆⲆΔⲆ": "img/night-skin30.png",
		"ⲆΔⲆⵠⵠⵠⵠ": "img/day-skin31.png",
		"ᐃⵠⵠᐃᐃᐃⵠ": "img/night-skin31.png",
		"ᐃⵠⲆΔΔᐃⵠ": "img/day-skin32.png",
		"ⲆΔⲆⵠᐃⵠΔ": "img/night-skin32.png",
		"ⵠΔΔᐃΔΔᐃ": "img/day-skin33.png",
		"ᐃⵠⲆⲆᐃⲆⲆ": "img/night-skin33.png",
		"ⲆⵠᐃΔΔΔⵠ": "img/day-skin34.png",
		"ᐃⵠᐃᐃⵠᐃΔ": "img/night-skin34.png",
		"ΔᐃⵠΔⲆⵠᐃ": "img/day-skin35.png",
		"ⲆΔΔⲆⵠᐃᐃ": "img/night-skin35.png",
		"ⲆΔΔⲆⵠⵠⲆ": "img/day-skin36.png",
		"ΔΔⵠⲆΔᐃⵠ": "img/night-skin36.png",
		"ΔⲆⲆⵠⲆⵠⲆ": "img/day-skin37.png",
		"ⵠΔⲆⲆⵠⵠΔ": "img/night-skin37.png",
		"ⵠⲆΔΔⲆⵠⵠ": "img/day-skin38.png",
		"ⵠᐃⲆᐃΔΔⵠ": "img/night-skin38.png",
		"ⵠⲆᐃΔⲆᐃᐃ": "img/day-skin39.png",
		"ⲆⲆⲆΔΔⲆᐃ": "img/night-skin39.png",
		"ⵠⵠΔᐃΔΔᐃ": "img/day-skin40.png",
		"ⲆᐃⲆΔΔᐃⲆ": "img/night-skin40.png",
		"ⵠⵠⲆᐃΔΔΔ": "img/day-skin41.png",
		"ⵠᐃⲆᐃΔᐃΔ": "img/night-skin41.png",
		"ⵠᐃⲆⵠⲆΔⲆ": "img/day-skin42.png",
		"ⲆⲆΔⵠⲆⲆᐃ": "img/night-skin42.png",
		"ⵠⲆΔΔᐃⲆⲆ": "img/day-skin43.png",
		"ΔⲆⲆⲆⵠΔᐃ": "img/night-skin43.png",
		"ⵠᐃᐃΔⲆⵠΔ": "img/day-skin44.png",
		"ᐃⲆᐃⵠΔᐃⵠ": "img/night-skin44.png",
		"ⵠⵠⲆΔᐃⵠᐃ": "img/day-skin45.png",
		"ⵠᐃΔᐃΔⵠΔ": "img/night-skin45.png",
		"ᐃⲆⲆⲆⲆΔΔ": "img/day-skin46.png",
		"ⲆⲆⲆᐃⲆᐃⵠ": "img/night-skin46.png",
		"ⲆᐃᐃⲆⵠⵠⵠ": "img/day-skin47.png",
		"ⲆⲆⲆⲆⲆⵠᐃ": "img/night-skin47.png",
		"ΔΔⲆᐃⵠⵠΔ": "img/day-skin48.png",
		"ᐃⲆⵠΔΔᐃⲆ": "img/night-skin48.png",
		"ⵠᐃΔⲆⵠΔᐃ": "img/day-skin49.png",
		"ⲆᐃⵠΔⵠⲆⵠ": "img/night-skin49.png",
		"ⵠⲆⵠⵠΔᐃⲆ": "img/day-skin50.png",
		"ⵠⲆΔΔⲆⵠⲆ": "img/night-skin50.png",
		"ⵠΔⲆⲆⲆᐃⵠ": "img/day-skin51.png",
		"ᐃⵠⲆΔᐃⲆᐃ": "img/night-skin51.png",
		"ᐃⵠΔⵠⲆⵠⵠ": "img/day-skin52.png",
		"ⲆⵠΔⲆᐃⵠΔ": "img/night-skin52.png",
		"ᐃⵠⵠⲆⲆΔΔ": "img/day-skin53.png",
		"ΔⲆᐃⲆⲆⵠⲆ": "img/night-skin53.png",
		"Δⵠᐃᐃⵠᐃⵠ": "img/day-skin54.png",
		"ⵠᐃⲆᐃᐃᐃⵠ": "img/night-skin54.png",
		"ΔⲆⵠⵠΔⵠⵠ": "img/day-skin55.png",
		"ⵠΔΔΔⲆⵠⲆ": "img/night-skin55.png",
		"ΔⲆⲆᐃⵠᐃⲆ": "img/day-skin56.png",
		"ⲆⵠⲆⲆᐃⵠΔ": "img/night-skin56.png",
		"ⵠᐃⵠⲆⲆᐃΔ": "img/day-skin57.png",
		"ΔΔⲆΔΔᐃΔ": "img/night-skin57.png",
		"ⵠⵠⵠⵠΔⲆΔ": "img/day-skin58.png",
		"ΔᐃⵠΔΔΔᐃ": "img/night-skin58.png",
		"ᐃᐃΔᐃⲆᐃⵠ": "img/day-skin59.png",
		"ΔⵠΔⵠⵠⵠⵠ": "img/night-skin59.png",
		"ⲆᐃΔⲆⵠⵠⵠ": "img/day-skin60.png",
		"ⵠᐃᐃⲆᐃⵠⲆ": "img/night-skin60.png",
		"ⵠΔᐃⲆⲆⵠΔ": "img/day-skin61.png",
		"ⵠⲆΔⵠⵠᐃⵠ": "img/night-skin61.png",
		"ⲆⵠⲆⲆᐃᐃⲆ": "img/day-skin62.png",
		"ⲆΔⵠᐃΔᐃⲆ": "img/night-skin62.png",
		"ΔⲆⵠΔᐃⵠᐃ": "img/day-skin63.png",
		"ᐃΔΔⵠⵠᐃᐃ": "img/night-skin63.png",
		"ᐃⲆⵠᐃᐃΔⲆ": "img/day-skin64.png",
		"ΔΔⵠⲆᐃⲆΔ": "img/night-skin64.png",
		"ᐃᐃⲆᐃᐃᐃᐃ": "img/day-skin65.png",
		"ΔΔᐃᐃΔⲆⲆ": "img/night-skin65.png",
		"ᐃⵠΔᐃᐃⲆΔ": "img/day-skin66.png",
		"ᐃᐃᐃᐃⵠⲆΔ": "img/night-skin66.png",
		"ⲆⲆΔⵠⲆᐃᐃ": "img/day-skin67.png",
		"ᐃⵠΔⵠⲆᐃΔ": "img/night-skin67.png",
		"ⲆⵠᐃⲆΔⲆᐃ": "img/day-skin68.png",
		"ΔⲆⵠⵠΔⲆᐃ": "img/night-skin68.png",
		"ⲆⲆⲆⲆᐃⵠᐃ": "img/day-skin69.png",
		"ΔΔⵠⵠⲆᐃᐃ": "img/night-skin69.png",
		"ᐃⵠᐃⵠΔⲆΔ": "img/day-skin70.png",
		"ΔⵠΔᐃⵠⲆΔ": "img/night-skin70.png",
		"ΔᐃΔᐃᐃΔᐃ": "img/day-skin71.png",
		"ⲆᐃᐃⵠΔⲆⵠ": "img/night-skin71.png",
		"ᐃⲆΔⲆᐃᐃⲆ": "img/day-skin72.png",
		"ᐃΔΔΔⲆᐃΔ": "img/night-skin72.png",
		"ΔⵠᐃᐃⵠᐃΔ": "img/day-skin73.png",
		"ΔΔΔⵠᐃⲆⵠ": "img/night-skin73.png",
		"ᐃⲆᐃⵠⵠᐃᐃ": "img/day-skin74.png",
		"ᐃᐃΔⲆⵠⲆᐃ": "img/night-skin74.png",
		"ΔⲆΔᐃᐃᐃᐃ": "img/day-skin75.png",
		"ⲆⵠⲆᐃⵠⵠⲆ": "img/night-skin75.png",
		"ⲆⵠΔΔᐃᐃΔ": "img/day-skin76.png",
		"ᐃⵠⲆΔⲆⲆⵠ": "img/night-skin76.png",
		"ⲆⵠΔⵠⲆᐃᐃ": "img/day-skin77.png",
		"ᐃᐃΔᐃΔⲆⵠ": "img/night-skin77.png",
		"ΔᐃᐃΔᐃΔⵠ": "img/day-skin78.png",
		"ΔⵠⵠΔⲆⲆⵠ": "img/night-skin78.png",
		"ⵠΔⲆΔⵠΔⲆ": "img/day-skin79.png",
		"ⲆΔΔᐃⵠⵠⵠ": "img/night-skin79.png",
		"ⲆⲆⵠΔΔΔⵠ": "img/day-skin80.png",
		"ᐃⲆΔΔⲆⵠⵠ": "img/night-skin80.png",
		"ΔᐃᐃⵠⲆⲆⵠ": "img/day-skin81.png",
		"ⲆΔᐃⵠᐃᐃΔ": "img/night-skin81.png",
		"ΔⲆⲆᐃᐃᐃⵠ": "img/day-skin82.png",
		"ⵠⵠᐃⵠΔΔⵠ": "img/night-skin82.png",
		"ΔⲆⵠⵠⲆⵠΔ": "img/day-skin83.png",
		"ΔΔⵠⵠᐃΔΔ": "img/night-skin83.png",
		"ⵠᐃᐃⵠᐃⲆᐃ": "img/day-skin84.png",
		"ᐃⵠⲆⵠᐃᐃⵠ": "img/night-skin84.png",
		"ᐃΔⵠⵠᐃⵠⲆ": "img/day-skin85.png",
		"ᐃⲆⵠⲆΔⵠⲆ": "img/night-skin85.png",
		"ᐃΔΔⵠΔΔⲆ": "img/day-skin86.png",
		"ΔⵠⵠᐃΔⵠᐃ": "img/night-skin86.png",
		"ⲆΔⵠᐃⲆᐃⲆ": "img/day-skin87.png",
		"ᐃⲆⵠⵠⲆⲆⲆ": "img/night-skin87.png",
		"ⵠⲆᐃⵠⵠᐃΔ": "img/day-skin88.png",
		"ⵠⲆⲆΔⵠⲆᐃ": "img/night-skin88.png",
		"ⵠⵠⲆⵠΔⵠⵠ": "img/day-skin89.png",
		"ΔᐃᐃᐃΔⵠᐃ": "img/night-skin89.png",
		"ⵠΔΔⵠⵠΔᐃ": "img/day-skin90.png",
		"ⲆⲆΔΔᐃⲆⵠ": "img/night-skin90.png",
		"ⲆⵠᐃΔⲆⲆΔ": "img/day-skin91.png",
		"ΔⵠΔᐃⲆΔᐃ": "img/night-skin91.png",
		"ⲆⲆⵠⵠᐃⲆᐃ": "img/day-skin92.png",
		"ᐃⵠΔⵠΔΔⲆ": "img/night-skin92.png",
		"ⵠᐃⲆⲆΔⵠΔ": "img/day-skin93.png",
		"ⵠΔⲆⵠⵠΔⵠ": "img/night-skin93.png",
		"ΔⲆⲆΔⵠⵠⵠ": "img/day-skin94.png",
		"ΔΔᐃⲆΔⵠⵠ": "img/night-skin94.png",
		"ᐃΔⵠⵠᐃᐃⵠ": "img/day-skin95.png",
		"ⵠΔⲆᐃᐃᐃⲆ": "img/night-skin95.png",
		"ᐃⵠⲆᐃⲆΔⵠ": "img/day-skin96.png",
		"ⵠⲆⲆΔΔᐃᐃ": "img/night-skin96.png",
		"ᐃⲆᐃΔᐃᐃⲆ": "img/day-skin97.png",
		"ΔᐃΔⲆⵠⵠⵠ": "img/night-skin97.png",
		"ⵠⵠⵠΔⵠⲆⵠ": "img/day-skin98.png",
		"ⲆᐃΔΔΔΔⲆ": "img/night-skin98.png",
		"ᐃᐃΔᐃᐃⵠᐃ": "img/day-skin99.png",
		"ⵠⵠᐃΔᐃᐃⵠ": "img/night-skin99.png",
		"ⲆᐃⲆⲆⵠᐃⵠ": "img/day-skin100.png",
		"ⲆΔⵠⲆᐃⲆᐃ": "img/night-skin100.png",
		"ᐃΔⲆᐃⵠᐃΔ": "img/day-skin101.png",
		"ⲆᐃⲆⵠⵠⵠΔ": "img/night-skin101.png",
		"ΔᐃⵠᐃⵠᐃⲆ": "img/day-skin102.png",
		"ⲆΔᐃᐃᐃⲆⵠ": "img/night-skin102.png",
		"ΔᐃⲆⲆᐃⲆΔ": "img/day-skin103.png",
		"ᐃΔⵠΔᐃᐃⵠ": "img/night-skin103.png",
		"ΔⲆⵠᐃⵠⲆⵠ": "img/day-skin104.png",
		"ⵠⲆΔⵠΔΔⵠ": "img/night-skin104.png",
		"ΔⵠⵠΔⵠⲆᐃ": "img/day-skin105.png",
		"ⲆⵠᐃΔⵠⲆⵠ": "img/night-skin105.png",
		"ΔΔΔΔⲆᐃΔ": "img/day-skin106.png",
		"ΔⲆΔΔᐃⲆΔ": "img/night-skin106.png",
		"ⵠⲆΔⵠⵠᐃΔ": "img/day-skin107.png",
		"ᐃΔᐃⵠΔⲆΔ": "img/night-skin107.png",
		"ⲆⵠΔᐃⲆΔΔ": "img/day-skin108.png",
		"ᐃᐃⵠΔΔⵠΔ": "img/night-skin108.png",
		"ⲆⲆⵠᐃⵠᐃΔ": "img/day-skin109.png",
		"ΔΔᐃⲆⲆΔᐃ": "img/night-skin109.png",
		"ᐃⵠᐃⵠᐃᐃΔ": "img/day-skin110.png",
		"ΔᐃᐃΔⵠΔⲆ": "img/night-skin110.png",
		"ⵠⵠᐃΔⵠᐃⵠ": "img/day-skin111.png",
		"ΔⵠⲆⲆⲆⵠΔ": "img/night-skin111.png",
		"ⵠⵠⵠⵠᐃᐃΔ": "img/day-skin112.png",
		"ⵠⵠⲆᐃⲆⵠⲆ": "img/night-skin112.png",
		"ⵠΔΔⵠⲆⲆⲆΔΔ": "img/day-skin113.png",
		"ⲆⵠⲆⲆⲆᐃΔⲆΔ": "img/night-skin113.png",
		"ΔⲆᐃⲆⵠΔΔ": "img/day-skin114.png",
		"ⵠᐃⲆΔⵠⵠⲆ": "img/night-skin114.png",
		"ⵠΔΔΔⵠⲆΔ": "img/day-skin115.png",
		"ⲆⵠⵠⵠᐃⲆⲆ": "img/night-skin115.png",
		"ⲆΔᐃΔⲆΔⵠ": "img/day-skin116.png",
		"ᐃⲆᐃᐃΔΔΔ": "img/night-skin116.png",
		"ᐃᐃⵠⵠᐃⵠⲆ": "img/day-skin117.png",
		"ΔⲆⵠᐃⲆᐃⵠ": "img/night-skin117.png",
		"ΔΔᐃⲆⵠⵠⵠ": "img/day-skin118.png",
		"ᐃΔᐃⲆᐃΔΔ": "img/night-skin118.png",
		"ᐃΔᐃᐃΔᐃΔ": "img/day-skin119.png",
		"ⲆⵠⲆⵠΔⲆᐃ": "img/night-skin119.png",
		"ⲆᐃⲆΔⵠΔⵠ": "img/day-skin120.png",
		"ᐃⵠᐃⵠᐃΔⲆ": "img/night-skin120.png",
		"ΔᐃⲆᐃᐃΔⵠ": "img/day-skin121.png",
		"ΔⲆᐃᐃΔΔⲆ": "img/night-skin121.png",
		"ⵠΔⲆᐃΔⵠⵠ": "img/day-skin122.png",
		"ΔⲆⵠΔⵠᐃᐃ": "img/night-skin122.png",
		"ⲆⲆⵠᐃΔⵠᐃ": "img/day-skin123.png",
		"ⵠᐃⵠᐃⲆⵠⵠ": "img/night-skin123.png",
		"ⲆⵠⵠΔΔⵠᐃ": "img/day-skin124.png",
		"ⲆΔᐃΔⲆΔᐃ": "img/night-skin124.png",
		"ⲆΔⵠⵠΔⲆᐃ": "img/day-skin125.png",
		"ᐃⵠΔΔΔⵠⵠ": "img/night-skin125.png",
		"ᐃΔⲆⵠᐃᐃⵠ": "img/day-skin126.png",
		"ⲆⵠⵠΔⵠΔⵠ": "img/night-skin126.png",
		"ΔᐃⵠΔⵠⵠⵠ": "img/day-skin127.png",
		"ᐃΔᐃⵠⲆΔⵠ": "img/night-skin127.png",
		"ⵠⵠⵠⲆΔΔⲆ": "img/day-skin128.png",
		"ⲆⵠⵠⲆⵠᐃⵠ": "img/night-skin128.png",
		"ΔΔΔΔΔⵠⲆ": "img/day-skin129.png",
		"ΔⵠΔᐃᐃᐃᐃ": "img/night-skin129.png",
		"ᐃⵠΔΔΔᐃⲆ": "img/day-skin130-1.png",
		"ᐃⵠⵠⵠΔⵠΔ": "img/night-skin130-1.png",
		"ⵠΔⵠⵠᐃⲆᐃ": "img/day-skin131.png",
		"ᐃⲆⲆΔΔΔΔ": "img/night-skin131.png",
		"ᐃᐃΔΔⵠᐃⵠ": "img/day-skin132.png",
		"ᐃⲆⵠⲆᐃⵠⲆ": "img/night-skin132.png",
		"ΔⲆⲆΔⵠΔⵠ": "img/day-skin133.png",
		"ΔᐃⲆⲆⵠⲆᐃ": "img/night-skin133.png",
		"ⵠⲆⵠⲆⵠⵠΔ": "img/day-skin134.png",
		"ⲆⵠᐃⵠⵠⲆⲆ": "img/night-skin134.png",
		"ΔⵠΔⵠᐃⲆΔ": "img/day-skin135.png",
		"ᐃⵠⲆⲆᐃⵠⲆ": "img/night-skin135.png",
		"ⲆⲆΔⵠⵠᐃⵠ": "img/day-skin136.png",
		"ⵠⵠⲆᐃⲆⲆⵠ": "img/night-skin136.png",
		"ⵠⵠⵠᐃᐃᐃⲆ": "img/day-skin137.png",
		"ⵠᐃᐃⵠᐃᐃⵠ": "img/night-skin137.png",
		"ᐃⲆᐃⵠⵠⵠᐃ": "img/day-skin138.png",
		"ᐃⲆΔⲆᐃΔⲆ": "img/night-skin138.png",
		"ᐃΔᐃⵠΔΔⵠ": "img/day-skin139.png",
		"ΔⵠΔⵠᐃⵠΔ": "img/night-skin139.png",
		"ⲆⲆᐃⵠⵠᐃⲆ": "img/day-skin140.png",
		"ⵠᐃⵠⵠΔᐃΔ": "img/night-skin140.png",
		"ΔΔⵠⵠᐃΔᐃ": "img/day-skin141.png",
		"ΔΔⲆⲆᐃΔⲆ": "img/night-skin141.png",
		"ⲆΔᐃΔΔΔΔ": "img/day-skin142.png",
		"ⲆⵠᐃᐃⲆᐃᐃ": "img/night-skin142.png",
		"Ⲇⵠⵠᐃⵠᐃⵠ": "img/day-skin143.png",
		"ⵠⵠᐃⵠⲆᐃᐃ": "img/night-skin143.png",
		"ΔⵠⵠᐃᐃΔⵠ": "img/day-skin144.png",
		"ⲆⵠᐃΔⵠΔΔ": "img/night-skin144.png",
		"ⲆⵠᐃⵠᐃⵠⲆ": "img/day-skin145.png",
		"ᐃⵠΔⵠΔᐃⵠ": "img/night-skin145.png",
		"ⲆⵠⲆΔⵠⲆⵠ": "img/day-skin146.png",
		"ΔⲆᐃᐃΔⲆⵠ": "img/night-skin146.png",
		"ΔⲆⵠᐃᐃᐃᐃ": "img/day-skin147.png",
		"ᐃⵠᐃᐃΔⲆᐃ": "img/night-skin147.png",
		"ⲆⲆⲆⲆⵠᐃᐃ": "img/day-skin148.png",
		"ⵠᐃⲆⵠⵠⵠⲆ": "img/night-skin148.png",
		"ᐃⲆⵠⵠᐃⲆᐃ": "img/day-skin149.png",
		"ᐃⲆΔⲆΔⵠⲆ": "img/night-skin149.png",
		"ⲆⲆⲆᐃⲆᐃΔ": "img/day-skin150.png",
		"ⵠⵠⲆⲆⵠᐃⵠ": "img/night-skin150.png",
		"ᐃⲆⵠⵠⲆΔΔ": "img/day-skin151.png",
		"ⲆΔᐃᐃⲆᐃΔ": "img/night-skin151.png",
		"ⵠᐃⲆⵠΔᐃⵠ": "img/day-skin152.png",
		"ⲆⲆⲆⲆᐃΔΔ": "img/night-skin152.png",
		"ΔΔΔⵠⲆⵠⵠ": "img/day-skin153.png",
		"ΔΔⲆΔᐃᐃⲆ": "img/night-skin153.png",
		"ⲆᐃᐃⲆⲆᐃⵠ": "img/day-skin154.png",
		"ᐃⵠⵠⵠΔᐃⲆ": "img/night-skin154.png",
		"ⵠⲆᐃᐃⵠⵠᐃ": "img/day-skin155.png",
		"ⵠΔⵠᐃᐃⲆᐃ": "img/night-skin155.png",
		"ΔⲆⲆⵠΔᐃⲆ": "img/day-skin156.png",
		"ᐃᐃᐃⵠΔΔⲆ": "img/night-skin156.png",
		"ⲆⵠᐃᐃⵠΔⲆ": "img/day-skin157.png",
		"ⲆΔΔⵠⵠΔᐃ": "img/night-skin157.png",
		"ᐃΔᐃⲆᐃⲆᐃ": "img/day-skin158.png",
		"ᐃⲆⵠⵠⲆⲆⵠ": "img/night-skin158.png",
		"ᐃᐃⵠⲆΔΔᐃ": "img/day-skin159.png",
		"ⲆⵠⲆⵠΔΔᐃ": "img/night-skin159.png",
		"ⵠⵠⵠᐃΔⲆⲆ": "img/day-skin160.png",
		"ΔΔᐃⵠⵠⲆᐃ": "img/night-skin160.png",
		"ΔΔᐃΔⵠΔᐃ": "img/day-skin161.png",
		"ᐃⵠΔΔᐃᐃⲆ": "img/night-skin161.png",
		"ᐃΔⲆⲆΔⲆⵠ": "img/day-skin162.png",
		"ⵠΔⵠⲆᐃΔⵠ": "img/night-skin162.png",
		"ⲆⵠᐃᐃΔⲆᐃ": "img/day-skin163.png",
		"ΔⲆⵠⲆⵠⲆⵠ": "img/night-skin163.png",
		"ⵠᐃⲆΔⲆⵠⵠ": "img/day-skin164.png",
		"ⲆⲆᐃΔᐃⵠΔ": "img/night-skin164.png",
		"ⲆΔⵠⲆⵠⵠᐃ": "img/day-skin165.png",
		"ΔⲆⵠⵠⲆⲆⲆ": "img/night-skin165.png",
		"ΔΔΔᐃⵠᐃΔ": "img/day-skin166.png",
		"ⵠⵠⵠΔⵠΔⲆ": "img/night-skin166.png",
		"ᐃⲆΔⲆΔⵠⵠ": "img/day-skin167.png",
		"ⵠⲆΔⵠⲆⵠᐃ": "img/night-skin167.png",
		"ᐃᐃⵠᐃⵠΔᐃ": "img/day-skin168.png",
		"ᐃᐃΔΔⲆⵠΔ": "img/night-skin168.png",
		"ⲆⵠⲆⲆΔΔⲆ": "img/day-skin169.png",
		"ᐃⵠⲆᐃΔΔⵠ": "img/night-skin169.png",
		"ⵠΔⲆΔΔⵠᐃ": "img/day-skin170.png",
		"ᐃᐃΔᐃⵠⲆᐃ": "img/night-skin170.png",
		"ΔᐃⲆᐃᐃΔᐃ": "img/day-skin171.png",
		"ΔⲆⵠΔᐃᐃᐃ": "img/night-skin171.png",
		"ᐃΔΔΔΔᐃⲆ": "img/day-skin172.png",
		"ⲆⵠⵠⲆⵠⵠⲆ": "img/night-skin172.png",
		"ⵠⲆⲆᐃⵠⲆᐃ": "img/day-skin173.png",
		"ΔⵠΔⲆΔⵠⵠ": "img/night-skin173.png",
		"ΔⵠᐃⲆⵠᐃⵠ": "img/day-skin174.png",
		"ⲆⲆᐃᐃΔΔⵠ": "img/night-skin174.png",
		"ᐃⲆΔⲆⲆⵠⵠ": "img/day-skin175.png",
		"ⲆΔᐃⲆⵠᐃΔ": "img/night-skin175.png",
		"ⵠᐃⲆᐃᐃᐃΔ": "img/day-skin176.png",
		"ΔΔᐃⲆⲆᐃᐃ": "img/night-skin176.png",
		"ⲆΔⵠΔⲆΔΔ": "img/day-skin177.png",
		"ΔΔᐃⵠΔⲆⲆ": "img/night-skin177.png",
		"ⵠⲆⲆⵠⵠⲆⲆ": "img/day-skin178.png",
		"ΔⲆⲆⵠᐃᐃᐃ": "img/night-skin178.png",
		"ᐃⵠⵠΔⵠᐃⲆ": "img/day-skin179.png",
		"ᐃⲆⵠΔᐃⲆⲆ": "img/night-skin179.png",
		"ΔΔΔᐃⲆⲆΔ": "img/day-skin180.png",
		"ⲆⲆᐃⵠⵠⵠⵠ": "img/night-skin180.png",
		"ΔⵠΔⵠᐃⵠⲆ": "img/day-skin181.png",
		"ΔⵠᐃⵠΔⲆᐃ": "img/night-skin181.png",
		"ΔⲆΔᐃᐃⲆᐃ": "img/day-skin182.png",
		"ΔΔΔᐃΔⲆⲆ": "img/night-skin182.png",
		"ΔⲆⵠⵠⵠᐃⵠ": "img/day-skin183.png",
		"ᐃⲆⵠᐃⲆΔΔ": "img/night-skin183.png",
		"ᐃΔⲆᐃΔⵠⵠ": "img/day-skin184.png",
		"ⵠⵠΔⵠΔⵠᐃ": "img/night-skin184.png",
		"ⲆΔⲆᐃⵠᐃⵠ": "img/day-skin185.png",
		"ⲆᐃⵠⵠΔᐃΔ": "img/night-skin185.png",
		"ⲆⲆⵠᐃⲆᐃⲆ": "img/day-skin186.png",
		"ΔᐃⵠⲆⵠⵠⵠ": "img/night-skin186.png",
		"ΔⵠΔᐃⲆΔΔ": "img/day-skin187.png",
		"ⵠΔⲆⵠⵠᐃΔ": "img/night-skin187.png",
		"ⲆⵠᐃΔⵠΔⲆ": "img/day-skin188.png",
		"ᐃⵠΔΔᐃⵠᐃ": "img/night-skin188.png",
		"ⵠⲆⵠᐃᐃᐃⲆ": "img/day-skin189.png",
		"ΔᐃᐃⲆᐃΔᐃ": "img/night-skin189.png",
		"ⵠⲆᐃᐃⵠᐃⲆ": "img/day-skin190.png",
		"ⵠᐃᐃΔᐃⵠΔ": "img/night-skin190.png",
		"ⲆⲆᐃⲆⵠΔᐃ": "img/day-skin191.png",
		"ⵠⵠⵠⲆᐃΔⵠ": "img/night-skin191.png",
		"ⵠᐃⲆᐃᐃⵠΔ": "img/day-skin192.png",
		"ⲆΔⲆⲆⵠᐃΔ": "img/night-skin192.png",
		"ⲆⵠΔⵠᐃⵠᐃ": "img/day-skin193.png",
		"ᐃⲆⵠⲆⵠⲆⵠ": "img/night-skin193.png",
		"ⵠᐃΔⵠⵠⵠᐃ": "img/day-skin194.png",
		"ᐃΔⵠⲆᐃⲆᐃ": "img/night-skin194.png",
		"ⲆΔΔΔΔᐃⵠ": "img/day-skin195.png",
		"ⵠᐃⲆΔᐃΔⲆ": "img/night-skin195.png",
		"ⲆⵠⲆⲆⲆⵠΔ": "img/day-skin196.png",
		"ⲆⵠΔᐃⲆΔᐃ": "img/night-skin196.png",
		"ⲆΔⵠⲆⲆΔΔ": "img/day-skin197.png",
		"ⵠⵠⲆᐃᐃΔⲆ": "img/night-skin197.png",
		"ΔᐃⵠⲆᐃᐃⵠ": "img/day-skin198.png",
		"ᐃΔⲆΔΔΔΔ": "img/night-skin198.png",
		"ᐃΔΔⲆⲆΔⵠ": "img/day-skin199.png",
		"ΔⲆᐃᐃⵠⲆᐃ": "img/night-skin199.png",
		"ⵠᐃΔⵠⵠΔⲆ": "img/day-skin200.png",
		"ᐃᐃᐃⵠᐃⲆⵠ": "img/night-skin200.png",
		"ᐃⲆΔᐃⲆΔⵠ": "img/day-skin201.png",
		"ΔΔᐃΔΔΔⵠ": "img/night-skin201.png",
		"ΔⵠᐃᐃⵠΔⵠ": "img/day-skin202.png",
		"ⲆⲆᐃΔΔᐃⵠ": "img/night-skin202.png",
		"ΔⵠⲆΔⵠᐃᐃ": "img/day-skin203.png",
		"ΔⲆⵠⲆⲆⲆⲆ": "img/night-skin203.png",
		"ⵠᐃⵠᐃΔᐃⲆ": "img/day-skin204.png",
		"ⵠⵠΔⵠⲆⲆᐃ": "img/night-skin204.png",
		"ⵠᐃᐃⵠⵠΔⲆ": "img/day-skin205.png",
		"ⵠⵠᐃᐃⵠⲆᐃ": "img/night-skin205.png",
		"ΔⲆⵠΔΔⲆⵠ": "img/day-skin206.png",
		"ⲆⲆΔⲆᐃⲆᐃ": "img/night-skin206.png",
		"ΔⵠⵠΔⲆΔⲆ": "img/day-skin207.png",
		"ΔⲆᐃΔᐃΔΔ": "img/night-skin207.png",
		"ⵠⲆⲆⲆΔᐃⵠ": "img/day-skin208.png",
		"ⲆⲆΔᐃΔΔⲆ": "img/night-skin208.png",
		"ᐃΔᐃᐃᐃᐃᐃ": "img/day-skin209.png",
		"ΔΔⲆᐃⲆⲆⵠ": "img/night-skin209.png",
		"ⲆⲆⵠⲆΔᐃΔ": "img/day-skin210.png",
		"ⲆⲆⵠΔΔᐃⵠ": "img/night-skin210.png",
		"ⲆⲆⵠⵠᐃᐃⲆ": "img/day-skin211.png",
		"ⵠᐃⵠΔⲆⵠΔ": "img/night-skin211.png",
		"ΔⲆⵠᐃᐃΔⵠ": "img/day-skin212.png",
		"ⲆⲆⲆᐃⲆΔⲆ": "img/night-skin212.png",
		"ⲆᐃΔⲆΔⲆⵠ": "img/day-skin213.png",
		"ⵠⵠⵠⲆⲆⵠᐃ": "img/night-skin213.png",
		"ᐃⵠⵠᐃⵠᐃᐃ": "img/day-skin214.png",
		"ⲆⲆΔΔᐃⵠᐃ": "img/night-skin214.png",
		"ⲆⵠⵠⲆΔⵠΔ": "img/day-hand-skin0.png",
		"ⵠⲆⲆⲆⵠⲆⵠ": "img/night-hand-skin0.png",
		"ⲆⲆΔᐃᐃⵠΔ": "img/day-hand-skin1.png",
		"ⲆᐃᐃᐃⲆΔᐃ": "img/night-hand-skin1.png",
		"ᐃⲆΔⲆⵠⲆⵠ": "img/day-hand-skin2.png",
		"ⵠΔᐃⵠΔᐃⲆ": "img/night-hand-skin2.png",
		"Δᐃⵠⵠᐃᐃᐃ": "img/day-hand-skin3.png",
		"ⵠΔⵠⲆΔⲆΔ": "img/night-hand-skin3.png",
		"ⵠᐃᐃᐃΔⵠᐃ": "img/day-hand-skin4.png",
		"ᐃⵠᐃΔⵠᐃⵠ": "img/night-hand-skin4.png",
		"ⲆⵠΔⲆⲆⵠᐃ": "img/day-hand-skin5.png",
		"ⲆⲆⲆⵠⲆᐃΔ": "img/night-hand-skin5.png",
		"ⵠⲆΔΔᐃᐃⵠ": "img/day-hand-skin6.png",
		"ⵠΔΔⲆᐃΔΔⵠⵠ": "img/night-hand-skin6.png",
		"ⵠΔⵠⵠⵠⲆᐃ": "img/day-hand-skin6.png",
		"ⵠΔⵠΔΔΔⲆ": "img/night-hand-skin6.png",
		"ⵠⵠᐃⵠΔΔᐃ": "img/day-hand-skin8.png",
		"ᐃᐃΔⲆⲆⲆⵠ": "img/night-hand-skin8.png",
		"ⲆⲆⲆΔΔᐃⵠ": "img/day-hand-skin9.png",
		"ΔⲆᐃΔⵠΔΔ": "img/night-hand-skin9.png",
		"ΔⵠᐃⵠⲆⵠⵠ": "img/day-hand-skin10.png",
		"ⵠᐃⲆⲆᐃΔΔ": "img/night-hand-skin10.png",
		"ⵠᐃⲆᐃⲆΔᐃ": "img/day-hand-skin11.png",
		"ⵠᐃⲆⵠᐃᐃᐃ": "img/night-hand-skin11.png",
		"ⵠⵠⵠᐃΔⵠᐃ": "img/day-hand-skin12.png",
		"ⲆⵠⲆᐃΔΔΔ": "img/night-hand-skin12.png",
		"ᐃᐃⵠⲆΔⲆⲆ": "img/day-hand-skin13.png",
		"ᐃⲆⲆⵠⲆΔⲆ": "img/night-hand-skin13.png",
		"ᐃⲆᐃⵠⲆⵠⵠ": "img/day-hand-skin14.png",
		"ⵠᐃᐃΔᐃᐃⵠ": "img/night-hand-skin14.png",
		"ᐃⲆᐃⲆⵠⲆⵠ": "img/day-hand-skin15.png",
		"ᐃᐃᐃΔⲆΔΔ": "img/night-hand-skin15.png",
		"ᐃΔⵠⲆΔⲆΔ": "img/day-hand-skin16.png",
		"ΔⵠΔᐃΔΔⵠ": "img/night-hand-skin16.png",
		"ⵠⵠΔⲆΔΔᐃ": "img/day-hand-skin17.png",
		"ᐃⵠΔⲆΔⲆⲆ": "img/night-hand-skin17.png",
		"ⵠⵠΔᐃⵠⵠᐃ": "img/day-hand-skin18.png",
		"ⲆᐃⲆⲆΔᐃⵠ": "img/night-hand-skin18.png",
		"ⲆΔΔⵠΔᐃⲆ": "img/day-hand-skin19.png",
		"ΔΔⲆⲆΔᐃⲆ": "img/night-hand-skin19.png",
		"ᐃⵠᐃⵠⲆⲆⵠ": "img/day-hand-skin20.png",
		"ⵠᐃΔᐃΔⵠⵠ": "img/night-hand-skin20.png",
		"ⲆΔᐃⵠⲆΔᐃ": "img/day-hand-skin21.png",
		"ⵠⵠΔΔᐃⲆⵠ": "img/night-hand-skin21.png",
		"ⵠΔᐃᐃⵠⵠⵠ": "img/day-hand-skin22.png",
		"ΔⵠⲆᐃⵠΔΔ": "img/night-hand-skin22.png",
		"ⵠⵠⲆᐃⲆᐃⵠ": "img/day-hand-skin23.png",
		"ⵠⵠⵠⵠᐃᐃⵠ": "img/night-hand-skin23.png",
		"ᐃᐃᐃⵠⵠᐃΔ": "img/day-hand-skin24.png",
		"ⲆΔⵠⲆⵠΔᐃ": "img/night-hand-skin24.png",
		"ᐃⵠΔⲆΔⲆΔ": "img/day-hand-skin25.png",
		"ⲆⲆΔᐃᐃⲆⵠ": "img/night-hand-skin25.png",
		"ΔⵠⲆᐃⵠⲆⲆ": "img/day-hand-skin26.png",
		"ⲆⲆⲆⵠⲆΔⲆ": "img/night-hand-skin26.png",
		"ⲆⲆⵠΔΔⵠᐃ": "img/day-hand-skin27.png",
		"ⲆⵠⵠⲆⵠᐃᐃ": "img/night-hand-skin27.png",
		"ΔⲆΔᐃΔⵠᐃ": "img/day-hand-skin28.png",
		"ᐃΔⲆⵠⵠⲆΔ": "img/night-hand-skin28.png",
		"ⵠⲆᐃⲆⲆⵠΔ": "img/day-hand-skin29.png",
		"ⲆⵠⵠᐃⵠΔⲆ": "img/night-hand-skin29.png",
		"ᐃⵠⲆΔΔΔᐃ": "img/day-hand-skin30.png",
		"ⵠⵠΔᐃⵠⵠⲆ": "img/night-hand-skin30.png",
		"ⲆⵠⲆⲆᐃᐃΔ": "img/day-hand-skin31.png",
		"ΔᐃΔΔᐃᐃⲆ": "img/night-hand-skin31.png",
		"ᐃⵠΔⵠⵠᐃⵠ": "img/day-hand-skin32.png",
		"ⲆⲆΔⲆΔⵠⲆ": "img/night-hand-skin32.png",
		"ΔΔΔⲆⵠΔΔ": "img/day-hand-skin33.png",
		"ⵠⵠⲆⵠᐃⵠⵠ": "img/night-hand-skin33.png",
		"ΔⵠⵠᐃΔΔⵠ": "img/day-hand-skin34.png",
		"ΔΔᐃⲆⵠᐃΔ": "img/night-hand-skin34.png",
		"ⵠᐃⵠⵠⵠⲆΔ": "img/day-hand-skin35.png",
		"ᐃⵠΔⲆΔⵠⵠ": "img/night-hand-skin35.png",
		"ⲆΔⲆⵠⵠᐃⵠ": "img/day-hand-skin36.png",
		"ΔⲆᐃΔⲆΔⲆ": "img/night-hand-skin36.png",
		"ⵠΔⲆᐃᐃⵠΔ": "img/day-hand-skin37.png",
		"ⵠΔᐃᐃⲆᐃᐃ": "img/night-hand-skin37.png",
		"ⲆⵠΔⲆⵠᐃⵠ": "img/day-hand-skin38.png",
		"ΔⵠⵠⲆⲆᐃΔ": "img/night-hand-skin38.png",
		"ΔⵠⲆᐃⵠⵠⵠ": "img/day-hand-skin39.png",
		"ⲆΔᐃᐃⵠΔΔ": "img/night-hand-skin39.png",
		"ⲆⵠⵠⵠⲆΔΔ": "img/day-hand-skin40.png",
		"ⲆⲆᐃᐃⵠᐃⵠ": "img/night-hand-skin40.png",
		"ⵠᐃⲆᐃⲆᐃⵠ": "img/day-hand-skin41.png",
		"ᐃⲆᐃΔΔᐃΔ": "img/night-hand-skin41.png",
		"ⵠⵠᐃΔⲆᐃⵠ": "img/day-hand-skin42.png",
		"ᐃⵠᐃᐃΔⵠⲆ": "img/night-hand-skin42.png",
		"ⲆⲆⵠⲆᐃΔⵠ": "img/day-hand-skin43.png",
		"ⵠΔⵠⲆΔⵠΔ": "img/night-hand-skin43.png",
		"ⵠᐃᐃΔⲆΔΔ": "img/day-hand-skin16.png",
		"ⲆⵠᐃᐃΔⲆⵠ": "img/night-hand-skin16.png",
		"ᐃΔⵠⲆΔⲆⵠ": "img/day-hand-skin45.png",
		"ΔΔⲆⲆⲆΔΔ": "img/night-hand-skin45.png",
		"ᐃΔΔᐃᐃΔⲆ": "img/day-hand-skin46.png",
		"ⲆⵠⵠΔⵠⲆᐃ": "img/night-hand-skin46.png",
		"ⲆⵠΔΔᐃⲆΔ": "img/day-hand-skin47.png",
		"ⵠᐃΔⵠⵠᐃⲆ": "img/night-hand-skin47.png",
		"ⲆⵠⲆⲆΔᐃΔ": "img/day-hand-skin48.png",
		"ⲆⵠⵠⵠⵠⲆᐃ": "img/night-hand-skin48.png",
		"ᐃᐃⲆΔⲆⲆᐃ": "img/day-hand-skin49.png",
		"ⲆⵠΔⲆⵠⲆᐃ": "img/night-hand-skin49.png",
		"ΔΔⵠⲆΔⵠΔ": "img/day-hand-skin49.png",
		"ⲆᐃⲆΔⲆⵠⲆ": "img/night-hand-skin49.png",
		"ᐃⲆᐃⵠⲆⲆⲆ": "img/day-hand-skin51.png",
		"ᐃΔⵠⲆᐃⵠΔ": "img/night-hand-skin51.png",
		"ΔΔΔⲆⵠⵠΔ": "img/day-hand-skin52.png",
		"ⵠΔΔⲆⵠΔⵠ": "img/night-hand-skin52.png",
		"ΔΔᐃⵠᐃⲆΔ": "img/day-hand-skin53.png",
		"ⲆΔⵠΔⲆᐃᐃ": "img/night-hand-skin53.png",
		"ᐃⵠΔⲆᐃⵠΔ": "img/day-hand-skin53.png",
		"ΔⵠΔⲆⲆⲆⲆ": "img/night-hand-skin53.png",
		"ΔⲆΔΔΔᐃⲆ": "img/day-hand-skin55.png",
		"ᐃᐃⲆⵠᐃΔⲆ": "img/night-hand-skin55.png",
		"ΔΔᐃᐃⲆⵠᐃ": "img/day-hand-skin56.png",
		"ΔⲆⲆᐃᐃⲆⵠ": "img/night-hand-skin56.png",
		"ΔΔᐃⲆⲆⵠᐃ": "img/day-hand-skin57.png",
		"ⵠᐃΔᐃΔⵠⲆ": "img/night-hand-skin57.png",
		"ᐃᐃᐃᐃᐃⵠⵠ": "img/day-hand-skin58.png",
		"ΔⲆⲆΔⵠⵠΔ": "img/night-hand-skin58.png",
		"ⵠᐃⵠΔᐃΔⲆ": "img/day-hand-skin59.png",
		"ⵠⵠΔⲆⵠⵠⲆ": "img/night-hand-skin59.png",
		"ⵠΔᐃⵠⵠΔΔ": "img/day-hand-skin61.png",
		"ⵠΔᐃᐃᐃᐃⵠ": "img/night-hand-skin61.png",
		"ⵠΔΔⲆⲆᐃᐃ": "img/day-hand-skin61.png",
		"ⵠⲆᐃᐃⵠΔⵠ": "img/night-hand-skin61.png",
		"ᐃᐃⵠⲆΔᐃⵠ": "img/day-hand-skin62.png",
		"ⵠΔΔⲆᐃⵠⲆ": "img/night-hand-skin62.png",
		"ΔᐃᐃᐃΔᐃⲆ": "img/day-hand-skin63.png",
		"ᐃⵠⲆᐃᐃⵠⲆ": "img/night-hand-skin63.png",
		"ΔΔⲆⵠΔᐃᐃ": "img/day-hand-skin64.png",
		"ⲆⵠᐃⲆⵠᐃΔ": "img/night-hand-skin64.png",
		"ⵠᐃⲆΔⲆⵠᐃ": "img/day-hand-skin65.png",
		"ΔⵠᐃⵠΔⲆⵠ": "img/night-hand-skin65.png",
		"ⲆⲆⲆⵠΔΔΔ": "img/day-hand-skin66.png",
		"ᐃΔᐃⵠⲆᐃΔ": "img/night-hand-skin66.png",
		"ΔⲆᐃᐃᐃᐃᐃ": "img/day-hand-skin67.png",
		"ΔᐃΔΔⲆⵠᐃ": "img/night-hand-skin67.png",
		"ΔΔΔΔΔⲆⲆ": "img/day-hand-skin68.png",
		"ⵠⲆⲆⵠⲆⲆⲆ": "img/night-hand-skin68.png",
		"ⲆⲆΔⵠⲆⲆΔ": "img/day-hand-skin69.png",
		"ΔⵠⲆΔⵠⲆᐃ": "img/night-hand-skin69.png",
		"ⲆΔΔⵠⲆⵠⵠ": "img/day-hand-skin70.png",
		"ᐃⵠΔⵠΔⵠⲆ": "img/night-hand-skin70.png",
		"ΔⲆⲆΔᐃᐃⵠ": "img/day-hand-skin71.png",
		"ᐃᐃⵠᐃⲆΔⵠ": "img/night-hand-skin71.png",
		"ΔΔᐃⵠΔⵠΔ": "img/day-hand-skin72.png",
		"Δⵠⵠⵠⵠᐃⵠ": "img/night-hand-skin72.png",
		"ⵠΔⲆⵠΔⲆⵠ": "img/day-hand-skin73.png",
		"ΔᐃⲆᐃΔⲆⵠ": "img/night-hand-skin73.png",
		"ⵠⲆΔᐃⲆᐃⵠ": "img/day-hand-skin74.png",
		"ⵠΔΔⲆⲆⵠΔ": "img/night-hand-skin74.png",
		"ᐃⵠⵠᐃΔΔᐃ": "img/day-hand-skin75.png",
		"ᐃΔᐃⵠΔⵠᐃ": "img/night-hand-skin75.png",
		"ⲆᐃⲆⲆⲆΔᐃ": "img/day-hand-skin76.png",
		"ᐃᐃⲆⲆΔⵠΔ": "img/night-hand-skin76.png",
		"ᐃⲆⲆⲆᐃᐃᐃ": "img/day-hand-skin77.png",
		"ΔⵠΔΔⵠⲆⲆ": "img/night-hand-skin77.png",
		"ⵠΔⲆⲆΔⵠⲆ": "img/day-hand-skin78.png",
		"ᐃⲆⲆⲆⲆᐃⵠ": "img/night-hand-skin78.png",
		"Δᐃⵠⵠᐃⵠᐃ": "img/day-hand-skin79.png",
		"ⵠΔⲆⵠⵠⲆⵠ": "img/night-hand-skin79.png",
		"ΔΔΔⵠΔᐃⲆ": "img/day-hand-skin80.png",
		"ⵠⵠⵠΔⵠⲆⲆ": "img/night-hand-skin80.png",
		"ⵠΔΔⲆⲆⲆΔ": "img/day-hand-skin81.png",
		"ᐃⵠΔᐃΔΔᐃ": "img/night-hand-skin81.png",
		"ⵠⲆΔⵠΔᐃᐃ": "img/day-hand-skin82.png",
		"ᐃΔⵠⵠⲆⲆⵠ": "img/night-hand-skin82.png",
		"ⵠⲆΔᐃᐃⵠⲆ": "img/day-hand-skin83.png",
		"ⲆΔΔᐃⲆⵠⵠ": "img/night-hand-skin83.png",
		"ᐃⲆᐃΔΔᐃᐃ": "img/day-hand-skin84.png",
		"ΔΔΔⲆΔᐃΔ": "img/night-hand-skin84.png",
		"ΔⵠⵠⲆΔⲆᐃ": "img/day-hand-skin85.png",
		"ⵠᐃΔΔⵠⲆΔ": "img/night-hand-skin85.png",
		"ᐃΔⲆⲆᐃΔΔ": "img/day-hand-skin86.png",
		"ᐃᐃⵠΔΔⵠⲆ": "img/night-hand-skin86.png",
		"ⲆΔΔΔᐃⲆΔ": "img/day-hand-skin87.png",
		"ΔᐃⵠⵠΔⵠΔ": "img/night-hand-skin87.png",
		"ⲆΔᐃᐃⵠᐃⵠ": "img/day-hand-skin88.png",
		"ᐃΔⵠᐃⵠᐃΔ": "img/night-hand-skin88.png",
		"ΔⵠⵠⲆᐃⲆᐃ": "img/day-hand-skin89.png",
		"ⵠᐃⲆⲆᐃⵠⵠ": "img/night-hand-skin89.png",
		"ΔΔᐃⲆⵠⵠᐃ": "img/day-hand-skin90.png",
		"ⵠᐃⵠΔⲆⲆΔ": "img/night-hand-skin90.png",
		"ᐃⵠⲆⲆΔᐃⵠ": "img/day-hand-skin91.png",
		"ⲆⵠⲆΔΔⵠΔ": "img/night-hand-skin91.png",
		"ΔⲆΔⲆⲆΔΔ": "img/day-hand-skin92.png",
		"ⵠⵠᐃⲆⵠⲆⲆ": "img/night-hand-skin92.png",
		"ⲆΔⲆⵠΔΔΔ": "img/day-hand-skin93.png",
		"ᐃΔᐃⵠⲆΔΔ": "img/night-hand-skin93.png",
		"ⵠᐃΔΔΔⲆᐃ": "img/day-hand-skin94.png",
		"ⵠⵠΔⲆᐃᐃΔ": "img/night-hand-skin94.png",
		"ⲆⲆⵠᐃⵠΔΔ": "img/day-hand-skin95.png",
		"ⲆⵠⵠᐃⲆⲆᐃ": "img/night-hand-skin95.png",
		"ΔⵠᐃⲆΔⲆⵠ": "img/day-hand-skin96.png",
		"ᐃⵠⵠⵠⵠⲆΔ": "img/night-hand-skin96.png",
		"ⵠⵠⲆⵠⵠΔᐃ": "img/day-hand-skin97.png",
		"ⵠⲆᐃⵠⲆⲆᐃ": "img/night-hand-skin97.png",
		"ΔΔⲆⵠᐃᐃΔ": "img/day-hand-skin98.png",
		"ⵠᐃΔⵠΔΔⵠ": "img/night-hand-skin98.png",
		"ⲆⲆⵠⲆᐃᐃⲆ": "img/day-hand-skin99.png",
		"ⲆⵠⲆᐃᐃΔⵠ": "img/night-hand-skin99.png",
		"ᐃⵠⲆⵠΔΔᐃ": "img/day-hand-skin100.png",
		"ⵠⲆΔΔⵠΔᐃ": "img/night-hand-skin100.png",
		"Δⵠᐃⵠⵠᐃⵠ": "img/day-hand-skin101.png",
		"ΔΔΔⵠᐃⵠᐃ": "img/night-hand-skin101.png",
		"ⲆΔⵠΔⲆᐃΔ": "img/day-hand-skin102.png",
		"ΔᐃΔⲆΔΔⵠ": "img/night-hand-skin102.png",
		"ⵠⵠΔⲆᐃᐃⵠ": "img/day-hand-skin103.png",
		"ᐃᐃΔᐃⲆⵠᐃ": "img/night-hand-skin103.png",
		"ᐃⵠⵠᐃΔⵠᐃ": "img/day-hand-skin104.png",
		"ⵠΔΔΔᐃⲆⵠ": "img/night-hand-skin104.png",
		"ⵠΔⵠⵠᐃΔⲆ": "img/day-hand-skin105.png",
		"ⲆⲆΔⲆΔᐃⵠ": "img/night-hand-skin105.png",
		"ⵠΔᐃⲆⵠⵠⵠ": "img/day-hand-skin106.png",
		"ᐃᐃⲆⲆⲆⲆΔ": "img/night-hand-skin106.png",
		"ΔᐃⲆΔᐃⵠᐃ": "img/day-hand-skin107.png",
		"ΔΔⲆⵠΔⵠΔ": "img/night-hand-skin107.png",
		"ᐃΔⵠᐃᐃᐃⵠ": "img/day-hand-skin108.png",
		"ᐃⲆⵠΔΔⵠⲆ": "img/night-hand-skin108.png",
		"ᐃΔΔⵠⲆⲆⲆ": "img/day-hand-skin109.png",
		"ⵠᐃⲆΔⲆⲆΔ": "img/night-hand-skin109.png",
		"ⵠΔᐃΔⲆΔⲆ": "img/day-hand-skin110.png",
		"ⲆⵠⵠΔᐃᐃⵠ": "img/night-hand-skin110.png",
		"ᐃⵠⵠΔⲆⵠᐃ": "img/day-hand-skin111.png",
		"Δᐃⵠᐃⵠⵠⵠ": "img/night-hand-skin111.png",
		"ᐃᐃⲆᐃⲆᐃⵠ": "img/day-hand-skin112.png",
		"ⵠⲆΔᐃΔΔΔ": "img/night-hand-skin112.png",
		"ΔⲆⵠⲆⵠᐃΔΔΔ": "img/day-hand-skin113.png",
		"ᐃⵠⵠΔⵠⲆᐃⲆⲆ": "img/night-hand-skin113.png",
		"ⵠᐃⲆᐃᐃΔᐃ": "img/day-hand-skin114.png",
		"ⵠⲆⲆᐃᐃΔⲆ": "img/night-hand-skin114.png",
		"ⵠΔᐃⵠⵠᐃᐃ": "img/day-hand-skin115.png",
		"ⲆⵠᐃᐃᐃᐃΔ": "img/night-hand-skin115.png",
		"ⲆΔⲆⵠΔΔⵠ": "img/day-hand-skin116.png",
		"ⵠᐃⵠᐃᐃⵠᐃ": "img/night-hand-skin116.png",
		"ⲆᐃⲆᐃᐃᐃⵠ": "img/day-hand-skin117.png",
		"ΔⲆⵠⲆᐃᐃᐃ": "img/night-hand-skin117.png",
		"ⲆⲆⲆΔΔᐃᐃ": "img/day-hand-skin118.png",
		"ⵠᐃᐃⲆᐃᐃⵠ": "img/night-hand-skin118.png",
		"Ⲇᐃᐃⵠᐃᐃⵠ": "img/day-hand-skin119.png",
		"ⵠᐃᐃᐃⵠΔᐃ": "img/night-hand-skin119.png",
		"ᐃⲆⵠΔⵠᐃᐃ": "img/day-hand-skin120.png",
		"ⲆΔΔⲆⲆΔⵠ": "img/night-hand-skin120.png",
		"ᐃⵠΔⵠΔⵠΔ": "img/day-hand-skin122.png",
		"ⵠⲆⵠⵠⵠΔᐃ": "img/night-hand-skin122.png",
		"ΔⵠᐃⵠᐃⲆⲆ": "img/day-hand-skin122.png",
		"ΔΔⲆⵠᐃᐃⲆ": "img/night-hand-skin122.png",
		"ⲆΔΔᐃⲆᐃΔ": "img/day-hand-skin122.png",
		"ⵠΔⵠᐃⵠᐃⵠ": "img/night-hand-skin122.png",
		"ΔⲆΔᐃᐃⲆⲆ": "img/day-hand-skin124.png",
		"ᐃᐃⲆⲆΔΔΔ": "img/night-hand-skin124.png",
		"ᐃΔᐃᐃᐃᐃⵠ": "img/day-hand-skin125.png",
		"ΔΔΔⵠᐃᐃᐃ": "img/night-hand-skin125.png",
		"ⵠⵠᐃⲆⲆⵠⲆ": "img/day-hand-skin126.png",
		"ⲆΔⵠⵠΔⵠΔ": "img/night-hand-skin126.png",
		"ⵠⲆⵠⵠΔⲆⵠ": "img/day-hand-skin127.png",
		"ⵠᐃⵠⲆⲆᐃᐃ": "img/night-hand-skin127.png",
		"ΔᐃⲆⲆⵠᐃⵠ": "img/day-hand-skin128.png",
		"ⲆⵠᐃⲆᐃⲆⲆ": "img/night-hand-skin128.png",
		"ⵠᐃΔⵠⲆΔΔ": "img/day-hand-skin129.png",
		"ΔⵠⵠⵠᐃΔⵠ": "img/night-hand-skin129.png",
		"ⲆᐃⵠⲆᐃⲆᐃ": "img/day-hand-skin130.png",
		"ⵠΔΔⵠΔΔⵠ": "img/night-hand-skin130.png",
		"ᐃⲆΔⲆᐃⲆΔ": "img/day-hand-skin131.png",
		"ⵠⲆΔᐃᐃⵠΔ": "img/night-hand-skin131.png",
		"ⵠΔⲆⵠⲆΔⵠ": "img/day-hand-skin130.png",
		"ⵠⲆⲆⵠⲆᐃᐃ": "img/night-hand-skin130.png",
		"ΔΔᐃᐃᐃΔᐃ": "img/day-hand-skin133.png",
		"ⲆⵠᐃΔΔⵠᐃ": "img/night-hand-skin133.png",
		"ⵠⲆⵠⵠⵠΔⵠ": "img/day-hand-skin134.png",
		"ⲆΔΔⵠΔⲆᐃ": "img/night-hand-skin134.png",
		"ᐃⲆⲆΔΔΔⵠ": "img/day-hand-skin135.png",
		"ΔᐃΔΔⵠⲆᐃ": "img/night-hand-skin135.png",
		"ᐃᐃᐃᐃᐃⲆᐃ": "img/day-hand-skin136.png",
		"ⵠᐃⵠᐃᐃΔᐃ": "img/night-hand-skin136.png",
		"ᐃⵠⵠⲆᐃΔⲆ": "img/day-hand-skin137.png",
		"ΔⵠᐃᐃᐃⲆⵠ": "img/night-hand-skin137.png",
		"ᐃⲆᐃᐃΔᐃⲆ": "img/day-hand-skin138.png",
		"ᐃᐃⲆⵠᐃⵠΔ": "img/night-hand-skin138.png",
		"ᐃⲆᐃⲆⵠᐃⵠ": "img/day-hand-skin139.png",
		"ΔΔⵠΔⵠᐃⵠ": "img/night-hand-skin139.png",
		"ᐃⵠⲆΔⲆΔᐃ": "img/day-hand-skin140.png",
		"ΔⲆⲆΔΔⲆⵠ": "img/night-hand-skin140.png",
		"ΔⵠⲆᐃⵠᐃΔ": "img/day-hand-skin141.png",
		"ΔᐃᐃᐃⲆⲆᐃ": "img/night-hand-skin141.png",
		"ⲆᐃⲆΔⵠⵠⲆ": "img/day-hand-skin142.png",
		"ᐃΔⵠⵠⵠⲆᐃ": "img/night-hand-skin142.png",
		"ᐃᐃΔⲆΔΔᐃ": "img/day-hand-skin143.png",
		"ⲆᐃΔΔⵠⵠᐃ": "img/night-hand-skin143.png",
		"ⲆᐃⵠⲆᐃⵠᐃ": "img/day-hand-skin144.png",
		"ⵠΔⵠᐃᐃᐃᐃ": "img/night-hand-skin144.png",
		"ΔᐃᐃⲆᐃⵠⵠ": "img/day-hand-skin145.png",
		"ⵠⵠⵠᐃΔΔⵠ": "img/night-hand-skin145.png",
		"Ⲇᐃⵠᐃᐃⵠⵠ": "img/day-hand-skin146.png",
		"ⵠᐃΔΔⵠΔⵠ": "img/night-hand-skin146.png",
		"ⵠᐃᐃΔΔⵠΔ": "img/day-hand-skin147.png",
		"ⵠⲆᐃⲆⲆᐃΔ": "img/night-hand-skin147.png",
		"ⵠᐃⲆᐃᐃⲆⵠ": "img/day-hand-skin148.png",
		"ⲆⵠᐃΔⵠΔⵠ": "img/night-hand-skin148.png",
		"ⲆⲆᐃΔᐃⲆⲆ": "img/day-hand-skin149.png",
		"ⲆⲆⲆΔΔΔΔ": "img/night-hand-skin149.png",
		"ⵠⲆΔⲆΔᐃⵠ": "img/day-hand-skin150.png",
		"ΔᐃⲆΔᐃᐃⲆ": "img/night-hand-skin150.png",
		"ΔΔΔᐃΔᐃⵠ": "img/day-hand-skin151.png",
		"ⲆΔⲆᐃⲆⵠⲆ": "img/night-hand-skin151.png",
		"ᐃᐃⵠΔⲆᐃᐃ": "img/day-hand-skin152.png",
		"ⵠᐃᐃⲆᐃⲆⵠ": "img/night-hand-skin152.png",
		"ⵠΔᐃΔⲆᐃΔ": "img/day-hand-skin153.png",
		"ⵠⵠΔᐃⲆᐃᐃ": "img/night-hand-skin153.png",
		"ⵠⵠⵠⲆⲆᐃᐃ": "img/day-hand-skin154.png",
		"ⲆᐃⲆΔᐃⵠⵠ": "img/night-hand-skin154.png",
		"ΔᐃⵠᐃᐃΔⵠ": "img/day-hand-skin155.png",
		"ΔⲆᐃⵠⲆⲆⲆ": "img/night-hand-skin155.png",
		"ⵠⲆⵠⲆⲆᐃᐃ": "img/day-hand-skin156.png",
		"ⵠⵠᐃⵠⵠⲆΔ": "img/night-hand-skin156.png",
		"ⵠⵠΔⵠⲆⵠΔ": "img/day-hand-skin157.png",
		"ΔᐃᐃⲆⵠΔΔ": "img/night-hand-skin157.png",
		"ⲆⲆⵠᐃⲆᐃΔ": "img/day-hand-skin158.png",
		"ᐃΔᐃΔⲆΔᐃ": "img/night-hand-skin158.png",
		"ⲆΔⵠᐃⲆⲆᐃ": "img/day-hand-skin159.png",
		"ΔᐃⵠΔᐃᐃⵠ": "img/night-hand-skin159.png",
		"ⵠⵠⵠᐃⲆΔΔ": "img/day-hand-skin160.png",
		"ⲆΔΔΔΔⵠⵠ": "img/night-hand-skin160.png",
		"ⲆⵠⲆⲆᐃᐃᐃ": "img/day-hand-skin161.png",
		"ⵠⲆⲆⵠΔⲆΔ": "img/night-hand-skin161.png",
		"ᐃⲆᐃⵠᐃⲆⵠ": "img/day-hand-skin162.png",
		"ⲆΔΔⵠΔᐃᐃ": "img/night-hand-skin162.png",
		"ⲆᐃⲆⵠᐃⵠⲆ": "img/day-hand-skin163.png",
		"ᐃᐃⵠⵠᐃΔⵠ": "img/night-hand-skin163.png",
		"ΔΔⲆⲆᐃⵠᐃ": "img/day-hand-skin164.png",
		"ᐃⲆⲆᐃⲆᐃⲆ": "img/night-hand-skin164.png",
		"ΔΔⲆⲆᐃⵠⵠ": "img/day-hand-skin165.png",
		"ΔⵠⲆⲆᐃΔΔ": "img/night-hand-skin165.png",
		"ᐃⵠⵠⲆⵠᐃⲆ": "img/day-hand-skin166.png",
		"ⲆΔΔΔⵠⵠⵠ": "img/night-hand-skin166.png",
		"ΔⲆΔⵠᐃΔⲆ": "img/day-hand-skin167.png",
		"ⲆᐃⵠⵠⵠⲆΔ": "img/night-hand-skin167.png",
		"ⲆΔᐃᐃᐃᐃⵠ": "img/day-hand-skin168.png",
		"ⲆᐃᐃⵠᐃΔᐃ": "img/night-hand-skin168.png",
		"ᐃΔΔΔⲆΔⲆ": "img/day-hand-skin169.png",
		"ᐃᐃᐃⵠⲆⵠᐃ": "img/night-hand-skin169.png",
		"ΔⵠⲆΔΔᐃⵠ": "img/day-hand-skin170.png",
		"ᐃⲆᐃᐃᐃⵠΔ": "img/night-hand-skin170.png",
		"ⵠⲆᐃⵠⵠⵠᐃ": "img/day-hand-skin171.png",
		"ᐃⵠᐃᐃᐃⵠΔ": "img/night-hand-skin171.png",
		"ⲆⵠⲆΔⵠΔⵠ": "img/day-hand-skin172.png",
		"ⵠⵠΔᐃⲆⲆᐃ": "img/night-hand-skin172.png",
		"ⲆᐃⵠⵠΔⲆⲆ": "img/day-hand-skin173.png",
		"ⵠᐃΔΔⵠⵠⵠ": "img/night-hand-skin173.png",
		"ΔΔⵠⲆΔᐃΔ": "img/day-hand-skin174.png",
		"ᐃᐃΔᐃⵠΔΔ": "img/night-hand-skin174.png",
		"ΔⲆΔⵠⲆⵠΔ": "img/day-hand-skin175.png",
		"ⵠΔᐃᐃⲆⵠⵠ": "img/night-hand-skin175.png",
		"ⲆⵠⵠⲆᐃⵠᐃ": "img/day-hand-skin176.png",
		"ⲆᐃΔΔⵠΔⲆ": "img/night-hand-skin176.png",
		"ⲆⵠⲆᐃⲆᐃᐃ": "img/day-hand-skin177.png",
		"ⲆᐃⵠᐃΔⲆⵠ": "img/night-hand-skin177.png",
		"ⵠΔⵠⵠᐃⵠΔ": "img/day-hand-skin178.png",
		"ᐃΔⲆⲆⲆⵠᐃ": "img/night-hand-skin178.png",
		"ⲆΔⵠᐃⲆⵠᐃ": "img/day-hand-skin179.png",
		"ᐃⵠⵠⲆᐃⲆᐃ": "img/night-hand-skin179.png",
		"ⵠⵠⲆᐃΔᐃⲆ": "img/day-hand-skin180.png",
		"ⵠⲆᐃᐃᐃⵠᐃ": "img/night-hand-skin180.png",
		"ⵠⲆⲆΔⵠⵠΔ": "img/day-hand-skin181.png",
		"ᐃΔⵠᐃΔΔΔ": "img/night-hand-skin181.png",
		"ⲆᐃᐃⵠΔⵠᐃ": "img/day-hand-skin182.png",
		"ᐃⵠΔⲆⵠᐃⲆ": "img/night-hand-skin182.png",
		"ⲆⵠᐃΔⵠⲆΔ": "img/day-hand-skin183.png",
		"ᐃᐃⵠⲆᐃⲆⲆ": "img/night-hand-skin183.png",
		"ⵠⲆᐃΔΔⲆⲆ": "img/day-hand-skin184.png",
		"ΔᐃᐃΔⵠΔⵠ": "img/night-hand-skin184.png",
		"ΔᐃⵠᐃᐃᐃΔ": "img/day-hand-skin185.png",
		"ᐃⵠΔΔΔᐃΔ": "img/night-hand-skin185.png",
		"ΔΔᐃΔᐃΔᐃ": "img/day-hand-skin186.png",
		"ᐃΔⲆⵠⲆⵠⲆ": "img/night-hand-skin186.png",
		"ΔΔⵠᐃᐃⲆᐃ": "img/day-hand-skin187.png",
		"ⵠᐃΔⵠⲆΔᐃ": "img/night-hand-skin187.png",
		"ⲆⲆⵠᐃᐃᐃᐃ": "img/day-hand-skin188.png",
		"ⵠΔᐃⲆᐃΔⵠ": "img/night-hand-skin188.png",
		"ᐃⲆΔΔΔΔᐃ": "img/day-hand-skin189.png",
		"ΔΔΔⵠΔⵠΔ": "img/night-hand-skin189.png",
		"ΔᐃᐃΔᐃΔΔ": "img/day-hand-skin190.png",
		"ᐃⲆⵠⲆⲆⲆᐃ": "img/night-hand-skin190.png",
		"ΔᐃⲆᐃⵠᐃᐃ": "img/day-hand-skin191.png",
		"ᐃΔᐃᐃⲆΔΔ": "img/night-hand-skin191.png",
		"ⵠⵠⲆⵠΔΔⲆ": "img/day-hand-skin192.png",
		"ᐃᐃᐃᐃⵠΔⲆ": "img/night-hand-skin192.png",
		"ⲆⲆⲆΔⵠⲆⲆ": "img/day-hand-skin193.png",
		"ⵠⵠⵠΔΔⲆΔ": "img/night-hand-skin193.png",
		"ⵠⵠⲆᐃⵠᐃⵠ": "img/day-hand-skin194.png",
		"ᐃⵠⲆΔΔᐃΔ": "img/night-hand-skin194.png",
		"ⲆΔⲆΔⵠⲆⲆ": "img/day-hand-skin195.png",
		"ᐃⲆΔⲆΔΔΔ": "img/night-hand-skin195.png",
		"ᐃⵠⲆⵠⵠᐃⲆ": "img/day-hand-skin196.png",
		"ΔⲆΔΔᐃΔΔ": "img/night-hand-skin196.png",
		"ⵠⲆᐃⵠᐃΔΔ": "img/day-hand-skin197.png",
		"ᐃⲆΔⵠⲆⲆΔ": "img/night-hand-skin197.png",
		"ᐃᐃⲆⵠⵠΔⲆ": "img/day-hand-skin198.png",
		"ΔΔⲆᐃⵠⲆⲆ": "img/night-hand-skin198.png",
		"ᐃΔᐃᐃΔⵠΔ": "img/day-hand-skin199.png",
		"ⵠΔⵠⵠⲆⲆⲆ": "img/night-hand-skin199.png",
		"ΔΔⲆⵠⵠΔΔ": "img/day-hand-skin200.png",
		"ΔΔⲆⵠⲆⵠᐃ": "img/night-hand-skin200.png",
		"ᐃᐃⲆΔᐃᐃⵠ": "img/day-hand-skin201.png",
		"ᐃⲆⲆⵠΔⵠⲆ": "img/night-hand-skin201.png",
		"ᐃΔⲆᐃᐃᐃⵠ": "img/day-hand-skin202.png",
		"ⲆΔⲆⵠᐃⵠⲆ": "img/night-hand-skin202.png",
		"ᐃⲆΔⲆᐃᐃΔ": "img/day-hand-skin203.png",
		"ΔⵠⲆᐃΔⵠΔ": "img/night-hand-skin203.png",
		"ᐃΔⵠΔⵠᐃⲆ": "img/day-hand-skin204.png",
		"ᐃⲆⲆⲆⵠΔⵠ": "img/night-hand-skin204.png",
		"ⲆⲆᐃΔΔⲆΔ": "img/day-hand-skin205.png",
		"ⵠⵠⵠᐃᐃⵠⲆ": "img/night-hand-skin205.png",
		"ⲆⲆΔΔⲆⲆⲆ": "img/day-hand-skin206.png",
		"ⲆΔᐃⲆⲆΔΔ": "img/night-hand-skin206.png",
		"ⲆᐃⵠΔᐃᐃΔ": "img/day-hand-skin207.png",
		"ᐃⲆΔⵠⵠᐃⵠ": "img/night-hand-skin207.png",
		"ΔΔⵠⲆⵠⵠⲆ": "img/day-hand-skin208.png",
		"ⲆᐃΔΔΔᐃⵠ": "img/night-hand-skin208.png",
		"ⲆⵠΔᐃᐃⲆᐃ": "img/day-hand-skin209.png",
		"ΔΔΔΔΔᐃᐃ": "img/night-hand-skin209.png",
		"ᐃⵠⵠΔΔⵠΔ": "img/day-hand-skin210.png",
		"ⲆⵠᐃⵠΔᐃᐃ": "img/night-hand-skin210.png",
		"ⵠᐃⲆΔⵠⲆⵠ": "img/day-hand-skin211.png",
		"ⵠΔⲆΔⲆⲆⵠ": "img/night-hand-skin211.png",
		"ⵠⵠᐃⲆⵠᐃⵠ": "img/day-hand-skin212.png",
		"ⲆᐃⲆⵠⵠⵠⲆ": "img/night-hand-skin212.png",
		"ⵠᐃⲆᐃΔⵠΔ": "img/day-hand-skin213.png",
		"ⲆⵠΔᐃⵠΔⲆ": "img/night-hand-skin213.png",
		"ⵠᐃⵠⵠⵠⲆᐃ": "img/day-hand-skin214.png",
		"ᐃⵠΔⵠⲆᐃᐃ": "img/night-hand-skin214.png",
		"ⲆΔⵠΔᐃΔΔ": "img/day-bag-star0.png",
		"ΔΔⵠⲆⵠΔΔ": "img/night-bag-star0.png",
		"ΔⲆⲆᐃΔᐃⲆ": "img/day-bag0.png",
		"ⲆⵠᐃΔⵠⵠᐃ": "img/night-bag0.png",
		"ΔᐃⵠᐃΔᐃΔ": "img/day-bag1.png",
		"ᐃⲆⵠⵠⵠᐃⵠ": "img/night-bag1.png",
		"ΔⵠⵠᐃΔⵠⵠ": "img/day-bag2.png",
		"ⵠⲆᐃΔᐃᐃⲆ": "img/night-bag2.png",
		"ⲆΔᐃⲆΔΔⵠ": "img/day-bag3.png",
		"ΔⲆⵠᐃᐃⵠΔ": "img/night-bag3.png",
		"ᐃΔΔᐃⲆΔΔ": "img/day-bag4.png",
		"ⵠΔᐃΔⵠⵠᐃ": "img/night-bag4.png",
		"ᐃⲆΔᐃⲆⵠⵠ": "img/day-bag5.png",
		"ᐃᐃⲆᐃΔᐃΔ": "img/night-bag5.png",
		"ᐃΔᐃⲆΔⲆⲆ": "img/day-bag6.png",
		"ᐃΔΔᐃᐃΔᐃ": "img/night-bag6.png",
		"ⲆⲆⵠⵠΔᐃᐃ": "img/day-bag7.png",
		"ᐃᐃᐃⵠΔᐃΔ": "img/night-bag7.png",
		"ΔⲆᐃⲆⲆΔΔ": "img/day-bag8.png",
		"ⲆⲆΔⲆⲆⵠⵠ": "img/night-bag8.png",
		"ⵠⲆⲆΔⲆⵠⵠ": "img/day-bag9.png",
		"ΔᐃⲆᐃΔΔΔ": "img/night-bag9.png",
		"ⵠᐃⵠⵠΔΔⲆ": "img/day-bag10.png",
		"ⵠᐃᐃⵠᐃⵠᐃ": "img/night-bag10.png",
		"ⵠΔⲆⵠᐃᐃΔ": "img/day-bag11.png",
		"ᐃᐃΔⵠⵠⵠᐃ": "img/night-bag11.png",
		"ᐃᐃⵠᐃᐃⵠⵠ": "img/day-bag13.png",
		"ΔⲆᐃⲆⵠⵠᐃ": "img/night-bag13.png",
		"ⲆΔⲆᐃΔΔⵠ": "img/day-bag14.png",
		"ᐃⵠᐃⲆⵠᐃⲆ": "img/night-bag14.png",
		"ᐃᐃᐃᐃⵠⲆⲆ": "img/day-bag16.png",
		"ⲆⵠᐃⲆⲆⵠᐃ": "img/night-bag16.png",
		"ᐃΔΔᐃⵠΔⵠ": "img/day-bag17.png",
		"ᐃᐃᐃⲆΔⵠⲆ": "img/night-bag17.png",
		"ⵠΔΔΔΔⲆⵠ": "img/day-bag18.png",
		"ⵠⲆΔⵠᐃΔⲆ": "img/night-bag18.png",
		"ⵠᐃⵠΔⵠΔⲆ": "img/day-bag19.png",
		"ⵠΔⵠⲆᐃΔᐃ": "img/night-bag19.png",
		"ⵠΔΔⲆᐃᐃᐃ": "img/day-bag20.png",
		"ⲆΔᐃᐃⲆⲆⲆ": "img/night-bag20.png",
		"ⵠΔⵠᐃᐃΔⵠ": "img/day-bag21.png",
		"ᐃⲆⲆΔΔᐃᐃ": "img/night-bag21.png",
		"ⵠΔΔᐃⲆᐃⵠ": "img/day-bag22.png",
		"ΔⲆΔΔᐃⲆⲆ": "img/night-bag22.png",
		"ΔⵠⲆⲆⲆΔⵠ": "img/day-bag23.png",
		"ᐃⵠⵠΔⲆⵠⵠ": "img/night-bag23.png",
		"ΔⵠΔᐃΔᐃΔ": "img/day-bag24.png",
		"ᐃΔᐃⲆΔΔΔ": "img/night-bag24.png",
		"ΔⵠⵠⵠΔᐃⵠ": "img/day-bag25.png",
		"ΔⲆᐃᐃΔΔᐃ": "img/night-bag25.png",
		"ᐃΔᐃᐃⲆⲆⲆ": "img/day-bag26.png",
		"Ⲇⵠᐃᐃⵠᐃᐃ": "img/night-bag26.png",
		"ΔΔᐃΔᐃΔⲆ": "img/day-bag27.png",
		"ⵠΔΔⵠΔⵠᐃ": "img/night-bag27.png",
		"ΔⵠⵠⲆᐃⵠⵠ": "img/day-bag28.png",
		"ΔⲆᐃⲆΔⵠᐃ": "img/night-bag28.png",
		"ⵠΔᐃⲆᐃᐃΔ": "img/day-bag29.png",
		"ᐃⵠᐃΔΔⵠⲆ": "img/night-bag29.png",
		"ΔⲆΔⲆⲆⵠᐃ": "img/day-bag30.png",
		"ⲆⲆᐃⵠΔΔᐃ": "img/night-bag30.png",
		"ⲆⲆⲆΔⵠᐃΔ": "img/day-bag31.png",
		"ΔᐃᐃⵠΔⵠᐃ": "img/night-bag31.png",
		"ⲆᐃᐃⲆⲆⵠΔ": "img/day-bag32.png",
		"ⵠᐃᐃⲆΔⲆΔ": "img/night-bag32.png",
		"ᐃⵠΔΔⵠΔΔ": "img/day-bag33.png",
		"ΔⲆΔⲆⲆᐃᐃ": "img/night-bag33.png",
		"ⵠⵠΔᐃⲆⵠⵠ": "img/day-bag34.png",
		"ᐃⵠⲆⲆᐃᐃᐃ": "img/night-bag34.png",
		"Ⲇⵠᐃⵠᐃᐃⵠ": "img/day-bag35.png",
		"ⲆⵠⲆⵠⵠᐃⵠ": "img/night-bag35.png",
		"ⲆⲆΔΔᐃⵠⵠ": "img/day-bag36.png",
		"ΔⵠΔᐃⵠᐃⲆ": "img/night-bag36.png",
		"ᐃΔᐃⵠⲆᐃⲆ": "img/day-bag37.png",
		"ᐃΔΔⵠᐃⲆΔ": "img/night-bag37.png",
		"ᐃΔΔⵠⲆΔΔ": "img/day-bag38.png",
		"ΔΔⵠⲆⲆΔΔ": "img/night-bag38.png",
		"ᐃᐃΔᐃᐃᐃⵠ": "img/day-bag39.png",
		"ΔΔⵠΔΔᐃⵠ": "img/night-bag39.png",
		"ᐃΔⵠΔΔⲆᐃ": "img/day-bag40.png",
		"ⲆΔⵠⵠⲆⵠΔ": "img/night-bag40.png",
		"ⵠⲆⲆΔᐃⵠᐃ": "img/day-bag41.png",
		"ΔⲆⵠᐃⵠΔΔ": "img/night-bag41.png",
		"ᐃⲆⲆⲆΔᐃᐃ": "img/day-bag42.png",
		"ⵠⵠⵠᐃᐃⲆⲆ": "img/night-bag42.png",
		"ⵠⲆᐃΔⵠⵠᐃ": "img/day-bag43.png",
		"ⲆᐃᐃΔᐃⲆᐃ": "img/night-bag43.png",
		"ᐃᐃᐃⲆⵠⲆⲆ": "img/day-bag44.png",
		"ⲆⲆΔⲆⲆⵠᐃ": "img/night-bag44.png",
		"ᐃᐃⵠⲆⵠΔΔ": "img/day-bag45.png",
		"ⲆⵠⲆⵠⲆⲆⵠ": "img/night-bag45.png",
		"ᐃᐃⵠⲆΔᐃⲆ": "img/day-bag46.png",
		"ᐃᐃⲆᐃΔᐃⵠ": "img/night-bag46.png",
		"ⲆᐃⲆᐃᐃᐃⲆ": "img/day-bag47.png",
		"ⲆΔᐃⵠᐃΔᐃ": "img/night-bag47.png",
		"ΔⵠΔΔᐃᐃᐃ": "img/day-bag48.png",
		"ⲆⵠⲆΔΔΔᐃ": "img/night-bag48.png",
		"ᐃΔⵠᐃⵠΔΔ": "img/day-bag49.png",
		"ᐃΔⲆΔⵠⵠΔ": "img/night-bag49.png",
		"ΔⵠΔⲆⵠⲆᐃ": "img/day-bag50.png",
		"ⲆΔⲆⵠⲆⵠⲆ": "img/night-bag50.png",
		"ⲆᐃᐃⲆⲆᐃΔ": "img/day-bag51.png",
		"ⵠΔᐃⲆⲆᐃⵠ": "img/night-bag51.png",
		"ᐃⲆⲆΔⵠΔΔ": "img/day-bag52.png",
		"ⲆⲆᐃⵠΔⲆᐃ": "img/night-bag52.png",
		"ᐃΔᐃᐃᐃⵠⵠ": "img/day-bag53.png",
		"ⲆⲆᐃΔΔⵠⲆ": "img/night-bag53.png",
		"ᐃⲆⲆΔΔⲆⲆ": "img/day-bag54.png",
		"ᐃᐃΔⵠⲆⵠᐃ": "img/night-bag54.png",
		"ΔⵠⲆⵠⲆᐃΔ": "img/day-bag55.png",
		"ⲆⵠⵠⲆⲆⵠΔ": "img/night-bag55.png",
		"ᐃᐃⲆⲆⲆⲆⵠ": "img/day-bag56.png",
		"ⵠⵠΔⲆΔⲆᐃ": "img/night-bag56.png",
		"ᐃⵠⵠᐃᐃⲆᐃ": "img/day-bag57.png",
		"ⵠⲆᐃⵠΔⲆⲆ": "img/night-bag57.png",
		"ᐃⵠⲆⲆΔⲆΔ": "img/day-bag58.png",
		"ⲆⲆⵠΔⵠΔΔ": "img/night-bag58.png",
		"ⵠΔΔⵠᐃⲆⵠ": "img/day-bag59.png",
		"ⵠΔⲆⲆⵠᐃΔ": "img/night-bag59.png",
		"ⵠΔⵠΔᐃᐃⵠ": "img/day-bag60.png",
		"ⲆΔⲆⲆⲆⵠⵠ": "img/night-bag60.png",
		"ΔⲆⵠᐃⲆⲆᐃ": "img/day-bag61.png",
		"ΔΔⲆⵠᐃΔⲆ": "img/night-bag61.png",
		"ΔⵠᐃΔΔⵠΔ": "img/day-bag62.png",
		"ΔΔΔⲆΔⲆⲆ": "img/night-bag62.png",
		"ⵠΔⲆⲆΔᐃΔ": "img/day-bag63.png",
		"ⵠⲆⵠⵠΔᐃᐃ": "img/night-bag63.png",
		"ⲆᐃⵠΔᐃⵠᐃ": "img/day-bag64.png",
		"ᐃᐃⵠⲆΔⵠᐃ": "img/night-bag64.png",
		"ΔᐃᐃⵠⲆⲆⲆ": "img/day-bag65.png",
		"ⵠⵠⵠⵠⵠⲆⵠ": "img/night-bag65.png",
		"ⵠΔᐃⲆᐃⵠⵠ": "img/day-bag66.png",
		"ΔΔⲆⲆⲆΔⲆ": "img/night-bag66.png",
		"ⵠⵠⲆΔΔᐃΔ": "img/day-bag67.png",
		"ᐃΔΔΔⵠΔᐃ": "img/night-bag67.png",
		"ⲆⲆⲆⵠⵠⵠᐃ": "img/day-bag68.png",
		"ΔᐃᐃⲆⲆᐃⲆ": "img/night-bag68.png",
		"ⵠⲆΔΔⵠᐃⲆ": "img/day-bag69.png",
		"ᐃᐃᐃΔΔᐃⲆ": "img/night-bag69.png",
		"ⲆΔΔⲆⲆⲆΔ": "img/day-bag70.png",
		"ᐃᐃⵠᐃΔⲆΔ": "img/night-bag70.png",
		"ΔΔⲆᐃᐃΔΔ": "img/day-bag71.png",
		"ᐃⵠⲆΔⵠΔⲆ": "img/night-bag71.png",
		"ΔⲆⲆΔΔᐃᐃ": "img/day-bag72.png",
		"ΔⵠⵠⲆⲆⵠΔ": "img/night-bag72.png",
		"ⲆⵠΔⲆⲆⵠΔ": "img/day-bag73.png",
		"ⲆⵠⲆΔⵠᐃⲆ": "img/night-bag73.png",
		"ⵠΔΔⲆΔᐃᐃ": "img/day-bag74.png",
		"ⲆⵠⵠⵠⲆᐃⲆ": "img/night-bag74.png",
		"ᐃⲆΔΔⲆΔⲆ": "img/day-bag75.png",
		"ᐃᐃᐃⵠⵠΔΔ": "img/night-bag75.png",
		"ⵠⲆΔΔᐃᐃΔ": "img/day-bag76.png",
		"ⲆΔᐃⲆᐃⵠⲆ": "img/night-bag76.png",
		"ΔΔⵠⵠⲆᐃⲆ": "img/day-bag77.png",
		"ᐃⲆᐃΔᐃⲆⵠ": "img/night-bag77.png",
		"ΔΔΔᐃΔⵠⵠ": "img/day-bag78.png",
		"ᐃⲆΔⵠΔᐃⵠ": "img/night-bag78.png",
		"ᐃᐃᐃΔⲆᐃᐃ": "img/day-bag79.png",
		"ΔΔⲆⲆⵠⲆΔ": "img/night-bag79.png",
		"ΔᐃΔΔΔΔᐃ": "img/day-bag80.png",
		"ⲆⵠΔΔⲆᐃᐃ": "img/night-bag80.png",
		"ΔᐃⲆⲆⵠⲆⲆ": "img/day-accessory0.png",
		"ⵠᐃⲆⲆΔⵠᐃ": "img/day-accessory0-pacques.png",
		"ⵠΔⲆΔΔᐃⵠ": "img/night-accessory0-pacques.png",
		"ⵠⲆⵠⲆⵠΔⵠ": "img/day-accessory13.png",
		"ⲆⲆⲆΔⲆⲆΔ": "img/night-accessory13.png",
		"ᐃΔᐃᐃⵠⵠⵠ": "img/day-accessory14.png",
		"ⲆⵠⵠⲆⲆΔᐃ": "img/night-accessory14.png",
		"ⲆᐃᐃΔⲆⲆⵠ": "img/day-accessory15.png",
		"ΔⲆⵠⵠⲆΔΔ": "img/night-accessory15.png",
		"ᐃⵠᐃⲆⲆⲆⲆ": "img/day-accessory16.png",
		"ΔⵠᐃⲆᐃⵠᐃ": "img/night-accessory16.png",
		"ⵠᐃᐃᐃⲆᐃΔ": "img/day-accessory17.png",
		"ΔᐃΔⲆᐃᐃⵠ": "img/day-accessory17.png",
		"ΔⵠⵠΔⲆⵠΔ": "img/day-accessory19.png",
		"ΔⲆⲆΔⲆⵠⲆ": "img/night-accessory19.png",
		"ⵠⲆⲆᐃᐃⵠⲆ": "img/day-accessory20.png",
		"ᐃⵠΔΔᐃΔᐃ": "img/night-accessory20.png",
		"ⵠⲆᐃΔⵠⵠⵠ": "img/day-accessory21.png",
		"ⲆⲆΔⵠᐃⲆΔ": "img/night-accessory21.png",
		"ⲆᐃΔⲆΔⵠⵠ": "img/day-accessory22.png",
		"ⵠᐃⵠⲆⵠⲆⲆ": "img/night-accessory22.png",
		"ⲆⲆⵠᐃᐃⵠⲆ": "img/day-accessory23.png",
		"ⲆⲆΔΔᐃᐃΔ": "img/night-accessory23.png",
		"ᐃⵠⲆΔᐃᐃᐃ": "img/day-accessory24.png",
		"ΔᐃΔⵠⵠⲆΔ": "img/night-accessory24.png",
		"ΔⲆᐃⵠⵠΔⲆ": "img/day-accessory25.png",
		"ⲆⵠⵠΔΔΔΔ": "img/night-accessory25.png",
		"ΔΔⲆⵠⵠⵠᐃ": "img/day-accessory26.png",
		"ΔⵠΔⲆⵠΔΔ": "img/night-accessory26.png",
		"ⲆΔᐃⲆΔⵠΔ": "img/day-accessory27.png",
		"ⵠᐃΔᐃⵠᐃΔ": "img/night-accessory27.png",
		"ⵠΔΔᐃᐃΔΔ": "img/day-accessory18.png",
		"ΔΔΔᐃⲆⲆᐃ": "img/night-accessory18.png",
		"ⲆᐃᐃⵠⵠΔⲆ": "img/day-accessory29.png",
		"ⵠᐃⲆⲆⲆᐃⲆ": "img/night-accessory29.png",
		"ᐃⲆᐃⲆⲆΔⵠ": "img/day-accessory30.png",
		"ⵠΔᐃᐃⲆⵠⲆ": "img/night-accessory30.png",
		"ⲆⲆⵠⲆⵠⲆΔ": "img/day-accessory31.png",
		"ᐃⵠᐃⵠⲆᐃⵠ": "img/night-accessory31.png",
		"ⲆΔⲆᐃᐃⲆᐃ": "img/day-accessory32.png",
		"ⲆⲆⵠᐃΔⵠΔ": "img/night-accessory32.png",
		"ⵠᐃᐃⲆⲆᐃΔ": "img/day-accessory33.png",
		"ΔᐃⵠⲆΔⲆΔ": "img/night-accessory33.png",
		"ᐃⵠΔⲆᐃᐃⵠ": "img/day-accessory34.png",
		"ᐃΔⲆⲆⲆⲆΔ": "img/night-accessory34.png",
		"ΔⵠⵠᐃⲆⵠᐃ": "img/day-accessory35.png",
		"ⲆⵠΔⵠᐃΔᐃ": "img/night-accessory35.png",
		"ⲆⲆⲆΔᐃΔᐃ": "img/day-accessory28.png",
		"ΔᐃᐃⲆⲆΔⵠ": "img/night-accessory28.png",
		"Ⲇᐃᐃⵠⵠᐃⵠ": "img/day-accessory36.png",
		"ⵠΔΔΔⲆⲆΔ": "img/night-accessory36.png",
		"ⵠⲆⲆᐃⲆΔⲆ": "img/day-accessory37.png",
		"ᐃⲆⲆᐃⵠΔⲆ": "img/night-accessory37.png",
		"ΔᐃⵠΔⵠⲆᐃ": "img/day-accessory39.png",
		"ⲆᐃᐃΔⲆᐃᐃ": "img/night-accessory39.png",
		"ⲆΔⵠⵠΔᐃᐃ": "img/day-accessory40.png",
		"ⲆᐃⵠᐃᐃΔΔ": "img/night-accessory40.png",
		"ᐃΔΔᐃΔᐃΔ": "img/day-accessory41.png",
		"ⵠⵠᐃᐃⵠΔΔ": "img/night-accessory41.png",
		"ⵠᐃⲆⵠᐃⲆⵠ": "img/day-accessory42.png",
		"ᐃⲆⲆᐃⲆⲆΔ": "img/night-accessory42.png",
		"ΔⵠᐃᐃⲆᐃᐃ": "img/day-accessory43.png",
		"ⲆᐃⵠΔⲆΔΔ": "img/night-accessory43.png",
		"ⲆᐃⲆΔΔΔⲆ": "img/day-accessory44.png",
		"ᐃⵠΔⵠⵠⵠΔ": "img/night-accessory44.png",
		"ΔⵠⵠⲆΔΔΔ": "img/day-accessory38.png",
		"ΔᐃⲆⲆⲆⵠΔ": "img/night-accessory38.png",
		"ⲆΔΔⵠⲆᐃᐃ": "img/day-accessory46.png",
		"ⲆⲆᐃⵠΔᐃⵠ": "img/night-accessory46.png",
		"ΔΔΔᐃⵠⲆΔ": "img/day-accessory47.png",
		"ΔⲆᐃΔΔⵠⲆ": "img/night-accessory47.png",
		"ⲆΔᐃⵠⵠⵠᐃ": "img/day-accessory48.png",
		"ᐃᐃⵠᐃⲆⲆΔ": "img/night-accessory48.png",
		"ΔⵠᐃⵠΔᐃᐃ": "img/day-accessory49.png",
		"ΔⲆⵠΔΔᐃΔ": "img/night-accessory49.png",
		"ᐃΔΔΔΔᐃΔ": "img/day-accessory45.png",
		"ⲆⵠΔⵠΔⲆᐃ": "img/night-accessory45.png",
		"ΔΔⵠΔⵠᐃᐃ": "img/day-accessory50.png",
		"ᐃᐃⲆⵠⵠⵠⵠ": "img/night-accessory50.png",
		"ᐃᐃΔΔΔⲆᐃ": "img/day-accessory51.png",
		"ᐃⵠⵠⲆΔⲆⲆ": "img/night-accessory51.png",
		"ⲆΔᐃⵠⵠⲆΔ": "img/day-accessory52.png",
		"ᐃⲆΔΔⵠᐃᐃ": "img/night-accessory52.png",
		"ΔΔΔⲆⲆⵠⲆ": "img/day-accessory53.png",
		"ⲆⵠᐃⵠⲆⲆᐃ": "img/night-accessory53.png",
		"ᐃΔⵠⲆΔΔⲆ": "img/day-accessory54.png",
		"ᐃΔᐃⲆⲆΔΔ": "img/night-accessory54.png",
		"ΔΔΔᐃΔΔⵠ": "img/day-accessory55.png",
		"ⵠΔᐃⲆᐃⵠⲆ": "img/night-accessory55.png",
		"ⵠΔⵠᐃΔⵠᐃ": "img/day-accessory56.png",
		"ΔⲆⲆᐃⵠΔⵠ": "img/night-accessory56.png",
		"ᐃΔⲆΔᐃⵠᐃ": "img/day-accessory57.png",
		"ⵠⵠΔᐃΔΔⵠ": "img/night-accessory57.png",
		"ⲆⲆΔΔΔⵠⲆ": "img/day-accessory58.png",
		"ᐃᐃᐃΔᐃⲆᐃ": "img/night-accessory58.png",
		"ΔΔΔᐃΔⵠΔ": "img/day-accessory59.png",
		"ᐃᐃⲆⵠΔΔΔ": "img/night-accessory59.png",
		"ⵠᐃᐃⵠΔΔΔ": "img/day-accessory60.png",
		"ⵠⲆⵠⵠᐃΔⵠ": "img/night-accessory60.png",
		"ⲆⵠⲆⵠΔΔⵠ": "img/day-accessory61.png",
		"ⵠⵠΔᐃⵠⲆⵠ": "img/night-accessory61.png",
		"ⲆᐃᐃᐃⲆⲆⲆ": "img/day-accessory62.png",
		"ⵠⵠⵠⲆᐃᐃᐃ": "img/night-accessory62.png",
		"ᐃᐃⵠΔⵠⲆⵠ": "img/day-accessory63.png",
		"ᐃⲆⵠᐃᐃⲆᐃ": "img/night-accessory63.png",
		"ⵠᐃΔΔᐃⲆⵠ": "img/day-accessory64.png",
		"ⲆⲆᐃᐃᐃᐃᐃ": "img/night-accessory64.png",
		"ⲆᐃⲆⵠᐃⵠⵠ": "img/day-accessory65.png",
		"ᐃᐃᐃⵠⲆΔⵠ": "img/night-accessory65.png",
		"ⵠΔΔⲆᐃⵠⵠ": "img/day-accessory66.png",
		"ΔⵠⵠᐃΔⲆΔ": "img/night-accessory66.png",
		"ⵠⵠΔⵠⵠᐃᐃ": "img/day-accessory67.png",
		"ⲆᐃⵠⵠΔⵠΔ": "img/night-accessory67.png",
		"ΔⵠΔⲆⲆΔⲆ": "img/day-accessory68.png",
		"ⵠΔⲆⲆᐃⵠᐃ": "img/night-accessory68.png",
		"ⲆᐃᐃⵠⵠᐃⲆ": "img/day-accessory69.png",
		"ᐃΔᐃⲆᐃΔⵠ": "img/night-accessory69.png",
		"ΔⵠⲆΔⲆΔⲆ": "img/day-accessory70.png",
		"ⵠⵠⲆⲆⵠΔΔ": "img/night-accessory70.png",
		"ΔⲆⲆᐃⲆⲆⲆ": "img/day-accessory71.png",
		"ᐃᐃⲆᐃⵠⵠⵠ": "img/night-accessory71.png",
		"ⵠΔⲆᐃⵠⲆᐃ": "img/day-accessory72.png",
		"ᐃⵠⵠⵠᐃᐃΔ": "img/night-accessory72.png",
		"ᐃⲆⲆᐃᐃⵠΔ": "img/day-accessory73.png",
		"ᐃᐃᐃΔΔΔΔ": "img/night-accessory73.png",
		"ⲆⲆᐃΔᐃᐃⵠ": "img/day-accessory74.png",
		"ⵠᐃᐃᐃⲆᐃⲆ": "img/night-accessory74.png",
		"ⲆⵠⵠⵠⲆⲆⲆ": "img/day-accessory75.png",
		"ⵠΔΔⵠΔᐃⵠ": "img/night-accessory75.png",
		"ⵠᐃΔⲆⵠΔⵠ": "img/day-accessory76.png",
		"ⵠⲆⲆᐃⲆᐃΔ": "img/night-accessory76.png",
		"ⵠΔⲆᐃⲆⲆⲆ": "img/day-accessory77.png",
		"ᐃᐃⲆᐃⵠⲆᐃ": "img/night-accessory77.png",
		"ᐃⵠⵠΔⵠΔⵠ": "img/day-accessory78.png",
		"ᐃⵠⲆᐃΔΔΔ": "img/night-accessory78.png",
		"ΔᐃⵠⵠᐃΔᐃ": "img/day-accessory79.png",
		"ᐃᐃⵠⲆᐃⵠⲆ": "img/night-accessory79.png",
		"ᐃⵠΔΔⵠⵠⵠ": "img/day-accessory80.png",
		"ⲆᐃⵠᐃⲆᐃᐃ": "img/night-accessory80.png",
		"ⲆⲆⲆⲆΔᐃⲆ": "img/day-accessory81.png",
		"ⲆⵠΔΔⵠᐃᐃ": "img/night-accessory81.png",
		"ⵠⲆⲆΔⲆᐃⲆ": "img/day-accessory83.png",
		"ⵠᐃᐃΔΔᐃΔ": "img/night-accessory83.png",
		"ⵠΔᐃⵠⲆᐃᐃ": "img/day-accessory84.png",
		"ⵠⲆⵠΔΔⲆΔ": "img/night-accessory84.png",
		"ⵠᐃΔⲆⲆΔⵠ": "img/day-accessory85.png",
		"ᐃⵠΔᐃΔΔⵠ": "img/night-accessory85.png",
		"ΔⵠⲆΔⵠΔⲆ": "img/day-accessory86.png",
		"ⲆⲆᐃᐃΔⲆᐃ": "img/night-accessory86.png",
		"ΔΔΔⵠⲆⲆⲆ": "img/day-accessory87.png",
		"ᐃⲆΔᐃⵠⲆⵠ": "img/night-accessory87.png",
		"ⲆⵠᐃⲆⵠⲆΔ": "img/day-accessory88.png",
		"ᐃᐃΔⲆⵠⵠⵠ": "img/night-accessory88.png",
		"ᐃⲆᐃΔⵠᐃⵠ": "img/day-accessory89.png",
		"ⲆΔⵠΔⲆⲆΔ": "img/night-accessory89.png",
		"ⵠⵠᐃⲆΔᐃΔ": "img/day-accessory90.png",
		"ᐃⵠⲆΔⲆΔⲆ": "img/night-accessory90.png",
		"ᐃᐃⲆᐃⲆⵠⵠ": "img/day-accessory91.png",
		"ᐃⲆΔΔΔΔΔ": "img/night-accessory91.png",
		"ΔΔΔᐃⲆΔⵠ": "img/day-accessory92.png",
		"ᐃⲆΔᐃᐃᐃⵠ": "img/night-accessory92.png",
		"ⵠΔΔᐃⵠΔᐃ": "img/day-accessory93.png",
		"ΔⵠⲆⵠΔⲆⲆ": "img/night-accessory93.png",
		"ⵠⵠⵠΔΔΔⲆ": "img/day-accessory94.png",
		"ᐃᐃΔⲆⲆᐃⵠ": "img/night-accessory94.png",
		"ᐃⲆΔΔⲆⲆΔ": "img/day-accessory95.png",
		"ⲆᐃΔⵠⵠΔᐃ": "img/night-accessory95.png",
		"ⵠⲆᐃΔΔⲆⵠ": "img/day-accessory96.png",
		"ⲆΔⵠⵠⵠΔⵠ": "img/night-accessory96.png",
		"ᐃⲆⲆⵠΔᐃⲆ": "img/day-accessory97.png",
		"ᐃᐃⵠΔᐃⲆᐃ": "img/night-accessory97.png",
		"ⲆᐃΔⲆΔΔΔ": "img/day-accessory98.png",
		"ᐃⵠⲆᐃⵠᐃᐃ": "img/night-accessory98.png",
		"ⲆΔΔⲆᐃⲆΔ": "img/day-accessory99.png",
		"ⲆⵠⲆΔⲆᐃᐃ": "img/night-accessory99.png",
		"ΔᐃᐃⵠΔΔⲆ": "img/day-accessory100.png",
		"ⵠⵠΔᐃᐃΔⵠ": "img/night-accessory100.png",
		"ⵠᐃⲆⵠᐃⵠᐃ": "img/day-accessory101.png",
		"ᐃᐃΔΔⵠⲆⲆ": "img/night-accessory101.png",
		"ΔⲆⲆⲆΔΔⵠ": "img/day-accessory102.png",
		"ⵠᐃᐃⵠΔⲆⵠ": "img/night-accessory102.png",
		"ⲆⲆΔⲆⲆⲆΔ": "img/day-accessory103.png",
		"ⲆΔⵠᐃⲆⵠⲆ": "img/night-accessory103.png",
		"ⲆⲆⵠΔᐃⵠᐃ": "img/day-accessory104.png",
		"ⲆⲆⵠᐃⲆΔⵠ": "img/night-accessory104.png",
		"ⵠᐃⲆⵠᐃᐃΔ": "img/day-accessory105.png",
		"ⲆⵠⵠⵠΔⲆΔ": "img/night-accessory105.png",
		"ⵠⵠᐃⲆΔᐃⵠⲆᐃ": "img/day-accessory106.png",
		"ⲆⵠᐃⵠᐃⲆᐃⵠᐃ": "img/night-accessory106.png",
		"ΔⲆⲆᐃΔⲆΔΔᐃ": "img/day-accessory107.png",
		"ᐃᐃⲆⲆᐃΔⲆᐃᐃ": "img/night-accessory107.png",
		"ΔᐃⵠⵠᐃⲆⵠ": "img/day-accessory82.png",
		"ΔΔⲆᐃΔᐃΔ": "img/night-accessory82.png",
		"ᐃΔᐃᐃᐃΔΔ": "img/day-book0.png",
		"ⲆΔⲆⵠⲆⲆⵠ": "img/night-book0.png",
		"ΔᐃΔᐃⵠΔΔ": "img/day-book1.png",
		"ᐃΔⲆᐃΔⵠΔ": "img/night-book1.png",
		"ᐃⵠᐃᐃⵠΔⲆ": "img/day-book2.png",
		"ᐃⵠⵠⲆΔΔⵠ": "img/night-book2.png",
		"ᐃᐃᐃⲆⲆⵠᐃ": "img/day-book3.png",
		"ⲆⵠⲆᐃΔᐃᐃ": "img/night-book3.png",
		"ⲆΔⵠΔᐃᐃⵠ": "img/day-book4.png",
		"ⵠⵠᐃⲆⵠΔᐃ": "img/night-book4.png",
		"ΔⵠⵠᐃΔⲆⲆ": "img/day-book5.png",
		"ΔⵠΔⵠⲆΔΔ": "img/night-book5.png",
		"ᐃᐃⵠΔΔⵠⵠ": "img/day-book6.png",
		"ΔΔⲆΔⲆᐃⵠ": "img/night-book6.png",
		"ᐃΔⵠᐃⵠⵠⵠ": "img/day-book7.png",
		"ⵠᐃᐃⲆΔⵠᐃ": "img/night-book7.png",
		"ᐃΔⲆᐃⵠⵠⲆ": "img/day-book8.png",
		"ⵠⵠᐃΔⵠⵠⲆ": "img/night-book8.png",
		"ΔᐃⲆΔᐃΔᐃ": "img/day-book9.png",
		"Ⲇⵠᐃⵠⵠᐃⵠ": "img/night-book9.png",
		"ⵠⲆΔᐃⵠΔⵠ": "img/day-book10.png",
		"ΔⲆⲆΔΔⵠⲆ": "img/night-book10.png",
		"ⲆΔⵠᐃⵠΔΔ": "img/day-book11.png",
		"ΔⵠΔΔᐃΔⵠ": "img/night-book11.png",
		"ⲆⲆⲆⵠⵠⵠⲆ": "img/day-book12.png",
		"ᐃΔⲆᐃⵠⲆⵠ": "img/night-book12.png",
		"ᐃⲆⲆΔⵠⵠⲆ": "img/day-book13.png",
		"ⲆᐃⵠⵠⲆΔᐃ": "img/night-book13.png",
		"ᐃⲆΔⲆᐃⵠΔ": "img/day-book14.png",
		"ΔΔⲆᐃΔΔᐃ": "img/night-book14.png",
		"ⲆⵠⲆⵠⵠⵠΔ": "img/day-book15.png",
		"ᐃⲆᐃᐃᐃᐃΔ": "img/night-book15.png",
		"ΔΔⲆⲆⲆᐃᐃ": "img/day-book16.png",
		"ΔⵠⲆΔᐃⵠΔ": "img/night-book16.png",
		"ⵠΔΔᐃᐃΔⲆ": "img/day-book17.png",
		"ⲆⲆΔΔΔⵠᐃ": "img/night-book17.png",
		"ⲆⵠᐃΔᐃΔⵠ": "img/day-book18.png",
		"ᐃΔⲆΔⵠΔΔ": "img/night-book18.png",
		"ⲆΔᐃᐃⲆⵠⵠ": "img/day-book19.png",
		"ⲆⲆΔⲆⲆΔⵠ": "img/night-book19.png",
		"ᐃΔⲆΔᐃΔᐃ": "img/day-book20.png",
		"ᐃᐃΔΔⵠⲆΔ": "img/night-book20.png",
		"ᐃΔⵠⲆᐃᐃⵠ": "img/day-book21.png",
		"ⵠΔΔΔΔᐃⵠ": "img/night-book21.png",
		"ᐃΔⲆΔΔΔⵠ": "img/day-book22.png",
		"ᐃⵠⵠⵠΔΔⵠ": "img/night-book22.png",
		"ᐃⲆⵠᐃⲆⵠⵠ": "img/day-book23.png",
		"ᐃᐃΔΔⵠⵠⵠ": "img/night-book23.png",
		"ΔⵠⲆᐃⵠᐃⲆ": "img/day-book24.png",
		"ⵠⲆⲆⵠⲆΔⲆ": "img/night-book24.png",
		"ΔⵠᐃᐃᐃⲆᐃ": "img/day-book25.png",
		"ᐃⵠⲆᐃᐃⵠΔ": "img/night-book25.png",
		"ᐃⵠⲆᐃΔΔⲆ": "img/day-book26.png",
		"ⲆᐃΔᐃΔⲆᐃ": "img/night-book26.png",
		"ᐃΔⵠΔⵠⲆⲆ": "img/day-book27.png",
		"ⲆᐃᐃΔⲆΔⵠ": "img/night-book27.png",
		"ⵠⲆⲆⲆΔΔᐃ": "img/day-book28.png",
		"ΔΔᐃⵠΔΔΔ": "img/night-book28.png",
		"ⵠⵠⵠⵠⵠⲆΔ": "img/day-book29.png",
		"ⵠᐃᐃΔⲆⵠⲆ": "img/night-book29.png",
		"ⵠⲆᐃⵠΔⵠᐃ": "img/day-book30.png",
		"ⵠᐃΔⵠⵠⵠⲆ": "img/night-book30.png",
		"ΔᐃᐃⲆΔᐃᐃ": "img/day-book31.png",
		"ᐃΔⲆⵠᐃᐃⲆ": "img/night-book31.png",
		"ⵠⵠΔⲆᐃᐃᐃ": "img/day-book32.png",
		"ⵠᐃⵠᐃⲆᐃΔ": "img/night-book32.png",
		"ⲆᐃᐃⲆⲆΔⵠ": "img/day-book33.png",
		"ⵠⲆΔᐃΔⵠⵠ": "img/night-book33.png",
		"ΔᐃΔⲆⵠᐃᐃ": "img/day-book34.png",
		"ᐃⲆᐃΔΔⵠⵠ": "img/night-book34.png",
		"ᐃⵠⵠΔΔⵠⲆ": "img/day-book35.png",
		"ΔΔⵠΔⲆⲆᐃ": "img/night-book35.png",
		"ΔⵠᐃⲆΔⲆⲆ": "img/day-book36.png",
		"ᐃⵠᐃᐃΔΔᐃ": "img/night-book36.png",
		"ΔⲆⵠᐃᐃᐃᐃⵠΔ": "img/day-book37.png",
		"ⵠⲆⲆⲆⲆΔⲆⲆᐃ": "img/night-book37.png",
		"ⵠⲆⵠⵠⲆⲆΔ": "img/day-book38.png",
		"ⵠⵠⲆⲆⲆΔᐃ": "img/night-book38.png",
		"ᐃⲆⵠΔΔᐃΔ": "img/day-book39.png",
		"ⵠⲆⲆⲆⵠᐃⲆ": "img/night-book39.png",
		"ΔᐃΔᐃⵠΔᐃ": "img/day-book40.png",
		"ᐃⲆⵠᐃΔⵠᐃ": "img/night-book40.png",
		"ΔᐃΔⵠⲆⵠΔ": "img/day-book41.png",
		"ⲆⵠⲆᐃΔⲆⵠ": "img/night-book41.png",
		"ΔΔᐃΔⲆᐃⵠ": "img/day-book42.png",
		"ΔⵠⵠᐃᐃⵠⲆ": "img/night-book42.png",
		"ⲆⵠⲆⵠΔΔⲆ": "img/day-book43.png",
		"ᐃⵠⵠⵠⵠΔⵠ": "img/night-book43.png",
		"ⲆⵠⵠΔⲆⵠΔ": "img/day-book44.png",
		"ⲆⲆΔⵠⵠΔⵠ": "img/night-book44.png",
		"ⵠⵠⲆΔⵠΔΔ": "img/day-book45.png",
		"ΔΔᐃⲆⲆⲆⵠ": "img/night-book45.png",
		"ΔⲆⲆⵠᐃⵠΔ": "img/day-book46.png",
		"ⲆΔᐃΔΔⲆΔ": "img/night-book46.png",
		"ⵠⲆᐃᐃᐃᐃⲆ": "img/day-book47.png",
		"ᐃⵠⲆᐃᐃⵠᐃ": "img/night-book47.png",
		"ⵠΔᐃⵠΔΔΔ": "img/day-book48.png",
		"ⵠΔᐃᐃΔΔΔ": "img/night-book48.png",
		"ΔⵠᐃᐃⵠⲆᐃ": "img/day-book49.png",
		"ⲆⲆᐃΔⵠⲆⵠ": "img/night-book49.png",
		"ⲆΔᐃⲆΔᐃᐃ": "img/day-book50.png",
		"ᐃⲆⲆᐃⵠΔⵠ": "img/night-book50.png",
		"ᐃⲆⵠᐃΔΔᐃ": "img/day-crate1.png",
		"ⵠᐃᐃⵠⲆⵠᐃ": "img/night-crate1.png",
		"ⵠⵠⲆΔⲆᐃΔ": "img/day-crate2.png",
		"ⵠᐃᐃⵠⲆᐃⲆ": "img/night-crate2.png",
		"ⲆⵠΔⲆΔᐃⲆ": "img/day-crate3.png",
		"ΔᐃⵠⲆᐃⵠⲆ": "img/night-crate3.png",
		"ⲆⵠΔΔⲆᐃΔ": "img/day-crate4.png",
		"ⲆⲆⵠΔᐃᐃΔ": "img/night-crate4.png",
		"ΔΔΔⵠᐃᐃΔ": "img/day-crate5.png",
		"ᐃⵠⵠⲆⵠᐃⵠ": "img/night-crate5.png",
		"ⵠⲆΔᐃⵠΔⲆ": "img/day-crate6.png",
		"ⲆⲆᐃᐃᐃΔⵠ": "img/night-crate6.png",
		"ΔⵠⵠᐃⵠⲆᐃ": "img/day-crate7.png",
		"ᐃⲆᐃᐃᐃᐃᐃ": "img/night-crate7.png",
		"ᐃⲆⲆⵠⵠᐃΔ": "img/day-crate8.png",
		"ⵠⲆⵠⲆᐃⲆⵠ": "img/night-crate8.png",
		"ᐃΔᐃⵠᐃⲆⲆ": "img/day-crate9.png",
		"ⵠⲆⲆⵠⵠᐃᐃ": "img/night-crate9.png",
		"ΔⲆᐃⵠⵠᐃⵠ": "img/day-crate10.png",
		"ⵠᐃᐃΔᐃⲆᐃ": "img/night-crate10.png",
		"ⵠΔⵠᐃΔⲆΔ": "img/day-crate11.png",
		"ⵠⵠⲆⵠⲆΔⲆ": "img/night-crate11.png",
		"ᐃⲆⵠⵠⵠⵠⲆ": "img/day-crate12.png",
		"ᐃᐃΔⲆΔⵠⲆ": "img/night-crate12.png",
		"ᐃΔᐃΔⵠⵠΔ": "img/day-crate13.png",
		"ⵠⲆⵠⲆΔΔⵠ": "img/night-crate13.png",
		"ⲆᐃⵠⵠⵠᐃΔ": "img/day-crate14.png",
		"ⲆⲆⲆΔᐃᐃⲆ": "img/night-crate14.png",
		"ⲆⲆᐃΔᐃⲆᐃ": "img/day-crate15.png",
		"ᐃΔⵠΔΔⵠΔ": "img/night-crate15.png",
		"ⲆΔⲆⲆⲆⵠΔ": "img/day-crate16.png",
		"ⵠⵠⲆⵠⲆⲆᐃ": "img/night-crate16.png",
		"ⵠΔⲆΔᐃΔᐃ": "img/day-crate17.png",
		"ΔⲆⲆⲆΔⵠᐃ": "img/night-crate17.png",
		"ᐃⵠᐃᐃᐃⲆⵠ": "img/day-crate18.png",
		"ᐃΔⵠⵠΔⵠⵠ": "img/night-crate18.png",
		"ᐃᐃⵠⵠⲆⵠᐃ": "img/day-crate19.png",
		"ΔᐃΔⵠᐃⲆⲆ": "img/night-crate19.png",
		"ΔΔΔⵠΔⵠᐃ": "img/day-crate20.png",
		"ⵠⵠⲆⵠⵠⵠⲆ": "img/night-crate20.png",
		"ⵠᐃⲆⲆΔΔᐃ": "img/day-crate21.png",
		"ᐃⲆΔᐃⲆᐃΔ": "img/night-crate21.png",
		"ᐃᐃⵠⵠᐃⵠᐃ": "img/day-crate22.png",
		"ⲆΔᐃᐃⵠⵠⵠ": "img/night-crate22.png",
		"ⲆᐃΔⵠΔΔᐃ": "img/day-crate23.png",
		"ΔⵠⲆⲆⲆⲆΔ": "img/night-crate23.png",
		"ⲆΔΔⵠᐃⵠⵠ": "img/day-crate24.png",
		"ⲆⲆⲆⲆⵠⲆⲆ": "img/night-crate24.png",
		"ⵠⲆᐃᐃΔᐃⵠ": "img/day-crate25.png",
		"ᐃⵠᐃⲆΔΔᐃ": "img/night-crate25.png",
		"ᐃᐃᐃⲆⵠⵠⲆ": "img/day-crate26.png",
		"ΔⲆⵠⲆⲆΔΔ": "img/night-crate26.png",
		"ΔⲆⵠΔᐃΔᐃ": "img/day-crate27.png",
		"ⲆᐃⵠⲆᐃⲆⵠ": "img/night-crate27.png",
		"ΔΔⵠⲆᐃⵠⵠ": "img/day-crate28.png",
		"ΔⵠΔᐃⵠΔᐃ": "img/night-crate28.png",
		"ⵠⵠᐃⵠⵠⵠⵠ": "img/day-crate29.png",
		"ΔⵠⲆⲆΔⲆᐃ": "img/night-crate29.png",
		"ᐃⲆΔⲆⵠᐃᐃ": "img/day-crate30.png",
		"ᐃⵠⵠⲆᐃⵠᐃ": "img/night-crate30.png",
		"ⵠⵠᐃⲆΔᐃⲆ": "img/day-crate31.png",
		"ᐃⵠⲆⲆⵠᐃⵠ": "img/night-crate31.png",
		"ΔⵠⲆⵠⵠΔᐃ": "img/day-crate32.png",
		"ⲆⵠⲆΔⵠᐃΔ": "img/night-crate32.png",
		"ⲆΔΔΔᐃΔⲆ": "img/day-crate33.png",
		"ⵠⵠᐃΔⲆⵠⲆ": "img/night-crate33.png",
		"ΔΔᐃⲆΔⲆⵠ": "img/day-crate34.png",
		"ΔⲆⵠⲆΔⲆΔ": "img/night-crate34.png",
		"ⲆΔⲆᐃΔⵠΔ": "img/day-crate35.png",
		"ΔᐃΔᐃⲆⲆᐃ": "img/night-crate35.png",
		"ⵠⲆᐃⵠᐃΔⲆ": "img/day-crate36.png",
		"ⵠⲆΔΔΔΔᐃ": "img/night-crate36.png",
		"ⵠΔᐃΔΔⵠⵠ": "img/day-crate37.png",
		"ⲆⲆⲆⵠⵠᐃⵠ": "img/night-crate37.png",
		"ⵠᐃⲆⲆΔΔⵠ": "img/day-crate38.png",
		"ΔᐃΔⵠⵠΔΔ": "img/night-crate38.png",
		"ΔΔⵠᐃⵠⲆΔ": "img/day-crate39.png",
		"ᐃⵠⵠⵠᐃⲆⲆ": "img/night-crate39.png",
		"ᐃΔΔⲆⵠᐃᐃ": "img/day-crate40.png",
		"ᐃⵠΔᐃΔⵠΔ": "img/night-crate40.png",
		"ⲆᐃⲆⲆᐃΔⲆ": "img/day-crate41.png",
		"ΔΔⵠⲆᐃΔᐃ": "img/night-crate41.png",
		"ⲆⵠⲆⵠⲆⵠⵠ": "img/day-crate42.png",
		"ΔⵠⲆⵠΔΔΔ": "img/night-crate42.png",
		"ⵠᐃᐃᐃᐃⲆᐃ": "img/day-crate43.png",
		"ΔⲆⲆⵠΔΔⲆ": "img/night-crate43.png",
		"ⵠⵠᐃᐃΔⵠᐃ": "img/day-crate44.png",
		"ᐃΔⵠⵠⲆᐃⵠ": "img/night-crate44.png",
		"ⲆΔᐃⲆⵠⵠⵠ": "img/day-crate45.png",
		"ᐃⲆᐃⲆⲆᐃⵠ": "img/night-crate45.png",
		"ᐃⲆΔⲆΔΔⵠ": "img/day-crate46.png",
		"ᐃΔⲆⵠΔᐃⵠ": "img/night-crate46.png",
		"ΔᐃᐃΔΔⵠΔ": "img/day-crate47.png",
		"ᐃⵠⲆᐃΔᐃᐃ": "img/night-crate47.png",
		"ᐃᐃⲆᐃⲆⵠⲆ": "img/day-crate48.png",
		"ⲆⵠⲆᐃⲆⲆᐃ": "img/night-crate48.png",
		"ⲆⵠⵠΔⵠΔᐃ": "img/day-crate49.png",
		"ΔᐃⲆⲆΔⲆΔ": "img/night-crate49.png",
		"ⵠⲆᐃΔΔᐃΔ": "img/day-crate50.png",
		"ⲆⵠᐃⲆⵠⵠΔ": "img/night-crate50.png",
		"ᐃΔⵠⲆⲆⲆΔ": "img/day-crate51.png",
		"ⲆᐃⲆᐃⲆΔⲆ": "img/night-crate51.png",
		"ΔⵠᐃΔᐃᐃᐃ": "img/day-crate52.png",
		"ⵠΔΔΔᐃΔⲆ": "img/night-crate52.png",
		"ⲆᐃΔⲆⵠⵠᐃ": "img/day-crate53.png",
		"ⵠⵠⲆⵠᐃⵠΔ": "img/night-crate53.png",
		"ᐃΔⲆⲆᐃᐃᐃ": "img/day-crate54.png",
		"ⲆⵠⵠⲆᐃᐃⲆ": "img/night-crate54.png",
		"ᐃᐃᐃⲆΔΔΔ": "img/day-crate55.png",
		"ᐃΔᐃⲆⵠⲆΔ": "img/night-crate55.png",
		"ⲆⲆⵠⲆⵠⵠⲆ": "img/day-crate56.png",
		"ⵠⵠᐃᐃⲆⲆⵠ": "img/night-crate56.png",
		"ΔΔⲆᐃⲆᐃⲆ": "img/day-crate57.png",
		"ⲆᐃΔⲆΔᐃⵠ": "img/night-crate57.png",
		"ⲆⲆΔⵠᐃΔΔ": "img/day-crate58.png",
		"ᐃΔᐃⵠᐃⲆᐃ": "img/night-crate58.png",
		"ᐃΔⵠⵠΔΔⲆ": "img/day-crate59.png",
		"ⲆᐃΔᐃⲆⵠⲆ": "img/night-crate59.png",
		"ΔⵠⵠΔⵠΔⵠ": "img/day-crate60.png",
		"ᐃⲆⲆⲆⲆⲆⲆ": "img/night-crate60.png",
		"ⵠⵠⵠⲆᐃⵠΔ": "img/day-crate61.png",
		"ΔⵠΔⲆᐃⵠᐃ": "img/night-crate61.png",
		"ⲆⵠⲆᐃᐃⲆᐃ": "img/day-crate62.png",
		"ⲆΔⲆΔᐃⲆⲆ": "img/night-crate62.png",
		"ⵠⵠΔΔⵠᐃᐃ": "img/day-crate63.png",
		"ⲆⵠᐃⲆΔⲆⲆ": "img/night-crate63.png",
		"ΔⲆⲆⵠⵠᐃΔ": "img/day-crate64.png",
		"ⵠᐃⵠᐃⵠΔⲆ": "img/night-crate64.png",
		"ΔΔⵠⵠⲆⲆⵠ": "img/day-crate65.png",
		"ᐃⲆΔΔⵠⵠⵠ": "img/night-crate65.png",
		"ΔᐃⲆⵠⵠᐃⵠ": "img/day-crate66.png",
		"ⵠⲆΔΔⲆⲆⲆ": "img/night-crate66.png",
		"ᐃⵠⲆⵠΔᐃⵠ": "img/day-crate67.png",
		"ᐃⲆᐃⲆΔΔⲆ": "img/night-crate67.png",
		"ᐃΔⵠΔⵠΔⵠ": "img/day-crate68.png",
		"ⵠⲆᐃᐃΔⲆⲆ": "img/night-crate68.png",
		"ⵠᐃⲆⵠⵠⵠᐃ": "img/day-crate69.png",
		"ⲆⵠⵠⲆᐃᐃΔ": "img/night-crate69.png",
		"ᐃⵠⲆⵠᐃΔⲆ": "img/day-crate70.png",
		"ⲆᐃᐃⲆΔΔΔ": "img/night-crate70.png",
		"ΔⲆᐃⵠⵠᐃⲆ": "img/day-crate71.png",
		"ᐃⵠⵠΔⵠⲆⵠ": "img/night-crate71.png",
		"ᐃᐃⵠΔⵠⵠᐃ": "img/day-crate72.png",
		"ᐃⲆⲆⲆⲆⵠⵠ": "img/night-crate72.png",
		"ⵠΔΔⵠⵠⲆⲆ": "img/day-crate73.png",
		"ᐃⵠΔⲆᐃΔⵠ": "img/night-crate73.png",
		"ΔⲆⲆΔⵠΔΔ": "img/day-crate74.png",
		"ⲆΔⵠⲆΔᐃᐃ": "img/night-crate74.png",
		"ⵠᐃⵠⵠⲆᐃᐃ": "img/day-crate75.png",
		"ⲆΔᐃΔⵠⵠΔ": "img/night-crate75.png",
		"ⵠⵠⲆⵠΔⲆⵠ": "img/day-crate76.png",
		"ⲆⵠᐃᐃⵠⲆⵠ": "img/night-crate76.png",
		"ΔⲆᐃᐃᐃᐃΔ": "img/day-crate77.png",
		"ⵠΔⵠⲆΔᐃⲆ": "img/night-crate77.png",
		"ΔⲆⵠⲆⵠⲆΔ": "img/day-crate78.png",
		"ᐃᐃᐃΔᐃⵠⵠ": "img/night-crate78.png",
		"ΔⵠⲆⲆⵠΔᐃ": "img/day-crate79.png",
		"ΔΔⲆᐃⵠⲆΔ": "img/night-crate79.png",
		"ⵠⲆᐃΔᐃΔⵠ": "img/day-herb0.png",
		"ᐃᐃᐃΔⵠⵠΔ": "img/day-herb1.png",
		"ⵠⲆⲆΔᐃᐃⵠ": "img/day-herb2.png",
		"ΔᐃΔⲆⵠΔΔ": "img/day-herb3.png",
		"ΔΔᐃⵠⲆⵠⵠ": "img/day-herb4.png",
		"ΔΔⵠⲆΔΔⲆ": "img/day-herb5.png",
		"ⲆⵠΔᐃΔⵠⵠ": "img/day-herb6.png",
		"ⵠⲆⵠᐃᐃⵠⵠ": "img/day-herb7.png",
		"ⲆΔΔⲆⵠΔΔ": "img/day-herb8.png",
		"ⵠΔᐃⲆΔⲆΔ": "img/day-herb9.png",
		"ⲆΔⵠⲆᐃⲆⵠ": "img/day-herb10.png",
		"Δᐃᐃⵠᐃⵠⵠ": "img/day-herb11.png",
		"ⵠⵠᐃᐃᐃⵠΔ": "img/day-herb12.png",
		"ᐃᐃᐃᐃⵠΔΔ": "img/day-herb13.png",
		"ⵠΔⲆΔⲆᐃᐃ": "img/day-herb14.png",
		"ⵠᐃⲆⲆⲆⲆΔ": "img/day-herb15.png",
		"ⵠΔⲆⲆΔⲆⲆ": "img/day-shell0.png",
		"ᐃⲆᐃΔⲆⵠⲆ": "img/day-shell1.png",
		"ⵠΔᐃⲆⵠⲆⲆ": "img/day-shell2.png",
		"ⵠⵠⲆⲆⲆⲆⲆ": "img/day-leaf1.png",
		"ΔⲆΔΔΔⵠⲆ": "img/day-leaf2.png",
		"ⲆΔⵠⵠⲆⵠᐃ": "img/day-leaf3.png",
		"ⲆⲆΔⲆᐃⵠᐃ": "img/day-leaf4.png",
		"ⵠᐃΔⲆΔⵠᐃ": "img/day-leaf5.png",
		"ⲆᐃᐃᐃᐃΔⵠ": "img/day-leaf6.png",
		"ⲆⲆᐃⲆⵠⵠΔ": "img/day-leaf7.png",
		"ⲆΔⲆΔᐃΔⲆ": "img/day-leaf8.png",
		"ΔᐃⲆⵠΔᐃᐃ": "img/day-rock0.png",
		"ΔⵠᐃᐃΔΔᐃ": "img/day-rock1.png",
		"ΔⲆⲆᐃⵠᐃⵠ": "img/day-rock2.png",
		"ⲆΔⵠⵠΔᐃⲆ": "img/day-rock3.png",
		"ⲆⲆᐃΔᐃΔⲆ": "img/day-rock4.png",
		"ΔΔᐃⲆⵠᐃᐃ": "img/day-rock5.png",
		"ᐃⵠΔᐃᐃᐃⲆ": "img/day-rock6.png",
		"ⲆⲆⲆΔⵠⵠΔ": "img/day-rock7.png",
		"ᐃᐃΔⵠᐃⵠᐃ": "img/day-rock8.png",
		"ⵠⲆΔᐃΔΔᐃ": "img/day-rock9.png",
		"ⲆᐃΔᐃΔᐃΔ": "img/day-rock10.png",
		"ⲆΔᐃⲆⲆΔⵠ": "img/day-rock11.png",
		"ⲆᐃᐃᐃᐃᐃⲆ": "img/day-rock12.png",
		"ΔⵠᐃᐃᐃΔⲆ": "img/day-rock13.png",
		"Ⲇⵠⵠⵠⵠᐃⵠ": "img/day-flower1.png",
		"ⵠᐃⵠᐃΔΔᐃ": "img/day-flower2.png",
		"ⵠᐃΔᐃΔᐃⵠ": "img/day-flower3.png",
		"ΔⲆⲆΔⵠⲆⲆ": "img/day-flower4.png",
		"ᐃⲆΔΔΔᐃⵠ": "img/day-flower5.png",
		"ⵠΔⵠⲆⲆᐃᐃ": "img/day-flower6.png",
		"ⵠⵠᐃᐃᐃΔⲆ": "img/day-flower7.png",
		"ΔΔⵠᐃⲆⲆⲆ": "img/day-flower8.png",
		"ΔᐃΔⵠⵠⲆⲆ": "img/day-flower9.png",
		"ⵠΔⲆⵠΔⵠⲆ": "img/day-herb16.png",
		"ᐃΔᐃᐃΔΔΔ": "img/day-herb17.png",
		"ⲆⲆⲆⲆΔⲆΔ": "img/day-herb18.png",
		"ᐃΔⵠᐃⲆⲆΔ": "img/day-herb19.png",
		"ⲆⲆⵠⲆᐃⵠᐃ": "img/day-herb20.png",
		"ΔⵠⵠᐃⵠⵠΔ": "img/day-herb21.png",
		"ΔΔΔⲆⵠⲆⵠ": "img/night-herb0.png",
		"ⲆΔⵠⲆⵠⵠⲆ": "img/night-herb1.png",
		"ⲆΔⲆⵠᐃⲆΔ": "img/night-herb2.png",
		"ᐃΔᐃⲆⲆᐃⲆ": "img/night-herb3.png",
		"ΔⲆⵠⵠᐃⵠⵠ": "img/night-herb4.png",
		"ᐃᐃΔⵠᐃᐃⲆ": "img/night-herb5.png",
		"ⵠⵠΔⵠΔⵠⵠ": "img/night-herb6.png",
		"ΔᐃⵠⲆⲆⲆⵠ": "img/night-herb7.png",
		"ⵠᐃⲆΔⲆⲆᐃ": "img/night-herb8.png",
		"ΔⲆⵠᐃⵠᐃΔ": "img/night-herb9.png",
		"ⵠⲆⲆᐃΔᐃᐃ": "img/night-herb10.png",
		"ⲆᐃⵠⵠⲆⵠⵠ": "img/night-herb11.png",
		"ΔⵠᐃΔⵠⲆᐃ": "img/night-herb12.png",
		"ⵠⵠΔⵠⲆΔᐃ": "img/night-herb13.png",
		"ᐃΔΔⲆⲆΔᐃ": "img/night-herb14.png",
		"ⲆᐃⲆᐃⲆΔΔ": "img/night-herb15.png",
		"ᐃⵠⲆᐃΔⵠⵠ": "img/night-shell0.png",
		"ΔⵠΔⵠΔΔⵠ": "img/night-shell1.png",
		"ⵠᐃⲆᐃⵠΔⲆ": "img/night-shell2.png",
		"ᐃΔᐃⵠᐃⲆⵠ": "img/night-leaf1.png",
		"ᐃΔⵠⵠⲆⲆΔ": "img/night-leaf2.png",
		"ΔⲆⲆⲆΔᐃᐃ": "img/night-leaf3.png",
		"ΔΔⵠⲆⲆⵠᐃ": "img/night-leaf4.png",
		"ⵠⲆΔⵠᐃᐃⵠ": "img/night-leaf5.png",
		"ⲆΔⲆΔΔⲆⵠ": "img/night-leaf6.png",
		"ⵠⵠΔᐃᐃΔᐃ": "img/night-leaf7.png",
		"ΔⲆΔⵠⲆⲆΔ": "img/night-leaf8.png",
		"ᐃΔⲆⵠⵠᐃⵠ": "img/night-rock0.png",
		"ΔⵠⵠΔⲆᐃᐃ": "img/night-rock1.png",
		"ⲆⲆᐃΔᐃᐃᐃ": "img/night-rock2.png",
		"ᐃᐃΔΔᐃⵠᐃ": "img/night-rock3.png",
		"ᐃⲆⲆᐃΔΔⵠ": "img/night-rock4.png",
		"ΔΔΔΔᐃⵠΔ": "img/night-rock5.png",
		"ΔⵠⵠⵠⵠⵠΔ": "img/night-rock6.png",
		"ΔᐃⵠⲆⵠⵠᐃ": "img/night-rock7.png",
		"ⵠⲆⵠⲆⲆᐃⲆ": "img/night-rock8.png",
		"ΔⵠΔᐃᐃᐃⵠ": "img/night-rock9.png",
		"ⵠⲆᐃⵠⲆᐃᐃ": "img/night-rock10.png",
		"ΔΔᐃᐃΔⵠᐃ": "img/night-rock11.png",
		"ΔᐃᐃΔⵠᐃⲆ": "img/night-rock12.png",
		"ⵠⵠΔΔᐃᐃⵠ": "img/night-rock13.png",
		"ᐃΔΔΔᐃⲆⲆ": "img/night-flower1.png",
		"ⵠⵠΔΔᐃⵠΔ": "img/night-flower2.png",
		"ⵠΔⲆΔⵠΔⵠ": "img/night-flower3.png",
		"ⵠᐃⵠΔΔΔΔ": "img/night-flower4.png",
		"ᐃⵠᐃΔᐃⲆⲆ": "img/night-flower5.png",
		"ⲆΔᐃⲆΔᐃⵠ": "img/night-flower6.png",
		"ⵠⲆᐃⵠⵠᐃⲆ": "img/night-flower7.png",
		"ᐃᐃΔᐃⲆᐃΔ": "img/night-flower8.png",
		"ᐃⲆᐃⲆΔᐃᐃ": "img/night-flower9.png",
		"ⲆΔⵠᐃᐃᐃⲆ": "img/night-herb16.png",
		"ⲆᐃⵠΔΔⲆᐃ": "img/night-herb17.png",
		"ΔⲆⵠⲆᐃⲆᐃ": "img/night-herb18.png",
		"ᐃᐃᐃⵠⲆΔᐃ": "img/night-herb19.png",
		"ⲆΔⲆⲆⵠΔⵠ": "img/night-herb20.png",
		"ᐃΔΔⵠⲆⵠᐃ": "img/night-herb21.png",
		"ᐃⲆⲆΔᐃΔⲆ": "img/day-river000-010-000.png",
		"ᐃᐃΔⵠⲆΔⵠ": "img/day-river000-010-010.png",
		"ⲆⵠΔᐃᐃⲆⵠ": "img/day-river000-011-000.png",
		"ᐃΔⲆᐃᐃⲆⲆ": "img/day-river000-011-010.png",
		"ⲆᐃⲆⵠⲆΔΔ": "img/day-river000-011-011.png",
		"ᐃᐃⵠⵠΔΔᐃ": "img/day-river000-110-000.png",
		"ⲆⲆΔⵠΔⲆⵠ": "img/day-river000-110-010.png",
		"ΔⵠⲆΔΔⵠΔ": "img/day-river000-110-110.png",
		"ΔΔⵠΔΔⵠΔ": "img/day-river000-111-000.png",
		"ⲆᐃᐃᐃⲆⵠᐃ": "img/day-river000-111-010.png",
		"ⲆᐃⵠᐃᐃᐃⲆ": "img/day-river000-111-011.png",
		"ⵠΔΔⵠⵠⲆⵠ": "img/day-river000-111-110.png",
		"ⲆⲆⵠⵠⲆⵠᐃ": "img/day-river000-111-111.png",
		"ⵠⵠⲆᐃΔᐃᐃ": "img/day-river010-010-000.png",
		"ⲆᐃⵠΔⲆᐃⵠ": "img/day-river010-010-010.png",
		"ᐃⵠΔⵠΔᐃᐃ": "img/day-river010-011-000.png",
		"ⵠΔΔΔᐃᐃⵠ": "img/day-river010-011-010.png",
		"ⵠΔⲆᐃᐃⲆΔ": "img/day-river010-011-011.png",
		"ⵠⲆᐃΔⵠΔⵠ": "img/day-river010-110-000.png",
		"ᐃⵠΔᐃⲆⵠΔ": "img/day-river010-110-010.png",
		"ⵠⵠΔⵠⵠΔⲆ": "img/day-river010-110-110.png",
		"ⵠⲆᐃΔⵠᐃᐃ": "img/day-river010-111-000.png",
		"ᐃᐃⵠᐃⵠⲆΔ": "img/day-river010-111-010.png",
		"ⲆⵠᐃΔⵠⲆⲆ": "img/day-river010-111-011.png",
		"ⵠᐃΔΔΔᐃⵠ": "img/day-river010-111-110.png",
		"ⵠᐃᐃᐃⵠᐃΔ": "img/day-river010-111-111.png",
		"ⲆᐃΔΔΔΔᐃ": "img/day-river011-011-000.png",
		"ⵠⲆⲆⲆⲆᐃΔ": "img/day-river011-011-010.png",
		"ᐃⲆⵠᐃΔᐃΔ": "img/day-river011-011-011.png",
		"ᐃΔⵠᐃΔⵠᐃ": "img/day-river011-111-000.png",
		"ΔΔⵠⵠⵠⲆΔ": "img/day-river011-111-010.png",
		"ⲆᐃᐃⵠⵠⵠⲆ": "img/day-river011-111-011.png",
		"ⵠⵠᐃⵠᐃⵠΔ": "img/day-river011-111-110.png",
		"ⵠⲆᐃᐃⲆⵠⲆ": "img/day-river011-111-111.png",
		"ⵠⵠᐃⵠⲆΔⲆ": "img/day-river110-110-000.png",
		"ᐃⲆΔΔᐃΔⲆ": "img/day-river110-110-010.png",
		"ⵠⲆⲆⵠᐃΔⲆ": "img/day-river110-110-110.png",
		"ΔⲆⲆΔᐃⲆⵠ": "img/day-river110-111-000.png",
		"ΔΔⲆⵠⲆΔⵠ": "img/day-river110-111-010.png",
		"ΔᐃΔΔᐃⵠΔ": "img/day-river110-111-011.png",
		"ᐃⲆⲆᐃⵠⵠΔ": "img/day-river110-111-110.png",
		"ᐃⲆΔᐃⲆᐃⵠ": "img/day-river110-111-111.png",
		"ΔΔⵠᐃᐃΔⵠ": "img/day-river111-111-011.png",
		"ᐃᐃⵠᐃᐃΔⲆ": "img/day-river111-111-110.png",
		"ΔΔⵠᐃᐃΔⵠ": "img/day-river111-111-011.png",
		"ᐃⵠⲆᐃⵠᐃⲆ": "img/day-river111-111-000.png",
		"ⵠⵠⲆⲆⵠᐃΔ": "img/day-river111-111-111.png",
		"ⲆⲆⲆⵠⲆⵠᐃ": "img/day-river111-111-010.png",
		"ΔⲆΔⲆᐃⵠᐃ": "img/night-river000-010-000.png",
		"ⵠⵠᐃⵠᐃᐃᐃ": "img/night-river000-010-010.png",
		"ⲆⵠᐃᐃⵠΔΔ": "img/night-river000-011-000.png",
		"ΔⲆⲆⲆᐃⵠⲆ": "img/night-river000-011-010.png",
		"ᐃⵠⵠΔⲆⵠⲆ": "img/night-river000-011-011.png",
		"ⵠⵠⵠⵠⲆᐃⵠ": "img/night-river000-110-000.png",
		"ⲆⵠⲆᐃⵠⲆⵠ": "img/night-river000-110-010.png",
		"ⲆΔⲆⲆΔⲆⵠ": "img/night-river000-110-110.png",
		"ⵠⲆᐃⲆⲆⲆⲆ": "img/night-river000-111-000.png",
		"ΔⵠⵠΔΔΔᐃ": "img/night-river000-111-010.png",
		"ᐃⲆΔⵠⵠⲆⲆ": "img/night-river000-111-011.png",
		"ᐃΔΔΔⲆⵠⲆ": "img/night-river000-111-110.png",
		"ᐃᐃⲆΔΔⵠⲆ": "img/night-river000-111-111.png",
		"ⲆⲆⲆᐃΔᐃⲆ": "img/night-river010-010-000.png",
		"ᐃⲆᐃⲆⲆᐃΔ": "img/night-river010-010-010.png",
		"ΔΔⲆᐃⵠΔΔ": "img/night-river010-011-000.png",
		"Ⲇᐃᐃᐃᐃⵠⵠ": "img/night-river010-011-010.png",
		"ΔᐃⲆᐃΔᐃΔ": "img/night-river010-011-011.png",
		"ⲆⵠⲆⵠᐃΔᐃ": "img/night-river010-110-000.png",
		"ᐃⵠⲆΔⲆⲆΔ": "img/night-river010-110-010.png",
		"ΔⵠⲆⵠⵠⲆⲆ": "img/night-river010-110-110.png",
		"ⲆⲆᐃⲆⲆⲆⲆ": "img/night-river010-111-000.png",
		"ⵠⵠᐃⵠⲆⲆᐃ": "img/night-river010-111-010.png",
		"ⲆᐃⵠΔΔΔΔ": "img/night-river010-111-011.png",
		"ᐃᐃΔΔΔⲆΔ": "img/night-river010-111-110.png",
		"ΔΔΔⲆⵠⵠⵠ": "img/night-river010-111-111.png",
		"ⲆΔΔⲆⲆΔⲆ": "img/night-river011-011-000.png",
		"ⲆⲆⲆᐃⲆⵠΔ": "img/night-river011-011-010.png",
		"ΔⵠⲆⵠΔᐃΔ": "img/night-river011-011-011.png",
		"ⵠⵠⵠⲆⵠⵠΔ": "img/night-river011-111-000.png",
		"ΔΔⵠΔⵠⵠⲆ": "img/night-river011-111-010.png",
		"ⲆⲆⲆᐃᐃⵠΔ": "img/night-river011-111-011.png",
		"ΔᐃᐃᐃⲆⵠΔ": "img/night-river011-111-110.png",
		"ᐃΔΔΔⲆⲆΔ": "img/night-river011-111-111.png",
		"ΔΔΔΔΔⵠⵠ": "img/night-river110-110-000.png",
		"ⲆⵠΔⵠⲆΔᐃ": "img/night-river110-110-010.png",
		"ⲆⵠⵠⲆⲆΔΔ": "img/night-river110-110-110.png",
		"ΔΔΔⲆᐃⲆⲆ": "img/night-river110-111-000.png",
		"ΔΔΔΔᐃⲆⲆ": "img/night-river110-111-010.png",
		"ΔⵠΔΔⵠΔΔ": "img/night-river110-111-011.png",
		"ΔⲆᐃᐃΔⵠΔ": "img/night-river110-111-110.png",
		"ᐃⵠΔⲆⲆΔᐃ": "img/night-river110-111-111.png",
		"ΔⵠΔⲆᐃΔᐃ": "img/night-river111-111-011.png",
		"ⵠⵠⲆⵠⲆⲆⲆ": "img/night-river111-111-110.png",
		"ΔⵠΔⲆᐃΔᐃ": "img/night-river111-111-011.png",
		"ⵠΔⲆⲆᐃᐃᐃ": "img/night-river111-111-000.png",
		"ⵠΔⵠⵠⵠΔᐃ": "img/night-river111-111-111.png",
		"ᐃᐃΔⵠᐃⲆΔ": "img/night-river111-111-010.png",
		"ΔᐃΔⵠΔⵠᐃ": "img/day-pebblecompo1.png",
		"ⲆᐃⵠⲆⲆ": "img/day-pebblecompo2.png",
		"ΔⵠⲆΔⵠ": "img/day-pebblecompo3.png",
		"ⵠΔΔⲆΔΔΔ": "img/day-pebblecompo4.png",
		"ⵠⲆⲆⵠⲆ": "img/day-pebblecompo5.png",
		"ⵠⵠΔᐃⵠ": "img/day-pebblecompo6.png",
		"ΔΔᐃⵠⵠ": "img/day-pebblecompo7.png",
		"ΔᐃᐃᐃΔⵠⵠ": "img/day-pebblecompo8.png",
		"ᐃⲆⲆⵠⲆⲆΔ": "img/day-pebblecompo9.png",
		"ⵠⲆⲆⲆⵠⵠⵠ": "img/day-pebblecompo10.png",
		"ⲆᐃⲆⵠᐃ": "img/day-pebblecompo11.png",
		"ⵠⲆᐃⵠⵠΔᐃ": "img/day-pebblecompo12.png",
		"ᐃⵠᐃΔⲆΔⵠ": "img/day-pebblecompo13.png",
		"ᐃⲆⲆⵠⵠΔΔ": "img/day-pebblecompo14.png",
		"ⵠᐃΔᐃⲆⲆᐃ": "img/day-pebblecompo15.png",
		"ⲆΔΔⲆΔⵠⲆ": "img/day-pebblecompo16.png",
		"ⵠⵠᐃⲆⵠ": "img/day-pebblecompo17.png",
		"ΔⲆⲆⵠΔⵠΔ": "img/day-pebblecompo18.png",
		"ⵠⲆⵠⵠΔΔⵠ": "img/day-pebblecompo19.png",
		"ΔΔΔⵠⲆ": "img/day-pebblecompo20.png",
		"ΔΔΔⵠⵠ": "img/day-pebblecompo21.png",
		"ⵠΔⲆᐃΔⵠᐃ": "img/day-pebblecompo22.png",
		"ᐃᐃⲆⲆΔΔᐃ": "img/day-pebblecompo23.png",
		"ⲆᐃΔⵠΔⵠⲆ": "img/day-pebblecompo24.png",
		"ⵠⵠⵠⵠᐃ": "img/day-pebblecompo25.png",
		"ᐃⲆⲆᐃⵠ": "img/day-pebblecompo26.png",
		"ⵠⲆΔΔΔᐃΔ": "img/day-pebblecompo27.png",
		"Ⲇⵠⵠᐃᐃ": "img/day-pebblecompo28.png",
		"ⵠⵠⵠΔⲆᐃⲆ": "img/night-pebblecompo1.png",
		"ⵠⵠⵠⵠⲆ": "img/night-pebblecompo2.png",
		"ⲆⵠⲆⲆⲆ": "img/night-pebblecompo3.png",
		"ⲆᐃᐃⵠΔᐃᐃ": "img/night-pebblecompo4.png",
		"ⵠᐃᐃⵠΔ": "img/night-pebblecompo5.png",
		"ⵠⲆΔⲆⵠ": "img/night-pebblecompo6.png",
		"ᐃⲆᐃᐃⵠ": "img/night-pebblecompo7.png",
		"ⵠⵠⲆᐃⲆΔΔ": "img/night-pebblecompo8.png",
		"ⲆᐃⲆⲆⵠⵠᐃ": "img/night-pebblecompo9.png",
		"ΔⲆΔⲆΔΔΔ": "img/night-pebblecompo10.png",
		"ⲆΔᐃΔⲆ": "img/night-pebblecompo11.png",
		"ΔⲆⵠⵠⵠΔⲆ": "img/night-pebblecompo12.png",
		"ⵠⵠⵠⵠⲆⵠΔ": "img/night-pebblecompo13.png",
		"ΔⲆⲆⵠⵠΔⵠ": "img/night-pebblecompo14.png",
		"ᐃⵠⵠᐃⲆΔⲆ": "img/night-pebblecompo15.png",
		"ⵠⲆⲆᐃⲆⲆΔ": "img/night-pebblecompo16.png",
		"ⲆⵠΔⲆⵠ": "img/night-pebblecompo17.png",
		"ⵠⵠᐃᐃⲆᐃⲆ": "img/night-pebblecompo18.png",
		"ᐃⵠᐃⵠⲆⵠⵠ": "img/night-pebblecompo19.png",
		"ᐃᐃΔᐃᐃ": "img/night-pebblecompo20.png",
		"Δᐃⵠᐃⵠ": "img/night-pebblecompo21.png",
		"ᐃΔⲆⵠⲆᐃΔ": "img/night-pebblecompo22.png",
		"ⲆⲆᐃΔΔᐃᐃ": "img/night-pebblecompo23.png",
		"ᐃᐃΔΔΔⲆⲆ": "img/night-pebblecompo24.png",
		"Ⲇᐃⵠᐃⵠ": "img/night-pebblecompo25.png",
		"ΔⵠΔⵠᐃ": "img/night-pebblecompo26.png",
		"ΔⵠᐃᐃⵠⵠΔ": "img/night-pebblecompo27.png",
		"ⲆⲆΔⲆⲆ": "img/night-pebblecompo28.png",
		"ⵠⵠⲆΔⲆΔΔ": "img/day-baby-mammoth.png",
		"ⲆᐃᐃⲆᐃⲆΔ": "img/day-baby-mammoth-tamed.png",
		"ΔⲆᐃⲆᐃΔᐃ": "img/day-baby-mammoth-angry.png",
		"ᐃⵠⲆⲆΔΔⵠ": "img/night-baby-mammoth.png",
		"ⵠᐃⵠⵠⲆΔⵠ": "img/night-baby-mammoth-tamed.png",
		"ⵠⲆⵠΔⲆⲆᐃ": "img/night-baby-mammoth-angry.png",
		"ⲆⲆⲆΔᐃⵠⲆ": "img/inv-mammoth-out.png",
		"ᐃΔᐃΔⲆⲆⵠ": "img/inv-mammoth-in.png",
		"ⲆΔⲆΔᐃⵠΔ": "img/inv-mammoth-click.png",
		"ᐃᐃΔΔΔΔⵠ": "img/hurt-baby-mammoth.png",
		"ⲆᐃⵠᐃⵠΔⲆ": "img/baby-mammoth-step.png",
		"ᐃᐃΔⵠΔⲆⵠ": "img/day-flower-hat.png",
		"ⲆⲆᐃΔΔⵠᐃ": "img/night-flower-hat.png",
		"ⲆᐃΔΔⵠᐃᐃ": "img/inv-flower-hat-out.png",
		"ΔⲆⲆΔᐃᐃΔ": "img/inv-flower-hat-in.png",
		"ⵠᐃⲆᐃΔᐃⵠ": "img/inv-flower-hat-click.png",
		"ⵠᐃⵠⲆΔᐃΔ": "img/day-fur-hat.png",
		"ⵠⵠᐃⲆᐃⵠᐃ": "img/night-fur-hat.png",
		"ΔᐃⲆⵠᐃΔᐃ": "img/inv-fur-hat-out.png",
		"ΔⲆᐃΔⵠΔᐃ": "img/inv-fur-hat-in.png",
		"ⲆΔⵠⲆΔΔᐃ": "img/inv-fur-hat-click.png",
		"ⲆⲆⲆΔᐃⲆⲆ": "img/day-mammoth.png",
		"ΔⲆⵠⵠⲆⲆⵠ": "img/night-mammoth.png",
		"ᐃΔⲆⲆⵠⵠⵠ": "img/hurt-mammoth.png",
		"ⲆᐃΔᐃⵠΔΔ": "img/inv-mammoth-fur-out.png",
		"ⲆΔᐃⵠⲆⲆᐃ": "img/inv-mammoth-fur-in.png",
		"ⲆΔΔΔⵠΔⲆ": "img/inv-mammoth-fur-click.png",
		"ᐃΔⵠⵠᐃΔⵠ": "img/inv-wood-bow-out.png",
		"ⲆΔΔΔⵠΔΔ": "img/inv-wood-bow-in.png",
		"ⵠΔᐃᐃΔΔⵠ": "img/inv-wood-bow-click.png",
		"ⵠⵠⲆΔΔⲆΔ": "img/inv-wood-arrow-out.png",
		"ⲆᐃⵠⵠᐃΔⵠ": "img/inv-wood-arrow-in.png",
		"ᐃᐃⲆⵠⵠⵠᐃ": "img/inv-wood-arrow-click.png",
		"ⵠᐃΔΔΔᐃⲆ": "img/day-wood-bow2.png",
		"ⲆΔⵠᐃᐃΔᐃ": "img/night-wood-bow2.png",
		"ΔΔⲆⲆⲆⵠⵠ": "img/day-wood-arrow.png",
		"ΔᐃᐃⲆΔᐃΔ": "img/night-wood-arrow.png",
		"ⵠΔⵠⲆᐃᐃⲆ": "img/inv-stone-bow-out.png",
		"ΔᐃΔᐃΔⲆᐃ": "img/inv-stone-bow-in.png",
		"ⲆⲆⵠΔᐃΔᐃ": "img/inv-stone-bow-click.png",
		"ⵠⵠᐃΔⵠᐃΔ": "img/inv-stone-arrow-out.png",
		"ᐃⲆᐃⲆᐃᐃⲆ": "img/inv-stone-arrow-in.png",
		"ΔⵠΔⵠⲆᐃⲆ": "img/inv-stone-arrow-click.png",
		"ⵠⲆⲆΔᐃᐃᐃ": "img/day-stone-bow.png",
		"ΔⵠΔᐃⲆⲆᐃ": "img/night-stone-bow.png",
		"ⲆᐃⲆΔΔΔᐃ": "img/day-stone-arrow.png",
		"ΔᐃᐃⲆᐃⲆΔ": "img/night-stone-arrow.png",
		"ΔΔⵠᐃⵠᐃᐃ": "img/inv-gold-bow-out.png",
		"ⲆΔⵠⲆⲆⲆⵠ": "img/inv-gold-bow-in.png",
		"ⵠⲆⲆᐃΔᐃⵠ": "img/inv-gold-bow-click.png",
		"ⵠⲆΔΔΔⲆΔ": "img/inv-gold-arrow-out.png",
		"ᐃᐃⲆⵠΔΔᐃ": "img/inv-gold-arrow-in.png",
		"ⲆᐃⲆΔⵠᐃᐃ": "img/inv-gold-arrow-click.png",
		"ᐃΔⵠⲆΔΔΔ": "img/day-gold-bow.png",
		"ΔΔΔΔΔᐃⲆ": "img/night-gold-bow.png",
		"ΔᐃⲆᐃΔΔⲆ": "img/day-gold-arrow.png",
		"ΔⵠᐃΔⵠΔΔ": "img/night-gold-arrow.png",
		"ΔᐃᐃⲆΔⵠⲆ": "img/inv-diamond-bow-out.png",
		"ᐃⲆΔᐃⲆᐃⲆ": "img/inv-diamond-bow-in.png",
		"ΔΔⲆᐃⵠᐃⵠ": "img/inv-diamond-bow-click.png",
		"ΔΔⵠⲆⵠⲆΔ": "img/inv-diamond-arrow-out.png",
		"ΔⵠⲆΔⲆᐃΔ": "img/inv-diamond-arrow-in.png",
		"ᐃⵠⵠⵠᐃⵠᐃ": "img/inv-diamond-arrow-click.png",
		"ⵠⵠⵠⵠΔΔⵠ": "img/day-diamond-bow.png",
		"ᐃⵠΔⲆⲆⲆᐃ": "img/night-diamond-bow.png",
		"ᐃⲆΔᐃⲆΔⲆ": "img/day-diamond-arrow.png",
		"ΔⵠΔᐃΔⵠᐃ": "img/night-diamond-arrow.png",
		"ΔᐃᐃⲆⵠⵠⲆ": "img/inv-amethyst-bow-out.png",
		"ⵠⵠᐃᐃⲆⵠᐃ": "img/inv-amethyst-bow-in.png",
		"ⲆⲆᐃⲆⵠᐃⲆ": "img/inv-amethyst-bow-click.png",
		"ⲆᐃΔΔΔⲆⵠ": "img/inv-amethyst-arrow-out.png",
		"ⲆⵠⵠⵠΔⲆⵠ": "img/inv-amethyst-arrow-in.png",
		"ΔⵠⵠᐃⵠΔⲆ": "img/inv-amethyst-arrow-click.png",
		"ⵠᐃᐃᐃΔⲆⵠ": "img/day-amethyst-bow.png",
		"ⲆⵠΔⲆⵠΔᐃ": "img/night-amethyst-bow.png",
		"ᐃⵠΔⵠⲆⵠᐃ": "img/day-amethyst-arrow.png",
		"ΔⵠΔᐃⵠᐃⵠ": "img/night-amethyst-arrow.png",
		"ⲆΔⵠᐃⵠΔⵠ": "img/inv-dragon-bow-out.png",
		"ⵠⲆΔᐃⲆᐃⲆ": "img/inv-dragon-bow-in.png",
		"ⵠΔΔⲆⲆⵠⲆ": "img/inv-dragon-bow-click.png",
		"ⲆⲆⲆΔᐃᐃᐃ": "img/inv-dragon-arrow-out.png",
		"ΔΔⵠⵠΔᐃⵠ": "img/inv-dragon-arrow-in.png",
		"ⵠΔΔⵠΔᐃΔ": "img/inv-dragon-arrow-click.png",
		"ᐃᐃᐃᐃΔᐃⵠ": "img/day-dragon-bow.png",
		"ΔᐃᐃⲆⲆᐃΔ": "img/night-dragon-bow.png",
		"ⵠΔⲆⵠΔᐃⲆ": "img/day-dragon-arrow.png",
		"ⲆᐃⲆⲆⲆΔⵠ": "img/night-dragon-arrow.png",
		"Δⵠᐃᐃⵠⵠᐃ": "img/inv-reidite-bow-out.png",
		"ⵠΔΔⵠᐃⲆⲆ": "img/inv-reidite-bow-in.png",
		"ⵠΔⲆⵠⵠⵠⵠ": "img/inv-reidite-bow-click.png",
		"ΔⲆⲆΔΔⲆⲆ": "img/inv-reidite-arrow-out.png",
		"ᐃⲆᐃΔᐃⲆᐃ": "img/inv-reidite-arrow-in.png",
		"ΔⵠⵠΔⲆⵠᐃ": "img/inv-reidite-arrow-click.png",
		"ᐃΔⲆⲆᐃⵠΔ": "img/day-reidite-bow.png",
		"ⲆΔΔᐃⵠΔⲆ": "img/night-reidite-bow.png",
		"ⵠᐃΔᐃΔᐃΔ": "img/day-reidite-arrow.png",
		"ⵠⲆᐃⲆᐃᐃᐃ": "img/night-reidite-arrow.png",
		"ᐃᐃᐃΔΔΔⵠ": "img/inv-wooden-axe-out.png",
		"ⵠᐃⲆᐃᐃⵠⵠ": "img/inv-wooden-axe-in.png",
		"ΔⲆⲆⵠΔⲆⲆ": "img/inv-wooden-axe-click.png",
		"ⵠΔᐃΔⲆⵠΔ": "img/day-wooden-axe.png",
		"ⵠᐃⵠΔⲆⲆᐃ": "img/night-wooden-axe.png",
		"ⵠΔΔⵠⲆΔᐃ": "img/inv-stone-axe-out.png",
		"ᐃⲆᐃⵠᐃᐃⵠ": "img/inv-stone-axe-in.png",
		"ⵠⲆᐃⲆᐃⲆΔ": "img/inv-stone-axe-click.png",
		"ⵠΔΔᐃᐃᐃᐃ": "img/day-stone-axe.png",
		"ⵠᐃΔᐃᐃᐃⵠ": "img/night-stone-axe.png",
		"ⵠᐃⵠᐃᐃⲆⲆ": "img/inv-golden-axe-out.png",
		"ᐃΔⵠⲆΔΔⵠ": "img/inv-golden-axe-in.png",
		"ⲆⲆⵠⲆⲆⵠⲆ": "img/inv-golden-axe-click.png",
		"ⵠⵠⲆΔΔᐃⵠ": "img/day-golden-axe.png",
		"ΔᐃᐃⵠΔΔⵠ": "img/night-golden-axe.png",
		"ᐃΔⲆΔⵠΔⵠ": "img/inv-diamond-axe-out.png",
		"ⲆΔΔⵠᐃΔⵠ": "img/inv-diamond-axe-in.png",
		"ⵠⵠᐃⲆⲆⲆⲆ": "img/inv-diamond-axe-click.png",
		"ⲆΔⲆⲆΔⲆᐃ": "img/day-diamond-axe.png",
		"ⲆΔᐃⵠⵠᐃᐃ": "img/night-diamond-axe.png",
		"ᐃⲆᐃᐃⵠⲆⲆ": "img/inv-amethyst-axe-out.png",
		"ⲆⵠΔΔⲆᐃⲆ": "img/inv-amethyst-axe-in.png",
		"ⲆΔⲆΔⵠⲆᐃ": "img/inv-amethyst-axe-click.png",
		"ⵠⵠΔᐃΔᐃΔ": "img/day-amethyst-axe.png",
		"ΔⲆΔⵠⵠΔᐃ": "img/night-amethyst-axe.png",
		"ᐃᐃΔᐃΔⵠᐃ": "img/inv-reidite-axe-out.png",
		"ᐃΔᐃᐃΔⲆⵠ": "img/inv-reidite-axe-in.png",
		"ᐃⲆⲆΔⵠⲆⲆ": "img/inv-reidite-axe-click.png",
		"ⵠΔΔΔⲆΔᐃ": "img/day-reidite-axe.png",
		"ⲆᐃΔΔᐃⲆᐃ": "img/night-reidite-axe.png",
		"ⵠⲆⲆΔⲆΔΔ": "img/bandage-activated.png",
		"ᐃⵠΔΔᐃΔⵠ": "img/auto-feed.png",
		"ᐃᐃⵠΔᐃⵠᐃ": "img/stop-regeneration.png",
		"ⵠⲆΔⵠΔⵠⵠ": "img/stop-regeneration2.png",
		"ⵠΔᐃⲆⲆⲆⲆ": "img/day-wood-platform.png",
		"ⲆᐃⲆᐃⲆⲆⵠⲆᐃ": "img/night-wood-platform.png",
		"ᐃᐃΔΔΔⵠᐃⲆⵠ": "img/inv-wood-platform-in.png",
		"ΔⲆⲆᐃᐃⵠᐃⲆⲆ": "img/inv-wood-platform-out.png",
		"ᐃⲆⲆⲆΔᐃⲆⲆΔ": "img/inv-wood-platform-click.png",
		"ⵠⲆⵠΔᐃⵠⲆᐃⲆ": "img/day-wood-shield.png",
		"ⵠⵠⲆⲆⲆᐃΔΔᐃ": "img/night-wood-shield.png",
		"ⵠⲆⵠⵠⲆΔⲆΔⵠ": "img/day-stone-shield.png",
		"ⵠΔⲆⲆᐃⵠᐃⵠⵠ": "img/night-stone-shield.png",
		"ⲆⲆΔᐃᐃΔᐃΔᐃ": "img/day-gold-shield.png",
		"ᐃⲆᐃΔⵠⲆⲆⵠⲆ": "img/night-gold-shield.png",
		"ᐃⵠΔⵠⵠⲆⵠⵠⵠ": "img/day-diamond-shield.png",
		"ᐃᐃⲆⲆⵠⲆᐃΔⲆ": "img/night-diamond-shield.png",
		"ⲆⵠⲆᐃΔᐃΔⵠⲆ": "img/day-amethyst-shield.png",
		"ᐃΔᐃΔⵠᐃᐃⲆᐃ": "img/night-amethyst-shield.png",
		"ᐃΔΔⲆΔᐃⲆΔⵠ": "img/day-reidite-shield.png",
		"ᐃⵠⲆⵠⲆᐃⲆⲆᐃ": "img/night-reidite-shield.png",
		"ⲆᐃⵠΔΔΔⵠᐃᐃ": "img/inv-wood-shield-in.png",
		"ᐃⲆΔΔΔⵠⲆᐃΔ": "img/inv-wood-shield-out.png",
		"ⵠⲆᐃΔⵠⲆⵠΔᐃ": "img/inv-wood-shield-click.png",
		"ᐃᐃⵠΔⲆΔⵠⵠⲆ": "img/inv-stone-shield-in.png",
		"ⲆΔⵠᐃⲆᐃᐃΔⲆ": "img/inv-stone-shield-out.png",
		"ⵠΔⵠⲆⵠⵠΔⵠΔ": "img/inv-stone-shield-click.png",
		"ⵠᐃⵠⲆⲆΔᐃⵠⵠ": "img/inv-gold-shield-in.png",
		"ΔΔΔⲆΔᐃΔΔΔ": "img/inv-gold-shield-out.png",
		"ⲆΔᐃΔⲆⲆΔⲆᐃ": "img/inv-gold-shield-click.png",
		"ᐃᐃᐃᐃΔΔⲆᐃⵠ": "img/inv-diamond-shield-in.png",
		"ᐃⲆⲆⲆΔⲆΔΔᐃ": "img/inv-diamond-shield-out.png",
		"ΔⲆΔⵠⵠΔⵠᐃⲆ": "img/inv-diamond-shield-click.png",
		"ⵠΔᐃᐃⲆⲆΔΔⲆ": "img/inv-amethyst-shield-in.png",
		"ᐃⲆᐃᐃⵠⵠᐃⵠⲆ": "img/inv-amethyst-shield-out.png",
		"ⲆΔᐃᐃᐃⲆⵠᐃⵠ": "img/inv-amethyst-shield-click.png",
		"ΔⲆΔᐃΔᐃᐃⵠⲆ": "img/inv-reidite-shield-in.png",
		"ᐃΔᐃⵠⲆᐃⲆΔⲆ": "img/inv-reidite-shield-out.png",
		"ⵠⵠⲆⵠᐃᐃᐃᐃᐃ": "img/inv-reidite-shield-click.png",
		"ΔⲆⵠⲆⵠΔᐃⵠᐃ": "img/day-machete.png",
		"ⲆⲆᐃᐃᐃᐃⵠΔⵠ": "img/night-machete.png",
		"ⲆⵠᐃⲆⲆⲆⵠΔΔ": "img/inv-machete-in.png",
		"ⲆΔⲆᐃⲆⵠⵠⲆⲆ": "img/inv-machete-out.png",
		"ΔᐃⵠᐃⵠᐃⲆΔⲆ": "img/inv-machete-click.png"
	};
	ΔⲆⵠΔⵠᐃⵠ = [{}];
	ΔⲆⵠΔⵠᐃⵠ[Δⵠⵠ].stringify = function(ⵠᐃᐃⵠᐃⲆⵠ) {
		var ⲆΔⲆᐃᐃⲆⲆ = new Uint8Array(new ArrayBuffer(ⵠᐃᐃⵠᐃⲆⵠ.length));
		for (var ᐃⲆ = 0; ᐃⲆ < ⵠᐃᐃⵠᐃⲆⵠ.length; ᐃⲆ++) ⲆΔⲆᐃᐃⲆⲆ[ᐃⲆ] = ⵠᐃᐃⵠᐃⲆⵠ[ᐃⲆ];
		return ⲆΔⲆᐃᐃⲆⲆ
	};
	const ΔᐃⲆᐃⵠ = ᐃⵠⵠⲆ;
	ⲆᐃⵠΔⵠΔΔ = {};
	ΔᐃⵠⵠΔᐃᐃⵠⵠ = {};
	for (var ᐃⲆ in Δᐃ) ⲆᐃⵠΔⵠΔΔ[ᐃⲆ] = Δᐃ[ᐃⲆ];

	function ⵠⵠⵠⲆⲆⲆⵠ(ΔⵠⲆΔⲆⵠΔ, ⵠᐃΔΔΔ, ⲆⲆΔᐃⵠⵠⵠ, ⲆᐃⵠⵠΔᐃⲆΔⲆ, ΔΔΔⲆⵠⲆⲆΔⲆ) {
		const ΔⲆᐃᐃΔⲆΔ = (ΔⵠⲆΔⲆⵠΔ + 29595) % 65464;
		const ⵠΔΔᐃⲆⲆⵠ = (16 << (ⵠᐃΔΔΔ >> 0 & 255)) + (8 << (ⵠᐃΔΔΔ >> 24 & 255)) + (0 << (ⵠᐃΔΔΔ >> 16 & 255)) + (24 << (ⵠᐃΔΔΔ >> 8 & 255));
		const ΔⲆⵠⲆΔᐃⵠ = (0 << (ⲆⲆΔᐃⵠⵠⵠ >> 8 & 255)) + (24 << (ⲆⲆΔᐃⵠⵠⵠ >> 16 & 255)) + (8 << (ⲆⲆΔᐃⵠⵠⵠ >> 24 & 255)) + (16 << (ⲆⲆΔᐃⵠⵠⵠ >> 0 & 255));
		const ⲆᐃⵠᐃⲆᐃᐃΔⲆ = (2531011 + (29843 + ⲆᐃⵠⵠΔᐃⲆΔⲆ) * 214013) % 4294967296;
		const ⵠΔⲆⵠⵠⵠⲆΔᐃ = (1013904223 + (48297 + ΔΔΔⲆⵠⲆⲆΔⲆ) * 1664525) % 4294967296;
		const ⵠΔΔⲆΔΔⵠ = ⲆΔⵠΔΔⲆᐃ(ΔⲆᐃᐃΔⲆΔ, ⵠΔΔᐃⲆⲆⵠ, ΔⲆⵠⲆΔᐃⵠ);
		const ⲆᐃᐃⲆΔⵠΔ = ⵠⵠⲆⵠⵠⵠΔ(ⲆᐃⵠᐃⲆᐃᐃΔⲆ, ⵠΔⲆⵠⵠⵠⲆΔᐃ, ΔⲆᐃᐃΔⲆΔ, ⵠΔΔᐃⲆⲆⵠ, ΔⲆⵠⲆΔᐃⵠ);
		const ᐃⵠⵠⲆⲆⲆᐃⵠᐃ = (0 << ((ⵠΔΔⲆΔΔⵠ ^ ⲆᐃᐃⲆΔⵠΔ) >> 8 & 255)) + (8 << ((ⵠΔΔⲆΔΔⵠ ^ ⲆᐃᐃⲆΔⵠΔ) >> 16 & 255)) + (ⵠᐃΔⲆΔⲆⵠ << ((ⵠΔΔⲆΔΔⵠ ^ ⲆᐃᐃⲆΔⵠΔ) >> 24 & 255)) + (24 << ((ⵠΔΔⲆΔΔⵠ ^ ⲆᐃᐃⲆΔⵠΔ) >> 0 & 255));
		return ᐃⵠⵠⲆⲆⲆᐃⵠᐃ
	}
	const ᐃᐃΔΔ = ⵠᐃⵠΔ;
	ᐃᐃ = [];
	const sprite = ᐃᐃ;
	sprite[1e4] = [new Image];
	sprite[10001] = [new Image];
	sprite[10002] = [new Image];
	sprite[10003] = [new Image];
	sprite[10004] = [new Image];
	sprite[10005] = [new Image];
	sprite[10006] = [new Image];
	sprite[10007] = [new Image];
	sprite[10008] = [new Image];
	sprite[10009] = [new Image];
	sprite[10010] = [new Image];
	sprite[10011] = [new Image];
	sprite[10012] = [new Image];
	sprite[10013] = [new Image];
	sprite[10014] = [new Image];
	sprite[10015] = [new Image];
	sprite[10016] = [new Image];
	sprite[10017] = [new Image];
	sprite[10018] = [new Image];
	sprite[10019] = [new Image];
	sprite[10020] = [new Image];
	sprite[10021] = [new Image];
	sprite[10022] = [new Image];
	sprite[10023] = [new Image];
	sprite[10024] = [new Image];
	sprite[10025] = [new Image];
	sprite[10026] = [new Image];
	sprite[10027] = [new Image];
	sprite[10028] = [new Image];
	sprite[10029] = [new Image];
	sprite[10030] = [new Image];
	sprite[10031] = [new Image];
	sprite[10032] = [new Image];
	sprite[10033] = [new Image];
	sprite[10034] = [new Image];
	sprite[10035] = [new Image];
	const switchColoredSpikesTextures = () => {
		switch (Settings.ColoredSpikes.textures) {
			case "1": {
				sprite[1e4][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-ally.png";
				sprite[10001][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-enemy.png";
				sprite[10002][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-ally.png";
				sprite[10003][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-enemy.png";
				sprite[10004][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-ally.png";
				sprite[10005][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-enemy.png";
				sprite[10006][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-ally.png";
				sprite[10007][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-enemy.png";
				sprite[10008][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-ally.png";
				sprite[10009][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-enemy.png";
				sprite[10010][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-ally.png";
				sprite[10011][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-enemy.png";
				sprite[10012][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood2.png";
				sprite[10013][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood1.png";
				sprite[10014][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone1.png";
				sprite[10015][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone2.png";
				sprite[10016][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold2.png";
				sprite[10017][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold1.png";
				sprite[10018][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond2.png";
				sprite[10019][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond1.png";
				sprite[10020][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst1.png";
				sprite[10021][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst2.png";
				sprite[10022][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite2.png";
				sprite[10023][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite1.png";
				sprite[10024][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-door-ally.png";
				sprite[10025][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-door-enemy.png";
				sprite[10026][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-door-ally.png";
				sprite[10027][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-door-enemy.png";
				sprite[10028][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-door-ally.png";
				sprite[10029][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-door-enemy.png";
				sprite[10030][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-door-ally.png";
				sprite[10031][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-door-enemy.png";
				sprite[10032][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-door-ally.png";
				sprite[10033][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-door-enemy.png";
				sprite[10034][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-door-ally.png";
				sprite[10035][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-door-enemy.png"
			};
			break;
		case "2": {
			sprite[1e4][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-enemy.png.111.png?raw=true";
			sprite[10001][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-enemy.png12312.png?raw=true";
			sprite[10002][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-ally.png312312.png?raw=true";
			sprite[10003][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-enemy.1213png1.png?raw=true";
			sprite[10004][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-ally.png?raw=true";
			sprite[10005][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-enemy.png1.png1.png?raw=true";
			sprite[10006][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-ally%20remaster%20by%20hersgori.png?raw=true";
			sprite[10007][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-enemy.png1132.png1.png?raw=true";
			sprite[10008][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-ally1.png?raw=true";
			sprite[10009][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-enemy.png1.png?raw=true";
			sprite[10010][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-all1232y.png?raw=true";
			sprite[10011][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-enemy.png123.png1.png?raw=true";
			sprite[10012][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood2.png";
			sprite[10013][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood1.png";
			sprite[10014][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone1.png";
			sprite[10015][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone2.png";
			sprite[10016][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold2.png";
			sprite[10017][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold1.png";
			sprite[10018][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond2.png";
			sprite[10019][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond1.png";
			sprite[10020][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst1.png";
			sprite[10021][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst2.png";
			sprite[10022][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite2.png";
			sprite[10023][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite1.png";
			sprite[10024][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-door-ally.png?raw=true";
			sprite[10025][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-door-enemy.png?raw=true";
			sprite[10026][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-door-ally.png?raw=true";
			sprite[10027][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-door-enemy.png?raw=true";
			sprite[10028][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-door-ally.png?raw=true";
			sprite[10029][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-door-enemy.png?raw=true";
			sprite[10030][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-door-ally.png?raw=true";
			sprite[10031][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-door-enemy.png?raw=true";
			sprite[10032][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-door-ally.png?raw=true";
			sprite[10033][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-door-enemy.png?raw=true";
			sprite[10034][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-door-ally%20remastered%20by%20hersgori.png?raw=true";
			sprite[10035][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-door-enemy.png?raw=true"
		};
		break
		}
	};
	switchColoredSpikesTextures();
	sprite[1e4][1] = sprite[1e4][0];
	sprite[10001][1] = sprite[10001][0];
	sprite[10002][1] = sprite[10002][0];
	sprite[10003][1] = sprite[10003][0];
	sprite[10004][1] = sprite[10004][0];
	sprite[10005][1] = sprite[10005][0];
	sprite[10006][1] = sprite[10006][0];
	sprite[10007][1] = sprite[10007][0];
	sprite[10008][1] = sprite[10008][0];
	sprite[10009][1] = sprite[10009][0];
	sprite[10010][1] = sprite[10010][0];
	sprite[10011][1] = sprite[10011][0];
	sprite[10012][1] = sprite[10012][0];
	sprite[10013][1] = sprite[10013][0];
	sprite[10014][1] = sprite[10014][0];
	sprite[10015][1] = sprite[10015][0];
	sprite[10016][1] = sprite[10016][0];
	sprite[10017][1] = sprite[10017][0];
	sprite[10018][1] = sprite[10018][0];
	sprite[10019][1] = sprite[10019][0];
	sprite[10020][1] = sprite[10020][0];
	sprite[10021][1] = sprite[10021][0];
	sprite[10022][1] = sprite[10022][0];
	sprite[10023][1] = sprite[10023][0];
	sprite[10024][1] = sprite[10024][0];
	sprite[10025][1] = sprite[10025][0];
	sprite[10026][1] = sprite[10026][0];
	sprite[10027][1] = sprite[10027][0];
	sprite[10028][1] = sprite[10028][0];
	sprite[10029][1] = sprite[10029][0];
	sprite[10030][1] = sprite[10030][0];
	sprite[10031][1] = sprite[10031][0];
	sprite[10032][1] = sprite[10032][0];
	sprite[10033][1] = sprite[10033][0];
	sprite[10034][1] = sprite[10034][0];
	sprite[10035][1] = sprite[10035][0];
	ᐃⵠᐃ = {};
	ᐃⵠᐃ.ⵠΔΔⲆⲆ = ⵠⵠΔΔ;
	ᐃⵠᐃ.ᐃᐃᐃⲆ = 1;
	const ⵠⲆⵠⲆ = ⵠⵠⵠⲆ;
	ᐃⵠᐃ.ⵠΔⵠΔ = 2;
	ᐃⵠᐃ.ⵠᐃΔⲆ = 3;
	ᐃⵠᐃ.ⲆΔⵠᐃ = ᐃᐃⵠΔ;
	ᐃⵠᐃ.ⲆⵠΔⲆ = ᐃᐃⲆⵠᐃ;
	ᐃⵠᐃ.ᐃⲆⵠΔ = ⵠⲆⵠⲆⵠ;
	const ᐃⵠⵠⵠᐃΔⵠ = ᐃⲆⲆᐃᐃⵠᐃ;
	ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ = 7;
	const ⵠᐃᐃⲆ = ⵠΔⵠⲆ;
	const ⵠᐃⲆⵠᐃ = ᐃᐃⵠΔⵠ;
	const ΔⲆⵠΔⲆ = ⵠΔⲆᐃⲆ;
	ᐃⵠᐃ.ᐃⵠΔⲆᐃ = 8;
	ⲆⲆΔⲆ = {};
	ⲆΔΔⵠ = [];
	ΔΔⲆⵠⵠⲆⲆ = function(ΔΔⲆᐃⵠⲆⵠ, ΔΔ) {
		for (var ᐃⲆ = ⲆⲆᐃ; ᐃⲆ < ΔΔⲆᐃⵠⲆⵠ.length; ᐃⲆ++) {
			if (ΔΔⲆᐃⵠⲆⵠ[ᐃⲆ].id === ΔΔ) return ᐃⲆ
		}
		return -1
	};
	const ΔᐃΔⵠⲆⲆⵠ = ΔΔⵠⲆᐃ;
	var ⲆΔⵠΔⵠᐃⵠ = [];

	function ΔΔᐃⵠᐃ(ⲆⵠΔⵠ, ΔⵠᐃᐃΔ) {
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆΔⵠΔⵠᐃⵠ.length; ᐃⲆ += ΔⵠᐃᐃΔ) {
			var ΔⲆⵠ = ⲆΔⵠΔⵠᐃⵠ[ᐃⲆ];
			if (ⲆⵠΔⵠ === ΔⲆⵠ[ⲆⲆΔ]) ΔΔⲆΔᐃⲆᐃⵠΔ(ΔⲆⵠ[ⲆⲆᐃ], ΔⲆⵠ[ᐃⵠᐃᐃ], ΔⲆⵠ[2], ΔⲆⵠ[3])
		}
	}
	const ᐃᐃΔⵠⲆ = ⵠⲆᐃⲆ;

	function ΔⵠᐃᐃᐃⲆᐃᐃⲆ() {
		ΔΔᐃⵠᐃ(ᐃ[104], ⲆⲆⲆᐃ);
		ΔΔᐃⵠᐃ(ᐃ[255], 20);
		ΔΔᐃⵠᐃ(ᐃ[566], ⲆⲆᐃⵠ);
		ΔΔᐃⵠᐃ("c", ΔᐃⵠⲆ);
		ΔΔᐃⵠᐃ("s", ᐃⲆⲆ);
		ΔΔᐃⵠᐃ("f", ᐃⵠⵠⵠ);
		ΔΔᐃⵠᐃ("p", 1);
		ΔΔᐃⵠᐃ("g", ⵠᐃᐃ);
		ΔΔᐃⵠᐃ("d", Δⵠᐃ);
		ΔΔᐃⵠᐃ("a", 1);
		ΔΔᐃⵠᐃ(ᐃ[538], ⵠⵠⵠⲆ);
		ΔΔᐃⵠᐃ("m", ⲆⲆⲆᐃ);
		ⲆΔⵠΔⵠᐃⵠ = []
	}
	const ⲆΔⲆᐃⵠ = ΔΔⵠⲆⵠ;

	function ᐃᐃᐃⵠΔΔΔᐃΔ(ⲆⵠΔⵠ, ΔᐃⲆⵠΔ, ᐃⲆ, ⲆⲆⲆⵠ) {
		ⲆΔⵠΔⵠᐃⵠ.push([ⲆⵠΔⵠ, ΔᐃⲆⵠΔ, ᐃⲆ, ⲆⲆⲆⵠ])
	}
	const ᐃᐃᐃⵠᐃ = ΔᐃⵠΔⵠ;
	const ᐃΔⵠᐃⲆ = ⵠⲆᐃⲆ;
	const ⵠⵠΔᐃΔⵠⲆ = ᐃⵠⲆᐃᐃⲆΔ;

	function ΔΔⲆΔᐃⲆᐃⵠΔ(ⲆⵠΔⵠ, ΔᐃⲆⵠΔ, ᐃⲆ, ⲆⲆⲆⵠ) {
		var ⵠⵠΔΔⲆᐃΔ = ⲆΔΔⵠ[ⲆⵠΔⵠ];
		if (ⵠᐃⲆᐃⲆ === ⵠⵠΔΔⲆᐃΔ) return;
		for (var ⲆⲆᐃΔ = ⵠᐃⵠ; 2 > ⲆⲆᐃΔ; ⲆⲆᐃΔ++) {
			var ⵠⵠ = ⵠⵠΔΔⲆᐃΔ[ΔᐃⲆⵠΔ][ⲆⲆᐃΔ];
			var Ⲇᐃ = ⲆⲆⲆⵠ * 193 / ⵠⲆΔ.ᐃᐃΔⵠᐃ;
			var ⲆⲆⲆ = 193 * ᐃⲆ / ⵠⲆΔ.ΔΔΔⲆⲆ;
			var ᐃΔΔ = ⵠⵠ.width / 3.5;
			var ΔⵠⲆ = ⵠⵠ.height / 3.5;
			ᐃᐃ[ⵠ.ᐃΔⲆⵠΔ][ⲆⲆᐃΔ].drawImage(ⵠⵠ, Ⲇᐃ - ᐃΔΔ / ΔⵠⲆⲆ, ⲆⲆⲆ - ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
			Ⲇᐃ = ⲆⲆⲆⵠ * 600 / ⵠⲆΔ.ᐃᐃΔⵠᐃ;
			ⲆⲆⲆ = 600 * ᐃⲆ / ⵠⲆΔ.ΔΔΔⲆⲆ;
			ᐃΔΔ = ⵠⵠ.width / 1.5;
			ΔⵠⲆ = ⵠⵠ.height / 1.5;
			ᐃᐃ[ⵠ.ⵠⲆΔΔΔ][ⲆⲆᐃΔ].drawImage(ⵠⵠ, Ⲇᐃ - ᐃΔΔ / 2, ⲆⲆⲆ - ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ)
		}
	}
	ⲆⵠⵠΔΔⵠⵠᐃᐃ = function() {
		for (var ᐃⲆ = ⵠⵠⵠ; ᐃⲆ < 2; ᐃⲆ++) {
			ᐃᐃ[ⵠ.ᐃΔⲆⵠΔ][ᐃⲆ].clearRect(0, 0, 193, 193);
			ᐃᐃ[ⵠ.ᐃΔⲆⵠΔ][ᐃⲆ].drawImage(ⲆΔΔⵠ["MAP"][ᐃⲆ], ᐃⲆΔ, ⵠⵠⲆΔ, 193, 193);
			ᐃᐃ[ⵠ.ⵠⲆΔΔΔ][ᐃⲆ].clearRect(0, Δⵠⵠ, 600, 600);
			ᐃᐃ[ⵠ.ⵠⲆΔΔΔ][ᐃⲆ].drawImage(ⲆΔΔⵠ["MAP"][ᐃⲆ], Δⵠⵠ, 0, 600, 600);
			for (var ⲆⲆⲆⵠ = ⵠⲆΔ.ᐃᐃⲆᐃ.length - ᐃⵠⵠⵠ; ⵠᐃⵠ <= ⲆⲆⲆⵠ; ⲆⲆⲆⵠ--) {
				var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆⲆⵠ];
				var Ⲇᐃ = 193 * ΔⲆᐃΔ.x1 / (ⵠⲆΔ.ᐃᐃΔⵠᐃ * ⵠⵠⲆᐃⵠ);
				var ⲆⲆⲆ = ΔⲆᐃΔ.y1 * 193 / (ⵠⲆΔ.ΔΔΔⲆⲆ * ⲆⲆⵠⵠⵠⵠᐃ);
				var ᐃΔΔ = 193 * ΔⲆᐃΔ.w / (100 * ⵠⲆΔ.ᐃᐃΔⵠᐃ);
				var ΔⵠⲆ = ΔⲆᐃΔ.ΔⵠⲆ * 193 / (100 * ⵠⲆΔ.ΔΔΔⲆⲆ);
				var Ⲇᐃᐃᐃⵠ = 600 * ΔⲆᐃΔ.x1 / (ⲆⵠΔΔΔ * ⵠⲆΔ.ᐃᐃΔⵠᐃ);
				var ΔᐃⵠⲆᐃ = ΔⲆᐃΔ.y1 * 600 / (ⵠⲆΔ.ΔΔΔⲆⲆ * ⲆⵠⲆⵠᐃ);
				var ⵠⵠᐃⵠⲆΔᐃ = 600 * ΔⲆᐃΔ.w / (ⲆⵠⲆⵠᐃ * ⵠⲆΔ.ᐃᐃΔⵠᐃ);
				var ⲆⵠⲆᐃᐃⵠⵠ = 600 * ΔⲆᐃΔ.ΔⵠⲆ / (ⵠⲆΔ.ΔΔΔⲆⲆ * ΔᐃⵠΔⲆ);
				if (ΔⲆᐃΔ.ᐃᐃⲆ === ⵠⲆΔ.ⲆΔΔⲆⵠ) {
					ᐃᐃ[ⵠ.ᐃΔⲆⵠΔ][ᐃⲆ].drawImage(ⲆΔΔⵠ[ᐃ[350]][ᐃⲆ], Ⲇᐃ, ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
					ᐃᐃ[ⵠ.ⵠⲆΔΔΔ][ᐃⲆ].drawImage(ⲆΔΔⵠ[ᐃ[350]][ᐃⲆ], Ⲇᐃᐃᐃⵠ, ΔᐃⵠⲆᐃ, ⵠⵠᐃⵠⲆΔᐃ, ⲆⵠⲆᐃᐃⵠⵠ)
				}
				if (ⵠⲆΔ.ΔⵠⵠᐃΔΔΔ === ΔⲆᐃΔ.ᐃᐃⲆ) {
					ᐃᐃ[ⵠ.ᐃΔⲆⵠΔ][ᐃⲆ].drawImage(ⲆΔΔⵠ[ᐃ[167]][ᐃⲆ], Ⲇᐃ, ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
					ᐃᐃ[ⵠ.ⵠⲆΔΔΔ][ᐃⲆ].drawImage(ⲆΔΔⵠ[ᐃ[167]][ᐃⲆ], Ⲇᐃᐃᐃⵠ, ΔᐃⵠⲆᐃ, ⵠⵠᐃⵠⲆΔᐃ, ⲆⵠⲆᐃᐃⵠⵠ)
				}
				if (ⵠⲆΔ.ⵠΔᐃΔᐃⵠⵠ === ΔⲆᐃΔ.ᐃᐃⲆ) {
					ᐃᐃ[ⵠ.ᐃΔⲆⵠΔ][ᐃⲆ].drawImage(ⲆΔΔⵠ[ᐃ[101]][ᐃⲆ], Ⲇᐃ, ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
					ᐃᐃ[ⵠ.ⵠⲆΔΔΔ][ᐃⲆ].drawImage(ⲆΔΔⵠ[ᐃ[101]][ᐃⲆ], Ⲇᐃᐃᐃⵠ, ΔᐃⵠⲆᐃ, ⵠⵠᐃⵠⲆΔᐃ, ⲆⵠⲆᐃᐃⵠⵠ)
				}
				if (ΔⲆᐃΔ.ᐃᐃⲆ === ⵠⲆΔ.ΔⲆⵠᐃⵠⵠⵠ) {
					ᐃᐃ[ⵠ.ᐃΔⲆⵠΔ][ᐃⲆ].drawImage(ⲆΔΔⵠ["CAVE"][ᐃⲆ], Ⲇᐃ, ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
					ᐃᐃ[ⵠ.ⵠⲆΔΔΔ][ᐃⲆ].drawImage(ⲆΔΔⵠ["CAVE"][ᐃⲆ], Ⲇᐃᐃᐃⵠ, ΔᐃⵠⲆᐃ, ⵠⵠᐃⵠⲆΔᐃ, ⲆⵠⲆᐃᐃⵠⵠ)
				}
				ⵠⲆΔ.ᐃᐃⵠΔᐃⵠⲆ === ΔⲆᐃΔ.ᐃᐃⲆ && (ᐃᐃ[ⵠ.ᐃΔⲆⵠΔ][ᐃⲆ].drawImage(ⲆΔΔⵠ[ᐃ[346]][ᐃⲆ], Ⲇᐃ, ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ), ᐃᐃ[ⵠ.ⵠⲆΔΔΔ][ᐃⲆ].drawImage(ⲆΔΔⵠ[ᐃ[346]][ᐃⲆ], Ⲇᐃᐃᐃⵠ, ΔᐃⵠⲆᐃ, ⵠⵠᐃⵠⲆΔᐃ, ⲆⵠⲆᐃᐃⵠⵠ))
			}
		}
	};
	const ⵠⵠⵠⵠΔⲆᐃᐃΔ = ⲆᐃΔΔⵠⵠⵠ;
	ΔⵠⲆΔΔΔⲆⲆⲆ = function() {
		ⲆⲆΔⲆ = {
			"Δⵠᐃⵠⵠ": [{
				id: ⵠΔΔⲆ,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠⲆᐃⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆⵠⵠΔΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔᐃᐃΔⲆΔⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃᐃⵠⵠⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Starver"
			}, {
				id: ⵠᐃⵠΔ,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃⲆⵠΔᐃ,
				"Δᐃᐃ": Δᐃ.ΔⵠᐃⲆⵠⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠᐃΔⵠⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆⲆⲆᐃΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Angry"
			}, {
				id: 2,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⲆⵠⲆⵠΔ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⵠⵠΔΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠⵠᐃΔⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔᐃⲆᐃᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Sad"
			}, {
				id: 9,
				"ⵠΔⵠ": Δᐃ.ⲆⵠΔⲆᐃΔⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃΔⵠΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠᐃᐃⲆΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔⲆⲆΔΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Happy 1"
			}, {
				id: 1,
				"ⵠΔⵠ": Δᐃ.ΔⲆΔⲆᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠⵠΔⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆⵠᐃⲆⵠⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⲆΔᐃⵠⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "What?"
			}, {
				id: ΔⲆΔⲆ,
				"ⵠΔⵠ": Δᐃ.ΔⵠⲆⲆΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⲆΔⲆⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⲆΔΔⲆⵠⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆᐃΔⵠⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Suspicious"
			}, {
				id: 5,
				"ⵠΔⵠ": Δᐃ.Ⲇⵠᐃᐃᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ΔⲆᐃⵠⵠᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠⵠᐃΔⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆΔⵠᐃᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Scar"
			}, {
				id: ⲆⲆⲆⵠΔ,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⲆΔΔⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆⲆΔΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃᐃⵠⲆⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔⵠΔⵠⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "In Trouble"
			}, {
				id: ⲆⵠⵠΔⲆⵠⲆ,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⵠⵠΔΔᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠΔΔᐃΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃⵠⵠΔⵠⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆΔⵠⵠⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Cute"
			}, {
				id: 8,
				"ⵠΔⵠ": Δᐃ.ΔᐃΔᐃᐃⵠΔ,
				"Δᐃᐃ": Δᐃ.ΔⵠⲆⵠΔⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔⲆⲆⵠⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔᐃΔᐃⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bored 1"
			}, {
				id: 10,
				"ⵠΔⵠ": Δᐃ.ⲆᐃᐃⵠⲆΔⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⵠᐃⵠⲆⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔⵠΔΔⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆΔᐃⲆΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Happy 2"
			}, {
				id: 11,
				"ⵠΔⵠ": Δᐃ.ⲆⵠᐃΔⲆⵠⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⵠⵠΔΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠⲆᐃⲆⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔᐃⵠΔᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Crazy"
			}, {
				id: 12,
				"ⵠΔⵠ": Δᐃ.ⵠᐃᐃⵠⵠⲆΔ,
				"Δᐃᐃ": Δᐃ.ΔᐃⲆᐃΔⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃᐃΔⲆΔᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔⵠᐃⵠⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Happy 3"
			}, {
				id: ΔⲆⲆᐃΔΔΔ,
				"ⵠΔⵠ": Δᐃ.ⲆⲆΔΔⲆΔΔ,
				"Δᐃᐃ": Δᐃ.ΔᐃⵠⲆⵠⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔᐃᐃⲆΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠⵠⲆⵠⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Very Cute"
			}, {
				id: ⵠⵠⲆⵠⵠ,
				"ⵠΔⵠ": Δᐃ.ⵠⲆΔᐃⲆⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⵠΔⵠΔⵠⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⲆΔⵠⲆΔⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃⲆⵠⲆⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Curious"
			}, {
				id: ⵠⵠⲆΔⲆ,
				"ⵠΔⵠ": Δᐃ.ⲆΔᐃⵠᐃΔΔ,
				"Δᐃᐃ": Δᐃ.ⵠⵠΔⲆΔⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔⵠⲆΔⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆΔⵠΔⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bored 2"
			}, {
				id: ⵠᐃⲆⵠΔⲆⵠ,
				"ⵠΔⵠ": Δᐃ.ⵠⵠᐃᐃΔⲆΔ,
				"Δᐃᐃ": Δᐃ.ⵠⲆᐃⲆⵠᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆⵠΔⲆΔⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆΔΔᐃΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Happy 4"
			}, {
				id: ⲆⵠᐃⲆⵠ,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠᐃΔΔᐃ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⲆⵠⲆᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠᐃΔⵠΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆⲆⵠⲆⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Scar 2"
			}, {
				id: 18,
				"ⵠΔⵠ": Δᐃ.ᐃΔⲆᐃΔᐃⵠ,
				"Δᐃᐃ": Δᐃ.ΔᐃⵠΔΔᐃⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠⲆⲆⲆⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔⲆΔΔᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Sick"
			}, {
				id: ΔΔΔⲆᐃ,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⲆΔⵠᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃⲆᐃⲆΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔⲆᐃΔΔⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔⵠⵠⵠᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Somnambule"
			}, {
				id: 24,
				"ⵠΔⵠ": Δᐃ.ΔᐃⲆᐃⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆΔᐃᐃⲆⲆΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔⵠⵠⵠⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔⵠΔΔΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[228],
				name: "Feel Bad"
			}, {
				id: 23,
				"ⵠΔⵠ": Δᐃ.ΔᐃⲆΔᐃᐃΔ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠΔΔΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠⵠⲆΔⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆⲆⲆⵠⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[228],
				name: "Mmmh."
			}, {
				id: 103,
				"ⵠΔⵠ": Δᐃ.ΔᐃᐃΔᐃΔⵠ,
				"Δᐃᐃ": Δᐃ.ΔⵠⵠΔⲆⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔⲆⲆΔⵠⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆⲆⲆⲆᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Panic"
			}, {
				id: 105,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⵠΔΔΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆΔΔⲆⵠⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔΔⵠΔᐃⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠⵠΔⵠⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Hypnotic"
			}, {
				id: 106,
				"ⵠΔⵠ": Δᐃ.ΔᐃᐃⵠⲆⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⲆΔᐃⵠᐃᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔΔⲆⲆⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠΔᐃΔΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Stars in the eyes"
			}, {
				id: 220,
				"ⵠΔⵠ": Δᐃ.ⲆΔⵠⲆⲆΔΔ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⲆᐃᐃΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆᐃⵠᐃΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆΔⵠⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Seams"
			}, {
				id: 104,
				"ⵠΔⵠ": Δᐃ.ⵠΔⲆΔⵠΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆΔΔᐃⵠⵠⵠ,
				"ⲆΔⵠⲆ": Δᐃ.Δᐃⵠⵠᐃⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔⲆⵠⵠⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Scared at night"
			}, {
				id: ⲆⲆⲆⲆᐃ,
				"ⵠΔⵠ": Δᐃ.ΔᐃⲆⲆⵠΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆᐃᐃᐃΔⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔⵠΔⵠᐃⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔⵠᐃⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Vampire"
			}, {
				id: 21,
				"ⵠΔⵠ": Δᐃ.ⲆᐃⵠⵠⵠⵠⲆ,
				"Δᐃᐃ": Δᐃ.ΔⲆΔΔⵠⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆΔᐃΔᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠⲆᐃⲆⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Zombie"
			}, {
				id: 22,
				"ⵠΔⵠ": Δᐃ.ᐃⲆᐃⵠⲆⲆⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆΔᐃᐃⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃⵠⲆᐃⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆᐃΔᐃⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[228],
				name: "Devaster"
			}, {
				id: 116,
				"ⵠΔⵠ": Δᐃ.ⲆⵠᐃΔⲆⲆΔ,
				"Δᐃᐃ": Δᐃ.ΔⵠΔᐃⲆΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠⲆⲆΔᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠⲆΔΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": "Fukss",
				name: "Dead Devaster"
			}, {
				id: 27,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⵠⲆⲆⵠⲆ,
				"Δᐃᐃ": Δᐃ.ⵠΔⲆᐃΔΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔΔⵠΔᐃⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔⲆⲆΔᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[212],
				name: ᐃ[378]
			}, {
				id: 28,
				"ⵠΔⵠ": Δᐃ.ⲆᐃⲆⲆᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ΔⵠⵠᐃᐃΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠᐃⵠⲆⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃΔᐃΔⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Bee"
			}, {
				id: 49,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆⵠᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⵠΔⵠΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃᐃᐃⵠⵠᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔⵠⲆⵠΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Camo Skin"
			}, {
				id: 58,
				"ⵠΔⵠ": Δᐃ.ⲆⵠᐃΔΔΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⵠᐃᐃⵠᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠⵠᐃΔΔⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔᐃⲆⵠᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Blue Limax Skin"
			}, {
				id: 59,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔᐃΔΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆⲆᐃⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔΔⲆⵠΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠⲆⵠᐃⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Red Limax Skin"
			}, {
				id: 94,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⲆⲆᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ΔΔⵠⵠⲆᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆΔⵠⲆⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠⲆΔⵠⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Mr. Pumpkin"
			}, {
				id: 109,
				"ⵠΔⵠ": Δᐃ.ⵠᐃᐃⵠᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆⵠᐃᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆᐃΔΔᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔΔⲆΔᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Wood"
			}, {
				id: 114,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⲆⵠΔⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔᐃᐃᐃΔⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠⵠⲆᐃⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃⲆⲆᐃⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Zebra"
			}, {
				id: 120,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠⵠᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠΔⲆᐃᐃᐃⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆⵠᐃⵠΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠⵠᐃⲆⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[436],
				name: "Tiger"
			}, {
				id: 134,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⵠᐃⵠᐃΔ,
				"Δᐃᐃ": Δᐃ.ΔΔᐃⲆⲆΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃΔΔⵠⲆⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃⲆΔⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": "Franchestcreator",
				name: "Day or Night"
			}, {
				id: 135,
				"ⵠΔⵠ": Δᐃ.ᐃⵠᐃⵠᐃᐃΔ,
				"Δᐃᐃ": Δᐃ.ΔᐃᐃΔⵠΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔᐃΔⲆΔⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠⵠΔᐃᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": "Poinet",
				name: "Square Starver"
			}, {
				id: 136,
				"ⵠΔⵠ": Δᐃ.ⵠⵠᐃΔⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ΔⵠⲆⲆⲆⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠⵠΔⲆⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.Δᐃⵠᐃⵠⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Voodoo Doll"
			}, {
				id: 137,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⵠⵠᐃᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⲆᐃⲆⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃᐃⲆᐃⲆᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆΔᐃΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Frankenstein"
			}, {
				id: 138,
				"ⵠΔⵠ": Δᐃ.ΔⲆᐃⲆⵠΔΔ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⲆΔⵠⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃⲆᐃᐃΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆⲆᐃᐃΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Old Mummy"
			}, {
				id: 139,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔΔⵠⲆΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠⵠᐃⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔᐃⵠⵠᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠᐃᐃᐃᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Werewolf"
			}, {
				id: 140,
				"ⵠΔⵠ": Δᐃ.ⲆΔᐃΔⲆΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆᐃᐃΔΔΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔⲆⵠΔΔⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃⵠᐃᐃⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Old Cthulhu"
			}, {
				id: 141,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠⵠᐃⵠⲆ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠᐃⲆᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆᐃⲆᐃᐃᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆⵠⲆᐃᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Sea Man"
			}, {
				id: 142,
				"ⵠΔⵠ": Δᐃ.ΔΔᐃⲆⵠⵠⵠ,
				"Δᐃᐃ": Δᐃ.ᐃΔᐃⲆᐃΔΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆⲆΔΔᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃᐃⲆᐃᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Old Pumpkin"
			}, {
				id: 148,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⵠΔΔⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆΔᐃΔⲆΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⲆΔᐃᐃⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃⲆⲆΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Old Snowman"
			}, {
				id: 149,
				"ⵠΔⵠ": Δᐃ.ⲆΔⵠⵠΔⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔΔΔⵠⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃΔᐃᐃᐃᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔΔⵠᐃᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Old Christmas Tree Man"
			}, {
				id: 150,
				"ⵠΔⵠ": Δᐃ.ᐃΔⲆⵠᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠΔⵠΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠᐃⲆⲆⵠⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔⵠⵠΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Old Mrs Bell"
			}, {
				id: 151,
				"ⵠΔⵠ": Δᐃ.ΔᐃⵠΔⵠⵠⵠ,
				"Δᐃᐃ": Δᐃ.ᐃΔᐃⵠⲆΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆⵠⵠΔⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃⵠⲆⲆᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Old Elfy"
			}, {
				id: 152,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⵠⲆΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠⲆⵠᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ΔᐃⲆⲆⵠᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠᐃⲆᐃⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Old Mr Present"
			}, {
				id: 153,
				"ⵠΔⵠ": Δᐃ.ΔΔΔΔΔⵠⲆ,
				"Δᐃᐃ": Δᐃ.ΔⵠΔᐃᐃᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃΔⵠⲆΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠⵠⵠᐃΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "My Dear Old Deer"
			}, {
				id: 154,
				"ⵠΔⵠ": Δᐃ.ᐃⵠΔΔΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠⵠΔⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆᐃⵠⲆᐃⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔΔⵠΔΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr Angel"
			}, {
				id: 155,
				"ⵠΔⵠ": Δᐃ.ⵠΔⵠⵠᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⲆΔΔΔΔ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆΔⲆᐃⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆΔᐃᐃⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr Ice Cube"
			}, {
				id: 156,
				"ⵠΔⵠ": Δᐃ.ᐃᐃΔΔⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠⲆᐃⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔⲆⵠⲆΔⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆⲆⵠⲆᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr Snowman"
			}, {
				id: 159,
				"ⵠΔⵠ": Δᐃ.ΔⵠΔⵠᐃⲆΔ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆⲆᐃⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆⲆΔΔΔⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔᐃΔΔⵠⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[436],
				name: "Crystal Sky Skin"
			}, {
				id: 167,
				"ⵠΔⵠ": Δᐃ.Ⲇⵠⵠᐃⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⵠᐃⵠⲆᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃᐃΔⲆΔΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆᐃΔΔⵠⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": "Franchestcreator",
				name: "Radioactive Starver"
			}, {
				id: 169,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⲆΔⵠⲆⵠ,
				"Δᐃᐃ": Δᐃ.ΔⲆᐃᐃΔⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.Ⲇᐃⵠᐃᐃⵠⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃΔΔⵠΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": "TheScaryBlaze",
				name: "Eaten Cookie"
			}, {
				id: 170,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠᐃᐃᐃᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠᐃᐃΔⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃᐃΔΔⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆᐃⲆⲆᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[344],
				name: "Blob Thing"
			}, {
				id: 172,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⵠⵠᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆΔⲆΔⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆᐃΔᐃⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⲆⲆΔΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[344],
				name: "Machine Mask"
			}, {
				id: 184,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⵠᐃΔⲆⲆ,
				"Δᐃᐃ": Δᐃ.ΔΔᐃⵠⵠⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠⵠᐃⲆΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔΔΔΔⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mad"
			}, {
				id: 206,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠⵠⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠᐃⲆΔΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠᐃΔⵠⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃⵠⲆᐃⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Survivor"
			}, {
				id: 209,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⵠᐃⲆᐃⲆ,
				"Δᐃᐃ": Δᐃ.ΔᐃⵠⲆⵠⵠⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔᐃΔᐃΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔⲆⵠⲆⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Starverator"
			}, {
				id: 230,
				"ⵠΔⵠ": Δᐃ.ΔⵠⵠΔⲆΔⲆ,
				"Δᐃᐃ": Δᐃ.ΔⲆᐃΔᐃΔΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆᐃⵠΔᐃᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆΔⵠⵠᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: ᐃ[194]
			}, {
				id: 231,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⲆⲆΔᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆΔᐃΔΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔⵠⲆⵠⵠⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆᐃΔΔΔᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Big Pile of Sand"
			}, {
				id: 232,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃᐃᐃᐃᐃ,
				"Δᐃᐃ": Δᐃ.ΔΔⲆᐃⲆⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠΔᐃᐃⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔΔΔΔᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Big Pile of Dirt"
			}, {
				id: 235,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⵠⲆΔᐃΔ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⵠΔΔᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠⵠΔΔⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠᐃⵠΔᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Sandstone"
			}, {
				id: 29,
				"ⵠΔⵠ": Δᐃ.ⲆⲆΔΔᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔᐃΔᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆΔⲆⵠⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔᐃⵠΔᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[228],
				name: "Lollipop 1"
			}, {
				id: 30,
				"ⵠΔⵠ": Δᐃ.ΔΔⲆΔΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⲆᐃᐃΔⲆΔ,
				"ⲆΔⵠⲆ": Δᐃ.Δᐃⵠⵠᐃᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔⵠⲆΔⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Lollipop 2"
			}, {
				id: 31,
				"ⵠΔⵠ": Δᐃ.ⵠΔⵠⲆΔΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠᐃⵠⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃᐃᐃΔⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠᐃΔⵠᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Lollipop 3"
			}, {
				id: 32,
				"ⵠΔⵠ": Δᐃ.ΔⲆᐃᐃⲆΔⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃᐃᐃᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠΔⲆⲆⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⲆⲆⵠⲆᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Lollipop 4"
			}, {
				id: 33,
				"ⵠΔⵠ": Δᐃ.ᐃᐃᐃᐃⲆΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔⵠᐃΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠᐃⵠΔΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃΔⲆⲆⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[171],
				name: "Yellow Bird"
			}, {
				id: 34,
				"ⵠΔⵠ": Δᐃ.ΔⲆᐃⵠⵠⲆⵠ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⵠΔᐃᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆⲆΔΔᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆᐃΔⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[171],
				name: "Red Bird"
			}, {
				id: 35,
				"ⵠΔⵠ": Δᐃ.ΔⵠⲆᐃᐃⲆⲆ,
				"Δᐃᐃ": Δᐃ.ⵠΔΔᐃΔⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠᐃⵠⲆⵠⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃⲆⲆᐃΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[171],
				name: "Blue Bird"
			}, {
				id: 37,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⲆΔⵠⵠⲆ,
				"Δᐃᐃ": Δᐃ.ⲆᐃΔᐃⵠᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠΔⲆΔΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠΔⲆΔⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[212],
				name: "Owl"
			}, {
				id: 52,
				"ⵠΔⵠ": Δᐃ.ΔᐃΔΔᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠᐃΔⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆⵠΔΔⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠⵠⲆⵠᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Nemo"
			}, {
				id: 53,
				"ⵠΔⵠ": Δᐃ.ⲆΔΔᐃⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⵠⵠΔΔⵠⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⲆΔᐃΔⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔⲆⵠⵠⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. Bread"
			}, {
				id: 74,
				"ⵠΔⵠ": Δᐃ.ⵠᐃΔⲆⵠΔᐃ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⵠΔⵠⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃᐃⲆΔⲆⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠΔⲆⵠⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": "Communist & Taco4Life",
				name: "Mr. Bread 2"
			}, {
				id: 75,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⵠⵠΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⲆΔΔⲆⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔⵠⲆΔⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆᐃⲆΔⲆⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": "Communist & Taco4Life",
				name: "Mr. Bread 3"
			}, {
				id: 60,
				"ⵠΔⵠ": Δᐃ.ΔᐃⵠΔⲆⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆΔΔⲆⵠᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃⵠⵠⵠⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠΔⲆΔⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Red Berry"
			}, {
				id: 61,
				"ⵠΔⵠ": Δᐃ.ⲆΔΔⲆⵠⵠⲆ,
				"Δᐃᐃ": Δᐃ.ΔΔⵠⲆΔᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔⲆⵠⵠᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆᐃΔⲆΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Old Berry"
			}, {
				id: 70,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⲆΔᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⵠᐃΔᐃΔⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃΔⵠⲆΔⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔⲆⲆⲆΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Cake"
			}, {
				id: 71,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⲆⲆⲆΔΔ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆᐃⲆᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃΔΔᐃᐃΔⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠⵠΔⵠⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Christmas Cake"
			}, {
				id: 77,
				"ⵠΔⵠ": Δᐃ.ᐃⵠΔⵠⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⵠΔⲆᐃⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔΔⲆⵠⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔΔⲆⵠΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": "Pancakez",
				name: "Mr. Pancake"
			}, {
				id: 87,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⲆⲆᐃᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⲆΔⵠᐃΔᐃⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃᐃⵠⲆΔᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔΔⲆᐃⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Mr. Taco"
			}, {
				id: 78,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⵠⲆⲆΔΔ,
				"Δᐃᐃ": Δᐃ.ΔⲆᐃⲆⲆⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔᐃⵠᐃⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔⵠΔⲆᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Mr. Bottle"
			}, {
				id: 79,
				"ⵠΔⵠ": Δᐃ.Δⵠᐃᐃⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⲆᐃᐃᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠΔⲆᐃⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠΔⲆⲆⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Mr. Bottle 2"
			}, {
				id: 97,
				"ⵠΔⵠ": Δᐃ.ΔᐃΔᐃᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ⲆᐃᐃⵠΔⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⲆⲆΔᐃᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃⵠᐃⲆΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Pink Rabbit"
			}, {
				id: 102,
				"ⵠΔⵠ": Δᐃ.ⲆⵠΔⵠⲆᐃᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔᐃΔⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆⲆⲆᐃᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠΔΔⵠⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Marshmallow"
			}, {
				id: 107,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆᐃᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⵠᐃⵠΔΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆΔⵠΔᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔⵠⵠⲆⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Fox"
			}, {
				id: 132,
				"ⵠΔⵠ": Δᐃ.ⵠⲆΔⵠⵠᐃΔ,
				"Δᐃᐃ": Δᐃ.ᐃΔᐃⵠΔⲆΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔᐃⲆΔᐃⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔⲆⵠΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Raccoon"
			}, {
				id: 111,
				"ⵠΔⵠ": Δᐃ.ᐃΔΔⵠΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ΔⵠⵠᐃΔⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃΔⲆⲆᐃΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃⵠΔΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Cloud"
			}, {
				id: 113,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃⵠⵠᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠⲆⲆΔⵠⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔᐃᐃⵠᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔⵠᐃⵠᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Moon"
			}, {
				id: 117,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⵠⵠᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔⵠΔΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⲆΔⲆⲆΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠᐃⲆⵠⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Mr. Panda"
			}, {
				id: 118,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆⲆΔⵠΔ,
				"Δᐃᐃ": Δᐃ.ⵠΔⲆⵠⵠΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔⲆⵠΔΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔᐃⵠⲆΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Mr. Strawberry"
			}, {
				id: 119,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆΔⵠⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔΔᐃⲆΔⵠⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃΔΔΔⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠΔⲆᐃᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": "eogito & Sushuui",
				name: "Mummy"
			}, {
				id: 122,
				"ⵠΔⵠ": Δᐃ.ᐃⲆᐃΔᐃᐃⲆ,
				"Δᐃᐃ": Δᐃ.ΔᐃΔⲆⵠⵠⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠⲆⵠⵠΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆᐃⵠⲆⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Dino"
			}, {
				id: 127,
				"ⵠΔⵠ": Δᐃ.ΔᐃⵠᐃⵠᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⲆΔᐃᐃᐃⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔⵠΔⲆᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔᐃΔⲆΔΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[290],
				name: "Mr. Koala"
			}, {
				id: 160,
				"ⵠΔⵠ": Δᐃ.ⲆⲆΔⵠⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⲆᐃⲆⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃᐃᐃᐃᐃⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃⵠᐃᐃΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bottle Protection"
			}, {
				id: 162,
				"ⵠΔⵠ": Δᐃ.ᐃⲆᐃⵠⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆΔⲆᐃΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆᐃᐃΔᐃⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃⲆⵠᐃⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[436],
				name: "Leaf Man"
			}, {
				id: 166,
				"ⵠΔⵠ": Δᐃ.ⲆΔᐃΔΔΔΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠᐃᐃⲆᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆᐃⲆΔⵠⵠⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔⵠⵠⵠⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Bubble"
			}, {
				id: 174,
				"ⵠΔⵠ": Δᐃ.ⲆⵠᐃⵠᐃⵠⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔⵠΔᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ΔᐃᐃⲆᐃⵠⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠⵠᐃΔΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[552],
				name: "Potato"
			}, {
				id: 171,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⲆⲆⵠᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⲆⵠⵠⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃⲆᐃᐃⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠᐃΔⵠΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[344],
				name: "Axolotl"
			}, {
				id: 178,
				"ⵠΔⵠ": Δᐃ.ⲆᐃᐃⲆⲆᐃⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠⵠΔᐃⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠⵠⲆⲆᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆᐃⲆΔᐃⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Rusted Machine"
			}, {
				id: 179,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃᐃⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⵠΔⵠᐃᐃⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔᐃⵠᐃᐃΔⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆᐃⵠⲆⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Starving Machine"
			}, {
				id: 181,
				"ⵠΔⵠ": Δᐃ.ⲆⵠᐃᐃⵠΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆΔΔⵠⵠΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠΔⵠⲆⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔᐃᐃⲆⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Night Stars"
			}, {
				id: 191,
				"ⵠΔⵠ": Δᐃ.ᐃⲆΔⲆΔⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⲆΔⵠⲆⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⲆΔⵠᐃΔⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆᐃⵠⵠⵠⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Blue Jay"
			}, {
				id: 198,
				"ⵠΔⵠ": Δᐃ.ΔⵠᐃⲆⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃᐃΔΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔⵠⲆΔᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃΔᐃⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": "AWTP",
				name: "Dave"
			}, {
				id: 200,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆᐃᐃᐃΔ,
				"Δᐃᐃ": Δᐃ.ΔΔᐃⲆⲆᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠⵠⲆᐃⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆᐃΔΔⵠΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": "Jinty",
				name: "Smug"
			}, {
				id: 203,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⵠΔⵠᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠΔᐃⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔⵠᐃⲆⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠⵠⲆᐃⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Reclaimed"
			}, {
				id: 204,
				"ⵠΔⵠ": Δᐃ.ΔΔΔᐃⲆⲆΔ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃⵠⵠⵠⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠⲆᐃΔᐃⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆᐃᐃᐃⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Legacy Wolf"
			}, {
				id: 211,
				"ⵠΔⵠ": Δᐃ.ⲆⵠᐃΔⵠΔⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔΔᐃⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆⵠᐃᐃᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔᐃⲆᐃΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Starver of the Seas"
			}, {
				id: 213,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃᐃⵠᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃΔᐃⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔᐃᐃΔᐃΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆⵠⲆⲆⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Ice"
			}, {
				id: 219,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⲆⲆⲆⵠΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠΔᐃⲆΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠⲆⵠⵠᐃⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆΔΔᐃΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": "Ramil",
				name: "Sandwich Cookie"
			}, {
				id: 221,
				"ⵠΔⵠ": Δᐃ.ΔᐃⵠⲆᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ᐃΔⲆΔΔΔΔ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃᐃⲆⵠⵠΔⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔⲆᐃⵠⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Purple Geode"
			}, {
				id: 222,
				"ⵠΔⵠ": Δᐃ.ᐃΔΔⲆⲆΔⵠ,
				"Δᐃᐃ": Δᐃ.ΔⲆᐃᐃⵠⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃΔᐃᐃΔⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔⵠⵠⲆⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Cyan Geode"
			}, {
				id: 223,
				"ⵠΔⵠ": Δᐃ.ⵠᐃΔⵠⵠΔⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃⵠᐃⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔⲆⵠⵠΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔⲆⵠⲆⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Yellow Geode"
			}, {
				id: 228,
				"ⵠΔⵠ": Δᐃ.ⵠᐃᐃⵠⵠΔⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⵠᐃᐃⵠⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆᐃΔΔⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠⵠᐃᐃⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Furnace Head"
			}, {
				id: 229,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠΔΔⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆΔⲆᐃⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆΔΔⲆⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔᐃⲆⲆΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bag"
			}, {
				id: 227,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⵠᐃΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⵠΔⵠⲆⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃΔⵠΔⵠᐃⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆⲆⲆⵠΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Lit Furnace Head"
			}, {
				id: 25,
				"ⵠΔⵠ": Δᐃ.ⵠΔᐃΔᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ΔᐃⲆΔⵠⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆΔΔᐃᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆⲆⲆⵠⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[228],
				name: "Test Dummy"
			}, {
				id: 41,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔⲆⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ᐃΔⲆⲆⵠⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠᐃⲆⲆⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆⲆᐃⲆᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Star-ver"
			}, {
				id: 43,
				"ⵠΔⵠ": Δᐃ.ⲆᐃΔⵠᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ᐃΔᐃⲆⲆⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃⲆᐃⲆΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃⲆⵠᐃᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[421],
				name: "Starver Chest"
			}, {
				id: 88,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠΔᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ᐃΔΔⵠⵠᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔᐃᐃᐃΔᐃⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠⲆᐃᐃⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[421],
				name: "Starver Workbench"
			}, {
				id: 121,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⲆᐃⲆΔⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⲆⲆΔΔᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠᐃⲆΔⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠⵠⵠⵠⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[290],
				name: "Fish"
			}, {
				id: 39,
				"ⵠΔⵠ": Δᐃ.ΔⲆᐃᐃⲆⵠΔ,
				"Δᐃᐃ": Δᐃ.ⲆΔⵠⵠᐃᐃⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔᐃᐃⵠⵠⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠⲆᐃⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": "Negligent4Dia",
				name: "Crab"
			}, {
				id: 40,
				"ⵠΔⵠ": Δᐃ.ΔΔⲆⵠΔⵠⵠ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⲆᐃᐃⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠⲆᐃⲆᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠⵠⵠᐃᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": "Negligent4Dia",
				name: "Piranha"
			}, {
				id: 36,
				"ⵠΔⵠ": Δᐃ.ⵠᐃᐃⵠⲆΔΔ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃΔᐃⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃΔⵠⲆΔⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠΔᐃΔΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Winter Fox"
			}, {
				id: 69,
				"ⵠΔⵠ": Δᐃ.ⵠᐃᐃΔⲆⵠΔ,
				"Δᐃᐃ": Δᐃ.ᐃⲆᐃⵠΔᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃᐃΔⲆΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠᐃᐃΔⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": "Zed",
				name: "Baby Foxy"
			}, {
				id: 51,
				"ⵠΔⵠ": Δᐃ.ΔᐃⲆᐃⲆΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⵠΔⵠΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠⲆᐃⵠⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⲆⲆⵠⲆΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": "HOWI",
				name: "Winter Bear"
			}, {
				id: 133,
				"ⵠΔⵠ": Δᐃ.ⲆⵠΔᐃⲆΔΔ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⵠΔΔⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃΔⵠᐃᐃᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆⵠΔΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Hawk"
			}, {
				id: 55,
				"ⵠΔⵠ": Δᐃ.ⲆⲆᐃⵠⲆⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆᐃᐃⲆⲆΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠⲆΔΔΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠΔᐃⵠⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Nice Little Yuki"
			}, {
				id: 68,
				"ⵠΔⵠ": Δᐃ.ⵠⲆΔΔᐃⲆⲆ,
				"Δᐃᐃ": Δᐃ.ΔⲆⲆⲆⵠΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆⵠⲆᐃΔⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔⵠⲆΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Baby Yuki"
			}, {
				id: 62,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆⵠⲆⵠⲆ,
				"Δᐃᐃ": Δᐃ.ⵠΔⲆⲆⵠⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔⲆᐃᐃⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔᐃᐃⲆᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. Carrot"
			}, {
				id: 56,
				"ⵠΔⵠ": Δᐃ.ⲆΔⲆⵠⵠⵠⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠᐃᐃᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠⲆⲆᐃᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔᐃΔΔᐃᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bat Limax"
			}, {
				id: 72,
				"ⵠΔⵠ": Δᐃ.ⲆᐃᐃⲆⵠⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆⲆⲆⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠΔΔᐃⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃΔⵠⵠᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Mr. Crate"
			}, {
				id: 73,
				"ⵠΔⵠ": Δᐃ.ΔΔⲆᐃⵠⵠΔ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠΔΔᐃⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠⲆⲆΔᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠⵠⵠⵠⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": "Taco4Life & eogito",
				name: "Mr. Spider"
			}, {
				id: 93,
				"ⵠΔⵠ": Δᐃ.ⲆⵠᐃⲆΔⲆᐃ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠⵠΔⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔΔΔΔⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆⲆⵠⲆⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[333],
				name: "Mr. Spider 2"
			}, {
				id: 82,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⵠⲆⲆᐃΔ,
				"Δᐃᐃ": Δᐃ.ΔΔⲆΔΔᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔᐃⲆⲆⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃΔᐃΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. Blue Starfish"
			}, {
				id: 83,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⵠⵠΔⲆΔ,
				"Δᐃᐃ": Δᐃ.ΔᐃⵠΔΔΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃᐃᐃᐃᐃⵠⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆⲆΔⵠⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. Orange Starfish"
			}, {
				id: 84,
				"ⵠΔⵠ": Δᐃ.ᐃᐃΔᐃⲆᐃⵠ,
				"Δᐃᐃ": Δᐃ.ΔⵠΔⵠⵠⵠⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃⵠΔᐃΔⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠΔⲆⵠⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. Pink Starfish"
			}, {
				id: 85,
				"ⵠΔⵠ": Δᐃ.ⲆᐃΔⲆⵠⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃⲆᐃⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔᐃⵠⵠΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔᐃᐃᐃᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. ShellMauve"
			}, {
				id: 86,
				"ⵠΔⵠ": Δᐃ.ⵠΔᐃⲆⲆⵠΔ,
				"Δᐃᐃ": Δᐃ.ⵠⲆΔⵠⵠᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔΔⲆⲆᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆᐃᐃⵠΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. Shell Bead"
			}, {
				id: 96,
				"ⵠΔⵠ": Δᐃ.ᐃⲆΔⲆᐃᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃΔΔΔⲆᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔᐃⵠΔⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.Δⵠⵠⵠⵠᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": "Fukss",
				name: "Angry Crab"
			}, {
				id: 98,
				"ⵠΔⵠ": Δᐃ.ΔⵠᐃᐃⵠᐃΔ,
				"Δᐃᐃ": Δᐃ.ΔΔΔⵠᐃⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔⲆⵠΔⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔᐃⲆᐃΔⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Penguin"
			}, {
				id: 126,
				"ⵠΔⵠ": Δᐃ.ᐃΔⲆᐃⵠᐃΔ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⲆⵠⵠⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.Δⵠᐃⵠⵠᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔΔⵠᐃⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[333],
				name: "Mr. Boar"
			}, {
				id: 145,
				"ⵠΔⵠ": Δᐃ.ΔᐃⲆᐃᐃΔⵠ,
				"Δᐃᐃ": Δᐃ.ΔⲆᐃᐃΔΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠΔⵠΔⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆⵠⵠⵠΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "I saw you"
			}, {
				id: 146,
				"ⵠΔⵠ": Δᐃ.ⵠΔⲆᐃΔⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠΔⵠᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠᐃⵠᐃⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔⲆⵠᐃᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "It was funny"
			}, {
				id: 147,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⵠᐃΔⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⵠᐃⲆⵠⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔΔᐃⲆᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔⵠᐃⵠᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "You can scream"
			}, {
				id: 158,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⵠⲆⵠⵠΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠᐃⵠⵠⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆⵠⵠⵠΔⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔΔⵠΔⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Mr. Book"
			}, {
				id: 163,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃⵠΔΔⵠ,
				"Δᐃᐃ": Δᐃ.ΔⵠΔⵠᐃⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆᐃⲆⵠᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔⵠΔⵠᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[333],
				name: "Mr. Mammoth"
			}, {
				id: 164,
				"ⵠΔⵠ": Δᐃ.ⲆⲆᐃⵠⵠᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⵠⵠΔᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠⲆΔⲆΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆⲆΔΔⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": "SoOw",
				name: "Mr. Mammoth 2"
			}, {
				id: 161,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⵠᐃᐃᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃⵠᐃᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠⵠⲆᐃΔⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠᐃᐃᐃⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Nightmare"
			}, {
				id: 168,
				"ⵠΔⵠ": Δᐃ.ΔⵠⵠᐃᐃΔⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⵠᐃΔⵠΔΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆᐃⵠⲆᐃⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔⵠᐃᐃᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Shiny Crystal"
			}, {
				id: 173,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⲆᐃⲆᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⲆⲆⵠᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆΔⲆΔᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔᐃⲆΔᐃᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Water skin"
			}, {
				id: 175,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⵠⵠⲆΔΔ,
				"Δᐃᐃ": Δᐃ.ⲆΔᐃᐃⲆᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔΔᐃΔᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔⲆᐃⲆⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Fall Berry Bush Starver"
			}, {
				id: 176,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆⵠΔᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆⲆᐃΔΔ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃᐃⵠΔⲆᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃᐃⲆᐃⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Christmas Berry Bush Starver"
			}, {
				id: 177,
				"ⵠΔⵠ": Δᐃ.ΔΔΔⵠⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔΔⲆΔᐃᐃⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔᐃΔⲆᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠΔᐃⲆᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Berry Bush Starver"
			}, {
				id: 182,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃⲆᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠⵠⲆⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆⵠᐃⲆᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔᐃΔⲆΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamer"
			}, {
				id: 185,
				"ⵠΔⵠ": Δᐃ.ΔΔᐃΔⵠΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔΔᐃᐃⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠⲆⲆᐃᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆⲆⵠΔⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Wolf"
			}, {
				id: 186,
				"ⵠΔⵠ": Δᐃ.ᐃΔⲆⲆΔⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⵠΔⵠⲆᐃΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆᐃⵠᐃⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔΔⵠΔᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Snow Wolf"
			}, {
				id: 187,
				"ⵠΔⵠ": Δᐃ.ⲆⵠᐃᐃΔⲆᐃ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠⲆⵠⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆᐃⲆⵠᐃⵠⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃⵠⵠᐃΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Rabbit"
			}, {
				id: 188,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆΔⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃΔᐃⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔⲆⲆᐃⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆⲆᐃⲆᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Snow Rabbit"
			}, {
				id: 189,
				"ⵠΔⵠ": Δᐃ.ⲆΔⵠⲆⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠⵠⲆⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔⲆⲆᐃⵠⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠⲆⲆᐃΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Bear"
			}, {
				id: 190,
				"ⵠΔⵠ": Δᐃ.ΔΔΔᐃⵠᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⵠΔⵠΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠⵠⲆⵠᐃⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔΔΔⵠⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Polar Bear"
			}, {
				id: 196,
				"ⵠΔⵠ": Δᐃ.ᐃΔΔΔΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠⲆⵠⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠⲆΔⵠΔⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠΔᐃⲆⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Crying Angel"
			}, {
				id: 202,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⲆⵠⵠⲆⲆ,
				"Δᐃᐃ": Δᐃ.ΔⲆⲆⵠᐃᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔⵠⵠᐃⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔⲆⲆⲆⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Fennec"
			}, {
				id: 207,
				"ⵠΔⵠ": Δᐃ.ᐃΔⲆᐃΔⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⵠΔⵠΔⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆᐃΔΔⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔᐃᐃΔⵠΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Decay"
			}, {
				id: 212,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⵠᐃᐃᐃⲆ,
				"Δᐃᐃ": Δᐃ.ΔᐃᐃⲆᐃΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆΔΔΔΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔΔΔⵠΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Pillow"
			}, {
				id: 218,
				"ⵠΔⵠ": Δᐃ.ⲆΔΔΔΔᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⲆΔᐃΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔⲆΔⵠⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆΔⲆΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Exotic"
			}, {
				id: 224,
				"ⵠΔⵠ": Δᐃ.ᐃⲆΔᐃⲆΔⵠ,
				"Δᐃᐃ": Δᐃ.ΔΔᐃΔΔΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃᐃⲆΔᐃᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆⲆⵠΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Apple"
			}, {
				id: 225,
				"ⵠΔⵠ": Δᐃ.ΔⵠᐃᐃⵠΔⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃΔΔᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃΔⲆᐃᐃᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔⲆⵠᐃⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Golden Apple"
			}, {
				id: 233,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠᐃᐃΔⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆᐃⲆΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠᐃⲆⵠᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆᐃⲆⵠⵠⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Lava Cube"
			}, {
				id: 234,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⵠⵠᐃᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⵠΔⲆⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃⲆΔⵠⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔⲆΔⲆⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Dragon Cube"
			}, {
				id: 42,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠⵠΔᐃⵠ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔⲆᐃⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆᐃⵠⲆⵠⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃᐃΔᐃᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[212],
				name: "Will-O'-The-Wisp"
			}, {
				id: 91,
				"ⵠΔⵠ": Δᐃ.ᐃⵠΔᐃᐃⲆΔ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃᐃⵠⲆΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆⲆⵠΔΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔᐃⵠⲆᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": "ExpertyAnimations",
				name: "Flame"
			}, {
				id: 26,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠⵠⲆΔⲆ,
				"Δᐃᐃ": Δᐃ.ΔᐃⵠⵠᐃᐃⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆᐃⲆⵠⲆⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃᐃΔⲆΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Be a Tree"
			}, {
				id: 38,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⵠΔΔⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⵠⵠⲆⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠΔᐃⵠⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆᐃⲆⲆΔᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[212],
				name: "Toxic Mutant"
			}, {
				id: 50,
				"ⵠΔⵠ": Δᐃ.ΔΔⲆᐃΔⲆᐃ,
				"Δᐃᐃ": Δᐃ.ΔᐃⲆΔΔⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠΔⲆΔⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⲆΔᐃᐃⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[421],
				name: "Mr. Tomato"
			}, {
				id: 54,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃΔΔᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠⵠΔᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆᐃⲆⲆⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠⵠᐃⵠΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. Mauve, the Lapa"
			}, {
				id: 57,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⲆΔΔᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⲆΔⲆⵠᐃⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠΔⵠⵠᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⲆΔⲆΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Golden Fish"
			}, {
				id: 64,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃΔⲆᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆΔΔⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠⲆᐃⵠⵠⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔᐃᐃⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "LapaMauve"
			}, {
				id: 65,
				"ⵠΔⵠ": Δᐃ.ⵠⵠΔᐃΔΔᐃ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⲆΔΔᐃⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠⵠⵠⲆΔΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⲆᐃᐃⵠᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "LapaMauve "
			}, {
				id: 92,
				"ⵠΔⵠ": Δᐃ.ⲆⲆΔⵠⲆᐃᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔⵠⲆᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⲆᐃᐃᐃᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔᐃΔΔⲆⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. Burger"
			}, {
				id: 66,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⲆᐃΔΔΔ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⲆᐃΔᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃⲆᐃⲆᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆᐃΔΔᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Tropical Starver"
			}, {
				id: 80,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠⵠΔⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⵠΔΔΔⲆⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⲆΔΔΔᐃⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃⲆⵠᐃΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. ShellPink"
			}, {
				id: 81,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆᐃⵠᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆⲆᐃⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔᐃᐃⲆⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⲆⲆᐃᐃⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. OranShell"
			}, {
				id: 99,
				"ⵠΔⵠ": Δᐃ.ᐃⲆᐃⵠⵠᐃᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔⲆⵠⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆΔᐃⲆᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔΔⲆⲆⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Pepe"
			}, {
				id: 100,
				"ⵠΔⵠ": Δᐃ.ΔⲆΔᐃᐃᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆᐃⵠⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠⵠᐃΔΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔᐃⵠΔⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": "fatant",
				name: "Mr. Ant"
			}, {
				id: 115,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔⵠⵠΔᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⲆΔΔᐃⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔᐃⲆⵠⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃⵠΔⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[290],
				name: "Mr. Watermelon"
			}, {
				id: 101,
				"ⵠΔⵠ": Δᐃ.ⲆⵠΔΔᐃᐃΔ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆΔⲆⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆᐃⲆⲆⲆΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃⲆⲆΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Mr. Thornbush"
			}, {
				id: 131,
				"ⵠΔⵠ": Δᐃ.ΔΔΔΔⲆᐃΔ,
				"Δᐃᐃ": Δᐃ.ΔⲆΔΔᐃⲆΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔᐃⲆⵠⵠⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃⲆⲆⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Cthulhu"
			}, {
				id: 143,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃᐃΔᐃΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆⵠΔⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.Ⲇᐃᐃⵠᐃᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃᐃᐃⵠΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Mr. Cactus"
			}, {
				id: 144,
				"ⵠΔⵠ": Δᐃ.ⲆᐃⲆΔⵠΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⵠᐃⵠᐃΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆⵠΔⵠᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔΔⲆⲆΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Momo"
			}, {
				id: 180,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆⵠΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃⵠΔΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆⵠⲆⲆᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠᐃⵠⵠⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Scream"
			}, {
				id: 193,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⲆⲆΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆᐃΔΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃΔΔΔⲆΔⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃᐃⵠⲆⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Dragon"
			}, {
				id: 195,
				"ⵠΔⵠ": Δᐃ.ΔᐃⲆᐃᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠΔᐃᐃᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆᐃⵠⵠⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠᐃᐃᐃⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Forest Spirit"
			}, {
				id: 197,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⲆᐃⵠⲆᐃ,
				"Δᐃᐃ": Δᐃ.ΔⵠΔⲆΔⵠⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆᐃⵠⵠΔⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃΔΔⵠⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Evil Goat"
			}, {
				id: 199,
				"ⵠΔⵠ": Δᐃ.ᐃⲆΔⲆⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⲆΔᐃⲆⵠᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⲆΔⵠⲆⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔᐃᐃⲆⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Rotten"
			}, {
				id: 201,
				"ⵠΔⵠ": Δᐃ.ⲆΔⵠΔⲆΔΔ,
				"Δᐃᐃ": Δᐃ.ΔΔᐃⵠΔⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠⲆᐃⲆᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆᐃⵠᐃΔⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Fossil"
			}, {
				id: 205,
				"ⵠΔⵠ": Δᐃ.ΔⵠΔⵠᐃⵠⲆ,
				"Δᐃᐃ": Δᐃ.ΔⵠᐃⵠΔⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆⲆΔⵠⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔⵠᐃΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Spectrum"
			}, {
				id: 210,
				"ⵠΔⵠ": Δᐃ.ΔⵠΔᐃⲆΔΔ,
				"Δᐃᐃ": Δᐃ.ⵠΔⲆⵠⵠᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔⵠᐃᐃⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃΔⵠⲆΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": "Helpy",
				name: "Black Cat"
			}, {
				id: 214,
				"ⵠΔⵠ": Δᐃ.ⲆⲆᐃⲆⵠΔᐃ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⵠⲆᐃΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ΔᐃⲆᐃⵠᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔᐃᐃⲆΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Lynx"
			}, {
				id: 215,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆᐃᐃⵠΔ,
				"Δᐃᐃ": Δᐃ.ⲆΔⲆⲆⵠᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠⲆⵠΔΔⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃᐃᐃⵠΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Warg"
			}, {
				id: 217,
				"ⵠΔⵠ": Δᐃ.ⵠᐃΔⵠⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ᐃΔⵠⲆᐃⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠⲆᐃⵠᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠⲆΔΔᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Menhir"
			}, {
				id: 95,
				"ⵠΔⵠ": Δᐃ.ᐃⵠᐃⵠΔⲆΔ,
				"Δᐃᐃ": Δᐃ.ΔⵠΔᐃⵠⲆΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔΔⵠⲆⵠⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠΔⵠΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Mr. Garlic"
			}, {
				id: 76,
				"ⵠΔⵠ": Δᐃ.ⵠΔⲆⲆⲆᐃⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆΔᐃⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆᐃⵠⲆⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔⵠⲆᐃⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[212],
				name: "Robot Dragon"
			}, {
				id: 44,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⵠᐃΔΔᐃ,
				"Δᐃᐃ": Δᐃ.Δⵠᐃⵠⵠⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆΔᐃᐃⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆᐃᐃᐃⲆΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[212],
				name: "Lava Dragon Version 1"
			}, {
				id: 90,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⲆᐃᐃᐃᐃ,
				"Δᐃᐃ": Δᐃ.ΔΔᐃᐃΔⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃⲆΔⲆⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠᐃⵠΔⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": "ExpertyAnimations",
				name: "Lava Dragon Version 2"
			}, {
				id: 124,
				"ⵠΔⵠ": Δᐃ.ᐃᐃΔᐃᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⵠⵠᐃΔᐃᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆⵠⲆᐃᐃⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠⲆᐃᐃΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Lava Dragon Version 3"
			}, {
				id: 45,
				"ⵠΔⵠ": Δᐃ.ΔⲆᐃᐃΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⵠⵠⵠⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠⵠᐃΔⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠⲆᐃΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[171],
				name: "Ice Dragon Version 1"
			}, {
				id: 46,
				"ⵠΔⵠ": Δᐃ.ᐃᐃᐃΔⲆⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃΔᐃⲆⲆᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃᐃⵠⲆΔⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆⲆⵠⲆΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[212],
				name: "Ice Dragon Version 2"
			}, {
				id: 108,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠⵠⲆⵠΔ,
				"Δᐃᐃ": Δᐃ.ΔΔⵠⵠᐃΔΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⲆΔᐃᐃⵠⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆΔΔᐃⲆⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Ice Dragon Version 3"
			}, {
				id: 123,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⵠΔⵠⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⲆᐃΔΔΔΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔⲆⵠᐃᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃΔⵠΔΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Baby Dragon Version 1"
			}, {
				id: 128,
				"ⵠΔⵠ": Δᐃ.ΔᐃⲆⲆᐃⲆΔ,
				"Δᐃᐃ": Δᐃ.ᐃΔⵠΔᐃᐃⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠΔⲆᐃᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃᐃΔᐃⲆⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[290],
				name: "Baby Dragon Version 2"
			}, {
				id: 125,
				"ⵠΔⵠ": Δᐃ.ⲆᐃⲆⲆⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⲆΔⵠⲆᐃⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠⲆⵠΔΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⲆΔΔⵠΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Baby Lava"
			}, {
				id: 47,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⲆⵠΔⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠᐃⲆⵠΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔᐃⵠⲆΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠΔΔᐃⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Kraken"
			}, {
				id: 129,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠᐃⵠⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⲆΔⵠΔΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⵠⵠᐃΔⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠΔΔΔᐃⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Sandworm"
			}, {
				id: 63,
				"ⵠΔⵠ": Δᐃ.ⵠⲆΔΔⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⲆᐃΔΔⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⵠΔⲆⵠᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠⵠⲆⲆᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. Golden Bread"
			}, {
				id: 67,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆⵠⲆΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⲆΔⵠⲆⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠⵠᐃΔⲆᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠᐃᐃΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": "ForgottenHeroe",
				name: "Starver Ores"
			}, {
				id: 130,
				"ⵠΔⵠ": Δᐃ.ΔⵠⵠΔⵠⲆᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠᐃΔⵠⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠΔⵠⵠᐃΔⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⲆΔⲆΔᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Poo"
			}, {
				id: 89,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⵠᐃᐃΔⲆ,
				"Δᐃᐃ": Δᐃ.ΔΔⵠⲆᐃⲆΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔⲆⵠΔᐃᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠᐃⲆⵠᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": "Poinet",
				name: "Volcano Starver"
			}, {
				id: 112,
				"ⵠΔⵠ": Δᐃ.ⲆΔⵠᐃⲆᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠⵠⲆⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔΔΔᐃⲆΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔᐃⵠⵠΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Lava Starver"
			}, {
				id: 183,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠⲆΔΔᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆⵠΔΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔⵠᐃⲆⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔᐃⵠΔᐃᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Revaster"
			}, {
				id: 192,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠᐃⵠΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔΔⲆⵠΔ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆΔᐃᐃᐃᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆᐃᐃⵠᐃΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Awakened"
			}, {
				id: 194,
				"ⵠΔⵠ": Δᐃ.ⵠΔⲆΔΔⵠᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔᐃⵠⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠⲆΔΔᐃⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⲆᐃᐃᐃⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Ice Dragon"
			}, {
				id: 236,
				"ⵠΔⵠ": Δᐃ.ΔⲆΔᐃᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ΔΔΔᐃΔⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆᐃᐃⵠΔⵠᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠΔⲆⵠᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Crystal Dragon"
			}, {
				id: 208,
				"ⵠΔⵠ": Δᐃ.ⲆΔⲆᐃⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⵠⵠΔᐃΔ,
				"ⲆΔⵠⲆ": Δᐃ.ΔᐃⵠᐃᐃᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠΔΔΔᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bone Dragon"
			}, {
				id: 216,
				"ⵠΔⵠ": Δᐃ.ⲆⵠΔⵠᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠⲆⵠⲆⵠ,
				"ⲆΔⵠⲆ": Δᐃ.ⲆⲆⲆΔⵠⲆⲆ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠⵠⵠΔΔⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Warg Ghost"
			}, {
				id: 226,
				"ⵠΔⵠ": Δᐃ.ΔⵠⲆΔⵠᐃᐃ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠⲆⲆⲆⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃⲆΔⲆᐃᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔⵠⲆᐃΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Cursed"
			}, {
				id: 48,
				"ⵠΔⵠ": Δᐃ.ΔΔΔᐃⲆΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆΔⲆᐃΔᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ᐃΔⲆΔⲆΔⵠ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃΔᐃⵠᐃⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Robot"
			}, {
				id: 110,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠⵠᐃⵠⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠⲆΔⵠⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠⵠⲆΔⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⵠᐃΔΔⵠⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Blue Butterfly"
			}, {
				id: 157,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆΔⵠΔⵠ,
				"Δᐃᐃ": Δᐃ.ΔᐃⲆⲆⵠⲆᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ΔΔᐃᐃᐃΔᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠᐃΔΔⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Yrifox"
			}, {
				id: 165,
				"ⵠΔⵠ": Δᐃ.ΔΔⵠⵠᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ΔΔⲆⲆᐃΔⲆ,
				"ⲆΔⵠⲆ": Δᐃ.ΔⵠⲆᐃⵠᐃΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ΔᐃᐃᐃⲆⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ,
				"ᐃΔⲆ": "OmarJr13",
				name: "Blob Skin"
			}, {
				id: 237,
				"ⵠΔⵠ": Δᐃ.ⲆᐃΔⲆΔⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⵠⲆⲆⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃⲆᐃΔⵠΔ,
				"Ⲇᐃᐃⵠ": Δᐃ.ⲆⵠΔᐃⵠΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ,
				"ᐃΔⲆ": "NotBonnie",
				name: "NotBonnie"
			}, {
				id: 238,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⵠᐃⵠᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⲆΔΔᐃⵠᐃ,
				"ⲆΔⵠⲆ": Δᐃ.ⵠᐃⵠⵠⵠⲆᐃ,
				"Ⲇᐃᐃⵠ": Δᐃ.ᐃⵠΔⵠⲆᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ,
				"ᐃΔⲆ": "NotBonnie",
				name: "Cynder"
			}],
			"ⲆⵠⲆΔ": [{
				id: ⵠᐃⵠ,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⲆⵠᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠΔⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bag 1"
			}, {
				id: ⵠᐃᐃ,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆᐃΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⵠᐃΔⵠⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Old Bag"
			}, {
				id: ΔΔⵠⲆ,
				"ⵠΔⵠ": Δᐃ.ᐃΔΔᐃⲆΔΔ,
				"Δᐃᐃ": Δᐃ.ⵠΔᐃΔⵠⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bag 2"
			}, {
				id: 3,
				"ⵠΔⵠ": Δᐃ.ᐃⲆΔᐃⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⲆᐃΔᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bag 3"
			}, {
				id: ᐃΔΔΔⲆ,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃⲆΔⲆⲆ,
				"Δᐃᐃ": Δᐃ.ᐃΔΔᐃᐃΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bag 4"
			}, {
				id: 5,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⵠⵠΔᐃᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃⵠΔᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bag 5"
			}, {
				id: Δᐃⵠᐃⵠᐃᐃ,
				"ⵠΔⵠ": Δᐃ.ΔⵠⲆⲆⲆΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠΔⲆⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wood Pickaxe Bag"
			}, {
				id: ⲆᐃΔΔᐃⵠⲆ,
				"ⵠΔⵠ": Δᐃ.ᐃᐃᐃᐃⵠⲆⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⵠᐃⲆⲆⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[424],
				name: "Wood Carrier"
			}, {
				id: 37,
				"ⵠΔⵠ": Δᐃ.ⲆⲆΔΔᐃⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔⵠΔᐃⵠᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Bag 6"
			}, {
				id: 39,
				"ⵠΔⵠ": Δᐃ.ᐃΔΔⵠⲆΔΔ,
				"Δᐃᐃ": Δᐃ.ΔΔⵠⲆⲆΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Bag with Wooden Swords"
			}, {
				id: 44,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃΔⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆᐃᐃΔᐃⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[421],
				name: "Big Bag"
			}, {
				id: ΔᐃΔⵠⲆⲆⵠ,
				"ⵠΔⵠ": Δᐃ.ⲆΔⲆᐃΔΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⵠᐃⲆⵠᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[421],
				name: "Bag 6"
			}, {
				id: 8,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⲆΔΔⲆᐃ,
				"Δᐃᐃ": Δᐃ.ΔᐃⲆⵠΔⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Easter Bag"
			}, {
				id: ᐃⵠⲆᐃᐃⲆΔ,
				"ⵠΔⵠ": Δᐃ.ⲆΔⵠΔᐃΔΔ,
				"Δᐃᐃ": Δᐃ.ΔΔⵠⲆⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Star Bag"
			}, {
				id: 10,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⲆΔⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔᐃⲆᐃΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Winter Bag"
			}, {
				id: ⵠⲆᐃⲆⵠ,
				"ⵠΔⵠ": Δᐃ.ᐃΔΔᐃⵠΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃⲆΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[424],
				name: "Stone Carrier"
			}, {
				id: 24,
				"ⵠΔⵠ": Δᐃ.ΔⵠΔᐃΔᐃΔ,
				"Δᐃᐃ": Δᐃ.ᐃΔᐃⲆΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Stone Pickaxe Bag"
			}, {
				id: 6,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠᐃᐃⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔⲆᐃⲆⵠⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[421],
				name: "Bag Camouflage"
			}, {
				id: 38,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃⵠⲆᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃΔΔⵠᐃⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Bag with Stone Swords"
			}, {
				id: 54,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃᐃᐃⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃΔΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Cow Bag"
			}, {
				id: 59,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⲆⲆΔⲆΔ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⵠΔⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[436],
				name: "Starver Bag"
			}, {
				id: 62,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠᐃⲆⲆᐃ,
				"Δᐃᐃ": Δᐃ.ΔΔⲆⵠᐃΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[436],
				name: "Crystal Sky Bag"
			}, {
				id: 71,
				"ⵠΔⵠ": Δᐃ.ⲆΔΔⲆⲆⲆΔ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⵠᐃΔⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Portable Furnace"
			}, {
				id: 78,
				"ⵠΔⵠ": Δᐃ.ΔΔⵠⵠⲆᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⲆᐃΔᐃⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Crate Bag"
			}, {
				id: 13,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⵠⵠΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃⵠᐃⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Honey Pot"
			}, {
				id: 21,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔΔΔⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⲆΔⵠᐃΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[424],
				name: "Gold Carrier"
			}, {
				id: 30,
				"ⵠΔⵠ": Δᐃ.ΔⵠⵠⵠΔᐃⵠ,
				"Δᐃᐃ": Δᐃ.ΔⲆᐃᐃΔΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Gold Pickaxe Bag"
			}, {
				id: 29,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⲆΔⵠᐃΔ,
				"Δᐃᐃ": Δᐃ.ΔᐃᐃⵠΔⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": "Ariel",
				name: "Mr and Mrs Bakers"
			}, {
				id: 41,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠΔΔⲆᐃ,
				"Δᐃᐃ": Δᐃ.ⲆΔⵠⵠⲆⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Bag with Golden Swords"
			}, {
				id: 47,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠⲆΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⲆᐃΔᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Explorer Bag"
			}, {
				id: 51,
				"ⵠΔⵠ": Δᐃ.ΔⵠΔⲆⵠⲆᐃ,
				"Δᐃᐃ": Δᐃ.ⲆΔⲆⵠⲆⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Bamboo Bag"
			}, {
				id: 53,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⲆΔⵠΔΔ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃⵠΔⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Mummy Bag"
			}, {
				id: 58,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⵠᐃᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ⵠⲆᐃⵠΔⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[290],
				name: "Watermelon Bag"
			}, {
				id: 60,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔⵠᐃⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⲆΔⲆⲆⲆⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Garlic Bag"
			}, {
				id: 61,
				"ⵠΔⵠ": Δᐃ.ⵠΔⵠΔᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠΔⲆⲆⵠᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Pumpkin Bag"
			}, {
				id: 64,
				"ⵠΔⵠ": Δᐃ.ⵠΔⲆⲆΔᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠⲆⵠⵠΔᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[552],
				name: "Oil Barel bag"
			}, {
				id: 67,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⲆⵠⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ΔᐃᐃⲆⲆᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Tree Bag"
			}, {
				id: 70,
				"ⵠΔⵠ": Δᐃ.ⵠⲆΔΔⵠᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃΔΔᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Lit Portable Furnace"
			}, {
				id: 72,
				"ⵠΔⵠ": Δᐃ.ΔΔⲆᐃᐃΔΔ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆΔⵠΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Christmas Berry Bush Bag"
			}, {
				id: 73,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆΔΔᐃᐃ,
				"Δᐃᐃ": Δᐃ.ΔⵠⵠⲆⲆⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Berry Bush Bag"
			}, {
				id: 74,
				"ⵠΔⵠ": Δᐃ.ⲆⵠΔⲆⲆⵠΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆΔⵠᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Fall Berry Bush Bag"
			}, {
				id: 76,
				"ⵠΔⵠ": Δᐃ.ᐃⲆΔΔⲆΔⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃⵠⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Reclaimed Bag"
			}, {
				id: ⵠⵠⲆᐃⲆᐃᐃ,
				"ⵠΔⵠ": Δᐃ.ΔᐃⵠᐃΔᐃΔ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠⵠⵠᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "a Rabbit in my Bag"
			}, {
				id: 15,
				"ⵠΔⵠ": Δᐃ.ΔⵠⵠᐃΔⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⲆᐃΔᐃᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bird's nest"
			}, {
				id: ΔⲆⲆⲆⲆΔᐃ,
				"ⵠΔⵠ": Δᐃ.ⲆΔᐃⲆΔΔⵠ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠᐃᐃⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "a Fish on your Back"
			}, {
				id: ⵠⲆᐃⲆⵠⲆⲆ,
				"ⵠΔⵠ": Δᐃ.ΔⲆᐃⲆⲆΔΔ,
				"Δᐃᐃ": Δᐃ.ⲆⲆΔⲆⲆⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "a Squirrel in my Bag"
			}, {
				id: 22,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⵠΔⵠΔⲆ,
				"Δᐃᐃ": Δᐃ.ⵠΔⵠⲆᐃΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[424],
				name: "Diamond Carrier"
			}, {
				id: Ⲇⵠᐃᐃᐃ,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔᐃⲆᐃⵠ,
				"Δᐃᐃ": Δᐃ.ΔⲆΔΔᐃⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Resources Bag"
			}, {
				id: 32,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃᐃⲆⲆⲆ,
				"Δᐃᐃ": Δᐃ.Ⲇⵠᐃᐃⵠᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Diamond Pickaxe Bag"
			}, {
				id: 40,
				"ⵠΔⵠ": Δᐃ.ᐃᐃΔᐃᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ΔΔⵠΔΔᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Bag with Diamond Swords"
			}, {
				id: 45,
				"ⵠΔⵠ": Δᐃ.ᐃᐃᐃⲆⵠⲆⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⲆΔⲆⲆⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "My Cake Bag"
			}, {
				id: 46,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠⲆⵠΔΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆⵠⲆⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "My Christmas Cake Bag"
			}, {
				id: 52,
				"ⵠΔⵠ": Δᐃ.ⲆᐃᐃⲆⲆᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠΔᐃⲆⲆᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[290],
				name: "Fish Bag"
			}, {
				id: 65,
				"ⵠΔⵠ": Δᐃ.ⲆᐃⵠΔᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⵠⲆΔⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Cloud Bag"
			}, {
				id: 68,
				"ⵠΔⵠ": Δᐃ.ⵠΔᐃⲆᐃⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔΔⲆⲆⲆΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Bee Bag"
			}, {
				id: 77,
				"ⵠΔⵠ": Δᐃ.ⵠⲆΔΔᐃᐃΔ,
				"Δᐃᐃ": Δᐃ.ⲆΔᐃⲆᐃⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bag and Bedroll"
			}, {
				id: 80,
				"ⵠΔⵠ": Δᐃ.ᐃᐃᐃΔⲆᐃᐃ,
				"Δᐃᐃ": Δᐃ.ΔΔⲆⲆⵠⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Peasant's Bag"
			}, {
				id: 81,
				"ⵠΔⵠ": Δᐃ.ΔᐃΔΔΔΔᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠΔΔⲆᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Probably Stolen Bag"
			}, {
				id: 48,
				"ⵠΔⵠ": Δᐃ.ⲆᐃⲆᐃᐃᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⲆΔᐃⵠᐃΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": "fatant",
				name: "Natural Bag"
			}, {
				id: 23,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔⲆᐃᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆΔᐃᐃⲆⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[424],
				name: "Amethyst Carrier"
			}, {
				id: 25,
				"ⵠΔⵠ": Δᐃ.ΔΔᐃΔᐃΔⲆ,
				"Δᐃᐃ": Δᐃ.ⵠΔΔⵠΔⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Amethyst Pickaxe Bag"
			}, {
				id: 28,
				"ⵠΔⵠ": Δᐃ.ΔⲆΔⲆⲆⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃⵠΔΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Your Baby"
			}, {
				id: 33,
				"ⵠΔⵠ": Δᐃ.ⲆᐃᐃⲆⲆⵠΔ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃⲆΔⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Tropical Bag"
			}, {
				id: 43,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⲆⲆΔᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⵠᐃᐃⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Bag with Amethyst Swords"
			}, {
				id: 35,
				"ⵠΔⵠ": Δᐃ.ⵠⵠΔᐃⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆⲆᐃᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Ice Bag"
			}, {
				id: 50,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠᐃⵠΔΔ,
				"Δᐃᐃ": Δᐃ.ᐃΔⲆΔⵠⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Thornbush Bag"
			}, {
				id: 56,
				"ⵠΔⵠ": Δᐃ.ΔⵠⲆⵠⲆᐃΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠⲆⲆⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Autumn Bag"
			}, {
				id: 57,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⲆⲆⲆⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⵠΔⲆΔⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Dino Egg Bag"
			}, {
				id: 66,
				"ⵠΔⵠ": Δᐃ.ΔᐃᐃⵠⲆⲆⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⵠⵠⵠⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Magic Cloud Bag"
			}, {
				id: 69,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⲆΔΔᐃΔ,
				"Δᐃᐃ": Δᐃ.ᐃΔΔΔⵠΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Chest Bag"
			}, {
				id: 75,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔⲆΔᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠⵠⲆᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Spectum Bag"
			}, {
				id: 79,
				"ⵠΔⵠ": Δᐃ.ΔΔΔᐃΔⵠⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆΔⵠΔᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Winter Peasant's Bag"
			}, {
				id: 31,
				"ⵠΔⵠ": Δᐃ.ⵠΔⵠᐃᐃΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⲆΔΔᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[424],
				name: "Reidite Carrier"
			}, {
				id: ᐃΔⵠⲆⲆⲆⲆ,
				"ⵠΔⵠ": Δᐃ.ⵠΔⲆⵠᐃᐃΔ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔⵠⵠⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[212],
				name: "Lava Bag"
			}, {
				id: 49,
				"ⵠΔⵠ": Δᐃ.ΔⵠΔΔᐃᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆΔΔΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Lava Bag 2"
			}, {
				id: 36,
				"ⵠΔⵠ": Δᐃ.Ⲇⵠᐃⵠᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆⵠⵠᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Dragon Bag"
			}, {
				id: 55,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⲆΔΔⲆⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔⵠⲆⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Winter Ice Bag"
			}, {
				id: 26,
				"ⵠΔⵠ": Δᐃ.ΔⵠⵠⲆᐃⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔⲆᐃⲆΔⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Reidite Pickaxe Bag"
			}, {
				id: 27,
				"ⵠΔⵠ": Δᐃ.ⵠΔᐃⲆᐃᐃΔ,
				"Δᐃᐃ": Δᐃ.ᐃⵠᐃΔΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Octopus Bowl"
			}, {
				id: 34,
				"ⵠΔⵠ": Δᐃ.ᐃⵠΔΔⵠΔΔ,
				"Δᐃᐃ": Δᐃ.ΔⲆΔⲆⲆᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Cave Bag"
			}, {
				id: 42,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⲆΔᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠᐃⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Bag with Reidite Swords"
			}, {
				id: 63,
				"ⵠΔⵠ": Δᐃ.ΔⵠᐃΔΔⵠΔ,
				"Δᐃᐃ": Δᐃ.ΔΔΔⲆΔⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Engineer Bag"
			}],
			"ΔⵠΔⵠⵠ": [{
				id: ⵠⵠⲆΔ,
				"ⵠΔⵠ": Δᐃ.ΔⵠⵠᐃⵠⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆᐃᐃᐃᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden Dead Box"
			}, {
				id: ΔᐃⵠⲆ,
				"ⵠΔⵠ": Δᐃ.ⵠⲆΔᐃⵠΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃᐃᐃΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Hidden item"
			}, {
				id: ΔⵠⲆⲆ,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⵠᐃΔΔᐃ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃⵠⲆⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden Box 1"
			}, {
				id: ⵠⵠΔⲆ,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⲆΔⲆᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃⵠⲆᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden Box 2"
			}, {
				id: 4,
				"ⵠΔⵠ": Δᐃ.ⲆⵠΔⲆΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ΔᐃⵠⲆᐃⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden Box 3"
			}, {
				id: 5,
				"ⵠΔⵠ": Δᐃ.ⲆⵠΔΔⲆᐃΔ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⵠΔᐃᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Broken Wooden Box"
			}, {
				id: 6,
				"ⵠΔⵠ": Δᐃ.ΔΔΔⵠᐃᐃΔ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠⲆⵠᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden Box"
			}, {
				id: 7,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⲆⵠⵠᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠⲆⵠⲆᐃⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden Battle Box"
			}, {
				id: 8,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃⵠᐃⲆⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⲆⲆⵠⵠᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden Box with a Cross"
			}, {
				id: 9,
				"ⵠΔⵠ": Δᐃ.ΔⲆᐃⵠⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃΔᐃⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden Box with Bubbles"
			}, {
				id: ⲆΔᐃⵠΔ,
				"ⵠΔⵠ": Δᐃ.ⵠΔⵠᐃΔⲆΔ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⲆⵠⲆΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden Box with Eyes"
			}, {
				id: ⵠᐃᐃᐃⲆΔⲆ,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⵠⵠⵠⵠⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔⲆΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Dark Wooden Box"
			}, {
				id: 38,
				"ⵠΔⵠ": Δᐃ.ΔΔⵠᐃⵠⲆΔ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠⵠᐃⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": "Weddlz",
				name: "Noob Box"
			}, {
				id: 12,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃΔⵠⵠΔ,
				"Δᐃᐃ": Δᐃ.ⵠⲆⵠⲆΔΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden and Stone Box"
			}, {
				id: 14,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠⵠⲆⵠᐃ,
				"Δᐃᐃ": Δᐃ.ΔᐃΔⵠᐃⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Star Box 1"
			}, {
				id: ⲆⲆⲆΔⵠ,
				"ⵠΔⵠ": Δᐃ.ΔΔΔⵠΔⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⲆⵠⵠⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Star Box 2"
			}, {
				id: 27,
				"ⵠΔⵠ": Δᐃ.ⵠⵠᐃⵠⵠⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔⵠⲆⲆΔⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Flower Box"
			}, {
				id: 46,
				"ⵠΔⵠ": Δᐃ.ΔᐃᐃΔΔⵠΔ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆᐃΔᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[290],
				name: "Blue Box"
			}, {
				id: 75,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⲆⵠΔⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⵠᐃᐃⵠⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Night Stars Crate"
			}, {
				id: 19,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆⲆΔΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆΔᐃⲆᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Beehive"
			}, {
				id: 13,
				"ⵠΔⵠ": Δᐃ.ⲆᐃⵠⵠⵠᐃΔ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆΔᐃᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden and Golden Box"
			}, {
				id: 21,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠⵠᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆΔᐃᐃⵠⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Gravestone"
			}, {
				id: 25,
				"ⵠΔⵠ": Δᐃ.ᐃᐃᐃⲆⵠⵠⲆ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠⲆⲆΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[421],
				name: "Sky Box"
			}, {
				id: 29,
				"ⵠΔⵠ": Δᐃ.ᐃⲆΔⲆⵠᐃᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠⲆᐃⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[212],
				name: "Golden Box"
			}, {
				id: 34,
				"ⵠΔⵠ": Δᐃ.ⲆΔⲆᐃΔⵠΔ,
				"Δᐃᐃ": Δᐃ.ΔᐃΔᐃⲆⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[421],
				name: "Water Crate"
			}, {
				id: 35,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃⵠᐃΔⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⲆΔΔΔΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[421],
				name: "Glass Crate"
			}, {
				id: 70,
				"ⵠΔⵠ": Δᐃ.ΔⲆᐃⵠⵠᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠΔⵠⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[436],
				name: "Crystal Sky Box"
			}, {
				id: 74,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⵠⵠⲆᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆΔᐃΔⵠⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Reclaimed Crate"
			}, {
				id: 77,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠⲆⵠⲆΔ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃΔᐃⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Workplace Accident"
			}, {
				id: ⲆⲆΔᐃᐃ,
				"ⵠΔⵠ": Δᐃ.ⲆⲆᐃΔᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃΔⵠΔΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden and Diamond Box"
			}, {
				id: 18,
				"ⵠΔⵠ": Δᐃ.ᐃⵠᐃᐃᐃⲆⵠ,
				"Δᐃᐃ": Δᐃ.ᐃΔⵠⵠΔⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Don't Hit Me"
			}, {
				id: 26,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠΔᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⵠⲆᐃⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Underwater Box"
			}, {
				id: 31,
				"ⵠΔⵠ": Δᐃ.ΔⵠⲆⵠⵠΔᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆΔⵠᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[421],
				name: "Items Pile"
			}, {
				id: 32,
				"ⵠΔⵠ": Δᐃ.ⲆΔΔΔᐃΔⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⵠᐃΔⲆⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Cake Box"
			}, {
				id: 33,
				"ⵠΔⵠ": Δᐃ.ΔΔᐃⲆΔⲆⵠ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠⲆΔⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Christmas Cake Box"
			}, {
				id: 36,
				"ⵠΔⵠ": Δᐃ.ⵠΔᐃΔΔⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆⵠⵠᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": "Fukss",
				name: "Crab Box"
			}, {
				id: 42,
				"ⵠΔⵠ": Δᐃ.ⵠᐃᐃᐃᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ΔⲆⲆⵠΔΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[290],
				name: "Fishing Box"
			}, {
				id: 72,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔⵠⵠⲆⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔⲆᐃΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Storage Machine"
			}, {
				id: 22,
				"ⵠΔⵠ": Δᐃ.ⲆᐃΔⵠΔΔᐃ,
				"Δᐃᐃ": Δᐃ.ΔⵠⲆⲆⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Let me out of here"
			}, {
				id: 17,
				"ⵠΔⵠ": Δᐃ.ⲆΔⲆⲆⲆⵠΔ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⲆⵠⲆⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Wooden and Amethyst Box"
			}, {
				id: 24,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃᐃΔᐃⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⵠᐃⲆΔΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Aquarium"
			}, {
				id: 28,
				"ⵠΔⵠ": Δᐃ.ΔΔⵠⲆᐃⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔⵠΔᐃⵠΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Gift Box"
			}, {
				id: 40,
				"ⵠΔⵠ": Δᐃ.ⲆᐃⲆⲆᐃΔⲆ,
				"Δᐃᐃ": Δᐃ.ΔΔⵠⲆᐃΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[290],
				name: "Open Watermelon Box"
			}, {
				id: 41,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⲆⵠⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔⵠⲆⵠΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[290],
				name: "Watermelon Box"
			}, {
				id: 39,
				"ⵠΔⵠ": Δᐃ.ᐃΔΔⲆⵠᐃᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔᐃΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Thornbush Box"
			}, {
				id: 43,
				"ⵠΔⵠ": Δᐃ.ⵠⵠᐃᐃΔⵠᐃ,
				"Δᐃᐃ": Δᐃ.ᐃΔⵠⵠⲆᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Rabbit in the Box"
			}, {
				id: 47,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⲆᐃⲆⵠⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆᐃⲆⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Garlic Plot"
			}, {
				id: 48,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⵠΔⵠΔᐃ,
				"Δᐃᐃ": Δᐃ.ΔᐃⲆⲆΔⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Pumpkin Plot"
			}, {
				id: 78,
				"ⵠΔⵠ": Δᐃ.ΔⵠⲆⲆⵠΔᐃ,
				"Δᐃᐃ": Δᐃ.ΔΔⲆᐃⵠⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Spectrum Portal"
			}, {
				id: 45,
				"ⵠΔⵠ": Δᐃ.ᐃⲆΔⲆΔΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃΔⲆⵠΔᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Autumn Box"
			}, {
				id: 44,
				"ⵠΔⵠ": Δᐃ.ⲆΔᐃⲆⵠⵠⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆᐃⲆⲆᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Winter Box"
			}, {
				id: ⵠⲆΔⲆⲆ,
				"ⵠΔⵠ": Δᐃ.ⵠΔⲆΔᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ΔⲆⲆⲆΔⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Metal and Reidite Box"
			}, {
				id: 23,
				"ⵠΔⵠ": Δᐃ.ⲆΔΔⵠᐃⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆⲆⵠⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Kraken Box"
			}, {
				id: 30,
				"ⵠΔⵠ": Δᐃ.ⵠⵠᐃⲆΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆⲆⵠᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[212],
				name: "Lava Box"
			}, {
				id: 37,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆⲆΔΔⵠ,
				"Δᐃᐃ": Δᐃ.ΔᐃΔⵠⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Lava Box 2"
			}, {
				id: 49,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃΔΔᐃΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠᐃⲆⵠⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Rabbit"
			}, {
				id: 50,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠⲆⲆⲆΔ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⲆᐃⲆΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Wolf"
			}, {
				id: 51,
				"ⵠΔⵠ": Δᐃ.ΔⵠᐃΔᐃᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⵠΔΔΔᐃΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Spider"
			}, {
				id: 52,
				"ⵠΔⵠ": Δᐃ.ⲆᐃΔⲆⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⲆⵠᐃⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Hawk"
			}, {
				id: 53,
				"ⵠΔⵠ": Δᐃ.ᐃΔⲆⲆᐃᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠⲆᐃᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Bear"
			}, {
				id: 54,
				"ⵠΔⵠ": Δᐃ.ᐃᐃᐃⲆΔΔΔ,
				"Δᐃᐃ": Δᐃ.ᐃΔᐃⲆⵠⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Fox"
			}, {
				id: 55,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⵠⲆⵠⵠⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⵠᐃᐃⲆⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Baby Mammoth"
			}, {
				id: 56,
				"ⵠΔⵠ": Δᐃ.ΔΔⲆᐃⲆᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⲆᐃΔⲆΔᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Mammoth"
			}, {
				id: 57,
				"ⵠΔⵠ": Δᐃ.ⲆⲆΔⵠᐃΔΔ,
				"Δᐃᐃ": Δᐃ.ᐃΔᐃⵠᐃⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Sandworm"
			}, {
				id: 58,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠⵠΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆᐃΔᐃⲆⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Vulture"
			}, {
				id: 59,
				"ⵠΔⵠ": Δᐃ.ΔⵠⵠΔⵠΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⲆⲆⲆⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Kraken"
			}, {
				id: 60,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⵠⲆᐃⵠΔ,
				"Δᐃᐃ": Δᐃ.ΔⵠΔⲆᐃⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Piranha"
			}, {
				id: 61,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⲆᐃᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ⲆΔⲆΔᐃⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Baby Dragon"
			}, {
				id: 62,
				"ⵠΔⵠ": Δᐃ.ⵠⵠΔΔⵠᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠᐃⲆΔⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Baby Lava"
			}, {
				id: 63,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆⵠⵠᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⵠᐃⵠΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Dragon"
			}, {
				id: 64,
				"ⵠΔⵠ": Δᐃ.ΔΔⵠⵠⲆⲆⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆΔΔⵠⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Penguin"
			}, {
				id: 65,
				"ⵠΔⵠ": Δᐃ.ΔᐃⲆⵠⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⲆΔΔⲆⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Lava Dragon"
			}, {
				id: 66,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⲆⵠΔᐃⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆᐃⲆΔΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Boar"
			}, {
				id: 67,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠΔⵠΔⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⲆᐃᐃΔⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Fire mob"
			}, {
				id: 68,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆⵠⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠⲆᐃᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the Crab"
			}, {
				id: 69,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⲆⵠᐃΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆᐃᐃⲆΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Box of the King Crab"
			}, {
				id: 71,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠΔⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⲆⲆⲆⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Dragon Box"
			}, {
				id: 73,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆΔⵠΔΔ,
				"Δᐃᐃ": Δᐃ.ⲆΔⵠⲆΔᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Rekt"
			}, {
				id: 76,
				"ⵠΔⵠ": Δᐃ.ΔⲆᐃᐃᐃᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠΔⵠⲆΔᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Sleeping Tamon Dragon"
			}],
			"ⵠΔⲆΔᐃ": [{
				id: ⵠⵠⲆΔ,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃᐃᐃΔΔ,
				"Δᐃᐃ": Δᐃ.ⲆΔⲆⵠⲆⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Book 1"
			}, {
				id: 1,
				"ⵠΔⵠ": Δᐃ.ᐃᐃᐃⲆⲆⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆᐃΔᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Book 2"
			}, {
				id: ⵠⲆΔᐃ,
				"ⵠΔⵠ": Δᐃ.ⲆΔⵠΔᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⵠᐃⲆⵠΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Book 3"
			}, {
				id: 3,
				"ⵠΔⵠ": Δᐃ.ΔⵠⵠᐃΔⲆⲆ,
				"Δᐃᐃ": Δᐃ.ΔⵠΔⵠⲆΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Book 4"
			}, {
				id: 4,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠΔΔⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔΔⲆΔⲆᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Damaged Book 1"
			}, {
				id: 18,
				"ⵠΔⵠ": Δᐃ.ⲆⵠᐃΔᐃΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃΔⲆΔⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": "SeveR",
				name: "Damaged Book 2"
			}, {
				id: 5,
				"ⵠΔⵠ": Δᐃ.ΔᐃΔᐃⵠΔΔ,
				"Δᐃᐃ": Δᐃ.ᐃΔⲆᐃΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": "Doctorpus",
				name: "Scroll"
			}, {
				id: 6,
				"ⵠΔⵠ": Δᐃ.ᐃⵠᐃᐃⵠΔⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠⲆΔΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": "Doctorpus",
				name: "Clipboard"
			}, {
				id: ⲆΔᐃᐃⲆ,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠᐃⵠⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃⲆΔⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Seed Book"
			}, {
				id: 20,
				"ⵠΔⵠ": Δᐃ.ᐃΔⲆΔᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔΔⵠⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Camo Book"
			}, {
				id: 24,
				"ⵠΔⵠ": Δᐃ.ΔⵠⲆᐃⵠᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⲆⲆⵠⲆΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[421],
				name: "Stone Tablet"
			}, {
				id: 47,
				"ⵠΔⵠ": Δᐃ.ⵠΔᐃⵠΔΔΔ,
				"Δᐃᐃ": Δᐃ.ⵠΔᐃᐃΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Reclaimed Book"
			}, {
				id: ΔΔⲆΔΔ,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⲆΔⵠⵠⲆ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⵠⵠⲆΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Star Book"
			}, {
				id: ⵠᐃΔᐃⲆ,
				"ⵠΔⵠ": Δᐃ.ΔᐃⲆΔᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.Ⲇⵠᐃⵠⵠᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Gold Book"
			}, {
				id: ⵠᐃⵠΔΔ,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⲆⵠⵠⵠΔ,
				"Δᐃᐃ": Δᐃ.ᐃⲆᐃᐃᐃᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Old Mysterious Paper"
			}, {
				id: 17,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔᐃᐃΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⲆΔΔΔⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Gold Engraving"
			}, {
				id: 25,
				"ⵠΔⵠ": Δᐃ.ΔⵠᐃᐃᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆᐃᐃⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": "fatant",
				name: "Ant Book"
			}, {
				id: 32,
				"ⵠΔⵠ": Δᐃ.ⵠⵠΔⲆᐃᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⵠᐃⲆᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Mummy Book"
			}, {
				id: 37,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⵠΔΔᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠⲆⲆⲆⵠᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Garlic Book"
			}, {
				id: 38,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⵠⵠⲆⲆΔ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⲆⲆⲆΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Pumpkin Book"
			}, {
				id: 39,
				"ⵠΔⵠ": Δᐃ.ΔᐃΔᐃⵠΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠᐃΔⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Christmas Tree Book"
			}, {
				id: 11,
				"ⵠΔⵠ": Δᐃ.ⵠⲆΔᐃⵠΔⵠ,
				"Δᐃᐃ": Δᐃ.ΔⲆⲆΔΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Diamond Book"
			}, {
				id: ᐃⵠⲆᐃᐃⲆΔ,
				"ⵠΔⵠ": Δᐃ.ᐃΔⲆᐃⵠⵠⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⵠᐃΔⵠⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Obscure Book"
			}, {
				id: 16,
				"ⵠΔⵠ": Δᐃ.ΔΔⲆⲆⲆᐃᐃ,
				"Δᐃᐃ": Δᐃ.ΔⵠⲆΔᐃⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Rolled Parchment"
			}, {
				id: 22,
				"ⵠΔⵠ": Δᐃ.ᐃΔⲆΔΔΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠⵠΔΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Cake Book"
			}, {
				id: 23,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⵠᐃⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔΔⵠⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Christmas Cake Book"
			}, {
				id: 30,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃⵠΔⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⵠᐃΔⵠⵠⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[290],
				name: "Fish Book"
			}, {
				id: 31,
				"ⵠΔⵠ": Δᐃ.ΔᐃᐃⲆΔᐃᐃ,
				"Δᐃᐃ": Δᐃ.ᐃΔⲆⵠᐃᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[436],
				name: "Once upon a time"
			}, {
				id: 48,
				"ⵠΔⵠ": Δᐃ.ΔⵠᐃᐃⵠⲆᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃΔⵠⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Chrono Clock"
			}, {
				id: 49,
				"ⵠΔⵠ": Δᐃ.ⲆΔᐃⲆΔᐃᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⲆᐃⵠΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Recipe Book"
			}, {
				id: 13,
				"ⵠΔⵠ": Δᐃ.ⲆΔⵠᐃⵠΔΔ,
				"Δᐃᐃ": Δᐃ.ΔⵠΔΔᐃΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Amethyst Book"
			}, {
				id: 28,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⲆⲆΔΔᐃ,
				"Δᐃᐃ": Δᐃ.ΔΔᐃⵠΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Paint Pallet"
			}, {
				id: 29,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⵠⵠⵠⲆΔ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃΔⲆⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[436],
				name: "Watermelon Book"
			}, {
				id: 27,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠΔⵠⲆⲆ,
				"Δᐃᐃ": Δᐃ.ⲆᐃᐃΔⲆΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Thornbush Book"
			}, {
				id: 35,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⵠΔΔⵠⲆ,
				"Δᐃᐃ": Δᐃ.ΔΔⵠΔⲆⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Menu"
			}, {
				id: 36,
				"ⵠΔⵠ": Δᐃ.ΔⵠᐃⲆΔⲆⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠᐃᐃΔΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[436],
				name: "Lover Letter"
			}, {
				id: 40,
				"ⵠΔⵠ": Δᐃ.ΔᐃΔⵠⲆⵠΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆᐃΔⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Fresh-Baked Cookies"
			}, {
				id: 41,
				"ⵠΔⵠ": Δᐃ.ΔΔᐃΔⲆᐃⵠ,
				"Δᐃᐃ": Δᐃ.ΔⵠⵠᐃᐃⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Inside, there is just a book."
			}, {
				id: 45,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆⵠᐃⵠΔ,
				"Δᐃᐃ": Δᐃ.ⲆΔᐃΔΔⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Crafting Machine"
			}, {
				id: 33,
				"ⵠΔⵠ": Δᐃ.ⲆᐃᐃⲆⲆΔⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⲆΔᐃΔⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Winter Book"
			}, {
				id: 34,
				"ⵠΔⵠ": Δᐃ.ΔᐃΔⲆⵠᐃᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⲆᐃΔΔⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Autumn Book"
			}, {
				id: ΔⲆᐃΔⲆⲆΔ,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⲆⵠⵠⵠⲆ,
				"Δᐃᐃ": Δᐃ.ᐃΔⲆᐃⵠⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Reidite Book"
			}, {
				id: ⲆⲆⲆⲆΔ,
				"ⵠΔⵠ": Δᐃ.ᐃⲆΔⲆᐃⵠΔ,
				"Δᐃᐃ": Δᐃ.ΔΔⲆᐃΔΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[212],
				name: "Lava Book"
			}, {
				id: 26,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⲆᐃΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆᐃΔᐃΔⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Lava Book 2"
			}, {
				id: ΔᐃⵠⲆⲆ,
				"ⵠΔⵠ": Δᐃ.ⲆΔᐃᐃⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆΔⲆⲆΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[212],
				name: "Ocean Mystery"
			}, {
				id: 21,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠⲆᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠΔΔΔΔᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Dragon Book"
			}, {
				id: 42,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⲆⵠΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠⵠⵠΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Engineer Book"
			}, {
				id: 43,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⵠΔⲆⵠΔ,
				"Δᐃᐃ": Δᐃ.ⲆⲆΔⵠⵠΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Nightmare Book"
			}, {
				id: 44,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⲆΔⵠΔΔ,
				"Δᐃᐃ": Δᐃ.ΔΔᐃⲆⲆⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[344],
				name: "Mystery Book"
			}, {
				id: 46,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃᐃᐃᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆᐃᐃⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Cursed Book"
			}],
			"ΔⲆⲆⵠᐃ": [{
				id: ⵠᐃΔ,
				"ⵠΔⵠ": Δᐃ.ΔᐃⲆⲆⵠⲆⲆ,
				"Δᐃᐃ": Δᐃ.ΔᐃⲆⲆⵠⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Nothing"
			}, {
				id: ⵠⲆΔᐃ,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⵠᐃΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⲆⲆⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Pink Cheeks"
			}, {
				id: ᐃΔΔΔ,
				"ⵠΔⵠ": Δᐃ.ᐃΔΔⵠΔᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⲆΔᐃᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Heart"
			}, {
				id: ⵠᐃᐃ,
				"ⵠΔⵠ": Δᐃ.ΔᐃΔⵠᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠⵠⲆΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bandage 1"
			}, {
				id: 4,
				"ⵠΔⵠ": Δᐃ.ΔⲆⵠᐃᐃⲆΔ,
				"Δᐃᐃ": Δᐃ.ΔⲆⲆⲆⲆᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔΔⲆⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Flower 1"
			}, {
				id: ⵠⲆⲆⲆ,
				"ⵠΔⵠ": Δᐃ.ΔⵠⲆⲆⵠⵠΔ,
				"Δᐃᐃ": Δᐃ.ΔᐃⲆΔΔᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bow 1"
			}, {
				id: ⵠⲆⵠⲆⵠ,
				"ⵠΔⵠ": Δᐃ.ΔᐃⵠΔⵠᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔΔΔΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Bandage 2"
			}, {
				id: 7,
				"ⵠΔⵠ": Δᐃ.ⲆᐃᐃΔⲆⲆⵠ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠⵠⲆΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Flower 2"
			}, {
				id: ⲆᐃⲆᐃᐃ,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆᐃⵠᐃΔ,
				"Δᐃᐃ": Δᐃ.ΔⲆΔᐃⵠᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Bandage 3"
			}, {
				id: 36,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⲆΔᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ΔᐃᐃⲆⲆΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Foliage"
			}, {
				id: 59,
				"ⵠΔⵠ": Δᐃ.ΔΔΔᐃⵠⲆΔ,
				"Δᐃᐃ": Δᐃ.ΔⲆᐃΔΔⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Peaceful"
			}, {
				id: 67,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠⲆΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ᐃΔᐃⲆⲆΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Sparkles"
			}, {
				id: 68,
				"ⵠΔⵠ": Δᐃ.ΔΔΔᐃΔΔⵠ,
				"Δᐃᐃ": Δᐃ.ⵠΔᐃⲆᐃⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Luxury"
			}, {
				id: 69,
				"ⵠΔⵠ": Δᐃ.ⵠΔⵠᐃΔⵠᐃ,
				"Δᐃᐃ": Δᐃ.ΔⲆⲆᐃⵠΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃᐃᐃⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Snow Flakes Crown"
			}, {
				id: 17,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆⲆΔⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⵠΔⲆΔΔᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Glasses 1"
			}, {
				id: ⵠᐃⲆⲆΔ,
				"ⵠΔⵠ": Δᐃ.ⵠᐃᐃᐃⵠⲆᐃ,
				"Δᐃᐃ": Δᐃ.ΔⵠⵠΔᐃⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Bow 2"
			}, {
				id: ⵠⵠⲆᐃΔ,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⵠⲆⵠΔⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆΔⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Little Stars"
			}, {
				id: 12,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⲆᐃⲆⲆᐃ,
				"Δᐃᐃ": Δᐃ.ΔΔΔⵠⲆⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Pirate Eye Patch 1"
			}, {
				id: 44,
				"ⵠΔⵠ": Δᐃ.ⲆᐃⲆΔΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔⵠⵠⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Pirate Eye Patch 2"
			}, {
				id: 23,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⵠᐃᐃⵠⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⲆΔΔᐃᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Clown nose"
			}, {
				id: 16,
				"ⵠΔⵠ": Δᐃ.ⲆᐃⵠᐃⵠⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠᐃᐃⵠᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Eye Patch"
			}, {
				id: 30,
				"ⵠΔⵠ": Δᐃ.ᐃⲆᐃⲆⲆΔⵠ,
				"Δᐃᐃ": Δᐃ.ⵠΔᐃᐃⲆⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Flower 3"
			}, {
				id: 38,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⲆᐃⲆΔⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⲆᐃⵠΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[212],
				name: "False Nose"
			}, {
				id: 74,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⲆⵠΔΔⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⵠΔᐃⵠⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Red Cloth"
			}, {
				id: 75,
				"ⵠΔⵠ": Δᐃ.ⲆᐃᐃᐃⲆⲆⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⵠⲆᐃᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Blue Cloth"
			}, {
				id: 79,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔⲆᐃⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔⵠⵠᐃΔⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Transparent Mask"
			}, {
				id: 89,
				"ⵠΔⵠ": Δᐃ.ⵠᐃΔⲆⵠΔⵠ,
				"Δᐃᐃ": Δᐃ.ⵠⲆⲆᐃⲆᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[333],
				name: "Starve.io Anime"
			}, {
				id: 94,
				"ⵠΔⵠ": Δᐃ.ⵠΔⲆᐃⲆⲆⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⲆᐃⵠⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": "Ant",
				name: "Hero Mask"
			}, {
				id: 100,
				"ⵠΔⵠ": Δᐃ.ΔΔΔⵠⲆⲆⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⲆΔᐃⵠⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "This starver is mad"
			}, {
				id: 104,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⲆᐃⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆΔΔΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Scars"
			}, {
				id: 106,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔᐃⵠΔᐃ,
				"Δᐃᐃ": Δᐃ.ΔⵠⲆⵠΔⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "In Search of Intelligence"
			}, {
				id: 109,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃΔΔⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⲆΔⵠⵠⵠΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Reclaimed Bandage"
			}, {
				id: 111,
				"ⵠΔⵠ": Δᐃ.ⲆᐃΔⲆΔΔΔ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆᐃⵠᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠΔⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Unwrap Starver for Gift"
			}, {
				id: 15,
				"ⵠΔⵠ": Δᐃ.ᐃⵠᐃⲆⲆⲆⲆ,
				"Δᐃᐃ": Δᐃ.ΔⵠᐃⲆᐃⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Star Glasses"
			}, {
				id: 21,
				"ⵠΔⵠ": Δᐃ.ⵠⲆᐃΔⵠⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆΔⵠᐃⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Great-aunt's Glasses"
			}, {
				id: 24,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⲆΔᐃᐃᐃ,
				"Δᐃᐃ": Δᐃ.ΔᐃΔⵠⵠⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Little Starver"
			}, {
				id: 22,
				"ⵠΔⵠ": Δᐃ.ⲆᐃΔⲆΔⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⵠⲆⵠⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Little Glasses"
			}, {
				id: ⲆⵠᐃΔᐃᐃⵠ,
				"ⵠΔⵠ": Δᐃ.ᐃΔᐃᐃⵠⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠⲆⲆΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Flower Chain"
			}, {
				id: 29,
				"ⵠΔⵠ": Δᐃ.ⲆᐃᐃⵠⵠΔⲆ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⲆⲆⲆᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Horns"
			}, {
				id: 31,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⵠⲆⵠⲆΔ,
				"Δᐃᐃ": Δᐃ.ᐃⵠᐃⵠⲆᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Golden Flower"
			}, {
				id: 40,
				"ⵠΔⵠ": Δᐃ.ⲆΔⵠⵠΔᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⵠᐃᐃΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Sleeping Mask"
			}, {
				id: 57,
				"ⵠΔⵠ": Δᐃ.ᐃΔΔΔΔᐃΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠΔⵠΔⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[403],
				name: "Fish on your head"
			}, {
				id: 58,
				"ⵠΔⵠ": Δᐃ.ⲆΔΔⵠⲆᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃⵠΔᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Rose"
			}, {
				id: 91,
				"ⵠΔⵠ": Δᐃ.ΔᐃⵠⵠᐃΔᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⵠⲆᐃⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[552],
				name: "Grey Scarf"
			}, {
				id: 92,
				"ⵠΔⵠ": Δᐃ.ᐃⵠΔΔⵠⵠⵠ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⵠᐃⲆᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[552],
				name: "Black Scarf"
			}, {
				id: 93,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⲆⲆΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⵠΔΔⵠᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[552],
				name: "Skull Mask"
			}, {
				id: 95,
				"ⵠΔⵠ": Δᐃ.ΔᐃⵠⵠᐃⲆⵠ,
				"Δᐃᐃ": Δᐃ.ΔΔⲆᐃΔᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Golden Monocle"
			}, {
				id: 96,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⲆΔⲆᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃΔΔᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "A simple instruction"
			}, {
				id: 102,
				"ⵠΔⵠ": Δᐃ.ᐃⲆᐃΔⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⲆΔⵠΔⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Garland"
			}, {
				id: 103,
				"ⵠΔⵠ": Δᐃ.ⵠⵠᐃⲆΔᐃΔ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆΔⲆΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "The Doormat"
			}, {
				id: 108,
				"ⵠΔⵠ": Δᐃ.ᐃⲆΔΔⲆⲆΔ,
				"Δᐃᐃ": Δᐃ.ⲆᐃΔⵠⵠΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Copium Tanks"
			}, {
				id: 117,
				"ⵠΔⵠ": Δᐃ.ⲆⲆⵠΔᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⵠᐃⲆΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Eyelashes"
			}, {
				id: 118,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆⵠᐃᐃΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠⵠΔⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⵠᐃΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Helmet Prototype"
			}, {
				id: 9,
				"ⵠΔⵠ": Δᐃ.ⲆΔⲆΔΔᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠᐃⲆΔⵠᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Fancy Glasses"
			}, {
				id: 25,
				"ⵠΔⵠ": Δᐃ.ΔⲆᐃⵠⵠΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⵠΔΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Medecin Mask"
			}, {
				id: ⲆᐃᐃᐃΔᐃⲆ,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆⵠᐃⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆⲆᐃΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mr. Mayor"
			}, {
				id: 19,
				"ⵠΔⵠ": Δᐃ.ΔⵠⵠΔⲆⵠΔ,
				"Δᐃᐃ": Δᐃ.ΔⲆⲆΔⲆⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Sunglasses 2"
			}, {
				id: 28,
				"ⵠΔⵠ": Δᐃ.ⵠΔΔᐃᐃΔΔ,
				"Δᐃᐃ": Δᐃ.ΔΔΔᐃⲆⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[418],
				name: "Starfish"
			}, {
				id: 37,
				"ⵠΔⵠ": Δᐃ.Ⲇᐃᐃⵠⵠᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠΔΔΔⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Berry"
			}, {
				id: 39,
				"ⵠΔⵠ": Δᐃ.ΔᐃⵠΔⵠⲆᐃ,
				"Δᐃᐃ": Δᐃ.ⲆᐃᐃΔⲆᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Flake"
			}, {
				id: 43,
				"ⵠΔⵠ": Δᐃ.ΔⵠᐃᐃⲆᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⵠΔⲆΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Leaf "
			}, {
				id: 61,
				"ⵠΔⵠ": Δᐃ.ΔⵠᐃⵠΔᐃᐃ,
				"Δᐃᐃ": Δᐃ.ΔⲆⵠΔΔᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "A sword in your head"
			}, {
				id: 62,
				"ⵠΔⵠ": Δᐃ.ΔΔⵠΔⵠᐃᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⲆⵠⵠⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Winter Scarf"
			}, {
				id: 64,
				"ⵠΔⵠ": Δᐃ.ⲆΔᐃⵠⵠⲆΔ,
				"Δᐃᐃ": Δᐃ.ᐃⲆΔΔⵠᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Winter Scarf 2"
			}, {
				id: 66,
				"ⵠΔⵠ": Δᐃ.ΔΔΔⲆⲆⵠⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⵠᐃⵠⲆⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Winter Scarf 3"
			}, {
				id: 70,
				"ⵠΔⵠ": Δᐃ.ᐃΔⲆΔᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⵠⵠΔᐃΔΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mask with animal tracks"
			}, {
				id: 71,
				"ⵠΔⵠ": Δᐃ.ⲆⲆΔΔΔⵠⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃΔᐃⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Spring Mask"
			}, {
				id: 72,
				"ⵠΔⵠ": Δᐃ.ΔΔΔᐃΔⵠΔ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⲆⵠΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Pink Mask"
			}, {
				id: 73,
				"ⵠΔⵠ": Δᐃ.ⵠᐃᐃⵠΔΔΔ,
				"Δᐃᐃ": Δᐃ.ⵠⲆⵠⵠᐃΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Blue Mask"
			}, {
				id: 76,
				"ⵠΔⵠ": Δᐃ.ᐃᐃⵠΔⵠⲆⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⵠᐃᐃⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Military Mask"
			}, {
				id: 77,
				"ⵠΔⵠ": Δᐃ.ⵠᐃΔΔᐃⲆⵠ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃᐃᐃᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Orange Mask"
			}, {
				id: 78,
				"ⵠΔⵠ": Δᐃ.ⲆᐃⲆⵠᐃⵠⵠ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃⵠⲆΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "White and Red Points Mask"
			}, {
				id: 80,
				"ⵠΔⵠ": Δᐃ.ⵠⵠΔⵠⵠᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⲆᐃⵠⵠΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Stick out your tongue Mask"
			}, {
				id: 81,
				"ⵠΔⵠ": Δᐃ.ΔⵠΔⲆⲆΔⲆ,
				"Δᐃᐃ": Δᐃ.ⵠΔⲆⲆᐃⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Two Teeth Mask"
			}, {
				id: 82,
				"ⵠΔⵠ": Δᐃ.ⲆᐃᐃⵠⵠᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃΔᐃⲆᐃΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Make-up Mask"
			}, {
				id: 83,
				"ⵠΔⵠ": Δᐃ.ΔⵠⲆΔⲆΔⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⲆⲆⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Sad Mask"
			}, {
				id: 84,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆᐃⲆⲆⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⲆᐃⵠⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Happy Mask"
			}, {
				id: 90,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⵠΔⵠΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⲆᐃΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[344],
				name: "Blood"
			}, {
				id: 101,
				"ⵠΔⵠ": Δᐃ.ⲆⵠᐃⲆⵠⲆΔ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔⲆⵠⵠⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Axed Plans"
			}, {
				id: 105,
				"ⵠΔⵠ": Δᐃ.ΔΔΔᐃⲆΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆΔᐃᐃᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Saddle"
			}, {
				id: 113,
				"ⵠΔⵠ": Δᐃ.ΔᐃᐃⵠΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⵠΔᐃᐃΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "I see"
			}, {
				id: 114,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆⵠᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔΔⵠⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "I have no body and I must dress"
			}, {
				id: 115,
				"ⵠΔⵠ": Δᐃ.ΔⲆⲆⲆΔΔⵠ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃⵠΔⲆⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆΔⵠᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Cursed Crown"
			}, {
				id: 27,
				"ⵠΔⵠ": Δᐃ.ⲆΔᐃⲆΔⵠΔ,
				"Δᐃᐃ": Δᐃ.ⵠᐃΔᐃⵠᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Clown Face"
			}, {
				id: 20,
				"ⵠΔⵠ": Δᐃ.ⵠⲆⲆᐃᐃⵠⲆ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔΔᐃΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Sunglasses 3"
			}, {
				id: 32,
				"ⵠΔⵠ": Δᐃ.ⲆΔⲆᐃᐃⲆᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⵠᐃΔⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Engineer's Glasses"
			}, {
				id: 33,
				"ⵠΔⵠ": Δᐃ.ⵠᐃᐃⲆⲆᐃΔ,
				"Δᐃᐃ": Δᐃ.ΔᐃⵠⲆΔⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Engineer's Monocle"
			}, {
				id: 34,
				"ⵠΔⵠ": Δᐃ.ᐃⵠΔⲆᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ᐃΔⲆⲆⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mauve's butt"
			}, {
				id: 41,
				"ⵠΔⵠ": Δᐃ.ᐃΔΔᐃΔᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠⵠᐃᐃⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Lapa Head"
			}, {
				id: 42,
				"ⵠΔⵠ": Δᐃ.ⵠᐃⲆⵠᐃⲆⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⲆⲆᐃⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Lapa Head "
			}, {
				id: 85,
				"ⵠΔⵠ": Δᐃ.ⵠΔⲆᐃⵠⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠⵠᐃᐃΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Mask and Glasses"
			}, {
				id: 110,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⲆⵠΔᐃⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⵠΔᐃⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ⲆⵠΔⲆ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Spectrum Pet"
			}, {
				id: 60,
				"ⵠΔⵠ": Δᐃ.ⲆΔᐃⵠⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⵠᐃⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Jason"
			}, {
				id: 26,
				"ⵠΔⵠ": Δᐃ.ΔΔⲆⵠⵠⵠᐃ,
				"Δᐃᐃ": Δᐃ.ΔⵠΔⲆⵠΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Devil Horns"
			}, {
				id: ⲆᐃⲆᐃⵠᐃᐃ,
				"ⵠΔⵠ": Δᐃ.ⵠᐃᐃᐃⲆᐃΔ,
				"Δᐃᐃ": Δᐃ.ΔᐃΔⲆᐃᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Big Boss"
			}, {
				id: 35,
				"ⵠΔⵠ": Δᐃ.ΔⵠⵠᐃⲆⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⵠΔⵠᐃΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Baby Kraken"
			}, {
				id: 63,
				"ⵠΔⵠ": Δᐃ.ᐃᐃΔΔΔⲆᐃ,
				"Δᐃᐃ": Δᐃ.ᐃⵠⵠⲆΔⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Deer Antlers"
			}, {
				id: 65,
				"ⵠΔⵠ": Δᐃ.ΔⵠⵠⲆΔΔΔ,
				"Δᐃᐃ": Δᐃ.ΔᐃⲆⲆⲆⵠΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Baby Dragon on your head"
			}, {
				id: 86,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⲆᐃᐃⵠΔ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃΔΔΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Gaz Mask and Glasses"
			}, {
				id: 87,
				"ⵠΔⵠ": Δᐃ.ⲆⲆᐃΔᐃᐃⵠ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃᐃⲆᐃⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Pink Gaz Mask and Glasses"
			}, {
				id: 88,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⵠⵠⲆⲆⲆ,
				"Δᐃᐃ": Δᐃ.ⵠΔΔⵠΔᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[526],
				name: "Engineer Glasses"
			}, {
				id: 97,
				"ⵠΔⵠ": Δᐃ.ⵠΔᐃⵠⲆᐃᐃ,
				"Δᐃᐃ": Δᐃ.ⵠⲆⵠΔΔⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Jarred Horns"
			}, {
				id: 98,
				"ⵠΔⵠ": Δᐃ.ⵠᐃΔⲆⲆΔⵠ,
				"Δᐃᐃ": Δᐃ.ᐃⵠΔᐃΔΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Curved Horns"
			}, {
				id: 99,
				"ⵠΔⵠ": Δᐃ.ΔⵠⲆΔⵠΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆⲆᐃᐃΔⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Evil Goat Horns"
			}, {
				id: 107,
				"ⵠΔⵠ": Δᐃ.ⵠⵠⵠΔΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ᐃᐃΔⲆⲆᐃⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Decorative Earmuffs"
			}, {
				id: 112,
				"ⵠΔⵠ": Δᐃ.ⲆΔΔⲆᐃⲆΔ,
				"Δᐃᐃ": Δᐃ.ⲆⵠⲆΔⲆᐃᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Tamon Dragon Pet"
			}, {
				id: 116,
				"ⵠΔⵠ": Δᐃ.ⲆⲆΔⲆⲆⲆΔ,
				"Δᐃᐃ": Δᐃ.ⲆΔⵠᐃⲆⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⲆⵠΔ,
				"ᐃΔⲆ": ᐃ[314],
				name: "Blanket"
			}, {
				id: 45,
				"ⵠΔⵠ": Δᐃ.ⵠΔⵠᐃᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ⲆⲆⲆΔΔΔⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "More than Level 5",
				level: ⵠᐃⲆᐃ
			}, {
				id: 46,
				"ⵠΔⵠ": Δᐃ.ⲆΔⲆᐃⵠⲆΔ,
				"Δᐃᐃ": Δᐃ.ⵠΔⵠⲆⵠⵠⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "More than Level 10",
				level: ΔⵠΔᐃΔ
			}, {
				id: 47,
				"ⵠΔⵠ": Δᐃ.ᐃⲆⵠᐃΔᐃⵠ,
				"Δᐃᐃ": Δᐃ.ΔᐃⲆⵠⲆⲆΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "More than Level 15",
				level: ⵠⵠΔⵠᐃ
			}, {
				id: 48,
				"ⵠΔⵠ": Δᐃ.ⲆⵠⵠⲆⵠⲆⵠ,
				"Δᐃᐃ": Δᐃ.ΔᐃⲆⵠⲆΔΔ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "More than Level 20",
				level: 20
			}, {
				id: 49,
				"ⵠΔⵠ": Δᐃ.ΔⲆΔᐃⵠᐃⲆ,
				"Δᐃᐃ": Δᐃ.ⵠⵠⵠⲆⵠⲆᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "More than Level 25",
				level: 25
			}, {
				id: 50,
				"ⵠΔⵠ": Δᐃ.ⲆⲆΔⵠΔΔⲆ,
				"Δᐃᐃ": Δᐃ.ⲆΔⵠⲆⲆⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "More than Level 30",
				level: 30
			}, {
				id: 51,
				"ⵠΔⵠ": Δᐃ.ᐃⵠⲆΔᐃⲆⲆ,
				"Δᐃᐃ": Δᐃ.ⲆᐃᐃᐃⵠΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "More than Level 35",
				level: 35
			}, {
				id: 52,
				"ⵠΔⵠ": Δᐃ.Δⵠᐃⵠᐃⵠᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃᐃᐃⵠⵠᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "More than Level 40",
				level: 40
			}, {
				id: 53,
				"ⵠΔⵠ": Δᐃ.ⲆⲆΔᐃᐃΔⲆ,
				"Δᐃᐃ": Δᐃ.ΔⵠⵠΔΔⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "More than Level 45",
				level: 45
			}, {
				id: 54,
				"ⵠΔⵠ": Δᐃ.ⵠΔⵠΔΔⵠᐃ,
				"Δᐃᐃ": Δᐃ.ᐃᐃⲆᐃⵠΔⵠ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "More than Level 50",
				level: 50
			}, {
				id: 55,
				"ⵠΔⵠ": Δᐃ.ΔΔⲆⵠⲆⵠⵠ,
				"Δᐃᐃ": Δᐃ.ΔⵠⵠⲆᐃΔᐃ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "More than Level 55",
				level: 55
			}, {
				id: 56,
				"ⵠΔⵠ": Δᐃ.ᐃΔⵠⲆⵠᐃΔ,
				"Δᐃᐃ": Δᐃ.ⵠᐃᐃⲆⵠⲆⲆ,
				"ⲆΔᐃ": ᐃⵠᐃ.ᐃⵠΔⲆᐃ,
				"ᐃΔⲆ": ᐃ[314],
				name: "More than Level 60",
				level: 60
			}]
		};
		ᐃΔᐃᐃ.ΔⵠᐃⲆΔΔⲆ = ΔΔⲆⵠⵠⲆⲆ(ⲆⲆΔⲆ.Δⵠᐃⵠⵠ, 21);
		ᐃΔᐃᐃ.ⲆⵠⵠⵠⵠΔⲆ = ΔΔⲆⵠⵠⲆⲆ(ⲆⲆΔⲆ.Δⵠᐃⵠⵠ, ⵠⲆⵠΔⲆ);
		ᐃᐃ[ⵠ.ᐃΔⵠΔΔ] = [];
		ᐃᐃ[ⵠ.ΔΔⲆⵠᐃ] = [];
		ᐃᐃ[ⵠ.ΔⵠΔⵠⵠ] = [];
		ᐃᐃ[ⵠ.ⵠΔⲆΔᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⵠⲆΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆⲆⵠᐃ] = [];
		for (var ᐃⲆ = 0; ⲆⲆΔⲆ.Δⵠᐃⵠⵠ.length > ᐃⲆ; ᐃⲆ++) {
			ᐃᐃ[ⵠ.ᐃΔⵠΔΔ][ᐃⲆ] = [ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[ᐃⲆ].ⵠΔⵠ, ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[ᐃⲆ].Δᐃᐃ];
			ᐃᐃ[ⵠ.ΔΔⲆⵠᐃ][ᐃⲆ] = [ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[ᐃⲆ].ⲆΔⵠⲆ, ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[ᐃⲆ].Ⲇᐃᐃⵠ]
		}
		for (var ᐃⲆ = ⲆⲆᐃ; ᐃⲆ < ⲆⲆΔⲆ.ⵠΔⲆΔᐃ.length; ᐃⲆ++) ᐃᐃ[ⵠ.ⵠΔⲆΔᐃ][ᐃⲆ] = [ⲆⲆΔⲆ.ⵠΔⲆΔᐃ[ᐃⲆ].ⵠΔⵠ, ⲆⲆΔⲆ.ⵠΔⲆΔᐃ[ᐃⲆ].Δᐃᐃ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆⲆΔⲆ.ΔⵠΔⵠⵠ.length; ᐃⲆ++) ᐃᐃ[ⵠ.ΔⵠΔⵠⵠ][ᐃⲆ] = [ⲆⲆΔⲆ.ΔⵠΔⵠⵠ[ᐃⲆ].ⵠΔⵠ, ⲆⲆΔⲆ.ΔⵠΔⵠⵠ[ᐃⲆ].Δᐃᐃ];
		for (var ᐃⲆ = ⵠΔΔⲆ; ⲆⲆΔⲆ.ⲆⵠⲆΔ.length > ᐃⲆ; ᐃⲆ++) ᐃᐃ[ⵠ.ⲆⵠⲆΔ][ᐃⲆ] = [ⲆⲆΔⲆ.ⲆⵠⲆΔ[ᐃⲆ].ⵠΔⵠ, ⲆⲆΔⲆ.ⲆⵠⲆΔ[ᐃⲆ].Δᐃᐃ];
		for (var ᐃⲆ = Δⵠⵠ; ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ.length > ᐃⲆ; ᐃⲆ++) ᐃᐃ[ⵠ.ΔⲆⲆⵠᐃ][ᐃⲆ] = [ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ[ᐃⲆ].ⵠΔⵠ, ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ[ᐃⲆ].Δᐃᐃ]
	};

	function ᐃΔⵠ(Δ, ⵠᐃΔΔ, ΔᐃⲆΔ, Ⲇᐃᐃᐃ, ⵠⵠᐃΔ, ΔᐃⲆⵠ) {
		2 * ΔᐃⲆⵠ > Ⲇᐃᐃᐃ && (ΔᐃⲆⵠ = Ⲇᐃᐃᐃ / 2);
		ⵠⵠᐃΔ < ΔΔⵠⲆ * ΔᐃⲆⵠ && (ΔᐃⲆⵠ = ⵠⵠᐃΔ / 2);
		ΔᐃⲆⵠ < 0 && (ΔᐃⲆⵠ = 0);
		Δ.beginPath();
		Δ.moveTo(ⵠᐃΔΔ + ΔᐃⲆⵠ, ΔᐃⲆΔ);
		Δ.arcTo(ⵠᐃΔΔ + Ⲇᐃᐃᐃ, ΔᐃⲆΔ, ⵠᐃΔΔ + Ⲇᐃᐃᐃ, ΔᐃⲆΔ + ⵠⵠᐃΔ, ΔᐃⲆⵠ);
		Δ.arcTo(ⵠᐃΔΔ + Ⲇᐃᐃᐃ, ΔᐃⲆΔ + ⵠⵠᐃΔ, ⵠᐃΔΔ, ΔᐃⲆΔ + ⵠⵠᐃΔ, ΔᐃⲆⵠ);
		Δ.arcTo(ⵠᐃΔΔ, ΔᐃⲆΔ + ⵠⵠᐃΔ, ⵠᐃΔΔ, ΔᐃⲆΔ, ΔᐃⲆⵠ);
		Δ.arcTo(ⵠᐃΔΔ, ΔᐃⲆΔ, ⵠᐃΔΔ + Ⲇᐃᐃᐃ, ΔᐃⲆΔ, ΔᐃⲆⵠ);
		Δ.closePath()
	}

	function ⲆᐃⵠⲆΔᐃΔΔΔ(Δ, ⵠᐃΔΔ, ΔᐃⲆΔ, Ⲇᐃᐃᐃ, ⵠⵠᐃΔ, ΔᐃⲆⵠ) {
		Ⲇᐃᐃᐃ < 2 * ΔᐃⲆⵠ && (ΔᐃⲆⵠ = Ⲇᐃᐃᐃ / 2);
		Ⲇᐃⵠⵠ * ΔᐃⲆⵠ > ⵠⵠᐃΔ && (ΔᐃⲆⵠ = ⵠⵠᐃΔ / ⵠⵠᐃⲆ);
		ΔᐃⲆⵠ < 0 && (ΔᐃⲆⵠ = 0);
		Δ.beginPath();
		Δ.moveTo(ⵠᐃΔΔ + ΔᐃⲆⵠ, ΔᐃⲆΔ);
		Δ.arcTo(ⵠᐃΔΔ + Ⲇᐃᐃᐃ, ΔᐃⲆΔ, ⵠᐃΔΔ + Ⲇᐃᐃᐃ, ΔᐃⲆΔ + ⵠⵠᐃΔ, 0);
		Δ.arcTo(ⵠᐃΔΔ + Ⲇᐃᐃᐃ, ΔᐃⲆΔ + ⵠⵠᐃΔ, ⵠᐃΔΔ, ΔᐃⲆΔ + ⵠⵠᐃΔ, ΔᐃⲆⵠ);
		Δ.arcTo(ⵠᐃΔΔ, ΔᐃⲆΔ + ⵠⵠᐃΔ, ⵠᐃΔΔ, ΔᐃⲆΔ, ⵠⵠⲆΔ);
		Δ.arcTo(ⵠᐃΔΔ, ΔᐃⲆΔ, ⵠᐃΔΔ + Ⲇᐃᐃᐃ, ΔᐃⲆΔ, ΔᐃⲆⵠ);
		Δ.closePath()
	}

	function ⵠᐃ(Δ, Δⵠᐃᐃⵠ, ΔΔᐃⵠ, Δᐃⵠ) {
		if (Δⵠᐃᐃⵠ) {
			Δ.fillStyle = Δⵠᐃᐃⵠ;
			Δ.fill()
		}
		ΔΔᐃⵠ && (Δ.lineWidth = Δᐃⵠ, Δ.strokeStyle = ΔΔᐃⵠ, Δ.stroke())
	}
	const ⵠⵠΔⲆⲆ = ⵠᐃΔᐃⲆ;

	function ⵠΔᐃ(Δ, Ⲇᐃ, ⲆⲆⲆ, ΔⲆⵠ) {
		Δ.beginPath();
		Δ.arc(Ⲇᐃ, ⲆⲆⲆ, ΔⲆⵠ, 0, 2 * Math.PI)
	}
	const ⵠᐃⲆⵠ = Δⵠⵠ;

	function ᐃΔᐃΔⲆⵠⲆ(Δ, Ⲇᐃ, ⲆⲆⲆ, ΔⲆⵠ, ⵠᐃΔΔ) {
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.arc(Ⲇᐃ, ⲆⲆⲆ, ΔⲆⵠ, ⲆⲆΔ, 2 * Math.PI * ⵠᐃΔΔ)
	}

	function ΔΔΔΔ(Δ, ᐃᐃⲆⲆ, ΔⲆⵠ, ⲆᐃⲆⲆ) {
		var ⵠᐃΔΔ = 2 * Math.PI / ᐃᐃⲆⲆ;
		Δ.beginPath();
		var ᐃΔⲆⵠᐃⵠⵠ = [{
			x: ΔⲆⵠ,
			y: 0
		}];
		var ΔΔⵠⲆⵠΔᐃ = [];
		for (var ᐃⲆ = ΔⲆⵠⲆ; ᐃᐃⲆⲆ > ᐃⲆ; ᐃⲆ++) {
			ᐃΔⲆⵠᐃⵠⵠ.push({
				x: ΔⲆⵠ * Math.sin(ᐃⲆ * ⵠᐃΔΔ),
				y: ΔⲆⵠ * Math.cos(ᐃⲆ * ⵠᐃΔΔ)
			});
			var ᐃⲆΔⲆⲆ = ᐃΔⲆⵠᐃⵠⵠ.length;
			ΔΔⵠⲆⵠΔᐃ.push(ΔⲆᐃ.ᐃΔΔᐃΔⲆⵠ(ᐃΔⲆⵠᐃⵠⵠ[ᐃⲆΔⲆⲆ - 2], ᐃΔⲆⵠᐃⵠⵠ[ᐃⲆΔⲆⲆ - ⲆⲆᐃⵠ]))
		}
		ΔΔⵠⲆⵠΔᐃ.push(ΔⲆᐃ.ᐃΔΔᐃΔⲆⵠ(ᐃΔⲆⵠᐃⵠⵠ[ᐃΔⲆⵠᐃⵠⵠ.length - 1], ᐃΔⲆⵠᐃⵠⵠ[Ⲇⵠᐃ]));
		var ⵠΔΔ = ΔΔⵠⲆⵠΔᐃ[ΔΔⵠⲆⵠΔᐃ.length - ᐃⵠᐃᐃ];
		Δ.moveTo(ⵠΔΔ.x, ⵠΔΔ.y);
		for (var ᐃⲆ = ᐃⲆΔ; ᐃᐃⲆⲆ > ᐃⲆ; ᐃⲆ++) Δ.arcTo(ᐃΔⲆⵠᐃⵠⵠ[ᐃⲆ].x, ᐃΔⲆⵠᐃⵠⵠ[ᐃⲆ].y, ΔΔⵠⲆⵠΔᐃ[ᐃⲆ].x, ΔΔⵠⲆⵠΔᐃ[ᐃⲆ].y, ⲆᐃⲆⲆ);
		Δ.closePath()
	}
	const ᐃᐃⵠⵠ = ⲆΔΔⲆ;
	const ⲆⵠΔⵠⵠ = ΔΔΔΔᐃⵠⲆ;
	const ΔⲆΔⲆⲆΔᐃΔΔ = ⵠᐃⵠᐃᐃⵠΔ;
	const ⵠᐃᐃᐃᐃ = ᐃᐃᐃⵠᐃ;

	function ᐃΔⵠΔⲆᐃⲆᐃⵠ(Ⲇ, ⵠⵠⵠᐃ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ΔⵠⲆ = Math.floor(28 * Ⲇ);
		var ᐃᐃⵠⲆⵠ = Math.floor(Ⲇ * ⵠⵠᐃΔᐃ);
		Δ.font = ᐃᐃⵠⲆⵠ + ᐃ[249];
		var ΔⵠᐃᐃΔ = Ⲇ * 8;
		var ᐃΔΔ = Δ.measureText(ⵠⵠⵠᐃ).width + 2 * ΔⵠᐃᐃΔ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		ᐃΔⵠ(Δ, ⵠⵠΔΔ, ᐃⲆΔᐃ, ᐃΔΔ, ΔⵠⲆ, ⵠΔⲆⲆΔ * Ⲇ);
		Δ.globalAlpha = .5;
		ⵠᐃ(Δ, ᐃ[76]);
		Δ.globalAlpha = 1;
		Δ.textBaseline = ᐃ[409], Δ.font = ᐃᐃⵠⲆⵠ + ᐃ[249];
		Δ.beginPath();
		Δ.fillStyle = ᐃ[448];
		Δ.fillText(ⵠⵠⵠᐃ, ΔⵠᐃᐃΔ, ΔⵠⲆ / ⵠΔΔΔ);
		return ᐃⵠ
	}

	function ΔⲆΔⲆᐃⵠΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 120;
		var ΔⵠⲆ = 110 * Ⲇ;
		var w2 = ᐃΔΔ / 2;
		var ΔⲆΔⵠⵠ = ΔⵠⲆ / 2;
		var ⲆᐃⲆⲆ = Ⲇ * ⵠⲆΔⲆⲆ;
		var ⵠΔⲆⵠⲆᐃᐃ = 112 * Ⲇ;
		var ⵠⲆΔΔⲆᐃⵠ = Ⲇ * 82;
		var ⵠⲆⵠΔⲆⵠΔⵠⵠ = ⵠΔⲆⵠⲆᐃᐃ / 2;
		var ᐃΔⲆⲆⲆⵠⵠΔΔ = ⵠⲆΔΔⲆᐃⵠ / ⲆΔΔⲆ;
		var Δᐃⵠ = Ⲇ * ΔΔΔⵠ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.globalAlpha = ⵠⲆⵠⲆ;
		Δ.translate(w2, ΔⲆΔⵠⵠ);
		ᐃΔⵠ(Δ, -ⵠⲆⵠΔⲆⵠΔⵠⵠ, -ᐃΔⲆⲆⲆⵠⵠΔΔ, ⵠΔⲆⵠⲆᐃᐃ, ⵠⲆΔΔⲆᐃⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ, Δⵠ, Δᐃⵠ);
		return ᐃⵠ
	}

	function ⵠᐃⲆⲆ(ΔⲆⵠ, ⵠⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var Ⲇᐃᐃᐃ = Math.sqrt(ⵠⵠ.width * ⵠⵠ.width + ⵠⵠ.height * ⵠⵠ.height);
		d2 = Ⲇᐃᐃᐃ / ⵠΔⵠⲆ;
		ᐃⵠ.width = Ⲇᐃᐃᐃ;
		ᐃⵠ.height = Ⲇᐃᐃᐃ;
		Δ.translate(d2, d2);
		Δ.rotate(ΔⲆⵠ);
		Δ.drawImage(ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ᐃⲆⵠᐃ);
		return ᐃⵠ
	}

	function ᐃΔⲆᐃⵠᐃⵠⲆⲆ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 176 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 127;
		if (ᐃⲆ == 8) {
			Δ.globalAlpha = .3;
			Δ.save();
			Δ.translate(Ⲇ * 87, Ⲇ * 64.5);
			ᐃΔⵠ(Δ, Ⲇ * -56, -41.5 * Ⲇ, 112 * Ⲇ, 83 * Ⲇ, Ⲇ * 18);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], 4 * Ⲇ);
			Δ.save();
			Δ.translate(82 * Ⲇ, 69.5 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -51, Ⲇ * -36.5, 102 * Ⲇ, 73 * Ⲇ, ᐃⲆΔΔⲆ * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ⲆΔΔⲆ], Δⵠ[ⵠⲆⵠⲆ], Ⲇ * 4);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(55 * Ⲇ, Ⲇ * 41);
			Δ.bezierCurveTo(38 * Ⲇ, Ⲇ * 41, 37 * Ⲇ, Ⲇ * 50, 38 * Ⲇ, 61 * Ⲇ);
			Δ.bezierCurveTo(42 * Ⲇ, Ⲇ * 50, 46 * Ⲇ, Ⲇ * 46, 55 * Ⲇ, 42 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[3]);
			Δ.globalAlpha = ⲆⵠΔΔ;
			Δ.translate(Ⲇ * 26, ⵠᐃⲆⲆΔ * Ⲇ);
			ⵠΔᐃ(Δ, 35 * Ⲇ, Ⲇ * 75, ⵠⵠΔΔΔ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[4]);
			ⵠΔᐃ(Δ, Ⲇ * 85, 75 * Ⲇ, Ⲇ * ⵠⵠⲆΔⵠ);
			ⵠᐃ(Δ, Δⵠ[4]);
			ⵠΔᐃ(Δ, 32 * Ⲇ, 67 * Ⲇ, ⲆᐃΔⲆⵠ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[5]);
			ⵠΔᐃ(Δ, Ⲇ * 82, 67 * Ⲇ, Ⲇ * 5);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠᐃΔ])
		} else if (ΔᐃᐃᐃⲆΔΔ == ᐃⲆ) {
			var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
			var Δ = ᐃⵠ.getContext(ᐃ[269]);
			ᐃⵠ.width = Ⲇ * 332;
			ᐃⵠ.height = Ⲇ * 127;
			Δ.globalAlpha = .5;
			Δ.translate(0, Ⲇ * -36);
			Δ.save();
			Δ.translate(165.25 * Ⲇ, Ⲇ * 106.84375);
			ᐃΔⵠ(Δ, -56.5 * Ⲇ, Ⲇ * -41.5, Ⲇ * 113, Ⲇ * 83, 18 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]);
			Δ.globalAlpha = ΔᐃⵠⲆ;
			Δ.translate(Ⲇⵠⵠᐃ, Ⲇ * 20);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 210.75, Ⲇ * 72.84375);
			Δ.bezierCurveTo(Ⲇ * 238.75, Ⲇ * 74.84375, 270.75 * Ⲇ, 85.84375 * Ⲇ, 269.75 * Ⲇ, 90.84375 * Ⲇ);
			Δ.bezierCurveTo(268.75 * Ⲇ, Ⲇ * 94.84375, Ⲇ * 221.75, Ⲇ * 81.84375, 206.75 * Ⲇ, 85.84375 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[ΔΔⵠⲆ], 4 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(208.75 * Ⲇ, 69.84375 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 241.75, 61.84375 * Ⲇ, 265.75 * Ⲇ, Ⲇ * 65.84375, 286.75 * Ⲇ, Ⲇ * 69.84375);
			Δ.bezierCurveTo(290.75 * Ⲇ, Ⲇ * 75.84375, 225.75 * Ⲇ, Ⲇ * 69.84375, 215.75 * Ⲇ, Ⲇ * 80.84375);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ], Δⵠ[ᐃⲆⵠᐃ], 4 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 209.75, Ⲇ * 69.84375);
			Δ.bezierCurveTo(228.75 * Ⲇ, 51.84375 * Ⲇ, Ⲇ * 265.75, Ⲇ * 46.84375, Ⲇ * 294.75, 51.84375 * Ⲇ);
			Δ.bezierCurveTo(301.75 * Ⲇ, Ⲇ * 55.84375, 224.75 * Ⲇ, Ⲇ * 60.84375, 216.75 * Ⲇ, 80.84375 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ΔΔⵠ], Δⵠ[2], 4 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 193.75, Ⲇ * 72.84375);
			Δ.bezierCurveTo(206.75 * Ⲇ, 47.84375 * Ⲇ, Ⲇ * 221.75, Ⲇ * 37.84375, Ⲇ * 249.75, Ⲇ * 35.84375);
			Δ.bezierCurveTo(264.75 * Ⲇ, 34.84375 * Ⲇ, 305.75 * Ⲇ, Ⲇ * 16.84375, 300.75 * Ⲇ, Ⲇ * 24.84375);
			Δ.bezierCurveTo(273.75 * Ⲇ, Ⲇ * 45.84375, Ⲇ * 245.75, 46.84375 * Ⲇ, 235.75 * Ⲇ, Ⲇ * 62.84375);
			Δ.bezierCurveTo(Ⲇ * 218.75, 82.84375 * Ⲇ, Ⲇ * 215.75, Ⲇ * 87.84375, 199.75 * Ⲇ, 84.84375 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⵠ], Δⵠ[ⵠΔΔΔ], ΔⲆⵠΔⲆ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(126.75 * Ⲇ, 80.34375 * Ⲇ);
			Δ.bezierCurveTo(94.75 * Ⲇ, 88.34375 * Ⲇ, Ⲇ * 83.75, Ⲇ * 88.34375, 65.75 * Ⲇ, 90.34375 * Ⲇ);
			Δ.bezierCurveTo(61.75 * Ⲇ, 87.34375 * Ⲇ, Ⲇ * 86.75, 77.34375 * Ⲇ, 129.75 * Ⲇ, 70.34375 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆΔⲆΔ], 4 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(120.75 * Ⲇ, 72.34375 * Ⲇ);
			Δ.bezierCurveTo(128.75 * Ⲇ, Ⲇ * 62.34375, Ⲇ * 98.75, Ⲇ * 64.34375, Ⲇ * 49.75, Ⲇ * 68.34375);
			Δ.bezierCurveTo(34.75 * Ⲇ, 75.34375 * Ⲇ, Ⲇ * 101.75, Ⲇ * 72.34375, 124.75 * Ⲇ, Ⲇ * 78.34375);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⵠ], Δⵠ[ΔⲆⵠΔ], ᐃᐃΔⵠⲆ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(128.75 * Ⲇ, 76.34375 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 111.75, Ⲇ * 54.34375, 69.75 * Ⲇ, Ⲇ * 48.34375, Ⲇ * 39.75, Ⲇ * 50.34375);
			Δ.bezierCurveTo(26.75 * Ⲇ, 53.34375 * Ⲇ, 86.75 * Ⲇ, 59.34375 * Ⲇ, 123.75 * Ⲇ, 78.34375 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * 4);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 143.75, Ⲇ * 74.34375);
			Δ.bezierCurveTo(Ⲇ * 128.75, Ⲇ * 48.34375, 108.75 * Ⲇ, Ⲇ * 35.34375, Ⲇ * 81.75, Ⲇ * 35.34375);
			Δ.bezierCurveTo(63.75 * Ⲇ, 33.34375 * Ⲇ, Ⲇ * 26.75, Ⲇ * 15.34375, 29.75 * Ⲇ, 25.34375 * Ⲇ);
			Δ.bezierCurveTo(33.75 * Ⲇ, 30.34375 * Ⲇ, Ⲇ * 49.75, 40.34375 * Ⲇ, Ⲇ * 70.75, Ⲇ * 49.34375);
			Δ.bezierCurveTo(Ⲇ * 94.75, 54.34375 * Ⲇ, 104.75 * Ⲇ, 72.34375 * Ⲇ, 128.75 * Ⲇ, Ⲇ * 88.34375);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃᐃⲆⵠ], Ⲇ * 4);
			Δ.translate(ⲆⲆᐃⲆ, -28 * Ⲇ);
			Δ.save();
			Δ.translate(Ⲇ * 165.25, 106.84375 * Ⲇ);
			ᐃΔⵠ(Δ, -56.5 * Ⲇ, Ⲇ * -41.5, Ⲇ * 113, Ⲇ * 83, Ⲇ * ᐃᐃΔΔⵠᐃᐃ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠᐃᐃⲆ], ⵠΔᐃⲆ * Ⲇ);
			Δ.translate(28 * Ⲇ, Ⲇ * 15);
			Δ.translate(ᐃⲆᐃ, 8 * Ⲇ);
			Δ.globalAlpha = .5;
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 83, 52 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 78, 65 * Ⲇ, Ⲇ * 110, 72 * Ⲇ, 139 * Ⲇ, Ⲇ * 71);
			Δ.bezierCurveTo(Ⲇ * 176, 71 * Ⲇ, 193 * Ⲇ, Ⲇ * 61, Ⲇ * 191, Ⲇ * 54);
			Δ.bezierCurveTo(Ⲇ * 202, 58 * Ⲇ, Ⲇ * 198, 72 * Ⲇ, Ⲇ * 187, 75 * Ⲇ);
			Δ.bezierCurveTo(143 * Ⲇ, 87 * Ⲇ, 107 * Ⲇ, 79 * Ⲇ, 89 * Ⲇ, 75 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 72, 69 * Ⲇ, Ⲇ * 74, 58 * Ⲇ, 83 * Ⲇ, 52 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalAlpha = ΔΔⵠ;
			Δ.translate(Ⲇ * ⵠΔⵠᐃ, -8 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 83, Ⲇ * 52);
			Δ.bezierCurveTo(Ⲇ * 78, Ⲇ * 65, 110 * Ⲇ, Ⲇ * 72, Ⲇ * 139, Ⲇ * 71);
			Δ.bezierCurveTo(Ⲇ * 176, 71 * Ⲇ, Ⲇ * 193, Ⲇ * 61, Ⲇ * 191, Ⲇ * 54);
			Δ.bezierCurveTo(Ⲇ * 202, Ⲇ * 58, 198 * Ⲇ, Ⲇ * 72, 187 * Ⲇ, 75 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 143, 87 * Ⲇ, 107 * Ⲇ, Ⲇ * 79, 89 * Ⲇ, Ⲇ * 75);
			Δ.bezierCurveTo(Ⲇ * 72, Ⲇ * 69, Ⲇ * 74, Ⲇ * 58, Ⲇ * 83, Ⲇ * 52);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[5], Δⵠ[6], 4 * Ⲇ);
			Δ.translate(Ⲇ * -28, Ⲇ * -ⵠⵠᐃⲆΔⲆΔ);
			ⵠΔᐃ(Δ, 141.75 * Ⲇ, 127.34375 * Ⲇ, Ⲇ * ΔᐃΔⵠᐃ);
			ⵠᐃ(Δ, Δⵠ[ᐃΔᐃΔ]);
			ⵠΔᐃ(Δ, Ⲇ * 191.75, Ⲇ * 127.09375, ⲆⵠⲆⲆᐃⲆⲆ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⵠ]);
			ⵠΔᐃ(Δ, Ⲇ * 138.75, 119.34375 * Ⲇ, 5 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[4]);
			ⵠΔᐃ(Δ, Ⲇ * 188.75, 119.34375 * Ⲇ, 5 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠᐃⲆ]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 125.75, 139.34375 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 134.75, Ⲇ * 134.34375, Ⲇ * 143.75, Ⲇ * 134.34375, Ⲇ * 156.75, Ⲇ * 139.34375);
			Δ.bezierCurveTo(153.25 * Ⲇ, Ⲇ * 141.84375, 153.25 * Ⲇ, 141.84375 * Ⲇ, Ⲇ * 149.75, Ⲇ * 144.34375);
			Δ.bezierCurveTo(140.25 * Ⲇ, Ⲇ * 144.34375, Ⲇ * 140.25, Ⲇ * 144.34375, 130.75 * Ⲇ, 144.34375 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 176.75, 139.34375 * Ⲇ);
			Δ.bezierCurveTo(183.75 * Ⲇ, 135.34375 * Ⲇ, Ⲇ * 199.75, 135.34375 * Ⲇ, Ⲇ * 205.75, 139.34375 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 203.25, 141.34375 * Ⲇ, Ⲇ * 203.25, 141.34375 * Ⲇ, 200.75 * Ⲇ, 143.34375 * Ⲇ);
			Δ.bezierCurveTo(190.75 * Ⲇ, 143.84375 * Ⲇ, 190.75 * Ⲇ, 143.84375 * Ⲇ, 180.75 * Ⲇ, 144.34375 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1])
		} else {
			Δ.globalAlpha = .75;
			Δ.translate(0, Ⲇ * ΔᐃⵠΔⵠ);
			Δ.save();
			Δ.translate(Ⲇ * 87, 64.5 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -56, Ⲇ * -41.5, Ⲇ * 112, 83 * Ⲇ, ⵠΔⲆᐃΔ * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]);
			Δ.globalAlpha = 1;
			Δ.translate(0, -8 * Ⲇ);
			Δ.save();
			Δ.translate(Ⲇ * 87, 64.5 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -56, Ⲇ * -41.5, Ⲇ * 112, 83 * Ⲇ, Ⲇ * 18);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃᐃΔⵠ], Ⲇ * ⵠⲆᐃⲆ);
			if (0 == ᐃⲆ) {
				Δ.translate(27 * Ⲇ, ⵠᐃⲆⵠᐃ * Ⲇ);
				ⵠΔᐃ(Δ, Ⲇ * 35, Ⲇ * 75, ⲆⲆⲆΔⵠ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[3]);
				ⵠΔᐃ(Δ, Ⲇ * 85, Ⲇ * 75, 15 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ⲆⵠⵠⲆ]);
				ⵠΔᐃ(Δ, 32 * Ⲇ, Ⲇ * 67, 5 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠᐃⲆ]);
				ⵠΔᐃ(Δ, Ⲇ * 82, 67 * Ⲇ, 5 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[4])
			} else if (ⵠⲆⵠⲆ == ᐃⲆ) {
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(35 * Ⲇ, Ⲇ * 73);
				Δ.bezierCurveTo(40 * Ⲇ, Ⲇ * 72, 38 * Ⲇ, Ⲇ * 68, Ⲇ * 35, 67 * Ⲇ);
				Δ.bezierCurveTo(25 * Ⲇ, Ⲇ * 67, Ⲇ * 21, Ⲇ * 65, ᐃⵠᐃΔⲆᐃΔ * Ⲇ, Ⲇ * 61);
				Δ.bezierCurveTo(Ⲇ * 10, 60 * Ⲇ, Ⲇ * 16, 64 * Ⲇ, Ⲇ * 20, Ⲇ * 67);
				Δ.bezierCurveTo(ᐃΔΔΔ * Ⲇ, Ⲇ * 70, Ⲇ * ⵠΔⵠΔⵠ, 68.5 * Ⲇ, Ⲇ * 4, 70 * Ⲇ);
				Δ.bezierCurveTo(2 * Ⲇ, Ⲇ * 71, Ⲇ * ΔⲆⵠΔᐃ, Ⲇ * 72, Ⲇ * 13, 73 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 12.5, Ⲇ * 76.5, 12.5 * Ⲇ, Ⲇ * 76.5, 12 * Ⲇ, Ⲇ * 80);
				Δ.bezierCurveTo(Ⲇ * ᐃⲆᐃⲆⵠ, 83 * Ⲇ, Ⲇ * ⲆᐃⲆⵠⵠ, 80 * Ⲇ, 18 * Ⲇ, Ⲇ * 73);
				Δ.bezierCurveTo(Ⲇ * 26.5, 73.5 * Ⲇ, Ⲇ * 26.5, 73.5 * Ⲇ, Ⲇ * 35, 74 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[5], Δⵠ[ⵠⵠⲆᐃⲆ], ΔⲆⲆⲆ * Ⲇ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 134, 64 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 141.5, 64 * Ⲇ, 141.5 * Ⲇ, Ⲇ * 64, Ⲇ * 149, 64 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 153, Ⲇ * 59, 156 * Ⲇ, Ⲇ * 56, Ⲇ * 159, Ⲇ * 56);
				Δ.bezierCurveTo(Ⲇ * 161, 57 * Ⲇ, 160 * Ⲇ, Ⲇ * 60, Ⲇ * 155, 65 * Ⲇ);
				Δ.bezierCurveTo(165 * Ⲇ, Ⲇ * 71, 168 * Ⲇ, 72 * Ⲇ, Ⲇ * 169, Ⲇ * 74);
				Δ.bezierCurveTo(169 * Ⲇ, Ⲇ * 76, 159 * Ⲇ, 71 * Ⲇ, Ⲇ * 156, 72 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 154, Ⲇ * 72, Ⲇ * 155, 75 * Ⲇ, 156 * Ⲇ, 79 * Ⲇ);
				Δ.bezierCurveTo(155 * Ⲇ, Ⲇ * 81, Ⲇ * 153, Ⲇ * 78, 150 * Ⲇ, Ⲇ * 72);
				Δ.bezierCurveTo(Ⲇ * 142, 71.5 * Ⲇ, Ⲇ * 142, Ⲇ * 71.5, 134 * Ⲇ, Ⲇ * 71);
				Δ.bezierCurveTo(Ⲇ * 130, 69 * Ⲇ, Ⲇ * 131, 65 * Ⲇ, 135 * Ⲇ, 64 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[ⲆⵠⲆᐃ], Δⵠ[ᐃⵠⵠᐃⵠ], ᐃΔⵠᐃⲆ * Ⲇ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(80 * Ⲇ, Ⲇ * 95);
				Δ.bezierCurveTo(Ⲇ * 83, 88 * Ⲇ, Ⲇ * 89, Ⲇ * 88, Ⲇ * 92, Ⲇ * 95);
				Δ.bezierCurveTo(92 * Ⲇ, Ⲇ * 105, 88 * Ⲇ, Ⲇ * 110, Ⲇ * 86, 110 * Ⲇ);
				Δ.bezierCurveTo(83 * Ⲇ, Ⲇ * 107, 82 * Ⲇ, Ⲇ * 104, 80 * Ⲇ, 96 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[ⲆᐃⲆⲆΔ], Δⵠ[ⵠᐃᐃᐃᐃ], ⵠΔΔᐃ * Ⲇ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(81 * Ⲇ, ᐃᐃΔⵠⵠ * Ⲇ);
				Δ.bezierCurveTo(82 * Ⲇ, Ⲇ * 97, Ⲇ * 83, Ⲇ * 96, 85 * Ⲇ, Ⲇ * 96);
				Δ.bezierCurveTo(82 * Ⲇ, ΔⵠⲆⵠⲆ * Ⲇ, Ⲇ * 82, Ⲇ * 101, Ⲇ * 83, Ⲇ * 103);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[8]);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 83, Ⲇ * 103);
				Δ.bezierCurveTo(83 * Ⲇ, Ⲇ * 102, Ⲇ * 84, 100 * Ⲇ, 86 * Ⲇ, Ⲇ * 100);
				Δ.bezierCurveTo(Ⲇ * 84, Ⲇ * 103, Ⲇ * 84, 105 * Ⲇ, Ⲇ * 84, 106 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⲆⲆ]);
				Δ.translate(27 * Ⲇ, Ⲇ * 10);
				ⵠΔᐃ(Δ, Ⲇ * 35, 75 * Ⲇ, 15 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃΔ]);
				ⵠΔᐃ(Δ, 85 * Ⲇ, Ⲇ * 75, ⲆⵠⲆⲆⲆⲆᐃ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ᐃᐃΔΔ]);
				ⵠΔᐃ(Δ, Ⲇ * 32, 67 * Ⲇ, ⵠⲆⲆⲆ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ᐃΔΔΔⲆ]);
				ⵠΔᐃ(Δ, Ⲇ * 82, 67 * Ⲇ, Ⲇ * 5);
				ⵠᐃ(Δ, Δⵠ[ᐃΔⵠᐃⲆ])
			} else if (2 == ᐃⲆ) {
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 48, 22 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 85.5, 22 * Ⲇ, 85.5 * Ⲇ, Ⲇ * 22, 123 * Ⲇ, 22 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 138, Ⲇ * 23, Ⲇ * 147, Ⲇ * 34, 143 * Ⲇ, 62 * Ⲇ);
				Δ.bezierCurveTo(142 * Ⲇ, Ⲇ * 67, 144 * Ⲇ, Ⲇ * 70, 149 * Ⲇ, Ⲇ * 73);
				Δ.bezierCurveTo(147 * Ⲇ, Ⲇ * 77, 145 * Ⲇ, 77 * Ⲇ, 143 * Ⲇ, Ⲇ * 77);
				Δ.bezierCurveTo(Ⲇ * 141, Ⲇ * 85, Ⲇ * 145, Ⲇ * 92, 148 * Ⲇ, 97 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 142, 103 * Ⲇ, 134 * Ⲇ, Ⲇ * 105, Ⲇ * 121, Ⲇ * 106);
				Δ.bezierCurveTo(85 * Ⲇ, Ⲇ * 106, 85 * Ⲇ, 106 * Ⲇ, Ⲇ * 49, Ⲇ * 106);
				Δ.bezierCurveTo(32 * Ⲇ, 104 * Ⲇ, Ⲇ * 29, Ⲇ * 101, Ⲇ * 24, 95 * Ⲇ);
				Δ.bezierCurveTo(30 * Ⲇ, Ⲇ * 86, Ⲇ * 31, 85 * Ⲇ, Ⲇ * 30, 78 * Ⲇ);
				Δ.bezierCurveTo(27.5 * Ⲇ, 76 * Ⲇ, Ⲇ * 27.5, Ⲇ * 76, Ⲇ * 25, 74 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 31, Ⲇ * 68, 31 * Ⲇ, 60 * Ⲇ, 30 * Ⲇ, Ⲇ * 46);
				Δ.bezierCurveTo(Ⲇ * 31, 31 * Ⲇ, Ⲇ * 37, Ⲇ * 23, 47 * Ⲇ, 22 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠΔⵠⲆ], Ⲇ * ᐃᐃⵠΔ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(30 * Ⲇ, Ⲇ * 44);
				Δ.bezierCurveTo(66 * Ⲇ, 48 * Ⲇ, 99 * Ⲇ, 45 * Ⲇ, Ⲇ * 141, 39 * Ⲇ);
				ⵠᐃ(Δ, ⵠΔΔⲆΔ, Δⵠ[3], ⵠΔᐃⲆ * Ⲇ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 30, 67 * Ⲇ);
				Δ.bezierCurveTo(80 * Ⲇ, Ⲇ * 44, Ⲇ * 118, Ⲇ * 43, Ⲇ * 141, Ⲇ * 60);
				ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[3], 4 * Ⲇ);
				Δ.globalAlpha = .4;
				ⵠΔᐃ(Δ, Ⲇ * 31, Ⲇ * 44, Ⲇ * ΔᐃΔᐃΔ);
				ⵠᐃ(Δ, Δⵠ[ΔᐃⲆᐃⵠ]);
				ⵠΔᐃ(Δ, 42 * Ⲇ, 47 * Ⲇ, 9 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[5]);
				ⵠΔᐃ(Δ, 70 * Ⲇ, Ⲇ * 42, 9 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆᐃⲆ]);
				ⵠΔᐃ(Δ, Ⲇ * 53, 45 * Ⲇ, ⵠΔᐃΔΔⲆᐃ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[7]);
				ⵠΔᐃ(Δ, Ⲇ * 103, Ⲇ * 40, ᐃΔⵠᐃᐃ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⲆⲆ]);
				ⵠΔᐃ(Δ, 116 * Ⲇ, 41 * Ⲇ, Ⲇ * 9);
				ⵠᐃ(Δ, Δⵠ[5]);
				ⵠΔᐃ(Δ, 131 * Ⲇ, 41 * Ⲇ, ΔⵠⵠᐃⲆ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ΔΔⲆΔ]);
				ⵠΔᐃ(Δ, Ⲇ * 39, 64 * Ⲇ, Ⲇ * ⵠⵠⵠᐃⵠ);
				ⵠᐃ(Δ, Δⵠ[7]);
				ⵠΔᐃ(Δ, Ⲇ * 51, Ⲇ * 60, Ⲇ * ᐃΔⵠᐃᐃ);
				ⵠᐃ(Δ, Δⵠ[6]);
				ⵠΔᐃ(Δ, 74 * Ⲇ, Ⲇ * 53, 9 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ᐃᐃⵠΔ]);
				ⵠΔᐃ(Δ, Ⲇ * 83, 51 * Ⲇ, ⲆⲆⵠⵠᐃ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ᐃᐃᐃⵠᐃ]);
				ⵠΔᐃ(Δ, Ⲇ * 95, 51 * Ⲇ, Ⲇ * ᐃⵠⲆᐃᐃⲆΔ);
				ⵠᐃ(Δ, Δⵠ[ΔⵠΔᐃⵠ]);
				ⵠΔᐃ(Δ, Ⲇ * 107, 49 * Ⲇ, ᐃΔⵠⲆⲆ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[7]);
				ⵠΔᐃ(Δ, 120 * Ⲇ, Ⲇ * 50, Ⲇ * 9);
				ⵠᐃ(Δ, Δⵠ[ΔΔΔⵠ]);
				ⵠΔᐃ(Δ, 137 * Ⲇ, 57 * Ⲇ, Ⲇ * 9);
				ⵠᐃ(Δ, Δⵠ[5]);
				Δ.globalAlpha = ⵠⵠⵠⲆ;
				ⵠΔᐃ(Δ, 31 * Ⲇ, Ⲇ * 44, Ⲇ * 4);
				ⵠᐃ(Δ, Δⵠ[4]);
				ⵠΔᐃ(Δ, 42 * Ⲇ, 47 * Ⲇ, Ⲇ * 4);
				ⵠᐃ(Δ, Δⵠ[5]);
				ⵠΔᐃ(Δ, Ⲇ * 53, Ⲇ * 45, Ⲇ * ᐃᐃΔⵠⲆ);
				ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆΔΔ]);
				ⵠΔᐃ(Δ, 70 * Ⲇ, 43 * Ⲇ, ΔᐃᐃΔ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[6]);
				ⵠΔᐃ(Δ, 50 * Ⲇ, Ⲇ * 59, 4 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ΔΔΔᐃΔ]);
				ⵠΔᐃ(Δ, 39 * Ⲇ, Ⲇ * 64, 4 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[7]);
				ⵠΔᐃ(Δ, Ⲇ * 83, Ⲇ * 51, Ⲇ * 4);
				ⵠᐃ(Δ, Δⵠ[ΔᐃᐃΔ]);
				ⵠΔᐃ(Δ, Ⲇ * 74, Ⲇ * 53, Ⲇ * 4);
				ⵠᐃ(Δ, Δⵠ[ⲆᐃⲆᐃᐃ]);
				ⵠΔᐃ(Δ, Ⲇ * 95, 51 * Ⲇ, 4 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠᐃⵠ]);
				ⵠΔᐃ(Δ, 103 * Ⲇ, Ⲇ * 41, ΔⲆⲆⲆ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[Δᐃⵠⵠᐃ]);
				ⵠΔᐃ(Δ, Ⲇ * 107, 49 * Ⲇ, Ⲇ * ΔᐃᐃΔ);
				ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆΔΔ]);
				ⵠΔᐃ(Δ, 116 * Ⲇ, Ⲇ * 41, Ⲇ * ᐃΔⵠᐃⲆ);
				ⵠᐃ(Δ, Δⵠ[5]);
				ⵠΔᐃ(Δ, 131 * Ⲇ, Ⲇ * 41, Ⲇ * ΔⲆⲆⲆ);
				ⵠᐃ(Δ, Δⵠ[ΔⲆΔⲆ]);
				ⵠΔᐃ(Δ, 137 * Ⲇ, Ⲇ * 57, Ⲇ * 4);
				ⵠᐃ(Δ, Δⵠ[5]);
				ⵠΔᐃ(Δ, Ⲇ * 120, 50 * Ⲇ, 4 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ⵠΔᐃⲆ]);
				Δ.translate(Ⲇ * 27, ᐃᐃⵠΔⵠ * Ⲇ);
				ⵠΔᐃ(Δ, 35 * Ⲇ, Ⲇ * 75, 15 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠⵠᐃ]);
				ⵠΔᐃ(Δ, Ⲇ * 85, Ⲇ * 75, Ⲇ * ⵠᐃⵠΔΔ);
				ⵠᐃ(Δ, Δⵠ[9]);
				ⵠΔᐃ(Δ, Ⲇ * 32, Ⲇ * 67, Ⲇ * 5);
				ⵠᐃ(Δ, Δⵠ[10]);
				ⵠΔᐃ(Δ, Ⲇ * 82, Ⲇ * 67, ΔΔⵠⵠ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃᐃⵠ])
			} else if (ⲆⲆΔΔ == ᐃⲆ) {
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 23, Ⲇ * 95);
				Δ.bezierCurveTo(Ⲇ * 30, Ⲇ * 85, 30 * Ⲇ, Ⲇ * 83, Ⲇ * 30, 72 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 30, 61.5 * Ⲇ, 30 * Ⲇ, 61.5 * Ⲇ, Ⲇ * 30, 51 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 29, 33 * Ⲇ, Ⲇ * 42, Ⲇ * 23, 54 * Ⲇ, 24 * Ⲇ);
				Δ.bezierCurveTo(86.5 * Ⲇ, Ⲇ * 24, 86.5 * Ⲇ, 24 * Ⲇ, Ⲇ * 119, 24 * Ⲇ);
				Δ.bezierCurveTo(135 * Ⲇ, 24 * Ⲇ, 143 * Ⲇ, 33 * Ⲇ, Ⲇ * 143, Ⲇ * 47);
				Δ.bezierCurveTo(143 * Ⲇ, 63.5 * Ⲇ, Ⲇ * 143, 63.5 * Ⲇ, 143 * Ⲇ, Ⲇ * 80);
				Δ.bezierCurveTo(Ⲇ * 142, Ⲇ * 86, Ⲇ * 147, Ⲇ * 93, 150 * Ⲇ, 96 * Ⲇ);
				Δ.bezierCurveTo(144 * Ⲇ, 107 * Ⲇ, 113 * Ⲇ, 112 * Ⲇ, 84 * Ⲇ, Ⲇ * 111);
				Δ.bezierCurveTo(Ⲇ * 52, 112 * Ⲇ, Ⲇ * 34, Ⲇ * 106, 23 * Ⲇ, 96 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * 4);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(30 * Ⲇ, Ⲇ * 81);
				Δ.bezierCurveTo(56 * Ⲇ, 99 * Ⲇ, 104 * Ⲇ, 98 * Ⲇ, 142 * Ⲇ, Ⲇ * 84);
				Δ.bezierCurveTo(145.5 * Ⲇ, 89.5 * Ⲇ, Ⲇ * 145.5, 89.5 * Ⲇ, Ⲇ * 149, Ⲇ * 95);
				Δ.bezierCurveTo(Ⲇ * 142, Ⲇ * 106, Ⲇ * 127, Ⲇ * 110, Ⲇ * 81, 110 * Ⲇ);
				Δ.bezierCurveTo(36 * Ⲇ, Ⲇ * 112, 28 * Ⲇ, 99 * Ⲇ, Ⲇ * 23, Ⲇ * 95);
				Δ.bezierCurveTo(31 * Ⲇ, 87 * Ⲇ, 31 * Ⲇ, Ⲇ * 82, 30 * Ⲇ, 81 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[ⲆⲆΔΔ], Δⵠ[Ⲇᐃⵠⵠ], Ⲇ * 4);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 23, 95 * Ⲇ);
				Δ.bezierCurveTo(30 * Ⲇ, Ⲇ * 85, 30 * Ⲇ, Ⲇ * 83, 30 * Ⲇ, Ⲇ * 72);
				Δ.bezierCurveTo(30 * Ⲇ, Ⲇ * 61.5, Ⲇ * 30, 61.5 * Ⲇ, Ⲇ * 30, Ⲇ * 51);
				Δ.bezierCurveTo(Ⲇ * 29, Ⲇ * 33, 42 * Ⲇ, 23 * Ⲇ, Ⲇ * 54, Ⲇ * 24);
				Δ.bezierCurveTo(86.5 * Ⲇ, 24 * Ⲇ, Ⲇ * 86.5, 24 * Ⲇ, Ⲇ * 119, 24 * Ⲇ);
				Δ.bezierCurveTo(135 * Ⲇ, Ⲇ * 24, Ⲇ * 143, Ⲇ * 33, 143 * Ⲇ, Ⲇ * 47);
				Δ.bezierCurveTo(143 * Ⲇ, Ⲇ * 63.5, Ⲇ * 143, Ⲇ * 63.5, 143 * Ⲇ, 80 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 142, 86 * Ⲇ, 147 * Ⲇ, 93 * Ⲇ, Ⲇ * 150, 96 * Ⲇ);
				Δ.bezierCurveTo(144 * Ⲇ, 107 * Ⲇ, 113 * Ⲇ, Ⲇ * 112, Ⲇ * 84, 111 * Ⲇ);
				Δ.bezierCurveTo(52 * Ⲇ, 112 * Ⲇ, 34 * Ⲇ, Ⲇ * 106, Ⲇ * 23, 96 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, ΔⲆᐃⲆⵠ, Δⵠ[Ⲇᐃⵠⵠ], ΔΔΔⵠ * Ⲇ);
				Δ.translate(27 * Ⲇ, Ⲇ * 10);
				ⵠΔᐃ(Δ, Ⲇ * 35, 75 * Ⲇ, Ⲇ * 15);
				ⵠᐃ(Δ, Δⵠ[6]);
				ⵠΔᐃ(Δ, 85 * Ⲇ, 75 * Ⲇ, 15 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[6]);
				ⵠΔᐃ(Δ, Ⲇ * 32, 67 * Ⲇ, Ⲇ * ᐃᐃⲆⵠᐃ);
				ⵠᐃ(Δ, Δⵠ[7]);
				ⵠΔᐃ(Δ, 82 * Ⲇ, Ⲇ * 67, Ⲇ * ⵠᐃⵠᐃΔ);
				ⵠᐃ(Δ, Δⵠ[ⲆᐃⲆⲆΔ]);
				Δ.translate(-96 * Ⲇ, Ⲇ * -25);
				Δ.scale(1.8, 1.8);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(85 * Ⲇ, 21 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 73, 16 * Ⲇ, Ⲇ * 70, Ⲇ * ΔⲆⲆⲆⲆΔᐃ, Ⲇ * 70, Ⲇ * 26);
				Δ.bezierCurveTo(72 * Ⲇ, 34 * Ⲇ, 75 * Ⲇ, Ⲇ * 37, Ⲇ * 85, Ⲇ * 26);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], Ⲇ * ⵠⵠΔⲆ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 89, Ⲇ * 21);
				Δ.bezierCurveTo(104 * Ⲇ, 16 * Ⲇ, 105 * Ⲇ, 19 * Ⲇ, Ⲇ * 106, Ⲇ * 24);
				Δ.bezierCurveTo(Ⲇ * 105, 36 * Ⲇ, Ⲇ * 97, 36 * Ⲇ, Ⲇ * 90, 28 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[ΔΔⲆΔ], Δⵠ[5], ⵠⵠΔⲆ * Ⲇ);
				ⵠΔᐃ(Δ, 87 * Ⲇ, 23 * Ⲇ, Ⲇ * 6.324555320336759);
				ⵠᐃ(Δ, Δⵠ[ᐃΔⵠᐃⲆ], Δⵠ[5], Ⲇ * ⲆⵠⵠⲆ)
			} else if (ᐃⲆ == 4) {
				Δ.translate(Ⲇ * 27, Ⲇ * 8);
				ⵠΔᐃ(Δ, Ⲇ * 15, 76 * Ⲇ, 9.219544457292887 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[3]);
				ⵠΔᐃ(Δ, Ⲇ * 106, Ⲇ * 76, Ⲇ * 9.219544457292887);
				ⵠᐃ(Δ, Δⵠ[ΔᐃΔⲆ]);
				Δ.translate(Ⲇ * -27, Ⲇ * -ⲆᐃⲆᐃᐃ);
				Δ.translate(27 * Ⲇ, ΔΔⵠⲆⵠ * Ⲇ);
				ⵠΔᐃ(Δ, Ⲇ * 35, 75 * Ⲇ, Ⲇ * ⲆⵠⲆⲆᐃⲆⲆ);
				ⵠᐃ(Δ, Δⵠ[5]);
				ⵠΔᐃ(Δ, Ⲇ * 85, Ⲇ * 75, Ⲇ * 15);
				ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⵠ]);
				ⵠΔᐃ(Δ, Ⲇ * 32, Ⲇ * 67, Ⲇ * 5);
				ⵠᐃ(Δ, Δⵠ[ⵠΔᐃᐃΔ]);
				ⵠΔᐃ(Δ, 82 * Ⲇ, 67 * Ⲇ, Ⲇ * 5);
				ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⵠⵠ]);
				Δ.translate(Ⲇ * -27, -ⵠᐃⲆⵠᐃ * Ⲇ);
				Δ.translate(27 * Ⲇ, 8 * Ⲇ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(52 * Ⲇ, 86 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 54, 78 * Ⲇ, Ⲇ * 65, Ⲇ * 80, Ⲇ * 67, 85 * Ⲇ);
				Δ.bezierCurveTo(69 * Ⲇ, Ⲇ * 89, Ⲇ * 64, Ⲇ * 99, 71 * Ⲇ, Ⲇ * 106);
				Δ.bezierCurveTo(Ⲇ * 75, Ⲇ * 109, 61 * Ⲇ, Ⲇ * 108, 58 * Ⲇ, Ⲇ * 102);
				Δ.bezierCurveTo(53 * Ⲇ, Ⲇ * 97, Ⲇ * 52, Ⲇ * 91, Ⲇ * 52, Ⲇ * 86);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[4])
			} else if (ᐃⲆ == 6) {
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.translate(Ⲇ * 2, 0);
				Δ.moveTo(Ⲇ * 28, Ⲇ * 69);
				Δ.bezierCurveTo(Ⲇ * 26, Ⲇ * 39, Ⲇ * 31, 25 * Ⲇ, Ⲇ * 52, 24 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 86, Ⲇ * 23.5, 86 * Ⲇ, Ⲇ * 23.5, Ⲇ * 120, 23 * Ⲇ);
				Δ.bezierCurveTo(137 * Ⲇ, 23 * Ⲇ, 145 * Ⲇ, 33 * Ⲇ, 144 * Ⲇ, 53 * Ⲇ);
				Δ.bezierCurveTo(144.5 * Ⲇ, 63 * Ⲇ, 144.5 * Ⲇ, Ⲇ * 63, Ⲇ * 145, 73 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 141, 41 * Ⲇ, 106 * Ⲇ, Ⲇ * 41, 98 * Ⲇ, 59 * Ⲇ);
				Δ.bezierCurveTo(92 * Ⲇ, Ⲇ * 69, 94 * Ⲇ, Ⲇ * 98, Ⲇ * 90, 95 * Ⲇ);
				Δ.bezierCurveTo(86 * Ⲇ, Ⲇ * 95, Ⲇ * 86, 95 * Ⲇ, Ⲇ * 82, Ⲇ * 95);
				Δ.bezierCurveTo(Ⲇ * 79, Ⲇ * 94, 87 * Ⲇ, Ⲇ * 33, Ⲇ * 48, Ⲇ * 47);
				Δ.bezierCurveTo(31 * Ⲇ, Ⲇ * 57, 30 * Ⲇ, 65 * Ⲇ, Ⲇ * 28, Ⲇ * 72);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[3]);
				Δ.save();
				Δ.translate(Ⲇ * 87, 64.5 * Ⲇ);
				ᐃΔⵠ(Δ, -56 * Ⲇ, Ⲇ * -41.5, 112 * Ⲇ, 83 * Ⲇ, 18 * Ⲇ);
				Δ.restore();
				ⵠᐃ(Δ, Ⲇᐃᐃⵠᐃ, Δⵠ[2], ⵠΔᐃⲆ * Ⲇ);
				Δ.translate(Ⲇ * 27, ᐃⲆᐃⲆⲆ * Ⲇ);
				ⵠΔᐃ(Δ, Ⲇ * 35, Ⲇ * 75, ⵠΔΔΔΔⵠΔ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃᐃ]);
				ⵠΔᐃ(Δ, 85 * Ⲇ, 75 * Ⲇ, Ⲇ * 15);
				ⵠᐃ(Δ, Δⵠ[ⲆΔⲆⲆ]);
				ⵠΔᐃ(Δ, Ⲇ * 32, Ⲇ * 67, ⵠⲆⲆⲆ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ΔΔⲆΔ]);
				ⵠΔᐃ(Δ, Ⲇ * 82, Ⲇ * 67, Ⲇ * ᐃᐃᐃᐃ);
				ⵠᐃ(Δ, Δⵠ[4]);
				Δ.scale(1.4, 1.4);
				Δ.translate(-43.5 * Ⲇ, -32 * Ⲇ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(86 * Ⲇ, Ⲇ * 105);
				Δ.bezierCurveTo(Ⲇ * 89, Ⲇ * 103, Ⲇ * 90, Ⲇ * 100, Ⲇ * 92, Ⲇ * 97);
				Δ.bezierCurveTo(Ⲇ * 93, 91 * Ⲇ, 85 * Ⲇ, 90 * Ⲇ, Ⲇ * 81, Ⲇ * 95);
				Δ.bezierCurveTo(80 * Ⲇ, 97 * Ⲇ, Ⲇ * 83, 101 * Ⲇ, 85 * Ⲇ, 105 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[5], Δⵠ[ᐃⲆΔⵠΔ], ᐃΔᐃⲆ * Ⲇ)
			} else if (ΔΔⵠⲆᐃ == ᐃⲆ) {
				Δ.save();
				Δ.translate(86 * Ⲇ, Ⲇ * 64.5);
				ᐃΔⵠ(Δ, Ⲇ * -16, -43.5 * Ⲇ, Ⲇ * 32, 87 * Ⲇ, Ⲇ * ⵠᐃⵠᐃΔ);
				Δ.restore();
				ⵠᐃ(Δ, Δⵠ[ⲆΔⲆⲆ], Δⵠ[4], Ⲇ * ᐃⵠⵠⲆ);
				Δ.translate(0, Ⲇ * ᐃⲆΔⵠⵠ);
				Δ.globalAlpha = .5;
				Δ.save();
				Δ.translate(85.5 * Ⲇ, 47 * Ⲇ);
				ᐃΔⵠ(Δ, -58.5 * Ⲇ, Ⲇ * -ⵠⵠᐃᐃⲆ, Ⲇ * 117, 16 * Ⲇ, 5 * Ⲇ);
				Δ.restore();
				ⵠᐃ(Δ, Δⵠ[0]);
				Δ.translate(0, Ⲇ * -6);
				Δ.globalAlpha = ⲆⲆᐃⵠ;
				Δ.save();
				Δ.translate(85.5 * Ⲇ, 47 * Ⲇ);
				ᐃΔⵠ(Δ, -58.5 * Ⲇ, Ⲇ * -ΔᐃⵠΔⵠ, 117 * Ⲇ, Ⲇ * ⲆⵠΔⵠⲆΔΔ, Ⲇ * ΔΔⵠΔⵠ);
				Δ.restore();
				ⵠᐃ(Δ, Δⵠ[ⲆΔⲆⲆ], Δⵠ[ᐃΔⵠᐃⲆ], 4 * Ⲇ);
				Δ.translate(0, ⲆⵠⵠΔᐃ * Ⲇ);
				Δ.globalAlpha = .5;
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 84, 44 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 85, 26 * Ⲇ, 96 * Ⲇ, Ⲇ * 23, 103 * Ⲇ, 30 * Ⲇ);
				Δ.bezierCurveTo(110 * Ⲇ, 36 * Ⲇ, 110 * Ⲇ, Ⲇ * 47, 92 * Ⲇ, 50 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(87 * Ⲇ, Ⲇ * 44);
				Δ.bezierCurveTo(108 * Ⲇ, Ⲇ * 47, Ⲇ * 109, Ⲇ * 54, 102 * Ⲇ, 63 * Ⲇ);
				Δ.bezierCurveTo(92 * Ⲇ, 77 * Ⲇ, Ⲇ * 80, Ⲇ * 61, Ⲇ * 84, Ⲇ * 49);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃ]);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 84, Ⲇ * 43);
				Δ.bezierCurveTo(86 * Ⲇ, Ⲇ * 24, 72 * Ⲇ, 23 * Ⲇ, 68 * Ⲇ, 31 * Ⲇ);
				Δ.bezierCurveTo(56 * Ⲇ, 42 * Ⲇ, Ⲇ * 70, 49 * Ⲇ, 81 * Ⲇ, 47 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[0]);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(78 * Ⲇ, 45 * Ⲇ);
				Δ.bezierCurveTo(61 * Ⲇ, 49 * Ⲇ, 60 * Ⲇ, 58 * Ⲇ, Ⲇ * 68, 64 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 78, Ⲇ * 75, Ⲇ * 84, 65 * Ⲇ, 89 * Ⲇ, Ⲇ * 54);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[0]);
				Δ.translate(0, -ⵠΔⵠᐃⲆ * Ⲇ);
				Δ.globalAlpha = ⲆⵠΔΔ;
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(84 * Ⲇ, Ⲇ * 44);
				Δ.bezierCurveTo(85 * Ⲇ, 26 * Ⲇ, 96 * Ⲇ, 23 * Ⲇ, 103 * Ⲇ, 30 * Ⲇ);
				Δ.bezierCurveTo(110 * Ⲇ, 36 * Ⲇ, 110 * Ⲇ, Ⲇ * 47, Ⲇ * 92, 50 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], ᐃᐃᐃᐃΔ * Ⲇ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 87, Ⲇ * 44);
				Δ.bezierCurveTo(Ⲇ * 108, 47 * Ⲇ, 109 * Ⲇ, 54 * Ⲇ, 102 * Ⲇ, 63 * Ⲇ);
				Δ.bezierCurveTo(92 * Ⲇ, 77 * Ⲇ, Ⲇ * 80, Ⲇ * 61, Ⲇ * 84, Ⲇ * 49);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[ᐃΔΔΔ], Δⵠ[ᐃᐃΔⵠⲆ], Ⲇ * ΔⲆΔⲆ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 84, 43 * Ⲇ);
				Δ.bezierCurveTo(86 * Ⲇ, Ⲇ * 24, Ⲇ * 72, 23 * Ⲇ, 68 * Ⲇ, Ⲇ * 31);
				Δ.bezierCurveTo(Ⲇ * 56, 42 * Ⲇ, Ⲇ * 70, Ⲇ * 49, 81 * Ⲇ, 47 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[ᐃΔΔΔ], Δⵠ[ΔΔⲆΔ], 4 * Ⲇ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(78 * Ⲇ, Ⲇ * 45);
				Δ.bezierCurveTo(61 * Ⲇ, Ⲇ * 49, 60 * Ⲇ, 58 * Ⲇ, Ⲇ * 68, Ⲇ * 64);
				Δ.bezierCurveTo(Ⲇ * 78, 75 * Ⲇ, 84 * Ⲇ, 65 * Ⲇ, 89 * Ⲇ, Ⲇ * 54);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], ⵠⲆᐃⲆ * Ⲇ);
				Δ.translate(0, Ⲇ * 6);
				Δ.globalAlpha = .5;
				Δ.save();
				Δ.translate(85 * Ⲇ, Ⲇ * 47.5);
				Δ.rotate(0);
				ᐃΔⵠ(Δ, Ⲇ * -ᐃᐃⵠΔⵠ, -10.5 * Ⲇ, 20 * Ⲇ, 21 * Ⲇ, ⲆⵠⲆΔᐃ * Ⲇ);
				Δ.restore();
				ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ]);
				Δ.translate(0, -6 * Ⲇ);
				Δ.globalAlpha = ΔⲆⵠⲆ;
				Δ.save();
				Δ.translate(85 * Ⲇ, Ⲇ * 47.5);
				Δ.rotate(ⵠΔΔⲆ);
				ᐃΔⵠ(Δ, -10 * Ⲇ, -10.5 * Ⲇ, Ⲇ * ΔⲆⵠⵠᐃ, Ⲇ * 21, Ⲇ * ΔΔⵠⵠ);
				Δ.restore();
				ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠⲆᐃⲆ], Ⲇ * ΔⲆⲆⲆ);
				Δ.translate(27 * Ⲇ, 10 * Ⲇ);
				ⵠΔᐃ(Δ, 35 * Ⲇ, 75 * Ⲇ, Ⲇ * ⵠⵠΔΔΔ);
				ⵠᐃ(Δ, Δⵠ[5]);
				ⵠΔᐃ(Δ, Ⲇ * 85, 75 * Ⲇ, 15 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[5]);
				ⵠΔᐃ(Δ, 32 * Ⲇ, Ⲇ * 67, ⲆⲆⲆᐃⵠ * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[6]);
				ⵠΔᐃ(Δ, Ⲇ * 82, Ⲇ * 67, Ⲇ * ⲆⲆⲆᐃⵠ);
				ⵠᐃ(Δ, Δⵠ[6])
			} else if (5 == ᐃⲆ) {
				ᐃⵠ.width = 211 * Ⲇ;
				ᐃⵠ.height = Ⲇ * 152;
				Δ.globalAlpha = .5;
				Δ.translate(0, ⲆΔⵠΔΔ * Ⲇ);
				Δ.save();
				Δ.translate(Ⲇ * 105.5, 76.5 * Ⲇ);
				ᐃΔⵠ(Δ, Ⲇ * -56, Ⲇ * -41.5, 112 * Ⲇ, 83 * Ⲇ, 18 * Ⲇ);
				Δ.restore();
				ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
				Δ.globalAlpha = ⲆⵠΔΔ;
				Δ.translate(0, Ⲇ * -ⲆΔⵠΔΔ);
				Δ.save();
				Δ.translate(Ⲇ * 105.5, 76.5 * Ⲇ);
				ᐃΔⵠ(Δ, Ⲇ * -56, -41.5 * Ⲇ, 112 * Ⲇ, 83 * Ⲇ, ⵠⲆⵠΔᐃᐃⵠ * Ⲇ);
				Δ.restore();
				ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[2], Ⲇ * ΔΔᐃⵠΔ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 68, Ⲇ * 39);
				Δ.bezierCurveTo(48 * Ⲇ, 37 * Ⲇ, Ⲇ * 43, Ⲇ * 27, 40 * Ⲇ, 12 * Ⲇ);
				Δ.bezierCurveTo(31 * Ⲇ, Ⲇ * 25, 20 * Ⲇ, 17 * Ⲇ, 11 * Ⲇ, 9 * Ⲇ);
				Δ.bezierCurveTo(9 * Ⲇ, 41 * Ⲇ, Ⲇ * 40, Ⲇ * 44, Ⲇ * 62, 45 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[3], Δⵠ[2], 4 * Ⲇ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 143, Ⲇ * 38);
				Δ.bezierCurveTo(161 * Ⲇ, 40 * Ⲇ, 169 * Ⲇ, 24 * Ⲇ, Ⲇ * 171, ⵠⵠⲆΔᐃΔᐃ * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 181, Ⲇ * 23, 188 * Ⲇ, Ⲇ * ⵠⲆΔⲆⲆ, Ⲇ * 199, 9 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 204, Ⲇ * 35, 182 * Ⲇ, Ⲇ * 44, Ⲇ * 152, 45 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⲆ], Δⵠ[ᐃⲆⵠᐃ], 4 * Ⲇ);
				Δ.save();
				Δ.translate(Ⲇ * 105.5, Ⲇ * 76.5);
				ᐃΔⵠ(Δ, -55 * Ⲇ, Ⲇ * -40.5, Ⲇ * 106, Ⲇ * 77, Ⲇ * 18);
				Δ.restore();
				ⵠᐃ(Δ, Δⵠ[1]);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(149 * Ⲇ, 45 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 155, 37 * Ⲇ, Ⲇ * 158, 37 * Ⲇ, 161 * Ⲇ, Ⲇ * 52);
				Δ.bezierCurveTo(Ⲇ * 164, 60 * Ⲇ, Ⲇ * 161, Ⲇ * 65, 152 * Ⲇ, Ⲇ * 58);
				Δ.bezierCurveTo(145 * Ⲇ, Ⲇ * 51, 143 * Ⲇ, 49 * Ⲇ, Ⲇ * 149, Ⲇ * 45);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[ΔᐃᐃΔ], Δⵠ[2], Ⲇ * 4);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 60, Ⲇ * 43);
				Δ.bezierCurveTo(67 * Ⲇ, Ⲇ * 47, 67 * Ⲇ, Ⲇ * 51, 57 * Ⲇ, Ⲇ * 59);
				Δ.bezierCurveTo(50 * Ⲇ, Ⲇ * 64, 47 * Ⲇ, 64 * Ⲇ, 49 * Ⲇ, 55 * Ⲇ);
				Δ.bezierCurveTo(Ⲇ * 49, Ⲇ * 42, 51 * Ⲇ, 38 * Ⲇ, Ⲇ * 59, 42 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[ᐃΔΔΔⲆ], Δⵠ[2], Ⲇ * 4);
				ⵠΔᐃ(Δ, Ⲇ * 105, Ⲇ * 107, 10.63014581273465 * Ⲇ);
				ⵠᐃ(Δ, Δⵠ[ᐃᐃᐃⲆⲆ], Δⵠ[6], Ⲇ * 4);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 105, 100 * Ⲇ);
				Δ.bezierCurveTo(111 * Ⲇ, Ⲇ * 101, 113 * Ⲇ, 104 * Ⲇ, Ⲇ * 112, 109 * Ⲇ);
				Δ.closePath();
				ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃⲆ]);
				Δ.translate(44.5 * Ⲇ, Ⲇ * 22);
				ⵠΔᐃ(Δ, Ⲇ * 35, Ⲇ * 75, Ⲇ * ⲆⵠΔΔᐃ);
				ⵠᐃ(Δ, Δⵠ[ᐃᐃΔⲆⲆ]);
				ⵠΔᐃ(Δ, Ⲇ * 85, Ⲇ * 75, Ⲇ * ⵠⵠᐃⲆΔⲆΔ);
				ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃᐃᐃ]);
				ⵠΔᐃ(Δ, 32 * Ⲇ, 67 * Ⲇ, Ⲇ * ᐃᐃⲆⵠᐃ);
				ⵠᐃ(Δ, Δⵠ[9]);
				ⵠΔᐃ(Δ, Ⲇ * 82, Ⲇ * 67, Ⲇ * 5);
				ⵠᐃ(Δ, Δⵠ[9])
			} else ᐃⵠⲆΔⵠΔⵠ == ᐃⲆ && (Δ.save(), Δ.translate(110 * Ⲇ, 22 * Ⲇ), ᐃΔⵠ(Δ, -16 * Ⲇ, Ⲇ * -ⵠΔⲆᐃ, Ⲇ * 32, ⲆΔⲆᐃⵠ * Ⲇ, Ⲇ * 10), Δ.restore(), ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[2], Ⲇ * 3), Δ.save(), Δ.translate(109.5 * Ⲇ, ⵠΔⲆᐃⵠ * Ⲇ), ᐃΔⵠ(Δ, -18.5 * Ⲇ, Ⲇ * -3, 37 * Ⲇ, Ⲇ * ⵠⵠⲆᐃⲆ, ΔⵠᐃⲆΔ * Ⲇ), Δ.restore(), ⵠᐃ(Δ, Δⵠ[ᐃΔᐃΔ], Δⵠ[4], ⲆΔⲆᐃ * Ⲇ), Δ.globalAlpha = .5, Δ.translate(ⵠⵠⲆΔ, Ⲇ * 5), Δ.save(), Δ.translate(Ⲇ * 86, 40 * Ⲇ), ᐃΔⵠ(Δ, -58 * Ⲇ, -ᐃⲆᐃᐃᐃ * Ⲇ, Ⲇ * 116, ΔⲆᐃⲆᐃⲆⲆ * Ⲇ, ΔΔΔᐃΔ * Ⲇ), Δ.restore(), ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ]), Δ.globalAlpha = ⲆⲆⵠ, Δ.translate(Ⲇⵠⵠᐃ, Ⲇ * -5), Δ.save(), Δ.translate(86 * Ⲇ, 40 * Ⲇ), ᐃΔⵠ(Δ, -58 * Ⲇ, -9 * Ⲇ, 116 * Ⲇ, 18 * Ⲇ, Ⲇ * 6), Δ.restore(), ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔᐃᐃΔ], 3 * Ⲇ), Δ.globalAlpha = .75, Δ.translate(ⲆⲆᐃⲆ, Ⲇ * ⲆΔⲆᐃᐃ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(109 * Ⲇ, 47 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 110.5, Ⲇ * 45, Ⲇ * 110.5, Ⲇ * 45, 112 * Ⲇ, 43 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 114, 44 * Ⲇ, 114 * Ⲇ, 44 * Ⲇ, 116 * Ⲇ, 45 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 117.5, 43 * Ⲇ, Ⲇ * 117.5, Ⲇ * 43, Ⲇ * 119, 41 * Ⲇ), Δ.bezierCurveTo(121 * Ⲇ, Ⲇ * 41.5, 121 * Ⲇ, 41.5 * Ⲇ, 123 * Ⲇ, 42 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ]), Δ.beginPath(), Δ.translate(ᐃⲆΔᐃ, Ⲇ * 5), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 54, Ⲇ * 35), Δ.bezierCurveTo(61.5 * Ⲇ, Ⲇ * 35, Ⲇ * 61.5, 35 * Ⲇ, 69 * Ⲇ, Ⲇ * 35), Δ.bezierCurveTo(70 * Ⲇ, Ⲇ * 48, 70 * Ⲇ, 60 * Ⲇ, 60 * Ⲇ, Ⲇ * 59), Δ.bezierCurveTo(45 * Ⲇ, Ⲇ * 61, 44 * Ⲇ, Ⲇ * 60, Ⲇ * 43, 53 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 42, Ⲇ * 49, 55 * Ⲇ, Ⲇ * 51, Ⲇ * 55, Ⲇ * 44), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ]), Δ.globalAlpha = ⲆⵠⲆ, Δ.translate(ΔᐃⲆⲆ, Ⲇ * -5), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 105, 38 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 110, Ⲇ * 48, Ⲇ * 110, 50 * Ⲇ, 105 * Ⲇ, Ⲇ * 53), Δ.bezierCurveTo(98 * Ⲇ, 62 * Ⲇ, 107 * Ⲇ, Ⲇ * 66, 117 * Ⲇ, Ⲇ * 60), Δ.bezierCurveTo(128 * Ⲇ, Ⲇ * 56, Ⲇ * 130, 56 * Ⲇ, 126 * Ⲇ, Ⲇ * 49), Δ.bezierCurveTo(Ⲇ * 123.5, 41.5 * Ⲇ, Ⲇ * 123.5, Ⲇ * 41.5, 121 * Ⲇ, 34 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[7], Δⵠ[ΔᐃⵠΔⵠ], 3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 109, 47 * Ⲇ), Δ.bezierCurveTo(110.5 * Ⲇ, 45 * Ⲇ, Ⲇ * 110.5, Ⲇ * 45, Ⲇ * 112, 43 * Ⲇ), Δ.bezierCurveTo(114 * Ⲇ, 44 * Ⲇ, Ⲇ * 114, 44 * Ⲇ, 116 * Ⲇ, Ⲇ * 45), Δ.bezierCurveTo(117.5 * Ⲇ, 43 * Ⲇ, Ⲇ * 117.5, 43 * Ⲇ, 119 * Ⲇ, Ⲇ * 41), Δ.bezierCurveTo(Ⲇ * 121, 41.5 * Ⲇ, 121 * Ⲇ, Ⲇ * 41.5, Ⲇ * 123, 42 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, ⵠⵠᐃⲆᐃ, Δⵠ[6], Ⲇ * ⵠⵠⲆᐃ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 84, 33 * Ⲇ), Δ.bezierCurveTo(88.5 * Ⲇ, Ⲇ * 34.5, 88.5 * Ⲇ, Ⲇ * 34.5, 93 * Ⲇ, Ⲇ * 36), Δ.bezierCurveTo(Ⲇ * 87, 43 * Ⲇ, 88 * Ⲇ, 45 * Ⲇ, Ⲇ * 91, Ⲇ * 46), Δ.bezierCurveTo(Ⲇ * 98, Ⲇ * 56, 91 * Ⲇ, Ⲇ * 57, 85 * Ⲇ, Ⲇ * 53), Δ.bezierCurveTo(Ⲇ * 80, 50 * Ⲇ, 78 * Ⲇ, Ⲇ * 49, Ⲇ * 82, 43 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 83.5, 38 * Ⲇ, Ⲇ * 83.5, Ⲇ * 38, 85 * Ⲇ, 33 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[5], Δⵠ[6], 3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 54, Ⲇ * 35), Δ.bezierCurveTo(61.5 * Ⲇ, Ⲇ * 35, 61.5 * Ⲇ, Ⲇ * 35, 69 * Ⲇ, Ⲇ * 35), Δ.bezierCurveTo(Ⲇ * 70, 48 * Ⲇ, Ⲇ * 70, 60 * Ⲇ, Ⲇ * 60, 59 * Ⲇ), Δ.bezierCurveTo(45 * Ⲇ, 61 * Ⲇ, 44 * Ⲇ, Ⲇ * 60, Ⲇ * 43, 53 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 42, Ⲇ * 49, Ⲇ * 55, Ⲇ * 51, 55 * Ⲇ, 44 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[7], Δⵠ[8], 3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 48, 49 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 50, Ⲇ * 50, 50 * Ⲇ, 50 * Ⲇ, 52 * Ⲇ, 51 * Ⲇ), Δ.bezierCurveTo(50.5 * Ⲇ, 52 * Ⲇ, 50.5 * Ⲇ, 52 * Ⲇ, Ⲇ * 49, 53 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 51, Ⲇ * 54.5, 51 * Ⲇ, Ⲇ * 54.5, 53 * Ⲇ, Ⲇ * 56), Δ.bezierCurveTo(Ⲇ * 51, Ⲇ * 57.5, Ⲇ * 51, 57.5 * Ⲇ, Ⲇ * 49, Ⲇ * 59), Δ.closePath(), ⵠᐃ(Δ, ΔⵠᐃΔᐃ, Δⵠ[ΔⵠΔᐃⵠ], 3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 54, 39 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 61.5, 39.5 * Ⲇ, 61.5 * Ⲇ, Ⲇ * 39.5, 69 * Ⲇ, Ⲇ * 40), Δ.closePath(), ⵠᐃ(Δ, undefined, Δⵠ[ⵠⵠⲆⲆⵠ], 3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 55, 43 * Ⲇ), Δ.bezierCurveTo(61.5 * Ⲇ, 43.5 * Ⲇ, 61.5 * Ⲇ, Ⲇ * 43.5, Ⲇ * 68, 44 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, undefined, Δⵠ[6], Ⲇ * 3), Δ.translate(27 * Ⲇ, 5 * Ⲇ), ⵠΔᐃ(Δ, Ⲇ * 35, 75 * Ⲇ, 15 * Ⲇ), ⵠᐃ(Δ, Δⵠ[9]), ⵠΔᐃ(Δ, 85 * Ⲇ, Ⲇ * 75, ᐃⵠᐃᐃΔ * Ⲇ), ⵠᐃ(Δ, Δⵠ[ⲆΔΔΔΔ]), ⵠΔᐃ(Δ, 32 * Ⲇ, 67 * Ⲇ, Ⲇ * Δᐃᐃⵠ), ⵠᐃ(Δ, Δⵠ[10]), ⵠΔᐃ(Δ, 82 * Ⲇ, 67 * Ⲇ, 5 * Ⲇ), ⵠᐃ(Δ, Δⵠ[ΔΔⵠⲆⵠ]))
		}
		return ᐃⵠ
	}

	function ⲆΔᐃⵠⵠⲆⲆᐃᐃ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 120;
		ᐃⵠ.height = Ⲇ * 110;
		if (ᐃⲆ == Δⵠᐃ) {
			ⵠΔᐃ(Δ, 35 * Ⲇ, 75 * Ⲇ, 19.72308292331602 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆⲆᐃⲆ], Ⲇ * 4);
			Δ.save();
			Δ.translate(ⲆⲆⲆⲆᐃⲆΔ * Ⲇ, 77 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -ᐃᐃΔⵠⲆ, -4 * Ⲇ, Ⲇ * 8, 8 * Ⲇ, Ⲇ * 10);
			Δ.restore();
			ⵠᐃ(Δ, undefined, Δⵠ[ⲆⲆᐃ], ⵠΔᐃⲆ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * ⵠⵠᐃⲆⲆᐃᐃ, 81 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 13, Ⲇ * 105, 9 * Ⲇ, Ⲇ * 106, Ⲇ * 8, 91 * Ⲇ);
			ⵠᐃ(Δ, ⵠᐃⲆⵠⲆ, Δⵠ[ⲆⲆᐃⲆ], Ⲇ * 4)
		} else if (ⵠᐃᐃⲆ == ᐃⲆ) {
			ⵠΔᐃ(Δ, Ⲇ * 85, 75 * Ⲇ, 16 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], Ⲇ * 4);
			Δ.scale(-1.7 * Ⲇ, Ⲇ * 1.7);
			Δ.translate(Ⲇ * -120, Δⵠⵠ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 20, 95 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 56.5, 54 * Ⲇ, 56.5 * Ⲇ, Ⲇ * 54, Ⲇ * 93, Ⲇ * 13);
			Δ.bezierCurveTo(89 * Ⲇ, Ⲇ * 13, Ⲇ * 89, Ⲇ * ⲆⵠⲆⵠⵠⲆⲆ, Ⲇ * 85, 13 * Ⲇ);
			Δ.bezierCurveTo(49.5 * Ⲇ, 53 * Ⲇ, 49.5 * Ⲇ, Ⲇ * 53, 14 * Ⲇ, Ⲇ * 93);
			Δ.bezierCurveTo(ΔᐃΔⵠᐃ * Ⲇ, 94 * Ⲇ, Ⲇ * 15, 94 * Ⲇ, Ⲇ * 19, 95 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠⵠᐃ], ΔᐃᐃΔ * Ⲇ)
		} else if (3 == ᐃⲆ) {
			Δ.translate(-52 * Ⲇ, ⵠⵠⵠ);
			Δ.save();
			Δ.translate(84.5 * Ⲇ, 36.5 * Ⲇ);
			Δ.rotate(-.96);
			ᐃΔⵠ(Δ, Ⲇ * -5.5, Ⲇ * -15.5, ⵠᐃⵠⵠᐃᐃΔ * Ⲇ, 31 * Ⲇ, ΔⵠⲆⵠᐃ * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], 4 * Ⲇ);
			Δ.save();
			Δ.translate(84 * Ⲇ, Ⲇ * 36);
			Δ.rotate(.64);
			ᐃΔⵠ(Δ, -5 * Ⲇ, Ⲇ * -16, 10 * Ⲇ, 32 * Ⲇ, 4 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ΔᐃⵠⲆ], 4 * Ⲇ);
			Δ.save();
			Δ.translate(83.5 * Ⲇ, 36.5 * Ⲇ);
			Δ.rotate(.68);
			ᐃΔⵠ(Δ, Ⲇ * -2.5, Ⲇ * -6.5, 5 * Ⲇ, Ⲇ * ᐃⲆΔΔⲆΔΔ, ᐃᐃΔⵠⲆ * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⲆ])
		} else if (4 == ᐃⲆ) {
			ⵠΔᐃ(Δ, 35 * Ⲇ, 85 * Ⲇ, 17 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[ⲆⲆᐃⲆ], Ⲇ * ⵠⵠⲆⲆ);
			ⵠΔᐃ(Δ, Ⲇ * 85, Ⲇ * 85, Ⲇ * 17);
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠΔⵠᐃ], Ⲇ * ⵠᐃⵠⲆ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(53 * Ⲇ, Ⲇ * 86);
			Δ.bezierCurveTo(59 * Ⲇ, 83 * Ⲇ, Ⲇ * 63, Ⲇ * 83, 67 * Ⲇ, 86 * Ⲇ);
			ⵠᐃ(Δ, ΔⲆⲆΔⲆ, Δⵠ[0], ᐃΔΔΔⲆ * Ⲇ)
		} else if (5 == ᐃⲆ) {
			Δ.scale(1.2, 1.2);
			Δ.translate(-27 * Ⲇ, Ⲇ * -8);
			Δ.scale(1.2, 1.2);
			Δ.translate(-ⵠΔⲆⲆΔ * Ⲇ, ⵠⵠⲆΔ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(97 * Ⲇ, 23 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 105, Ⲇ * 24, 107 * Ⲇ, 37 * Ⲇ, 97 * Ⲇ, Ⲇ * 39);
			Δ.bezierCurveTo(85 * Ⲇ, Ⲇ * 40, Ⲇ * 84, Ⲇ * 22, 97 * Ⲇ, 23 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, ΔΔᐃⲆᐃ, Δⵠ[0], Ⲇ * 3);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 96, Ⲇ * 24);
			Δ.bezierCurveTo(Ⲇ * 96, 30.5 * Ⲇ, Ⲇ * 96, 30.5 * Ⲇ, Ⲇ * 96, 37 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, ⵠⵠᐃⵠΔ, Δⵠ[0], 3 * Ⲇ);
			Δ.translate(0, Ⲇ * -ⵠΔⵠⲆ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 88, Ⲇ * 37);
			Δ.bezierCurveTo(93 * Ⲇ, Ⲇ * 33, 91.5 * Ⲇ, Ⲇ * 34.5, Ⲇ * 95, Ⲇ * 32);
			Δ.bezierCurveTo(98.5 * Ⲇ, 34 * Ⲇ, 98.5 * Ⲇ, Ⲇ * 34, Ⲇ * 102, 36 * Ⲇ);
			ⵠᐃ(Δ, ⵠᐃⲆⵠⲆ, Δⵠ[ⵠⵠᐃ], Ⲇ * 3)
		} else if (6 == ᐃⲆ) {
			ⵠΔᐃ(Δ, Ⲇ * 13, Ⲇ * 79, 5 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ]);
			ⵠΔᐃ(Δ, 106 * Ⲇ, Ⲇ * 79, Ⲇ * ΔΔⵠΔⵠ);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ])
		} else if (ᐃⲆ == ⵠⲆᐃΔⵠ) {
			Δ.translate(Ⲇ * ⵠΔΔⲆ, 5 * Ⲇ);
			Δ.globalAlpha = .5;
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(27 * Ⲇ, Ⲇ * 14.399993896484375);
			Δ.bezierCurveTo(Ⲇ * 29, 4.399993896484375 * Ⲇ, 44 * Ⲇ, 16.399993896484375 * Ⲇ, 37 * Ⲇ, 21.399993896484375 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 47, Ⲇ * 17.399993896484375, Ⲇ * 45, Ⲇ * 36.399993896484375, Ⲇ * 37, 32.399993896484375 * Ⲇ);
			Δ.bezierCurveTo(44 * Ⲇ, 40.399993896484375 * Ⲇ, 28 * Ⲇ, 47.399993896484375 * Ⲇ, 26 * Ⲇ, 37.399993896484375 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 22, 46.399993896484375 * Ⲇ, ⲆⵠⲆⲆⵠ * Ⲇ, 37.399993896484375 * Ⲇ, Ⲇ * 16, 30.399993896484375 * Ⲇ);
			Δ.bezierCurveTo(6 * Ⲇ, Ⲇ * 34.399993896484375, ⲆⵠⲆⲆⵠ * Ⲇ, 15.399993896484375 * Ⲇ, ⲆⵠⲆⵠⵠⵠⲆ * Ⲇ, Ⲇ * 19.399993896484375);
			Δ.bezierCurveTo(ᐃⲆᐃⲆⲆ * Ⲇ, Ⲇ * 12.399993896484375, 26 * Ⲇ, Ⲇ * 7.399993896484375, 26 * Ⲇ, Ⲇ * 14.399993896484375);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[3]);
			Δ.globalAlpha = 1;
			Δ.translate(0 * Ⲇ, -5 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(27 * Ⲇ, 14.399993896484375 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 29, Ⲇ * 4.399993896484375, 44 * Ⲇ, Ⲇ * 16.399993896484375, 37 * Ⲇ, Ⲇ * 21.399993896484375);
			Δ.bezierCurveTo(Ⲇ * 47, Ⲇ * 17.399993896484375, Ⲇ * 45, Ⲇ * 36.399993896484375, 37 * Ⲇ, 32.399993896484375 * Ⲇ);
			Δ.bezierCurveTo(44 * Ⲇ, Ⲇ * 40.399993896484375, Ⲇ * 28, Ⲇ * 47.399993896484375, Ⲇ * 26, 37.399993896484375 * Ⲇ);
			Δ.bezierCurveTo(22 * Ⲇ, 46.399993896484375 * Ⲇ, Ⲇ * 9, Ⲇ * 37.399993896484375, 16 * Ⲇ, 30.399993896484375 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 6, Ⲇ * 34.399993896484375, Ⲇ * 9, Ⲇ * 15.399993896484375, ΔΔⵠΔᐃᐃᐃ * Ⲇ, Ⲇ * 19.399993896484375);
			Δ.bezierCurveTo(Ⲇ * ⲆΔᐃⵠΔ, Ⲇ * 12.399993896484375, 26 * Ⲇ, Ⲇ * 7.399993896484375, 26 * Ⲇ, 14.399993896484375 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃᐃⵠⵠ], Ⲇ * ⵠᐃᐃⲆ);
			ⵠΔᐃ(Δ, 27 * Ⲇ, 26.800003051757812 * Ⲇ, 5 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[0])
		} else if (ⵠΔΔᐃⲆ == ᐃⲆ) {
			Δ.translate(-32 * Ⲇ, -ⵠⲆⵠⲆᐃ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 123, 46 * Ⲇ);
			Δ.bezierCurveTo(132 * Ⲇ, Ⲇ * 46, Ⲇ * 135, Ⲇ * 39, 134 * Ⲇ, Ⲇ * 33);
			Δ.bezierCurveTo(145 * Ⲇ, 43 * Ⲇ, 142 * Ⲇ, 65 * Ⲇ, 127 * Ⲇ, 66 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 118, 61 * Ⲇ, Ⲇ * 119, Ⲇ * 51, 123 * Ⲇ, 46 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], Ⲇ * ⵠⵠⵠᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(49 * Ⲇ, Ⲇ * 32);
			Δ.bezierCurveTo(Ⲇ * 49, Ⲇ * 44, Ⲇ * 56, Ⲇ * 44, Ⲇ * 61, Ⲇ * 46);
			Δ.bezierCurveTo(67 * Ⲇ, 52 * Ⲇ, 65 * Ⲇ, 65 * Ⲇ, 55 * Ⲇ, 66 * Ⲇ);
			Δ.bezierCurveTo(37 * Ⲇ, Ⲇ * 60, Ⲇ * 42, Ⲇ * 38, Ⲇ * 49, Ⲇ * 32);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0], Δⵠ[Δⵠᐃ], 4 * Ⲇ)
		}
		return ᐃⵠ
	}
	const ΔⵠᐃΔᐃᐃⵠⵠᐃ = ⲆᐃⲆᐃⵠΔᐃ;

	function ᐃⲆⵠΔᐃᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 264 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 246;
		Δ.translate(Ⲇⵠᐃ, Ⲇ * 10);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(75 * Ⲇ, Ⲇ * 54);
		Δ.bezierCurveTo(79 * Ⲇ, 21 * Ⲇ, 131 * Ⲇ, Ⲇ * 13, 153 * Ⲇ, 36 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 204, Ⲇ * 27, Ⲇ * 221, Ⲇ * 52, Ⲇ * 216, 83 * Ⲇ);
		Δ.bezierCurveTo(241 * Ⲇ, Ⲇ * 103, Ⲇ * 232, 138 * Ⲇ, 214 * Ⲇ, 147 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 223, Ⲇ * 184, 201 * Ⲇ, Ⲇ * 200, 175 * Ⲇ, Ⲇ * 199);
		Δ.bezierCurveTo(156 * Ⲇ, 218 * Ⲇ, 135 * Ⲇ, Ⲇ * 222, Ⲇ * 114, Ⲇ * 203);
		Δ.bezierCurveTo(Ⲇ * 62, 213 * Ⲇ, 66 * Ⲇ, Ⲇ * 189, 59 * Ⲇ, 170 * Ⲇ);
		Δ.bezierCurveTo(27 * Ⲇ, 164 * Ⲇ, Ⲇ * 31, Ⲇ * 134, Ⲇ * 38, 123 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ᐃⵠᐃΔⲆⵠⲆ, 80 * Ⲇ, 51 * Ⲇ, Ⲇ * 52, Ⲇ * 75, Ⲇ * 54);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(ᐃⲆΔ, Ⲇ * -ᐃᐃᐃⲆⵠ);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 75, 54 * Ⲇ);
		Δ.bezierCurveTo(79 * Ⲇ, 21 * Ⲇ, Ⲇ * 131, ΔⲆΔⵠᐃ * Ⲇ, 153 * Ⲇ, Ⲇ * 36);
		Δ.bezierCurveTo(204 * Ⲇ, 27 * Ⲇ, 221 * Ⲇ, Ⲇ * 52, 216 * Ⲇ, 83 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 241, Ⲇ * 103, 232 * Ⲇ, 138 * Ⲇ, 214 * Ⲇ, 147 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 223, 184 * Ⲇ, 201 * Ⲇ, 200 * Ⲇ, Ⲇ * 175, 199 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 156, 218 * Ⲇ, 135 * Ⲇ, 222 * Ⲇ, 114 * Ⲇ, 203 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 62, Ⲇ * 213, Ⲇ * 66, 189 * Ⲇ, Ⲇ * 59, 170 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 27, 164 * Ⲇ, 31 * Ⲇ, Ⲇ * 134, Ⲇ * 38, 123 * Ⲇ);
		Δ.bezierCurveTo(ΔᐃⲆΔⲆ * Ⲇ, 80 * Ⲇ, Ⲇ * 51, Ⲇ * 52, 75 * Ⲇ, 54 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], ⵠΔΔᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(121 * Ⲇ, 102 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 111, Ⲇ * 80, Ⲇ * 110, Ⲇ * 66, Ⲇ * 108, Ⲇ * 51);
		Δ.bezierCurveTo(Ⲇ * 119, 65 * Ⲇ, 129 * Ⲇ, 85 * Ⲇ, 135 * Ⲇ, 99 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 142, Ⲇ * 67, Ⲇ * 146, Ⲇ * 60, 152 * Ⲇ, Ⲇ * 50);
		Δ.bezierCurveTo(154 * Ⲇ, 71 * Ⲇ, 152 * Ⲇ, 85 * Ⲇ, 149 * Ⲇ, 104 * Ⲇ);
		Δ.bezierCurveTo(166 * Ⲇ, Ⲇ * 88, Ⲇ * 175, Ⲇ * 83, 188 * Ⲇ, 78 * Ⲇ);
		Δ.bezierCurveTo(179 * Ⲇ, 91 * Ⲇ, Ⲇ * 170, 103 * Ⲇ, Ⲇ * 160, Ⲇ * 112);
		Δ.bezierCurveTo(Ⲇ * 186, Ⲇ * 107, 191 * Ⲇ, 107 * Ⲇ, 204 * Ⲇ, 108 * Ⲇ);
		Δ.bezierCurveTo(195 * Ⲇ, Ⲇ * 114, Ⲇ * 179, 120 * Ⲇ, 163 * Ⲇ, 123 * Ⲇ);
		Δ.bezierCurveTo(183 * Ⲇ, Ⲇ * 130, Ⲇ * 186, 135 * Ⲇ, Ⲇ * 192, Ⲇ * 140);
		Δ.bezierCurveTo(Ⲇ * 179, 141 * Ⲇ, 164 * Ⲇ, 139 * Ⲇ, Ⲇ * 153, Ⲇ * 135);
		Δ.bezierCurveTo(Ⲇ * 158, 145 * Ⲇ, Ⲇ * 163, 159 * Ⲇ, Ⲇ * 165, Ⲇ * 177);
		Δ.bezierCurveTo(Ⲇ * 154, Ⲇ * 166, Ⲇ * 145, Ⲇ * 153, Ⲇ * 138, Ⲇ * 139);
		Δ.bezierCurveTo(133 * Ⲇ, Ⲇ * 155, Ⲇ * 125, Ⲇ * 170, 117 * Ⲇ, 182 * Ⲇ);
		Δ.bezierCurveTo(116 * Ⲇ, 160 * Ⲇ, Ⲇ * 119, Ⲇ * 151, Ⲇ * 124, 138 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 107, Ⲇ * 150, 95 * Ⲇ, Ⲇ * 156, Ⲇ * 82, Ⲇ * 159);
		Δ.bezierCurveTo(94 * Ⲇ, 140 * Ⲇ, Ⲇ * 101, 136 * Ⲇ, 113 * Ⲇ, Ⲇ * 128);
		Δ.bezierCurveTo(Ⲇ * 78, Ⲇ * 123, Ⲇ * 75, Ⲇ * 121, Ⲇ * 67, Ⲇ * 118);
		Δ.bezierCurveTo(Ⲇ * 85, Ⲇ * 112, Ⲇ * 94, 112 * Ⲇ, Ⲇ * 111, Ⲇ * 113);
		Δ.bezierCurveTo(Ⲇ * 89, 97 * Ⲇ, 85 * Ⲇ, 93 * Ⲇ, Ⲇ * 78, Ⲇ * 82);
		Δ.bezierCurveTo(92 * Ⲇ, Ⲇ * 85, 101 * Ⲇ, Ⲇ * 90, 121 * Ⲇ, 102 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 128, Ⲇ * 103);
		Δ.bezierCurveTo(111 * Ⲇ, 112 * Ⲇ, 117 * Ⲇ, Ⲇ * 136, 140 * Ⲇ, Ⲇ * 130);
		Δ.bezierCurveTo(Ⲇ * 151, 126 * Ⲇ, 156 * Ⲇ, 115 * Ⲇ, Ⲇ * 155, Ⲇ * 107);
		Δ.bezierCurveTo(155 * Ⲇ, Ⲇ * 96, Ⲇ * 154, 94 * Ⲇ, 148 * Ⲇ, 94 * Ⲇ);
		Δ.bezierCurveTo(141 * Ⲇ, Ⲇ * 94, Ⲇ * 146, Ⲇ * 104, Ⲇ * 136, 104 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆⲆⲆΔ], 4 * Ⲇ);
		return ᐃⵠ
	}

	function ⵠⵠᐃΔⲆᐃΔⲆⲆ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 175 * Ⲇ;
		ᐃⵠ.height = 150 * Ⲇ;
		if (ᐃⲆ == Ⲇⵠⵠᐃ) {
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * -88, Ⲇ * -95);
			Δ.save();
			Δ.translate(Ⲇ * 174, Ⲇ * 195.5);
			ᐃΔⵠ(Δ, -82 * Ⲇ, -46.5 * Ⲇ, 164 * Ⲇ, Ⲇ * 93, Ⲇ * 30);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ᐃⲆᐃ]);
			Δ.globalAlpha = ᐃΔΔⲆ;
			Δ.save();
			Δ.translate(Ⲇ * 174, Ⲇ * 170.5);
			ᐃΔⵠ(Δ, Ⲇ * -81, Ⲇ * -59.5, 162 * Ⲇ, 119 * Ⲇ, 28 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔⵠⲆⲆ], 6.5 * Ⲇ);
			ⵠΔᐃ(Δ, Ⲇ * 137, 200 * Ⲇ, 22.090722034374522 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ᐃΔᐃⲆ]);
			ⵠΔᐃ(Δ, 210 * Ⲇ, 200 * Ⲇ, 22.20360331117452 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⲆⵠⵠⲆ]);
			ⵠΔᐃ(Δ, 131 * Ⲇ, 194 * Ⲇ, ⵠⵠᐃⵠᐃ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⵠΔⲆᐃⲆ]);
			ⵠΔᐃ(Δ, Ⲇ * 206, 194 * Ⲇ, Ⲇ * ΔΔⵠⲆᐃ);
			ⵠᐃ(Δ, Δⵠ[4]);
			Δ.translate(0, Ⲇ * 1);
			Δ.save();
			Δ.translate(Ⲇ * 138.5, Ⲇ * 180.5);
			ᐃΔⵠ(Δ, -22.5 * Ⲇ, -11.5 * Ⲇ, Ⲇ * 45, Ⲇ * 23, Ⲇ * 0);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.save();
			Δ.translate(207 * Ⲇ, 177.5 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -31, -9.5 * Ⲇ, Ⲇ * 62, Ⲇ * 19, Ⲇ * Ⲇⵠⵠᐃ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.save();
			Δ.translate(Ⲇ * 171.5, Ⲇ * 220);
			ᐃΔⵠ(Δ, -52.5 * Ⲇ, Ⲇ * -2, 105 * Ⲇ, Ⲇ * 4, 0 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⲆ])
		} else if (ᐃⲆ == ⵠⲆⵠⲆ) {
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * -88, Ⲇ * -95);
			Δ.save();
			Δ.translate(Ⲇ * 174, 195.5 * Ⲇ);
			ᐃΔⵠ(Δ, -82 * Ⲇ, Ⲇ * -46.5, 164 * Ⲇ, Ⲇ * 93, 30 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalAlpha = ⵠⲆⵠⲆ;
			Δ.save();
			Δ.translate(174 * Ⲇ, Ⲇ * 170.5);
			ᐃΔⵠ(Δ, -81 * Ⲇ, Ⲇ * -59.5, Ⲇ * 162, 119 * Ⲇ, Ⲇ * 28);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ᐃΔΔⲆ], Δⵠ[2], 6.5 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(183 * Ⲇ, Ⲇ * 223);
			Δ.bezierCurveTo(193 * Ⲇ, Ⲇ * 187, Ⲇ * 215, Ⲇ * 193, 227 * Ⲇ, 159 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 227, 194 * Ⲇ, 209 * Ⲇ, 187 * Ⲇ, Ⲇ * 183, Ⲇ * 223);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⵠ]);
			ⵠΔᐃ(Δ, Ⲇ * 137, 200 * Ⲇ, 22.090722034374522 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[3]);
			ⵠΔᐃ(Δ, 210 * Ⲇ, Ⲇ * 200, 22.20360331117452 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[3]);
			ⵠΔᐃ(Δ, 131 * Ⲇ, 190 * Ⲇ, 7 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[4]);
			ⵠΔᐃ(Δ, Ⲇ * 204, Ⲇ * 190, Ⲇ * 7);
			ⵠᐃ(Δ, Δⵠ[4]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 120, Ⲇ * 154);
			Δ.bezierCurveTo(Ⲇ * 125, Ⲇ * 146, Ⲇ * 131, 143 * Ⲇ, 147 * Ⲇ, Ⲇ * 137);
			Δ.bezierCurveTo(Ⲇ * 139, Ⲇ * 147, Ⲇ * 129, Ⲇ * 152, Ⲇ * 121, 154 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃⵠ]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 120, Ⲇ * 162);
			Δ.bezierCurveTo(134 * Ⲇ, 153 * Ⲇ, 139 * Ⲇ, Ⲇ * 149, Ⲇ * 150, 144 * Ⲇ);
			Δ.bezierCurveTo(143 * Ⲇ, Ⲇ * 155, Ⲇ * 128, 163 * Ⲇ, Ⲇ * 121, Ⲇ * 161);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[5]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 127, 142 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 129, Ⲇ * 151, Ⲇ * 132, 157 * Ⲇ, Ⲇ * 137, Ⲇ * 162);
			Δ.bezierCurveTo(134 * Ⲇ, 152 * Ⲇ, 132 * Ⲇ, Ⲇ * 146, 127 * Ⲇ, 142 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆⵠᐃ]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 135, 140 * Ⲇ);
			Δ.bezierCurveTo(141 * Ⲇ, 144 * Ⲇ, 143 * Ⲇ, 150 * Ⲇ, Ⲇ * 143, 157 * Ⲇ);
			Δ.bezierCurveTo(138 * Ⲇ, Ⲇ * 150, Ⲇ * 136, 145 * Ⲇ, 135 * Ⲇ, Ⲇ * 140);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[5])
		} else if (2 == ᐃⲆ) {
			Δ.globalAlpha = .5;
			Δ.translate(-88 * Ⲇ, Ⲇ * -95);
			Δ.save();
			Δ.translate(174 * Ⲇ, 195.5 * Ⲇ);
			ᐃΔⵠ(Δ, -82 * Ⲇ, -46.5 * Ⲇ, 164 * Ⲇ, Ⲇ * 93, 30 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(174 * Ⲇ, Ⲇ * 170.5);
			ᐃΔⵠ(Δ, Ⲇ * -81, -59.5 * Ⲇ, 162 * Ⲇ, 119 * Ⲇ, Ⲇ * 28);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ⲆⵠΔΔ], Δⵠ[2], Ⲇ * 6.5);
			ⵠΔᐃ(Δ, 137 * Ⲇ, Ⲇ * 200, 22.090722034374522 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⲆ]);
			ⵠΔᐃ(Δ, 210 * Ⲇ, 200 * Ⲇ, Ⲇ * 22.20360331117452);
			ⵠᐃ(Δ, Δⵠ[3]);
			ⵠΔᐃ(Δ, 130 * Ⲇ, 192 * Ⲇ, 7 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[4]);
			ⵠΔᐃ(Δ, Ⲇ * 203, 192 * Ⲇ, Ⲇ * 7);
			ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(115 * Ⲇ, 224 * Ⲇ);
			Δ.bezierCurveTo(173 * Ⲇ, 223.5 * Ⲇ, 173 * Ⲇ, Ⲇ * 223.5, Ⲇ * 231, 223 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 230, Ⲇ * 222, Ⲇ * 198, Ⲇ * 223, Ⲇ * 186, 209 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 173.5, Ⲇ * 209, Ⲇ * 173.5, 209 * Ⲇ, Ⲇ * 161, 209 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 146, Ⲇ * 224, 114 * Ⲇ, 223 * Ⲇ, 116 * Ⲇ, 224 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 112, Ⲇ * 193);
			Δ.bezierCurveTo(Ⲇ * 154, 182 * Ⲇ, 194 * Ⲇ, 183 * Ⲇ, 234 * Ⲇ, 192 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 217, 154 * Ⲇ, 148 * Ⲇ, 127 * Ⲇ, Ⲇ * 112, Ⲇ * 192);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ])
		} else if (ᐃⲆ == ⵠΔΔᐃ) {
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * -88, Ⲇ * -95);
			Δ.save();
			Δ.translate(Ⲇ * 174, Ⲇ * 195.5);
			ᐃΔⵠ(Δ, Ⲇ * -82, Ⲇ * -46.5, 164 * Ⲇ, 93 * Ⲇ, 30 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(Ⲇ * 174, 170.5 * Ⲇ);
			ᐃΔⵠ(Δ, -81 * Ⲇ, Ⲇ * -59.5, 162 * Ⲇ, 119 * Ⲇ, Ⲇ * 28);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ⲆⵠⲆ], Δⵠ[ᐃᐃⵠⵠ], 6.5 * Ⲇ);
			ⵠΔᐃ(Δ, 137 * Ⲇ, Ⲇ * 200, 22.090722034374522 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[3]);
			ⵠΔᐃ(Δ, Ⲇ * 210, 200 * Ⲇ, 22.20360331117452 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⵠ]);
			ⵠΔᐃ(Δ, 130 * Ⲇ, 192 * Ⲇ, Ⲇ * ⲆΔᐃᐃⲆ);
			ⵠᐃ(Δ, Δⵠ[4]);
			ⵠΔᐃ(Δ, Ⲇ * 203, Ⲇ * 192, Ⲇ * 7);
			ⵠᐃ(Δ, Δⵠ[4]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(120 * Ⲇ, 176 * Ⲇ);
			Δ.bezierCurveTo(175 * Ⲇ, Ⲇ * 193, 147.5 * Ⲇ, Ⲇ * 184.5, Ⲇ * 175, Ⲇ * 193);
			Δ.bezierCurveTo(Ⲇ * 200, 184.5 * Ⲇ, 200 * Ⲇ, 184.5 * Ⲇ, 225 * Ⲇ, Ⲇ * 176);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 226, Ⲇ * 223);
			Δ.bezierCurveTo(173.5 * Ⲇ, Ⲇ * 223, Ⲇ * 173.5, 223 * Ⲇ, Ⲇ * 121, Ⲇ * 223);
			Δ.bezierCurveTo(148 * Ⲇ, 218 * Ⲇ, Ⲇ * 148, Ⲇ * 218, 175 * Ⲇ, Ⲇ * 213);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1])
		} else if (ΔⲆΔⲆ == ᐃⲆ) {
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * -88, Ⲇ * -95);
			Δ.save();
			Δ.translate(Ⲇ * 174, 195.5 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -82, Ⲇ * -46.5, 164 * Ⲇ, Ⲇ * 93, Ⲇ * 30);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(174 * Ⲇ, 170.5 * Ⲇ);
			Δ.rotate(0);
			ᐃΔⵠ(Δ, -81 * Ⲇ, -59.5 * Ⲇ, Ⲇ * 162, Ⲇ * 119, Ⲇ * 28);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃᐃⲆⵠ], 6.5 * Ⲇ);
			ⵠΔᐃ(Δ, 137 * Ⲇ, 200 * Ⲇ, Ⲇ * 22.090722034374522);
			ⵠᐃ(Δ, Δⵠ[3]);
			ⵠΔᐃ(Δ, Ⲇ * 210, 200 * Ⲇ, 22.20360331117452 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[3]);
			ⵠΔᐃ(Δ, Ⲇ * 137, Ⲇ * 203, Ⲇ * ⲆΔⵠΔΔ);
			ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⲆ]);
			ⵠΔᐃ(Δ, 209 * Ⲇ, Ⲇ * 203, Ⲇ * ⵠⲆⲆᐃᐃ);
			ⵠᐃ(Δ, Δⵠ[ΔⲆⲆⲆ]);
			Δ.save();
			Δ.translate(174.5 * Ⲇ, 218 * Ⲇ);
			Δ.rotate(ⵠΔⵠᐃ);
			ᐃΔⵠ(Δ, Ⲇ * -60.5, Ⲇ * -ⲆⲆⲆᐃⵠ, 121 * Ⲇ, 10 * Ⲇ, Ⲇ * 28);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ⲆⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 113, 190 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 144, Ⲇ * 181.5, Ⲇ * 144, Ⲇ * 181.5, Ⲇ * 175, 173 * Ⲇ);
			Δ.bezierCurveTo(205 * Ⲇ, Ⲇ * 182, 205 * Ⲇ, Ⲇ * 182, Ⲇ * 235, Ⲇ * 191);
			Δ.bezierCurveTo(Ⲇ * 242, 141 * Ⲇ, 106 * Ⲇ, Ⲇ * 119, Ⲇ * 112, Ⲇ * 189);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1])
		} else if (ᐃⵠΔⵠ == ᐃⲆ) {
			Δ.globalAlpha = .5;
			Δ.translate(-88 * Ⲇ, -95 * Ⲇ);
			Δ.save();
			Δ.translate(174 * Ⲇ, 195.5 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -82, -46.5 * Ⲇ, 164 * Ⲇ, Ⲇ * 93, 30 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(Ⲇ * 174, Ⲇ * 170.5);
			Δ.rotate(0);
			ᐃΔⵠ(Δ, -81 * Ⲇ, -59.5 * Ⲇ, Ⲇ * 162, 119 * Ⲇ, Ⲇ * 28);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ᐃΔΔⲆ], Δⵠ[2], Ⲇ * 6.5);
			ⵠΔᐃ(Δ, 137 * Ⲇ, 200 * Ⲇ, Ⲇ * 22.090722034374522);
			ⵠᐃ(Δ, Δⵠ[3]);
			ⵠΔᐃ(Δ, 210 * Ⲇ, 200 * Ⲇ, Ⲇ * 22.20360331117452);
			ⵠᐃ(Δ, Δⵠ[ᐃΔᐃⲆ]);
			ⵠΔᐃ(Δ, 140 * Ⲇ, Ⲇ * 196, Ⲇ * 7);
			ⵠᐃ(Δ, Δⵠ[ΔΔⲆΔ]);
			ⵠΔᐃ(Δ, 213 * Ⲇ, Ⲇ * 196, Ⲇ * ⵠΔⵠᐃⲆ);
			ⵠᐃ(Δ, Δⵠ[4]);
			ⵠΔᐃ(Δ, Ⲇ * 131, Ⲇ * 206, 3 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ᐃᐃΔⵠⲆ]);
			ⵠΔᐃ(Δ, Ⲇ * 204, 206 * Ⲇ, Ⲇ * 3);
			ⵠᐃ(Δ, Δⵠ[ΔᐃᐃΔ]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(113 * Ⲇ, Ⲇ * 181);
			Δ.bezierCurveTo(159 * Ⲇ, Ⲇ * 204, Ⲇ * 190, 202 * Ⲇ, 235 * Ⲇ, Ⲇ * 181);
			Δ.bezierCurveTo(Ⲇ * 241, Ⲇ * 137, 109 * Ⲇ, 130 * Ⲇ, 112 * Ⲇ, Ⲇ * 180);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.save();
			Δ.translate(174 * Ⲇ, Ⲇ * 220);
			Δ.rotate(ⲆⲆᐃ);
			ᐃΔⵠ(Δ, Ⲇ * -56, -5 * Ⲇ, Ⲇ * 112, Ⲇ * ⵠΔⲆⲆΔ, Ⲇ * ⵠⲆⵠⲆ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[1])
		} else if (ⵠΔⵠⵠⲆ == ᐃⲆ) {
			Δ.globalAlpha = .5;
			Δ.translate(-88 * Ⲇ, -95 * Ⲇ);
			Δ.save();
			Δ.translate(174 * Ⲇ, 195.5 * Ⲇ);
			ᐃΔⵠ(Δ, -82 * Ⲇ, Ⲇ * -46.5, 164 * Ⲇ, Ⲇ * 93, Ⲇ * 30);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(Ⲇ * 174, Ⲇ * 170.5);
			ᐃΔⵠ(Δ, -81 * Ⲇ, Ⲇ * -59.5, Ⲇ * 162, Ⲇ * 119, Ⲇ * 28);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ], Δⵠ[2], Ⲇ * 6.5);
			ⵠΔᐃ(Δ, 137 * Ⲇ, 200 * Ⲇ, 22.090722034374522 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ᐃᐃΔΔ]);
			ⵠΔᐃ(Δ, 210 * Ⲇ, 200 * Ⲇ, 22.20360331117452 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠΔ]);
			ⵠΔᐃ(Δ, Ⲇ * 133, Ⲇ * 188, Ⲇ * 7);
			ⵠᐃ(Δ, Δⵠ[4]);
			ⵠΔᐃ(Δ, 206 * Ⲇ, 188 * Ⲇ, Ⲇ * 7);
			ⵠᐃ(Δ, Δⵠ[4]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(110 * Ⲇ, 193 * Ⲇ);
			Δ.bezierCurveTo(130 * Ⲇ, 182 * Ⲇ, 142 * Ⲇ, Ⲇ * 183, Ⲇ * 162, 193 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 164, 176.5 * Ⲇ, 164 * Ⲇ, 176.5 * Ⲇ, Ⲇ * 166, 160 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 137, 159 * Ⲇ, 137 * Ⲇ, 159 * Ⲇ, Ⲇ * 108, 158 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(184 * Ⲇ, 192 * Ⲇ);
			Δ.bezierCurveTo(205 * Ⲇ, 183 * Ⲇ, Ⲇ * 216, Ⲇ * 183, 234 * Ⲇ, Ⲇ * 192);
			Δ.bezierCurveTo(Ⲇ * 233.5, Ⲇ * 177, 233.5 * Ⲇ, Ⲇ * 177, 233 * Ⲇ, 162 * Ⲇ);
			Δ.bezierCurveTo(209 * Ⲇ, Ⲇ * 161.5, Ⲇ * 186, 162 * Ⲇ, 185 * Ⲇ, 161 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1])
		} else if (ᐃⲆ == 7) {
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * -88, -95 * Ⲇ);
			Δ.save();
			Δ.translate(174 * Ⲇ, 195.5 * Ⲇ);
			ᐃΔⵠ(Δ, -82 * Ⲇ, Ⲇ * -46.5, Ⲇ * 164, Ⲇ * 93, Ⲇ * 30);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(Ⲇ * 174, 170.5 * Ⲇ);
			ᐃΔⵠ(Δ, -81 * Ⲇ, Ⲇ * -59.5, 162 * Ⲇ, Ⲇ * 119, Ⲇ * 28);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃ], Δⵠ[2], 6.5 * Ⲇ);
			ⵠΔᐃ(Δ, 137 * Ⲇ, Ⲇ * 200, 22.090722034374522 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ᐃΔᐃⲆ]);
			ⵠΔᐃ(Δ, 210 * Ⲇ, Ⲇ * 200, Ⲇ * 22.20360331117452);
			ⵠᐃ(Δ, Δⵠ[3]);
			ⵠΔᐃ(Δ, Ⲇ * 130, Ⲇ * 206, ⲆⵠⵠΔᐃ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ΔⲆΔⲆ]);
			ⵠΔᐃ(Δ, Ⲇ * 203, 206 * Ⲇ, Ⲇ * 7);
			ⵠᐃ(Δ, Δⵠ[4]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(108 * Ⲇ, 191 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 141, Ⲇ * 184, 141 * Ⲇ, 184 * Ⲇ, Ⲇ * 174, Ⲇ * 177);
			Δ.bezierCurveTo(Ⲇ * 207, 184 * Ⲇ, Ⲇ * 207, Ⲇ * 184, Ⲇ * 240, 191 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 244, 140 * Ⲇ, Ⲇ * 113, Ⲇ * 121, Ⲇ * 108, 191 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1])
		} else if (ᐃⲆ == ⵠΔΔᐃⲆ) {
			Δ.globalAlpha = .5;
			Δ.translate(-88 * Ⲇ, -95 * Ⲇ);
			Δ.save();
			Δ.translate(Ⲇ * 174, 195.5 * Ⲇ);
			ᐃΔⵠ(Δ, -82 * Ⲇ, -46.5 * Ⲇ, Ⲇ * 164, Ⲇ * 93, Ⲇ * 30);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(Ⲇ * 174, 170.5 * Ⲇ);
			ᐃΔⵠ(Δ, -81 * Ⲇ, Ⲇ * -59.5, Ⲇ * 162, Ⲇ * 119, 28 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆΔΔⲆ], 6.5 * Ⲇ);
			ⵠΔᐃ(Δ, Ⲇ * 137, Ⲇ * 200, Ⲇ * 22.090722034374522);
			ⵠᐃ(Δ, Δⵠ[3]);
			ⵠΔᐃ(Δ, 210 * Ⲇ, 200 * Ⲇ, Ⲇ * 22.20360331117452);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⲆ]);
			ⵠΔᐃ(Δ, 127 * Ⲇ, Ⲇ * 198, 7 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[4]);
			ⵠΔᐃ(Δ, 200 * Ⲇ, Ⲇ * 198, Ⲇ * ᐃᐃⲆΔΔ);
			ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⲆ]);
			Δ.save();
			Δ.translate(Ⲇ * 175, 175.5 * Ⲇ);
			ᐃΔⵠ(Δ, -67 * Ⲇ, -13.5 * Ⲇ, Ⲇ * 134, 27 * Ⲇ, 0 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.save();
			Δ.translate(172 * Ⲇ, Ⲇ * 219);
			ᐃΔⵠ(Δ, -60 * Ⲇ, -4 * Ⲇ, 120 * Ⲇ, Ⲇ * 8, 0 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[1])
		} else if (ΔⲆΔᐃΔ == ᐃⲆ) {
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * -88, -95 * Ⲇ);
			Δ.save();
			Δ.translate(174 * Ⲇ, 195.5 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -82, Ⲇ * -46.5, Ⲇ * 164, 93 * Ⲇ, Ⲇ * 30);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ]);
			Δ.globalAlpha = 1;
			Δ.save();
			Δ.translate(Ⲇ * 174, 170.5 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -81, -59.5 * Ⲇ, 162 * Ⲇ, 119 * Ⲇ, Ⲇ * 28);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ], Δⵠ[ᐃⵠΔⲆ], 6.5 * Ⲇ);
			ⵠΔᐃ(Δ, 137 * Ⲇ, Ⲇ * 200, 22.090722034374522 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ]);
			ⵠΔᐃ(Δ, Ⲇ * 210, Ⲇ * 200, 22.090722034374522 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[3]);
			ⵠΔᐃ(Δ, 143 * Ⲇ, Ⲇ * 200, ⲆΔᐃᐃⲆ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[4]);
			ⵠΔᐃ(Δ, Ⲇ * 204, 200 * Ⲇ, 7 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[4])
		}
		return ᐃⵠ
	}

	function ⵠΔΔΔⵠⵠᐃⵠⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 350;
		ᐃⵠ.height = 350 * Ⲇ;
		Δ.translate(0, 15 * Ⲇ);
		Δ.globalAlpha = .5;
		Δ.save();
		Δ.translate(Ⲇ * 174, 172 * Ⲇ);
		ᐃΔⵠ(Δ, -81 * Ⲇ, -60 * Ⲇ, 162 * Ⲇ, 120 * Ⲇ, Ⲇ * 26);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(ⵠᐃΔ, Ⲇ * -ⲆⵠⲆⲆᐃⲆⲆ);
		Δ.globalAlpha = 1;
		Δ.save();
		Δ.translate(Ⲇ * 174, Ⲇ * 172);
		ᐃΔⵠ(Δ, -81 * Ⲇ, Ⲇ * -60, Ⲇ * 162, 120 * Ⲇ, Ⲇ * 26);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⵠ], Δⵠ[ΔⲆⵠΔ], ΔⵠᐃΔⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(179 * Ⲇ, 211 * Ⲇ);
		Δ.bezierCurveTo(183 * Ⲇ, 204.5 * Ⲇ, 183 * Ⲇ, Ⲇ * 204.5, 187 * Ⲇ, 198 * Ⲇ);
		Δ.bezierCurveTo(198.5 * Ⲇ, Ⲇ * 191.5, 198.5 * Ⲇ, Ⲇ * 191.5, Ⲇ * 210, Ⲇ * 185);
		Δ.bezierCurveTo(Ⲇ * 215, 176.5 * Ⲇ, 215 * Ⲇ, Ⲇ * 176.5, 220 * Ⲇ, Ⲇ * 168);
		Δ.bezierCurveTo(213 * Ⲇ, Ⲇ * 173.5, 213 * Ⲇ, 173.5 * Ⲇ, 206 * Ⲇ, 179 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 195, 184 * Ⲇ, Ⲇ * 195, 184 * Ⲇ, Ⲇ * 184, 189 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(167 * Ⲇ, 233 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 167, 207 * Ⲇ, 167 * Ⲇ, 207 * Ⲇ, Ⲇ * 167, Ⲇ * 181);
		Δ.bezierCurveTo(Ⲇ * 167, 166 * Ⲇ, 157 * Ⲇ, Ⲇ * 164, 148 * Ⲇ, 165 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 120, 165 * Ⲇ, 120 * Ⲇ, Ⲇ * 165, 92 * Ⲇ, Ⲇ * 165);
		Δ.bezierCurveTo(Ⲇ * 92, Ⲇ * 186.5, Ⲇ * 92, Ⲇ * 186.5, Ⲇ * 92, Ⲇ * 208);
		Δ.bezierCurveTo(93 * Ⲇ, Ⲇ * 222, 102 * Ⲇ, 234 * Ⲇ, Ⲇ * 119, 233 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠ], Δⵠ[ⵠⵠᐃⲆ], 7 * Ⲇ);
		ⵠΔᐃ(Δ, 152 * Ⲇ, 179 * Ⲇ, ᐃⲆΔⵠΔ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⵠΔ]);
		ⵠΔᐃ(Δ, Ⲇ * 107, 179 * Ⲇ, Ⲇ * 6);
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠᐃⲆ]);
		Δ.save();
		Δ.translate(210 * Ⲇ, Ⲇ * 200);
		Δ.rotate(.2);
		ΔΔΔΔ(Δ, ⲆΔⲆⲆᐃᐃⲆ, 32 * Ⲇ, ⲆⲆᐃᐃⵠ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⲆⵠ], Δⵠ[2], 7 * Ⲇ);
		Δ.save();
		Δ.translate(210 * Ⲇ, 200 * Ⲇ);
		Δ.rotate(1.0471975511965976);
		ΔΔΔΔ(Δ, 6, Ⲇ * 19, ⵠⲆⵠⲆⵠ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], ΔΔⵠⲆᐃ * Ⲇ);
		Δ.save();
		Δ.translate(205 * Ⲇ, Ⲇ * 193);
		Δ.rotate(ᐃⲆᐃ);
		ΔΔΔΔ(Δ, 6, ᐃⲆᐃⲆⲆ * Ⲇ, Ⲇ * 3);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[8]);
		Δ.save();
		Δ.translate(137 * Ⲇ, Ⲇ * 200);
		Δ.rotate(-.5235987755982988);
		ΔΔΔΔ(Δ, 6, Ⲇ * ⵠⲆᐃⲆⵠ, Ⲇ * 5);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔⵠΔᐃⵠ], Δⵠ[7], Ⲇ * 7);
		Δ.save();
		Δ.translate(131 * Ⲇ, Ⲇ * 194);
		ΔΔΔΔ(Δ, 6, ΔΔⵠⲆⵠ * Ⲇ, Ⲇ * 3);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[8]);
		Δ.save();
		Δ.translate(150.5 * Ⲇ, 120 * Ⲇ);
		Δ.rotate(ⲆⲆΔ);
		ᐃΔⵠ(Δ, -19.5 * Ⲇ, -8 * Ⲇ, Ⲇ * 39, Ⲇ * ᐃΔᐃⲆⲆ, 0 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, undefined, Δⵠ[2], Ⲇ * ⲆΔᐃᐃⲆ);
		return ᐃⵠ
	}
	const ΔⵠᐃᐃⲆΔΔΔᐃ = ΔⲆᐃⲆⵠᐃΔ;

	function ⲆⲆᐃΔⲆⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 248;
		ᐃⵠ.height = Ⲇ * 247;
		Δ.save();
		Δ.translate(Ⲇ * 182, 120 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -8, Ⲇ * -67, Ⲇ * 16, 134 * Ⲇ, Ⲇ * 1);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔ]);
		Δ.save();
		Δ.translate(68.5 * Ⲇ, Ⲇ * 127.5);
		ᐃΔⵠ(Δ, Ⲇ * -8.5, Ⲇ * -70.5, 17 * Ⲇ, Ⲇ * 141, 1 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.save();
		Δ.translate(123.5 * Ⲇ, Ⲇ * 68);
		ᐃΔⵠ(Δ, Ⲇ * -82.5, Ⲇ * -24, 165 * Ⲇ, Ⲇ * 48, 4 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠΔ], Δⵠ[1], Ⲇ * 6);
		Δ.save();
		Δ.translate(Ⲇ * 123, Ⲇ * 179.5);
		ᐃΔⵠ(Δ, Ⲇ * -83, -24.5 * Ⲇ, 166 * Ⲇ, 49 * Ⲇ, ΔᐃᐃΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃⲆ], Δⵠ[ᐃΔΔⲆ], 6 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 123.5, 123.5 * Ⲇ);
		Δ.rotate(6.24);
		ᐃΔⵠ(Δ, -82.5 * Ⲇ, -24.5 * Ⲇ, Ⲇ * 165, Ⲇ * 49, Ⲇ * 4);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⵠ], Δⵠ[1], Ⲇ * ΔⲆⵠΔᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(204 * Ⲇ, 112 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 149, 121.5 * Ⲇ, Ⲇ * 96, 130 * Ⲇ, Ⲇ * 94, 131 * Ⲇ);
		Δ.bezierCurveTo(149.5 * Ⲇ, Ⲇ * 127.5, Ⲇ * 149.5, Ⲇ * 127.5, Ⲇ * 205, 124 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		return ᐃⵠ
	}

	function ⲆⲆⵠⲆⵠⲆⵠΔΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 70 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 70;
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, Ⲇ * 26, 26 * Ⲇ, 9 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0]);
		ⵠΔᐃ(Δ, 56 * Ⲇ, Ⲇ * 36, Ⲇ * 9);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⲆ]);
		ⵠΔᐃ(Δ, Ⲇ * 40, Ⲇ * 50, ΔᐃᐃᐃⲆΔΔ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⵠ]);
		Δ.globalAlpha = ⲆⲆⲆᐃ;
		ⵠΔᐃ(Δ, 26 * Ⲇ, Ⲇ * 26, 5 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
		ⵠΔᐃ(Δ, Ⲇ * 56, 36 * Ⲇ, ᐃᐃⲆⵠᐃ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[1]);
		ⵠΔᐃ(Δ, Ⲇ * 40, 50 * Ⲇ, ΔⲆⵠⵠ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2]);
		return ᐃⵠ
	}

	function ΔΔᐃᐃⵠΔⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 248;
		ᐃⵠ.height = Ⲇ * 247;
		Δ.save();
		Δ.translate(69.5 * Ⲇ, Ⲇ * 145);
		ᐃΔⵠ(Δ, -8.5 * Ⲇ, Ⲇ * -63, 17 * Ⲇ, 127 * Ⲇ, ΔⲆⵠⲆ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]);
		Δ.save();
		Δ.translate(Ⲇ * 183, Ⲇ * 145);
		ᐃΔⵠ(Δ, Ⲇ * -ᐃᐃᐃⵠᐃ, -63 * Ⲇ, 16 * Ⲇ, 126 * Ⲇ, 1 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⲆⲆ]);
		Δ.save();
		Δ.translate(123.5 * Ⲇ, 62.5 * Ⲇ);
		Δ.rotate(6.28);
		ᐃΔⵠ(Δ, -84.5 * Ⲇ, Ⲇ * -25.5, Ⲇ * 169, 51 * Ⲇ, Ⲇ * 5);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆΔ], Δⵠ[1], 6 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 123.5, 118 * Ⲇ);
		Δ.rotate(6.24);
		ᐃΔⵠ(Δ, -85.5 * Ⲇ, Ⲇ * -24, 169 * Ⲇ, 48 * Ⲇ, Ⲇ * ΔⲆⵠⵠ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃⵠᐃᐃ], 6 * Ⲇ);
		Δ.save();
		Δ.translate(122 * Ⲇ, 177.5 * Ⲇ);
		Δ.rotate(6.32);
		ᐃΔⵠ(Δ, -84 * Ⲇ, Ⲇ * -23.5, 169 * Ⲇ, 47 * Ⲇ, ᐃᐃᐃᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ΔᐃⵠⲆ], Ⲇ * 6);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 37, Ⲇ * 157);
		Δ.bezierCurveTo(49 * Ⲇ, Ⲇ * 160, Ⲇ * 49, 160 * Ⲇ, Ⲇ * 61, 163 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 49.5, Ⲇ * 165.5, 49.5 * Ⲇ, 165.5 * Ⲇ, Ⲇ * 38, Ⲇ * 168);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(205 * Ⲇ, 175 * Ⲇ);
		Δ.bezierCurveTo(192.5 * Ⲇ, Ⲇ * 180, Ⲇ * 192.5, Ⲇ * 180, 180 * Ⲇ, Ⲇ * 185);
		Δ.bezierCurveTo(Ⲇ * 193, Ⲇ * 188, 193 * Ⲇ, Ⲇ * 188, Ⲇ * 206, Ⲇ * 191);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ]);
		return ᐃⵠ
	}

	function ΔΔᐃᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 22;
		ᐃⵠ.height = Ⲇ * 22;
		Δ.globalAlpha = .4;
		ⵠΔᐃ(Δ, 11 * Ⲇ, 11 * Ⲇ, Ⲇ * 10);
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = .7;
		ⵠΔᐃ(Δ, Ⲇ * 11, 11 * Ⲇ, 7 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]);
		Δ.globalAlpha = ΔΔⵠ;
		ⵠΔᐃ(Δ, Ⲇ * 11, Ⲇ * ᐃⲆⵠⵠⲆΔⲆ, ⵠⵠⵠᐃⲆ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0]);
		return ᐃⵠ
	}

	function ⵠΔⲆΔΔΔᐃᐃᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = ⵠⲆⵠΔⲆ * Ⲇ;
		ᐃⵠ.height = ⲆⵠΔⵠⵠ * Ⲇ;
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, ΔΔⲆΔΔ * Ⲇ, Ⲇ * 10, Ⲇ * 9);
		ⵠᐃ(Δ, Δⵠ[0]);
		return ᐃⵠ
	}
	const ΔΔⵠⲆⵠⵠᐃ = ⲆⵠⵠΔᐃ;

	function ⵠⲆⵠᐃΔᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 191;
		ᐃⵠ.height = 153 * Ⲇ;
		Δ.globalAlpha = .5;
		Δ.translate(Ⲇⵠⵠᐃ, Ⲇ * 10);
		Δ.save();
		Δ.translate(96.49996948242188 * Ⲇ, Ⲇ * 66.79510498046875);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, -79.5 * Ⲇ, Ⲇ * -48.5, Ⲇ * 159, Ⲇ * 97, Ⲇ * 22);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ], Δⵠ[0], Ⲇ * 4);
		Δ.globalAlpha = ⵠⲆⵠⲆ;
		Δ.translate(0, -10 * Ⲇ);
		Δ.save();
		Δ.translate(96.49996948242188 * Ⲇ, Ⲇ * 66.79510498046875);
		Δ.rotate(ⵠⵠⲆΔ);
		ᐃΔⵠ(Δ, -79.5 * Ⲇ, Ⲇ * -48.5, 159 * Ⲇ, Ⲇ * 97, Ⲇ * 22);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⲆ], Δⵠ[2], Ⲇ * ⵠⵠⵠᐃⲆ);
		Δ.translate(2 * Ⲇ, ⵠⵠⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 119, 28 * Ⲇ);
		Δ.bezierCurveTo(119 * Ⲇ, 22 * Ⲇ, 119 * Ⲇ, Ⲇ * 20, Ⲇ * 122, 16 * Ⲇ);
		Δ.bezierCurveTo(149 * Ⲇ, Ⲇ * 39, 149 * Ⲇ, Ⲇ * 39, 176 * Ⲇ, 63 * Ⲇ);
		Δ.bezierCurveTo(176 * Ⲇ, 75 * Ⲇ, Ⲇ * 176, 75 * Ⲇ, Ⲇ * 175, 88 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 174, 90 * Ⲇ, Ⲇ * 174, 90 * Ⲇ, 172 * Ⲇ, Ⲇ * 93);
		Δ.bezierCurveTo(Ⲇ * 171, 101 * Ⲇ, 169 * Ⲇ, Ⲇ * 109, Ⲇ * 164, Ⲇ * 113);
		Δ.bezierCurveTo(163 * Ⲇ, Ⲇ * 104, Ⲇ * 163, Ⲇ * 104, 162 * Ⲇ, Ⲇ * 95);
		Δ.bezierCurveTo(Ⲇ * 155, Ⲇ * 105, 155 * Ⲇ, 105 * Ⲇ, Ⲇ * 147, Ⲇ * 116);
		Δ.bezierCurveTo(87 * Ⲇ, 114 * Ⲇ, Ⲇ * 87, 114 * Ⲇ, 26 * Ⲇ, 112 * Ⲇ);
		Δ.bezierCurveTo(27 * Ⲇ, Ⲇ * 106, 27 * Ⲇ, 106 * Ⲇ, Ⲇ * 27, 101 * Ⲇ);
		Δ.bezierCurveTo(24 * Ⲇ, 104 * Ⲇ, 24 * Ⲇ, Ⲇ * 104, Ⲇ * 20, Ⲇ * 108);
		Δ.bezierCurveTo(17 * Ⲇ, Ⲇ * 103, Ⲇ * ΔΔΔΔᐃⵠⲆ, Ⲇ * 86, Ⲇ * 23, 72 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 15, Ⲇ * 74, 14 * Ⲇ, 78 * Ⲇ, ⵠⲆᐃᐃⲆ * Ⲇ, Ⲇ * 83);
		Δ.bezierCurveTo(Ⲇ * 12, Ⲇ * 65, ⵠᐃᐃᐃⵠⵠⵠ * Ⲇ, 54 * Ⲇ, 16 * Ⲇ, 42 * Ⲇ);
		Δ.bezierCurveTo(ᐃⲆⵠⵠᐃ * Ⲇ, 39 * Ⲇ, Ⲇ * 14, 39 * Ⲇ, Ⲇ * 12, Ⲇ * 36);
		Δ.bezierCurveTo(16 * Ⲇ, 33 * Ⲇ, Ⲇ * 16, 33 * Ⲇ, 19 * Ⲇ, Ⲇ * 30);
		Δ.bezierCurveTo(18 * Ⲇ, 27 * Ⲇ, Ⲇ * 18, Ⲇ * 27, Ⲇ * ΔΔΔΔᐃ, Ⲇ * 25);
		Δ.bezierCurveTo(Ⲇ * 24, Ⲇ * 24, Ⲇ * 31, Ⲇ * 21, Ⲇ * 29, ᐃΔΔⵠΔ * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 37, 25 * Ⲇ, Ⲇ * 37, Ⲇ * 25, 45 * Ⲇ, 31 * Ⲇ);
		Δ.bezierCurveTo(40 * Ⲇ, Ⲇ * 23, 40 * Ⲇ, Ⲇ * 21, 42 * Ⲇ, 16 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 74, Ⲇ * 16, Ⲇ * 74, Ⲇ * ⵠⲆᐃⲆᐃⲆᐃ, Ⲇ * 106, ⲆⲆᐃΔⵠ * Ⲇ);
		Δ.bezierCurveTo(113 * Ⲇ, Ⲇ * 21, 113 * Ⲇ, 21 * Ⲇ, 119 * Ⲇ, Ⲇ * 26);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃΔ], Δⵠ[4], Ⲇ * 4);
		return ᐃⵠ
	}

	function ⵠⵠⵠᐃⲆΔᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 248;
		ᐃⵠ.height = 247 * Ⲇ;
		Δ.save();
		Δ.translate(Ⲇ * 183, Ⲇ * 107);
		ᐃΔⵠ(Δ, Ⲇ * -8, -70.5 * Ⲇ, 16 * Ⲇ, Ⲇ * 141, ᐃΔⵠΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.save();
		Δ.translate(69.5 * Ⲇ, Ⲇ * 110);
		ᐃΔⵠ(Δ, -8.5 * Ⲇ, -71 * Ⲇ, ᐃᐃⵠⲆΔⲆᐃ * Ⲇ, 143 * Ⲇ, Ⲇ * ΔᐃⵠⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.save();
		Δ.translate(123.5 * Ⲇ, Ⲇ * 181);
		ᐃΔⵠ(Δ, -84.5 * Ⲇ, Ⲇ * -26, Ⲇ * 169, 52 * Ⲇ, Ⲇ * 5);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆΔᐃ], Δⵠ[1], ⲆⲆᐃⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(41 * Ⲇ, 95 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 105, 96 * Ⲇ, 113 * Ⲇ, Ⲇ * 99, 134 * Ⲇ, 102 * Ⲇ);
		Δ.bezierCurveTo(147 * Ⲇ, Ⲇ * 106, Ⲇ * 173, Ⲇ * 100, 207 * Ⲇ, Ⲇ * 105);
		Δ.bezierCurveTo(210 * Ⲇ, 105 * Ⲇ, 207 * Ⲇ, Ⲇ * 140, 207 * Ⲇ, Ⲇ * 154);
		Δ.bezierCurveTo(123.5 * Ⲇ, Ⲇ * 151.5, Ⲇ * 123.5, 151.5 * Ⲇ, Ⲇ * 40, 149 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 37, Ⲇ * 145, Ⲇ * 39, 95 * Ⲇ, Ⲇ * 41, Ⲇ * 96);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆⵠ], Δⵠ[ᐃΔⵠΔ], Ⲇ * 6);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 68, Ⲇ * 75);
		Δ.bezierCurveTo(54 * Ⲇ, 72.5 * Ⲇ, 54 * Ⲇ, 72.5 * Ⲇ, 40 * Ⲇ, 70 * Ⲇ);
		Δ.bezierCurveTo(38 * Ⲇ, 46 * Ⲇ, Ⲇ * 40, Ⲇ * 46, 53 * Ⲇ, Ⲇ * 46);
		Δ.bezierCurveTo(201 * Ⲇ, 41 * Ⲇ, 201 * Ⲇ, Ⲇ * 41, 201 * Ⲇ, 42 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 211, Ⲇ * 40, Ⲇ * 208, Ⲇ * 53, Ⲇ * 208, 72 * Ⲇ);
		Δ.bezierCurveTo(209 * Ⲇ, Ⲇ * 91, Ⲇ * 210, 96 * Ⲇ, Ⲇ * 194, Ⲇ * 94);
		Δ.bezierCurveTo(Ⲇ * 119, Ⲇ * 97, Ⲇ * 119, Ⲇ * 97, 44 * Ⲇ, ΔⵠⲆⵠⲆ * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 39, 99 * Ⲇ, Ⲇ * 40, 96 * Ⲇ, Ⲇ * 40, 80 * Ⲇ);
		Δ.bezierCurveTo(54 * Ⲇ, 77.5 * Ⲇ, 54 * Ⲇ, Ⲇ * 77.5, 68 * Ⲇ, Ⲇ * 75);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠⵠⵠⲆ], Ⲇ * 6);
		return ᐃⵠ
	}

	function ⵠⲆⵠᐃΔⵠᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 191;
		ᐃⵠ.height = 153 * Ⲇ;
		Δ.save();
		Δ.translate(Ⲇ * 96.49996948242188, Ⲇ * 66.79510498046875);
		ᐃΔⵠ(Δ, -79.5 * Ⲇ, -48.5 * Ⲇ, 159 * Ⲇ, Ⲇ * 97, Ⲇ * 22);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ], Δⵠ[0], Ⲇ * ΔΔΔⵠ);
		Δ.translate(Ⲇ * ⵠᐃᐃⲆ, 0);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 119, Ⲇ * 28);
		Δ.bezierCurveTo(119 * Ⲇ, Ⲇ * 22, Ⲇ * 119, Ⲇ * 20, 122 * Ⲇ, ᐃⵠᐃΔⲆᐃΔ * Ⲇ);
		Δ.bezierCurveTo(149 * Ⲇ, Ⲇ * 39, 149 * Ⲇ, 39 * Ⲇ, Ⲇ * 176, Ⲇ * 63);
		Δ.bezierCurveTo(Ⲇ * 176, Ⲇ * 75, 176 * Ⲇ, Ⲇ * 75, 175 * Ⲇ, Ⲇ * 88);
		Δ.bezierCurveTo(174 * Ⲇ, 90 * Ⲇ, Ⲇ * 174, Ⲇ * 90, Ⲇ * 172, 93 * Ⲇ);
		Δ.bezierCurveTo(171 * Ⲇ, Ⲇ * 101, 169 * Ⲇ, 109 * Ⲇ, Ⲇ * 164, Ⲇ * 113);
		Δ.bezierCurveTo(163 * Ⲇ, 104 * Ⲇ, Ⲇ * 163, Ⲇ * 104, Ⲇ * 162, 95 * Ⲇ);
		Δ.bezierCurveTo(155 * Ⲇ, Ⲇ * 105, 155 * Ⲇ, Ⲇ * 105, Ⲇ * 147, 116 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 87, 114 * Ⲇ, 87 * Ⲇ, 114 * Ⲇ, Ⲇ * 26, 112 * Ⲇ);
		Δ.bezierCurveTo(27 * Ⲇ, Ⲇ * 106, Ⲇ * 27, 106 * Ⲇ, 27 * Ⲇ, Ⲇ * 101);
		Δ.bezierCurveTo(24 * Ⲇ, Ⲇ * 104, Ⲇ * 24, 104 * Ⲇ, ⵠⲆⵠΔⲆ * Ⲇ, 108 * Ⲇ);
		Δ.bezierCurveTo(17 * Ⲇ, Ⲇ * 103, ⵠⵠᐃΔᐃ * Ⲇ, 86 * Ⲇ, 23 * Ⲇ, 72 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ΔᐃᐃΔᐃ, Ⲇ * 74, 14 * Ⲇ, Ⲇ * 78, 12 * Ⲇ, Ⲇ * 83);
		Δ.bezierCurveTo(Ⲇ * 12, Ⲇ * 65, 12 * Ⲇ, Ⲇ * 54, 16 * Ⲇ, 42 * Ⲇ);
		Δ.bezierCurveTo(ⲆⵠΔΔᐃᐃⲆ * Ⲇ, Ⲇ * 39, Ⲇ * 14, Ⲇ * 39, Ⲇ * ΔΔΔΔᐃΔΔ, 36 * Ⲇ);
		Δ.bezierCurveTo(ΔⲆⲆⲆⲆΔᐃ * Ⲇ, 33 * Ⲇ, ΔΔⲆᐃΔΔⲆ * Ⲇ, Ⲇ * 33, 19 * Ⲇ, 30 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ΔΔⵠΔᐃᐃᐃ, Ⲇ * 27, ΔⲆᐃᐃᐃ * Ⲇ, 27 * Ⲇ, ᐃⲆᐃⵠⲆΔΔ * Ⲇ, 25 * Ⲇ);
		Δ.bezierCurveTo(24 * Ⲇ, 24 * Ⲇ, Ⲇ * 31, Ⲇ * 21, 29 * Ⲇ, 19 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 37, 25 * Ⲇ, 37 * Ⲇ, Ⲇ * 25, Ⲇ * 45, 31 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 40, Ⲇ * 23, Ⲇ * 40, Ⲇ * 21, Ⲇ * 42, Ⲇ * 16);
		Δ.bezierCurveTo(Ⲇ * 74, 16 * Ⲇ, Ⲇ * 74, Ⲇ * ΔᐃⵠⵠⲆᐃΔ, 106 * Ⲇ, 16 * Ⲇ);
		Δ.bezierCurveTo(113 * Ⲇ, 21 * Ⲇ, Ⲇ * 113, 21 * Ⲇ, Ⲇ * 119, Ⲇ * 26);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ], Δⵠ[ⲆⲆΔ], Ⲇ * 4);
		Δ.save();
		Δ.translate(Ⲇ * 97.49996948242188, 95.12844848632812 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -62.5, Ⲇ * -41.5, 125 * Ⲇ, 83 * Ⲇ, 20 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], 4 * Ⲇ);
		return ᐃⵠ
	}

	function ᐃΔⵠⵠᐃΔΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 191 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 153;
		Δ.globalAlpha = .5;
		Δ.translate(ᐃⲆᐃ, Ⲇ * 10);
		Δ.save();
		Δ.translate(Ⲇ * 97.49996948242188, Ⲇ * 95.12844848632812);
		ᐃΔⵠ(Δ, -62.5 * Ⲇ, Ⲇ * -41.5, Ⲇ * 125, 83 * Ⲇ, ⵠⲆⵠΔⲆ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], Ⲇ * 4);
		Δ.globalAlpha = 1;
		Δ.translate(0, -10 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 97.49996948242188, 95.12844848632812 * Ⲇ);
		ᐃΔⵠ(Δ, -62.5 * Ⲇ, -41.5 * Ⲇ, 125 * Ⲇ, 83 * Ⲇ, Ⲇ * ΔⵠΔΔΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * 4);
		Δ.globalCompositeOperation = ᐃ[500];
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(26.999969482421875 * Ⲇ, 50.850677490234375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 46.499969482421875, Ⲇ * 64.85067749023438, 46.499969482421875 * Ⲇ, Ⲇ * 64.85067749023438, 65.99996948242188 * Ⲇ, 78.85067749023438 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 80.99996948242188, 87.85067749023438 * Ⲇ, Ⲇ * 105.99996948242188, 82.85067749023438 * Ⲇ, 114.99996948242188 * Ⲇ, Ⲇ * 80.85067749023438);
		Δ.bezierCurveTo(130.99996948242188 * Ⲇ, 69.85067749023438 * Ⲇ, 152.99996948242188 * Ⲇ, Ⲇ * 70.85067749023438, Ⲇ * 166.99996948242188, Ⲇ * 67.85067749023438);
		Δ.bezierCurveTo(Ⲇ * 156.99996948242188, Ⲇ * 52.850677490234375, 156.99996948242188 * Ⲇ, 52.850677490234375 * Ⲇ, Ⲇ * 146.99996948242188, Ⲇ * 37.850677490234375);
		Δ.bezierCurveTo(Ⲇ * 101.49996948242188, Ⲇ * 37.350677490234375, Ⲇ * 101.49996948242188, 37.350677490234375 * Ⲇ, Ⲇ * 55.999969482421875, Ⲇ * 36.850677490234375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠⲆ], Δⵠ[ⵠΔΔᐃ], 4 * Ⲇ);
		Δ.globalCompositeOperation = ᐃ[15];
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 40.999969482421875, 59.850677490234375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 41.999969482421875, 50.850677490234375 * Ⲇ, 47.999969482421875 * Ⲇ, 47.850677490234375 * Ⲇ, 56.999969482421875 * Ⲇ, Ⲇ * 49.850677490234375);
		Δ.bezierCurveTo(Ⲇ * 65.99996948242188, 41.850677490234375 * Ⲇ, Ⲇ * 76.99996948242188, 42.850677490234375 * Ⲇ, 90.99996948242188 * Ⲇ, Ⲇ * 47.850677490234375);
		Δ.bezierCurveTo(94.99996948242188 * Ⲇ, Ⲇ * 42.850677490234375, 104.99996948242188 * Ⲇ, 42.850677490234375 * Ⲇ, 114.99996948242188 * Ⲇ, Ⲇ * 47.850677490234375);
		Δ.bezierCurveTo(Ⲇ * 131.99996948242188, 42.850677490234375 * Ⲇ, Ⲇ * 142.99996948242188, 48.850677490234375 * Ⲇ, Ⲇ * 145.99996948242188, Ⲇ * 56.850677490234375);
		Δ.bezierCurveTo(Ⲇ * 160.99996948242188, 63.850677490234375 * Ⲇ, 154.99996948242188 * Ⲇ, Ⲇ * 69.85067749023438, 155.99996948242188 * Ⲇ, Ⲇ * 70.85067749023438);
		Δ.bezierCurveTo(141.99996948242188 * Ⲇ, Ⲇ * 71.85067749023438, Ⲇ * 141.99996948242188, Ⲇ * 71.85067749023438, 127.99996948242188 * Ⲇ, Ⲇ * 72.85067749023438);
		Δ.bezierCurveTo(110.99996948242188 * Ⲇ, 83.85067749023438 * Ⲇ, 107.99996948242188 * Ⲇ, 82.85067749023438 * Ⲇ, Ⲇ * 90.99996948242188, 85.85067749023438 * Ⲇ);
		Δ.bezierCurveTo(70.99996948242188 * Ⲇ, 83.85067749023438 * Ⲇ, 64.99996948242188 * Ⲇ, Ⲇ * 79.85067749023438, Ⲇ * 53.999969482421875, Ⲇ * 70.85067749023438);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ], Δⵠ[4], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 33.999969482421875, Ⲇ * 65.85067749023438);
		Δ.bezierCurveTo(Ⲇ * 36.999969482421875, Ⲇ * 59.850677490234375, 34.999969482421875 * Ⲇ, 60.850677490234375 * Ⲇ, Ⲇ * 39.999969482421875, 59.850677490234375 * Ⲇ);
		Δ.bezierCurveTo(47.999969482421875 * Ⲇ, Ⲇ * 61.850677490234375, 62.999969482421875 * Ⲇ, 76.85067749023438 * Ⲇ, 74.99996948242188 * Ⲇ, Ⲇ * 79.85067749023438);
		Δ.bezierCurveTo(93.99996948242188 * Ⲇ, Ⲇ * 85.85067749023438, Ⲇ * 111.99996948242188, 83.85067749023438 * Ⲇ, Ⲇ * 124.99996948242188, 70.85067749023438 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 129.99996948242188, 67.85067749023438 * Ⲇ, Ⲇ * 145.99996948242188, Ⲇ * 65.85067749023438, Ⲇ * 159.99996948242188, Ⲇ * 67.85067749023438);
		Δ.bezierCurveTo(159.99996948242188 * Ⲇ, Ⲇ * 71.85067749023438, 159.99996948242188 * Ⲇ, Ⲇ * 71.85067749023438, 159.99996948242188 * Ⲇ, 75.85067749023438 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 146.99996948242188, Ⲇ * 72.85067749023438, Ⲇ * 144.99996948242188, Ⲇ * 75.85067749023438, Ⲇ * 143.99996948242188, Ⲇ * 82.85067749023438);
		Δ.bezierCurveTo(Ⲇ * 144.99996948242188, 86.85067749023438 * Ⲇ, 140.99996948242188 * Ⲇ, 90.85067749023438 * Ⲇ, Ⲇ * 137.99996948242188, 86.85067749023438 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 139.99996948242188, 72.85067749023438 * Ⲇ, Ⲇ * 135.99996948242188, Ⲇ * 72.85067749023438, 133.99996948242188 * Ⲇ, Ⲇ * 82.85067749023438);
		Δ.bezierCurveTo(127.99996948242188 * Ⲇ, 88.85067749023438 * Ⲇ, 124.99996948242188 * Ⲇ, Ⲇ * 70.85067749023438, 116.99996948242188 * Ⲇ, 86.85067749023438 * Ⲇ);
		Δ.bezierCurveTo(110.99996948242188 * Ⲇ, Ⲇ * 91.85067749023438, Ⲇ * 96.99996948242188, Ⲇ * 81.85067749023438, Ⲇ * 89.99996948242188, Ⲇ * 90.85067749023438);
		Δ.bezierCurveTo(Ⲇ * 85.99996948242188, 92.85067749023438 * Ⲇ, 81.99996948242188 * Ⲇ, 95.85067749023438 * Ⲇ, Ⲇ * 76.99996948242188, Ⲇ * 86.85067749023438);
		Δ.bezierCurveTo(Ⲇ * 67.99996948242188, Ⲇ * 93.85067749023438, 67.99996948242188 * Ⲇ, 91.85067749023438 * Ⲇ, Ⲇ * 60.999969482421875, Ⲇ * 79.85067749023438);
		Δ.bezierCurveTo(53.999969482421875 * Ⲇ, Ⲇ * 71.85067749023438, Ⲇ * 52.999969482421875, Ⲇ * 72.85067749023438, 46.999969482421875 * Ⲇ, Ⲇ * 77.85067749023438);
		Δ.bezierCurveTo(41.999969482421875 * Ⲇ, Ⲇ * 78.85067749023438, 42.999969482421875 * Ⲇ, Ⲇ * 69.85067749023438, Ⲇ * 33.999969482421875, 65.85067749023438 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[6], 4 * Ⲇ);
		ⵠΔᐃ(Δ, 68 * Ⲇ, Ⲇ * 111.29513549804688, Ⲇ * ΔᐃΔⵠᐃ);
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[ⵠⲆⲆᐃᐃ], Ⲇ * 4);
		ⵠΔᐃ(Δ, 123 * Ⲇ, 111.29510498046875 * Ⲇ, 15 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[8], 4 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 63, 106 * Ⲇ, ⵠⲆⲆⵠ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[9]);
		ⵠΔᐃ(Δ, Ⲇ * 118, Ⲇ * 106, 5 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆᐃᐃᐃ]);
		return ᐃⵠ
	}

	function ⵠⵠⲆⵠⲆ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 40;
		var ΔⵠⲆ = Ⲇ * 40;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		var Ⲇᐃ = Ⲇ * ᐃΔΔ / 2;
		var ⲆⲆⲆ = ΔⵠⲆ * Ⲇ / 2;
		var ΔⲆⵠ = Ⲇ * ⲆⵠⲆⲆᐃⲆⲆ;
		Δ.save();
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ);
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, 0, ΔᐃⲆⲆ, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[0]);
		var ΔⲆⵠ = 5 * Ⲇ;
		var Ⲇᐃ = Ⲇ * 2;
		var ⲆⲆⲆ = ᐃⵠⵠⵠ * Ⲇ;
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ);
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, Δⵠⵠ, ⵠⵠᐃ, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.restore();
		return ᐃⵠ
	}
	const ᐃΔᐃⲆⵠ = ⵠΔΔⲆΔ;

	function ᐃⲆⲆΔΔᐃΔ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 185;
		ᐃⵠ.height = Ⲇ * 240;
		Δ.globalAlpha = .5;
		Δ.translate(0, Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 44, Ⲇ * 137);
		Δ.bezierCurveTo(Ⲇ * 60, Ⲇ * 87, Ⲇ * 68, Ⲇ * 66, Ⲇ * 92, 67 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 115, Ⲇ * 64, Ⲇ * 129, 97 * Ⲇ, Ⲇ * 137, Ⲇ * 136);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 53, 181 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 30, 164 * Ⲇ, ⵠⲆΔⲆⲆⵠⵠ * Ⲇ, Ⲇ * 150, ᐃΔΔᐃⲆᐃΔ * Ⲇ, Ⲇ * 136);
		Δ.bezierCurveTo(Ⲇ * 28, 121 * Ⲇ, Ⲇ * 38, 132 * Ⲇ, 48 * Ⲇ, Ⲇ * 150);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(63 * Ⲇ, 208 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 75, Ⲇ * 224, Ⲇ * 86, Ⲇ * 228, 93 * Ⲇ, Ⲇ * 228);
		Δ.bezierCurveTo(104 * Ⲇ, Ⲇ * 229, 116 * Ⲇ, Ⲇ * 219, 122 * Ⲇ, 205 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(130 * Ⲇ, Ⲇ * 170);
		Δ.bezierCurveTo(146 * Ⲇ, 125 * Ⲇ, Ⲇ * 156, Ⲇ * 126, Ⲇ * 173, Ⲇ * 137);
		Δ.bezierCurveTo(Ⲇ * 167, Ⲇ * 151, 143 * Ⲇ, Ⲇ * 174, 131 * Ⲇ, 183 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 39, 140 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 75, Ⲇ * 126, 113 * Ⲇ, 127 * Ⲇ, 143 * Ⲇ, 137 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 141, 186 * Ⲇ, Ⲇ * 130, Ⲇ * 202, 113 * Ⲇ, Ⲇ * 214);
		Δ.bezierCurveTo(Ⲇ * 85, Ⲇ * 228, Ⲇ * 56, Ⲇ * 219, Ⲇ * 48, Ⲇ * 173);
		Δ.bezierCurveTo(Ⲇ * 40, Ⲇ * 148, Ⲇ * 43, 145 * Ⲇ, 39 * Ⲇ, Ⲇ * 140);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(ⵠⵠΔΔ, -10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 44, Ⲇ * 137);
		Δ.bezierCurveTo(Ⲇ * 60, Ⲇ * 87, Ⲇ * 68, Ⲇ * 66, Ⲇ * 92, Ⲇ * 67);
		Δ.bezierCurveTo(115 * Ⲇ, 64 * Ⲇ, 129 * Ⲇ, Ⲇ * 97, Ⲇ * 137, 136 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⲆ], Δⵠ[2], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(53 * Ⲇ, 181 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 30, 164 * Ⲇ, Ⲇ * ΔΔΔⲆᐃⵠⵠ, Ⲇ * 150, Ⲇ * 11, Ⲇ * 136);
		Δ.bezierCurveTo(Ⲇ * 28, 121 * Ⲇ, Ⲇ * 38, Ⲇ * 132, 48 * Ⲇ, 150 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠᐃᐃⲆ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 63, 208 * Ⲇ);
		Δ.bezierCurveTo(75 * Ⲇ, Ⲇ * 224, 86 * Ⲇ, Ⲇ * 228, Ⲇ * 93, 228 * Ⲇ);
		Δ.bezierCurveTo(104 * Ⲇ, 229 * Ⲇ, Ⲇ * 116, 219 * Ⲇ, 122 * Ⲇ, 205 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⲆ], Δⵠ[ᐃᐃΔⵠ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 130, 170 * Ⲇ);
		Δ.bezierCurveTo(146 * Ⲇ, Ⲇ * 125, 156 * Ⲇ, 126 * Ⲇ, 173 * Ⲇ, 137 * Ⲇ);
		Δ.bezierCurveTo(167 * Ⲇ, 151 * Ⲇ, 143 * Ⲇ, Ⲇ * 174, 131 * Ⲇ, 183 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠᐃᐃⲆ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(39 * Ⲇ, Ⲇ * 140);
		Δ.bezierCurveTo(75 * Ⲇ, 126 * Ⲇ, Ⲇ * 113, 127 * Ⲇ, 143 * Ⲇ, Ⲇ * 137);
		Δ.bezierCurveTo(141 * Ⲇ, Ⲇ * 186, Ⲇ * 130, Ⲇ * 202, 113 * Ⲇ, Ⲇ * 214);
		Δ.bezierCurveTo(Ⲇ * 85, 228 * Ⲇ, Ⲇ * 56, 219 * Ⲇ, Ⲇ * 48, 173 * Ⲇ);
		Δ.bezierCurveTo(40 * Ⲇ, 148 * Ⲇ, 43 * Ⲇ, 145 * Ⲇ, 39 * Ⲇ, Ⲇ * 140);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 59, 99 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 71, 68 * Ⲇ, 81 * Ⲇ, 68 * Ⲇ, 94 * Ⲇ, Ⲇ * 67);
		Δ.bezierCurveTo(105 * Ⲇ, 66 * Ⲇ, Ⲇ * 119, 75 * Ⲇ, 123 * Ⲇ, Ⲇ * 96);
		Δ.bezierCurveTo(104 * Ⲇ, 91 * Ⲇ, Ⲇ * 101, Ⲇ * 94, Ⲇ * 94, 97 * Ⲇ);
		Δ.bezierCurveTo(76 * Ⲇ, Ⲇ * 92, 73 * Ⲇ, Ⲇ * 93, Ⲇ * 60, Ⲇ * 99);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃΔ], Δⵠ[ⵠⵠᐃⲆ], Ⲇ * ᐃΔΔΔⲆ);
		ᐃⲆ === 0 ? (Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(47 * Ⲇ, 149 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 43, 140 * Ⲇ, 48 * Ⲇ, 130 * Ⲇ, 59 * Ⲇ, 127 * Ⲇ), Δ.bezierCurveTo(77 * Ⲇ, Ⲇ * 126, 90 * Ⲇ, 131 * Ⲇ, Ⲇ * 131, Ⲇ * 127), Δ.bezierCurveTo(Ⲇ * 143, 130 * Ⲇ, 144 * Ⲇ, 143 * Ⲇ, 132 * Ⲇ, Ⲇ * 154), Δ.bezierCurveTo(90 * Ⲇ, Ⲇ * 152, Ⲇ * 90, Ⲇ * 152, 48 * Ⲇ, 150 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ]), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 40, Ⲇ * 139), Δ.bezierCurveTo(Ⲇ * 48, Ⲇ * 113, Ⲇ * 76, Ⲇ * 119, Ⲇ * 91, 126 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 117, 113 * Ⲇ, Ⲇ * 135, 117 * Ⲇ, 144 * Ⲇ, 134 * Ⲇ), Δ.bezierCurveTo(144 * Ⲇ, 138 * Ⲇ, 144 * Ⲇ, 138 * Ⲇ, 144 * Ⲇ, 142 * Ⲇ), Δ.bezierCurveTo(128 * Ⲇ, 124 * Ⲇ, Ⲇ * 108, Ⲇ * 124, Ⲇ * 91, 136 * Ⲇ), Δ.bezierCurveTo(59 * Ⲇ, 124 * Ⲇ, 50 * Ⲇ, Ⲇ * 137, 42 * Ⲇ, Ⲇ * 148), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ], Δⵠ[ᐃᐃⵠⵠ], Ⲇ * 4)) : (Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(41 * Ⲇ, 139 * Ⲇ), Δ.bezierCurveTo(53 * Ⲇ, Ⲇ * 117, Ⲇ * 69, 118 * Ⲇ, 92 * Ⲇ, Ⲇ * 127), Δ.bezierCurveTo(Ⲇ * 124, Ⲇ * 111, 136 * Ⲇ, Ⲇ * 121, 143 * Ⲇ, 136 * Ⲇ), Δ.bezierCurveTo(142 * Ⲇ, 144 * Ⲇ, Ⲇ * 142, Ⲇ * 144, 141 * Ⲇ, 152 * Ⲇ), Δ.bezierCurveTo(128 * Ⲇ, Ⲇ * 131, Ⲇ * 113, 138 * Ⲇ, Ⲇ * 92, Ⲇ * 145), Δ.bezierCurveTo(Ⲇ * 57, 133 * Ⲇ, Ⲇ * 57, 147 * Ⲇ, Ⲇ * 44, Ⲇ * 154), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⲆΔⲆⲆ], Δⵠ[ⵠᐃᐃⲆ], 4 * Ⲇ));
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 90, Ⲇ * 95);
		Δ.bezierCurveTo(Ⲇ * 99, Ⲇ * 82, 98 * Ⲇ, Ⲇ * 58, Ⲇ * 99, Ⲇ * 40);
		Δ.bezierCurveTo(Ⲇ * 90, 38 * Ⲇ, Ⲇ * 89, 34 * Ⲇ, Ⲇ * 92, Ⲇ * ⵠⲆⵠΔⵠΔᐃ);
		Δ.bezierCurveTo(Ⲇ * 92, 5 * Ⲇ, 83 * Ⲇ, Ⲇ * ΔᐃⵠⲆᐃⵠᐃ, Ⲇ * 78, Ⲇ * 29);
		Δ.bezierCurveTo(Ⲇ * 72, Ⲇ * 59, Ⲇ * 87, 81 * Ⲇ, 89 * Ⲇ, 87 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠΔ], Δⵠ[2], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 90, Ⲇ * 86);
		Δ.bezierCurveTo(Ⲇ * 95, 74 * Ⲇ, Ⲇ * 95, 62 * Ⲇ, Ⲇ * 95, Ⲇ * 43);
		Δ.bezierCurveTo(Ⲇ * 84, 37 * Ⲇ, 86 * Ⲇ, 34 * Ⲇ, Ⲇ * 89, 16 * Ⲇ);
		Δ.bezierCurveTo(75 * Ⲇ, Ⲇ * 29, 80 * Ⲇ, Ⲇ * 58, 90 * Ⲇ, Ⲇ * 85);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃΔᐃΔ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(92 * Ⲇ, Ⲇ * 117);
		Δ.bezierCurveTo(98 * Ⲇ, 87 * Ⲇ, Ⲇ * 93, Ⲇ * 78, Ⲇ * 85, Ⲇ * 76);
		Δ.bezierCurveTo(Ⲇ * 85.5, 79.5 * Ⲇ, 85.5 * Ⲇ, 79.5 * Ⲇ, Ⲇ * 86, Ⲇ * 83);
		Δ.bezierCurveTo(Ⲇ * 84, Ⲇ * 85.5, 84 * Ⲇ, Ⲇ * 85.5, 82 * Ⲇ, Ⲇ * 88);
		Δ.bezierCurveTo(Ⲇ * 90, 93 * Ⲇ, Ⲇ * 89, Ⲇ * ⲆⵠΔΔΔ, Ⲇ * 92, 117 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⲆ], Δⵠ[3], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 92, Ⲇ * 175);
		Δ.bezierCurveTo(Ⲇ * 95, Ⲇ * 135, Ⲇ * 98, Ⲇ * 125, 109 * Ⲇ, Ⲇ * 121);
		Δ.bezierCurveTo(106 * Ⲇ, Ⲇ * 114, 104 * Ⲇ, 114 * Ⲇ, Ⲇ * 102, 113 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 103, Ⲇ * 106, 104 * Ⲇ, Ⲇ * 103, 107 * Ⲇ, 96 * Ⲇ);
		Δ.bezierCurveTo(74 * Ⲇ, Ⲇ * 108, 86 * Ⲇ, Ⲇ * 157, 92 * Ⲇ, Ⲇ * 174);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⲆ], Δⵠ[3], ΔΔΔⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 48, 169 * Ⲇ);
		Δ.bezierCurveTo(42 * Ⲇ, Ⲇ * 187, Ⲇ * 50, Ⲇ * 193, 59 * Ⲇ, 198 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[2], Ⲇ * ⵠⲆⲆⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(136 * Ⲇ, 171 * Ⲇ);
		Δ.bezierCurveTo(139 * Ⲇ, 186 * Ⲇ, Ⲇ * 138, 191 * Ⲇ, Ⲇ * 124, 199 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[2], Ⲇ * ΔᐃᐃΔ);
		ⵠΔᐃ(Δ, 63 * Ⲇ, 180 * Ⲇ, Ⲇ * 15.231546211727817);
		ⵠᐃ(Δ, Δⵠ[4]);
		ⵠΔᐃ(Δ, 121 * Ⲇ, Ⲇ * 181, 15.652475842498529 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[4]);
		ⵠΔᐃ(Δ, Ⲇ * 58, Ⲇ * 175, Ⲇ * 5.656854249492381);
		ⵠᐃ(Δ, Δⵠ[2]);
		ⵠΔᐃ(Δ, 116 * Ⲇ, Ⲇ * 175, Ⲇ * 5.656854249492381);
		ⵠᐃ(Δ, Δⵠ[2]);
		return ᐃⵠ
	}
	const ⲆⲆᐃΔᐃᐃⲆ = ᐃⵠΔⲆⵠⵠᐃ;

	function ΔⵠⲆᐃⵠⲆⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 185 * Ⲇ;
		ᐃⵠ.height = 240 * Ⲇ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 44, 137 * Ⲇ);
		Δ.bezierCurveTo(60 * Ⲇ, 87 * Ⲇ, Ⲇ * 68, Ⲇ * 66, 92 * Ⲇ, 67 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 115, 64 * Ⲇ, Ⲇ * 129, 97 * Ⲇ, Ⲇ * 137, Ⲇ * 136);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(53 * Ⲇ, 181 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 30, Ⲇ * 164, ΔⵠⵠᐃⵠΔΔ * Ⲇ, Ⲇ * 150, Ⲇ * ᐃΔΔᐃⲆᐃΔ, Ⲇ * 136);
		Δ.bezierCurveTo(Ⲇ * 28, Ⲇ * 121, Ⲇ * 38, 132 * Ⲇ, Ⲇ * 48, 150 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 63, 208 * Ⲇ);
		Δ.bezierCurveTo(75 * Ⲇ, 224 * Ⲇ, Ⲇ * 86, 228 * Ⲇ, Ⲇ * 93, Ⲇ * 228);
		Δ.bezierCurveTo(Ⲇ * 104, 229 * Ⲇ, Ⲇ * 116, 219 * Ⲇ, Ⲇ * 122, Ⲇ * 205);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(130 * Ⲇ, 170 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 146, Ⲇ * 125, 156 * Ⲇ, Ⲇ * 126, 173 * Ⲇ, 137 * Ⲇ);
		Δ.bezierCurveTo(167 * Ⲇ, Ⲇ * 151, 143 * Ⲇ, Ⲇ * 174, 131 * Ⲇ, 183 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 39, 140 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 75, 126 * Ⲇ, Ⲇ * 113, Ⲇ * 127, Ⲇ * 143, Ⲇ * 137);
		Δ.bezierCurveTo(141 * Ⲇ, 186 * Ⲇ, 130 * Ⲇ, 202 * Ⲇ, Ⲇ * 113, 214 * Ⲇ);
		Δ.bezierCurveTo(85 * Ⲇ, 228 * Ⲇ, Ⲇ * 56, 219 * Ⲇ, Ⲇ * 48, 173 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 40, Ⲇ * 148, Ⲇ * 43, Ⲇ * 145, 39 * Ⲇ, Ⲇ * 140);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 90, 95 * Ⲇ);
		Δ.bezierCurveTo(99 * Ⲇ, 82 * Ⲇ, 98 * Ⲇ, 58 * Ⲇ, 99 * Ⲇ, Ⲇ * 40);
		Δ.bezierCurveTo(90 * Ⲇ, Ⲇ * 38, 89 * Ⲇ, Ⲇ * 34, 92 * Ⲇ, Ⲇ * 17);
		Δ.bezierCurveTo(Ⲇ * 92, 5 * Ⲇ, 83 * Ⲇ, Ⲇ * 16, Ⲇ * 78, 29 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 72, 59 * Ⲇ, Ⲇ * 87, 81 * Ⲇ, Ⲇ * 89, 87 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 90, Ⲇ * 86);
		Δ.bezierCurveTo(95 * Ⲇ, 74 * Ⲇ, Ⲇ * 95, 62 * Ⲇ, 95 * Ⲇ, Ⲇ * 43);
		Δ.bezierCurveTo(84 * Ⲇ, Ⲇ * 37, Ⲇ * 86, 34 * Ⲇ, 89 * Ⲇ, 16 * Ⲇ);
		Δ.bezierCurveTo(75 * Ⲇ, 29 * Ⲇ, Ⲇ * 80, Ⲇ * 58, 90 * Ⲇ, 85 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 92, Ⲇ * 117);
		Δ.bezierCurveTo(98 * Ⲇ, 87 * Ⲇ, 93 * Ⲇ, 78 * Ⲇ, Ⲇ * 85, 76 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 85.5, 79.5 * Ⲇ, 85.5 * Ⲇ, 79.5 * Ⲇ, 86 * Ⲇ, 83 * Ⲇ);
		Δ.bezierCurveTo(84 * Ⲇ, 85.5 * Ⲇ, Ⲇ * 84, 85.5 * Ⲇ, Ⲇ * 82, Ⲇ * 88);
		Δ.bezierCurveTo(90 * Ⲇ, Ⲇ * 93, Ⲇ * 89, ΔᐃΔⲆᐃ * Ⲇ, 92 * Ⲇ, Ⲇ * 117);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 92, 175 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 95, 135 * Ⲇ, Ⲇ * 98, Ⲇ * 125, Ⲇ * 109, Ⲇ * 121);
		Δ.bezierCurveTo(106 * Ⲇ, 114 * Ⲇ, 104 * Ⲇ, Ⲇ * 114, Ⲇ * 102, 113 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 103, 106 * Ⲇ, Ⲇ * 104, 103 * Ⲇ, 107 * Ⲇ, 96 * Ⲇ);
		Δ.bezierCurveTo(74 * Ⲇ, Ⲇ * 108, 86 * Ⲇ, 157 * Ⲇ, 92 * Ⲇ, Ⲇ * 174);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
		return ᐃⵠ
	}

	function ᐃⲆⵠⵠⵠᐃΔ(Ⲇ, Δⵠ, ᐃᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 32;
		var ΔⵠⲆ = Ⲇ * 32;
		var Ⲇᐃ = ᐃΔΔ / 2;
		var ⲆⲆⲆ = ΔⵠⲆ / 2;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		var ⲆΔⲆᐃΔⵠᐃ = Ⲇ * 5;
		var ⲆΔⵠⵠⵠⲆΔ = 28 * Ⲇ;
		var ⵠⲆⲆⵠᐃⵠⵠ = ⲆΔⲆᐃΔⵠᐃ / 2;
		var ᐃᐃΔΔⵠⲆᐃ = ⲆΔⵠⵠⵠⲆΔ / 2;
		Δ.translate(Ⲇ * 0, Ⲇ * ⵠᐃΔ);
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ);
		if (ᐃᐃⲆ == 1) {
			ⵠΔᐃ(Δ, 0, 0, ⲆΔᐃⵠΔ * Ⲇ, 0);
			ⵠᐃ(Δ, Δⵠ[ⲆΔΔⲆ], Δⵠ[ᐃⲆⵠᐃ], 3 * Ⲇ);
			for (var ᐃⲆ = 0; ᐃⲆ < ΔⲆⵠΔⲆ; ᐃⲆ++) {
				ᐃΔⵠ(Δ, -ⵠⲆⲆⵠᐃⵠⵠ, -ᐃᐃΔΔⵠⲆᐃ, ⲆΔⲆᐃΔⵠᐃ, ⲆΔⵠⵠⵠⲆΔ, Ⲇ * ⵠⲆΔᐃ);
				Δ.rotate(Math.PI / ⵠⵠⵠᐃⲆ);
				ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ᐃᐃⵠⵠ], Ⲇ * ⵠⲆᐃⲆ)
			}
		}
		ⵠΔᐃ(Δ, ⵠᐃⲆⵠ, ⲆⲆᐃ, Ⲇ * ⵠΔΔᐃᐃ, ⵠᐃΔ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔ], Δⵠ[ᐃⵠᐃᐃ], Ⲇ * 1.5);
		for (var ᐃⲆ = ⲆⲆΔ; ᐃⲆ < ᐃᐃᐃᐃΔ; ᐃⲆ++) {
			ᐃΔⵠ(Δ, -ⵠⲆⲆⵠᐃⵠⵠ, -ᐃᐃΔΔⵠⲆᐃ, ⲆΔⲆᐃΔⵠᐃ, ⲆΔⵠⵠⵠⲆΔ, Ⲇ * 2);
			Δ.rotate(Math.PI / 4);
			ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], Ⲇ * 1.5)
		}
		ⵠΔᐃ(Δ, ᐃⲆΔᐃ, 0, Ⲇ * 10, Δⵠⵠ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ]);
		ⵠΔᐃ(Δ, ᐃⲆΔ, ⵠⵠⲆΔ, ᐃᐃΔⵠⲆ * Ⲇ, 0);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⲆ], Δⵠ[1], 1.5 * Ⲇ);
		Δ.globalCompositeOperation = ᐃ[500];
		ⵠΔᐃ(Δ, ⵠⵠⵠ, 0, 4 * Ⲇ, 0);
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃⵠⵠⵠ], 2 * Ⲇ);
		Δ.globalCompositeOperation = ᐃ[ΔᐃΔⵠᐃ];
		ⵠΔᐃ(Δ, 0, 0, ⵠΔᐃⲆ * Ⲇ, ⲆⲆΔ);
		ⵠᐃ(Δ, ⵠΔΔⲆΔ, Δⵠ[ⲆⲆⲆᐃ], ᐃᐃⲆⵠ * Ⲇ);
		return ᐃⵠ
	}

	function ΔΔΔΔⲆⲆⲆΔⵠ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 185;
		ᐃⵠ.height = Ⲇ * 240;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(58 * Ⲇ, Ⲇ * 205);
		Δ.bezierCurveTo(Ⲇ * 74, Ⲇ * 227, Ⲇ * 83, 230 * Ⲇ, 92 * Ⲇ, Ⲇ * 230);
		Δ.bezierCurveTo(Ⲇ * 101, 232 * Ⲇ, 119 * Ⲇ, 219 * Ⲇ, Ⲇ * 122, 205 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃᐃⵠⵠ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 46, Ⲇ * 151);
		Δ.bezierCurveTo(Ⲇ * 34, 126 * Ⲇ, Ⲇ * 21, Ⲇ * 130, ᐃᐃᐃⲆⵠ * Ⲇ, 139 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 27, Ⲇ * 168, 48 * Ⲇ, 180 * Ⲇ, Ⲇ * 53, Ⲇ * 184);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⲆ], Δⵠ[ⵠⵠΔⵠ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 122, Ⲇ * 165);
		Δ.bezierCurveTo(143 * Ⲇ, 140 * Ⲇ, Ⲇ * 154, Ⲇ * 123, Ⲇ * 172, Ⲇ * 139);
		Δ.bezierCurveTo(169 * Ⲇ, 149 * Ⲇ, Ⲇ * 147, Ⲇ * 173, 126 * Ⲇ, Ⲇ * 192);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ], Δⵠ[ⵠⵠᐃⲆ], ΔⲆΔⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(47 * Ⲇ, 129 * Ⲇ);
		Δ.bezierCurveTo(55 * Ⲇ, Ⲇ * 90, Ⲇ * 71, Ⲇ * 66, 93 * Ⲇ, 69 * Ⲇ);
		Δ.bezierCurveTo(116 * Ⲇ, 70 * Ⲇ, 122 * Ⲇ, Ⲇ * 88, Ⲇ * 136, 127 * Ⲇ);
		Δ.bezierCurveTo(143 * Ⲇ, Ⲇ * 137, 144 * Ⲇ, 137 * Ⲇ, 144 * Ⲇ, 142 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 138, 199 * Ⲇ, Ⲇ * 128, Ⲇ * 206, 108 * Ⲇ, Ⲇ * 219);
		Δ.bezierCurveTo(84 * Ⲇ, 228 * Ⲇ, Ⲇ * 65, 224 * Ⲇ, Ⲇ * 50, Ⲇ * 191);
		Δ.bezierCurveTo(41 * Ⲇ, Ⲇ * 161, Ⲇ * 41, Ⲇ * 157, Ⲇ * 39, Ⲇ * 144);
		Δ.bezierCurveTo(Ⲇ * 40, 140 * Ⲇ, 42 * Ⲇ, Ⲇ * 137, Ⲇ * 47, 129 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠ], Δⵠ[2], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(47 * Ⲇ, Ⲇ * 133);
		Δ.bezierCurveTo(65 * Ⲇ, 143 * Ⲇ, 74 * Ⲇ, 162 * Ⲇ, Ⲇ * 70, 186 * Ⲇ);
		Δ.bezierCurveTo(71 * Ⲇ, Ⲇ * 188.5, Ⲇ * 71, Ⲇ * 188.5, Ⲇ * 72, 191 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 81, Ⲇ * 185.5, 81 * Ⲇ, 185.5 * Ⲇ, Ⲇ * 90, 180 * Ⲇ);
		Δ.bezierCurveTo(99 * Ⲇ, Ⲇ * 185, 99 * Ⲇ, Ⲇ * 185, Ⲇ * 108, Ⲇ * 190);
		Δ.bezierCurveTo(110.5 * Ⲇ, Ⲇ * 184.5, 110.5 * Ⲇ, Ⲇ * 184.5, 113 * Ⲇ, Ⲇ * 179);
		Δ.bezierCurveTo(110 * Ⲇ, 156 * Ⲇ, Ⲇ * 121, 156 * Ⲇ, Ⲇ * 142, 141 * Ⲇ);
		Δ.bezierCurveTo(137.5 * Ⲇ, 133 * Ⲇ, Ⲇ * 137.5, Ⲇ * 133, Ⲇ * 133, Ⲇ * 125);
		Δ.bezierCurveTo(Ⲇ * 116, Ⲇ * 78, 112 * Ⲇ, Ⲇ * 70, Ⲇ * 91, 71 * Ⲇ);
		Δ.bezierCurveTo(62 * Ⲇ, 69 * Ⲇ, 59 * Ⲇ, Ⲇ * 107, 48 * Ⲇ, 132 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 93, Ⲇ * 86);
		Δ.bezierCurveTo(Ⲇ * 101, Ⲇ * 79, Ⲇ * 99, 56 * Ⲇ, ⵠΔᐃᐃⲆ * Ⲇ, Ⲇ * 37);
		Δ.bezierCurveTo(90 * Ⲇ, Ⲇ * 34, 90 * Ⲇ, 27 * Ⲇ, 93 * Ⲇ, Ⲇ * 13);
		Δ.bezierCurveTo(96 * Ⲇ, 0 * Ⲇ, Ⲇ * 85, 13 * Ⲇ, Ⲇ * 82, Ⲇ * 26);
		Δ.bezierCurveTo(Ⲇ * 78, Ⲇ * 43, 89 * Ⲇ, Ⲇ * 74, 93 * Ⲇ, Ⲇ * 85);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆⲆ], Δⵠ[ᐃᐃⲆⵠ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(94 * Ⲇ, Ⲇ * 86);
		Δ.bezierCurveTo(Ⲇ * 120, 88 * Ⲇ, 132 * Ⲇ, Ⲇ * 109, Ⲇ * 122, Ⲇ * 128);
		Δ.bezierCurveTo(118 * Ⲇ, 139 * Ⲇ, Ⲇ * 101, Ⲇ * 146, Ⲇ * 90, Ⲇ * 143);
		Δ.bezierCurveTo(Ⲇ * 57, Ⲇ * 141, 49 * Ⲇ, 109 * Ⲇ, 68 * Ⲇ, Ⲇ * 94);
		Δ.bezierCurveTo(Ⲇ * 78, 85 * Ⲇ, Ⲇ * 90, Ⲇ * 86, Ⲇ * 95, Ⲇ * 86);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⵠⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 91, Ⲇ * 178);
		Δ.bezierCurveTo(Ⲇ * 78, 136 * Ⲇ, Ⲇ * 81, 88 * Ⲇ, Ⲇ * 93, 87 * Ⲇ);
		Δ.bezierCurveTo(101 * Ⲇ, Ⲇ * 84, Ⲇ * 94, 97 * Ⲇ, 94 * Ⲇ, Ⲇ * 107);
		Δ.bezierCurveTo(91 * Ⲇ, 112 * Ⲇ, 92 * Ⲇ, 117 * Ⲇ, 94 * Ⲇ, 121 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 98, Ⲇ * 126, Ⲇ * 102, 128 * Ⲇ, Ⲇ * 97, 135 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 92, Ⲇ * 140, 93 * Ⲇ, 160 * Ⲇ, 91 * Ⲇ, 179 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[ΔᐃⵠⲆ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ⲆΔᐃΔⵠ, 151 * Ⲇ);
		Δ.bezierCurveTo(22 * Ⲇ, Ⲇ * 147, Ⲇ * 22, Ⲇ * 147, 24 * Ⲇ, Ⲇ * 143);
		Δ.bezierCurveTo(27 * Ⲇ, 144.5 * Ⲇ, 27 * Ⲇ, Ⲇ * 144.5, Ⲇ * 30, 146 * Ⲇ);
		Δ.bezierCurveTo(31 * Ⲇ, Ⲇ * 143, 31 * Ⲇ, Ⲇ * 143, 32 * Ⲇ, 140 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 35, Ⲇ * 140.5, Ⲇ * 35, Ⲇ * 140.5, Ⲇ * 38, Ⲇ * 141);
		Δ.bezierCurveTo(Ⲇ * 31, 132 * Ⲇ, Ⲇ * 29, 131 * Ⲇ, 22 * Ⲇ, 132 * Ⲇ);
		Δ.bezierCurveTo(14 * Ⲇ, 135 * Ⲇ, ᐃᐃΔΔΔ * Ⲇ, Ⲇ * 135, 11 * Ⲇ, Ⲇ * 138);
		Δ.bezierCurveTo(Ⲇ * 15.5, 144.5 * Ⲇ, Ⲇ * 15.5, Ⲇ * 144.5, 20 * Ⲇ, Ⲇ * 151);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6]);
		ⵠΔᐃ(Δ, Ⲇ * 61, Ⲇ * 183, Ⲇ * 16.15549442140351);
		ⵠᐃ(Δ, Δⵠ[7]);
		ⵠΔᐃ(Δ, Ⲇ * 121, 184 * Ⲇ, 14.866068747318506 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃᐃⲆ]);
		ⵠΔᐃ(Δ, Ⲇ * 57, Ⲇ * 178, Ⲇ * 5.656854249492381);
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔΔ]);
		ⵠΔᐃ(Δ, 116 * Ⲇ, Ⲇ * 177, Ⲇ * 5.830951894845301);
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(162 * Ⲇ, Ⲇ * 152);
		Δ.bezierCurveTo(Ⲇ * 161.5, 148 * Ⲇ, 161.5 * Ⲇ, 148 * Ⲇ, 161 * Ⲇ, Ⲇ * 144);
		Δ.bezierCurveTo(157.5 * Ⲇ, 145 * Ⲇ, 157.5 * Ⲇ, Ⲇ * 145, 154 * Ⲇ, 146 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 153.5, Ⲇ * 143, 153.5 * Ⲇ, Ⲇ * 143, 153 * Ⲇ, Ⲇ * 140);
		Δ.bezierCurveTo(Ⲇ * 149, 140.5 * Ⲇ, 149 * Ⲇ, 140.5 * Ⲇ, 145 * Ⲇ, Ⲇ * 141);
		Δ.bezierCurveTo(150 * Ⲇ, Ⲇ * 132, Ⲇ * 161, 131 * Ⲇ, Ⲇ * 170, Ⲇ * 138);
		Δ.bezierCurveTo(173 * Ⲇ, Ⲇ * 141, 165 * Ⲇ, 150 * Ⲇ, 162 * Ⲇ, 150 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 106, 110 * Ⲇ);
		Δ.bezierCurveTo(104 * Ⲇ, Ⲇ * 98, Ⲇ * 112, Ⲇ * 91, Ⲇ * 118, 101 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 122, 115 * Ⲇ, Ⲇ * 121, Ⲇ * 119, 117 * Ⲇ, Ⲇ * 124);
		Δ.bezierCurveTo(112 * Ⲇ, Ⲇ * 129, Ⲇ * 107, 124 * Ⲇ, Ⲇ * 106, 112 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(64 * Ⲇ, Ⲇ * 106);
		Δ.bezierCurveTo(66 * Ⲇ, Ⲇ * 97, 72 * Ⲇ, Ⲇ * 89, Ⲇ * 76, 98 * Ⲇ);
		Δ.bezierCurveTo(78 * Ⲇ, 106 * Ⲇ, 79 * Ⲇ, 118 * Ⲇ, 72 * Ⲇ, Ⲇ * 126);
		Δ.bezierCurveTo(65 * Ⲇ, 130 * Ⲇ, Ⲇ * 63, Ⲇ * 117, Ⲇ * 64, Ⲇ * 108);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⲆ]);
		return ᐃⵠ
	}

	function ᐃⵠᐃᐃⵠᐃⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 100 * Ⲇ;
		var ΔⵠⲆ = Ⲇ * ᐃᐃΔⵠⵠ;
		var Ⲇᐃ = ᐃΔΔ / 2;
		var ⲆⲆⲆ = ΔⵠⲆ / 2;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		var ⲆΔⲆᐃΔⵠᐃ = 5 * Ⲇ;
		var ⲆΔⵠⵠⵠⲆΔ = Ⲇ * 28;
		var ⵠⲆⲆⵠᐃⵠⵠ = ⲆΔⲆᐃΔⵠᐃ / ⵠᐃᐃⲆ;
		var ᐃᐃΔΔⵠⲆᐃ = ⲆΔⵠⵠⵠⲆΔ / ⲆΔⲆΔ;
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ);
		for (var ᐃⲆ = ⵠⵠⲆΔ; 4 > ᐃⲆ; ᐃⲆ++) {
			ᐃΔⵠ(Δ, -ⵠⲆⲆⵠᐃⵠⵠ, -ᐃᐃΔΔⵠⲆᐃ, ⲆΔⲆᐃΔⵠᐃ, ⲆΔⵠⵠⵠⲆΔ, Ⲇ * ⲆΔⲆΔ);
			Δ.rotate(Math.PI / 4);
			ⵠᐃ(Δ, Δⵠ)
		}
		Δ.arc(0, 0, Ⲇ * 10, 0, Math.PI * 2);
		ⵠᐃ(Δ, Δⵠ);
		Δ.globalCompositeOperation = ᐃ[500];
		ⵠΔᐃ(Δ, 0, ᐃⲆΔᐃ, ᐃΔⵠᐃⲆ * Ⲇ);
		Δ.fill();
		return ᐃⵠ
	}

	function ⵠᐃᐃΔⲆⵠΔΔᐃ(Ⲇ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 200;
		var ΔⵠⲆ = Ⲇ * 200;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		var ⵠⵠ = ᐃⲆⲆⲆΔ(.35, ⵠᐃΔΔᐃ, [ᐃ[396], "#0b8052", ᐃ[442]]);
		Δ.drawImage(ⵠⵠ, 10, 10);
		var ⵠⵠ = ⵠⲆⲆⵠᐃ(.9, Ⲇⵠᐃⵠᐃ, [ᐃ[32], ᐃ[191]]);
		Δ.drawImage(ⵠⵠ, 21, ⵠⲆᐃⲆⵠ);
		var ⵠⵠ = ⵠⲆⲆⵠᐃ(.9, false, [ᐃ[32], ᐃ[191]]);
		Δ.drawImage(ⵠⵠ, 38, 28);
		var ⵠⵠ = ⵠⲆⲆⵠᐃ(.9, false, [ᐃ[32], ᐃ[191]]);
		Δ.drawImage(ⵠⵠ, 15, 37);
		var ⵠⵠ = ⵠⲆⲆⵠᐃ(.9, ᐃⵠᐃΔⵠ, [ᐃ[32], ᐃ[191]]);
		Δ.drawImage(ⵠⵠ, 32, 45);
		return ᐃⵠ
	}
	const ⵠⲆᐃⵠ = ⲆΔΔⲆ;

	function ᐃⵠΔⵠᐃⲆⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 238 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 230;
		Δ.translate(-93 * Ⲇ, -110 * Ⲇ + ⲆⲆⲆᐃⵠ * Ⲇ);
		Δ.globalAlpha = .3;
		ⵠΔᐃ(Δ, Ⲇ * 213.5, Ⲇ * 256.75, 75 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆⵠᐃ]);
		ⵠΔᐃ(Δ, 213.5 * Ⲇ, Ⲇ * 175.75, 25 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[5]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 156.5, Ⲇ * 137.75);
		Δ.bezierCurveTo(Ⲇ * 170.5, 173.75 * Ⲇ, 195.5 * Ⲇ, 177.75 * Ⲇ, Ⲇ * 209.5, 177.75 * Ⲇ);
		Δ.lineWidth = ⵠΔⲆᐃⵠ * Ⲇ;
		Δ.strokeStyle = Δⵠ[ⵠⲆⲆⲆ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 217.5, Ⲇ * 178.75);
		Δ.bezierCurveTo(Ⲇ * 251.5, 177.75 * Ⲇ, Ⲇ * 263.5, 153.75 * Ⲇ, 270.5 * Ⲇ, Ⲇ * 140.75);
		Δ.lineWidth = Ⲇ * ᐃⲆΔᐃΔ;
		Δ.strokeStyle = Δⵠ[ΔΔⵠΔⵠ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 130.5, Ⲇ * 124.75);
		Δ.bezierCurveTo(Ⲇ * 153.5, 185.75 * Ⲇ, 198.5 * Ⲇ, 185.75 * Ⲇ, 213.5 * Ⲇ, Ⲇ * 185.75);
		Δ.lineWidth = Ⲇ * ΔᐃΔⵠΔᐃⲆ;
		Δ.strokeStyle = Δⵠ[ⵠᐃⲆᐃ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(214.5 * Ⲇ, 183.75 * Ⲇ);
		Δ.bezierCurveTo(265.5 * Ⲇ, 192.75 * Ⲇ, 293.5 * Ⲇ, 141.75 * Ⲇ, 297.5 * Ⲇ, Ⲇ * 124.75);
		Δ.lineWidth = 17 * Ⲇ;
		Δ.strokeStyle = Δⵠ[ⲆⵠⲆᐃ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 107.5, Ⲇ * 213.75);
		Δ.bezierCurveTo(Ⲇ * 151.5, Ⲇ * 190.75, 198.5 * Ⲇ, Ⲇ * 184.75, 210.5 * Ⲇ, Ⲇ * 184.75);
		Δ.lineWidth = Ⲇ * ᐃⲆΔᐃΔ;
		Δ.strokeStyle = Δⵠ[5];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 212.5, Ⲇ * 187.75);
		Δ.bezierCurveTo(258.5 * Ⲇ, 182.75 * Ⲇ, Ⲇ * 286.5, Ⲇ * 194.75, 314.5 * Ⲇ, 206.75 * Ⲇ);
		Δ.lineWidth = ᐃⲆᐃⵠΔ * Ⲇ;
		Δ.strokeStyle = Δⵠ[ⲆⵠⲆΔᐃ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 102.5, 258.75 * Ⲇ);
		Δ.bezierCurveTo(142.5 * Ⲇ, 200.75 * Ⲇ, 193.5 * Ⲇ, 194.75 * Ⲇ, 211.5 * Ⲇ, 185.75 * Ⲇ);
		Δ.lineWidth = Ⲇ * 17;
		Δ.strokeStyle = Δⵠ[ᐃᐃⲆⵠᐃ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(214.5 * Ⲇ, Ⲇ * 192.75);
		Δ.bezierCurveTo(Ⲇ * 276.5, Ⲇ * 194.75, 306.5 * Ⲇ, 233.75 * Ⲇ, 316.5 * Ⲇ, 246.75 * Ⲇ);
		Δ.lineWidth = ᐃⲆᐃⵠΔ * Ⲇ;
		Δ.strokeStyle = Δⵠ[5];
		Δ.stroke();
		Δ.translate(0, -5);
		Δ.globalAlpha = ΔᐃⵠⲆ;
		ⵠΔᐃ(Δ, 213.5 * Ⲇ, Ⲇ * 256.75, 75 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃΔΔΔ]);
		ⵠΔᐃ(Δ, Ⲇ * 213.5, Ⲇ * 175.75, 25 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 219.5, 158.75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 226.5, 159.75 * Ⲇ, 227.5 * Ⲇ, Ⲇ * 147.75, Ⲇ * 219.5, Ⲇ * 145.75);
		Δ.closePath();
		Δ.lineWidth = ᐃⲆᐃⲆⲆ * Ⲇ;
		Δ.strokeStyle = Δⵠ[ⵠⵠΔⲆ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 210.5, Ⲇ * 160.75);
		Δ.bezierCurveTo(Ⲇ * 203.5, Ⲇ * 159.75, Ⲇ * 199.5, Ⲇ * 146.75, Ⲇ * 210.5, Ⲇ * 145.75);
		Δ.closePath();
		Δ.lineWidth = Ⲇ * ⵠⵠⵠΔΔ;
		Δ.strokeStyle = Δⵠ[ⲆΔⲆⲆ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(219.5 * Ⲇ, 158.75 * Ⲇ);
		Δ.bezierCurveTo(226.5 * Ⲇ, 159.75 * Ⲇ, 227.5 * Ⲇ, 147.75 * Ⲇ, 219.5 * Ⲇ, Ⲇ * 145.75);
		Δ.closePath();
		Δ.fillStyle = Δⵠ[0];
		Δ.fill();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 210.5, 160.75 * Ⲇ);
		Δ.bezierCurveTo(203.5 * Ⲇ, Ⲇ * 159.75, Ⲇ * 199.5, 146.75 * Ⲇ, 210.5 * Ⲇ, 145.75 * Ⲇ);
		Δ.closePath();
		Δ.fillStyle = Δⵠ[0];
		Δ.fill();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(156.5 * Ⲇ, 137.75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 170.5, 173.75 * Ⲇ, Ⲇ * 195.5, 177.75 * Ⲇ, Ⲇ * 209.5, Ⲇ * 177.75);
		Δ.lineWidth = Ⲇ * ᐃⲆᐃⵠΔ;
		Δ.strokeStyle = Δⵠ[3];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 217.5, 178.75 * Ⲇ);
		Δ.bezierCurveTo(251.5 * Ⲇ, Ⲇ * 177.75, Ⲇ * 263.5, 153.75 * Ⲇ, Ⲇ * 270.5, Ⲇ * 140.75);
		Δ.lineWidth = ᐃⲆᐃⵠΔ * Ⲇ;
		Δ.strokeStyle = Δⵠ[3];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 130.5, Ⲇ * 124.75);
		Δ.bezierCurveTo(Ⲇ * 153.5, Ⲇ * 185.75, Ⲇ * 198.5, Ⲇ * 185.75, Ⲇ * 213.5, Ⲇ * 185.75);
		Δ.lineWidth = ᐃΔᐃᐃᐃⲆΔ * Ⲇ;
		Δ.strokeStyle = Δⵠ[ᐃᐃΔΔ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(214.5 * Ⲇ, Ⲇ * 183.75);
		Δ.bezierCurveTo(265.5 * Ⲇ, Ⲇ * 192.75, Ⲇ * 293.5, 141.75 * Ⲇ, 297.5 * Ⲇ, Ⲇ * 124.75);
		Δ.lineWidth = 17 * Ⲇ;
		Δ.strokeStyle = Δⵠ[3];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(107.5 * Ⲇ, Ⲇ * 213.75);
		Δ.bezierCurveTo(Ⲇ * 151.5, 190.75 * Ⲇ, Ⲇ * 198.5, 184.75 * Ⲇ, 210.5 * Ⲇ, 184.75 * Ⲇ);
		Δ.lineWidth = ⵠΔⵠⵠⵠ * Ⲇ;
		Δ.strokeStyle = Δⵠ[ⵠⲆᐃΔ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 212.5, Ⲇ * 187.75);
		Δ.bezierCurveTo(Ⲇ * 258.5, 182.75 * Ⲇ, Ⲇ * 286.5, Ⲇ * 194.75, Ⲇ * 314.5, Ⲇ * 206.75);
		Δ.lineWidth = ᐃⲆᐃⵠⲆΔΔ * Ⲇ;
		Δ.strokeStyle = Δⵠ[3];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(102.5 * Ⲇ, 258.75 * Ⲇ);
		Δ.bezierCurveTo(142.5 * Ⲇ, Ⲇ * 200.75, Ⲇ * 193.5, Ⲇ * 194.75, 211.5 * Ⲇ, 185.75 * Ⲇ);
		Δ.lineWidth = Ⲇ * ᐃΔᐃᐃᐃⲆΔ;
		Δ.strokeStyle = Δⵠ[ⵠᐃᐃⵠ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(214.5 * Ⲇ, Ⲇ * 192.75);
		Δ.bezierCurveTo(Ⲇ * 276.5, 194.75 * Ⲇ, 306.5 * Ⲇ, Ⲇ * 233.75, 316.5 * Ⲇ, 246.75 * Ⲇ);
		Δ.lineWidth = 17 * Ⲇ;
		Δ.strokeStyle = Δⵠ[ᐃΔᐃⲆ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 156.5, Ⲇ * 137.75);
		Δ.bezierCurveTo(170.5 * Ⲇ, Ⲇ * 173.75, 195.5 * Ⲇ, 177.75 * Ⲇ, 209.5 * Ⲇ, Ⲇ * 177.75);
		Δ.lineWidth = Ⲇ * 8;
		Δ.strokeStyle = Δⵠ[ⵠᐃⲆⵠ];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(217.5 * Ⲇ, Ⲇ * 178.75);
		Δ.bezierCurveTo(251.5 * Ⲇ, Ⲇ * 177.75, Ⲇ * 263.5, Ⲇ * 153.75, Ⲇ * 270.5, Ⲇ * 140.75);
		Δ.lineWidth = Ⲇ * ⲆⲆⲆᐃⲆ;
		Δ.strokeStyle = Δⵠ[0];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(130.5 * Ⲇ, 124.75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 153.5, 185.75 * Ⲇ, Ⲇ * 198.5, Ⲇ * 185.75, Ⲇ * 213.5, 185.75 * Ⲇ);
		Δ.lineWidth = Ⲇ * ᐃⵠΔⵠᐃ;
		Δ.strokeStyle = Δⵠ[0];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 214.5, 183.75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 265.5, 192.75 * Ⲇ, 293.5 * Ⲇ, 141.75 * Ⲇ, Ⲇ * 297.5, 124.75 * Ⲇ);
		Δ.lineWidth = 8 * Ⲇ;
		Δ.strokeStyle = Δⵠ[0];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 107.5, 213.75 * Ⲇ);
		Δ.bezierCurveTo(151.5 * Ⲇ, Ⲇ * 190.75, Ⲇ * 198.5, Ⲇ * 184.75, Ⲇ * 210.5, Ⲇ * 184.75);
		Δ.lineWidth = Ⲇ * 8;
		Δ.strokeStyle = Δⵠ[0];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(212.5 * Ⲇ, Ⲇ * 187.75);
		Δ.bezierCurveTo(Ⲇ * 258.5, Ⲇ * 182.75, 286.5 * Ⲇ, Ⲇ * 194.75, 314.5 * Ⲇ, 206.75 * Ⲇ);
		Δ.lineWidth = Ⲇ * ᐃᐃᐃⵠᐃ;
		Δ.strokeStyle = Δⵠ[0];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(102.5 * Ⲇ, Ⲇ * 258.75);
		Δ.bezierCurveTo(Ⲇ * 142.5, 200.75 * Ⲇ, Ⲇ * 193.5, Ⲇ * 194.75, 211.5 * Ⲇ, Ⲇ * 185.75);
		Δ.lineWidth = ⵠⵠᐃᐃⲆ * Ⲇ;
		Δ.strokeStyle = Δⵠ[0];
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(214.5 * Ⲇ, 192.75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 276.5, Ⲇ * 194.75, Ⲇ * 306.5, 233.75 * Ⲇ, 316.5 * Ⲇ, 246.75 * Ⲇ);
		Δ.lineWidth = 8 * Ⲇ;
		Δ.strokeStyle = Δⵠ[ⵠⵠⵠ];
		Δ.stroke();
		ⵠΔᐃ(Δ, Ⲇ * 213.5, 256.75 * Ⲇ, 70 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		ⵠΔᐃ(Δ, 213.5 * Ⲇ, 175.75 * Ⲇ, ⲆⲆⲆⲆᐃ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0]);
		ⵠΔᐃ(Δ, 222 * Ⲇ, 166 * Ⲇ, Ⲇ * 5);
		Δ.fillStyle = Δⵠ[2];
		Δ.fill();
		ⵠΔᐃ(Δ, Ⲇ * 205, Ⲇ * 166, 5 * Ⲇ);
		Δ.fillStyle = Δⵠ[ⵠⵠΔⵠ];
		Δ.fill();
		ⵠΔᐃ(Δ, Ⲇ * 206.2, 167 * Ⲇ, 2.5 * Ⲇ);
		Δ.fillStyle = Δⵠ[ᐃᐃᐃᐃΔ];
		Δ.fill();
		ⵠΔᐃ(Δ, Ⲇ * 223.2, Ⲇ * 167, 2.5 * Ⲇ);
		Δ.fillStyle = Δⵠ[4];
		Δ.fill();
		Δ.save();
		Δ.translate(Ⲇ * 213.5, Ⲇ * 293.75);
		Δ.rotate(.76);
		ᐃΔⵠ(Δ, -22 * Ⲇ, -21 * Ⲇ, Ⲇ * 44, 42 * Ⲇ, ⵠΔᐃᐃ * Ⲇ);
		Δ.restore();
		Δ.fillStyle = Δⵠ[1];
		Δ.fill();
		Δ.save();
		Δ.translate(Ⲇ * 212.5, Ⲇ * 258.25);
		Δ.rotate(.8);
		ᐃΔⵠ(Δ, -15 * Ⲇ, Ⲇ * -14.5, 30 * Ⲇ, Ⲇ * 29, 6 * Ⲇ);
		Δ.restore();
		Δ.fillStyle = Δⵠ[1];
		Δ.fill();
		return ᐃⵠ
	}

	function ᐃΔⵠΔⲆⲆⲆⲆᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 85;
		var ΔⵠⲆ = 115 * Ⲇ;
		var ᐃΔⵠᐃ = ⵠΔᐃᐃΔ * Ⲇ;
		var Δᐃⵠ = Ⲇ * ΔΔΔⵠ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(-130 * Ⲇ, -60 * Ⲇ);
		Δ.globalAlpha = ⵠⵠⵠⲆ;
		Δ.beginPath();
		Δ.bezierCurveTo(Ⲇ * 190, Ⲇ * 87, Ⲇ * 201, Ⲇ * 59, 208 * Ⲇ, Ⲇ * 64);
		Δ.bezierCurveTo(Ⲇ * 213, 68 * Ⲇ, Ⲇ * 204, Ⲇ * 93, 195 * Ⲇ, Ⲇ * 109);
		Δ.bezierCurveTo(Ⲇ * 195, Ⲇ * 109, Ⲇ * 202, 124 * Ⲇ, 191 * Ⲇ, 141 * Ⲇ);
		Δ.bezierCurveTo(182 * Ⲇ, 151 * Ⲇ, Ⲇ * 164, Ⲇ * 155, 148 * Ⲇ, 144 * Ⲇ);
		Δ.bezierCurveTo(136 * Ⲇ, 135 * Ⲇ, 138 * Ⲇ, Ⲇ * 111, 145 * Ⲇ, 104 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 140, 92 * Ⲇ, Ⲇ * 131, 67 * Ⲇ, 138 * Ⲇ, Ⲇ * 63);
		Δ.bezierCurveTo(Ⲇ * 145, 61 * Ⲇ, 153 * Ⲇ, 82 * Ⲇ, 155 * Ⲇ, Ⲇ * 96);
		Δ.bezierCurveTo(Ⲇ * 167, 91 * Ⲇ, Ⲇ * 178, 92 * Ⲇ, Ⲇ * 187, Ⲇ * 98);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ, Δⵠ, Δᐃⵠ);
		return ᐃⵠ
	}

	function ⵠⲆⵠⲆⵠΔⵠⵠⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 188;
		ᐃⵠ.height = 190 * Ⲇ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(33.00567626953125 * Ⲇ, 95.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 42.00567626953125, 87.44320678710938 * Ⲇ, 48.00567626953125 * Ⲇ, Ⲇ * 51.443206787109375, 74.00567626953125 * Ⲇ, Ⲇ * 47.443206787109375);
		Δ.bezierCurveTo(100.00567626953125 * Ⲇ, Ⲇ * 42.443206787109375, Ⲇ * 118.00567626953125, Ⲇ * 49.443206787109375, 131.00567626953125 * Ⲇ, Ⲇ * 55.443206787109375);
		Δ.bezierCurveTo(Ⲇ * 140.00567626953125, Ⲇ * 70.44320678710938, Ⲇ * 145.00567626953125, 87.44320678710938 * Ⲇ, 152.00567626953125 * Ⲇ, Ⲇ * 94.44320678710938);
		Δ.bezierCurveTo(149.00567626953125 * Ⲇ, Ⲇ * 99.44320678710938, Ⲇ * 147.00567626953125, Ⲇ * 98.44320678710938, Ⲇ * 141.00567626953125, 101.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 147.00567626953125, Ⲇ * 108.44320678710938, Ⲇ * 147.00567626953125, Ⲇ * 111.44320678710938, 147.00567626953125 * Ⲇ, 112.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 143.00567626953125, Ⲇ * 112.44320678710938, Ⲇ * 141.00567626953125, Ⲇ * 112.44320678710938, 137.00567626953125 * Ⲇ, Ⲇ * 111.44320678710938);
		Δ.bezierCurveTo(138.00567626953125 * Ⲇ, 117.44320678710938 * Ⲇ, Ⲇ * 138.00567626953125, 120.44320678710938 * Ⲇ, 138.00567626953125 * Ⲇ, Ⲇ * 124.44320678710938);
		Δ.bezierCurveTo(125.00567626953125 * Ⲇ, 107.44320678710938 * Ⲇ, 121.00567626953125 * Ⲇ, Ⲇ * 124.44320678710938, Ⲇ * 110.00567626953125, Ⲇ * 141.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 102.00567626953125, 158.44320678710938 * Ⲇ, 89.00567626953125 * Ⲇ, Ⲇ * 158.44320678710938, Ⲇ * 80.00567626953125, Ⲇ * 144.44320678710938);
		Δ.bezierCurveTo(61.00567626953125 * Ⲇ, 111.44320678710938 * Ⲇ, Ⲇ * 56.00567626953125, 117.44320678710938 * Ⲇ, 48.00567626953125 * Ⲇ, Ⲇ * 120.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 46.00567626953125, 118.44320678710938 * Ⲇ, 47.00567626953125 * Ⲇ, 112.44320678710938 * Ⲇ, 48.00567626953125 * Ⲇ, Ⲇ * 107.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 43.00567626953125, Ⲇ * 111.44320678710938, 40.00567626953125 * Ⲇ, Ⲇ * 111.44320678710938, 37.00567626953125 * Ⲇ, 110.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(39.50567626953125 * Ⲇ, 104.94320678710938 * Ⲇ, 39.50567626953125 * Ⲇ, 104.94320678710938 * Ⲇ, 42.00567626953125 * Ⲇ, 99.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 33.00567626953125, Ⲇ * 99.44320678710938, Ⲇ * 33.00567626953125, 98.44320678710938 * Ⲇ, Ⲇ * 33.00567626953125, 96.44320678710938 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃⲆΔ], ΔⵠⲆⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 51.00567626953125, 72.53409576416016 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 48.00567626953125, 56.534095764160156 * Ⲇ, Ⲇ * 48.00567626953125, Ⲇ * 49.534095764160156, 54.00567626953125 * Ⲇ, Ⲇ * 35.534095764160156);
		Δ.bezierCurveTo(Ⲇ * 58.00567626953125, 26.534095764160156 * Ⲇ, Ⲇ * 65.00567626953125, Ⲇ * 27.534095764160156, 73.00567626953125 * Ⲇ, 40.534095764160156 * Ⲇ);
		Δ.bezierCurveTo(81.00567626953125 * Ⲇ, 49.534095764160156 * Ⲇ, 82.00567626953125 * Ⲇ, Ⲇ * 50.534095764160156, 83.00567626953125 * Ⲇ, Ⲇ * 51.534095764160156);
		Δ.bezierCurveTo(77.00567626953125 * Ⲇ, 71.53409576416016 * Ⲇ, Ⲇ * 64.00567626953125, Ⲇ * 75.53409576416016, 51.00567626953125 * Ⲇ, 72.53409576416016 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ], Δⵠ[ΔᐃⲆⲆ], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(105.00567626953125 * Ⲇ, Ⲇ * 50.53410339355469);
		Δ.bezierCurveTo(112.00567626953125 * Ⲇ, 48.53410339355469 * Ⲇ, 125.00567626953125 * Ⲇ, Ⲇ * 21.534103393554688, 132.00567626953125 * Ⲇ, 33.53410339355469 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 138.00567626953125, 42.53410339355469 * Ⲇ, Ⲇ * 140.00567626953125, Ⲇ * 64.53410339355469, 136.00567626953125 * Ⲇ, 75.53410339355469 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], ⵠⵠᐃⲆ * Ⲇ);
		return ᐃⵠ
	}

	function ⵠᐃᐃᐃΔᐃᐃΔᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 400 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 400;
		Δ.save();
		Δ.translate(Ⲇ * 202.5, Ⲇ * 147.5);
		ᐃΔⵠ(Δ, -96.5 * Ⲇ, Ⲇ * -21.5, 193 * Ⲇ, 43 * Ⲇ, Ⲇⵠⵠᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⲆⲆᐃ], Ⲇ * 12);
		Δ.save();
		Δ.translate(202.5 * Ⲇ, 190.5 * Ⲇ);
		ᐃΔⵠ(Δ, 96.5 * Ⲇ, -21.5 * Ⲇ, Ⲇ * -193, Ⲇ * 43, Ⲇ * 0);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠᐃⵠ], Ⲇ * ⵠΔⵠΔⵠ);
		Δ.save();
		Δ.translate(Ⲇ * 202.5, Ⲇ * 233.5);
		ᐃΔⵠ(Δ, Ⲇ * -96.5, -20.5 * Ⲇ, 193 * Ⲇ, Ⲇ * 41, 0 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠᐃΔ], 12 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 202.5, 275 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * 96.5, -21 * Ⲇ, -193 * Ⲇ, Ⲇ * 42, Ⲇ * ᐃⲆᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠᐃⵠ], 12 * Ⲇ);
		Δ.save();
		Δ.translate(203.5 * Ⲇ, 121.5 * Ⲇ);
		ᐃΔⵠ(Δ, -115.5 * Ⲇ, Ⲇ * -20.5, Ⲇ * 231, 41 * Ⲇ, Ⲇ * ΔⵠΔᐃΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], 12 * Ⲇ);
		Δ.save();
		Δ.translate(203.5 * Ⲇ, Ⲇ * 299);
		ᐃΔⵠ(Δ, Ⲇ * -115.5, -20 * Ⲇ, Ⲇ * 231, 40 * Ⲇ, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⲆⲆ], Δⵠ[0], Ⲇ * ΔⲆⵠᐃⵠ);
		Δ.save();
		Δ.translate(Ⲇ * 298.5, Ⲇ * 210);
		ᐃΔⵠ(Δ, -20.5 * Ⲇ, -109 * Ⲇ, 41 * Ⲇ, Ⲇ * 218, Ⲇ * ΔΔⲆΔΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆΔ], Δⵠ[ⲆⲆᐃⲆ], 12 * Ⲇ);
		Δ.save();
		Δ.translate(108.5 * Ⲇ, 210 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -20.5, Ⲇ * -109, Ⲇ * 41, 218 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠᐃΔ], 12 * Ⲇ);
		return ᐃⵠ
	}

	function ᐃⵠᐃⲆⲆᐃⵠⵠⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 400 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 400;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(101 * Ⲇ, 255 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 113, Ⲇ * 243, Ⲇ * 179, Ⲇ * 210, 219 * Ⲇ, 196 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 252, 203 * Ⲇ, Ⲇ * 288, 215 * Ⲇ, Ⲇ * 318, Ⲇ * 233);
		Δ.bezierCurveTo(Ⲇ * 304, Ⲇ * 254, 258 * Ⲇ, 273 * Ⲇ, Ⲇ * 215, Ⲇ * 296);
		Δ.bezierCurveTo(161 * Ⲇ, 287 * Ⲇ, 119 * Ⲇ, Ⲇ * 270, Ⲇ * 102, Ⲇ * 257);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ], Δⵠ[1], 14 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 99, 258 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 99, 272.5 * Ⲇ, Ⲇ * 99, Ⲇ * 272.5, 99 * Ⲇ, 287 * Ⲇ);
		Δ.bezierCurveTo(166 * Ⲇ, Ⲇ * 319, Ⲇ * 193, 320 * Ⲇ, Ⲇ * 212, Ⲇ * 324);
		Δ.bezierCurveTo(Ⲇ * 292, Ⲇ * 286, 312 * Ⲇ, 271 * Ⲇ, Ⲇ * 319, Ⲇ * 263);
		Δ.bezierCurveTo(Ⲇ * 320, Ⲇ * 249, Ⲇ * 320, Ⲇ * 241, Ⲇ * 318, Ⲇ * 234);
		Δ.bezierCurveTo(300 * Ⲇ, 254 * Ⲇ, 254 * Ⲇ, Ⲇ * 277, 216 * Ⲇ, Ⲇ * 294);
		Δ.bezierCurveTo(Ⲇ * 190, Ⲇ * 296, Ⲇ * 135, 276 * Ⲇ, Ⲇ * 102, 258 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⵠⲆⲆ], Δⵠ[1], 14 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(212 * Ⲇ, Ⲇ * 323);
		Δ.bezierCurveTo(211.5 * Ⲇ, 310.5 * Ⲇ, 211.5 * Ⲇ, Ⲇ * 310.5, 211 * Ⲇ, Ⲇ * 298);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆⲆΔⲆ, Δⵠ[ᐃΔΔⲆ], 14 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(212 * Ⲇ, Ⲇ * 210);
		Δ.bezierCurveTo(Ⲇ * 286, 210 * Ⲇ, 331 * Ⲇ, 254 * Ⲇ, 212 * Ⲇ, Ⲇ * 276);
		Δ.bezierCurveTo(108 * Ⲇ, 276 * Ⲇ, 112 * Ⲇ, Ⲇ * 222, 213 * Ⲇ, 208 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⵠⲆ], Δⵠ[4], 14 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 98, 200 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 126, 216 * Ⲇ, Ⲇ * 177, 232 * Ⲇ, 213 * Ⲇ, 237 * Ⲇ);
		Δ.bezierCurveTo(266 * Ⲇ, Ⲇ * 218, Ⲇ * 288, Ⲇ * 209, Ⲇ * 318, 190 * Ⲇ);
		Δ.bezierCurveTo(269 * Ⲇ, Ⲇ * 164, Ⲇ * 239, Ⲇ * 158, 214 * Ⲇ, 153 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 148, 172 * Ⲇ, 131 * Ⲇ, 182 * Ⲇ, Ⲇ * 98, Ⲇ * 200);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆΔ], Δⵠ[ΔΔⵠ], Ⲇ * ⲆⵠⲆᐃᐃⵠⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(97 * Ⲇ, Ⲇ * 204);
		Δ.bezierCurveTo(97 * Ⲇ, 215.5 * Ⲇ, Ⲇ * 97, 215.5 * Ⲇ, Ⲇ * 97, Ⲇ * 227);
		Δ.bezierCurveTo(Ⲇ * 148, 250 * Ⲇ, 179 * Ⲇ, 256 * Ⲇ, Ⲇ * 212, 262 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 268, 244 * Ⲇ, 281 * Ⲇ, 233 * Ⲇ, 318 * Ⲇ, Ⲇ * 214);
		Δ.bezierCurveTo(Ⲇ * 318, 203 * Ⲇ, 318 * Ⲇ, Ⲇ * 203, 318 * Ⲇ, 192 * Ⲇ);
		Δ.bezierCurveTo(250 * Ⲇ, Ⲇ * 225, Ⲇ * 236, 231 * Ⲇ, Ⲇ * 214, 239 * Ⲇ);
		Δ.bezierCurveTo(158 * Ⲇ, Ⲇ * 228, Ⲇ * 126, Ⲇ * 215, Ⲇ * 99, 201 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⵠ], Δⵠ[1], Ⲇ * 14);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(212 * Ⲇ, 260 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 212, Ⲇ * 251.5, Ⲇ * 212, Ⲇ * 251.5, 212 * Ⲇ, Ⲇ * 243);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[1], 14 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 161, 201 * Ⲇ, Ⲇ * 13);
		ⵠᐃ(Δ, Δⵠ[5]);
		ⵠΔᐃ(Δ, 216 * Ⲇ, Ⲇ * 205, 8.06225774829855 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[5]);
		ⵠΔᐃ(Δ, Ⲇ * 216, 175 * Ⲇ, 6.708203932499369 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[5]);
		ⵠΔᐃ(Δ, Ⲇ * 271, 191 * Ⲇ, Ⲇ * 5.0990195135927845);
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⵠ]);
		ⵠΔᐃ(Δ, Ⲇ * 206, Ⲇ * 180, Ⲇ * 11.180339887498949);
		ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⵠ]);
		return ᐃⵠ
	}

	function ΔΔⲆⲆΔΔⲆ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 55;
		var ΔⵠⲆ = 55 * Ⲇ;
		var ᐃΔⵠᐃ = ΔᐃⵠΔⵠ * Ⲇ;
		var Δᐃⵠ = 4 * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(Ⲇ * -65, -55 * Ⲇ + ᐃΔⵠᐃ);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.moveTo(Ⲇ * 95, Ⲇ * 60);
		Δ.bezierCurveTo(Ⲇ * 107, Ⲇ * 62, Ⲇ * 110, Ⲇ * 73, 107 * Ⲇ, Ⲇ * 79);
		Δ.bezierCurveTo(104 * Ⲇ, 85 * Ⲇ, Ⲇ * 85, 93 * Ⲇ, Ⲇ * 81, 88 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 74, Ⲇ * 80, 85 * Ⲇ, Ⲇ * 60, 95 * Ⲇ, Ⲇ * 60);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠⲆⵠⲆ], 3);
		Δ.globalAlpha = ⲆⵠⲆ;
		Δ.beginPath();
		Δ.moveTo(91 * Ⲇ, 70 * Ⲇ);
		Δ.bezierCurveTo(91 * Ⲇ, Ⲇ * 75, 100 * Ⲇ, Ⲇ * 76, Ⲇ * ᐃΔⲆᐃⵠ, Ⲇ * 73);
		Δ.bezierCurveTo(100 * Ⲇ, Ⲇ * 69, Ⲇ * 89, Ⲇ * 65, 91 * Ⲇ, 70 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⵠ], Δⵠ[ⲆΔⲆᐃ], 3);
		return ᐃⵠ
	}

	function ΔΔⲆⲆⵠⵠΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 85 * Ⲇ;
		var ΔⵠⲆ = 115 * Ⲇ;
		var ᐃΔⵠᐃ = 6 * Ⲇ;
		var Δᐃⵠ = Ⲇ * 4;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(-130 * Ⲇ, Ⲇ * -60 + ᐃΔⵠᐃ);
		Δ.globalAlpha = .5;
		Δ.beginPath();
		Δ.bezierCurveTo(Ⲇ * 190, 87 * Ⲇ, 201 * Ⲇ, 59 * Ⲇ, 208 * Ⲇ, Ⲇ * 64);
		Δ.bezierCurveTo(213 * Ⲇ, 68 * Ⲇ, 204 * Ⲇ, Ⲇ * 93, 195 * Ⲇ, 109 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 195, 109 * Ⲇ, 202 * Ⲇ, Ⲇ * 124, 191 * Ⲇ, Ⲇ * 141);
		Δ.bezierCurveTo(Ⲇ * 182, 151 * Ⲇ, Ⲇ * 164, Ⲇ * 155, 148 * Ⲇ, 144 * Ⲇ);
		Δ.bezierCurveTo(136 * Ⲇ, 135 * Ⲇ, 138 * Ⲇ, 111 * Ⲇ, Ⲇ * 145, 104 * Ⲇ);
		Δ.bezierCurveTo(140 * Ⲇ, 92 * Ⲇ, Ⲇ * 131, 67 * Ⲇ, 138 * Ⲇ, Ⲇ * 63);
		Δ.bezierCurveTo(Ⲇ * 145, 61 * Ⲇ, Ⲇ * 153, 82 * Ⲇ, Ⲇ * 155, 96 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 167, 91 * Ⲇ, Ⲇ * 178, 92 * Ⲇ, Ⲇ * 187, Ⲇ * 98);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(Ⲇⵠⵠᐃ, -ᐃΔⵠᐃ);
		Δ.globalAlpha = ᐃΔⵠΔ;
		Δ.beginPath();
		Δ.bezierCurveTo(Ⲇ * 190, Ⲇ * 87, 201 * Ⲇ, 59 * Ⲇ, 208 * Ⲇ, Ⲇ * 64);
		Δ.bezierCurveTo(Ⲇ * 213, 68 * Ⲇ, Ⲇ * 204, Ⲇ * 93, Ⲇ * 195, Ⲇ * 109);
		Δ.bezierCurveTo(Ⲇ * 195, 109 * Ⲇ, 202 * Ⲇ, Ⲇ * 124, 191 * Ⲇ, Ⲇ * 141);
		Δ.bezierCurveTo(182 * Ⲇ, Ⲇ * 151, 164 * Ⲇ, 155 * Ⲇ, 148 * Ⲇ, 144 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 136, 135 * Ⲇ, 138 * Ⲇ, Ⲇ * 111, 145 * Ⲇ, 104 * Ⲇ);
		Δ.bezierCurveTo(140 * Ⲇ, Ⲇ * 92, Ⲇ * 131, Ⲇ * 67, 138 * Ⲇ, 63 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 145, 61 * Ⲇ, Ⲇ * 153, Ⲇ * 82, Ⲇ * 155, 96 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 167, Ⲇ * 91, Ⲇ * 178, Ⲇ * 92, 187 * Ⲇ, 98 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δⵠᐃ], Δⵠ[2], ᐃΔΔΔⲆ);
		var ⲆΔⵠᐃⲆΔᐃ = 155 * Ⲇ;
		var ΔⲆⲆⵠⲆΔⵠ = 133 * Ⲇ;
		var ⲆⲆᐃᐃΔⲆⲆ = Ⲇ * 10;
		var ⵠⵠᐃⲆᐃⲆⲆ = Ⲇ * ⲆⵠⵠⲆ;
		var ⲆΔᐃᐃᐃᐃΔ = ⲆΔⵠᐃⲆΔᐃ + -3 * Ⲇ;
		var ⵠΔΔΔᐃᐃⲆ = ΔⲆⲆⵠⲆΔⵠ + -5 * Ⲇ;
		Δ.save();
		Δ.translate(ⲆΔⵠᐃⲆΔᐃ, ΔⲆⲆⵠⲆΔⵠ);
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, 0, ⵠⵠⵠ, ⲆⲆᐃᐃΔⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃΔ]);
		Δ.restore();
		Δ.save();
		Δ.translate(ⲆΔᐃᐃᐃᐃΔ, ⵠΔΔΔᐃᐃⲆ);
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, 0, ⲆⲆᐃⲆ, ⵠⵠᐃⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[4]);
		Δ.restore();
		Δ.save();
		Δ.translate(ⲆΔⵠᐃⲆΔᐃ + 27 * Ⲇ, ΔⲆⲆⵠⲆΔⵠ);
		Δ.globalAlpha = ᐃⲆⲆ;
		ⵠΔᐃ(Δ, 0, ⵠᐃⲆⵠ, ⲆⲆᐃᐃΔⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.restore();
		Δ.save();
		Δ.translate(27 * Ⲇ + ⲆΔᐃᐃᐃᐃΔ, ⵠΔΔΔᐃᐃⲆ);
		Δ.globalAlpha = ᐃⲆⲆ;
		ⵠΔᐃ(Δ, ⲆⲆᐃⲆ, 0, ⵠⵠᐃⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[4]);
		return ᐃⵠ
	}

	function ⵠⵠᐃⲆΔⵠⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 125;
		var ΔⵠⲆ = Ⲇ * 95;
		var w2 = ᐃΔΔ / 2;
		var ΔⲆΔⵠⵠ = ΔⵠⲆ / 2;
		var ⲆᐃⲆⲆ = Ⲇ * 10;
		var ᐃΔⵠᐃ = 8 * Ⲇ;
		var ΔΔᐃᐃᐃⵠΔ = 112 * Ⲇ;
		var ᐃⲆᐃⵠΔΔⲆ = 82 * Ⲇ;
		var ⵠⵠⲆᐃⵠⵠⲆ = ΔΔᐃᐃᐃⵠΔ / 2;
		var ⵠⲆᐃⵠⲆΔΔ = ᐃⲆᐃⵠΔΔⲆ / 2;
		var Δᐃⵠ = 4 * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(w2 - 4 * Ⲇ, ΔⲆΔⵠⵠ + 4 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		ᐃΔⵠ(Δ, -ⵠⵠⲆᐃⵠⵠⲆ, -ⵠⲆᐃⵠⲆΔΔ, ΔΔᐃᐃᐃⵠΔ, ᐃⲆᐃⵠΔΔⲆ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ᐃⵠⵠⵠ;
		Δ.translate(ⵠΔⵠᐃ, -ᐃΔⵠᐃ);
		ᐃΔⵠ(Δ, -ⵠⵠⲆᐃⵠⵠⲆ, -ⵠⲆᐃⵠⲆΔΔ, ΔΔᐃᐃᐃⵠΔ, ᐃⲆᐃⵠΔΔⲆ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[2], Δᐃⵠ);
		var ᐃΔΔ = 55 * Ⲇ;
		var ΔⵠⲆ = 45 * Ⲇ;
		var ⲆᐃⲆⲆ = 5;
		Δ.translate(-40 * Ⲇ, Ⲇ * -30);
		ᐃΔⵠ(Δ, ᐃⲆΔ, ⵠΔΔⲆ, ᐃΔΔ, ΔⵠⲆ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⲆ]);
		var ⵠⵠ = ᐃⵠᐃᐃⵠᐃⵠ(Ⲇ * .7, Δⵠ[3]);
		Δ.drawImage(ⵠⵠ, Ⲇ * 45, -25 * Ⲇ);
		var ⵠⵠ = ᐃⵠᐃᐃⵠᐃⵠ(.7 * Ⲇ, Δⵠ[ⵠᐃᐃΔ]);
		Δ.drawImage(ⵠⵠ, Ⲇ * 45, Ⲇ * 15);
		var ⵠⵠ = ᐃⵠᐃᐃⵠᐃⵠ(1.2 * Ⲇ, Δⵠ[3]);
		Δ.drawImage(ⵠⵠ, 28 * Ⲇ, -30 * Ⲇ);
		var ᐃΔΔ = ⲆⲆⲆᐃΔΔΔ * Ⲇ;
		var ΔⵠⲆ = 70 * Ⲇ;
		var ⲆᐃⲆⲆ = 5 * Ⲇ;
		Δ.translate(Ⲇ * 78, -ΔΔⵠΔⵠ * Ⲇ);
		ᐃΔⵠ(Δ, 0, 0, ᐃΔΔ, ΔⵠⲆ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[4]);
		var ᐃΔΔ = ⵠᐃΔⲆⲆ * Ⲇ;
		var ΔⵠⲆ = Ⲇ * 50;
		var ⲆᐃⲆⲆ = ⵠᐃⵠⵠ * Ⲇ;
		Δ.translate(Ⲇ * -20, Ⲇ * 20);
		Δ.rotate(Math.PI / Δᐃᐃⵠ);
		Δ.globalAlpha = .6;
		ᐃΔⵠ(Δ, 0, ⵠⵠⲆΔ, ᐃΔΔ, ΔⵠⲆ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[5]);
		Δ.translate(-20 * Ⲇ, 29 * Ⲇ);
		Δ.rotate(Math.PI / 5);
		Δ.globalAlpha = .6;
		Δ.beginPath();
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ⵠⵠⲆΔ, 0);
		Δ.lineTo(0, Ⲇ * 30);
		Δ.lineTo(Ⲇ * 30, 30 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, null, Δⵠ[5], ᐃᐃΔⲆⵠ * Ⲇ);
		return ᐃⵠ
	}

	function ⲆⵠΔᐃᐃΔⲆᐃᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 238 * Ⲇ;
		ᐃⵠ.height = 230 * Ⲇ;
		Δ.translate(-93 * Ⲇ, Ⲇ * -110);
		ⵠΔᐃ(Δ, Ⲇ * 213.5, 256.75 * Ⲇ, Ⲇ * 75);
		ⵠᐃ(Δ, Δⵠ);
		ⵠΔᐃ(Δ, 213.5 * Ⲇ, Ⲇ * 175.75, Ⲇ * 25);
		ⵠᐃ(Δ, Δⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 156.5, Ⲇ * 137.75);
		Δ.bezierCurveTo(Ⲇ * 170.5, 173.75 * Ⲇ, Ⲇ * 195.5, Ⲇ * 177.75, 209.5 * Ⲇ, Ⲇ * 177.75);
		Δ.lineWidth = 17 * Ⲇ;
		Δ.strokeStyle = Δⵠ;
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 217.5, 178.75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 251.5, Ⲇ * 177.75, 263.5 * Ⲇ, Ⲇ * 153.75, 270.5 * Ⲇ, Ⲇ * 140.75);
		Δ.lineWidth = Ⲇ * ⲆⵠᐃⲆⵠ;
		Δ.strokeStyle = Δⵠ;
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 130.5, Ⲇ * 124.75);
		Δ.bezierCurveTo(153.5 * Ⲇ, 185.75 * Ⲇ, Ⲇ * 198.5, 185.75 * Ⲇ, Ⲇ * 213.5, 185.75 * Ⲇ);
		Δ.lineWidth = ᐃⲆᐃⵠⲆΔΔ * Ⲇ;
		Δ.strokeStyle = Δⵠ;
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(214.5 * Ⲇ, 183.75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 265.5, Ⲇ * 192.75, Ⲇ * 293.5, Ⲇ * 141.75, Ⲇ * 297.5, 124.75 * Ⲇ);
		Δ.lineWidth = 17 * Ⲇ;
		Δ.strokeStyle = Δⵠ;
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 107.5, Ⲇ * 213.75);
		Δ.bezierCurveTo(151.5 * Ⲇ, 190.75 * Ⲇ, Ⲇ * 198.5, Ⲇ * 184.75, 210.5 * Ⲇ, Ⲇ * 184.75);
		Δ.lineWidth = Ⲇ * 17;
		Δ.strokeStyle = Δⵠ;
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(212.5 * Ⲇ, 187.75 * Ⲇ);
		Δ.bezierCurveTo(258.5 * Ⲇ, 182.75 * Ⲇ, 286.5 * Ⲇ, 194.75 * Ⲇ, 314.5 * Ⲇ, 206.75 * Ⲇ);
		Δ.lineWidth = 17 * Ⲇ;
		Δ.strokeStyle = Δⵠ;
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 102.5, 258.75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 142.5, 200.75 * Ⲇ, 193.5 * Ⲇ, 194.75 * Ⲇ, Ⲇ * 211.5, Ⲇ * 185.75);
		Δ.lineWidth = ᐃᐃⵠⲆΔⲆᐃ * Ⲇ;
		Δ.strokeStyle = Δⵠ;
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(214.5 * Ⲇ, 192.75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 276.5, Ⲇ * 194.75, 306.5 * Ⲇ, Ⲇ * 233.75, 316.5 * Ⲇ, 246.75 * Ⲇ);
		Δ.lineWidth = Ⲇ * 17;
		Δ.strokeStyle = Δⵠ;
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(219.5 * Ⲇ, 158.75 * Ⲇ);
		Δ.bezierCurveTo(226.5 * Ⲇ, 159.75 * Ⲇ, Ⲇ * 227.5, 147.75 * Ⲇ, Ⲇ * 219.5, 145.75 * Ⲇ);
		Δ.closePath();
		Δ.lineWidth = Ⲇ * ⵠΔⲆⲆΔ;
		Δ.strokeStyle = Δⵠ;
		Δ.stroke();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(210.5 * Ⲇ, 160.75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 203.5, 159.75 * Ⲇ, Ⲇ * 199.5, 146.75 * Ⲇ, Ⲇ * 210.5, 145.75 * Ⲇ);
		Δ.closePath();
		Δ.lineWidth = 10 * Ⲇ;
		Δ.strokeStyle = Δⵠ;
		Δ.stroke();
		return ᐃⵠ
	}

	function ᐃᐃΔΔΔᐃⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 188 * Ⲇ;
		ᐃⵠ.height = 190 * Ⲇ;
		Δ.globalAlpha = .5;
		Δ.translate(ⵠᐃⵠ, ΔⲆⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(33.00567626953125 * Ⲇ, 95.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 42.00567626953125, Ⲇ * 87.44320678710938, 48.00567626953125 * Ⲇ, Ⲇ * 51.443206787109375, Ⲇ * 74.00567626953125, 47.443206787109375 * Ⲇ);
		Δ.bezierCurveTo(100.00567626953125 * Ⲇ, 42.443206787109375 * Ⲇ, Ⲇ * 118.00567626953125, 49.443206787109375 * Ⲇ, 131.00567626953125 * Ⲇ, Ⲇ * 55.443206787109375);
		Δ.bezierCurveTo(Ⲇ * 140.00567626953125, 70.44320678710938 * Ⲇ, 145.00567626953125 * Ⲇ, 87.44320678710938 * Ⲇ, 152.00567626953125 * Ⲇ, Ⲇ * 94.44320678710938);
		Δ.bezierCurveTo(149.00567626953125 * Ⲇ, 99.44320678710938 * Ⲇ, Ⲇ * 147.00567626953125, Ⲇ * 98.44320678710938, Ⲇ * 141.00567626953125, Ⲇ * 101.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 147.00567626953125, Ⲇ * 108.44320678710938, Ⲇ * 147.00567626953125, 111.44320678710938 * Ⲇ, Ⲇ * 147.00567626953125, 112.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 143.00567626953125, 112.44320678710938 * Ⲇ, 141.00567626953125 * Ⲇ, Ⲇ * 112.44320678710938, 137.00567626953125 * Ⲇ, Ⲇ * 111.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 138.00567626953125, 117.44320678710938 * Ⲇ, 138.00567626953125 * Ⲇ, Ⲇ * 120.44320678710938, Ⲇ * 138.00567626953125, 124.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(125.00567626953125 * Ⲇ, Ⲇ * 107.44320678710938, 121.00567626953125 * Ⲇ, Ⲇ * 124.44320678710938, 110.00567626953125 * Ⲇ, Ⲇ * 141.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 102.00567626953125, Ⲇ * 158.44320678710938, Ⲇ * 89.00567626953125, 158.44320678710938 * Ⲇ, 80.00567626953125 * Ⲇ, Ⲇ * 144.44320678710938);
		Δ.bezierCurveTo(61.00567626953125 * Ⲇ, Ⲇ * 111.44320678710938, 56.00567626953125 * Ⲇ, Ⲇ * 117.44320678710938, Ⲇ * 48.00567626953125, Ⲇ * 120.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 46.00567626953125, Ⲇ * 118.44320678710938, Ⲇ * 47.00567626953125, Ⲇ * 112.44320678710938, 48.00567626953125 * Ⲇ, Ⲇ * 107.44320678710938);
		Δ.bezierCurveTo(43.00567626953125 * Ⲇ, Ⲇ * 111.44320678710938, 40.00567626953125 * Ⲇ, Ⲇ * 111.44320678710938, 37.00567626953125 * Ⲇ, 110.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 39.50567626953125, Ⲇ * 104.94320678710938, Ⲇ * 39.50567626953125, 104.94320678710938 * Ⲇ, 42.00567626953125 * Ⲇ, 99.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(33.00567626953125 * Ⲇ, Ⲇ * 99.44320678710938, Ⲇ * 33.00567626953125, 98.44320678710938 * Ⲇ, 33.00567626953125 * Ⲇ, 96.44320678710938 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 60.00567626953125, Ⲇ * 99.35227966308594);
		Δ.bezierCurveTo(70.00567626953125 * Ⲇ, 82.35227966308594 * Ⲇ, Ⲇ * 85.00567626953125, 86.35227966308594 * Ⲇ, 87.00567626953125 * Ⲇ, Ⲇ * 97.35227966308594);
		Δ.bezierCurveTo(89.00567626953125 * Ⲇ, 101.35227966308594 * Ⲇ, Ⲇ * 88.00567626953125, 105.35227966308594 * Ⲇ, 87.00567626953125 * Ⲇ, 110.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 89.00567626953125, 111.35227966308594 * Ⲇ, 91.00567626953125 * Ⲇ, Ⲇ * 112.35227966308594, Ⲇ * 93.00567626953125, 115.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 96.00567626953125, 111.35227966308594 * Ⲇ, Ⲇ * 99.00567626953125, 111.35227966308594 * Ⲇ, 100.00567626953125 * Ⲇ, 110.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 98.00567626953125, Ⲇ * 92.35227966308594, 103.00567626953125 * Ⲇ, 86.35227966308594 * Ⲇ, Ⲇ * 113.00567626953125, 89.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(122.00567626953125 * Ⲇ, 92.35227966308594 * Ⲇ, Ⲇ * 123.00567626953125, 94.35227966308594 * Ⲇ, 126.00567626953125 * Ⲇ, Ⲇ * 98.35227966308594);
		Δ.bezierCurveTo(Ⲇ * 124.00567626953125, Ⲇ * 102.35227966308594, 123.00567626953125 * Ⲇ, 103.35227966308594 * Ⲇ, Ⲇ * 121.00567626953125, Ⲇ * 104.35227966308594);
		Δ.bezierCurveTo(124.00567626953125 * Ⲇ, 105.35227966308594 * Ⲇ, 126.00567626953125 * Ⲇ, 107.35227966308594 * Ⲇ, 129.00567626953125 * Ⲇ, 111.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 115.00567626953125, Ⲇ * 122.35227966308594, 113.00567626953125 * Ⲇ, Ⲇ * 145.35227966308594, 100.00567626953125 * Ⲇ, 152.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 91.00567626953125, Ⲇ * 158.35227966308594, Ⲇ * 83.00567626953125, 149.35227966308594 * Ⲇ, Ⲇ * 76.00567626953125, 138.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(67.00567626953125 * Ⲇ, Ⲇ * 114.35227966308594, 63.00567626953125 * Ⲇ, Ⲇ * 113.35227966308594, Ⲇ * 59.00567626953125, 111.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(62.00567626953125 * Ⲇ, Ⲇ * 107.35227966308594, 64.00567626953125 * Ⲇ, Ⲇ * 105.35227966308594, Ⲇ * 66.00567626953125, 104.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(63.00567626953125 * Ⲇ, 100.35227966308594 * Ⲇ, 62.00567626953125 * Ⲇ, 100.35227966308594 * Ⲇ, 60.00567626953125 * Ⲇ, 99.35227966308594 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ], Δⵠ[0], Ⲇ * Ⲇᐃⵠⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 51.00567626953125, Ⲇ * 72.53409576416016);
		Δ.bezierCurveTo(Ⲇ * 48.00567626953125, Ⲇ * 56.534095764160156, Ⲇ * 48.00567626953125, 49.534095764160156 * Ⲇ, 54.00567626953125 * Ⲇ, Ⲇ * 35.534095764160156);
		Δ.bezierCurveTo(Ⲇ * 58.00567626953125, 26.534095764160156 * Ⲇ, 65.00567626953125 * Ⲇ, 27.534095764160156 * Ⲇ, 73.00567626953125 * Ⲇ, 40.534095764160156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 81.00567626953125, Ⲇ * 49.534095764160156, Ⲇ * 82.00567626953125, 50.534095764160156 * Ⲇ, Ⲇ * 83.00567626953125, Ⲇ * 51.534095764160156);
		Δ.bezierCurveTo(Ⲇ * 77.00567626953125, 71.53409576416016 * Ⲇ, Ⲇ * 64.00567626953125, Ⲇ * 75.53409576416016, 51.00567626953125 * Ⲇ, Ⲇ * 72.53409576416016);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ], Δⵠ[0], Ⲇ * ΔⲆⵠΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(105.00567626953125 * Ⲇ, Ⲇ * 50.53410339355469);
		Δ.bezierCurveTo(Ⲇ * 112.00567626953125, Ⲇ * 48.53410339355469, Ⲇ * 125.00567626953125, 21.534103393554688 * Ⲇ, Ⲇ * 132.00567626953125, Ⲇ * 33.53410339355469);
		Δ.bezierCurveTo(Ⲇ * 138.00567626953125, 42.53410339355469 * Ⲇ, Ⲇ * 140.00567626953125, Ⲇ * 64.53410339355469, Ⲇ * 136.00567626953125, Ⲇ * 75.53410339355469);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], Ⲇ * ⵠΔΔΔ);
		Δ.globalAlpha = ⲆⲆⲆᐃ;
		Δ.translate(ⵠΔΔⲆ, -5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(33.00567626953125 * Ⲇ, 95.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 42.00567626953125, 87.44320678710938 * Ⲇ, 48.00567626953125 * Ⲇ, Ⲇ * 51.443206787109375, Ⲇ * 74.00567626953125, 47.443206787109375 * Ⲇ);
		Δ.bezierCurveTo(100.00567626953125 * Ⲇ, Ⲇ * 42.443206787109375, 118.00567626953125 * Ⲇ, 49.443206787109375 * Ⲇ, Ⲇ * 131.00567626953125, Ⲇ * 55.443206787109375);
		Δ.bezierCurveTo(140.00567626953125 * Ⲇ, Ⲇ * 70.44320678710938, 145.00567626953125 * Ⲇ, Ⲇ * 87.44320678710938, Ⲇ * 152.00567626953125, Ⲇ * 94.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 149.00567626953125, Ⲇ * 99.44320678710938, Ⲇ * 147.00567626953125, 98.44320678710938 * Ⲇ, 141.00567626953125 * Ⲇ, Ⲇ * 101.44320678710938);
		Δ.bezierCurveTo(147.00567626953125 * Ⲇ, 108.44320678710938 * Ⲇ, Ⲇ * 147.00567626953125, Ⲇ * 111.44320678710938, 147.00567626953125 * Ⲇ, Ⲇ * 112.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 143.00567626953125, Ⲇ * 112.44320678710938, 141.00567626953125 * Ⲇ, Ⲇ * 112.44320678710938, 137.00567626953125 * Ⲇ, Ⲇ * 111.44320678710938);
		Δ.bezierCurveTo(138.00567626953125 * Ⲇ, Ⲇ * 117.44320678710938, Ⲇ * 138.00567626953125, 120.44320678710938 * Ⲇ, Ⲇ * 138.00567626953125, Ⲇ * 124.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 125.00567626953125, 107.44320678710938 * Ⲇ, 121.00567626953125 * Ⲇ, Ⲇ * 124.44320678710938, 110.00567626953125 * Ⲇ, Ⲇ * 141.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 102.00567626953125, 158.44320678710938 * Ⲇ, Ⲇ * 89.00567626953125, 158.44320678710938 * Ⲇ, 80.00567626953125 * Ⲇ, 144.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 61.00567626953125, Ⲇ * 111.44320678710938, 56.00567626953125 * Ⲇ, 117.44320678710938 * Ⲇ, 48.00567626953125 * Ⲇ, 120.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 46.00567626953125, Ⲇ * 118.44320678710938, 47.00567626953125 * Ⲇ, Ⲇ * 112.44320678710938, 48.00567626953125 * Ⲇ, 107.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(43.00567626953125 * Ⲇ, 111.44320678710938 * Ⲇ, Ⲇ * 40.00567626953125, 111.44320678710938 * Ⲇ, Ⲇ * 37.00567626953125, Ⲇ * 110.44320678710938);
		Δ.bezierCurveTo(39.50567626953125 * Ⲇ, 104.94320678710938 * Ⲇ, 39.50567626953125 * Ⲇ, Ⲇ * 104.94320678710938, 42.00567626953125 * Ⲇ, Ⲇ * 99.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 33.00567626953125, 99.44320678710938 * Ⲇ, 33.00567626953125 * Ⲇ, Ⲇ * 98.44320678710938, Ⲇ * 33.00567626953125, 96.44320678710938 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * 3);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 60.00567626953125, Ⲇ * 99.35227966308594);
		Δ.bezierCurveTo(70.00567626953125 * Ⲇ, Ⲇ * 82.35227966308594, 85.00567626953125 * Ⲇ, Ⲇ * 86.35227966308594, Ⲇ * 87.00567626953125, 97.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(89.00567626953125 * Ⲇ, 101.35227966308594 * Ⲇ, 88.00567626953125 * Ⲇ, 105.35227966308594 * Ⲇ, Ⲇ * 87.00567626953125, 110.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 89.00567626953125, 111.35227966308594 * Ⲇ, Ⲇ * 91.00567626953125, 112.35227966308594 * Ⲇ, 93.00567626953125 * Ⲇ, 115.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(96.00567626953125 * Ⲇ, 111.35227966308594 * Ⲇ, Ⲇ * 99.00567626953125, 111.35227966308594 * Ⲇ, Ⲇ * 100.00567626953125, 110.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(98.00567626953125 * Ⲇ, Ⲇ * 92.35227966308594, Ⲇ * 103.00567626953125, 86.35227966308594 * Ⲇ, 113.00567626953125 * Ⲇ, 89.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(122.00567626953125 * Ⲇ, 92.35227966308594 * Ⲇ, Ⲇ * 123.00567626953125, 94.35227966308594 * Ⲇ, Ⲇ * 126.00567626953125, 98.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(124.00567626953125 * Ⲇ, 102.35227966308594 * Ⲇ, 123.00567626953125 * Ⲇ, 103.35227966308594 * Ⲇ, Ⲇ * 121.00567626953125, Ⲇ * 104.35227966308594);
		Δ.bezierCurveTo(Ⲇ * 124.00567626953125, Ⲇ * 105.35227966308594, 126.00567626953125 * Ⲇ, 107.35227966308594 * Ⲇ, Ⲇ * 129.00567626953125, 111.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(115.00567626953125 * Ⲇ, 122.35227966308594 * Ⲇ, 113.00567626953125 * Ⲇ, Ⲇ * 145.35227966308594, 100.00567626953125 * Ⲇ, Ⲇ * 152.35227966308594);
		Δ.bezierCurveTo(91.00567626953125 * Ⲇ, 158.35227966308594 * Ⲇ, 83.00567626953125 * Ⲇ, 149.35227966308594 * Ⲇ, 76.00567626953125 * Ⲇ, 138.35227966308594 * Ⲇ);
		Δ.bezierCurveTo(67.00567626953125 * Ⲇ, Ⲇ * 114.35227966308594, Ⲇ * 63.00567626953125, 113.35227966308594 * Ⲇ, Ⲇ * 59.00567626953125, Ⲇ * 111.35227966308594);
		Δ.bezierCurveTo(62.00567626953125 * Ⲇ, Ⲇ * 107.35227966308594, 64.00567626953125 * Ⲇ, Ⲇ * 105.35227966308594, 66.00567626953125 * Ⲇ, Ⲇ * 104.35227966308594);
		Δ.bezierCurveTo(Ⲇ * 63.00567626953125, 100.35227966308594 * Ⲇ, 62.00567626953125 * Ⲇ, Ⲇ * 100.35227966308594, Ⲇ * 60.00567626953125, Ⲇ * 99.35227966308594);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 33.00567626953125, Ⲇ * 95.44320678710938);
		Δ.bezierCurveTo(Ⲇ * 42.00567626953125, Ⲇ * 87.44320678710938, 48.00567626953125 * Ⲇ, Ⲇ * 51.443206787109375, 74.00567626953125 * Ⲇ, Ⲇ * 47.443206787109375);
		Δ.bezierCurveTo(Ⲇ * 100.00567626953125, 42.443206787109375 * Ⲇ, Ⲇ * 118.00567626953125, Ⲇ * 49.443206787109375, Ⲇ * 131.00567626953125, Ⲇ * 55.443206787109375);
		Δ.bezierCurveTo(Ⲇ * 140.00567626953125, 70.44320678710938 * Ⲇ, 145.00567626953125 * Ⲇ, Ⲇ * 87.44320678710938, Ⲇ * 152.00567626953125, 94.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(149.00567626953125 * Ⲇ, Ⲇ * 99.44320678710938, Ⲇ * 147.00567626953125, Ⲇ * 98.44320678710938, Ⲇ * 141.00567626953125, 101.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(147.00567626953125 * Ⲇ, Ⲇ * 108.44320678710938, Ⲇ * 147.00567626953125, 111.44320678710938 * Ⲇ, Ⲇ * 147.00567626953125, 112.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(143.00567626953125 * Ⲇ, 112.44320678710938 * Ⲇ, Ⲇ * 141.00567626953125, Ⲇ * 112.44320678710938, Ⲇ * 137.00567626953125, 111.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 138.00567626953125, Ⲇ * 117.44320678710938, 138.00567626953125 * Ⲇ, 120.44320678710938 * Ⲇ, 138.00567626953125 * Ⲇ, Ⲇ * 124.44320678710938);
		Δ.bezierCurveTo(125.00567626953125 * Ⲇ, Ⲇ * 107.44320678710938, Ⲇ * 121.00567626953125, 124.44320678710938 * Ⲇ, 110.00567626953125 * Ⲇ, 141.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(102.00567626953125 * Ⲇ, Ⲇ * 158.44320678710938, Ⲇ * 89.00567626953125, Ⲇ * 158.44320678710938, Ⲇ * 80.00567626953125, 144.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(61.00567626953125 * Ⲇ, 111.44320678710938 * Ⲇ, Ⲇ * 56.00567626953125, 117.44320678710938 * Ⲇ, Ⲇ * 48.00567626953125, 120.44320678710938 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 46.00567626953125, 118.44320678710938 * Ⲇ, Ⲇ * 47.00567626953125, Ⲇ * 112.44320678710938, 48.00567626953125 * Ⲇ, Ⲇ * 107.44320678710938);
		Δ.bezierCurveTo(43.00567626953125 * Ⲇ, Ⲇ * 111.44320678710938, 40.00567626953125 * Ⲇ, 111.44320678710938 * Ⲇ, Ⲇ * 37.00567626953125, Ⲇ * 110.44320678710938);
		Δ.bezierCurveTo(39.50567626953125 * Ⲇ, Ⲇ * 104.94320678710938, 39.50567626953125 * Ⲇ, 104.94320678710938 * Ⲇ, 42.00567626953125 * Ⲇ, Ⲇ * 99.44320678710938);
		Δ.bezierCurveTo(33.00567626953125 * Ⲇ, 99.44320678710938 * Ⲇ, 33.00567626953125 * Ⲇ, 98.44320678710938 * Ⲇ, 33.00567626953125 * Ⲇ, Ⲇ * 96.44320678710938);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⲆΔΔⲆ], Ⲇ * 3);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(51.00567626953125 * Ⲇ, 72.53409576416016 * Ⲇ);
		Δ.bezierCurveTo(48.00567626953125 * Ⲇ, Ⲇ * 56.534095764160156, Ⲇ * 48.00567626953125, 49.534095764160156 * Ⲇ, Ⲇ * 54.00567626953125, 35.534095764160156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 58.00567626953125, 26.534095764160156 * Ⲇ, 65.00567626953125 * Ⲇ, Ⲇ * 27.534095764160156, 73.00567626953125 * Ⲇ, Ⲇ * 40.534095764160156);
		Δ.bezierCurveTo(Ⲇ * 81.00567626953125, Ⲇ * 49.534095764160156, 82.00567626953125 * Ⲇ, 50.534095764160156 * Ⲇ, 83.00567626953125 * Ⲇ, 51.534095764160156 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠΔ], Δⵠ[2], Ⲇ * 3);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(105.00567626953125 * Ⲇ, Ⲇ * 50.53410339355469);
		Δ.bezierCurveTo(Ⲇ * 112.00567626953125, Ⲇ * 48.53410339355469, Ⲇ * 125.00567626953125, Ⲇ * 21.534103393554688, Ⲇ * 132.00567626953125, Ⲇ * 33.53410339355469);
		Δ.bezierCurveTo(138.00567626953125 * Ⲇ, Ⲇ * 42.53410339355469, Ⲇ * 140.00567626953125, Ⲇ * 64.53410339355469, 136.00567626953125 * Ⲇ, Ⲇ * 75.53410339355469);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠⲆ], Δⵠ[2], Ⲇ * 3);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(57.00567626953125 * Ⲇ, 68.53410339355469 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 63.00567626953125, Ⲇ * 69.53410339355469, 69.00567626953125 * Ⲇ, 66.53410339355469 * Ⲇ, 73.00567626953125 * Ⲇ, 60.53410339355469 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 66.00567626953125, 47.53410339355469 * Ⲇ, Ⲇ * 61.00567626953125, 42.53410339355469 * Ⲇ, Ⲇ * 58.00567626953125, Ⲇ * 49.53410339355469);
		Δ.bezierCurveTo(56.00567626953125 * Ⲇ, Ⲇ * 59.53410339355469, 56.00567626953125 * Ⲇ, 64.53410339355469 * Ⲇ, 57.00567626953125 * Ⲇ, 67.53410339355469 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 115.00567626953125, 59.715911865234375 * Ⲇ);
		Δ.bezierCurveTo(119.00567626953125 * Ⲇ, Ⲇ * 48.715911865234375, Ⲇ * 126.00567626953125, 41.715911865234375 * Ⲇ, Ⲇ * 129.00567626953125, 48.715911865234375 * Ⲇ);
		Δ.bezierCurveTo(131.00567626953125 * Ⲇ, 56.715911865234375 * Ⲇ, 133.00567626953125 * Ⲇ, Ⲇ * 71.71591186523438, 127.00567626953125 * Ⲇ, 68.71591186523438 * Ⲇ);
		Δ.bezierCurveTo(120.00567626953125 * Ⲇ, 67.71591186523438 * Ⲇ, Ⲇ * 114.00567626953125, Ⲇ * 59.715911865234375, 116.00567626953125 * Ⲇ, 58.715911865234375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		ⵠΔᐃ(Δ, Ⲇ * 77, Ⲇ * 107, 6 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2]);
		ⵠΔᐃ(Δ, 110 * Ⲇ, 107 * Ⲇ, Ⲇ * 6);
		ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⲆ]);
		ⵠΔᐃ(Δ, 75 * Ⲇ, Ⲇ * 105, Ⲇ * 3);
		ⵠᐃ(Δ, Δⵠ[4]);
		ⵠΔᐃ(Δ, 108 * Ⲇ, 105 * Ⲇ, ⵠᐃⵠΔ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔΔⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(88.00567626953125 * Ⲇ, 141.4431915283203 * Ⲇ);
		Δ.bezierCurveTo(93.00567626953125 * Ⲇ, Ⲇ * 137.4431915283203, 96.00567626953125 * Ⲇ, Ⲇ * 138.4431915283203, 100.00567626953125 * Ⲇ, Ⲇ * 141.4431915283203);
		Δ.bezierCurveTo(Ⲇ * 103.00567626953125, Ⲇ * 143.4431915283203, 101.00567626953125 * Ⲇ, 149.4431915283203 * Ⲇ, Ⲇ * 95.00567626953125, Ⲇ * 148.4431915283203);
		Δ.bezierCurveTo(85.00567626953125 * Ⲇ, 148.4431915283203 * Ⲇ, 86.00567626953125 * Ⲇ, 145.4431915283203 * Ⲇ, Ⲇ * 88.00567626953125, Ⲇ * 142.4431915283203);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⲆ]);
		return ᐃⵠ
	}

	function ᐃᐃΔΔⵠᐃⲆᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 400;
		ᐃⵠ.height = 400 * Ⲇ;
		Δ.save();
		Δ.translate(Ⲇ * 85, Ⲇ * 237);
		Δ.rotate(1.5707963267948966);
		ΔΔΔΔ(Δ, 6, Ⲇ * 54.585977194239184, ⲆⵠΔΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], ⵠⲆᐃᐃⲆ * Ⲇ);
		Δ.save();
		Δ.translate(178 * Ⲇ, Ⲇ * 238);
		Δ.rotate(1.5707963267948966);
		ΔΔΔΔ(Δ, 6, Ⲇ * 52.53573932334064, Ⲇ * 1);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠΔ], Δⵠ[2], Ⲇ * 12);
		Δ.save();
		Δ.translate(270 * Ⲇ, 239 * Ⲇ);
		Δ.rotate(1.5707963267948966);
		ΔΔΔΔ(Δ, ⵠΔΔⵠⲆ, 53.58058329516393 * Ⲇ, ᐃⵠᐃᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[2], Ⲇⵠᐃᐃᐃ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 222, Ⲇ * 312);
		Δ.rotate(1.5707963267948966);
		ΔΔΔΔ(Δ, 6, 52.53573932334064 * Ⲇ, 1 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃᐃⲆⵠ], Ⲇ * ⲆⵠⲆᐃⵠ);
		Δ.save();
		Δ.translate(317 * Ⲇ, Ⲇ * 159);
		Δ.rotate(1.5707963267948966);
		ΔΔΔΔ(Δ, ⵠⲆⲆΔᐃ, 57.63465889766331 * Ⲇ, 1 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ], Δⵠ[ⲆΔΔⲆ], Ⲇ * 12);
		Δ.save();
		Δ.translate(Ⲇ * 223.5, Ⲇ * 139.0625);
		Δ.rotate(1.5707963267948966);
		ΔΔΔΔ(Δ, ᐃⲆΔⵠⵠ, Ⲇ * 51.66236541235796, 1 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔⵠⲆⲆ], Ⲇ * 12);
		Δ.save();
		Δ.translate(132.5 * Ⲇ, 137.0625 * Ⲇ);
		Δ.rotate(1.5707963267948966);
		ΔΔΔΔ(Δ, ⵠⲆⵠⲆⵠ, 52.009614495783374 * Ⲇ, 1 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ], Δⵠ[ⵠΔⵠⲆ], Ⲇ * ⵠⵠΔᐃᐃⲆⲆ);
		Δ.save();
		Δ.translate(Ⲇ * 178.5, Ⲇ * 58.0625);
		Δ.rotate(1.5707963267948966);
		ΔΔΔΔ(Δ, 6, Ⲇ * 53.16013544000805, Ⲇ * ⲆⲆⵠ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 12 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 177.5, 216.0625 * Ⲇ);
		Δ.rotate(1.5707963267948966);
		ΔΔΔΔ(Δ, ⵠΔᐃᐃ, 50 * Ⲇ, 1 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 12 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 84.5, 215.0625 * Ⲇ);
		Δ.rotate(1.5707963267948966);
		ΔΔΔΔ(Δ, ⵠΔⵠⵠⲆ, Ⲇ * 54, ΔᐃⵠⲆ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⲆ], Δⵠ[ⵠᐃᐃⲆ], 12 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 319.5, 138.0625 * Ⲇ);
		Δ.rotate(1.5707963267948966);
		ΔΔΔΔ(Δ, ⵠΔᐃᐃΔ, 55.08175741568164 * Ⲇ, ΔⲆⵠⲆ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 12 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 269.5, 216.0625 * Ⲇ);
		Δ.rotate(1.5707963267948966);
		ΔΔΔΔ(Δ, ᐃⵠⵠᐃⵠ, 54.589376255824725 * Ⲇ, Ⲇ * 1);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[ᐃᐃⵠⵠ], Ⲇ * 12);
		Δ.save();
		Δ.translate(Ⲇ * 221.5, Ⲇ * 293.0625);
		Δ.rotate(.5235987755982988);
		ΔΔΔΔ(Δ, ⲆⲆⲆⵠΔ, Ⲇ * 49.49747468305833, Ⲇ * 1);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], ⵠᐃᐃᐃⵠⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 221.5, 342.0625 * Ⲇ);
		Δ.bezierCurveTo(221.5 * Ⲇ, Ⲇ * 350.5625, Ⲇ * 221.5, Ⲇ * 350.5625, Ⲇ * 221.5, Ⲇ * 359.0625);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃⲆⲆΔᐃ, Δⵠ[2], Ⲇ * ΔΔᐃᐃⲆΔⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(84.5 * Ⲇ, 270.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 84.5, Ⲇ * 277.0625, 84.5 * Ⲇ, 277.0625 * Ⲇ, Ⲇ * 84.5, Ⲇ * 284.0625);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆⲆΔⲆ, Δⵠ[2], Ⲇ * Ⲇⵠᐃᐃᐃ);
		Δ.save();
		Δ.translate(84.5 * Ⲇ, 215.0625 * Ⲇ);
		Δ.rotate(.5235987755982988);
		ΔΔΔΔ(Δ, ⲆⲆᐃⵠⵠ, Ⲇ * 30, ⵠⵠⲆΔⲆ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.save();
		Δ.translate(Ⲇ * 177.5, 215.0625 * Ⲇ);
		Δ.rotate(.5235987755982988);
		ΔΔΔΔ(Δ, ⵠΔᐃᐃΔ, Ⲇ * 30, 15 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.save();
		Δ.translate(Ⲇ * 222.5, 294.0625 * Ⲇ);
		Δ.rotate(.5235987755982988);
		ΔΔΔΔ(Δ, 6, 30 * Ⲇ, 15 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔΔ]);
		Δ.save();
		Δ.translate(Ⲇ * 270.5, 216.0625 * Ⲇ);
		Δ.rotate(.5235987755982988);
		ΔΔΔΔ(Δ, ⵠΔᐃᐃ, 30 * Ⲇ, Ⲇ * ⵠᐃⵠΔΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔΔ]);
		Δ.save();
		Δ.translate(Ⲇ * 320.5, 134.0625 * Ⲇ);
		Δ.rotate(.5235987755982988);
		ΔΔΔΔ(Δ, ΔⲆⵠΔᐃ, Ⲇ * 30, Ⲇ * 15);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.save();
		Δ.translate(224.5 * Ⲇ, Ⲇ * 138.0625);
		Δ.rotate(.5235987755982988);
		ΔΔΔΔ(Δ, 6, Ⲇ * 30, 15 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆⲆ]);
		Δ.save();
		Δ.translate(Ⲇ * 133.5, 137.0625 * Ⲇ);
		Δ.rotate(.5235987755982988);
		ΔΔΔΔ(Δ, ⵠⵠⲆⲆⵠ, Ⲇ * 30, 15 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.save();
		Δ.translate(Ⲇ * 178.5, Ⲇ * 56.0625);
		Δ.rotate(.5235987755982988);
		ΔΔΔΔ(Δ, 6, 30 * Ⲇ, ⵠⵠΔⵠᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆⲆ]);
		return ᐃⵠ
	}

	function ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ, ᐃᐃⲆ, ΔⲆⵠ, ⲆᐃΔΔ, ᐃⲆⲆⲆ) {
		if (ⵠⲆⵠᐃⵠⵠΔ === ᐃⲆⲆⲆ) ᐃⲆⲆⲆ = 0;
		for (var ⲆⲆᐃΔ = -ⲆⲆᐃⵠ == ⲆᐃΔΔ ? 0 : ⲆᐃΔΔ; ⲆⲆᐃΔ >= ᐃⲆⲆⲆ; ⲆⲆᐃΔ--) {
			for (var ᐃⲆ = 0; ᐃⲆ < 200; ᐃⲆ++) {
				for (var ⲆⲆⲆⵠ = 0; 200 > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
					var Δᐃⵠⵠ = ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ⲆⲆⲆⵠ][ᐃⲆ];
					if (!Δᐃⵠⵠ || !Δᐃⵠⵠ[ᐃᐃⲆ]) continue;
					if (ⲆᐃΔΔ == -ⲆⲆⵠ) var ⵠΔⲆ = Δᐃⵠⵠ[ᐃᐃⲆ];
					else var ⵠΔⲆ = Δᐃⵠⵠ[ᐃᐃⲆ][ⲆⲆᐃΔ];
					for (var ᐃᐃⵠᐃ = 0; ⵠΔⲆ && ⵠΔⲆ.length > ᐃᐃⵠᐃ; ᐃᐃⵠᐃ++) {
						var ΔⵠΔⵠ = ⵠΔⲆ[ᐃᐃⵠᐃ];
						Δ.fillStyle = Δⵠ;
						ⵠΔᐃ(Δ, .0095 * (Ⲇ * ΔⵠΔⵠ.x), ΔⵠΔⵠ.y * Ⲇ * .0095, ΔⲆⵠ * Ⲇ);
						Δ.fill()
					}
				}
			}
		}
	}

	function ⵠⲆⲆΔⲆⲆⵠ() {
		return 5690889
	}
	const ΔΔᐃⵠΔᐃⲆΔΔ = 14732897;
	const ΔⵠⵠⲆⵠᐃⲆⵠⵠ = ⵠⲆⲆΔⲆⲆⵠ + " let ΔᐃⲆᐃᐃᐃΔ = ⵠⲆⲆΔⲆⲆⵠ () * 1859757; return ΔᐃⲆᐃᐃᐃΔ;";
	const ΔΔΔⲆⲆⲆΔ = new Function(ΔⵠⵠⲆⵠᐃⲆⵠⵠ);
	try {
		ΔΔΔⲆⲆⲆΔ(ΔΔᐃⵠΔᐃⲆΔΔ)
	} catch (e) {
		const ΔΔᐃⵠΔᐃⲆΔΔ = function() {
			for (let ΔⵠⵠⲆⵠᐃⲆⵠⵠ = 0; ΔⵠⵠⲆⵠᐃⲆⵠⵠ < 5; ΔⵠⵠⲆⵠᐃⲆⵠⵠ++) ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("click", (function() {
				ΔΔᐃⵠΔᐃⲆΔΔ()
			}))
		};
		ΔΔᐃⵠΔᐃⲆΔΔ()
	}

	function ΔΔⵠΔⲆⲆⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 52;
		ᐃⵠ.height = 65 * Ⲇ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(9.833328247070312 * Ⲇ, Ⲇ * 12.078125);
		Δ.bezierCurveTo(15.333328247070312 * Ⲇ, 28.078125 * Ⲇ, Ⲇ * 15.333328247070312, 28.078125 * Ⲇ, 20.833328247070312 * Ⲇ, Ⲇ * 44.078125);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆᐃⲆⵠ, Δⵠ[1], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(7.8333282470703125 * Ⲇ, 20.078125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 16.833328247070312, Ⲇ * 32.578125, 16.833328247070312 * Ⲇ, 32.578125 * Ⲇ, 25.833328247070312 * Ⲇ, Ⲇ * 45.078125);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[ΔᐃⵠⲆ], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 23.833328247070312, 26.078125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 25.833328247070312, Ⲇ * 11.078125, 16.833328247070312 * Ⲇ, 8.078125 * Ⲇ, 14.833328247070312 * Ⲇ, Ⲇ * 7.078125);
		Δ.bezierCurveTo(11.833328247070312 * Ⲇ, 17.078125 * Ⲇ, 13.833328247070312 * Ⲇ, 22.078125 * Ⲇ, Ⲇ * 23.833328247070312, Ⲇ * 27.078125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ], Δⵠ[ⵠⵠⵠⲆ], Ⲇ * ΔⵠⲆⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(35.83332824707031 * Ⲇ, Ⲇ * 8.078125);
		Δ.bezierCurveTo(Ⲇ * 34.83332824707031, Ⲇ * 27.078125, Ⲇ * 28.833328247070312, Ⲇ * 27.078125, Ⲇ * 23.833328247070312, 28.078125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 21.833328247070312, 14.078125 * Ⲇ, Ⲇ * 26.833328247070312, 11.078125 * Ⲇ, Ⲇ * 35.83332824707031, Ⲇ * 8.078125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ], Δⵠ[1], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 25.833328247070312, Ⲇ * 39.078125);
		Δ.bezierCurveTo(Ⲇ * 20.833328247070312, 29.078125 * Ⲇ, Ⲇ * 14.833328247070312, 27.078125 * Ⲇ, 5.8333282470703125 * Ⲇ, 29.078125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 9.833328247070312, Ⲇ * 39.078125, Ⲇ * 16.833328247070312, Ⲇ * 42.078125, Ⲇ * 25.833328247070312, 40.078125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 42.83332824707031, 23.078125 * Ⲇ);
		Δ.bezierCurveTo(35.83332824707031 * Ⲇ, Ⲇ * 35.078125, Ⲇ * 31.833328247070312, 37.078125 * Ⲇ, 25.833328247070312 * Ⲇ, Ⲇ * 36.078125);
		Δ.bezierCurveTo(Ⲇ * 25.833328247070312, 24.078125 * Ⲇ, 33.83332824707031 * Ⲇ, 21.078125 * Ⲇ, Ⲇ * 42.83332824707031, 23.078125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(23.833328247070312 * Ⲇ, 24.078125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 20.833328247070312, Ⲇ * 34.078125, 23.833328247070312 * Ⲇ, Ⲇ * 40.078125, 27.833328247070312 * Ⲇ, Ⲇ * 43.078125);
		Δ.bezierCurveTo(37.33332824707031 * Ⲇ, 28.078125 * Ⲇ, Ⲇ * 37.33332824707031, Ⲇ * 28.078125, Ⲇ * 46.83332824707031, Ⲇ * 13.078125);
		ⵠᐃ(Δ, ΔⵠᐃΔᐃ, Δⵠ[ᐃΔΔⲆ], ⵠⵠΔⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(38.83332824707031 * Ⲇ, 14.078125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 34.83332824707031, Ⲇ * 24.078125, Ⲇ * 34.83332824707031, 24.078125 * Ⲇ, 30.833328247070312 * Ⲇ, 34.078125 * Ⲇ);
		ⵠᐃ(Δ, ⵠⲆⵠᐃⵠⵠΔ, Δⵠ[ᐃΔⵠΔ], ⵠⵠΔⵠ * Ⲇ);
		return ᐃⵠ
	}

	function ⵠⲆΔΔᐃᐃΔᐃⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 450 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 470;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(226.5 * Ⲇ, Ⲇ * 91.546875);
		Δ.bezierCurveTo(254.5 * Ⲇ, Ⲇ * 115.546875, 261.5 * Ⲇ, Ⲇ * 115.546875, Ⲇ * 294.5, Ⲇ * 109.546875);
		Δ.bezierCurveTo(299.5 * Ⲇ, Ⲇ * 141.546875, Ⲇ * 315.5, 151.546875 * Ⲇ, Ⲇ * 344.5, 158.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 330.5, Ⲇ * 195.546875, Ⲇ * 341.5, Ⲇ * 207.546875, 361.5 * Ⲇ, Ⲇ * 226.546875);
		Δ.bezierCurveTo(Ⲇ * 331.5, Ⲇ * 251.546875, 335.5 * Ⲇ, 270.546875 * Ⲇ, 342.5 * Ⲇ, Ⲇ * 295.546875);
		Δ.bezierCurveTo(300.5 * Ⲇ, Ⲇ * 296.546875, Ⲇ * 293.5, 325.546875 * Ⲇ, 292.5 * Ⲇ, 344.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 257.5, Ⲇ * 326.546875, Ⲇ * 242.5, Ⲇ * 338.546875, 224.5 * Ⲇ, 361.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 200.5, Ⲇ * 329.546875, 180.5 * Ⲇ, Ⲇ * 334.546875, Ⲇ * 155.5, 341.546875 * Ⲇ);
		Δ.bezierCurveTo(146.5 * Ⲇ, 307.546875 * Ⲇ, 140.5 * Ⲇ, Ⲇ * 302.546875, 107.5 * Ⲇ, 292.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 117.5, Ⲇ * 253.546875, 109.5 * Ⲇ, Ⲇ * 244.546875, 89.5 * Ⲇ, 224.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 118.5, Ⲇ * 191.546875, 114.5 * Ⲇ, 182.546875 * Ⲇ, Ⲇ * 108.5, Ⲇ * 156.546875);
		Δ.bezierCurveTo(143.5 * Ⲇ, 149.546875 * Ⲇ, 150.5 * Ⲇ, Ⲇ * 136.546875, Ⲇ * 157.5, 106.546875 * Ⲇ);
		Δ.bezierCurveTo(202.5 * Ⲇ, 120.546875 * Ⲇ, 211.5 * Ⲇ, 103.546875 * Ⲇ, 228.5 * Ⲇ, 91.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[0], 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(224.5 * Ⲇ, Ⲇ * 129.546875);
		Δ.bezierCurveTo(Ⲇ * 247.5, 147.546875 * Ⲇ, Ⲇ * 252.5, Ⲇ * 143.546875, 274.5 * Ⲇ, 141.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 279.5, Ⲇ * 163.546875, Ⲇ * 289.5, 168.546875 * Ⲇ, Ⲇ * 311.5, 178.546875 * Ⲇ);
		Δ.bezierCurveTo(301.5 * Ⲇ, 199.546875 * Ⲇ, Ⲇ * 307.5, 213.546875 * Ⲇ, Ⲇ * 323.5, Ⲇ * 226.546875);
		Δ.bezierCurveTo(303.5 * Ⲇ, 240.546875 * Ⲇ, 303.5 * Ⲇ, 255.546875 * Ⲇ, Ⲇ * 312.5, 275.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 281.5, Ⲇ * 278.546875, Ⲇ * 276.5, Ⲇ * 291.546875, 272.5 * Ⲇ, 313.546875 * Ⲇ);
		Δ.bezierCurveTo(248.5 * Ⲇ, 301.546875 * Ⲇ, 239.5 * Ⲇ, 310.546875 * Ⲇ, 224.5 * Ⲇ, Ⲇ * 324.546875);
		Δ.bezierCurveTo(211.5 * Ⲇ, 304.546875 * Ⲇ, 199.5 * Ⲇ, Ⲇ * 301.546875, Ⲇ * 176.5, Ⲇ * 309.546875);
		Δ.bezierCurveTo(165.5 * Ⲇ, Ⲇ * 276.546875, 159.5 * Ⲇ, 275.546875 * Ⲇ, Ⲇ * 138.5, Ⲇ * 274.546875);
		Δ.bezierCurveTo(Ⲇ * 148.5, Ⲇ * 248.546875, Ⲇ * 140.5, 237.546875 * Ⲇ, 125.5 * Ⲇ, 225.546875 * Ⲇ);
		Δ.bezierCurveTo(145.5 * Ⲇ, Ⲇ * 205.546875, Ⲇ * 146.5, 195.546875 * Ⲇ, 142.5 * Ⲇ, 176.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 173.5, Ⲇ * 164.546875, Ⲇ * 173.5, 155.546875 * Ⲇ, Ⲇ * 178.5, Ⲇ * 140.546875);
		Δ.bezierCurveTo(214.5 * Ⲇ, 143.546875 * Ⲇ, 214.5 * Ⲇ, 135.546875 * Ⲇ, Ⲇ * 226.5, Ⲇ * 129.546875);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[0], 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 224.5, 160.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 236.5, 168.546875 * Ⲇ, 239.5 * Ⲇ, 168.546875 * Ⲇ, Ⲇ * 258.5, 168.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 261.5, Ⲇ * 185.546875, Ⲇ * 268.5, 187.546875 * Ⲇ, 282.5 * Ⲇ, Ⲇ * 192.546875);
		Δ.bezierCurveTo(Ⲇ * 277.5, Ⲇ * 208.546875, 283.5 * Ⲇ, 216.546875 * Ⲇ, Ⲇ * 289.5, 228.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 277.5, Ⲇ * 243.546875, Ⲇ * 280.5, 253.546875 * Ⲇ, Ⲇ * 281.5, Ⲇ * 260.546875);
		Δ.bezierCurveTo(264.5 * Ⲇ, 260.546875 * Ⲇ, 259.5 * Ⲇ, Ⲇ * 269.546875, Ⲇ * 256.5, Ⲇ * 283.546875);
		Δ.bezierCurveTo(Ⲇ * 244.5, Ⲇ * 276.546875, 232.5 * Ⲇ, 283.546875 * Ⲇ, 223.5 * Ⲇ, Ⲇ * 291.546875);
		Δ.bezierCurveTo(213.5 * Ⲇ, 276.546875 * Ⲇ, 205.5 * Ⲇ, Ⲇ * 278.546875, Ⲇ * 190.5, 281.546875 * Ⲇ);
		Δ.bezierCurveTo(181.5 * Ⲇ, Ⲇ * 262.546875, Ⲇ * 173.5, Ⲇ * 259.546875, 165.5 * Ⲇ, 258.546875 * Ⲇ);
		Δ.bezierCurveTo(169.5 * Ⲇ, 239.546875 * Ⲇ, Ⲇ * 167.5, 233.546875 * Ⲇ, 157.5 * Ⲇ, Ⲇ * 225.546875);
		Δ.bezierCurveTo(Ⲇ * 169.5, Ⲇ * 208.546875, 170.5 * Ⲇ, 203.546875 * Ⲇ, Ⲇ * 168.5, 192.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 181.5, Ⲇ * 187.546875, 188.5 * Ⲇ, 179.546875 * Ⲇ, Ⲇ * 192.5, 168.546875 * Ⲇ);
		Δ.bezierCurveTo(216.5 * Ⲇ, Ⲇ * 170.546875, Ⲇ * 218.5, 163.546875 * Ⲇ, Ⲇ * 225.5, Ⲇ * 160.546875);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠΔⵠᐃ], 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 205.5, Ⲇ * 194.546875);
		Δ.bezierCurveTo(Ⲇ * 216.5, Ⲇ * 192.546875, 219.5 * Ⲇ, Ⲇ * 191.546875, Ⲇ * 225.5, 185.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 232.5, 193.546875 * Ⲇ, Ⲇ * 237.5, 191.546875 * Ⲇ, Ⲇ * 246.5, Ⲇ * 192.546875);
		Δ.bezierCurveTo(Ⲇ * 249.5, 202.546875 * Ⲇ, 253.5 * Ⲇ, Ⲇ * 205.546875, Ⲇ * 258.5, 207.546875 * Ⲇ);
		Δ.bezierCurveTo(259.5 * Ⲇ, Ⲇ * 222.546875, Ⲇ * 256.5, 223.546875 * Ⲇ, Ⲇ * 265.5, Ⲇ * 226.546875);
		Δ.bezierCurveTo(Ⲇ * 256.5, 231.546875 * Ⲇ, Ⲇ * 255.5, 241.546875 * Ⲇ, Ⲇ * 259.5, Ⲇ * 248.546875);
		Δ.bezierCurveTo(250.5 * Ⲇ, Ⲇ * 245.546875, Ⲇ * 245.5, Ⲇ * 252.546875, Ⲇ * 243.5, 260.546875 * Ⲇ);
		Δ.bezierCurveTo(234.5 * Ⲇ, 256.546875 * Ⲇ, 229.5 * Ⲇ, 258.546875 * Ⲇ, Ⲇ * 223.5, 265.546875 * Ⲇ);
		Δ.bezierCurveTo(218.5 * Ⲇ, Ⲇ * 255.546875, Ⲇ * 213.5, Ⲇ * 257.546875, 204.5 * Ⲇ, Ⲇ * 261.546875);
		Δ.bezierCurveTo(203.5 * Ⲇ, Ⲇ * 251.546875, 198.5 * Ⲇ, 248.546875 * Ⲇ, Ⲇ * 189.5, 244.546875 * Ⲇ);
		Δ.bezierCurveTo(194.5 * Ⲇ, 237.546875 * Ⲇ, 192.5 * Ⲇ, 231.546875 * Ⲇ, 184.5 * Ⲇ, 225.546875 * Ⲇ);
		Δ.bezierCurveTo(191.5 * Ⲇ, 211.546875 * Ⲇ, 192.5 * Ⲇ, Ⲇ * 209.546875, Ⲇ * 190.5, 204.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 200.5, Ⲇ * 204.546875, Ⲇ * 204.5, Ⲇ * 198.546875, 207.5 * Ⲇ, 194.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆⲆΔⲆ, Δⵠ[0], 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 149.5, Ⲇ * 93.546875);
		Δ.bezierCurveTo(Ⲇ * 287.5, Ⲇ * 332.546875, Ⲇ * 226, 225.546875 * Ⲇ, 302.5 * Ⲇ, Ⲇ * 357.546875);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠᐃⲆⵠⲆ, Δⵠ[ⵠⵠⵠ], ᐃᐃⵠΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(224.5 * Ⲇ, 66.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 224.5, 223.546875 * Ⲇ, Ⲇ * 224.5, Ⲇ * 223.546875, Ⲇ * 224.5, Ⲇ * 380.546875);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆⲆΔⲆ, Δⵠ[0], ΔΔⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 302.5, Ⲇ * 88.546875);
		Δ.bezierCurveTo(222.5 * Ⲇ, 227.546875 * Ⲇ, Ⲇ * 222.5, 227.546875 * Ⲇ, Ⲇ * 142.5, 366.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃⲆⲆⲆᐃ, Δⵠ[0], 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(361.5 * Ⲇ, 147.546875 * Ⲇ);
		Δ.bezierCurveTo(223 * Ⲇ, 226.546875 * Ⲇ, 223 * Ⲇ, 226.546875 * Ⲇ, 84.5 * Ⲇ, Ⲇ * 305.546875);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃΔᐃⲆⵠ, Δⵠ[0], ⲆⲆⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 379.5, Ⲇ * 225.546875);
		Δ.bezierCurveTo(221 * Ⲇ, Ⲇ * 225.546875, Ⲇ * 221, 225.546875 * Ⲇ, 62.5 * Ⲇ, 225.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⲆⲆⲆΔᐃ, Δⵠ[0], ᐃᐃᐃᐃΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(90.5 * Ⲇ, 147.546875 * Ⲇ);
		Δ.bezierCurveTo(226.5 * Ⲇ, Ⲇ * 226.546875, 226.5 * Ⲇ, 226.546875 * Ⲇ, Ⲇ * 362.5, Ⲇ * 305.546875);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[0], 4);
		return ᐃⵠ
	}

	function ⵠΔΔⲆΔΔᐃ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 400 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 400;
		Δ.save();
		Δ.translate(202.5 * Ⲇ, Ⲇ * 147.5);
		ᐃΔⵠ(Δ, -96.5 * Ⲇ, -21.5 * Ⲇ, Ⲇ * 193, Ⲇ * 193, Ⲇ * 0);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ], Δⵠ[ᐃΔⵠΔ], 12 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 202.5, 190.5 * Ⲇ);
		ᐃΔⵠ(Δ, 96.5 * Ⲇ, -21.5 * Ⲇ, Ⲇ * -193, 43 * Ⲇ, 0 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔⵠⲆⲆ], Δⵠ[1], ᐃⲆᐃⲆⵠ * Ⲇ);
		Δ.save();
		Δ.save();
		Δ.translate(Ⲇ * 202.5, Ⲇ * 233.5);
		ᐃΔⵠ(Δ, -96.5 * Ⲇ, -20.5 * Ⲇ, Ⲇ * 193, 41 * Ⲇ, Ⲇ * 0);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆⵠΔΔ], Ⲇ * 12);
		Δ.save();
		Δ.translate(202.5 * Ⲇ, 275 * Ⲇ);
		ᐃΔⵠ(Δ, 96.5 * Ⲇ, -21 * Ⲇ, -193 * Ⲇ, 42 * Ⲇ, 0 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], Ⲇ * 12);
		Δ.save();
		Δ.translate(201 * Ⲇ, Ⲇ * 212);
		Δ.rotate(8.64);
		ᐃΔⵠ(Δ, Ⲇ * -116, Ⲇ * -22, Ⲇ * 232, 44 * Ⲇ, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[1], Ⲇ * 12);
		Δ.save();
		Δ.translate(Ⲇ * 203.5, 121.5 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -115.5, Ⲇ * -20.5, Ⲇ * 231, 41 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃⲆⲆ], Ⲇ * 12);
		Δ.save();
		Δ.translate(Ⲇ * 203.5, 299 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -115.5, Ⲇ * -20, 231 * Ⲇ, Ⲇ * 40, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆⵠⲆ], 12 * Ⲇ);
		Δ.save();
		Δ.translate(298.5 * Ⲇ, Ⲇ * 210);
		ᐃΔⵠ(Δ, Ⲇ * -20.5, -109 * Ⲇ, Ⲇ * 41, Ⲇ * 218, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃΔΔⲆ], Ⲇ * 12);
		Δ.save();
		Δ.translate(108.5 * Ⲇ, 210 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -20.5, Ⲇ * -109, Ⲇ * 41, 218 * Ⲇ, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[1], Ⲇ * ⲆⲆⲆⲆΔ);
		Δ.save();
		Δ.translate(Ⲇ * 204, Ⲇ * 121.5);
		ᐃΔⵠ(Δ, -92 * Ⲇ, Ⲇ * -9.5, 184 * Ⲇ, 19 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[3], 10 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 197, 299 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * 85, Ⲇ * -9, Ⲇ * -170, Ⲇ * ⵠⵠᐃᐃⲆΔⵠ, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠᐃⵠⵠ], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(94 * Ⲇ, 317 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 110.5, 299.5 * Ⲇ, 110.5 * Ⲇ, 299.5 * Ⲇ, 127 * Ⲇ, Ⲇ * 282);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[1], ΔΔⵠⵠⲆΔΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(279 * Ⲇ, Ⲇ * 142);
		Δ.bezierCurveTo(Ⲇ * 296.5, 125.5 * Ⲇ, 296.5 * Ⲇ, Ⲇ * 125.5, 314 * Ⲇ, Ⲇ * 109);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ΔᐃⵠⲆ], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 93, 106 * Ⲇ);
		Δ.bezierCurveTo(110.5 * Ⲇ, Ⲇ * 124, Ⲇ * 110.5, 124 * Ⲇ, 128 * Ⲇ, Ⲇ * 142);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠⵠⵠⲆ], ΔΔⵠⵠⲆΔΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(281 * Ⲇ, Ⲇ * 282);
		Δ.bezierCurveTo(Ⲇ * 296, 297.5 * Ⲇ, 296 * Ⲇ, Ⲇ * 297.5, Ⲇ * 311, 313 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⲆⲆⲆΔᐃ, Δⵠ[1], ᐃⲆᐃⲆⵠ * Ⲇ);
		if (ⵠΔΔⲆ == ᐃⲆ) {
			Δ.scale(2, 2);
			Δ.translate(-ΔⵠᐃΔⲆ * Ⲇ, 55 * Ⲇ);
			Δ.rotate(-.5);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 60, Ⲇ * 47);
			Δ.bezierCurveTo(Ⲇ * 81, Ⲇ * 46, Ⲇ * 85, 47 * Ⲇ, 83 * Ⲇ, 63 * Ⲇ);
			Δ.bezierCurveTo(83 * Ⲇ, Ⲇ * 72, 83 * Ⲇ, Ⲇ * 75, 72 * Ⲇ, 73 * Ⲇ);
			Δ.bezierCurveTo(68 * Ⲇ, 80 * Ⲇ, Ⲇ * 69, Ⲇ * 82, 66 * Ⲇ, Ⲇ * 73);
			Δ.bezierCurveTo(62 * Ⲇ, 81 * Ⲇ, 61 * Ⲇ, 82 * Ⲇ, 59 * Ⲇ, 73 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 54, 81 * Ⲇ, 55 * Ⲇ, Ⲇ * 81, 52 * Ⲇ, Ⲇ * 74);
			Δ.bezierCurveTo(Ⲇ * 38, Ⲇ * 76, Ⲇ * 41, 74 * Ⲇ, Ⲇ * 40, Ⲇ * 66);
			Δ.bezierCurveTo(Ⲇ * 38, 45 * Ⲇ, 39 * Ⲇ, 49 * Ⲇ, Ⲇ * 59, Ⲇ * 47);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃΔⵠᐃⲆ], Δⵠ[4], Ⲇ * ⵠⲆⲆⵠ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 68, 54 * Ⲇ);
			Δ.bezierCurveTo(75 * Ⲇ, Ⲇ * 54, 77 * Ⲇ, 62 * Ⲇ, 71 * Ⲇ, 64 * Ⲇ);
			Δ.bezierCurveTo(62 * Ⲇ, Ⲇ * 65, 63 * Ⲇ, Ⲇ * 54, Ⲇ * 68, Ⲇ * 54);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[3]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(50 * Ⲇ, 55 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 57, 55 * Ⲇ, 58 * Ⲇ, 65 * Ⲇ, 52 * Ⲇ, Ⲇ * 65);
			Δ.bezierCurveTo(Ⲇ * 44, 66 * Ⲇ, Ⲇ * 44, 54 * Ⲇ, 50 * Ⲇ, 55 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⵠ])
		} else if (ᐃΔⵠΔ == ᐃⲆ) {
			Δ.scale(.6, .6);
			Δ.translate(185 * Ⲇ, Ⲇ * 165);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 108, Ⲇ * 56);
			Δ.bezierCurveTo(Ⲇ * 136, Ⲇ * 58, 203 * Ⲇ, 69 * Ⲇ, Ⲇ * 234, 75 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 246, Ⲇ * 77, 247 * Ⲇ, Ⲇ * 78, 245 * Ⲇ, 90 * Ⲇ);
			Δ.bezierCurveTo(238 * Ⲇ, Ⲇ * 143, 228 * Ⲇ, Ⲇ * 197, 214 * Ⲇ, 259 * Ⲇ);
			Δ.bezierCurveTo(212 * Ⲇ, Ⲇ * 267, Ⲇ * 209, Ⲇ * 270, Ⲇ * 189, Ⲇ * 268);
			Δ.bezierCurveTo(Ⲇ * 142, Ⲇ * 264, 106 * Ⲇ, Ⲇ * 260, Ⲇ * 75, Ⲇ * 253);
			Δ.bezierCurveTo(60 * Ⲇ, 250 * Ⲇ, 64 * Ⲇ, Ⲇ * 250, 66 * Ⲇ, 221 * Ⲇ);
			Δ.bezierCurveTo(71 * Ⲇ, 168 * Ⲇ, 87 * Ⲇ, Ⲇ * 95, 98 * Ⲇ, Ⲇ * 67);
			Δ.bezierCurveTo(101 * Ⲇ, Ⲇ * 57, Ⲇ * 103, Ⲇ * 56, 106 * Ⲇ, Ⲇ * 56);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ΔⲆΔⲆ], Δⵠ[ᐃᐃΔⵠⲆ], 20 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 112, 72 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 132, 73 * Ⲇ, 227 * Ⲇ, Ⲇ * 85, 226 * Ⲇ, Ⲇ * 91);
			Δ.bezierCurveTo(Ⲇ * 231, Ⲇ * 89, Ⲇ * 217, 196 * Ⲇ, 200 * Ⲇ, 250 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 196, 254 * Ⲇ, 175 * Ⲇ, 249 * Ⲇ, 166 * Ⲇ, 249 * Ⲇ);
			Δ.bezierCurveTo(91 * Ⲇ, Ⲇ * 241, Ⲇ * 82, Ⲇ * 236, 83 * Ⲇ, 232 * Ⲇ);
			Δ.bezierCurveTo(90 * Ⲇ, Ⲇ * 144, Ⲇ * 108, 71 * Ⲇ, 111 * Ⲇ, 72 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, undefined, Δⵠ[0], 13 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(132 * Ⲇ, Ⲇ * 117);
			Δ.bezierCurveTo(Ⲇ * 171, Ⲇ * 86, Ⲇ * 191, 101 * Ⲇ, Ⲇ * 188, Ⲇ * 134);
			Δ.bezierCurveTo(185 * Ⲇ, 154 * Ⲇ, 170 * Ⲇ, Ⲇ * 158, 153 * Ⲇ, Ⲇ * 158);
			Δ.bezierCurveTo(Ⲇ * 143, Ⲇ * 172, Ⲇ * 146, 180 * Ⲇ, 147 * Ⲇ, Ⲇ * 193);
			ⵠᐃ(Δ, ΔⵠⲆⲆΔ, Δⵠ[ⵠᐃΔ], Ⲇ * ⵠⲆⵠΔⲆ);
			ⵠΔᐃ(Δ, 142 * Ⲇ, Ⲇ * 221, 16.1245154965971 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[0])
		}
		return ᐃⵠ
	}

	function ΔⲆⵠⵠΔΔΔΔⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 650 * Ⲇ;
		ᐃⵠ.height = 650 * Ⲇ;
		Δ.scale(1.9, 1.9);
		Δ.save();
		Δ.translate(202.5 * Ⲇ, Ⲇ * 147.5);
		ᐃΔⵠ(Δ, Ⲇ * -96.5, -21.5 * Ⲇ, Ⲇ * 193, Ⲇ * 193, Ⲇ * Ⲇⵠᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⲆ], Δⵠ[1], ᐃⲆᐃⲆⵠ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 203.5, Ⲇ * 121.5);
		ᐃΔⵠ(Δ, -115.5 * Ⲇ, -20.5 * Ⲇ, Ⲇ * 231, 41 * Ⲇ, ΔⵠᐃⲆΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃⲆ], Δⵠ[1], Ⲇ * 12);
		Δ.save();
		Δ.translate(Ⲇ * 203.5, 299 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -115.5, Ⲇ * -20, Ⲇ * 231, 40 * Ⲇ, Ⲇ * ΔΔⲆΔΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔᐃⵠⲆ], ⵠΔⵠΔⵠ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 298.5, Ⲇ * 210);
		ᐃΔⵠ(Δ, Ⲇ * -20.5, -109 * Ⲇ, Ⲇ * 41, 218 * Ⲇ, ⵠΔΔᐃᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[1], Ⲇ * ᐃⲆᐃⲆⵠ);
		Δ.save();
		Δ.translate(108.5 * Ⲇ, Ⲇ * 210);
		ᐃΔⵠ(Δ, -20.5 * Ⲇ, Ⲇ * -109, 41 * Ⲇ, 218 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠⵠⵠⲆ], 12 * Ⲇ);
		Δ.save();
		Δ.translate(204 * Ⲇ, 121.5 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -92, Ⲇ * -9.5, Ⲇ * 184, Ⲇ * ⲆⵠᐃᐃⲆ, Ⲇ * ΔⵠᐃⲆΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[3], ⵠⵠⵠΔΔ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 197, 299 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * 85, -9 * Ⲇ, -170 * Ⲇ, ΔⲆᐃⲆᐃⲆⲆ * Ⲇ, ΔΔᐃⵠⲆ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔΔ], Δⵠ[3], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(94 * Ⲇ, 317 * Ⲇ);
		Δ.bezierCurveTo(110.5 * Ⲇ, Ⲇ * 299.5, 110.5 * Ⲇ, 299.5 * Ⲇ, 127 * Ⲇ, Ⲇ * 282);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃⲆⲆΔᐃ, Δⵠ[ⲆⵠⲆ], ⲆΔᐃⵠⲆⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 279, Ⲇ * 142);
		Δ.bezierCurveTo(296.5 * Ⲇ, Ⲇ * 125.5, Ⲇ * 296.5, 125.5 * Ⲇ, 314 * Ⲇ, Ⲇ * 109);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠⲆⵠⲆ], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(93 * Ⲇ, Ⲇ * 106);
		Δ.bezierCurveTo(Ⲇ * 110.5, Ⲇ * 124, 110.5 * Ⲇ, Ⲇ * 124, 128 * Ⲇ, Ⲇ * 142);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠⵠᐃⲆᐃ, Δⵠ[ⵠᐃᐃ], Ⲇ * ⲆⲆⲆⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(281 * Ⲇ, Ⲇ * 282);
		Δ.bezierCurveTo(Ⲇ * 296, Ⲇ * 297.5, 296 * Ⲇ, 297.5 * Ⲇ, Ⲇ * 311, Ⲇ * 313);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ΔᐃⵠⲆ], Ⲇ * ⵠⲆⲆΔΔ);
		return ᐃⵠ
	}

	function ⲆⲆⵠⲆΔΔⵠΔΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 200;
		ᐃⵠ.height = Ⲇ * 200;
		Δ.translate(Ⲇ * ⵠΔᐃΔΔⲆᐃ, Ⲇ * 12);
		Δ.fillStyle = Δⵠ[0];
		Δ.fillRect(-2, -3, ᐃⵠ.width, ᐃⵠ.height);
		Δ.fillStyle = Δⵠ[ⵠⵠⵠᐃⵠ];
		Δ.fillRect(ⲆⲆᐃⲆ, ᐃⲆΔᐃ, ᐃⵠ.width, ᐃⵠ.height);
		Δ.fillStyle = Δⵠ[17];
		Δ.fillRect(Δⵠⵠ, ⲆⲆᐃ, ᐃⵠ.width, ᐃⵠ.height / 2.1);
		Δ.fillStyle = Δⵠ[26];
		Δ.fillRect(ᐃⵠ.width / 1.77, ᐃⵠ.height / 2.1, ᐃⵠ.width / 2.1, ᐃⵠ.height / 2.1);
		Δ.fillStyle = Δⵠ[28];
		Δ.fillRect(ᐃⵠ.width / 1.77, ᐃⵠ.height / 2.1, 5, ᐃⵠ.height / 2.1);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[ⵠⵠᐃΔⵠᐃⲆ], "so", ⵠⵠⲆⲆ, ⵠΔᐃᐃΔ, 0);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[28], ᐃ[104], 6, ⵠⵠᐃⲆ, ⵠΔⵠⲆ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[28], ᐃ[104], 6, ΔⲆⵠⲆ, ᐃΔΔⲆ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[28], ᐃ[104], 6, Ⲇⵠᐃ, ⵠᐃΔ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[ⲆΔⲆᐃᐃ], ᐃ[502], 2, 2, ⵠᐃᐃⲆ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[ⵠᐃⵠᐃΔ], ᐃ[502], 2, ⲆⲆⲆᐃ, 1);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[5], ᐃ[502], ᐃᐃⵠⵠ, ⵠᐃⲆⵠ, 0);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[ⲆΔⲆᐃᐃ], "t", ⲆΔⲆΔ, ⵠᐃⵠΔᐃ, 4);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[6], "t", 3, ⵠⵠⲆᐃ, ⵠΔΔΔ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[7], "t", 4, ΔⲆⵠⲆ, ⵠᐃⵠ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[8], "b", ⵠᐃⵠⲆ, 3, ᐃᐃⲆⵠ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[ΔⲆΔᐃΔ], "b", 4, ΔᐃⵠⲆ, 0);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[ΔΔⵠⲆ], "s", 2, 2, 2);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[ΔᐃΔⲆ], "s", ⵠᐃᐃΔ, ᐃⵠᐃᐃ, 1);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[4], "s", 4, 0, 0);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[ᐃᐃᐃⲆⵠ], "g", ⵠⵠᐃⲆ, 2, ᐃᐃⵠⵠ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[11], "g", ΔᐃΔⲆ, 1, ⵠⲆⵠⲆ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[ⵠⲆᐃᐃⲆ], "g", ᐃⵠⵠⲆ, ᐃⲆᐃ, 0);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[1], "p", ᐃⵠⵠⲆ, -1);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[25], "dg", ⵠᐃᐃⵠ, ⵠΔᐃᐃ, ᐃⲆΔᐃ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[27], ᐃ[153], 2, 2, 2);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[27], ᐃ[153], 2, 1, 1);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[27], ᐃ[153], ⵠⵠΔⵠ, 0, ⲆⲆΔ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[19], "f", ⵠⵠΔⵠ, ⵠΔⵠⲆ, ⵠⵠᐃⲆ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[ⵠⲆᐃⲆⵠ], "f", 3, ⵠⲆⵠⲆ, 1);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[21], "f", 4, 0, 0);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[22], ᐃ[388], ᐃⲆⵠᐃ, ⵠⲆᐃⵠ, ΔⵠⲆⲆ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[22], ᐃ[388], 3, ⲆⵠΔΔ, 1);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[22], ᐃ[388], ᐃᐃᐃᐃΔ, 0, ᐃⲆΔ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[23], ᐃ[83], 3, Δⵠᐃ, 1);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[23], ᐃ[83], ΔΔᐃⵠΔ, 0, ⵠΔΔⲆ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[23], ᐃ[83], ᐃⲆⵠᐃ, ⲆΔⲆΔ, ⵠᐃᐃⲆ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[23], "d", 3, ⵠⵠⵠⲆ, 1);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[23], "d", ΔⲆⵠΔⲆ, 0, 0);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[23], "d", ᐃᐃⲆⵠ, ⵠⵠᐃⲆ, ᐃⲆⵠᐃ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[24], "a", 2, 2, 2);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[24], "a", ⵠΔΔᐃ, ⲆⵠΔΔ, 1);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[24], "a", ΔΔⲆΔ, 0, ⵠⵠΔΔ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[30], "l", 4, ΔΔⵠⲆ, ⵠⲆΔᐃ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[30], "l", 4, 1, ⲆⲆⲆᐃ);
		ⵠⵠⵠⲆΔ(Δ, Ⲇ, Δⵠ[30], "l", ᐃΔΔΔⲆ, 0, 0);
		ⵠΔᐃ(Δ, 0, 0, ⵠⵠΔΔ);
		Δ.globalCompositeOperation = ᐃ[500];
		Δ.translate(Ⲇ * -9, Ⲇ * -4);
		Δ.rect(5 * Ⲇ, ⵠⵠⵠ, Ⲇ * ᐃⵠ.width, Ⲇ * ᐃⵠ.height, ΔⵠᐃⲆΔ * Ⲇ);
		Δ.lineWidth = Ⲇ * ⲆⲆⵠⵠⲆ;
		Δ.strokeStyle = Δⵠ[16];
		Δ.stroke();
		return ᐃⵠ
	}
	const ⲆᐃΔⵠ = ⵠΔΔⲆ;

	function ΔΔΔⲆⵠⲆΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 170 * Ⲇ;
		ᐃⵠ.height = 173 * Ⲇ;
		Δ.translate(ⵠⲆⲆⲆ * Ⲇ, 5 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.save();
		Δ.translate(Ⲇ * 86.25, Ⲇ * 84.953125);
		Δ.rotate(.32);
		ΔΔΔΔ(Δ, 7, Ⲇ * 42.15447781671598, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]);
		Δ.globalAlpha = ⵠⵠⵠⲆ;
		Δ.translate(-5 * Ⲇ, -5 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 86.25, 84.953125 * Ⲇ);
		Δ.rotate(.32);
		ΔΔΔΔ(Δ, ΔᐃΔⵠⲆⲆⵠ, 42.15447781671598 * Ⲇ, Ⲇ * ΔΔᐃⵠⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠΔΔ], Δⵠ[2], 4 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(Ⲇ * ΔΔⵠⲆΔ, 5 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 86.25, Ⲇ * 84.953125);
		Δ.rotate(.28);
		ΔΔΔΔ(Δ, 7, Ⲇ * 30.463092423455635, ⵠΔⲆⲆΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⲆⲆ]);
		Δ.globalAlpha = ᐃⵠᐃᐃ;
		Δ.translate(Ⲇ * -ᐃⵠΔⵠ, -ⲆᐃΔⲆⵠ * Ⲇ);
		Δ.save();
		Δ.translate(86.25 * Ⲇ, 84.953125 * Ⲇ);
		Δ.rotate(.28);
		ΔΔΔΔ(Δ, ⵠⲆᐃΔⵠ, 30.463092423455635 * Ⲇ, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⵠ], Δⵠ[4], ΔⲆⵠΔⲆ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ⵠΔⲆᐃ * Ⲇ, Ⲇ * 5);
		ⵠΔᐃ(Δ, Ⲇ * 86.25, Ⲇ * 84.953125, Ⲇ * 18.867962264113206);
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]);
		Δ.globalAlpha = ⲆⲆⲆᐃ;
		Δ.translate(Ⲇ * -ⲆᐃΔⲆⵠ, -ΔΔⵠⵠ * Ⲇ);
		ⵠΔᐃ(Δ, 86.25 * Ⲇ, Ⲇ * 84.953125, 18.867962264113206 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[ᐃⲆΔⵠⵠ], Ⲇ * 4);
		return ᐃⵠ
	}
	const ΔΔΔᐃ = ᐃΔΔⲆ;

	function ⵠᐃᐃΔΔⵠⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 170;
		ᐃⵠ.height = Ⲇ * 173;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ΔΔⵠ;
		Δ.translate(Ⲇ * ⲆⵠⲆΔᐃ, 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(85.25 * Ⲇ, Ⲇ * 82.953125);
		Δ.bezierCurveTo(Ⲇ * 98.25, Ⲇ * 46.453125, Ⲇ * 98.25, 46.453125 * Ⲇ, 111.25 * Ⲇ, 9.953125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃⲆⲆΔᐃ, Δⵠ[0], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(111.25 * Ⲇ, 8.953125 * Ⲇ);
		Δ.bezierCurveTo(117.75 * Ⲇ, 12.453125 * Ⲇ, 117.75 * Ⲇ, 12.453125 * Ⲇ, Ⲇ * 124.25, Ⲇ * 15.953125);
		Δ.bezierCurveTo(Ⲇ * 113.75, 39.953125 * Ⲇ, Ⲇ * 113.75, 39.953125 * Ⲇ, Ⲇ * 103.25, Ⲇ * 63.953125);
		Δ.bezierCurveTo(97.75 * Ⲇ, 64.953125 * Ⲇ, 97.75 * Ⲇ, Ⲇ * 64.953125, Ⲇ * 92.25, Ⲇ * 65.953125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(-5 * Ⲇ, -ⵠᐃⲆᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 111.25, Ⲇ * 8.953125);
		Δ.bezierCurveTo(Ⲇ * 117.75, Ⲇ * 12.453125, 117.75 * Ⲇ, 12.453125 * Ⲇ, 124.25 * Ⲇ, Ⲇ * 15.953125);
		Δ.bezierCurveTo(Ⲇ * 113.75, 39.953125 * Ⲇ, 113.75 * Ⲇ, 39.953125 * Ⲇ, 103.25 * Ⲇ, 63.953125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 97.75, 64.953125 * Ⲇ, Ⲇ * 97.75, Ⲇ * 64.953125, 92.25 * Ⲇ, 65.953125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[7]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(85.25 * Ⲇ, Ⲇ * 82.953125);
		Δ.bezierCurveTo(98.25 * Ⲇ, Ⲇ * 46.453125, Ⲇ * 98.25, Ⲇ * 46.453125, 111.25 * Ⲇ, 9.953125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⲆⵠⲆΔⲆ], 4 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(5 * Ⲇ, Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(87.25 * Ⲇ, Ⲇ * 84.953125);
		Δ.bezierCurveTo(123.75 * Ⲇ, Ⲇ * 100.453125, 123.75 * Ⲇ, 100.453125 * Ⲇ, 160.25 * Ⲇ, Ⲇ * 115.953125);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[0], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 160.25, 114.953125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 156.25, 122.453125 * Ⲇ, 156.25 * Ⲇ, 122.453125 * Ⲇ, 152.25 * Ⲇ, 129.953125 * Ⲇ);
		Δ.bezierCurveTo(130.25 * Ⲇ, Ⲇ * 117.953125, Ⲇ * 130.25, 117.953125 * Ⲇ, Ⲇ * 108.25, Ⲇ * 105.953125);
		Δ.bezierCurveTo(107.25 * Ⲇ, Ⲇ * 98.953125, 107.25 * Ⲇ, Ⲇ * 98.953125, Ⲇ * 106.25, 91.953125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(Ⲇ * -5, Ⲇ * -5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 160.25, Ⲇ * 114.953125);
		Δ.bezierCurveTo(156.25 * Ⲇ, Ⲇ * 122.453125, 156.25 * Ⲇ, 122.453125 * Ⲇ, Ⲇ * 152.25, 129.953125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 130.25, 117.953125 * Ⲇ, Ⲇ * 130.25, 117.953125 * Ⲇ, Ⲇ * 108.25, 105.953125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 107.25, 98.953125 * Ⲇ, 107.25 * Ⲇ, Ⲇ * 98.953125, 106.25 * Ⲇ, Ⲇ * 91.953125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⲆᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(87.25 * Ⲇ, Ⲇ * 84.953125);
		Δ.bezierCurveTo(Ⲇ * 123.75, Ⲇ * 100.453125, 123.75 * Ⲇ, 100.453125 * Ⲇ, 160.25 * Ⲇ, Ⲇ * 115.953125);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[6], Ⲇ * ΔⲆⵠΔⲆ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(Ⲇ * 5, ΔΔⵠΔⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(83.25 * Ⲇ, Ⲇ * 83.953125);
		Δ.bezierCurveTo(Ⲇ * 47.75, 68.453125 * Ⲇ, Ⲇ * 47.75, 68.453125 * Ⲇ, Ⲇ * 12.25, Ⲇ * 52.953125);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[ⵠⵠⵠ], Ⲇ * ᐃᐃΔⵠⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(13.25 * Ⲇ, Ⲇ * 53.953125);
		Δ.bezierCurveTo(Ⲇ * 17.25, Ⲇ * 46.953125, Ⲇ * 17.25, 46.953125 * Ⲇ, 21.25 * Ⲇ, Ⲇ * 39.953125);
		Δ.bezierCurveTo(Ⲇ * 42.75, Ⲇ * 52.453125, 42.75 * Ⲇ, 52.453125 * Ⲇ, 64.25 * Ⲇ, Ⲇ * 64.953125);
		Δ.bezierCurveTo(Ⲇ * 64.25, 70.953125 * Ⲇ, 64.25 * Ⲇ, 70.953125 * Ⲇ, Ⲇ * 64.25, 76.953125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]);
		Δ.globalAlpha = ⲆⲆⵠ;
		Δ.translate(Ⲇ * -ⲆᐃΔⲆⵠ, -5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 13.25, Ⲇ * 53.953125);
		Δ.bezierCurveTo(17.25 * Ⲇ, 46.953125 * Ⲇ, 17.25 * Ⲇ, 46.953125 * Ⲇ, Ⲇ * 21.25, Ⲇ * 39.953125);
		Δ.bezierCurveTo(Ⲇ * 42.75, 52.453125 * Ⲇ, Ⲇ * 42.75, Ⲇ * 52.453125, 64.25 * Ⲇ, 64.953125 * Ⲇ);
		Δ.bezierCurveTo(64.25 * Ⲇ, 70.953125 * Ⲇ, 64.25 * Ⲇ, Ⲇ * 70.953125, 64.25 * Ⲇ, Ⲇ * 76.953125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 83.25, 83.953125 * Ⲇ);
		Δ.bezierCurveTo(47.75 * Ⲇ, Ⲇ * 68.453125, Ⲇ * 47.75, 68.453125 * Ⲇ, Ⲇ * 12.25, Ⲇ * 52.953125);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[6], Ⲇ * 4);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ᐃΔⵠΔ;
		Δ.translate(ΔⲆⵠⵠ * Ⲇ, Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(84.25 * Ⲇ, Ⲇ * 86.953125);
		Δ.bezierCurveTo(Ⲇ * 70.25, Ⲇ * 123.953125, Ⲇ * 70.25, Ⲇ * 123.953125, Ⲇ * 56.25, Ⲇ * 160.953125);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[ⵠⵠΔΔ], Ⲇ * ᐃΔΔΔⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 56.25, 159.953125 * Ⲇ);
		Δ.bezierCurveTo(49.25 * Ⲇ, 155.453125 * Ⲇ, 49.25 * Ⲇ, Ⲇ * 155.453125, 42.25 * Ⲇ, 150.953125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 54.25, Ⲇ * 127.953125, Ⲇ * 54.25, Ⲇ * 127.953125, 66.25 * Ⲇ, 104.953125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 71.25, 104.953125 * Ⲇ, Ⲇ * 71.25, 104.953125 * Ⲇ, 76.25 * Ⲇ, Ⲇ * 104.953125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ⲆⲆᐃⵠ;
		Δ.translate(-5 * Ⲇ, Ⲇ * -5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(56.25 * Ⲇ, Ⲇ * 159.953125);
		Δ.bezierCurveTo(49.25 * Ⲇ, Ⲇ * 155.453125, Ⲇ * 49.25, 155.453125 * Ⲇ, 42.25 * Ⲇ, Ⲇ * 150.953125);
		Δ.bezierCurveTo(54.25 * Ⲇ, 127.953125 * Ⲇ, Ⲇ * 54.25, 127.953125 * Ⲇ, 66.25 * Ⲇ, 104.953125 * Ⲇ);
		Δ.bezierCurveTo(71.25 * Ⲇ, Ⲇ * 104.953125, 71.25 * Ⲇ, 104.953125 * Ⲇ, Ⲇ * 76.25, Ⲇ * 104.953125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(84.25 * Ⲇ, Ⲇ * 86.953125);
		Δ.bezierCurveTo(Ⲇ * 70.25, 123.953125 * Ⲇ, 70.25 * Ⲇ, 123.953125 * Ⲇ, 56.25 * Ⲇ, 160.953125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠⲆⵠⵠⵠ], Ⲇ * ΔⵠⲆⵠᐃ);
		return ᐃⵠ
	}
	const ⵠᐃᐃᐃᐃⵠᐃ = ⲆΔᐃΔⵠ;

	function ⲆᐃⵠⵠⵠⲆⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 170;
		ᐃⵠ.height = 173 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ⵠᐃⵠΔᐃ * Ⲇ, Ⲇ * ᐃᐃᐃᐃ);
		Δ.save();
		Δ.translate(Ⲇ * 86.25, Ⲇ * 84.953125);
		ΔΔΔΔ(Δ, 7, Ⲇ * 9.848857801796104, ⵠΔⲆᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ]);
		Δ.globalAlpha = Δⵠᐃ;
		Δ.translate(Ⲇ * -5, -5 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 86.25, 84.953125 * Ⲇ);
		ΔΔΔΔ(Δ, 7, 9.848857801796104 * Ⲇ, 5 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[9], ΔΔΔⵠ * Ⲇ);
		return ᐃⵠ
	}

	function ⲆⲆⵠⲆΔⵠᐃ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 75;
		var ΔⵠⲆ = 55 * Ⲇ;
		var Δᐃⵠ = Ⲇ * 4;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(Ⲇ * -30, -40 * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.bezierCurveTo(67 * Ⲇ, 56 * Ⲇ, 72 * Ⲇ, 71 * Ⲇ, Ⲇ * 72, Ⲇ * 71);
		Δ.bezierCurveTo(Ⲇ * 72, 71 * Ⲇ, 84 * Ⲇ, Ⲇ * 70, Ⲇ * 75, Ⲇ * 82);
		Δ.bezierCurveTo(Ⲇ * 70, Ⲇ * 88, Ⲇ * 61, Ⲇ * 89, Ⲇ * 58, 89 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 55, Ⲇ * 89, Ⲇ * 40, 89 * Ⲇ, 46 * Ⲇ, 77 * Ⲇ);
		Δ.bezierCurveTo(46 * Ⲇ, 77 * Ⲇ, Ⲇ * 43, 63 * Ⲇ, 43 * Ⲇ, Ⲇ * 63);
		Δ.bezierCurveTo(Ⲇ * 35, 61 * Ⲇ, Ⲇ * 35, Ⲇ * 53, Ⲇ * 42, 47 * Ⲇ);
		Δ.bezierCurveTo(48 * Ⲇ, Ⲇ * 42, Ⲇ * 62, Ⲇ * 41, Ⲇ * 66, 43 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 70, Ⲇ * 45, 72 * Ⲇ, 48 * Ⲇ, 67 * Ⲇ, Ⲇ * 56);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃ]);
		Δ.beginPath();
		Δ.bezierCurveTo(Ⲇ * 68, Ⲇ * 61, 72 * Ⲇ, 76 * Ⲇ, 72 * Ⲇ, Ⲇ * 76);
		Δ.bezierCurveTo(Ⲇ * 65, 85 * Ⲇ, 61 * Ⲇ, 85 * Ⲇ, 49 * Ⲇ, Ⲇ * 83);
		Δ.bezierCurveTo(Ⲇ * 49, Ⲇ * 83, 44 * Ⲇ, 63 * Ⲇ, 44 * Ⲇ, Ⲇ * 63);
		Δ.bezierCurveTo(54 * Ⲇ, Ⲇ * 63, 60 * Ⲇ, 63 * Ⲇ, Ⲇ * 67, 55 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.beginPath();
		Δ.moveTo(Ⲇ * 69, 65 * Ⲇ);
		Δ.bezierCurveTo(70 * Ⲇ, Ⲇ * 61, 81 * Ⲇ, 66 * Ⲇ, Ⲇ * 86, 66 * Ⲇ);
		Δ.bezierCurveTo(90 * Ⲇ, 66 * Ⲇ, Ⲇ * 97, 63 * Ⲇ, Ⲇ * 97, 56 * Ⲇ);
		Δ.bezierCurveTo(97 * Ⲇ, Ⲇ * 50, 93 * Ⲇ, 47 * Ⲇ, 88 * Ⲇ, Ⲇ * 44);
		ⵠᐃ(Δ, false, Δⵠ[ᐃⲆⲆ], 2);
		Δ.beginPath();
		Δ.moveTo(Ⲇ * 50, Ⲇ * 48);
		Δ.bezierCurveTo(43 * Ⲇ, Ⲇ * 52, Ⲇ * 50, Ⲇ * 54, Ⲇ * 51, 54 * Ⲇ);
		Δ.bezierCurveTo(54 * Ⲇ, 54 * Ⲇ, Ⲇ * 59, 52 * Ⲇ, 59 * Ⲇ, 49 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 59, Ⲇ * 48, Ⲇ * 55, 46 * Ⲇ, 50 * Ⲇ, Ⲇ * 48);
		ⵠᐃ(Δ, Δⵠ[2]);
		return ᐃⵠ
	}
	const ⲆⲆⲆⲆ = 7600704;
	const Ⲇⵠⵠⵠ = ⲆⲆⲆⲆ["ᐃⵠᐃⲆⲆᐃⵠ"];
	const ⵠᐃⵠᐃⲆΔⵠ = `const ⲆⵠⲆⵠ = (typeof ⲆΔΔΔ === "${Ⲇⵠⵠⵠ}") ? 1 : 0; return ⲆⵠⲆⵠ;`;

	function ⲆΔΔΔ() {
		Ⲇⵠⵠⵠ;
		ⲆⲆⲆⲆ();
		return ⵠᐃⵠᐃⲆΔⵠ
	}
	const ⲆⵠⲆⵠ = 15473922;
	const ᐃΔⵠᐃΔᐃᐃ = new Function(ⲆΔΔΔ + ⵠᐃⵠᐃⲆΔⵠ);
	const ΔⲆⵠᐃᐃⲆᐃ = 15412433;
	if (ᐃΔⵠᐃΔᐃᐃ(ⲆⵠⲆⵠ, ΔⲆⵠᐃᐃⲆᐃ) === 1) {
		const ⲆⲆⲆⲆ = function() {
			for (let Ⲇⵠⵠⵠ = 0; Ⲇⵠⵠⵠ < 5; Ⲇⵠⵠⵠ++) ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("click", (function() {
				ⲆⲆⲆⲆ()
			}))
		};
		ⲆⲆⲆⲆ()
	}
	const ᐃⵠⲆᐃᐃᐃᐃ = ⲆⲆⲆⵠⵠ;

	function ᐃⵠⲆᐃⲆⲆΔⵠⲆ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 195;
		var ΔⵠⲆ = 190 * Ⲇ;
		var Ⲇᐃ = ᐃΔΔ / ⵠⲆΔᐃ;
		var ⲆⲆⲆ = ΔⵠⲆ / 2;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		var ⲆᐃⲆⲆ = Ⲇ * 10;
		var ΔΔΔⲆΔ = 35 * Ⲇ;
		var ᐃᐃⵠⲆⵠ = 150 * Ⲇ;
		var ⲆΔⲆΔⵠ = ΔΔΔⲆΔ / ⵠᐃᐃⲆ;
		var ⵠⲆⵠᐃⲆ = ᐃᐃⵠⲆⵠ / 2;
		var Δᐃⵠ = Ⲇ * ⵠⲆᐃⲆ;
		Δ.translate(Ⲇᐃ - Ⲇ * ᐃⵠΔⵠ, ⲆⲆⲆ - 5 * Ⲇ);
		Δ.rotate(-Math.PI / 1.25);
		Δ.globalAlpha = ⵠᐃᐃ;
		ᐃΔⵠ(Δ, -ⲆΔⲆΔⵠ, -ⵠⲆⵠᐃⲆ, ΔΔΔⲆΔ, ᐃᐃⵠⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ], Δⵠ[ⲆⲆⵠ], Δᐃⵠ);
		Δ.translate(0, Δⵠⵠ);
		Δ.rotate(Math.PI / 3);
		Δ.globalAlpha = 1;
		ᐃΔⵠ(Δ, -ⲆΔⲆΔⵠ, -ⵠⲆⵠᐃⲆ, ΔΔΔⲆΔ, ᐃᐃⵠⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ], Δⵠ[ⲆⲆⲆᐃ], Δᐃⵠ);
		Δ.translate(0, ΔⲆⵠⵠ);
		ᐃΔⵠ(Δ, -ⲆΔⲆΔⵠ / 2, -ⵠⲆⵠᐃⲆ / 2, ΔΔΔⲆΔ / 2, ᐃᐃⵠⲆⵠ / ⵠⵠΔⲆ, ⲆᐃⲆⲆ - 2);
		ⵠᐃ(Δ, Δⵠ[1]);
		return ᐃⵠ
	}

	function ΔᐃᐃⲆ(Ⲇ, ⵠⵠΔᐃᐃᐃᐃ, ΔΔΔⲆⲆΔⲆⲆⲆ, Δⵠ, ⵠⵠΔᐃ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 70 * Ⲇ;
		var ΔⵠⲆ = Ⲇ * 70;
		var ΔⲆⵠ = ΔⵠᐃⲆΔ * Ⲇ;
		var ᐃΔⵠᐃ = ΔΔⵠⵠ * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ + ᐃΔⵠᐃ;
		for (var ᐃⲆ = ΔᐃⲆⲆ; ᐃⲆ < ⵠⵠΔᐃᐃᐃᐃ.length; ᐃⲆ++) {
			var ⲆΔΔ = ⵠⵠΔᐃᐃᐃᐃ[ᐃⲆ];
			Δ.globalAlpha = ⲆΔΔ.a;
			var ⵠⵠ = ⲆΔΔ.f(ΔΔΔⲆⲆΔⲆⲆⲆ, false, ⲆΔΔ.c);
			Δ.save();
			Δ.translate(ᐃΔΔ / 2 + ⲆΔΔ.x * Ⲇ, ΔⵠⲆ / ΔΔⵠⲆ + ⲆΔΔ.y * Ⲇ);
			Δ.rotate(ⲆΔΔ.r);
			Δ.drawImage(ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ⵠⲆᐃⵠ);
			Δ.restore()
		}
		var ᐃⲆⵠ = [];
		for (var ᐃⲆ = ᐃⲆΔ; Δⵠ.length > ᐃⲆ; ᐃⲆ++) {
			var ᐃᐃⵠᐃⵠⲆᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
			var ᐃⵠⵠⲆⵠ = ᐃᐃⵠᐃⵠⲆᐃ.getContext(ᐃ[269]);
			ᐃᐃⵠᐃⵠⲆᐃ.width = ᐃΔΔ;
			ᐃᐃⵠᐃⵠⲆᐃ.height = ΔⵠⲆ + ᐃΔⵠᐃ;
			ᐃⵠⵠⲆⵠ.globalAlpha = ⵠⵠΔᐃ / 2;
			if (ᐃⲆ == ᐃⲆⵠᐃ) ᐃΔⵠ(ᐃⵠⵠⲆⵠ, 0, ᐃΔⵠᐃ, ᐃΔΔ, ΔⵠⲆ, ΔⲆⵠ);
			else ᐃΔⵠ(ᐃⵠⵠⲆⵠ, 0, ⲆⲆΔ, ᐃΔΔ, ΔⵠⲆ + ᐃΔⵠᐃ, ΔⲆⵠ);
			ⵠᐃ(ᐃⵠⵠⲆⵠ, "#081a19");
			ᐃⵠⵠⲆⵠ.globalAlpha = ⵠⵠΔᐃ;
			ᐃⲆ == 2 ? ᐃΔⵠ(ᐃⵠⵠⲆⵠ, ⵠᐃⲆⵠ, ᐃΔⵠᐃ, ᐃΔΔ, ΔⵠⲆ, ΔⲆⵠ) : ᐃΔⵠ(ᐃⵠⵠⲆⵠ, 0, ᐃⲆΔ, ᐃΔΔ, ΔⵠⲆ, ΔⲆⵠ);
			ⵠᐃ(ᐃⵠⵠⲆⵠ, Δⵠ[ᐃⲆ]);
			ᐃⵠⵠⲆⵠ.globalAlpha = ⵠⵠⵠⲆ;
			if (2 == ᐃⲆ) ᐃⵠⵠⲆⵠ.drawImage(ᐃⵠ, ⲆᐃΔⵠ, ᐃΔⵠᐃ);
			else ᐃⵠⵠⲆⵠ.drawImage(ᐃⵠ, ⵠⵠⵠ, 0);
			ᐃⲆⵠ.push(ⲆΔⲆ(ᐃᐃⵠᐃⵠⲆᐃ))
		}
		return ᐃⲆⵠ
	}
	const ⵠΔⵠᐃⵠ = ⲆⲆᐃᐃⵠ;

	function ⲆΔᐃⵠⵠΔΔ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 135 * Ⲇ;
		var ΔⵠⲆ = Ⲇ * 190;
		var Ⲇᐃ = ᐃΔΔ / ⵠⲆΔᐃ;
		var ⲆⲆⲆ = ΔⵠⲆ / ᐃᐃΔⵠ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		var ⲆᐃⲆⲆ = Ⲇ * 10;
		var ΔΔΔⲆΔ = Ⲇ * 25;
		var ᐃᐃⵠⲆⵠ = 180 * Ⲇ;
		var ⲆΔⲆΔⵠ = ΔΔΔⲆΔ / 2;
		var ⵠⲆⵠᐃⲆ = ᐃᐃⵠⲆⵠ / 2;
		var Δᐃⵠ = Ⲇ * 4;
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ);
		Δ.rotate(-Math.PI / ᐃᐃⲆⵠᐃ);
		Δ.globalAlpha = ΔΔⵠ;
		ᐃΔⵠ(Δ, -ⲆΔⲆΔⵠ, -ⵠⲆⵠᐃⲆ, ΔΔΔⲆΔ, ᐃᐃⵠⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], Δᐃⵠ);
		Δ.translate(0, ⵠⵠⵠ);
		Δ.rotate(Math.PI / ⵠⲆⲆⲆ);
		Δ.globalAlpha = ⲆⲆⵠ;
		ᐃΔⵠ(Δ, -ⲆΔⲆΔⵠ, -ⵠⲆⵠᐃⲆ, ΔΔΔⲆΔ, ᐃᐃⵠⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔ], Δⵠ[1], Δᐃⵠ);
		return ᐃⵠ
	}

	function ⲆⲆᐃⲆⲆⵠΔ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 370;
		var ΔⵠⲆ = 370 * Ⲇ;
		var Ⲇᐃ = ᐃΔΔ / ⵠᐃᐃⲆ;
		var ⲆⲆⲆ = ΔⵠⲆ / ⵠⲆΔᐃ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		var ΔⲆⵠ = Ⲇ * 180;
		Δ.globalAlpha = .2;
		ⵠΔᐃ(Δ, Ⲇᐃ, ⲆⲆⲆ, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ]);
		return ᐃⵠ
	}

	function ΔΔⵠᐃⲆⵠᐃⲆⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 149;
		ᐃⵠ.height = Ⲇ * 356;
		Δ.save();
		Δ.translate(74.5 * Ⲇ, Ⲇ * 177.5);
		ᐃΔⵠ(Δ, -57.5 * Ⲇ, Ⲇ * -161.5, 100 * Ⲇ, Ⲇ * 323, ⵠΔⵠᐃⵠ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ], Δⵠ[1], Ⲇ * 4);
		Δ.save();
		Δ.translate(74.5 * Ⲇ, Ⲇ * 177.5);
		ᐃΔⵠ(Δ, Ⲇ * -57.5, 50.5 * Ⲇ, 100 * Ⲇ, 105 * Ⲇ, ΔⵠΔᐃΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠⵠⲆ], Δⵠ[1], Ⲇ * ⵠⵠⵠᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 16, 125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 74.5, Ⲇ * 125, Ⲇ * 118, Ⲇ * 125, Ⲇ * 118, Ⲇ * 125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ᐃᐃⵠⵠ], Ⲇ * ⵠᐃⲆⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 16, 120 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 74.5, 120 * Ⲇ, 74.5 * Ⲇ, 120 * Ⲇ, Ⲇ * 118, Ⲇ * 120);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⵠ], Δⵠ[ⵠᐃᐃⵠ], ⵠᐃⲆⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 16, 228 * Ⲇ);
		Δ.bezierCurveTo(75 * Ⲇ, Ⲇ * 228.5, 118 * Ⲇ, Ⲇ * 228.5, Ⲇ * 118, 229 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔⵠ], Δⵠ[ⲆΔⲆΔ], ⵠΔⵠᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 16, Ⲇ * 224);
		Δ.bezierCurveTo(Ⲇ * 75, Ⲇ * 224, 118 * Ⲇ, 224 * Ⲇ, Ⲇ * 118, 224 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[3], Ⲇ * ⵠΔΔᐃᐃ);
		Δ.save();
		Δ.translate(Ⲇ * 72, Ⲇ * 68.5);
		ᐃΔⵠ(Δ, -41.5 * Ⲇ, -36.5 * Ⲇ, Ⲇ * 73, 73 * Ⲇ, Ⲇ * 13);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⵠΔ]);
		Δ.save();
		Δ.translate(Ⲇ * 72, Ⲇ * 175.5);
		ᐃΔⵠ(Δ, Ⲇ * -41.5, -38.5 * Ⲇ, 73 * Ⲇ, 73 * Ⲇ, Ⲇ * 13);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⲆᐃⲆ]);
		Δ.save();
		Δ.translate(72 * Ⲇ, 279.5 * Ⲇ);
		ᐃΔⵠ(Δ, -41.5 * Ⲇ, -40.5 * Ⲇ, Ⲇ * 73, Ⲇ * 73, Ⲇ * ᐃᐃΔΔΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[4]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ᐃⲆⲆΔᐃⵠΔ * Ⲇ, 338 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 75, Ⲇ * 338, Ⲇ * 118, 338 * Ⲇ, Ⲇ * 118, 338 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ΔⵠⲆⲆ], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ΔᐃⵠⲆᐃⵠᐃ * Ⲇ, Ⲇ * 333);
		Δ.bezierCurveTo(Ⲇ * 75, 333 * Ⲇ, Ⲇ * 118, 333 * Ⲇ, Ⲇ * 118, Ⲇ * 333);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠᐃᐃⵠ], Ⲇ * 10);
		return ᐃⵠ
	}

	function ⲆⲆⲆᐃⲆⵠᐃ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 193;
		var ΔⵠⲆ = Ⲇ * 198;
		var Ⲇᐃ = Ⲇ * 140;
		var ⲆⲆⲆ = 90 * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		var ⲆᐃⲆⲆ = ⲆΔⲆᐃⵠ * Ⲇ;
		var ΔΔΔⲆΔ = 25 * Ⲇ;
		var ᐃᐃⵠⲆⵠ = 180 * Ⲇ;
		var ⲆΔⲆΔⵠ = ΔΔΔⲆΔ / 2;
		var ⵠⲆⵠᐃⲆ = ᐃᐃⵠⲆⵠ / ⵠⵠᐃⲆ;
		var Δᐃⵠ = 4 * Ⲇ;
		Δ.translate(Ⲇ * -25, Ⲇ * ΔΔⵠ);
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ);
		Δ.rotate(-Math.PI / 5);
		ᐃΔⵠ(Δ, -ⲆΔⲆΔⵠ, -ⵠⲆⵠᐃⲆ, ΔΔΔⲆΔ, ᐃᐃⵠⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ], Δⵠ[ᐃⲆⲆ], Δᐃⵠ);
		Δ.translate(-30 * Ⲇ, -25 * Ⲇ);
		Δ.rotate(Math.PI / 3);
		ᐃΔⵠ(Δ, -ⲆΔⲆΔⵠ, -ⵠⲆⵠᐃⲆ, ΔΔΔⲆΔ, ᐃᐃⵠⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], Δᐃⵠ);
		Δ.translate(Ⲇ * 35, 30 * Ⲇ);
		Δ.rotate(Math.PI / ⲆⲆΔΔ);
		ᐃΔⵠ(Δ, -ⲆΔⲆΔⵠ, -ⵠⲆⵠᐃⲆ, ΔΔΔⲆΔ, ᐃᐃⵠⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ], Δⵠ[ᐃⲆⲆ], Δᐃⵠ);
		return ᐃⵠ
	}

	function ᐃⲆⵠⵠᐃᐃΔ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 145;
		var ΔⵠⲆ = 145 * Ⲇ;
		var Ⲇᐃ = ᐃΔΔ / 2;
		var ⲆⲆⲆ = ΔⵠⲆ / 2;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		var ΔⲆⵠ = Ⲇ * 70;
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ);
		Δ.globalAlpha = .4;
		ⵠΔᐃ(Δ, ᐃⲆΔ, ᐃⲆΔᐃ, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[0]);
		var ΔⲆⵠ = 50 * Ⲇ;
		Δ.translate(ⵠⵠⵠ, ⲆⲆᐃ);
		Δ.globalAlpha = .8;
		ⵠΔᐃ(Δ, 0, ΔᐃⲆⲆ, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[0]);
		var ΔⲆⵠ = Ⲇ * 35;
		Δ.translate(0, ⵠⵠΔΔ);
		Δ.globalAlpha = .8;
		ⵠΔᐃ(Δ, ⲆⲆᐃⲆ, 0, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[Δⵠᐃ]);
		var ΔⲆⵠ = 20 * Ⲇ;
		Δ.translate(ⲆᐃΔⵠ, ⲆᐃΔⵠ);
		Δ.globalAlpha = .8;
		ⵠΔᐃ(Δ, 0, ⲆⲆᐃⲆ, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆⵠ]);
		return ᐃⵠ
	}

	function ⵠⲆⵠΔⵠΔⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 155;
		ᐃⵠ.height = 127 * Ⲇ;
		Δ.globalAlpha = .5;
		Δ.translate(0, 8 * Ⲇ);
		Δ.translate(Ⲇ * -ⵠΔⵠᐃⲆ, Ⲇ * -20);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(55 * Ⲇ, Ⲇ * 68);
		Δ.bezierCurveTo(86 * Ⲇ, Ⲇ * 64, Ⲇ * 117, Ⲇ * 66, 134 * Ⲇ, Ⲇ * 68);
		Δ.bezierCurveTo(152 * Ⲇ, 69 * Ⲇ, Ⲇ * 165, 86 * Ⲇ, 152 * Ⲇ, 104 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 146, Ⲇ * 87, 122 * Ⲇ, Ⲇ * 89, 98 * Ⲇ, Ⲇ * 90);
		Δ.bezierCurveTo(Ⲇ * 64, 89 * Ⲇ, 41 * Ⲇ, Ⲇ * 91, Ⲇ * 36, 106 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ⲆⵠⲆⵠⲆ, 92 * Ⲇ, 31 * Ⲇ, 71 * Ⲇ, Ⲇ * 54, Ⲇ * 69);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(ⵠⵠΔΔ, -8 * Ⲇ);
		Δ.translate(7 * Ⲇ, 20 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 24, Ⲇ * 28);
		Δ.bezierCurveTo(39 * Ⲇ, 30 * Ⲇ, 37 * Ⲇ, Ⲇ * 31, 40 * Ⲇ, Ⲇ * 32);
		Δ.bezierCurveTo(Ⲇ * 22, 45 * Ⲇ, 26 * Ⲇ, 58 * Ⲇ, Ⲇ * 29, Ⲇ * 66);
		Δ.bezierCurveTo(Ⲇ * 86.5, Ⲇ * 65, Ⲇ * 86.5, Ⲇ * 65, 144 * Ⲇ, Ⲇ * 64);
		Δ.bezierCurveTo(151 * Ⲇ, Ⲇ * 42, Ⲇ * 132, ⲆΔᐃΔⵠ * Ⲇ, 120 * Ⲇ, 16 * Ⲇ);
		Δ.bezierCurveTo(106 * Ⲇ, Ⲇ * 12, 89 * Ⲇ, Ⲇ * ⲆᐃΔⵠ, 73 * Ⲇ, Ⲇ * 3);
		Δ.bezierCurveTo(Ⲇ * 51, Ⲇ * ᐃᐃᐃⲆⲆ, Ⲇ * 36, 20 * Ⲇ, Ⲇ * 25, Ⲇ * 28);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆΔΔⲆ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(30 * Ⲇ, 41 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 49, 31 * Ⲇ, Ⲇ * 53, 29 * Ⲇ, Ⲇ * 62, Ⲇ * 27);
		Δ.bezierCurveTo(Ⲇ * 59, Ⲇ * 24, 56 * Ⲇ, 25 * Ⲇ, 53 * Ⲇ, 24 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 67, 15 * Ⲇ, Ⲇ * 84, ⵠⲆⲆΔΔ * Ⲇ, 120 * Ⲇ, Ⲇ * 16);
		Δ.bezierCurveTo(Ⲇ * 107, ⵠᐃᐃᐃⲆΔⲆ * Ⲇ, 96 * Ⲇ, Ⲇ * 6, Ⲇ * 85, 2 * Ⲇ);
		Δ.bezierCurveTo(59 * Ⲇ, ⵠᐃⵠⲆ * Ⲇ, Ⲇ * 54, Ⲇ * 7, 40 * Ⲇ, Ⲇ * ⵠⲆⵠΔⵠΔᐃ);
		Δ.bezierCurveTo(Ⲇ * 32.5, 22.5 * Ⲇ, Ⲇ * 32.5, Ⲇ * 22.5, 25 * Ⲇ, Ⲇ * 28);
		Δ.bezierCurveTo(Ⲇ * 32, Ⲇ * 30, 32 * Ⲇ, 30 * Ⲇ, 39 * Ⲇ, 32 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 24, 28 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 39, Ⲇ * 30, Ⲇ * 37, Ⲇ * 31, Ⲇ * 40, 32 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 22, 45 * Ⲇ, 26 * Ⲇ, Ⲇ * 58, Ⲇ * 29, 66 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 86.5, Ⲇ * 65, Ⲇ * 86.5, 65 * Ⲇ, Ⲇ * 144, 64 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 151, 42 * Ⲇ, 132 * Ⲇ, 20 * Ⲇ, Ⲇ * 120, Ⲇ * ⵠᐃⲆⵠΔⲆⵠ);
		Δ.bezierCurveTo(106 * Ⲇ, 12 * Ⲇ, 89 * Ⲇ, Ⲇ * 0, Ⲇ * 73, Ⲇ * 3);
		Δ.bezierCurveTo(Ⲇ * 51, Ⲇ * 5, 36 * Ⲇ, Ⲇ * ⲆⵠΔⵠⵠ, 25 * Ⲇ, Ⲇ * 28);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠⵠᐃⵠΔ, Δⵠ[ᐃⲆⵠᐃ], 4 * Ⲇ);
		ⵠΔᐃ(Δ, ⲆⲆΔⵠⲆ * Ⲇ, Ⲇ * 38, Ⲇ * 14.866068747318506);
		ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⲆ], Δⵠ[5], Ⲇ * ΔⲆΔⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(39 * Ⲇ, 30 * Ⲇ);
		Δ.bezierCurveTo(27 * Ⲇ, Ⲇ * 38, 25 * Ⲇ, 50 * Ⲇ, 26 * Ⲇ, 60 * Ⲇ);
		Δ.bezierCurveTo(36.5 * Ⲇ, Ⲇ * 58.5, Ⲇ * 36.5, Ⲇ * 58.5, 47 * Ⲇ, 57 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 4 * Ⲇ);
		Δ.translate(-ΔΔⵠⲆⵠⵠᐃ * Ⲇ, -ΔⲆⵠⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(27 * Ⲇ, 74 * Ⲇ);
		Δ.bezierCurveTo(38 * Ⲇ, 77.5 * Ⲇ, Ⲇ * 38, Ⲇ * 77.5, 49 * Ⲇ, 81 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 54.5, 75.5 * Ⲇ, 54.5 * Ⲇ, Ⲇ * 75.5, 60 * Ⲇ, 70 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 64, Ⲇ * 72, 64 * Ⲇ, 72 * Ⲇ, 68 * Ⲇ, Ⲇ * 74);
		Δ.bezierCurveTo(Ⲇ * 80.5, 67.5 * Ⲇ, 80.5 * Ⲇ, 67.5 * Ⲇ, 93 * Ⲇ, 61 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 104.5, Ⲇ * 68, 104.5 * Ⲇ, Ⲇ * 68, Ⲇ * 116, Ⲇ * 75);
		Δ.bezierCurveTo(Ⲇ * 120.5, Ⲇ * 72.5, 120.5 * Ⲇ, Ⲇ * 72.5, 125 * Ⲇ, Ⲇ * 70);
		Δ.bezierCurveTo(Ⲇ * 129, 75 * Ⲇ, Ⲇ * 129, Ⲇ * 75, 133 * Ⲇ, 80 * Ⲇ);
		Δ.bezierCurveTo(145.5 * Ⲇ, 76.5 * Ⲇ, Ⲇ * 145.5, Ⲇ * 76.5, Ⲇ * 158, Ⲇ * 73);
		Δ.bezierCurveTo(158 * Ⲇ, Ⲇ * 87, 158 * Ⲇ, 93 * Ⲇ, Ⲇ * 155, Ⲇ * 95);
		Δ.bezierCurveTo(Ⲇ * 152.5, Ⲇ * 96, Ⲇ * 152.5, Ⲇ * 96, 150 * Ⲇ, Ⲇ * 97);
		Δ.bezierCurveTo(Ⲇ * 121, 85 * Ⲇ, 108 * Ⲇ, Ⲇ * 86, Ⲇ * 93, Ⲇ * 85);
		Δ.bezierCurveTo(64 * Ⲇ, 85 * Ⲇ, Ⲇ * 52, Ⲇ * 95, 38 * Ⲇ, 99 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 36, Ⲇ * 98.5, 36 * Ⲇ, Ⲇ * 98.5, Ⲇ * 34, Ⲇ * 98);
		Δ.bezierCurveTo(Ⲇ * 25, 98 * Ⲇ, 27 * Ⲇ, Ⲇ * 91, Ⲇ * 27, 76 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆⲆⵠ], Δⵠ[7], ⵠΔᐃᐃ * Ⲇ);
		return ᐃⵠ
	}

	function ᐃᐃⵠⲆⵠⲆⲆ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 205 * Ⲇ;
		var ΔⵠⲆ = Ⲇ * 205;
		var Ⲇᐃ = ᐃΔΔ / ⵠⵠΔⵠ;
		var ⲆⲆⲆ = ΔⵠⲆ / ⵠΔΔΔ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		var ΔⲆⵠ = Ⲇ * ⵠⵠΔΔᐃ;
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ);
		Δ.globalAlpha = ⵠᐃᐃ;
		ⵠΔᐃ(Δ, 0, 0, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[0]);
		return ᐃⵠ
	}
	const ᐃⲆᐃⵠᐃ = ᐃᐃΔⲆⲆ;

	function ⲆᐃⲆᐃⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 105 * Ⲇ;
		var ΔⵠⲆ = 125 * Ⲇ;
		var Δᐃⵠ = ⵠⲆᐃⲆ * Ⲇ;
		var w2 = ᐃΔΔ / 2;
		var ΔⲆΔⵠⵠ = ΔⵠⲆ / 2;
		var ⲆᐃⲆⲆ = Ⲇ * ΔⵠᐃⲆΔ;
		var ᐃΔⵠᐃ = Ⲇ * Δᐃᐃⵠ;
		var ⲆⵠⲆΔⲆᐃⵠ = Ⲇ * ⲆΔᐃⵠΔ;
		var ⵠᐃⲆΔΔᐃⲆ = Ⲇ * 110;
		var ⲆⲆΔⵠᐃΔⵠ = ⲆⵠⲆΔⲆᐃⵠ / ⵠᐃᐃⲆ;
		var ΔΔⲆⵠⵠΔⵠ = ⵠᐃⲆΔΔᐃⲆ / 2;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.save();
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⲆᐃⵠ;
		Δ.translate(ᐃΔΔ / 2 + Ⲇ * ⲆᐃⲆᐃᐃ, ΔⵠⲆ / 2 + ᐃΔⵠᐃ);
		ᐃΔⵠ(Δ, -ⲆⲆΔⵠᐃΔⵠ, -ΔΔⲆⵠⵠΔⵠ, ⲆⵠⲆΔⲆᐃⵠ, ⵠᐃⲆΔΔᐃⲆ, ⲆᐃⲆⲆ);
		if (Δⵠᐃⵠ) {
			ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ])
		} else {
			ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ])
		}
		Δ.translate(-130 * Ⲇ + ᐃΔⵠᐃ, -128 * Ⲇ + ᐃΔⵠᐃ);
		Δ.beginPath();
		Δ.bezierCurveTo(Ⲇ * 159, 93 * Ⲇ, Ⲇ * 156, Ⲇ * 99, 154 * Ⲇ, Ⲇ * 102);
		Δ.bezierCurveTo(128 * Ⲇ, Ⲇ * 92, 90 * Ⲇ, 93 * Ⲇ, Ⲇ * 72, Ⲇ * 96);
		Δ.bezierCurveTo(Ⲇ * 68, 84 * Ⲇ, 143 * Ⲇ, 73 * Ⲇ, 162 * Ⲇ, Ⲇ * 86);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.restore();
		Δ.translate(ᐃΔΔ / 2 + ⲆⲆᐃⲆⵠ, ΔⵠⲆ / 2);
		Δ.globalAlpha = ⲆⵠΔΔ;
		ᐃΔⵠ(Δ, -ⲆⲆΔⵠᐃΔⵠ, -ΔΔⲆⵠⵠΔⵠ, ⲆⵠⲆΔⲆᐃⵠ, ⵠᐃⲆΔΔᐃⲆ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⵠ], Δⵠ[ⵠⵠⵠᐃⲆ], Δᐃⵠ);
		Δ.translate(Ⲇ * -130, Ⲇ * -125);
		Δ.beginPath();
		Δ.bezierCurveTo(159 * Ⲇ, 93 * Ⲇ, 156 * Ⲇ, Ⲇ * 99, Ⲇ * 154, Ⲇ * 102);
		Δ.bezierCurveTo(128 * Ⲇ, Ⲇ * 92, Ⲇ * 90, Ⲇ * 93, 72 * Ⲇ, 96 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 68, 84 * Ⲇ, 143 * Ⲇ, 73 * Ⲇ, 162 * Ⲇ, 86 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[ΔⲆⵠΔᐃ], Δᐃⵠ);
		return ᐃⵠ
	}

	function ⲆᐃⵠΔᐃⵠⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 40;
		var ΔⵠⲆ = 40 * Ⲇ;
		var ΔⲆⵠ = ⲆⵠΔⵠⲆΔΔ * Ⲇ;
		var Δᐃⵠ = 4 * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(ᐃΔΔ / ⵠⲆΔᐃ, ΔⵠⲆ / ΔΔⵠⲆ);
		Δ.globalAlpha = ᐃⲆⲆ;
		ⵠΔᐃ(Δ, ⵠⵠᐃ, 0, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ], Δⵠ[1], Δᐃⵠ);
		return ᐃⵠ
	}

	function ⵠⵠΔⲆⲆᐃⲆ(Ⲇ, Δⵠ, ΔⲆΔ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 450 * Ⲇ;
		var ΔⵠⲆ = Ⲇ * 145;
		var w2 = ᐃΔΔ / ⵠΔⵠⲆ;
		var ΔⲆΔⵠⵠ = ΔⵠⲆ / 2;
		var ⲆᐃⲆⲆ = 10 * Ⲇ;
		var ᐃΔⵠᐃ = 20 * Ⲇ;
		var ΔΔⲆⵠΔ = Ⲇ * 300;
		var ΔΔⵠΔⲆ = 30 * Ⲇ;
		var ΔⲆⵠ = Ⲇ * 80;
		var ᐃΔᐃᐃⵠ = ΔΔⲆⵠΔ / ᐃᐃⲆⵠ;
		var ᐃΔΔⲆΔ = ΔΔⵠΔⲆ / ⵠᐃᐃⲆ;
		var Δᐃⵠ = 4;
		if (ΔⲆΔ) {
			var ᐃΔΔ = Ⲇ * 145;
			var ΔⵠⲆ = 450 * Ⲇ;
			ᐃⵠ.width = ᐃΔΔ;
			ᐃⵠ.height = ΔⵠⲆ;
			Δ.rotate(Math.PI / ⵠΔΔΔ);
			Δ.save();
			Δ.globalAlpha = .5;
			ᐃΔⵠ(Δ, Ⲇ * 100, Ⲇ * -110, ΔΔⲆⵠΔ, ΔΔⵠΔⲆ, ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]);
			Δ.translate(Ⲇ * 178, -98 * Ⲇ);
			ᐃΔⵠ(Δ, -ᐃΔᐃᐃⵠ, -ᐃΔΔⲆΔ - ΔⵠΔᐃⵠ * Ⲇ, Ⲇ * 100, Ⲇ * 100, ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.translate(Ⲇ * -50, ᐃⵠΔⵠ * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * 220, -15 * Ⲇ, Ⲇ * 90, Ⲇ * 90, ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.restore();
			Δ.save();
			Δ.globalAlpha = 1;
			Δ.translate(250 * Ⲇ, Ⲇ * -63);
			ᐃΔⵠ(Δ, -ᐃΔᐃᐃⵠ - Ⲇ * 20, -ᐃΔΔⲆΔ, ΔΔⲆⵠΔ, ΔΔⵠΔⲆ, ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[ΔⵠⲆⲆ], Δᐃⵠ);
			Δ.translate(Ⲇ * -70, -40 * Ⲇ);
			ᐃΔⵠ(Δ, -ᐃΔᐃᐃⵠ - 20 * Ⲇ, -ᐃΔΔⲆΔ, Ⲇ * 100, Ⲇ * 100, ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⵠ], Δⵠ[ΔⲆⵠΔⲆ], Δᐃⵠ);
			Δ.translate(Ⲇ * -70, ΔⲆΔΔΔΔᐃ * Ⲇ);
			ᐃΔⵠ(Δ, 220 * Ⲇ, -22 * Ⲇ, 90 * Ⲇ, Ⲇ * 90, ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⲆ], Δⵠ[4], Δᐃⵠ);
			ᐃΔⵠ(Δ, Ⲇ * 230, -ⲆⲆⲆⲆΔ * Ⲇ, Ⲇ * 55, Ⲇ * 55, ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[ΔΔⵠⵠ]);
			Δ.translate(Ⲇ * -70, 0);
			ᐃΔⵠ(Δ, Ⲇ * -ΔⲆΔΔΔΔᐃ, -Ⲇᐃⵠⵠ * Ⲇ, 60 * Ⲇ, 60 * Ⲇ, ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠᐃΔ]);
			Δ.restore()
		} else {
			ᐃⵠ.width = ᐃΔΔ;
			ᐃⵠ.height = ΔⵠⲆ;
			Δ.save();
			Δ.globalAlpha = .5;
			Δ.translate(w2, ΔⲆΔⵠⵠ + ⵠΔⲆⲆΔ * Ⲇ);
			ᐃΔⵠ(Δ, -ᐃΔᐃᐃⵠ, -ᐃΔΔⲆΔ, ΔΔⲆⵠΔ, ΔΔⵠΔⲆ, ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]);
			Δ.translate(-65 * Ⲇ, -25 * Ⲇ);
			ᐃΔⵠ(Δ, -ᐃΔᐃᐃⵠ, -ᐃΔΔⲆΔ - Ⲇ * 6, ᐃⵠⵠΔⲆ * Ⲇ, Ⲇ * ⲆⵠΔΔΔ, Ⲇ * ⲆⲆⲆΔⵠ);
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.translate(-35 * Ⲇ, Ⲇ * -5);
			ᐃΔⵠ(Δ, Ⲇ * 220, -ⵠⵠΔⵠᐃ * Ⲇ, Ⲇ * 90, 90 * Ⲇ, 15 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.restore();
			Δ.save();
			Δ.globalAlpha = ᐃΔⵠΔ;
			Δ.translate(Ⲇ * 240, 70 * Ⲇ);
			ᐃΔⵠ(Δ, -ᐃΔᐃᐃⵠ, -ᐃΔΔⲆΔ, ΔΔⲆⵠΔ, ΔΔⵠΔⲆ, ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[ⵠⵠᐃⲆ], Δᐃⵠ);
			Δ.translate(Ⲇ * -60, -40 * Ⲇ);
			ᐃΔⵠ(Δ, -ᐃΔᐃᐃⵠ - Ⲇ * 20, -ᐃΔΔⲆΔ, ΔⵠⲆⵠⲆ * Ⲇ, Ⲇ * 100, 15 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃΔⵠᐃⲆ], Δᐃⵠ);
			Δ.translate(-55 * Ⲇ, ΔⵠΔᐃΔ * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * 220, -22 * Ⲇ, Ⲇ * 90, Ⲇ * 90, Ⲇ * 15);
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔⵠⲆⵠᐃ], Δᐃⵠ);
			ᐃΔⵠ(Δ, 240 * Ⲇ, -ⲆᐃⵠⲆⵠ * Ⲇ, Ⲇ * 55, Ⲇ * 55, Ⲇ * ⵠᐃᐃᐃⵠⵠⵠ);
			ⵠᐃ(Δ, Δⵠ[5]);
			Δ.translate(Ⲇ * 45, Δⵠⵠ * Ⲇ);
			ᐃΔⵠ(Δ, -145 * Ⲇ, -2 * Ⲇ, 60 * Ⲇ, 60 * Ⲇ, 12 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⵠⲆⲆⲆ]);
			Δ.restore()
		}
		return ᐃⵠ
	}

	function ᐃⲆⲆΔᐃᐃᐃ(Ⲇ, Δⵠ, ᐃⲆ, ⵠⲆᐃᐃⵠⲆΔ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 121;
		ᐃⵠ.height = 130 * Ⲇ;
		Δ.translate(ⲆᐃΔⵠ, 20 * Ⲇ);
		if (ᐃⲆ == ΔΔⵠ) {
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(ⵠⲆⵠⵠⵠ * Ⲇ, Ⲇ * 23);
			Δ.bezierCurveTo(Ⲇ * 6, Ⲇ * 46, ⵠⲆⵠⵠⵠ * Ⲇ, Ⲇ * 46, Ⲇ * ᐃᐃⲆⲆⲆ, Ⲇ * 69);
			Δ.bezierCurveTo(Ⲇ * 21, Ⲇ * 69, Ⲇ * 21, 69 * Ⲇ, 36 * Ⲇ, 69 * Ⲇ);
			Δ.bezierCurveTo(45.5 * Ⲇ, 78.5 * Ⲇ, Ⲇ * 45.5, 78.5 * Ⲇ, 55 * Ⲇ, Ⲇ * 88);
			Δ.bezierCurveTo(Ⲇ * 55.5, 45.5 * Ⲇ, 55.5 * Ⲇ, 45.5 * Ⲇ, 56 * Ⲇ, Ⲇ * 3);
			Δ.bezierCurveTo(47 * Ⲇ, Ⲇ * 14, Ⲇ * 47, Ⲇ * ΔᐃⵠⲆⵠ, 38 * Ⲇ, Ⲇ * 25);
			Δ.bezierCurveTo(23 * Ⲇ, Ⲇ * 25, Ⲇ * 23, 25 * Ⲇ, ⲆΔⲆⲆᐃᐃⲆ * Ⲇ, Ⲇ * 23);
			Δ.closePath();
			ⵠᐃ(Δ, ΔⲆᐃΔᐃ, Δⵠ[3], ⵠᐃⲆΔⲆ * Ⲇ)
		}
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(6 * Ⲇ, Ⲇ * 23);
		Δ.bezierCurveTo(Ⲇ * 6, Ⲇ * 46, 6 * Ⲇ, 46 * Ⲇ, 6 * Ⲇ, 69 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 21, 69 * Ⲇ, 21 * Ⲇ, Ⲇ * 69, Ⲇ * 36, 69 * Ⲇ);
		Δ.bezierCurveTo(45.5 * Ⲇ, Ⲇ * 78.5, 45.5 * Ⲇ, 78.5 * Ⲇ, Ⲇ * 55, Ⲇ * 88);
		Δ.bezierCurveTo(55.5 * Ⲇ, 45.5 * Ⲇ, 55.5 * Ⲇ, 45.5 * Ⲇ, Ⲇ * 56, Ⲇ * 3);
		Δ.bezierCurveTo(47 * Ⲇ, Ⲇ * 14, 47 * Ⲇ, 14 * Ⲇ, 38 * Ⲇ, Ⲇ * 25);
		Δ.bezierCurveTo(Ⲇ * 23, Ⲇ * 25, 23 * Ⲇ, Ⲇ * 25, Ⲇ * 6, Ⲇ * 23);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * 4);
		if (1 == ⵠⲆᐃᐃⵠⲆΔ) {
			Δ.translate(0, Ⲇ * ⵠᐃⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(67 * Ⲇ, 30 * Ⲇ);
			Δ.bezierCurveTo(73 * Ⲇ, 47 * Ⲇ, 69 * Ⲇ, 45 * Ⲇ, Ⲇ * 67, 58 * Ⲇ);
			ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[0], 10 * Ⲇ);
			Δ.translate(3, 0 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 70, Ⲇ * ΔⲆⵠⵠⲆⵠⲆ);
			Δ.bezierCurveTo(Ⲇ * 83, Ⲇ * 45, 76 * Ⲇ, Ⲇ * 55, Ⲇ * 70, 69 * Ⲇ);
			ⵠᐃ(Δ, undefined, Δⵠ[0], ⵠᐃⲆⵠᐃ * Ⲇ);
			Δ.translate(ⵠΔΔᐃ, ᐃⲆΔ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 76, Ⲇ * ⵠΔΔᐃⲆ);
			Δ.bezierCurveTo(Ⲇ * 88, Ⲇ * 31, Ⲇ * 89, Ⲇ * 55, 76 * Ⲇ, Ⲇ * 79);
			ⵠᐃ(Δ, undefined, Δⵠ[ᐃⲆΔ], Ⲇ * 10);
			if (ᐃⲆ == ΔⲆⵠⲆ) {
				Δ.translate(Ⲇ * -6, -5 * Ⲇ);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(67 * Ⲇ, Ⲇ * 30);
				Δ.bezierCurveTo(73 * Ⲇ, Ⲇ * 47, Ⲇ * 69, 45 * Ⲇ, 67 * Ⲇ, 58 * Ⲇ);
				ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[ⵠⲆᐃΔ], Ⲇ * 18);
				Δ.translate(3, Ⲇ * 0);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 70, 17 * Ⲇ);
				Δ.bezierCurveTo(83 * Ⲇ, Ⲇ * 45, Ⲇ * 76, 55 * Ⲇ, Ⲇ * 70, 69 * Ⲇ);
				ⵠᐃ(Δ, ΔⲆᐃΔᐃ, Δⵠ[ⲆΔⲆᐃ], 18 * Ⲇ);
				Δ.translate(3, Ⲇ * 0);
				Δ.beginPath();
				Δ.lineCap = ᐃ[250];
				Δ.lineJoin = ᐃ[250];
				Δ.moveTo(Ⲇ * 76, Ⲇ * ⲆⲆⲆᐃⲆ);
				Δ.bezierCurveTo(88 * Ⲇ, 31 * Ⲇ, Ⲇ * 89, Ⲇ * 55, Ⲇ * 76, 79 * Ⲇ);
				ⵠᐃ(Δ, undefined, Δⵠ[3], ⲆᐃⲆᐃⵠᐃᐃ * Ⲇ);
				Δ.translate(-6, Ⲇ * 0)
			} else {
				Δ.translate(-6 * Ⲇ, -ⵠᐃⲆᐃ * Ⲇ)
			}
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 67, Ⲇ * 30);
			Δ.bezierCurveTo(Ⲇ * 73, 47 * Ⲇ, 69 * Ⲇ, 45 * Ⲇ, Ⲇ * 67, 58 * Ⲇ);
			ⵠᐃ(Δ, undefined, Δⵠ[2], Ⲇ * ⵠⵠⵠΔΔ);
			Δ.translate(3, Ⲇ * ⵠᐃⲆⵠ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 70, Ⲇ * ΔΔΔΔᐃ);
			Δ.bezierCurveTo(Ⲇ * 83, Ⲇ * 45, 76 * Ⲇ, 55 * Ⲇ, 70 * Ⲇ, Ⲇ * 69);
			ⵠᐃ(Δ, ΔⵠⲆⲆΔ, Δⵠ[ⵠΔΔΔ], ⵠΔⵠᐃⵠ * Ⲇ);
			Δ.translate(3, Ⲇ * 0);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 76, Ⲇ * ᐃᐃΔⲆⲆ);
			Δ.bezierCurveTo(Ⲇ * 88, Ⲇ * 31, Ⲇ * 89, 55 * Ⲇ, 76 * Ⲇ, Ⲇ * 79);
			ⵠᐃ(Δ, undefined, Δⵠ[2], 10 * Ⲇ)
		} else {
			ΔΔΔᐃ == ᐃⲆ ? (Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(108 * Ⲇ, 27 * Ⲇ), Δ.bezierCurveTo(94 * Ⲇ, 45.5 * Ⲇ, 94 * Ⲇ, 45.5 * Ⲇ, 80 * Ⲇ, 64 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, undefined, Δⵠ[ᐃΔΔΔ], ⵠᐃᐃⲆⵠⵠᐃ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(79 * Ⲇ, Ⲇ * 30), Δ.bezierCurveTo(Ⲇ * 93, Ⲇ * 47, Ⲇ * 93, Ⲇ * 47, Ⲇ * 107, Ⲇ * 64), Δ.closePath(), ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[ⲆΔⲆⲆ], Ⲇ * ⵠΔⲆᐃΔ)) : (Δ.translate(ᐃⲆΔ, Ⲇ * -5), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(108 * Ⲇ, Ⲇ * 27), Δ.bezierCurveTo(Ⲇ * 94, Ⲇ * 45.5, Ⲇ * 94, Ⲇ * 45.5, Ⲇ * 80, Ⲇ * 64), Δ.closePath(), ⵠᐃ(Δ, undefined, Δⵠ[0], Ⲇ * 7), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 79, 30 * Ⲇ), Δ.bezierCurveTo(93 * Ⲇ, 47 * Ⲇ, Ⲇ * 93, 47 * Ⲇ, 107 * Ⲇ, 64 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, undefined, Δⵠ[ⵠⵠⲆΔ], Ⲇ * ΔΔⵠⲆᐃ), Δ.translate(0, Ⲇ * 5));
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(108 * Ⲇ, 27 * Ⲇ);
			Δ.bezierCurveTo(94 * Ⲇ, Ⲇ * 45.5, 94 * Ⲇ, Ⲇ * 45.5, Ⲇ * 80, Ⲇ * 64);
			Δ.closePath();
			ⵠᐃ(Δ, undefined, Δⵠ[2], 7 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 79, Ⲇ * 30);
			Δ.bezierCurveTo(93 * Ⲇ, Ⲇ * 47, Ⲇ * 93, Ⲇ * 47, Ⲇ * 107, Ⲇ * 64);
			Δ.closePath();
			ⵠᐃ(Δ, undefined, Δⵠ[ⲆΔΔⲆ], Ⲇ * 7)
		}
		return ᐃⵠ
	}

	function ⲆⲆΔⵠΔΔⲆⵠⲆ(Ⲇ, Δⵠ, ΔⲆΔ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		Δ.rotate(Math.PI / ΔⵠⲆⲆ)
	}

	function ⵠⵠⲆⲆⲆⵠᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 220 * Ⲇ;
		var ΔⵠⲆ = Ⲇ * 220;
		var ΔⲆⵠ = 32 * Ⲇ;
		var Δᐃⵠ = Ⲇ * ΔⲆⵠΔⲆ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(ᐃΔΔ / ΔΔⵠⲆ, ΔⵠⲆ / 2 + Ⲇ * 10);
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, ᐃⲆΔ, ⲆⲆΔ, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆᐃ], Δⵠ[Ⲇⵠⵠᐃ]);
		Δ.translate(0, -ⲆⲆⲆᐃⲆ * Ⲇ);
		Δ.globalAlpha = ⲆⲆⲆᐃ;
		ⵠΔᐃ(Δ, ⵠᐃⵠ, 0, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Δᐃⵠ);
		return ᐃⵠ
	}

	function ⲆⲆΔⲆᐃΔⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 170 * Ⲇ;
		ᐃⵠ.height = 469 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(Ⲇ * 20, Ⲇ * 20);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 88, 30 * Ⲇ);
		Δ.bezierCurveTo(96 * Ⲇ, 49.5 * Ⲇ, 96 * Ⲇ, Ⲇ * 49.5, 104 * Ⲇ, 69 * Ⲇ);
		Δ.bezierCurveTo(105.5 * Ⲇ, Ⲇ * 41.5, 105.5 * Ⲇ, Ⲇ * 41.5, Ⲇ * 107, Ⲇ * ⵠⵠⲆᐃⲆᐃᐃ);
		Δ.bezierCurveTo(114 * Ⲇ, Ⲇ * 9.5, 114 * Ⲇ, Ⲇ * 9.5, Ⲇ * 121, Ⲇ * ⵠⲆⲆⲆ);
		Δ.bezierCurveTo(135.5 * Ⲇ, 27.5 * Ⲇ, 135.5 * Ⲇ, Ⲇ * 27.5, 150 * Ⲇ, 50 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 110.5, Ⲇ * 286, Ⲇ * 110.5, Ⲇ * 286, 103 * Ⲇ, Ⲇ * 331);
		Δ.bezierCurveTo(Ⲇ * 69.5, 325 * Ⲇ, 69.5 * Ⲇ, Ⲇ * 325, 36 * Ⲇ, Ⲇ * 319);
		Δ.bezierCurveTo(Ⲇ * 56.5, 180 * Ⲇ, 56.5 * Ⲇ, Ⲇ * 180, 77 * Ⲇ, Ⲇ * 41);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(118 * Ⲇ, Ⲇ * 31);
		Δ.bezierCurveTo(Ⲇ * 125, 43 * Ⲇ, 125 * Ⲇ, Ⲇ * 43, Ⲇ * 132, Ⲇ * 55);
		Δ.bezierCurveTo(109.5 * Ⲇ, Ⲇ * 185.5, 109.5 * Ⲇ, 185.5 * Ⲇ, Ⲇ * 87, Ⲇ * 316);
		Δ.bezierCurveTo(Ⲇ * 72, 313.5 * Ⲇ, 72 * Ⲇ, 313.5 * Ⲇ, 57 * Ⲇ, Ⲇ * 311);
		Δ.bezierCurveTo(76.5 * Ⲇ, 181 * Ⲇ, 76.5 * Ⲇ, Ⲇ * 181, 96 * Ⲇ, 51 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 56, 328 * Ⲇ);
		Δ.bezierCurveTo(47 * Ⲇ, Ⲇ * 385.5, 47 * Ⲇ, 385.5 * Ⲇ, Ⲇ * 38, Ⲇ * 443);
		Δ.bezierCurveTo(Ⲇ * 52, 446 * Ⲇ, 52 * Ⲇ, 446 * Ⲇ, 66 * Ⲇ, Ⲇ * 449);
		Δ.bezierCurveTo(Ⲇ * 76.5, Ⲇ * 388.5, Ⲇ * 76.5, Ⲇ * 388.5, 87 * Ⲇ, Ⲇ * 328);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 74, 302 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 104, 316.5 * Ⲇ, 104 * Ⲇ, Ⲇ * 316.5, 134 * Ⲇ, Ⲇ * 331);
		Δ.bezierCurveTo(Ⲇ * 133, 341 * Ⲇ, Ⲇ * 133, 341 * Ⲇ, Ⲇ * 132, 351 * Ⲇ);
		Δ.bezierCurveTo(69.5 * Ⲇ, Ⲇ * 342, 69.5 * Ⲇ, Ⲇ * 342, ⲆⵠⵠΔᐃ * Ⲇ, Ⲇ * 333);
		Δ.bezierCurveTo(Ⲇ * 8, Ⲇ * 323, Ⲇ * 8, Ⲇ * 323, ᐃⵠⲆΔⵠΔⵠ * Ⲇ, 313 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃ]);
		Δ.save();
		Δ.translate(Ⲇ * 51.5, 440.5 * Ⲇ);
		Δ.rotate(.2);
		ᐃΔⵠ(Δ, -20.5 * Ⲇ, Ⲇ * -18.5, Ⲇ * 41, 37 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 73, 316 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 90, Ⲇ * 324.5, Ⲇ * 90, 324.5 * Ⲇ, 107 * Ⲇ, Ⲇ * 333);
		Δ.bezierCurveTo(Ⲇ * 70, Ⲇ * 327.5, 70 * Ⲇ, 327.5 * Ⲇ, Ⲇ * 33, Ⲇ * 322);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]);
		Δ.globalAlpha = ᐃⵠⵠⵠ;
		Δ.translate(-ⲆⵠΔⵠⵠ * Ⲇ, -20 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(88 * Ⲇ, Ⲇ * 30);
		Δ.bezierCurveTo(Ⲇ * 96, Ⲇ * 49.5, 96 * Ⲇ, 49.5 * Ⲇ, 104 * Ⲇ, 69 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 105.5, Ⲇ * 41.5, 105.5 * Ⲇ, Ⲇ * 41.5, 107 * Ⲇ, Ⲇ * ᐃᐃᐃⵠᐃᐃⲆ);
		Δ.bezierCurveTo(114 * Ⲇ, 9.5 * Ⲇ, 114 * Ⲇ, 9.5 * Ⲇ, Ⲇ * 121, Ⲇ * ⲆᐃΔⲆⵠ);
		Δ.bezierCurveTo(Ⲇ * 135.5, 27.5 * Ⲇ, 135.5 * Ⲇ, Ⲇ * 27.5, 150 * Ⲇ, Ⲇ * 50);
		Δ.bezierCurveTo(Ⲇ * 110.5, Ⲇ * 286, 110.5 * Ⲇ, Ⲇ * 286, Ⲇ * 103, Ⲇ * 331);
		Δ.bezierCurveTo(69.5 * Ⲇ, 325 * Ⲇ, Ⲇ * 69.5, 325 * Ⲇ, Ⲇ * 36, Ⲇ * 319);
		Δ.bezierCurveTo(56.5 * Ⲇ, 180 * Ⲇ, 56.5 * Ⲇ, 180 * Ⲇ, Ⲇ * 77, 41 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 7 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(118 * Ⲇ, 31 * Ⲇ);
		Δ.bezierCurveTo(125 * Ⲇ, 43 * Ⲇ, 125 * Ⲇ, Ⲇ * 43, 132 * Ⲇ, Ⲇ * 55);
		Δ.bezierCurveTo(109.5 * Ⲇ, Ⲇ * 185.5, Ⲇ * 109.5, 185.5 * Ⲇ, Ⲇ * 87, Ⲇ * 316);
		Δ.bezierCurveTo(72 * Ⲇ, Ⲇ * 313.5, 72 * Ⲇ, 313.5 * Ⲇ, 57 * Ⲇ, 311 * Ⲇ);
		Δ.bezierCurveTo(76.5 * Ⲇ, 181 * Ⲇ, 76.5 * Ⲇ, Ⲇ * 181, Ⲇ * 96, 51 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(88 * Ⲇ, 30 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 96, 49.5 * Ⲇ, Ⲇ * 96, 49.5 * Ⲇ, 104 * Ⲇ, Ⲇ * 69);
		Δ.bezierCurveTo(105.5 * Ⲇ, 41.5 * Ⲇ, 105.5 * Ⲇ, 41.5 * Ⲇ, 107 * Ⲇ, 14 * Ⲇ);
		Δ.bezierCurveTo(114 * Ⲇ, 9.5 * Ⲇ, 114 * Ⲇ, 9.5 * Ⲇ, Ⲇ * 121, Ⲇ * 5);
		Δ.bezierCurveTo(Ⲇ * 135.5, Ⲇ * 27.5, 135.5 * Ⲇ, 27.5 * Ⲇ, 150 * Ⲇ, Ⲇ * 50);
		Δ.bezierCurveTo(Ⲇ * 110.5, Ⲇ * 286, Ⲇ * 110.5, 286 * Ⲇ, Ⲇ * 103, Ⲇ * 331);
		Δ.bezierCurveTo(Ⲇ * 69.5, 325 * Ⲇ, 69.5 * Ⲇ, Ⲇ * 325, 36 * Ⲇ, 319 * Ⲇ);
		Δ.bezierCurveTo(56.5 * Ⲇ, Ⲇ * 180, 56.5 * Ⲇ, Ⲇ * 180, 77 * Ⲇ, 41 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[2], 7 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 56, Ⲇ * 328);
		Δ.bezierCurveTo(47 * Ⲇ, 385.5 * Ⲇ, Ⲇ * 47, Ⲇ * 385.5, 38 * Ⲇ, 443 * Ⲇ);
		Δ.bezierCurveTo(52 * Ⲇ, 446 * Ⲇ, Ⲇ * 52, Ⲇ * 446, Ⲇ * 66, 449 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 76.5, Ⲇ * 388.5, Ⲇ * 76.5, Ⲇ * 388.5, 87 * Ⲇ, 328 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⲆᐃⵠ], Δⵠ[5], Ⲇ * 7);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 74, 302 * Ⲇ);
		Δ.bezierCurveTo(104 * Ⲇ, Ⲇ * 316.5, Ⲇ * 104, 316.5 * Ⲇ, Ⲇ * 134, Ⲇ * 331);
		Δ.bezierCurveTo(Ⲇ * 133, Ⲇ * 341, 133 * Ⲇ, Ⲇ * 341, 132 * Ⲇ, 351 * Ⲇ);
		Δ.bezierCurveTo(69.5 * Ⲇ, Ⲇ * 342, 69.5 * Ⲇ, 342 * Ⲇ, Ⲇ * ᐃᐃᐃⵠᐃⵠⵠ, Ⲇ * 333);
		Δ.bezierCurveTo(Ⲇ * ⲆΔⵠΔΔ, Ⲇ * 323, Ⲇ * 8, Ⲇ * 323, Ⲇ * 9, 313 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⲆ], Δⵠ[ΔΔⵠⵠ], Ⲇ * 7);
		Δ.save();
		Δ.translate(Ⲇ * 51.5, Ⲇ * 440.5);
		Δ.rotate(.2);
		ᐃΔⵠ(Δ, Ⲇ * -20.5, Ⲇ * -18.5, Ⲇ * 41, 37 * Ⲇ, Ⲇ * ⵠᐃⲆⵠᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠᐃⲆ], Δⵠ[ⵠⲆⲆⵠ], ᐃΔᐃᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 73, Ⲇ * 316);
		Δ.bezierCurveTo(Ⲇ * 90, 324.5 * Ⲇ, 90 * Ⲇ, Ⲇ * 324.5, Ⲇ * 107, 333 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 70, Ⲇ * 327.5, 70 * Ⲇ, Ⲇ * 327.5, Ⲇ * 33, 322 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6]);
		return ᐃⵠ
	}

	function ᐃᐃΔⲆⵠΔⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 220 * Ⲇ;
		var ΔⵠⲆ = Ⲇ * 220;
		var ΔⲆⵠ = 16 * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(ᐃΔΔ / 2, ΔⵠⲆ / 2);
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, ⵠᐃΔ, ⵠΔⵠᐃ, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ]);
		Δ.globalAlpha = 1;
		return ᐃⵠ
	}

	function ᐃᐃⲆⲆⲆⵠⵠ(ΔΔᐃⲆᐃⵠⵠ, ⲆⲆⵠΔᐃΔΔ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Math.max(ⲆⲆⵠΔᐃΔΔ.width, ΔΔᐃⲆᐃⵠⵠ.width);
		var ΔⵠⲆ = Math.max(ⲆⲆⵠΔᐃΔΔ.height, ΔΔᐃⲆᐃⵠⵠ.height);
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.drawImage(ΔΔᐃⲆᐃⵠⵠ, (ᐃΔΔ - ΔΔᐃⲆᐃⵠⵠ.width) / 2, (ΔⵠⲆ - ΔΔᐃⲆᐃⵠⵠ.height) / 2);
		Δ.drawImage(ⲆⲆⵠΔᐃΔΔ, (ᐃΔΔ - ⲆⲆⵠΔᐃΔΔ.width) / ᐃᐃⲆⵠ, (ΔⵠⲆ - ⲆⲆⵠΔᐃΔΔ.height) / 2);
		return ᐃⵠ
	}

	function ΔΔⲆᐃⲆ(Ⲇ, Δⵠ, ΔⲆΔ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 210 * Ⲇ;
		var ΔⵠⲆ = Ⲇ * 205;
		var w2 = ᐃΔΔ / 2;
		var ΔⲆΔⵠⵠ = ΔⵠⲆ / ⵠⵠΔⵠ;
		var ⲆᐃⲆⲆ = 30 * Ⲇ;
		var ᐃΔⵠᐃ = ⵠⲆᐃⲆⵠ * Ⲇ;
		var ΔΔⲆⵠΔ = Ⲇ * 200;
		var ΔΔⵠΔⲆ = 180 * Ⲇ;
		var ΔⲆⵠ = 80 * Ⲇ;
		var ᐃΔᐃᐃⵠ = ΔΔⲆⵠΔ / ⲆΔⲆΔ;
		var ᐃΔΔⲆΔ = ΔΔⵠΔⲆ / 2;
		var Δᐃⵠ = ΔⵠⲆⵠᐃ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		ᐃⵠ.width = 419 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 412;
		if (ᐃⲆ == ΔΔΔᐃ) {
			Δ.save();
			Δ.translate(ⵠᐃⲆⵠᐃ * Ⲇ, ⵠΔⵠᐃ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(117.99996948242188 * Ⲇ, Ⲇ * 216.40621948242188);
			Δ.bezierCurveTo(Ⲇ * 86.99996948242188, 221.40621948242188 * Ⲇ, Ⲇ * 74.99996948242188, 217.40621948242188 * Ⲇ, Ⲇ * 60.999969482421875, 205.40621948242188 * Ⲇ);
			ⵠᐃ(Δ, ⲆⲆⲆΔᐃ, Δⵠ[ⵠⲆᐃⲆ], 3 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 114.99996948242188, 227.40621948242188 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 90.99996948242188, 233.40621948242188 * Ⲇ, Ⲇ * 66.99996948242188, 228.40621948242188 * Ⲇ, Ⲇ * 43.999969482421875, 225.40621948242188 * Ⲇ);
			ⵠᐃ(Δ, undefined, Δⵠ[ᐃⵠⵠⲆ], ⲆΔⲆᐃ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(110.99996948242188 * Ⲇ, 236.40621948242188 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 94.99996948242188, Ⲇ * 244.40621948242188, Ⲇ * 79.99996948242188, 249.40621948242188 * Ⲇ, Ⲇ * 60.999969482421875, 249.40621948242188 * Ⲇ);
			ⵠᐃ(Δ, undefined, Δⵠ[ⵠⲆᐃⲆ], ⲆΔⲆᐃ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(111.99996948242188 * Ⲇ, 206.29513549804688 * Ⲇ);
			Δ.bezierCurveTo(91.99996948242188 * Ⲇ, 206.29513549804688 * Ⲇ, 87.99996948242188 * Ⲇ, 201.29513549804688 * Ⲇ, Ⲇ * 79.99996948242188, 192.29513549804688 * Ⲇ);
			ⵠᐃ(Δ, undefined, Δⵠ[4], Ⲇ * 3);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(109.99996948242188 * Ⲇ, Ⲇ * 249.18402099609375);
			Δ.bezierCurveTo(Ⲇ * 97.99996948242188, 263.18402099609375 * Ⲇ, Ⲇ * 85.99996948242188, 271.18402099609375 * Ⲇ, 65.99996948242188 * Ⲇ, 277.18402099609375 * Ⲇ);
			ⵠᐃ(Δ, ⵠΔΔⲆΔ, Δⵠ[4], Ⲇ * ⲆΔⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 105.99996948242188, 192.18402099609375 * Ⲇ);
			Δ.bezierCurveTo(99.49996948242188 * Ⲇ, Ⲇ * 197.68402099609375, Ⲇ * 99.49996948242188, Ⲇ * 197.68402099609375, 92.99996948242188 * Ⲇ, Ⲇ * 203.18402099609375);
			Δ.bezierCurveTo(95.99996948242188 * Ⲇ, Ⲇ * 213.18402099609375, Ⲇ * 95.99996948242188, Ⲇ * 215.18402099609375, Ⲇ * 89.99996948242188, 219.18402099609375 * Ⲇ);
			Δ.bezierCurveTo(91.99996948242188 * Ⲇ, 223.18402099609375 * Ⲇ, 91.99996948242188 * Ⲇ, Ⲇ * 226.18402099609375, 87.99996948242188 * Ⲇ, Ⲇ * 230.18402099609375);
			Δ.bezierCurveTo(Ⲇ * 89.99996948242188, 234.18402099609375 * Ⲇ, Ⲇ * 91.99996948242188, Ⲇ * 237.18402099609375, Ⲇ * 90.99996948242188, Ⲇ * 244.18402099609375);
			Δ.bezierCurveTo(Ⲇ * 96.99996948242188, 252.18402099609375 * Ⲇ, 96.99996948242188 * Ⲇ, 256.18402099609375 * Ⲇ, 95.99996948242188 * Ⲇ, 262.18402099609375 * Ⲇ);
			Δ.bezierCurveTo(106.49996948242188 * Ⲇ, Ⲇ * 264.18402099609375, Ⲇ * 106.49996948242188, 264.18402099609375 * Ⲇ, 116.99996948242188 * Ⲇ, 266.18402099609375 * Ⲇ);
			ⵠᐃ(Δ, ᐃΔᐃⲆⵠ, Δⵠ[4], Ⲇ * ⵠᐃᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(104.99996948242188 * Ⲇ, 183.29513549804688 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 99.99996948242188, 193.29513549804688 * Ⲇ, 93.99996948242188 * Ⲇ, 195.29513549804688 * Ⲇ, Ⲇ * 89.99996948242188, Ⲇ * 201.29513549804688);
			Δ.bezierCurveTo(86.99996948242188 * Ⲇ, 212.29513549804688 * Ⲇ, 85.99996948242188 * Ⲇ, 214.29513549804688 * Ⲇ, Ⲇ * 81.99996948242188, Ⲇ * 215.29513549804688);
			Δ.bezierCurveTo(Ⲇ * 83.99996948242188, 223.29513549804688 * Ⲇ, 83.99996948242188 * Ⲇ, 227.29513549804688 * Ⲇ, 79.99996948242188 * Ⲇ, Ⲇ * 230.29513549804688);
			Δ.bezierCurveTo(83.99996948242188 * Ⲇ, Ⲇ * 235.29513549804688, 84.99996948242188 * Ⲇ, Ⲇ * 240.29513549804688, 79.99996948242188 * Ⲇ, 246.29513549804688 * Ⲇ);
			Δ.bezierCurveTo(86.99996948242188 * Ⲇ, Ⲇ * 251.29513549804688, Ⲇ * 91.99996948242188, Ⲇ * 256.2951354980469, 89.99996948242188 * Ⲇ, Ⲇ * 266.2951354980469);
			Δ.bezierCurveTo(Ⲇ * 102.99996948242188, Ⲇ * 269.2951354980469, 102.99996948242188 * Ⲇ, 269.2951354980469 * Ⲇ, Ⲇ * 115.99996948242188, Ⲇ * 272.2951354980469);
			ⵠᐃ(Δ, ΔⵠⲆⲆΔ, Δⵠ[ⵠⲆᐃⲆ], 3 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 107.99996948242188, 177.85067749023438 * Ⲇ);
			Δ.bezierCurveTo(95.99996948242188 * Ⲇ, Ⲇ * 187.35067749023438, 95.99996948242188 * Ⲇ, Ⲇ * 187.35067749023438, Ⲇ * 83.99996948242188, 196.85067749023438 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 82.99996948242188, 203.85067749023438 * Ⲇ, Ⲇ * 80.99996948242188, 209.85067749023438 * Ⲇ, Ⲇ * 72.99996948242188, Ⲇ * 210.85067749023438);
			Δ.bezierCurveTo(Ⲇ * 73.99996948242188, Ⲇ * 220.85067749023438, 73.99996948242188 * Ⲇ, Ⲇ * 221.85067749023438, 66.99996948242188 * Ⲇ, 227.85067749023438 * Ⲇ);
			Δ.bezierCurveTo(71.99996948242188 * Ⲇ, 235.85067749023438 * Ⲇ, Ⲇ * 73.99996948242188, 239.85067749023438 * Ⲇ, Ⲇ * 71.99996948242188, 247.85067749023438 * Ⲇ);
			Δ.bezierCurveTo(80.99996948242188 * Ⲇ, 257.8506774902344 * Ⲇ, Ⲇ * 81.99996948242188, Ⲇ * 263.8506774902344, 77.99996948242188 * Ⲇ, Ⲇ * 271.8506774902344);
			Δ.bezierCurveTo(Ⲇ * 95.49996948242188, 272.8506774902344 * Ⲇ, Ⲇ * 95.49996948242188, 272.8506774902344 * Ⲇ, Ⲇ * 112.99996948242188, Ⲇ * 273.8506774902344);
			ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[4], Ⲇ * 3);
			Δ.restore()
		} else 2 == ᐃⲆ && (Δ.save(), Δ.translate(130 * Ⲇ, Ⲇ * 35), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 170.99996948242188, 133.85067749023438 * Ⲇ), Δ.bezierCurveTo(195.99996948242188 * Ⲇ, Ⲇ * 129.85067749023438, Ⲇ * 196.99996948242188, Ⲇ * 111.85067749023438, Ⲇ * 200.99996948242188, Ⲇ * 88.85067749023438), ⵠᐃ(Δ, ⲆⲆⲆΔᐃ, Δⵠ[4], Ⲇ * ⵠΔΔᐃ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 169.99996948242188, 143.85067749023438 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 189.99996948242188, 145.85067749023438 * Ⲇ, 207.99996948242188 * Ⲇ, Ⲇ * 126.85067749023438, Ⲇ * 222.99996948242188, 100.85067749023438 * Ⲇ), ⵠᐃ(Δ, Ⲇᐃᐃⵠᐃ, Δⵠ[4], ⵠⲆᐃΔ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 170.99996948242188, 157.85067749023438 * Ⲇ), Δ.bezierCurveTo(193.99996948242188 * Ⲇ, Ⲇ * 160.85067749023438, Ⲇ * 210.99996948242188, Ⲇ * 151.85067749023438, Ⲇ * 232.99996948242188, Ⲇ * 139.85067749023438), ⵠᐃ(Δ, undefined, Δⵠ[ΔⲆΔⲆ], Ⲇ * 3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 169.99996948242188, Ⲇ * 168.85067749023438), Δ.bezierCurveTo(192.99996948242188 * Ⲇ, Ⲇ * 175.85067749023438, 203.99996948242188 * Ⲇ, Ⲇ * 177.85067749023438, Ⲇ * 245.99996948242188, 168.85067749023438 * Ⲇ), ⵠᐃ(Δ, undefined, Δⵠ[4], 3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(167.99996948242188 * Ⲇ, 168.85067749023438 * Ⲇ), Δ.bezierCurveTo(183.99996948242188 * Ⲇ, 189.85067749023438 * Ⲇ, Ⲇ * 191.99996948242188, Ⲇ * 193.85067749023438, Ⲇ * 220.99996948242188, 196.85067749023438 * Ⲇ), ⵠᐃ(Δ, undefined, Δⵠ[ⵠⲆᐃⲆ], Ⲇ * 3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 176.99996948242188, Ⲇ * 117.85067749023438), Δ.bezierCurveTo(Ⲇ * 181.99996948242188, 120.85067749023438 * Ⲇ, Ⲇ * 181.99996948242188, 120.85067749023438 * Ⲇ, 186.99996948242188 * Ⲇ, 123.85067749023438 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 183.99996948242188, Ⲇ * 137.85067749023438, 185.99996948242188 * Ⲇ, 136.85067749023438 * Ⲇ, 190.99996948242188 * Ⲇ, 136.85067749023438 * Ⲇ), Δ.bezierCurveTo(186.99996948242188 * Ⲇ, 147.85067749023438 * Ⲇ, Ⲇ * 189.99996948242188, Ⲇ * 152.85067749023438, Ⲇ * 193.99996948242188, Ⲇ * 155.85067749023438), Δ.bezierCurveTo(Ⲇ * 187.99996948242188, Ⲇ * 165.85067749023438, Ⲇ * 190.99996948242188, Ⲇ * 169.85067749023438, 190.99996948242188 * Ⲇ, Ⲇ * 172.85067749023438), Δ.bezierCurveTo(Ⲇ * 186.99996948242188, 183.85067749023438 * Ⲇ, 186.99996948242188 * Ⲇ, Ⲇ * 185.85067749023438, Ⲇ * 189.99996948242188, 188.85067749023438 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 182.49996948242188, Ⲇ * 195.35067749023438, 182.49996948242188 * Ⲇ, Ⲇ * 195.35067749023438, Ⲇ * 174.99996948242188, Ⲇ * 201.85067749023438), ⵠᐃ(Δ, ΔⵠᐃΔᐃ, Δⵠ[4], Ⲇⵠᐃᐃ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(176.99996948242188 * Ⲇ, Ⲇ * 112.18402099609375), Δ.bezierCurveTo(Ⲇ * 183.99996948242188, 119.18402099609375 * Ⲇ, 186.99996948242188 * Ⲇ, 117.18402099609375 * Ⲇ, 192.99996948242188 * Ⲇ, Ⲇ * 116.18402099609375), Δ.bezierCurveTo(Ⲇ * 191.99996948242188, 126.18402099609375 * Ⲇ, Ⲇ * 193.99996948242188, Ⲇ * 130.18402099609375, Ⲇ * 199.99996948242188, Ⲇ * 130.18402099609375), Δ.bezierCurveTo(Ⲇ * 194.99996948242188, Ⲇ * 145.18402099609375, Ⲇ * 197.99996948242188, 147.18402099609375 * Ⲇ, Ⲇ * 201.99996948242188, 153.18402099609375 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 196.99996948242188, 164.18402099609375 * Ⲇ, 197.99996948242188 * Ⲇ, 169.18402099609375 * Ⲇ, Ⲇ * 201.99996948242188, 174.18402099609375 * Ⲇ), Δ.bezierCurveTo(194.99996948242188 * Ⲇ, Ⲇ * 184.18402099609375, Ⲇ * 196.99996948242188, 187.18402099609375 * Ⲇ, Ⲇ * 200.99996948242188, 193.18402099609375 * Ⲇ), Δ.bezierCurveTo(185.99996948242188 * Ⲇ, 195.18402099609375 * Ⲇ, 181.99996948242188 * Ⲇ, 201.18402099609375 * Ⲇ, 174.99996948242188 * Ⲇ, Ⲇ * 210.18402099609375), ⵠᐃ(Δ, ⵠⵠᐃⲆᐃ, Δⵠ[ⵠⵠⵠᐃⲆ], Ⲇ * 3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(176.99996948242188 * Ⲇ, 101.29513549804688 * Ⲇ), Δ.bezierCurveTo(181.99996948242188 * Ⲇ, 108.29513549804688 * Ⲇ, Ⲇ * 189.99996948242188, Ⲇ * 110.29513549804688, 195.99996948242188 * Ⲇ, Ⲇ * 107.29513549804688), Δ.bezierCurveTo(197.99996948242188 * Ⲇ, Ⲇ * 121.29513549804688, Ⲇ * 200.99996948242188, Ⲇ * 122.29513549804688, Ⲇ * 206.99996948242188, 122.29513549804688 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 201.99996948242188, 138.29513549804688 * Ⲇ, Ⲇ * 204.99996948242188, Ⲇ * 142.29513549804688, 211.99996948242188 * Ⲇ, Ⲇ * 148.29513549804688), Δ.bezierCurveTo(201.99996948242188 * Ⲇ, 156.29513549804688 * Ⲇ, 205.99996948242188 * Ⲇ, 167.29513549804688 * Ⲇ, Ⲇ * 213.99996948242188, Ⲇ * 173.29513549804688), Δ.bezierCurveTo(204.99996948242188 * Ⲇ, Ⲇ * 181.29513549804688, 204.99996948242188 * Ⲇ, Ⲇ * 187.29513549804688, Ⲇ * 205.99996948242188, Ⲇ * 193.29513549804688), Δ.bezierCurveTo(190.99996948242188 * Ⲇ, 198.29513549804688 * Ⲇ, 181.99996948242188 * Ⲇ, Ⲇ * 205.29513549804688, 174.99996948242188 * Ⲇ, 214.29513549804688 * Ⲇ), ⵠᐃ(Δ, ᐃΔᐃⲆⵠ, Δⵠ[4], ⵠΔΔᐃ * Ⲇ), Δ.restore());
		Δ.translate(ᐃⵠ.width / ᐃᐃΔⵠ, ᐃⵠ.height / ᐃᐃΔⵠ);
		if (!ᐃⲆ) {
			Δ.globalAlpha = .5;
			ᐃΔⵠ(Δ, -ᐃΔᐃᐃⵠ, -ᐃΔΔⲆΔ, ΔΔⲆⵠΔ, ΔΔⵠΔⲆ + ᐃΔⵠᐃ, ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆⵠ]);
			if (ΔⲆΔ) Δ.rotate(Math.PI);
			Δ.globalAlpha = Δⵠᐃ;
			ᐃΔⵠ(Δ, -ᐃΔᐃᐃⵠ, -ᐃΔΔⲆΔ, ΔΔⲆⵠΔ, ΔΔⵠΔⲆ, ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔΔⵠⲆ], Δᐃⵠ);
			Δ.globalAlpha = 1;
			ᐃΔⵠ(Δ, -ᐃΔᐃᐃⵠ + Ⲇ * 35, -ᐃΔΔⲆΔ + 20 * Ⲇ, ΔΔⲆⵠΔ - 50 * Ⲇ, ΔΔⵠΔⲆ - Ⲇ * 50, ⲆᐃⲆⲆ - 10 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ᐃΔᐃΔ])
		}
		if (3 == ᐃⲆ) {
			Δ.translate(-ᐃⵠ.width / ⵠⲆᐃⵠ, -ᐃⵠ.height / ᐃᐃⲆⵠ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 121, Ⲇ * 190);
			Δ.bezierCurveTo(Ⲇ * 129, 186 * Ⲇ, 137 * Ⲇ, 183 * Ⲇ, 135 * Ⲇ, Ⲇ * 163);
			Δ.bezierCurveTo(Ⲇ * 131, 135 * Ⲇ, 153 * Ⲇ, 127 * Ⲇ, 177 * Ⲇ, 124 * Ⲇ);
			Δ.bezierCurveTo(198 * Ⲇ, Ⲇ * 120, 208 * Ⲇ, 122 * Ⲇ, 226 * Ⲇ, 128 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 261, Ⲇ * 112, 271 * Ⲇ, 126 * Ⲇ, 287 * Ⲇ, 147 * Ⲇ);
			Δ.bezierCurveTo(310 * Ⲇ, Ⲇ * 163, 304 * Ⲇ, 183 * Ⲇ, Ⲇ * 283, Ⲇ * 196);
			Δ.bezierCurveTo(296 * Ⲇ, Ⲇ * 249, 278 * Ⲇ, 262 * Ⲇ, 253 * Ⲇ, Ⲇ * 263);
			Δ.bezierCurveTo(Ⲇ * 210, Ⲇ * 264, 188 * Ⲇ, Ⲇ * 252, Ⲇ * 177, 234 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 133, Ⲇ * 242, 123 * Ⲇ, Ⲇ * 241, Ⲇ * 115, 225 * Ⲇ);
			Δ.bezierCurveTo(109 * Ⲇ, 206 * Ⲇ, Ⲇ * 115, 193 * Ⲇ, Ⲇ * 121, Ⲇ * 190);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠΔᐃⲆ]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(219 * Ⲇ, 144 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 251, 121 * Ⲇ, 277 * Ⲇ, 136 * Ⲇ, 276 * Ⲇ, Ⲇ * 159);
			Δ.bezierCurveTo(Ⲇ * 276, 176 * Ⲇ, Ⲇ * 273, 191 * Ⲇ, Ⲇ * 242, Ⲇ * 193);
			Δ.bezierCurveTo(Ⲇ * 226, 228 * Ⲇ, 155 * Ⲇ, 219 * Ⲇ, Ⲇ * 150, 183 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 142, 144 * Ⲇ, Ⲇ * 174, Ⲇ * 127, Ⲇ * 219, 144 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[5]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 123, Ⲇ * 214);
			Δ.bezierCurveTo(Ⲇ * 119, Ⲇ * 198, Ⲇ * 129, 189 * Ⲇ, 146 * Ⲇ, Ⲇ * 194);
			Δ.bezierCurveTo(158 * Ⲇ, 201 * Ⲇ, Ⲇ * 165, 218 * Ⲇ, 147 * Ⲇ, Ⲇ * 226);
			Δ.bezierCurveTo(Ⲇ * 135, Ⲇ * 230, Ⲇ * 125, 222 * Ⲇ, 123 * Ⲇ, Ⲇ * 214);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[5]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 257, 199 * Ⲇ);
			Δ.bezierCurveTo(264 * Ⲇ, 199 * Ⲇ, 275 * Ⲇ, 213 * Ⲇ, 261 * Ⲇ, Ⲇ * 220);
			Δ.bezierCurveTo(246 * Ⲇ, Ⲇ * 225, 235 * Ⲇ, 200 * Ⲇ, 257 * Ⲇ, 199 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⵠ]);
			Δ.translate(Ⲇ * -ⵠᐃⵠᐃΔ, 55 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(186 * Ⲇ, Ⲇ * 123);
			Δ.bezierCurveTo(198 * Ⲇ, 115 * Ⲇ, 219 * Ⲇ, 110 * Ⲇ, 219 * Ⲇ, Ⲇ * 123);
			Δ.bezierCurveTo(216 * Ⲇ, Ⲇ * 135, Ⲇ * 171, 143 * Ⲇ, 186 * Ⲇ, Ⲇ * 123);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[5]);
			Δ.translate(Ⲇ * 5, Ⲇ * -55);
			Δ.translate(Ⲇ * -5, Ⲇ * ⲆⲆⲆΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 171, Ⲇ * 241);
			Δ.bezierCurveTo(189 * Ⲇ, Ⲇ * 234, Ⲇ * 200, 248 * Ⲇ, Ⲇ * 189, 254 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 179, 260 * Ⲇ, 158 * Ⲇ, 246 * Ⲇ, Ⲇ * 171, 241 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆⵠᐃ])
		} else if (ᐃⲆ == ᐃΔΔΔⲆ) {
			Δ.translate(-ᐃⵠ.width / 2, -ᐃⵠ.height / ⵠᐃᐃⲆ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(30 * Ⲇ, 167 * Ⲇ);
			Δ.bezierCurveTo(47 * Ⲇ, Ⲇ * 144, 64 * Ⲇ, Ⲇ * 140, Ⲇ * 80, Ⲇ * 147);
			Δ.bezierCurveTo(95 * Ⲇ, Ⲇ * 154, Ⲇ * 95, 159 * Ⲇ, Ⲇ * 100, Ⲇ * 179);
			Δ.bezierCurveTo(105 * Ⲇ, 202 * Ⲇ, 95 * Ⲇ, Ⲇ * 218, Ⲇ * 69, 218 * Ⲇ);
			Δ.bezierCurveTo(48 * Ⲇ, Ⲇ * 236, Ⲇ * 26, 223 * Ⲇ, Ⲇ * 28, 213 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 28, 205 * Ⲇ, 29 * Ⲇ, Ⲇ * 199, Ⲇ * 32, 195 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 21, 183 * Ⲇ, Ⲇ * 27, Ⲇ * 173, Ⲇ * 30, Ⲇ * 167);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[4]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(26 * Ⲇ, Ⲇ * 145);
			Δ.bezierCurveTo(32 * Ⲇ, Ⲇ * 138, Ⲇ * 37, Ⲇ * 137, Ⲇ * 40, Ⲇ * 139);
			Δ.bezierCurveTo(43 * Ⲇ, 140 * Ⲇ, Ⲇ * 41, Ⲇ * 150, Ⲇ * 31, Ⲇ * 159);
			Δ.bezierCurveTo(Ⲇ * 23, Ⲇ * 166, Ⲇ * ΔΔΔΔᐃ, 158 * Ⲇ, 26 * Ⲇ, Ⲇ * 145);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[4]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * ⵠΔΔⵠⵠᐃⲆ, 193 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 21, 187 * Ⲇ, 30 * Ⲇ, 190 * Ⲇ, 20 * Ⲇ, 202 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * ⲆⵠᐃΔᐃᐃⵠ, Ⲇ * 208, ⲆⵠⵠΔᐃ * Ⲇ, Ⲇ * 202, Ⲇ * 13, Ⲇ * 193);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[4]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 121, Ⲇ * 190);
			Δ.bezierCurveTo(Ⲇ * 129, 186 * Ⲇ, 137 * Ⲇ, Ⲇ * 183, 135 * Ⲇ, Ⲇ * 163);
			Δ.bezierCurveTo(Ⲇ * 131, Ⲇ * 135, Ⲇ * 153, 127 * Ⲇ, 177 * Ⲇ, 124 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 198, 120 * Ⲇ, 208 * Ⲇ, 122 * Ⲇ, Ⲇ * 226, 128 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 261, Ⲇ * 112, Ⲇ * 271, 126 * Ⲇ, Ⲇ * 287, 147 * Ⲇ);
			Δ.bezierCurveTo(310 * Ⲇ, Ⲇ * 163, 304 * Ⲇ, 183 * Ⲇ, 283 * Ⲇ, 196 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 296, 249 * Ⲇ, Ⲇ * 278, 262 * Ⲇ, 253 * Ⲇ, Ⲇ * 263);
			Δ.bezierCurveTo(Ⲇ * 210, Ⲇ * 264, Ⲇ * 188, Ⲇ * 252, 177 * Ⲇ, 234 * Ⲇ);
			Δ.bezierCurveTo(133 * Ⲇ, Ⲇ * 242, Ⲇ * 123, Ⲇ * 241, 115 * Ⲇ, 225 * Ⲇ);
			Δ.bezierCurveTo(109 * Ⲇ, 206 * Ⲇ, 115 * Ⲇ, 193 * Ⲇ, 121 * Ⲇ, 190 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[4]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 335, Ⲇ * 196);
			Δ.bezierCurveTo(Ⲇ * 312, 208 * Ⲇ, Ⲇ * 300, 185 * Ⲇ, Ⲇ * 309, 167 * Ⲇ);
			Δ.bezierCurveTo(314 * Ⲇ, Ⲇ * 141, Ⲇ * 339, 127 * Ⲇ, Ⲇ * 359, Ⲇ * 144);
			Δ.bezierCurveTo(363 * Ⲇ, 148 * Ⲇ, Ⲇ * 364, 150 * Ⲇ, Ⲇ * 364, Ⲇ * 150);
			Δ.bezierCurveTo(392 * Ⲇ, 143 * Ⲇ, 396 * Ⲇ, Ⲇ * 183, 378 * Ⲇ, 204 * Ⲇ);
			Δ.bezierCurveTo(367 * Ⲇ, 215 * Ⲇ, Ⲇ * 339, 208 * Ⲇ, Ⲇ * 335, 196 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃᐃΔⵠⲆ]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 349, 212 * Ⲇ);
			Δ.bezierCurveTo(339 * Ⲇ, Ⲇ * 216, Ⲇ * 334, 208 * Ⲇ, Ⲇ * 341, 203 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 353, Ⲇ * 198, 361 * Ⲇ, 205 * Ⲇ, Ⲇ * 349, 212 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⲆ]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 46, Ⲇ * 165);
			Δ.bezierCurveTo(Ⲇ * 55, Ⲇ * 148, 85 * Ⲇ, 157 * Ⲇ, Ⲇ * 83, 175 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 99, Ⲇ * 185, Ⲇ * 89, 212 * Ⲇ, Ⲇ * 66, 204 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 55, 212 * Ⲇ, 43 * Ⲇ, 212 * Ⲇ, 41 * Ⲇ, Ⲇ * 202);
			Δ.bezierCurveTo(Ⲇ * 39, 194 * Ⲇ, 42 * Ⲇ, 187 * Ⲇ, Ⲇ * 49, Ⲇ * 185);
			Δ.bezierCurveTo(Ⲇ * 44, Ⲇ * 175, 45 * Ⲇ, 172 * Ⲇ, 46 * Ⲇ, 165 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[4]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(219 * Ⲇ, Ⲇ * 144);
			Δ.bezierCurveTo(Ⲇ * 251, 121 * Ⲇ, 277 * Ⲇ, 136 * Ⲇ, Ⲇ * 276, 159 * Ⲇ);
			Δ.bezierCurveTo(276 * Ⲇ, Ⲇ * 176, 273 * Ⲇ, 191 * Ⲇ, 242 * Ⲇ, Ⲇ * 193);
			Δ.bezierCurveTo(Ⲇ * 226, Ⲇ * 228, 155 * Ⲇ, Ⲇ * 219, 150 * Ⲇ, 183 * Ⲇ);
			Δ.bezierCurveTo(142 * Ⲇ, 144 * Ⲇ, Ⲇ * 174, 127 * Ⲇ, Ⲇ * 219, Ⲇ * 144);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[5]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(123 * Ⲇ, Ⲇ * 214);
			Δ.bezierCurveTo(119 * Ⲇ, Ⲇ * 198, Ⲇ * 129, Ⲇ * 189, 146 * Ⲇ, 194 * Ⲇ);
			Δ.bezierCurveTo(158 * Ⲇ, Ⲇ * 201, 165 * Ⲇ, 218 * Ⲇ, Ⲇ * 147, Ⲇ * 226);
			Δ.bezierCurveTo(Ⲇ * 135, 230 * Ⲇ, Ⲇ * 125, 222 * Ⲇ, 123 * Ⲇ, 214 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ΔΔⵠΔⵠ]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(257 * Ⲇ, 199 * Ⲇ);
			Δ.bezierCurveTo(264 * Ⲇ, Ⲇ * 199, 275 * Ⲇ, Ⲇ * 213, Ⲇ * 261, 220 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 246, Ⲇ * 225, Ⲇ * 235, Ⲇ * 200, Ⲇ * 257, Ⲇ * 199);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[5]);
			Δ.translate(Ⲇ * -ⵠᐃⵠᐃΔ, Ⲇ * 55);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(186 * Ⲇ, Ⲇ * 123);
			Δ.bezierCurveTo(Ⲇ * 198, 115 * Ⲇ, Ⲇ * 219, 110 * Ⲇ, Ⲇ * 219, 123 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 216, 135 * Ⲇ, 171 * Ⲇ, Ⲇ * 143, 186 * Ⲇ, Ⲇ * 123);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[5]);
			Δ.translate(ⵠⲆⲆⵠ * Ⲇ, -55 * Ⲇ);
			Δ.translate(-ΔⲆⵠⵠ * Ⲇ, Ⲇ * ⵠⵠⲆΔⵠ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 171, 241 * Ⲇ);
			Δ.bezierCurveTo(189 * Ⲇ, 234 * Ⲇ, 200 * Ⲇ, Ⲇ * 248, 189 * Ⲇ, Ⲇ * 254);
			Δ.bezierCurveTo(Ⲇ * 179, 260 * Ⲇ, Ⲇ * 158, Ⲇ * 246, 171 * Ⲇ, Ⲇ * 241);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[5]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 367, Ⲇ * 164);
			Δ.bezierCurveTo(380 * Ⲇ, Ⲇ * 160, 391 * Ⲇ, 185 * Ⲇ, 371 * Ⲇ, 189 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 362, Ⲇ * 192, Ⲇ * 354, 191 * Ⲇ, Ⲇ * 350, 185 * Ⲇ);
			Δ.bezierCurveTo(326 * Ⲇ, 205 * Ⲇ, Ⲇ * 314, 182 * Ⲇ, Ⲇ * 316, Ⲇ * 171);
			Δ.bezierCurveTo(317 * Ⲇ, Ⲇ * 150, 332 * Ⲇ, 143 * Ⲇ, Ⲇ * 347, 147 * Ⲇ);
			Δ.bezierCurveTo(361 * Ⲇ, Ⲇ * 151, 366 * Ⲇ, Ⲇ * 158, 367 * Ⲇ, 164 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[4])
		}
		return ᐃⵠ
	}

	function ⲆΔᐃΔⵠΔΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 155;
		ᐃⵠ.height = Ⲇ * 127;
		Δ.globalAlpha = .5;
		Δ.translate(ⵠΔⵠᐃ, Ⲇ * 8);
		Δ.translate(Ⲇ * -ΔΔⵠⲆⵠⵠᐃ, Ⲇ * -ⵠⲆⵠΔⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(55 * Ⲇ, 68 * Ⲇ);
		Δ.bezierCurveTo(86 * Ⲇ, 64 * Ⲇ, 117 * Ⲇ, 66 * Ⲇ, Ⲇ * 134, Ⲇ * 68);
		Δ.bezierCurveTo(152 * Ⲇ, 69 * Ⲇ, Ⲇ * 165, 86 * Ⲇ, 152 * Ⲇ, 104 * Ⲇ);
		Δ.bezierCurveTo(146 * Ⲇ, Ⲇ * 87, Ⲇ * 122, Ⲇ * 89, Ⲇ * 98, Ⲇ * 90);
		Δ.bezierCurveTo(Ⲇ * 64, Ⲇ * 89, 41 * Ⲇ, 91 * Ⲇ, 36 * Ⲇ, 106 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ΔΔᐃⵠᐃᐃΔ, Ⲇ * 92, Ⲇ * 31, Ⲇ * 71, 54 * Ⲇ, 69 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(0, -8 * Ⲇ);
		Δ.translate(ᐃΔᐃᐃⲆ * Ⲇ, ⲆⵠΔⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(24 * Ⲇ, 28 * Ⲇ);
		Δ.bezierCurveTo(39 * Ⲇ, 30 * Ⲇ, 37 * Ⲇ, 31 * Ⲇ, Ⲇ * 40, 32 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 22, Ⲇ * 45, Ⲇ * 26, 58 * Ⲇ, Ⲇ * 29, Ⲇ * 66);
		Δ.bezierCurveTo(Ⲇ * 86.5, Ⲇ * 65, Ⲇ * 86.5, Ⲇ * 65, 144 * Ⲇ, 64 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 151, 42 * Ⲇ, Ⲇ * 132, ⵠⲆΔⲆⲆ * Ⲇ, 120 * Ⲇ, 16 * Ⲇ);
		Δ.bezierCurveTo(106 * Ⲇ, 12 * Ⲇ, Ⲇ * 89, Ⲇ * ⵠΔⵠᐃ, Ⲇ * 73, Ⲇ * 3);
		Δ.bezierCurveTo(Ⲇ * 51, Ⲇ * ⲆⵠⲆΔᐃ, Ⲇ * 36, 20 * Ⲇ, Ⲇ * 25, Ⲇ * 28);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆΔⲆΔ], ΔᐃⲆᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 30, Ⲇ * 41);
		Δ.bezierCurveTo(49 * Ⲇ, Ⲇ * 31, 53 * Ⲇ, 29 * Ⲇ, Ⲇ * 62, Ⲇ * 27);
		Δ.bezierCurveTo(Ⲇ * 59, Ⲇ * 24, Ⲇ * 56, Ⲇ * 25, 53 * Ⲇ, Ⲇ * 24);
		Δ.bezierCurveTo(Ⲇ * 67, Ⲇ * 15, Ⲇ * 84, ⵠⲆⲆΔΔ * Ⲇ, Ⲇ * 120, Ⲇ * 16);
		Δ.bezierCurveTo(Ⲇ * 107, Ⲇ * ⵠⵠⲆᐃΔ, Ⲇ * 96, Ⲇ * ⵠΔᐃᐃΔ, 85 * Ⲇ, Ⲇ * ᐃᐃⲆⵠ);
		Δ.bezierCurveTo(Ⲇ * 59, Ⲇ * 3, Ⲇ * 54, 7 * Ⲇ, Ⲇ * 40, Ⲇ * 17);
		Δ.bezierCurveTo(Ⲇ * 32.5, 22.5 * Ⲇ, 32.5 * Ⲇ, 22.5 * Ⲇ, 25 * Ⲇ, 28 * Ⲇ);
		Δ.bezierCurveTo(32 * Ⲇ, 30 * Ⲇ, 32 * Ⲇ, Ⲇ * 30, 39 * Ⲇ, 32 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 24, 28 * Ⲇ);
		Δ.bezierCurveTo(39 * Ⲇ, 30 * Ⲇ, 37 * Ⲇ, Ⲇ * 31, Ⲇ * 40, 32 * Ⲇ);
		Δ.bezierCurveTo(22 * Ⲇ, Ⲇ * 45, 26 * Ⲇ, Ⲇ * 58, 29 * Ⲇ, 66 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 86.5, 65 * Ⲇ, Ⲇ * 86.5, 65 * Ⲇ, Ⲇ * 144, 64 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 151, 42 * Ⲇ, 132 * Ⲇ, ⲆΔᐃΔⵠ * Ⲇ, Ⲇ * 120, Ⲇ * 16);
		Δ.bezierCurveTo(106 * Ⲇ, ΔΔΔΔᐃΔΔ * Ⲇ, Ⲇ * 89, ⵠⵠⵠ * Ⲇ, 73 * Ⲇ, Ⲇ * ⵠᐃᐃⵠ);
		Δ.bezierCurveTo(Ⲇ * 51, ⵠᐃⵠΔᐃ * Ⲇ, Ⲇ * 36, ⲆⲆⲆⲆᐃ * Ⲇ, Ⲇ * 25, Ⲇ * 28);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[ⵠⵠΔⵠ], 4 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 18, 38 * Ⲇ, Ⲇ * 14.866068747318506);
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⲆᐃΔⲆⵠ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 39, 30 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 27, 38 * Ⲇ, 25 * Ⲇ, Ⲇ * 50, 26 * Ⲇ, Ⲇ * 60);
		Δ.bezierCurveTo(36.5 * Ⲇ, Ⲇ * 58.5, Ⲇ * 36.5, 58.5 * Ⲇ, 47 * Ⲇ, Ⲇ * 57);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃⲆⵠᐃ], Ⲇ * 4);
		Δ.translate(Ⲇ * -ⵠⵠᐃⵠᐃ, -20 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(55 * Ⲇ, 68 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 86, 64 * Ⲇ, 117 * Ⲇ, Ⲇ * 66, Ⲇ * 134, 68 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 152, 69 * Ⲇ, Ⲇ * 165, 86 * Ⲇ, 152 * Ⲇ, Ⲇ * 104);
		Δ.bezierCurveTo(146 * Ⲇ, Ⲇ * 87, Ⲇ * 122, 89 * Ⲇ, 98 * Ⲇ, Ⲇ * 90);
		Δ.bezierCurveTo(Ⲇ * 64, Ⲇ * 89, Ⲇ * 41, 91 * Ⲇ, 36 * Ⲇ, Ⲇ * 106);
		Δ.bezierCurveTo(Ⲇ * ⲆⵠⲆⵠⲆ, 92 * Ⲇ, Ⲇ * 31, 71 * Ⲇ, 54 * Ⲇ, Ⲇ * 69);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⲆᐃⵠ], Δⵠ[ᐃᐃⲆⵠᐃ], Ⲇ * ᐃⵠⵠⲆ);
		return ᐃⵠ
	}
	const ⲆⲆⲆΔⲆ = ⲆⵠᐃΔⲆ;

	function ΔΔⲆⵠⲆⲆΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 424;
		ᐃⵠ.height = 788 * Ⲇ;
		Δ.translate(Ⲇ * 25, 25 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⵠⲆ;
		Δ.save();
		Δ.translate(Ⲇ * 193.5, Ⲇ * 602.5);
		Δ.rotate(-.12);
		ᐃΔⵠ(Δ, -26.5 * Ⲇ, -97.5 * Ⲇ, Ⲇ * 53, Ⲇ * 195, Ⲇ * 25);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 137, 519 * Ⲇ);
		Δ.bezierCurveTo(182 * Ⲇ, 513 * Ⲇ, Ⲇ * 182, 513 * Ⲇ, Ⲇ * 227, 507 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 214, 417 * Ⲇ, 189 * Ⲇ, 304 * Ⲇ, 221 * Ⲇ, Ⲇ * 180);
		Δ.bezierCurveTo(191 * Ⲇ, 126 * Ⲇ, 192 * Ⲇ, 105 * Ⲇ, 198 * Ⲇ, Ⲇ * 64);
		Δ.bezierCurveTo(123 * Ⲇ, Ⲇ * 102, 99 * Ⲇ, Ⲇ * 285, Ⲇ * 137, Ⲇ * 517);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(175 * Ⲇ, Ⲇ * 119);
		Δ.bezierCurveTo(Ⲇ * 176, Ⲇ * 142, Ⲇ * 184, 165 * Ⲇ, Ⲇ * 197, Ⲇ * 183);
		Δ.bezierCurveTo(167 * Ⲇ, 325 * Ⲇ, 191 * Ⲇ, Ⲇ * 405, 202 * Ⲇ, Ⲇ * 502);
		Δ.bezierCurveTo(180 * Ⲇ, 503 * Ⲇ, Ⲇ * 180, 503 * Ⲇ, 158 * Ⲇ, Ⲇ * 504);
		Δ.bezierCurveTo(135 * Ⲇ, Ⲇ * 396, Ⲇ * 134, Ⲇ * 185, 175 * Ⲇ, 119 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(110 * Ⲇ, Ⲇ * 518);
		Δ.bezierCurveTo(111.5 * Ⲇ, Ⲇ * 533, 111.5 * Ⲇ, Ⲇ * 533, Ⲇ * 113, 548 * Ⲇ);
		Δ.bezierCurveTo(162.5 * Ⲇ, Ⲇ * 544, 162.5 * Ⲇ, 544 * Ⲇ, 212 * Ⲇ, 540 * Ⲇ);
		Δ.bezierCurveTo(312 * Ⲇ, 535 * Ⲇ, 281 * Ⲇ, Ⲇ * 665, Ⲇ * 225, 665 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 227, 686.5 * Ⲇ, 227 * Ⲇ, 686.5 * Ⲇ, Ⲇ * 229, 708 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 343, Ⲇ * 684, 354 * Ⲇ, Ⲇ * 496, 222 * Ⲇ, Ⲇ * 498);
		Δ.bezierCurveTo(Ⲇ * 165.5, 503 * Ⲇ, 165.5 * Ⲇ, 503 * Ⲇ, 109 * Ⲇ, Ⲇ * 508);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ]);
		ⵠΔᐃ(Δ, Ⲇ * 204, Ⲇ * 693, 36.013886210738214 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0]);
		ⵠΔᐃ(Δ, 105 * Ⲇ, 518 * Ⲇ, Ⲇ * 30);
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(171 * Ⲇ, Ⲇ * 535);
		Δ.bezierCurveTo(Ⲇ * 139.5, Ⲇ * 537.5, Ⲇ * 139.5, Ⲇ * 537.5, 108 * Ⲇ, Ⲇ * 540);
		Δ.bezierCurveTo(110 * Ⲇ, 527.5 * Ⲇ, Ⲇ * 110, Ⲇ * 527.5, 112 * Ⲇ, 515 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 148, 513 * Ⲇ, 148 * Ⲇ, Ⲇ * 513, Ⲇ * 184, Ⲇ * 511);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 244, Ⲇ * 669);
		Δ.bezierCurveTo(248.5 * Ⲇ, Ⲇ * 680, Ⲇ * 248.5, 680 * Ⲇ, 253 * Ⲇ, 691 * Ⲇ);
		Δ.bezierCurveTo(239.5 * Ⲇ, 697 * Ⲇ, 239.5 * Ⲇ, Ⲇ * 697, 226 * Ⲇ, 703 * Ⲇ);
		Δ.bezierCurveTo(223 * Ⲇ, Ⲇ * 691.5, 223 * Ⲇ, 691.5 * Ⲇ, Ⲇ * 220, 680 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(Ⲇ * -25, Ⲇ * -25);
		Δ.globalAlpha = ⲆⲆᐃⵠ;
		Δ.save();
		Δ.translate(193.5 * Ⲇ, 602.5 * Ⲇ);
		Δ.rotate(-.12);
		ᐃΔⵠ(Δ, Ⲇ * -26.5, -97.5 * Ⲇ, Ⲇ * 53, 195 * Ⲇ, Ⲇ * 25);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⲆ], Δⵠ[2], 16 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(137 * Ⲇ, Ⲇ * 519);
		Δ.bezierCurveTo(182 * Ⲇ, 513 * Ⲇ, Ⲇ * 182, 513 * Ⲇ, Ⲇ * 227, Ⲇ * 507);
		Δ.bezierCurveTo(214 * Ⲇ, Ⲇ * 417, 189 * Ⲇ, Ⲇ * 304, Ⲇ * 221, Ⲇ * 180);
		Δ.bezierCurveTo(Ⲇ * 191, 126 * Ⲇ, Ⲇ * 192, 105 * Ⲇ, Ⲇ * 198, 64 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 123, Ⲇ * 102, 99 * Ⲇ, 285 * Ⲇ, 137 * Ⲇ, Ⲇ * 517);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⲆ], Δⵠ[ΔⲆΔⲆ], Ⲇ * 16);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 175, Ⲇ * 119);
		Δ.bezierCurveTo(Ⲇ * 176, 142 * Ⲇ, 184 * Ⲇ, Ⲇ * 165, 197 * Ⲇ, Ⲇ * 183);
		Δ.bezierCurveTo(167 * Ⲇ, 325 * Ⲇ, 191 * Ⲇ, 405 * Ⲇ, Ⲇ * 202, 502 * Ⲇ);
		Δ.bezierCurveTo(180 * Ⲇ, 503 * Ⲇ, Ⲇ * 180, 503 * Ⲇ, Ⲇ * 158, 504 * Ⲇ);
		Δ.bezierCurveTo(135 * Ⲇ, 396 * Ⲇ, Ⲇ * 134, 185 * Ⲇ, Ⲇ * 175, 119 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 110, Ⲇ * 518);
		Δ.bezierCurveTo(Ⲇ * 111.5, Ⲇ * 533, 111.5 * Ⲇ, 533 * Ⲇ, Ⲇ * 113, Ⲇ * 548);
		Δ.bezierCurveTo(162.5 * Ⲇ, 544 * Ⲇ, 162.5 * Ⲇ, Ⲇ * 544, 212 * Ⲇ, Ⲇ * 540);
		Δ.bezierCurveTo(312 * Ⲇ, 535 * Ⲇ, 281 * Ⲇ, 665 * Ⲇ, 225 * Ⲇ, 665 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 227, Ⲇ * 686.5, Ⲇ * 227, Ⲇ * 686.5, 229 * Ⲇ, Ⲇ * 708);
		Δ.bezierCurveTo(343 * Ⲇ, 684 * Ⲇ, 354 * Ⲇ, 496 * Ⲇ, 222 * Ⲇ, Ⲇ * 498);
		Δ.bezierCurveTo(165.5 * Ⲇ, 503 * Ⲇ, 165.5 * Ⲇ, 503 * Ⲇ, Ⲇ * 109, Ⲇ * 508);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔᐃᐃΔ], Δⵠ[4], ΔᐃⵠⵠⲆᐃΔ * Ⲇ);
		ⵠΔᐃ(Δ, 204 * Ⲇ, 693 * Ⲇ, Ⲇ * 36.013886210738214);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔⵠΔ], Δⵠ[ΔⲆⲆⲆ], 16 * Ⲇ);
		ⵠΔᐃ(Δ, 105 * Ⲇ, Ⲇ * 518, Ⲇ * 30);
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[4], Ⲇ * 16);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 171, 535 * Ⲇ);
		Δ.bezierCurveTo(139.5 * Ⲇ, 537.5 * Ⲇ, 139.5 * Ⲇ, Ⲇ * 537.5, Ⲇ * 108, 540 * Ⲇ);
		Δ.bezierCurveTo(110 * Ⲇ, 527.5 * Ⲇ, Ⲇ * 110, 527.5 * Ⲇ, Ⲇ * 112, Ⲇ * 515);
		Δ.bezierCurveTo(148 * Ⲇ, Ⲇ * 513, 148 * Ⲇ, Ⲇ * 513, 184 * Ⲇ, Ⲇ * 511);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(244 * Ⲇ, Ⲇ * 669);
		Δ.bezierCurveTo(Ⲇ * 248.5, 680 * Ⲇ, Ⲇ * 248.5, Ⲇ * 680, Ⲇ * 253, Ⲇ * 691);
		Δ.bezierCurveTo(Ⲇ * 239.5, 697 * Ⲇ, 239.5 * Ⲇ, 697 * Ⲇ, Ⲇ * 226, 703 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 223, Ⲇ * 691.5, Ⲇ * 223, 691.5 * Ⲇ, Ⲇ * 220, Ⲇ * 680);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6]);
		ⵠΔᐃ(Δ, Ⲇ * 204, 693 * Ⲇ, 17.029386365926403 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[7]);
		ⵠΔᐃ(Δ, Ⲇ * 106, Ⲇ * 518, Ⲇ * 12);
		ⵠᐃ(Δ, Δⵠ[7]);
		return ᐃⵠ
	}

	function ΔΔⲆⲆΔᐃᐃ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 104 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 112;
		Δ.translate(0, Ⲇ * 15);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ⲆⲆΔᐃᐃ, 44 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 30.5, 48 * Ⲇ, 30.5 * Ⲇ, Ⲇ * 48, Ⲇ * 45, 52 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 36.5, Ⲇ * 63, 36.5 * Ⲇ, 63 * Ⲇ, 28 * Ⲇ, 74 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 32, Ⲇ * 86, 61 * Ⲇ, Ⲇ * 92, 78 * Ⲇ, Ⲇ * 76);
		Δ.bezierCurveTo(Ⲇ * 93, 62 * Ⲇ, Ⲇ * 92, 40 * Ⲇ, Ⲇ * 80, 26 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 65, Ⲇ * 11, 42 * Ⲇ, Ⲇ * ᐃⵠᐃΔⲆᐃΔ, 34 * Ⲇ, 21 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 22, Ⲇ * 27, ᐃⲆⲆΔᐃⵠΔ * Ⲇ, 39 * Ⲇ, 16 * Ⲇ, Ⲇ * 44);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ⲆⵠⲆ;
		Δ.translate(0, Ⲇ * -ⲆⵠⲆⲆⲆⲆᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ᐃⵠΔⲆΔΔⵠ * Ⲇ, Ⲇ * 44);
		Δ.bezierCurveTo(30.5 * Ⲇ, 48 * Ⲇ, Ⲇ * 30.5, 48 * Ⲇ, 45 * Ⲇ, 52 * Ⲇ);
		Δ.bezierCurveTo(36.5 * Ⲇ, Ⲇ * 63, Ⲇ * 36.5, 63 * Ⲇ, Ⲇ * 28, 74 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 32, 86 * Ⲇ, Ⲇ * 61, 92 * Ⲇ, 78 * Ⲇ, 76 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 93, Ⲇ * 62, 92 * Ⲇ, Ⲇ * 40, 80 * Ⲇ, 26 * Ⲇ);
		Δ.bezierCurveTo(65 * Ⲇ, Ⲇ * ⵠⵠⲆᐃΔ, Ⲇ * 42, Ⲇ * ⲆⵠΔⵠⲆΔΔ, 34 * Ⲇ, Ⲇ * 21);
		Δ.bezierCurveTo(22 * Ⲇ, Ⲇ * 27, ⵠᐃΔⲆΔⲆⵠ * Ⲇ, Ⲇ * 39, Ⲇ * 16, Ⲇ * 44);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃⲆⵠᐃ], ᐃⲆᐃⵠᐃ * Ⲇ);
		return ᐃⵠ
	}

	function ΔⵠΔⵠⲆᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 100 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 250;
		Δ.translate(Ⲇ * -135, -75 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .8 : ⵠᐃᐃ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(178.5 * Ⲇ, Ⲇ * 238.03125);
		Δ.bezierCurveTo(Ⲇ * 177, Ⲇ * 175.03125, Ⲇ * 177, Ⲇ * 175.03125, 175.5 * Ⲇ, Ⲇ * 112.03125);
		Δ.bezierCurveTo(184.5 * Ⲇ, Ⲇ * 100.53125, Ⲇ * 184.5, Ⲇ * 100.53125, 193.5 * Ⲇ, 89.03125 * Ⲇ);
		Δ.bezierCurveTo(202 * Ⲇ, 100.03125 * Ⲇ, Ⲇ * 202, 100.03125 * Ⲇ, Ⲇ * 210.5, 111.03125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 209.5, 174.03125 * Ⲇ, 209.5 * Ⲇ, Ⲇ * 174.03125, Ⲇ * 208.5, 237.03125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 155.5, 239.03125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 194, 238.53125 * Ⲇ, Ⲇ * 194, Ⲇ * 238.53125, Ⲇ * 232.5, Ⲇ * 238.03125);
		Δ.bezierCurveTo(232.5 * Ⲇ, 243.03125 * Ⲇ, Ⲇ * 232.5, 243.03125 * Ⲇ, 232.5 * Ⲇ, Ⲇ * 248.03125);
		Δ.bezierCurveTo(Ⲇ * 194, Ⲇ * 248.53125, 194 * Ⲇ, Ⲇ * 248.53125, 155.5 * Ⲇ, 249.03125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		ⵠΔᐃ(Δ, Ⲇ * 160.5, 243.03125 * Ⲇ, Ⲇ * 7);
		ⵠᐃ(Δ, Δⵠ[0]);
		ⵠΔᐃ(Δ, Ⲇ * 227.5, Ⲇ * 242.03125, 7 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 185.5, Ⲇ * 253.03125);
		Δ.bezierCurveTo(Ⲇ * 193.5, 253.03125 * Ⲇ, Ⲇ * 193.5, 253.03125 * Ⲇ, Ⲇ * 201.5, 253.03125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 201.5, 276.03125 * Ⲇ, Ⲇ * 201.5, Ⲇ * 276.03125, Ⲇ * 201.5, Ⲇ * 299.03125);
		Δ.bezierCurveTo(Ⲇ * 194.5, 299.03125 * Ⲇ, Ⲇ * 194.5, 299.03125 * Ⲇ, Ⲇ * 187.5, Ⲇ * 299.03125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ], Δⵠ[ⲆⲆᐃⲆ], ᐃᐃᐃⲆⲆ * Ⲇ);
		ⵠΔᐃ(Δ, 194 * Ⲇ, Ⲇ * 298, Ⲇ * ⵠⲆⲆΔᐃΔᐃ);
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠᐃΔ], 5 * Ⲇ);
		Δ.globalAlpha = ᐃⲆⲆ;
		Δ.translate(-ᐃⲆᐃⲆⲆ * Ⲇ, Ⲇ * ⵠΔⵠᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 178.5, Ⲇ * 238.03125);
		Δ.bezierCurveTo(Ⲇ * 177, Ⲇ * 175.03125, Ⲇ * 177, Ⲇ * 175.03125, 175.5 * Ⲇ, 112.03125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 184.5, Ⲇ * 100.53125, Ⲇ * 184.5, Ⲇ * 100.53125, Ⲇ * 193.5, Ⲇ * 89.03125);
		Δ.bezierCurveTo(202 * Ⲇ, Ⲇ * 100.03125, 202 * Ⲇ, 100.03125 * Ⲇ, 210.5 * Ⲇ, Ⲇ * 111.03125);
		Δ.bezierCurveTo(209.5 * Ⲇ, Ⲇ * 174.03125, 209.5 * Ⲇ, 174.03125 * Ⲇ, Ⲇ * 208.5, 237.03125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(155.5 * Ⲇ, 239.03125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 194, Ⲇ * 238.53125, Ⲇ * 194, 238.53125 * Ⲇ, Ⲇ * 232.5, 238.03125 * Ⲇ);
		Δ.bezierCurveTo(232.5 * Ⲇ, Ⲇ * 243.03125, 232.5 * Ⲇ, 243.03125 * Ⲇ, Ⲇ * 232.5, Ⲇ * 248.03125);
		Δ.bezierCurveTo(Ⲇ * 194, 248.53125 * Ⲇ, 194 * Ⲇ, 248.53125 * Ⲇ, Ⲇ * 155.5, Ⲇ * 249.03125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⲆ], Δⵠ[2], Ⲇ * ⲆᐃΔⲆⵠ);
		ⵠΔᐃ(Δ, Ⲇ * 160.5, 243.03125 * Ⲇ, Ⲇ * 7);
		ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⵠ], Δⵠ[2], Δᐃᐃⵠ * Ⲇ);
		ⵠΔᐃ(Δ, 227.5 * Ⲇ, 242.03125 * Ⲇ, ⲆⵠⵠΔᐃ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠⲆΔᐃ], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 185.5, 253.03125 * Ⲇ);
		Δ.bezierCurveTo(193.5 * Ⲇ, Ⲇ * 253.03125, Ⲇ * 193.5, Ⲇ * 253.03125, 201.5 * Ⲇ, Ⲇ * 253.03125);
		Δ.bezierCurveTo(201.5 * Ⲇ, 276.03125 * Ⲇ, Ⲇ * 201.5, Ⲇ * 276.03125, Ⲇ * 201.5, Ⲇ * 299.03125);
		Δ.bezierCurveTo(194.5 * Ⲇ, Ⲇ * 299.03125, Ⲇ * 194.5, 299.03125 * Ⲇ, Ⲇ * 187.5, Ⲇ * 299.03125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃⵠΔⲆ], Ⲇ * ⵠⵠᐃⵠᐃ);
		ⵠΔᐃ(Δ, 194 * Ⲇ, 298 * Ⲇ, Ⲇ * 9);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔⵠⲆⲆ], Ⲇ * ᐃΔᐃᐃⲆ);
		return ᐃⵠ
	}

	function ⲆⲆΔⲆⵠᐃᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 321 * Ⲇ;
		ᐃⵠ.height = 284 * Ⲇ;
		Δ.translate(100 * Ⲇ, 30 * Ⲇ);
		Δ.translate(5 * Ⲇ, ΔΔⲆΔΔ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ᐃⵠᐃᐃ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(58 * Ⲇ, Ⲇ * 33);
		Δ.bezierCurveTo(Ⲇ * 81, 22 * Ⲇ, Ⲇ * 93, Ⲇ * 26, Ⲇ * 123, 47 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 160, 73 * Ⲇ, Ⲇ * 169, 80 * Ⲇ, 191 * Ⲇ, Ⲇ * 99);
		Δ.bezierCurveTo(Ⲇ * 202, Ⲇ * 107, Ⲇ * 211, 118 * Ⲇ, Ⲇ * 195, 151 * Ⲇ);
		Δ.bezierCurveTo(181 * Ⲇ, Ⲇ * 183, 157 * Ⲇ, Ⲇ * 192, Ⲇ * 129, Ⲇ * 174);
		Δ.bezierCurveTo(78 * Ⲇ, 140 * Ⲇ, Ⲇ * 68, 129 * Ⲇ, 37 * Ⲇ, Ⲇ * 94);
		Δ.bezierCurveTo(Ⲇ * ⲆᐃⲆᐃⲆᐃᐃ, Ⲇ * 68, Ⲇ * 25, Ⲇ * 52, Ⲇ * 56, Ⲇ * 34);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(-ⵠᐃⵠᐃΔ * Ⲇ, -ⵠΔⲆⲆΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(58 * Ⲇ, Ⲇ * 33);
		Δ.bezierCurveTo(81 * Ⲇ, 22 * Ⲇ, 93 * Ⲇ, 26 * Ⲇ, 123 * Ⲇ, 47 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 160, Ⲇ * 73, Ⲇ * 169, Ⲇ * 80, Ⲇ * 191, 99 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 202, 107 * Ⲇ, 211 * Ⲇ, Ⲇ * 118, Ⲇ * 195, Ⲇ * 151);
		Δ.bezierCurveTo(Ⲇ * 181, 183 * Ⲇ, Ⲇ * 157, Ⲇ * 192, 129 * Ⲇ, Ⲇ * 174);
		Δ.bezierCurveTo(Ⲇ * 78, 140 * Ⲇ, 68 * Ⲇ, Ⲇ * 129, Ⲇ * 37, 94 * Ⲇ);
		Δ.bezierCurveTo(15 * Ⲇ, 68 * Ⲇ, 25 * Ⲇ, 52 * Ⲇ, 56 * Ⲇ, Ⲇ * 34);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(167 * Ⲇ, 120 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 196, 106 * Ⲇ, Ⲇ * 207, Ⲇ * 111, 199 * Ⲇ, Ⲇ * 135);
		Δ.bezierCurveTo(185 * Ⲇ, Ⲇ * 172, Ⲇ * 166, Ⲇ * 187, Ⲇ * 145, Ⲇ * 179);
		Δ.bezierCurveTo(Ⲇ * 118, Ⲇ * 166, Ⲇ * 127, Ⲇ * 139, Ⲇ * 166, 121 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 25, 64 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 59, Ⲇ * 96, 97 * Ⲇ, Ⲇ * 128, Ⲇ * 129, Ⲇ * 151);
		Δ.bezierCurveTo(Ⲇ * 126, 163 * Ⲇ, 134 * Ⲇ, 174 * Ⲇ, 142 * Ⲇ, 180 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 114, Ⲇ * 170, Ⲇ * 68, 134 * Ⲇ, 31 * Ⲇ, 85 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 24, 71 * Ⲇ, 24 * Ⲇ, 70 * Ⲇ, 25 * Ⲇ, Ⲇ * 65);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 161, 141 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 181, 131 * Ⲇ, Ⲇ * 186, Ⲇ * 135, Ⲇ * 173, 152 * Ⲇ);
		Δ.bezierCurveTo(163 * Ⲇ, Ⲇ * 163, Ⲇ * 155, 161 * Ⲇ, 151 * Ⲇ, 150 * Ⲇ);
		Δ.bezierCurveTo(147 * Ⲇ, 140 * Ⲇ, Ⲇ * 155, 131 * Ⲇ, 175 * Ⲇ, Ⲇ * 125);
		Δ.bezierCurveTo(190 * Ⲇ, Ⲇ * 120, Ⲇ * 196, Ⲇ * 121, Ⲇ * 189, Ⲇ * 143);
		Δ.bezierCurveTo(Ⲇ * 182, Ⲇ * 167, 169 * Ⲇ, 174 * Ⲇ, 157 * Ⲇ, 174 * Ⲇ);
		Δ.bezierCurveTo(138 * Ⲇ, 172 * Ⲇ, 139 * Ⲇ, Ⲇ * 162, Ⲇ * 140, 156 * Ⲇ);
		ⵠᐃ(Δ, ΔⵠᐃΔᐃ, Δⵠ[ΔΔⲆΔ], Ⲇ * ᐃᐃⵠΔ);
		Δ.translate(Ⲇ * -ⵠⵠΔΔᐃ, Ⲇ * -30);
		Δ.translate(Ⲇ * ⵠΔⲆⲆΔ, 70 * Ⲇ);
		Δ.translate(Ⲇ * 5, ᐃⲆᐃⲆⲆ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(58 * Ⲇ, 33 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 81, 22 * Ⲇ, 93 * Ⲇ, Ⲇ * 26, 123 * Ⲇ, 47 * Ⲇ);
		Δ.bezierCurveTo(160 * Ⲇ, 73 * Ⲇ, 169 * Ⲇ, 80 * Ⲇ, Ⲇ * 191, 99 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 202, Ⲇ * 107, 211 * Ⲇ, Ⲇ * 118, 195 * Ⲇ, 151 * Ⲇ);
		Δ.bezierCurveTo(181 * Ⲇ, 183 * Ⲇ, Ⲇ * 157, Ⲇ * 192, Ⲇ * 129, Ⲇ * 174);
		Δ.bezierCurveTo(Ⲇ * 78, Ⲇ * 140, Ⲇ * 68, 129 * Ⲇ, Ⲇ * 37, Ⲇ * 94);
		Δ.bezierCurveTo(ΔⲆΔΔΔΔᐃ * Ⲇ, Ⲇ * 68, 25 * Ⲇ, 52 * Ⲇ, Ⲇ * 56, 34 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]);
		Δ.globalAlpha = 1;
		Δ.translate(-ⲆⵠⲆᐃ * Ⲇ, Ⲇ * -10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 58, Ⲇ * 33);
		Δ.bezierCurveTo(Ⲇ * 81, 22 * Ⲇ, Ⲇ * 93, Ⲇ * 26, 123 * Ⲇ, 47 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 160, Ⲇ * 73, Ⲇ * 169, Ⲇ * 80, Ⲇ * 191, 99 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 202, Ⲇ * 107, Ⲇ * 211, Ⲇ * 118, Ⲇ * 195, Ⲇ * 151);
		Δ.bezierCurveTo(Ⲇ * 181, Ⲇ * 183, 157 * Ⲇ, 192 * Ⲇ, 129 * Ⲇ, 174 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 78, 140 * Ⲇ, Ⲇ * 68, 129 * Ⲇ, Ⲇ * 37, 94 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 15, 68 * Ⲇ, 25 * Ⲇ, Ⲇ * 52, Ⲇ * 56, Ⲇ * 34);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃⵠΔⲆ], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(167 * Ⲇ, 120 * Ⲇ);
		Δ.bezierCurveTo(196 * Ⲇ, Ⲇ * 106, 207 * Ⲇ, 111 * Ⲇ, Ⲇ * 199, 135 * Ⲇ);
		Δ.bezierCurveTo(185 * Ⲇ, 172 * Ⲇ, Ⲇ * 166, 187 * Ⲇ, Ⲇ * 145, Ⲇ * 179);
		Δ.bezierCurveTo(Ⲇ * 118, Ⲇ * 166, Ⲇ * 127, Ⲇ * 139, Ⲇ * 166, 121 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 25, Ⲇ * 64);
		Δ.bezierCurveTo(59 * Ⲇ, 96 * Ⲇ, Ⲇ * 97, Ⲇ * 128, 129 * Ⲇ, Ⲇ * 151);
		Δ.bezierCurveTo(Ⲇ * 126, Ⲇ * 163, 134 * Ⲇ, 174 * Ⲇ, 142 * Ⲇ, 180 * Ⲇ);
		Δ.bezierCurveTo(114 * Ⲇ, 170 * Ⲇ, 68 * Ⲇ, Ⲇ * 134, 31 * Ⲇ, 85 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 24, Ⲇ * 71, 24 * Ⲇ, Ⲇ * 70, Ⲇ * 25, Ⲇ * 65);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(161 * Ⲇ, Ⲇ * 141);
		Δ.bezierCurveTo(Ⲇ * 181, Ⲇ * 131, Ⲇ * 186, 135 * Ⲇ, Ⲇ * 173, 152 * Ⲇ);
		Δ.bezierCurveTo(163 * Ⲇ, 163 * Ⲇ, 155 * Ⲇ, Ⲇ * 161, 151 * Ⲇ, 150 * Ⲇ);
		Δ.bezierCurveTo(147 * Ⲇ, Ⲇ * 140, Ⲇ * 155, Ⲇ * 131, Ⲇ * 175, 125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 190, 120 * Ⲇ, Ⲇ * 196, 121 * Ⲇ, 189 * Ⲇ, 143 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 182, Ⲇ * 167, 169 * Ⲇ, Ⲇ * 174, 157 * Ⲇ, Ⲇ * 174);
		Δ.bezierCurveTo(Ⲇ * 138, Ⲇ * 172, Ⲇ * 139, 162 * Ⲇ, 140 * Ⲇ, 156 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[4], 4 * Ⲇ);
		Δ.translate(20 * Ⲇ, -80 * Ⲇ);
		Δ.translate(5 * Ⲇ, Ⲇ * ᐃⲆᐃⲆⲆ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 58, Ⲇ * 33);
		Δ.bezierCurveTo(81 * Ⲇ, Ⲇ * 22, Ⲇ * 93, 26 * Ⲇ, 123 * Ⲇ, Ⲇ * 47);
		Δ.bezierCurveTo(160 * Ⲇ, Ⲇ * 73, 169 * Ⲇ, 80 * Ⲇ, Ⲇ * 191, Ⲇ * 99);
		Δ.bezierCurveTo(Ⲇ * 202, 107 * Ⲇ, 211 * Ⲇ, Ⲇ * 118, Ⲇ * 195, 151 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 181, 183 * Ⲇ, Ⲇ * 157, 192 * Ⲇ, 129 * Ⲇ, 174 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 78, Ⲇ * 140, Ⲇ * 68, 129 * Ⲇ, Ⲇ * 37, 94 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ⵠⵠⲆΔⵠ, Ⲇ * 68, 25 * Ⲇ, 52 * Ⲇ, Ⲇ * 56, 34 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ⵠⵠⵠⲆ;
		Δ.translate(Ⲇ * -ΔΔⵠΔⵠ, -10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 58, Ⲇ * 33);
		Δ.bezierCurveTo(Ⲇ * 81, 22 * Ⲇ, 93 * Ⲇ, 26 * Ⲇ, 123 * Ⲇ, 47 * Ⲇ);
		Δ.bezierCurveTo(160 * Ⲇ, Ⲇ * 73, Ⲇ * 169, Ⲇ * 80, Ⲇ * 191, 99 * Ⲇ);
		Δ.bezierCurveTo(202 * Ⲇ, 107 * Ⲇ, 211 * Ⲇ, Ⲇ * 118, 195 * Ⲇ, Ⲇ * 151);
		Δ.bezierCurveTo(181 * Ⲇ, Ⲇ * 183, 157 * Ⲇ, 192 * Ⲇ, 129 * Ⲇ, Ⲇ * 174);
		Δ.bezierCurveTo(78 * Ⲇ, Ⲇ * 140, 68 * Ⲇ, 129 * Ⲇ, 37 * Ⲇ, Ⲇ * 94);
		Δ.bezierCurveTo(ⵠⵠΔΔΔ * Ⲇ, 68 * Ⲇ, Ⲇ * 25, Ⲇ * 52, 56 * Ⲇ, Ⲇ * 34);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(167 * Ⲇ, 120 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 196, Ⲇ * 106, Ⲇ * 207, Ⲇ * 111, Ⲇ * 199, 135 * Ⲇ);
		Δ.bezierCurveTo(185 * Ⲇ, Ⲇ * 172, Ⲇ * 166, 187 * Ⲇ, 145 * Ⲇ, 179 * Ⲇ);
		Δ.bezierCurveTo(118 * Ⲇ, 166 * Ⲇ, Ⲇ * 127, Ⲇ * 139, 166 * Ⲇ, 121 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(25 * Ⲇ, 64 * Ⲇ);
		Δ.bezierCurveTo(59 * Ⲇ, 96 * Ⲇ, Ⲇ * 97, 128 * Ⲇ, 129 * Ⲇ, 151 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 126, Ⲇ * 163, 134 * Ⲇ, 174 * Ⲇ, Ⲇ * 142, 180 * Ⲇ);
		Δ.bezierCurveTo(114 * Ⲇ, 170 * Ⲇ, Ⲇ * 68, Ⲇ * 134, Ⲇ * 31, Ⲇ * 85);
		Δ.bezierCurveTo(Ⲇ * 24, Ⲇ * 71, Ⲇ * 24, Ⲇ * 70, 25 * Ⲇ, 65 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(161 * Ⲇ, Ⲇ * 141);
		Δ.bezierCurveTo(181 * Ⲇ, 131 * Ⲇ, Ⲇ * 186, Ⲇ * 135, 173 * Ⲇ, Ⲇ * 152);
		Δ.bezierCurveTo(Ⲇ * 163, 163 * Ⲇ, 155 * Ⲇ, Ⲇ * 161, Ⲇ * 151, 150 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 147, 140 * Ⲇ, 155 * Ⲇ, Ⲇ * 131, 175 * Ⲇ, 125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 190, 120 * Ⲇ, 196 * Ⲇ, 121 * Ⲇ, Ⲇ * 189, Ⲇ * 143);
		Δ.bezierCurveTo(182 * Ⲇ, Ⲇ * 167, Ⲇ * 169, 174 * Ⲇ, 157 * Ⲇ, Ⲇ * 174);
		Δ.bezierCurveTo(Ⲇ * 138, 172 * Ⲇ, 139 * Ⲇ, 162 * Ⲇ, Ⲇ * 140, Ⲇ * 156);
		ⵠᐃ(Δ, undefined, Δⵠ[ΔⵠⲆⵠᐃ], ᐃΔⵠᐃⲆ * Ⲇ);
		return ᐃⵠ
	}

	function ⲆᐃᐃΔⵠⵠᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 283 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 224;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ΔⵠⵠΔᐃ, 33 * Ⲇ);
		Δ.bezierCurveTo(85 * Ⲇ, 62 * Ⲇ, Ⲇ * 102, Ⲇ * 66, Ⲇ * 110, Ⲇ * 83);
		ⵠᐃ(Δ, ΔⵠⲆⲆΔ, Δⵠ[0], Ⲇ * 40);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(181 * Ⲇ, Ⲇ * 32);
		Δ.bezierCurveTo(Ⲇ * 196, 62 * Ⲇ, Ⲇ * 181, 68 * Ⲇ, Ⲇ * 178, Ⲇ * 69);
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠⵠΔΔ], 40 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(225 * Ⲇ, Ⲇ * 52);
		Δ.bezierCurveTo(Ⲇ * 228, 78 * Ⲇ, Ⲇ * 207, 77 * Ⲇ, 192 * Ⲇ, Ⲇ * 88);
		ⵠᐃ(Δ, undefined, Δⵠ[0], 40 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(34 * Ⲇ, Ⲇ * 134);
		Δ.bezierCurveTo(Ⲇ * 46, Ⲇ * 111, Ⲇ * 57, 111 * Ⲇ, Ⲇ * 79, Ⲇ * 109);
		ⵠᐃ(Δ, ΔΔⲆⲆⲆ, Δⵠ[Δⵠⵠ], Ⲇ * 40);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(249 * Ⲇ, 135 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 233, 107 * Ⲇ, Ⲇ * 212, Ⲇ * 112, Ⲇ * 202, 115 * Ⲇ);
		ⵠᐃ(Δ, ⵠᐃⲆⵠⲆ, Δⵠ[0], 40 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(56 * Ⲇ, Ⲇ * 50);
		Δ.bezierCurveTo(Ⲇ * 56, Ⲇ * 82, 73 * Ⲇ, 82 * Ⲇ, Ⲇ * 93, Ⲇ * 89);
		ⵠᐃ(Δ, undefined, Δⵠ[ⲆᐃΔⵠ], 40 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(93 * Ⲇ, 55 * Ⲇ);
		Δ.bezierCurveTo(124 * Ⲇ, Ⲇ * 29, Ⲇ * 179, Ⲇ * 44, Ⲇ * 188, Ⲇ * 52);
		Δ.bezierCurveTo(207 * Ⲇ, Ⲇ * 64, Ⲇ * 226, 94 * Ⲇ, 231 * Ⲇ, 118 * Ⲇ);
		Δ.bezierCurveTo(236 * Ⲇ, Ⲇ * 145, Ⲇ * 222, Ⲇ * 184, 193 * Ⲇ, 192 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 147, 201 * Ⲇ, Ⲇ * 116, Ⲇ * 200, Ⲇ * 93, 193 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 61, 180 * Ⲇ, Ⲇ * 48, Ⲇ * 147, Ⲇ * 50, Ⲇ * 123);
		Δ.bezierCurveTo(Ⲇ * 50, Ⲇ * 93, 76 * Ⲇ, 66 * Ⲇ, 92 * Ⲇ, 56 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ]);
		return ᐃⵠ
	}

	function ᐃⵠΔⲆⲆΔⵠ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 131;
		ᐃⵠ.height = Ⲇ * 121;
		Δ.translate(ⲆⲆΔ, Ⲇ * 20);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 110, 59 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 93, Ⲇ * 61.5, 93 * Ⲇ, Ⲇ * 61.5, 76 * Ⲇ, Ⲇ * 64);
		Δ.bezierCurveTo(Ⲇ * 84.5, Ⲇ * 78.5, Ⲇ * 84.5, Ⲇ * 78.5, 93 * Ⲇ, Ⲇ * 93);
		Δ.bezierCurveTo(Ⲇ * 70, Ⲇ * 111, 43 * Ⲇ, 103 * Ⲇ, 30 * Ⲇ, Ⲇ * 82);
		Δ.bezierCurveTo(Ⲇ * ᐃⲆΔᐃΔ, Ⲇ * 61, Ⲇ * 25, 30 * Ⲇ, 51 * Ⲇ, Ⲇ * 21);
		Δ.bezierCurveTo(Ⲇ * 66, 15 * Ⲇ, Ⲇ * 83, Ⲇ * 18, 96 * Ⲇ, Ⲇ * 29);
		Δ.bezierCurveTo(104 * Ⲇ, 35 * Ⲇ, Ⲇ * 109, Ⲇ * 47, 110 * Ⲇ, Ⲇ * 58);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
		Δ.globalAlpha = ⲆⵠⲆ;
		Δ.translate(0, Ⲇ * -ⲆⲆⲆΔⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(110 * Ⲇ, 59 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 93, Ⲇ * 61.5, Ⲇ * 93, Ⲇ * 61.5, Ⲇ * 76, Ⲇ * 64);
		Δ.bezierCurveTo(Ⲇ * 84.5, 78.5 * Ⲇ, Ⲇ * 84.5, Ⲇ * 78.5, Ⲇ * 93, 93 * Ⲇ);
		Δ.bezierCurveTo(70 * Ⲇ, Ⲇ * 111, 43 * Ⲇ, Ⲇ * 103, 30 * Ⲇ, Ⲇ * 82);
		Δ.bezierCurveTo(Ⲇ * 17, 61 * Ⲇ, 25 * Ⲇ, Ⲇ * 30, Ⲇ * 51, Ⲇ * 21);
		Δ.bezierCurveTo(Ⲇ * 66, Ⲇ * ⵠⵠⲆΔⲆ, 83 * Ⲇ, Ⲇ * 18, 96 * Ⲇ, 29 * Ⲇ);
		Δ.bezierCurveTo(104 * Ⲇ, 35 * Ⲇ, 109 * Ⲇ, 47 * Ⲇ, Ⲇ * 110, 58 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 10 * Ⲇ);
		return ᐃⵠ
	}

	function ᐃᐃΔΔᐃΔⵠ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 283;
		ᐃⵠ.height = Ⲇ * 224;
		Δ.translate(ⵠⵠⲆΔ, Ⲇ * ⵠⵠΔΔΔ);
		Δ.globalAlpha = .5;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(93 * Ⲇ, 55 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 127, Ⲇ * 27, 195 * Ⲇ, 42 * Ⲇ, 213 * Ⲇ, Ⲇ * 78);
		Δ.bezierCurveTo(Ⲇ * 254, Ⲇ * 134, 226 * Ⲇ, Ⲇ * 198, 153 * Ⲇ, 197 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 59, Ⲇ * 204, Ⲇ * 56, Ⲇ * 158, Ⲇ * 51, 115 * Ⲇ);
		Δ.bezierCurveTo(50 * Ⲇ, Ⲇ * 93, 81 * Ⲇ, 62 * Ⲇ, 90 * Ⲇ, 57 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 100, 33 * Ⲇ);
		Δ.bezierCurveTo(85 * Ⲇ, Ⲇ * 62, 102 * Ⲇ, Ⲇ * 66, Ⲇ * 110, 83 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 181, 32 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 196, Ⲇ * 62, 181 * Ⲇ, 68 * Ⲇ, 178 * Ⲇ, 69 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 225, Ⲇ * 52);
		Δ.bezierCurveTo(228 * Ⲇ, 78 * Ⲇ, 207 * Ⲇ, Ⲇ * 77, 192 * Ⲇ, Ⲇ * 88);
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 34, Ⲇ * 134);
		Δ.bezierCurveTo(46 * Ⲇ, Ⲇ * 111, 57 * Ⲇ, 111 * Ⲇ, 79 * Ⲇ, 109 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(249 * Ⲇ, 135 * Ⲇ);
		Δ.bezierCurveTo(233 * Ⲇ, 107 * Ⲇ, 212 * Ⲇ, 112 * Ⲇ, Ⲇ * 202, 115 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 56, 50 * Ⲇ);
		Δ.bezierCurveTo(56 * Ⲇ, Ⲇ * 82, Ⲇ * 73, 82 * Ⲇ, Ⲇ * 93, 89 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆΔ]);
		Δ.translate(0, -ᐃⵠᐃᐃΔ * Ⲇ);
		Δ.globalAlpha = ⲆⵠⲆ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ⵠΔᐃᐃⲆ * Ⲇ, 33 * Ⲇ);
		Δ.bezierCurveTo(85 * Ⲇ, 62 * Ⲇ, Ⲇ * 102, 66 * Ⲇ, 110 * Ⲇ, 83 * Ⲇ);
		ⵠᐃ(Δ, ΔⲆⲆⲆᐃ, Δⵠ[2], 40 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 181, Ⲇ * 32);
		Δ.bezierCurveTo(Ⲇ * 196, Ⲇ * 62, Ⲇ * 181, Ⲇ * 68, 178 * Ⲇ, Ⲇ * 69);
		ⵠᐃ(Δ, ⵠⵠᐃⵠΔ, Δⵠ[2], Ⲇ * 40);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 225, 52 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 228, 78 * Ⲇ, 207 * Ⲇ, Ⲇ * 77, 192 * Ⲇ, 88 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[2], Ⲇ * 40);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 34, Ⲇ * 134);
		Δ.bezierCurveTo(Ⲇ * 46, 111 * Ⲇ, Ⲇ * 57, 111 * Ⲇ, Ⲇ * 79, 109 * Ⲇ);
		ⵠᐃ(Δ, ΔⵠⲆⲆΔ, Δⵠ[2], 40 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(249 * Ⲇ, 135 * Ⲇ);
		Δ.bezierCurveTo(233 * Ⲇ, 107 * Ⲇ, 212 * Ⲇ, Ⲇ * 112, 202 * Ⲇ, 115 * Ⲇ);
		ⵠᐃ(Δ, ᐃΔᐃⲆⵠ, Δⵠ[2], Ⲇ * 40);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(56 * Ⲇ, Ⲇ * 50);
		Δ.bezierCurveTo(56 * Ⲇ, Ⲇ * 82, 73 * Ⲇ, Ⲇ * 82, Ⲇ * 93, 89 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠΔⵠⲆ], 40 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 93, 55 * Ⲇ);
		Δ.bezierCurveTo(127 * Ⲇ, 27 * Ⲇ, Ⲇ * 195, Ⲇ * 42, Ⲇ * 213, Ⲇ * 78);
		Δ.bezierCurveTo(254 * Ⲇ, Ⲇ * 134, Ⲇ * 226, Ⲇ * 198, Ⲇ * 153, Ⲇ * 197);
		Δ.bezierCurveTo(59 * Ⲇ, Ⲇ * 204, 56 * Ⲇ, 158 * Ⲇ, 51 * Ⲇ, Ⲇ * 115);
		Δ.bezierCurveTo(Ⲇ * 50, Ⲇ * 93, 81 * Ⲇ, 62 * Ⲇ, 90 * Ⲇ, Ⲇ * 57);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔΔᐃ], Δⵠ[2], Ⲇ * ⲆΔⲆᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(100 * Ⲇ, 33 * Ⲇ);
		Δ.bezierCurveTo(85 * Ⲇ, Ⲇ * 62, 102 * Ⲇ, 66 * Ⲇ, Ⲇ * 110, 83 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[1], 20 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(181 * Ⲇ, Ⲇ * 32);
		Δ.bezierCurveTo(196 * Ⲇ, 62 * Ⲇ, Ⲇ * 181, Ⲇ * 68, 178 * Ⲇ, 69 * Ⲇ);
		ⵠᐃ(Δ, ΔⲆᐃⲆⵠ, Δⵠ[1], Ⲇ * ⲆⲆⲆⵠⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 225, 52 * Ⲇ);
		Δ.bezierCurveTo(228 * Ⲇ, Ⲇ * 78, 207 * Ⲇ, 77 * Ⲇ, 192 * Ⲇ, 88 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[ᐃⲆⲆ], 20 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 34, 134 * Ⲇ);
		Δ.bezierCurveTo(46 * Ⲇ, 111 * Ⲇ, Ⲇ * 57, Ⲇ * 111, 79 * Ⲇ, 109 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[Δⵠᐃ], ΔⲆⵠⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 249, Ⲇ * 135);
		Δ.bezierCurveTo(233 * Ⲇ, Ⲇ * 107, 212 * Ⲇ, Ⲇ * 112, 202 * Ⲇ, 115 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[1], Ⲇ * 20);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(56 * Ⲇ, Ⲇ * 50);
		Δ.bezierCurveTo(Ⲇ * 56, Ⲇ * 82, 73 * Ⲇ, Ⲇ * 82, Ⲇ * 93, Ⲇ * 89);
		ⵠᐃ(Δ, ΔⲆᐃⲆⵠ, Δⵠ[1], 20 * Ⲇ);
		ⵠΔᐃ(Δ, 101 * Ⲇ, Ⲇ * 155, 20.591260281974 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[3]);
		ⵠΔᐃ(Δ, 180 * Ⲇ, 155 * Ⲇ, Ⲇ * 20.591260281974);
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆⲆ]);
		ⵠΔᐃ(Δ, Ⲇ * 95, 148 * Ⲇ, 7.211102550927978 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔⲆΔⲆ]);
		ⵠΔᐃ(Δ, Ⲇ * 173, 148 * Ⲇ, 7.211102550927978 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[4]);
		ᐃⲆ === 1 && (Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 191, 107 * Ⲇ), Δ.bezierCurveTo(180 * Ⲇ, 104 * Ⲇ, 175 * Ⲇ, 101 * Ⲇ, 180 * Ⲇ, Ⲇ * 95), Δ.bezierCurveTo(Ⲇ * 180, 95 * Ⲇ, Ⲇ * 181, Ⲇ * 99, 188 * Ⲇ, 103 * Ⲇ), Δ.bezierCurveTo(191 * Ⲇ, Ⲇ * 101, 191 * Ⲇ, Ⲇ * 95, Ⲇ * 190, 91 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 190, Ⲇ * 91, 196 * Ⲇ, Ⲇ * 89, 195 * Ⲇ, Ⲇ * 99), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[2]), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(206 * Ⲇ, 98 * Ⲇ), Δ.bezierCurveTo(203 * Ⲇ, 95 * Ⲇ, 200 * Ⲇ, 93 * Ⲇ, Ⲇ * 198, Ⲇ * 101), Δ.bezierCurveTo(Ⲇ * 194, 109 * Ⲇ, Ⲇ * 193, 109 * Ⲇ, 196 * Ⲇ, Ⲇ * 110), Δ.bezierCurveTo(Ⲇ * 206, Ⲇ * 115, 209 * Ⲇ, 114 * Ⲇ, 211 * Ⲇ, Ⲇ * 111), Δ.bezierCurveTo(Ⲇ * 211, Ⲇ * 106, 208 * Ⲇ, Ⲇ * 108, Ⲇ * 203, Ⲇ * 108), Δ.bezierCurveTo(Ⲇ * 193, Ⲇ * 107, 204 * Ⲇ, 101 * Ⲇ, 206 * Ⲇ, Ⲇ * 99), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ᐃᐃⵠⵠ]), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(172 * Ⲇ, 111 * Ⲇ), Δ.bezierCurveTo(172 * Ⲇ, 106 * Ⲇ, 174 * Ⲇ, 105 * Ⲇ, 185 * Ⲇ, Ⲇ * 109), Δ.bezierCurveTo(Ⲇ * 190, Ⲇ * 109, 189 * Ⲇ, 114 * Ⲇ, 185 * Ⲇ, Ⲇ * 120), Δ.bezierCurveTo(Ⲇ * 181, Ⲇ * 125, 180 * Ⲇ, 126 * Ⲇ, 176 * Ⲇ, Ⲇ * 122), Δ.bezierCurveTo(182 * Ⲇ, Ⲇ * 119, 187 * Ⲇ, 110 * Ⲇ, Ⲇ * 182, Ⲇ * 112), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[Ⲇᐃⵠⵠ]), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 202, 125 * Ⲇ), Δ.bezierCurveTo(197 * Ⲇ, 117 * Ⲇ, 193 * Ⲇ, 116 * Ⲇ, 193 * Ⲇ, Ⲇ * 120), Δ.bezierCurveTo(Ⲇ * 192.5, 124.5 * Ⲇ, 192.5 * Ⲇ, 124.5 * Ⲇ, 192 * Ⲇ, 129 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 188, Ⲇ * 129, 187 * Ⲇ, 124 * Ⲇ, Ⲇ * 189, 120 * Ⲇ), Δ.bezierCurveTo(191 * Ⲇ, Ⲇ * 110, Ⲇ * 192, Ⲇ * 110, 200 * Ⲇ, Ⲇ * 116), Δ.bezierCurveTo(Ⲇ * 208, 120 * Ⲇ, 207 * Ⲇ, 123 * Ⲇ, Ⲇ * 202, Ⲇ * 125), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[2]));
		return ᐃⵠ
	}

	function ΔᐃⲆᐃΔᐃᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 290 * Ⲇ;
		ᐃⵠ.height = 525 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ᐃⵠⵠⵠ;
		Δ.translate(Ⲇ * ᐃᐃⵠⲆᐃᐃⲆ, 20 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(111 * Ⲇ, Ⲇ * 351);
		Δ.bezierCurveTo(128.5 * Ⲇ, 218.5 * Ⲇ, 128.5 * Ⲇ, Ⲇ * 218.5, 146 * Ⲇ, 86 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 166.5, 66.5 * Ⲇ, Ⲇ * 166.5, Ⲇ * 66.5, Ⲇ * 187, Ⲇ * 47);
		Δ.bezierCurveTo(Ⲇ * 201, 71.5 * Ⲇ, Ⲇ * 201, Ⲇ * 71.5, 215 * Ⲇ, 96 * Ⲇ);
		Δ.bezierCurveTo(193 * Ⲇ, 228.5 * Ⲇ, 193 * Ⲇ, 228.5 * Ⲇ, Ⲇ * 171, 361 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.save();
		Δ.translate(129.5 * Ⲇ, 424 * Ⲇ);
		Δ.rotate(.16);
		ᐃΔⵠ(Δ, Ⲇ * -15.5, Ⲇ * -63, 31 * Ⲇ, 126 * Ⲇ, Ⲇ * ⵠΔΔᐃᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		ⵠΔᐃ(Δ, 121 * Ⲇ, 480 * Ⲇ, 20.396078054371138 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 90, Ⲇ * 311);
		Δ.bezierCurveTo(95 * Ⲇ, 324 * Ⲇ, 95 * Ⲇ, Ⲇ * 324, 100 * Ⲇ, Ⲇ * 337);
		Δ.bezierCurveTo(141.5 * Ⲇ, Ⲇ * 345.5, 141.5 * Ⲇ, 345.5 * Ⲇ, 183 * Ⲇ, 354 * Ⲇ);
		Δ.bezierCurveTo(193.5 * Ⲇ, 342.5 * Ⲇ, Ⲇ * 193.5, Ⲇ * 342.5, 204 * Ⲇ, Ⲇ * 331);
		Δ.bezierCurveTo(Ⲇ * 202, Ⲇ * 354, 202 * Ⲇ, Ⲇ * 354, 200 * Ⲇ, 377 * Ⲇ);
		Δ.bezierCurveTo(147 * Ⲇ, Ⲇ * 388, 106 * Ⲇ, 371 * Ⲇ, 79 * Ⲇ, Ⲇ * 356);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(Ⲇ * -20, -ⲆⲆⵠΔΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(111 * Ⲇ, Ⲇ * 351);
		Δ.bezierCurveTo(Ⲇ * 128.5, 218.5 * Ⲇ, 128.5 * Ⲇ, Ⲇ * 218.5, Ⲇ * 146, Ⲇ * 86);
		Δ.bezierCurveTo(166.5 * Ⲇ, Ⲇ * 66.5, Ⲇ * 166.5, 66.5 * Ⲇ, 187 * Ⲇ, 47 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 201, 71.5 * Ⲇ, Ⲇ * 201, Ⲇ * 71.5, Ⲇ * 215, 96 * Ⲇ);
		Δ.bezierCurveTo(193 * Ⲇ, 228.5 * Ⲇ, Ⲇ * 193, 228.5 * Ⲇ, Ⲇ * 171, Ⲇ * 361);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 12.5 * Ⲇ);
		Δ.save();
		Δ.translate(129.5 * Ⲇ, 424 * Ⲇ);
		Δ.rotate(.16);
		ᐃΔⵠ(Δ, Ⲇ * -15.5, Ⲇ * -63, 31 * Ⲇ, Ⲇ * 126, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔᐃᐃΔ], Δⵠ[5], Ⲇ * 12.5);
		ⵠΔᐃ(Δ, Ⲇ * 121, Ⲇ * 480, Ⲇ * 20.396078054371138);
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ΔΔⵠⲆΔ], Ⲇ * 12.5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 90, 311 * Ⲇ);
		Δ.bezierCurveTo(95 * Ⲇ, Ⲇ * 324, 95 * Ⲇ, 324 * Ⲇ, 100 * Ⲇ, Ⲇ * 337);
		Δ.bezierCurveTo(Ⲇ * 141.5, 345.5 * Ⲇ, 141.5 * Ⲇ, Ⲇ * 345.5, Ⲇ * 183, 354 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 193.5, Ⲇ * 342.5, 193.5 * Ⲇ, 342.5 * Ⲇ, 204 * Ⲇ, Ⲇ * 331);
		Δ.bezierCurveTo(Ⲇ * 202, 354 * Ⲇ, Ⲇ * 202, Ⲇ * 354, 200 * Ⲇ, Ⲇ * 377);
		Δ.bezierCurveTo(Ⲇ * 147, 388 * Ⲇ, Ⲇ * 106, Ⲇ * 371, Ⲇ * 79, Ⲇ * 356);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ], Δⵠ[2], Ⲇ * 12.5);
		return ᐃⵠ
	}

	function ᐃⵠΔⲆᐃΔᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 290;
		ᐃⵠ.height = 525 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(20 * Ⲇ, 20 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 111, Ⲇ * 351);
		Δ.bezierCurveTo(Ⲇ * 129, Ⲇ * 218, Ⲇ * 129, 218 * Ⲇ, 147 * Ⲇ, Ⲇ * 85);
		Δ.bezierCurveTo(Ⲇ * 167, 65.5 * Ⲇ, 167 * Ⲇ, Ⲇ * 65.5, Ⲇ * 187, Ⲇ * 46);
		Δ.bezierCurveTo(Ⲇ * 201.5, Ⲇ * 70.5, 201.5 * Ⲇ, 70.5 * Ⲇ, Ⲇ * 216, Ⲇ * 95);
		Δ.bezierCurveTo(Ⲇ * 194.5, 227.5 * Ⲇ, Ⲇ * 194.5, Ⲇ * 227.5, Ⲇ * 173, Ⲇ * 360);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]);
		Δ.save();
		Δ.translate(131 * Ⲇ, Ⲇ * 425.5);
		Δ.rotate(.16);
		ᐃΔⵠ(Δ, Ⲇ * -14, -56.5 * Ⲇ, 28 * Ⲇ, 113 * Ⲇ, ⵠᐃΔᐃⲆ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]);
		ⵠΔᐃ(Δ, 122 * Ⲇ, 480 * Ⲇ, Ⲇ * 18.439088914585774);
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(79 * Ⲇ, Ⲇ * 371);
		Δ.bezierCurveTo(131 * Ⲇ, Ⲇ * 373, 145 * Ⲇ, Ⲇ * 378, 197 * Ⲇ, 388 * Ⲇ);
		Δ.bezierCurveTo(205 * Ⲇ, 382.5 * Ⲇ, Ⲇ * 205, Ⲇ * 382.5, Ⲇ * 213, Ⲇ * 377);
		Δ.bezierCurveTo(167 * Ⲇ, Ⲇ * 352, Ⲇ * 117, 345 * Ⲇ, 69 * Ⲇ, Ⲇ * 355);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]);
		Δ.globalAlpha = 1;
		Δ.translate(-20 * Ⲇ, Ⲇ * -20);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(111 * Ⲇ, 351 * Ⲇ);
		Δ.bezierCurveTo(129 * Ⲇ, 218 * Ⲇ, 129 * Ⲇ, 218 * Ⲇ, 147 * Ⲇ, Ⲇ * 85);
		Δ.bezierCurveTo(167 * Ⲇ, Ⲇ * 65.5, 167 * Ⲇ, 65.5 * Ⲇ, 187 * Ⲇ, 46 * Ⲇ);
		Δ.bezierCurveTo(201.5 * Ⲇ, Ⲇ * 70.5, Ⲇ * 201.5, 70.5 * Ⲇ, Ⲇ * 216, Ⲇ * 95);
		Δ.bezierCurveTo(194.5 * Ⲇ, 227.5 * Ⲇ, 194.5 * Ⲇ, 227.5 * Ⲇ, Ⲇ * 173, Ⲇ * 360);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[2], Ⲇ * 12.5);
		Δ.save();
		Δ.translate(131 * Ⲇ, Ⲇ * 425.5);
		Δ.rotate(.16);
		ᐃΔⵠ(Δ, Ⲇ * -ᐃⲆⵠⵠᐃ, Ⲇ * -56.5, 28 * Ⲇ, 113 * Ⲇ, Ⲇ * 8);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], Ⲇ * 12.5);
		ⵠΔᐃ(Δ, 122 * Ⲇ, Ⲇ * 480, 18.439088914585774 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃᐃᐃΔ], Δⵠ[ⲆⵠⲆΔᐃ], Ⲇ * 12.5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 79, 371 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 131, 373 * Ⲇ, 145 * Ⲇ, Ⲇ * 378, 197 * Ⲇ, Ⲇ * 388);
		Δ.bezierCurveTo(205 * Ⲇ, Ⲇ * 382.5, Ⲇ * 205, Ⲇ * 382.5, 213 * Ⲇ, Ⲇ * 377);
		Δ.bezierCurveTo(Ⲇ * 167, 352 * Ⲇ, Ⲇ * 117, 345 * Ⲇ, 69 * Ⲇ, Ⲇ * 355);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⲆⵠⲆΔᐃ], 12.5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(128 * Ⲇ, Ⲇ * 345);
		Δ.bezierCurveTo(Ⲇ * 142, Ⲇ * 345, Ⲇ * 147, 346 * Ⲇ, 158 * Ⲇ, Ⲇ * 349);
		Δ.bezierCurveTo(177.5 * Ⲇ, 224.5 * Ⲇ, Ⲇ * 177.5, 224.5 * Ⲇ, Ⲇ * 197, Ⲇ * ΔᐃΔⲆᐃ);
		Δ.bezierCurveTo(190.5 * Ⲇ, 84.5 * Ⲇ, 190.5 * Ⲇ, Ⲇ * 84.5, 184 * Ⲇ, Ⲇ * 69);
		Δ.bezierCurveTo(Ⲇ * 173.5, Ⲇ * 82, Ⲇ * 173.5, Ⲇ * 82, 163 * Ⲇ, 95 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		return ᐃⵠ
	}
	const ΔⲆΔΔᐃ = ⵠΔΔᐃᐃ;

	function ⵠΔΔⲆΔⲆᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 154 * Ⲇ;
		ᐃⵠ.height = 261 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(0, 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 125, Ⲇ * 69);
		Δ.bezierCurveTo(123.5 * Ⲇ, Ⲇ * 141.5, 123.5 * Ⲇ, 141.5 * Ⲇ, 122 * Ⲇ, 214 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 123, 228 * Ⲇ, 119 * Ⲇ, Ⲇ * 239, Ⲇ * 102, Ⲇ * 239);
		Δ.bezierCurveTo(Ⲇ * 90, Ⲇ * 238, Ⲇ * 86, 225 * Ⲇ, 89 * Ⲇ, 197 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 92, Ⲇ * 159, Ⲇ * 92, 141 * Ⲇ, Ⲇ * 94, Ⲇ * 84);
		Δ.bezierCurveTo(94 * Ⲇ, Ⲇ * 58, 87 * Ⲇ, Ⲇ * 50, 73 * Ⲇ, Ⲇ * 52);
		Δ.bezierCurveTo(Ⲇ * 53, 54 * Ⲇ, 54 * Ⲇ, Ⲇ * 92, Ⲇ * 34, 87 * Ⲇ);
		Δ.bezierCurveTo(13 * Ⲇ, Ⲇ * 85, 22 * Ⲇ, Ⲇ * 58, 34 * Ⲇ, Ⲇ * 40);
		Δ.bezierCurveTo(Ⲇ * 44, Ⲇ * 24, Ⲇ * 68, Ⲇ * ⵠⲆᐃⲆⵠⲆⲆ, 86 * Ⲇ, Ⲇ * 21);
		Δ.bezierCurveTo(Ⲇ * 111, 23 * Ⲇ, Ⲇ * 123, Ⲇ * 39, 125 * Ⲇ, Ⲇ * 67);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃ]);
		Δ.globalAlpha = Δⵠᐃ;
		Δ.translate(ⵠⵠΔΔ, -10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(125 * Ⲇ, Ⲇ * 69);
		Δ.bezierCurveTo(123.5 * Ⲇ, Ⲇ * 141.5, 123.5 * Ⲇ, Ⲇ * 141.5, 122 * Ⲇ, 214 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 123, Ⲇ * 228, Ⲇ * 119, Ⲇ * 239, 102 * Ⲇ, 239 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 90, Ⲇ * 238, Ⲇ * 86, 225 * Ⲇ, 89 * Ⲇ, Ⲇ * 197);
		Δ.bezierCurveTo(Ⲇ * 92, Ⲇ * 159, Ⲇ * 92, Ⲇ * 141, Ⲇ * 94, 84 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 94, Ⲇ * 58, 87 * Ⲇ, Ⲇ * 50, 73 * Ⲇ, Ⲇ * 52);
		Δ.bezierCurveTo(Ⲇ * 53, Ⲇ * 54, 54 * Ⲇ, 92 * Ⲇ, Ⲇ * 34, Ⲇ * 87);
		Δ.bezierCurveTo(Ⲇ * 13, Ⲇ * 85, 22 * Ⲇ, Ⲇ * 58, 34 * Ⲇ, Ⲇ * 40);
		Δ.bezierCurveTo(44 * Ⲇ, 24 * Ⲇ, Ⲇ * 68, Ⲇ * ᐃⲆᐃⲆᐃΔᐃ, 86 * Ⲇ, Ⲇ * 21);
		Δ.bezierCurveTo(111 * Ⲇ, Ⲇ * 23, 123 * Ⲇ, 39 * Ⲇ, 125 * Ⲇ, 67 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆΔⲆΔ], Ⲇ * ΔᐃᐃΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 31, Ⲇ * 43);
		Δ.bezierCurveTo(31 * Ⲇ, Ⲇ * 61, 43 * Ⲇ, Ⲇ * 70, 51 * Ⲇ, 75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 48, Ⲇ * 84, Ⲇ * 41, 89 * Ⲇ, 33 * Ⲇ, Ⲇ * 86);
		Δ.bezierCurveTo(23 * Ⲇ, Ⲇ * 88, ⲆⲆⲆΔⲆ * Ⲇ, 76 * Ⲇ, 23 * Ⲇ, 62 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 45, Ⲇ * 29);
		Δ.bezierCurveTo(Ⲇ * 49, 45 * Ⲇ, 61 * Ⲇ, 54 * Ⲇ, Ⲇ * 64, Ⲇ * 55);
		Δ.bezierCurveTo(Ⲇ * 67.5, Ⲇ * 53, 67.5 * Ⲇ, Ⲇ * 53, 71 * Ⲇ, 51 * Ⲇ);
		Δ.bezierCurveTo(80 * Ⲇ, 44 * Ⲇ, 83 * Ⲇ, Ⲇ * 33, Ⲇ * 82, 20 * Ⲇ);
		Δ.bezierCurveTo(59 * Ⲇ, Ⲇ * 17, 51 * Ⲇ, Ⲇ * 23, Ⲇ * 45, Ⲇ * 30);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(86 * Ⲇ, 56 * Ⲇ);
		Δ.bezierCurveTo(90 * Ⲇ, Ⲇ * 33, 103 * Ⲇ, 25 * Ⲇ, 105 * Ⲇ, Ⲇ * 27);
		Δ.bezierCurveTo(116 * Ⲇ, Ⲇ * 31, Ⲇ * 121, Ⲇ * 45, 122 * Ⲇ, 50 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 112, Ⲇ * 62, Ⲇ * 103, Ⲇ * 63, 91 * Ⲇ, Ⲇ * 62);
		Δ.bezierCurveTo(89 * Ⲇ, 59.5 * Ⲇ, Ⲇ * 89, Ⲇ * 59.5, 87 * Ⲇ, Ⲇ * 57);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(93 * Ⲇ, Ⲇ * 81);
		Δ.bezierCurveTo(Ⲇ * 109, Ⲇ * 82, Ⲇ * 123, 70 * Ⲇ, 124 * Ⲇ, Ⲇ * 63);
		Δ.bezierCurveTo(Ⲇ * 124, Ⲇ * 75.5, 124 * Ⲇ, 75.5 * Ⲇ, 124 * Ⲇ, Ⲇ * 88);
		Δ.bezierCurveTo(Ⲇ * 119, 99 * Ⲇ, Ⲇ * 103, 103 * Ⲇ, 94 * Ⲇ, Ⲇ * 103);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 93, 124 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 108, Ⲇ * 125, 122 * Ⲇ, Ⲇ * 113, Ⲇ * 124, 106 * Ⲇ);
		Δ.bezierCurveTo(124 * Ⲇ, Ⲇ * 119, 124 * Ⲇ, Ⲇ * 129, Ⲇ * 124, 132 * Ⲇ);
		Δ.bezierCurveTo(110 * Ⲇ, Ⲇ * 147, Ⲇ * 94, Ⲇ * 148, Ⲇ * 90, Ⲇ * 147);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(90 * Ⲇ, 170 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 104, Ⲇ * 166, 122 * Ⲇ, 158 * Ⲇ, Ⲇ * 122, Ⲇ * 151);
		Δ.bezierCurveTo(122 * Ⲇ, 162.5 * Ⲇ, 122 * Ⲇ, 162.5 * Ⲇ, Ⲇ * 122, 174 * Ⲇ);
		Δ.bezierCurveTo(111 * Ⲇ, 191 * Ⲇ, Ⲇ * 97, 191 * Ⲇ, Ⲇ * 89, 191 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(88 * Ⲇ, 208 * Ⲇ);
		Δ.bezierCurveTo(100 * Ⲇ, 209 * Ⲇ, Ⲇ * 115, 205 * Ⲇ, Ⲇ * 122, 193 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 122, Ⲇ * 205.5, 122 * Ⲇ, Ⲇ * 205.5, Ⲇ * 122, Ⲇ * 218);
		Δ.bezierCurveTo(115 * Ⲇ, Ⲇ * 229, 103 * Ⲇ, Ⲇ * 235, Ⲇ * 90, 228 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 88, Ⲇ * 224, Ⲇ * 88, 217 * Ⲇ, Ⲇ * 88, Ⲇ * 211);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⲆ]);
		Δ.globalAlpha = .4;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(22 * Ⲇ, 81 * Ⲇ);
		Δ.bezierCurveTo(32 * Ⲇ, 84 * Ⲇ, Ⲇ * 41, 81 * Ⲇ, Ⲇ * 45, 68 * Ⲇ);
		Δ.bezierCurveTo(50 * Ⲇ, 50 * Ⲇ, Ⲇ * 62, 40 * Ⲇ, 79 * Ⲇ, 43 * Ⲇ);
		Δ.bezierCurveTo(95 * Ⲇ, Ⲇ * 45, Ⲇ * 102, Ⲇ * 58, Ⲇ * 101, 81 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 99.5, 120.5 * Ⲇ, 99.5 * Ⲇ, 120.5 * Ⲇ, Ⲇ * 98, Ⲇ * 160);
		Δ.bezierCurveTo(Ⲇ * 96.5, 191.5 * Ⲇ, Ⲇ * 96.5, Ⲇ * 191.5, 95 * Ⲇ, 223 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 93, 232 * Ⲇ, 101 * Ⲇ, 235 * Ⲇ, Ⲇ * 108, 238 * Ⲇ);
		Δ.bezierCurveTo(ⵠᐃⵠⲆᐃᐃΔ * Ⲇ, Ⲇ * 240, 90 * Ⲇ, Ⲇ * 233, Ⲇ * 90, Ⲇ * 224);
		Δ.bezierCurveTo(Ⲇ * 92, 157 * Ⲇ, Ⲇ * 92, 157 * Ⲇ, 94 * Ⲇ, 90 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 94, Ⲇ * 56, 89 * Ⲇ, Ⲇ * 53, Ⲇ * 77, Ⲇ * 51);
		Δ.bezierCurveTo(Ⲇ * 58, 50 * Ⲇ, Ⲇ * 54, Ⲇ * 59, 49 * Ⲇ, Ⲇ * 75);
		Δ.bezierCurveTo(44 * Ⲇ, Ⲇ * 91, 28 * Ⲇ, 90 * Ⲇ, 23 * Ⲇ, 81 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⲆⲆ]);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 82, Ⲇ * 123);
		Δ.bezierCurveTo(88 * Ⲇ, Ⲇ * 130, Ⲇ * 88, 127 * Ⲇ, Ⲇ * 94, Ⲇ * 128);
		Δ.bezierCurveTo(91 * Ⲇ, Ⲇ * 136, 94 * Ⲇ, Ⲇ * 137, 99 * Ⲇ, 142 * Ⲇ);
		Δ.bezierCurveTo(97 * Ⲇ, Ⲇ * 149, Ⲇ * 99, Ⲇ * 152, Ⲇ * 105, Ⲇ * 155);
		Δ.bezierCurveTo(107 * Ⲇ, 159 * Ⲇ, 113 * Ⲇ, 159 * Ⲇ, 120 * Ⲇ, 158 * Ⲇ);
		Δ.bezierCurveTo(121 * Ⲇ, 160 * Ⲇ, 125 * Ⲇ, Ⲇ * 163, Ⲇ * 132, Ⲇ * 163);
		Δ.bezierCurveTo(Ⲇ * 133, Ⲇ * 166, 136 * Ⲇ, 169 * Ⲇ, 138 * Ⲇ, Ⲇ * 170);
		Δ.bezierCurveTo(133 * Ⲇ, 171 * Ⲇ, 132 * Ⲇ, Ⲇ * 172, Ⲇ * 129, Ⲇ * 174);
		Δ.bezierCurveTo(Ⲇ * 122, Ⲇ * 170, 120 * Ⲇ, Ⲇ * 170, Ⲇ * 116, Ⲇ * 174);
		Δ.bezierCurveTo(Ⲇ * 108, Ⲇ * 170.5, Ⲇ * 108, Ⲇ * 170.5, 100 * Ⲇ, 167 * Ⲇ);
		Δ.bezierCurveTo(95 * Ⲇ, Ⲇ * 172, 94 * Ⲇ, 179 * Ⲇ, 95 * Ⲇ, Ⲇ * 184);
		Δ.bezierCurveTo(Ⲇ * 87, Ⲇ * 185, Ⲇ * 87, Ⲇ * 189, Ⲇ * 88, 194 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 82, 194 * Ⲇ, Ⲇ * 81, 195 * Ⲇ, 79 * Ⲇ, Ⲇ * 197);
		Δ.bezierCurveTo(Ⲇ * 78, Ⲇ * 192, 78 * Ⲇ, 191 * Ⲇ, 77 * Ⲇ, 189 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 81, 185 * Ⲇ, 82 * Ⲇ, Ⲇ * 183, 80 * Ⲇ, Ⲇ * 176);
		Δ.bezierCurveTo(Ⲇ * 89, Ⲇ * 170, 92 * Ⲇ, Ⲇ * 168, Ⲇ * 95, Ⲇ * 163);
		Δ.bezierCurveTo(Ⲇ * 91, Ⲇ * 151, 88 * Ⲇ, Ⲇ * 151, Ⲇ * 82, Ⲇ * 147);
		Δ.bezierCurveTo(Ⲇ * 85, Ⲇ * 142, 85 * Ⲇ, Ⲇ * 137, Ⲇ * 81, 133 * Ⲇ);
		Δ.bezierCurveTo(84 * Ⲇ, Ⲇ * 127, Ⲇ * 84, Ⲇ * 125, 82 * Ⲇ, 124 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⵠΔⲆᐃ], Ⲇ * ⵠΔⲆᐃⲆ);
		ⵠΔᐃ(Δ, Ⲇ * 107, 152 * Ⲇ, ⵠⵠⵠᐃⵠ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[6]);
		ⵠΔᐃ(Δ, Ⲇ * 105, Ⲇ * 173, Ⲇ * 9);
		ⵠᐃ(Δ, Δⵠ[6]);
		ⵠΔᐃ(Δ, Ⲇ * 87, Ⲇ * 161, Ⲇ * ᐃΔⵠⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ⵠΔᐃᐃΔ]);
		ⵠΔᐃ(Δ, Ⲇ * 106, Ⲇ * 147, ⵠΔᐃⲆ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆᐃⲆⲆΔ]);
		ⵠΔᐃ(Δ, 104 * Ⲇ, 167 * Ⲇ, Ⲇ * ΔⲆⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ⲆΔᐃᐃⲆ]);
		ⵠΔᐃ(Δ, 86 * Ⲇ, Ⲇ * 154, Ⲇ * 4);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⲆⲆ]);
		return ᐃⵠ
	}

	function Δᐃᐃⵠⵠᐃⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 290 * Ⲇ;
		ᐃⵠ.height = 525 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⲆⲆᐃ;
		Δ.translate(20 * Ⲇ, 20 * Ⲇ);
		Δ.translate(Ⲇ * -ⵠⲆⵠΔⲆ, Ⲇ * -20);
		Δ.save();
		Δ.translate(132 * Ⲇ, 423 * Ⲇ);
		Δ.rotate(.16);
		ᐃΔⵠ(Δ, -ⵠⵠⲆᐃⲆᐃᐃ * Ⲇ, -61 * Ⲇ, 28 * Ⲇ, 122 * Ⲇ, ΔⵠΔᐃΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(100 * Ⲇ, 344 * Ⲇ);
		Δ.bezierCurveTo(123 * Ⲇ, Ⲇ * 214, 123 * Ⲇ, Ⲇ * 214, 146 * Ⲇ, 84 * Ⲇ);
		Δ.bezierCurveTo(166.5 * Ⲇ, 65 * Ⲇ, 166.5 * Ⲇ, Ⲇ * 65, Ⲇ * 187, Ⲇ * 46);
		Δ.bezierCurveTo(201 * Ⲇ, 71 * Ⲇ, Ⲇ * 201, Ⲇ * 71, Ⲇ * 215, Ⲇ * 96);
		Δ.bezierCurveTo(Ⲇ * 199.5, 226.5 * Ⲇ, Ⲇ * 199.5, 226.5 * Ⲇ, 184 * Ⲇ, 357 * Ⲇ);
		Δ.bezierCurveTo(162.5 * Ⲇ, Ⲇ * 362.5, 162.5 * Ⲇ, 362.5 * Ⲇ, 141 * Ⲇ, Ⲇ * 368);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(75 * Ⲇ, Ⲇ * 328);
		Δ.bezierCurveTo(Ⲇ * 88, 336.5 * Ⲇ, Ⲇ * 88, 336.5 * Ⲇ, 101 * Ⲇ, Ⲇ * 345);
		Δ.bezierCurveTo(Ⲇ * 123.5, Ⲇ * 337.5, 123.5 * Ⲇ, 337.5 * Ⲇ, 146 * Ⲇ, 330 * Ⲇ);
		Δ.bezierCurveTo(165 * Ⲇ, 343.5 * Ⲇ, 165 * Ⲇ, 343.5 * Ⲇ, 184 * Ⲇ, 357 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 198.5, Ⲇ * 353, Ⲇ * 198.5, 353 * Ⲇ, 213 * Ⲇ, Ⲇ * 349);
		Δ.bezierCurveTo(200.5 * Ⲇ, Ⲇ * 364.5, 200.5 * Ⲇ, Ⲇ * 364.5, 188 * Ⲇ, 380 * Ⲇ);
		Δ.bezierCurveTo(163 * Ⲇ, 380.5 * Ⲇ, Ⲇ * 163, Ⲇ * 380.5, Ⲇ * 138, Ⲇ * 381);
		Δ.bezierCurveTo(112 * Ⲇ, Ⲇ * 373.5, Ⲇ * 112, Ⲇ * 373.5, 86 * Ⲇ, Ⲇ * 366);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 121, 332 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 133.5, 327.5 * Ⲇ, 133.5 * Ⲇ, Ⲇ * 327.5, 146 * Ⲇ, Ⲇ * 323);
		Δ.bezierCurveTo(Ⲇ * 157, 330.5 * Ⲇ, 157 * Ⲇ, 330.5 * Ⲇ, Ⲇ * 168, 338 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 182.5, 219.5 * Ⲇ, 182.5 * Ⲇ, Ⲇ * 219.5, Ⲇ * 197, 101 * Ⲇ);
		Δ.bezierCurveTo(190 * Ⲇ, 84.5 * Ⲇ, 190 * Ⲇ, Ⲇ * 84.5, 183 * Ⲇ, 68 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 172.5, 81 * Ⲇ, 172.5 * Ⲇ, Ⲇ * 81, Ⲇ * 162, 94 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(105 * Ⲇ, 463 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 124.5, Ⲇ * 466, Ⲇ * 124.5, Ⲇ * 466, 144 * Ⲇ, Ⲇ * 469);
		Δ.bezierCurveTo(Ⲇ * 145.5, Ⲇ * 478.5, 145.5 * Ⲇ, Ⲇ * 478.5, Ⲇ * 147, Ⲇ * 488);
		Δ.bezierCurveTo(133.5 * Ⲇ, 495.5 * Ⲇ, 133.5 * Ⲇ, 495.5 * Ⲇ, 120 * Ⲇ, 503 * Ⲇ);
		Δ.bezierCurveTo(108.5 * Ⲇ, 492 * Ⲇ, 108.5 * Ⲇ, Ⲇ * 492, Ⲇ * 97, Ⲇ * 481);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⲆⲆ]);
		Δ.globalAlpha = ⲆⲆⵠ;
		Δ.translate(Ⲇ * -20, Ⲇ * -ⵠⲆⵠΔⲆ);
		Δ.save();
		Δ.translate(132 * Ⲇ, Ⲇ * 423);
		Δ.rotate(.16);
		ᐃΔⵠ(Δ, -ⵠⵠⲆⵠⵠ * Ⲇ, -61 * Ⲇ, 28 * Ⲇ, Ⲇ * 122, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ᐃᐃᐃᐃ], Ⲇ * 12.5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ᐃⵠⵠΔⲆ, 344 * Ⲇ);
		Δ.bezierCurveTo(123 * Ⲇ, Ⲇ * 214, Ⲇ * 123, Ⲇ * 214, Ⲇ * 146, Ⲇ * 84);
		Δ.bezierCurveTo(Ⲇ * 166.5, 65 * Ⲇ, Ⲇ * 166.5, 65 * Ⲇ, 187 * Ⲇ, 46 * Ⲇ);
		Δ.bezierCurveTo(201 * Ⲇ, 71 * Ⲇ, 201 * Ⲇ, 71 * Ⲇ, Ⲇ * 215, Ⲇ * 96);
		Δ.bezierCurveTo(199.5 * Ⲇ, 226.5 * Ⲇ, Ⲇ * 199.5, Ⲇ * 226.5, 184 * Ⲇ, Ⲇ * 357);
		Δ.bezierCurveTo(162.5 * Ⲇ, 362.5 * Ⲇ, 162.5 * Ⲇ, Ⲇ * 362.5, Ⲇ * 141, 368 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⵠ], Δⵠ[ᐃᐃⵠⵠ], Ⲇ * 12.5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(75 * Ⲇ, 328 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 88, 336.5 * Ⲇ, Ⲇ * 88, 336.5 * Ⲇ, Ⲇ * 101, Ⲇ * 345);
		Δ.bezierCurveTo(Ⲇ * 123.5, 337.5 * Ⲇ, Ⲇ * 123.5, 337.5 * Ⲇ, Ⲇ * 146, Ⲇ * 330);
		Δ.bezierCurveTo(165 * Ⲇ, 343.5 * Ⲇ, 165 * Ⲇ, Ⲇ * 343.5, Ⲇ * 184, Ⲇ * 357);
		Δ.bezierCurveTo(Ⲇ * 198.5, Ⲇ * 353, 198.5 * Ⲇ, Ⲇ * 353, 213 * Ⲇ, Ⲇ * 349);
		Δ.bezierCurveTo(Ⲇ * 200.5, 364.5 * Ⲇ, Ⲇ * 200.5, Ⲇ * 364.5, Ⲇ * 188, 380 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 163, 380.5 * Ⲇ, 163 * Ⲇ, 380.5 * Ⲇ, 138 * Ⲇ, Ⲇ * 381);
		Δ.bezierCurveTo(112 * Ⲇ, 373.5 * Ⲇ, 112 * Ⲇ, 373.5 * Ⲇ, 86 * Ⲇ, 366 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * 12.5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 121, 332 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 133.5, Ⲇ * 327.5, Ⲇ * 133.5, 327.5 * Ⲇ, Ⲇ * 146, Ⲇ * 323);
		Δ.bezierCurveTo(157 * Ⲇ, 330.5 * Ⲇ, 157 * Ⲇ, Ⲇ * 330.5, Ⲇ * 168, Ⲇ * 338);
		Δ.bezierCurveTo(182.5 * Ⲇ, Ⲇ * 219.5, Ⲇ * 182.5, 219.5 * Ⲇ, Ⲇ * 197, Ⲇ * 101);
		Δ.bezierCurveTo(Ⲇ * 190, 84.5 * Ⲇ, 190 * Ⲇ, Ⲇ * 84.5, Ⲇ * 183, 68 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 172.5, Ⲇ * 81, Ⲇ * 172.5, Ⲇ * 81, Ⲇ * 162, 94 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(105 * Ⲇ, 463 * Ⲇ);
		Δ.bezierCurveTo(124.5 * Ⲇ, 466 * Ⲇ, Ⲇ * 124.5, 466 * Ⲇ, Ⲇ * 144, 469 * Ⲇ);
		Δ.bezierCurveTo(145.5 * Ⲇ, 478.5 * Ⲇ, 145.5 * Ⲇ, Ⲇ * 478.5, Ⲇ * 147, Ⲇ * 488);
		Δ.bezierCurveTo(133.5 * Ⲇ, 495.5 * Ⲇ, Ⲇ * 133.5, 495.5 * Ⲇ, Ⲇ * 120, Ⲇ * 503);
		Δ.bezierCurveTo(108.5 * Ⲇ, Ⲇ * 492, Ⲇ * 108.5, 492 * Ⲇ, Ⲇ * 97, 481 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃ], Δⵠ[ᐃᐃΔⵠ], 12.5 * Ⲇ);
		Δ.globalAlpha = ⲆⵠΔΔ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 143, Ⲇ * 346);
		Δ.bezierCurveTo(Ⲇ * 125, 352 * Ⲇ, Ⲇ * 125, Ⲇ * 352, 107 * Ⲇ, 358 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 124, Ⲇ * 363, 140 * Ⲇ, 368 * Ⲇ, Ⲇ * 141, 368 * Ⲇ);
		Δ.bezierCurveTo(156.5 * Ⲇ, Ⲇ * 367, 156.5 * Ⲇ, 367 * Ⲇ, 172 * Ⲇ, Ⲇ * 366);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⵠ]);
		return ᐃⵠ
	}

	function ⵠⵠΔᐃⲆΔⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 290 * Ⲇ;
		ᐃⵠ.height = 525 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ΔᐃⵠⲆ;
		Δ.translate(Ⲇ * 20, ⲆⵠΔⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(112 * Ⲇ, 356 * Ⲇ);
		Δ.bezierCurveTo(124 * Ⲇ, 220.5 * Ⲇ, Ⲇ * 124, Ⲇ * 220.5, 136 * Ⲇ, 85 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 162.5, 65.5 * Ⲇ, 162.5 * Ⲇ, Ⲇ * 65.5, 189 * Ⲇ, 46 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 208.5, 72.5 * Ⲇ, 208.5 * Ⲇ, Ⲇ * 72.5, Ⲇ * 228, Ⲇ * 99);
		Δ.bezierCurveTo(Ⲇ * 200, 232 * Ⲇ, Ⲇ * 200, Ⲇ * 232, 172 * Ⲇ, 365 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]);
		Δ.save();
		Δ.translate(131 * Ⲇ, 423 * Ⲇ);
		Δ.rotate(.16);
		ᐃΔⵠ(Δ, -14 * Ⲇ, -53 * Ⲇ, 28 * Ⲇ, Ⲇ * 106, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆΔ]);
		Δ.save();
		Δ.translate(122 * Ⲇ, Ⲇ * 480);
		Δ.rotate(1.72);
		ΔΔΔΔ(Δ, ΔΔᐃⵠΔ, Ⲇ * 26.476404589747453, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 210, Ⲇ * 387);
		Δ.bezierCurveTo(138 * Ⲇ, Ⲇ * 376, Ⲇ * 138, 376 * Ⲇ, 66 * Ⲇ, 365 * Ⲇ);
		Δ.bezierCurveTo(76 * Ⲇ, Ⲇ * 355, Ⲇ * 76, 355 * Ⲇ, Ⲇ * 86, 345 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 99, 346.5 * Ⲇ, Ⲇ * 99, Ⲇ * 346.5, 112 * Ⲇ, Ⲇ * 348);
		Δ.bezierCurveTo(128.5 * Ⲇ, 344 * Ⲇ, 128.5 * Ⲇ, Ⲇ * 344, 145 * Ⲇ, Ⲇ * 340);
		Δ.bezierCurveTo(Ⲇ * 158, 348 * Ⲇ, 158 * Ⲇ, 348 * Ⲇ, Ⲇ * 171, 356 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 184, 358 * Ⲇ, Ⲇ * 184, Ⲇ * 358, 197 * Ⲇ, 360 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 129, Ⲇ * 338);
		Δ.bezierCurveTo(Ⲇ * 137, 336 * Ⲇ, 137 * Ⲇ, Ⲇ * 336, 145 * Ⲇ, Ⲇ * 334);
		Δ.bezierCurveTo(Ⲇ * 152.5, 338 * Ⲇ, Ⲇ * 152.5, Ⲇ * 338, 160 * Ⲇ, 342 * Ⲇ);
		Δ.bezierCurveTo(184 * Ⲇ, 224 * Ⲇ, 184 * Ⲇ, Ⲇ * 224, Ⲇ * 208, Ⲇ * 106);
		Δ.bezierCurveTo(Ⲇ * 197, 88 * Ⲇ, 187 * Ⲇ, 70 * Ⲇ, 186 * Ⲇ, 70 * Ⲇ);
		Δ.bezierCurveTo(169.5 * Ⲇ, Ⲇ * 83, Ⲇ * 169.5, 83 * Ⲇ, 153 * Ⲇ, 96 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		Δ.globalAlpha = ⲆⲆᐃⵠ;
		Δ.translate(-ⲆⵠᐃΔⲆ * Ⲇ, Ⲇ * -20);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(112 * Ⲇ, Ⲇ * 356);
		Δ.bezierCurveTo(Ⲇ * 124, Ⲇ * 220.5, 124 * Ⲇ, 220.5 * Ⲇ, Ⲇ * 136, Ⲇ * 85);
		Δ.bezierCurveTo(162.5 * Ⲇ, 65.5 * Ⲇ, Ⲇ * 162.5, 65.5 * Ⲇ, 189 * Ⲇ, 46 * Ⲇ);
		Δ.bezierCurveTo(208.5 * Ⲇ, 72.5 * Ⲇ, Ⲇ * 208.5, 72.5 * Ⲇ, Ⲇ * 228, 99 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 200, 232 * Ⲇ, 200 * Ⲇ, Ⲇ * 232, 172 * Ⲇ, 365 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⲆ], Δⵠ[2], Ⲇ * 12.5);
		Δ.save();
		Δ.translate(131 * Ⲇ, Ⲇ * 423);
		Δ.rotate(.16);
		ᐃΔⵠ(Δ, -14 * Ⲇ, Ⲇ * -53, 28 * Ⲇ, 106 * Ⲇ, Ⲇ * ⵠᐃⲆⵠᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⲆᐃⲆ], Δⵠ[5], 12.5 * Ⲇ);
		Δ.save();
		Δ.translate(122 * Ⲇ, 480 * Ⲇ);
		Δ.rotate(1.72);
		ΔΔΔΔ(Δ, ΔⲆⵠΔⲆ, Ⲇ * 26.476404589747453, Ⲇ * ⵠΔΔᐃᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * 12.5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 210, Ⲇ * 387);
		Δ.bezierCurveTo(Ⲇ * 138, 376 * Ⲇ, Ⲇ * 138, Ⲇ * 376, Ⲇ * 66, Ⲇ * 365);
		Δ.bezierCurveTo(Ⲇ * 76, 355 * Ⲇ, 76 * Ⲇ, 355 * Ⲇ, Ⲇ * 86, Ⲇ * 345);
		Δ.bezierCurveTo(Ⲇ * 99, Ⲇ * 346.5, Ⲇ * 99, 346.5 * Ⲇ, Ⲇ * 112, 348 * Ⲇ);
		Δ.bezierCurveTo(128.5 * Ⲇ, Ⲇ * 344, 128.5 * Ⲇ, Ⲇ * 344, 145 * Ⲇ, Ⲇ * 340);
		Δ.bezierCurveTo(Ⲇ * 158, 348 * Ⲇ, Ⲇ * 158, 348 * Ⲇ, Ⲇ * 171, 356 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 184, 358 * Ⲇ, 184 * Ⲇ, Ⲇ * 358, Ⲇ * 197, 360 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δⵠᐃ], Δⵠ[2], 12.5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 129, 338 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 137, 336 * Ⲇ, Ⲇ * 137, 336 * Ⲇ, 145 * Ⲇ, Ⲇ * 334);
		Δ.bezierCurveTo(152.5 * Ⲇ, 338 * Ⲇ, 152.5 * Ⲇ, 338 * Ⲇ, 160 * Ⲇ, 342 * Ⲇ);
		Δ.bezierCurveTo(184 * Ⲇ, Ⲇ * 224, Ⲇ * 184, 224 * Ⲇ, 208 * Ⲇ, Ⲇ * 106);
		Δ.bezierCurveTo(197 * Ⲇ, Ⲇ * 88, Ⲇ * 187, Ⲇ * 70, 186 * Ⲇ, Ⲇ * 70);
		Δ.bezierCurveTo(169.5 * Ⲇ, 83 * Ⲇ, Ⲇ * 169.5, Ⲇ * 83, Ⲇ * 153, 96 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		return ᐃⵠ
	}
	const ⲆᐃᐃⲆ = ⲆΔΔⲆ;

	function ⵠⵠⵠⲆⲆΔᐃⵠΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 350;
		ᐃⵠ.height = Ⲇ * 140;
		Δ.translate(Ⲇ * -50, -150 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(184.5 * Ⲇ, 222.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 185.5, 184.0625 * Ⲇ, 302.5 * Ⲇ, Ⲇ * 171.0625, 313.5 * Ⲇ, Ⲇ * 222.0625);
		Δ.bezierCurveTo(330.5 * Ⲇ, 263.0625 * Ⲇ, 181.5 * Ⲇ, 274.0625 * Ⲇ, Ⲇ * 184.5, Ⲇ * 223.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ], Δⵠ[1], ⵠⲆⲆᐃᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 131.5, Ⲇ * 241.0625);
		Δ.bezierCurveTo(Ⲇ * 144.5, 278.0625 * Ⲇ, 270.5 * Ⲇ, Ⲇ * 209.0625, 228.5 * Ⲇ, 174.0625 * Ⲇ);
		Δ.bezierCurveTo(196.5 * Ⲇ, 147.0625 * Ⲇ, 117.5 * Ⲇ, Ⲇ * 196.0625, Ⲇ * 131.5, Ⲇ * 240.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], 8 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 270.5, Ⲇ * 225.0625, 15.811388300841896 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆΔΔⲆ]);
		ⵠΔᐃ(Δ, 243.5 * Ⲇ, 225.0625 * Ⲇ, Ⲇ * 6.082762530298219);
		ⵠᐃ(Δ, Δⵠ[ⲆΔΔⲆ]);
		ⵠΔᐃ(Δ, 255.5 * Ⲇ, 210.0625 * Ⲇ, 10.816653826391969 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2]);
		ⵠΔᐃ(Δ, Ⲇ * 167.5, 215.0625 * Ⲇ, 15.297058540778355 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⲆ]);
		ⵠΔᐃ(Δ, 176.5 * Ⲇ, Ⲇ * 204.0625, Ⲇ * 7.280109889280518);
		ⵠᐃ(Δ, Δⵠ[2]);
		ⵠΔᐃ(Δ, Ⲇ * 206.5, 189.0625 * Ⲇ, Ⲇ * 7.280109889280518);
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 151.5, Ⲇ * 212.0625);
		Δ.bezierCurveTo(161.5 * Ⲇ, Ⲇ * 204.0625, Ⲇ * 173.5, Ⲇ * 214.0625, Ⲇ * 158.5, Ⲇ * 221.0625);
		Δ.bezierCurveTo(Ⲇ * 145.5, 228.0625 * Ⲇ, Ⲇ * 144.5, 216.0625 * Ⲇ, Ⲇ * 151.5, 212.0625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃⲆ], Δⵠ[4], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(194.5 * Ⲇ, 209.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 205.5, Ⲇ * 202.0625, Ⲇ * 215.5, 207.0625 * Ⲇ, 199.5 * Ⲇ, Ⲇ * 217.0625);
		Δ.bezierCurveTo(Ⲇ * 187.5, 224.0625 * Ⲇ, 182.5 * Ⲇ, Ⲇ * 217.0625, 194.5 * Ⲇ, 209.0625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⵠ], Δⵠ[ᐃⵠⵠⲆ], ΔΔᐃⵠΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 188.5, Ⲇ * 183.0625);
		Δ.bezierCurveTo(201.5 * Ⲇ, Ⲇ * 176.0625, Ⲇ * 213.5, 187.0625 * Ⲇ, Ⲇ * 193.5, Ⲇ * 193.0625);
		Δ.bezierCurveTo(185.5 * Ⲇ, Ⲇ * 194.0625, Ⲇ * 175.5, 189.0625 * Ⲇ, 188.5 * Ⲇ, Ⲇ * 183.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(261.5 * Ⲇ, Ⲇ * 202.0625);
		Δ.bezierCurveTo(Ⲇ * 274.5, Ⲇ * 201.0625, 282.5 * Ⲇ, 214.0625 * Ⲇ, 261.5 * Ⲇ, 215.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 246.5, Ⲇ * 214.0625, Ⲇ * 248.5, Ⲇ * 203.0625, 261.5 * Ⲇ, Ⲇ * 202.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃᐃᐃᐃΔ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(240.5 * Ⲇ, 231.0625 * Ⲇ);
		Δ.bezierCurveTo(255.5 * Ⲇ, Ⲇ * 231.0625, Ⲇ * 254.5, Ⲇ * 243.0625, 240.5 * Ⲇ, 242.0625 * Ⲇ);
		Δ.bezierCurveTo(225.5 * Ⲇ, 239.0625 * Ⲇ, Ⲇ * 225.5, Ⲇ * 232.0625, Ⲇ * 240.5, Ⲇ * 231.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠⲆᐃⲆ], Ⲇ * ΔⲆΔⲆ);
		return ᐃⵠ
	}

	function ΔᐃⲆⵠⲆⲆⲆΔΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 118 * Ⲇ;
		ᐃⵠ.height = 114 * Ⲇ;
		Δ.translate(0, Ⲇ * 10);
		ⵠΔᐃ(Δ, Ⲇ * 42, 43 * Ⲇ, 24.758836806279895 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(65 * Ⲇ, Ⲇ * 90);
		Δ.bezierCurveTo(72 * Ⲇ, 91 * Ⲇ, 75 * Ⲇ, 92 * Ⲇ, 71 * Ⲇ, Ⲇ * 96);
		Δ.bezierCurveTo(Ⲇ * 65, Ⲇ * 98, Ⲇ * 65, Ⲇ * 94, 65 * Ⲇ, Ⲇ * 91);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(87 * Ⲇ, 45 * Ⲇ);
		Δ.bezierCurveTo(108 * Ⲇ, 59 * Ⲇ, ⵠⵠⲆᐃⵠ * Ⲇ, Ⲇ * 86, Ⲇ * 85, Ⲇ * 91);
		Δ.bezierCurveTo(80 * Ⲇ, 96 * Ⲇ, Ⲇ * 68, Ⲇ * 95, Ⲇ * 58, Ⲇ * 87);
		Δ.bezierCurveTo(Ⲇ * 53, Ⲇ * 80, Ⲇ * 61, 64 * Ⲇ, Ⲇ * 66, 58 * Ⲇ);
		Δ.bezierCurveTo(73 * Ⲇ, 48 * Ⲇ, Ⲇ * 78, 44 * Ⲇ, 87 * Ⲇ, Ⲇ * 45);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(0, -10 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 42, 43 * Ⲇ, 24.758836806279895 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃΔΔⲆ], Δⵠ[ᐃᐃΔⵠ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(65 * Ⲇ, Ⲇ * 90);
		Δ.bezierCurveTo(72 * Ⲇ, 91 * Ⲇ, 75 * Ⲇ, 92 * Ⲇ, 71 * Ⲇ, Ⲇ * 96);
		Δ.bezierCurveTo(65 * Ⲇ, Ⲇ * 98, 65 * Ⲇ, 94 * Ⲇ, Ⲇ * 65, 91 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠ], Δⵠ[ΔⵠⲆⲆ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(87 * Ⲇ, Ⲇ * 45);
		Δ.bezierCurveTo(108 * Ⲇ, 59 * Ⲇ, Ⲇ * 100, 86 * Ⲇ, Ⲇ * 85, Ⲇ * 91);
		Δ.bezierCurveTo(Ⲇ * 80, 96 * Ⲇ, Ⲇ * 68, Ⲇ * 95, 58 * Ⲇ, Ⲇ * 87);
		Δ.bezierCurveTo(Ⲇ * 53, Ⲇ * 80, 61 * Ⲇ, 64 * Ⲇ, Ⲇ * 66, 58 * Ⲇ);
		Δ.bezierCurveTo(73 * Ⲇ, Ⲇ * 48, 78 * Ⲇ, 44 * Ⲇ, 87 * Ⲇ, Ⲇ * 45);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃⲆⵠᐃ], ΔⲆⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 52, Ⲇ * 16);
		Δ.bezierCurveTo(55 * Ⲇ, Ⲇ * 19, Ⲇ * 54, ΔⲆⵠⵠᐃ * Ⲇ, Ⲇ * 55, 22 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 52, Ⲇ * 24.5, 52 * Ⲇ, Ⲇ * 24.5, 49 * Ⲇ, 27 * Ⲇ);
		Δ.bezierCurveTo(45 * Ⲇ, 25 * Ⲇ, 45 * Ⲇ, Ⲇ * 25, 41 * Ⲇ, Ⲇ * 23);
		Δ.bezierCurveTo(45 * Ⲇ, Ⲇ * 19, 48 * Ⲇ, Ⲇ * 16, 52 * Ⲇ, ΔⲆⲆⲆⲆΔᐃ * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⲆ], Δⵠ[ΔⲆΔⲆ], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(62 * Ⲇ, Ⲇ * 30);
		Δ.bezierCurveTo(66 * Ⲇ, Ⲇ * 29, 64 * Ⲇ, 30 * Ⲇ, Ⲇ * 66, 30 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 67, 31 * Ⲇ, 67 * Ⲇ, 31 * Ⲇ, 68 * Ⲇ, Ⲇ * 32);
		Δ.bezierCurveTo(Ⲇ * 66.5, Ⲇ * 33.5, 66.5 * Ⲇ, Ⲇ * 33.5, Ⲇ * 65, 35 * Ⲇ);
		Δ.bezierCurveTo(63.5 * Ⲇ, Ⲇ * 32.5, 63.5 * Ⲇ, 32.5 * Ⲇ, Ⲇ * 62, 30 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔᐃⲆᐃⵠ], ⵠᐃⵠᐃΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(29 * Ⲇ, Ⲇ * 21);
		Δ.bezierCurveTo(31 * Ⲇ, Ⲇ * 22, Ⲇ * 31, 26 * Ⲇ, 29 * Ⲇ, 29 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 26, 28.5 * Ⲇ, 26 * Ⲇ, Ⲇ * 28.5, Ⲇ * 23, 28 * Ⲇ);
		Δ.bezierCurveTo(23 * Ⲇ, Ⲇ * 26.5, Ⲇ * 23, Ⲇ * 26.5, 23 * Ⲇ, 25 * Ⲇ);
		Δ.bezierCurveTo(25 * Ⲇ, Ⲇ * 23, 25 * Ⲇ, 23 * Ⲇ, Ⲇ * 27, Ⲇ * 21);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⵠ], Δⵠ[4], Ⲇ * ᐃᐃᐃᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ⵠⵠᐃᐃⲆΔⵠ, Ⲇ * 36);
		Δ.bezierCurveTo(Ⲇ * 23, 36 * Ⲇ, 24 * Ⲇ, Ⲇ * 42, 19 * Ⲇ, 46 * Ⲇ);
		Δ.bezierCurveTo(12 * Ⲇ, Ⲇ * 39, ⵠⵠΔⵠᐃ * Ⲇ, Ⲇ * 38, 18 * Ⲇ, Ⲇ * 37);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔΔ], Δⵠ[ᐃᐃᐃᐃΔ], Ⲇ * ᐃᐃᐃᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 30, Ⲇ * 34);
		Δ.bezierCurveTo(35 * Ⲇ, 36 * Ⲇ, 36 * Ⲇ, 39 * Ⲇ, Ⲇ * 32, Ⲇ * 45);
		Δ.bezierCurveTo(Ⲇ * 25, 46 * Ⲇ, Ⲇ * 25, 44 * Ⲇ, Ⲇ * 30, 34 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃΔΔΔⲆ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(59 * Ⲇ, Ⲇ * 35);
		Δ.bezierCurveTo(58 * Ⲇ, 27 * Ⲇ, Ⲇ * 57, Ⲇ * 27, 52 * Ⲇ, 31 * Ⲇ);
		Δ.bezierCurveTo(50 * Ⲇ, 36 * Ⲇ, Ⲇ * 53, 38 * Ⲇ, Ⲇ * 58, Ⲇ * 36);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(63 * Ⲇ, 46 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 64.5, Ⲇ * 46.5, Ⲇ * 64.5, 46.5 * Ⲇ, 66 * Ⲇ, 47 * Ⲇ);
		Δ.bezierCurveTo(70 * Ⲇ, 50 * Ⲇ, 70 * Ⲇ, Ⲇ * 53, 61 * Ⲇ, Ⲇ * 55);
		Δ.bezierCurveTo(Ⲇ * 62, Ⲇ * 50.5, 62 * Ⲇ, Ⲇ * 50.5, Ⲇ * 63, 46 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃΔ], Δⵠ[4], Ⲇ * ⵠⲆⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(41 * Ⲇ, Ⲇ * 42);
		Δ.bezierCurveTo(47 * Ⲇ, 41 * Ⲇ, 53 * Ⲇ, Ⲇ * 47, 46 * Ⲇ, Ⲇ * 51);
		Δ.bezierCurveTo(Ⲇ * 38, 49 * Ⲇ, 39 * Ⲇ, Ⲇ * 46, Ⲇ * 41, Ⲇ * 43);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃⲆ], Δⵠ[ᐃΔΔΔⲆ], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 44, Ⲇ * 57);
		Δ.bezierCurveTo(Ⲇ * 54, Ⲇ * 57, Ⲇ * 54, Ⲇ * 58, Ⲇ * 55, Ⲇ * 61);
		Δ.bezierCurveTo(Ⲇ * 54, Ⲇ * 63, Ⲇ * 52, Ⲇ * 64, Ⲇ * 48, 65 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃΔ], Δⵠ[ⲆⲆⲆΔ], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(20 * Ⲇ, 52 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 25, 51 * Ⲇ, Ⲇ * 27, 50 * Ⲇ, 28 * Ⲇ, 54 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 27, Ⲇ * 58, Ⲇ * 24, Ⲇ * 58, 22 * Ⲇ, 58 * Ⲇ);
		Δ.bezierCurveTo(21 * Ⲇ, 55.5 * Ⲇ, 21 * Ⲇ, 55.5 * Ⲇ, 20 * Ⲇ, Ⲇ * 53);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔΔ], Δⵠ[4], ᐃᐃⲆⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 30, Ⲇ * 61);
		Δ.bezierCurveTo(37 * Ⲇ, Ⲇ * 61, Ⲇ * 39, 63 * Ⲇ, Ⲇ * 39, Ⲇ * 68);
		Δ.bezierCurveTo(36 * Ⲇ, Ⲇ * 68.5, Ⲇ * 36, Ⲇ * 68.5, 33 * Ⲇ, 69 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 30.5, Ⲇ * 67.5, Ⲇ * 30.5, Ⲇ * 67.5, Ⲇ * 28, Ⲇ * 66);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ], Δⵠ[ΔᐃᐃΔ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 88, 45 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 90, 46.5 * Ⲇ, Ⲇ * 90, Ⲇ * 46.5, 92 * Ⲇ, Ⲇ * 48);
		Δ.bezierCurveTo(92 * Ⲇ, 50 * Ⲇ, 92 * Ⲇ, Ⲇ * 50, 92 * Ⲇ, 52 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃΔ], Δⵠ[ⵠΔⲆᐃⲆ], ⲆᐃΔⲆⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(96 * Ⲇ, 53 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 97.5, 55 * Ⲇ, 97.5 * Ⲇ, Ⲇ * 55, Ⲇ * 99, 57 * Ⲇ);
		Δ.bezierCurveTo(97.5 * Ⲇ, 59.5 * Ⲇ, Ⲇ * 97.5, Ⲇ * 59.5, Ⲇ * 96, Ⲇ * 62);
		Δ.bezierCurveTo(93.5 * Ⲇ, 60.5 * Ⲇ, Ⲇ * 93.5, Ⲇ * 60.5, 91 * Ⲇ, 59 * Ⲇ);
		Δ.bezierCurveTo(91.5 * Ⲇ, Ⲇ * 57, Ⲇ * 91.5, Ⲇ * 57, Ⲇ * 92, 55 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 92, Ⲇ * 71);
		Δ.bezierCurveTo(94.5 * Ⲇ, 70.5 * Ⲇ, Ⲇ * 94.5, Ⲇ * 70.5, Ⲇ * 97, Ⲇ * 70);
		Δ.bezierCurveTo(Ⲇ * 98.5, Ⲇ * 72.5, Ⲇ * 98.5, Ⲇ * 72.5, ΔᐃΔⲆᐃ * Ⲇ, Ⲇ * 75);
		Δ.bezierCurveTo(Ⲇ * 97, 76.5 * Ⲇ, 97 * Ⲇ, 76.5 * Ⲇ, 94 * Ⲇ, Ⲇ * 78);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⲆ], Δⵠ[ⵠⵠⵠᐃⲆ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(95 * Ⲇ, 82 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 96, 83 * Ⲇ, 96 * Ⲇ, 83 * Ⲇ, Ⲇ * 97, 84 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 97, Ⲇ * 85.5, Ⲇ * 97, 85.5 * Ⲇ, Ⲇ * 97, 87 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 93.5, 87.5 * Ⲇ, Ⲇ * 93.5, Ⲇ * 87.5, 90 * Ⲇ, 88 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], ΔΔⵠΔⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(86 * Ⲇ, 72 * Ⲇ);
		Δ.bezierCurveTo(89 * Ⲇ, Ⲇ * 76, Ⲇ * 88, 81 * Ⲇ, Ⲇ * 85, Ⲇ * 82);
		Δ.bezierCurveTo(80 * Ⲇ, Ⲇ * 80, Ⲇ * 82, 78 * Ⲇ, Ⲇ * 85, Ⲇ * 72);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 80, 86 * Ⲇ);
		Δ.bezierCurveTo(84 * Ⲇ, Ⲇ * 88, Ⲇ * 86, Ⲇ * 88, Ⲇ * 85, 93 * Ⲇ);
		Δ.bezierCurveTo(80 * Ⲇ, 96 * Ⲇ, Ⲇ * 79, 96 * Ⲇ, Ⲇ * 76, Ⲇ * 91);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃΔ], Δⵠ[ᐃᐃⵠΔ], ⵠΔⲆᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(84 * Ⲇ, Ⲇ * 46);
		Δ.bezierCurveTo(Ⲇ * 93, Ⲇ * 51, 91 * Ⲇ, 62 * Ⲇ, Ⲇ * 80, 78 * Ⲇ);
		Δ.bezierCurveTo(74 * Ⲇ, 86 * Ⲇ, Ⲇ * 66, Ⲇ * 90, 60 * Ⲇ, Ⲇ * 86);
		Δ.bezierCurveTo(Ⲇ * 55, 79 * Ⲇ, Ⲇ * 57, Ⲇ * 73, Ⲇ * 67, Ⲇ * 57);
		Δ.bezierCurveTo(71 * Ⲇ, 51 * Ⲇ, Ⲇ * 79, Ⲇ * 44, Ⲇ * 84, 46 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⲆᐃ], Δⵠ[6], ΔΔⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 76, 60 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 80, 66 * Ⲇ, Ⲇ * 75, Ⲇ * 74, 68 * Ⲇ, 74 * Ⲇ);
		Δ.bezierCurveTo(60 * Ⲇ, 64 * Ⲇ, 68 * Ⲇ, Ⲇ * 59, Ⲇ * 76, Ⲇ * 59);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[8], 5 * Ⲇ);
		return ᐃⵠ
	}

	function ⵠᐃⵠᐃΔⲆᐃⵠⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 217 * Ⲇ;
		ᐃⵠ.height = 215 * Ⲇ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(79 * Ⲇ, 113 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 135, Ⲇ * 98, Ⲇ * 136, Ⲇ * 96, 142 * Ⲇ, 97 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 167, Ⲇ * 106, 167 * Ⲇ, Ⲇ * 106, 171 * Ⲇ, 109 * Ⲇ);
		Δ.bezierCurveTo(173 * Ⲇ, 120 * Ⲇ, Ⲇ * 173, Ⲇ * 134, Ⲇ * 169, 141 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 140, Ⲇ * 149.5, Ⲇ * 140, 149.5 * Ⲇ, Ⲇ * 111, Ⲇ * 158);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[ΔⲆⵠΔ], ΔⲆⵠΔⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(154 * Ⲇ, Ⲇ * 103);
		Δ.bezierCurveTo(167 * Ⲇ, Ⲇ * 91, Ⲇ * 175, Ⲇ * 87, 176 * Ⲇ, 94 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 175, 102 * Ⲇ, Ⲇ * 176, 102 * Ⲇ, 186 * Ⲇ, Ⲇ * 103);
		Δ.bezierCurveTo(191 * Ⲇ, 104 * Ⲇ, 192 * Ⲇ, 105 * Ⲇ, Ⲇ * 185, Ⲇ * 116);
		Δ.bezierCurveTo(183 * Ⲇ, 120 * Ⲇ, 191 * Ⲇ, Ⲇ * 124, 189 * Ⲇ, Ⲇ * 129);
		Δ.bezierCurveTo(Ⲇ * 185, Ⲇ * 139, 178 * Ⲇ, Ⲇ * 134, Ⲇ * 166, 131 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⲆ], Δⵠ[2], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 60, Ⲇ * 46);
		Δ.bezierCurveTo(60 * Ⲇ, Ⲇ * 34, Ⲇ * 60, Ⲇ * 29, Ⲇ * 56, Ⲇ * ᐃᐃⲆΔⵠ);
		Δ.bezierCurveTo(52 * Ⲇ, ⲆⲆⲆⲆΔ * Ⲇ, Ⲇ * 52, Ⲇ * ᐃⲆⲆΔᐃⵠΔ, 49 * Ⲇ, 24 * Ⲇ);
		Δ.bezierCurveTo(48 * Ⲇ, 27 * Ⲇ, Ⲇ * 46, Ⲇ * 28, 39 * Ⲇ, 27 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 33, 26 * Ⲇ, 34 * Ⲇ, 31 * Ⲇ, 35 * Ⲇ, 37 * Ⲇ);
		Δ.bezierCurveTo(36 * Ⲇ, Ⲇ * 41, 27 * Ⲇ, 46 * Ⲇ, 29 * Ⲇ, Ⲇ * 52);
		Δ.bezierCurveTo(Ⲇ * 36, 55 * Ⲇ, 35 * Ⲇ, Ⲇ * 56, Ⲇ * 31, 59 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 27, 65 * Ⲇ, Ⲇ * 32, Ⲇ * 64, Ⲇ * 35, Ⲇ * 62);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(46 * Ⲇ, Ⲇ * 50);
		Δ.bezierCurveTo(Ⲇ * 51, 35 * Ⲇ, 70 * Ⲇ, Ⲇ * 32, 78 * Ⲇ, 29 * Ⲇ);
		Δ.bezierCurveTo(84 * Ⲇ, 27 * Ⲇ, Ⲇ * 113, Ⲇ * 36, Ⲇ * 127, Ⲇ * 41);
		Δ.bezierCurveTo(Ⲇ * 140, 47 * Ⲇ, Ⲇ * 147, Ⲇ * 69, 137 * Ⲇ, Ⲇ * 73);
		Δ.bezierCurveTo(Ⲇ * 124, Ⲇ * 92, 117 * Ⲇ, 92 * Ⲇ, 109 * Ⲇ, Ⲇ * 94);
		Δ.bezierCurveTo(Ⲇ * 101, 96 * Ⲇ, 89 * Ⲇ, Ⲇ * 92, Ⲇ * 65, Ⲇ * 83);
		Δ.bezierCurveTo(Ⲇ * 54, 80 * Ⲇ, 46 * Ⲇ, Ⲇ * 58, 46 * Ⲇ, Ⲇ * 51);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⲆΔ], Δⵠ[ⵠΔⲆᐃ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 51, 40 * Ⲇ);
		Δ.bezierCurveTo(49 * Ⲇ, 34 * Ⲇ, Ⲇ * 49, Ⲇ * 34, Ⲇ * 47, Ⲇ * 28);
		Δ.bezierCurveTo(Ⲇ * 38, Ⲇ * 28, 34 * Ⲇ, Ⲇ * 27, Ⲇ * 37, Ⲇ * 37);
		Δ.bezierCurveTo(43 * Ⲇ, Ⲇ * 40.5, Ⲇ * 43, 40.5 * Ⲇ, Ⲇ * 49, Ⲇ * 44);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[7]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(29 * Ⲇ, Ⲇ * 48);
		Δ.bezierCurveTo(38 * Ⲇ, 49 * Ⲇ, 38 * Ⲇ, Ⲇ * 49, Ⲇ * 47, 50 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 46.5, 51.5 * Ⲇ, 46.5 * Ⲇ, 51.5 * Ⲇ, Ⲇ * 46, Ⲇ * 53);
		Δ.bezierCurveTo(40 * Ⲇ, Ⲇ * 53.5, Ⲇ * 40, Ⲇ * 53.5, 34 * Ⲇ, 54 * Ⲇ);
		Δ.bezierCurveTo(29 * Ⲇ, Ⲇ * 51, Ⲇ * 32, Ⲇ * 51.5, Ⲇ * 30, 49 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⵠᐃΔⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(89 * Ⲇ, 61 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 101, 70 * Ⲇ, Ⲇ * 109, Ⲇ * 90, Ⲇ * 102, 90 * Ⲇ);
		Δ.bezierCurveTo(97 * Ⲇ, Ⲇ * 91, 87 * Ⲇ, 91 * Ⲇ, 60 * Ⲇ, Ⲇ * 80);
		Δ.bezierCurveTo(48 * Ⲇ, 65 * Ⲇ, Ⲇ * 46, 56 * Ⲇ, Ⲇ * 48, Ⲇ * 53);
		Δ.bezierCurveTo(Ⲇ * 50, Ⲇ * 52, Ⲇ * 66, Ⲇ * 56, Ⲇ * 89, Ⲇ * 61);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[7]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 99, 59 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 115, 45 * Ⲇ, 125 * Ⲇ, Ⲇ * 42, 129 * Ⲇ, 47 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 138, Ⲇ * 56, Ⲇ * 140, 63 * Ⲇ, Ⲇ * 138, Ⲇ * 67);
		Δ.bezierCurveTo(Ⲇ * 131, Ⲇ * 80, Ⲇ * 122, 87 * Ⲇ, 114 * Ⲇ, 90 * Ⲇ);
		Δ.bezierCurveTo(105 * Ⲇ, Ⲇ * 80, Ⲇ * 95, 62 * Ⲇ, Ⲇ * 98, Ⲇ * 61);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⵠΔⲆⵠⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(118 * Ⲇ, 62 * Ⲇ);
		Δ.bezierCurveTo(139 * Ⲇ, Ⲇ * 45, 153 * Ⲇ, 40 * Ⲇ, Ⲇ * 150, 48 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 145, Ⲇ * 57, 157 * Ⲇ, Ⲇ * 63, 157 * Ⲇ, Ⲇ * 70);
		Δ.bezierCurveTo(157 * Ⲇ, 74 * Ⲇ, 142 * Ⲇ, Ⲇ * 77, 142 * Ⲇ, Ⲇ * 85);
		Δ.bezierCurveTo(143 * Ⲇ, 91 * Ⲇ, 141 * Ⲇ, 92 * Ⲇ, 135 * Ⲇ, Ⲇ * 90);
		Δ.bezierCurveTo(132 * Ⲇ, 90 * Ⲇ, 132 * Ⲇ, Ⲇ * 96, 124 * Ⲇ, 99 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 118, 93 * Ⲇ, 116 * Ⲇ, 77 * Ⲇ, Ⲇ * 116, Ⲇ * 64);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃᐃᐃΔ], Δⵠ[5], ⵠΔᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(90 * Ⲇ, Ⲇ * 130);
		Δ.bezierCurveTo(157 * Ⲇ, 115 * Ⲇ, Ⲇ * 165, 111 * Ⲇ, Ⲇ * 167, 115 * Ⲇ);
		Δ.bezierCurveTo(170 * Ⲇ, 117 * Ⲇ, 171 * Ⲇ, Ⲇ * 135, Ⲇ * 167, 141 * Ⲇ);
		Δ.bezierCurveTo(135.5 * Ⲇ, Ⲇ * 149.5, Ⲇ * 135.5, 149.5 * Ⲇ, 104 * Ⲇ, Ⲇ * 158);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔⲆⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 53, 119 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 46, Ⲇ * 120, Ⲇ * 40, 118 * Ⲇ, 34 * Ⲇ, Ⲇ * 116);
		Δ.bezierCurveTo(28 * Ⲇ, 111 * Ⲇ, 41 * Ⲇ, Ⲇ * 112, Ⲇ * 39, Ⲇ * 108);
		Δ.bezierCurveTo(Ⲇ * 36, Δⵠᐃⵠᐃ * Ⲇ, 49 * Ⲇ, Ⲇ * 102, 53 * Ⲇ, Ⲇ * 95);
		Δ.bezierCurveTo(Ⲇ * 57, Ⲇ * 84, 58 * Ⲇ, 85 * Ⲇ, 63 * Ⲇ, 93 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 68, Ⲇ * 96, Ⲇ * 72, Ⲇ * 94, 80 * Ⲇ, 88 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 80, Ⲇ * 96, 78 * Ⲇ, Ⲇ * 107, 66 * Ⲇ, 115 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[9], Δⵠ[10], Ⲇ * ⵠΔᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(118 * Ⲇ, 64 * Ⲇ);
		Δ.bezierCurveTo(133.5 * Ⲇ, Ⲇ * 57, Ⲇ * 133.5, Ⲇ * 57, 149 * Ⲇ, Ⲇ * 50);
		Δ.bezierCurveTo(Ⲇ * 145, Ⲇ * 54, 154 * Ⲇ, 65 * Ⲇ, Ⲇ * 157, 68 * Ⲇ);
		Δ.bezierCurveTo(138.5 * Ⲇ, Ⲇ * 66.5, 138.5 * Ⲇ, Ⲇ * 66.5, Ⲇ * 120, Ⲇ * 65);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 118, Ⲇ * 65);
		Δ.bezierCurveTo(Ⲇ * 129, Ⲇ * 77, Ⲇ * 129, 77 * Ⲇ, Ⲇ * 140, Ⲇ * 89);
		Δ.bezierCurveTo(131 * Ⲇ, 89 * Ⲇ, 130 * Ⲇ, Ⲇ * 92, 128 * Ⲇ, Ⲇ * 96);
		Δ.bezierCurveTo(Ⲇ * 123.5, 82 * Ⲇ, Ⲇ * 123.5, 82 * Ⲇ, Ⲇ * 119, 68 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 51, Ⲇ * 112);
		Δ.bezierCurveTo(63 * Ⲇ, 108 * Ⲇ, 78 * Ⲇ, Ⲇ * 111, 88 * Ⲇ, Ⲇ * 112);
		Δ.bezierCurveTo(98 * Ⲇ, 122 * Ⲇ, Ⲇ * 117, 136 * Ⲇ, 125 * Ⲇ, Ⲇ * 157);
		Δ.bezierCurveTo(123 * Ⲇ, 180 * Ⲇ, 123 * Ⲇ, Ⲇ * 185, 118 * Ⲇ, Ⲇ * 186);
		Δ.bezierCurveTo(Ⲇ * 101, 190 * Ⲇ, 89 * Ⲇ, Ⲇ * 191, Ⲇ * 79, 187 * Ⲇ);
		Δ.bezierCurveTo(53 * Ⲇ, 165 * Ⲇ, Ⲇ * 50, 153 * Ⲇ, Ⲇ * 47, 144 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 46, 128 * Ⲇ, Ⲇ * 46, Ⲇ * 124, 50 * Ⲇ, Ⲇ * 112);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[9], Δⵠ[ⵠⵠⵠΔΔ], Ⲇ * ᐃΔⵠᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(50 * Ⲇ, 114 * Ⲇ);
		Δ.bezierCurveTo(81 * Ⲇ, Ⲇ * 149, Ⲇ * 80, 147 * Ⲇ, Ⲇ * 80, 149 * Ⲇ);
		Δ.bezierCurveTo(82 * Ⲇ, Ⲇ * 155, 80 * Ⲇ, Ⲇ * 182, 74 * Ⲇ, 182 * Ⲇ);
		Δ.bezierCurveTo(60 * Ⲇ, Ⲇ * 172, 52 * Ⲇ, Ⲇ * 157, 47 * Ⲇ, 144 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⵠΔᐃⲆ], Δⵠ[11], ΔⲆΔⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(85 * Ⲇ, Ⲇ * 152);
		Δ.bezierCurveTo(Ⲇ * 99, 150 * Ⲇ, Ⲇ * 109, Ⲇ * 152, 119 * Ⲇ, Ⲇ * 156);
		Δ.bezierCurveTo(122 * Ⲇ, 163 * Ⲇ, Ⲇ * 122, 174 * Ⲇ, 117 * Ⲇ, 182 * Ⲇ);
		Δ.closePath();
		Δ.bezierCurveTo(93 * Ⲇ, 188 * Ⲇ, 82 * Ⲇ, 187 * Ⲇ, 83 * Ⲇ, 179 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[11], Δⵠ[11], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 104, 166 * Ⲇ);
		Δ.bezierCurveTo(133 * Ⲇ, 165 * Ⲇ, Ⲇ * 142, Ⲇ * 168, 137 * Ⲇ, Ⲇ * 173);
		Δ.bezierCurveTo(127 * Ⲇ, Ⲇ * 177, Ⲇ * 137, 195 * Ⲇ, Ⲇ * 126, 196 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 112, 195 * Ⲇ, Ⲇ * 112, Ⲇ * 194, Ⲇ * 109, Ⲇ * 199);
		Δ.bezierCurveTo(105 * Ⲇ, Ⲇ * 205, Ⲇ * 102, 195 * Ⲇ, Ⲇ * 96, 197 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 84, 201 * Ⲇ, 88 * Ⲇ, Ⲇ * 198, 90 * Ⲇ, 187 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 96, Ⲇ * 171, 97 * Ⲇ, 170 * Ⲇ, Ⲇ * 103, Ⲇ * 167);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[9], Δⵠ[10], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(105 * Ⲇ, Ⲇ * 168);
		Δ.bezierCurveTo(Ⲇ * 118, Ⲇ * 172.5, Ⲇ * 118, Ⲇ * 172.5, 131 * Ⲇ, Ⲇ * 177);
		Δ.bezierCurveTo(Ⲇ * 133, 190 * Ⲇ, Ⲇ * 132, Ⲇ * 199, 116 * Ⲇ, Ⲇ * 194);
		Δ.bezierCurveTo(Ⲇ * 110, Ⲇ * 182, Ⲇ * 110, 182 * Ⲇ, 104 * Ⲇ, 170 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[10]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 102, Ⲇ * 169);
		Δ.bezierCurveTo(Ⲇ * 100.5, Ⲇ * 182, Ⲇ * 100.5, Ⲇ * 182, Ⲇ * 99, Ⲇ * 195);
		Δ.bezierCurveTo(93.5 * Ⲇ, 196.5 * Ⲇ, Ⲇ * 93.5, 196.5 * Ⲇ, Ⲇ * 88, 198 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 94, Ⲇ * 176, Ⲇ * 96, 174 * Ⲇ, 101 * Ⲇ, Ⲇ * 168);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠᐃⵠ], Δⵠ[9], ᐃΔΔΔⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(64 * Ⲇ, 107 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 64, 101 * Ⲇ, Ⲇ * 64, Ⲇ * 101, 64 * Ⲇ, 95 * Ⲇ);
		Δ.bezierCurveTo(57 * Ⲇ, 86 * Ⲇ, 57 * Ⲇ, Ⲇ * 84, 53 * Ⲇ, 97 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 55, 103.5 * Ⲇ, 55 * Ⲇ, 103.5 * Ⲇ, Ⲇ * 57, Ⲇ * 110);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[11], Δⵠ[ⲆΔΔⵠⵠ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(40 * Ⲇ, Ⲇ * 108);
		Δ.bezierCurveTo(46.5 * Ⲇ, Ⲇ * 111, 46.5 * Ⲇ, 111 * Ⲇ, 53 * Ⲇ, 114 * Ⲇ);
		Δ.bezierCurveTo(50.5 * Ⲇ, Ⲇ * 117, 50.5 * Ⲇ, Ⲇ * 117, 48 * Ⲇ, Ⲇ * 120);
		Δ.bezierCurveTo(40.5 * Ⲇ, 117.5 * Ⲇ, 40.5 * Ⲇ, 117.5 * Ⲇ, Ⲇ * 33, 115 * Ⲇ);
		Δ.bezierCurveTo(36 * Ⲇ, 112 * Ⲇ, Ⲇ * 36, 112 * Ⲇ, Ⲇ * 39, Ⲇ * 109);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃΔⲆⵠⲆ], Δⵠ[11], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 189, Ⲇ * 106);
		Δ.bezierCurveTo(Ⲇ * 178.5, 110.5 * Ⲇ, Ⲇ * 178.5, 110.5 * Ⲇ, 168 * Ⲇ, 115 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 168.5, 119 * Ⲇ, Ⲇ * 168.5, 119 * Ⲇ, Ⲇ * 169, Ⲇ * 123);
		Δ.bezierCurveTo(179 * Ⲇ, 124.5 * Ⲇ, Ⲇ * 179, 124.5 * Ⲇ, Ⲇ * 189, Ⲇ * 126);
		Δ.bezierCurveTo(182 * Ⲇ, Ⲇ * 118, 183 * Ⲇ, 115 * Ⲇ, Ⲇ * 188, Ⲇ * 106);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(69 * Ⲇ, Ⲇ * 178);
		Δ.bezierCurveTo(Ⲇ * 69, Ⲇ * 141, 70 * Ⲇ, Ⲇ * 136, 77 * Ⲇ, 137 * Ⲇ);
		Δ.bezierCurveTo(88 * Ⲇ, 133 * Ⲇ, 101 * Ⲇ, 134 * Ⲇ, 108 * Ⲇ, 137 * Ⲇ);
		ⵠᐃ(Δ, ΔⵠⲆⲆΔ, Δⵠ[ⵠⵠΔⲆ], ΔᐃⲆᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(55 * Ⲇ, 161 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 54, Ⲇ * 124, Ⲇ * 55, Ⲇ * 119, Ⲇ * 62, Ⲇ * 119);
		Δ.bezierCurveTo(74 * Ⲇ, 117 * Ⲇ, 85 * Ⲇ, Ⲇ * 117, 93 * Ⲇ, 119 * Ⲇ);
		ⵠᐃ(Δ, ΔⲆⲆΔⲆ, Δⵠ[3], ᐃᐃⵠΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 91, 29 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 74, 33 * Ⲇ, Ⲇ * 62, Ⲇ * 46, 57 * Ⲇ, 54 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 57, 63 * Ⲇ, 68 * Ⲇ, Ⲇ * 76, 77 * Ⲇ, Ⲇ * 87);
		ⵠᐃ(Δ, undefined, Δⵠ[6], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 107, Ⲇ * 33);
		Δ.bezierCurveTo(82 * Ⲇ, 51 * Ⲇ, 80 * Ⲇ, Ⲇ * 52, 79 * Ⲇ, Ⲇ * 59);
		Δ.bezierCurveTo(78 * Ⲇ, 65 * Ⲇ, 93 * Ⲇ, 86 * Ⲇ, 101 * Ⲇ, Ⲇ * 93);
		ⵠᐃ(Δ, ⵠⵠᐃⵠΔ, Δⵠ[ΔΔΔᐃΔ], Ⲇ * ⵠΔᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(130 * Ⲇ, 98 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 126.5, 103 * Ⲇ, Ⲇ * 126.5, 103 * Ⲇ, 123 * Ⲇ, 108 * Ⲇ);
		Δ.bezierCurveTo(133.5 * Ⲇ, Ⲇ * 107, Ⲇ * 133.5, 107 * Ⲇ, 144 * Ⲇ, 106 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 138.5, 110 * Ⲇ, 138.5 * Ⲇ, Ⲇ * 110, Ⲇ * 133, 114 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 142, 114 * Ⲇ, Ⲇ * 142, Ⲇ * 114, Ⲇ * 151, 114 * Ⲇ);
		Δ.bezierCurveTo(146.5 * Ⲇ, Ⲇ * 119.5, 146.5 * Ⲇ, 119.5 * Ⲇ, 142 * Ⲇ, 125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 146.5, Ⲇ * 127, 146.5 * Ⲇ, 127 * Ⲇ, Ⲇ * 151, 129 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 147.5, 132 * Ⲇ, 147.5 * Ⲇ, Ⲇ * 132, 144 * Ⲇ, 135 * Ⲇ);
		Δ.bezierCurveTo(148 * Ⲇ, 137 * Ⲇ, 148 * Ⲇ, 137 * Ⲇ, 152 * Ⲇ, Ⲇ * 139);
		Δ.bezierCurveTo(Ⲇ * 149, 142.5 * Ⲇ, Ⲇ * 149, Ⲇ * 142.5, Ⲇ * 146, 146 * Ⲇ);
		ⵠᐃ(Δ, ΔⲆⲆΔⲆ, Δⵠ[ⵠⲆᐃΔ], ⵠΔᐃⲆ * Ⲇ);
		return ᐃⵠ
	}
	const ᐃⵠᐃⵠⲆⵠΔ = ᐃΔᐃᐃⲆ;

	function ΔⵠᐃⵠⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 70;
		var ΔⵠⲆ = Ⲇ * 90;
		var Δᐃⵠ = Ⲇ * ΔᐃᐃΔ;
		var ᐃΔⵠᐃ = ᐃⵠΔⵠ * Ⲇ;
		var w2 = ᐃΔΔ / 2;
		var ΔⲆΔⵠⵠ = ΔⵠⲆ / ᐃᐃⵠⵠ;
		var ⲆᐃⲆⲆ = Ⲇ * ⲆⲆᐃᐃⵠ;
		var ⲆΔⲆᐃΔⵠᐃ = Ⲇ * Δⵠᐃⵠᐃ;
		var ⲆΔⵠⵠⵠⲆΔ = 100 * Ⲇ;
		var ⵠⲆⲆⵠᐃⵠⵠ = ⲆΔⲆᐃΔⵠᐃ / ⵠΔΔΔ;
		var ᐃᐃΔΔⵠⲆᐃ = ⲆΔⵠⵠⵠⲆΔ / ⵠᐃᐃⲆ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.save();
		Δ.translate(-80 * Ⲇ, Ⲇ * -70 + ᐃΔⵠᐃ);
		Δ.globalAlpha = .5;
		Δ.beginPath();
		Δ.bezierCurveTo(130 * Ⲇ, Ⲇ * 79, Ⲇ * 132, 86 * Ⲇ, Ⲇ * 130, 93 * Ⲇ);
		Δ.bezierCurveTo(128 * Ⲇ, Ⲇ * 100, Ⲇ * 121, 107 * Ⲇ, 120 * Ⲇ, Ⲇ * 107);
		Δ.bezierCurveTo(120 * Ⲇ, Ⲇ * 107, 115 * Ⲇ, Ⲇ * 98, Ⲇ * 115, 92 * Ⲇ);
		Δ.bezierCurveTo(115 * Ⲇ, 86 * Ⲇ, 119 * Ⲇ, Ⲇ * 76, Ⲇ * 127, Ⲇ * 73);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃ[414]);
		Δ.restore();
		Δ.save();
		Δ.translate(Ⲇ * -80, Ⲇ * -70 + ᐃΔⵠᐃ);
		Δ.globalAlpha = .5;
		Δ.beginPath();
		Δ.bezierCurveTo(112 * Ⲇ, Ⲇ * 109, Ⲇ * 111, Ⲇ * ΔᐃⵠΔⲆ, 106 * Ⲇ, 93 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 104, Ⲇ * 90, 91 * Ⲇ, Ⲇ * 87, Ⲇ * 91, Ⲇ * 87);
		Δ.bezierCurveTo(Ⲇ * 91, 88 * Ⲇ, 91 * Ⲇ, 96 * Ⲇ, Ⲇ * 94, Ⲇ * 102);
		Δ.bezierCurveTo(97 * Ⲇ, 108 * Ⲇ, Ⲇ * 106, 112 * Ⲇ, Ⲇ * 113, 112 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃ[414]);
		Δ.restore();
		Δ.save();
		Δ.translate(-80 * Ⲇ, -70 * Ⲇ + ᐃΔⵠᐃ);
		Δ.globalAlpha = .5;
		Δ.beginPath();
		Δ.bezierCurveTo(108 * Ⲇ, Ⲇ * 120, 100 * Ⲇ, 119 * Ⲇ, 91 * Ⲇ, 127 * Ⲇ);
		Δ.bezierCurveTo(83 * Ⲇ, Ⲇ * 134, 82 * Ⲇ, 146 * Ⲇ, 83 * Ⲇ, Ⲇ * 146);
		Δ.bezierCurveTo(84 * Ⲇ, 146 * Ⲇ, 98 * Ⲇ, 142 * Ⲇ, Ⲇ * 103, Ⲇ * 138);
		Δ.bezierCurveTo(107 * Ⲇ, 135 * Ⲇ, 110 * Ⲇ, 130 * Ⲇ, Ⲇ * 112, 121 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃ[414]);
		Δ.restore();
		Δ.save();
		Δ.translate(Ⲇ * 3, Ⲇ * -93 + ᐃΔⵠᐃ);
		Δ.rotate(Math.PI / Δᐃᐃⵠ);
		Δ.globalAlpha = .5;
		Δ.beginPath();
		Δ.bezierCurveTo(130 * Ⲇ, 79 * Ⲇ, 132 * Ⲇ, 86 * Ⲇ, Ⲇ * 130, Ⲇ * 93);
		Δ.bezierCurveTo(Ⲇ * 128, Ⲇ * 100, Ⲇ * 121, Ⲇ * 107, 120 * Ⲇ, 107 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 120, 107 * Ⲇ, 115 * Ⲇ, 98 * Ⲇ, 115 * Ⲇ, Ⲇ * 92);
		Δ.bezierCurveTo(Ⲇ * 115, Ⲇ * 86, Ⲇ * 119, 76 * Ⲇ, 127 * Ⲇ, Ⲇ * 73);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃ[414]);
		Δ.restore();
		Δ.save();
		Δ.translate(-80 * Ⲇ, Ⲇ * -70);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.bezierCurveTo(130 * Ⲇ, 79 * Ⲇ, 132 * Ⲇ, 86 * Ⲇ, 130 * Ⲇ, 93 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 128, Ⲇ * ᐃΔⲆᐃⵠ, 121 * Ⲇ, 107 * Ⲇ, Ⲇ * 120, 107 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 120, 107 * Ⲇ, Ⲇ * 115, 98 * Ⲇ, 115 * Ⲇ, Ⲇ * 92);
		Δ.bezierCurveTo(115 * Ⲇ, 86 * Ⲇ, 119 * Ⲇ, Ⲇ * 76, Ⲇ * 127, 73 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃΔΔⲆ], Δᐃⵠ);
		Δ.restore();
		Δ.save();
		Δ.translate(Ⲇ * -80, Ⲇ * -70);
		Δ.globalAlpha = ⵠⵠⵠⲆ;
		Δ.beginPath();
		Δ.bezierCurveTo(112 * Ⲇ, Ⲇ * 109, 111 * Ⲇ, Ⲇ * 100, Ⲇ * 106, 93 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 104, 90 * Ⲇ, Ⲇ * 91, Ⲇ * 87, 91 * Ⲇ, 87 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 91, Ⲇ * 88, 91 * Ⲇ, Ⲇ * 96, 94 * Ⲇ, Ⲇ * 102);
		Δ.bezierCurveTo(Ⲇ * 97, 108 * Ⲇ, 106 * Ⲇ, 112 * Ⲇ, 113 * Ⲇ, 112 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ], Δⵠ[ΔΔΔᐃ], Δᐃⵠ);
		Δ.restore();
		Δ.save();
		Δ.translate(-80 * Ⲇ, Ⲇ * -70);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.bezierCurveTo(Ⲇ * 108, Ⲇ * 120, Ⲇ * ⲆⲆⵠⵠⵠⵠᐃ, Ⲇ * 119, Ⲇ * 91, 127 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 83, 134 * Ⲇ, Ⲇ * 82, Ⲇ * 146, 83 * Ⲇ, 146 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 84, 146 * Ⲇ, 98 * Ⲇ, 142 * Ⲇ, 103 * Ⲇ, 138 * Ⲇ);
		Δ.bezierCurveTo(107 * Ⲇ, 135 * Ⲇ, Ⲇ * 110, 130 * Ⲇ, 112 * Ⲇ, Ⲇ * 121);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], Δᐃⵠ);
		Δ.restore();
		Δ.save();
		Δ.translate(Ⲇ * ⵠᐃⵠΔ, -93 * Ⲇ);
		Δ.rotate(Math.PI / 5);
		Δ.globalAlpha = ΔᐃⵠⲆ;
		Δ.beginPath();
		Δ.bezierCurveTo(130 * Ⲇ, 79 * Ⲇ, 132 * Ⲇ, Ⲇ * 86, 130 * Ⲇ, Ⲇ * 93);
		Δ.bezierCurveTo(Ⲇ * 128, Ⲇ * ΔⵠⵠΔᐃ, 121 * Ⲇ, 107 * Ⲇ, 120 * Ⲇ, Ⲇ * 107);
		Δ.bezierCurveTo(120 * Ⲇ, 107 * Ⲇ, Ⲇ * 115, Ⲇ * 98, 115 * Ⲇ, Ⲇ * 92);
		Δ.bezierCurveTo(115 * Ⲇ, Ⲇ * 86, Ⲇ * 119, 76 * Ⲇ, Ⲇ * 127, Ⲇ * 73);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃΔⵠΔ], Δᐃⵠ);
		Δ.restore();
		return ᐃⵠ
	}
	const ⲆᐃⵠΔⵠΔΔᐃΔ = ⵠΔᐃⵠΔⵠΔ;

	function ᐃᐃⵠΔⲆⲆΔᐃΔ(ᐃΔⲆᐃ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var text = ⵠᐃⲆ[ᐃΔⲆᐃ];
		Δ.font = "20px Baloo Paaji";
		var ᐃΔᐃΔΔΔΔ = 0;
		1 <= text.length && (ᐃΔᐃΔΔΔΔ = Math.max(ⵠΔΔⲆ, Δ.measureText(text[0]).width));
		Δ.font = "17px Baloo Paaji";
		if (text.length >= ᐃᐃⵠⵠ) ᐃΔᐃΔΔΔΔ = Math.max(ᐃΔᐃΔΔΔΔ, Δ.measureText(text[1]).width);
		Δ.font = "14px Baloo Paaji";
		for (ᐃⲆ = 2; text.length > ᐃⲆ; ᐃⲆ++) ᐃΔᐃΔΔΔΔ = Math.max(ᐃΔᐃΔΔΔΔ, Δ.measureText(text[ᐃⲆ]).width);
		var Δᐃⵠ = ᐃΔᐃΔΔΔΔ + 35;
		var ᐃⵠⲆⵠⵠᐃᐃ = 26;
		var Ⲇⵠⵠ = Ⲇⵠⵠᐃ;
		if (text.length === 1) Ⲇⵠⵠ = 55;
		else 2 === text.length ? Ⲇⵠⵠ = 85 : Ⲇⵠⵠ = (text.length - Ⲇᐃⵠⵠ) * ᐃⵠⲆⵠⵠᐃᐃ + 85;
		ᐃⵠ.width = Δᐃⵠ;
		ᐃⵠ.height = Ⲇⵠⵠ;
		ᐃΔⵠ(Δ, 0, ⵠⵠⲆΔ, Δᐃⵠ, Ⲇⵠⵠ, 10);
		Δ.fillStyle = ᐃ[352];
		Δ.globalAlpha = .5;
		Δ.fill();
		1 <= text.length && (Δ.textBaseline = ᐃ[409], Δ.font = "20px Baloo Paaji", Δ.globalAlpha = ΔΔⵠ, Δ.fillStyle = "#e2c340", Δ.fillText(text[0], 15, 28));
		if (2 <= text.length) {
			Δ.font = "17px Baloo Paaji";
			Δ.fillStyle = ᐃ[478];
			Δ.fillText(text[1], 15, 55);
			Ⲇⵠⵠ = 55
		}
		if (3 <= text.length) {
			Δ.font = "14px Baloo Paaji";
			Δ.globalAlpha = .7;
			for (ᐃⲆ = ⵠΔⵠⲆ; ᐃⲆ < text.length; ᐃⲆ++) {
				Δ.fillText(text[ᐃⲆ], ⲆⲆⲆΔⵠ, Ⲇⵠⵠ + 28);
				Ⲇⵠⵠ += ᐃⵠⲆⵠⵠᐃᐃ
			}
		}
		return ᐃⵠ
	}
	const ΔⵠⲆⵠⵠ = ⲆⲆᐃᐃⵠ;

	function ⵠⵠⲆⵠᐃΔⵠⲆⲆ(text) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		Δ.lineJoin = ᐃ[250];
		while (-ⵠⲆⵠⲆ !== text.indexOf("\\n")) text = text.replace("\\n", "\n");
		text = text.split("\n");
		Δⵠ = [];
		var ΔⵠⲆ = ⲆⵠⲆᐃᐃⵠⲆ;
		var Ⲇⵠⵠ = text.length * (ΔⵠⲆ + 4) + 10;
		var Δᐃⵠ = ⵠⵠⲆΔ;
		Δ.font = ΔⵠⲆ + ᐃ[249];
		for (var ᐃⲆ = ΔᐃⲆⲆ; ᐃⲆ < text.length; ᐃⲆ++) {
			if (text[ᐃⲆ].charAt(0) === "#") {
				Δⵠ[ᐃⲆ] = text[ᐃⲆ].substring(Ⲇⵠⵠᐃ, 7);
				text[ᐃⲆ] = text[ᐃⲆ].substring(8)
			} else Δⵠ[ᐃⲆ] = ᐃ[193];
			Δᐃⵠ = Math.max(Δ.measureText(text[ᐃⲆ]).width + ᐃⵠΔⲆΔΔⵠ, Δᐃⵠ)
		}
		ᐃⵠ.height = Ⲇⵠⵠ;
		ᐃⵠ.width = Δᐃⵠ;
		for (var ᐃⲆ = 0; text.length > ᐃⲆ; ᐃⲆ++) {
			var ⵠⵠ = ⲆⵠᐃⲆⲆ(1, text[ᐃⲆ], ΔⵠⲆ, Δⵠ[ᐃⲆ], null, null, null, null, null, ᐃ[76], ⵠⲆⲆΔᐃ);
			Δ.drawImage(ⵠⵠ, ⵠᐃΔᐃⲆ, ᐃⲆ * (ΔⵠⲆ + 4) + ⲆⵠⲆΔᐃ)
		}
		return ᐃⵠ
	}
	const ΔⲆⵠⵠⵠΔᐃ = ⵠᐃᐃᐃᐃ;

	function ⵠᐃΔΔΔᐃᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 125 * Ⲇ;
		ᐃⵠ.height = 139 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.save();
		Δ.translate(Ⲇ * 63, Ⲇ * 79);
		Δ.rotate(ΔⲆⵠⲆ);
		ΔΔΔΔ(Δ, 8, 60 * Ⲇ, ᐃᐃᐃⲆⵠ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ]);
		Δ.restore();
		Δ.globalAlpha = ⵠⲆⵠⲆ;
		Δ.save();
		Δ.translate(63 * Ⲇ, 69 * Ⲇ);
		Δ.rotate(ⲆⲆⲆᐃ);
		ΔΔΔΔ(Δ, 8, 60 * Ⲇ, Ⲇ * 10);
		ⵠᐃ(Δ, Δⵠ[ΔΔΔᐃ], Δⵠ[ⲆΔⲆΔ], 4);
		Δ.rotate(.56);
		ΔΔΔΔ(Δ, ⵠⲆⲆᐃᐃ, 40 * Ⲇ, 10 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔΔ], Δⵠ[ΔᐃᐃΔ], 4);
		Δ.rotate(.28);
		ΔΔΔΔ(Δ, ⲆⵠΔᐃⵠⵠΔ, Ⲇ * 28, Ⲇ * 8);
		ⵠᐃ(Δ, Δⵠ[5]);
		Δ.restore();
		return ᐃⵠ
	}

	function ⵠⲆⲆⵠᐃ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 18;
		var ΔⵠⲆ = ⵠⵠᐃᐃⲆΔⵠ * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		var Ⲇᐃ = Ⲇ * ⵠⵠⵠᐃⵠ;
		var ⲆⲆⲆ = Ⲇ * ⲆⵠⲆⲆⵠ;
		var ΔⲆⵠ = 8 * Ⲇ;
		Δ.save();
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ);
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, ⵠᐃⲆⵠ, 0, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]);
		var ΔⲆⵠ = 3 * Ⲇ;
		var Ⲇᐃ = 0;
		var ⲆⲆⲆ = -ⵠᐃⵠⵠ * Ⲇ;
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ);
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, 0, 0, ΔⲆⵠ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⵠ]);
		Δ.restore();
		return ᐃⵠ
	}

	function ᐃᐃΔⵠⵠΔⵠⲆᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 309 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 287;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ᐃⵠⵠⵠ;
		Δ.translate(10 * Ⲇ, Ⲇ * ΔΔⵠΔⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 34.5, 38.53125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 91.5, Ⲇ * 30.53125, 138.5 * Ⲇ, 68.53125 * Ⲇ, 169.5 * Ⲇ, 93.53125 * Ⲇ);
		Δ.bezierCurveTo(208.5 * Ⲇ, 128.53125 * Ⲇ, 226.5 * Ⲇ, Ⲇ * 157.53125, 233.5 * Ⲇ, Ⲇ * 209.53125);
		Δ.bezierCurveTo(195.5 * Ⲇ, Ⲇ * 218.53125, 138.5 * Ⲇ, 191.53125 * Ⲇ, 105.5 * Ⲇ, 157.53125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 54.5, Ⲇ * 112.53125, 41.5 * Ⲇ, Ⲇ * 80.53125, 33.5 * Ⲇ, Ⲇ * 38.53125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆᐃ], Δⵠ[Δⵠⵠ], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(143.5 * Ⲇ, Ⲇ * 74.53125);
		Δ.bezierCurveTo(Ⲇ * 164.5, Ⲇ * 73.53125, Ⲇ * 159, Ⲇ * 74.53125, 174.5 * Ⲇ, 74.53125 * Ⲇ);
		Δ.bezierCurveTo(186 * Ⲇ, Ⲇ * 86.53125, 186 * Ⲇ, 86.53125 * Ⲇ, 197.5 * Ⲇ, Ⲇ * 98.53125);
		Δ.bezierCurveTo(Ⲇ * 186, Ⲇ * 97.03125, Ⲇ * 186, Ⲇ * 97.03125, 174.5 * Ⲇ, 95.53125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃ], Δⵠ[0], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 87.5, Ⲇ * 142.53125);
		Δ.bezierCurveTo(92 * Ⲇ, Ⲇ * 160.03125, 92 * Ⲇ, 160.03125 * Ⲇ, Ⲇ * 96.5, 177.53125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 108, 181.53125 * Ⲇ, Ⲇ * 108, Ⲇ * 181.53125, 119.5 * Ⲇ, Ⲇ * 185.53125);
		Δ.bezierCurveTo(Ⲇ * 116.5, Ⲇ * 175.53125, Ⲇ * 116.5, Ⲇ * 175.53125, 113.5 * Ⲇ, 165.53125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆᐃ], Δⵠ[ᐃⲆΔᐃ], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 236.5, 189.53125 * Ⲇ);
		Δ.bezierCurveTo(274.5 * Ⲇ, 197.53125 * Ⲇ, Ⲇ * 255.5, 194.03125 * Ⲇ, Ⲇ * 274.5, 198.53125 * Ⲇ);
		Δ.bezierCurveTo(272.5 * Ⲇ, Ⲇ * 236.53125, Ⲇ * 261.5, Ⲇ * 237.53125, 242.5 * Ⲇ, Ⲇ * 248.53125);
		Δ.bezierCurveTo(230.5 * Ⲇ, 231.03125 * Ⲇ, 230.5 * Ⲇ, Ⲇ * 231.03125, 218.5 * Ⲇ, 213.53125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ], Δⵠ[ᐃⲆΔ], ΔⵠⲆⵠⵠ * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(Ⲇ * -10, -ⵠᐃⵠΔᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(34.5 * Ⲇ, Ⲇ * 38.53125);
		Δ.bezierCurveTo(Ⲇ * 91.5, 30.53125 * Ⲇ, 138.5 * Ⲇ, Ⲇ * 68.53125, Ⲇ * 169.5, Ⲇ * 93.53125);
		Δ.bezierCurveTo(Ⲇ * 208.5, Ⲇ * 128.53125, 226.5 * Ⲇ, 157.53125 * Ⲇ, 233.5 * Ⲇ, 209.53125 * Ⲇ);
		Δ.bezierCurveTo(195.5 * Ⲇ, 218.53125 * Ⲇ, 138.5 * Ⲇ, 191.53125 * Ⲇ, 105.5 * Ⲇ, Ⲇ * 157.53125);
		Δ.bezierCurveTo(Ⲇ * 54.5, Ⲇ * 112.53125, 41.5 * Ⲇ, Ⲇ * 80.53125, Ⲇ * 33.5, 38.53125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[2], ᐃᐃⵠΔⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(143.5 * Ⲇ, Ⲇ * 74.53125);
		Δ.bezierCurveTo(Ⲇ * 164.5, Ⲇ * 73.53125, 159 * Ⲇ, 74.53125 * Ⲇ, Ⲇ * 174.5, Ⲇ * 74.53125);
		Δ.bezierCurveTo(Ⲇ * 186, 86.53125 * Ⲇ, Ⲇ * 186, 86.53125 * Ⲇ, 197.5 * Ⲇ, 98.53125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 186, Ⲇ * 97.03125, 186 * Ⲇ, Ⲇ * 97.03125, 174.5 * Ⲇ, 95.53125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[2], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 87.5, Ⲇ * 142.53125);
		Δ.bezierCurveTo(92 * Ⲇ, 160.03125 * Ⲇ, 92 * Ⲇ, Ⲇ * 160.03125, Ⲇ * 96.5, 177.53125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 108, 181.53125 * Ⲇ, 108 * Ⲇ, 181.53125 * Ⲇ, 119.5 * Ⲇ, 185.53125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 116.5, 175.53125 * Ⲇ, Ⲇ * 116.5, 175.53125 * Ⲇ, 113.5 * Ⲇ, Ⲇ * 165.53125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δⵠᐃ], Δⵠ[2], ⲆⲆᐃᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 236.5, 189.53125 * Ⲇ);
		Δ.bezierCurveTo(274.5 * Ⲇ, 197.53125 * Ⲇ, 255.5 * Ⲇ, 194.03125 * Ⲇ, Ⲇ * 274.5, Ⲇ * 198.53125);
		Δ.bezierCurveTo(272.5 * Ⲇ, 236.53125 * Ⲇ, 261.5 * Ⲇ, Ⲇ * 237.53125, Ⲇ * 242.5, Ⲇ * 248.53125);
		Δ.bezierCurveTo(230.5 * Ⲇ, Ⲇ * 231.03125, 230.5 * Ⲇ, 231.03125 * Ⲇ, 218.5 * Ⲇ, 213.53125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠΔΔΔ], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 109.5, Ⲇ * 51.53125);
		Δ.bezierCurveTo(107.5 * Ⲇ, Ⲇ * 92.53125, 91.5 * Ⲇ, 95.53125 * Ⲇ, Ⲇ * 59.5, 101.53125 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * ⵠⲆᐃΔⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(72.5 * Ⲇ, Ⲇ * 51.53125);
		Δ.bezierCurveTo(Ⲇ * 71, 64.53125 * Ⲇ, Ⲇ * 69.5, Ⲇ * 76.53125, 69.5 * Ⲇ, 77.53125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆΔΔⲆ], ᐃᐃⲆΔΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(84.5 * Ⲇ, 63.53125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 70.5, 65.03125 * Ⲇ, 70.5 * Ⲇ, Ⲇ * 65.03125, Ⲇ * 56.5, 66.53125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ], Δⵠ[2], 7 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(125.5 * Ⲇ, Ⲇ * 84.53125);
		Δ.bezierCurveTo(Ⲇ * 125.5, 110.03125 * Ⲇ, Ⲇ * 125.5, Ⲇ * 110.03125, Ⲇ * 125.5, 135.53125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[ⵠᐃᐃⲆ], Ⲇ * 7);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 149.5, 108.53125 * Ⲇ);
		Δ.bezierCurveTo(150 * Ⲇ, Ⲇ * 137.03125, Ⲇ * 150, 137.03125 * Ⲇ, 150.5 * Ⲇ, 165.53125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆᐃᐃⲆ], 7 * Ⲇ);
		return ᐃⵠ
	}

	function ⲆⵠⲆΔⲆⲆᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 248;
		ᐃⵠ.height = 128 * Ⲇ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(137 * Ⲇ, Ⲇ * ᐃΔᐃᐃⲆ);
		Δ.bezierCurveTo(169 * Ⲇ, 14 * Ⲇ, Ⲇ * 212, Ⲇ * ⵠⵠⵠᐃⵠ, Ⲇ * 241, Ⲇ * ⵠᐃⵠΔᐃ);
		Δ.bezierCurveTo(Ⲇ * 211, 63 * Ⲇ, 158 * Ⲇ, Ⲇ * 92, 103 * Ⲇ, Ⲇ * 109);
		Δ.bezierCurveTo(73 * Ⲇ, 126 * Ⲇ, Ⲇ * 54, 124 * Ⲇ, Ⲇ * 6, Ⲇ * 99);
		Δ.bezierCurveTo(82 * Ⲇ, 63 * Ⲇ, Ⲇ * 113, Ⲇ * 35, 137 * Ⲇ, ⲆΔⵠΔΔ * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], Ⲇ * 14);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(73 * Ⲇ, Ⲇ * 124);
		Δ.bezierCurveTo(Ⲇ * 111, Ⲇ * 126, 162 * Ⲇ, Ⲇ * 97, 203 * Ⲇ, 61 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 156, 98 * Ⲇ, 131 * Ⲇ, Ⲇ * 106, Ⲇ * 105, 109 * Ⲇ);
		Δ.bezierCurveTo(99 * Ⲇ, Ⲇ * 121, 87 * Ⲇ, 124 * Ⲇ, Ⲇ * 72, Ⲇ * 124);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⵠᐃ], Δⵠ[3], Ⲇ * ᐃⵠᐃᐃ);
		return ᐃⵠ
	}

	function ᐃⵠⵠⲆⵠΔΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 130 * Ⲇ;
		ᐃⵠ.height = 148 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.save();
		Δ.translate(Ⲇ * 65, 85 * Ⲇ);
		Δ.rotate(1.4);
		ΔΔΔΔ(Δ, 7, Ⲇ * 60, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ]);
		Δ.globalAlpha = ⲆⵠΔΔ;
		Δ.save();
		Δ.translate(Ⲇ * 65, 74 * Ⲇ);
		Δ.rotate(1.4);
		ΔΔΔΔ(Δ, 7, 60 * Ⲇ, Ⲇ * ⲆΔᐃⵠΔ);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃᐃⵠⵠ], ΔⲆΔⲆ);
		Δ.rotate(.64);
		ΔΔΔΔ(Δ, 7, Ⲇ * 40, ΔΔⲆΔΔ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠΔ], Δⵠ[ᐃΔⵠᐃⲆ], 4);
		Δ.rotate(.12);
		ΔΔΔΔ(Δ, ᐃᐃᐃⵠᐃⵠⵠ, 23 * Ⲇ, Ⲇ * ⲆΔⲆᐃᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[5]);
		return ᐃⵠ
	}

	function ⵠⲆⵠᐃᐃⲆⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 372;
		ᐃⵠ.height = 375 * Ⲇ;
		Δ.globalAlpha = .5;
		Δ.translate(Ⲇ * ⵠⵠⲆΔⲆ, ⵠⵠΔⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(313.0000305175781 * Ⲇ, Ⲇ * 76.58523559570312);
		Δ.bezierCurveTo(308.0000305175781 * Ⲇ, Ⲇ * 130.58523559570312, 279.0000305175781 * Ⲇ, Ⲇ * 158.58523559570312, 254.00003051757812 * Ⲇ, 175.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 287.0000305175781, Ⲇ * 182.58523559570312, Ⲇ * 274.0000305175781, 181.08523559570312 * Ⲇ, Ⲇ * 294.0000305175781, 186.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(293.5000305175781 * Ⲇ, 196.08523559570312 * Ⲇ, Ⲇ * 293.5000305175781, 196.08523559570312 * Ⲇ, 293.0000305175781 * Ⲇ, Ⲇ * 205.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 304.0000305175781, 201.08523559570312 * Ⲇ, Ⲇ * 304.0000305175781, 201.08523559570312 * Ⲇ, 315.0000305175781 * Ⲇ, 196.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 350.0000305175781, 219.58523559570312 * Ⲇ, 343.0000305175781 * Ⲇ, 221.58523559570312 * Ⲇ, 351.0000305175781 * Ⲇ, Ⲇ * 230.58523559570312);
		Δ.bezierCurveTo(296.0000305175781 * Ⲇ, 260.5852355957031 * Ⲇ, Ⲇ * 264.0000305175781, Ⲇ * 256.5852355957031, 220.00003051757812 * Ⲇ, Ⲇ * 236.58523559570312);
		Δ.bezierCurveTo(233.00003051757812 * Ⲇ, Ⲇ * 266.5852355957031, Ⲇ * 232.00003051757812, Ⲇ * 279.5852355957031, 231.00003051757812 * Ⲇ, Ⲇ * 295.5852355957031);
		Δ.bezierCurveTo(Ⲇ * 222.00003051757812, 297.5852355957031 * Ⲇ, 222.00003051757812 * Ⲇ, Ⲇ * 297.5852355957031, Ⲇ * 213.00003051757812, 299.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 219.50003051757812, 308.0852355957031 * Ⲇ, Ⲇ * 219.50003051757812, 308.0852355957031 * Ⲇ, 226.00003051757812 * Ⲇ, 316.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(223.00003051757812 * Ⲇ, 344.5852355957031 * Ⲇ, Ⲇ * 216.00003051757812, Ⲇ * 350.5852355957031, 209.00003051757812 * Ⲇ, 363.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 154.00003051757812, Ⲇ * 318.5852355957031, 156.00003051757812 * Ⲇ, Ⲇ * 268.5852355957031, Ⲇ * 160.00003051757812, 238.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 135.00003051757812, 268.5852355957031 * Ⲇ, Ⲇ * 125.00003051757812, Ⲇ * 267.5852355957031, 112.00003051757812 * Ⲇ, 272.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 104.50003051757812, 266.5852355957031 * Ⲇ, 104.50003051757812 * Ⲇ, Ⲇ * 266.5852355957031, Ⲇ * 97.00003051757812, Ⲇ * 260.5852355957031);
		Δ.bezierCurveTo(Ⲇ * 93.00003051757812, 271.0852355957031 * Ⲇ, 93.00003051757812 * Ⲇ, 271.0852355957031 * Ⲇ, 89.00003051757812 * Ⲇ, 281.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(66.00003051757812 * Ⲇ, Ⲇ * 288.5852355957031, 59.000030517578125 * Ⲇ, 288.5852355957031 * Ⲇ, Ⲇ * 39.000030517578125, Ⲇ * 285.5852355957031);
		Δ.bezierCurveTo(Ⲇ * 56.000030517578125, Ⲇ * 216.58523559570312, 91.00003051757812 * Ⲇ, Ⲇ * 204.58523559570312, 129.00003051757812 * Ⲇ, Ⲇ * 189.58523559570312);
		Δ.bezierCurveTo(90.00003051757812 * Ⲇ, 176.58523559570312 * Ⲇ, 89.00003051757812 * Ⲇ, Ⲇ * 173.58523559570312, Ⲇ * 79.00003051757812, 166.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(82.00003051757812 * Ⲇ, 155.08523559570312 * Ⲇ, Ⲇ * 82.00003051757812, 155.08523559570312 * Ⲇ, Ⲇ * 85.00003051757812, Ⲇ * 143.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 75.50003051757812, Ⲇ * 147.58523559570312, Ⲇ * 75.50003051757812, 147.58523559570312 * Ⲇ, 66.00003051757812 * Ⲇ, 151.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 44.000030517578125, 133.58523559570312 * Ⲇ, 41.000030517578125 * Ⲇ, 124.58523559570312 * Ⲇ, Ⲇ * 34.000030517578125, 102.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(100.00003051757812 * Ⲇ, Ⲇ * 81.58523559570312, 134.00003051757812 * Ⲇ, Ⲇ * 118.58523559570312, Ⲇ * 150.00003051757812, Ⲇ * 128.58523559570312);
		Δ.bezierCurveTo(144.00003051757812 * Ⲇ, 102.58523559570312 * Ⲇ, 147.00003051757812 * Ⲇ, Ⲇ * 90.58523559570312, 150.00003051757812 * Ⲇ, 80.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 159.50003051757812, 79.08523559570312 * Ⲇ, 159.50003051757812 * Ⲇ, Ⲇ * 79.08523559570312, 169.00003051757812 * Ⲇ, 77.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(163.00003051757812 * Ⲇ, 72.58523559570312 * Ⲇ, Ⲇ * 163.00003051757812, Ⲇ * 72.58523559570312, 157.00003051757812 * Ⲇ, 67.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 162.00003051757812, Ⲇ * 42.585235595703125, 169.00003051757812 * Ⲇ, Ⲇ * 29.585235595703125, 182.00003051757812 * Ⲇ, 14.585235595703125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 219.00003051757812, 48.585235595703125 * Ⲇ, 222.00003051757812 * Ⲇ, 92.58523559570312 * Ⲇ, 218.00003051757812 * Ⲇ, 112.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(239.00003051757812 * Ⲇ, Ⲇ * 95.58523559570312, Ⲇ * 242.00003051757812, 97.58523559570312 * Ⲇ, Ⲇ * 249.00003051757812, 94.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 255.00003051757812, Ⲇ * 103.08523559570312, Ⲇ * 255.00003051757812, 103.08523559570312 * Ⲇ, 261.0000305175781 * Ⲇ, Ⲇ * 111.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 261.5000305175781, 99.58523559570312 * Ⲇ, 261.5000305175781 * Ⲇ, Ⲇ * 99.58523559570312, Ⲇ * 262.0000305175781, 87.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 282.0000305175781, 77.58523559570312 * Ⲇ, 301.0000305175781 * Ⲇ, Ⲇ * 74.58523559570312, Ⲇ * 314.0000305175781, Ⲇ * 76.58523559570312);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆΔ]);
		Δ.globalAlpha = ᐃΔΔⲆ;
		Δ.translate(Ⲇ * -ⲆᐃⲆⵠⵠ, Ⲇ * -15);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 313.0000305175781, Ⲇ * 76.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 308.0000305175781, Ⲇ * 130.58523559570312, Ⲇ * 279.0000305175781, Ⲇ * 158.58523559570312, Ⲇ * 254.00003051757812, 175.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(287.0000305175781 * Ⲇ, Ⲇ * 182.58523559570312, Ⲇ * 274.0000305175781, Ⲇ * 181.08523559570312, Ⲇ * 294.0000305175781, 186.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 293.5000305175781, Ⲇ * 196.08523559570312, Ⲇ * 293.5000305175781, 196.08523559570312 * Ⲇ, 293.0000305175781 * Ⲇ, Ⲇ * 205.58523559570312);
		Δ.bezierCurveTo(304.0000305175781 * Ⲇ, Ⲇ * 201.08523559570312, Ⲇ * 304.0000305175781, Ⲇ * 201.08523559570312, Ⲇ * 315.0000305175781, Ⲇ * 196.58523559570312);
		Δ.bezierCurveTo(350.0000305175781 * Ⲇ, Ⲇ * 219.58523559570312, 343.0000305175781 * Ⲇ, 221.58523559570312 * Ⲇ, Ⲇ * 351.0000305175781, Ⲇ * 230.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 296.0000305175781, Ⲇ * 260.5852355957031, 264.0000305175781 * Ⲇ, 256.5852355957031 * Ⲇ, Ⲇ * 220.00003051757812, 236.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(233.00003051757812 * Ⲇ, Ⲇ * 266.5852355957031, Ⲇ * 232.00003051757812, Ⲇ * 279.5852355957031, Ⲇ * 231.00003051757812, 295.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 222.00003051757812, Ⲇ * 297.5852355957031, Ⲇ * 222.00003051757812, Ⲇ * 297.5852355957031, 213.00003051757812 * Ⲇ, Ⲇ * 299.5852355957031);
		Δ.bezierCurveTo(Ⲇ * 219.50003051757812, 308.0852355957031 * Ⲇ, 219.50003051757812 * Ⲇ, 308.0852355957031 * Ⲇ, Ⲇ * 226.00003051757812, 316.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(223.00003051757812 * Ⲇ, Ⲇ * 344.5852355957031, Ⲇ * 216.00003051757812, Ⲇ * 350.5852355957031, 209.00003051757812 * Ⲇ, 363.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(154.00003051757812 * Ⲇ, Ⲇ * 318.5852355957031, Ⲇ * 156.00003051757812, 268.5852355957031 * Ⲇ, Ⲇ * 160.00003051757812, 238.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 135.00003051757812, 268.5852355957031 * Ⲇ, Ⲇ * 125.00003051757812, Ⲇ * 267.5852355957031, 112.00003051757812 * Ⲇ, 272.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 104.50003051757812, Ⲇ * 266.5852355957031, Ⲇ * 104.50003051757812, Ⲇ * 266.5852355957031, Ⲇ * 97.00003051757812, 260.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(93.00003051757812 * Ⲇ, Ⲇ * 271.0852355957031, Ⲇ * 93.00003051757812, Ⲇ * 271.0852355957031, Ⲇ * 89.00003051757812, 281.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(66.00003051757812 * Ⲇ, Ⲇ * 288.5852355957031, Ⲇ * 59.000030517578125, Ⲇ * 288.5852355957031, Ⲇ * 39.000030517578125, 285.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 56.000030517578125, 216.58523559570312 * Ⲇ, Ⲇ * 91.00003051757812, Ⲇ * 204.58523559570312, Ⲇ * 129.00003051757812, Ⲇ * 189.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 90.00003051757812, Ⲇ * 176.58523559570312, Ⲇ * 89.00003051757812, Ⲇ * 173.58523559570312, Ⲇ * 79.00003051757812, Ⲇ * 166.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 82.00003051757812, 155.08523559570312 * Ⲇ, 82.00003051757812 * Ⲇ, Ⲇ * 155.08523559570312, 85.00003051757812 * Ⲇ, 143.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 75.50003051757812, Ⲇ * 147.58523559570312, Ⲇ * 75.50003051757812, 147.58523559570312 * Ⲇ, 66.00003051757812 * Ⲇ, Ⲇ * 151.58523559570312);
		Δ.bezierCurveTo(44.000030517578125 * Ⲇ, 133.58523559570312 * Ⲇ, Ⲇ * 41.000030517578125, Ⲇ * 124.58523559570312, Ⲇ * 34.000030517578125, Ⲇ * 102.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 100.00003051757812, Ⲇ * 81.58523559570312, 134.00003051757812 * Ⲇ, 118.58523559570312 * Ⲇ, Ⲇ * 150.00003051757812, Ⲇ * 128.58523559570312);
		Δ.bezierCurveTo(144.00003051757812 * Ⲇ, Ⲇ * 102.58523559570312, 147.00003051757812 * Ⲇ, Ⲇ * 90.58523559570312, Ⲇ * 150.00003051757812, Ⲇ * 80.58523559570312);
		Δ.bezierCurveTo(159.50003051757812 * Ⲇ, Ⲇ * 79.08523559570312, 159.50003051757812 * Ⲇ, 79.08523559570312 * Ⲇ, 169.00003051757812 * Ⲇ, 77.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 163.00003051757812, Ⲇ * 72.58523559570312, 163.00003051757812 * Ⲇ, 72.58523559570312 * Ⲇ, Ⲇ * 157.00003051757812, Ⲇ * 67.58523559570312);
		Δ.bezierCurveTo(162.00003051757812 * Ⲇ, Ⲇ * 42.585235595703125, Ⲇ * 169.00003051757812, Ⲇ * 29.585235595703125, Ⲇ * 182.00003051757812, Ⲇ * 14.585235595703125);
		Δ.bezierCurveTo(Ⲇ * 219.00003051757812, Ⲇ * 48.585235595703125, 222.00003051757812 * Ⲇ, 92.58523559570312 * Ⲇ, 218.00003051757812 * Ⲇ, Ⲇ * 112.58523559570312);
		Δ.bezierCurveTo(239.00003051757812 * Ⲇ, 95.58523559570312 * Ⲇ, Ⲇ * 242.00003051757812, 97.58523559570312 * Ⲇ, Ⲇ * 249.00003051757812, 94.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(255.00003051757812 * Ⲇ, Ⲇ * 103.08523559570312, Ⲇ * 255.00003051757812, Ⲇ * 103.08523559570312, Ⲇ * 261.0000305175781, 111.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(261.5000305175781 * Ⲇ, 99.58523559570312 * Ⲇ, 261.5000305175781 * Ⲇ, Ⲇ * 99.58523559570312, 262.0000305175781 * Ⲇ, 87.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 282.0000305175781, 77.58523559570312 * Ⲇ, 301.0000305175781 * Ⲇ, 74.58523559570312 * Ⲇ, 314.0000305175781 * Ⲇ, 76.58523559570312 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], ΔΔᐃⵠΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(186.00003051757812 * Ⲇ, 192.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 185.00003051757812, 66.94886779785156 * Ⲇ, 184.50003051757812 * Ⲇ, 104.94886779785156 * Ⲇ, Ⲇ * 183.00003051757812, Ⲇ * 16.948867797851562);
		Δ.bezierCurveTo(Ⲇ * 216.00003051757812, Ⲇ * 47.94886779785156, 219.00003051757812 * Ⲇ, Ⲇ * 80.94886779785156, Ⲇ * 218.00003051757812, Ⲇ * 113.94886779785156);
		Δ.bezierCurveTo(209.00003051757812 * Ⲇ, 165.94886779785156 * Ⲇ, 200.00003051757812 * Ⲇ, Ⲇ * 176.94886779785156, 189.00003051757812 * Ⲇ, Ⲇ * 192.94886779785156);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ], Δⵠ[ⲆⲆΔΔ], ΔⲆⵠΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(190.00003051757812 * Ⲇ, Ⲇ * 191.94886779785156);
		Δ.bezierCurveTo(207.00003051757812 * Ⲇ, 348.94886779785156 * Ⲇ, 205.00003051757812 * Ⲇ, 323.94886779785156 * Ⲇ, Ⲇ * 209.00003051757812, 358.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 171.00003051757812, 334.94886779785156 * Ⲇ, Ⲇ * 167.00003051757812, 302.94886779785156 * Ⲇ, Ⲇ * 161.00003051757812, Ⲇ * 268.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 160.00003051757812, 218.94886779785156 * Ⲇ, Ⲇ * 181.00003051757812, 191.94886779785156 * Ⲇ, 189.00003051757812 * Ⲇ, 186.94886779785156 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⲆ], Δⵠ[ⵠᐃⵠⲆ], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 194.00003051757812, Ⲇ * 195.94886779785156);
		Δ.bezierCurveTo(116.00003051757812 * Ⲇ, Ⲇ * 150.94886779785156, 116.00003051757812 * Ⲇ, 150.94886779785156 * Ⲇ, 38.000030517578125 * Ⲇ, 105.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(67.00003051757812 * Ⲇ, Ⲇ * 90.94886779785156, Ⲇ * 96.00003051757812, 99.94886779785156 * Ⲇ, Ⲇ * 123.00003051757812, 111.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 183.00003051757812, 152.94886779785156 * Ⲇ, Ⲇ * 179.00003051757812, Ⲇ * 180.94886779785156, 193.00003051757812 * Ⲇ, 194.94886779785156 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠⵠⲆᐃ], ᐃᐃⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 189.00003051757812, 190.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 250.00003051757812, 133.94886779785156 * Ⲇ, Ⲇ * 311.0000305175781, Ⲇ * 78.94886779785156, 311.0000305175781 * Ⲇ, Ⲇ * 76.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 306.0000305175781, Ⲇ * 127.94886779785156, Ⲇ * 283.0000305175781, 148.94886779785156 * Ⲇ, Ⲇ * 261.0000305175781, Ⲇ * 166.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 220.00003051757812, 197.94886779785156 * Ⲇ, Ⲇ * 191.00003051757812, 194.94886779785156 * Ⲇ, 189.00003051757812 * Ⲇ, 195.94886779785156 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⵠ], Δⵠ[ᐃΔᐃⲆ], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(189.00003051757812 * Ⲇ, 194.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(268.5000305175781 * Ⲇ, Ⲇ * 211.94886779785156, Ⲇ * 268.5000305175781, 211.94886779785156 * Ⲇ, Ⲇ * 348.0000305175781, Ⲇ * 228.94886779785156);
		Δ.bezierCurveTo(316.0000305175781 * Ⲇ, Ⲇ * 247.94886779785156, 298.0000305175781 * Ⲇ, 256.94886779785156 * Ⲇ, Ⲇ * 250.00003051757812, Ⲇ * 246.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 197.00003051757812, Ⲇ * 229.94886779785156, Ⲇ * 189.00003051757812, Ⲇ * 202.94886779785156, Ⲇ * 188.00003051757812, 199.94886779785156 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠᐃⵠⵠ], Ⲇ * ΔⵠⲆⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 192.00003051757812, 191.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(116.50003051757812 * Ⲇ, 238.44886779785156 * Ⲇ, Ⲇ * 116.50003051757812, Ⲇ * 238.44886779785156, 41.000030517578125 * Ⲇ, Ⲇ * 284.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 49.000030517578125, 252.94886779785156 * Ⲇ, 56.000030517578125 * Ⲇ, Ⲇ * 242.94886779785156, Ⲇ * 80.00003051757812, Ⲇ * 215.94886779785156);
		Δ.bezierCurveTo(125.00003051757812 * Ⲇ, Ⲇ * 181.94886779785156, 174.00003051757812 * Ⲇ, Ⲇ * 183.94886779785156, 192.00003051757812 * Ⲇ, Ⲇ * 191.94886779785156);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⲆ], Δⵠ[ⵠⵠⲆⲆ], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 313.0000305175781, Ⲇ * 76.58523559570312);
		Δ.bezierCurveTo(308.0000305175781 * Ⲇ, Ⲇ * 130.58523559570312, Ⲇ * 279.0000305175781, 158.58523559570312 * Ⲇ, 254.00003051757812 * Ⲇ, 175.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(287.0000305175781 * Ⲇ, 182.58523559570312 * Ⲇ, Ⲇ * 274.0000305175781, 181.08523559570312 * Ⲇ, Ⲇ * 294.0000305175781, Ⲇ * 186.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 293.5000305175781, 196.08523559570312 * Ⲇ, Ⲇ * 293.5000305175781, Ⲇ * 196.08523559570312, Ⲇ * 293.0000305175781, Ⲇ * 205.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 304.0000305175781, 201.08523559570312 * Ⲇ, Ⲇ * 304.0000305175781, Ⲇ * 201.08523559570312, 315.0000305175781 * Ⲇ, 196.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(350.0000305175781 * Ⲇ, 219.58523559570312 * Ⲇ, 343.0000305175781 * Ⲇ, 221.58523559570312 * Ⲇ, 351.0000305175781 * Ⲇ, Ⲇ * 230.58523559570312);
		Δ.bezierCurveTo(296.0000305175781 * Ⲇ, Ⲇ * 260.5852355957031, 264.0000305175781 * Ⲇ, 256.5852355957031 * Ⲇ, 220.00003051757812 * Ⲇ, 236.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 233.00003051757812, Ⲇ * 266.5852355957031, Ⲇ * 232.00003051757812, 279.5852355957031 * Ⲇ, Ⲇ * 231.00003051757812, 295.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(222.00003051757812 * Ⲇ, 297.5852355957031 * Ⲇ, 222.00003051757812 * Ⲇ, Ⲇ * 297.5852355957031, 213.00003051757812 * Ⲇ, Ⲇ * 299.5852355957031);
		Δ.bezierCurveTo(Ⲇ * 219.50003051757812, Ⲇ * 308.0852355957031, 219.50003051757812 * Ⲇ, 308.0852355957031 * Ⲇ, Ⲇ * 226.00003051757812, 316.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 223.00003051757812, 344.5852355957031 * Ⲇ, Ⲇ * 216.00003051757812, Ⲇ * 350.5852355957031, 209.00003051757812 * Ⲇ, Ⲇ * 363.5852355957031);
		Δ.bezierCurveTo(154.00003051757812 * Ⲇ, Ⲇ * 318.5852355957031, 156.00003051757812 * Ⲇ, 268.5852355957031 * Ⲇ, 160.00003051757812 * Ⲇ, 238.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(135.00003051757812 * Ⲇ, Ⲇ * 268.5852355957031, 125.00003051757812 * Ⲇ, 267.5852355957031 * Ⲇ, Ⲇ * 112.00003051757812, Ⲇ * 272.5852355957031);
		Δ.bezierCurveTo(Ⲇ * 104.50003051757812, Ⲇ * 266.5852355957031, Ⲇ * 104.50003051757812, 266.5852355957031 * Ⲇ, 97.00003051757812 * Ⲇ, Ⲇ * 260.5852355957031);
		Δ.bezierCurveTo(93.00003051757812 * Ⲇ, Ⲇ * 271.0852355957031, Ⲇ * 93.00003051757812, Ⲇ * 271.0852355957031, 89.00003051757812 * Ⲇ, Ⲇ * 281.5852355957031);
		Δ.bezierCurveTo(66.00003051757812 * Ⲇ, 288.5852355957031 * Ⲇ, 59.000030517578125 * Ⲇ, Ⲇ * 288.5852355957031, Ⲇ * 39.000030517578125, 285.5852355957031 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 56.000030517578125, Ⲇ * 216.58523559570312, Ⲇ * 91.00003051757812, Ⲇ * 204.58523559570312, Ⲇ * 129.00003051757812, Ⲇ * 189.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 90.00003051757812, 176.58523559570312 * Ⲇ, Ⲇ * 89.00003051757812, 173.58523559570312 * Ⲇ, Ⲇ * 79.00003051757812, 166.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(82.00003051757812 * Ⲇ, 155.08523559570312 * Ⲇ, Ⲇ * 82.00003051757812, 155.08523559570312 * Ⲇ, 85.00003051757812 * Ⲇ, Ⲇ * 143.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 75.50003051757812, Ⲇ * 147.58523559570312, Ⲇ * 75.50003051757812, 147.58523559570312 * Ⲇ, 66.00003051757812 * Ⲇ, Ⲇ * 151.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 44.000030517578125, 133.58523559570312 * Ⲇ, 41.000030517578125 * Ⲇ, Ⲇ * 124.58523559570312, 34.000030517578125 * Ⲇ, Ⲇ * 102.58523559570312);
		Δ.bezierCurveTo(Ⲇ * 100.00003051757812, 81.58523559570312 * Ⲇ, Ⲇ * 134.00003051757812, 118.58523559570312 * Ⲇ, 150.00003051757812 * Ⲇ, 128.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(144.00003051757812 * Ⲇ, 102.58523559570312 * Ⲇ, 147.00003051757812 * Ⲇ, 90.58523559570312 * Ⲇ, Ⲇ * 150.00003051757812, 80.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 159.50003051757812, 79.08523559570312 * Ⲇ, Ⲇ * 159.50003051757812, 79.08523559570312 * Ⲇ, Ⲇ * 169.00003051757812, 77.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 163.00003051757812, Ⲇ * 72.58523559570312, Ⲇ * 163.00003051757812, Ⲇ * 72.58523559570312, Ⲇ * 157.00003051757812, 67.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(162.00003051757812 * Ⲇ, Ⲇ * 42.585235595703125, 169.00003051757812 * Ⲇ, Ⲇ * 29.585235595703125, Ⲇ * 182.00003051757812, Ⲇ * 14.585235595703125);
		Δ.bezierCurveTo(219.00003051757812 * Ⲇ, Ⲇ * 48.585235595703125, Ⲇ * 222.00003051757812, Ⲇ * 92.58523559570312, 218.00003051757812 * Ⲇ, 112.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(239.00003051757812 * Ⲇ, Ⲇ * 95.58523559570312, Ⲇ * 242.00003051757812, 97.58523559570312 * Ⲇ, Ⲇ * 249.00003051757812, Ⲇ * 94.58523559570312);
		Δ.bezierCurveTo(255.00003051757812 * Ⲇ, 103.08523559570312 * Ⲇ, Ⲇ * 255.00003051757812, Ⲇ * 103.08523559570312, Ⲇ * 261.0000305175781, 111.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(261.5000305175781 * Ⲇ, Ⲇ * 99.58523559570312, 261.5000305175781 * Ⲇ, 99.58523559570312 * Ⲇ, 262.0000305175781 * Ⲇ, 87.58523559570312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 282.0000305175781, Ⲇ * 77.58523559570312, 301.0000305175781 * Ⲇ, Ⲇ * 74.58523559570312, Ⲇ * 314.0000305175781, 76.58523559570312 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃΔᐃⲆⵠ, Δⵠ[2], Ⲇ * 4);
		return ᐃⵠ
	}

	function ΔᐃΔΔᐃⲆⵠ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 220 * Ⲇ;
		var ΔⵠⲆ = 230 * Ⲇ;
		var ΔⲆⵠ = Ⲇ * ΔⵠⲆⵠⲆ;
		var ⲆᐃⲆⲆ = ΔⲆⵠ / 4;
		var ᐃΔⵠᐃ = 20 * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(ᐃΔΔ / ⵠⲆᐃⵠ, ΔⵠⲆ / 2 + ᐃΔⵠᐃ);
		Δ.globalAlpha = .5;
		ΔΔΔΔ(Δ, 7, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ⵠⲆⵠⲆ;
		Δ.translate(ᐃⲆᐃ, -ᐃΔⵠᐃ);
		ΔΔΔΔ(Δ, 7, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[1]);
		ΔΔΔΔ(Δ, ⲆΔⲆⲆᐃᐃⲆ, .65 * ΔⲆⵠ, .65 * ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[2]);
		return ᐃⵠ
	}

	function ⲆⵠᐃⲆⲆ(Ⲇ, text, ΔⵠⲆ, Δⵠ, ᐃΔⵠᐃ, ⲆⵠⲆⲆ, ⲆΔⲆΔⵠΔᐃ, ⲆⵠⲆᐃΔ, ⲆᐃΔΔ, ΔΔᐃⵠ, ⵠᐃᐃΔⲆ) {
		ⵠᐃᐃΔⲆ === ᐃΔᐃⲆⵠ && (ⵠᐃᐃΔⲆ = 0);
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ⲆⵠⲆⲆ = !ⲆⵠⲆⲆ ? ᐃⲆΔᐃ : Ⲇ * ⲆⵠⲆⲆ;
		var Ⲇⵠⵠ = Math.floor(Ⲇ * ΔⵠⲆ);
		Δ.font = Ⲇⵠⵠ + ᐃ[249];
		Δ.lineJoin = ᐃ[250];
		ⲆⵠⲆᐃΔ = Ⲇ * ⲆⵠⲆᐃΔ;
		var ΔⵠᐃᐃΔ = ⲆΔⲆΔⵠΔᐃ ? ⲆⵠⲆᐃΔ * ΔΔⵠⲆ : ⵠⵠΔΔ;
		if (ⲆᐃΔΔ) var Δᐃⵠ = Math.min(Δ.measureText(text).width + Ⲇ * 2 + ΔⵠᐃᐃΔ, ⲆᐃΔΔ);
		else var Δᐃⵠ = Δ.measureText(text).width + Ⲇ * 2 + ΔⵠᐃᐃΔ + ⵠᐃᐃⲆ * (Ⲇ * ⵠᐃᐃΔⲆ);
		var Ⲇⵠⵠ = (Ⲇⵠⵠ + ⲆⵠⲆⲆ + ⵠᐃᐃΔⲆ) * Ⲇ + ΔⵠᐃᐃΔ;
		ᐃⵠ.width = Δᐃⵠ;
		ᐃⵠ.height = Ⲇⵠⵠ;
		ⲆΔⲆΔⵠΔᐃ && (Δ.fillStyle = ⲆΔⲆΔⵠΔᐃ, ᐃΔⵠ(Δ, 0, ⵠⵠΔΔ, Δᐃⵠ, Ⲇⵠⵠ, ⲆⵠⲆᐃΔ * ⲆᐃᐃⲆ), Δ.fill(), Δ.translate(ⲆⵠⲆᐃΔ, ⲆⵠⲆᐃΔ));
		Δ.textBaseline = ᐃ[409], Δ.font = ΔⵠⲆ + ᐃ[249];
		Δ.lineJoin = ᐃ[250];
		ᐃΔⵠᐃ && (Δ.beginPath(), Δ.fillStyle = ᐃΔⵠᐃ, Δ.fillText(text, 0, Ⲇⵠⵠ / ΔⵠⲆⲆ + ⲆⵠⲆⲆ - ΔⵠᐃᐃΔ / ΔⵠⲆⲆ, Δᐃⵠ));
		Δ.beginPath();
		if (ΔΔᐃⵠ) {
			Δ.strokeStyle = ΔΔᐃⵠ;
			Δ.lineWidth = ⵠᐃᐃΔⲆ;
			Δ.strokeText(text, ⵠᐃᐃΔⲆ, (Ⲇⵠⵠ - ΔⵠᐃᐃΔ) / 2, Δᐃⵠ)
		}
		Δ.fillStyle = Δⵠ;
		Δ.fillText(text, ⵠᐃᐃΔⲆ, (Ⲇⵠⵠ - ΔⵠᐃᐃΔ) / ᐃᐃⵠⵠ, Δᐃⵠ);
		return ᐃⵠ
	}

	function ᐃⲆⲆⲆΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 140;
		var ΔⵠⲆ = Ⲇ * 150;
		var ᐃΔⵠᐃ = 10 * Ⲇ;
		var Δᐃⵠ = 4 * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(Ⲇ * -50, Ⲇ * -38 + ᐃΔⵠᐃ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.beginPath();
		Δ.bezierCurveTo(160 * Ⲇ, 65 * Ⲇ, Ⲇ * 160, Ⲇ * 85, Ⲇ * 152, Ⲇ * 95);
		Δ.bezierCurveTo(Ⲇ * 152, Ⲇ * 95, Ⲇ * 173, 94 * Ⲇ, 187 * Ⲇ, Ⲇ * 102);
		Δ.bezierCurveTo(Ⲇ * 187, Ⲇ * 102, 180 * Ⲇ, Ⲇ * 120, 155 * Ⲇ, 126 * Ⲇ);
		Δ.bezierCurveTo(154 * Ⲇ, 126 * Ⲇ, 166 * Ⲇ, Ⲇ * 138, Ⲇ * 169, Ⲇ * 148);
		Δ.bezierCurveTo(Ⲇ * 169, Ⲇ * 148, 148 * Ⲇ, 152 * Ⲇ, Ⲇ * 133, Ⲇ * 140);
		Δ.bezierCurveTo(133 * Ⲇ, Ⲇ * 140, 134 * Ⲇ, Ⲇ * 160, Ⲇ * 122, Ⲇ * 175);
		Δ.bezierCurveTo(Ⲇ * 122, Ⲇ * 175, Ⲇ * 107, Ⲇ * 162, Ⲇ * 107, Ⲇ * 144);
		Δ.bezierCurveTo(Ⲇ * 107, Ⲇ * 144, 98 * Ⲇ, Ⲇ * 164, Ⲇ * 73, Ⲇ * 167);
		Δ.bezierCurveTo(73 * Ⲇ, 167 * Ⲇ, 72 * Ⲇ, 134 * Ⲇ, Ⲇ * 90, 127 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 90, 127 * Ⲇ, Ⲇ * 70, Ⲇ * 134, 55 * Ⲇ, Ⲇ * 123);
		Δ.bezierCurveTo(Ⲇ * 55, Ⲇ * 123, 58 * Ⲇ, Ⲇ * 115, 75 * Ⲇ, 104 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 75, 104 * Ⲇ, 66 * Ⲇ, 96 * Ⲇ, 61 * Ⲇ, Ⲇ * 77);
		Δ.bezierCurveTo(61 * Ⲇ, 77 * Ⲇ, 83 * Ⲇ, 74 * Ⲇ, Ⲇ * 102, 89 * Ⲇ);
		Δ.bezierCurveTo(102 * Ⲇ, Ⲇ * 89, 92 * Ⲇ, Ⲇ * 66, Ⲇ * 110, 41 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 111, 40 * Ⲇ, 130 * Ⲇ, Ⲇ * 54, Ⲇ * 130, 82 * Ⲇ);
		Δ.bezierCurveTo(130 * Ⲇ, Ⲇ * 82, Ⲇ * 143, Ⲇ * 67, 159 * Ⲇ, Ⲇ * 65);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔ]);
		Δ.translate(0, Δⵠⵠ - ᐃΔⵠᐃ);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.bezierCurveTo(Ⲇ * 160, 65 * Ⲇ, Ⲇ * 160, Ⲇ * 85, 152 * Ⲇ, Ⲇ * 95);
		Δ.bezierCurveTo(Ⲇ * 152, 95 * Ⲇ, Ⲇ * 173, Ⲇ * 94, 187 * Ⲇ, Ⲇ * 102);
		Δ.bezierCurveTo(187 * Ⲇ, Ⲇ * 102, Ⲇ * 180, 120 * Ⲇ, Ⲇ * 155, Ⲇ * 126);
		Δ.bezierCurveTo(Ⲇ * 154, Ⲇ * 126, Ⲇ * 166, 138 * Ⲇ, 169 * Ⲇ, 148 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 169, 148 * Ⲇ, Ⲇ * 148, 152 * Ⲇ, 133 * Ⲇ, Ⲇ * 140);
		Δ.bezierCurveTo(Ⲇ * 133, Ⲇ * 140, Ⲇ * 134, 160 * Ⲇ, Ⲇ * 122, Ⲇ * 175);
		Δ.bezierCurveTo(122 * Ⲇ, Ⲇ * 175, Ⲇ * 107, Ⲇ * 162, 107 * Ⲇ, Ⲇ * 144);
		Δ.bezierCurveTo(Ⲇ * 107, 144 * Ⲇ, Ⲇ * 98, 164 * Ⲇ, Ⲇ * 73, 167 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 73, 167 * Ⲇ, Ⲇ * 72, 134 * Ⲇ, Ⲇ * 90, 127 * Ⲇ);
		Δ.bezierCurveTo(90 * Ⲇ, Ⲇ * 127, Ⲇ * 70, Ⲇ * 134, Ⲇ * 55, 123 * Ⲇ);
		Δ.bezierCurveTo(55 * Ⲇ, Ⲇ * 123, 58 * Ⲇ, 115 * Ⲇ, Ⲇ * 75, 104 * Ⲇ);
		Δ.bezierCurveTo(75 * Ⲇ, Ⲇ * 104, 66 * Ⲇ, Ⲇ * 96, Ⲇ * 61, 77 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 61, Ⲇ * 77, 83 * Ⲇ, Ⲇ * 74, 102 * Ⲇ, 89 * Ⲇ);
		Δ.bezierCurveTo(102 * Ⲇ, 89 * Ⲇ, Ⲇ * 92, Ⲇ * 66, 110 * Ⲇ, Ⲇ * 41);
		Δ.bezierCurveTo(Ⲇ * 111, 40 * Ⲇ, 130 * Ⲇ, Ⲇ * 54, 130 * Ⲇ, Ⲇ * 82);
		Δ.bezierCurveTo(130 * Ⲇ, Ⲇ * 82, 143 * Ⲇ, Ⲇ * 67, 159 * Ⲇ, 65 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆΔⲆΔ], Δᐃⵠ);
		return ᐃⵠ
	}

	function ΔⲆⵠΔⲆⲆⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 234;
		ᐃⵠ.height = Ⲇ * 183;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 76, Ⲇ * 25);
		Δ.bezierCurveTo(150 * Ⲇ, Ⲇ * ⵠᐃⵠΔ, 181 * Ⲇ, 22 * Ⲇ, 203 * Ⲇ, 41 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 225, Ⲇ * 63, 225 * Ⲇ, Ⲇ * 105, 198 * Ⲇ, Ⲇ * 133);
		Δ.bezierCurveTo(179 * Ⲇ, Ⲇ * 157, Ⲇ * 134, 178 * Ⲇ, 81 * Ⲇ, 164 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 19, 148 * Ⲇ, Ⲇ * 6, Ⲇ * 95, 21 * Ⲇ, 66 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 34, Ⲇ * 39, Ⲇ * 52, Ⲇ * 33, Ⲇ * 75, 25 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⲆⲆᐃ], Ⲇ * ΔΔⲆΔ);
		return ᐃⵠ
	}

	function ⵠⵠⲆⵠΔⲆΔⵠⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 243;
		ᐃⵠ.height = 172 * Ⲇ;
		ⵠΔᐃ(Δ, 119.5 * Ⲇ, Ⲇ * 140.125, 19 * Ⲇ);
		ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[1], Ⲇ * ⵠⲆⲆⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 36.5, Ⲇ * 20.125);
		Δ.bezierCurveTo(Ⲇ * 119.5, 20.625 * Ⲇ, 119.5 * Ⲇ, Ⲇ * 20.625, Ⲇ * 202.5, Ⲇ * 21.125);
		Δ.bezierCurveTo(214.5 * Ⲇ, Ⲇ * 22.125, Ⲇ * 216.5, 26.125 * Ⲇ, Ⲇ * 217.5, 35.125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 221, Ⲇ * 76.125, 221 * Ⲇ, 76.125 * Ⲇ, Ⲇ * 224.5, 117.125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 225.5, 127.125 * Ⲇ, Ⲇ * 221.5, 131.125 * Ⲇ, 210.5 * Ⲇ, 132.125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 117.5, Ⲇ * 132.125, 117.5 * Ⲇ, Ⲇ * 132.125, Ⲇ * 24.5, Ⲇ * 132.125);
		Δ.bezierCurveTo(Ⲇ * 14.5, 131.125 * Ⲇ, 13.5 * Ⲇ, 126.125 * Ⲇ, 16.5 * Ⲇ, Ⲇ * 111.125);
		Δ.bezierCurveTo(19.5 * Ⲇ, 73.125 * Ⲇ, Ⲇ * 19.5, 73.125 * Ⲇ, Ⲇ * 22.5, Ⲇ * 35.125);
		Δ.bezierCurveTo(23.5 * Ⲇ, 23.125 * Ⲇ, Ⲇ * 29.5, 21.125 * Ⲇ, Ⲇ * 36.5, Ⲇ * 20.125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ], Δⵠ[1], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(15.5 * Ⲇ, Ⲇ * 138.625);
		Δ.bezierCurveTo(120 * Ⲇ, Ⲇ * 138.625, Ⲇ * 120, Ⲇ * 138.625, Ⲇ * 224.5, 138.625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⲆΔΔⲆ], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 13.5, Ⲇ * 131.625);
		Δ.bezierCurveTo(Ⲇ * 119.5, 131.625 * Ⲇ, 119.5 * Ⲇ, 131.625 * Ⲇ, Ⲇ * 225.5, Ⲇ * 131.625);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆⲆΔⲆ, Δⵠ[3], Ⲇ * ΔⵠⲆⵠⵠ);
		ⵠΔᐃ(Δ, Ⲇ * 119.5, 140.125 * Ⲇ, 14.866068747318506 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃᐃᐃΔ], Δⵠ[5], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 106.5, 146.625 * Ⲇ);
		Δ.bezierCurveTo(116.5 * Ⲇ, Ⲇ * 137.625, Ⲇ * 118.5, Ⲇ * 136.625, Ⲇ * 123.5, 138.625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 131.5, 145.625 * Ⲇ, 133.5 * Ⲇ, Ⲇ * 148.625, 127.5 * Ⲇ, 152.625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 115.5, 158.625 * Ⲇ, Ⲇ * 111.5, 153.625 * Ⲇ, 106.5 * Ⲇ, 147.625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆᐃⲆ], Δⵠ[7], Ⲇ * Ⲇᐃⵠⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 105.5, 146.625 * Ⲇ);
		Δ.bezierCurveTo(116.5 * Ⲇ, 159.625 * Ⲇ, Ⲇ * 124.5, Ⲇ * 156.625, 132.5 * Ⲇ, Ⲇ * 146.625);
		ⵠᐃ(Δ, undefined, Δⵠ[8], Ⲇ * ⲆⵠⲆΔᐃ);
		Δ.save();
		Δ.translate(75.5 * Ⲇ, Ⲇ * 80.125);
		ᐃΔⵠ(Δ, Ⲇ * -39, -40 * Ⲇ, Ⲇ * 78, 78 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[9]);
		Δ.save();
		Δ.translate(Ⲇ * 167, Ⲇ * 80.125);
		ᐃΔⵠ(Δ, -38.5 * Ⲇ, Ⲇ * -39, 78 * Ⲇ, 78 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔⵠⵠᐃⲆ]);
		return ᐃⵠ
	}

	function ΔᐃⲆᐃⵠᐃⵠ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ, ᐃⲆ, ⵠᐃΔΔ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		if (0 == ᐃⲆ) {
			var ᐃΔΔ = Ⲇ * 270;
			var ΔⵠⲆ = 250 * Ⲇ;
			ᐃⵠ.width = ᐃΔΔ;
			ᐃⵠ.height = ΔⵠⲆ;
			Δ.beginPath();
			Δ.moveTo(Ⲇ * 140, Ⲇ * 3);
			Δ.translate(-25 * Ⲇ, -20 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 218, Ⲇ * 31, 251 * Ⲇ, 61 * Ⲇ, Ⲇ * 265, Ⲇ * 85);
			Δ.bezierCurveTo(278 * Ⲇ, Ⲇ * 108, 295 * Ⲇ, 160 * Ⲇ, 285 * Ⲇ, Ⲇ * 195);
			Δ.bezierCurveTo(271 * Ⲇ, Ⲇ * 242, 213 * Ⲇ, 268 * Ⲇ, 188 * Ⲇ, Ⲇ * 266);
			Δ.bezierCurveTo(139 * Ⲇ, 262 * Ⲇ, Ⲇ * 70, Ⲇ * 244, 47 * Ⲇ, Ⲇ * 204);
			Δ.bezierCurveTo(20 * Ⲇ, Ⲇ * 158, 35 * Ⲇ, 78 * Ⲇ, Ⲇ * 59, 56 * Ⲇ);
			Δ.bezierCurveTo(90 * Ⲇ, Ⲇ * 28, Ⲇ * 124, Ⲇ * 23, 140 * Ⲇ, 23 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ])
		} else if (1 == ᐃⲆ) {
			var ᐃΔΔ = Ⲇ * 430;
			var ΔⵠⲆ = Ⲇ * 350;
			ᐃⵠ.width = ᐃΔΔ;
			ᐃⵠ.height = ΔⵠⲆ;
			Δ.beginPath();
			Δ.moveTo(Ⲇ * 180, ⲆⲆⲆᐃⵠ * Ⲇ);
			Δ.translate(-30 * Ⲇ, Ⲇ * -60);
			Δ.bezierCurveTo(283 * Ⲇ, 60 * Ⲇ, 265 * Ⲇ, 163 * Ⲇ, Ⲇ * 335, Ⲇ * 206);
			Δ.bezierCurveTo(Ⲇ * 376, 231 * Ⲇ, 492 * Ⲇ, 299 * Ⲇ, 434 * Ⲇ, Ⲇ * 357);
			Δ.bezierCurveTo(371 * Ⲇ, 421 * Ⲇ, 289 * Ⲇ, 394 * Ⲇ, Ⲇ * 255, Ⲇ * 386);
			Δ.bezierCurveTo(Ⲇ * 218, 377 * Ⲇ, Ⲇ * 91, 359 * Ⲇ, Ⲇ * 50, Ⲇ * 272);
			Δ.bezierCurveTo(ⵠⲆᐃᐃⲆ * Ⲇ, Ⲇ * 192, Ⲇ * 107, Ⲇ * 75, Ⲇ * 178, Ⲇ * 69);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0])
		} else if (ᐃⵠΔⲆ == ᐃⲆ) {
			var ᐃΔΔ = Ⲇ * 400;
			var ΔⵠⲆ = 300 * Ⲇ;
			ᐃⵠ.width = ᐃΔΔ;
			ᐃⵠ.height = ΔⵠⲆ;
			Δ.beginPath();
			Δ.moveTo(Ⲇ * 80, Ⲇ * 52);
			Δ.translate(-40 * Ⲇ, Ⲇ * -30);
			Δ.bezierCurveTo(Ⲇ * 124, 77 * Ⲇ, 241 * Ⲇ, Ⲇ * 22, 311 * Ⲇ, Ⲇ * 65);
			Δ.bezierCurveTo(Ⲇ * 352, Ⲇ * 90, 404 * Ⲇ, 176 * Ⲇ, 346 * Ⲇ, 234 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 283, 298 * Ⲇ, 179 * Ⲇ, 299 * Ⲇ, 145 * Ⲇ, Ⲇ * 291);
			Δ.bezierCurveTo(108 * Ⲇ, Ⲇ * 282, Ⲇ * 100, 239 * Ⲇ, 63 * Ⲇ, Ⲇ * 205);
			Δ.bezierCurveTo(Ⲇ * 37, Ⲇ * 181, Ⲇ * 45, 131 * Ⲇ, Ⲇ * 80, Ⲇ * 107);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0])
		}
		return ᐃⵠ
	}

	function ΔⲆⵠΔⲆⲆⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 80 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 100;
		Δ.scale(.5, .5);
		Δ.translate(10, ΔᐃΔⵠᐃ);
		Δ.globalAlpha = .5;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 47, Ⲇ * 5);
		Δ.bezierCurveTo(19 * Ⲇ, 30 * Ⲇ, ΔΔᐃᐃⲆΔⲆ * Ⲇ, 42 * Ⲇ, Ⲇ * 10, 55 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 11, 75 * Ⲇ, Ⲇ * 27, Ⲇ * 76, Ⲇ * 36, 72 * Ⲇ);
		Δ.bezierCurveTo(52 * Ⲇ, Ⲇ * 60, 53 * Ⲇ, Ⲇ * 46, 54 * Ⲇ, Ⲇ * 31);
		Δ.bezierCurveTo(Ⲇ * 53, ΔⲆᐃΔⲆⲆΔ * Ⲇ, 50 * Ⲇ, Ⲇ * 9, 48 * Ⲇ, ⵠΔⵠⵠⲆ * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ⵠⲆᐃⲆⵠⲆⲆ * Ⲇ, Ⲇ * 70);
		Δ.bezierCurveTo(ΔⲆᐃᐃᐃ * Ⲇ, Ⲇ * 77, Ⲇ * ⵠⵠⵠΔΔ, Ⲇ * 83, Ⲇ * ΔΔΔⵠ, 87 * Ⲇ);
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[ΔᐃⲆⲆ], 10 * Ⲇ);
		Δ.translate(0, -10);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 47, ⲆⲆⲆᐃⵠ * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 19, 30 * Ⲇ, Ⲇ * ᐃⲆᐃⲆⵠ, 42 * Ⲇ, Ⲇ * 10, Ⲇ * 55);
		Δ.bezierCurveTo(ΔΔⵠⵠΔᐃⲆ * Ⲇ, Ⲇ * 75, Ⲇ * 27, 76 * Ⲇ, 36 * Ⲇ, 72 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 52, Ⲇ * 60, Ⲇ * 53, 46 * Ⲇ, 54 * Ⲇ, Ⲇ * 31);
		Δ.bezierCurveTo(53 * Ⲇ, Ⲇ * 14, 50 * Ⲇ, Ⲇ * 9, Ⲇ * 48, ⵠⲆⵠⵠⵠ * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⲆ], Δⵠ[ᐃⵠΔⲆ], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 17, Ⲇ * 70);
		Δ.bezierCurveTo(Ⲇ * 18, 77 * Ⲇ, Ⲇ * ᐃᐃⵠΔⵠ, 83 * Ⲇ, ΔᐃᐃΔ * Ⲇ, Ⲇ * 87);
		ⵠᐃ(Δ, undefined, Δⵠ[2], Ⲇ * ΔᐃⵠΔⵠ);
		Δ.globalAlpha = .5;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(17 * Ⲇ, 70 * Ⲇ);
		Δ.bezierCurveTo(33 * Ⲇ, 52 * Ⲇ, Ⲇ * 39, 33 * Ⲇ, 48 * Ⲇ, 7 * Ⲇ);
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[2], Ⲇ * ⲆⲆⲆᐃⲆ);
		return ᐃⵠ
	}

	function ᐃΔΔⲆⲆΔⵠᐃⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 400 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 400;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(96.5 * Ⲇ, 277.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 197.5, Ⲇ * 259.84375, Ⲇ * 197.5, 259.84375 * Ⲇ, 298.5 * Ⲇ, Ⲇ * 242.34375);
		Δ.bezierCurveTo(311.5 * Ⲇ, 231.34375 * Ⲇ, Ⲇ * 307.5, 168.34375 * Ⲇ, 298.5 * Ⲇ, 150.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 198, 170.34375 * Ⲇ, Ⲇ * 198, 170.34375 * Ⲇ, 97.5 * Ⲇ, Ⲇ * 190.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[2], ⵠᐃⲆΔⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(98.5 * Ⲇ, Ⲇ * 214.34375);
		Δ.bezierCurveTo(199 * Ⲇ, 196.34375 * Ⲇ, 199 * Ⲇ, 196.34375 * Ⲇ, Ⲇ * 299.5, Ⲇ * 178.34375);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[2], Ⲇⵠᐃᐃᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(98.5 * Ⲇ, 247.34375 * Ⲇ);
		Δ.bezierCurveTo(201.5 * Ⲇ, Ⲇ * 229.34375, 201.5 * Ⲇ, Ⲇ * 229.34375, Ⲇ * 304.5, 211.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[2], Ⲇ * ⲆⲆⲆⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(97.5 * Ⲇ, 189.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 97, Ⲇ * 199.84375, Ⲇ * 97, Ⲇ * 199.84375, Ⲇ * 96.5, 210.34375 * Ⲇ);
		Δ.bezierCurveTo(110.5 * Ⲇ, Ⲇ * 204.34375, Ⲇ * 110.5, 204.34375 * Ⲇ, Ⲇ * 124.5, Ⲇ * 198.34375);
		Δ.bezierCurveTo(137.5 * Ⲇ, Ⲇ * 203.84375, Ⲇ * 137.5, Ⲇ * 203.84375, 150.5 * Ⲇ, Ⲇ * 209.34375);
		Δ.bezierCurveTo(Ⲇ * 172, 197.84375 * Ⲇ, 172 * Ⲇ, 197.84375 * Ⲇ, Ⲇ * 193.5, Ⲇ * 186.34375);
		Δ.bezierCurveTo(211.5 * Ⲇ, 189.84375 * Ⲇ, 211.5 * Ⲇ, Ⲇ * 189.84375, 229.5 * Ⲇ, Ⲇ * 193.34375);
		Δ.bezierCurveTo(Ⲇ * 240.5, Ⲇ * 193.34375, 240.5 * Ⲇ, Ⲇ * 193.34375, Ⲇ * 251.5, Ⲇ * 193.34375);
		Δ.bezierCurveTo(261 * Ⲇ, Ⲇ * 182.84375, Ⲇ * 261, 182.84375 * Ⲇ, Ⲇ * 270.5, 172.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 287.5, Ⲇ * 169.34375, 287.5 * Ⲇ, Ⲇ * 169.34375, 304.5 * Ⲇ, Ⲇ * 166.34375);
		Δ.bezierCurveTo(304.5 * Ⲇ, Ⲇ * 156.34375, 300.5 * Ⲇ, Ⲇ * 145.34375, Ⲇ * 298.5, 147.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⵠ], Δⵠ[4], Ⲇ * ⵠᐃⲆΔⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 300.5, 147.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 293.5, Ⲇ * 121.34375, 278.5 * Ⲇ, 106.34375 * Ⲇ, 256.5 * Ⲇ, Ⲇ * 101.34375);
		Δ.bezierCurveTo(Ⲇ * 176.5, Ⲇ * 145.34375, Ⲇ * 176.5, 145.34375 * Ⲇ, 96.5 * Ⲇ, 189.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠΔᐃ], Δⵠ[ⵠⵠⲆⲆⵠ], Ⲇ * ᐃⲆᐃⲆⵠ);
		ⵠΔᐃ(Δ, 252.5 * Ⲇ, 129.34375 * Ⲇ, Ⲇ * 18.027756377319946);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⲆⲆ]);
		ⵠΔᐃ(Δ, 248.5 * Ⲇ, 121.34375 * Ⲇ, Ⲇ * 8.246211251235321);
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃⵠⲆ]);
		return ᐃⵠ
	}

	function ⲆΔΔⲆΔⵠⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 130;
		ᐃⵠ.height = 142 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ᐃΔⵠΔ;
		Δ.save();
		Δ.translate(Ⲇ * 65, Ⲇ * 80);
		Δ.rotate(.2);
		ΔΔΔΔ(Δ, ᐃΔⵠᐃᐃ, 60 * Ⲇ, Ⲇ * ΔⵠΔᐃΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ᐃΔⵠΔ;
		Δ.save();
		Δ.translate(Ⲇ * 65, Ⲇ * 71);
		Δ.rotate(.2);
		ΔΔΔΔ(Δ, 9, Ⲇ * 60, Ⲇ * 10);
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠ], Δⵠ[Ⲇᐃⵠⵠ], ΔΔⲆΔ);
		Δ.rotate(-.32);
		ΔΔΔΔ(Δ, ⲆΔΔΔΔ, Ⲇ * 38, 10 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], 4);
		Δ.rotate(.68);
		ΔΔΔΔ(Δ, ⵠᐃΔⲆⲆ, 20 * Ⲇ, 8 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[6], ΔⲆⵠΔᐃ);
		Δ.restore();
		return ᐃⵠ
	}

	function ᐃΔᐃΔⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 220 * Ⲇ;
		var ΔⵠⲆ = 220 * Ⲇ;
		var ΔⲆⵠ = Ⲇ * 100;
		var ⲆᐃⲆⲆ = ΔⲆⵠ / 4;
		var ᐃΔⵠᐃ = 20 * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(ᐃΔΔ / ΔⵠⲆⲆ, ΔⵠⲆ / 2);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⵠΔΔ;
		if (!Δⵠᐃⵠ) Δ.translate(Ⲇ * 0, -ⲆⲆⲆᐃⲆ * Ⲇ);
		ΔΔΔΔ(Δ, 7, ΔⲆⵠ, ⲆᐃⲆⲆ);
		Δⵠᐃⵠ ? ⵠᐃ(Δ, Δⵠ[0]) : ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⲆ]);
		Δ.globalAlpha = ⵠᐃᐃ;
		if (ᐃⲆ == 0) {
			ΔΔΔΔ(Δ, 6, ΔⲆⵠ * .65, ⲆᐃⲆⲆ * .65);
			ⵠᐃ(Δ, Δⵠ[ⵠΔΔΔ])
		} else if (ᐃⲆ == 1) {
			Δ.translate(Ⲇ * ⲆⵠΔⵠⵠ, ⲆⵠᐃΔⲆ * Ⲇ);
			ΔΔΔΔ(Δ, 6, ΔⲆⵠ * .45, .4 * ⲆᐃⲆⲆ);
			ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⲆ])
		}
		return ᐃⵠ
	}

	function ⲆⲆⵠⵠᐃΔⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 220;
		ᐃⵠ.height = Ⲇ * 180;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(Ⲇ * -90, Ⲇ * -150);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(104 * Ⲇ, Ⲇ * 237.8000030517578);
		Δ.bezierCurveTo(110 * Ⲇ, 237.8000030517578 * Ⲇ, Ⲇ * 110, Ⲇ * 237.8000030517578, Ⲇ * 116, Ⲇ * 237.8000030517578);
		Δ.bezierCurveTo(Ⲇ * 116, Ⲇ * 241.8000030517578, Ⲇ * 116, Ⲇ * 241.8000030517578, Ⲇ * 116, Ⲇ * 245.8000030517578);
		Δ.bezierCurveTo(115 * Ⲇ, Ⲇ * 245.3000030517578, Ⲇ * 115, Ⲇ * 245.3000030517578, 114 * Ⲇ, 244.8000030517578 * Ⲇ);
		Δ.bezierCurveTo(109.5 * Ⲇ, 244.8000030517578 * Ⲇ, Ⲇ * 109.5, 244.8000030517578 * Ⲇ, Ⲇ * 105, Ⲇ * 244.8000030517578);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠΔⵠ], Δⵠ[5], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 115, Ⲇ * 211.20000457763672);
		Δ.bezierCurveTo(Ⲇ * 106, 216.20000457763672 * Ⲇ, Ⲇ * 101, 234.20000457763672 * Ⲇ, Ⲇ * 102, Ⲇ * 241.20000457763672);
		Δ.bezierCurveTo(102 * Ⲇ, Ⲇ * 260.2000045776367, Ⲇ * 115, Ⲇ * 269.2000045776367, Ⲇ * 115, Ⲇ * 269.2000045776367);
		Δ.bezierCurveTo(Ⲇ * 116, Ⲇ * 265.2000045776367, Ⲇ * 115.5, Ⲇ * 265.2000045776367, 116 * Ⲇ, 261.2000045776367 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 112, 264 * Ⲇ, 108 * Ⲇ, Ⲇ * 254, 106 * Ⲇ, Ⲇ * 242);
		Δ.bezierCurveTo(105 * Ⲇ, 232 * Ⲇ, Ⲇ * 110, 222 * Ⲇ, Ⲇ * 115, Ⲇ * 218);
		Δ.bezierCurveTo(Ⲇ * 116, Ⲇ * 216.75, Ⲇ * 115.5, 217.375 * Ⲇ, 116 * Ⲇ, 216.75 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[5], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 120, 207 * Ⲇ);
		Δ.bezierCurveTo(115 * Ⲇ, 206 * Ⲇ, Ⲇ * 114, Ⲇ * 209, 114 * Ⲇ, 211 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 114, 268 * Ⲇ, 114 * Ⲇ, 241 * Ⲇ, Ⲇ * 114, 271 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 115, Ⲇ * 276, Ⲇ * 118, 276 * Ⲇ, 120 * Ⲇ, Ⲇ * 276);
		Δ.bezierCurveTo(Ⲇ * 122, Ⲇ * 273, Ⲇ * 120.5, 274.5 * Ⲇ, 121 * Ⲇ, Ⲇ * 273);
		Δ.bezierCurveTo(121 * Ⲇ, Ⲇ * 241, Ⲇ * 121, Ⲇ * 241, Ⲇ * 121, 209 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[4], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(284 * Ⲇ, Ⲇ * 238);
		Δ.bezierCurveTo(Ⲇ * 289.5, Ⲇ * 238, Ⲇ * 289.5, 238 * Ⲇ, Ⲇ * 295, 238 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 295, Ⲇ * 241.5, 295 * Ⲇ, Ⲇ * 241.5, Ⲇ * 295, 245 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 289.5, Ⲇ * 245, 289.5 * Ⲇ, 245 * Ⲇ, 284 * Ⲇ, 245 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⵠⲆⵠᐃ], Δⵠ[4], Ⲇ * Ⲇᐃⵠⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(283 * Ⲇ, 211 * Ⲇ);
		Δ.bezierCurveTo(293 * Ⲇ, 216 * Ⲇ, Ⲇ * 297, 231 * Ⲇ, Ⲇ * 297, Ⲇ * 241);
		Δ.bezierCurveTo(Ⲇ * 298, 254 * Ⲇ, Ⲇ * 290, Ⲇ * 265, Ⲇ * 284, Ⲇ * 269);
		Δ.bezierCurveTo(283 * Ⲇ, 266 * Ⲇ, 283.5 * Ⲇ, Ⲇ * 266, Ⲇ * 283, Ⲇ * 263);
		Δ.bezierCurveTo(Ⲇ * 290, Ⲇ * 260, 292 * Ⲇ, 251 * Ⲇ, 293 * Ⲇ, Ⲇ * 242);
		Δ.bezierCurveTo(292 * Ⲇ, Ⲇ * 223, 289 * Ⲇ, Ⲇ * 224, 284 * Ⲇ, 218 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ᐃΔΔΔⲆ], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 280, 206 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 284, 206 * Ⲇ, Ⲇ * 285, Ⲇ * 208, 285 * Ⲇ, 211 * Ⲇ);
		Δ.bezierCurveTo(285 * Ⲇ, Ⲇ * 241.5, Ⲇ * 285, 241.5 * Ⲇ, 285 * Ⲇ, Ⲇ * 272);
		Δ.bezierCurveTo(Ⲇ * 284, Ⲇ * 275, Ⲇ * 284, Ⲇ * 275, Ⲇ * 280, 275 * Ⲇ);
		Δ.bezierCurveTo(279 * Ⲇ, 273.5 * Ⲇ, 279 * Ⲇ, Ⲇ * 273.5, Ⲇ * 278, Ⲇ * 272);
		Δ.bezierCurveTo(Ⲇ * 278, Ⲇ * 240.5, Ⲇ * 278, 240.5 * Ⲇ, Ⲇ * 278, Ⲇ * 209);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔΔⵠ], Δⵠ[ᐃΔΔΔⲆ], Ⲇ * ⲆᐃᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(138 * Ⲇ, 298.40000915527344 * Ⲇ);
		Δ.bezierCurveTo(141 * Ⲇ, Ⲇ * 311.40000915527344, Ⲇ * 151, Ⲇ * 314.40000915527344, 162 * Ⲇ, 316.40000915527344 * Ⲇ);
		Δ.bezierCurveTo(224 * Ⲇ, 316.40000915527344 * Ⲇ, Ⲇ * 200, Ⲇ * 315.90000915527344, 238 * Ⲇ, Ⲇ * 315.40000915527344);
		Δ.bezierCurveTo(254 * Ⲇ, Ⲇ * 316.40000915527344, 261 * Ⲇ, Ⲇ * 306.40000915527344, Ⲇ * 264, Ⲇ * 298.40000915527344);
		Δ.bezierCurveTo(Ⲇ * 255, Ⲇ * 304.40000915527344, Ⲇ * 250, Ⲇ * 306.40000915527344, Ⲇ * 244, Ⲇ * 306.40000915527344);
		Δ.bezierCurveTo(Ⲇ * 201, Ⲇ * 306.90000915527344, Ⲇ * 201, Ⲇ * 306.90000915527344, 158 * Ⲇ, Ⲇ * 307.40000915527344);
		Δ.bezierCurveTo(150 * Ⲇ, 306.40000915527344 * Ⲇ, 148 * Ⲇ, 306.40000915527344 * Ⲇ, 139 * Ⲇ, 300.40000915527344 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ᐃᐃᐃᐃΔ], Ⲇ * ⲆΔⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 161, 177.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(130 * Ⲇ, 175.5999984741211 * Ⲇ, Ⲇ * 123, Ⲇ * 190.5999984741211, Ⲇ * 122, Ⲇ * 205.5999984741211);
		Δ.bezierCurveTo(Ⲇ * 121, Ⲇ * 277.5999984741211, Ⲇ * 122, Ⲇ * 242.5999984741211, Ⲇ * 122, 279.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(128 * Ⲇ, Ⲇ * 297.5999984741211, 137 * Ⲇ, 299.5999984741211 * Ⲇ, Ⲇ * 143, Ⲇ * 300.5999984741211);
		Δ.bezierCurveTo(163 * Ⲇ, Ⲇ * 301.0999984741211, 163 * Ⲇ, Ⲇ * 301.0999984741211, 183 * Ⲇ, 301.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(150 * Ⲇ, 300.5999984741211 * Ⲇ, Ⲇ * 135, Ⲇ * 290.5999984741211, Ⲇ * 134, Ⲇ * 267.5999984741211);
		Δ.bezierCurveTo(133 * Ⲇ, 245.5999984741211 * Ⲇ, Ⲇ * 146, 235.5999984741211 * Ⲇ, 164 * Ⲇ, Ⲇ * 235.5999984741211);
		Δ.bezierCurveTo(206 * Ⲇ, 236.0999984741211 * Ⲇ, Ⲇ * 206, 236.0999984741211 * Ⲇ, 248 * Ⲇ, 236.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(266 * Ⲇ, Ⲇ * 243.5999984741211, 268 * Ⲇ, Ⲇ * 259.5999984741211, Ⲇ * 267, 266.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 266, 288.5999984741211 * Ⲇ, Ⲇ * 251, 294.5999984741211 * Ⲇ, 244 * Ⲇ, Ⲇ * 297.5999984741211);
		Δ.bezierCurveTo(Ⲇ * 228.5, Ⲇ * 299.5999984741211, Ⲇ * 228.5, Ⲇ * 299.5999984741211, Ⲇ * 213, Ⲇ * 301.5999984741211);
		Δ.bezierCurveTo(Ⲇ * 236, Ⲇ * 301.0999984741211, 236 * Ⲇ, 301.0999984741211 * Ⲇ, 259 * Ⲇ, Ⲇ * 300.5999984741211);
		Δ.bezierCurveTo(Ⲇ * 272, 295.5999984741211 * Ⲇ, 277 * Ⲇ, Ⲇ * 288.5999984741211, Ⲇ * 278, 271.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(277.5 * Ⲇ, Ⲇ * 236.5999984741211, 277.5 * Ⲇ, 236.5999984741211 * Ⲇ, 277 * Ⲇ, 201.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(276 * Ⲇ, 186.5999984741211 * Ⲇ, 265 * Ⲇ, Ⲇ * 178.5999984741211, Ⲇ * 254, Ⲇ * 177.5999984741211);
		Δ.bezierCurveTo(Ⲇ * 247.5, 177.5999984741211 * Ⲇ, 247.5 * Ⲇ, 177.5999984741211 * Ⲇ, Ⲇ * 241, Ⲇ * 177.5999984741211);
		Δ.bezierCurveTo(Ⲇ * ⵠᐃΔⲆΔ, Ⲇ * 202.5999984741211, Ⲇ * 214, 217.5999984741211 * Ⲇ, 201 * Ⲇ, Ⲇ * 215.5999984741211);
		Δ.bezierCurveTo(170 * Ⲇ, Ⲇ * 215.5999984741211, Ⲇ * 152, Ⲇ * 197.5999984741211, Ⲇ * 161, Ⲇ * 178.5999984741211);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠᐃⲆ], Δⵠ[4], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 162, 175.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 153, 176.0999984741211 * Ⲇ, 153 * Ⲇ, Ⲇ * 176.0999984741211, Ⲇ * 144, 176.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(125 * Ⲇ, Ⲇ * 178.5999984741211, 121 * Ⲇ, 196.5999984741211 * Ⲇ, 121 * Ⲇ, 207.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(121 * Ⲇ, 243.20000076293945 * Ⲇ, Ⲇ * 121, Ⲇ * 243.20000076293945, Ⲇ * 121, 278.8000030517578 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 126, Ⲇ * 298.8000030517578, Ⲇ * 137, 300.8000030517578 * Ⲇ, 146 * Ⲇ, Ⲇ * 302.8000030517578);
		Δ.bezierCurveTo(200.5 * Ⲇ, Ⲇ * 302.8000030517578, 200.5 * Ⲇ, Ⲇ * 302.8000030517578, 255 * Ⲇ, Ⲇ * 302.8000030517578);
		Δ.bezierCurveTo(271 * Ⲇ, 301.8000030517578 * Ⲇ, 279 * Ⲇ, 288.8000030517578 * Ⲇ, 279 * Ⲇ, Ⲇ * 273.8000030517578);
		Δ.bezierCurveTo(Ⲇ * 279, Ⲇ * 236.8000030517578, 279 * Ⲇ, Ⲇ * 236.8000030517578, Ⲇ * 279, 199.8000030517578 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 274, 178.8000030517578 * Ⲇ, 263 * Ⲇ, 177.8000030517578 * Ⲇ, Ⲇ * ΔΔᐃⲆⲆ, Ⲇ * 175.8000030517578);
		Δ.bezierCurveTo(Ⲇ * 248, 175.8000030517578 * Ⲇ, 248 * Ⲇ, 175.8000030517578 * Ⲇ, Ⲇ * 241, Ⲇ * 175.8000030517578);
		Δ.bezierCurveTo(240 * Ⲇ, 175.8000030517578 * Ⲇ, Ⲇ * 240, Ⲇ * 175.8000030517578, 239 * Ⲇ, Ⲇ * 175.8000030517578);
		Δ.bezierCurveTo(Ⲇ * 254, Ⲇ * 200.8000030517578, 222 * Ⲇ, 211.8000030517578 * Ⲇ, 202 * Ⲇ, Ⲇ * 212.8000030517578);
		Δ.bezierCurveTo(Ⲇ * 168, Ⲇ * 213.8000030517578, Ⲇ * 151, 190.8000030517578 * Ⲇ, Ⲇ * 163, 176.8000030517578 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[4], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(198 * Ⲇ, 161.4000015258789 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 198, 186.9000015258789 * Ⲇ, Ⲇ * 198, Ⲇ * 186.9000015258789, 198 * Ⲇ, 212.4000015258789 * Ⲇ);
		Δ.bezierCurveTo(201 * Ⲇ, 212.4000015258789 * Ⲇ, 201 * Ⲇ, Ⲇ * 212.4000015258789, Ⲇ * 204, 212.4000015258789 * Ⲇ);
		Δ.bezierCurveTo(204 * Ⲇ, Ⲇ * 186.9000015258789, Ⲇ * 204, 186.9000015258789 * Ⲇ, Ⲇ * 204, 161.4000015258789 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ΔⲆⲆⲆ], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(161 * Ⲇ, Ⲇ * 194);
		Δ.bezierCurveTo(Ⲇ * 188, Ⲇ * 169, Ⲇ * 231, Ⲇ * 179, 241 * Ⲇ, 194 * Ⲇ);
		Δ.bezierCurveTo(239.5 * Ⲇ, Ⲇ * 196, Ⲇ * 239.5, Ⲇ * 196, Ⲇ * 238, 198 * Ⲇ);
		Δ.bezierCurveTo(221 * Ⲇ, Ⲇ * 179, 182 * Ⲇ, 182 * Ⲇ, 165 * Ⲇ, 198 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⲆⲆ], Δⵠ[ΔⲆⵠΔⲆ], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 157, Ⲇ * 188.80000019073486);
		Δ.bezierCurveTo(162 * Ⲇ, 150.80000019073486 * Ⲇ, 241 * Ⲇ, Ⲇ * 150.80000019073486, Ⲇ * 245, 188.80000019073486 * Ⲇ);
		Δ.bezierCurveTo(242 * Ⲇ, 224.80000019073486 * Ⲇ, 162 * Ⲇ, Ⲇ * 228.80000019073486, 157 * Ⲇ, Ⲇ * 188.80000019073486);
		Δ.bezierCurveTo(159 * Ⲇ, 188.80000019073486 * Ⲇ, 159 * Ⲇ, Ⲇ * 188.80000019073486, 161 * Ⲇ, Ⲇ * 188.80000019073486);
		Δ.bezierCurveTo(Ⲇ * 168, 216.80000019073486 * Ⲇ, Ⲇ * 231, 218.80000019073486 * Ⲇ, Ⲇ * 241, 188.80000019073486 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 236, Ⲇ * 156.80000019073486, Ⲇ * 169, Ⲇ * 152.80000019073486, 161 * Ⲇ, Ⲇ * 188.80000019073486);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ᐃᐃΔⵠⲆ], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(156 * Ⲇ, 188 * Ⲇ);
		Δ.bezierCurveTo(160 * Ⲇ, Ⲇ * 164, 183 * Ⲇ, 159 * Ⲇ, Ⲇ * 201, Ⲇ * 158);
		Δ.bezierCurveTo(232 * Ⲇ, 159 * Ⲇ, 244 * Ⲇ, 174 * Ⲇ, Ⲇ * 246, 188 * Ⲇ);
		Δ.bezierCurveTo(245 * Ⲇ, Ⲇ * 212, 213 * Ⲇ, Ⲇ * 219, 201 * Ⲇ, 218 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 181, Ⲇ * 221, Ⲇ * 158, 207 * Ⲇ, 156 * Ⲇ, Ⲇ * 190);
		Δ.closePath();
		ⵠᐃ(Δ, ΔΔⲆⲆⲆ, Δⵠ[ᐃⵠⵠⲆ], Ⲇ * ᐃⲆΔⵠΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 162, 189 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 166, Ⲇ * 170, Ⲇ * 185, Ⲇ * 165, 201 * Ⲇ, Ⲇ * 164);
		Δ.bezierCurveTo(227 * Ⲇ, 165 * Ⲇ, Ⲇ * 240, Ⲇ * 178, 239 * Ⲇ, 188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 239, Ⲇ * 204, Ⲇ * 210, Ⲇ * 210, 201 * Ⲇ, Ⲇ * 210);
		Δ.bezierCurveTo(Ⲇ * 182, Ⲇ * 211, 166 * Ⲇ, Ⲇ * 200, Ⲇ * 162, Ⲇ * 190);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[4], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(131 * Ⲇ, 262 * Ⲇ);
		Δ.bezierCurveTo(136 * Ⲇ, Ⲇ * 241, 144 * Ⲇ, 236 * Ⲇ, Ⲇ * 158, 233 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 200.5, 233 * Ⲇ, Ⲇ * 229, 232 * Ⲇ, 243 * Ⲇ, 233 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 259, Ⲇ * 235, 267 * Ⲇ, 248 * Ⲇ, 269 * Ⲇ, Ⲇ * 260);
		Δ.bezierCurveTo(269 * Ⲇ, 266.5 * Ⲇ, 269 * Ⲇ, 266.5 * Ⲇ, 269 * Ⲇ, 273 * Ⲇ);
		Δ.bezierCurveTo(265 * Ⲇ, Ⲇ * 290, 251 * Ⲇ, 297 * Ⲇ, Ⲇ * 242, 298 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 202, Ⲇ * 298, 202 * Ⲇ, Ⲇ * 298, 162 * Ⲇ, Ⲇ * 298);
		Δ.bezierCurveTo(Ⲇ * 148, 298 * Ⲇ, 136 * Ⲇ, 289 * Ⲇ, Ⲇ * 132, 273 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 131.5, 268 * Ⲇ, Ⲇ * 131.5, 268 * Ⲇ, 131 * Ⲇ, Ⲇ * 263);
		Δ.bezierCurveTo(135 * Ⲇ, Ⲇ * 263, Ⲇ * 135, 263 * Ⲇ, 139 * Ⲇ, Ⲇ * 263);
		Δ.bezierCurveTo(139 * Ⲇ, Ⲇ * 281, Ⲇ * 151, 287 * Ⲇ, Ⲇ * 160, 290 * Ⲇ);
		Δ.bezierCurveTo(200.5 * Ⲇ, 290 * Ⲇ, Ⲇ * 200.5, Ⲇ * 290, 241 * Ⲇ, 290 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 252, 290 * Ⲇ, 257 * Ⲇ, 281 * Ⲇ, 262 * Ⲇ, Ⲇ * 271);
		Δ.bezierCurveTo(261.5 * Ⲇ, 267 * Ⲇ, 261.5 * Ⲇ, Ⲇ * 267, 261 * Ⲇ, 263 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 260, 249 * Ⲇ, 251 * Ⲇ, 242 * Ⲇ, 241 * Ⲇ, 241 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 240.5, Ⲇ * 240.5, Ⲇ * 240.5, 240.5 * Ⲇ, Ⲇ * 240, 240 * Ⲇ);
		Δ.bezierCurveTo(200 * Ⲇ, Ⲇ * 240, 200 * Ⲇ, 240 * Ⲇ, 160 * Ⲇ, Ⲇ * 240);
		Δ.bezierCurveTo(145 * Ⲇ, 244 * Ⲇ, Ⲇ * 142, 250 * Ⲇ, 139 * Ⲇ, Ⲇ * 264);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⲆ], Δⵠ[4], ᐃⵠΔⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 130, Ⲇ * 264);
		Δ.bezierCurveTo(Ⲇ * 132, 244 * Ⲇ, Ⲇ * 144, Ⲇ * 235, 157 * Ⲇ, 232 * Ⲇ);
		Δ.bezierCurveTo(245 * Ⲇ, Ⲇ * 232, Ⲇ * 201, Ⲇ * 232, 245 * Ⲇ, 232 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 264, Ⲇ * 235, Ⲇ * 269, 251 * Ⲇ, Ⲇ * 270, 264 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 272, Ⲇ * 291, Ⲇ * 248, 299 * Ⲇ, Ⲇ * 242, Ⲇ * 299);
		Δ.bezierCurveTo(200 * Ⲇ, Ⲇ * 299, Ⲇ * 200, 299 * Ⲇ, Ⲇ * 158, Ⲇ * 299);
		Δ.bezierCurveTo(139 * Ⲇ, 298 * Ⲇ, Ⲇ * 130, 276 * Ⲇ, 130 * Ⲇ, Ⲇ * 265);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[4], Ⲇ * ⲆⲆⲆⵠΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(140 * Ⲇ, Ⲇ * 265.33333587646484);
		Δ.bezierCurveTo(141 * Ⲇ, 250.33333587646484 * Ⲇ, 148 * Ⲇ, Ⲇ * 244.33333587646484, 160 * Ⲇ, Ⲇ * 241.33333587646484);
		Δ.bezierCurveTo(200 * Ⲇ, Ⲇ * 241.33333587646484, 200 * Ⲇ, Ⲇ * 241.33333587646484, Ⲇ * 240, Ⲇ * 241.33333587646484);
		Δ.bezierCurveTo(Ⲇ * 256, Ⲇ * 243.33333587646484, Ⲇ * 260, 255.33333587646484 * Ⲇ, 260 * Ⲇ, 265.33333587646484 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 261, 281.33333587646484 * Ⲇ, Ⲇ * 247, Ⲇ * 289.33333587646484, Ⲇ * 240, Ⲇ * 289.33333587646484);
		Δ.bezierCurveTo(Ⲇ * 161, Ⲇ * 289.33333587646484, 200.5 * Ⲇ, Ⲇ * 289.33333587646484, 161 * Ⲇ, Ⲇ * 289.33333587646484);
		Δ.bezierCurveTo(Ⲇ * 149, Ⲇ * 288.33333587646484, Ⲇ * 142, 278.33333587646484 * Ⲇ, 140 * Ⲇ, Ⲇ * 266.33333587646484);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ᐃΔΔΔⲆ], 6 * Ⲇ);
		Δ.globalAlpha = .5;
		Δ.scale(ΔⲆⵠⲆ, ΔⲆⵠⲆ);
		Δ.translate(Ⲇ * 105, 155 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 59.27557373046875, Ⲇ * 20.406280517578125);
		Δ.bezierCurveTo(Ⲇ * 74.27557373046875, Ⲇ * 5.406280517578125, Ⲇ * 90.27557373046875, 6.406280517578125 * Ⲇ, 99.27557373046875 * Ⲇ, Ⲇ * 5.406280517578125);
		Δ.bezierCurveTo(120.27557373046875 * Ⲇ, 5.406280517578125 * Ⲇ, Ⲇ * 126.27557373046875, Ⲇ * 10.406280517578125, Ⲇ * 136.27557373046875, Ⲇ * 20.406280517578125);
		Δ.bezierCurveTo(157.77557373046875 * Ⲇ, Ⲇ * 37.906280517578125, Ⲇ * 157.77557373046875, Ⲇ * 37.906280517578125, 179.27557373046875 * Ⲇ, Ⲇ * 55.406280517578125);
		Δ.bezierCurveTo(Ⲇ * 190.27557373046875, 63.406280517578125 * Ⲇ, Ⲇ * 192.27557373046875, Ⲇ * 77.40628051757812, Ⲇ * 189.27557373046875, 91.40628051757812 * Ⲇ);
		Δ.bezierCurveTo(183.27557373046875 * Ⲇ, 108.40628051757812 * Ⲇ, 176.27557373046875 * Ⲇ, Ⲇ * 110.40628051757812, 169.27557373046875 * Ⲇ, Ⲇ * 118.40628051757812);
		Δ.bezierCurveTo(152.27557373046875 * Ⲇ, 133.40628051757812 * Ⲇ, Ⲇ * 152.27557373046875, 133.40628051757812 * Ⲇ, Ⲇ * 135.27557373046875, 148.40628051757812 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 87.27557373046875, 143.40628051757812 * Ⲇ, 87.27557373046875 * Ⲇ, Ⲇ * 143.40628051757812, Ⲇ * 39.27557373046875, 138.40628051757812 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 26.77557373046875, 123.40628051757812 * Ⲇ, 26.77557373046875 * Ⲇ, Ⲇ * 123.40628051757812, 14.27557373046875 * Ⲇ, Ⲇ * 108.40628051757812);
		Δ.bezierCurveTo(Ⲇ * 2.27557373046875, 95.40628051757812 * Ⲇ, Ⲇ * 2.27557373046875, 92.40628051757812 * Ⲇ, Ⲇ * 3.27557373046875, Ⲇ * 83.40628051757812);
		Δ.bezierCurveTo(4.27557373046875 * Ⲇ, 63.406280517578125 * Ⲇ, 12.27557373046875 * Ⲇ, Ⲇ * 60.406280517578125, 24.27557373046875 * Ⲇ, Ⲇ * 40.406280517578125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⵠ], Δⵠ[ⲆΔⲆᐃᐃ], 4 * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(-110 * Ⲇ, -155 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(104 * Ⲇ, Ⲇ * 237.8000030517578);
		Δ.bezierCurveTo(Ⲇ * 110, Ⲇ * 237.8000030517578, 110 * Ⲇ, 237.8000030517578 * Ⲇ, Ⲇ * 116, 237.8000030517578 * Ⲇ);
		Δ.bezierCurveTo(116 * Ⲇ, 241.8000030517578 * Ⲇ, 116 * Ⲇ, Ⲇ * 241.8000030517578, Ⲇ * 116, Ⲇ * 245.8000030517578);
		Δ.bezierCurveTo(115 * Ⲇ, 245.3000030517578 * Ⲇ, 115 * Ⲇ, Ⲇ * 245.3000030517578, Ⲇ * 114, 244.8000030517578 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 109.5, 244.8000030517578 * Ⲇ, 109.5 * Ⲇ, Ⲇ * 244.8000030517578, 105 * Ⲇ, Ⲇ * 244.8000030517578);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃⵠᐃᐃ], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 115, 211.20000457763672 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 106, Ⲇ * 216.20000457763672, Ⲇ * 101, Ⲇ * 234.20000457763672, 102 * Ⲇ, Ⲇ * 241.20000457763672);
		Δ.bezierCurveTo(102 * Ⲇ, Ⲇ * 260.2000045776367, Ⲇ * 115, 269.2000045776367 * Ⲇ, Ⲇ * 115, Ⲇ * 269.2000045776367);
		Δ.bezierCurveTo(116 * Ⲇ, Ⲇ * 265.2000045776367, 115.5 * Ⲇ, Ⲇ * 265.2000045776367, Ⲇ * 116, 261.2000045776367 * Ⲇ);
		Δ.bezierCurveTo(112 * Ⲇ, 264 * Ⲇ, 108 * Ⲇ, Ⲇ * 254, Ⲇ * 106, Ⲇ * 242);
		Δ.bezierCurveTo(Ⲇ * 105, Ⲇ * 232, 110 * Ⲇ, Ⲇ * 222, 115 * Ⲇ, 218 * Ⲇ);
		Δ.bezierCurveTo(116 * Ⲇ, Ⲇ * 216.75, Ⲇ * 115.5, 217.375 * Ⲇ, 116 * Ⲇ, 216.75 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⲆⲆⵠ], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 120, Ⲇ * 207);
		Δ.bezierCurveTo(115 * Ⲇ, 206 * Ⲇ, 114 * Ⲇ, Ⲇ * 209, Ⲇ * 114, 211 * Ⲇ);
		Δ.bezierCurveTo(114 * Ⲇ, 268 * Ⲇ, 114 * Ⲇ, Ⲇ * 241, 114 * Ⲇ, 271 * Ⲇ);
		Δ.bezierCurveTo(115 * Ⲇ, 276 * Ⲇ, Ⲇ * 118, 276 * Ⲇ, Ⲇ * 120, 276 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 122, 273 * Ⲇ, Ⲇ * 120.5, 274.5 * Ⲇ, 121 * Ⲇ, Ⲇ * 273);
		Δ.bezierCurveTo(Ⲇ * 121, 241 * Ⲇ, 121 * Ⲇ, Ⲇ * 241, Ⲇ * 121, 209 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⲆⵠⲆ], Ⲇ * ΔⲆⵠΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(284 * Ⲇ, Ⲇ * 238);
		Δ.bezierCurveTo(Ⲇ * 289.5, Ⲇ * 238, 289.5 * Ⲇ, Ⲇ * 238, Ⲇ * 295, Ⲇ * 238);
		Δ.bezierCurveTo(Ⲇ * 295, Ⲇ * 241.5, 295 * Ⲇ, Ⲇ * 241.5, 295 * Ⲇ, Ⲇ * 245);
		Δ.bezierCurveTo(289.5 * Ⲇ, 245 * Ⲇ, Ⲇ * 289.5, 245 * Ⲇ, Ⲇ * 284, 245 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], ⲆᐃᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 283, Ⲇ * 211);
		Δ.bezierCurveTo(293 * Ⲇ, 216 * Ⲇ, 297 * Ⲇ, 231 * Ⲇ, 297 * Ⲇ, Ⲇ * 241);
		Δ.bezierCurveTo(Ⲇ * 298, Ⲇ * 254, 290 * Ⲇ, 265 * Ⲇ, 284 * Ⲇ, Ⲇ * 269);
		Δ.bezierCurveTo(283 * Ⲇ, Ⲇ * 266, 283.5 * Ⲇ, 266 * Ⲇ, 283 * Ⲇ, 263 * Ⲇ);
		Δ.bezierCurveTo(290 * Ⲇ, Ⲇ * 260, Ⲇ * 292, Ⲇ * 251, Ⲇ * 293, Ⲇ * 242);
		Δ.bezierCurveTo(292 * Ⲇ, Ⲇ * 223, 289 * Ⲇ, 224 * Ⲇ, 284 * Ⲇ, 218 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ], Δⵠ[1], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(280 * Ⲇ, Ⲇ * 206);
		Δ.bezierCurveTo(284 * Ⲇ, Ⲇ * 206, 285 * Ⲇ, 208 * Ⲇ, Ⲇ * 285, 211 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 285, 241.5 * Ⲇ, 285 * Ⲇ, Ⲇ * 241.5, 285 * Ⲇ, 272 * Ⲇ);
		Δ.bezierCurveTo(284 * Ⲇ, Ⲇ * 275, 284 * Ⲇ, Ⲇ * 275, Ⲇ * 280, 275 * Ⲇ);
		Δ.bezierCurveTo(279 * Ⲇ, 273.5 * Ⲇ, Ⲇ * 279, Ⲇ * 273.5, Ⲇ * 278, Ⲇ * 272);
		Δ.bezierCurveTo(278 * Ⲇ, 240.5 * Ⲇ, Ⲇ * 278, 240.5 * Ⲇ, 278 * Ⲇ, Ⲇ * 209);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ], Δⵠ[ΔΔⵠ], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 138, Ⲇ * 298.40000915527344);
		Δ.bezierCurveTo(141 * Ⲇ, Ⲇ * 311.40000915527344, 151 * Ⲇ, Ⲇ * 314.40000915527344, 162 * Ⲇ, Ⲇ * 316.40000915527344);
		Δ.bezierCurveTo(Ⲇ * 224, Ⲇ * 316.40000915527344, 200 * Ⲇ, Ⲇ * 315.90000915527344, 238 * Ⲇ, 315.40000915527344 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 254, 316.40000915527344 * Ⲇ, 261 * Ⲇ, Ⲇ * 306.40000915527344, 264 * Ⲇ, Ⲇ * 298.40000915527344);
		Δ.bezierCurveTo(ⲆΔⲆⵠⲆ * Ⲇ, Ⲇ * 304.40000915527344, 250 * Ⲇ, 306.40000915527344 * Ⲇ, 244 * Ⲇ, 306.40000915527344 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 201, 306.90000915527344 * Ⲇ, Ⲇ * 201, Ⲇ * 306.90000915527344, 158 * Ⲇ, Ⲇ * 307.40000915527344);
		Δ.bezierCurveTo(Ⲇ * 150, Ⲇ * 306.40000915527344, Ⲇ * 148, 306.40000915527344 * Ⲇ, 139 * Ⲇ, Ⲇ * 300.40000915527344);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃⲆⲆ], ⲆᐃᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 161, 177.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 130, Ⲇ * 175.5999984741211, Ⲇ * 123, Ⲇ * 190.5999984741211, Ⲇ * 122, 205.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(121 * Ⲇ, 277.5999984741211 * Ⲇ, Ⲇ * 122, Ⲇ * 242.5999984741211, 122 * Ⲇ, Ⲇ * 279.5999984741211);
		Δ.bezierCurveTo(Ⲇ * 128, 297.5999984741211 * Ⲇ, 137 * Ⲇ, Ⲇ * 299.5999984741211, 143 * Ⲇ, 300.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(163 * Ⲇ, Ⲇ * 301.0999984741211, 163 * Ⲇ, 301.0999984741211 * Ⲇ, 183 * Ⲇ, 301.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(150 * Ⲇ, 300.5999984741211 * Ⲇ, Ⲇ * 135, Ⲇ * 290.5999984741211, Ⲇ * 134, Ⲇ * 267.5999984741211);
		Δ.bezierCurveTo(133 * Ⲇ, Ⲇ * 245.5999984741211, 146 * Ⲇ, 235.5999984741211 * Ⲇ, 164 * Ⲇ, 235.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(206 * Ⲇ, Ⲇ * 236.0999984741211, Ⲇ * 206, 236.0999984741211 * Ⲇ, 248 * Ⲇ, Ⲇ * 236.5999984741211);
		Δ.bezierCurveTo(266 * Ⲇ, Ⲇ * 243.5999984741211, Ⲇ * 268, 259.5999984741211 * Ⲇ, 267 * Ⲇ, Ⲇ * 266.5999984741211);
		Δ.bezierCurveTo(Ⲇ * 266, Ⲇ * 288.5999984741211, Ⲇ * 251, Ⲇ * 294.5999984741211, Ⲇ * 244, 297.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(228.5 * Ⲇ, 299.5999984741211 * Ⲇ, 228.5 * Ⲇ, 299.5999984741211 * Ⲇ, 213 * Ⲇ, 301.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(236 * Ⲇ, Ⲇ * 301.0999984741211, 236 * Ⲇ, Ⲇ * 301.0999984741211, 259 * Ⲇ, 300.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(272 * Ⲇ, 295.5999984741211 * Ⲇ, 277 * Ⲇ, 288.5999984741211 * Ⲇ, Ⲇ * 278, 271.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 277.5, Ⲇ * 236.5999984741211, 277.5 * Ⲇ, 236.5999984741211 * Ⲇ, 277 * Ⲇ, Ⲇ * 201.5999984741211);
		Δ.bezierCurveTo(276 * Ⲇ, 186.5999984741211 * Ⲇ, 265 * Ⲇ, 178.5999984741211 * Ⲇ, Ⲇ * 254, Ⲇ * 177.5999984741211);
		Δ.bezierCurveTo(247.5 * Ⲇ, 177.5999984741211 * Ⲇ, Ⲇ * 247.5, 177.5999984741211 * Ⲇ, 241 * Ⲇ, Ⲇ * 177.5999984741211);
		Δ.bezierCurveTo(ⵠⵠⵠⲆΔⵠᐃ * Ⲇ, 202.5999984741211 * Ⲇ, 214 * Ⲇ, 217.5999984741211 * Ⲇ, Ⲇ * 201, Ⲇ * 215.5999984741211);
		Δ.bezierCurveTo(Ⲇ * 170, 215.5999984741211 * Ⲇ, 152 * Ⲇ, Ⲇ * 197.5999984741211, 161 * Ⲇ, Ⲇ * 178.5999984741211);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⵠ], Δⵠ[ᐃᐃΔⵠ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 162, 175.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 153, Ⲇ * 176.0999984741211, 153 * Ⲇ, 176.0999984741211 * Ⲇ, Ⲇ * 144, 176.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(125 * Ⲇ, Ⲇ * 178.5999984741211, 121 * Ⲇ, 196.5999984741211 * Ⲇ, Ⲇ * 121, 207.5999984741211 * Ⲇ);
		Δ.bezierCurveTo(121 * Ⲇ, Ⲇ * 243.20000076293945, Ⲇ * 121, Ⲇ * 243.20000076293945, 121 * Ⲇ, 278.8000030517578 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 126, 298.8000030517578 * Ⲇ, Ⲇ * 137, 300.8000030517578 * Ⲇ, 146 * Ⲇ, Ⲇ * 302.8000030517578);
		Δ.bezierCurveTo(200.5 * Ⲇ, Ⲇ * 302.8000030517578, Ⲇ * 200.5, 302.8000030517578 * Ⲇ, 255 * Ⲇ, Ⲇ * 302.8000030517578);
		Δ.bezierCurveTo(Ⲇ * 271, 301.8000030517578 * Ⲇ, 279 * Ⲇ, Ⲇ * 288.8000030517578, Ⲇ * 279, Ⲇ * 273.8000030517578);
		Δ.bezierCurveTo(Ⲇ * 279, 236.8000030517578 * Ⲇ, Ⲇ * 279, Ⲇ * 236.8000030517578, 279 * Ⲇ, Ⲇ * 199.8000030517578);
		Δ.bezierCurveTo(Ⲇ * 274, 178.8000030517578 * Ⲇ, 263 * Ⲇ, Ⲇ * 177.8000030517578, Ⲇ * ΔᐃᐃΔΔᐃⵠ, Ⲇ * 175.8000030517578);
		Δ.bezierCurveTo(Ⲇ * 248, 175.8000030517578 * Ⲇ, Ⲇ * 248, 175.8000030517578 * Ⲇ, 241 * Ⲇ, Ⲇ * 175.8000030517578);
		Δ.bezierCurveTo(240 * Ⲇ, Ⲇ * 175.8000030517578, 240 * Ⲇ, Ⲇ * 175.8000030517578, Ⲇ * 239, Ⲇ * 175.8000030517578);
		Δ.bezierCurveTo(Ⲇ * 254, 200.8000030517578 * Ⲇ, Ⲇ * 222, Ⲇ * 211.8000030517578, Ⲇ * 202, Ⲇ * 212.8000030517578);
		Δ.bezierCurveTo(Ⲇ * 168, 213.8000030517578 * Ⲇ, Ⲇ * 151, 190.8000030517578 * Ⲇ, Ⲇ * 163, Ⲇ * 176.8000030517578);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠⲆᐃΔ], ᐃⲆΔⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(198 * Ⲇ, Ⲇ * 161.4000015258789);
		Δ.bezierCurveTo(Ⲇ * 198, 186.9000015258789 * Ⲇ, Ⲇ * 198, 186.9000015258789 * Ⲇ, 198 * Ⲇ, Ⲇ * 212.4000015258789);
		Δ.bezierCurveTo(Ⲇ * 201, Ⲇ * 212.4000015258789, Ⲇ * 201, Ⲇ * 212.4000015258789, Ⲇ * 204, Ⲇ * 212.4000015258789);
		Δ.bezierCurveTo(204 * Ⲇ, 186.9000015258789 * Ⲇ, 204 * Ⲇ, 186.9000015258789 * Ⲇ, Ⲇ * 204, 161.4000015258789 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃⵠᐃᐃ], ⵠΔⵠⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 161, Ⲇ * 194);
		Δ.bezierCurveTo(188 * Ⲇ, Ⲇ * 169, Ⲇ * 231, Ⲇ * 179, Ⲇ * 241, Ⲇ * 194);
		Δ.bezierCurveTo(239.5 * Ⲇ, 196 * Ⲇ, 239.5 * Ⲇ, 196 * Ⲇ, Ⲇ * 238, 198 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 221, Ⲇ * 179, Ⲇ * 182, Ⲇ * 182, 165 * Ⲇ, Ⲇ * 198);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(157 * Ⲇ, 188.80000019073486 * Ⲇ);
		Δ.bezierCurveTo(162 * Ⲇ, Ⲇ * 150.80000019073486, Ⲇ * 241, 150.80000019073486 * Ⲇ, 245 * Ⲇ, 188.80000019073486 * Ⲇ);
		Δ.bezierCurveTo(242 * Ⲇ, Ⲇ * 224.80000019073486, 162 * Ⲇ, 228.80000019073486 * Ⲇ, 157 * Ⲇ, 188.80000019073486 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 159, 188.80000019073486 * Ⲇ, Ⲇ * 159, Ⲇ * 188.80000019073486, Ⲇ * 161, 188.80000019073486 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 168, 216.80000019073486 * Ⲇ, 231 * Ⲇ, Ⲇ * 218.80000019073486, 241 * Ⲇ, 188.80000019073486 * Ⲇ);
		Δ.bezierCurveTo(236 * Ⲇ, 156.80000019073486 * Ⲇ, 169 * Ⲇ, 152.80000019073486 * Ⲇ, Ⲇ * 161, Ⲇ * 188.80000019073486);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ], Δⵠ[1], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 156, Ⲇ * 188);
		Δ.bezierCurveTo(Ⲇ * 160, Ⲇ * 164, Ⲇ * 183, 159 * Ⲇ, 201 * Ⲇ, 158 * Ⲇ);
		Δ.bezierCurveTo(232 * Ⲇ, Ⲇ * 159, 244 * Ⲇ, Ⲇ * 174, Ⲇ * 246, Ⲇ * 188);
		Δ.bezierCurveTo(245 * Ⲇ, 212 * Ⲇ, 213 * Ⲇ, 219 * Ⲇ, 201 * Ⲇ, 218 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 181, 221 * Ⲇ, Ⲇ * 158, Ⲇ * 207, 156 * Ⲇ, Ⲇ * 190);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠⵠᐃⵠΔ, Δⵠ[1], Ⲇ * ᐃᐃⵠⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 162, Ⲇ * 189);
		Δ.bezierCurveTo(Ⲇ * 166, Ⲇ * 170, 185 * Ⲇ, Ⲇ * 165, Ⲇ * 201, Ⲇ * 164);
		Δ.bezierCurveTo(Ⲇ * 227, Ⲇ * 165, 240 * Ⲇ, Ⲇ * 178, Ⲇ * 239, 188 * Ⲇ);
		Δ.bezierCurveTo(239 * Ⲇ, Ⲇ * 204, 210 * Ⲇ, 210 * Ⲇ, Ⲇ * 201, 210 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 182, Ⲇ * 211, 166 * Ⲇ, 200 * Ⲇ, Ⲇ * 162, Ⲇ * 190);
		Δ.closePath();
		ⵠᐃ(Δ, ΔΔᐃⲆᐃ, Δⵠ[1], Ⲇ * ΔΔⵠⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 131, Ⲇ * 262);
		Δ.bezierCurveTo(136 * Ⲇ, Ⲇ * 241, 144 * Ⲇ, 236 * Ⲇ, Ⲇ * 158, 233 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 200.5, Ⲇ * 233, Ⲇ * 229, 232 * Ⲇ, 243 * Ⲇ, 233 * Ⲇ);
		Δ.bezierCurveTo(259 * Ⲇ, Ⲇ * 235, 267 * Ⲇ, Ⲇ * 248, Ⲇ * 269, Ⲇ * 260);
		Δ.bezierCurveTo(269 * Ⲇ, Ⲇ * 266.5, Ⲇ * 269, Ⲇ * 266.5, Ⲇ * 269, 273 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 265, 290 * Ⲇ, Ⲇ * 251, Ⲇ * 297, Ⲇ * 242, Ⲇ * 298);
		Δ.bezierCurveTo(Ⲇ * 202, 298 * Ⲇ, Ⲇ * 202, Ⲇ * 298, 162 * Ⲇ, Ⲇ * 298);
		Δ.bezierCurveTo(148 * Ⲇ, Ⲇ * 298, Ⲇ * 136, 289 * Ⲇ, Ⲇ * 132, Ⲇ * 273);
		Δ.bezierCurveTo(Ⲇ * 131.5, Ⲇ * 268, Ⲇ * 131.5, 268 * Ⲇ, Ⲇ * 131, Ⲇ * 263);
		Δ.bezierCurveTo(Ⲇ * 135, 263 * Ⲇ, 135 * Ⲇ, 263 * Ⲇ, Ⲇ * 139, 263 * Ⲇ);
		Δ.bezierCurveTo(139 * Ⲇ, 281 * Ⲇ, 151 * Ⲇ, Ⲇ * 287, 160 * Ⲇ, Ⲇ * 290);
		Δ.bezierCurveTo(200.5 * Ⲇ, Ⲇ * 290, 200.5 * Ⲇ, 290 * Ⲇ, 241 * Ⲇ, 290 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 252, 290 * Ⲇ, Ⲇ * 257, Ⲇ * 281, 262 * Ⲇ, 271 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 261.5, 267 * Ⲇ, Ⲇ * 261.5, Ⲇ * 267, 261 * Ⲇ, 263 * Ⲇ);
		Δ.bezierCurveTo(260 * Ⲇ, Ⲇ * 249, 251 * Ⲇ, 242 * Ⲇ, 241 * Ⲇ, 241 * Ⲇ);
		Δ.bezierCurveTo(240.5 * Ⲇ, 240.5 * Ⲇ, Ⲇ * 240.5, Ⲇ * 240.5, Ⲇ * 240, Ⲇ * 240);
		Δ.bezierCurveTo(Ⲇ * 200, Ⲇ * 240, 200 * Ⲇ, Ⲇ * 240, 160 * Ⲇ, 240 * Ⲇ);
		Δ.bezierCurveTo(145 * Ⲇ, Ⲇ * 244, 142 * Ⲇ, 250 * Ⲇ, Ⲇ * 139, Ⲇ * 264);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], Ⲇ * Ⲇᐃⵠⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(130 * Ⲇ, Ⲇ * 264);
		Δ.bezierCurveTo(132 * Ⲇ, 244 * Ⲇ, 144 * Ⲇ, Ⲇ * 235, 157 * Ⲇ, 232 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 245, 232 * Ⲇ, Ⲇ * 201, Ⲇ * 232, 245 * Ⲇ, Ⲇ * 232);
		Δ.bezierCurveTo(Ⲇ * 264, Ⲇ * 235, 269 * Ⲇ, Ⲇ * 251, Ⲇ * 270, Ⲇ * 264);
		Δ.bezierCurveTo(Ⲇ * 272, Ⲇ * 291, 248 * Ⲇ, 299 * Ⲇ, Ⲇ * 242, 299 * Ⲇ);
		Δ.bezierCurveTo(200 * Ⲇ, 299 * Ⲇ, 200 * Ⲇ, Ⲇ * 299, 158 * Ⲇ, 299 * Ⲇ);
		Δ.bezierCurveTo(139 * Ⲇ, 298 * Ⲇ, 130 * Ⲇ, Ⲇ * 276, Ⲇ * 130, Ⲇ * 265);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃⲆⲆⲆᐃ, Δⵠ[1], Ⲇ * 2);
		return ᐃⵠ
	}

	function ⵠᐃΔΔⵠ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 120 * Ⲇ;
		var ΔⵠⲆ = Ⲇ * 150;
		var ΔⲆⵠ = Ⲇ * 60;
		var ⲆᐃⲆⲆ = ΔⲆⵠ / ΔⲆⲆⲆ;
		var ᐃΔⵠᐃ = Ⲇ * 15;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.save();
		Δ.translate(ᐃΔΔ / ⲆᐃᐃⲆ + Ⲇ * ⲆⲆᐃⲆ, ΔⵠⲆ / 2 + 0 * Ⲇ + ᐃΔⵠᐃ);
		Δ.rotate(Math.PI / 3);
		Δ.globalAlpha = .5;
		ΔΔΔΔ(Δ, 8, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ]);
		Δ.restore();
		Δ.save();
		Δ.translate(ᐃΔΔ / 2 - 11 * Ⲇ, ΔⵠⲆ / 2 + Ⲇ * Ⲇⵠᐃᐃᐃ);
		Δ.globalAlpha = 1;
		Δ.rotate(Math.PI / ⲆⲆΔΔ);
		Δ.translate(ⵠⵠⲆΔ, -ᐃΔⵠᐃ);
		ΔΔΔΔ(Δ, 8, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.restore();
		Δ.save();
		Δ.translate(ᐃΔΔ / Ⲇᐃⵠⵠ - Ⲇ * ⵠᐃΔⲆⲆ, ΔⵠⲆ / ᐃᐃⲆⵠ - 12 * Ⲇ);
		Δ.rotate(Math.PI / 2.8);
		ΔΔΔΔ(Δ, 5, .5 * ΔⲆⵠ, ⲆᐃⲆⲆ * .4);
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.restore();
		Δ.save();
		Δ.translate(ᐃΔΔ / ⵠΔΔΔ + ⵠⲆⵠⲆᐃ * Ⲇ, ΔⵠⲆ / 2 + 5 * Ⲇ);
		Δ.rotate(Math.PI / 1);
		ΔΔΔΔ(Δ, ΔΔⵠⲆΔ, ΔⲆⵠ * .5, ⲆᐃⲆⲆ * .4);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⵠⵠ]);
		Δ.restore();
		Δ.save();
		Δ.translate(ᐃΔΔ / ΔⵠⲆⲆ - ᐃⵠΔⵠᐃ * Ⲇ, ΔⵠⲆ / 2 + ⵠⲆⵠΔⲆ * Ⲇ);
		Δ.rotate(Math.PI / 2.25);
		ΔΔΔΔ(Δ, 5, ΔⲆⵠ * .5, ⲆᐃⲆⲆ * .4);
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.restore();
		return ᐃⵠ
	}

	function ⵠⵠΔⲆΔᐃⲆ(Ⲇ, ΔⲆⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = ⵠⲆᐃⵠ * (Ⲇ * ΔⲆⵠ);
		var ΔⵠⲆ = 2 * (ΔⲆⵠ * Ⲇ);
		var Ⲇᐃ = ᐃΔΔ / 2;
		var ⲆⲆⲆ = ΔⵠⲆ / 2;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ);
		ⵠΔᐃ(Δ, 0, 0, Ⲇ * ΔⲆⵠ, 0);
		ⵠᐃ(Δ, Δⵠ);
		return ᐃⵠ
	}

	function ⵠⲆⵠᐃΔⵠⵠⵠⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 400 * Ⲇ;
		ᐃⵠ.height = 400 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(Ⲇ * 10, Ⲇ * ᐃᐃⲆⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(100.5 * Ⲇ, Ⲇ * 126.34375);
		Δ.bezierCurveTo(Ⲇ * 151.5, Ⲇ * 104.34375, Ⲇ * 279.5, 188.34375 * Ⲇ, Ⲇ * 297.5, Ⲇ * 292.34375);
		Δ.bezierCurveTo(Ⲇ * 222.5, 307.34375 * Ⲇ, Ⲇ * 106.5, Ⲇ * 196.34375, Ⲇ * 100.5, Ⲇ * 127.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ], Δⵠ[0], ᐃⲆᐃⲆⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(106.5 * Ⲇ, 131.34375 * Ⲇ);
		Δ.bezierCurveTo(140.5 * Ⲇ, Ⲇ * 142.34375, Ⲇ * 225.5, Ⲇ * 184.34375, Ⲇ * 290.5, 287.34375 * Ⲇ);
		Δ.bezierCurveTo(270.5 * Ⲇ, 188.34375 * Ⲇ, 152.5 * Ⲇ, Ⲇ * 118.34375, 107.5 * Ⲇ, Ⲇ * 131.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(157.5 * Ⲇ, Ⲇ * 137.34375);
		Δ.bezierCurveTo(161.5 * Ⲇ, 138.34375 * Ⲇ, 164.5 * Ⲇ, 140.34375 * Ⲇ, 168.5 * Ⲇ, Ⲇ * 142.34375);
		Δ.bezierCurveTo(165.5 * Ⲇ, 156.34375 * Ⲇ, 141.5 * Ⲇ, Ⲇ * 176.34375, 126.5 * Ⲇ, 179.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 123.5, Ⲇ * 173.34375, 120.5 * Ⲇ, Ⲇ * 169.34375, 120.5 * Ⲇ, Ⲇ * 169.34375);
		Δ.bezierCurveTo(141.5 * Ⲇ, 161.34375 * Ⲇ, 156.5 * Ⲇ, Ⲇ * 145.34375, Ⲇ * 155.5, Ⲇ * 136.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 196.5, Ⲇ * 151.34375);
		Δ.bezierCurveTo(Ⲇ * 211.5, Ⲇ * 158.34375, 224.5 * Ⲇ, 171.34375 * Ⲇ, Ⲇ * 229.5, Ⲇ * 176.34375);
		Δ.bezierCurveTo(246.5 * Ⲇ, Ⲇ * 163.34375, 259.5 * Ⲇ, 166.34375 * Ⲇ, Ⲇ * 272.5, Ⲇ * 168.34375);
		Δ.bezierCurveTo(Ⲇ * 254.5, 146.34375 * Ⲇ, 214.5 * Ⲇ, Ⲇ * 145.34375, 198.5 * Ⲇ, Ⲇ * 151.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⲆᐃΔⵠ], Ⲇ * ⲆⵠⲆᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(154.5 * Ⲇ, Ⲇ * 222.34375);
		Δ.bezierCurveTo(164.5 * Ⲇ, 234.34375 * Ⲇ, Ⲇ * 173.5, Ⲇ * 242.34375, Ⲇ * 178.5, 245.34375 * Ⲇ);
		Δ.bezierCurveTo(174.5 * Ⲇ, 265.34375 * Ⲇ, 180.5 * Ⲇ, Ⲇ * 274.34375, Ⲇ * 186.5, 283.34375 * Ⲇ);
		Δ.bezierCurveTo(165.5 * Ⲇ, 277.34375 * Ⲇ, Ⲇ * 151.5, 245.34375 * Ⲇ, 155.5 * Ⲇ, 224.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ], Δⵠ[ⲆᐃΔⵠ], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 279.5, Ⲇ * 294.34375);
		Δ.bezierCurveTo(286.5 * Ⲇ, 285.84375 * Ⲇ, 286.5 * Ⲇ, Ⲇ * 285.84375, 293.5 * Ⲇ, 277.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 315.5, Ⲇ * 280.34375, 315.5 * Ⲇ, Ⲇ * 280.34375, 337.5 * Ⲇ, 283.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 340.5, 311.34375 * Ⲇ, Ⲇ * 317.5, 326.34375 * Ⲇ, Ⲇ * 307.5, 331.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ΔᐃⲆⲆ], 12 * Ⲇ);
		Δ.globalAlpha = ΔⲆⵠⲆ;
		Δ.translate(Ⲇ * -ᐃᐃⵠΔⵠ, -5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 100.5, Ⲇ * 126.34375);
		Δ.bezierCurveTo(151.5 * Ⲇ, Ⲇ * 104.34375, Ⲇ * 279.5, 188.34375 * Ⲇ, 297.5 * Ⲇ, Ⲇ * 292.34375);
		Δ.bezierCurveTo(Ⲇ * 222.5, Ⲇ * 307.34375, Ⲇ * 106.5, 196.34375 * Ⲇ, 100.5 * Ⲇ, 127.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[Ⲇᐃⵠⵠ], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(106.5 * Ⲇ, Ⲇ * 131.34375);
		Δ.bezierCurveTo(Ⲇ * 140.5, 142.34375 * Ⲇ, Ⲇ * 225.5, 184.34375 * Ⲇ, 290.5 * Ⲇ, Ⲇ * 287.34375);
		Δ.bezierCurveTo(270.5 * Ⲇ, 188.34375 * Ⲇ, 152.5 * Ⲇ, 118.34375 * Ⲇ, 107.5 * Ⲇ, Ⲇ * 131.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 157.5, Ⲇ * 137.34375);
		Δ.bezierCurveTo(Ⲇ * 161.5, Ⲇ * 138.34375, Ⲇ * 164.5, 140.34375 * Ⲇ, 168.5 * Ⲇ, 142.34375 * Ⲇ);
		Δ.bezierCurveTo(165.5 * Ⲇ, 156.34375 * Ⲇ, Ⲇ * 141.5, 176.34375 * Ⲇ, Ⲇ * 126.5, 179.34375 * Ⲇ);
		Δ.bezierCurveTo(123.5 * Ⲇ, 173.34375 * Ⲇ, Ⲇ * 120.5, 169.34375 * Ⲇ, Ⲇ * 120.5, 169.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 141.5, Ⲇ * 161.34375, 156.5 * Ⲇ, 145.34375 * Ⲇ, 155.5 * Ⲇ, 136.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4]);
		ⵠΔᐃ(Δ, 125.5 * Ⲇ, Ⲇ * 140.34375, Ⲇ * 11.180339887498949);
		ⵠᐃ(Δ, Δⵠ[5]);
		ⵠΔᐃ(Δ, Ⲇ * 122.5, 135.34375 * Ⲇ, 5.0990195135927845 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[6]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 196.5, Ⲇ * 151.34375);
		Δ.bezierCurveTo(Ⲇ * 211.5, 158.34375 * Ⲇ, 224.5 * Ⲇ, 171.34375 * Ⲇ, 229.5 * Ⲇ, 176.34375 * Ⲇ);
		Δ.bezierCurveTo(246.5 * Ⲇ, Ⲇ * 163.34375, 259.5 * Ⲇ, 166.34375 * Ⲇ, 272.5 * Ⲇ, Ⲇ * 168.34375);
		Δ.bezierCurveTo(Ⲇ * 254.5, Ⲇ * 146.34375, Ⲇ * 214.5, Ⲇ * 145.34375, 198.5 * Ⲇ, 151.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⵠᐃΔⲆ], Δⵠ[8], ΔΔⵠⵠⲆΔΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(154.5 * Ⲇ, Ⲇ * 222.34375);
		Δ.bezierCurveTo(164.5 * Ⲇ, 234.34375 * Ⲇ, 173.5 * Ⲇ, Ⲇ * 242.34375, Ⲇ * 178.5, Ⲇ * 245.34375);
		Δ.bezierCurveTo(174.5 * Ⲇ, Ⲇ * 265.34375, 180.5 * Ⲇ, 274.34375 * Ⲇ, Ⲇ * 186.5, Ⲇ * 283.34375);
		Δ.bezierCurveTo(Ⲇ * 165.5, Ⲇ * 277.34375, Ⲇ * 151.5, Ⲇ * 245.34375, 155.5 * Ⲇ, Ⲇ * 224.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[8], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 279.5, Ⲇ * 294.34375);
		Δ.bezierCurveTo(286.5 * Ⲇ, 285.84375 * Ⲇ, Ⲇ * 286.5, Ⲇ * 285.84375, Ⲇ * 293.5, 277.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 315.5, 280.34375 * Ⲇ, 315.5 * Ⲇ, 280.34375 * Ⲇ, Ⲇ * 337.5, Ⲇ * 283.34375);
		Δ.bezierCurveTo(Ⲇ * 340.5, 311.34375 * Ⲇ, 317.5 * Ⲇ, 326.34375 * Ⲇ, Ⲇ * 307.5, Ⲇ * 331.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[8], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 296.5, Ⲇ * 287.34375);
		Δ.bezierCurveTo(Ⲇ * 311.5, 291.34375 * Ⲇ, 311.5 * Ⲇ, 291.34375 * Ⲇ, 326.5 * Ⲇ, 295.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[9], Ⲇ * ⵠⲆⵠⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 294.5, 289.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 308.5, Ⲇ * 297.34375, Ⲇ * 308.5, 297.34375 * Ⲇ, 322.5 * Ⲇ, 305.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[9], ΔⲆⵠΔᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 294.5, 291.34375 * Ⲇ);
		Δ.bezierCurveTo(304 * Ⲇ, 303.34375 * Ⲇ, Ⲇ * 304, 303.34375 * Ⲇ, Ⲇ * 313.5, 315.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[ᐃΔⵠᐃᐃ], ᐃⲆΔⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 226.5, Ⲇ * 161.34375);
		Δ.bezierCurveTo(230.5 * Ⲇ, 160.34375 * Ⲇ, Ⲇ * 236.5, 158.34375 * Ⲇ, Ⲇ * 238.5, 161.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 238.5, Ⲇ * 157.34375, 228.5 * Ⲇ, 159.34375 * Ⲇ, 227.5 * Ⲇ, 161.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ᐃΔⵠᐃᐃ], Ⲇ * ΔᐃⲆᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 167.5, Ⲇ * 248.34375);
		Δ.bezierCurveTo(Ⲇ * 165.5, Ⲇ * 251.34375, 168.5 * Ⲇ, 256.34375 * Ⲇ, 168.5 * Ⲇ, 253.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 166.5, 252.34375 * Ⲇ, 168.5 * Ⲇ, 246.34375 * Ⲇ, Ⲇ * 166.5, 247.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ᐃΔⵠᐃᐃΔᐃ], Ⲇ * ⵠⵠⲆⲆ);
		return ᐃⵠ
	}

	function ᐃⲆΔᐃⵠ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 180 * Ⲇ;
		var ΔⵠⲆ = 210 * Ⲇ;
		var ΔⲆⵠ = 60 * Ⲇ;
		var ⲆᐃⲆⲆ = ΔⲆⵠ / ΔⲆⵠΔⲆ;
		var ᐃΔⵠᐃ = ΔΔΔΔᐃⵠⲆ * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.save();
		Δ.translate(ᐃΔΔ / ᐃᐃⵠⵠ - Ⲇⵠᐃ * Ⲇ, ΔⵠⲆ / ᐃᐃΔⵠ - Ⲇ * 35 + ᐃΔⵠᐃ);
		Δ.rotate(Math.PI / -1.8);
		Δ.globalAlpha = .5;
		Δ.translate(ᐃⲆΔᐃ * Ⲇ, -20 * Ⲇ);
		ΔΔΔΔ(Δ, 5, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]);
		Δ.restore();
		Δ.save();
		Δ.translate(ᐃΔΔ / ⵠⵠΔⵠ + Ⲇ * ⵠΔⲆⲆΔ, ΔⵠⲆ / Ⲇᐃⵠⵠ + Ⲇ * ⵠⵠᐃⲆΔⲆΔ + ᐃΔⵠᐃ);
		Δ.rotate(Math.PI / ΔΔⵠⲆ);
		Δ.globalAlpha = .5;
		Δ.translate(Ⲇ * ᐃⲆΔ, -ⵠⲆΔⲆⲆ * Ⲇ);
		ΔΔΔΔ(Δ, 5, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ]);
		Δ.restore();
		Δ.save();
		Δ.translate(ᐃΔΔ / ⵠΔΔΔ - Ⲇ * 50, ΔⵠⲆ / ⵠⲆᐃⵠ + 40 * Ⲇ + ᐃΔⵠᐃ);
		Δ.rotate(Math.PI / 3);
		Δ.globalAlpha = .5;
		Δ.translate(0, -20 * Ⲇ);
		ΔΔΔΔ(Δ, ᐃⵠΔⵠ, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ]);
		Δ.restore();
		Δ.save();
		Δ.translate(ᐃΔΔ / 2 - Ⲇ * 0, ΔⵠⲆ / 2 - Ⲇ * 35);
		Δ.rotate(Math.PI / -1.8);
		Δ.globalAlpha = ᐃⵠᐃᐃ;
		Δ.translate(0 * Ⲇ, -20 * Ⲇ);
		ΔΔΔΔ(Δ, 5, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.restore();
		Δ.save();
		Δ.translate(ᐃΔΔ / 2 + Ⲇ * ᐃⲆᐃⲆⲆ, ΔⵠⲆ / ⵠΔΔΔ + ⵠⵠⲆΔⵠ * Ⲇ);
		Δ.rotate(Math.PI / 2);
		Δ.globalAlpha = ΔΔΔᐃ;
		Δ.translate(0, Ⲇ * -ΔⲆⵠⵠᐃ);
		ΔΔΔΔ(Δ, ⵠⲆⲆⵠ, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.restore();
		Δ.save();
		Δ.translate(ᐃΔΔ / 2 - Ⲇ * 50, ΔⵠⲆ / 2 + 40 * Ⲇ);
		Δ.rotate(Math.PI / ⵠⵠΔⲆ);
		Δ.globalAlpha = ΔᐃⵠⲆ;
		Δ.translate(0, -20 * Ⲇ);
		ΔΔΔΔ(Δ, 5, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[Δⵠᐃ]);
		Δ.restore();
		var ΔⲆⵠ = 30 * Ⲇ;
		var ⲆᐃⲆⲆ = ΔⲆⵠ / 4;
		Δ.save();
		Δ.translate(ᐃΔΔ / 2 + Ⲇ * 5, ΔⵠⲆ / ᐃⵠΔⲆ - Ⲇ * 20);
		Δ.rotate(Math.PI / -1.8);
		Δ.globalAlpha = 1;
		Δ.translate(0, Ⲇ * -ΔᐃⲆⲆⲆΔⲆ);
		ΔΔΔΔ(Δ, ⵠᐃⲆᐃ, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ⲆΔΔⲆ]);
		Δ.restore();
		Δ.save();
		Δ.translate(ᐃΔΔ / ⵠⲆΔᐃ + Ⲇ * 0, ΔⵠⲆ / Ⲇᐃⵠⵠ + 10 * Ⲇ);
		Δ.rotate(Math.PI / ᐃⵠΔⲆ);
		Δ.globalAlpha = 1;
		Δ.translate(0, -ⵠⲆⵠΔⲆ * Ⲇ);
		ΔΔΔΔ(Δ, 5, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃⲆ]);
		Δ.restore();
		Δ.save();
		Δ.translate(ᐃΔΔ / 2 - Ⲇ * 45, ΔⵠⲆ / ΔⲆⵠΔ + 35 * Ⲇ);
		Δ.rotate(Math.PI / ΔᐃΔⲆ);
		Δ.globalAlpha = ⵠⲆⵠⲆ;
		Δ.translate(ᐃⲆΔᐃ, Ⲇ * -ⲆⵠΔⵠⵠ);
		ΔΔΔΔ(Δ, ⵠᐃⲆᐃ, ΔⲆⵠ, ⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.restore();
		ⵠΔᐃ(Δ, ᐃΔΔ / 2 - 7 * Ⲇ, ΔⵠⲆ / 2 + Ⲇ * ⲆⲆⵠⵠⲆ, 5);
		ⵠᐃ(Δ, Δⵠ[2]);
		return ᐃⵠ
	}

	function ⵠΔⲆⵠΔᐃΔΔⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 130 * Ⲇ;
		var ΔⵠⲆ = 142 * Ⲇ;
		var Ⲇᐃ = ᐃΔΔ / ⵠⲆΔᐃ;
		var ⲆⲆⲆ = ΔⵠⲆ / ᐃⲆⵠᐃ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		ⵠΔᐃ(Δ, Ⲇᐃ, ⲆⲆⲆ, Ⲇ * 40, ᐃⲆΔ);
		ⵠᐃ(Δ, ΔΔᐃⲆᐃ, Δⵠ[0], Ⲇ * ⲆΔᐃᐃⲆ);
		ⵠΔᐃ(Δ, Ⲇᐃ, ⲆⲆⲆ, 30 * Ⲇ, 0);
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[0], 7 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇᐃ, ⲆⲆⲆ, Ⲇ * 20, 0);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ]);
		return ᐃⵠ
	}

	function ⵠΔΔⲆᐃⵠΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 130;
		var ΔⵠⲆ = Ⲇ * 142;
		var Ⲇᐃ = ᐃΔΔ / 2;
		var ⲆⲆⲆ = ΔⵠⲆ / 2;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ + Ⲇ * ⵠΔⵠᐃⲆ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		ⵠΔᐃ(Δ, 0, 0, Ⲇ * 60);
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
		Δ.translate(0, -ⲆᐃᐃΔΔ * Ⲇ);
		Δ.globalAlpha = ᐃⲆⲆ;
		ⵠΔᐃ(Δ, 0, 0, Ⲇ * 60, 0);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * ΔᐃᐃΔ);
		ⵠΔᐃ(Δ, 0, ⵠⵠⵠ, Ⲇ * 40);
		ⵠᐃ(Δ, Δⵠ[ᐃΔΔΔ]);
		ⵠΔᐃ(Δ, 0, ⵠΔⵠᐃ, 25 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], Ⲇ * ⵠᐃΔᐃⲆ);
		return ᐃⵠ
	}

	function ⵠⵠⵠⲆⲆΔⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 373;
		ᐃⵠ.height = Ⲇ * 314;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⲆⵠ;
		Δ.translate(Ⲇ * ⲆⲆⲆᐃⵠ, 5 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 184.048583984375, 69.1805419921875 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -40, Ⲇ * -28.5, 80 * Ⲇ, 57 * Ⲇ, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆᐃᐃⲆ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 185.048583984375, Ⲇ * 61.6805419921875);
		Δ.bezierCurveTo(Ⲇ * 145.048583984375, Ⲇ * 59.6805419921875, Ⲇ * 138.048583984375, 41.6805419921875 * Ⲇ, Ⲇ * 148.048583984375, Ⲇ * 33.6805419921875);
		Δ.bezierCurveTo(Ⲇ * 169.048583984375, Ⲇ * 17.6805419921875, Ⲇ * 194.048583984375, 20.6805419921875 * Ⲇ, Ⲇ * 210.048583984375, Ⲇ * 27.6805419921875);
		Δ.bezierCurveTo(234.048583984375 * Ⲇ, Ⲇ * 40.6805419921875, Ⲇ * 225.048583984375, Ⲇ * 57.6805419921875, 186.048583984375 * Ⲇ, Ⲇ * 61.6805419921875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ], Δⵠ[ⵠⵠᐃ], Ⲇ * ΔⲆⵠΔᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 224.048583984375, 56.6805419921875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 326.048583984375, 69.6805419921875 * Ⲇ, 363.048583984375 * Ⲇ, Ⲇ * 148.6805419921875, 349.048583984375 * Ⲇ, 206.6805419921875 * Ⲇ);
		Δ.bezierCurveTo(329.048583984375 * Ⲇ, Ⲇ * 278.6805419921875, 252.048583984375 * Ⲇ, Ⲇ * 283.6805419921875, Ⲇ * 206.048583984375, 275.6805419921875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 206.548583984375, Ⲇ * 266.6805419921875, Ⲇ * 206.548583984375, Ⲇ * 266.6805419921875, Ⲇ * 207.048583984375, 257.6805419921875 * Ⲇ);
		Δ.bezierCurveTo(276.048583984375 * Ⲇ, Ⲇ * 268.6805419921875, 308.048583984375 * Ⲇ, Ⲇ * 239.6805419921875, 323.048583984375 * Ⲇ, 208.6805419921875 * Ⲇ);
		Δ.bezierCurveTo(352.048583984375 * Ⲇ, 145.6805419921875 * Ⲇ, Ⲇ * 292.048583984375, Ⲇ * 86.6805419921875, 223.048583984375 * Ⲇ, 74.6805419921875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ], Δⵠ[0], Ⲇ * ΔⵠΔᐃⵠ);
		Δ.save();
		Δ.translate(Ⲇ * 183.548583984375, 119.6805419921875 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -121.5, -45 * Ⲇ, Ⲇ * 243, Ⲇ * 90, Ⲇ * 40);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ], Δⵠ[0], 6 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 183.048583984375, 155.6805419921875 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -121, -52 * Ⲇ, 242 * Ⲇ, 104 * Ⲇ, Ⲇ * 40);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆⵠ], Δⵠ[0], 6 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 183.048583984375, 205.1805419921875 * Ⲇ);
		ᐃΔⵠ(Δ, -121 * Ⲇ, Ⲇ * -50.5, 242 * Ⲇ, 101 * Ⲇ, Ⲇ * 40);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⲆᐃΔⵠ], Ⲇ * 6);
		Δ.save();
		Δ.translate(Ⲇ * 185.048583984375, 204.1805419921875 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -100, -34.5 * Ⲇ, 200 * Ⲇ, 69 * Ⲇ, 40 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], Ⲇ * ⲆⵠⲆΔⲆ);
		ⵠΔᐃ(Δ, 185.048583984375 * Ⲇ, Ⲇ * 257.6805419921875, Ⲇ * 27.018512172212592);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ], Δⵠ[ⲆⲆᐃⲆ], ⲆΔⲆⲆᐃᐃⲆ * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(Ⲇ * -ⲆᐃΔⲆⵠ, -ⵠᐃⵠᐃΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(224.048583984375 * Ⲇ, Ⲇ * 56.6805419921875);
		Δ.bezierCurveTo(Ⲇ * 326.048583984375, Ⲇ * 69.6805419921875, 363.048583984375 * Ⲇ, Ⲇ * 148.6805419921875, Ⲇ * 349.048583984375, 206.6805419921875 * Ⲇ);
		Δ.bezierCurveTo(329.048583984375 * Ⲇ, 278.6805419921875 * Ⲇ, 252.048583984375 * Ⲇ, Ⲇ * 283.6805419921875, Ⲇ * 206.048583984375, 275.6805419921875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 206.548583984375, Ⲇ * 266.6805419921875, 206.548583984375 * Ⲇ, 266.6805419921875 * Ⲇ, 207.048583984375 * Ⲇ, 257.6805419921875 * Ⲇ);
		Δ.bezierCurveTo(276.048583984375 * Ⲇ, 268.6805419921875 * Ⲇ, Ⲇ * 308.048583984375, 239.6805419921875 * Ⲇ, 323.048583984375 * Ⲇ, 208.6805419921875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 352.048583984375, Ⲇ * 145.6805419921875, Ⲇ * 292.048583984375, Ⲇ * 86.6805419921875, 223.048583984375 * Ⲇ, 74.6805419921875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆᐃ], Δⵠ[ΔᐃⲆᐃⵠ], Ⲇ * ⵠⲆⵠⲆⵠ);
		Δ.save();
		Δ.translate(184.048583984375 * Ⲇ, 69.1805419921875 * Ⲇ);
		ᐃΔⵠ(Δ, -40 * Ⲇ, -28.5 * Ⲇ, 80 * Ⲇ, Ⲇ * 57, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[2], ⵠΔⲆᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 185.048583984375, 61.6805419921875 * Ⲇ);
		Δ.bezierCurveTo(145.048583984375 * Ⲇ, Ⲇ * 59.6805419921875, 138.048583984375 * Ⲇ, 41.6805419921875 * Ⲇ, Ⲇ * 148.048583984375, Ⲇ * 33.6805419921875);
		Δ.bezierCurveTo(169.048583984375 * Ⲇ, 17.6805419921875 * Ⲇ, 194.048583984375 * Ⲇ, Ⲇ * 20.6805419921875, Ⲇ * 210.048583984375, Ⲇ * 27.6805419921875);
		Δ.bezierCurveTo(Ⲇ * 234.048583984375, Ⲇ * 40.6805419921875, Ⲇ * 225.048583984375, 57.6805419921875 * Ⲇ, 186.048583984375 * Ⲇ, 61.6805419921875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * ΔΔΔᐃΔ);
		Δ.save();
		Δ.translate(183.548583984375 * Ⲇ, Ⲇ * 119.6805419921875);
		ᐃΔⵠ(Δ, Ⲇ * -121.5, -45 * Ⲇ, 243 * Ⲇ, Ⲇ * 90, Ⲇ * 40);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[4], Ⲇ * 6);
		Δ.save();
		Δ.translate(183.048583984375 * Ⲇ, Ⲇ * 155.6805419921875);
		ᐃΔⵠ(Δ, Ⲇ * -121, Ⲇ * -52, Ⲇ * 242, 104 * Ⲇ, Ⲇ * 40);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔᐃᐃΔ], ⲆΔⲆⲆᐃᐃⲆ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 183.048583984375, Ⲇ * 205.1805419921875);
		ᐃΔⵠ(Δ, -121 * Ⲇ, Ⲇ * -50.5, 242 * Ⲇ, Ⲇ * 101, 40 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[ᐃᐃⵠΔ], Ⲇ * ⵠΔᐃᐃ);
		Δ.globalCompositeOperation = ᐃ[500];
		Δ.save();
		Δ.translate(Ⲇ * 185.048583984375, 204.1805419921875 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -100, Ⲇ * -34.5, 200 * Ⲇ, 69 * Ⲇ, 40 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[8], Ⲇ * 6);
		Δ.globalCompositeOperation = ᐃ[15];
		Δ.globalAlpha = .5;
		Δ.save();
		Δ.translate(185.048583984375 * Ⲇ, 204.1805419921875 * Ⲇ);
		ᐃΔⵠ(Δ, -Δⵠᐃⵠᐃ * Ⲇ, -34.5 * Ⲇ, 200 * Ⲇ, Ⲇ * 69, 40 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔⵠᐃΔⲆ], Δⵠ[ⲆⵠΔᐃⵠⵠΔ], ⲆⵠⲆΔⲆ * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.save();
		ⵠΔᐃ(Δ, Ⲇ * 185.048583984375, 257.6805419921875 * Ⲇ, 27.018512172212592 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⵠ], Δⵠ[4], 6 * Ⲇ);
		Δ.restore();
		return ᐃⵠ
	}
	const ΔΔᐃⲆⵠ = ⲆᐃᐃⲆ;

	function ⵠⵠΔᐃᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 90;
		ᐃⵠ.height = Ⲇ * 98;
		Δ.translate(ΔᐃⲆⲆ, Ⲇ * 4);
		if (0 === ᐃⲆ) {
			Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
			Δ.save();
			Δ.translate(Ⲇ * 44, 50 * Ⲇ);
			Δ.rotate(1.4);
			ΔΔΔΔ(Δ, 7, 41 * Ⲇ, Ⲇ * 10);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[0])
		}
		Δ.globalAlpha = 1;
		Δ.save();
		Δ.translate(44 * Ⲇ, Ⲇ * 44);
		Δ.rotate(1.4);
		ΔΔΔΔ(Δ, ᐃⵠᐃⵠⲆⵠΔ, Ⲇ * 41, ⲆΔⲆᐃⵠ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⵠ], Δⵠ[2], 4 * Ⲇ);
		ΔΔΔΔ(Δ, ⲆΔᐃᐃⲆ, Ⲇ * 35, Ⲇ * 10);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆᐃ], Δⵠ[4], Ⲇ * 4);
		ΔΔΔΔ(Δ, ⲆⵠⵠΔⲆⵠⲆ, Ⲇ * 23, Ⲇ * ⲆΔⲆᐃᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⵠ]);
		Δ.save();
		Δ.translate(Ⲇ * 45, Ⲇ * 45);
		Δ.rotate(ⲆⲆᐃⲆ);
		ᐃΔⵠ(Δ, Ⲇ * -ᐃⵠⲆΔⵠΔⵠ, Ⲇ * -25.5, 18 * Ⲇ, 51 * Ⲇ, Ⲇ * 30);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔⵠⲆⵠᐃ], Δⵠ[4], Ⲇ * ⵠᐃᐃⲆ);
		Δ.save();
		Δ.translate(Ⲇ * 45, 45 * Ⲇ);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, Ⲇ * -26, Ⲇ * -ᐃⵠⲆᐃᐃⲆΔ, 52 * Ⲇ, Ⲇ * ΔⲆᐃⵠⵠᐃΔ, 30 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⲆ], Δⵠ[ⵠΔᐃⲆ], 2 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 45, 29 * Ⲇ, 7 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆᐃ]);
		ⵠΔᐃ(Δ, Ⲇ * 45, Ⲇ * 61, Ⲇ * ⲆⵠⵠΔᐃ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆᐃ]);
		ⵠΔᐃ(Δ, Ⲇ * 28, Ⲇ * 45, Ⲇ * ⵠᐃⵠⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃᐃᐃ]);
		ⵠΔᐃ(Δ, Ⲇ * 62, 45 * Ⲇ, ΔⵠᐃΔⲆ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⵠ]);
		return ᐃⵠ
	}

	function ⲆⲆᐃⲆⲆΔⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 300 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 300;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.save();
		Δ.translate(Ⲇ * 150, Ⲇ * 160);
		Δ.rotate(6.28);
		ΔΔΔΔ(Δ, ⵠⲆⲆΔᐃ, Ⲇ * 146, 30 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ᐃⵠⵠⵠ;
		Δ.save();
		Δ.translate(Ⲇ * 150, Ⲇ * 150);
		Δ.rotate(6.28);
		ΔΔΔΔ(Δ, 6, 146 * Ⲇ, 30 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ], Δⵠ[ⲆΔⲆΔ], Ⲇ * ΔⲆⵠⵠⵠΔᐃ);
		Δ.save();
		Δ.translate(Ⲇ * 150, 150 * Ⲇ);
		Δ.rotate(0);
		ΔΔΔΔ(Δ, ⵠⲆⲆΔᐃ, 105 * Ⲇ, 30 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃΔ], Δⵠ[3], ᐃᐃΔⲆⲆ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 150, Ⲇ * 150);
		Δ.rotate(ⵠᐃⵠ);
		ΔΔΔΔ(Δ, ΔΔΔᐃΔ, Ⲇ * 66, Ⲇ * 30);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ΔΔⵠⲆ], Ⲇ * ⵠⲆⲆᐃᐃ);
		Δ.save();
		Δ.translate(131 * Ⲇ, Ⲇ * 116);
		ΔΔΔΔ(Δ, ⲆⲆⵠⵠⲆ, Ⲇ * ⲆⲆⵠΔⲆⲆⵠ, Ⲇ * ΔⲆⵠⵠⵠΔᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠᐃⵠ]);
		Δ.save();
		Δ.translate(Ⲇ * 163, 168 * Ⲇ);
		ΔΔΔΔ(Δ, 7, 25 * Ⲇ, 8 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[6]);
		Δ.save();
		Δ.translate(Ⲇ * 117, 151 * Ⲇ);
		ΔΔΔΔ(Δ, 7, Ⲇ * 11, ⵠⲆⲆᐃᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[6]);
		Δ.save();
		Δ.translate(167 * Ⲇ, 122 * Ⲇ);
		ΔΔΔΔ(Δ, 7, Ⲇ * 12, Ⲇ * ⵠⵠᐃᐃⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⲆΔᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 150, 207 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 150, Ⲇ * 151, 150 * Ⲇ, 101 * Ⲇ, 150 * Ⲇ, Ⲇ * 94);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃΔᐃⲆⵠ, Δⵠ[2], ᐃᐃᐃⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 118, ᐃⲆⲆⵠⵠⵠⲆ * Ⲇ);
		Δ.bezierCurveTo(118 * Ⲇ, Ⲇ * 205, 118 * Ⲇ, 207 * Ⲇ, 118 * Ⲇ, 200 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠΔΔΔ], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 183, ⲆⵠⲆⵠᐃ * Ⲇ);
		Δ.bezierCurveTo(183 * Ⲇ, Ⲇ * 203, 183 * Ⲇ, Ⲇ * 203, Ⲇ * 183, Ⲇ * 200);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠΔΔΔ], 8 * Ⲇ);
		return ᐃⵠ
	}

	function ᐃᐃᐃΔΔⲆᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 90;
		ᐃⵠ.height = Ⲇ * 101;
		Δ.translate(Ⲇ * ΔᐃⲆⲆ, Ⲇ * ⵠΔⲆᐃ);
		if (ᐃⲆ === ΔᐃⲆⲆ) {
			Δ.globalAlpha = Δⵠᐃⵠ ? .5 : Δⵠᐃ;
			ⵠΔᐃ(Δ, 44 * Ⲇ, Ⲇ * 55, 41 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ])
		}
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, Ⲇ * 44, Ⲇ * 45, 41 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⵠΔΔ], Δⵠ[2], Ⲇ * ᐃⵠⵠⲆ);
		ⵠΔᐃ(Δ, Ⲇ * 44, 45 * Ⲇ, Ⲇ * 31);
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃΔ]);
		Δ.save();
		Δ.translate(45 * Ⲇ, Ⲇ * 45);
		ᐃΔⵠ(Δ, -9 * Ⲇ, -25.5 * Ⲇ, Ⲇ * 18, 51 * Ⲇ, Ⲇ * 30);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⵠΔⲆᐃⲆ], Ⲇ * 2);
		Δ.save();
		Δ.translate(45 * Ⲇ, Ⲇ * 45);
		ᐃΔⵠ(Δ, Ⲇ * -26, -ᐃΔⵠⲆⲆ * Ⲇ, Ⲇ * 52, Ⲇ * ⲆᐃΔΔᐃ, Ⲇ * 30);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔΔⲆΔ], Δⵠ[4], Ⲇ * ⲆΔⲆΔ);
		ⵠΔᐃ(Δ, 45 * Ⲇ, Ⲇ * 29, Ⲇ * 7);
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⵠ]);
		ⵠΔᐃ(Δ, 45 * Ⲇ, Ⲇ * 61, Ⲇ * ᐃⵠΔⲆⵠⵠᐃ);
		ⵠᐃ(Δ, Δⵠ[5]);
		ⵠΔᐃ(Δ, 28 * Ⲇ, Ⲇ * 45, Ⲇ * ΔΔⵠⲆⵠⵠᐃ);
		ⵠᐃ(Δ, Δⵠ[5]);
		ⵠΔᐃ(Δ, 62 * Ⲇ, 45 * Ⲇ, ᐃΔᐃᐃⲆ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⲆⵠ]);
		return ᐃⵠ
	}

	function ΔᐃⲆΔᐃⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 90 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 98;
		Δ.translate(0, Ⲇ * 4);
		if (ᐃⲆ === ⲆⲆᐃ) {
			Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
			Δ.save();
			Δ.translate(Ⲇ * 44, 50 * Ⲇ);
			Δ.rotate(1);
			ΔΔΔΔ(Δ, ⲆᐃⲆᐃᐃ, Ⲇ * 41, ⵠΔⵠᐃⵠ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.restore()
		}
		Δ.globalAlpha = ⲆⲆⵠ;
		Δ.save();
		Δ.translate(44 * Ⲇ, 44 * Ⲇ);
		Δ.rotate(1);
		ΔΔΔΔ(Δ, 8, Ⲇ * 41, ΔⵠΔᐃΔ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[ⵠΔΔΔ], Ⲇ * ᐃᐃᐃᐃΔ);
		Δ.rotate(.56);
		ΔΔΔΔ(Δ, ⲆⲆⲆᐃⲆ, Ⲇ * 33, 10 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃᐃⵠΔ], Ⲇ * 4);
		Δ.rotate(.28);
		ΔΔΔΔ(Δ, 8, Ⲇ * 24, ⲆⲆᐃⲆⵠ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠᐃΔ]);
		Δ.restore();
		Δ.save();
		Δ.translate(Ⲇ * 45, Ⲇ * 45);
		Δ.rotate(ᐃⲆΔ);
		ᐃΔⵠ(Δ, Ⲇ * -9, Ⲇ * -25.5, 18 * Ⲇ, Ⲇ * 51, 30 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⵠΔᐃⲆ], Ⲇ * ⵠΔΔΔ);
		Δ.save();
		Δ.translate(Ⲇ * 45, 45 * Ⲇ);
		Δ.rotate(ⲆⲆᐃⲆ);
		ᐃΔⵠ(Δ, Ⲇ * -26, Ⲇ * -ᐃⲆᐃᐃᐃ, 52 * Ⲇ, 18 * Ⲇ, Ⲇ * 30);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ᐃᐃᐃᐃΔ], 2 * Ⲇ);
		ⵠΔᐃ(Δ, 45 * Ⲇ, 29 * Ⲇ, Ⲇ * ΔΔⵠⲆᐃ);
		ⵠᐃ(Δ, Δⵠ[5]);
		ⵠΔᐃ(Δ, 45 * Ⲇ, Ⲇ * 61, ΔᐃΔⵠⲆⲆⵠ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[5]);
		ⵠΔᐃ(Δ, 28 * Ⲇ, Ⲇ * 45, ΔⵠᐃΔⲆ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⲆⵠ]);
		ⵠΔᐃ(Δ, Ⲇ * 62, 45 * Ⲇ, Ⲇ * ᐃᐃᐃⵠᐃⵠⵠ);
		ⵠᐃ(Δ, Δⵠ[5]);
		return ᐃⵠ
	}

	function ᐃⵠΔⵠⲆⲆⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 300 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 300;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.save();
		Δ.translate(150 * Ⲇ, 160 * Ⲇ);
		Δ.rotate(6.28);
		ΔΔΔΔ(Δ, ⵠⲆⵠⵠⵠ, Ⲇ * 146, 30 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ⲆⵠⲆ;
		Δ.save();
		Δ.translate(150 * Ⲇ, 150 * Ⲇ);
		Δ.rotate(6.28);
		ΔΔΔΔ(Δ, 6, Ⲇ * 146, 30 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[2], Ⲇ * ᐃᐃΔⲆⲆ);
		Δ.save();
		Δ.translate(150 * Ⲇ, 150 * Ⲇ);
		Δ.rotate(ⵠⵠⵠ);
		ΔΔΔΔ(Δ, 6, 105 * Ⲇ, Ⲇ * 30);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⵠ], Δⵠ[3], Ⲇ * 8);
		Δ.save();
		Δ.translate(150 * Ⲇ, 150 * Ⲇ);
		Δ.rotate(Ⲇⵠᐃ);
		ΔΔΔΔ(Δ, 6, 66 * Ⲇ, 30 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[2], Ⲇ * 8);
		Δ.save();
		Δ.translate(150 * Ⲇ, 150 * Ⲇ);
		Δ.rotate(0);
		ΔΔΔΔ(Δ, ⵠⵠⲆᐃⲆ, 31 * Ⲇ, Ⲇ * 30);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[6], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 150, 207 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 150, Ⲇ * 151, Ⲇ * 150, Ⲇ * 101, 150 * Ⲇ, 94 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠΔΔⲆΔ, Δⵠ[2], ⵠⵠΔⲆⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(118 * Ⲇ, Ⲇ * 100);
		Δ.bezierCurveTo(Ⲇ * 118, 205 * Ⲇ, 118 * Ⲇ, Ⲇ * 207, 118 * Ⲇ, Ⲇ * 200);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆᐃΔᐃ, Δⵠ[ⵠⵠᐃⲆ], ᐃⲆᐃⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(183 * Ⲇ, ΔᐃⵠΔⲆ * Ⲇ);
		Δ.bezierCurveTo(183 * Ⲇ, 203 * Ⲇ, Ⲇ * 183, Ⲇ * 203, Ⲇ * 183, Ⲇ * 200);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃⲆⲆⲆᐃ, Δⵠ[2], ᐃⲆᐃⵠᐃ * Ⲇ);
		return ᐃⵠ
	}
	const ᐃΔⲆΔ = ⲆⵠΔΔ;

	function ⲆᐃⲆᐃᐃᐃᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 115 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 585;
		Δ.scale(-ⵠⵠⵠⲆ, 1);
		Δ.translate(Ⲇ * -110, 0);
		Δ.translate(Ⲇ * ⵠᐃⲆⵠᐃ, ΔⵠⲆⵠⵠ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ᐃⵠᐃᐃ;
		Δ.save();
		Δ.translate(51.5 * Ⲇ, 342 * Ⲇ);
		ᐃΔⵠ(Δ, -14.5 * Ⲇ, Ⲇ * -225, Ⲇ * 29, 450 * Ⲇ, 20 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 54, Ⲇ * 83);
		Δ.bezierCurveTo(Ⲇ * 70, 69 * Ⲇ, Ⲇ * 78, 62 * Ⲇ, 82 * Ⲇ, Ⲇ * 40);
		Δ.bezierCurveTo(Ⲇ * 93, 48 * Ⲇ, 103 * Ⲇ, 64 * Ⲇ, 95 * Ⲇ, Ⲇ * 102);
		Δ.bezierCurveTo(Ⲇ * 60, 114 * Ⲇ, 53 * Ⲇ, Ⲇ * 103, 54 * Ⲇ, Ⲇ * 85);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(95 * Ⲇ, Ⲇ * 97);
		Δ.bezierCurveTo(Ⲇ * 56, Ⲇ * 102, 43 * Ⲇ, Ⲇ * 77, Ⲇ * 71, Ⲇ * 6);
		Δ.bezierCurveTo(34 * Ⲇ, Ⲇ * ⵠᐃⲆⵠᐃ, 6 * Ⲇ, 43 * Ⲇ, Δᐃᐃⵠ * Ⲇ, Ⲇ * 76);
		Δ.bezierCurveTo(4 * Ⲇ, 98 * Ⲇ, ⵠⵠⲆΔⵠ * Ⲇ, Ⲇ * 130, Ⲇ * 64, Ⲇ * 130);
		Δ.bezierCurveTo(Ⲇ * 76, 129 * Ⲇ, Ⲇ * 95, Ⲇ * 113, 97 * Ⲇ, 97 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 55, 176 * Ⲇ);
		Δ.bezierCurveTo(74 * Ⲇ, 175 * Ⲇ, Ⲇ * 82, 169 * Ⲇ, 96 * Ⲇ, 155 * Ⲇ);
		Δ.bezierCurveTo(103 * Ⲇ, Ⲇ * 183, 95 * Ⲇ, 214 * Ⲇ, Ⲇ * 54, Ⲇ * 219);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 50, 176 * Ⲇ);
		Δ.bezierCurveTo(25 * Ⲇ, 177 * Ⲇ, Ⲇ * ΔⵠⲆᐃⲆ, Ⲇ * 164, Ⲇ * 7, Ⲇ * 156);
		Δ.bezierCurveTo(0 * Ⲇ, 186 * Ⲇ, ⵠᐃⲆⵠᐃ * Ⲇ, Ⲇ * 201, 43 * Ⲇ, 220 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 35, 403 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 47, Ⲇ * 412, 58 * Ⲇ, 412 * Ⲇ, 67 * Ⲇ, 403 * Ⲇ);
		Δ.bezierCurveTo(66.5 * Ⲇ, 434 * Ⲇ, Ⲇ * 66.5, 434 * Ⲇ, 66 * Ⲇ, 465 * Ⲇ);
		Δ.bezierCurveTo(56 * Ⲇ, Ⲇ * 480, 40 * Ⲇ, Ⲇ * 472, Ⲇ * 36, Ⲇ * 465);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(59 * Ⲇ, Ⲇ * 67);
		Δ.bezierCurveTo(47 * Ⲇ, Ⲇ * 97, 18 * Ⲇ, Ⲇ * 117, ΔⲆⲆᐃΔᐃΔ * Ⲇ, Ⲇ * 110);
		Δ.bezierCurveTo(11 * Ⲇ, 115 * Ⲇ, Ⲇ * 15, Ⲇ * 122, 23 * Ⲇ, 124 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 46, Ⲇ * 118, 52 * Ⲇ, Ⲇ * 113, Ⲇ * 62, 86 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(30 * Ⲇ, Ⲇ * 125);
		Δ.bezierCurveTo(47 * Ⲇ, 136 * Ⲇ, Ⲇ * 57, Ⲇ * 134, 77 * Ⲇ, 127 * Ⲇ);
		Δ.bezierCurveTo(71 * Ⲇ, Ⲇ * 158, 71 * Ⲇ, 159 * Ⲇ, Ⲇ * 66, Ⲇ * 159);
		Δ.bezierCurveTo(50.5 * Ⲇ, 156.5 * Ⲇ, Ⲇ * 50.5, Ⲇ * 156.5, 35 * Ⲇ, 154 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 31, 145 * Ⲇ, 31 * Ⲇ, 136 * Ⲇ, 31 * Ⲇ, Ⲇ * 125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(35 * Ⲇ, 171 * Ⲇ);
		Δ.bezierCurveTo(32 * Ⲇ, 221 * Ⲇ, Ⲇ * 43, Ⲇ * 233, Ⲇ * 70, Ⲇ * 247);
		Δ.bezierCurveTo(Ⲇ * 75, Ⲇ * 234, 75 * Ⲇ, Ⲇ * 230, 72 * Ⲇ, Ⲇ * 221);
		Δ.bezierCurveTo(Ⲇ * 48, 206 * Ⲇ, Ⲇ * 54, Ⲇ * 188, 50 * Ⲇ, Ⲇ * 176);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(60 * Ⲇ, Ⲇ * 68);
		Δ.bezierCurveTo(63 * Ⲇ, Ⲇ * 69, Ⲇ * 65, 71 * Ⲇ, 67 * Ⲇ, 77 * Ⲇ);
		Δ.bezierCurveTo(61 * Ⲇ, 123 * Ⲇ, Ⲇ * 52, Ⲇ * 137, 42 * Ⲇ, 150 * Ⲇ);
		Δ.bezierCurveTo(38 * Ⲇ, 151 * Ⲇ, 38 * Ⲇ, 151 * Ⲇ, 34 * Ⲇ, 152 * Ⲇ);
		Δ.bezierCurveTo(33 * Ⲇ, Ⲇ * 146.5, Ⲇ * 33, Ⲇ * 146.5, 32 * Ⲇ, Ⲇ * 141);
		Δ.bezierCurveTo(49 * Ⲇ, Ⲇ * 118, Ⲇ * 63, 87 * Ⲇ, 59 * Ⲇ, Ⲇ * 68);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(71 * Ⲇ, Ⲇ * 172);
		Δ.bezierCurveTo(Ⲇ * 56, 222 * Ⲇ, 49 * Ⲇ, 234 * Ⲇ, Ⲇ * 35, Ⲇ * 248);
		Δ.bezierCurveTo(Ⲇ * 30, 236 * Ⲇ, 30 * Ⲇ, 230 * Ⲇ, Ⲇ * 31, Ⲇ * 217);
		Δ.bezierCurveTo(Ⲇ * 44, Ⲇ * 202, 49 * Ⲇ, 191 * Ⲇ, Ⲇ * 52, Ⲇ * 172);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(35 * Ⲇ, Ⲇ * 151);
		Δ.bezierCurveTo(Ⲇ * 27, 165 * Ⲇ, Ⲇ * 31, 173 * Ⲇ, Ⲇ * 36, Ⲇ * 178);
		Δ.bezierCurveTo(Ⲇ * 56, 185 * Ⲇ, 73 * Ⲇ, 184 * Ⲇ, Ⲇ * 71, Ⲇ * 170);
		Δ.bezierCurveTo(Ⲇ * 72, 154 * Ⲇ, Ⲇ * 71, 154 * Ⲇ, Ⲇ * 63, 155 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(Ⲇ * -ⵠᐃⲆⲆΔ, -ⵠᐃⲆⲆΔ * Ⲇ);
		Δ.globalAlpha = ⵠⲆⵠⲆ;
		Δ.save();
		Δ.translate(Ⲇ * 51.5, 342 * Ⲇ);
		ᐃΔⵠ(Δ, -14.5 * Ⲇ, Ⲇ * -225, Ⲇ * 29, Ⲇ * 450, 20 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[Δⵠᐃ], Δⵠ[ⲆᐃᐃⲆ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 54, 83 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 70, Ⲇ * 69, 78 * Ⲇ, 62 * Ⲇ, 82 * Ⲇ, 40 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 93, Ⲇ * 48, 103 * Ⲇ, Ⲇ * 64, 95 * Ⲇ, Ⲇ * 102);
		Δ.bezierCurveTo(60 * Ⲇ, Ⲇ * 114, 53 * Ⲇ, 103 * Ⲇ, 54 * Ⲇ, Ⲇ * 85);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], Ⲇ * ⵠΔᐃᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(95 * Ⲇ, Ⲇ * 97);
		Δ.bezierCurveTo(56 * Ⲇ, 102 * Ⲇ, 43 * Ⲇ, Ⲇ * 77, 71 * Ⲇ, Ⲇ * 6);
		Δ.bezierCurveTo(34 * Ⲇ, Ⲇ * ΔⵠΔᐃΔ, ⲆⵠⲆΔⲆ * Ⲇ, 43 * Ⲇ, Ⲇ * ⲆⵠⲆΔᐃ, 76 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 4, Ⲇ * 98, ⵠΔΔΔΔⵠΔ * Ⲇ, 130 * Ⲇ, 64 * Ⲇ, 130 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 76, 129 * Ⲇ, 95 * Ⲇ, 113 * Ⲇ, Ⲇ * 97, Ⲇ * 97);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[ⵠⲆⵠⵠⵠ], ⵠⲆⵠⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 35, Ⲇ * 403);
		Δ.bezierCurveTo(Ⲇ * 47, Ⲇ * 412, 58 * Ⲇ, 412 * Ⲇ, 67 * Ⲇ, Ⲇ * 403);
		Δ.bezierCurveTo(Ⲇ * 66.5, Ⲇ * 434, Ⲇ * 66.5, Ⲇ * 434, 66 * Ⲇ, Ⲇ * 465);
		Δ.bezierCurveTo(56 * Ⲇ, 480 * Ⲇ, 40 * Ⲇ, 472 * Ⲇ, 36 * Ⲇ, 465 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[ⲆΔⵠΔΔ], Ⲇ * ⵠΔᐃᐃΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 37, Ⲇ * 427);
		Δ.bezierCurveTo(Ⲇ * 47, 435 * Ⲇ, 55 * Ⲇ, 435 * Ⲇ, 67 * Ⲇ, Ⲇ * 427);
		ⵠᐃ(Δ, ΔΔⲆⲆⲆ, Δⵠ[8], Ⲇ * 6);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(36 * Ⲇ, Ⲇ * 448);
		Δ.bezierCurveTo(Ⲇ * 46, Ⲇ * 454, 54 * Ⲇ, Ⲇ * 457, 65 * Ⲇ, Ⲇ * 449);
		ⵠᐃ(Δ, ΔⲆⲆⲆᐃ, Δⵠ[ᐃⲆᐃⵠᐃ], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 55, 176 * Ⲇ);
		Δ.bezierCurveTo(74 * Ⲇ, 175 * Ⲇ, Ⲇ * 82, Ⲇ * 169, 96 * Ⲇ, Ⲇ * 155);
		Δ.bezierCurveTo(Ⲇ * 103, 183 * Ⲇ, Ⲇ * 95, Ⲇ * 214, 54 * Ⲇ, 219 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠⲆᐃⲆ], Ⲇ * 6);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 50, 176 * Ⲇ);
		Δ.bezierCurveTo(25 * Ⲇ, Ⲇ * 177, 16 * Ⲇ, Ⲇ * 164, 7 * Ⲇ, 156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ⵠⵠΔΔ, Ⲇ * 186, 10 * Ⲇ, 201 * Ⲇ, Ⲇ * 43, Ⲇ * 220);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃⲆ], Δⵠ[ΔΔΔⵠ], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 59, 67 * Ⲇ);
		Δ.bezierCurveTo(47 * Ⲇ, Ⲇ * 97, ΔⲆᐃᐃᐃ * Ⲇ, 117 * Ⲇ, Δᐃⵠᐃⵠᐃᐃ * Ⲇ, 110 * Ⲇ);
		Δ.bezierCurveTo(11 * Ⲇ, Ⲇ * 115, Ⲇ * ⵠᐃⵠΔΔ, Ⲇ * 122, Ⲇ * 23, 124 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 46, 118 * Ⲇ, Ⲇ * 52, 113 * Ⲇ, 62 * Ⲇ, Ⲇ * 86);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃΔⵠ], Δⵠ[8], Ⲇ * ⵠΔᐃᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 30, 125 * Ⲇ);
		Δ.bezierCurveTo(47 * Ⲇ, 136 * Ⲇ, 57 * Ⲇ, Ⲇ * 134, 77 * Ⲇ, 127 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 71, Ⲇ * 158, 71 * Ⲇ, 159 * Ⲇ, Ⲇ * 66, Ⲇ * 159);
		Δ.bezierCurveTo(50.5 * Ⲇ, Ⲇ * 156.5, Ⲇ * 50.5, Ⲇ * 156.5, 35 * Ⲇ, Ⲇ * 154);
		Δ.bezierCurveTo(31 * Ⲇ, Ⲇ * 145, Ⲇ * 31, 136 * Ⲇ, 31 * Ⲇ, Ⲇ * 125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃΔⵠ], Δⵠ[8], ⲆⲆᐃⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(35 * Ⲇ, 171 * Ⲇ);
		Δ.bezierCurveTo(32 * Ⲇ, 221 * Ⲇ, Ⲇ * 43, Ⲇ * 233, Ⲇ * 70, 247 * Ⲇ);
		Δ.bezierCurveTo(75 * Ⲇ, Ⲇ * 234, 75 * Ⲇ, 230 * Ⲇ, 72 * Ⲇ, Ⲇ * 221);
		Δ.bezierCurveTo(48 * Ⲇ, Ⲇ * 206, Ⲇ * 54, Ⲇ * 188, Ⲇ * 50, Ⲇ * 176);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃⵠᐃ], Δⵠ[8], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(60 * Ⲇ, Ⲇ * 68);
		Δ.bezierCurveTo(63 * Ⲇ, 69 * Ⲇ, Ⲇ * 65, Ⲇ * 71, 67 * Ⲇ, 77 * Ⲇ);
		Δ.bezierCurveTo(61 * Ⲇ, Ⲇ * 123, 52 * Ⲇ, Ⲇ * 137, Ⲇ * 42, Ⲇ * 150);
		Δ.bezierCurveTo(Ⲇ * 38, Ⲇ * 151, Ⲇ * 38, 151 * Ⲇ, Ⲇ * 34, 152 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 33, 146.5 * Ⲇ, Ⲇ * 33, 146.5 * Ⲇ, Ⲇ * 32, 141 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 49, 118 * Ⲇ, 63 * Ⲇ, Ⲇ * 87, Ⲇ * 59, 68 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[ⲆᐃⲆᐃᐃ], Ⲇ * ⵠⲆⵠⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 71, Ⲇ * 172);
		Δ.bezierCurveTo(56 * Ⲇ, 222 * Ⲇ, 49 * Ⲇ, Ⲇ * 234, 35 * Ⲇ, 248 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 30, 236 * Ⲇ, 30 * Ⲇ, 230 * Ⲇ, Ⲇ * 31, Ⲇ * 217);
		Δ.bezierCurveTo(44 * Ⲇ, 202 * Ⲇ, Ⲇ * 49, Ⲇ * 191, 52 * Ⲇ, 172 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆΔΔ], Δⵠ[8], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(35 * Ⲇ, 151 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 27, Ⲇ * 165, 31 * Ⲇ, Ⲇ * 173, Ⲇ * 36, 178 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 56, 185 * Ⲇ, Ⲇ * 73, Ⲇ * 184, Ⲇ * 71, Ⲇ * 170);
		Δ.bezierCurveTo(Ⲇ * 72, Ⲇ * 154, 71 * Ⲇ, Ⲇ * 154, Ⲇ * 63, Ⲇ * 155);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[8], ᐃⲆΔⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(53 * Ⲇ, 113 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 65, Ⲇ * 140, Ⲇ * 75, Ⲇ * 166, 52 * Ⲇ, 169 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 29, Ⲇ * 168, Ⲇ * 41, Ⲇ * 143, Ⲇ * 53, 112 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⲆ], Δⵠ[4], ΔΔΔᐃΔ * Ⲇ);
		return ᐃⵠ
	}

	function ΔΔΔⲆⵠΔⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 175;
		ᐃⵠ.height = 169 * Ⲇ;
		Δ.globalAlpha = .5;
		Δ.translate(ᐃⲆΔ, ᐃΔΔΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(19 * Ⲇ, Ⲇ * 139);
		Δ.bezierCurveTo(Ⲇ * 18, 163 * Ⲇ, Ⲇ * 22, Ⲇ * 156, 53 * Ⲇ, Ⲇ * 157);
		Δ.bezierCurveTo(97.5 * Ⲇ, 157 * Ⲇ, 97.5 * Ⲇ, Ⲇ * 157, Ⲇ * 142, Ⲇ * 157);
		Δ.bezierCurveTo(150 * Ⲇ, Ⲇ * 157, Ⲇ * 153, Ⲇ * 156, Ⲇ * 154, 142 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]);
		Δ.globalAlpha = ᐃⲆⲆ;
		Δ.translate(ⵠⵠΔΔ, -ⵠᐃⵠⵠ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 86.5, 81.5 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -66.5, Ⲇ * -65.5, 133 * Ⲇ, Ⲇ * 131, ᐃᐃᐃⲆⵠ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[ΔⵠⲆⲆ], 5 * Ⲇ);
		Δ.save();
		Δ.translate(84.5 * Ⲇ, Ⲇ * 79);
		ᐃΔⵠ(Δ, -50.5 * Ⲇ, Ⲇ * -49, Ⲇ * 101, Ⲇ * 98, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔΔ], Δⵠ[2], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(42 * Ⲇ, Ⲇ * 54);
		Δ.bezierCurveTo(37 * Ⲇ, Ⲇ * 48, Ⲇ * 39, 44 * Ⲇ, 38 * Ⲇ, Ⲇ * 41);
		Δ.bezierCurveTo(42 * Ⲇ, Ⲇ * 40, 45 * Ⲇ, 40 * Ⲇ, Ⲇ * 50, 41 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 85, 36 * Ⲇ, 98 * Ⲇ, 37 * Ⲇ, Ⲇ * 116, Ⲇ * 42);
		Δ.bezierCurveTo(132 * Ⲇ, 39 * Ⲇ, Ⲇ * 132, 39 * Ⲇ, 133 * Ⲇ, 56 * Ⲇ);
		Δ.bezierCurveTo(136 * Ⲇ, 73 * Ⲇ, 136 * Ⲇ, 84 * Ⲇ, 132 * Ⲇ, Ⲇ * 106);
		Δ.bezierCurveTo(Ⲇ * 47, Ⲇ * 113, Ⲇ * 85.5, 106 * Ⲇ, 39 * Ⲇ, Ⲇ * 106);
		Δ.bezierCurveTo(32 * Ⲇ, 81 * Ⲇ, Ⲇ * 38, 60 * Ⲇ, Ⲇ * 42, Ⲇ * 55);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔⵠⲆ], Δⵠ[5], Ⲇ * ⲆᐃΔⲆⵠ);
		Δ.save();
		Δ.translate(28 * Ⲇ, Ⲇ * 24);
		Δ.rotate(ΔᐃⲆⲆ);
		ᐃΔⵠ(Δ, Ⲇ * -14, -14 * Ⲇ, Ⲇ * 28, 28 * Ⲇ, ΔΔᐃⵠΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[ⵠⲆΔᐃ], Ⲇ * 5);
		Δ.save();
		Δ.translate(143 * Ⲇ, 23 * Ⲇ);
		Δ.rotate(ⵠⵠⲆΔ);
		ᐃΔⵠ(Δ, Ⲇ * -14, -ΔⲆⵠᐃⲆⵠⵠ * Ⲇ, 28 * Ⲇ, Ⲇ * 28, Ⲇ * ΔΔⲆΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔΔⵠⲆ], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(55 * Ⲇ, 80 * Ⲇ);
		Δ.bezierCurveTo(73 * Ⲇ, Ⲇ * 78, Ⲇ * 84, 74 * Ⲇ, Ⲇ * 100, 64 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 111, 57 * Ⲇ, 125 * Ⲇ, Ⲇ * 67, 108 * Ⲇ, 84 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 96, 95 * Ⲇ, Ⲇ * 86, Ⲇ * 96, 70 * Ⲇ, 88 * Ⲇ);
		Δ.bezierCurveTo(62.5 * Ⲇ, 84 * Ⲇ, Ⲇ * 62.5, 84 * Ⲇ, 55 * Ⲇ, 80 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ΔΔΔΔᐃ * Ⲇ, Ⲇ * 112);
		Δ.bezierCurveTo(Ⲇ * ⵠⵠΔΔⵠ, Ⲇ * 146, 27 * Ⲇ, 152 * Ⲇ, Ⲇ * 37, 149 * Ⲇ);
		Δ.bezierCurveTo(78 * Ⲇ, Ⲇ * 155, Ⲇ * 128, Ⲇ * 150, Ⲇ * 146, Ⲇ * 150);
		Δ.bezierCurveTo(Ⲇ * 158, Ⲇ * 144, Ⲇ * 158, 121 * Ⲇ, 153 * Ⲇ, Ⲇ * 114);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[9], Ⲇ * ⲆⲆⲆᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(127 * Ⲇ, Ⲇ * 111);
		Δ.bezierCurveTo(Ⲇ * 133, 136 * Ⲇ, 115 * Ⲇ, Ⲇ * 149, Ⲇ * 88, Ⲇ * 150);
		Δ.bezierCurveTo(119.5 * Ⲇ, 151 * Ⲇ, 119.5 * Ⲇ, Ⲇ * 151, Ⲇ * 151, Ⲇ * 152);
		Δ.bezierCurveTo(Ⲇ * 159, Ⲇ * 136, Ⲇ * 155, Ⲇ * 126, Ⲇ * 154, Ⲇ * 113);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⲆΔᐃΔᐃ]);
		Δ.globalAlpha = .5;
		Δ.translate(0, 3 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(15 * Ⲇ, 117 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 34, 109 * Ⲇ, 61 * Ⲇ, Ⲇ * 106, 94 * Ⲇ, 109 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 126, Ⲇ * 110, 142 * Ⲇ, Ⲇ * 113, Ⲇ * 154, 119 * Ⲇ);
		Δ.bezierCurveTo(154 * Ⲇ, 123 * Ⲇ, Ⲇ * 154, Ⲇ * 123, 154 * Ⲇ, 127 * Ⲇ);
		Δ.bezierCurveTo(127 * Ⲇ, Ⲇ * 118, ᐃΔᐃᐃΔⲆᐃ * Ⲇ, 122 * Ⲇ, ⲆᐃⲆᐃⵠᐃᐃ * Ⲇ, 129 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ]);
		Δ.globalAlpha = ΔΔΔᐃ;
		Δ.translate(0, -3 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(14 * Ⲇ, 127 * Ⲇ);
		Δ.bezierCurveTo(13 * Ⲇ, 117 * Ⲇ, ⵠⵠΔᐃᐃⲆⲆ * Ⲇ, Ⲇ * 109, ⲆⲆⲆΔⵠ * Ⲇ, 103 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 16, 95 * Ⲇ, Ⲇ * 21, 92 * Ⲇ, 60 * Ⲇ, 93 * Ⲇ);
		Δ.bezierCurveTo(91 * Ⲇ, 93 * Ⲇ, 118 * Ⲇ, Ⲇ * 93, 143 * Ⲇ, 96 * Ⲇ);
		Δ.bezierCurveTo(151 * Ⲇ, Ⲇ * 96, 155 * Ⲇ, 99 * Ⲇ, Ⲇ * 156, Ⲇ * 112);
		Δ.bezierCurveTo(157 * Ⲇ, 124 * Ⲇ, 157 * Ⲇ, 127 * Ⲇ, 156 * Ⲇ, 128 * Ⲇ);
		Δ.bezierCurveTo(138 * Ⲇ, 112 * Ⲇ, ⵠⵠⲆᐃⵠ * Ⲇ, Ⲇ * 118, 84 * Ⲇ, 118 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 28, Ⲇ * 118, ΔᐃⲆⲆⲆΔⲆ * Ⲇ, 120 * Ⲇ, Ⲇ * 16, Ⲇ * 127);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], Ⲇ * 5);
		Δ.save();
		Δ.translate(Ⲇ * 27.5, Ⲇ * 138.5);
		ᐃΔⵠ(Δ, Ⲇ * -13.5, Ⲇ * -14.5, 27 * Ⲇ, 29 * Ⲇ, Ⲇ * 4);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆᐃᐃⲆ], Ⲇ * ΔⲆⵠⵠ);
		Δ.save();
		Δ.translate(143.5 * Ⲇ, Ⲇ * 137);
		ᐃΔⵠ(Δ, -13.5 * Ⲇ, -ⵠⵠⲆⵠⵠ * Ⲇ, 27 * Ⲇ, 28 * Ⲇ, 4 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 5 * Ⲇ);
		return ᐃⵠ
	}

	function ΔᐃᐃⲆⵠⲆᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 304 * Ⲇ;
		ᐃⵠ.height = 278 * Ⲇ;
		Δ.translate(ΔΔⲆΔΔ * Ⲇ, Ⲇ * 25);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(128 * Ⲇ, Ⲇ * 137);
		Δ.bezierCurveTo(Ⲇ * 155, 144 * Ⲇ, 223 * Ⲇ, 143 * Ⲇ, 256 * Ⲇ, Ⲇ * 122);
		Δ.bezierCurveTo(249 * Ⲇ, Ⲇ * 180, 210 * Ⲇ, Ⲇ * 227, Ⲇ * 164, 242 * Ⲇ);
		Δ.bezierCurveTo(74 * Ⲇ, 213 * Ⲇ, Ⲇ * 99, Ⲇ * 166, Ⲇ * 127, 138 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(284 * Ⲇ, Ⲇ * 52);
		Δ.bezierCurveTo(126 * Ⲇ, 112 * Ⲇ, Ⲇ * 89, Ⲇ * 177, Ⲇ * 170, 241 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 103, 275 * Ⲇ, ᐃⵠⲆᐃᐃᐃᐃ * Ⲇ, Ⲇ * 239, 12 * Ⲇ, 159 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ⲆᐃΔⲆⵠ, Ⲇ * 76, 75 * Ⲇ, Ⲇ * ΔΔΔⵠ, Ⲇ * 165, 13 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 233, ⵠⵠᐃⲆΔⲆΔ * Ⲇ, 260 * Ⲇ, 33 * Ⲇ, Ⲇ * 284, 52 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(-10 * Ⲇ, -25 * Ⲇ);
		Δ.globalAlpha = ⲆⵠⲆ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(128 * Ⲇ, Ⲇ * 137);
		Δ.bezierCurveTo(Ⲇ * 155, Ⲇ * 144, Ⲇ * 223, 143 * Ⲇ, ⵠᐃⲆᐃΔⵠⵠ * Ⲇ, 122 * Ⲇ);
		Δ.bezierCurveTo(249 * Ⲇ, 180 * Ⲇ, 210 * Ⲇ, Ⲇ * 227, Ⲇ * 164, Ⲇ * 242);
		Δ.bezierCurveTo(Ⲇ * 74, Ⲇ * 213, Ⲇ * 99, 166 * Ⲇ, Ⲇ * 127, 138 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * ᐃΔᐃᐃΔⲆᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(284 * Ⲇ, Ⲇ * 52);
		Δ.bezierCurveTo(126 * Ⲇ, Ⲇ * 112, Ⲇ * 89, Ⲇ * 177, Ⲇ * 170, 241 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 103, Ⲇ * 275, Ⲇ * ⲆⲆⲆⲆᐃ, 239 * Ⲇ, Ⲇ * 12, Ⲇ * 159);
		Δ.bezierCurveTo(5 * Ⲇ, Ⲇ * 76, Ⲇ * 75, Ⲇ * ᐃᐃⵠΔ, 165 * Ⲇ, Ⲇ * ⲆᐃᐃⵠΔΔᐃ);
		Δ.bezierCurveTo(233 * Ⲇ, 15 * Ⲇ, 260 * Ⲇ, Ⲇ * 33, 284 * Ⲇ, 52 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ], Δⵠ[ΔⲆⵠΔⲆ], ⵠⵠⲆΔⲆ * Ⲇ);
		return ᐃⵠ
	}

	function ⲆΔᐃΔΔⲆΔΔᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 81 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 350;
		Δ.globalAlpha = Δⵠᐃⵠ ? .6 : 1;
		Δ.translate(ⵠᐃΔ, ⵠΔⲆᐃ * Ⲇ);
		Δ.save();
		Δ.translate(35 * Ⲇ, 160 * Ⲇ);
		Δ.rotate(ⵠⵠⲆΔ);
		ᐃΔⵠ(Δ, Ⲇ * -ⵠΔᐃᐃΔ, Ⲇ * -100.5, 12 * Ⲇ, 240 * Ⲇ, ΔⵠΔᐃΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(ⲆⲆΔ, Ⲇ * -5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.save();
		Δ.translate(Ⲇ * -6, ⵠⵠᐃⲆⲆᐃᐃ * Ⲇ);
		Δ.moveTo(Ⲇ * 26.0714111328125, Ⲇ * 50.9);
		Δ.bezierCurveTo(Ⲇ * 32.0714111328125, 35.892852783203125 * Ⲇ, Ⲇ * 39.0714111328125, Ⲇ * 18.892852783203125, 45.0714111328125 * Ⲇ, Ⲇ * 7.892852783203125);
		Δ.bezierCurveTo(Ⲇ * 51.0714111328125, 13.892852783203125 * Ⲇ, 56.0714111328125 * Ⲇ, Ⲇ * 36.892852783203125, 60.0714111328125 * Ⲇ, Ⲇ * 50.892852783203125);
		Δ.bezierCurveTo(Ⲇ * 52.5714111328125, Ⲇ * 58.892852783203125, Ⲇ * 52.5714111328125, 58.892852783203125 * Ⲇ, 45.0714111328125 * Ⲇ, Ⲇ * 66.89285278320312);
		Δ.bezierCurveTo(Ⲇ * 37.0714111328125, Ⲇ * 58.892852783203125, Ⲇ * 37.0714111328125, Ⲇ * 58.892852783203125, Ⲇ * 29.0714111328125, 50.892852783203125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		Δ.restore();
		Δ.globalAlpha = 1;
		Δ.save();
		Δ.translate(ⲆⲆᐃⲆ, -ⲆⲆᐃᐃⵠ * Ⲇ);
		Δ.translate(Ⲇ * 45.0714111328125, 149.39285278320312 * Ⲇ);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, -6 * Ⲇ, Ⲇ * -94.5, Ⲇ * ᐃⲆᐃⲆⵠ, 250 * Ⲇ, Ⲇ * ⵠⵠⵠΔΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃᐃⲆⵠ], 6 * Ⲇ);
		Δ.translate(0, Ⲇ * 0);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(29.0714111328125 * Ⲇ, Ⲇ * 50.9);
		Δ.bezierCurveTo(Ⲇ * 32.0714111328125, Ⲇ * 35.892852783203125, Ⲇ * 39.0714111328125, 18.892852783203125 * Ⲇ, Ⲇ * 45.0714111328125, 7.892852783203125 * Ⲇ);
		Δ.bezierCurveTo(51.0714111328125 * Ⲇ, 13.892852783203125 * Ⲇ, Ⲇ * 56.0714111328125, Ⲇ * 36.892852783203125, 60.0714111328125 * Ⲇ, Ⲇ * 50.892852783203125);
		Δ.bezierCurveTo(52.5714111328125 * Ⲇ, 58.892852783203125 * Ⲇ, Ⲇ * 52.5714111328125, Ⲇ * 58.892852783203125, 45.0714111328125 * Ⲇ, Ⲇ * 66.89285278320312);
		Δ.bezierCurveTo(Ⲇ * 37.0714111328125, Ⲇ * 58.892852783203125, Ⲇ * 37.0714111328125, Ⲇ * 58.892852783203125, Ⲇ * 29.0714111328125, 50.892852783203125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃΔ], Δⵠ[4], Ⲇ * ⲆⵠⲆΔⲆ);
		return ᐃⵠ
	}

	function ⵠᐃΔΔⲆⲆᐃΔᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 170;
		var ΔⵠⲆ = 172 * Ⲇ;
		var Ⲇᐃ = ᐃΔΔ / 2;
		var ⲆⲆⲆ = ΔⵠⲆ / 2;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ);
		Δ.save();
		for (var ᐃⲆ = 0; ᐃⲆ < ΔⲆΔΔᐃ; ᐃⲆ++) {
			Δ.rotate(Math.PI / 5);
			Δ.save();
			Δ.translate(65 * Ⲇ, 0);
			ΔΔΔΔ(Δ, 3, Ⲇ * 18, ᐃΔⵠᐃⲆ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ]);
			Δ.restore()
		}
		Δ.restore();
		ⵠΔᐃ(Δ, 0, 0, 40 * Ⲇ, ⲆⲆᐃⲆ);
		ⵠᐃ(Δ, ΔⲆᐃⲆⵠ, Δⵠ[Δⵠⵠ], Ⲇ * ΔⲆⵠΔᐃ);
		ⵠΔᐃ(Δ, 0, 0, 20 * Ⲇ, ᐃⲆΔᐃ);
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
		return ᐃⵠ
	}

	function ⲆᐃⲆⵠΔᐃⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 138 * Ⲇ;
		ᐃⵠ.height = 133 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .3 : 1;
		Δ.translate(Ⲇⵠᐃ, ⵠᐃⵠΔᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 26, Ⲇ * 79.640625);
		Δ.bezierCurveTo(13 * Ⲇ, Ⲇ * 84.640625, ⲆⲆⵠⵠᐃ * Ⲇ, Ⲇ * 86.640625, ᐃΔᐃᐃⲆ * Ⲇ, Ⲇ * 78.640625);
		Δ.bezierCurveTo(Ⲇ * ⵠⲆⵠⵠⵠ, 69.640625 * Ⲇ, Ⲇ * 15, 67.640625 * Ⲇ, Ⲇ * 31, 62.640625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 63, 55.640625 * Ⲇ, 85 * Ⲇ, Ⲇ * 57.640625, 104 * Ⲇ, Ⲇ * 63.640625);
		Δ.bezierCurveTo(Ⲇ * 131, 69.640625 * Ⲇ, Ⲇ * 132, 71.640625 * Ⲇ, Ⲇ * 131, Ⲇ * 78.640625);
		Δ.bezierCurveTo(Ⲇ * 131, 91.640625 * Ⲇ, 112 * Ⲇ, Ⲇ * 80.640625, 91 * Ⲇ, Ⲇ * 75.640625);
		Δ.bezierCurveTo(Ⲇ * 51, Ⲇ * 70.640625, 45 * Ⲇ, 74.640625 * Ⲇ, Ⲇ * 28, 78.640625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ⵠⲆⲆᐃᐃ, Ⲇ * 82.640625);
		Δ.bezierCurveTo(Ⲇ * 40, Ⲇ * 107.640625, Ⲇ * 53, 104.640625 * Ⲇ, Ⲇ * 67, 106.640625 * Ⲇ);
		Δ.bezierCurveTo(101 * Ⲇ, Ⲇ * 103.640625, 117 * Ⲇ, Ⲇ * 93.640625, 127 * Ⲇ, 84.640625 * Ⲇ);
		Δ.bezierCurveTo(135 * Ⲇ, 95.640625 * Ⲇ, 131 * Ⲇ, 107.640625 * Ⲇ, Ⲇ * 110, 118.640625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 78, 129.640625 * Ⲇ, 67 * Ⲇ, 130.640625 * Ⲇ, 27 * Ⲇ, Ⲇ * 119.640625);
		Δ.bezierCurveTo(Ⲇ * 0, 105.640625 * Ⲇ, Ⲇ * 8, Ⲇ * 83.640625, 10 * Ⲇ, 84.640625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃ]);
		Δ.globalAlpha = 1;
		Δ.translate(ⲆⲆΔ, -ΔΔⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ᐃᐃΔⲆⲆ * Ⲇ, Ⲇ * 73.640625);
		Δ.bezierCurveTo(Ⲇ * 7, 23.640625 * Ⲇ, Ⲇ * 33, 19.640625 * Ⲇ, 71 * Ⲇ, Ⲇ * 17.640625);
		Δ.bezierCurveTo(129 * Ⲇ, 19.640625 * Ⲇ, Ⲇ * 130, Ⲇ * 45.640625, Ⲇ * 130, Ⲇ * 76.640625);
		Δ.bezierCurveTo(Ⲇ * 90, Ⲇ * 63.640625, Ⲇ * 85, Ⲇ * 63.640625, 73 * Ⲇ, Ⲇ * 63.640625);
		Δ.bezierCurveTo(Ⲇ * 38, 63.640625 * Ⲇ, 33 * Ⲇ, Ⲇ * 66.640625, ⲆΔⵠΔΔ * Ⲇ, 73.640625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠΔⵠⲆ], Ⲇ * ᐃᐃⵠΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 72, Ⲇ * 28.640625);
		Δ.bezierCurveTo(51 * Ⲇ, 25.640625 * Ⲇ, 56 * Ⲇ, 7.640625 * Ⲇ, Ⲇ * 70, 5.640625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 94, Ⲇ * 7.640625, 87 * Ⲇ, Ⲇ * 29.640625, Ⲇ * 72, 28.640625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠΔΔΔ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(51 * Ⲇ, 26.640625 * Ⲇ);
		Δ.bezierCurveTo(42 * Ⲇ, Ⲇ * 29.640625, 43 * Ⲇ, 31.640625 * Ⲇ, 42 * Ⲇ, Ⲇ * 37.640625);
		ⵠᐃ(Δ, ᐃⲆⲆⲆᐃ, Δⵠ[2], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 90, 26.640625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 100, Ⲇ * 28.640625, Ⲇ * 98, 34.640625 * Ⲇ, Ⲇ * 99, 38.640625 * Ⲇ);
		ⵠᐃ(Δ, ⵠᐃⲆⵠⲆ, Δⵠ[2], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(26 * Ⲇ, Ⲇ * 79.640625);
		Δ.bezierCurveTo(Ⲇ * ΔᐃΔⲆΔ, Ⲇ * 84.640625, ⲆΔΔΔΔ * Ⲇ, 86.640625 * Ⲇ, ᐃᐃⲆΔΔ * Ⲇ, Ⲇ * 78.640625);
		Δ.bezierCurveTo(Ⲇ * ᐃⲆΔⵠⵠ, 69.640625 * Ⲇ, Ⲇ * 15, Ⲇ * 67.640625, 31 * Ⲇ, 62.640625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 63, Ⲇ * 55.640625, Ⲇ * 85, 57.640625 * Ⲇ, Ⲇ * 104, 63.640625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 131, 69.640625 * Ⲇ, Ⲇ * 132, Ⲇ * 71.640625, 131 * Ⲇ, 78.640625 * Ⲇ);
		Δ.bezierCurveTo(131 * Ⲇ, Ⲇ * 91.640625, 112 * Ⲇ, Ⲇ * 80.640625, Ⲇ * 91, 75.640625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 51, Ⲇ * 70.640625, 45 * Ⲇ, Ⲇ * 74.640625, Ⲇ * 28, 78.640625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃⲆ], Δⵠ[ⲆⲆⲆΔ], Ⲇ * ᐃΔΔΔⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(8 * Ⲇ, 82.640625 * Ⲇ);
		Δ.bezierCurveTo(40 * Ⲇ, Ⲇ * 107.640625, 53 * Ⲇ, 104.640625 * Ⲇ, Ⲇ * 67, 106.640625 * Ⲇ);
		Δ.bezierCurveTo(101 * Ⲇ, 103.640625 * Ⲇ, 117 * Ⲇ, 93.640625 * Ⲇ, Ⲇ * 127, Ⲇ * 84.640625);
		Δ.bezierCurveTo(135 * Ⲇ, 95.640625 * Ⲇ, Ⲇ * 131, Ⲇ * 107.640625, 110 * Ⲇ, Ⲇ * 118.640625);
		Δ.bezierCurveTo(Ⲇ * 78, Ⲇ * 129.640625, Ⲇ * 67, Ⲇ * 130.640625, Ⲇ * 27, Ⲇ * 119.640625);
		Δ.bezierCurveTo(0 * Ⲇ, 105.640625 * Ⲇ, 8 * Ⲇ, 83.640625 * Ⲇ, Ⲇ * ΔⵠⲆᐃΔ, 84.640625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔΔΔ], Δⵠ[ᐃᐃΔⵠⲆ], ⵠⲆᐃⲆ * Ⲇ);
		return ᐃⵠ
	}

	function ΔᐃΔᐃⲆⵠΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 175 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 169;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(17 * Ⲇ, 112 * Ⲇ);
		Δ.bezierCurveTo(ΔⲆᐃΔⵠᐃᐃ * Ⲇ, 146 * Ⲇ, Ⲇ * 27, Ⲇ * 152, Ⲇ * 37, 149 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 78, 155 * Ⲇ, 128 * Ⲇ, Ⲇ * 150, Ⲇ * 146, 150 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 158, 144 * Ⲇ, Ⲇ * 158, Ⲇ * 121, 153 * Ⲇ, 114 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[9], ᐃᐃᐃᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 127, 111 * Ⲇ);
		Δ.bezierCurveTo(133 * Ⲇ, Ⲇ * 136, 115 * Ⲇ, Ⲇ * 149, Ⲇ * 88, 150 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 119.5, 151 * Ⲇ, Ⲇ * 119.5, 151 * Ⲇ, 151 * Ⲇ, Ⲇ * 152);
		Δ.bezierCurveTo(159 * Ⲇ, Ⲇ * 136, 155 * Ⲇ, 126 * Ⲇ, 154 * Ⲇ, Ⲇ * 113);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔᐃΔ]);
		Δ.globalAlpha = .5;
		Δ.translate(0, 3 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 15, Ⲇ * 117);
		Δ.bezierCurveTo(Ⲇ * 34, Ⲇ * 109, Ⲇ * 61, 106 * Ⲇ, 94 * Ⲇ, Ⲇ * 109);
		Δ.bezierCurveTo(Ⲇ * 126, 110 * Ⲇ, 142 * Ⲇ, Ⲇ * 113, Ⲇ * 154, 119 * Ⲇ);
		Δ.bezierCurveTo(154 * Ⲇ, Ⲇ * 123, 154 * Ⲇ, 123 * Ⲇ, 154 * Ⲇ, Ⲇ * 127);
		Δ.bezierCurveTo(127 * Ⲇ, Ⲇ * 118, 15 * Ⲇ, 122 * Ⲇ, Ⲇ * 18, Ⲇ * 129);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ]);
		Δ.globalAlpha = ⲆⲆⵠ;
		Δ.translate(Ⲇⵠᐃ, Ⲇ * -ⲆΔⲆᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 14, Ⲇ * 127);
		Δ.bezierCurveTo(ⵠΔΔⵠⵠᐃⲆ * Ⲇ, 117 * Ⲇ, ⲆⵠΔΔⲆ * Ⲇ, 109 * Ⲇ, Ⲇ * ⲆᐃⲆⵠⵠ, 103 * Ⲇ);
		Δ.bezierCurveTo(16 * Ⲇ, 95 * Ⲇ, 21 * Ⲇ, 92 * Ⲇ, 60 * Ⲇ, 93 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 91, 93 * Ⲇ, 118 * Ⲇ, 93 * Ⲇ, Ⲇ * 143, 96 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 151, 96 * Ⲇ, 155 * Ⲇ, Ⲇ * 99, 156 * Ⲇ, Ⲇ * 112);
		Δ.bezierCurveTo(Ⲇ * 157, Ⲇ * 124, Ⲇ * 157, 127 * Ⲇ, Ⲇ * 156, Ⲇ * 128);
		Δ.bezierCurveTo(138 * Ⲇ, Ⲇ * 112, ⵠᐃⵠⲆᐃᐃΔ * Ⲇ, Ⲇ * 118, 84 * Ⲇ, 118 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 28, Ⲇ * 118, 20 * Ⲇ, Ⲇ * 120, Ⲇ * ⲆⵠΔⵠⲆΔΔ, 127 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔΔⵠ], Δⵠ[ΔΔⵠⵠ], Ⲇ * ᐃᐃᐃᐃ);
		Δ.save();
		Δ.translate(27.5 * Ⲇ, Ⲇ * 138.5);
		ᐃΔⵠ(Δ, -13.5 * Ⲇ, -14.5 * Ⲇ, Ⲇ * 27, 29 * Ⲇ, Ⲇ * ΔⲆⲆⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃⵠΔⲆ], ΔΔⵠΔⵠ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 143.5, Ⲇ * 137);
		ᐃΔⵠ(Δ, -13.5 * Ⲇ, Ⲇ * -ᐃⲆⵠⵠᐃ, Ⲇ * 27, Ⲇ * 28, Ⲇ * 4);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⲆ], Δⵠ[2], 5 * Ⲇ);
		return ᐃⵠ
	}

	function ΔΔΔⲆⵠᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 43 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 209;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(0, 10 * Ⲇ);
		Δ.translate(Ⲇ * Δᐃᐃⵠ, ΔⲆⵠⵠ * Ⲇ);
		Δ.save();
		Δ.translate(21 * Ⲇ, 102.5 * Ⲇ);
		ᐃΔⵠ(Δ, -ΔⲆΔⲆ * Ⲇ, Ⲇ * -76.5, Ⲇ * 8, Ⲇ * 163, Ⲇ * ΔⵠᐃⲆΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ]);
		Δ.translate(ⵠᐃⲆⵠ, Ⲇ * ⵠⵠⵠΔΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ⲆΔᐃΔⵠ, Ⲇ * 10);
		Δ.bezierCurveTo(Ⲇ * 25, Ⲇ * 25.5, 25 * Ⲇ, Ⲇ * 25.5, Ⲇ * 30, Ⲇ * 41);
		Δ.bezierCurveTo(Ⲇ * 25.5, Ⲇ * 38.5, Ⲇ * 25.5, Ⲇ * 38.5, 21 * Ⲇ, Ⲇ * 36);
		Δ.bezierCurveTo(16 * Ⲇ, 38.5 * Ⲇ, Ⲇ * 16, Ⲇ * 38.5, 11 * Ⲇ, 41 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(21 * Ⲇ, Ⲇ * ⵠᐃᐃ);
		Δ.bezierCurveTo(28 * Ⲇ, ⲆⵠΔᐃⲆ * Ⲇ, Ⲇ * 28, Ⲇ * 18, Ⲇ * 35, Ⲇ * 35);
		Δ.bezierCurveTo(Ⲇ * 28.5, Ⲇ * 32, Ⲇ * 28.5, 32 * Ⲇ, Ⲇ * 22, Ⲇ * 29);
		Δ.bezierCurveTo(Ⲇ * 14.5, Ⲇ * 32.5, Ⲇ * 14.5, Ⲇ * 32.5, Ⲇ * ᐃᐃⲆΔΔ, 36 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ⲆᐃᐃᐃΔᐃⲆ, Ⲇ * 146);
		Δ.bezierCurveTo(21 * Ⲇ, Ⲇ * 146, 21 * Ⲇ, 146 * Ⲇ, Ⲇ * 28, Ⲇ * 146);
		Δ.bezierCurveTo(27.5 * Ⲇ, Ⲇ * 147.5, 27.5 * Ⲇ, Ⲇ * 147.5, Ⲇ * 27, Ⲇ * 149);
		Δ.bezierCurveTo(Ⲇ * 27, 160 * Ⲇ, 27 * Ⲇ, Ⲇ * 160, Ⲇ * 27, Ⲇ * 171);
		Δ.bezierCurveTo(27.5 * Ⲇ, 171.5 * Ⲇ, 27.5 * Ⲇ, 171.5 * Ⲇ, Ⲇ * 28, 172 * Ⲇ);
		Δ.bezierCurveTo(21 * Ⲇ, Ⲇ * 172, Ⲇ * 21, 172 * Ⲇ, Ⲇ * Δⵠⵠᐃᐃ, 172 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 14, Ⲇ * 171.5, ⵠⵠΔΔⵠ * Ⲇ, Ⲇ * 171.5, 14 * Ⲇ, Ⲇ * 171);
		Δ.bezierCurveTo(14.5 * Ⲇ, 171.5 * Ⲇ, 14.5 * Ⲇ, Ⲇ * 171.5, Ⲇ * 15, 172 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ⵠⵠⲆΔⵠ, Ⲇ * 160.5, 15 * Ⲇ, 160.5 * Ⲇ, 15 * Ⲇ, 149 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 21, 6 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 26.5, Ⲇ * 18.5, 26.5 * Ⲇ, 18.5 * Ⲇ, Ⲇ * 32, Ⲇ * 31);
		Δ.bezierCurveTo(Ⲇ * 27, Ⲇ * 29, Ⲇ * 27, 29 * Ⲇ, 22 * Ⲇ, Ⲇ * 27);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(ⵠⵠΔΔ, Ⲇ * -ⲆⲆⵠΔΔ);
		Δ.globalAlpha = 1;
		Δ.translate(0, 10 * Ⲇ);
		Δ.translate(Ⲇ * -ᐃᐃⲆⵠᐃ, -5 * Ⲇ);
		Δ.save();
		Δ.translate(21 * Ⲇ, 102.5 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -ΔΔΔⵠ, Ⲇ * -76.5, 8 * Ⲇ, 163 * Ⲇ, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃᐃⵠⵠ], 4 * Ⲇ);
		Δ.translate(0, 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(20 * Ⲇ, Ⲇ * 10);
		Δ.bezierCurveTo(Ⲇ * 25, 25.5 * Ⲇ, 25 * Ⲇ, Ⲇ * 25.5, Ⲇ * 30, Ⲇ * 41);
		Δ.bezierCurveTo(Ⲇ * 25.5, Ⲇ * 38.5, 25.5 * Ⲇ, 38.5 * Ⲇ, Ⲇ * 21, Ⲇ * 36);
		Δ.bezierCurveTo(Ⲇ * ΔᐃⵠⵠⲆᐃΔ, 38.5 * Ⲇ, Ⲇ * ΔⲆⲆⲆⲆΔᐃ, Ⲇ * 38.5, Ⲇ * 11, Ⲇ * 41);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃΔΔΔⲆ], ᐃᐃᐃᐃΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 21, 1 * Ⲇ);
		Δ.bezierCurveTo(28 * Ⲇ, ⲆⵠΔᐃⲆ * Ⲇ, Ⲇ * 28, ⵠⲆΔⵠᐃᐃⲆ * Ⲇ, 35 * Ⲇ, Ⲇ * 35);
		Δ.bezierCurveTo(Ⲇ * 28.5, Ⲇ * 32, 28.5 * Ⲇ, 32 * Ⲇ, Ⲇ * 22, Ⲇ * 29);
		Δ.bezierCurveTo(Ⲇ * 14.5, 32.5 * Ⲇ, Ⲇ * 14.5, 32.5 * Ⲇ, Ⲇ * 7, Ⲇ * 36);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⵠ], Δⵠ[ᐃⵠⵠᐃⵠ], 4 * Ⲇ);
		Δ.translate(0, Ⲇ * 0);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(14 * Ⲇ, Ⲇ * 146);
		Δ.bezierCurveTo(Ⲇ * 21, Ⲇ * 146, 21 * Ⲇ, Ⲇ * 146, 28 * Ⲇ, 146 * Ⲇ);
		Δ.bezierCurveTo(27.5 * Ⲇ, 147.5 * Ⲇ, 27.5 * Ⲇ, Ⲇ * 147.5, 27 * Ⲇ, Ⲇ * 149);
		Δ.bezierCurveTo(27 * Ⲇ, Ⲇ * 160, Ⲇ * 27, Ⲇ * 160, 27 * Ⲇ, 171 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 27.5, 171.5 * Ⲇ, Ⲇ * 27.5, Ⲇ * 171.5, Ⲇ * 28, 172 * Ⲇ);
		Δ.bezierCurveTo(21 * Ⲇ, 172 * Ⲇ, Ⲇ * 21, 172 * Ⲇ, 14 * Ⲇ, 172 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ᐃᐃᐃⵠᐃᐃⲆ, Ⲇ * 171.5, Ⲇ * 14, Ⲇ * 171.5, 14 * Ⲇ, Ⲇ * 171);
		Δ.bezierCurveTo(14.5 * Ⲇ, Ⲇ * 171.5, 14.5 * Ⲇ, Ⲇ * 171.5, 15 * Ⲇ, 172 * Ⲇ);
		Δ.bezierCurveTo(15 * Ⲇ, 160.5 * Ⲇ, ⲆᐃⲆᐃⲆᐃᐃ * Ⲇ, 160.5 * Ⲇ, Ⲇ * 15, Ⲇ * 149);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⲆ], Δⵠ[ᐃⵠΔⲆ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 21, Ⲇ * 6);
		Δ.bezierCurveTo(Ⲇ * 26.5, 18.5 * Ⲇ, Ⲇ * 26.5, 18.5 * Ⲇ, 32 * Ⲇ, 31 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 27, Ⲇ * 29, Ⲇ * 27, Ⲇ * 29, Ⲇ * 22, 27 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8]);
		return ᐃⵠ
	}

	function ⵠᐃⵠⲆΔⵠΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 81 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 626;
		Δ.translate(Ⲇ * 20, Ⲇ * ΔᐃⲆⲆⲆΔⲆ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 55, Ⲇ * 565);
		Δ.bezierCurveTo(Ⲇ * 56, Ⲇ * 586, 53 * Ⲇ, 591 * Ⲇ, 40 * Ⲇ, 592 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 28, Ⲇ * 591, 27 * Ⲇ, Ⲇ * 583, 28 * Ⲇ, Ⲇ * 557);
		Δ.bezierCurveTo(27.5 * Ⲇ, 346 * Ⲇ, 27.5 * Ⲇ, Ⲇ * 346, 27 * Ⲇ, 135 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 26, 74 * Ⲇ, Ⲇ * 36, 26 * Ⲇ, 41 * Ⲇ, 15 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 54, 51 * Ⲇ, 54 * Ⲇ, Ⲇ * 81, 55 * Ⲇ, Ⲇ * 128);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]);
		Δ.translate(-20 * Ⲇ, Ⲇ * -ΔⲆⵠⵠᐃ);
		Δ.globalAlpha = ΔᐃⵠⲆ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(55 * Ⲇ, 565 * Ⲇ);
		Δ.bezierCurveTo(56 * Ⲇ, Ⲇ * 586, Ⲇ * 53, 591 * Ⲇ, 40 * Ⲇ, Ⲇ * 592);
		Δ.bezierCurveTo(Ⲇ * 28, Ⲇ * 591, Ⲇ * 27, 583 * Ⲇ, Ⲇ * 28, Ⲇ * 557);
		Δ.bezierCurveTo(Ⲇ * 27.5, Ⲇ * 346, 27.5 * Ⲇ, 346 * Ⲇ, Ⲇ * 27, Ⲇ * 135);
		Δ.bezierCurveTo(Ⲇ * 26, 74 * Ⲇ, 36 * Ⲇ, Ⲇ * 26, 41 * Ⲇ, Ⲇ * ⲆⲆᐃⵠⲆⵠⵠ);
		Δ.bezierCurveTo(54 * Ⲇ, Ⲇ * 51, 54 * Ⲇ, 81 * Ⲇ, Ⲇ * 55, Ⲇ * 128);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * ⲆΔⵠΔΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 27, 129 * Ⲇ);
		Δ.bezierCurveTo(32 * Ⲇ, Ⲇ * 135, 48 * Ⲇ, 136 * Ⲇ, 53 * Ⲇ, 129 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 56, Ⲇ * 97, Ⲇ * 53, 82 * Ⲇ, Ⲇ * 52, 64 * Ⲇ);
		Δ.bezierCurveTo(49 * Ⲇ, 33 * Ⲇ, Ⲇ * 44, Ⲇ * 27, 41 * Ⲇ, 21 * Ⲇ);
		Δ.bezierCurveTo(31 * Ⲇ, 40 * Ⲇ, Ⲇ * 28, Ⲇ * 84, Ⲇ * 27, 127 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⵠⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(55 * Ⲇ, Ⲇ * 565);
		Δ.bezierCurveTo(56 * Ⲇ, 586 * Ⲇ, Ⲇ * 53, 591 * Ⲇ, 40 * Ⲇ, 592 * Ⲇ);
		Δ.bezierCurveTo(28 * Ⲇ, 591 * Ⲇ, Ⲇ * 27, Ⲇ * 583, Ⲇ * 28, Ⲇ * 557);
		Δ.bezierCurveTo(Ⲇ * 27.5, 346 * Ⲇ, 27.5 * Ⲇ, Ⲇ * 346, Ⲇ * 27, 135 * Ⲇ);
		Δ.bezierCurveTo(26 * Ⲇ, Ⲇ * 74, 36 * Ⲇ, Ⲇ * 26, 41 * Ⲇ, Ⲇ * 15);
		Δ.bezierCurveTo(Ⲇ * 54, Ⲇ * 51, Ⲇ * 54, Ⲇ * 81, Ⲇ * 55, Ⲇ * 128);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⲆᐃᐃⲆ], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 28, 475 * Ⲇ);
		Δ.bezierCurveTo(38 * Ⲇ, Ⲇ * 482, 48 * Ⲇ, 480 * Ⲇ, 54 * Ⲇ, 474 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 54, 509.5 * Ⲇ, 54 * Ⲇ, Ⲇ * 509.5, 54 * Ⲇ, Ⲇ * 545);
		Δ.bezierCurveTo(Ⲇ * 46, 554 * Ⲇ, Ⲇ * 36, 552 * Ⲇ, 28 * Ⲇ, Ⲇ * 545);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔΔΔⲆ], Δⵠ[ΔΔⵠΔⵠ], ⵠⵠΔⲆⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(28 * Ⲇ, Ⲇ * 496);
		Δ.bezierCurveTo(39 * Ⲇ, 506 * Ⲇ, 49 * Ⲇ, Ⲇ * 503, Ⲇ * 54, 496 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[ᐃᐃᐃⲆⲆ], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 28, Ⲇ * 521);
		Δ.bezierCurveTo(Ⲇ * 41, 529 * Ⲇ, 49 * Ⲇ, Ⲇ * 524, 54 * Ⲇ, 520 * Ⲇ);
		ⵠᐃ(Δ, ΔⵠᐃΔᐃ, Δⵠ[ⵠᐃⵠΔᐃ], Ⲇ * ⵠᐃΔᐃⲆ);
		return ᐃⵠ
	}

	function ᐃⲆⵠᐃᐃⲆⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 170 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 170;
		Δ.translate(ᐃⲆᐃ, Ⲇ * ⲆⲆΔΔ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⵠⲆ;
		Δ.save();
		Δ.translate(85 * Ⲇ, 95 * Ⲇ);
		Δ.rotate(1.4);
		ΔΔΔΔ(Δ, ⲆΔᐃᐃⲆ, 60 * Ⲇ, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(85 * Ⲇ, Ⲇ * 82);
		for (var ᐃⲆ = 0; ᐃⲆ < ⵠⵠⵠΔΔ; ᐃⲆ++) {
			Δ.rotate(Math.PI / ⲆΔⲆᐃᐃ);
			Δ.save();
			Δ.translate(Ⲇ * 65, ⵠΔⵠᐃ);
			ΔΔΔΔ(Δ, ⵠⵠⲆᐃ, 21 * Ⲇ, ΔⲆΔⲆ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ᐃΔⲆΔ], Δⵠ[ⵠᐃᐃⲆ], 4 * Ⲇ);
			Δ.restore()
		}
		Δ.save();
		Δ.translate(0 * Ⲇ, 0 * Ⲇ);
		Δ.rotate(.2);
		ΔΔΔΔ(Δ, ⲆⵠⲆⲆⵠ, Ⲇ * 60, Ⲇ * ᐃⲆᐃⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆᐃ], Δⵠ[4], ᐃᐃⵠΔ * Ⲇ);
		Δ.rotate(-.32);
		ΔΔΔΔ(Δ, 9, Ⲇ * 38, ΔⵠΔᐃΔ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃᐃⲆⲆ], Δⵠ[6], ⵠⲆᐃⲆ * Ⲇ);
		Δ.rotate(.68);
		ΔΔΔΔ(Δ, ΔⵠⵠᐃⲆ, 20 * Ⲇ, 8 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[8], Ⲇ * ⵠΔᐃᐃ);
		Δ.restore();
		return ᐃⵠ
	}

	function ⵠⵠΔⲆⲆⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 170;
		ᐃⵠ.height = Ⲇ * 170;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ΔⲆⵠⲆ;
		Δ.translate(0, Δᐃᐃⵠ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 85, 88 * Ⲇ);
		Δ.rotate(1.4);
		ΔΔΔΔ(Δ, 7, Ⲇ * 60, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ᐃΔⲆΔ;
		Δ.translate(Ⲇ * 85, 80 * Ⲇ);
		for (var ᐃⲆ = 0; 10 > ᐃⲆ; ᐃⲆ++) {
			Δ.rotate(Math.PI / ΔΔⵠΔⵠ);
			Δ.save();
			Δ.translate(65 * Ⲇ, 0);
			ΔΔΔΔ(Δ, 3, 21 * Ⲇ, Ⲇ * 4);
			ⵠᐃ(Δ, Δⵠ[ᐃΔⲆΔ], Δⵠ[2], Ⲇ * ΔΔᐃⵠΔ);
			Δ.restore()
		}
		Δ.save();
		Δ.translate(Ⲇ * 0, ⵠΔⵠᐃ * Ⲇ);
		Δ.rotate(1.4);
		ΔΔΔΔ(Δ, 7, 60 * Ⲇ, Ⲇ * ⲆⲆᐃᐃⵠ);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃⵠⵠⲆ], 4 * Ⲇ);
		Δ.rotate(.64);
		ΔΔΔΔ(Δ, 7, Ⲇ * 40, ⲆⲆᐃᐃⵠ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[6], Ⲇ * 4);
		Δ.rotate(.12);
		ΔΔΔΔ(Δ, ᐃᐃᐃⵠᐃⵠⵠ, 23 * Ⲇ, ᐃᐃᐃᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⵠΔᐃ]);
		return ᐃⵠ
	}

	function ⵠⵠⲆΔᐃⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 501 * Ⲇ;
		ᐃⵠ.height = 309 * Ⲇ;
		Δ.translate(0, 6 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : Δⵠᐃ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(126 * Ⲇ, Ⲇ * 184);
		Δ.bezierCurveTo(169 * Ⲇ, Ⲇ * 196, 194 * Ⲇ, 198 * Ⲇ, 227 * Ⲇ, 198 * Ⲇ);
		Δ.bezierCurveTo(235 * Ⲇ, 222 * Ⲇ, Ⲇ * 236, 223 * Ⲇ, 241 * Ⲇ, Ⲇ * 226);
		Δ.bezierCurveTo(Ⲇ * 245, Ⲇ * 228, 257 * Ⲇ, Ⲇ * 228, 263 * Ⲇ, Ⲇ * 226);
		Δ.bezierCurveTo(Ⲇ * 267, 225 * Ⲇ, 270 * Ⲇ, 211 * Ⲇ, 275 * Ⲇ, 198 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 332, 194 * Ⲇ, 347 * Ⲇ, Ⲇ * 192, 372 * Ⲇ, 188 * Ⲇ);
		Δ.bezierCurveTo(366 * Ⲇ, Ⲇ * 174.5, 366 * Ⲇ, 174.5 * Ⲇ, Ⲇ * 360, 161 * Ⲇ);
		Δ.bezierCurveTo(253.5 * Ⲇ, 162 * Ⲇ, Ⲇ * 253.5, 162 * Ⲇ, 147 * Ⲇ, Ⲇ * 163);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ]);
		Δ.globalAlpha = ᐃΔⲆΔ;
		Δ.translate(ⲆⲆᐃ, Ⲇ * -ⵠΔΔⵠⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 100, Ⲇ * 116);
		Δ.bezierCurveTo(Ⲇ * 90, Ⲇ * 101, Ⲇ * 96, Ⲇ * 89, Ⲇ * 106, 83 * Ⲇ);
		Δ.bezierCurveTo(86 * Ⲇ, 79 * Ⲇ, 86 * Ⲇ, 52 * Ⲇ, 93 * Ⲇ, Ⲇ * 38);
		Δ.bezierCurveTo(Ⲇ * 99, Ⲇ * 51, Ⲇ * 107, Ⲇ * 57, 122 * Ⲇ, 63 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 130, Ⲇ * 53, Ⲇ * 141, Ⲇ * 46, 161 * Ⲇ, Ⲇ * 46);
		Δ.bezierCurveTo(Ⲇ * 157, 31 * Ⲇ, 158 * Ⲇ, Ⲇ * 20, 169 * Ⲇ, 6 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 171, Ⲇ * 24, 186 * Ⲇ, Ⲇ * 33, Ⲇ * 198, Ⲇ * 45);
		Δ.bezierCurveTo(Ⲇ * 252, 45 * Ⲇ, 252 * Ⲇ, 45 * Ⲇ, Ⲇ * 306, 45 * Ⲇ);
		Δ.bezierCurveTo(323 * Ⲇ, 33 * Ⲇ, 332 * Ⲇ, 21 * Ⲇ, Ⲇ * 335, Ⲇ * 7);
		Δ.bezierCurveTo(349 * Ⲇ, Ⲇ * 21, Ⲇ * 347, Ⲇ * 36, Ⲇ * 345, Ⲇ * 46);
		Δ.bezierCurveTo(Ⲇ * 364, Ⲇ * 46, Ⲇ * 369, 48 * Ⲇ, Ⲇ * 377, 63 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 398, 58 * Ⲇ, Ⲇ * 403, Ⲇ * 49, Ⲇ * 409, 40 * Ⲇ);
		Δ.bezierCurveTo(419 * Ⲇ, 57 * Ⲇ, 411 * Ⲇ, 79 * Ⲇ, Ⲇ * 398, Ⲇ * 85);
		Δ.bezierCurveTo(405 * Ⲇ, Ⲇ * ΔΔⵠⵠⲆ, Ⲇ * 405, Ⲇ * 106, 401 * Ⲇ, Ⲇ * 118);
		Δ.bezierCurveTo(332.5 * Ⲇ, Ⲇ * 128.5, Ⲇ * 332.5, 128.5 * Ⲇ, Ⲇ * 264, 139 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * ⵠᐃⲆⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 122, Ⲇ * 191);
		Δ.bezierCurveTo(Ⲇ * 123, 237 * Ⲇ, Ⲇ * 135, 245 * Ⲇ, 153 * Ⲇ, 259 * Ⲇ);
		Δ.bezierCurveTo(167 * Ⲇ, 269 * Ⲇ, Ⲇ * 158, Ⲇ * 281, Ⲇ * 118, 276 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 104, Ⲇ * 273, Ⲇ * 98, Ⲇ * 268, 93 * Ⲇ, Ⲇ * 242);
		Δ.bezierCurveTo(89 * Ⲇ, Ⲇ * 220, 92 * Ⲇ, 201 * Ⲇ, Ⲇ * 102, Ⲇ * 179);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠⵠΔⵠ], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(403 * Ⲇ, Ⲇ * 182);
		Δ.bezierCurveTo(414 * Ⲇ, 215 * Ⲇ, 412 * Ⲇ, Ⲇ * 232, Ⲇ * 403, 260 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 395, Ⲇ * 274, 375 * Ⲇ, Ⲇ * 272, 356 * Ⲇ, 270 * Ⲇ);
		Δ.bezierCurveTo(345 * Ⲇ, 268 * Ⲇ, 339 * Ⲇ, 262 * Ⲇ, 354 * Ⲇ, Ⲇ * 252);
		Δ.bezierCurveTo(Ⲇ * 370, 242 * Ⲇ, Ⲇ * 380, 225 * Ⲇ, 384 * Ⲇ, Ⲇ * 184);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠΔⵠⲆ], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 155, Ⲇ * 157);
		Δ.bezierCurveTo(Ⲇ * 146, 189 * Ⲇ, 137 * Ⲇ, Ⲇ * 198, 114 * Ⲇ, Ⲇ * 219);
		Δ.bezierCurveTo(Ⲇ * 104, 212 * Ⲇ, 98 * Ⲇ, 203 * Ⲇ, 89 * Ⲇ, 189 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 82, Ⲇ * 178, 91 * Ⲇ, 164 * Ⲇ, Ⲇ * 93, 136 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔᐃⲆ], Δⵠ[ΔⵠⲆⲆ], Ⲇ * ΔΔⲆΔΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 347, Ⲇ * 162);
		Δ.bezierCurveTo(357 * Ⲇ, 195 * Ⲇ, Ⲇ * 376, 209 * Ⲇ, 387 * Ⲇ, 217 * Ⲇ);
		Δ.bezierCurveTo(409 * Ⲇ, 201 * Ⲇ, 420 * Ⲇ, 181 * Ⲇ, Ⲇ * 416, Ⲇ * 166);
		Δ.bezierCurveTo(Ⲇ * 410, Ⲇ * 150, 412 * Ⲇ, 149 * Ⲇ, 408 * Ⲇ, Ⲇ * 130);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⲆᐃᐃⲆ], Ⲇ * ΔⵠⲆᐃΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(86 * Ⲇ, 134 * Ⲇ);
		Δ.bezierCurveTo(79 * Ⲇ, Ⲇ * 102, 92 * Ⲇ, 84 * Ⲇ, Ⲇ * 108, Ⲇ * 92);
		Δ.bezierCurveTo(Ⲇ * 149, 108 * Ⲇ, 184 * Ⲇ, 111 * Ⲇ, Ⲇ * 242, Ⲇ * 111);
		Δ.bezierCurveTo(294 * Ⲇ, 108 * Ⲇ, 341 * Ⲇ, Ⲇ * 105, 386 * Ⲇ, Ⲇ * 98);
		Δ.bezierCurveTo(Ⲇ * 412, 91 * Ⲇ, Ⲇ * 417, Ⲇ * 86, Ⲇ * 415, Ⲇ * 133);
		Δ.bezierCurveTo(Ⲇ * 413, 160 * Ⲇ, Ⲇ * 413, Ⲇ * 160, Ⲇ * 368, Ⲇ * 174);
		Δ.bezierCurveTo(Ⲇ * 308, Ⲇ * 184, 291 * Ⲇ, Ⲇ * 185, 270 * Ⲇ, 186 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 264, 206 * Ⲇ, 262 * Ⲇ, Ⲇ * 215, 253 * Ⲇ, 215 * Ⲇ);
		Δ.bezierCurveTo(239 * Ⲇ, 217 * Ⲇ, Ⲇ * 239, 211 * Ⲇ, 231 * Ⲇ, Ⲇ * 186);
		Δ.bezierCurveTo(178 * Ⲇ, 184 * Ⲇ, Ⲇ * 156, 179 * Ⲇ, 112 * Ⲇ, Ⲇ * 162);
		Δ.bezierCurveTo(87 * Ⲇ, 151 * Ⲇ, Ⲇ * 90, Ⲇ * 144, 87 * Ⲇ, Ⲇ * 137);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃᐃΔ], Δⵠ[2], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(63 * Ⲇ, 98 * Ⲇ);
		Δ.bezierCurveTo(84 * Ⲇ, 121 * Ⲇ, 109 * Ⲇ, Ⲇ * 102, 124 * Ⲇ, 117 * Ⲇ);
		Δ.bezierCurveTo(138 * Ⲇ, 136 * Ⲇ, Ⲇ * 123, Ⲇ * 165, Ⲇ * 94, Ⲇ * 150);
		Δ.bezierCurveTo(Ⲇ * 66, Ⲇ * 131, Ⲇ * 64, Ⲇ * 115, Ⲇ * 63, 99 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⲆ], Δⵠ[ᐃⵠΔⲆ], Ⲇ * ⵠΔⵠᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 449, Ⲇ * 97);
		Δ.bezierCurveTo(Ⲇ * 446, 143 * Ⲇ, Ⲇ * 415, Ⲇ * 151, Ⲇ * 402, 155 * Ⲇ);
		Δ.bezierCurveTo(386 * Ⲇ, Ⲇ * 157, Ⲇ * 373, Ⲇ * 133, Ⲇ * 391, Ⲇ * 116);
		Δ.bezierCurveTo(402 * Ⲇ, Ⲇ * 106, 432 * Ⲇ, 124 * Ⲇ, Ⲇ * 449, 97 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆⲆ], Δⵠ[ᐃᐃⵠⵠ], Ⲇ * ΔⵠᐃⲆΔ);
		return ᐃⵠ
	}

	function ⲆⲆᐃΔᐃΔⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 170;
		ᐃⵠ.height = Ⲇ * 170;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(0, Ⲇ * ⵠᐃᐃΔ);
		Δ.save();
		Δ.translate(Ⲇ * 85, Ⲇ * 95);
		Δ.rotate(1.4);
		ΔΔΔΔ(Δ, ⲆⲆᐃΔᐃᐃⲆ, Ⲇ * 60, ⵠΔⲆⲆΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ]);
		Δ.globalAlpha = ᐃΔⵠΔ;
		Δ.translate(Ⲇ * 85, 82 * Ⲇ);
		for (var ᐃⲆ = ⵠⵠⵠ; 10 > ᐃⲆ; ᐃⲆ++) {
			Δ.rotate(Math.PI / 5);
			Δ.save();
			Δ.translate(65 * Ⲇ, ⵠᐃΔ);
			ΔΔΔΔ(Δ, 3, Ⲇ * 21, ᐃΔⵠᐃⲆ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[ⲆΔΔⲆ], ΔⲆⲆⲆ * Ⲇ);
			Δ.restore()
		}
		Δ.save();
		Δ.translate(Ⲇ * ⵠⵠⲆΔ, ᐃⲆᐃ * Ⲇ);
		Δ.rotate(ⲆⵠΔΔ);
		ΔΔΔΔ(Δ, 8, 60 * Ⲇ, Ⲇ * ⵠΔⵠᐃⵠ);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], 4 * Ⲇ);
		Δ.rotate(.56);
		ΔΔΔΔ(Δ, 8, Ⲇ * 40, 10 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆᐃ], Δⵠ[6], Ⲇ * 4);
		Δ.rotate(.28);
		ΔΔΔΔ(Δ, ⵠⵠΔⲆⲆ, Ⲇ * 28, Ⲇ * ⲆⲆⲆᐃⲆ);
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃⲆ]);
		Δ.restore();
		return ᐃⵠ
	}

	function ⲆⲆΔⵠΔΔⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 165 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 123;
		Δ.save();
		Δ.translate(81 * Ⲇ, 65 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -78, Ⲇ * -54.5, 156 * Ⲇ, Ⲇ * 109, Ⲇ * 20);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.save();
		Δ.translate(Ⲇ * 81, 58 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -78, -54.5 * Ⲇ, 156 * Ⲇ, 109 * Ⲇ, ⲆⲆⵠΔΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔΔΔᐃ], Δⵠ[ⲆΔⲆΔ], ᐃᐃΔⵠⲆ);
		Δ.save();
		Δ.translate(81 * Ⲇ, 58 * Ⲇ);
		ᐃΔⵠ(Δ, -69 * Ⲇ, -47 * Ⲇ, Ⲇ * 138, Ⲇ * 93, 15 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⵠⲆ], Δⵠ[4], ΔⲆΔⲆ);
		Δ.save();
		Δ.translate(79 * Ⲇ, Ⲇ * 54);
		ᐃΔⵠ(Δ, Ⲇ * -34, Ⲇ * -40, 68 * Ⲇ, 88 * Ⲇ, ⵠⵠᐃΔΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, undefined, Δⵠ[5], ΔⲆⵠΔⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(44 * Ⲇ, Ⲇ * 13);
		Δ.bezierCurveTo(43.5 * Ⲇ, 55 * Ⲇ, Ⲇ * 43.5, 55 * Ⲇ, 43 * Ⲇ, 101 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ΔⵠΔᐃⵠ], ⲆⲆⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(115 * Ⲇ, ⵠᐃⲆΔⲆ * Ⲇ);
		Δ.bezierCurveTo(115 * Ⲇ, 56 * Ⲇ, Ⲇ * 115, 56 * Ⲇ, Ⲇ * 115, 101 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[6], 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(35 * Ⲇ, ᐃⲆΔⵠΔ * Ⲇ);
		Δ.bezierCurveTo(35 * Ⲇ, 56 * Ⲇ, 36 * Ⲇ, Ⲇ * 109, 35 * Ⲇ, Ⲇ * 110);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆⲆⲆᐃ, Δⵠ[7], 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 123, Ⲇ * 6);
		Δ.bezierCurveTo(123 * Ⲇ, 56 * Ⲇ, 123 * Ⲇ, 56 * Ⲇ, Ⲇ * 123, Ⲇ * 110);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠᐃⲆⵠⲆ, Δⵠ[ⲆᐃⲆⲆΔ], 4);
		Δ.save();
		Δ.translate(Ⲇ * 79, Ⲇ * 113);
		ᐃΔⵠ(Δ, Ⲇ * -ΔⲆᐃᐃᐃ, Ⲇ * -ᐃⵠΔⲆ, Ⲇ * 36, Ⲇ * 4, ⵠⲆᐃⲆⵠ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, ΔⵠⲆⲆΔ, Δⵠ[ⵠⵠᐃᐃⲆ], ⲆⲆⲆΔ);
		Δ.save();
		Δ.translate(75 * Ⲇ, Ⲇ * 118);
		ᐃΔⵠ(Δ, Ⲇ * -ⵠⵠⲆⲆⵠ, Ⲇ * -2.5, Ⲇ * 20, 5 * Ⲇ, Ⲇ * 20);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⵠΔⵠ]);
		return ᐃⵠ
	}

	function ⲆΔᐃΔⲆᐃΔⲆΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 118 * Ⲇ;
		ᐃⵠ.height = 129 * Ⲇ;
		Δ.save();
		Δ.translate(90 * Ⲇ, 90 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -86.5, -86 * Ⲇ, 110 * Ⲇ, Ⲇ * 110, Ⲇ * ⵠᐃⵠΔΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔ], Δⵠ[ᐃⲆⲆ], 4);
		Δ.save();
		ᐃΔⵠ(Δ, 30 * Ⲇ, Ⲇ * 115, 60 * Ⲇ, Ⲇ * ⲆᐃΔⲆⵠ, Ⲇ * 15);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⲆ], Δⵠ[3], ᐃⵠⵠⲆ);
		Δ.save();
		ᐃΔⵠ(Δ, Ⲇ * 50, Ⲇ * 117, ᐃⵠⲆᐃᐃᐃᐃ * Ⲇ, Ⲇ * 10, Ⲇ * 15);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆΔΔⲆ]);
		return ᐃⵠ
	}

	function ᐃⲆⵠΔᐃᐃⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 108 * Ⲇ;
		ᐃⵠ.height = 669 * Ⲇ;
		Δ.translate(Ⲇ * ᐃᐃⲆⵠΔ, ⵠᐃᐃᐃᐃⵠᐃ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.save();
		Δ.translate(54 * Ⲇ, 389.5 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -15, -228.5 * Ⲇ, 30 * Ⲇ, 457 * Ⲇ, Ⲇ * ⵠⵠⵠΔΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(35 * Ⲇ, 579 * Ⲇ);
		Δ.bezierCurveTo(47 * Ⲇ, Ⲇ * 587, Ⲇ * 61, Ⲇ * 584, Ⲇ * 71, 579 * Ⲇ);
		Δ.bezierCurveTo(75 * Ⲇ, Ⲇ * 597.5, Ⲇ * 75, Ⲇ * 597.5, Ⲇ * 79, Ⲇ * 616);
		Δ.bezierCurveTo(Ⲇ * 66.5, Ⲇ * 628, 66.5 * Ⲇ, Ⲇ * 628, 54 * Ⲇ, Ⲇ * 640);
		Δ.bezierCurveTo(Ⲇ * 41, Ⲇ * 628.5, Ⲇ * 41, Ⲇ * 628.5, 28 * Ⲇ, 617 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(30 * Ⲇ, 141 * Ⲇ);
		Δ.bezierCurveTo(40 * Ⲇ, Ⲇ * 136, Ⲇ * 40, Ⲇ * 136, 50 * Ⲇ, 131 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 63, Ⲇ * 136, Ⲇ * 63, Ⲇ * 136, Ⲇ * 76, 141 * Ⲇ);
		Δ.bezierCurveTo(72.5 * Ⲇ, Ⲇ * 161.5, 72.5 * Ⲇ, 161.5 * Ⲇ, Ⲇ * 69, 182 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 61.5, Ⲇ * 186.5, 61.5 * Ⲇ, 186.5 * Ⲇ, Ⲇ * 54, 191 * Ⲇ);
		Δ.bezierCurveTo(45 * Ⲇ, Ⲇ * 186.5, 45 * Ⲇ, 186.5 * Ⲇ, Ⲇ * 36, Ⲇ * 182);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 42, Ⲇ * 152);
		Δ.bezierCurveTo(Ⲇ * 53, Ⲇ * 152, 53 * Ⲇ, 152 * Ⲇ, Ⲇ * 64, Ⲇ * 152);
		Δ.bezierCurveTo(Ⲇ * 62, 171 * Ⲇ, 62 * Ⲇ, Ⲇ * 176, 55 * Ⲇ, 177 * Ⲇ);
		Δ.bezierCurveTo(42 * Ⲇ, Ⲇ * 176, Ⲇ * 45, 174 * Ⲇ, 42 * Ⲇ, 152 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 52, Ⲇ * 28);
		Δ.bezierCurveTo(67.5 * Ⲇ, Ⲇ * 55, 67.5 * Ⲇ, 55 * Ⲇ, 83 * Ⲇ, Ⲇ * 82);
		Δ.bezierCurveTo(Ⲇ * 80, 106.5 * Ⲇ, 80 * Ⲇ, 106.5 * Ⲇ, 77 * Ⲇ, 131 * Ⲇ);
		Δ.bezierCurveTo(58 * Ⲇ, 147 * Ⲇ, 44 * Ⲇ, Ⲇ * 141, 29 * Ⲇ, 131 * Ⲇ);
		Δ.bezierCurveTo(26.5 * Ⲇ, Ⲇ * 106.5, 26.5 * Ⲇ, Ⲇ * 106.5, 24 * Ⲇ, Ⲇ * 82);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⲆⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 53, Ⲇ * 53);
		Δ.bezierCurveTo(Ⲇ * 61, 70 * Ⲇ, Ⲇ * 61, 70 * Ⲇ, Ⲇ * 69, Ⲇ * 87);
		Δ.bezierCurveTo(67 * Ⲇ, Ⲇ * 106, 67 * Ⲇ, Ⲇ * 106, Ⲇ * 65, 125 * Ⲇ);
		Δ.bezierCurveTo(54 * Ⲇ, Ⲇ * 130, Ⲇ * 51, Ⲇ * 130, 41 * Ⲇ, 125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 39, Ⲇ * 105, Ⲇ * 39, 105 * Ⲇ, 37 * Ⲇ, Ⲇ * 85);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(-20 * Ⲇ, Ⲇ * -ⲆⵠᐃΔⲆ);
		Δ.globalAlpha = 1;
		Δ.save();
		Δ.translate(54 * Ⲇ, Ⲇ * 389.5);
		Δ.rotate(ᐃⲆΔᐃ);
		ᐃΔⵠ(Δ, -15 * Ⲇ, -228.5 * Ⲇ, Ⲇ * 30, Ⲇ * 457, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], ⵠⲆⲆᐃᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 35, Ⲇ * 579);
		Δ.bezierCurveTo(47 * Ⲇ, Ⲇ * 587, Ⲇ * 61, Ⲇ * 584, 71 * Ⲇ, Ⲇ * 579);
		Δ.bezierCurveTo(75 * Ⲇ, Ⲇ * 597.5, Ⲇ * 75, 597.5 * Ⲇ, 79 * Ⲇ, 616 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 66.5, 628 * Ⲇ, Ⲇ * 66.5, Ⲇ * 628, Ⲇ * 54, 640 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 41, 628.5 * Ⲇ, 41 * Ⲇ, 628.5 * Ⲇ, 28 * Ⲇ, 617 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔᐃⲆᐃⵠ], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(30 * Ⲇ, Ⲇ * 141);
		Δ.bezierCurveTo(40 * Ⲇ, 136 * Ⲇ, Ⲇ * 40, Ⲇ * 136, 50 * Ⲇ, 131 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 63, Ⲇ * 136, Ⲇ * 63, Ⲇ * 136, 76 * Ⲇ, Ⲇ * 141);
		Δ.bezierCurveTo(72.5 * Ⲇ, 161.5 * Ⲇ, 72.5 * Ⲇ, 161.5 * Ⲇ, 69 * Ⲇ, 182 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 61.5, Ⲇ * 186.5, Ⲇ * 61.5, Ⲇ * 186.5, 54 * Ⲇ, 191 * Ⲇ);
		Δ.bezierCurveTo(45 * Ⲇ, Ⲇ * 186.5, 45 * Ⲇ, 186.5 * Ⲇ, 36 * Ⲇ, 182 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆᐃ], Δⵠ[ΔΔΔⵠ], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 42, 152 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 53, Ⲇ * 152, Ⲇ * 53, 152 * Ⲇ, Ⲇ * 64, 152 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 62, 171 * Ⲇ, 62 * Ⲇ, 176 * Ⲇ, 55 * Ⲇ, Ⲇ * 177);
		Δ.bezierCurveTo(42 * Ⲇ, Ⲇ * 176, Ⲇ * 45, Ⲇ * 174, 42 * Ⲇ, Ⲇ * 152);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠᐃΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(52 * Ⲇ, 28 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 67.5, 55 * Ⲇ, Ⲇ * 67.5, 55 * Ⲇ, Ⲇ * 83, 82 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 80, Ⲇ * 106.5, 80 * Ⲇ, Ⲇ * 106.5, 77 * Ⲇ, Ⲇ * 131);
		Δ.bezierCurveTo(Ⲇ * 58, 147 * Ⲇ, Ⲇ * 44, Ⲇ * 141, Ⲇ * 29, Ⲇ * 131);
		Δ.bezierCurveTo(Ⲇ * 26.5, Ⲇ * 106.5, 26.5 * Ⲇ, 106.5 * Ⲇ, 24 * Ⲇ, 82 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔⵠΔ], Δⵠ[ΔΔⵠⲆᐃ], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 53, Ⲇ * 53);
		Δ.bezierCurveTo(Ⲇ * 61, Ⲇ * 70, 61 * Ⲇ, 70 * Ⲇ, Ⲇ * 69, Ⲇ * 87);
		Δ.bezierCurveTo(67 * Ⲇ, 106 * Ⲇ, 67 * Ⲇ, 106 * Ⲇ, 65 * Ⲇ, Ⲇ * 125);
		Δ.bezierCurveTo(Ⲇ * 54, Ⲇ * 130, Ⲇ * 51, 130 * Ⲇ, 41 * Ⲇ, 125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 39, Ⲇ * 105, 39 * Ⲇ, 105 * Ⲇ, 37 * Ⲇ, Ⲇ * 85);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δᐃⵠⵠᐃ]);
		return ᐃⵠ
	}

	function ⵠⵠⵠⲆᐃⵠⵠⲆⵠ(Ⲇ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 321 * Ⲇ;
		ᐃⵠ.height = 345 * Ⲇ;
		Δ.translate(0, ⲆⲆⲆᐃⵠ * Ⲇ);
		Δ.translate(0, ΔⵠΔΔΔ * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 160.5, Ⲇ * 159.5, 156.39595138242822 * Ⲇ);
		ⵠᐃ(Δ, ᐃ[7], ᐃ[ΔᐃΔⵠⲆⲆⵠ], 4 * Ⲇ);
		Δ.translate(ⵠⵠⲆΔ, -20 * Ⲇ);
		ⵠΔᐃ(Δ, 160.5 * Ⲇ, Ⲇ * 159.5, 156.39595138242822 * Ⲇ);
		ⵠᐃ(Δ, ᐃ[375], ᐃ[217], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(31.999969482421875 * Ⲇ, 163.07290649414062 * Ⲇ);
		Δ.bezierCurveTo(22.999969482421875 * Ⲇ, 67.07290649414062 * Ⲇ, Ⲇ * 106, 20.072906494140625 * Ⲇ, 162 * Ⲇ, Ⲇ * 23.072906494140625);
		Δ.bezierCurveTo(269.9999694824219 * Ⲇ, Ⲇ * 31.072906494140625, 292.9999694824219 * Ⲇ, 120.07290649414062 * Ⲇ, Ⲇ * 294.9999694824219, 161.07290649414062 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 165.49996948242188, Ⲇ * 162.07290649414062, 165.49996948242188 * Ⲇ, 162.07290649414062 * Ⲇ, 35.999969482421875 * Ⲇ, Ⲇ * 163.07290649414062);
		Δ.closePath();
		ⵠᐃ(Δ, "#12432D");
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(32.999969482421875 * Ⲇ, Ⲇ * 165.07290649414062);
		Δ.bezierCurveTo(Ⲇ * 16.999969482421875, 221.07290649414062 * Ⲇ, 85 * Ⲇ, Ⲇ * 289.0729064941406, 156 * Ⲇ, 294.0729064941406 * Ⲇ);
		Δ.bezierCurveTo(263.9999694824219 * Ⲇ, Ⲇ * 293.0729064941406, 295.9999694824219 * Ⲇ, Ⲇ * 199.07290649414062, 294.9999694824219 * Ⲇ, 159.07290649414062 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃ[209]);
		ⵠΔᐃ(Δ, 161 * Ⲇ, Ⲇ * 158.07290649414062, Ⲇ * 133.4053971921676);
		ⵠᐃ(Δ, undefined, ᐃ[217], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(31.999969482421875 * Ⲇ, Ⲇ * 161.62844848632812);
		Δ.bezierCurveTo(Ⲇ * 162.49996948242188, Ⲇ * 161.62844848632812, 162.49996948242188 * Ⲇ, 161.62844848632812 * Ⲇ, 292.9999694824219 * Ⲇ, Ⲇ * 161.62844848632812);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆᐃⲆⵠ, ᐃ[217], Ⲇ * ⵠⲆⲆΔΔ);
		Δ.translate(0, 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 66, Ⲇ * 158.29513549804688);
		Δ.bezierCurveTo(86 * Ⲇ, 158.29513549804688 * Ⲇ, 86 * Ⲇ, Ⲇ * 158.29513549804688, Ⲇ * 106, 158.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, ᐃ[125], Ⲇ * ᐃⲆⲆΔⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(57.999969482421875 * Ⲇ, Ⲇ * 117.29513549804688);
		Δ.bezierCurveTo(85 * Ⲇ, 128.29513549804688 * Ⲇ, Ⲇ * 85, 128.29513549804688 * Ⲇ, Ⲇ * 113, 139.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, ᐃ[125], Ⲇ * ⲆⵠⲆᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 95, 90.29513549804688 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 112, 105.79513549804688 * Ⲇ, 112 * Ⲇ, Ⲇ * 105.79513549804688, 129 * Ⲇ, Ⲇ * 121.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[125], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 116, 52.850677490234375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 130, Ⲇ * 83.85067749023438, Ⲇ * 130, Ⲇ * 83.85067749023438, 144 * Ⲇ, 114.85067749023438 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠᐃⲆⵠⲆ, ᐃ[125], ⵠⲆⲆΔΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 159, 61.295135498046875 * Ⲇ);
		Δ.bezierCurveTo(160.49996948242188 * Ⲇ, 92.29513549804688 * Ⲇ, Ⲇ * 160.49996948242188, Ⲇ * 92.29513549804688, Ⲇ * 160, 123.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃΔᐃⲆⵠ, ᐃ[125], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 203, Ⲇ * 51.295135498046875);
		Δ.bezierCurveTo(Ⲇ * 190.49996948242188, 83.29513549804688 * Ⲇ, 190.49996948242188 * Ⲇ, 83.29513549804688 * Ⲇ, 176 * Ⲇ, 115.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ΔΔᐃⲆᐃ, ᐃ[125], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(225 * Ⲇ, Ⲇ * 89.29513549804688);
		Δ.bezierCurveTo(Ⲇ * 210.49996948242188, Ⲇ * 104.79513549804688, Ⲇ * 210.49996948242188, Ⲇ * 104.79513549804688, 194 * Ⲇ, Ⲇ * 120.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠⵠᐃⲆᐃ, ᐃ[125], Ⲇ * ⵠⵠΔⵠΔⲆᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(266.9999694824219 * Ⲇ, 112.29513549804688 * Ⲇ);
		Δ.bezierCurveTo(233.49996948242188 * Ⲇ, Ⲇ * 127.29513549804688, Ⲇ * 233.49996948242188, 127.29513549804688 * Ⲇ, 199 * Ⲇ, 142.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⲆⲆⲆΔᐃ, ᐃ[125], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 256.9999694824219, 155.29513549804688 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 238.49996948242188, Ⲇ * 156.29513549804688, 238.49996948242188 * Ⲇ, Ⲇ * 156.29513549804688, 219 * Ⲇ, Ⲇ * 157.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, ΔΔⲆⲆⲆ, ᐃ[125], 12 * Ⲇ);
		Δ.translate(0, Ⲇ * -ᐃᐃΔⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 66, Ⲇ * 158.29513549804688);
		Δ.bezierCurveTo(86 * Ⲇ, Ⲇ * 158.29513549804688, 86 * Ⲇ, 158.29513549804688 * Ⲇ, Ⲇ * 106, 158.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠⵠᐃⵠΔ, ᐃ[451], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 57.999969482421875, Ⲇ * 117.29513549804688);
		Δ.bezierCurveTo(Ⲇ * 85, 128.29513549804688 * Ⲇ, Ⲇ * 85, Ⲇ * 128.29513549804688, 113 * Ⲇ, 139.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[451], ⵠⵠΔⵠΔⲆᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 95, Ⲇ * 90.29513549804688);
		Δ.bezierCurveTo(112 * Ⲇ, 105.79513549804688 * Ⲇ, Ⲇ * 112, Ⲇ * 105.79513549804688, Ⲇ * 129, Ⲇ * 121.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, ΔΔⲆⲆⲆ, ᐃ[451], ΔΔⵠⵠⲆΔΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(116 * Ⲇ, 52.850677490234375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 130, 83.85067749023438 * Ⲇ, 130 * Ⲇ, Ⲇ * 83.85067749023438, 144 * Ⲇ, 114.85067749023438 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[451], ΔⲆⵠᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(159 * Ⲇ, 61.295135498046875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 160.49996948242188, Ⲇ * 92.29513549804688, 160.49996948242188 * Ⲇ, Ⲇ * 92.29513549804688, 160 * Ⲇ, Ⲇ * 123.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠⲆⵠᐃⵠⵠΔ, ᐃ[451], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(203 * Ⲇ, 51.295135498046875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 190.49996948242188, 83.29513549804688 * Ⲇ, Ⲇ * 190.49996948242188, 83.29513549804688 * Ⲇ, Ⲇ * 176, Ⲇ * 115.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[451], Ⲇ * ᐃⲆᐃⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 225, Ⲇ * 89.29513549804688);
		Δ.bezierCurveTo(Ⲇ * 210.49996948242188, 104.79513549804688 * Ⲇ, Ⲇ * 210.49996948242188, 104.79513549804688 * Ⲇ, 194 * Ⲇ, Ⲇ * 120.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[451], Ⲇ * ⲆΔᐃⵠⲆⵠⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(266.9999694824219 * Ⲇ, 112.29513549804688 * Ⲇ);
		Δ.bezierCurveTo(233.49996948242188 * Ⲇ, Ⲇ * 127.29513549804688, 233.49996948242188 * Ⲇ, 127.29513549804688 * Ⲇ, Ⲇ * 199, 142.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[451], ᐃⲆᐃⲆⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 256.9999694824219, 155.29513549804688 * Ⲇ);
		Δ.bezierCurveTo(238.49996948242188 * Ⲇ, Ⲇ * 156.29513549804688, 238.49996948242188 * Ⲇ, 156.29513549804688 * Ⲇ, 219 * Ⲇ, Ⲇ * 157.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆᐃΔᐃ, ᐃ[451], ⲆⲆⲆⲆΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(94.00003051757812 * Ⲇ, Ⲇ * 164.40341186523438);
		Δ.bezierCurveTo(Ⲇ * 162.50003051757812, 164.40341186523438 * Ⲇ, 230.00003051757812 * Ⲇ, Ⲇ * 165.40341186523438, Ⲇ * 231.00003051757812, Ⲇ * 164.40341186523438);
		Δ.bezierCurveTo(214.00003051757812 * Ⲇ, Ⲇ * 267.4034118652344, Ⲇ * 92.00003051757812, 243.40341186523438 * Ⲇ, 93.00003051757812 * Ⲇ, Ⲇ * 165.40341186523438);
		Δ.closePath();
		ⵠᐃ(Δ, "#704618", "#5D3D1A", Ⲇ * ⲆⵠΔᐃⵠⵠΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(96 * Ⲇ, Ⲇ * 166);
		Δ.bezierCurveTo(88 * Ⲇ, Ⲇ * 117, 129 * Ⲇ, 92 * Ⲇ, Ⲇ * 161, Ⲇ * 91);
		Δ.bezierCurveTo(201 * Ⲇ, 90 * Ⲇ, Ⲇ * 223, Ⲇ * 121, 230 * Ⲇ, 161 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, "#ECBE35", ᐃ[451], Ⲇ * 8);
		ⵠΔᐃ(Δ, Ⲇ * 160.00003051757812, Ⲇ * 166.49432373046875, 28.30194339616981 * Ⲇ);
		ⵠᐃ(Δ, ᐃ[375], ᐃ[217], Ⲇ * ΔΔⲆΔΔ);
		return ᐃⵠ
	}

	function ⲆⲆⵠᐃⲆᐃᐃ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 151 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 80;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 133, Ⲇ * 54);
		Δ.bezierCurveTo(136 * Ⲇ, ⲆΔⲆⲆⲆΔⲆ * Ⲇ, Ⲇ * 129, ⵠⲆΔⵠᐃᐃⲆ * Ⲇ, Ⲇ * 114, ⲆᐃⲆⲆᐃⲆΔ * Ⲇ);
		Δ.bezierCurveTo(51 * Ⲇ, ⵠᐃⲆⵠ * Ⲇ, Ⲇ * 36, Ⲇ * 16, Ⲇ * 34, Ⲇ * ⵠᐃΔⲆΔⲆⵠ);
		Δ.bezierCurveTo(Ⲇ * 8, 28 * Ⲇ, 22 * Ⲇ, Ⲇ * 56, 21 * Ⲇ, Ⲇ * 57);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[3], ᐃᐃΔⵠⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(130 * Ⲇ, Ⲇ * 40);
		Δ.bezierCurveTo(Ⲇ * 132, 35 * Ⲇ, 132 * Ⲇ, Ⲇ * 30, 132 * Ⲇ, Ⲇ * 29);
		Δ.bezierCurveTo(145 * Ⲇ, 38 * Ⲇ, 144 * Ⲇ, 43 * Ⲇ, 137 * Ⲇ, Ⲇ * 54);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], ⲆⲆⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ΔⲆⵠⵠᐃ * Ⲇ, Ⲇ * 33);
		Δ.bezierCurveTo(Ⲇ * 24, Ⲇ * 44, Ⲇ * 215, Ⲇ * 39, Ⲇ * 23, Ⲇ * 44);
		Δ.bezierCurveTo(ⲆⵠᐃᐃⲆ * Ⲇ, Ⲇ * 49, ⲆⵠᐃᐃⵠⲆΔ * Ⲇ, 49 * Ⲇ, 15 * Ⲇ, 54 * Ⲇ);
		Δ.bezierCurveTo(ⵠⵠⵠᐃⲆ * Ⲇ, Ⲇ * 43, ᐃⲆᐃⲆⲆ * Ⲇ, Ⲇ * 35, ΔΔΔΔᐃⵠⲆ * Ⲇ, 32 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], ΔᐃᐃΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(18 * Ⲇ, Ⲇ * 52);
		Δ.bezierCurveTo(24 * Ⲇ, Ⲇ * 31, 34 * Ⲇ, Ⲇ * 25, Ⲇ * 75, Ⲇ * 23);
		Δ.bezierCurveTo(Ⲇ * 130, 24 * Ⲇ, Ⲇ * 129, 32 * Ⲇ, Ⲇ * 134, 51 * Ⲇ);
		Δ.bezierCurveTo(138 * Ⲇ, 70 * Ⲇ, 126 * Ⲇ, 72 * Ⲇ, 90 * Ⲇ, Ⲇ * 73);
		Δ.bezierCurveTo(Ⲇ * ⲆⲆΔⵠⲆ, 72 * Ⲇ, Ⲇ * 15, Ⲇ * 68, Ⲇ * ΔΔⵠΔᐃᐃᐃ, 54 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⲆⲆᐃⵠ], 4);
		return ᐃⵠ
	}

	function ⵠᐃΔΔΔⵠΔⵠΔ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 86 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 45;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ⲆⲆᐃⵠⲆⵠⵠ * Ⲇ, ⲆⲆᐃⵠⲆⵠⵠ * Ⲇ);
		Δ.bezierCurveTo(ⲆⲆᐃΔⵠ * Ⲇ, Ⲇ * 15, Ⲇ * 19.5, Ⲇ * 9, 24 * Ⲇ, Ⲇ * 2);
		Δ.bezierCurveTo(41 * Ⲇ, 2 * Ⲇ, Ⲇ * 41, Ⲇ * ⵠⵠᐃⲆ, Ⲇ * 58, ΔΔᐃⲆⵠ * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 64, Ⲇ * 13, Ⲇ * 61, 8 * Ⲇ, 65 * Ⲇ, Ⲇ * 13);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ΔⲆⵠⲆ], ᐃᐃⵠΔ);
		Δ.save();
		Δ.translate(43 * Ⲇ, 27 * Ⲇ);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, Ⲇ * -40, -15 * Ⲇ, Ⲇ * 80, 30 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], 4);
		Δ.save();
		Δ.translate(Ⲇ * 43, Ⲇ * 33);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, -17 * Ⲇ, -4.5 * Ⲇ, 34 * Ⲇ, 9 * Ⲇ, Ⲇ * ⵠⵠⵠΔΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ], Δⵠ[1], ᐃᐃΔⵠⲆ);
		return ᐃⵠ
	}

	function ⵠᐃΔⲆⲆⵠΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 170 * Ⲇ;
		var ΔⵠⲆ = 172 * Ⲇ;
		var Ⲇᐃ = ᐃΔΔ / Ⲇᐃⵠⵠ;
		var ⲆⲆⲆ = ΔⵠⲆ / ΔΔⵠⲆ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(Ⲇᐃ, ⲆⲆⲆ + Ⲇ * ΔⵠᐃΔⲆ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆᐃΔⵠ;
		ⵠΔᐃ(Δ, 0, ᐃⲆΔᐃ, Ⲇ * 60);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ]);
		Δ.globalAlpha = 1;
		Δ.translate(0, -7 * Ⲇ);
		Δ.save();
		for (var ᐃⲆ = ᐃⲆΔᐃ; ᐃᐃᐃⲆⵠ > ᐃⲆ; ᐃⲆ++) {
			Δ.rotate(Math.PI / 5);
			Δ.save();
			Δ.translate(65 * Ⲇ, 0);
			ΔΔΔΔ(Δ, ⲆΔⲆⲆ, Ⲇ * ⵠⲆΔⲆⲆ, ᐃΔⵠᐃⲆ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔΔⵠⲆ], Ⲇ * 4);
			Δ.restore()
		}
		Δ.restore();
		ⵠΔᐃ(Δ, Ⲇⵠᐃ, 0, 60 * Ⲇ, 0);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], ΔⵠⲆⵠᐃ * Ⲇ);
		ⵠΔᐃ(Δ, 0, ⵠᐃΔ, Ⲇ * 40);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠᐃΔ]);
		ⵠΔᐃ(Δ, Δⵠⵠ, ΔᐃⲆⲆ, 25 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⲆΔⲆ], Δⵠ[ΔΔⵠⲆᐃ], Ⲇ * ⵠᐃΔᐃⲆ);
		return ᐃⵠ
	}

	function ⲆⲆΔᐃⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 69 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 120;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.save();
		Δ.translate(Ⲇ * 30, Ⲇ * 84);
		ᐃΔⵠ(Δ, Ⲇ * -ΔⵠΔᐃⵠ, Ⲇ * -66.5, Ⲇ * 8, Ⲇ * ΔⵠⲆⵠⲆ, Ⲇ * ⵠⵠⵠΔΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.save();
		Δ.translate(Ⲇ * 30, Ⲇ * 45);
		ᐃΔⵠ(Δ, Ⲇ * -9.5, Ⲇ * -6.5, Ⲇ * 16, 13 * Ⲇ, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.save();
		Δ.translate(30 * Ⲇ, 17 * Ⲇ);
		ᐃΔⵠ(Δ, -7.5 * Ⲇ, -5.5 * Ⲇ, Ⲇ * ᐃⵠᐃⲆⵠ, 11 * Ⲇ, ΔⵠᐃⲆΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆᐃ]);
		Δ.save();
		Δ.translate(30 * Ⲇ, Ⲇ * 31);
		ᐃΔⵠ(Δ, -26 * Ⲇ, Ⲇ * -14.5, Ⲇ * 52, 29 * Ⲇ, ⲆΔⲆᐃᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.save();
		Δ.translate(Ⲇ * 36, 79.140625 * Ⲇ);
		ᐃΔⵠ(Δ, -6 * Ⲇ, Ⲇ * -66.5, ᐃᐃΔⲆⲆ * Ⲇ, Ⲇ * 100, Ⲇ * ⵠᐃⲆⵠᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], ᐃΔᐃⲆ * Ⲇ);
		Δ.save();
		Δ.translate(35 * Ⲇ, Ⲇ * 40.140625);
		ᐃΔⵠ(Δ, Ⲇ * -9.5, -6.5 * Ⲇ, Ⲇ * 16, 13 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ], Δⵠ[ᐃᐃⵠΔ], 3 * Ⲇ);
		Δ.save();
		Δ.translate(35 * Ⲇ, Ⲇ * 12.140625);
		ᐃΔⵠ(Δ, Ⲇ * -7.5, Ⲇ * -5.5, 12 * Ⲇ, Ⲇ * 11, Ⲇ * ΔΔⵠⲆⵠ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔᐃⲆᐃⵠ], Ⲇ * 3);
		Δ.save();
		Δ.translate(34.5 * Ⲇ, 26.140625 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -26, Ⲇ * -14.5, Ⲇ * 52, 29 * Ⲇ, 5 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], Ⲇ * ⲆⲆΔΔ);
		return ᐃⵠ
	}

	function ᐃΔⵠⵠⵠᐃⵠⲆΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 60;
		ᐃⵠ.height = Ⲇ * 60;
		Δ.translate(Ⲇ * -25, -25 * Ⲇ);
		Δ.translate(ⵠⵠⵠ, Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 24, Ⲇ * 50);
		Δ.bezierCurveTo(Ⲇ * 32.5, Ⲇ * 54.5, Ⲇ * 32.5, 54.5 * Ⲇ, Ⲇ * 41, Ⲇ * 59);
		Δ.bezierCurveTo(57 * Ⲇ, 47 * Ⲇ, Ⲇ * 57, 47 * Ⲇ, 73 * Ⲇ, Ⲇ * 35);
		Δ.bezierCurveTo(57 * Ⲇ, 53 * Ⲇ, 57 * Ⲇ, Ⲇ * 53, Ⲇ * 41, 71 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆⵠ]);
		Δ.translate(Ⲇⵠᐃ, Ⲇ * -ᐃᐃⲆⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(24 * Ⲇ, Ⲇ * 50);
		Δ.bezierCurveTo(32.5 * Ⲇ, 54.5 * Ⲇ, 32.5 * Ⲇ, 54.5 * Ⲇ, Ⲇ * 41, Ⲇ * 59);
		Δ.bezierCurveTo(Ⲇ * 57, 47 * Ⲇ, Ⲇ * 57, Ⲇ * 47, Ⲇ * 73, 35 * Ⲇ);
		Δ.bezierCurveTo(57 * Ⲇ, 53 * Ⲇ, 57 * Ⲇ, Ⲇ * 53, Ⲇ * 41, Ⲇ * 71);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠⲆ]);
		return ᐃⵠ
	}

	function ᐃΔΔΔᐃᐃⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 106;
		ᐃⵠ.height = Ⲇ * 681;
		Δ.translate(Ⲇ * 20, Ⲇ * 20);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⵠⲆ;
		Δ.save();
		Δ.translate(52.5 * Ⲇ, Ⲇ * 395);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, Ⲇ * -11.5, Ⲇ * -226, Ⲇ * 23, 452 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 35, Ⲇ * 588);
		Δ.bezierCurveTo(Ⲇ * 47, 596 * Ⲇ, 61 * Ⲇ, Ⲇ * 594, 69 * Ⲇ, 588 * Ⲇ);
		Δ.bezierCurveTo(79 * Ⲇ, 615 * Ⲇ, 78 * Ⲇ, Ⲇ * 632, 59 * Ⲇ, Ⲇ * 643);
		Δ.bezierCurveTo(41 * Ⲇ, 650 * Ⲇ, Ⲇ * 27, Ⲇ * 632, Ⲇ * 30, Ⲇ * 610);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 52, Ⲇ * 135);
		Δ.bezierCurveTo(61.5 * Ⲇ, 142 * Ⲇ, 61.5 * Ⲇ, Ⲇ * 142, 71 * Ⲇ, Ⲇ * 149);
		Δ.bezierCurveTo(Ⲇ * 69.5, Ⲇ * 166, Ⲇ * 69.5, Ⲇ * 166, Ⲇ * 68, 183 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 60.5, 187.5 * Ⲇ, 60.5 * Ⲇ, 187.5 * Ⲇ, 53 * Ⲇ, 192 * Ⲇ);
		Δ.bezierCurveTo(45 * Ⲇ, 187.5 * Ⲇ, Ⲇ * 45, Ⲇ * 187.5, 37 * Ⲇ, Ⲇ * 183);
		Δ.bezierCurveTo(Ⲇ * 35.5, Ⲇ * 167, Ⲇ * 35.5, 167 * Ⲇ, 34 * Ⲇ, 151 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 64, Ⲇ * 150);
		Δ.bezierCurveTo(63 * Ⲇ, 164 * Ⲇ, Ⲇ * 63, Ⲇ * 164, 62 * Ⲇ, Ⲇ * 178);
		Δ.bezierCurveTo(58 * Ⲇ, Ⲇ * 181, Ⲇ * 58, Ⲇ * 181, 54 * Ⲇ, Ⲇ * 184);
		Δ.bezierCurveTo(48.5 * Ⲇ, Ⲇ * 181.5, 48.5 * Ⲇ, Ⲇ * 181.5, Ⲇ * 43, Ⲇ * 179);
		Δ.bezierCurveTo(Ⲇ * 42, 164.5 * Ⲇ, Ⲇ * 42, 164.5 * Ⲇ, 41 * Ⲇ, Ⲇ * 150);
		Δ.bezierCurveTo(46 * Ⲇ, 152.5 * Ⲇ, Ⲇ * 46, Ⲇ * 152.5, 51 * Ⲇ, 155 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 52, Ⲇ * 39);
		Δ.bezierCurveTo(Ⲇ * 65.5, Ⲇ * 82, 65.5 * Ⲇ, Ⲇ * 82, 79 * Ⲇ, Ⲇ * 125);
		Δ.bezierCurveTo(Ⲇ * 66, 137.5 * Ⲇ, Ⲇ * 66, 137.5 * Ⲇ, Ⲇ * 53, Ⲇ * 150);
		Δ.bezierCurveTo(39 * Ⲇ, 138 * Ⲇ, 39 * Ⲇ, Ⲇ * 138, 25 * Ⲇ, Ⲇ * 126);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(52 * Ⲇ, 64 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 60, Ⲇ * 92.5, 60 * Ⲇ, Ⲇ * 92.5, 68 * Ⲇ, Ⲇ * 121);
		Δ.bezierCurveTo(Ⲇ * 61, 127.5 * Ⲇ, Ⲇ * 61, Ⲇ * 127.5, Ⲇ * 54, Ⲇ * 134);
		Δ.bezierCurveTo(46.5 * Ⲇ, Ⲇ * 127.5, 46.5 * Ⲇ, 127.5 * Ⲇ, 39 * Ⲇ, Ⲇ * 121);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆΔ]);
		Δ.translate(-ΔΔΔΔᐃⵠⲆ * Ⲇ, Ⲇ * -20);
		Δ.globalAlpha = 1;
		Δ.save();
		Δ.translate(Ⲇ * 52.5, 395 * Ⲇ);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, -11.5 * Ⲇ, Ⲇ * -226, Ⲇ * 23, 452 * Ⲇ, Ⲇ * ⲆΔᐃⵠΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 35, 588 * Ⲇ);
		Δ.bezierCurveTo(47 * Ⲇ, Ⲇ * 596, Ⲇ * 61, 594 * Ⲇ, Ⲇ * 69, 588 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 79, Ⲇ * 615, 78 * Ⲇ, 632 * Ⲇ, Ⲇ * 59, Ⲇ * 643);
		Δ.bezierCurveTo(41 * Ⲇ, 650 * Ⲇ, Ⲇ * 27, 632 * Ⲇ, Ⲇ * 30, Ⲇ * 610);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⲆ], Δⵠ[ΔΔᐃⵠΔ], Ⲇ * ᐃᐃΔⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 52, Ⲇ * 135);
		Δ.bezierCurveTo(61.5 * Ⲇ, Ⲇ * 142, 61.5 * Ⲇ, 142 * Ⲇ, 71 * Ⲇ, Ⲇ * 149);
		Δ.bezierCurveTo(69.5 * Ⲇ, 166 * Ⲇ, 69.5 * Ⲇ, 166 * Ⲇ, Ⲇ * 68, Ⲇ * 183);
		Δ.bezierCurveTo(Ⲇ * 60.5, Ⲇ * 187.5, Ⲇ * 60.5, 187.5 * Ⲇ, 53 * Ⲇ, Ⲇ * 192);
		Δ.bezierCurveTo(45 * Ⲇ, 187.5 * Ⲇ, Ⲇ * 45, 187.5 * Ⲇ, Ⲇ * 37, 183 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 35.5, 167 * Ⲇ, 35.5 * Ⲇ, 167 * Ⲇ, Ⲇ * 34, 151 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆⲆ], Δⵠ[4], ⵠᐃΔᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(64 * Ⲇ, Ⲇ * 150);
		Δ.bezierCurveTo(63 * Ⲇ, Ⲇ * 164, 63 * Ⲇ, 164 * Ⲇ, 62 * Ⲇ, Ⲇ * 178);
		Δ.bezierCurveTo(Ⲇ * 58, Ⲇ * 181, Ⲇ * 58, Ⲇ * 181, Ⲇ * 54, Ⲇ * 184);
		Δ.bezierCurveTo(Ⲇ * 48.5, Ⲇ * 181.5, Ⲇ * 48.5, Ⲇ * 181.5, 43 * Ⲇ, 179 * Ⲇ);
		Δ.bezierCurveTo(42 * Ⲇ, Ⲇ * 164.5, 42 * Ⲇ, Ⲇ * 164.5, Ⲇ * 41, 150 * Ⲇ);
		Δ.bezierCurveTo(46 * Ⲇ, Ⲇ * 152.5, 46 * Ⲇ, Ⲇ * 152.5, 51 * Ⲇ, Ⲇ * 155);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(52 * Ⲇ, Ⲇ * 39);
		Δ.bezierCurveTo(Ⲇ * 65.5, Ⲇ * 82, Ⲇ * 65.5, Ⲇ * 82, Ⲇ * 79, Ⲇ * 125);
		Δ.bezierCurveTo(66 * Ⲇ, 137.5 * Ⲇ, 66 * Ⲇ, Ⲇ * 137.5, 53 * Ⲇ, 150 * Ⲇ);
		Δ.bezierCurveTo(39 * Ⲇ, Ⲇ * 138, Ⲇ * 39, Ⲇ * 138, Ⲇ * 25, 126 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⵠΔᐃⵠ], Δⵠ[ΔΔⵠⲆᐃ], Ⲇ * ⲆⲆⲆᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 52, 64 * Ⲇ);
		Δ.bezierCurveTo(60 * Ⲇ, Ⲇ * 92.5, 60 * Ⲇ, 92.5 * Ⲇ, Ⲇ * 68, Ⲇ * 121);
		Δ.bezierCurveTo(Ⲇ * 61, 127.5 * Ⲇ, Ⲇ * 61, 127.5 * Ⲇ, 54 * Ⲇ, 134 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 46.5, Ⲇ * 127.5, Ⲇ * 46.5, Ⲇ * 127.5, 39 * Ⲇ, Ⲇ * 121);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃᐃᐃ]);
		return ᐃⵠ
	}

	function ⵠΔᐃⵠⲆΔⲆ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 92;
		ᐃⵠ.height = Ⲇ * 108;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 31, ΔΔⲆΔΔ * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 37, Ⲇ * 2, Ⲇ * 49, ⵠᐃⵠ * Ⲇ, 61 * Ⲇ, ⲆⲆⲆΔⵠ * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 81, 31 * Ⲇ, 78 * Ⲇ, 25 * Ⲇ, 79 * Ⲇ, 37 * Ⲇ);
		Δ.bezierCurveTo(76 * Ⲇ, 44 * Ⲇ, 81 * Ⲇ, 56 * Ⲇ, 85 * Ⲇ, 63 * Ⲇ);
		Δ.bezierCurveTo(91 * Ⲇ, Ⲇ * 71, 90 * Ⲇ, Ⲇ * 78, Ⲇ * 83, Ⲇ * 84);
		Δ.bezierCurveTo(60 * Ⲇ, 98 * Ⲇ, Ⲇ * 67, Ⲇ * 95, Ⲇ * 57, Ⲇ * 102);
		Δ.bezierCurveTo(Ⲇ * 47, Ⲇ * 106, Ⲇ * 43, Ⲇ * 106, 31 * Ⲇ, Ⲇ * 98);
		Δ.bezierCurveTo(Ⲇ * 22, Ⲇ * 91, Ⲇ * 17, 89 * Ⲇ, ⵠⵠᐃⵠᐃ * Ⲇ, Ⲇ * 84);
		Δ.bezierCurveTo(1 * Ⲇ, Ⲇ * 77, Ⲇ * ᐃᐃⵠΔ, Ⲇ * 73, Ⲇ * 7, Ⲇ * 60);
		Δ.bezierCurveTo(Ⲇ * 11, 50 * Ⲇ, Δᐃᐃⵠ * Ⲇ, 32 * Ⲇ, ⲆⲆⲆΔⵠ * Ⲇ, 27 * Ⲇ);
		Δ.bezierCurveTo(26 * Ⲇ, Ⲇ * ⲆᐃΔΔᐃ, 26 * Ⲇ, Ⲇ * 24, Ⲇ * 31, 10 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⲆⵠΔΔ], ΔΔΔⵠ);
		return ᐃⵠ
	}

	function ⲆᐃᐃⵠΔⲆΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 135 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 120;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 3.5, 55.25 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 3.5, Ⲇ * 114.25, 2.5 * Ⲇ, Ⲇ * 109.25, 3.5 * Ⲇ, 112.25 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 5.5, Ⲇ * 119.25, Ⲇ * 8.5, Ⲇ * 119.25, Ⲇ * 11.5, 119.25 * Ⲇ);
		Δ.bezierCurveTo(15.5 * Ⲇ, Ⲇ * 114.25, Ⲇ * 13.5, 95.25 * Ⲇ, Ⲇ * 14.5, Ⲇ * 82.25);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ], Δⵠ[1], 7 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 6.5, 43.25 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 3.5, 27.25 * Ⲇ, Ⲇ * 7.5, 20.25 * Ⲇ, 25.5 * Ⲇ, Ⲇ * 11.25);
		Δ.bezierCurveTo(45.5 * Ⲇ, Ⲇ * -.75, Ⲇ * 73.5, Ⲇ * 1.25, 107.5 * Ⲇ, Ⲇ * 10.25);
		Δ.bezierCurveTo(Ⲇ * 131.5, Ⲇ * 21.25, 125.5 * Ⲇ, 34.25 * Ⲇ, 125.5 * Ⲇ, 36.25 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ], Δⵠ[ΔᐃⵠⲆ], Ⲇ * ⵠᐃⵠⲆⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(120.5 * Ⲇ, Ⲇ * 62.25);
		Δ.bezierCurveTo(Ⲇ * 121.5, Ⲇ * 95.25, Ⲇ * 120.5, Ⲇ * 80.25, 120.5 * Ⲇ, 100.25 * Ⲇ);
		Δ.bezierCurveTo(118.5 * Ⲇ, Ⲇ * 119.25, 123.5 * Ⲇ, Ⲇ * 118.25, 129.5 * Ⲇ, Ⲇ * 113.25);
		Δ.bezierCurveTo(133.5 * Ⲇ, Ⲇ * 107.25, Ⲇ * 130.5, Ⲇ * 97.25, 130.5 * Ⲇ, 87.25 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 129.5, Ⲇ * 56.25, 130 * Ⲇ, Ⲇ * 70.75, 129.5 * Ⲇ, 54.25 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃ], Δⵠ[1], ⲆᐃⲆⲆΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 17.5, Ⲇ * 27);
		Δ.bezierCurveTo(Ⲇ * 48.5, Ⲇ * ⲆΔⲆᐃᐃ, Ⲇ * 93.5, Ⲇ * 14, Ⲇ * 118.5, Ⲇ * 26);
		Δ.bezierCurveTo(Ⲇ * 132.5, 35 * Ⲇ, 133.5 * Ⲇ, 52 * Ⲇ, Ⲇ * 132.5, Ⲇ * 68);
		Δ.bezierCurveTo(125.5 * Ⲇ, Ⲇ * 87, 116.5 * Ⲇ, Ⲇ * 84, 96.5 * Ⲇ, Ⲇ * 75);
		Δ.bezierCurveTo(60.5 * Ⲇ, 66 * Ⲇ, Ⲇ * 52.5, 74 * Ⲇ, 37.5 * Ⲇ, 78 * Ⲇ);
		Δ.bezierCurveTo(2.5 * Ⲇ, Ⲇ * 86, Ⲇ * 3.5, Ⲇ * 78, Ⲇ * 1.5, Ⲇ * 61);
		Δ.bezierCurveTo(Ⲇ * 1.5, Ⲇ * 37, 9.5 * Ⲇ, Ⲇ * 32, 15.5 * Ⲇ, 28 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠΔ], Δⵠ[ⵠΔΔᐃ], 7 * Ⲇ);
		return ᐃⵠ
	}

	function ⵠᐃⵠⵠⵠΔᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * ΔΔⲆΔⵠⵠⵠ;
		ᐃⵠ.height = 648 * Ⲇ;
		Δ.translate(ⲆⵠᐃΔⲆ * Ⲇ, Ⲇ * ᐃⵠⲆᐃᐃᐃᐃ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : Δⵠᐃ;
		Δ.save();
		Δ.translate(50.5 * Ⲇ, Ⲇ * 349.5);
		ᐃΔⵠ(Δ, Ⲇ * -13.5, -249.5 * Ⲇ, Ⲇ * 27, Ⲇ * 499, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(36 * Ⲇ, Ⲇ * 538);
		Δ.bezierCurveTo(49.5 * Ⲇ, 538 * Ⲇ, 49.5 * Ⲇ, 538 * Ⲇ, 63 * Ⲇ, Ⲇ * 538);
		Δ.bezierCurveTo(63.5 * Ⲇ, 568 * Ⲇ, Ⲇ * 63.5, Ⲇ * 568, Ⲇ * 64, Ⲇ * 598);
		Δ.bezierCurveTo(50 * Ⲇ, Ⲇ * 598, Ⲇ * 50, Ⲇ * 598, Ⲇ * 36, Ⲇ * 598);
		Δ.bezierCurveTo(Ⲇ * 36, 568.5 * Ⲇ, 36 * Ⲇ, Ⲇ * 568.5, Ⲇ * 36, 539 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 36, 554 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 45, Ⲇ * 561, 56 * Ⲇ, 558 * Ⲇ, Ⲇ * 63, 554 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 32, Ⲇ * 569);
		Δ.bezierCurveTo(Ⲇ * 44, 576 * Ⲇ, Ⲇ * 58, Ⲇ * 574, 68 * Ⲇ, Ⲇ * 569);
		Δ.bezierCurveTo(Ⲇ * 68, Ⲇ * 584, 68 * Ⲇ, Ⲇ * 584, 68 * Ⲇ, Ⲇ * 599);
		Δ.bezierCurveTo(68 * Ⲇ, Ⲇ * 608, Ⲇ * 65, Ⲇ * 618, Ⲇ * 49, 617 * Ⲇ);
		Δ.bezierCurveTo(34 * Ⲇ, Ⲇ * 617, 32 * Ⲇ, Ⲇ * 610, 32 * Ⲇ, 598 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 41, 581 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 48, Ⲇ * 584, 55 * Ⲇ, 583 * Ⲇ, Ⲇ * 60, 581 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 60, Ⲇ * 589.5, 60 * Ⲇ, Ⲇ * 589.5, Ⲇ * 60, 598 * Ⲇ);
		Δ.bezierCurveTo(60 * Ⲇ, 604 * Ⲇ, 59 * Ⲇ, Ⲇ * 609, Ⲇ * 48, Ⲇ * 608);
		Δ.bezierCurveTo(Ⲇ * 40, Ⲇ * 607, Ⲇ * 40, 606 * Ⲇ, 41 * Ⲇ, Ⲇ * 581);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 31, 106 * Ⲇ);
		Δ.bezierCurveTo(31 * Ⲇ, Ⲇ * 124.5, Ⲇ * 31, 124.5 * Ⲇ, 31 * Ⲇ, 143 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 31, Ⲇ * 163, 38 * Ⲇ, 169 * Ⲇ, 48 * Ⲇ, 168 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 57, 168 * Ⲇ, Ⲇ * 67, 165 * Ⲇ, 67 * Ⲇ, 148 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 67, Ⲇ * 123.5, Ⲇ * 67, Ⲇ * 123.5, 67 * Ⲇ, Ⲇ * 99);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(49 * Ⲇ, Ⲇ * 27);
		Δ.bezierCurveTo(64 * Ⲇ, Ⲇ * 62.5, 64 * Ⲇ, Ⲇ * 62.5, 79 * Ⲇ, 98 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 74, Ⲇ * 113, 63 * Ⲇ, Ⲇ * 121, 50 * Ⲇ, 122 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 35, Ⲇ * 123, 22 * Ⲇ, Ⲇ * 109, Ⲇ * 20, 98 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(49 * Ⲇ, 43 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 61, Ⲇ * 70, Ⲇ * 61, 70 * Ⲇ, 73 * Ⲇ, Ⲇ * 97);
		Δ.bezierCurveTo(Ⲇ * 66, Ⲇ * 116, Ⲇ * 43, 122 * Ⲇ, 26 * Ⲇ, Ⲇ * 99);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ]);
		Δ.translate(-ⲆⵠΔⵠⵠ * Ⲇ, -20 * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.save();
		Δ.translate(50.5 * Ⲇ, Ⲇ * 349.5);
		ᐃΔⵠ(Δ, Ⲇ * -13.5, -249.5 * Ⲇ, 27 * Ⲇ, 499 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * ᐃᐃΔⲆⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 36, Ⲇ * 538);
		Δ.bezierCurveTo(49.5 * Ⲇ, 538 * Ⲇ, Ⲇ * 49.5, Ⲇ * 538, Ⲇ * 63, 538 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 63.5, Ⲇ * 568, Ⲇ * 63.5, 568 * Ⲇ, Ⲇ * 64, 598 * Ⲇ);
		Δ.bezierCurveTo(50 * Ⲇ, Ⲇ * 598, Ⲇ * 50, Ⲇ * 598, Ⲇ * 36, 598 * Ⲇ);
		Δ.bezierCurveTo(36 * Ⲇ, 568.5 * Ⲇ, 36 * Ⲇ, 568.5 * Ⲇ, Ⲇ * 36, Ⲇ * 539);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⵠ], Δⵠ[ⵠΔⲆᐃⲆ], ⲆΔⵠΔΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 36, 554 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 45, Ⲇ * 561, 56 * Ⲇ, 558 * Ⲇ, Ⲇ * 63, 554 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Ⲇᐃᐃⵠᐃ, Δⵠ[4], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 32, Ⲇ * 569);
		Δ.bezierCurveTo(44 * Ⲇ, Ⲇ * 576, 58 * Ⲇ, Ⲇ * 574, 68 * Ⲇ, 569 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 68, 584 * Ⲇ, Ⲇ * 68, 584 * Ⲇ, 68 * Ⲇ, Ⲇ * 599);
		Δ.bezierCurveTo(Ⲇ * 68, Ⲇ * 608, 65 * Ⲇ, Ⲇ * 618, Ⲇ * 49, Ⲇ * 617);
		Δ.bezierCurveTo(Ⲇ * 34, Ⲇ * 617, Ⲇ * 32, Ⲇ * 610, Ⲇ * 32, 598 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[6], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 41, 581 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 48, Ⲇ * 584, Ⲇ * 55, Ⲇ * 583, Ⲇ * 60, Ⲇ * 581);
		Δ.bezierCurveTo(Ⲇ * 60, 589.5 * Ⲇ, 60 * Ⲇ, Ⲇ * 589.5, Ⲇ * 60, Ⲇ * 598);
		Δ.bezierCurveTo(60 * Ⲇ, Ⲇ * 604, Ⲇ * 59, 609 * Ⲇ, 48 * Ⲇ, 608 * Ⲇ);
		Δ.bezierCurveTo(40 * Ⲇ, Ⲇ * 607, 40 * Ⲇ, 606 * Ⲇ, Ⲇ * 41, Ⲇ * 581);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⵠᐃΔⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(31 * Ⲇ, Ⲇ * 106);
		Δ.bezierCurveTo(31 * Ⲇ, 124.5 * Ⲇ, 31 * Ⲇ, Ⲇ * 124.5, Ⲇ * 31, 143 * Ⲇ);
		Δ.bezierCurveTo(31 * Ⲇ, Ⲇ * 163, Ⲇ * 38, 169 * Ⲇ, 48 * Ⲇ, Ⲇ * 168);
		Δ.bezierCurveTo(57 * Ⲇ, 168 * Ⲇ, 67 * Ⲇ, Ⲇ * 165, 67 * Ⲇ, Ⲇ * 148);
		Δ.bezierCurveTo(67 * Ⲇ, Ⲇ * 123.5, Ⲇ * 67, 123.5 * Ⲇ, Ⲇ * 67, Ⲇ * 99);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[6], Ⲇ * 8);
		Δ.save();
		Δ.translate(Ⲇ * -46, Ⲇ * -50);
		Δ.scale(2, 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(51 * Ⲇ, Ⲇ * 80);
		Δ.bezierCurveTo(Ⲇ * 51, 89.5 * Ⲇ, Ⲇ * 51, Ⲇ * 89.5, 51 * Ⲇ, Ⲇ * 99);
		Δ.bezierCurveTo(Ⲇ * 49, 103 * Ⲇ, Ⲇ * 46, 105 * Ⲇ, 44 * Ⲇ, Ⲇ * 99);
		Δ.bezierCurveTo(Ⲇ * 44, Ⲇ * 88.5, 44 * Ⲇ, Ⲇ * 88.5, 44 * Ⲇ, 78 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8]);
		Δ.restore();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(49 * Ⲇ, Ⲇ * 27);
		Δ.bezierCurveTo(Ⲇ * 64, Ⲇ * 62.5, Ⲇ * 64, 62.5 * Ⲇ, 79 * Ⲇ, 98 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 74, Ⲇ * 113, Ⲇ * 63, Ⲇ * 121, Ⲇ * 50, Ⲇ * 122);
		Δ.bezierCurveTo(Ⲇ * 35, Ⲇ * 123, Ⲇ * 22, Ⲇ * 109, Ⲇ * ⲆΔᐃΔⵠ, 98 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[ⵠΔᐃΔΔⲆᐃ], Ⲇ * 8);
		Δ.scale(2, ⵠⵠΔⵠ);
		Δ.translate(-23 * Ⲇ, -20 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(57 * Ⲇ, 69 * Ⲇ);
		Δ.bezierCurveTo(50 * Ⲇ, Ⲇ * 76, 43 * Ⲇ, Ⲇ * 75, Ⲇ * 38, 69 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 43, 57 * Ⲇ, Ⲇ * 43, Ⲇ * 57, 48 * Ⲇ, 45 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[10]);
		return ᐃⵠ
	}

	function ΔⲆᐃⵠᐃΔᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 90;
		ᐃⵠ.height = 98 * Ⲇ;
		Δ.translate(ⵠΔⵠᐃ, Ⲇ * ΔΔⲆΔ);
		if (ᐃⲆ === Ⲇⵠᐃ) {
			Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
			Δ.save();
			Δ.translate(44 * Ⲇ, Ⲇ * 50);
			Δ.rotate(.2);
			ΔΔΔΔ(Δ, ⲆⵠⲆⲆⵠ, Ⲇ * 41, Ⲇ * ⲆⲆᐃᐃⵠ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[0])
		}
		Δ.globalAlpha = 1;
		Δ.save();
		Δ.translate(Ⲇ * 44, 44 * Ⲇ);
		Δ.rotate(.2);
		ΔΔΔΔ(Δ, ⵠⵠΔᐃΔⵠⲆ, 41 * Ⲇ, Ⲇ * ⵠⵠⵠΔΔ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[ΔⲆⵠΔ], Ⲇ * ⵠⵠⵠᐃⲆ);
		Δ.rotate(-.32);
		ΔΔΔΔ(Δ, 9, Ⲇ * 32, Ⲇ * 10);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], ᐃⵠⵠⲆ * Ⲇ);
		Δ.rotate(.68);
		ΔΔΔΔ(Δ, 9, 23 * Ⲇ, Ⲇ * Δᐃⵠⵠᐃ);
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[ᐃⵠⵠᐃⵠ], ᐃⲆΔⵠΔ * Ⲇ);
		Δ.restore();
		Δ.save();
		Δ.translate(Ⲇ * 45, 45 * Ⲇ);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, Ⲇ * -ΔᐃΔᐃΔ, -25.5 * Ⲇ, Ⲇ * 18, Ⲇ * 51, Ⲇ * 30);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔΔⲆΔ], Δⵠ[ᐃᐃⵠΔ], ⵠΔⵠⲆ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 45, Ⲇ * 45);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, -26 * Ⲇ, -ᐃⵠⲆΔⵠΔⵠ * Ⲇ, 52 * Ⲇ, Ⲇ * ⲆⵠΔᐃⲆ, Ⲇ * 30);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ᐃᐃⵠΔ], 2 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 45, Ⲇ * 29, 7 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[Δᐃᐃⵠ]);
		ⵠΔᐃ(Δ, Ⲇ * 45, Ⲇ * 61, 7 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[5]);
		ⵠΔᐃ(Δ, 28 * Ⲇ, Ⲇ * 45, Ⲇ * ΔΔⵠⲆᐃ);
		ⵠᐃ(Δ, Δⵠ[5]);
		ⵠΔᐃ(Δ, Ⲇ * 62, 45 * Ⲇ, ᐃᐃⲆΔΔ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[5]);
		return ᐃⵠ
	}

	function ⲆᐃΔⵠᐃΔΔᐃⲆ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 118;
		ᐃⵠ.height = Ⲇ * 129;
		Δ.save();
		Δ.translate(Ⲇ * 90, 90 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -86.5, -86 * Ⲇ, Ⲇ * 110, 110 * Ⲇ, 15 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ], Δⵠ[1], ΔΔⲆΔ);
		return ᐃⵠ
	}

	function ⵠΔΔΔⲆᐃⲆⵠⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 200 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 200;
		Δ.save();
		Δ.translate(Ⲇ * 112, Ⲇ * 158);
		ᐃΔⵠ(Δ, -86.5 * Ⲇ, Ⲇ * -86, 150 * Ⲇ, 35 * Ⲇ, Ⲇ * 20);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]);
		Δ.save();
		Δ.translate(170 * Ⲇ, Ⲇ * 100);
		ᐃΔⵠ(Δ, -86.5 * Ⲇ, Ⲇ * -86, Ⲇ * 35, 150 * Ⲇ, ⲆⲆⲆΔⲆ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
		return ᐃⵠ
	}

	function ᐃᐃᐃⵠⲆⲆΔⵠᐃ(Ⲇ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 321;
		ᐃⵠ.height = Ⲇ * 345;
		Δ.translate(ⵠⵠᐃ, 5 * Ⲇ);
		Δ.translate(Ⲇⵠⵠᐃ, 20 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 160.5, 159.5 * Ⲇ, Ⲇ * 156.39595138242822);
		ⵠᐃ(Δ, ᐃ[ⲆⵠⵠΔᐃ], ᐃ[7], ᐃⵠⵠⲆ * Ⲇ);
		Δ.translate(ⵠⵠⵠ, Ⲇ * -ⵠⲆΔⲆⲆ);
		ⵠΔᐃ(Δ, 160.5 * Ⲇ, Ⲇ * 159.5, Ⲇ * 156.39595138242822);
		ⵠᐃ(Δ, ᐃ[375], ᐃ[217], Ⲇ * ᐃᐃᐃⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 31.999969482421875, Ⲇ * 163.07290649414062);
		Δ.bezierCurveTo(22.999969482421875 * Ⲇ, Ⲇ * 67.07290649414062, Ⲇ * 106, 20.072906494140625 * Ⲇ, Ⲇ * 162, 23.072906494140625 * Ⲇ);
		Δ.bezierCurveTo(269.9999694824219 * Ⲇ, Ⲇ * 31.072906494140625, Ⲇ * 292.9999694824219, Ⲇ * 120.07290649414062, Ⲇ * 294.9999694824219, 161.07290649414062 * Ⲇ);
		Δ.bezierCurveTo(165.49996948242188 * Ⲇ, Ⲇ * 162.07290649414062, Ⲇ * 165.49996948242188, 162.07290649414062 * Ⲇ, Ⲇ * 35.999969482421875, 163.07290649414062 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃ[209]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(32.999969482421875 * Ⲇ, Ⲇ * 165.07290649414062);
		Δ.bezierCurveTo(16.999969482421875 * Ⲇ, 221.07290649414062 * Ⲇ, Ⲇ * 85, Ⲇ * 289.0729064941406, 156 * Ⲇ, Ⲇ * 294.0729064941406);
		Δ.bezierCurveTo(Ⲇ * 263.9999694824219, 293.0729064941406 * Ⲇ, Ⲇ * 295.9999694824219, 199.07290649414062 * Ⲇ, Ⲇ * 294.9999694824219, Ⲇ * 159.07290649414062);
		Δ.closePath();
		ⵠᐃ(Δ, "#071A1B");
		ⵠΔᐃ(Δ, Ⲇ * 161, 158.07290649414062 * Ⲇ, 133.4053971921676 * Ⲇ);
		ⵠᐃ(Δ, undefined, ᐃ[217], Ⲇ * ᐃᐃᐃⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(31.999969482421875 * Ⲇ, 161.62844848632812 * Ⲇ);
		Δ.bezierCurveTo(162.49996948242188 * Ⲇ, 161.62844848632812 * Ⲇ, Ⲇ * 162.49996948242188, 161.62844848632812 * Ⲇ, 292.9999694824219 * Ⲇ, Ⲇ * 161.62844848632812);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆᐃΔᐃ, ᐃ[217], Ⲇ * 12);
		Δ.translate(0, 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(66 * Ⲇ, Ⲇ * 158.29513549804688);
		Δ.bezierCurveTo(86 * Ⲇ, Ⲇ * 158.29513549804688, Ⲇ * 86, 158.29513549804688 * Ⲇ, Ⲇ * 106, Ⲇ * 158.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[465], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 57.999969482421875, Ⲇ * 117.29513549804688);
		Δ.bezierCurveTo(85 * Ⲇ, 128.29513549804688 * Ⲇ, 85 * Ⲇ, 128.29513549804688 * Ⲇ, 113 * Ⲇ, 139.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠⵠᐃⵠΔ, ᐃ[465], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 95, Ⲇ * 90.29513549804688);
		Δ.bezierCurveTo(112 * Ⲇ, 105.79513549804688 * Ⲇ, Ⲇ * 112, 105.79513549804688 * Ⲇ, 129 * Ⲇ, 121.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃⲆⲆⲆᐃ, ᐃ[465], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(116 * Ⲇ, Ⲇ * 52.850677490234375);
		Δ.bezierCurveTo(Ⲇ * 130, 83.85067749023438 * Ⲇ, Ⲇ * 130, Ⲇ * 83.85067749023438, Ⲇ * 144, Ⲇ * 114.85067749023438);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[465], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 159, 61.295135498046875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 160.49996948242188, 92.29513549804688 * Ⲇ, Ⲇ * 160.49996948242188, Ⲇ * 92.29513549804688, Ⲇ * 160, 123.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[465], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 203, Ⲇ * 51.295135498046875);
		Δ.bezierCurveTo(190.49996948242188 * Ⲇ, Ⲇ * 83.29513549804688, Ⲇ * 190.49996948242188, 83.29513549804688 * Ⲇ, 176 * Ⲇ, Ⲇ * 115.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[465], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(225 * Ⲇ, 89.29513549804688 * Ⲇ);
		Δ.bezierCurveTo(210.49996948242188 * Ⲇ, 104.79513549804688 * Ⲇ, Ⲇ * 210.49996948242188, Ⲇ * 104.79513549804688, 194 * Ⲇ, Ⲇ * 120.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠΔΔⲆΔ, ᐃ[465], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(266.9999694824219 * Ⲇ, Ⲇ * 112.29513549804688);
		Δ.bezierCurveTo(Ⲇ * 233.49996948242188, 127.29513549804688 * Ⲇ, Ⲇ * 233.49996948242188, Ⲇ * 127.29513549804688, 199 * Ⲇ, Ⲇ * 142.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, ΔΔⲆⲆⲆ, ᐃ[465], ⲆⲆⲆⲆΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 256.9999694824219, Ⲇ * 155.29513549804688);
		Δ.bezierCurveTo(238.49996948242188 * Ⲇ, 156.29513549804688 * Ⲇ, Ⲇ * 238.49996948242188, Ⲇ * 156.29513549804688, 219 * Ⲇ, Ⲇ * 157.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[465], ⲆᐃⵠⲆⵠ * Ⲇ);
		Δ.translate(ΔᐃⲆⲆ, Ⲇ * -ⵠⵠΔⲆⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(66 * Ⲇ, 158.29513549804688 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 86, Ⲇ * 158.29513549804688, Ⲇ * 86, 158.29513549804688 * Ⲇ, Ⲇ * 106, Ⲇ * 158.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[379], Ⲇ * ᐃⲆᐃⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(57.999969482421875 * Ⲇ, Ⲇ * 117.29513549804688);
		Δ.bezierCurveTo(85 * Ⲇ, Ⲇ * 128.29513549804688, 85 * Ⲇ, 128.29513549804688 * Ⲇ, 113 * Ⲇ, 139.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[379], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 95, 90.29513549804688 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 112, 105.79513549804688 * Ⲇ, Ⲇ * 112, 105.79513549804688 * Ⲇ, Ⲇ * 129, Ⲇ * 121.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃⲆⲆⲆᐃ, ᐃ[379], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(116 * Ⲇ, 52.850677490234375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 130, Ⲇ * 83.85067749023438, 130 * Ⲇ, 83.85067749023438 * Ⲇ, 144 * Ⲇ, 114.85067749023438 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[379], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 159, 61.295135498046875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 160.49996948242188, Ⲇ * 92.29513549804688, Ⲇ * 160.49996948242188, Ⲇ * 92.29513549804688, Ⲇ * 160, 123.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Ⲇᐃᐃⵠᐃ, ᐃ[379], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(203 * Ⲇ, 51.295135498046875 * Ⲇ);
		Δ.bezierCurveTo(190.49996948242188 * Ⲇ, 83.29513549804688 * Ⲇ, 190.49996948242188 * Ⲇ, 83.29513549804688 * Ⲇ, 176 * Ⲇ, 115.29513549804688 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃΔᐃⲆⵠ, ᐃ[379], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(225 * Ⲇ, 89.29513549804688 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 210.49996948242188, Ⲇ * 104.79513549804688, Ⲇ * 210.49996948242188, Ⲇ * 104.79513549804688, 194 * Ⲇ, Ⲇ * 120.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[379], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(266.9999694824219 * Ⲇ, Ⲇ * 112.29513549804688);
		Δ.bezierCurveTo(233.49996948242188 * Ⲇ, Ⲇ * 127.29513549804688, Ⲇ * 233.49996948242188, Ⲇ * 127.29513549804688, Ⲇ * 199, Ⲇ * 142.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[379], ⵠⵠΔⵠΔⲆᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(256.9999694824219 * Ⲇ, Ⲇ * 155.29513549804688);
		Δ.bezierCurveTo(238.49996948242188 * Ⲇ, 156.29513549804688 * Ⲇ, Ⲇ * 238.49996948242188, Ⲇ * 156.29513549804688, 219 * Ⲇ, Ⲇ * 157.29513549804688);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, ᐃ[379], Ⲇ * Ⲇⵠᐃᐃᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(96 * Ⲇ, Ⲇ * 166);
		Δ.bezierCurveTo(Ⲇ * 88, Ⲇ * 117, Ⲇ * 129, Ⲇ * 92, 161 * Ⲇ, 91 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 201, Ⲇ * 90, 223 * Ⲇ, Ⲇ * 121, 230 * Ⲇ, 161 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, "#704618", "#5D3D1A", Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 94.00003051757812, 164.40341186523438 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 162.50003051757812, 164.40341186523438 * Ⲇ, 230.00003051757812 * Ⲇ, Ⲇ * 165.40341186523438, Ⲇ * 231.00003051757812, 164.40341186523438 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 214.00003051757812, Ⲇ * 267.4034118652344, 92.00003051757812 * Ⲇ, Ⲇ * 243.40341186523438, 93.00003051757812 * Ⲇ, Ⲇ * 165.40341186523438);
		Δ.closePath();
		ⵠᐃ(Δ, "#E1DDD5", "#EAE7E4", 8 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 160.00003051757812, Ⲇ * 166.49432373046875, 28.30194339616981 * Ⲇ);
		ⵠᐃ(Δ, ᐃ[375], ᐃ[217], Ⲇ * 10);
		return ᐃⵠ
	}

	function ⵠᐃⲆⵠΔⵠⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 88 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 647;
		Δ.translate(Ⲇ * 20, ᐃᐃⵠⲆᐃᐃⲆ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⵠⲆ;
		Δ.save();
		Δ.translate(Ⲇ * 45, 384.5 * Ⲇ);
		ᐃΔⵠ(Δ, -15 * Ⲇ, -216.5 * Ⲇ, 30 * Ⲇ, 433 * Ⲇ, ⵠᐃⲆⵠᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 27, Ⲇ * 572);
		Δ.bezierCurveTo(44 * Ⲇ, 580 * Ⲇ, Ⲇ * 55, 576 * Ⲇ, 62 * Ⲇ, Ⲇ * 572);
		Δ.bezierCurveTo(Ⲇ * 65, 585.5 * Ⲇ, 65 * Ⲇ, Ⲇ * 585.5, Ⲇ * 68, Ⲇ * 599);
		Δ.bezierCurveTo(Ⲇ * 71, 612 * Ⲇ, Ⲇ * 68, Ⲇ * 618, Ⲇ * 34, 616 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ⲆⵠΔᐃⵠⵠⲆ, 615 * Ⲇ, 19 * Ⲇ, 607 * Ⲇ, Ⲇ * 27, 573 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(32 * Ⲇ, 587 * Ⲇ);
		Δ.bezierCurveTo(39 * Ⲇ, Ⲇ * 590, 48 * Ⲇ, 588 * Ⲇ, Ⲇ * 54, 587 * Ⲇ);
		Δ.bezierCurveTo(57 * Ⲇ, Ⲇ * 604, 59 * Ⲇ, 609 * Ⲇ, Ⲇ * 46, 609 * Ⲇ);
		Δ.bezierCurveTo(27 * Ⲇ, 609 * Ⲇ, Ⲇ * 28, 605 * Ⲇ, Ⲇ * 33, 588 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(31 * Ⲇ, 113 * Ⲇ);
		Δ.bezierCurveTo(27 * Ⲇ, 139 * Ⲇ, Ⲇ * 27, Ⲇ * 139, Ⲇ * 23, Ⲇ * 165);
		Δ.bezierCurveTo(Ⲇ * ΔΔⵠΔᐃᐃᐃ, 187 * Ⲇ, 39 * Ⲇ, 195 * Ⲇ, 57 * Ⲇ, Ⲇ * 186);
		Δ.bezierCurveTo(Ⲇ * 68, 180 * Ⲇ, 65 * Ⲇ, 171 * Ⲇ, Ⲇ * 62, Ⲇ * 153);
		Δ.bezierCurveTo(Ⲇ * 58.5, 131 * Ⲇ, Ⲇ * 58.5, 131 * Ⲇ, 55 * Ⲇ, Ⲇ * 109);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 39, 139 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 43, Ⲇ * 139, 43 * Ⲇ, Ⲇ * 139, 47 * Ⲇ, Ⲇ * 139);
		Δ.bezierCurveTo(Ⲇ * 51, Ⲇ * 158, Ⲇ * 56, 176 * Ⲇ, 44 * Ⲇ, 175 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 33, Ⲇ * 177, Ⲇ * 34, Ⲇ * 167, 39 * Ⲇ, Ⲇ * 140);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 44, 29 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 57, Ⲇ * 63, Ⲇ * 57, Ⲇ * 63, 70 * Ⲇ, 97 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 60, 111 * Ⲇ, Ⲇ * 60, Ⲇ * 111, 50 * Ⲇ, Ⲇ * 125);
		Δ.bezierCurveTo(45 * Ⲇ, Ⲇ * 128, Ⲇ * 41, 128 * Ⲇ, 35 * Ⲇ, Ⲇ * 124);
		Δ.bezierCurveTo(26.5 * Ⲇ, Ⲇ * 110, Ⲇ * 26.5, Ⲇ * 110, ᐃΔⲆⲆⵠⵠᐃ * Ⲇ, Ⲇ * 96);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 44, 54 * Ⲇ);
		Δ.bezierCurveTo(50 * Ⲇ, 72 * Ⲇ, Ⲇ * 50, Ⲇ * 72, Ⲇ * 56, Ⲇ * 90);
		Δ.bezierCurveTo(Ⲇ * 58, 94 * Ⲇ, 59 * Ⲇ, Ⲇ * 98, 53 * Ⲇ, 105 * Ⲇ);
		Δ.bezierCurveTo(47 * Ⲇ, 113 * Ⲇ, 43 * Ⲇ, Ⲇ * 113, 36 * Ⲇ, 103 * Ⲇ);
		Δ.bezierCurveTo(29 * Ⲇ, Ⲇ * 96, Ⲇ * 31, 94 * Ⲇ, Ⲇ * 35, Ⲇ * 83);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ]);
		Δ.translate(Ⲇ * -ⲆⵠΔⵠⵠ, -ⵠⲆᐃⲆⵠ * Ⲇ);
		Δ.globalAlpha = ⵠⲆⵠⲆ;
		Δ.save();
		Δ.translate(45 * Ⲇ, Ⲇ * 384.5);
		ᐃΔⵠ(Δ, Ⲇ * -15, -216.5 * Ⲇ, Ⲇ * 30, 433 * Ⲇ, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[2], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 27, 572 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 44, 580 * Ⲇ, Ⲇ * 55, 576 * Ⲇ, 62 * Ⲇ, 572 * Ⲇ);
		Δ.bezierCurveTo(65 * Ⲇ, Ⲇ * 585.5, 65 * Ⲇ, 585.5 * Ⲇ, 68 * Ⲇ, Ⲇ * 599);
		Δ.bezierCurveTo(71 * Ⲇ, 612 * Ⲇ, Ⲇ * 68, 618 * Ⲇ, 34 * Ⲇ, Ⲇ * 616);
		Δ.bezierCurveTo(Ⲇ * 14, Ⲇ * 615, Ⲇ * ΔⲆⲆⵠⲆΔΔ, Ⲇ * 607, 27 * Ⲇ, Ⲇ * 573);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⵠⲆ], Δⵠ[ΔΔⲆΔ], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 32, 587 * Ⲇ);
		Δ.bezierCurveTo(39 * Ⲇ, 590 * Ⲇ, Ⲇ * 48, Ⲇ * 588, 54 * Ⲇ, Ⲇ * 587);
		Δ.bezierCurveTo(57 * Ⲇ, 604 * Ⲇ, 59 * Ⲇ, 609 * Ⲇ, 46 * Ⲇ, Ⲇ * 609);
		Δ.bezierCurveTo(Ⲇ * 27, Ⲇ * 609, 28 * Ⲇ, Ⲇ * 605, Ⲇ * 33, Ⲇ * 588);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆᐃᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(31 * Ⲇ, Ⲇ * 113);
		Δ.bezierCurveTo(27 * Ⲇ, 139 * Ⲇ, Ⲇ * 27, Ⲇ * 139, 23 * Ⲇ, Ⲇ * 165);
		Δ.bezierCurveTo(Ⲇ * 18, 187 * Ⲇ, Ⲇ * 39, 195 * Ⲇ, 57 * Ⲇ, 186 * Ⲇ);
		Δ.bezierCurveTo(68 * Ⲇ, Ⲇ * 180, Ⲇ * 65, Ⲇ * 171, Ⲇ * 62, 153 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 58.5, 131 * Ⲇ, Ⲇ * 58.5, Ⲇ * 131, Ⲇ * 55, 109 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆⲆ], Δⵠ[4], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(39 * Ⲇ, Ⲇ * 139);
		Δ.bezierCurveTo(Ⲇ * 43, 139 * Ⲇ, 43 * Ⲇ, 139 * Ⲇ, Ⲇ * 47, 139 * Ⲇ);
		Δ.bezierCurveTo(51 * Ⲇ, Ⲇ * 158, Ⲇ * 56, Ⲇ * 176, 44 * Ⲇ, 175 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 33, 177 * Ⲇ, Ⲇ * 34, 167 * Ⲇ, Ⲇ * 39, 140 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 44, 29 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 57, Ⲇ * 63, 57 * Ⲇ, Ⲇ * 63, 70 * Ⲇ, Ⲇ * 97);
		Δ.bezierCurveTo(60 * Ⲇ, Ⲇ * 111, Ⲇ * 60, Ⲇ * 111, 50 * Ⲇ, Ⲇ * 125);
		Δ.bezierCurveTo(45 * Ⲇ, 128 * Ⲇ, Ⲇ * 41, Ⲇ * 128, 35 * Ⲇ, 124 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 26.5, Ⲇ * 110, 26.5 * Ⲇ, 110 * Ⲇ, Ⲇ * ᐃⵠⲆⲆΔ, 96 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠᐃⵠ], Δⵠ[7], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(44 * Ⲇ, Ⲇ * 54);
		Δ.bezierCurveTo(Ⲇ * 50, 72 * Ⲇ, 50 * Ⲇ, Ⲇ * 72, Ⲇ * 56, 90 * Ⲇ);
		Δ.bezierCurveTo(58 * Ⲇ, Ⲇ * 94, Ⲇ * 59, Ⲇ * 98, Ⲇ * 53, 105 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 47, Ⲇ * 113, Ⲇ * 43, Ⲇ * 113, 36 * Ⲇ, Ⲇ * 103);
		Δ.bezierCurveTo(29 * Ⲇ, 96 * Ⲇ, Ⲇ * 31, Ⲇ * 94, 35 * Ⲇ, Ⲇ * 83);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8]);
		return ᐃⵠ
	}
	const ⲆⲆΔⵠ = ⲆⵠⲆ;

	function ΔⲆΔΔⲆⲆΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 33;
		ᐃⵠ.height = Ⲇ * 35;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(12.75 * Ⲇ, Ⲇ * 7.1328125);
		Δ.bezierCurveTo(26.75 * Ⲇ, Ⲇ * 8.1328125, 27.75 * Ⲇ, 14.1328125 * Ⲇ, 24.75 * Ⲇ, Ⲇ * 23.1328125);
		Δ.bezierCurveTo(Ⲇ * 19.75, Ⲇ * 31.1328125, 15.75 * Ⲇ, 33.1328125 * Ⲇ, Ⲇ * 6.75, 26.1328125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * .75, Ⲇ * 19.1328125, Ⲇ * 4.75, 8.1328125 * Ⲇ, Ⲇ * 12.75, Ⲇ * 7.1328125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		return ᐃⵠ
	}

	function ⵠⲆᐃⲆⲆ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		if (ᐃⲆ == 0) {
			ᐃⵠ.width = Ⲇ * 566;
			ᐃⵠ.height = Ⲇ * 429;
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(312.625 * Ⲇ, Ⲇ * 39.046875);
			Δ.bezierCurveTo(Ⲇ * 456.625, 60.046875 * Ⲇ, Ⲇ * 521.625, Ⲇ * 134.046875, 528.625 * Ⲇ, 199.046875 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 540.625, 298.046875 * Ⲇ, Ⲇ * 491.625, Ⲇ * 364.046875, 405.625 * Ⲇ, Ⲇ * 394.046875);
			Δ.bezierCurveTo(270.625 * Ⲇ, Ⲇ * 429.046875, 182.625 * Ⲇ, Ⲇ * 395.046875, 100.625 * Ⲇ, 344.046875 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 15.625, 283.046875 * Ⲇ, 20.625 * Ⲇ, Ⲇ * 195.046875, 33.625 * Ⲇ, Ⲇ * 158.046875);
			Δ.bezierCurveTo(56.625 * Ⲇ, Ⲇ * 80.046875, Ⲇ * 102.625, Ⲇ * 46.046875, 183.625 * Ⲇ, Ⲇ * 33.046875);
			Δ.bezierCurveTo(225.625 * Ⲇ, 25.046875 * Ⲇ, 270.625 * Ⲇ, 30.046875 * Ⲇ, Ⲇ * 312.625, Ⲇ * 39.046875);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0])
		} else if (ΔΔΔᐃ == ᐃⲆ) {
			var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
			var Δ = ᐃⵠ.getContext(ᐃ[269]);
			ᐃⵠ.width = Ⲇ * 511;
			ᐃⵠ.height = 408 * Ⲇ;
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 141.625, 49.296875 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 225.625, Ⲇ * 10.296875, Ⲇ * 320.625, 16.296875 * Ⲇ, Ⲇ * 390.625, Ⲇ * 39.296875);
			Δ.bezierCurveTo(Ⲇ * 476.625, 71.296875 * Ⲇ, Ⲇ * 483.625, Ⲇ * 142.296875, Ⲇ * 486.625, Ⲇ * 197.296875);
			Δ.bezierCurveTo(Ⲇ * 491.625, 289.296875 * Ⲇ, 462.625 * Ⲇ, Ⲇ * 317.296875, Ⲇ * 417.625, 351.296875 * Ⲇ);
			Δ.bezierCurveTo(367.625 * Ⲇ, 385.296875 * Ⲇ, Ⲇ * 313.625, Ⲇ * 404.296875, 218.625 * Ⲇ, 395.296875 * Ⲇ);
			Δ.bezierCurveTo(108.625 * Ⲇ, Ⲇ * 381.296875, Ⲇ * 81.625, 350.296875 * Ⲇ, Ⲇ * 52.625, 305.296875 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 16.625, Ⲇ * 244.296875, 23.625 * Ⲇ, Ⲇ * 171.296875, 37.625 * Ⲇ, Ⲇ * 145.296875);
			Δ.bezierCurveTo(Ⲇ * 65.625, Ⲇ * 84.296875, Ⲇ * 97.625, Ⲇ * 74.296875, Ⲇ * 141.625, 49.296875 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ])
		} else if (ᐃᐃΔⵠ == ᐃⲆ) {
			var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
			var Δ = ᐃⵠ.getContext(ᐃ[269]);
			ᐃⵠ.width = 504 * Ⲇ;
			ᐃⵠ.height = Ⲇ * 408;
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 153.625, Ⲇ * 46.296875);
			Δ.bezierCurveTo(Ⲇ * 271.625, Ⲇ * 17.296875, Ⲇ * 345.625, 35.296875 * Ⲇ, Ⲇ * 410.625, Ⲇ * 71.296875);
			Δ.bezierCurveTo(Ⲇ * 473.625, 109.296875 * Ⲇ, 478.625 * Ⲇ, Ⲇ * 167.296875, Ⲇ * 473.625, 205.296875 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 462.625, Ⲇ * 295.296875, 438.625 * Ⲇ, Ⲇ * 316.296875, 388.625 * Ⲇ, Ⲇ * 345.296875);
			Δ.bezierCurveTo(331.625 * Ⲇ, 374.296875 * Ⲇ, Ⲇ * 273.625, 392.296875 * Ⲇ, 180.625 * Ⲇ, 387.296875 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 111.625, Ⲇ * 380.296875, 86.625 * Ⲇ, 360.296875 * Ⲇ, 51.625 * Ⲇ, 309.296875 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 23.625, Ⲇ * 267.296875, Ⲇ * 25.625, 226.296875 * Ⲇ, 27.625 * Ⲇ, 175.296875 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 37.625, Ⲇ * 99.296875, 88.625 * Ⲇ, 57.296875 * Ⲇ, 153.625 * Ⲇ, 46.296875 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0])
		}
		return ᐃⵠ
	}

	function ⵠⵠΔⵠᐃⲆΔ() {
		var Ⲇ = 1;
		var ᐃᐃΔ = ⵠᐃᐃᐃⲆ.time;
		if (ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ]) {
			Δ.drawImage(ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ᐃᐃΔ][ΔΔΔᐃ], ⲆⵠᐃΔ + 480, Δⵠᐃᐃ + 190);
			Δ.drawImage(ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ᐃᐃΔ][ᐃⲆⵠᐃ], ⲆⵠᐃΔ + 180, Δⵠᐃᐃ - 430);
			Δ.drawImage(ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ᐃᐃΔ][1], ⲆⵠᐃΔ - 855, Δⵠᐃᐃ + 100);
			Δ.drawImage(ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ᐃᐃΔ][0], ⲆⵠᐃΔ - 550, Δⵠᐃᐃ - 300);
			Δ.drawImage(ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ᐃᐃΔ][ⵠᐃⵠ], ⲆⵠᐃΔ - 1020, Δⵠᐃᐃ - 520)
		}
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ] && (Δ.drawImage(ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ᐃᐃΔ][1], ⲆⵠᐃΔ - 80, Δⵠᐃᐃ - 640), Δ.drawImage(ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ᐃᐃΔ][1], ⲆⵠᐃΔ + 80, Δⵠᐃᐃ + 490), Δ.drawImage(ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ᐃᐃΔ][ⵠⲆΔᐃ], ⲆⵠᐃΔ - 180, Δⵠᐃᐃ - 700), Δ.drawImage(ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ᐃᐃΔ][0], ⲆⵠᐃΔ + 550, Δⵠᐃᐃ + ⵠⵠΔΔᐃ), Δ.drawImage(ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ᐃᐃΔ][ⵠⵠⵠⲆ], ⲆⵠᐃΔ + 450, Δⵠᐃᐃ + 300), Δ.drawImage(ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ᐃᐃΔ][ᐃⲆⲆ], ⲆⵠᐃΔ + 780, Δⵠᐃᐃ + 300), Δ.drawImage(ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ᐃᐃΔ][ᐃⵠΔⲆ], ⲆⵠᐃΔ + 980, Δⵠᐃᐃ + 200), Δ.drawImage(ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ᐃᐃΔ][ΔⲆⵠΔ], ⲆⵠᐃΔ + 680, Δⵠᐃᐃ + 600), Δ.drawImage(ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ᐃᐃΔ][ᐃᐃΔⵠ], ⲆⵠᐃΔ - 380, Δⵠᐃᐃ + 100), Δ.drawImage(ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ᐃᐃΔ][2], ⲆⵠᐃΔ + 280, Δⵠᐃᐃ + 250));
		if (ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃ]) {
			Δ.drawImage(ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃ][ᐃᐃΔ][0], ⲆⵠᐃΔ - 590, Δⵠᐃᐃ);
			Δ.drawImage(ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃ][ᐃᐃΔ][0], ⲆⵠᐃΔ + 120, Δⵠᐃᐃ - 390);
			Δ.drawImage(ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃ][ᐃᐃΔ][ᐃⲆΔ], ⲆⵠᐃΔ - 270, Δⵠᐃᐃ + 340)
		}
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ] && (Δ.drawImage(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ᐃᐃΔ][4], ⲆⵠᐃΔ - 700, Δⵠᐃᐃ - 600), Δ.drawImage(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ᐃᐃΔ][ⲆΔⲆΔ], ⲆⵠᐃΔ - 970, Δⵠᐃᐃ - 250), Δ.drawImage(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ᐃᐃΔ][ΔⲆⵠⵠ], ⲆⵠᐃΔ - 720, Δⵠᐃᐃ - 200), Δ.drawImage(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ᐃᐃΔ][2], ⲆⵠᐃΔ - 1020, Δⵠᐃᐃ + 340), Δ.drawImage(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ᐃᐃΔ][0], ⲆⵠᐃΔ - 1120, Δⵠᐃᐃ - ᐃⲆᐃ), Δ.drawImage(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ᐃᐃΔ][ⵠⲆⵠⲆ], ⲆⵠᐃΔ - 650, Δⵠᐃᐃ - 330), Δ.drawImage(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ᐃᐃΔ][4], ⲆⵠᐃΔ - 495, Δⵠᐃᐃ - 90), Δ.drawImage(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ᐃᐃΔ][3], ⲆⵠᐃΔ - 520, Δⵠᐃᐃ + 340), Δ.drawImage(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ᐃᐃΔ][2], ⲆⵠᐃΔ + 830, Δⵠᐃᐃ - 520));
		if (ᐃᐃ[ⵠ.ΔⲆⲆΔΔ]) {}
		if (ⲆΔⵠ && ⵠⲆΔ) {
			var Ⲇᐃ = ⲆΔⵠ.ⲆⵠΔ.x;
			var ⲆⲆⲆ = ⲆΔⵠ.ⲆⵠΔ.y;
			ⲆΔⵠ.ⲆⵠΔ.x = ⲆⵠᐃΔ;
			ⲆΔⵠ.ⲆⵠΔ.y = Δⵠᐃᐃ;
			var ΔᐃⲆⵠⲆⲆⵠⲆⵠ = ⵠⲆΔ.time;
			ⵠⲆΔ.time = ⵠᐃᐃᐃⲆ.time;
			var ⵠΔⲆⲆⲆ = ⵠᐃᐃᐃⲆ.items;
			ⵠΔⲆⲆⲆ[2].x = 400;
			ⵠΔⲆⲆⲆ[2].y = ⵠΔᐃᐃⲆ;
			ⵠΔⲆⲆⲆ[ⲆΔⲆΔ].ᐃⵠΔᐃ(ⵠ.ΔⵠΔⲆⵠ);
			var ΔΔⵠΔ = ⵠΔⲆⲆⲆ[1];
			ΔΔⵠΔ.x = -500;
			ΔΔⵠΔ.y = 100;
			ΔΔⵠΔ.ΔΔⵠΔ[ⵠⵠΔΔ].x = ΔΔⵠΔ.x - 20.5;
			ΔΔⵠΔ.ΔΔⵠΔ[ᐃⲆΔᐃ].y = ΔΔⵠΔ.y - 22.5;
			ΔΔⵠΔ.ΔΔⵠΔ[ΔΔⵠ].x = ΔΔⵠΔ.x - 35.5;
			ΔΔⵠΔ.ΔΔⵠΔ[1].y = ΔΔⵠΔ.y + 7.5;
			ΔΔⵠΔ.ΔΔⵠΔ[ⵠⲆᐃⵠ].x = ΔΔⵠΔ.x + 7.5;
			ΔΔⵠΔ.ΔΔⵠΔ[ΔΔᐃⲆⵠ].y = ΔΔⵠΔ.y - 30;
			ΔΔⵠΔ.ΔΔⵠΔ[3].x = ΔΔⵠΔ.x + 22.5;
			ΔΔⵠΔ.ΔΔⵠΔ[ⵠᐃⵠΔ].y = ΔΔⵠΔ.y;
			ΔΔⵠΔ.ΔΔⵠΔ[4].x = ΔΔⵠΔ.x - 7.5;
			ΔΔⵠΔ.ΔΔⵠΔ[4].y = ΔΔⵠΔ.y + 14.5;
			for (var ᐃⲆ = ⲆᐃΔⵠ; ΔΔⵠΔ.info > ᐃⲆ; ᐃⲆ++) {
				ΔΔⵠΔ.ΔΔⵠΔ[ᐃⲆ].ᐃⵠΔᐃ(ⵠ.ⵠⲆⲆᐃⲆ)
			}
			var ΔΔⵠΔ = ⵠΔⲆⲆⲆ[ⲆΔⲆᐃ];
			ΔΔⵠΔ.x = 210;
			ΔΔⵠΔ.y = -290;
			ΔΔⵠΔ.ΔΔⵠΔ[Ⲇⵠᐃ].x = ΔΔⵠΔ.x - 20.5;
			ΔΔⵠΔ.ΔΔⵠΔ[ⵠⵠΔΔ].y = ΔΔⵠΔ.y - 22.5;
			ΔΔⵠΔ.ΔΔⵠΔ[ΔΔⵠ].x = ΔΔⵠΔ.x - 35.5;
			ΔΔⵠΔ.ΔΔⵠΔ[1].y = ΔΔⵠΔ.y + 7.5;
			ΔΔⵠΔ.ΔΔⵠΔ[2].x = ΔΔⵠΔ.x + 7.5;
			ΔΔⵠΔ.ΔΔⵠΔ[2].y = ΔΔⵠΔ.y - 30;
			ΔΔⵠΔ.ΔΔⵠΔ[ᐃᐃΔΔ].x = ΔΔⵠΔ.x + 22.5;
			ΔΔⵠΔ.ΔΔⵠΔ[ᐃᐃΔΔ].y = ΔΔⵠΔ.y;
			ΔΔⵠΔ.ΔΔⵠΔ[ΔⲆΔⲆ].x = ΔΔⵠΔ.x - 7.5;
			ΔΔⵠΔ.ΔΔⵠΔ[4].y = ΔΔⵠΔ.y + 14.5;
			for (var ᐃⲆ = 0; ΔΔⵠΔ.info > ᐃⲆ; ᐃⲆ++) {
				ΔΔⵠΔ.ΔΔⵠΔ[ᐃⲆ].ᐃⵠΔᐃ(ⵠ.ⵠⲆⲆᐃⲆ)
			}
			ⵠΔⲆⲆⲆ[0].x = 450;
			ⵠΔⲆⲆⲆ[0].y = -100;
			ⵠΔⲆⲆⲆ[Ⲇⵠᐃ].ⲆΔΔΔⵠ(ⵠ.ⵠⲆΔⵠⵠⵠᐃ);
			ⵠΔⲆⲆⲆ[ⵠᐃΔ].ΔΔⵠⵠᐃ();
			ⲆΔⵠ.ⲆⵠΔ.x = Ⲇᐃ;
			ⲆΔⵠ.ⲆⵠΔ.y = ⲆⲆⲆ;
			ⵠⲆΔ.time = ΔᐃⲆⵠⲆⲆⵠⲆⵠ
		}
	}

	function ⲆΔⵠᐃΔΔΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 163 * Ⲇ;
		ᐃⵠ.height = 163 * Ⲇ;
		Δ.save();
		Δ.translate(Ⲇ * 82.5, 81.1015625 * Ⲇ);
		Δ.rotate(ⵠΔΔⲆ);
		ᐃΔⵠ(Δ, Ⲇ * -65.5, -66 * Ⲇ, 131 * Ⲇ, 131 * Ⲇ, 5 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⲆ]);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⲆⲆᐃ;
		Δ.translate(Ⲇ * 5, Ⲇ * 5);
		Δ.save();
		Δ.translate(Ⲇ * 80, 17.1015625 * Ⲇ);
		ᐃΔⵠ(Δ, -64 * Ⲇ, Ⲇ * -4.5, 129 * Ⲇ, Ⲇ * 9, ΔΔⵠΔⵠ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ]);
		Δ.globalAlpha = 1;
		Δ.translate(Ⲇ * -5, -ⵠⲆⲆⲆ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 80, 17.1015625 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -64, -4.5 * Ⲇ, 129 * Ⲇ, Ⲇ * 9, 5 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ᐃΔᐃⲆ], Ⲇ * 3);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(Ⲇ * Δᐃᐃⵠ, Ⲇ * 5);
		Δ.save();
		Δ.translate(Ⲇ * 145.5, Ⲇ * 83.6015625);
		ᐃΔⵠ(Δ, -4.5 * Ⲇ, Ⲇ * -61, ΔᐃΔⲆⵠ * Ⲇ, 129 * Ⲇ, Ⲇ * Δᐃᐃⵠ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ΔΔΔᐃ;
		Δ.translate(-5 * Ⲇ, Ⲇ * -ⵠᐃⵠΔᐃ);
		Δ.save();
		Δ.translate(Ⲇ * 145.5, Ⲇ * 83.6015625);
		ᐃΔⵠ(Δ, Ⲇ * -4.5, -61 * Ⲇ, Ⲇ * ⵠⵠⵠᐃⵠ, 129 * Ⲇ, 5 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[3], ⲆⵠⵠⲆ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(Ⲇ * ⲆΔⲆᐃᐃ, 5 * Ⲇ);
		Δ.save();
		Δ.translate(17.5 * Ⲇ, Ⲇ * 82.6015625);
		ᐃΔⵠ(Δ, Ⲇ * -4.5, Ⲇ * -65, Ⲇ * ⵠΔᐃΔΔⲆᐃ, 129 * Ⲇ, 5 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(-5 * Ⲇ, -ΔΔⵠⵠ * Ⲇ);
		Δ.save();
		Δ.translate(17.5 * Ⲇ, 82.6015625 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -4.5, Ⲇ * -65, 9 * Ⲇ, 129 * Ⲇ, Ⲇ * ΔⲆⵠⵠ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃᐃⲆ], Δⵠ[ⵠⵠΔⲆ], Ⲇ * ⵠᐃⵠⵠ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⵠⵠⵠⲆ;
		Δ.translate(ΔΔⵠⵠ * Ⲇ, ᐃᐃⲆⵠᐃ * Ⲇ);
		Δ.save();
		Δ.translate(80.5 * Ⲇ, 145.6015625 * Ⲇ);
		ᐃΔⵠ(Δ, -65.5 * Ⲇ, -4 * Ⲇ, Ⲇ * 129, 9 * Ⲇ, Ⲇ * ᐃⵠΔⵠ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
		Δ.globalAlpha = 1;
		Δ.translate(Ⲇ * -ΔΔⵠⲆΔ, Ⲇ * -5);
		Δ.save();
		Δ.translate(80.5 * Ⲇ, 145.6015625 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -65.5, -4 * Ⲇ, 129 * Ⲇ, Ⲇ * 9, 5 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔΔᐃⲆⵠ], Δⵠ[ᐃΔΔΔ], 3 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(Ⲇ * 5, Ⲇ * 5);
		Δ.save();
		Δ.translate(Ⲇ * ΔⲆⵠⵠⲆⵠⲆ, 18.1015625 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -ⵠⵠᐃⲆⲆᐃᐃ, Ⲇ * -11.5, 22 * Ⲇ, 22 * Ⲇ, Ⲇ * ⵠⲆⲆⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃ]);
		Δ.globalAlpha = ⲆⲆᐃⵠ;
		Δ.translate(-5 * Ⲇ, -ᐃⵠΔⵠ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 17, Ⲇ * 18.1015625);
		ᐃΔⵠ(Δ, -ⵠᐃᐃᐃⲆΔⲆ * Ⲇ, -11.5 * Ⲇ, Ⲇ * 22, Ⲇ * 22, 5 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⵠ], Δⵠ[3], Ⲇ * ⵠⲆᐃΔ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ᐃⲆⲆ;
		Δ.translate(Ⲇ * ⲆⵠⲆΔᐃ, Ⲇ * ⲆΔⲆᐃᐃ);
		Δ.save();
		Δ.translate(145.5 * Ⲇ, 16.6015625 * Ⲇ);
		ᐃΔⵠ(Δ, -10.5 * Ⲇ, -11.5 * Ⲇ, 21 * Ⲇ, 22 * Ⲇ, Ⲇ * 5);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		Δ.globalAlpha = ⲆⵠⲆ;
		Δ.translate(-ᐃᐃⲆⵠᐃ * Ⲇ, Ⲇ * -ⲆⲆⲆᐃⵠ);
		Δ.save();
		Δ.translate(145.5 * Ⲇ, 16.6015625 * Ⲇ);
		ᐃΔⵠ(Δ, -10.5 * Ⲇ, -11.5 * Ⲇ, Ⲇ * 21, Ⲇ * 22, ⲆΔⲆᐃᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆΔΔⲆ], Δⵠ[3], Ⲇ * ⵠⵠⲆⲆ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(Ⲇ * 5, ᐃᐃᐃⲆⲆ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 145.5, Ⲇ * 144.1015625);
		ᐃΔⵠ(Δ, Ⲇ * -10.5, -ΔΔΔⲆⵠᐃⲆ * Ⲇ, 22 * Ⲇ, Ⲇ * 22, Ⲇ * 5);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ᐃΔⲆΔ;
		Δ.translate(-ᐃᐃᐃⲆⲆ * Ⲇ, Ⲇ * -5);
		Δ.save();
		Δ.translate(145.5 * Ⲇ, Ⲇ * 144.1015625);
		ᐃΔⵠ(Δ, -10.5 * Ⲇ, Ⲇ * -11, 22 * Ⲇ, Ⲇ * 22, Ⲇ * ⵠⲆⲆⵠ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔΔᐃⲆⵠ], Δⵠ[3], 3 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(Ⲇ * 5, Ⲇ * 5);
		Δ.save();
		Δ.translate(Ⲇ * 17.5, Ⲇ * 145.1015625);
		ᐃΔⵠ(Δ, Ⲇ * -11.5, -ᐃⵠᐃⲆⵠ * Ⲇ, Ⲇ * 22, 22 * Ⲇ, Ⲇ * ⵠᐃⵠΔᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ΔΔΔᐃ;
		Δ.translate(Ⲇ * -5, -ⵠΔⲆᐃ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 17.5, Ⲇ * 145.1015625);
		ᐃΔⵠ(Δ, Ⲇ * -11.5, -12 * Ⲇ, Ⲇ * 22, Ⲇ * 22, Ⲇ * 5);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⵠ], Δⵠ[ⵠᐃⵠΔ], Ⲇ * ⵠᐃⵠΔ);
		return ᐃⵠ
	}
	const ᐃⵠⵠΔⲆⵠΔΔΔ = {};
	const ΔΔⵠΔⵠⲆⲆⵠⲆ = {};
	ᐃⵠⵠΔⲆⵠΔΔΔ["get"] = function(ⵠᐃⲆΔᐃᐃⲆΔΔ, ᐃᐃᐃᐃⲆⲆΔⲆΔ) {
		if (ᐃᐃᐃᐃⲆⲆΔⲆΔ !== "ᐃⵠⵠΔⲆⵠΔΔΔ") {
			const ᐃⵠⵠΔⲆⵠΔΔΔ = ⲆⵠᐃΔᐃⵠⲆ.setInterval;
			const ⵠᐃⲆΔᐃᐃⲆΔΔ = ᐃⵠⵠΔⲆⵠΔΔΔ;
			const ᐃᐃᐃᐃⲆⲆΔⲆΔ = function() {
				ᐃⵠⵠΔⲆⵠΔΔΔ(ᐃᐃᐃᐃⲆⲆΔⲆΔ, 4962);
				ⵠᐃⲆΔᐃᐃⲆΔΔ(ᐃᐃᐃᐃⲆⲆΔⲆΔ, 504)
			};
			ᐃᐃᐃᐃⲆⲆΔⲆΔ()
		}
		return ⲆⵠᐃΔᐃⵠⲆ["Reflect"]["get"](...arguments)
	};
	const ⲆⲆΔⵠᐃᐃᐃ = new ⲆⵠᐃΔᐃⵠⲆ["Proxy"](ΔΔⵠΔⵠⲆⲆⵠⲆ, ᐃⵠⵠΔⲆⵠΔΔΔ);
	const ᐃⲆᐃⵠΔΔΔ = ⲆⲆΔⵠᐃᐃᐃ.ᐃⵠⵠΔⲆⵠΔΔΔ;

	function ᐃⵠΔΔΔⲆⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 120 * Ⲇ;
		var ΔⵠⲆ = Ⲇ * 140;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		ᐃⵠ.width = Ⲇ * 130;
		ᐃⵠ.height = Ⲇ * 120;
		ᐃΔⵠ(Δ, 10 * Ⲇ, Ⲇ * 12, 110 * Ⲇ, 90 * Ⲇ, 10 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]);
		ᐃΔⵠ(Δ, ΔⵠⲆⵠⵠ * Ⲇ, 5 * Ⲇ, 110 * Ⲇ, Ⲇ * 90, ΔΔᐃⵠⲆ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠΔ], Δⵠ[ΔⵠⲆⲆ], Ⲇ * ΔⲆⵠΔⲆ);
		var ⵠⵠ = ⵠᐃⲆⲆ(-Math.PI / ᐃᐃⲆⵠᐃ, ⲆᐃⲆᐃⵠ(Ⲇ * .5, ᐃΔΔΔΔ, [ᐃ[306], ᐃ[306], ᐃ[306], ᐃ[448], ᐃ[448], ᐃ[448], ᐃ[448]]));
		Δ.drawImage(ⵠⵠ, 12 * Ⲇ, 18 * Ⲇ);
		var ⵠⵠ = ⵠᐃⲆⲆ(Math.PI / ΔᐃⲆᐃⵠ, ⲆⲆΔᐃⲆ(Ⲇ * .55, true, [ᐃ[306], ᐃ[448], ᐃ[448], ᐃ[448], ᐃ[448]]));
		Δ.drawImage(ⵠⵠ, Ⲇ * 36, ⲆⵠΔᐃΔ * Ⲇ);
		return ᐃⵠ
	}

	function ⲆΔΔΔⲆⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 465 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 405;
		Δ.globalAlpha = 1;
		Δ.translate(ⵠⲆⲆΔᐃ * Ⲇ, ΔᐃⲆⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 39.000030517578125, 162.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 125.00003051757812, 84.03977966308594 * Ⲇ, Ⲇ * 108.50003051757812, 115.03977966308594 * Ⲇ, 178.00003051757812 * Ⲇ, Ⲇ * 68.03977966308594);
		Δ.bezierCurveTo(Ⲇ * 299.0000305175781, Ⲇ * 146.53977966308594, Ⲇ * 299.0000305175781, 146.53977966308594 * Ⲇ, 420.0000305175781 * Ⲇ, 225.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(400.0000305175781 * Ⲇ, 288.53977966308594 * Ⲇ, Ⲇ * 400.0000305175781, 288.53977966308594 * Ⲇ, Ⲇ * 380.0000305175781, 352.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(216.50003051757812 * Ⲇ, Ⲇ * 345.53977966308594, 216.50003051757812 * Ⲇ, Ⲇ * 345.53977966308594, Ⲇ * 53.000030517578125, Ⲇ * 339.03977966308594);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(23.000030517578125 * Ⲇ, 306.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 5.000030517578125, 275.94886779785156 * Ⲇ, Ⲇ * 6.000030517578125, 201.94886779785156 * Ⲇ, 14.000030517578125 * Ⲇ, Ⲇ * 150.94886779785156);
		Δ.bezierCurveTo(40.000030517578125 * Ⲇ, Ⲇ * 34.94886779785156, 157.00003051757812 * Ⲇ, 14.948867797851562 * Ⲇ, Ⲇ * 199.00003051757812, 11.948867797851562 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 331.0000305175781, .9488677978515625 * Ⲇ, 409.0000305175781 * Ⲇ, Ⲇ * 61.94886779785156, 428.0000305175781 * Ⲇ, Ⲇ * 133.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 445.0000305175781, 207.94886779785156 * Ⲇ, 439.0000305175781 * Ⲇ, Ⲇ * 274.94886779785156, Ⲇ * 426.0000305175781, Ⲇ * 342.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 355.0000305175781, 207.94886779785156 * Ⲇ, 345.0000305175781 * Ⲇ, 208.94886779785156 * Ⲇ, Ⲇ * 333.0000305175781, Ⲇ * 202.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 262.0000305175781, 143.94886779785156 * Ⲇ, 236.00003051757812 * Ⲇ, 148.94886779785156 * Ⲇ, 189.00003051757812 * Ⲇ, Ⲇ * 162.94886779785156);
		Δ.bezierCurveTo(82.00003051757812 * Ⲇ, Ⲇ * 190.94886779785156, 78.00003051757812 * Ⲇ, Ⲇ * 235.94886779785156, Ⲇ * 62.000030517578125, 279.94886779785156 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ], Δⵠ[1], 20 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(17.000030517578125 * Ⲇ, Ⲇ * 149.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 76.00003051757812, Ⲇ * 67.94886779785156, 177.00003051757812 * Ⲇ, Ⲇ * 40.94886779785156, Ⲇ * 232.00003051757812, Ⲇ * 45.94886779785156);
		Δ.bezierCurveTo(316.0000305175781 * Ⲇ, 46.94886779785156 * Ⲇ, Ⲇ * 359.0000305175781, 74.94886779785156 * Ⲇ, Ⲇ * 428.0000305175781, Ⲇ * 145.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 414.0000305175781, 73.94886779785156 * Ⲇ, Ⲇ * 386.0000305175781, Ⲇ * 68.94886779785156, Ⲇ * 359.0000305175781, Ⲇ * 43.94886779785156);
		Δ.bezierCurveTo(295.0000305175781 * Ⲇ, 5.9488677978515625 * Ⲇ, 239.00003051757812 * Ⲇ, 10.948867797851562 * Ⲇ, Ⲇ * 207.00003051757812, Ⲇ * 10.948867797851562);
		Δ.bezierCurveTo(121.00003051757812 * Ⲇ, 20.948867797851562 * Ⲇ, 104.00003051757812 * Ⲇ, 34.94886779785156 * Ⲇ, Ⲇ * 45.000030517578125, 84.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 14.000030517578125, 128.94886779785156 * Ⲇ, 18.000030517578125 * Ⲇ, Ⲇ * 142.94886779785156, Ⲇ * 16.000030517578125, 151.94886779785156 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(23.000030517578125 * Ⲇ, 306.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 5.000030517578125, Ⲇ * 275.94886779785156, 6.000030517578125 * Ⲇ, Ⲇ * 201.94886779785156, 14.000030517578125 * Ⲇ, 150.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 40.000030517578125, 34.94886779785156 * Ⲇ, 157.00003051757812 * Ⲇ, Ⲇ * 14.948867797851562, Ⲇ * 199.00003051757812, 11.948867797851562 * Ⲇ);
		Δ.bezierCurveTo(331.0000305175781 * Ⲇ, .9488677978515625 * Ⲇ, Ⲇ * 409.0000305175781, 61.94886779785156 * Ⲇ, Ⲇ * 428.0000305175781, Ⲇ * 133.94886779785156);
		Δ.bezierCurveTo(445.0000305175781 * Ⲇ, Ⲇ * 207.94886779785156, Ⲇ * 439.0000305175781, 274.94886779785156 * Ⲇ, Ⲇ * 426.0000305175781, 342.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(355.0000305175781 * Ⲇ, 207.94886779785156 * Ⲇ, Ⲇ * 345.0000305175781, 208.94886779785156 * Ⲇ, Ⲇ * 333.0000305175781, 202.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(262.0000305175781 * Ⲇ, 143.94886779785156 * Ⲇ, 236.00003051757812 * Ⲇ, Ⲇ * 148.94886779785156, 189.00003051757812 * Ⲇ, 162.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 82.00003051757812, Ⲇ * 190.94886779785156, 78.00003051757812 * Ⲇ, Ⲇ * 235.94886779785156, Ⲇ * 62.000030517578125, Ⲇ * 279.94886779785156);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ΔΔⵠ], ΔΔⵠⵠΔⲆⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(60.000030517578125 * Ⲇ, 288.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 183.00003051757812, Ⲇ * 320.03977966308594, 342.0000305175781 * Ⲇ, 306.03977966308594 * Ⲇ, Ⲇ * 399.0000305175781, 286.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 420.0000305175781, 345.03977966308594 * Ⲇ, 410.0000305175781 * Ⲇ, 335.03977966308594 * Ⲇ, 415.0000305175781 * Ⲇ, 362.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 351.0000305175781, Ⲇ * 384.03977966308594, 299.0000305175781 * Ⲇ, Ⲇ * 389.03977966308594, 215.00003051757812 * Ⲇ, 391.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(128.00003051757812 * Ⲇ, Ⲇ * 388.03977966308594, 69.00003051757812 * Ⲇ, Ⲇ * 373.03977966308594, 39.000030517578125 * Ⲇ, Ⲇ * 359.03977966308594);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃⵠᐃᐃ], ΔⲆΔⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(47.000030517578125 * Ⲇ, Ⲇ * 327.03977966308594);
		Δ.bezierCurveTo(Ⲇ * 203.00003051757812, 377.03977966308594 * Ⲇ, 331.0000305175781 * Ⲇ, 349.03977966308594 * Ⲇ, Ⲇ * 410.0000305175781, Ⲇ * 330.03977966308594);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ], Δⵠ[1], Ⲇ * ⲆⵠΔⵠⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 9.000030517578125, 339.1306915283203 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 2.000030517578125, 280.1306915283203 * Ⲇ, 30.000030517578125 * Ⲇ, Ⲇ * 219.1306915283203, Ⲇ * 85.00003051757812, 167.1306915283203 * Ⲇ);
		Δ.bezierCurveTo(174.00003051757812 * Ⲇ, Ⲇ * 82.13069152832031, 241.00003051757812 * Ⲇ, Ⲇ * 101.13069152832031, Ⲇ * 284.0000305175781, 115.13069152832031 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 333.0000305175781, 134.1306915283203 * Ⲇ, 376.0000305175781 * Ⲇ, 177.1306915283203 * Ⲇ, Ⲇ * 410.0000305175781, 247.1306915283203 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 439.0000305175781, Ⲇ * 300.1306915283203, Ⲇ * 442.0000305175781, 346.1306915283203 * Ⲇ, 430.0000305175781 * Ⲇ, Ⲇ * 363.1306915283203);
		Δ.bezierCurveTo(418.0000305175781 * Ⲇ, Ⲇ * 366.1306915283203, 395.0000305175781 * Ⲇ, Ⲇ * 295.1306915283203, Ⲇ * 355.0000305175781, Ⲇ * 223.1306915283203);
		Δ.bezierCurveTo(299.0000305175781 * Ⲇ, Ⲇ * 156.1306915283203, Ⲇ * 262.0000305175781, 155.1306915283203 * Ⲇ, 215.00003051757812 * Ⲇ, 159.1306915283203 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 133.00003051757812, 171.1306915283203 * Ⲇ, Ⲇ * 120.00003051757812, 193.1306915283203 * Ⲇ, Ⲇ * 96.00003051757812, Ⲇ * 221.1306915283203);
		Δ.bezierCurveTo(Ⲇ * 49.000030517578125, 262.1306915283203 * Ⲇ, 47.000030517578125 * Ⲇ, 306.1306915283203 * Ⲇ, 38.000030517578125 * Ⲇ, Ⲇ * 336.1306915283203);
		Δ.bezierCurveTo(30.000030517578125 * Ⲇ, 349.1306915283203 * Ⲇ, Ⲇ * 30.000030517578125, 349.1306915283203 * Ⲇ, 22.000030517578125 * Ⲇ, Ⲇ * 362.1306915283203);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[1], 20 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(228.00003051757812 * Ⲇ, Ⲇ * 128.03977966308594);
		Δ.bezierCurveTo(Ⲇ * 315.0000305175781, 131.03977966308594 * Ⲇ, 349.0000305175781 * Ⲇ, Ⲇ * 178.03977966308594, Ⲇ * 386.0000305175781, Ⲇ * 234.03977966308594);
		Δ.bezierCurveTo(444.0000305175781 * Ⲇ, Ⲇ * 329.03977966308594, 446.0000305175781 * Ⲇ, 354.03977966308594 * Ⲇ, Ⲇ * 427.0000305175781, 373.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 389.0000305175781, Ⲇ * 389.03977966308594, 399.0000305175781 * Ⲇ, Ⲇ * 329.03977966308594, Ⲇ * 361.0000305175781, 277.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(306.0000305175781 * Ⲇ, Ⲇ * 191.03977966308594, Ⲇ * 266.0000305175781, Ⲇ * 183.03977966308594, 220.00003051757812 * Ⲇ, 181.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(138.00003051757812 * Ⲇ, 184.03977966308594 * Ⲇ, Ⲇ * 123.00003051757812, 212.03977966308594 * Ⲇ, Ⲇ * 89.00003051757812, Ⲇ * 271.03977966308594);
		Δ.bezierCurveTo(Ⲇ * 52.000030517578125, 349.03977966308594 * Ⲇ, Ⲇ * 68.00003051757812, 364.03977966308594 * Ⲇ, 33.000030517578125 * Ⲇ, 369.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(6.000030517578125 * Ⲇ, Ⲇ * 366.03977966308594, Ⲇ * 5.000030517578125, 341.03977966308594 * Ⲇ, Ⲇ * 26.000030517578125, Ⲇ * 288.03977966308594);
		Δ.bezierCurveTo(60.000030517578125 * Ⲇ, Ⲇ * 207.03977966308594, Ⲇ * 100.00003051757812, 180.03977966308594 * Ⲇ, Ⲇ * 113.00003051757812, Ⲇ * 170.03977966308594);
		Δ.bezierCurveTo(Ⲇ * 159.00003051757812, 132.03977966308594 * Ⲇ, 196.00003051757812 * Ⲇ, Ⲇ * 133.03977966308594, Ⲇ * 226.00003051757812, 129.03977966308594 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ], Δⵠ[ᐃⲆⲆ], Ⲇ * 20);
		return ᐃⵠ
	}

	function ⵠⲆᐃⲆᐃⲆΔⵠΔ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		if (ᐃⲆ == Ⲇⵠᐃ) {
			ᐃⵠ.width = Ⲇ * 543;
			ᐃⵠ.height = 393 * Ⲇ;
			Δ.translate(40 * Ⲇ, 60 * Ⲇ);
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * 3, Ⲇ * 3);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(176 * Ⲇ, Ⲇ * 10.25);
			Δ.bezierCurveTo(Ⲇ * 188, Ⲇ * 16.25, Ⲇ * 187, 25.25 * Ⲇ, 183 * Ⲇ, Ⲇ * 26.25);
			Δ.bezierCurveTo(177 * Ⲇ, Ⲇ * 26.25, 175 * Ⲇ, 21.25 * Ⲇ, Ⲇ * 173, 19.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 170, Ⲇ * 14.25, Ⲇ * 170, 10.25 * Ⲇ, 176 * Ⲇ, 10.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(-ⵠΔΔᐃ * Ⲇ, -ΔᐃΔⲆ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 176, 10.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 188, 16.25 * Ⲇ, Ⲇ * 187, 25.25 * Ⲇ, 183 * Ⲇ, Ⲇ * 26.25);
			Δ.bezierCurveTo(Ⲇ * 177, Ⲇ * 26.25, Ⲇ * 175, Ⲇ * 21.25, 173 * Ⲇ, 19.25 * Ⲇ);
			Δ.bezierCurveTo(170 * Ⲇ, Ⲇ * 14.25, 170 * Ⲇ, 10.25 * Ⲇ, Ⲇ * 176, Ⲇ * 10.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * 3, 3 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 274, 8 * Ⲇ);
			Δ.bezierCurveTo(276 * Ⲇ, ⵠⵠΔᐃᐃⲆⲆ * Ⲇ, 271 * Ⲇ, Ⲇ * 23, Ⲇ * 266, ⲆⲆⲆΔⲆ * Ⲇ);
			Δ.bezierCurveTo(264 * Ⲇ, Ⲇ * ΔΔΔⲆᐃ, Ⲇ * 262, 15 * Ⲇ, 267 * Ⲇ, Ⲇ * ᐃⵠⲆᐃᐃⲆΔ);
			Δ.bezierCurveTo(Ⲇ * 271, Ⲇ * ⲆⵠⲆΔᐃ, 274 * Ⲇ, Ⲇ * 5, 274 * Ⲇ, ΔⲆⵠⵠⵠΔᐃ * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalAlpha = ΔᐃⵠⲆ;
			Δ.translate(-ⵠΔΔᐃ * Ⲇ, Ⲇ * -ⵠⲆᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(274 * Ⲇ, Ⲇ * ᐃⲆᐃⵠᐃ);
			Δ.bezierCurveTo(Ⲇ * 276, Ⲇ * ⵠΔⵠΔⵠ, Ⲇ * 271, Ⲇ * 23, 266 * Ⲇ, Ⲇ * ΔⵠΔΔΔ);
			Δ.bezierCurveTo(264 * Ⲇ, ΔⵠⵠᐃⵠΔΔ * Ⲇ, 262 * Ⲇ, ⲆⲆⲆΔⵠ * Ⲇ, Ⲇ * 267, Ⲇ * ΔᐃΔᐃΔ);
			Δ.bezierCurveTo(Ⲇ * 271, Ⲇ * ᐃᐃᐃⲆⲆ, 274 * Ⲇ, ᐃᐃⲆⵠᐃ * Ⲇ, Ⲇ * 274, 8 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠⲆ]);
			Δ.globalAlpha = .5;
			Δ.translate(ᐃΔᐃⲆ * Ⲇ, Ⲇ * 3);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(282 * Ⲇ, 23.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 275, 25.25 * Ⲇ, Ⲇ * 272, Ⲇ * 29.25, 274 * Ⲇ, 36.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 277, 40.25 * Ⲇ, Ⲇ * 280, Ⲇ * 37.25, 283 * Ⲇ, Ⲇ * 32.25);
			Δ.bezierCurveTo(286 * Ⲇ, 26.25 * Ⲇ, Ⲇ * 286, Ⲇ * 25.25, Ⲇ * 282, 23.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ]);
			Δ.globalAlpha = ⲆⲆⵠ;
			Δ.translate(-3 * Ⲇ, -3 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 282, Ⲇ * 23.25);
			Δ.bezierCurveTo(Ⲇ * 275, 25.25 * Ⲇ, Ⲇ * 272, 29.25 * Ⲇ, Ⲇ * 274, 36.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 277, 40.25 * Ⲇ, Ⲇ * 280, 37.25 * Ⲇ, 283 * Ⲇ, 32.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 286, 26.25 * Ⲇ, Ⲇ * 286, 25.25 * Ⲇ, 282 * Ⲇ, Ⲇ * 23.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * 3, ⲆⲆΔΔ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(343.75 * Ⲇ, Ⲇ * 18.25);
			Δ.bezierCurveTo(346.75 * Ⲇ, 27.25 * Ⲇ, Ⲇ * 346.75, 32.25 * Ⲇ, Ⲇ * 339.75, Ⲇ * 31.25);
			Δ.bezierCurveTo(Ⲇ * 336.75, Ⲇ * 29.25, 335.75 * Ⲇ, 27.25 * Ⲇ, Ⲇ * 336.75, 22.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 336.75, Ⲇ * 16.25, 338.75 * Ⲇ, Ⲇ * 15.25, Ⲇ * 343.75, 18.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalAlpha = ᐃΔⲆΔ;
			Δ.translate(Ⲇ * -ⵠᐃⵠⵠ, -3 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 343.75, Ⲇ * 18.25);
			Δ.bezierCurveTo(346.75 * Ⲇ, 27.25 * Ⲇ, Ⲇ * 346.75, Ⲇ * 32.25, Ⲇ * 339.75, Ⲇ * 31.25);
			Δ.bezierCurveTo(336.75 * Ⲇ, 29.25 * Ⲇ, Ⲇ * 335.75, Ⲇ * 27.25, Ⲇ * 336.75, Ⲇ * 22.25);
			Δ.bezierCurveTo(336.75 * Ⲇ, Ⲇ * 16.25, Ⲇ * 338.75, 15.25 * Ⲇ, 343.75 * Ⲇ, 18.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * ⲆΔⲆⲆ, 3 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 364.75, Ⲇ * 22.25);
			Δ.bezierCurveTo(368.75 * Ⲇ, 27.25 * Ⲇ, 362.75 * Ⲇ, Ⲇ * 36.25, 356.75 * Ⲇ, 39.25 * Ⲇ);
			Δ.bezierCurveTo(346.75 * Ⲇ, Ⲇ * 43.25, 346.75 * Ⲇ, 34.25 * Ⲇ, Ⲇ * 348.75, 31.25 * Ⲇ);
			Δ.bezierCurveTo(352.75 * Ⲇ, Ⲇ * 23.25, Ⲇ * 360.75, 20.25 * Ⲇ, 363.75 * Ⲇ, Ⲇ * 22.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ]);
			Δ.globalAlpha = ΔΔΔᐃ;
			Δ.translate(Ⲇ * -3, Ⲇ * -3);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(364.75 * Ⲇ, 22.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 368.75, 27.25 * Ⲇ, 362.75 * Ⲇ, Ⲇ * 36.25, Ⲇ * 356.75, Ⲇ * 39.25);
			Δ.bezierCurveTo(346.75 * Ⲇ, Ⲇ * 43.25, Ⲇ * 346.75, Ⲇ * 34.25, 348.75 * Ⲇ, 31.25 * Ⲇ);
			Δ.bezierCurveTo(352.75 * Ⲇ, Ⲇ * 23.25, Ⲇ * 360.75, Ⲇ * 20.25, Ⲇ * 363.75, 22.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * ⵠᐃᐃΔ, Ⲇ * ⵠᐃᐃΔ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 350.75, Ⲇ * 52.25);
			Δ.bezierCurveTo(352.75 * Ⲇ, Ⲇ * 45.25, Ⲇ * 360.75, Ⲇ * 43.25, Ⲇ * 368.75, 52.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 369.75, 58.25 * Ⲇ, 366.75 * Ⲇ, 59.25 * Ⲇ, 357.75 * Ⲇ, 57.25 * Ⲇ);
			Δ.bezierCurveTo(350.75 * Ⲇ, Ⲇ * 56.25, Ⲇ * 352.75, Ⲇ * 55.25, Ⲇ * 350.75, 52.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ]);
			Δ.globalAlpha = ⲆⲆΔⵠ;
			Δ.translate(-3 * Ⲇ, Ⲇ * -ⵠⵠⲆᐃ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(350.75 * Ⲇ, 52.25 * Ⲇ);
			Δ.bezierCurveTo(352.75 * Ⲇ, Ⲇ * 45.25, 360.75 * Ⲇ, 43.25 * Ⲇ, 368.75 * Ⲇ, 52.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 369.75, Ⲇ * 58.25, 366.75 * Ⲇ, Ⲇ * 59.25, 357.75 * Ⲇ, 57.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 350.75, 56.25 * Ⲇ, Ⲇ * 352.75, Ⲇ * 55.25, 350.75 * Ⲇ, Ⲇ * 52.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.globalAlpha = .5;
			Δ.translate(ⵠⲆᐃΔ * Ⲇ, Ⲇ * ⵠΔΔᐃ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 421.75, 81.25 * Ⲇ);
			Δ.bezierCurveTo(432.75 * Ⲇ, 85.25 * Ⲇ, 431.75 * Ⲇ, 89.25 * Ⲇ, Ⲇ * 426.75, 93.25 * Ⲇ);
			Δ.bezierCurveTo(418.75 * Ⲇ, Ⲇ * 95.25, 414.75 * Ⲇ, Ⲇ * 93.25, Ⲇ * 412.75, Ⲇ * 89.25);
			Δ.bezierCurveTo(Ⲇ * 411.75, 84.25 * Ⲇ, 413.75 * Ⲇ, Ⲇ * 81.25, 421.75 * Ⲇ, 81.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]);
			Δ.globalAlpha = ΔΔⵠ;
			Δ.translate(Ⲇ * -3, Ⲇ * -ⵠᐃⵠⵠ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 421.75, 81.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 432.75, Ⲇ * 85.25, 431.75 * Ⲇ, Ⲇ * 89.25, 426.75 * Ⲇ, 93.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 418.75, Ⲇ * 95.25, 414.75 * Ⲇ, 93.25 * Ⲇ, 412.75 * Ⲇ, Ⲇ * 89.25);
			Δ.bezierCurveTo(Ⲇ * 411.75, 84.25 * Ⲇ, 413.75 * Ⲇ, Ⲇ * 81.25, 421.75 * Ⲇ, Ⲇ * 81.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃΔⵠΔ]);
			Δ.globalAlpha = .5;
			Δ.translate(ⵠᐃⵠΔ * Ⲇ, ᐃΔᐃΔ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(432.75 * Ⲇ, Ⲇ * 105.25);
			Δ.bezierCurveTo(430.75 * Ⲇ, Ⲇ * 115.25, Ⲇ * 411.75, Ⲇ * 130.25, 408.75 * Ⲇ, Ⲇ * 117.25);
			Δ.bezierCurveTo(407.75 * Ⲇ, Ⲇ * 106.25, 414.75 * Ⲇ, 103.25 * Ⲇ, Ⲇ * 421.75, Ⲇ * 101.25);
			Δ.bezierCurveTo(Ⲇ * 430.75, 100.25 * Ⲇ, Ⲇ * 432.75, 101.25 * Ⲇ, Ⲇ * 432.75, Ⲇ * 105.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
			Δ.globalAlpha = ᐃΔⵠΔ;
			Δ.translate(Ⲇ * -3, -3 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 432.75, 105.25 * Ⲇ);
			Δ.bezierCurveTo(430.75 * Ⲇ, Ⲇ * 115.25, 411.75 * Ⲇ, 130.25 * Ⲇ, 408.75 * Ⲇ, 117.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 407.75, 106.25 * Ⲇ, 414.75 * Ⲇ, 103.25 * Ⲇ, 421.75 * Ⲇ, 101.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 430.75, 100.25 * Ⲇ, 432.75 * Ⲇ, 101.25 * Ⲇ, Ⲇ * 432.75, 105.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃΔⵠΔ]);
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * 3, Ⲇ * ⵠᐃᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 422.75, Ⲇ * 153.25);
			Δ.bezierCurveTo(Ⲇ * 437.75, 155.25 * Ⲇ, Ⲇ * 442.75, Ⲇ * 158.25, 436.75 * Ⲇ, 165.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 431.75, 170.25 * Ⲇ, Ⲇ * 424.75, 167.25 * Ⲇ, Ⲇ * 419.75, Ⲇ * 163.25);
			Δ.bezierCurveTo(413.75 * Ⲇ, 157.25 * Ⲇ, 415.75 * Ⲇ, 153.25 * Ⲇ, Ⲇ * 422.75, Ⲇ * 153.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalAlpha = ᐃΔⵠΔ;
			Δ.translate(-ᐃΔΔΔ * Ⲇ, -3 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(422.75 * Ⲇ, 153.25 * Ⲇ);
			Δ.bezierCurveTo(437.75 * Ⲇ, 155.25 * Ⲇ, Ⲇ * 442.75, 158.25 * Ⲇ, 436.75 * Ⲇ, 165.25 * Ⲇ);
			Δ.bezierCurveTo(431.75 * Ⲇ, Ⲇ * 170.25, Ⲇ * 424.75, 167.25 * Ⲇ, Ⲇ * 419.75, 163.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 413.75, 157.25 * Ⲇ, 415.75 * Ⲇ, 153.25 * Ⲇ, 422.75 * Ⲇ, Ⲇ * 153.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * ⲆΔⲆⲆ, ⲆⲆΔΔ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 409.75, 158.25 * Ⲇ);
			Δ.bezierCurveTo(409.75 * Ⲇ, 168.25 * Ⲇ, 401.75 * Ⲇ, 172.25 * Ⲇ, Ⲇ * 397.75, 167.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 394.75, Ⲇ * 159.25, 407.75 * Ⲇ, Ⲇ * 150.25, Ⲇ * 408.75, Ⲇ * 158.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(Ⲇ * -ⵠᐃⵠΔ, Ⲇ * -ⲆⵠⵠⲆ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(409.75 * Ⲇ, Ⲇ * 158.25);
			Δ.bezierCurveTo(Ⲇ * 409.75, 168.25 * Ⲇ, 401.75 * Ⲇ, 172.25 * Ⲇ, 397.75 * Ⲇ, Ⲇ * 167.25);
			Δ.bezierCurveTo(394.75 * Ⲇ, Ⲇ * 159.25, Ⲇ * 407.75, Ⲇ * 150.25, Ⲇ * 408.75, Ⲇ * 158.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * 3, 3 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(204 * Ⲇ, Ⲇ * 238.25);
			Δ.bezierCurveTo(Ⲇ * 204, 248.25 * Ⲇ, 184 * Ⲇ, 255.25 * Ⲇ, 180 * Ⲇ, Ⲇ * 247.25);
			Δ.bezierCurveTo(Ⲇ * 177, 241.25 * Ⲇ, Ⲇ * 187, Ⲇ * 236.25, 192 * Ⲇ, 235.25 * Ⲇ);
			Δ.bezierCurveTo(201 * Ⲇ, 233.25 * Ⲇ, Ⲇ * 204, Ⲇ * 233.25, Ⲇ * 204, Ⲇ * 238.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]);
			Δ.globalAlpha = ⵠⵠⵠⲆ;
			Δ.translate(-3 * Ⲇ, Ⲇ * -3);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 204, Ⲇ * 238.25);
			Δ.bezierCurveTo(Ⲇ * 204, Ⲇ * 248.25, Ⲇ * 184, 255.25 * Ⲇ, Ⲇ * 180, Ⲇ * 247.25);
			Δ.bezierCurveTo(Ⲇ * 177, 241.25 * Ⲇ, Ⲇ * 187, Ⲇ * 236.25, Ⲇ * 192, 235.25 * Ⲇ);
			Δ.bezierCurveTo(201 * Ⲇ, 233.25 * Ⲇ, 204 * Ⲇ, Ⲇ * 233.25, Ⲇ * 204, 238.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ΔᐃⵠⲆ]);
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * ᐃΔΔΔ, ΔᐃΔⲆ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(208 * Ⲇ, Ⲇ * 246.25);
			Δ.bezierCurveTo(202 * Ⲇ, Ⲇ * 255.25, Ⲇ * 204, Ⲇ * 258.25, 212 * Ⲇ, 255.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 217, Ⲇ * 250.25, Ⲇ * 217, 248.25 * Ⲇ, 216 * Ⲇ, Ⲇ * 244.25);
			Δ.bezierCurveTo(Ⲇ * 210, 241.25 * Ⲇ, 209 * Ⲇ, 245.25 * Ⲇ, Ⲇ * 208, 246.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
			Δ.globalAlpha = 1;
			Δ.translate(Ⲇ * -ⲆⲆΔΔ, Ⲇ * -3);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(208 * Ⲇ, Ⲇ * 246.25);
			Δ.bezierCurveTo(Ⲇ * 202, Ⲇ * 255.25, Ⲇ * 204, 258.25 * Ⲇ, Ⲇ * 212, Ⲇ * 255.25);
			Δ.bezierCurveTo(Ⲇ * 217, Ⲇ * 250.25, Ⲇ * 217, 248.25 * Ⲇ, 216 * Ⲇ, Ⲇ * 244.25);
			Δ.bezierCurveTo(210 * Ⲇ, Ⲇ * 241.25, 209 * Ⲇ, Ⲇ * 245.25, Ⲇ * 208, 246.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * 3, Ⲇ * ⵠᐃᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(197 * Ⲇ, Ⲇ * 258.25);
			Δ.bezierCurveTo(194 * Ⲇ, Ⲇ * 265.25, 186 * Ⲇ, Ⲇ * 270.25, 185 * Ⲇ, 262.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 187, Ⲇ * 255.25, Ⲇ * 191, Ⲇ * 252.25, 195 * Ⲇ, Ⲇ * 253.25);
			Δ.bezierCurveTo(Ⲇ * 198, Ⲇ * 256.25, 197 * Ⲇ, Ⲇ * 257.25, 197 * Ⲇ, Ⲇ * 258.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalAlpha = 1;
			Δ.translate(-ⲆⵠⵠⲆ * Ⲇ, -ⵠΔΔᐃ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(197 * Ⲇ, 258.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 194, Ⲇ * 265.25, 186 * Ⲇ, 270.25 * Ⲇ, Ⲇ * 185, Ⲇ * 262.25);
			Δ.bezierCurveTo(Ⲇ * 187, 255.25 * Ⲇ, Ⲇ * 191, 252.25 * Ⲇ, Ⲇ * 195, 253.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 198, Ⲇ * 256.25, 197 * Ⲇ, 257.25 * Ⲇ, 197 * Ⲇ, 258.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ΔᐃⵠⲆ]);
			Δ.globalAlpha = .5;
			Δ.translate(3 * Ⲇ, 3 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 24, 111.25 * Ⲇ);
			Δ.bezierCurveTo(32 * Ⲇ, Ⲇ * 115.25, 29 * Ⲇ, 123.25 * Ⲇ, 22 * Ⲇ, 133.25 * Ⲇ);
			Δ.bezierCurveTo(ⲆⲆⲆᐃΔΔΔ * Ⲇ, 140.25 * Ⲇ, ⲆⲆᐃΔᐃᐃⲆ * Ⲇ, 137.25 * Ⲇ, ⲆⲆⲆⵠΔⵠⲆ * Ⲇ, Ⲇ * 125.25);
			Δ.bezierCurveTo(ⲆΔᐃⵠⲆⵠⵠ * Ⲇ, Ⲇ * 114.25, ⲆⵠᐃΔⲆ * Ⲇ, 110.25 * Ⲇ, Ⲇ * 24, 111.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ]);
			Δ.globalAlpha = 1;
			Δ.translate(-3 * Ⲇ, -ⵠᐃⵠⲆ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(24 * Ⲇ, Ⲇ * 111.25);
			Δ.bezierCurveTo(32 * Ⲇ, Ⲇ * 115.25, 29 * Ⲇ, Ⲇ * 123.25, Ⲇ * 22, 133.25 * Ⲇ);
			Δ.bezierCurveTo(15 * Ⲇ, Ⲇ * 140.25, Ⲇ * ⲆⵠⵠΔᐃ, Ⲇ * 137.25, Ⲇ * 9, Ⲇ * 125.25);
			Δ.bezierCurveTo(ΔⲆⵠᐃⵠ * Ⲇ, Ⲇ * 114.25, 20 * Ⲇ, 110.25 * Ⲇ, Ⲇ * 24, Ⲇ * 111.25);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ΔᐃⵠⲆ]);
			Δ.globalAlpha = .5;
			Δ.translate(Ⲇ * 3, Ⲇ * ⲆΔⲆⲆ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 33, 137.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 41, Ⲇ * 142.25, 40 * Ⲇ, 145.25 * Ⲇ, Ⲇ * 35, 147.25 * Ⲇ);
			Δ.bezierCurveTo(22 * Ⲇ, Ⲇ * 147.25, Ⲇ * 18, Ⲇ * 144.25, Ⲇ * 22, Ⲇ * 138.25);
			Δ.bezierCurveTo(Ⲇ * 26, 133.25 * Ⲇ, 31 * Ⲇ, Ⲇ * 136.25, Ⲇ * 33, 137.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalAlpha = Δⵠᐃ;
			Δ.translate(-ⵠⵠⲆᐃ * Ⲇ, -ⵠᐃⵠⲆ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 33, 137.25 * Ⲇ);
			Δ.bezierCurveTo(41 * Ⲇ, Ⲇ * 142.25, Ⲇ * 40, Ⲇ * 145.25, 35 * Ⲇ, 147.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 22, Ⲇ * 147.25, 18 * Ⲇ, 144.25 * Ⲇ, Ⲇ * 22, Ⲇ * 138.25);
			Δ.bezierCurveTo(Ⲇ * 26, Ⲇ * 133.25, 31 * Ⲇ, 136.25 * Ⲇ, 33 * Ⲇ, 137.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ]);
			Δ.globalAlpha = .5;
			Δ.translate(3 * Ⲇ, ⵠΔΔᐃ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(36 * Ⲇ, 187.25 * Ⲇ);
			Δ.bezierCurveTo(25 * Ⲇ, 198.25 * Ⲇ, ⲆⵠᐃᐃⲆ * Ⲇ, 193.25 * Ⲇ, Ⲇ * 23, 187.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 26, 178.25 * Ⲇ, 32 * Ⲇ, 173.25 * Ⲇ, 38 * Ⲇ, Ⲇ * 175.25);
			Δ.bezierCurveTo(Ⲇ * 44, Ⲇ * 180.25, 39 * Ⲇ, 186.25 * Ⲇ, 36 * Ⲇ, 187.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ]);
			Δ.globalAlpha = 1;
			Δ.translate(-3 * Ⲇ, -3 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 36, 187.25 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 25, 198.25 * Ⲇ, ⵠᐃΔⵠⵠⲆᐃ * Ⲇ, Ⲇ * 193.25, 23 * Ⲇ, 187.25 * Ⲇ);
			Δ.bezierCurveTo(26 * Ⲇ, 178.25 * Ⲇ, 32 * Ⲇ, 173.25 * Ⲇ, 38 * Ⲇ, Ⲇ * 175.25);
			Δ.bezierCurveTo(44 * Ⲇ, 180.25 * Ⲇ, Ⲇ * 39, 186.25 * Ⲇ, 36 * Ⲇ, 187.25 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ΔᐃⵠⲆ])
		} else ᐃⲆ == 1 ? (ᐃⵠ.width = 543 * Ⲇ, ᐃⵠ.height = Ⲇ * 470, Δ.globalAlpha = .5, Δ.translate(Ⲇ * 3, 3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 377.1428527832031, 56.87498474121094 * Ⲇ), Δ.bezierCurveTo(384.1428527832031 * Ⲇ, Ⲇ * 44.87498474121094, 403.1428527832031 * Ⲇ, Ⲇ * 39.87498474121094, 403.1428527832031 * Ⲇ, 51.87498474121094 * Ⲇ), Δ.bezierCurveTo(402.1428527832031 * Ⲇ, Ⲇ * 59.87498474121094, 396.1428527832031 * Ⲇ, 61.87498474121094 * Ⲇ, Ⲇ * 389.1428527832031, 64.87498474121094 * Ⲇ), Δ.bezierCurveTo(376.1428527832031 * Ⲇ, Ⲇ * 67.87498474121094, 375.1428527832031 * Ⲇ, Ⲇ * 62.87498474121094, Ⲇ * 377.1428527832031, Ⲇ * 56.87498474121094), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = ᐃⵠⵠⵠ, Δ.translate(Ⲇ * -ⲆΔⲆⲆ, Ⲇ * -ⵠᐃᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(377.1428527832031 * Ⲇ, Ⲇ * 56.87498474121094), Δ.bezierCurveTo(384.1428527832031 * Ⲇ, 44.87498474121094 * Ⲇ, Ⲇ * 403.1428527832031, Ⲇ * 39.87498474121094, Ⲇ * 403.1428527832031, Ⲇ * 51.87498474121094), Δ.bezierCurveTo(Ⲇ * 402.1428527832031, Ⲇ * 59.87498474121094, 396.1428527832031 * Ⲇ, 61.87498474121094 * Ⲇ, 389.1428527832031 * Ⲇ, Ⲇ * 64.87498474121094), Δ.bezierCurveTo(Ⲇ * 376.1428527832031, Ⲇ * 67.87498474121094, 375.1428527832031 * Ⲇ, 62.87498474121094 * Ⲇ, Ⲇ * 377.1428527832031, 56.87498474121094 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(ⵠᐃᐃΔ * Ⲇ, ⲆⵠⵠⲆ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(349.1428527832031 * Ⲇ, 44.303558349609375 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 358.1428527832031, 37.303558349609375 * Ⲇ, Ⲇ * 370.1428527832031, Ⲇ * 47.303558349609375, 364.1428527832031 * Ⲇ, Ⲇ * 51.303558349609375), Δ.bezierCurveTo(Ⲇ * 356.1428527832031, 55.303558349609375 * Ⲇ, 345.1428527832031 * Ⲇ, Ⲇ * 48.303558349609375, 349.1428527832031 * Ⲇ, Ⲇ * 45.303558349609375), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]), Δ.globalAlpha = ⲆⲆᐃⵠ, Δ.translate(-3 * Ⲇ, -3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 349.1428527832031, Ⲇ * 44.303558349609375), Δ.bezierCurveTo(358.1428527832031 * Ⲇ, Ⲇ * 37.303558349609375, 370.1428527832031 * Ⲇ, 47.303558349609375 * Ⲇ, Ⲇ * 364.1428527832031, 51.303558349609375 * Ⲇ), Δ.bezierCurveTo(356.1428527832031 * Ⲇ, 55.303558349609375 * Ⲇ, Ⲇ * 345.1428527832031, Ⲇ * 48.303558349609375, 349.1428527832031 * Ⲇ, Ⲇ * 45.303558349609375), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⲆⲆΔⵠ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ⲆⵠⵠⲆ, Ⲇ * 3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(480.1428527832031 * Ⲇ, Ⲇ * 152.30355834960938), Δ.bezierCurveTo(Ⲇ * 477.1428527832031, Ⲇ * 145.30355834960938, 480.1428527832031 * Ⲇ, 140.30355834960938 * Ⲇ, 489.1428527832031 * Ⲇ, Ⲇ * 135.30355834960938), Δ.bezierCurveTo(Ⲇ * 497.1428527832031, 133.30355834960938 * Ⲇ, 498.1428527832031 * Ⲇ, Ⲇ * 140.30355834960938, Ⲇ * 491.1428527832031, Ⲇ * 147.30355834960938), Δ.bezierCurveTo(Ⲇ * 485.1428527832031, 155.30355834960938 * Ⲇ, Ⲇ * 482.1428527832031, 156.30355834960938 * Ⲇ, Ⲇ * 480.1428527832031, 152.30355834960938 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ]), Δ.globalAlpha = 1, Δ.translate(-ᐃΔᐃⲆ * Ⲇ, -ⵠⵠⲆⲆ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(480.1428527832031 * Ⲇ, 152.30355834960938 * Ⲇ), Δ.bezierCurveTo(477.1428527832031 * Ⲇ, Ⲇ * 145.30355834960938, Ⲇ * 480.1428527832031, 140.30355834960938 * Ⲇ, 489.1428527832031 * Ⲇ, Ⲇ * 135.30355834960938), Δ.bezierCurveTo(Ⲇ * 497.1428527832031, Ⲇ * 133.30355834960938, Ⲇ * 498.1428527832031, 140.30355834960938 * Ⲇ, 491.1428527832031 * Ⲇ, 147.30355834960938 * Ⲇ), Δ.bezierCurveTo(485.1428527832031 * Ⲇ, Ⲇ * 155.30355834960938, Ⲇ * 482.1428527832031, Ⲇ * 156.30355834960938, Ⲇ * 480.1428527832031, Ⲇ * 152.30355834960938), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇⵠᐃᐃ * Ⲇ, Ⲇ * 3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 211.14285278320312, Ⲇ * 27.303558349609375), Δ.bezierCurveTo(223.14285278320312 * Ⲇ, 21.303558349609375 * Ⲇ, Ⲇ * 234.14285278320312, 34.303558349609375 * Ⲇ, Ⲇ * 232.14285278320312, Ⲇ * 42.303558349609375), Δ.bezierCurveTo(Ⲇ * 228.14285278320312, Ⲇ * 49.303558349609375, Ⲇ * 223.14285278320312, 45.303558349609375 * Ⲇ, 213.14285278320312 * Ⲇ, Ⲇ * 38.303558349609375), Δ.bezierCurveTo(205.14285278320312 * Ⲇ, 31.303558349609375 * Ⲇ, Ⲇ * 208.14285278320312, 29.303558349609375 * Ⲇ, 211.14285278320312 * Ⲇ, 27.303558349609375 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = ᐃΔⲆΔ, Δ.translate(Ⲇ * -ⲆΔⲆᐃ, -ᐃΔᐃⲆ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 211.14285278320312, 27.303558349609375 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 223.14285278320312, 21.303558349609375 * Ⲇ, Ⲇ * 234.14285278320312, 34.303558349609375 * Ⲇ, Ⲇ * 232.14285278320312, 42.303558349609375 * Ⲇ), Δ.bezierCurveTo(228.14285278320312 * Ⲇ, Ⲇ * 49.303558349609375, 223.14285278320312 * Ⲇ, 45.303558349609375 * Ⲇ, 213.14285278320312 * Ⲇ, Ⲇ * 38.303558349609375), Δ.bezierCurveTo(Ⲇ * 205.14285278320312, Ⲇ * 31.303558349609375, 208.14285278320312 * Ⲇ, 29.303558349609375 * Ⲇ, 211.14285278320312 * Ⲇ, Ⲇ * 27.303558349609375), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⲆ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * 3, ᐃᐃΔΔ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(364.1428527832031 * Ⲇ, 73.30355834960938 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 354.1428527832031, Ⲇ * 72.30355834960938, 356.1428527832031 * Ⲇ, 64.30355834960938 * Ⲇ, Ⲇ * 359.1428527832031, Ⲇ * 59.303558349609375), Δ.bezierCurveTo(365.1428527832031 * Ⲇ, 55.303558349609375 * Ⲇ, 366.1428527832031 * Ⲇ, Ⲇ * 61.303558349609375, Ⲇ * 366.1428527832031, 69.30355834960938 * Ⲇ), Δ.bezierCurveTo(365.1428527832031 * Ⲇ, 73.30355834960938 * Ⲇ, 365.1428527832031 * Ⲇ, Ⲇ * 73.30355834960938, Ⲇ * 364.1428527832031, Ⲇ * 73.30355834960938), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ]), Δ.globalAlpha = 1, Δ.translate(-ⵠᐃᐃⵠ * Ⲇ, -ⵠᐃᐃΔ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(364.1428527832031 * Ⲇ, Ⲇ * 73.30355834960938), Δ.bezierCurveTo(354.1428527832031 * Ⲇ, Ⲇ * 72.30355834960938, Ⲇ * 356.1428527832031, 64.30355834960938 * Ⲇ, Ⲇ * 359.1428527832031, Ⲇ * 59.303558349609375), Δ.bezierCurveTo(365.1428527832031 * Ⲇ, Ⲇ * 55.303558349609375, Ⲇ * 366.1428527832031, 61.303558349609375 * Ⲇ, 366.1428527832031 * Ⲇ, 69.30355834960938 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 365.1428527832031, Ⲇ * 73.30355834960938, 365.1428527832031 * Ⲇ, Ⲇ * 73.30355834960938, 364.1428527832031 * Ⲇ, Ⲇ * 73.30355834960938), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * 3, ⵠᐃⵠⵠ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 182.14285278320312, 57.303558349609375 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 173.14285278320312, 52.303558349609375 * Ⲇ, Ⲇ * 177.14285278320312, Ⲇ * 39.303558349609375, 198.14285278320312 * Ⲇ, Ⲇ * 36.303558349609375), Δ.bezierCurveTo(209.14285278320312 * Ⲇ, Ⲇ * 37.303558349609375, 206.14285278320312 * Ⲇ, Ⲇ * 49.303558349609375, Ⲇ * 193.14285278320312, 53.303558349609375 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 187.14285278320312, 56.303558349609375 * Ⲇ, Ⲇ * 185.14285278320312, 57.303558349609375 * Ⲇ, 182.14285278320312 * Ⲇ, 57.303558349609375 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = ⲆⵠⲆ, Δ.translate(Ⲇ * -3, Ⲇ * -3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 182.14285278320312, Ⲇ * 57.303558349609375), Δ.bezierCurveTo(Ⲇ * 173.14285278320312, Ⲇ * 52.303558349609375, 177.14285278320312 * Ⲇ, 39.303558349609375 * Ⲇ, 198.14285278320312 * Ⲇ, Ⲇ * 36.303558349609375), Δ.bezierCurveTo(Ⲇ * 209.14285278320312, 37.303558349609375 * Ⲇ, 206.14285278320312 * Ⲇ, 49.303558349609375 * Ⲇ, 193.14285278320312 * Ⲇ, 53.303558349609375 * Ⲇ), Δ.bezierCurveTo(187.14285278320312 * Ⲇ, Ⲇ * 56.303558349609375, Ⲇ * 185.14285278320312, 57.303558349609375 * Ⲇ, Ⲇ * 182.14285278320312, 57.303558349609375 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ⵠᐃⵠΔ, Ⲇ * ⵠᐃᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 489.1428527832031, Ⲇ * 267.0178527832031), Δ.bezierCurveTo(Ⲇ * 500.1428527832031, 257.0178527832031 * Ⲇ, Ⲇ * 511.1428527832031, 269.0178527832031 * Ⲇ, Ⲇ * 514.1428527832031, 275.0178527832031 * Ⲇ), Δ.bezierCurveTo(519.1428527832031 * Ⲇ, Ⲇ * 285.0178527832031, 509.1428527832031 * Ⲇ, 288.0178527832031 * Ⲇ, 501.1428527832031 * Ⲇ, Ⲇ * 282.0178527832031), Δ.bezierCurveTo(Ⲇ * 488.1428527832031, Ⲇ * 277.0178527832031, Ⲇ * 485.1428527832031, Ⲇ * 271.0178527832031, 489.1428527832031 * Ⲇ, 267.0178527832031 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ]), Δ.globalAlpha = ⲆⵠΔΔ, Δ.translate(-3 * Ⲇ, -3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(489.1428527832031 * Ⲇ, Ⲇ * 267.0178527832031), Δ.bezierCurveTo(500.1428527832031 * Ⲇ, Ⲇ * 257.0178527832031, 511.1428527832031 * Ⲇ, 269.0178527832031 * Ⲇ, 514.1428527832031 * Ⲇ, 275.0178527832031 * Ⲇ), Δ.bezierCurveTo(519.1428527832031 * Ⲇ, 285.0178527832031 * Ⲇ, Ⲇ * 509.1428527832031, Ⲇ * 288.0178527832031, Ⲇ * 501.1428527832031, Ⲇ * 282.0178527832031), Δ.bezierCurveTo(488.1428527832031 * Ⲇ, Ⲇ * 277.0178527832031, 485.1428527832031 * Ⲇ, Ⲇ * 271.0178527832031, Ⲇ * 489.1428527832031, Ⲇ * 267.0178527832031), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * 3, Ⲇ * 3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 480.1428527832031, Ⲇ * 122.73213958740234), Δ.bezierCurveTo(Ⲇ * 469.1428527832031, 119.73213958740234 * Ⲇ, Ⲇ * 473.1428527832031, 108.73213958740234 * Ⲇ, Ⲇ * 476.1428527832031, 107.73213958740234 * Ⲇ), Δ.bezierCurveTo(483.1428527832031 * Ⲇ, 102.73213958740234 * Ⲇ, Ⲇ * 485.1428527832031, Ⲇ * 118.73213958740234, Ⲇ * 480.1428527832031, 122.73213958740234 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃ]), Δ.globalAlpha = ⲆⵠⲆ, Δ.translate(-ⵠⵠΔⲆ * Ⲇ, -3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(480.1428527832031 * Ⲇ, Ⲇ * 122.73213958740234), Δ.bezierCurveTo(469.1428527832031 * Ⲇ, Ⲇ * 119.73213958740234, Ⲇ * 473.1428527832031, 108.73213958740234 * Ⲇ, 476.1428527832031 * Ⲇ, 107.73213958740234 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 483.1428527832031, 102.73213958740234 * Ⲇ, 485.1428527832031 * Ⲇ, 118.73213958740234 * Ⲇ, 480.1428527832031 * Ⲇ, Ⲇ * 122.73213958740234), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ⵠᐃⵠΔ, ⵠᐃᐃⵠ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 470.1428527832031, 286.3035697937012 * Ⲇ), Δ.bezierCurveTo(472.1428527832031 * Ⲇ, 277.3035697937012 * Ⲇ, Ⲇ * 480.1428527832031, 277.3035697937012 * Ⲇ, 489.1428527832031 * Ⲇ, Ⲇ * 286.3035697937012), Δ.bezierCurveTo(Ⲇ * 490.1428527832031, 292.3035697937012 * Ⲇ, Ⲇ * 482.1428527832031, Ⲇ * 294.3035697937012, Ⲇ * 470.1428527832031, 286.3035697937012 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = 1, Δ.translate(-ⲆⲆΔΔ * Ⲇ, Ⲇ * -ⵠᐃᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 470.1428527832031, 286.3035697937012 * Ⲇ), Δ.bezierCurveTo(472.1428527832031 * Ⲇ, Ⲇ * 277.3035697937012, Ⲇ * 480.1428527832031, 277.3035697937012 * Ⲇ, Ⲇ * 489.1428527832031, Ⲇ * 286.3035697937012), Δ.bezierCurveTo(Ⲇ * 490.1428527832031, Ⲇ * 292.3035697937012, Ⲇ * 482.1428527832031, Ⲇ * 294.3035697937012, Ⲇ * 470.1428527832031, Ⲇ * 286.3035697937012), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(3 * Ⲇ, Ⲇ * 3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(518.1428527832031 * Ⲇ, 265.0178565979004 * Ⲇ), Δ.bezierCurveTo(524.1428527832031 * Ⲇ, 262.0178565979004 * Ⲇ, Ⲇ * 521.1428527832031, 247.0178565979004 * Ⲇ, 514.1428527832031 * Ⲇ, 250.0178565979004 * Ⲇ), Δ.bezierCurveTo(510.1428527832031 * Ⲇ, Ⲇ * 252.0178565979004, 509.1428527832031 * Ⲇ, 266.0178565979004 * Ⲇ, Ⲇ * 518.1428527832031, 266.0178565979004 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = 1, Δ.translate(Ⲇ * -3, -3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(518.1428527832031 * Ⲇ, Ⲇ * 265.0178565979004), Δ.bezierCurveTo(524.1428527832031 * Ⲇ, 262.0178565979004 * Ⲇ, Ⲇ * 521.1428527832031, 247.0178565979004 * Ⲇ, Ⲇ * 514.1428527832031, 250.0178565979004 * Ⲇ), Δ.bezierCurveTo(510.1428527832031 * Ⲇ, Ⲇ * 252.0178565979004, 509.1428527832031 * Ⲇ, Ⲇ * 266.0178565979004, Ⲇ * 518.1428527832031, Ⲇ * 266.0178565979004), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(ⵠⵠⲆᐃ * Ⲇ, 3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 179.14285278320312, 399.5892858505249 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 174.14285278320312, 385.5892858505249 * Ⲇ, 186.14285278320312 * Ⲇ, 379.5892858505249 * Ⲇ, Ⲇ * 198.14285278320312, Ⲇ * 379.5892858505249), Δ.bezierCurveTo(Ⲇ * 208.14285278320312, Ⲇ * 379.5892858505249, 206.14285278320312 * Ⲇ, 391.5892858505249 * Ⲇ, 194.14285278320312 * Ⲇ, Ⲇ * 396.5892858505249), Δ.bezierCurveTo(Ⲇ * 184.14285278320312, 401.5892858505249 * Ⲇ, 182.14285278320312 * Ⲇ, 402.5892858505249 * Ⲇ, Ⲇ * 179.14285278320312, 399.5892858505249 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = ⲆⲆⲆᐃ, Δ.translate(Ⲇ * -ⵠΔΔᐃ, Ⲇ * -3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 179.14285278320312, Ⲇ * 399.5892858505249), Δ.bezierCurveTo(Ⲇ * 174.14285278320312, 385.5892858505249 * Ⲇ, 186.14285278320312 * Ⲇ, 379.5892858505249 * Ⲇ, Ⲇ * 198.14285278320312, Ⲇ * 379.5892858505249), Δ.bezierCurveTo(208.14285278320312 * Ⲇ, Ⲇ * 379.5892858505249, Ⲇ * 206.14285278320312, Ⲇ * 391.5892858505249, Ⲇ * 194.14285278320312, 396.5892858505249 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 184.14285278320312, 401.5892858505249 * Ⲇ, 182.14285278320312 * Ⲇ, Ⲇ * 402.5892858505249, 179.14285278320312 * Ⲇ, 399.5892858505249 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(3 * Ⲇ, Ⲇ * ⵠᐃⵠⲆ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 163.14285278320312, Ⲇ * 407.875), Δ.bezierCurveTo(Ⲇ * 152.14285278320312, 405.875 * Ⲇ, Ⲇ * 156.14285278320312, 391.875 * Ⲇ, Ⲇ * 163.14285278320312, 385.875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 170.14285278320312, Ⲇ * 381.875, 173.14285278320312 * Ⲇ, 385.875 * Ⲇ, 170.14285278320312 * Ⲇ, 398.875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 169.14285278320312, 403.875 * Ⲇ, Ⲇ * 165.14285278320312, 408.875 * Ⲇ, Ⲇ * 164.14285278320312, 407.875 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = 1, Δ.translate(-ᐃᐃΔΔ * Ⲇ, Ⲇ * -3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(163.14285278320312 * Ⲇ, Ⲇ * 407.875), Δ.bezierCurveTo(152.14285278320312 * Ⲇ, 405.875 * Ⲇ, Ⲇ * 156.14285278320312, Ⲇ * 391.875, 163.14285278320312 * Ⲇ, Ⲇ * 385.875), Δ.bezierCurveTo(170.14285278320312 * Ⲇ, Ⲇ * 381.875, 173.14285278320312 * Ⲇ, Ⲇ * 385.875, 170.14285278320312 * Ⲇ, Ⲇ * 398.875), Δ.bezierCurveTo(Ⲇ * 169.14285278320312, 403.875 * Ⲇ, 165.14285278320312 * Ⲇ, 408.875 * Ⲇ, 164.14285278320312 * Ⲇ, Ⲇ * 407.875), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ΔΔⵠ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ᐃΔᐃⲆ, Ⲇ * ⵠᐃᐃⵠ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(78.14285278320312 * Ⲇ, 71.73211669921875 * Ⲇ), Δ.bezierCurveTo(82.14285278320312 * Ⲇ, Ⲇ * 62.73211669921875, Ⲇ * 88.14285278320312, Ⲇ * 69.73211669921875, Ⲇ * 91.14285278320312, Ⲇ * 79.73211669921875), Δ.bezierCurveTo(90.14285278320312 * Ⲇ, 86.73211669921875 * Ⲇ, 79.14285278320312 * Ⲇ, Ⲇ * 83.73211669921875, 78.14285278320312 * Ⲇ, Ⲇ * 71.73211669921875), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]), Δ.globalAlpha = 1, Δ.translate(Ⲇ * -ᐃΔᐃΔ, Ⲇ * -3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(78.14285278320312 * Ⲇ, Ⲇ * 71.73211669921875), Δ.bezierCurveTo(82.14285278320312 * Ⲇ, Ⲇ * 62.73211669921875, 88.14285278320312 * Ⲇ, Ⲇ * 69.73211669921875, 91.14285278320312 * Ⲇ, Ⲇ * 79.73211669921875), Δ.bezierCurveTo(Ⲇ * 90.14285278320312, 86.73211669921875 * Ⲇ, 79.14285278320312 * Ⲇ, Ⲇ * 83.73211669921875, 78.14285278320312 * Ⲇ, Ⲇ * 71.73211669921875), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⲆ]), Δ.globalAlpha = .5, Δ.translate(ⵠᐃⵠⵠ * Ⲇ, 3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(385.1428527832031 * Ⲇ, 405.017858505249 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 392.1428527832031, 397.017858505249 * Ⲇ, 406.1428527832031 * Ⲇ, 401.017858505249 * Ⲇ, 409.1428527832031 * Ⲇ, Ⲇ * 418.017858505249), Δ.bezierCurveTo(Ⲇ * 410.1428527832031, 426.017858505249 * Ⲇ, Ⲇ * 401.1428527832031, 425.017858505249 * Ⲇ, Ⲇ * 388.1428527832031, 418.017858505249 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 381.1428527832031, 411.017858505249 * Ⲇ, 383.1428527832031 * Ⲇ, 407.017858505249 * Ⲇ, Ⲇ * 385.1428527832031, 405.017858505249 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ]), Δ.globalAlpha = ⲆⲆⵠ, Δ.translate(-ⲆΔⲆᐃ * Ⲇ, Ⲇ * -ᐃᐃΔΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 385.1428527832031, 405.017858505249 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 392.1428527832031, 397.017858505249 * Ⲇ, 406.1428527832031 * Ⲇ, 401.017858505249 * Ⲇ, 409.1428527832031 * Ⲇ, Ⲇ * 418.017858505249), Δ.bezierCurveTo(410.1428527832031 * Ⲇ, Ⲇ * 426.017858505249, Ⲇ * 401.1428527832031, Ⲇ * 425.017858505249, Ⲇ * 388.1428527832031, Ⲇ * 418.017858505249), Δ.bezierCurveTo(381.1428527832031 * Ⲇ, 411.017858505249 * Ⲇ, Ⲇ * 383.1428527832031, 407.017858505249 * Ⲇ, 385.1428527832031 * Ⲇ, 405.017858505249 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⲆⵠΔΔ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ⵠᐃⵠΔ, Ⲇ * ⲆΔⲆᐃ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(414.1428527832031 * Ⲇ, 361.4464282989502 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 418.1428527832031, Ⲇ * 352.4464282989502, Ⲇ * 426.1428527832031, 353.4464282989502 * Ⲇ, Ⲇ * 437.1428527832031, 362.4464282989502 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 441.1428527832031, 366.4464282989502 * Ⲇ, 439.1428527832031 * Ⲇ, Ⲇ * 373.4464282989502, Ⲇ * 428.1428527832031, 372.4464282989502 * Ⲇ), Δ.bezierCurveTo(416.1428527832031 * Ⲇ, Ⲇ * 370.4464282989502, 412.1428527832031 * Ⲇ, Ⲇ * 367.4464282989502, Ⲇ * 415.1428527832031, Ⲇ * 361.4464282989502), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ]), Δ.globalAlpha = ⵠⲆⵠⲆ, Δ.translate(-ⵠᐃⵠⵠ * Ⲇ, -3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 414.1428527832031, Ⲇ * 361.4464282989502), Δ.bezierCurveTo(418.1428527832031 * Ⲇ, 352.4464282989502 * Ⲇ, 426.1428527832031 * Ⲇ, Ⲇ * 353.4464282989502, 437.1428527832031 * Ⲇ, Ⲇ * 362.4464282989502), Δ.bezierCurveTo(441.1428527832031 * Ⲇ, Ⲇ * 366.4464282989502, Ⲇ * 439.1428527832031, Ⲇ * 373.4464282989502, 428.1428527832031 * Ⲇ, Ⲇ * 372.4464282989502), Δ.bezierCurveTo(416.1428527832031 * Ⲇ, Ⲇ * 370.4464282989502, 412.1428527832031 * Ⲇ, 367.4464282989502 * Ⲇ, 415.1428527832031 * Ⲇ, 361.4464282989502 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(3 * Ⲇ, Ⲇ * 3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(453.1428527832031 * Ⲇ, 356.875 * Ⲇ), Δ.bezierCurveTo(458.1428527832031 * Ⲇ, 363.875 * Ⲇ, 447.1428527832031 * Ⲇ, Ⲇ * 373.875, Ⲇ * 444.1428527832031, Ⲇ * 369.875), Δ.bezierCurveTo(Ⲇ * 441.1428527832031, Ⲇ * 361.875, 448.1428527832031 * Ⲇ, 352.875 * Ⲇ, 453.1428527832031 * Ⲇ, Ⲇ * 356.875), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]), Δ.globalAlpha = 1, Δ.translate(Ⲇ * -3, -ᐃΔᐃⲆ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(453.1428527832031 * Ⲇ, 356.875 * Ⲇ), Δ.bezierCurveTo(458.1428527832031 * Ⲇ, 363.875 * Ⲇ, 447.1428527832031 * Ⲇ, Ⲇ * 373.875, Ⲇ * 444.1428527832031, 369.875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 441.1428527832031, Ⲇ * 361.875, Ⲇ * 448.1428527832031, Ⲇ * 352.875, Ⲇ * 453.1428527832031, 356.875 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ᐃΔⲆΔ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ᐃΔᐃⲆ, 3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(40.142852783203125 * Ⲇ, Ⲇ * 225.1607151031494), Δ.bezierCurveTo(52.142852783203125 * Ⲇ, 224.1607151031494 * Ⲇ, Ⲇ * 44.142852783203125, Ⲇ * 251.1607151031494, Ⲇ * 36.142852783203125, 248.1607151031494 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 25.142852783203125, 245.1607151031494 * Ⲇ, 34.142852783203125 * Ⲇ, 225.1607151031494 * Ⲇ, 41.142852783203125 * Ⲇ, Ⲇ * 225.1607151031494), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = 1, Δ.translate(-ⲆΔⲆᐃ * Ⲇ, -ᐃΔᐃΔ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(40.142852783203125 * Ⲇ, 225.1607151031494 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 52.142852783203125, 224.1607151031494 * Ⲇ, Ⲇ * 44.142852783203125, 251.1607151031494 * Ⲇ, 36.142852783203125 * Ⲇ, Ⲇ * 248.1607151031494), Δ.bezierCurveTo(Ⲇ * 25.142852783203125, Ⲇ * 245.1607151031494, 34.142852783203125 * Ⲇ, Ⲇ * 225.1607151031494, Ⲇ * 41.142852783203125, 225.1607151031494 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ᐃᐃΔΔ, ⵠᐃᐃⵠ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 114.14285278320312, 52.4464111328125 * Ⲇ), Δ.bezierCurveTo(123.14285278320312 * Ⲇ, 57.4464111328125 * Ⲇ, Ⲇ * 111.14285278320312, Ⲇ * 71.4464111328125, Ⲇ * 106.14285278320312, 65.4464111328125 * Ⲇ), Δ.bezierCurveTo(101.14285278320312 * Ⲇ, Ⲇ * 58.4464111328125, Ⲇ * 111.14285278320312, 51.4464111328125 * Ⲇ, Ⲇ * 114.14285278320312, Ⲇ * 52.4464111328125), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = 1, Δ.translate(-ΔᐃΔⲆ * Ⲇ, -ΔᐃΔⲆ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(114.14285278320312 * Ⲇ, 52.4464111328125 * Ⲇ), Δ.bezierCurveTo(123.14285278320312 * Ⲇ, Ⲇ * 57.4464111328125, Ⲇ * 111.14285278320312, 71.4464111328125 * Ⲇ, Ⲇ * 106.14285278320312, Ⲇ * 65.4464111328125), Δ.bezierCurveTo(Ⲇ * 101.14285278320312, Ⲇ * 58.4464111328125, Ⲇ * 111.14285278320312, 51.4464111328125 * Ⲇ, Ⲇ * 114.14285278320312, Ⲇ * 52.4464111328125), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(3 * Ⲇ, Ⲇ * ᐃΔᐃⲆ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(35.142852783203125 * Ⲇ, 256.3035707473755 * Ⲇ), Δ.bezierCurveTo(41.142852783203125 * Ⲇ, 263.3035707473755 * Ⲇ, 32.142852783203125 * Ⲇ, 270.3035707473755 * Ⲇ, 27.142852783203125 * Ⲇ, Ⲇ * 270.3035707473755), Δ.bezierCurveTo(20.142852783203125 * Ⲇ, 267.3035707473755 * Ⲇ, Ⲇ * 29.142852783203125, 252.3035707473755 * Ⲇ, Ⲇ * 35.142852783203125, 255.3035707473755 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]), Δ.globalAlpha = ⵠⵠⵠⲆ, Δ.translate(-ᐃΔᐃⲆ * Ⲇ, Ⲇ * -ᐃᐃΔΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 35.142852783203125, Ⲇ * 256.3035707473755), Δ.bezierCurveTo(41.142852783203125 * Ⲇ, Ⲇ * 263.3035707473755, 32.142852783203125 * Ⲇ, 270.3035707473755 * Ⲇ, Ⲇ * 27.142852783203125, Ⲇ * 270.3035707473755), Δ.bezierCurveTo(Ⲇ * 20.142852783203125, Ⲇ * 267.3035707473755, Ⲇ * 29.142852783203125, 252.3035707473755 * Ⲇ, Ⲇ * 35.142852783203125, 255.3035707473755 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ]), Δ.globalAlpha = .5, Δ.translate(3 * Ⲇ, Ⲇ * 3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 48.142852783203125, Ⲇ * 266.4464282989502), Δ.bezierCurveTo(59.142852783203125 * Ⲇ, 273.4464282989502 * Ⲇ, 41.142852783203125 * Ⲇ, Ⲇ * 290.4464282989502, 33.142852783203125 * Ⲇ, Ⲇ * 285.4464282989502), Δ.bezierCurveTo(Ⲇ * 25.142852783203125, 277.4464282989502 * Ⲇ, Ⲇ * 44.142852783203125, 261.4464282989502 * Ⲇ, Ⲇ * 48.142852783203125, Ⲇ * 266.4464282989502), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = ᐃΔⲆΔ, Δ.translate(Ⲇ * -ⲆΔⲆᐃ, -ᐃΔΔΔ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 48.142852783203125, Ⲇ * 266.4464282989502), Δ.bezierCurveTo(Ⲇ * 59.142852783203125, 273.4464282989502 * Ⲇ, Ⲇ * 41.142852783203125, 290.4464282989502 * Ⲇ, 33.142852783203125 * Ⲇ, Ⲇ * 285.4464282989502), Δ.bezierCurveTo(Ⲇ * 25.142852783203125, 277.4464282989502 * Ⲇ, 44.142852783203125 * Ⲇ, 261.4464282989502 * Ⲇ, 48.142852783203125 * Ⲇ, Ⲇ * 266.4464282989502), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⵠ]), Δ.globalAlpha = .5, Δ.translate(ⵠⲆᐃΔ * Ⲇ, ⵠⵠΔⲆ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(138.14285278320312 * Ⲇ, 385.5892868041992 * Ⲇ), Δ.bezierCurveTo(150.14285278320312 * Ⲇ, Ⲇ * 387.5892868041992, 140.14285278320312 * Ⲇ, 405.5892868041992 * Ⲇ, 131.14285278320312 * Ⲇ, Ⲇ * 402.5892868041992), Δ.bezierCurveTo(Ⲇ * 125.14285278320312, Ⲇ * 397.5892868041992, 134.14285278320312 * Ⲇ, 385.5892868041992 * Ⲇ, 138.14285278320312 * Ⲇ, 385.5892868041992 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]), Δ.globalAlpha = 1, Δ.translate(-3 * Ⲇ, Ⲇ * -3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(138.14285278320312 * Ⲇ, 385.5892868041992 * Ⲇ), Δ.bezierCurveTo(150.14285278320312 * Ⲇ, Ⲇ * 387.5892868041992, 140.14285278320312 * Ⲇ, Ⲇ * 405.5892868041992, Ⲇ * 131.14285278320312, Ⲇ * 402.5892868041992), Δ.bezierCurveTo(125.14285278320312 * Ⲇ, 397.5892868041992 * Ⲇ, Ⲇ * 134.14285278320312, Ⲇ * 385.5892868041992, 138.14285278320312 * Ⲇ, 385.5892868041992 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ΔΔΔᐃ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * 3, Ⲇ * 3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 218.14285278320312, 394.16071701049805 * Ⲇ), Δ.bezierCurveTo(224.14285278320312 * Ⲇ, Ⲇ * 398.16071701049805, 222.14285278320312 * Ⲇ, 403.16071701049805 * Ⲇ, 214.14285278320312 * Ⲇ, Ⲇ * 407.16071701049805), Δ.bezierCurveTo(204.14285278320312 * Ⲇ, 407.16071701049805 * Ⲇ, Ⲇ * 213.14285278320312, Ⲇ * 392.16071701049805, Ⲇ * 218.14285278320312, 394.16071701049805 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]), Δ.globalAlpha = ᐃΔⲆΔ, Δ.translate(-ⵠᐃⵠⲆ * Ⲇ, -ⵠⲆᐃΔ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 218.14285278320312, Ⲇ * 394.16071701049805), Δ.bezierCurveTo(224.14285278320312 * Ⲇ, 398.16071701049805 * Ⲇ, Ⲇ * 222.14285278320312, Ⲇ * 403.16071701049805, 214.14285278320312 * Ⲇ, 407.16071701049805 * Ⲇ), Δ.bezierCurveTo(204.14285278320312 * Ⲇ, Ⲇ * 407.16071701049805, 213.14285278320312 * Ⲇ, Ⲇ * 392.16071701049805, 218.14285278320312 * Ⲇ, 394.16071701049805 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ]), Δ.translate(Ⲇ * 50, Ⲇ * 100)) : (ᐃⵠ.width = Ⲇ * 543, ᐃⵠ.height = Ⲇ * 470, Δ.globalAlpha = .5, Δ.translate(Ⲇ * ⵠⵠⲆⲆ, Ⲇ * ⵠⲆᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 97.14285278320312, 113.875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 104.14285278320312, Ⲇ * 106.875, Ⲇ * 113.14285278320312, Ⲇ * 109.875, 118.14285278320312 * Ⲇ, Ⲇ * 118.875), Δ.bezierCurveTo(119.14285278320312 * Ⲇ, Ⲇ * 121.875, Ⲇ * 118.14285278320312, Ⲇ * 129.875, 103.14285278320312 * Ⲇ, 124.875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 94.14285278320312, Ⲇ * 120.875, Ⲇ * 95.14285278320312, Ⲇ * 117.875, Ⲇ * 97.14285278320312, 113.875 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]), Δ.globalAlpha = ᐃΔⲆΔ, Δ.translate(Ⲇ * -ᐃΔᐃⲆ, Ⲇ * -Ⲇⵠᐃᐃ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 97.14285278320312, Ⲇ * 113.875), Δ.bezierCurveTo(104.14285278320312 * Ⲇ, 106.875 * Ⲇ, 113.14285278320312 * Ⲇ, 109.875 * Ⲇ, Ⲇ * 118.14285278320312, Ⲇ * 118.875), Δ.bezierCurveTo(119.14285278320312 * Ⲇ, Ⲇ * 121.875, Ⲇ * 118.14285278320312, Ⲇ * 129.875, 103.14285278320312 * Ⲇ, Ⲇ * 124.875), Δ.bezierCurveTo(94.14285278320312 * Ⲇ, Ⲇ * 120.875, Ⲇ * 95.14285278320312, Ⲇ * 117.875, Ⲇ * 97.14285278320312, 113.875 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * 3, Ⲇ * ᐃΔᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(88.14285278320312 * Ⲇ, Ⲇ * 138.87498474121094), Δ.bezierCurveTo(90.14285278320312 * Ⲇ, Ⲇ * 128.87498474121094, 104.14285278320312 * Ⲇ, Ⲇ * 130.87498474121094, 107.14285278320312 * Ⲇ, 138.87498474121094 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 109.14285278320312, Ⲇ * 147.87498474121094, Ⲇ * 89.14285278320312, 145.87498474121094 * Ⲇ, Ⲇ * 88.14285278320312, 138.87498474121094 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = 1, Δ.translate(-3 * Ⲇ, -3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(88.14285278320312 * Ⲇ, 138.87498474121094 * Ⲇ), Δ.bezierCurveTo(90.14285278320312 * Ⲇ, 128.87498474121094 * Ⲇ, Ⲇ * 104.14285278320312, 130.87498474121094 * Ⲇ, 107.14285278320312 * Ⲇ, 138.87498474121094 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 109.14285278320312, 147.87498474121094 * Ⲇ, 89.14285278320312 * Ⲇ, 145.87498474121094 * Ⲇ, 88.14285278320312 * Ⲇ, 138.87498474121094 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * 3, 3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(194.14285278320312 * Ⲇ, Ⲇ * 44.87498474121094), Δ.bezierCurveTo(Ⲇ * 202.14285278320312, 49.87498474121094 * Ⲇ, Ⲇ * 195.14285278320312, 62.87498474121094 * Ⲇ, Ⲇ * 187.14285278320312, 60.87498474121094 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 180.14285278320312, 57.87498474121094 * Ⲇ, 190.14285278320312 * Ⲇ, Ⲇ * 40.87498474121094, 194.14285278320312 * Ⲇ, Ⲇ * 44.87498474121094), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = 1, Δ.translate(-ⵠⵠⲆⲆ * Ⲇ, Ⲇ * -ⵠⲆᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 194.14285278320312, 44.87498474121094 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 202.14285278320312, Ⲇ * 49.87498474121094, 195.14285278320312 * Ⲇ, 62.87498474121094 * Ⲇ, Ⲇ * 187.14285278320312, 60.87498474121094 * Ⲇ), Δ.bezierCurveTo(180.14285278320312 * Ⲇ, Ⲇ * 57.87498474121094, Ⲇ * 190.14285278320312, Ⲇ * 40.87498474121094, 194.14285278320312 * Ⲇ, Ⲇ * 44.87498474121094), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⵠ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ᐃΔᐃΔ, Ⲇ * ⵠΔΔᐃ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 22.142852783203125, Ⲇ * 218.44642639160156), Δ.bezierCurveTo(31.142852783203125 * Ⲇ, Ⲇ * 205.44642639160156, 49.142852783203125 * Ⲇ, Ⲇ * 221.44642639160156, Ⲇ * 49.142852783203125, Ⲇ * 230.44642639160156), Δ.bezierCurveTo(44.142852783203125 * Ⲇ, Ⲇ * 243.44642639160156, Ⲇ * 14.142852783203125, Ⲇ * 228.44642639160156, Ⲇ * 22.142852783203125, 218.44642639160156 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆⵠ]), Δ.globalAlpha = 1, Δ.translate(Ⲇ * -3, Ⲇ * -3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 22.142852783203125, 218.44642639160156 * Ⲇ), Δ.bezierCurveTo(31.142852783203125 * Ⲇ, Ⲇ * 205.44642639160156, Ⲇ * 49.142852783203125, 221.44642639160156 * Ⲇ, 49.142852783203125 * Ⲇ, 230.44642639160156 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 44.142852783203125, Ⲇ * 243.44642639160156, 14.142852783203125 * Ⲇ, 228.44642639160156 * Ⲇ, Ⲇ * 22.142852783203125, Ⲇ * 218.44642639160156), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[Δⵠᐃ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * 3, ᐃΔᐃΔ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(41.142852783203125 * Ⲇ, Ⲇ * 249.875), Δ.bezierCurveTo(Ⲇ * 33.142852783203125, 255.875 * Ⲇ, Ⲇ * 30.142852783203125, 265.875 * Ⲇ, Ⲇ * 40.142852783203125, Ⲇ * 266.875), Δ.bezierCurveTo(Ⲇ * 49.142852783203125, 261.875 * Ⲇ, 53.142852783203125 * Ⲇ, 244.875 * Ⲇ, Ⲇ * 41.142852783203125, Ⲇ * 249.875), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = ΔΔΔᐃ, Δ.translate(Ⲇ * -3, Ⲇ * -3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(41.142852783203125 * Ⲇ, 249.875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 33.142852783203125, Ⲇ * 255.875, Ⲇ * 30.142852783203125, Ⲇ * 265.875, Ⲇ * 40.142852783203125, Ⲇ * 266.875), Δ.bezierCurveTo(49.142852783203125 * Ⲇ, 261.875 * Ⲇ, 53.142852783203125 * Ⲇ, 244.875 * Ⲇ, 41.142852783203125 * Ⲇ, 249.875 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(ⲆⵠⵠⲆ * Ⲇ, ⵠⵠⲆᐃ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(105.14285278320312 * Ⲇ, 369.875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 92.14285278320312, 361.875 * Ⲇ, 77.14285278320312 * Ⲇ, 375.875 * Ⲇ, Ⲇ * 79.14285278320312, Ⲇ * 384.875), Δ.bezierCurveTo(Ⲇ * 84.14285278320312, 399.875 * Ⲇ, Ⲇ * 114.14285278320312, Ⲇ * 375.875, Ⲇ * 104.14285278320312, 369.875 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = 1, Δ.translate(-3 * Ⲇ, Ⲇ * -3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 105.14285278320312, 369.875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 92.14285278320312, 361.875 * Ⲇ, 77.14285278320312 * Ⲇ, Ⲇ * 375.875, 79.14285278320312 * Ⲇ, Ⲇ * 384.875), Δ.bezierCurveTo(84.14285278320312 * Ⲇ, 399.875 * Ⲇ, Ⲇ * 114.14285278320312, 375.875 * Ⲇ, 104.14285278320312 * Ⲇ, 369.875 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ⵠᐃᐃⵠ, Ⲇ * ᐃΔᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 233.14285278320312, Ⲇ * 43.4464111328125), Δ.bezierCurveTo(238.14285278320312 * Ⲇ, 47.4464111328125 * Ⲇ, Ⲇ * 222.14285278320312, Ⲇ * 73.4464111328125, 214.14285278320312 * Ⲇ, 58.4464111328125 * Ⲇ), Δ.bezierCurveTo(211.14285278320312 * Ⲇ, Ⲇ * 48.4464111328125, Ⲇ * 230.14285278320312, 35.4464111328125 * Ⲇ, 233.14285278320312 * Ⲇ, Ⲇ * 42.4464111328125), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = ΔΔⵠ, Δ.translate(Ⲇ * -3, Ⲇ * -ⵠⵠⲆᐃ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(233.14285278320312 * Ⲇ, Ⲇ * 43.4464111328125), Δ.bezierCurveTo(Ⲇ * 238.14285278320312, 47.4464111328125 * Ⲇ, 222.14285278320312 * Ⲇ, Ⲇ * 73.4464111328125, Ⲇ * 214.14285278320312, Ⲇ * 58.4464111328125), Δ.bezierCurveTo(211.14285278320312 * Ⲇ, Ⲇ * 48.4464111328125, Ⲇ * 230.14285278320312, Ⲇ * 35.4464111328125, Ⲇ * 233.14285278320312, Ⲇ * 42.4464111328125), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ⵠᐃᐃⵠ, Ⲇ * ⵠⲆᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 371.1428527832031, 34.73213195800781 * Ⲇ), Δ.bezierCurveTo(378.1428527832031 * Ⲇ, Ⲇ * 20.732131958007812, Ⲇ * 395.1428527832031, Ⲇ * 32.73213195800781, Ⲇ * 396.1428527832031, Ⲇ * 42.73213195800781), Δ.bezierCurveTo(Ⲇ * 399.1428527832031, Ⲇ * 59.73213195800781, 369.1428527832031 * Ⲇ, Ⲇ * 43.73213195800781, 372.1428527832031 * Ⲇ, Ⲇ * 34.73213195800781), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]), Δ.globalAlpha = ΔΔΔᐃ, Δ.translate(-ⵠᐃⵠΔ * Ⲇ, Ⲇ * -ⲆⲆΔΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 371.1428527832031, Ⲇ * 34.73213195800781), Δ.bezierCurveTo(Ⲇ * 378.1428527832031, Ⲇ * 20.732131958007812, Ⲇ * 395.1428527832031, 32.73213195800781 * Ⲇ, 396.1428527832031 * Ⲇ, Ⲇ * 42.73213195800781), Δ.bezierCurveTo(399.1428527832031 * Ⲇ, 59.73213195800781 * Ⲇ, 369.1428527832031 * Ⲇ, 43.73213195800781 * Ⲇ, 372.1428527832031 * Ⲇ, 34.73213195800781 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ᐃΔΔⲆ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ᐃΔᐃΔ, Ⲇ * ⵠᐃⵠⵠ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(117.14285278320312 * Ⲇ, Ⲇ * 392.5892868041992), Δ.bezierCurveTo(Ⲇ * 115.14285278320312, Ⲇ * 384.5892868041992, 109.14285278320312 * Ⲇ, 383.5892868041992 * Ⲇ, 103.14285278320312 * Ⲇ, 384.5892868041992 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 95.14285278320312, Ⲇ * 389.5892868041992, 97.14285278320312 * Ⲇ, 393.5892868041992 * Ⲇ, Ⲇ * 107.14285278320312, Ⲇ * 396.5892868041992), Δ.bezierCurveTo(Ⲇ * 114.14285278320312, Ⲇ * 396.5892868041992, Ⲇ * 118.14285278320312, Ⲇ * 393.5892868041992, 116.14285278320312 * Ⲇ, 391.5892868041992 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ]), Δ.globalAlpha = ⵠᐃᐃ, Δ.translate(-3 * Ⲇ, Ⲇ * -ⵠᐃᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(117.14285278320312 * Ⲇ, 392.5892868041992 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 115.14285278320312, Ⲇ * 384.5892868041992, 109.14285278320312 * Ⲇ, Ⲇ * 383.5892868041992, 103.14285278320312 * Ⲇ, 384.5892868041992 * Ⲇ), Δ.bezierCurveTo(95.14285278320312 * Ⲇ, 389.5892868041992 * Ⲇ, Ⲇ * 97.14285278320312, Ⲇ * 393.5892868041992, Ⲇ * 107.14285278320312, 396.5892868041992 * Ⲇ), Δ.bezierCurveTo(114.14285278320312 * Ⲇ, Ⲇ * 396.5892868041992, 118.14285278320312 * Ⲇ, 393.5892868041992 * Ⲇ, 116.14285278320312 * Ⲇ, Ⲇ * 391.5892868041992), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ΔᐃΔⲆ, Ⲇ * ⵠⲆᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(122.14285278320312 * Ⲇ, 403.7321472167969 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 132.14285278320312, Ⲇ * 399.7321472167969, Ⲇ * 133.14285278320312, Ⲇ * 418.7321472167969, Ⲇ * 129.14285278320312, Ⲇ * 419.7321472167969), Δ.bezierCurveTo(Ⲇ * 119.14285278320312, Ⲇ * 420.7321472167969, Ⲇ * 118.14285278320312, 402.7321472167969 * Ⲇ, 123.14285278320312 * Ⲇ, Ⲇ * 403.7321472167969), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = 1, Δ.translate(Ⲇ * -ᐃᐃΔΔ, Ⲇ * -ⵠᐃᐃⵠ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(122.14285278320312 * Ⲇ, 403.7321472167969 * Ⲇ), Δ.bezierCurveTo(132.14285278320312 * Ⲇ, 399.7321472167969 * Ⲇ, Ⲇ * 133.14285278320312, 418.7321472167969 * Ⲇ, Ⲇ * 129.14285278320312, 419.7321472167969 * Ⲇ), Δ.bezierCurveTo(119.14285278320312 * Ⲇ, 420.7321472167969 * Ⲇ, Ⲇ * 118.14285278320312, 402.7321472167969 * Ⲇ, Ⲇ * 123.14285278320312, Ⲇ * 403.7321472167969), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ΔᐃΔⲆ, Ⲇ * Ⲇⵠᐃᐃ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 317.1428527832031, Ⲇ * 417.5892868041992), Δ.bezierCurveTo(Ⲇ * 333.1428527832031, 421.5892868041992 * Ⲇ, 299.1428527832031 * Ⲇ, Ⲇ * 455.5892868041992, 294.1428527832031 * Ⲇ, 438.5892868041992 * Ⲇ), Δ.bezierCurveTo(289.1428527832031 * Ⲇ, 423.5892868041992 * Ⲇ, 307.1428527832031 * Ⲇ, Ⲇ * 414.5892868041992, Ⲇ * 317.1428527832031, 417.5892868041992 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆⵠ]), Δ.globalAlpha = 1, Δ.translate(Ⲇ * -3, Ⲇ * -ᐃΔᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 317.1428527832031, Ⲇ * 417.5892868041992), Δ.bezierCurveTo(Ⲇ * 333.1428527832031, 421.5892868041992 * Ⲇ, Ⲇ * 299.1428527832031, 455.5892868041992 * Ⲇ, Ⲇ * 294.1428527832031, 438.5892868041992 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 289.1428527832031, Ⲇ * 423.5892868041992, 307.1428527832031 * Ⲇ, Ⲇ * 414.5892868041992, Ⲇ * 317.1428527832031, Ⲇ * 417.5892868041992), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ᐃΔᐃΔ, Ⲇ * 3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(322.1428527832031 * Ⲇ, 437.30357360839844 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 330.1428527832031, 431.30357360839844 * Ⲇ, Ⲇ * 336.1428527832031, Ⲇ * 440.30357360839844, 336.1428527832031 * Ⲇ, Ⲇ * 448.30357360839844), Δ.bezierCurveTo(Ⲇ * 334.1428527832031, 454.30357360839844 * Ⲇ, Ⲇ * 316.1428527832031, 447.30357360839844 * Ⲇ, 323.1428527832031 * Ⲇ, 437.30357360839844 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = 1, Δ.translate(Ⲇ * -3, Ⲇ * -ⲆΔⲆᐃ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(322.1428527832031 * Ⲇ, Ⲇ * 437.30357360839844), Δ.bezierCurveTo(Ⲇ * 330.1428527832031, 431.30357360839844 * Ⲇ, 336.1428527832031 * Ⲇ, 440.30357360839844 * Ⲇ, Ⲇ * 336.1428527832031, 448.30357360839844 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 334.1428527832031, Ⲇ * 454.30357360839844, Ⲇ * 316.1428527832031, 447.30357360839844 * Ⲇ, Ⲇ * 323.1428527832031, 437.30357360839844 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(3 * Ⲇ, Ⲇ * ⵠᐃⵠⵠ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(438.1428527832031 * Ⲇ, 358.5892868041992 * Ⲇ), Δ.bezierCurveTo(455.1428527832031 * Ⲇ, Ⲇ * 351.5892868041992, 467.1428527832031 * Ⲇ, Ⲇ * 371.5892868041992, Ⲇ * 455.1428527832031, 374.5892868041992 * Ⲇ), Δ.bezierCurveTo(442.1428527832031 * Ⲇ, 377.5892868041992 * Ⲇ, Ⲇ * 429.1428527832031, 361.5892868041992 * Ⲇ, 438.1428527832031 * Ⲇ, 358.5892868041992 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]), Δ.globalAlpha = ⵠⲆⵠⲆ, Δ.translate(Ⲇ * -3, -ⵠⵠⲆᐃ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 438.1428527832031, Ⲇ * 358.5892868041992), Δ.bezierCurveTo(Ⲇ * 455.1428527832031, 351.5892868041992 * Ⲇ, Ⲇ * 467.1428527832031, Ⲇ * 371.5892868041992, 455.1428527832031 * Ⲇ, Ⲇ * 374.5892868041992), Δ.bezierCurveTo(442.1428527832031 * Ⲇ, Ⲇ * 377.5892868041992, Ⲇ * 429.1428527832031, 361.5892868041992 * Ⲇ, Ⲇ * 438.1428527832031, 358.5892868041992 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(3 * Ⲇ, 3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 423.1428527832031, 363.16071701049805 * Ⲇ), Δ.bezierCurveTo(433.1428527832031 * Ⲇ, 362.16071701049805 * Ⲇ, 433.1428527832031 * Ⲇ, Ⲇ * 374.16071701049805, Ⲇ * 421.1428527832031, 382.16071701049805 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 413.1428527832031, 383.16071701049805 * Ⲇ, Ⲇ * 413.1428527832031, Ⲇ * 368.16071701049805, Ⲇ * 423.1428527832031, Ⲇ * 363.16071701049805), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = 1, Δ.translate(-ⵠᐃᐃⵠ * Ⲇ, -3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(423.1428527832031 * Ⲇ, Ⲇ * 363.16071701049805), Δ.bezierCurveTo(Ⲇ * 433.1428527832031, Ⲇ * 362.16071701049805, 433.1428527832031 * Ⲇ, 374.16071701049805 * Ⲇ, Ⲇ * 421.1428527832031, 382.16071701049805 * Ⲇ), Δ.bezierCurveTo(413.1428527832031 * Ⲇ, Ⲇ * 383.16071701049805, Ⲇ * 413.1428527832031, Ⲇ * 368.16071701049805, 423.1428527832031 * Ⲇ, Ⲇ * 363.16071701049805), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ⵠⵠⲆᐃ, Ⲇ * ⵠⲆᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 431.1428527832031, Ⲇ * 333.0178565979004), Δ.bezierCurveTo(Ⲇ * 447.1428527832031, 330.0178565979004 * Ⲇ, Ⲇ * 448.1428527832031, 340.0178565979004 * Ⲇ, Ⲇ * 447.1428527832031, Ⲇ * 343.0178565979004), Δ.bezierCurveTo(445.1428527832031 * Ⲇ, Ⲇ * 351.0178565979004, Ⲇ * 415.1428527832031, Ⲇ * 343.0178565979004, Ⲇ * 431.1428527832031, 333.0178565979004 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = ⲆⵠΔΔ, Δ.translate(Ⲇ * -ᐃΔᐃⲆ, Ⲇ * -ⵠⵠⲆⲆ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 431.1428527832031, 333.0178565979004 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 447.1428527832031, 330.0178565979004 * Ⲇ, 448.1428527832031 * Ⲇ, 340.0178565979004 * Ⲇ, Ⲇ * 447.1428527832031, 343.0178565979004 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 445.1428527832031, Ⲇ * 351.0178565979004, Ⲇ * 415.1428527832031, 343.0178565979004 * Ⲇ, Ⲇ * 431.1428527832031, Ⲇ * 333.0178565979004), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ⵠᐃⵠⵠ, ⵠⵠⲆⲆ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(486.1428527832031 * Ⲇ, 272.44642639160156 * Ⲇ), Δ.bezierCurveTo(493.1428527832031 * Ⲇ, 260.44642639160156 * Ⲇ, Ⲇ * 519.1428527832031, Ⲇ * 277.44642639160156, Ⲇ * 511.1428527832031, Ⲇ * 289.44642639160156), Δ.bezierCurveTo(Ⲇ * 503.1428527832031, Ⲇ * 297.44642639160156, 483.1428527832031 * Ⲇ, 277.44642639160156 * Ⲇ, Ⲇ * 486.1428527832031, Ⲇ * 273.44642639160156), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]), Δ.globalAlpha = 1, Δ.translate(Ⲇ * -ᐃΔᐃΔ, Ⲇ * -3), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(486.1428527832031 * Ⲇ, 272.44642639160156 * Ⲇ), Δ.bezierCurveTo(493.1428527832031 * Ⲇ, Ⲇ * 260.44642639160156, Ⲇ * 519.1428527832031, 277.44642639160156 * Ⲇ, 511.1428527832031 * Ⲇ, 289.44642639160156 * Ⲇ), Δ.bezierCurveTo(503.1428527832031 * Ⲇ, Ⲇ * 297.44642639160156, Ⲇ * 483.1428527832031, Ⲇ * 277.44642639160156, Ⲇ * 486.1428527832031, 273.44642639160156 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(3 * Ⲇ, Ⲇ * ⵠᐃⵠⲆ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 503.1428527832031, 245.01785278320312 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 516.1428527832031, 247.01785278320312 * Ⲇ, 513.1428527832031 * Ⲇ, Ⲇ * 264.0178527832031, 509.1428527832031 * Ⲇ, 265.0178527832031 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 499.1428527832031, Ⲇ * 268.0178527832031, 494.1428527832031 * Ⲇ, 244.01785278320312 * Ⲇ, 504.1428527832031 * Ⲇ, 245.01785278320312 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ]), Δ.globalAlpha = ⲆⲆⵠ, Δ.translate(Ⲇ * -ⵠᐃᐃⵠ, -3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 503.1428527832031, 245.01785278320312 * Ⲇ), Δ.bezierCurveTo(516.1428527832031 * Ⲇ, 247.01785278320312 * Ⲇ, 513.1428527832031 * Ⲇ, 264.0178527832031 * Ⲇ, 509.1428527832031 * Ⲇ, Ⲇ * 265.0178527832031), Δ.bezierCurveTo(Ⲇ * 499.1428527832031, Ⲇ * 268.0178527832031, Ⲇ * 494.1428527832031, Ⲇ * 244.01785278320312, Ⲇ * 504.1428527832031, Ⲇ * 245.01785278320312), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * 3, Ⲇ * ⵠⲆᐃΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(518.1428527832031 * Ⲇ, 179.73213958740234 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 529.1428527832031, 181.73213958740234 * Ⲇ, 514.1428527832031 * Ⲇ, 212.73213958740234 * Ⲇ, Ⲇ * 505.1428527832031, 200.73213958740234 * Ⲇ), Δ.bezierCurveTo(499.1428527832031 * Ⲇ, 186.73213958740234 * Ⲇ, Ⲇ * 515.1428527832031, 177.73213958740234 * Ⲇ, Ⲇ * 518.1428527832031, Ⲇ * 179.73213958740234), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]), Δ.globalAlpha = 1, Δ.translate(Ⲇ * -ⵠᐃᐃⵠ, -3 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 518.1428527832031, Ⲇ * 179.73213958740234), Δ.bezierCurveTo(529.1428527832031 * Ⲇ, Ⲇ * 181.73213958740234, 514.1428527832031 * Ⲇ, 212.73213958740234 * Ⲇ, Ⲇ * 505.1428527832031, 200.73213958740234 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 499.1428527832031, Ⲇ * 186.73213958740234, Ⲇ * 515.1428527832031, 177.73213958740234 * Ⲇ, 518.1428527832031 * Ⲇ, 179.73213958740234 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠⲆ]), Δ.globalAlpha = .5, Δ.translate(Ⲇ * ⵠᐃⵠⵠ, Ⲇ * ᐃᐃΔΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(438.1428527832031 * Ⲇ, 22.16070556640625 * Ⲇ), Δ.bezierCurveTo(446.1428527832031 * Ⲇ, 27.16070556640625 * Ⲇ, 422.1428527832031 * Ⲇ, Ⲇ * 54.16070556640625, Ⲇ * 414.1428527832031, 40.16070556640625 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 409.1428527832031, Ⲇ * 27.16070556640625, 430.1428527832031 * Ⲇ, Ⲇ * 15.16070556640625, Ⲇ * 438.1428527832031, 22.16070556640625 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]), Δ.globalAlpha = 1, Δ.translate(-ⵠⵠⲆᐃ * Ⲇ, -ⲆⵠⵠⲆ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(438.1428527832031 * Ⲇ, 22.16070556640625 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 446.1428527832031, 27.16070556640625 * Ⲇ, 422.1428527832031 * Ⲇ, 54.16070556640625 * Ⲇ, Ⲇ * 414.1428527832031, Ⲇ * 40.16070556640625), Δ.bezierCurveTo(Ⲇ * 409.1428527832031, 27.16070556640625 * Ⲇ, 430.1428527832031 * Ⲇ, Ⲇ * 15.16070556640625, Ⲇ * 438.1428527832031, Ⲇ * 22.16070556640625), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.globalAlpha = .5, Δ.translate(ⵠᐃᐃⵠ * Ⲇ, Ⲇ * ⲆⲆΔΔ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(406.1428527832031 * Ⲇ, 11.16070556640625 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 418.1428527832031, Ⲇ * 14.16070556640625, Ⲇ * 411.1428527832031, Ⲇ * 27.16070556640625, 403.1428527832031 * Ⲇ, 30.16070556640625 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 395.1428527832031, Ⲇ * 31.16070556640625, 391.1428527832031 * Ⲇ, Ⲇ * 16.16070556640625, Ⲇ * 406.1428527832031, Ⲇ * 10.16070556640625), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ]), Δ.globalAlpha = 1, Δ.translate(Ⲇ * -3, -ᐃΔᐃⲆ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(406.1428527832031 * Ⲇ, 11.16070556640625 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 418.1428527832031, 14.16070556640625 * Ⲇ, 411.1428527832031 * Ⲇ, 27.16070556640625 * Ⲇ, Ⲇ * 403.1428527832031, 30.16070556640625 * Ⲇ), Δ.bezierCurveTo(395.1428527832031 * Ⲇ, 31.16070556640625 * Ⲇ, 391.1428527832031 * Ⲇ, Ⲇ * 16.16070556640625, Ⲇ * 406.1428527832031, Ⲇ * 10.16070556640625), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[1]), Δ.translate(ΔⵠⵠΔᐃ * Ⲇ, Ⲇ * 100));
		Δ.globalAlpha = 1;
		Δ.translate(Ⲇ * -ⲆⵠⵠⲆ, Ⲇ * -Ⲇⵠᐃᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 271, Ⲇ * 111);
		Δ.bezierCurveTo(Ⲇ * 259, Ⲇ * 110, 258 * Ⲇ, 99 * Ⲇ, 265 * Ⲇ, 95 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 276, 91 * Ⲇ, 279 * Ⲇ, Ⲇ * ᐃᐃΔⵠⵠ, Ⲇ * 275, 107 * Ⲇ);
		Δ.bezierCurveTo(274 * Ⲇ, 109 * Ⲇ, Ⲇ * 273, 110 * Ⲇ, Ⲇ * 271, Ⲇ * 111);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[3], ⵠⵠᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 169, Ⲇ * 121);
		Δ.bezierCurveTo(159 * Ⲇ, Ⲇ * 129, 149 * Ⲇ, Ⲇ * 126, 144 * Ⲇ, Ⲇ * 114);
		Δ.bezierCurveTo(Ⲇ * 142, 102 * Ⲇ, 149 * Ⲇ, Ⲇ * 98, Ⲇ * 163, Ⲇ * 96);
		Δ.bezierCurveTo(Ⲇ * 175, Ⲇ * 98, 176 * Ⲇ, Ⲇ * 115, Ⲇ * 169, 121 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[Ⲇⵠᐃᐃ], ΔΔⵠⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 213, 150 * Ⲇ);
		Δ.bezierCurveTo(206 * Ⲇ, Ⲇ * 134, Ⲇ * 216, Ⲇ * 120, 235 * Ⲇ, Ⲇ * 129);
		Δ.bezierCurveTo(Ⲇ * 247, Ⲇ * 139, Ⲇ * 242, Ⲇ * 146, 237 * Ⲇ, Ⲇ * 154);
		Δ.bezierCurveTo(Ⲇ * 226, 162 * Ⲇ, Ⲇ * 218, 159 * Ⲇ, Ⲇ * 213, 150 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[Ⲇⵠᐃᐃ], ⵠⲆΔᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 236, 169 * Ⲇ);
		Δ.bezierCurveTo(247 * Ⲇ, 166 * Ⲇ, Ⲇ * 250, 172 * Ⲇ, 247 * Ⲇ, Ⲇ * 181);
		Δ.bezierCurveTo(242 * Ⲇ, 186 * Ⲇ, Ⲇ * 241, Ⲇ * 181, 242 * Ⲇ, Ⲇ * 182);
		Δ.bezierCurveTo(241 * Ⲇ, Ⲇ * 178, 240 * Ⲇ, 179 * Ⲇ, 239 * Ⲇ, 181 * Ⲇ);
		Δ.bezierCurveTo(240 * Ⲇ, Ⲇ * 184, 237 * Ⲇ, Ⲇ * 186, Ⲇ * 233, Ⲇ * 181);
		Δ.bezierCurveTo(230 * Ⲇ, 173 * Ⲇ, 233 * Ⲇ, 169 * Ⲇ, Ⲇ * 236, Ⲇ * 169);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ᐃΔᐃΔ], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(163 * Ⲇ, 170 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 176, Ⲇ * 165, 180 * Ⲇ, 172 * Ⲇ, Ⲇ * 181, Ⲇ * 181);
		Δ.bezierCurveTo(182 * Ⲇ, Ⲇ * 189, 178 * Ⲇ, Ⲇ * 192, 174 * Ⲇ, 188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 172, 183 * Ⲇ, 170 * Ⲇ, Ⲇ * 184, Ⲇ * 170, 188 * Ⲇ);
		Δ.bezierCurveTo(176 * Ⲇ, 194 * Ⲇ, 165 * Ⲇ, Ⲇ * 196, 162 * Ⲇ, 190 * Ⲇ);
		Δ.bezierCurveTo(152 * Ⲇ, 181 * Ⲇ, 157 * Ⲇ, 173 * Ⲇ, Ⲇ * 163, Ⲇ * 170);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⲆ], Δⵠ[ⵠⵠΔⲆ], 2 * Ⲇ);
		Δ.scale(.05, .05);
		Δ.translate(Ⲇ * 5e3, Ⲇ * 1900);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 273, 46.546875 * Ⲇ);
		Δ.bezierCurveTo(353 * Ⲇ, Ⲇ * 131.546875, Ⲇ * 303, 213.546875 * Ⲇ, Ⲇ * 272, 236.546875 * Ⲇ);
		Δ.bezierCurveTo(203 * Ⲇ, Ⲇ * 179.546875, Ⲇ * 236, Ⲇ * 84.546875, Ⲇ * 273, 47.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠᐃⲆ], Δⵠ[ΔΔⵠⲆΔ], Ⲇ * ⵠΔⵠⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(467 * Ⲇ, 257.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 369, Ⲇ * 194.546875, Ⲇ * 325, Ⲇ * 236.546875, 291 * Ⲇ, 271.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 371, Ⲇ * 335.546875, Ⲇ * 427, Ⲇ * 313.546875, Ⲇ * 467, Ⲇ * 258.546875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⵠⲆⵠᐃ], Δⵠ[ⲆⵠⲆᐃ], Ⲇ * ΔⵠⲆⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 269, Ⲇ * 275.546875);
		Δ.bezierCurveTo(Ⲇ * 343, Ⲇ * 356.546875, Ⲇ * 355, 407.546875 * Ⲇ, 323 * Ⲇ, 472.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 224, 451.546875 * Ⲇ, 238 * Ⲇ, 326.546875 * Ⲇ, 270 * Ⲇ, 275.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⵠᐃⲆᐃ], Ⲇ * ⵠΔΔΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(260 * Ⲇ, Ⲇ * 267.546875);
		Δ.bezierCurveTo(Ⲇ * 134, Ⲇ * 221.546875, Ⲇ * 89, Ⲇ * 256.546875, Ⲇ * 60, 295.546875 * Ⲇ);
		Δ.bezierCurveTo(116 * Ⲇ, 357.546875 * Ⲇ, Ⲇ * 242, 344.546875 * Ⲇ, 260 * Ⲇ, Ⲇ * 267.546875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⲆ], Δⵠ[5], ᐃⵠΔⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 124, 123.546875 * Ⲇ);
		Δ.bezierCurveTo(255 * Ⲇ, 140.546875 * Ⲇ, 265 * Ⲇ, 234.546875 * Ⲇ, Ⲇ * 267, 269.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 159, Ⲇ * 283.546875, 127 * Ⲇ, Ⲇ * 192.546875, Ⲇ * 124, 124.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(267 * Ⲇ, 268.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 265, 170.546875 * Ⲇ, 364 * Ⲇ, Ⲇ * 127.546875, Ⲇ * 407, Ⲇ * 132.546875);
		Δ.bezierCurveTo(Ⲇ * 427, 204.546875 * Ⲇ, Ⲇ * 341, Ⲇ * 277.546875, 268 * Ⲇ, Ⲇ * 271.546875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⵠⲆ], Δⵠ[7], ⵠⵠᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(270 * Ⲇ, 269.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 370, 251.546875 * Ⲇ, 410 * Ⲇ, 328.546875 * Ⲇ, Ⲇ * 420, 399.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 292, Ⲇ * 412.546875, 275 * Ⲇ, Ⲇ * 313.546875, Ⲇ * 269, Ⲇ * 272.546875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 273, Ⲇ * 266.546875);
		Δ.bezierCurveTo(Ⲇ * 291, Ⲇ * 370.546875, 235 * Ⲇ, 428.546875 * Ⲇ, Ⲇ * 173, Ⲇ * 451.546875);
		Δ.bezierCurveTo(Ⲇ * 124, Ⲇ * 365.546875, 217 * Ⲇ, Ⲇ * 274.546875, Ⲇ * 272, 265.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔⵠⵠ], Δⵠ[7], Ⲇ * ⲆᐃᐃⲆ);
		ⵠΔᐃ(Δ, Ⲇ * 266, 251.546875 * Ⲇ, 19.1049731745428 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[9], Ⲇ * ⵠⵠᐃⲆ);
		ⵠΔᐃ(Δ, 292 * Ⲇ, 274.546875 * Ⲇ, 15.556349186104045 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆᐃⲆᐃᐃ], Δⵠ[9], Ⲇ * ⵠⲆΔᐃ);
		ⵠΔᐃ(Δ, Ⲇ * 258, Ⲇ * 291.546875, 17.029386365926403 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[ⲆΔΔΔΔ], Ⲇ * 2);
		Δ.scale(1.4, 1.4);
		Δ.translate(Ⲇ * -700, Ⲇ * 280);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 273, Ⲇ * 46.546875);
		Δ.bezierCurveTo(Ⲇ * 353, 131.546875 * Ⲇ, Ⲇ * 303, Ⲇ * 213.546875, 272 * Ⲇ, 236.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 203, Ⲇ * 179.546875, Ⲇ * 236, 84.546875 * Ⲇ, Ⲇ * 273, 47.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔᐃⲆ], Δⵠ[ⵠᐃⲆᐃ], ⵠᐃᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 467, 257.546875 * Ⲇ);
		Δ.bezierCurveTo(369 * Ⲇ, Ⲇ * 194.546875, 325 * Ⲇ, Ⲇ * 236.546875, 291 * Ⲇ, 271.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 371, 335.546875 * Ⲇ, Ⲇ * 427, 313.546875 * Ⲇ, Ⲇ * 467, 258.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(269 * Ⲇ, Ⲇ * 275.546875);
		Δ.bezierCurveTo(343 * Ⲇ, Ⲇ * 356.546875, 355 * Ⲇ, 407.546875 * Ⲇ, Ⲇ * 323, 472.546875 * Ⲇ);
		Δ.bezierCurveTo(224 * Ⲇ, 451.546875 * Ⲇ, Ⲇ * 238, Ⲇ * 326.546875, Ⲇ * 270, 275.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⲆⲆ], Δⵠ[ⲆᐃΔⲆⵠ], Ⲇ * ⵠⲆᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 260, Ⲇ * 267.546875);
		Δ.bezierCurveTo(134 * Ⲇ, 221.546875 * Ⲇ, Ⲇ * 89, Ⲇ * 256.546875, Ⲇ * 60, 295.546875 * Ⲇ);
		Δ.bezierCurveTo(116 * Ⲇ, Ⲇ * 357.546875, Ⲇ * 242, Ⲇ * 344.546875, 260 * Ⲇ, Ⲇ * 267.546875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠΔⲆ], Δⵠ[5], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(124 * Ⲇ, 123.546875 * Ⲇ);
		Δ.bezierCurveTo(ᐃⲆⲆᐃᐃⵠᐃ * Ⲇ, Ⲇ * 140.546875, 265 * Ⲇ, 234.546875 * Ⲇ, Ⲇ * 267, Ⲇ * 269.546875);
		Δ.bezierCurveTo(159 * Ⲇ, 283.546875 * Ⲇ, 127 * Ⲇ, 192.546875 * Ⲇ, 124 * Ⲇ, 124.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 267, 268.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 265, 170.546875 * Ⲇ, Ⲇ * 364, Ⲇ * 127.546875, Ⲇ * 407, 132.546875 * Ⲇ);
		Δ.bezierCurveTo(427 * Ⲇ, Ⲇ * 204.546875, Ⲇ * 341, 277.546875 * Ⲇ, Ⲇ * 268, 271.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[ⲆΔᐃᐃⲆ], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 270, 269.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 370, Ⲇ * 251.546875, Ⲇ * 410, Ⲇ * 328.546875, Ⲇ * 420, 399.546875 * Ⲇ);
		Δ.bezierCurveTo(292 * Ⲇ, Ⲇ * 412.546875, Ⲇ * 275, Ⲇ * 313.546875, Ⲇ * 269, 272.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⵠΔᐃⵠ], Δⵠ[ⲆᐃⲆⲆΔ], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(273 * Ⲇ, Ⲇ * 266.546875);
		Δ.bezierCurveTo(Ⲇ * 291, Ⲇ * 370.546875, Ⲇ * 235, 428.546875 * Ⲇ, 173 * Ⲇ, Ⲇ * 451.546875);
		Δ.bezierCurveTo(124 * Ⲇ, Ⲇ * 365.546875, 217 * Ⲇ, 274.546875 * Ⲇ, 272 * Ⲇ, 265.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], Ⲇ * 2);
		ⵠΔᐃ(Δ, 266 * Ⲇ, Ⲇ * 251.546875, Ⲇ * 19.1049731745428);
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[ΔⵠⵠᐃⲆ], Ⲇ * 2);
		ⵠΔᐃ(Δ, 292 * Ⲇ, 274.546875 * Ⲇ, Ⲇ * 15.556349186104045);
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[9], Ⲇ * ᐃᐃⵠⵠ);
		ⵠΔᐃ(Δ, 258 * Ⲇ, 291.546875 * Ⲇ, 17.029386365926403 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃⲆ], Δⵠ[9], ᐃᐃⵠⵠ * Ⲇ);
		Δ.translate(Ⲇ * -900, -200 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 273, Ⲇ * 46.546875);
		Δ.bezierCurveTo(Ⲇ * 353, 131.546875 * Ⲇ, 303 * Ⲇ, Ⲇ * 213.546875, Ⲇ * 272, 236.546875 * Ⲇ);
		Δ.bezierCurveTo(203 * Ⲇ, Ⲇ * 179.546875, 236 * Ⲇ, Ⲇ * 84.546875, 273 * Ⲇ, Ⲇ * 47.546875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(467 * Ⲇ, 257.546875 * Ⲇ);
		Δ.bezierCurveTo(369 * Ⲇ, Ⲇ * 194.546875, 325 * Ⲇ, 236.546875 * Ⲇ, Ⲇ * 291, Ⲇ * 271.546875);
		Δ.bezierCurveTo(371 * Ⲇ, 335.546875 * Ⲇ, 427 * Ⲇ, Ⲇ * 313.546875, Ⲇ * 467, 258.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔᐃⵠΔ], Δⵠ[ⵠⲆⲆⲆ], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 269, Ⲇ * 275.546875);
		Δ.bezierCurveTo(343 * Ⲇ, 356.546875 * Ⲇ, Ⲇ * 355, Ⲇ * 407.546875, Ⲇ * 323, Ⲇ * 472.546875);
		Δ.bezierCurveTo(224 * Ⲇ, 451.546875 * Ⲇ, 238 * Ⲇ, 326.546875 * Ⲇ, Ⲇ * 270, 275.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], Ⲇ * ᐃᐃΔⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 260, 267.546875 * Ⲇ);
		Δ.bezierCurveTo(134 * Ⲇ, Ⲇ * 221.546875, Ⲇ * 89, Ⲇ * 256.546875, Ⲇ * 60, 295.546875 * Ⲇ);
		Δ.bezierCurveTo(116 * Ⲇ, 357.546875 * Ⲇ, Ⲇ * 242, 344.546875 * Ⲇ, 260 * Ⲇ, 267.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⲆⲆ], Δⵠ[ⲆΔⲆᐃᐃ], ⵠΔⵠⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(124 * Ⲇ, 123.546875 * Ⲇ);
		Δ.bezierCurveTo(ΔᐃᐃΔⲆᐃⲆ * Ⲇ, Ⲇ * 140.546875, 265 * Ⲇ, 234.546875 * Ⲇ, 267 * Ⲇ, Ⲇ * 269.546875);
		Δ.bezierCurveTo(159 * Ⲇ, Ⲇ * 283.546875, 127 * Ⲇ, 192.546875 * Ⲇ, Ⲇ * 124, Ⲇ * 124.546875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆⵠΔ], Δⵠ[7], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(267 * Ⲇ, Ⲇ * 268.546875);
		Δ.bezierCurveTo(Ⲇ * 265, 170.546875 * Ⲇ, 364 * Ⲇ, 127.546875 * Ⲇ, Ⲇ * 407, 132.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 427, Ⲇ * 204.546875, 341 * Ⲇ, 277.546875 * Ⲇ, 268 * Ⲇ, 271.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[ΔΔⵠⲆᐃ], ⲆᐃᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 270, 269.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 370, Ⲇ * 251.546875, Ⲇ * 410, 328.546875 * Ⲇ, 420 * Ⲇ, Ⲇ * 399.546875);
		Δ.bezierCurveTo(292 * Ⲇ, 412.546875 * Ⲇ, Ⲇ * 275, 313.546875 * Ⲇ, Ⲇ * 269, 272.546875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠΔᐃ], Δⵠ[7], ⵠⲆᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 273, Ⲇ * 266.546875);
		Δ.bezierCurveTo(291 * Ⲇ, Ⲇ * 370.546875, Ⲇ * 235, 428.546875 * Ⲇ, 173 * Ⲇ, 451.546875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 124, Ⲇ * 365.546875, 217 * Ⲇ, 274.546875 * Ⲇ, 272 * Ⲇ, Ⲇ * 265.546875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[ⲆⲆᐃΔᐃᐃⲆ], 2 * Ⲇ);
		ⵠΔᐃ(Δ, 266 * Ⲇ, Ⲇ * 251.546875, 19.1049731745428 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[ΔᐃᐃᐃⲆΔΔ], Ⲇ * ᐃⵠΔⲆ);
		ⵠΔᐃ(Δ, 292 * Ⲇ, 274.546875 * Ⲇ, 15.556349186104045 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[9], 2 * Ⲇ);
		ⵠΔᐃ(Δ, 258 * Ⲇ, Ⲇ * 291.546875, 17.029386365926403 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[ⵠΔᐃΔΔⲆᐃ], Ⲇ * 2);
		return ᐃⵠ
	}

	function ᐃⲆⲆᐃᐃΔᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 88;
		ᐃⵠ.height = 88 * Ⲇ;
		Δ.save();
		Δ.translate(Ⲇ * 44, 44 * Ⲇ);
		Δ.rotate(.52);
		ΔΔΔΔ(Δ, ⵠΔᐃᐃ, 43 * Ⲇ, Ⲇ * ᐃⲆᐃⲆⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ], Δⵠ[ᐃⵠᐃᐃ], Ⲇ * ᐃΔΔΔ);
		return ᐃⵠ
	}

	function ⲆᐃΔΔᐃᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 187 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 119;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(Ⲇⵠᐃ, 3);
		Δ.moveTo(53 * Ⲇ, 45 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 3, 60 * Ⲇ, Ⲇ * 11, Ⲇ * 72, Ⲇ * ⵠᐃΔⵠⵠⲆᐃ, 81 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 28, Ⲇ * 82, 24 * Ⲇ, Ⲇ * 81, 29 * Ⲇ, Ⲇ * 82);
		Δ.bezierCurveTo(26 * Ⲇ, Ⲇ * 87, 28 * Ⲇ, 84 * Ⲇ, 28 * Ⲇ, 87 * Ⲇ);
		Δ.bezierCurveTo(63 * Ⲇ, Ⲇ * 101, 92 * Ⲇ, Ⲇ * 100, 138 * Ⲇ, Ⲇ * 93);
		Δ.bezierCurveTo(Ⲇ * 172, Ⲇ * 87, Ⲇ * 180, Ⲇ * 72, Ⲇ * 168, Ⲇ * 62);
		Δ.bezierCurveTo(154 * Ⲇ, Ⲇ * 51, Ⲇ * 150, 50 * Ⲇ, Ⲇ * 148, Ⲇ * 49);
		Δ.bezierCurveTo(Ⲇ * 132, 42 * Ⲇ, 90 * Ⲇ, Ⲇ * 40, Ⲇ * 55, Ⲇ * 45);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⲆᐃ]);
		Δ.globalAlpha = ⵠⵠⵠⲆ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(0, -ⲆⵠⵠⲆ);
		Δ.moveTo(53 * Ⲇ, 45 * Ⲇ);
		Δ.bezierCurveTo(ⵠⵠⲆⲆ * Ⲇ, Ⲇ * 60, Ⲇ * 11, Ⲇ * 72, ⵠᐃⵠᐃⵠ * Ⲇ, 81 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 28, Ⲇ * 82, 24 * Ⲇ, Ⲇ * 81, 29 * Ⲇ, 82 * Ⲇ);
		Δ.bezierCurveTo(26 * Ⲇ, Ⲇ * 87, 28 * Ⲇ, 84 * Ⲇ, 28 * Ⲇ, 87 * Ⲇ);
		Δ.bezierCurveTo(63 * Ⲇ, Ⲇ * 101, Ⲇ * 92, 100 * Ⲇ, 138 * Ⲇ, Ⲇ * 93);
		Δ.bezierCurveTo(172 * Ⲇ, 87 * Ⲇ, Ⲇ * 180, Ⲇ * 72, 168 * Ⲇ, Ⲇ * 62);
		Δ.bezierCurveTo(Ⲇ * 154, 51 * Ⲇ, 150 * Ⲇ, 50 * Ⲇ, 148 * Ⲇ, Ⲇ * 49);
		Δ.bezierCurveTo(Ⲇ * 132, Ⲇ * 42, Ⲇ * 90, 40 * Ⲇ, 55 * Ⲇ, 45 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 151, 60 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 140, 36 * Ⲇ, 137 * Ⲇ, 32 * Ⲇ, 124 * Ⲇ, Ⲇ * 29);
		Δ.bezierCurveTo(Ⲇ * 98, 22 * Ⲇ, Ⲇ * 80, Ⲇ * 24, Ⲇ * 62, Ⲇ * 28);
		Δ.bezierCurveTo(42 * Ⲇ, Ⲇ * 35, 38 * Ⲇ, Ⲇ * 46, Ⲇ * 34, 58 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 53, Ⲇ * 74, 76 * Ⲇ, Ⲇ * 76, Ⲇ * 91, 78 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ], Δⵠ[1], Ⲇ * ΔΔⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 37, Ⲇ * 53);
		Δ.bezierCurveTo(30 * Ⲇ, 56 * Ⲇ, 29 * Ⲇ, 67 * Ⲇ, 30 * Ⲇ, Ⲇ * 68);
		Δ.bezierCurveTo(94 * Ⲇ, Ⲇ * 108, 150 * Ⲇ, 76 * Ⲇ, 155 * Ⲇ, Ⲇ * 70);
		Δ.bezierCurveTo(Ⲇ * 154, Ⲇ * 60, 151 * Ⲇ, 54 * Ⲇ, Ⲇ * 149, Ⲇ * 53);
		Δ.bezierCurveTo(Ⲇ * 101, 74 * Ⲇ, 66 * Ⲇ, Ⲇ * 66, Ⲇ * 37, Ⲇ * 53);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ᐃΔᐃⲆ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ᐃⵠⵠΔⲆ, Ⲇ * 36);
		Δ.bezierCurveTo(Ⲇ * 92, Ⲇ * 25, Ⲇ * 86, Ⲇ * 28, 82 * Ⲇ, 34 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 88, Ⲇ * 40, 93 * Ⲇ, Ⲇ * 40, 98 * Ⲇ, Ⲇ * 36);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃΔΔⲆ], ᐃᐃᐃᐃΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(80 * Ⲇ, Ⲇ * 43);
		Δ.bezierCurveTo(Ⲇ * 69, Ⲇ * 46, 67 * Ⲇ, Ⲇ * 52, 69 * Ⲇ, 58 * Ⲇ);
		ⵠᐃ(Δ, ᐃΔᐃⲆⵠ, Δⵠ[1], ᐃᐃⵠΔ * Ⲇ);
		ⵠΔᐃ(Δ, 58 * Ⲇ, 50 * Ⲇ, Ⲇ * ⲆⵠⲆΔᐃ);
		ⵠᐃ(Δ, Δⵠ[ⵠΔᐃⲆ]);
		ⵠΔᐃ(Δ, Ⲇ * 43, 65 * Ⲇ, 5 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔⵠⲆ]);
		ⵠΔᐃ(Δ, 58 * Ⲇ, Ⲇ * 73, ΔΔⵠΔⵠ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[4]);
		ⵠΔᐃ(Δ, 58 * Ⲇ, 50 * Ⲇ, ⵠᐃᐃⲆ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆⵠᐃ]);
		ⵠΔᐃ(Δ, Ⲇ * 43, Ⲇ * 65, 2 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⲆⲆ]);
		ⵠΔᐃ(Δ, 58 * Ⲇ, 73 * Ⲇ, ᐃⵠΔⲆ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⵠ]);
		return ᐃⵠ
	}

	function ⵠᐃⲆΔⵠΔΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 440;
		ᐃⵠ.height = 388 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(Ⲇ * ΔΔⵠⵠ, Ⲇ * 5);
		ⵠΔᐃ(Δ, Ⲇ * 220, Ⲇ * 201, Ⲇ * 170.41713528867922);
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[Ⲇⵠⵠᐃ], Ⲇ * ᐃᐃⲆⲆⲆ);
		Δ.globalAlpha = ᐃΔⵠΔ;
		Δ.translate(-ⲆⵠⲆΔᐃ * Ⲇ, Ⲇ * -5);
		ⵠΔᐃ(Δ, 220 * Ⲇ, Ⲇ * 201, 170.41713528867922 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠ], Δⵠ[2], Ⲇ * 6);
		ⵠΔᐃ(Δ, Ⲇ * 220, Ⲇ * 201, Ⲇ * 130);
		ⵠᐃ(Δ, Δⵠ[11], Δⵠ[ⵠΔⵠⲆ], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(218 * Ⲇ, Ⲇ * 97);
		Δ.bezierCurveTo(Ⲇ * 219, 163 * Ⲇ, 201 * Ⲇ, Ⲇ * 176, Ⲇ * 191, Ⲇ * 175);
		Δ.bezierCurveTo(Ⲇ * 176, 177 * Ⲇ, 168 * Ⲇ, 167 * Ⲇ, 160 * Ⲇ, Ⲇ * 115);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⵠ], Δⵠ[ᐃᐃⲆⲆⲆ], ΔⲆⵠΔⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(224 * Ⲇ, Ⲇ * 181);
		Δ.bezierCurveTo(225 * Ⲇ, 138 * Ⲇ, 246 * Ⲇ, 115 * Ⲇ, 263 * Ⲇ, 137 * Ⲇ);
		Δ.bezierCurveTo(282 * Ⲇ, Ⲇ * 174, Ⲇ * 279, Ⲇ * 217, 265 * Ⲇ, 243 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 253, Ⲇ * 264, 240 * Ⲇ, Ⲇ * 256, Ⲇ * 233, 238 * Ⲇ);
		Δ.bezierCurveTo(221 * Ⲇ, Ⲇ * 212, 225 * Ⲇ, 198 * Ⲇ, 224 * Ⲇ, Ⲇ * 184);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[ⵠΔⵠⵠⲆ], ΔᐃⲆᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(169 * Ⲇ, Ⲇ * 289);
		Δ.bezierCurveTo(161 * Ⲇ, Ⲇ * 234, Ⲇ * 168, 197 * Ⲇ, Ⲇ * 187, Ⲇ * 195);
		Δ.bezierCurveTo(Ⲇ * 219, Ⲇ * 189, 222 * Ⲇ, Ⲇ * ⲆᐃᐃⲆⵠⲆⵠ, 216 * Ⲇ, Ⲇ * 307);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[ΔΔΔᐃΔ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(143 * Ⲇ, 146 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 161, Ⲇ * 199, 151 * Ⲇ, Ⲇ * 245, 138 * Ⲇ, Ⲇ * 266);
		Δ.bezierCurveTo(Ⲇ * 120.5, Ⲇ * 239.5, Ⲇ * 120.5, Ⲇ * 239.5, 103 * Ⲇ, 213 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[ⲆⲆⲆⵠΔ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(283 * Ⲇ, Ⲇ * 135);
		Δ.bezierCurveTo(277 * Ⲇ, Ⲇ * 176, Ⲇ * 298, Ⲇ * 194, 315 * Ⲇ, 205 * Ⲇ);
		Δ.bezierCurveTo(323.5 * Ⲇ, 175 * Ⲇ, Ⲇ * 323.5, 175 * Ⲇ, Ⲇ * 332, Ⲇ * 145);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[6], Ⲇ * ᐃΔΔΔⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(318 * Ⲇ, Ⲇ * 223);
		Δ.bezierCurveTo(290 * Ⲇ, 195 * Ⲇ, Ⲇ * 271, Ⲇ * 256, Ⲇ * 283, 281 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 303.5, 267 * Ⲇ, 303.5 * Ⲇ, 267 * Ⲇ, 324 * Ⲇ, 253 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[ⵠΔᐃᐃ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(142 * Ⲇ, 223 * Ⲇ);
		Δ.bezierCurveTo(128 * Ⲇ, Ⲇ * 213, Ⲇ * 123, 214 * Ⲇ, 111 * Ⲇ, 223 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[10], Δⵠ[10], ᐃᐃⵠΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(251 * Ⲇ, 133 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 269, Ⲇ * 188, 262 * Ⲇ, 229 * Ⲇ, 251 * Ⲇ, Ⲇ * 253);
		Δ.bezierCurveTo(288 * Ⲇ, 224 * Ⲇ, 273 * Ⲇ, Ⲇ * 139, Ⲇ * 252, Ⲇ * 133);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[10], Δⵠ[ⵠΔⲆⲆΔ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(203 * Ⲇ, 102 * Ⲇ);
		Δ.bezierCurveTo(204 * Ⲇ, 136 * Ⲇ, 200 * Ⲇ, 159 * Ⲇ, Ⲇ * 189, 174 * Ⲇ);
		Δ.bezierCurveTo(223 * Ⲇ, Ⲇ * 164, 219 * Ⲇ, 87 * Ⲇ, Ⲇ * 205, 83 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃᐃ], Δⵠ[10], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(196 * Ⲇ, 324 * Ⲇ);
		Δ.bezierCurveTo(209 * Ⲇ, 239 * Ⲇ, 200 * Ⲇ, 219 * Ⲇ, Ⲇ * 192, Ⲇ * 196);
		Δ.bezierCurveTo(229 * Ⲇ, 216 * Ⲇ, 219 * Ⲇ, 316 * Ⲇ, 198 * Ⲇ, 325 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[10], Δⵠ[ᐃᐃᐃⲆⵠ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 266, 166 * Ⲇ);
		Δ.bezierCurveTo(249 * Ⲇ, Ⲇ * 154, Ⲇ * 243, Ⲇ * 161, 233 * Ⲇ, Ⲇ * 167);
		ⵠᐃ(Δ, undefined, Δⵠ[ᐃⲆΔⵠⵠ], ΔΔΔᐃΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(269 * Ⲇ, 192 * Ⲇ);
		Δ.bezierCurveTo(ⲆⵠⲆⵠΔⵠⲆ * Ⲇ, Ⲇ * 183, Ⲇ * 241, 186 * Ⲇ, 233 * Ⲇ, 192 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠⵠⲆⲆⵠ], ⲆⲆᐃⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(263 * Ⲇ, 217 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 251, Ⲇ * 211, Ⲇ * 242, 213 * Ⲇ, 236 * Ⲇ, 218 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[ᐃⲆΔⵠⵠ], Ⲇ * ⵠⲆⵠⵠⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(204 * Ⲇ, 141 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 191, 131 * Ⲇ, 187 * Ⲇ, Ⲇ * 133, 176 * Ⲇ, 141 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[6], Ⲇ * ⵠⲆⲆΔᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(207 * Ⲇ, Ⲇ * 230);
		Δ.bezierCurveTo(Ⲇ * 193, Ⲇ * 222, 185 * Ⲇ, Ⲇ * 224, Ⲇ * 177, 231 * Ⲇ);
		ⵠᐃ(Δ, ⵠᐃⲆⵠⲆ, Δⵠ[6], Ⲇ * ⵠⲆⵠⲆⵠ);
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 210, Ⲇ * 258);
		Δ.bezierCurveTo(196 * Ⲇ, Ⲇ * 247, 191 * Ⲇ, Ⲇ * 250, Ⲇ * 177, Ⲇ * 259);
		ⵠᐃ(Δ, undefined, Δⵠ[ⲆⲆᐃⵠⵠ], Ⲇ * ⵠΔᐃᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(145 * Ⲇ, Ⲇ * 196);
		Δ.bezierCurveTo(130 * Ⲇ, 186 * Ⲇ, Ⲇ * 124, 187 * Ⲇ, Ⲇ * 114, 195 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[6], Ⲇ * 6);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(218 * Ⲇ, 97 * Ⲇ);
		Δ.bezierCurveTo(219 * Ⲇ, 163 * Ⲇ, Ⲇ * 201, 176 * Ⲇ, 191 * Ⲇ, Ⲇ * 175);
		Δ.bezierCurveTo(Ⲇ * 176, Ⲇ * 177, 168 * Ⲇ, Ⲇ * 167, 160 * Ⲇ, Ⲇ * 115);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[6], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 224, Ⲇ * 181);
		Δ.bezierCurveTo(Ⲇ * 225, Ⲇ * 138, 246 * Ⲇ, 115 * Ⲇ, 263 * Ⲇ, Ⲇ * 137);
		Δ.bezierCurveTo(Ⲇ * 282, Ⲇ * 174, Ⲇ * 279, 217 * Ⲇ, 265 * Ⲇ, 243 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 253, Ⲇ * 264, Ⲇ * 240, 256 * Ⲇ, Ⲇ * 233, Ⲇ * 238);
		Δ.bezierCurveTo(Ⲇ * 221, 212 * Ⲇ, 225 * Ⲇ, Ⲇ * 198, Ⲇ * 224, 184 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[6], ⵠⲆⵠⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(169 * Ⲇ, Ⲇ * 289);
		Δ.bezierCurveTo(Ⲇ * 161, Ⲇ * 234, 168 * Ⲇ, Ⲇ * 197, Ⲇ * 187, Ⲇ * 195);
		Δ.bezierCurveTo(Ⲇ * 219, 189 * Ⲇ, Ⲇ * 222, ᐃⲆᐃⲆΔⲆᐃ * Ⲇ, 216 * Ⲇ, Ⲇ * 307);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⵠⲆⲆΔ, Δⵠ[ⵠΔᐃᐃΔ], ⵠΔΔⵠⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 143, 146 * Ⲇ);
		Δ.bezierCurveTo(161 * Ⲇ, Ⲇ * 199, Ⲇ * 151, Ⲇ * 245, 138 * Ⲇ, Ⲇ * 266);
		Δ.bezierCurveTo(120.5 * Ⲇ, Ⲇ * 239.5, Ⲇ * 120.5, Ⲇ * 239.5, Ⲇ * 103, Ⲇ * 213);
		Δ.closePath();
		ⵠᐃ(Δ, Ⲇᐃᐃⵠᐃ, Δⵠ[ᐃⲆΔⵠΔ], ⵠⵠⲆⲆⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(283 * Ⲇ, 135 * Ⲇ);
		Δ.bezierCurveTo(277 * Ⲇ, Ⲇ * 176, Ⲇ * 298, 194 * Ⲇ, Ⲇ * 315, Ⲇ * 205);
		Δ.bezierCurveTo(323.5 * Ⲇ, Ⲇ * 175, Ⲇ * 323.5, Ⲇ * 175, 332 * Ⲇ, Ⲇ * 145);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⲆⵠⲆΔⲆ], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(318 * Ⲇ, Ⲇ * 223);
		Δ.bezierCurveTo(Ⲇ * 290, Ⲇ * 195, 271 * Ⲇ, Ⲇ * ⵠᐃⲆᐃΔⵠⵠ, 283 * Ⲇ, 281 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 303.5, Ⲇ * 267, 303.5 * Ⲇ, Ⲇ * 267, 324 * Ⲇ, 253 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[6], ᐃⲆΔⵠⵠ * Ⲇ);
		ⵠΔᐃ(Δ, 222 * Ⲇ, Ⲇ * 199, Ⲇ * 120.74767078498864);
		ⵠᐃ(Δ, ᐃΔᐃⲆⵠ, Δⵠ[ⵠᐃⵠΔ], 40 * Ⲇ);
		ⵠΔᐃ(Δ, 220 * Ⲇ, Ⲇ * 200, 95.44108130150245 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[2], 15 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 220, Ⲇ * 201, 85 * Ⲇ);
		ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[ⵠΔᐃⲆ], 10 * Ⲇ);
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, Ⲇ * 220, Ⲇ * 201, Ⲇ * 82);
		ⵠᐃ(Δ, Δⵠ[9]);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ⵠᐃⲆᐃ * Ⲇ, ⵠᐃⵠΔᐃ * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 63, Ⲇ * 136, 49.193495504995376 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆⵠ], Δⵠ[0], ΔⲆⲆⲆ * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(-ΔⲆⵠⵠ * Ⲇ, -ᐃᐃⲆⵠᐃ * Ⲇ);
		ⵠΔᐃ(Δ, 63 * Ⲇ, 136 * Ⲇ, 49.193495504995376 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃΔᐃⲆ], Δⵠ[ᐃⵠΔⲆ], 4 * Ⲇ);
		ⵠΔᐃ(Δ, 63 * Ⲇ, Ⲇ * 137, 25.632011235952593 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[ΔΔⵠⲆ], Ⲇ * ΔᐃᐃΔ);
		return ᐃⵠ
	}

	function ⲆⵠΔⲆⲆⲆᐃ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 450 * Ⲇ;
		ᐃⵠ.height = 260 * Ⲇ;
		Δ.translate(Ⲇ * 10, 10 * Ⲇ);
		if (ᐃⲆ == 1) {
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(9 * Ⲇ, ⲆⲆⲆᐃⵠ * Ⲇ);
			Δ.bezierCurveTo(381 * Ⲇ, Ⲇ * ΔΔᐃⲆⵠ, Ⲇ * 197, 4.5 * Ⲇ, 385 * Ⲇ, Ⲇ * 4);
			Δ.bezierCurveTo(Ⲇ * 397, 4 * Ⲇ, 401 * Ⲇ, Ⲇ * 4, Ⲇ * 399, 23 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 367, Ⲇ * 27, 367 * Ⲇ, 27 * Ⲇ, 335 * Ⲇ, Ⲇ * 31);
			Δ.bezierCurveTo(366.5 * Ⲇ, Ⲇ * 33.5, Ⲇ * 366.5, Ⲇ * 33.5, 398 * Ⲇ, 36 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 398, Ⲇ * 41.5, Ⲇ * 398, 41.5 * Ⲇ, 398 * Ⲇ, Ⲇ * 47);
			Δ.bezierCurveTo(398 * Ⲇ, Ⲇ * 56, Ⲇ * 399, 56 * Ⲇ, 386 * Ⲇ, Ⲇ * 56);
			Δ.bezierCurveTo(Ⲇ * 200.5, 56.5 * Ⲇ, 200.5 * Ⲇ, 56.5 * Ⲇ, 15 * Ⲇ, Ⲇ * 57);
			Δ.bezierCurveTo(ⵠⵠΔⵠ * Ⲇ, Ⲇ * 55, Ⲇ * ΔᐃⲆᐃⵠ, 52 * Ⲇ, Ⲇ * 4, Ⲇ * 43);
			Δ.bezierCurveTo(4 * Ⲇ, Ⲇ * 30.5, Ⲇ * ᐃⵠⵠⲆ, 30.5 * Ⲇ, ΔⲆⵠΔⲆ * Ⲇ, Ⲇ * 18);
			Δ.bezierCurveTo(ⲆⵠΔᐃΔ * Ⲇ, Ⲇ * 18.5, ΔⲆⲆⲆⲆΔᐃ * Ⲇ, 18.5 * Ⲇ, 28 * Ⲇ, 19 * Ⲇ);
			Δ.bezierCurveTo(18.5 * Ⲇ, ΔΔⵠⵠⲆΔΔ * Ⲇ, Ⲇ * 18.5, Ⲇ * ⲆⵠΔΔⲆ, 9 * Ⲇ, Ⲇ * 5);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠᐃᐃⵠ], Ⲇ * 32);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 5, Ⲇ * 70);
			Δ.bezierCurveTo(ⲆΔⲆᐃᐃ * Ⲇ, 58 * Ⲇ, ⲆⵠⲆᐃ * Ⲇ, Ⲇ * 55, Ⲇ * ΔⲆⵠⵠⲆⵠⲆ, Ⲇ * 57);
			Δ.bezierCurveTo(Ⲇ * 203, 57 * Ⲇ, Ⲇ * 203, Ⲇ * 57, Ⲇ * 389, 57 * Ⲇ);
			Δ.bezierCurveTo(400 * Ⲇ, Ⲇ * 57, 400 * Ⲇ, 59 * Ⲇ, Ⲇ * 400, Ⲇ * 69);
			Δ.bezierCurveTo(400.5 * Ⲇ, Ⲇ * 83.5, 400.5 * Ⲇ, 83.5 * Ⲇ, Ⲇ * 401, Ⲇ * 98);
			Δ.bezierCurveTo(Ⲇ * 402, Ⲇ * 108, Ⲇ * 401, Ⲇ * 108, Ⲇ * 388, 108 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 201.5, 108 * Ⲇ, 201.5 * Ⲇ, 108 * Ⲇ, 15 * Ⲇ, 108 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 1, 106 * Ⲇ, Ⲇ * 5, Ⲇ * 106, ⲆΔⲆᐃᐃ * Ⲇ, 87 * Ⲇ);
			Δ.bezierCurveTo(33 * Ⲇ, 84.5 * Ⲇ, Ⲇ * 33, 84.5 * Ⲇ, Ⲇ * 61, 82 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 33.5, Ⲇ * 76.5, Ⲇ * 33.5, 76.5 * Ⲇ, Ⲇ * 6, Ⲇ * 71);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ], Δⵠ[ⵠⵠΔⲆ], Ⲇ * 32);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(19 * Ⲇ, Ⲇ * 158);
			Δ.bezierCurveTo(Ⲇ * ⵠⲆΔᐃ, Ⲇ * 159, Ⲇ * ΔⲆⵠΔⲆ, Ⲇ * 156, Ⲇ * ⵠⲆⲆⵠ, 118 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 4, Ⲇ * 110, Ⲇ * ⵠⲆⵠⵠⵠ, Ⲇ * 107, 26 * Ⲇ, 109 * Ⲇ);
			Δ.bezierCurveTo(206.5 * Ⲇ, 109 * Ⲇ, Ⲇ * 206.5, Ⲇ * 109, Ⲇ * 387, Ⲇ * 109);
			Δ.bezierCurveTo(Ⲇ * 400, 108 * Ⲇ, Ⲇ * 400, 108 * Ⲇ, Ⲇ * 398, Ⲇ * 127);
			Δ.bezierCurveTo(Ⲇ * 384.5, Ⲇ * 130, Ⲇ * 384.5, 130 * Ⲇ, Ⲇ * 371, 133 * Ⲇ);
			Δ.bezierCurveTo(385.5 * Ⲇ, Ⲇ * 138, Ⲇ * 385.5, Ⲇ * 138, Ⲇ * 400, Ⲇ * 143);
			Δ.bezierCurveTo(Ⲇ * 402, Ⲇ * 156, 402 * Ⲇ, Ⲇ * 162, Ⲇ * 385, Ⲇ * 160);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[3], Ⲇ * 32);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(ⵠⵠⵠᐃⲆ * Ⲇ, 183 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * ᐃΔⵠΔ, Ⲇ * 163, Ⲇ * ΔⲆⲆⲆ, Ⲇ * 158, 28 * Ⲇ, 161 * Ⲇ);
			Δ.bezierCurveTo(207.5 * Ⲇ, Ⲇ * 161, Ⲇ * 207.5, 161 * Ⲇ, 387 * Ⲇ, Ⲇ * 161);
			Δ.bezierCurveTo(Ⲇ * 401, Ⲇ * 159, 400 * Ⲇ, 164 * Ⲇ, Ⲇ * 400, Ⲇ * 177);
			Δ.bezierCurveTo(364.5 * Ⲇ, Ⲇ * 184, 364.5 * Ⲇ, Ⲇ * 184, Ⲇ * 329, Ⲇ * 191);
			Δ.bezierCurveTo(364.5 * Ⲇ, Ⲇ * 192.5, 364.5 * Ⲇ, 192.5 * Ⲇ, Ⲇ * 400, 194 * Ⲇ);
			Δ.bezierCurveTo(403 * Ⲇ, 209 * Ⲇ, 401 * Ⲇ, Ⲇ * 214, 385 * Ⲇ, 213 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 201.5, Ⲇ * 213, 201.5 * Ⲇ, Ⲇ * 213, 18 * Ⲇ, 213 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 3, Ⲇ * 213, ⲆᐃᐃⲆ * Ⲇ, 213 * Ⲇ, Ⲇ * 4, Ⲇ * 198);
			Δ.bezierCurveTo(Ⲇ * 12.5, Ⲇ * 193, 12.5 * Ⲇ, Ⲇ * 193, 21 * Ⲇ, Ⲇ * 188);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠΔ], Δⵠ[ⵠΔΔᐃ], 32 * Ⲇ);
			ⵠΔᐃ(Δ, 41 * Ⲇ, Ⲇ * 30, Ⲇ * 14.7648230602334);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⵠ], Δⵠ[ΔᐃΔⲆ], 32 * Ⲇ);
			ⵠΔᐃ(Δ, Ⲇ * 369, Ⲇ * 30, Ⲇ * 15.556349186104045);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃΔ], Δⵠ[3], 32 * Ⲇ);
			ⵠΔᐃ(Δ, 364 * Ⲇ, 190 * Ⲇ, 15.620499351813308 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆⲆΔΔ], 32 * Ⲇ);
			ⵠΔᐃ(Δ, Ⲇ * 41, Ⲇ * 186, 15.556349186104045 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[3], Ⲇ * 32)
		} else if (ᐃⲆ == ΔΔⵠⲆ) {
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(ΔᐃΔᐃΔ * Ⲇ, Ⲇ * 5);
			Δ.bezierCurveTo(381 * Ⲇ, ᐃᐃⵠⵠ * Ⲇ, Ⲇ * 197, Ⲇ * 4.5, 385 * Ⲇ, Ⲇ * ΔΔΔⵠ);
			Δ.bezierCurveTo(Ⲇ * 397, Ⲇ * ΔΔΔⵠ, 401 * Ⲇ, ΔᐃⲆᐃⵠ * Ⲇ, 399 * Ⲇ, Ⲇ * 23);
			Δ.bezierCurveTo(367 * Ⲇ, 27 * Ⲇ, Ⲇ * 367, 27 * Ⲇ, Ⲇ * 335, 31 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 366.5, 33.5 * Ⲇ, Ⲇ * 366.5, Ⲇ * 33.5, 398 * Ⲇ, Ⲇ * 36);
			Δ.bezierCurveTo(398 * Ⲇ, Ⲇ * 41.5, 398 * Ⲇ, Ⲇ * 41.5, 398 * Ⲇ, 47 * Ⲇ);
			Δ.bezierCurveTo(398 * Ⲇ, 56 * Ⲇ, 399 * Ⲇ, Ⲇ * 56, Ⲇ * 386, Ⲇ * 56);
			Δ.bezierCurveTo(200.5 * Ⲇ, Ⲇ * 56.5, 200.5 * Ⲇ, 56.5 * Ⲇ, 15 * Ⲇ, 57 * Ⲇ);
			Δ.bezierCurveTo(ⵠⲆΔᐃ * Ⲇ, Ⲇ * 55, Ⲇ * ⲆⲆⲆΔ, 52 * Ⲇ, ΔᐃⲆᐃⵠ * Ⲇ, Ⲇ * 43);
			Δ.bezierCurveTo(4 * Ⲇ, 30.5 * Ⲇ, ⲆⲆⲆΔ * Ⲇ, Ⲇ * 30.5, ΔⵠⲆⵠᐃ * Ⲇ, ⲆᐃΔΔᐃ * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * ΔᐃⵠⲆᐃⵠᐃ, 18.5 * Ⲇ, Ⲇ * ΔᐃⵠⵠⲆᐃΔ, 18.5 * Ⲇ, 28 * Ⲇ, 19 * Ⲇ);
			Δ.bezierCurveTo(18.5 * Ⲇ, 12 * Ⲇ, Ⲇ * 18.5, Ⲇ * ΔⲆⵠᐃⵠ, 9 * Ⲇ, ⵠⲆⲆⵠ * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[3], 32 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * ⲆⲆⲆᐃⵠ, Ⲇ * 70);
			Δ.bezierCurveTo(Ⲇ * ⵠᐃⲆᐃ, Ⲇ * 58, Ⲇ * ⲆᐃΔⲆⵠ, Ⲇ * 55, Ⲇ * 17, Ⲇ * 57);
			Δ.bezierCurveTo(Ⲇ * 203, 57 * Ⲇ, Ⲇ * 203, 57 * Ⲇ, Ⲇ * 389, 57 * Ⲇ);
			Δ.bezierCurveTo(400 * Ⲇ, 57 * Ⲇ, Ⲇ * 400, Ⲇ * 59, 400 * Ⲇ, 69 * Ⲇ);
			Δ.bezierCurveTo(400.5 * Ⲇ, 83.5 * Ⲇ, Ⲇ * 400.5, 83.5 * Ⲇ, Ⲇ * 401, 98 * Ⲇ);
			Δ.bezierCurveTo(402 * Ⲇ, 108 * Ⲇ, 401 * Ⲇ, 108 * Ⲇ, Ⲇ * 388, 108 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 201.5, 108 * Ⲇ, Ⲇ * 201.5, 108 * Ⲇ, ⲆⲆⲆᐃΔΔΔ * Ⲇ, Ⲇ * 108);
			Δ.bezierCurveTo(ⵠⲆⵠⲆ * Ⲇ, 106 * Ⲇ, Ⲇ * 5, Ⲇ * 106, Ⲇ * ⲆⵠⲆᐃ, Ⲇ * 87);
			Δ.bezierCurveTo(33 * Ⲇ, Ⲇ * 84.5, 33 * Ⲇ, 84.5 * Ⲇ, Ⲇ * 61, 82 * Ⲇ);
			Δ.bezierCurveTo(33.5 * Ⲇ, 76.5 * Ⲇ, Ⲇ * 33.5, Ⲇ * 76.5, ᐃⲆΔⵠΔ * Ⲇ, Ⲇ * 71);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆⵠⵠⲆ], 32 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(ⲆⵠᐃᐃⲆ * Ⲇ, Ⲇ * 158);
			Δ.bezierCurveTo(Ⲇ * 2, Ⲇ * 159, Ⲇ * 4, Ⲇ * 156, Ⲇ * 5, 118 * Ⲇ);
			Δ.bezierCurveTo(ⵠⵠⵠᐃⲆ * Ⲇ, Ⲇ * 110, 6 * Ⲇ, 107 * Ⲇ, 26 * Ⲇ, 109 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 206.5, 109 * Ⲇ, 206.5 * Ⲇ, Ⲇ * 109, Ⲇ * 387, 109 * Ⲇ);
			Δ.bezierCurveTo(400 * Ⲇ, 108 * Ⲇ, 400 * Ⲇ, Ⲇ * 108, Ⲇ * 398, 127 * Ⲇ);
			Δ.bezierCurveTo(384.5 * Ⲇ, Ⲇ * 130, Ⲇ * 384.5, 130 * Ⲇ, Ⲇ * 371, Ⲇ * 133);
			Δ.bezierCurveTo(Ⲇ * 385.5, Ⲇ * 138, 385.5 * Ⲇ, Ⲇ * 138, Ⲇ * 400, Ⲇ * 143);
			Δ.bezierCurveTo(402 * Ⲇ, 156 * Ⲇ, Ⲇ * 402, 162 * Ⲇ, 385 * Ⲇ, 160 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃΔᐃΔ], Δⵠ[ⵠⵠⲆⲆ], Ⲇ * 32);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(ΔᐃᐃΔ * Ⲇ, Ⲇ * 183);
			Δ.bezierCurveTo(Ⲇ * 1, 163 * Ⲇ, Ⲇ * ΔⲆⲆⲆ, 158 * Ⲇ, 28 * Ⲇ, 161 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 207.5, 161 * Ⲇ, 207.5 * Ⲇ, Ⲇ * 161, 387 * Ⲇ, Ⲇ * 161);
			Δ.bezierCurveTo(Ⲇ * 401, Ⲇ * 159, Ⲇ * 400, 164 * Ⲇ, 400 * Ⲇ, 177 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 364.5, Ⲇ * 184, Ⲇ * 364.5, Ⲇ * 184, 329 * Ⲇ, Ⲇ * 191);
			Δ.bezierCurveTo(Ⲇ * 364.5, Ⲇ * 192.5, Ⲇ * 364.5, 192.5 * Ⲇ, 400 * Ⲇ, 194 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 403, 209 * Ⲇ, Ⲇ * 401, Ⲇ * 214, 385 * Ⲇ, Ⲇ * 213);
			Δ.bezierCurveTo(Ⲇ * 201.5, Ⲇ * 213, Ⲇ * 201.5, 213 * Ⲇ, 18 * Ⲇ, Ⲇ * 213);
			Δ.bezierCurveTo(Ⲇ * ⲆΔⲆⲆ, Ⲇ * 213, 2 * Ⲇ, 213 * Ⲇ, ΔΔΔⵠ * Ⲇ, 198 * Ⲇ);
			Δ.bezierCurveTo(12.5 * Ⲇ, 193 * Ⲇ, 12.5 * Ⲇ, 193 * Ⲇ, 21 * Ⲇ, 188 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠⵠⲆⲆ], Ⲇ * 32);
			ⵠΔᐃ(Δ, Ⲇ * 41, Ⲇ * 30, Ⲇ * 14.7648230602334);
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[3], 32 * Ⲇ);
			ⵠΔᐃ(Δ, Ⲇ * 369, 30 * Ⲇ, 15.556349186104045 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆⲆΔΔ], 32 * Ⲇ);
			ⵠΔᐃ(Δ, 364 * Ⲇ, Ⲇ * 190, Ⲇ * 15.620499351813308);
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[3], 32 * Ⲇ);
			ⵠΔᐃ(Δ, Ⲇ * 41, Ⲇ * 186, Ⲇ * 15.556349186104045);
			ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠΔ], Δⵠ[ⵠᐃᐃΔ], 32 * Ⲇ)
		}
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ⲆⲆⲆⵠΔⵠⲆ, 5 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 381, ᐃⵠΔⲆ * Ⲇ, Ⲇ * 197, 4.5 * Ⲇ, Ⲇ * 385, Ⲇ * 4);
		Δ.bezierCurveTo(Ⲇ * 397, Ⲇ * ᐃᐃⵠΔ, 401 * Ⲇ, Ⲇ * ΔΔⲆΔ, 399 * Ⲇ, Ⲇ * 23);
		Δ.bezierCurveTo(Ⲇ * 367, 27 * Ⲇ, 367 * Ⲇ, 27 * Ⲇ, 335 * Ⲇ, 31 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 366.5, Ⲇ * 33.5, 366.5 * Ⲇ, Ⲇ * 33.5, Ⲇ * 398, 36 * Ⲇ);
		Δ.bezierCurveTo(398 * Ⲇ, Ⲇ * 41.5, 398 * Ⲇ, Ⲇ * 41.5, 398 * Ⲇ, 47 * Ⲇ);
		Δ.bezierCurveTo(398 * Ⲇ, Ⲇ * 56, 399 * Ⲇ, Ⲇ * 56, Ⲇ * 386, 56 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 200.5, Ⲇ * 56.5, Ⲇ * 200.5, 56.5 * Ⲇ, 15 * Ⲇ, Ⲇ * 57);
		Δ.bezierCurveTo(ᐃᐃⵠⵠ * Ⲇ, 55 * Ⲇ, ΔΔᐃⵠΔ * Ⲇ, Ⲇ * 52, 4 * Ⲇ, Ⲇ * 43);
		Δ.bezierCurveTo(Ⲇ * 4, Ⲇ * 30.5, 4 * Ⲇ, 30.5 * Ⲇ, ⵠΔᐃⲆ * Ⲇ, 18 * Ⲇ);
		Δ.bezierCurveTo(ΔᐃⵠⵠⲆᐃΔ * Ⲇ, Ⲇ * 18.5, Ⲇ * 16, 18.5 * Ⲇ, Ⲇ * 28, ΔΔΔⲆᐃ * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 18.5, 12 * Ⲇ, Ⲇ * 18.5, Ⲇ * 12, Ⲇ * 9, Ⲇ * 5);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔΔᐃ], Δⵠ[0], Ⲇ * ⲆⵠⲆᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 5, 70 * Ⲇ);
		Δ.bezierCurveTo(5 * Ⲇ, Ⲇ * 58, Ⲇ * ΔΔⵠⵠ, Ⲇ * 55, Ⲇ * 17, Ⲇ * 57);
		Δ.bezierCurveTo(203 * Ⲇ, 57 * Ⲇ, 203 * Ⲇ, 57 * Ⲇ, Ⲇ * 389, Ⲇ * 57);
		Δ.bezierCurveTo(400 * Ⲇ, Ⲇ * 57, 400 * Ⲇ, 59 * Ⲇ, 400 * Ⲇ, Ⲇ * 69);
		Δ.bezierCurveTo(Ⲇ * 400.5, 83.5 * Ⲇ, Ⲇ * 400.5, 83.5 * Ⲇ, Ⲇ * 401, Ⲇ * 98);
		Δ.bezierCurveTo(402 * Ⲇ, 108 * Ⲇ, 401 * Ⲇ, 108 * Ⲇ, Ⲇ * 388, Ⲇ * 108);
		Δ.bezierCurveTo(201.5 * Ⲇ, Ⲇ * 108, Ⲇ * 201.5, 108 * Ⲇ, 15 * Ⲇ, 108 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 1, Ⲇ * 106, 5 * Ⲇ, Ⲇ * 106, ⲆΔⲆᐃᐃ * Ⲇ, Ⲇ * 87);
		Δ.bezierCurveTo(33 * Ⲇ, Ⲇ * 84.5, 33 * Ⲇ, 84.5 * Ⲇ, Ⲇ * 61, Ⲇ * 82);
		Δ.bezierCurveTo(33.5 * Ⲇ, Ⲇ * 76.5, 33.5 * Ⲇ, Ⲇ * 76.5, 6 * Ⲇ, Ⲇ * 71);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⲆ], Δⵠ[0], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ΔΔΔⲆᐃⵠⵠ, 158 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ΔΔᐃⲆⵠ, 159 * Ⲇ, Ⲇ * 4, Ⲇ * 156, ᐃᐃᐃⲆⲆ * Ⲇ, Ⲇ * 118);
		Δ.bezierCurveTo(Ⲇ * ΔⵠⲆⵠᐃ, Ⲇ * 110, ⲆⲆᐃⵠⵠ * Ⲇ, Ⲇ * 107, Ⲇ * 26, Ⲇ * 109);
		Δ.bezierCurveTo(Ⲇ * 206.5, 109 * Ⲇ, 206.5 * Ⲇ, Ⲇ * 109, Ⲇ * 387, 109 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 400, Ⲇ * 108, 400 * Ⲇ, Ⲇ * 108, Ⲇ * 398, 127 * Ⲇ);
		Δ.bezierCurveTo(384.5 * Ⲇ, 130 * Ⲇ, 384.5 * Ⲇ, 130 * Ⲇ, Ⲇ * 371, 133 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 385.5, 138 * Ⲇ, 385.5 * Ⲇ, Ⲇ * 138, 400 * Ⲇ, 143 * Ⲇ);
		Δ.bezierCurveTo(402 * Ⲇ, 156 * Ⲇ, 402 * Ⲇ, 162 * Ⲇ, Ⲇ * 385, 160 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⵠ], Δⵠ[ⵠⵠⲆΔ], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(4 * Ⲇ, 183 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ⲆⵠⲆ, 163 * Ⲇ, 4 * Ⲇ, 158 * Ⲇ, 28 * Ⲇ, 161 * Ⲇ);
		Δ.bezierCurveTo(207.5 * Ⲇ, Ⲇ * 161, 207.5 * Ⲇ, Ⲇ * 161, 387 * Ⲇ, Ⲇ * 161);
		Δ.bezierCurveTo(401 * Ⲇ, Ⲇ * 159, Ⲇ * 400, 164 * Ⲇ, 400 * Ⲇ, 177 * Ⲇ);
		Δ.bezierCurveTo(364.5 * Ⲇ, Ⲇ * 184, Ⲇ * 364.5, Ⲇ * 184, Ⲇ * 329, Ⲇ * 191);
		Δ.bezierCurveTo(Ⲇ * 364.5, Ⲇ * 192.5, Ⲇ * 364.5, Ⲇ * 192.5, 400 * Ⲇ, Ⲇ * 194);
		Δ.bezierCurveTo(Ⲇ * 403, Ⲇ * 209, 401 * Ⲇ, Ⲇ * 214, Ⲇ * 385, 213 * Ⲇ);
		Δ.bezierCurveTo(201.5 * Ⲇ, Ⲇ * 213, 201.5 * Ⲇ, Ⲇ * 213, ᐃᐃΔΔⵠᐃᐃ * Ⲇ, 213 * Ⲇ);
		Δ.bezierCurveTo(3 * Ⲇ, Ⲇ * 213, ⵠⲆΔᐃ * Ⲇ, Ⲇ * 213, ΔᐃⲆᐃⵠ * Ⲇ, 198 * Ⲇ);
		Δ.bezierCurveTo(12.5 * Ⲇ, Ⲇ * 193, 12.5 * Ⲇ, Ⲇ * 193, 21 * Ⲇ, Ⲇ * 188);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[0], ⲆⵠΔΔⲆ * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 41, 30 * Ⲇ, Ⲇ * 14.7648230602334);
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠΔ], Δⵠ[0], 12 * Ⲇ);
		ⵠΔᐃ(Δ, 369 * Ⲇ, Ⲇ * 30, Ⲇ * 15.556349186104045);
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[0], 12 * Ⲇ);
		ⵠΔᐃ(Δ, 364 * Ⲇ, Ⲇ * 190, 15.620499351813308 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[0], Ⲇ * 12);
		ⵠΔᐃ(Δ, 41 * Ⲇ, 186 * Ⲇ, 15.556349186104045 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ⵠΔΔⲆ], ⵠⲆⲆΔΔ * Ⲇ);
		return ᐃⵠ
	}

	function ΔⵠᐃᐃᐃᐃΔⲆⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 376 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 371;
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 191.633544921875, Ⲇ * 123.98580932617188);
		Δ.bezierCurveTo(215.633544921875 * Ⲇ, 85.98580932617188 * Ⲇ, Ⲇ * 187.633544921875, Ⲇ * 71.98580932617188, 202.633544921875 * Ⲇ, 19.985809326171875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 231.633544921875, 68.98580932617188 * Ⲇ, Ⲇ * 253.633544921875, Ⲇ * 71.98580932617188, 256.633544921875 * Ⲇ, 93.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 306.633544921875, 64.98580932617188 * Ⲇ, 319.633544921875 * Ⲇ, Ⲇ * 61.985809326171875, 350.633544921875 * Ⲇ, Ⲇ * 58.985809326171875);
		Δ.bezierCurveTo(Ⲇ * 280.633544921875, 86.98580932617188 * Ⲇ, 281.633544921875 * Ⲇ, Ⲇ * 106.98580932617188, Ⲇ * 268.633544921875, 130.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(295.633544921875 * Ⲇ, 158.98580932617188 * Ⲇ, 328.633544921875 * Ⲇ, 155.98580932617188 * Ⲇ, 353.633544921875 * Ⲇ, 90.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(371.633544921875 * Ⲇ, Ⲇ * 158.98580932617188, Ⲇ * 337.633544921875, 210.98580932617188 * Ⲇ, Ⲇ * 286.633544921875, Ⲇ * 209.98580932617188);
		Δ.bezierCurveTo(Ⲇ * 323.633544921875, Ⲇ * 230.98580932617188, 317.633544921875 * Ⲇ, Ⲇ * 274.9858093261719, 356.633544921875 * Ⲇ, 305.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 288.633544921875, Ⲇ * 297.9858093261719, Ⲇ * 288.633544921875, 265.9858093261719 * Ⲇ, Ⲇ * 275.633544921875, Ⲇ * 266.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 280.633544921875, Ⲇ * 294.9858093261719, 315.633544921875 * Ⲇ, Ⲇ * 306.9858093261719, 336.633544921875 * Ⲇ, 316.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 295.633544921875, Ⲇ * 318.9858093261719, 264.633544921875 * Ⲇ, Ⲇ * 302.9858093261719, 254.633544921875 * Ⲇ, 289.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(252.633544921875 * Ⲇ, 301.9858093261719 * Ⲇ, 224.633544921875 * Ⲇ, 315.9858093261719 * Ⲇ, 201.633544921875 * Ⲇ, 356.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 195.633544921875, Ⲇ * 313.9858093261719, 195.633544921875 * Ⲇ, Ⲇ * 308.9858093261719, Ⲇ * 196.633544921875, 307.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 197.633544921875, 289.9858093261719 * Ⲇ, Ⲇ * 207.633544921875, Ⲇ * 283.9858093261719, 195.633544921875 * Ⲇ, 258.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 182.633544921875, Ⲇ * 282.9858093261719, Ⲇ * 190.633544921875, Ⲇ * 287.9858093261719, Ⲇ * 193.633544921875, Ⲇ * 297.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 195.633544921875, 306.9858093261719 * Ⲇ, 191.633544921875 * Ⲇ, Ⲇ * 334.9858093261719, 187.633544921875 * Ⲇ, 354.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 165.633544921875, Ⲇ * 320.9858093261719, 138.633544921875 * Ⲇ, 307.9858093261719 * Ⲇ, Ⲇ * 135.633544921875, Ⲇ * 288.9858093261719);
		Δ.bezierCurveTo(110.633544921875 * Ⲇ, Ⲇ * 318.9858093261719, Ⲇ * 68.633544921875, 323.9858093261719 * Ⲇ, 49.633544921875 * Ⲇ, Ⲇ * 320.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 88.633544921875, 308.9858093261719 * Ⲇ, Ⲇ * 108.633544921875, 284.9858093261719 * Ⲇ, 118.633544921875 * Ⲇ, 258.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 86.633544921875, 264.9858093261719 * Ⲇ, Ⲇ * 75.633544921875, 310.9858093261719 * Ⲇ, Ⲇ * 19.633544921875, 304.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 54.633544921875, Ⲇ * 276.9858093261719, Ⲇ * 59.633544921875, Ⲇ * 214.98580932617188, 105.633544921875 * Ⲇ, Ⲇ * 205.98580932617188);
		Δ.bezierCurveTo(14.633544921875 * Ⲇ, 201.98580932617188 * Ⲇ, 24.633544921875 * Ⲇ, 141.98580932617188 * Ⲇ, Ⲇ * 25.633544921875, 82.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(49.633544921875 * Ⲇ, 168.98580932617188 * Ⲇ, 87.633544921875 * Ⲇ, Ⲇ * 141.98580932617188, Ⲇ * 112.633544921875, Ⲇ * 123.98580932617188);
		Δ.bezierCurveTo(95.633544921875 * Ⲇ, Ⲇ * 75.98580932617188, Ⲇ * 70.633544921875, 68.98580932617188 * Ⲇ, 35.633544921875 * Ⲇ, 50.985809326171875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 70.633544921875, 53.985809326171875 * Ⲇ, Ⲇ * 102.633544921875, Ⲇ * 65.98580932617188, Ⲇ * 125.633544921875, 84.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(133.633544921875 * Ⲇ, Ⲇ * 69.98580932617188, 166.633544921875 * Ⲇ, 42.985809326171875 * Ⲇ, 176.633544921875 * Ⲇ, 21.985809326171875 * Ⲇ);
		Δ.bezierCurveTo(185.633544921875 * Ⲇ, 49.985809326171875 * Ⲇ, Ⲇ * 168.633544921875, 95.98580932617188 * Ⲇ, 191.633544921875 * Ⲇ, 121.98580932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠᐃⵠ], Ⲇ * ΔΔⵠⵠⲆΔΔ);
		return ᐃⵠ
	}

	function ⵠΔⲆⵠᐃᐃΔⲆΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 253;
		ᐃⵠ.height = 192 * Ⲇ;
		Δ.save();
		Δ.translate(37 * Ⲇ, Ⲇ * 94);
		ᐃΔⵠ(Δ, -7 * Ⲇ, -ΔΔΔΔᐃⵠⲆ * Ⲇ, Ⲇ * ᐃᐃᐃΔⲆ, Ⲇ * 37, ⵠⲆⵠΔⲆ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]);
		Δ.save();
		Δ.translate(131 * Ⲇ, 94 * Ⲇ);
		ᐃΔⵠ(Δ, -84 * Ⲇ, Ⲇ * -67, Ⲇ * 168, 134 * Ⲇ, ⲆⲆⲆⲆᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⲆⲆΔ], ⲆᐃⲆⲆᐃⲆΔ * Ⲇ);
		Δ.save();
		Δ.translate(223 * Ⲇ, Ⲇ * 94.5);
		ᐃΔⵠ(Δ, -5 * Ⲇ, -18.5 * Ⲇ, Ⲇ * 10, 37 * Ⲇ, 20 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.save();
		Δ.translate(128.5 * Ⲇ, Ⲇ * 170.5);
		ᐃΔⵠ(Δ, Ⲇ * -22.5, -6.5 * Ⲇ, Ⲇ * 45, ⵠⵠᐃΔΔ * Ⲇ, Ⲇ * ⲆⲆⲆⲆᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ]);
		return ᐃⵠ
	}

	function ᐃᐃΔΔⵠⵠΔᐃⵠ() {
		var Ⲇ = ᐃΔΔⲆ;
		var ⵠΔΔⵠⲆⲆᐃⲆⲆ = (new Date).getTime();
		ⵠΔⵠⵠⲆⵠᐃ();
		ᐃⵠΔⲆᐃᐃΔᐃⵠ();
		ᐃᐃ[ⵠ.ⵠⲆΔⲆⲆᐃΔ] = [];
		ᐃᐃ[ⵠ.ⵠⲆΔⲆⲆᐃΔ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠⲆΔⲆⲆᐃΔ][ⵠ.ᐃⵠΔ] = [];
		for (var ᐃⲆ = 0; ⵠ.ⲆⵠⵠΔⲆⵠⵠ > ᐃⲆ; ᐃⲆ++) {
			ᐃᐃ[ⵠ.ⵠⲆΔⲆⲆᐃΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⵠΔⲆΔᐃⲆ(Ⲇ, ΔⵠⲆⵠᐃ + ᐃⲆ, "#59B8CE")));
			ᐃᐃ[ⵠ.ⵠⲆΔⲆⲆᐃΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⵠΔⲆΔᐃⲆ(Ⲇ, ΔΔⲆΔ + ᐃⲆ, "#90DDD9")))
		}
		ᐃᐃ[ⵠ.ⵠΔΔⲆⲆⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠΔΔⲆⲆⲆⵠ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠΔΔⲆⲆⲆⵠ][ⵠ.ᐃⵠΔ] = [];
		for (var ᐃⲆ = 0; ⵠ.ⲆᐃⲆⲆⵠⵠΔ > ᐃⲆ; ᐃⲆ++) {
			ᐃᐃ[ⵠ.ⵠΔΔⲆⲆⲆⵠ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⵠΔⲆΔᐃⲆ(Ⲇ, 4 + ᐃⲆ, ᐃ[81])));
			ᐃᐃ[ⵠ.ⵠΔΔⲆⲆⲆⵠ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⵠΔⲆΔᐃⲆ(Ⲇ, 4 + ᐃⲆ, ᐃ[81])))
		}
		ᐃᐃ[ⵠ.ⲆΔⵠΔⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔⵠΔⵠⲆⵠ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔⵠΔⵠⲆⵠ][ⵠ.ᐃⵠΔ] = [];
		for (var ᐃⲆ = 0; ᐃⲆ < ⵠ.ⲆᐃⲆⲆⵠⵠΔ; ᐃⲆ++) {
			ᐃᐃ[ⵠ.ⲆΔⵠΔⵠⲆⵠ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⵠΔⲆΔᐃⲆ(Ⲇ, ⲆⵠⲆΔⲆ + ᐃⲆ, "#DDCD8A")));
			ᐃᐃ[ⵠ.ⲆΔⵠΔⵠⲆⵠ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⵠΔⲆΔᐃⲆ(Ⲇ, 6 + ᐃⲆ, "#155E57")))
		}
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔᐃᐃ] = [];
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔᐃᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔᐃᐃ][ⵠ.ᐃⵠΔ] = [];
		for (var ᐃⲆ = ⵠᐃⵠ; ᐃⲆ < ⵠ.ΔⵠⲆᐃΔΔᐃ; ᐃⲆ++) {
			ᐃᐃ[ⵠ.ΔᐃⲆⲆΔᐃᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⵠΔⲆΔᐃⲆ(Ⲇ, 4 + ᐃⲆ, "#353326")));
			ᐃᐃ[ⵠ.ΔᐃⲆⲆΔᐃᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⵠΔⲆΔᐃⲆ(Ⲇ, 4 + ᐃⲆ, "#1D2526")))
		}
		ᐃᐃ[ⵠ.ⲆⲆᐃⲆΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆᐃⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔᐃᐃΔ(1.5 * Ⲇ, ΔⲆᐃΔΔ, ["#ee71a9"]));
		ᐃᐃ[ⵠ.ⲆⲆᐃⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔᐃᐃΔ(Ⲇ * 1.5, ΔⲆᐃΔΔ, ["#ee71a9"]));
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ] = [ᐃᐃ[ⵠ.ⲆⲆᐃⲆΔ]];
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][1] = [];
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][2] = [];
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][ᐃΔᐃΔ] = [];
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][ⵠΔᐃⲆ] = [];
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][1][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔᐃᐃΔ(Ⲇ * 1.5, true, ["#e2d63b"]));
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][ⲆⵠΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔᐃᐃΔ(1.5 * Ⲇ, true, ["#e2d63b"]));
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][ⵠᐃᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔᐃᐃΔ(Ⲇ * 1.5, true, ["#309cbd"]));
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][2][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔᐃᐃΔ(1.5 * Ⲇ, ⲆᐃΔᐃⲆ, ["#309cbd"]));
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][3][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔᐃᐃΔ(Ⲇ * 1.5, ᐃΔⲆΔⵠ, ["#cd232d"]));
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][3][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔᐃᐃΔ(Ⲇ * 1.5, true, ["#cd232d"]));
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][ΔΔⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔᐃᐃΔ(1.5 * Ⲇ, true, ["#42b672"]));
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][ⵠΔⲆᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔᐃᐃΔ(Ⲇ * 1.5, true, ["#42b672"]));
		var ΔᐃᐃⵠᐃᐃᐃΔⲆ = ΔⲆᐃ.ⲆⵠΔΔⲆΔΔ("cti", ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[298]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[299]]);
		ΔᐃᐃⵠᐃᐃᐃΔⲆ ? document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("version")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] += "[CTI]" : ⲆΔⲆ = function(ⵠᐃΔΔ) {
			ⵠᐃΔΔ.loaded = ⲆⵠⲆ;
			return ⵠᐃΔΔ
		};
		ᐃᐃ[ⵠ.ΔⵠᐃΔⲆᐃⵠ] = ⲆΔⲆ(ΔⵠⲆⵠΔᐃⲆⵠⲆ());
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔᐃΔΔᐃⲆⵠ(Ⲇ * 1.1, ᐃΔⵠΔᐃ, [ᐃ[86], "#c3d1cb", ᐃ[68]])));
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔᐃΔΔᐃⲆⵠ(.9 * Ⲇ, ᐃⲆⵠᐃⵠ, [ᐃ[86], "#c3d1cb", ᐃ[68]])));
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔᐃΔΔᐃⲆⵠ(Ⲇ * .6, false, [ᐃ[86], "#c3d1cb", ᐃ[68]])));
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔᐃΔΔᐃⲆⵠ(1.1 * Ⲇ, false, [ᐃ[369], "#3c8e88", "#40a39b"])));
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔᐃΔΔᐃⲆⵠ(Ⲇ * .9, false, [ᐃ[369], "#3c8e88", "#40a39b"])));
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔᐃΔΔᐃⲆⵠ(Ⲇ * .6, false, [ᐃ[369], "#3c8e88", "#40a39b"])));
		ᐃᐃ[ⵠ.ⵠᐃΔⲆ] = [];
		ᐃᐃ[ⵠ.ⵠᐃΔⲆ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠᐃΔⲆ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃΔⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠᐃΔΔⵠ(Ⲇ * 1.5, false, [ᐃ[294], ᐃ[546], ᐃ[542]])));
		ᐃᐃ[ⵠ.ⵠᐃΔⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠᐃΔΔⵠ(1.3 * Ⲇ, false, [ᐃ[294], ᐃ[546], ᐃ[542]])));
		ᐃᐃ[ⵠ.ⵠᐃΔⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠᐃΔΔⵠ(Ⲇ * 1.1, false, [ᐃ[294], ᐃ[546], ᐃ[542]])));
		ᐃᐃ[ⵠ.ⵠᐃΔⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠᐃΔΔⵠ(1.5 * Ⲇ, ΔᐃΔΔᐃ, [ᐃ[311], "#1b4444", "#16605a"])));
		ᐃᐃ[ⵠ.ⵠᐃΔⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠᐃΔΔⵠ(1.3 * Ⲇ, Ⲇⵠⵠⵠᐃ, [ᐃ[311], "#1b4444", "#16605a"])));
		ᐃᐃ[ⵠ.ⵠᐃΔⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠᐃΔΔⵠ(Ⲇ * 1.1, ⲆⵠΔΔⵠ, [ᐃ[311], "#1b4444", "#16605a"])));
		ᐃᐃ[ⵠ.ⲆΔⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⲆΔⵠᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔⵠᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆΔⵠᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃⲆΔᐃⵠ(1.1 * Ⲇ, false, [ᐃ[501], ᐃ[305], ᐃ[395]])));
		ᐃᐃ[ⵠ.ⲆΔⵠᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃⲆΔᐃⵠ(.9 * Ⲇ, Ⲇⵠᐃⵠᐃ, [ᐃ[501], ᐃ[305], ᐃ[395]])));
		ᐃᐃ[ⵠ.ⲆΔⵠᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃⲆΔᐃⵠ(.7 * Ⲇ, false, [ᐃ[501], ᐃ[305], ᐃ[395]])));
		ᐃᐃ[ⵠ.ⲆΔⵠᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃⲆΔᐃⵠ(Ⲇ * 1.1, Ⲇⵠᐃⵠᐃ, [ᐃ[311], ᐃ[401], "#57bcb5"])));
		ᐃᐃ[ⵠ.ⲆΔⵠᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃⲆΔᐃⵠ(Ⲇ * .9, false, [ᐃ[311], ᐃ[401], "#57bcb5"])));
		ᐃᐃ[ⵠ.ⲆΔⵠᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃⲆΔᐃⵠ(Ⲇ * .7, ⲆⵠΔΔⵠ, [ᐃ[311], ᐃ[401], "#57bcb5"])));
		ᐃᐃ[ⵠ.ⵠⲆΔᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⵠⲆΔᐃⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⲆᐃΔⵠᐃⲆ;
		ᐃᐃ[ⵠ.ⵠⲆΔᐃⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⵠΔᐃⵠⲆⲆ;
		ᐃᐃ[ⵠ.ᐃⵠⵠⵠᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⵠⵠᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃᐃΔⲆⵠΔⲆ(Ⲇ * .6, [ᐃ[414]]));
		ᐃᐃ[ⵠ.ᐃⵠⵠⵠᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃᐃΔⲆⵠΔⲆ(.6 * Ⲇ, [ᐃ[311]]));
		ᐃᐃ[ⵠ.ᐃⵠΔᐃΔ] = [];
		ᐃᐃ[ⵠ.ᐃⵠΔᐃΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆᐃⵠΔᐃⵠⲆ(.6 * Ⲇ, [ᐃ[244], ᐃ[345]]));
		ᐃᐃ[ⵠ.ᐃⵠΔᐃΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆᐃⵠΔᐃⵠⲆ(.6 * Ⲇ, ["#1b1e30", "#161921"]));
		ᐃᐃ[ⵠ.ⲆΔⵠⲆⵠⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⲆΔⵠⲆⵠⲆᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⲆⵠᐃΔᐃΔ(.6 * Ⲇ, true, [ᐃ[414], "#759e6e", "#55604b", "#7d7252", "#575043"]));
		ᐃᐃ[ⵠ.ⲆΔⵠⲆⵠⲆᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⲆⵠᐃΔᐃΔ(Ⲇ * .6, ᐃᐃⲆᐃⵠ, [ᐃ[311], "#11635e", "#02373e", "#0b524d", "#07423f"]));
		ᐃᐃ[ⵠ.ᐃΔⲆΔᐃᐃⲆ] = [];
		ᐃᐃ[ⵠ.ᐃΔⲆΔᐃᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃΔⵠⵠᐃΔΔ(.6 * Ⲇ, true, [ᐃ[414], "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", ᐃ[193]]));
		ᐃᐃ[ⵠ.ᐃΔⲆΔᐃᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃΔⵠⵠᐃΔΔ(Ⲇ * .6, ᐃᐃⲆᐃⵠ, [ᐃ[311], "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", ᐃ[193]]));
		ᐃᐃ[ⵠ.ᐃᐃΔⵠΔΔᐃ] = [];
		ᐃᐃ[ⵠ.ᐃᐃΔⵠΔΔᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⲆⲆⵠᐃ(.4 * Ⲇ, [ᐃ[414], "#759e6e", "#55604b"]));
		ᐃᐃ[ⵠ.ᐃᐃΔⵠΔΔᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⲆⲆⵠᐃ(.4 * Ⲇ, [ᐃ[311], "#11635e", "#02373e"]));
		ᐃᐃ[ⵠ.ⵠⵠⵠΔΔⲆⲆ] = ⲆΔⲆ(ⵠⲆⵠᐃΔⵠᐃ(Ⲇ * .6, [ᐃ[439]]));
		ᐃᐃ[ⵠ.ⲆⲆᐃⲆᐃⵠᐃ] = ⲆΔⲆ(ⵠⲆⵠᐃΔⵠᐃ(Ⲇ * .6, ["#DBE71C"]));
		ᐃᐃ[ⵠ.ⲆΔⵠΔᐃⲆⵠ] = ⲆΔⲆ(ⵠⲆⵠᐃΔⵠᐃ(.6 * Ⲇ, ["#00BB00"]));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ].push(ΔΔⲆᐃⲆ(Ⲇ * 1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], false, ⵠΔⵠᐃ));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ].push(ΔΔⲆᐃⲆ(1.1 * Ⲇ, [ᐃ[396], "#0f9862", "#0b8750", "#26ab6e"], ⵠⲆⵠᐃⵠ, 0));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ].push(ΔΔⲆᐃⲆ(.9 * Ⲇ, [ᐃ[396], "#0e7d4c", "#258a4d", "#248c4d"], ΔⲆⲆΔⵠ, ⵠᐃⲆⵠ));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ].push(ΔΔⲆᐃⲆ(Ⲇ * .9, [ᐃ[396], ᐃ[559], "#1f7b43", "#1f7b43"], ᐃⵠⲆⲆᐃ, Ⲇⵠᐃ));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ].push(ΔΔⲆᐃⲆ(.7 * Ⲇ, [ᐃ[396], "#124c34", "#0E3D26", "#155136"], ᐃⲆⵠᐃⵠ, 0));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ].push(ΔΔⲆᐃⲆ(.7 * Ⲇ, [ᐃ[396], "#124c34", "#0E3D26", "#155136"], ᐃⵠⲆⲆᐃ, ⲆⲆΔ));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ].push(ΔΔⲆᐃⲆ(Ⲇ * 1.1, [ᐃ[311], ᐃ[410], ᐃ[368], ᐃ[169]], false, 0));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ].push(ΔΔⲆᐃⲆ(Ⲇ * 1.1, [ᐃ[311], ᐃ[410], ᐃ[368], ᐃ[169]], ΔⲆΔⵠⲆ, 0));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ].push(ΔΔⲆᐃⲆ(.9 * Ⲇ, [ᐃ[311], "#0b3534", "#144443", "#174240"], false, 0));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ].push(ΔΔⲆᐃⲆ(.9 * Ⲇ, [ᐃ[311], "#0b3534", "#144443", "#174240"], ΔΔᐃᐃⵠⵠⲆ, ⵠΔⵠᐃ));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ].push(ΔΔⲆᐃⲆ(Ⲇ * .7, [ᐃ[311], "#082b1f", "#073328", "#073327", "#16695f"], false, ⵠΔⵠᐃ));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ].push(ΔΔⲆᐃⲆ(.7 * Ⲇ, [ᐃ[311], "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃᐃⲆⲆⲆⵠⵠ(ⵠⵠΔⲆⲆᐃⲆ(Ⲇ * 1.1, [ᐃ[396], ᐃ[62], ᐃ[480], ᐃ[559], "#08562e", ᐃ[514]], false), ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][0])));
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃᐃⲆⲆⲆⵠⵠ(ⵠⵠΔⲆⲆᐃⲆ(Ⲇ * 1.1, [ᐃ[396], ᐃ[62], ᐃ[480], ᐃ[559], "#08562e", ᐃ[514]], true), ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][1])));
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃᐃⲆⲆⲆⵠⵠ(ⵠⵠΔⲆⲆᐃⲆ(Ⲇ * 1.1, [ᐃ[311], ᐃ[426], ᐃ[351], "#0a3333", ᐃ[281], ᐃ[281]], ᐃΔⵠΔᐃ), ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][Ⲇⵠⵠᐃ])));
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃᐃⲆⲆⲆⵠⵠ(ⵠⵠΔⲆⲆᐃⲆ(Ⲇ * 1.1, [ᐃ[311], ᐃ[426], ᐃ[351], "#0a3333", ᐃ[281], ᐃ[281]], ΔΔⲆΔⵠⲆⲆ), ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][1])));
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃᐃⲆⲆⲆⵠⵠ(ⵠⵠΔⲆⲆᐃⲆ(Ⲇ * .9, [ᐃ[396], ᐃ[62], ᐃ[480], ᐃ[559], ᐃ[514], ᐃ[514]], ᐃΔⵠΔᐃ), ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][ΔΔⵠⲆ])));
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃᐃⲆⲆⲆⵠⵠ(ⵠⵠΔⲆⲆᐃⲆ(.9 * Ⲇ, [ᐃ[396], ᐃ[62], ᐃ[480], ᐃ[559], ᐃ[514], ᐃ[514]], true), ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][2])));
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃᐃⲆⲆⲆⵠⵠ(ⵠⵠΔⲆⲆᐃⲆ(Ⲇ * .9, [ᐃ[311], ᐃ[426], ᐃ[351], "#082b29", ᐃ[446], ᐃ[446]], ΔⲆⲆᐃΔ), ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][ⵠⲆᐃⵠ])));
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃᐃⲆⲆⲆⵠⵠ(ⵠⵠΔⲆⲆᐃⲆ(.9 * Ⲇ, [ᐃ[311], ᐃ[426], ᐃ[351], "#082b29", ᐃ[446], ᐃ[446]], true), ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][3])));
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][ⵠΔⲆᐃ] = ⲆΔⲆ(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][5]);
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][4] = ⲆΔⲆ(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][ΔᐃᐃΔ]);
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][3] = ⲆΔⲆ(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][3]);
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][ⲆΔΔⲆ] = ⲆΔⲆ(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][ⵠⵠΔⵠ]);
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][1] = ⲆΔⲆ(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][ⲆⲆᐃⵠ]);
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][0] = ⲆΔⲆ(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ⵠⲆⵠ][ⲆⲆΔ]);
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][ⲆⲆⲆᐃⵠ] = ⲆΔⲆ(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][ⵠᐃⲆᐃ]);
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][4] = ⲆΔⲆ(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][4]);
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][ΔᐃΔⲆ] = ⲆΔⲆ(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][ⵠⲆᐃΔ]);
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][2] = ⲆΔⲆ(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][ΔⵠⲆⲆ]);
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][1] = ⲆΔⲆ(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][1]);
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][ⵠᐃⵠ] = ⲆΔⲆ(ᐃᐃ[ⵠ.ᐃⲆⲆᐃ][ⵠ.ᐃⵠΔ][0]);
		ᐃᐃ[ⵠ.ᐃᐃΔᐃⵠ] = [];
		ᐃᐃ[ⵠ.ᐃᐃΔᐃⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠΔⲆᐃⲆ, ⲆᐃⲆᐃⵠ(Ⲇ * .75, true, [ᐃ[414], ᐃ[352], ᐃ[414], ᐃ[62], ᐃ[480], ᐃ[62], ᐃ[480]])));
		ᐃᐃ[ⵠ.ᐃᐃΔᐃⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃᐃΔⵠⲆ, ⲆᐃⲆᐃⵠ(.75 * Ⲇ, ΔⲆᐃΔΔ, [ᐃ[311], ᐃ[352], ᐃ[311], ᐃ[338], ᐃ[349], ᐃ[338], ᐃ[349]])));
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆΔ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ΔⲆⵠΔⲆ, ⲆᐃⲆᐃⵠ(.75 * Ⲇ, ⲆᐃΔᐃⲆ, [ᐃ[414], ᐃ[352], ᐃ[414], ᐃ[62], ᐃ[480], ᐃ[71], ᐃ[491]])));
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃᐃⵠΔ, ⲆᐃⲆᐃⵠ(.75 * Ⲇ, true, [ᐃ[311], ᐃ[352], ᐃ[311], ᐃ[338], ᐃ[349], ᐃ[398], ᐃ[227]])));
		ᐃᐃ[ⵠ.ⵠᐃⲆᐃᐃ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⲆᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ΔᐃᐃΔ, ⲆᐃⲆᐃⵠ(Ⲇ * .75, ⲆⲆΔΔΔ, [ᐃ[414], ᐃ[352], ᐃ[414], ᐃ[136], ᐃ[183], ᐃ[179], ᐃ[453]])));
		ᐃᐃ[ⵠ.ⵠᐃⲆᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔΔΔⲆ, ⲆᐃⲆᐃⵠ(.75 * Ⲇ, true, [ᐃ[311], ᐃ[352], ᐃ[311], ᐃ[147], ᐃ[147], ᐃ[295], ᐃ[240]])));
		ᐃᐃ[ⵠ.ⵠᐃⵠΔⲆ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⵠΔⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔⵠᐃⲆ, ⲆᐃⲆᐃⵠ(Ⲇ * .75, ᐃⵠⵠⵠⲆ, [ᐃ[414], ᐃ[352], ᐃ[414], ᐃ[121], ᐃ[190], ᐃ[325], ᐃ[146]])));
		ᐃᐃ[ⵠ.ⵠᐃⵠΔⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(4, ⲆᐃⲆᐃⵠ(.75 * Ⲇ, ΔΔᐃᐃⵠⵠⲆ, [ᐃ[311], ᐃ[352], ᐃ[311], ᐃ[555], ᐃ[186], ᐃ[441], ᐃ[64]])));
		ᐃᐃ[ⵠ.ΔΔᐃᐃᐃ] = [];
		ᐃᐃ[ⵠ.ΔΔᐃᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(4, ⲆᐃⲆᐃⵠ(Ⲇ * .75, true, [ᐃ[414], ᐃ[352], ᐃ[414], ᐃ[121], ᐃ[190], ᐃ[531], ᐃ[98]])));
		ᐃᐃ[ⵠ.ΔΔᐃᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ΔⲆⵠΔⲆ, ⲆᐃⲆᐃⵠ(.75 * Ⲇ, true, [ᐃ[311], ᐃ[352], ᐃ[311], ᐃ[555], ᐃ[186], ᐃ[539], ᐃ[109]])));
		ᐃᐃ[ⵠ.ⲆⵠⲆΔΔ] = [];
		ᐃᐃ[ⵠ.ⲆⵠⲆΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ΔΔⲆⵠⲆⲆΔ(.17 * Ⲇ, ᐃΔⲆΔⵠ, [ᐃ[414], "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", ᐃ[523], "#d6d1d1"])));
		ᐃᐃ[ⵠ.ⲆⵠⲆΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ΔΔⲆⵠⲆⲆΔ(.17 * Ⲇ, ᐃΔⲆΔⵠ, [ᐃ[414], ᐃ[338], ᐃ[349], "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
		ᐃᐃ[ⵠ.Ⲇⵠᐃⵠⵠ] = [];
		ᐃᐃ[ⵠ.Ⲇⵠᐃⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⵠΔΔⲆΔⲆᐃ(.32 * Ⲇ, ⲆⲆⲆⵠⲆ, [ᐃ[414], ᐃ[478], ᐃ[491], "#eb2933", "#57b74e", "#42a54d", ᐃ[390], ᐃ[575]])));
		ᐃᐃ[ⵠ.Ⲇⵠᐃⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔᐃⲆ, ⵠΔΔⲆΔⲆᐃ(Ⲇ * .42, ΔᐃᐃⲆᐃΔΔ, [ᐃ[414], ᐃ[398], ᐃ[227], ᐃ[338], ᐃ[349]])));
		ᐃᐃ[ⵠ.ⲆΔᐃⲆΔ] = [];
		ᐃᐃ[ⵠ.ⲆΔᐃⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠᐃⵠⵠ, ⲆⲆΔⲆᐃΔⲆ(.4 * Ⲇ, ᐃⵠⵠⵠⲆ, [ᐃ[414], ᐃ[342], "#493425", ᐃ[261], "#5e4530", "#473221", "#745840"])));
		ᐃᐃ[ⵠ.ⲆΔᐃⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠᐃⵠⵠ, ⲆⲆΔⲆᐃΔⲆ(.4 * Ⲇ, ⲆⲆⵠⵠΔ, [ᐃ[414], "#0b3d3a", "#092b2a", "#144642", "#082927", ᐃ[216]])));
		ᐃᐃ[ⵠ.ⲆⲆᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆᐃΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔᐃⲆ, ᐃⵠΔⲆᐃΔᐃ(Ⲇ * .4, true, [ᐃ[414], ᐃ[71], ᐃ[491], "#b1afaf", "#493d36", "#332b28"])));
		ᐃᐃ[ⵠ.ⲆⲆᐃΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠⵠΔⲆ, ᐃⵠΔⲆᐃΔᐃ(.4 * Ⲇ, true, [ᐃ[414], ᐃ[398], ᐃ[227], "#5d757e", ᐃ[338], ᐃ[349]])));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔᐃΔ, ΔᐃⲆᐃΔᐃᐃ(.4 * Ⲇ, ᐃⵠⵠⵠⲆ, [ᐃ[414], ᐃ[179], ᐃ[453], ᐃ[179], ᐃ[136], ᐃ[183]])));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠⵠⲆⲆ, ΔᐃⲆᐃΔᐃᐃ(.4 * Ⲇ, ᐃⵠⵠⵠⲆ, [ᐃ[414], ᐃ[295], ᐃ[240], "#54bf96", ᐃ[147], ᐃ[292]])));
		ᐃᐃ[ⵠ.ⲆⲆΔⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔⲆᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⵠⵠΔᐃⲆΔⵠ(.4 * Ⲇ, true, [ᐃ[414], "#6ad9e8", ᐃ[146], "#95e9f5", "#022320", "#011e19", ᐃ[193]])));
		ᐃᐃ[ⵠ.ⲆⲆΔⲆᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⵠⵠΔᐃⲆΔⵠ(.4 * Ⲇ, ᐃᐃΔⵠΔ, [ᐃ[414], ᐃ[441], ᐃ[64], "#93eaf1", ᐃ[555], ᐃ[186]])));
		ᐃᐃ[ⵠ.ⵠⲆⲆΔⲆ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⲆΔⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, Δᐃᐃⵠⵠᐃⵠ(Ⲇ * .4, true, [ᐃ[414], ᐃ[531], ᐃ[98], "#cc81e7", ᐃ[121], ᐃ[190], ᐃ[193]])));
		ᐃᐃ[ⵠ.ⵠⲆⲆΔⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⲆⵠⵠⲆ, Δᐃᐃⵠⵠᐃⵠ(.4 * Ⲇ, true, [ᐃ[414], ᐃ[539], ᐃ[109], "#966de6", ᐃ[555], ᐃ[186]])));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔᐃⲆᐃⵠᐃⵠ(.9 * Ⲇ, false, ["#0d4f35"], 0)));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔᐃⲆᐃⵠᐃⵠ(.9 * Ⲇ, ᐃᐃⲆᐃΔ, ["#0d4f35"], ᐃΔⲆΔ)));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔᐃⲆᐃⵠᐃⵠ(Ⲇ * .9, ΔΔⲆᐃᐃ, ["#0d4f35"], 2)));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔᐃⲆᐃⵠᐃⵠ(.9 * Ⲇ, ΔΔᐃΔⵠ, ["#053339"], 0)));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔᐃⲆᐃⵠᐃⵠ(.9 * Ⲇ, false, ["#053339"], ᐃⵠᐃᐃ)));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔᐃⲆᐃⵠᐃⵠ(.9 * Ⲇ, ⵠᐃΔΔᐃ, ["#053339"], ΔΔᐃⲆⵠ)));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔⲆⵠΔⲆⲆⲆ(.8 * Ⲇ, ["#241301", "#ba6b0e", "#6d3f04"])));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔⲆⵠΔⲆⲆⲆ(Ⲇ * .8, ["#292002", "#ba930e", "#6d5704"])));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔⲆⵠΔⲆⲆⲆ(Ⲇ * .9, ["#052919", "#0a4738", "#06321f"])));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔⲆⵠΔⲆⲆⲆ(Ⲇ * .8, ["#052918", "#08491c", "#063417"])));
		ᐃᐃ[ⵠ.ΔΔⵠΔΔ] = [];
		ᐃᐃ[ⵠ.ΔΔⵠΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI / ᐃⲆⵠᐃ, ⵠᐃⲆΔΔⲆΔ(Ⲇ * .25, ᐃΔΔΔΔ, [ᐃ[414], ᐃ[222], ᐃ[477], ᐃ[479]])));
		ᐃᐃ[ⵠ.ΔΔⵠΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI / 2, ⵠᐃⲆΔΔⲆΔ(Ⲇ * .25, ⵠⲆᐃⵠᐃ, [ᐃ[311], ᐃ[496], ᐃ[513], ᐃ[543]])));
		ᐃᐃ[ⵠ.ΔΔⲆⵠᐃⲆᐃ] = [];
		ᐃᐃ[ⵠ.ΔΔⲆⵠᐃⲆᐃ].push(ⲆΔⲆ(ⲆⵠΔⲆⲆⲆᐃ(.25 * Ⲇ, [ᐃ[222], ᐃ[477], ᐃ[479]], 0)));
		ᐃᐃ[ⵠ.ΔΔⲆⵠᐃⲆᐃ].push(ⲆΔⲆ(ⲆⵠΔⲆⲆⲆᐃ(.25 * Ⲇ, ["#4f371e", "#624d30", "#5e472c", ᐃ[316]], 1)));
		ᐃᐃ[ⵠ.ΔΔⲆⵠᐃⲆᐃ].push(ⲆΔⲆ(ⲆⵠΔⲆⲆⲆᐃ(.25 * Ⲇ, ["#382715", "#4e3c25", "#473620", ᐃ[166]], 2)));
		ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃ] = [];
		ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI / ᐃᐃΔⵠ, ⲆⵠⲆᐃⵠᐃΔ(.25 * Ⲇ, ⲆᐃΔᐃⵠ, [ᐃ[414], ᐃ[222], ᐃ[477], ᐃ[479], ᐃ[464]], 1))));
		ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI / 2, ⲆⵠⲆᐃⵠᐃΔ(.25 * Ⲇ, false, [ᐃ[311], ᐃ[496], ᐃ[513], ᐃ[543], ᐃ[464]], ᐃΔⲆΔ))));
		ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI / ᐃⵠΔⲆ, ⲆⵠⲆᐃⵠᐃΔ(Ⲇ * .25, ⲆᐃΔᐃⵠ, [ᐃ[414], ᐃ[222], ᐃ[477], ᐃ[479], "#4f9246"], 2))));
		ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI / 2, ⲆⵠⲆᐃⵠᐃΔ(.25 * Ⲇ, false, [ᐃ[311], ᐃ[496], ᐃ[513], ᐃ[543], "#4f9246"], ⵠⵠᐃⲆ))));
		ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI / ᐃⲆⵠᐃ, ⲆⵠⲆᐃⵠᐃΔ(Ⲇ * .25, ΔΔⲆᐃᐃ, [ᐃ[414], ᐃ[222], ᐃ[477], ᐃ[479], ᐃ[464], ᐃ[478]], 3))));
		ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI / ⵠᐃᐃⲆ, ⲆⵠⲆᐃⵠᐃΔ(Ⲇ * .25, ⵠⲆᐃⵠⵠ, [ᐃ[311], ᐃ[496], ᐃ[513], ᐃ[543], ᐃ[464], ᐃ[478]], 3))));
		ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI / ⵠⵠΔⵠ, ⲆⵠⲆᐃⵠᐃΔ(.25 * Ⲇ, ⵠⲆⵠⵠΔ, [ᐃ[414], ᐃ[222], ᐃ[477], ᐃ[479], ᐃ[464], "#362513"], 4))));
		ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI / 2, ⲆⵠⲆᐃⵠᐃΔ(Ⲇ * .25, ⲆᐃΔᐃⵠ, [ᐃ[311], ᐃ[496], ᐃ[513], ᐃ[543], ᐃ[464], "#664d2e"], ΔⵠⲆⵠᐃ))));
		ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃ][ⵠ.ⵠⲆⵠ] = [ⲆΔⲆ(ᐃⲆⲆⲆΔ(Ⲇ * 1.2, ⵠᐃⵠⲆᐃ, [ᐃ[396], "#0b8052", ᐃ[442]]))];
		ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃ][ⵠ.ᐃⵠΔ] = [ⲆΔⲆ(ᐃⲆⲆⲆΔ(1.2 * Ⲇ, true, [ᐃ[311], "#084442", ᐃ[218]]))];
		ᐃᐃ[ⵠ.ⲆΔᐃᐃΔⲆΔ] = [];
		ᐃᐃ[ⵠ.ⲆΔᐃᐃΔⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆⲆⲆΔ(.8 * Ⲇ, ᐃᐃⲆᐃⵠ, [ᐃ[396], ᐃ[452], ᐃ[309]]));
		ᐃᐃ[ⵠ.ⲆΔᐃᐃΔⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆⲆⲆΔ(Ⲇ * .8, true, [ᐃ[311], ᐃ[506], ᐃ[534]]));
		ᐃᐃ[ⵠ.ΔⲆⲆᐃᐃ] = [];
		ᐃᐃ[ⵠ.ΔⲆⲆᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⵠⵠᐃΔᐃ(.5 * Ⲇ, ⵠⲆⵠᐃⵠ, [ᐃ[525], ᐃ[428], "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
		ᐃᐃ[ⵠ.ΔⲆⲆᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⵠⵠᐃΔᐃ(.5 * Ⲇ, ᐃⵠⲆⵠᐃ, [ᐃ[311], "#0a3429", ᐃ[513], "#082f25", "#082925", "#0a3630"]));
		ᐃᐃ[ⵠ.Ⲇᐃᐃⵠⵠ] = [];
		ᐃᐃ[ⵠ.Ⲇᐃᐃⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆⵠΔᐃᐃΔ(.5 * Ⲇ, true, [ᐃ[525], ᐃ[198], "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
		ᐃᐃ[ⵠ.Ⲇᐃᐃⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆⵠΔᐃᐃΔ(.5 * Ⲇ, ΔⲆᐃΔΔ, [ᐃ[311], "#2b5254", "#264a46", "#396260", "#244743"]));
		ᐃᐃ[ⵠ.ᐃΔΔⵠᐃ] = [];
		ᐃᐃ[ⵠ.ᐃΔΔⵠᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆΔΔⵠΔⵠⵠ(.5 * Ⲇ, true, [ᐃ[525], "#349970", "#245c45", "#348361", ᐃ[198], ᐃ[523]]));
		ᐃᐃ[ⵠ.ᐃΔΔⵠᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆΔΔⵠΔⵠⵠ(.5 * Ⲇ, true, [ᐃ[311], "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃⵠⵠ] = [];
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆⲆⲆΔ(.8 * Ⲇ, true, [ᐃ[525], "#0b8052", ᐃ[442]]));
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆⲆⲆΔ(.8 * Ⲇ, true, [ᐃ[311], "#084442", ᐃ[218]]));
		ᐃᐃ[ⵠ.ⵠⵠᐃΔⵠⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠⵠᐃΔⵠⵠΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⵠⵠᐃΔᐃ(.5 * Ⲇ, ΔⲆᐃΔΔ, [ᐃ[525], ᐃ[452], ᐃ[309], "#5e5823", "#86683e", "#6e502d"]));
		ᐃᐃ[ⵠ.ⵠⵠᐃΔⵠⵠΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⵠⵠᐃΔᐃ(Ⲇ * .5, true, [ᐃ[311], ᐃ[506], ᐃ[534], "#0c301e", "#062a1f", "#083b2b"]));
		ᐃᐃ[ⵠ.ⲆⲆΔⵠⵠᐃᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔⵠⵠᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆⵠΔᐃᐃΔ(.5 * Ⲇ, true, [ᐃ[525], "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
		ᐃᐃ[ⵠ.ⲆⲆΔⵠⵠᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆⵠΔᐃᐃΔ(Ⲇ * .5, true, [ᐃ[311], "#164a44", "#124244", "#13373b", "#133e3e"]));
		ᐃᐃ[ⵠ.ᐃⵠᐃΔΔᐃᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⵠᐃΔΔᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆΔΔⵠΔⵠⵠ(Ⲇ * .5, true, [ᐃ[525], "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
		ᐃᐃ[ⵠ.ᐃⵠᐃΔΔᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆΔΔⵠΔⵠⵠ(.5 * Ⲇ, true, [ᐃ[311], "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
		ᐃᐃ[ⵠ.ΔΔⵠⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔΔⵠⵠΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆᐃΔΔⲆᐃ(Ⲇ * .45, true, [ᐃ[396], ᐃ[390], "#98171e", "#22a84f", "#1f924a"]));
		ᐃᐃ[ⵠ.ΔΔⵠⵠΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆᐃΔΔⲆᐃ(Ⲇ * .45, true, [ᐃ[396], "#19386e", "#0b2752", "#124252", "#0d3441"]));
		ᐃᐃ[ⵠ.ΔΔΔⵠᐃΔΔ] = ⲆΔⲆ(ᐃⲆᐃΔΔⲆᐃ(Ⲇ * .65, true, ["rgba(14, 48, 34, 0)", ᐃ[439], ᐃ[439], ᐃ[439], ᐃ[439]]));
		ᐃᐃ[ⵠ.ⵠⲆⲆᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⲆᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⲆⲆⵠᐃ(1.4 * Ⲇ, false, [ᐃ[390], ᐃ[575]]));
		ᐃᐃ[ⵠ.ⵠⲆⲆᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⲆⲆⵠᐃ(1.4 * Ⲇ, ᐃⲆⵠᐃⵠ, ["#46195e", "#744188"]));
		ᐃᐃ[ⵠ.ΔⲆⲆΔᐃ] = [];
		ᐃᐃ[ⵠ.ΔⲆⲆΔᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆⵠⵠᐃᐃΔ(.9 * Ⲇ, ΔΔⲆᐃᐃ, [ᐃ[78], "#ec8d35", "#e96132"]));
		ᐃᐃ[ⵠ.ΔⲆⲆΔᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆⵠⵠᐃᐃΔ(Ⲇ * .9, false, ["#efdb7b", "#efe854", "#e8ef62"]));
		ᐃᐃ[ⵠ.ᐃΔⵠᐃᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠᐃᐃⵠΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆⲆⲆᐃⲆⵠᐃ(Ⲇ * .9, false, [ᐃ[62], ᐃ[480]]));
		ᐃᐃ[ⵠ.ᐃΔⵠᐃᐃⵠΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆⲆⲆᐃⲆⵠᐃ(.9 * Ⲇ, ⲆⲆΔΔᐃ, ["#282404", "#0a0a01"]));
		ᐃᐃ[ⵠ.ⵠⲆΔⵠⵠⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⵠⲆΔⵠⵠⵠᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆΔᐃⵠⵠΔΔ(Ⲇ * .9, ᐃᐃⲆᐃΔ, [ᐃ[62], ᐃ[480]]));
		ᐃᐃ[ⵠ.ⵠⲆΔⵠⵠⵠᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆΔᐃⵠⵠΔΔ(.9 * Ⲇ, false, ["#282404", "#0a0a01"]));
		ᐃᐃ[ⵠ.ⵠⵠΔⲆΔⵠⲆ] = [];
		ᐃᐃ[ⵠ.ⵠⵠΔⲆΔⵠⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆⲆᐃⲆⲆⵠΔ(.9 * Ⲇ, false, [ᐃ[78]]));
		ᐃᐃ[ⵠ.ⵠⵠΔⲆΔⵠⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆⲆᐃⲆⲆⵠΔ(.9 * Ⲇ, ᐃᐃⲆᐃΔ, ["#fffabb"]));
		ᐃᐃ[ⵠ.ⲆᐃᐃᐃⵠΔΔ] = [];
		ᐃᐃ[ⵠ.ⲆᐃᐃᐃⵠΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃᐃⵠⲆⵠⲆⲆ(Ⲇ * .9, false, [ᐃ[78]]));
		ᐃᐃ[ⵠ.ⲆᐃᐃᐃⵠΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃᐃⵠⲆⵠⲆⲆ(.9 * Ⲇ, false, ["#fffabb"]));
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔΔⵠ] = [];
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔΔⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆⲆᐃⲆⲆⵠΔ(Ⲇ * .9, ΔⲆⲆΔⵠ, [ᐃ[78]]));
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔΔⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆⲆᐃⲆⲆⵠΔ(Ⲇ * .9, ᐃⲆⵠᐃⵠ, ["rgba(255, 84, 0, 1)"]));
		ᐃᐃ[ⵠ.ΔⵠⲆᐃⲆᐃΔ] = [];
		ᐃᐃ[ⵠ.ΔⵠⲆᐃⲆᐃΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃᐃⵠⲆⵠⲆⲆ(Ⲇ * .9, false, [ᐃ[78]]));
		ᐃᐃ[ⵠ.ΔⵠⲆᐃⲆᐃΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃᐃⵠⲆⵠⲆⲆ(Ⲇ * .9, ⲆⲆΔΔᐃ, ["#ff5704"]));
		ᐃᐃ[ⵠ.ⲆΔΔᐃᐃⵠⵠ] = ⲆΔⲆ(ᐃⵠᐃᐃⵠᐃⵠ(Ⲇ, ᐃ[478], 1));
		ᐃᐃ[ⵠ.ΔᐃⵠᐃⵠᐃΔ] = ⲆΔⲆ(ᐃⵠᐃᐃⵠᐃⵠ(Ⲇ * 1.5, ᐃ[478], 1));
		ᐃᐃ[ⵠ.ΔⵠⲆⲆᐃⵠⵠ] = ⲆΔⲆ(ⲆⵠᐃⲆⲆ(Ⲇ, "Your score:", 15 * Ⲇ, ᐃ[448]));
		ᐃᐃ[ⵠ.ⵠΔⵠⵠⲆᐃΔ] = ⲆΔⲆ(ⵠⵠⲆⵠΔⲆΔⵠⵠ(.9 * Ⲇ, [ᐃ[85], ᐃ[422], "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
		ᐃᐃ[ⵠ.ΔᐃⵠΔᐃΔⲆ] = Δᐃ.ΔᐃⵠΔᐃΔⲆ;
		ᐃᐃ[ⵠ.ⲆⲆΔⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔⵠᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔΔⲆⵠⲆΔ(Ⲇ * 1.5, ⲆⲆⵠⵠΔ, [ᐃ[414], ᐃ[85], ᐃ[422], ᐃ[ⲆⵠⵠⲆⲆⲆᐃ], ᐃ[313], ᐃ[339], ᐃ[34], ᐃ[356], ᐃ[85], ᐃ[422]]));
		ᐃᐃ[ⵠ.ⲆⲆΔⵠᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔΔⲆⵠⲆΔ(1.5 * Ⲇ, true, [ᐃ[311], ᐃ[117], ᐃ[248], ᐃ[90], "#225755", "#07393D", "#07454a", "#0c484d", ᐃ[117], ᐃ[248]]));
		ᐃᐃ[ⵠ.ΔⵠΔⲆΔᐃⲆ] = [];
		ᐃᐃ[ⵠ.ΔⵠΔⲆΔᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃᐃΔΔⵠⲆ(Ⲇ * ⵠⲆᐃⵠ, true, [ᐃ[414], ᐃ[85], ᐃ[422], ᐃ[11], ᐃ[313], ᐃ[339], ᐃ[34], ᐃ[356], ᐃ[85], ᐃ[422]]));
		ᐃᐃ[ⵠ.ΔⵠΔⲆΔᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃᐃΔΔⵠⲆ(Ⲇ * ᐃⵠΔⲆ, ⲆⲆⵠⵠΔ, [ᐃ[311], ᐃ[117], ᐃ[248], ᐃ[90], "#225755", "#07393D", "#07454a", "#0c484d", ᐃ[117], ᐃ[248]]));
		ᐃᐃ[ⵠ.ⲆΔⵠΔⵠⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆΔⵠΔⵠⵠΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆᐃⵠⵠⵠⲆⲆ(Ⲇ * 1.5, ᐃΔΔΔΔ, [ᐃ[414], ᐃ[85], ᐃ[422], ᐃ[ⵠᐃⵠⵠᐃᐃΔ], ᐃ[313], ᐃ[339], ᐃ[34], ᐃ[356], ᐃ[85], ᐃ[422]]));
		ᐃᐃ[ⵠ.ⲆΔⵠΔⵠⵠΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆᐃⵠⵠⵠⲆⲆ(Ⲇ * 1.5, true, [ᐃ[311], ᐃ[117], ᐃ[248], ᐃ[90], "#225755", "#07393D", "#07454a", "#0c484d", ᐃ[117], ᐃ[248]]));
		ᐃᐃ[ⵠ.ΔⵠⲆΔΔ] = [];
		ᐃᐃ[ⵠ.ΔⵠⲆΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔⵠΔⲆⲆⲆ(Ⲇ * 2.2, true, [ᐃ[447], ᐃ[173]]));
		ᐃᐃ[ⵠ.ΔⵠⲆΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔⵠΔⲆⲆⲆ(2.2 * Ⲇ, ⲆⲆΔΔΔ, ["#0B4049", "#08383D"]));
		ᐃᐃ[ⵠ.ᐃΔⵠᐃⵠⵠᐃ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠᐃⵠⵠᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔⵠΔⲆⲆⲆ(2.2 * Ⲇ, true, [ᐃ[452], ᐃ[309]]));
		ᐃᐃ[ⵠ.ᐃΔⵠᐃⵠⵠᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔⵠΔⲆⲆⲆ(2.2 * Ⲇ, ⵠⲆᐃⵠᐃ, [ᐃ[506], ᐃ[534]]));
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃᐃ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(.8 * Ⲇ, ⲆᐃΔᐃⲆ, [ᐃ[447], ᐃ[173]]));
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(.8 * Ⲇ, true, ["#15514F", "#0F3F3D"]));
		ᐃᐃ[ⵠ.ΔᐃᐃⵠⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔᐃᐃⵠⲆⵠΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(Ⲇ * .8, true, [ᐃ[428], "#b17238"]));
		ᐃᐃ[ⵠ.ΔᐃᐃⵠⲆⵠΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(.8 * Ⲇ, true, [ᐃ[94], ᐃ[278]]));
		ᐃᐃ[ⵠ.ΔᐃᐃᐃⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔᐃᐃᐃⵠⲆⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(.8 * Ⲇ, ⲆⲆⵠⵠΔ, ["#3a8214", "#4a9c1e"]));
		ᐃᐃ[ⵠ.ΔᐃᐃᐃⵠⲆⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(Ⲇ * .8, ᐃΔΔΔΔ, ["#032d29", "#044640"]));
		ᐃᐃ[ⵠ.ⲆⲆᐃᐃⵠⵠⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆᐃᐃⵠⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(Ⲇ * .8, true, [ᐃ[198], ᐃ[523]]));
		ᐃᐃ[ⵠ.ⲆⲆᐃᐃⵠⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(Ⲇ * .8, true, ["#1c6161", "#07413f"]));
		ᐃᐃ[ⵠ.ⲆΔⵠᐃᐃⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⲆΔⵠᐃᐃⵠᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(.8 * Ⲇ, ⵠⲆⵠᐃⵠ, ["#328a56", "#449573"]));
		ᐃᐃ[ⵠ.ⲆΔⵠᐃᐃⵠᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(Ⲇ * .8, ⲆⲆⵠⵠΔ, [ᐃ[94], ᐃ[278]]));
		ᐃᐃ[ⵠ.ⵠⵠΔΔΔⲆΔ] = [];
		ᐃᐃ[ⵠ.ⵠⵠΔΔΔⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(.8 * Ⲇ, ⵠⲆⵠᐃⵠ, ["#c98e2f", "#a36b11"]));
		ᐃᐃ[ⵠ.ⵠⵠΔΔΔⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(.8 * Ⲇ, true, [ᐃ[94], ᐃ[278]]));
		ᐃᐃ[ⵠ.ᐃⵠⲆⲆΔΔΔ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⲆⲆΔΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(.8 * Ⲇ, ⲆⲆΔΔΔ, ["#b22419", "#99110e"]));
		ᐃᐃ[ⵠ.ᐃⵠⲆⲆΔΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(Ⲇ * .8, ΔⲆΔⵠⲆ, ["#04323c", "#03222b"]));
		ᐃᐃ[ⵠ.ᐃⵠⲆᐃΔⵠᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⲆᐃΔⵠᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(.8 * Ⲇ, true, ["#13a56d", "#098a58"]));
		ᐃᐃ[ⵠ.ᐃⵠⲆᐃΔⵠᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠᐃⵠⲆ(Ⲇ * .8, true, [ᐃ[94], ᐃ[278]]));
		ᐃᐃ[ⵠ.ᐃΔᐃⲆΔᐃⲆ] = ΔᐃᐃⲆ(1, [{
			f: ΔΔⵠΔⲆⲆⲆ,
			x: Ⲇⵠⵠᐃ,
			y: ᐃⲆΔ,
			a: 1,
			r: ⲆⲆᐃⲆ,
			c: [ᐃ[447], ᐃ[173]]
		}], 1.2, [ᐃ[372], ᐃ[175], ᐃ[43]], .7);
		ᐃᐃ[ⵠ.ᐃᐃᐃⲆᐃΔⲆ] = ΔᐃᐃⲆ(1, [{
			f: ⲆΔᐃⵠⵠΔΔ,
			x: ⵠᐃⲆⵠ,
			y: 0,
			a: ᐃΔΔⲆ,
			r: -Math.PI / 5,
			c: [ᐃ[62], ᐃ[480]]
		}], .3, [ᐃ[372], ᐃ[175], ᐃ[43]], .7);
		ᐃᐃ[ⵠ.ⲆⵠΔΔᐃᐃⵠ] = ΔᐃᐃⲆ(ⲆⵠⲆ, [{
			f: ⵠΔⲆⵠᐃⵠᐃ,
			x: 0,
			y: -ΔΔⵠΔⵠ,
			a: ⲆⵠΔΔ,
			r: 0,
			c: [ᐃ[42], "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
		}], .15, [ᐃ[372], ᐃ[175], ᐃ[43]], .7);
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⵠΔⵠ] = ΔᐃᐃⲆ(.9, [], .3, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, false, ["#7d613e", "#9e7e5a"]));
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, false, ["#084442", "#125e5a"]));
		ᐃᐃ[ⵠ.ⲆΔⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔⵠⲆⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, ΔΔⲆᐃᐃ, [ᐃ[173], ᐃ[447]]));
		ᐃᐃ[ⵠ.ⲆΔⵠⲆⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, ᐃᐃⲆᐃΔ, ["#1b6f6a", "#0d4e4c"]));
		ᐃᐃ[ⵠ.ⲆⲆⵠΔΔⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⵠΔΔⵠΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, false, [ᐃ[309], ᐃ[452]]));
		ᐃᐃ[ⵠ.ⲆⲆⵠΔΔⵠΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, ⲆᐃΔᐃⵠ, [ᐃ[534], ᐃ[506]]));
		ᐃᐃ[ⵠ.ⵠᐃⲆΔⲆᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⲆΔⲆᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, false, [ᐃ[428], "#ec952d"]));
		ᐃᐃ[ⵠ.ⵠᐃⲆΔⲆᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, ⵠⲆᐃⵠⵠ, ["#0e6553", "#094437"]));
		ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, false, ["#375809", "#4b770e"]));
		ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, ᐃΔᐃⲆΔ, ["#09542d", "#0d5d2f"]));
		ᐃᐃ[ⵠ.ΔΔⲆⵠΔΔᐃ] = [];
		ᐃᐃ[ⵠ.ΔΔⲆⵠΔΔᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, false, ["#585809", "#72770e"]));
		ᐃᐃ[ⵠ.ΔΔⲆⵠΔΔᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, ⲆⵠΔΔⵠ, ["#295209", "#305d0d"]));
		ᐃᐃ[ⵠ.ᐃⵠᐃΔⲆᐃᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⵠᐃΔⲆᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, ᐃⲆⵠᐃⵠ, ["#b9b094", "#e2d2c0"]));
		ᐃᐃ[ⵠ.ᐃⵠᐃΔⲆᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, false, ["#126366", "#0d484b"]));
		ᐃᐃ[ⵠ.ⲆᐃΔΔⲆᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⲆᐃΔΔⲆᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, false, ["#3f8662", "#30915d"]));
		ᐃᐃ[ⵠ.ⲆᐃΔΔⲆᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, ΔᐃΔΔᐃ, ["#0e6553", "#094437"]));
		ᐃᐃ[ⵠ.ᐃΔΔⵠⵠΔΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔΔⵠⵠΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, ΔᐃΔΔᐃ, ["#c79153", "#dfa868"]));
		ᐃᐃ[ⵠ.ᐃΔΔⵠⵠΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, false, ["#073927", "#075040"]));
		ᐃᐃ[ⵠ.ΔᐃⲆᐃⲆⵠⵠ] = [];
		ᐃᐃ[ⵠ.ΔᐃⲆᐃⲆⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, false, ["#768b5b", "#819984"]));
		ᐃᐃ[ⵠ.ΔᐃⲆᐃⲆⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, ᐃᐃⲆᐃΔ, ["#0c4540", "#0e5153"]));
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠΔΔⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠΔΔⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, false, ["#567465", "#627c6e"]));
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠΔΔⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, ᐃΔᐃⲆΔ, ["#073927", "#075040"]));
		ᐃᐃ[ⵠ.ᐃΔᐃⲆΔⲆΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔᐃⲆΔⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, ⲆⲆΔΔᐃ, ["#996b3a", "#bf956b"]));
		ᐃᐃ[ⵠ.ᐃΔᐃⲆΔⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, false, ["#0e6553", "#094437"]));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠᐃᐃᐃ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠⵠᐃᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, false, ["#7a634a", "#a68f77"]));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠᐃᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, false, ["#1e4d43", "#113c32"]));
		ᐃᐃ[ⵠ.ΔΔⵠᐃᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ΔΔⵠᐃᐃΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, false, ["#99403c", "#bc796c"]));
		ᐃᐃ[ⵠ.ΔΔⵠᐃᐃΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, false, ["#1e434d", "#11303c"]));
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⵠⵠⲆ] = [];
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⵠⵠⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(.9 * Ⲇ, ⵠⲆⵠⵠΔ, ["#88504e", "#b3857c"]));
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⵠⵠⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, ΔᐃΔΔᐃ, ["#253b41", "#162930"]));
		ᐃᐃ[ⵠ.ᐃΔᐃⵠΔᐃΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔᐃⵠΔᐃΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, ᐃⲆⵠᐃⵠ, ["#0f8870", "#23af93"]));
		ᐃᐃ[ⵠ.ᐃΔᐃⵠΔᐃΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, false, ["#032829", "#083233"]));
		ᐃᐃ[ⵠ.ⵠΔⲆΔΔΔⵠ] = [];
		ᐃᐃ[ⵠ.ⵠΔⲆΔΔΔⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, false, ["#618a20", "#84a74e"]));
		ᐃᐃ[ⵠ.ⵠΔⲆΔΔΔⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆⵠⲆ(Ⲇ * .9, false, ["#1f4632", "#335d47"]));
		ᐃᐃ[ⵠ.ΔⵠΔⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠᐃⲆΔⵠⵠ(Ⲇ * 1.2, ΔΔⲆΔⵠⲆⲆ, [ᐃ[414], ᐃ[62], ᐃ[480], "#756e52", "#663f22", "#9e9577"]));
		ᐃᐃ[ⵠ.ΔⵠΔⲆⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠᐃⲆΔⵠⵠ(Ⲇ * 1.2, ⲆⲆⵠⵠΔ, [ᐃ[311], ᐃ[338], "#072322", "#3e706b", "#123d3f", "#4e827c"]));
		ᐃᐃ[ⵠ.ⵠⵠΔⲆΔ] = [], ᐃᐃ[ⵠ.ⵠⵠΔⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠΔΔⲆᐃⵠΔ(Ⲇ * 1, ⵠⲆᐃⵠᐃ, [ᐃ[414], ᐃ[113], ᐃ[63], ᐃ[518], ᐃ[63], ᐃ[113]]));
		ᐃᐃ[ⵠ.ⵠⵠΔⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠΔΔⲆᐃⵠΔ(Ⲇ * ⵠⲆⵠⲆ, true, [ᐃ[311], ᐃ[338], ᐃ[ᐃᐃⵠⲆΔⲆᐃ], ᐃ[40], ᐃ[338], "#174444"]));
		ᐃᐃ[ⵠ.ΔΔⵠΔᐃ] = [], ᐃᐃ[ⵠ.ΔΔⵠΔᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆΔΔⲆΔⵠⵠ(Ⲇ * 1, true, [ᐃ[414], ᐃ[73], ᐃ[36], ᐃ[473], ᐃ[141], ᐃ[22], ᐃ[365]]));
		ᐃᐃ[ⵠ.ΔΔⵠΔᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆΔΔⲆΔⵠⵠ(Ⲇ * 1, true, [ᐃ[311], ᐃ[401], ᐃ[505], ᐃ[505], "#4bbcb4", ᐃ[112], ᐃ[419]]));
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃᐃ] = [], ᐃᐃ[ⵠ.ᐃᐃⵠᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⵠⵠⲆⵠΔΔ(Ⲇ * 1, true, [ᐃ[414], ᐃ[260], ᐃ[98], ᐃ[528], ᐃ[429], ᐃ[252]]));
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⵠⵠⲆⵠΔΔ(Ⲇ * ⲆⲆⲆᐃ, true, [ᐃ[311], ᐃ[539], ᐃ[109], "#8f65de", "#7f55cc", "#9d77e6"]));
		ᐃᐃ[ⵠ.ᐃⵠⵠᐃΔ] = [], ᐃᐃ[ⵠ.ᐃⵠⵠᐃΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⵠⵠⲆⵠΔΔ(Ⲇ * 1, true, [ᐃ[414], ᐃ[557], ᐃ[67], ᐃ[273], ᐃ[195], ᐃ[406]]));
		ᐃᐃ[ⵠ.ᐃⵠⵠᐃΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⵠⵠⲆⵠΔΔ(Ⲇ * 1, true, [ᐃ[311], ᐃ[156], "#214c4b", ᐃ[157], "#295957", "#1f5955"]));
		ᐃᐃ[ⵠ.ⵠⲆⵠᐃΔ] = [], ᐃᐃ[ⵠ.ⵠⲆⵠᐃΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃΔΔΔᐃᐃ(1 * Ⲇ, ⲆⲆⵠⵠΔ, [ᐃ[414], ᐃ[574], ᐃ[80], ᐃ[243], ᐃ[189], ᐃ[289]]));
		ᐃᐃ[ⵠ.ⵠⲆⵠᐃΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃΔΔΔᐃᐃ(1 * Ⲇ, ᐃᐃⲆᐃⵠ, [ᐃ[311], ᐃ[157], "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
		ᐃᐃ[ⵠ.ᐃⵠΔⵠΔ] = [], ᐃᐃ[ⵠ.ᐃⵠΔⵠΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃΔⲆⲆⵠΔ(.8 * Ⲇ, true, [ᐃ[414], ᐃ[491], ᐃ[71], ᐃ[113], ᐃ[63], ᐃ[518], ᐃ[63], ᐃ[113]]));
		ᐃᐃ[ⵠ.ᐃⵠΔⵠΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃΔⲆⲆⵠΔ(Ⲇ * .8, true, [ᐃ[311], ᐃ[227], ᐃ[398], ᐃ[338], ᐃ[17], ᐃ[40], ᐃ[338], "#174444"]));
		ᐃᐃ[ⵠ.ΔⲆⲆᐃⲆ] = [], ᐃᐃ[ⵠ.ΔⲆⲆᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆⲆᐃΔᐃΔⵠ(.8 * Ⲇ, ⵠᐃⵠⲆᐃ, [ᐃ[414], "#69685a", "#9c9683", ᐃ[574], ᐃ[80], ᐃ[243], ᐃ[189], ᐃ[289]]));
		ᐃᐃ[ⵠ.ΔⲆⲆᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆⲆᐃΔᐃΔⵠ(.8 * Ⲇ, ΔᐃᐃⲆᐃΔΔ, [ᐃ[311], "#1a3732", "#1e544c", ᐃ[157], "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
		ᐃᐃ[ⵠ.ᐃⲆΔΔᐃ] = [], ᐃᐃ[ⵠ.ᐃⲆΔΔᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆⵠᐃᐃⲆⲆ(Ⲇ * .8, ᐃⵠⵠⵠⲆ, [ᐃ[414], "#7d8b90", "#9facaa", ᐃ[73], ᐃ[36], ᐃ[473], ᐃ[141], ᐃ[22], ᐃ[365]]));
		ᐃᐃ[ⵠ.ᐃⲆΔΔᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆⵠᐃᐃⲆⲆ(Ⲇ * .8, ⲆⲆΔΔΔ, [ᐃ[311], "#2c4b55", "#546d77", ᐃ[401], ᐃ[505], ᐃ[505], "#4bbcb4", ᐃ[112], ᐃ[419]]));
		ᐃᐃ[ⵠ.ΔᐃⵠΔᐃ] = [], ᐃᐃ[ⵠ.ΔᐃⵠΔᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔⲆⲆⲆⵠ(.8 * Ⲇ, ᐃᐃΔⵠΔ, [ᐃ[414], ᐃ[557], ᐃ[71], ᐃ[557], ᐃ[67], ᐃ[273], ᐃ[195], ᐃ[406]]));
		ᐃᐃ[ⵠ.ΔᐃⵠΔᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔⲆⲆⲆⵠ(.8 * Ⲇ, ᐃΔΔΔΔ, [ᐃ[311], ᐃ[227], ᐃ[398], ᐃ[156], "#214c4b", ᐃ[157], "#295957", "#1f5955"]));
		ᐃᐃ[ⵠ.ΔⲆⲆⲆΔ] = [], ᐃᐃ[ⵠ.ΔⲆⲆⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔⲆⲆⲆⵠ(Ⲇ * .8, ᐃᐃΔⵠΔ, [ᐃ[414], ᐃ[557], ᐃ[71], ᐃ[260], ᐃ[98], ᐃ[528], ᐃ[429], ᐃ[252]]));
		ᐃᐃ[ⵠ.ΔⲆⲆⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔⲆⲆⲆⵠ(.8 * Ⲇ, ᐃΔⲆΔⵠ, [ᐃ[311], ᐃ[227], ᐃ[398], ᐃ[539], ᐃ[109], "#8f65de", "#7f55cc", "#9d77e6"]));
		ᐃᐃ[ⵠ.ᐃᐃΔΔᐃⵠⲆ] = [];
		ᐃᐃ[ⵠ.ᐃᐃΔΔᐃⵠⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃᐃᐃΔΔⲆᐃ(Ⲇ * 1.5, true, [ᐃ[414], ᐃ[503], ᐃ[425], "#644928", ᐃ[425], "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
		ᐃᐃ[ⵠ.ᐃᐃΔΔᐃⵠⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃᐃᐃΔΔⲆᐃ(Ⲇ * 1.5, ᐃⵠⵠⵠⲆ, [ᐃ[311], ᐃ[338], ᐃ[17], ᐃ[40], ᐃ[338], "#174444"]));
		ᐃᐃ[ⵠ.ΔⵠⲆᐃᐃᐃⵠ] = [];
		ᐃᐃ[ⵠ.ΔⵠⲆᐃᐃᐃⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃᐃᐃΔΔⲆᐃ(Ⲇ * 1, ᐃⵠᐃΔⵠ, [ᐃ[545], ᐃ[545], ᐃ[535], ᐃ[535], ᐃ[545], ᐃ[535]]));
		ᐃᐃ[ⵠ.ΔⵠⲆᐃᐃᐃⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃᐃᐃΔΔⲆᐃ(Ⲇ * ⲆⲆΔⵠ, ⵠⲆⵠⵠΔ, [ᐃ[53], ᐃ[53], "#0b342b", "#0b342b", ᐃ[53], "#0b342b"]));
		ᐃᐃ[ⵠ.ⲆᐃⵠⵠⲆΔⲆ] = [];
		ᐃᐃ[ⵠ.ⲆᐃⵠⵠⲆΔⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔᐃᐃ(1.5 * Ⲇ, true, [ᐃ[414], ᐃ[557], ᐃ[67], ᐃ[273], ᐃ[406], ᐃ[195]]));
		ᐃᐃ[ⵠ.ⲆᐃⵠⵠⲆΔⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔᐃᐃ(1.5 * Ⲇ, true, [ᐃ[311], ᐃ[156], "#214c4b", ᐃ[157], "#164542", "#295957"]));
		ᐃᐃ[ⵠ.ⲆΔⲆΔΔᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⲆΔⲆΔΔᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔᐃᐃ(Ⲇ * ΔΔΔᐃ, false, [ᐃ[545], ᐃ[545], ᐃ[535], ᐃ[535], ᐃ[545], ᐃ[535]]));
		ᐃᐃ[ⵠ.ⲆΔⲆΔΔᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔᐃᐃ(ᐃⵠⵠⵠ * Ⲇ, false, [ᐃ[307], ᐃ[307], ᐃ[106], ᐃ[106], ᐃ[307], ᐃ[106]]));
		ᐃᐃ[ⵠ.ΔⲆΔΔⵠΔΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆΔΔⵠΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔᐃᐃ(Ⲇ * 1.5, ᐃΔⲆΔⵠ, [ᐃ[414], ᐃ[260], ᐃ[98], ᐃ[528], ᐃ[429], ᐃ[252]]));
		ᐃᐃ[ⵠ.ΔⲆΔΔⵠΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔᐃᐃ(Ⲇ * 1.5, ⲆⲆⲆⵠⲆ, [ᐃ[311], ᐃ[539], ᐃ[109], "#8f65de", "#7f55cc", "#9d77e6"]));
		ᐃᐃ[ⵠ.ᐃⲆⵠⵠⲆΔⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠⵠⲆΔⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔᐃᐃ(Ⲇ * 1, ΔΔⲆᐃᐃ, [ᐃ[545], ᐃ[545], ᐃ[535], ᐃ[535], ᐃ[545], ᐃ[535]]));
		ᐃᐃ[ⵠ.ᐃⲆⵠⵠⲆΔⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔᐃᐃ(1 * Ⲇ, false, [ᐃ[307], ᐃ[307], ᐃ[106], ᐃ[106], ᐃ[307], ᐃ[106]]));
		ᐃᐃ[ⵠ.ᐃΔⲆᐃⲆⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔⲆᐃⲆⲆⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔᐃⲆΔᐃⲆⵠ(Ⲇ * 1.5, true, [ᐃ[414], ᐃ[574], ᐃ[80], ᐃ[243], "#9a8636", ᐃ[289]]));
		ᐃᐃ[ⵠ.ᐃΔⲆᐃⲆⲆⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔᐃⲆΔᐃⲆⵠ(1.5 * Ⲇ, true, [ᐃ[311], ᐃ[157], "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
		ᐃᐃ[ⵠ.ⵠᐃⲆΔⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⲆΔⲆⵠΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔᐃⲆΔᐃⲆⵠ(Ⲇ * 1, ᐃΔᐃᐃΔ, [ᐃ[545], ᐃ[545], ᐃ[535], ᐃ[535], ᐃ[545], ᐃ[535]]));
		ᐃᐃ[ⵠ.ⵠᐃⲆΔⲆⵠΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔᐃⲆΔᐃⲆⵠ(Ⲇ * 1, Ⲇⵠⵠⵠᐃ, [ᐃ[307], ᐃ[307], ᐃ[106], ᐃ[106], ᐃ[307], ᐃ[106]]));
		ᐃᐃ[ⵠ.ⲆΔᐃᐃΔⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆΔᐃᐃΔⵠΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⲆᐃⵠᐃΔᐃ(Ⲇ * 1.5, ⲆⲆⵠⵠΔ, [ᐃ[414], ᐃ[73], ᐃ[36], ᐃ[473], ᐃ[141], ᐃ[22], ᐃ[365]]));
		ᐃᐃ[ⵠ.ⲆΔᐃᐃΔⵠΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⲆᐃⵠᐃΔᐃ(1.5 * Ⲇ, true, [ᐃ[311], ᐃ[401], ᐃ[505], ᐃ[505], "#4bbcb4", ᐃ[112], ᐃ[419]]));
		ᐃᐃ[ⵠ.ΔΔᐃⵠⵠⲆⲆ] = [];
		ᐃᐃ[ⵠ.ΔΔᐃⵠⵠⲆⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⲆᐃⵠᐃΔᐃ(ΔΔⵠ * Ⲇ, ΔⲆⲆᐃΔ, [ᐃ[545], ᐃ[545], ᐃ[535], ᐃ[535], ᐃ[545], ᐃ[535]]));
		ᐃᐃ[ⵠ.ΔΔᐃⵠⵠⲆⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⲆᐃⵠᐃΔᐃ(ⵠᐃᐃ * Ⲇ, ΔΔᐃΔⵠ, [ᐃ[307], ᐃ[307], ᐃ[106], ᐃ[106], ᐃ[307], ᐃ[106]]));
		ᐃᐃ[ⵠ.ᐃⵠⵠΔⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⵠΔⵠ][2] = ⲆΔⲆ(ⲆⲆΔⵠΔΔⵠ(Ⲇ * .5, true, "#4d0000 #4d0000 #4d0000 #4d0000 #4d0000 #614627 #614627 #c4a23a #c4a23a #c4a23a".split(" ")));
		ᐃᐃ[ⵠ.ᐃⵠⵠΔⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆⲆΔⵠΔΔⵠ(Ⲇ * .5, ᐃⵠⲆⵠᐃ, [ᐃ[545], "#9e8838", ᐃ[47], ᐃ[503], ᐃ[92], ᐃ[92], ᐃ[92], ᐃ[47], ᐃ[47], ᐃ[47]]));
		ᐃᐃ[ⵠ.ᐃⵠⵠΔⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆⲆΔⵠΔΔⵠ(Ⲇ * .5, true, [ᐃ[307], "#266161", ᐃ[551], ᐃ[266], ᐃ[389], ᐃ[389], ᐃ[389], ᐃ[551], ᐃ[551], ᐃ[551]]));
		ᐃᐃ[ⵠ.ⲆᐃⵠⵠⲆ] = [];
		ᐃᐃ[ⵠ.ⲆᐃⵠⵠⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⵠΔⵠᐃⵠᐃ(Ⲇ * .5, [ᐃ[545], "#9e8838", ᐃ[47], ᐃ[503], ᐃ[92]]));
		ᐃᐃ[ⵠ.ⲆᐃⵠⵠⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⵠΔⵠᐃⵠᐃ(.5 * Ⲇ, [ᐃ[307], "#266161", ᐃ[551], ᐃ[266], ᐃ[389]]));
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔⲆⲆⵠⵠΔ(Ⲇ * .9, [ᐃ[396], "#ee97bf", ᐃ[193], ᐃ[352], ᐃ[478]]));
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔⲆⲆⵠⵠΔ(Ⲇ * .9, [ᐃ[311], "#4d1b59", "#5d3f77", "#220e26", ᐃ[478]]));
		ᐃᐃ[ⵠ.ⲆᐃᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆᐃᐃⵠΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI, ᐃⵠΔⵠᐃⲆⲆ(Ⲇ * .9, [ᐃ[352], ᐃ[181], ᐃ[181], ᐃ[181], ᐃ[193], ᐃ[352]])));
		ᐃᐃ[ⵠ.ⲆᐃᐃⵠΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI, ᐃⵠΔⵠᐃⲆⲆ(Ⲇ * .9, [ᐃ[311], "#401d49", ᐃ[181], "#401d49", ᐃ[193], ᐃ[352]])));
		ᐃᐃ[ⵠ.ΔⵠᐃΔΔᐃΔ] = ⲆΔⲆ(ⵠⲆΔΔᐃᐃΔᐃⲆ(.6 * Ⲇ, [ᐃ[193]]));
		ᐃᐃ[ⵠ.ⵠΔⲆⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⵠΔⲆⲆᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃᐃΔΔΔᐃⵠ(Ⲇ * 1.1, [ᐃ[396], "#231f20", ᐃ[181], "#7d7679", ᐃ[478]]));
		ᐃᐃ[ⵠ.ⵠΔⲆⲆᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃᐃΔΔΔᐃⵠ(Ⲇ * 1.1, [ᐃ[311], "#1e181c", ᐃ[420], "#3e3e4a", ᐃ[478]]));
		ᐃᐃ[ⵠ.ⵠΔᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ⵠΔᐃΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆⲆⵠᐃⲆᐃᐃ(.6 * Ⲇ, true, [ᐃ[358], ᐃ[30], ᐃ[205], ᐃ[164]]));
		ᐃᐃ[ⵠ.ⵠΔᐃΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆⲆⵠᐃⲆᐃᐃ(.6 * Ⲇ, ⵠᐃⵠⲆᐃ, ["#478e8b", "#327e73", ᐃ[463], "#08403f"]));
		ᐃᐃ[ⵠ.ᐃΔⲆΔⲆ] = [];
		ᐃᐃ[ⵠ.ᐃΔⲆΔⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆᐃᐃⵠΔⲆΔ(Ⲇ * .6, ⲆᐃΔᐃⲆ, [ᐃ[205], ᐃ[164], ᐃ[358], ᐃ[30]]));
		ᐃᐃ[ⵠ.ᐃΔⲆΔⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆᐃᐃⵠΔⲆΔ(.6 * Ⲇ, true, [ᐃ[463], "#08403f", "#478e8b", "#327e73"]));
		ᐃᐃ[ⵠ.ⵠΔⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠΔⵠⲆⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆᐃⲆⵠΔᐃⲆ(Ⲇ * .63, true, [ᐃ[251], "#dee7e7", "#b8cccb", ᐃ[478], "#e3e8e8"]));
		ᐃᐃ[ⵠ.ⵠΔⵠⲆⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆᐃⲆⵠΔᐃⲆ(.63 * Ⲇ, true, [ᐃ[463], "#368981", "#1c635e", "#7bbab4", "#469e95"]));
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆΔᐃΔⵠΔΔ(.6 * Ⲇ, true, [ᐃ[251], "#c5232c", "#84191d", "#a72027", ᐃ[440], ᐃ[476]]));
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆΔᐃΔⵠΔΔ(.6 * Ⲇ, ᐃᐃΔⵠΔ, [ᐃ[463], "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
		ᐃᐃ[ⵠ.ᐃⵠⵠⲆⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⵠⲆⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⲆⵠΔⵠΔⵠ(.6 * Ⲇ, true, [ᐃ[251], "#0f964c", "#106e3b", "#138344", ᐃ[440], ᐃ[476], "#C5232C", "#A92D2D"]));
		ᐃᐃ[ⵠ.ᐃⵠⵠⲆⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⲆⵠΔⵠΔⵠ(.6 * Ⲇ, ᐃⵠⲆⵠᐃ, [ᐃ[463], ᐃ[410], ᐃ[368], ᐃ[169], "#66aaa3", "#469e95", "#292f66", "#202559"]));
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠᐃΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆΔⵠΔΔ(Ⲇ * .42, ΔⲆᐃΔΔ, [ᐃ[414], "#515C57", "#3A4942", "#68736F", ᐃ[178], ᐃ[499], ᐃ[ⲆΔᐃΔⵠ], "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠᐃΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆΔⵠΔΔ(.42 * Ⲇ, ⲆⲆΔΔΔ, [ᐃ[414], "#485E66", ᐃ[221], "#60757D", ᐃ[178], ᐃ[499], ᐃ[20], ᐃ[221], "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
		ᐃᐃ[ⵠ.ⲆⵠᐃΔⲆⵠⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⵠᐃΔⲆⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠⲆᐃⵠΔⵠ(Ⲇ * .9, ["#e4c027"]));
		ᐃᐃ[ⵠ.ⲆⵠᐃΔⲆⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠⲆᐃⵠΔⵠ(Ⲇ * .9, ["#D8E57F"]));
		ᐃᐃ[ⵠ.ⵠⲆᐃΔΔᐃᐃ] = [];
		ᐃᐃ[ⵠ.ⵠⲆᐃΔΔᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⵠᐃΔⲆⲆΔ(Ⲇ * .42, true, [ᐃ[414], "#515C57", "#3A4942", "#68736F", ᐃ[178], ᐃ[499], ᐃ[20], "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
		ᐃᐃ[ⵠ.ⵠⲆᐃΔΔᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⵠᐃΔⲆⲆΔ(Ⲇ * .42, true, [ᐃ[414], "#485E66", ᐃ[221], "#60757D", ᐃ[178], ᐃ[499], ᐃ[ⲆΔⲆⲆⵠ], ᐃ[221], "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆⵠΔΔ] = ⲆΔⲆ(ΔΔⵠᐃⲆⵠᐃⲆⵠ(Ⲇ * ᐃΔΔⲆ, [ᐃ[85], ᐃ[422], "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
		ᐃᐃ[ⵠ.ⵠᐃΔⵠᐃΔⵠ] = [];
		ᐃᐃ[ⵠ.ⵠᐃΔⵠᐃΔⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⵠΔⵠⲆⲆⲆ(.5 * Ⲇ, true, [ᐃ[414], ᐃ[71], ᐃ[491], "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
		ᐃᐃ[ⵠ.ⵠᐃΔⵠᐃΔⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⵠΔⵠⲆⲆⲆ(Ⲇ * .5, ΔⲆᐃΔΔ, [ᐃ[414], ᐃ[398], ᐃ[227], "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃⵠⵠⵠ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃⵠⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆⲆᐃⲆⲆΔⲆ(Ⲇ * .5, true, [ᐃ[414], ᐃ[71], ᐃ[491], "#c0c0c0", "#4f4f4f", "#6c6c6c", ᐃ[256]]));
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃⵠⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆⲆᐃⲆⲆΔⲆ(Ⲇ * .5, ᐃΔⲆΔⵠ, [ᐃ[414], ᐃ[398], ᐃ[227], "#60757d", "#152229", "#0c1113", "#0c1113"]));
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆⲆⲆⲆ] = ⲆΔⲆ(ⲆᐃΔⵠᐃΔΔᐃⲆ(Ⲇ * .8, ⲆⲆΔΔΔ, [ᐃ[491], ᐃ[71]]));
		ᐃᐃ[ⵠ.ΔⲆⵠⲆⲆᐃᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⲆΔᐃⵠⵠΔΔ,
			x: 0,
			y: 0,
			a: ᐃΔⵠΔ,
			r: Math.PI / 2.5,
			c: [ᐃ[62], ᐃ[480]]
		}], .3, ["#494949", "#5b5858", "#3d3b3b"], ᐃⲆⲆ);
		ᐃᐃ[ⵠ.ΔΔΔΔⲆ] = [];
		ᐃᐃ[ⵠ.ΔΔΔΔⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔΔⲆⵠΔⲆ(Ⲇ * ᐃΔΔⲆ, ⲆⲆⵠⵠΔ, [ᐃ[414], ᐃ[310], ᐃ[527], "#261912", "#eee6c5", "#d1c599", ᐃ[310], ᐃ[527], "#86509b", "#703a99"]));
		ᐃᐃ[ⵠ.ΔΔΔΔⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔΔⲆⵠΔⲆ(1 * Ⲇ, ΔᐃᐃⲆᐃΔΔ, [ᐃ[414], ᐃ[139], ᐃ[216], "#052120", "#104d5b", "#0b424f", ᐃ[139], ᐃ[216], "#2b0b4a", "#23073e"]));
		ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠⵠ] = [];
		ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔᐃΔᐃⲆⵠΔ(Ⲇ * 1, ⲆⲆⲆⵠⲆ, [ᐃ[414], ᐃ[310], ᐃ[527], "#261912", "#eee6c5", "#d1c599", ᐃ[310], ᐃ[527], "#86509b", "#703a99"]));
		ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔᐃΔᐃⲆⵠΔ(1 * Ⲇ, ᐃᐃΔⵠΔ, [ᐃ[414], ᐃ[139], ᐃ[216], "#052120", "#104d5b", "#083b37", ᐃ[139], ᐃ[216], "#2b0b4a", "#23073e"]));
		ᐃᐃ[ⵠ.ⵠᐃⲆΔᐃ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⲆΔᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠᐃⵠⵠ, ⲆᐃⲆᐃᐃᐃᐃ(Ⲇ * .7, ᐃᐃⲆᐃⵠ, [ᐃ[414], ᐃ[387], ᐃ[444], ᐃ[214], ᐃ[547], ᐃ[547], ᐃ[247], ᐃ[285], ᐃ[507]])));
		ᐃᐃ[ⵠ.ⵠᐃⲆΔᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⲆᐃⲆᐃᐃᐃᐃ(.7 * Ⲇ, ⲆⲆΔΔΔ, [ᐃ[414], ᐃ[139], ᐃ[216], ᐃ[ⵠⵠⵠΔΔ], "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
		ᐃᐃ[ⵠ.ᐃⵠᐃⵠᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⵠᐃⵠᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⵠᐃⵠⲆΔⵠΔ(Ⲇ * .7, true, [ᐃ[414], ᐃ[387], ᐃ[444], "#765d42", ᐃ[285], ᐃ[507]])));
		ᐃᐃ[ⵠ.ᐃⵠᐃⵠᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(Ⲇⵠᐃᐃ, ⵠᐃⵠⲆΔⵠΔ(Ⲇ * .7, ᐃΔΔΔΔ, [ᐃ[414], ᐃ[139], ᐃ[216], "#0e4d49", "#1a6c67", "#07322f"])));
		ᐃᐃ[ⵠ.ΔⲆⵠᐃᐃ] = [];
		ᐃᐃ[ⵠ.ΔⲆⵠᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⵠᐃⵠⵠⵠΔᐃ(.65 * Ⲇ, true, [ᐃ[414], ᐃ[62], ᐃ[480], ᐃ[285], ᐃ[507], "#7a7575", "#454749", "#8c8787", ᐃ[71], ᐃ[491], "#aaa6a6"])));
		ᐃᐃ[ⵠ.ΔⲆⵠᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⲆΔⲆⲆ, ⵠᐃⵠⵠⵠΔᐃ(.65 * Ⲇ, true, [ᐃ[414], ᐃ[338], ᐃ[349], "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", ᐃ[398], ᐃ[227], "#546e78"])));
		ᐃᐃ[ⵠ.ⵠⲆᐃⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⵠⲆᐃⲆᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔΔΔ, ⵠᐃⲆⵠΔⵠⵠ(.67 * Ⲇ, true, [ᐃ[414], ᐃ[136], ᐃ[183], "#a69e39", "#9c8828", "#bab143", ᐃ[179], ᐃ[453], "#d2ca59"])));
		ᐃᐃ[ⵠ.ⵠⲆᐃⲆᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠⵠⲆᐃ, ⵠᐃⲆⵠΔⵠⵠ(Ⲇ * .67, true, [ᐃ[311], ᐃ[147], ᐃ[292], "#33916d", "#197c62", "#3eab81", ᐃ[295], ᐃ[240], "#52be94"])));
		ᐃᐃ[ⵠ.ⵠᐃⲆᐃΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⲆᐃΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ᐃΔΔΔᐃᐃⵠ(.67 * Ⲇ, true, [ᐃ[414], ᐃ[121], ᐃ[190], "#4ba8b4", "#198a82", "#6ccad7", ᐃ[325], ᐃ[146], "#7bd9e6"])));
		ᐃᐃ[ⵠ.ⵠᐃⲆᐃΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔᐃⲆ, ᐃΔΔΔᐃᐃⵠ(.67 * Ⲇ, true, [ᐃ[414], ᐃ[555], ᐃ[186], "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", ᐃ[64], ᐃ[441]])));
		ᐃᐃ[ⵠ.ⲆΔᐃⲆⲆ] = [];
		ᐃᐃ[ⵠ.ⲆΔᐃⲆⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ᐃⲆⵠΔᐃᐃⲆ(Ⲇ * .67, true, [ᐃ[414], ᐃ[121], ᐃ[190], "#9443b1", "#6f1988", "#a752c6", "#9e35be", ᐃ[98], ᐃ[531]])));
		ᐃᐃ[ⵠ.ⲆΔᐃⲆⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ᐃⲆⵠΔᐃᐃⲆ(Ⲇ * .67, ⲆⲆⲆⵠⲆ, [ᐃ[414], ᐃ[555], ᐃ[186], "#6e43bf", "#673fa4", "#784bcc", "#845bc6", ᐃ[109], "#966be7"])));
		ᐃᐃ[ⵠ.ᐃΔΔᐃⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔΔᐃⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔΔΔ, ΔΔΔⲆⵠᐃΔ(1 * Ⲇ, ᐃᐃΔⵠΔ, [ᐃ[414], "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
		ᐃᐃ[ⵠ.ᐃΔΔᐃⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔΔΔ, ΔΔΔⲆⵠᐃΔ(ΔᐃⵠⲆ * Ⲇ, true, [ᐃ[414], "#1c2026", ᐃ[186], "#7dc6d9", "#6cbacf", ᐃ[364], "#49b2cf", ᐃ[364]])));
		ᐃᐃ[ⵠ.ΔᐃΔⵠⲆ] = [];
		ᐃᐃ[ⵠ.ΔᐃΔⵠⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠⵠⲆᐃ, ⲆⲆΔᐃⲆ(Ⲇ * 1, true, [ᐃ[414], ᐃ[62], ᐃ[480], ᐃ[71], ᐃ[491]])));
		ᐃᐃ[ⵠ.ΔᐃΔⵠⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⲆⵠⵠⲆ, ⲆⲆΔᐃⲆ(Ⲇ * 1, ΔᐃᐃⲆᐃΔΔ, [ᐃ[311], ᐃ[147], ᐃ[292], ᐃ[398], ᐃ[227]])));
		ᐃᐃ[ⵠ.ᐃΔⲆⲆⲆ] = [];
		ᐃᐃ[ⵠ.ᐃΔⲆⲆⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔᐃΔ, ⵠᐃᐃⵠᐃᐃΔ(.5 * Ⲇ, ᐃΔⲆΔⵠ, [ᐃ[414], ᐃ[71], ᐃ[491]])));
		ᐃᐃ[ⵠ.ᐃΔⲆⲆⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⵠᐃᐃⵠᐃᐃΔ(Ⲇ * .5, true, [ᐃ[311], ᐃ[398], ᐃ[227]])));
		ᐃᐃ[ⵠ.ΔΔᐃⲆΔ] = [];
		ᐃᐃ[ⵠ.ΔΔᐃⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ΔᐃⲆⵠᐃⲆΔ(Ⲇ * 1, ⵠⲆᐃⵠᐃ, [ᐃ[414], "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
		ᐃᐃ[ⵠ.ΔΔᐃⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ΔᐃⲆⵠᐃⲆΔ(Ⲇ * ᐃΔⵠΔ, true, [ᐃ[414], "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
		ᐃᐃ[ⵠ.ᐃⵠⵠΔᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⵠΔᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⲆⲆΔᐃⲆ(1 * Ⲇ, true, [ᐃ[414], ᐃ[136], ᐃ[183], ᐃ[179], ᐃ[453]])));
		ᐃᐃ[ⵠ.ᐃⵠⵠΔᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⲆⲆΔᐃⲆ(1 * Ⲇ, true, [ᐃ[414], ᐃ[338], ᐃ[349], ᐃ[295], ᐃ[240]])));
		ᐃᐃ[ⵠ.ᐃⲆᐃⵠⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆᐃⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⲆⲆΔᐃⲆ(ᐃΔΔⲆ * Ⲇ, ⲆᐃΔᐃⲆ, [ᐃ[414], ᐃ[121], ᐃ[190], ᐃ[325], ᐃ[146]])));
		ᐃᐃ[ⵠ.ᐃⲆᐃⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠᐃⵠⵠ, ⲆⲆΔᐃⲆ(1 * Ⲇ, ᐃΔⲆΔⵠ, [ᐃ[414], ᐃ[555], ᐃ[186], ᐃ[441], ᐃ[64]])));
		ᐃᐃ[ⵠ.ⵠᐃᐃᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⵠᐃᐃᐃⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠᐃᐃΔ, ⲆⲆΔᐃⲆ(Ⲇ * 1, ΔⲆΔⵠⲆ, [ᐃ[414], ᐃ[121], ᐃ[190], ᐃ[531], ᐃ[98]])));
		ᐃᐃ[ⵠ.ⵠᐃᐃᐃⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⲆⲆΔᐃⲆ(Ⲇ * 1, ΔⲆᐃΔΔ, [ᐃ[414], ᐃ[555], ᐃ[186], ᐃ[539], ᐃ[109]])));
		ᐃᐃ[ⵠ.ⲆΔᐃⵠⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔᐃⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆᐃⵠⲆΔΔᐃ(.55 * Ⲇ, ΔΔᐃΔⵠ, [ᐃ[492], ᐃ[515], ᐃ[47], "#3a3a3a"]));
		ᐃᐃ[ⵠ.ⲆΔᐃⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆᐃⵠⲆΔΔᐃ(Ⲇ * .55, false, ["#080707", "#133d3c", ᐃ[551], "#1b2529"]));
		ᐃᐃ[ⵠ.ⲆᐃΔᐃⵠΔᐃ] = [];
		ᐃᐃ[ⵠ.ⲆᐃΔᐃⵠΔᐃ].push(ⲆΔⲆ(ⲆᐃⵠⲆΔΔᐃ(Ⲇ * .8, false, [ᐃ[492], ᐃ[515], ᐃ[47], "#3a3a3a"])));
		ᐃᐃ[ⵠ.ⲆᐃΔᐃⵠΔᐃ].push(ⲆΔⲆ(ⲆᐃⵠⲆΔΔᐃ(.8 * Ⲇ, false, [ᐃ[492], "#9f7d17", "#dab33c", "#474545"])));
		ᐃᐃ[ⵠ.ⲆᐃΔᐃⵠΔᐃ].push(ⲆΔⲆ(ⲆᐃⵠⲆΔΔᐃ(Ⲇ * .8, ⵠᐃΔΔᐃ, [ᐃ[492], "#73590d", "#a88a2c", "#2a2828"])));
		ᐃᐃ[ⵠ.ᐃⲆⲆⲆᐃᐃⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⲆⲆᐃᐃⵠ].push(ᐃᐃ[ⵠ.ⲆᐃΔᐃⵠΔᐃ][0]);
		ᐃᐃ[ⵠ.ᐃⲆⲆⲆᐃᐃⵠ].push(ᐃᐃ[ⵠ.ⲆᐃΔᐃⵠΔᐃ][0]);
		ᐃᐃ[ⵠ.ᐃⲆⲆⲆᐃᐃⵠ].push(ᐃᐃ[ⵠ.ⲆᐃΔᐃⵠΔᐃ][0]);
		ᐃᐃ[ⵠ.ᐃⵠᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ᐃⵠᐃΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠⵠⵠⲆⲆⵠ(Ⲇ * .06, ΔΔⲆᐃᐃ, [ᐃ[492], ᐃ[47], ᐃ[515]]));
		ᐃᐃ[ⵠ.ᐃⵠᐃΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠⵠⵠⲆⲆⵠ(.06 * Ⲇ, false, [ᐃ[311], ᐃ[551], "#133d3c"]));
		ᐃᐃ[ⵠ.ᐃⵠⲆΔΔⲆⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⲆΔΔⲆⲆ].push(ⲆΔⲆ(ΔⵠⵠⵠⲆⲆⵠ(.08 * Ⲇ, ᐃᐃⲆᐃΔ, [ᐃ[492], ᐃ[47], ᐃ[515]])));
		ᐃᐃ[ⵠ.ᐃⵠⲆΔΔⲆⲆ].push(ⲆΔⲆ(ΔⵠⵠⵠⲆⲆⵠ(Ⲇ * .08, false, [ᐃ[492], "#e2bd4e", "#a38018"])));
		ᐃᐃ[ⵠ.ᐃⵠⲆΔΔⲆⲆ].push(ⲆΔⲆ(ΔⵠⵠⵠⲆⲆⵠ(.08 * Ⲇ, ⵠⲆⵠⵠΔ, [ᐃ[492], "#b0902e", "#634d09"])));
		ᐃᐃ[ⵠ.ΔᐃⲆⵠᐃ] = ΔᐃᐃⲆ(1.5, [{
			f: ⵠΔᐃΔᐃᐃⵠ,
			x: ⲆⲆΔ,
			y: Ⲇⵠⵠᐃ,
			a: ⲆⵠΔΔ,
			r: 0,
			c: [ᐃ[492], "#178a99", "#0a6372", "#03282e"]
		}], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9);
		ᐃᐃ[ⵠ.ⲆⵠΔⲆⲆΔᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⵠΔⲆⲆΔᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔᐃⵠⲆᐃ(.8 * Ⲇ, true, [ᐃ[343], ᐃ[579]]));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆⲆΔᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔᐃⵠⲆᐃ(.8 * Ⲇ, true, ["#98ede3", "#94f2e7"]));
		ᐃᐃ[ⵠ.ⲆⵠᐃⲆᐃⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⵠᐃⲆᐃⲆᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠΔⵠΔᐃΔ(.8 * Ⲇ, ⵠⲆⵠᐃⵠ, [ᐃ[580], ᐃ[550], "#418ba5", "#59b8ce"]));
		ᐃᐃ[ⵠ.ⲆⵠᐃⲆᐃⲆᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠΔⵠΔᐃΔ(.8 * Ⲇ, true, [ᐃ[419], ᐃ[112], "#3fa097", "#90ddd9"]));
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆΔⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆΔⵠΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆⲆᐃᐃΔᐃ(Ⲇ * .8, ⲆⲆΔΔΔ, [ᐃ[580], ᐃ[550]]));
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆΔⵠΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆⲆᐃᐃΔᐃ(.8 * Ⲇ, ᐃⵠⲆⵠᐃ, [ᐃ[112], ᐃ[398]]));
		ᐃᐃ[ⵠ.ΔⵠᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ΔⵠᐃΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆⵠⲆⲆⵠᐃ(Ⲇ * .8, true, [ᐃ[343], ᐃ[579], "#1c2528", ᐃ[580], ᐃ[550], "#959da0", "#697072", "#929da0", "#afb9bc"]));
		ᐃᐃ[ⵠ.ΔⵠᐃΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆⵠⲆⲆⵠᐃ(.8 * Ⲇ, true, ["#98ede3", "#94f2e7", ᐃ[227], ᐃ[419], ᐃ[112], ᐃ[398], "#2d484f", "#546d6d", "#597b84"]));
		ᐃᐃ[ⵠ.ΔⵠⲆⲆⵠⵠᐃ] = [];
		ᐃᐃ[ⵠ.ΔⵠⲆⲆⵠⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔⵠᐃΔⲆⲆ;
		ᐃᐃ[ⵠ.ΔⵠⲆⲆⵠⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⲆⲆᐃΔᐃᐃ;
		ᐃᐃ[ⵠ.ΔΔΔⲆⵠΔᐃ] = [];
		ᐃᐃ[ⵠ.ΔΔΔⲆⵠΔᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃΔΔⲆᐃⵠ;
		ᐃᐃ[ⵠ.ΔΔΔⲆⵠΔᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⵠⲆⲆΔᐃΔ;
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆⵠΔΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆⵠΔΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆᐃⵠⵠᐃⲆⲆ;
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆⵠΔΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠᐃᐃᐃΔΔⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⵠⲆⲆᐃⲆⲆ;
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⲆⵠᐃⲆΔΔ;
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠⲆΔΔ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠⲆΔΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔΔΔΔΔⲆΔ;
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠⲆΔΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃΔΔⲆⵠΔ;
		ᐃᐃ[ⵠ.Ⲇᐃⵠⵠᐃ] = [];
		ᐃᐃ[ⵠ.Ⲇᐃⵠⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔΔⲆⲆᐃΔ;
		ᐃᐃ[ⵠ.Ⲇᐃⵠⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⲆΔΔⵠΔⲆ;
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠᐃΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆᐃⲆᐃⵠᐃⲆ;
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⵠΔⲆⵠⲆⲆ;
		ᐃᐃ[ⵠ.ᐃΔᐃⵠᐃ] = [];
		ᐃᐃ[ⵠ.ᐃΔᐃⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔⵠⵠⲆⲆΔ;
		ᐃᐃ[ⵠ.ᐃΔᐃⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⵠⵠΔⵠᐃⲆ;
		ᐃᐃ[ⵠ.ΔⵠΔᐃΔΔᐃ] = [];
		ᐃᐃ[ⵠ.ΔⵠΔᐃΔΔᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔᐃΔⵠᐃΔ;
		ᐃᐃ[ⵠ.ΔⵠΔᐃΔΔᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⵠΔᐃⲆⲆⲆ;
		ᐃᐃ[ⵠ.Δⵠⵠⵠᐃ] = [];
		ᐃᐃ[ⵠ.Δⵠⵠⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⲆᐃᐃᐃⲆΔ;
		ᐃᐃ[ⵠ.Δⵠⵠⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔⵠⲆᐃⵠⲆ;
		ᐃᐃ[ⵠ.ΔⵠⵠⲆⲆⵠⵠ] = [];
		ᐃᐃ[ⵠ.ΔⵠⵠⲆⲆⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔⲆⵠᐃⲆⵠ;
		ᐃᐃ[ⵠ.ΔⵠⵠⲆⲆⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⵠⲆⵠⲆΔⵠ;
		ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠ] = [];
		ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⲆΔΔⵠΔᐃ;
		ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆᐃΔᐃᐃⵠᐃ;
		ᐃᐃ[ⵠ.ⵠⲆΔⲆᐃⵠⵠ] = [];
		ᐃᐃ[ⵠ.ⵠⲆΔⲆᐃⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⲆᐃΔΔⲆⵠ;
		ᐃᐃ[ⵠ.ⵠⲆΔⲆᐃⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⵠΔⵠΔⵠⲆ;
		ᐃᐃ[ⵠ.ᐃⲆᐃΔⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆᐃΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔᐃⲆⲆᐃⵠᐃ;
		ᐃᐃ[ⵠ.ᐃⲆᐃΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⵠΔⲆⵠΔⵠ;
		ᐃᐃ[ⵠ.ⲆΔⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆΔⲆⵠΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⵠΔᐃⲆᐃⵠ;
		ᐃᐃ[ⵠ.ⲆΔⲆⵠΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠΔᐃⲆⲆΔ;
		ᐃᐃ[ⵠ.ΔΔⵠᐃⵠΔⵠ] = Δᐃ.ΔΔⵠᐃⵠΔⵠ;
		ᐃᐃ[ⵠ.ᐃᐃⲆⲆΔ] = [], ᐃᐃ[ⵠ.ᐃᐃⲆⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠⲆⵠⵠⲆΔ(Ⲇ * .75, true, [ᐃ[414], ᐃ[113], ᐃ[63], ᐃ[518]]));
		ᐃᐃ[ⵠ.ᐃᐃⲆⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠⲆⵠⵠⲆΔ(Ⲇ * .75, true, [ᐃ[311], ᐃ[338], ᐃ[17], ᐃ[40]]));
		ᐃᐃ[ⵠ.ΔΔΔᐃⵠΔⵠ] = ⲆΔⲆ(ᐃⵠⲆΔⲆΔⵠ(.3 * Ⲇ, [ᐃ[391], ᐃ[111]], ᐃⲆΔ));
		ᐃᐃ[ⵠ.ⲆⵠⵠⵠⵠⵠⲆ] = ⲆΔⲆ(ᐃⵠⲆΔⲆΔⵠ(Ⲇ * .3, [ᐃ[391], ᐃ[111]], 1));
		ᐃᐃ[ⵠ.ᐃΔⲆΔΔⲆⵠ] = ⲆΔⲆ(ᐃΔⵠⵠⵠᐃⵠⲆΔ(Ⲇ * .6, [ᐃ[391], ᐃ[111]]));
		ᐃᐃ[ⵠ.ΔᐃᐃⲆᐃᐃΔ] = [];
		ᐃᐃ[ⵠ.ΔᐃᐃⲆᐃᐃΔ].push(ⲆΔⲆ(ⲆᐃΔᐃΔ(Ⲇ * .7, [ᐃ[391], ᐃ[111], "#165b2b", ᐃ[113], ᐃ[111]], 0)));
		ᐃᐃ[ⵠ.ΔᐃᐃⲆᐃᐃΔ].push(ⲆΔⲆ(ⲆᐃΔᐃΔ(.7 * Ⲇ, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], ⵠΔⵠᐃ)));
		ᐃᐃ[ⵠ.ΔᐃᐃⲆᐃᐃΔ].push(ⲆΔⲆ(ⲆᐃΔᐃΔ(.7 * Ⲇ, ["#092a14", "#186733", "#124a23", ᐃ[113], "#1b6735"], ΔᐃⲆⲆ)));
		ᐃᐃ[ⵠ.ⵠΔΔᐃⵠⵠⵠ] = [];
		var ⵠⵠ = ⲆΔⲆ(ⲆᐃΔᐃΔ(.7 * Ⲇ, [ᐃ[337], ᐃ[122], ᐃ[337], "#2e2410", ᐃ[122]], ⵠⵠᐃ));
		ᐃᐃ[ⵠ.ⵠΔΔᐃⵠⵠⵠ].push(ⵠⵠ);
		ᐃᐃ[ⵠ.ⵠΔΔᐃⵠⵠⵠ].push(ⵠⵠ);
		ᐃᐃ[ⵠ.ⵠΔΔᐃⵠⵠⵠ].push(ⵠⵠ);
		ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠᐃᐃ] = [];
		ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠᐃᐃ].push(ⲆΔⲆ(ⲆᐃΔᐃΔ(.7 * Ⲇ, [ᐃ[391], ᐃ[111], "#165b2b", ᐃ[113], ᐃ[111]], 1)));
		ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠᐃᐃ].push(ⲆΔⲆ(ⲆᐃΔᐃΔ(.7 * Ⲇ, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
		ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠᐃᐃ].push(ⲆΔⲆ(ⲆᐃΔᐃΔ(Ⲇ * .7, ["#092a14", "#186733", "#124a23", ᐃ[113], "#1b6735"], 1)));
		ᐃᐃ[ⵠ.ⵠΔⲆⵠⲆᐃⵠ] = ⲆΔⲆ(ⵠᐃΔΔⲆⲆᐃΔᐃ(.3 * Ⲇ, [ᐃ[193]]));
		ᐃᐃ[ⵠ.ΔᐃⲆΔᐃⵠⲆ] = ⲆΔⲆ(ⵠΔⲆⵠΔᐃΔΔⲆ(Ⲇ * .3, [ᐃ[193]]));
		ᐃᐃ[ⵠ.ᐃᐃᐃⲆⵠΔᐃ] = ⲆΔⲆ(ᐃⵠⲆΔⲆΔⵠ(.4 * Ⲇ, [ᐃ[306], ᐃ[193]], ᐃⲆΔᐃ));
		ᐃᐃ[ⵠ.ⵠⲆᐃᐃⲆⵠᐃ] = ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI / ⵠᐃⵠᐃΔ, ⲆⲆᐃΔⵠΔⵠΔᐃ(.2 * Ⲇ, [ᐃ[193]])));
		ᐃᐃ[ⵠ.ⲆᐃᐃᐃⲆ] = [], ᐃᐃ[ⵠ.ⲆᐃᐃᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃᐃⲆⵠⵠⲆⵠ(.85 * Ⲇ, true, [ᐃ[414], "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
		ᐃᐃ[ⵠ.ⲆᐃᐃᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃᐃⲆⵠⵠⲆⵠ(Ⲇ * .85, ⲆⲆⵠⵠΔ, [ᐃ[414], "#4e4e93", "#393977", "#444187", ᐃ[401], "#277a74", "#7da8db"]));
		ᐃᐃ[ⵠ.ΔⲆⵠⲆⲆⵠⲆ] = [];
		ᐃᐃ[ⵠ.ΔⲆⵠⲆⲆⵠⲆ].push(ⲆΔⲆ(ⲆᐃΔᐃΔ(.7 * Ⲇ, [ᐃ[337], ᐃ[122], ᐃ[337], "#2e2410", ᐃ[122]], ⲆⲆΔⵠ)));
		ᐃᐃ[ⵠ.ΔⲆⵠⲆⲆⵠⲆ].push(ⲆΔⲆ(ⲆᐃΔᐃΔ(Ⲇ * .7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
		ᐃᐃ[ⵠ.ΔⲆⵠⲆⲆⵠⲆ].push(ⲆΔⲆ(ⲆᐃΔᐃΔ(.7 * Ⲇ, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], ᐃⵠⵠⵠ)));
		ᐃᐃ[ⵠ.ⵠΔᐃΔⲆ] = [], ᐃᐃ[ⵠ.ⵠΔᐃΔⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃΔⲆⵠΔᐃᐃ(Ⲇ * .37, true, [ᐃ[244], ᐃ[345], ᐃ[544]]));
		ᐃᐃ[ⵠ.ⵠΔᐃΔⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃΔⲆⵠΔᐃᐃ(.37 * Ⲇ, true, ["#1b1e30", "#161921", "#252f3e"]));
		ᐃᐃ[ⵠ.ᐃⲆᐃΔΔ] = [], ᐃᐃ[ⵠ.ᐃⲆᐃΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆΔΔΔⲆⲆⵠ(Ⲇ * .17, ΔⲆᐃΔΔ, [ᐃ[244], ᐃ[345], ᐃ[544], "#1b1a25", "#d62c0e"]));
		ᐃᐃ[ⵠ.ᐃⲆᐃΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆΔΔΔⲆⲆⵠ(.17 * Ⲇ, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
		ᐃᐃ[ⵠ.ΔᐃᐃⲆⵠ] = [], ᐃᐃ[ⵠ.ΔᐃᐃⲆⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⵠⲆⲆᐃᐃΔ(Ⲇ * .55, true, [ᐃ[172], "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], ⲆⲆΔⵠ));
		ᐃᐃ[ⵠ.ΔᐃᐃⲆⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⵠⲆⲆᐃᐃΔ(Ⲇ * .55, ⲆΔΔⵠᐃⲆⵠ, [ᐃ[172], "#216661", "#134945", "#2b8079", "#17504c"], ⲆⲆⵠ));
		ᐃᐃ[ⵠ.ⲆᐃΔⵠⵠ] = [], ᐃᐃ[ⵠ.ⲆᐃΔⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⵠⲆⲆᐃᐃΔ(.55 * Ⲇ, true, [ᐃ[172], "#8c7654", ᐃ[138], "#a88e6c", ᐃ[138], "#705845"], 0));
		ᐃᐃ[ⵠ.ⲆᐃΔⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⵠⲆⲆᐃᐃΔ(Ⲇ * .55, ⲆⲆⲆⵠⲆ, [ᐃ[172], "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], ΔᐃⲆⲆ));
		ᐃᐃ[ⵠ.ⵠⲆᐃΔΔ] = [], ᐃᐃ[ⵠ.ⵠⲆᐃΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔⵠΔⲆⲆ(.2 * Ⲇ, ⲆⲆⵠⵠΔ, [ᐃ[414], ᐃ[118], ᐃ[196], ᐃ[315], "#49B669", "#19994C", "#71C187"]));
		ᐃᐃ[ⵠ.ⵠⲆᐃΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔⵠΔⲆⲆ(.2 * Ⲇ, true, [ᐃ[495], "#114933", "#1b6656", ᐃ[50], "#3db76f", "#118254", "#40c696"]));
		ᐃᐃ[ⵠ.ⲆΔⲆⵠⵠ] = [], ᐃᐃ[ⵠ.ⲆΔⲆⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔⵠΔⲆⲆ(Ⲇ * .2, ⲆⲆⲆⵠⲆ, [ᐃ[414], ᐃ[118], ᐃ[196], ᐃ[315], "#C45727", "#994617", "#DB9358"]));
		ᐃᐃ[ⵠ.ⲆΔⲆⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔⵠΔⲆⲆ(.2 * Ⲇ, true, [ᐃ[495], "#114933", "#1b6656", ᐃ[50], "#69b681", "#509a75", "#7ec387"]));
		ᐃᐃ[ⵠ.ⵠᐃΔⵠᐃ] = [], ᐃᐃ[ⵠ.ⵠᐃΔⵠᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔⵠΔⲆⲆ(.2 * Ⲇ, ᐃᐃⲆᐃⵠ, [ᐃ[414], ᐃ[118], ᐃ[196], ᐃ[315], "#2792C1", "#196599", "#59C0D8"]));
		ᐃᐃ[ⵠ.ⵠᐃΔⵠᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔⵠΔⲆⲆ(.2 * Ⲇ, true, [ᐃ[495], "#114933", "#1b6656", ᐃ[50], "#19899e", "#16688b", "#4ea3c7"]));
		ᐃᐃ[ⵠ.ᐃΔⲆⲆΔ] = [], ᐃᐃ[ⵠ.ᐃΔⲆⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⲆΔᐃⲆⵠ(Ⲇ * .24, ⲆⲆⲆⵠⲆ, [ᐃ[352], "#b03431", "#94312d", "#bd3c33", ᐃ[226]]));
		ᐃᐃ[ⵠ.ᐃΔⲆⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⲆΔᐃⲆⵠ(Ⲇ * .24, true, [ᐃ[352], "#1b103e", "#190f3b", "#261a4e", ᐃ[10]]));
		ᐃᐃ[ⵠ.ᐃᐃᐃΔⵠ] = [], ᐃᐃ[ⵠ.ᐃᐃᐃΔⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆᐃᐃⲆΔⵠⲆ(Ⲇ * .32, true, [ᐃ[414], "#cae9eb", "#75bcae", ᐃ[478], "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
		ᐃᐃ[ⵠ.ᐃᐃᐃΔⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆᐃᐃⲆΔⵠⲆ(.32 * Ⲇ, true, [ᐃ[414], "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
		ᐃᐃ[ⵠ.ᐃᐃᐃⲆΔ] = [];
		ᐃᐃ[ⵠ.ᐃᐃᐃⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⵠᐃⵠᐃⲆᐃⲆ(.9 * Ⲇ, true, [ᐃ[414], "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
		ᐃᐃ[ⵠ.ᐃᐃᐃⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔᐃΔ, ⵠᐃⵠᐃⲆᐃⲆ(Ⲇ * .9, true, [ᐃ[414], "#18332e", "#112320", ᐃ[364], "#49b2cf"])));
		ᐃᐃ[ⵠ.ᐃᐃⲆⲆΔⲆᐃ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⲆⲆΔⲆᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⵠᐃⵠᐃⲆᐃⲆ(Ⲇ * 1, ⲆᐃΔᐃⲆ, [undefined, undefined, undefined, "#c8efef", "#c8efef"])));
		ᐃᐃ[ⵠ.ᐃᐃⲆⲆΔⲆᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ⵠᐃⵠᐃⲆᐃⲆ(ⵠⵠⵠⲆ * Ⲇ, true, [undefined, undefined, ΔⵠⲆⲆΔ, ᐃ[364], ᐃ[364]])));
		ᐃᐃ[ⵠ.ΔΔᐃⲆΔⲆᐃ] = [];
		ᐃᐃ[ⵠ.ΔΔᐃⲆΔⲆᐃ].push(ⲆΔⲆ(ΔⲆᐃΔᐃⲆⲆ(Ⲇ * .3, true, [ᐃ[414], ᐃ[375], ᐃ[217], "#704821", ᐃ[456], ᐃ[316]], ⲆⲆᐃⲆ)));
		ᐃᐃ[ⵠ.ΔΔᐃⲆΔⲆᐃ].push(ⲆΔⲆ(ΔⲆᐃΔᐃⲆⲆ(.3 * Ⲇ, ᐃΔΔΔΔ, [ᐃ[414], ᐃ[375], ᐃ[217], "#704821", ᐃ[456], ᐃ[316]], 1)));
		ᐃᐃ[ⵠ.ΔΔᐃⲆΔⲆᐃ].push(ⲆΔⲆ(ΔⲆᐃΔᐃⲆⲆ(Ⲇ * .3, true, [ᐃ[414], ᐃ[375], ᐃ[217], "#704821", ᐃ[456], ᐃ[166]], ⲆⲆᐃⵠ)));
		ᐃᐃ[ⵠ.ᐃᐃΔΔⲆⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃᐃΔΔⲆⲆⵠ].push(ⲆΔⲆ(ⵠⲆᐃΔⵠⲆⵠ(.7 * Ⲇ, [ᐃ[375], ᐃ[217], "#85592c", ᐃ[316]], ⵠⵠⵠ)));
		ᐃᐃ[ⵠ.ᐃᐃΔΔⲆⲆⵠ].push(ⲆΔⲆ(ⵠⲆᐃΔⵠⲆⵠ(.7 * Ⲇ, [ᐃ[375], ᐃ[217], "#85592c", ᐃ[316]], 1)));
		ᐃᐃ[ⵠ.ᐃᐃΔΔⲆⲆⵠ].push(ⲆΔⲆ(ⵠⲆᐃΔⵠⲆⵠ(Ⲇ * .7, [ᐃ[375], ᐃ[217], "#85592c", ᐃ[316]], 1)));
		ᐃᐃ[ⵠ.ᐃΔᐃᐃⵠΔⲆ] = [];
		ᐃᐃ[ⵠ.ᐃΔᐃᐃⵠΔⲆ].push(ⲆΔⲆ(ᐃⲆⲆΔᐃᐃᐃ(.4 * Ⲇ, [ᐃ[414], ᐃ[375], ᐃ[217], ᐃ[316]], 0, ΔΔⵠ)));
		ᐃᐃ[ⵠ.ᐃΔᐃᐃⵠΔⲆ].push(ⲆΔⲆ(ᐃⲆⲆΔᐃᐃᐃ(Ⲇ * .4, [ᐃ[414], ᐃ[375], ᐃ[217], ᐃ[316]], ᐃⲆⲆ, 1)));
		ᐃᐃ[ⵠ.ᐃΔᐃᐃⵠΔⲆ].push(ⲆΔⲆ(ᐃⲆⲆΔᐃᐃᐃ(.4 * Ⲇ, [ᐃ[414], ᐃ[375], ᐃ[217], ᐃ[166]], ΔΔΔᐃ, ΔᐃⵠⲆ)));
		ᐃᐃ[ⵠ.ΔⵠⲆⵠⲆⲆᐃ] = [];
		ᐃᐃ[ⵠ.ΔⵠⲆⵠⲆⲆᐃ].push(ⲆΔⲆ(ᐃⲆⲆΔᐃᐃᐃ(.4 * Ⲇ, [ᐃ[414], ᐃ[375], ᐃ[217], ᐃ[316]], ⵠᐃⵠ, 0)));
		ᐃᐃ[ⵠ.ΔⵠⲆⵠⲆⲆᐃ].push(ⲆΔⲆ(ᐃⲆⲆΔᐃᐃᐃ(Ⲇ * .4, [ᐃ[414], ᐃ[375], ᐃ[217], ᐃ[316]], 1, ᐃⲆΔᐃ)));
		ᐃᐃ[ⵠ.ΔⵠⲆⵠⲆⲆᐃ].push(ⲆΔⲆ(ᐃⲆⲆΔᐃᐃᐃ(.4 * Ⲇ, [ᐃ[414], ᐃ[375], ᐃ[217], ᐃ[166]], ΔⲆⵠⲆ, ⵠᐃΔ)));
		ᐃᐃ[ⵠ.ᐃⵠⵠⵠⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⵠⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠⵠΔⲆ, ΔⵠⵠΔⵠ(Ⲇ * .7, ⲆⲆⵠⵠΔ, [ᐃ[414], "#6d5041", "#4f3d35", ᐃ[71], ᐃ[491], "#757575"])));
		ᐃᐃ[ⵠ.ᐃⵠⵠⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔΔΔ, ΔⵠⵠΔⵠ(Ⲇ * .7, ᐃᐃⲆᐃⵠ, [ᐃ[414], ᐃ[338], ᐃ[349], ᐃ[398], ᐃ[227], "#274352"])));
		ᐃᐃ[ⵠ.ⵠⵠⲆⲆΔ] = [];
		ᐃᐃ[ⵠ.ⵠⵠⲆⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ΔⵠⵠΔⵠ(Ⲇ * .7, true, [ᐃ[414], ᐃ[136], ᐃ[183], ᐃ[179], ᐃ[453], "#ada437"])));
		ᐃᐃ[ⵠ.ⵠⵠⲆⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ΔⵠⵠΔⵠ(.7 * Ⲇ, ⵠᐃⵠⲆᐃ, [ᐃ[414], ᐃ[147], ᐃ[292], ᐃ[295], ᐃ[240], "#32916c"])));
		ᐃᐃ[ⵠ.ⵠᐃᐃΔⵠ] = [];
		ᐃᐃ[ⵠ.ⵠᐃᐃΔⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ᐃΔᐃΔ, ΔⵠⵠΔⵠ(Ⲇ * .7, true, [ᐃ[414], ᐃ[121], ᐃ[190], ᐃ[325], ᐃ[146], "#42aab8"])));
		ᐃᐃ[ⵠ.ⵠᐃᐃΔⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ΔⵠⵠΔⵠ(.7 * Ⲇ, true, [ᐃ[414], ᐃ[555], ᐃ[186], ᐃ[441], ᐃ[64], "#49bdc6"])));
		ᐃᐃ[ⵠ.ⲆΔⵠᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⲆΔⵠᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠᐃⵠΔ, ΔⵠⵠΔⵠ(.7 * Ⲇ, ᐃᐃΔⵠΔ, [ᐃ[414], ᐃ[121], ᐃ[190], ᐃ[531], ᐃ[98], "#9641b5"])));
		ᐃᐃ[ⵠ.ⲆΔⵠᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3, ΔⵠⵠΔⵠ(.7 * Ⲇ, true, [ᐃ[414], ᐃ[555], ᐃ[186], ᐃ[539], ᐃ[109], "#6f45c2"])));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠⵠᐃⵠΔ].push(ⲆΔⲆ(ᐃⵠΔΔΔⲆⲆ(Ⲇ * .7, ["#3b330d", "#b5a118", "#c8ac16"], ⲆⲆᐃⲆ)));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠᐃⵠΔ].push(ⲆΔⲆ(ᐃⵠΔΔΔⲆⲆ(Ⲇ * .7, ["#524712", "#c7b11c", "#d9ba18"], 0)));
		ᐃᐃ[ⵠ.ᐃΔⵠⵠᐃⵠΔ].push(ⲆΔⲆ(ᐃⵠΔΔΔⲆⲆ(Ⲇ * .7, ["#2a2409", "#9f8e14", "#ad9511"], 0)));
		ᐃᐃ[ⵠ.ΔΔΔΔᐃΔⲆ] = ⲆΔⲆ(ⵠⲆⵠⲆⵠΔⵠⵠⲆ(1.1 * Ⲇ, [ᐃ[439]]));
		ᐃᐃ[ⵠ.ⲆΔⵠΔᐃᐃΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(Math.PI, ⲆⵠΔᐃᐃΔⲆᐃᐃ(Ⲇ * .9, ᐃ[439])));
		ᐃᐃ[ⵠ.ΔᐃᐃⲆᐃ] = [];
		ᐃᐃ[ⵠ.ΔᐃᐃⲆᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆᐃΔΔᐃᐃΔ(.55 * Ⲇ, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
		ᐃᐃ[ⵠ.ΔᐃᐃⲆᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆᐃΔΔᐃᐃΔ(Ⲇ * .55, ᐃⵠⲆⲆᐃ, [ᐃ[169], "#0f3f3d", ᐃ[266], "#0d2d2b", ᐃ[551], "#070d16"]));
		ᐃᐃ[ⵠ.ⲆΔᐃᐃᐃ] = [];
		ᐃᐃ[ⵠ.ⲆΔᐃᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃᐃⵠΔᐃⲆⵠ(.55 * Ⲇ, true, [ᐃ[84], ᐃ[342], "#573f29", ᐃ[261]]));
		ᐃᐃ[ⵠ.ⲆΔᐃᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃᐃⵠΔᐃⲆⵠ(Ⲇ * .55, ⲆΔΔⵠᐃⲆⵠ, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
		ᐃᐃ[ⵠ.ⵠΔⵠΔᐃ] = [];
		ᐃᐃ[ⵠ.ⵠΔⵠΔᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⲆⵠΔᐃⲆᐃ(Ⲇ * .6, true, [ᐃ[84], "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", ᐃ[234], "#747474", "#969696", ᐃ[ⲆᐃⵠΔⵠΔΔᐃΔ]]));
		ᐃᐃ[ⵠ.ⵠΔⵠΔᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⲆⵠΔᐃⲆᐃ(Ⲇ * .6, ΔⲆᐃΔΔ, [ᐃ[311], "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", ᐃ[156]]));
		ᐃᐃ[ⵠ.ᐃᐃΔᐃΔ] = [];
		ᐃᐃ[ⵠ.ᐃᐃΔᐃΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠΔⵠⵠᐃΔⵠ(.58 * Ⲇ, ΔⲆΔⵠⲆ, ["#dbce71", ᐃ[453], ᐃ[179]]));
		ᐃᐃ[ⵠ.ᐃᐃΔᐃΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠΔⵠⵠᐃΔⵠ(.58 * Ⲇ, true, [ᐃ[495], "#15543c", ᐃ[50]]));
		ᐃᐃ[ⵠ.ⵠⵠᐃᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⵠⵠᐃᐃⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆᐃⲆⵠⵠⵠ(.69 * Ⲇ, true, ["#717171", "#485252", ᐃ[234], "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
		ᐃᐃ[ⵠ.ⵠⵠᐃᐃⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆᐃⲆⵠⵠⵠ(.69 * Ⲇ, true, [ᐃ[370], "#092121", ᐃ[266], ᐃ[401], "#277a74", "#1f665f", ᐃ[112], ᐃ[419]]));
		ᐃᐃ[ⵠ.ΔⲆⲆΔΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆⲆΔΔ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔⲆⲆΔΔ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆⲆΔΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⲆᐃⲆⵠⲆΔⲆ(1.3 * Ⲇ, [ᐃ[86], "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", ᐃ[86], ᐃ[68]])));
		ᐃᐃ[ⵠ.ΔⲆⲆΔΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⵠᐃⵠⵠⵠΔ(1.5 * Ⲇ, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", ᐃ[68]])));
		ᐃᐃ[ⵠ.ΔⲆⲆΔΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠΔⵠᐃⲆⵠΔ(1.5 * Ⲇ, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
		ᐃᐃ[ⵠ.ΔⲆⲆΔΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⲆᐃⲆⵠⲆΔⲆ(Ⲇ * 1.3, [ᐃ[352], "#0e3638", ᐃ[114], ᐃ[4], ᐃ[114], "#1d5559", ᐃ[4], "#48a8aa", ᐃ[369], "#56afac"])));
		ᐃᐃ[ⵠ.ΔⲆⲆΔΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⵠᐃⵠⵠⵠΔ(1.5 * Ⲇ, [ᐃ[352], "#0e3638", ᐃ[114], ᐃ[4], "#48a8aa", "#56afac"])));
		ᐃᐃ[ⵠ.ΔⲆⲆΔΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠΔⵠᐃⲆⵠΔ(Ⲇ * 1.5, [ᐃ[352], "#0e3638", ᐃ[114], ᐃ[4], ᐃ[369], "#56afac"])));
		ᐃᐃ[ⵠ.ΔⵠΔᐃⲆ] = [];
		ᐃᐃ[ⵠ.ΔⵠΔᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔⲆⲆᐃΔ(ᐃΔⵠΔ * Ⲇ, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", ᐃ[478], "#57aba6", ᐃ[478]]));
		ᐃᐃ[ⵠ.ΔⵠΔᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔⲆⲆᐃΔ(1 * Ⲇ, ["#050505", "#1d3a38", "#0b514a", ᐃ[355], "#327570", "#1d3a38", ᐃ[478], "#0b514a", "#63afa9"]));
		ᐃᐃ[ⵠ.ⲆΔⲆⲆᐃⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔⲆⲆᐃⲆⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆᐃⲆⲆΔΔᐃ(Ⲇ * ⵠⲆⵠⲆ, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
		ᐃᐃ[ⵠ.ⲆΔⲆⲆᐃⲆⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆᐃⲆⲆΔΔᐃ(1 * Ⲇ, ["#050505", "#327570", "#021724", ᐃ[355]]));
		ᐃᐃ[ⵠ.ΔᐃΔⲆⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔᐃΔⲆⲆⵠΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃᐃΔᐃⲆⲆᐃ(ⲆⲆΔⵠ * Ⲇ, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
		ᐃᐃ[ⵠ.ΔᐃΔⲆⲆⵠΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃᐃΔᐃⲆⲆᐃ(Ⲇ * 1, ["#050505", "#327570", "#021724", ᐃ[355]]));
		ᐃᐃ[ⵠ.ᐃⲆᐃᐃⲆⵠᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⲆᐃᐃⲆⵠᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆᐃᐃⲆⵠᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆᐃᐃⲆⵠᐃ][ⵠ.ⵠⲆⵠ] = [Δᐃ.ⵠⲆᐃΔᐃΔⵠ, Δᐃ.ᐃᐃᐃΔⵠⵠΔ, Δᐃ.ⵠⲆⲆΔᐃᐃⵠ, Δᐃ.ΔᐃΔⲆⵠΔΔ, Δᐃ.ΔΔᐃⵠⲆⵠⵠ, Δᐃ.ΔΔⵠⲆΔΔⲆ, Δᐃ.ⲆⵠΔᐃΔⵠⵠ, Δᐃ.ⵠⲆⵠᐃᐃⵠⵠ, Δᐃ.ⲆΔΔⲆⵠΔΔ, Δᐃ.ⵠΔᐃⲆΔⲆΔ, Δᐃ.ⲆΔⵠⲆᐃⲆⵠ, Δᐃ.Δᐃᐃⵠᐃⵠⵠ, Δᐃ.ⵠⵠᐃᐃᐃⵠΔ, Δᐃ.ᐃᐃᐃᐃⵠΔΔ, Δᐃ.ⵠΔⲆΔⲆᐃᐃ, Δᐃ.ⵠᐃⲆⲆⲆⲆΔ, Δᐃ.ⵠΔⲆⲆΔⲆⲆ, Δᐃ.ᐃⲆᐃΔⲆⵠⲆ, Δᐃ.ⵠΔᐃⲆⵠⲆⲆ, Δᐃ.ⵠⵠⲆⲆⲆⲆⲆ, Δᐃ.ΔⲆΔΔΔⵠⲆ, Δᐃ.ⲆΔⵠⵠⲆⵠᐃ, Δᐃ.ⲆⲆΔⲆᐃⵠᐃ, Δᐃ.ⵠᐃΔⲆΔⵠᐃ, Δᐃ.ⲆᐃᐃᐃᐃΔⵠ, Δᐃ.ⲆⲆᐃⲆⵠⵠΔ, Δᐃ.ⲆΔⲆΔᐃΔⲆ, Δᐃ.ΔᐃⲆⵠΔᐃᐃ, Δᐃ.ΔⵠᐃᐃΔΔᐃ, Δᐃ.ΔⲆⲆᐃⵠᐃⵠ, Δᐃ.ⲆΔⵠⵠΔᐃⲆ, Δᐃ.ⲆⲆᐃΔᐃΔⲆ, Δᐃ.ΔΔᐃⲆⵠᐃᐃ, Δᐃ.ᐃⵠΔᐃᐃᐃⲆ, Δᐃ.ⲆⲆⲆΔⵠⵠΔ, Δᐃ.ᐃᐃΔⵠᐃⵠᐃ, Δᐃ.ⵠⲆΔᐃΔΔᐃ, Δᐃ.ⲆᐃΔᐃΔᐃΔ, Δᐃ.ⲆΔᐃⲆⲆΔⵠ, Δᐃ.ⲆᐃᐃᐃᐃᐃⲆ, Δᐃ.ΔⵠᐃᐃᐃΔⲆ, Δᐃ.Ⲇⵠⵠⵠⵠᐃⵠ, Δᐃ.ⵠᐃⵠᐃΔΔᐃ, Δᐃ.ⵠᐃΔᐃΔᐃⵠ, Δᐃ.ΔⲆⲆΔⵠⲆⲆ, Δᐃ.ᐃⲆΔΔΔᐃⵠ, Δᐃ.ⵠΔⵠⲆⲆᐃᐃ, Δᐃ.ⵠⵠᐃᐃᐃΔⲆ, Δᐃ.ΔΔⵠᐃⲆⲆⲆ, Δᐃ.ΔᐃΔⵠⵠⲆⲆ, Δᐃ.ⵠΔⲆⵠΔⵠⲆ, Δᐃ.ᐃΔᐃᐃΔΔΔ, Δᐃ.ⲆⲆⲆⲆΔⲆΔ, Δᐃ.ᐃΔⵠᐃⲆⲆΔ, Δᐃ.ⲆⲆⵠⲆᐃⵠᐃ, Δᐃ.ΔⵠⵠᐃⵠⵠΔ];
		ᐃᐃ[ⵠ.ᐃⲆᐃᐃⲆⵠᐃ][ⵠ.ᐃⵠΔ] = [Δᐃ.ΔΔΔⲆⵠⲆⵠ, Δᐃ.ⲆΔⵠⲆⵠⵠⲆ, Δᐃ.ⲆΔⲆⵠᐃⲆΔ, Δᐃ.ᐃΔᐃⲆⲆᐃⲆ, Δᐃ.ΔⲆⵠⵠᐃⵠⵠ, Δᐃ.ᐃᐃΔⵠᐃᐃⲆ, Δᐃ.ⵠⵠΔⵠΔⵠⵠ, Δᐃ.ΔᐃⵠⲆⲆⲆⵠ, Δᐃ.ⵠᐃⲆΔⲆⲆᐃ, Δᐃ.ΔⲆⵠᐃⵠᐃΔ, Δᐃ.ⵠⲆⲆᐃΔᐃᐃ, Δᐃ.ⲆᐃⵠⵠⲆⵠⵠ, Δᐃ.ΔⵠᐃΔⵠⲆᐃ, Δᐃ.ⵠⵠΔⵠⲆΔᐃ, Δᐃ.ᐃΔΔⲆⲆΔᐃ, Δᐃ.ⲆᐃⲆᐃⲆΔΔ, Δᐃ.ᐃⵠⲆᐃΔⵠⵠ, Δᐃ.ΔⵠΔⵠΔΔⵠ, Δᐃ.ⵠᐃⲆᐃⵠΔⲆ, Δᐃ.ᐃΔᐃⵠᐃⲆⵠ, Δᐃ.ᐃΔⵠⵠⲆⲆΔ, Δᐃ.ΔⲆⲆⲆΔᐃᐃ, Δᐃ.ΔΔⵠⲆⲆⵠᐃ, Δᐃ.ⵠⲆΔⵠᐃᐃⵠ, Δᐃ.ⲆΔⲆΔΔⲆⵠ, Δᐃ.ⵠⵠΔᐃᐃΔᐃ, Δᐃ.ΔⲆΔⵠⲆⲆΔ, Δᐃ.ᐃΔⲆⵠⵠᐃⵠ, Δᐃ.ΔⵠⵠΔⲆᐃᐃ, Δᐃ.ⲆⲆᐃΔᐃᐃᐃ, Δᐃ.ᐃᐃΔΔᐃⵠᐃ, Δᐃ.ᐃⲆⲆᐃΔΔⵠ, Δᐃ.ΔΔΔΔᐃⵠΔ, Δᐃ.ΔⵠⵠⵠⵠⵠΔ, Δᐃ.ΔᐃⵠⲆⵠⵠᐃ, Δᐃ.ⵠⲆⵠⲆⲆᐃⲆ, Δᐃ.ΔⵠΔᐃᐃᐃⵠ, Δᐃ.ⵠⲆᐃⵠⲆᐃᐃ, Δᐃ.ΔΔᐃᐃΔⵠᐃ, Δᐃ.ΔᐃᐃΔⵠᐃⲆ, Δᐃ.ⵠⵠΔΔᐃᐃⵠ, Δᐃ.ᐃΔΔΔᐃⲆⲆ, Δᐃ.ⵠⵠΔΔᐃⵠΔ, Δᐃ.ⵠΔⲆΔⵠΔⵠ, Δᐃ.ⵠᐃⵠΔΔΔΔ, Δᐃ.ᐃⵠᐃΔᐃⲆⲆ, Δᐃ.ⲆΔᐃⲆΔᐃⵠ, Δᐃ.ⵠⲆᐃⵠⵠᐃⲆ, Δᐃ.ᐃᐃΔᐃⲆᐃΔ, Δᐃ.ᐃⲆᐃⲆΔᐃᐃ, Δᐃ.ⲆΔⵠᐃᐃᐃⲆ, Δᐃ.ⲆᐃⵠΔΔⲆᐃ, Δᐃ.ΔⲆⵠⲆᐃⲆᐃ, Δᐃ.ᐃᐃᐃⵠⲆΔᐃ, Δᐃ.ⲆΔⲆⲆⵠΔⵠ, Δᐃ.ᐃΔΔⵠⲆⵠᐃ];
		ᐃᐃ[ⵠ.ⲆⵠΔⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(1.1 * Ⲇ, false, [ᐃ[33], ᐃ[159], ᐃ[152]], ᐃⲆᐃ)));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(Ⲇ * .9, ᐃΔᐃᐃΔ, [ᐃ[33], ᐃ[159], ᐃ[152]], ⵠⵠⵠⲆ)));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(Ⲇ * ⲆⲆⵠ, ᐃᐃⲆᐃΔ, [ᐃ[33], ᐃ[159], ᐃ[152]], ⲆΔΔⲆ)));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(Ⲇ * .9, false, [ᐃ[33], ᐃ[159], ᐃ[152]], 2)));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(1.1 * Ⲇ, false, [ᐃ[311], ᐃ[266], ᐃ[370]], 0)));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(Ⲇ * .9, false, [ᐃ[311], ᐃ[266], ᐃ[370]], ⲆⲆⲆᐃ)));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(1 * Ⲇ, ⵠᐃΔΔᐃ, [ᐃ[311], ᐃ[266], ᐃ[370]], ᐃⲆⵠᐃ)));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(.9 * Ⲇ, false, [ᐃ[311], ᐃ[266], ᐃ[370]], ΔⵠⲆⲆ)));
		ᐃᐃ[ⵠ.ΔΔΔΔⵠ] = [];
		ᐃᐃ[ⵠ.ΔΔΔΔⵠ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔΔΔΔⵠ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔΔΔΔⵠ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(Ⲇ * 1.1, ⲆΔΔⵠᐃⲆⵠ, [ᐃ[33], ᐃ[435], ᐃ[37]], ΔⵠⲆⲆ)));
		ᐃᐃ[ⵠ.ΔΔΔΔⵠ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(Ⲇ * .9, true, [ᐃ[33], ᐃ[435], ᐃ[37]], 2)));
		ᐃᐃ[ⵠ.ΔΔΔΔⵠ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(Ⲇ * 1, ᐃΔΔΔΔ, [ᐃ[33], ᐃ[435], ᐃ[37]], 2)));
		ᐃᐃ[ⵠ.ΔΔΔΔⵠ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(Ⲇ * .9, ᐃΔΔΔΔ, [ᐃ[33], ᐃ[435], ᐃ[37]], 2)));
		ᐃᐃ[ⵠ.ΔΔΔΔⵠ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(Ⲇ * 1.1, true, [ᐃ[311], ᐃ[266], ᐃ[370]], ᐃᐃΔⵠ)));
		ᐃᐃ[ⵠ.ΔΔΔΔⵠ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(Ⲇ * .9, ⲆⲆΔΔΔ, [ᐃ[311], ᐃ[266], ᐃ[370]], 2)));
		ᐃᐃ[ⵠ.ΔΔΔΔⵠ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(1 * Ⲇ, true, [ᐃ[311], ᐃ[266], ᐃ[370]], 2)));
		ᐃᐃ[ⵠ.ΔΔΔΔⵠ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃΔᐃΔⲆ(Ⲇ * .9, ᐃⵠⲆⵠᐃ, [ᐃ[311], ᐃ[266], ᐃ[370]], ΔΔⵠⲆ)));
		ᐃᐃ[ⵠ.ᐃΔⵠⲆΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠⲆΔ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠⲆΔ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠⲆΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠᐃΔΔⵠ(Ⲇ * 1.5, ΔΔⲆᐃᐃ, [ᐃ[294], ᐃ[546], ᐃ[542]])));
		ᐃᐃ[ⵠ.ᐃΔⵠⲆΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠᐃΔΔⵠ(1.3 * Ⲇ, ΔⲆⲆᐃΔ, [ᐃ[294], ᐃ[546], ᐃ[542]])));
		ᐃᐃ[ⵠ.ᐃΔⵠⲆΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠᐃΔΔⵠ(1.1 * Ⲇ, ΔΔⲆᐃᐃ, [ᐃ[294], ᐃ[546], ᐃ[542]])));
		ᐃᐃ[ⵠ.ᐃΔⵠⲆΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠᐃΔΔⵠ(1.5 * Ⲇ, ΔⲆⲆΔⵠ, [ᐃ[369], "#3e8989", "#50a09c"])));
		ᐃᐃ[ⵠ.ᐃΔⵠⲆΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠᐃΔΔⵠ(Ⲇ * 1.3, ⵠⲆⵠⵠΔ, [ᐃ[369], "#3e8989", "#50a09c"])));
		ᐃᐃ[ⵠ.ᐃΔⵠⲆΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠᐃΔΔⵠ(1.1 * Ⲇ, false, [ᐃ[369], "#3e8989", "#50a09c"])));
		ᐃᐃ[ⵠ.Ⲇᐃᐃᐃᐃ] = [];
		ᐃᐃ[ⵠ.Ⲇᐃᐃᐃᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.Ⲇᐃᐃᐃᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.Ⲇᐃᐃᐃᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃⲆΔᐃⵠ(Ⲇ * 1.1, false, [ᐃ[259], "#70e0dd", "#95efea"])));
		ᐃᐃ[ⵠ.Ⲇᐃᐃᐃᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃⲆΔᐃⵠ(Ⲇ * .9, ΔΔⲆᐃᐃ, [ᐃ[259], "#70e0dd", "#95efea"])));
		ᐃᐃ[ⵠ.Ⲇᐃᐃᐃᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃⲆΔᐃⵠ(.7 * Ⲇ, ᐃΔᐃⲆΔ, [ᐃ[259], "#70e0dd", "#95efea"])));
		ᐃᐃ[ⵠ.Ⲇᐃᐃᐃᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃⲆΔᐃⵠ(1.1 * Ⲇ, ᐃΔⵠΔᐃ, [ᐃ[259], "#47b2ac", ᐃ[485]])));
		ᐃᐃ[ⵠ.Ⲇᐃᐃᐃᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃⲆΔᐃⵠ(.9 * Ⲇ, false, [ᐃ[259], "#47b2ac", ᐃ[485]])));
		ᐃᐃ[ⵠ.Ⲇᐃᐃᐃᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃⲆΔᐃⵠ(Ⲇ * .7, ᐃΔᐃᐃΔ, [ᐃ[259], "#47b2ac", ᐃ[485]])));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆ] = [];
		ᐃᐃ[ⵠ.ⲆⵠΔⲆ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⵠΔⲆ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆⵠΔⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔⲆᐃᐃΔᐃΔ(Ⲇ * 1.7, ⵠⲆⵠᐃⵠ, [ᐃ[42], ᐃ[108], ᐃ[224]])));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔⲆᐃᐃΔᐃΔ(1.5 * Ⲇ, true, [ᐃ[42], ᐃ[108], ᐃ[224]])));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔⲆᐃᐃΔᐃΔ(1.3 * Ⲇ, ΔΔⲆΔⵠⲆⲆ, [ᐃ[42], ᐃ[108], ᐃ[224]])));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔⲆᐃᐃΔᐃΔ(Ⲇ * 1.7, true, [ᐃ[42], "#41aaa0", ᐃ[485]])));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔⲆᐃᐃΔᐃΔ(1.5 * Ⲇ, ⵠⲆᐃⵠᐃ, [ᐃ[42], "#41aaa0", ᐃ[485]])));
		ᐃᐃ[ⵠ.ⲆⵠΔⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔⲆᐃᐃΔᐃΔ(Ⲇ * 1.3, true, [ᐃ[42], "#41aaa0", ᐃ[485]])));
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆᐃᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆᐃᐃⵠ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆᐃᐃⵠ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆᐃᐃⵠ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠᐃⲆΔΔΔⲆ(Ⲇ, ["#2d53c4"])));
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆᐃᐃⵠ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠᐃⲆΔΔΔⲆ(Ⲇ, ["#2d53c4"])));
		ᐃᐃ[ⵠ.ΔⵠΔⵠⵠⵠⲆ] = [];
		ᐃᐃ[ⵠ.ΔⵠΔⵠⵠⵠⲆ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔⵠΔⵠⵠⵠⲆ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔⵠΔⵠⵠⵠⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠᐃⲆΔΔΔⲆ(Ⲇ, ["#c4912d"])));
		ᐃᐃ[ⵠ.ΔⵠΔⵠⵠⵠⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠᐃⲆΔΔΔⲆ(Ⲇ, ["#c4912d"])));
		ᐃᐃ[ⵠ.ⵠᐃΔΔⲆᐃΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃΔΔⲆᐃΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⲆᐃⵠⲆ(Ⲇ, ["#414040"]));
		ᐃᐃ[ⵠ.ⵠᐃΔΔⲆᐃΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⲆᐃⵠⲆ(Ⲇ, ["#153635"]));
		ᐃᐃ[ⵠ.ⵠΔⲆⲆⲆⵠⲆ] = [];
		ᐃᐃ[ⵠ.ⵠΔⲆⲆⲆⵠⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃᐃᐃΔΔⲆᐃ(Ⲇ * ⲆⲆᐃⵠ, ⲆᐃΔᐃⵠ, [ᐃ[427], ᐃ[427], ᐃ[568], ᐃ[568], ᐃ[427], ᐃ[568]]));
		ᐃᐃ[ⵠ.ⵠΔⲆⲆⲆⵠⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃᐃᐃΔΔⲆᐃ(1 * Ⲇ, false, [ᐃ[213], ᐃ[213], ᐃ[468], ᐃ[468], ᐃ[213], ᐃ[468]]));
		ᐃᐃ[ⵠ.ⵠⵠⵠⵠⲆⲆΔ] = [];
		ᐃᐃ[ⵠ.ⵠⵠⵠⵠⲆⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔᐃᐃ(ⲆⲆⵠ * Ⲇ, false, [ᐃ[427], ᐃ[427], ᐃ[568], ᐃ[568], ᐃ[427], ᐃ[568]]));
		ᐃᐃ[ⵠ.ⵠⵠⵠⵠⲆⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔᐃᐃ(1 * Ⲇ, false, [ᐃ[213], ᐃ[213], ᐃ[468], ᐃ[468], ᐃ[213], ᐃ[468]]));
		ᐃᐃ[ⵠ.ⵠΔΔᐃΔᐃΔ] = [];
		ᐃᐃ[ⵠ.ⵠΔΔᐃΔᐃΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠΔᐃᐃ(ⵠᐃᐃ * Ⲇ, ⵠⲆᐃⵠⵠ, [ᐃ[427], ᐃ[427], ᐃ[568], ᐃ[568], ᐃ[427], ᐃ[568]]));
		ᐃᐃ[ⵠ.ⵠΔΔᐃΔᐃΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠΔᐃᐃ(Ⲇ * 1, ⲆᐃΔᐃⵠ, [ᐃ[213], ᐃ[213], ᐃ[468], ᐃ[468], ᐃ[213], ᐃ[468]]));
		ᐃᐃ[ⵠ.ⵠᐃⲆⵠⲆΔᐃ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⲆⵠⲆΔᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⲆᐃⵠᐃΔᐃ(ΔⲆⵠⲆ * Ⲇ, false, [ᐃ[427], ᐃ[427], ᐃ[568], ᐃ[568], ᐃ[427], ᐃ[568]]));
		ᐃᐃ[ⵠ.ⵠᐃⲆⵠⲆΔᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⲆᐃⵠᐃΔᐃ(1 * Ⲇ, ᐃΔᐃⲆΔ, [ᐃ[213], ᐃ[213], ᐃ[468], ᐃ[468], ᐃ[213], ᐃ[468]]));
		ᐃᐃ[ⵠ.ⵠᐃΔⲆΔᐃΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃΔⲆΔᐃΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔᐃⲆΔᐃⲆⵠ(Ⲇ * 1, ⲆⵠΔΔⵠ, [ᐃ[427], ᐃ[427], ᐃ[568], ᐃ[568], ᐃ[427], ᐃ[568]]));
		ᐃᐃ[ⵠ.ⵠᐃΔⲆΔᐃΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔᐃⲆΔᐃⲆⵠ(1 * Ⲇ, ᐃΔᐃⲆΔ, [ᐃ[213], ᐃ[213], ᐃ[468], ᐃ[468], ᐃ[213], ᐃ[468]]));
		ᐃᐃ[ⵠ.ΔⲆᐃᐃΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆᐃᐃΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆⵠⲆⵠΔⵠⵠ(Ⲇ * .9, [ᐃ[42], ᐃ[478], "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
		ᐃᐃ[ⵠ.ΔⲆᐃᐃΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆⵠⲆⵠΔⵠⵠ(.9 * Ⲇ, [ᐃ[259], "#1a847f", ᐃ[355], "#131919", "#01333a", "#b6f2db"]));
		ᐃᐃ[ⵠ.Δᐃⵠⵠⵠ] = [];
		ᐃᐃ[ⵠ.Δᐃⵠⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔⲆⵠⵠⲆⵠ(Ⲇ * .9, [ᐃ[42], ᐃ[478], "#c41c50", "#c63450", ᐃ[478], "#f7e7f0", "#2b2d2d"]));
		ᐃᐃ[ⵠ.Δᐃⵠⵠⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔⲆⵠⵠⲆⵠ(.9 * Ⲇ, [ᐃ[259], "#1a847f", ᐃ[355], "#01333a", ᐃ[478], "#b6f2db", "#2b2d2d"]));
		ᐃᐃ[ⵠ.ᐃⲆⲆΔᐃᐃⲆ] = [];
		ᐃᐃ[ⵠ.ᐃΔⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆⵠᐃᐃⵠⵠⲆ] = [];
		ᐃᐃ[ⵠ.ⵠⲆΔΔΔ] = [];
		for (var ᐃⲆ = 0; ᐃⲆ < 2; ᐃⲆ++) {
			ᐃᐃ[ⵠ.ᐃⲆⲆΔᐃᐃⲆ][ᐃⲆ] = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
			ᐃᐃ[ⵠ.ᐃⲆⲆΔᐃᐃⲆ][ᐃⲆ].width = 193;
			ᐃᐃ[ⵠ.ᐃⲆⲆΔᐃᐃⲆ][ᐃⲆ].height = 193;
			ᐃᐃ[ⵠ.ᐃΔⲆⵠΔ][ᐃⲆ] = ᐃᐃ[ⵠ.ᐃⲆⲆΔᐃᐃⲆ][ᐃⲆ].getContext(ᐃ[269]);
			ᐃᐃ[ⵠ.ⲆⵠᐃᐃⵠⵠⲆ][ᐃⲆ] = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
			ᐃᐃ[ⵠ.ⲆⵠᐃᐃⵠⵠⲆ][ᐃⲆ].width = 600;
			ᐃᐃ[ⵠ.ⲆⵠᐃᐃⵠⵠⲆ][ᐃⲆ].height = 600;
			ᐃᐃ[ⵠ.ⵠⲆΔΔΔ][ᐃⲆ] = ᐃᐃ[ⵠ.ⲆⵠᐃᐃⵠⵠⲆ][ᐃⲆ].getContext(ᐃ[269])
		}
		ᐃᐃ[ⵠ.ΔΔΔᐃΔΔⲆ] = [];
		ᐃᐃ[ⵠ.ΔΔΔᐃΔΔⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⲆᐃⵠⲆ(Ⲇ, ["#c8e0de"]));
		ᐃᐃ[ⵠ.ΔΔΔᐃΔΔⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⲆᐃⵠⲆ(Ⲇ, ["#147071"]));
		ᐃᐃ[ⵠ.ΔⲆᐃᐃⵠⵠᐃ] = [];
		ᐃᐃ[ⵠ.ΔⲆᐃᐃⵠⵠᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⲆᐃⵠⲆ(Ⲇ, ["#231912"]));
		ᐃᐃ[ⵠ.ΔⲆᐃᐃⵠⵠᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⲆᐃⵠⲆ(Ⲇ, ["#021719"]));
		ᐃᐃ[ⵠ.ⲆᐃⲆⲆⲆΔΔ] = ⲆΔⲆ(ⵠΔⲆⵠᐃᐃΔⲆΔ(Ⲇ * .5, [ᐃ[439]]));
		ᐃᐃ[ⵠ.ΔᐃΔⵠⲆΔⵠ] = ⲆΔⲆ(ᐃⲆᐃᐃⵠΔᐃⵠⵠ(.9 * Ⲇ, ᐃ[439]));
		ᐃᐃ[ⵠ.ᐃᐃⵠⵠΔΔΔ] = ⲆΔⲆ(ᐃⵠΔΔᐃᐃΔΔΔ(Ⲇ * .9, ᐃ[439]));
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠⵠᐃⲆ] = ⲆΔⲆ(ⲆⵠⲆⲆΔⵠᐃⵠᐃ(Ⲇ * 1, [ᐃ[439]]));
		ᐃᐃ[ⵠ.ΔⲆⲆⲆᐃᐃⲆ] = ⲆΔⲆ(ⲆᐃᐃᐃΔΔⲆⲆᐃ(.8 * Ⲇ, ᐃ[439]));
		ᐃᐃ[ⵠ.ⲆⲆΔⲆᐃΔΔ] = ⲆΔⲆ(ΔⵠΔⵠⵠᐃⵠᐃⲆ(.8 * Ⲇ, ᐃ[439]));
		ᐃᐃ[ⵠ.ⵠⵠⵠⵠⲆⵠⲆ] = ⲆΔⲆ(ᐃΔⵠΔⲆⲆⲆⲆᐃ(Ⲇ * .9, ᐃ[439]));
		ᐃᐃ[ⵠ.ᐃᐃᐃΔ] = ⲆΔⲆ(ΔⲆΔⲆᐃⵠΔ(.6 * Ⲇ, ᐃ[439]));
		ᐃᐃ[ⵠ.ⲆⲆᐃᐃᐃ] = ⲆΔⲆ(ΔⲆΔⲆᐃⵠΔ(.6 * Ⲇ, "#1CE7E0"));
		ᐃᐃ[ⵠ.ⲆⲆᐃⵠᐃᐃⲆ] = ⲆΔⲆ(ΔⲆΔⲆᐃⵠΔ(Ⲇ * .6, "#DBE71C"));
		ᐃᐃ[ⵠ.ⲆΔⲆᐃⲆⵠᐃ] = ⲆΔⲆ(ΔⲆΔⲆᐃⵠΔ(Ⲇ * .6, "#00BB00"));
		ᐃᐃ[ⵠ.ᐃⵠⲆΔⲆᐃⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⲆΔⲆᐃⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⲆᐃⵠⲆ(Ⲇ, ["#dac291"]));
		ᐃᐃ[ⵠ.ᐃⵠⲆΔⲆᐃⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⲆᐃⵠⲆ(Ⲇ, ["#0D423D"]));
		ᐃᐃ[ⵠ.ⲆⲆΔᐃᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔᐃᐃΔΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⲆᐃⵠⲆ(Ⲇ, ["#dac291"]));
		ᐃᐃ[ⵠ.ⲆⲆΔᐃᐃΔΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⲆᐃⵠⲆ(Ⲇ, ["#0D423D"]));
		ᐃᐃ[ⵠ.ΔᐃⲆⵠΔⲆΔ] = [];
		ᐃᐃ[ⵠ.ΔᐃⲆⵠΔⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠΔΔᐃΔΔΔ(.3 * Ⲇ, true, [ᐃ[298], "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
		ᐃᐃ[ⵠ.ΔᐃⲆⵠΔⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠΔΔᐃΔΔΔ(Ⲇ * .3, ΔᐃᐃⲆᐃΔΔ, [ᐃ[298], ᐃ[90], ᐃ[156], "#245d5d", "#1f5454", ᐃ[24]]));
		ᐃᐃ[ⵠ.ᐃⲆⲆΔⲆⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⲆΔⲆⲆⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠΔΔᐃΔΔΔ(Ⲇ * .3, ᐃΔⲆΔⵠ, [ᐃ[298], "#717273", "#606162", "#a09f9f", "#878787", ᐃ[ΔⲆΔⲆⲆΔᐃΔΔ]]));
		ᐃᐃ[ⵠ.ᐃⲆⲆΔⲆⲆⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠΔΔᐃΔΔΔ(Ⲇ * .3, ⲆⲆⵠⵠΔ, [ᐃ[298], ᐃ[90], ᐃ[156], "#245d5d", "#1f5454", "#0b2121"]));
		ᐃᐃ[ⵠ.ⵠⲆΔᐃⵠ] = [ⲆΔⲆ(ⲆΔⵠΔⵠⵠᐃ(Ⲇ, ⲆⲆⲆⵠⲆ, [ᐃ[6], ᐃ[49], ᐃ[55], ᐃ[28], ᐃ[300], ᐃ[178], ᐃ[494]]))];
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆⲆ] = [ⲆΔⲆ(ⲆΔⵠΔⵠⵠᐃ(Ⲇ, ΔᐃᐃⲆᐃΔΔ, [ᐃ[6], ᐃ[49], ᐃ[55], ᐃ[28], ᐃ[300], ᐃ[178], ᐃ[494]]))];
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃⲆΔⵠΔΔΔ(ᐃΔΔⲆ * Ⲇ, [ᐃ[482]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃⵠᐃᐃᐃᐃΔ(Ⲇ * 1, [ᐃ[482]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠΔΔΔᐃⵠᐃ(Ⲇ * Δⵠᐃ, [ᐃ[482]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⲆΔᐃⲆⵠⵠΔ(Ⲇ * ΔᐃⵠⲆ, [ᐃ[482]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔⵠΔΔΔⲆΔ(ᐃΔⵠΔ * Ⲇ, [ᐃ[482]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ᐃΔᐃⲆᐃᐃⲆ(ⲆⵠΔΔ * Ⲇ, [ᐃ[482]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ΔⲆΔΔⲆⲆΔ(Ⲇ * ⲆⵠΔΔ, [ᐃ[482]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃⲆΔⵠΔΔΔ(1 * Ⲇ, [ᐃ[24]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃⵠᐃᐃᐃᐃΔ(Ⲇ * 1, [ᐃ[24]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠΔΔΔᐃⵠᐃ(ᐃΔⵠΔ * Ⲇ, [ᐃ[24]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⲆΔᐃⲆⵠⵠΔ(ΔⲆⵠⲆ * Ⲇ, [ᐃ[24]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔⵠΔΔΔⲆΔ(1 * Ⲇ, [ᐃ[24]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ᐃΔᐃⲆᐃᐃⲆ(1 * Ⲇ, [ᐃ[24]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ΔⲆΔΔⲆⲆΔ(Ⲇ * ⵠᐃᐃ, [ᐃ[24]])));
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(Ⲇ * 1.7, ["#FBEFBC"], ⵠΔΔⲆ)));
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(1.9 * Ⲇ, ["#FBEFBC"], ᐃΔΔⲆ)));
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(Ⲇ * 1.7, ["#FBEFBC"], ᐃⲆⵠᐃ)));
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(1.7 * Ⲇ, ["#0F4C48"], ᐃⲆΔ)));
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(Ⲇ * 1.9, ["#0F4C48"], ⲆⲆΔⵠ)));
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(Ⲇ * 1.7, ["#0F4C48"], ΔⵠⲆⲆ)));
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(1.8 * Ⲇ, [ᐃ[517]], Δⵠⵠ)));
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(Ⲇ * ⲆΔⲆΔ, [ᐃ[517]], 1)));
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(1.8 * Ⲇ, [ᐃ[517]], Ⲇᐃⵠⵠ)));
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(Ⲇ * 1.8, [ᐃ[77]], 0)));
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(ΔⵠⲆⲆ * Ⲇ, [ᐃ[77]], ⲆⵠΔΔ)));
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(1.8 * Ⲇ, [ᐃ[77]], ΔΔᐃⲆⵠ)));
		ᐃᐃ[ⵠ.ⵠⲆⵠΔᐃ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⵠΔᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⵠΔᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⵠΔᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(1.9 * Ⲇ, [ᐃ[132]], 0)));
		ᐃᐃ[ⵠ.ⵠⲆⵠΔᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(2.1 * Ⲇ, [ᐃ[132]], 1)));
		ᐃᐃ[ⵠ.ⵠⲆⵠΔᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(1.9 * Ⲇ, [ᐃ[132]], ⲆᐃᐃⲆ)));
		ᐃᐃ[ⵠ.ⵠⲆⵠΔᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(Ⲇ * 1.9, [ᐃ[556]], 0)));
		ᐃᐃ[ⵠ.ⵠⲆⵠΔᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(2.1 * Ⲇ, [ᐃ[556]], 1)));
		ᐃᐃ[ⵠ.ⵠⲆⵠΔᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⲆᐃⲆⲆ(Ⲇ * 1.9, [ᐃ[556]], 2)));
		ᐃᐃ[ⵠ.ⲆΔΔⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔⲆᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔⲆᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔⲆᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⲆⵠᐃᐃⲆⵠ(.8 * Ⲇ, ["#231F20", "#0c8e5b", "#037542", ᐃ[442]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⲆⵠᐃᐃⲆⵠ(Ⲇ * 1, ["#231F20", "#0c8e5b", "#037542", ᐃ[442]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆᐃ][ⵠ.ⵠⲆⵠ].push(ⲆΔⲆ(ⵠⲆⵠᐃᐃⲆⵠ(Ⲇ * 1.2, ["#231F20", "#0c8e5b", "#037542", ᐃ[442]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⲆⵠᐃᐃⲆⵠ(Ⲇ * .8, ["#041e22", ᐃ[410], ᐃ[368], ᐃ[218]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⲆⵠᐃᐃⲆⵠ(1 * Ⲇ, ["#041e22", ᐃ[410], ᐃ[368], ᐃ[218]])));
		ᐃᐃ[ⵠ.ⲆΔΔⲆᐃ][ⵠ.ᐃⵠΔ].push(ⲆΔⲆ(ⵠⲆⵠᐃᐃⲆⵠ(1.2 * Ⲇ, ["#041e22", ᐃ[410], ᐃ[368], ᐃ[218]])));
		ᐃᐃ[ⵠ.ᐃⵠΔΔⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⵠΔΔⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔⵠⲆΔⵠΔⵠ(.8 * Ⲇ, [ᐃ[298], ᐃ[330], "#201851", ᐃ[519], "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", ᐃ[519], "#052830", ᐃ[494], ᐃ[330], ᐃ[193]]));
		ᐃᐃ[ⵠ.ᐃⵠΔΔⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔⵠⲆΔⵠΔⵠ(.8 * Ⲇ, [ᐃ[242], ᐃ[420], "#081B2D", ᐃ[519], "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", ᐃ[494], ᐃ[420], "#72898C"]));
		ᐃᐃ[ⵠ.ᐃᐃᐃᐃᐃⲆΔ] = ⲆΔⲆ(ΔⵠᐃᐃᐃᐃΔⲆⲆ(Ⲇ * .8, [ᐃ[330]]));
		ᐃᐃ[ⵠ.ΔᐃᐃᐃⲆ] = [];
		ᐃᐃ[ⵠ.ΔᐃᐃᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔⵠⲆΔⵠᐃ(.8 * Ⲇ, ᐃⵠⲆⲆᐃ, [ᐃ[298], "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
		ᐃᐃ[ⵠ.ΔᐃᐃᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔⵠⲆΔⵠᐃ(Ⲇ * .8, true, [ᐃ[242], ᐃ[45], ᐃ[ᐃᐃⲆⵠ], ᐃ[420], "#321C56", "#1C073D", ᐃ[193], "#1C0833", "#1B1238"]));
		ᐃᐃ[ⵠ.ΔⲆΔᐃⵠⵠᐃ] = ⲆΔⲆ(ᐃᐃⲆᐃᐃΔⲆᐃᐃ(.8 * Ⲇ, [ᐃ[330]]));
		ᐃᐃ[ⵠ.ᐃᐃⲆΔⲆᐃⲆ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⲆΔⲆᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆⲆΔΔᐃΔ(.4 * Ⲇ, ⲆⲆⵠⵠΔ, [ᐃ[298], "#db6f26", ᐃ[478], ᐃ[352], "#833813"], Ⲇⵠᐃ));
		ᐃᐃ[ⵠ.ᐃᐃⲆΔⲆᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆⲆΔΔᐃΔ(.4 * Ⲇ, true, [ᐃ[242], ᐃ[45], ᐃ[2], ᐃ[420]], 0));
		ᐃᐃ[ⵠ.ⵠⲆⵠⲆΔΔⲆ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⵠⲆΔΔⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆⲆΔΔᐃΔ(Ⲇ * .4, true, [ᐃ[298], "#d35e35", ᐃ[478], ᐃ[352], ᐃ[352]], 1));
		ᐃᐃ[ⵠ.ⵠⲆⵠⲆΔΔⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆⲆΔΔᐃΔ(.4 * Ⲇ, true, [ᐃ[242], ᐃ[45], ᐃ[2], ᐃ[420]], 1));
		ᐃᐃ[ⵠ.ⲆⲆᐃᐃΔᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⲆⲆᐃᐃΔᐃⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⲆⲆΔΔᐃΔ(Ⲇ * .4, true, [ᐃ[298], "#2973a5", ᐃ[478], "#ffff00", ᐃ[352], "#03243f", "#f2ec30", "#162f6d"], Ⲇⵠⵠᐃ));
		ᐃᐃ[ⵠ.ⲆⲆᐃᐃΔᐃⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⲆⲆΔΔᐃΔ(Ⲇ * .4, ᐃΔΔΔΔ, [ᐃ[242], ᐃ[45], ᐃ[2], ᐃ[420]], 0));
		ᐃᐃ[ⵠ.ⲆⵠⲆⲆⲆΔΔ] = ⲆΔⲆ(ΔⵠⲆᐃⵠⲆⵠ(Ⲇ * .4, [ᐃ[330]]));
		ᐃᐃ[ⵠ.ⵠΔΔΔᐃⵠⲆ] = ⲆΔⲆ(ΔⵠⲆᐃⵠⲆⵠ(Ⲇ * .4, [ᐃ[330]]));
		ᐃᐃ[ⵠ.ⵠΔⲆΔΔᐃⵠΔΔ] = ⲆΔⲆ(ΔⵠⲆᐃⵠⲆⵠ(.4 * Ⲇ, [ᐃ[330]]));
		ᐃᐃ[ⵠ.ⵠⵠⲆᐃᐃ] = ⲆΔⲆ(ΔᐃᐃⲆⵠⲆᐃ(.35 * Ⲇ, true, [ᐃ[414], ᐃ[547], ᐃ[247], ᐃ[214], ᐃ[547]], 1));
		ᐃᐃ[ⵠ.ΔΔⲆᐃⵠ] = ⲆΔⲆ(ⲆⲆΔⲆⵠᐃᐃ(.35 * Ⲇ, ⵠⲆᐃⵠᐃ, [ᐃ[298], "#ed5f4f", "#ce4545", ᐃ[478], "#e2dad7"], ⲆⲆⲆᐃ));
		ᐃᐃ[ⵠ.ⲆⵠⲆΔΔᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⵠⲆΔΔᐃⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃᐃΔΔᐃΔⵠ(.35 * Ⲇ, true, [ᐃ[298], ᐃ[226], ᐃ[330], ᐃ[330], ᐃ[193]], 1));
		ᐃᐃ[ⵠ.ⲆⵠⲆΔΔᐃⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃᐃΔΔᐃΔⵠ(.35 * Ⲇ, true, [ᐃ[242], "#613577", ᐃ[420], "#1C073D", ᐃ[193]], ᐃⵠᐃᐃ));
		ᐃᐃ[ⵠ.ⵠⵠⵠᐃᐃ] = [];
		ᐃᐃ[ⵠ.ⵠⵠⵠᐃᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃᐃΔΔᐃΔⵠ(Ⲇ * .35, ⵠᐃⵠⲆᐃ, [ᐃ[298], ᐃ[226], ᐃ[478], "#181414", ᐃ[193]], ⲆⲆΔ));
		ᐃᐃ[ⵠ.ⵠⵠⵠᐃᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃᐃΔΔᐃΔⵠ(Ⲇ * .35, true, [ᐃ[242], ᐃ[ΔⵠⲆᐃΔ], "#563f83", "#180f21", ᐃ[193]], Δⵠⵠ));
		ᐃᐃ[ⵠ.ⲆΔⵠᐃⵠᐃΔ] = [];
		ᐃᐃ[ⵠ.ⲆΔⵠᐃⵠᐃΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⵠΔⲆⲆΔⵠ(.35 * Ⲇ, ᐃⵠⵠⵠⲆ, [ᐃ[298], ᐃ[226], ᐃ[478]]));
		ᐃᐃ[ⵠ.ⲆΔⵠᐃⵠᐃΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⵠΔⲆⲆΔⵠ(.35 * Ⲇ, true, [ᐃ[242], ᐃ[10], "#563f83"]));
		ᐃᐃ[ⵠ.ⲆᐃΔⵠᐃⲆΔ] = [];
		ᐃᐃ[ⵠ.ⲆᐃΔⵠᐃⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔⲆⲆΔᐃᐃ(Ⲇ * .42, ᐃᐃΔⵠΔ, [ᐃ[298], ᐃ[226], ᐃ[478]]));
		ᐃᐃ[ⵠ.ⲆᐃΔⵠᐃⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔⲆⲆΔᐃᐃ(.42 * Ⲇ, ⲆⲆΔΔΔ, [ᐃ[242], ᐃ[10], "#563f83"]));
		ᐃᐃ[ⵠ.ᐃⵠⵠᐃΔⲆΔ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⵠᐃΔⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ᐃⵠΔⲆⲆΔⵠ(.35 * Ⲇ, true, [ᐃ[298], ᐃ[226], ᐃ[330]]));
		ᐃᐃ[ⵠ.ᐃⵠⵠᐃΔⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ᐃⵠΔⲆⲆΔⵠ(.35 * Ⲇ, true, [ᐃ[242], "#613577", ᐃ[420]]));
		ᐃᐃ[ⵠ.ⲆⲆⵠⲆΔⲆⲆ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⵠⲆΔⲆⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔⲆⲆΔᐃᐃ(Ⲇ * .42, ΔΔᐃᐃⵠⵠⲆ, [ᐃ[298], ᐃ[226], ᐃ[330]]));
		ᐃᐃ[ⵠ.ⲆⲆⵠⲆΔⲆⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔⲆⲆΔᐃᐃ(.42 * Ⲇ, true, [ᐃ[242], "#613577", ᐃ[420]]));
		ᐃᐃ[ⵠ.ⵠⵠⲆⲆⲆⲆᐃ] = ⲆΔⲆ(ⲆᐃᐃΔⵠⵠᐃ(Ⲇ * .35, [ᐃ[330]]));
		ᐃᐃ[ⵠ.ⵠⵠΔᐃⵠⵠΔ] = ⲆΔⲆ(ᐃⵠΔⲆⲆΔⵠ(Ⲇ * .35, ⲆⲆⲆⵠⲆ, [ΔⲆⲆⲆᐃ, ᐃ[330]]));
		ᐃᐃ[ⵠ.ᐃΔᐃᐃᐃⵠΔ] = ⲆΔⲆ(ΔΔⲆⲆΔᐃᐃ(.35 * Ⲇ, ⲆⲆⵠⵠΔ, [undefined, ᐃ[330]]));
		ᐃᐃ[ⵠ.ⵠⲆΔΔᐃⵠⵠ] = ⲆΔⲆ(ⲆᐃᐃΔⵠⵠᐃ(Ⲇ * .35, ["#22E066"]));
		ᐃᐃ[ⵠ.ᐃⵠⵠᐃᐃΔΔ] = ⲆΔⲆ(ᐃⵠΔⲆⲆΔⵠ(.35 * Ⲇ, ⲆΔΔⵠᐃⲆⵠ, [undefined, "#22E066"]));
		ᐃᐃ[ⵠ.ΔⲆⵠⵠΔⵠΔ] = ⲆΔⲆ(ΔΔⲆⲆΔᐃᐃ(.35 * Ⲇ, true, [ⵠΔΔⲆΔ, "#22E066"]));
		ᐃᐃ[ⵠ.ⲆⲆᐃΔᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⲆᐃΔᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⵠⲆⲆΔⲆ(Ⲇ * .3, true, [ᐃ[298], "#65A8B7", ᐃ[41], "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", ᐃ[41]]));
		ᐃᐃ[ⵠ.ⲆⲆᐃΔᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⵠⲆⲆΔⲆ(.3 * Ⲇ, true, [ᐃ[242], "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
		ᐃᐃ[ⵠ.ⲆⲆⵠⲆΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⵠⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆⲆⵠⵠᐃΔⲆ(Ⲇ * .45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", ᐃ[298], ᐃ[41]]));
		ᐃᐃ[ⵠ.ⲆⲆⵠⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆⲆⵠⵠᐃΔⲆ(.45 * Ⲇ, ᐃⵠⲆⲆᐃ, ["#235050", "#357472", "#081B2D", ᐃ[519], ᐃ[242], "#135367"]));
		ᐃᐃ[ⵠ.ΔΔΔⵠᐃ] = [];
		ᐃᐃ[ⵠ.ΔΔΔⵠᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆΔⵠᐃΔΔΔ(.63 * Ⲇ, true, [ᐃ[298], "#352E1E", ᐃ[339], ᐃ[425]]));
		ᐃᐃ[ⵠ.ΔΔΔⵠᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆΔⵠᐃΔΔΔ(.63 * Ⲇ, true, [ᐃ[242], "#071f22", ᐃ[338], ᐃ[ΔⲆⵠⵠⲆⵠⲆ]]));
		ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃ] = [];
		ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠΔⵠⵠΔᐃΔ(Ⲇ, true, [ᐃ[298], "#332715", ᐃ[339], ᐃ[425]]));
		ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠΔⵠⵠΔᐃΔ(Ⲇ, true, [ᐃ[242], "#071f22", ᐃ[338], ᐃ[17]]));
		ᐃᐃ[ⵠ.ᐃⲆΔⵠⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⲆΔⵠⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔᐃⲆⲆⲆⲆ;
		ᐃᐃ[ⵠ.ᐃⲆΔⵠⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆᐃⲆᐃⲆⲆⵠⲆᐃ;
		ᐃᐃ[ⵠ.ΔⲆΔⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔⲆΔⲆⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ΔΔᐃᐃⵠΔⲆ(.59 * Ⲇ, true, [ᐃ[414], ᐃ[222], ᐃ[477], ᐃ[479]]));
		ᐃᐃ[ⵠ.ΔⲆΔⲆⵠ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ΔΔᐃᐃⵠΔⲆ(Ⲇ * .59, ⲆᐃΔᐃⲆ, [ᐃ[242], "#062124", "#10373d", "#0f3333"]));
		ᐃᐃ[ⵠ.ᐃⵠΔᐃⵠ] = [ᐃᐃ[ⵠ.ΔⲆΔⲆⵠ]];
		ᐃᐃ[ⵠ.ᐃⵠΔᐃⵠ][ᐃΔΔⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⵠΔᐃⵠ][ΔⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃⵠΔᐃⵠ][1][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⲆⲆᐃΔⲆⲆⵠ(Ⲇ * .59, ᐃⵠⲆⲆᐃ, [ᐃ[414], ᐃ[222], ᐃ[477], ᐃ[479]]));
		ᐃᐃ[ⵠ.ᐃⵠΔᐃⵠ][ΔᐃⵠⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⲆⲆᐃΔⲆⲆⵠ(.59 * Ⲇ, true, [ᐃ[242], "#062124", "#10373d", "#0f3333"]));
		ᐃᐃ[ⵠ.ᐃⵠΔᐃⵠ][Ⲇᐃⵠⵠ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠⵠⵠᐃⲆΔᐃ(.59 * Ⲇ, ⵠⲆⵠᐃⵠ, [ᐃ[414], ᐃ[222], ᐃ[477], ᐃ[479]]));
		ᐃᐃ[ⵠ.ᐃⵠΔᐃⵠ][2][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠⵠⵠᐃⲆΔᐃ(Ⲇ * .59, true, [ᐃ[242], "#062124", "#10373d", "#0f3333"]));
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠⲆ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠⲆ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(ⵠᐃⵠⲆ - Math.PI / 2, ᐃⵠⲆⵠⲆⲆᐃ(.6 * Ⲇ, true, [ᐃ[298], ᐃ[34], ᐃ[339], "#594225", ᐃ[3]])));
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠⲆ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠᐃⲆⲆ(3 - Math.PI / ᐃᐃⵠⵠ, ᐃⵠⲆⵠⲆⲆᐃ(.6 * Ⲇ, true, [ᐃ[242], "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
		ᐃᐃ[ⵠ.ⲆᐃᐃⲆΔ] = [];
		ᐃᐃ[ⵠ.ⲆᐃᐃⲆΔ][ⵠ.ⵠⲆⵠ] = ⲆΔⲆ(ⵠΔΔⲆΔΔᐃ(.3 * Ⲇ, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
		ᐃᐃ[ⵠ.ⲆᐃᐃⲆΔ][ⵠ.ᐃⵠΔ] = ⲆΔⲆ(ⵠΔΔⲆΔΔᐃ(.3 * Ⲇ, ["#1F5453", ᐃ[266], "#1D4947", "#1F5453", "#0c2629"], 0));
		ᐃᐃ[ⵠ.ΔΔⲆΔⵠⲆΔ] = ⲆΔⲆ(ΔⲆⵠⵠΔΔΔΔⲆ(Ⲇ * .3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
		ᐃᐃ[ⵠ.ⵠⵠⵠΔⲆⲆΔ] = ⲆΔⲆ(ⵠᐃᐃᐃΔᐃᐃΔᐃ(.3 * Ⲇ, [ᐃ[439]]));
		ᐃᐃ[ⵠ.ΔⲆⵠᐃᐃᐃⵠ] = ΔᐃᐃⲆ(1, [{
			f: ΔⵠⵠᐃⵠⲆⵠ,
			x: 0,
			y: 0,
			a: 1,
			r: ᐃⲆᐃ,
			c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
		}], .25, [ᐃ[372], ᐃ[175], ᐃ[43]], .7);
		ᐃᐃ[ⵠ.ᐃΔⲆⵠᐃ] = ΔᐃᐃⲆ(1.5, [{
			f: ⵠΔᐃΔᐃᐃⵠ,
			x: ⲆⲆᐃ,
			y: ⵠⵠⲆΔ,
			a: 1,
			r: 0,
			c: [ᐃ[223], "#750a0a", "#991616", ᐃ[223]]
		}], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9);
		ᐃᐃ[ⵠ.ΔᐃⲆⵠΔⵠⲆ] = ⲆⵠΔΔⵠⲆΔ(Ⲇ * .35, ["#072428", "#67A242", "#67A242"], ⲆⲆΔ);
		ᐃᐃ[ⵠ.ⲆᐃᐃⲆΔᐃⵠ] = ⲆⵠΔΔⵠⲆΔ(Ⲇ * .35, ["#172130", "#649BB2", ᐃ[193], ᐃ[193], "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], ⵠᐃᐃ);
		ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆⲆⲆ] = ⲆⵠΔΔⵠⲆΔ(Ⲇ * .35, ["#3F0B11", "#B13424", ᐃ[193], "#B13424", "#7e180b"], ᐃⵠΔⲆ);
		ᐃᐃ[ⵠ.ᐃΔⵠᐃΔⲆⵠ] = ⲆⵠΔΔⵠⲆΔ(Ⲇ * .35, ["#1B2F4C", "#29488E", "#76c3e8", ᐃ[478]], 3);
		!ᐃⲆΔᐃᐃⲆⲆ ? ᐃᐃ[ⵠ.ⵠΔⲆᐃⵠⵠΔ] = ⲆΔⲆ(ⵠΔⵠᐃⵠⵠⲆⵠⵠ(Ⲇ)) : ᐃᐃ[ⵠ.ⵠΔⲆᐃⵠⵠΔ] = ⲆΔⲆ(ᐃΔⵠⲆⵠⵠΔⲆⲆ(Ⲇ));
		!ᐃⲆΔᐃᐃⲆⲆ ? ᐃᐃ[ⵠ.ⵠⵠΔⵠⲆᐃⲆ] = ⲆΔⲆ(ΔⵠⲆΔⲆⵠᐃᐃᐃ(Ⲇ)) : ᐃᐃ[ⵠ.ⵠⵠΔⵠⲆᐃⲆ] = ⲆΔⲆ(ᐃⲆⵠⲆΔᐃⵠᐃᐃ(.75));
		if (!ᐃⲆΔᐃᐃⲆⲆ) ᐃᐃ[ⵠ.ⲆⲆⲆⲆΔΔⵠ] = ⲆΔⲆ(ⵠΔⲆⲆΔⲆᐃ(Ⲇ));
		else ᐃᐃ[ⵠ.ⲆⲆⲆⲆΔΔⵠ] = ⲆΔⲆ(ⵠΔⲆⲆΔⲆᐃ(.75));
		ᐃᐃ[ⵠ.ΔᐃΔⲆⲆⲆᐃ] = ⲆΔⲆ(ΔⲆⵠΔᐃⲆᐃ(Ⲇ * .16, ᐃᐃΔⵠΔ, ["rgba(0, 0, 0, 0)", ᐃ[193], ᐃ[193], ᐃ[193], ᐃ[193]]));
		ᐃᐃ[ⵠ.ΔΔⵠΔΔⵠⵠ] = ⲆΔⲆ(ⵠᐃⲆⲆ(5.8, ΔⵠΔⵠⲆᐃΔ(Ⲇ * .15, true, ["rgba(0, 0, 0, 0)", ᐃ[193], ᐃ[193], ᐃ[193], ᐃ[193]])));
		ᐃᐃ[ⵠ.ⲆΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃᐃⵠⵠⲆⵠ] = [];
		for (var ᐃⲆ = ⵠᐃⲆⵠ; ᐃΔᐃᐃ.ⵠᐃⲆΔⵠᐃᐃ + ⲆΔⲆΔ > ᐃⲆ; ᐃⲆ++) ᐃᐃ[ⵠ.ⵠᐃᐃⵠⵠⲆⵠ][ᐃⲆ] = ⲆⵠᐃⲆⲆ(Ⲇ, "" + (ᐃⲆ + 1), 12, ᐃ[448]);
		ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃΔⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃΔⵠ].push(ⲆΔⲆ(ⵠΔⲆΔⲆⲆΔ(Ⲇ * .12, ["#442F19", "#2C2112", ᐃ[549], ᐃ[208], ᐃ[316]])));
		ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃΔⵠ].push(ⲆΔⲆ(ⵠΔⲆΔⲆⲆΔ(.12 * Ⲇ, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", ᐃ[316]], ΔⲆⵠⲆ)));
		ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃΔⵠ].push(ⲆΔⲆ(ⵠΔⲆΔⲆⲆΔ(Ⲇ * .12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], ΔΔΔᐃ)));
		ᐃᐃ[ⵠ.ⲆᐃᐃⵠΔᐃΔ] = [];
		ᐃᐃ[ⵠ.ⲆᐃᐃⵠΔᐃΔ].push(ⲆΔⲆ(ⵠⵠⵠⲆᐃⵠⵠⲆⵠ(.22 * Ⲇ)));
		ᐃᐃ[ⵠ.ⲆᐃᐃⵠΔᐃΔ].push(ⲆΔⲆ(ᐃᐃᐃⵠⲆⲆΔⵠᐃ(Ⲇ * .22)));
		ᐃᐃ[ⵠ.ᐃⵠΔⲆⲆⲆΔ] = ⲆΔⲆ(ᐃⵠⵠⵠΔᐃⵠⵠⲆ(Ⲇ * .22));
		ᐃᐃ[ⵠ.ΔⲆΔΔⵠ] = [];
		ᐃᐃ[ⵠ.ΔⲆΔΔⵠ].push(ⲆΔⲆ(ᐃⲆⵠⵠⵠᐃΔ(1.5 * Ⲇ, ["#795026", ᐃ[456], ᐃ[316]], 0)));
		ᐃᐃ[ⵠ.ΔⲆΔΔⵠ].push(ⲆΔⲆ(ᐃⲆⵠⵠⵠᐃΔ(Ⲇ * 1.5, ["#8f5e2c", "#7a5126", ᐃ[316]], ⵠⵠⵠⲆ)));
		ᐃᐃ[ⵠ.ΔⲆΔΔⵠ].push(ⲆΔⲆ(ᐃⲆⵠⵠⵠᐃΔ(Ⲇ * 1.5, ["#67441f", "#573819", "#9c6e08"], Δⵠᐃ)));
		ᐃᐃ[ⵠ.ᐃⵠΔΔᐃΔⵠ] = Δᐃ.ᐃⵠΔΔᐃΔⵠ;
		ᐃᐃ[ⵠ.ⵠⲆⲆΔⲆΔΔ] = Δᐃ.ⵠⲆⲆΔⲆΔΔ;
		ᐃᐃ[ⵠ.ⵠⲆΔⵠΔⵠⵠ] = Δᐃ.ⵠⲆΔⵠΔⵠⵠ;
		ᐃᐃ[ⵠ.ᐃᐃⵠΔᐃⵠᐃ] = Δᐃ.ᐃᐃⵠΔᐃⵠᐃ;
		ᐃᐃ[ⵠ.ⲆΔΔⵠⲆᐃⲆ] = ⲆⵠᐃⲆⲆ(Ⲇ, "Show spectators", 25, ᐃ[448], ⵠⲆⵠᐃⵠⵠΔ, undefined, ᐃ[76], 5, 220);
		ᐃᐃ[ⵠ.ΔⵠᐃⵠΔᐃⵠ] = ⲆⵠᐃⲆⲆ(Ⲇ, "Reconnecting...", 30, ᐃ[448])
	}

	function ᐃⲆⵠⲆⲆⵠᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 202;
		ᐃⵠ.height = 202 * Ⲇ;
		Δ.translate(ⲆΔⲆΔ * Ⲇ, 1 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ᐃΔⲆΔ;
		Δ.translate(ⲆⲆΔ, Ⲇ * 10);
		Δ.save();
		Δ.translate(Ⲇ * 98, 41.15177917480469 * Ⲇ);
		Δ.rotate(.8);
		ᐃΔⵠ(Δ, -16 * Ⲇ, -16.5 * Ⲇ, Ⲇ * 32, 33 * Ⲇ, Ⲇ * ⲆΔᐃᐃⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 98, Ⲇ * 22.5089111328125);
		Δ.bezierCurveTo(97.5 * Ⲇ, Ⲇ * 41.5089111328125, 97.5 * Ⲇ, Ⲇ * 41.5089111328125, 97 * Ⲇ, 60.5089111328125 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.save();
		Δ.translate(147.5 * Ⲇ, 69.5089111328125 * Ⲇ);
		Δ.rotate(.2);
		ᐃΔⵠ(Δ, Ⲇ * -15.5, Ⲇ * -ⵠᐃⲆⵠΔⲆⵠ, Ⲇ * 31, 32 * Ⲇ, 7 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(163 * Ⲇ, 59.50892639160156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 147, Ⲇ * 69.50892639160156, 127 * Ⲇ, 82.50892639160156 * Ⲇ, 131 * Ⲇ, Ⲇ * 79.50892639160156);
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.save();
		Δ.translate(Ⲇ * 143.5, Ⲇ * 128.2946319580078);
		Δ.rotate(1.24);
		ᐃΔⵠ(Δ, -16.5 * Ⲇ, Ⲇ * -17.5, Ⲇ * 33, Ⲇ * 35, Ⲇ * 7);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 162, 135.93748474121094 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 143.5, 128.43748474121094 * Ⲇ, Ⲇ * 129, 120.93748474121094 * Ⲇ, Ⲇ * 125, 120.93748474121094 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆⵠ]);
		Δ.save();
		Δ.translate(Ⲇ * 99, 156.08035278320312 * Ⲇ);
		Δ.rotate(.84);
		ᐃΔⵠ(Δ, -18 * Ⲇ, Ⲇ * -ⵠⲆΔⵠᐃᐃⲆ, Ⲇ * 36, 36 * Ⲇ, 7 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(98 * Ⲇ, Ⲇ * 136.08035278320312);
		Δ.bezierCurveTo(Ⲇ * 98, Ⲇ * 156.08035278320312, 98 * Ⲇ, Ⲇ * 156.08035278320312, 98 * Ⲇ, Ⲇ * 176.08035278320312);
		ⵠᐃ(Δ, Δⵠ[ⵠⲆΔᐃ]);
		Δ.save();
		Δ.translate(Ⲇ * 54, 72.22320556640625 * Ⲇ);
		Δ.rotate(1.32);
		ᐃΔⵠ(Δ, Ⲇ * -18, Ⲇ * -ΔⲆⲆⵠⲆΔΔ, Ⲇ * 36, 38 * Ⲇ, 7 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 34, Ⲇ * 60.79463195800781);
		Δ.bezierCurveTo(Ⲇ * 53.5, Ⲇ * 72.29463195800781, 69 * Ⲇ, 79.79463195800781 * Ⲇ, 73 * Ⲇ, 83.79463195800781 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.save();
		Δ.translate(49 * Ⲇ, Ⲇ * 127.29463195800781);
		Δ.rotate(1.76);
		ᐃΔⵠ(Δ, Ⲇ * -20, Ⲇ * -17.5, Ⲇ * 40, Ⲇ * 35, Ⲇ * ⵠᐃⵠⲆⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 30, 141.7946319580078 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 47, Ⲇ * 130.2946319580078, 64 * Ⲇ, Ⲇ * 119.79463195800781, 64 * Ⲇ, Ⲇ * 118.79463195800781);
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.globalAlpha = Δⵠᐃ;
		Δ.translate(0, Ⲇ * -10);
		Δ.save();
		Δ.translate(98 * Ⲇ, 41.15177917480469 * Ⲇ);
		Δ.rotate(.8);
		ᐃΔⵠ(Δ, -ⲆⵠΔᐃΔ * Ⲇ, -16.5 * Ⲇ, Ⲇ * 32, 33 * Ⲇ, Ⲇ * ⵠⵠᐃⵠᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔⲆⵠΔⲆ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 98, Ⲇ * 22.5089111328125);
		Δ.bezierCurveTo(97.5 * Ⲇ, Ⲇ * 41.5089111328125, Ⲇ * 97.5, 41.5089111328125 * Ⲇ, 97 * Ⲇ, 60.5089111328125 * Ⲇ);
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[ΔⲆⵠΔⲆ], Ⲇ * 5);
		Δ.save();
		Δ.translate(147.5 * Ⲇ, Ⲇ * 69.5089111328125);
		Δ.rotate(.2);
		ᐃΔⵠ(Δ, -15.5 * Ⲇ, -16 * Ⲇ, Ⲇ * 31, 32 * Ⲇ, Ⲇ * 7);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔⲆΔⲆ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(163 * Ⲇ, 59.50892639160156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 147, 69.50892639160156 * Ⲇ, Ⲇ * 127, 82.50892639160156 * Ⲇ, 131 * Ⲇ, 79.50892639160156 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[ΔⲆⵠΔⲆ], ⲆᐃΔⲆⵠ * Ⲇ);
		Δ.save();
		Δ.translate(143.5 * Ⲇ, 128.2946319580078 * Ⲇ);
		Δ.rotate(1.24);
		ᐃΔⵠ(Δ, -16.5 * Ⲇ, Ⲇ * -17.5, 33 * Ⲇ, Ⲇ * 35, ᐃᐃⲆΔΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔΔ], Δⵠ[ᐃΔⵠᐃⲆ], ΔΔⵠΔⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 162, Ⲇ * 135.93748474121094);
		Δ.bezierCurveTo(143.5 * Ⲇ, Ⲇ * 128.43748474121094, 129 * Ⲇ, 120.93748474121094 * Ⲇ, 125 * Ⲇ, Ⲇ * 120.93748474121094);
		ⵠᐃ(Δ, ΔⲆⲆⲆᐃ, Δⵠ[ⵠΔᐃⲆ], ⲆΔⲆᐃᐃ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 99, 156.08035278320312 * Ⲇ);
		Δ.rotate(.84);
		ᐃΔⵠ(Δ, -ΔΔⵠΔᐃᐃᐃ * Ⲇ, -18 * Ⲇ, Ⲇ * 36, 36 * Ⲇ, Ⲇ * ⵠⵠᐃⵠᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 98, 136.08035278320312 * Ⲇ);
		Δ.bezierCurveTo(98 * Ⲇ, Ⲇ * 156.08035278320312, Ⲇ * 98, 156.08035278320312 * Ⲇ, 98 * Ⲇ, Ⲇ * 176.08035278320312);
		ⵠᐃ(Δ, undefined, Δⵠ[4], Ⲇ * 5);
		Δ.save();
		Δ.translate(54 * Ⲇ, 72.22320556640625 * Ⲇ);
		Δ.rotate(1.32);
		ᐃΔⵠ(Δ, -18 * Ⲇ, -19 * Ⲇ, 36 * Ⲇ, 38 * Ⲇ, 7 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ], Δⵠ[ΔᐃᐃΔ], Ⲇ * ⲆⲆⲆᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(34 * Ⲇ, Ⲇ * 60.79463195800781);
		Δ.bezierCurveTo(Ⲇ * 53.5, Ⲇ * 72.29463195800781, Ⲇ * 69, Ⲇ * 79.79463195800781, Ⲇ * 73, 83.79463195800781 * Ⲇ);
		ⵠᐃ(Δ, ᐃⲆⲆⲆᐃ, Δⵠ[ᐃΔΔΔⲆ], 5 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 49, 127.29463195800781 * Ⲇ);
		Δ.rotate(1.76);
		ᐃΔⵠ(Δ, -20 * Ⲇ, -17.5 * Ⲇ, 40 * Ⲇ, 35 * Ⲇ, ᐃᐃⲆΔΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(30 * Ⲇ, Ⲇ * 141.7946319580078);
		Δ.bezierCurveTo(47 * Ⲇ, 130.2946319580078 * Ⲇ, Ⲇ * 64, 119.79463195800781 * Ⲇ, 64 * Ⲇ, 118.79463195800781 * Ⲇ);
		ⵠᐃ(Δ, ΔⲆⲆⲆᐃ, Δⵠ[ΔⵠⲆⵠᐃ], ⲆΔⲆᐃᐃ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ᐃΔⲆΔ;
		Δ.translate(ᐃⲆΔᐃ, Ⲇ * 10);
		Δ.save();
		Δ.translate(98 * Ⲇ, Ⲇ * 99);
		ΔΔΔΔ(Δ, ⵠⲆⲆΔᐃ, 70.28669492273468 * Ⲇ, Ⲇ * ⵠΔⵠᐃⵠ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.save();
		Δ.translate(Ⲇ * 98, Ⲇ * 99);
		ΔΔΔΔ(Δ, ΔⵠΔᐃⵠ, 56.455940020351264 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.globalAlpha = Δⵠᐃ;
		Δ.translate(0, -ⵠΔΔᐃᐃ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 98, 99 * Ⲇ);
		ΔΔΔΔ(Δ, 6, Ⲇ * 70.28669492273468, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[6], ΔⲆⵠⵠ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 98, 99 * Ⲇ);
		ΔΔΔΔ(Δ, ⲆⵠⲆΔⲆ, 56.455940020351264 * Ⲇ, Ⲇ * ⵠᐃⲆⲆΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⵠΔᐃ], Δⵠ[ᐃⵠΔⵠᐃ], ᐃᐃⲆΔΔ * Ⲇ);
		return ᐃⵠ
	}

	function ⲆᐃᐃⵠᐃⲆⲆ(ⲆΔⵠⲆⲆΔⵠ, ΔⲆᐃᐃᐃⲆΔ) {
		ᐃⵠΔᐃΔⲆᐃ(ⵠᐃΔᐃⵠ, ⲆΔⵠⲆⲆΔⵠ, ΔⲆᐃᐃᐃⲆΔ);
		const ⲆⲆΔⵠⵠᐃⲆⵠⵠ = ΔⲆᐃⵠⲆΔⲆ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[ᐃΔⲆΔ], Δⵠⵠᐃ[ⵠΔⵠᐃ], Δⵠⵠᐃ[ᐃⵠᐃᐃ], Δⵠⵠᐃ[ⲆⲆᐃ]);
		const ΔⵠᐃᐃⲆⲆⵠᐃⵠ = ⵠⵠᐃΔΔᐃⵠ(Δⵠⵠᐃ[1], Δⵠⵠᐃ[ⵠᐃⵠ], Δⵠⵠᐃ[ᐃⵠⵠⵠ], Δⵠⵠᐃ[ⵠΔΔⲆ], Δⵠⵠᐃ[1], Δⵠⵠᐃ[ⵠΔΔⲆ]);
		const ⲆⲆᐃᐃΔΔᐃⵠΔ = ⲆⲆΔⵠⵠᐃⲆⵠⵠ ^ 63366;
		return ⲆⲆᐃᐃΔΔᐃⵠΔ
	}

	function ΔⵠⵠⵠⲆⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 450;
		ᐃⵠ.height = 790 * Ⲇ;
		Δ.translate(ⲆⵠⲆΔᐃ * Ⲇ, ΔΔⵠⵠ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? ⲆᐃΔⵠ : 0;
		ⵠΔᐃ(Δ, 178.5 * Ⲇ, 172.828125 * Ⲇ, 150 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[0], Ⲇ * 65);
		ⵠΔᐃ(Δ, 178.5 * Ⲇ, Ⲇ * 172.828125, 150 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[0], Ⲇ * 55);
		Δ.closePath();
		Δ.save();
		Δ.translate(177 * Ⲇ, 512.328125 * Ⲇ);
		ᐃΔⵠ(Δ, -25 * Ⲇ, -202.5 * Ⲇ, 65 * Ⲇ, Ⲇ * 405, 25 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.save();
		Δ.translate(Ⲇ * 136, 581.828125 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -39, -23 * Ⲇ, 78 * Ⲇ, 46 * Ⲇ, 25 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⲆⲆ]);
		Δ.save();
		Δ.translate(Ⲇ * 135.5, 663.828125 * Ⲇ);
		ᐃΔⵠ(Δ, -39.5 * Ⲇ, Ⲇ * -22, Ⲇ * 79, Ⲇ * 44, 25 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(114 * Ⲇ, Ⲇ * 594.828125);
		Δ.bezierCurveTo(175 * Ⲇ, Ⲇ * 596.828125, 163 * Ⲇ, 596.828125 * Ⲇ, Ⲇ * 172, 594.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 171.5, 633.828125 * Ⲇ, Ⲇ * 171.5, 633.828125 * Ⲇ, Ⲇ * 171, Ⲇ * 672.828125);
		Δ.bezierCurveTo(Ⲇ * 110, 673.828125 * Ⲇ, Ⲇ * 140.5, 673.328125 * Ⲇ, Ⲇ * 110, Ⲇ * 673.828125);
		Δ.bezierCurveTo(110.5 * Ⲇ, 661.828125 * Ⲇ, 110.5 * Ⲇ, 661.828125 * Ⲇ, 111 * Ⲇ, 649.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 157, Ⲇ * 633.828125, 134 * Ⲇ, Ⲇ * 607.828125, 114 * Ⲇ, 594.828125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(ⵠᐃⲆⵠ, ΔΔⵠⲆΔ * Ⲇ);
		Δ.moveTo(140 * Ⲇ, Ⲇ * 294.828125);
		Δ.bezierCurveTo(Ⲇ * 212, Ⲇ * 295.828125, 176.5 * Ⲇ, Ⲇ * 295.328125, Ⲇ * 213, 295.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 201.5, Ⲇ * 325.328125, Ⲇ * 201.5, Ⲇ * 325.328125, 190 * Ⲇ, 354.828125 * Ⲇ);
		Δ.bezierCurveTo(175.5 * Ⲇ, 355.828125 * Ⲇ, 175.5 * Ⲇ, Ⲇ * 355.828125, 161 * Ⲇ, 356.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 154.5, 328.828125 * Ⲇ, Ⲇ * 154.5, 328.828125 * Ⲇ, Ⲇ * 148, Ⲇ * 300.828125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(ⵠᐃᐃⵠ, -5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(159 * Ⲇ, 679.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 180, 665.828125 * Ⲇ, Ⲇ * 155, 675.828125 * Ⲇ, 151 * Ⲇ, 671.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 154.5, Ⲇ * 685.328125, Ⲇ * 154.5, 685.328125 * Ⲇ, 158 * Ⲇ, Ⲇ * 698.828125);
		Δ.bezierCurveTo(Ⲇ * 171, 699.828125 * Ⲇ, 171 * Ⲇ, 699.828125 * Ⲇ, 184 * Ⲇ, 700.828125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ]);
		Δ.save();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(157 * Ⲇ, 548.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 157, Ⲇ * 561.828125, 157 * Ⲇ, 561.828125 * Ⲇ, Ⲇ * 157, Ⲇ * 574.828125);
		Δ.bezierCurveTo(Ⲇ * 132.5, 580.828125 * Ⲇ, Ⲇ * 132.5, 580.828125 * Ⲇ, 108 * Ⲇ, Ⲇ * 586.828125);
		Δ.bezierCurveTo(112 * Ⲇ, 599.828125 * Ⲇ, 111 * Ⲇ, 593.828125 * Ⲇ, 112 * Ⲇ, Ⲇ * 599.828125);
		Δ.bezierCurveTo(159 * Ⲇ, 603.828125 * Ⲇ, 126.5 * Ⲇ, Ⲇ * 601.328125, 141 * Ⲇ, Ⲇ * 602.828125);
		Δ.bezierCurveTo(145 * Ⲇ, 641.828125 * Ⲇ, Ⲇ * 143.5, 623.828125 * Ⲇ, Ⲇ * 146, 644.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 129.5, Ⲇ * 645.328125, 129.5 * Ⲇ, 645.328125 * Ⲇ, Ⲇ * 113, 645.828125 * Ⲇ);
		Δ.bezierCurveTo(107.5 * Ⲇ, 652.828125 * Ⲇ, 107.5 * Ⲇ, 652.828125 * Ⲇ, 102 * Ⲇ, 659.828125 * Ⲇ);
		Δ.bezierCurveTo(104 * Ⲇ, 669.328125 * Ⲇ, Ⲇ * 104, 669.328125 * Ⲇ, 106 * Ⲇ, Ⲇ * 678.828125);
		Δ.bezierCurveTo(Ⲇ * 145, 679.328125 * Ⲇ, Ⲇ * 145, Ⲇ * 679.328125, Ⲇ * 184, 679.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 185, 615.828125 * Ⲇ, Ⲇ * 185, 615.828125 * Ⲇ, 186 * Ⲇ, Ⲇ * 551.828125);
		Δ.bezierCurveTo(Ⲇ * 172.5, 551.328125 * Ⲇ, 172.5 * Ⲇ, 551.328125 * Ⲇ, 159 * Ⲇ, Ⲇ * 550.828125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], ⵠⵠᐃⵠᐃ * Ⲇ);
		Δ.restore();
		Δ.globalAlpha = 1;
		Δ.translate(ⵠⵠᐃⲆΔⲆΔ * Ⲇ, 35 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 178.5, Ⲇ * 172.828125, Ⲇ * 150);
		ⵠᐃ(Δ, ⵠᐃⲆⵠⲆ, Δⵠ[2], 95 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 178.5, Ⲇ * 172.828125, Ⲇ * 150);
		ⵠᐃ(Δ, ΔⲆᐃΔᐃ, Δⵠ[1], Ⲇ * 55);
		Δ.closePath();
		Δ.save();
		Δ.translate(Ⲇ * 177, 512.328125 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -25, Ⲇ * -202.5, 65 * Ⲇ, Ⲇ * 405, Ⲇ * 25);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠⲆᐃⵠ], Ⲇ * ΔⵠΔΔΔ);
		Δ.save();
		Δ.translate(Ⲇ * 136, Ⲇ * 581.828125);
		ᐃΔⵠ(Δ, Ⲇ * -39, -23 * Ⲇ, 78 * Ⲇ, 46 * Ⲇ, 25 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * 20);
		Δ.save();
		Δ.translate(Ⲇ * 135.5, 663.828125 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -39.5, -22 * Ⲇ, 79 * Ⲇ, 44 * Ⲇ, Ⲇ * 25);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃΔⲆΔ], Δⵠ[2], 20 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(114 * Ⲇ, 594.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 175, Ⲇ * 596.828125, Ⲇ * 163, Ⲇ * 596.828125, 172 * Ⲇ, 594.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 171.5, 633.828125 * Ⲇ, Ⲇ * 171.5, Ⲇ * 633.828125, 171 * Ⲇ, 672.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 110, Ⲇ * 673.828125, Ⲇ * 140.5, Ⲇ * 673.328125, Ⲇ * 110, Ⲇ * 673.828125);
		Δ.bezierCurveTo(110.5 * Ⲇ, Ⲇ * 661.828125, Ⲇ * 110.5, Ⲇ * 661.828125, 111 * Ⲇ, 649.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 157, 633.828125 * Ⲇ, Ⲇ * 134, Ⲇ * 607.828125, 114 * Ⲇ, Ⲇ * 594.828125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(0, Ⲇ * 5);
		Δ.moveTo(123 * Ⲇ, Ⲇ * 294.828125);
		Δ.bezierCurveTo(Ⲇ * 212, Ⲇ * 295.828125, Ⲇ * 190.5, 295.328125 * Ⲇ, Ⲇ * 250, 295.828125 * Ⲇ);
		Δ.bezierCurveTo(231.5 * Ⲇ, 325.328125 * Ⲇ, Ⲇ * 231.5, 325.328125 * Ⲇ, Ⲇ * 220, 354.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 175.5, Ⲇ * 355.828125, Ⲇ * 175.5, 355.828125 * Ⲇ, 140 * Ⲇ, Ⲇ * 356.828125);
		Δ.bezierCurveTo(123.5 * Ⲇ, 328.828125 * Ⲇ, 123.5 * Ⲇ, 328.828125 * Ⲇ, Ⲇ * 123, 294.828125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ]);
		Δ.translate(0, Ⲇ * -ᐃⵠΔⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 159, 679.828125 * Ⲇ);
		Δ.bezierCurveTo(180 * Ⲇ, Ⲇ * 665.828125, 155 * Ⲇ, Ⲇ * 675.828125, 151 * Ⲇ, Ⲇ * 671.828125);
		Δ.bezierCurveTo(154.5 * Ⲇ, Ⲇ * 685.328125, Ⲇ * 154.5, 685.328125 * Ⲇ, Ⲇ * 158, Ⲇ * 698.828125);
		Δ.bezierCurveTo(171 * Ⲇ, Ⲇ * 699.828125, 171 * Ⲇ, 699.828125 * Ⲇ, Ⲇ * 184, Ⲇ * 700.828125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.save();
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 157, Ⲇ * 548.828125);
		Δ.bezierCurveTo(Ⲇ * 157, 561.828125 * Ⲇ, Ⲇ * 157, 561.828125 * Ⲇ, 157 * Ⲇ, 574.828125 * Ⲇ);
		Δ.bezierCurveTo(132.5 * Ⲇ, Ⲇ * 580.828125, 132.5 * Ⲇ, 580.828125 * Ⲇ, 108 * Ⲇ, 586.828125 * Ⲇ);
		Δ.bezierCurveTo(112 * Ⲇ, Ⲇ * 599.828125, Ⲇ * 111, 593.828125 * Ⲇ, Ⲇ * 112, 599.828125 * Ⲇ);
		Δ.bezierCurveTo(159 * Ⲇ, 603.828125 * Ⲇ, 126.5 * Ⲇ, Ⲇ * 601.328125, 141 * Ⲇ, 602.828125 * Ⲇ);
		Δ.bezierCurveTo(145 * Ⲇ, Ⲇ * 641.828125, Ⲇ * 143.5, Ⲇ * 623.828125, Ⲇ * 146, Ⲇ * 644.828125);
		Δ.bezierCurveTo(129.5 * Ⲇ, Ⲇ * 645.328125, Ⲇ * 129.5, Ⲇ * 645.328125, 113 * Ⲇ, Ⲇ * 645.828125);
		Δ.bezierCurveTo(Ⲇ * 107.5, Ⲇ * 652.828125, 107.5 * Ⲇ, 652.828125 * Ⲇ, Ⲇ * 102, 659.828125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 104, 669.328125 * Ⲇ, 104 * Ⲇ, 669.328125 * Ⲇ, 106 * Ⲇ, Ⲇ * 678.828125);
		Δ.bezierCurveTo(Ⲇ * 145, 679.328125 * Ⲇ, 145 * Ⲇ, Ⲇ * 679.328125, 184 * Ⲇ, 679.828125 * Ⲇ);
		Δ.bezierCurveTo(185 * Ⲇ, 615.828125 * Ⲇ, Ⲇ * 185, 615.828125 * Ⲇ, Ⲇ * 186, Ⲇ * 551.828125);
		Δ.bezierCurveTo(Ⲇ * 172.5, 551.328125 * Ⲇ, 172.5 * Ⲇ, Ⲇ * 551.328125, Ⲇ * 159, Ⲇ * 550.828125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[1], ⲆΔᐃᐃⲆ * Ⲇ);
		Δ.restore();
		return ᐃⵠ
	}

	function ᐃⵠᐃᐃⵠᐃⵠᐃΔ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		if (0 == ᐃⲆ) {
			ᐃⵠ.width = 543 * Ⲇ;
			ᐃⵠ.height = Ⲇ * 393;
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 109.5, Ⲇ * 154.046875);
			Δ.bezierCurveTo(143.5 * Ⲇ, 96.046875 * Ⲇ, 208.5 * Ⲇ, 92.046875 * Ⲇ, 288.5 * Ⲇ, 97.046875 * Ⲇ);
			Δ.bezierCurveTo(357.5 * Ⲇ, 104.046875 * Ⲇ, 414.5 * Ⲇ, Ⲇ * 132.046875, Ⲇ * 422.5, Ⲇ * 166.046875);
			Δ.bezierCurveTo(Ⲇ * 431.5, 192.046875 * Ⲇ, Ⲇ * 400.5, 261.046875 * Ⲇ, 332.5 * Ⲇ, 271.046875 * Ⲇ);
			Δ.bezierCurveTo(272.5 * Ⲇ, Ⲇ * 279.046875, Ⲇ * 159.5, 285.046875 * Ⲇ, 126.5 * Ⲇ, 260.046875 * Ⲇ);
			Δ.bezierCurveTo(99.5 * Ⲇ, Ⲇ * 238.046875, 95.5 * Ⲇ, Ⲇ * 183.046875, Ⲇ * 109.5, Ⲇ * 154.046875);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0])
		} else ᐃⲆ == ⲆⲆⲆᐃ ? (ᐃⵠ.width = Ⲇ * 543, ᐃⵠ.height = Ⲇ * 470, Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 216.23297119140625, Ⲇ * 100.34944152832031), Δ.bezierCurveTo(Ⲇ * 349.23297119140625, Ⲇ * 110.34944152832031, Ⲇ * 422.23297119140625, Ⲇ * 142.3494415283203, 434.23297119140625 * Ⲇ, Ⲇ * 194.3494415283203), Δ.bezierCurveTo(451.23297119140625 * Ⲇ, Ⲇ * 268.3494415283203, Ⲇ * 397.23297119140625, 367.3494415283203 * Ⲇ, Ⲇ * 313.23297119140625, 351.3494415283203 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 148.23297119140625, Ⲇ * 330.3494415283203, 106.23297119140625 * Ⲇ, 319.3494415283203 * Ⲇ, 87.23297119140625 * Ⲇ, Ⲇ * 248.3494415283203), Δ.bezierCurveTo(Ⲇ * 63.23297119140625, 164.3494415283203 * Ⲇ, 102.23297119140625 * Ⲇ, 90.34944152832031 * Ⲇ, 216.23297119140625 * Ⲇ, Ⲇ * 100.34944152832031), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0])) : (ᐃⵠ.width = Ⲇ * 543, ᐃⵠ.height = Ⲇ * 470, Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(155.23297119140625 * Ⲇ, 126.71307373046875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 232.23297119140625, 76.71307373046875 * Ⲇ, 340.23297119140625 * Ⲇ, Ⲇ * 67.71307373046875, Ⲇ * 411.23297119140625, 106.71307373046875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 458.23297119140625, 131.71307373046875 * Ⲇ, 465.23297119140625 * Ⲇ, 280.71307373046875 * Ⲇ, Ⲇ * 353.23297119140625, Ⲇ * 363.71307373046875), Δ.bezierCurveTo(Ⲇ * 299.23297119140625, 404.71307373046875 * Ⲇ, 143.23297119140625 * Ⲇ, 415.71307373046875 * Ⲇ, Ⲇ * 88.23297119140625, Ⲇ * 327.71307373046875), Δ.bezierCurveTo(Ⲇ * 48.23297119140625, 256.71307373046875 * Ⲇ, Ⲇ * 93.23297119140625, Ⲇ * 171.71307373046875, 155.23297119140625 * Ⲇ, Ⲇ * 126.71307373046875), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]));
		return ᐃⵠ
	}

	function ⵠⵠᐃⵠⵠⵠΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 173;
		ᐃⵠ.height = 178 * Ⲇ;
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, Ⲇ * 86.5, 98 * Ⲇ, 80 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]);
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, Ⲇ * 86.5, Ⲇ * 89, Ⲇ * 81);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * ΔⲆⵠΔⲆ);
		ⵠΔᐃ(Δ, 86.5 * Ⲇ, 86 * Ⲇ, 59 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃᐃᐃᐃΔ], 4 * Ⲇ);
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, Ⲇ * 86.5, Ⲇ * 95, Ⲇ * 34);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ]);
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, 86.5 * Ⲇ, 89 * Ⲇ, Ⲇ * 34);
		ⵠᐃ(Δ, Δⵠ[5]);
		return ᐃⵠ
	}

	function ⵠΔⲆⵠⲆⵠΔΔΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 170;
		ᐃⵠ.height = Ⲇ * 170;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⵠⲆ;
		Δ.translate(Ⲇ * -ᐃᐃᐃⲆⵠ, Ⲇ * ΔⵠᐃⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(72.5 * Ⲇ, 4.109375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 117, Ⲇ * 9.609375, 117 * Ⲇ, Ⲇ * 9.609375, 161.5 * Ⲇ, Ⲇ * 15.109375);
		Δ.bezierCurveTo(Ⲇ * 134.5, 106.109375 * Ⲇ, Ⲇ * 110.5, Ⲇ * 130.109375, Ⲇ * 63.5, Ⲇ * 145.109375);
		Δ.bezierCurveTo(Ⲇ * 33.5, Ⲇ * 120.609375, Ⲇ * 33.5, Ⲇ * 120.609375, 3.5 * Ⲇ, 96.109375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 82.5, 75.109375 * Ⲇ, Ⲇ * 69.5, Ⲇ * 29.109375, Ⲇ * 71.5, Ⲇ * 6.109375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ]);
		Δ.globalAlpha = ΔᐃⵠⲆ;
		Δ.translate(10 * Ⲇ, -10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(72.5 * Ⲇ, 4.109375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 117, 9.609375 * Ⲇ, 117 * Ⲇ, Ⲇ * 9.609375, Ⲇ * 161.5, Ⲇ * 15.109375);
		Δ.bezierCurveTo(Ⲇ * 134.5, 106.109375 * Ⲇ, 110.5 * Ⲇ, Ⲇ * 130.109375, Ⲇ * 63.5, 145.109375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 33.5, 120.609375 * Ⲇ, 33.5 * Ⲇ, 120.609375 * Ⲇ, Ⲇ * 3.5, Ⲇ * 96.109375);
		Δ.bezierCurveTo(Ⲇ * 82.5, 75.109375 * Ⲇ, 69.5 * Ⲇ, 29.109375 * Ⲇ, 71.5 * Ⲇ, Ⲇ * 6.109375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠΔ], Δⵠ[2], 10 * Ⲇ);
		return ᐃⵠ
	}

	function ᐃᐃΔΔⲆᐃᐃᐃⵠ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 254;
		ᐃⵠ.height = 288 * Ⲇ;
		Δ.translate(Δⵠⵠ, ΔΔⵠΔⵠ);
		Δ.globalAlpha = .5;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(218 * Ⲇ, Ⲇ * 84.640625);
		Δ.bezierCurveTo(150 * Ⲇ, Ⲇ * 13.640625, 186 * Ⲇ, 92.640625 * Ⲇ, Ⲇ * 168, Ⲇ * 103.640625);
		Δ.bezierCurveTo(Ⲇ * 151, Ⲇ * 107.640625, Ⲇ * 150, Ⲇ * 61.640625, 144 * Ⲇ, Ⲇ * 39.640625);
		Δ.bezierCurveTo(135 * Ⲇ, 1.640625 * Ⲇ, 113 * Ⲇ, 2.640625 * Ⲇ, Ⲇ * 110, 40.640625 * Ⲇ);
		Δ.bezierCurveTo(106 * Ⲇ, 97.640625 * Ⲇ, Ⲇ * 98, 102.640625 * Ⲇ, 83 * Ⲇ, Ⲇ * 100.640625);
		Δ.bezierCurveTo(Ⲇ * 68, Ⲇ * 98.640625, Ⲇ * 67, 77.640625 * Ⲇ, 70 * Ⲇ, Ⲇ * 55.640625);
		Δ.bezierCurveTo(Ⲇ * 75, 16.640625 * Ⲇ, 47 * Ⲇ, 52.640625 * Ⲇ, 38 * Ⲇ, 67.640625 * Ⲇ);
		Δ.bezierCurveTo(ΔΔⵠⲆⵠ * Ⲇ, Ⲇ * 113.640625, Ⲇ * ΔΔⲆΔΔ, Ⲇ * 181.640625, 23 * Ⲇ, 213.640625 * Ⲇ);
		Δ.bezierCurveTo(45 * Ⲇ, Ⲇ * 266.640625, 97 * Ⲇ, Ⲇ * 277.640625, Ⲇ * 147, 269.640625 * Ⲇ);
		Δ.bezierCurveTo(217 * Ⲇ, Ⲇ * 259.640625, 236 * Ⲇ, Ⲇ * 221.640625, 239 * Ⲇ, Ⲇ * 166.640625);
		Δ.bezierCurveTo(239 * Ⲇ, Ⲇ * 113.640625, Ⲇ * 223, Ⲇ * 90.640625, 219 * Ⲇ, Ⲇ * 86.640625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ΔᐃⲆⲆ], Ⲇ * ΔΔᐃⵠΔ);
		ⵠΔᐃ(Δ, Ⲇ * 175, 220.640625 * Ⲇ, 29.546573405388315 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0]);
		ⵠΔᐃ(Δ, 79 * Ⲇ, 222.640625 * Ⲇ, 28.178005607210743 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ]);
		ⵠΔᐃ(Δ, Ⲇ * 175, 214.640625 * Ⲇ, Ⲇ * 27.892651361962706);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ], Δⵠ[ᐃⲆΔ], Ⲇ * ΔⲆⵠΔⲆ);
		ⵠΔᐃ(Δ, 79 * Ⲇ, 215.640625 * Ⲇ, 26.570660511172846 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ], Δⵠ[ⵠᐃⵠ], Ⲇ * ΔᐃⲆᐃⵠ);
		Δ.translate(ⲆᐃΔⵠ, -5);
		Δ.globalAlpha = ⵠᐃᐃ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(218 * Ⲇ, 84.640625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 150, Ⲇ * 13.640625, Ⲇ * 186, 92.640625 * Ⲇ, Ⲇ * 168, Ⲇ * 103.640625);
		Δ.bezierCurveTo(Ⲇ * 151, 107.640625 * Ⲇ, Ⲇ * 150, Ⲇ * 61.640625, Ⲇ * 144, 39.640625 * Ⲇ);
		Δ.bezierCurveTo(135 * Ⲇ, Ⲇ * 1.640625, Ⲇ * 113, Ⲇ * 2.640625, Ⲇ * 110, 40.640625 * Ⲇ);
		Δ.bezierCurveTo(106 * Ⲇ, Ⲇ * 97.640625, 98 * Ⲇ, Ⲇ * 102.640625, 83 * Ⲇ, 100.640625 * Ⲇ);
		Δ.bezierCurveTo(68 * Ⲇ, Ⲇ * 98.640625, 67 * Ⲇ, Ⲇ * 77.640625, 70 * Ⲇ, Ⲇ * 55.640625);
		Δ.bezierCurveTo(75 * Ⲇ, 16.640625 * Ⲇ, Ⲇ * 47, 52.640625 * Ⲇ, 38 * Ⲇ, 67.640625 * Ⲇ);
		Δ.bezierCurveTo(10 * Ⲇ, 113.640625 * Ⲇ, Ⲇ * 10, Ⲇ * 181.640625, Ⲇ * 23, 213.640625 * Ⲇ);
		Δ.bezierCurveTo(45 * Ⲇ, 266.640625 * Ⲇ, Ⲇ * 97, 277.640625 * Ⲇ, 147 * Ⲇ, 269.640625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 217, Ⲇ * 259.640625, Ⲇ * 236, Ⲇ * 221.640625, Ⲇ * 239, Ⲇ * 166.640625);
		Δ.bezierCurveTo(239 * Ⲇ, 113.640625 * Ⲇ, 223 * Ⲇ, Ⲇ * 90.640625, 219 * Ⲇ, Ⲇ * 86.640625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠΔ], Δⵠ[ⲆᐃᐃⲆ], Ⲇ * 4);
		ⵠΔᐃ(Δ, 175 * Ⲇ, Ⲇ * 222.640625, Ⲇ * 26.546573405388315);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⲆ]);
		ⵠΔᐃ(Δ, 79 * Ⲇ, 222.640625 * Ⲇ, 26.178005607210743 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆᐃ]);
		ⵠΔᐃ(Δ, Ⲇ * 175, 210.640625 * Ⲇ, Ⲇ * 26.892651361962706);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⵠΔ], Δⵠ[5], Ⲇ * ᐃΔᐃⵠⲆ);
		ⵠΔᐃ(Δ, 79 * Ⲇ, 210.640625 * Ⲇ, Ⲇ * 26.570660511172846);
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⲆᐃΔⲆⵠ], 8 * Ⲇ);
		return ᐃⵠ
	}

	function ΔΔⲆⵠᐃⵠΔⲆᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 400 * Ⲇ;
		ᐃⵠ.height = 400 * Ⲇ;
		Δ.translate(ⵠⵠⵠ, ⲆⲆⲆᐃΔΔΔ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 102, Ⲇ * 154);
		Δ.bezierCurveTo(108 * Ⲇ, Ⲇ * 216.5, Ⲇ * 108, 216.5 * Ⲇ, Ⲇ * 114, 279 * Ⲇ);
		Δ.bezierCurveTo(124 * Ⲇ, Ⲇ * 300, Ⲇ * 237, 299 * Ⲇ, Ⲇ * 251, Ⲇ * 279);
		Δ.bezierCurveTo(Ⲇ * 257, 217 * Ⲇ, Ⲇ * 257, 217 * Ⲇ, Ⲇ * 263, Ⲇ * 155);
		Δ.bezierCurveTo(Ⲇ * 248, 194 * Ⲇ, Ⲇ * 91, 180 * Ⲇ, Ⲇ * 103, Ⲇ * 156);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(102 * Ⲇ, 154 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 106, 53 * Ⲇ, Ⲇ * ⲆⲆⲆⵠᐃ, 53 * Ⲇ, Ⲇ * 263, 154 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 248, Ⲇ * 38, 99 * Ⲇ, 69 * Ⲇ, Ⲇ * 103, Ⲇ * 154);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⵠⲆⲆΔ, Δⵠ[0], Ⲇ * ⲆΔΔⵠⵠ);
		Δ.translate(ⵠⵠᐃ, -5 * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(103 * Ⲇ, Ⲇ * 154);
		Δ.bezierCurveTo(98 * Ⲇ, 119 * Ⲇ, 264 * Ⲇ, Ⲇ * 119, Ⲇ * 264, 154 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 271, Ⲇ * 189, Ⲇ * 94, 188 * Ⲇ, Ⲇ * 103, 154 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[2], Ⲇ * 12);
		Δ.translate(0, 25 * Ⲇ);
		Δ.globalAlpha = ᐃⲆⲆ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 103, 154 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 98, 119 * Ⲇ, Ⲇ * 264, 119 * Ⲇ, 264 * Ⲇ, Ⲇ * 154);
		Δ.bezierCurveTo(Ⲇ * 271, Ⲇ * 189, 94 * Ⲇ, Ⲇ * 188, 103 * Ⲇ, 154 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⵠ]);
		Δ.translate(ᐃⲆΔ, Ⲇ * -25);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(102 * Ⲇ, Ⲇ * 154);
		Δ.bezierCurveTo(Ⲇ * 108, Ⲇ * 216.5, 108 * Ⲇ, 216.5 * Ⲇ, 114 * Ⲇ, 279 * Ⲇ);
		Δ.bezierCurveTo(124 * Ⲇ, Ⲇ * 300, Ⲇ * 237, Ⲇ * 299, 251 * Ⲇ, 279 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 257, 217 * Ⲇ, Ⲇ * 257, Ⲇ * 217, 263 * Ⲇ, 155 * Ⲇ);
		Δ.bezierCurveTo(248 * Ⲇ, 194 * Ⲇ, 91 * Ⲇ, 180 * Ⲇ, Ⲇ * 103, Ⲇ * 156);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠΔ], Δⵠ[ⵠΔΔΔ], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 182, Ⲇ * 185);
		Δ.bezierCurveTo(Ⲇ * 182.5, Ⲇ * 237.5, 182.5 * Ⲇ, 237.5 * Ⲇ, Ⲇ * 183, 290 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[2], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 222, 287 * Ⲇ);
		Δ.bezierCurveTo(226 * Ⲇ, 233.5 * Ⲇ, 226 * Ⲇ, Ⲇ * 233.5, Ⲇ * 230, Ⲇ * 180);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[2], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 145, 290 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 140.5, Ⲇ * 237, 140.5 * Ⲇ, 237 * Ⲇ, Ⲇ * 136, Ⲇ * 184);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δⵠᐃ], Δⵠ[Ⲇᐃⵠⵠ], Ⲇ * 11);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(105 * Ⲇ, Ⲇ * 184);
		Δ.bezierCurveTo(Ⲇ * 148, 205 * Ⲇ, 231 * Ⲇ, 202 * Ⲇ, 260 * Ⲇ, 182 * Ⲇ);
		Δ.bezierCurveTo(259 * Ⲇ, Ⲇ * 195.5, 259 * Ⲇ, 195.5 * Ⲇ, Ⲇ * 258, 209 * Ⲇ);
		Δ.bezierCurveTo(217 * Ⲇ, 218 * Ⲇ, Ⲇ * 163, 225 * Ⲇ, Ⲇ * 108, Ⲇ * 207);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⲆΔ], Δⵠ[2], Ⲇ * 11);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 251, Ⲇ * 276);
		Δ.bezierCurveTo(251.5 * Ⲇ, 267.5 * Ⲇ, Ⲇ * 251.5, Ⲇ * 267.5, Ⲇ * 252, Ⲇ * 259);
		Δ.bezierCurveTo(212 * Ⲇ, Ⲇ * 272, Ⲇ * 156, Ⲇ * 275, 112 * Ⲇ, 260 * Ⲇ);
		Δ.bezierCurveTo(112.5 * Ⲇ, 269 * Ⲇ, Ⲇ * 112.5, 269 * Ⲇ, Ⲇ * 113, Ⲇ * 278);
		Δ.bezierCurveTo(Ⲇ * 155, Ⲇ * 306, 253 * Ⲇ, 286 * Ⲇ, Ⲇ * 250, 276 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[2], Ⲇ * 11);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 102, 154 * Ⲇ);
		Δ.bezierCurveTo(106 * Ⲇ, 53 * Ⲇ, 255 * Ⲇ, Ⲇ * 53, 263 * Ⲇ, 154 * Ⲇ);
		Δ.bezierCurveTo(248 * Ⲇ, 38 * Ⲇ, 99 * Ⲇ, Ⲇ * 69, 103 * Ⲇ, Ⲇ * 154);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[2], 11 * Ⲇ);
		return ᐃⵠ
	}

	function ᐃⵠΔⲆᐃᐃΔᐃⵠ() {
		ᐃᐃ[ⵠ.ΔᐃⵠⵠⵠⲆⲆ] = ΔᐃᐃⲆ(1, [{
			f: ⵠᐃⵠⵠᐃΔᐃ,
			x: 0,
			y: 0,
			a: ΔⲆⵠⲆ,
			r: 0,
			c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
		}], .2, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠΔᐃⲆΔⲆⲆ] = ᐃᐃ[ⵠ.ΔᐃⵠⵠⵠⲆⲆ];
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆΔⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆΔⵠΔ][ⵠⵠⵠ] = Δᐃ.ⵠᐃΔᐃΔΔᐃ;
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆΔⵠΔ][1] = Δᐃ.ᐃⵠᐃⲆΔⲆⲆ;
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆΔⵠΔ][ⵠⵠΔⵠ] = Δᐃ.ⵠⵠⵠⵠⲆⲆᐃ;
		ᐃᐃ[ⵠ.ΔΔⲆᐃΔᐃᐃ] = ᐃᐃ[ⵠ.ⵠⲆⲆⲆΔⵠΔ];
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠᐃΔ] = [];
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠᐃΔ][ⲆⲆᐃⲆ] = Δᐃ.ΔⵠⵠⲆᐃⵠᐃ;
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠᐃΔ][ᐃⵠⵠⵠ] = Δᐃ.ᐃⵠΔᐃⲆⲆⵠ;
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠᐃΔ][ᐃⵠΔⲆ] = Δᐃ.ᐃⵠⵠᐃᐃᐃᐃ;
		ᐃᐃ[ⵠ.ᐃΔΔⲆΔΔⵠ] = ᐃᐃ[ⵠ.ΔΔᐃᐃⵠᐃΔ];
		ᐃᐃ[ⵠ.ΔⲆⲆⲆⲆⲆΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆⲆⲆⲆⲆΔ][0] = Δᐃ.ᐃⲆⵠΔⲆΔᐃ;
		ᐃᐃ[ⵠ.ΔⲆⲆⲆⲆⲆΔ][ⲆⲆⵠ] = Δᐃ.ᐃⵠⵠⵠⵠⲆⲆ;
		ᐃᐃ[ⵠ.ΔⲆⲆⲆⲆⲆΔ][2] = Δᐃ.ⵠⵠⵠΔᐃΔⲆ;
		ᐃᐃ[ⵠ.ⲆΔⲆΔⵠΔⵠ] = ᐃᐃ[ⵠ.ΔⲆⲆⲆⲆⲆΔ];
		ᐃᐃ[ⵠ.ᐃⵠⲆⵠⲆⵠⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⲆⵠⲆⵠⲆ][ⵠⵠⵠ] = Δᐃ.ᐃⲆⵠⵠᐃⲆⲆ;
		ᐃᐃ[ⵠ.ᐃⵠⲆⵠⲆⵠⲆ][ΔⲆⵠⲆ] = Δᐃ.ⲆⵠΔᐃⲆⵠⵠ;
		ᐃᐃ[ⵠ.ᐃⵠⲆⵠⲆⵠⲆ][2] = Δᐃ.ⲆⵠⵠⲆⵠΔⵠ;
		ᐃᐃ[ⵠ.ⵠⲆΔⲆᐃⵠⲆ] = ᐃᐃ[ⵠ.ᐃⵠⲆⵠⲆⵠⲆ];
		ᐃᐃ[ⵠ.ΔⲆⲆⲆⲆΔΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆⲆⲆⲆΔΔ][ⲆⲆΔ] = Δᐃ.ⲆⲆΔᐃΔᐃᐃ;
		ᐃᐃ[ⵠ.ΔⲆⲆⲆⲆΔΔ][ᐃⵠⵠⵠ] = Δᐃ.ⵠⲆⵠⲆⵠᐃᐃ;
		ᐃᐃ[ⵠ.ΔⲆⲆⲆⲆΔΔ][2] = Δᐃ.ⵠΔᐃⲆⵠⲆΔ;
		ᐃᐃ[ⵠ.ᐃΔⲆⵠᐃⵠᐃ] = ᐃᐃ[ⵠ.ΔⲆⲆⲆⲆΔΔ];
		ᐃᐃ[ⵠ.ⲆⵠΔΔⵠᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⲆⵠΔΔⵠᐃⲆ][0] = Δᐃ.ᐃᐃⲆⲆⲆⵠΔ;
		ᐃᐃ[ⵠ.ⲆⵠΔΔⵠᐃⲆ][1] = Δᐃ.ⵠⵠⲆΔⲆⲆⵠ;
		ᐃᐃ[ⵠ.ⲆⵠΔΔⵠᐃⲆ][2] = Δᐃ.ⵠⵠᐃᐃΔᐃⲆ;
		ᐃᐃ[ⵠ.ⵠᐃⲆᐃᐃᐃᐃ] = ᐃᐃ[ⵠ.ⲆⵠΔΔⵠᐃⲆ];
		ᐃᐃ[ⵠ.ΔⵠΔⲆⲆⵠⲆ] = ᐃᐃ[ⵠ.ⲆⵠΔΔⵠᐃⲆ];
		ᐃᐃ[ⵠ.ⲆᐃΔⲆΔⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆᐃΔⲆΔⵠΔ][0] = Δᐃ.ⲆΔⲆᐃⲆⵠⵠⲆⲆ;
		ᐃᐃ[ⵠ.ⲆᐃΔⲆΔⵠΔ][1] = Δᐃ.ⲆⵠᐃⲆⲆⲆⵠΔΔ;
		ᐃᐃ[ⵠ.ⲆᐃΔⲆΔⵠΔ][ⵠᐃᐃⲆ] = Δᐃ.ΔᐃⵠᐃⵠᐃⲆΔⲆ;
		ᐃᐃ[ⵠ.ⲆⲆΔⲆΔΔⵠ] = ᐃᐃ[ⵠ.ⲆᐃΔⲆΔⵠΔ];
		ᐃᐃ[ⵠ.ⵠᐃΔⵠᐃᐃⵠ] = ᐃᐃ[ⵠ.ⲆᐃΔⲆΔⵠΔ];
		ᐃᐃ[ⵠ.ⵠΔⲆⵠⵠᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⵠΔⲆⵠⵠᐃⲆ][0] = Δᐃ.ⲆᐃⵠᐃⲆᐃⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠⵠᐃⲆ][1] = Δᐃ.ΔᐃᐃⵠⲆⲆᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠⵠᐃⲆ][2] = Δᐃ.ⵠⵠⲆⲆᐃⲆΔ;
		ᐃᐃ[ⵠ.ⵠⵠⲆᐃⵠᐃΔ] = ᐃᐃ[ⵠ.ⵠΔⲆⵠⵠᐃⲆ];
		ᐃᐃ[ⵠ.ⲆᐃΔᐃⲆᐃᐃ] = ᐃᐃ[ⵠ.ⵠΔⲆⵠⵠᐃⲆ];
		ᐃᐃ[ⵠ.ⲆⲆΔᐃΔⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔᐃΔⵠᐃ][0] = Δᐃ.ⲆⲆΔⲆᐃⲆⲆ;
		ᐃᐃ[ⵠ.ⲆⲆΔᐃΔⵠᐃ][1] = Δᐃ.ᐃᐃⵠⲆᐃⲆⵠ;
		ᐃᐃ[ⵠ.ⲆⲆΔᐃΔⵠᐃ][ⲆΔΔⲆ] = Δᐃ.ᐃᐃⲆⵠⲆⲆᐃ;
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⵠⵠΔ] = ᐃᐃ[ⵠ.ⲆⲆΔᐃΔⵠᐃ];
		ᐃᐃ[ⵠ.ⲆΔⵠⲆᐃΔⲆ] = ᐃᐃ[ⵠ.ⲆⲆΔᐃΔⵠᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔⵠᐃᐃᐃ] = [];
		ᐃᐃ[ⵠ.ΔᐃΔⵠᐃᐃᐃ][Ⲇⵠⵠᐃ] = Δᐃ.ⲆᐃΔᐃⵠΔΔ;
		ᐃᐃ[ⵠ.ΔᐃΔⵠᐃᐃᐃ][ⲆⲆⵠ] = Δᐃ.ⲆΔᐃⵠⲆⲆᐃ;
		ᐃᐃ[ⵠ.ΔᐃΔⵠᐃᐃᐃ][ΔⵠⲆⲆ] = Δᐃ.ⲆΔΔΔⵠΔⲆ;
		ᐃᐃ[ⵠ.ᐃᐃΔΔᐃΔᐃ] = ᐃᐃ[ⵠ.ΔᐃΔⵠᐃᐃᐃ];
		ᐃᐃ[ⵠ.ⵠΔⲆᐃΔⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⵠΔⲆᐃΔⲆᐃ][0] = Δᐃ.ΔᐃⲆⵠᐃΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆᐃΔⲆᐃ][ᐃΔΔⲆ] = Δᐃ.ΔⲆᐃΔⵠΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆᐃΔⲆᐃ][ⵠⲆΔᐃ] = Δᐃ.ⲆΔⵠⲆΔΔᐃ;
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠⵠⵠ] = ᐃᐃ[ⵠ.ⵠΔⲆᐃΔⲆᐃ];
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠᐃᐃⲆ] = ᐃᐃ[ⵠ.ⵠΔⲆᐃΔⲆᐃ];
		ᐃᐃ[ⵠ.ΔⵠⲆⵠΔΔᐃ] = [];
		ᐃᐃ[ⵠ.ΔⵠⲆⵠΔΔᐃ][ⵠᐃⵠ] = Δᐃ.ᐃΔⵠⵠᐃΔⵠ;
		ᐃᐃ[ⵠ.ΔⵠⲆⵠΔΔᐃ][ᐃΔⲆΔ] = Δᐃ.ⲆΔΔΔⵠΔΔ;
		ᐃᐃ[ⵠ.ΔⵠⲆⵠΔΔᐃ][ⵠⲆΔᐃ] = Δᐃ.ⵠΔᐃᐃΔΔⵠ;
		ᐃᐃ[ⵠ.ᐃᐃΔⵠⲆᐃΔ] = ᐃᐃ[ⵠ.ΔⵠⲆⵠΔΔᐃ];
		ᐃᐃ[ⵠ.ΔⵠΔⵠⵠΔΔ] = ᐃᐃ[ⵠ.ΔⵠⲆⵠΔΔᐃ];
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃⵠᐃ][0] = Δᐃ.ⵠⵠⲆΔΔⲆΔ;
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃⵠᐃ][ⲆⵠΔΔ] = Δᐃ.ⲆᐃⵠⵠᐃΔⵠ;
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃⵠᐃ][2] = Δᐃ.ᐃᐃⲆⵠⵠⵠᐃ;
		ᐃᐃ[ⵠ.ΔΔⲆᐃⲆⵠᐃ] = ᐃᐃ[ⵠ.ⲆΔΔⵠᐃⵠᐃ];
		ᐃᐃ[ⵠ.ⵠⲆⵠᐃⲆΔⵠ] = ᐃᐃ[ⵠ.ⲆΔΔⵠᐃⵠᐃ];
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃᐃᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃᐃᐃⲆ][ⲆᐃΔⵠ] = Δᐃ.ⵠΔⵠⲆᐃᐃⲆ;
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃᐃᐃⲆ][1] = Δᐃ.ΔᐃΔᐃΔⲆᐃ;
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃᐃᐃⲆ][2] = Δᐃ.ⲆⲆⵠΔᐃΔᐃ;
		ᐃᐃ[ⵠ.ⲆⵠᐃⲆΔᐃᐃ] = ᐃᐃ[ⵠ.ⲆⲆⲆᐃᐃᐃⲆ];
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆΔΔΔ] = ᐃᐃ[ⵠ.ⲆⲆⲆᐃᐃᐃⲆ];
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠΔᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠΔᐃ][0] = Δᐃ.ⵠⵠᐃΔⵠᐃΔ;
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠΔᐃ][1] = Δᐃ.ᐃⲆᐃⲆᐃᐃⲆ;
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠΔᐃ][Ⲇᐃⵠⵠ] = Δᐃ.ΔⵠΔⵠⲆᐃⲆ;
		ᐃᐃ[ⵠ.ΔⲆΔⵠᐃᐃΔ] = ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠΔᐃ];
		ᐃᐃ[ⵠ.ΔⲆⲆⲆⵠΔⲆ] = ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠΔᐃ];
		ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃⵠⲆ] = [];
		ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃⵠⲆ][0] = Δᐃ.ΔΔⵠᐃⵠᐃᐃ;
		ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃⵠⲆ][ΔᐃⵠⲆ] = Δᐃ.ⲆΔⵠⲆⲆⲆⵠ;
		ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃⵠⲆ][ⵠΔΔΔ] = Δᐃ.ⵠⲆⲆᐃΔᐃⵠ;
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆⵠⲆ] = ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃⵠⲆ];
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃⵠΔΔ] = ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃⵠⲆ];
		ᐃᐃ[ⵠ.ᐃᐃⲆⲆᐃΔᐃ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⲆⲆᐃΔᐃ][0] = Δᐃ.ⵠⲆΔΔΔⲆΔ;
		ᐃᐃ[ⵠ.ᐃᐃⲆⲆᐃΔᐃ][ⲆⲆᐃⵠ] = Δᐃ.ᐃᐃⲆⵠΔΔᐃ;
		ᐃᐃ[ⵠ.ᐃᐃⲆⲆᐃΔᐃ][ΔⵠⲆⲆ] = Δᐃ.ⲆᐃⲆΔⵠᐃᐃ;
		ᐃᐃ[ⵠ.ⲆⵠⲆΔⲆⵠⵠ] = ᐃᐃ[ⵠ.ᐃᐃⲆⲆᐃΔᐃ];
		ᐃᐃ[ⵠ.ᐃⵠΔⵠᐃΔⲆ] = ᐃᐃ[ⵠ.ᐃᐃⲆⲆᐃΔᐃ];
		ᐃᐃ[ⵠ.ᐃⵠᐃᐃⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃⵠᐃᐃⲆⵠΔ][0] = Δᐃ.ΔᐃᐃⲆΔⵠⲆ;
		ᐃᐃ[ⵠ.ᐃⵠᐃᐃⲆⵠΔ][Δⵠᐃ] = Δᐃ.ᐃⲆΔᐃⲆᐃⲆ;
		ᐃᐃ[ⵠ.ᐃⵠᐃᐃⲆⵠΔ][2] = Δᐃ.ΔΔⲆᐃⵠᐃⵠ;
		ᐃᐃ[ⵠ.ⲆⵠΔⵠⲆᐃⲆ] = ᐃᐃ[ⵠ.ᐃⵠᐃᐃⲆⵠΔ];
		ᐃᐃ[ⵠ.ⲆΔᐃΔΔⵠᐃ] = ᐃᐃ[ⵠ.ᐃⵠᐃᐃⲆⵠΔ];
		ᐃᐃ[ⵠ.ᐃᐃᐃⵠᐃᐃᐃ] = [];
		ᐃᐃ[ⵠ.ᐃᐃᐃⵠᐃᐃᐃ][0] = Δᐃ.ΔΔⵠⲆⵠⲆΔ;
		ᐃᐃ[ⵠ.ᐃᐃᐃⵠᐃᐃᐃ][1] = Δᐃ.ΔⵠⲆΔⲆᐃΔ;
		ᐃᐃ[ⵠ.ᐃᐃᐃⵠᐃᐃᐃ][ΔΔⵠⲆ] = Δᐃ.ᐃⵠⵠⵠᐃⵠᐃ;
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆⲆⵠΔ] = ᐃᐃ[ⵠ.ᐃᐃᐃⵠᐃᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔⲆⵠ] = ᐃᐃ[ⵠ.ᐃᐃᐃⵠᐃᐃᐃ];
		ᐃᐃ[ⵠ.ⲆⲆᐃΔᐃⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⲆᐃΔᐃⵠᐃ][ⲆⲆᐃⲆ] = Δᐃ.ΔᐃᐃⲆⵠⵠⲆ;
		ᐃᐃ[ⵠ.ⲆⲆᐃΔᐃⵠᐃ][ᐃⵠⵠⵠ] = Δᐃ.ⵠⵠᐃᐃⲆⵠᐃ;
		ᐃᐃ[ⵠ.ⲆⲆᐃΔᐃⵠᐃ][2] = Δᐃ.ⲆⲆᐃⲆⵠᐃⲆ;
		ᐃᐃ[ⵠ.ᐃⵠᐃΔΔᐃⵠ] = ᐃᐃ[ⵠ.ⲆⲆᐃΔᐃⵠᐃ];
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃΔⵠⲆ] = ᐃᐃ[ⵠ.ⲆⲆᐃΔᐃⵠᐃ];
		ᐃᐃ[ⵠ.ⵠⵠⲆΔΔᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⵠⵠⲆΔΔᐃⲆ][ⵠᐃⲆⵠ] = Δᐃ.ⲆᐃΔΔΔⲆⵠ;
		ᐃᐃ[ⵠ.ⵠⵠⲆΔΔᐃⲆ][1] = Δᐃ.ⲆⵠⵠⵠΔⲆⵠ;
		ᐃᐃ[ⵠ.ⵠⵠⲆΔΔᐃⲆ][2] = Δᐃ.ΔⵠⵠᐃⵠΔⲆ;
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆⲆⵠⵠ] = ᐃᐃ[ⵠ.ⵠⵠⲆΔΔᐃⲆ];
		ᐃᐃ[ⵠ.ᐃΔᐃΔΔⲆΔ] = ᐃᐃ[ⵠ.ⵠⵠⲆΔΔᐃⲆ];
		ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆᐃΔ] = [];
		ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆᐃΔ][0] = Δᐃ.Δⵠᐃᐃⵠⵠᐃ;
		ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆᐃΔ][ᐃΔⲆΔ] = Δᐃ.ⵠΔΔⵠᐃⲆⲆ;
		ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆᐃΔ][2] = Δᐃ.ⵠΔⲆⵠⵠⵠⵠ;
		ᐃᐃ[ⵠ.ⵠΔⵠΔⲆᐃⵠ] = ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆᐃΔ];
		ᐃᐃ[ⵠ.ⵠᐃΔⵠᐃᐃᐃ] = ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆᐃΔ];
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃΔΔ][0] = Δᐃ.ΔⲆⲆΔΔⲆⲆ;
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃΔΔ][ΔΔΔᐃ] = Δᐃ.ᐃⲆᐃΔᐃⲆᐃ;
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃΔΔ][ⵠᐃᐃⲆ] = Δᐃ.ΔⵠⵠΔⲆⵠᐃ;
		ᐃᐃ[ⵠ.ⲆΔⲆⲆⵠᐃⵠ] = ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃΔΔ];
		ᐃᐃ[ⵠ.ⵠⵠⲆⲆᐃᐃᐃ] = ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃΔΔ];
		ᐃᐃ[ⵠ.ᐃⵠΔⲆⵠᐃᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⵠΔⲆⵠᐃᐃ][0] = Δᐃ.ⲆΔⵠᐃⵠΔⵠ;
		ᐃᐃ[ⵠ.ᐃⵠΔⲆⵠᐃᐃ][1] = Δᐃ.ⵠⲆΔᐃⲆᐃⲆ;
		ᐃᐃ[ⵠ.ᐃⵠΔⲆⵠᐃᐃ][2] = Δᐃ.ⵠΔΔⲆⲆⵠⲆ;
		ᐃᐃ[ⵠ.ⵠΔΔΔⲆΔⲆ] = ᐃᐃ[ⵠ.ᐃⵠΔⲆⵠᐃᐃ];
		ᐃᐃ[ⵠ.ⵠᐃΔΔⲆΔⲆ] = ᐃᐃ[ⵠ.ᐃⵠΔⲆⵠᐃᐃ];
		ᐃᐃ[ⵠ.ⲆⵠⲆᐃⲆᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⵠⲆᐃⲆᐃⵠ][ⲆⲆᐃⲆ] = Δᐃ.ⲆⲆⲆΔᐃᐃᐃ;
		ᐃᐃ[ⵠ.ⲆⵠⲆᐃⲆᐃⵠ][1] = Δᐃ.ΔΔⵠⵠΔᐃⵠ;
		ᐃᐃ[ⵠ.ⲆⵠⲆᐃⲆᐃⵠ][2] = Δᐃ.ⵠΔΔⵠΔᐃΔ;
		ᐃᐃ[ⵠ.ⲆⵠⵠⵠⵠⵠΔ] = ᐃᐃ[ⵠ.ⲆⵠⲆᐃⲆᐃⵠ];
		ᐃᐃ[ⵠ.ⲆΔᐃⲆᐃᐃΔ] = ᐃᐃ[ⵠ.ⲆⵠⲆᐃⲆᐃⵠ];
		ᐃᐃ[ⵠ.ⲆⵠᐃⵠΔΔⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⵠᐃⵠΔΔⵠ][0] = Δᐃ.ᐃᐃᐃΔΔΔⵠ;
		ᐃᐃ[ⵠ.ⲆⵠᐃⵠΔΔⵠ][1] = Δᐃ.ⵠᐃⲆᐃᐃⵠⵠ;
		ᐃᐃ[ⵠ.ⲆⵠᐃⵠΔΔⵠ][2] = Δᐃ.ΔⲆⲆⵠΔⲆⲆ;
		ᐃᐃ[ⵠ.ΔⲆⵠⵠΔⲆⲆ] = ᐃᐃ[ⵠ.ⲆⵠᐃⵠΔΔⵠ];
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃᐃΔⲆ] = ᐃᐃ[ⵠ.ⲆⵠᐃⵠΔΔⵠ];
		ᐃᐃ[ⵠ.ΔⲆⵠΔᐃᐃΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆⵠΔᐃᐃΔ][0] = Δᐃ.ⵠΔΔⵠⲆΔᐃ;
		ᐃᐃ[ⵠ.ΔⲆⵠΔᐃᐃΔ][ᐃΔⵠΔ] = Δᐃ.ᐃⲆᐃⵠᐃᐃⵠ;
		ᐃᐃ[ⵠ.ΔⲆⵠΔᐃᐃΔ][2] = Δᐃ.ⵠⲆᐃⲆᐃⲆΔ;
		ᐃᐃ[ⵠ.ⲆⵠᐃΔⲆⵠΔ] = ᐃᐃ[ⵠ.ΔⲆⵠΔᐃᐃΔ];
		ᐃᐃ[ⵠ.ⲆΔⲆⵠΔᐃΔ] = ᐃᐃ[ⵠ.ΔⲆⵠΔᐃᐃΔ];
		ᐃᐃ[ⵠ.ⲆⵠΔᐃΔΔΔ] = [];
		ᐃᐃ[ⵠ.ⲆⵠΔᐃΔΔΔ][0] = Δᐃ.ⵠᐃⵠᐃᐃⲆⲆ;
		ᐃᐃ[ⵠ.ⲆⵠΔᐃΔΔΔ][1] = Δᐃ.ᐃΔⵠⲆΔΔⵠ;
		ᐃᐃ[ⵠ.ⲆⵠΔᐃΔΔΔ][2] = Δᐃ.ⲆⲆⵠⲆⲆⵠⲆ;
		ᐃᐃ[ⵠ.ⵠΔΔⲆᐃΔᐃ] = ᐃᐃ[ⵠ.ⲆⵠΔᐃΔΔΔ];
		ᐃᐃ[ⵠ.ⲆⲆΔΔΔᐃⵠ] = ᐃᐃ[ⵠ.ⲆⵠΔᐃΔΔΔ];
		ᐃᐃ[ⵠ.ᐃΔⲆᐃⵠΔⲆ] = [];
		ᐃᐃ[ⵠ.ᐃΔⲆᐃⵠΔⲆ][ⵠⵠᐃ] = Δᐃ.ᐃΔⲆΔⵠΔⵠ;
		ᐃᐃ[ⵠ.ᐃΔⲆᐃⵠΔⲆ][ⲆⲆΔⵠ] = Δᐃ.ⲆΔΔⵠᐃΔⵠ;
		ᐃᐃ[ⵠ.ᐃΔⲆᐃⵠΔⲆ][2] = Δᐃ.ⵠⵠᐃⲆⲆⲆⲆ;
		ᐃᐃ[ⵠ.ᐃΔᐃᐃⲆⲆⵠ] = ᐃᐃ[ⵠ.ᐃΔⲆᐃⵠΔⲆ];
		ᐃᐃ[ⵠ.ΔⵠᐃⲆΔⵠᐃ] = ᐃᐃ[ⵠ.ᐃΔⲆᐃⵠΔⲆ];
		ᐃᐃ[ⵠ.ⵠΔᐃΔΔΔΔ] = [];
		ᐃᐃ[ⵠ.ⵠΔᐃΔΔΔΔ][0] = Δᐃ.ᐃⲆᐃᐃⵠⲆⲆ;
		ᐃᐃ[ⵠ.ⵠΔᐃΔΔΔΔ][1] = Δᐃ.ⲆⵠΔΔⲆᐃⲆ;
		ᐃᐃ[ⵠ.ⵠΔᐃΔΔΔΔ][ⲆΔΔⲆ] = Δᐃ.ⲆΔⲆΔⵠⲆᐃ;
		ᐃᐃ[ⵠ.ⵠⲆΔΔᐃΔⲆ] = ᐃᐃ[ⵠ.ⵠΔᐃΔΔΔΔ];
		ᐃᐃ[ⵠ.Δⵠⵠⵠᐃⵠᐃ] = ᐃᐃ[ⵠ.ⵠΔᐃΔΔΔΔ];
		ᐃᐃ[ⵠ.ⵠⵠΔⵠⵠᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⵠⵠΔⵠⵠᐃⵠ][0] = Δᐃ.ᐃᐃΔᐃΔⵠᐃ;
		ᐃᐃ[ⵠ.ⵠⵠΔⵠⵠᐃⵠ][ⲆⵠⲆ] = Δᐃ.ᐃΔᐃᐃΔⲆⵠ;
		ᐃᐃ[ⵠ.ⵠⵠΔⵠⵠᐃⵠ][ᐃⵠΔⲆ] = Δᐃ.ᐃⲆⲆΔⵠⲆⲆ;
		ᐃᐃ[ⵠ.ⵠΔⵠⵠᐃᐃΔ] = ᐃᐃ[ⵠ.ⵠⵠΔⵠⵠᐃⵠ];
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆΔⵠⵠ] = ᐃᐃ[ⵠ.ⵠⵠΔⵠⵠᐃⵠ];
		ᐃᐃ[ⵠ.ΔⵠΔⲆΔⲆΔ] = [];
		ᐃᐃ[ⵠ.ΔⵠΔⲆΔⲆΔ][0] = Δᐃ.ᐃⲆΔΔΔⵠⲆᐃΔ;
		ᐃᐃ[ⵠ.ΔⵠΔⲆΔⲆΔ][1] = Δᐃ.ⲆᐃⵠΔΔΔⵠᐃᐃ;
		ᐃᐃ[ⵠ.ΔⵠΔⲆΔⲆΔ][2] = Δᐃ.ⵠⲆᐃΔⵠⲆⵠΔᐃ;
		ᐃᐃ[ⵠ.ⲆᐃⵠᐃΔⲆⲆ] = ᐃᐃ[ⵠ.ΔⵠΔⲆΔⲆΔ];
		ᐃᐃ[ⵠ.ᐃⵠⵠΔⵠΔᐃ] = ᐃᐃ[ⵠ.ΔⵠΔⲆΔⲆΔ];
		ᐃᐃ[ⵠ.ΔⲆΔᐃⵠᐃΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆΔᐃⵠᐃΔ][0] = Δᐃ.ⲆΔⵠᐃⲆᐃᐃΔⲆ;
		ᐃᐃ[ⵠ.ΔⲆΔᐃⵠᐃΔ][1] = Δᐃ.ᐃᐃⵠΔⲆΔⵠⵠⲆ;
		ᐃᐃ[ⵠ.ΔⲆΔᐃⵠᐃΔ][ᐃⵠΔⲆ] = Δᐃ.ⵠΔⵠⲆⵠⵠΔⵠΔ;
		ᐃᐃ[ⵠ.ⵠⵠⵠⲆᐃⵠⵠ] = ᐃᐃ[ⵠ.ΔⲆΔᐃⵠᐃΔ];
		ᐃᐃ[ⵠ.ΔΔΔΔⲆⵠⵠ] = ᐃᐃ[ⵠ.ΔⲆΔᐃⵠᐃΔ];
		ᐃᐃ[ⵠ.ⲆᐃⵠΔᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆᐃⵠΔᐃⵠΔ][ⲆⲆΔ] = Δᐃ.ΔΔΔⲆΔᐃΔΔΔ;
		ᐃᐃ[ⵠ.ⲆᐃⵠΔᐃⵠΔ][ⲆⵠΔΔ] = Δᐃ.ⵠᐃⵠⲆⲆΔᐃⵠⵠ;
		ᐃᐃ[ⵠ.ⲆᐃⵠΔᐃⵠΔ][ⵠⵠᐃⲆ] = Δᐃ.ⲆΔᐃΔⲆⲆΔⲆᐃ;
		ᐃᐃ[ⵠ.ⵠⵠⲆⲆⲆᐃᐃ] = ᐃᐃ[ⵠ.ⲆᐃⵠΔᐃⵠΔ];
		ᐃᐃ[ⵠ.ᐃⵠⲆⲆΔⲆⵠ] = ᐃᐃ[ⵠ.ⲆᐃⵠΔᐃⵠΔ];
		ᐃᐃ[ⵠ.ᐃΔΔᐃⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔΔᐃⲆⵠΔ][ⵠⵠᐃ] = Δᐃ.ᐃⲆⲆⲆΔⲆΔΔᐃ;
		ᐃᐃ[ⵠ.ᐃΔΔᐃⲆⵠΔ][ⵠⲆⵠⲆ] = Δᐃ.ᐃᐃᐃᐃΔΔⲆᐃⵠ;
		ᐃᐃ[ⵠ.ᐃΔΔᐃⲆⵠΔ][2] = Δᐃ.ΔⲆΔⵠⵠΔⵠᐃⲆ;
		ᐃᐃ[ⵠ.ⲆⲆⲆⵠⲆⲆⵠ] = ᐃᐃ[ⵠ.ᐃΔΔᐃⲆⵠΔ];
		ᐃᐃ[ⵠ.ΔⲆΔᐃⵠⲆΔ] = ᐃᐃ[ⵠ.ᐃΔΔᐃⲆⵠΔ];
		ᐃᐃ[ⵠ.ⲆⲆⵠⲆᐃⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⵠⲆᐃⲆᐃ][ⲆⲆΔ] = Δᐃ.ᐃⲆᐃᐃⵠⵠᐃⵠⲆ;
		ᐃᐃ[ⵠ.ⲆⲆⵠⲆᐃⲆᐃ][1] = Δᐃ.ⵠΔᐃᐃⲆⲆΔΔⲆ;
		ᐃᐃ[ⵠ.ⲆⲆⵠⲆᐃⲆᐃ][Ⲇᐃⵠⵠ] = Δᐃ.ⲆΔᐃᐃᐃⲆⵠᐃⵠ;
		ᐃᐃ[ⵠ.Ⲇᐃⵠᐃⵠᐃᐃ] = ᐃᐃ[ⵠ.ⲆⲆⵠⲆᐃⲆᐃ];
		ᐃᐃ[ⵠ.ΔᐃᐃᐃⲆᐃᐃ] = ᐃᐃ[ⵠ.ⲆⲆⵠⲆᐃⲆᐃ];
		ᐃᐃ[ⵠ.ᐃⵠΔⲆⲆⵠⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⵠΔⲆⲆⵠⲆ][ⵠΔⵠᐃ] = Δᐃ.ᐃΔᐃⵠⲆᐃⲆΔⲆ;
		ᐃᐃ[ⵠ.ᐃⵠΔⲆⲆⵠⲆ][ⵠⵠⵠⲆ] = Δᐃ.ΔⲆΔᐃΔᐃᐃⵠⲆ;
		ᐃᐃ[ⵠ.ᐃⵠΔⲆⲆⵠⲆ][ⵠΔΔΔ] = Δᐃ.ⵠⵠⲆⵠᐃᐃᐃᐃᐃ;
		ᐃᐃ[ⵠ.ⵠⲆⲆⵠⵠⵠᐃ] = ᐃᐃ[ⵠ.ᐃⵠΔⲆⲆⵠⲆ];
		ᐃᐃ[ⵠ.ⵠΔⲆⵠⲆⵠⵠ] = ᐃᐃ[ⵠ.ᐃⵠΔⲆⲆⵠⲆ];
		ᐃᐃ[ⵠ.ᐃᐃⲆΔⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⲆΔⲆⵠΔ][ⲆⲆΔ] = Δᐃ.ⲆᐃΔΔⵠᐃᐃ;
		ᐃᐃ[ⵠ.ᐃᐃⲆΔⲆⵠΔ][1] = Δᐃ.ΔⲆⲆΔᐃᐃΔ;
		ᐃᐃ[ⵠ.ᐃᐃⲆΔⲆⵠΔ][2] = Δᐃ.ⵠᐃⲆᐃΔᐃⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⲆΔᐃⵠⲆ] = ᐃᐃ[ⵠ.ᐃᐃⲆΔⲆⵠΔ];
		ᐃᐃ[ⵠ.ΔᐃⵠΔᐃⲆᐃ] = ᐃᐃ[ⵠ.ᐃᐃⲆΔⲆⵠΔ];
		ᐃᐃ[ⵠ.ⲆⲆⲆΔⵠᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⲆΔⵠᐃⵠ][0] = Δᐃ.ΔΔᐃᐃⲆᐃⵠ;
		ᐃᐃ[ⵠ.ⲆⲆⲆΔⵠᐃⵠ][ⵠⵠⵠⲆ] = Δᐃ.ⵠⵠⵠⲆⲆⲆⲆ;
		ᐃᐃ[ⵠ.ⲆⲆⲆΔⵠᐃⵠ][Ⲇᐃⵠⵠ] = Δᐃ.ⲆᐃⲆΔⲆⲆΔ;
		ᐃᐃ[ⵠ.ⲆⵠⵠⵠΔᐃⲆ] = ᐃᐃ[ⵠ.ⲆⲆⲆΔⵠᐃⵠ];
		ᐃᐃ[ⵠ.ⲆᐃᐃᐃⵠᐃⲆⵠⵠ] = ᐃᐃ[ⵠ.ⲆⲆⲆΔⵠᐃⵠ];
		ᐃᐃ[ⵠ.ΔⲆΔⵠΔᐃⲆ] = ΔᐃᐃⲆ(1, [{
			f: ᐃⲆⵠΔᐃᐃΔ,
			x: ⲆⲆΔ,
			y: 0,
			a: ΔΔⵠ,
			r: ⲆⲆᐃⲆ,
			c: ["#352b10", ᐃ[198], ᐃ[523], "#e0e1e0", "#c4c4c4"]
		}], .22, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆⲆᐃⲆⲆᐃᐃ] = ᐃᐃ[ⵠ.ΔⲆΔⵠΔᐃⲆ];
		ᐃᐃ[ⵠ.ΔΔⲆⲆᐃᐃΔ] = ΔᐃᐃⲆ(1, [{
			f: ⲆΔΔⵠΔⵠⵠ,
			x: 0,
			y: ⵠΔΔⲆ,
			a: 1,
			r: 0,
			c: ["#352b10", "#349970", "#245c45", "#348361", ᐃ[198], ᐃ[523]]
		}], .2, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ᐃᐃΔⵠⲆⲆⵠ] = ᐃᐃ[ⵠ.ΔΔⲆⲆᐃᐃΔ];
		ᐃᐃ[ⵠ.ΔⲆⲆⵠᐃⵠᐃ] = ΔᐃᐃⲆ(ᐃΔⵠΔ, [{
			f: ΔΔΔⲆⵠⲆΔ,
			x: -ⲆⵠⲆ,
			y: ⵠⵠΔΔ,
			a: 1,
			r: 0,
			c: [ᐃ[414], ᐃ[85], ᐃ[422], ᐃ[ⲆΔⵠⲆᐃΔᐃ], ᐃ[313], ᐃ[339], ᐃ[34], ᐃ[356], ᐃ[85], ᐃ[422]]
		}, {
			f: ⵠᐃᐃΔΔⵠⲆ,
			x: -1,
			y: 0,
			a: 1,
			r: 0,
			c: [ᐃ[414], ᐃ[85], ᐃ[422], ᐃ[ⵠᐃᐃᐃⲆΔⲆ], ᐃ[313], ᐃ[339], ᐃ[34], ᐃ[356], ᐃ[85], ᐃ[422]]
		}, {
			f: ⲆᐃⵠⵠⵠⲆⲆ,
			x: -ⵠⵠⵠⲆ,
			y: 0,
			a: 1,
			r: 0,
			c: [ᐃ[414], ᐃ[85], ᐃ[422], ᐃ[Δᐃⵠᐃⵠᐃᐃ], ᐃ[313], ᐃ[339], ᐃ[34], ᐃ[356], ᐃ[85], ᐃ[422]]
		}], .4, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ᐃⵠⵠΔⲆΔΔ] = ᐃᐃ[ⵠ.ΔⲆⲆⵠᐃⵠᐃ];
		ᐃᐃ[ⵠ.ΔᐃⵠᐃᐃⵠⲆ] = ΔᐃᐃⲆ(1, [{
			f: ΔΔⵠΔⲆⲆⲆ,
			x: 0,
			y: ⵠᐃΔ,
			a: ΔΔⵠ,
			r: ᐃⲆΔᐃ,
			c: [ᐃ[447], ᐃ[173]]
		}], 1.2, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠΔⲆⲆⲆΔⲆ] = ΔᐃᐃⲆ(ⲆⲆⲆᐃ, [{
			f: ⵠᐃⲆΔΔⲆΔ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: [ᐃ[414], ᐃ[222], ᐃ[477], ᐃ[479]]
		}], .14, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ᐃⵠΔᐃⲆΔΔ] = ᐃᐃ[ⵠ.ⵠΔⲆⲆⲆΔⲆ];
		ᐃᐃ[ⵠ.ⲆΔⲆΔⲆⲆΔ] = ΔᐃᐃⲆ(1, [{
			f: ΔⵠᐃⵠⲆ,
			x: 0,
			y: ⵠΔΔⲆ,
			a: ⲆⲆΔⵠ,
			r: ⵠᐃⲆⵠ,
			c: [ᐃ[447], ᐃ[173]]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠⲆᐃᐃᐃᐃΔ] = ᐃᐃ[ⵠ.ⲆΔⲆΔⲆⲆΔ];
		ᐃᐃ[ⵠ.ᐃΔⲆⵠᐃⲆΔ] = ΔᐃᐃⲆ(1, [{
			f: ΔⵠᐃⵠⲆ,
			x: 0,
			y: ⲆᐃΔⵠ,
			a: ⲆⲆΔⵠ,
			r: ⲆⲆᐃⲆ,
			c: ["#493d36", "#332b28"]
		}], .7, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ᐃⲆΔⵠᐃⲆΔ] = ᐃᐃ[ⵠ.ᐃΔⲆⵠᐃⲆΔ];
		ᐃᐃ[ⵠ.ⲆΔΔⵠⲆⲆᐃ] = ΔᐃᐃⲆ(ⵠⲆⵠⲆ, [{
			f: ΔⵠᐃⵠⲆ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: [ᐃ[428], "#b17238"]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠⵠΔΔΔⲆᐃ] = ᐃᐃ[ⵠ.ⲆΔΔⵠⲆⲆᐃ];
		ᐃᐃ[ⵠ.ΔΔⵠⲆⵠᐃⲆ] = ΔᐃᐃⲆ(1, [{
			f: ΔⵠᐃⵠⲆ,
			x: ᐃⲆᐃ,
			y: 0,
			a: 1,
			r: ᐃⲆΔᐃ,
			c: [ᐃ[198], ᐃ[523]]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆᐃⲆΔᐃΔⲆ] = ᐃᐃ[ⵠ.ΔΔⵠⲆⵠᐃⲆ];
		ᐃᐃ[ⵠ.ᐃⲆⵠⵠⵠⲆᐃ] = ΔᐃᐃⲆ(ᐃⲆⲆ, [{
			f: ΔⵠᐃⵠⲆ,
			x: ⲆⲆᐃⲆ,
			y: ᐃⲆΔᐃ,
			a: 1,
			r: 0,
			c: ["#328a56", "#449573"]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠΔᐃΔΔⲆⵠ] = ᐃᐃ[ⵠ.ᐃⲆⵠⵠⵠⲆᐃ];
		ᐃᐃ[ⵠ.ⲆⵠⵠⲆᐃΔⵠ] = ΔᐃᐃⲆ(ⵠⵠⵠⲆ, [{
			f: ΔⵠᐃⵠⲆ,
			x: ⲆᐃΔⵠ,
			y: 0,
			a: Δⵠᐃ,
			r: 0,
			c: ["#c98e2f", "#a36b11"]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔᐃⵠⵠⲆΔⲆ] = ᐃᐃ[ⵠ.ⲆⵠⵠⲆᐃΔⵠ];
		ᐃᐃ[ⵠ.ⲆⲆⵠⲆᐃⲆⲆ] = ᐃᐃ[ⵠ.ⲆⵠⵠⲆᐃΔⵠ];
		ᐃᐃ[ⵠ.ᐃⲆΔⲆᐃΔⵠ] = ΔᐃᐃⲆ(Δⵠᐃ, [{
			f: ΔⵠᐃⵠⲆ,
			x: 0,
			y: 0,
			a: 1,
			r: ⵠᐃⵠ,
			c: ["#13a56d", "#098a58"]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠⵠΔᐃⲆΔᐃ] = ᐃᐃ[ⵠ.ᐃⲆΔⲆᐃΔⵠ];
		ᐃᐃ[ⵠ.ᐃΔΔΔΔⵠᐃ] = ᐃᐃ[ⵠ.ᐃⲆΔⲆᐃΔⵠ];
		ᐃᐃ[ⵠ.ⵠᐃᐃⵠⵠⵠⵠ] = ΔᐃᐃⲆ(ⲆⲆᐃⵠ, [{
			f: ΔⵠᐃⵠⲆ,
			x: ⲆⲆᐃ,
			y: Ⲇⵠᐃ,
			a: ΔΔⵠ,
			r: 0,
			c: ["#3a8214", "#4a9c1e"]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔⲆⵠΔⲆΔΔ] = ᐃᐃ[ⵠ.ⵠᐃᐃⵠⵠⵠⵠ];
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆᐃΔᐃ] = ᐃᐃ[ⵠ.ⵠᐃᐃⵠⵠⵠⵠ];
		ᐃᐃ[ⵠ.ⵠᐃΔΔᐃⲆⲆ] = ΔᐃᐃⲆ(1, [{
			f: ΔⵠᐃⵠⲆ,
			x: 0,
			y: ⲆⲆᐃ,
			a: 1,
			r: ⵠᐃⵠ,
			c: ["#b22419", "#99110e"]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠⵠⵠΔⵠᐃΔ] = ᐃᐃ[ⵠ.ⵠᐃΔΔᐃⲆⲆ];
		ᐃᐃ[ⵠ.ⲆΔᐃΔⲆⲆⲆ] = ᐃᐃ[ⵠ.ⵠᐃΔΔᐃⲆⲆ];
		ᐃᐃ[ⵠ.ᐃᐃΔΔⵠⵠⲆ] = ΔᐃᐃⲆ(1, [{
			f: ⲆΔᐃⵠⵠΔΔ,
			x: -ⵠᐃᐃⲆ,
			y: -ⵠⵠᐃⲆ,
			a: ⵠᐃᐃ,
			r: -Math.PI / 7,
			c: [ᐃ[62], ᐃ[480]]
		}, {
			f: ᐃⲆⵠⵠᐃᐃΔ,
			x: -2,
			y: -ⵠⵠᐃⲆ,
			a: 1,
			r: -Math.PI / 7,
			c: [ᐃ[78], "#ec8d35", "#e96132"]
		}], .3, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆᐃⵠⵠⲆⵠᐃ] = ᐃᐃ[ⵠ.ᐃᐃΔΔⵠⵠⲆ];
		ᐃᐃ[ⵠ.ΔΔΔⲆΔᐃⲆ] = ΔᐃᐃⲆ(ⲆⲆⵠ, [{
			f: ⲆⲆⲆᐃⲆⵠᐃ,
			x: -2,
			y: -ᐃⲆⲆ,
			a: 1,
			r: -Math.PI / 7,
			c: [ᐃ[62], ᐃ[480], ᐃ[435], ᐃ[37], "#0c2c2e"]
		}, {
			f: ᐃⲆⵠⵠᐃᐃΔ,
			x: -ⵠⲆΔᐃ,
			y: -ᐃⵠᐃᐃ,
			a: 1,
			r: -Math.PI / ⲆⲆⵠⵠⲆ,
			c: [ᐃ[78], "#ec8d35", "#e96132"]
		}], .3, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠⲆᐃᐃⲆᐃΔ] = ᐃᐃ[ⵠ.ΔΔΔⲆΔᐃⲆ];
		ᐃᐃ[ⵠ.ⲆⵠᐃⵠⲆⲆⵠ] = ΔᐃᐃⲆ(1, [{
			f: ΔΔⲆⵠⲆⲆΔ,
			x: 2,
			y: 0,
			a: ᐃΔⵠΔ,
			r: Math.PI / ⵠᐃⲆᐃ,
			c: [ᐃ[414], "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", ᐃ[523], "#d6d1d1"]
		}], .1, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ΔⲆⵠⲆΔᐃΔ] = ΔᐃᐃⲆ(1, [{
			f: ⵠΔΔⲆΔⲆᐃ,
			x: 2,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [ᐃ[414], ᐃ[478], ᐃ[491], "#eb2933", "#57b74e", "#42a54d", ᐃ[390], ᐃ[575]]
		}], .3, [ᐃ[79], ᐃ[100], ᐃ[ⲆⲆΔ]], .5);
		ᐃᐃ[ⵠ.ⲆᐃᐃᐃΔΔⲆ] = ΔᐃᐃⲆ(1, [{
			f: ⲆⲆΔⲆᐃΔⲆ,
			x: ᐃᐃΔⵠ,
			y: 0,
			a: ⲆⵠΔΔ,
			r: Math.PI / 5,
			c: [ᐃ[84], ᐃ[342], "#493425", ᐃ[261], "#5e4530", "#563e2b"]
		}], .15, [ᐃ[79], ᐃ[100], ᐃ[ⵠⵠᐃ]], .5);
		ᐃᐃ[ⵠ.ΔᐃᐃⲆΔⲆⲆ] = ΔᐃᐃⲆ(ⵠᐃᐃ, [{
			f: ᐃⵠΔⲆᐃΔᐃ,
			x: ΔΔᐃⲆⵠ,
			y: 0,
			a: ᐃⵠᐃᐃ,
			r: Math.PI / 5,
			c: [ᐃ[414], ᐃ[71], ᐃ[491], "#b1afaf", "#493d36", "#332b28"]
		}], .15, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ᐃᐃᐃΔΔΔⲆ] = ΔᐃᐃⲆ(ⵠⲆⵠⲆ, [{
			f: ΔᐃⲆᐃΔᐃᐃ,
			x: 2,
			y: ⵠΔⵠᐃ,
			a: ᐃΔⵠΔ,
			r: Math.PI / 5,
			c: [ᐃ[414], ᐃ[179], ᐃ[453], ᐃ[179], ᐃ[136], ᐃ[183]]
		}], .15, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⵠⵠⵠⵠΔᐃᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⵠⵠΔᐃⲆΔⵠ,
			x: Ⲇᐃⵠⵠ,
			y: 0,
			a: ⵠⵠⵠⲆ,
			r: Math.PI / 5,
			c: [ᐃ[414], "#6ad9e8", ᐃ[146], "#95e9f5", "#022320", "#011e19", ᐃ[193]]
		}], .15, [ᐃ[79], ᐃ[100], ᐃ[ⵠⵠⲆΔ]], .5);
		ᐃᐃ[ⵠ.ⵠⵠⵠᐃΔⲆΔ] = ΔᐃᐃⲆ(ⵠⵠⵠⲆ, [{
			f: Δᐃᐃⵠⵠᐃⵠ,
			x: ᐃᐃⵠⵠ,
			y: ⲆⲆΔ,
			a: Δⵠᐃ,
			r: Math.PI / ⵠⲆⲆⲆ,
			c: [ᐃ[414], ᐃ[531], ᐃ[98], "#cc81e7", ᐃ[121], ᐃ[190], ᐃ[193]]
		}], .15, [ᐃ[79], ᐃ[100], ᐃ[ⲆⲆᐃⲆ]], .5);
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃΔᐃⲆ] = ΔᐃᐃⲆ(ΔΔⵠ, [{
			f: ⲆᐃⲆᐃⵠ,
			x: -2,
			y: ΔⲆⵠⵠ,
			a: ΔⲆⵠⲆ,
			r: -Math.PI / ⵠⲆⲆⵠ,
			c: [ᐃ[414], ᐃ[352], ᐃ[414], ᐃ[62], ᐃ[480], ᐃ[62], ᐃ[480]]
		}], .45, [ᐃ[79], ᐃ[ⵠⵠⲆᐃⵠ], ᐃ[ⲆⲆᐃⲆ]], .5);
		ᐃᐃ[ⵠ.ⲆⲆΔΔⲆᐃⵠ] = ΔᐃᐃⲆ(1, [{
			f: ⲆᐃⲆᐃⵠ,
			x: -2,
			y: 5,
			a: ΔⲆⵠⲆ,
			r: -Math.PI / ⵠᐃⵠΔᐃ,
			c: [ᐃ[414], ᐃ[352], ᐃ[414], ᐃ[62], ᐃ[480], ᐃ[71], ᐃ[491]]
		}], .45, [ᐃ[79], ᐃ[ⵠⵠⲆᐃⵠ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⲆⵠᐃⲆⲆⲆⲆ] = ΔᐃᐃⲆ(ⲆⵠⲆ, [{
			f: ⲆᐃⲆᐃⵠ,
			x: -ΔⵠⲆⲆ,
			y: ⵠᐃⵠᐃΔ,
			a: ⵠⵠⵠⲆ,
			r: -Math.PI / ΔΔⵠⲆΔ,
			c: [ᐃ[414], ᐃ[352], ᐃ[414], ᐃ[136], ᐃ[183], ᐃ[179], ᐃ[453]]
		}], .45, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ᐃⵠᐃΔᐃⵠᐃ] = ΔᐃᐃⲆ(ⵠᐃᐃ, [{
			f: ⲆᐃⲆᐃⵠ,
			x: -2,
			y: 5,
			a: ⵠⵠⵠⲆ,
			r: -Math.PI / ⵠⲆⲆⲆ,
			c: [ᐃ[414], ᐃ[352], ᐃ[414], ᐃ[121], ᐃ[190], ᐃ[325], ᐃ[146]]
		}], .45, [ᐃ[79], ᐃ[ΔⵠⵠΔᐃ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⵠᐃΔΔⵠⵠⲆ] = ΔᐃᐃⲆ(ⲆⲆᐃⵠ, [{
			f: ⲆᐃⲆᐃⵠ,
			x: -2,
			y: ⵠⲆⲆⵠ,
			a: 1,
			r: -Math.PI / 5,
			c: [ᐃ[414], ᐃ[352], ᐃ[414], ᐃ[121], ᐃ[190], ᐃ[531], ᐃ[98]]
		}], .45, [ᐃ[79], ᐃ[100], ᐃ[ⵠᐃⵠ]], .5);
		ᐃᐃ[ⵠ.ΔⲆΔⲆᐃⲆΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆΔⲆᐃⲆΔ][ⲆⲆᐃ] = Δᐃ.ⵠⲆΔᐃΔⵠᐃ;
		ᐃᐃ[ⵠ.ΔⲆΔⲆᐃⲆΔ][1] = Δᐃ.ⲆᐃⲆⲆᐃᐃⵠ;
		ᐃᐃ[ⵠ.ΔⲆΔⲆᐃⲆΔ][Ⲇᐃⵠⵠ] = Δᐃ.ⵠⵠⵠⲆⵠⵠᐃ;
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠΔⵠⵠ] = ᐃᐃ[ⵠ.ΔⲆΔⲆᐃⲆΔ];
		ᐃᐃ[ⵠ.ⵠⵠΔⵠΔΔᐃ] = ᐃᐃ[ⵠ.ΔⲆΔⲆᐃⲆΔ];
		ᐃᐃ[ⵠ.ᐃⲆΔᐃΔᐃⲆ] = ΔᐃᐃⲆ(1, [{
			f: ΔᐃΔΔᐃⲆⵠ,
			x: -ⲆᐃΔⲆⵠ,
			y: -5,
			a: 1,
			r: ⵠⵠⵠ,
			c: [ᐃ[33], ᐃ[435], ᐃ[37]]
		}], .23, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⵠⵠΔⲆΔⵠᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⵠᐃΔΔⵠ,
			x: -ᐃⵠΔⵠ,
			y: -ⵠᐃⵠΔᐃ,
			a: ⲆⵠΔΔ,
			r: ⵠᐃⲆⵠ,
			c: ["#282823", "#877c2d", ᐃ[179]]
		}], .43, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ΔᐃΔⲆᐃⲆⲆ] = ΔᐃᐃⲆ(ⵠⵠⵠⲆ, [{
			f: ᐃⲆΔᐃⵠ,
			x: -5,
			y: -5,
			a: ⲆⵠⲆ,
			r: 0,
			c: [ᐃ[501], ᐃ[305], ᐃ[395]]
		}], .33, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⲆᐃΔ] = ΔᐃᐃⲆ(ΔΔⵠ, [{
			f: ⲆΔᐃⵠⵠΔΔ,
			x: 0,
			y: -ΔΔⵠⵠ,
			a: ⲆⵠⲆ,
			r: Math.PI / 2.5,
			c: [ᐃ[62], ᐃ[480]]
		}], .3, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠⵠⲆ] = ᐃᐃ[ⵠ.ⲆᐃᐃᐃΔΔⲆ];
		ᐃᐃ[ⵠ.ΔⲆᐃⵠⲆⲆΔ] = ᐃᐃ[ⵠ.ΔᐃᐃⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔⲆΔΔⲆ] = ᐃᐃ[ⵠ.ᐃᐃᐃΔΔΔⲆ];
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠⲆⲆ] = ᐃᐃ[ⵠ.ⵠⵠⵠⵠΔᐃᐃ];
		ᐃᐃ[ⵠ.ᐃΔᐃⲆᐃⲆⲆ] = ᐃᐃ[ⵠ.ⵠⵠⵠᐃΔⲆΔ];
		ᐃᐃ[ⵠ.ᐃᐃᐃⲆⲆΔⵠ] = ᐃᐃ[ⵠ.ᐃᐃⵠᐃΔᐃⲆ];
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠᐃⵠᐃ] = ᐃᐃ[ⵠ.ⲆⲆΔΔⲆᐃⵠ];
		ᐃᐃ[ⵠ.ⵠⵠΔᐃⲆᐃΔ] = ᐃᐃ[ⵠ.ⲆⵠᐃⲆⲆⲆⲆ];
		ᐃᐃ[ⵠ.ⵠΔⲆΔⵠΔᐃ] = ᐃᐃ[ⵠ.ᐃⵠᐃΔᐃⵠᐃ];
		ᐃᐃ[ⵠ.ⵠⵠⵠᐃⲆⲆᐃ] = ᐃᐃ[ⵠ.ⵠᐃΔΔⵠⵠⲆ];
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠⵠⵠᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⵠᐃᐃΔⲆⵠΔΔᐃ,
			x: 0,
			y: ⵠⵠΔΔ,
			a: ΔΔΔᐃ,
			r: 0
		}], .4, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔⲆⲆⲆΔⵠⵠ] = ΔᐃᐃⲆ(ᐃΔⵠΔ, [{
			f: ⵠⵠᐃⲆΔⵠⵠ,
			x: 0,
			y: Ⲇⵠᐃ,
			a: ΔᐃⵠⲆ,
			r: ⲆᐃΔⵠ,
			c: [ᐃ[414], ᐃ[62], ᐃ[480], "#756e52", "#663f22", "#9e9577"]
		}], .45, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔᐃⵠⲆⲆⵠⲆ] = ᐃᐃ[ⵠ.ΔⲆⲆⲆΔⵠⵠ];
		ᐃᐃ[ⵠ.ΔⵠᐃⵠⵠΔΔ] = ΔᐃᐃⲆ(1, [{
			f: ᐃⵠⵠⲆⵠΔΔ,
			x: -2,
			y: -2,
			a: 1,
			r: ⵠⵠⵠ,
			c: [ᐃ[414], ᐃ[557], ᐃ[67], ᐃ[273], ᐃ[195], ᐃ[406]]
		}], .4, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠⵠⲆ] = ᐃᐃ[ⵠ.ΔⵠᐃⵠⵠΔΔ];
		ᐃᐃ[ⵠ.ⲆⲆⵠΔⲆΔΔ] = ΔᐃᐃⲆ(1, [{
			f: ⲆΔΔⲆΔⵠⵠ,
			x: ⲆᐃΔⵠ,
			y: Ⲇⵠᐃ,
			a: 1,
			r: 0,
			c: [ᐃ[414], ᐃ[73], ᐃ[36], ᐃ[473], ᐃ[141], ᐃ[22], ᐃ[365]]
		}], .4, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔᐃⵠⲆⵠⲆΔ] = ᐃᐃ[ⵠ.ⲆⲆⵠΔⲆΔΔ];
		ᐃᐃ[ⵠ.ΔⵠΔⲆⲆⵠⵠ] = ΔᐃᐃⲆ(ᐃΔΔⲆ, [{
			f: ᐃⵠⵠⲆⵠΔΔ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: [ᐃ[414], ᐃ[260], ᐃ[98], ᐃ[528], ᐃ[429], ᐃ[252]]
		}], .4, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠᐃⵠⲆΔⵠⵠ] = ᐃᐃ[ⵠ.ΔⵠΔⲆⲆⵠⵠ];
		ᐃᐃ[ⵠ.ᐃᐃⵠⲆⲆⲆⲆ] = ΔᐃᐃⲆ(1, [{
			f: ⵠᐃΔΔΔᐃᐃ,
			x: ⵠⵠᐃ,
			y: ΔᐃⲆⲆ,
			a: ⵠⵠⵠⲆ,
			r: ⵠᐃⲆⵠ,
			c: [ᐃ[414], ᐃ[574], ᐃ[80], ᐃ[243], ᐃ[189], ᐃ[289]]
		}], .4, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃᐃΔⵠ] = ᐃᐃ[ⵠ.ᐃᐃⵠⲆⲆⲆⲆ];
		ᐃᐃ[ⵠ.ⲆᐃΔⲆⲆⲆⲆ] = ΔᐃᐃⲆ(1, [{
			f: ⵠΔΔⲆᐃⵠΔ,
			x: 0,
			y: Ⲇⵠᐃ,
			a: ΔᐃⵠⲆ,
			r: 0,
			c: [ᐃ[414], ᐃ[113], ᐃ[63], ᐃ[518], ᐃ[63], ᐃ[113]]
		}], .45, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠⲆᐃⵠΔᐃⲆ] = ᐃᐃ[ⵠ.ⲆᐃΔⲆⲆⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔⵠᐃⵠᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⵠᐃΔⲆⲆⵠΔ,
			x: Ⲇⵠⵠᐃ,
			y: 0,
			a: ΔΔⵠ,
			r: Δⵠⵠ,
			c: [ᐃ[414], ᐃ[491], ᐃ[71], ᐃ[113], ᐃ[63], ᐃ[518], ᐃ[63], ᐃ[113]]
		}], .35, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔⲆΔⲆⲆⲆΔ] = ᐃᐃ[ⵠ.ΔᐃΔⵠᐃⵠᐃ];
		ᐃᐃ[ⵠ.ᐃⵠⲆⵠⲆⵠᐃ] = ΔᐃᐃⲆ(ΔΔⵠ, [{
			f: ⲆⲆᐃΔᐃΔⵠ,
			x: 0,
			y: 0,
			a: 1,
			r: ⵠⵠᐃ,
			c: [ᐃ[414], ᐃ[491], ᐃ[71], ᐃ[574], ᐃ[80], ᐃ[243], ᐃ[189], ᐃ[289]]
		}], .35, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔΔⵠᐃⲆΔΔ] = ᐃᐃ[ⵠ.ᐃⵠⲆⵠⲆⵠᐃ];
		ᐃᐃ[ⵠ.ᐃⵠⵠⲆⲆⵠⲆ] = ΔᐃᐃⲆ(1, [{
			f: ⲆⲆᐃΔᐃΔⵠ,
			x: 0,
			y: ⵠⵠΔΔ,
			a: 1,
			r: Δⵠⵠ,
			c: [ᐃ[414], "#7d8b90", "#9facaa", ᐃ[73], ᐃ[36], ᐃ[473], ᐃ[141], ᐃ[22], ᐃ[365]]
		}], .35, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔᐃⲆⵠΔⲆⲆ] = ᐃᐃ[ⵠ.ᐃⵠⵠⲆⲆⵠⲆ];
		ᐃᐃ[ⵠ.ᐃΔⲆΔΔᐃᐃ] = ΔᐃᐃⲆ(ⵠᐃᐃ, [{
			f: ⵠⵠΔⲆⲆⲆⵠ,
			x: ⲆᐃΔⵠ,
			y: ⵠⵠΔΔ,
			a: ᐃΔⲆΔ,
			r: 0,
			c: [ᐃ[414], ᐃ[491], ᐃ[71], ᐃ[557], ᐃ[67], ᐃ[273], ᐃ[195], ᐃ[406]]
		}], .35, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ᐃⵠᐃⲆᐃΔᐃ] = ᐃᐃ[ⵠ.ᐃΔⲆΔΔᐃᐃ];
		ᐃᐃ[ⵠ.ᐃᐃΔᐃⵠΔᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⵠⵠΔⲆⲆⲆⵠ,
			x: 0,
			y: ⲆᐃΔⵠ,
			a: 1,
			r: Ⲇⵠᐃ,
			c: [ᐃ[414], ᐃ[491], ᐃ[71], ᐃ[260], ᐃ[98], ᐃ[528], ᐃ[429], ᐃ[252]]
		}], .35, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆⲆᐃⵠⲆⵠΔ] = ᐃᐃ[ⵠ.ᐃᐃΔᐃⵠΔᐃ];
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠⵠᐃⲆ] = ΔᐃᐃⲆ(ΔΔΔᐃ, [{
			f: ᐃᐃᐃΔΔⲆᐃ,
			x: ⵠⵠⵠ,
			y: 0,
			a: 1,
			r: 0,
			c: [ᐃ[414], ᐃ[503], ᐃ[425], "#644928", ᐃ[425], "#735534"]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ᐃᐃⵠⵠᐃⲆΔ] = ᐃᐃ[ⵠ.ᐃⲆⲆⵠⵠᐃⲆ];
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃⲆⵠΔ] = ΔᐃᐃⲆ(ⲆⲆᐃⵠ, [{
			f: ⵠⵠΔᐃᐃ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: [ᐃ[414], ᐃ[557], ᐃ[67], ᐃ[273], ᐃ[406], ᐃ[195]]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠΔⵠᐃᐃΔⲆ] = ᐃᐃ[ⵠ.ᐃⲆⲆᐃⲆⵠΔ];
		ᐃᐃ[ⵠ.ᐃᐃⲆΔΔΔⲆ] = ΔᐃᐃⲆ(1, [{
			f: ⵠⵠΔᐃᐃ,
			x: 0,
			y: ⵠᐃⵠ,
			a: ⲆⲆⲆᐃ,
			r: ⲆᐃΔⵠ,
			c: [ᐃ[414], ᐃ[260], ᐃ[98], ᐃ[528], ᐃ[429], ᐃ[252]]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔⲆΔᐃΔΔΔ] = ᐃᐃ[ⵠ.ᐃᐃⲆΔΔΔⲆ];
		ᐃᐃ[ⵠ.ΔᐃⲆⲆⲆⵠᐃ] = ΔᐃᐃⲆ(ⲆⲆⵠ, [{
			f: ΔᐃⲆΔᐃⲆⵠ,
			x: 0,
			y: 0,
			a: 1,
			r: ⲆⲆᐃⲆ,
			c: [ᐃ[414], ᐃ[574], ᐃ[80], ᐃ[243], "#9a8636", ᐃ[289]]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔΔⵠⲆᐃᐃΔ] = ᐃᐃ[ⵠ.ΔᐃⲆⲆⲆⵠᐃ];
		ᐃᐃ[ⵠ.ΔⵠΔⵠΔⵠⵠ] = ΔᐃᐃⲆ(1, [{
			f: ΔⲆᐃⵠᐃΔᐃ,
			x: ⵠⵠᐃ,
			y: 0,
			a: ⲆⲆᐃⵠ,
			r: 0,
			c: [ᐃ[414], ᐃ[73], ᐃ[36], ᐃ[473], ᐃ[141], ᐃ[22], ᐃ[365]]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆᐃΔΔᐃᐃⲆ] = ᐃᐃ[ⵠ.ΔⵠΔⵠΔⵠⵠ];
		ᐃᐃ[ⵠ.ⵠᐃⲆΔᐃⲆⵠ] = ΔᐃᐃⲆ(ΔᐃⵠⲆ, [{
			f: ⲆⲆΔⵠΔΔⵠ,
			x: 0,
			y: ⲆΔΔⲆ,
			a: 1,
			r: 0,
			c: [ᐃ[545], "#9e8838", ᐃ[47], ᐃ[503], ᐃ[92], ᐃ[92], ᐃ[92], ᐃ[47], ᐃ[47], ᐃ[47]]
		}], .35, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔⲆᐃΔⲆΔⵠ] = ᐃᐃ[ⵠ.ⵠᐃⲆΔᐃⲆⵠ];
		ᐃᐃ[ⵠ.ⵠᐃⲆΔⲆᐃΔ] = ΔᐃᐃⲆ(1, [{
			f: ΔΔⲆⲆΔΔⲆ,
			x: 0,
			y: -ⵠⲆᐃΔ,
			a: 1,
			r: 0,
			c: ["#dd5d57", ᐃ[478], "#5e5d5e", ᐃ[478]]
		}], 1.4, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆᐃⵠΔⲆⵠⵠ] = ΔᐃᐃⲆ(1, [{
			f: ΔΔⲆⲆΔΔⲆ,
			x: ᐃⲆΔ,
			y: -3,
			a: ⲆⲆΔⵠ,
			r: 0,
			c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
		}], 1.4, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔΔᐃᐃᐃⵠⵠ] = ᐃᐃ[ⵠ.ⲆᐃⵠΔⲆⵠⵠ];
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠᐃΔⵠ] = ΔᐃᐃⲆ(1, [{
			f: ⲆⲆⵠⲆΔⵠᐃ,
			x: -3,
			y: -ⵠⵠⲆⲆ,
			a: 1,
			r: 0,
			c: ["#cec0c4", ᐃ[478], "#6d6768"]
		}], .9, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔⲆⲆΔΔΔⲆ] = ΔᐃᐃⲆ(1, [{
			f: ⲆⲆⵠⲆΔⵠᐃ,
			x: -ⵠⵠΔⲆ,
			y: -3,
			a: 1,
			r: 0,
			c: ["#d4e9ec", "#37b1d7", "#506c71"]
		}], .9, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠΔⲆⲆᐃᐃΔ] = ᐃᐃ[ⵠ.ΔⲆⲆΔΔΔⲆ];
		ᐃᐃ[ⵠ.ⵠⵠⵠⲆⵠⵠⵠ] = ΔᐃᐃⲆ(1, [{
			f: ⵠΔᐃⵠⲆΔⲆ,
			x: -ⵠᐃⵠⵠ,
			y: -3,
			a: ᐃΔΔⲆ,
			r: ⵠⵠⵠ,
			c: ["#ef96be", ᐃ[478]]
		}], .5, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⲆⲆᐃΔΔΔᐃ] = ΔᐃᐃⲆ(ΔΔΔᐃ, [{
			f: ⵠΔᐃⵠⲆΔⲆ,
			x: -ⵠⲆᐃΔ,
			y: -3,
			a: 1,
			r: 0,
			c: ["#55423e", ᐃ[478]]
		}], .5, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⵠΔⵠᐃⵠⵠᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⲆⵠⲆΔⲆⲆᐃ,
			x: 0,
			y: Δⵠⵠ,
			a: 1,
			r: 0,
			c: [ᐃ[478], "#e7e2e2", "#b35c46", "#a34d37"]
		}], .25, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆⲆⲆΔ] = ΔᐃᐃⲆ(1, [{
			f: ⲆⵠⲆΔⲆⲆᐃ,
			x: 0,
			y: Ⲇⵠⵠᐃ,
			a: 1,
			r: 0,
			c: ["#14151b", ᐃ[352], "#b35c46", "#a34d37"]
		}], .25, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⲆΔΔΔΔΔⲆ] = ΔᐃᐃⲆ(ᐃΔⵠΔ, [{
			f: ⵠΔᐃⵠⲆΔⲆ,
			x: ⲆⲆΔ,
			y: Ⲇⵠⵠᐃ,
			a: Δⵠᐃ,
			r: 0,
			c: ["#201851", "#b6222a"]
		}], .5, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ᐃⲆΔᐃⲆⲆΔ] = ΔᐃᐃⲆ(1, [{
			f: ⵠΔᐃⵠⲆΔⲆ,
			x: -3,
			y: -ⲆⲆΔΔ,
			a: ⵠᐃᐃ,
			r: 0,
			c: ["#231f20", "#b6222a"]
		}], .5, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠⲆᐃ] = ΔᐃᐃⲆ(ᐃΔΔⲆ, [{
			f: ⵠΔᐃⵠⲆΔⲆ,
			x: -3,
			y: -ⵠⵠⲆⲆ,
			a: Δⵠᐃ,
			r: 0,
			c: [ᐃ[478], "#b6222a"]
		}], .5, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃᐃᐃᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⲆⲆⵠᐃⲆᐃᐃ,
			x: 0,
			y: ᐃⲆΔᐃ,
			a: 1,
			r: ⵠᐃⵠ,
			c: [ᐃ[358], ᐃ[30], ᐃ[205], ᐃ[164]]
		}], .4, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⵠᐃⵠⲆᐃⵠᐃ] = ᐃᐃ[ⵠ.ᐃᐃⵠᐃᐃᐃᐃ];
		ᐃᐃ[ⵠ.ᐃΔⵠⲆΔⵠΔ] = ΔᐃᐃⲆ(ⲆⲆᐃⵠ, [{
			f: ⲆᐃᐃⵠΔⲆΔ,
			x: 0,
			y: ⵠᐃⲆⵠ,
			a: 1,
			r: 0,
			c: [ᐃ[205], ᐃ[164], ᐃ[358], ᐃ[30]]
		}], .4, [ᐃ[79], ᐃ[100], ᐃ[ᐃⲆᐃ]], .5);
		ᐃᐃ[ⵠ.ΔΔΔⵠΔⲆᐃ] = ᐃᐃ[ⵠ.ᐃΔⵠⲆΔⵠΔ];
		ᐃᐃ[ⵠ.ΔΔⵠⵠⲆⲆⲆ] = ΔᐃᐃⲆ(ⲆⲆⲆᐃ, [{
			f: ⲆᐃⲆⵠΔᐃⲆ,
			x: 0,
			y: ΔᐃⲆⲆ,
			a: 1,
			r: ⲆⲆᐃ,
			c: [ᐃ[251], "#dee7e7", "#b8cccb", ᐃ[478], "#e3e8e8"]
		}], .4, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⵠΔᐃⲆᐃΔⲆ] = ᐃᐃ[ⵠ.ΔΔⵠⵠⲆⲆⲆ];
		ᐃᐃ[ⵠ.ⲆⲆΔΔⲆΔⲆ] = ΔᐃᐃⲆ(ᐃⵠᐃᐃ, [{
			f: ⲆΔᐃΔⵠΔΔ,
			x: 0,
			y: 5,
			a: ᐃΔⵠΔ,
			r: ⲆⲆᐃⲆ,
			c: [ᐃ[251], "#c5232c", "#84191d", "#a72027", ᐃ[440], ᐃ[476]]
		}], .35, [ᐃ[79], ᐃ[ΔᐃΔⲆᐃ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⵠⵠⵠΔᐃΔΔ] = ᐃᐃ[ⵠ.ⲆⲆΔΔⲆΔⲆ];
		ᐃᐃ[ⵠ.ⲆⵠⲆᐃⵠⲆΔ] = ΔᐃᐃⲆ(ⲆⵠΔΔ, [{
			f: ⵠⲆⵠΔⵠΔⵠ,
			x: 0,
			y: 5,
			a: ⲆⲆⵠ,
			r: ᐃⲆΔ,
			c: [ᐃ[251], "#0f964c", "#106e3b", "#138344", ᐃ[440], ᐃ[476], "#C5232C", "#A92D2D"]
		}], .35, [ᐃ[79], ᐃ[ⲆⵠⲆⵠᐃ], ᐃ[ᐃⲆΔᐃ]], .5);
		ᐃᐃ[ⵠ.ᐃΔᐃΔᐃⵠⵠ] = ᐃᐃ[ⵠ.ⲆⵠⲆᐃⵠⲆΔ];
		ᐃᐃ[ⵠ.ᐃⵠᐃⵠᐃΔᐃ] = ΔᐃᐃⲆ(1, [{
			f: ᐃⵠⲆᐃⲆⲆΔⵠⲆ,
			x: -ⵠΔΔΔ,
			y: -2,
			a: ⲆⲆᐃⵠ,
			r: 0,
			c: [ᐃ[478], "#cec0c4"]
		}], .35, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆⵠⲆΔⲆΔⵠ] = ᐃᐃ[ⵠ.ᐃⵠᐃⵠᐃΔᐃ];
		ᐃᐃ[ⵠ.ΔΔⲆⵠᐃΔⵠ] = [];
		ᐃᐃ[ⵠ.ΔΔⲆⵠᐃΔⵠ][ⵠΔⵠᐃ] = Δᐃ.ⲆⲆⲆᐃⵠᐃΔ;
		ᐃᐃ[ⵠ.ΔΔⲆⵠᐃΔⵠ][ΔΔⵠ] = Δᐃ.ᐃᐃⲆⲆᐃᐃΔ;
		ᐃᐃ[ⵠ.ΔΔⲆⵠᐃΔⵠ][ᐃᐃⵠⵠ] = Δᐃ.ⲆⵠΔᐃⵠᐃΔ;
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠⲆᐃΔ] = ᐃᐃ[ⵠ.ΔΔⲆⵠᐃΔⵠ];
		ᐃᐃ[ⵠ.Δⵠⵠⵠᐃᐃᐃ] = [];
		ᐃᐃ[ⵠ.Δⵠⵠⵠᐃᐃᐃ][ⵠᐃⲆⵠ] = Δᐃ.ⲆⲆⲆⵠᐃΔᐃ;
		ᐃᐃ[ⵠ.Δⵠⵠⵠᐃᐃᐃ][ᐃⲆⲆ] = Δᐃ.ΔΔⵠΔᐃⵠΔ;
		ᐃᐃ[ⵠ.Δⵠⵠⵠᐃᐃᐃ][2] = Δᐃ.ⵠᐃᐃⵠⵠⵠΔ;
		ᐃᐃ[ⵠ.ⲆΔΔⵠⵠᐃⲆ] = ᐃᐃ[ⵠ.Δⵠⵠⵠᐃᐃᐃ];
		ᐃᐃ[ⵠ.ⲆᐃΔⵠΔⲆⲆ] = ᐃᐃ[ⵠ.Δⵠⵠⵠᐃᐃᐃ];
		ᐃᐃ[ⵠ.ᐃΔⵠΔⵠᐃⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠΔⵠᐃⵠ][0] = Δᐃ.ⵠⲆⲆᐃΔⵠⵠ;
		ᐃᐃ[ⵠ.ᐃΔⵠΔⵠᐃⵠ][1] = Δᐃ.ⲆⲆⲆⲆᐃⵠⲆ;
		ᐃᐃ[ⵠ.ᐃΔⵠΔⵠᐃⵠ][ⵠⲆΔᐃ] = Δᐃ.ⵠᐃΔᐃⲆⲆⵠ;
		ᐃᐃ[ⵠ.ᐃⵠⵠΔΔⲆⲆ] = ᐃᐃ[ⵠ.ᐃΔⵠΔⵠᐃⵠ];
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆΔⵠΔ] = ᐃᐃ[ⵠ.ᐃΔⵠΔⵠᐃⵠ];
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠᐃᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠᐃᐃ][ⲆⲆᐃⲆ] = Δᐃ.ΔΔᐃΔⲆⵠⵠ;
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠᐃᐃ][1] = Δᐃ.ΔΔᐃΔⲆⵠⵠ;
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠᐃᐃ][2] = Δᐃ.ΔΔᐃΔⲆⵠⵠ;
		ᐃᐃ[ⵠ.ⵠⵠⲆᐃΔⲆⲆ] = ᐃᐃ[ⵠ.ⲆⲆΔΔⵠᐃᐃ];
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆⵠΔⲆ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆⵠΔⲆ][ᐃⲆᐃ] = Δᐃ.ⵠⲆΔⲆⵠⲆⲆ;
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆⵠΔⲆ][1] = Δᐃ.ΔⲆΔⲆᐃⲆᐃ;
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆⵠΔⲆ][2] = Δᐃ.ᐃⵠⵠⵠⵠᐃᐃ;
		ᐃᐃ[ⵠ.ΔᐃΔᐃⲆⲆⵠ] = ᐃᐃ[ⵠ.ⵠᐃⲆⲆⵠΔⲆ];
		ᐃᐃ[ⵠ.ᐃΔᐃⵠⵠᐃΔ] = ᐃᐃ[ⵠ.ⵠᐃⲆⲆⵠΔⲆ];
		ᐃᐃ[ⵠ.ⵠᐃΔΔΔⵠⵠ] = [];
		ᐃᐃ[ⵠ.ⵠᐃΔΔΔⵠⵠ][ⵠᐃⲆⵠ] = Δᐃ.ⲆᐃΔΔΔⵠᐃ;
		ᐃᐃ[ⵠ.ⵠᐃΔΔΔⵠⵠ][ⵠᐃᐃ] = Δᐃ.ⲆᐃΔΔΔⵠᐃ;
		ᐃᐃ[ⵠ.ⵠᐃΔΔΔⵠⵠ][2] = Δᐃ.ⲆᐃΔΔΔⵠᐃ;
		ᐃᐃ[ⵠ.ⵠⵠⲆⲆᐃᐃΔ] = ᐃᐃ[ⵠ.ⵠᐃΔΔΔⵠⵠ];
		ᐃᐃ[ⵠ.ⵠⲆΔⲆΔΔΔ] = [];
		ᐃᐃ[ⵠ.ⵠⲆΔⲆΔΔΔ][0] = Δᐃ.ΔⲆⲆᐃᐃⵠᐃⲆⲆ;
		ᐃᐃ[ⵠ.ⵠⲆΔⲆΔΔΔ][1] = Δᐃ.ᐃᐃΔΔΔⵠᐃⲆⵠ;
		ᐃᐃ[ⵠ.ⵠⲆΔⲆΔΔΔ][ᐃᐃⵠⵠ] = Δᐃ.ᐃⲆⲆⲆΔᐃⲆⲆΔ;
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠΔⵠ] = ᐃᐃ[ⵠ.ⵠⲆΔⲆΔΔΔ];
		ᐃᐃ[ⵠ.ᐃⲆΔΔᐃⲆⲆ] = ᐃᐃ[ⵠ.ⵠⲆΔⲆΔΔΔ];
		ᐃᐃ[ⵠ.ⵠⵠⲆᐃⲆⲆΔ] = [];
		ᐃᐃ[ⵠ.ⵠⵠⲆᐃⲆⲆΔ][0] = Δᐃ.ⲆⲆⵠΔⵠⲆᐃ;
		ᐃᐃ[ⵠ.ⵠⵠⲆᐃⲆⲆΔ][1] = Δᐃ.ⵠΔⲆⲆⵠⲆΔ;
		ᐃᐃ[ⵠ.ⵠⵠⲆᐃⲆⲆΔ][ⵠⵠΔⵠ] = Δᐃ.ᐃᐃⵠᐃᐃⵠᐃ;
		ᐃᐃ[ⵠ.ΔΔⲆΔⵠⲆᐃ] = ᐃᐃ[ⵠ.ⵠⵠⲆᐃⲆⲆΔ];
		ᐃᐃ[ⵠ.ᐃΔΔⲆⲆⵠⵠ] = ᐃᐃ[ⵠ.ⵠⵠⲆᐃⲆⲆΔ];
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃⲆⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃⲆⲆᐃ][0] = Δᐃ.ⲆⵠᐃⵠⵠΔᐃ;
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃⲆⲆᐃ][1] = Δᐃ.ⲆΔⵠⲆΔΔⵠ;
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃⲆⲆᐃ][ⲆᐃᐃⲆ] = Δᐃ.ᐃⵠⲆⵠΔⵠⵠ;
		ᐃᐃ[ⵠ.ⲆⲆΔᐃᐃⲆⲆ] = ᐃᐃ[ⵠ.ⵠᐃⵠᐃⲆⲆᐃ];
		ᐃᐃ[ⵠ.ᐃⵠⲆᐃⵠΔᐃ] = ᐃᐃ[ⵠ.ⵠᐃⵠᐃⲆⲆᐃ];
		ᐃᐃ[ⵠ.ΔⲆᐃⲆⵠΔᐃ] = [];
		ᐃᐃ[ⵠ.ΔⲆᐃⲆⵠΔᐃ][ᐃⲆΔ] = Δᐃ.ⲆΔⵠⵠⵠⵠⲆ;
		ᐃᐃ[ⵠ.ΔⲆᐃⲆⵠΔᐃ][ᐃⵠᐃᐃ] = Δᐃ.ⲆⲆΔΔⵠⵠᐃ;
		ᐃᐃ[ⵠ.ΔⲆᐃⲆⵠΔᐃ][ᐃᐃΔⵠ] = Δᐃ.ⵠⵠΔᐃⵠᐃⵠ;
		ᐃᐃ[ⵠ.ΔᐃⲆΔΔⲆΔ] = ᐃᐃ[ⵠ.ΔⲆᐃⲆⵠΔᐃ];
		ᐃᐃ[ⵠ.ᐃᐃⵠΔⲆⲆⲆ] = ᐃᐃ[ⵠ.ΔⲆᐃⲆⵠΔᐃ];
		ᐃᐃ[ⵠ.ⲆⵠⵠΔⲆⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⵠⵠΔⲆⲆⵠ][0] = Δᐃ.ⵠᐃΔᐃⵠⵠᐃ;
		ᐃᐃ[ⵠ.ⲆⵠⵠΔⲆⲆⵠ][ⲆⲆᐃⵠ] = Δᐃ.ⲆⵠᐃΔⵠⵠΔ;
		ᐃᐃ[ⵠ.ⲆⵠⵠΔⲆⲆⵠ][ⵠⲆᐃⵠ] = Δᐃ.ΔⲆᐃᐃΔⵠⵠ;
		ᐃᐃ[ⵠ.ⲆᐃᐃΔᐃⵠⵠ] = ᐃᐃ[ⵠ.ⲆⵠⵠΔⲆⲆⵠ];
		ᐃᐃ[ⵠ.ⵠᐃΔᐃᐃⲆⲆ] = ᐃᐃ[ⵠ.ⲆⵠⵠΔⲆⲆⵠ];
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⵠΔΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⵠΔΔ][ⵠⵠⵠ] = Δᐃ.ⲆᐃᐃⲆⵠⵠⲆ;
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⵠΔΔ][ⲆⵠΔΔ] = Δᐃ.ⵠᐃᐃᐃⵠᐃⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⵠΔΔ][ⵠΔⵠⲆ] = Δᐃ.ΔᐃΔⵠΔⲆᐃ;
		ᐃᐃ[ⵠ.ⲆᐃΔᐃᐃⵠⵠ] = ᐃᐃ[ⵠ.ᐃⲆⵠᐃⵠΔΔ];
		ᐃᐃ[ⵠ.ⲆΔΔᐃⵠⲆⵠ] = ᐃᐃ[ⵠ.ᐃⲆⵠᐃⵠΔΔ];
		ᐃᐃ[ⵠ.ⲆᐃᐃΔΔΔⲆ] = [];
		ᐃᐃ[ⵠ.ⲆᐃᐃΔΔΔⲆ][0] = Δᐃ.ⵠᐃⵠⵠⲆᐃⵠ;
		ᐃᐃ[ⵠ.ⲆᐃᐃΔΔΔⲆ][ᐃΔΔⲆ] = Δᐃ.ⲆΔⵠΔΔᐃⵠ;
		ᐃᐃ[ⵠ.ⲆᐃᐃΔΔΔⲆ][2] = Δᐃ.ΔⵠΔΔⲆⲆᐃ;
		ᐃᐃ[ⵠ.ⲆᐃⵠⲆΔⵠᐃ] = ᐃᐃ[ⵠ.ⲆᐃᐃΔΔΔⲆ];
		ᐃᐃ[ⵠ.ΔⵠⲆⵠᐃᐃⵠ] = ᐃᐃ[ⵠ.ⲆᐃᐃΔΔΔⲆ];
		ᐃᐃ[ⵠ.ⲆΔᐃΔⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆΔᐃΔⲆⵠΔ][ⵠᐃⲆⵠ] = Δᐃ.ᐃΔᐃⵠⲆⲆⵠ;
		ᐃᐃ[ⵠ.ⲆΔᐃΔⲆⵠΔ][ᐃΔⵠΔ] = Δᐃ.ᐃⵠᐃⲆⲆⵠᐃ;
		ᐃᐃ[ⵠ.ⲆΔᐃΔⲆⵠΔ][Ⲇᐃⵠⵠ] = Δᐃ.ⵠᐃᐃⵠᐃⵠΔ;
		ᐃᐃ[ⵠ.ᐃᐃᐃⵠⲆᐃⲆ] = ᐃᐃ[ⵠ.ⲆΔᐃΔⲆⵠΔ];
		ᐃᐃ[ⵠ.ⵠⵠΔΔΔⵠⵠ] = ᐃᐃ[ⵠ.ⲆΔᐃΔⲆⵠΔ];
		ᐃᐃ[ⵠ.ⲆΔᐃΔᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ⲆΔᐃΔᐃΔΔ][0] = Δᐃ.ᐃΔΔᐃⵠⵠᐃ;
		ᐃᐃ[ⵠ.ⲆΔᐃΔᐃΔΔ][ΔΔΔᐃ] = Δᐃ.ⵠⵠⲆⵠΔⲆΔ;
		ᐃᐃ[ⵠ.ⲆΔᐃΔᐃΔΔ][ΔΔⵠⲆ] = Δᐃ.ᐃⵠᐃΔⲆΔᐃ;
		ᐃᐃ[ⵠ.ⵠⲆⲆⵠΔⵠⵠ] = ᐃᐃ[ⵠ.ⲆΔᐃΔᐃΔΔ];
		ᐃᐃ[ⵠ.ⲆⵠⲆΔⲆΔⲆ] = ᐃᐃ[ⵠ.ⲆΔᐃΔᐃΔΔ];
		ᐃᐃ[ⵠ.ᐃⲆᐃⲆΔⵠⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⲆᐃⲆΔⵠⲆ][ⵠᐃⵠ] = Δᐃ.ⵠⲆⲆΔⲆⲆᐃ;
		ᐃᐃ[ⵠ.ᐃⲆᐃⲆΔⵠⲆ][1] = Δᐃ.ⵠⲆΔΔⵠⲆⵠ;
		ᐃᐃ[ⵠ.ᐃⲆᐃⲆΔⵠⲆ][ΔⵠⲆⲆ] = Δᐃ.ΔⲆᐃᐃⵠⵠⲆ;
		ᐃᐃ[ⵠ.ⲆⵠⵠⲆⲆⵠⵠ] = ᐃᐃ[ⵠ.ᐃⲆᐃⲆΔⵠⲆ];
		ᐃᐃ[ⵠ.ΔⲆⲆⵠΔΔᐃ] = ᐃᐃ[ⵠ.ᐃⲆᐃⲆΔⵠⲆ];
		ᐃᐃ[ⵠ.ⲆᐃΔⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⲆᐃΔⲆᐃ][0] = Δᐃ.ⲆᐃΔⲆᐃ;
		ᐃᐃ[ⵠ.ⲆᐃΔⲆᐃ][ⵠᐃᐃ] = Δᐃ.ⲆᐃΔⲆᐃ;
		ᐃᐃ[ⵠ.ⲆᐃΔⲆᐃ][2] = Δᐃ.ⲆᐃΔⲆᐃ;
		ᐃᐃ[ⵠ.ᐃᐃⲆΔΔΔΔᐃΔ] = ᐃᐃ[ⵠ.ⲆᐃΔⲆᐃ];
		ᐃᐃ[ⵠ.Δᐃᐃᐃᐃᐃᐃ] = ᐃᐃ[ⵠ.ⲆᐃΔⲆᐃ];
		ᐃᐃ[ⵠ.ᐃⲆⵠⵠⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠⵠⵠ][ⵠΔⵠᐃ] = Δᐃ.ᐃⲆⵠⵠⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⵠⵠⵠ][1] = Δᐃ.ᐃⲆⵠⵠⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⵠⵠⵠ][ᐃᐃⵠⵠ] = Δᐃ.ᐃⲆⵠⵠⵠ;
		ᐃᐃ[ⵠ.ᐃΔΔⵠⲆⲆΔⲆⲆ] = ᐃᐃ[ⵠ.ᐃⲆⵠⵠⵠ];
		ᐃᐃ[ⵠ.ᐃⲆᐃΔΔⲆΔ] = ᐃᐃ[ⵠ.ᐃⲆⵠⵠⵠ];
		ᐃᐃ[ⵠ.ΔΔΔᐃⵠ] = [];
		ᐃᐃ[ⵠ.ΔΔΔᐃⵠ][0] = Δᐃ.ΔΔΔᐃⵠ;
		ᐃᐃ[ⵠ.ΔΔΔᐃⵠ][ⲆⲆⵠ] = Δᐃ.ΔΔΔᐃⵠ;
		ᐃᐃ[ⵠ.ΔΔΔᐃⵠ][2] = Δᐃ.ΔΔΔᐃⵠ;
		ᐃᐃ[ⵠ.ⵠⲆᐃⲆⲆᐃⵠᐃⲆ] = ᐃᐃ[ⵠ.ΔΔΔᐃⵠ];
		ᐃᐃ[ⵠ.ⵠΔᐃΔⵠΔᐃ] = ᐃᐃ[ⵠ.ΔΔΔᐃⵠ];
		ᐃᐃ[ⵠ.ΔⵠᐃⲆⲆ] = [];
		ᐃᐃ[ⵠ.ΔⵠᐃⲆⲆ][ⵠⵠΔΔ] = Δᐃ.ΔⵠᐃⲆⲆ;
		ᐃᐃ[ⵠ.ΔⵠᐃⲆⲆ][Δⵠᐃ] = Δᐃ.ΔⵠᐃⲆⲆ;
		ᐃᐃ[ⵠ.ΔⵠᐃⲆⲆ][ᐃⲆⵠᐃ] = Δᐃ.ΔⵠᐃⲆⲆ;
		ᐃᐃ[ⵠ.ⵠⵠᐃΔⲆⵠΔ] = ᐃᐃ[ⵠ.ΔⵠᐃⲆⲆ];
		ᐃᐃ[ⵠ.ⲆⵠΔⵠⲆⲆⲆ] = [];
		ᐃᐃ[ⵠ.ⲆⵠΔⵠⲆⲆⲆ][0] = Δᐃ.ⲆⲆΔⲆⵠⵠⵠ;
		ᐃᐃ[ⵠ.ⲆⵠΔⵠⲆⲆⲆ][ⲆⲆⵠ] = Δᐃ.ⵠⲆⵠΔΔΔⵠ;
		ᐃᐃ[ⵠ.ⲆⵠΔⵠⲆⲆⲆ][ⵠᐃᐃⲆ] = Δᐃ.ᐃⲆᐃᐃᐃⲆⲆ;
		ᐃᐃ[ⵠ.ᐃΔⵠΔⲆΔΔ] = ᐃᐃ[ⵠ.ⲆⵠΔⵠⲆⲆⲆ];
		ᐃᐃ[ⵠ.ᐃᐃᐃΔΔⲆΔ] = ᐃᐃ[ⵠ.ⲆⵠΔⵠⲆⲆⲆ];
		ᐃᐃ[ⵠ.ⲆΔΔΔΔⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔΔΔⵠᐃ][ⵠᐃⲆⵠ] = Δᐃ.ⲆⵠΔⵠᐃᐃᐃ;
		ᐃᐃ[ⵠ.ⲆΔΔΔΔⵠᐃ][ᐃⵠⵠⵠ] = Δᐃ.ⲆⲆⵠⵠⵠⲆⵠ;
		ᐃᐃ[ⵠ.ⲆΔΔΔΔⵠᐃ][ΔⵠⲆⲆ] = Δᐃ.ⲆᐃΔᐃⵠⲆⲆ;
		ᐃᐃ[ⵠ.ΔⲆⲆᐃⵠⲆⵠ] = ᐃᐃ[ⵠ.ⲆΔΔΔΔⵠᐃ];
		ᐃᐃ[ⵠ.ΔᐃⲆΔⵠⲆΔ] = ᐃᐃ[ⵠ.ⲆΔΔΔΔⵠᐃ];
		ᐃᐃ[ⵠ.ⲆⵠᐃⲆΔΔᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⵠᐃⲆΔΔᐃ][ⲆⲆᐃ] = Δᐃ.ΔⵠⵠⵠⵠΔᐃ;
		ᐃᐃ[ⵠ.ⲆⵠᐃⲆΔΔᐃ][1] = Δᐃ.ⵠᐃⵠⵠⲆᐃΔ;
		ᐃᐃ[ⵠ.ⲆⵠᐃⲆΔΔᐃ][ΔⲆⵠΔ] = Δᐃ.ⲆΔᐃⲆⵠΔⲆ;
		ᐃᐃ[ⵠ.ΔΔⲆⲆⲆᐃⵠ] = ᐃᐃ[ⵠ.ⲆⵠᐃⲆΔΔᐃ];
		ᐃᐃ[ⵠ.ᐃⲆⵠΔΔᐃⵠ] = ᐃᐃ[ⵠ.ⲆⵠᐃⲆΔΔᐃ];
		ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠΔⲆ] = [];
		ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠΔⲆ][ⵠⵠᐃ] = Δᐃ.ΔᐃᐃⲆⵠⵠᐃ;
		ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠΔⲆ][1] = Δᐃ.ΔΔΔⵠⵠΔᐃ;
		ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠΔⲆ][ᐃⲆⵠᐃ] = Δᐃ.ΔⵠⲆᐃᐃᐃᐃ;
		ᐃᐃ[ⵠ.ⲆΔΔᐃⲆⲆᐃ] = ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠΔⲆ];
		ᐃᐃ[ⵠ.ⲆⵠⲆᐃΔᐃⲆ] = ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠΔⲆ];
		ᐃᐃ[ⵠ.ᐃⲆΔΔᐃᐃΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆΔΔᐃᐃΔ][0] = Δᐃ.ⵠⲆⵠⲆΔⲆⲆ;
		ᐃᐃ[ⵠ.ᐃⲆΔΔᐃᐃΔ][ΔΔⵠ] = Δᐃ.ⵠᐃᐃⲆⲆⲆⵠ;
		ᐃᐃ[ⵠ.ᐃⲆΔΔᐃᐃΔ][ΔΔᐃⲆⵠ] = Δᐃ.ΔΔᐃᐃⲆⵠⵠ;
		ᐃᐃ[ⵠ.ΔΔⵠⲆΔⲆᐃ] = ᐃᐃ[ⵠ.ᐃⲆΔΔᐃᐃΔ];
		ᐃᐃ[ⵠ.ΔΔⵠΔᐃᐃⵠ] = ᐃᐃ[ⵠ.ᐃⲆΔΔᐃᐃΔ];
		ᐃᐃ[ⵠ.ⲆᐃᐃᐃΔⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⲆᐃᐃᐃΔⲆᐃ][ⲆⲆΔ] = Δᐃ.ⵠⵠⵠⵠΔᐃΔ;
		ᐃᐃ[ⵠ.ⲆᐃᐃᐃΔⲆᐃ][1] = Δᐃ.ΔΔᐃⵠⲆΔᐃ;
		ᐃᐃ[ⵠ.ⲆᐃᐃᐃΔⲆᐃ][2] = Δᐃ.ⲆⲆᐃΔⵠⵠΔ;
		ᐃᐃ[ⵠ.ᐃΔΔᐃⲆⲆΔ] = ᐃᐃ[ⵠ.ⲆᐃᐃᐃΔⲆᐃ];
		ᐃᐃ[ⵠ.ⲆⵠⵠᐃΔⵠᐃ] = ᐃᐃ[ⵠ.ⲆᐃᐃᐃΔⲆᐃ];
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃΔⲆΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃΔⲆΔ][0] = Δᐃ.ΔⵠᐃⵠⵠⲆⵠᐃᐃ;
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃΔⲆΔ][1] = Δᐃ.ⵠΔΔⲆᐃⵠᐃΔⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃΔⲆΔ][ᐃⲆⵠᐃ] = Δᐃ.ᐃⲆᐃⵠⵠᐃⵠⲆΔ;
		ᐃᐃ[ⵠ.ⵠⵠΔᐃᐃⵠΔ] = ᐃᐃ[ⵠ.ᐃⲆⵠᐃΔⲆΔ];
		ᐃᐃ[ⵠ.ᐃⲆΔⵠⵠⲆⵠ] = ᐃᐃ[ⵠ.ᐃⲆⵠᐃΔⲆΔ];
		ᐃᐃ[ⵠ.ᐃⵠΔΔⵠᐃΔ] = [];
		ᐃᐃ[ⵠ.ᐃⵠΔΔⵠᐃΔ][ΔᐃⲆⲆ] = Δᐃ.ⵠⲆΔⲆⲆΔΔ;
		ᐃᐃ[ⵠ.ᐃⵠΔΔⵠᐃΔ][1] = Δᐃ.ⲆⵠΔⵠΔΔⲆ;
		ᐃᐃ[ⵠ.ᐃⵠΔΔⵠᐃΔ][2] = Δᐃ.ᐃᐃⲆΔⲆⵠⲆ;
		ᐃᐃ[ⵠ.ΔⵠᐃⵠⵠⵠΔ] = ᐃᐃ[ⵠ.ᐃⵠΔΔⵠᐃΔ];
		ᐃᐃ[ⵠ.ⵠⵠⲆⲆᐃⵠⲆ] = ᐃᐃ[ⵠ.ᐃⵠΔΔⵠᐃΔ];
		ᐃᐃ[ⵠ.ᐃⲆᐃⵠᐃⲆᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⲆᐃⵠᐃⲆᐃ][ⵠᐃⵠ] = Δᐃ.ⵠᐃᐃΔΔΔΔ;
		ᐃᐃ[ⵠ.ᐃⲆᐃⵠᐃⲆᐃ][ⲆⲆΔⵠ] = Δᐃ.ᐃⵠΔⲆⵠΔⲆ;
		ᐃᐃ[ⵠ.ᐃⲆᐃⵠᐃⲆᐃ][2] = Δᐃ.ΔⲆΔᐃΔⲆᐃ;
		ᐃᐃ[ⵠ.ⵠΔΔⵠⲆΔⲆ] = ᐃᐃ[ⵠ.ᐃⲆᐃⵠᐃⲆᐃ];
		ᐃᐃ[ⵠ.ⵠΔⵠᐃΔΔⵠ] = ᐃᐃ[ⵠ.ᐃⲆᐃⵠᐃⲆᐃ];
		ᐃᐃ[ⵠ.ᐃᐃΔⵠⵠᐃⲆ] = [];
		ᐃᐃ[ⵠ.ᐃᐃΔⵠⵠᐃⲆ][ᐃⲆΔᐃ] = Δᐃ.ᐃΔΔᐃᐃⲆΔ;
		ᐃᐃ[ⵠ.ᐃᐃΔⵠⵠᐃⲆ][1] = Δᐃ.ⲆΔΔΔⵠⲆΔ;
		ᐃᐃ[ⵠ.ᐃᐃΔⵠⵠᐃⲆ][2] = Δᐃ.ⲆΔⵠᐃΔΔⵠ;
		ᐃᐃ[ⵠ.ⲆᐃΔⲆᐃⲆΔ] = ᐃᐃ[ⵠ.ᐃᐃΔⵠⵠᐃⲆ];
		ᐃᐃ[ⵠ.ΔᐃᐃⲆⲆⵠΔ] = ᐃᐃ[ⵠ.ᐃᐃΔⵠⵠᐃⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔΔᐃΔⵠ] = [];
		ᐃᐃ[ⵠ.ΔᐃΔΔᐃΔⵠ][0] = Δᐃ.ᐃΔᐃⲆΔᐃⵠ;
		ᐃᐃ[ⵠ.ΔᐃΔΔᐃΔⵠ][ΔᐃⵠⲆ] = Δᐃ.ᐃΔᐃᐃⲆᐃⲆ;
		ᐃᐃ[ⵠ.ΔᐃΔΔᐃΔⵠ][ⵠΔⵠⲆ] = Δᐃ.ᐃⲆᐃΔⲆᐃΔ;
		ᐃᐃ[ⵠ.ⲆΔⵠΔⲆΔⵠ] = ᐃᐃ[ⵠ.ΔᐃΔΔᐃΔⵠ];
		ᐃᐃ[ⵠ.ⲆΔᐃΔΔᐃⵠ] = ᐃᐃ[ⵠ.ΔᐃΔΔᐃΔⵠ];
		ᐃᐃ[ⵠ.ᐃᐃⲆΔᐃⲆΔ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⲆΔᐃⲆΔ][ⵠⵠΔΔ] = Δᐃ.ⲆⲆⲆΔᐃⵠⲆ;
		ᐃᐃ[ⵠ.ᐃᐃⲆΔᐃⲆΔ][ᐃΔⲆΔ] = Δᐃ.ᐃΔᐃΔⲆⲆⵠ;
		ᐃᐃ[ⵠ.ᐃᐃⲆΔᐃⲆΔ][ⲆΔⲆΔ] = Δᐃ.ⲆΔⲆΔᐃⵠΔ;
		ᐃᐃ[ⵠ.ΔΔΔⲆΔⲆᐃ] = ᐃᐃ[ⵠ.ᐃᐃⲆΔᐃⲆΔ];
		ᐃᐃ[ⵠ.ΔᐃⲆⲆⲆⲆᐃ] = ᐃᐃ[ⵠ.ᐃᐃⲆΔᐃⲆΔ];
		ᐃᐃ[ⵠ.ⵠⲆⵠᐃⲆΔⲆ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⵠᐃⲆΔⲆ][ᐃⲆΔ] = Δᐃ.ⲆⲆⲆⵠΔᐃⲆ;
		ᐃᐃ[ⵠ.ⵠⲆⵠᐃⲆΔⲆ][ΔΔΔᐃ] = Δᐃ.ᐃⵠᐃΔⲆᐃⲆ;
		ᐃᐃ[ⵠ.ⵠⲆⵠᐃⲆΔⲆ][2] = Δᐃ.ⵠΔⵠⲆΔⵠⵠ;
		ᐃᐃ[ⵠ.ⲆⵠΔⵠΔᐃⵠ] = ᐃᐃ[ⵠ.ⵠⲆⵠᐃⲆΔⲆ];
		ᐃᐃ[ⵠ.ᐃⵠᐃⵠⲆⲆᐃ] = ᐃᐃ[ⵠ.ⵠⲆⵠᐃⲆΔⲆ];
		ᐃᐃ[ⵠ.ⵠΔⵠᐃⵠᐃΔ] = ΔᐃᐃⲆ(1, [{
			f: ⵠᐃⲆΔⵠΔΔ,
			x: ⲆⲆᐃ,
			y: 0,
			a: ⲆⲆΔⵠ,
			r: 0,
			c: [ᐃ[414], "#515C57", "#3A4942", "#68736F", ᐃ[178], ᐃ[499], ᐃ[ΔⵠΔΔΔ], "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
		}, {
			f: ΔⵠⲆᐃⵠΔⵠ,
			x: ΔᐃⲆⲆ,
			y: ᐃⲆᐃ,
			a: ᐃⲆⲆ,
			r: ⵠᐃΔ,
			c: ["#e4c027"]
		}], .14, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆⵠᐃᐃᐃΔⵠ] = ᐃᐃ[ⵠ.ⵠΔⵠᐃⵠᐃΔ];
		ᐃᐃ[ⵠ.ⵠⲆΔⵠⵠΔⲆ] = ΔᐃᐃⲆ(ⲆⲆᐃⵠ, [{
			f: ᐃⵠΔⵠⲆⲆⲆ,
			x: 0,
			y: ⵠⵠⵠ,
			a: ΔᐃⵠⲆ,
			r: ⵠΔΔⲆ,
			c: [ᐃ[414], ᐃ[71], ᐃ[491], "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
		}], .18, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆᐃⲆⲆⵠⵠⵠ] = ᐃᐃ[ⵠ.ⵠⲆΔⵠⵠΔⲆ];
		ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠⵠⵠ] = ΔᐃᐃⲆ(1, [{
			f: ΔΔΔⲆⵠΔⲆ,
			x: 0,
			y: 0,
			a: ᐃⵠᐃᐃ,
			r: 0,
			c: [ᐃ[414], ᐃ[310], ᐃ[527], "#261912", "#eee6c5", "#d1c599", ᐃ[310], ᐃ[527], "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", ᐃ[478], "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
		}], .32, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔⵠΔⵠΔᐃⲆ] = ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠⵠⵠ];
		ᐃᐃ[ⵠ.ΔΔΔΔᐃⵠⵠ] = ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠⵠⵠ];
		ᐃᐃ[ⵠ.ⵠⵠⵠⵠⵠⵠⲆ] = ΔᐃᐃⲆ(ⵠⵠⵠⲆ, [{
			f: ΔᐃᐃⲆⵠⲆᐃ,
			x: 0,
			y: ⵠᐃⲆⵠ,
			a: ᐃΔⲆΔ,
			r: 0,
			c: [ᐃ[414], ᐃ[547], ᐃ[247], ᐃ[214], ᐃ[547]]
		}], .17, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠΔⲆⲆⵠⵠᐃ] = ᐃᐃ[ⵠ.ⵠⵠⵠⵠⵠⵠⲆ];
		ᐃᐃ[ⵠ.ⲆΔⲆΔⵠᐃᐃ] = ΔᐃᐃⲆ(ⲆⵠΔΔ, [{
			f: ⲆᐃⲆᐃᐃᐃᐃ,
			x: ⵠΔⵠⲆ,
			y: 0,
			a: ⲆⲆⵠ,
			r: Math.PI / ᐃⵠΔⵠ,
			c: [ᐃ[414], ᐃ[387], ᐃ[444], ᐃ[214], ᐃ[547], ᐃ[547], ᐃ[247], ᐃ[285], ᐃ[507]]
		}], .12, [ᐃ[79], ᐃ[ΔᐃΔⲆᐃ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⲆᐃΔⲆⲆⲆⵠ] = ᐃᐃ[ⵠ.ⲆΔⲆΔⵠᐃᐃ];
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠᐃΔⲆ] = ᐃᐃ[ⵠ.ⲆΔⲆΔⵠᐃᐃ];
		ᐃᐃ[ⵠ.ⲆΔΔⲆᐃⲆⲆ] = ΔᐃᐃⲆ(Δⵠᐃ, [{
			f: ⵠᐃⵠⲆΔⵠΔ,
			x: Ⲇᐃⵠⵠ,
			y: ΔᐃⲆⲆ,
			a: 1,
			r: Math.PI / ⲆᐃΔⲆⵠ,
			c: [ᐃ[414], ᐃ[387], ᐃ[444], "#765d42", ᐃ[285], ᐃ[507]]
		}], .12, [ᐃ[79], ᐃ[100], ᐃ[ᐃⲆᐃ]], .5);
		ᐃᐃ[ⵠ.ᐃΔⵠⲆΔⵠᐃ] = ᐃᐃ[ⵠ.ⲆΔΔⲆᐃⲆⲆ];
		ᐃᐃ[ⵠ.ⲆⲆΔⵠΔⲆΔ] = ΔᐃᐃⲆ(ⲆⲆᐃⵠ, [{
			f: ⵠᐃⵠⵠⵠΔᐃ,
			x: 2,
			y: ⲆⲆᐃ,
			a: 1,
			r: Math.PI / 5,
			c: [ᐃ[414], ᐃ[62], ᐃ[480], ᐃ[285], ᐃ[507], "#7a7575", "#454749", "#8c8787", ᐃ[71], ᐃ[491], "#aaa6a6"]
		}], .12, [ᐃ[79], ᐃ[ᐃⲆⵠⵠΔ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⲆⲆⲆⵠΔΔⲆ] = ᐃᐃ[ⵠ.ⲆⲆΔⵠΔⲆΔ];
		ᐃᐃ[ⵠ.ⵠⲆᐃΔΔⵠΔ] = ΔᐃᐃⲆ(1, [{
			f: ⵠᐃⲆⵠΔⵠⵠ,
			x: 2,
			y: 0,
			a: ⲆⲆⵠ,
			r: Math.PI / ⲆⵠⲆΔᐃ,
			c: [ᐃ[414], ᐃ[136], ᐃ[183], "#a69e39", "#9c8828", "#bab143", ᐃ[179], ᐃ[453], "#d2ca59"]
		}], .12, [ᐃ[79], ᐃ[ΔⵠⵠΔᐃ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⲆΔⵠⵠΔᐃΔ] = ᐃᐃ[ⵠ.ⵠⲆᐃΔΔⵠΔ];
		ᐃᐃ[ⵠ.ᐃΔᐃΔᐃΔΔ] = ΔᐃᐃⲆ(ΔⲆⵠⲆ, [{
			f: ᐃΔΔΔᐃᐃⵠ,
			x: 2,
			y: ⵠⵠΔΔ,
			a: ⵠⵠⵠⲆ,
			r: Math.PI / ΔΔⵠΔⵠ,
			c: [ᐃ[414], ᐃ[121], ᐃ[190], "#4ba8b4", "#198a82", "#6ccad7", ᐃ[325], ᐃ[146], "#7bd9e6"]
		}], .12, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ΔⵠⵠΔⲆΔᐃ] = ᐃᐃ[ⵠ.ᐃΔᐃΔᐃΔΔ];
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃᐃᐃᐃ] = ΔᐃᐃⲆ(ⵠᐃᐃ, [{
			f: ᐃⲆⵠΔᐃᐃⲆ,
			x: ᐃⵠΔⲆ,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [ᐃ[414], ᐃ[121], ᐃ[190], "#9443b1", "#6f1988", "#a752c6", "#9e35be", ᐃ[98], ᐃ[531]]
		}], .12, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ᐃΔᐃΔⵠⲆⵠ] = ᐃᐃ[ⵠ.ᐃⲆⲆᐃᐃᐃᐃ];
		ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠΔᐃ] = ΔᐃᐃⲆ(ᐃⲆⲆ, [{
			f: ΔΔΔⲆⵠᐃΔ,
			x: 2,
			y: ⲆⲆᐃⲆ,
			a: 1,
			r: Math.PI / ⲆΔⲆᐃᐃ,
			c: [ᐃ[414], "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
		}], .38, [ᐃ[79], ᐃ[ⵠΔᐃᐃⲆ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ΔⲆⵠⲆⲆᐃⲆ] = ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠΔᐃ];
		ᐃᐃ[ⵠ.ΔⵠⵠⵠⵠΔⲆ] = ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠΔᐃ];
		ᐃᐃ[ⵠ.ⵠⵠᐃᐃⲆⵠⲆ] = ΔᐃᐃⲆ(ⲆⲆΔⵠ, [{
			f: ⲆⲆΔᐃⲆ,
			x: ⵠΔⵠⲆ,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [ᐃ[414], ᐃ[62], ᐃ[480], ᐃ[71], ᐃ[491]]
		}], .52, [ᐃ[79], ᐃ[100], ᐃ[ⵠᐃⵠ]], .5);
		ᐃᐃ[ⵠ.ᐃᐃΔⵠΔΔⵠ] = ᐃᐃ[ⵠ.ⵠⵠᐃᐃⲆⵠⲆ];
		ᐃᐃ[ⵠ.ⵠᐃᐃⵠΔΔⲆ] = ΔᐃᐃⲆ(1, [{
			f: ⵠᐃᐃⵠᐃᐃΔ,
			x: 0,
			y: ⵠⵠⲆΔ,
			a: 1,
			r: Math.PI / ᐃᐃᐃⲆⲆ,
			c: [ᐃ[414], ᐃ[71], ᐃ[491]]
		}], .3, [ᐃ[79], ᐃ[Δⵠᐃⵠᐃ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⲆΔⵠΔⲆⵠⲆ] = ᐃᐃ[ⵠ.ⵠᐃᐃⵠΔΔⲆ];
		ᐃᐃ[ⵠ.ⲆⵠΔⲆⵠⲆⵠ] = ΔᐃᐃⲆ(1, [{
			f: ΔᐃⲆⵠᐃⲆΔ,
			x: ⵠⲆΔᐃ,
			y: ⵠᐃⲆⵠ,
			a: 1,
			r: Math.PI / 5,
			c: [ᐃ[414], "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
		}], .52, [ᐃ[79], ᐃ[ΔⵠⵠΔᐃ], ᐃ[ⵠᐃⲆⵠ]], .5);
		ᐃᐃ[ⵠ.ⲆⵠⵠⵠᐃΔⲆ] = ᐃᐃ[ⵠ.ⲆⵠΔⲆⵠⲆⵠ];
		ᐃᐃ[ⵠ.ᐃΔᐃⵠⲆⵠᐃ] = ΔᐃᐃⲆ(ⵠⲆⵠⲆ, [{
			f: ⲆⲆΔᐃⲆ,
			x: ᐃᐃΔⵠ,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [ᐃ[414], ᐃ[136], ᐃ[183], ᐃ[179], ᐃ[453]]
		}], .52, [ᐃ[79], ᐃ[ΔⵠⵠΔᐃ], ᐃ[ⵠⵠᐃ]], .5);
		ᐃᐃ[ⵠ.ᐃΔⲆᐃⲆᐃⵠ] = ᐃᐃ[ⵠ.ᐃΔᐃⵠⲆⵠᐃ];
		ᐃᐃ[ⵠ.ᐃⲆᐃΔⲆⲆᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⲆⲆΔᐃⲆ,
			x: 2,
			y: ⵠⵠᐃ,
			a: ⲆⵠⲆ,
			r: Math.PI / Δᐃᐃⵠ,
			c: [ᐃ[414], ᐃ[121], ᐃ[190], ᐃ[325], ᐃ[146]]
		}], .52, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ΔᐃⵠⲆⲆᐃⵠ] = ᐃᐃ[ⵠ.ᐃⲆᐃΔⲆⲆᐃ];
		ᐃᐃ[ⵠ.ⵠⲆⵠⵠⲆⵠⵠ] = ΔᐃᐃⲆ(1, [{
			f: ⲆⲆΔᐃⲆ,
			x: ⵠⲆᐃⵠ,
			y: 0,
			a: 1,
			r: Math.PI / ΔΔⵠΔⵠ,
			c: [ᐃ[414], ᐃ[121], ᐃ[190], ᐃ[531], ᐃ[98]]
		}], .52, [ᐃ[79], ᐃ[ᐃⲆⵠⵠΔ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⵠᐃⵠⲆΔᐃⲆ] = ᐃᐃ[ⵠ.ⵠⲆⵠⵠⲆⵠⵠ];
		ᐃᐃ[ⵠ.ᐃⵠⵠⲆΔⵠⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⵠⲆΔⵠⲆ][0] = Δᐃ.ΔⵠΔⲆᐃⵠⵠ;
		ᐃᐃ[ⵠ.ᐃⵠⵠⲆΔⵠⲆ][ⲆⵠΔΔ] = Δᐃ.ᐃⵠᐃⵠⵠⵠᐃ;
		ᐃᐃ[ⵠ.ᐃⵠⵠⲆΔⵠⲆ][2] = Δᐃ.ΔΔⵠⲆⲆᐃⲆ;
		ᐃᐃ[ⵠ.ΔΔᐃᐃⲆᐃᐃ] = ᐃᐃ[ⵠ.ᐃⵠⵠⲆΔⵠⲆ];
		ᐃᐃ[ⵠ.ΔΔⲆᐃⵠΔᐃ] = ᐃᐃ[ⵠ.ᐃⵠⵠⲆΔⵠⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔΔⲆⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔᐃΔΔⲆⲆⵠ][ⵠᐃΔ] = Δᐃ.ᐃⲆⵠⵠΔᐃⵠ;
		ᐃᐃ[ⵠ.ΔᐃΔΔⲆⲆⵠ][1] = Δᐃ.ⲆᐃΔΔⵠⲆᐃ;
		ᐃᐃ[ⵠ.ΔᐃΔΔⲆⲆⵠ][ⲆΔΔⲆ] = Δᐃ.ΔⵠᐃⲆΔⲆΔ;
		ᐃᐃ[ⵠ.ᐃᐃΔⵠⵠⲆⲆ] = ᐃᐃ[ⵠ.ΔᐃΔΔⲆⲆⵠ];
		ᐃᐃ[ⵠ.ⲆⵠᐃⵠΔΔⲆ] = ᐃᐃ[ⵠ.ΔᐃΔΔⲆⲆⵠ];
		ᐃᐃ[ⵠ.ⵠᐃⵠⲆⵠⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⵠⲆⵠⲆᐃ][0] = Δᐃ.ΔᐃᐃᐃⵠⲆⲆ;
		ᐃᐃ[ⵠ.ⵠᐃⵠⲆⵠⲆᐃ][1] = Δᐃ.ⲆΔⵠᐃⲆΔΔ;
		ᐃᐃ[ⵠ.ⵠᐃⵠⲆⵠⲆᐃ][ⲆᐃᐃⲆ] = Δᐃ.ⲆⲆⵠᐃᐃΔⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⵠΔⲆⲆⵠ] = ᐃᐃ[ⵠ.ⵠᐃⵠⲆⵠⲆᐃ];
		ᐃᐃ[ⵠ.ⲆΔⵠΔᐃⵠΔ] = ᐃᐃ[ⵠ.ⵠᐃⵠⲆⵠⲆᐃ];
		ᐃᐃ[ⵠ.Ⲇⵠᐃᐃᐃᐃⵠ] = [];
		ᐃᐃ[ⵠ.Ⲇⵠᐃᐃᐃᐃⵠ][ⲆⲆᐃⲆ] = Δᐃ.ⲆΔᐃΔᐃΔⵠ;
		ᐃᐃ[ⵠ.Ⲇⵠᐃᐃᐃᐃⵠ][1] = Δᐃ.ᐃΔᐃⵠⵠΔⵠ;
		ᐃᐃ[ⵠ.Ⲇⵠᐃᐃᐃᐃⵠ][ⵠΔΔΔ] = Δᐃ.ᐃⵠⵠᐃⵠΔΔ;
		ᐃᐃ[ⵠ.ΔⲆΔⵠⲆⲆⲆ] = ᐃᐃ[ⵠ.Ⲇⵠᐃᐃᐃᐃⵠ];
		ᐃᐃ[ⵠ.ⲆⵠⲆΔᐃΔᐃ] = ᐃᐃ[ⵠ.Ⲇⵠᐃᐃᐃᐃⵠ];
		ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠⲆ] = [];
		ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠⲆ][ΔᐃⲆⲆ] = Δᐃ.ⲆΔⵠᐃⲆΔⲆ;
		ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠⲆ][1] = Δᐃ.ⲆᐃⵠⲆⵠΔⲆ;
		ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠⲆ][2] = Δᐃ.ⵠΔΔⲆⵠⲆⲆ;
		ᐃᐃ[ⵠ.ᐃΔⲆᐃⵠΔⵠ] = ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠⲆ];
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃᐃⲆᐃ] = ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠⲆ];
		ᐃᐃ[ⵠ.ⵠⲆⵠⲆⲆⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⵠⲆⲆⲆᐃ][ⲆⲆᐃⲆ] = Δᐃ.ΔⲆⵠΔⲆⵠᐃ;
		ᐃᐃ[ⵠ.ⵠⲆⵠⲆⲆⲆᐃ][ᐃΔⲆΔ] = Δᐃ.ΔᐃΔⵠⲆᐃⲆ;
		ᐃᐃ[ⵠ.ⵠⲆⵠⲆⲆⲆᐃ][ⲆΔⲆΔ] = Δᐃ.ⲆᐃⲆΔΔⲆⲆ;
		ᐃᐃ[ⵠ.ΔΔⵠⵠⲆᐃⵠ] = ᐃᐃ[ⵠ.ⵠⲆⵠⲆⲆⲆᐃ];
		ᐃᐃ[ⵠ.ⲆⲆΔᐃⲆⲆᐃ] = ᐃᐃ[ⵠ.ⵠⲆⵠⲆⲆⲆᐃ];
		ᐃᐃ[ⵠ.ᐃⵠⵠⲆⵠⵠᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⵠⲆⵠⵠᐃ][0] = Δᐃ.ⵠᐃᐃΔΔΔᐃ;
		ᐃᐃ[ⵠ.ᐃⵠⵠⲆⵠⵠᐃ][1] = Δᐃ.ⵠΔⲆᐃⵠⲆΔ;
		ᐃᐃ[ⵠ.ᐃⵠⵠⲆⵠⵠᐃ][2] = Δᐃ.ᐃⲆⵠⵠΔΔᐃ;
		ᐃᐃ[ⵠ.ᐃΔᐃΔⵠΔᐃ] = ᐃᐃ[ⵠ.ᐃⵠⵠⲆⵠⵠᐃ];
		ᐃᐃ[ⵠ.ᐃΔΔⵠⵠⵠⵠ] = ᐃᐃ[ⵠ.ᐃⵠⵠⲆⵠⵠᐃ];
		ᐃᐃ[ⵠ.ᐃΔΔⲆΔⲆΔ] = ΔᐃᐃⲆ(ⵠⲆⵠⲆ, [{
			f: ⲆᐃⵠⲆΔΔᐃ,
			x: -2,
			y: -ΔΔᐃⲆⵠ,
			a: ⲆⲆⵠ,
			r: ⵠⵠⲆΔ,
			c: [ᐃ[492], ᐃ[515], ᐃ[47], "#3a3a3a"]
		}], .8, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⵠᐃⲆᐃΔⲆⵠ] = ᐃᐃ[ⵠ.ᐃΔΔⲆΔⲆΔ];
		ᐃᐃ[ⵠ.ΔΔⵠΔⲆΔⵠ] = ΔᐃᐃⲆ(1, [{
			f: ΔⵠⵠⵠⲆⲆⵠ,
			x: -ΔⵠⲆⲆ,
			y: -ⲆΔΔⲆ,
			a: ⵠᐃᐃ,
			r: -Math.PI / ⲆᐃΔⲆⵠ,
			c: [ᐃ[492], ᐃ[47], ᐃ[515]]
		}], .08, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⲆΔⵠᐃΔⵠⵠ] = ᐃᐃ[ⵠ.ΔΔⵠΔⲆΔⵠ];
		ᐃᐃ[ⵠ.ⲆΔⵠⲆᐃᐃᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⵠΔᐃΔᐃᐃⵠ,
			x: -ⵠⵠΔⵠ,
			y: -2,
			a: 1,
			r: 0,
			c: [ᐃ[492], "#178a99", "#0a6372", "#03282e"]
		}], .3, [ᐃ[317], ᐃ[317], ᐃ[317]], .7);
		ᐃᐃ[ⵠ.ⵠⵠᐃⵠⲆᐃⲆ] = ΔᐃᐃⲆ(ᐃΔΔⲆ, [{
			f: ⵠΔᐃΔᐃᐃⵠ,
			x: -2,
			y: -ⵠⵠΔⵠ,
			a: 1,
			r: ⵠᐃⵠ,
			c: [ᐃ[223], "#991616", "#750a0a", ᐃ[223]]
		}], .3, [ᐃ[317], ᐃ[317], ᐃ[317]], .7);
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃⲆⵠⲆ] = ΔᐃᐃⲆ(ᐃΔΔⲆ, [{
			f: ⵠⵠΔᐃⵠⲆᐃ,
			x: ⵠᐃΔ,
			y: 0,
			a: 1,
			r: ⲆⲆᐃⲆ,
			c: [ᐃ[343], ᐃ[579]]
		}, {
			f: ᐃⲆⵠⲆⲆⵠᐃ,
			x: 0,
			y: ⵠⵠΔΔ,
			a: 1,
			r: 0,
			c: [ᐃ[343], ᐃ[579], "#1c2528", ᐃ[580], ᐃ[550], "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
		}, {
			f: ᐃⲆⲆᐃᐃΔᐃ,
			x: ⵠⵠⲆΔ,
			y: ⲆⲆᐃⲆ,
			a: 1,
			r: ⵠᐃΔ,
			c: [ᐃ[580], ᐃ[550]]
		}, {
			f: ΔⵠΔⵠΔᐃΔ,
			x: ⵠⵠⵠ,
			y: ⲆⲆΔ,
			a: 1,
			r: ⵠⵠⵠ,
			c: [ᐃ[580], ᐃ[550], "#418ba5", "#59b8ce"]
		}], .3, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆΔⲆⲆⵠⲆᐃ] = ᐃᐃ[ⵠ.ⲆⲆⲆᐃⲆⵠⲆ];
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆⲆΔⵠ] = ΔᐃᐃⲆ(1, [{
			f: ⲆⲆⵠⲆΔⲆⵠ,
			x: 45,
			y: 70,
			a: ᐃⵠⵠⵠ,
			r: 0,
			c: [ᐃ[414], ᐃ[113], ᐃ[63], ᐃ[518]]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ᐃᐃⲆΔᐃΔⵠ] = ᐃᐃ[ⵠ.ⲆⲆⲆⲆⲆΔⵠ];
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃΔⵠⵠ] = ΔᐃᐃⲆ(ⲆⵠΔΔ, [{
			f: ᐃᐃⲆⵠⵠⲆⵠ,
			x: 0,
			y: ᐃⲆΔᐃ,
			a: ⵠⲆⵠⲆ,
			r: 0,
			c: [ᐃ[414], "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
		}], .52, [ᐃ[79], ᐃ[100], ᐃ[ⵠⵠⲆΔ]], .5);
		ᐃᐃ[ⵠ.ⵠⵠᐃⲆⵠⵠⲆ] = ᐃᐃ[ⵠ.ⵠᐃⵠᐃΔⵠⵠ];
		ᐃᐃ[ⵠ.ⵠᐃⵠⲆⲆᐃⲆ] = ΔᐃᐃⲆ(1, [{
			f: ⲆΔΔΔⲆⲆⵠ,
			x: 0,
			y: ⲆᐃΔⵠ,
			a: 1,
			r: 0,
			c: [ᐃ[244], ᐃ[345], ᐃ[544], "#1b1a25"]
		}], .12, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ΔΔⵠᐃⲆⵠᐃ] = ᐃᐃ[ⵠ.ⵠᐃⵠⲆⲆᐃⲆ];
		ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃᐃⵠ] = ΔᐃᐃⲆ(ΔᐃⵠⲆ, [{
			f: ᐃΔⲆⵠΔᐃᐃ,
			x: ⵠΔⵠᐃ,
			y: ⵠΔΔⲆ,
			a: ᐃⵠⵠⵠ,
			r: ΔᐃⲆⲆ,
			c: [ᐃ[244], ᐃ[345], ᐃ[544]]
		}], .25, [ᐃ[79], ᐃ[100], ᐃ[ⵠΔⵠᐃ]], .5);
		ᐃᐃ[ⵠ.ΔⲆⵠᐃΔᐃⲆ] = ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃᐃⵠ];
		ᐃᐃ[ⵠ.ⵠⵠᐃΔᐃⲆΔ] = ΔᐃᐃⲆ(ΔΔⵠ, [{
			f: ᐃⵠⲆⲆᐃᐃΔ,
			x: Δⵠⵠ,
			y: 3,
			a: 1,
			r: 0,
			c: [ᐃ[172], "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
		}], .39, [ᐃ[79], ᐃ[ΔⲆⲆᐃᐃᐃΔ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔᐃᐃ] = ᐃᐃ[ⵠ.ⵠⵠᐃΔᐃⲆΔ];
		ᐃᐃ[ⵠ.ⲆⵠΔⲆΔⲆⵠ] = ΔᐃᐃⲆ(1, [{
			f: ᐃⵠⲆⲆᐃᐃΔ,
			x: 0,
			y: 3,
			a: ᐃⵠⵠⵠ,
			r: 0,
			c: [ᐃ[172], "#8c7654", ᐃ[138], "#a88e6c", ᐃ[138], "#705845"]
		}], .39, [ᐃ[79], ᐃ[Δⵠᐃⵠᐃ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠⵠⵠⵠ] = ᐃᐃ[ⵠ.ⲆⵠΔⲆΔⲆⵠ];
		ᐃᐃ[ⵠ.ᐃⲆⲆⲆᐃΔⲆ] = ΔᐃᐃⲆ(ⵠⲆⵠⲆ, [{
			f: ⵠⵠΔⵠΔⲆⲆ,
			x: ⲆᐃΔⵠ,
			y: 10,
			a: 1,
			r: 0,
			c: [ᐃ[414], ᐃ[118], ᐃ[196], ᐃ[315], "#49B669", "#19994C", "#71C187"]
		}], .15, [ᐃ[79], ᐃ[ᐃΔⲆᐃⵠ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⵠΔⲆᐃᐃΔᐃ] = ᐃᐃ[ⵠ.ᐃⲆⲆⲆᐃΔⲆ];
		ᐃᐃ[ⵠ.ΔᐃᐃⵠᐃΔΔ] = ΔᐃᐃⲆ(ᐃΔⵠΔ, [{
			f: ⵠⵠΔⵠΔⲆⲆ,
			x: 0,
			y: 10,
			a: ⵠⲆⵠⲆ,
			r: ⵠⵠⲆΔ,
			c: [ᐃ[414], ᐃ[118], ᐃ[196], ᐃ[315], "#C45727", "#994617", "#DB9358"]
		}], .15, [ᐃ[79], ᐃ[100], ᐃ[ⵠΔΔⲆ]], .5);
		ᐃᐃ[ⵠ.ᐃⲆΔᐃⵠᐃⵠ] = ᐃᐃ[ⵠ.ΔᐃᐃⵠᐃΔΔ];
		ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃⲆᐃ] = ΔᐃᐃⲆ(ᐃⲆⲆ, [{
			f: ⵠⵠΔⵠΔⲆⲆ,
			x: 0,
			y: ⵠᐃⲆⲆΔ,
			a: 1,
			r: 0,
			c: [ᐃ[414], ᐃ[118], ᐃ[196], ᐃ[315], "#2792C1", "#196599", "#59C0D8"]
		}], .15, [ᐃ[79], ᐃ[ᐃΔⲆᐃⵠ], ᐃ[ⵠⵠᐃ]], .5);
		ᐃᐃ[ⵠ.ⲆΔΔᐃᐃᐃᐃ] = ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃⲆᐃ];
		ᐃᐃ[ⵠ.ⲆⲆᐃⲆΔΔᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⵠⵠⲆΔᐃⲆⵠ,
			x: -ⲆⲆᐃⵠ,
			y: 0,
			a: 1,
			r: ⲆⲆᐃⲆ,
			c: [ᐃ[352], "#b03431", "#94312d", "#bd3c33", "#de5445"]
		}], .15, [ᐃ[79], ᐃ[100], ᐃ[ⲆⲆΔ]], .5);
		ᐃᐃ[ⵠ.ⲆΔΔⲆⵠΔᐃ] = ᐃᐃ[ⵠ.ⲆⲆᐃⲆΔΔᐃ];
		ᐃᐃ[ⵠ.ΔΔᐃᐃⵠⵠᐃ] = ᐃᐃ[ⵠ.ⲆⲆᐃⲆΔΔᐃ];
		ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃⵠΔ] = ΔᐃᐃⲆ(1, [{
			f: ⲆᐃᐃⲆΔⵠⲆ,
			x: ⵠΔΔⲆ,
			y: ᐃⲆΔ,
			a: 1,
			r: 0,
			c: [ᐃ[414], "#cae9eb", "#75bcae", ᐃ[478], "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
		}], .2, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⵠᐃᐃᐃⵠⵠᐃ] = ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃⵠΔ];
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃⵠⲆ] = ΔᐃᐃⲆ(ⲆⲆᐃⵠ, [{
			f: ⵠᐃⵠᐃⲆᐃⲆ,
			x: ⲆⲆᐃ,
			y: Δⵠⵠ,
			a: ⲆⲆⵠ,
			r: Math.PI / 5,
			c: [ᐃ[414], "#284c4a", "#193533", "#c7efef", "#7fccca"]
		}], .75, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ΔⲆⵠⲆᐃⲆⲆ] = ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃⵠⲆ];
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠⵠⲆᐃ] = ΔᐃᐃⲆ(ⲆⵠΔΔ, [{
			f: ΔΔⵠᐃᐃᐃΔ,
			x: ⲆⲆΔ,
			y: ⲆⲆᐃⲆ,
			a: 1,
			r: ⲆⲆΔ,
			c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
		}], .55, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ᐃⵠᐃᐃᐃΔᐃ] = ΔᐃᐃⲆ(ⵠⲆⵠⲆ, [{
			f: ᐃⲆⵠⲆⲆΔΔ,
			x: 0,
			y: ⵠⵠⲆΔ,
			a: 1,
			r: 0,
			c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
		}], .55, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⲆⵠᐃⵠᐃⵠΔ] = ΔᐃᐃⲆ(1, [{
			f: ΔΔⵠᐃᐃᐃΔ,
			x: ⲆⲆΔ,
			y: 0,
			a: ᐃΔⵠΔ,
			r: ᐃⲆᐃ,
			c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
		}], .55, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ΔⲆΔΔᐃΔⵠ] = ΔᐃᐃⲆ(1, [{
			f: ᐃⲆⵠⲆⲆΔΔ,
			x: ⵠᐃⲆⵠ,
			y: ⲆⲆΔ,
			a: 1,
			r: ⵠᐃⵠ,
			c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
		}], .55, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⵠᐃᐃᐃΔⵠⲆ] = ΔᐃᐃⲆ(ΔᐃⵠⲆ, [{
			f: ΔΔᐃΔΔᐃᐃ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: ["#59ba72", "#94d966", "#5aa628", ᐃ[414], "#38874d"]
		}], .35, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⲆⵠⵠⵠΔⲆᐃ] = ΔᐃᐃⲆ(ᐃⵠᐃᐃ, [{
			f: ΔΔᐃΔΔᐃᐃ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: ["#C45727", "#de7d46", "#DB9358", ᐃ[414], "#994617"]
		}], .35, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⲆⵠⵠⲆᐃᐃⵠ] = ΔᐃᐃⲆ(1, [{
			f: ΔΔᐃΔΔᐃᐃ,
			x: ⲆⲆΔ,
			y: 0,
			a: ⵠⵠⵠⲆ,
			r: ⲆᐃΔⵠ,
			c: ["#3a9dbd", "#59C0D8", "#48abcb", ᐃ[414], "#196599"]
		}], .35, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⲆΔⲆᐃⲆᐃⲆ] = ΔᐃᐃⲆ(ΔΔⵠ, [{
			f: ΔⵠⵠΔⵠ,
			x: ⵠᐃⲆⵠ,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [ᐃ[414], "#6d5041", "#4f3d35", ᐃ[71], ᐃ[491], "#757575"]
		}], .45, [ᐃ[79], ᐃ[ᐃⲆⲆⵠⵠⵠⲆ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ᐃᐃⵠⵠⵠΔᐃ] = ᐃᐃ[ⵠ.ⲆΔⲆᐃⲆᐃⲆ];
		ᐃᐃ[ⵠ.ⵠⵠⵠⲆΔⵠⲆ] = ΔᐃᐃⲆ(1, [{
			f: ΔⵠⵠΔⵠ,
			x: 0,
			y: ⵠⵠᐃ,
			a: 1,
			r: Math.PI / ⵠⲆⲆⵠ,
			c: [ᐃ[414], ᐃ[136], ᐃ[183], ᐃ[179], ᐃ[453], "#b4ac45"]
		}], .45, [ᐃ[79], ᐃ[Δⵠᐃⵠᐃ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ᐃⵠⲆⲆᐃΔⵠ] = ᐃᐃ[ⵠ.ⵠⵠⵠⲆΔⵠⲆ];
		ᐃᐃ[ⵠ.ⲆⵠⵠⵠⲆᐃΔ] = ΔᐃᐃⲆ(1, [{
			f: ΔⵠⵠΔⵠ,
			x: 0,
			y: Ⲇⵠᐃ,
			a: ΔΔΔᐃ,
			r: Math.PI / 5,
			c: [ᐃ[414], ᐃ[121], ᐃ[190], ᐃ[325], ᐃ[146], "#42aab8"]
		}], .45, [ᐃ[79], ᐃ[100], ᐃ[ΔᐃⲆⲆ]], .5);
		ᐃᐃ[ⵠ.ΔᐃⵠⵠⵠΔᐃ] = ᐃᐃ[ⵠ.ⲆⵠⵠⵠⲆᐃΔ];
		ᐃᐃ[ⵠ.ᐃΔᐃⲆᐃΔⲆ] = ΔᐃᐃⲆ(1, [{
			f: ΔⵠⵠΔⵠ,
			x: 0,
			y: 0,
			a: ⵠⵠⵠⲆ,
			r: Math.PI / ⲆΔⲆᐃᐃ,
			c: [ᐃ[414], ᐃ[121], ᐃ[190], ᐃ[531], ᐃ[98], "#a853c7"]
		}], .45, [ᐃ[79], ᐃ[100], ᐃ[ⲆᐃΔⵠ]], .5);
		ᐃᐃ[ⵠ.ⲆΔⵠⲆΔⵠᐃ] = ᐃᐃ[ⵠ.ᐃΔᐃⲆᐃΔⲆ];
		ᐃᐃ[ⵠ.ᐃᐃⵠⵠΔΔⲆ] = ΔᐃᐃⲆ(ᐃⵠᐃᐃ, [{
			f: ⲆᐃΔΔᐃᐃΔ,
			x: Δⵠⵠ,
			y: ⵠⵠⵠ,
			a: ᐃⵠⵠⵠ,
			r: ΔᐃⲆⲆ,
			c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
		}], .35, [ᐃ[79], ᐃ[100], ᐃ[ⵠⵠⲆΔ]], .5);
		ᐃᐃ[ⵠ.ΔᐃΔΔᐃⲆᐃ] = ᐃᐃ[ⵠ.ᐃᐃⵠⵠΔΔⲆ];
		ᐃᐃ[ⵠ.ᐃᐃᐃⲆⵠΔⵠ] = ΔᐃᐃⲆ(1, [{
			f: ᐃᐃⵠΔᐃⲆⵠ,
			x: ᐃⲆᐃ,
			y: ⵠᐃΔ,
			a: ⵠⲆⵠⲆ,
			r: ⵠΔΔⲆ,
			c: [ᐃ[84], ᐃ[342], "#493425", ᐃ[261]]
		}], .35, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ΔΔⲆΔΔⲆⲆ] = ᐃᐃ[ⵠ.ᐃᐃᐃⲆⵠΔⵠ];
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔⲆⲆ] = ΔᐃᐃⲆ(ᐃΔⵠΔ, [{
			f: ΔⲆⵠΔᐃⲆᐃ,
			x: ᐃⲆΔᐃ,
			y: -2,
			a: ⵠⲆⵠⲆ,
			r: ⵠⵠⵠ,
			c: [ᐃ[84], "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", ᐃ[234], "#747474", "#969696", ᐃ[256]]
		}], .4, [ᐃ[79], ᐃ[Δⵠᐃⵠᐃ], ᐃ[ⲆⲆᐃ]], .5);
		ᐃᐃ[ⵠ.ⲆΔⲆⲆⲆᐃΔ] = ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔⲆⲆ];
		ᐃᐃ[ⵠ.ⵠⲆΔᐃⲆΔΔ] = ΔᐃᐃⲆ(ⲆⵠΔΔ, [{
			f: ⵠΔⵠⵠᐃΔⵠ,
			x: 0,
			y: 0,
			a: ᐃΔⲆΔ,
			r: 0,
			c: ["#dbce71", ᐃ[453], ᐃ[179]]
		}], .35, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ΔⲆᐃⵠΔᐃΔ] = ᐃᐃ[ⵠ.ⵠⲆΔᐃⲆΔΔ];
		ᐃᐃ[ⵠ.ᐃⵠⵠᐃⲆⵠⲆ] = ΔᐃᐃⲆ(ᐃⵠᐃᐃ, [{
			f: ᐃⲆᐃⲆⵠⵠⵠ,
			x: 0,
			y: 0,
			a: 1,
			r: ᐃⲆΔ,
			c: ["#717171", "#485252", ᐃ[234], "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
		}], .45, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⵠⵠΔⲆᐃⵠᐃ] = ᐃᐃ[ⵠ.ᐃⵠⵠᐃⲆⵠⲆ];
		ᐃᐃ[ⵠ.ⵠⲆΔᐃⲆⲆΔ] = ΔᐃᐃⲆ(ᐃⵠⵠⵠ, [{
			f: ⲆΔᐃⲆⵠᐃⲆᐃΔ,
			x: ᐃⲆΔᐃ,
			y: ⲆᐃΔⵠ,
			a: ᐃⲆⲆ,
			r: ⲆⲆᐃ,
			c: ["#511f00", "#2f1300", ᐃ[478], "#d4d4d4", "#5b2400", "#984e21"]
		}], .15, [ᐃ[79], ᐃ[ΔᐃⵠΔⲆ], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ᐃⵠΔⲆΔⲆᐃ] = ᐃᐃ[ⵠ.ⵠⲆΔᐃⲆⲆΔ];
		ᐃᐃ[ⵠ.ΔᐃⲆⲆᐃΔᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⵠΔⲆⵠⲆⵠΔΔΔ,
			x: 0,
			y: ⲆⲆᐃⲆ,
			a: Δⵠᐃ,
			r: 0,
			c: ["#221e1b", ᐃ[478], "#f6f0e7"]
		}], .3, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ᐃΔΔᐃⲆΔᐃ] = ᐃᐃ[ⵠ.ΔᐃⲆⲆᐃΔᐃ];
		ᐃᐃ[ⵠ.ⵠΔⵠᐃⲆⲆᐃ] = ΔᐃᐃⲆ(1, [{
			f: ΔⲆᐃᐃΔᐃΔ,
			x: -ᐃᐃⲆⵠᐃ,
			y: -5,
			a: ᐃⵠᐃᐃ,
			r: Ⲇⵠᐃ,
			c: [ᐃ[42], ᐃ[108], ᐃ[224]]
		}], .31, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ΔⲆᐃᐃᐃΔᐃ] = ΔᐃᐃⲆ(1, [{
			f: ᐃⵠΔᐃⵠΔⲆ,
			x: 0,
			y: 0,
			a: 1,
			r: ⵠᐃΔ,
			c: ["#D7C393", "#a48c6c"]
		}], .22, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ᐃⵠᐃΔΔⵠΔ] = ΔᐃᐃⲆ(1, [{
			f: ⲆⵠᐃⵠⲆⵠⵠⵠⵠ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: ["#93CBCE", "#E9F6F6"]
		}], .3, [ᐃ[79], ᐃ[100], ᐃ[0]], .5);
		ᐃᐃ[ⵠ.ⵠᐃⲆᐃⵠⵠΔ] = ΔᐃᐃⲆ(1, [{
			f: ᐃⵠΔᐃⵠΔⲆ,
			x: ⵠⵠᐃ,
			y: 0,
			a: 1,
			r: 0,
			c: ["#866432", "#6b4f25"]
		}], .22, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ᐃΔΔΔᐃΔⵠ] = ΔᐃᐃⲆ(1, [{
			f: ΔΔⲆⵠᐃⵠΔⲆᐃ,
			x: 3,
			y: ᐃᐃⲆⵠ,
			a: 1,
			r: ᐃⲆΔᐃ,
			c: [ᐃ[298], ᐃ[34], ᐃ[339], "#2f2211", "#785931", ᐃ[ⲆΔⲆᐃ]]
		}], .22, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃᐃᐃ] = ΔᐃᐃⲆ(1, [{
			f: ᐃΔⲆΔᐃᐃᐃᐃⲆ,
			x: 3,
			y: ⵠⲆᐃⵠ,
			a: 1,
			r: ᐃⲆΔᐃ,
			c: [ᐃ[298], ᐃ[34], ᐃ[339], "#2f2211", "#785931", ᐃ[ⵠᐃⵠⵠ]]
		}], .22, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ᐃᐃⵠⵠΔⲆᐃ] = ᐃᐃ[ⵠ.ᐃΔΔΔᐃΔⵠ];
		ᐃᐃ[ⵠ.ΔΔΔᐃⵠⵠⲆ] = ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃᐃᐃ];
		ᐃᐃ[ⵠ.ⲆᐃᐃΔᐃᐃᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⵠΔΔᐃΔΔΔ,
			x: 0,
			y: ⵠⵠⵠ,
			a: 1,
			r: Ⲇⵠⵠᐃ,
			c: [ᐃ[298], "#717273", "#606162", "#a09f9f", "#878787", ᐃ[ⲆᐃᐃᐃΔᐃΔ]]
		}], .1, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔᐃΔᐃᐃᐃᐃ] = ᐃᐃ[ⵠ.ⲆᐃᐃΔᐃᐃᐃ];
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆΔΔⲆ] = ΔᐃᐃⲆ(ⲆⵠΔΔ, [{
			f: ⲆΔⵠΔⵠⵠᐃ,
			x: Ⲇⵠᐃ,
			y: ⵠⵠᐃ,
			a: 1,
			r: Math.PI / ⲆⵠⲆᐃ,
			c: [ᐃ[6], ᐃ[49], ᐃ[55], ᐃ[28], ᐃ[300], ᐃ[178], ᐃ[494]]
		}], .18, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆⵠⵠΔⵠᐃΔ] = ΔᐃᐃⲆ(Δⵠᐃ, [{
			f: ᐃⵠᐃⲆⲆⵠⵠⵠᐃ,
			x: ⵠΔⵠᐃ,
			y: ⲆⲆᐃ,
			a: 1,
			r: Math.PI / 5,
			c: [ᐃ[6], ᐃ[49], ᐃ[55], ᐃ[28], ᐃ[300], ᐃ[178], ᐃ[494]]
		}], .18, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⲆΔⵠⲆΔⲆΔ] = ᐃᐃ[ⵠ.ⵠᐃⲆⲆΔΔⲆ];
		ᐃᐃ[ⵠ.ⵠᐃᐃᐃΔᐃⵠ] = ᐃᐃ[ⵠ.ⲆⵠⵠΔⵠᐃΔ];
		ᐃᐃ[ⵠ.ΔⲆᐃΔⲆⲆᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⵠⵠⵠⲆⲆΔᐃⵠΔ,
			x: ⲆⲆᐃ,
			y: ⵠⵠⵠ,
			a: ⲆⵠΔΔ,
			r: 0,
			c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
		}], .3, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔⵠᐃᐃΔⵠⲆ] = ᐃᐃ[ⵠ.ΔⲆᐃΔⲆⲆᐃ];
		ᐃᐃ[ⵠ.ⲆᐃΔᐃᐃⲆΔ] = ΔᐃᐃⲆ(ⵠᐃᐃ, [{
			f: ⵠᐃⵠᐃΔⲆᐃⵠⲆ,
			x: ⵠⵠᐃ,
			y: Ⲇⵠᐃ,
			a: ᐃΔⵠΔ,
			r: 0,
			c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
		}], .3, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆΔᐃⵠΔᐃⵠ] = ΔᐃᐃⲆ(ⲆⲆΔⵠ, [{
			f: ΔᐃⲆⵠⲆⲆⲆΔΔ,
			x: 0,
			y: ⵠⵠΔΔ,
			a: ᐃΔⲆΔ,
			r: 0,
			c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
		}], .6, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆΔΔΔᐃⵠⲆ] = ΔᐃᐃⲆ(ⲆⵠⲆ, [{
			f: ⵠΔⲆⵠᐃⵠᐃ,
			x: 0,
			y: -ΔΔⵠⲆ,
			a: 1,
			r: 0,
			c: [ᐃ[42], "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
		}], .17, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ᐃᐃⲆⲆⲆΔᐃ] = ᐃᐃ[ⵠ.ⲆΔΔΔᐃⵠⲆ];
		ᐃᐃ[ⵠ.ⵠⵠΔᐃᐃⵠⵠ] = ΔᐃᐃⲆ(ⲆⲆᐃⵠ, [{
			f: ⵠⲆⵠᐃΔⵠⵠⵠⵠ,
			x: -ⵠᐃⵠΔ,
			y: -ⲆΔⲆᐃᐃ,
			a: 1,
			r: ⲆᐃΔⵠ,
			c: [ᐃ[42], "#63767c", "#424f51", "#6c8288", "#536468", "#202020", ᐃ[478], "#806f60", "#514942", "#756557"]
		}], .23, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆΔΔⲆᐃΔⵠ] = ΔᐃᐃⲆ(ΔᐃⵠⲆ, [{
			f: ᐃᐃΔⵠⵠΔⵠⲆᐃ,
			x: ⵠΔΔⲆ,
			y: 0,
			a: 1,
			r: 0,
			c: [ᐃ[42], "#42261A", "#281818"]
		}], .23, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆᐃᐃⵠᐃΔΔ] = ᐃᐃ[ⵠ.ⲆΔΔⲆᐃΔⵠ];
		ᐃᐃ[ⵠ.ⲆΔΔⲆᐃᐃᐃ] = ΔᐃᐃⲆ(1, [{
			f: ⵠⵠⵠⲆⲆΔⲆ,
			x: -ᐃΔᐃⲆ,
			y: 0,
			a: ᐃΔⲆΔ,
			r: 0,
			c: [ᐃ[298], "#65A8B7", ᐃ[41], "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", ᐃ[41]]
		}], .2, [ᐃ[79], ᐃ[ᐃᐃΔⵠⵠ], ᐃ[ⵠᐃⲆⵠ]], .5);
		ᐃᐃ[ⵠ.ⲆᐃⵠΔΔⵠΔ] = ᐃᐃ[ⵠ.ⲆΔΔⲆᐃᐃᐃ];
		ᐃᐃ[ⵠ.ΔⲆⵠᐃⵠᐃⵠ] = ΔᐃᐃⲆ(1, [{
			f: ᐃᐃΔΔⵠᐃⲆᐃΔ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: [ᐃ[298], "#961B1B", "#702727", "#C43B3B"]
		}], .15, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ⵠᐃΔⵠⲆⵠⵠ] = ΔᐃᐃⲆ(1, [{
			f: ⲆⲆⵠⵠᐃΔⲆ,
			x: 0,
			y: ⵠⵠᐃ,
			a: 1,
			r: Ⲇⵠᐃ,
			c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", ᐃ[298]]
		}], .3, [ᐃ[79], ᐃ[ⵠⵠΔΔᐃ], ᐃ[ⵠΔΔⲆ]], .5);
		ᐃᐃ[ⵠ.ᐃΔᐃⲆᐃⵠᐃ] = ᐃᐃ[ⵠ.ⵠᐃΔⵠⲆⵠⵠ];
		ᐃᐃ[ⵠ.ⲆΔⲆΔᐃᐃⵠ] = ΔᐃᐃⲆ(ᐃⵠⵠⵠ, [{
			f: ⲆΔⵠᐃΔΔΔ,
			x: 0,
			y: ⲆⲆᐃ,
			a: ΔⲆⵠⲆ,
			r: ᐃⲆΔᐃ,
			c: [ᐃ[298], "#352E1E", ᐃ[339], ᐃ[425]]
		}], .3, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃⵠᐃⲆ] = ᐃᐃ[ⵠ.ⲆΔⲆΔᐃᐃⵠ];
		ᐃᐃ[ⵠ.ⵠⲆⲆΔᐃⲆΔ] = ΔᐃᐃⲆ(ⵠⵠⵠⲆ, [{
			f: ⲆⲆⵠⲆⵠⲆⵠΔΔ,
			x: -ᐃⵠΔⵠ,
			y: -ⲆⲆⲆᐃⵠ,
			a: ⲆⲆⲆᐃ,
			r: 0,
			c: ["#e2d63b", "#ee71a9", "#42b672"]
		}], 1, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⵠᐃⵠⲆᐃⵠⵠ] = ᐃᐃ[ⵠ.ⵠⲆⲆΔᐃⲆΔ];
		ᐃᐃ[ⵠ.ⵠⲆΔΔⵠⵠⵠ] = ΔᐃᐃⲆ(ΔΔⵠ, [{
			f: ⵠΔⵠⵠΔᐃΔ,
			x: Ⲇⵠᐃ,
			y: ⵠⵠΔΔ,
			a: 1,
			r: ⵠᐃⲆⵠ,
			c: [ᐃ[298], "#332715", ᐃ[339], ᐃ[425]]
		}], .5, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠᐃΔᐃ] = ᐃᐃ[ⵠ.ⵠⲆΔΔⵠⵠⵠ];
		ᐃᐃ[ⵠ.ⲆᐃⵠⲆᐃᐃⲆ] = ΔᐃᐃⲆ(1, [{
			f: ΔΔᐃᐃⵠΔⲆ,
			x: 0,
			y: 0,
			a: ΔⲆⵠⲆ,
			r: 0,
			c: [ᐃ[298], "#352618", "#402b18", ᐃ[503], ᐃ[425], "#52391e"]
		}], .3, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠⲆⲆⲆ] = ᐃᐃ[ⵠ.ⲆᐃⵠⲆᐃᐃⲆ];
		ᐃᐃ[ⵠ.ΔΔⲆᐃⲆⲆᐃ] = ΔᐃᐃⲆ(1, [{
			f: ᐃⵠⲆⵠⲆⲆᐃ,
			x: -ᐃΔⵠΔ,
			y: 0,
			a: 1,
			r: -Math.PI / 5,
			c: [ᐃ[298], ᐃ[34], ᐃ[339], "#594225", ᐃ[3]]
		}], .4, [ᐃ[79], ᐃ[100], ᐃ[0]], .7);
		ᐃᐃ[ⵠ.ⵠΔⵠⲆⲆⵠⵠ] = ᐃᐃ[ⵠ.ΔΔⲆᐃⲆⲆᐃ];
		ᐃᐃ[ⵠ.ᐃᐃⲆⵠᐃᐃⲆ] = ΔᐃᐃⲆ(1, [{
			f: ᐃⵠⲆⵠⲆⲆᐃ,
			x: -ⵠⵠⵠⲆ,
			y: Δⵠⵠ,
			a: ΔᐃⵠⲆ,
			r: -Math.PI / ⲆᐃΔⲆⵠ,
			c: [ᐃ[298], ᐃ[34], ᐃ[339], "#594225", "#3F2D18", "#2D2112"]
		}], .4, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ᐃΔᐃΔⵠΔΔ] = ᐃᐃ[ⵠ.ᐃᐃⲆⵠᐃᐃⲆ];
		ᐃᐃ[ⵠ.ⵠΔⲆⵠΔᐃᐃ] = ΔᐃᐃⲆ(1, [{
			f: ΔⵠⵠᐃⵠⲆⵠ,
			x: 0,
			y: ⲆⲆᐃ,
			a: ⲆⲆΔⵠ,
			r: 0,
			c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
		}], .25, [ᐃ[317], ᐃ[317], ᐃ[317]], .5);
		ᐃᐃ[ⵠ.ΔΔᐃⲆᐃΔᐃ] = ΔᐃᐃⲆ(ᐃⲆⲆ, [{
			f: ⲆⲆΔⲆⵠᐃᐃ,
			x: ⵠᐃΔ,
			y: 0,
			a: ᐃΔΔⲆ,
			r: ⵠΔⵠᐃ,
			c: [ᐃ[298], "#ed5f4f", "#ce4545", ᐃ[478], "#e2dad7"]
		}], .2, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ΔΔᐃᐃΔᐃⵠ] = ᐃᐃ[ⵠ.ΔΔᐃⲆᐃΔᐃ];
		ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆⵠⲆ] = ΔᐃᐃⲆ(1, [{
			f: ᐃΔΔⲆⲆΔⵠᐃⵠ,
			x: 0,
			y: ⵠᐃΔ,
			a: ⵠᐃᐃ,
			r: 0,
			c: [ᐃ[298], "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", ᐃ[390], ᐃ[575]]
		}], .25, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃⲆⵠ] = ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆⵠⲆ];
		ᐃᐃ[ⵠ.ᐃⲆΔⲆΔⲆΔ] = ΔᐃᐃⲆ(1, [{
			f: ᐃⵠᐃⲆⲆᐃⵠⵠⵠ,
			x: -2,
			y: -8,
			a: 1,
			r: Ⲇⵠᐃ,
			c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
		}], .25, [ᐃ[297], ᐃ[362], ᐃ[184]], .5);
		ᐃᐃ[ⵠ.ⲆᐃⲆⲆΔΔⵠ] = ᐃᐃ[ⵠ.ᐃⲆΔⲆΔⲆΔ];
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃⵠΔⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃⵠΔⵠ][0] = Δᐃ.ΔⲆⲆΔⲆΔⵠ;
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃⵠΔⵠ][Δⵠᐃ] = Δᐃ.ᐃⲆᐃⵠⲆⵠᐃ;
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃⵠΔⵠ][2] = Δᐃ.ΔΔᐃΔᐃⲆᐃ;
		ᐃᐃ[ⵠ.ⵠⲆⲆᐃΔᐃⲆ] = ᐃᐃ[ⵠ.ⲆⲆⲆᐃⵠΔⵠ];
		ᐃᐃ[ⵠ.ⲆᐃᐃΔΔⲆΔ] = ᐃᐃ[ⵠ.ⲆⲆⲆᐃⵠΔⵠ];
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃΔᐃ] = [];
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃΔᐃ][ⵠⵠⲆΔ] = Δᐃ.ΔΔᐃⵠΔⵠⵠ;
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃΔᐃ][ΔᐃⵠⲆ] = Δᐃ.ⵠᐃΔⵠΔΔᐃ;
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃΔᐃ][ⵠⵠᐃⲆ] = Δᐃ.ΔⵠⵠᐃⲆⲆΔ;
		ᐃᐃ[ⵠ.ΔΔⲆⵠΔΔⲆ] = ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃΔᐃ];
		ᐃᐃ[ⵠ.ⵠΔᐃⵠⲆᐃⲆ] = ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃΔᐃ];
		ᐃᐃ[ⵠ.ΔⲆᐃΔⵠᐃΔ] = ᐃᐃ[ⵠ.ΔⵠⲆΔⲆ];
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔⵠΔ] = ᐃᐃ[ⵠ.ΔⵠⲆΔⲆ];
		ᐃᐃ[ⵠ.ΔⵠⲆΔⲆ] = [];
		ᐃᐃ[ⵠ.ΔⵠⲆΔⲆ][ⵠΔΔⲆ] = Δᐃ.ΔᐃᐃΔⵠⵠⲆ;
		ᐃᐃ[ⵠ.ΔⵠⲆΔⲆ][1] = Δᐃ.ΔᐃⵠΔⵠΔⲆ;
		ᐃᐃ[ⵠ.ΔⵠⲆΔⲆ][ᐃⵠΔⲆ] = Δᐃ.ΔⵠΔΔΔᐃΔ;
		ᐃᐃ[ⵠ.ΔⲆᐃΔⵠᐃΔ] = ᐃᐃ[ⵠ.ΔⵠⲆΔⲆ];
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔⵠΔ] = ᐃᐃ[ⵠ.ΔⵠⲆΔⲆ];
		ᐃᐃ[ⵠ.ⵠΔΔⲆΔⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠΔΔⲆΔⲆⵠ][Ⲇⵠᐃ] = Δᐃ.ΔⵠⵠΔᐃΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔΔⲆΔⲆⵠ][ᐃΔΔⲆ] = Δᐃ.ᐃⲆᐃΔⵠⵠⲆ;
		ᐃᐃ[ⵠ.ⵠΔΔⲆΔⲆⵠ][2] = Δᐃ.ⵠⵠΔΔⵠⵠⲆ;
		ᐃᐃ[ⵠ.ⵠⵠᐃΔᐃⵠⲆ] = ᐃᐃ[ⵠ.ⵠΔΔⲆΔⲆⵠ];
		ᐃᐃ[ⵠ.ⲆᐃΔΔΔⵠⵠ] = ᐃᐃ[ⵠ.ⵠΔΔⲆΔⲆⵠ];
		ᐃᐃ[ⵠ.ⲆᐃΔΔᐃⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆᐃΔΔᐃⲆⵠ][0] = Δᐃ.ⲆⵠΔᐃⵠΔΔ;
		ᐃᐃ[ⵠ.ⲆᐃΔΔᐃⲆⵠ][1] = Δᐃ.ⵠΔⲆⲆⲆⵠᐃ;
		ᐃᐃ[ⵠ.ⲆᐃΔΔᐃⲆⵠ][2] = Δᐃ.ⵠⲆᐃᐃᐃΔⲆ;
		ᐃᐃ[ⵠ.ⵠᐃΔᐃᐃⵠΔ] = ᐃᐃ[ⵠ.ⲆᐃΔΔᐃⲆⵠ];
		ᐃᐃ[ⵠ.ⲆᐃⵠⲆᐃⵠΔ] = ᐃᐃ[ⵠ.ⲆᐃΔΔᐃⲆⵠ];
		ᐃᐃ[ⵠ.ΔΔⲆⲆⵠⲆᐃ] = [];
		ᐃᐃ[ⵠ.ΔΔⲆⲆⵠⲆᐃ][0] = Δᐃ.ΔΔΔⲆⵠⵠⲆ;
		ᐃᐃ[ⵠ.ΔΔⲆⲆⵠⲆᐃ][ᐃⵠⵠⵠ] = Δᐃ.ⵠⵠΔΔⲆⲆⲆ;
		ᐃᐃ[ⵠ.ΔΔⲆⲆⵠⲆᐃ][ⵠⲆΔᐃ] = Δᐃ.ᐃᐃᐃⵠⵠΔⵠ;
		ᐃᐃ[ⵠ.ⲆΔⲆⵠⲆⵠΔ] = ᐃᐃ[ⵠ.ΔΔⲆⲆⵠⲆᐃ];
		ᐃᐃ[ⵠ.ᐃⵠⵠΔᐃᐃⲆ] = ᐃᐃ[ⵠ.ΔΔⲆⲆⵠⲆᐃ];
		ᐃᐃ[ⵠ.ΔΔᐃᐃᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ΔΔᐃᐃᐃΔΔ][Ⲇⵠᐃ] = Δᐃ.ᐃⲆᐃⲆⵠᐃΔ;
		ᐃᐃ[ⵠ.ΔΔᐃᐃᐃΔΔ][ΔᐃⵠⲆ] = Δᐃ.ᐃⲆΔΔΔⵠΔ;
		ᐃᐃ[ⵠ.ΔΔᐃᐃᐃΔΔ][ᐃᐃⲆⵠ] = Δᐃ.ⲆⵠⵠⲆⵠΔⲆ;
		ᐃᐃ[ⵠ.ΔⵠᐃᐃᐃΔⵠ] = ᐃᐃ[ⵠ.ΔΔᐃᐃᐃΔΔ];
		ᐃᐃ[ⵠ.ΔⲆΔⲆᐃⵠⵠ] = ᐃᐃ[ⵠ.ΔΔᐃᐃᐃΔΔ];
		ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠⲆΔ] = [];
		ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠⲆΔ][0] = Δᐃ.ⵠΔⲆΔⵠⵠΔ;
		ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠⲆΔ][ⲆⲆᐃⵠ] = Δᐃ.ᐃΔⵠᐃⲆⲆᐃ;
		ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠⲆΔ][2] = Δᐃ.ᐃᐃᐃΔⵠᐃᐃ;
		ᐃᐃ[ⵠ.ΔⵠⲆΔᐃⵠⵠ] = ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠⲆΔ];
		ᐃᐃ[ⵠ.ΔᐃᐃᐃⲆⲆⵠ] = ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠⲆΔ];
		ᐃᐃ[ⵠ.ΔᐃⵠⵠᐃⵠⲆ] = [];
		ᐃᐃ[ⵠ.ΔᐃⵠⵠᐃⵠⲆ][Ⲇⵠᐃ] = Δᐃ.ⵠⲆⲆⲆᐃᐃⵠ;
		ᐃᐃ[ⵠ.ΔᐃⵠⵠᐃⵠⲆ][1] = Δᐃ.ΔᐃⲆⲆΔᐃΔ;
		ᐃᐃ[ⵠ.ΔᐃⵠⵠᐃⵠⲆ][2] = Δᐃ.ᐃⲆⵠⵠΔᐃΔ;
		ᐃᐃ[ⵠ.ⵠΔΔᐃⵠΔΔ] = ᐃᐃ[ⵠ.ΔᐃⵠⵠᐃⵠⲆ];
		ᐃᐃ[ⵠ.ⲆᐃⵠⵠⲆΔⵠ] = ᐃᐃ[ⵠ.ΔᐃⵠⵠᐃⵠⲆ];
		ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠΔ][ᐃⲆΔᐃ] = Δᐃ.ⲆΔΔⵠᐃⲆⲆ;
		ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠΔ][1] = Δᐃ.ⵠᐃⵠᐃΔΔΔ;
		ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠΔ][2] = Δᐃ.ᐃⵠΔᐃΔⲆΔ;
		ᐃᐃ[ⵠ.ᐃΔⵠᐃⵠⵠⲆΔⵠ] = ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠΔ];
		ᐃᐃ[ⵠ.ⵠᐃⵠⲆⲆΔⵠ] = ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠΔ];
		ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠⲆΔ] = [];
		ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠⲆΔ][0] = Δᐃ.ⵠᐃΔⵠᐃⵠΔ;
		ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠⲆΔ][1] = Δᐃ.ⵠⵠᐃⲆΔᐃⵠ;
		ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠⲆΔ][ΔΔᐃⲆⵠ] = Δᐃ.Δⵠⵠⵠⵠⵠⵠ;
		ᐃᐃ[ⵠ.ΔΔⲆⵠⲆⵠΔ] = ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠⲆΔ];
		ᐃᐃ[ⵠ.ᐃᐃⲆΔᐃⲆⵠ] = ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠⲆΔ];
		ᐃᐃ[ⵠ.ᐃⲆΔⵠⵠⵠⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⲆΔⵠⵠⵠⲆ][0] = Δᐃ.ⵠⵠᐃᐃᐃᐃΔ;
		ᐃᐃ[ⵠ.ᐃⲆΔⵠⵠⵠⲆ][1] = Δᐃ.ⲆᐃⵠⵠᐃⲆᐃ;
		ᐃᐃ[ⵠ.ᐃⲆΔⵠⵠⵠⲆ][ⵠᐃᐃⲆ] = Δᐃ.ᐃᐃᐃⲆⵠⲆΔ;
		ᐃᐃ[ⵠ.ⵠΔΔᐃᐃⲆᐃ] = ᐃᐃ[ⵠ.ᐃⲆΔⵠⵠⵠⲆ];
		ᐃᐃ[ⵠ.ⵠⲆⲆΔⵠⲆΔ] = ᐃᐃ[ⵠ.ᐃⲆΔⵠⵠⵠⲆ];
		ᐃᐃ[ⵠ.ᐃⲆΔⲆΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆΔⲆΔ][0] = Δᐃ.ⲆⵠΔᐃΔᐃᐃ;
		ᐃᐃ[ⵠ.ᐃⲆΔⲆΔ][1] = Δᐃ.ⲆⵠⲆⵠⵠΔᐃ;
		ᐃᐃ[ⵠ.ᐃⲆΔⲆΔ][2] = Δᐃ.ⲆΔΔᐃΔⵠΔ;
		ᐃᐃ[ⵠ.ⵠΔΔⵠⵠᐃΔ] = ᐃᐃ[ⵠ.ᐃⲆΔⲆΔ];
		ᐃᐃ[ⵠ.ΔᐃⲆⵠᐃᐃᐃ] = [];
		ᐃᐃ[ⵠ.ΔᐃⲆⵠᐃᐃᐃ][0] = Δᐃ.ⵠᐃⲆⲆⲆⵠⵠ;
		ᐃᐃ[ⵠ.ΔᐃⲆⵠᐃᐃᐃ][1] = Δᐃ.ᐃΔΔᐃⵠᐃⲆ;
		ᐃᐃ[ⵠ.ΔᐃⲆⵠᐃᐃᐃ][Ⲇᐃⵠⵠ] = Δᐃ.ΔⵠᐃᐃⲆΔᐃ;
		ᐃᐃ[ⵠ.ΔⲆⲆⲆΔⲆᐃ] = ᐃᐃ[ⵠ.ΔᐃⲆⵠᐃᐃᐃ];
		ᐃᐃ[ⵠ.ⵠΔⵠΔⵠⲆⲆ] = ᐃᐃ[ⵠ.ⲆΔⲆᐃⲆᐃⲆ];
		ᐃᐃ[ⵠ.ΔⲆΔⵠⵠΔⲆ] = ᐃᐃ[ⵠ.ⵠⵠⵠⲆΔⵠⲆ];
		ᐃᐃ[ⵠ.ⲆΔⲆᐃⲆⲆⲆ] = ᐃᐃ[ⵠ.ⲆⵠⵠⵠⲆᐃΔ];
		ᐃᐃ[ⵠ.ⲆⲆΔⲆⵠΔⲆ] = ᐃᐃ[ⵠ.ᐃΔᐃⲆᐃΔⲆ];
		ᐃᐃ[ⵠ.ⲆⲆΔΔᐃⵠⲆ] = ᐃᐃ[ⵠ.ᐃΔⲆⵠᐃⲆΔ];
		ᐃᐃ[ⵠ.ΔⲆᐃΔⵠⵠⲆ] = ᐃᐃ[ⵠ.ⲆΔⲆΔⲆⲆΔ];
		ᐃᐃ[ⵠ.ⲆΔⲆΔΔⵠⵠ] = ᐃᐃ[ⵠ.ΔⲆⲆⵠᐃⵠᐃ];
		ᐃᐃ[ⵠ.ⵠⵠⵠⵠⲆⵠⵠ] = ᐃᐃ[ⵠ.ΔᐃⵠᐃᐃⵠⲆ];
		ᐃᐃ[ⵠ.ᐃⲆᐃⲆⵠⵠᐃ] = ᐃᐃ[ⵠ.ᐃᐃΔΔⵠⵠⲆ];
		ᐃᐃ[ⵠ.ᐃΔΔᐃᐃᐃⲆ] = ᐃᐃ[ⵠ.ᐃⵠᐃᐃᐃΔᐃ];
		ᐃᐃ[ⵠ.ΔⲆᐃⵠⵠⲆΔ] = ᐃᐃ[ⵠ.ⵠⵠⲆⵠⵠⲆᐃ];
		ᐃᐃ[ⵠ.ⵠⲆΔⵠᐃΔΔ] = ᐃᐃ[ⵠ.ΔⲆΔΔᐃΔⵠ];
		ᐃᐃ[ⵠ.ᐃⲆⲆΔⲆΔⵠ] = ᐃᐃ[ⵠ.ⲆⵠᐃⵠᐃⵠΔ];
		ᐃᐃ[ⵠ.ⲆΔᐃⲆⲆⵠΔ] = ᐃᐃ[ⵠ.ΔΔΔⲆΔᐃⲆ];
		ᐃᐃ[ⵠ.ᐃΔᐃⲆⵠⵠⲆ] = ᐃᐃ[ⵠ.ΔⲆⵠⲆΔᐃΔ];
		ᐃᐃ[ⵠ.ΔᐃᐃΔⵠᐃΔ] = ᐃᐃ[ⵠ.ⲆⵠᐃⵠⲆⲆⵠ];
		ᐃᐃ[ⵠ.ΔΔⲆⲆΔⲆᐃ] = ᐃᐃ[ⵠ.ⲆᐃᐃᐃΔΔⲆ];
		ᐃᐃ[ⵠ.ⲆΔᐃⵠⵠⵠⲆ] = ᐃᐃ[ⵠ.ΔᐃᐃⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.Δⵠⵠⵠᐃᐃⵠ] = ᐃᐃ[ⵠ.ⲆⲆΔᐃⵠᐃᐃ];
		ᐃᐃ[ⵠ.ⵠⲆΔⲆⲆᐃⲆ] = ᐃᐃ[ⵠ.ᐃᐃᐃΔΔΔⲆ];
		ᐃᐃ[ⵠ.ΔᐃⲆΔⲆⵠⲆ] = ᐃᐃ[ⵠ.ⵠⵠⵠⵠΔᐃᐃ];
		ᐃᐃ[ⵠ.ΔΔᐃᐃᐃⵠⲆ] = ᐃᐃ[ⵠ.ⵠⵠⵠᐃΔⲆΔ];
		ᐃᐃ[ⵠ.ⲆΔΔᐃᐃⲆΔ] = ᐃᐃ[ⵠ.ᐃᐃⵠᐃΔᐃⲆ];
		ᐃᐃ[ⵠ.ᐃⲆΔΔᐃΔΔ] = ᐃᐃ[ⵠ.ⲆⲆΔΔⲆᐃⵠ];
		ᐃᐃ[ⵠ.ⲆⵠⵠᐃⲆⲆⵠ] = ᐃᐃ[ⵠ.ⲆⵠᐃⲆⲆⲆⲆ];
		ᐃᐃ[ⵠ.ΔⲆⲆᐃΔⲆⲆ] = ᐃᐃ[ⵠ.ᐃⵠᐃΔᐃⵠᐃ];
		ᐃᐃ[ⵠ.ΔⵠⲆⲆΔⵠΔ] = ᐃᐃ[ⵠ.ⵠᐃΔΔⵠⵠⲆ];
		ᐃᐃ[ⵠ.ⵠᐃΔⵠⲆΔⵠ] = ᐃᐃ[ⵠ.ᐃⲆΔᐃΔᐃⲆ];
		ᐃᐃ[ⵠ.ΔΔᐃⵠᐃΔⲆ] = ᐃᐃ[ⵠ.ⵠⵠΔⲆΔⵠᐃ];
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃⵠΔ] = ᐃᐃ[ⵠ.ΔᐃΔⲆᐃⲆⲆ];
		ᐃᐃ[ⵠ.ΔⲆⲆΔΔᐃⵠ] = ᐃᐃ[ⵠ.ΔⲆⲆⵠⲆᐃΔ];
		ᐃᐃ[ⵠ.ᐃⲆᐃᐃᐃΔᐃ] = ᐃᐃ[ⵠ.ⵠⵠⲆⵠⵠⵠᐃ];
		ᐃᐃ[ⵠ.ΔⵠΔΔᐃⲆⲆ] = ᐃᐃ[ⵠ.ΔⲆⲆⲆΔⵠⵠ];
		ᐃᐃ[ⵠ.ΔᐃⵠⲆΔⵠⲆ] = ᐃᐃ[ⵠ.ΔⵠᐃⵠⵠΔΔ];
		ᐃᐃ[ⵠ.ΔⲆⲆᐃⵠⵠᐃ] = ᐃᐃ[ⵠ.ⲆⲆⵠΔⲆΔΔ];
		ᐃᐃ[ⵠ.ⵠⲆⲆⵠΔΔⵠ] = ᐃᐃ[ⵠ.ᐃᐃⵠⲆⲆⲆⲆ];
		ᐃᐃ[ⵠ.ⲆⲆⵠᐃΔᐃΔ] = ᐃᐃ[ⵠ.ΔⵠΔⲆⲆⵠⵠ];
		ᐃᐃ[ⵠ.ΔⲆᐃⲆΔⵠΔ] = ᐃᐃ[ⵠ.ⲆᐃΔⲆⲆⲆⲆ];
		ᐃᐃ[ⵠ.ⲆᐃⵠΔⵠⵠⲆ] = ᐃᐃ[ⵠ.ΔᐃΔⵠᐃⵠᐃ];
		ᐃᐃ[ⵠ.ΔΔⵠᐃⲆⵠⲆ] = ᐃᐃ[ⵠ.ⵠᐃⲆΔⲆᐃΔ];
		ᐃᐃ[ⵠ.ⵠⲆⵠΔᐃⲆⵠ] = ᐃᐃ[ⵠ.ⲆᐃⵠΔⲆⵠⵠ];
		ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆⵠⵠ] = ᐃᐃ[ⵠ.ⲆⲆⵠⵠᐃΔⵠ];
		ᐃᐃ[ⵠ.ΔᐃⲆΔΔⲆⵠ] = ᐃᐃ[ⵠ.ΔⲆⲆΔΔΔⲆ];
		ᐃᐃ[ⵠ.ⲆᐃᐃⲆⵠᐃⲆ] = ᐃᐃ[ⵠ.ᐃⵠᐃⵠᐃΔᐃ];
		ᐃᐃ[ⵠ.ⵠΔⲆⵠⵠⵠⲆ] = ᐃᐃ[ⵠ.ᐃΔΔⲆΔⲆΔ];
		ᐃᐃ[ⵠ.ⵠⲆⵠᐃⲆⵠⵠ] = ᐃᐃ[ⵠ.ΔΔⵠΔⲆΔⵠ];
		ᐃᐃ[ⵠ.ΔᐃᐃΔᐃⵠΔ] = ᐃᐃ[ⵠ.ⲆⲆⲆᐃⲆⵠⲆ];
		ᐃᐃ[ⵠ.ⵠⵠΔⲆᐃⲆⲆ] = ᐃᐃ[ⵠ.ⲆΔⵠⲆᐃᐃᐃ];
		ᐃᐃ[ⵠ.ᐃⵠⲆᐃΔⲆⲆ] = ᐃᐃ[ⵠ.ⵠⵠᐃⵠⲆᐃⲆ];
		ᐃᐃ[ⵠ.ⲆⵠⵠΔⵠⵠΔ] = ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃⵠⲆ];
		ᐃᐃ[ⵠ.ⵠᐃⵠᐃᐃΔΔ] = ᐃᐃ[ⵠ.ⲆⲆⲆⲆⲆΔⵠ];
		ᐃᐃ[ⵠ.ᐃⵠΔⵠΔΔΔ] = ᐃᐃ[ⵠ.ᐃⲆⲆⵠⵠᐃⲆ];
		ᐃᐃ[ⵠ.ⲆΔΔⲆⲆⵠΔ] = ᐃᐃ[ⵠ.ⵠᐃⲆΔᐃⲆⵠ];
		ᐃᐃ[ⵠ.ⵠⵠⲆⲆⵠⵠᐃ] = ⲆΔⲆ(ⲆΔᐃΔⲆᐃΔⲆΔ(.8, true, [ᐃ[503], ᐃ[47], ᐃ[47], ᐃ[47]]));
		ᐃᐃ[ⵠ.Δᐃᐃⵠⵠⵠᐃ] = ΔᐃᐃⲆ(.5, [{
			f: ⵠΔΔΔⲆᐃⲆⵠⲆ,
			x: 0,
			y: 2,
			a: ΔᐃⵠⲆ,
			r: Δⵠⵠ,
			c: [ᐃ[478]]
		}], .16, [ᐃ[47], "#d0ad41", "#b89733"], .9);
		ᐃᐃ[ⵠ.ⵠⵠΔⲆΔᐃᐃ] = ᐃᐃ[ⵠ.ᐃΔⲆΔΔᐃᐃ];
		ᐃᐃ[ⵠ.ΔⵠⲆΔᐃᐃΔ] = ᐃᐃ[ⵠ.ᐃⵠⲆⵠⲆⵠᐃ];
		ᐃᐃ[ⵠ.ⵠⲆⲆΔΔⲆᐃ] = ᐃᐃ[ⵠ.ᐃⵠⵠⲆⲆⵠⲆ];
		ᐃᐃ[ⵠ.ⵠΔΔΔΔⲆⲆ] = ᐃᐃ[ⵠ.ᐃᐃΔᐃⵠΔᐃ];
		ᐃᐃ[ⵠ.ⲆᐃΔⲆΔⵠᐃ] = ᐃᐃ[ⵠ.ΔΔⲆⵠᐃΔⵠ];
		ᐃᐃ[ⵠ.ⵠᐃⲆⵠᐃΔᐃ] = ᐃᐃ[ⵠ.ⵠΔⵠᐃⵠⵠᐃ];
		ᐃᐃ[ⵠ.ⵠⵠⵠᐃΔᐃⲆ] = ᐃᐃ[ⵠ.ⵠᐃᐃⲆⲆⲆΔ];
		ᐃᐃ[ⵠ.ΔⲆⲆᐃⲆᐃⵠ] = ᐃᐃ[ⵠ.ⵠⵠⵠⲆⵠⵠⵠ];
		ᐃᐃ[ⵠ.ᐃᐃΔΔᐃᐃΔ] = ᐃᐃ[ⵠ.ⲆΔΔΔΔΔⲆ];
		ᐃᐃ[ⵠ.ⵠᐃⵠⲆᐃⲆⵠ] = ᐃᐃ[ⵠ.ᐃⲆΔᐃⲆⲆΔ];
		ᐃᐃ[ⵠ.ᐃΔᐃⵠⲆⲆⲆ] = ᐃᐃ[ⵠ.ⲆⲆᐃΔΔΔᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔΔⵠⲆΔ] = ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠⲆᐃ];
		ᐃᐃ[ⵠ.ΔⲆⵠⵠΔⲆΔ] = ᐃᐃ[ⵠ.ᐃᐃⵠᐃᐃᐃᐃ];
		ᐃᐃ[ⵠ.ⲆⲆⵠⲆⲆᐃⲆ] = ᐃᐃ[ⵠ.ΔΔⵠⵠⲆⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔⲆΔⵠⵠ] = ᐃᐃ[ⵠ.ᐃⲆⲆᐃⲆⵠΔ];
		ᐃᐃ[ⵠ.ᐃᐃⵠⲆⲆⲆΔ] = ᐃᐃ[ⵠ.ΔᐃⲆⲆⲆⵠᐃ];
		ᐃᐃ[ⵠ.ⲆΔΔᐃⲆⲆΔ] = ᐃᐃ[ⵠ.ΔⵠΔⵠΔⵠⵠ];
		ᐃᐃ[ⵠ.ⵠⲆᐃΔⵠΔΔ] = ᐃᐃ[ⵠ.ᐃᐃⲆΔΔΔⲆ];
		ᐃᐃ[ⵠ.ᐃⲆᐃΔΔᐃⵠ] = ᐃᐃ[ⵠ.ᐃΔⵠⲆΔⵠΔ];
		ᐃᐃ[ⵠ.ΔᐃΔⲆΔⵠΔ] = ᐃᐃ[ⵠ.ⲆΔΔⲆᐃⲆⲆ];
		ᐃᐃ[ⵠ.ⲆᐃΔΔⲆⲆΔ] = ᐃᐃ[ⵠ.ⲆⲆΔⵠΔⲆΔ];
		ᐃᐃ[ⵠ.ΔⵠΔᐃΔᐃⵠ] = ᐃᐃ[ⵠ.ⵠⲆᐃΔΔⵠΔ];
		ᐃᐃ[ⵠ.ⲆⵠΔⵠᐃΔⲆ] = ᐃᐃ[ⵠ.ᐃΔᐃΔᐃΔΔ];
		ᐃᐃ[ⵠ.ΔΔᐃⵠΔⲆΔ] = ᐃᐃ[ⵠ.ᐃⲆⲆᐃᐃᐃᐃ];
		ᐃᐃ[ⵠ.ΔⵠⵠⵠⵠΔⲆ] = ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠΔᐃ];
		ᐃᐃ[ⵠ.ⵠⵠΔⵠⵠⲆⲆ] = ᐃᐃ[ⵠ.ⲆⵠΔⲆⵠⲆⵠ];
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠⲆⲆΔ] = ᐃᐃ[ⵠ.ⵠᐃᐃⵠΔΔⲆ];
		ᐃᐃ[ⵠ.ᐃⵠⲆΔⵠⲆᐃ] = ᐃᐃ[ⵠ.ⵠⵠᐃᐃⲆⵠⲆ];
		ᐃᐃ[ⵠ.ⲆⲆΔΔᐃΔⵠ] = ᐃᐃ[ⵠ.ᐃΔᐃⵠⲆⵠᐃ];
		ᐃᐃ[ⵠ.ΔΔⵠᐃΔⲆⲆ] = ᐃᐃ[ⵠ.ᐃⲆᐃΔⲆⲆᐃ];
		ᐃᐃ[ⵠ.ᐃΔᐃΔⵠΔⵠ] = ᐃᐃ[ⵠ.ⵠⲆⵠⵠⲆⵠⵠ];
		ᐃᐃ[ⵠ.ᐃⵠΔᐃᐃⵠΔ] = ᐃᐃ[ⵠ.ⵠⲆΔⵠⵠΔⲆ];
		ᐃᐃ[ⵠ.ⲆⲆⲆⵠΔΔⵠ] = ᐃᐃ[ⵠ.ⵠΔⵠᐃⵠᐃΔ];
		ᐃᐃ[ⵠ.ΔⲆΔⲆⵠⵠᐃ] = ᐃᐃ[ⵠ.ᐃᐃⵠⵠΔΔⲆ];
		ᐃᐃ[ⵠ.ᐃⵠⵠᐃⵠᐃⵠ] = ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔΔΔᐃΔᐃΔ] = ᐃᐃ[ⵠ.ⵠⲆΔᐃⲆΔΔ];
		ᐃᐃ[ⵠ.ⲆΔΔΔΔΔᐃ] = ᐃᐃ[ⵠ.ᐃⵠⵠᐃⲆⵠⲆ];
		ᐃᐃ[ⵠ.ⵠⲆΔⲆⵠⵠⵠ] = ᐃᐃ[ⵠ.ⵠᐃⵠᐃΔⵠⵠ];
		ᐃᐃ[ⵠ.ΔⵠᐃᐃΔⲆΔ] = ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃⵠΔ];
		ᐃᐃ[ⵠ.ΔⲆⲆΔⵠΔⲆ] = ᐃᐃ[ⵠ.ⵠⲆΔᐃⲆⲆΔ];
		ᐃᐃ[ⵠ.ᐃⵠⵠᐃᐃⵠᐃ] = ᐃᐃ[ⵠ.ΔᐃⲆⲆᐃΔᐃ];
		ᐃᐃ[ⵠ.ⲆΔᐃⵠⵠᐃⲆ] = ᐃᐃ[ⵠ.ⵠΔⵠᐃⲆⲆᐃ];
		ᐃᐃ[ⵠ.ΔⵠᐃⲆⵠᐃᐃ] = ᐃᐃ[ⵠ.ⵠⲆΔΔⵠⵠⵠ];
		ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃᐃᐃ] = ᐃᐃ[ⵠ.ⲆᐃⵠⲆᐃᐃⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔⵠⲆⵠᐃ] = ᐃᐃ[ⵠ.ⲆΔⲆΔᐃᐃⵠ];
		ᐃᐃ[ⵠ.ⲆΔΔⵠⲆⲆΔ] = ᐃᐃ[ⵠ.ΔⲆᐃᐃᐃΔᐃ];
		ᐃᐃ[ⵠ.ᐃⵠΔⲆᐃⲆⵠ] = ᐃᐃ[ⵠ.ⲆΔΔΔᐃⵠⲆ];
		ᐃᐃ[ⵠ.ⵠΔⲆⵠᐃⵠⲆ] = ᐃᐃ[ⵠ.ᐃⵠᐃΔΔⵠΔ];
		ᐃᐃ[ⵠ.ᐃⵠⲆᐃⵠᐃΔ] = ᐃᐃ[ⵠ.ⵠᐃⲆᐃⵠⵠΔ];
		ᐃᐃ[ⵠ.ⵠⲆⲆΔⲆᐃΔ] = ᐃᐃ[ⵠ.ⵠᐃⲆⲆΔΔⲆ];
		ᐃᐃ[ⵠ.ᐃΔⵠⵠᐃⵠᐃ] = ᐃᐃ[ⵠ.ⲆⵠⵠΔⵠᐃΔ];
		ᐃᐃ[ⵠ.ⵠⵠⵠΔⵠⲆᐃ] = ᐃᐃ[ⵠ.ᐃᐃⲆⵠᐃᐃⲆ];
		ᐃᐃ[ⵠ.ΔⲆΔᐃⵠⲆᐃ] = ᐃᐃ[ⵠ.ⵠΔⲆⵠΔᐃᐃ];
		ᐃᐃ[ⵠ.ⵠⵠᐃᐃⲆⵠΔ] = ᐃᐃ[ⵠ.ΔⲆᐃΔⲆⲆᐃ];
		ᐃᐃ[ⵠ.ΔⲆⲆᐃⲆⲆⵠ] = ᐃᐃ[ⵠ.ⲆᐃΔᐃᐃⲆΔ];
		ᐃᐃ[ⵠ.ⵠΔⲆⲆᐃⵠⵠ] = ᐃᐃ[ⵠ.ⲆΔᐃⵠΔᐃⵠ];
		ᐃᐃ[ⵠ.ΔⲆΔΔΔⲆᐃ] = ᐃᐃ[ⵠ.ⵠᐃΔⵠⲆⵠⵠ];
		ᐃᐃ[ⵠ.ⵠⲆⵠⵠⵠⵠⲆ] = ᐃᐃ[ⵠ.ⲆΔΔⲆᐃᐃᐃ];
		ᐃᐃ[ⵠ.ᐃᐃΔᐃᐃⵠⲆ] = ᐃᐃ[ⵠ.ΔΔⲆᐃⲆⲆᐃ];
		ᐃᐃ[ⵠ.ΔⵠⵠΔΔᐃⵠ] = ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆⵠⲆ];
		ᐃᐃ[ⵠ.ΔΔᐃᐃΔᐃⵠ] = ᐃᐃ[ⵠ.ΔΔᐃⲆᐃΔᐃ];
		ᐃᐃ[ⵠ.ⵠΔⵠⲆᐃⲆΔ] = ᐃᐃ[ⵠ.ⵠⵠΔᐃᐃⵠⵠ];
		ᐃᐃ[ⵠ.ᐃᐃⲆⲆⵠᐃΔ] = ᐃᐃ[ⵠ.ⲆΔΔⲆᐃΔⵠ];
		ᐃᐃ[ⵠ.ΔΔᐃⲆⵠΔᐃ] = ᐃᐃ[ⵠ.ΔⲆⵠᐃⵠᐃⵠ];
		ᐃᐃ[ⵠ.ᐃΔΔⲆⲆⵠᐃ] = ᐃᐃ[ⵠ.ᐃⲆΔⲆΔⲆΔ];
		ᐃᐃ[ⵠ.ᐃᐃⵠⵠᐃΔΔ] = ᐃᐃ[ⵠ.ᐃⲆⲆⲆᐃΔⲆ];
		ᐃᐃ[ⵠ.ⵠⵠᐃΔᐃⵠⵠ] = ᐃᐃ[ⵠ.ⵠᐃᐃᐃΔⵠⲆ];
		ᐃᐃ[ⵠ.ᐃΔᐃΔⵠⲆΔ] = ᐃᐃ[ⵠ.ΔᐃᐃⵠᐃΔΔ];
		ᐃᐃ[ⵠ.ⵠΔᐃᐃΔᐃⵠ] = ᐃᐃ[ⵠ.ⲆⵠⵠⵠΔⲆᐃ];
		ᐃᐃ[ⵠ.ᐃⵠⵠΔᐃᐃᐃ] = ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃⲆᐃ];
		ᐃᐃ[ⵠ.ⲆⵠⵠᐃⲆΔⵠ] = ᐃᐃ[ⵠ.ⲆⵠⵠⲆᐃᐃⵠ];
		ᐃᐃ[ⵠ.ΔᐃⲆΔⵠⲆⵠ] = ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃᐃⵠ];
		ᐃᐃ[ⵠ.ⵠⵠⲆⵠⲆΔᐃ] = ᐃᐃ[ⵠ.ⲆⵠΔⲆΔⲆⵠ];
		ᐃᐃ[ⵠ.ⲆΔΔΔΔᐃᐃ] = ᐃᐃ[ⵠ.ⵠⵠᐃΔᐃⲆΔ];
		ᐃᐃ[ⵠ.ⵠᐃⲆⵠⲆⵠᐃ] = ᐃᐃ[ⵠ.ⵠᐃⵠⲆⲆᐃⲆ];
		ᐃᐃ[ⵠ.ⵠⲆᐃⵠⵠΔΔ] = ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃᐃᐃ];
		ᐃᐃ[ⵠ.ⵠⲆΔⵠⵠⲆΔ] = ᐃᐃ[ⵠ.ᐃΔΔΔᐃΔⵠ];
		ᐃᐃ[ⵠ.ᐃⲆⲆΔᐃⵠᐃ] = ᐃᐃ[ⵠ.ⲆᐃᐃΔᐃᐃᐃ];
		ᐃᐃ[ⵠ.ⲆⲆᐃΔⲆᐃⲆ] = ᐃᐃ[ⵠ.ⵠΔⲆⲆⲆΔⲆ];
		ᐃᐃ[ⵠ.ⲆᐃⵠᐃΔΔⵠ] = ᐃᐃ[ⵠ.ⲆΔΔⵠⲆⲆᐃ];
		ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃΔⵠ] = ᐃᐃ[ⵠ.ΔΔⵠⲆⵠᐃⲆ];
		ᐃᐃ[ⵠ.ᐃⲆⵠΔⵠᐃⵠ] = ᐃᐃ[ⵠ.ᐃⲆⵠⵠⵠⲆᐃ];
		ᐃᐃ[ⵠ.ⵠⵠᐃᐃΔΔⵠ] = ᐃᐃ[ⵠ.ᐃᐃᐃⲆⵠΔⵠ]
	}
	const ⵠᐃⲆᐃᐃⲆᐃ = String.fromCharCode;
	const ᐃⲆⵠᐃⲆᐃⵠ = 101;
	const ⲆⵠⲆⲆᐃᐃⵠ = 118;
	const ΔⵠΔⵠᐃⵠⲆᐃⵠ = "ⲆⲆᐃΔⲆΔᐃ";
	const ⲆⲆⵠᐃΔⵠᐃΔᐃ = 97;
	const ⲆΔⵠΔⵠⵠⲆᐃΔ = 108;
	const ⵠΔⲆⵠᐃᐃⲆ = ⵠᐃⲆᐃᐃⲆᐃ(ᐃⲆⵠᐃⲆᐃⵠ);
	const ⲆⲆΔᐃΔΔⵠ = ⵠᐃⲆᐃᐃⲆᐃ(ⲆⵠⲆⲆᐃᐃⵠ);

	function ⲆⲆᐃΔⲆΔᐃ() {
		ⵠΔᐃΔᐃᐃⵠⵠᐃ = ⲆⲆᐃΔⲆΔᐃ;
		return ⲆⲆᐃΔⲆΔᐃ
	}
	const ⲆΔⵠⵠⵠⵠΔ = ⵠᐃⲆᐃᐃⲆᐃ(ⲆⲆⵠᐃΔⵠᐃΔᐃ);
	const ΔⲆΔΔⲆ = ⵠᐃⲆᐃᐃⲆᐃ(ⲆΔⵠΔⵠⵠⲆᐃΔ);
	const ᐃᐃᐃⲆᐃ = ⵠΔⲆⵠᐃᐃⲆ + ⲆⲆΔᐃΔΔⵠ + ⲆΔⵠⵠⵠⵠΔ + ΔⲆΔΔⲆ;
	const ΔᐃᐃⵠⵠⲆⲆ = ⲆⵠᐃΔᐃⵠⲆ[ᐃᐃᐃⲆᐃ];
	const ΔⵠⵠⵠᐃⵠⲆ = ΔᐃᐃⵠⵠⲆⲆ(ⲆⲆᐃΔⲆΔᐃ + "try{" + ΔⵠΔⵠᐃⵠⲆᐃⵠ + "();0;}catch(ⲆΔⵠⵠⵠⵠΔ){1;}");
	if (ΔⵠⵠⵠᐃⵠⲆ) {
		const ⵠᐃⲆᐃᐃⲆᐃ = Math.floor;
		let ⲆⲆⵠᐃΔⵠᐃΔᐃ = 0;
		const ᐃⲆⵠᐃⲆᐃⵠ = function(ᐃⲆⵠᐃⲆᐃⵠ) {
			for (let ⲆⵠⲆⲆᐃᐃⵠ = 0; ⲆⵠⲆⲆᐃᐃⵠ < 7470; ⲆⵠⲆⲆᐃᐃⵠ++) ⲆⲆⵠᐃΔⵠᐃΔᐃ += ⲆⵠⲆⲆᐃᐃⵠ;
			return ⵠᐃⲆᐃᐃⲆᐃ(ᐃⲆⵠᐃⲆᐃⵠ)
		};
		Math.floor = ᐃⲆⵠᐃⲆᐃⵠ
	}

	function ᐃⵠⲆΔⲆΔⵠ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 95;
		ᐃⵠ.height = Ⲇ * 85;
		if (0 == ᐃⲆ) {
			Δ.translate(Ⲇ * 7, 15 * Ⲇ);
			Δ.scale(.9, .9);
			Δ.save();
			ᐃΔⵠ(Δ, 0 * Ⲇ, 5 * Ⲇ, 90 * Ⲇ, Ⲇ * 60, ᐃᐃⵠΔⵠ);
			ⵠᐃ(Δ, Δⵠ[0]);
			Δ.globalCompositeOperation = ᐃ[500];
			ⵠΔᐃ(Δ, Ⲇ * 25, Ⲇ * 40, 10 * Ⲇ);
			Δ.fill();
			ⵠΔᐃ(Δ, 65 * Ⲇ, Ⲇ * 40, Ⲇ * 10);
			Δ.fill();
			Δ.restore();
			Δ.save();
			ᐃΔⵠ(Δ, 0, 0, 90 * Ⲇ, Ⲇ * 60, 10 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.globalCompositeOperation = ᐃ[500];
			ⵠΔᐃ(Δ, Ⲇ * 25, 40 * Ⲇ, ΔⲆΔΔᐃ * Ⲇ);
			Δ.fill();
			ⵠΔᐃ(Δ, Ⲇ * 65, Ⲇ * 40, Ⲇ * 10);
			Δ.fill();
			Δ.restore()
		} else if (ⲆⲆⲆᐃ == ᐃⲆ) {
			Δ.scale(.8, .8);
			Δ.translate(Ⲇ * ⵠΔΔΔΔⵠΔ, 33 * Ⲇ);
			Δ.save();
			Δ.scale(.56, .56);
			Δ.translate(-39 * Ⲇ, -60 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(32.5 * Ⲇ, Ⲇ * 50.642852783203125);
			Δ.bezierCurveTo(83 * Ⲇ, 69.64285278320312 * Ⲇ, 83 * Ⲇ, 69.64285278320312 * Ⲇ, Ⲇ * 133.5, 88.64285278320312 * Ⲇ);
			Δ.bezierCurveTo(93 * Ⲇ, 92.64285278320312 * Ⲇ, 93 * Ⲇ, Ⲇ * 92.64285278320312, Ⲇ * 52.5, 96.64285278320312 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 30.5, 100.64285278320312 * Ⲇ, Ⲇ * 36.5, 94.64285278320312 * Ⲇ, Ⲇ * 32.5, Ⲇ * 84.64285278320312);
			Δ.bezierCurveTo(Ⲇ * 21.5, 45.642852783203125 * Ⲇ, 24.5 * Ⲇ, Ⲇ * 48.642852783203125, 31.5 * Ⲇ, Ⲇ * 50.642852783203125);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⵠ]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(116.5 * Ⲇ, 85.64285278320312 * Ⲇ);
			Δ.bezierCurveTo(160.5 * Ⲇ, 67.14285278320312 * Ⲇ, 160.5 * Ⲇ, Ⲇ * 67.14285278320312, Ⲇ * 204.5, Ⲇ * 48.642852783203125);
			Δ.bezierCurveTo(220.5 * Ⲇ, Ⲇ * 42.642852783203125, Ⲇ * 208.5, 68.64285278320312 * Ⲇ, Ⲇ * 205.5, 85.64285278320312 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 202.5, Ⲇ * 98.64285278320312, 199.5 * Ⲇ, 98.64285278320312 * Ⲇ, Ⲇ * 188.5, Ⲇ * 100.64285278320312);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(166.5 * Ⲇ, Ⲇ * 68.64285278320312);
			Δ.bezierCurveTo(147.5 * Ⲇ, 72.64285278320312 * Ⲇ, Ⲇ * 145.5, Ⲇ * 73.64285278320312, Ⲇ * 142.5, 62.642852783203125 * Ⲇ);
			Δ.bezierCurveTo(121.5 * Ⲇ, Ⲇ * 12.642852783203125, 122.5 * Ⲇ, 5.642852783203125 * Ⲇ, Ⲇ * 117.5, 15.642852783203125 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 105.5, 40.642852783203125 * Ⲇ, 105.5 * Ⲇ, Ⲇ * 40.642852783203125, 93.5 * Ⲇ, Ⲇ * 65.64285278320312);
			Δ.bezierCurveTo(Ⲇ * 89.5, 74.64285278320312 * Ⲇ, 84.5 * Ⲇ, 72.64285278320312 * Ⲇ, Ⲇ * 73.5, 74.64285278320312 * Ⲇ);
			Δ.bezierCurveTo(98 * Ⲇ, Ⲇ * 87.64285278320312, 98 * Ⲇ, Ⲇ * 87.64285278320312, Ⲇ * 122.5, 100.64285278320312 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[1]);
			Δ.restore();
			Δ.save();
			ᐃΔⵠ(Δ, 0, Ⲇ * 15, Ⲇ * 90, 50 * Ⲇ, ΔⵠⲆⵠⵠ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ]);
			ᐃΔⵠ(Δ, 0, ⵠΔⲆⲆΔ * Ⲇ, 90 * Ⲇ, 50 * Ⲇ, ⵠᐃⲆⲆΔ * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ]);
			Δ.globalCompositeOperation = ᐃ[500];
			ⵠΔᐃ(Δ, Ⲇ * 25, 40 * Ⲇ, ⵠΔΔᐃᐃ * Ⲇ);
			Δ.fill();
			ⵠΔᐃ(Δ, Ⲇ * 65, 40 * Ⲇ, 10 * Ⲇ);
			Δ.fill();
			Δ.restore()
		}
		return ᐃⵠ
	}

	function ⵠΔΔΔᐃⵠᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 120 * Ⲇ;
		ᐃⵠ.height = 320 * Ⲇ;
		Δ.translate(Ⲇ * -60, Ⲇ * -ⵠⵠΔⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(188.5 * Ⲇ, 3.953125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 188.5, Ⲇ * 171.453125, 188.5 * Ⲇ, Ⲇ * 171.453125, 188.5 * Ⲇ, 338.953125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 162.5, 268.953125 * Ⲇ, Ⲇ * 145.5, 265.953125 * Ⲇ, 116.5 * Ⲇ, Ⲇ * 244.953125);
		Δ.bezierCurveTo(Ⲇ * 67.5, Ⲇ * 204.953125, Ⲇ * 87.5, Ⲇ * 160.953125, 113.5 * Ⲇ, Ⲇ * 125.953125);
		Δ.bezierCurveTo(Ⲇ * 141.5, Ⲇ * 90.953125, 176.5 * Ⲇ, 56.953125 * Ⲇ, 188.5 * Ⲇ, 3.953125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		return ᐃⵠ
	}

	function ⵠⲆⲆⵠΔᐃΔⵠᐃ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		if (ᐃⲆ == Δⵠⵠ) {
			ᐃⵠ.width = 543 * Ⲇ;
			ᐃⵠ.height = 393 * Ⲇ;
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(196.23297119140625 * Ⲇ, 77.8948974609375 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 276.23297119140625, Ⲇ * 69.8948974609375, Ⲇ * 360.23297119140625, 87.8948974609375 * Ⲇ, 431.23297119140625 * Ⲇ, 121.8948974609375 * Ⲇ);
			Δ.bezierCurveTo(474.23297119140625 * Ⲇ, 146.8948974609375 * Ⲇ, 463.23297119140625 * Ⲇ, 184.8948974609375 * Ⲇ, 437.23297119140625 * Ⲇ, 235.8948974609375 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 413.23297119140625, Ⲇ * 277.8948974609375, Ⲇ * 383.23297119140625, 289.8948974609375 * Ⲇ, 303.23297119140625 * Ⲇ, 289.8948974609375 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 178.23297119140625, Ⲇ * 292.8948974609375, 127.23297119140625 * Ⲇ, 301.8948974609375 * Ⲇ, 92.23297119140625 * Ⲇ, 268.8948974609375 * Ⲇ);
			Δ.bezierCurveTo(55.23297119140625 * Ⲇ, Ⲇ * 234.8948974609375, 59.23297119140625 * Ⲇ, Ⲇ * 147.8948974609375, Ⲇ * 100.23297119140625, 112.8948974609375 * Ⲇ);
			Δ.bezierCurveTo(133.23297119140625 * Ⲇ, Ⲇ * 83.8948974609375, 167.23297119140625 * Ⲇ, 82.8948974609375 * Ⲇ, Ⲇ * 196.23297119140625, Ⲇ * 77.8948974609375);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[0])
		} else ⵠᐃᐃ == ᐃⲆ ? (ᐃⵠ.width = Ⲇ * 543, ᐃⵠ.height = Ⲇ * 470, Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 285.23297119140625, 51.803985595703125 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 408.23297119140625, 57.803985595703125 * Ⲇ, Ⲇ * 463.23297119140625, 107.80398559570312 * Ⲇ, Ⲇ * 480.23297119140625, 183.80398559570312 * Ⲇ), Δ.bezierCurveTo(500.23297119140625 * Ⲇ, 282.8039855957031 * Ⲇ, Ⲇ * 473.23297119140625, 351.8039855957031 * Ⲇ, 373.23297119140625 * Ⲇ, Ⲇ * 390.8039855957031), Δ.bezierCurveTo(286.23297119140625 * Ⲇ, 420.8039855957031 * Ⲇ, Ⲇ * 173.23297119140625, 396.8039855957031 * Ⲇ, 86.23297119140625 * Ⲇ, Ⲇ * 331.8039855957031), Δ.bezierCurveTo(13.23297119140625 * Ⲇ, Ⲇ * 267.8039855957031, Ⲇ * 19.23297119140625, Ⲇ * 79.80398559570312, Ⲇ * 143.23297119140625, 50.803985595703125 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 175.23297119140625, 41.803985595703125 * Ⲇ, 263.23297119140625 * Ⲇ, 51.803985595703125 * Ⲇ, 285.23297119140625 * Ⲇ, Ⲇ * 51.803985595703125), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0])) : (ᐃⵠ.width = Ⲇ * 543, ᐃⵠ.height = Ⲇ * 470, Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(492.23297119140625 * Ⲇ, Ⲇ * 170.0767059326172), Δ.bezierCurveTo(493.23297119140625 * Ⲇ, 300.16761779785156 * Ⲇ, Ⲇ * 411.23297119140625, Ⲇ * 382.16761779785156, Ⲇ * 321.23297119140625, 419.16761779785156 * Ⲇ), Δ.bezierCurveTo(251.23297119140625 * Ⲇ, 444.16761779785156 * Ⲇ, 125.23297119140625 * Ⲇ, Ⲇ * 422.16761779785156, Ⲇ * 63.23297119140625, 347.16761779785156 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 22.23297119140625, 282.16761779785156 * Ⲇ, 53.23297119140625 * Ⲇ, 152.16761779785156 * Ⲇ, 179.23297119140625 * Ⲇ, 79.16761779785156 * Ⲇ), Δ.bezierCurveTo(237.23297119140625 * Ⲇ, Ⲇ * 46.16761779785156, Ⲇ * 326.23297119140625, Ⲇ * 27.167617797851562, Ⲇ * 409.23297119140625, 50.16761779785156 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 470.23297119140625, 66.16761779785156 * Ⲇ, 493.23297119140625 * Ⲇ, 104.16761779785156 * Ⲇ, Ⲇ * 492.23297119140625, Ⲇ * 170.0767059326172), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]));
		return ᐃⵠ
	}

	function ⵠᐃⲆΔΔⲆΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 450;
		ᐃⵠ.height = Ⲇ * 260;
		Δ.translate(Ⲇ * ΔⵠⲆⵠⵠ, Ⲇ * 10);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(20 * Ⲇ, Ⲇ * ΔⵠΔΔΔ);
		ᐃΔⵠ(Δ, 0, ᐃⲆΔ, Ⲇ * 400, Ⲇ * 220, 30 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		Δ.globalAlpha = 1;
		Δ.translate(Ⲇ * -ⲆⵠΔⵠⵠ, Ⲇ * -20);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ΔⵠⵠᐃⲆ, Ⲇ * ᐃᐃᐃᐃ);
		Δ.bezierCurveTo(Ⲇ * 381, Ⲇ * ⵠᐃᐃⲆ, 197 * Ⲇ, 4.5 * Ⲇ, Ⲇ * 385, 4 * Ⲇ);
		Δ.bezierCurveTo(397 * Ⲇ, Ⲇ * 4, Ⲇ * 401, Ⲇ * ΔΔᐃⵠΔ, 399 * Ⲇ, 23 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 367, Ⲇ * 27, Ⲇ * 367, Ⲇ * 27, 335 * Ⲇ, Ⲇ * 31);
		Δ.bezierCurveTo(366.5 * Ⲇ, Ⲇ * 33.5, 366.5 * Ⲇ, Ⲇ * 33.5, Ⲇ * 398, 36 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 398, 41.5 * Ⲇ, 398 * Ⲇ, 41.5 * Ⲇ, Ⲇ * 398, Ⲇ * 47);
		Δ.bezierCurveTo(398 * Ⲇ, Ⲇ * 56, Ⲇ * 399, Ⲇ * 56, 386 * Ⲇ, 56 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 200.5, 56.5 * Ⲇ, 200.5 * Ⲇ, 56.5 * Ⲇ, ⲆⲆⲆΔⵠ * Ⲇ, Ⲇ * 57);
		Δ.bezierCurveTo(2 * Ⲇ, Ⲇ * 55, Ⲇ * 4, Ⲇ * 52, Ⲇ * ΔΔΔⵠ, 43 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 4, Ⲇ * 30.5, Ⲇ * 4, Ⲇ * 30.5, 4 * Ⲇ, Ⲇ * 18);
		Δ.bezierCurveTo(Ⲇ * ᐃⵠΔⲆΔΔⵠ, Ⲇ * 18.5, Ⲇ * 16, 18.5 * Ⲇ, Ⲇ * 28, Ⲇ * 19);
		Δ.bezierCurveTo(Ⲇ * 18.5, ⵠⲆⲆΔΔ * Ⲇ, 18.5 * Ⲇ, 12 * Ⲇ, ⵠⲆⲆΔᐃΔᐃ * Ⲇ, ⲆΔⲆᐃᐃ * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃⲆ], Δⵠ[Δⵠᐃ], ⵠⵠΔⵠΔⲆᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ΔΔⵠΔⵠ, 70 * Ⲇ);
		Δ.bezierCurveTo(5 * Ⲇ, Ⲇ * 58, ΔΔⵠⲆΔ * Ⲇ, Ⲇ * 55, Ⲇ * ᐃΔⵠΔΔΔΔ, Ⲇ * 57);
		Δ.bezierCurveTo(203 * Ⲇ, Ⲇ * 57, 203 * Ⲇ, Ⲇ * 57, 389 * Ⲇ, Ⲇ * 57);
		Δ.bezierCurveTo(400 * Ⲇ, Ⲇ * 57, 400 * Ⲇ, 59 * Ⲇ, 400 * Ⲇ, 69 * Ⲇ);
		Δ.bezierCurveTo(400.5 * Ⲇ, 83.5 * Ⲇ, 400.5 * Ⲇ, 83.5 * Ⲇ, 401 * Ⲇ, Ⲇ * 98);
		Δ.bezierCurveTo(Ⲇ * 402, Ⲇ * 108, Ⲇ * 401, 108 * Ⲇ, Ⲇ * 388, 108 * Ⲇ);
		Δ.bezierCurveTo(201.5 * Ⲇ, 108 * Ⲇ, 201.5 * Ⲇ, Ⲇ * 108, Ⲇ * ⵠⵠⲆΔⵠ, 108 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ᐃⵠᐃᐃ, 106 * Ⲇ, Δᐃᐃⵠ * Ⲇ, Ⲇ * 106, ⲆⵠⲆΔᐃ * Ⲇ, Ⲇ * 87);
		Δ.bezierCurveTo(Ⲇ * 33, 84.5 * Ⲇ, Ⲇ * 33, 84.5 * Ⲇ, Ⲇ * 61, 82 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 33.5, 76.5 * Ⲇ, Ⲇ * 33.5, 76.5 * Ⲇ, Ⲇ * ᐃᐃⲆⲆⲆ, 71 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[Δⵠᐃ], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ⵠⲆΔⲆⲆⵠⵠ * Ⲇ, 158 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 2, Ⲇ * 159, Ⲇ * 4, Ⲇ * 156, Ⲇ * ⵠⲆⲆⵠ, 118 * Ⲇ);
		Δ.bezierCurveTo(ⵠΔᐃⲆ * Ⲇ, 110 * Ⲇ, 6 * Ⲇ, 107 * Ⲇ, Ⲇ * 26, Ⲇ * 109);
		Δ.bezierCurveTo(206.5 * Ⲇ, 109 * Ⲇ, Ⲇ * 206.5, Ⲇ * 109, 387 * Ⲇ, 109 * Ⲇ);
		Δ.bezierCurveTo(400 * Ⲇ, 108 * Ⲇ, 400 * Ⲇ, 108 * Ⲇ, 398 * Ⲇ, Ⲇ * 127);
		Δ.bezierCurveTo(Ⲇ * 384.5, Ⲇ * 130, Ⲇ * 384.5, Ⲇ * 130, Ⲇ * 371, Ⲇ * 133);
		Δ.bezierCurveTo(Ⲇ * 385.5, Ⲇ * 138, 385.5 * Ⲇ, 138 * Ⲇ, 400 * Ⲇ, 143 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 402, Ⲇ * 156, Ⲇ * 402, Ⲇ * 162, 385 * Ⲇ, Ⲇ * 160);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⵠᐃ], Δⵠ[1], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(4 * Ⲇ, 183 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 1, 163 * Ⲇ, Ⲇ * ⵠΔⲆᐃⲆ, 158 * Ⲇ, 28 * Ⲇ, 161 * Ⲇ);
		Δ.bezierCurveTo(207.5 * Ⲇ, 161 * Ⲇ, 207.5 * Ⲇ, Ⲇ * 161, Ⲇ * 387, Ⲇ * 161);
		Δ.bezierCurveTo(401 * Ⲇ, 159 * Ⲇ, Ⲇ * 400, 164 * Ⲇ, 400 * Ⲇ, 177 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 364.5, 184 * Ⲇ, Ⲇ * 364.5, Ⲇ * 184, Ⲇ * 329, 191 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 364.5, Ⲇ * 192.5, 364.5 * Ⲇ, 192.5 * Ⲇ, 400 * Ⲇ, Ⲇ * 194);
		Δ.bezierCurveTo(Ⲇ * 403, 209 * Ⲇ, Ⲇ * 401, 214 * Ⲇ, Ⲇ * 385, 213 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 201.5, Ⲇ * 213, 201.5 * Ⲇ, Ⲇ * 213, Ⲇ * 18, Ⲇ * 213);
		Δ.bezierCurveTo(Ⲇ * ᐃΔΔΔ, 213 * Ⲇ, 2 * Ⲇ, Ⲇ * 213, Ⲇ * ⵠΔⲆᐃⲆ, 198 * Ⲇ);
		Δ.bezierCurveTo(12.5 * Ⲇ, Ⲇ * 193, 12.5 * Ⲇ, Ⲇ * 193, 21 * Ⲇ, Ⲇ * 188);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[1], Ⲇ * 12);
		ⵠΔᐃ(Δ, Ⲇ * 41, 30 * Ⲇ, Ⲇ * 14.7648230602334);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[1], Ⲇ * 12);
		ⵠΔᐃ(Δ, 369 * Ⲇ, Ⲇ * 30, Ⲇ * 15.556349186104045);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[1], Ⲇ * 12);
		ⵠΔᐃ(Δ, Ⲇ * 364, Ⲇ * 190, 15.620499351813308 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆᐃ], Δⵠ[1], 12 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 41, Ⲇ * 186, Ⲇ * 15.556349186104045);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⲆ], Δⵠ[1], 12 * Ⲇ);
		return ᐃⵠ
	}

	function ⵠᐃᐃⵠᐃᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 144 * Ⲇ;
		ᐃⵠ.height = 280 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⲆⵠ;
		Δ.translate(Ⲇ * ⵠᐃⵠΔᐃ, 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 62, 103.79999542236328 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 62.5, 148.79999542236328 * Ⲇ, Ⲇ * 62.5, 148.79999542236328 * Ⲇ, 63 * Ⲇ, 193.79999542236328 * Ⲇ);
		Δ.bezierCurveTo(63 * Ⲇ, 219.79999542236328 * Ⲇ, 47 * Ⲇ, Ⲇ * 217.79999542236328, 51 * Ⲇ, Ⲇ * 230.79999542236328);
		Δ.bezierCurveTo(62 * Ⲇ, Ⲇ * 255.79999542236328, 74 * Ⲇ, 260.7999954223633 * Ⲇ, 72 * Ⲇ, 248.79999542236328 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 65, 226.79999542236328 * Ⲇ, 71 * Ⲇ, Ⲇ * 229.79999542236328, Ⲇ * 76, 225.79999542236328 * Ⲇ);
		Δ.bezierCurveTo(90 * Ⲇ, 224.79999542236328 * Ⲇ, 89 * Ⲇ, Ⲇ * 232.79999542236328, 90 * Ⲇ, Ⲇ * 243.79999542236328);
		Δ.bezierCurveTo(95 * Ⲇ, Ⲇ * 253.79999542236328, 99 * Ⲇ, Ⲇ * 249.79999542236328, 100 * Ⲇ, 229.79999542236328 * Ⲇ);
		Δ.bezierCurveTo(102 * Ⲇ, 213.79999542236328 * Ⲇ, Ⲇ * 98, Ⲇ * 214.79999542236328, 90 * Ⲇ, 205.79999542236328 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 82, 201.79999542236328 * Ⲇ, Ⲇ * 82, 185.79999542236328 * Ⲇ, 82 * Ⲇ, 114.79999542236328 * Ⲇ);
		Δ.bezierCurveTo(80 * Ⲇ, 73 * Ⲇ, Ⲇ * 82, Ⲇ * 68, 93 * Ⲇ, Ⲇ * 53);
		Δ.bezierCurveTo(Ⲇ * 98, 37 * Ⲇ, 65 * Ⲇ, ⵠⵠⲆⵠⵠ * Ⲇ, Ⲇ * 74, Ⲇ * 33);
		Δ.bezierCurveTo(Ⲇ * 82, Ⲇ * 56, 77 * Ⲇ, Ⲇ * 52, Ⲇ * 69, 54 * Ⲇ);
		Δ.bezierCurveTo(55 * Ⲇ, 57 * Ⲇ, 57 * Ⲇ, 53 * Ⲇ, Ⲇ * 54, Ⲇ * 39);
		Δ.bezierCurveTo(46 * Ⲇ, 20 * Ⲇ, 37 * Ⲇ, 61 * Ⲇ, Ⲇ * 50, Ⲇ * 68);
		Δ.bezierCurveTo(Ⲇ * 65, 81 * Ⲇ, Ⲇ * 60, 89 * Ⲇ, Ⲇ * 62, 102 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ⲆⲆⲆᐃ;
		Δ.translate(Ⲇ * -5, Ⲇ * -ⵠᐃⲆᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 62, Ⲇ * 103.79999542236328);
		Δ.bezierCurveTo(62.5 * Ⲇ, Ⲇ * 148.79999542236328, 62.5 * Ⲇ, Ⲇ * 148.79999542236328, Ⲇ * 63, Ⲇ * 193.79999542236328);
		Δ.bezierCurveTo(Ⲇ * 63, 219.79999542236328 * Ⲇ, Ⲇ * 47, 217.79999542236328 * Ⲇ, Ⲇ * 51, Ⲇ * 230.79999542236328);
		Δ.bezierCurveTo(Ⲇ * 62, 255.79999542236328 * Ⲇ, Ⲇ * 74, Ⲇ * 260.7999954223633, Ⲇ * 72, 248.79999542236328 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 65, 226.79999542236328 * Ⲇ, 71 * Ⲇ, 229.79999542236328 * Ⲇ, 76 * Ⲇ, Ⲇ * 225.79999542236328);
		Δ.bezierCurveTo(90 * Ⲇ, 224.79999542236328 * Ⲇ, 89 * Ⲇ, 232.79999542236328 * Ⲇ, Ⲇ * 90, Ⲇ * 243.79999542236328);
		Δ.bezierCurveTo(Ⲇ * 95, Ⲇ * 253.79999542236328, Ⲇ * 99, Ⲇ * 249.79999542236328, Ⲇ * 100, Ⲇ * 229.79999542236328);
		Δ.bezierCurveTo(102 * Ⲇ, Ⲇ * 213.79999542236328, Ⲇ * 98, Ⲇ * 214.79999542236328, 90 * Ⲇ, Ⲇ * 205.79999542236328);
		Δ.bezierCurveTo(Ⲇ * 82, Ⲇ * 201.79999542236328, Ⲇ * 82, 185.79999542236328 * Ⲇ, 82 * Ⲇ, 114.79999542236328 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 80, 73 * Ⲇ, Ⲇ * 82, 68 * Ⲇ, 93 * Ⲇ, Ⲇ * 53);
		Δ.bezierCurveTo(Ⲇ * 98, 37 * Ⲇ, 65 * Ⲇ, 14 * Ⲇ, Ⲇ * 74, 33 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 82, Ⲇ * 56, Ⲇ * 77, Ⲇ * 52, Ⲇ * 69, 54 * Ⲇ);
		Δ.bezierCurveTo(55 * Ⲇ, Ⲇ * 57, 57 * Ⲇ, Ⲇ * 53, 54 * Ⲇ, 39 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 46, Ⲇ * 20, Ⲇ * 37, 61 * Ⲇ, 50 * Ⲇ, 68 * Ⲇ);
		Δ.bezierCurveTo(65 * Ⲇ, 81 * Ⲇ, Ⲇ * 60, Ⲇ * 89, Ⲇ * 62, 102 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[ΔⵠⲆⲆ], Ⲇ * 6);
		return ᐃⵠ
	}

	function ⵠΔⲆⵠᐃⵠᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 400 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 400;
		Δ.globalAlpha = ⵠⲆⵠⲆ;
		Δ.translate(Ⲇ * ⲆⲆⵠΔΔ, Ⲇ * ΔⲆⵠⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(36.5 * Ⲇ, 278.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 67.5, 316.0625 * Ⲇ, 134.5 * Ⲇ, 334.0625 * Ⲇ, Ⲇ * 199.5, 319.0625 * Ⲇ);
		Δ.bezierCurveTo(254.5 * Ⲇ, Ⲇ * 304.0625, Ⲇ * 346.5, Ⲇ * 270.0625, 348.5 * Ⲇ, Ⲇ * 237.0625);
		Δ.bezierCurveTo(Ⲇ * 359.5, 206.0625 * Ⲇ, Ⲇ * 318.5, Ⲇ * 129.0625, Ⲇ * 262.5, Ⲇ * 122.0625);
		Δ.bezierCurveTo(Ⲇ * 213.5, 115.0625 * Ⲇ, Ⲇ * 166.5, 133.0625 * Ⲇ, 104.5 * Ⲇ, Ⲇ * 166.0625);
		Δ.bezierCurveTo(Ⲇ * 54.5, 194.0625 * Ⲇ, 23.5 * Ⲇ, 241.0625 * Ⲇ, Ⲇ * 36.5, 277.0625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		Δ.translate(-20 * Ⲇ, -ᐃᐃⵠⲆᐃᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(36.5 * Ⲇ, Ⲇ * 278.0625);
		Δ.bezierCurveTo(67.5 * Ⲇ, Ⲇ * 316.0625, 134.5 * Ⲇ, 334.0625 * Ⲇ, Ⲇ * 199.5, 319.0625 * Ⲇ);
		Δ.bezierCurveTo(254.5 * Ⲇ, 304.0625 * Ⲇ, Ⲇ * 346.5, Ⲇ * 270.0625, 348.5 * Ⲇ, Ⲇ * 237.0625);
		Δ.bezierCurveTo(359.5 * Ⲇ, Ⲇ * 206.0625, 318.5 * Ⲇ, Ⲇ * 129.0625, Ⲇ * 262.5, Ⲇ * 122.0625);
		Δ.bezierCurveTo(213.5 * Ⲇ, Ⲇ * 115.0625, 166.5 * Ⲇ, Ⲇ * 133.0625, 104.5 * Ⲇ, 166.0625 * Ⲇ);
		Δ.bezierCurveTo(54.5 * Ⲇ, 194.0625 * Ⲇ, 23.5 * Ⲇ, 241.0625 * Ⲇ, Ⲇ * 36.5, Ⲇ * 277.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠᐃᐃⲆ], Ⲇ * ⲆⵠᐃᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 214.5, Ⲇ * 124.0625);
		Δ.bezierCurveTo(242.5 * Ⲇ, Ⲇ * 125.0625, Ⲇ * 272.5, Ⲇ * 159.0625, Ⲇ * 283.5, Ⲇ * 184.0625);
		Δ.bezierCurveTo(277.5 * Ⲇ, Ⲇ * 161.0625, 233.5 * Ⲇ, Ⲇ * 128.0625, 219.5 * Ⲇ, Ⲇ * 122.0625);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[2], 19 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 157.5, 145.0625 * Ⲇ);
		Δ.bezierCurveTo(176.5 * Ⲇ, 148.0625 * Ⲇ, 205.5 * Ⲇ, Ⲇ * 176.0625, 212.5 * Ⲇ, Ⲇ * 197.0625);
		Δ.bezierCurveTo(Ⲇ * 205.5, 178.0625 * Ⲇ, 177.5 * Ⲇ, Ⲇ * 152.0625, 156.5 * Ⲇ, Ⲇ * 142.0625);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ᐃᐃΔⵠ], Ⲇ * 19);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 103.5, Ⲇ * 169.0625);
		Δ.bezierCurveTo(Ⲇ * 160.5, 166.0625 * Ⲇ, 228.5 * Ⲇ, 312.0625 * Ⲇ, Ⲇ * 162.5, Ⲇ * 323.0625);
		Δ.bezierCurveTo(128.5 * Ⲇ, Ⲇ * 330.0625, 45.5 * Ⲇ, 312.0625 * Ⲇ, 34.5 * Ⲇ, Ⲇ * 268.0625);
		Δ.bezierCurveTo(30.5 * Ⲇ, 238.0625 * Ⲇ, Ⲇ * 44.5, Ⲇ * 222.0625, Ⲇ * 52.5, Ⲇ * 211.0625);
		Δ.bezierCurveTo(Ⲇ * 82.5, Ⲇ * 174.0625, Ⲇ * 104.5, Ⲇ * 166.0625, 119.5 * Ⲇ, Ⲇ * 172.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠⵠᐃⲆ], 19 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 92.5, Ⲇ * 216.0625, Ⲇ * 13.892443989449804);
		ⵠᐃ(Δ, Δⵠ[ΔᐃᐃΔ]);
		ⵠΔᐃ(Δ, 68.5 * Ⲇ, Ⲇ * 227.0625, 8.06225774829855 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔⲆⲆⲆ]);
		ⵠΔᐃ(Δ, 85.5 * Ⲇ, 240.0625 * Ⲇ, Ⲇ * 6.708203932499369);
		ⵠᐃ(Δ, Δⵠ[ΔᐃᐃΔ]);
		ⵠΔᐃ(Δ, Ⲇ * 147.5, 294.0625 * Ⲇ, Ⲇ * 17.46424919657298);
		ⵠᐃ(Δ, Δⵠ[ⵠΔⲆᐃⲆ]);
		ⵠΔᐃ(Δ, Ⲇ * 166.5, 273.0625 * Ⲇ, 6.708203932499369 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃᐃᐃΔ]);
		ⵠΔᐃ(Δ, 114.5 * Ⲇ, 294.0625 * Ⲇ, 12.36931687685298 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[4]);
		ⵠΔᐃ(Δ, 123.5 * Ⲇ, Ⲇ * 220.0625, Ⲇ * 5.830951894845301);
		ⵠᐃ(Δ, Δⵠ[4]);
		ⵠΔᐃ(Δ, 114.5 * Ⲇ, Ⲇ * 259.0625, Ⲇ * 4.123105625617661);
		ⵠᐃ(Δ, Δⵠ[ΔΔᐃⵠΔ]);
		ⵠΔᐃ(Δ, Ⲇ * 63.5, 265.0625 * Ⲇ, 5.385164807134504 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⲆ]);
		ⵠΔᐃ(Δ, Ⲇ * 148.5, Ⲇ * 235.0625, 4.47213595499958 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[4]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 194.5, Ⲇ * 313.0625);
		Δ.bezierCurveTo(222.5 * Ⲇ, 306.0625 * Ⲇ, Ⲇ * 319.5, Ⲇ * 271.0625, Ⲇ * 337.5, 241.0625 * Ⲇ);
		Δ.bezierCurveTo(274.5 * Ⲇ, 270.0625 * Ⲇ, 216.5 * Ⲇ, Ⲇ * 288.0625, Ⲇ * 199.5, 287.0625 * Ⲇ);
		Δ.bezierCurveTo(198.5 * Ⲇ, Ⲇ * 302.0625, 195.5 * Ⲇ, 311.0625 * Ⲇ, Ⲇ * 193.5, Ⲇ * 312.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5]);
		return ᐃⵠ
	}

	function ᐃⵠᐃⲆⲆⵠⵠⵠᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 316 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 365;
		Δ.save();
		Δ.translate(156.07142639160156 * Ⲇ, Ⲇ * 51.81248474121094);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, Ⲇ * -21.5, -34 * Ⲇ, Ⲇ * 43, 68 * Ⲇ, Ⲇ * ⲆΔⵠΔΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆΔⲆΔ], Ⲇ * ⲆⲆⲆΔⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 126.57142639160156, 67.38392639160156 * Ⲇ);
		Δ.bezierCurveTo(126.57142639160156 * Ⲇ, Ⲇ * 57.38392639160156, Ⲇ * 132.57142639160156, Ⲇ * 54.38392639160156, 140.57142639160156 * Ⲇ, Ⲇ * 54.38392639160156);
		Δ.bezierCurveTo(Ⲇ * 177.57142639160156, Ⲇ * 55.38392639160156, 158.07142639160156 * Ⲇ, 54.38392639160156 * Ⲇ, 175.57142639160156 * Ⲇ, Ⲇ * 54.38392639160156);
		Δ.bezierCurveTo(Ⲇ * 185.57142639160156, 56.38392639160156 * Ⲇ, 185.57142639160156 * Ⲇ, Ⲇ * 57.38392639160156, Ⲇ * 184.57142639160156, Ⲇ * 66.38392639160156);
		Δ.bezierCurveTo(184.57142639160156 * Ⲇ, 78.38392639160156 * Ⲇ, Ⲇ * 184.57142639160156, Ⲇ * 89.38392639160156, 184.57142639160156 * Ⲇ, 90.38392639160156 * Ⲇ);
		Δ.bezierCurveTo(177.57142639160156 * Ⲇ, 107.38392639160156 * Ⲇ, Ⲇ * 180.57142639160156, Ⲇ * 112.38392639160156, 189.57142639160156 * Ⲇ, Ⲇ * 116.38392639160156);
		Δ.bezierCurveTo(Ⲇ * 212.57142639160156, 127.38392639160156 * Ⲇ, Ⲇ * 212.57142639160156, 132.38392639160156 * Ⲇ, Ⲇ * 211.57142639160156, Ⲇ * 150.38392639160156);
		Δ.bezierCurveTo(211.57142639160156 * Ⲇ, 227.59821128845215 * Ⲇ, Ⲇ * 211.57142639160156, 227.59821128845215 * Ⲇ, Ⲇ * 211.57142639160156, 304.81249618530273 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 212.57142639160156, Ⲇ * 328.81249618530273, Ⲇ * 209.57142639160156, 330.81249618530273 * Ⲇ, Ⲇ * 188.57142639160156, 333.81249618530273 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 155.07142639160156, Ⲇ * 333.31249618530273, 155.07142639160156 * Ⲇ, Ⲇ * 333.31249618530273, Ⲇ * 121.57142639160156, 332.81249618530273 * Ⲇ);
		Δ.bezierCurveTo(104.57142639160156 * Ⲇ, Ⲇ * 327.81249618530273, Ⲇ * 105.57142639160156, Ⲇ * 328.81249618530273, Ⲇ * 104.57142639160156, 312.81249618530273 * Ⲇ);
		Δ.bezierCurveTo(104.57142639160156 * Ⲇ, Ⲇ * 228.16963958740234, 104.57142639160156 * Ⲇ, 228.16963958740234 * Ⲇ, 104.57142639160156 * Ⲇ, 143.52678298950195 * Ⲇ);
		Δ.bezierCurveTo(106.57142639160156 * Ⲇ, Ⲇ * 124.52678298950195, 110.57142639160156 * Ⲇ, 123.52678298950195 * Ⲇ, 123.57142639160156 * Ⲇ, Ⲇ * 116.52678298950195);
		Δ.bezierCurveTo(136.57142639160156 * Ⲇ, Ⲇ * 110.52678298950195, Ⲇ * 130.57142639160156, 106.52678298950195 * Ⲇ, Ⲇ * 126.57142639160156, 98.52678298950195 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ᐃᐃⲆⵠᐃ], Ⲇ * ⵠⵠΔΔΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 125.57142639160156, Ⲇ * 156.66963958740234);
		Δ.bezierCurveTo(Ⲇ * 125.57142639160156, Ⲇ * 182.66963958740234, Ⲇ * 125.57142639160156, 182.66963958740234 * Ⲇ, 125.57142639160156 * Ⲇ, Ⲇ * 208.66963958740234);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ᐃⲆΔⵠⵠ], Ⲇ * 15);
		return ᐃⵠ
	}

	function ΔⲆᐃΔᐃⲆⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 170;
		ᐃⵠ.height = Ⲇ * 200;
		Δ.translate(5 * Ⲇ, 15 * Ⲇ);
		if (ᐃⲆ == ⲆⲆᐃⵠ) {
			Δ.translate(ⵠⵠΔΔ, Ⲇ * -5);
			ⵠΔᐃ(Δ, Ⲇ * 77.00003051757812, 104.49432373046875 * Ⲇ, 71.84010022264724 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠⲆ], Δⵠ[ⲆⵠⲆΔᐃ], ⲆⲆⲆⲆᐃ * Ⲇ);
			ⵠΔᐃ(Δ, Ⲇ * 77.00003051757812, 104.22160339355469 * Ⲇ, Ⲇ * 61.554853586049575);
			ⵠᐃ(Δ, Δⵠ[ΔΔΔᐃ], Δⵠ[ΔΔⵠΔⵠ], Ⲇ * ⲆⵠΔⵠⵠ);
			Δ.save();
			Δ.translate(Ⲇ * 77.00003051757812, 31.267044067382812 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -6, -12.5 * Ⲇ, Ⲇ * 12, Ⲇ * 25, Ⲇ * 10);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ΔΔⵠ], Δⵠ[ⵠᐃⵠΔᐃ], ⲆⲆⲆΔⲆ * Ⲇ);
			Δ.save();
			Δ.translate(77.00003051757812 * Ⲇ, Ⲇ * 13.267044067382812);
			ᐃΔⵠ(Δ, -15 * Ⲇ, Ⲇ * -10.5, 30 * Ⲇ, Ⲇ * 21, Ⲇ * 10);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[5], ᐃᐃⲆⵠΔ * Ⲇ)
		}
		ⵠΔᐃ(Δ, Ⲇ * 77.00003051757812, Ⲇ * 104.49432373046875, Ⲇ * 71.84010022264724);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔⲆⵠΔ], Ⲇ * 7);
		ⵠΔᐃ(Δ, Ⲇ * 77.00003051757812, 104.22160339355469 * Ⲇ, Ⲇ * 61.554853586049575);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃⲆⵠᐃ], Ⲇ * ⲆᐃᐃΔΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 18.000030517578125, Ⲇ * 105.85795593261719);
		Δ.bezierCurveTo(134.00003051757812 * Ⲇ, 104.85795593261719 * Ⲇ, 77.00003051757812 * Ⲇ, 104.85795593261719 * Ⲇ, 136.00003051757812 * Ⲇ, 103.85795593261719 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃⵠΔⲆ], 8 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 77.00003051757812, Ⲇ * 104.6761474609375, 32.55764119219941 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[Δⵠᐃ], Δⵠ[ΔΔᐃⲆⵠ], ⵠⵠᐃᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 78.00003051757812, 112.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(78.00003051757812 * Ⲇ, Ⲇ * 87.03977966308594, Ⲇ * 78.00003051757812, Ⲇ * 87.03977966308594, 78.00003051757812 * Ⲇ, 62.03977966308594 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⲆ], Δⵠ[2], Ⲇ * ᐃΔᐃⵠⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 78.00003051757812, 48.03977966308594 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 82.00003051757812, 55.53977966308594 * Ⲇ, 82.00003051757812 * Ⲇ, 55.53977966308594 * Ⲇ, 86.00003051757812 * Ⲇ, Ⲇ * 63.03977966308594);
		Δ.bezierCurveTo(Ⲇ * 78.00003051757812, 63.03977966308594 * Ⲇ, 78.00003051757812 * Ⲇ, Ⲇ * 63.03977966308594, 70.00003051757812 * Ⲇ, 63.03977966308594 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆΔΔⲆ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(80.00003051757812 * Ⲇ, Ⲇ * 111.6761474609375);
		Δ.bezierCurveTo(Ⲇ * 95.00003051757812, Ⲇ * 97.1761474609375, 95.00003051757812 * Ⲇ, 97.1761474609375 * Ⲇ, Ⲇ * 110.00003051757812, Ⲇ * 82.6761474609375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃΔ], Δⵠ[ᐃᐃⵠⵠ], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(107.00003051757812 * Ⲇ, 76.6761474609375 * Ⲇ);
		Δ.bezierCurveTo(111.50003051757812 * Ⲇ, Ⲇ * 82.6761474609375, 111.50003051757812 * Ⲇ, Ⲇ * 82.6761474609375, Ⲇ * 116.00003051757812, Ⲇ * 88.6761474609375);
		Δ.bezierCurveTo(118.50003051757812 * Ⲇ, 81.6761474609375 * Ⲇ, 118.50003051757812 * Ⲇ, 81.6761474609375 * Ⲇ, 121.00003051757812 * Ⲇ, Ⲇ * 74.6761474609375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[2], Ⲇ * 4);
		ⵠΔᐃ(Δ, 77.00003051757812 * Ⲇ, Ⲇ * 105.03977966308594, 15.556349186104045 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[2], Ⲇ * 4);
		Δ.save();
		Δ.translate(77.00003051757812 * Ⲇ, 31.267044067382812 * Ⲇ);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, Ⲇ * -ᐃᐃⲆⲆⲆ, Ⲇ * -12.5, Ⲇ * 12, Ⲇ * 25, Ⲇ * ΔΔᐃⵠⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔΔΔᐃ], Δⵠ[ⵠⲆΔᐃ], Ⲇ * 7);
		Δ.save();
		Δ.translate(77.00003051757812 * Ⲇ, 13.267044067382812 * Ⲇ);
		Δ.rotate(ᐃⲆᐃ);
		ᐃΔⵠ(Δ, Ⲇ * -15, -10.5 * Ⲇ, Ⲇ * 30, Ⲇ * 21, ΔΔⵠⲆⵠ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[2], 7 * Ⲇ);
		return ᐃⵠ
	}

	function ᐃΔⲆΔᐃᐃᐃᐃⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 400;
		ᐃⵠ.height = Ⲇ * 400;
		Δ.translate(ⲆᐃΔⵠ, Ⲇ * 15);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ΔᐃⵠⲆ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(102 * Ⲇ, 154 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 108, 216.5 * Ⲇ, Ⲇ * 108, Ⲇ * 216.5, 114 * Ⲇ, 279 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 124, 300 * Ⲇ, 237 * Ⲇ, Ⲇ * 299, 251 * Ⲇ, Ⲇ * 279);
		Δ.bezierCurveTo(257 * Ⲇ, Ⲇ * 217, 257 * Ⲇ, Ⲇ * 217, 263 * Ⲇ, Ⲇ * 155);
		Δ.bezierCurveTo(248 * Ⲇ, 194 * Ⲇ, 91 * Ⲇ, Ⲇ * 180, 103 * Ⲇ, 156 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(102 * Ⲇ, 154 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 106, Ⲇ * 53, Ⲇ * ⲆⲆⲆⵠᐃ, Ⲇ * 53, Ⲇ * 263, 154 * Ⲇ);
		Δ.bezierCurveTo(248 * Ⲇ, 38 * Ⲇ, 99 * Ⲇ, 69 * Ⲇ, Ⲇ * 103, Ⲇ * 154);
		Δ.closePath();
		ⵠᐃ(Δ, ΔΔᐃⲆᐃ, Δⵠ[ⲆⲆᐃⲆ], ᐃⲆⵠⵠⲆΔⲆ * Ⲇ);
		Δ.translate(Ⲇⵠⵠᐃ, -ΔΔⵠⵠ * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 103, Ⲇ * 154);
		Δ.bezierCurveTo(Ⲇ * 98, 119 * Ⲇ, 264 * Ⲇ, 119 * Ⲇ, Ⲇ * 264, Ⲇ * 154);
		Δ.bezierCurveTo(271 * Ⲇ, 189 * Ⲇ, 94 * Ⲇ, Ⲇ * 188, Ⲇ * 103, Ⲇ * 154);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆᐃᐃⲆ], Ⲇ * ΔΔΔΔᐃΔΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(102 * Ⲇ, 154 * Ⲇ);
		Δ.bezierCurveTo(108 * Ⲇ, 216.5 * Ⲇ, 108 * Ⲇ, 216.5 * Ⲇ, 114 * Ⲇ, Ⲇ * 279);
		Δ.bezierCurveTo(124 * Ⲇ, 300 * Ⲇ, 237 * Ⲇ, Ⲇ * 299, 251 * Ⲇ, Ⲇ * 279);
		Δ.bezierCurveTo(257 * Ⲇ, 217 * Ⲇ, Ⲇ * 257, 217 * Ⲇ, 263 * Ⲇ, Ⲇ * 155);
		Δ.bezierCurveTo(Ⲇ * 248, Ⲇ * 194, 91 * Ⲇ, Ⲇ * 180, 103 * Ⲇ, Ⲇ * 156);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃⲆⵠᐃ], ΔΔᐃᐃⲆΔⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 182, 185 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 182.5, Ⲇ * 237.5, Ⲇ * 182.5, Ⲇ * 237.5, 183 * Ⲇ, 290 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃΔᐃⲆⵠ, Δⵠ[2], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 222, 287 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 226, 233.5 * Ⲇ, 226 * Ⲇ, 233.5 * Ⲇ, 230 * Ⲇ, Ⲇ * 180);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆⲆⲆᐃ, Δⵠ[ΔΔᐃⲆⵠ], ᐃⲆⲆΔⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(145 * Ⲇ, 290 * Ⲇ);
		Δ.bezierCurveTo(140.5 * Ⲇ, 237 * Ⲇ, Ⲇ * 140.5, 237 * Ⲇ, Ⲇ * 136, 184 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃⵠΔⲆ], 11 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(105 * Ⲇ, 184 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 148, Ⲇ * 205, Ⲇ * 231, Ⲇ * 202, Ⲇ * 260, 182 * Ⲇ);
		Δ.bezierCurveTo(259 * Ⲇ, 195.5 * Ⲇ, 259 * Ⲇ, Ⲇ * 195.5, Ⲇ * 258, 209 * Ⲇ);
		Δ.bezierCurveTo(217 * Ⲇ, 218 * Ⲇ, 163 * Ⲇ, Ⲇ * 225, Ⲇ * 108, 207 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[2], ⲆⲆⲆⲆᐃⲆΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 251, 276 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 251.5, Ⲇ * 267.5, 251.5 * Ⲇ, 267.5 * Ⲇ, 252 * Ⲇ, Ⲇ * 259);
		Δ.bezierCurveTo(212 * Ⲇ, 272 * Ⲇ, Ⲇ * 156, 275 * Ⲇ, Ⲇ * 112, Ⲇ * 260);
		Δ.bezierCurveTo(Ⲇ * 112.5, 269 * Ⲇ, Ⲇ * 112.5, Ⲇ * 269, Ⲇ * 113, 278 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 155, Ⲇ * 306, Ⲇ * 253, Ⲇ * 286, 250 * Ⲇ, 276 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[2], ΔΔⵠⵠΔᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 102, 154 * Ⲇ);
		Δ.bezierCurveTo(106 * Ⲇ, Ⲇ * 53, Ⲇ * 255, Ⲇ * 53, Ⲇ * 263, 154 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 248, 38 * Ⲇ, 99 * Ⲇ, Ⲇ * 69, 103 * Ⲇ, Ⲇ * 154);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆᐃΔᐃ, Δⵠ[2], Ⲇ * ΔⲆⲆᐃΔᐃΔ);
		return ᐃⵠ
	}

	function ⵠᐃⵠᐃⲆᐃⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 46 * Ⲇ;
		ᐃⵠ.height = 140 * Ⲇ;
		Δ.scale(-1 * Ⲇ, 1 * Ⲇ);
		Δ.translate(-50 * Ⲇ, 40 * Ⲇ);
		Δ.translate(Ⲇ * -ᐃⵠⲆᐃᐃᐃᐃ, Ⲇⵠᐃ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ΔⲆⵠⲆ;
		Δ.translate(ⲆΔⲆᐃⵠ * Ⲇ, 0);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(22.599990844726562 * Ⲇ, Ⲇ * 85.94999694824219);
		Δ.bezierCurveTo(Ⲇ * 17.599990844726562, Ⲇ * 83.94999694824219, Ⲇ * 17.599990844726562, Ⲇ * 83.94999694824219, 12.599990844726562 * Ⲇ, 81.94999694824219 * Ⲇ);
		Δ.bezierCurveTo(19.599990844726562 * Ⲇ, Ⲇ * 73.94999694824219, 2.5999908447265625 * Ⲇ, Ⲇ * 22.949996948242188, 33.59999084472656 * Ⲇ, Ⲇ * 7.9499969482421875);
		Δ.bezierCurveTo(27.599990844726562 * Ⲇ, 28.949996948242188 * Ⲇ, Ⲇ * 33.59999084472656, Ⲇ * 26.949996948242188, Ⲇ * 35.59999084472656, 32.94999694824219 * Ⲇ);
		Δ.bezierCurveTo(25.599990844726562 * Ⲇ, 59.94999694824219 * Ⲇ, Ⲇ * 26.599990844726562, 69.94999694824219 * Ⲇ, 29.599990844726562 * Ⲇ, Ⲇ * 82.94999694824219);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(Ⲇ * -ⲆⲆⵠ, 0);
		Δ.moveTo(Ⲇ * 17.599990844726562, 89.75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 24.599990844726562, Ⲇ * 99.75, Ⲇ * 24.599990844726562, Ⲇ * 101.75, 20.599990844726562 * Ⲇ, Ⲇ * 111.75);
		Δ.bezierCurveTo(Ⲇ * 28.599990844726562, 110.75 * Ⲇ, 26.599990844726562 * Ⲇ, Ⲇ * 112.75, Ⲇ * 28.599990844726562, Ⲇ * 111.75);
		Δ.bezierCurveTo(30.599990844726562 * Ⲇ, 96.75 * Ⲇ, 32.59999084472656 * Ⲇ, 96.75 * Ⲇ, 30.599990844726562 * Ⲇ, 87.75 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(Ⲇ * 1, 0);
		Δ.moveTo(7.5999908447265625 * Ⲇ, Ⲇ * 86.34999084472656);
		Δ.bezierCurveTo(Ⲇ * 12.599990844726562, Ⲇ * 85.34999084472656, 14.599990844726562 * Ⲇ, 84.34999084472656 * Ⲇ, Ⲇ * 13.599990844726562, Ⲇ * 84.34999084472656);
		Δ.bezierCurveTo(Ⲇ * 21.599990844726562, 83.34999084472656 * Ⲇ, Ⲇ * 21.599990844726562, 83.34999084472656 * Ⲇ, 29.599990844726562 * Ⲇ, Ⲇ * 82.34999084472656);
		Δ.bezierCurveTo(Ⲇ * 33.59999084472656, 85.84999084472656 * Ⲇ, Ⲇ * 33.59999084472656, 85.84999084472656 * Ⲇ, Ⲇ * 37.59999084472656, 89.34999084472656 * Ⲇ);
		Δ.bezierCurveTo(34.09999084472656 * Ⲇ, Ⲇ * 91.84999084472656, 34.09999084472656 * Ⲇ, Ⲇ * 91.84999084472656, Ⲇ * 30.599990844726562, Ⲇ * 94.34999084472656);
		Δ.bezierCurveTo(21.099990844726562 * Ⲇ, Ⲇ * 93.34999084472656, Ⲇ * 21.099990844726562, Ⲇ * 93.34999084472656, 11.599990844726562 * Ⲇ, Ⲇ * 92.34999084472656);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ]);
		Δ.save();
		Δ.translate(Ⲇ * 23.599990844726562, 110.94999694824219 * Ⲇ);
		Δ.rotate(ᐃⲆΔᐃ);
		ᐃΔⵠ(Δ, Ⲇ * -7, Ⲇ * -4, ⵠⲆⵠᐃⵠΔⵠ * Ⲇ, Ⲇ * ᐃᐃᐃⵠᐃ, Ⲇ * ⵠΔΔᐃᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(ⵠⵠΔΔ * Ⲇ, 0);
		Δ.globalAlpha = 1;
		Δ.translate(ⵠᐃⲆⵠᐃ * Ⲇ, Ⲇⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 22.599990844726562, 85.94999694824219 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 17.599990844726562, Ⲇ * 83.94999694824219, 17.599990844726562 * Ⲇ, Ⲇ * 83.94999694824219, Ⲇ * 12.599990844726562, Ⲇ * 81.94999694824219);
		Δ.bezierCurveTo(19.599990844726562 * Ⲇ, 73.94999694824219 * Ⲇ, 2.5999908447265625 * Ⲇ, 22.949996948242188 * Ⲇ, 33.59999084472656 * Ⲇ, Ⲇ * 7.9499969482421875);
		Δ.bezierCurveTo(Ⲇ * 27.599990844726562, 28.949996948242188 * Ⲇ, 33.59999084472656 * Ⲇ, 26.949996948242188 * Ⲇ, Ⲇ * 35.59999084472656, 32.94999694824219 * Ⲇ);
		Δ.bezierCurveTo(25.599990844726562 * Ⲇ, 59.94999694824219 * Ⲇ, Ⲇ * 26.599990844726562, Ⲇ * 69.94999694824219, 29.599990844726562 * Ⲇ, 82.94999694824219 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃΔ], Δⵠ[ᐃᐃⵠΔ], Ⲇ * 3);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(Ⲇ * -ⲆⵠⲆ, 0);
		Δ.moveTo(Ⲇ * 17.599990844726562, Ⲇ * 89.75);
		Δ.bezierCurveTo(Ⲇ * 24.599990844726562, 99.75 * Ⲇ, 24.599990844726562 * Ⲇ, Ⲇ * 101.75, 20.599990844726562 * Ⲇ, 111.75 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 28.599990844726562, Ⲇ * 110.75, 26.599990844726562 * Ⲇ, Ⲇ * 112.75, 28.599990844726562 * Ⲇ, Ⲇ * 111.75);
		Δ.bezierCurveTo(30.599990844726562 * Ⲇ, 96.75 * Ⲇ, 32.59999084472656 * Ⲇ, 96.75 * Ⲇ, Ⲇ * 30.599990844726562, 87.75 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠⲆΔᐃ], Ⲇ * 3);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(Ⲇ * 1, ⵠⵠⲆΔ);
		Δ.moveTo(Ⲇ * 7.5999908447265625, 86.34999084472656 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 12.599990844726562, 85.34999084472656 * Ⲇ, 14.599990844726562 * Ⲇ, 84.34999084472656 * Ⲇ, Ⲇ * 13.599990844726562, Ⲇ * 84.34999084472656);
		Δ.bezierCurveTo(Ⲇ * 21.599990844726562, Ⲇ * 83.34999084472656, Ⲇ * 21.599990844726562, Ⲇ * 83.34999084472656, Ⲇ * 29.599990844726562, Ⲇ * 82.34999084472656);
		Δ.bezierCurveTo(33.59999084472656 * Ⲇ, Ⲇ * 85.84999084472656, 33.59999084472656 * Ⲇ, Ⲇ * 85.84999084472656, 37.59999084472656 * Ⲇ, Ⲇ * 89.34999084472656);
		Δ.bezierCurveTo(Ⲇ * 34.09999084472656, 91.84999084472656 * Ⲇ, 34.09999084472656 * Ⲇ, 91.84999084472656 * Ⲇ, Ⲇ * 30.599990844726562, 94.34999084472656 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 21.099990844726562, 93.34999084472656 * Ⲇ, 21.099990844726562 * Ⲇ, Ⲇ * 93.34999084472656, 11.599990844726562 * Ⲇ, 92.34999084472656 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠΔΔ], Δⵠ[2], Ⲇ * ⵠΔΔᐃ);
		Δ.save();
		Δ.translate(Ⲇ * 23.599990844726562, Ⲇ * 110.94999694824219);
		Δ.rotate(ⵠⵠⵠ);
		ᐃΔⵠ(Δ, Ⲇ * -ΔΔⵠⲆⵠⵠᐃ, Ⲇ * -4, 14 * Ⲇ, ⲆⵠΔᐃⵠⵠΔ * Ⲇ, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * ⵠⵠⲆᐃ);
		return ᐃⵠ
	}

	function ⲆⵠⲆΔⲆⵠᐃΔΔ(ᐃⵠᐃⵠΔⲆⵠ, ΔᐃᐃᐃⲆΔᐃ, ⲆⲆⲆⵠΔᐃᐃⲆΔ, ΔᐃⲆΔⵠⵠᐃΔΔ) {
		const ⵠΔΔⲆᐃⲆΔ = (22695477 * (17292 + ᐃⵠᐃⵠΔⲆⵠ) + 1) % 4294967296;
		const ⵠⲆΔⲆⲆⲆᐃ = (22695477 * (19784 + ΔᐃᐃᐃⲆΔᐃ) + 1) % 4294967296;
		const ΔⲆⵠΔᐃᐃⲆ = ((ⲆⲆⲆⵠΔᐃᐃⲆΔ + 29872) * 214013 + 2531011) % 4294967296;
		const ⵠᐃⲆᐃΔᐃⲆ = ((ΔᐃⲆΔⵠⵠᐃΔΔ + 58534) * 214013 + 2531011) % 4294967296;
		const ᐃⲆΔⲆᐃⲆᐃᐃΔ = ΔⵠⵠⲆⵠᐃΔ(ⵠΔΔⲆᐃⲆΔ, ⵠⲆΔⲆⲆⲆᐃ, ΔⲆⵠΔᐃᐃⲆ, ⵠᐃⲆᐃΔᐃⲆ, ⵠΔΔⲆᐃⲆΔ);
		const ΔᐃⵠⲆⲆᐃᐃⲆᐃ = ΔΔΔⵠᐃΔⲆ(ⵠⲆΔⲆⲆⲆᐃ, ΔⲆⵠΔᐃᐃⲆ, ⵠᐃⲆᐃΔᐃⲆ, ⵠΔΔⲆᐃⲆΔ, ⵠⲆΔⲆⲆⲆᐃ);
		const ᐃΔⲆⵠⲆΔΔⵠᐃ = 36249 ^ ᐃⲆΔⲆᐃⲆᐃᐃΔ;
		return ᐃΔⲆⵠⲆΔΔⵠᐃ
	}

	function ⵠᐃⲆΔΔΔⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 100;
		ᐃⵠ.height = Ⲇ * 100;
		Δ.globalAlpha = .5;
		Δ.fillStyle = Δⵠ[0];
		Δ.fillRect(ᐃⲆΔ, 0, ᐃⵠ.width, ᐃⵠ.height);
		return ᐃⵠ
	}

	function ⵠⵠΔᐃⵠⲆᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 202 * Ⲇ;
		ᐃⵠ.height = 202 * Ⲇ;
		Δ.translate(Ⲇ * 2, Ⲇ * ⵠⵠⵠⲆ);
		Δ.globalAlpha = .3;
		ⵠΔᐃ(Δ, Ⲇ * 98, 99 * Ⲇ, ᐃᐃΔⵠⵠ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, Ⲇ * 98, 99 * Ⲇ, 90 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[1]);
		return ᐃⵠ
	}

	function ΔᐃⲆᐃΔᐃⲆⲆⲆ(Ⲇⵠᐃⵠ) {
		var ᐃⲆⵠ = [];
		for (var ᐃⲆ = 0; ᐃⲆ < Ⲇⵠᐃⵠ.length; ᐃⲆ++) ᐃⲆⵠ.push(ⵠⵠⵠⵠⲆΔⵠⲆΔ(Ⲇⵠᐃⵠ[ᐃⲆ], 2 == ᐃⲆ ? ⵠⲆⵠᐃⵠ : false));
		return ᐃⲆⵠ
	}

	function ΔⵠⲆΔⵠΔⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 376;
		ᐃⵠ.height = Ⲇ * 371;
		Δ.globalAlpha = .5;
		Δ.translate(ⵠᐃⵠᐃΔ * Ⲇ, Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(191.633544921875 * Ⲇ, 123.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 215.633544921875, 85.98580932617188 * Ⲇ, 187.633544921875 * Ⲇ, 71.98580932617188 * Ⲇ, 202.633544921875 * Ⲇ, 19.985809326171875 * Ⲇ);
		Δ.bezierCurveTo(231.633544921875 * Ⲇ, 68.98580932617188 * Ⲇ, 253.633544921875 * Ⲇ, 71.98580932617188 * Ⲇ, Ⲇ * 256.633544921875, 93.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 306.633544921875, 64.98580932617188 * Ⲇ, 319.633544921875 * Ⲇ, Ⲇ * 61.985809326171875, Ⲇ * 350.633544921875, Ⲇ * 58.985809326171875);
		Δ.bezierCurveTo(Ⲇ * 280.633544921875, Ⲇ * 86.98580932617188, Ⲇ * 281.633544921875, 106.98580932617188 * Ⲇ, 268.633544921875 * Ⲇ, 130.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 295.633544921875, Ⲇ * 158.98580932617188, Ⲇ * 328.633544921875, Ⲇ * 155.98580932617188, 353.633544921875 * Ⲇ, 90.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(371.633544921875 * Ⲇ, 158.98580932617188 * Ⲇ, Ⲇ * 337.633544921875, 210.98580932617188 * Ⲇ, 286.633544921875 * Ⲇ, Ⲇ * 209.98580932617188);
		Δ.bezierCurveTo(Ⲇ * 323.633544921875, Ⲇ * 230.98580932617188, 317.633544921875 * Ⲇ, Ⲇ * 274.9858093261719, 356.633544921875 * Ⲇ, 305.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(288.633544921875 * Ⲇ, 297.9858093261719 * Ⲇ, Ⲇ * 288.633544921875, Ⲇ * 265.9858093261719, Ⲇ * 275.633544921875, 266.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 280.633544921875, 294.9858093261719 * Ⲇ, 315.633544921875 * Ⲇ, Ⲇ * 306.9858093261719, Ⲇ * 336.633544921875, Ⲇ * 316.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 295.633544921875, Ⲇ * 318.9858093261719, 264.633544921875 * Ⲇ, Ⲇ * 302.9858093261719, 254.633544921875 * Ⲇ, Ⲇ * 289.9858093261719);
		Δ.bezierCurveTo(252.633544921875 * Ⲇ, 301.9858093261719 * Ⲇ, 224.633544921875 * Ⲇ, Ⲇ * 315.9858093261719, Ⲇ * 201.633544921875, 356.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(195.633544921875 * Ⲇ, 313.9858093261719 * Ⲇ, Ⲇ * 195.633544921875, 308.9858093261719 * Ⲇ, Ⲇ * 196.633544921875, 307.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 197.633544921875, Ⲇ * 289.9858093261719, 207.633544921875 * Ⲇ, Ⲇ * 283.9858093261719, Ⲇ * 195.633544921875, 258.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(182.633544921875 * Ⲇ, Ⲇ * 282.9858093261719, Ⲇ * 190.633544921875, 287.9858093261719 * Ⲇ, 193.633544921875 * Ⲇ, 297.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 195.633544921875, Ⲇ * 306.9858093261719, Ⲇ * 191.633544921875, Ⲇ * 334.9858093261719, 187.633544921875 * Ⲇ, Ⲇ * 354.9858093261719);
		Δ.bezierCurveTo(165.633544921875 * Ⲇ, 320.9858093261719 * Ⲇ, Ⲇ * 138.633544921875, Ⲇ * 307.9858093261719, Ⲇ * 135.633544921875, 288.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 110.633544921875, Ⲇ * 318.9858093261719, 68.633544921875 * Ⲇ, Ⲇ * 323.9858093261719, Ⲇ * 49.633544921875, 320.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(88.633544921875 * Ⲇ, 308.9858093261719 * Ⲇ, 108.633544921875 * Ⲇ, 284.9858093261719 * Ⲇ, 118.633544921875 * Ⲇ, 258.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(86.633544921875 * Ⲇ, Ⲇ * 264.9858093261719, Ⲇ * 75.633544921875, Ⲇ * 310.9858093261719, 19.633544921875 * Ⲇ, 304.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 54.633544921875, Ⲇ * 276.9858093261719, Ⲇ * 59.633544921875, 214.98580932617188 * Ⲇ, Ⲇ * 105.633544921875, 205.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 14.633544921875, 201.98580932617188 * Ⲇ, Ⲇ * 24.633544921875, 141.98580932617188 * Ⲇ, 25.633544921875 * Ⲇ, Ⲇ * 82.98580932617188);
		Δ.bezierCurveTo(Ⲇ * 49.633544921875, Ⲇ * 168.98580932617188, Ⲇ * 87.633544921875, 141.98580932617188 * Ⲇ, Ⲇ * 112.633544921875, 123.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(95.633544921875 * Ⲇ, Ⲇ * 75.98580932617188, Ⲇ * 70.633544921875, 68.98580932617188 * Ⲇ, 35.633544921875 * Ⲇ, Ⲇ * 50.985809326171875);
		Δ.bezierCurveTo(70.633544921875 * Ⲇ, 53.985809326171875 * Ⲇ, 102.633544921875 * Ⲇ, Ⲇ * 65.98580932617188, Ⲇ * 125.633544921875, 84.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 133.633544921875, Ⲇ * 69.98580932617188, Ⲇ * 166.633544921875, Ⲇ * 42.985809326171875, Ⲇ * 176.633544921875, Ⲇ * 21.985809326171875);
		Δ.bezierCurveTo(185.633544921875 * Ⲇ, Ⲇ * 49.985809326171875, Ⲇ * 168.633544921875, 95.98580932617188 * Ⲇ, Ⲇ * 191.633544921875, 121.98580932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(Ⲇ * -ΔⲆⲆⲆ, -ⵠⲆⲆⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(191.633544921875 * Ⲇ, 123.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(215.633544921875 * Ⲇ, 85.98580932617188 * Ⲇ, Ⲇ * 187.633544921875, Ⲇ * 71.98580932617188, 202.633544921875 * Ⲇ, 19.985809326171875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 231.633544921875, Ⲇ * 68.98580932617188, 253.633544921875 * Ⲇ, 71.98580932617188 * Ⲇ, Ⲇ * 256.633544921875, Ⲇ * 93.98580932617188);
		Δ.bezierCurveTo(306.633544921875 * Ⲇ, Ⲇ * 64.98580932617188, Ⲇ * 319.633544921875, 61.985809326171875 * Ⲇ, 350.633544921875 * Ⲇ, Ⲇ * 58.985809326171875);
		Δ.bezierCurveTo(Ⲇ * 280.633544921875, Ⲇ * 86.98580932617188, 281.633544921875 * Ⲇ, Ⲇ * 106.98580932617188, 268.633544921875 * Ⲇ, 130.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 295.633544921875, 158.98580932617188 * Ⲇ, Ⲇ * 328.633544921875, Ⲇ * 155.98580932617188, Ⲇ * 353.633544921875, 90.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 371.633544921875, 158.98580932617188 * Ⲇ, Ⲇ * 337.633544921875, 210.98580932617188 * Ⲇ, 286.633544921875 * Ⲇ, Ⲇ * 209.98580932617188);
		Δ.bezierCurveTo(323.633544921875 * Ⲇ, Ⲇ * 230.98580932617188, 317.633544921875 * Ⲇ, Ⲇ * 274.9858093261719, Ⲇ * 356.633544921875, Ⲇ * 305.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 288.633544921875, 297.9858093261719 * Ⲇ, Ⲇ * 288.633544921875, 265.9858093261719 * Ⲇ, 275.633544921875 * Ⲇ, Ⲇ * 266.9858093261719);
		Δ.bezierCurveTo(280.633544921875 * Ⲇ, Ⲇ * 294.9858093261719, 315.633544921875 * Ⲇ, 306.9858093261719 * Ⲇ, 336.633544921875 * Ⲇ, Ⲇ * 316.9858093261719);
		Δ.bezierCurveTo(295.633544921875 * Ⲇ, 318.9858093261719 * Ⲇ, Ⲇ * 264.633544921875, Ⲇ * 302.9858093261719, Ⲇ * 254.633544921875, Ⲇ * 289.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 252.633544921875, 301.9858093261719 * Ⲇ, Ⲇ * 224.633544921875, Ⲇ * 315.9858093261719, 201.633544921875 * Ⲇ, Ⲇ * 356.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 195.633544921875, Ⲇ * 313.9858093261719, 195.633544921875 * Ⲇ, 308.9858093261719 * Ⲇ, Ⲇ * 196.633544921875, Ⲇ * 307.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 197.633544921875, Ⲇ * 289.9858093261719, Ⲇ * 207.633544921875, 283.9858093261719 * Ⲇ, Ⲇ * 195.633544921875, Ⲇ * 258.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 182.633544921875, 282.9858093261719 * Ⲇ, 190.633544921875 * Ⲇ, 287.9858093261719 * Ⲇ, Ⲇ * 193.633544921875, Ⲇ * 297.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 195.633544921875, Ⲇ * 306.9858093261719, 191.633544921875 * Ⲇ, Ⲇ * 334.9858093261719, Ⲇ * 187.633544921875, 354.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 165.633544921875, Ⲇ * 320.9858093261719, 138.633544921875 * Ⲇ, Ⲇ * 307.9858093261719, Ⲇ * 135.633544921875, Ⲇ * 288.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 110.633544921875, Ⲇ * 318.9858093261719, Ⲇ * 68.633544921875, Ⲇ * 323.9858093261719, Ⲇ * 49.633544921875, Ⲇ * 320.9858093261719);
		Δ.bezierCurveTo(88.633544921875 * Ⲇ, 308.9858093261719 * Ⲇ, Ⲇ * 108.633544921875, Ⲇ * 284.9858093261719, Ⲇ * 118.633544921875, Ⲇ * 258.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 86.633544921875, 264.9858093261719 * Ⲇ, 75.633544921875 * Ⲇ, Ⲇ * 310.9858093261719, Ⲇ * 19.633544921875, 304.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 54.633544921875, Ⲇ * 276.9858093261719, 59.633544921875 * Ⲇ, 214.98580932617188 * Ⲇ, 105.633544921875 * Ⲇ, Ⲇ * 205.98580932617188);
		Δ.bezierCurveTo(14.633544921875 * Ⲇ, Ⲇ * 201.98580932617188, Ⲇ * 24.633544921875, Ⲇ * 141.98580932617188, Ⲇ * 25.633544921875, 82.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(49.633544921875 * Ⲇ, 168.98580932617188 * Ⲇ, 87.633544921875 * Ⲇ, Ⲇ * 141.98580932617188, Ⲇ * 112.633544921875, 123.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(95.633544921875 * Ⲇ, 75.98580932617188 * Ⲇ, 70.633544921875 * Ⲇ, 68.98580932617188 * Ⲇ, 35.633544921875 * Ⲇ, Ⲇ * 50.985809326171875);
		Δ.bezierCurveTo(70.633544921875 * Ⲇ, Ⲇ * 53.985809326171875, Ⲇ * 102.633544921875, Ⲇ * 65.98580932617188, Ⲇ * 125.633544921875, 84.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 133.633544921875, 69.98580932617188 * Ⲇ, Ⲇ * 166.633544921875, 42.985809326171875 * Ⲇ, Ⲇ * 176.633544921875, 21.985809326171875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 185.633544921875, Ⲇ * 49.985809326171875, 168.633544921875 * Ⲇ, 95.98580932617188 * Ⲇ, 191.633544921875 * Ⲇ, 121.98580932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[Δⵠᐃ], 12 * Ⲇ);
		Δ.translate(-1 * Ⲇ, ⲆⲆΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 270.633544921875, 88.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 296.633544921875, 65.98580932617188 * Ⲇ, 318.633544921875 * Ⲇ, 62.985809326171875 * Ⲇ, 348.633544921875 * Ⲇ, Ⲇ * 57.985809326171875);
		Δ.bezierCurveTo(309.633544921875 * Ⲇ, 76.98580932617188 * Ⲇ, Ⲇ * 291.633544921875, 88.98580932617188 * Ⲇ, 280.633544921875 * Ⲇ, 99.98580932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⲆⵠⲆᐃ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(275.633544921875 * Ⲇ, 281.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 303.633544921875, 308.9858093261719 * Ⲇ, Ⲇ * 321.633544921875, Ⲇ * 308.9858093261719, 335.633544921875 * Ⲇ, 315.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 305.633544921875, 320.9858093261719 * Ⲇ, Ⲇ * 278.633544921875, Ⲇ * 307.9858093261719, Ⲇ * 264.633544921875, Ⲇ * 293.9858093261719);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], Ⲇ * ΔⵠⲆⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(124.633544921875 * Ⲇ, 291.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 106.633544921875, 316.9858093261719 * Ⲇ, Ⲇ * 72.633544921875, Ⲇ * 325.9858093261719, 53.633544921875 * Ⲇ, Ⲇ * 319.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 83.633544921875, 308.9858093261719 * Ⲇ, Ⲇ * 97.633544921875, Ⲇ * 298.9858093261719, Ⲇ * 112.633544921875, 284.9858093261719 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], Ⲇ * ΔΔΔⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 113.633544921875, Ⲇ * 80.98580932617188);
		Δ.bezierCurveTo(Ⲇ * 91.633544921875, Ⲇ * 54.985809326171875, 72.633544921875 * Ⲇ, 56.985809326171875 * Ⲇ, 36.633544921875 * Ⲇ, 49.985809326171875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 87.633544921875, Ⲇ * 72.98580932617188, Ⲇ * 95.633544921875, 82.98580932617188 * Ⲇ, 106.633544921875 * Ⲇ, 96.98580932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆΔⲆ], Δⵠ[ⵠᐃⵠᐃΔ], Ⲇ * ΔᐃᐃΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(202.633544921875 * Ⲇ, Ⲇ * 20.985809326171875);
		Δ.bezierCurveTo(Ⲇ * 219.633544921875, 49.985809326171875 * Ⲇ, Ⲇ * 259.633544921875, 80.98580932617188 * Ⲇ, Ⲇ * 255.633544921875, 92.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 268.633544921875, 86.98580932617188 * Ⲇ, Ⲇ * 265.633544921875, Ⲇ * 87.98580932617188, 275.633544921875 * Ⲇ, Ⲇ * 82.98580932617188);
		Δ.bezierCurveTo(283.633544921875 * Ⲇ, 87.98580932617188 * Ⲇ, 283.633544921875 * Ⲇ, Ⲇ * 87.98580932617188, 291.633544921875 * Ⲇ, Ⲇ * 92.98580932617188);
		Δ.bezierCurveTo(Ⲇ * 269.633544921875, Ⲇ * 116.98580932617188, 270.633544921875 * Ⲇ, 124.98580932617188 * Ⲇ, 267.633544921875 * Ⲇ, 130.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(307.633544921875 * Ⲇ, 168.98580932617188 * Ⲇ, Ⲇ * 339.633544921875, 132.98580932617188 * Ⲇ, 352.633544921875 * Ⲇ, 93.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(366.633544921875 * Ⲇ, Ⲇ * 145.98580932617188, 345.633544921875 * Ⲇ, 207.98580932617188 * Ⲇ, 286.633544921875 * Ⲇ, Ⲇ * 208.98580932617188);
		Δ.bezierCurveTo(315.633544921875 * Ⲇ, 223.98580932617188 * Ⲇ, Ⲇ * 327.633544921875, Ⲇ * 287.9858093261719, 355.633544921875 * Ⲇ, Ⲇ * 305.9858093261719);
		Δ.bezierCurveTo(293.633544921875 * Ⲇ, 298.9858093261719 * Ⲇ, Ⲇ * 293.633544921875, 275.9858093261719 * Ⲇ, 276.633544921875 * Ⲇ, 266.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(274.633544921875 * Ⲇ, Ⲇ * 282.9858093261719, 287.633544921875 * Ⲇ, Ⲇ * 288.9858093261719, Ⲇ * 295.633544921875, Ⲇ * 296.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 287.133544921875, Ⲇ * 302.4858093261719, 287.133544921875 * Ⲇ, Ⲇ * 302.4858093261719, 278.633544921875 * Ⲇ, Ⲇ * 307.9858093261719);
		Δ.bezierCurveTo(261.633544921875 * Ⲇ, Ⲇ * 297.9858093261719, Ⲇ * 258.633544921875, 293.9858093261719 * Ⲇ, Ⲇ * 255.633544921875, 290.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(249.633544921875 * Ⲇ, Ⲇ * 301.9858093261719, 225.633544921875 * Ⲇ, Ⲇ * 320.9858093261719, 202.633544921875 * Ⲇ, Ⲇ * 354.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 195.633544921875, 318.9858093261719 * Ⲇ, 196.633544921875 * Ⲇ, 306.9858093261719 * Ⲇ, Ⲇ * 198.633544921875, Ⲇ * 300.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 209.633544921875, 268.9858093261719 * Ⲇ, Ⲇ * 199.633544921875, 266.9858093261719 * Ⲇ, Ⲇ * 195.633544921875, Ⲇ * 256.9858093261719);
		Δ.bezierCurveTo(183.633544921875 * Ⲇ, 274.9858093261719 * Ⲇ, Ⲇ * 182.633544921875, Ⲇ * 281.9858093261719, 192.633544921875 * Ⲇ, Ⲇ * 305.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 194.633544921875, 317.9858093261719 * Ⲇ, 191.633544921875 * Ⲇ, Ⲇ * 336.9858093261719, Ⲇ * 186.633544921875, 351.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(166.633544921875 * Ⲇ, Ⲇ * 318.9858093261719, 141.633544921875 * Ⲇ, 303.9858093261719 * Ⲇ, Ⲇ * 136.633544921875, 286.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(122.633544921875 * Ⲇ, Ⲇ * 303.9858093261719, Ⲇ * 115.633544921875, Ⲇ * 305.9858093261719, 109.633544921875 * Ⲇ, Ⲇ * 306.9858093261719);
		Δ.bezierCurveTo(101.133544921875 * Ⲇ, Ⲇ * 301.9858093261719, 94.633544921875 * Ⲇ, Ⲇ * 297.9858093261719, Ⲇ * 92.633544921875, Ⲇ * 296.9858093261719);
		Δ.bezierCurveTo(116.633544921875 * Ⲇ, 277.9858093261719 * Ⲇ, 116.633544921875 * Ⲇ, 266.9858093261719 * Ⲇ, 119.633544921875 * Ⲇ, Ⲇ * 257.9858093261719);
		Δ.bezierCurveTo(107.633544921875 * Ⲇ, 257.9858093261719 * Ⲇ, 65.633544921875 * Ⲇ, 308.9858093261719 * Ⲇ, 24.633544921875 * Ⲇ, Ⲇ * 303.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 51.633544921875, 275.9858093261719 * Ⲇ, Ⲇ * 64.633544921875, 220.98580932617188 * Ⲇ, Ⲇ * 108.633544921875, 205.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(14.633544921875 * Ⲇ, 198.98580932617188 * Ⲇ, Ⲇ * 26.633544921875, Ⲇ * 142.98580932617188, Ⲇ * 25.633544921875, 86.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(41.633544921875 * Ⲇ, Ⲇ * 155.98580932617188, Ⲇ * 81.633544921875, Ⲇ * 148.98580932617188, Ⲇ * 113.633544921875, Ⲇ * 124.98580932617188);
		Δ.bezierCurveTo(Ⲇ * 102.633544921875, Ⲇ * 93.98580932617188, 95.633544921875 * Ⲇ, Ⲇ * 88.98580932617188, 89.633544921875 * Ⲇ, 81.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 97.633544921875, Ⲇ * 76.48580932617188, 97.633544921875 * Ⲇ, Ⲇ * 76.48580932617188, Ⲇ * 105.633544921875, Ⲇ * 70.98580932617188);
		Δ.bezierCurveTo(Ⲇ * 120.633544921875, Ⲇ * 78.98580932617188, 121.633544921875 * Ⲇ, 81.98580932617188 * Ⲇ, Ⲇ * 124.633544921875, 86.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(132.633544921875 * Ⲇ, 71.98580932617188 * Ⲇ, Ⲇ * 160.633544921875, 56.985809326171875 * Ⲇ, 175.633544921875 * Ⲇ, Ⲇ * 23.985809326171875);
		Δ.bezierCurveTo(Ⲇ * 182.633544921875, Ⲇ * 53.985809326171875, Ⲇ * 170.633544921875, Ⲇ * 102.98580932617188, Ⲇ * 191.633544921875, Ⲇ * 125.98580932617188);
		Δ.bezierCurveTo(Ⲇ * 214.633544921875, Ⲇ * 89.98580932617188, Ⲇ * 192.633544921875, Ⲇ * 58.985809326171875, Ⲇ * 202.633544921875, 20.985809326171875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[3], ⵠΔⲆᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 203.633544921875, Ⲇ * 21.985809326171875);
		Δ.bezierCurveTo(223.633544921875 * Ⲇ, Ⲇ * 63.985809326171875, Ⲇ * 227.633544921875, Ⲇ * 72.98580932617188, 235.633544921875 * Ⲇ, 98.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(241.633544921875 * Ⲇ, 123.98580932617188 * Ⲇ, Ⲇ * 225.633544921875, 138.98580932617188 * Ⲇ, Ⲇ * 196.633544921875, 122.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(213.633544921875 * Ⲇ, 93.98580932617188 * Ⲇ, Ⲇ * 199.633544921875, 49.985809326171875 * Ⲇ, Ⲇ * 203.633544921875, 26.985809326171875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 175.633544921875, Ⲇ * 25.985809326171875);
		Δ.bezierCurveTo(Ⲇ * 176.633544921875, Ⲇ * 51.985809326171875, 171.633544921875 * Ⲇ, Ⲇ * 88.98580932617188, Ⲇ * 186.633544921875, 121.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 156.633544921875, 144.98580932617188 * Ⲇ, Ⲇ * 139.633544921875, Ⲇ * 120.98580932617188, Ⲇ * 147.633544921875, Ⲇ * 97.98580932617188);
		Δ.bezierCurveTo(152.633544921875 * Ⲇ, 77.98580932617188 * Ⲇ, 162.633544921875 * Ⲇ, Ⲇ * 60.985809326171875, 176.633544921875 * Ⲇ, Ⲇ * 25.985809326171875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(26.633544921875 * Ⲇ, 96.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(38.633544921875 * Ⲇ, 151.98580932617188 * Ⲇ, Ⲇ * 61.633544921875, 161.98580932617188 * Ⲇ, 88.633544921875 * Ⲇ, 168.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(117.633544921875 * Ⲇ, 177.98580932617188 * Ⲇ, 113.633544921875 * Ⲇ, 185.98580932617188 * Ⲇ, Ⲇ * 106.633544921875, 204.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(32.633544921875 * Ⲇ, 204.98580932617188 * Ⲇ, 25.633544921875 * Ⲇ, Ⲇ * 149.98580932617188, Ⲇ * 25.633544921875, 97.98580932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(351.633544921875 * Ⲇ, Ⲇ * 99.98580932617188);
		Δ.bezierCurveTo(365.633544921875 * Ⲇ, Ⲇ * 161.98580932617188, 333.633544921875 * Ⲇ, 203.98580932617188 * Ⲇ, 287.633544921875 * Ⲇ, 207.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(255.633544921875 * Ⲇ, Ⲇ * 208.98580932617188, Ⲇ * 266.633544921875, 174.98580932617188 * Ⲇ, 285.633544921875 * Ⲇ, 176.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 313.633544921875, 178.98580932617188 * Ⲇ, 348.633544921875 * Ⲇ, Ⲇ * 135.98580932617188, 353.633544921875 * Ⲇ, Ⲇ * 99.98580932617188);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(350.633544921875 * Ⲇ, 302.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 310.633544921875, 280.9858093261719 * Ⲇ, Ⲇ * 314.633544921875, 244.98580932617188 * Ⲇ, Ⲇ * 292.633544921875, 230.98580932617188 * Ⲇ);
		Δ.bezierCurveTo(272.633544921875 * Ⲇ, 215.98580932617188 * Ⲇ, Ⲇ * 263.633544921875, 222.98580932617188 * Ⲇ, 256.633544921875 * Ⲇ, Ⲇ * 236.98580932617188);
		Δ.bezierCurveTo(251.633544921875 * Ⲇ, 249.98580932617188 * Ⲇ, 264.633544921875 * Ⲇ, 255.98580932617188 * Ⲇ, Ⲇ * 279.633544921875, Ⲇ * 268.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 306.633544921875, 295.9858093261719 * Ⲇ, Ⲇ * 325.633544921875, 299.9858093261719 * Ⲇ, Ⲇ * 349.633544921875, Ⲇ * 302.9858093261719);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 95.633544921875, Ⲇ * 224.98580932617188);
		Δ.bezierCurveTo(64.633544921875 * Ⲇ, 245.98580932617188 * Ⲇ, 62.633544921875 * Ⲇ, 280.9858093261719 * Ⲇ, Ⲇ * 32.633544921875, 303.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(59.633544921875 * Ⲇ, 301.9858093261719 * Ⲇ, 102.633544921875 * Ⲇ, 260.9858093261719 * Ⲇ, Ⲇ * 116.633544921875, Ⲇ * 255.98580932617188);
		Δ.bezierCurveTo(139.633544921875 * Ⲇ, Ⲇ * 229.98580932617188, 108.633544921875 * Ⲇ, 209.98580932617188 * Ⲇ, Ⲇ * 97.633544921875, Ⲇ * 224.98580932617188);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 195.633544921875, Ⲇ * 253.98580932617188);
		Δ.bezierCurveTo(209.633544921875 * Ⲇ, Ⲇ * 282.9858093261719, Ⲇ * 205.633544921875, 278.9858093261719 * Ⲇ, 199.633544921875 * Ⲇ, Ⲇ * 307.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 198.633544921875, Ⲇ * 332.9858093261719, Ⲇ * 201.633544921875, Ⲇ * 340.9858093261719, Ⲇ * 202.633544921875, Ⲇ * 348.9858093261719);
		Δ.bezierCurveTo(215.633544921875 * Ⲇ, 313.9858093261719 * Ⲇ, 226.633544921875 * Ⲇ, 291.9858093261719 * Ⲇ, 235.633544921875 * Ⲇ, Ⲇ * 270.9858093261719);
		Δ.bezierCurveTo(243.633544921875 * Ⲇ, 247.98580932617188 * Ⲇ, 219.633544921875 * Ⲇ, 235.98580932617188 * Ⲇ, Ⲇ * 196.633544921875, 252.98580932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(195.633544921875 * Ⲇ, Ⲇ * 251.98580932617188);
		Δ.bezierCurveTo(Ⲇ * 176.633544921875, 275.9858093261719 * Ⲇ, Ⲇ * 182.633544921875, 285.9858093261719 * Ⲇ, 191.633544921875 * Ⲇ, Ⲇ * 308.9858093261719);
		Δ.bezierCurveTo(194.633544921875 * Ⲇ, 318.9858093261719 * Ⲇ, 190.633544921875 * Ⲇ, 334.9858093261719 * Ⲇ, 186.633544921875 * Ⲇ, 348.9858093261719 * Ⲇ);
		Δ.bezierCurveTo(175.633544921875 * Ⲇ, Ⲇ * 307.9858093261719, 157.633544921875 * Ⲇ, Ⲇ * 291.9858093261719, Ⲇ * 155.633544921875, Ⲇ * 272.9858093261719);
		Δ.bezierCurveTo(Ⲇ * 150.633544921875, Ⲇ * 243.98580932617188, 170.633544921875 * Ⲇ, Ⲇ * 236.98580932617188, 195.633544921875 * Ⲇ, Ⲇ * 251.98580932617188);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(316 * Ⲇ, Ⲇ * 186.8020782470703);
		Δ.bezierCurveTo(Ⲇ * 315, Ⲇ * 173.8020782470703, 298 * Ⲇ, 177.8020782470703 * Ⲇ, 293 * Ⲇ, Ⲇ * 183.8020782470703);
		Δ.bezierCurveTo(Ⲇ * 285, Ⲇ * 195.8020782470703, Ⲇ * 314, Ⲇ * 197.8020782470703, 315 * Ⲇ, 187.8020782470703 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 340, 157.8020782470703 * Ⲇ);
		Δ.bezierCurveTo(327 * Ⲇ, Ⲇ * 153.8020782470703, Ⲇ * 321, Ⲇ * 168.8020782470703, Ⲇ * 330, 174.8020782470703 * Ⲇ);
		Δ.bezierCurveTo(341 * Ⲇ, Ⲇ * 178.8020782470703, 347 * Ⲇ, 161.8020782470703 * Ⲇ, Ⲇ * 341, 157.8020782470703 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔᐃᐃΔ], Δⵠ[ⲆⲆⵠⵠⲆ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 349, 136.8020782470703 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 343, Ⲇ * 135.8020782470703, 342 * Ⲇ, Ⲇ * 139.8020782470703, 341 * Ⲇ, 147.8020782470703 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 343, Ⲇ * 155.8020782470703, 353 * Ⲇ, Ⲇ * 143.8020782470703, Ⲇ * 349, 137.8020782470703 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], ᐃΔΔΔⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(278.75 * Ⲇ, 246.4375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 288.75, Ⲇ * 242.4375, 301.75 * Ⲇ, 248.4375 * Ⲇ, 298.75 * Ⲇ, Ⲇ * 262.4375);
		Δ.bezierCurveTo(293.75 * Ⲇ, Ⲇ * 271.4375, 287.75 * Ⲇ, Ⲇ * 271.4375, Ⲇ * 278.75, 262.4375 * Ⲇ);
		Δ.bezierCurveTo(271.75 * Ⲇ, 255.4375 * Ⲇ, Ⲇ * 274.75, Ⲇ * 250.4375, 277.75 * Ⲇ, 247.4375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(310.75 * Ⲇ, Ⲇ * 277.4375);
		Δ.bezierCurveTo(319.75 * Ⲇ, Ⲇ * 280.4375, 322.75 * Ⲇ, Ⲇ * 283.4375, Ⲇ * 321.75, 289.4375 * Ⲇ);
		Δ.bezierCurveTo(319.75 * Ⲇ, Ⲇ * 295.4375, 313.75 * Ⲇ, Ⲇ * 291.4375, 308.75 * Ⲇ, 288.4375 * Ⲇ);
		Δ.bezierCurveTo(301.75 * Ⲇ, Ⲇ * 281.4375, 306.75 * Ⲇ, Ⲇ * 277.4375, Ⲇ * 309.75, 277.4375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 217.75, 257.4375 * Ⲇ);
		Δ.bezierCurveTo(227.75 * Ⲇ, 269.4375 * Ⲇ, Ⲇ * 220.75, 281.4375 * Ⲇ, Ⲇ * 212.75, 280.4375 * Ⲇ);
		Δ.bezierCurveTo(206.75 * Ⲇ, Ⲇ * 279.4375, Ⲇ * 206.75, 269.4375 * Ⲇ, 204.75 * Ⲇ, 260.4375 * Ⲇ);
		Δ.bezierCurveTo(204.75 * Ⲇ, Ⲇ * 254.4375, Ⲇ * 211.75, Ⲇ * 253.4375, Ⲇ * 216.75, 256.4375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⲆΔⲆ], Δⵠ[7], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 211.75, 289.4375 * Ⲇ);
		Δ.bezierCurveTo(219.75 * Ⲇ, Ⲇ * 292.4375, Ⲇ * 213.75, 306.4375 * Ⲇ, Ⲇ * 206.75, Ⲇ * 307.4375);
		Δ.bezierCurveTo(Ⲇ * 199.75, Ⲇ * 303.4375, Ⲇ * 209.75, 287.4375 * Ⲇ, 210.75 * Ⲇ, Ⲇ * 289.4375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔⵠⵠ], Δⵠ[ΔΔⵠⲆᐃ], Ⲇ * ΔᐃⲆᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(171.75 * Ⲇ, Ⲇ * 256.4375);
		Δ.bezierCurveTo(162.75 * Ⲇ, 273.4375 * Ⲇ, Ⲇ * 166.75, 278.4375 * Ⲇ, 175.75 * Ⲇ, Ⲇ * 280.4375);
		Δ.bezierCurveTo(183.75 * Ⲇ, Ⲇ * 278.4375, 185.75 * Ⲇ, 257.4375 * Ⲇ, Ⲇ * 182.75, Ⲇ * 255.4375);
		Δ.bezierCurveTo(Ⲇ * 176.75, Ⲇ * 251.4375, 172.75 * Ⲇ, Ⲇ * 253.4375, Ⲇ * 172.75, Ⲇ * 256.4375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], Ⲇ * ᐃⵠⵠⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 175.75, 289.9375 * Ⲇ);
		Δ.bezierCurveTo(183.75 * Ⲇ, 287.9375 * Ⲇ, Ⲇ * 186.75, 301.9375 * Ⲇ, Ⲇ * 182.75, 305.9375 * Ⲇ);
		Δ.bezierCurveTo(176.75 * Ⲇ, 307.9375 * Ⲇ, Ⲇ * 171.75, Ⲇ * 292.9375, Ⲇ * 174.75, Ⲇ * 290.9375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(205.75 * Ⲇ, 314.4375 * Ⲇ);
		Δ.bezierCurveTo(209.75 * Ⲇ, Ⲇ * 316.4375, Ⲇ * 210.75, Ⲇ * 320.4375, 206.75 * Ⲇ, 323.4375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 201.75, 324.4375 * Ⲇ, 201.75 * Ⲇ, 314.4375 * Ⲇ, 204.75 * Ⲇ, 314.4375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆⵠΔ], Δⵠ[7], Ⲇ * ᐃᐃΔⵠⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 186.75, 313.4375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 181.75, 315.4375 * Ⲇ, 180.75 * Ⲇ, 321.4375 * Ⲇ, Ⲇ * 185.75, 326.4375 * Ⲇ);
		Δ.bezierCurveTo(190.75 * Ⲇ, 327.4375 * Ⲇ, 190.75 * Ⲇ, 313.4375 * Ⲇ, Ⲇ * 187.75, Ⲇ * 314.4375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(103.75 * Ⲇ, 244.4375 * Ⲇ);
		Δ.bezierCurveTo(96.75 * Ⲇ, 239.4375 * Ⲇ, Ⲇ * 83.75, Ⲇ * 240.4375, Ⲇ * 81.75, 255.4375 * Ⲇ);
		Δ.bezierCurveTo(80.75 * Ⲇ, 264.4375 * Ⲇ, Ⲇ * 89.75, Ⲇ * 269.4375, 99.75 * Ⲇ, Ⲇ * 260.4375);
		Δ.bezierCurveTo(106.75 * Ⲇ, Ⲇ * 254.4375, 106.75 * Ⲇ, Ⲇ * 250.4375, 104.75 * Ⲇ, 245.4375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], Ⲇ * ΔⵠⲆⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 86.75, 182.4375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 82.75, Ⲇ * 170.4375, 66.75 * Ⲇ, 169.4375 * Ⲇ, Ⲇ * 61.75, Ⲇ * 181.4375);
		Δ.bezierCurveTo(58.75 * Ⲇ, Ⲇ * 187.4375, 68.75 * Ⲇ, 194.4375 * Ⲇ, Ⲇ * 75.75, Ⲇ * 192.4375);
		Δ.bezierCurveTo(Ⲇ * 83.75, Ⲇ * 192.4375, Ⲇ * 86.75, Ⲇ * 187.4375, Ⲇ * 86.75, Ⲇ * 183.4375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⵠⲆ], Δⵠ[ⲆⲆⵠⵠⲆ], Ⲇ * ᐃΔΔΔⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(44.75 * Ⲇ, Ⲇ * 152.4375);
		Δ.bezierCurveTo(Ⲇ * 55.75, 159.4375 * Ⲇ, Ⲇ * 54.75, 170.4375 * Ⲇ, Ⲇ * 46.75, 171.4375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 39.75, 170.4375 * Ⲇ, Ⲇ * 34.75, Ⲇ * 151.4375, Ⲇ * 43.75, Ⲇ * 152.4375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(31.75 * Ⲇ, Ⲇ * 130.4375);
		Δ.bezierCurveTo(35.75 * Ⲇ, Ⲇ * 132.4375, 35.75 * Ⲇ, Ⲇ * 131.4375, 37.75 * Ⲇ, Ⲇ * 137.4375);
		Δ.bezierCurveTo(36.75 * Ⲇ, Ⲇ * 144.4375, 36.75 * Ⲇ, 145.4375 * Ⲇ, 33.75 * Ⲇ, Ⲇ * 144.4375);
		Δ.bezierCurveTo(26.75 * Ⲇ, Ⲇ * 137.4375, Ⲇ * 29.75, 131.4375 * Ⲇ, 31.75 * Ⲇ, Ⲇ * 130.4375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[ⲆⵠⵠΔᐃ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(69.75 * Ⲇ, Ⲇ * 274.4375);
		Δ.bezierCurveTo(62.75 * Ⲇ, 272.4375 * Ⲇ, 59.75 * Ⲇ, 277.4375 * Ⲇ, Ⲇ * 57.75, Ⲇ * 284.4375);
		Δ.bezierCurveTo(56.75 * Ⲇ, Ⲇ * 290.4375, Ⲇ * 63.75, Ⲇ * 289.4375, 71.75 * Ⲇ, 282.4375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 75.75, 277.4375 * Ⲇ, 72.75 * Ⲇ, 275.4375 * Ⲇ, 69.75 * Ⲇ, 274.4375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆⲆⵠ], Δⵠ[ⵠⵠᐃⵠᐃ], ᐃᐃⵠΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 165.75, 95.4375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 177.75, 97.4375 * Ⲇ, 182.75 * Ⲇ, 115.4375 * Ⲇ, Ⲇ * 173.75, Ⲇ * 121.4375);
		Δ.bezierCurveTo(Ⲇ * 164.75, Ⲇ * 126.4375, 149.75 * Ⲇ, 102.4375 * Ⲇ, Ⲇ * 164.75, 96.4375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], ⵠΔᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(216.75 * Ⲇ, Ⲇ * 94.4375);
		Δ.bezierCurveTo(227.75 * Ⲇ, Ⲇ * 99.4375, 223.75 * Ⲇ, 122.4375 * Ⲇ, Ⲇ * 210.75, Ⲇ * 119.4375);
		Δ.bezierCurveTo(Ⲇ * 203.75, Ⲇ * 115.4375, Ⲇ * 207.75, 93.4375 * Ⲇ, Ⲇ * 216.75, 94.4375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[ⲆᐃⲆⲆΔ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 211.75, 68.4375 * Ⲇ);
		Δ.bezierCurveTo(218.75 * Ⲇ, Ⲇ * 69.4375, Ⲇ * 220.75, Ⲇ * 77.4375, 216.75 * Ⲇ, 83.4375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 208.75, Ⲇ * 89.4375, Ⲇ * 205.75, Ⲇ * 68.4375, Ⲇ * 210.75, Ⲇ * 68.4375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⵠⵠ], Δⵠ[ᐃᐃⲆΔΔ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(169.75 * Ⲇ, 71.4375 * Ⲇ);
		Δ.bezierCurveTo(162.75 * Ⲇ, 72.4375 * Ⲇ, Ⲇ * 159.75, 83.4375 * Ⲇ, Ⲇ * 167.75, Ⲇ * 88.4375);
		Δ.bezierCurveTo(174.75 * Ⲇ, Ⲇ * 90.4375, Ⲇ * 174.75, 72.4375 * Ⲇ, 170.75 * Ⲇ, Ⲇ * 71.4375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆⲆⲆ], Δⵠ[7], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 193.75, Ⲇ * 160.4375);
		Δ.bezierCurveTo(215.75 * Ⲇ, 168.4375 * Ⲇ, Ⲇ * 224.75, Ⲇ * 180.4375, Ⲇ * 229.75, 193.4375 * Ⲇ);
		Δ.bezierCurveTo(223.75 * Ⲇ, Ⲇ * 211.4375, Ⲇ * 205.75, Ⲇ * 225.4375, 193.75 * Ⲇ, Ⲇ * 229.4375);
		Δ.bezierCurveTo(167.75 * Ⲇ, 217.4375 * Ⲇ, Ⲇ * 161.75, 205.4375 * Ⲇ, 156.75 * Ⲇ, 192.4375 * Ⲇ);
		Δ.bezierCurveTo(164.75 * Ⲇ, Ⲇ * 175.4375, 176.75 * Ⲇ, Ⲇ * 166.4375, 192.75 * Ⲇ, 160.4375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃⲆ], Δⵠ[9], ⵠᐃⵠⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(189.1999969482422 * Ⲇ, Ⲇ * 182.61249923706055);
		Δ.bezierCurveTo(190.1999969482422 * Ⲇ, Ⲇ * 184.11249923706055, 190.1999969482422 * Ⲇ, 184.11249923706055 * Ⲇ, Ⲇ * 191.1999969482422, 185.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(192.1999969482422 * Ⲇ, 180.61249923706055 * Ⲇ, 192.1999969482422 * Ⲇ, Ⲇ * 180.61249923706055, Ⲇ * 193.1999969482422, Ⲇ * 175.61249923706055);
		Δ.bezierCurveTo(195.6999969482422 * Ⲇ, 177.11249923706055 * Ⲇ, 195.6999969482422 * Ⲇ, Ⲇ * 177.11249923706055, 198.1999969482422 * Ⲇ, 178.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(198.1999969482422 * Ⲇ, Ⲇ * 181.11249923706055, 198.1999969482422 * Ⲇ, 181.11249923706055 * Ⲇ, 198.1999969482422 * Ⲇ, Ⲇ * 183.61249923706055);
		Δ.bezierCurveTo(Ⲇ * 201.6999969482422, Ⲇ * 181.11249923706055, Ⲇ * 201.6999969482422, 181.11249923706055 * Ⲇ, 205.1999969482422 * Ⲇ, Ⲇ * 178.61249923706055);
		Δ.bezierCurveTo(Ⲇ * 206.6999969482422, Ⲇ * 180.61249923706055, Ⲇ * 206.6999969482422, Ⲇ * 180.61249923706055, Ⲇ * 208.1999969482422, 182.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(206.1999969482422 * Ⲇ, 185.61249923706055 * Ⲇ, 206.1999969482422 * Ⲇ, Ⲇ * 185.61249923706055, Ⲇ * 204.1999969482422, 188.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(208.6999969482422 * Ⲇ, Ⲇ * 188.61249923706055, 208.6999969482422 * Ⲇ, 188.61249923706055 * Ⲇ, Ⲇ * 213.1999969482422, 188.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(213.1999969482422 * Ⲇ, Ⲇ * 191.11249923706055, 213.1999969482422 * Ⲇ, 191.11249923706055 * Ⲇ, Ⲇ * 213.1999969482422, 193.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 209.6999969482422, 194.61249923706055 * Ⲇ, 209.6999969482422 * Ⲇ, Ⲇ * 194.61249923706055, 206.1999969482422 * Ⲇ, Ⲇ * 195.61249923706055);
		Δ.bezierCurveTo(Ⲇ * 210.1999969482422, 198.61249923706055 * Ⲇ, 210.1999969482422 * Ⲇ, 198.61249923706055 * Ⲇ, 214.1999969482422 * Ⲇ, Ⲇ * 201.61249923706055);
		Δ.bezierCurveTo(Ⲇ * 212.1999969482422, Ⲇ * 203.61249923706055, Ⲇ * 212.1999969482422, Ⲇ * 203.61249923706055, Ⲇ * 210.1999969482422, 205.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 207.1999969482422, Ⲇ * 204.11249923706055, Ⲇ * 207.1999969482422, Ⲇ * 204.11249923706055, 204.1999969482422 * Ⲇ, 202.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(205.6999969482422 * Ⲇ, 207.61249923706055 * Ⲇ, 205.6999969482422 * Ⲇ, Ⲇ * 207.61249923706055, 207.1999969482422 * Ⲇ, Ⲇ * 212.61249923706055);
		Δ.bezierCurveTo(204.6999969482422 * Ⲇ, Ⲇ * 213.61249923706055, 204.6999969482422 * Ⲇ, 213.61249923706055 * Ⲇ, Ⲇ * 202.1999969482422, 214.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(200.1999969482422 * Ⲇ, Ⲇ * 210.61249923706055, 200.1999969482422 * Ⲇ, Ⲇ * 210.61249923706055, Ⲇ * 198.1999969482422, 206.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(196.6999969482422 * Ⲇ, 211.61249923706055 * Ⲇ, 196.6999969482422 * Ⲇ, 211.61249923706055 * Ⲇ, Ⲇ * 195.1999969482422, Ⲇ * 216.61249923706055);
		Δ.bezierCurveTo(192.6999969482422 * Ⲇ, Ⲇ * 216.11249923706055, 192.6999969482422 * Ⲇ, Ⲇ * 216.11249923706055, 190.1999969482422 * Ⲇ, Ⲇ * 215.61249923706055);
		Δ.bezierCurveTo(190.1999969482422 * Ⲇ, Ⲇ * 211.61249923706055, Ⲇ * 190.1999969482422, 211.61249923706055 * Ⲇ, Ⲇ * 190.1999969482422, 207.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(186.1999969482422 * Ⲇ, 210.61249923706055 * Ⲇ, Ⲇ * 186.1999969482422, 210.61249923706055 * Ⲇ, 182.1999969482422 * Ⲇ, Ⲇ * 213.61249923706055);
		Δ.bezierCurveTo(Ⲇ * 181.1999969482422, 211.11249923706055 * Ⲇ, Ⲇ * 181.1999969482422, 211.11249923706055 * Ⲇ, 180.1999969482422 * Ⲇ, 208.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(183.1999969482422 * Ⲇ, Ⲇ * 205.61249923706055, 183.1999969482422 * Ⲇ, 205.61249923706055 * Ⲇ, 186.1999969482422 * Ⲇ, Ⲇ * 202.61249923706055);
		Δ.bezierCurveTo(Ⲇ * 180.6999969482422, Ⲇ * 203.11249923706055, 180.6999969482422 * Ⲇ, 203.11249923706055 * Ⲇ, Ⲇ * 175.1999969482422, 203.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 174.6999969482422, 200.11249923706055 * Ⲇ, Ⲇ * 174.6999969482422, 200.11249923706055 * Ⲇ, 174.1999969482422 * Ⲇ, 196.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(177.1999969482422 * Ⲇ, Ⲇ * 195.61249923706055, Ⲇ * 177.1999969482422, Ⲇ * 195.61249923706055, 180.1999969482422 * Ⲇ, 194.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(177.1999969482422 * Ⲇ, Ⲇ * 191.61249923706055, Ⲇ * 177.1999969482422, 191.61249923706055 * Ⲇ, Ⲇ * 174.1999969482422, 188.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 175.6999969482422, Ⲇ * 187.11249923706055, Ⲇ * 175.6999969482422, Ⲇ * 187.11249923706055, Ⲇ * 177.1999969482422, Ⲇ * 185.61249923706055);
		Δ.bezierCurveTo(Ⲇ * 180.6999969482422, Ⲇ * 187.11249923706055, Ⲇ * 180.6999969482422, Ⲇ * 187.11249923706055, Ⲇ * 184.1999969482422, 188.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 182.6999969482422, Ⲇ * 183.61249923706055, 182.6999969482422 * Ⲇ, 183.61249923706055 * Ⲇ, Ⲇ * 181.1999969482422, Ⲇ * 178.61249923706055);
		Δ.bezierCurveTo(Ⲇ * 183.1999969482422, 177.11249923706055 * Ⲇ, 183.1999969482422 * Ⲇ, 177.11249923706055 * Ⲇ, 185.1999969482422 * Ⲇ, 175.61249923706055 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⵠΔⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 185.1999969482422, Ⲇ * 173.8125);
		Δ.bezierCurveTo(187.1999969482422 * Ⲇ, 179.3125 * Ⲇ, Ⲇ * 187.1999969482422, 179.3125 * Ⲇ, Ⲇ * 189.1999969482422, Ⲇ * 184.8125);
		Δ.bezierCurveTo(184.1999969482422 * Ⲇ, 181.8125 * Ⲇ, 184.1999969482422 * Ⲇ, 181.8125 * Ⲇ, 179.1999969482422 * Ⲇ, 178.8125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 181.1999969482422, 175.8125 * Ⲇ, 182.1999969482422 * Ⲇ, 174.8125 * Ⲇ, Ⲇ * 185.1999969482422, 173.8125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⵠⵠⲆΔⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 192.1999969482422, 173.61249542236328 * Ⲇ);
		Δ.bezierCurveTo(194.1999969482422 * Ⲇ, Ⲇ * 172.61249542236328, 196.1999969482422 * Ⲇ, 171.61249542236328 * Ⲇ, 199.1999969482422 * Ⲇ, Ⲇ * 173.61249542236328);
		Δ.bezierCurveTo(Ⲇ * 197.6999969482422, Ⲇ * 179.61249542236328, Ⲇ * 197.6999969482422, 179.61249542236328 * Ⲇ, 196.1999969482422 * Ⲇ, Ⲇ * 185.61249542236328);
		Δ.bezierCurveTo(194.1999969482422 * Ⲇ, 179.61249542236328 * Ⲇ, Ⲇ * 194.1999969482422, Ⲇ * 179.61249542236328, 192.1999969482422 * Ⲇ, Ⲇ * 173.61249542236328);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[11]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(205.1999969482422 * Ⲇ, 176.2125015258789 * Ⲇ);
		Δ.bezierCurveTo(210.1999969482422 * Ⲇ, 178.2125015258789 * Ⲇ, Ⲇ * 211.1999969482422, Ⲇ * 179.2125015258789, 211.1999969482422 * Ⲇ, Ⲇ * 181.2125015258789);
		Δ.bezierCurveTo(Ⲇ * 206.6999969482422, 184.7125015258789 * Ⲇ, Ⲇ * 206.6999969482422, Ⲇ * 184.7125015258789, 202.1999969482422 * Ⲇ, Ⲇ * 188.2125015258789);
		Δ.bezierCurveTo(203.6999969482422 * Ⲇ, Ⲇ * 182.2125015258789, Ⲇ * 203.6999969482422, Ⲇ * 182.2125015258789, Ⲇ * 205.1999969482422, Ⲇ * 176.2125015258789);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃⵠΔΔᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 214.1999969482422, 187.21249985694885 * Ⲇ);
		Δ.bezierCurveTo(216.1999969482422 * Ⲇ, Ⲇ * 191.21249985694885, Ⲇ * 216.1999969482422, Ⲇ * 192.21249985694885, Ⲇ * 215.1999969482422, Ⲇ * 195.21249985694885);
		Δ.bezierCurveTo(206.1999969482422 * Ⲇ, Ⲇ * 194.21249985694885, Ⲇ * 205.1999969482422, Ⲇ * 194.21249985694885, Ⲇ * 205.1999969482422, 194.21249985694885 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 209.6999969482422, 190.71249985694885 * Ⲇ, Ⲇ * 209.6999969482422, Ⲇ * 190.71249985694885, 214.1999969482422 * Ⲇ, Ⲇ * 187.21249985694885);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⵠᐃᐃΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(204.1999969482422 * Ⲇ, 201.8125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 209.1999969482422, 201.3125 * Ⲇ, 209.1999969482422 * Ⲇ, Ⲇ * 201.3125, 214.1999969482422 * Ⲇ, 200.8125 * Ⲇ);
		Δ.bezierCurveTo(215.1999969482422 * Ⲇ, Ⲇ * 204.8125, 214.1999969482422 * Ⲇ, 205.8125 * Ⲇ, 213.1999969482422 * Ⲇ, Ⲇ * 208.8125);
		Δ.bezierCurveTo(208.6999969482422 * Ⲇ, Ⲇ * 205.3125, Ⲇ * 208.6999969482422, 205.3125 * Ⲇ, 204.1999969482422 * Ⲇ, Ⲇ * 201.8125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⵠⵠⲆΔⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 199.1999969482422, 205.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(207.1999969482422 * Ⲇ, 212.61249923706055 * Ⲇ, Ⲇ * 203.6999969482422, Ⲇ * 209.11249923706055, 208.1999969482422 * Ⲇ, 212.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(206.1999969482422 * Ⲇ, Ⲇ * 215.61249923706055, 204.1999969482422 * Ⲇ, 217.61249923706055 * Ⲇ, Ⲇ * 203.1999969482422, 216.61249923706055 * Ⲇ);
		Δ.bezierCurveTo(201.1999969482422 * Ⲇ, Ⲇ * 211.11249923706055, 201.1999969482422 * Ⲇ, 211.11249923706055 * Ⲇ, 199.1999969482422 * Ⲇ, Ⲇ * 205.61249923706055);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[11]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 191.1999969482422, Ⲇ * 207.01250076293945);
		Δ.bezierCurveTo(Ⲇ * 194.1999969482422, 213.01250076293945 * Ⲇ, 194.1999969482422 * Ⲇ, Ⲇ * 216.01250076293945, 196.1999969482422 * Ⲇ, Ⲇ * 218.01250076293945);
		Δ.bezierCurveTo(193.1999969482422 * Ⲇ, 220.01250076293945 * Ⲇ, 190.1999969482422 * Ⲇ, Ⲇ * 220.01250076293945, 188.1999969482422 * Ⲇ, 218.01250076293945 * Ⲇ);
		Δ.bezierCurveTo(189.6999969482422 * Ⲇ, 213.01250076293945 * Ⲇ, Ⲇ * 189.6999969482422, 213.01250076293945 * Ⲇ, 191.1999969482422 * Ⲇ, Ⲇ * 208.01250076293945);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[11]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(186.1999969482422 * Ⲇ, 203.21249961853027 * Ⲇ);
		Δ.bezierCurveTo(184.1999969482422 * Ⲇ, 209.21249961853027 * Ⲇ, 184.1999969482422 * Ⲇ, Ⲇ * 209.21249961853027, Ⲇ * 182.1999969482422, Ⲇ * 215.21249961853027);
		Δ.bezierCurveTo(177.1999969482422 * Ⲇ, 212.21249961853027 * Ⲇ, Ⲇ * 176.1999969482422, 211.21249961853027 * Ⲇ, Ⲇ * 177.1999969482422, 210.21249961853027 * Ⲇ);
		Δ.bezierCurveTo(181.6999969482422 * Ⲇ, 206.71249961853027 * Ⲇ, 181.6999969482422 * Ⲇ, 206.71249961853027 * Ⲇ, 186.1999969482422 * Ⲇ, 203.21249961853027 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[11]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 183.1999969482422, Ⲇ * 196.8125);
		Δ.bezierCurveTo(Ⲇ * 177.1999969482422, Ⲇ * 196.3125, 177.1999969482422 * Ⲇ, Ⲇ * 196.3125, 171.1999969482422 * Ⲇ, 195.8125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 171.1999969482422, Ⲇ * 199.8125, Ⲇ * 171.1999969482422, Ⲇ * 202.8125, Ⲇ * 174.1999969482422, Ⲇ * 204.8125);
		Δ.bezierCurveTo(Ⲇ * 178.6999969482422, Ⲇ * 200.8125, Ⲇ * 178.6999969482422, Ⲇ * 200.8125, 183.1999969482422 * Ⲇ, 196.8125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[11]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(185.1999969482422 * Ⲇ, 190.21249771118164 * Ⲇ);
		Δ.bezierCurveTo(179.6999969482422 * Ⲇ, Ⲇ * 186.71249771118164, 179.6999969482422 * Ⲇ, Ⲇ * 186.71249771118164, 174.1999969482422 * Ⲇ, 183.21249771118164 * Ⲇ);
		Δ.bezierCurveTo(172.1999969482422 * Ⲇ, Ⲇ * 186.21249771118164, Ⲇ * 172.1999969482422, Ⲇ * 187.21249771118164, Ⲇ * 172.1999969482422, 190.21249771118164 * Ⲇ);
		Δ.bezierCurveTo(178.1999969482422 * Ⲇ, Ⲇ * 190.21249771118164, Ⲇ * 178.1999969482422, Ⲇ * 190.21249771118164, Ⲇ * 184.1999969482422, Ⲇ * 190.21249771118164);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[11]);
		ⵠΔᐃ(Δ, Ⲇ * 126.19999694824219, 169.8125 * Ⲇ, 8.94427190999916 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆᐃⵠⲆⵠ]);
		ⵠΔᐃ(Δ, 123.19999694824219 * Ⲇ, Ⲇ * 164.8125, 2.8284271247461903 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔΔΔ]);
		ⵠΔᐃ(Δ, Ⲇ * 253.1999969482422, 169.8125 * Ⲇ, 8.94427190999916 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[12]);
		ⵠΔᐃ(Δ, 255.1999969482422 * Ⲇ, 164.8125 * Ⲇ, Ⲇ * 2.23606797749979);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔΔⲆΔΔ]);
		return ᐃⵠ
	}

	function ⵠᐃⵠⵠᐃΔᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 272 * Ⲇ;
		ᐃⵠ.height = 264 * Ⲇ;
		Δ.translate(0, 20 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 56.999969482421875, Ⲇ * 84.517333984375);
		Δ.bezierCurveTo(61.999969482421875 * Ⲇ, Ⲇ * 58.517333984375, 79.99996948242188 * Ⲇ, Ⲇ * 50.517333984375, 102.99996948242188 * Ⲇ, Ⲇ * 50.517333984375);
		Δ.bezierCurveTo(Ⲇ * 119.99996948242188, 26.517333984375 * Ⲇ, Ⲇ * 137.99996948242188, 32.517333984375 * Ⲇ, Ⲇ * 156.99996948242188, Ⲇ * 44.517333984375);
		Δ.bezierCurveTo(Ⲇ * 187.99996948242188, Ⲇ * 42.517333984375, 195.99996948242188 * Ⲇ, Ⲇ * 50.517333984375, 202.99996948242188 * Ⲇ, Ⲇ * 77.517333984375);
		Δ.bezierCurveTo(229.99996948242188 * Ⲇ, 80.517333984375 * Ⲇ, 231.99996948242188 * Ⲇ, 96.517333984375 * Ⲇ, 229.99996948242188 * Ⲇ, 118.517333984375 * Ⲇ);
		Δ.bezierCurveTo(241.99996948242188 * Ⲇ, Ⲇ * 147.517333984375, 236.99996948242188 * Ⲇ, 148.517333984375 * Ⲇ, 220.99996948242188 * Ⲇ, Ⲇ * 165.517333984375);
		Δ.bezierCurveTo(Ⲇ * 222.99996948242188, Ⲇ * 192.517333984375, 209.99996948242188 * Ⲇ, Ⲇ * 212.517333984375, Ⲇ * 177.99996948242188, Ⲇ * 213.517333984375);
		Δ.bezierCurveTo(Ⲇ * 159.99996948242188, Ⲇ * 234.517333984375, Ⲇ * 141.99996948242188, Ⲇ * 234.517333984375, 116.99996948242188 * Ⲇ, Ⲇ * 222.517333984375);
		Δ.bezierCurveTo(Ⲇ * 72.99996948242188, 226.517333984375 * Ⲇ, 66.99996948242188 * Ⲇ, 207.517333984375 * Ⲇ, Ⲇ * 65.99996948242188, 190.517333984375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 35.999969482421875, Ⲇ * 180.517333984375, 30.999969482421875 * Ⲇ, Ⲇ * 162.517333984375, 39.999969482421875 * Ⲇ, Ⲇ * 135.517333984375);
		Δ.bezierCurveTo(Ⲇ * 23.999969482421875, 110.517333984375 * Ⲇ, 43.999969482421875 * Ⲇ, Ⲇ * 90.517333984375, 55.999969482421875 * Ⲇ, Ⲇ * 85.517333984375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]);
		Δ.translate(ⲆᐃΔⵠ, -ᐃᐃⲆⵠΔ * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 56.999969482421875, Ⲇ * 84.517333984375);
		Δ.bezierCurveTo(Ⲇ * 61.999969482421875, 58.517333984375 * Ⲇ, Ⲇ * 79.99996948242188, 50.517333984375 * Ⲇ, 102.99996948242188 * Ⲇ, 50.517333984375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 119.99996948242188, 26.517333984375 * Ⲇ, 137.99996948242188 * Ⲇ, 32.517333984375 * Ⲇ, Ⲇ * 156.99996948242188, 44.517333984375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 187.99996948242188, 42.517333984375 * Ⲇ, 195.99996948242188 * Ⲇ, Ⲇ * 50.517333984375, 202.99996948242188 * Ⲇ, 77.517333984375 * Ⲇ);
		Δ.bezierCurveTo(229.99996948242188 * Ⲇ, 80.517333984375 * Ⲇ, 231.99996948242188 * Ⲇ, 96.517333984375 * Ⲇ, 229.99996948242188 * Ⲇ, Ⲇ * 118.517333984375);
		Δ.bezierCurveTo(Ⲇ * 241.99996948242188, Ⲇ * 147.517333984375, Ⲇ * 236.99996948242188, Ⲇ * 148.517333984375, 220.99996948242188 * Ⲇ, 165.517333984375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 222.99996948242188, 192.517333984375 * Ⲇ, Ⲇ * 209.99996948242188, Ⲇ * 212.517333984375, Ⲇ * 177.99996948242188, Ⲇ * 213.517333984375);
		Δ.bezierCurveTo(Ⲇ * 159.99996948242188, Ⲇ * 234.517333984375, 141.99996948242188 * Ⲇ, 234.517333984375 * Ⲇ, Ⲇ * 116.99996948242188, 222.517333984375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 72.99996948242188, Ⲇ * 226.517333984375, 66.99996948242188 * Ⲇ, Ⲇ * 207.517333984375, 65.99996948242188 * Ⲇ, 190.517333984375 * Ⲇ);
		Δ.bezierCurveTo(35.999969482421875 * Ⲇ, 180.517333984375 * Ⲇ, 30.999969482421875 * Ⲇ, Ⲇ * 162.517333984375, Ⲇ * 39.999969482421875, Ⲇ * 135.517333984375);
		Δ.bezierCurveTo(23.999969482421875 * Ⲇ, 110.517333984375 * Ⲇ, 43.999969482421875 * Ⲇ, Ⲇ * 90.517333984375, 55.999969482421875 * Ⲇ, Ⲇ * 85.517333984375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⲆ], Δⵠ[2], ⵠⵠᐃᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(123.99996948242188 * Ⲇ, 116.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(115.99996948242188 * Ⲇ, 99.18402099609375 * Ⲇ, 109.99996948242188 * Ⲇ, 74.18402099609375 * Ⲇ, Ⲇ * 109.99996948242188, Ⲇ * 63.18402099609375);
		Δ.bezierCurveTo(115.99996948242188 * Ⲇ, Ⲇ * 69.18402099609375, 125.99996948242188 * Ⲇ, Ⲇ * 87.18402099609375, Ⲇ * 137.99996948242188, Ⲇ * 112.18402099609375);
		Δ.bezierCurveTo(Ⲇ * 142.99996948242188, 84.18402099609375 * Ⲇ, 143.99996948242188 * Ⲇ, 76.18402099609375 * Ⲇ, 153.99996948242188 * Ⲇ, 62.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(155.99996948242188 * Ⲇ, 79.18402099609375 * Ⲇ, 149.99996948242188 * Ⲇ, Ⲇ * 110.18402099609375, 151.99996948242188 * Ⲇ, Ⲇ * 117.18402099609375);
		Δ.bezierCurveTo(Ⲇ * 162.99996948242188, Ⲇ * 104.18402099609375, Ⲇ * 180.99996948242188, Ⲇ * 91.18402099609375, Ⲇ * 191.99996948242188, 91.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(185.99996948242188 * Ⲇ, Ⲇ * 102.18402099609375, 180.99996948242188 * Ⲇ, 106.18402099609375 * Ⲇ, Ⲇ * 160.99996948242188, 124.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 190.99996948242188, Ⲇ * 121.18402099609375, 199.99996948242188 * Ⲇ, Ⲇ * 120.18402099609375, Ⲇ * 207.99996948242188, 123.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(199.99996948242188 * Ⲇ, 129.18402099609375 * Ⲇ, 181.99996948242188 * Ⲇ, Ⲇ * 132.18402099609375, 160.99996948242188 * Ⲇ, 135.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 179.99996948242188, 142.18402099609375 * Ⲇ, 193.99996948242188 * Ⲇ, 151.18402099609375 * Ⲇ, Ⲇ * 196.99996948242188, 156.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 185.99996948242188, 156.18402099609375 * Ⲇ, 163.99996948242188 * Ⲇ, 149.18402099609375 * Ⲇ, 152.99996948242188 * Ⲇ, 147.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(157.99996948242188 * Ⲇ, 155.18402099609375 * Ⲇ, 165.99996948242188 * Ⲇ, 176.18402099609375 * Ⲇ, Ⲇ * 169.99996948242188, 195.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(162.99996948242188 * Ⲇ, Ⲇ * 190.18402099609375, 147.99996948242188 * Ⲇ, 167.18402099609375 * Ⲇ, Ⲇ * 139.99996948242188, Ⲇ * 153.18402099609375);
		Δ.bezierCurveTo(Ⲇ * 137.99996948242188, Ⲇ * 167.18402099609375, Ⲇ * 126.99996948242188, Ⲇ * 194.18402099609375, 119.99996948242188 * Ⲇ, 204.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 117.99996948242188, Ⲇ * 186.18402099609375, 123.99996948242188 * Ⲇ, 165.18402099609375 * Ⲇ, 126.99996948242188 * Ⲇ, 149.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(110.99996948242188 * Ⲇ, 163.18402099609375 * Ⲇ, 103.99996948242188 * Ⲇ, Ⲇ * 170.18402099609375, Ⲇ * 82.99996948242188, Ⲇ * 177.18402099609375);
		Δ.bezierCurveTo(90.99996948242188 * Ⲇ, 162.18402099609375 * Ⲇ, 99.99996948242188 * Ⲇ, 153.18402099609375 * Ⲇ, 117.99996948242188 * Ⲇ, 140.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(97.99996948242188 * Ⲇ, 140.18402099609375 * Ⲇ, Ⲇ * 83.99996948242188, 139.18402099609375 * Ⲇ, Ⲇ * 65.99996948242188, 132.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(77.99996948242188 * Ⲇ, 127.18402099609375 * Ⲇ, Ⲇ * 95.99996948242188, Ⲇ * 127.18402099609375, Ⲇ * 115.99996948242188, Ⲇ * 127.18402099609375);
		Δ.bezierCurveTo(Ⲇ * 91.99996948242188, Ⲇ * 113.18402099609375, 84.99996948242188 * Ⲇ, Ⲇ * 107.18402099609375, Ⲇ * 76.99996948242188, 96.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(94.99996948242188 * Ⲇ, 99.18402099609375 * Ⲇ, 109.99996948242188 * Ⲇ, Ⲇ * 109.18402099609375, 123.99996948242188 * Ⲇ, 116.18402099609375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(131.99996948242188 * Ⲇ, Ⲇ * 119.18402099609375);
		Δ.bezierCurveTo(141.99996948242188 * Ⲇ, 119.18402099609375 * Ⲇ, 145.99996948242188 * Ⲇ, Ⲇ * 116.18402099609375, Ⲇ * 147.99996948242188, Ⲇ * 109.18402099609375);
		Δ.bezierCurveTo(Ⲇ * 151.99996948242188, Ⲇ * 107.18402099609375, 159.99996948242188 * Ⲇ, Ⲇ * 107.18402099609375, Ⲇ * 156.99996948242188, 123.18402099609375 * Ⲇ);
		Δ.bezierCurveTo(155.99996948242188 * Ⲇ, 140.18402099609375 * Ⲇ, Ⲇ * 142.99996948242188, Ⲇ * 149.18402099609375, Ⲇ * 132.99996948242188, Ⲇ * 147.18402099609375);
		Δ.bezierCurveTo(119.99996948242188 * Ⲇ, Ⲇ * 144.18402099609375, Ⲇ * 113.99996948242188, Ⲇ * 122.18402099609375, 131.99996948242188 * Ⲇ, Ⲇ * 119.18402099609375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⲆ], Δⵠ[5], Ⲇ * 6);
		return ᐃⵠ
	}

	function ᐃⵠⲆⵠⲆⲆᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 168;
		ᐃⵠ.height = Ⲇ * ᐃⲆⵠⵠΔ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ΔⲆⵠⲆ;
		Δ.translate(ⵠᐃⲆⲆΔ * Ⲇ, ᐃⵠΔⵠ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 24.5, 44.30000305175781 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -19.5, -8.5 * Ⲇ, Ⲇ * 39, Ⲇ * ⵠⲆΔΔⵠ, Ⲇ * ᐃⲆᐃⲆⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(115 * Ⲇ, Ⲇ * 37.80000305175781);
		Δ.bezierCurveTo(Ⲇ * 142, 37.80000305175781 * Ⲇ, Ⲇ * 140, Ⲇ * 37.80000305175781, Ⲇ * 141, 37.80000305175781 * Ⲇ);
		Δ.bezierCurveTo(147 * Ⲇ, Ⲇ * 28.800003051757812, Ⲇ * 149, Ⲇ * 26.800003051757812, Ⲇ * 153, 32.80000305175781 * Ⲇ);
		Δ.bezierCurveTo(160 * Ⲇ, Ⲇ * 42.80000305175781, 157 * Ⲇ, 50.80000305175781 * Ⲇ, Ⲇ * 153, Ⲇ * 58.80000305175781);
		Δ.bezierCurveTo(Ⲇ * 148, Ⲇ * 62.80000305175781, 147 * Ⲇ, 59.80000305175781 * Ⲇ, 143 * Ⲇ, 52.80000305175781 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 129, Ⲇ * 52.80000305175781, 129 * Ⲇ, 52.80000305175781 * Ⲇ, 115 * Ⲇ, 52.80000305175781 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]);
		ⵠΔᐃ(Δ, 78 * Ⲇ, 44.80000305175781 * Ⲇ, Ⲇ * 39.44616584663204);
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ⲆⵠΔΔ;
		Δ.translate(Ⲇ * -10, -5 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 24.5, Ⲇ * 44.30000305175781);
		ᐃΔⵠ(Δ, Ⲇ * -19.5, -8.5 * Ⲇ, 39 * Ⲇ, Ⲇ * 17, ⲆⲆᐃᐃⵠ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠᐃⵠⵠ], Ⲇ * ᐃⲆΔⵠⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(115 * Ⲇ, Ⲇ * 37.80000305175781);
		Δ.bezierCurveTo(Ⲇ * 142, Ⲇ * 37.80000305175781, 140 * Ⲇ, Ⲇ * 37.80000305175781, 141 * Ⲇ, Ⲇ * 37.80000305175781);
		Δ.bezierCurveTo(147 * Ⲇ, Ⲇ * 28.800003051757812, 149 * Ⲇ, Ⲇ * 26.800003051757812, 153 * Ⲇ, 32.80000305175781 * Ⲇ);
		Δ.bezierCurveTo(160 * Ⲇ, 42.80000305175781 * Ⲇ, 157 * Ⲇ, 50.80000305175781 * Ⲇ, Ⲇ * 153, Ⲇ * 58.80000305175781);
		Δ.bezierCurveTo(Ⲇ * 148, 62.80000305175781 * Ⲇ, Ⲇ * 147, 59.80000305175781 * Ⲇ, Ⲇ * 143, 52.80000305175781 * Ⲇ);
		Δ.bezierCurveTo(129 * Ⲇ, 52.80000305175781 * Ⲇ, 129 * Ⲇ, Ⲇ * 52.80000305175781, Ⲇ * 115, 52.80000305175781 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[3], Ⲇ * ⵠΔᐃᐃΔ);
		ⵠΔᐃ(Δ, Ⲇ * 78, 44.80000305175781 * Ⲇ, 42.44616584663204 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[3], 6 * Ⲇ);
		Δ.save();
		Δ.translate(24.5 * Ⲇ, Ⲇ * 44.30000305175781);
		ᐃΔⵠ(Δ, Ⲇ * -19.5, Ⲇ * -8.5, Ⲇ * 39, ⵠⲆⵠΔⵠΔᐃ * Ⲇ, ⵠΔⲆⲆΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⵠⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 115, Ⲇ * 37.80000305175781);
		Δ.bezierCurveTo(Ⲇ * 142, Ⲇ * 37.80000305175781, Ⲇ * 140, Ⲇ * 37.80000305175781, Ⲇ * 141, Ⲇ * 37.80000305175781);
		Δ.bezierCurveTo(147 * Ⲇ, 28.800003051757812 * Ⲇ, Ⲇ * 149, Ⲇ * 26.800003051757812, Ⲇ * 153, Ⲇ * 32.80000305175781);
		Δ.bezierCurveTo(160 * Ⲇ, Ⲇ * 42.80000305175781, Ⲇ * 157, Ⲇ * 50.80000305175781, Ⲇ * 153, Ⲇ * 58.80000305175781);
		Δ.bezierCurveTo(148 * Ⲇ, Ⲇ * 62.80000305175781, Ⲇ * 147, Ⲇ * 59.80000305175781, 143 * Ⲇ, 52.80000305175781 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 129, Ⲇ * 52.80000305175781, Ⲇ * 129, 52.80000305175781 * Ⲇ, 115 * Ⲇ, 52.80000305175781 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⵠ]);
		ⵠΔᐃ(Δ, Ⲇ * 78, 44.80000305175781 * Ⲇ, Ⲇ * 39.44616584663204);
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[1], Ⲇ * ᐃᐃⵠΔ);
		ⵠΔᐃ(Δ, Ⲇ * 78, 44.80000305175781 * Ⲇ, Ⲇ * 29.68164415931166);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔΔⵠ], ᐃⵠⵠⲆ * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 78, 44 * Ⲇ, ⲆΔⲆⲆⵠ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[4]);
		return ᐃⵠ
	}

	function ΔⵠⲆⵠⵠⲆΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 185 * Ⲇ;
		ᐃⵠ.height = 164 * Ⲇ;
		Δ.translate(ⵠⵠΔΔ, 0);
		var ⵠⵠ = ⵠᐃⵠⵠΔⵠᐃᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ);
		Δ.drawImage(ⵠⵠ, -ᐃᐃᐃⲆⵠ * Ⲇ, Ⲇ * 0);
		var ⵠⵠ = ⲆⲆⵠⲆΔⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ, 0);
		Δ.drawImage(ⵠⵠ, Ⲇ * -83, Ⲇ * -40);
		var ⵠⵠ = ⲆⲆⵠⲆΔⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ, Math.PI / 1.4);
		Δ.drawImage(ⵠⵠ, -15 * Ⲇ, Ⲇ * -88);
		var ⵠⵠ = ⲆⲆⵠⲆΔⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ, Math.PI / -1.4);
		Δ.drawImage(ⵠⵠ, ΔᐃΔⵠᐃ * Ⲇ, -ᐃᐃΔⲆⵠ * Ⲇ);
		return ᐃⵠ
	}

	function ᐃΔΔΔⵠⲆᐃᐃⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 496;
		ᐃⵠ.height = 520 * Ⲇ;
		Δ.globalAlpha = ⲆⲆΔⵠ;
		Δ.translate(ⵠⵠΔΔ, Ⲇ * -10);
		ⵠΔᐃ(Δ, 247.01138305664062 * Ⲇ, 250.13068389892578 * Ⲇ, Ⲇ * 232.81967270830015);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], ᐃᐃᐃⵠᐃᐃⲆ * Ⲇ);
		Δ.globalCompositeOperation = ᐃ[500];
		ⵠΔᐃ(Δ, 247.01138305664062 * Ⲇ, 249.3125 * Ⲇ, 161.4465855941215 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ], Δⵠ[ΔᐃⲆⲆ], Ⲇ * 14);
		Δ.globalCompositeOperation = ᐃ[ⵠⵠΔΔΔ];
		return ᐃⵠ
	}

	function ⵠΔⵠⵠΔᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 102;
		ᐃⵠ.height = 102 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ᐃᐃΔΔ, 3);
		ᐃΔⵠ(Δ, 24 * Ⲇ, 26 * Ⲇ, Ⲇ * 70, Ⲇ * ⲆΔΔΔΔ, Ⲇ * 10);
		ⵠᐃ(Δ, Δⵠ[0]);
		ᐃΔⵠ(Δ, Ⲇ * 26, Ⲇ * 70, Ⲇ * 70, Ⲇ * 9, 10 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ]);
		ᐃΔⵠ(Δ, ⵠᐃⵠᐃΔ * Ⲇ, 3 * Ⲇ, 22 * Ⲇ, Ⲇ * 94, ΔΔⵠⲆΔ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ]);
		ᐃΔⵠ(Δ, 40 * Ⲇ, ᐃΔᐃⲆ * Ⲇ, 22 * Ⲇ, 94 * Ⲇ, Ⲇ * 5);
		ⵠᐃ(Δ, Δⵠ[0]);
		ᐃΔⵠ(Δ, 75 * Ⲇ, ⲆΔⲆⲆ * Ⲇ, Ⲇ * 22, 94 * Ⲇ, Ⲇ * ⲆⵠⲆΔᐃ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔ]);
		Δ.globalAlpha = 1;
		Δ.translate(-ⵠⵠⲆⲆ, -ⵠᐃⵠΔ);
		ᐃΔⵠ(Δ, Ⲇ * 24, 26 * Ⲇ, Ⲇ * 70, Ⲇ * ΔᐃΔᐃΔ, Ⲇ * ΔⲆΔΔᐃ);
		ⵠᐃ(Δ, Δⵠ[1]);
		ᐃΔⵠ(Δ, 26 * Ⲇ, 70 * Ⲇ, Ⲇ * 70, Ⲇ * 9, Ⲇ * 10);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ]);
		ᐃΔⵠ(Δ, Ⲇ * 5, Ⲇ * ⵠⲆᐃΔ, 22 * Ⲇ, Ⲇ * 94, Ⲇ * 5);
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[3], Ⲇ * 4);
		ᐃΔⵠ(Δ, 40 * Ⲇ, ⲆΔⲆⲆ * Ⲇ, Ⲇ * 22, 94 * Ⲇ, Ⲇ * 5);
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ⵠⵠⲆⲆ], Ⲇ * ΔᐃⲆᐃⵠ);
		ᐃΔⵠ(Δ, 75 * Ⲇ, Ⲇ * 3, 22 * Ⲇ, 94 * Ⲇ, Ⲇ * 5);
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆΔ], Δⵠ[ⵠᐃⵠΔ], Ⲇ * ⵠⲆᐃⲆ);
		return ᐃⵠ
	}

	function ΔⵠΔⵠΔᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 89;
		ᐃⵠ.height = 89 * Ⲇ;
		Δ.save();
		Δ.translate(Ⲇ * 44.5, 44.5 * Ⲇ);
		ΔΔΔΔ(Δ, ⵠΔᐃᐃΔ, 40 * Ⲇ, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ], Δⵠ[ⲆⲆⵠ], Ⲇ * 5);
		Δ.save();
		Δ.translate(44.5 * Ⲇ, 44.5 * Ⲇ);
		ΔΔΔΔ(Δ, ⲆⲆⲆⵠΔ, Ⲇ * 25.11521001172521, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[Ⲇᐃⵠⵠ], Δⵠ[ⵠᐃⵠΔ], ⲆⵠⲆΔᐃ * Ⲇ);
		return ᐃⵠ
	}

	function ΔⵠⵠΔⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 80;
		ᐃⵠ.height = 160 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ⵠⲆⲆⵠ * Ⲇ, Ⲇ * ⲆΔⲆᐃᐃ);
		Δ.save();
		ᐃΔⵠ(Δ, 33 * Ⲇ, Ⲇ * 53, Ⲇ * 10, 98 * Ⲇ, ΔΔᐃⵠⲆ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(Ⲇ * -150, -100 * Ⲇ);
		Δ.moveTo(167.5 * Ⲇ, 171.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 188, 171.0625 * Ⲇ, 188 * Ⲇ, 171.0625 * Ⲇ, 208.5 * Ⲇ, Ⲇ * 171.0625);
		Δ.bezierCurveTo(Ⲇ * 208.5, 156.0625 * Ⲇ, 208.5 * Ⲇ, 156.0625 * Ⲇ, Ⲇ * 208.5, Ⲇ * 141.0625);
		Δ.bezierCurveTo(Ⲇ * 203.5, Ⲇ * 113.0625, 179.5 * Ⲇ, 96.0625 * Ⲇ, 167.5 * Ⲇ, Ⲇ * 141.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ]);
		Δ.restore();
		Δ.globalAlpha = 1;
		Δ.translate(Ⲇ * -ΔⲆⵠⵠ, -5 * Ⲇ);
		Δ.save();
		ᐃΔⵠ(Δ, Ⲇ * 33, 53 * Ⲇ, 10 * Ⲇ, Ⲇ * 98, 10 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠᐃᐃⲆ], Ⲇ * ⲆⲆⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(-150 * Ⲇ, -100 * Ⲇ);
		Δ.moveTo(Ⲇ * 167.5, 171.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 188, Ⲇ * 171.0625, Ⲇ * 188, Ⲇ * 171.0625, Ⲇ * 208.5, 171.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 208.5, Ⲇ * 156.0625, Ⲇ * 208.5, Ⲇ * 156.0625, 208.5 * Ⲇ, 141.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 203.5, 113.0625 * Ⲇ, Ⲇ * 179.5, 96.0625 * Ⲇ, 167.5 * Ⲇ, 141.0625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃⵠⵠⲆ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(Ⲇ * ⵠᐃⲆⵠ, ᐃΔⲆΔ * Ⲇ);
		Δ.moveTo(180.5 * Ⲇ, 169.0625 * Ⲇ);
		Δ.bezierCurveTo(180.5 * Ⲇ, Ⲇ * 157.5625, Ⲇ * 180.5, 157.5625 * Ⲇ, 180.5 * Ⲇ, Ⲇ * 146.0625);
		Δ.bezierCurveTo(181.5 * Ⲇ, 134.0625 * Ⲇ, Ⲇ * 193.5, Ⲇ * 129.0625, Ⲇ * 196.5, Ⲇ * 146.0625);
		Δ.bezierCurveTo(196.5 * Ⲇ, Ⲇ * 157.5625, Ⲇ * 196.5, Ⲇ * 157.5625, Ⲇ * 196.5, Ⲇ * 169.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⵠ]);
		Δ.restore();
		return ᐃⵠ
	}

	function ᐃⲆᐃᐃⵠΔᐃⵠⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 161 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 190;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 9, Ⲇ * 93);
		Δ.bezierCurveTo(Ⲇ * 17, Ⲇ * 95, Ⲇ * 19, Ⲇ * 95, 21 * Ⲇ, Ⲇ * 95);
		Δ.bezierCurveTo(Ⲇ * ΔᐃᐃᐃⲆΔΔ, 83 * Ⲇ, ⲆⵠᐃⲆⵠ * Ⲇ, 93 * Ⲇ, Ⲇ * ᐃⵠⵠⲆ, Ⲇ * 76);
		Δ.bezierCurveTo(Ⲇ * 11, Ⲇ * 75, Ⲇ * 11, Ⲇ * 75, Ⲇ * ⲆᐃΔΔᐃ, 75 * Ⲇ);
		Δ.bezierCurveTo(ΔᐃΔⲆΔ * Ⲇ, 67 * Ⲇ, Ⲇ * ⲆⵠⲆⵠⵠⲆⲆ, Ⲇ * 67, 7 * Ⲇ, Ⲇ * 59);
		Δ.bezierCurveTo(ⵠⵠⲆⵠⵠ * Ⲇ, Ⲇ * 59, 14 * Ⲇ, Ⲇ * 59, Ⲇ * 21, Ⲇ * 59);
		Δ.bezierCurveTo(Ⲇ * 46, 35 * Ⲇ, Ⲇ * 35, Ⲇ * 45, Ⲇ * 49, Ⲇ * 31);
		Δ.bezierCurveTo(Ⲇ * 53, 24 * Ⲇ, Ⲇ * 51, 21 * Ⲇ, 51 * Ⲇ, ⵠᐃᐃⵠⵠ * Ⲇ);
		Δ.bezierCurveTo(63 * Ⲇ, Ⲇ * 23, 63 * Ⲇ, Ⲇ * 24, 69 * Ⲇ, Ⲇ * 29);
		Δ.bezierCurveTo(76 * Ⲇ, Ⲇ * ⵠⲆᐃΔⵠ, 75 * Ⲇ, ⵠⵠⲆᐃⵠΔΔ * Ⲇ, 76 * Ⲇ, Ⲇ * 6);
		Δ.bezierCurveTo(81 * Ⲇ, Ⲇ * 12, 84 * Ⲇ, Ⲇ * ΔⲆᐃⵠⵠᐃΔ, 89 * Ⲇ, Ⲇ * 27);
		Δ.bezierCurveTo(95 * Ⲇ, Ⲇ * 25, 100 * Ⲇ, Ⲇ * 16, 105 * Ⲇ, 14 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 103, Ⲇ * 25, 111 * Ⲇ, Ⲇ * 33, Ⲇ * 110, Ⲇ * 34);
		Δ.bezierCurveTo(Ⲇ * 123, Ⲇ * 48, 123 * Ⲇ, 48 * Ⲇ, 136 * Ⲇ, 62 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 142, Ⲇ * 60, 147 * Ⲇ, Ⲇ * 59, 155 * Ⲇ, Ⲇ * 58);
		Δ.bezierCurveTo(147 * Ⲇ, Ⲇ * 65, Ⲇ * 147, 65 * Ⲇ, 139 * Ⲇ, Ⲇ * 73);
		Δ.bezierCurveTo(Ⲇ * 145, Ⲇ * 73, Ⲇ * 145, 73 * Ⲇ, Ⲇ * 151, 73 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 145, 80 * Ⲇ, 145 * Ⲇ, 80 * Ⲇ, 138 * Ⲇ, 87 * Ⲇ);
		Δ.bezierCurveTo(144 * Ⲇ, Ⲇ * 88, 144 * Ⲇ, Ⲇ * 88, Ⲇ * 150, 89 * Ⲇ);
		Δ.bezierCurveTo(125 * Ⲇ, 103 * Ⲇ, Ⲇ * 125, Ⲇ * 125, Ⲇ * 113, Ⲇ * 141);
		Δ.bezierCurveTo(Ⲇ * 92, 178 * Ⲇ, Ⲇ * 85, 177 * Ⲇ, 76 * Ⲇ, Ⲇ * 178);
		Δ.bezierCurveTo(Ⲇ * 64, 179 * Ⲇ, 51 * Ⲇ, 164 * Ⲇ, Ⲇ * 35, 131 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 18, 95 * Ⲇ, Ⲇ * 13, Ⲇ * 99, 8 * Ⲇ, Ⲇ * 93);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ, Δⵠ, ⲆⲆⲆΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(25 * Ⲇ, 63 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ΔᐃⵠⲆᐃⵠᐃ, Ⲇ * 58, ⲆⵠⲆⲆΔΔΔ * Ⲇ, 51 * Ⲇ, Ⲇ * 17, Ⲇ * 33);
		Δ.bezierCurveTo(ⵠᐃⵠⵠᐃⲆΔ * Ⲇ, 12 * Ⲇ, Ⲇ * 21, ⲆΔᐃⵠⲆⵠⵠ * Ⲇ, Ⲇ * 32, 17 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 63, 31 * Ⲇ, 66 * Ⲇ, Ⲇ * 45, 66 * Ⲇ, 54 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ, Δⵠ, Ⲇ * ᐃΔⵠᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 91, Ⲇ * 53);
		Δ.bezierCurveTo(Ⲇ * 91, 40 * Ⲇ, Ⲇ * 98, 33 * Ⲇ, 121 * Ⲇ, 20 * Ⲇ);
		Δ.bezierCurveTo(137 * Ⲇ, Ⲇ * ᐃⵠᐃⲆⵠ, 137 * Ⲇ, 16 * Ⲇ, Ⲇ * 139, 27 * Ⲇ);
		Δ.bezierCurveTo(141 * Ⲇ, 49 * Ⲇ, Ⲇ * 140, Ⲇ * 57, Ⲇ * 134, 64 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ, Δⵠ, 4 * Ⲇ);
		return ᐃⵠ
	}

	function ΔᐃⲆⵠᐃⲆΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 105 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 144;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ΔᐃⵠⲆ;
		Δ.translate(Ⲇ * -5, Ⲇ * 0);
		Δ.save();
		Δ.translate(Ⲇ * 52.5, Ⲇ * 91.5);
		ᐃΔⵠ(Δ, Ⲇ * -4.5, -39 * Ⲇ, 9 * Ⲇ, 78 * Ⲇ, Ⲇ * 5);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠⵠⲆΔ], ⲆΔⲆⲆ * Ⲇ);
		Δ.save();
		Δ.translate(53 * Ⲇ, 36 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -29, -17.5 * Ⲇ, Ⲇ * 58, 35 * Ⲇ, Ⲇ * Δᐃᐃⵠ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ], Δⵠ[ⲆᐃΔⵠ], ᐃΔΔΔⲆ * Ⲇ);
		Δ.save();
		Δ.translate(53.5 * Ⲇ, Ⲇ * 35.5);
		ᐃΔⵠ(Δ, Ⲇ * -26.5, Ⲇ * -ⵠⵠⲆΔⵠ, 53 * Ⲇ, Ⲇ * 30, 5 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⲆᐃΔⵠ], ᐃΔΔΔⲆ * Ⲇ);
		Δ.translate(Ⲇ * ⵠᐃⲆᐃ, Ⲇ * 0);
		Δ.globalAlpha = 1;
		Δ.save();
		Δ.translate(52.5 * Ⲇ, 91.5 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -4.5, Ⲇ * -39, 9 * Ⲇ, 78 * Ⲇ, Ⲇ * ⲆΔⲆᐃᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * 3);
		Δ.save();
		Δ.translate(Ⲇ * 53, Ⲇ * 36);
		ᐃΔⵠ(Δ, -29 * Ⲇ, Ⲇ * -17.5, 58 * Ⲇ, Ⲇ * 35, 5 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆⲆⲆΔ], Ⲇ * ΔΔᐃⵠΔ);
		Δ.save();
		Δ.translate(53.5 * Ⲇ, Ⲇ * 35.5);
		ᐃΔⵠ(Δ, -26.5 * Ⲇ, Ⲇ * -ⲆⵠΔΔᐃ, Ⲇ * 53, 30 * Ⲇ, Ⲇ * ⲆⵠⲆΔᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠᐃΔ], Δⵠ[6], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 49, Ⲇ * 60.5);
		Δ.bezierCurveTo(44 * Ⲇ, Ⲇ * 56.5, 44 * Ⲇ, 56.5 * Ⲇ, 39 * Ⲇ, Ⲇ * 52.5);
		Δ.bezierCurveTo(39 * Ⲇ, Ⲇ * 46.5, Ⲇ * 39, Ⲇ * 46.5, 39 * Ⲇ, Ⲇ * 40.5);
		Δ.bezierCurveTo(Ⲇ * 44, Ⲇ * 44, Ⲇ * 44, Ⲇ * 44, 49 * Ⲇ, 47.5 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 49, 54 * Ⲇ, Ⲇ * 49, Ⲇ * 54, Ⲇ * 49, Ⲇ * 60.5);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⵠⲆⲆⵠ], Δⵠ[ⵠΔⵠⵠⲆ], Ⲇ * ⵠΔΔᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 66, 40.5 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 66, Ⲇ * 46.5, Ⲇ * 66, 46.5 * Ⲇ, Ⲇ * 66, Ⲇ * 52.5);
		Δ.bezierCurveTo(Ⲇ * 60.5, Ⲇ * 56.5, Ⲇ * 60.5, 56.5 * Ⲇ, Ⲇ * 55, 60.5 * Ⲇ);
		Δ.bezierCurveTo(56 * Ⲇ, Ⲇ * 53, Ⲇ * 56, 53 * Ⲇ, 57 * Ⲇ, Ⲇ * 45.5);
		Δ.bezierCurveTo(Ⲇ * 61.5, 43 * Ⲇ, Ⲇ * 61.5, Ⲇ * 43, 66 * Ⲇ, 40.5 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⲆⵠⵠᐃ], Δⵠ[6], Ⲇⵠᐃᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(52 * Ⲇ, Ⲇ * 33.5);
		Δ.bezierCurveTo(55.5 * Ⲇ, 41 * Ⲇ, Ⲇ * 55.5, Ⲇ * 41, Ⲇ * 59, Ⲇ * 48.5);
		Δ.bezierCurveTo(Ⲇ * 56, Ⲇ * 58, 56 * Ⲇ, Ⲇ * 58, Ⲇ * 53, Ⲇ * 67.5);
		Δ.bezierCurveTo(49 * Ⲇ, 58 * Ⲇ, Ⲇ * 49, 58 * Ⲇ, 45 * Ⲇ, Ⲇ * 48.5);
		Δ.bezierCurveTo(48.5 * Ⲇ, Ⲇ * 41, Ⲇ * 48.5, 41 * Ⲇ, 52 * Ⲇ, Ⲇ * 33.5);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⲆⵠ], Δⵠ[ΔⲆⵠⵠⵠΔᐃ], 3 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(52 * Ⲇ, Ⲇ * 47.5);
		Δ.bezierCurveTo(54.5 * Ⲇ, 50.5 * Ⲇ, 54.5 * Ⲇ, 50.5 * Ⲇ, 57 * Ⲇ, Ⲇ * 53.5);
		Δ.bezierCurveTo(55 * Ⲇ, Ⲇ * 60, 55 * Ⲇ, Ⲇ * 60, Ⲇ * 53, Ⲇ * 66.5);
		Δ.bezierCurveTo(Ⲇ * 50.5, Ⲇ * 61, Ⲇ * 50.5, 61 * Ⲇ, Ⲇ * 48, Ⲇ * 55.5);
		Δ.bezierCurveTo(Ⲇ * 50, 52 * Ⲇ, Ⲇ * 50, 52 * Ⲇ, Ⲇ * 52, 48.5 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[11], Δⵠ[10], ⲆΔⲆᐃ * Ⲇ);
		return ᐃⵠ
	}

	function ᐃⵠΔⵠᐃⵠᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 253 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 192;
		Δ.globalAlpha = .5;
		Δ.save();
		Δ.translate(Ⲇ * 42, Ⲇ * 99);
		Δ.globalAlpha = .5;
		ᐃΔⵠ(Δ, Ⲇ * -7, Ⲇ * -ⵠⵠᐃΔᐃ, 14 * Ⲇ, Ⲇ * 39, Ⲇ * ΔΔΔΔᐃⵠⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]);
		Δ.globalAlpha = ⲆⵠΔΔ;
		Δ.save();
		Δ.translate(Ⲇ * 37, 94 * Ⲇ);
		ᐃΔⵠ(Δ, -ⲆⵠⵠΔᐃ * Ⲇ, -ⲆⲆⲆⵠⵠ * Ⲇ, Ⲇ * ⲆᐃᐃᐃΔᐃⲆ, 37 * Ⲇ, Ⲇ * ΔⵠΔΔΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.globalAlpha = .5;
		Δ.save();
		Δ.translate(Ⲇ * 136, Ⲇ * 99);
		Δ.globalAlpha = .5;
		ᐃΔⵠ(Δ, Ⲇ * -84, Ⲇ * -67, 168 * Ⲇ, Ⲇ * 134, Ⲇ * 20);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ], Δⵠ[ⵠᐃⵠ], Ⲇ * ⵠⵠᐃΔΔ);
		Δ.globalAlpha = 1;
		Δ.save();
		Δ.translate(Ⲇ * 131, 94 * Ⲇ);
		ᐃΔⵠ(Δ, -84 * Ⲇ, -67 * Ⲇ, 168 * Ⲇ, 134 * Ⲇ, Ⲇ * ⲆⲆⲆΔⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃᐃⲆ], Δⵠ[2], 13 * Ⲇ);
		Δ.save();
		Δ.translate(131 * Ⲇ, 94 * Ⲇ);
		ᐃΔⵠ(Δ, -76 * Ⲇ, -61 * Ⲇ, Ⲇ * 152, Ⲇ * 122, Ⲇ * ΔᐃⲆⲆⲆΔⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⲆ], Δⵠ[ᐃⲆⲆ], Ⲇ * 8);
		Δ.save();
		Δ.translate(168.5 * Ⲇ, 93.5 * Ⲇ);
		ᐃΔⵠ(Δ, -30.5 * Ⲇ, -58.5 * Ⲇ, Ⲇ * 61, Ⲇ * 117, Ⲇ * ⵠⲆΔⲆⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], Ⲇ * ⵠⵠⲆⲆⵠ);
		Δ.save();
		Δ.translate(Ⲇ * 93.5, 95.5 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -32, -59.5 * Ⲇ, 59 * Ⲇ, Ⲇ * 119, Ⲇ * ᐃᐃⲆⵠΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆⲆⲆΔ], 6 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 130.5, 94 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -36, -67 * Ⲇ, Ⲇ * 73, 134 * Ⲇ, Ⲇ * ⲆⵠᐃΔⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⵠ], Δⵠ[ΔⲆⵠΔ], Ⲇ * 8);
		Δ.globalAlpha = .5;
		Δ.save();
		Δ.translate(133 * Ⲇ, Ⲇ * 97);
		ᐃΔⵠ(Δ, -83 * Ⲇ, Ⲇ * -ⲆⵠΔΔⲆ, Ⲇ * 160, 24 * Ⲇ, Ⲇ * ⲆⲆᐃⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ⲆⲆᐃⵠ;
		Δ.save();
		Δ.translate(133 * Ⲇ, 92 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -83, -12 * Ⲇ, Ⲇ * 160, 24 * Ⲇ, Ⲇ * 0);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⵠ]);
		Δ.globalAlpha = .5;
		Δ.save();
		Δ.translate(Ⲇ * 228, 99.5 * Ⲇ);
		Δ.globalAlpha = .5;
		ᐃΔⵠ(Δ, Ⲇ * -ΔⲆⵠⵠ, Ⲇ * -18.5, Ⲇ * ⵠΔⲆⲆΔ, 37 * Ⲇ, Ⲇ * ⲆⲆⲆΔⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.save();
		Δ.translate(223 * Ⲇ, 94.5 * Ⲇ);
		ᐃΔⵠ(Δ, -ⲆⵠⲆΔᐃ * Ⲇ, Ⲇ * -18.5, Ⲇ * 10, Ⲇ * 37, Ⲇ * 20);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔⵠ]);
		Δ.save();
		Δ.translate(133.5 * Ⲇ, 175.5 * Ⲇ);
		Δ.globalAlpha = .5;
		ᐃΔⵠ(Δ, -22.5 * Ⲇ, -6.5 * Ⲇ, 45 * Ⲇ, Ⲇ * ΔᐃᐃΔᐃᐃΔ, ΔⲆⵠⵠᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ᐃⵠⵠⵠ;
		Δ.save();
		Δ.translate(128.5 * Ⲇ, Ⲇ * 170.5);
		ᐃΔⵠ(Δ, Ⲇ * -22.5, -6.5 * Ⲇ, Ⲇ * 45, 13 * Ⲇ, Ⲇ * ΔⲆⵠⵠᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⵠᐃ]);
		return ᐃⵠ
	}

	function ᐃᐃⲆⵠⵠⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 145 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 120;
		Δ.beginPath();
		Δ.scale(.6, .6);
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(ΔΔⵠΔᐃᐃᐃ * Ⲇ, -ⵠᐃᐃᐃᐃ * Ⲇ);
		Δ.moveTo(Ⲇ * 101, Ⲇ * 72);
		Δ.bezierCurveTo(Ⲇ * 144, Ⲇ * 69, Ⲇ * 149, 58 * Ⲇ, Ⲇ * 162, 49 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 174, 31 * Ⲇ, 173 * Ⲇ, Ⲇ * 38, 172 * Ⲇ, 45 * Ⲇ);
		Δ.bezierCurveTo(168 * Ⲇ, 73 * Ⲇ, Ⲇ * 158, Ⲇ * 75, 152 * Ⲇ, 78 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 106, Ⲇ * 89, 107 * Ⲇ, Ⲇ * 91, 107 * Ⲇ, 94 * Ⲇ);
		Δ.bezierCurveTo(107 * Ⲇ, 100 * Ⲇ, Ⲇ * 107, Ⲇ * 107, 107 * Ⲇ, 107 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 99, 112 * Ⲇ, 98 * Ⲇ, Ⲇ * 110, 93 * Ⲇ, Ⲇ * 107);
		Δ.bezierCurveTo(Ⲇ * 94, 107 * Ⲇ, Ⲇ * 93, 107 * Ⲇ, 93 * Ⲇ, 107 * Ⲇ);
		Δ.bezierCurveTo(93 * Ⲇ, Ⲇ * ⵠⵠⲆᐃⵠ, Ⲇ * 93, ΔⲆⲆᐃᐃᐃΔ * Ⲇ, 92 * Ⲇ, 94 * Ⲇ);
		Δ.bezierCurveTo(92 * Ⲇ, Ⲇ * 89, 90 * Ⲇ, Ⲇ * 90, Ⲇ * 73, Ⲇ * 86);
		Δ.bezierCurveTo(45 * Ⲇ, 81 * Ⲇ, Ⲇ * 40, 77 * Ⲇ, 35 * Ⲇ, Ⲇ * 68);
		Δ.bezierCurveTo(Ⲇ * 23, Ⲇ * 36, Ⲇ * 28, Ⲇ * 34, Ⲇ * 36, 46 * Ⲇ);
		Δ.bezierCurveTo(45 * Ⲇ, Ⲇ * 58, Ⲇ * 83, 72 * Ⲇ, Ⲇ * 98, Ⲇ * 72);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⵠΔⲆᐃ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.scale(1.1, 1.1);
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(-ΔⲆΔᐃΔ * Ⲇ, Ⲇ * 4);
		Δ.moveTo(Ⲇ * 101, 72 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 144, Ⲇ * 69, 149 * Ⲇ, 58 * Ⲇ, Ⲇ * 162, Ⲇ * 49);
		Δ.bezierCurveTo(Ⲇ * 174, 31 * Ⲇ, 173 * Ⲇ, Ⲇ * 38, Ⲇ * 172, Ⲇ * 45);
		Δ.bezierCurveTo(168 * Ⲇ, Ⲇ * 73, Ⲇ * 158, 75 * Ⲇ, Ⲇ * 152, Ⲇ * 78);
		Δ.bezierCurveTo(Ⲇ * 106, Ⲇ * 89, 107 * Ⲇ, 91 * Ⲇ, 107 * Ⲇ, Ⲇ * 94);
		Δ.bezierCurveTo(Ⲇ * 107, Ⲇ * ᐃⲆⵠⵠΔ, Ⲇ * 107, Ⲇ * 107, Ⲇ * 107, Ⲇ * 107);
		Δ.bezierCurveTo(Ⲇ * 99, Ⲇ * 112, 98 * Ⲇ, Ⲇ * 110, 93 * Ⲇ, 107 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 94, 107 * Ⲇ, Ⲇ * 93, Ⲇ * 107, 93 * Ⲇ, Ⲇ * 107);
		Δ.bezierCurveTo(Ⲇ * 93, ΔᐃⵠΔⲆ * Ⲇ, 93 * Ⲇ, Ⲇ * ΔᐃⵠΔⲆ, 92 * Ⲇ, Ⲇ * 94);
		Δ.bezierCurveTo(Ⲇ * 92, 89 * Ⲇ, Ⲇ * 90, 90 * Ⲇ, Ⲇ * 73, 86 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 45, Ⲇ * 81, Ⲇ * 40, Ⲇ * 77, 35 * Ⲇ, 68 * Ⲇ);
		Δ.bezierCurveTo(23 * Ⲇ, Ⲇ * 36, 28 * Ⲇ, 34 * Ⲇ, 36 * Ⲇ, Ⲇ * 46);
		Δ.bezierCurveTo(45 * Ⲇ, 58 * Ⲇ, 83 * Ⲇ, 72 * Ⲇ, Ⲇ * 98, 72 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], Ⲇ * ᐃΔⵠᐃⲆ);
		Δ.scale(1.1, 1.1);
		Δ.translate(Ⲇ * -ⲆⲆⵠⵠᐃ, Ⲇ * ΔΔΔⵠ);
		Δ.save();
		Δ.translate(ⲆⵠΔΔΔ * Ⲇ, 73.06874084472656 * Ⲇ);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, -61 * Ⲇ, Ⲇ * -38.5, 122 * Ⲇ, Ⲇ * 40, Ⲇ * 20);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃᐃⲆⵠ], 4 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 100, Ⲇ * 71.36874389648438);
		Δ.rotate(ⲆᐃΔⵠ);
		ᐃΔⵠ(Δ, Ⲇ * -60.5, Ⲇ * -18, Ⲇ * 121, Ⲇ * 30, Ⲇ * 20);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[2], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 144, 80 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 152, 100 * Ⲇ, Ⲇ * 152, Ⲇ * 101, Ⲇ * 153, 102 * Ⲇ);
		Δ.bezierCurveTo(159 * Ⲇ, Ⲇ * ᐃⲆⵠⵠΔ, Ⲇ * 159, 100 * Ⲇ, Ⲇ * 160, Ⲇ * ΔΔⵠⵠⲆ);
		Δ.bezierCurveTo(161 * Ⲇ, 84 * Ⲇ, 161 * Ⲇ, 84 * Ⲇ, 162 * Ⲇ, 68 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 57, Ⲇ * 75);
		Δ.bezierCurveTo(Ⲇ * 48, 101 * Ⲇ, 53 * Ⲇ, 89 * Ⲇ, Ⲇ * 48, Ⲇ * 102);
		Δ.bezierCurveTo(Ⲇ * 44, ΔⵠⵠΔᐃ * Ⲇ, 44 * Ⲇ, ⵠⵠⲆᐃⵠ * Ⲇ, 39 * Ⲇ, 97 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 39, Ⲇ * 83, Ⲇ * 39, Ⲇ * 83, Ⲇ * 39, 69 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(101 * Ⲇ, Ⲇ * 72);
		Δ.bezierCurveTo(Ⲇ * 144, 69 * Ⲇ, Ⲇ * 149, Ⲇ * 58, 162 * Ⲇ, 49 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 174, 31 * Ⲇ, 173 * Ⲇ, 38 * Ⲇ, Ⲇ * 172, 45 * Ⲇ);
		Δ.bezierCurveTo(168 * Ⲇ, Ⲇ * 73, Ⲇ * 158, 75 * Ⲇ, 152 * Ⲇ, 78 * Ⲇ);
		Δ.bezierCurveTo(106 * Ⲇ, 89 * Ⲇ, Ⲇ * 107, 91 * Ⲇ, 107 * Ⲇ, 94 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 107, Ⲇ * ⵠⵠⲆᐃⵠ, 107 * Ⲇ, 107 * Ⲇ, Ⲇ * 107, Ⲇ * 107);
		Δ.bezierCurveTo(99 * Ⲇ, Ⲇ * 112, 98 * Ⲇ, 110 * Ⲇ, Ⲇ * 93, 107 * Ⲇ);
		Δ.bezierCurveTo(94 * Ⲇ, 107 * Ⲇ, 93 * Ⲇ, 107 * Ⲇ, Ⲇ * 93, Ⲇ * 107);
		Δ.bezierCurveTo(93 * Ⲇ, 100 * Ⲇ, 93 * Ⲇ, ᐃᐃΔⵠⵠ * Ⲇ, Ⲇ * 92, 94 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 92, 89 * Ⲇ, 90 * Ⲇ, Ⲇ * 90, Ⲇ * 73, 86 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 45, 81 * Ⲇ, 40 * Ⲇ, 77 * Ⲇ, Ⲇ * 35, Ⲇ * 68);
		Δ.bezierCurveTo(23 * Ⲇ, 36 * Ⲇ, Ⲇ * 28, Ⲇ * 34, 36 * Ⲇ, 46 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 45, Ⲇ * 58, Ⲇ * 83, Ⲇ * 72, 98 * Ⲇ, Ⲇ * 72);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], 4 * Ⲇ);
		Δ.translate(0, 0);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 115.5, 116.07290649414062 * Ⲇ);
		Δ.bezierCurveTo(159.5 * Ⲇ, 99.07290649414062 * Ⲇ, 159.5 * Ⲇ, 98.07290649414062 * Ⲇ, Ⲇ * 159.5, Ⲇ * 98.07290649414062);
		Δ.bezierCurveTo(Ⲇ * 155.5, Ⲇ * 116.07290649414062, Ⲇ * 159.5, Ⲇ * 116.07290649414062, Ⲇ * 159.5, 118.07290649414062 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 147.5, 130.07290649414062 * Ⲇ, Ⲇ * 136.5, Ⲇ * 132.07290649414062, Ⲇ * 115.5, Ⲇ * 138.07290649414062);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠΔⵠⲆ], ⵠΔᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 39.5, Ⲇ * 96.07290649414062);
		Δ.bezierCurveTo(Ⲇ * 85.5, Ⲇ * 114.07290649414062, Ⲇ * 62.5, Ⲇ * 105.57290649414062, 85.5 * Ⲇ, 115.07290649414062 * Ⲇ);
		Δ.bezierCurveTo(85.5 * Ⲇ, Ⲇ * 125.57290649414062, Ⲇ * 85.5, 125.57290649414062 * Ⲇ, Ⲇ * 85.5, 136.07290649414062 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 51.5, 129.07290649414062 * Ⲇ, 51.5 * Ⲇ, Ⲇ * 125.07290649414062, 41.5 * Ⲇ, Ⲇ * 118.07290649414062);
		Δ.bezierCurveTo(Ⲇ * 44.5, Ⲇ * 106.07290649414062, 42.5 * Ⲇ, Ⲇ * 103.07290649414062, 40.5 * Ⲇ, Ⲇ * 96.07290649414062);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔΔΔ], Δⵠ[2], ΔΔⲆΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(86 * Ⲇ, Ⲇ * 80);
		Δ.bezierCurveTo(97 * Ⲇ, 88 * Ⲇ, 106 * Ⲇ, Ⲇ * 84, Ⲇ * 112, Ⲇ * 80);
		Δ.bezierCurveTo(112 * Ⲇ, 62 * Ⲇ, 106 * Ⲇ, 59 * Ⲇ, 99 * Ⲇ, 54 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 86, Ⲇ * 62, 86 * Ⲇ, 73 * Ⲇ, Ⲇ * 86, Ⲇ * 80);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃⵠΔⲆ], Ⲇ * 4);
		Δ.scale(.5, .5);
		Δ.translate(100 * Ⲇ, 71 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 86, 80 * Ⲇ);
		Δ.bezierCurveTo(97 * Ⲇ, Ⲇ * 88, 106 * Ⲇ, Ⲇ * 84, Ⲇ * 112, Ⲇ * 80);
		Δ.bezierCurveTo(112 * Ⲇ, Ⲇ * 62, 106 * Ⲇ, Ⲇ * 59, Ⲇ * 99, 54 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 86, 62 * Ⲇ, 86 * Ⲇ, 73 * Ⲇ, 86 * Ⲇ, 80 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[ⲆᐃᐃⲆ], Ⲇ * 4);
		return ᐃⵠ
	}

	function ᐃΔΔΔⵠⵠⲆⲆᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 65 * Ⲇ;
		ᐃⵠ.height = 131 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ᐃΔⵠΔ;
		Δ.translate(3, 0);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 21.25, Ⲇ * 88.9375);
		Δ.bezierCurveTo(Ⲇ * 19.25, 57.9375 * Ⲇ, Ⲇ * 19.25, 57.9375 * Ⲇ, Ⲇ * 17.25, 26.9375 * Ⲇ);
		Δ.bezierCurveTo(24.25 * Ⲇ, Ⲇ * 20.9375, Ⲇ * 24.25, Ⲇ * 20.9375, Ⲇ * 31.25, Ⲇ * 14.9375);
		Δ.bezierCurveTo(Ⲇ * 32.75, Ⲇ * 54.4375, 32.75 * Ⲇ, 54.4375 * Ⲇ, 34.25 * Ⲇ, 93.9375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 30.25, Ⲇ * 5.9375);
		Δ.bezierCurveTo(39.25 * Ⲇ, 14.9375 * Ⲇ, Ⲇ * 39.25, 14.9375 * Ⲇ, 48.25 * Ⲇ, 23.9375 * Ⲇ);
		Δ.bezierCurveTo(44.75 * Ⲇ, Ⲇ * 56.4375, Ⲇ * 44.75, 56.4375 * Ⲇ, Ⲇ * 41.25, 88.9375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 36.25, 88.9375 * Ⲇ, Ⲇ * 36.25, 88.9375 * Ⲇ, 31.25 * Ⲇ, Ⲇ * 88.9375);
		Δ.bezierCurveTo(Ⲇ * 30.75, 47.9375 * Ⲇ, 30.75 * Ⲇ, Ⲇ * 47.9375, 30.25 * Ⲇ, Ⲇ * 6.9375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃⲆΔ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(7.25 * Ⲇ, 85.4375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 31.75, 85.4375 * Ⲇ, 31.75 * Ⲇ, Ⲇ * 85.4375, Ⲇ * 56.25, 85.4375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 51.25, 91.9375 * Ⲇ, Ⲇ * 51.25, Ⲇ * 91.9375, 46.25 * Ⲇ, 98.4375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 30.25, 98.4375 * Ⲇ, 30.25 * Ⲇ, Ⲇ * 98.4375, Ⲇ * 14.25, 98.4375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], ⵠⲆᐃⲆ * Ⲇ);
		Δ.save();
		Δ.translate(31.25 * Ⲇ, 108.9375 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -6, Ⲇ * -14.5, 12 * Ⲇ, 29 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		Δ.globalAlpha = 1;
		Δ.translate(-3, 0);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 21.25, Ⲇ * 88.9375);
		Δ.bezierCurveTo(Ⲇ * 19.25, Ⲇ * 57.9375, 19.25 * Ⲇ, 57.9375 * Ⲇ, 17.25 * Ⲇ, 26.9375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 24.25, 20.9375 * Ⲇ, Ⲇ * 24.25, Ⲇ * 20.9375, Ⲇ * 31.25, 14.9375 * Ⲇ);
		Δ.bezierCurveTo(32.75 * Ⲇ, Ⲇ * 54.4375, Ⲇ * 32.75, 54.4375 * Ⲇ, Ⲇ * 34.25, 93.9375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 30.25, 5.9375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 39.25, 14.9375 * Ⲇ, Ⲇ * 39.25, Ⲇ * 14.9375, 48.25 * Ⲇ, Ⲇ * 23.9375);
		Δ.bezierCurveTo(44.75 * Ⲇ, Ⲇ * 56.4375, Ⲇ * 44.75, Ⲇ * 56.4375, Ⲇ * 41.25, 88.9375 * Ⲇ);
		Δ.bezierCurveTo(36.25 * Ⲇ, Ⲇ * 88.9375, Ⲇ * 36.25, Ⲇ * 88.9375, 31.25 * Ⲇ, Ⲇ * 88.9375);
		Δ.bezierCurveTo(30.75 * Ⲇ, 47.9375 * Ⲇ, Ⲇ * 30.75, Ⲇ * 47.9375, Ⲇ * 30.25, Ⲇ * 6.9375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ⲆⲆⵠ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 7.25, Ⲇ * 85.4375);
		Δ.bezierCurveTo(Ⲇ * 31.75, 85.4375 * Ⲇ, Ⲇ * 31.75, Ⲇ * 85.4375, 56.25 * Ⲇ, Ⲇ * 85.4375);
		Δ.bezierCurveTo(51.25 * Ⲇ, Ⲇ * 91.9375, Ⲇ * 51.25, Ⲇ * 91.9375, 46.25 * Ⲇ, 98.4375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 30.25, Ⲇ * 98.4375, Ⲇ * 30.25, 98.4375 * Ⲇ, Ⲇ * 14.25, Ⲇ * 98.4375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⵠΔ], Δⵠ[5], ⵠΔᐃⲆ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 31.25, Ⲇ * 108.9375);
		ᐃΔⵠ(Δ, -ᐃⵠⵠᐃⵠ * Ⲇ, -14.5 * Ⲇ, Ⲇ * 12, Ⲇ * 29, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠΔᐃⲆ], Δⵠ[5], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 31.25, Ⲇ * 73.4375);
		Δ.bezierCurveTo(33.25 * Ⲇ, Ⲇ * 77.9375, Ⲇ * 33.25, Ⲇ * 77.9375, 35.25 * Ⲇ, 82.4375 * Ⲇ);
		Δ.bezierCurveTo(33.25 * Ⲇ, Ⲇ * 87.4375, Ⲇ * 33.25, 87.4375 * Ⲇ, Ⲇ * 31.25, 92.4375 * Ⲇ);
		Δ.bezierCurveTo(29.25 * Ⲇ, Ⲇ * 87.9375, Ⲇ * 29.25, 87.9375 * Ⲇ, 27.25 * Ⲇ, Ⲇ * 83.4375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔΔΔᐃ], ᐃᐃΔⵠ * Ⲇ);
		return ᐃⵠ
	}

	function ⲆⲆᐃΔⵠΔⵠΔᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 316 * Ⲇ;
		ᐃⵠ.height = 365 * Ⲇ;
		Δ.save();
		Δ.translate(156.07142639160156 * Ⲇ, Ⲇ * 51.81248474121094);
		Δ.rotate(Δⵠⵠ);
		ᐃΔⵠ(Δ, -21.5 * Ⲇ, -34 * Ⲇ, 43 * Ⲇ, Ⲇ * 68, 8 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], 15 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(126.57142639160156 * Ⲇ, Ⲇ * 67.38392639160156);
		Δ.bezierCurveTo(Ⲇ * 126.57142639160156, 57.38392639160156 * Ⲇ, 132.57142639160156 * Ⲇ, Ⲇ * 54.38392639160156, 140.57142639160156 * Ⲇ, Ⲇ * 54.38392639160156);
		Δ.bezierCurveTo(177.57142639160156 * Ⲇ, 55.38392639160156 * Ⲇ, Ⲇ * 158.07142639160156, Ⲇ * 54.38392639160156, 175.57142639160156 * Ⲇ, Ⲇ * 54.38392639160156);
		Δ.bezierCurveTo(Ⲇ * 185.57142639160156, Ⲇ * 56.38392639160156, 185.57142639160156 * Ⲇ, 57.38392639160156 * Ⲇ, Ⲇ * 184.57142639160156, Ⲇ * 66.38392639160156);
		Δ.bezierCurveTo(184.57142639160156 * Ⲇ, 78.38392639160156 * Ⲇ, 184.57142639160156 * Ⲇ, 89.38392639160156 * Ⲇ, Ⲇ * 184.57142639160156, 90.38392639160156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 177.57142639160156, 107.38392639160156 * Ⲇ, 180.57142639160156 * Ⲇ, Ⲇ * 112.38392639160156, Ⲇ * 189.57142639160156, Ⲇ * 116.38392639160156);
		Δ.bezierCurveTo(Ⲇ * 212.57142639160156, 127.38392639160156 * Ⲇ, 212.57142639160156 * Ⲇ, 132.38392639160156 * Ⲇ, Ⲇ * 211.57142639160156, 150.38392639160156 * Ⲇ);
		Δ.bezierCurveTo(211.57142639160156 * Ⲇ, 227.59821128845215 * Ⲇ, Ⲇ * 211.57142639160156, Ⲇ * 227.59821128845215, 211.57142639160156 * Ⲇ, Ⲇ * 304.81249618530273);
		Δ.bezierCurveTo(212.57142639160156 * Ⲇ, 328.81249618530273 * Ⲇ, 209.57142639160156 * Ⲇ, Ⲇ * 330.81249618530273, Ⲇ * 188.57142639160156, Ⲇ * 333.81249618530273);
		Δ.bezierCurveTo(Ⲇ * 155.07142639160156, Ⲇ * 333.31249618530273, Ⲇ * 155.07142639160156, Ⲇ * 333.31249618530273, Ⲇ * 121.57142639160156, 332.81249618530273 * Ⲇ);
		Δ.bezierCurveTo(104.57142639160156 * Ⲇ, Ⲇ * 327.81249618530273, Ⲇ * 105.57142639160156, Ⲇ * 328.81249618530273, 104.57142639160156 * Ⲇ, 312.81249618530273 * Ⲇ);
		Δ.bezierCurveTo(104.57142639160156 * Ⲇ, Ⲇ * 228.16963958740234, 104.57142639160156 * Ⲇ, 228.16963958740234 * Ⲇ, Ⲇ * 104.57142639160156, Ⲇ * 143.52678298950195);
		Δ.bezierCurveTo(Ⲇ * 106.57142639160156, 124.52678298950195 * Ⲇ, Ⲇ * 110.57142639160156, Ⲇ * 123.52678298950195, Ⲇ * 123.57142639160156, 116.52678298950195 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 136.57142639160156, 110.52678298950195 * Ⲇ, Ⲇ * 130.57142639160156, 106.52678298950195 * Ⲇ, Ⲇ * 126.57142639160156, Ⲇ * 98.52678298950195);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ], Δⵠ[0], Ⲇ * 15);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 125.57142639160156, Ⲇ * 156.66963958740234);
		Δ.bezierCurveTo(125.57142639160156 * Ⲇ, Ⲇ * 182.66963958740234, 125.57142639160156 * Ⲇ, 182.66963958740234 * Ⲇ, 125.57142639160156 * Ⲇ, Ⲇ * 208.66963958740234);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆⵠ], Δⵠ[Δⵠⵠ], Ⲇ * 15);
		return ᐃⵠ
	}

	function ⲆⵠᐃⵠⲆⵠⵠⵠⵠ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 167 * Ⲇ;
		ᐃⵠ.height = 136 * Ⲇ;
		Δ.globalAlpha = .5;
		Δ.save();
		Δ.translate(76.71426391601562 * Ⲇ, Ⲇ * 67.85713195800781);
		ᐃΔⵠ(Δ, -57.5 * Ⲇ, Ⲇ * -54.5, 115 * Ⲇ, 109 * Ⲇ, Ⲇ * 15);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = .8;
		Δ.save();
		Δ.translate(Ⲇ * 76.71426391601562, Ⲇ * 67.85713195800781);
		ᐃΔⵠ(Δ, Ⲇ * -57.5, Ⲇ * -54.5, 115 * Ⲇ, 109 * Ⲇ, Ⲇ * 15);
		Δ.restore();
		ⵠᐃ(Δ, ΔⵠᐃΔᐃ, Δⵠ[ΔᐃⵠⲆ], Ⲇ * 7);
		Δ.globalAlpha = .5;
		Δ.save();
		Δ.translate(Ⲇ * 91.21426391601562, 67.35713195800781 * Ⲇ);
		ᐃΔⵠ(Δ, -56 * Ⲇ, -55 * Ⲇ, Ⲇ * 115, Ⲇ * 109, Ⲇ * 15);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ⲆⲆⲆᐃ;
		Δ.save();
		Δ.translate(91.21426391601562 * Ⲇ, Ⲇ * 67.35713195800781);
		ᐃΔⵠ(Δ, Ⲇ * -56, Ⲇ * -55, 115 * Ⲇ, Ⲇ * 109, 15 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, ΔⲆᐃⲆⵠ, Δⵠ[ΔⲆⵠⲆ], Ⲇ * 7);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 131.21426391601562, Ⲇ * 70.35713195800781);
		Δ.bezierCurveTo(133.21426391601562 * Ⲇ, Ⲇ * 95.35713195800781, Ⲇ * 128.21426391601562, Ⲇ * 109.35713195800781, 108.21426391601562 * Ⲇ, Ⲇ * 108.35713195800781);
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[1], Ⲇ * ⵠΔⵠᐃⵠ);
		return ᐃⵠ
	}

	function ᐃⵠⲆⲆᐃᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 198;
		ᐃⵠ.height = Ⲇ * 147;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⵠΔΔ;
		Δ.translate(ⵠᐃⲆⵠ, ΔⵠΔᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 44, Ⲇ * 76);
		Δ.bezierCurveTo(Ⲇ * 50, Ⲇ * 82, 50 * Ⲇ, 82 * Ⲇ, 56 * Ⲇ, Ⲇ * 88);
		Δ.bezierCurveTo(59 * Ⲇ, 82 * Ⲇ, 59 * Ⲇ, Ⲇ * 82, 62 * Ⲇ, 76 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 59, 71 * Ⲇ, 59 * Ⲇ, 71 * Ⲇ, 56 * Ⲇ, 66 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 59, Ⲇ * 69, Ⲇ * 59, 69 * Ⲇ, 62 * Ⲇ, Ⲇ * 72);
		Δ.bezierCurveTo(80 * Ⲇ, Ⲇ * 48, Ⲇ * 102, 50 * Ⲇ, Ⲇ * 120, 62 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 127, 58 * Ⲇ, 127 * Ⲇ, 58 * Ⲇ, Ⲇ * 134, Ⲇ * 54);
		Δ.bezierCurveTo(129 * Ⲇ, Ⲇ * 60, Ⲇ * 129, 60 * Ⲇ, Ⲇ * 124, 66 * Ⲇ);
		Δ.bezierCurveTo(129 * Ⲇ, Ⲇ * 73, 129 * Ⲇ, Ⲇ * 73, Ⲇ * 134, 80 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 140, Ⲇ * 74, 140 * Ⲇ, 74 * Ⲇ, 146 * Ⲇ, Ⲇ * 68);
		Δ.bezierCurveTo(142 * Ⲇ, 76 * Ⲇ, Ⲇ * 142, 76 * Ⲇ, 138 * Ⲇ, 84 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 144, 90 * Ⲇ, 142 * Ⲇ, 90 * Ⲇ, Ⲇ * 144, 90 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 136, Ⲇ * 97, Ⲇ * 136, 97 * Ⲇ, Ⲇ * 128, 104 * Ⲇ);
		Δ.bezierCurveTo(154 * Ⲇ, 110 * Ⲇ, 164 * Ⲇ, 90 * Ⲇ, Ⲇ * 160, Ⲇ * 80);
		Δ.bezierCurveTo(Ⲇ * 138, Ⲇ * 22, 148 * Ⲇ, 51 * Ⲇ, 136 * Ⲇ, Ⲇ * 22);
		Δ.bezierCurveTo(Ⲇ * 97, 24 * Ⲇ, 97 * Ⲇ, Ⲇ * 24, 58 * Ⲇ, 26 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 47, Ⲇ * 54, Ⲇ * 36, Ⲇ * 80, Ⲇ * 36, Ⲇ * 82);
		Δ.bezierCurveTo(40 * Ⲇ, 108 * Ⲇ, Ⲇ * 54, Ⲇ * 104, 62 * Ⲇ, Ⲇ * 104);
		Δ.bezierCurveTo(46 * Ⲇ, Ⲇ * 92, Ⲇ * 54, 97 * Ⲇ, Ⲇ * 46, 90 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(36 * Ⲇ, 80 * Ⲇ);
		Δ.bezierCurveTo(30 * Ⲇ, Ⲇ * 84, 28 * Ⲇ, Ⲇ * 92, 34 * Ⲇ, ΔΔⵠⵠⲆ * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 41.5, 102 * Ⲇ, 41.5 * Ⲇ, Ⲇ * 102, 49 * Ⲇ, Ⲇ * 104);
		Δ.bezierCurveTo(43 * Ⲇ, Ⲇ * 105.5, 43 * Ⲇ, 105.5 * Ⲇ, 37 * Ⲇ, Ⲇ * 107);
		Δ.bezierCurveTo(Ⲇ * 46, Ⲇ * 111, 60 * Ⲇ, Ⲇ * 114, Ⲇ * 76, Ⲇ * 114);
		Δ.bezierCurveTo(Ⲇ * 78, 110.5 * Ⲇ, 78 * Ⲇ, 110.5 * Ⲇ, Ⲇ * 80, 107 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 81, 110.5 * Ⲇ, 81 * Ⲇ, Ⲇ * 110.5, Ⲇ * 82, 114 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 94.5, 113.5 * Ⲇ, 94.5 * Ⲇ, Ⲇ * 113.5, 107 * Ⲇ, 113 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 108.5, Ⲇ * 110, 108.5 * Ⲇ, 110 * Ⲇ, Ⲇ * 110, 107 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 111.5, 110.5 * Ⲇ, Ⲇ * 111.5, Ⲇ * 110.5, Ⲇ * 113, 114 * Ⲇ);
		Δ.bezierCurveTo(131 * Ⲇ, Ⲇ * 112.5, 131 * Ⲇ, 112.5 * Ⲇ, 149 * Ⲇ, 111 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 148.5, Ⲇ * 107.5, Ⲇ * 148.5, 107.5 * Ⲇ, Ⲇ * 148, 104 * Ⲇ);
		Δ.bezierCurveTo(150.5 * Ⲇ, Ⲇ * 107, 150.5 * Ⲇ, 107 * Ⲇ, 153 * Ⲇ, 110 * Ⲇ);
		Δ.bezierCurveTo(155.5 * Ⲇ, 108.5 * Ⲇ, Ⲇ * 155.5, Ⲇ * 108.5, Ⲇ * 158, Ⲇ * 107);
		Δ.bezierCurveTo(156.5 * Ⲇ, 104 * Ⲇ, Ⲇ * 156.5, Ⲇ * 104, 155 * Ⲇ, Ⲇ * 101);
		Δ.bezierCurveTo(158.5 * Ⲇ, Ⲇ * 102.5, 158.5 * Ⲇ, 102.5 * Ⲇ, Ⲇ * 162, 104 * Ⲇ);
		Δ.bezierCurveTo(168 * Ⲇ, ⲆⲆⵠⵠⵠⵠᐃ * Ⲇ, Ⲇ * 170, Ⲇ * 92, Ⲇ * 169, 85 * Ⲇ);
		Δ.bezierCurveTo(166 * Ⲇ, 86 * Ⲇ, 166 * Ⲇ, 86 * Ⲇ, 163 * Ⲇ, Ⲇ * 87);
		Δ.bezierCurveTo(Ⲇ * 165.5, Ⲇ * 83, Ⲇ * 165.5, 83 * Ⲇ, Ⲇ * 168, 79 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 165.5, Ⲇ * 76.5, 165.5 * Ⲇ, Ⲇ * 76.5, 163 * Ⲇ, 74 * Ⲇ);
		Δ.bezierCurveTo(155 * Ⲇ, Ⲇ * 82.5, Ⲇ * 155, Ⲇ * 82.5, Ⲇ * 147, 91 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 139, Ⲇ * 95.5, 139 * Ⲇ, 95.5 * Ⲇ, Ⲇ * 131, Ⲇ * 100);
		Δ.bezierCurveTo(Ⲇ * 97.5, Ⲇ * 100.5, 97.5 * Ⲇ, 100.5 * Ⲇ, Ⲇ * 64, Ⲇ * 101);
		Δ.bezierCurveTo(Ⲇ * 49, 102 * Ⲇ, 43 * Ⲇ, 90 * Ⲇ, 36 * Ⲇ, 80 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(0, Ⲇ * -6);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(36 * Ⲇ, Ⲇ * 80);
		Δ.bezierCurveTo(30 * Ⲇ, 84 * Ⲇ, 28 * Ⲇ, 92 * Ⲇ, Ⲇ * 34, 100 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 41.5, Ⲇ * 102, 41.5 * Ⲇ, Ⲇ * 102, 49 * Ⲇ, 104 * Ⲇ);
		Δ.bezierCurveTo(43 * Ⲇ, Ⲇ * 105.5, Ⲇ * 43, Ⲇ * 105.5, 37 * Ⲇ, 107 * Ⲇ);
		Δ.bezierCurveTo(46 * Ⲇ, 111 * Ⲇ, 60 * Ⲇ, Ⲇ * 114, Ⲇ * 76, 114 * Ⲇ);
		Δ.bezierCurveTo(78 * Ⲇ, 110.5 * Ⲇ, 78 * Ⲇ, Ⲇ * 110.5, Ⲇ * 80, 107 * Ⲇ);
		Δ.bezierCurveTo(81 * Ⲇ, Ⲇ * 110.5, 81 * Ⲇ, 110.5 * Ⲇ, Ⲇ * 82, Ⲇ * 114);
		Δ.bezierCurveTo(Ⲇ * 94.5, Ⲇ * 113.5, Ⲇ * 94.5, Ⲇ * 113.5, 107 * Ⲇ, Ⲇ * 113);
		Δ.bezierCurveTo(108.5 * Ⲇ, 110 * Ⲇ, 108.5 * Ⲇ, Ⲇ * 110, Ⲇ * 110, Ⲇ * 107);
		Δ.bezierCurveTo(Ⲇ * 111.5, Ⲇ * 110.5, Ⲇ * 111.5, Ⲇ * 110.5, 113 * Ⲇ, 114 * Ⲇ);
		Δ.bezierCurveTo(131 * Ⲇ, 112.5 * Ⲇ, 131 * Ⲇ, 112.5 * Ⲇ, Ⲇ * 149, Ⲇ * 111);
		Δ.bezierCurveTo(Ⲇ * 148.5, 107.5 * Ⲇ, Ⲇ * 148.5, 107.5 * Ⲇ, 148 * Ⲇ, Ⲇ * 104);
		Δ.bezierCurveTo(Ⲇ * 150.5, 107 * Ⲇ, 150.5 * Ⲇ, 107 * Ⲇ, 153 * Ⲇ, 110 * Ⲇ);
		Δ.bezierCurveTo(155.5 * Ⲇ, 108.5 * Ⲇ, Ⲇ * 155.5, 108.5 * Ⲇ, Ⲇ * 158, 107 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 156.5, Ⲇ * 104, 156.5 * Ⲇ, 104 * Ⲇ, Ⲇ * 155, Ⲇ * 101);
		Δ.bezierCurveTo(Ⲇ * 158.5, Ⲇ * 102.5, Ⲇ * 158.5, 102.5 * Ⲇ, 162 * Ⲇ, 104 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 168, Ⲇ * 100, 170 * Ⲇ, Ⲇ * 92, 169 * Ⲇ, 85 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 166, Ⲇ * 86, 166 * Ⲇ, 86 * Ⲇ, Ⲇ * 163, 87 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 165.5, Ⲇ * 83, Ⲇ * 165.5, 83 * Ⲇ, 168 * Ⲇ, Ⲇ * 79);
		Δ.bezierCurveTo(165.5 * Ⲇ, Ⲇ * 76.5, 165.5 * Ⲇ, 76.5 * Ⲇ, 163 * Ⲇ, Ⲇ * 74);
		Δ.bezierCurveTo(Ⲇ * 155, 82.5 * Ⲇ, 155 * Ⲇ, 82.5 * Ⲇ, Ⲇ * 147, 91 * Ⲇ);
		Δ.bezierCurveTo(139 * Ⲇ, Ⲇ * 95.5, 139 * Ⲇ, Ⲇ * 95.5, Ⲇ * 131, Ⲇ * ⲆⲆⵠⵠⵠⵠᐃ);
		Δ.bezierCurveTo(97.5 * Ⲇ, 100.5 * Ⲇ, 97.5 * Ⲇ, Ⲇ * 100.5, Ⲇ * 64, 101 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 49, Ⲇ * 102, 43 * Ⲇ, 90 * Ⲇ, 36 * Ⲇ, 80 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * ⵠΔⲆᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 49, 98 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 96.5, 98 * Ⲇ, Ⲇ * 96.5, Ⲇ * 98, 144 * Ⲇ, 98 * Ⲇ);
		Δ.bezierCurveTo(136.5 * Ⲇ, 102 * Ⲇ, Ⲇ * 136.5, Ⲇ * 102, Ⲇ * 129, 106 * Ⲇ);
		Δ.bezierCurveTo(103 * Ⲇ, Ⲇ * 105.5, 103 * Ⲇ, 105.5 * Ⲇ, Ⲇ * 77, 105 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 65, Ⲇ * 105, 65 * Ⲇ, Ⲇ * 105, 53 * Ⲇ, Ⲇ * 105);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.globalAlpha = .5;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 54, Ⲇ * 98);
		Δ.bezierCurveTo(97 * Ⲇ, Ⲇ * 98, Ⲇ * 97, 98 * Ⲇ, Ⲇ * 140, Ⲇ * 98);
		Δ.bezierCurveTo(134 * Ⲇ, Ⲇ * 101, Ⲇ * 134, Ⲇ * 101, Ⲇ * 128, 104 * Ⲇ);
		Δ.bezierCurveTo(92 * Ⲇ, 104 * Ⲇ, 92 * Ⲇ, 104 * Ⲇ, 56 * Ⲇ, Ⲇ * 104);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ]);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 118, 47 * Ⲇ);
		Δ.bezierCurveTo(124.5 * Ⲇ, Ⲇ * 43.5, Ⲇ * 124.5, 43.5 * Ⲇ, 131 * Ⲇ, 40 * Ⲇ);
		Δ.bezierCurveTo(128 * Ⲇ, 46 * Ⲇ, 128 * Ⲇ, 46 * Ⲇ, Ⲇ * 125, Ⲇ * 52);
		Δ.bezierCurveTo(Ⲇ * 131, Ⲇ * 57, Ⲇ * 135, 64 * Ⲇ, 139 * Ⲇ, Ⲇ * 73);
		Δ.bezierCurveTo(142.5 * Ⲇ, 69.5 * Ⲇ, 142.5 * Ⲇ, Ⲇ * 69.5, Ⲇ * 146, 66 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 143.5, Ⲇ * 72.5, Ⲇ * 143.5, 72.5 * Ⲇ, 141 * Ⲇ, 79 * Ⲇ);
		Δ.bezierCurveTo(142 * Ⲇ, Ⲇ * 91, Ⲇ * 141, 94 * Ⲇ, 132 * Ⲇ, Ⲇ * 98);
		Δ.bezierCurveTo(Ⲇ * 117, Ⲇ * 102, Ⲇ * 126, 108 * Ⲇ, 142 * Ⲇ, 102 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 159, 98 * Ⲇ, 164 * Ⲇ, 80 * Ⲇ, Ⲇ * 162, Ⲇ * 47);
		Δ.bezierCurveTo(Ⲇ * 160, Ⲇ * 19, Ⲇ * 150, Ⲇ * ΔⲆⵠΔᐃ, Ⲇ * 117, Ⲇ * ΔⲆΔⲆ);
		Δ.bezierCurveTo(44 * Ⲇ, 0 * Ⲇ, 35 * Ⲇ, Ⲇ * 20, Ⲇ * 33, Ⲇ * 37);
		Δ.bezierCurveTo(29 * Ⲇ, Ⲇ * 69, Ⲇ * 33, Ⲇ * 88, Ⲇ * 44, Ⲇ * 96);
		Δ.bezierCurveTo(64 * Ⲇ, 107 * Ⲇ, Ⲇ * 70, 102 * Ⲇ, Ⲇ * 54, 93 * Ⲇ);
		Δ.bezierCurveTo(49 * Ⲇ, 88 * Ⲇ, 50 * Ⲇ, Ⲇ * 82, Ⲇ * 53, 77 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 51.5, Ⲇ * 71, Ⲇ * 51.5, Ⲇ * 71, Ⲇ * 50, Ⲇ * 65);
		Δ.bezierCurveTo(Ⲇ * 53, Ⲇ * 68.5, 53 * Ⲇ, 68.5 * Ⲇ, Ⲇ * 56, Ⲇ * 72);
		Δ.bezierCurveTo(59 * Ⲇ, 67.5 * Ⲇ, Ⲇ * 59, 67.5 * Ⲇ, 62 * Ⲇ, Ⲇ * 63);
		Δ.bezierCurveTo(60.5 * Ⲇ, 59.5 * Ⲇ, 60.5 * Ⲇ, Ⲇ * 59.5, 59 * Ⲇ, 56 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 62, 57 * Ⲇ, Ⲇ * 62, 57 * Ⲇ, Ⲇ * 65, Ⲇ * 58);
		Δ.bezierCurveTo(78 * Ⲇ, Ⲇ * 35, 103 * Ⲇ, 36 * Ⲇ, 117 * Ⲇ, 47 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 62, Ⲇ * 21);
		Δ.bezierCurveTo(Ⲇ * 63, Ⲇ * 34, 64 * Ⲇ, Ⲇ * 37, 66 * Ⲇ, Ⲇ * 40);
		Δ.bezierCurveTo(Ⲇ * 54, Ⲇ * 49, 53 * Ⲇ, Ⲇ * 51, 48 * Ⲇ, Ⲇ * 58);
		Δ.bezierCurveTo(44 * Ⲇ, Ⲇ * 51, 42 * Ⲇ, Ⲇ * 43, 40 * Ⲇ, Ⲇ * 36);
		Δ.bezierCurveTo(47 * Ⲇ, Ⲇ * 28, 52 * Ⲇ, Ⲇ * 25, 61 * Ⲇ, Ⲇ * 21);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔΔⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 60, Ⲇ * 29);
		Δ.bezierCurveTo(Ⲇ * 62, Ⲇ * 25, 65 * Ⲇ, 24 * Ⲇ, 70 * Ⲇ, 23 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[3], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(61 * Ⲇ, Ⲇ * 37);
		Δ.bezierCurveTo(63 * Ⲇ, Ⲇ * 32, 66 * Ⲇ, Ⲇ * 32, Ⲇ * 71, 32 * Ⲇ);
		ⵠᐃ(Δ, ᐃⲆⲆΔᐃ, Δⵠ[ⲆⵠⵠⲆ], ⵠⲆᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 52, 31 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 50, Ⲇ * 26, 50 * Ⲇ, Ⲇ * 25, Ⲇ * 51, 23 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠᐃᐃΔ], Ⲇ * ⵠⲆᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 46, Ⲇ * 35);
		Δ.bezierCurveTo(44 * Ⲇ, Ⲇ * 31, 43 * Ⲇ, 29 * Ⲇ, Ⲇ * 45, Ⲇ * 26);
		ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[ᐃΔᐃΔ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 58, Ⲇ * 44);
		Δ.bezierCurveTo(Ⲇ * 57, 48 * Ⲇ, 57 * Ⲇ, Ⲇ * 50, 60 * Ⲇ, 52 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[3], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 53, 48 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 52, 52 * Ⲇ, 52 * Ⲇ, Ⲇ * 54, Ⲇ * 55, 57 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[ⲆΔⲆⲆ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 46, Ⲇ * 41);
		Δ.bezierCurveTo(Ⲇ * 41, Ⲇ * 42, Ⲇ * 39, 45 * Ⲇ, Ⲇ * 38, Ⲇ * 48);
		ⵠᐃ(Δ, undefined, Δⵠ[ᐃΔᐃⲆ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(48 * Ⲇ, 48 * Ⲇ);
		Δ.bezierCurveTo(42 * Ⲇ, 51 * Ⲇ, Ⲇ * 42, Ⲇ * 53, Ⲇ * 40, Ⲇ * 55);
		ⵠᐃ(Δ, undefined, Δⵠ[3], ΔⵠⲆⵠᐃ * Ⲇ);
		if (ᐃⲆ == 0) {
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 99, 101 * Ⲇ);
			Δ.bezierCurveTo(118.6666259765625 * Ⲇ, 104.33331298828125 * Ⲇ, Ⲇ * 124.6666259765625, Ⲇ * 116.33331298828125, Ⲇ * 112.6666259765625, Ⲇ * 114.33331298828125);
			Δ.bezierCurveTo(104.6666259765625 * Ⲇ, 112.33331298828125 * Ⲇ, Ⲇ * 100.6666259765625, Ⲇ * 105.33331298828125, Ⲇ * 99.6666259765625, 101.33331298828125 * Ⲇ);
			ⵠᐃ(Δ, ⵠⵠᐃⵠΔ, Δⵠ[5], Ⲇ * ⲆⵠⲆΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 97.6666259765625, Ⲇ * 101.33331298828125);
			Δ.bezierCurveTo(Ⲇ * 81.6666259765625, 106.33331298828125 * Ⲇ, Ⲇ * 79.6666259765625, 114.33331298828125 * Ⲇ, 89.6666259765625 * Ⲇ, 114.33331298828125 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 95.6666259765625, Ⲇ * 111.33331298828125, 95.6666259765625 * Ⲇ, Ⲇ * 109.33331298828125, Ⲇ * 98.6666259765625, 102.33331298828125 * Ⲇ);
			ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[ⲆⵠⲆᐃ], 6 * Ⲇ)
		} else {
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 103, Ⲇ * 100.39999389648438);
			Δ.bezierCurveTo(Ⲇ * 120, 106.39999389648438 * Ⲇ, Ⲇ * 118, Ⲇ * 107.39999389648438, 120 * Ⲇ, 111.39999389648438 * Ⲇ);
			ⵠᐃ(Δ, undefined, Δⵠ[5], Ⲇ * ᐃⵠⵠᐃⵠ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 103, 100.39999389648438 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 90, Ⲇ * 103.39999389648438, 89 * Ⲇ, Ⲇ * 106.39999389648438, Ⲇ * 87, Ⲇ * 112.39999389648438);
			ⵠᐃ(Δ, undefined, Δⵠ[ⲆΔⲆᐃᐃ], Ⲇ * ⵠⵠⲆⲆⵠ);
			ⵠΔᐃ(Δ, 86 * Ⲇ, 114.39999389648438 * Ⲇ, 4.5 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[1], Δⵠ[5], Ⲇ * 6);
			ⵠΔᐃ(Δ, Ⲇ * 121, Ⲇ * 114.39999389648438, Ⲇ * 4.5);
			ⵠᐃ(Δ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[5], Ⲇ * ᐃⲆΔⵠΔ)
		}
		return ᐃⵠ
	}

	function ΔⵠⲆΔⲆⵠᐃᐃᐃ(Ⲇ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 950;
		var ⵠᐃⵠΔΔⲆᐃ = 180 * Ⲇ;
		var ΔⵠⲆ = 50 * Ⲇ;
		var ⲆⵠⲆᐃⲆⵠΔ = ⵠᐃᐃᐃᐃⵠᐃ * Ⲇ;
		var ⲆⵠⲆᐃⲆⲆΔ = 240 * Ⲇ;
		var ⲆᐃΔΔⵠᐃΔ = 35 * Ⲇ;
		var ⲆᐃⲆⵠᐃΔᐃ = Ⲇ * 1;
		var ΔⲆⵠ = Ⲇ * ΔΔⲆΔ;
		var ⲆΔⵠΔⵠ = Ⲇ * 4;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.translate(0, 15 * Ⲇ);
		ᐃΔⵠ(Δ, ⲆᐃΔΔⵠᐃΔ, ⲆᐃⲆⵠᐃΔᐃ, ⵠᐃⵠΔΔⲆᐃ, ⲆⵠⲆᐃⲆⵠΔ, ΔⲆⵠ);
		ⵠᐃ(Δ, null, "#69A148", ⲆΔⵠΔⵠ);
		var ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃⲆⵠΔⵠⲆ];
		Δ.drawImage(ⵠⵠ, 17, -ΔᐃⵠΔⵠ);
		Δ.translate(ⲆⵠⲆᐃⲆⲆΔ, ⵠᐃⵠ);
		ᐃΔⵠ(Δ, ⲆᐃΔΔⵠᐃΔ, ⲆᐃⲆⵠᐃΔᐃ, ⵠᐃⵠΔΔⲆᐃ, ⲆⵠⲆᐃⲆⵠΔ, ΔⲆⵠ);
		ⵠᐃ(Δ, null, "#AF352A", ⲆΔⵠΔⵠ);
		var ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆⲆⲆ];
		Δ.drawImage(ⵠⵠ, 17, -ⲆⵠⲆⲆⵠ);
		Δ.translate(ⲆⵠⲆᐃⲆⲆΔ, 0);
		ᐃΔⵠ(Δ, ⲆᐃΔΔⵠᐃΔ, ⲆᐃⲆⵠᐃΔᐃ, ⵠᐃⵠΔΔⲆᐃ, ⲆⵠⲆᐃⲆⵠΔ, ΔⲆⵠ);
		ⵠᐃ(Δ, null, "#669BB1", ⲆΔⵠΔⵠ);
		var ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃᐃⲆΔᐃⵠ];
		Δ.drawImage(ⵠⵠ, 17, -8);
		Δ.translate(ⲆⵠⲆᐃⲆⲆΔ, ᐃⲆᐃ);
		ᐃΔⵠ(Δ, ⲆᐃΔΔⵠᐃΔ, ⲆᐃⲆⵠᐃΔᐃ, ⵠᐃⵠΔΔⲆᐃ, ⲆⵠⲆᐃⲆⵠΔ, ΔⲆⵠ);
		ⵠᐃ(Δ, null, "#074A87", ⲆΔⵠΔⵠ);
		var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔⵠᐃΔⲆⵠ];
		Δ.drawImage(ⵠⵠ, ⵠΔⵠⵠⵠ, -8);
		return ᐃⵠ
	}

	function ⵠⲆᐃΔⵠⲆⵠ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 81;
		ᐃⵠ.height = 77 * Ⲇ;
		Δ.translate(0, Ⲇ * 10);
		Δ.scale(.2, .2);
		Δ.translate(0, -30 * Ⲇ);
		if (ᐃⲆⲆ == ᐃⲆ) {
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(36.5 * Ⲇ, 278.0625 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 67.5, Ⲇ * 316.0625, 134.5 * Ⲇ, 334.0625 * Ⲇ, 199.5 * Ⲇ, Ⲇ * 319.0625);
			Δ.bezierCurveTo(254.5 * Ⲇ, Ⲇ * 304.0625, Ⲇ * 346.5, Ⲇ * 270.0625, 348.5 * Ⲇ, 237.0625 * Ⲇ);
			Δ.bezierCurveTo(359.5 * Ⲇ, Ⲇ * 206.0625, Ⲇ * 318.5, Ⲇ * 129.0625, 262.5 * Ⲇ, 122.0625 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 213.5, 115.0625 * Ⲇ, 166.5 * Ⲇ, 133.0625 * Ⲇ, 104.5 * Ⲇ, 166.0625 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 54.5, Ⲇ * 194.0625, Ⲇ * 23.5, Ⲇ * 241.0625, 36.5 * Ⲇ, 277.0625 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⲆⲆΔ], Δⵠ[3], Ⲇ * 50)
		}
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(36.5 * Ⲇ, 278.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 67.5, Ⲇ * 316.0625, 134.5 * Ⲇ, Ⲇ * 334.0625, Ⲇ * 199.5, 319.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 254.5, Ⲇ * 304.0625, Ⲇ * 346.5, 270.0625 * Ⲇ, 348.5 * Ⲇ, 237.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 359.5, Ⲇ * 206.0625, 318.5 * Ⲇ, 129.0625 * Ⲇ, Ⲇ * 262.5, Ⲇ * 122.0625);
		Δ.bezierCurveTo(213.5 * Ⲇ, Ⲇ * 115.0625, Ⲇ * 166.5, 133.0625 * Ⲇ, 104.5 * Ⲇ, Ⲇ * 166.0625);
		Δ.bezierCurveTo(Ⲇ * 54.5, 194.0625 * Ⲇ, Ⲇ * 23.5, Ⲇ * 241.0625, 36.5 * Ⲇ, 277.0625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], 19 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(214.5 * Ⲇ, Ⲇ * 124.0625);
		Δ.bezierCurveTo(242.5 * Ⲇ, Ⲇ * 125.0625, 272.5 * Ⲇ, 159.0625 * Ⲇ, Ⲇ * 283.5, 184.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 277.5, Ⲇ * 161.0625, Ⲇ * 233.5, Ⲇ * 128.0625, 219.5 * Ⲇ, Ⲇ * 122.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔ], Δⵠ[1], 19 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 157.5, Ⲇ * 145.0625);
		Δ.bezierCurveTo(176.5 * Ⲇ, 148.0625 * Ⲇ, Ⲇ * 205.5, Ⲇ * 176.0625, 212.5 * Ⲇ, Ⲇ * 197.0625);
		Δ.bezierCurveTo(Ⲇ * 205.5, Ⲇ * 178.0625, Ⲇ * 177.5, Ⲇ * 152.0625, 156.5 * Ⲇ, 142.0625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ], Δⵠ[1], 19 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(103.5 * Ⲇ, 169.0625 * Ⲇ);
		Δ.bezierCurveTo(160.5 * Ⲇ, 166.0625 * Ⲇ, 228.5 * Ⲇ, Ⲇ * 312.0625, 162.5 * Ⲇ, Ⲇ * 323.0625);
		Δ.bezierCurveTo(Ⲇ * 128.5, Ⲇ * 330.0625, 45.5 * Ⲇ, Ⲇ * 312.0625, Ⲇ * 34.5, 268.0625 * Ⲇ);
		Δ.bezierCurveTo(30.5 * Ⲇ, 238.0625 * Ⲇ, 44.5 * Ⲇ, 222.0625 * Ⲇ, Ⲇ * 52.5, Ⲇ * 211.0625);
		Δ.bezierCurveTo(Ⲇ * 82.5, Ⲇ * 174.0625, Ⲇ * 104.5, Ⲇ * 166.0625, 119.5 * Ⲇ, Ⲇ * 172.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆΔΔⲆ], Δⵠ[ⲆⲆΔⵠ], ⵠⲆⵠⲆᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(194.5 * Ⲇ, 313.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 222.5, 306.0625 * Ⲇ, Ⲇ * 319.5, 271.0625 * Ⲇ, Ⲇ * 337.5, Ⲇ * 241.0625);
		Δ.bezierCurveTo(274.5 * Ⲇ, 270.0625 * Ⲇ, Ⲇ * 216.5, Ⲇ * 288.0625, 199.5 * Ⲇ, 287.0625 * Ⲇ);
		Δ.bezierCurveTo(198.5 * Ⲇ, Ⲇ * 302.0625, Ⲇ * 195.5, 311.0625 * Ⲇ, Ⲇ * 193.5, Ⲇ * 312.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.scale(ΔᐃΔⲆ, ᐃΔᐃⲆ);
		Δ.translate(15, ΔⵠᐃⲆΔ * Ⲇ);
		ᐃΔΔⲆ == ᐃⲆ && (Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(ⲆⲆⲆΔ * Ⲇ, 32 * Ⲇ), Δ.bezierCurveTo(Ⲇ * ⵠᐃⵠᐃⵠ, 25 * Ⲇ, 19 * Ⲇ, Ⲇ * 25, Ⲇ * 34, ΔⲆᐃⵠⵠᐃΔ * Ⲇ), Δ.bezierCurveTo(Ⲇ * 41.5, 23.5 * Ⲇ, Ⲇ * 41.5, Ⲇ * 23.5, Ⲇ * 49, 29 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 59.5, Ⲇ * 20, 59.5 * Ⲇ, ⵠⲆᐃⲆⵠ * Ⲇ, 70 * Ⲇ, 11 * Ⲇ), ⵠᐃ(Δ, ΔΔᐃⲆᐃ, Δⵠ[ⵠⵠΔⲆ], 28 * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 56, 6 * Ⲇ), Δ.bezierCurveTo(63.5 * Ⲇ, Ⲇ * 13.5, Ⲇ * 63.5, Ⲇ * 13.5, Ⲇ * 71, Ⲇ * 21), Δ.bezierCurveTo(Ⲇ * 74.5, Ⲇ * 11.5, 74.5 * Ⲇ, Ⲇ * 11.5, Ⲇ * 78, Ⲇ * 2), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[ⲆΔⲆᐃ], Δⵠ[3], 28 * Ⲇ));
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 4, Ⲇ * 32);
		Δ.bezierCurveTo(19 * Ⲇ, Ⲇ * 25, Ⲇ * ⵠᐃⵠⵠᐃⲆΔ, Ⲇ * 25, Ⲇ * 34, 18 * Ⲇ);
		Δ.bezierCurveTo(41.5 * Ⲇ, Ⲇ * 23.5, Ⲇ * 41.5, 23.5 * Ⲇ, Ⲇ * 49, Ⲇ * 29);
		Δ.bezierCurveTo(Ⲇ * 59.5, Ⲇ * 20, Ⲇ * 59.5, Ⲇ * 20, Ⲇ * 70, 11 * Ⲇ);
		ⵠᐃ(Δ, ΔⲆⲆΔⲆ, Δⵠ[ᐃⵠⵠⵠ], ΔΔΔΔᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 56, Ⲇ * ⵠⵠⲆᐃⲆ);
		Δ.bezierCurveTo(Ⲇ * 63.5, 13.5 * Ⲇ, 63.5 * Ⲇ, 13.5 * Ⲇ, Ⲇ * 71, 21 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 74.5, Ⲇ * 11.5, 74.5 * Ⲇ, Ⲇ * 11.5, Ⲇ * 78, Ⲇ * 2);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔΔᐃ], Δⵠ[1], ᐃⲆᐃⲆᐃΔᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 4, Ⲇ * 32);
		Δ.bezierCurveTo(Ⲇ * 19, 25 * Ⲇ, Ⲇ * 19, 25 * Ⲇ, 34 * Ⲇ, 18 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 41.5, Ⲇ * 23.5, Ⲇ * 41.5, Ⲇ * 23.5, Ⲇ * 49, 29 * Ⲇ);
		Δ.bezierCurveTo(59.5 * Ⲇ, ⵠⲆΔⲆⲆ * Ⲇ, Ⲇ * 59.5, 20 * Ⲇ, Ⲇ * 70, Ⲇ * ΔᐃⲆΔⲆ);
		ⵠᐃ(Δ, undefined, Δⵠ[2], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 56, Ⲇ * 6);
		Δ.bezierCurveTo(63.5 * Ⲇ, Ⲇ * 13.5, 63.5 * Ⲇ, Ⲇ * 13.5, 71 * Ⲇ, Ⲇ * 21);
		Δ.bezierCurveTo(74.5 * Ⲇ, Ⲇ * 11.5, 74.5 * Ⲇ, Ⲇ * 11.5, 78 * Ⲇ, Ⲇ * ⵠⲆΔᐃ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇᐃⵠⵠ], Δⵠ[2], Ⲇ * 10);
		return ᐃⵠ
	}

	function ⲆΔⵠⵠⲆⲆⵠⲆⵠ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		if (ᐃⲆ == ᐃⲆᐃ) {
			ᐃⵠ.width = 543 * Ⲇ;
			ᐃⵠ.height = Ⲇ * 393;
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 164.23297119140625, 72.80398559570312 * Ⲇ);
			Δ.bezierCurveTo(289.23297119140625 * Ⲇ, Ⲇ * 41.803985595703125, 413.23297119140625 * Ⲇ, Ⲇ * 86.80398559570312, 441.23297119140625 * Ⲇ, Ⲇ * 105.80398559570312);
			Δ.bezierCurveTo(513.2329711914062 * Ⲇ, 149.80398559570312 * Ⲇ, 475.23297119140625 * Ⲇ, Ⲇ * 224.80398559570312, 451.23297119140625 * Ⲇ, 258.8039855957031 * Ⲇ);
			Δ.bezierCurveTo(410.23297119140625 * Ⲇ, 315.8039855957031 * Ⲇ, Ⲇ * 380.23297119140625, Ⲇ * 314.8039855957031, 289.23297119140625 * Ⲇ, 320.8039855957031 * Ⲇ);
			Δ.bezierCurveTo(160.23297119140625 * Ⲇ, Ⲇ * 329.8039855957031, Ⲇ * 102.23297119140625, 312.8039855957031 * Ⲇ, 72.23297119140625 * Ⲇ, 258.8039855957031 * Ⲇ);
			Δ.bezierCurveTo(32.23297119140625 * Ⲇ, Ⲇ * 156.80398559570312, Ⲇ * 93.23297119140625, 92.80398559570312 * Ⲇ, 164.23297119140625 * Ⲇ, 72.80398559570312 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ])
		} else ⲆⲆⵠ == ᐃⲆ ? (ᐃⵠ.width = 543 * Ⲇ, ᐃⵠ.height = 470 * Ⲇ, Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 238.23297119140625, 34.622161865234375 * Ⲇ), Δ.bezierCurveTo(423.23297119140625 * Ⲇ, 21.622161865234375 * Ⲇ, 474.23297119140625 * Ⲇ, 96.62216186523438 * Ⲇ, 499.23297119140625 * Ⲇ, 167.62216186523438 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 536.2329711914062, 288.6221618652344 * Ⲇ, Ⲇ * 487.23297119140625, 367.6221618652344 * Ⲇ, Ⲇ * 403.23297119140625, 412.6221618652344 * Ⲇ), Δ.bezierCurveTo(287.23297119140625 * Ⲇ, Ⲇ * 466.6221618652344, Ⲇ * 127.23297119140625, Ⲇ * 424.6221618652344, Ⲇ * 50.23297119140625, Ⲇ * 318.6221618652344), Δ.bezierCurveTo(-.76702880859375 * Ⲇ, Ⲇ * 239.62216186523438, Ⲇ * 30.23297119140625, 110.62216186523438 * Ⲇ, 73.23297119140625 * Ⲇ, Ⲇ * 77.62216186523438), Δ.bezierCurveTo(Ⲇ * 128.23297119140625, 29.622161865234375 * Ⲇ, Ⲇ * 202.23297119140625, 40.622161865234375 * Ⲇ, 238.23297119140625 * Ⲇ, 34.622161865234375 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0])) : (ᐃⵠ.width = 543 * Ⲇ, ᐃⵠ.height = 470 * Ⲇ, Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 268.23297119140625, Ⲇ * 23.349441528320312), Δ.bezierCurveTo(424.23297119140625 * Ⲇ, -.6505584716796875 * Ⲇ, 524.2329711914062 * Ⲇ, 44.34944152832031 * Ⲇ, Ⲇ * 519.2329711914062, 186.3494415283203 * Ⲇ), Δ.bezierCurveTo(515.2329711914062 * Ⲇ, Ⲇ * 341.3494415283203, Ⲇ * 431.23297119140625, 409.3494415283203 * Ⲇ, 357.23297119140625 * Ⲇ, 442.3494415283203 * Ⲇ), Δ.bezierCurveTo(278.23297119140625 * Ⲇ, 469.3494415283203 * Ⲇ, 144.23297119140625 * Ⲇ, 460.3494415283203 * Ⲇ, Ⲇ * 51.23297119140625, 348.3494415283203 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 3.23297119140625, 274.3494415283203 * Ⲇ, 45.23297119140625 * Ⲇ, Ⲇ * 87.34944152832031, 268.23297119140625 * Ⲇ, 23.349441528320312 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[0]));
		return ᐃⵠ
	}

	function ⲆᐃⵠⲆΔΔᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 47 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 60;
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 47;
		ᐃⵠ.height = 60 * Ⲇ;
		ⵠΔᐃ(Δ, 23.5 * Ⲇ, Ⲇ * 20.734375, 15.132745950421556 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[2], Ⲇ * ᐃᐃΔⵠⲆ);
		ⵠΔᐃ(Δ, 23.5 * Ⲇ, Ⲇ * 20.734375, Ⲇ * 18.601075237738275);
		ⵠᐃ(Δ, undefined, Δⵠ[1], Ⲇ * ΔⲆⲆⲆ);
		ⵠΔᐃ(Δ, 23.5 * Ⲇ, 20.734375 * Ⲇ, 11.40175425099138 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[1], ᐃⵠⵠⲆ * Ⲇ);
		Δ.save();
		Δ.translate(23 * Ⲇ, 38.734375 * Ⲇ);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, -21.5 * Ⲇ, -19 * Ⲇ, Ⲇ * 43, Ⲇ * 38, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⵠᐃ], Δⵠ[1], ᐃΔΔΔⲆ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 23.5, Ⲇ * 43.734375);
		Δ.rotate(.5235987755982988);
		ΔΔΔΔ(Δ, 3, Ⲇ * 8.06225774829855, Ⲇ * ⵠΔΔⲆ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃΔΔΔ]);
		ⵠΔᐃ(Δ, Ⲇ * 23.5, Ⲇ * 35.734375, Ⲇ * 7.0710678118654755);
		ⵠᐃ(Δ, Δⵠ[3]);
		return ᐃⵠ
	}

	function ᐃΔᐃᐃⲆΔᐃⲆΔ() {
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[430]).style.backgroundColor = ⵠ.ⲆⵠᐃᐃΔ[ⵠᐃᐃᐃⲆ.time];
		ⵠᐃᐃᐃⲆ.items.push(new ᐃⵠⵠᐃᐃⵠΔ(ᐃᐃᐃ.ΔⲆⲆΔᐃ, ⵠᐃⲆⵠ, 0, 0, ᐃⲆΔᐃ, Math.random() * Math.PI * ⲆΔΔⲆ, ⵠⵠᐃⲆ, ΔⲆⵠⲆ));
		ⵠᐃᐃᐃⲆ.items.push(new ᐃⵠⵠᐃᐃⵠΔ(ᐃᐃᐃ.ⵠⲆⲆᐃⲆ, 0, 0, 0, ⲆⲆᐃⲆ, 0, 0, ᐃᐃᐃᐃ));
		ⵠᐃᐃᐃⲆ.items.push(new ᐃⵠⵠᐃᐃⵠΔ(ᐃᐃᐃ.ΔⵠΔⲆⵠ, Δⵠⵠ, 0, Ⲇⵠᐃ, 0, Math.PI / 4, 0, 0));
		ⵠᐃᐃᐃⲆ.items.push(new ᐃⵠⵠᐃᐃⵠΔ(ᐃᐃᐃ.ⵠⲆⲆᐃⲆ, ⲆᐃΔⵠ, ⲆⲆᐃ, 0, ⵠⵠᐃ, 0, ᐃⲆᐃ, 5))
	}

	function ᐃⲆᐃΔΔⲆᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 160 * Ⲇ;
		ᐃⵠ.height = 161 * Ⲇ;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ΔᐃⲆⲆ, Ⲇ * ⵠᐃⲆⲆΔ);
		Δ.save();
		Δ.translate(Ⲇ * 80.5, Ⲇ * 78);
		ᐃΔⵠ(Δ, Ⲇ * -71.5, -71 * Ⲇ, Ⲇ * 143, Ⲇ * 143, ΔΔⵠⲆⵠ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ᐃⲆⲆ;
		Δ.translate(ⵠΔΔⲆ, Ⲇ * -10);
		Δ.save();
		Δ.translate(80.5 * Ⲇ, Ⲇ * 78);
		ᐃΔⵠ(Δ, Ⲇ * -71.5, -71 * Ⲇ, 143 * Ⲇ, 143 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], ⵠΔΔⵠⲆ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 80, 78.5 * Ⲇ);
		ᐃΔⵠ(Δ, -17 * Ⲇ, Ⲇ * -72.5, 34 * Ⲇ, 145 * Ⲇ, Ⲇ * ΔⵠᐃⲆΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆⲆ], Δⵠ[ᐃᐃᐃᐃΔ], 6 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⲆⵠ;
		Δ.translate(ⵠⵠᐃ, Ⲇ * ⵠᐃⲆⲆΔ);
		Δ.save();
		Δ.translate(80 * Ⲇ, 79.5 * Ⲇ);
		ᐃΔⵠ(Δ, -73 * Ⲇ, Ⲇ * -16.5, 145 * Ⲇ, 34 * Ⲇ, Ⲇ * ΔⲆΔΔᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆᐃ]);
		Δ.globalAlpha = ᐃΔⲆΔ;
		Δ.translate(0, Ⲇ * -ⵠⵠⵠΔΔ);
		Δ.save();
		Δ.translate(80 * Ⲇ, Ⲇ * 79.5);
		ᐃΔⵠ(Δ, Ⲇ * -73, Ⲇ * -16.5, 145 * Ⲇ, Ⲇ * 34, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆⲆ], Δⵠ[4], Ⲇ * 6);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(0, 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 79, 71 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 90, 42 * Ⲇ, 98 * Ⲇ, Ⲇ * 36, Ⲇ * 109, 43 * Ⲇ);
		Δ.bezierCurveTo(119 * Ⲇ, 47 * Ⲇ, 128 * Ⲇ, Ⲇ * 62, 107 * Ⲇ, Ⲇ * 72);
		Δ.bezierCurveTo(96 * Ⲇ, Ⲇ * 78.5, 96 * Ⲇ, Ⲇ * 78.5, Ⲇ * 85, 85 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 84, Ⲇ * 78);
		Δ.bezierCurveTo(113 * Ⲇ, Ⲇ * 82, 123 * Ⲇ, 97 * Ⲇ, Ⲇ * 115, 108 * Ⲇ);
		Δ.bezierCurveTo(110 * Ⲇ, Ⲇ * 119, Ⲇ * 98, 124 * Ⲇ, Ⲇ * 87, 107 * Ⲇ);
		Δ.bezierCurveTo(81.5 * Ⲇ, Ⲇ * 94.5, Ⲇ * 81.5, 94.5 * Ⲇ, Ⲇ * 76, Ⲇ * 82);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 80, 73 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 64, 37 * Ⲇ, Ⲇ * 55, 34 * Ⲇ, Ⲇ * 45, 42 * Ⲇ);
		Δ.bezierCurveTo(30 * Ⲇ, 54 * Ⲇ, Ⲇ * 36, Ⲇ * 65, 51 * Ⲇ, 72 * Ⲇ);
		Δ.bezierCurveTo(62.5 * Ⲇ, 77 * Ⲇ, Ⲇ * 62.5, Ⲇ * 77, 74 * Ⲇ, Ⲇ * 82);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 82, Ⲇ * 83);
		Δ.bezierCurveTo(Ⲇ * 73, Ⲇ * 107, 60 * Ⲇ, Ⲇ * 123, 47 * Ⲇ, Ⲇ * 113);
		Δ.bezierCurveTo(Ⲇ * 33, Ⲇ * 105, 33 * Ⲇ, Ⲇ * 92, Ⲇ * 52, Ⲇ * 85);
		Δ.bezierCurveTo(Ⲇ * 74, 73 * Ⲇ, 77 * Ⲇ, 76 * Ⲇ, 76 * Ⲇ, 75 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(0, -10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 79, Ⲇ * 71);
		Δ.bezierCurveTo(90 * Ⲇ, Ⲇ * 42, Ⲇ * 98, Ⲇ * 36, Ⲇ * 109, 43 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 119, Ⲇ * 47, Ⲇ * 128, 62 * Ⲇ, Ⲇ * 107, 72 * Ⲇ);
		Δ.bezierCurveTo(96 * Ⲇ, Ⲇ * 78.5, 96 * Ⲇ, Ⲇ * 78.5, 85 * Ⲇ, Ⲇ * 85);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⲆ], Δⵠ[4], Ⲇ * 6);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(84 * Ⲇ, 78 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 113, Ⲇ * 82, Ⲇ * 123, Ⲇ * 97, Ⲇ * 115, Ⲇ * 108);
		Δ.bezierCurveTo(110 * Ⲇ, Ⲇ * 119, 98 * Ⲇ, Ⲇ * 124, 87 * Ⲇ, Ⲇ * 107);
		Δ.bezierCurveTo(Ⲇ * 81.5, Ⲇ * 94.5, Ⲇ * 81.5, 94.5 * Ⲇ, Ⲇ * 76, 82 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 80, Ⲇ * 73);
		Δ.bezierCurveTo(Ⲇ * 64, 37 * Ⲇ, 55 * Ⲇ, 34 * Ⲇ, Ⲇ * 45, Ⲇ * 42);
		Δ.bezierCurveTo(Ⲇ * 30, Ⲇ * 54, Ⲇ * 36, Ⲇ * 65, Ⲇ * 51, Ⲇ * 72);
		Δ.bezierCurveTo(62.5 * Ⲇ, 77 * Ⲇ, Ⲇ * 62.5, Ⲇ * 77, Ⲇ * 74, 82 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃⵠⵠⲆ], Ⲇ * 6);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 82, Ⲇ * 83);
		Δ.bezierCurveTo(Ⲇ * 73, Ⲇ * 107, Ⲇ * 60, 123 * Ⲇ, Ⲇ * 47, Ⲇ * 113);
		Δ.bezierCurveTo(33 * Ⲇ, 105 * Ⲇ, Ⲇ * 33, 92 * Ⲇ, Ⲇ * 52, 85 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 74, Ⲇ * 73, 77 * Ⲇ, 76 * Ⲇ, 76 * Ⲇ, Ⲇ * 75);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⵠⲆ], Δⵠ[4], Ⲇ * ᐃⲆΔⵠΔ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⵠⵠⵠⲆ;
		Δ.translate(ⲆⲆΔ, ⵠⵠⵠΔΔ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 78.5, 78 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -13.5, Ⲇ * -14, Ⲇ * 27, Ⲇ * 27, Ⲇ * 6);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(ⵠᐃⲆⵠ, -10 * Ⲇ);
		Δ.save();
		Δ.translate(78.5 * Ⲇ, 78 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -13.5, Ⲇ * -14, Ⲇ * 27, 27 * Ⲇ, ⵠⵠⲆⲆⵠ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], ᐃᐃⲆⲆⲆ * Ⲇ);
		return ᐃⵠ
	}

	function ⵠΔⲆⲆΔⲆᐃ(Ⲇ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 600 * Ⲇ;
		var ΔⵠⲆ = 22 * Ⲇ;
		var ΔⲆⵠ = 4 * Ⲇ;
		var ⲆΔⵠΔⵠ = Ⲇ * 4;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		ᐃΔⵠ(Δ, Ⲇ * ⵠⲆⲆⵠ, ⲆⵠⲆΔᐃ * Ⲇ, ᐃΔΔ - ⵠΔΔᐃᐃ * Ⲇ, ΔⵠⲆ - ΔΔⲆΔΔ * Ⲇ, ΔⲆⵠ);
		ⵠᐃ(Δ, null, "#BBE8EF", ⲆΔⵠΔⵠ);
		return ᐃⵠ
	}

	function ᐃᐃⵠΔᐃⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 180;
		ᐃⵠ.height = 120 * Ⲇ;
		Δ.translate(-65 * Ⲇ, Ⲇ * -35);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ⵠⵠⲆΔ, 10 * Ⲇ);
		Δ.save();
		Δ.translate(150.5 * Ⲇ, 63.84375 * Ⲇ);
		ᐃΔⵠ(Δ, Ⲇ * -67, -16.5 * Ⲇ, Ⲇ * 134, Ⲇ * 33, 5 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 80.5, Ⲇ * 75.34375);
		Δ.bezierCurveTo(Ⲇ * 83, Ⲇ * 106.34375, Ⲇ * 83, Ⲇ * 106.34375, 85.5 * Ⲇ, 137.34375 * Ⲇ);
		Δ.bezierCurveTo(93 * Ⲇ, Ⲇ * 135.84375, 93 * Ⲇ, Ⲇ * 135.84375, Ⲇ * 100.5, 134.34375 * Ⲇ);
		Δ.bezierCurveTo(99.5 * Ⲇ, Ⲇ * 100.84375, Ⲇ * 99.5, Ⲇ * 100.84375, Ⲇ * 98.5, Ⲇ * 67.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(206.5 * Ⲇ, 71.34375 * Ⲇ);
		Δ.bezierCurveTo(203.5 * Ⲇ, 104.34375 * Ⲇ, Ⲇ * 203.5, 104.34375 * Ⲇ, 200.5 * Ⲇ, 137.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 208.5, Ⲇ * 137.34375, Ⲇ * 208.5, 137.34375 * Ⲇ, 216.5 * Ⲇ, Ⲇ * 137.34375);
		Δ.bezierCurveTo(219 * Ⲇ, Ⲇ * 102.84375, 219 * Ⲇ, 102.84375 * Ⲇ, Ⲇ * 221.5, Ⲇ * 68.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(136.5 * Ⲇ, Ⲇ * 75.34375);
		Δ.bezierCurveTo(Ⲇ * 139, 94.34375 * Ⲇ, 139 * Ⲇ, Ⲇ * 94.34375, Ⲇ * 141.5, Ⲇ * 113.34375);
		Δ.bezierCurveTo(Ⲇ * 149.5, 115.34375 * Ⲇ, 149.5 * Ⲇ, Ⲇ * 115.34375, 157.5 * Ⲇ, 117.34375 * Ⲇ);
		Δ.bezierCurveTo(162 * Ⲇ, Ⲇ * 97.34375, 162 * Ⲇ, 97.34375 * Ⲇ, 166.5 * Ⲇ, 77.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.save();
		Δ.translate(Ⲇ * 152.5, Ⲇ * 80.84375);
		Δ.rotate(3.12);
		ᐃΔⵠ(Δ, Ⲇ * -73, -20.5 * Ⲇ, Ⲇ * 146, Ⲇ * 41, ΔΔⵠⵠ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(0, Ⲇ * -ᐃᐃᐃⲆⵠ);
		Δ.save();
		Δ.translate(Ⲇ * 150.5, Ⲇ * 63.84375);
		ᐃΔⵠ(Δ, Ⲇ * -67, Ⲇ * -16.5, 134 * Ⲇ, Ⲇ * 33, ⵠᐃⵠᐃΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠⲆΔᐃ], Ⲇ * ΔᐃᐃΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(80.5 * Ⲇ, Ⲇ * 75.34375);
		Δ.bezierCurveTo(Ⲇ * 83, Ⲇ * 106.34375, 83 * Ⲇ, Ⲇ * 106.34375, 85.5 * Ⲇ, Ⲇ * 137.34375);
		Δ.bezierCurveTo(93 * Ⲇ, Ⲇ * 135.84375, 93 * Ⲇ, Ⲇ * 135.84375, 100.5 * Ⲇ, Ⲇ * 134.34375);
		Δ.bezierCurveTo(Ⲇ * 99.5, 100.84375 * Ⲇ, 99.5 * Ⲇ, 100.84375 * Ⲇ, 98.5 * Ⲇ, 67.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠⲆΔᐃ], Ⲇ * ᐃᐃᐃᐃΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(206.5 * Ⲇ, Ⲇ * 71.34375);
		Δ.bezierCurveTo(Ⲇ * 203.5, 104.34375 * Ⲇ, 203.5 * Ⲇ, Ⲇ * 104.34375, 200.5 * Ⲇ, 137.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 208.5, Ⲇ * 137.34375, 208.5 * Ⲇ, 137.34375 * Ⲇ, Ⲇ * 216.5, Ⲇ * 137.34375);
		Δ.bezierCurveTo(Ⲇ * 219, 102.84375 * Ⲇ, 219 * Ⲇ, 102.84375 * Ⲇ, 221.5 * Ⲇ, Ⲇ * 68.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔΔⲆ], Δⵠ[2], ᐃⵠⵠⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(136.5 * Ⲇ, Ⲇ * 75.34375);
		Δ.bezierCurveTo(Ⲇ * 139, 94.34375 * Ⲇ, Ⲇ * 139, 94.34375 * Ⲇ, 141.5 * Ⲇ, 113.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 149.5, 115.34375 * Ⲇ, 149.5 * Ⲇ, 115.34375 * Ⲇ, Ⲇ * 157.5, Ⲇ * 117.34375);
		Δ.bezierCurveTo(Ⲇ * 162, Ⲇ * 97.34375, Ⲇ * 162, 97.34375 * Ⲇ, Ⲇ * 166.5, Ⲇ * 77.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠⵠΔⵠ], ⵠΔᐃⲆ * Ⲇ);
		Δ.save();
		Δ.translate(152.5 * Ⲇ, Ⲇ * 80.84375);
		Δ.rotate(3.12);
		ᐃΔⵠ(Δ, -73 * Ⲇ, -20.5 * Ⲇ, 146 * Ⲇ, Ⲇ * 41, Ⲇ * 5);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔΔᐃⲆⵠ], ΔᐃⲆᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(83.5 * Ⲇ, 73.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 93.5, Ⲇ * 70.34375, 105.5 * Ⲇ, Ⲇ * 70.34375, Ⲇ * 124.5, Ⲇ * 72.34375);
		Δ.bezierCurveTo(Ⲇ * 132.5, Ⲇ * 78.34375, Ⲇ * 162.5, Ⲇ * 80.34375, Ⲇ * 176.5, Ⲇ * 76.34375);
		Δ.bezierCurveTo(Ⲇ * 194.5, Ⲇ * 69.34375, Ⲇ * 192.5, 68.34375 * Ⲇ, 199.5 * Ⲇ, Ⲇ * 63.34375);
		Δ.bezierCurveTo(204.5 * Ⲇ, 63.34375 * Ⲇ, Ⲇ * 204.5, 63.34375 * Ⲇ, Ⲇ * 209.5, Ⲇ * 63.34375);
		Δ.bezierCurveTo(153.5 * Ⲇ, Ⲇ * 82.34375, Ⲇ * 157.5, 85.34375 * Ⲇ, 209.5 * Ⲇ, 63.34375 * Ⲇ);
		Δ.bezierCurveTo(194.5 * Ⲇ, Ⲇ * 88.34375, 162.5 * Ⲇ, Ⲇ * 87.34375, Ⲇ * 149.5, Ⲇ * 88.34375);
		Δ.bezierCurveTo(Ⲇ * 129.5, 81.34375 * Ⲇ, 103.5 * Ⲇ, Ⲇ * 75.34375, 83.5 * Ⲇ, Ⲇ * 82.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 137.5, Ⲇ * 65.34375);
		Δ.bezierCurveTo(150.5 * Ⲇ, Ⲇ * 76.34375, Ⲇ * 170.5, Ⲇ * 71.34375, Ⲇ * 174.5, Ⲇ * 65.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(221.5 * Ⲇ, Ⲇ * 85.34375);
		Δ.bezierCurveTo(211.5 * Ⲇ, Ⲇ * 79.34375, Ⲇ * 191.5, Ⲇ * 88.34375, Ⲇ * 181.5, Ⲇ * 96.34375);
		Δ.bezierCurveTo(201.5 * Ⲇ, 96.34375 * Ⲇ, Ⲇ * 201.5, 96.34375 * Ⲇ, Ⲇ * 221.5, 96.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 84.5, 89.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 102.5, Ⲇ * 87.34375, 112.5 * Ⲇ, Ⲇ * 88.34375, Ⲇ * 119.5, 97.34375 * Ⲇ);
		Δ.bezierCurveTo(102 * Ⲇ, Ⲇ * 98.34375, 102 * Ⲇ, Ⲇ * 98.34375, Ⲇ * 84.5, Ⲇ * 99.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⵠⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(208.5 * Ⲇ, 104.34375 * Ⲇ);
		Δ.bezierCurveTo(208.5 * Ⲇ, Ⲇ * 110.34375, 208.5 * Ⲇ, 110.34375 * Ⲇ, 208.5 * Ⲇ, Ⲇ * 116.34375);
		Δ.bezierCurveTo(211.5 * Ⲇ, 110.34375 * Ⲇ, 211.5 * Ⲇ, Ⲇ * 110.34375, 214.5 * Ⲇ, Ⲇ * 104.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 87.5, Ⲇ * 117.34375);
		Δ.bezierCurveTo(92 * Ⲇ, 118.84375 * Ⲇ, Ⲇ * 92, Ⲇ * 118.84375, 96.5 * Ⲇ, 120.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 93, Ⲇ * 123.84375, 93 * Ⲇ, 123.84375 * Ⲇ, 89.5 * Ⲇ, 127.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 107.5, 51.34375 * Ⲇ);
		Δ.bezierCurveTo(122.5 * Ⲇ, Ⲇ * 54.34375, 122.5 * Ⲇ, Ⲇ * 54.34375, 137.5 * Ⲇ, Ⲇ * 57.34375);
		Δ.bezierCurveTo(Ⲇ * 118, 57.34375 * Ⲇ, 118 * Ⲇ, 57.34375 * Ⲇ, 98.5 * Ⲇ, 57.34375 * Ⲇ);
		Δ.bezierCurveTo(94.5 * Ⲇ, 54.84375 * Ⲇ, Ⲇ * 94.5, Ⲇ * 54.84375, Ⲇ * 90.5, Ⲇ * 52.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 170.5, Ⲇ * 52.34375);
		Δ.bezierCurveTo(Ⲇ * 179.5, Ⲇ * 51.84375, 179.5 * Ⲇ, Ⲇ * 51.84375, Ⲇ * 188.5, 51.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 187.5, Ⲇ * 53.84375, 187.5 * Ⲇ, 53.84375 * Ⲇ, 186.5 * Ⲇ, 56.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 177, 56.34375 * Ⲇ, Ⲇ * 177, 56.34375 * Ⲇ, 167.5 * Ⲇ, Ⲇ * 56.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(80.5 * Ⲇ, Ⲇ * 69.34375);
		Δ.bezierCurveTo(Ⲇ * 86.5, 70.34375 * Ⲇ, Ⲇ * 86.5, Ⲇ * 70.34375, 92.5 * Ⲇ, 71.34375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 86, 73.34375 * Ⲇ, 86 * Ⲇ, Ⲇ * 73.34375, 79.5 * Ⲇ, 75.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(222.5 * Ⲇ, 75.34375 * Ⲇ);
		Δ.bezierCurveTo(214.5 * Ⲇ, Ⲇ * 76.34375, 214.5 * Ⲇ, Ⲇ * 76.34375, Ⲇ * 206.5, 77.34375 * Ⲇ);
		Δ.bezierCurveTo(216.5 * Ⲇ, Ⲇ * 79.34375, 216.5 * Ⲇ, 79.34375 * Ⲇ, Ⲇ * 226.5, 81.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(116.5 * Ⲇ, Ⲇ * 100.34375);
		Δ.bezierCurveTo(Ⲇ * 128, 97.34375 * Ⲇ, 128 * Ⲇ, Ⲇ * 97.34375, Ⲇ * 139.5, 94.34375 * Ⲇ);
		Δ.bezierCurveTo(140 * Ⲇ, 96.84375 * Ⲇ, Ⲇ * 140, 96.84375 * Ⲇ, Ⲇ * 140.5, 99.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 112.5, Ⲇ * 48.34375);
		Δ.bezierCurveTo(Ⲇ * 115.5, 50.84375 * Ⲇ, 115.5 * Ⲇ, Ⲇ * 50.84375, Ⲇ * 118.5, 53.34375 * Ⲇ);
		Δ.bezierCurveTo(131 * Ⲇ, Ⲇ * 50.84375, 131 * Ⲇ, Ⲇ * 50.84375, 143.5 * Ⲇ, Ⲇ * 48.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(216.5 * Ⲇ, 109.34375 * Ⲇ);
		Δ.bezierCurveTo(213 * Ⲇ, 114.84375 * Ⲇ, Ⲇ * 213, 114.84375 * Ⲇ, Ⲇ * 209.5, Ⲇ * 120.34375);
		Δ.bezierCurveTo(Ⲇ * 212, Ⲇ * 118.84375, 212 * Ⲇ, 118.84375 * Ⲇ, Ⲇ * 214.5, Ⲇ * 117.34375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(86.5 * Ⲇ, Ⲇ * 133.34375);
		Δ.bezierCurveTo(89 * Ⲇ, Ⲇ * 127.34375, 89 * Ⲇ, 127.34375 * Ⲇ, 91.5 * Ⲇ, Ⲇ * 121.34375);
		Δ.bezierCurveTo(92.5 * Ⲇ, Ⲇ * 127.34375, 92.5 * Ⲇ, 127.34375 * Ⲇ, Ⲇ * 93.5, 133.34375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠΔ]);
		return ᐃⵠ
	}

	function ⵠΔΔᐃΔΔΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 496 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 520;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ⵠΔⵠᐃ, Ⲇ * ΔⵠⲆᐃΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 19.000030517578125, Ⲇ * 256.67613983154297);
		Δ.bezierCurveTo(1.000030517578125 * Ⲇ, 332.67613983154297 * Ⲇ, 23.000030517578125 * Ⲇ, 404.67613983154297 * Ⲇ, 95.00003051757812 * Ⲇ, Ⲇ * 463.67613983154297);
		Δ.bezierCurveTo(Ⲇ * 128.00003051757812, Ⲇ * 491.67613983154297, Ⲇ * 165.00003051757812, Ⲇ * 507.67613983154297, 194.00003051757812 * Ⲇ, Ⲇ * 512.676139831543);
		Δ.bezierCurveTo(280.0000305175781 * Ⲇ, Ⲇ * 517.676139831543, Ⲇ * 291.0000305175781, 516.676139831543 * Ⲇ, Ⲇ * 342.0000305175781, Ⲇ * 497.67613983154297);
		Δ.bezierCurveTo(Ⲇ * 425.0000305175781, Ⲇ * 454.67613983154297, 469.0000305175781 * Ⲇ, Ⲇ * 392.67613983154297, 468.0000305175781 * Ⲇ, 300.67613983154297 * Ⲇ);
		Δ.bezierCurveTo(408.5000305175781 * Ⲇ, Ⲇ * 365.17613983154297, Ⲇ * 408.5000305175781, Ⲇ * 365.17613983154297, 349.0000305175781 * Ⲇ, 429.67613983154297 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 256.0000305175781, 473.67613983154297 * Ⲇ, Ⲇ * 167.00003051757812, Ⲇ * 459.67613983154297, 78.00003051757812 * Ⲇ, Ⲇ * 384.67613983154297);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(ⵠᐃΔ, -ⵠᐃⲆⵠᐃ * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 247.01138305664062, Ⲇ * 249.3125, 161.4465855941215 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⵠ], ΔⲆΔᐃⲆ, 12 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(0, Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(65.00003051757812 * Ⲇ, Ⲇ * 263.4034118652344);
		Δ.bezierCurveTo(Ⲇ * 109.00003051757812, Ⲇ * 160.40341186523438, 185.00003051757812 * Ⲇ, 128.40341186523438 * Ⲇ, 222.00003051757812 * Ⲇ, 124.40341186523438 * Ⲇ);
		Δ.bezierCurveTo(277.0000305175781 * Ⲇ, Ⲇ * 116.40341186523438, 339.0000305175781 * Ⲇ, 134.40341186523438 * Ⲇ, Ⲇ * 379.0000305175781, 195.40341186523438 * Ⲇ);
		Δ.bezierCurveTo(409.0000305175781 * Ⲇ, 242.40341186523438 * Ⲇ, Ⲇ * 416.0000305175781, Ⲇ * 256.4034118652344, Ⲇ * 428.0000305175781, 304.4034118652344 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 457.0000305175781, Ⲇ * 203.40341186523438, 449.0000305175781 * Ⲇ, 183.40341186523438 * Ⲇ, 438.0000305175781 * Ⲇ, 162.40341186523438 * Ⲇ);
		Δ.bezierCurveTo(381.0000305175781 * Ⲇ, 73.40341186523438 * Ⲇ, 360.0000305175781 * Ⲇ, 66.40341186523438 * Ⲇ, Ⲇ * 257.0000305175781, 46.403411865234375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 191.00003051757812, Ⲇ * 45.403411865234375, Ⲇ * 142.00003051757812, 65.40341186523438 * Ⲇ, 101.00003051757812 * Ⲇ, Ⲇ * 115.40341186523438);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ⲆⲆⵠ;
		var ⵠⵠ = ᐃΔΔΔⵠⲆᐃᐃⵠ(Ⲇ, Δⵠ);
		Δ.drawImage(ⵠⵠ, Ⲇⵠⵠᐃ, 0);
		Δ.translate(0, -10 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 247.01138305664062, Ⲇ * 249.3125, 161.4465855941215 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠⵠᐃⲆ], Ⲇ * ⵠᐃⲆΔⵠ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ⵠΔⵠᐃ, Δᐃᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 325.0113830566406, 13.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 349.5113830566406, Ⲇ * 25.767059326171875, Ⲇ * 349.5113830566406, Ⲇ * 25.767059326171875, Ⲇ * 374.0113830566406, 37.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 384.0113830566406, 44.767059326171875 * Ⲇ, 383.0113830566406 * Ⲇ, 50.767059326171875 * Ⲇ, Ⲇ * 368.0113830566406, Ⲇ * 68.76705932617188);
		Δ.bezierCurveTo(352.5113830566406 * Ⲇ, Ⲇ * 91.26705932617188, Ⲇ * 352.5113830566406, Ⲇ * 91.26705932617188, Ⲇ * 337.0113830566406, 113.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 328.0113830566406, Ⲇ * 119.76705932617188, Ⲇ * 328.0113830566406, Ⲇ * 121.76705932617188, 312.0113830566406 * Ⲇ, Ⲇ * 112.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 303.0113830566406, Ⲇ * 108.26705932617188, 303.0113830566406 * Ⲇ, Ⲇ * 108.26705932617188, 294.0113830566406 * Ⲇ, Ⲇ * 103.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 287.0113830566406, Ⲇ * 99.76705932617188, 293.0113830566406 * Ⲇ, Ⲇ * 84.76705932617188, Ⲇ * 297.0113830566406, Ⲇ * 67.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 302.0113830566406, Ⲇ * 47.767059326171875, 302.0113830566406 * Ⲇ, Ⲇ * 47.767059326171875, Ⲇ * 307.0113830566406, Ⲇ * 27.767059326171875);
		Δ.bezierCurveTo(310.0113830566406 * Ⲇ, Ⲇ * 15.767059326171875, 317.0113830566406 * Ⲇ, 12.767059326171875 * Ⲇ, Ⲇ * 323.0113830566406, 13.767059326171875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ], Δⵠ[ⲆⲆᐃⲆ], ΔΔΔΔᐃΔΔ * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(0, Ⲇ * -ⵠⲆⲆⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 325.0113830566406, 13.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(349.5113830566406 * Ⲇ, 25.767059326171875 * Ⲇ, Ⲇ * 349.5113830566406, 25.767059326171875 * Ⲇ, 374.0113830566406 * Ⲇ, Ⲇ * 37.767059326171875);
		Δ.bezierCurveTo(384.0113830566406 * Ⲇ, 44.767059326171875 * Ⲇ, 383.0113830566406 * Ⲇ, Ⲇ * 50.767059326171875, 368.0113830566406 * Ⲇ, 68.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(352.5113830566406 * Ⲇ, 91.26705932617188 * Ⲇ, 352.5113830566406 * Ⲇ, Ⲇ * 91.26705932617188, Ⲇ * 337.0113830566406, Ⲇ * 113.76705932617188);
		Δ.bezierCurveTo(328.0113830566406 * Ⲇ, Ⲇ * 119.76705932617188, Ⲇ * 328.0113830566406, Ⲇ * 121.76705932617188, 312.0113830566406 * Ⲇ, 112.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 303.0113830566406, Ⲇ * 108.26705932617188, Ⲇ * 303.0113830566406, Ⲇ * 108.26705932617188, 294.0113830566406 * Ⲇ, Ⲇ * 103.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 287.0113830566406, Ⲇ * 99.76705932617188, 293.0113830566406 * Ⲇ, Ⲇ * 84.76705932617188, Ⲇ * 297.0113830566406, Ⲇ * 67.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 302.0113830566406, 47.767059326171875 * Ⲇ, 302.0113830566406 * Ⲇ, 47.767059326171875 * Ⲇ, Ⲇ * 307.0113830566406, Ⲇ * 27.767059326171875);
		Δ.bezierCurveTo(310.0113830566406 * Ⲇ, Ⲇ * 15.767059326171875, Ⲇ * 317.0113830566406, 12.767059326171875 * Ⲇ, 323.0113830566406 * Ⲇ, 13.767059326171875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔΔ], Δⵠ[ΔⵠⲆⲆ], Ⲇ * 12);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(Ⲇⵠⵠᐃ, Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 403.0113830566406, 89.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(413.0113830566406 * Ⲇ, Ⲇ * 76.76705932617188, Ⲇ * 418.0113830566406, Ⲇ * 79.76705932617188, 428.0113830566406 * Ⲇ, 92.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 435.0113830566406, 99.76705932617188 * Ⲇ, 435.0113830566406 * Ⲇ, Ⲇ * 99.76705932617188, Ⲇ * 442.0113830566406, 106.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(450.0113830566406 * Ⲇ, Ⲇ * 116.76705932617188, Ⲇ * 445.0113830566406, 119.76705932617188 * Ⲇ, 433.0113830566406 * Ⲇ, Ⲇ * 128.76705932617188);
		Δ.bezierCurveTo(408.0113830566406 * Ⲇ, Ⲇ * 146.26705932617188, Ⲇ * 408.0113830566406, 146.26705932617188 * Ⲇ, Ⲇ * 383.0113830566406, Ⲇ * 163.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 376.0113830566406, Ⲇ * 166.76705932617188, 377.0113830566406 * Ⲇ, 165.76705932617188 * Ⲇ, Ⲇ * 368.0113830566406, 156.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(359.0113830566406 * Ⲇ, Ⲇ * 144.76705932617188, Ⲇ * 359.0113830566406, Ⲇ * 142.76705932617188, Ⲇ * 367.0113830566406, 133.76705932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ], Δⵠ[0], Ⲇ * ⲆⲆⲆⲆΔ);
		Δ.globalAlpha = ⲆⲆⵠ;
		Δ.translate(0, -ᐃᐃⲆⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(403.0113830566406 * Ⲇ, 89.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(413.0113830566406 * Ⲇ, 76.76705932617188 * Ⲇ, Ⲇ * 418.0113830566406, Ⲇ * 79.76705932617188, 428.0113830566406 * Ⲇ, Ⲇ * 92.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 435.0113830566406, 99.76705932617188 * Ⲇ, Ⲇ * 435.0113830566406, Ⲇ * 99.76705932617188, Ⲇ * 442.0113830566406, Ⲇ * 106.76705932617188);
		Δ.bezierCurveTo(450.0113830566406 * Ⲇ, 116.76705932617188 * Ⲇ, 445.0113830566406 * Ⲇ, 119.76705932617188 * Ⲇ, Ⲇ * 433.0113830566406, Ⲇ * 128.76705932617188);
		Δ.bezierCurveTo(408.0113830566406 * Ⲇ, 146.26705932617188 * Ⲇ, 408.0113830566406 * Ⲇ, Ⲇ * 146.26705932617188, Ⲇ * 383.0113830566406, 163.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 376.0113830566406, 166.76705932617188 * Ⲇ, Ⲇ * 377.0113830566406, Ⲇ * 165.76705932617188, Ⲇ * 368.0113830566406, 156.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(359.0113830566406 * Ⲇ, Ⲇ * 144.76705932617188, 359.0113830566406 * Ⲇ, 142.76705932617188 * Ⲇ, 367.0113830566406 * Ⲇ, Ⲇ * 133.76705932617188);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[2], ⲆᐃⵠⲆⵠ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ΔΔⵠ;
		Δ.translate(0, Ⲇ * ⵠⲆⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 228.01138305664062, 1.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(246.51138305664062 * Ⲇ, 3.267059326171875 * Ⲇ, Ⲇ * 246.51138305664062, Ⲇ * 3.267059326171875, 265.0113830566406 * Ⲇ, 4.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(273.0113830566406 * Ⲇ, 5.767059326171875 * Ⲇ, Ⲇ * 275.0113830566406, Ⲇ * 11.767059326171875, 270.0113830566406 * Ⲇ, Ⲇ * 27.767059326171875);
		Δ.bezierCurveTo(Ⲇ * 264.0113830566406, Ⲇ * 54.267059326171875, Ⲇ * 264.0113830566406, Ⲇ * 54.267059326171875, Ⲇ * 258.0113830566406, Ⲇ * 80.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 256.0113830566406, 92.76705932617188 * Ⲇ, 256.0113830566406 * Ⲇ, Ⲇ * 94.76705932617188, 242.01138305664062 * Ⲇ, 93.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(226.01138305664062 * Ⲇ, 95.76705932617188 * Ⲇ, 225.01138305664062 * Ⲇ, 91.76705932617188 * Ⲇ, Ⲇ * 225.01138305664062, 80.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 223.51138305664062, 50.267059326171875 * Ⲇ, 223.51138305664062 * Ⲇ, 50.267059326171875 * Ⲇ, 222.01138305664062 * Ⲇ, Ⲇ * 19.767059326171875);
		Δ.bezierCurveTo(219.01138305664062 * Ⲇ, Ⲇ * 8.767059326171875, Ⲇ * 224.01138305664062, Ⲇ * 4.767059326171875, Ⲇ * 227.01138305664062, 2.767059326171875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], Ⲇ * ⵠΔⵠΔⵠ);
		Δ.globalAlpha = 1;
		Δ.translate(0, -ⲆⵠⲆΔᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 228.01138305664062, 1.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 246.51138305664062, Ⲇ * 3.267059326171875, Ⲇ * 246.51138305664062, Ⲇ * 3.267059326171875, 265.0113830566406 * Ⲇ, Ⲇ * 4.767059326171875);
		Δ.bezierCurveTo(Ⲇ * 273.0113830566406, 5.767059326171875 * Ⲇ, 275.0113830566406 * Ⲇ, Ⲇ * 11.767059326171875, Ⲇ * 270.0113830566406, Ⲇ * 27.767059326171875);
		Δ.bezierCurveTo(264.0113830566406 * Ⲇ, 54.267059326171875 * Ⲇ, 264.0113830566406 * Ⲇ, 54.267059326171875 * Ⲇ, 258.0113830566406 * Ⲇ, Ⲇ * 80.76705932617188);
		Δ.bezierCurveTo(256.0113830566406 * Ⲇ, 92.76705932617188 * Ⲇ, 256.0113830566406 * Ⲇ, Ⲇ * 94.76705932617188, 242.01138305664062 * Ⲇ, 93.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 226.01138305664062, 95.76705932617188 * Ⲇ, 225.01138305664062 * Ⲇ, Ⲇ * 91.76705932617188, 225.01138305664062 * Ⲇ, 80.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 223.51138305664062, Ⲇ * 50.267059326171875, 223.51138305664062 * Ⲇ, Ⲇ * 50.267059326171875, Ⲇ * 222.01138305664062, 19.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(219.01138305664062 * Ⲇ, Ⲇ * 8.767059326171875, Ⲇ * 224.01138305664062, Ⲇ * 4.767059326171875, 227.01138305664062 * Ⲇ, Ⲇ * 2.767059326171875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ΔΔⵠⲆ], Ⲇ * 12);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⲆⵠ;
		Δ.translate(0, Ⲇ * ⵠᐃⵠᐃΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 142.01138305664062, Ⲇ * 25.767059326171875);
		Δ.bezierCurveTo(158.51138305664062 * Ⲇ, Ⲇ * 19.767059326171875, 158.51138305664062 * Ⲇ, Ⲇ * 19.767059326171875, 175.01138305664062 * Ⲇ, 13.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(188.01138305664062 * Ⲇ, 11.767059326171875 * Ⲇ, Ⲇ * 188.01138305664062, Ⲇ * 16.767059326171875, Ⲇ * 191.01138305664062, 29.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 197.01138305664062, 60.267059326171875 * Ⲇ, Ⲇ * 197.01138305664062, 60.267059326171875 * Ⲇ, 203.01138305664062 * Ⲇ, 90.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 206.01138305664062, 102.76705932617188 * Ⲇ, 196.01138305664062 * Ⲇ, 99.76705932617188 * Ⲇ, Ⲇ * 181.01138305664062, Ⲇ * 105.76705932617188);
		Δ.bezierCurveTo(175.01138305664062 * Ⲇ, Ⲇ * 108.76705932617188, 172.01138305664062 * Ⲇ, Ⲇ * 104.76705932617188, Ⲇ * 164.01138305664062, Ⲇ * 84.76705932617188);
		Δ.bezierCurveTo(152.51138305664062 * Ⲇ, 63.267059326171875 * Ⲇ, 152.51138305664062 * Ⲇ, 63.267059326171875 * Ⲇ, 141.01138305664062 * Ⲇ, 41.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 138.01138305664062, 35.767059326171875 * Ⲇ, 138.01138305664062 * Ⲇ, Ⲇ * 29.767059326171875, 141.01138305664062 * Ⲇ, 27.767059326171875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ], Δⵠ[ⵠᐃⲆⵠ], 12 * Ⲇ);
		Δ.globalAlpha = ΔΔΔᐃ;
		Δ.translate(ⲆⲆᐃⲆ, -5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 142.01138305664062, 25.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(158.51138305664062 * Ⲇ, Ⲇ * 19.767059326171875, Ⲇ * 158.51138305664062, 19.767059326171875 * Ⲇ, Ⲇ * 175.01138305664062, Ⲇ * 13.767059326171875);
		Δ.bezierCurveTo(188.01138305664062 * Ⲇ, 11.767059326171875 * Ⲇ, 188.01138305664062 * Ⲇ, 16.767059326171875 * Ⲇ, 191.01138305664062 * Ⲇ, Ⲇ * 29.767059326171875);
		Δ.bezierCurveTo(197.01138305664062 * Ⲇ, 60.267059326171875 * Ⲇ, Ⲇ * 197.01138305664062, Ⲇ * 60.267059326171875, Ⲇ * 203.01138305664062, Ⲇ * 90.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 206.01138305664062, Ⲇ * 102.76705932617188, Ⲇ * 196.01138305664062, Ⲇ * 99.76705932617188, 181.01138305664062 * Ⲇ, 105.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 175.01138305664062, 108.76705932617188 * Ⲇ, 172.01138305664062 * Ⲇ, Ⲇ * 104.76705932617188, Ⲇ * 164.01138305664062, 84.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 152.51138305664062, Ⲇ * 63.267059326171875, 152.51138305664062 * Ⲇ, 63.267059326171875 * Ⲇ, 141.01138305664062 * Ⲇ, 41.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 138.01138305664062, Ⲇ * 35.767059326171875, Ⲇ * 138.01138305664062, Ⲇ * 29.767059326171875, 141.01138305664062 * Ⲇ, 27.767059326171875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔᐃⲆ], Δⵠ[ⵠⵠΔⵠ], ⲆΔᐃⵠⲆⵠⵠ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ᐃⲆΔᐃ, Ⲇ * ⲆⲆⲆᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(70.01138305664062 * Ⲇ, 76.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 83.01138305664062, 64.26705932617188 * Ⲇ, Ⲇ * 83.01138305664062, Ⲇ * 64.26705932617188, Ⲇ * 96.01138305664062, Ⲇ * 51.767059326171875);
		Δ.bezierCurveTo(104.01138305664062 * Ⲇ, 44.767059326171875 * Ⲇ, 110.01138305664062 * Ⲇ, Ⲇ * 51.767059326171875, Ⲇ * 119.01138305664062, Ⲇ * 66.76705932617188);
		Δ.bezierCurveTo(135.01138305664062 * Ⲇ, Ⲇ * 88.26705932617188, Ⲇ * 135.01138305664062, 88.26705932617188 * Ⲇ, 151.01138305664062 * Ⲇ, 109.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(157.01138305664062 * Ⲇ, Ⲇ * 119.76705932617188, Ⲇ * 153.01138305664062, 122.76705932617188 * Ⲇ, 147.01138305664062 * Ⲇ, 129.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 138.01138305664062, Ⲇ * 140.76705932617188, Ⲇ * 136.01138305664062, Ⲇ * 140.76705932617188, Ⲇ * 122.01138305664062, 127.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 99.51138305664062, Ⲇ * 110.26705932617188, Ⲇ * 99.51138305664062, Ⲇ * 110.26705932617188, 77.01138305664062 * Ⲇ, Ⲇ * 92.76705932617188);
		Δ.bezierCurveTo(66.01138305664062 * Ⲇ, 83.76705932617188 * Ⲇ, Ⲇ * 66.01138305664062, 82.76705932617188 * Ⲇ, 69.01138305664062 * Ⲇ, Ⲇ * 78.76705932617188);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠᐃⲆⵠ], 12 * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(ⵠᐃΔ, Ⲇ * -5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 70.01138305664062, 76.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 83.01138305664062, Ⲇ * 64.26705932617188, 83.01138305664062 * Ⲇ, 64.26705932617188 * Ⲇ, 96.01138305664062 * Ⲇ, 51.767059326171875 * Ⲇ);
		Δ.bezierCurveTo(104.01138305664062 * Ⲇ, 44.767059326171875 * Ⲇ, 110.01138305664062 * Ⲇ, 51.767059326171875 * Ⲇ, Ⲇ * 119.01138305664062, 66.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(135.01138305664062 * Ⲇ, 88.26705932617188 * Ⲇ, 135.01138305664062 * Ⲇ, 88.26705932617188 * Ⲇ, 151.01138305664062 * Ⲇ, Ⲇ * 109.76705932617188);
		Δ.bezierCurveTo(157.01138305664062 * Ⲇ, 119.76705932617188 * Ⲇ, 153.01138305664062 * Ⲇ, 122.76705932617188 * Ⲇ, 147.01138305664062 * Ⲇ, Ⲇ * 129.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 138.01138305664062, 140.76705932617188 * Ⲇ, 136.01138305664062 * Ⲇ, 140.76705932617188 * Ⲇ, 122.01138305664062 * Ⲇ, Ⲇ * 127.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 99.51138305664062, Ⲇ * 110.26705932617188, Ⲇ * 99.51138305664062, Ⲇ * 110.26705932617188, Ⲇ * 77.01138305664062, 92.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 66.01138305664062, Ⲇ * 83.76705932617188, Ⲇ * 66.01138305664062, 82.76705932617188 * Ⲇ, Ⲇ * 69.01138305664062, Ⲇ * 78.76705932617188);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔᐃⲆ], Δⵠ[2], Ⲇ * 12);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⵠⲆ;
		Δ.translate(0, Ⲇ * ⲆⵠⲆΔᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 33.011383056640625, 126.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 22.011383056640625, Ⲇ * 149.76705932617188, Ⲇ * 22.011383056640625, Ⲇ * 149.76705932617188, 11.011383056640625 * Ⲇ, 172.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 7.011383056640625, 184.76705932617188 * Ⲇ, Ⲇ * 11.011383056640625, Ⲇ * 189.76705932617188, Ⲇ * 36.011383056640625, 195.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 61.011383056640625, 202.26705932617188 * Ⲇ, 61.011383056640625 * Ⲇ, Ⲇ * 202.26705932617188, 86.01138305664062 * Ⲇ, Ⲇ * 208.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 100.01138305664062, Ⲇ * 214.76705932617188, 102.01138305664062 * Ⲇ, Ⲇ * 203.76705932617188, Ⲇ * 109.01138305664062, 189.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 117.01138305664062, 171.76705932617188 * Ⲇ, 116.01138305664062 * Ⲇ, Ⲇ * 166.76705932617188, 97.01138305664062 * Ⲇ, 156.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 74.01138305664062, Ⲇ * 140.76705932617188, Ⲇ * 74.01138305664062, Ⲇ * 140.76705932617188, Ⲇ * 51.011383056640625, Ⲇ * 124.76705932617188);
		Δ.bezierCurveTo(42.011383056640625 * Ⲇ, Ⲇ * 118.76705932617188, Ⲇ * 37.011383056640625, 119.76705932617188 * Ⲇ, 33.011383056640625 * Ⲇ, 126.76705932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ], Δⵠ[ⲆⲆΔ], Ⲇ * ⲆᐃⵠⲆⵠ);
		Δ.globalAlpha = ⲆⲆΔⵠ;
		Δ.translate(Ⲇⵠⵠᐃ, -5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 33.011383056640625, 126.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 22.011383056640625, Ⲇ * 149.76705932617188, Ⲇ * 22.011383056640625, 149.76705932617188 * Ⲇ, Ⲇ * 11.011383056640625, 172.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(7.011383056640625 * Ⲇ, Ⲇ * 184.76705932617188, 11.011383056640625 * Ⲇ, 189.76705932617188 * Ⲇ, 36.011383056640625 * Ⲇ, Ⲇ * 195.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 61.011383056640625, Ⲇ * 202.26705932617188, 61.011383056640625 * Ⲇ, Ⲇ * 202.26705932617188, Ⲇ * 86.01138305664062, 208.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 100.01138305664062, Ⲇ * 214.76705932617188, Ⲇ * 102.01138305664062, 203.76705932617188 * Ⲇ, 109.01138305664062 * Ⲇ, Ⲇ * 189.76705932617188);
		Δ.bezierCurveTo(117.01138305664062 * Ⲇ, Ⲇ * 171.76705932617188, 116.01138305664062 * Ⲇ, Ⲇ * 166.76705932617188, 97.01138305664062 * Ⲇ, 156.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(74.01138305664062 * Ⲇ, Ⲇ * 140.76705932617188, 74.01138305664062 * Ⲇ, 140.76705932617188 * Ⲇ, Ⲇ * 51.011383056640625, 124.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(42.011383056640625 * Ⲇ, 118.76705932617188 * Ⲇ, Ⲇ * 37.011383056640625, 119.76705932617188 * Ⲇ, 33.011383056640625 * Ⲇ, 126.76705932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃⲆ], Δⵠ[2], 12 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ΔΔⵠ;
		Δ.translate(0, Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 13.011383056640625, Ⲇ * 229.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 45.511383056640625, Ⲇ * 233.76705932617188, Ⲇ * 45.511383056640625, Ⲇ * 233.76705932617188, Ⲇ * 78.01138305664062, Ⲇ * 237.76705932617188);
		Δ.bezierCurveTo(92.01138305664062 * Ⲇ, 239.76705932617188 * Ⲇ, 92.01138305664062 * Ⲇ, 246.76705932617188 * Ⲇ, Ⲇ * 91.01138305664062, 257.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(92.01138305664062 * Ⲇ, 275.7670593261719 * Ⲇ, Ⲇ * 91.01138305664062, Ⲇ * 274.7670593261719, 68.01138305664062 * Ⲇ, Ⲇ * 276.7670593261719);
		Δ.bezierCurveTo(42.511383056640625 * Ⲇ, Ⲇ * 279.7670593261719, Ⲇ * 42.511383056640625, 279.7670593261719 * Ⲇ, 17.011383056640625 * Ⲇ, 282.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(2.011383056640625 * Ⲇ, Ⲇ * 282.7670593261719, Ⲇ * 3.011383056640625, Ⲇ * 276.7670593261719, 2.011383056640625 * Ⲇ, 260.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 2.011383056640625, 231.76705932617188 * Ⲇ, Ⲇ * 4.011383056640625, 232.76705932617188 * Ⲇ, Ⲇ * 11.011383056640625, 230.76705932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ], Δⵠ[ⲆⲆΔ], 12 * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(0, Ⲇ * -5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(13.011383056640625 * Ⲇ, 229.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(45.511383056640625 * Ⲇ, Ⲇ * 233.76705932617188, 45.511383056640625 * Ⲇ, Ⲇ * 233.76705932617188, 78.01138305664062 * Ⲇ, Ⲇ * 237.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 92.01138305664062, Ⲇ * 239.76705932617188, Ⲇ * 92.01138305664062, 246.76705932617188 * Ⲇ, 91.01138305664062 * Ⲇ, Ⲇ * 257.7670593261719);
		Δ.bezierCurveTo(Ⲇ * 92.01138305664062, Ⲇ * 275.7670593261719, Ⲇ * 91.01138305664062, Ⲇ * 274.7670593261719, 68.01138305664062 * Ⲇ, Ⲇ * 276.7670593261719);
		Δ.bezierCurveTo(42.511383056640625 * Ⲇ, Ⲇ * 279.7670593261719, Ⲇ * 42.511383056640625, Ⲇ * 279.7670593261719, Ⲇ * 17.011383056640625, Ⲇ * 282.7670593261719);
		Δ.bezierCurveTo(2.011383056640625 * Ⲇ, 282.7670593261719 * Ⲇ, Ⲇ * 3.011383056640625, Ⲇ * 276.7670593261719, Ⲇ * 2.011383056640625, 260.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(2.011383056640625 * Ⲇ, Ⲇ * 231.76705932617188, Ⲇ * 4.011383056640625, Ⲇ * 232.76705932617188, Ⲇ * 11.011383056640625, 230.76705932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⵠⲆⵠᐃ], Δⵠ[ᐃⵠΔⲆ], Ⲇ * ᐃⲆᐃⲆⵠ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ⵠᐃⲆⵠ, 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 97.01138305664062, 329.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 68.51138305664062, Ⲇ * 343.7670593261719, Ⲇ * 68.51138305664062, 343.7670593261719 * Ⲇ, 40.011383056640625 * Ⲇ, 357.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(29.011383056640625 * Ⲇ, Ⲇ * 360.7670593261719, 27.011383056640625 * Ⲇ, Ⲇ * 361.7670593261719, 20.011383056640625 * Ⲇ, Ⲇ * 346.7670593261719);
		Δ.bezierCurveTo(16.511383056640625 * Ⲇ, Ⲇ * 336.2670593261719, 16.511383056640625 * Ⲇ, 336.2670593261719 * Ⲇ, Ⲇ * 13.011383056640625, 325.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 10.011383056640625, Ⲇ * 307.7670593261719, Ⲇ * 18.011383056640625, Ⲇ * 312.7670593261719, Ⲇ * 34.011383056640625, 306.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(59.511383056640625 * Ⲇ, Ⲇ * 302.2670593261719, 59.511383056640625 * Ⲇ, Ⲇ * 302.2670593261719, Ⲇ * 85.01138305664062, Ⲇ * 297.7670593261719);
		Δ.bezierCurveTo(97.01138305664062 * Ⲇ, Ⲇ * 294.7670593261719, Ⲇ * 100.01138305664062, Ⲇ * 297.7670593261719, 100.01138305664062 * Ⲇ, Ⲇ * 307.7670593261719);
		Δ.bezierCurveTo(Ⲇ * 105.01138305664062, Ⲇ * 326.7670593261719, Ⲇ * 103.01138305664062, Ⲇ * 325.7670593261719, 97.01138305664062 * Ⲇ, Ⲇ * 329.7670593261719);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃΔⵠ], Δⵠ[ⲆⲆᐃ], Ⲇ * ΔΔΔΔᐃΔΔ);
		Δ.globalAlpha = ᐃΔⵠΔ;
		Δ.translate(Δⵠⵠ, -ⵠᐃⲆᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(97.01138305664062 * Ⲇ, Ⲇ * 329.7670593261719);
		Δ.bezierCurveTo(Ⲇ * 68.51138305664062, 343.7670593261719 * Ⲇ, 68.51138305664062 * Ⲇ, 343.7670593261719 * Ⲇ, 40.011383056640625 * Ⲇ, Ⲇ * 357.7670593261719);
		Δ.bezierCurveTo(29.011383056640625 * Ⲇ, 360.7670593261719 * Ⲇ, Ⲇ * 27.011383056640625, 361.7670593261719 * Ⲇ, Ⲇ * 20.011383056640625, Ⲇ * 346.7670593261719);
		Δ.bezierCurveTo(Ⲇ * 16.511383056640625, 336.2670593261719 * Ⲇ, Ⲇ * 16.511383056640625, 336.2670593261719 * Ⲇ, Ⲇ * 13.011383056640625, 325.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 10.011383056640625, Ⲇ * 307.7670593261719, Ⲇ * 18.011383056640625, 312.7670593261719 * Ⲇ, 34.011383056640625 * Ⲇ, 306.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(59.511383056640625 * Ⲇ, 302.2670593261719 * Ⲇ, Ⲇ * 59.511383056640625, Ⲇ * 302.2670593261719, 85.01138305664062 * Ⲇ, 297.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 97.01138305664062, Ⲇ * 294.7670593261719, 100.01138305664062 * Ⲇ, Ⲇ * 297.7670593261719, Ⲇ * 100.01138305664062, 307.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(105.01138305664062 * Ⲇ, Ⲇ * 326.7670593261719, Ⲇ * 103.01138305664062, Ⲇ * 325.7670593261719, Ⲇ * 97.01138305664062, Ⲇ * 329.7670593261719);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⵠⲆΔᐃ], Ⲇ * ΔΔⵠⵠⲆΔΔ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(0, Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(394.0113830566406 * Ⲇ, 181.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(426.5113830566406 * Ⲇ, 166.76705932617188 * Ⲇ, Ⲇ * 426.5113830566406, 166.76705932617188 * Ⲇ, Ⲇ * 459.0113830566406, Ⲇ * 151.76705932617188);
		Δ.bezierCurveTo(469.0113830566406 * Ⲇ, 152.76705932617188 * Ⲇ, 469.0113830566406 * Ⲇ, Ⲇ * 155.76705932617188, 472.0113830566406 * Ⲇ, Ⲇ * 165.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 476.0113830566406, Ⲇ * 177.26705932617188, 476.0113830566406 * Ⲇ, Ⲇ * 177.26705932617188, Ⲇ * 480.0113830566406, Ⲇ * 188.76705932617188);
		Δ.bezierCurveTo(483.0113830566406 * Ⲇ, Ⲇ * 199.76705932617188, 480.0113830566406 * Ⲇ, 200.76705932617188 * Ⲇ, 460.0113830566406 * Ⲇ, 205.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 433.5113830566406, 210.26705932617188 * Ⲇ, 433.5113830566406 * Ⲇ, 210.26705932617188 * Ⲇ, 407.0113830566406 * Ⲇ, Ⲇ * 214.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 395.0113830566406, Ⲇ * 218.76705932617188, Ⲇ * 397.0113830566406, Ⲇ * 211.76705932617188, Ⲇ * 393.0113830566406, Ⲇ * 202.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 387.0113830566406, Ⲇ * 188.76705932617188, Ⲇ * 387.0113830566406, Ⲇ * 187.76705932617188, Ⲇ * 394.0113830566406, 181.76705932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃⲆΔᐃ], Ⲇ * 12);
		Δ.globalAlpha = ⵠⵠⵠⲆ;
		Δ.translate(0, Ⲇ * -5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(394.0113830566406 * Ⲇ, 181.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 426.5113830566406, Ⲇ * 166.76705932617188, Ⲇ * 426.5113830566406, Ⲇ * 166.76705932617188, Ⲇ * 459.0113830566406, 151.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 469.0113830566406, 152.76705932617188 * Ⲇ, 469.0113830566406 * Ⲇ, Ⲇ * 155.76705932617188, Ⲇ * 472.0113830566406, 165.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 476.0113830566406, 177.26705932617188 * Ⲇ, Ⲇ * 476.0113830566406, Ⲇ * 177.26705932617188, 480.0113830566406 * Ⲇ, 188.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(483.0113830566406 * Ⲇ, 199.76705932617188 * Ⲇ, Ⲇ * 480.0113830566406, 200.76705932617188 * Ⲇ, 460.0113830566406 * Ⲇ, Ⲇ * 205.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 433.5113830566406, Ⲇ * 210.26705932617188, Ⲇ * 433.5113830566406, Ⲇ * 210.26705932617188, 407.0113830566406 * Ⲇ, Ⲇ * 214.76705932617188);
		Δ.bezierCurveTo(395.0113830566406 * Ⲇ, Ⲇ * 218.76705932617188, 397.0113830566406 * Ⲇ, 211.76705932617188 * Ⲇ, 393.0113830566406 * Ⲇ, Ⲇ * 202.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 387.0113830566406, 188.76705932617188 * Ⲇ, Ⲇ * 387.0113830566406, Ⲇ * 187.76705932617188, 394.0113830566406 * Ⲇ, Ⲇ * 181.76705932617188);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆΔⲆ], Δⵠ[ⲆᐃᐃⲆ], 12 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ᐃⲆΔᐃ, Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 411.0113830566406, Ⲇ * 234.76705932617188);
		Δ.bezierCurveTo(446.0113830566406 * Ⲇ, 233.26705932617188 * Ⲇ, Ⲇ * 446.0113830566406, Ⲇ * 233.26705932617188, 481.0113830566406 * Ⲇ, Ⲇ * 231.76705932617188);
		Δ.bezierCurveTo(491.0113830566406 * Ⲇ, 232.76705932617188 * Ⲇ, 493.0113830566406 * Ⲇ, Ⲇ * 239.76705932617188, 491.0113830566406 * Ⲇ, Ⲇ * 251.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 490.0113830566406, Ⲇ * 263.7670593261719, Ⲇ * 490.0113830566406, Ⲇ * 263.7670593261719, Ⲇ * 489.0113830566406, Ⲇ * 275.7670593261719);
		Δ.bezierCurveTo(487.0113830566406 * Ⲇ, 283.7670593261719 * Ⲇ, 483.0113830566406 * Ⲇ, Ⲇ * 284.7670593261719, 464.0113830566406 * Ⲇ, Ⲇ * 280.7670593261719);
		Δ.bezierCurveTo(Ⲇ * 437.0113830566406, 273.7670593261719 * Ⲇ, 437.0113830566406 * Ⲇ, Ⲇ * 273.7670593261719, Ⲇ * 410.0113830566406, 266.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(400.0113830566406 * Ⲇ, Ⲇ * 261.7670593261719, 401.0113830566406 * Ⲇ, Ⲇ * 259.7670593261719, Ⲇ * 402.0113830566406, 249.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 401.0113830566406, Ⲇ * 237.76705932617188, Ⲇ * 403.0113830566406, Ⲇ * 235.76705932617188, Ⲇ * 408.0113830566406, Ⲇ * 234.76705932617188);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], Ⲇ * 12);
		Δ.globalAlpha = 1;
		Δ.translate(0, -ⵠⲆⲆⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(411.0113830566406 * Ⲇ, 234.76705932617188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 446.0113830566406, Ⲇ * 233.26705932617188, 446.0113830566406 * Ⲇ, 233.26705932617188 * Ⲇ, Ⲇ * 481.0113830566406, Ⲇ * 231.76705932617188);
		Δ.bezierCurveTo(491.0113830566406 * Ⲇ, Ⲇ * 232.76705932617188, Ⲇ * 493.0113830566406, Ⲇ * 239.76705932617188, Ⲇ * 491.0113830566406, Ⲇ * 251.76705932617188);
		Δ.bezierCurveTo(490.0113830566406 * Ⲇ, Ⲇ * 263.7670593261719, 490.0113830566406 * Ⲇ, 263.7670593261719 * Ⲇ, 489.0113830566406 * Ⲇ, 275.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 487.0113830566406, Ⲇ * 283.7670593261719, Ⲇ * 483.0113830566406, 284.7670593261719 * Ⲇ, 464.0113830566406 * Ⲇ, 280.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 437.0113830566406, 273.7670593261719 * Ⲇ, Ⲇ * 437.0113830566406, Ⲇ * 273.7670593261719, 410.0113830566406 * Ⲇ, Ⲇ * 266.7670593261719);
		Δ.bezierCurveTo(400.0113830566406 * Ⲇ, Ⲇ * 261.7670593261719, Ⲇ * 401.0113830566406, 259.7670593261719 * Ⲇ, Ⲇ * 402.0113830566406, Ⲇ * 249.76705932617188);
		Δ.bezierCurveTo(Ⲇ * 401.0113830566406, 237.76705932617188 * Ⲇ, Ⲇ * 403.0113830566406, 235.76705932617188 * Ⲇ, 408.0113830566406 * Ⲇ, Ⲇ * 234.76705932617188);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⵠⲆΔᐃ], 12 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(0, ⵠᐃⲆᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 400.0113830566406, 290.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 437.0113830566406, Ⲇ * 301.2670593261719, 437.0113830566406 * Ⲇ, 301.2670593261719 * Ⲇ, 474.0113830566406 * Ⲇ, 311.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 484.0113830566406, 319.7670593261719 * Ⲇ, 481.0113830566406 * Ⲇ, Ⲇ * 322.7670593261719, Ⲇ * 474.0113830566406, Ⲇ * 335.7670593261719);
		Δ.bezierCurveTo(465.5113830566406 * Ⲇ, Ⲇ * 354.7670593261719, 465.5113830566406 * Ⲇ, 354.7670593261719 * Ⲇ, Ⲇ * 457.0113830566406, Ⲇ * 373.7670593261719);
		Δ.bezierCurveTo(449.0113830566406 * Ⲇ, 386.7670593261719 * Ⲇ, 444.0113830566406 * Ⲇ, Ⲇ * 384.7670593261719, Ⲇ * 427.0113830566406, Ⲇ * 370.7670593261719);
		Δ.bezierCurveTo(Ⲇ * 403.0113830566406, Ⲇ * 354.7670593261719, Ⲇ * 403.0113830566406, 354.7670593261719 * Ⲇ, Ⲇ * 379.0113830566406, Ⲇ * 338.7670593261719);
		Δ.bezierCurveTo(Ⲇ * 371.0113830566406, 327.7670593261719 * Ⲇ, Ⲇ * 373.0113830566406, Ⲇ * 323.7670593261719, Ⲇ * 377.0113830566406, Ⲇ * 313.7670593261719);
		Δ.bezierCurveTo(Ⲇ * 386.0113830566406, 292.7670593261719 * Ⲇ, Ⲇ * 393.0113830566406, 288.7670593261719 * Ⲇ, 398.0113830566406 * Ⲇ, 291.7670593261719 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆⵠ], Δⵠ[ⵠΔΔⲆ], ⲆⵠΔΔⲆ * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(0, -5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(400.0113830566406 * Ⲇ, 290.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 437.0113830566406, 301.2670593261719 * Ⲇ, Ⲇ * 437.0113830566406, Ⲇ * 301.2670593261719, 474.0113830566406 * Ⲇ, Ⲇ * 311.7670593261719);
		Δ.bezierCurveTo(484.0113830566406 * Ⲇ, Ⲇ * 319.7670593261719, Ⲇ * 481.0113830566406, Ⲇ * 322.7670593261719, Ⲇ * 474.0113830566406, Ⲇ * 335.7670593261719);
		Δ.bezierCurveTo(Ⲇ * 465.5113830566406, Ⲇ * 354.7670593261719, Ⲇ * 465.5113830566406, 354.7670593261719 * Ⲇ, 457.0113830566406 * Ⲇ, 373.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 449.0113830566406, Ⲇ * 386.7670593261719, Ⲇ * 444.0113830566406, Ⲇ * 384.7670593261719, Ⲇ * 427.0113830566406, 370.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 403.0113830566406, Ⲇ * 354.7670593261719, 403.0113830566406 * Ⲇ, Ⲇ * 354.7670593261719, 379.0113830566406 * Ⲇ, Ⲇ * 338.7670593261719);
		Δ.bezierCurveTo(371.0113830566406 * Ⲇ, 327.7670593261719 * Ⲇ, Ⲇ * 373.0113830566406, 323.7670593261719 * Ⲇ, 377.0113830566406 * Ⲇ, 313.7670593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 386.0113830566406, 292.7670593261719 * Ⲇ, Ⲇ * 393.0113830566406, 288.7670593261719 * Ⲇ, Ⲇ * 398.0113830566406, Ⲇ * 291.7670593261719);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[2], 12 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ΔᐃⵠⲆ;
		Δ.translate(ⲆⲆᐃ, 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(366.0113830566406 * Ⲇ, Ⲇ * 361.2216033935547);
		Δ.bezierCurveTo(393.0113830566406 * Ⲇ, 383.2216033935547 * Ⲇ, Ⲇ * 393.0113830566406, Ⲇ * 383.2216033935547, Ⲇ * 420.0113830566406, 405.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(427.0113830566406 * Ⲇ, Ⲇ * 414.2216033935547, 425.0113830566406 * Ⲇ, Ⲇ * 417.2216033935547, 413.0113830566406 * Ⲇ, 428.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 405.5113830566406, 435.2216033935547 * Ⲇ, 405.5113830566406 * Ⲇ, 435.2216033935547 * Ⲇ, 398.0113830566406 * Ⲇ, Ⲇ * 442.2216033935547);
		Δ.bezierCurveTo(388.0113830566406 * Ⲇ, Ⲇ * 451.2216033935547, 385.0113830566406 * Ⲇ, 445.2216033935547 * Ⲇ, Ⲇ * 373.0113830566406, 428.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(358.5113830566406 * Ⲇ, 408.2216033935547 * Ⲇ, Ⲇ * 358.5113830566406, 408.2216033935547 * Ⲇ, Ⲇ * 344.0113830566406, 388.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 337.0113830566406, 378.2216033935547 * Ⲇ, 342.0113830566406 * Ⲇ, 377.2216033935547 * Ⲇ, 347.0113830566406 * Ⲇ, Ⲇ * 371.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 359.0113830566406, Ⲇ * 359.2216033935547, 361.0113830566406 * Ⲇ, 358.2216033935547 * Ⲇ, Ⲇ * 364.0113830566406, Ⲇ * 361.2216033935547);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆᐃ], Δⵠ[ⵠⵠⲆΔ], Ⲇ * 12);
		Δ.globalAlpha = ΔⲆⵠⲆ;
		Δ.translate(ΔᐃⲆⲆ, -ⵠᐃⲆᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 366.0113830566406, 361.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 393.0113830566406, Ⲇ * 383.2216033935547, 393.0113830566406 * Ⲇ, Ⲇ * 383.2216033935547, 420.0113830566406 * Ⲇ, 405.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(427.0113830566406 * Ⲇ, Ⲇ * 414.2216033935547, 425.0113830566406 * Ⲇ, Ⲇ * 417.2216033935547, 413.0113830566406 * Ⲇ, Ⲇ * 428.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 405.5113830566406, Ⲇ * 435.2216033935547, Ⲇ * 405.5113830566406, Ⲇ * 435.2216033935547, 398.0113830566406 * Ⲇ, 442.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 388.0113830566406, Ⲇ * 451.2216033935547, 385.0113830566406 * Ⲇ, 445.2216033935547 * Ⲇ, Ⲇ * 373.0113830566406, 428.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 358.5113830566406, Ⲇ * 408.2216033935547, Ⲇ * 358.5113830566406, 408.2216033935547 * Ⲇ, 344.0113830566406 * Ⲇ, Ⲇ * 388.2216033935547);
		Δ.bezierCurveTo(337.0113830566406 * Ⲇ, Ⲇ * 378.2216033935547, 342.0113830566406 * Ⲇ, Ⲇ * 377.2216033935547, 347.0113830566406 * Ⲇ, Ⲇ * 371.2216033935547);
		Δ.bezierCurveTo(359.0113830566406 * Ⲇ, Ⲇ * 359.2216033935547, 361.0113830566406 * Ⲇ, Ⲇ * 358.2216033935547, Ⲇ * 364.0113830566406, Ⲇ * 361.2216033935547);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[2], Ⲇ * 12);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⲆΔⵠ;
		Δ.translate(0, 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(323.0113830566406 * Ⲇ, Ⲇ * 393.2216033935547);
		Δ.bezierCurveTo(338.0113830566406 * Ⲇ, 424.7216033935547 * Ⲇ, 338.0113830566406 * Ⲇ, Ⲇ * 424.7216033935547, 353.0113830566406 * Ⲇ, 456.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(355.0113830566406 * Ⲇ, 467.2216033935547 * Ⲇ, Ⲇ * 354.0113830566406, Ⲇ * 469.2216033935547, Ⲇ * 336.0113830566406, 475.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(326.0113830566406 * Ⲇ, Ⲇ * 478.2216033935547, 326.0113830566406 * Ⲇ, Ⲇ * 478.2216033935547, 316.0113830566406 * Ⲇ, 481.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(304.0113830566406 * Ⲇ, 484.2216033935547 * Ⲇ, Ⲇ * 304.0113830566406, Ⲇ * 477.2216033935547, 301.0113830566406 * Ⲇ, Ⲇ * 454.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 295.5113830566406, Ⲇ * 429.2216033935547, Ⲇ * 295.5113830566406, 429.2216033935547 * Ⲇ, 290.0113830566406 * Ⲇ, Ⲇ * 404.2216033935547);
		Δ.bezierCurveTo(287.0113830566406 * Ⲇ, 396.2216033935547 * Ⲇ, 297.0113830566406 * Ⲇ, Ⲇ * 394.2216033935547, 303.0113830566406 * Ⲇ, 392.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(316.0113830566406 * Ⲇ, Ⲇ * 387.2216033935547, Ⲇ * 318.0113830566406, 387.2216033935547 * Ⲇ, 323.0113830566406 * Ⲇ, 394.2216033935547 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆᐃ], Δⵠ[0], 12 * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(0, -Δᐃᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 323.0113830566406, 393.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(338.0113830566406 * Ⲇ, Ⲇ * 424.7216033935547, Ⲇ * 338.0113830566406, Ⲇ * 424.7216033935547, 353.0113830566406 * Ⲇ, Ⲇ * 456.2216033935547);
		Δ.bezierCurveTo(355.0113830566406 * Ⲇ, 467.2216033935547 * Ⲇ, Ⲇ * 354.0113830566406, Ⲇ * 469.2216033935547, 336.0113830566406 * Ⲇ, 475.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(326.0113830566406 * Ⲇ, Ⲇ * 478.2216033935547, 326.0113830566406 * Ⲇ, Ⲇ * 478.2216033935547, 316.0113830566406 * Ⲇ, Ⲇ * 481.2216033935547);
		Δ.bezierCurveTo(304.0113830566406 * Ⲇ, Ⲇ * 484.2216033935547, Ⲇ * 304.0113830566406, 477.2216033935547 * Ⲇ, Ⲇ * 301.0113830566406, 454.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(295.5113830566406 * Ⲇ, Ⲇ * 429.2216033935547, 295.5113830566406 * Ⲇ, Ⲇ * 429.2216033935547, 290.0113830566406 * Ⲇ, Ⲇ * 404.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 287.0113830566406, 396.2216033935547 * Ⲇ, Ⲇ * 297.0113830566406, Ⲇ * 394.2216033935547, 303.0113830566406 * Ⲇ, 392.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 316.0113830566406, Ⲇ * 387.2216033935547, 318.0113830566406 * Ⲇ, 387.2216033935547 * Ⲇ, Ⲇ * 323.0113830566406, Ⲇ * 394.2216033935547);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⵠᐃᐃⲆ], 12 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : Δⵠᐃ;
		Δ.translate(0, ⲆᐃΔⲆⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 270.0113830566406, 413.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(271.0113830566406 * Ⲇ, Ⲇ * 445.7216033935547, 271.0113830566406 * Ⲇ, 445.7216033935547 * Ⲇ, 272.0113830566406 * Ⲇ, 478.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(273.0113830566406 * Ⲇ, Ⲇ * 490.2216033935547, Ⲇ * 267.0113830566406, 493.2216033935547 * Ⲇ, Ⲇ * 249.01138305664062, 490.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(222.01138305664062 * Ⲇ, Ⲇ * 492.2216033935547, Ⲇ * 220.01138305664062, Ⲇ * 485.2216033935547, 225.01138305664062 * Ⲇ, 467.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(230.51138305664062 * Ⲇ, 440.2216033935547 * Ⲇ, Ⲇ * 230.51138305664062, Ⲇ * 440.2216033935547, Ⲇ * 236.01138305664062, Ⲇ * 413.2216033935547);
		Δ.bezierCurveTo(237.01138305664062 * Ⲇ, Ⲇ * 405.2216033935547, Ⲇ * 238.01138305664062, Ⲇ * 404.2216033935547, 253.01138305664062 * Ⲇ, 403.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 269.0113830566406, Ⲇ * 405.2216033935547, Ⲇ * 270.0113830566406, 407.2216033935547 * Ⲇ, Ⲇ * 269.0113830566406, 412.2216033935547 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ], Δⵠ[0], ⲆᐃⵠⲆⵠ * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(ⵠΔΔⲆ, -ⲆᐃΔⲆⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(270.0113830566406 * Ⲇ, 413.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 271.0113830566406, 445.7216033935547 * Ⲇ, Ⲇ * 271.0113830566406, 445.7216033935547 * Ⲇ, 272.0113830566406 * Ⲇ, Ⲇ * 478.2216033935547);
		Δ.bezierCurveTo(273.0113830566406 * Ⲇ, Ⲇ * 490.2216033935547, 267.0113830566406 * Ⲇ, 493.2216033935547 * Ⲇ, 249.01138305664062 * Ⲇ, Ⲇ * 490.2216033935547);
		Δ.bezierCurveTo(222.01138305664062 * Ⲇ, 492.2216033935547 * Ⲇ, Ⲇ * 220.01138305664062, 485.2216033935547 * Ⲇ, 225.01138305664062 * Ⲇ, Ⲇ * 467.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 230.51138305664062, Ⲇ * 440.2216033935547, Ⲇ * 230.51138305664062, Ⲇ * 440.2216033935547, 236.01138305664062 * Ⲇ, Ⲇ * 413.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 237.01138305664062, Ⲇ * 405.2216033935547, Ⲇ * 238.01138305664062, Ⲇ * 404.2216033935547, 253.01138305664062 * Ⲇ, Ⲇ * 403.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 269.0113830566406, 405.2216033935547 * Ⲇ, 270.0113830566406 * Ⲇ, 407.2216033935547 * Ⲇ, Ⲇ * 269.0113830566406, 412.2216033935547 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⲆᐃⲆ], Δⵠ[2], Ⲇ * 12);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(0, Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(207.01138305664062 * Ⲇ, 406.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 197.51138305664062, Ⲇ * 440.7216033935547, 197.51138305664062 * Ⲇ, 440.7216033935547 * Ⲇ, Ⲇ * 188.01138305664062, 475.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(184.01138305664062 * Ⲇ, 485.2216033935547 * Ⲇ, Ⲇ * 179.01138305664062, 491.2216033935547 * Ⲇ, 152.01138305664062 * Ⲇ, Ⲇ * 477.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 136.51138305664062, 469.7216033935547 * Ⲇ, Ⲇ * 136.51138305664062, 469.7216033935547 * Ⲇ, 121.01138305664062 * Ⲇ, 462.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(109.01138305664062 * Ⲇ, 453.2216033935547 * Ⲇ, Ⲇ * 117.01138305664062, 447.2216033935547 * Ⲇ, 133.01138305664062 * Ⲇ, 427.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(146.51138305664062 * Ⲇ, 406.7216033935547 * Ⲇ, Ⲇ * 146.51138305664062, Ⲇ * 406.7216033935547, Ⲇ * 160.01138305664062, Ⲇ * 386.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 163.01138305664062, Ⲇ * 377.2216033935547, 168.01138305664062 * Ⲇ, Ⲇ * 378.2216033935547, 187.01138305664062 * Ⲇ, Ⲇ * 387.2216033935547);
		Δ.bezierCurveTo(206.01138305664062 * Ⲇ, Ⲇ * 395.2216033935547, 208.01138305664062 * Ⲇ, Ⲇ * 398.2216033935547, 207.01138305664062 * Ⲇ, 405.2216033935547 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ], Δⵠ[ⲆⲆᐃ], 12 * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(0, -ⵠᐃⲆᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(207.01138305664062 * Ⲇ, 406.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(197.51138305664062 * Ⲇ, 440.7216033935547 * Ⲇ, 197.51138305664062 * Ⲇ, 440.7216033935547 * Ⲇ, Ⲇ * 188.01138305664062, Ⲇ * 475.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 184.01138305664062, 485.2216033935547 * Ⲇ, Ⲇ * 179.01138305664062, Ⲇ * 491.2216033935547, Ⲇ * 152.01138305664062, 477.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(136.51138305664062 * Ⲇ, 469.7216033935547 * Ⲇ, Ⲇ * 136.51138305664062, Ⲇ * 469.7216033935547, 121.01138305664062 * Ⲇ, Ⲇ * 462.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 109.01138305664062, Ⲇ * 453.2216033935547, 117.01138305664062 * Ⲇ, 447.2216033935547 * Ⲇ, 133.01138305664062 * Ⲇ, 427.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(146.51138305664062 * Ⲇ, 406.7216033935547 * Ⲇ, 146.51138305664062 * Ⲇ, 406.7216033935547 * Ⲇ, 160.01138305664062 * Ⲇ, Ⲇ * 386.2216033935547);
		Δ.bezierCurveTo(163.01138305664062 * Ⲇ, 377.2216033935547 * Ⲇ, Ⲇ * 168.01138305664062, 378.2216033935547 * Ⲇ, 187.01138305664062 * Ⲇ, 387.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(206.01138305664062 * Ⲇ, Ⲇ * 395.2216033935547, 208.01138305664062 * Ⲇ, 398.2216033935547 * Ⲇ, Ⲇ * 207.01138305664062, 405.2216033935547 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠΔ], Δⵠ[ⵠⲆΔᐃ], Ⲇ * ᐃⵠᐃⲆⵠ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ⲆᐃΔⵠ, Ⲇ * Δᐃᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 130.01138305664062, Ⲇ * 375.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 109.51138305664062, 400.7216033935547 * Ⲇ, 109.51138305664062 * Ⲇ, Ⲇ * 400.7216033935547, Ⲇ * 89.01138305664062, Ⲇ * 426.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 82.01138305664062, Ⲇ * 435.2216033935547, 77.01138305664062 * Ⲇ, Ⲇ * 435.2216033935547, Ⲇ * 62.011383056640625, 417.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(43.011383056640625 * Ⲇ, Ⲇ * 397.2216033935547, 47.011383056640625 * Ⲇ, Ⲇ * 395.2216033935547, Ⲇ * 62.011383056640625, 382.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 84.01138305664062, 366.7216033935547 * Ⲇ, 84.01138305664062 * Ⲇ, 366.7216033935547 * Ⲇ, 106.01138305664062 * Ⲇ, 351.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 116.01138305664062, 344.2216033935547 * Ⲇ, 120.01138305664062 * Ⲇ, Ⲇ * 347.2216033935547, 127.01138305664062 * Ⲇ, 356.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 137.01138305664062, 366.2216033935547 * Ⲇ, Ⲇ * 137.01138305664062, Ⲇ * 366.2216033935547, 131.01138305664062 * Ⲇ, 376.2216033935547 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ], Δⵠ[ᐃⲆᐃ], Ⲇ * Ⲇⵠᐃᐃᐃ);
		Δ.globalAlpha = Δⵠᐃ;
		Δ.translate(ⵠᐃⵠ, Ⲇ * -ⲆⵠⲆΔᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 130.01138305664062, Ⲇ * 375.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 109.51138305664062, Ⲇ * 400.7216033935547, 109.51138305664062 * Ⲇ, 400.7216033935547 * Ⲇ, Ⲇ * 89.01138305664062, 426.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(82.01138305664062 * Ⲇ, Ⲇ * 435.2216033935547, 77.01138305664062 * Ⲇ, Ⲇ * 435.2216033935547, Ⲇ * 62.011383056640625, Ⲇ * 417.2216033935547);
		Δ.bezierCurveTo(43.011383056640625 * Ⲇ, Ⲇ * 397.2216033935547, 47.011383056640625 * Ⲇ, 395.2216033935547 * Ⲇ, 62.011383056640625 * Ⲇ, Ⲇ * 382.2216033935547);
		Δ.bezierCurveTo(84.01138305664062 * Ⲇ, Ⲇ * 366.7216033935547, Ⲇ * 84.01138305664062, Ⲇ * 366.7216033935547, 106.01138305664062 * Ⲇ, 351.2216033935547 * Ⲇ);
		Δ.bezierCurveTo(116.01138305664062 * Ⲇ, 344.2216033935547 * Ⲇ, Ⲇ * 120.01138305664062, 347.2216033935547 * Ⲇ, Ⲇ * 127.01138305664062, Ⲇ * 356.2216033935547);
		Δ.bezierCurveTo(Ⲇ * 137.01138305664062, Ⲇ * 366.2216033935547, 137.01138305664062 * Ⲇ, 366.2216033935547 * Ⲇ, 131.01138305664062 * Ⲇ, Ⲇ * 376.2216033935547);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⲆᐃⵠ], Δⵠ[ΔⲆⵠΔ], Ⲇ * 12);
		return ᐃⵠ
	}

	function ⵠⵠⵠⵠⲆΔⵠⲆΔ(Ⲇⵠᐃⵠ, ⲆᐃΔⵠⵠⲆⵠᐃΔ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇⵠᐃⵠ.w + Ⲇⵠᐃⵠ.ⲆΔⵠΔⵠ;
		var ΔⵠⲆ = Ⲇⵠᐃⵠ.ΔⵠⲆ + Ⲇⵠᐃⵠ.ⲆΔⵠΔⵠ;
		var ᐃΔⵠᐃ = ΔⵠⲆ * .1;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ + ᐃΔⵠᐃ;
		Δ.beginPath();
		Δ.translate(ᐃΔΔ / 2, ΔⵠⲆ / 2 + ᐃΔⵠᐃ);
		Δ.globalAlpha = .5;
		ᐃΔⵠ(Δ, -Ⲇⵠᐃⵠ.w / ᐃᐃⵠⵠ, -Ⲇⵠᐃⵠ.ΔⵠⲆ / 2, Ⲇⵠᐃⵠ.w, Ⲇⵠᐃⵠ.ΔⵠⲆ, Ⲇⵠᐃⵠ.r);
		ⵠᐃ(Δ, ᐃ[76], ᐃ[76], Ⲇⵠᐃⵠ.ⲆΔⵠΔⵠ);
		Δ.globalAlpha = ⵠⵠⵠⲆ;
		Δ.beginPath();
		!ⲆᐃΔⵠⵠⲆⵠᐃΔ && Δ.translate(0, -ᐃΔⵠᐃ);
		ᐃΔⵠ(Δ, -Ⲇⵠᐃⵠ.w / ⵠΔΔΔ, -Ⲇⵠᐃⵠ.ΔⵠⲆ / ⵠᐃᐃⲆ, Ⲇⵠᐃⵠ.w, Ⲇⵠᐃⵠ.ΔⵠⲆ, Ⲇⵠᐃⵠ.r);
		ⵠᐃ(Δ, Ⲇⵠᐃⵠ.ᐃΔⲆΔⵠⲆΔ, Ⲇⵠᐃⵠ.ⲆⵠⲆⵠᐃᐃⲆΔᐃ, Ⲇⵠᐃⵠ.ⲆΔⵠΔⵠ);
		Δ.beginPath();
		Δ.fillStyle = Ⲇⵠᐃⵠ.color;
		Δ.textBaseline = ᐃ[409], Δ.textAlign = "center", Δ.font = Ⲇⵠᐃⵠ.size + "px " + Ⲇⵠᐃⵠ.font;
		Δ.fillText(Ⲇⵠᐃⵠ.text, ⵠⵠᐃ, ᐃⲆΔᐃ);
		return ᐃⵠ
	}

	function ᐃᐃⲆᐃᐃΔⲆᐃᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 158;
		ᐃⵠ.height = 201 * Ⲇ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 96.5, 76.421875 * Ⲇ);
		Δ.bezierCurveTo(100.5 * Ⲇ, Ⲇ * 64.421875, 103.5 * Ⲇ, Ⲇ * 62.421875, Ⲇ * 110.5, Ⲇ * 65.421875);
		Δ.bezierCurveTo(Ⲇ * 116.5, Ⲇ * 66.421875, 117.5 * Ⲇ, Ⲇ * 67.421875, 112.5 * Ⲇ, Ⲇ * 73.421875);
		Δ.bezierCurveTo(Ⲇ * 107, 79.921875 * Ⲇ, 107 * Ⲇ, Ⲇ * 79.921875, 101.5 * Ⲇ, 86.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], ΔΔⵠⲆⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 61.5, Ⲇ * 78.421875);
		Δ.bezierCurveTo(Ⲇ * 57.5, 73.421875 * Ⲇ, Ⲇ * 51.5, Ⲇ * 66.421875, Ⲇ * 45.5, 68.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 32.5, 73.421875 * Ⲇ, 38.5 * Ⲇ, Ⲇ * 75.421875, Ⲇ * 46.5, Ⲇ * 81.421875);
		Δ.bezierCurveTo(51.5 * Ⲇ, 84.921875 * Ⲇ, 51.5 * Ⲇ, Ⲇ * 84.921875, 56.5 * Ⲇ, 88.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ], Δⵠ[0], ⵠⵠⵠΔΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 116.5, 127.421875 * Ⲇ);
		Δ.bezierCurveTo(124.5 * Ⲇ, Ⲇ * 108.421875, Ⲇ * 129.5, Ⲇ * 104.421875, Ⲇ * 141.5, Ⲇ * 107.421875);
		Δ.bezierCurveTo(156.5 * Ⲇ, 112.421875 * Ⲇ, Ⲇ * 153.5, 113.421875 * Ⲇ, Ⲇ * 132.5, Ⲇ * 134.421875);
		Δ.bezierCurveTo(Ⲇ * 123.5, Ⲇ * 141.921875, 123.5 * Ⲇ, Ⲇ * 141.921875, Ⲇ * 114.5, 149.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠΔΔⲆ], Ⲇ * ⲆΔⲆᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 41.5, 134.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 30.5, Ⲇ * 119.421875, Ⲇ * 25.5, Ⲇ * 111.421875, Ⲇ * 12.5, 115.421875 * Ⲇ);
		Δ.bezierCurveTo(4.5 * Ⲇ, Ⲇ * 120.421875, Ⲇ * 4.5, Ⲇ * 121.421875, Ⲇ * 26.5, Ⲇ * 142.421875);
		Δ.bezierCurveTo(Ⲇ * 35, 149.921875 * Ⲇ, 35 * Ⲇ, Ⲇ * 149.921875, Ⲇ * 43.5, Ⲇ * 157.421875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆΔ], Δⵠ[0], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(78.5 * Ⲇ, Ⲇ * 51.921875);
		Δ.bezierCurveTo(Ⲇ * 99.5, 75.921875 * Ⲇ, Ⲇ * 110.5, 96.921875 * Ⲇ, Ⲇ * 118.5, 120.921875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 121.5, 140.921875 * Ⲇ, Ⲇ * 107.5, 179.921875 * Ⲇ, 75.5 * Ⲇ, Ⲇ * 183.921875);
		Δ.bezierCurveTo(Ⲇ * 30.5, 169.921875 * Ⲇ, Ⲇ * 37.5, Ⲇ * 131.921875, Ⲇ * 34.5, Ⲇ * 120.921875);
		Δ.bezierCurveTo(41.5 * Ⲇ, 89.921875 * Ⲇ, 61.5 * Ⲇ, Ⲇ * 67.921875, 78.5 * Ⲇ, Ⲇ * 51.921875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ], Δⵠ[0], ⵠΔⵠᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(72.5 * Ⲇ, 72.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 76.5, Ⲇ * 79.421875, 79.5 * Ⲇ, 80.421875 * Ⲇ, Ⲇ * 83.5, Ⲇ * 73.421875);
		Δ.bezierCurveTo(Ⲇ * 80.5, Ⲇ * 96.921875, 79.5 * Ⲇ, Ⲇ * 114.421875, Ⲇ * 77.5, Ⲇ * 120.421875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠΔⵠᐃ], ⵠᐃⲆⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 42.5, 163.421875 * Ⲇ);
		Δ.bezierCurveTo(62.5 * Ⲇ, 185.421875 * Ⲇ, Ⲇ * 86.5, 186.421875 * Ⲇ, Ⲇ * 111.5, Ⲇ * 165.421875);
		Δ.bezierCurveTo(Ⲇ * 107.5, 176.421875 * Ⲇ, Ⲇ * 95.5, 187.421875 * Ⲇ, Ⲇ * 75.5, Ⲇ * 188.421875);
		Δ.bezierCurveTo(53.5 * Ⲇ, 188.421875 * Ⲇ, 43.5 * Ⲇ, Ⲇ * 171.421875, Ⲇ * 42.5, 164.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ], Δⵠ[0], ᐃᐃⵠΔⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 79.5, 61.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 88.5, 31.421875 * Ⲇ, 81.5 * Ⲇ, 16.421875 * Ⲇ, Ⲇ * 75.5, 7.421875 * Ⲇ);
		Δ.bezierCurveTo(77.5 * Ⲇ, 28.421875 * Ⲇ, Ⲇ * 77.5, 37.421875 * Ⲇ, 68.5 * Ⲇ, Ⲇ * 42.421875);
		Δ.bezierCurveTo(79.5 * Ⲇ, 57.421875 * Ⲇ, 79.5 * Ⲇ, 58.421875 * Ⲇ, Ⲇ * 80.5, 61.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 72.5, Ⲇ * 72.421875);
		Δ.bezierCurveTo(76.5 * Ⲇ, 79.421875 * Ⲇ, Ⲇ * 79.5, Ⲇ * 80.421875, 83.5 * Ⲇ, 73.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 80.5, 96.921875 * Ⲇ, 79.5 * Ⲇ, 114.421875 * Ⲇ, Ⲇ * 77.5, Ⲇ * 120.421875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃ], Δⵠ[0], Ⲇ * 10);
		return ᐃⵠ
	}

	function ᐃⲆᐃⲆⵠⵠⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 142;
		ᐃⵠ.height = Ⲇ * 118;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(111 * Ⲇ, 27.3671875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 128, Ⲇ * 9.3671875, 125 * Ⲇ, Ⲇ * 13.3671875, Ⲇ * 126, 21.3671875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 126, 33.3671875 * Ⲇ, 119 * Ⲇ, Ⲇ * 43.3671875, Ⲇ * 118, 42.3671875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔᐃⲆᐃⵠ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(31 * Ⲇ, Ⲇ * 23.3671875);
		Δ.bezierCurveTo(Ⲇ * ΔⲆⵠⵠⲆⵠⲆ, 15.3671875 * Ⲇ, ⵠᐃᐃⵠⵠ * Ⲇ, Ⲇ * 14.3671875, ᐃⲆᐃⵠⲆΔΔ * Ⲇ, 20.3671875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 22, Ⲇ * 33.3671875, Ⲇ * 20, Ⲇ * 27.3671875, 24 * Ⲇ, 34.3671875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ], Δⵠ[4], Ⲇ * 4);
		Δ.save();
		Δ.translate(Ⲇ * 70.5, Ⲇ * 34.8671875);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, -49.5 * Ⲇ, Ⲇ * -21.5, Ⲇ * 99, Ⲇ * 43, 15 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ], Δⵠ[1], Ⲇ * ΔΔΔⵠ);
		Δ.save();
		Δ.translate(71 * Ⲇ, Ⲇ * 40.8671875);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, -49 * Ⲇ, Ⲇ * -12.5, 98 * Ⲇ, 25 * Ⲇ, Ⲇ * 15);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[1], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 19.800003051757812, 75.95625305175781 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 19.300003051757812, Ⲇ * 82.95625305175781, Ⲇ * 19.300003051757812, 82.95625305175781 * Ⲇ, 18.800003051757812 * Ⲇ, Ⲇ * 89.95625305175781);
		Δ.bezierCurveTo(Ⲇ * 38.80000305175781, Ⲇ * 115.95625305175781, 37.80000305175781 * Ⲇ, Ⲇ * 104.95625305175781, Ⲇ * 31.800003051757812, 91.95625305175781 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔΔ], Δⵠ[ᐃⲆⲆ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(119.80000305175781 * Ⲇ, 75.95625305175781 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 120.80000305175781, Ⲇ * 82.95625305175781, Ⲇ * 120.80000305175781, Ⲇ * 82.95625305175781, Ⲇ * 121.80000305175781, 89.95625305175781 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 101.80000305175781, Ⲇ * 111.95625305175781, 99.80000305175781 * Ⲇ, Ⲇ * 111.95625305175781, 112.80000305175781 * Ⲇ, Ⲇ * 81.95625305175781);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⲆ], Δⵠ[Δⵠᐃ], Ⲇ * ΔΔᐃⵠΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 17.800003051757812, Ⲇ * 49.15625);
		Δ.bezierCurveTo(Ⲇ * 17.800003051757812, 64.15625 * Ⲇ, Ⲇ * 17.800003051757812, Ⲇ * 64.15625, Ⲇ * 17.800003051757812, Ⲇ * 79.15625);
		Δ.bezierCurveTo(23.300003051757812 * Ⲇ, Ⲇ * 85.15625, Ⲇ * 23.300003051757812, Ⲇ * 85.15625, 28.800003051757812 * Ⲇ, Ⲇ * 91.15625);
		Δ.bezierCurveTo(36.80000305175781 * Ⲇ, Ⲇ * 96.15625, 32.80000305175781 * Ⲇ, Ⲇ * 91.15625, Ⲇ * 28.800003051757812, 77.15625 * Ⲇ);
		Δ.bezierCurveTo(33.80000305175781 * Ⲇ, Ⲇ * 65.15625, 33.80000305175781 * Ⲇ, 65.15625 * Ⲇ, Ⲇ * 38.80000305175781, 53.15625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], ΔⵠⲆⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 123.80000305175781, 53.95625305175781 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 121.80000305175781, Ⲇ * 77.95625305175781, 121.80000305175781 * Ⲇ, 74.95625305175781 * Ⲇ, 121.80000305175781 * Ⲇ, 78.95625305175781 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 115.80000305175781, Ⲇ * 84.95625305175781, 115.80000305175781 * Ⲇ, 84.95625305175781 * Ⲇ, 109.80000305175781 * Ⲇ, Ⲇ * 90.95625305175781);
		Δ.bezierCurveTo(Ⲇ * 102.80000305175781, Ⲇ * 93.95625305175781, Ⲇ * 105.80000305175781, 86.95625305175781 * Ⲇ, 110.80000305175781 * Ⲇ, Ⲇ * 76.95625305175781);
		Δ.bezierCurveTo(107.30000305175781 * Ⲇ, Ⲇ * 65.45625305175781, Ⲇ * 103.80000305175781, Ⲇ * 53.95625305175781, Ⲇ * 103.80000305175781, Ⲇ * 53.95625305175781);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆⲆⲆΔ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ⲆᐃⲆᐃⵠᐃᐃ * Ⲇ, 56.3671875 * Ⲇ);
		Δ.bezierCurveTo(70 * Ⲇ, 56.8671875 * Ⲇ, Ⲇ * 70, Ⲇ * 56.8671875, Ⲇ * 122, 57.3671875 * Ⲇ);
		Δ.bezierCurveTo(137 * Ⲇ, Ⲇ * 20.3671875, Ⲇ * 137, Ⲇ * 16.3671875, 126 * Ⲇ, 22.3671875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 115.5, 34.3671875 * Ⲇ, Ⲇ * 115.5, Ⲇ * 34.3671875, 105 * Ⲇ, Ⲇ * 46.3671875);
		Δ.bezierCurveTo(Ⲇ * 70.5, 46.3671875 * Ⲇ, Ⲇ * 70.5, 46.3671875 * Ⲇ, 36 * Ⲇ, Ⲇ * 46.3671875);
		Δ.bezierCurveTo(4 * Ⲇ, 14.3671875 * Ⲇ, 7 * Ⲇ, Ⲇ * 18.3671875, Ⲇ * 8, Ⲇ * 27.3671875);
		Δ.bezierCurveTo(Ⲇ * 12.5, 41.8671875 * Ⲇ, 12.5 * Ⲇ, Ⲇ * 41.8671875, 17 * Ⲇ, Ⲇ * 56.3671875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃΔ], Δⵠ[ᐃᐃⵠΔ], ᐃᐃΔⵠⲆ * Ⲇ);
		Δ.save();
		Δ.translate(68.30000305175781 * Ⲇ, 41.45625305175781 * Ⲇ);
		Δ.rotate(.76);
		ᐃΔⵠ(Δ, Ⲇ * -20.5, Ⲇ * -20.5, Ⲇ * 41, 41 * Ⲇ, 10 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, undefined, Δⵠ[5], 4 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 68.80000305175781, 44.45625305175781 * Ⲇ);
		Δ.rotate(.76);
		ᐃΔⵠ(Δ, Ⲇ * -21, -20.5 * Ⲇ, Ⲇ * 42, Ⲇ * 41, Ⲇ * ΔⵠΔᐃΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠⵠ], Δⵠ[ΔⲆⵠΔⲆ], ΔⲆⵠΔⲆ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 69.80000305175781, 44.556243896484375 * Ⲇ);
		Δ.rotate(.76);
		ᐃΔⵠ(Δ, Ⲇ * -ᐃᐃⵠΔⵠ, Ⲇ * -ΔⵠᐃⲆΔ, ⲆⵠΔⵠⵠ * Ⲇ, 20 * Ⲇ, ⲆⵠⲆᐃ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[ⲆⵠⵠΔᐃ], Ⲇ * ᐃⵠⵠⲆ);
		return ᐃⵠ
	}

	function ⲆⵠⲆⵠΔⵠⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 161 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 190;
		Δ.globalAlpha = .5;
		Δ.translate(0, 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ᐃΔⵠⲆⲆ, 93 * Ⲇ);
		Δ.bezierCurveTo(17 * Ⲇ, Ⲇ * 95, Ⲇ * ΔⲆⲆⵠⲆΔΔ, Ⲇ * 95, Ⲇ * 21, 95 * Ⲇ);
		Δ.bezierCurveTo(9 * Ⲇ, Ⲇ * 83, 17 * Ⲇ, 93 * Ⲇ, 4 * Ⲇ, Ⲇ * 76);
		Δ.bezierCurveTo(Ⲇ * ΔⲆⲆᐃΔᐃΔ, 75 * Ⲇ, Ⲇ * ⲆⲆᐃᐃⲆⵠⲆ, 75 * Ⲇ, Ⲇ * 18, Ⲇ * 75);
		Δ.bezierCurveTo(Ⲇ * ᐃⲆΔΔⲆΔΔ, Ⲇ * 67, Ⲇ * ⵠⵠᐃΔΔ, 67 * Ⲇ, Ⲇ * ᐃⵠΔⲆⵠⵠᐃ, Ⲇ * 59);
		Δ.bezierCurveTo(Ⲇ * 14, 59 * Ⲇ, Ⲇ * 14, Ⲇ * 59, Ⲇ * 21, Ⲇ * 59);
		Δ.bezierCurveTo(46 * Ⲇ, 35 * Ⲇ, Ⲇ * 35, Ⲇ * 45, Ⲇ * 49, 31 * Ⲇ);
		Δ.bezierCurveTo(53 * Ⲇ, 24 * Ⲇ, 51 * Ⲇ, Ⲇ * 21, 51 * Ⲇ, Ⲇ * ᐃⲆⲆΔᐃⵠΔ);
		Δ.bezierCurveTo(63 * Ⲇ, 23 * Ⲇ, 63 * Ⲇ, Ⲇ * 24, Ⲇ * 69, Ⲇ * 29);
		Δ.bezierCurveTo(76 * Ⲇ, ⵠⵠᐃⵠᐃ * Ⲇ, Ⲇ * 75, Ⲇ * 11, 76 * Ⲇ, Ⲇ * 6);
		Δ.bezierCurveTo(Ⲇ * 81, Ⲇ * ⵠⵠΔⵠΔⲆᐃ, Ⲇ * 84, ᐃⵠⲆⲆΔ * Ⲇ, 89 * Ⲇ, Ⲇ * 27);
		Δ.bezierCurveTo(95 * Ⲇ, 25 * Ⲇ, 100 * Ⲇ, 16 * Ⲇ, 105 * Ⲇ, Ⲇ * ⵠⵠⲆᐃⲆᐃᐃ);
		Δ.bezierCurveTo(Ⲇ * 103, 25 * Ⲇ, Ⲇ * 111, 33 * Ⲇ, 110 * Ⲇ, Ⲇ * 34);
		Δ.bezierCurveTo(123 * Ⲇ, 48 * Ⲇ, Ⲇ * 123, Ⲇ * 48, Ⲇ * 136, Ⲇ * 62);
		Δ.bezierCurveTo(Ⲇ * 142, 60 * Ⲇ, Ⲇ * 147, Ⲇ * 59, 155 * Ⲇ, Ⲇ * 58);
		Δ.bezierCurveTo(147 * Ⲇ, 65 * Ⲇ, 147 * Ⲇ, Ⲇ * 65, 139 * Ⲇ, Ⲇ * 73);
		Δ.bezierCurveTo(Ⲇ * 145, 73 * Ⲇ, Ⲇ * 145, 73 * Ⲇ, 151 * Ⲇ, 73 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 145, Ⲇ * 80, Ⲇ * 145, Ⲇ * 80, Ⲇ * 138, 87 * Ⲇ);
		Δ.bezierCurveTo(144 * Ⲇ, 88 * Ⲇ, 144 * Ⲇ, 88 * Ⲇ, Ⲇ * 150, Ⲇ * 89);
		Δ.bezierCurveTo(125 * Ⲇ, Ⲇ * 103, Ⲇ * 125, Ⲇ * 125, Ⲇ * 113, Ⲇ * 141);
		Δ.bezierCurveTo(92 * Ⲇ, 178 * Ⲇ, 85 * Ⲇ, Ⲇ * 177, 76 * Ⲇ, Ⲇ * 178);
		Δ.bezierCurveTo(64 * Ⲇ, 179 * Ⲇ, 51 * Ⲇ, 164 * Ⲇ, Ⲇ * 35, Ⲇ * 131);
		Δ.bezierCurveTo(ⲆᐃⲆᐃⵠᐃᐃ * Ⲇ, Ⲇ * 95, ⲆⵠᐃᐃⲆᐃⵠ * Ⲇ, Ⲇ * 99, ⲆⲆᐃⲆⵠ * Ⲇ, 93 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		Δ.globalAlpha = 1;
		Δ.translate(0, -ⲆⵠΔᐃⵠⵠΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(9 * Ⲇ, Ⲇ * 93);
		Δ.bezierCurveTo(17 * Ⲇ, Ⲇ * 95, ΔᐃᐃΔΔ * Ⲇ, Ⲇ * 95, Ⲇ * 21, 95 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ᐃⵠⲆᐃᐃⲆΔ, 83 * Ⲇ, Ⲇ * ⵠΔⵠⵠⵠ, 93 * Ⲇ, Ⲇ * ⵠⵠⵠᐃⲆ, Ⲇ * 76);
		Δ.bezierCurveTo(Ⲇ * 11, 75 * Ⲇ, Ⲇ * ⲆΔⵠⲆᐃΔᐃ, 75 * Ⲇ, Ⲇ * ⵠⲆΔⵠᐃᐃⲆ, 75 * Ⲇ);
		Δ.bezierCurveTo(13 * Ⲇ, Ⲇ * 67, Ⲇ * ⲆᐃⲆⲆᐃⲆΔ, Ⲇ * 67, ⲆΔᐃᐃⲆ * Ⲇ, Ⲇ * 59);
		Δ.bezierCurveTo(ⲆⲆᐃΔⵠᐃⲆ * Ⲇ, 59 * Ⲇ, Δⵠⵠᐃᐃ * Ⲇ, 59 * Ⲇ, 21 * Ⲇ, Ⲇ * 59);
		Δ.bezierCurveTo(46 * Ⲇ, 35 * Ⲇ, 35 * Ⲇ, Ⲇ * 45, 49 * Ⲇ, 31 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 53, Ⲇ * 24, Ⲇ * 51, 21 * Ⲇ, Ⲇ * 51, Ⲇ * 16);
		Δ.bezierCurveTo(63 * Ⲇ, Ⲇ * 23, Ⲇ * 63, 24 * Ⲇ, 69 * Ⲇ, 29 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 76, ΔΔⵠⲆᐃ * Ⲇ, 75 * Ⲇ, 11 * Ⲇ, Ⲇ * 76, Ⲇ * ᐃⲆΔⵠΔ);
		Δ.bezierCurveTo(81 * Ⲇ, Ⲇ * 12, Ⲇ * 84, Ⲇ * ΔΔⵠΔᐃᐃᐃ, Ⲇ * 89, Ⲇ * 27);
		Δ.bezierCurveTo(Ⲇ * 95, 25 * Ⲇ, 100 * Ⲇ, 16 * Ⲇ, 105 * Ⲇ, Δⵠⵠᐃᐃ * Ⲇ);
		Δ.bezierCurveTo(103 * Ⲇ, Ⲇ * 25, Ⲇ * 111, 33 * Ⲇ, 110 * Ⲇ, Ⲇ * 34);
		Δ.bezierCurveTo(123 * Ⲇ, 48 * Ⲇ, 123 * Ⲇ, Ⲇ * 48, 136 * Ⲇ, 62 * Ⲇ);
		Δ.bezierCurveTo(142 * Ⲇ, 60 * Ⲇ, 147 * Ⲇ, 59 * Ⲇ, Ⲇ * 155, 58 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 147, 65 * Ⲇ, 147 * Ⲇ, Ⲇ * 65, Ⲇ * 139, Ⲇ * 73);
		Δ.bezierCurveTo(Ⲇ * 145, Ⲇ * 73, Ⲇ * 145, 73 * Ⲇ, 151 * Ⲇ, Ⲇ * 73);
		Δ.bezierCurveTo(Ⲇ * 145, Ⲇ * 80, 145 * Ⲇ, Ⲇ * 80, Ⲇ * 138, Ⲇ * 87);
		Δ.bezierCurveTo(Ⲇ * 144, Ⲇ * 88, 144 * Ⲇ, Ⲇ * 88, 150 * Ⲇ, 89 * Ⲇ);
		Δ.bezierCurveTo(125 * Ⲇ, Ⲇ * 103, Ⲇ * 125, 125 * Ⲇ, Ⲇ * 113, Ⲇ * 141);
		Δ.bezierCurveTo(92 * Ⲇ, 178 * Ⲇ, Ⲇ * 85, 177 * Ⲇ, Ⲇ * 76, Ⲇ * 178);
		Δ.bezierCurveTo(64 * Ⲇ, Ⲇ * 179, Ⲇ * 51, 164 * Ⲇ, Ⲇ * 35, Ⲇ * 131);
		Δ.bezierCurveTo(18 * Ⲇ, 95 * Ⲇ, Ⲇ * 13, Ⲇ * 99, Ⲇ * 8, Ⲇ * 93);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 28, Ⲇ * 63);
		Δ.bezierCurveTo(Ⲇ * 23, Ⲇ * 54, Ⲇ * 24, Ⲇ * 47, Ⲇ * 26, Ⲇ * 37);
		Δ.bezierCurveTo(28 * Ⲇ, Ⲇ * 29, 31 * Ⲇ, 31 * Ⲇ, Ⲇ * 41, 35 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 52, 45 * Ⲇ, Ⲇ * 55, Ⲇ * 51, 57 * Ⲇ, Ⲇ * 53);
		Δ.bezierCurveTo(Ⲇ * 50, Ⲇ * 50, 44 * Ⲇ, Ⲇ * 47, Ⲇ * 43, Ⲇ * 48);
		Δ.bezierCurveTo(Ⲇ * 43, 52 * Ⲇ, Ⲇ * 43, Ⲇ * 52, 42 * Ⲇ, 57 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 38, Ⲇ * 54, Ⲇ * 38, Ⲇ * 54, 33 * Ⲇ, Ⲇ * 51);
		Δ.bezierCurveTo(Ⲇ * 34, Ⲇ * 56, 34 * Ⲇ, 56 * Ⲇ, 34 * Ⲇ, 61 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(99 * Ⲇ, 55 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 107, Ⲇ * 43, 113 * Ⲇ, Ⲇ * 39, Ⲇ * 121, Ⲇ * 34);
		Δ.bezierCurveTo(130 * Ⲇ, Ⲇ * 29, 130 * Ⲇ, 34 * Ⲇ, 130 * Ⲇ, Ⲇ * 42);
		Δ.bezierCurveTo(Ⲇ * 131, Ⲇ * 57, 128 * Ⲇ, Ⲇ * 61, 129 * Ⲇ, 63 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 124, 62 * Ⲇ, 124 * Ⲇ, 62 * Ⲇ, 119 * Ⲇ, 61 * Ⲇ);
		Δ.bezierCurveTo(119 * Ⲇ, Ⲇ * 56, 120 * Ⲇ, 61 * Ⲇ, 118 * Ⲇ, Ⲇ * 52);
		Δ.bezierCurveTo(Ⲇ * 115, 55 * Ⲇ, 111 * Ⲇ, Ⲇ * 59, 111 * Ⲇ, 58 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 110, Ⲇ * 54, Ⲇ * 109, Ⲇ * 57, 109 * Ⲇ, Ⲇ * 51);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		ⵠΔᐃ(Δ, 103 * Ⲇ, 110 * Ⲇ, Ⲇ * ⵠⵠⲆᐃⵠΔΔ);
		ⵠᐃ(Δ, Δⵠ[ΔⵠⲆⵠᐃ]);
		ⵠΔᐃ(Δ, Ⲇ * 55, Ⲇ * 111, Ⲇ * 11);
		ⵠᐃ(Δ, Δⵠ[4]);
		ⵠΔᐃ(Δ, Ⲇ * 99, 107 * Ⲇ, Ⲇ * ᐃⵠΔⵠ);
		ⵠᐃ(Δ, Δⵠ[1]);
		ⵠΔᐃ(Δ, Ⲇ * 51, 108 * Ⲇ, 5 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(31 * Ⲇ, 121 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 45, Ⲇ * 128, 51 * Ⲇ, Ⲇ * 133, 53 * Ⲇ, 141 * Ⲇ);
		Δ.bezierCurveTo(59 * Ⲇ, Ⲇ * 161, 70 * Ⲇ, 173 * Ⲇ, 80 * Ⲇ, Ⲇ * 169);
		Δ.bezierCurveTo(Ⲇ * 89, 172 * Ⲇ, Ⲇ * 99, 149 * Ⲇ, 107 * Ⲇ, Ⲇ * 133);
		Δ.bezierCurveTo(114 * Ⲇ, Ⲇ * 122, 119 * Ⲇ, 123 * Ⲇ, 124 * Ⲇ, Ⲇ * 119);
		Δ.bezierCurveTo(109 * Ⲇ, 148 * Ⲇ, Ⲇ * 117, Ⲇ * 133, 109 * Ⲇ, 147 * Ⲇ);
		Δ.bezierCurveTo(87 * Ⲇ, Ⲇ * 180, 84 * Ⲇ, 179 * Ⲇ, Ⲇ * 76, Ⲇ * 178);
		Δ.bezierCurveTo(49 * Ⲇ, Ⲇ * 173, Ⲇ * 44, Ⲇ * 149, Ⲇ * 31, 121 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.translate(-2, 0);
		Δ.moveTo(Ⲇ * 71, 162 * Ⲇ);
		Δ.bezierCurveTo(80 * Ⲇ, 155 * Ⲇ, Ⲇ * 85, 159 * Ⲇ, 89 * Ⲇ, Ⲇ * 164);
		Δ.bezierCurveTo(Ⲇ * 90, Ⲇ * 171, Ⲇ * 86, Ⲇ * 173, Ⲇ * 79, 173 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 67, 172 * Ⲇ, Ⲇ * 67, Ⲇ * 168, 71 * Ⲇ, 162 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔΔ]);
		Δ.translate(ΔΔⵠⲆ, 0);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 9, Ⲇ * 93);
		Δ.bezierCurveTo(Ⲇ * ΔᐃΔⵠΔᐃⲆ, 95 * Ⲇ, 19 * Ⲇ, Ⲇ * 95, 21 * Ⲇ, 95 * Ⲇ);
		Δ.bezierCurveTo(9 * Ⲇ, Ⲇ * 83, Ⲇ * 17, 93 * Ⲇ, Ⲇ * 4, Ⲇ * 76);
		Δ.bezierCurveTo(Ⲇ * 11, Ⲇ * 75, ᐃⵠᐃΔⲆⵠⲆ * Ⲇ, 75 * Ⲇ, Ⲇ * 18, Ⲇ * 75);
		Δ.bezierCurveTo(13 * Ⲇ, 67 * Ⲇ, Ⲇ * 13, Ⲇ * 67, Ⲇ * ⲆᐃᐃΔΔ, 59 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 14, 59 * Ⲇ, ⵠⵠⲆⵠⵠ * Ⲇ, 59 * Ⲇ, Ⲇ * 21, Ⲇ * 59);
		Δ.bezierCurveTo(Ⲇ * 46, Ⲇ * 35, Ⲇ * 35, 45 * Ⲇ, 49 * Ⲇ, 31 * Ⲇ);
		Δ.bezierCurveTo(53 * Ⲇ, Ⲇ * 24, Ⲇ * 51, Ⲇ * 21, 51 * Ⲇ, ⲆⲆΔᐃᐃ * Ⲇ);
		Δ.bezierCurveTo(63 * Ⲇ, Ⲇ * 23, 63 * Ⲇ, 24 * Ⲇ, 69 * Ⲇ, 29 * Ⲇ);
		Δ.bezierCurveTo(76 * Ⲇ, ⲆⵠⵠΔⲆⵠⲆ * Ⲇ, 75 * Ⲇ, Ⲇ * ΔΔⵠⵠΔᐃⲆ, 76 * Ⲇ, 6 * Ⲇ);
		Δ.bezierCurveTo(81 * Ⲇ, Ⲇ * 12, Ⲇ * 84, Ⲇ * ᐃᐃΔΔⵠᐃᐃ, Ⲇ * 89, 27 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 95, Ⲇ * 25, ΔⵠⲆⵠⲆ * Ⲇ, Ⲇ * ⲆⲆᐃΔⵠ, Ⲇ * 105, ⵠⵠⲆⵠⵠ * Ⲇ);
		Δ.bezierCurveTo(103 * Ⲇ, 25 * Ⲇ, 111 * Ⲇ, 33 * Ⲇ, 110 * Ⲇ, Ⲇ * 34);
		Δ.bezierCurveTo(Ⲇ * 123, Ⲇ * 48, Ⲇ * 123, Ⲇ * 48, Ⲇ * 136, 62 * Ⲇ);
		Δ.bezierCurveTo(142 * Ⲇ, 60 * Ⲇ, 147 * Ⲇ, Ⲇ * 59, Ⲇ * 155, Ⲇ * 58);
		Δ.bezierCurveTo(Ⲇ * 147, 65 * Ⲇ, Ⲇ * 147, Ⲇ * 65, 139 * Ⲇ, Ⲇ * 73);
		Δ.bezierCurveTo(Ⲇ * 145, Ⲇ * 73, Ⲇ * 145, Ⲇ * 73, 151 * Ⲇ, 73 * Ⲇ);
		Δ.bezierCurveTo(145 * Ⲇ, 80 * Ⲇ, Ⲇ * 145, Ⲇ * 80, Ⲇ * 138, Ⲇ * 87);
		Δ.bezierCurveTo(144 * Ⲇ, 88 * Ⲇ, Ⲇ * 144, 88 * Ⲇ, Ⲇ * 150, Ⲇ * 89);
		Δ.bezierCurveTo(Ⲇ * 125, Ⲇ * 103, Ⲇ * 125, Ⲇ * 125, 113 * Ⲇ, 141 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 92, Ⲇ * 178, Ⲇ * 85, 177 * Ⲇ, Ⲇ * 76, Ⲇ * 178);
		Δ.bezierCurveTo(Ⲇ * 64, 179 * Ⲇ, 51 * Ⲇ, 164 * Ⲇ, 35 * Ⲇ, 131 * Ⲇ);
		Δ.bezierCurveTo(ⵠⲆΔⵠᐃᐃⲆ * Ⲇ, 95 * Ⲇ, Ⲇ * ΔᐃᐃΔᐃᐃΔ, 99 * Ⲇ, Ⲇ * 8, Ⲇ * 93);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[ᐃⲆⵠᐃ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 25, Ⲇ * 63);
		Δ.bezierCurveTo(16 * Ⲇ, 58 * Ⲇ, ᐃΔᐃᐃᐃⲆΔ * Ⲇ, 51 * Ⲇ, 17 * Ⲇ, Ⲇ * 33);
		Δ.bezierCurveTo(Ⲇ * 19, Ⲇ * 12, 21 * Ⲇ, ⵠᐃⲆΔⵠ * Ⲇ, 32 * Ⲇ, Ⲇ * 17);
		Δ.bezierCurveTo(63 * Ⲇ, Ⲇ * 31, Ⲇ * 66, Ⲇ * 45, 66 * Ⲇ, 54 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠΔⵠⲆ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 91, Ⲇ * 53);
		Δ.bezierCurveTo(Ⲇ * 91, 40 * Ⲇ, Ⲇ * 98, Ⲇ * 33, Ⲇ * 121, 20 * Ⲇ);
		Δ.bezierCurveTo(137 * Ⲇ, Ⲇ * 12, Ⲇ * 137, 16 * Ⲇ, 139 * Ⲇ, 27 * Ⲇ);
		Δ.bezierCurveTo(141 * Ⲇ, Ⲇ * 49, 140 * Ⲇ, 57 * Ⲇ, 134 * Ⲇ, 64 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(31 * Ⲇ, 63 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 23, 54 * Ⲇ, Ⲇ * 24, 47 * Ⲇ, Ⲇ * 26, 37 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 28, Ⲇ * 29, Ⲇ * 31, 31 * Ⲇ, Ⲇ * 41, Ⲇ * 35);
		Δ.bezierCurveTo(Ⲇ * 52, Ⲇ * 45, Ⲇ * 55, 51 * Ⲇ, 57 * Ⲇ, 53 * Ⲇ);
		Δ.bezierCurveTo(50 * Ⲇ, Ⲇ * 50, Ⲇ * 44, 47 * Ⲇ, 43 * Ⲇ, Ⲇ * 48);
		Δ.bezierCurveTo(43 * Ⲇ, Ⲇ * 52, 43 * Ⲇ, Ⲇ * 52, 42 * Ⲇ, 57 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 38, 54 * Ⲇ, 38 * Ⲇ, Ⲇ * 54, 33 * Ⲇ, 51 * Ⲇ);
		Δ.bezierCurveTo(34 * Ⲇ, Ⲇ * 56, 34 * Ⲇ, Ⲇ * 56, Ⲇ * 34, Ⲇ * 61);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 99, Ⲇ * 55);
		Δ.bezierCurveTo(107 * Ⲇ, 43 * Ⲇ, 113 * Ⲇ, Ⲇ * 39, Ⲇ * 121, Ⲇ * 34);
		Δ.bezierCurveTo(130 * Ⲇ, 29 * Ⲇ, 130 * Ⲇ, Ⲇ * 34, Ⲇ * 130, Ⲇ * 42);
		Δ.bezierCurveTo(131 * Ⲇ, 57 * Ⲇ, Ⲇ * 128, Ⲇ * 61, 129 * Ⲇ, Ⲇ * 63);
		Δ.bezierCurveTo(Ⲇ * 124, Ⲇ * 62, 124 * Ⲇ, 62 * Ⲇ, Ⲇ * 119, 61 * Ⲇ);
		Δ.bezierCurveTo(119 * Ⲇ, 56 * Ⲇ, Ⲇ * 120, Ⲇ * 61, 118 * Ⲇ, Ⲇ * 52);
		Δ.bezierCurveTo(Ⲇ * 115, Ⲇ * 55, 111 * Ⲇ, 59 * Ⲇ, 111 * Ⲇ, Ⲇ * 58);
		Δ.bezierCurveTo(110 * Ⲇ, Ⲇ * 54, Ⲇ * 109, 57 * Ⲇ, Ⲇ * 109, Ⲇ * 51);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔᐃΔ]);
		return ᐃⵠ
	}

	function ᐃΔⲆⵠΔᐃᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 465 * Ⲇ;
		ᐃⵠ.height = 310 * Ⲇ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 126, 192 * Ⲇ);
		Δ.bezierCurveTo(198 * Ⲇ, Ⲇ * 202, Ⲇ * 245, Ⲇ * 203, Ⲇ * 335, 194 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 336, 232 * Ⲇ, 326 * Ⲇ, 235 * Ⲇ, 232 * Ⲇ, 237 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 161, Ⲇ * 235, 122 * Ⲇ, 235 * Ⲇ, 126 * Ⲇ, 193 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃΔⵠΔ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 146, Ⲇ * 239);
		Δ.bezierCurveTo(Ⲇ * 174, Ⲇ * 74, Ⲇ * 287, 88 * Ⲇ, Ⲇ * 320, 240 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 329, Ⲇ * 231, Ⲇ * 340, 219 * Ⲇ, 332 * Ⲇ, Ⲇ * 115);
		Δ.bezierCurveTo(330 * Ⲇ, 40 * Ⲇ, Ⲇ * 144, 30 * Ⲇ, Ⲇ * 129, Ⲇ * 116);
		Δ.bezierCurveTo(124 * Ⲇ, 217 * Ⲇ, Ⲇ * 124, 228 * Ⲇ, 143 * Ⲇ, Ⲇ * 237);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ], Δⵠ[ΔⲆⵠⲆ], Ⲇ * ΔΔⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(126 * Ⲇ, 193 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 173, Ⲇ * 94, 209 * Ⲇ, Ⲇ * ᐃΔⲆᐃⵠ, 228 * Ⲇ, Ⲇ * 57);
		Δ.bezierCurveTo(Ⲇ * 190, 112 * Ⲇ, Ⲇ * 165, Ⲇ * 115, Ⲇ * 127, Ⲇ * 184);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[1], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(230 * Ⲇ, 57 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 266, Ⲇ * 117, 310 * Ⲇ, Ⲇ * 130, 332 * Ⲇ, 183 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 290, 112 * Ⲇ, Ⲇ * 262, 109 * Ⲇ, 230 * Ⲇ, Ⲇ * 56);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠⵠᐃⲆᐃ, Δⵠ[1], Ⲇ * ⵠⲆᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(154 * Ⲇ, Ⲇ * 212);
		Δ.bezierCurveTo(Ⲇ * 208, 224 * Ⲇ, Ⲇ * 252, Ⲇ * 219, Ⲇ * 305, Ⲇ * 212);
		Δ.bezierCurveTo(267 * Ⲇ, Ⲇ * 219, Ⲇ * 204, Ⲇ * 222, Ⲇ * 155, 212 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠⵠᐃⲆᐃ, Δⵠ[ᐃⲆⲆ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 239, 59 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 302, 72 * Ⲇ, Ⲇ * 325, 84 * Ⲇ, Ⲇ * 326, Ⲇ * 115);
		Δ.bezierCurveTo(Ⲇ * 289, 80 * Ⲇ, Ⲇ * 270, 88 * Ⲇ, 253 * Ⲇ, Ⲇ * 78);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 216, Ⲇ * 61);
		Δ.bezierCurveTo(Ⲇ * 209, Ⲇ * 70, 209 * Ⲇ, 70 * Ⲇ, 202 * Ⲇ, Ⲇ * 79);
		Δ.bezierCurveTo(173 * Ⲇ, 87 * Ⲇ, 162 * Ⲇ, Ⲇ * 91, Ⲇ * 137, 107 * Ⲇ);
		Δ.bezierCurveTo(153 * Ⲇ, Ⲇ * 78, 174 * Ⲇ, 67 * Ⲇ, 212 * Ⲇ, Ⲇ * 62);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 175, 125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 218, 94 * Ⲇ, Ⲇ * 238, Ⲇ * 90, 281 * Ⲇ, Ⲇ * 125);
		Δ.bezierCurveTo(Ⲇ * 245, Ⲇ * 89, Ⲇ * 240, 80 * Ⲇ, Ⲇ * 228, Ⲇ * 67);
		Δ.bezierCurveTo(Ⲇ * 207, 100 * Ⲇ, Ⲇ * 192, Ⲇ * 104, 177 * Ⲇ, 123 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⵠ]);
		return ᐃⵠ
	}

	function ΔΔⵠⲆΔⵠᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 158 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 201;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(96.5 * Ⲇ, 76.421875 * Ⲇ);
		Δ.bezierCurveTo(100.5 * Ⲇ, Ⲇ * 64.421875, 103.5 * Ⲇ, 62.421875 * Ⲇ, 110.5 * Ⲇ, Ⲇ * 65.421875);
		Δ.bezierCurveTo(116.5 * Ⲇ, 66.421875 * Ⲇ, 117.5 * Ⲇ, Ⲇ * 67.421875, 112.5 * Ⲇ, 73.421875 * Ⲇ);
		Δ.bezierCurveTo(107 * Ⲇ, 79.921875 * Ⲇ, Ⲇ * 107, Ⲇ * 79.921875, 101.5 * Ⲇ, Ⲇ * 86.421875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[ⲆΔⵠΔΔ], Ⲇ * ᐃᐃᐃⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 61.5, 78.421875 * Ⲇ);
		Δ.bezierCurveTo(57.5 * Ⲇ, Ⲇ * 73.421875, Ⲇ * 51.5, Ⲇ * 66.421875, Ⲇ * 45.5, 68.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 32.5, Ⲇ * 73.421875, Ⲇ * 38.5, Ⲇ * 75.421875, 46.5 * Ⲇ, Ⲇ * 81.421875);
		Δ.bezierCurveTo(Ⲇ * 51.5, Ⲇ * 84.921875, Ⲇ * 51.5, Ⲇ * 84.921875, 56.5 * Ⲇ, 88.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⵠⵠΔᐃ], Δⵠ[8], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 116.5, 127.421875 * Ⲇ);
		Δ.bezierCurveTo(124.5 * Ⲇ, 108.421875 * Ⲇ, Ⲇ * 129.5, Ⲇ * 104.421875, 141.5 * Ⲇ, 107.421875 * Ⲇ);
		Δ.bezierCurveTo(156.5 * Ⲇ, Ⲇ * 112.421875, 153.5 * Ⲇ, 113.421875 * Ⲇ, 132.5 * Ⲇ, 134.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 123.5, Ⲇ * 141.921875, 123.5 * Ⲇ, 141.921875 * Ⲇ, 114.5 * Ⲇ, Ⲇ * 149.421875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃⲆᐃᐃ], Δⵠ[8], ΔΔⵠⲆⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(41.5 * Ⲇ, Ⲇ * 134.421875);
		Δ.bezierCurveTo(30.5 * Ⲇ, 119.421875 * Ⲇ, 25.5 * Ⲇ, Ⲇ * 111.421875, Ⲇ * 12.5, Ⲇ * 115.421875);
		Δ.bezierCurveTo(4.5 * Ⲇ, Ⲇ * 120.421875, Ⲇ * 4.5, Ⲇ * 121.421875, Ⲇ * 26.5, Ⲇ * 142.421875);
		Δ.bezierCurveTo(35 * Ⲇ, Ⲇ * 149.921875, Ⲇ * 35, Ⲇ * 149.921875, Ⲇ * 43.5, 157.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[ᐃⲆᐃⵠᐃ], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(78.5 * Ⲇ, 51.921875 * Ⲇ);
		Δ.bezierCurveTo(99.5 * Ⲇ, 75.921875 * Ⲇ, 110.5 * Ⲇ, Ⲇ * 96.921875, 118.5 * Ⲇ, Ⲇ * 120.921875);
		Δ.bezierCurveTo(121.5 * Ⲇ, Ⲇ * 140.921875, 107.5 * Ⲇ, 179.921875 * Ⲇ, 75.5 * Ⲇ, 183.921875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 30.5, Ⲇ * 169.921875, 37.5 * Ⲇ, 131.921875 * Ⲇ, 34.5 * Ⲇ, Ⲇ * 120.921875);
		Δ.bezierCurveTo(41.5 * Ⲇ, Ⲇ * 89.921875, 61.5 * Ⲇ, Ⲇ * 67.921875, Ⲇ * 78.5, 51.921875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔⲆⲆ], Δⵠ[8], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(72.5 * Ⲇ, Ⲇ * 72.421875);
		Δ.bezierCurveTo(Ⲇ * 76.5, Ⲇ * 79.421875, Ⲇ * 79.5, 80.421875 * Ⲇ, 83.5 * Ⲇ, 73.421875 * Ⲇ);
		Δ.bezierCurveTo(80.5 * Ⲇ, Ⲇ * 96.921875, Ⲇ * 79.5, Ⲇ * 114.421875, Ⲇ * 77.5, 120.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[ΔᐃⵠΔⵠ], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 42.5, 163.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 62.5, Ⲇ * 185.421875, 86.5 * Ⲇ, Ⲇ * 186.421875, Ⲇ * 111.5, 165.421875 * Ⲇ);
		Δ.bezierCurveTo(107.5 * Ⲇ, 176.421875 * Ⲇ, Ⲇ * 95.5, 187.421875 * Ⲇ, 75.5 * Ⲇ, Ⲇ * 188.421875);
		Δ.bezierCurveTo(53.5 * Ⲇ, 188.421875 * Ⲇ, 43.5 * Ⲇ, Ⲇ * 171.421875, 42.5 * Ⲇ, 164.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[ΔᐃⵠΔⵠ], Ⲇ * ᐃᐃᐃⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(79.5 * Ⲇ, Ⲇ * 61.421875);
		Δ.bezierCurveTo(88.5 * Ⲇ, 31.421875 * Ⲇ, 81.5 * Ⲇ, Ⲇ * 16.421875, 75.5 * Ⲇ, 7.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 77.5, Ⲇ * 28.421875, Ⲇ * 77.5, 37.421875 * Ⲇ, 68.5 * Ⲇ, Ⲇ * 42.421875);
		Δ.bezierCurveTo(79.5 * Ⲇ, Ⲇ * 57.421875, Ⲇ * 79.5, 58.421875 * Ⲇ, 80.5 * Ⲇ, 61.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[8], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 72.5, Ⲇ * 72.421875);
		Δ.bezierCurveTo(Ⲇ * 76.5, 79.421875 * Ⲇ, Ⲇ * 79.5, 80.421875 * Ⲇ, 83.5 * Ⲇ, Ⲇ * 73.421875);
		Δ.bezierCurveTo(80.5 * Ⲇ, Ⲇ * 96.921875, Ⲇ * 79.5, Ⲇ * 114.421875, 77.5 * Ⲇ, 120.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[8], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 96.5, 76.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 100.5, 64.421875 * Ⲇ, 103.5 * Ⲇ, Ⲇ * 62.421875, 110.5 * Ⲇ, Ⲇ * 65.421875);
		Δ.bezierCurveTo(Ⲇ * 116.5, 66.421875 * Ⲇ, 117.5 * Ⲇ, Ⲇ * 67.421875, 112.5 * Ⲇ, Ⲇ * 73.421875);
		Δ.bezierCurveTo(107 * Ⲇ, Ⲇ * 79.921875, Ⲇ * 107, Ⲇ * 79.921875, 101.5 * Ⲇ, Ⲇ * 86.421875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔⲆⵠΔ], Ⲇ * ΔΔᐃⵠΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 61.5, 78.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 57.5, 73.421875 * Ⲇ, 51.5 * Ⲇ, Ⲇ * 66.421875, 45.5 * Ⲇ, 68.421875 * Ⲇ);
		Δ.bezierCurveTo(32.5 * Ⲇ, 73.421875 * Ⲇ, 38.5 * Ⲇ, 75.421875 * Ⲇ, 46.5 * Ⲇ, 81.421875 * Ⲇ);
		Δ.bezierCurveTo(51.5 * Ⲇ, 84.921875 * Ⲇ, 51.5 * Ⲇ, Ⲇ * 84.921875, Ⲇ * 56.5, 88.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * ΔⲆΔⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 116.5, 127.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 124.5, 108.421875 * Ⲇ, 129.5 * Ⲇ, 104.421875 * Ⲇ, Ⲇ * 141.5, 107.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 156.5, Ⲇ * 112.421875, 153.5 * Ⲇ, 113.421875 * Ⲇ, Ⲇ * 132.5, 134.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 123.5, 141.921875 * Ⲇ, 123.5 * Ⲇ, Ⲇ * 141.921875, Ⲇ * 114.5, 149.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠⲆᐃⵠ], ⵠΔᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(41.5 * Ⲇ, 134.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 30.5, Ⲇ * 119.421875, Ⲇ * 25.5, Ⲇ * 111.421875, 12.5 * Ⲇ, 115.421875 * Ⲇ);
		Δ.bezierCurveTo(4.5 * Ⲇ, 120.421875 * Ⲇ, 4.5 * Ⲇ, 121.421875 * Ⲇ, Ⲇ * 26.5, 142.421875 * Ⲇ);
		Δ.bezierCurveTo(35 * Ⲇ, 149.921875 * Ⲇ, 35 * Ⲇ, 149.921875 * Ⲇ, Ⲇ * 43.5, 157.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠΔ], Δⵠ[ⵠΔⵠⲆ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 78.5, Ⲇ * 51.921875);
		Δ.bezierCurveTo(Ⲇ * 99.5, 75.921875 * Ⲇ, 110.5 * Ⲇ, 96.921875 * Ⲇ, Ⲇ * 118.5, 120.921875 * Ⲇ);
		Δ.bezierCurveTo(121.5 * Ⲇ, 140.921875 * Ⲇ, Ⲇ * 107.5, 179.921875 * Ⲇ, Ⲇ * 75.5, 183.921875 * Ⲇ);
		Δ.bezierCurveTo(30.5 * Ⲇ, Ⲇ * 169.921875, Ⲇ * 37.5, 131.921875 * Ⲇ, Ⲇ * 34.5, Ⲇ * 120.921875);
		Δ.bezierCurveTo(41.5 * Ⲇ, 89.921875 * Ⲇ, 61.5 * Ⲇ, Ⲇ * 67.921875, 78.5 * Ⲇ, Ⲇ * 51.921875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆⲆ], Δⵠ[2], Ⲇ * 4);
		ⵠΔᐃ(Δ, 108.5 * Ⲇ, 148.421875 * Ⲇ, ΔᐃΔⲆⵠ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[5]);
		ⵠΔᐃ(Δ, Ⲇ * 106.5, Ⲇ * 144.421875, 3 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[6]);
		ⵠΔᐃ(Δ, Ⲇ * 46.5, 148.421875 * Ⲇ, 9 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[5]);
		ⵠΔᐃ(Δ, 44.5 * Ⲇ, 144.421875 * Ⲇ, Ⲇ * ⲆΔⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[6]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 116.5, Ⲇ * 114.421875);
		Δ.bezierCurveTo(Ⲇ * 121.5, Ⲇ * 137.421875, Ⲇ * 118.5, 133.421875 * Ⲇ, 108.5 * Ⲇ, 139.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 94.5, Ⲇ * 146.421875, 96.5 * Ⲇ, 148.421875 * Ⲇ, 95.5 * Ⲇ, Ⲇ * 152.421875);
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆᐃ], Δⵠ[2], Ⲇ * ᐃᐃⵠΔ);
		Δ.beginPath();
		Δ.translate(ⲆⲆΔ, Ⲇ * -ⵠⵠΔⵠ);
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 35.5, 131.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 36.5, 140.421875 * Ⲇ, Ⲇ * 39.5, Ⲇ * 140.421875, Ⲇ * 49.5, 143.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 59.5, Ⲇ * 149.421875, Ⲇ * 57.5, Ⲇ * 151.421875, 59.5 * Ⲇ, 155.421875 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[2], Ⲇ * ⵠⵠⵠᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(84.5 * Ⲇ, 57.421875 * Ⲇ);
		Δ.bezierCurveTo(101.5 * Ⲇ, Ⲇ * 120.421875, Ⲇ * 92.5, Ⲇ * 127.421875, 78.5 * Ⲇ, 134.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 51.5, Ⲇ * 131.421875, 63.5 * Ⲇ, 102.421875 * Ⲇ, Ⲇ * 70.5, 59.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 75, 55.421875 * Ⲇ, 78.5 * Ⲇ, Ⲇ * 52.421875, Ⲇ * 79.5, 51.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(79.5 * Ⲇ, 61.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 88.5, 31.421875 * Ⲇ, 81.5 * Ⲇ, 16.421875 * Ⲇ, 75.5 * Ⲇ, Ⲇ * 7.421875);
		Δ.bezierCurveTo(77.5 * Ⲇ, 28.421875 * Ⲇ, 77.5 * Ⲇ, 37.421875 * Ⲇ, Ⲇ * 68.5, 42.421875 * Ⲇ);
		Δ.bezierCurveTo(79.5 * Ⲇ, 57.421875 * Ⲇ, 79.5 * Ⲇ, 58.421875 * Ⲇ, Ⲇ * 80.5, 61.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⵠ], Δⵠ[2], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 72.5, 72.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 76.5, 79.421875 * Ⲇ, Ⲇ * 79.5, 80.421875 * Ⲇ, Ⲇ * 83.5, Ⲇ * 73.421875);
		Δ.bezierCurveTo(80.5 * Ⲇ, Ⲇ * 96.921875, 79.5 * Ⲇ, 114.421875 * Ⲇ, Ⲇ * 77.5, 120.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆΔⲆΔ], ᐃᐃⵠΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(87.5 * Ⲇ, Ⲇ * 154.421875);
		Δ.bezierCurveTo(93.5 * Ⲇ, 163.921875 * Ⲇ, Ⲇ * 93.5, Ⲇ * 163.921875, Ⲇ * 99.5, Ⲇ * 173.421875);
		Δ.bezierCurveTo(95 * Ⲇ, Ⲇ * 177.421875, Ⲇ * 95, 177.421875 * Ⲇ, Ⲇ * 90.5, 181.421875 * Ⲇ);
		Δ.bezierCurveTo(89 * Ⲇ, 167.921875 * Ⲇ, 89 * Ⲇ, 167.921875 * Ⲇ, 87.5 * Ⲇ, Ⲇ * 154.421875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], Ⲇ * ⵠΔΔΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 81.5, 164.421875 * Ⲇ);
		Δ.bezierCurveTo(84 * Ⲇ, Ⲇ * 172.921875, 84 * Ⲇ, Ⲇ * 172.921875, 86.5 * Ⲇ, Ⲇ * 181.421875);
		Δ.bezierCurveTo(Ⲇ * 82.5, 182.421875 * Ⲇ, 82.5 * Ⲇ, Ⲇ * 182.421875, Ⲇ * 78.5, 183.421875 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[7], Ⲇ * 2);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(72.5 * Ⲇ, 164.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 73.5, 173.921875 * Ⲇ, 73.5 * Ⲇ, 173.921875 * Ⲇ, 74.5 * Ⲇ, 183.421875 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 70.5, 182.921875 * Ⲇ, 70.5 * Ⲇ, Ⲇ * 182.921875, Ⲇ * 66.5, Ⲇ * 182.421875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠΔᐃ], Δⵠ[ᐃⵠΔⲆⵠⵠᐃ], 2 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 65.5, 156.421875 * Ⲇ);
		Δ.bezierCurveTo(65 * Ⲇ, Ⲇ * 168.421875, Ⲇ * 65, Ⲇ * 168.421875, 64.5 * Ⲇ, Ⲇ * 180.421875);
		Δ.bezierCurveTo(Ⲇ * 58.5, 177.421875 * Ⲇ, Ⲇ * 58.5, 177.421875 * Ⲇ, 52.5 * Ⲇ, Ⲇ * 174.421875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6], Δⵠ[ΔⵠᐃΔⲆ], ⵠΔⵠⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(42.5 * Ⲇ, 163.421875 * Ⲇ);
		Δ.bezierCurveTo(62.5 * Ⲇ, 185.421875 * Ⲇ, 86.5 * Ⲇ, Ⲇ * 186.421875, 111.5 * Ⲇ, 165.421875 * Ⲇ);
		Δ.bezierCurveTo(107.5 * Ⲇ, Ⲇ * 176.421875, Ⲇ * 95.5, Ⲇ * 187.421875, 75.5 * Ⲇ, Ⲇ * 188.421875);
		Δ.bezierCurveTo(Ⲇ * 53.5, Ⲇ * 188.421875, Ⲇ * 43.5, Ⲇ * 171.421875, Ⲇ * 42.5, Ⲇ * 164.421875);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆᐃ], Δⵠ[ᐃᐃⲆⵠ], ⵠΔⲆᐃⲆ * Ⲇ);
		return ᐃⵠ
	}

	function ᐃⵠⵠⵠΔᐃⵠⵠⲆ(Ⲇ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 321;
		ᐃⵠ.height = 345 * Ⲇ;
		Δ.translate(0, Ⲇ * 5);
		ⵠΔᐃ(Δ, 161.00003051757812 * Ⲇ, Ⲇ * 165.40341186523438, Ⲇ * 20.808652046684813);
		ⵠᐃ(Δ, ᐃ[549], ᐃ[208], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(162.00003051757812 * Ⲇ, Ⲇ * 48.403411865234375);
		Δ.bezierCurveTo(Ⲇ * 172.50003051757812, 67.40341186523438 * Ⲇ, 172.50003051757812 * Ⲇ, 67.40341186523438 * Ⲇ, 183.00003051757812 * Ⲇ, Ⲇ * 86.40341186523438);
		Δ.bezierCurveTo(160.50003051757812 * Ⲇ, 86.40341186523438 * Ⲇ, 160.50003051757812 * Ⲇ, Ⲇ * 86.40341186523438, Ⲇ * 138.00003051757812, 86.40341186523438 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃ[549], ᐃ[208], ⲆΔⲆᐃⵠ * Ⲇ);
		Δ.save();
		Δ.translate(161.50003051757812 * Ⲇ, Ⲇ * 117.90341186523438);
		ᐃΔⵠ(Δ, Ⲇ * -5.5, Ⲇ * -37.5, ⲆΔΔⵠⵠ * Ⲇ, 75 * Ⲇ, Ⲇ * ⵠᐃⲆⲆΔ);
		Δ.restore();
		ⵠᐃ(Δ, ᐃ[549], ᐃ[208], Ⲇ * ΔⵠⲆᐃΔ);
		Δ.save();
		Δ.translate(Ⲇ * 162.00003051757812, 78.90341186523438 * Ⲇ);
		ᐃΔⵠ(Δ, -10 * Ⲇ, -5.5 * Ⲇ, Ⲇ * 20, 11 * Ⲇ, Ⲇ * ᐃⲆⲆ);
		Δ.restore();
		ⵠᐃ(Δ, ᐃ[549]);
		ⵠΔᐃ(Δ, 161.00003051757812 * Ⲇ, Ⲇ * 163.6761474609375, Ⲇ * 17.08800749063506);
		ⵠᐃ(Δ, ᐃ[549]);
		return ᐃⵠ
	}

	function ΔⵠⲆⵠΔᐃⲆⵠⲆ() {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 460;
		ᐃⵠ.height = 220;
		Δ.fillStyle = "#3a2a0d";
		Δ.fillRect(0, 0, ᐃⵠ.width, ᐃⵠ.height);
		Δ.lineWidth = 4;
		Δ.beginPath();
		Δ.strokeStyle = "#513810";
		for (var ⲆⲆⲆ = 20; ⲆⲆⲆ < 220; ⲆⲆⲆ += ΔΔΔΔᐃⵠⲆ) {
			Δ.moveTo(ⵠⵠⵠ, ⲆⲆⲆ);
			Δ.lineTo(460, ⲆⲆⲆ);
			Δ.closePath();
			Δ.stroke()
		}
		return ᐃⵠ
	}

	function ᐃⲆⵠⲆΔᐃⵠᐃᐃ(Ⲇ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 335 * Ⲇ;
		var ⵠᐃⵠΔΔⲆᐃ = Ⲇ * 250;
		var ΔⵠⲆ = 120 * Ⲇ;
		var ⲆⵠⲆᐃⲆⵠΔ = ⵠᐃᐃᐃᐃⵠᐃ * Ⲇ;
		var ⲆⵠⲆᐃⲆⲆΔ = Ⲇ * 35;
		var ⲆᐃΔΔⵠᐃΔ = Ⲇ * 65;
		var ΔⲆⵠ = Ⲇ * ⵠᐃᐃⲆ;
		var ⲆΔⵠΔⵠ = ΔΔΔⵠ * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.beginPath();
		Δ.translate(0, ⲆᐃⲆᐃⲆᐃᐃ * Ⲇ);
		ᐃΔⵠ(Δ, ⲆᐃΔΔⵠᐃΔ, ᐃⲆΔᐃ, ⵠᐃⵠΔΔⲆᐃ, ⲆⵠⲆᐃⲆⵠΔ, ΔⲆⵠ);
		ⵠᐃ(Δ, null, "#69A148", ⲆΔⵠΔⵠ);
		Δ.translate(ⵠⵠΔΔ, ⲆⵠⲆᐃⲆⲆΔ);
		ᐃΔⵠ(Δ, ⲆᐃΔΔⵠᐃΔ, ᐃⲆΔ, ⵠᐃⵠΔΔⲆᐃ, ⲆⵠⲆᐃⲆⵠΔ, ΔⲆⵠ);
		ⵠᐃ(Δ, null, "#AF352A", ⲆΔⵠΔⵠ);
		Δ.translate(0, ⲆⵠⲆᐃⲆⲆΔ);
		ᐃΔⵠ(Δ, ⲆᐃΔΔⵠᐃΔ, 0, ⵠᐃⵠΔΔⲆᐃ, ⲆⵠⲆᐃⲆⵠΔ, ΔⲆⵠ);
		ⵠᐃ(Δ, null, "#669BB1", ⲆΔⵠΔⵠ);
		return ᐃⵠ
	}

	function ΔⵠΔΔΔⲆΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 48 * Ⲇ;
		ᐃⵠ.height = 47 * Ⲇ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(7.1875 * Ⲇ, 25.434661865234375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 11.1875, Ⲇ * 13.434661865234375, 18.1875 * Ⲇ, Ⲇ * 8.434661865234375, 32.1875 * Ⲇ, Ⲇ * 10.434661865234375);
		Δ.bezierCurveTo(45.1875 * Ⲇ, 14.434661865234375 * Ⲇ, Ⲇ * 41.1875, 24.434661865234375 * Ⲇ, 36.1875 * Ⲇ, 30.434661865234375 * Ⲇ);
		Δ.bezierCurveTo(22.1875 * Ⲇ, 42.434661865234375 * Ⲇ, Ⲇ * 2.1875, 41.434661865234375 * Ⲇ, Ⲇ * 7.1875, 25.434661865234375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ]);
		return ᐃⵠ
	}

	function ΔΔⵠᐃᐃᐃΔ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 137 * Ⲇ;
		ᐃⵠ.height = 129 * Ⲇ;
		Δ.globalAlpha = .4;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(42.000030517578125 * Ⲇ, Ⲇ * 41.17047119140625);
		Δ.bezierCurveTo(45.000030517578125 * Ⲇ, 38.17047119140625 * Ⲇ, 49.000030517578125 * Ⲇ, 37.17047119140625 * Ⲇ, Ⲇ * 62.000030517578125, Ⲇ * 38.17047119140625);
		Δ.bezierCurveTo(Ⲇ * 78.00003051757812, Ⲇ * 38.17047119140625, 78.00003051757812 * Ⲇ, 38.17047119140625 * Ⲇ, Ⲇ * 94.00003051757812, 38.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 100.00003051757812, Ⲇ * 38.17047119140625, 102.00003051757812 * Ⲇ, 38.17047119140625 * Ⲇ, Ⲇ * 101.00003051757812, 47.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 101.00003051757812, 63.67047119140625 * Ⲇ, Ⲇ * 101.00003051757812, 63.67047119140625 * Ⲇ, 101.00003051757812 * Ⲇ, 80.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 102.00003051757812, Ⲇ * 84.17047119140625, 100.00003051757812 * Ⲇ, Ⲇ * 86.17047119140625, 95.00003051757812 * Ⲇ, 88.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 84.00003051757812, 94.17047119140625 * Ⲇ, Ⲇ * 89.00003051757812, Ⲇ * 94.17047119140625, Ⲇ * 79.00003051757812, Ⲇ * 94.17047119140625);
		Δ.bezierCurveTo(Ⲇ * 59.500030517578125, Ⲇ * 94.17047119140625, Ⲇ * 59.500030517578125, Ⲇ * 94.17047119140625, 40.000030517578125 * Ⲇ, 94.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(33.000030517578125 * Ⲇ, 94.17047119140625 * Ⲇ, Ⲇ * 34.000030517578125, Ⲇ * 94.17047119140625, 34.000030517578125 * Ⲇ, Ⲇ * 86.17047119140625);
		Δ.bezierCurveTo(Ⲇ * 34.000030517578125, Ⲇ * 69.67047119140625, 34.000030517578125 * Ⲇ, 69.67047119140625 * Ⲇ, 34.000030517578125 * Ⲇ, Ⲇ * 53.17047119140625);
		Δ.bezierCurveTo(Ⲇ * 33.000030517578125, 47.17047119140625 * Ⲇ, Ⲇ * 34.000030517578125, Ⲇ * 47.17047119140625, Ⲇ * 40.000030517578125, 42.17047119140625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠΔΔⲆΔ, Δⵠ[ΔⵠⲆⲆ], 40 * Ⲇ);
		Δ.globalAlpha = .4;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 42.000030517578125, Ⲇ * 41.17047119140625);
		Δ.bezierCurveTo(45.000030517578125 * Ⲇ, Ⲇ * 38.17047119140625, Ⲇ * 49.000030517578125, 37.17047119140625 * Ⲇ, Ⲇ * 62.000030517578125, 38.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 78.00003051757812, 38.17047119140625 * Ⲇ, Ⲇ * 78.00003051757812, Ⲇ * 38.17047119140625, Ⲇ * 94.00003051757812, 38.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 100.00003051757812, Ⲇ * 38.17047119140625, Ⲇ * 102.00003051757812, Ⲇ * 38.17047119140625, 101.00003051757812 * Ⲇ, 47.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(101.00003051757812 * Ⲇ, Ⲇ * 63.67047119140625, Ⲇ * 101.00003051757812, Ⲇ * 63.67047119140625, 101.00003051757812 * Ⲇ, Ⲇ * 80.17047119140625);
		Δ.bezierCurveTo(102.00003051757812 * Ⲇ, 84.17047119140625 * Ⲇ, Ⲇ * 100.00003051757812, 86.17047119140625 * Ⲇ, Ⲇ * 95.00003051757812, Ⲇ * 88.17047119140625);
		Δ.bezierCurveTo(84.00003051757812 * Ⲇ, 94.17047119140625 * Ⲇ, 89.00003051757812 * Ⲇ, 94.17047119140625 * Ⲇ, Ⲇ * 79.00003051757812, Ⲇ * 94.17047119140625);
		Δ.bezierCurveTo(Ⲇ * 59.500030517578125, Ⲇ * 94.17047119140625, 59.500030517578125 * Ⲇ, Ⲇ * 94.17047119140625, 40.000030517578125 * Ⲇ, 94.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(33.000030517578125 * Ⲇ, 94.17047119140625 * Ⲇ, Ⲇ * 34.000030517578125, 94.17047119140625 * Ⲇ, Ⲇ * 34.000030517578125, 86.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 34.000030517578125, 69.67047119140625 * Ⲇ, Ⲇ * 34.000030517578125, 69.67047119140625 * Ⲇ, Ⲇ * 34.000030517578125, Ⲇ * 53.17047119140625);
		Δ.bezierCurveTo(33.000030517578125 * Ⲇ, Ⲇ * 47.17047119140625, 34.000030517578125 * Ⲇ, Ⲇ * 47.17047119140625, Ⲇ * 40.000030517578125, 42.17047119140625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[1], ⲆⵠᐃΔⲆ * Ⲇ);
		Δ.globalAlpha = .8;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 42.000030517578125, 41.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(45.000030517578125 * Ⲇ, Ⲇ * 38.17047119140625, Ⲇ * 49.000030517578125, Ⲇ * 37.17047119140625, Ⲇ * 62.000030517578125, 38.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(78.00003051757812 * Ⲇ, Ⲇ * 38.17047119140625, Ⲇ * 78.00003051757812, Ⲇ * 38.17047119140625, Ⲇ * 94.00003051757812, Ⲇ * 38.17047119140625);
		Δ.bezierCurveTo(Ⲇ * 100.00003051757812, 38.17047119140625 * Ⲇ, Ⲇ * 102.00003051757812, 38.17047119140625 * Ⲇ, 101.00003051757812 * Ⲇ, Ⲇ * 47.17047119140625);
		Δ.bezierCurveTo(Ⲇ * 101.00003051757812, 63.67047119140625 * Ⲇ, Ⲇ * 101.00003051757812, 63.67047119140625 * Ⲇ, 101.00003051757812 * Ⲇ, Ⲇ * 80.17047119140625);
		Δ.bezierCurveTo(Ⲇ * 102.00003051757812, Ⲇ * 84.17047119140625, 100.00003051757812 * Ⲇ, Ⲇ * 86.17047119140625, Ⲇ * 95.00003051757812, Ⲇ * 88.17047119140625);
		Δ.bezierCurveTo(Ⲇ * 84.00003051757812, 94.17047119140625 * Ⲇ, 89.00003051757812 * Ⲇ, 94.17047119140625 * Ⲇ, 79.00003051757812 * Ⲇ, 94.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 59.500030517578125, Ⲇ * 94.17047119140625, 59.500030517578125 * Ⲇ, 94.17047119140625 * Ⲇ, 40.000030517578125 * Ⲇ, 94.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 33.000030517578125, Ⲇ * 94.17047119140625, Ⲇ * 34.000030517578125, 94.17047119140625 * Ⲇ, Ⲇ * 34.000030517578125, Ⲇ * 86.17047119140625);
		Δ.bezierCurveTo(34.000030517578125 * Ⲇ, Ⲇ * 69.67047119140625, Ⲇ * 34.000030517578125, 69.67047119140625 * Ⲇ, 34.000030517578125 * Ⲇ, Ⲇ * 53.17047119140625);
		Δ.bezierCurveTo(33.000030517578125 * Ⲇ, 47.17047119140625 * Ⲇ, Ⲇ * 34.000030517578125, Ⲇ * 47.17047119140625, 40.000030517578125 * Ⲇ, Ⲇ * 42.17047119140625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ], Δⵠ[1], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(51.000030517578125 * Ⲇ, 37.9886474609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 51.000030517578125, 61.9886474609375 * Ⲇ, 51.000030517578125 * Ⲇ, Ⲇ * 61.9886474609375, Ⲇ * 51.000030517578125, 85.9886474609375 * Ⲇ);
		Δ.bezierCurveTo(75.50003051757812 * Ⲇ, Ⲇ * 85.9886474609375, 75.50003051757812 * Ⲇ, 85.9886474609375 * Ⲇ, 100.00003051757812 * Ⲇ, 85.9886474609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 100.00003051757812, 61.9886474609375 * Ⲇ, 100.00003051757812 * Ⲇ, Ⲇ * 61.9886474609375, 100.00003051757812 * Ⲇ, 37.9886474609375 * Ⲇ);
		Δ.bezierCurveTo(76.00003051757812 * Ⲇ, 37.9886474609375 * Ⲇ, Ⲇ * 76.00003051757812, 37.9886474609375 * Ⲇ, Ⲇ * 52.000030517578125, 37.9886474609375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δⵠᐃ], Δⵠ[2], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(99.00003051757812 * Ⲇ, 38.9886474609375 * Ⲇ);
		Δ.bezierCurveTo(93.50003051757812 * Ⲇ, 44.9886474609375 * Ⲇ, Ⲇ * 93.50003051757812, Ⲇ * 44.9886474609375, 88.00003051757812 * Ⲇ, Ⲇ * 50.9886474609375);
		Δ.bezierCurveTo(88.00003051757812 * Ⲇ, 72.4886474609375 * Ⲇ, 88.00003051757812 * Ⲇ, 72.4886474609375 * Ⲇ, 88.00003051757812 * Ⲇ, 93.9886474609375 * Ⲇ);
		Δ.bezierCurveTo(94.00003051757812 * Ⲇ, 90.4886474609375 * Ⲇ, Ⲇ * 94.00003051757812, 90.4886474609375 * Ⲇ, 100.00003051757812 * Ⲇ, Ⲇ * 86.9886474609375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔⲆⵠΔ], Ⲇ * ΔⲆⲆⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 87.00003051757812, 49.625 * Ⲇ);
		Δ.bezierCurveTo(61.000030517578125 * Ⲇ, Ⲇ * 49.625, Ⲇ * 61.000030517578125, Ⲇ * 49.625, Ⲇ * 35.000030517578125, 49.625 * Ⲇ);
		Δ.bezierCurveTo(35.000030517578125 * Ⲇ, Ⲇ * 70.625, Ⲇ * 35.000030517578125, Ⲇ * 70.625, Ⲇ * 35.000030517578125, 91.625 * Ⲇ);
		Δ.bezierCurveTo(60.500030517578125 * Ⲇ, 91.625 * Ⲇ, 60.500030517578125 * Ⲇ, Ⲇ * 91.625, 86.00003051757812 * Ⲇ, Ⲇ * 91.625);
		Δ.bezierCurveTo(86.50003051757812 * Ⲇ, Ⲇ * 70.625, 86.50003051757812 * Ⲇ, Ⲇ * 70.625, Ⲇ * 87.00003051757812, 49.625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠᐃⵠⵠ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(47.000030517578125 * Ⲇ, 36.625 * Ⲇ);
		Δ.bezierCurveTo(73.00003051757812 * Ⲇ, Ⲇ * 37.125, 73.00003051757812 * Ⲇ, Ⲇ * 37.125, Ⲇ * 99.00003051757812, Ⲇ * 37.625);
		Δ.bezierCurveTo(Ⲇ * 93.50003051757812, Ⲇ * 44.125, Ⲇ * 93.50003051757812, 44.125 * Ⲇ, 88.00003051757812 * Ⲇ, Ⲇ * 50.625);
		Δ.bezierCurveTo(60.500030517578125 * Ⲇ, Ⲇ * 50.125, Ⲇ * 60.500030517578125, 50.125 * Ⲇ, 33.000030517578125 * Ⲇ, Ⲇ * 49.625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⵠ], Δⵠ[3], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 53.000030517578125, 52.625 * Ⲇ);
		Δ.bezierCurveTo(40.000030517578125 * Ⲇ, 54.625 * Ⲇ, Ⲇ * 39.000030517578125, Ⲇ * 59.625, Ⲇ * 40.000030517578125, 67.625 * Ⲇ);
		Δ.bezierCurveTo(45.000030517578125 * Ⲇ, 59.625 * Ⲇ, 48.000030517578125 * Ⲇ, Ⲇ * 58.625, 54.000030517578125 * Ⲇ, Ⲇ * 53.625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔⲆ]);
		Δ.globalAlpha = ⲆⲆⲆᐃ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 42.000030517578125, 41.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(45.000030517578125 * Ⲇ, 38.17047119140625 * Ⲇ, 49.000030517578125 * Ⲇ, 37.17047119140625 * Ⲇ, Ⲇ * 62.000030517578125, 38.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 78.00003051757812, 38.17047119140625 * Ⲇ, Ⲇ * 78.00003051757812, Ⲇ * 38.17047119140625, Ⲇ * 94.00003051757812, Ⲇ * 38.17047119140625);
		Δ.bezierCurveTo(Ⲇ * 100.00003051757812, 38.17047119140625 * Ⲇ, Ⲇ * 102.00003051757812, Ⲇ * 38.17047119140625, Ⲇ * 101.00003051757812, Ⲇ * 47.17047119140625);
		Δ.bezierCurveTo(101.00003051757812 * Ⲇ, 63.67047119140625 * Ⲇ, Ⲇ * 101.00003051757812, Ⲇ * 63.67047119140625, Ⲇ * 101.00003051757812, Ⲇ * 80.17047119140625);
		Δ.bezierCurveTo(Ⲇ * 102.00003051757812, Ⲇ * 84.17047119140625, 100.00003051757812 * Ⲇ, 86.17047119140625 * Ⲇ, 95.00003051757812 * Ⲇ, 88.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 84.00003051757812, Ⲇ * 94.17047119140625, 89.00003051757812 * Ⲇ, 94.17047119140625 * Ⲇ, Ⲇ * 79.00003051757812, 94.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 59.500030517578125, Ⲇ * 94.17047119140625, 59.500030517578125 * Ⲇ, 94.17047119140625 * Ⲇ, Ⲇ * 40.000030517578125, Ⲇ * 94.17047119140625);
		Δ.bezierCurveTo(33.000030517578125 * Ⲇ, 94.17047119140625 * Ⲇ, Ⲇ * 34.000030517578125, 94.17047119140625 * Ⲇ, 34.000030517578125 * Ⲇ, 86.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 34.000030517578125, 69.67047119140625 * Ⲇ, Ⲇ * 34.000030517578125, 69.67047119140625 * Ⲇ, Ⲇ * 34.000030517578125, 53.17047119140625 * Ⲇ);
		Δ.bezierCurveTo(33.000030517578125 * Ⲇ, Ⲇ * 47.17047119140625, Ⲇ * 34.000030517578125, 47.17047119140625 * Ⲇ, 40.000030517578125 * Ⲇ, Ⲇ * 42.17047119140625);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ⲆⲆΔΔ], Ⲇ * ΔΔΔⵠ);
		return ᐃⵠ
	}

	function ᐃⵠᐃΔⲆⲆΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 440;
		ᐃⵠ.height = Ⲇ * 388;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(ᐃᐃⲆⵠᐃ * Ⲇ, Ⲇ * 5);
		ⵠΔᐃ(Δ, Ⲇ * 220, 201 * Ⲇ, 170.41713528867922 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ΔᐃⲆⲆ], ⲆⵠⲆΔⲆ * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(Ⲇ * -5, -5 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 220, Ⲇ * 201, 170.41713528867922 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⲆ], Δⵠ[2], Ⲇ * 6);
		ⵠΔᐃ(Δ, Ⲇ * 220, Ⲇ * 201, 130 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[11], Δⵠ[ⲆᐃᐃⲆ], Ⲇ * ᐃⲆΔⵠΔ);
		ⵠΔᐃ(Δ, Ⲇ * 222, Ⲇ * 199, Ⲇ * 120.74767078498864);
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[ⵠᐃⵠⵠ], Ⲇ * 40);
		ⵠΔᐃ(Δ, Ⲇ * 220, Ⲇ * 200, Ⲇ * 95.44108130150245);
		ⵠᐃ(Δ, undefined, Δⵠ[2], Ⲇ * 15);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(5 * Ⲇ, Ⲇ * 5);
		ⵠΔᐃ(Δ, 63 * Ⲇ, 136 * Ⲇ, 49.193495504995376 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠⵠᐃ], Δⵠ[0], ⵠΔᐃⲆ * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.translate(-ⲆⲆⲆᐃⵠ * Ⲇ, Ⲇ * -ⵠᐃⲆᐃ);
		ⵠΔᐃ(Δ, Ⲇ * 63, Ⲇ * 136, Ⲇ * 49.193495504995376);
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[ᐃᐃΔⵠ], Ⲇ * 4);
		ⵠΔᐃ(Δ, 63 * Ⲇ, 137 * Ⲇ, 25.632011235952593 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[ⵠⲆΔᐃ], 4 * Ⲇ);
		return ᐃⵠ
	}

	function ΔΔᐃΔΔᐃᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 104;
		ᐃⵠ.height = 117 * Ⲇ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ᐃᐃᐃᐃΔ, Ⲇ * 90);
		Δ.bezierCurveTo(Ⲇ * ⵠⲆⵠΔⲆ, Ⲇ * 99.5, 20 * Ⲇ, 99.5 * Ⲇ, Ⲇ * 36, 109 * Ⲇ);
		Δ.bezierCurveTo(67 * Ⲇ, Ⲇ * 92, Ⲇ * 67, 92 * Ⲇ, 98 * Ⲇ, Ⲇ * 75);
		Δ.bezierCurveTo(91 * Ⲇ, Ⲇ * 27, 91 * Ⲇ, 27 * Ⲇ, Ⲇ * 91, Ⲇ * 28);
		Δ.bezierCurveTo(Ⲇ * 72.5, Ⲇ * ΔᐃⵠⲆᐃⵠᐃ, 72.5 * Ⲇ, ᐃⵠΔⲆΔΔⵠ * Ⲇ, Ⲇ * 54, Ⲇ * 4);
		Δ.bezierCurveTo(Ⲇ * 33.5, Ⲇ * 10, 33.5 * Ⲇ, ᐃᐃᐃⲆⵠ * Ⲇ, 13 * Ⲇ, Ⲇ * ⵠᐃΔⲆΔⲆⵠ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(6 * Ⲇ, 76 * Ⲇ);
		Δ.bezierCurveTo(13.5 * Ⲇ, Ⲇ * 51.5, 13.5 * Ⲇ, 51.5 * Ⲇ, 21 * Ⲇ, Ⲇ * 27);
		Δ.bezierCurveTo(Ⲇ * 37.5, Ⲇ * 17, Ⲇ * 37.5, Ⲇ * 17, Ⲇ * 54, Ⲇ * ⲆⲆⵠⵠⲆ);
		Δ.bezierCurveTo(Ⲇ * 33.5, Ⲇ * 12.5, Ⲇ * 33.5, 12.5 * Ⲇ, 13 * Ⲇ, Ⲇ * ⵠᐃᐃⲆⵠⵠᐃ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(24 * Ⲇ, Ⲇ * 62);
		Δ.bezierCurveTo(Ⲇ * 28.5, 53 * Ⲇ, 28.5 * Ⲇ, Ⲇ * 53, Ⲇ * 33, 44 * Ⲇ);
		Δ.bezierCurveTo(41.5 * Ⲇ, Ⲇ * 41, 41.5 * Ⲇ, 41 * Ⲇ, Ⲇ * 50, 38 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 52.5, Ⲇ * 35, Ⲇ * 52.5, Ⲇ * 35, 55 * Ⲇ, 32 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 52, 30 * Ⲇ, 52 * Ⲇ, 30 * Ⲇ, Ⲇ * 49, 28 * Ⲇ);
		Δ.bezierCurveTo(38 * Ⲇ, Ⲇ * 31.5, 38 * Ⲇ, Ⲇ * 31.5, Ⲇ * 27, 35 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(36 * Ⲇ, 107 * Ⲇ);
		Δ.bezierCurveTo(66 * Ⲇ, 90.5 * Ⲇ, 66 * Ⲇ, 90.5 * Ⲇ, Ⲇ * 96, Ⲇ * 74);
		Δ.bezierCurveTo(93 * Ⲇ, Ⲇ * 52.5, 93 * Ⲇ, Ⲇ * 52.5, Ⲇ * 90, 31 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 87, 48 * Ⲇ, 87 * Ⲇ, Ⲇ * 48, 84 * Ⲇ, Ⲇ * 65);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ⲆⵠΔΔ, 89 * Ⲇ);
		Δ.bezierCurveTo(ⲆⵠΔᐃⲆ * Ⲇ, ᐃΔⲆᐃⵠ * Ⲇ, Ⲇ * 34, 110 * Ⲇ, Ⲇ * 35, 111 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 67, 93 * Ⲇ, Ⲇ * 67, 93 * Ⲇ, 99 * Ⲇ, Ⲇ * 75);
		Δ.bezierCurveTo(Ⲇ * 100, Ⲇ * 78.5, 100 * Ⲇ, Ⲇ * 78.5, Ⲇ * 101, 82 * Ⲇ);
		Δ.bezierCurveTo(68 * Ⲇ, 99 * Ⲇ, 68 * Ⲇ, Ⲇ * 99, Ⲇ * 35, 116 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ΔⲆᐃⵠⵠᐃΔ, 106.5 * Ⲇ, 18 * Ⲇ, Ⲇ * 106.5, Ⲇ * 1, Ⲇ * 97);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(36 * Ⲇ, Ⲇ * 107);
		Δ.bezierCurveTo(66.5 * Ⲇ, 91.5 * Ⲇ, Ⲇ * 66.5, 91.5 * Ⲇ, 97 * Ⲇ, 76 * Ⲇ);
		Δ.bezierCurveTo(94.5 * Ⲇ, 52 * Ⲇ, Ⲇ * 94.5, 52 * Ⲇ, 92 * Ⲇ, Ⲇ * 28);
		Δ.bezierCurveTo(73 * Ⲇ, Ⲇ * 15.5, 73 * Ⲇ, Ⲇ * 15.5, 54 * Ⲇ, 3 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 33, 9.5 * Ⲇ, Ⲇ * 33, 9.5 * Ⲇ, 12 * Ⲇ, Ⲇ * ΔⲆⲆⲆⲆΔᐃ);
		Δ.bezierCurveTo(Ⲇ * ᐃΔᐃⵠⲆ, 53 * Ⲇ, ᐃΔᐃⵠⲆ * Ⲇ, 53 * Ⲇ, Ⲇ * ᐃᐃᐃᐃΔ, 90 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 18.5, 99 * Ⲇ, Ⲇ * 18.5, Ⲇ * 99, Ⲇ * 33, Ⲇ * 108);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆᐃΔᐃ, Δⵠ[ΔΔΔⵠ], Ⲇ * 6);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(22 * Ⲇ, Ⲇ * 71);
		Δ.bezierCurveTo(30 * Ⲇ, 76.5 * Ⲇ, Ⲇ * 30, Ⲇ * 76.5, Ⲇ * 38, Ⲇ * 82);
		Δ.bezierCurveTo(Ⲇ * 53, 72 * Ⲇ, 53 * Ⲇ, 72 * Ⲇ, 68 * Ⲇ, 62 * Ⲇ);
		Δ.bezierCurveTo(68 * Ⲇ, Ⲇ * 52, Ⲇ * 68, 52 * Ⲇ, Ⲇ * 68, Ⲇ * 42);
		Δ.bezierCurveTo(Ⲇ * 59.5, Ⲇ * 35.5, 59.5 * Ⲇ, 35.5 * Ⲇ, 51 * Ⲇ, 29 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 39.5, Ⲇ * 32, 39.5 * Ⲇ, 32 * Ⲇ, 28 * Ⲇ, 35 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 25, 52 * Ⲇ, Ⲇ * 25, 52 * Ⲇ, 22 * Ⲇ, 69 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆᐃⲆⵠ, Δⵠ[4], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 5, 89 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 20, 73 * Ⲇ, Ⲇ * 12.5, 80.5 * Ⲇ, Ⲇ * ⵠⲆᐃⲆⵠ, 72 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[4], Ⲇ * ⲆⲆᐃⵠⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(35 * Ⲇ, Ⲇ * 102);
		Δ.bezierCurveTo(36 * Ⲇ, 92.5 * Ⲇ, 36 * Ⲇ, 92.5 * Ⲇ, 37 * Ⲇ, 83 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ΔⲆΔⲆ], 6 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 68, Ⲇ * 62);
		Δ.bezierCurveTo(81 * Ⲇ, Ⲇ * 67.5, Ⲇ * 81, 67.5 * Ⲇ, Ⲇ * 94, 73 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[ᐃᐃΔⵠⲆ], Ⲇ * 6);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 70, 41 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 80, 35.5 * Ⲇ, Ⲇ * 80, 35.5 * Ⲇ, 90 * Ⲇ, 30 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[ΔΔᐃⵠΔ], Ⲇ * 6);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 28, 33 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 21.5, Ⲇ * 26.5, 21.5 * Ⲇ, Ⲇ * 26.5, ᐃⵠᐃᐃΔ * Ⲇ, Ⲇ * ΔⲆⵠⵠᐃ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[4], ΔΔΔᐃΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(51 * Ⲇ, Ⲇ * 28);
		Δ.bezierCurveTo(53 * Ⲇ, Ⲇ * ⵠΔⲆᐃⵠ, 53 * Ⲇ, 17 * Ⲇ, Ⲇ * 55, Ⲇ * 6);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠᐃⲆᐃⲆ, Δⵠ[4], Ⲇ * 6);
		return ᐃⵠ
	}

	function ⵠᐃⵠⵠΔⵠᐃᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 201 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 164;
		Δ.translate(ⲆᐃΔⵠ, ⵠᐃⵠΔᐃ * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		ⵠΔᐃ(Δ, Ⲇ * 100.5, Ⲇ * 82, Ⲇ * 74.92746655359852);
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ᐃⲆΔᐃ], Ⲇ * ᐃᐃⵠΔ);
		ⵠΔᐃ(Δ, Ⲇ * 100.5, Ⲇ * 82, Ⲇ * 65.9417374971317);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ], Δⵠ[ⵠⵠⲆΔ], 4 * Ⲇ);
		Δ.translate(ⲆⲆᐃ, -ⲆᐃΔⲆⵠ);
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, 100.5 * Ⲇ, 82 * Ⲇ, 74.92746655359852 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[3], 4 * Ⲇ);
		ⵠΔᐃ(Δ, 100.5 * Ⲇ, 82 * Ⲇ, Ⲇ * 65.9417374971317);
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⲆ], Δⵠ[2], 4 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 100.5, Ⲇ * 82, 35.9417374971317 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⲆ], Δⵠ[2], ΔⵠΔΔΔ * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 100.5, 82 * Ⲇ, 15.9417374971317 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[2], Ⲇ * ⵠΔΔⵠⲆ);
		return ᐃⵠ
	}

	function ᐃΔᐃⲆᐃᐃⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 120;
		ᐃⵠ.height = Ⲇ * 280;
		Δ.translate(-100 * Ⲇ, Ⲇ * -ΔⵠΔΔΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 228.5, Ⲇ * 331.953125);
		Δ.bezierCurveTo(228.5 * Ⲇ, 12.953125 * Ⲇ, 228.5 * Ⲇ, 171.453125 * Ⲇ, Ⲇ * 228.5, Ⲇ * 10.953125);
		Δ.bezierCurveTo(196.5 * Ⲇ, 76.953125 * Ⲇ, Ⲇ * 206.5, 78.953125 * Ⲇ, 191.5 * Ⲇ, Ⲇ * 114.953125);
		Δ.bezierCurveTo(Ⲇ * 162.5, 170.953125 * Ⲇ, 206.5 * Ⲇ, 220.953125 * Ⲇ, 210.5 * Ⲇ, Ⲇ * 251.953125);
		Δ.bezierCurveTo(218.5 * Ⲇ, 287.953125 * Ⲇ, Ⲇ * 220.5, 291.953125 * Ⲇ, 228.5 * Ⲇ, Ⲇ * 331.953125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ]);
		return ᐃⵠ
	}

	function ⲆΔᐃⲆⵠⵠΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 120 * Ⲇ;
		ᐃⵠ.height = 330 * Ⲇ;
		Δ.translate(-60 * Ⲇ, -10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 188.5, 7.953125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 188.5, Ⲇ * 334.953125, 188.5 * Ⲇ, 332.953125 * Ⲇ, Ⲇ * 188.5, 339.953125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 166.5, Ⲇ * 295.953125, Ⲇ * 145.5, 295.953125 * Ⲇ, 139.5 * Ⲇ, 282.953125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 124.5, Ⲇ * 244.953125, Ⲇ * 139.5, Ⲇ * 243.953125, Ⲇ * 131.5, 212.953125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 118.5, Ⲇ * 161.953125, Ⲇ * 69.5, Ⲇ * 156.953125, 74.5 * Ⲇ, Ⲇ * 92.953125);
		Δ.bezierCurveTo(Ⲇ * 85.5, Ⲇ * 41.953125, 158.5 * Ⲇ, Ⲇ * 49.953125, Ⲇ * 188.5, 7.953125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		return ᐃⵠ
	}

	function ⵠΔⵠⵠᐃΔⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 142 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 118;
		Δ.save();
		Δ.translate(70.16665649414062 * Ⲇ, Ⲇ * 38.20831298828125);
		ᐃΔⵠ(Δ, -58.5 * Ⲇ, Ⲇ * -27.5, Ⲇ * 117, 55 * Ⲇ, Ⲇ * 20);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ΔⲆⵠⲆ], ⲆⲆⲆΔ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 70, Ⲇ * 42.70831298828125);
		ᐃΔⵠ(Δ, Ⲇ * -61, -ⲆⲆⲆΔⲆ * Ⲇ, Ⲇ * 122, Ⲇ * 40, 20 * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆΔᐃ], Δⵠ[1], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 123, Ⲇ * 70.375);
		Δ.bezierCurveTo(Ⲇ * 115, Ⲇ * 99.375, Ⲇ * 119, 85.375 * Ⲇ, Ⲇ * 115, Ⲇ * 100.375);
		Δ.bezierCurveTo(112 * Ⲇ, 116.375 * Ⲇ, 117 * Ⲇ, 109.375 * Ⲇ, Ⲇ * 131, 100.375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 131, 83.375 * Ⲇ, Ⲇ * 131, Ⲇ * 83.375, Ⲇ * 131, Ⲇ * 66.375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⵠⵠ], Δⵠ[ⲆⲆⵠ], ᐃᐃᐃᐃΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 11, 68.375 * Ⲇ);
		Δ.bezierCurveTo(11.166656494140625 * Ⲇ, 84.375 * Ⲇ, Ⲇ * 9, Ⲇ * 99.375, 10 * Ⲇ, Ⲇ * 100.375);
		Δ.bezierCurveTo(35 * Ⲇ, Ⲇ * 113.375, 27 * Ⲇ, Ⲇ * 110.375, Ⲇ * 25, Ⲇ * 95.375);
		Δ.bezierCurveTo(ⲆⵠᐃΔΔ * Ⲇ, 68.375 * Ⲇ, 17 * Ⲇ, 69.375 * Ⲇ, Ⲇ * ⵠΔⵠⵠⵠ, Ⲇ * 68.375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[1], Ⲇ * ⵠΔⲆᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 46, Ⲇ * 32.375);
		Δ.bezierCurveTo(43 * Ⲇ, Ⲇ * 8.375, 45 * Ⲇ, Ⲇ * 7.375, 56 * Ⲇ, Ⲇ * 6.375);
		Δ.bezierCurveTo(Ⲇ * 105, Ⲇ * 4.375, Ⲇ * 102, Ⲇ * 6.375, 97 * Ⲇ, Ⲇ * 32.375);
		Δ.bezierCurveTo(Ⲇ * 138, Ⲇ * 43.375, Ⲇ * 133, Ⲇ * 45.375, Ⲇ * 133, Ⲇ * 58.375);
		Δ.bezierCurveTo(Ⲇ * 133, 85.375 * Ⲇ, 125 * Ⲇ, Ⲇ * 74.375, Ⲇ * 111, 70.375 * Ⲇ);
		Δ.bezierCurveTo(70 * Ⲇ, Ⲇ * 69.875, Ⲇ * 29, Ⲇ * 69.375, Ⲇ * 29, 69.375 * Ⲇ);
		Δ.bezierCurveTo(ⲆⲆⵠⵠⲆ * Ⲇ, Ⲇ * 84.375, ⲆⲆⵠⵠⲆ * Ⲇ, 70.375 * Ⲇ, 7 * Ⲇ, Ⲇ * 59.375);
		Δ.bezierCurveTo(Ⲇ * 6, 28.375 * Ⲇ, 32 * Ⲇ, Ⲇ * 39.375, 44 * Ⲇ, Ⲇ * 32.375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[1], 4 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 71, 44.375 * Ⲇ, 16.55294535724685 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⵠ], Δⵠ[ᐃⵠᐃᐃ], Ⲇ * 4);
		ⵠΔᐃ(Δ, Ⲇ * 71, Ⲇ * 43.70831298828125, 8.94427190999916 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ⲆⲆΔⵠ], Ⲇ * 4);
		return ᐃⵠ
	}

	function ⲆᐃⲆⵠⲆΔⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 253;
		ᐃⵠ.height = Ⲇ * 260;
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, Ⲇ * 126.5, 134 * Ⲇ, 119 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃ]);
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, 126.5 * Ⲇ, 124 * Ⲇ, Ⲇ * 119);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃᐃΔⵠ], Ⲇ * 4);
		ⵠΔᐃ(Δ, 126.5 * Ⲇ, Ⲇ * 127, Ⲇ * 100);
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, Ⲇ * 126.5, Ⲇ * 135, Ⲇ * 81);
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, 126.5 * Ⲇ, 125 * Ⲇ, 84 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], 4 * Ⲇ);
		ⵠΔᐃ(Δ, 126.5 * Ⲇ, Ⲇ * 125, Ⲇ * 61);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆᐃⲆ], Δⵠ[ⲆᐃᐃΔΔ], Ⲇ * 4);
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, 126.5 * Ⲇ, Ⲇ * 134, 40 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠⵠⵠΔᐃ]);
		Δ.globalAlpha = 1;
		ⵠΔᐃ(Δ, Ⲇ * 126.5, Ⲇ * 125, 40 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔⵠⵠᐃⲆ]);
		return ᐃⵠ
	}

	function ⲆᐃᐃⲆΔⵠⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 345;
		ᐃⵠ.height = 250 * Ⲇ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 105, Ⲇ * 58);
		Δ.bezierCurveTo(100.5 * Ⲇ, Ⲇ * 43, Ⲇ * 100.5, Ⲇ * 43, Ⲇ * 96, Ⲇ * 28);
		Δ.bezierCurveTo(119.5 * Ⲇ, Ⲇ * 33.5, Ⲇ * 119.5, Ⲇ * 33.5, 143 * Ⲇ, 39 * Ⲇ);
		Δ.bezierCurveTo(170 * Ⲇ, Ⲇ * 37, Ⲇ * 177, 37 * Ⲇ, 188 * Ⲇ, Ⲇ * 40);
		Δ.bezierCurveTo(213 * Ⲇ, 33.5 * Ⲇ, Ⲇ * 213, 33.5 * Ⲇ, Ⲇ * 238, Ⲇ * 27);
		Δ.bezierCurveTo(Ⲇ * 231, 52 * Ⲇ, Ⲇ * 234, 42.5 * Ⲇ, Ⲇ * 230, 58 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔⵠⲆⲆ], Ⲇ * ᐃᐃΔⲆⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(108 * Ⲇ, Ⲇ * 51);
		Δ.bezierCurveTo(Ⲇ * 91, Ⲇ * 55, Ⲇ * 85, Ⲇ * 44, 86 * Ⲇ, Ⲇ * 29);
		Δ.bezierCurveTo(62 * Ⲇ, 50 * Ⲇ, Ⲇ * 78, 69 * Ⲇ, 92 * Ⲇ, 75 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃᐃΔⵠⲆ], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(249 * Ⲇ, Ⲇ * 27);
		Δ.bezierCurveTo(273 * Ⲇ, Ⲇ * 49, 262 * Ⲇ, 68 * Ⲇ, 246 * Ⲇ, Ⲇ * 77);
		Δ.bezierCurveTo(Ⲇ * 231, 59 * Ⲇ, 236 * Ⲇ, 66.5 * Ⲇ, 226 * Ⲇ, Ⲇ * 56);
		Δ.bezierCurveTo(Ⲇ * 243, Ⲇ * 53, 252 * Ⲇ, 43 * Ⲇ, 249 * Ⲇ, Ⲇ * 28);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[4], ⵠᐃΔᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(87 * Ⲇ, 78 * Ⲇ);
		Δ.bezierCurveTo(87 * Ⲇ, Ⲇ * 59, Ⲇ * 98, 46 * Ⲇ, Ⲇ * 127, 48 * Ⲇ);
		Δ.bezierCurveTo(176 * Ⲇ, 48.5 * Ⲇ, 176 * Ⲇ, Ⲇ * 48.5, 225 * Ⲇ, 49 * Ⲇ);
		Δ.bezierCurveTo(243 * Ⲇ, Ⲇ * 49, 253 * Ⲇ, Ⲇ * 59, Ⲇ * 253, Ⲇ * 76);
		Δ.bezierCurveTo(Ⲇ * 211, Ⲇ * 85.5, Ⲇ * 211, Ⲇ * 85.5, Ⲇ * 169, 95 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5], Δⵠ[ΔⲆⵠΔᐃ], ⵠᐃΔᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 56, Ⲇ * 105);
		Δ.bezierCurveTo(Ⲇ * 56, Ⲇ * 92, Ⲇ * 59, Ⲇ * 86, 65 * Ⲇ, 73 * Ⲇ);
		Δ.bezierCurveTo(62.5 * Ⲇ, Ⲇ * 61.5, 62.5 * Ⲇ, 61.5 * Ⲇ, Ⲇ * 60, Ⲇ * 50);
		Δ.bezierCurveTo(Ⲇ * 99.5, 64.5 * Ⲇ, Ⲇ * 99.5, 64.5 * Ⲇ, Ⲇ * 139, Ⲇ * 79);
		Δ.bezierCurveTo(164 * Ⲇ, Ⲇ * 77, 177 * Ⲇ, Ⲇ * 76, Ⲇ * 203, 78 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 242, Ⲇ * 63.5, 242 * Ⲇ, 63.5 * Ⲇ, Ⲇ * 281, Ⲇ * 49);
		Δ.bezierCurveTo(279 * Ⲇ, 60.5 * Ⲇ, Ⲇ * 279, 60.5 * Ⲇ, Ⲇ * 277, Ⲇ * 72);
		Δ.bezierCurveTo(Ⲇ * 286, 88 * Ⲇ, 286 * Ⲇ, Ⲇ * 96, 287 * Ⲇ, 104 * Ⲇ);
		Δ.bezierCurveTo(228.5 * Ⲇ, 127 * Ⲇ, 228.5 * Ⲇ, Ⲇ * 127, Ⲇ * 170, 150 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ᐃᐃⵠⵠ], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(48 * Ⲇ, 130 * Ⲇ);
		Δ.bezierCurveTo(61 * Ⲇ, 155 * Ⲇ, 63 * Ⲇ, 165 * Ⲇ, Ⲇ * 56, 171 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 48, Ⲇ * 177, 40 * Ⲇ, 171 * Ⲇ, 38 * Ⲇ, 178 * Ⲇ);
		Δ.bezierCurveTo(33 * Ⲇ, 180 * Ⲇ, Ⲇ * 37, Ⲇ * 188, 47 * Ⲇ, Ⲇ * 208);
		Δ.bezierCurveTo(52 * Ⲇ, 221 * Ⲇ, 55 * Ⲇ, Ⲇ * 222, Ⲇ * 75, Ⲇ * 229);
		Δ.bezierCurveTo(91 * Ⲇ, Ⲇ * 213, 98 * Ⲇ, Ⲇ * 212, Ⲇ * 112, 219 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 167, Ⲇ * 225, Ⲇ * 187, Ⲇ * 224, Ⲇ * 222, 220 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 244, Ⲇ * 214, Ⲇ * 247, 213 * Ⲇ, Ⲇ * 263, 229 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 295, Ⲇ * 220, Ⲇ * 291, Ⲇ * 215, 301 * Ⲇ, 194 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 308, 178 * Ⲇ, Ⲇ * 309, Ⲇ * 176, 302 * Ⲇ, 173 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 290, 177 * Ⲇ, Ⲇ * 289, 177 * Ⲇ, 283 * Ⲇ, Ⲇ * 169);
		Δ.bezierCurveTo(279 * Ⲇ, Ⲇ * 163, 279 * Ⲇ, 161 * Ⲇ, Ⲇ * 290, 130 * Ⲇ);
		Δ.bezierCurveTo(270 * Ⲇ, Ⲇ * 127, 270 * Ⲇ, Ⲇ * 127, 250 * Ⲇ, Ⲇ * 124);
		Δ.bezierCurveTo(Ⲇ * 209, Ⲇ * 137.5, Ⲇ * 209, 137.5 * Ⲇ, 168 * Ⲇ, Ⲇ * 151);
		Δ.bezierCurveTo(121 * Ⲇ, 135 * Ⲇ, Ⲇ * 121, Ⲇ * 135, 74 * Ⲇ, Ⲇ * 119);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔΔᐃ], Δⵠ[ᐃⵠΔⲆ], Ⲇ * ᐃᐃΔⲆⵠ);
		Δ.globalCompositeOperation = ᐃ[500];
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(133 * Ⲇ, Ⲇ * 158);
		Δ.bezierCurveTo(Ⲇ * 152, 193 * Ⲇ, 158 * Ⲇ, Ⲇ * 205, 140 * Ⲇ, Ⲇ * 203);
		Δ.bezierCurveTo(Ⲇ * 99, Ⲇ * 195, Ⲇ * 96, 189 * Ⲇ, Ⲇ * 86, 173 * Ⲇ);
		Δ.bezierCurveTo(80 * Ⲇ, 159 * Ⲇ, 88 * Ⲇ, Ⲇ * 145, 104 * Ⲇ, Ⲇ * 141);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⲆⵠⵠᐃ], Δⵠ[8], ⵠⵠΔⲆⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 215, 146 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 204, 167 * Ⲇ, Ⲇ * 204, 167 * Ⲇ, Ⲇ * 193, Ⲇ * 188);
		Δ.bezierCurveTo(Ⲇ * 187, Ⲇ * 201, Ⲇ * 191, 209 * Ⲇ, Ⲇ * 213, Ⲇ * 201);
		Δ.bezierCurveTo(247 * Ⲇ, 192 * Ⲇ, 253 * Ⲇ, Ⲇ * 181, Ⲇ * 257, Ⲇ * 169);
		Δ.bezierCurveTo(260 * Ⲇ, Ⲇ * 157, 254 * Ⲇ, Ⲇ * 149, 243 * Ⲇ, 141 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⲆⵠⵠᐃ], Δⵠ[8], 8 * Ⲇ);
		Δ.globalCompositeOperation = ᐃ[ⵠⵠⲆΔⵠ];
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 133, Ⲇ * 158);
		Δ.bezierCurveTo(152 * Ⲇ, 193 * Ⲇ, Ⲇ * 158, 205 * Ⲇ, Ⲇ * 140, Ⲇ * 203);
		Δ.bezierCurveTo(99 * Ⲇ, 195 * Ⲇ, Ⲇ * 96, 189 * Ⲇ, Ⲇ * 86, 173 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 80, 159 * Ⲇ, 88 * Ⲇ, Ⲇ * 145, 104 * Ⲇ, Ⲇ * 141);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠⲆⵠᐃⵠⵠΔ, Δⵠ[ⵠⵠΔⲆⲆ], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 215, Ⲇ * 146);
		Δ.bezierCurveTo(204 * Ⲇ, Ⲇ * 167, Ⲇ * 204, 167 * Ⲇ, 193 * Ⲇ, 188 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 187, Ⲇ * 201, 191 * Ⲇ, 209 * Ⲇ, Ⲇ * 213, 201 * Ⲇ);
		Δ.bezierCurveTo(247 * Ⲇ, Ⲇ * 192, 253 * Ⲇ, 181 * Ⲇ, Ⲇ * 257, 169 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 260, 157 * Ⲇ, 254 * Ⲇ, Ⲇ * 149, Ⲇ * 243, Ⲇ * 141);
		Δ.closePath();
		ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[8], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 39, Ⲇ * 66);
		Δ.bezierCurveTo(Ⲇ * 57, 107 * Ⲇ, 63 * Ⲇ, Ⲇ * 96, 120 * Ⲇ, 106 * Ⲇ);
		Δ.bezierCurveTo(154 * Ⲇ, 112 * Ⲇ, 163 * Ⲇ, Ⲇ * 116, Ⲇ * 174, Ⲇ * 135);
		Δ.bezierCurveTo(180 * Ⲇ, Ⲇ * 109, Ⲇ * 191, 113 * Ⲇ, 237 * Ⲇ, Ⲇ * 103);
		Δ.bezierCurveTo(276 * Ⲇ, ⵠΔᐃᐃⲆ * Ⲇ, 289 * Ⲇ, Ⲇ * 94, Ⲇ * 301, Ⲇ * 67);
		Δ.bezierCurveTo(Ⲇ * 317, 112 * Ⲇ, Ⲇ * 301, Ⲇ * 141, Ⲇ * 274, 139 * Ⲇ);
		Δ.bezierCurveTo(204 * Ⲇ, Ⲇ * 166, 197 * Ⲇ, 169 * Ⲇ, 173 * Ⲇ, Ⲇ * 183);
		Δ.bezierCurveTo(170 * Ⲇ, 183 * Ⲇ, 170 * Ⲇ, Ⲇ * 183, Ⲇ * 167, Ⲇ * 183);
		Δ.bezierCurveTo(132 * Ⲇ, Ⲇ * 160, Ⲇ * 112, Ⲇ * 156, Ⲇ * 73, 141 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 43, 146 * Ⲇ, 27 * Ⲇ, 120 * Ⲇ, Ⲇ * 39, 66 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[8], ᐃⲆᐃⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(115 * Ⲇ, Ⲇ * 185);
		Δ.bezierCurveTo(Ⲇ * 115, 200 * Ⲇ, Ⲇ * 118, 206 * Ⲇ, Ⲇ * 124, Ⲇ * 212);
		Δ.bezierCurveTo(Ⲇ * 133, 223 * Ⲇ, Ⲇ * 132, 231 * Ⲇ, Ⲇ * 121, 230 * Ⲇ);
		Δ.bezierCurveTo(108 * Ⲇ, Ⲇ * 226, Ⲇ * 108, 215 * Ⲇ, Ⲇ * 107, 209 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 106, 201 * Ⲇ, 110 * Ⲇ, Ⲇ * 196, Ⲇ * 114, Ⲇ * 185);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔΔ], Δⵠ[4], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 226, Ⲇ * 186);
		Δ.bezierCurveTo(Ⲇ * 234, 201 * Ⲇ, Ⲇ * 238, 209 * Ⲇ, Ⲇ * 228, 225 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 223, 233 * Ⲇ, Ⲇ * 213, 233 * Ⲇ, Ⲇ * 211, 226 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 206, Ⲇ * 219, 217 * Ⲇ, 216 * Ⲇ, Ⲇ * 221, Ⲇ * 207);
		Δ.bezierCurveTo(Ⲇ * 225, 196 * Ⲇ, 225 * Ⲇ, Ⲇ * 191, 226 * Ⲇ, 186 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃΔ], Δⵠ[4], Ⲇ * ΔᐃⵠΔⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(172 * Ⲇ, 110 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 189, Ⲇ * 153, 192 * Ⲇ, 160 * Ⲇ, 188 * Ⲇ, 175 * Ⲇ);
		Δ.bezierCurveTo(183 * Ⲇ, 190 * Ⲇ, 176 * Ⲇ, 197 * Ⲇ, 165 * Ⲇ, Ⲇ * 191);
		Δ.bezierCurveTo(Ⲇ * 153, 181 * Ⲇ, 152 * Ⲇ, Ⲇ * 166, Ⲇ * 157, 151 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 164.5, Ⲇ * 131, Ⲇ * 164.5, 131 * Ⲇ, Ⲇ * 172, Ⲇ * 111);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠΔ], Δⵠ[ΔⵠⲆⵠᐃ], Ⲇ * ⵠⵠΔⲆⲆ);
		return ᐃⵠ
	}

	function ᐃⲆⲆᐃⵠⲆⵠΔᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 110 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 110;
		Δ.globalAlpha = .2;
		ⵠΔᐃ(Δ, Ⲇ * 55, 55 * Ⲇ, Ⲇ * 55);
		ⵠᐃ(Δ, Δⵠ[0]);
		return ᐃⵠ
	}

	function ΔⲆᐃᐃΔᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 139 * Ⲇ;
		ᐃⵠ.height = 135 * Ⲇ;
		Δ.translate(0, Ⲇ * 10);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ᐃΔⲆΔ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 32, Ⲇ * 77);
		Δ.bezierCurveTo(6 * Ⲇ, 41 * Ⲇ, Ⲇ * 6, 33 * Ⲇ, Ⲇⵠᐃᐃᐃ * Ⲇ, 27 * Ⲇ);
		Δ.bezierCurveTo(27 * Ⲇ, Ⲇ * ⵠⵠⲆⲆⵠ, Ⲇ * 28, Ⲇ * 6, 37 * Ⲇ, 6 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 62, Ⲇ * ⵠⵠⲆᐃ, Ⲇ * 64, 5 * Ⲇ, Ⲇ * 67, Ⲇ * 13);
		Δ.bezierCurveTo(80 * Ⲇ, 36 * Ⲇ, Ⲇ * 73.5, 25 * Ⲇ, 80 * Ⲇ, 37 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 73.5, Ⲇ * 54, Ⲇ * 65, 74 * Ⲇ, Ⲇ * 67, Ⲇ * 71);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(65 * Ⲇ, Ⲇ * 37);
		Δ.bezierCurveTo(105 * Ⲇ, Ⲇ * 40, 113 * Ⲇ, Ⲇ * 39, Ⲇ * 117, Ⲇ * 48);
		Δ.bezierCurveTo(126 * Ⲇ, 70 * Ⲇ, 128 * Ⲇ, Ⲇ * 72, 124 * Ⲇ, 80 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 112, Ⲇ * 101, Ⲇ * 110, 104 * Ⲇ, 99 * Ⲇ, Ⲇ * 104);
		Δ.bezierCurveTo(59 * Ⲇ, Ⲇ * ⵠⵠΔΔᐃ, 55 * Ⲇ, Ⲇ * 99, Ⲇ * 56, Ⲇ * 99);
		Δ.bezierCurveTo(Ⲇ * 47.5, Ⲇ * 79, 45 * Ⲇ, Ⲇ * 66, 39 * Ⲇ, 59 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(30 * Ⲇ, 63 * Ⲇ);
		Δ.bezierCurveTo(5 * Ⲇ, 99 * Ⲇ, Ⲇ * ⲆⵠⲆΔᐃ, Ⲇ * 101, Ⲇ * ᐃⲆᐃⵠᐃ, 103 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ᐃΔΔⵠΔ, Ⲇ * 123, 22 * Ⲇ, 125 * Ⲇ, Ⲇ * 28, Ⲇ * 126);
		Δ.bezierCurveTo(57 * Ⲇ, Ⲇ * 127, Ⲇ * 55, Ⲇ * 127, 58 * Ⲇ, Ⲇ * 120);
		Δ.bezierCurveTo(Ⲇ * 82, 86 * Ⲇ, Ⲇ * 83, 78 * Ⲇ, Ⲇ * 82, 87 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(ⲆⲆᐃ, -ⵠΔⲆⲆΔ * Ⲇ);
		Δ.globalAlpha = ᐃΔⲆΔ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(32 * Ⲇ, Ⲇ * 77);
		Δ.bezierCurveTo(Ⲇ * 6, 41 * Ⲇ, Ⲇ * ΔⲆⵠΔᐃ, Ⲇ * 33, ᐃⵠᐃⲆⵠ * Ⲇ, Ⲇ * 27);
		Δ.bezierCurveTo(27 * Ⲇ, Ⲇ * ⲆⵠⲆΔⲆ, 28 * Ⲇ, ⵠⵠⲆᐃⲆ * Ⲇ, 37 * Ⲇ, 6 * Ⲇ);
		Δ.bezierCurveTo(62 * Ⲇ, Ⲇ * 3, 64 * Ⲇ, Ⲇ * ⲆⵠⲆΔᐃ, 67 * Ⲇ, 13 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 80, 36 * Ⲇ, Ⲇ * 73.5, 25 * Ⲇ, 80 * Ⲇ, Ⲇ * 37);
		Δ.bezierCurveTo(Ⲇ * 73.5, 54 * Ⲇ, Ⲇ * 65, 74 * Ⲇ, 67 * Ⲇ, 71 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(65 * Ⲇ, 37 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 105, Ⲇ * 40, Ⲇ * 113, 39 * Ⲇ, Ⲇ * 117, 48 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 126, 70 * Ⲇ, 128 * Ⲇ, 72 * Ⲇ, 124 * Ⲇ, Ⲇ * 80);
		Δ.bezierCurveTo(112 * Ⲇ, Ⲇ * 101, Ⲇ * 110, Ⲇ * 104, 99 * Ⲇ, Ⲇ * 104);
		Δ.bezierCurveTo(Ⲇ * 59, 100 * Ⲇ, 55 * Ⲇ, Ⲇ * 99, 56 * Ⲇ, 99 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 47.5, Ⲇ * 79, 45 * Ⲇ, 66 * Ⲇ, Ⲇ * 39, Ⲇ * 59);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 30, 63 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * ⵠᐃⲆᐃ, Ⲇ * 99, Ⲇ * ⵠᐃⵠᐃΔ, 101 * Ⲇ, Ⲇ * ᐃΔᐃⵠⲆ, 103 * Ⲇ);
		Δ.bezierCurveTo(ⵠⲆΔⲆⲆⵠⵠ * Ⲇ, 123 * Ⲇ, 22 * Ⲇ, 125 * Ⲇ, Ⲇ * 28, Ⲇ * 126);
		Δ.bezierCurveTo(Ⲇ * 57, 127 * Ⲇ, 55 * Ⲇ, Ⲇ * 127, 58 * Ⲇ, 120 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 82, Ⲇ * 86, Ⲇ * 83, Ⲇ * 78, 82 * Ⲇ, Ⲇ * 87);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 80, Ⲇ * 38);
		Δ.bezierCurveTo(Ⲇ * 72.5, Ⲇ * 52, 72.5 * Ⲇ, 52 * Ⲇ, Ⲇ * 65, 66 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 47.5, 37 * Ⲇ, 47.5 * Ⲇ, Ⲇ * 37, 30 * Ⲇ, 7 * Ⲇ);
		Δ.bezierCurveTo(48 * Ⲇ, ΔⲆΔⲆ * Ⲇ, Ⲇ * 57, Ⲇ * ΔⲆⲆⲆ, 64 * Ⲇ, 10 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(65 * Ⲇ, 65 * Ⲇ);
		Δ.bezierCurveTo(125 * Ⲇ, 73 * Ⲇ, Ⲇ * 95.5, 69 * Ⲇ, 126 * Ⲇ, 73 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 119, 98 * Ⲇ, 106 * Ⲇ, 104 * Ⲇ, Ⲇ * 98, Ⲇ * 103);
		Δ.bezierCurveTo(Ⲇ * 84.5, Ⲇ * 102, 84.5 * Ⲇ, Ⲇ * 102, 71 * Ⲇ, Ⲇ * 101);
		Δ.bezierCurveTo(Ⲇ * 64, 86 * Ⲇ, Ⲇ * 64, Ⲇ * 86, 57 * Ⲇ, Ⲇ * 70);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(27 * Ⲇ, Ⲇ * 69);
		Δ.bezierCurveTo(64 * Ⲇ, Ⲇ * 65, 46 * Ⲇ, 67 * Ⲇ, 65 * Ⲇ, 65 * Ⲇ);
		Δ.bezierCurveTo(43.5 * Ⲇ, 94 * Ⲇ, 43.5 * Ⲇ, 94 * Ⲇ, Ⲇ * 22, Ⲇ * 123);
		Δ.bezierCurveTo(ᐃᐃᐃⵠᐃ * Ⲇ, Ⲇ * 103, 8 * Ⲇ, Ⲇ * 103, Ⲇ * ⲆΔΔΔΔ, Ⲇ * 103);
		Δ.bezierCurveTo(ⵠᐃⲆᐃ * Ⲇ, Ⲇ * 98, Ⲇ * ᐃⵠΔⲆⲆ, Ⲇ * 89, 26 * Ⲇ, Ⲇ * 70);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 26, 69 * Ⲇ);
		Δ.bezierCurveTo(65 * Ⲇ, Ⲇ * 60, Ⲇ * 45, Ⲇ * 65, 64 * Ⲇ, Ⲇ * 60);
		Δ.bezierCurveTo(63 * Ⲇ, 65 * Ⲇ, 63 * Ⲇ, Ⲇ * 65, Ⲇ * 62, Ⲇ * 70);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 80, 38 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 68, Ⲇ * 70, 75 * Ⲇ, Ⲇ * 53, 70 * Ⲇ, 68 * Ⲇ);
		Δ.bezierCurveTo(65 * Ⲇ, 67 * Ⲇ, 65 * Ⲇ, Ⲇ * 67, Ⲇ * 60, 65 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2]);
		return ᐃⵠ
	}

	function ΔⵠΔⵠⵠᐃⵠᐃⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 85 * Ⲇ;
		ᐃⵠ.height = 145 * Ⲇ;
		Δ.translate(-165 * Ⲇ, -95 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(217 * Ⲇ, Ⲇ * 103);
		Δ.bezierCurveTo(Ⲇ * 209, Ⲇ * 129, Ⲇ * 203, 137 * Ⲇ, 195 * Ⲇ, 146 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 195, Ⲇ * 159, Ⲇ * 194, Ⲇ * 167, Ⲇ * 189, Ⲇ * 178);
		Δ.bezierCurveTo(Ⲇ * 193, Ⲇ * 186, Ⲇ * 196, 195 * Ⲇ, 198 * Ⲇ, Ⲇ * 216);
		Δ.bezierCurveTo(Ⲇ * 217.5, Ⲇ * 189.5, Ⲇ * 217.5, Ⲇ * 189.5, 237 * Ⲇ, Ⲇ * 163);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(231 * Ⲇ, 163 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 221, Ⲇ * 139, Ⲇ * 218, 128 * Ⲇ, Ⲇ * 215, 114 * Ⲇ);
		Δ.bezierCurveTo(213 * Ⲇ, Ⲇ * 102, Ⲇ * 220, Ⲇ * 92, 222 * Ⲇ, 107 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 224, Ⲇ * 118, Ⲇ * 233, Ⲇ * 138, 244 * Ⲇ, Ⲇ * 161);
		Δ.bezierCurveTo(Ⲇ * 235, 188 * Ⲇ, Ⲇ * 224, Ⲇ * 198, Ⲇ * 204, 221 * Ⲇ);
		Δ.bezierCurveTo(190 * Ⲇ, Ⲇ * 233, 190 * Ⲇ, Ⲇ * 235, Ⲇ * 180, 235 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 167, 235 * Ⲇ, 164 * Ⲇ, Ⲇ * 216, 175 * Ⲇ, Ⲇ * 211);
		Δ.bezierCurveTo(Ⲇ * 176, Ⲇ * 208, Ⲇ * 181, 207 * Ⲇ, 191 * Ⲇ, Ⲇ * 205);
		Δ.bezierCurveTo(Ⲇ * 213, 186 * Ⲇ, Ⲇ * 218, Ⲇ * 180, 230 * Ⲇ, 163 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ, Δⵠ, ⵠⲆᐃⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(234 * Ⲇ, 154 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 227, 156 * Ⲇ, Ⲇ * 222, 156 * Ⲇ, Ⲇ * 199, 148 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 201, 151 * Ⲇ, Ⲇ * 216, 159 * Ⲇ, 224 * Ⲇ, Ⲇ * 162);
		Δ.bezierCurveTo(209 * Ⲇ, 169.5 * Ⲇ, 209 * Ⲇ, Ⲇ * 169.5, Ⲇ * 194, Ⲇ * 177);
		Δ.bezierCurveTo(213.5 * Ⲇ, Ⲇ * 175, Ⲇ * 213.5, Ⲇ * 175, 233 * Ⲇ, Ⲇ * 173);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ);
		return ᐃⵠ
	}

	function ΔⵠⵠᐃⵠⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 400 * Ⲇ;
		ᐃⵠ.height = 170 * Ⲇ;
		Δ.translate(0, -170 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(159.5 * Ⲇ, Ⲇ * 322.0625);
		Δ.bezierCurveTo(240.5 * Ⲇ, 293.0625 * Ⲇ, Ⲇ * 240.5, Ⲇ * 293.0625, 321.5 * Ⲇ, Ⲇ * 264.0625);
		Δ.bezierCurveTo(Ⲇ * 276.5, 230.0625 * Ⲇ, 276.5 * Ⲇ, Ⲇ * 230.0625, 231.5 * Ⲇ, 196.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 158.5, Ⲇ * 221.5625, Ⲇ * 158.5, 221.5625 * Ⲇ, 85.5 * Ⲇ, 247.0625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[Δⵠᐃ], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(212.5 * Ⲇ, 270.0625 * Ⲇ);
		Δ.bezierCurveTo(235 * Ⲇ, Ⲇ * 261.5625, Ⲇ * 235, 261.5625 * Ⲇ, Ⲇ * 257.5, Ⲇ * 253.0625);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[0], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(193.5 * Ⲇ, 226.0625 * Ⲇ);
		Δ.bezierCurveTo(204.5 * Ⲇ, 242.0625 * Ⲇ, 242.5 * Ⲇ, Ⲇ * 237.0625, Ⲇ * 251.5, Ⲇ * 225.0625);
		Δ.bezierCurveTo(Ⲇ * 246.5, 195.0625 * Ⲇ, 205.5 * Ⲇ, 190.0625 * Ⲇ, 193.5 * Ⲇ, 227.0625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[3], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(164.5 * Ⲇ, 245.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 182.5, Ⲇ * 264.0625, 252.5 * Ⲇ, Ⲇ * 258.0625, Ⲇ * 276.5, 244.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 265.5, 226.0625 * Ⲇ, Ⲇ * 244.5, 231.0625 * Ⲇ, Ⲇ * 229.5, 230.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 205.5, Ⲇ * 227.0625, Ⲇ * 175.5, Ⲇ * 202.0625, Ⲇ * 162.5, 244.0625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ⵠⲆᐃΔ], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 115.5, 260.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 134.5, 279.0625 * Ⲇ, Ⲇ * 170.5, 275.0625 * Ⲇ, Ⲇ * 191.5, Ⲇ * 257.0625);
		Δ.bezierCurveTo(174.5 * Ⲇ, Ⲇ * 208.0625, Ⲇ * 142.5, 197.0625 * Ⲇ, Ⲇ * 116.5, Ⲇ * 259.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ΔᐃΔⲆ], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 152.5, 278.0625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 165.5, Ⲇ * 294.0625, Ⲇ * 200.5, Ⲇ * 287.0625, Ⲇ * 216.5, Ⲇ * 278.0625);
		Δ.bezierCurveTo(Ⲇ * 206.5, Ⲇ * 247.0625, Ⲇ * 173.5, Ⲇ * 233.0625, 153.5 * Ⲇ, Ⲇ * 276.0625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ⵠᐃᐃⵠ], Ⲇ * 12);
		return ᐃⵠ
	}

	function ⲆΔᐃⲆⵠᐃⲆᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 400;
		ᐃⵠ.height = Ⲇ * 400;
		Δ.save();
		Δ.translate(Ⲇ * 204, Ⲇ * 195.0833282470703);
		Δ.rotate(10.16);
		ᐃΔⵠ(Δ, -97.5 * Ⲇ, Ⲇ * -134.5, 195 * Ⲇ, 269 * Ⲇ, Ⲇ * ⵠᐃⲆⲆΔ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ], Δⵠ[ᐃⵠⵠⵠ], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 58.5, 226.5833282470703 * Ⲇ);
		Δ.bezierCurveTo(120.5 * Ⲇ, 281.5833282470703 * Ⲇ, Ⲇ * 120.5, 281.5833282470703 * Ⲇ, 182.5 * Ⲇ, Ⲇ * 336.5833282470703);
		Δ.bezierCurveTo(263 * Ⲇ, 248.5833282470703 * Ⲇ, 263 * Ⲇ, Ⲇ * 248.5833282470703, 343.5 * Ⲇ, 160.5833282470703 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 280.5, 104.58332824707031 * Ⲇ, 280.5 * Ⲇ, Ⲇ * 104.58332824707031, 217.5 * Ⲇ, Ⲇ * 48.58332824707031);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ᐃΔᐃΔ], Ⲇ * ᐃΔΔΔⲆ);
		Δ.save();
		Δ.translate(197 * Ⲇ, Ⲇ * 169.0833282470703);
		Δ.rotate(10.16);
		ᐃΔⵠ(Δ, Ⲇ * -93.5, -126.5 * Ⲇ, 187 * Ⲇ, Ⲇ * 253, Ⲇ * 10);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⵠΔ], Δⵠ[1], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(226.5 * Ⲇ, 24.583328247070312 * Ⲇ);
		Δ.bezierCurveTo(58.5 * Ⲇ, 207.5833282470703 * Ⲇ, 143 * Ⲇ, Ⲇ * 116.58332824707031, 59.5 * Ⲇ, Ⲇ * 208.5833282470703);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃΔᐃⲆⵠ, Δⵠ[1], ΔᐃⵠΔⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 46.133331298828125, Ⲇ * 202.64999389648438);
		Δ.bezierCurveTo(46.133331298828125 * Ⲇ, 215.64999389648438 * Ⲇ, Ⲇ * 46.133331298828125, 215.64999389648438 * Ⲇ, 46.133331298828125 * Ⲇ, Ⲇ * 228.64999389648438);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⵠⲆⵠⲆ], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(55.133331298828125 * Ⲇ, 211.64999389648438 * Ⲇ);
		Δ.bezierCurveTo(55.133331298828125 * Ⲇ, Ⲇ * 225.14999389648438, Ⲇ * 55.133331298828125, Ⲇ * 225.14999389648438, Ⲇ * 55.133331298828125, Ⲇ * 238.64999389648438);
		Δ.bezierCurveTo(Ⲇ * 50.133331298828125, Ⲇ * 235.64999389648438, 50.133331298828125 * Ⲇ, 235.64999389648438 * Ⲇ, 45.133331298828125 * Ⲇ, 232.64999389648438 * Ⲇ);
		Δ.bezierCurveTo(45.133331298828125 * Ⲇ, Ⲇ * 216.64999389648438, 45.133331298828125 * Ⲇ, 216.64999389648438 * Ⲇ, 45.133331298828125 * Ⲇ, Ⲇ * 200.64999389648438);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⲆⲆΔⵠ], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(46.133331298828125 * Ⲇ, 198.39999389648438 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 46.133331298828125, 199.89999389648438 * Ⲇ, 46.133331298828125 * Ⲇ, Ⲇ * 199.89999389648438, Ⲇ * 46.133331298828125, 201.39999389648438 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔᐃⲆ], Δⵠ[ᐃⵠᐃᐃ], 8 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 249.63333129882812, 120.89999389648438 * Ⲇ);
		Δ.rotate(7.04);
		ᐃΔⵠ(Δ, -58.5 * Ⲇ, Ⲇ * -32, 117 * Ⲇ, Ⲇ * 64, ⲆΔᐃⵠΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆᐃᐃ]);
		return ᐃⵠ
	}

	function ⵠΔⵠⵠⲆⵠᐃ() {
		var ⵠΔΔⵠⲆⲆᐃⲆⲆ = (new Date).getTime();
		ΔⵠⲆΔΔΔⲆⲆⲆ();

		function ⲆᐃⵠΔ(ⵠᐃΔⲆⵠ) {
			var Δᐃⵠⵠ = ⲆⲆᐃ;
			for (var ᐃⲆ = 0, ⲆⲆⲆⵠ = 0; ᐃⲆ < ⵠᐃΔⲆⵠ.length; ᐃⲆ++) {
				var ⵠⵠᐃΔ = ⵠᐃΔⲆⵠ.charAt(ᐃⲆ);
				if ("_" === ⵠⵠᐃΔ || 5 === ᐃⲆ) continue;
				if ("1" === ⵠⵠᐃΔ) Δᐃⵠⵠ += Math.pow(ⵠⲆΔᐃ, ⲆⲆⲆⵠ);
				ⲆⲆⲆⵠ++
			}
			return Δᐃⵠⵠ
		}
		ᐃᐃ[ⵠ.ⲆⵠⲆⲆᐃⲆΔ] = [Δᐃ.ΔⵠΔᐃⲆⲆⵠ, Δᐃ.ⲆⵠⵠⲆΔΔᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ] = [];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[360])] = [Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ΔΔΔⵠⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[267])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[360])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[415])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[360])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[327])] = [Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[481])] = [Δᐃ.ⵠΔΔⲆΔΔΔ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[137])] = [Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ΔΔΔⵠⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[397])] = [Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.ⵠⲆΔΔΔᐃΔ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[110])] = [Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ΔᐃᐃᐃΔⵠⵠ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.ⵠⲆΔΔΔᐃΔ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[176])] = [Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[408])] = [Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠΔΔⲆΔΔΔ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[128])] = [Δᐃ.ΔΔΔⵠⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[374])] = [Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[488])] = [Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ᐃⲆⲆᐃⵠ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[131])] = [Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])] = [Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[ⵠΔⲆᐃΔ])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[161])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[282])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[386])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[402])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[353])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[241])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[215])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[200])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[60])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[72])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[201])] = [Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ᐃⲆⲆᐃⵠ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[334])] = [Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[455])] = [Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠΔΔⲆΔΔΔ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[383])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[334])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[258])] = [Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[508])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[258])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[578])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[258])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[46])] = [Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⵠΔΔⲆΔΔΔ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[239])] = [Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⲆᐃⵠⵠΔᐃ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.Ⲇⵠⵠᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[16])] = [Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.Ⲇⵠⵠᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[148])] = [Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.Ⲇⵠⵠᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[504])] = [Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⲆᐃⵠⵠΔᐃ, Δᐃ.ᐃⲆⲆⵠⵠΔΔ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[254])] = [Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ᐃⲆⲆⵠⵠΔΔ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[532])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[254])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[61])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[254])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[74])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[254])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[268])] = [Δᐃ.Ⲇⵠⵠᐃᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ, Δᐃ.ᐃⲆⲆⵠⵠΔΔ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔᐃΔⵠΔⵠᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[262])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[268])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[560])] = [Δᐃ.ⵠⲆᐃⵠⵠΔᐃ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ᐃⲆⲆⵠⵠΔΔ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[461])] = [Δᐃ.ΔᐃΔⵠΔⵠᐃ, Δᐃ.ⲆᐃⵠⲆⲆ, Δᐃ.ΔⵠⲆΔⵠ, Δᐃ.ⵠΔΔⲆΔΔΔ, Δᐃ.ⵠⲆⲆⵠⲆ, Δᐃ.ⵠⵠΔᐃⵠ, Δᐃ.ΔΔᐃⵠⵠ, Δᐃ.ᐃⲆⲆⵠⲆⲆΔ, Δᐃ.ⵠⲆⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃⲆⵠᐃ, Δᐃ.ᐃⵠᐃΔⲆΔⵠ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ, Δᐃ.ⲆΔΔⲆΔⵠⲆ, Δᐃ.ⵠⵠᐃⲆⵠ, Δᐃ.ΔⲆⲆⵠΔⵠΔ, Δᐃ.ⵠⲆⵠⵠΔΔⵠ, Δᐃ.ΔΔΔⵠⲆ, Δᐃ.ΔΔΔⵠⵠ, Δᐃ.ⵠΔⲆᐃΔⵠᐃ, Δᐃ.ᐃᐃⲆⲆΔΔᐃ, Δᐃ.ⲆᐃΔⵠΔⵠⲆ, Δᐃ.ⵠⵠⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃⵠ, Δᐃ.Ⲇⵠⵠᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[283])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[268])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[360])] = [Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃᐃΔᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[267])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[360])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[415])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[360])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[327])] = [Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[481])] = [Δᐃ.ⲆᐃᐃⵠΔᐃᐃ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.Ⲇᐃⵠᐃⵠ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[137])] = [Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ᐃᐃΔᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[397])] = [Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ΔⵠᐃᐃⵠⵠΔ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[110])] = [Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⵠⵠⲆᐃⲆΔΔ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ΔⵠᐃᐃⵠⵠΔ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[176])] = [Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[408])] = [Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⲆᐃᐃⵠΔᐃᐃ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[128])] = [Δᐃ.ᐃᐃΔᐃᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[374])] = [Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[488])] = [Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[131])] = [Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])] = [Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[18])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[161])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[282])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[386])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[402])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[353])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[241])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[215])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[200])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[60])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[72])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[201])] = [Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[334])] = [Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[455])] = [Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⲆᐃᐃⵠΔᐃᐃ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[383])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[334])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[258])] = [Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[508])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[258])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[578])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[258])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[46])] = [Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⲆᐃᐃⵠΔᐃᐃ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[239])] = [Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ΔⲆⵠⵠⵠΔⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[ⲆⵠΔᐃΔ])] = [Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ⲆⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[148])] = [Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ⲆⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[504])] = [Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ΔⲆⵠⵠⵠΔⲆ, Δᐃ.ΔⲆⲆⵠⵠΔⵠ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[254])] = [Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ, Δᐃ.ΔⲆⲆⵠⵠΔⵠ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[532])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[254])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[61])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[254])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[74])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[254])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[268])] = [Δᐃ.ⲆⲆΔⲆⲆ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ, Δᐃ.ΔⲆⲆⵠⵠΔⵠ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⵠⵠⵠΔⲆᐃⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[262])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[268])];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[560])] = [Δᐃ.ΔⲆⵠⵠⵠΔⲆ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ΔⲆⲆⵠⵠΔⵠ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[461])] = [Δᐃ.ⵠⵠⵠΔⲆᐃⲆ, Δᐃ.ⵠⵠⵠⵠⲆ, Δᐃ.ⲆⵠⲆⲆⲆ, Δᐃ.ⲆᐃᐃⵠΔᐃᐃ, Δᐃ.ⵠᐃᐃⵠΔ, Δᐃ.ⵠⲆΔⲆⵠ, Δᐃ.ᐃⲆᐃᐃⵠ, Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ, Δᐃ.ΔⲆΔⲆΔΔΔ, Δᐃ.ⲆΔᐃΔⲆ, Δᐃ.ⵠⵠⵠⵠⲆⵠΔ, Δᐃ.ᐃⵠⵠᐃⲆΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆⲆΔ, Δᐃ.ⲆⵠΔⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ, Δᐃ.ᐃⵠᐃⵠⲆⵠⵠ, Δᐃ.ᐃᐃΔᐃᐃ, Δᐃ.Δᐃⵠᐃⵠ, Δᐃ.ᐃΔⲆⵠⲆᐃΔ, Δᐃ.ⲆⲆᐃΔΔᐃᐃ, Δᐃ.ᐃᐃΔΔΔⲆⲆ, Δᐃ.Ⲇᐃⵠᐃⵠ, Δᐃ.ΔⵠΔⵠᐃ, Δᐃ.ⲆⲆΔⲆⲆ];
		ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[283])] = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[268])];
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[360])] = Δᐃ.ᐃⲆⲆΔᐃΔⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[267])] = Δᐃ.ᐃᐃΔⵠⲆΔⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[415])] = Δᐃ.ⲆⵠΔᐃᐃⲆⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[327])] = Δᐃ.ᐃΔⲆᐃᐃⲆⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[481])] = Δᐃ.ⲆᐃⲆⵠⲆΔΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[137])] = Δᐃ.ᐃᐃⵠⵠΔΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[397])] = Δᐃ.ⲆⲆΔⵠΔⲆⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[110])] = Δᐃ.ΔⵠⲆΔΔⵠΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[176])] = Δᐃ.ΔΔⵠΔΔⵠΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[72])] = Δᐃ.ⲆᐃᐃᐃⲆⵠᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[282])] = Δᐃ.ⲆᐃⵠᐃᐃᐃⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[60])] = Δᐃ.ⵠΔΔⵠⵠⲆⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[408])] = Δᐃ.ⲆⲆⵠⵠⲆⵠᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[128])] = Δᐃ.ⵠⵠⲆᐃΔᐃᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[374])] = Δᐃ.ⲆᐃⵠΔⲆᐃⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[488])] = Δᐃ.ᐃⵠΔⵠΔᐃᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[ᐃΔⵠⲆⲆⲆⲆ])] = Δᐃ.ⵠΔΔΔᐃᐃⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[161])] = Δᐃ.ⵠΔⲆᐃᐃⲆΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[131])] = Δᐃ.ⵠⲆᐃΔⵠΔⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[386])] = Δᐃ.ᐃⵠΔᐃⲆⵠΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[130])] = Δᐃ.ⵠⵠΔⵠⵠΔⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[402])] = Δᐃ.ⵠⲆᐃΔⵠᐃᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[353])] = Δᐃ.ᐃᐃⵠᐃⵠⲆΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[241])] = Δᐃ.ⲆⵠᐃΔⵠⲆⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[215])] = Δᐃ.ⵠᐃΔΔΔᐃⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[200])] = Δᐃ.ⵠᐃᐃᐃⵠᐃΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[201])] = Δᐃ.ⲆᐃΔΔΔΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[334])] = Δᐃ.ⵠⲆⲆⲆⲆᐃΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[455])] = Δᐃ.ᐃⲆⵠᐃΔᐃΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[383])] = Δᐃ.ᐃΔⵠᐃΔⵠᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[258])] = Δᐃ.ΔΔⵠⵠⵠⲆΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[508])] = Δᐃ.ⲆᐃᐃⵠⵠⵠⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[578])] = Δᐃ.ⵠⵠᐃⵠᐃⵠΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[46])] = Δᐃ.ⵠⲆᐃᐃⲆⵠⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[239])] = Δᐃ.ⵠⵠᐃⵠⲆΔⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[ΔᐃⵠⵠⲆᐃΔ])] = Δᐃ.ᐃⲆΔΔᐃΔⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[148])] = Δᐃ.ⵠⲆⲆⵠᐃΔⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[504])] = Δᐃ.ΔⲆⲆΔᐃⲆⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[74])] = Δᐃ.ΔΔⲆⵠⲆΔⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[61])] = Δᐃ.ΔᐃΔΔᐃⵠΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[254])] = Δᐃ.ᐃⲆⲆᐃⵠⵠΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[532])] = Δᐃ.ᐃⲆΔᐃⲆᐃⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[262])] = Δᐃ.ΔΔⵠᐃᐃΔⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[268])] = Δᐃ.ᐃᐃⵠᐃᐃΔⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[262])] = Δᐃ.ΔΔⵠᐃᐃΔⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[560])] = Δᐃ.ᐃⵠⲆᐃⵠᐃⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[461])] = Δᐃ.ⵠⵠⲆⲆⵠᐃΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ⵠⲆⵠ][ⲆᐃⵠΔ(ᐃ[283])] = Δᐃ.ⲆⲆⲆⵠⲆⵠᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[360])] = Δᐃ.ΔⲆΔⲆᐃⵠᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[267])] = Δᐃ.ⵠⵠᐃⵠᐃᐃᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[415])] = Δᐃ.ⲆⵠᐃᐃⵠΔΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[327])] = Δᐃ.ΔⲆⲆⲆᐃⵠⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[481])] = Δᐃ.ᐃⵠⵠΔⲆⵠⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[137])] = Δᐃ.ⵠⵠⵠⵠⲆᐃⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[397])] = Δᐃ.ⲆⵠⲆᐃⵠⲆⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[110])] = Δᐃ.ⲆΔⲆⲆΔⲆⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[176])] = Δᐃ.ⵠⲆᐃⲆⲆⲆⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[72])] = Δᐃ.ΔⵠⵠΔΔΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[282])] = Δᐃ.ᐃⲆΔⵠⵠⲆⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[60])] = Δᐃ.ᐃΔΔΔⲆⵠⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[408])] = Δᐃ.ᐃᐃⲆΔΔⵠⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[128])] = Δᐃ.ⲆⲆⲆᐃΔᐃⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[374])] = Δᐃ.ᐃⲆᐃⲆⲆᐃΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[488])] = Δᐃ.ΔΔⲆᐃⵠΔΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[ⵠⲆΔⵠᐃᐃⲆ])] = Δᐃ.Ⲇᐃᐃᐃᐃⵠⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[161])] = Δᐃ.ΔᐃⲆᐃΔᐃΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[131])] = Δᐃ.ⲆⵠⲆⵠᐃΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[386])] = Δᐃ.ᐃⵠⲆΔⲆⲆΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[130])] = Δᐃ.ΔⵠⲆⵠⵠⲆⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[402])] = Δᐃ.ⲆⲆᐃⲆⲆⲆⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[353])] = Δᐃ.ⵠⵠᐃⵠⲆⲆᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[241])] = Δᐃ.ⲆᐃⵠΔΔΔΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[215])] = Δᐃ.ᐃᐃΔΔΔⲆΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[200])] = Δᐃ.ΔΔΔⲆⵠⵠⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[201])] = Δᐃ.ⲆΔΔⲆⲆΔⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[334])] = Δᐃ.ⲆⲆⲆᐃⲆⵠΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[455])] = Δᐃ.ΔⵠⲆⵠΔᐃΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[383])] = Δᐃ.ⵠⵠⵠⲆⵠⵠΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[258])] = Δᐃ.ΔΔⵠΔⵠⵠⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[508])] = Δᐃ.ⲆⲆⲆᐃᐃⵠΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[578])] = Δᐃ.ΔᐃᐃᐃⲆⵠΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[46])] = Δᐃ.ᐃΔΔΔⲆⲆΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[239])] = Δᐃ.ΔΔΔΔΔⵠⵠ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[ⲆⵠΔᐃΔ])] = Δᐃ.ⲆⵠΔⵠⲆΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[148])] = Δᐃ.ⲆⵠⵠⲆⲆΔΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[504])] = Δᐃ.ΔΔΔⲆᐃⲆⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[74])] = Δᐃ.ΔΔΔΔᐃⲆⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[61])] = Δᐃ.ΔⵠΔΔⵠΔΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[254])] = Δᐃ.ΔⲆᐃᐃΔⵠΔ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[532])] = Δᐃ.ᐃⵠΔⲆⲆΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[262])] = Δᐃ.ΔⵠΔⲆᐃΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[268])] = Δᐃ.ⵠⵠⲆⵠⲆⲆⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[262])] = Δᐃ.ΔⵠΔⲆᐃΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[560])] = Δᐃ.ⵠΔⲆⲆᐃᐃᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[461])] = Δᐃ.ⵠΔⵠⵠⵠΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠ][ⵠ.ᐃⵠΔ][ⲆᐃⵠΔ(ᐃ[283])] = Δᐃ.ᐃᐃΔⵠᐃⲆΔ;
		ᐃᐃ[ⵠ.ᐃⲆΔⵠᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⲆΔⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔΔⵠΔⵠⲆᐃ;
		ᐃᐃ[ⵠ.ᐃⲆΔⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⲆⵠⵠΔⲆᐃ;
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆⲆ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⵠΔⵠΔⲆⵠ;
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆΔΔⲆᐃᐃ;
		ᐃᐃ[ⵠ.ΔΔⲆᐃΔᐃⵠ] = [];
		ᐃᐃ[ⵠ.ΔΔⲆᐃΔᐃⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⵠⵠᐃⲆΔΔ;
		ᐃᐃ[ⵠ.ΔΔⲆᐃΔᐃⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃⵠΔΔᐃⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔᐃΔΔΔⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔΔΔⲆᐃᐃ;
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⵠⵠⵠ] = [];
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⵠⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃΔΔΔⵠᐃ;
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⵠⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⲆᐃⵠⵠⵠⵠ;
		ᐃᐃ[ⵠ.ⲆⵠΔᐃᐃᐃΔ] = [];
		ᐃᐃ[ⵠ.ⲆⵠΔᐃᐃᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⵠⵠⲆᐃᐃΔ;
		ᐃᐃ[ⵠ.ⲆⵠΔᐃᐃᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠΔⲆΔΔⵠⲆ;
		ᐃᐃ[ⵠ.ΔⲆⵠⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆⵠⵠΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⵠⵠΔΔᐃΔ;
		ᐃᐃ[ⵠ.ΔⲆⵠⵠΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆⵠⲆⵠΔⲆ;
		ᐃᐃ[ⵠ.ⵠⲆΔᐃΔᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⵠⲆΔᐃΔᐃⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⵠⵠᐃⵠⲆΔ;
		ᐃᐃ[ⵠ.ⵠⲆΔᐃΔᐃⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⵠΔΔᐃⵠⵠ;
		ᐃᐃ[ⵠ.ΔΔᐃΔⵠᐃᐃ] = [];
		ᐃᐃ[ⵠ.ΔΔᐃΔⵠᐃᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⵠⵠⵠΔᐃΔ;
		ᐃᐃ[ⵠ.ΔΔᐃΔⵠᐃᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔⲆΔᐃᐃᐃ;
		ᐃᐃ[ⵠ.ᐃⲆΔⵠΔᐃᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⲆΔⵠΔᐃᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⲆⲆᐃΔΔⵠ;
		ᐃᐃ[ⵠ.ᐃⲆΔⵠΔᐃᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⵠᐃΔⲆΔᐃ;
		ᐃᐃ[ⵠ.ⲆⵠΔᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⵠΔᐃⵠ][ⵠ.ⵠⲆⵠ] = [Δᐃ.ΔⵠⲆΔⵠⵠⵠ];
		ᐃᐃ[ⵠ.ⲆⵠΔᐃⵠ][ⵠ.ᐃⵠΔ] = [Δᐃ.ΔᐃᐃⲆⵠΔⲆ];
		ᐃᐃ[ⵠ.ΔΔⵠᐃΔ] = [], ᐃᐃ[ⵠ.ΔΔⵠᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⵠᐃⵠⲆᐃⵠ;
		ᐃᐃ[ⵠ.ΔΔⵠᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠᐃᐃᐃΔᐃ;
		ᐃᐃ[ⵠ.ⲆⲆΔᐃΔ] = [], ᐃᐃ[ⵠ.ⲆⲆΔᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠᐃⵠⲆᐃ;
		ᐃᐃ[ⵠ.ⲆⲆΔᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠᐃΔΔⲆⵠⵠ;
		ᐃᐃ[ⵠ.ᐃᐃΔΔⲆ] = [];
		ᐃᐃ[ⵠ.ᐃᐃΔΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠΔΔⲆⲆ;
		ᐃᐃ[ⵠ.ᐃᐃΔΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃᐃⵠΔⲆᐃⵠ;
		ᐃᐃ[ⵠ.ⵠΔΔᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⵠΔΔᐃⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔΔⵠⵠΔᐃᐃ;
		ᐃᐃ[ⵠ.ⵠΔΔᐃⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆᐃΔᐃΔΔΔ;
		ᐃᐃ[ⵠ.ᐃⵠⲆⵠⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⲆⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔᐃᐃⲆⵠΔ;
		ᐃᐃ[ⵠ.ᐃⵠⲆⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔⵠΔⵠⲆΔ;
		ᐃᐃ[ⵠ.ⲆΔⵠΔⲆ] = [];
		ᐃᐃ[ⵠ.ⲆΔⵠΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⲆⵠⲆⵠⲆⵠ;
		ᐃᐃ[ⵠ.ⲆΔⵠΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃⵠⲆΔᐃᐃ;
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔᐃⲆⵠᐃⵠ;
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆᐃⲆΔᐃΔⵠ;
		ᐃᐃ[ⵠ.Ⲇᐃⵠᐃᐃ] = [];
		ᐃᐃ[ⵠ.Ⲇᐃⵠᐃᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃⲆⵠᐃᐃΔ;
		ᐃᐃ[ⵠ.Ⲇᐃⵠᐃᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔΔⲆⲆΔᐃ;
		ᐃᐃ[ⵠ.ΔⲆᐃⲆΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆᐃⲆΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔΔᐃΔΔⲆⲆ;
		ᐃᐃ[ⵠ.ΔⲆᐃⲆΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⲆᐃᐃΔⲆᐃ;
		ᐃᐃ[ⵠ.ⵠⲆΔⲆᐃΔᐃ] = [];
		ᐃᐃ[ⵠ.ⵠⲆΔⲆᐃΔᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⵠᐃⵠᐃᐃⵠ;
		ᐃᐃ[ⵠ.ⵠⲆΔⲆᐃΔᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠᐃΔΔᐃΔΔ;
		ᐃᐃ[ⵠ.ΔⵠⲆⲆⵠΔⵠ] = [];
		ᐃᐃ[ⵠ.ΔⵠⲆⲆⵠΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔᐃᐃᐃⲆᐃⵠ;
		ᐃᐃ[ⵠ.ΔⵠⲆⲆⵠΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔΔᐃᐃⲆⲆ;
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃΔ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆᐃΔⵠⵠⲆⲆ;
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃᐃΔⵠΔⵠΔ;
		ᐃᐃ[ⵠ.ⲆⵠΔᐃΔᐃΔ] = Δᐃ.ⲆⵠΔᐃΔᐃΔ;
		ᐃᐃ[ⵠ.ⵠΔΔΔᐃᐃᐃ] = Δᐃ.ⵠΔΔΔᐃᐃᐃ;
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠᐃⲆⲆⵠⲆᐃ);
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⲆΔⲆⲆᐃⲆᐃ);
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ΔⲆⵠⲆΔⵠΔ);
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠⵠΔΔⲆⲆⵠ);
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ΔᐃΔⵠΔⵠⲆ);
		ᐃᐃ[ⵠ.ⲆⲆΔΔⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ᐃⲆᐃᐃⵠⵠⲆ);
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔ] = [];
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠᐃⵠΔⵠΔΔ);
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠΔⲆᐃⲆᐃⵠ);
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ΔΔᐃⵠⵠⵠⲆ);
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ΔᐃᐃⲆΔΔⵠ);
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠⵠⲆᐃⲆΔⲆ);
		ᐃᐃ[ⵠ.ΔᐃⲆⲆΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ΔⵠᐃⵠⲆΔᐃ);
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃⵠΔΔⲆΔⵠ);
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⲆⲆⵠᐃᐃⲆᐃ);
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ΔΔΔⵠⵠⲆⲆ);
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃⵠᐃⵠᐃᐃᐃ);
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃΔⵠᐃⲆΔᐃ);
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ᐃⵠⵠΔⵠⵠⵠ);
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ΔΔᐃⲆΔΔᐃ);
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ΔⵠΔΔⵠⵠⲆ);
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ᐃⲆⲆⵠᐃΔⲆ);
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ᐃⵠⵠⲆᐃⲆⲆ);
		ᐃᐃ[ⵠ.ΔᐃᐃᐃΔ] = [];
		ᐃᐃ[ⵠ.ΔᐃᐃᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⵠᐃⲆⲆΔΔ;
		ᐃᐃ[ⵠ.ΔᐃᐃᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠΔᐃⲆⲆΔⵠ;
		ᐃᐃ[ⵠ.ⲆᐃⵠⵠΔᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⲆᐃⵠⵠΔᐃⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔⵠΔⵠΔᐃ;
		ᐃᐃ[ⵠ.ⲆᐃⵠⵠΔᐃⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔΔᐃⲆᐃᐃᐃ;
		ᐃᐃ[ⵠ.ⲆⲆᐃⲆⵠⲆΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆᐃⲆⵠⲆΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆᐃᐃⲆᐃⵠⲆ;
		ᐃᐃ[ⵠ.ⲆⲆᐃⲆⵠⲆΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⲆᐃⲆᐃⲆⵠ;
		ᐃᐃ[ⵠ.ΔᐃⵠⲆⵠΔⵠ] = Δᐃ.ΔᐃⵠⲆⵠΔⵠ;
		ᐃᐃ[ⵠ.ΔᐃⲆᐃΔⵠᐃ] = Δᐃ.ΔᐃⲆᐃΔⵠᐃ;
		ᐃᐃ[ⵠ.ⵠΔΔⵠⵠⵠᐃ] = Δᐃ.ⵠΔΔⵠⵠⵠᐃ;
		ᐃᐃ[ⵠ.ⵠΔᐃΔⵠ] = [];
		ᐃᐃ[ⵠ.ⵠΔᐃΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⲆⵠⵠⵠᐃⲆ;
		ᐃᐃ[ⵠ.ⵠΔᐃΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠΔⵠΔⲆⲆᐃ;
		ᐃᐃ[ⵠ.ⵠⲆΔⵠⲆ] = [];
		ᐃᐃ[ⵠ.ⵠⲆΔⵠⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔᐃⵠᐃⵠⲆ;
		ᐃᐃ[ⵠ.ⵠⲆΔⵠⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠᐃΔⲆᐃⲆⵠ;
		ᐃᐃ[ⵠ.ΔᐃΔᐃⲆ] = [];
		ᐃᐃ[ⵠ.ΔᐃΔᐃⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠᐃᐃΔᐃᐃᐃ;
		ᐃᐃ[ⵠ.ΔᐃΔᐃⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆΔᐃᐃᐃⲆ;
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆᐃⵠⲆ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆᐃⵠⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔᐃⵠᐃⵠⲆ;
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆᐃⵠⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠᐃΔⲆᐃⲆⵠ;
		ᐃᐃ[ⵠ.ᐃⵠⵠⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⵠⵠΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔⵠᐃⲆᐃⵠ;
		ᐃᐃ[ⵠ.ᐃⵠⵠⵠΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⵠᐃⵠΔⵠΔ;
		ᐃᐃ[ⵠ.ΔΔᐃᐃⲆ] = [];
		ᐃᐃ[ⵠ.ΔΔᐃᐃⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔᐃᐃⲆΔᐃⲆ;
		ᐃᐃ[ⵠ.ΔΔᐃᐃⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠΔⲆⲆⲆⵠⵠ;
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃⲆ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔⵠⲆΔᐃⵠ;
		ᐃᐃ[ⵠ.ᐃᐃⵠᐃⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⲆᐃⲆΔⵠᐃ;
		ᐃᐃ[ⵠ.ΔᐃΔⲆⲆ] = [];
		ᐃᐃ[ⵠ.ΔᐃΔⲆⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠΔⲆᐃⵠ;
		ᐃᐃ[ⵠ.ΔᐃΔⲆⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠΔΔⲆⵠᐃ;
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠᐃⲆᐃⵠⲆⲆ;
		ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃᐃⵠΔΔΔΔ;
		ᐃᐃ[ⵠ.ⲆᐃᐃⲆⲆ] = [];
		ᐃᐃ[ⵠ.ⲆᐃᐃⲆⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⲆΔⵠΔⵠᐃ;
		ᐃᐃ[ⵠ.ⲆᐃᐃⲆⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⵠΔⵠⲆⲆᐃ;
		ᐃᐃ[ⵠ.ᐃΔΔⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔΔⲆⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔᐃΔⲆⵠΔ;
		ᐃᐃ[ⵠ.ᐃΔΔⲆⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠᐃⵠΔⲆⲆᐃ;
		ᐃᐃ[ⵠ.ⲆᐃⵠΔⵠ] = [];
		ᐃᐃ[ⵠ.ⲆᐃⵠΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔΔᐃᐃᐃᐃ;
		ᐃᐃ[ⵠ.ⲆᐃⵠΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠᐃΔᐃᐃᐃⵠ;
		ᐃᐃ[ⵠ.ΔᐃΔΔⲆ] = [];
		ᐃᐃ[ⵠ.ΔᐃΔΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⵠⲆΔΔᐃⵠ;
		ᐃᐃ[ⵠ.ΔᐃΔΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃᐃⵠΔΔⵠ;
		ᐃᐃ[ⵠ.ⵠΔΔΔⲆ] = [];
		ᐃᐃ[ⵠ.ⵠΔΔΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔⲆⲆΔⲆᐃ;
		ᐃᐃ[ⵠ.ⵠΔΔΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔᐃⵠⵠᐃᐃ;
		ᐃᐃ[ⵠ.ΔⲆΔΔΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆΔΔΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⵠΔᐃΔᐃΔ;
		ᐃᐃ[ⵠ.ΔⲆΔΔΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⲆΔⵠⵠΔᐃ;
		ᐃᐃ[ⵠ.ᐃΔⵠᐃΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔΔΔⲆΔᐃ;
		ᐃᐃ[ⵠ.ᐃΔⵠᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆᐃΔΔᐃⲆᐃ;
		ᐃᐃ[ⵠ.ᐃⲆΔΔΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆΔΔΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠΔᐃⵠⵠ;
		ᐃᐃ[ⵠ.ᐃⲆΔΔΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠᐃΔᐃΔΔ;
		ᐃᐃ[ⵠ.ᐃΔᐃΔᐃ] = [];
		ᐃᐃ[ⵠ.ᐃΔᐃΔᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠᐃΔᐃⵠⲆⲆ;
		ᐃᐃ[ⵠ.ᐃΔᐃΔᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠΔΔⲆⵠΔΔ;
		ᐃᐃ[ⵠ.ⲆⵠⵠⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆⵠⵠⵠΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⲆⵠΔᐃⵠⲆᐃⲆ;
		ᐃᐃ[ⵠ.ⲆⵠⵠⵠΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⵠⲆⲆⲆᐃΔΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔΔᐃΔ] = [];
		ᐃᐃ[ⵠ.ⵠΔΔᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⲆⵠⵠⲆΔⲆΔⵠ;
		ᐃᐃ[ⵠ.ⵠΔΔᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠΔⲆⲆᐃⵠᐃⵠⵠ;
		ᐃᐃ[ⵠ.ⲆΔⲆⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⲆΔⲆⲆᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⲆΔᐃᐃΔᐃΔᐃ;
		ᐃᐃ[ⵠ.ⲆΔⲆⲆᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆᐃΔⵠⲆⲆⵠⲆ;
		ᐃᐃ[ⵠ.ⵠΔΔΔΔ] = [];
		ᐃᐃ[ⵠ.ⵠΔΔΔΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⵠΔⵠⵠⲆⵠⵠⵠ;
		ᐃᐃ[ⵠ.ⵠΔΔΔΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃᐃⲆⲆⵠⲆᐃΔⲆ;
		ᐃᐃ[ⵠ.ⲆᐃⵠΔᐃ] = [];
		ᐃᐃ[ⵠ.ⲆᐃⵠΔᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⵠⲆᐃΔᐃΔⵠⲆ;
		ᐃᐃ[ⵠ.ⲆᐃⵠΔᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃΔᐃΔⵠᐃᐃⲆᐃ;
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔΔⲆΔᐃⲆΔⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⲆᐃᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⵠⲆⵠⲆᐃⲆⲆᐃ;
		ᐃᐃ[ⵠ.ⲆΔᐃⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔᐃⲆⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔΔⲆⲆⲆⵠⵠ;
		ᐃᐃ[ⵠ.ⲆΔᐃⲆⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃᐃⲆΔᐃΔ;
		ᐃᐃ[ⵠ.ⵠᐃⲆⵠⵠ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⲆⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠᐃΔΔΔᐃⲆ;
		ᐃᐃ[ⵠ.ⵠᐃⲆⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔⵠᐃᐃΔᐃ;
		ᐃᐃ[ⵠ.ᐃⲆᐃΔⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⲆᐃΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆᐃⲆΔΔΔᐃ;
		ᐃᐃ[ⵠ.ᐃⲆᐃΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃᐃⲆᐃⲆΔ;
		ᐃᐃ[ⵠ.ΔⵠⵠⲆⲆ] = [];
		ᐃᐃ[ⵠ.ΔⵠⵠⲆⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⲆⲆΔᐃᐃᐃ;
		ᐃᐃ[ⵠ.ΔⵠⵠⲆⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠΔᐃⲆⲆᐃ;
		ᐃᐃ[ⵠ.ΔⵠΔΔⵠ] = [];
		ᐃᐃ[ⵠ.ΔⵠΔΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔᐃⲆᐃΔΔⲆ;
		ᐃᐃ[ⵠ.ΔⵠΔΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠᐃΔⵠΔΔ;
		ᐃᐃ[ⵠ.ⵠⵠΔᐃΔ] = [];
		ᐃᐃ[ⵠ.ⵠⵠΔᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠⲆΔΔΔ;
		ᐃᐃ[ⵠ.ⵠⵠΔᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔΔΔΔΔᐃⲆ;
		ᐃᐃ[ⵠ.ΔⵠⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔⵠⲆⵠΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⲆΔᐃⲆΔⲆ;
		ᐃᐃ[ⵠ.ΔⵠⲆⵠΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠΔᐃΔⵠᐃ;
		ᐃᐃ[ⵠ.ⵠΔᐃⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⵠΔᐃⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⵠⵠⵠΔΔⵠ;
		ᐃᐃ[ⵠ.ⵠΔᐃⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⵠΔⲆⲆⲆᐃ;
		ᐃᐃ[ⵠ.ΔⲆᐃᐃⲆ] = [];
		ᐃᐃ[ⵠ.ΔⲆᐃᐃⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⵠΔⵠⲆⵠᐃ;
		ᐃᐃ[ⵠ.ΔⲆᐃᐃⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠΔᐃⵠᐃⵠ;
		ᐃᐃ[ⵠ.ᐃΔᐃΔⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔᐃΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠᐃᐃᐃΔⲆⵠ;
		ᐃᐃ[ⵠ.ᐃΔᐃΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⵠΔⲆⵠΔᐃ;
		ᐃᐃ[ⵠ.ⵠⲆⵠⲆΔ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⵠⲆΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠᐃΔᐃΔᐃΔ;
		ᐃᐃ[ⵠ.ⵠⲆⵠⲆΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⲆᐃⲆᐃᐃᐃ;
		ᐃᐃ[ⵠ.Δᐃᐃⵠⵠ] = [];
		ᐃᐃ[ⵠ.Δᐃᐃⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔⲆⲆᐃⵠΔ;
		ᐃᐃ[ⵠ.Δᐃᐃⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔΔᐃⵠΔⲆ;
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔⲆⵠΔᐃⲆ;
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆᐃⲆⲆⲆΔⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃᐃᐃΔᐃⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃᐃⲆⲆᐃΔ;
		ᐃᐃ[ⵠ.ᐃⵠΔⵠⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⵠΔⵠⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔΔᐃᐃΔᐃᐃ;
		ᐃᐃ[ⵠ.ᐃⵠΔⵠⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆᐃᐃⵠΔⵠⵠ;
		ᐃᐃ[ⵠ.ⲆΔⲆᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⲆΔⲆᐃⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠᐃⲆⲆΔⲆⵠ;
		ᐃᐃ[ⵠ.ⲆΔⲆᐃⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆⲆⵠⲆⲆⲆ;
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠⲆ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔⵠⲆΔⲆⵠ;
		ᐃᐃ[ⵠ.ⵠᐃⵠⵠⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⲆⲆⲆΔᐃⲆ;
		ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠⵠⲆ] = [];
		ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠⵠⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃⵠΔⲆᐃⲆ;
		ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠⵠⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔᐃⵠⲆᐃⵠ;
		ᐃᐃ[ⵠ.ᐃⵠⲆΔⵠⵠⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⲆΔⵠⵠⲆ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⲆΔⵠⵠⲆ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⲆΔⵠⵠⲆ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⲆⲆⵠΔΔΔΔᐃⵠ);
		ᐃᐃ[ⵠ.ᐃⵠⲆΔⵠⵠⲆ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠⲆΔⵠⲆⲆΔᐃᐃ);
		ᐃᐃ[ⵠ.ᐃⵠⲆΔⵠⵠⲆ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠⲆΔⵠⲆⲆΔᐃᐃ);
		ᐃᐃ[ⵠ.ᐃⵠⲆΔⵠⵠⲆ][ⵠ.ᐃⵠΔ].push(Δᐃ.ᐃⵠⲆΔⲆᐃΔΔΔ);
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆᐃ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠⲆᐃⵠᐃΔⵠ);
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆᐃ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃⲆⲆᐃᐃⵠⲆ);
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆᐃ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃⲆⵠⲆΔⵠⵠ);
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆᐃ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⲆΔᐃᐃᐃⵠⲆ);
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆᐃ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠᐃⲆⲆⲆⵠⲆ);
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆᐃ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⲆᐃⲆΔⵠᐃⵠ);
		ᐃᐃ[ⵠ.ⵠΔⵠᐃᐃ] = [];
		ᐃᐃ[ⵠ.ⵠΔⵠᐃᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃⲆᐃⲆⲆⲆ;
		ᐃᐃ[ⵠ.ⵠΔⵠᐃᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⲆΔⵠⲆᐃⲆ;
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃⲆΔᐃⵠᐃ;
		ᐃᐃ[ⵠ.ⲆⲆⲆᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⲆᐃⵠⵠᐃΔ;
		ᐃᐃ[ⵠ.ⲆⲆΔⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔⵠΔ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔⵠΔ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔⵠΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⲆⵠᐃᐃⲆᐃΔ);
		ᐃᐃ[ⵠ.ⲆⲆΔⵠΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠⲆⵠⵠⵠᐃⲆ);
		ᐃᐃ[ⵠ.ⲆⲆΔⵠΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ΔᐃᐃⲆᐃⵠΔ);
		ᐃᐃ[ⵠ.ⲆⲆΔⵠΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠⲆΔΔᐃⵠⲆ);
		ᐃᐃ[ⵠ.ⲆⲆΔⵠΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠⵠᐃⲆⲆⵠⵠ);
		ᐃᐃ[ⵠ.ⲆⲆΔⵠΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ᐃΔⵠⲆⲆᐃΔ);
		ᐃᐃ[ⵠ.ᐃⲆⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠΔ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠΔ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠᐃⵠᐃⵠⵠΔ);
		ᐃᐃ[ⵠ.ᐃⲆⵠΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⲆᐃⵠΔΔᐃΔ);
		ᐃᐃ[ⵠ.ᐃⲆⵠΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ΔΔᐃⵠᐃⲆⵠ);
		ᐃᐃ[ⵠ.ᐃⲆⵠΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠᐃⵠΔⵠᐃᐃ);
		ᐃᐃ[ⵠ.ᐃⲆⵠΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⲆⵠⲆΔⵠⲆΔ);
		ᐃᐃ[ⵠ.ᐃⲆⵠΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ΔⲆⲆⲆⲆⵠᐃ);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ] = [];
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠⲆⲆⲆᐃⲆⵠ);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠΔⵠⲆΔΔⲆ);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠⲆⵠⲆΔⵠⲆ);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⲆⲆⵠᐃⵠⵠⵠ);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⲆΔⲆⵠΔⲆΔ);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃᐃΔⲆΔΔⲆ);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ΔⵠⵠᐃⲆⲆⵠ);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ᐃΔⵠⲆⵠⵠᐃ);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠΔⵠΔⲆᐃⲆ);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠᐃΔᐃⵠⵠⵠ);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ΔⵠⲆᐃⲆⲆⵠ);
		ᐃᐃ[ⵠ.ΔⲆⲆⵠⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠⵠΔⲆⵠΔᐃ);
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃᐃⵠⲆΔⲆⵠ);
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃⵠΔΔⲆᐃⵠ);
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⲆΔΔΔΔⲆΔ);
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ΔⲆᐃⲆⵠⲆⵠ);
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃⵠⲆⲆⲆⲆᐃ);
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃΔᐃΔⲆⲆᐃ);
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠᐃⲆΔᐃΔⵠ);
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠⵠΔⲆⲆΔᐃ);
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠⵠⵠⲆᐃⲆΔ);
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ᐃⵠⵠᐃⲆΔᐃ);
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ᐃᐃΔᐃⵠⵠⵠ);
		ᐃᐃ[ⵠ.ᐃΔΔΔⵠ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠᐃΔΔⲆᐃᐃ);
		ᐃᐃ[ⵠ.ⲆᐃΔᐃⲆᐃΔ] = [];
		ᐃᐃ[ⵠ.ⲆᐃΔᐃⲆᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⲆᐃⵠΔΔΔ;
		ᐃᐃ[ⵠ.ⲆᐃΔᐃⲆᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃΔΔᐃⵠⵠΔ;
		ᐃᐃ[ⵠ.ᐃΔᐃᐃⵠⲆⵠ] = Δᐃ.ⲆⲆᐃⵠⲆᐃΔ;
		ᐃᐃ[ⵠ.ⲆΔΔΔᐃ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔΔᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⲆⵠⲆⵠΔᐃⵠᐃ;
		ᐃᐃ[ⵠ.ⲆΔΔΔᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⲆᐃᐃᐃᐃⵠΔⵠ;
		ᐃᐃ[ⵠ.ᐃᐃⵠⲆΔ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⵠⲆΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆᐃⵠΔⵠⵠΔ;
		ᐃᐃ[ⵠ.ᐃᐃⵠⲆΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃᐃⲆΔⵠΔᐃ;
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⲆΔⵠΔⲆᐃ;
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⵠᐃⵠⵠⲆⲆ;
		ᐃᐃ[ⵠ.ⲆⵠⲆΔⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⵠⲆΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⲆᐃⲆᐃΔΔ;
		ᐃᐃ[ⵠ.ⲆⵠⲆΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠⵠⲆⲆⵠⲆ;
		ᐃᐃ[ⵠ.ᐃΔᐃᐃᐃ] = [];
		ᐃᐃ[ⵠ.ᐃΔᐃᐃᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠΔᐃᐃⲆ;
		ᐃᐃ[ⵠ.ᐃΔᐃᐃᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔΔᐃⲆⵠᐃⲆ;
		ᐃᐃ[ⵠ.ⲆⵠⲆΔⵠⲆᐃ] = Δᐃ.ⲆⵠⲆΔⵠⲆᐃ;
		ᐃᐃ[ⵠ.ᐃⵠⲆᐃⲆᐃΔ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⲆᐃⲆᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔΔⵠⵠᐃⵠᐃ;
		ᐃᐃ[ⵠ.ᐃⵠⲆᐃⲆᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠΔⲆΔᐃⲆⲆ;
		ᐃᐃ[ⵠ.ⵠⲆᐃⵠᐃⲆΔ] = [];
		ᐃᐃ[ⵠ.ⵠⲆᐃⵠᐃⲆΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠᐃᐃᐃΔⵠΔ;
		ᐃᐃ[ⵠ.ⵠⲆᐃⵠᐃⲆΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃΔⵠΔⲆⵠ;
		ᐃᐃ[ⵠ.ΔⵠⲆᐃᐃⵠΔ] = Δᐃ.ΔⵠⲆᐃᐃⵠΔ;
		ᐃᐃ[ⵠ.ΔᐃⵠⵠⲆⲆⲆ] = Δᐃ.ΔᐃⵠⵠⲆⲆⲆ;
		ᐃᐃ[ⵠ.ᐃⲆᐃⵠΔⲆᐃ] = Δᐃ.ᐃⲆᐃⵠΔⲆᐃ;
		ᐃᐃ[ⵠ.ⵠᐃᐃΔⲆᐃΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃᐃΔⲆᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⲆⵠᐃᐃᐃΔ;
		ᐃᐃ[ⵠ.ⵠᐃᐃΔⲆᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⲆⵠⵠΔⲆΔ;
		ᐃᐃ[ⵠ.ⵠᐃⵠΔⵠⲆΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⵠΔⵠⲆΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⲆᐃⵠᐃᐃⲆ;
		ᐃᐃ[ⵠ.ⵠᐃⵠΔⵠⲆΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆᐃⲆᐃⲆⲆⲆ;
		ᐃᐃ[ⵠ.ΔⲆᐃⲆⲆᐃⲆ] = [];
		ᐃᐃ[ⵠ.ΔⲆᐃⲆⲆᐃⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⵠΔᐃⲆΔⲆ;
		ᐃᐃ[ⵠ.ΔⲆᐃⲆⲆᐃⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃᐃⲆᐃⲆⲆᐃ;
		ᐃᐃ[ⵠ.ᐃⲆᐃᐃᐃᐃⵠ] = Δᐃ.ᐃⲆᐃᐃᐃᐃⵠ;
		ᐃᐃ[ⵠ.ΔⲆⵠⲆᐃΔΔ] = Δᐃ.ΔⲆⵠⲆᐃΔΔ;
		ᐃᐃ[ⵠ.ᐃⵠΔᐃΔⵠⵠ] = Δᐃ.ᐃⵠΔᐃΔⵠⵠ;
		ᐃᐃ[ⵠ.ⲆᐃⲆⲆᐃΔⵠ] = [];
		ᐃᐃ[ⵠ.ⲆᐃⲆⲆᐃΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔᐃΔΔᐃⵠ;
		ᐃᐃ[ⵠ.ⲆᐃⲆⲆᐃΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆᐃΔⲆΔⵠ;
		ᐃᐃ[ⵠ.ΔⲆᐃᐃᐃⵠᐃ] = [];
		ᐃᐃ[ⵠ.ΔⲆᐃᐃᐃⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔΔΔⲆⵠΔ;
		ᐃᐃ[ⵠ.ΔⲆᐃᐃᐃⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆⵠΔⲆⲆⲆ;
		ᐃᐃ[ⵠ.ⲆⵠⵠⲆΔ] = [];
		ᐃᐃ[ⵠ.ⲆⵠⵠⲆΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃⵠⵠⲆᐃΔ;
		ᐃᐃ[ⵠ.ⲆⵠⵠⲆΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔΔⲆⲆΔⲆⲆ;
		ᐃᐃ[ⵠ.ᐃⵠⲆⲆΔΔⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⵠⲆⲆΔΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⵠⲆᐃⲆΔⵠ;
		ᐃᐃ[ⵠ.ᐃⵠⲆⲆΔΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔΔᐃΔⲆⵠΔ;
		ᐃᐃ[ⵠ.ⵠⵠⵠᐃⵠⵠⵠ] = [];
		ᐃᐃ[ⵠ.ⵠⵠⵠᐃⵠⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔΔᐃⲆⲆⵠⲆ;
		ᐃᐃ[ⵠ.ⵠⵠⵠᐃⵠⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⲆᐃΔΔᐃⲆ;
		ᐃᐃ[ⵠ.ⲆⲆⲆⵠⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⲆⵠⵠⲆⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⵠΔⲆΔᐃᐃ;
		ᐃᐃ[ⵠ.ⲆⲆⲆⵠⵠⲆⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃᐃᐃΔΔⵠ;
		ᐃᐃ[ⵠ.ΔⲆΔᐃᐃⵠᐃ] = [];
		ᐃᐃ[ⵠ.ΔⲆΔᐃᐃⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⲆⲆⲆⵠΔΔ;
		ᐃᐃ[ⵠ.ΔⲆΔᐃᐃⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠΔⲆⲆⲆⵠΔ;
		ᐃᐃ[ⵠ.ⵠᐃⲆⵠⲆΔⵠ] = Δᐃ.ⵠᐃⲆⵠⲆΔⵠ;
		ᐃᐃ[ⵠ.ΔᐃⲆΔⲆⵠΔ] = Δᐃ.ΔᐃⲆΔⲆⵠΔ;
		ᐃᐃ[ⵠ.ⵠⲆΔΔⵠⲆᐃ] = Δᐃ.ⵠⲆΔΔⵠⲆᐃ;
		ᐃᐃ[ⵠ.ⵠΔᐃΔⲆⵠⲆ] = Δᐃ.ⵠΔᐃΔⲆⵠⲆ;
		ᐃᐃ[ⵠ.ᐃΔⵠᐃⵠᐃⵠ] = Δᐃ.ᐃΔⵠᐃⵠᐃⵠ;
		ᐃᐃ[ⵠ.ᐃⲆᐃΔⲆⵠΔ] = Δᐃ.ᐃⲆᐃΔⲆⵠΔ;
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃⲆΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃⲆΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⲆᐃⲆᐃΔᐃ;
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃⲆΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⲆⵠΔⲆⲆᐃ;
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⵠⲆΔⲆΔΔ;
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⵠⲆⲆΔΔⵠ;
		ᐃᐃ[ⵠ.ᐃΔΔⲆᐃ] = [];
		ᐃᐃ[ⵠ.ᐃΔΔⲆᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⲆⲆΔᐃⲆⲆ;
		ᐃᐃ[ⵠ.ᐃΔΔⲆᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⲆⵠⵠⲆⲆⵠ;
		ᐃᐃ[ⵠ.ΔⲆᐃⲆⵠⲆᐃ] = [];
		ᐃᐃ[ⵠ.ΔⲆᐃⲆⵠⲆᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆᐃᐃⲆᐃⲆΔ;
		ᐃᐃ[ⵠ.ΔⲆᐃⲆⵠⲆᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠᐃⵠⵠⲆΔⵠ;
		ᐃᐃ[ⵠ.ᐃᐃΔΔΔΔⵠ] = Δᐃ.ᐃᐃΔΔΔΔⵠ;
		ᐃᐃ[ⵠ.ᐃΔⲆⲆⵠⵠⵠ] = Δᐃ.ᐃΔⲆⲆⵠⵠⵠ;
		ᐃᐃ[ⵠ.ΔᐃⵠᐃⵠⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔᐃⵠᐃⵠⵠΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⵠΔⲆᐃᐃᐃ;
		ᐃᐃ[ⵠ.ΔᐃⵠᐃⵠⵠΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⵠⲆⵠᐃᐃⲆ;
		ᐃᐃ[ⵠ.ΔⲆᐃᐃⵠ] = [];
		ᐃᐃ[ⵠ.ΔⲆᐃᐃⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔΔᐃᐃᐃΔ;
		ᐃᐃ[ⵠ.ΔⲆᐃᐃⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃᐃΔⵠⲆᐃⲆ;
		ᐃᐃ[ⵠ.ⲆᐃⲆᐃᐃΔⵠ] = [];
		ᐃᐃ[ⵠ.ⲆᐃⲆᐃᐃΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆᐃⵠᐃⵠΔᐃ;
		ᐃᐃ[ⵠ.ⲆᐃⲆᐃᐃΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⲆᐃⲆΔⲆⵠ;
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆⵠⵠⲆ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆⵠⵠⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⵠᐃⲆᐃⲆΔ;
		ᐃᐃ[ⵠ.ⵠⲆⲆⲆⵠⵠⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⵠⵠΔⵠᐃᐃ;
		ᐃᐃ[ⵠ.ΔⵠΔⵠⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ΔⵠΔⵠⵠⲆⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⲆⲆᐃⵠᐃⵠ;
		ᐃᐃ[ⵠ.ΔⵠΔⵠⵠⲆⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔⵠΔΔΔⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⵠΔⵠⵠⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠΔⵠⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔΔΔᐃⵠⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⵠΔⵠⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃΔⵠΔΔᐃΔ;
		ᐃᐃ[ⵠ.ⵠΔᐃΔᐃΔⲆ] = [];
		ᐃᐃ[ⵠ.ⵠΔᐃΔᐃΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⵠᐃΔⲆⲆᐃ;
		ᐃᐃ[ⵠ.ⵠΔᐃΔᐃΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆΔᐃΔΔᐃ;
		ᐃᐃ[ⵠ.ⲆⵠᐃⵠⵠΔΔ] = [];
		ᐃᐃ[ⵠ.ⲆⵠᐃⵠⵠΔΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔΔΔⵠⵠΔ;
		ᐃᐃ[ⵠ.ⲆⵠᐃⵠⵠΔΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠᐃΔΔΔⵠⲆ;
		ᐃᐃ[ⵠ.ᐃΔΔᐃᐃⵠⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔΔᐃᐃⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔⵠᐃⲆΔΔ;
		ᐃᐃ[ⵠ.ᐃΔΔᐃᐃⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃᐃⲆⲆΔⲆⵠ;
		ᐃᐃ[ⵠ.ⵠⵠΔᐃⲆᐃⲆ] = Δᐃ.ⵠⵠΔᐃⲆᐃⲆ;
		ᐃᐃ[ⵠ.Δⵠⵠⵠᐃⵠⵠ] = Δᐃ.Δⵠⵠⵠᐃⵠⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠᐃⲆ] = Δᐃ.ᐃⲆⵠⲆⵠᐃⲆ;
		ᐃᐃ[ⵠ.ⲆᐃΔΔⲆⵠⵠ] = [];
		ᐃᐃ[ⵠ.ⲆᐃΔΔⲆⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔᐃⵠΔⲆΔ;
		ᐃᐃ[ⵠ.ⲆᐃΔΔⲆⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⵠΔⵠⵠᐃⲆ;
		ᐃᐃ[ⵠ.ⵠⵠⲆΔΔ] = [];
		ᐃᐃ[ⵠ.ⵠⵠⲆΔΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔⵠⲆⲆᐃᐃ;
		ᐃᐃ[ⵠ.ⵠⵠⲆΔΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⲆⲆⲆⵠⲆᐃ;
		ᐃᐃ[ⵠ.ᐃⲆⵠⵠΔⲆΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠⵠΔⲆΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⲆΔᐃᐃᐃᐃ;
		ᐃᐃ[ⵠ.ᐃⲆⵠⵠΔⲆΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆⵠⵠⲆᐃⵠ;
		ᐃᐃ[ⵠ.ΔᐃΔᐃΔΔᐃ] = [];
		ᐃᐃ[ⵠ.ΔᐃΔᐃΔΔᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔΔⵠⵠⵠⲆⵠ;
		ᐃᐃ[ⵠ.ΔᐃΔᐃΔΔᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⲆⵠᐃⲆⵠᐃ;
		ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠⵠΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠⵠΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃⵠΔΔᐃⲆ;
		ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠⵠΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃΔⲆᐃᐃΔ;
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠᐃⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠᐃⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆᐃᐃⵠᐃⵠΔ;
		ᐃᐃ[ⵠ.ⲆⲆⵠⵠᐃⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃⲆⲆⲆᐃⲆ;
		ᐃᐃ[ⵠ.ⵠᐃᐃⵠΔᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⵠᐃᐃⵠΔᐃⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔΔⵠⵠΔΔ;
		ᐃᐃ[ⵠ.ⵠᐃᐃⵠΔᐃⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔΔᐃⵠΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠᐃⲆΔ] = [];
		ᐃᐃ[ⵠ.ⵠΔⲆⵠᐃⲆΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔⲆᐃⵠΔᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆⵠᐃⲆΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃᐃⲆⵠᐃΔ;
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆᐃᐃⲆ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆᐃᐃⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔᐃⲆΔΔⲆ;
		ᐃᐃ[ⵠ.ⵠᐃⲆⲆᐃᐃⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆΔⲆⵠⵠⲆ;
		ᐃᐃ[ⵠ.ᐃΔᐃΔⲆᐃⵠ] = Δᐃ.ᐃΔᐃΔⲆᐃⵠ;
		ᐃᐃ[ⵠ.ⲆΔⲆⲆⵠⵠⲆ] = Δᐃ.ⲆΔⲆⲆⵠⵠⲆ;
		ᐃᐃ[ⵠ.ⲆᐃᐃᐃⲆⵠⵠ] = Δᐃ.ⲆᐃᐃᐃⲆⵠⵠ;
		ᐃᐃ[ⵠ.ⵠᐃⵠΔⵠⲆⲆ] = [];
		ᐃᐃ[ⵠ.ⵠᐃⵠΔⵠⲆⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⵠΔⲆⲆⵠⵠ;
		ᐃᐃ[ⵠ.ⵠᐃⵠΔⵠⲆⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆᐃⵠⵠⵠⵠΔ;
		ᐃᐃ[ⵠ.ΔᐃⲆΔᐃ] = [];
		ᐃᐃ[ⵠ.ΔᐃⲆΔᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⵠᐃⵠⲆⲆⵠ;
		ᐃᐃ[ⵠ.ΔᐃⲆΔᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠⵠᐃΔΔᐃ;
		ᐃᐃ[ⵠ.ΔᐃⵠΔⲆᐃⲆ] = Δᐃ.ΔᐃⵠΔⲆᐃⲆ;
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠⲆⲆᐃ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠⲆⲆᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⵠᐃⲆⲆΔⲆ;
		ᐃᐃ[ⵠ.ᐃⲆⲆⵠⲆⲆᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆΔⲆᐃⵠⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⵠΔⵠΔⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠΔⵠΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⵠᐃΔᐃᐃⵠ;
		ᐃᐃ[ⵠ.ᐃⲆⵠΔⵠΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆΔⲆⵠⵠⲆΔ;
		ᐃᐃ[ⵠ.ᐃΔⲆⵠᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ᐃΔⲆⵠᐃΔΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⲆⲆⵠᐃⵠⲆ;
		ᐃᐃ[ⵠ.ᐃΔⲆⵠᐃΔΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃΔⵠⲆⲆⵠⵠ;
		ᐃᐃ[ⵠ.ⲆⲆΔⲆΔⲆΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔⲆΔⲆΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⲆΔΔΔⲆⲆ;
		ᐃᐃ[ⵠ.ⲆⲆΔⲆΔⲆΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠⲆⵠⵠⵠΔ;
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⲆΔⲆ] = [];
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⲆΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔᐃᐃᐃΔⵠΔ;
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⲆΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⲆⲆⲆⵠⲆⵠ;
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆⵠᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆⵠᐃⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃⵠⵠⲆᐃⲆ;
		ᐃᐃ[ⵠ.ⲆⲆⲆⲆⵠᐃⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠΔⲆΔᐃⵠⵠ;
		ᐃᐃ[ⵠ.ΔΔⵠⲆⵠᐃΔ] = [];
		ᐃᐃ[ⵠ.ΔΔⵠⲆⵠᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⵠⲆᐃΔᐃⵠ;
		ᐃᐃ[ⵠ.ΔΔⵠⲆⵠᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⲆⲆⵠᐃⲆΔ;
		ᐃᐃ[ⵠ.ᐃᐃⲆΔⵠⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃᐃⲆΔⵠⵠΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔⲆᐃᐃᐃΔ;
		ᐃᐃ[ⵠ.ᐃᐃⲆΔⵠⵠΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠⵠⵠᐃΔⲆ;
		ᐃᐃ[ⵠ.ⲆⲆΔⲆⵠᐃⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆΔⲆⵠᐃⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆᐃΔᐃᐃᐃᐃ;
		ᐃᐃ[ⵠ.ⲆⲆΔⲆⵠᐃⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃΔⵠᐃΔⲆⲆ;
		ᐃᐃ[ⵠ.ᐃⵠⲆΔⵠⲆΔ] = Δᐃ.ᐃⵠⲆΔⵠⲆΔ;
		ᐃᐃ[ⵠ.ⲆⵠⵠⵠᐃΔΔ] = Δᐃ.ⲆⵠⵠⵠᐃΔΔ;
		ᐃᐃ[ⵠ.ΔⵠΔⲆᐃᐃΔ] = Δᐃ.ΔⵠΔⲆᐃᐃΔ;
		ᐃᐃ[ⵠ.ΔᐃⲆⲆⲆΔᐃ] = [];
		ᐃᐃ[ⵠ.ΔᐃⲆⲆⲆΔᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔᐃᐃᐃΔⵠⲆ;
		ᐃᐃ[ⵠ.ΔᐃⲆⲆⲆΔᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⲆΔᐃᐃΔⵠ;
		ᐃᐃ[ⵠ.ⲆᐃⲆΔⲆ] = [];
		ᐃᐃ[ⵠ.ⲆᐃⲆΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆΔⵠΔⵠΔⵠ;
		ᐃᐃ[ⵠ.ⲆᐃⲆΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠᐃⲆΔⲆⵠⲆ;
		ᐃᐃ[ⵠ.ⲆΔΔⵠᐃΔᐃ] = Δᐃ.ⲆΔΔⵠᐃΔᐃ;
		ᐃᐃ[ⵠ.ᐃⵠΔΔᐃⵠⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⵠΔΔᐃⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⵠⲆⵠⵠᐃⵠ;
		ᐃᐃ[ⵠ.ᐃⵠΔΔᐃⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⵠⵠᐃⵠᐃⲆ;
		ᐃᐃ[ⵠ.ΔⵠᐃⲆⵠᐃⲆ] = [];
		ᐃᐃ[ⵠ.ΔⵠᐃⲆⵠᐃⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔΔⵠΔⵠΔⵠ;
		ᐃᐃ[ⵠ.ΔⵠᐃⲆⵠᐃⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆᐃᐃⲆⵠⵠᐃ;
		ᐃᐃ[ⵠ.ΔᐃⲆᐃⲆΔΔ] = [];
		ᐃᐃ[ⵠ.ΔᐃⲆᐃⲆΔΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃΔᐃⲆΔⵠΔ;
		ᐃᐃ[ⵠ.ΔᐃⲆᐃⲆΔΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⵠΔⲆΔⵠᐃ;
		ᐃᐃ[ⵠ.ΔΔᐃⵠⲆⲆᐃ] = [];
		ᐃᐃ[ⵠ.ΔΔᐃⵠⲆⲆᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⵠᐃⵠΔⵠΔ;
		ᐃᐃ[ⵠ.ΔΔᐃⵠⲆⲆᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆⲆᐃⵠᐃᐃ;
		ᐃᐃ[ⵠ.ⲆΔΔᐃᐃⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔᐃᐃⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⵠⵠⲆⵠΔⵠ;
		ᐃᐃ[ⵠ.ⲆΔΔᐃᐃⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃΔΔⲆΔⵠⵠ;
		ᐃᐃ[ⵠ.ⵠⲆⵠΔⵠᐃΔ] = [];
		ᐃᐃ[ⵠ.ⵠⲆⵠΔⵠᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔΔᐃΔᐃⵠⵠ;
		ᐃᐃ[ⵠ.ⵠⲆⵠΔⵠᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔΔⵠΔΔⲆΔ;
		ᐃᐃ[ⵠ.ΔΔⲆᐃⲆΔΔ] = [];
		ᐃᐃ[ⵠ.ΔΔⲆᐃⲆΔΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⵠⵠⵠⵠᐃΔ;
		ᐃᐃ[ⵠ.ΔΔⲆᐃⲆΔΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⲆᐃΔᐃⲆᐃ;
		ᐃᐃ[ⵠ.ⲆᐃΔᐃΔⵠⲆ] = [];
		ᐃᐃ[ⵠ.ⲆᐃΔᐃΔⵠⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃΔⵠⵠᐃᐃ;
		ᐃᐃ[ⵠ.ⲆᐃΔᐃΔⵠⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⲆⲆⲆᐃⵠΔ;
		ᐃᐃ[ⵠ.ⲆⲆᐃΔⲆᐃΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆᐃΔⲆᐃΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⵠⲆⵠᐃⲆΔ;
		ᐃᐃ[ⵠ.ⲆⲆᐃΔⲆᐃΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠΔⵠⲆⵠⲆⲆ;
		ᐃᐃ[ⵠ.ⲆⲆΔⵠᐃᐃⵠ] = Δᐃ.ⲆⲆΔⵠᐃᐃⵠ;
		ᐃᐃ[ⵠ.ⲆⵠᐃΔⲆΔΔ] = Δᐃ.ⲆⵠᐃΔⲆΔΔ;
		ᐃᐃ[ⵠ.ⲆⵠⲆⵠⲆⲆΔ] = Δᐃ.ⲆⵠⲆⵠⲆⲆΔ;
		ᐃᐃ[ⵠ.ᐃΔⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃΔⵠⲆⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃΔⲆⲆΔⵠ;
		ᐃᐃ[ⵠ.ᐃΔⵠⲆⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔⵠⲆΔΔΔⵠ;
		ᐃᐃ[ⵠ.ΔΔⵠⲆᐃⵠⲆ] = [];
		ᐃᐃ[ⵠ.ΔΔⵠⲆᐃⵠⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠᐃΔΔⵠⵠΔ;
		ᐃᐃ[ⵠ.ΔΔⵠⲆᐃⵠⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠΔΔᐃᐃⲆⲆ;
		ᐃᐃ[ⵠ.ⲆΔΔⵠΔΔⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔΔⵠΔΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔⲆⵠⵠⲆᐃⵠ;
		ᐃᐃ[ⵠ.ⲆΔΔⵠΔΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⵠⲆⵠⵠΔⲆ;
		ᐃᐃ[ⵠ.ⵠΔⲆᐃᐃⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⵠΔⲆᐃᐃⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠΔⲆᐃᐃⵠᐃ;
		ᐃᐃ[ⵠ.ⵠΔⲆᐃᐃⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠΔⲆᐃᐃⵠᐃ;
		ᐃᐃ[ⵠ.ᐃⲆΔⲆⲆΔⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆΔⲆⲆΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃⲆΔⲆⲆΔⵠ;
		ᐃᐃ[ⵠ.ᐃⲆΔⲆⲆΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⲆΔⲆⲆΔⵠ;
		ᐃᐃ[ⵠ.ⲆᐃⵠᐃⵠΔⲆ] = [];
		ᐃᐃ[ⵠ.ⲆᐃⵠᐃⵠΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆᐃⵠᐃⵠΔⲆ;
		ᐃᐃ[ⵠ.ⲆᐃⵠᐃⵠΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆᐃⵠᐃⵠΔⲆ;
		ᐃᐃ[ⵠ.ⲆⲆΔⵠΔⵠΔ] = Δᐃ.ⲆⲆΔⵠΔⵠΔ;
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⲆ] = [];
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.Δⵠᐃᐃᐃᐃᐃ;
		ᐃᐃ[ⵠ.ΔⲆⵠⵠⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆᐃⲆΔᐃⵠᐃ;
		ᐃᐃ[ⵠ.ΔᐃⲆⵠⵠ] = [];
		ᐃᐃ[ⵠ.ΔᐃⲆⵠⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ΔΔⲆᐃⵠᐃⲆ;
		ᐃᐃ[ⵠ.ΔᐃⲆⵠⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⵠᐃⵠΔⵠᐃ;
		ᐃᐃ[ⵠ.ⲆᐃᐃⲆᐃ] = [];
		ᐃᐃ[ⵠ.ⲆᐃᐃⲆᐃ][ⵠ.ⵠⲆⵠ] = [Δᐃ.ⵠⵠⵠⵠⵠⵠΔ, Δᐃ.ⲆΔⲆⵠⵠᐃΔ, Δᐃ.ΔΔⲆⲆⲆⵠⵠ, Δᐃ.ⲆᐃⲆΔΔΔᐃ, Δᐃ.ΔᐃⲆᐃΔΔⲆ, Δᐃ.ᐃⲆΔᐃⲆΔⲆ, Δᐃ.ᐃⵠΔⵠⲆⵠᐃ, Δᐃ.ⵠᐃΔᐃΔᐃΔ, Δᐃ.ⵠΔⲆⵠΔᐃⲆ];
		ᐃᐃ[ⵠ.ⲆᐃᐃⲆᐃ][ⵠ.ᐃⵠΔ] = [Δᐃ.ΔⵠⵠⲆᐃⵠⲆ, Δᐃ.ᐃⵠΔΔᐃⲆⲆ, Δᐃ.ΔᐃᐃⲆΔᐃΔ, Δᐃ.ΔᐃᐃⲆᐃⲆΔ, Δᐃ.ΔⵠᐃΔⵠΔΔ, Δᐃ.ΔⵠΔᐃΔⵠᐃ, Δᐃ.ΔⵠΔᐃⵠᐃⵠ, Δᐃ.ⵠᐃΔᐃΔᐃΔ, Δᐃ.ⲆᐃⲆⲆⲆΔⵠ];
		ᐃᐃ[ⵠ.ΔⵠΔⵠΔ] = [];
		ᐃᐃ[ⵠ.ΔⵠΔⵠΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠⵠⲆᐃᐃⵠΔ;
		ᐃᐃ[ⵠ.ΔⵠΔⵠΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔΔⲆᐃᐃΔⵠ;
		ᐃᐃ[ⵠ.ΔΔΔᐃⲆΔⲆ] = [];
		ᐃᐃ[ⵠ.ΔΔΔᐃⲆΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⲆΔᐃⲆᐃⵠ;
		ᐃᐃ[ⵠ.ΔΔΔᐃⲆΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ΔᐃⵠⵠᐃⵠΔ;
		ᐃᐃ[ⵠ.ⲆΔᐃΔΔΔⵠ] = [];
		ᐃᐃ[ⵠ.ⲆΔᐃΔΔΔⵠ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⵠᐃᐃΔⵠⲆ;
		ᐃᐃ[ⵠ.ⲆΔᐃΔΔΔⵠ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃⵠⵠⵠⵠΔⲆ;
		ᐃᐃ[ⵠ.ⵠᐃᐃΔΔ] = [];
		ᐃᐃ[ⵠ.ⵠᐃᐃΔΔ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃΔᐃΔΔᐃ;
		ᐃᐃ[ⵠ.ⵠᐃᐃΔΔ][ⵠ.ᐃⵠΔ] = Δᐃ.ᐃᐃⲆⲆⲆⵠⲆ;
		ᐃᐃ[ⵠ.ⲆⵠⵠΔⲆ] = [];
		ᐃᐃ[ⵠ.ⲆⵠⵠΔⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⵠᐃⵠⲆΔᐃΔ;
		ᐃᐃ[ⵠ.ⲆⵠⵠΔⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⵠⵠᐃⲆᐃⵠᐃ;
		ᐃᐃ[ⵠ.ⵠΔⵠⵠᐃ] = [];
		ᐃᐃ[ⵠ.ⵠΔⵠⵠᐃ][ⵠ.ⵠⲆⵠ] = Δᐃ.ᐃᐃΔⵠΔⲆⵠ;
		ᐃᐃ[ⵠ.ⵠΔⵠⵠᐃ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⲆᐃΔΔⵠᐃ;
		ᐃᐃ[ⵠ.ᐃⲆⲆⲆⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⲆⲆⲆ][ⵠ.ⵠⲆⵠ] = Δᐃ.ⲆⲆΔⲆⲆΔⲆ;
		ᐃᐃ[ⵠ.ᐃⲆⲆⲆⲆ][ⵠ.ᐃⵠΔ] = Δᐃ.ⲆⵠΔⵠΔᐃⲆ;
		ᐃᐃ[ⵠ.ᐃⵠΔΔΔ] = [];
		ᐃᐃ[ⵠ.ᐃⵠΔΔΔ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⵠΔΔΔ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃⵠΔΔΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠⵠⲆⲆⵠⵠΔΔⵠ);
		ᐃᐃ[ⵠ.ᐃⵠΔΔΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⲆΔⲆⵠᐃⲆΔΔᐃ);
		ᐃᐃ[ⵠ.ᐃⵠΔΔΔ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⲆⵠⲆⵠⵠᐃᐃⲆⵠ);
		ᐃᐃ[ⵠ.ᐃⵠΔΔΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⲆΔⲆΔᐃᐃⲆΔⲆ);
		ᐃᐃ[ⵠ.ᐃⵠΔΔΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⲆᐃΔᐃⲆⲆᐃΔΔ);
		ᐃᐃ[ⵠ.ᐃⵠΔΔΔ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠⲆΔΔⲆᐃⵠΔⲆ);
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⲆ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⲆ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⲆ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⲆ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠΔΔΔΔⵠⲆⵠⲆ);
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⲆ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃⵠᐃᐃⲆⲆΔⲆᐃ);
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⲆ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠΔΔⵠⵠⵠᐃⵠⲆ);
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⲆ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠⲆᐃᐃⵠΔⲆᐃⵠ);
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⲆ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⲆΔⲆᐃⲆΔⵠΔⵠ);
		ᐃᐃ[ⵠ.ᐃⲆⵠᐃⲆ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⲆᐃⵠΔΔΔⵠⵠⲆ);
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃ][ⵠ.ⵠⲆⵠ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃ][ⵠ.ᐃⵠΔ] = [];
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃⲆⲆⲆᐃᐃⵠⲆᐃ);
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ᐃⵠⵠᐃⵠΔⲆΔᐃ);
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃ][ⵠ.ⵠⲆⵠ].push(Δᐃ.ⵠΔΔⲆᐃⵠᐃⲆⵠ);
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃ][ⵠ.ᐃⵠΔ].push(Δᐃ.ᐃⲆΔⵠᐃᐃᐃΔⲆ);
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⵠᐃᐃⲆΔᐃⵠΔⲆ);
		ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃ][ⵠ.ᐃⵠΔ].push(Δᐃ.ⲆᐃⵠⵠⲆᐃᐃΔᐃ);
		ⲆΔΔⵠ["g"] = [];
		ⲆΔΔⵠ["g"][0] = [Δᐃ.ⲆⲆᐃΔⵠⵠⲆ, Δᐃ.ⵠⲆᐃᐃᐃⲆΔ];
		ⲆΔΔⵠ["g"][1] = ⲆΔΔⵠ["g"][ⵠⵠΔΔ];
		ⲆΔΔⵠ["g"][2] = [Δᐃ.ᐃᐃⵠᐃΔΔⵠ, Δᐃ.ΔᐃⵠⲆⵠᐃⲆ];
		ⲆΔΔⵠ["m"] = [];
		ⲆΔΔⵠ["m"][0] = [Δᐃ.ⲆᐃⵠΔⵠⵠⵠ, Δᐃ.ⵠⵠᐃⲆᐃᐃⵠ];
		ⲆΔΔⵠ["m"][1] = ⲆΔΔⵠ["m"][ⲆⲆΔ];
		ⲆΔΔⵠ["m"][2] = [Δᐃ.ᐃΔⲆᐃᐃⲆⵠ, Δᐃ.ᐃⲆΔⲆⲆⲆΔ];
		ⲆΔΔⵠ[ᐃ[566]] = [];
		ⲆΔΔⵠ[ᐃ[566]][Ⲇⵠᐃ] = [Δᐃ.ⲆᐃᐃⵠⵠⵠΔ, Δᐃ.ΔⲆᐃⵠⵠⵠᐃ];
		ⲆΔΔⵠ[ᐃ[566]][ⲆⲆⵠ] = ⲆΔΔⵠ[ᐃ[566]][0];
		ⲆΔΔⵠ[ᐃ[566]][ⲆΔΔⲆ] = ⲆΔΔⵠ[ᐃ[566]][ⲆⲆΔ];
		ⲆΔΔⵠ[ᐃ[566]][3] = ⲆΔΔⵠ[ᐃ[566]][ⵠᐃⵠ];
		ⲆΔΔⵠ[ᐃ[566]][4] = ⲆΔΔⵠ[ᐃ[566]][0];
		ⲆΔΔⵠ[ᐃ[566]][5] = ⲆΔΔⵠ[ᐃ[566]][ⲆᐃΔⵠ];
		ⲆΔΔⵠ["s"] = [];
		ⲆΔΔⵠ["s"][0] = [Δᐃ.ᐃΔΔⵠΔΔⵠ, Δᐃ.ⵠⵠΔᐃΔⲆΔ];
		ⲆΔΔⵠ["s"][1] = ⲆΔΔⵠ["s"][0];
		ⲆΔΔⵠ["s"][ⵠᐃᐃⲆ] = [Δᐃ.ⵠᐃⵠΔⲆΔΔ, Δᐃ.ᐃᐃΔᐃⲆΔⲆ];
		ⲆΔΔⵠ["p"] = [];
		ⲆΔΔⵠ["p"][0] = [Δᐃ.ⵠΔᐃⵠΔᐃᐃ, Δᐃ.ⵠΔᐃⵠΔᐃᐃ];
		ⲆΔΔⵠ["a"] = [];
		ⲆΔΔⵠ["a"][ⲆⲆᐃⲆ] = [Δᐃ.ΔΔⲆⵠⲆΔᐃ, Δᐃ.ⲆΔⵠⲆⵠΔΔ];
		ⲆΔΔⵠ["a"][ΔⲆⵠⲆ] = ⲆΔΔⵠ["a"][0];
		ⲆΔΔⵠ["a"][ⲆΔΔⲆ] = ⲆΔΔⵠ["a"][ᐃⲆΔᐃ];
		ⲆΔΔⵠ["d"] = [];
		ⲆΔΔⵠ["d"][0] = [Δᐃ.ΔᐃΔⲆⲆΔⲆ, Δᐃ.ᐃᐃΔⲆⵠⲆⲆ];
		ⲆΔΔⵠ["d"][ᐃⵠⵠⵠ] = ⲆΔΔⵠ["d"][0];
		ⲆΔΔⵠ["d"][ⵠΔΔΔ] = ⲆΔΔⵠ["d"][0];
		ⲆΔΔⵠ[ᐃ[538]] = [];
		ⲆΔΔⵠ[ᐃ[538]][0] = [Δᐃ.ᐃⵠⲆΔΔΔΔ, Δᐃ.ⵠᐃΔⲆΔⵠΔ];
		ⲆΔΔⵠ[ᐃ[538]][1] = ⲆΔΔⵠ[ᐃ[538]][0];
		ⲆΔΔⵠ[ᐃ[538]][ΔΔⵠⲆ] = ⲆΔΔⵠ[ᐃ[538]][0];
		ⲆΔΔⵠ["f"] = [];
		ⲆΔΔⵠ["f"][0] = [Δᐃ.ᐃⵠᐃⲆⲆᐃᐃ, Δᐃ.ᐃᐃⲆⵠⵠᐃΔ];
		ⲆΔΔⵠ["f"][1] = ⲆΔΔⵠ["f"][0];
		ⲆΔΔⵠ["f"][ᐃⵠΔⲆ] = ⲆΔΔⵠ["f"][0];
		ⲆΔΔⵠ[ᐃ[104]] = [];
		ⲆΔΔⵠ[ᐃ[104]][Ⲇⵠⵠᐃ] = [Δᐃ.ⵠⵠⲆⲆΔᐃⲆ, Δᐃ.ᐃΔⵠⵠⲆᐃᐃ];
		ⲆΔΔⵠ[ᐃ[104]][1] = ⲆΔΔⵠ[ᐃ[104]][0];
		ⲆΔΔⵠ[ᐃ[104]][2] = ⲆΔΔⵠ[ᐃ[104]][ⲆᐃΔⵠ];
		ⲆΔΔⵠ["c"] = [];
		ⲆΔΔⵠ["c"][ⵠᐃΔ] = [Δᐃ.ⵠᐃᐃⵠᐃΔᐃ, Δᐃ.ᐃᐃᐃⵠⲆᐃΔ];
		ⲆΔΔⵠ["c"][1] = ⲆΔΔⵠ["c"][0];
		ⲆΔΔⵠ["c"][2] = ⲆΔΔⵠ["c"][Ⲇⵠᐃ];
		ⲆΔΔⵠ[ᐃ[255]] = [];
		ⲆΔΔⵠ[ᐃ[ⲆΔⲆⵠⲆ]][ΔᐃⲆⲆ] = [Δᐃ.ᐃⵠᐃⵠⲆΔⵠ, Δᐃ.ᐃⲆⲆⲆⲆⲆⵠ];
		ⲆΔΔⵠ["PIRANHA"] = [Δᐃ.ⲆⲆᐃⲆⲆⵠᐃ, Δᐃ.ΔΔⵠⵠᐃΔⵠ];
		ⲆΔΔⵠ["KRAKEN"] = [Δᐃ.ⲆⲆⵠᐃΔⲆⵠ, Δᐃ.ⵠⵠᐃΔⵠΔΔ];
		ⲆΔΔⵠ["FOX"] = [Δᐃ.ⵠⵠΔΔᐃΔΔ, Δᐃ.ᐃᐃⲆⲆᐃᐃᐃ];
		ⲆΔΔⵠ["WOLF"] = [Δᐃ.ⲆⲆΔΔΔⲆⲆ, Δᐃ.ᐃᐃⵠᐃⵠⵠᐃ];
		ⲆΔΔⵠ["SPIDER"] = [Δᐃ.ᐃⲆᐃΔΔΔⵠ, Δᐃ.ⵠⵠΔⲆΔⲆΔ];
		ⲆΔΔⵠ["BEAR"] = [Δᐃ.ΔⲆΔⵠΔⲆᐃ, Δᐃ.ⵠΔⵠᐃⲆᐃᐃ];
		ⲆΔΔⵠ["CAVE"] = [Δᐃ.ᐃⲆⲆⵠΔΔᐃ, Δᐃ.ⲆⵠⵠΔΔⲆΔ];
		ⲆΔΔⵠ["MAP"] = [Δᐃ.ΔᐃΔⲆⵠⲆⲆ, Δᐃ.ⲆⲆᐃᐃⲆⵠΔ];
		ⲆΔΔⵠ[ᐃ[350]] = [Δᐃ.ⲆⲆᐃⵠᐃΔⲆ, Δᐃ.ΔΔΔⲆᐃⲆⵠ];
		ⲆΔΔⵠ[ᐃ[167]] = [Δᐃ.ᐃΔⵠⲆⵠⵠΔ, Δᐃ.ᐃⵠⵠΔᐃⵠᐃ];
		ⲆΔΔⵠ[ᐃ[346]] = [Δᐃ.ⵠᐃⵠᐃΔΔⵠ, Δᐃ.ⵠΔⲆᐃΔΔⵠ];
		ⲆΔΔⵠ[ᐃ[101]] = [Δᐃ.ᐃⵠⲆⵠΔⲆΔ, Δᐃ.ᐃᐃᐃΔⵠΔⵠ];
		for (var ᐃᐃΔⲆⵠᐃΔⵠΔ in ⲆΔΔⵠ) {
			var ᐃΔⵠᐃⵠΔᐃ = ⲆΔΔⵠ[ᐃᐃΔⲆⵠᐃΔⵠΔ];
			for (var ᐃⲆ = 0; ᐃⲆ < ᐃΔⵠᐃⵠΔᐃ.length; ᐃⲆ++) {
				var ᐃᐃⲆΔⲆᐃⵠ = ᐃΔⵠᐃⵠΔᐃ[ᐃⲆ];
				if (ᐃᐃⲆΔⲆᐃⵠ.ⲆΔΔΔⵠⲆⵠ !== undefined) ᐃᐃⲆΔⲆᐃⵠ.ⲆΔΔΔⵠⲆⵠ();
				else if (ᐃᐃⲆΔⲆᐃⵠ.length > 0) {
					for (var ⲆⲆⲆⵠ = 0; ⲆⲆⲆⵠ < ᐃᐃⲆΔⲆᐃⵠ.length; ⲆⲆⲆⵠ++) {
						if (ᐃᐃⲆΔⲆᐃⵠ[ⲆⲆⲆⵠ].ⲆΔΔΔⵠⲆⵠ !== undefined) ᐃᐃⲆΔⲆᐃⵠ[ⲆⲆⲆⵠ].ⲆΔΔΔⵠⲆⵠ()
					}
				}
			}
		}
	}

	function ⵠΔⲆΔⲆⲆΔ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 573;
		ᐃⵠ.height = Ⲇ * 350;
		ᐃⲆ == ᐃⲆⲆ && (Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 336, Ⲇ * 72), Δ.bezierCurveTo(366 * Ⲇ, 15 * Ⲇ, Ⲇ * 426, Ⲇ * 36, 497 * Ⲇ, 83 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 522, Ⲇ * 85, 522 * Ⲇ, Ⲇ * 85, 547 * Ⲇ, Ⲇ * 87), Δ.bezierCurveTo(476.5 * Ⲇ, 205 * Ⲇ, Ⲇ * 476.5, Ⲇ * 205, Ⲇ * 406, 323 * Ⲇ), Δ.bezierCurveTo(297.5 * Ⲇ, 319 * Ⲇ, 297.5 * Ⲇ, Ⲇ * 319, 189 * Ⲇ, Ⲇ * 315), Δ.bezierCurveTo(Ⲇ * 105.5, 279 * Ⲇ, 105.5 * Ⲇ, 279 * Ⲇ, 22 * Ⲇ, 243 * Ⲇ), Δ.bezierCurveTo(92 * Ⲇ, 140 * Ⲇ, Ⲇ * 92, Ⲇ * 140, 162 * Ⲇ, Ⲇ * 37), Δ.bezierCurveTo(173 * Ⲇ, 39 * Ⲇ, Ⲇ * 173, 39 * Ⲇ, Ⲇ * 184, Ⲇ * 41), Δ.bezierCurveTo(Ⲇ * 185, Ⲇ * 38.5, Ⲇ * 185, 38.5 * Ⲇ, 186 * Ⲇ, Ⲇ * 36), Δ.bezierCurveTo(Ⲇ * 323, Ⲇ * ⲆⵠᐃᐃⲆᐃⵠ, 322 * Ⲇ, 25 * Ⲇ, Ⲇ * 337, Ⲇ * 74), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ᐃᐃⵠΔ], 35 * Ⲇ));
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 168, Ⲇ * 42);
		Δ.bezierCurveTo(Ⲇ * ⵠⵠᐃⵠⵠ, 60 * Ⲇ, 255 * Ⲇ, 60 * Ⲇ, Ⲇ * 342, Ⲇ * 78);
		Δ.bezierCurveTo(Ⲇ * 443, 81.5 * Ⲇ, 443 * Ⲇ, 81.5 * Ⲇ, 544 * Ⲇ, Ⲇ * 85);
		Δ.bezierCurveTo(475 * Ⲇ, Ⲇ * 204.5, 475 * Ⲇ, 204.5 * Ⲇ, 406 * Ⲇ, Ⲇ * 324);
		Δ.bezierCurveTo(Ⲇ * 297.5, 320 * Ⲇ, 297.5 * Ⲇ, Ⲇ * 320, 189 * Ⲇ, 316 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 105.5, 279 * Ⲇ, 105.5 * Ⲇ, 279 * Ⲇ, Ⲇ * 22, 242 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[Δⵠᐃ], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 188, Ⲇ * 41);
		Δ.bezierCurveTo(308 * Ⲇ, 15 * Ⲇ, 325 * Ⲇ, Ⲇ * 18, 337 * Ⲇ, Ⲇ * 66);
		Δ.bezierCurveTo(Ⲇ * 191, Ⲇ * 305, 196 * Ⲇ, 286 * Ⲇ, 184 * Ⲇ, Ⲇ * 307);
		Δ.bezierCurveTo(Ⲇ * 175, Ⲇ * 250, Ⲇ * 90, 254 * Ⲇ, Ⲇ * 52, 241 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⵠⲆⲆ], Δⵠ[ⵠᐃᐃⵠ], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 336, 71 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 375, Ⲇ * ΔᐃⵠΔⵠ, 429 * Ⲇ, Ⲇ * 50, 518 * Ⲇ, 92 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 455, Ⲇ * 199.5, 455 * Ⲇ, Ⲇ * 199.5, 392 * Ⲇ, Ⲇ * 307);
		Δ.bezierCurveTo(Ⲇ * 227, Ⲇ * 301, Ⲇ * 261, Ⲇ * ᐃⲆⲆᐃᐃⵠᐃ, Ⲇ * 188, Ⲇ * 308);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⲆ], Δⵠ[ⵠᐃⵠⲆ], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 357, 76 * Ⲇ);
		Δ.bezierCurveTo(390 * Ⲇ, Ⲇ * 67, Ⲇ * 414, 86 * Ⲇ, Ⲇ * 435, Ⲇ * 104);
		Δ.bezierCurveTo(417 * Ⲇ, 135 * Ⲇ, Ⲇ * 417, 135 * Ⲇ, Ⲇ * 399, 166 * Ⲇ);
		Δ.bezierCurveTo(352 * Ⲇ, Ⲇ * 140, Ⲇ * 345, 139 * Ⲇ, Ⲇ * 319, Ⲇ * 142);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆΔⲆᐃ], Ⲇ * ᐃⵠᐃⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 309, Ⲇ * 168);
		Δ.bezierCurveTo(Ⲇ * 345, 163 * Ⲇ, 372 * Ⲇ, Ⲇ * 180, Ⲇ * 412, 203 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ⵠᐃⵠⵠ], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 263, Ⲇ * 54);
		Δ.bezierCurveTo(305 * Ⲇ, Ⲇ * 44, Ⲇ * 307, Ⲇ * 51, 311 * Ⲇ, 64 * Ⲇ);
		Δ.bezierCurveTo(270.5 * Ⲇ, Ⲇ * 129.5, 270.5 * Ⲇ, Ⲇ * 129.5, 230 * Ⲇ, Ⲇ * 195);
		Δ.bezierCurveTo(221 * Ⲇ, Ⲇ * 175, Ⲇ * 203, Ⲇ * 171, 186 * Ⲇ, 172 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[Ⲇⵠᐃᐃ], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 292, 198 * Ⲇ);
		Δ.bezierCurveTo(328 * Ⲇ, Ⲇ * 191, 364 * Ⲇ, Ⲇ * 211, 401 * Ⲇ, 237 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃⲆ], Δⵠ[ⲆΔⲆᐃ], Ⲇ * 12);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 245, Ⲇ * 68);
		Δ.bezierCurveTo(210 * Ⲇ, 72 * Ⲇ, Ⲇ * 210, Ⲇ * 72, Ⲇ * 189, 69 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[3], Ⲇ * ᐃⲆᐃⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(222 * Ⲇ, Ⲇ * 96);
		Δ.bezierCurveTo(196 * Ⲇ, Ⲇ * 97, 193 * Ⲇ, 97 * Ⲇ, Ⲇ * 177, Ⲇ * 92);
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[3], 12 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 207, 124 * Ⲇ);
		Δ.bezierCurveTo(179 * Ⲇ, Ⲇ * 123, 177 * Ⲇ, Ⲇ * 124, Ⲇ * 161, Ⲇ * 119);
		ⵠᐃ(Δ, Δⵠ[Ⲇᐃⵠⵠ], Δⵠ[3], Ⲇ * ᐃⵠᐃⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 115, 183 * Ⲇ);
		Δ.bezierCurveTo(184 * Ⲇ, 185 * Ⲇ, Ⲇ * 203, 198 * Ⲇ, Ⲇ * 219, 221 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[3], Ⲇ * ⲆΔᐃⵠⲆⵠⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 98, Ⲇ * 213);
		Δ.bezierCurveTo(161 * Ⲇ, Ⲇ * 214, 193 * Ⲇ, Ⲇ * 227, 201 * Ⲇ, Ⲇ * 249);
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⲆ], Δⵠ[3], Ⲇ * ⲆⲆⲆⲆΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(399 * Ⲇ, Ⲇ * 257);
		Δ.bezierCurveTo(287 * Ⲇ, 215 * Ⲇ, Ⲇ * 280, 215 * Ⲇ, 263 * Ⲇ, Ⲇ * 222);
		Δ.bezierCurveTo(253 * Ⲇ, 238 * Ⲇ, Ⲇ * 247, 245 * Ⲇ, Ⲇ * 243, 254 * Ⲇ);
		Δ.bezierCurveTo(267 * Ⲇ, 236 * Ⲇ, 292 * Ⲇ, Ⲇ * 263, 377 * Ⲇ, 284 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[Ⲇⵠᐃᐃ], ⲆⲆⲆⲆΔ * Ⲇ);
		return ᐃⵠ
	}

	function ⵠⵠΔⵠΔⲆⲆ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 372 * Ⲇ;
		ᐃⵠ.height = 358 * Ⲇ;
		Δ.translate(Ⲇ * 0, 10 * Ⲇ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .2 : 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 247.00003051757812, 115.76704406738281 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 305.0000305175781, Ⲇ * 124.76704406738281, Ⲇ * 335.0000305175781, 112.76704406738281 * Ⲇ, Ⲇ * 359.0000305175781, Ⲇ * 93.76704406738281);
		Δ.bezierCurveTo(Ⲇ * 359.5000305175781, 113.26704406738281 * Ⲇ, 359.5000305175781 * Ⲇ, 113.26704406738281 * Ⲇ, 360.0000305175781 * Ⲇ, 132.7670440673828 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 339.0000305175781, 177.7670440673828 * Ⲇ, Ⲇ * 281.0000305175781, 178.7670440673828 * Ⲇ, Ⲇ * 243.00003051757812, Ⲇ * 183.7670440673828);
		Δ.bezierCurveTo(Ⲇ * 214.50003051757812, 214.2670440673828 * Ⲇ, 214.50003051757812 * Ⲇ, 214.2670440673828 * Ⲇ, Ⲇ * 186.00003051757812, 244.7670440673828 * Ⲇ);
		Δ.bezierCurveTo(155.00003051757812 * Ⲇ, Ⲇ * 214.2670440673828, Ⲇ * 155.00003051757812, 214.2670440673828 * Ⲇ, Ⲇ * 124.00003051757812, 183.7670440673828 * Ⲇ);
		Δ.bezierCurveTo(51.000030517578125 * Ⲇ, 180.7670440673828 * Ⲇ, 21.000030517578125 * Ⲇ, 161.7670440673828 * Ⲇ, Ⲇ * 9.000030517578125, 129.7670440673828 * Ⲇ);
		Δ.bezierCurveTo(8.500030517578125 * Ⲇ, 110.76704406738281 * Ⲇ, 8.500030517578125 * Ⲇ, 110.76704406738281 * Ⲇ, Ⲇ * 8.000030517578125, Ⲇ * 91.76704406738281);
		Δ.bezierCurveTo(Ⲇ * 31.000030517578125, 112.76704406738281 * Ⲇ, 87.00003051757812 * Ⲇ, Ⲇ * 119.76704406738281, Ⲇ * 116.00003051757812, Ⲇ * 117.76704406738281);
		Δ.bezierCurveTo(175.00003051757812 * Ⲇ, 18.767044067382812 * Ⲇ, 170.00003051757812 * Ⲇ, Ⲇ * 23.767044067382812, Ⲇ * 181.00003051757812, Ⲇ * 14.767044067382812);
		Δ.bezierCurveTo(199.00003051757812 * Ⲇ, 34.76704406738281 * Ⲇ, Ⲇ * 203.00003051757812, 54.76704406738281 * Ⲇ, Ⲇ * 247.00003051757812, Ⲇ * 115.76704406738281);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], Ⲇ * ⲆΔᐃⵠΔ);
		Δ.translate(Ⲇⵠᐃ * Ⲇ, -ΔⵠᐃⲆΔ * Ⲇ);
		Δ.globalAlpha = ΔᐃⵠⲆ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 107.00003051757812, 54.13069152832031 * Ⲇ);
		Δ.bezierCurveTo(106.50003051757812 * Ⲇ, 38.63069152832031 * Ⲇ, Ⲇ * 106.50003051757812, Ⲇ * 38.63069152832031, Ⲇ * 106.00003051757812, 23.130691528320312 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 121.50003051757812, 38.13069152832031 * Ⲇ, Ⲇ * 121.50003051757812, 38.13069152832031 * Ⲇ, Ⲇ * 137.00003051757812, 53.13069152832031 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ⵠᐃⵠⵠ], ᐃᐃᐃⲆⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(233.00003051757812 * Ⲇ, 53.6761474609375 * Ⲇ);
		Δ.bezierCurveTo(247.00003051757812 * Ⲇ, 37.1761474609375 * Ⲇ, 247.00003051757812 * Ⲇ, Ⲇ * 37.1761474609375, 261.0000305175781 * Ⲇ, Ⲇ * 20.6761474609375);
		Δ.bezierCurveTo(Ⲇ * 261.0000305175781, 36.1761474609375 * Ⲇ, 261.0000305175781 * Ⲇ, 36.1761474609375 * Ⲇ, Ⲇ * 261.0000305175781, Ⲇ * 51.6761474609375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[3], 10 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(293.0000305175781 * Ⲇ, 54.403411865234375 * Ⲇ);
		Δ.bezierCurveTo(300.0000305175781 * Ⲇ, Ⲇ * 49.903411865234375, Ⲇ * 300.0000305175781, Ⲇ * 49.903411865234375, 307.0000305175781 * Ⲇ, Ⲇ * 45.403411865234375);
		Δ.bezierCurveTo(307.0000305175781 * Ⲇ, Ⲇ * 49.903411865234375, Ⲇ * 307.0000305175781, 49.903411865234375 * Ⲇ, 307.0000305175781 * Ⲇ, 54.403411865234375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ⵠⵠΔⲆ], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(77.00003051757812 * Ⲇ, Ⲇ * 54.403411865234375);
		Δ.bezierCurveTo(Ⲇ * 70.00003051757812, 50.403411865234375 * Ⲇ, 70.00003051757812 * Ⲇ, Ⲇ * 50.403411865234375, Ⲇ * 63.000030517578125, 46.403411865234375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 62.500030517578125, 50.903411865234375 * Ⲇ, Ⲇ * 62.500030517578125, Ⲇ * 50.903411865234375, 62.000030517578125 * Ⲇ, 55.403411865234375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⲆ], Δⵠ[ᐃΔᐃⲆ], ΔΔᐃⵠⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(58.000030517578125 * Ⲇ, Ⲇ * 122.3125);
		Δ.bezierCurveTo(59.500030517578125 * Ⲇ, 97.3125 * Ⲇ, 59.500030517578125 * Ⲇ, Ⲇ * 97.3125, 61.000030517578125 * Ⲇ, 72.3125 * Ⲇ);
		Δ.bezierCurveTo(91.00003051757812 * Ⲇ, Ⲇ * 89.3125, Ⲇ * 91.00003051757812, 89.3125 * Ⲇ, Ⲇ * 121.00003051757812, Ⲇ * 106.3125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆⵠⲆ], Ⲇ * ΔΔⲆΔΔ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(310.0000305175781 * Ⲇ, 127.3125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 308.0000305175781, 98.3125 * Ⲇ, 308.0000305175781 * Ⲇ, 98.3125 * Ⲇ, Ⲇ * 306.0000305175781, 69.3125 * Ⲇ);
		Δ.bezierCurveTo(274.5000305175781 * Ⲇ, 88.8125 * Ⲇ, 274.5000305175781 * Ⲇ, 88.8125 * Ⲇ, Ⲇ * 243.00003051757812, 108.3125 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⲆ], Δⵠ[ⲆⲆⵠ], Ⲇ * ⵠΔΔᐃᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(226.00003051757812 * Ⲇ, Ⲇ * 87.85795593261719);
		Δ.bezierCurveTo(Ⲇ * 243.50003051757812, 66.85795593261719 * Ⲇ, Ⲇ * 243.50003051757812, 66.85795593261719 * Ⲇ, 261.0000305175781 * Ⲇ, 45.85795593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 265.0000305175781, 83.85795593261719 * Ⲇ, 265.0000305175781 * Ⲇ, Ⲇ * 83.85795593261719, Ⲇ * 269.0000305175781, Ⲇ * 121.85795593261719);
		Δ.bezierCurveTo(Ⲇ * 235.00003051757812, Ⲇ * 122.85795593261719, Ⲇ * 233.00003051757812, Ⲇ * 107.85795593261719, 228.00003051757812 * Ⲇ, Ⲇ * 90.85795593261719);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ᐃᐃΔΔ], Ⲇ * ⲆΔⲆᐃⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 105.00003051757812, 128.8579559326172 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 104.50003051757812, Ⲇ * 87.85795593261719, 104.50003051757812 * Ⲇ, 87.85795593261719 * Ⲇ, 104.00003051757812 * Ⲇ, Ⲇ * 46.85795593261719);
		Δ.bezierCurveTo(Ⲇ * 126.50003051757812, Ⲇ * 69.35795593261719, Ⲇ * 126.50003051757812, 69.35795593261719 * Ⲇ, Ⲇ * 149.00003051757812, 91.85795593261719 * Ⲇ);
		Δ.bezierCurveTo(130.00003051757812 * Ⲇ, 123.85795593261719 * Ⲇ, Ⲇ * 123.00003051757812, 132.8579559326172 * Ⲇ, 107.00003051757812 * Ⲇ, 130.8579559326172 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⲆ], Δⵠ[ΔΔⵠ], ⵠΔΔᐃᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(59.000030517578125 * Ⲇ, Ⲇ * 121.85795593261719);
		Δ.bezierCurveTo(Ⲇ * 59.500030517578125, Ⲇ * 99.35795593261719, Ⲇ * 59.500030517578125, 99.35795593261719 * Ⲇ, Ⲇ * 60.000030517578125, 76.85795593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 84.00003051757812, 92.35795593261719 * Ⲇ, Ⲇ * 84.00003051757812, Ⲇ * 92.35795593261719, 108.00003051757812 * Ⲇ, Ⲇ * 107.85795593261719);
		Δ.bezierCurveTo(106.00003051757812 * Ⲇ, Ⲇ * 148.8579559326172, Ⲇ * 86.00003051757812, Ⲇ * 148.8579559326172, 62.000030517578125 * Ⲇ, Ⲇ * 123.85795593261719);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⲆⵠΔ], Δⵠ[ⵠᐃⵠⵠ], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 105.00003051757812, Ⲇ * 132.8579559326172);
		Δ.bezierCurveTo(104.50003051757812 * Ⲇ, 93.35795593261719 * Ⲇ, 104.50003051757812 * Ⲇ, Ⲇ * 93.35795593261719, 104.00003051757812 * Ⲇ, Ⲇ * 53.85795593261719);
		Δ.bezierCurveTo(126.50003051757812 * Ⲇ, 75.85795593261719 * Ⲇ, Ⲇ * 126.50003051757812, Ⲇ * 75.85795593261719, 149.00003051757812 * Ⲇ, Ⲇ * 97.85795593261719);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[3], ⵠⵠⵠΔΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(311.0000305175781 * Ⲇ, 126.85795593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 309.0000305175781, Ⲇ * 101.35795593261719, Ⲇ * 309.0000305175781, Ⲇ * 101.35795593261719, 307.0000305175781 * Ⲇ, 75.85795593261719 * Ⲇ);
		Δ.bezierCurveTo(271.0000305175781 * Ⲇ, 96.85795593261719 * Ⲇ, Ⲇ * 271.0000305175781, Ⲇ * 96.85795593261719, Ⲇ * 235.00003051757812, Ⲇ * 117.85795593261719);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃᐃⲆ], Δⵠ[3], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(228.00003051757812 * Ⲇ, Ⲇ * 96.85795593261719);
		Δ.bezierCurveTo(Ⲇ * 244.50003051757812, Ⲇ * 74.85795593261719, 244.50003051757812 * Ⲇ, Ⲇ * 74.85795593261719, Ⲇ * 261.0000305175781, Ⲇ * 52.85795593261719);
		Δ.bezierCurveTo(265.5000305175781 * Ⲇ, 89.85795593261719 * Ⲇ, 265.5000305175781 * Ⲇ, 89.85795593261719 * Ⲇ, Ⲇ * 270.0000305175781, Ⲇ * 126.85795593261719);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔΔ], Δⵠ[ⵠⲆᐃΔ], Ⲇ * ⵠᐃⲆⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 12.000030517578125, Ⲇ * 86.13069152832031);
		Δ.bezierCurveTo(36.000030517578125 * Ⲇ, Ⲇ * 113.13069152832031, 84.00003051757812 * Ⲇ, Ⲇ * 111.13069152832031, Ⲇ * 116.00003051757812, Ⲇ * 113.13069152832031);
		Δ.bezierCurveTo(164.00003051757812 * Ⲇ, Ⲇ * 23.130691528320312, Ⲇ * 172.00003051757812, Ⲇ * 18.130691528320312, 181.00003051757812 * Ⲇ, Ⲇ * 9.130691528320312);
		Δ.bezierCurveTo(199.00003051757812 * Ⲇ, Ⲇ * 29.130691528320312, Ⲇ * 221.00003051757812, 78.13069152832031 * Ⲇ, Ⲇ * 247.00003051757812, 112.13069152832031 * Ⲇ);
		Δ.bezierCurveTo(301.0000305175781 * Ⲇ, Ⲇ * 122.13069152832031, Ⲇ * 338.0000305175781, Ⲇ * 111.13069152832031, Ⲇ * 359.0000305175781, Ⲇ * 94.13069152832031);
		Δ.bezierCurveTo(359.0000305175781 * Ⲇ, 113.13069152832031 * Ⲇ, Ⲇ * 358.5000305175781, 105.13069152832031 * Ⲇ, 358.0000305175781 * Ⲇ, Ⲇ * 116.13069152832031);
		Δ.bezierCurveTo(Ⲇ * 270.5000305175781, 130.1306915283203 * Ⲇ, Ⲇ * 270.5000305175781, 130.1306915283203 * Ⲇ, Ⲇ * 183.00003051757812, 144.1306915283203 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 98.00003051757812, Ⲇ * 128.6306915283203, Ⲇ * 98.00003051757812, Ⲇ * 128.6306915283203, Ⲇ * 13.000030517578125, 113.13069152832031 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠᐃᐃ], Δⵠ[Δⵠᐃ], Ⲇ * ᐃᐃⵠΔⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(247.00003051757812 * Ⲇ, Ⲇ * 115.76704406738281);
		Δ.bezierCurveTo(Ⲇ * 305.0000305175781, 124.76704406738281 * Ⲇ, Ⲇ * 335.0000305175781, 112.76704406738281 * Ⲇ, 359.0000305175781 * Ⲇ, Ⲇ * 93.76704406738281);
		Δ.bezierCurveTo(359.5000305175781 * Ⲇ, Ⲇ * 113.26704406738281, 359.5000305175781 * Ⲇ, 113.26704406738281 * Ⲇ, 360.0000305175781 * Ⲇ, 132.7670440673828 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 339.0000305175781, 177.7670440673828 * Ⲇ, 281.0000305175781 * Ⲇ, 178.7670440673828 * Ⲇ, 243.00003051757812 * Ⲇ, 183.7670440673828 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 214.50003051757812, 214.2670440673828 * Ⲇ, Ⲇ * 214.50003051757812, 214.2670440673828 * Ⲇ, 186.00003051757812 * Ⲇ, 244.7670440673828 * Ⲇ);
		Δ.bezierCurveTo(155.00003051757812 * Ⲇ, 214.2670440673828 * Ⲇ, Ⲇ * 155.00003051757812, Ⲇ * 214.2670440673828, 124.00003051757812 * Ⲇ, 183.7670440673828 * Ⲇ);
		Δ.bezierCurveTo(51.000030517578125 * Ⲇ, 180.7670440673828 * Ⲇ, Ⲇ * 21.000030517578125, Ⲇ * 161.7670440673828, Ⲇ * 9.000030517578125, Ⲇ * 129.7670440673828);
		Δ.bezierCurveTo(8.500030517578125 * Ⲇ, 110.76704406738281 * Ⲇ, 8.500030517578125 * Ⲇ, Ⲇ * 110.76704406738281, 8.000030517578125 * Ⲇ, Ⲇ * 91.76704406738281);
		Δ.bezierCurveTo(31.000030517578125 * Ⲇ, 112.76704406738281 * Ⲇ, Ⲇ * 87.00003051757812, Ⲇ * 119.76704406738281, Ⲇ * 116.00003051757812, 117.76704406738281 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 175.00003051757812, 18.767044067382812 * Ⲇ, 170.00003051757812 * Ⲇ, 23.767044067382812 * Ⲇ, 181.00003051757812 * Ⲇ, Ⲇ * 14.767044067382812);
		Δ.bezierCurveTo(Ⲇ * 199.00003051757812, 34.76704406738281 * Ⲇ, Ⲇ * 203.00003051757812, 54.76704406738281 * Ⲇ, Ⲇ * 247.00003051757812, 115.76704406738281 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ⵠⵠⲆᐃ], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(27.000030517578125 * Ⲇ, 94.76704406738281 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 11.000030517578125, Ⲇ * 81.76704406738281, Ⲇ * 31.000030517578125, 72.76704406738281 * Ⲇ, 44.000030517578125 * Ⲇ, 59.76704406738281 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 9.000030517578125, 65.76704406738281 * Ⲇ, 4.000030517578125 * Ⲇ, Ⲇ * 78.76704406738281, Ⲇ * 9.000030517578125, 89.76704406738281 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ᐃΔᐃΔ], Ⲇ * ΔⲆΔΔᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 352.0000305175781, Ⲇ * 100.76705932617188);
		Δ.bezierCurveTo(362.0000305175781 * Ⲇ, Ⲇ * 92.76705932617188, 352.0000305175781 * Ⲇ, Ⲇ * 84.76705932617188, Ⲇ * 340.0000305175781, Ⲇ * 68.76705932617188);
		Δ.bezierCurveTo(360.0000305175781 * Ⲇ, Ⲇ * 69.76705932617188, 364.0000305175781 * Ⲇ, Ⲇ * 79.76705932617188, 364.0000305175781 * Ⲇ, 94.76705932617188 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⲆ], Δⵠ[ⲆⵠⲆ], 1 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 25.000030517578125, Ⲇ * 97.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 2.000030517578125, Ⲇ * 76.94886779785156, Ⲇ * 29.000030517578125, 62.94886779785156 * Ⲇ, 44.000030517578125 * Ⲇ, Ⲇ * 59.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 8.000030517578125, Ⲇ * 59.94886779785156, Ⲇ * -.999969482421875, Ⲇ * 81.94886779785156, Ⲇ * 4.000030517578125, Ⲇ * 92.94886779785156);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(349.0000305175781 * Ⲇ, 100.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(366.0000305175781 * Ⲇ, 82.94886779785156 * Ⲇ, 353.0000305175781 * Ⲇ, Ⲇ * 76.94886779785156, 337.0000305175781 * Ⲇ, Ⲇ * 67.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 366.0000305175781, 69.94886779785156 * Ⲇ, Ⲇ * 366.0000305175781, Ⲇ * 83.94886779785156, Ⲇ * 363.0000305175781, Ⲇ * 101.94886779785156);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆⵠ], Δⵠ[ⲆⲆΔΔ], Ⲇ * ᐃᐃⵠΔⵠ);
		ⵠΔᐃ(Δ, 46.000030517578125 * Ⲇ, Ⲇ * 137.5852279663086, 9.219544457292887 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ⲆⵠⲆᐃ], Ⲇ * ⲆⲆΔⵠ);
		ⵠΔᐃ(Δ, 308.0000305175781 * Ⲇ, 141.5852279663086 * Ⲇ, 8.54400374531753 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], 1 * Ⲇ);
		ⵠΔᐃ(Δ, 92.00003051757812 * Ⲇ, 149.58523559570312 * Ⲇ, 14.866068747318506 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔΔΔⵠ], Δⵠ[ⵠⲆⲆⵠ], Δⵠᐃ * Ⲇ);
		ⵠΔᐃ(Δ, 262.0000305175781 * Ⲇ, 148.8579559326172 * Ⲇ, Ⲇ * 15.620499351813308);
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], Ⲇ * 1);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(184.00003051757812 * Ⲇ, 68.85795593261719 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 203.00003051757812, 108.85795593261719 * Ⲇ, Ⲇ * 203.00003051757812, 108.85795593261719 * Ⲇ, Ⲇ * 222.00003051757812, Ⲇ * 148.8579559326172);
		Δ.bezierCurveTo(202.50003051757812 * Ⲇ, Ⲇ * 177.8579559326172, 202.50003051757812 * Ⲇ, Ⲇ * 177.8579559326172, Ⲇ * 183.00003051757812, 206.8579559326172 * Ⲇ);
		Δ.bezierCurveTo(162.00003051757812 * Ⲇ, 178.8579559326172 * Ⲇ, 162.00003051757812 * Ⲇ, Ⲇ * 178.8579559326172, 141.00003051757812 * Ⲇ, 150.8579559326172 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], ⲆΔⲆᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 183.00003051757812, 104.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 192.50003051757812, Ⲇ * 125.44886779785156, 192.50003051757812 * Ⲇ, Ⲇ * 125.44886779785156, Ⲇ * 202.00003051757812, Ⲇ * 145.94886779785156);
		Δ.bezierCurveTo(Ⲇ * 192.00003051757812, 163.94886779785156 * Ⲇ, Ⲇ * 192.00003051757812, Ⲇ * 163.94886779785156, 182.00003051757812 * Ⲇ, 181.94886779785156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 172.50003051757812, 164.44886779785156 * Ⲇ, 172.50003051757812 * Ⲇ, 164.44886779785156 * Ⲇ, Ⲇ * 163.00003051757812, Ⲇ * 146.94886779785156);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⵠⵠ]);
		return ᐃⵠ
	}

	function ⲆⲆⵠⲆΔⲆⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ, ΔⲆΔ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 501 * Ⲇ;
		ᐃⵠ.height = 564 * Ⲇ;
		Δ.scale(.5, .5);
		Δ.translate(240 * Ⲇ, Ⲇ * ⲆⲆⲆⵠᐃ);
		Δ.rotate(ΔⲆΔ);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : .2;
		ⵠΔᐃ(Δ, 174 * Ⲇ, Ⲇ * 87.984375, Ⲇ * 20.8806130178211);
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], Ⲇ * ⲆⵠΔᐃⵠⵠΔ);
		ⵠΔᐃ(Δ, Ⲇ * 174, Ⲇ * 87.984375, 12.165525060596439 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆⵠ], Δⵠ[ⵠΔⵠᐃ], Ⲇ * 8);
		ⵠΔᐃ(Δ, Ⲇ * 174, 87.484375 * Ⲇ, Ⲇ * ᐃⲆΔⵠⵠ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠ]);
		ⵠΔᐃ(Δ, Ⲇ * 30, 87.984375 * Ⲇ, 20.8806130178211 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[0], Ⲇ * ΔΔᐃⵠΔ);
		ⵠΔᐃ(Δ, Ⲇ * 30, Ⲇ * 87.984375, 12.165525060596439 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⵠΔⵠᐃ], ᐃᐃⵠΔ * Ⲇ);
		ⵠΔᐃ(Δ, 30 * Ⲇ, Ⲇ * 87.484375, Ⲇ * ⲆⲆᐃⵠⵠ);
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⲆ]);
		ⵠΔᐃ(Δ, Ⲇ * ⲆⵠⲆⵠᐃ, 30 * Ⲇ, Ⲇ * 20.8806130178211);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ], Δⵠ[ⵠᐃΔ], 4 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * ᐃᐃΔⵠⵠ, Ⲇ * 30, 12.165525060596439 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆᐃ], Δⵠ[ⵠᐃⲆⵠ], ΔΔⲆΔ * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 100, 30 * Ⲇ, Ⲇ * ᐃᐃⲆⲆⲆ);
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
		ⵠΔᐃ(Δ, 100 * Ⲇ, Ⲇ * 130, Ⲇ * 20.8806130178211);
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔᐃ], Δⵠ[ⲆᐃΔⵠ], ΔⲆⲆⲆ * Ⲇ);
		ⵠΔᐃ(Δ, 100 * Ⲇ, Ⲇ * 130, 12.165525060596439 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[ⲆᐃΔⵠ], 4 * Ⲇ);
		ⵠΔᐃ(Δ, ⵠⵠⲆᐃⵠ * Ⲇ, 130 * Ⲇ, ΔΔΔᐃΔ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆⵠ]);
		Δ.save();
		Δ.translate(Ⲇ * 102, 81.984375 * Ⲇ);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, -74 * Ⲇ, -57 * Ⲇ, Ⲇ * 148, 114 * Ⲇ, Ⲇ * 23);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃ], Δⵠ[ⵠⵠᐃ], ᐃᐃᐃᐃΔ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 101, 64.984375 * Ⲇ);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, Ⲇ * -33, Ⲇ * -10, Ⲇ * 66, ⵠⲆᐃⲆⵠ * Ⲇ, ⵠⵠⲆΔⵠ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆΔ], Δⵠ[0], Ⲇ * 4);
		Δ.save();
		Δ.translate(102 * Ⲇ, 63.484375 * Ⲇ);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, Ⲇ * -ⵠⲆⲆΔᐃΔᐃ, Ⲇ * -27.5, 18 * Ⲇ, Ⲇ * 55, 15 * Ⲇ);
		Δ.restore();
		Δ.translate(5, -5);
		Δ.globalAlpha = ⲆⲆᐃⵠ;
		ⵠΔᐃ(Δ, Ⲇ * 174, Ⲇ * 87.984375, Ⲇ * 20.8806130178211);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⲆΔⲆⲆ], 8 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 174, Ⲇ * 87.984375, 12.165525060596439 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃΔΔⲆ], Δⵠ[3], 8 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 174, 87.484375 * Ⲇ, Ⲇ * ᐃⲆΔⵠΔ);
		ⵠᐃ(Δ, Δⵠ[2]);
		ⵠΔᐃ(Δ, Ⲇ * 30, Ⲇ * 87.984375, 20.8806130178211 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[ⵠⵠⲆᐃ], Ⲇ * 8);
		ⵠΔᐃ(Δ, Ⲇ * 30, 87.984375 * Ⲇ, 12.165525060596439 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⵠ], Δⵠ[3], Ⲇ * 8);
		ⵠΔᐃ(Δ, Ⲇ * 30, Ⲇ * 87.484375, Ⲇ * ΔΔΔᐃΔ);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃⲆ]);
		ⵠΔᐃ(Δ, 102 * Ⲇ, Ⲇ * 30, Ⲇ * 20.8806130178211);
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⲆ], Δⵠ[3], ᐃΔᐃⵠⲆ * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 102, 30 * Ⲇ, Ⲇ * 12.165525060596439);
		ⵠᐃ(Δ, Δⵠ[ᐃⵠⵠⵠ], Δⵠ[ⵠⵠⲆⲆ], 8 * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 102, 30 * Ⲇ, Ⲇ * ᐃⲆΔⵠⵠ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔⵠ]);
		ⵠΔᐃ(Δ, 102 * Ⲇ, 130 * Ⲇ, Ⲇ * 20.8806130178211);
		ⵠᐃ(Δ, Δⵠ[ᐃΔⲆΔ], Δⵠ[3], ΔᐃⵠΔⵠ * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 102, 130 * Ⲇ, Ⲇ * 12.165525060596439);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[3], 8 * Ⲇ);
		ⵠΔᐃ(Δ, 102 * Ⲇ, 130 * Ⲇ, 6 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[Δⵠᐃ]);
		Δ.save();
		Δ.translate(102 * Ⲇ, Ⲇ * 81.984375);
		ᐃΔⵠ(Δ, -74 * Ⲇ, Ⲇ * -57, 148 * Ⲇ, 114 * Ⲇ, Ⲇ * 23);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[ⲆⵠⵠⲆ], ⵠⲆⲆᐃᐃ * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 101, Ⲇ * 64.984375);
		ᐃΔⵠ(Δ, Ⲇ * -33, -10 * Ⲇ, Ⲇ * 66, Ⲇ * 20, ⲆⲆⲆᐃΔΔΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[1], 8 * Ⲇ);
		Δ.save();
		Δ.translate(102 * Ⲇ, 63.484375 * Ⲇ);
		ᐃΔⵠ(Δ, -ΔⲆΔᐃΔ * Ⲇ, Ⲇ * -27.5, Ⲇ * ᐃⵠⲆⲆΔ, Ⲇ * 55, Ⲇ * 15);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ΔᐃⵠⲆ], ΔⲆⵠⵠⵠΔᐃ * Ⲇ);
		ⵠΔᐃ(Δ, 135 * Ⲇ, Ⲇ * 107.36605834960938, Ⲇ * 21.095023109728988);
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⲆ], Δⵠ[ⵠⵠⲆᐃ], ᐃⲆᐃⵠᐃ * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 135, 107.36605834960938 * Ⲇ, ⵠⵠᐃΔΔ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[3], ⵠΔΔᐃⲆ * Ⲇ);
		ⵠΔᐃ(Δ, Ⲇ * 135, Ⲇ * 107.36605834960938, 6.082762530298219 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2]);
		ⵠΔᐃ(Δ, 70 * Ⲇ, Ⲇ * 107.36605834960938, 21.095023109728988 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ⵠⵠⲆⲆ], Ⲇ * 8);
		ⵠΔᐃ(Δ, 70 * Ⲇ, 107.36605834960938 * Ⲇ, Ⲇ * ⵠⵠⲆΔᐃΔᐃ);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[3], Ⲇ * 8);
		ⵠΔᐃ(Δ, Ⲇ * 70, Ⲇ * 107.36605834960938, Ⲇ * 6.082762530298219);
		ⵠᐃ(Δ, Δⵠ[ΔΔᐃⲆⵠ]);
		return ᐃⵠ
	}

	function ΔⲆⵠΔᐃⲆᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 175 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 106;
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : 1;
		Δ.translate(0, ⵠᐃᐃᐃᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(28 * Ⲇ, Ⲇ * 67);
		Δ.bezierCurveTo(Ⲇ * 55, 80 * Ⲇ, 126 * Ⲇ, 74 * Ⲇ, 144 * Ⲇ, Ⲇ * 68);
		Δ.bezierCurveTo(144.5 * Ⲇ, Ⲇ * 75, 144.5 * Ⲇ, Ⲇ * 75, Ⲇ * 145, 82 * Ⲇ);
		Δ.bezierCurveTo(114 * Ⲇ, Ⲇ * 94, 47 * Ⲇ, 91 * Ⲇ, 28 * Ⲇ, 82 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = ᐃΔΔⲆ;
		Δ.translate(Ⲇⵠⵠᐃ, -ᐃⲆᐃⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(145 * Ⲇ, 75 * Ⲇ);
		Δ.bezierCurveTo(143 * Ⲇ, Ⲇ * 51, Ⲇ * 133, 29 * Ⲇ, ΔⵠⵠΔᐃ * Ⲇ, Ⲇ * 27);
		Δ.bezierCurveTo(Ⲇ * 52, Ⲇ * 21, Ⲇ * 37, 37 * Ⲇ, 31 * Ⲇ, Ⲇ * 54);
		Δ.bezierCurveTo(Ⲇ * 23, 78 * Ⲇ, Ⲇ * 28, 77 * Ⲇ, Ⲇ * 36, 79 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 80, 87 * Ⲇ, Ⲇ * 120, 81 * Ⲇ, 145 * Ⲇ, Ⲇ * 76);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠΔΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(38 * Ⲇ, 46 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 52, Ⲇ * 37, Ⲇ * 69, Ⲇ * 36, Ⲇ * 85, Ⲇ * 36);
		Δ.bezierCurveTo(Ⲇ * 118, 38 * Ⲇ, 129 * Ⲇ, 42 * Ⲇ, Ⲇ * 137, Ⲇ * 48);
		Δ.bezierCurveTo(135 * Ⲇ, Ⲇ * 45, 135 * Ⲇ, Ⲇ * 45, Ⲇ * 133, Ⲇ * 42);
		Δ.bezierCurveTo(124 * Ⲇ, 32 * Ⲇ, Ⲇ * 116, 28 * Ⲇ, Ⲇ * 88, Ⲇ * 25);
		Δ.bezierCurveTo(Ⲇ * 47, 28 * Ⲇ, 40 * Ⲇ, 32 * Ⲇ, 36 * Ⲇ, Ⲇ * 44);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(145 * Ⲇ, Ⲇ * 75);
		Δ.bezierCurveTo(143 * Ⲇ, Ⲇ * 51, Ⲇ * 133, Ⲇ * 29, 100 * Ⲇ, Ⲇ * 27);
		Δ.bezierCurveTo(52 * Ⲇ, Ⲇ * 21, 37 * Ⲇ, Ⲇ * 37, 31 * Ⲇ, 54 * Ⲇ);
		Δ.bezierCurveTo(23 * Ⲇ, 78 * Ⲇ, Ⲇ * 28, Ⲇ * 77, 36 * Ⲇ, 79 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 80, 87 * Ⲇ, Ⲇ * 120, 81 * Ⲇ, Ⲇ * 145, 76 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ΔΔⲆⲆⲆ, Δⵠ[Ⲇᐃⵠⵠ], ΔⲆΔⲆ * Ⲇ);
		Δ.translate(0, -ⵠⲆᐃΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 28, Ⲇ * 67);
		Δ.bezierCurveTo(Ⲇ * 55, 80 * Ⲇ, 126 * Ⲇ, Ⲇ * 74, Ⲇ * 144, 68 * Ⲇ);
		Δ.bezierCurveTo(144.5 * Ⲇ, Ⲇ * 75, 144.5 * Ⲇ, 75 * Ⲇ, 145 * Ⲇ, 82 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 114, Ⲇ * 94, Ⲇ * 47, 91 * Ⲇ, Ⲇ * 28, Ⲇ * 82);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[10], Δⵠ[ⲆΔⲆᐃⵠ], ⵠΔⲆᐃⲆ * Ⲇ);
		Δ.translate(0, Ⲇ * 3);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(131 * Ⲇ, Ⲇ * 43);
		Δ.bezierCurveTo(145 * Ⲇ, Ⲇ * 40, Ⲇ * 148, 32 * Ⲇ, Ⲇ * 147, ΔΔΔΔᐃ * Ⲇ);
		Δ.bezierCurveTo(166 * Ⲇ, Ⲇ * 39, Ⲇ * 155, Ⲇ * 62, 140 * Ⲇ, 67 * Ⲇ);
		Δ.bezierCurveTo(128 * Ⲇ, Ⲇ * 65, 128 * Ⲇ, 52 * Ⲇ, Ⲇ * 131, Ⲇ * 45);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(41 * Ⲇ, 43 * Ⲇ);
		Δ.bezierCurveTo(30 * Ⲇ, Ⲇ * 42, 24 * Ⲇ, 33 * Ⲇ, 25 * Ⲇ, ᐃⲆᐃⵠⲆΔΔ * Ⲇ);
		Δ.bezierCurveTo(ᐃᐃⲆΔΔ * Ⲇ, Ⲇ * 34, Ⲇ * ΔᐃΔⵠΔᐃⲆ, 63 * Ⲇ, 33 * Ⲇ, 66 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 45, 59 * Ⲇ, Ⲇ * 44, 53 * Ⲇ, Ⲇ * 42, 44 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(24 * Ⲇ, 19 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 24, 35 * Ⲇ, 35 * Ⲇ, Ⲇ * 42, 42 * Ⲇ, Ⲇ * 44);
		Δ.bezierCurveTo(Ⲇ * 43, Ⲇ * 51, 43 * Ⲇ, Ⲇ * 48, 43 * Ⲇ, Ⲇ * 56);
		Δ.bezierCurveTo(Ⲇ * 25, 47 * Ⲇ, ΔᐃΔⵠΔᐃⲆ * Ⲇ, Ⲇ * 36, Ⲇ * 23, 20 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔⵠⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 148, 18 * Ⲇ);
		Δ.bezierCurveTo(159 * Ⲇ, 44 * Ⲇ, 139 * Ⲇ, Ⲇ * 52, 130 * Ⲇ, 55 * Ⲇ);
		Δ.bezierCurveTo(129 * Ⲇ, 48 * Ⲇ, 129 * Ⲇ, 46 * Ⲇ, 131 * Ⲇ, Ⲇ * 43);
		Δ.bezierCurveTo(144 * Ⲇ, Ⲇ * 37, Ⲇ * 148, Ⲇ * 35, 147 * Ⲇ, Ⲇ * 18);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(131 * Ⲇ, Ⲇ * 43);
		Δ.bezierCurveTo(145 * Ⲇ, 40 * Ⲇ, Ⲇ * 148, 32 * Ⲇ, Ⲇ * 147, 17 * Ⲇ);
		Δ.bezierCurveTo(166 * Ⲇ, Ⲇ * 39, Ⲇ * 155, 62 * Ⲇ, Ⲇ * 140, 67 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 128, Ⲇ * 65, Ⲇ * 128, Ⲇ * 52, Ⲇ * 131, 45 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃⲆⲆΔᐃ, Δⵠ[ΔⲆΔⲆ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(41 * Ⲇ, 43 * Ⲇ);
		Δ.bezierCurveTo(30 * Ⲇ, Ⲇ * 42, Ⲇ * 24, 33 * Ⲇ, 25 * Ⲇ, Ⲇ * ⵠΔⲆᐃⵠ);
		Δ.bezierCurveTo(Ⲇ * ΔⵠᐃΔⲆ, Ⲇ * 34, Ⲇ * ⵠΔⲆᐃⵠ, Ⲇ * 63, Ⲇ * 33, Ⲇ * 66);
		Δ.bezierCurveTo(Ⲇ * 45, 59 * Ⲇ, 44 * Ⲇ, 53 * Ⲇ, Ⲇ * 42, Ⲇ * 44);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[4], Ⲇ * 4);
		Δ.save();
		Δ.translate(87 * Ⲇ, 34.5 * Ⲇ);
		Δ.rotate(0);
		ᐃΔⵠ(Δ, -ⵠΔΔᐃⲆ * Ⲇ, -10.5 * Ⲇ, ΔᐃⵠⲆᐃⵠᐃ * Ⲇ, Ⲇ * 21, Ⲇ * ΔⲆΔΔᐃ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[7], Δⵠ[2], 4 * Ⲇ);
		Δ.save();
		Δ.translate(Ⲇ * 87, Ⲇ * 57);
		Δ.rotate(ⵠᐃⲆⵠ);
		ᐃΔⵠ(Δ, Ⲇ * -ⲆᐃⲆᐃᐃ, -23 * Ⲇ, ᐃⵠΔⲆΔΔⵠ * Ⲇ, 46 * Ⲇ, ⵠᐃⲆⲆΔ * Ⲇ);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[2], 4 * Ⲇ);
		ⵠΔᐃ(Δ, 87 * Ⲇ, 39 * Ⲇ, 4.123105625617661 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[9], Δⵠ[2], Ⲇ * 4);
		ⵠΔᐃ(Δ, Ⲇ * 87, 60 * Ⲇ, 4.242640687119285 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[9], Δⵠ[ⲆᐃᐃⲆ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(28 * Ⲇ, 67 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 55, Ⲇ * 80, 126 * Ⲇ, Ⲇ * 74, 144 * Ⲇ, Ⲇ * 68);
		Δ.bezierCurveTo(144.5 * Ⲇ, Ⲇ * 75, 144.5 * Ⲇ, 75 * Ⲇ, 145 * Ⲇ, 82 * Ⲇ);
		Δ.bezierCurveTo(114 * Ⲇ, Ⲇ * 94, 47 * Ⲇ, Ⲇ * 91, 28 * Ⲇ, Ⲇ * 82);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8], Δⵠ[2], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(27 * Ⲇ, 69 * Ⲇ);
		Δ.bezierCurveTo(13 * Ⲇ, Ⲇ * 77, Ⲇ * 16, Ⲇ * 74, Ⲇ * 27, Ⲇ * 80);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃΔⲆⲆ], Δⵠ[ⲆΔⲆΔ], ᐃᐃⵠΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 145, 70 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 149.5, Ⲇ * 72, 149.5 * Ⲇ, 72 * Ⲇ, Ⲇ * 154, Ⲇ * 74);
		Δ.bezierCurveTo(150 * Ⲇ, Ⲇ * 77, Ⲇ * 150, 77 * Ⲇ, Ⲇ * 146, 80 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[9], Δⵠ[2], ΔᐃᐃΔ * Ⲇ);
		ⵠΔᐃ(Δ, 50 * Ⲇ, 80 * Ⲇ, ΔΔⵠⲆΔ * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠᐃᐃΔᐃ], Δⵠ[2], Ⲇ * ΔᐃᐃΔ);
		ⵠΔᐃ(Δ, Ⲇ * 86.01141357421875, Ⲇ * 81.76705932617188, Ⲇ * 5);
		ⵠᐃ(Δ, Δⵠ[ᐃΔⵠⲆⲆ], Δⵠ[ᐃᐃΔⵠ], 4 * Ⲇ);
		ⵠΔᐃ(Δ, 119.01141357421875 * Ⲇ, Ⲇ * 80.13069152832031, 5 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⲆⵠ], Δⵠ[ΔⵠⲆⲆ], ᐃᐃⵠΔ * Ⲇ);
		return ᐃⵠ
	}

	function ⵠΔⵠᐃⲆⵠΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 149 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 153;
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, Ⲇ * 74.5, Ⲇ * 85, Ⲇ * 66);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠΔΔ]);
		Δ.globalAlpha = ΔⲆⵠⲆ;
		ⵠΔᐃ(Δ, 75.5 * Ⲇ, Ⲇ * 72.5, Ⲇ * 67);
		ⵠᐃ(Δ, Δⵠ[ⵠⲆⵠⲆ], Δⵠ[2], Ⲇ * ΔⲆⵠΔⲆ);
		ⵠΔᐃ(Δ, 75.5 * Ⲇ, 73.5 * Ⲇ, Ⲇ * 54);
		ⵠᐃ(Δ, Δⵠ[ᐃΔΔΔ]);
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, 74.5 * Ⲇ, 80.5 * Ⲇ, 39 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[4]);
		Δ.globalAlpha = ⲆⲆⲆᐃ;
		ⵠΔᐃ(Δ, Ⲇ * 74.5, 74.5 * Ⲇ, 37 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⲆΔᐃ]);
		return ᐃⵠ
	}

	function ⲆᐃΔᐃΔ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 120 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 100;
		ᐃΔⵠ(Δ, Ⲇ * 10, ⵠⵠⵠΔΔ * Ⲇ, Ⲇ * 95, 80 * Ⲇ, Ⲇ * ΔⵠⲆᐃΔ);
		ⵠᐃ(Δ, Δⵠ[2]);
		ᐃΔⵠ(Δ, 10 * Ⲇ, Ⲇ * ⲆⵠⲆΔᐃ, Ⲇ * 95, Ⲇ * 80, Ⲇ * ⲆⲆᐃᐃⵠ);
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃΔΔΔⲆ], ᐃΔΔΔⲆ * Ⲇ);
		if (ᐃⲆ == ⵠⵠⵠ) {
			var ⵠⵠ = ᐃⵠⲆΔⲆΔⵠ(Ⲇ * .75, Δⵠ, 0);
			Δ.drawImage(ⵠⵠ, Ⲇ * 22, Ⲇ * ⵠⵠᐃᐃⲆΔⵠ)
		} else if (ᐃⲆ == Δⵠᐃ) {
			var ⵠⵠ = ᐃⵠⲆΔⲆΔⵠ(Ⲇ * .75, Δⵠ, 1);
			Δ.drawImage(ⵠⵠ, Ⲇ * 22, 18 * Ⲇ)
		}
		return ᐃⵠ
	}

	function ⵠⲆᐃⵠⲆ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * ⲆⲆⲆΔⲆ;
		ᐃⵠ.height = Ⲇ * 35;
		ᐃΔⵠ(Δ, 0, ⲆⲆᐃ, ⵠⵠᐃΔᐃ, 35, ᐃⵠᐃⵠⲆⵠΔ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		return ᐃⵠ
	}

	function ᐃⲆΔⵠΔΔΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 120 * Ⲇ;
		ᐃⵠ.height = 300 * Ⲇ;
		Δ.translate(Ⲇ * -80, -ᐃᐃⵠⲆᐃᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 200.5, Ⲇ * 14.953125);
		Δ.bezierCurveTo(203 * Ⲇ, 171.953125 * Ⲇ, Ⲇ * 203, 171.953125 * Ⲇ, Ⲇ * 205.5, Ⲇ * 328.953125);
		Δ.bezierCurveTo(188.5 * Ⲇ, 257.953125 * Ⲇ, 164.5 * Ⲇ, Ⲇ * 216.953125, 166.5 * Ⲇ, 176.953125 * Ⲇ);
		Δ.bezierCurveTo(168.5 * Ⲇ, 133.953125 * Ⲇ, Ⲇ * 198.5, Ⲇ * 98.953125, 200.5 * Ⲇ, Ⲇ * 14.953125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		return ᐃⵠ
	}

	function ᐃⵠΔΔᐃᐃΔΔΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 147 * Ⲇ;
		ᐃⵠ.height = 172 * Ⲇ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(ΔⲆⵠⵠⵠΔᐃ * Ⲇ, Ⲇ * 50);
		Δ.bezierCurveTo(Ⲇ * ΔⲆΔΔΔΔᐃ, Ⲇ * 16, Ⲇ * 49, 6 * Ⲇ, Ⲇ * 67, 6 * Ⲇ);
		Δ.bezierCurveTo(121 * Ⲇ, ΔᐃΔⲆ * Ⲇ, Ⲇ * 128, 32 * Ⲇ, Ⲇ * 135, 48 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 146, 96 * Ⲇ, 124 * Ⲇ, 131 * Ⲇ, 96 * Ⲇ, 135 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 96, 158 * Ⲇ, 79 * Ⲇ, 156 * Ⲇ, 75 * Ⲇ, 156 * Ⲇ);
		Δ.bezierCurveTo(50 * Ⲇ, 154 * Ⲇ, Ⲇ * 53, 150 * Ⲇ, Ⲇ * 52, 135 * Ⲇ);
		Δ.bezierCurveTo(ⵠⵠΔⵠ * Ⲇ, Ⲇ * 127, ᐃΔᐃⲆ * Ⲇ, 87 * Ⲇ, ΔᐃⵠΔⵠ * Ⲇ, 50 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ, Δⵠ, 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(14 * Ⲇ, Ⲇ * 57);
		Δ.bezierCurveTo(2 * Ⲇ, Ⲇ * 50, ⵠⲆⲆⵠ * Ⲇ, Ⲇ * 22, Ⲇ * 24, 22 * Ⲇ);
		Δ.bezierCurveTo(41 * Ⲇ, 21 * Ⲇ, Ⲇ * 54, 32 * Ⲇ, Ⲇ * 55, Ⲇ * 48);
		ⵠᐃ(Δ, Δⵠ, Δⵠ, 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(93 * Ⲇ, Ⲇ * 47);
		Δ.bezierCurveTo(Ⲇ * 94, 24 * Ⲇ, 116 * Ⲇ, 21 * Ⲇ, 120 * Ⲇ, 20 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 144, ᐃⲆΔᐃΔ * Ⲇ, 146 * Ⲇ, 52 * Ⲇ, 133 * Ⲇ, 58 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ, Δⵠ, Ⲇ * 4);
		return ᐃⵠ
	}

	function ⲆᐃᐃᐃΔΔⲆⲆᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 85;
		ᐃⵠ.height = Ⲇ * 145;
		Δ.translate(Ⲇ * -ᐃᐃⲆⵠΔ, -95 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(50 * Ⲇ, 105 * Ⲇ);
		Δ.bezierCurveTo(52 * Ⲇ, 119 * Ⲇ, Ⲇ * 64, Ⲇ * 137, Ⲇ * 71, Ⲇ * 146);
		Δ.bezierCurveTo(Ⲇ * 71, Ⲇ * 161, Ⲇ * 74, Ⲇ * 169, 79 * Ⲇ, Ⲇ * 179);
		Δ.bezierCurveTo(Ⲇ * 68, Ⲇ * 192, Ⲇ * 70, 204 * Ⲇ, Ⲇ * 69, Ⲇ * 216);
		Δ.bezierCurveTo(Ⲇ * 50, Ⲇ * 189.5, 50 * Ⲇ, 189.5 * Ⲇ, Ⲇ * 31, 163 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(44 * Ⲇ, 106 * Ⲇ);
		Δ.bezierCurveTo(49 * Ⲇ, 90 * Ⲇ, 58 * Ⲇ, Ⲇ * 104, Ⲇ * 51, 121 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 45, 143 * Ⲇ, Ⲇ * 41, 151 * Ⲇ, 37 * Ⲇ, 162 * Ⲇ);
		Δ.bezierCurveTo(48 * Ⲇ, 180 * Ⲇ, 58 * Ⲇ, Ⲇ * 188, Ⲇ * 76, 205 * Ⲇ);
		Δ.bezierCurveTo(104 * Ⲇ, Ⲇ * 209, 105 * Ⲇ, Ⲇ * 229, Ⲇ * 92, Ⲇ * 235);
		Δ.bezierCurveTo(Ⲇ * 76, Ⲇ * 239, 75 * Ⲇ, 232 * Ⲇ, Ⲇ * 56, 213 * Ⲇ);
		Δ.bezierCurveTo(31 * Ⲇ, Ⲇ * 187, 28 * Ⲇ, 176 * Ⲇ, Ⲇ * 23, Ⲇ * 162);
		Δ.bezierCurveTo(Ⲇ * 38, 131 * Ⲇ, Ⲇ * 40, Ⲇ * 120, 44 * Ⲇ, Ⲇ * 106);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ, Δⵠ, ΔᐃⲆᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(30 * Ⲇ, 159 * Ⲇ);
		Δ.bezierCurveTo(46 * Ⲇ, Ⲇ * 157, 59 * Ⲇ, 152 * Ⲇ, Ⲇ * 68, Ⲇ * 148);
		Δ.bezierCurveTo(63 * Ⲇ, 155 * Ⲇ, Ⲇ * 52, Ⲇ * 160, Ⲇ * 44, 164 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 59, Ⲇ * 169, 66 * Ⲇ, Ⲇ * 174, Ⲇ * 75, 178 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 58, Ⲇ * 178, 49 * Ⲇ, Ⲇ * 175, 37 * Ⲇ, Ⲇ * 174);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ);
		return ᐃⵠ
	}

	function ⲆᐃⲆⲆΔⲆⵠ() {
		return 2446112
	}
	const ⲆᐃΔⲆⲆᐃᐃ = 3315518;
	const ΔΔⲆⲆⵠⲆⲆΔⲆ = ⲆᐃⲆⲆΔⲆⵠ + " let ᐃᐃΔⲆⲆΔᐃⵠⲆ = ⲆᐃⲆⲆΔⲆⵠ () * 12739995; return ᐃᐃΔⲆⲆΔᐃⵠⲆ;";
	const ΔΔᐃⵠⵠΔΔ = new Function(ΔΔⲆⲆⵠⲆⲆΔⲆ);
	try {
		ΔΔᐃⵠⵠΔΔ(ⲆᐃΔⲆⲆᐃᐃ)
	} catch (e) {
		const ⲆᐃΔⲆⲆᐃᐃ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]];
		const ΔΔⲆⲆⵠⲆⲆΔⲆ = ⲆᐃΔⲆⲆᐃᐃ;
		const ᐃᐃΔⲆⲆΔᐃⵠⲆ = function() {
			ⲆᐃΔⲆⲆᐃᐃ(ᐃᐃΔⲆⲆΔᐃⵠⲆ, 8540);
			ΔΔⲆⲆⵠⲆⲆΔⲆ(ᐃᐃΔⲆⲆΔᐃⵠⲆ, 7026)
		};
		ᐃᐃΔⲆⲆΔᐃⵠⲆ()
	}

	function ⵠΔⵠᐃⵠⵠⲆⵠⵠ(Ⲇ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = Ⲇ * 200;
		var ΔⵠⲆ = Ⲇ * 270;
		var ΔⲆⵠ = Δᐃⵠⵠᐃ * Ⲇ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ + 20;
		Δ.beginPath();
		ᐃΔⵠ(Δ, ᐃⲆΔ, 0, ᐃΔΔ, ΔⵠⲆ - ΔⲆⵠ, ΔⲆⵠ);
		Δ.globalAlpha = .5;
		ⵠᐃ(Δ, "#1D6055");
		Δ.globalAlpha = 1;
		var text = ⲆⵠᐃⲆⲆ(Ⲇ, "Leaderboard", 25, ᐃ[448]);
		Δ.drawImage(text, (ᐃΔΔ - text.width) / ᐃⲆⵠᐃ, Ⲇ * ΔⲆⵠⵠ);
		return ᐃⵠ
	}

	function ⵠⵠΔⲆⲆᐃΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 271;
		ᐃⵠ.height = Ⲇ * 366;
		Δ.globalAlpha = .5;
		Δ.translate(ⵠᐃⲆⵠ, Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 133, Ⲇ * 99);
		Δ.bezierCurveTo(Ⲇ * 186, Ⲇ * 123, Ⲇ * 199, Ⲇ * 152, 209 * Ⲇ, 169 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 228, Ⲇ * 205, Ⲇ * 224, Ⲇ * 245, Ⲇ * 190, Ⲇ * 276);
		Δ.bezierCurveTo(Ⲇ * 161, 296 * Ⲇ, 99 * Ⲇ, Ⲇ * 292, Ⲇ * 79, 274 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 49, Ⲇ * 253, Ⲇ * 47, Ⲇ * 214, 50 * Ⲇ, Ⲇ * 197);
		Δ.bezierCurveTo(61 * Ⲇ, Ⲇ * 143, Ⲇ * 102, 113 * Ⲇ, 131 * Ⲇ, 99 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 73, Ⲇ * 270);
		Δ.bezierCurveTo(79 * Ⲇ, Ⲇ * 280, Ⲇ * 77, 280 * Ⲇ, Ⲇ * 78, 287 * Ⲇ);
		Δ.bezierCurveTo(78 * Ⲇ, Ⲇ * 290, Ⲇ * 83, Ⲇ * 291, Ⲇ * 82, Ⲇ * 299);
		Δ.bezierCurveTo(81 * Ⲇ, Ⲇ * 301, 87 * Ⲇ, 301 * Ⲇ, 92 * Ⲇ, 314 * Ⲇ);
		Δ.bezierCurveTo(94 * Ⲇ, 319 * Ⲇ, ⲆⲆⵠⵠⵠⵠᐃ * Ⲇ, 321 * Ⲇ, Ⲇ * 107, Ⲇ * 320);
		Δ.bezierCurveTo(Ⲇ * 111, 323 * Ⲇ, 114 * Ⲇ, Ⲇ * 324, Ⲇ * 119, Ⲇ * 320);
		Δ.bezierCurveTo(137 * Ⲇ, Ⲇ * 321, 146 * Ⲇ, Ⲇ * 323, 139 * Ⲇ, 320 * Ⲇ);
		Δ.bezierCurveTo(141 * Ⲇ, Ⲇ * 324, Ⲇ * 150, 324 * Ⲇ, Ⲇ * 153, 320 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 168, Ⲇ * 319, 171 * Ⲇ, 316 * Ⲇ, Ⲇ * 173, 307 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 180, Ⲇ * 305, 180 * Ⲇ, 301 * Ⲇ, Ⲇ * 178, Ⲇ * 296);
		Δ.bezierCurveTo(183 * Ⲇ, 296 * Ⲇ, Ⲇ * 185, 289 * Ⲇ, Ⲇ * 188, 279 * Ⲇ);
		Δ.bezierCurveTo(171 * Ⲇ, Ⲇ * 286, Ⲇ * 149, Ⲇ * 290, 132 * Ⲇ, 289 * Ⲇ);
		Δ.bezierCurveTo(101 * Ⲇ, 290 * Ⲇ, Ⲇ * 86, 280 * Ⲇ, Ⲇ * 74, 271 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 76, 252 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 85, Ⲇ * 294, Ⲇ * 96, 314 * Ⲇ, 103 * Ⲇ, Ⲇ * 314);
		Δ.bezierCurveTo(106 * Ⲇ, Ⲇ * 316, 151 * Ⲇ, Ⲇ * 314, 156 * Ⲇ, Ⲇ * 314);
		Δ.bezierCurveTo(169 * Ⲇ, 317 * Ⲇ, 182 * Ⲇ, Ⲇ * 285, 191 * Ⲇ, 256 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 134.5, 254 * Ⲇ, Ⲇ * 134.5, Ⲇ * 254, Ⲇ * 78, 252 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(84 * Ⲇ, Ⲇ * 257);
		Δ.bezierCurveTo(Ⲇ * 122, 273 * Ⲇ, Ⲇ * 146, 268 * Ⲇ, Ⲇ * 179, Ⲇ * 261);
		Δ.bezierCurveTo(190 * Ⲇ, Ⲇ * 258, Ⲇ * 187, 266 * Ⲇ, Ⲇ * 178, Ⲇ * 272);
		Δ.bezierCurveTo(160 * Ⲇ, Ⲇ * 284, Ⲇ * 123, Ⲇ * 282, ᐃᐃΔⵠⵠ * Ⲇ, Ⲇ * 277);
		Δ.bezierCurveTo(73 * Ⲇ, 260 * Ⲇ, Ⲇ * 79, Ⲇ * 257, 84 * Ⲇ, 257 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Δⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 125, Ⲇ * 65);
		Δ.bezierCurveTo(133 * Ⲇ, Ⲇ * 45, Ⲇ * 136, Ⲇ * 42, 141 * Ⲇ, Ⲇ * 55);
		Δ.bezierCurveTo(151 * Ⲇ, 96 * Ⲇ, Ⲇ * 164, 117 * Ⲇ, Ⲇ * 175, 134 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 203, 181 * Ⲇ, Ⲇ * 207, Ⲇ * 182, 208 * Ⲇ, 215 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 206, Ⲇ * 240, Ⲇ * 205, 246 * Ⲇ, 184 * Ⲇ, 258 * Ⲇ);
		Δ.bezierCurveTo(161 * Ⲇ, Ⲇ * 267, Ⲇ * 131, Ⲇ * 272, 86 * Ⲇ, 258 * Ⲇ);
		Δ.bezierCurveTo(67 * Ⲇ, Ⲇ * 252, Ⲇ * 68, Ⲇ * 239, Ⲇ * 64, Ⲇ * 216);
		Δ.bezierCurveTo(62 * Ⲇ, 194 * Ⲇ, 72 * Ⲇ, 169 * Ⲇ, Ⲇ * 92, 142 * Ⲇ);
		Δ.bezierCurveTo(106 * Ⲇ, Ⲇ * 121, Ⲇ * 114, 101 * Ⲇ, Ⲇ * 125, 65 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(115 * Ⲇ, Ⲇ * 37);
		Δ.bezierCurveTo(116 * Ⲇ, Ⲇ * 28, 119 * Ⲇ, Ⲇ * 27, Ⲇ * 126, Ⲇ * 37);
		Δ.bezierCurveTo(Ⲇ * 134, Ⲇ * 48, 134 * Ⲇ, Ⲇ * 49, 132 * Ⲇ, 59 * Ⲇ);
		Δ.bezierCurveTo(131 * Ⲇ, Ⲇ * 67, Ⲇ * 127, 65 * Ⲇ, 120 * Ⲇ, Ⲇ * 56);
		Δ.bezierCurveTo(114 * Ⲇ, 49 * Ⲇ, Ⲇ * 113, 43 * Ⲇ, 115 * Ⲇ, 38 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 146, Ⲇ * 34);
		Δ.bezierCurveTo(152 * Ⲇ, 28 * Ⲇ, 155 * Ⲇ, Ⲇ * 27, 157 * Ⲇ, Ⲇ * 39);
		Δ.bezierCurveTo(Ⲇ * 157, Ⲇ * 45, Ⲇ * 157, Ⲇ * 49, 150 * Ⲇ, Ⲇ * 56);
		Δ.bezierCurveTo(Ⲇ * 141, 66 * Ⲇ, 138 * Ⲇ, 66 * Ⲇ, 138 * Ⲇ, Ⲇ * 57);
		Δ.bezierCurveTo(137 * Ⲇ, Ⲇ * 50, 137 * Ⲇ, 47 * Ⲇ, Ⲇ * 141, Ⲇ * 42);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(143 * Ⲇ, Ⲇ * 69);
		Δ.bezierCurveTo(Ⲇ * 148, 56 * Ⲇ, 156 * Ⲇ, 50 * Ⲇ, Ⲇ * 158, 58 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 159, 64 * Ⲇ, 160 * Ⲇ, 67 * Ⲇ, 153 * Ⲇ, 77 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 148, 83 * Ⲇ, Ⲇ * 145, Ⲇ * 84, 143 * Ⲇ, 77 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(149 * Ⲇ, Ⲇ * 92);
		Δ.bezierCurveTo(Ⲇ * 149, Ⲇ * 89, 151 * Ⲇ, 84 * Ⲇ, 156 * Ⲇ, Ⲇ * 79);
		Δ.bezierCurveTo(161 * Ⲇ, Ⲇ * 73, Ⲇ * 163, Ⲇ * 78, Ⲇ * 162, 86 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 161, 91 * Ⲇ, 155 * Ⲇ, 99 * Ⲇ, Ⲇ * 152, 98 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 111, 61 * Ⲇ);
		Δ.bezierCurveTo(114 * Ⲇ, 51 * Ⲇ, 117 * Ⲇ, Ⲇ * 51, 124 * Ⲇ, 64 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 128, 68 * Ⲇ, 128 * Ⲇ, 76 * Ⲇ, Ⲇ * 126, Ⲇ * 79);
		Δ.bezierCurveTo(Ⲇ * 123, Ⲇ * 84, Ⲇ * 122, Ⲇ * 82, Ⲇ * 115, Ⲇ * 74);
		Δ.bezierCurveTo(112 * Ⲇ, Ⲇ * 67, 115 * Ⲇ, Ⲇ * 74, Ⲇ * 115, 74 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 111, 68 * Ⲇ, Ⲇ * 111, 66 * Ⲇ, Ⲇ * 111, Ⲇ * 62);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(107 * Ⲇ, 81 * Ⲇ);
		Δ.bezierCurveTo(108 * Ⲇ, Ⲇ * 74, Ⲇ * 112, Ⲇ * 73, 118 * Ⲇ, 84 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 122, 88 * Ⲇ, 122 * Ⲇ, 93 * Ⲇ, Ⲇ * 121, 98 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 114, 98 * Ⲇ, Ⲇ * 113, Ⲇ * 98, 109 * Ⲇ, Ⲇ * 90);
		Δ.bezierCurveTo(Ⲇ * 107, Ⲇ * 87, Ⲇ * 106, Ⲇ * 85, Ⲇ * 107, Ⲇ * 82);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.globalAlpha = 1;
		Δ.translate(ⵠᐃΔ, Ⲇ * -10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(133 * Ⲇ, Ⲇ * 99);
		Δ.bezierCurveTo(Ⲇ * 186, 123 * Ⲇ, 199 * Ⲇ, 152 * Ⲇ, 209 * Ⲇ, 169 * Ⲇ);
		Δ.bezierCurveTo(228 * Ⲇ, 205 * Ⲇ, Ⲇ * 224, 245 * Ⲇ, Ⲇ * 190, Ⲇ * 276);
		Δ.bezierCurveTo(161 * Ⲇ, Ⲇ * 296, Ⲇ * 99, 292 * Ⲇ, 79 * Ⲇ, 274 * Ⲇ);
		Δ.bezierCurveTo(49 * Ⲇ, 253 * Ⲇ, 47 * Ⲇ, 214 * Ⲇ, 50 * Ⲇ, Ⲇ * 197);
		Δ.bezierCurveTo(61 * Ⲇ, 143 * Ⲇ, Ⲇ * 102, Ⲇ * 113, 131 * Ⲇ, 99 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆᐃ], Δⵠ[3], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 73, Ⲇ * 270);
		Δ.bezierCurveTo(79 * Ⲇ, Ⲇ * 280, Ⲇ * 77, Ⲇ * 280, 78 * Ⲇ, 287 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 78, 290 * Ⲇ, 83 * Ⲇ, 291 * Ⲇ, Ⲇ * 82, Ⲇ * 299);
		Δ.bezierCurveTo(Ⲇ * 81, Ⲇ * 301, Ⲇ * 87, 301 * Ⲇ, Ⲇ * 92, 314 * Ⲇ);
		Δ.bezierCurveTo(94 * Ⲇ, 319 * Ⲇ, Ⲇ * ⲆⵠⲆⵠᐃ, Ⲇ * 321, Ⲇ * 107, 320 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 111, 323 * Ⲇ, Ⲇ * 114, 324 * Ⲇ, 119 * Ⲇ, Ⲇ * 320);
		Δ.bezierCurveTo(Ⲇ * 137, 321 * Ⲇ, 146 * Ⲇ, Ⲇ * 323, 139 * Ⲇ, 320 * Ⲇ);
		Δ.bezierCurveTo(141 * Ⲇ, 324 * Ⲇ, 150 * Ⲇ, 324 * Ⲇ, 153 * Ⲇ, Ⲇ * 320);
		Δ.bezierCurveTo(168 * Ⲇ, 319 * Ⲇ, 171 * Ⲇ, 316 * Ⲇ, Ⲇ * 173, Ⲇ * 307);
		Δ.bezierCurveTo(180 * Ⲇ, Ⲇ * 305, 180 * Ⲇ, Ⲇ * 301, 178 * Ⲇ, Ⲇ * 296);
		Δ.bezierCurveTo(Ⲇ * 183, 296 * Ⲇ, 185 * Ⲇ, 289 * Ⲇ, Ⲇ * 188, 279 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 171, 286 * Ⲇ, Ⲇ * 149, 290 * Ⲇ, 132 * Ⲇ, Ⲇ * 289);
		Δ.bezierCurveTo(Ⲇ * 101, 290 * Ⲇ, 86 * Ⲇ, 280 * Ⲇ, Ⲇ * 74, 271 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ], Δⵠ[ᐃΔᐃΔ], Ⲇ * ᐃᐃᐃⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(76 * Ⲇ, Ⲇ * 252);
		Δ.bezierCurveTo(85 * Ⲇ, Ⲇ * 294, 96 * Ⲇ, Ⲇ * 314, Ⲇ * 103, 314 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 106, 316 * Ⲇ, 151 * Ⲇ, Ⲇ * 314, 156 * Ⲇ, Ⲇ * 314);
		Δ.bezierCurveTo(169 * Ⲇ, Ⲇ * 317, Ⲇ * 182, 285 * Ⲇ, Ⲇ * 191, Ⲇ * ⵠᐃⵠⲆⲆⲆⵠ);
		Δ.bezierCurveTo(134.5 * Ⲇ, Ⲇ * 254, 134.5 * Ⲇ, Ⲇ * 254, Ⲇ * 78, Ⲇ * 252);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[3], ⲆᐃⲆᐃᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(84 * Ⲇ, Ⲇ * 257);
		Δ.bezierCurveTo(122 * Ⲇ, Ⲇ * 273, Ⲇ * 146, Ⲇ * 268, 179 * Ⲇ, 261 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 190, 258 * Ⲇ, Ⲇ * 187, 266 * Ⲇ, 178 * Ⲇ, Ⲇ * 272);
		Δ.bezierCurveTo(160 * Ⲇ, Ⲇ * 284, Ⲇ * 123, Ⲇ * 282, ⵠⵠΔΔᐃ * Ⲇ, 277 * Ⲇ);
		Δ.bezierCurveTo(73 * Ⲇ, Ⲇ * 260, Ⲇ * 79, Ⲇ * 257, 84 * Ⲇ, Ⲇ * 257);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆΔⲆᐃ], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(125 * Ⲇ, Ⲇ * 65);
		Δ.bezierCurveTo(Ⲇ * 133, Ⲇ * 45, Ⲇ * 136, Ⲇ * 42, Ⲇ * 141, 55 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 151, 96 * Ⲇ, 164 * Ⲇ, 117 * Ⲇ, 175 * Ⲇ, Ⲇ * 134);
		Δ.bezierCurveTo(Ⲇ * 203, 181 * Ⲇ, 207 * Ⲇ, 182 * Ⲇ, Ⲇ * 208, Ⲇ * 215);
		Δ.bezierCurveTo(206 * Ⲇ, 240 * Ⲇ, 205 * Ⲇ, Ⲇ * 246, 184 * Ⲇ, Ⲇ * 258);
		Δ.bezierCurveTo(Ⲇ * 161, Ⲇ * 267, 131 * Ⲇ, 272 * Ⲇ, Ⲇ * 86, 258 * Ⲇ);
		Δ.bezierCurveTo(67 * Ⲇ, Ⲇ * 252, Ⲇ * 68, Ⲇ * 239, 64 * Ⲇ, 216 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 62, 194 * Ⲇ, 72 * Ⲇ, Ⲇ * 169, Ⲇ * 92, 142 * Ⲇ);
		Δ.bezierCurveTo(106 * Ⲇ, 121 * Ⲇ, 114 * Ⲇ, 101 * Ⲇ, Ⲇ * 125, Ⲇ * 65);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆᐃ], Δⵠ[ⵠᐃᐃⵠ], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(115 * Ⲇ, 37 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 116, Ⲇ * 28, 119 * Ⲇ, 27 * Ⲇ, 126 * Ⲇ, Ⲇ * 37);
		Δ.bezierCurveTo(134 * Ⲇ, Ⲇ * 48, 134 * Ⲇ, 49 * Ⲇ, 132 * Ⲇ, Ⲇ * 59);
		Δ.bezierCurveTo(131 * Ⲇ, 67 * Ⲇ, 127 * Ⲇ, Ⲇ * 65, 120 * Ⲇ, Ⲇ * 56);
		Δ.bezierCurveTo(114 * Ⲇ, Ⲇ * 49, 113 * Ⲇ, 43 * Ⲇ, Ⲇ * 115, Ⲇ * 38);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃᐃΔΔ], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 146, 34 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 152, Ⲇ * 28, 155 * Ⲇ, Ⲇ * 27, Ⲇ * 157, Ⲇ * 39);
		Δ.bezierCurveTo(157 * Ⲇ, Ⲇ * 45, Ⲇ * 157, 49 * Ⲇ, 150 * Ⲇ, Ⲇ * 56);
		Δ.bezierCurveTo(141 * Ⲇ, Ⲇ * 66, Ⲇ * 138, 66 * Ⲇ, 138 * Ⲇ, Ⲇ * 57);
		Δ.bezierCurveTo(137 * Ⲇ, Ⲇ * 50, Ⲇ * 137, Ⲇ * 47, 141 * Ⲇ, Ⲇ * 42);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[Ⲇⵠᐃᐃ], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(143 * Ⲇ, 69 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 148, 56 * Ⲇ, 156 * Ⲇ, 50 * Ⲇ, 158 * Ⲇ, 58 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 159, Ⲇ * 64, 160 * Ⲇ, Ⲇ * 67, Ⲇ * 153, 77 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 148, Ⲇ * 83, Ⲇ * 145, Ⲇ * 84, Ⲇ * 143, Ⲇ * 77);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⲆΔⲆᐃ], Ⲇ * ⵠⵠᐃᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(149 * Ⲇ, Ⲇ * 92);
		Δ.bezierCurveTo(149 * Ⲇ, 89 * Ⲇ, Ⲇ * 151, Ⲇ * 84, 156 * Ⲇ, 79 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 161, Ⲇ * 73, Ⲇ * 163, Ⲇ * 78, Ⲇ * 162, 86 * Ⲇ);
		Δ.bezierCurveTo(161 * Ⲇ, Ⲇ * 91, 155 * Ⲇ, 99 * Ⲇ, 152 * Ⲇ, 98 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ⵠᐃᐃΔ], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(111 * Ⲇ, Ⲇ * 61);
		Δ.bezierCurveTo(114 * Ⲇ, 51 * Ⲇ, 117 * Ⲇ, Ⲇ * 51, Ⲇ * 124, 64 * Ⲇ);
		Δ.bezierCurveTo(128 * Ⲇ, 68 * Ⲇ, Ⲇ * 128, Ⲇ * 76, Ⲇ * 126, 79 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 123, Ⲇ * 84, 122 * Ⲇ, 82 * Ⲇ, Ⲇ * 115, Ⲇ * 74);
		Δ.bezierCurveTo(112 * Ⲇ, Ⲇ * 67, Ⲇ * 115, 74 * Ⲇ, 115 * Ⲇ, 74 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 111, Ⲇ * 68, 111 * Ⲇ, 66 * Ⲇ, Ⲇ * 111, 62 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[Ⲇⵠᐃᐃ], Δⵠ[ΔᐃΔⲆ], Ⲇ * ᐃⵠΔⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(107 * Ⲇ, 81 * Ⲇ);
		Δ.bezierCurveTo(108 * Ⲇ, Ⲇ * 74, Ⲇ * 112, 73 * Ⲇ, 118 * Ⲇ, Ⲇ * 84);
		Δ.bezierCurveTo(122 * Ⲇ, 88 * Ⲇ, 122 * Ⲇ, Ⲇ * 93, Ⲇ * 121, 98 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 114, 98 * Ⲇ, 113 * Ⲇ, 98 * Ⲇ, 109 * Ⲇ, 90 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 107, 87 * Ⲇ, Ⲇ * 106, 85 * Ⲇ, Ⲇ * 107, Ⲇ * 82);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃΔ], Δⵠ[ⲆΔⲆⲆ], 8 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 133, 99 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 186, Ⲇ * 123, Ⲇ * 199, 152 * Ⲇ, Ⲇ * 209, 169 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 228, Ⲇ * 205, Ⲇ * 224, 245 * Ⲇ, 190 * Ⲇ, 276 * Ⲇ);
		Δ.bezierCurveTo(161 * Ⲇ, 296 * Ⲇ, 99 * Ⲇ, Ⲇ * 292, 79 * Ⲇ, Ⲇ * 274);
		Δ.bezierCurveTo(49 * Ⲇ, 253 * Ⲇ, 47 * Ⲇ, 214 * Ⲇ, 50 * Ⲇ, 197 * Ⲇ);
		Δ.bezierCurveTo(61 * Ⲇ, 143 * Ⲇ, Ⲇ * 102, Ⲇ * 113, 131 * Ⲇ, Ⲇ * 99);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 73, Ⲇ * 270);
		Δ.bezierCurveTo(Ⲇ * 79, 280 * Ⲇ, 77 * Ⲇ, Ⲇ * 280, Ⲇ * 78, 287 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 78, 290 * Ⲇ, Ⲇ * 83, Ⲇ * 291, Ⲇ * 82, 299 * Ⲇ);
		Δ.bezierCurveTo(81 * Ⲇ, 301 * Ⲇ, 87 * Ⲇ, 301 * Ⲇ, 92 * Ⲇ, Ⲇ * 314);
		Δ.bezierCurveTo(Ⲇ * 94, 319 * Ⲇ, Ⲇ * ΔⵠⲆⵠⲆ, 321 * Ⲇ, 107 * Ⲇ, 320 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 111, 323 * Ⲇ, 114 * Ⲇ, Ⲇ * 324, 119 * Ⲇ, 320 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 137, Ⲇ * 321, Ⲇ * 146, Ⲇ * 323, 139 * Ⲇ, 320 * Ⲇ);
		Δ.bezierCurveTo(141 * Ⲇ, 324 * Ⲇ, Ⲇ * 150, Ⲇ * 324, Ⲇ * 153, 320 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 168, Ⲇ * 319, Ⲇ * 171, Ⲇ * 316, 173 * Ⲇ, 307 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 180, 305 * Ⲇ, Ⲇ * 180, Ⲇ * 301, Ⲇ * 178, 296 * Ⲇ);
		Δ.bezierCurveTo(183 * Ⲇ, 296 * Ⲇ, Ⲇ * 185, 289 * Ⲇ, Ⲇ * 188, 279 * Ⲇ);
		Δ.bezierCurveTo(171 * Ⲇ, 286 * Ⲇ, Ⲇ * 149, 290 * Ⲇ, 132 * Ⲇ, 289 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 101, 290 * Ⲇ, 86 * Ⲇ, 280 * Ⲇ, 74 * Ⲇ, Ⲇ * 271);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 76, 252 * Ⲇ);
		Δ.bezierCurveTo(85 * Ⲇ, 294 * Ⲇ, 96 * Ⲇ, 314 * Ⲇ, Ⲇ * 103, Ⲇ * 314);
		Δ.bezierCurveTo(106 * Ⲇ, 316 * Ⲇ, Ⲇ * 151, Ⲇ * 314, 156 * Ⲇ, Ⲇ * 314);
		Δ.bezierCurveTo(169 * Ⲇ, 317 * Ⲇ, 182 * Ⲇ, 285 * Ⲇ, 191 * Ⲇ, Ⲇ * ⵠⲆΔᐃⵠᐃᐃ);
		Δ.bezierCurveTo(134.5 * Ⲇ, 254 * Ⲇ, Ⲇ * 134.5, 254 * Ⲇ, Ⲇ * 78, Ⲇ * 252);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(84 * Ⲇ, 257 * Ⲇ);
		Δ.bezierCurveTo(122 * Ⲇ, 273 * Ⲇ, Ⲇ * 146, Ⲇ * 268, Ⲇ * 179, Ⲇ * 261);
		Δ.bezierCurveTo(190 * Ⲇ, Ⲇ * 258, Ⲇ * 187, Ⲇ * 266, Ⲇ * 178, 272 * Ⲇ);
		Δ.bezierCurveTo(160 * Ⲇ, 284 * Ⲇ, Ⲇ * 123, 282 * Ⲇ, 100 * Ⲇ, 277 * Ⲇ);
		Δ.bezierCurveTo(73 * Ⲇ, 260 * Ⲇ, 79 * Ⲇ, Ⲇ * 257, 84 * Ⲇ, 257 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		ⵠΔᐃ(Δ, Ⲇ * 102, 269 * Ⲇ, 11 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[3]);
		ⵠΔᐃ(Δ, Ⲇ * 98, Ⲇ * 266, 5 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[6]);
		ⵠΔᐃ(Δ, 168 * Ⲇ, Ⲇ * 269, Ⲇ * ΔᐃⲆΔⲆ);
		ⵠᐃ(Δ, Δⵠ[3]);
		ⵠΔᐃ(Δ, 164 * Ⲇ, Ⲇ * 266, 5 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆⲆⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 125, Ⲇ * 65);
		Δ.bezierCurveTo(133 * Ⲇ, Ⲇ * 45, Ⲇ * 136, 42 * Ⲇ, Ⲇ * 141, Ⲇ * 55);
		Δ.bezierCurveTo(151 * Ⲇ, 96 * Ⲇ, 164 * Ⲇ, Ⲇ * 117, 175 * Ⲇ, 134 * Ⲇ);
		Δ.bezierCurveTo(203 * Ⲇ, 181 * Ⲇ, Ⲇ * 207, Ⲇ * 182, 208 * Ⲇ, 215 * Ⲇ);
		Δ.bezierCurveTo(206 * Ⲇ, 240 * Ⲇ, 205 * Ⲇ, 246 * Ⲇ, 184 * Ⲇ, Ⲇ * 258);
		Δ.bezierCurveTo(161 * Ⲇ, Ⲇ * 267, Ⲇ * 131, Ⲇ * 272, Ⲇ * 86, 258 * Ⲇ);
		Δ.bezierCurveTo(67 * Ⲇ, Ⲇ * 252, 68 * Ⲇ, Ⲇ * 239, Ⲇ * 64, 216 * Ⲇ);
		Δ.bezierCurveTo(62 * Ⲇ, 194 * Ⲇ, 72 * Ⲇ, Ⲇ * 169, 92 * Ⲇ, 142 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 106, 121 * Ⲇ, 114 * Ⲇ, 101 * Ⲇ, 125 * Ⲇ, Ⲇ * 65);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(115 * Ⲇ, Ⲇ * 235);
		Δ.bezierCurveTo(118 * Ⲇ, Ⲇ * 258, 137 * Ⲇ, Ⲇ * 268, Ⲇ * 148, 246 * Ⲇ);
		Δ.bezierCurveTo(156 * Ⲇ, 228 * Ⲇ, Ⲇ * 152, 169 * Ⲇ, 150 * Ⲇ, 140 * Ⲇ);
		Δ.bezierCurveTo(147 * Ⲇ, 87 * Ⲇ, Ⲇ * 143, Ⲇ * 69, 142 * Ⲇ, Ⲇ * 60);
		Δ.bezierCurveTo(136 * Ⲇ, 44 * Ⲇ, Ⲇ * 132, Ⲇ * 43, 127 * Ⲇ, 62 * Ⲇ);
		Δ.bezierCurveTo(119 * Ⲇ, Ⲇ * 116, 119 * Ⲇ, 140 * Ⲇ, Ⲇ * 116, 166 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 113, Ⲇ * 202, 113 * Ⲇ, Ⲇ * 223, Ⲇ * 115, Ⲇ * 233);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔᐃⵠΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(132 * Ⲇ, 219 * Ⲇ);
		Δ.bezierCurveTo(140 * Ⲇ, Ⲇ * 229, Ⲇ * 142, Ⲇ * 231, Ⲇ * 145, Ⲇ * 237);
		Δ.bezierCurveTo(Ⲇ * 145, Ⲇ * 245, 139 * Ⲇ, 249 * Ⲇ, 133 * Ⲇ, 249 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 123, 248 * Ⲇ, Ⲇ * 123, Ⲇ * 243, 121 * Ⲇ, Ⲇ * 239);
		Δ.bezierCurveTo(126 * Ⲇ, 227 * Ⲇ, Ⲇ * 129, 223 * Ⲇ, Ⲇ * 132, Ⲇ * 219);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 133, 179 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 140, 188.5 * Ⲇ, Ⲇ * 140, 188.5 * Ⲇ, 147 * Ⲇ, 198 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 148, Ⲇ * 209, 142 * Ⲇ, Ⲇ * 214, 133 * Ⲇ, 214 * Ⲇ);
		Δ.bezierCurveTo(121 * Ⲇ, 211 * Ⲇ, Ⲇ * 121, Ⲇ * 207, Ⲇ * 120, 200 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 126.5, 189.5 * Ⲇ, 126.5 * Ⲇ, Ⲇ * 189.5, Ⲇ * 133, Ⲇ * 179);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(133 * Ⲇ, Ⲇ * 143);
		Δ.bezierCurveTo(Ⲇ * 139, Ⲇ * 151.5, 139 * Ⲇ, 151.5 * Ⲇ, Ⲇ * 145, 160 * Ⲇ);
		Δ.bezierCurveTo(143 * Ⲇ, Ⲇ * 167, 140 * Ⲇ, 170 * Ⲇ, 134 * Ⲇ, Ⲇ * 170);
		Δ.bezierCurveTo(Ⲇ * 128, Ⲇ * 169, 124 * Ⲇ, Ⲇ * 167, Ⲇ * 123, Ⲇ * 161);
		Δ.bezierCurveTo(Ⲇ * 128, 152 * Ⲇ, Ⲇ * 128, 152 * Ⲇ, 133 * Ⲇ, 143 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 133, Ⲇ * 115);
		Δ.bezierCurveTo(137.5 * Ⲇ, Ⲇ * 121.5, Ⲇ * 137.5, Ⲇ * 121.5, 142 * Ⲇ, Ⲇ * 128);
		Δ.bezierCurveTo(Ⲇ * 141, Ⲇ * 133, 138 * Ⲇ, Ⲇ * 135, Ⲇ * 133, Ⲇ * 135);
		Δ.bezierCurveTo(129 * Ⲇ, 135 * Ⲇ, Ⲇ * 125, 132 * Ⲇ, 125 * Ⲇ, Ⲇ * 129);
		Δ.bezierCurveTo(129 * Ⲇ, 122 * Ⲇ, 129 * Ⲇ, 122 * Ⲇ, 133 * Ⲇ, 115 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 133, Ⲇ * 94);
		Δ.bezierCurveTo(136.5 * Ⲇ, Ⲇ * 98.5, 136.5 * Ⲇ, Ⲇ * 98.5, Ⲇ * 140, Ⲇ * 103);
		Δ.bezierCurveTo(Ⲇ * 139, Ⲇ * 109, Ⲇ * 137, Ⲇ * 109, Ⲇ * 133, Ⲇ * 110);
		Δ.bezierCurveTo(Ⲇ * 127, 108 * Ⲇ, 129 * Ⲇ, 107 * Ⲇ, Ⲇ * 127, Ⲇ * 105);
		Δ.bezierCurveTo(Ⲇ * 130, Ⲇ * 99.5, Ⲇ * 130, Ⲇ * 99.5, Ⲇ * 133, 94 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⵠΔⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(130 * Ⲇ, 279 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 136.5, Ⲇ * 287.5, Ⲇ * 136.5, 287.5 * Ⲇ, 143 * Ⲇ, Ⲇ * 296);
		Δ.bezierCurveTo(Ⲇ * 143, 302 * Ⲇ, Ⲇ * 139, Ⲇ * 309, Ⲇ * 131, 308 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 123, Ⲇ * 306, 121 * Ⲇ, Ⲇ * 303, Ⲇ * 120, 297 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 125.5, 288.5 * Ⲇ, Ⲇ * 125.5, 288.5 * Ⲇ, 131 * Ⲇ, 280 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⵠΔⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(147 * Ⲇ, Ⲇ * 303);
		Δ.bezierCurveTo(151 * Ⲇ, Ⲇ * 311, 151 * Ⲇ, 319 * Ⲇ, Ⲇ * 147, Ⲇ * 321);
		Δ.bezierCurveTo(Ⲇ * 138, Ⲇ * 320, 145 * Ⲇ, 308 * Ⲇ, Ⲇ * 147, 303 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(115 * Ⲇ, 303 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 115, Ⲇ * 312, Ⲇ * 118, Ⲇ * 319, 115 * Ⲇ, Ⲇ * 319);
		Δ.bezierCurveTo(112 * Ⲇ, Ⲇ * 324, 109 * Ⲇ, Ⲇ * 318, Ⲇ * 109, 314 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 109, Ⲇ * 308, Ⲇ * 112, Ⲇ * 303, 115 * Ⲇ, 303 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(89 * Ⲇ, 280 * Ⲇ);
		Δ.bezierCurveTo(83 * Ⲇ, 279 * Ⲇ, Ⲇ * 80, Ⲇ * 281, 81 * Ⲇ, Ⲇ * 286);
		Δ.bezierCurveTo(Ⲇ * 83, Ⲇ * 290, Ⲇ * 84, 290 * Ⲇ, Ⲇ * 87, 286 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(94 * Ⲇ, 290 * Ⲇ);
		Δ.bezierCurveTo(93 * Ⲇ, 294 * Ⲇ, 90 * Ⲇ, 303 * Ⲇ, Ⲇ * 86, Ⲇ * 298);
		Δ.bezierCurveTo(84 * Ⲇ, 295 * Ⲇ, Ⲇ * 84, 291 * Ⲇ, 89 * Ⲇ, Ⲇ * 291);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃΔⲆⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 163, Ⲇ * 295);
		Δ.bezierCurveTo(175 * Ⲇ, Ⲇ * 294, Ⲇ * 176, Ⲇ * 296, Ⲇ * 175, 301 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 174, Ⲇ * 305, Ⲇ * 171, 305 * Ⲇ, Ⲇ * 166, 300 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[8]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(172 * Ⲇ, Ⲇ * 286);
		Δ.bezierCurveTo(180 * Ⲇ, 285 * Ⲇ, Ⲇ * 181, Ⲇ * 285, 180 * Ⲇ, 291 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 176, 295 * Ⲇ, Ⲇ * 174, Ⲇ * 294, Ⲇ * 172, 286 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(115 * Ⲇ, 37 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 116, Ⲇ * 28, Ⲇ * 119, 27 * Ⲇ, Ⲇ * 126, 37 * Ⲇ);
		Δ.bezierCurveTo(134 * Ⲇ, Ⲇ * 48, Ⲇ * 134, Ⲇ * 49, 132 * Ⲇ, 59 * Ⲇ);
		Δ.bezierCurveTo(131 * Ⲇ, Ⲇ * 67, Ⲇ * 127, 65 * Ⲇ, 120 * Ⲇ, 56 * Ⲇ);
		Δ.bezierCurveTo(114 * Ⲇ, Ⲇ * 49, 113 * Ⲇ, Ⲇ * 43, Ⲇ * 115, Ⲇ * 38);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃΔⵠⲆⲆⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 146, Ⲇ * 34);
		Δ.bezierCurveTo(152 * Ⲇ, Ⲇ * 28, 155 * Ⲇ, 27 * Ⲇ, Ⲇ * 157, Ⲇ * 39);
		Δ.bezierCurveTo(157 * Ⲇ, Ⲇ * 45, 157 * Ⲇ, 49 * Ⲇ, 150 * Ⲇ, 56 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 141, Ⲇ * 66, Ⲇ * 138, Ⲇ * 66, 138 * Ⲇ, Ⲇ * 57);
		Δ.bezierCurveTo(137 * Ⲇ, Ⲇ * 50, 137 * Ⲇ, 47 * Ⲇ, 141 * Ⲇ, Ⲇ * 42);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(143 * Ⲇ, 69 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 148, 56 * Ⲇ, 156 * Ⲇ, 50 * Ⲇ, Ⲇ * 158, Ⲇ * 58);
		Δ.bezierCurveTo(159 * Ⲇ, 64 * Ⲇ, 160 * Ⲇ, Ⲇ * 67, Ⲇ * 153, Ⲇ * 77);
		Δ.bezierCurveTo(148 * Ⲇ, 83 * Ⲇ, Ⲇ * 145, Ⲇ * 84, Ⲇ * 143, Ⲇ * 77);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆᐃᐃΔΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 149, 92 * Ⲇ);
		Δ.bezierCurveTo(149 * Ⲇ, Ⲇ * 89, Ⲇ * 151, 84 * Ⲇ, Ⲇ * 156, 79 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 161, 73 * Ⲇ, Ⲇ * 163, Ⲇ * 78, 162 * Ⲇ, 86 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 161, Ⲇ * 91, 155 * Ⲇ, Ⲇ * 99, Ⲇ * 152, 98 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⵠⲆⵠⵠᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 111, 61 * Ⲇ);
		Δ.bezierCurveTo(114 * Ⲇ, 51 * Ⲇ, 117 * Ⲇ, 51 * Ⲇ, 124 * Ⲇ, Ⲇ * 64);
		Δ.bezierCurveTo(Ⲇ * 128, Ⲇ * 68, Ⲇ * 128, Ⲇ * 76, Ⲇ * 126, Ⲇ * 79);
		Δ.bezierCurveTo(Ⲇ * 123, Ⲇ * 84, Ⲇ * 122, Ⲇ * 82, Ⲇ * 115, Ⲇ * 74);
		Δ.bezierCurveTo(112 * Ⲇ, 67 * Ⲇ, Ⲇ * 115, 74 * Ⲇ, 115 * Ⲇ, 74 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 111, 68 * Ⲇ, 111 * Ⲇ, Ⲇ * 66, Ⲇ * 111, 62 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[7]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(107 * Ⲇ, 81 * Ⲇ);
		Δ.bezierCurveTo(108 * Ⲇ, 74 * Ⲇ, Ⲇ * 112, 73 * Ⲇ, Ⲇ * 118, 84 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 122, 88 * Ⲇ, Ⲇ * 122, Ⲇ * 93, 121 * Ⲇ, 98 * Ⲇ);
		Δ.bezierCurveTo(114 * Ⲇ, 98 * Ⲇ, 113 * Ⲇ, Ⲇ * 98, 109 * Ⲇ, Ⲇ * 90);
		Δ.bezierCurveTo(Ⲇ * 107, Ⲇ * 87, 106 * Ⲇ, Ⲇ * 85, 107 * Ⲇ, 82 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[7]);
		return ᐃⵠ
	}

	function ΔΔⲆⵠⵠⲆⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 147;
		ᐃⵠ.height = 172 * Ⲇ;
		Δ.globalAlpha = .5;
		Δ.translate(0, ᐃⲆᐃⵠᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(8 * Ⲇ, Ⲇ * 50);
		Δ.bezierCurveTo(Ⲇ * 15, Ⲇ * 16, 49 * Ⲇ, Ⲇ * ΔⲆⵠΔᐃ, 67 * Ⲇ, Ⲇ * 6);
		Δ.bezierCurveTo(121 * Ⲇ, 3 * Ⲇ, 128 * Ⲇ, 32 * Ⲇ, Ⲇ * 135, Ⲇ * 48);
		Δ.bezierCurveTo(146 * Ⲇ, 96 * Ⲇ, Ⲇ * 124, 131 * Ⲇ, 96 * Ⲇ, Ⲇ * 135);
		Δ.bezierCurveTo(Ⲇ * 96, 158 * Ⲇ, 79 * Ⲇ, 156 * Ⲇ, Ⲇ * 75, Ⲇ * 156);
		Δ.bezierCurveTo(Ⲇ * 50, Ⲇ * 154, Ⲇ * 53, 150 * Ⲇ, 52 * Ⲇ, Ⲇ * 135);
		Δ.bezierCurveTo(Ⲇ * 2, Ⲇ * 127, Ⲇ * ΔᐃΔⲆ, 87 * Ⲇ, Ⲇ * ⵠᐃᐃᐃᐃ, Ⲇ * 50);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(0, -ᐃᐃΔⲆⵠ * Ⲇ);
		Δ.globalAlpha = ⲆⲆΔⵠ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 8, Ⲇ * 50);
		Δ.bezierCurveTo(ⲆⵠⲆⲆᐃⲆⲆ * Ⲇ, 16 * Ⲇ, 49 * Ⲇ, 6 * Ⲇ, 67 * Ⲇ, 6 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 121, Ⲇ * 3, 128 * Ⲇ, Ⲇ * 32, 135 * Ⲇ, 48 * Ⲇ);
		Δ.bezierCurveTo(146 * Ⲇ, 96 * Ⲇ, Ⲇ * 124, 131 * Ⲇ, Ⲇ * 96, 135 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 96, Ⲇ * 158, Ⲇ * 79, 156 * Ⲇ, Ⲇ * 75, Ⲇ * 156);
		Δ.bezierCurveTo(50 * Ⲇ, Ⲇ * 154, Ⲇ * 53, Ⲇ * 150, Ⲇ * 52, 135 * Ⲇ);
		Δ.bezierCurveTo(2 * Ⲇ, 127 * Ⲇ, 3 * Ⲇ, Ⲇ * 87, 8 * Ⲇ, Ⲇ * 50);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔΔᐃⲆⵠ], ΔᐃⲆᐃⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * ᐃΔⲆΔⵠᐃⵠ, Ⲇ * 57);
		Δ.bezierCurveTo(Ⲇ * 2, 50 * Ⲇ, 5 * Ⲇ, Ⲇ * 22, 24 * Ⲇ, 22 * Ⲇ);
		Δ.bezierCurveTo(41 * Ⲇ, Ⲇ * 21, Ⲇ * 54, 32 * Ⲇ, 55 * Ⲇ, 48 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(93 * Ⲇ, 47 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 94, Ⲇ * 24, Ⲇ * 116, 21 * Ⲇ, 120 * Ⲇ, 20 * Ⲇ);
		Δ.bezierCurveTo(144 * Ⲇ, ᐃⲆᐃⵠⲆΔΔ * Ⲇ, 146 * Ⲇ, Ⲇ * 52, 133 * Ⲇ, Ⲇ * 58);
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[2], Ⲇ * 4);
		ⵠΔᐃ(Δ, 51 * Ⲇ, 91 * Ⲇ, Ⲇ * ᐃΔⵠᐃᐃΔᐃ);
		ⵠᐃ(Δ, Δⵠ[3]);
		ⵠΔᐃ(Δ, Ⲇ * 95, Ⲇ * 91, 9 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[3]);
		ⵠΔᐃ(Δ, 91 * Ⲇ, Ⲇ * 89, Ⲇ * ⲆⲆⲆΔ);
		ⵠᐃ(Δ, Δⵠ[ΔᐃⲆᐃⵠ]);
		ⵠΔᐃ(Δ, 47 * Ⲇ, 89 * Ⲇ, 4 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ΔΔᐃⵠΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 54, Ⲇ * 133);
		Δ.bezierCurveTo(Ⲇ * 56, Ⲇ * 108, 64 * Ⲇ, Ⲇ * 99, 73 * Ⲇ, 98 * Ⲇ);
		Δ.bezierCurveTo(86 * Ⲇ, 97 * Ⲇ, 91 * Ⲇ, Ⲇ * 119, 93 * Ⲇ, 133 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 94, Ⲇ * 155, 90 * Ⲇ, Ⲇ * 150, 74 * Ⲇ, Ⲇ * 155);
		Δ.bezierCurveTo(Ⲇ * 50, Ⲇ * 152, 55 * Ⲇ, Ⲇ * 145, Ⲇ * 54, Ⲇ * 134);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(65.25 * Ⲇ, 135 * Ⲇ);
		Δ.bezierCurveTo(75.25 * Ⲇ, Ⲇ * 128, 83.25 * Ⲇ, Ⲇ * 133, 83.25 * Ⲇ, 138 * Ⲇ);
		Δ.bezierCurveTo(88.25 * Ⲇ, 148 * Ⲇ, Ⲇ * 61.25, 149 * Ⲇ, 64.25 * Ⲇ, 137 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(74 * Ⲇ, Ⲇ * 145);
		Δ.bezierCurveTo(Ⲇ * 74, Ⲇ * 148, 74 * Ⲇ, 148 * Ⲇ, 74 * Ⲇ, 151 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, undefined, Δⵠ[6], Ⲇ * ᐃᐃⲆⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(19 * Ⲇ, 58 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 10, Ⲇ * 38, Ⲇ * 18, 33 * Ⲇ, Ⲇ * 28, Ⲇ * 34);
		Δ.bezierCurveTo(Ⲇ * 41, Ⲇ * 39, Ⲇ * 45, Ⲇ * 45, 50 * Ⲇ, 51 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆΔⲆⲆᐃᐃⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(100 * Ⲇ, 51 * Ⲇ);
		Δ.bezierCurveTo(106 * Ⲇ, 36 * Ⲇ, 119 * Ⲇ, 31 * Ⲇ, Ⲇ * 128, 36 * Ⲇ);
		Δ.bezierCurveTo(137 * Ⲇ, Ⲇ * 49, 128 * Ⲇ, 58 * Ⲇ, 128 * Ⲇ, Ⲇ * 60);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[6]);
		return ᐃⵠ
	}

	function ᐃⵠΔᐃⵠΔⲆ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 218;
		ᐃⵠ.height = Ⲇ * 185;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 64, 53.135406494140625 * Ⲇ);
		Δ.bezierCurveTo(92 * Ⲇ, 17.135406494140625 * Ⲇ, 116 * Ⲇ, 11.135406494140625 * Ⲇ, 158 * Ⲇ, Ⲇ * 53.135406494140625);
		Δ.bezierCurveTo(178 * Ⲇ, 74.13540649414062 * Ⲇ, Ⲇ * 181, Ⲇ * 81.13540649414062, Ⲇ * 196, Ⲇ * 101.13540649414062);
		Δ.bezierCurveTo(Ⲇ * 214, Ⲇ * 127.13540649414062, Ⲇ * 192, Ⲇ * 138.13540649414062, Ⲇ * 173, Ⲇ * 149.13540649414062);
		Δ.bezierCurveTo(Ⲇ * 137, Ⲇ * 166.13540649414062, 74 * Ⲇ, 170.13540649414062 * Ⲇ, Ⲇ * 36, Ⲇ * 141.13540649414062);
		Δ.bezierCurveTo(Ⲇ * ⲆΔΔΔⲆ, 127.13540649414062 * Ⲇ, ⲆⲆⲆΔⲆ * Ⲇ, Ⲇ * 119.13540649414062, 30 * Ⲇ, 103.13540649414062 * Ⲇ);
		Δ.bezierCurveTo(48 * Ⲇ, 71.13540649414062 * Ⲇ, Ⲇ * 54, 67.13540649414062 * Ⲇ, Ⲇ * 63, Ⲇ * 54.135406494140625);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠᐃ], Δⵠ[1], Ⲇ * 10);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(107 * Ⲇ, 25.135406494140625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 62, 90.13540649414062 * Ⲇ, 54 * Ⲇ, 129.13540649414062 * Ⲇ, 53 * Ⲇ, 151.13540649414062 * Ⲇ);
		Δ.bezierCurveTo(39.5 * Ⲇ, Ⲇ * 142.13540649414062, 39.5 * Ⲇ, Ⲇ * 142.13540649414062, Ⲇ * 26, Ⲇ * 133.13540649414062);
		Δ.bezierCurveTo(Ⲇ * 23.5, Ⲇ * 128.63540649414062, Ⲇ * 23.5, Ⲇ * 128.63540649414062, 21 * Ⲇ, Ⲇ * 124.13540649414062);
		Δ.bezierCurveTo(Ⲇ * 22, Ⲇ * 113.13540649414062, Ⲇ * 31, 99.13540649414062 * Ⲇ, Ⲇ * 40, Ⲇ * 88.13540649414062);
		Δ.bezierCurveTo(54.5 * Ⲇ, 67.13540649414062 * Ⲇ, Ⲇ * 54.5, 67.13540649414062 * Ⲇ, 69 * Ⲇ, Ⲇ * 46.135406494140625);
		Δ.bezierCurveTo(Ⲇ * 80.5, 36.635406494140625 * Ⲇ, Ⲇ * 80.5, Ⲇ * 36.635406494140625, Ⲇ * 92, 27.135406494140625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		return ᐃⵠ
	}

	function ᐃΔⵠⲆⵠⵠΔⲆⲆ(Ⲇ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		var ᐃΔΔ = 200 * Ⲇ;
		var ΔⵠⲆ = Ⲇ * 180;
		var ΔⲆⵠ = Ⲇ * ⲆⲆᐃⲆⵠ;
		ᐃⵠ.width = ᐃΔΔ;
		ᐃⵠ.height = ΔⵠⲆ;
		Δ.beginPath();
		ᐃΔⵠ(Δ, 0, Δⵠⵠ, ᐃΔΔ, ΔⵠⲆ - ΔⲆⵠ, ΔⲆⵠ);
		Δ.globalAlpha = .8;
		ⵠᐃ(Δ, "#1D6055");
		Δ.globalAlpha = 1;
		var text = ⲆⵠᐃⲆⲆ(Ⲇ, "Leaderboard", 25, ᐃ[448]);
		Δ.drawImage(text, (ᐃΔΔ - text.width) / 2, Ⲇ * ᐃᐃᐃᐃ);
		return ᐃⵠ
	}

	function ΔⵠⲆᐃⵠΔⵠ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 110;
		ᐃⵠ.height = Ⲇ * 110;
		Δ.globalAlpha = .2;
		ⵠΔᐃ(Δ, Ⲇ * 55, 55 * Ⲇ, 55 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0]);
		return ᐃⵠ
	}

	function ⲆᐃⲆⲆΔΔᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 85;
		ᐃⵠ.height = Ⲇ * 145;
		Δ.translate(-20 * Ⲇ, Ⲇ * -95);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 50, Ⲇ * 105);
		Δ.bezierCurveTo(52 * Ⲇ, 119 * Ⲇ, Ⲇ * 64, Ⲇ * 137, Ⲇ * 71, 146 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 71, 161 * Ⲇ, Ⲇ * 74, Ⲇ * 169, 79 * Ⲇ, 179 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 68, 192 * Ⲇ, Ⲇ * 70, 204 * Ⲇ, Ⲇ * 69, 216 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 50, Ⲇ * 189.5, Ⲇ * 50, 189.5 * Ⲇ, Ⲇ * 31, 163 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 44, 106 * Ⲇ);
		Δ.bezierCurveTo(49 * Ⲇ, Ⲇ * 90, Ⲇ * 58, 104 * Ⲇ, 51 * Ⲇ, 121 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 45, Ⲇ * 143, 41 * Ⲇ, Ⲇ * 151, Ⲇ * 37, Ⲇ * 162);
		Δ.bezierCurveTo(Ⲇ * 48, Ⲇ * 180, Ⲇ * 58, Ⲇ * 188, Ⲇ * 76, Ⲇ * 205);
		Δ.bezierCurveTo(104 * Ⲇ, 209 * Ⲇ, 105 * Ⲇ, Ⲇ * 229, Ⲇ * 92, Ⲇ * 235);
		Δ.bezierCurveTo(Ⲇ * 76, 239 * Ⲇ, 75 * Ⲇ, 232 * Ⲇ, Ⲇ * 56, Ⲇ * 213);
		Δ.bezierCurveTo(Ⲇ * 31, 187 * Ⲇ, 28 * Ⲇ, 176 * Ⲇ, Ⲇ * 23, 162 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 38, Ⲇ * 131, Ⲇ * 40, Ⲇ * 120, Ⲇ * 44, Ⲇ * 106);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃⲆⵠᐃ], Δⵠ[ᐃᐃΔΔ], 4 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 30, Ⲇ * 159);
		Δ.bezierCurveTo(Ⲇ * 46, Ⲇ * 157, Ⲇ * 59, 152 * Ⲇ, Ⲇ * 68, 148 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 63, 155 * Ⲇ, 52 * Ⲇ, Ⲇ * 160, Ⲇ * 44, Ⲇ * 164);
		Δ.bezierCurveTo(Ⲇ * 59, Ⲇ * 169, 66 * Ⲇ, Ⲇ * 174, Ⲇ * 75, 178 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 58, Ⲇ * 178, Ⲇ * 49, Ⲇ * 175, 37 * Ⲇ, Ⲇ * 174);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃᐃⲆⵠ]);
		return ᐃⵠ
	}

	function ᐃⵠᐃᐃᐃᐃΔ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 120;
		ᐃⵠ.height = 300 * Ⲇ;
		Δ.translate(Ⲇ * -200, Ⲇ * -40);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 344, 18.40625 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 345, Ⲇ * 361.40625, Ⲇ * 344, Ⲇ * 191.40625, 344 * Ⲇ, Ⲇ * 364.40625);
		Δ.bezierCurveTo(261 * Ⲇ, 275.40625 * Ⲇ, Ⲇ * 274, 259.40625 * Ⲇ, 229 * Ⲇ, Ⲇ * 213.40625);
		Δ.bezierCurveTo(199 * Ⲇ, Ⲇ * 187.40625, 222 * Ⲇ, Ⲇ * 133.40625, Ⲇ * 273, Ⲇ * 100.40625);
		Δ.bezierCurveTo(Ⲇ * 321, 71.40625 * Ⲇ, Ⲇ * 327, Ⲇ * 34.40625, Ⲇ * 344, 18.40625 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(335 * Ⲇ, Ⲇ * 38.072906494140625);
		Δ.bezierCurveTo(307 * Ⲇ, 62.072906494140625 * Ⲇ, 291 * Ⲇ, 60.072906494140625 * Ⲇ, 262 * Ⲇ, Ⲇ * 68.07290649414062);
		Δ.bezierCurveTo(223 * Ⲇ, Ⲇ * 80.07290649414062, 225 * Ⲇ, Ⲇ * 111.07290649414062, Ⲇ * 264, Ⲇ * 139.07290649414062);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		return ᐃⵠ
	}

	function ⵠΔᐃΔᐃᐃⵠ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 161 * Ⲇ;
		ᐃⵠ.height = 184 * Ⲇ;
		Δ.translate(Δⵠⵠ, ⵠᐃⲆⵠᐃ * Ⲇ);
		Δ.globalAlpha = 1;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 105.5, 34.609375 * Ⲇ);
		Δ.bezierCurveTo(48.5 * Ⲇ, 7.609375 * Ⲇ, Ⲇ * 11.5, Ⲇ * 58.609375, Ⲇ * 20.5, Ⲇ * 97.609375);
		Δ.bezierCurveTo(44.5 * Ⲇ, 161.609375 * Ⲇ, 70.5 * Ⲇ, Ⲇ * 171.609375, 88.5 * Ⲇ, Ⲇ * 156.609375);
		Δ.bezierCurveTo(120.5 * Ⲇ, 129.609375 * Ⲇ, 123.5 * Ⲇ, 105.609375 * Ⲇ, Ⲇ * 128.5, 83.609375 * Ⲇ);
		Δ.bezierCurveTo(137.5 * Ⲇ, Ⲇ * 79.609375, 141.5 * Ⲇ, 79.609375 * Ⲇ, Ⲇ * 146.5, 81.609375 * Ⲇ);
		Δ.bezierCurveTo(153.5 * Ⲇ, Ⲇ * 70.609375, 151.5 * Ⲇ, Ⲇ * 65.609375, Ⲇ * 148.5, Ⲇ * 61.609375);
		Δ.bezierCurveTo(Ⲇ * 134.5, 60.609375 * Ⲇ, Ⲇ * 131.5, Ⲇ * 63.609375, 127.5 * Ⲇ, Ⲇ * 66.609375);
		Δ.bezierCurveTo(Ⲇ * 127.5, 55.609375 * Ⲇ, Ⲇ * 125.5, 54.609375 * Ⲇ, 120.5 * Ⲇ, 51.609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 128.5, 42.609375 * Ⲇ, 136.5 * Ⲇ, 38.609375 * Ⲇ, 147.5 * Ⲇ, 39.609375 * Ⲇ);
		Δ.bezierCurveTo(152.5 * Ⲇ, Ⲇ * 23.609375, 147.5 * Ⲇ, Ⲇ * 21.609375, 140.5 * Ⲇ, 17.609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 120.5, Ⲇ * 17.609375, Ⲇ * 114.5, Ⲇ * 27.609375, 106.5 * Ⲇ, Ⲇ * 35.609375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 45.5, Ⲇ * 144.609375);
		Δ.bezierCurveTo(Ⲇ * 35.5, Ⲇ * 155.609375, 37 * Ⲇ, 152.109375 * Ⲇ, 28.5 * Ⲇ, 159.609375 * Ⲇ);
		Δ.bezierCurveTo(16.5 * Ⲇ, 154.609375 * Ⲇ, Ⲇ * 16.5, Ⲇ * 151.609375, 17.5 * Ⲇ, Ⲇ * 141.609375);
		Δ.bezierCurveTo(Ⲇ * 25.5, 134.109375 * Ⲇ, 25.5 * Ⲇ, Ⲇ * 134.109375, Ⲇ * 33.5, 126.609375 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.translate(Δⵠⵠ, -ΔΔᐃⵠⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 45.5, Ⲇ * 144.609375);
		Δ.bezierCurveTo(Ⲇ * 35.5, Ⲇ * 155.609375, 37 * Ⲇ, 152.109375 * Ⲇ, Ⲇ * 28.5, Ⲇ * 159.609375);
		Δ.bezierCurveTo(Ⲇ * 16.5, 154.609375 * Ⲇ, Ⲇ * 16.5, Ⲇ * 151.609375, Ⲇ * 17.5, 141.609375 * Ⲇ);
		Δ.bezierCurveTo(25.5 * Ⲇ, Ⲇ * 134.109375, Ⲇ * 25.5, Ⲇ * 134.109375, 33.5 * Ⲇ, 126.609375 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[Δⵠᐃ], Δⵠ[2], Ⲇ * ⵠΔΔᐃⲆ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 105.5, 34.609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 48.5, 7.609375 * Ⲇ, Ⲇ * 11.5, 58.609375 * Ⲇ, Ⲇ * 20.5, 97.609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 44.5, 161.609375 * Ⲇ, 70.5 * Ⲇ, Ⲇ * 171.609375, Ⲇ * 88.5, Ⲇ * 156.609375);
		Δ.bezierCurveTo(Ⲇ * 120.5, Ⲇ * 129.609375, Ⲇ * 123.5, Ⲇ * 105.609375, Ⲇ * 128.5, 83.609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 137.5, 79.609375 * Ⲇ, Ⲇ * 141.5, Ⲇ * 79.609375, Ⲇ * 146.5, 81.609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 153.5, 70.609375 * Ⲇ, 151.5 * Ⲇ, 65.609375 * Ⲇ, 148.5 * Ⲇ, Ⲇ * 61.609375);
		Δ.bezierCurveTo(Ⲇ * 134.5, 60.609375 * Ⲇ, Ⲇ * 131.5, 63.609375 * Ⲇ, Ⲇ * 127.5, Ⲇ * 66.609375);
		Δ.bezierCurveTo(127.5 * Ⲇ, Ⲇ * 55.609375, 125.5 * Ⲇ, 54.609375 * Ⲇ, 120.5 * Ⲇ, Ⲇ * 51.609375);
		Δ.bezierCurveTo(128.5 * Ⲇ, Ⲇ * 42.609375, Ⲇ * 136.5, Ⲇ * 38.609375, Ⲇ * 147.5, 39.609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 152.5, 23.609375 * Ⲇ, 147.5 * Ⲇ, Ⲇ * 21.609375, Ⲇ * 140.5, Ⲇ * 17.609375);
		Δ.bezierCurveTo(120.5 * Ⲇ, 17.609375 * Ⲇ, 114.5 * Ⲇ, 27.609375 * Ⲇ, Ⲇ * 106.5, Ⲇ * 35.609375);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1], Δⵠ[ΔΔⵠⲆ], Ⲇ * ᐃⲆᐃⵠᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 104.5, Ⲇ * 35.609375);
		Δ.bezierCurveTo(Ⲇ * 71.5, 36.609375 * Ⲇ, 57.5 * Ⲇ, Ⲇ * 52.609375, Ⲇ * 58.5, 81.609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 59.5, 103.609375 * Ⲇ, 66.5 * Ⲇ, Ⲇ * 107.609375, 66.5 * Ⲇ, 116.609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 67.5, Ⲇ * 128.609375, 65.5 * Ⲇ, Ⲇ * 131.609375, 63.5 * Ⲇ, 137.609375 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[Ⲇᐃⵠⵠ], Ⲇ * 8);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(59.5 * Ⲇ, Ⲇ * 72.609375);
		Δ.bezierCurveTo(38.5 * Ⲇ, Ⲇ * 80.609375, 43.5 * Ⲇ, 81.609375 * Ⲇ, 37.5 * Ⲇ, Ⲇ * 89.609375);
		ⵠᐃ(Δ, undefined, Δⵠ[ⵠⵠᐃⲆ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(60.5 * Ⲇ, 85.609375 * Ⲇ);
		Δ.bezierCurveTo(75.5 * Ⲇ, 91.609375 * Ⲇ, Ⲇ * 76.5, Ⲇ * 96.609375, Ⲇ * 81.5, 104.609375 * Ⲇ);
		ⵠᐃ(Δ, undefined, Δⵠ[2], ΔΔΔⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(68.5 * Ⲇ, Ⲇ * 122.609375);
		Δ.bezierCurveTo(79.5 * Ⲇ, 130.609375 * Ⲇ, Ⲇ * 74.5, 128.609375 * Ⲇ, 80.5 * Ⲇ, 134.609375 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[ⲆⲆⲆᐃ], Δⵠ[2], ᐃᐃΔⵠⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(142.5 * Ⲇ, 18.609375 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 151.5, 28.609375 * Ⲇ, 151.5 * Ⲇ, 32.609375 * Ⲇ, 146.5 * Ⲇ, 40.609375 * Ⲇ);
		Δ.bezierCurveTo(137.5 * Ⲇ, 26.609375 * Ⲇ, Ⲇ * 138.5, Ⲇ * 24.609375, 142.5 * Ⲇ, 19.609375 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 146.5, Ⲇ * 61.50892639160156);
		Δ.bezierCurveTo(Ⲇ * 157.5, 69.50892639160156 * Ⲇ, Ⲇ * 150.5, Ⲇ * 79.50892639160156, 145.5 * Ⲇ, 81.50892639160156 * Ⲇ);
		Δ.bezierCurveTo(140.5 * Ⲇ, 65.50892639160156 * Ⲇ, Ⲇ * 144.5, Ⲇ * 64.50892639160156, Ⲇ * 146.5, 62.50892639160156 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔΔΔ]);
		return ᐃⵠ
	}

	function ⲆⵠΔΔⵠⲆΔ(Ⲇ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 109;
		ᐃⵠ.height = 110 * Ⲇ;
		ⵠΔᐃ(Δ, 54.5 * Ⲇ, Ⲇ * 55, 48.038209575038294 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[0], Δⵠ[1], Ⲇ * 8);
		if (0 == ᐃⲆ) {
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 54.928558349609375, Ⲇ * 43.72320556640625);
			Δ.bezierCurveTo(Ⲇ * 66.92855834960938, 31.72320556640625 * Ⲇ, Ⲇ * 69.92855834960938, 29.72320556640625 * Ⲇ, 74.92855834960938 * Ⲇ, Ⲇ * 29.72320556640625);
			Δ.bezierCurveTo(Ⲇ * 86.92855834960938, 28.72320556640625 * Ⲇ, 91.92855834960938 * Ⲇ, 42.72320556640625 * Ⲇ, Ⲇ * 89.92855834960938, 52.72320556640625 * Ⲇ);
			Δ.bezierCurveTo(88.92855834960938 * Ⲇ, 63.72320556640625 * Ⲇ, 73.92855834960938 * Ⲇ, Ⲇ * 75.72320556640625, Ⲇ * 55.928558349609375, 87.72320556640625 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 37.928558349609375, 78.72320556640625 * Ⲇ, 26.928558349609375 * Ⲇ, 65.72320556640625 * Ⲇ, Ⲇ * 19.928558349609375, Ⲇ * 54.72320556640625);
			Δ.bezierCurveTo(Ⲇ * 13.928558349609375, 42.72320556640625 * Ⲇ, Ⲇ * 21.928558349609375, 28.72320556640625 * Ⲇ, 35.928558349609375 * Ⲇ, 29.72320556640625 * Ⲇ);
			Δ.bezierCurveTo(45.928558349609375 * Ⲇ, Ⲇ * 31.72320556640625, 51.928558349609375 * Ⲇ, Ⲇ * 40.72320556640625, 53.928558349609375 * Ⲇ, 44.72320556640625 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ΔⲆⵠΔ])
		} else if (ᐃⲆ == 1) {
			Δ.save();
			Δ.translate(Ⲇ * 55, Ⲇ * 39.48748779296875);
			ᐃΔⵠ(Δ, -11.5 * Ⲇ, -36 * Ⲇ, Ⲇ * 23, Ⲇ * 72, Ⲇ * ⲆΔⲆᐃⵠ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[ΔⵠⲆⲆ], Δⵠ[3], Ⲇ * 4);
			ⵠΔᐃ(Δ, Ⲇ * 54.5, 78.48748779296875 * Ⲇ, 22.02271554554524 * Ⲇ);
			ⵠᐃ(Δ, Δⵠ[ⵠΔⲆᐃⲆ], Δⵠ[3], Ⲇ * ᐃΔⵠᐃⲆ);
			Δ.save();
			Δ.translate(55.5 * Ⲇ, 57.287506103515625 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -9, Ⲇ * -ⵠⲆᐃⲆᐃⲆᐃ, ᐃⵠⲆⲆΔ * Ⲇ, Ⲇ * 32, 10 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, Δⵠ[4]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(66.5 * Ⲇ, 25.287506103515625 * Ⲇ);
			Δ.bezierCurveTo(60.5 * Ⲇ, 25.287506103515625 * Ⲇ, Ⲇ * 63.5, Ⲇ * 25.287506103515625, 54.5 * Ⲇ, 25.287506103515625 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, undefined, Δⵠ[5], Ⲇ * ΔⲆΔⲆ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 66.5, Ⲇ * 37.287506103515625);
			Δ.bezierCurveTo(Ⲇ * 60.5, 37.287506103515625 * Ⲇ, 60.5 * Ⲇ, 37.287506103515625 * Ⲇ, Ⲇ * 54.5, Ⲇ * 37.287506103515625);
			Δ.closePath();
			ⵠᐃ(Δ, ⵠᐃⲆⵠⲆ, Δⵠ[5], Ⲇ * ᐃᐃⵠΔ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 66.5, 50.287506103515625 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 61, Ⲇ * 50.287506103515625, 61 * Ⲇ, Ⲇ * 50.287506103515625, 55.5 * Ⲇ, 50.287506103515625 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, ΔⲆᐃΔᐃ, Δⵠ[5], Ⲇ * ΔⲆⵠΔⲆ)
		} else if (2 == ᐃⲆ) {
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 45.928558349609375, 55.29463195800781 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 38.928558349609375, Ⲇ * 67.29463195800781, 38.928558349609375 * Ⲇ, 67.29463195800781 * Ⲇ, Ⲇ * 31.928558349609375, 79.29463195800781 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 15.928558349609375, 85.29463195800781 * Ⲇ, Ⲇ * 17.928558349609375, Ⲇ * 86.29463195800781, Ⲇ * 17.928558349609375, Ⲇ * 90.29463195800781);
			Δ.bezierCurveTo(Ⲇ * 19.928558349609375, Ⲇ * 94.29463195800781, Ⲇ * 21.928558349609375, Ⲇ * 94.29463195800781, 27.928558349609375 * Ⲇ, Ⲇ * 92.29463195800781);
			Δ.bezierCurveTo(29.928558349609375 * Ⲇ, Ⲇ * 98.29463195800781, 30.928558349609375 * Ⲇ, Ⲇ * 99.29463195800781, Ⲇ * 33.928558349609375, 99.29463195800781 * Ⲇ);
			Δ.bezierCurveTo(38.928558349609375 * Ⲇ, 97.29463195800781 * Ⲇ, Ⲇ * 38.928558349609375, Ⲇ * 93.29463195800781, 37.928558349609375 * Ⲇ, Ⲇ * 86.29463195800781);
			Δ.bezierCurveTo(45.428558349609375 * Ⲇ, Ⲇ * 73.29463195800781, 51.928558349609375 * Ⲇ, Ⲇ * 64.29463195800781, 52.928558349609375 * Ⲇ, 60.29463195800781 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[2]);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 55.928558349609375, Ⲇ * 8.866058349609375);
			Δ.bezierCurveTo(Ⲇ * 35.928558349609375, Ⲇ * 35.866058349609375, 37.928558349609375 * Ⲇ, 48.866058349609375 * Ⲇ, Ⲇ * 46.928558349609375, Ⲇ * 62.866058349609375);
			Δ.bezierCurveTo(Ⲇ * 65.92855834960938, Ⲇ * 72.86605834960938, Ⲇ * 80.92855834960938, Ⲇ * 55.866058349609375, 93.92855834960938 * Ⲇ, Ⲇ * 36.866058349609375);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠΔΔᐃ], Δⵠ[ᐃᐃᐃᐃΔ], Ⲇ * 6);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 93.92855834960938, 36.866058349609375 * Ⲇ);
			Δ.bezierCurveTo(82.92855834960938 * Ⲇ, 37.866058349609375 * Ⲇ, 77.92855834960938 * Ⲇ, Ⲇ * 36.866058349609375, Ⲇ * 67.92855834960938, Ⲇ * 28.866058349609375);
			Δ.bezierCurveTo(53.928558349609375 * Ⲇ, 16.866058349609375 * Ⲇ, 53.928558349609375 * Ⲇ, Ⲇ * 14.866058349609375, 55.928558349609375 * Ⲇ, 7.866058349609375 * Ⲇ);
			Δ.bezierCurveTo(65.92855834960938 * Ⲇ, 4.866058349609375 * Ⲇ, 71.92855834960938 * Ⲇ, Ⲇ * 7.866058349609375, 83.92855834960938 * Ⲇ, 13.866058349609375 * Ⲇ);
			Δ.bezierCurveTo(96.92855834960938 * Ⲇ, 21.866058349609375 * Ⲇ, Ⲇ * 95.92855834960938, 31.866058349609375 * Ⲇ, 92.92855834960938 * Ⲇ, Ⲇ * 36.866058349609375);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ᐃⵠⵠⲆ], ⵠΔᐃᐃΔ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(68.92855834960938 * Ⲇ, Ⲇ * 16.866058349609375);
			Δ.bezierCurveTo(71.92855834960938 * Ⲇ, 13.866058349609375 * Ⲇ, 76.92855834960938 * Ⲇ, 16.866058349609375 * Ⲇ, 79.92855834960938 * Ⲇ, Ⲇ * 21.866058349609375);
			Δ.bezierCurveTo(Ⲇ * 82.92855834960938, Ⲇ * 24.866058349609375, Ⲇ * 81.92855834960938, Ⲇ * 27.866058349609375, Ⲇ * 73.92855834960938, 24.866058349609375 * Ⲇ);
			Δ.bezierCurveTo(67.92855834960938 * Ⲇ, Ⲇ * 20.866058349609375, 66.92855834960938 * Ⲇ, 19.866058349609375 * Ⲇ, Ⲇ * 67.92855834960938, 17.866058349609375 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[2])
		} else 3 == ᐃⲆ && (Δ.scale(.9, .9), Δ.translate(Ⲇ * 6, 0), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(54 * Ⲇ, .421875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 84, Ⲇ * 45.421875, 89 * Ⲇ, 51.421875 * Ⲇ, 83 * Ⲇ, 74.421875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 74, 95.421875 * Ⲇ, Ⲇ * 46, Ⲇ * 98.421875, 30 * Ⲇ, Ⲇ * 78.421875), Δ.bezierCurveTo(Ⲇ * 22, Ⲇ * 59.421875, 27 * Ⲇ, Ⲇ * 49.421875, Ⲇ * 34, 36.421875 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ⵠⵠⲆⲆ], ⵠⲆⵠⲆⵠ * Ⲇ), Δ.beginPath(), Δ.lineCap = ᐃ[250], Δ.lineJoin = ᐃ[250], Δ.moveTo(Ⲇ * 74, 52.421875 * Ⲇ), Δ.bezierCurveTo(Ⲇ * 77, 73.421875 * Ⲇ, Ⲇ * 69, Ⲇ * 81.421875, Ⲇ * 58, 81.421875 * Ⲇ), Δ.bezierCurveTo(66 * Ⲇ, Ⲇ * 71.421875, Ⲇ * 70, 66.421875 * Ⲇ, Ⲇ * 74, 52.421875 * Ⲇ), Δ.closePath(), ⵠᐃ(Δ, Δⵠ[3]));
		return ᐃⵠ
	}

	function ᐃᐃΔᐃⲆⲆᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 85;
		ᐃⵠ.height = Ⲇ * 145;
		Δ.translate(Ⲇ * -165, -95 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 217, 103 * Ⲇ);
		Δ.bezierCurveTo(209 * Ⲇ, 129 * Ⲇ, 203 * Ⲇ, 137 * Ⲇ, Ⲇ * 195, 146 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 195, 159 * Ⲇ, Ⲇ * 194, Ⲇ * 167, 189 * Ⲇ, Ⲇ * 178);
		Δ.bezierCurveTo(Ⲇ * 193, 186 * Ⲇ, Ⲇ * 196, Ⲇ * 195, 198 * Ⲇ, 216 * Ⲇ);
		Δ.bezierCurveTo(217.5 * Ⲇ, Ⲇ * 189.5, 217.5 * Ⲇ, 189.5 * Ⲇ, Ⲇ * 237, 163 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 231, Ⲇ * 163);
		Δ.bezierCurveTo(Ⲇ * 221, Ⲇ * 139, Ⲇ * 218, Ⲇ * 128, Ⲇ * 215, 114 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 213, Ⲇ * 102, Ⲇ * 220, 92 * Ⲇ, 222 * Ⲇ, Ⲇ * 107);
		Δ.bezierCurveTo(Ⲇ * 224, Ⲇ * 118, 233 * Ⲇ, Ⲇ * 138, Ⲇ * 244, 161 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 235, 188 * Ⲇ, Ⲇ * 224, Ⲇ * 198, Ⲇ * 204, Ⲇ * 221);
		Δ.bezierCurveTo(190 * Ⲇ, Ⲇ * 233, Ⲇ * 190, Ⲇ * 235, Ⲇ * 180, Ⲇ * 235);
		Δ.bezierCurveTo(167 * Ⲇ, Ⲇ * 235, Ⲇ * 164, Ⲇ * 216, Ⲇ * 175, 211 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 176, 208 * Ⲇ, Ⲇ * 181, Ⲇ * 207, Ⲇ * 191, 205 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 213, 186 * Ⲇ, Ⲇ * 218, Ⲇ * 180, Ⲇ * 230, Ⲇ * 163);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[ⵠᐃᐃⵠ], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(234 * Ⲇ, Ⲇ * 154);
		Δ.bezierCurveTo(Ⲇ * 227, 156 * Ⲇ, Ⲇ * 222, Ⲇ * 156, 199 * Ⲇ, Ⲇ * 148);
		Δ.bezierCurveTo(Ⲇ * 201, Ⲇ * 151, 216 * Ⲇ, 159 * Ⲇ, 224 * Ⲇ, 162 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 209, 169.5 * Ⲇ, Ⲇ * 209, 169.5 * Ⲇ, 194 * Ⲇ, Ⲇ * 177);
		Δ.bezierCurveTo(Ⲇ * 213.5, Ⲇ * 175, 213.5 * Ⲇ, 175 * Ⲇ, Ⲇ * 233, 173 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[2]);
		return ᐃⵠ
	}

	function ⲆΔΔⵠΔⵠⵠ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 247;
		ᐃⵠ.height = Ⲇ * 247;
		Δ.translate(Ⲇⵠᐃ, Ⲇ * 10);
		Δ.globalAlpha = Δⵠᐃⵠ ? .5 : ⲆⵠⲆ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 150, Ⲇ * 62);
		Δ.bezierCurveTo(Ⲇ * 151.5, Ⲇ * 71.5, Ⲇ * 149, 70 * Ⲇ, 153 * Ⲇ, Ⲇ * 81);
		Δ.bezierCurveTo(Ⲇ * 158, Ⲇ * 73.5, 158 * Ⲇ, 73.5 * Ⲇ, Ⲇ * 163, 66 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(164 * Ⲇ, 171 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 149, Ⲇ * 159, Ⲇ * 156.5, 165 * Ⲇ, 149 * Ⲇ, 159 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 149, Ⲇ * 167, 149 * Ⲇ, Ⲇ * 170, Ⲇ * 152, Ⲇ * 178);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(132 * Ⲇ, Ⲇ * 95);
		Δ.bezierCurveTo(154 * Ⲇ, Ⲇ * 102, 154 * Ⲇ, 126 * Ⲇ, 137 * Ⲇ, 139 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 113, 152 * Ⲇ, 89 * Ⲇ, 136 * Ⲇ, 80 * Ⲇ, 121 * Ⲇ);
		Δ.bezierCurveTo(57 * Ⲇ, 89 * Ⲇ, Ⲇ * 69, Ⲇ * 63, Ⲇ * 79, 52 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 110, Ⲇ * ⵠⲆᐃⲆⵠ, Ⲇ * 139, 21 * Ⲇ, Ⲇ * 150, 25 * Ⲇ);
		Δ.bezierCurveTo(197 * Ⲇ, Ⲇ * 36, Ⲇ * 221, 67 * Ⲇ, Ⲇ * 226, 90 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 234, Ⲇ * 134, 214 * Ⲇ, Ⲇ * 177, Ⲇ * 195, Ⲇ * 197);
		Δ.bezierCurveTo(144 * Ⲇ, Ⲇ * 242, Ⲇ * 79, 216 * Ⲇ, Ⲇ * 58, 206 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 13, 174 * Ⲇ, Ⲇ * 20, Ⲇ * 134, Ⲇ * 23, Ⲇ * 107);
		Δ.bezierCurveTo(Ⲇ * 26, 78 * Ⲇ, 33 * Ⲇ, 60 * Ⲇ, 38 * Ⲇ, Ⲇ * 43);
		Δ.bezierCurveTo(Ⲇ * 42, Ⲇ * 32, 47 * Ⲇ, Ⲇ * 32, Ⲇ * 50, Ⲇ * 36);
		Δ.bezierCurveTo(Ⲇ * 54, Ⲇ * 37, Ⲇ * 50, Ⲇ * 52, Ⲇ * 44, 87 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 40, Ⲇ * 115, 46 * Ⲇ, Ⲇ * 142, 57 * Ⲇ, 158 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 76, Ⲇ * 189, Ⲇ * 129, Ⲇ * 182, 152 * Ⲇ, Ⲇ * 173);
		Δ.bezierCurveTo(186 * Ⲇ, Ⲇ * 156, 191 * Ⲇ, Ⲇ * 106, Ⲇ * 176, 85 * Ⲇ);
		Δ.bezierCurveTo(159 * Ⲇ, 61 * Ⲇ, Ⲇ * 132, 62 * Ⲇ, 122 * Ⲇ, Ⲇ * 66);
		Δ.bezierCurveTo(108 * Ⲇ, 74 * Ⲇ, 108 * Ⲇ, 89 * Ⲇ, Ⲇ * 116, 90 * Ⲇ);
		Δ.bezierCurveTo(123 * Ⲇ, 92 * Ⲇ, 130 * Ⲇ, Ⲇ * 93, Ⲇ * 131, Ⲇ * 94);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆᐃⲆ]);
		Δ.translate(Ⲇⵠⵠᐃ, Ⲇ * -10);
		Δ.globalAlpha = ᐃⵠⵠⵠ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(150 * Ⲇ, Ⲇ * 62);
		Δ.bezierCurveTo(Ⲇ * 151.5, Ⲇ * 71.5, Ⲇ * 149, Ⲇ * 70, Ⲇ * 153, Ⲇ * 81);
		Δ.bezierCurveTo(Ⲇ * 158, 73.5 * Ⲇ, Ⲇ * 158, Ⲇ * 73.5, Ⲇ * 163, 66 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⲆⵠⲆᐃ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 164, 171 * Ⲇ);
		Δ.bezierCurveTo(149 * Ⲇ, Ⲇ * 159, Ⲇ * 156.5, 165 * Ⲇ, 149 * Ⲇ, Ⲇ * 159);
		Δ.bezierCurveTo(149 * Ⲇ, 167 * Ⲇ, 149 * Ⲇ, 170 * Ⲇ, 152 * Ⲇ, Ⲇ * 178);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[5]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 132, 95 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 154, 102 * Ⲇ, Ⲇ * 154, Ⲇ * 126, Ⲇ * 137, 139 * Ⲇ);
		Δ.bezierCurveTo(113 * Ⲇ, 152 * Ⲇ, 89 * Ⲇ, Ⲇ * 136, Ⲇ * 80, Ⲇ * 121);
		Δ.bezierCurveTo(Ⲇ * 57, 89 * Ⲇ, Ⲇ * 69, 63 * Ⲇ, 79 * Ⲇ, 52 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 110, Ⲇ * 20, Ⲇ * 139, Ⲇ * 21, 150 * Ⲇ, Ⲇ * 25);
		Δ.bezierCurveTo(197 * Ⲇ, Ⲇ * 36, Ⲇ * 221, Ⲇ * 67, 226 * Ⲇ, Ⲇ * 90);
		Δ.bezierCurveTo(234 * Ⲇ, 134 * Ⲇ, Ⲇ * 214, Ⲇ * 177, Ⲇ * 195, 197 * Ⲇ);
		Δ.bezierCurveTo(144 * Ⲇ, Ⲇ * 242, 79 * Ⲇ, Ⲇ * 216, Ⲇ * 58, Ⲇ * 206);
		Δ.bezierCurveTo(Ⲇ * 13, 174 * Ⲇ, Ⲇ * 20, Ⲇ * 134, Ⲇ * 23, Ⲇ * 107);
		Δ.bezierCurveTo(26 * Ⲇ, Ⲇ * 78, 33 * Ⲇ, Ⲇ * 60, Ⲇ * 38, Ⲇ * 43);
		Δ.bezierCurveTo(Ⲇ * 42, 32 * Ⲇ, 47 * Ⲇ, Ⲇ * 32, Ⲇ * 50, 36 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 54, 37 * Ⲇ, Ⲇ * 50, Ⲇ * 52, Ⲇ * 44, Ⲇ * 87);
		Δ.bezierCurveTo(Ⲇ * 40, 115 * Ⲇ, 46 * Ⲇ, 142 * Ⲇ, 57 * Ⲇ, Ⲇ * 158);
		Δ.bezierCurveTo(76 * Ⲇ, Ⲇ * 189, 129 * Ⲇ, Ⲇ * 182, Ⲇ * 152, 173 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 186, 156 * Ⲇ, Ⲇ * 191, Ⲇ * 106, 176 * Ⲇ, 85 * Ⲇ);
		Δ.bezierCurveTo(159 * Ⲇ, 61 * Ⲇ, Ⲇ * 132, Ⲇ * 62, Ⲇ * 122, 66 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 108, 74 * Ⲇ, 108 * Ⲇ, 89 * Ⲇ, Ⲇ * 116, 90 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 123, 92 * Ⲇ, Ⲇ * 130, 93 * Ⲇ, Ⲇ * 131, 94 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ᐃΔΔⲆ], Δⵠ[ΔⲆⵠΔ], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 137, 137 * Ⲇ);
		Δ.bezierCurveTo(145 * Ⲇ, Ⲇ * 125, 138 * Ⲇ, Ⲇ * 108, Ⲇ * 123, Ⲇ * 104);
		Δ.bezierCurveTo(Ⲇ * 81, 101 * Ⲇ, 88 * Ⲇ, 77 * Ⲇ, Ⲇ * 98, Ⲇ * 65);
		Δ.bezierCurveTo(Ⲇ * 117, 38 * Ⲇ, 138 * Ⲇ, 39 * Ⲇ, 165 * Ⲇ, 52 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 197, Ⲇ * 72, Ⲇ * 207, 111 * Ⲇ, 197 * Ⲇ, 140 * Ⲇ);
		Δ.bezierCurveTo(182 * Ⲇ, 180 * Ⲇ, 161 * Ⲇ, Ⲇ * 197, Ⲇ * 112, 194 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 58, Ⲇ * 194, 37 * Ⲇ, 170 * Ⲇ, Ⲇ * 34, 142 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 29, 102 * Ⲇ, Ⲇ * 40, 63 * Ⲇ, 51 * Ⲇ, Ⲇ * 45);
		Δ.bezierCurveTo(43 * Ⲇ, Ⲇ * 78, Ⲇ * 41, Ⲇ * 103, Ⲇ * 43, 122 * Ⲇ);
		Δ.bezierCurveTo(51 * Ⲇ, 158 * Ⲇ, 63 * Ⲇ, Ⲇ * 174, 95 * Ⲇ, 179 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 129, 186 * Ⲇ, Ⲇ * 169, Ⲇ * 172, 177 * Ⲇ, Ⲇ * 144);
		Δ.bezierCurveTo(197 * Ⲇ, Ⲇ * 105, Ⲇ * 172, Ⲇ * 76, 160 * Ⲇ, 71 * Ⲇ);
		Δ.bezierCurveTo(125 * Ⲇ, 52 * Ⲇ, 111 * Ⲇ, Ⲇ * 73, Ⲇ * 111, Ⲇ * 81);
		Δ.bezierCurveTo(Ⲇ * 106, Ⲇ * 93, 140 * Ⲇ, Ⲇ * 92, 147 * Ⲇ, Ⲇ * 107);
		Δ.bezierCurveTo(153 * Ⲇ, 128 * Ⲇ, Ⲇ * 140, Ⲇ * 135, Ⲇ * 137, 139 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(132 * Ⲇ, 95 * Ⲇ);
		Δ.bezierCurveTo(154 * Ⲇ, 102 * Ⲇ, Ⲇ * 154, 126 * Ⲇ, Ⲇ * 137, 139 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 113, 152 * Ⲇ, Ⲇ * 89, 136 * Ⲇ, Ⲇ * 80, 121 * Ⲇ);
		Δ.bezierCurveTo(57 * Ⲇ, Ⲇ * 89, Ⲇ * 69, Ⲇ * 63, 79 * Ⲇ, Ⲇ * 52);
		Δ.bezierCurveTo(Ⲇ * 110, Ⲇ * 20, Ⲇ * 139, 21 * Ⲇ, Ⲇ * 150, 25 * Ⲇ);
		Δ.bezierCurveTo(197 * Ⲇ, 36 * Ⲇ, 221 * Ⲇ, 67 * Ⲇ, 226 * Ⲇ, 90 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 234, 134 * Ⲇ, 214 * Ⲇ, 177 * Ⲇ, 195 * Ⲇ, 197 * Ⲇ);
		Δ.bezierCurveTo(144 * Ⲇ, Ⲇ * 242, 79 * Ⲇ, Ⲇ * 216, 58 * Ⲇ, Ⲇ * 206);
		Δ.bezierCurveTo(13 * Ⲇ, Ⲇ * 174, ⲆⲆⲆⵠⵠ * Ⲇ, 134 * Ⲇ, 23 * Ⲇ, Ⲇ * 107);
		Δ.bezierCurveTo(26 * Ⲇ, 78 * Ⲇ, 33 * Ⲇ, 60 * Ⲇ, 38 * Ⲇ, Ⲇ * 43);
		Δ.bezierCurveTo(Ⲇ * 42, Ⲇ * 32, Ⲇ * 47, Ⲇ * 32, 50 * Ⲇ, 36 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 54, 37 * Ⲇ, 50 * Ⲇ, 52 * Ⲇ, 44 * Ⲇ, Ⲇ * 87);
		Δ.bezierCurveTo(Ⲇ * 40, Ⲇ * 115, Ⲇ * 46, 142 * Ⲇ, Ⲇ * 57, 158 * Ⲇ);
		Δ.bezierCurveTo(76 * Ⲇ, 189 * Ⲇ, 129 * Ⲇ, 182 * Ⲇ, Ⲇ * 152, Ⲇ * 173);
		Δ.bezierCurveTo(186 * Ⲇ, 156 * Ⲇ, 191 * Ⲇ, 106 * Ⲇ, Ⲇ * 176, Ⲇ * 85);
		Δ.bezierCurveTo(159 * Ⲇ, Ⲇ * 61, 132 * Ⲇ, Ⲇ * 62, Ⲇ * 122, 66 * Ⲇ);
		Δ.bezierCurveTo(108 * Ⲇ, Ⲇ * 74, Ⲇ * 108, Ⲇ * 89, Ⲇ * 116, Ⲇ * 90);
		Δ.bezierCurveTo(Ⲇ * 123, 92 * Ⲇ, 130 * Ⲇ, 93 * Ⲇ, 131 * Ⲇ, 94 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃⲆⲆΔᐃ, Δⵠ[ΔⵠⲆⲆ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(82 * Ⲇ, Ⲇ * 63);
		Δ.bezierCurveTo(Ⲇ * 91, 64 * Ⲇ, Ⲇ * 96, 62 * Ⲇ, Ⲇ * 98, 53 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 91, Ⲇ * 45, 85 * Ⲇ, 42 * Ⲇ, 78 * Ⲇ, Ⲇ * 41);
		Δ.bezierCurveTo(81 * Ⲇ, 51 * Ⲇ, 82 * Ⲇ, 57 * Ⲇ, Ⲇ * 82, Ⲇ * 63);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(148 * Ⲇ, 40 * Ⲇ);
		Δ.bezierCurveTo(140 * Ⲇ, Ⲇ * 52, 131 * Ⲇ, Ⲇ * 51, Ⲇ * 123, Ⲇ * 43);
		Δ.bezierCurveTo(123 * Ⲇ, Ⲇ * 25, 129 * Ⲇ, Ⲇ * 17, 134 * Ⲇ, Ⲇ * 12);
		Δ.bezierCurveTo(138 * Ⲇ, Ⲇ * 35, 142 * Ⲇ, Ⲇ * 31, Ⲇ * 148, Ⲇ * 40);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔᐃⵠΔ], Δⵠ[ⲆᐃΔⲆⵠ], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 189, Ⲇ * 43);
		Δ.bezierCurveTo(Ⲇ * 191, 54 * Ⲇ, Ⲇ * 196, Ⲇ * 58, Ⲇ * 205, Ⲇ * 59);
		Δ.bezierCurveTo(Ⲇ * 211, Ⲇ * 42, Ⲇ * 214, 37 * Ⲇ, 216 * Ⲇ, Ⲇ * 31);
		Δ.bezierCurveTo(202 * Ⲇ, 34 * Ⲇ, 195 * Ⲇ, 39 * Ⲇ, 190 * Ⲇ, 43 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔⲆΔ], Δⵠ[ᐃᐃᐃⲆⲆ], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(216 * Ⲇ, Ⲇ * 98);
		Δ.bezierCurveTo(Ⲇ * 219, 105 * Ⲇ, Ⲇ * 225, Ⲇ * 107, Ⲇ * 230, 109 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 227, Ⲇ * 113, Ⲇ * 221, 115 * Ⲇ, 215 * Ⲇ, 115 * Ⲇ);
		Δ.bezierCurveTo(208 * Ⲇ, Ⲇ * 109, Ⲇ * 211, Ⲇ * 101, Ⲇ * 216, 98 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], ΔΔⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(180 * Ⲇ, 85 * Ⲇ);
		Δ.bezierCurveTo(193 * Ⲇ, 86 * Ⲇ, 196 * Ⲇ, 98 * Ⲇ, Ⲇ * 191, Ⲇ * 108);
		Δ.bezierCurveTo(179 * Ⲇ, Ⲇ * 112, 167 * Ⲇ, Ⲇ * 113, Ⲇ * 155, Ⲇ * 111);
		Δ.bezierCurveTo(169 * Ⲇ, ᐃΔⲆᐃⵠ * Ⲇ, 176 * Ⲇ, 96 * Ⲇ, 180 * Ⲇ, 85 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⲆ], Δⵠ[5], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 96, 114 * Ⲇ);
		Δ.bezierCurveTo(102 * Ⲇ, Ⲇ * 109, 112 * Ⲇ, 110 * Ⲇ, 114 * Ⲇ, 118 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 111, Ⲇ * 134, 102 * Ⲇ, 143 * Ⲇ, Ⲇ * 95, Ⲇ * 147);
		Δ.bezierCurveTo(98 * Ⲇ, 123 * Ⲇ, Ⲇ * 97, 119 * Ⲇ, Ⲇ * 96, 115 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠΔᐃⲆ], Δⵠ[ⵠⲆⲆⵠ], Ⲇ * ᐃⵠΔⵠ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 79, 92 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 86, Ⲇ * 95, Ⲇ * 89, Ⲇ * 102, 83 * Ⲇ, Ⲇ * 111);
		Δ.bezierCurveTo(Ⲇ * 70, Ⲇ * 110, Ⲇ * 61, 107 * Ⲇ, 54 * Ⲇ, Ⲇ * 100);
		Δ.bezierCurveTo(70 * Ⲇ, Ⲇ * 97, 70 * Ⲇ, 95 * Ⲇ, Ⲇ * 78, 92 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔⵠⲆⵠᐃ], Δⵠ[ΔΔⵠⲆΔ], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(39 * Ⲇ, 130 * Ⲇ);
		Δ.bezierCurveTo(37 * Ⲇ, 141 * Ⲇ, 41 * Ⲇ, 143 * Ⲇ, 48 * Ⲇ, 144 * Ⲇ);
		Δ.bezierCurveTo(54 * Ⲇ, 134 * Ⲇ, Ⲇ * 55, 131 * Ⲇ, Ⲇ * 56, Ⲇ * 123);
		Δ.bezierCurveTo(47 * Ⲇ, 129 * Ⲇ, 43 * Ⲇ, Ⲇ * 129, 39 * Ⲇ, 129 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], ΔΔⵠⵠ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(113 * Ⲇ, 189 * Ⲇ);
		Δ.bezierCurveTo(119 * Ⲇ, 201 * Ⲇ, 127 * Ⲇ, Ⲇ * 198, 134 * Ⲇ, Ⲇ * 192);
		Δ.bezierCurveTo(128 * Ⲇ, 175 * Ⲇ, 128 * Ⲇ, Ⲇ * 173, Ⲇ * 128, 165 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 117, 176 * Ⲇ, 116 * Ⲇ, 182 * Ⲇ, Ⲇ * 113, Ⲇ * 187);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔΔᐃⵠΔ], Δⵠ[ⵠΔⲆᐃ], Ⲇ * 5);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(74 * Ⲇ, Ⲇ * 154);
		Δ.bezierCurveTo(Ⲇ * 76, 163 * Ⲇ, Ⲇ * 76, 170 * Ⲇ, 75 * Ⲇ, Ⲇ * 177);
		Δ.bezierCurveTo(68 * Ⲇ, 179 * Ⲇ, 66 * Ⲇ, 176 * Ⲇ, 63 * Ⲇ, 171 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 69, Ⲇ * 164, Ⲇ * 72, 159 * Ⲇ, Ⲇ * 74, 154 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⲆᐃⲆ], Δⵠ[ΔΔⵠΔⵠ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(206 * Ⲇ, 152 * Ⲇ);
		Δ.bezierCurveTo(198 * Ⲇ, 158 * Ⲇ, Ⲇ * 198, Ⲇ * 166, Ⲇ * 201, 171 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 209, 170 * Ⲇ, Ⲇ * 221, 170 * Ⲇ, Ⲇ * 226, Ⲇ * 172);
		Δ.bezierCurveTo(219 * Ⲇ, Ⲇ * 159, 210 * Ⲇ, Ⲇ * 155, 207 * Ⲇ, 153 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ᐃⵠΔⵠ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 181, Ⲇ * 184);
		Δ.bezierCurveTo(Ⲇ * 170, Ⲇ * 184, Ⲇ * 167, 187 * Ⲇ, Ⲇ * 163, 195 * Ⲇ);
		Δ.bezierCurveTo(171 * Ⲇ, 207 * Ⲇ, Ⲇ * 183, 214 * Ⲇ, Ⲇ * 191, 217 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 183, 204 * Ⲇ, 184 * Ⲇ, 196 * Ⲇ, Ⲇ * 181, 184 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], Ⲇ * ⲆⵠⲆᐃ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(66 * Ⲇ, 199 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 73, Ⲇ * 197, Ⲇ * 78, 199 * Ⲇ, 79 * Ⲇ, 206 * Ⲇ);
		Δ.bezierCurveTo(71 * Ⲇ, Ⲇ * 216, 67 * Ⲇ, Ⲇ * 221, Ⲇ * 57, Ⲇ * 223);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ΔΔⵠⲆΔ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 182, Ⲇ * 143);
		Δ.bezierCurveTo(183 * Ⲇ, Ⲇ * 146, 183 * Ⲇ, Ⲇ * 149, 179 * Ⲇ, 152 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 174, Ⲇ * 146, 174 * Ⲇ, 146 * Ⲇ, Ⲇ * 169, 140 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], ⵠⲆⲆⲆ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(32 * Ⲇ, Ⲇ * 159);
		Δ.bezierCurveTo(Ⲇ * 45, Ⲇ * 160, 48 * Ⲇ, Ⲇ * 164, 45 * Ⲇ, 175 * Ⲇ);
		Δ.bezierCurveTo(28 * Ⲇ, Ⲇ * 183, Ⲇ * 25, 184 * Ⲇ, ⵠⵠⲆΔΔΔᐃ * Ⲇ, Ⲇ * 184);
		Δ.bezierCurveTo(Ⲇ * 30, Ⲇ * 170, Ⲇ * 29, 164 * Ⲇ, Ⲇ * 31, Ⲇ * 160);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ΔΔⵠⵠ], ⲆⵠⲆᐃ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 110, 214 * Ⲇ);
		Δ.bezierCurveTo(106 * Ⲇ, Ⲇ * 212, Ⲇ * 104, Ⲇ * 213, Ⲇ * 102, Ⲇ * 218);
		Δ.bezierCurveTo(Ⲇ * 104, 220 * Ⲇ, Ⲇ * 107, 222 * Ⲇ, 110 * Ⲇ, Ⲇ * 224);
		Δ.bezierCurveTo(110.5 * Ⲇ, 219 * Ⲇ, 110.5 * Ⲇ, Ⲇ * 219, Ⲇ * 111, Ⲇ * 214);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[5], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 40, 52 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 41, 57 * Ⲇ, 40 * Ⲇ, 61 * Ⲇ, Ⲇ * 34, Ⲇ * 60);
		Δ.bezierCurveTo(31.5 * Ⲇ, 55 * Ⲇ, Ⲇ * 31.5, Ⲇ * 55, 29 * Ⲇ, 50 * Ⲇ);
		Δ.bezierCurveTo(34 * Ⲇ, Ⲇ * 50.5, Ⲇ * 34, Ⲇ * 50.5, Ⲇ * 39, 51 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ΔΔⵠⵠ], 5 * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(31 * Ⲇ, 81 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 37, Ⲇ * 84, Ⲇ * 38, Ⲇ * 90, Ⲇ * 34, 99 * Ⲇ);
		Δ.bezierCurveTo(23 * Ⲇ, Ⲇ * 97, ᐃΔΔⵠΔ * Ⲇ, Ⲇ * 96, 16 * Ⲇ, Ⲇ * 93);
		Δ.bezierCurveTo(24 * Ⲇ, 88 * Ⲇ, 28 * Ⲇ, 85 * Ⲇ, 30 * Ⲇ, 81 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[4], Δⵠ[ᐃⵠΔⵠ], 5 * Ⲇ);
		return ᐃⵠ
	}

	function ᐃⲆⵠⲆⲆΔΔ(Ⲇ, ⲆⲆᐃⲆⲆ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 137;
		ᐃⵠ.height = Ⲇ * 129;
		Δ.globalAlpha = .5;
		ⵠΔᐃ(Δ, 69 * Ⲇ, 64 * Ⲇ, Ⲇ * 48.16637831516918);
		ⵠᐃ(Δ, Δⵠ[1]);
		Δ.globalAlpha = .7;
		ⵠΔᐃ(Δ, Ⲇ * 69, 64 * Ⲇ, Ⲇ * 38.23105625617661);
		ⵠᐃ(Δ, Δⵠ[Ⲇᐃⵠⵠ]);
		Δ.globalAlpha = .7;
		ⵠΔᐃ(Δ, 69 * Ⲇ, Ⲇ * 64, 32.01562118716424 * Ⲇ);
		ⵠᐃ(Δ, Δⵠ[2], Δⵠ[3], Ⲇ * 4);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(72 * Ⲇ, Ⲇ * 41);
		Δ.bezierCurveTo(Ⲇ * 52, 41 * Ⲇ, Ⲇ * 48, Ⲇ * 50, Ⲇ * 45, Ⲇ * 58);
		Δ.bezierCurveTo(43 * Ⲇ, Ⲇ * 67, Ⲇ * 45, 68 * Ⲇ, Ⲇ * 46, 72 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 52, 53 * Ⲇ, 60 * Ⲇ, 48 * Ⲇ, 72 * Ⲇ, 42 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(93 * Ⲇ, 62 * Ⲇ);
		Δ.bezierCurveTo(95 * Ⲇ, Ⲇ * 72, 90 * Ⲇ, 81 * Ⲇ, 81 * Ⲇ, 87 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 74, Ⲇ * 91, 69 * Ⲇ, 89 * Ⲇ, 64 * Ⲇ, 88 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 77, Ⲇ * 83, 84 * Ⲇ, 82 * Ⲇ, Ⲇ * 92, Ⲇ * 62);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠⵠⲆᐃ]);
		return ᐃⵠ
	}

	function ⲆⵠⲆⲆΔⵠᐃⵠᐃ(Ⲇ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 271;
		ᐃⵠ.height = 366 * Ⲇ;
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 133, Ⲇ * 99);
		Δ.bezierCurveTo(186 * Ⲇ, Ⲇ * 123, Ⲇ * 199, 152 * Ⲇ, 209 * Ⲇ, Ⲇ * 169);
		Δ.bezierCurveTo(228 * Ⲇ, Ⲇ * 205, 224 * Ⲇ, 245 * Ⲇ, 190 * Ⲇ, 276 * Ⲇ);
		Δ.bezierCurveTo(161 * Ⲇ, Ⲇ * 296, 99 * Ⲇ, Ⲇ * 292, Ⲇ * 79, 274 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 49, Ⲇ * 253, Ⲇ * 47, Ⲇ * 214, 50 * Ⲇ, Ⲇ * 197);
		Δ.bezierCurveTo(Ⲇ * 61, Ⲇ * 143, Ⲇ * 102, 113 * Ⲇ, 131 * Ⲇ, Ⲇ * 99);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(73 * Ⲇ, 270 * Ⲇ);
		Δ.bezierCurveTo(79 * Ⲇ, 280 * Ⲇ, Ⲇ * 77, Ⲇ * 280, 78 * Ⲇ, Ⲇ * 287);
		Δ.bezierCurveTo(Ⲇ * 78, 290 * Ⲇ, Ⲇ * 83, 291 * Ⲇ, 82 * Ⲇ, Ⲇ * 299);
		Δ.bezierCurveTo(81 * Ⲇ, 301 * Ⲇ, 87 * Ⲇ, Ⲇ * 301, Ⲇ * 92, Ⲇ * 314);
		Δ.bezierCurveTo(94 * Ⲇ, Ⲇ * 319, Ⲇ * ᐃⵠⵠΔⲆ, 321 * Ⲇ, 107 * Ⲇ, Ⲇ * 320);
		Δ.bezierCurveTo(Ⲇ * 111, 323 * Ⲇ, Ⲇ * 114, Ⲇ * 324, Ⲇ * 119, Ⲇ * 320);
		Δ.bezierCurveTo(Ⲇ * 137, 321 * Ⲇ, 146 * Ⲇ, Ⲇ * 323, 139 * Ⲇ, 320 * Ⲇ);
		Δ.bezierCurveTo(141 * Ⲇ, Ⲇ * 324, Ⲇ * 150, 324 * Ⲇ, 153 * Ⲇ, 320 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 168, 319 * Ⲇ, 171 * Ⲇ, Ⲇ * 316, 173 * Ⲇ, 307 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 180, Ⲇ * 305, 180 * Ⲇ, Ⲇ * 301, Ⲇ * 178, 296 * Ⲇ);
		Δ.bezierCurveTo(183 * Ⲇ, Ⲇ * 296, 185 * Ⲇ, Ⲇ * 289, Ⲇ * 188, Ⲇ * 279);
		Δ.bezierCurveTo(171 * Ⲇ, 286 * Ⲇ, 149 * Ⲇ, 290 * Ⲇ, Ⲇ * 132, 289 * Ⲇ);
		Δ.bezierCurveTo(101 * Ⲇ, Ⲇ * 290, Ⲇ * 86, Ⲇ * 280, Ⲇ * 74, Ⲇ * 271);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(76 * Ⲇ, 252 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 85, Ⲇ * 294, Ⲇ * 96, Ⲇ * 314, 103 * Ⲇ, Ⲇ * 314);
		Δ.bezierCurveTo(Ⲇ * 106, Ⲇ * 316, 151 * Ⲇ, 314 * Ⲇ, 156 * Ⲇ, Ⲇ * 314);
		Δ.bezierCurveTo(169 * Ⲇ, 317 * Ⲇ, 182 * Ⲇ, 285 * Ⲇ, 191 * Ⲇ, Ⲇ * 256);
		Δ.bezierCurveTo(134.5 * Ⲇ, 254 * Ⲇ, 134.5 * Ⲇ, 254 * Ⲇ, 78 * Ⲇ, Ⲇ * 252);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃΔ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 84, 257 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 122, 273 * Ⲇ, Ⲇ * 146, 268 * Ⲇ, Ⲇ * 179, 261 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 190, 258 * Ⲇ, Ⲇ * 187, Ⲇ * 266, Ⲇ * 178, Ⲇ * 272);
		Δ.bezierCurveTo(Ⲇ * 160, 284 * Ⲇ, 123 * Ⲇ, 282 * Ⲇ, Ⲇ * ΔᐃⵠΔⲆ, Ⲇ * 277);
		Δ.bezierCurveTo(73 * Ⲇ, Ⲇ * 260, 79 * Ⲇ, Ⲇ * 257, Ⲇ * 84, Ⲇ * 257);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ΔᐃⲆⲆ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(125 * Ⲇ, 65 * Ⲇ);
		Δ.bezierCurveTo(133 * Ⲇ, 45 * Ⲇ, 136 * Ⲇ, Ⲇ * 42, Ⲇ * 141, Ⲇ * 55);
		Δ.bezierCurveTo(151 * Ⲇ, 96 * Ⲇ, Ⲇ * 164, 117 * Ⲇ, Ⲇ * 175, 134 * Ⲇ);
		Δ.bezierCurveTo(203 * Ⲇ, Ⲇ * 181, 207 * Ⲇ, 182 * Ⲇ, Ⲇ * 208, Ⲇ * 215);
		Δ.bezierCurveTo(206 * Ⲇ, 240 * Ⲇ, 205 * Ⲇ, 246 * Ⲇ, Ⲇ * 184, Ⲇ * 258);
		Δ.bezierCurveTo(Ⲇ * 161, Ⲇ * 267, Ⲇ * 131, Ⲇ * 272, 86 * Ⲇ, 258 * Ⲇ);
		Δ.bezierCurveTo(67 * Ⲇ, 252 * Ⲇ, 68 * Ⲇ, Ⲇ * 239, 64 * Ⲇ, 216 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 62, Ⲇ * 194, 72 * Ⲇ, 169 * Ⲇ, 92 * Ⲇ, Ⲇ * 142);
		Δ.bezierCurveTo(106 * Ⲇ, 121 * Ⲇ, 114 * Ⲇ, Ⲇ * 101, 125 * Ⲇ, Ⲇ * 65);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(115 * Ⲇ, Ⲇ * 37);
		Δ.bezierCurveTo(Ⲇ * 116, Ⲇ * 28, Ⲇ * 119, 27 * Ⲇ, Ⲇ * 126, Ⲇ * 37);
		Δ.bezierCurveTo(134 * Ⲇ, 48 * Ⲇ, Ⲇ * 134, 49 * Ⲇ, Ⲇ * 132, Ⲇ * 59);
		Δ.bezierCurveTo(Ⲇ * 131, 67 * Ⲇ, Ⲇ * 127, Ⲇ * 65, 120 * Ⲇ, 56 * Ⲇ);
		Δ.bezierCurveTo(114 * Ⲇ, 49 * Ⲇ, 113 * Ⲇ, Ⲇ * 43, Ⲇ * 115, 38 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 146, Ⲇ * 34);
		Δ.bezierCurveTo(Ⲇ * 152, Ⲇ * 28, 155 * Ⲇ, 27 * Ⲇ, Ⲇ * 157, Ⲇ * 39);
		Δ.bezierCurveTo(Ⲇ * 157, 45 * Ⲇ, Ⲇ * 157, 49 * Ⲇ, Ⲇ * 150, 56 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 141, 66 * Ⲇ, 138 * Ⲇ, Ⲇ * 66, Ⲇ * 138, Ⲇ * 57);
		Δ.bezierCurveTo(137 * Ⲇ, Ⲇ * 50, 137 * Ⲇ, 47 * Ⲇ, Ⲇ * 141, Ⲇ * 42);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[ⵠᐃⲆⵠ]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(143 * Ⲇ, 69 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 148, Ⲇ * 56, Ⲇ * 156, Ⲇ * 50, Ⲇ * 158, 58 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 159, Ⲇ * 64, Ⲇ * 160, Ⲇ * 67, Ⲇ * 153, 77 * Ⲇ);
		Δ.bezierCurveTo(148 * Ⲇ, Ⲇ * 83, 145 * Ⲇ, 84 * Ⲇ, Ⲇ * 143, Ⲇ * 77);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(149 * Ⲇ, 92 * Ⲇ);
		Δ.bezierCurveTo(149 * Ⲇ, Ⲇ * 89, Ⲇ * 151, Ⲇ * 84, 156 * Ⲇ, 79 * Ⲇ);
		Δ.bezierCurveTo(161 * Ⲇ, Ⲇ * 73, 163 * Ⲇ, 78 * Ⲇ, 162 * Ⲇ, 86 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 161, Ⲇ * 91, 155 * Ⲇ, Ⲇ * 99, 152 * Ⲇ, Ⲇ * 98);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 111, Ⲇ * 61);
		Δ.bezierCurveTo(114 * Ⲇ, 51 * Ⲇ, 117 * Ⲇ, Ⲇ * 51, Ⲇ * 124, 64 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 128, 68 * Ⲇ, Ⲇ * 128, Ⲇ * 76, Ⲇ * 126, 79 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 123, 84 * Ⲇ, Ⲇ * 122, Ⲇ * 82, Ⲇ * 115, Ⲇ * 74);
		Δ.bezierCurveTo(112 * Ⲇ, Ⲇ * 67, 115 * Ⲇ, 74 * Ⲇ, Ⲇ * 115, 74 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 111, Ⲇ * 68, Ⲇ * 111, 66 * Ⲇ, Ⲇ * 111, Ⲇ * 62);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(107 * Ⲇ, Ⲇ * 81);
		Δ.bezierCurveTo(Ⲇ * 108, 74 * Ⲇ, Ⲇ * 112, 73 * Ⲇ, 118 * Ⲇ, Ⲇ * 84);
		Δ.bezierCurveTo(122 * Ⲇ, 88 * Ⲇ, Ⲇ * 122, 93 * Ⲇ, Ⲇ * 121, 98 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 114, Ⲇ * 98, Ⲇ * 113, Ⲇ * 98, 109 * Ⲇ, Ⲇ * 90);
		Δ.bezierCurveTo(Ⲇ * 107, Ⲇ * 87, 106 * Ⲇ, Ⲇ * 85, 107 * Ⲇ, 82 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[0]);
		return ᐃⵠ
	}

	function ⲆΔⵠΔⵠⵠᐃ(Ⲇ, Δⵠᐃⵠ, Δⵠ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = 316 * Ⲇ;
		ᐃⵠ.height = Ⲇ * 365;
		Δ.save();
		Δ.translate(156.07142639160156 * Ⲇ, 51.81248474121094 * Ⲇ);
		Δ.rotate(ⵠⵠΔΔ);
		ᐃΔⵠ(Δ, Ⲇ * -21.5, Ⲇ * -34, 43 * Ⲇ, Ⲇ * 68, Ⲇ * 8);
		Δ.restore();
		ⵠᐃ(Δ, Δⵠ[ⲆⲆΔⵠ], Δⵠ[2], Ⲇ * 15);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 110.57142639160156, Ⲇ * 197.09820556640625);
		Δ.bezierCurveTo(158.07142639160156 * Ⲇ, Ⲇ * 179.09820556640625, Ⲇ * 158.07142639160156, 179.09820556640625 * Ⲇ, 205.57142639160156 * Ⲇ, Ⲇ * 161.09820556640625);
		Δ.bezierCurveTo(205.57142639160156 * Ⲇ, Ⲇ * 235.45535278320312, Ⲇ * 205.57142639160156, Ⲇ * 235.45535278320312, 205.57142639160156 * Ⲇ, Ⲇ * 309.8125);
		Δ.bezierCurveTo(Ⲇ * 205.57142639160156, Ⲇ * 323.8125, Ⲇ * 200.57142639160156, Ⲇ * 325.8125, 187.57142639160156 * Ⲇ, 326.8125 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 155.57142639160156, 326.3125 * Ⲇ, 155.57142639160156 * Ⲇ, 326.3125 * Ⲇ, Ⲇ * 123.57142639160156, Ⲇ * 325.8125);
		Δ.bezierCurveTo(111.57142639160156 * Ⲇ, Ⲇ * 326.8125, 109.57142639160156 * Ⲇ, Ⲇ * 321.8125, Ⲇ * 110.57142639160156, Ⲇ * 312.8125);
		Δ.closePath();
		ⵠᐃ(Δ, Δⵠ[3], Δⵠ[ΔⲆⵠΔⲆ], ⲆⲆⲆᐃΔΔΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(Ⲇ * 126.57142639160156, 67.38392639160156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 126.57142639160156, Ⲇ * 57.38392639160156, 132.57142639160156 * Ⲇ, Ⲇ * 54.38392639160156, Ⲇ * 140.57142639160156, 54.38392639160156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 177.57142639160156, 55.38392639160156 * Ⲇ, Ⲇ * 158.07142639160156, 54.38392639160156 * Ⲇ, Ⲇ * 175.57142639160156, Ⲇ * 54.38392639160156);
		Δ.bezierCurveTo(Ⲇ * 185.57142639160156, Ⲇ * 56.38392639160156, 185.57142639160156 * Ⲇ, 57.38392639160156 * Ⲇ, Ⲇ * 184.57142639160156, 66.38392639160156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 184.57142639160156, 78.38392639160156 * Ⲇ, 184.57142639160156 * Ⲇ, 89.38392639160156 * Ⲇ, Ⲇ * 184.57142639160156, 90.38392639160156 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 177.57142639160156, Ⲇ * 107.38392639160156, Ⲇ * 180.57142639160156, Ⲇ * 112.38392639160156, 189.57142639160156 * Ⲇ, Ⲇ * 116.38392639160156);
		Δ.bezierCurveTo(Ⲇ * 212.57142639160156, Ⲇ * 127.38392639160156, Ⲇ * 212.57142639160156, Ⲇ * 132.38392639160156, Ⲇ * 211.57142639160156, Ⲇ * 150.38392639160156);
		Δ.bezierCurveTo(Ⲇ * 211.57142639160156, 227.59821128845215 * Ⲇ, 211.57142639160156 * Ⲇ, 227.59821128845215 * Ⲇ, Ⲇ * 211.57142639160156, 304.81249618530273 * Ⲇ);
		Δ.bezierCurveTo(212.57142639160156 * Ⲇ, 328.81249618530273 * Ⲇ, 209.57142639160156 * Ⲇ, 330.81249618530273 * Ⲇ, Ⲇ * 188.57142639160156, Ⲇ * 333.81249618530273);
		Δ.bezierCurveTo(155.07142639160156 * Ⲇ, Ⲇ * 333.31249618530273, 155.07142639160156 * Ⲇ, 333.31249618530273 * Ⲇ, 121.57142639160156 * Ⲇ, Ⲇ * 332.81249618530273);
		Δ.bezierCurveTo(Ⲇ * 104.57142639160156, 327.81249618530273 * Ⲇ, Ⲇ * 105.57142639160156, Ⲇ * 328.81249618530273, Ⲇ * 104.57142639160156, Ⲇ * 312.81249618530273);
		Δ.bezierCurveTo(104.57142639160156 * Ⲇ, Ⲇ * 228.16963958740234, Ⲇ * 104.57142639160156, Ⲇ * 228.16963958740234, Ⲇ * 104.57142639160156, 143.52678298950195 * Ⲇ);
		Δ.bezierCurveTo(106.57142639160156 * Ⲇ, 124.52678298950195 * Ⲇ, Ⲇ * 110.57142639160156, 123.52678298950195 * Ⲇ, 123.57142639160156 * Ⲇ, 116.52678298950195 * Ⲇ);
		Δ.bezierCurveTo(136.57142639160156 * Ⲇ, 110.52678298950195 * Ⲇ, Ⲇ * 130.57142639160156, 106.52678298950195 * Ⲇ, Ⲇ * 126.57142639160156, 98.52678298950195 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ⵠᐃⲆⵠⲆ, Δⵠ[5], ᐃⵠᐃᐃΔ * Ⲇ);
		Δ.beginPath();
		Δ.lineCap = ᐃ[250];
		Δ.lineJoin = ᐃ[250];
		Δ.moveTo(125.57142639160156 * Ⲇ, 156.66963958740234 * Ⲇ);
		Δ.bezierCurveTo(Ⲇ * 125.57142639160156, 182.66963958740234 * Ⲇ, Ⲇ * 125.57142639160156, 182.66963958740234 * Ⲇ, 125.57142639160156 * Ⲇ, 208.66963958740234 * Ⲇ);
		Δ.closePath();
		ⵠᐃ(Δ, ᐃⲆⲆΔᐃ, Δⵠ[6], Ⲇ * 15);
		return ᐃⵠ
	}

	function ⲆⵠⲆᐃⵠᐃΔ(Ⲇ, Δⵠᐃⵠ, Δⵠ, ᐃⲆ) {
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		ᐃⵠ.width = Ⲇ * 450;
		ᐃⵠ.height = 260 * Ⲇ;
		var ⵠⵠ = ⵠᐃⲆΔΔⲆΔ(ⲆⲆΔⵠ * Ⲇ, ΔⲆΔⵠⲆ, Δⵠ);
		Δ.drawImage(ⵠⵠ, 0 * Ⲇ, Ⲇ * 0);
		if (ᐃⲆ == 1) {
			Δ.translate(Ⲇ * ᐃⲆⵠⵠΔ, Ⲇ * 0);
			ⵠΔᐃ(Δ, Ⲇ * 113, Ⲇ * 120, Ⲇ * 66);
			ⵠᐃ(Δ, undefined, Δⵠ[4], 13 * Ⲇ);
			var ⵠⵠ = ΔⵠΔⵠⲆᐃΔ(Ⲇ * .65, ᐃⵠⲆⵠᐃ, [ᐃ[414], ᐃ[62], ᐃ[480], ᐃ[71], ᐃ[491]]);
			Δ.rotate(.7);
			Δ.drawImage(ⵠⵠ, Ⲇ * 133, -64 * Ⲇ);
			Δ.rotate(-.7);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(70 * Ⲇ, Ⲇ * 70);
			Δ.bezierCurveTo(113 * Ⲇ, 120.5 * Ⲇ, Ⲇ * 113, 120.5 * Ⲇ, Ⲇ * 156, 171 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, ΔⲆΔᐃⲆ, Δⵠ[ᐃᐃⵠΔ], 13 * Ⲇ)
		} else if (2 == ᐃⲆ) {
			Δ.translate(ⵠⵠⲆᐃⵠ * Ⲇ, Ⲇ * 0);
			ⵠΔᐃ(Δ, Ⲇ * 113, 120 * Ⲇ, Ⲇ * 66);
			ⵠᐃ(Δ, undefined, Δⵠ[ΔΔΔⵠ], ΔΔΔᐃᐃ * Ⲇ);
			Δ.translate(30 * Ⲇ, 40 * Ⲇ);
			Δ.save();
			Δ.translate(83.5 * Ⲇ, 66.5 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -40.5, Ⲇ * -29.5, Ⲇ * 81, Ⲇ * 59, 15 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, "#dff2f7", ᐃ[469], Ⲇ * ΔⵠᐃΔⲆ);
			ⵠΔᐃ(Δ, 22 * Ⲇ, Ⲇ * 82, ᐃⵠᐃⲆⵠ * Ⲇ);
			ⵠᐃ(Δ, "#dff2f7", ᐃ[469], ⲆⲆᐃΔᐃᐃⲆ * Ⲇ);
			ⵠΔᐃ(Δ, Ⲇ * 145, 82 * Ⲇ, Ⲇ * 12);
			ⵠᐃ(Δ, "#dff2f7", ᐃ[469], 7 * Ⲇ);
			var ⵠⵠ = ᐃⲆⲆⲆΔ(.5 * Ⲇ, true, ["#80500b", "#7c4908"]);
			Δ.drawImage(ⵠⵠ, 10 * Ⲇ, Ⲇ * 85);
			var ⵠⵠ = ᐃⲆⲆⲆΔ(Ⲇ * .5, ᐃΔΔΔΔ, ["#80500b", "#7c4908"]);
			Δ.drawImage(ⵠⵠ, 50 * Ⲇ, 85 * Ⲇ);
			var ⵠⵠ = ᐃⲆⲆⲆΔ(Ⲇ * .5, true, ["#80500b", "#7c4908"]);
			Δ.drawImage(ⵠⵠ, Ⲇ * 90, 85 * Ⲇ);
			var ⵠⵠ = ⵠⲆⲆⵠᐃ(Ⲇ * ᐃⲆⲆ, true, [ᐃ[32], ᐃ[191]]);
			Δ.drawImage(ⵠⵠ, 90 * Ⲇ, 105 * Ⲇ);
			var ⵠⵠ = ⵠⲆⲆⵠᐃ(Ⲇ * 1, true, [ᐃ[32], ᐃ[191]]);
			Δ.drawImage(ⵠⵠ, 90 * Ⲇ, Ⲇ * 105);
			var ⵠⵠ = ⵠⲆⲆⵠᐃ(ᐃⵠⵠⵠ * Ⲇ, ΔⲆΔⵠⲆ, [ᐃ[32], ᐃ[191]]);
			Δ.drawImage(ⵠⵠ, Ⲇ * 30, 125 * Ⲇ);
			var ⵠⵠ = ⵠⲆⲆⵠᐃ(1 * Ⲇ, true, [ᐃ[32], ᐃ[191]]);
			Δ.drawImage(ⵠⵠ, 50 * Ⲇ, Ⲇ * 115);
			var ⵠⵠ = ⵠⲆⲆⵠᐃ(Ⲇ * ΔΔΔᐃ, true, [ᐃ[32], ᐃ[191]]);
			Δ.drawImage(ⵠⵠ, 30 * Ⲇ, Ⲇ * 100);
			var ⵠⵠ = ⵠⲆⲆⵠᐃ(ⲆⲆⵠ * Ⲇ, ᐃᐃⲆᐃⵠ, [ᐃ[32], ᐃ[191]]);
			Δ.drawImage(ⵠⵠ, 80 * Ⲇ, Ⲇ * 120);
			var ⵠⵠ = ⵠⲆⲆⵠᐃ(Ⲇ * 1, ᐃⵠⲆⵠᐃ, [ᐃ[32], ᐃ[191]]);
			Δ.drawImage(ⵠⵠ, 110 * Ⲇ, Ⲇ * 125);
			var ⵠⵠ = ⵠⲆⲆⵠᐃ(ΔⲆⵠⲆ * Ⲇ, true, [ᐃ[32], ᐃ[191]]);
			Δ.drawImage(ⵠⵠ, Ⲇ * 120, 105 * Ⲇ)
		} else if (ᐃⲆ == 3) {
			Δ.translate(Ⲇ * 100, Ⲇ * 0);
			ⵠΔᐃ(Δ, Ⲇ * 113, Ⲇ * 120, 66 * Ⲇ);
			ⵠᐃ(Δ, undefined, Δⵠ[ΔⲆⲆⲆ], ΔΔⲆⵠⲆΔⲆ * Ⲇ);
			Δ.translate(40 * Ⲇ, Ⲇ * 50);
			Δ.save();
			Δ.translate(71 * Ⲇ, 69 * Ⲇ);
			ᐃΔⵠ(Δ, Ⲇ * -30, Ⲇ * -42, Ⲇ * 60, 84 * Ⲇ, 10 * Ⲇ);
			Δ.restore();
			ⵠᐃ(Δ, ᐃⲆⲆⲆᐃ, Δⵠ[5], 4 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(42 * Ⲇ, Ⲇ * 28);
			Δ.bezierCurveTo(Ⲇ * 60, 31 * Ⲇ, 60 * Ⲇ, 31 * Ⲇ, Ⲇ * 78, 34 * Ⲇ);
			Δ.bezierCurveTo(82 * Ⲇ, 34 * Ⲇ, 84 * Ⲇ, 37 * Ⲇ, Ⲇ * 83, Ⲇ * 45);
			Δ.bezierCurveTo(83 * Ⲇ, 80 * Ⲇ, 83 * Ⲇ, 80 * Ⲇ, Ⲇ * 83, 115 * Ⲇ);
			Δ.bezierCurveTo(83 * Ⲇ, Ⲇ * 120, Ⲇ * 80, 122 * Ⲇ, Ⲇ * 73, 120 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 42, 111 * Ⲇ, 43 * Ⲇ, Ⲇ * 109, Ⲇ * 41, Ⲇ * 102);
			Δ.bezierCurveTo(41 * Ⲇ, 71 * Ⲇ, 41 * Ⲇ, 71 * Ⲇ, Ⲇ * 41, 40 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, Δⵠ[ⵠᐃⵠᐃΔ], Δⵠ[5], Ⲇ * ⵠΔᐃⲆ);
			Δ.translate(Ⲇ * -40, -50 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(70 * Ⲇ, Ⲇ * 70);
			Δ.bezierCurveTo(113 * Ⲇ, 120.5 * Ⲇ, 113 * Ⲇ, Ⲇ * 120.5, Ⲇ * 156, 171 * Ⲇ);
			Δ.closePath();
			ⵠᐃ(Δ, undefined, Δⵠ[4], 13 * Ⲇ)
		} else if (ᐃⲆ == ΔⲆΔⲆ) {
			Δ.scale(1, ⵠⵠⵠⲆ);
			Δ.translate(Ⲇ * 70, 50 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 23, ⲆⲆⲆⵠΔ * Ⲇ);
			Δ.bezierCurveTo(25.5 * Ⲇ, 56 * Ⲇ, 25.5 * Ⲇ, Ⲇ * 56, Ⲇ * 28, Ⲇ * 106);
			ⵠᐃ(Δ, undefined, Δⵠ[ᐃᐃᐃⲆⲆ], Ⲇ * 14);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 59, Ⲇ * 10);
			Δ.bezierCurveTo(Ⲇ * 61, 51.5 * Ⲇ, 61 * Ⲇ, Ⲇ * 51.5, 63 * Ⲇ, Ⲇ * 93);
			ⵠᐃ(Δ, ᐃⲆⲆⲆᐃ, Δⵠ[5], 14 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(ⲆⵠⵠΔᐃ * Ⲇ, Ⲇ * 55);
			Δ.bezierCurveTo(33.5 * Ⲇ, 55 * Ⲇ, 33.5 * Ⲇ, Ⲇ * 55, 60 * Ⲇ, 55 * Ⲇ);
			ⵠᐃ(Δ, undefined, Δⵠ[ⵠᐃⵠΔᐃ], Ⲇ * Δⵠⵠᐃᐃ);
			Δ.translate(10 * Ⲇ, 0 * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(123 * Ⲇ, Ⲇ * 16);
			Δ.bezierCurveTo(Ⲇ * 103, Ⲇ * 16.5, Ⲇ * 103, Ⲇ * 16.5, 83 * Ⲇ, Ⲇ * ᐃᐃⵠⲆΔⲆᐃ);
			Δ.bezierCurveTo(Ⲇ * 83.5, 61 * Ⲇ, Ⲇ * 83.5, Ⲇ * 61, 84 * Ⲇ, Ⲇ * 105);
			Δ.bezierCurveTo(106 * Ⲇ, Ⲇ * 105, 106 * Ⲇ, Ⲇ * 105, 128 * Ⲇ, 105 * Ⲇ);
			ⵠᐃ(Δ, ΔⲆⲆⲆᐃ, Δⵠ[ⵠⲆⲆⲆ], ⵠⵠⲆᐃⲆᐃᐃ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 72, Ⲇ * 63);
			Δ.bezierCurveTo(Ⲇ * 88.5, 62.5 * Ⲇ, 88.5 * Ⲇ, 62.5 * Ⲇ, 105 * Ⲇ, Ⲇ * 62);
			ⵠᐃ(Δ, ΔⵠⲆⲆΔ, Δⵠ[5], Ⲇ * ⲆⵠΔΔᐃᐃⲆ);
			Δ.translate(Ⲇ * ⵠᐃⲆⵠᐃ, ΔΔⲆΔΔ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(Ⲇ * 141, Ⲇ * ᐃⵠΔⵠᐃ);
			Δ.bezierCurveTo(143 * Ⲇ, Ⲇ * 50, 143 * Ⲇ, 50 * Ⲇ, Ⲇ * 145, 92 * Ⲇ);
			Δ.bezierCurveTo(Ⲇ * 169, Ⲇ * 88.5, 169 * Ⲇ, Ⲇ * 88.5, Ⲇ * 193, Ⲇ * 85);
			ⵠᐃ(Δ, ΔⵠⲆⲆΔ, Δⵠ[5], Ⲇ * ⵠⵠⲆⵠⵠ);
			Δ.translate(ΔⵠΔᐃΔ * Ⲇ, -ⵠᐃⲆⵠᐃ * Ⲇ);
			Δ.beginPath();
			Δ.lineCap = ᐃ[250];
			Δ.lineJoin = ᐃ[250];
			Δ.moveTo(205 * Ⲇ, Ⲇ * 124);
			Δ.bezierCurveTo(205 * Ⲇ, Ⲇ * 69, Ⲇ * 205, Ⲇ * 69, Ⲇ * 205, Ⲇ * ᐃΔⲆΔⵠᐃⵠ);
			Δ.bezierCurveTo(Ⲇ * 239, 15 * Ⲇ, Ⲇ * 250, 37 * Ⲇ, Ⲇ * 249, 49 * Ⲇ);
			Δ.bezierCurveTo(251 * Ⲇ, 65 * Ⲇ, Ⲇ * 242, Ⲇ * 76, Ⲇ * 206, Ⲇ * 75);
			ⵠᐃ(Δ, Ⲇᐃᐃⵠᐃ, Δⵠ[ΔΔⵠⲆΔ], Ⲇ * ⵠⲆⵠᐃⵠΔⵠ)
		}
		return ᐃⵠ
	}

	function ΔΔᐃⵠⵠᐃⵠ(ᐃᐃⲆᐃⲆΔΔ, ⲆΔΔᐃΔᐃⵠ) {
		ΔΔⵠⵠⵠⵠΔ(ⵠᐃΔᐃⵠ, ᐃᐃⲆᐃⲆΔΔ, ⲆΔΔᐃΔᐃⵠ);
		const ⲆᐃⵠᐃᐃⲆⲆᐃⲆ = ⵠΔΔⵠⵠᐃⲆᐃⵠ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[ⲆⲆⲆᐃ], Δⵠⵠᐃ[0]);
		const ᐃᐃⲆⵠΔⵠᐃⵠⲆ = ⵠⲆⵠⵠⲆᐃⲆ(Δⵠⵠᐃ[1], Δⵠⵠᐃ[ⲆⲆᐃⲆ], Δⵠⵠᐃ[ⲆⲆⵠ], Δⵠⵠᐃ[ⲆⲆᐃ], Δⵠⵠᐃ[1]);
		const ⲆⲆⲆᐃΔⵠΔᐃⲆ = ((ⲆᐃⵠᐃᐃⲆⲆᐃⲆ ^ ᐃᐃⲆⵠΔⵠᐃⵠⲆ) + 65154) % 65528;
		return ⲆⲆⲆᐃΔⵠΔᐃⲆ
	}
	ⵠΔᐃⲆᐃ = [];
	ᐃⵠⵠⵠⲆᐃΔ = [];

	function ᐃⲆⵠⵠⵠᐃΔⵠΔ() {
		if (ⲆΔⵠ.ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ΔⲆΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) return;
		ⲆΔⵠ.ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃΔⲆΔᐃ;
		var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		var ᐃⲆⲆⲆ = ᐃΔᐃᐃ.ⲆⲆΔΔⲆⵠⲆ;
		if (!ᐃⵠⲆ) return;
		for (var ⲆⲆⲆⵠ = 0; ⲆⵠⲆᐃⵠΔΔ.length > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
			var ⲆⵠΔⵠ = ⲆⵠⲆᐃⵠΔΔ[ⲆⲆⲆⵠ][0];
			var ΔᐃⲆΔΔᐃⵠ = ⲆⵠⲆᐃⵠΔΔ[ⲆⲆⲆⵠ][1];
			for (var ᐃⲆ = 0; ᐃⲆ < ⵠⲆΔ.Ⲇᐃᐃ[ⲆⵠΔⵠ].length; ᐃⲆ++) {
				var ᐃⵠΔΔ = ⵠⲆΔ.Ⲇᐃᐃ[ⲆⵠΔⵠ][ᐃⲆ];
				var ⵠⵠⵠΔ = ΔⲆᐃ.ⲆⵠⲆⲆ(ᐃⵠΔΔ, ᐃⵠⲆ);
				ⵠⵠⵠΔ < ᐃⲆⲆⲆ && (ᐃⲆⲆⲆ = ⵠⵠⵠΔ, ⲆΔⵠ.ᐃⵠΔΔ.ΔᐃⲆΔΔᐃⵠ = ΔᐃⲆΔΔᐃⵠ, ⲆΔⵠ.ᐃⵠΔΔ.type = ⲆⵠΔⵠ, ⲆΔⵠ.ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = true, ⲆΔⵠ.ᐃⵠΔΔ.ΔⲆΔᐃᐃⵠⵠ = ᐃⵠΔΔ.info & 255, ⲆΔⵠ.ᐃⵠΔΔ.ⵠⵠⲆⲆⵠⲆΔ = (ᐃⵠΔΔ.info & 65280) >> ⵠᐃᐃᐃᐃ, ⲆΔⵠ.ᐃⵠΔΔ.ⲆⲆΔᐃ = ᐃⵠΔΔ.ⲆⲆΔᐃ, ⲆΔⵠ.ᐃⵠΔΔ.ΔⲆⵠⲆⲆ = ᐃⵠΔΔ.id)
			}
		}
		if (ᐃⲆⲆⲆ < ᐃΔᐃᐃ.ⲆⲆΔΔⲆⵠⲆ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃⵠΔᐃΔⲆ];
			var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ᐃᐃᐃⵠᐃΔⲆ;
			var Ⲇᐃ = ΔⵠᐃⲆ.info.translate.x - 33;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, 0);
			if (0 < ⲆΔⵠ.ᐃⵠΔΔ.ΔⲆΔᐃᐃⵠⵠ) {
				ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ);
				var ᐃᐃⲆⲆ = ⲆΔⵠ.ᐃⵠΔΔ.ΔⲆΔᐃᐃⵠⵠ;
				ΔΔΔᐃ < ᐃᐃⲆⲆ && ⲆⲆᐃⵠⲆ(ᐃᐃⲆⲆ, ΔⵠᐃⲆ)
			}
			switch (ⲆΔⵠ.ᐃⵠΔΔ.ΔᐃⲆΔΔᐃⵠ) {
				case ΔⲆ.ⵠΔⵠΔ:
					var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ᐃᐃᐃᐃⵠᐃⲆ;
					break;
				case ΔⲆ.ⵠᐃΔⲆ:
					var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ⵠⲆⲆΔⵠᐃⵠ;
					break;
				case ΔⲆ.ⲆΔⵠᐃ:
					var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ⵠⵠⵠⲆᐃΔⲆ;
					break;
				case ΔⲆ.ⲆⵠΔⲆ:
					var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ⲆΔⲆΔⲆΔΔ;
					break;
				case ΔⲆ.ᐃⲆⵠΔ:
					var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ⵠⵠⲆᐃΔⵠⲆ;
					break
			}
			if (ⲆΔⵠ.ᐃⵠΔΔ.ⵠⵠⲆⲆⵠⲆΔ > ΔᐃⲆⲆ) {
				ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ);
				var ᐃᐃⲆⲆ = ⲆΔⵠ.ᐃⵠΔΔ.ⵠⵠⲆⲆⵠⲆΔ;
				if (ᐃᐃⲆⲆ > 1) ⲆⲆᐃⵠⲆ(ᐃᐃⲆⲆ, ΔⵠᐃⲆ)
			}
		}
	}

	function ᐃⲆⲆⲆⲆⵠⵠΔⲆ() {
		ⲆΔⵠ.ⲆᐃⲆΔ.id = -1;
		ⲆΔⵠ.ⲆᐃⲆΔ.lock = ⲆᐃΔᐃⵠ;
		ⲆΔⵠ.ⲆᐃⲆΔ.locked = false;
		ⲆΔⵠ.ⲆᐃⲆΔ.ⲆⵠⲆⲆⵠΔᐃ = false;
		ⲆΔⵠ.ⲆᐃⲆΔ.ᐃΔΔⵠⲆᐃᐃ = ⵠⲆᐃⵠⵠ;
		ⲆΔⵠ.ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false;
		var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		var ᐃⲆⲆⲆ = ᐃΔᐃᐃ.ΔᐃᐃⵠⵠΔⵠ;
		if (!ᐃⵠⲆ) return;
		for (var ᐃⲆ = ⵠΔⵠᐃ; ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⵠΔⵠ].length > ᐃⲆ; ᐃⲆ++) {
			var ⲆᐃⲆΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⵠΔⵠ][ᐃⲆ];
			var ⵠⵠⵠΔ = ΔⲆᐃ.ⲆⵠⲆⲆ(ⲆᐃⲆΔ, ᐃⵠⲆ);
			if (ᐃⲆⲆⲆ > ⵠⵠⵠΔ) {
				ᐃⲆⲆⲆ = ⵠⵠⵠΔ;
				ⲆΔⵠ.ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃᐃⲆᐃⵠ;
				ⲆΔⵠ.ⲆᐃⲆΔ.id = ⲆᐃⲆΔ.action < ⲆᐃᐃⲆ ? -1 : Math.floor((ⲆᐃⲆΔ.action - 1) / 2);
				ⲆΔⵠ.ⲆᐃⲆΔ.ᐃⲆᐃⵠ = ⲆᐃⲆΔ.info;
				ⲆΔⵠ.ⲆᐃⲆΔ.ⲆⲆΔᐃ = ⲆᐃⲆΔ.ⲆⲆΔᐃ;
				ⲆΔⵠ.ⲆᐃⲆΔ.ΔⲆⵠⲆⲆ = ⲆᐃⲆΔ.id;
				ⲆΔⵠ.ⲆᐃⲆΔ.locked = ⲆᐃⲆΔ.lock;
				ⲆΔⵠ.ⲆᐃⲆΔ.lock = ⲆᐃⲆΔ.lock && ⲆᐃⲆΔ.ⲆⲆΔᐃ != ⲆΔⵠ.id && !ⲆΔⵠ.ΔⲆᐃⵠᐃⵠⵠ(ⲆᐃⲆΔ.ⲆⲆΔᐃ) ? true : ΔⲆⲆᐃΔ;
				ⲆΔⵠ.ⲆᐃⲆΔ.ᐃΔΔⵠⲆᐃᐃ = ⲆΔⵠ.id === ⲆᐃⲆΔ.ⲆⲆΔᐃ && !ⲆΔⵠ.ⲆᐃⲆΔ.locked && ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ⲆΔᐃⵠⵠ) != -ΔΔΔᐃ ? ΔⲆΔⵠⲆ : ᐃᐃⲆᐃΔ;
				if (ⲆΔⵠ.ⲆᐃⲆΔ.locked && ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ᐃⵠᐃΔΔ) != -1) ⲆΔⵠ.ⲆᐃⲆΔ.ⲆⵠⲆⲆⵠΔᐃ = true
			}
		}
		if (ᐃΔᐃᐃ.ΔᐃᐃⵠⵠΔⵠ > ᐃⲆⲆⲆ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠⲆⲆⵠⵠᐃ];
			var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ⵠⲆᐃ[0];
			var Ⲇᐃ = Math.floor(ΔⵠᐃⲆ.info.translate.x + (ΔⵠᐃⲆ.info.ⵠⵠ[0].width - ⵠⵠ.width) / ⵠⵠᐃⲆ);
			var ⲆⲆⲆ = Math.floor(ΔⵠᐃⲆ.info.translate.y + (ΔⵠᐃⲆ.info.ⵠⵠ[ᐃⲆᐃ].height - ⵠⵠ.height) / 2) + 3;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ);
			if (!ⲆΔⵠ.ⲆᐃⲆΔ.lock || ⲆΔⵠ.id === ⲆΔⵠ.ⲆᐃⲆΔ.ⲆⲆΔᐃ) {
				if (0 <= ⲆΔⵠ.ⲆᐃⲆΔ.id) {
					var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ⵠⲆᐃ[ⲆΔⵠ.ⲆᐃⲆΔ.id];
					ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ);
					var ᐃᐃⲆⲆ = ⲆΔⵠ.ⲆᐃⲆΔ.ᐃⲆᐃⵠ;
					if (1 < ᐃᐃⲆⲆ) ⲆⲆᐃⵠⲆ(ᐃᐃⲆⲆ, ΔⵠᐃⲆ)
				}
			}
			if (!ⲆΔⵠ.ⲆᐃⲆΔ.lock) {
				ⲆΔⵠ.ⲆᐃⲆΔ.ᐃΔΔⵠⲆᐃᐃ && ᐃⲆΔⵠ.ⵠⲆᐃⵠⵠⲆⵠ.ᐃⵠΔᐃ(Δ)
			} else ᐃⲆΔⵠ.ᐃΔᐃⲆᐃⵠⲆ.ᐃⵠΔᐃ(Δ);
			if (ⲆΔⵠ.ⲆᐃⲆΔ.ⲆⵠⲆⲆⵠΔᐃ) ᐃⲆΔⵠ.ᐃⵠΔⵠⲆΔᐃ.ᐃⵠΔᐃ(Δ)
		}
	}

	function ᐃᐃⵠⲆΔⲆΔᐃⲆ() {
		if (ⲆΔⵠ.ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ΔⲆΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ⲆΔᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) return;
		ⲆΔⵠ.sign[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ΔⲆⲆΔⵠ;
		var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		var ᐃⲆⲆⲆ = ᐃΔᐃᐃ.ᐃⵠᐃⲆⲆΔⲆ;
		if (!ᐃⵠⲆ) return;
		for (var ᐃⲆ = ᐃⲆᐃ; ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠΔΔ].length > ᐃⲆ; ᐃⲆ++) {
			var ⲆⲆⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠΔΔ][ᐃⲆ];
			var ⵠⵠⵠΔ = ΔⲆᐃ.ⲆⵠⲆⲆ(ⲆⲆⵠⲆ, ᐃⵠⲆ);
			ⵠⵠⵠΔ < ᐃⲆⲆⲆ && 0 === ⲆⲆⵠⲆ.info && ⲆΔⵠ.id === ⲆⲆⵠⲆ.ⲆⲆΔᐃ && (ⲆΔⵠ.sign[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃⵠⲆⵠᐃ, ᐃⲆⲆⲆ = ⵠⵠⵠΔ, ⲆΔⵠ.sign.ΔⲆⵠⲆⲆ = ⲆⲆⵠⲆ.id)
		}
		if (ᐃⲆⲆⲆ < ᐃΔᐃᐃ.ᐃⵠᐃⲆⲆΔⲆ) {
			var ΔⵠᐃⲆ = ᐃⲆΔⵠ.sign.button;
			ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ)
		}
	}

	function ⲆⵠⵠⲆⲆᐃΔᐃΔ() {
		var ᐃᐃΔⲆᐃ = ᐃⲆΔⵠ.ΔⲆⵠΔⵠ;
		var ᐃΔⲆᐃ = ᐃᐃΔⲆᐃ.id;
		if (ᐃΔⵠΔ === ᐃᐃΔⲆᐃ.ᐃⲆⲆⵠⲆ && ᐃΔⲆΔ === ᐃᐃΔⲆᐃ.display) {
			if (undefined === ⵠΔᐃⲆᐃ[ᐃΔⲆᐃ]) ⵠΔᐃⲆᐃ[ᐃΔⲆᐃ] = ᐃᐃⵠΔⲆⲆΔᐃΔ(ᐃΔⲆᐃ);
			if (ᐃᐃΔⲆᐃ.ⵠΔᐃΔ === ᐃⵠⵠⵠ) ⵠΔⲆⲆ(Δ, ⵠΔᐃⲆᐃ[ᐃΔⲆᐃ], ᐃᐃΔⲆᐃ.x, ᐃᐃΔⲆᐃ.y);
			else {
				if (ᐃᐃΔⲆᐃ.x - 80 + ⵠΔᐃⲆᐃ[ᐃΔⲆᐃ].width > ⲆΔⵠΔ) ⵠΔⲆⲆ(Δ, ⵠΔᐃⲆᐃ[ᐃΔⲆᐃ], ⲆΔⵠΔ - ⵠΔᐃⲆᐃ[ᐃΔⲆᐃ].width - 10, ᐃᐃΔⲆᐃ.y - ⵠΔᐃⲆᐃ[ᐃΔⲆᐃ].height - 10);
				else ⵠΔⲆⲆ(Δ, ⵠΔᐃⲆᐃ[ᐃΔⲆᐃ], ᐃᐃΔⲆᐃ.x - 80, ᐃᐃΔⲆᐃ.y - ⵠΔᐃⲆᐃ[ᐃΔⲆᐃ].height - 10)
			}
		}
	}

	function ⵠΔⲆⲆ(Δ, ⵠⵠ, ΔᐃⲆΔ, ⵠⵠᐃΔ, Ⲇᐃᐃᐃ, ΔᐃⲆⵠ, ⲆΔΔ, ΔΔⲆⵠⵠΔⲆ, ΔⵠⲆ, ᐃⲆ) {
		if (ΔⲆⲆⲆᐃ === ⵠⵠ.ⲆΔΔΔⵠⲆⵠ || ΔΔΔᐃ === ⵠⵠ.ⲆΔΔΔⵠⲆⵠ()) {
			if (Settings.Xray.enabled) arguments[0].globalAlpha = Settings.XrayOpacity;
			if (ΔⵠᐃΔᐃ !== ᐃⲆ) Δ.drawImage(ⵠⵠ, ΔᐃⲆΔ, ⵠⵠᐃΔ, Math.max(Δⵠᐃ, Ⲇᐃᐃᐃ), Math.max(ⵠᐃᐃ, ΔᐃⲆⵠ), ⲆΔΔ, ΔΔⲆⵠⵠΔⲆ, ΔⵠⲆ, ᐃⲆ);
			else if (ΔᐃⲆⵠ !== ΔⲆⲆⲆᐃ) Δ.drawImage(ⵠⵠ, ΔᐃⲆΔ, ⵠⵠᐃΔ, Ⲇᐃᐃᐃ, ΔᐃⲆⵠ);
			else Δ.drawImage(ⵠⵠ, ΔᐃⲆΔ, ⵠⵠᐃΔ)
		}
	}
	window.ctxDrawImage = ⵠΔⲆⲆ;

	function ᐃᐃᐃᐃⲆΔΔᐃᐃ() {
		if (ⲆΔⵠ.reconnect.enabled) {
			Δ.globalAlpha = .9;
			Δ.fillStyle = ᐃ[76];
			ᐃΔⵠ(Δ, ⲆⵠᐃΔ - 150, Δⵠᐃᐃ - 90, 300, 180, 15);
			Δ.fill();
			Δ.globalAlpha = 1;
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃⵠᐃⵠᐃΔ];
			Δ.save();
			ⲆΔⵠ.reconnect.rotate = (ⲆΔⵠ.reconnect.rotate + 2 * ᐃⵠᐃⵠ) % (Math.PI * ΔⲆⵠΔ);
			Δ.translate(ⲆΔⵠΔ / 2, ΔⲆⲆΔ / ⵠⲆΔᐃ - 25);
			Δ.rotate(ⲆΔⵠ.reconnect.rotate);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ⲆᐃᐃⲆ);
			Δ.restore();
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠᐃⵠΔᐃⵠ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, (ⲆΔⵠΔ - ⵠⵠ.width) / ᐃᐃΔⵠ, (ΔⲆⲆΔ - ⵠⵠ.height) / ⵠⲆΔᐃ + 25)
		}
	}

	function ⵠΔᐃⲆⵠⵠⲆᐃΔ() {
		ⲆΔⵠ.ⵠᐃΔⵠⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false;
		var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		var ᐃⲆⲆⲆ = ᐃΔᐃᐃ.ΔⲆΔᐃΔⵠΔ;
		if (!ᐃⵠⲆ) return;
		for (var ᐃⲆ = ⵠⵠⲆΔ; ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠᐃΔΔ].length > ᐃⲆ; ᐃⲆ++) {
			var ⵠᐃΔⵠⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠᐃΔΔ][ᐃⲆ];
			var ⵠⵠⵠΔ = ΔⲆᐃ.ⲆⵠⲆⲆ(ⵠᐃΔⵠⵠ, ᐃⵠⲆ);
			if (ᐃⲆⲆⲆ > ⵠⵠⵠΔ) {
				ᐃⲆⲆⲆ = ⵠⵠⵠΔ;
				ⲆΔⵠ.ⵠᐃΔⵠⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = true;
				ⲆΔⵠ.ⵠᐃΔⵠⵠ.ⲆⲆΔᐃ = ⵠᐃΔⵠⵠ.ⲆⲆΔᐃ;
				ⲆΔⵠ.ⵠᐃΔⵠⵠ.ΔⲆⵠⲆⲆ = ⵠᐃΔⵠⵠ.id
			}
		}
		ᐃΔᐃᐃ.ΔⲆΔᐃΔⵠΔ > ᐃⲆⲆⲆ && ᐃⲆΔⵠ.ⵠᐃΔⵠⵠ.ᐃⵠΔᐃ(Δ)
	}

	function ⲆΔⲆΔᐃΔᐃⲆᐃ() {
		if (ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length > ⵠᐃΔ) var ᐃΔᐃΔΔ = {
			x: ᐃⲆΔⵠ.ᐃΔᐃΔΔ.translate.x,
			y: ᐃⲆΔⵠ.ᐃΔᐃΔΔ.translate.y - 120 * Ⲇ
		};
		else var ᐃΔᐃΔΔ = {
			x: ᐃⲆΔⵠ.ᐃΔᐃΔΔ.translate.x,
			y: ᐃⲆΔⵠ.ᐃΔᐃΔΔ.translate.y - 50 * Ⲇ
		};
		Δ.globalAlpha = .8;
		var ⵠⵠ = ᐃᐃ[ⵠ.ᐃⲆⲆΔᐃᐃⲆ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, ᐃΔᐃΔΔ.x, ᐃΔᐃΔΔ.y);
		Δ.globalAlpha = ΔᐃⵠⲆ;
		if (ᐃⲆΔⵠ.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.x > -ⲆⲆΔⵠ) {
			Δ.fillStyle = ᐃ[188];
			ⵠΔᐃ(Δ, ᐃΔᐃΔΔ.x + ᐃⲆΔⵠ.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.x * Ⲇ, ᐃΔᐃΔΔ.y + Ⲇ * ᐃⲆΔⵠ.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.y, Ⲇ * 5);
			Δ.fill()
		}
		var ΔⲆᐃΔΔⵠᐃ = Ⲇ;
		var ΔΔᐃΔ = ᐃⲆΔⵠ.ᐃΔᐃΔΔ.ΔΔᐃΔ;
		for (var ᐃⲆ = 0; ᐃⲆ < ΔΔᐃΔ.length; ᐃⲆ++) {
			var ᐃⵠⲆ = ΔΔᐃΔ[ᐃⲆ];
			Δ.fillStyle = !ⵠⲆΔ.time ? ᐃ[413] : ᐃ[413];
			ⵠΔᐃ(Δ, ᐃΔᐃΔΔ.x + Ⲇ * (ᐃⵠⲆ.x / (ⵠⲆΔ.ᐃᐃΔⵠᐃ * ⵠᐃⵠⲆᐃᐃΔ) * 193), ᐃΔᐃΔΔ.y + Ⲇ * (ᐃⵠⲆ.y / (ΔᐃΔⲆᐃ * ⵠⲆΔ.ΔΔΔⲆⲆ) * 193), Ⲇ * ᐃᐃⵠⵠ);
			Δ.fill()
		}
		var ΔⲆⵠᐃ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		ΔⲆⵠᐃ && (Δ.fillStyle = !ⵠⲆΔ.time ? "#e39716" : ᐃ[81], ⵠΔᐃ(Δ, ᐃΔᐃΔΔ.x + 193 * (ΔⲆⵠᐃ.x / (100 * ⵠⲆΔ.ᐃᐃΔⵠᐃ)) * Ⲇ, ᐃΔᐃΔΔ.y + Ⲇ * (193 * (ΔⲆⵠᐃ.y / (ⵠⲆΔ.ΔΔΔⲆⲆ * Δⵠᐃⵠᐃ))), ᐃᐃᐃᐃΔ * Ⲇ), Δ.fill());
		Ⲇ = ΔⲆᐃΔΔⵠᐃ
	}

	function ⵠᐃⲆΔᐃⲆⲆⵠⵠ() {
		if (ⲆΔⵠ.ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ΔⲆΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) return;
		ⲆΔⵠ.ⲆΔᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false;
		var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		var ᐃⲆⲆⲆ = ᐃΔᐃᐃ.ΔⵠΔΔᐃⵠⵠ;
		if (!ᐃⵠⲆ) return;
		for (var ᐃⲆ = ⲆⲆᐃⲆ; ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⲆⲆⵠ].length > ᐃⲆ; ᐃⲆ++) {
			var ⲆΔᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⲆⲆⵠ][ᐃⲆ];
			var ⵠⵠⵠΔ = ΔⲆᐃ.ⲆⵠⲆⲆ(ⲆΔᐃⲆ, ᐃⵠⲆ);
			if (ᐃⲆⲆⲆ > ⵠⵠⵠΔ) {
				ᐃⲆⲆⲆ = ⵠⵠⵠΔ;
				ⲆΔⵠ.ⲆΔᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ΔΔᐃᐃⵠⵠⲆ;
				ⲆΔⵠ.ⲆΔᐃⲆ.ΔⲆΔᐃᐃⵠⵠ = ⲆΔᐃⲆ.info & 31;
				ⲆΔⵠ.ⲆΔᐃⲆ.ΔⲆⵠΔΔ = (ⲆΔᐃⲆ.info & 992) >> 5;
				ⲆΔⵠ.ⲆΔᐃⲆ.ⲆᐃⵠΔⵠΔⲆ = (ⲆΔᐃⲆ.info & 31744) >> 10;
				ⲆΔⵠ.ⲆΔᐃⲆ.ⲆⲆΔᐃ = ⲆΔᐃⲆ.ⲆⲆΔᐃ;
				ⲆΔⵠ.ⲆΔᐃⲆ.ΔⲆⵠⲆⲆ = ⲆΔᐃⲆ.id
			}
		}
		if (ᐃⲆⲆⲆ < ᐃΔᐃᐃ.ΔⵠΔΔᐃⵠⵠ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃᐃⲆⵠΔΔ];
			var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ⵠⵠⵠⲆᐃΔᐃ;
			var Ⲇᐃ = ΔⵠᐃⲆ.info.translate.x - 32;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆᐃΔⵠ);
			if (ⲆΔⵠ.ⲆΔᐃⲆ.ΔⲆΔᐃᐃⵠⵠ > ⵠᐃⲆⵠ) {
				ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ);
				var ᐃᐃⲆⲆ = ⲆΔⵠ.ⲆΔᐃⲆ.ΔⲆΔᐃᐃⵠⵠ;
				if (ᐃᐃⲆⲆ > 1) ⲆⲆᐃⵠⲆ(ᐃᐃⲆⲆ, ΔⵠᐃⲆ)
			}
			var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ⵠⲆⲆᐃⲆⵠᐃ;
			if (ⲆΔⵠ.ⲆΔᐃⲆ.ⲆᐃⵠΔⵠΔⲆ > ⲆⲆᐃ) {
				ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ);
				var ᐃᐃⲆⲆ = ⲆΔⵠ.ⲆΔᐃⲆ.ⲆᐃⵠΔⵠΔⲆ;
				if (1 < ᐃᐃⲆⲆ) ⲆⲆᐃⵠⲆ(ᐃᐃⲆⲆ, ΔⵠᐃⲆ)
			}
			var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ⵠΔᐃᐃⲆⲆⲆ;
			if (0 < ⲆΔⵠ.ⲆΔᐃⲆ.ΔⲆⵠΔΔ) {
				ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ);
				var ᐃᐃⲆⲆ = ⲆΔⵠ.ⲆΔᐃⲆ.ΔⲆⵠΔΔ;
				if (ᐃᐃⲆⲆ > 1) ⲆⲆᐃⵠⲆ(ᐃᐃⲆⲆ, ΔⵠᐃⲆ)
			}
		}
	}

	function ⵠΔᐃᐃΔΔⵠΔᐃ() {
		if (ⲆΔⵠ.ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) return;
		ⲆΔⵠ.ΔⲆΔⲆᐃ.ᐃⲆᐃⵠ = 0;
		ⲆΔⵠ.ΔⲆΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false;
		var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		var ᐃⲆⲆⲆ = ᐃΔᐃᐃ.ΔⲆᐃᐃΔⲆⲆ;
		if (!ᐃⵠⲆ) return;
		for (var ᐃⲆ = ⵠᐃⲆⵠ; ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⵠ].length > ᐃⲆ; ᐃⲆ++) {
			var ΔⲆΔⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⵠ][ᐃⲆ];
			var ⵠⵠⵠΔ = ΔⲆᐃ.ⲆⵠⲆⲆ(ΔⲆΔⲆᐃ, ᐃⵠⲆ);
			ⵠⵠⵠΔ < ᐃⲆⲆⲆ && (ᐃⲆⲆⲆ = ⵠⵠⵠΔ, ⲆΔⵠ.ΔⲆΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = true, ⲆΔⵠ.ΔⲆΔⲆᐃ.ᐃⲆᐃⵠ = ΔⲆΔⲆᐃ.info, ⲆΔⵠ.ΔⲆΔⲆᐃ.ⲆⲆΔᐃ = ΔⲆΔⲆᐃ.ⲆⲆΔᐃ, ⲆΔⵠ.ΔⲆΔⲆᐃ.ΔⲆⵠⲆⲆ = ΔⲆΔⲆᐃ.id)
		}
		if (ᐃΔᐃᐃ.ΔⲆᐃᐃΔⲆⲆ > ᐃⲆⲆⲆ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆⲆⲆⲆⲆⲆ];
			var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ᐃΔΔᐃⲆⲆⵠ;
			var Ⲇᐃ = Math.floor(ΔⵠᐃⲆ.info.translate.x + (ΔⵠᐃⲆ.info.ⵠⵠ[0].width - ⵠⵠ.width) / 2);
			var ⲆⲆⲆ = Math.floor(ΔⵠᐃⲆ.info.translate.y + (ΔⵠᐃⲆ.info.ⵠⵠ[0].height - ⵠⵠ.height) / ΔⵠⲆⲆ) + ⵠⵠⲆᐃ;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ);
			if (Ⲇⵠⵠᐃ < ⲆΔⵠ.ΔⲆΔⲆᐃ.ᐃⲆᐃⵠ) {
				ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ);
				var ᐃᐃⲆⲆ = ⲆΔⵠ.ΔⲆΔⲆᐃ.ᐃⲆᐃⵠ;
				ᐃᐃⲆⲆ > ⲆⲆⵠ && ⲆⲆᐃⵠⲆ(ᐃᐃⲆⲆ, ΔⵠᐃⲆ)
			}
		}
	}

	function ⲆᐃⲆⲆΔΔΔ() {
		ⲆΔⵠ.ⲆⲆᐃⵠΔ.id = -1;
		ⲆΔⵠ.ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ = -ⲆⲆΔⵠ;
		if (ⲆΔⵠ.ΔᐃⲆΔᐃⲆᐃ || ⲆΔⵠ.ⲆⲆᐃⵠΔ.wait || ⲆΔⵠ.ΔⵠⵠⵠΔ) return;
		var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		var ᐃⲆⲆⲆ = ᐃΔᐃᐃ.ᐃⲆⵠΔⵠⵠΔⲆⲆ;
		if (ᐃⵠⲆ) {
			for (var ᐃⲆ = ⵠᐃⵠ; ᐃⲆ < ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⲆⲆΔ].length; ᐃⲆ++) {
				var ⲆⲆᐃⵠΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⲆⲆΔ][ᐃⲆ];
				var ⵠⵠⵠΔ = ΔⲆᐃ.ⲆⵠⲆⲆ(ⲆⲆᐃⵠΔ, ᐃⵠⲆ);
				ⵠⵠⵠΔ < ᐃⲆⲆⲆ && (ᐃⲆⲆⲆ = ⵠⵠⵠΔ, ⲆΔⵠ.ⲆⲆᐃⵠΔ.id = ⲆⲆᐃⵠΔ.id, ⲆΔⵠ.ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ = ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ, ⲆΔⵠ.ⲆⲆᐃⵠΔ.info = ⲆⲆᐃⵠΔ.info, ⲆΔⵠ.ⲆⲆᐃⵠΔ.lock = (ⲆⲆᐃⵠΔ.info & 16) >> ᐃᐃⵠΔ)
			}
		}
		var ΔΔᐃⵠⲆⲆᐃΔΔ = ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ;
		ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ = -1;
		if (ⲆΔⵠ.ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ != -ⲆⵠⲆ && (ⲆΔⵠ.ΔⲆᐃⲆⲆ.length == Ⲇⵠⵠᐃ || ⲆΔⵠ.ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ == ⲆΔⵠ.id)) {
			if (0 == ⲆΔⵠ.ΔⲆᐃⲆⲆ.length && ⵠⲆⲆᐃᐃ <= ⲆΔⵠ.ⲆⲆᐃⵠΔ.info) ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ = ᐃᐃᐃᐃⵠ.ᐃⲆᐃⲆⵠⲆⲆ;
			else if (0 == ⲆΔⵠ.ΔⲆᐃⲆⲆ.length) ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ = ᐃᐃᐃᐃⵠ.ΔᐃⲆⵠⵠⵠΔ;
			else ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ = ᐃᐃᐃᐃⵠ.ⲆⲆΔΔⲆᐃⲆ
		} else if (ⲆΔⵠ.ΔⲆᐃⲆⲆ.length != 0 && ⲆΔⵠ.ΔⲆᐃⲆⲆ[0] != ⲆΔⵠ.id) ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ = ᐃᐃᐃᐃⵠ.ᐃⵠᐃⲆΔⵠᐃ;
		else if (ⲆΔⵠ.ΔⲆᐃⲆⲆ.length != ᐃⲆΔᐃ && ⲆΔⵠ.id == ⲆΔⵠ.ΔⲆᐃⲆⲆ[ⵠⵠΔΔ]) ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ = ᐃᐃᐃᐃⵠ.ᐃⵠᐃᐃΔᐃΔ;
		else ⲆΔⵠ.ΔⲆᐃⲆⲆ.length != ᐃⲆΔᐃ && (ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ = ᐃᐃᐃᐃⵠ.ΔᐃⲆⵠⵠⵠΔ);
		if (ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ != -1) ᐃⲆΔⵠ.ΔᐃᐃⵠΔ[ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ].button.ᐃⵠΔᐃ(Δ);
		var Ⲇⵠᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[95]).style;
		if (-1 != ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ && ΔΔᐃⵠⲆⲆᐃΔΔ != ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ && Ⲇⵠᐃⵠ.display == ᐃ[376]) ᐃⲆΔⵠ.ΔᐃᐃⵠΔ[ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ].action()
	}

	function ⵠⵠᐃⲆⲆⵠΔᐃⵠ(ᐃᐃⲆⲆ, ΔⵠᐃⲆ, ᐃᐃⵠ) {
		var ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃᐃⵠⵠⲆⵠ][ᐃᐃⲆⲆ];
		var Ⲇᐃ = ΔⵠᐃⲆ.info.translate.x + Ⲇ * ΔΔⵠⲆΔ;
		var ⲆⲆⲆ = ΔⵠᐃⲆ.info.translate.y + Ⲇ * ⲆΔⲆᐃᐃ;
		(ΔⵠᐃⲆ.info.state == ᐃᐃⵠⲆ || ᐃᐃⵠ) && (ⲆⲆⲆ += Ⲇ * Δᐃᐃⵠ);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ)
	}

	function ΔᐃⲆΔᐃⵠⵠⵠΔ() {
		if (ⲆΔⵠ.ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ΔⲆΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ⲆΔᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) return;
		ⲆΔⵠ.ⵠⲆⵠᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ⵠⲆᐃⵠⵠ;
		var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		var ᐃⲆⲆⲆ = ᐃΔᐃᐃ.ⲆΔΔⲆᐃⲆⲆΔⵠ;
		if (!ᐃⵠⲆ) return;
		for (var ᐃⲆ = 0; ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃᐃᐃΔ].length > ᐃⲆ; ᐃⲆ++) {
			var ⵠⲆⵠᐃᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃᐃᐃΔ][ᐃⲆ];
			var ⵠⵠⵠΔ = ΔⲆᐃ.ⲆⵠⲆⲆ(ⵠⲆⵠᐃᐃ, ᐃⵠⲆ);
			if (ᐃⲆⲆⲆ > ⵠⵠⵠΔ) {
				ᐃⲆⲆⲆ = ⵠⵠⵠΔ;
				ⲆΔⵠ.ⵠⲆⵠᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = true;
				ⲆΔⵠ.ⵠⲆⵠᐃᐃ.ⲆⲆΔᐃ = ⵠⲆⵠᐃᐃ.ⲆⲆΔᐃ;
				ⲆΔⵠ.ⵠⲆⵠᐃᐃ.ΔⲆⵠⲆⲆ = ⵠⲆⵠᐃᐃ.id
			}
		}
	}

	function ⲆΔⲆΔᐃᐃⲆᐃᐃ() {
		if (!ⲆΔⵠ.ⲆΔⵠΔⲆᐃⲆ) return;
		Δ.globalAlpha = .5;
		Δ.fillStyle = ᐃ[76];
		Δ.fillRect(ⲆⲆᐃ, ⵠⵠΔΔ, ⲆΔⵠΔ, ΔⲆⲆΔ);
		Δ.globalAlpha = .8;
		var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠᐃᐃⵠⵠⲆ][ⵠⲆΔ.time];
		var Ⲇᐃ = ⲆⵠᐃΔ - ⵠⵠ.width / 2;
		var ⲆⲆⲆ = Δⵠᐃᐃ - ⵠⵠ.height / ᐃᐃΔⵠ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ);
		Δ.globalAlpha = 1;
		if (ᐃⲆΔⵠ.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.x > -1) {
			Δ.fillStyle = ᐃ[188];
			ⵠΔᐃ(Δ, Ⲇᐃ + Ⲇ * (3 * ᐃⲆΔⵠ.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.x), ⲆⲆⲆ + ᐃⲆΔⵠ.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.y * 3 * Ⲇ, 14 * Ⲇ);
			Δ.fill()
		}
		var ΔΔᐃΔ = ᐃⲆΔⵠ.ᐃΔᐃΔΔ.ΔΔᐃΔ;
		for (var ᐃⲆ = 0; ᐃⲆ < ΔΔᐃΔ.length; ᐃⲆ++) {
			var ᐃⵠⲆ = ΔΔᐃΔ[ᐃⲆ];
			Δ.fillStyle = !ⵠⲆΔ.time ? ᐃ[413] : ᐃ[413];
			ⵠΔᐃ(Δ, Ⲇᐃ + Ⲇ * (ᐃⵠⲆ.x / (ᐃΔⲆᐃⵠ * ⵠⲆΔ.ᐃᐃΔⵠᐃ) * 600), ⲆⲆⲆ + Ⲇ * (ᐃⵠⲆ.y / (ᐃΔⲆᐃⵠ * ⵠⲆΔ.ΔΔΔⲆⲆ) * 600), ⵠⲆⵠⲆⵠ * Ⲇ);
			Δ.fill()
		}
		var ΔⲆⵠᐃ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		ΔⲆⵠᐃ && (Δ.fillStyle = !ⵠⲆΔ.time ? "#e39716" : ᐃ[81], ⵠΔᐃ(Δ, Ⲇᐃ + Ⲇ * (600 * (ΔⲆⵠᐃ.x / (ⵠⵠΔΔᐃ * ⵠⲆΔ.ᐃᐃΔⵠᐃ))), ⲆⲆⲆ + Ⲇ * (600 * (ΔⲆⵠᐃ.y / (ⵠⲆΔ.ΔΔΔⲆⲆ * 100))), 12 * Ⲇ), Δ.fill())
	}

	function ⲆⲆᐃⵠⲆ(ᐃᐃⲆⲆ, ΔⵠᐃⲆ) {
		if (!ᐃᐃ[ⵠ.ⲆΔ][ᐃᐃⲆⲆ]) ᐃᐃ[ⵠ.ⲆΔ][ᐃᐃⲆⲆ] = ⲆⵠᐃⲆⲆ(Ⲇ, "x" + ᐃᐃⲆⲆ, 17, ᐃ[448]);
		var ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔ][ᐃᐃⲆⲆ];
		var Ⲇᐃ = ΔⵠᐃⲆ.info.translate.x + ΔⵠᐃⲆ.info.ⵠⵠ[Δⵠⵠ].width - ⵠⵠ.width - ᐃⲆⵠⵠᐃ * Ⲇ;
		var ⲆⲆⲆ = ΔⵠᐃⲆ.info.translate.y + ΔⵠᐃⲆ.info.ⵠⵠ[0].height - ⵠⵠ.height - 19 * Ⲇ;
		ᐃᐃⵠⲆ == ΔⵠᐃⲆ.info.state && (ⲆⲆⲆ += Ⲇ * 5);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ)
	}

	function ⵠⲆᐃΔⵠΔⵠⵠⵠ() {
		if (ⲆΔⵠ.ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ΔⲆΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) return;
		ⲆΔⵠ.ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false;
		var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		var ᐃⲆⲆⲆ = ᐃΔᐃᐃ.ΔᐃⲆΔⵠⲆⲆ;
		if (!ᐃⵠⲆ) return;
		for (var ᐃⲆ = 0; ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆΔⵠᐃ].length > ᐃⲆ; ᐃⲆ++) {
			var ΔΔⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆΔⵠᐃ][ᐃⲆ];
			var ⵠⵠⵠΔ = ΔⲆᐃ.ⲆⵠⲆⲆ(ΔΔⲆᐃ, ᐃⵠⲆ);
			ⵠⵠⵠΔ < ᐃⲆⲆⲆ && (ᐃⲆⲆⲆ = ⵠⵠⵠΔ, ⲆΔⵠ.ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃΔΔΔΔ, ⲆΔⵠ.ΔΔⲆᐃ.ΔᐃᐃⵠⵠΔⲆ = ΔΔⲆᐃ.info & 255, ⲆΔⵠ.ΔΔⲆᐃ.ΔⲆⵠΔΔ = (ΔΔⲆᐃ.info & 65280) >> ᐃΔᐃⵠⲆ, ⲆΔⵠ.ΔΔⲆᐃ.ⲆⲆΔᐃ = ΔΔⲆᐃ.ⲆⲆΔᐃ, ⲆΔⵠ.ΔΔⲆᐃ.ΔⲆⵠⲆⲆ = ΔΔⲆᐃ.id)
		}
		if (ᐃⲆⲆⲆ < ᐃΔᐃᐃ.ΔᐃⲆΔⵠⲆⲆ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠΔⵠⵠⲆᐃΔ];
			var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ⲆⵠΔᐃⵠⲆΔ;
			var Ⲇᐃ = ΔⵠᐃⲆ.info.translate.x - 33;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, 0);
			if (0 < ⲆΔⵠ.ΔΔⲆᐃ.ΔᐃᐃⵠⵠΔⲆ) {
				ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ);
				var ᐃᐃⲆⲆ = ⲆΔⵠ.ΔΔⲆᐃ.ΔᐃᐃⵠⵠΔⲆ;
				1 < ᐃᐃⲆⲆ && ⲆⲆᐃⵠⲆ(ᐃᐃⲆⲆ, ΔⵠᐃⲆ)
			}
			var ΔⵠᐃⲆ = ᐃⲆΔⵠ.ⲆΔᐃⲆΔⵠⵠ;
			if (ⲆΔⵠ.ΔΔⲆᐃ.ΔⲆⵠΔΔ > 0) {
				ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ);
				var ᐃᐃⲆⲆ = ⲆΔⵠ.ΔΔⲆᐃ.ΔⲆⵠΔΔ;
				if (1 < ᐃᐃⲆⲆ) ⲆⲆᐃⵠⲆ(ᐃᐃⲆⲆ, ΔⵠᐃⲆ)
			}
		}
	}
	var ΔⵠᐃⲆᐃᐃΔ = [];

	function ΔⵠΔΔᐃⵠⵠⲆᐃ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃᐃⵠⲆⵠΔ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ᐃᐃⵠⵠ, -ΔⵠⲆ / ⲆΔⲆΔ, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ᐃⵠᐃⲆⵠᐃᐃᐃⲆ() {
		var ⵠⵠᐃΔ = ⵠⲆΔ.ᐃᐃⵠΔⲆ;
		var ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃᐃⵠΔᐃΔ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, ⵠⵠᐃΔ.translate.x, ⵠⵠᐃΔ.translate.y);
		Δ.save();
		Δ.translate(ⵠⵠᐃΔ.translate.x + ⵠⵠ.width / 2, ⵠⵠᐃΔ.translate.y + ⵠⵠ.height / ⵠⲆΔᐃ);
		ⵠⲆΔ.ᐃᐃⵠΔⲆ.now = ((new Date).getTime() - ⵠⵠᐃΔ.ᐃⵠΔᐃᐃ + ⵠⵠᐃΔ.ΔΔΔⲆⵠ) % ᐃΔᐃᐃ.ⵠⲆⵠ;
		var ΔΔⲆ = ⵠⲆΔ.ᐃᐃⵠΔⲆ.now * (ⵠⵠΔⵠ * Math.PI) / ᐃΔᐃᐃ.ⵠⲆⵠ - Math.PI / 2;
		Δ.rotate(ΔΔⲆ);
		ⵠΔⲆⲆ(Δ, ᐃᐃ[ⵠ.ᐃⵠΔⲆⲆⲆΔ], -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
		Δ.restore()
	}

	function ⲆᐃⲆᐃⵠⲆᐃ(ΔΔ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ⵠⲆⵠⵠΔ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ && (this.ΔΔᐃ.ΔⵠΔ = ⵠᐃΔΔᐃ);
			var ⵠΔΔ = Ⲇ * (ᐃⵠᐃⵠ * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = ⲆⲆᐃⲆ;
			var ⲆⲆⲆ = ⲆⲆᐃⲆ
		}
		ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2 + Ⲇᐃ, -ΔⵠⲆ / ⵠΔΔΔ + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ΔⲆⵠⵠⵠΔⲆⲆⲆ() {
		Δ.save();
		var ΔⲆᐃΔΔⵠᐃ = Ⲇ;
		if (ⲆΔⵠ.ⵠΔⲆΔ.ⲆⲆᐃᐃΔ.x < .25) Δ.globalAlpha = ⲆΔⵠ.ⵠΔⲆΔ.ⲆⵠⵠΔΔⵠΔ.ⵠΔΔ;
		var ⲆⲆⲆ = ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length > 0 ? -70 : ⲆⲆΔ;
		if (ⲆΔⵠ.ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] || ⲆΔⵠ.ΔⲆΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ᐃᐃᐃⲆ) != -1 || ⲆΔⵠ.ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && -1 != ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ΔⵠⲆΔΔ) || ⲆΔⵠ.ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && -Δⵠᐃ != ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ᐃᐃᐃⲆ) || ⲆΔⵠ.ⵠⲆⵠᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ᐃⲆⲆΔⲆ) != -1 || ⲆΔⵠ.ⲆΔᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ᐃᐃᐃⲆ) != -1 || ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ⲆⵠⲆᐃᐃ) != -ᐃⲆⲆ)) ⲆⲆⲆ -= 50 * Ⲇ;
		Δ.translate((ⲆΔⵠΔ - Ⲇ * 950) / 2, ⲆⲆⲆ);
		Δ.fillStyle = "#69A148";
		Δ.fillRect(this.translate.x + 37 * Ⲇ, this.translate.y + Ⲇ * ⵠⲆΔΔⵠ, 178 * ⲆΔⵠ.ⵠΔⲆΔ.ⲆⲆᐃᐃΔ.x * Ⲇ, Ⲇ * ᐃⲆΔΔⲆ);
		Δ.globalAlpha = ⵠⵠⵠⲆ;
		.35 > ⲆΔⵠ.ⵠΔⲆΔ.ⲆⲆᐃⲆⵠΔⵠ.x && (Δ.fillStyle = "#8F050A", Δ.globalAlpha = ⲆΔⵠ.ⵠΔⲆΔ.ᐃⲆⲆᐃⲆⲆᐃ.ⵠΔΔ, Δ.fillRect(this.translate.x + 277 * Ⲇ, this.translate.y + Ⲇ * ⲆⵠⲆⲆΔΔΔ, 178 * Ⲇ, 18 * Ⲇ), Δ.globalAlpha = 1);
		const ctx = Δ;
		const scale = Ⲇ;
		if (Settings.ShowHP.enabled) {
			ctx.save();
			ctx.lineWidth = 7;
			ctx.font = "34px Baloo Paaji";
			ctx.fillStyle = "red";
			ctx.strokeStyle = "black";
			ctx.strokeText(Math.round(ⲆΔⵠ.ⵠΔⲆΔ.ⲆⲆᐃᐃΔ.x * 200) + "hp", this.translate.x -80 * scale, this.translate.y + 35  * scale);
			ctx.fillText(Math.round(ⲆΔⵠ.ⵠΔⲆΔ.ⲆⲆᐃᐃΔ.x * 200) + "hp", this.translate.x - 80 * scale, this.translate.y + 35 * scale);
			ctx.restore()
		}
		if (Settings.Timers.enabled) {
			ctx.save();
			ctx.lineWidth = 7;
			ctx.font = "34px Baloo Paaji";
			ctx.strokeStyle = "black";
			ctx.fillStyle = "red";
			ctx.strokeText(~~(11 - (Date.now() - Timers.HealTimer) / 1e3) + "s", this.translate.x + 216 * scale, this.translate.y + 35 * scale);
			ctx.fillText(~~(11 - (Date.now() - Timers.HealTimer) / 1e3) + "s", this.translate.x + 216 * scale, this.translate.y + 35 * scale);
			ctx.fillStyle = "red";
			ctx.strokeText(~~(6 - (Date.now() - Timers.GaugeTimer) / 1e3) + "s", this.translate.x + 460 * scale, this.translate.y + 35 * scale);
			ctx.fillText(~~(6 - (Date.now() - Timers.GaugeTimer) / 1e3) + "s", this.translate.x + 460 * scale, this.translate.y + 35 * scale);
			ctx.restore()
		}
		Δ.fillStyle = "#AF352A";
		Δ.fillRect(this.translate.x + Ⲇ * 277, this.translate.y + Ⲇ * ᐃⲆΔᐃΔ, Ⲇ * (178 * ⲆΔⵠ.ⵠΔⲆΔ.ⲆⲆᐃⲆⵠΔⵠ.x), ⲆⵠΔᐃⲆ * Ⲇ);
		ⲆΔⵠ.ⵠΔⲆΔ.ⵠⲆⲆᐃⵠ.x < .35 && (Δ.fillStyle = "#366B91", Δ.globalAlpha = ⲆΔⵠ.ⵠΔⲆΔ.ΔΔΔⲆⲆΔⵠ.ⵠΔΔ, Δ.fillRect(this.translate.x + Ⲇ * 517, this.translate.y + 17 * Ⲇ, Ⲇ * 178, Ⲇ * ᐃΔⲆⲆⵠⵠᐃ), Δ.globalAlpha = ᐃⲆⲆ);
		Δ.fillStyle = "#669BB1";
		Δ.fillRect(this.translate.x + Ⲇ * 517, this.translate.y + Ⲇ * ᐃⲆᐃⵠⲆΔΔ, ⲆΔⵠ.ⵠΔⲆΔ.ⵠⲆⲆᐃⵠ.x * 178 * Ⲇ, Ⲇ * ΔⲆᐃᐃᐃ);
		if (ⲆΔⵠ.ⵠΔⲆΔ.ⵠⲆⲆᐃⵠ.x > .99) {
			.35 > ⲆΔⵠ.ⵠΔⲆΔ.ⵠΔΔⵠᐃ.x && (Δ.fillStyle = "#6C4036", Δ.globalAlpha = ⲆΔⵠ.ⵠΔⲆΔ.ⲆⵠΔⵠⲆΔⲆ.ⵠΔΔ, Δ.fillRect(this.translate.x + Ⲇ * 517, this.translate.y + 17 * Ⲇ, Ⲇ * 178, Ⲇ * ⵠⲆΔⵠᐃᐃⲆ), Δ.globalAlpha = 1);
			Δ.fillStyle = "#9C4036";
			Δ.fillRect(this.translate.x + Ⲇ * 517, this.translate.y + Ⲇ * ᐃⲆΔᐃΔ, 178 * (ⲆⲆᐃⵠ - ⲆΔⵠ.ⵠΔⲆΔ.ⵠΔΔⵠᐃ.x) * Ⲇ, ᐃⲆΔΔⲆ * Ⲇ)
		}
		if (.35 > ⲆΔⵠ.ⵠΔⲆΔ.ⵠⲆᐃⲆⲆⵠᐃ.x) {
			Δ.fillStyle = "#001A57";
			Δ.globalAlpha = ⲆΔⵠ.ⵠΔⲆΔ.ΔᐃᐃⲆⵠⵠΔ.ⵠΔΔ;
			Δ.fillRect(this.translate.x + Ⲇ * 757, this.translate.y + Ⲇ * 17, 178 * Ⲇ, Ⲇ * 18);
			Δ.globalAlpha = ΔΔⵠ
		}
		Δ.fillStyle = "#074A87";
		Δ.fillRect(this.translate.x + Ⲇ * 757, this.translate.y + Ⲇ * 17, Ⲇ * (178 * ⲆΔⵠ.ⵠΔⲆΔ.ⵠⲆᐃⲆⲆⵠᐃ.x), Ⲇ * ᐃΔⵠⲆⲆⲆⲆ);
		Ⲇ = ΔⲆᐃΔΔⵠᐃ;
		ⵠΔⲆⲆ(Δ, this.ⵠⵠ, this.translate.x, this.translate.y);
		this.y = this.translate.y + ⲆⲆⲆ;
		Δ.restore();
		if (ⲆΔⵠ.ⵠΔⲆΔ.ⲆᐃⵠᐃⲆΔⲆ.x < .99) {
			var Ⲇᐃ = Math.floor(ⲆⵠᐃΔ - ᐃᐃ[ⵠ.ⲆⲆⲆⲆΔΔⵠ].width / ⵠΔⵠⲆ);
			ⲆⲆⲆ += this.translate.y - ᐃᐃ[ⵠ.ⲆⲆⲆⲆΔΔⵠ].height - Ⲇ * 5;
			Δ.fillStyle = "#BBE8EF";
			Δ.fillRect(Ⲇᐃ + ⲆᐃΔⲆⵠ, ⲆⲆⲆ + ᐃᐃⲆⵠᐃ * Ⲇ, ⲆΔⵠ.ⵠΔⲆΔ.ⲆᐃⵠᐃⲆΔⲆ.x * (Ⲇ * 588), Ⲇ * ⵠᐃⲆⲆΔ);
			ⲆΔⵠ.ⵠΔⲆΔ.ⲆᐃⵠᐃⲆΔⲆ.x < .35 && (Δ.fillStyle = "#9BA8AF", Δ.globalAlpha = ⲆΔⵠ.ⵠΔⲆΔ.ⲆⲆᐃⵠΔⲆⲆ.ⵠΔΔ, Δ.fillRect(Ⲇᐃ + ΔΔⵠⵠ, ⲆⲆⲆ + 5, 588 * Ⲇ, 10 * Ⲇ), Δ.globalAlpha = ᐃΔΔⲆ);
			ⵠΔⲆⲆ(Δ, ᐃᐃ[ⵠ.ⲆⲆⲆⲆΔΔⵠ], Ⲇᐃ, ⲆⲆⲆ);
			this.y = ⲆⲆⲆ
		}
	}

	function ⲆΔΔⲆⵠⵠΔ(ⲆⲆᐃᐃΔ) {
		var ⲆⲆᐃᐃΔ = ⲆⲆᐃᐃΔ / ⵠⵠⲆᐃⵠ;
		if (.8 < ⲆⲆᐃᐃΔ) return;
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == ⵠⲆᐃⵠⵠ && (this.ΔΔᐃ.ΔⵠΔ = false);
			var ⵠΔΔ = Ⲇ * (ᐃⵠᐃⵠ * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = 0
		}
		Δ.globalAlpha = .5;
		ᐃΔᐃΔⲆⵠⲆ(Δ, Ⲇᐃ, ⲆⲆⲆ, 18 * Ⲇ, ⲆⲆᐃᐃΔ);
		ⵠᐃ(Δ, null, ᐃ[352], Ⲇ * ⲆⵠⲆⵠⵠⵠⲆ);
		Δ.globalAlpha = ⲆⲆΔⵠ;
		ᐃΔᐃΔⲆⵠⲆ(Δ, Ⲇᐃ, ⲆⲆⲆ, Ⲇ * 18, ⲆⲆᐃᐃΔ);
		ⵠᐃ(Δ, null, ⵠ.ⲆΔⵠᐃⲆⲆⵠ[ⵠⲆΔ.time], ᐃⵠⵠᐃⵠ * Ⲇ);
		Δ.restore()
	}

	function ᐃᐃⵠⵠᐃ(ⲆⲆᐃᐃΔ) {
		var ⲆⲆᐃᐃΔ = ⲆⲆᐃᐃΔ / ⵠⵠⲆᐃⵠ;
		if (.95 < ⲆⲆᐃᐃΔ) return;
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == false && (this.ΔΔᐃ.ΔⵠΔ = Ⲇⵠⵠⵠᐃ);
			var ⵠΔΔ = Ⲇ * (600 * ((ⲆⲆⵠ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * ᐃⵠᐃⵠ));
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = ⲆⲆΔ;
			var ⲆⲆⲆ = 0
		}
		Δ.globalAlpha = .5;
		ᐃΔᐃΔⲆⵠⲆ(Δ, Ⲇᐃ, ⲆⲆⲆ, Ⲇ * 28, ⲆⲆᐃᐃΔ);
		ⵠᐃ(Δ, null, ᐃ[352], 18 * Ⲇ);
		Δ.globalAlpha = 1;
		ᐃΔᐃΔⲆⵠⲆ(Δ, Ⲇᐃ, ⲆⲆⲆ, 28 * Ⲇ, ⲆⲆᐃᐃΔ);
		ⵠᐃ(Δ, null, ⵠ.ⲆᐃᐃΔⲆⵠΔ[ⵠⲆΔ.time], Ⲇ * ⵠⲆⲆΔᐃ);
		Δ.restore()
	}

	function ⲆᐃⲆᐃⵠᐃΔΔΔ(ΔΔ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == false && (this.ΔΔᐃ.ΔⵠΔ = false);
			var ⵠΔΔ = ᐃⵠᐃⵠ * (ΔΔΔᐃ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * Ⲇ;
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = ⵠᐃⵠ;
			var ⲆⲆⲆ = ⵠⵠⲆΔ
		}
		this.ⵠᐃⵠⵠⵠ.ΔⵠΔ() && (this.color += .2 + .3 * Math.random());
		ⵠⵠ = ᐃᐃ[ⵠ.ΔΔᐃᐃⵠ][Math.floor(this.id + this.color) % ⲆⲆⲆᐃⵠ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠⵠⵠ.ⵠΔΔ;
		ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠⵠⵠ.ⵠΔΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2 + Ⲇᐃ, -ΔⵠⲆ / ⲆΔΔⲆ + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ⵠᐃᐃᐃᐃΔᐃⵠᐃ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃⵠᐃᐃ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ᐃⲆΔᐃⵠⲆΔⲆⵠ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆᐃᐃⵠⵠⵠ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ᐃⵠΔⲆ, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ⲆⵠᐃⲆⵠⲆⲆⲆᐃ() {
		var ⲆⲆⲆ = -ᐃΔᐃⵠⲆ;
		if (ⲆΔⵠ.ⵠⵠⵠⲆᐃ.enabled) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃⵠΔΔᐃΔⵠ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.x, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.y + ⲆⲆⲆ);
			ⲆⲆⲆ += 70
		}
		if (1 === ⲆΔⵠ.ⵠΔⲆΔΔΔᐃ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃᐃⵠΔᐃⵠᐃ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.x, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.y + ⲆⲆⲆ);
			ⲆⲆⲆ += 70
		} else if (.25 > ⲆΔⵠ.ⵠΔⲆΔ.ⵠⲆⲆᐃⵠ.x || ⲆΔⵠ.ⵠΔⲆΔ.ⲆⲆᐃⲆⵠΔⵠ.x < .25 || ⲆΔⵠ.ⵠΔⲆΔ.ⵠⲆᐃⲆⲆⵠᐃ.x < .25 || ⲆΔⵠ.ⵠΔⲆΔ.ⲆᐃⵠᐃⲆΔⲆ.x < .25 || .25 > ⲆΔⵠ.ⵠΔⲆΔ.ⵠΔΔⵠᐃ.x) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆΔⵠΔⵠⵠ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.x, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.y + ⲆⲆⲆ);
			ⲆⲆⲆ += 70
		}
		if (0 < ⲆΔⵠ.ⲆΔΔⲆΔ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆⲆΔⲆΔΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.x, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.y + ⲆⲆⲆ);
			var ⲆΔΔⲆΔ = ΔⵠᐃⲆᐃᐃΔ[ⲆΔⵠ.ⲆΔΔⲆΔ];
			if (ᐃⲆⲆΔᐃ === ⲆΔΔⲆΔ) {
				ⲆΔΔⲆΔ = ⲆⵠᐃⲆⲆ(Ⲇ, ⲆΔⵠ.ⲆΔΔⲆΔ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
				ΔⵠᐃⲆᐃᐃΔ[ⲆΔⵠ.ⲆΔΔⲆΔ] = ⲆΔΔⲆΔ
			}
			if (ᐃⵠⲆΔⵠΔⵠ > ⲆΔⵠ.ⲆΔΔⲆΔ) ⵠΔⲆⲆ(Δ, ⲆΔΔⲆΔ, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.x - 39, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.y + ⲆⲆⲆ + ⲆⵠᐃΔⲆ);
			else ⵠΔⲆⲆ(Δ, ⲆΔΔⲆΔ, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.x - 46, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.y + ⲆⲆⲆ + ⵠᐃᐃᐃᐃⵠᐃ);
			ⲆⲆⲆ += 70
		}
		if (Settings.WeatherInfo.enabled) {
			const ctx = Δ;
			if (ⲆΔⵠ.ⵠΔⲆⲆⵠ.ᐃᐃⵠΔᐃ) {
				ctx.save();
				ctx.drawImage(BlizzardImage, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.x, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.x + ⲆⲆⲆ);
				ctx.restore();
				ⲆⲆⲆ += 70
			}
			if (ⲆΔⵠ.ΔⲆΔᐃᐃ.ᐃᐃⵠΔᐃ) {
				ctx.save();
				ctx.drawImage(SandstormImage, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.x, ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.x + ⲆⲆⲆ);
				ctx.restore();
				ⲆⲆⲆ += 70
			}
		}
	}

	function ᐃΔⵠⲆⵠΔⲆᐃΔ() {
		var ⲆⲆᐃⵠΔ = ⲆΔⵠ.ⲆⲆᐃⵠΔ;
		if (ⲆⲆᐃⵠΔ.wait) {
			var ᐃᐃⵠⲆᐃ = ⲆⲆᐃⵠΔ.timeout.ΔⵠΔ();
			Δ.save();
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃᐃᐃⲆⵠΔᐃ];
			var ΔⵠᐃᐃΔ = ᐃᐃ[ⵠ.ΔΔⵠΔΔⵠⵠ].height + Ⲇ * 25;
			Δ.translate(ⵠⵠ.width, ᐃⲆΔⵠ.ⵠΔⲆΔ.translate.y - 188 * Ⲇ - ΔⵠᐃᐃΔ);
			var Ⲇᐃ = -ⵠⵠ.width / ᐃᐃΔⵠ - 2;
			var ⲆⲆⲆ = -ⵠⵠ.height / ⵠΔⵠⲆ - 4;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ + 2, ⲆⲆⲆ);
			Δ.beginPath();
			Δ.lineWidth = Ⲇ * ᐃᐃᐃⲆⲆ;
			Δ.strokeStyle = ⵠ.ᐃΔΔΔⲆΔΔ[ⵠⲆΔ.time];
			Δ.lineCap = ᐃ[250];
			Δ.arc(0, ⲆⲆⲆ + ⵠⵠ.height / ᐃᐃⲆⵠ, Ⲇ * 25, 0, 2 * Math.PI * ⲆⲆᐃⵠΔ.timeout.ⵠΔΔ);
			Δ.stroke();
			Δ.restore();
			if (ᐃᐃⵠⲆᐃ) {
				ⲆⲆᐃⵠΔ.wait = false;
				ⲆⲆᐃⵠΔ.timeout.ⵠΔΔ = 0;
				ⲆⲆᐃⵠΔ.timeout.ⵠΔⲆ = ᐃΔⵠΔᐃ
			}
		}
	}

	function ⵠᐃᐃⲆΔᐃΔΔᐃ(ΔΔ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == false && (this.ΔΔᐃ.ΔⵠΔ = false);
			var ⵠΔΔ = (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * ᐃⵠᐃⵠ * 600 * Ⲇ;
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = ⵠᐃⲆⵠ
		}
		var ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2 + Ⲇᐃ, -ΔⵠⲆ / ⵠⵠΔⵠ + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ⲆᐃⵠᐃᐃⵠΔΔⵠ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔⵠᐃᐃⵠᐃ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ᐃᐃⲆⵠ, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ᐃΔⵠΔᐃⵠⵠⵠⵠ() {
		var ΔΔᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ];
		if (ⵠⲆΔ.mode === ᐃΔᐃᐃ.ⵠΔᐃⵠΔ || ᐃΔᐃᐃ.ΔⲆⲆᐃⵠ === ⵠⲆΔ.mode || ⵠⲆΔ.mode === ᐃΔᐃᐃ.ᐃΔΔΔᐃ || ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ === ⵠⲆΔ.mode || ᐃΔᐃᐃ.ᐃⲆΔⲆⵠΔᐃ === ⵠⲆΔ.mode || ᐃΔᐃᐃ.ᐃΔⵠΔⲆ === ⵠⲆΔ.mode || ⵠⲆΔ.mode === ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ) {
			for (var ᐃⲆ = ⵠⵠᐃ; ΔΔᐃΔ.length > ᐃⲆ; ᐃⲆ++) {
				ΔΔᐃΔ[ᐃⲆ].ᐃΔⲆⵠⲆΔⲆ()
			}
		} else if (ᐃΔᐃᐃ.ⲆⵠⵠΔΔⲆⵠ === ⵠⲆΔ.mode) {
			for (var ᐃⲆ = ᐃⲆΔ; ΔΔᐃΔ.length > ᐃⲆ; ᐃⲆ++) {
				if (ⲆΔⵠ.ΔᐃⲆΔᐃⲆᐃ || ⲆΔⵠ.ⲆᐃⵠⵠΔ.enabled) ΔΔᐃΔ[ᐃⲆ].ᐃΔⲆⵠⲆΔⲆ();
				else ᐃ[520] !== ΔΔᐃΔ[ᐃⲆ].ᐃΔΔⵠ.ⵠⲆⵠΔⵠ && ΔΔᐃΔ[ᐃⲆ].ᐃΔⲆⵠⲆΔⲆ()
			}
		}
	}

	function ⵠᐃᐃΔᐃΔⵠᐃΔ(ΔΔ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ⲆⵠΔΔⵠ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) this.ΔΔᐃ.ΔⵠΔ = false;
			var ⵠΔΔ = Ⲇ * (600 * ((1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * ᐃⵠᐃⵠ));
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = ᐃⲆΔᐃ
		}
		var ᐃⲆΔⲆⲆ = ᐃᐃ[ⵠ.ᐃⵠΔᐃⵠ].length;
		ⵠⵠ = ᐃᐃ[ⵠ.ᐃⵠΔᐃⵠ][(this.ⲆⲆⲆⵠ + this.ᐃⲆ % ⵠⵠΔⵠ) % ᐃⲆΔⲆⲆ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height;
		var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		if (Settings.Roofs.enabled) {
			this.opacity = Settings.RoofsOpacity
		} else if (ᐃⵠⲆ && (this.ⲆⲆΔᐃ === ⲆΔⵠ.id || ⲆΔⵠ.ΔⲆᐃⵠᐃⵠⵠ(this.ⲆⲆΔᐃ))) {
			550 > ΔⲆᐃ.ⲆⵠⲆⲆ(this, ᐃⵠⲆ) ? this.opacity = Math.max(this.opacity - ᐃⵠᐃⵠ, .3) : this.opacity = Math.min(this.opacity + ᐃⵠᐃⵠ, ΔᐃⵠⲆ)
		} else if (ᐃⵠⲆ && ΔⲆᐃ.ⲆⵠⲆⲆ(this, ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ]) < 150) this.opacity = Math.max(this.opacity - ᐃⵠᐃⵠ, .3);
		else this.opacity = Math.min(this.opacity + ᐃⵠᐃⵠ, 1);
		var ⲆΔⵠⵠⲆᐃΔᐃⵠ = Δ.globalAlpha;
		Δ.globalAlpha *= this.opacity;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⵠⵠᐃⲆ + Ⲇᐃ, -ΔⵠⲆ / 2 + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
		Δ.globalAlpha = ⲆΔⵠⵠⲆᐃΔᐃⵠ;
		Δ.restore()
	}

	function ΔΔⲆΔⲆᐃⵠΔⵠ() {
		var ⵠΔᐃΔ = ⲆΔⵠ.ⵠΔᐃΔ;
		if (!ⵠΔᐃΔ.ᐃΔΔᐃᐃ && ⵠΔᐃΔ.ⵠⲆⵠⵠ > 0) {
			var ΔⲆⵠᐃ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
			if (!ΔⲆⵠᐃ) return;
			Δ.save();
			if (0 === ⵠⵠⲆⵠ[ⵠΔᐃΔ.ⵠⲆⵠⵠ].ⵠΔΔⵠ && 0 === ⵠΔᐃΔ.mode) {
				Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + ΔⲆⵠᐃ.x, ⲆΔⵠ.ⲆⵠΔ.y + ΔⲆⵠᐃ.y);
				Δ.rotate(ΔⲆⵠᐃ.angle);
				Δ.translate(120, 0)
			} else {
				var Ⲇᐃ = Math.floor(ΔⲆⵠᐃ.x + Math.sin(ΔⲆⵠᐃ.angle) * 120);
				var ⲆⲆⲆ = Math.floor(ΔⲆⵠᐃ.y + 120 * Math.cos(ΔⲆⵠᐃ.angle));
				Ⲇᐃ = ⲆΔⵠ.ⲆⵠΔ.x + (Ⲇᐃ - Ⲇᐃ % 100 + 50);
				ⲆⲆⲆ = ⲆΔⵠ.ⲆⵠΔ.y + (ⲆⲆⲆ - ⲆⲆⲆ % ΔΔⲆΔⵠⵠⵠ + 50);
				Δ.translate(Ⲇᐃ, ⲆⲆⲆ)
			}
			var ⵠⵠ = ᐃᐃ[ⵠΔᐃΔ.ⵠⲆⵠⵠ][ⵠⲆΔ.time];
			Δ.globalAlpha = .5;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ⲆΔΔⲆ, -ⵠⵠ.height / Ⲇᐃⵠⵠ);
			Δ.globalAlpha = ⲆⵠΔΔ;
			Δ.restore();
			if (ⵠΔⵠᐃ === ⵠⵠⲆⵠ[ⵠΔᐃΔ.ⵠⲆⵠⵠ].ⵠΔΔⵠ) {
				if (!ⵠΔᐃΔ.label[ⵠΔᐃΔ.mode]) {
					ⲆᐃΔⵠ === ⵠΔᐃΔ.mode ? ⵠΔᐃΔ.label[0] = ⲆⵠᐃⲆⲆ(Ⲇ, ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔⲆⵠᐃΔ], ΔᐃⲆⲆⲆΔⲆ, "#e2c340") : ⵠΔᐃΔ.label[ΔΔΔᐃ] = ⲆⵠᐃⲆⲆ(Ⲇ, ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠᐃⲆᐃ], 20, "#e2c340")
				}
				var ⵠⵠ = ⵠΔᐃΔ.label[ⵠΔᐃΔ.mode];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ + -ⵠⵠ.width / ΔⲆⵠΔ, ᐃⲆΔⵠ.ⵠΔⲆΔ.y - 26)
			}
		}
		if (ⵠΔᐃΔ.ᐃΔΔᐃᐃ) {
			var ᐃᐃⵠⲆᐃ = ⵠΔᐃΔ.timeout.ΔⵠΔ();
			for (var ᐃⲆ = 0; ᐃⲆ < ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length; ᐃⲆ++) {
				var ΔⵠᐃⲆ = ⵠΔᐃΔ.ΔⲆᐃⵠⵠ[ᐃⲆ];
				if (ⵠΔᐃΔ.id == ΔⵠᐃⲆ.id) {
					var ΔⵠⲆ = Ⲇ * 42;
					var ΔⲆΔⵠⵠ = ⲆⲆⵠΔⲆⲆⵠ * Ⲇ;
					ᐃΔⵠ(Δ, ΔⵠᐃⲆ.info.translate.x, ΔⵠᐃⲆ.info.translate.y + (1 - ⵠΔᐃΔ.timeout.ⵠΔΔ) * ΔⵠⲆ, ΔⵠᐃⲆ.info.width, ΔⵠⲆ * ⵠΔᐃΔ.timeout.ⵠΔΔ + ΔⲆΔⵠⵠ, Ⲇ * ⵠⵠⵠΔΔ);
					Δ.fillStyle = "#55B973";
					Δ.fill();
					Δ.globalAlpha = .8;
					ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ)
				} else {
					Δ.globalAlpha = .5;
					ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ)
				}
				Δ.globalAlpha = 1
			}
			if (ᐃᐃⵠⲆᐃ) {
				ⵠΔᐃΔ.ᐃΔΔᐃᐃ = false;
				ⵠΔᐃΔ.timeout.ⵠΔΔ = 0;
				ⵠΔᐃΔ.timeout.ⵠΔⲆ = ⲆⵠΔΔⵠ
			}
			return true
		} else {
			for (var ᐃⲆ = ⵠⵠⲆΔ; ᐃⲆ < ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length; ᐃⲆ++) ⵠΔᐃΔ.ΔⲆᐃⵠⵠ[ᐃⲆ].ᐃⵠΔᐃ(Δ)
		}
		return Ⲇⵠⵠⵠᐃ
	}

	function ᐃΔⵠΔⲆⵠⵠᐃⵠ(ΔΔ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == ΔⲆⲆΔⵠ && (this.ΔΔᐃ.ΔⵠΔ = ᐃΔⲆΔᐃ);
			var ⵠΔΔ = 600 * ((1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * ᐃⵠᐃⵠ) * Ⲇ;
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = ΔᐃⲆⲆ;
			var ⲆⲆⲆ = ⵠᐃⲆⵠ
		}
		if (ⵠ.ΔΔΔⲆΔⵠⵠ === ΔΔ && !ⵠⲆΔ.transition) {
			var ⵠᐃⲆᐃⵠ = ᐃⲆΔ;
			var ΔΔᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ];
			for (var ᐃⲆ = 0; ᐃⲆ < ΔΔᐃΔ.length; ᐃⲆ++) {
				var ⲆⵠⲆⲆ = ΔⲆᐃ.ⲆⵠⲆⲆ(ΔΔᐃΔ[ᐃⲆ], this);
				if (ⲆⵠⲆⲆ < 140 && ⲆⵠⲆⲆ > 35) {
					ⵠᐃⲆᐃⵠ = 0;
					break
				} else ⲆⵠⲆⲆ <= 35 && (ⵠᐃⲆᐃⵠ = ΔⲆⵠⲆ)
			}
			if (ⵠᐃⲆᐃⵠ === ⵠⵠⵠ) this.opacity = Math.max(.5, this.opacity - ᐃⵠᐃⵠ / 1.5);
			else this.opacity = Math.min(ᐃΔⲆΔ, this.opacity + ᐃⵠᐃⵠ / 1.5);
			Δ.globalAlpha = this.opacity
		}
		ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⵠᐃᐃⲆ + Ⲇᐃ, -ΔⵠⲆ / 2 + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
		Δ.globalAlpha = 1;
		Δ.restore()
	}

	function ⵠᐃΔⲆᐃⵠⲆⵠⲆ() {
		var ᐃΔⲆᐃ = ⲆΔⵠ.ᐃΔⲆᐃ;
		var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
		for (var ᐃⲆ = ⵠᐃⵠ; ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length > ᐃⲆ; ᐃⲆ++) {
			var ΔⵠᐃⲆ = ᐃΔⲆᐃ.ΔⵠΔⵠⲆ[ᐃⲆ];
			var ᐃᐃⵠ = ᐃⲆⵠᐃⵠ;
			var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
			ᐃⵠⲆ && (ΔⵠᐃⲆ.id == ᐃⵠⲆ.right || ΔⵠᐃⲆ.id == ᐃⵠⲆ.ⲆΔᐃΔᐃ && ⵠΔΔⲆ < ᐃⵠⲆ.ⲆΔᐃΔᐃ) ? (ᐃᐃⵠ = true, ⵠΔⲆⲆ(Δ, ΔⵠᐃⲆ.info.ⵠⵠ[2], ΔⵠᐃⲆ.info.translate.x, ΔⵠᐃⲆ.info.translate.y, ΔⵠᐃⲆ.info.width, ΔⵠᐃⲆ.info.height)) : ΔⵠᐃⲆ.ᐃⵠΔᐃ(Δ);
			var ᐃᐃⲆⲆ = ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⵠᐃⲆ.id];
			ᐃᐃⲆⲆ > ᐃⵠᐃᐃ && ⲆⲆᐃⵠⲆ(ᐃᐃⲆⲆ, ΔⵠᐃⲆ);
			if (0 < ᐃᐃⲆⲆ) ⵠⵠᐃⲆⲆⵠΔᐃⵠ(ᐃⲆ, ΔⵠᐃⲆ, ᐃᐃⵠ);
			var ⲆᐃⲆΔ = ⲆΔⵠ.ⲆᐃⲆΔ;
			ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ⵠᐃⲆⵠ > ⲆᐃⲆΔ.id || ΔⵠᐃⲆ.id == ⲆᐃⲆΔ.id) && (!ⲆᐃⲆΔ.lock || ⲆᐃⲆΔ.ⲆⲆΔᐃ == ⲆΔⵠ.id) && ᐃⲆΔⵠ.ΔⵠᐃⲆⵠ[ΔⵠᐃⲆ.id].ᐃⵠΔᐃ(Δ);
			var ΔⲆΔⲆᐃ = ⲆΔⵠ.ΔⲆΔⲆᐃ;
			ΔⲆΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ΔⲆ.ᐃᐃᐃⲆ == ΔⵠᐃⲆ.id && ᐃⲆΔⵠ.ΔⵠᐃⲆⵠ[ΔⵠᐃⲆ.id].ᐃⵠΔᐃ(Δ);
			var ⵠⲆⵠᐃᐃ = ⲆΔⵠ.ⵠⲆⵠᐃᐃ;
			ⵠⲆⵠᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ΔⲆ.ᐃⲆⲆΔⲆ == ΔⵠᐃⲆ.id && ᐃⲆΔⵠ.ΔⵠᐃⲆⵠ[ΔⵠᐃⲆ.id].ᐃⵠΔᐃ(Δ);
			var ΔΔⲆᐃ = ⲆΔⵠ.ΔΔⲆᐃ;
			ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ΔⲆ.ΔⵠⲆΔΔ == ΔⵠᐃⲆ.id && ᐃⲆΔⵠ.ΔⵠᐃⲆⵠ[ΔⵠᐃⲆ.id].ᐃⵠΔᐃ(Δ);
			var ᐃⵠΔΔ = ⲆΔⵠ.ᐃⵠΔΔ;
			ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ΔⵠᐃⲆ.id == ΔⲆ.ᐃᐃᐃⲆ && ᐃⲆΔⵠ.ΔⵠᐃⲆⵠ[ΔⵠᐃⲆ.id].ᐃⵠΔᐃ(Δ);
			var ⲆΔᐃⲆ = ⲆΔⵠ.ⲆΔᐃⲆ;
			ⲆΔᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ΔⲆ.ᐃᐃᐃⲆ == ΔⵠᐃⲆ.id || ΔⲆ.ⲆⵠⲆᐃᐃ == ΔⵠᐃⲆ.id) && ᐃⲆΔⵠ.ΔⵠᐃⲆⵠ[ΔⵠᐃⲆ.id].ᐃⵠΔᐃ(Δ)
		}
		if (ΔⵠᐃⲆ && ᐃΔⲆᐃ.max > ᐃⲆ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆⵠⵠⵠΔⵠ][2];
			Ⲇᐃ = ΔⵠᐃⲆ.info.translate.x;
			ⲆⲆⲆ = ΔⵠᐃⲆ.info.translate.y;
			for (ⲆⲆⲆⵠ = 1; ᐃΔⲆᐃ.max > ᐃⲆ; ᐃⲆ++, ⲆⲆⲆⵠ++) ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ + (ⵠⵠ.width + ⵠΔⲆᐃ) * ⲆⲆⲆⵠ, ⲆⲆⲆ)
		}
	}

	function ᐃⲆⲆΔᐃΔᐃⲆⲆ() { // leaderboar
		var ⲆⵠᐃΔⵠ = ⲆΔⵠ.ⲆⵠᐃΔⵠ;
		var ⵠⲆᐃⲆⲆΔⲆ = ᐃⲆΔⵠ.ΔⵠⲆᐃ;
		if (ⲆⵠᐃΔⵠ.ΔⵠΔ) {
			ⲆⵠᐃΔⵠ.ΔⵠΔ = false;
			var ⲆΔⵠᐃⵠ = ⲆⵠᐃΔⵠ.ⲆΔⵠᐃⵠ;
			var ᐃΔΔ = ⵠⲆᐃⲆⲆΔⲆ.ᐃⵠ.width;
			var ΔⵠⲆ = ⵠⲆᐃⲆⲆΔⲆ.ᐃⵠ.height;
			var ΔᐃⵠᐃᐃᐃⲆ = ⵠⲆᐃⲆⲆΔⲆ.Δ;
			var ΔΔᐃΔ = ⵠⲆΔ.ΔΔᐃΔ;
			var ⵠΔⲆΔᐃᐃⲆ = false;
			ΔᐃⵠᐃᐃᐃⲆ.clearRect(ⵠⵠᐃ, ⵠⵠⵠ, ᐃΔΔ, ΔⵠⲆ);
			ΔᐃⵠᐃᐃᐃⲆ.drawImage(ⵠⲆᐃⲆⲆΔⲆ.ⵠⵠ, ⲆᐃΔⵠ, 0);
			for (var ᐃⲆ = ⲆⲆᐃⲆ; ⲆΔⵠᐃⵠ.length > ᐃⲆ; ᐃⲆ++) {
				var ᐃⵠⲆ = ΔΔᐃΔ[ⲆΔⵠᐃⵠ[ᐃⲆ]];
				if (ᐃΔᐃᐃ.ⲆⵠⵠΔΔⲆⵠ === ⵠⲆΔ.mode && ᐃⵠⲆ.ⵠⲆⵠΔⵠ === ᐃ[520]) continue;
				if (ⵠⲆΔ.mode === ᐃΔᐃᐃ.ᐃΔΔΔᐃ && ᐃΔᐃᐃ.ΔⵠᐃⲆΔΔⲆ === ᐃⵠⲆ.ⵠⲆᐃᐃ) continue;
				if (ⲆΔⵠ.id == ⲆΔⵠᐃⵠ[ᐃⲆ]) {
					ⵠΔⲆΔᐃᐃⲆ = ⵠⲆⵠᐃⵠ;
					ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ === ⵠⲆΔ.mode && ᐃΔᐃᐃ.ⲆⵠⵠⵠⵠΔⲆ === ᐃⵠⲆ.ⵠⲆᐃᐃ ? Δⵠ = "#FF0000" : Δⵠ = ᐃ[448]
				} else {
					ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ === ⵠⲆΔ.mode && ᐃΔᐃᐃ.ⲆⵠⵠⵠⵠΔⲆ === ᐃⵠⲆ.ⵠⲆᐃᐃ ? Δⵠ = "#990000" : Δⵠ = "#A1BDCD"
				}
				ΔᐃⵠᐃᐃᐃⲆ.drawImage(ⲆⵠᐃⲆⲆ(Ⲇ, "" + (ᐃⲆ + ⵠⵠⵠⲆ), 15 * Ⲇ, Δⵠ), 20 * Ⲇ, Ⲇ * (40 + 22 * ᐃⲆ));
				if (Settings.ShowLevel.enabled) {	
				if (!ᐃⵠⲆ.ΔΔᐃⵠᐃⵠΔ) ᐃⵠⲆ.ΔΔᐃⵠᐃⵠΔ = ⲆⵠᐃⲆⲆ(Ⲇ, ᐃⵠⲆ.ⵠⲆⵠΔⵠ+ ` [${ᐃⵠⲆ.level}]`, Ⲇ * ⲆᐃⲆⵠⵠ, Δⵠ, undefined, undefined, undefined, undefined, Ⲇ * 110);
				}
				else {
					ᐃⵠⲆ.ΔΔᐃⵠᐃⵠΔ = ⲆⵠᐃⲆⲆ(Ⲇ, ᐃⵠⲆ.ⵠⲆⵠΔⵠ, Ⲇ * ⲆᐃⲆⵠⵠ, Δⵠ, undefined, undefined, undefined, undefined, Ⲇ * 110);
				}
				ΔᐃⵠᐃᐃᐃⲆ.drawImage(ᐃⵠⲆ.ΔΔᐃⵠᐃⵠΔ, Ⲇ * 39, (40 + 22 * ᐃⲆ) * Ⲇ);
				ΔᐃⵠᐃᐃᐃⲆ.drawImage(ⲆⵠᐃⲆⲆ(Ⲇ, ΔⲆᐃ.ⵠⲆⲆⵠⵠΔᐃ(ᐃⵠⲆ.ᐃᐃᐃΔᐃ), Ⲇ * 15, Δⵠ), 156 * Ⲇ, Ⲇ * (40 + 22 * ᐃⲆ))
			}
			if (!ⵠΔⲆΔᐃᐃⲆ) {
				(ᐃΔᐃᐃ.ⵠΔᐃⵠΔ === ⵠⲆΔ.mode || ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ === ⵠⲆΔ.mode || ⵠⲆΔ.mode === ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ || ᐃΔᐃᐃ.ᐃⲆΔⲆⵠΔᐃ === ⵠⲆΔ.mode || ᐃΔᐃᐃ.ΔⲆⲆᐃⵠ === ⵠⲆΔ.mode || ⵠⲆΔ.mode === ᐃΔᐃᐃ.ⲆⵠⵠΔΔⲆⵠ && !ⲆΔⵠ.ΔᐃⲆΔᐃⲆᐃ || ⵠⲆΔ.mode === ᐃΔᐃᐃ.ᐃΔΔΔᐃ && !ⲆΔⵠ.ΔⵠⵠⵠΔ) && (ΔᐃⵠᐃᐃᐃⲆ.drawImage(ᐃᐃ[ⵠ.ΔⵠⲆⲆᐃⵠⵠ], 15 * Ⲇ, (46 + ᐃⲆ * 22) * Ⲇ), ΔᐃⵠᐃᐃᐃⲆ.drawImage(ⲆⵠᐃⲆⲆ(Ⲇ, ΔⲆᐃ.ⵠⲆⲆⵠⵠΔᐃ(ⵠⲆΔ.ΔΔᐃΔ[ⲆΔⵠ.id].ᐃᐃᐃΔᐃ), Ⲇ * ⲆⲆⲆΔⵠ, ᐃ[448]), ᐃⵠⵠΔⲆ * Ⲇ, Ⲇ * (46 + ᐃⲆ * 22)))
			}
		}
		ⵠΔⲆⲆ(Δ, ⵠⲆᐃⲆⲆΔⲆ.ᐃⵠ, ⵠⲆᐃⲆⲆΔⲆ.translate.x, ⵠⲆᐃⲆⲆΔⲆ.translate.y)
	}

	function ⲆΔⵠΔᐃⲆⵠᐃΔ() {
		var ᐃᐃⵠⵠΔ = ⲆΔⵠ.ᐃᐃⵠⵠΔ;
		if (ᐃᐃⵠⵠΔ.wait) {
			var ᐃᐃⵠⲆᐃ = ᐃᐃⵠⵠΔ.timeout.ΔⵠΔ();
			Δ.save();
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔΔⵠΔΔⵠⵠ];
			Δ.translate(ⵠⵠ.width - Ⲇ * ⲆΔⲆΔ, ᐃⲆΔⵠ.ⵠΔⲆΔ.translate.y - Ⲇ * 60);
			var Ⲇᐃ = -ⵠⵠ.width / ⵠᐃᐃⲆ - ⲆΔΔⲆ;
			var ⲆⲆⲆ = -ⵠⵠ.height / ΔΔᐃⲆⵠ - 4;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ);
			Δ.beginPath();
			Δ.lineWidth = Ⲇ * ᐃᐃᐃⲆⲆ;
			Δ.strokeStyle = ⵠ.ᐃΔΔΔⲆΔΔ[ⵠⲆΔ.time];
			Δ.lineCap = ᐃ[250];
			Δ.arc(ⲆⲆΔ, ⲆⲆⲆ + ⵠⵠ.height / 2, 25 * Ⲇ, ⵠⵠⵠ, Math.PI * ⵠⲆᐃⵠ * ᐃᐃⵠⵠΔ.timeout.ⵠΔΔ);
			Δ.stroke();
			Δ.restore();
			ᐃᐃⵠⲆᐃ && (ᐃᐃⵠⵠΔ.wait = false, ᐃᐃⵠⵠΔ.timeout.ⵠΔΔ = 0, ᐃᐃⵠⵠΔ.timeout.ⵠΔⲆ = false)
		}
	}

	function ⵠⲆⲆⵠⲆⲆⵠⵠⲆ() {
		var ⵠᐃΔⵠⲆ = ⲆΔⵠ.ⵠᐃΔⵠⲆ;
		if (ⵠᐃΔⵠⲆ.wait) {
			var ᐃᐃⵠⲆᐃ = ⵠᐃΔⵠⲆ.timeout.ΔⵠΔ();
			Δ.save();
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃΔⲆⲆⲆᐃ];
			Δ.translate(ⵠⵠ.width - 2 * Ⲇ, ᐃⲆΔⵠ.ⵠΔⲆΔ.translate.y - Ⲇ * 125);
			var Ⲇᐃ = -ⵠⵠ.width / ⵠⵠᐃⲆ + 10;
			var ⲆⲆⲆ = -ⵠⵠ.height / ᐃᐃⲆⵠ - ΔΔⲆΔ;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ);
			Δ.beginPath();
			Δ.lineWidth = Ⲇ * 5;
			Δ.strokeStyle = ⵠ.ᐃᐃᐃⵠΔⲆⵠ[ⵠⲆΔ.time];
			Δ.lineCap = ᐃ[250];
			Δ.arc(9, ⲆⲆⲆ + ⵠⵠ.height / ⵠΔΔΔ, Ⲇ * 25, ⵠᐃΔ, Math.PI * 2 * ⵠᐃΔⵠⲆ.timeout.ⵠΔΔ);
			Δ.stroke();
			Δ.restore();
			ᐃᐃⵠⲆᐃ && (ⵠᐃΔⵠⲆ.wait = ⵠᐃΔΔᐃ, ⵠᐃΔⵠⲆ.timeout.ⵠΔΔ = 0, ⵠᐃΔⵠⲆ.timeout.ⵠΔⲆ = ⲆⲆΔΔᐃ)
		}
	}

	function ᐃΔⵠⵠⵠΔⵠᐃᐃ() {
		var Ⲇⵠⵠⵠⵠ = ⲆΔⵠ.Ⲇⵠⵠⵠⵠ;
		if (Ⲇⵠⵠⵠⵠ.wait) {
			var ᐃᐃⵠⲆᐃ = Ⲇⵠⵠⵠⵠ.timeout.ΔⵠΔ();
			Δ.save();
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃⲆΔᐃⵠⲆ];
			Δ.translate(ⵠⵠ.width - Ⲇ * ⵠⲆⲆΔΔ, ᐃⲆΔⵠ.ⵠΔⲆΔ.translate.y - Ⲇ * 190);
			var Ⲇᐃ = -ⵠⵠ.width / ΔⲆⵠΔ + ᐃⵠⲆᐃᐃⲆΔ;
			var ⲆⲆⲆ = -ⵠⵠ.height / 2 - 4;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ);
			Δ.beginPath();
			Δ.lineWidth = Ⲇ * ⵠᐃⲆᐃ;
			Δ.strokeStyle = ⵠ.ᐃᐃᐃⵠΔⲆⵠ[ⵠⲆΔ.time];
			Δ.lineCap = ᐃ[250];
			Δ.arc(9, ⲆⲆⲆ + ⵠⵠ.height / ᐃᐃⲆⵠ, Ⲇ * 25, 0, Math.PI * ᐃᐃⵠⵠ * Ⲇⵠⵠⵠⵠ.timeout.ⵠΔΔ);
			Δ.stroke();
			Δ.restore();
			ᐃᐃⵠⲆᐃ && (Ⲇⵠⵠⵠⵠ.wait = ᐃⲆⵠᐃⵠ, Ⲇⵠⵠⵠⵠ.timeout.ⵠΔΔ = 0, Ⲇⵠⵠⵠⵠ.timeout.ⵠΔⲆ = ΔᐃΔΔᐃ)
		}
	}

	function ⲆᐃⵠⲆⵠᐃΔⲆᐃ() {
		var ⵠΔᐃΔ = ⲆΔⵠ.ⵠΔᐃΔ;
		if (ⵠΔᐃΔ.ᐃΔΔᐃᐃ) {
			var ΔⲆⵠᐃ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
			Δ.save();
			Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + ΔⲆⵠᐃ.x, ⲆΔⵠ.ⲆⵠΔ.y + ΔⲆⵠᐃ.y);
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔΔᐃᐃⵠⵠ];
			var Ⲇᐃ = -ⵠⵠ.width / 2;
			var ⲆⲆⲆ = -ⵠⵠ.height / ᐃᐃΔⵠ - 125 * Ⲇ;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ);
			Δ.beginPath();
			Δ.lineWidth = ΔⲆⵠⵠ * Ⲇ;
			Δ.strokeStyle = ⵠ.ⲆᐃᐃΔⲆⵠΔ[ⵠⲆΔ.time];
			Δ.lineCap = ᐃ[250];
			Δ.arc(ᐃⲆΔ, ⲆⲆⲆ + ⵠⵠ.height / 2, Ⲇ * 25, ⵠΔΔⲆ, 2 * Math.PI * ⵠΔᐃΔ.timeout.ⵠΔΔ);
			Δ.stroke();
			Δ.restore()
		}
	}

	function ΔᐃⵠΔⵠΔΔΔⵠ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆΔᐃⲆ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ⲆⵠᐃᐃⲆⲆⲆᐃᐃ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && false == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ && (this.ΔΔᐃ.ΔⵠΔ = false);
			var ⵠΔΔ = Ⲇ * (ᐃⵠᐃⵠ * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = ᐃⲆΔᐃ;
			var ⲆⲆⲆ = 0
		}
		ⵠⵠ = Settings.ChestInfo.enabled && this.lock ? ᐃᐃ[ⵠ.ᐃⵠⵠΔⵠ][2] : ᐃᐃ[ⵠ.ᐃⵠⵠΔⵠ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⵠΔⵠⲆ + Ⲇᐃ, -ΔⵠⲆ / 2 + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
		if (this.lock) {
			ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔᐃⵠⵠ][ⵠⲆΔ.time];
			ᐃΔΔ = -ⵠⵠ.width;
			ΔⵠⲆ = -ⵠⵠ.height;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ᐃᐃⵠⵠ + Ⲇᐃ - ΔⲆⵠⲆ * Ⲇ, -ΔⵠⲆ / ΔⵠⲆⲆ + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ)
		}
		Δ.restore()
	}
	var ᐃΔⵠⵠⵠᐃⵠ = 0;

	function ᐃΔⲆⵠⵠⲆᐃⲆⵠ() {
		var ⲆΔⵠΔᐃ = Math.PI / ⲆΔΔⲆ;
		var ⲆΔᐃΔⵠΔⵠ = Math.PI / 4;
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		this.ΔⲆΔΔᐃᐃⵠ.ΔⵠΔ();
		this.ⲆᐃΔⲆΔΔⲆ.ΔⵠΔ();
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.info === 0) ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠⵠᐃᐃ][ⵠⲆΔ.time];
		else ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠⲆΔΔᐃⵠ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
		ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ⵠⵠᐃⲆ, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == false && (this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ);
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠⲆⲆⲆⲆᐃ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ⵠⲆᐃⵠ, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = ΔⲆⵠⲆ
		}
		if (this.action & ᐃⵠⲆⵠ.ⲆⲆᐃᐃᐃ) {
			this.ᐃΔᐃⵠⵠ.ΔⵠΔ() && false == this.ᐃΔᐃⵠⵠ.ⵠΔⲆ && (this.action -= ᐃⵠⲆⵠ.ⲆⲆᐃᐃᐃ);
			Δ.globalAlpha = .6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆΔΔᐃⵠⵠ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = 1
		}
		Δ.restore();
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle + ⲆΔᐃΔⵠΔⵠ);
		Δ.translate(55, ⲆⲆΔ);
		Δ.rotate(ⲆΔⵠΔᐃ);
		ⵠⵠᐃ === this.info ? ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔⵠᐃⵠᐃΔ][ⵠⲆΔ.time] : ⵠⵠ = ᐃᐃ[ⵠ.ᐃⵠⵠᐃΔⲆΔ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ΔⲆΔΔᐃᐃⵠ.ⵠΔΔ;
		ΔⵠⲆ = -ⵠⵠ.height * this.ΔⲆΔΔᐃᐃⵠ.ⵠΔΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠΔᐃⵠⵠΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ΔⲆⵠΔ, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = ᐃⲆⲆ
		}
		if (this.action & ᐃⵠⲆⵠ.ⲆⲆᐃᐃᐃ) {
			Δ.globalAlpha = .6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃⵠⵠᐃᐃΔΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = 1
		}
		Δ.restore();
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle + ⲆΔⵠΔᐃ + ⲆΔᐃΔⵠΔⵠ);
		Δ.translate(55, 0);
		Δ.rotate(ⲆΔⵠΔᐃ);
		if (0 === this.info) ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃΔⵠᐃⲆΔ][ⵠⲆΔ.time];
		else ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆⵠⲆΔⲆⲆ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⲆᐃΔⲆΔΔⲆ.ⵠΔΔ;
		ΔⵠⲆ = this.ⲆᐃΔⲆΔΔⲆ.ⵠΔΔ * -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⲆΔΔⲆ, -ΔⵠⲆ / ⵠΔΔΔ, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔᐃᐃᐃⵠΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = 1
		}
		if (this.action & ᐃⵠⲆⵠ.ⲆⲆᐃᐃᐃ) {
			Δ.globalAlpha = .6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆⵠⵠΔⵠΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ᐃⲆⵠᐃ, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = ᐃⵠⵠⵠ
		}
		Δ.restore()
	}

	function ⵠΔᐃΔⲆⵠᐃᐃⵠ(ΔΔ, Ⲇᐃ, ⲆⲆⲆ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + Ⲇᐃ, ⲆΔⵠ.ⲆⵠΔ.y + ⲆⲆⲆ);
		Δ.rotate(this.angle);
		Δ.translate(this.x - Ⲇᐃ, this.y - ⲆⲆⲆ);
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
		ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ΔⵠⲆⲆ, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ⲆⵠᐃΔᐃⲆᐃΔⲆ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r) > 300 ? this.scale = Math.min(this.scale + ᐃⵠᐃⵠ / 2, 1.8) : this.scale = Math.max(this.scale - ᐃⵠᐃⵠ, ⲆⲆⲆᐃ);
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		this.rotate.ΔⵠΔ();
		this.info === ⵠⵠⵠ ? ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠⲆΔΔ][ⵠⲆΔ.time] : ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃΔΔⲆⵠⵠ][ⵠⲆΔ.time];
		ᐃΔΔ = this.scale * (-ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ);
		ΔⵠⲆ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / ⵠᐃᐃⲆ, ΔⵠⲆ / 2);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			if (this.ΔΔᐃ.ΔⵠΔ() && ΔⲆⲆᐃΔ == this.ΔΔᐃ.ⵠΔⲆ) this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ;
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔᐃΔⲆᐃⵠ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / ⲆΔΔⲆ);
			Δ.globalAlpha = 1
		}
		if (this.info === Ⲇⵠᐃ) ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃΔᐃΔΔᐃ][ⵠⲆΔ.time];
		else ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆⵠⵠᐃⵠᐃ][ⵠⲆΔ.time];
		ᐃΔΔ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.width);
		ΔⵠⲆ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height);
		Δ.save();
		Δ.translate(Ⲇ * -40, Ⲇ * ⵠΔⲆⲆΔ);
		Δ.rotate(this.rotate.ⵠΔΔ);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / 4, Ⲇ * -ΔⵠⲆ / ⵠⵠⵠᐃⲆ, ᐃΔΔ / 2, ΔⵠⲆ / ᐃⲆⵠᐃ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔⲆⲆⵠⵠⲆ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇ * -ᐃΔΔ / 4, -ΔⵠⲆ * Ⲇ / 4, ᐃΔΔ / ⵠⵠΔⵠ, ΔⵠⲆ / 2);
			Δ.globalAlpha = 1
		}
		Δ.restore();
		0 === this.info ? ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠⵠΔ][ⵠⲆΔ.time] : ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃᐃⵠΔᐃⵠ][ⵠⲆΔ.time];
		Δ.save();
		Δ.translate(40 * Ⲇ, 10 * Ⲇ);
		Δ.rotate(-this.rotate.ⵠΔΔ);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇ * -ᐃΔΔ / 4, Ⲇ * -ΔⵠⲆ / ΔΔᐃⵠΔ, ᐃΔΔ / 2, ΔⵠⲆ / ⵠΔΔΔ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃᐃᐃⲆⵠⵠ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / ᐃᐃᐃᐃΔ, -ΔⵠⲆ * Ⲇ / 4, ᐃΔΔ / ΔΔᐃⲆⵠ, ΔⵠⲆ / ᐃᐃⵠⵠ);
			Δ.globalAlpha = 1
		}
		Δ.restore();
		Δ.restore()
	}

	function ΔⲆΔᐃⵠᐃⲆⲆΔ() {
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == ᐃΔᐃⲆΔ && (this.ΔΔᐃ.ΔⵠΔ = ⲆⲆΔΔᐃ);
			var ⵠΔΔ = Ⲇ * (ᐃⵠᐃⵠ * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = ⵠΔΔⲆ
		}
		this.ⵠⲆΔⵠᐃᐃᐃ = (this.ⵠⲆΔⵠᐃᐃᐃ + ᐃⵠᐃⵠ * Ⲇⵠᐃᐃ) % (Math.PI * 2);
		this.ⵠⲆⲆᐃⲆⲆᐃ = (this.ⵠⲆⲆᐃⲆⲆᐃ - ⵠⵠⲆᐃ * ᐃⵠᐃⵠ) % (Math.PI * 2);
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x + Ⲇᐃ, ⲆΔⵠ.ⲆⵠΔ.y + this.y + ⲆⲆⲆ);
		Δ.save();
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ΔΔⵠⲆ);
		Δ.restore();
		Δ.save();
		Δ.rotate(this.ⵠⲆΔⵠᐃᐃᐃ);
		ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃⲆⲆⵠΔΔ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ⵠΔΔΔ, -ⵠⵠ.height / 2);
		Δ.restore();
		Δ.save();
		Δ.rotate(this.ⵠⲆⲆᐃⲆⲆᐃ);
		ⵠⵠ = ᐃᐃ[ⵠ.ΔΔΔⲆⵠΔᐃ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ⵠΔⵠⲆ, -ⵠⵠ.height / ΔⲆⵠΔ);
		Δ.restore();
		Δ.restore()
	}

	function ⵠΔⵠⲆⲆᐃⲆⲆⲆ() {
		if (ΔⵠⲆⵠⵠ === this.info) return;
		var ᐃⲆᐃⵠ = this.info & 15;
		for (var ᐃⲆ = ⵠΔΔⲆ; ᐃⲆᐃⵠ > ᐃⲆ; ᐃⲆ++) this.ΔΔⵠΔ[ᐃⲆ].ᐃⵠΔᐃ(ⵠ.ᐃⲆⲆᐃⲆ, this.x, this.y);
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ⵠⲆᐃⵠⵠ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ && (this.ΔΔᐃ.ΔⵠΔ = false);
			var ⵠΔΔ = ᐃⵠᐃⵠ * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * Ⲇ;
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = ᐃⲆΔ
		}
		if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠΔᐃᐃᐃΔ][ⵠⲆΔ.time];
		else var ⵠⵠ = ᐃᐃ[ⵠ.ΔΔⲆᐃΔᐃⵠ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ⲆᐃᐃⲆ + Ⲇᐃ, -ⵠⵠ.width / ᐃᐃⲆⵠ + ⲆⲆⲆ);
		Δ.restore()
	}
	const ΔᐃⲆᐃⵠᐃⵠᐃⲆ = {};
	const ΔΔⲆΔΔΔᐃᐃᐃ = {};
	ΔᐃⲆᐃⵠᐃⵠᐃⲆ["get"] = function(ⵠⲆⲆΔⵠΔΔ, ⲆⵠⵠᐃⵠⵠΔ) {
		if (ⲆⵠⵠᐃⵠⵠΔ !== "ΔᐃⲆᐃⵠᐃⵠᐃⲆ") {
			const ΔᐃⲆᐃⵠᐃⵠᐃⲆ = Math.floor;
			let ⵠⵠΔᐃⵠᐃⲆ = 0;
			const ⵠⲆⲆΔⵠΔΔ = function(ⵠⲆⲆΔⵠΔΔ) {
				for (let ⲆⵠⵠᐃⵠⵠΔ = 0; ⲆⵠⵠᐃⵠⵠΔ < 2298; ⲆⵠⵠᐃⵠⵠΔ++) ⵠⵠΔᐃⵠᐃⲆ += ⲆⵠⵠᐃⵠⵠΔ;
				return ΔᐃⲆᐃⵠᐃⵠᐃⲆ(ⵠⲆⲆΔⵠΔΔ)
			};
			Math.floor = ⵠⲆⲆΔⵠΔΔ
		}
		return ⲆⵠᐃΔᐃⵠⲆ["Reflect"]["get"](...arguments)
	};
	const ⵠⵠΔᐃⵠᐃⲆ = new ⲆⵠᐃΔᐃⵠⲆ["Proxy"](ΔΔⲆΔΔΔᐃᐃᐃ, ΔᐃⲆᐃⵠᐃⵠᐃⲆ);
	const ΔΔΔⲆⵠΔⵠΔⵠ = ⵠⵠΔᐃⵠᐃⲆ.ΔᐃⲆᐃⵠᐃⵠᐃⲆ;

	function ᐃᐃᐃⵠⵠⵠᐃᐃⵠ() {
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ⲆⵠΔΔⵠ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ && (this.ΔΔᐃ.ΔⵠΔ = false);
			var ⵠΔΔ = Ⲇ * (600 * ((ᐃⵠⵠⵠ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * ᐃⵠᐃⵠ));
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = Ⲇⵠᐃ;
			var ⲆⲆⲆ = 0
		}
		Δ.save();
		this.info & 255 && 65280 != (this.info & 65280) && (Ⲇᐃ += Math.random() * ΔΔᐃⲆⵠ - ⵠᐃᐃ, ⲆⲆⲆ += Math.random() * ⵠⵠΔⵠ - ᐃⵠᐃᐃ);
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x + Ⲇᐃ, ⲆΔⵠ.ⲆⵠΔ.y + this.y + ⲆⲆⲆ);
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.Ⲇᐃⵠⵠᐃ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ᐃᐃⲆⵠ, -ⵠⵠ.height / ⵠⵠᐃⲆ);
		this.info & 255 && 65280 != (this.info & 65280) && (this.rotate = (this.rotate + ⲆΔⲆᐃ * ᐃⵠᐃⵠ) % (2 * Math.PI));
		Δ.rotate(this.rotate);
		ⵠⵠ = ᐃᐃ[ⵠ.ᐃᐃⲆⵠⲆΔΔ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ᐃⵠΔⲆ);
		Δ.restore()
	}

	function ᐃⲆᐃᐃⵠⲆΔⵠⲆ(ΔΔ, ᐃⵠᐃΔΔⲆⲆ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == ⲆⲆΔΔᐃ && (this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ);
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ᐃⵠᐃΔΔⲆⲆ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⵠⲆᐃⵠ, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = Δⵠᐃ
		}
		Δ.restore()
	}

	function ΔᐃⲆⲆΔᐃⵠᐃᐃ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		300 < ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r) ? this.scale = Math.min(this.scale + ᐃⵠᐃⵠ / ΔΔᐃⲆⵠ, 1.8) : this.scale = Math.max(this.scale - ᐃⵠᐃⵠ, 1);
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		this.rotate.ΔⵠΔ();
		ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃᐃᐃΔ][ⵠⲆΔ.time];
		ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.width * this.scale;
		ΔⵠⲆ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ΔᐃᐃΔ, -ΔⵠⲆ / ⵠⵠⵠᐃⲆ, ᐃΔΔ / ΔΔᐃⲆⵠ, ΔⵠⲆ / Ⲇᐃⵠⵠ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			this.ΔΔᐃ.ΔⵠΔ() && false == this.ΔΔᐃ.ⵠΔⲆ && (this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ);
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃⵠⲆⵠΔⵠ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ᐃΔΔΔⲆ, -ΔⵠⲆ / ΔⲆⵠΔⲆ, ᐃΔΔ / ΔΔᐃⲆⵠ, ΔⵠⲆ / 2);
			Δ.globalAlpha = ⵠⲆⵠⲆ
		}
		ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃⵠⵠΔᐃⵠ][ⵠⲆΔ.time];
		ᐃΔΔ = this.scale * (-ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ);
		ΔⵠⲆ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height);
		Δ.save();
		Δ.translate(Ⲇ * -60, ⵠⲆᐃⲆⵠ * Ⲇ);
		Δ.rotate(this.rotate.ⵠΔΔ);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / ᐃΔΔΔⲆ, Ⲇ * -ΔⵠⲆ / ΔⲆΔⲆ, ᐃΔΔ / 2, ΔⵠⲆ / 2);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃⲆᐃΔⵠᐃ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇ * -ᐃΔΔ / ΔⲆⵠΔⲆ, -ΔⵠⲆ * Ⲇ / 4, ᐃΔΔ / 2, ΔⵠⲆ / ᐃᐃⵠⵠ);
			Δ.globalAlpha = 1
		}
		Δ.restore();
		ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆᐃⲆⵠⲆΔ][ⵠⲆΔ.time];
		Δ.save();
		Δ.translate(60 * Ⲇ, ΔⲆⵠⵠᐃ * Ⲇ);
		Δ.rotate(-this.rotate.ⵠΔΔ);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / 4, Ⲇ * -ΔⵠⲆ / 4, ᐃΔΔ / ΔΔᐃⲆⵠ, ΔⵠⲆ / 2);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠΔΔⵠⵠⵠᐃ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / 4, -ΔⵠⲆ * Ⲇ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
			Δ.globalAlpha = ⲆⲆᐃⵠ
		}
		Δ.restore();
		Δ.restore()
	}

	function ⲆΔⵠᐃΔᐃⵠⵠΔ() {
		if (10 > this.info) return;
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && false == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) this.ΔΔᐃ.ΔⵠΔ = ᐃⲆⵠᐃⵠ;
			var ⵠΔΔ = ᐃⵠᐃⵠ * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * Ⲇ;
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = ⵠᐃΔ;
			var ⲆⲆⲆ = 0
		}
		this.ᐃΔⵠⲆ.ΔⵠΔ();
		var ⵠⵠ = ᐃᐃ[ⵠ.ΔΔⵠᐃᐃΔΔ][ⵠⲆΔ.time];
		var ᐃΔΔ = -ⵠⵠ.width * this.ᐃΔⵠⲆ.ⵠΔΔ;
		var ΔⵠⲆ = -ⵠⵠ.height * this.ᐃΔⵠⲆ.ⵠΔΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2 + Ⲇᐃ, -ΔⵠⲆ / 2 + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ⲆⵠΔⵠⵠᐃⲆⲆΔ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.ⵠᐃⵠⵠⵠ.ΔⵠΔ();
		ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠΔⲆΔⵠⲆ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠⵠⵠ.ⵠΔΔ;
		ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠⵠⵠ.ⵠΔΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⵠⵠᐃⲆ, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ᐃⲆⵠⵠᐃⲆᐃⲆⵠ() {
		if (this.ΔΔᐃ.ΔⵠΔ) {
			if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ᐃᐃⲆᐃΔ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) this.ΔΔᐃ.ΔⵠΔ = false;
			var ⵠΔΔ = ᐃⵠᐃⵠ * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * Ⲇ;
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = ᐃⲆΔᐃ
		}
		Δ.save();
		this.info & 255 && (this.info & 65280) != 65280 && (Ⲇᐃ += Math.random() * ᐃⵠΔⲆ - ΔⲆⵠⲆ, ⲆⲆⲆ += ⲆᐃᐃⲆ * Math.random() - ⲆⵠΔΔ);
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x + Ⲇᐃ, ⲆΔⵠ.ⲆⵠΔ.y + this.y + ⲆⲆⲆ);
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.Δⵠⵠⵠᐃ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
		if (this.info & 255 && 65280 != (this.info & 65280)) this.rotate = (this.rotate + ᐃⵠᐃⵠ * 3) % (Math.PI * 2);
		Δ.rotate(this.rotate);
		ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠΔᐃΔΔᐃ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
		Δ.restore()
	}

	function ΔᐃⵠⵠᐃⲆᐃΔⵠ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == false && (this.ΔΔᐃ.ΔⵠΔ = ᐃᐃⲆᐃΔ);
			var ⵠΔΔ = 600 * (ᐃⵠᐃⵠ * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ)) * Ⲇ;
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = Ⲇⵠᐃ;
			var ⲆⲆⲆ = ⵠⵠⲆΔ
		}
		var ᐃⲆᐃⵠ = this.info & 15;
		if (10 === this.info || 0 === ᐃⲆᐃⵠ) {
			Δ.rotate(this.angle);
			this.ᐃΔⵠⲆ.ΔⵠΔ();
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆⵠⵠΔΔⵠ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃΔΔⲆᐃⲆ][ⵠⲆΔ.time];
			var ᐃΔΔ = -ⵠⵠ.width * this.ᐃΔⵠⲆ.ⵠΔΔ;
			var ΔⵠⲆ = this.ᐃΔⵠⲆ.ⵠΔΔ * -ⵠⵠ.height;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2 + Ⲇᐃ, -ΔⵠⲆ / ⵠΔⵠⲆ + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ)
		} else {
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ᐃⵠᐃΔΔᐃᐃ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔΔⵠᐃ][ⵠⲆΔ.time];
			Δ.translate(ⲆⲆᐃ, ⵠⵠ.height / 2);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ - ⵠⵠ.width / ⵠΔΔΔ, -ⵠⵠ.height + ⲆⲆⲆ)
		}
		Δ.restore()
	}

	function ⵠⲆⲆⲆⵠⵠᐃⵠᐃΔⲆ() {
		return 2914527
	}
	const ᐃᐃΔⵠⵠⲆᐃ = 11756422;
	const ᐃΔⵠᐃⵠⵠᐃΔⲆ = ⵠⲆⲆⲆⵠⵠᐃⵠᐃΔⲆ + " let ⵠⲆⲆⲆⵠⲆᐃ = ⵠⲆⲆⲆⵠⵠᐃⵠᐃΔⲆ () * 16537069; return ⵠⲆⲆⲆⵠⲆᐃ;";
	const ΔᐃⲆᐃⵠᐃⲆᐃⲆ = new Function(ᐃΔⵠᐃⵠⵠᐃΔⲆ);
	try {
		ΔᐃⲆᐃⵠᐃⲆᐃⲆ(ᐃᐃΔⵠⵠⲆᐃ)
	} catch (e) {
		const ᐃᐃΔⵠⵠⲆᐃ = Math.random;
		const ⵠⲆⲆⲆⵠⲆᐃ = [];
		const ᐃΔⵠᐃⵠⵠᐃΔⲆ = function() {
			for (let ΔᐃⲆᐃⵠᐃⲆᐃⲆ = 0; ΔᐃⲆᐃⵠᐃⲆᐃⲆ < 7857; ΔᐃⲆᐃⵠᐃⲆᐃⲆ++) ⵠⲆⲆⲆⵠⲆᐃ.push(ΔᐃⲆᐃⵠᐃⲆᐃⲆ);
			return ᐃᐃΔⵠⵠⲆᐃ()
		};
		Math.random = ᐃΔⵠᐃⵠⵠᐃΔⲆ
	}

	function ⵠΔⲆⵠΔᐃⵠⲆⵠ() {
		if (this.ΔΔᐃ.ΔⵠΔ) {
			if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ᐃΔᐃⲆΔ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) this.ΔΔᐃ.ΔⵠΔ = false;
			var ⵠΔΔ = (ᐃΔⲆΔ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * ᐃⵠᐃⵠ * 600 * Ⲇ;
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = 0
		}
		Δ.save();
		this.info & 255 && 65280 != (this.info & 65280) && (Ⲇᐃ += 2 * Math.random() - ⵠᐃᐃ, ⲆⲆⲆ += ⲆΔⲆΔ * Math.random() - ᐃⵠᐃᐃ);
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x + Ⲇᐃ, ⲆΔⵠ.ⲆⵠΔ.y + this.y + ⲆⲆⲆ);
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.ᐃⲆᐃΔⵠ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ⵠⲆᐃⵠ);
		this.info & 255 && 65280 != (this.info & 65280) && (this.rotate = (this.rotate + Ⲇⵠᐃᐃ * ᐃⵠᐃⵠ) % (2 * Math.PI));
		Δ.rotate(this.rotate);
		ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆΔⲆᐃⵠⵠ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ⲆΔⲆΔ, -ⵠⵠ.height / ⲆΔⲆΔ);
		Δ.restore()
	}

	function ⵠⲆΔⵠΔⵠⵠΔⲆ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && false == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ && (this.ΔΔᐃ.ΔⵠΔ = false);
			var ⵠΔΔ = ᐃⵠᐃⵠ * (ᐃⲆⲆ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * Ⲇ;
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = ᐃⲆΔ;
			var ⲆⲆⲆ = ᐃⲆᐃ
		}
		var ᐃⲆᐃⵠ = this.info & 15;
		if (10 === this.info || ᐃⲆᐃⵠ === ⵠⵠᐃ) {
			Δ.rotate(this.angle);
			this.ᐃΔⵠⲆ.ΔⵠΔ();
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ⵠΔⲆΔΔΔⵠ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔᐃⵠΔᐃΔ][ⵠⲆΔ.time];
			var ᐃΔΔ = -ⵠⵠ.width * this.ᐃΔⵠⲆ.ⵠΔΔ;
			var ΔⵠⲆ = -ⵠⵠ.height * this.ᐃΔⵠⲆ.ⵠΔΔ;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2 + Ⲇᐃ, -ΔⵠⲆ / 2 + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ)
		} else {
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆΔᐃΔᐃⵠ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆⵠⵠΔ][ⵠⲆΔ.time];
			Δ.translate(0, ⵠⵠ.height / 2);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ - ⵠⵠ.width / 2, -ⵠⵠ.height + ⲆⲆⲆ)
		}
		Δ.restore()
	}

	function ⲆⵠΔΔⵠⲆⲆⲆⵠ() {
		if (this.ΔΔᐃ.ΔⵠΔ) {
			if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ΔΔᐃΔⵠ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) this.ΔΔᐃ.ΔⵠΔ = ⲆⲆΔΔᐃ;
			var ⵠΔΔ = Ⲇ * (ᐃⵠᐃⵠ * (ⵠⲆⵠⲆ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = 0
		}
		Δ.save();
		this.info & 255 && 65280 != (this.info & 65280) && (Ⲇᐃ += ⵠΔΔΔ * Math.random() - ⲆⲆⵠ, ⲆⲆⲆ += Math.random() * ⵠΔΔΔ - ⲆⲆⵠ);
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x + Ⲇᐃ, ⲆΔⵠ.ⲆⵠΔ.y + this.y + ⲆⲆⲆ);
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔᐃⵠᐃ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
		this.info & 255 && (this.info & 65280) != 65280 && (this.rotate = (this.rotate + ᐃⵠᐃⵠ * Ⲇⵠᐃᐃ) % (2 * Math.PI));
		Δ.rotate(this.rotate);
		ⵠⵠ = ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠᐃΔ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ᐃⲆⵠᐃ);
		Δ.restore()
	}

	function ⲆᐃᐃᐃᐃΔᐃᐃᐃ() {
		if (this.info < ⲆΔⲆᐃⵠ) return;
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == false && (this.ΔΔᐃ.ΔⵠΔ = false);
			var ⵠΔΔ = Ⲇ * (ᐃⵠᐃⵠ * (ᐃΔⵠΔ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = Ⲇⵠⵠᐃ
		}
		this.ᐃΔⵠⲆ.ΔⵠΔ();
		var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠⲆⵠΔᐃⲆ][ⵠⲆΔ.time];
		var ᐃΔΔ = this.ᐃΔⵠⲆ.ⵠΔΔ * -ⵠⵠ.width;
		var ΔⵠⲆ = this.ᐃΔⵠⲆ.ⵠΔΔ * -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2 + Ⲇᐃ, -ΔⵠⲆ / 2 + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ΔⵠⲆⵠⲆⵠᐃⲆᐃ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ⲆᐃΔᐃⵠ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) this.ΔΔᐃ.ΔⵠΔ = ⵠᐃΔΔᐃ;
			var ⵠΔΔ = 600 * ((1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * ᐃⵠᐃⵠ) * Ⲇ;
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = 0
		}
		var ᐃⲆᐃⵠ = this.info & 15;
		if (this.info === ⵠΔⵠᐃⵠ || ᐃⲆᐃⵠ === 0) {
			Δ.rotate(this.angle);
			this.ᐃΔⵠⲆ.ΔⵠΔ();
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ΔΔⲆⵠΔΔᐃ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃΔΔ][ⵠⲆΔ.time];
			var ᐃΔΔ = this.ᐃΔⵠⲆ.ⵠΔΔ * -ⵠⵠ.width;
			var ΔⵠⲆ = this.ᐃΔⵠⲆ.ⵠΔΔ * -ⵠⵠ.height;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2 + Ⲇᐃ, -ΔⵠⲆ / ⲆᐃᐃⲆ + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ)
		} else {
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ᐃⲆΔⵠΔᐃᐃ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ΔΔᐃΔⵠᐃᐃ][ⵠⲆΔ.time];
			Δ.translate(0, ⵠⵠ.height / 2);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ - ⵠⵠ.width / 2, -ⵠⵠ.height + ⲆⲆⲆ)
		}
		Δ.restore()
	}

	function ⲆᐃⵠⵠΔᐃⵠⵠᐃ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.ⵠᐃⵠⵠⵠ.ΔⵠΔ();
		ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠⲆⲆⵠⵠᐃ][ⵠⲆΔ.time];
		ᐃΔΔ = this.ⵠᐃⵠⵠⵠ.ⵠΔΔ * -ⵠⵠ.width;
		ΔⵠⲆ = this.ⵠᐃⵠⵠⵠ.ⵠΔΔ * -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ᐃΔⲆᐃⲆΔΔⲆᐃ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (300 < ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r)) this.scale = Math.min(this.scale + ᐃⵠᐃⵠ / 2, 1.8);
		else this.scale = Math.max(this.scale - ᐃⵠᐃⵠ, 1);
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		this.rotate.ΔⵠΔ();
		ΔᐃⲆⲆ === this.info ? ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆᐃᐃⵠ][ⵠⲆΔ.time] : ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃⵠᐃⵠⵠΔ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
		ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⵠΔᐃⲆ, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			if (this.ΔΔᐃ.ΔⵠΔ() && false == this.ΔΔᐃ.ⵠΔⲆ) this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ;
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠΔᐃⲆᐃⲆ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⲆⲆⲆΔ, -ΔⵠⲆ / ⵠⵠⵠᐃⲆ, ᐃΔΔ / 2, ΔⵠⲆ / ᐃᐃΔⵠ);
			Δ.globalAlpha = 1
		}
		this.info === ⵠΔⵠᐃ ? ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆⲆⲆⵠⵠⲆ][ⵠⲆΔ.time] : ⵠⵠ = ᐃᐃ[ⵠ.ᐃⲆⵠΔⵠⵠⵠ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
		ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height * this.scale;
		Δ.save();
		Δ.translate(-40 * Ⲇ, Ⲇ * ΔⲆΔΔᐃ);
		Δ.rotate(this.rotate.ⵠΔΔ);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇ * -ᐃΔΔ / ⵠⲆᐃⲆ, -ΔⵠⲆ * Ⲇ / ᐃΔΔΔⲆ, ᐃΔΔ / ⵠⲆᐃⵠ, ΔⵠⲆ / 2);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.Δⵠⵠⵠᐃⵠⵠ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / ΔᐃᐃΔ, -ΔⵠⲆ * Ⲇ / ΔᐃⲆᐃⵠ, ᐃΔΔ / ⵠⲆΔᐃ, ΔⵠⲆ / 2);
			Δ.globalAlpha = 1
		}
		Δ.restore();
		ⵠⵠⵠ === this.info ? ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠΔⵠⵠⲆⵠ][ⵠⲆΔ.time] : ⵠⵠ = ᐃᐃ[ⵠ.ⵠΔᐃΔᐃΔⲆ][ⵠⲆΔ.time];
		Δ.save();
		Δ.translate(Ⲇ * 40, ΔⵠⲆᐃΔ * Ⲇ);
		Δ.rotate(-this.rotate.ⵠΔΔ);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇ * -ᐃΔΔ / ΔΔΔⵠ, -ΔⵠⲆ * Ⲇ / ΔⵠⲆⵠᐃ, ᐃΔΔ / 2, ΔⵠⲆ / ⲆΔΔⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠᐃⲆ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / 4, -ΔⵠⲆ * Ⲇ / ᐃΔⵠᐃⲆ, ᐃΔΔ / 2, ΔⵠⲆ / 2);
			Δ.globalAlpha = ΔΔⵠ
		}
		Δ.restore();
		Δ.restore()
	}

	function ⲆⲆⲆᐃΔᐃⲆᐃΔ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.ⵠᐃⵠⵠⵠ.ΔⵠΔ();
		ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠΔⲆⲆΔᐃ][ⵠⲆΔ.time];
		ᐃΔΔ = this.ⵠᐃⵠⵠⵠ.ⵠΔΔ * -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠⵠⵠ.ⵠΔΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⵠΔΔΔ, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ⵠΔⵠⲆⲆⵠⵠⲆⵠ() {
		if ((this.info & 1) === 1) this.ΔΔⲆΔⵠ = Math.min(this.ΔΔⲆΔⵠ + ᐃⵠᐃⵠ, 2.2);
		else {
			this.ΔΔⲆΔⵠ = Math.max(this.ΔΔⲆΔⵠ - ᐃⵠᐃⵠ, 0);
			this.ⵠⲆⲆⲆᐃⵠΔ += ᐃⵠᐃⵠ;
			if (.1 < this.ⵠⲆⲆⲆᐃⵠΔ) {
				this.ⵠⲆⲆⲆᐃⵠΔ = 0;
				var ᐃΔⵠⲆ = {
					x: this.x + Math.random() * 60 - 30,
					y: this.y + Math.random() * 60 - 30,
					a: ⵠΔΔⲆ,
					r: Math.random() * 30 + 30
				};
				this.ᐃΔⵠⲆ.push(ᐃΔⵠⲆ)
			}
		}
		for (var ᐃⲆ = 0; ᐃⲆ < this.ᐃΔⵠⲆ.length; ᐃⲆ++) {
			var ᐃΔⵠⲆ = this.ᐃΔⵠⲆ[ᐃⲆ];
			Δ.save();
			Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + ᐃΔⵠⲆ.x, ⲆΔⵠ.ⲆⵠΔ.y + ᐃΔⵠⲆ.y);
			ᐃΔⵠⲆ.a = Math.min(ᐃⵠᐃᐃ, ᐃΔⵠⲆ.a + ᐃⵠᐃⵠ / 2);
			var ΔᐃⵠΔ = ᐃΔⵠⲆ.a;
			if (ΔᐃⵠΔ < .2) ΔᐃⵠΔ *= ⵠᐃⵠᐃΔ;
			else if (ΔᐃⵠΔ > .8) ΔᐃⵠΔ = (1 - ΔᐃⵠΔ) * ⵠⲆⲆⲆ;
			else ΔᐃⵠΔ = ᐃⵠⵠⵠ;
			Δ.globalAlpha = ΔᐃⵠΔ * .8;
			ⵠΔᐃ(Δ, Ⲇⵠⵠᐃ, 0, ᐃΔⵠⲆ.r);
			ⵠᐃ(Δ, ⵠ.ⵠⵠᐃᐃΔⵠΔ[ⵠⲆΔ.time]);
			Δ.restore();
			if (1 === ᐃΔⵠⲆ.a) {
				this.ᐃΔⵠⲆ.splice(ᐃⲆ, ⵠⲆⵠⲆ);
				ᐃⲆ--
			}
		}
	}

	function ⵠᐃᐃⵠⵠⵠⲆᐃⲆ(ΔΔ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.ᐃΔⵠⲆ.ΔⵠΔ();
		Δ.globalAlpha = .3;
		var ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃᐃᐃⵠΔΔ][ⵠⲆΔ.time];
		var ᐃΔΔ = -ⵠⵠ.width * this.ᐃΔⵠⲆ.ⵠΔΔ;
		var ΔⵠⲆ = -ⵠⵠ.height * this.ᐃΔⵠⲆ.ⵠΔΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ⵠⲆΔᐃ, ᐃΔΔ, ΔⵠⲆ);
		Δ.globalAlpha = 1;
		if (this.ΔΔᐃ.ΔⵠΔ) {
			if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == false) this.ΔΔᐃ.ΔⵠΔ = false;
			var ⵠΔΔ = Ⲇ * (ᐃⵠᐃⵠ * (ΔΔΔᐃ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = ᐃⲆΔᐃ
		}
		ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ⲆᐃᐃⲆ + Ⲇᐃ, -ⵠⵠ.height / ᐃᐃⵠⵠ + ⲆⲆⲆ);
		Δ.restore()
	}

	function ⲆΔⵠⵠΔᐃᐃΔΔ() {
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && false == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ && (this.ΔΔᐃ.ΔⵠΔ = false);
			var ⵠΔΔ = 600 * (ᐃⵠᐃⵠ * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ)) * Ⲇ;
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = Ⲇⵠⵠᐃ
		}
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x + Ⲇᐃ, ⲆΔⵠ.ⲆⵠΔ.y + this.y + ⲆⲆⲆ);
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆΔⵠᐃ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ⵠⲆᐃⵠ, -ⵠⵠ.height / 2);
		Δ.restore()
	}

	function ⲆᐃⲆⵠⵠⵠⵠⵠᐃ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == ΔΔᐃΔⵠ) this.ΔΔᐃ.ΔⵠΔ = ⲆᐃΔᐃⵠ;
			var ⵠΔΔ = 600 * (ᐃⵠᐃⵠ * (ᐃⵠⵠⵠ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ)) * Ⲇ;
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = 0
		}
		var ᐃⲆᐃⵠ = this.info & 15;
		if (this.info === 10 || ᐃⲆᐃⵠ === ⵠⵠΔΔ) {
			Δ.rotate(this.angle);
			this.ᐃΔⵠⲆ.ΔⵠΔ();
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃⲆᐃⲆⵠⵠ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ᐃⵠᐃΔⲆᐃᐃ][ⵠⲆΔ.time];
			var ᐃΔΔ = -ⵠⵠ.width * this.ᐃΔⵠⲆ.ⵠΔΔ;
			var ΔⵠⲆ = this.ᐃΔⵠⲆ.ⵠΔΔ * -ⵠⵠ.height;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2 + Ⲇᐃ, -ΔⵠⲆ / ᐃᐃⵠⵠ + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ)
		} else {
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆΔⵠⵠᐃᐃ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.Ⲇᐃᐃⵠⵠ][ⵠⲆΔ.time];
			Δ.translate(ᐃⲆΔ, ⵠⵠ.height / ΔⲆⵠΔ);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ - ⵠⵠ.width / 2, -ⵠⵠ.height + ⲆⲆⲆ)
		}
		Δ.restore()
	}

	function ⲆⵠⲆᐃΔᐃⲆⲆⵠ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.ᐃⵠΔΔⲆ.ΔⵠΔ();
		ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆⲆΔᐃ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ᐃⵠΔΔⲆ.ⵠΔΔ;
		ΔⵠⲆ = this.ᐃⵠΔΔⲆ.ⵠΔΔ * -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / Ⲇᐃⵠⵠ, ᐃΔΔ, ΔⵠⲆ);
		this.ⵠᐃⵠⵠⵠ.ΔⵠΔ();
		ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠΔⲆΔⵠⲆ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠⵠⵠ.ⵠΔΔ;
		ΔⵠⲆ = this.ⵠᐃⵠⵠⵠ.ⵠΔΔ * -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⵠΔⵠⲆ, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ⲆⲆΔⵠΔⲆⲆⲆⲆ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ΔᐃΔΔᐃ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ && (this.ΔΔᐃ.ΔⵠΔ = Ⲇⵠᐃⵠᐃ);
			var ⵠΔΔ = Ⲇ * ((ⲆⵠΔΔ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * ᐃⵠᐃⵠ * 600);
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = ΔᐃⲆⲆ;
			var ⲆⲆⲆ = 0
		}
		ⵠΔΔⲆ === this.info ? ⵠⵠ = ᐃᐃ[ⵠ.ΔΔⵠΔΔ][ⵠⲆΔ.time] : ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃ][ⵠⲆΔ.time][this.info - ᐃΔΔⲆ];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ⲆᐃᐃⲆ + Ⲇᐃ, -ⵠⵠ.height / ᐃⲆⵠᐃ + ⲆⲆⲆ);
		Δ.restore()
	}

	function ΔⲆⵠⵠᐃΔΔⵠⵠ(ᐃⵠⲆ) {
		if (ᐃⵠⲆ.right >= ⵠᐃΔ) {
			switch (ᐃⵠⲆ.right) {
				case ⵠ.ᐃᐃⲆⵠⲆ:
					Δ.save();
					var ⲆᐃⵠᐃⲆⵠⵠ = -ⵠⵠΔⲆ * ᐃⵠⲆ.attack.ⵠΔΔ / Math.PI;
					if (ᐃⵠⲆ.attack.ⵠΔⲆ) var ⵠⵠⲆΔᐃΔΔ = -Math.PI / ᐃᐃΔΔ - (Math.PI / ᐃΔΔΔ + ᐃⵠⲆ.attack.ⵠΔΔ) / 3;
					else var ⵠⵠⲆΔᐃΔΔ = ᐃⵠⲆ.attack.ⵠΔΔ;
					Δ.rotate(ᐃⵠⲆ.angle - Math.PI / 2 + ⵠⵠⲆΔᐃΔΔ);
					Δ.globalAlpha = ⲆᐃⵠᐃⲆⵠⵠ / 1.2;
					ⵠΔᐃ(Δ, Ⲇ * -40, Ⲇ * 90, Ⲇ * ⲆΔⲆᐃᐃ);
					ⵠᐃ(Δ, ᐃ[482]);
					Δ.globalAlpha = ⲆᐃⵠᐃⲆⵠⵠ / 1.2;
					ⵠΔᐃ(Δ, Ⲇ * -52, ⵠΔᐃᐃⲆ * Ⲇ, 8 * Ⲇ);
					ⵠᐃ(Δ, ᐃ[482]);
					Δ.globalAlpha = ⲆᐃⵠᐃⲆⵠⵠ / 1.2;
					ⵠΔᐃ(Δ, Ⲇ * -30, Ⲇ * 95, Ⲇ * ΔⲆⵠΔⲆ);
					ⵠᐃ(Δ, ᐃ[482]);
					Δ.globalAlpha = 1;
					Δ.restore();
					break;
				case ⵠ.ᐃⵠⵠⵠⵠ:
				case ⵠ.ⵠⵠⲆⲆΔ:
				case ⵠ.ⵠᐃᐃΔⵠ:
				case ⵠ.ⲆΔⵠᐃⲆ:
					if (ᐃⵠⲆ.ⲆΔⲆⲆⵠⵠⵠ === 1) break;
					if (ⵠΔⵠᐃ < ᐃⵠⲆ.ΔΔⵠⵠⵠ) var ΔΔ = ⵠ.ᐃⵠᐃⵠΔⲆⲆ[ⵠⲆΔ.time];
					else if (ⵠⵠⲆΔ < ᐃⵠⲆ.ᐃᐃⵠⲆⵠⲆΔ || ᐃⵠⲆ.ᐃⵠΔᐃⲆ > 0) var ΔΔ = ⵠ.ᐃⲆᐃⲆⲆΔΔ[ⵠⲆΔ.time];
					else var ΔΔ = ⵠ.ⵠΔⲆᐃᐃΔΔ[ⵠⲆΔ.time];
					var ⲆᐃⵠᐃⲆⵠⵠ = ᐃⵠⲆ.attack.ⵠΔΔ * -3 / Math.PI;
					if (ᐃⵠⲆ.attack.ⵠΔⲆ) var ⵠⵠⲆΔᐃΔΔ = Math.max(.5 - ⲆᐃⵠᐃⲆⵠⵠ / 2 + .5, 0);
					else var ⵠⵠⲆΔᐃΔΔ = Math.max(ⲆᐃⵠᐃⲆⵠⵠ / ⲆΔⲆΔ, 0);
					ⵠⵠⲆΔᐃΔΔ === 0 && (ᐃⵠⲆ.ΔᐃᐃⲆⵠᐃᐃ = ᐃⵠⲆ.angle);
					Δ.save();
					Δ.rotate(ᐃⵠⲆ.ΔᐃᐃⲆⵠᐃᐃ - Math.PI / ᐃᐃⲆⵠ);
					Δ.globalAlpha = ⲆᐃⵠᐃⲆⵠⵠ;
					var ᐃΔⵠᐃⲆΔⲆ = 25 * Ⲇ + 25 * ⵠⵠⲆΔᐃΔΔ;
					ⵠΔᐃ(Δ, ᐃΔⵠᐃⲆΔⲆ, Ⲇ * 80, Ⲇ * 15);
					ⵠᐃ(Δ, ΔΔ);
					ⵠΔᐃ(Δ, -ᐃΔⵠᐃⲆΔⲆ, Ⲇ * 80, Ⲇ * ΔᐃΔⵠᐃ);
					ⵠᐃ(Δ, ΔΔ);
					Δ.globalAlpha = ⵠⲆⵠⲆ;
					Δ.restore();
					break
			}
		}
	}

	function ⲆⲆΔᐃⵠⲆⲆⲆᐃ() {
		var ⲆΔⵠΔᐃ = Math.PI / ⵠΔⵠⲆ;
		var ⲆΔᐃΔⵠΔⵠ = Math.PI / 4;
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		this.ΔⲆΔΔᐃᐃⵠ.ΔⵠΔ();
		this.ⲆᐃΔⲆΔΔⲆ.ΔⵠΔ();
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (ⲆᐃΔⵠ === this.info) ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠⵠⲆΔ][ⵠⲆΔ.time];
		else ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃⲆⲆᐃΔⵠ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
		ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == ⵠⲆᐃⵠⵠ && (this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ);
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃⲆⵠⲆΔⵠ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⵠΔⵠⲆ, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = 1
		}
		if (this.action & ᐃⵠⲆⵠ.ⲆⲆᐃᐃᐃ) {
			this.ᐃΔᐃⵠⵠ.ΔⵠΔ() && ΔΔⲆᐃᐃ == this.ᐃΔᐃⵠⵠ.ⵠΔⲆ && (this.action -= ᐃⵠⲆⵠ.ⲆⲆᐃᐃᐃ);
			Δ.globalAlpha = .6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠΔᐃΔⲆⵠⲆ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ᐃᐃΔⵠ, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = 1
		}
		Δ.restore();
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle + ⲆΔᐃΔⵠΔⵠ);
		Δ.translate(100, 0);
		Δ.rotate(ⲆΔⵠΔᐃ);
		ⵠᐃΔ === this.info ? ⵠⵠ = ᐃᐃ[ⵠ.ᐃⵠⲆⲆΔΔⲆ][ⵠⲆΔ.time] : ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆⲆⵠⵠⲆⵠ][ⵠⲆΔ.time];
		ᐃΔΔ = this.ΔⲆΔΔᐃᐃⵠ.ⵠΔΔ * -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height * this.ΔⲆΔΔᐃᐃⵠ.ⵠΔΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ᐃⲆⵠᐃ, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃⲆΔⲆⵠΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ᐃᐃⵠⵠ, -ΔⵠⲆ / ΔⵠⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = 1
		}
		if (this.action & ᐃⵠⲆⵠ.ⲆⲆᐃᐃᐃ) {
			Δ.globalAlpha = .6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔⵠᐃⵠᐃⵠ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = 1
		}
		Δ.restore();
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle + ⲆΔⵠΔᐃ + ⲆΔᐃΔⵠΔⵠ);
		Δ.translate(ⵠⵠΔΔᐃ, 0);
		Δ.rotate(ⲆΔⵠΔᐃ);
		this.info === 0 ? ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠⵠᐃⵠⵠⵠ][ⵠⲆΔ.time] : ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆΔᐃᐃⵠᐃ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⲆᐃΔⲆΔΔⲆ.ⵠΔΔ;
		ΔⵠⲆ = this.ⲆᐃΔⲆΔΔⲆ.ⵠΔΔ * -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ⵠⲆᐃⵠ, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆΔΔⵠⲆᐃ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⵠΔΔΔ, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = 1
		}
		if (this.action & ᐃⵠⲆⵠ.ⲆⲆᐃᐃᐃ) {
			Δ.globalAlpha = .6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃⲆᐃΔⲆⵠΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = 1
		}
		Δ.restore()
	}

	function ⲆΔΔΔⲆⵠⵠΔᐃ() {
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.info === 0 ? ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔⵠⲆⵠ][ⵠⲆΔ.time] : ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔΔⵠΔΔⵠ][ⵠⲆΔ.time];
		ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.width;
		ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ᐃᐃⵠⵠ, -ΔⵠⲆ / ⵠⲆΔᐃ, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			if (this.ΔΔᐃ.ΔⵠΔ() && ΔᐃΔΔᐃ == this.ΔΔᐃ.ⵠΔⲆ) this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ;
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆΔⵠΔⵠΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ᐃⵠΔⲆ, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = ᐃΔΔⲆ
		}
		Δ.restore()
	}

	function ⵠⵠΔᐃᐃᐃΔΔΔ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.ᐃΔⵠⲆ.ΔⵠΔ();
		Δ.globalAlpha = .3;
		var ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃᐃᐃⵠΔΔ][ⵠⲆΔ.time];
		var ᐃΔΔ = this.ᐃΔⵠⲆ.ⵠΔΔ * -ⵠⵠ.width;
		var ΔⵠⲆ = this.ᐃΔⵠⲆ.ⵠΔΔ * -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
		Δ.globalAlpha = 1;
		Δ.restore()
	}

	function ᐃΔᐃⵠⲆⵠᐃΔᐃ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		var ⲆⵠⲆⲆ = ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r);
		if (350 < ⲆⵠⲆⲆ) this.scale = Math.min(this.scale + ᐃⵠᐃⵠ / 2, 1.8);
		else this.scale = Math.max(this.scale - ᐃⵠᐃⵠ, ᐃⵠᐃᐃ);
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		this.rotate.ΔⵠΔ();
		350 > ⲆⵠⲆⲆ ? this.ΔᐃⵠΔ = Math.max(0, this.ΔᐃⵠΔ - ᐃⵠᐃⵠ * 2.2) : this.ΔᐃⵠΔ = Math.min(ⲆⵠΔΔ, this.ΔᐃⵠΔ + 2.2 * ᐃⵠᐃⵠ);
		ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠᐃⲆⵠᐃⲆ][ⵠⲆΔ.time];
		ᐃΔΔ = this.scale * (-ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ);
		ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height * this.scale;
		Δ.globalAlpha = 1 - this.ΔᐃⵠΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ΔⵠⲆⵠᐃ, -ΔⵠⲆ / ΔΔΔⵠ, ᐃΔΔ / 2, ΔⵠⲆ / ᐃⵠΔⲆ);
		ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃⲆⲆⲆΔᐃ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
		ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
		Δ.globalAlpha = this.ΔᐃⵠΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 4, -ΔⵠⲆ / ΔⲆⲆⲆ, ᐃΔΔ / 2, ΔⵠⲆ / ⲆᐃᐃⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			this.ΔΔᐃ.ΔⵠΔ() && ⲆⵠΔΔⵠ == this.ΔΔᐃ.ⵠΔⲆ && (this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ);
			Δ.globalAlpha = (.6 - this.ΔΔᐃ.ⵠΔΔ) * (ⲆⵠΔΔ - this.ΔᐃⵠΔ);
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔΔⵠᐃΔᐃ];
			ᐃΔΔ = this.scale * (-ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ);
			ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ᐃΔⵠᐃⲆ, -ΔⵠⲆ / ΔΔΔⵠ, ᐃΔΔ / ΔΔⵠⲆ, ΔⵠⲆ / ⵠⲆᐃⵠ);
			Δ.globalAlpha = (.6 - this.ΔΔᐃ.ⵠΔΔ) * this.ΔᐃⵠΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆΔⵠᐃᐃⵠ];
			ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.width * this.scale;
			ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / ᐃⲆⵠᐃ);
			Δ.globalAlpha = ⲆⵠΔΔ
		}
		ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆⵠΔⵠᐃΔ][ⵠⲆΔ.time];
		ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.width * this.scale;
		ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
		Δ.save();
		Δ.translate(Ⲇ * -40, 80 * Ⲇ);
		Δ.rotate(this.rotate.ⵠΔΔ);
		Δ.globalAlpha = this.ΔᐃⵠΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / ᐃⵠⵠⲆ, Ⲇ * -ΔⵠⲆ / ᐃᐃᐃᐃΔ, ᐃΔΔ / 2, ΔⵠⲆ / ⲆᐃᐃⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = this.ΔᐃⵠΔ * (.6 - this.ΔΔᐃ.ⵠΔΔ);
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠᐃΔⲆΔΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / 4, -ΔⵠⲆ * Ⲇ / 4, ᐃΔΔ / ᐃᐃⲆⵠ, ΔⵠⲆ / 2);
			Δ.globalAlpha = ΔⲆⵠⲆ
		}
		Δ.restore();
		ⵠⵠ = ᐃᐃ[ⵠ.ΔΔⲆᐃⲆΔΔ][ⵠⲆΔ.time];
		Δ.save();
		Δ.translate(Ⲇ * 40, Ⲇ * 80);
		Δ.rotate(-this.rotate.ⵠΔΔ);
		Δ.globalAlpha = this.ΔᐃⵠΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / 4, -ΔⵠⲆ * Ⲇ / 4, ᐃΔΔ / 2, ΔⵠⲆ / ⲆΔⲆΔ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = this.ΔᐃⵠΔ * (.6 - this.ΔΔᐃ.ⵠΔΔ);
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠⲆⵠⲆⲆΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / 4, -ΔⵠⲆ * Ⲇ / ᐃᐃᐃᐃΔ, ᐃΔΔ / 2, ΔⵠⲆ / ᐃⲆⵠᐃ);
			Δ.globalAlpha = ΔᐃⵠⲆ
		}
		Δ.globalAlpha = 1;
		Δ.restore();
		Δ.restore()
	}

	function ⲆⲆΔⵠⲆⲆⲆⲆᐃ(ΔΔ, ᐃⵠΔΔΔⵠᐃⲆⵠ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (ⵠ.ΔΔⵠⵠΔ === ΔΔ) {
			ΔΔ = ⵠ.ΔⵠΔⵠⵠ;
			this.info = 36
		}
		ⵠⵠ = ᐃᐃ[ΔΔ][this.info][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width / 2;
		ΔⵠⲆ = -ⵠⵠ.height / ⵠᐃᐃⲆ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⲆΔⲆΔ, -ΔⵠⲆ / ᐃᐃⲆⵠ, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			if (this.ΔΔᐃ.ΔⵠΔ() && ᐃΔᐃⲆΔ == this.ΔΔᐃ.ⵠΔⲆ) this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ;
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ᐃⵠᐃΔΔⲆⲆ = ⲆⲆⲆᐃⵠⲆⵠ(this.info, ⵠⵠ, ΔᐃΔⲆᐃᐃⵠΔᐃ);
			ⵠΔⲆⲆ(Δ, ᐃⵠᐃΔΔⲆⲆ, -ᐃΔΔ / 2, -ΔⵠⲆ / ᐃᐃⵠⵠ, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = ΔᐃⵠⲆ
		}
		Δ.restore()
	}

	function ᐃΔΔⲆᐃⲆᐃᐃⲆ() {
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && false == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ && (this.ΔΔᐃ.ΔⵠΔ = false);
			var ⵠΔΔ = Ⲇ * (ᐃⵠᐃⵠ * (ⵠⲆⵠⲆ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600);
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = ᐃⲆΔᐃ
		}
		this.ⵠⲆΔⵠᐃᐃᐃ = (this.ⵠⲆΔⵠᐃᐃᐃ + 3 * ᐃⵠᐃⵠ) % (ᐃᐃⲆⵠ * Math.PI);
		this.ⵠⲆⲆᐃⲆⲆᐃ = (this.ⵠⲆⲆᐃⲆⲆᐃ - ᐃⵠᐃⵠ * ᐃΔᐃⲆ) % (Math.PI * 2);
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x + Ⲇᐃ, ⲆΔⵠ.ⲆⵠΔ.y + this.y + ⲆⲆⲆ);
		Δ.save();
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠᐃΔΔ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ᐃᐃⲆⵠ);
		Δ.restore();
		Δ.save();
		Δ.rotate(this.ⵠⲆΔⵠᐃᐃᐃ);
		ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃᐃⲆΔⵠΔ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ᐃⲆⵠᐃ, -ⵠⵠ.height / 2);
		Δ.restore();
		Δ.save();
		Δ.rotate(this.ⵠⲆⲆᐃⲆⲆᐃ);
		ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠᐃⲆᐃⲆᐃ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ᐃᐃⲆⵠ);
		Δ.restore();
		Δ.restore()
	}

	function ⲆᐃΔΔᐃᐃᐃⲆΔ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		var ⲆⵠⲆⲆ = ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r);
		ⲆⵠⲆⲆ > 350 ? this.scale = Math.min(this.scale + ᐃⵠᐃⵠ / 2, 1.8) : this.scale = Math.max(this.scale - ᐃⵠᐃⵠ, 1);
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		this.rotate.ΔⵠΔ();
		if (ⲆⵠⲆⲆ < 350) this.ΔᐃⵠΔ = Math.max(Ⲇⵠᐃ, this.ΔᐃⵠΔ - 2.2 * ᐃⵠᐃⵠ);
		else this.ΔᐃⵠΔ = Math.min(ᐃⵠᐃᐃ, this.ΔᐃⵠΔ + ᐃⵠᐃⵠ * 2.2);
		if (ⵠⵠᐃ === (this.info & 1)) ⵠⵠ = ᐃᐃ[ⵠ.ᐃⲆⲆⵠⲆⲆᐃ][ⵠⲆΔ.time];
		else ⵠⵠ = ᐃᐃ[ⵠ.ᐃⲆⵠΔⵠΔⲆ][ⵠⲆΔ.time];
		ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.width * this.scale;
		ΔⵠⲆ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height);
		Δ.globalAlpha = ⲆⲆᐃⵠ - this.ΔᐃⵠΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 4, -ΔⵠⲆ / ᐃᐃΔⵠⲆ, ᐃΔΔ / ᐃⵠΔⲆ, ΔⵠⲆ / 2);
		(this.info & 1) === 0 ? ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃⲆΔᐃ][ⵠⲆΔ.time] : ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃⵠΔⵠⲆⲆ][ⵠⲆΔ.time];
		ᐃΔΔ = this.scale * (-ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ);
		ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
		Δ.globalAlpha = this.ΔᐃⵠΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 4, -ΔⵠⲆ / ⲆⲆⲆΔ, ᐃΔΔ / 2, ΔⵠⲆ / 2);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == false && (this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ);
			Δ.globalAlpha = (1 - this.ΔᐃⵠΔ) * (.6 - this.ΔΔᐃ.ⵠΔΔ);
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃⵠΔⲆᐃⲆ];
			ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.width * this.scale;
			ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height * this.scale;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ΔΔⲆΔ, -ΔⵠⲆ / ΔΔᐃⵠΔ, ᐃΔΔ / 2, ΔⵠⲆ / 2);
			Δ.globalAlpha = this.ΔᐃⵠΔ * (.6 - this.ΔΔᐃ.ⵠΔΔ);
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃⵠⲆΔⵠⲆΔ];
			ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
			ΔⵠⲆ = this.scale * (-ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ΔΔΔⵠ, -ΔⵠⲆ / ᐃΔⵠᐃⲆ, ᐃΔΔ / 2, ΔⵠⲆ / ᐃᐃⵠⵠ);
			Δ.globalAlpha = 1
		}
		if (0 === (this.info & 1)) ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆΔⲆΔⲆΔ][ⵠⲆΔ.time];
		else ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆⲆⲆⵠᐃⵠ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
		ΔⵠⲆ = this.scale * (-ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ);
		Δ.save();
		Δ.translate(Ⲇ * -ⵠⲆⵠΔⲆ, Ⲇ * ⲆⲆᐃⲆ);
		Δ.rotate(this.rotate.ⵠΔΔ);
		Δ.globalAlpha = this.ΔᐃⵠΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / 4, Ⲇ * -ΔⵠⲆ / ⵠⵠⵠᐃⲆ, ᐃΔΔ / ΔⲆⵠΔ, ΔⵠⲆ / ⵠΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = this.ΔᐃⵠΔ * (.6 - this.ΔΔᐃ.ⵠΔΔ);
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠⵠⵠᐃΔΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / 4, -ΔⵠⲆ * Ⲇ / ⵠⵠⵠᐃⲆ, ᐃΔΔ / 2, ΔⵠⲆ / 2);
			Δ.globalAlpha = ᐃⲆⲆ
		}
		Δ.restore();
		if (0 === (this.info & ᐃΔⵠΔ)) ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆⵠⵠⲆΔⲆ][ⵠⲆΔ.time];
		else ⵠⵠ = ᐃᐃ[ⵠ.ΔΔⵠⲆⵠᐃΔ][ⵠⲆΔ.time];
		Δ.save();
		Δ.translate(Ⲇ * 20, ⵠΔⵠᐃ * Ⲇ);
		Δ.rotate(-this.rotate.ⵠΔΔ);
		Δ.globalAlpha = this.ΔᐃⵠΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / 4, -ΔⵠⲆ * Ⲇ / 4, ᐃΔΔ / ΔΔᐃⲆⵠ, ΔⵠⲆ / 2);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = (.6 - this.ΔΔᐃ.ⵠΔΔ) * this.ΔᐃⵠΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠΔⲆᐃᐃΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ * Ⲇ / ᐃᐃⵠΔ, -ΔⵠⲆ * Ⲇ / ΔΔᐃⵠΔ, ᐃΔΔ / 2, ΔⵠⲆ / ᐃᐃⵠⵠ);
			Δ.globalAlpha = ⵠᐃᐃ
		}
		Δ.globalAlpha = 1;
		Δ.restore();
		Δ.restore()
	}

	function ⲆΔⲆⵠⲆⲆⲆΔΔ() {
		if (10 === this.info) return;
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == Ⲇⵠᐃⵠᐃ && (this.ΔΔᐃ.ΔⵠΔ = ⵠᐃΔΔᐃ);
			var ⵠΔΔ = 600 * ((ⲆⲆΔⵠ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * ᐃⵠᐃⵠ) * Ⲇ;
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = ⲆⲆᐃ;
			var ⲆⲆⲆ = 0
		}
		if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔᐃᐃΔⲆΔ][ⵠⲆΔ.time];
		else var ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃⵠⵠ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2 + Ⲇᐃ, -ⵠⵠ.width / ⵠᐃᐃⲆ + ⲆⲆⲆ);
		Δ.restore();
		var ᐃⲆᐃⵠ = this.info & 15;
		for (var ᐃⲆ = Ⲇⵠᐃ; ᐃⲆ < ᐃⲆᐃⵠ; ᐃⲆ++) this.ΔΔⵠΔ[ᐃⲆ].ᐃⵠΔᐃ(ⵠ.ⵠⲆⲆᐃⲆ)
	}

	function ⵠⵠⵠᐃΔΔΔⵠΔ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		300 < ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r) ? this.scale = Math.min(this.scale + ᐃⵠᐃⵠ / ᐃⲆⵠᐃ, 1.8) : this.scale = Math.max(this.scale - ᐃⵠᐃⵠ, 1);
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		this.rotate.ΔⵠΔ();
		ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠΔᐃⲆ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ * this.scale;
		ΔⵠⲆ = this.scale * (this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ⲆΔΔⲆ, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			if (this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == ⲆⲆΔΔᐃ) this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ;
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆⵠⵠⵠᐃⲆ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ΔΔⵠⲆ, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = ᐃΔΔⲆ
		}
		ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔⲆⲆᐃⲆⵠ][ⵠⲆΔ.time];
		ᐃΔΔ = this.scale * (-ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ);
		ΔⵠⲆ = this.scale * (-ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ);
		Δ.save();
		Δ.translate(Ⲇ * -30, 70 * Ⲇ);
		Δ.rotate(this.rotate.ⵠΔΔ);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -10 * Ⲇ, Ⲇ * -40, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆⲆⲆᐃᐃⲆ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -10 * Ⲇ, Ⲇ * -40, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = ⵠᐃᐃ
		}
		Δ.restore();
		ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃΔⲆⲆⵠΔ][ⵠⲆΔ.time];
		Δ.save();
		Δ.translate(30 * Ⲇ, Ⲇ * 70);
		Δ.rotate(-this.rotate.ⵠΔΔ);
		ⵠΔⲆⲆ(Δ, ⵠⵠ, ⵠΔΔᐃᐃ * Ⲇ - ᐃΔΔ, -40 * Ⲇ, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆΔⲆᐃΔΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⲆᐃⵠ * Ⲇ - ᐃΔΔ, Ⲇ * -40, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = 1
		}
		Δ.restore();
		Δ.restore()
	}

	function ᐃⵠⲆⲆⵠⵠⵠⵠΔ() {
		if (this.ΔΔᐃ.ΔⵠΔ) {
			var ⵠΔΔ = 600 * ((ᐃΔΔⲆ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * ᐃⵠᐃⵠ) * Ⲇ;
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = ⵠΔΔⲆ
		}
		if (this.info & 255 && 65280 != (this.info & 65280)) this.rotate = (this.rotate + .5 * ᐃⵠᐃⵠ) % (Math.PI * Ⲇᐃⵠⵠ);
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x + Ⲇᐃ, ⲆΔⵠ.ⲆⵠΔ.y + this.y + ⲆⲆⲆ);
		Δ.save();
		Δ.rotate(this.rotate);
		ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠΔⲆΔᐃⲆ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ⵠᐃᐃⲆ);
		Δ.restore();
		Δ.save();
		Δ.rotate(this.ⲆⲆⲆᐃΔⵠΔⲆⲆ);
		ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔⵠΔⵠⵠΔ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
		Δ.restore();
		Δ.restore()
	}

	function ⵠⲆΔⲆⵠΔᐃⲆⵠ() {
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.info === 0) ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆⵠⵠⵠ][ⵠⲆΔ.time];
		else ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃⲆΔ][ⵠⲆΔ.time];
		ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.width;
		ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ⵠⵠᐃⲆ, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			if (this.ΔΔᐃ.ΔⵠΔ() && false == this.ΔΔᐃ.ⵠΔⲆ) this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ;
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃᐃΔΔΔΔⵠ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⲆΔΔⲆ, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = 1
		}
		Δ.restore()
	}

	function ⲆⲆᐃⵠⵠΔⲆ(ΔΔ, ᐃⵠᐃΔΔⲆⲆ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
		ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ⵠΔⵠⲆ, ᐃΔΔ, ΔⵠⲆ);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			if (this.ΔΔᐃ.ΔⵠΔ() && ᐃⲆⵠᐃⵠ == this.ΔΔᐃ.ⵠΔⲆ) this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ;
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ᐃⵠᐃΔΔⲆⲆ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ᐃⵠΔⲆ, ᐃΔΔ, ΔⵠⲆ);
			Δ.globalAlpha = ᐃΔΔⲆ
		}
		Δ.restore()
	}

	function ᐃⲆⵠⲆⲆⲆᐃⲆⲆ(ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ΔΔ, ᐃᐃⲆ, ⲆᐃΔΔ, ᐃⲆⲆⲆ, ⲆⵠⵠⲆⲆ) {
		if (ΔⲆⲆⲆᐃ === ᐃⲆⲆⲆ) ᐃⲆⲆⲆ = ⵠⵠΔΔ;
		for (var ᐃⲆ = ΔⲆⲆᐃ; ᐃⲆ <= ΔⲆⲆⵠ; ᐃⲆ++) {
			for (var ⲆⲆⲆⵠ = ⲆᐃⵠⲆ; ⲆⲆⲆⵠ <= ᐃᐃΔᐃ; ⲆⲆⲆⵠ++) {
				var Δᐃⵠⵠ = ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ];
				if (undefined === Δᐃⵠⵠ || Δᐃⵠⵠ[ᐃᐃⲆ] === ⵠⵠᐃⵠΔ) continue;
				var ΔⵠΔⵠ = Δᐃⵠⵠ[ᐃᐃⲆ];
				var ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time][ΔⵠΔⵠ.ΔᐃᐃⲆΔⵠᐃ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⵠ.ⲆⵠΔ.x + ΔⵠΔⵠ.x - ⵠⵠ.width / (4 * ⵠΔⵠΔΔ), ⲆΔⵠ.ⲆⵠΔ.y + ΔⵠΔⵠ.y - ⵠⵠ.height / (ⵠΔⵠΔΔ * ΔᐃⲆᐃⵠ), ⵠⵠ.width / (ⵠΔⵠΔΔ * 2), ⵠⵠ.height / (2 * ⵠΔⵠΔΔ));
				if (ⲆΔⲆⵠ.ΔⵠⵠΔΔ) {
					var ⵠⵠⵠΔ = 2147483648;
					var ⵠᐃΔΔ = 1103515245;
					var ⵠⵠᐃΔ = 12345;
					var ΔⵠⲆᐃᐃ = (ⵠᐃΔΔ * (ᐃⲆ * 1e3 + ⲆⲆⲆⵠ) + ⵠⵠᐃΔ) % ⵠⵠⵠΔ / ⵠⵠⵠΔ;
					if (ΔⵠⲆᐃᐃ < .2) {
						ΔⵠⲆᐃᐃ = Math.floor(ΔⵠⲆᐃᐃ * ⲆⵠⲆᐃ * ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠⲆΔ.time][ΔⵠΔⵠ.ΔᐃᐃⲆΔⵠᐃ].length);
						var ⵠⵠ = ᐃᐃ[ⵠ.ΔᐃΔᐃ][ⵠⲆΔ.time][ΔⵠΔⵠ.ΔᐃᐃⲆΔⵠᐃ][ΔⵠⲆᐃᐃ];
						ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⵠ.ⲆⵠΔ.x + ΔⵠΔⵠ.x - ⵠⵠ.width / (ⵠΔⵠΔΔ * ᐃⵠⵠⲆ), ⲆΔⵠ.ⲆⵠΔ.y + ΔⵠΔⵠ.y - ⵠⵠ.height / (4 * ⵠΔⵠΔΔ), ⵠⵠ.width / (ⵠΔⵠΔΔ * 2), ⵠⵠ.height / (ⵠΔⵠΔΔ * 2))
					} else if (ᐃⲆΔᐃ !== ΔⵠΔⵠ.ⵠⲆⵠᐃᐃⵠⲆ) {
						var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠⲆⲆᐃⲆΔ][ⵠⲆΔ.time];
						var ΔᐃᐃⵠⲆΔΔ = (ᐃΔⵠⵠⵠᐃⵠ + ᐃⲆ % 2 * 30) % 60;
						Δ.globalAlpha = 30 > ΔᐃᐃⵠⲆΔΔ ? ΔᐃᐃⵠⲆΔΔ / 30 : 1 - (ΔᐃᐃⵠⲆΔΔ - 30) / 30;
						ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⵠ.ⲆⵠΔ.x + ΔⵠΔⵠ.x - ⵠⵠ.width / (ΔⲆⲆⲆ * ⵠΔⵠΔΔ), ⲆΔⵠ.ⲆⵠΔ.y + ΔⵠΔⵠ.y - ⵠⵠ.height / (4 * ⵠΔⵠΔΔ) - 30 + ΔᐃᐃⵠⲆΔΔ, ⵠⵠ.width / (2 * ⵠΔⵠΔΔ), ⵠⵠ.height / (ⵠⵠΔⵠ * ⵠΔⵠΔΔ));
						Δ.globalAlpha = Δⵠᐃ
					}
				}
			}
		}
	}

	function ⵠᐃᐃΔⵠΔᐃⲆⲆ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ᐃΔᐃⲆΔ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ && (this.ΔΔᐃ.ΔⵠΔ = false);
			var ⵠΔΔ = ᐃⵠᐃⵠ * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * Ⲇ;
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = ⵠΔΔⲆ;
			var ⲆⲆⲆ = ⵠᐃΔ
		}
		var ᐃⲆᐃⵠ = this.info & 15;
		if (ⲆΔᐃⵠΔ === this.info || 0 === ᐃⲆᐃⵠ) {
			Δ.rotate(this.angle);
			this.ᐃΔⵠⲆ.ΔⵠΔ();
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆⵠΔΔⵠΔ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔⵠⲆⵠ][ⵠⲆΔ.time];
			var ᐃΔΔ = this.ᐃΔⵠⲆ.ⵠΔΔ * -ⵠⵠ.width;
			var ΔⵠⲆ = -ⵠⵠ.height * this.ᐃΔⵠⲆ.ⵠΔΔ;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2 + Ⲇᐃ, -ΔⵠⲆ / ⲆᐃᐃⲆ + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ)
		} else {
			this.ⲆᐃⵠᐃⵠⵠⲆ.ΔⵠΔ();
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔⵠᐃⵠⵠᐃ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠⲆΔΔ][ⵠⲆΔ.time];
			Δ.translate(0, ⵠⵠ.height / 2);
			Δ.rotate(this.ⲆᐃⵠᐃⵠⵠⲆ.ⵠΔΔ);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ - ⵠⵠ.width / ᐃᐃΔⵠ, -ⵠⵠ.height + ⲆⲆⲆ)
		}
		Δ.restore()
	}

	function ⲆΔⲆⲆᐃⵠⵠⲆΔ() {
		var ⵠⵠ = undefined;
		var ⵠⵠⵠⲆⵠⵠⲆ = undefined;
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		this.rotate.ΔⵠΔ();
		if (.1 <= this.ΔΔⲆΔⵠ && 1.1 >= this.ΔΔⲆΔⵠ) {
			var ΔᐃⵠΔ = Math.max(ⵠΔΔⲆ, Math.min(ⵠⲆⵠⲆ, this.ΔΔⲆΔⵠ - .1));
			if (ΔᐃⵠΔ < .2) ΔᐃⵠΔ *= ᐃᐃᐃᐃ;
			else if (.8 < ΔᐃⵠΔ) ΔᐃⵠΔ = (Δⵠᐃ - ΔᐃⵠΔ) * ⵠⲆⲆⵠ;
			else ΔᐃⵠΔ = 1;
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃⵠⲆᐃⲆᐃΔ][ⵠⲆΔ.time];
			ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
			ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height;
			Δ.globalAlpha = ΔᐃⵠΔ;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 4, -ΔⵠⲆ / ᐃᐃΔⵠⲆ, ᐃΔΔ / 2, ΔⵠⲆ / ΔⵠⲆⲆ);
			var ⵠⵠⵠⲆⵠⵠⲆ = ᐃᐃ[ⵠ.ΔᐃⵠⵠⲆⲆⲆ]
		}
		if (.9 <= this.ΔΔⲆΔⵠ) {
			var ΔᐃⵠΔ = Math.max(ΔᐃⲆⲆ, Math.min(1, this.ΔΔⲆΔⵠ - .9));
			.2 > ΔᐃⵠΔ ? ΔᐃⵠΔ *= 5 : ΔᐃⵠΔ = 1;
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆᐃⵠᐃⲆΔ][ⵠⲆΔ.time];
			ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
			ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ;
			Δ.globalAlpha = ΔᐃⵠΔ;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
			var ⵠⵠⵠⲆⵠⵠⲆ = ᐃᐃ[ⵠ.ᐃⲆᐃⵠΔⲆᐃ]
		}
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ && ⵠⵠⵠⲆⵠⵠⲆ !== undefined) {
			this.ΔΔᐃ.ΔⵠΔ() && ᐃΔᐃⲆΔ == this.ΔΔᐃ.ⵠΔⲆ && (this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ);
			Δ.globalAlpha = ΔᐃⵠΔ * (.6 - this.ΔΔᐃ.ⵠΔΔ);
			ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠⵠⲆⵠⵠⲆ.width;
			ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠⵠⲆⵠⵠⲆ.height;
			ⵠΔⲆⲆ(Δ, ⵠⵠⵠⲆⵠⵠⲆ, -ᐃΔΔ / ᐃΔⵠᐃⲆ, -ΔⵠⲆ / ⵠⲆᐃⲆ, ᐃΔΔ / ⵠΔΔΔ, ΔⵠⲆ / ⵠΔⵠⲆ)
		}
		Δ.globalAlpha = 1;
		Δ.restore()
	}

	function ᐃⲆⵠᐃⲆⵠⲆⵠⲆ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.ΔⵠᐃᐃΔⵠⵠ = Math.min(1, this.ΔⵠᐃᐃΔⵠⵠ + ᐃⵠᐃⵠ * 2);
		Δ.globalAlpha = this.ΔⵠᐃᐃΔⵠⵠ * Math.min(ᐃΔΔⲆ, Math.max(ⵠΔΔⲆ, ΔⲆᐃ.ⲆⵠⲆⲆ(this, this.r) / 80));
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃᐃⲆᐃ][ⵠⲆΔ.time][this.ΔⲆⲆⲆⲆ];
		if (ⵠΔΔΔ > this.ΔⲆⲆⲆⲆ) {
			ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
			ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height
		} else {
			if (this.ⲆΔⲆⲆⵠⵠⵠ === ⵠᐃⵠ) {
				ᐃΔΔ = -ⵠⵠ.width;
				ΔⵠⲆ = -ⵠⵠ.height
			} else {
				ᐃΔΔ = -ⵠⵠ.width * 1.35;
				ΔⵠⲆ = -ⵠⵠ.height * 1.35
			}
		}
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ΔⵠⲆⲆ, -ΔⵠⲆ / ⵠⵠΔⵠ, ᐃΔΔ, ΔⵠⲆ);
		Δ.globalAlpha = ⵠⵠⵠⲆ;
		Δ.restore()
	}

	function ᐃΔⵠⲆΔⲆⲆⵠΔ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ΔᐃΔΔᐃ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) this.ΔΔᐃ.ΔⵠΔ = ⲆⲆΔΔᐃ;
			var ⵠΔΔ = 600 * ((1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * ᐃⵠᐃⵠ) * Ⲇ;
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = ⵠΔⵠᐃ
		}
		if (this.info & 31 && this.info & 992 && 31744 != (this.info & 31744)) {
			ⵠⵠ = ᐃᐃ[ⵠ.ᐃᐃⲆⵠᐃΔΔ][ⵠⲆΔ.time];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2 + Ⲇᐃ, -ⵠⵠ.height / 2 + ⲆⲆⲆ);
			this.up.ΔⵠΔ();
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠᐃΔⲆⵠⵠ][ⵠⲆΔ.time];
			var ᐃΔΔ = this.up.ⵠΔΔ * -ⵠⵠ.width;
			var ΔⵠⲆ = -ⵠⵠ.height * this.up.ⵠΔΔ;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2 + ⲆⲆΔⵠ * Ⲇ, -ΔⵠⲆ / 2 + ⲆΔⲆᐃ * Ⲇ, ᐃΔΔ, ΔⵠⲆ)
		} else {
			ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆᐃΔΔᐃᐃ][ⵠⲆΔ.time];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ⵠⵠᐃⲆ + Ⲇᐃ, -ⵠⵠ.height / 2 + ⲆⲆⲆ)
		}
		Δ.restore()
	}

	function ⲆⵠⵠⲆⵠᐃⵠⲆᐃ(ᐃΔᐃⵠ, Ⲇᐃ, ⲆⲆⲆ) {
		if (ᐃΔᐃⵠ >= 0) {
			ⵠⵠ = ᐃᐃ[ᐃΔᐃⵠ][ⵠⲆΔ.time];
			switch (ᐃΔᐃⵠ) {
				case ⵠ.ⲆⵠⵠⵠΔ:
				case ⵠ.ⵠΔΔᐃΔ:
				case ⵠ.ⲆΔⲆⲆᐃ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ΔΔⲆΔ - (Δⵠⵠ + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / 4 + Ⲇ * (ⲆⲆⲆ + 35));
					break;
				case ⵠ.ⵠΔΔΔΔ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ΔⵠⲆⵠᐃ - (1 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / ᐃᐃΔⵠⲆ + Ⲇ * (ⲆⲆⲆ + 45));
					break;
				case ⵠ.ⲆᐃⵠΔᐃ:
				case ⵠ.ᐃⲆⲆᐃᐃ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ΔᐃⲆᐃⵠ - (ΔⲆⵠⲆ + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / ᐃᐃΔⵠⲆ + (ⲆⲆⲆ + 40) * Ⲇ);
					break
			}
		}
	}

	function ⵠⲆΔΔⲆΔᐃΔⲆ() {
		if (this.ΔΔᐃ.ΔⵠΔ) {
			if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ΔᐃΔΔᐃ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) this.ΔΔᐃ.ΔⵠΔ = ΔⲆⲆᐃΔ;
			var ⵠΔΔ = ᐃⵠᐃⵠ * (ΔΔⵠ - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * Ⲇ;
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = ⵠᐃΔ
		}
		Δ.save();
		this.info & 255 && 65280 != (this.info & 65280) && (Ⲇᐃ += Math.random() * 2 - ΔⲆⵠⲆ, ⲆⲆⲆ += 2 * Math.random() - 1);
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x + Ⲇᐃ, ⲆΔⵠ.ⲆⵠΔ.y + this.y + ⲆⲆⲆ);
		Δ.rotate(this.angle);
		ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ᐃᐃΔⵠ);
		this.info & 255 && 65280 != (this.info & 65280) && (this.rotate = (this.rotate + Ⲇⵠᐃᐃ * ᐃⵠᐃⵠ) % (2 * Math.PI));
		Δ.rotate(this.rotate);
		ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠⵠⲆⲆⵠⵠ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ΔΔⵠⲆ, -ⵠⵠ.height / Ⲇᐃⵠⵠ);
		Δ.restore()
	}

	function ⵠᐃⵠⲆᐃⵠᐃⵠΔ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == false && (this.ΔΔᐃ.ΔⵠΔ = ᐃΔⲆΔᐃ);
			var ⵠΔΔ = 600 * ((1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * ᐃⵠᐃⵠ) * Ⲇ;
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = 0;
			var ⲆⲆⲆ = ⵠⵠⵠ
		}
		2 == this.action ? ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃΔⵠᐃΔⵠ][ⵠⲆΔ.time] : ⵠⵠ = ᐃᐃ[ⵠ.ᐃᐃⵠᐃⵠⵠⵠ][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ⲆᐃᐃⲆ + Ⲇᐃ, -ⵠⵠ.height / 2 + ⲆⲆⲆ);
		Δ.restore()
	}

	function ᐃᐃⵠⵠΔᐃⲆᐃᐃ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ == ᐃΔᐃⲆΔ && (this.ΔΔᐃ.ΔⵠΔ = false);
			var ⵠΔΔ = 600 * (ᐃⵠᐃⵠ * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ)) * Ⲇ;
			var Ⲇᐃ = Math.sin(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ;
			var ⲆⲆⲆ = Math.cos(this.ΔΔᐃ.angle - this.angle) * ⵠΔΔ
		} else {
			var Ⲇᐃ = ⵠᐃⵠ;
			var ⲆⲆⲆ = 0
		}
		var ᐃⲆᐃⵠ = this.info & 15;
		if (this.info === 10 || ᐃⲆᐃⵠ === 0) {
			Δ.rotate(this.angle);
			this.ᐃΔⵠⲆ.ΔⵠΔ();
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔⵠⵠᐃᐃᐃ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔᐃⲆΔⲆΔ][ⵠⲆΔ.time];
			var ᐃΔΔ = -ⵠⵠ.width * this.ᐃΔⵠⲆ.ⵠΔΔ;
			var ΔⵠⲆ = this.ᐃΔⵠⲆ.ⵠΔΔ * -ⵠⵠ.height;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2 + Ⲇᐃ, -ΔⵠⲆ / 2 + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ)
		} else {
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆⵠⵠⵠⵠⵠ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆⲆⲆⲆ][ⵠⲆΔ.time];
			Δ.translate(0, ⵠⵠ.height / 2);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ - ⵠⵠ.width / 2, -ⵠⵠ.height + ⲆⲆⲆ)
		}
		Δ.restore()
	}

	function ⲆⵠⵠΔⲆⲆᐃΔΔ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		if (this.ΔΔᐃ.ΔⵠΔ) {
			if (this.ΔΔᐃ.ⲆΔᐃΔ.ΔⵠΔ() && ᐃΔᐃᐃΔ == this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔⲆ) this.ΔΔᐃ.ΔⵠΔ = ΔΔⲆᐃᐃ;
			var ⵠΔΔ = ᐃⵠᐃⵠ * (1 - this.ΔΔᐃ.ⲆΔᐃΔ.ⵠΔΔ) * 600 * Ⲇ;
			var Ⲇᐃ = ⵠΔΔ * Math.sin(this.ΔΔᐃ.angle - this.angle);
			var ⲆⲆⲆ = ⵠΔΔ * Math.cos(this.ΔΔᐃ.angle - this.angle)
		} else {
			var Ⲇᐃ = ⲆⲆΔ;
			var ⲆⲆⲆ = 0
		}
		var ᐃⲆᐃⵠ = this.info & 15;
		if (this.info === 10 || ᐃⲆΔ === ᐃⲆᐃⵠ) {
			Δ.rotate(this.angle);
			this.ᐃΔⵠⲆ.ΔⵠΔ();
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔΔⵠⵠΔΔ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃⲆΔⲆᐃⲆ][ⵠⲆΔ.time];
			var ᐃΔΔ = this.ᐃΔⵠⲆ.ⵠΔΔ * -ⵠⵠ.width;
			var ΔⵠⲆ = this.ᐃΔⵠⲆ.ⵠΔΔ * -ⵠⵠ.height;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ᐃᐃⲆⵠ + Ⲇᐃ, -ΔⵠⲆ / ⵠⲆᐃⵠ + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ)
		} else {
			if (this.info & 16) var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠᐃΔⵠⵠΔ][ⵠⲆΔ.time];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆⲆᐃᐃ][ⵠⲆΔ.time];
			Δ.translate(0, ⵠⵠ.height / ⲆΔΔⲆ);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ - ⵠⵠ.width / 2, -ⵠⵠ.height + ⲆⲆⲆ)
		}
		Δ.restore()
	}

	function ⲆⵠⲆⲆΔΔⵠ(ᐃΔᐃⵠ, Ⲇᐃ, ⲆⲆⲆ) {
		if (ᐃΔᐃⵠ >= ᐃⲆΔ) {
			ⵠⵠ = ᐃᐃ[ᐃΔᐃⵠ][ⵠⲆΔ.time];
			switch (ᐃΔᐃⵠ) {
				case ⵠ.ⵠⲆⲆⲆΔ:
				case ⵠ.ⵠᐃⲆᐃᐃ:
				case ⵠ.ⵠᐃⵠΔⲆ:
				case ⵠ.ᐃᐃΔᐃⵠ:
				case ⵠ.ΔΔᐃᐃᐃ:
				case ⵠ.ᐃⲆΔⵠᐃ:
					ⲆΔⲆⲆⲆ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / 2 - Ⲇ * (45 + Ⲇᐃ), -ⵠⵠ.height / 2 + (ⲆⲆⲆ + 22) * Ⲇ);
					break;
				case ⵠ.ᐃΔΔⲆⵠ:
				case ⵠ.ⲆᐃⵠΔⵠ:
				case ⵠ.ΔᐃΔΔⲆ:
				case ⵠ.ⵠΔΔΔⲆ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ⲆⲆⲆΔ - Ⲇ * (52 + Ⲇᐃ), -ⵠⵠ.height / ᐃΔⵠᐃⲆ + (ⲆⲆⲆ + ᐃᐃⲆⵠΔ) * Ⲇ);
					break;
				case ⵠ.ΔⲆΔΔΔ:
				case ⵠ.ᐃΔⵠᐃΔ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ΔΔᐃⵠΔ - (57 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / 4 + (ⲆⲆⲆ + 20) * Ⲇ);
					break;
				case ⵠ.ⲆΔᐃⲆΔ:
				case ⵠ.ⲆⲆᐃΔΔ:
				case ⵠ.ᐃΔⵠⵠⵠ:
				case ⵠ.ⲆⲆΔⲆᐃ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / 4 - Ⲇ * (47 + Ⲇᐃ), -ⵠⵠ.height / 4 + (ⲆⲆⲆ + 45) * Ⲇ);
					break;
				case ⵠ.ⵠⲆⲆΔⲆ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ΔⲆΔⲆ - Ⲇ * (52 + Ⲇᐃ), -ⵠⵠ.height / 4 + Ⲇ * (ⲆⲆⲆ + 45));
					break;
				case ⵠ.ΔΔᐃᐃⲆ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / ⵠⵠⵠᐃⲆ + (ⲆⲆⲆ + 44) * Ⲇ);
					break;
				case ⵠ.ⲆⵠⲆΔΔ:
					ⲆΔⲆⲆⲆ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ᐃⵠΔⲆ - Ⲇ * (47 + Ⲇᐃ), -ⵠⵠ.height / Ⲇᐃⵠⵠ + Ⲇ * (ⲆⲆⲆ + 44));
					break;
				case ⵠ.ᐃᐃᐃⲆΔ:
					ⲆΔⲆⲆⲆ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ⵠⵠᐃⲆ - (40 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / 2 + Ⲇ * (ⲆⲆⲆ + 65));
					break;
				case ⵠ.ᐃⵠᐃⵠᐃ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / 4 - (37 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / ⵠⲆᐃⲆ + (ⲆⲆⲆ + 85) * Ⲇ);
					break;
				case ⵠ.ᐃᐃⵠᐃⲆ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / 4 - (37 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / 4 + (ⲆⲆⲆ + 85) * Ⲇ);
					break;
				case ⵠ.ⲆⲆⲆᐃΔ:
				case ⵠ.ⵠΔⵠᐃᐃ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / 4 - (26 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / ⲆⲆⲆΔ + (ⲆⲆⲆ + 77) * Ⲇ);
					break;
				case ⵠ.ΔᐃΔⲆⲆ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ⵠⵠⵠᐃⲆ - Ⲇ * (37 + Ⲇᐃ), -ⵠⵠ.height / ⲆⲆⲆΔ + (ⲆⲆⲆ + 85) * Ⲇ);
					break;
				case ⵠ.ⵠᐃᐃⲆᐃ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / 4 - Ⲇ * (47 + Ⲇᐃ), -ⵠⵠ.height / 4 + Ⲇ * (ⲆⲆⲆ + 44));
					break;
				case ⵠ.ⵠᐃⲆⵠⵠ:
				case ⵠ.ΔⵠⵠⲆⲆ:
				case ⵠ.ⵠⵠΔᐃΔ:
				case ⵠ.ⵠΔᐃⵠᐃ:
				case ⵠ.ᐃΔᐃΔⵠ:
				case ⵠ.Δᐃᐃⵠⵠ:
				case ⵠ.ᐃⲆⵠᐃΔ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ⵠⵠⵠᐃⲆ - Ⲇ * (37 + Ⲇᐃ), -ⵠⵠ.height / 4 + (ⲆⲆⲆ + 30) * Ⲇ);
					break;
				case ⵠ.ⲆΔΔΔᐃ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ⵠⵠⵠᐃⲆ - Ⲇ * (47 + Ⲇᐃ), -ⵠⵠ.height / ᐃᐃΔⵠⲆ + (ⲆⲆⲆ + 35) * Ⲇ);
					break;
				case ⵠ.ΔᐃⲆⵠⵠ:
				case ⵠ.ΔⵠΔⵠΔ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ⲆⲆⲆΔ - (47 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / ᐃᐃᐃᐃΔ + Ⲇ * (ⲆⲆⲆ + 40));
					break;
				case ⵠ.ΔⲆⵠⵠⲆ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ΔⲆΔⲆ - (47 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / ΔⲆⲆⲆ + (ⲆⲆⲆ + 34) * Ⲇ);
					break;
				case ⵠ.ΔⲆⵠᐃᐃ:
				case ⵠ.ⵠⲆᐃⲆᐃ:
				case ⵠ.ⵠᐃⲆᐃΔ:
				case ⵠ.ⲆΔᐃⲆⲆ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ΔΔⲆΔ - Ⲇ * (37 + Ⲇᐃ), -ⵠⵠ.height / 4 + Ⲇ * (ⲆⲆⲆ + 90));
					break;
				case ⵠ.ⵠᐃⲆΔᐃ:
					ΔⵠᐃⲆᐃ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / 4 - Ⲇ * (40 + Ⲇᐃ), -ⵠⵠ.height / ⵠΔⲆᐃⲆ + Ⲇ * (ⲆⲆⲆ + 85));
					break;
				case ⵠ.ᐃΔΔᐃⵠ:
					ⲆΔⲆⲆⲆ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / 2 - (39 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / 2 + (ⲆⲆⲆ + 90) * Ⲇ);
					break;
				case ⵠ.ΔᐃΔⵠⲆ:
				case ⵠ.ᐃⵠⵠΔᐃ:
				case ⵠ.ᐃⲆᐃⵠⵠ:
				case ⵠ.ⵠᐃᐃᐃⵠ:
				case ⵠ.ᐃᐃⵠᐃΔ:
				case ⵠ.ΔΔᐃⲆΔ:
					ⲆΔⲆⲆⲆ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / ᐃᐃⲆⵠ - (46 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / 2 + (ⲆⲆⲆ + 35) * Ⲇ);
					break;
				case ⵠ.ᐃᐃⲆⵠⲆ:
					ⲆΔⲆⲆⲆ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / 2 - (47 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / 2 + Ⲇ * (ⲆⲆⲆ + 54));
					break;
				case ⵠ.ᐃⵠⵠⵠⵠ:
				case ⵠ.ⵠⵠⲆⲆΔ:
				case ⵠ.ⵠᐃᐃΔⵠ:
				case ⵠ.ⲆΔⵠᐃⲆ:
					ⲆΔⲆⲆⲆ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / 2 - (46 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / 2 + (ⲆⲆⲆ + 35) * Ⲇ);
					break;
				case ⵠ.ᐃΔⲆⲆⲆ:
					ⲆΔⲆⲆⲆ(ᐃΔᐃⵠ, ⵠⵠ, -ⵠⵠ.width / 2 - Ⲇ * (47 + Ⲇᐃ), -ⵠⵠ.height / 2 + (ⲆⲆⲆ + ⵠᐃᐃᐃᐃⵠᐃ) * Ⲇ);
					break
			}
		}
	}

	function ΔᐃΔΔⲆⵠⲆ(ΔΔ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time];
		ᐃΔΔ = -ⵠⵠ.width * this.ⵠᐃⵠᐃ.ⵠΔΔ;
		ΔⵠⲆ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.height;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / ⵠⲆΔᐃ, ᐃΔΔ, ΔⵠⲆ);
		Δ.restore()
	}

	function ΔⵠᐃⵠᐃⲆⲆΔΔ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.info & 31 && this.info & 992 && 31744 != (this.info & 31744) && (this.ⵠⲆΔⵠⵠ.length == 0 || this.ⵠⲆΔⵠⵠ[this.ⵠⲆΔⵠⵠ.length - ᐃΔⵠΔ] <= ⵠ.ᐃⲆⲆᐃⲆΔⲆ) && this.ⵠⲆΔⵠⵠ.push(ⵠ.ⲆⵠⵠᐃⲆⵠⲆ);
		for (var ᐃⲆ = 0; ᐃⲆ < this.ⵠⲆΔⵠⵠ.length; ᐃⲆ++) {
			this.ⵠⲆΔⵠⵠ[ᐃⲆ] = Math.max(Ⲇⵠⵠᐃ, this.ⵠⲆΔⵠⵠ[ᐃⲆ] - ᐃⵠᐃⵠ * ⵠ.ⵠᐃⲆᐃᐃΔΔ);
			Δ.globalAlpha = this.ⵠⲆΔⵠⵠ[ᐃⲆ] / 1.3;
			var ⵠΔΔ = 40 * (ⵠⵠⵠⲆ - this.ⵠⲆΔⵠⵠ[ᐃⲆ]);
			var ΔⲆⵠ = (1 - this.ⵠⲆΔⵠⵠ[ᐃⲆ]) * 35 + ΔⵠᐃⲆΔ;
			ⵠΔᐃ(Δ, Ⲇ * -68 + Math.sin(-this.angle - Math.PI / ᐃᐃⲆⵠ) * ⵠΔΔ, Ⲇ * -20 + Math.cos(-this.angle - Math.PI / ᐃᐃΔⵠ) * ⵠΔΔ, ΔⲆⵠ);
			ⵠᐃ(Δ, "#333333")
		}
		Δ.globalAlpha = 1;
		if (this.ⵠⲆΔⵠⵠ.length > ⵠᐃΔ && 0 === this.ⵠⲆΔⵠⵠ[ⲆⲆᐃⲆ]) this.ⵠⲆΔⵠⵠ.shift();
		Δ.restore()
	}

	function ΔᐃⲆΔⵠⲆⲆᐃⲆ(ΔΔ, ᐃⵠᐃΔΔⲆⲆ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.angle);
		this.ⵠᐃⵠᐃ.ΔⵠΔ();
		ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time];
		ᐃΔΔ = this.ⵠᐃⵠᐃ.ⵠΔΔ * -ⵠⵠ.width;
		ΔⵠⲆ = -ⵠⵠ.height * this.ⵠᐃⵠᐃ.ⵠΔΔ;
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			this.ΔΔᐃ.ΔⵠΔ() && this.ΔΔᐃ.ⵠΔⲆ == false && (this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ);
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ᐃⵠᐃΔΔⲆⲆ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ΔⵠⲆⵠᐃ, -ΔⵠⲆ / 4, ᐃΔΔ / ΔⵠⲆⲆ, ΔⵠⲆ / ᐃᐃⵠⵠ);
			Δ.globalAlpha = 1
		}
		Δ.restore()
	}
	var ⵠⵠᐃᐃᐃΔⵠΔᐃ = function(ⲆΔᐃΔᐃ) {
		if (ⲆΔᐃΔᐃ > 0) {
			var ⵠⵠ = ᐃᐃ[ⲆΔᐃΔᐃ][ⵠⲆΔ.time];
			switch (ⲆΔᐃΔᐃ) {
				case ⵠ.ⲆΔᐃᐃᐃ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / ⵠⵠΔⵠ + 2 * Ⲇ, -ⵠⵠ.height / 2 - 5 * Ⲇ);
					break;
				case ⵠ.ⵠΔᐃΔΔ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ᐃᐃⲆⵠ - ᐃⵠⲆⲆΔ * Ⲇ);
					break;
				case ⵠ.ᐃΔⲆΔⲆ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / ᐃᐃⲆⵠ, -ⵠⵠ.height / 2 - Ⲇ * 10);
					break;
				case ⵠ.ΔᐃᐃⲆᐃ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / ⵠᐃᐃⲆ, -ⵠⵠ.height / ᐃⲆⵠᐃ - 19 * Ⲇ);
					break;
				case ⵠ.ⵠᐃᐃΔΔ:
					ΔⵠᐃⲆᐃ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / ⵠΔᐃⲆ, -ⵠⵠ.height / ᐃΔΔΔⲆ - Ⲇ * ⵠᐃᐃᐃᐃⵠᐃ);
					break;
				case ⵠ.ⵠΔⵠΔᐃ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / 2 - ⲆⵠΔΔ * Ⲇ, -ⵠⵠ.height / ⲆᐃᐃⲆ - Ⲇ * 23);
					break;
				case ⵠ.ᐃᐃΔᐃΔ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2 - ⵠⲆⲆⵠ * Ⲇ);
					break;
				case ⵠ.ⵠⵠᐃᐃⵠ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ⵠΔⵠⲆ - Ⲇ * 2);
					break;
				case ⵠ.ⲆᐃᐃᐃⲆ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / ⵠⵠΔⵠ + Ⲇ * 1.5, -ⵠⵠ.height / 2 - Ⲇ * 1);
					break;
				case ⵠ.ᐃⵠⵠⵠΔ:
				case ⵠ.ⵠΔᐃΔⵠ:
				case ⵠ.ΔᐃΔᐃⲆ:
				case ⵠ.ⵠᐃⵠⵠⲆ:
				case ⵠ.ᐃⵠΔⵠⲆ:
				case ⵠ.ⲆΔⲆᐃⲆ:
				case ⵠ.ᐃⲆⲆⲆⲆ:
				case ⵠ.ⲆᐃᐃⲆⲆ:
				case ⵠ.ᐃⲆΔΔΔ:
				case ⵠ.ⲆⵠⵠΔⲆ:
				case ⵠ.ⵠΔⵠⵠᐃ:
					ΔⵠᐃⲆᐃ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / 4, -ⵠⵠ.height / 4 + ΔⲆⵠΔ * Ⲇ);
					break;
				case ⵠ.ⵠᐃⵠᐃⲆ:
				case ⵠ.ᐃⵠⵠⲆⲆ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / 2 - Ⲇ * ΔΔⵠⲆΔ, -ⵠⵠ.height / ΔⲆⵠΔ - Ⲇ * ᐃⲆⵠᐃ);
					break;
				case ⵠ.ⵠΔⵠⲆⵠ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / ⵠⲆΔᐃ, -ⵠⵠ.height / ⵠⲆΔᐃ - Ⲇ * ⵠΔⵠⲆ);
					break;
				case ⵠ.ᐃⲆᐃΔΔ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2 - ΔΔⵠⲆ * Ⲇ);
					break;
				case ⵠ.ⲆⲆᐃΔᐃ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / ⵠΔΔΔ, -ⵠⵠ.height / 2 - Ⲇ * ⲆᐃᐃⲆ);
					break;
				case ⵠ.ⲆⲆⵠⲆΔ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / ⵠⲆΔᐃ + 2 * Ⲇ, -ⵠⵠ.height / ΔΔⵠⲆ);
					break;
				case ⵠ.ᐃᐃᐃΔⵠ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ᐃⲆⵠᐃ - Ⲇ * ᐃᐃᐃⲆⲆ);
					break;
				case ⵠ.ⵠⲆᐃΔΔ:
				case ⵠ.ⲆΔⲆⵠⵠ:
				case ⵠ.ⵠᐃΔⵠᐃ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / ⵠΔⵠⲆ - Ⲇ * ⵠⲆⵠⲆ, -ⵠⵠ.height / ΔⲆⵠΔ);
					break;
				case ⵠ.ⵠΔᐃΔⲆ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2 + Ⲇ * ᐃᐃⵠⵠ);
					break;
				case ⵠ.ⲆᐃΔⵠⵠ:
				case ⵠ.ΔᐃᐃⲆⵠ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ᐃᐃΔⵠ + 8 * Ⲇ);
					break;
				case ⵠ.ᐃΔⲆⲆΔ:
					ⲆΔⲆⲆⲆ(ⲆΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / ᐃⲆⵠᐃ, -ⵠⵠ.height / 2 - 4 * Ⲇ);
					break
			}
		}
	};

	function ᐃᐃᐃⲆΔⲆΔ() {
		if (this.ⲆⲆⵠⲆⲆ || 0 === this.ᐃΔⵠΔⵠ) return;
		if (Settings.VehicleOpacity.enabled) Δ.globalAlpha = Settings.VehicleOpacity.o;
		if (this.x != this.r.x || this.y != this.r.y) {
			var ΔΔⲆ = (ΔⲆᐃ.ᐃΔᐃⲆⲆΔⵠ(this.x, this.y, this.r.x, this.r.y) + Math.PI / ⵠⵠΔⵠ) % (2 * Math.PI);
			this.ⲆⵠⵠⵠⲆ = ΔⲆᐃ.ⲆⲆᐃᐃⵠⵠⲆ(ΔΔⲆ, this.ⲆⵠⵠⵠⲆ);
			this.ⲆⵠⵠⵠⲆ = ΔⲆᐃ.ΔΔⲆⲆΔ(this.ⲆⵠⵠⵠⲆ, ΔΔⲆ, .018)
		}
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		Δ.rotate(this.ⲆⵠⵠⵠⲆ);
		if (ΔⲆ.ᐃᐃⵠⲆΔ === this.ᐃΔⵠΔⵠ) {
			if (this.ⵠᐃᐃⲆⲆ > 50 || 0 < this.ᐃΔⵠᐃⵠ) {
				if (this.ⵠᐃᐃⲆⲆ > 50) this.ᐃΔⵠᐃⵠ = Math.min(1, this.ᐃΔⵠᐃⵠ + ᐃⵠᐃⵠ);
				else this.ᐃΔⵠᐃⵠ = Math.max(ⵠᐃⲆⵠ, this.ᐃΔⵠᐃⵠ - ᐃⵠᐃⵠ);
				Δ.globalAlpha = this.ᐃΔⵠᐃⵠ;
				var ⵠⵠ = ᐃᐃ[ⵠ.ΔΔΔᐃⲆΔⲆ][ⵠⲆΔ.time];
				ΔⵠᐃⲆᐃ(ⵠ.ΔΔΔᐃⲆΔⲆ, ⵠⵠ, -ⵠⵠ.width / ᐃᐃⵠΔ, -ⵠⵠ.height / 4);
				Δ.globalAlpha = Settings.VehicleOpacity.enabled ? Settings.VehicleOpacity.o : 1
			}
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃᐃⵠⲆΔ][ⵠⲆΔ.time];
			ΔⵠᐃⲆᐃ(ⵠ.ᐃᐃⵠⲆΔ, ⵠⵠ, -ⵠⵠ.width / ⲆⲆⲆΔ, -ⵠⵠ.height / 4)
		} else if (this.ᐃΔⵠΔⵠ === ΔⲆ.ΔᐃⲆΔᐃ) {
			this.ⵠⵠⵠⵠⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(this.ⵠⵠⵠⵠⵠ, this.ⵠᐃᐃⲆⲆ, .018);
			this.ⲆⵠⲆⵠᐃⲆⲆ.ΔⵠΔ();
			if (this.ⵠᐃᐃⲆⲆ > 85) this.ᐃΔⵠᐃⵠ = Math.min(ᐃΔⵠΔ, this.ᐃΔⵠᐃⵠ + ᐃⵠᐃⵠ / 4);
			else this.ᐃΔⵠᐃⵠ = Math.max(.1, this.ᐃΔⵠᐃⵠ - ᐃⵠᐃⵠ);
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔⲆⵠᐃΔΔ][ⵠⲆΔ.time];
			ΔⵠᐃⲆᐃ(ⵠ.ᐃΔⲆⵠᐃΔΔ, ⵠⵠ, -ⵠⵠ.width / ⵠⲆᐃⲆ, -ⵠⵠ.height / ⲆⲆⲆΔ);
			ⵠⵠ = ᐃᐃ[ⵠ.ᐃᐃⲆΔⵠⵠΔ][ⵠⲆΔ.time];
			ᐃΔΔ = -ⵠⵠ.width;
			ΔⵠⲆ = -ⵠⵠ.height;
			Δ.save();
			Δ.translate(Ⲇ * -20, Ⲇ * -ⲆⲆⲆⵠⵠ);
			Δ.rotate(this.ⲆⵠⲆⵠᐃⲆⲆ.ⵠΔΔ * this.ᐃΔⵠᐃⵠ);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ᐃᐃⵠΔ, -ΔⵠⲆ / ⵠⲆᐃⲆ, ᐃΔΔ / 2, ΔⵠⲆ / 2);
			Δ.restore();
			ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆΔⲆⵠᐃⵠ][ⵠⲆΔ.time];
			Δ.save();
			Δ.translate(Ⲇ * 20, -20 * Ⲇ);
			Δ.rotate(-this.ⲆⵠⲆⵠᐃⲆⲆ.ⵠΔΔ * this.ᐃΔⵠᐃⵠ);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 4, -ΔⵠⲆ / ⵠⲆᐃⲆ, ᐃΔΔ / Ⲇᐃⵠⵠ, ΔⵠⲆ / 2);
			Δ.restore()
		} else if (ΔⲆ.ⵠⵠⲆΔΔ === this.ᐃΔⵠΔⵠ) {
			this.ⵠⵠⵠⵠⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(this.ⵠⵠⵠⵠⵠ, this.ⵠᐃᐃⲆⲆ, .018);
			this.ⲆⵠⲆⵠᐃⲆⲆ.ΔⵠΔ();
			85 < this.ⵠᐃᐃⲆⲆ ? this.ᐃΔⵠᐃⵠ = Math.min(1, this.ᐃΔⵠᐃⵠ + ᐃⵠᐃⵠ / ΔᐃᐃΔ) : this.ᐃΔⵠᐃⵠ = Math.max(.1, this.ᐃΔⵠᐃⵠ - ᐃⵠᐃⵠ);
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃⲆⵠⵠΔⲆΔ][ⵠⲆΔ.time];
			ΔⵠᐃⲆᐃ(ⵠ.ᐃⲆⵠⵠΔⲆΔ, ⵠⵠ, -ⵠⵠ.width / 4, -ⵠⵠ.height / 4);
			ⵠⵠ = ᐃᐃ[ⵠ.ⵠΔⲆⵠᐃⲆΔ][ⵠⲆΔ.time];
			ᐃΔΔ = -ⵠⵠ.width;
			ΔⵠⲆ = -ⵠⵠ.height;
			Δ.save();
			Δ.translate(-40 * Ⲇ, -45 * Ⲇ);
			Δ.rotate(this.ⲆⵠⲆⵠᐃⲆⲆ.ⵠΔΔ * this.ᐃΔⵠᐃⵠ);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 4, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / ⲆΔΔⲆ);
			Δ.restore();
			ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃⲆⲆᐃᐃⲆ][ⵠⲆΔ.time];
			Δ.save();
			Δ.translate(40 * Ⲇ, Ⲇ * -45);
			Δ.rotate(this.ᐃΔⵠᐃⵠ * -this.ⲆⵠⲆⵠᐃⲆⲆ.ⵠΔΔ);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ΔᐃᐃΔ, -ΔⵠⲆ / ᐃΔⵠᐃⲆ, ᐃΔΔ / ⲆΔΔⲆ, ΔⵠⲆ / 2);
			Δ.restore()
		} else if (ΔⲆ.ΔⲆᐃᐃⵠ === this.ᐃΔⵠΔⵠ) {
			this.ⵠⵠⵠⵠⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(this.ⵠⵠⵠⵠⵠ, this.ⵠᐃᐃⲆⲆ, .018);
			this.ⲆⵠⲆⵠᐃⲆⲆ.ΔⵠΔ();
			if (this.ⵠᐃᐃⲆⲆ > 85) this.ᐃΔⵠᐃⵠ = Math.min(ᐃⵠⵠⵠ, this.ᐃΔⵠᐃⵠ + ᐃⵠᐃⵠ / ΔΔᐃⵠΔ);
			else this.ᐃΔⵠᐃⵠ = Math.max(.1, this.ᐃΔⵠᐃⵠ - ᐃⵠᐃⵠ);
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆᐃⲆᐃᐃΔⵠ][ⵠⲆΔ.time];
			ΔⵠᐃⲆᐃ(ⵠ.ⲆᐃⲆᐃᐃΔⵠ, ⵠⵠ, -ⵠⵠ.width / 4, -ⵠⵠ.height / 4);
			ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠᐃⵠⵠΔΔ][ⵠⲆΔ.time];
			ᐃΔΔ = -ⵠⵠ.width;
			ΔⵠⲆ = -ⵠⵠ.height;
			Δ.save();
			Δ.translate(Ⲇ * -40, -45 * Ⲇ);
			Δ.rotate(this.ⲆⵠⲆⵠᐃⲆⲆ.ⵠΔΔ * this.ᐃΔⵠᐃⵠ);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ΔΔᐃⵠΔ, -ΔⵠⲆ / ⵠΔᐃⲆ, ᐃΔΔ / 2, ΔⵠⲆ / 2);
			Δ.restore();
			ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔΔᐃᐃⵠⵠ][ⵠⲆΔ.time];
			Δ.save();
			Δ.translate(40 * Ⲇ, -45 * Ⲇ);
			Δ.rotate(this.ᐃΔⵠᐃⵠ * -this.ⲆⵠⲆⵠᐃⲆⲆ.ⵠΔΔ);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ⵠΔⲆᐃⲆ, -ΔⵠⲆ / 4, ᐃΔΔ / 2, ΔⵠⲆ / 2);
			Δ.restore()
		} else if (this.ᐃΔⵠΔⵠ === ΔⲆ.ᐃΔᐃΔᐃ) {
			this.ⵠⵠⵠⵠⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(this.ⵠⵠⵠⵠⵠ, this.ⵠᐃᐃⲆⲆ, .018);
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔᐃΔᐃ][ⵠⲆΔ.time];
			ΔⵠᐃⲆᐃ(ⵠ.ᐃΔᐃΔᐃ, ⵠⵠ, -ⵠⵠ.width / ⵠⲆᐃⲆ, -ⵠⵠ.height / ΔⲆⲆⲆ)
		} else if (ΔⲆ.ⲆⵠⲆΔⵠ === this.ᐃΔⵠΔⵠ) {
			this.ⵠⵠⵠⵠⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(this.ⵠⵠⵠⵠⵠ, this.ⵠᐃᐃⲆⲆ, .018);
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠⲆΔⵠ][ⵠⲆΔ.time];
			ΔⵠᐃⲆᐃ(ⵠ.ⲆⵠⲆΔⵠ, ⵠⵠ, -ⵠⵠ.width / 4, -ⵠⵠ.height / 4)
		} else if (this.ᐃΔⵠΔⵠ === ΔⲆ.ⵠⲆⲆⲆⵠ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆⲆⲆⵠ][ⵠⲆΔ.time];
			ΔⵠᐃⲆᐃ(ⵠ.ⵠⲆⲆⲆⵠ, ⵠⵠ, -ⵠⵠ.width / ΔⵠⲆⵠᐃ, -ⵠⵠ.height / 4)
		} else if (ΔⲆ.ⲆⲆⵠⵠⵠ === this.ᐃΔⵠΔⵠ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆᐃⲆⵠⲆᐃ][ⵠⲆΔ.time];
			if (85 < this.ⵠᐃᐃⲆⲆ) this.ᐃΔⵠᐃⵠ = Math.min(ΔⲆⵠⲆ, this.ᐃΔⵠᐃⵠ + ᐃⵠᐃⵠ / 4);
			else this.ᐃΔⵠᐃⵠ = Math.max(0, this.ᐃΔⵠᐃⵠ - ᐃⵠᐃⵠ);
			this.ΔΔⵠᐃⵠ += 60 * ᐃⵠᐃⵠ;
			if (this.ΔΔⵠᐃⵠ > 60) this.ΔΔⵠᐃⵠ -= 60;
			var ⵠⲆΔΔⲆ = (-ᐃⲆΔⵠΔ + 12 * (this.ΔΔⵠᐃⵠ < 30 ? this.ΔΔⵠᐃⵠ / 30 : 1 - (this.ΔΔⵠᐃⵠ - 30) / 30)) * this.ᐃΔⵠᐃⵠ;
			ΔⵠᐃⲆᐃ(ⵠ.ΔⲆᐃⲆⵠⲆᐃ, ⵠⵠ, -ⵠⵠ.width / ᐃΔⵠᐃⲆ, -ⵠⵠ.height / ΔΔΔⵠ + ⵠⲆΔΔⲆ)
		} else if (this.ᐃΔⵠΔⵠ === ΔⲆ.ⵠᐃΔⲆᐃ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔΔⵠⲆᐃⵠⲆ][ⵠⲆΔ.time];
			this.ⵠᐃᐃⲆⲆ > 85 ? this.ᐃΔⵠᐃⵠ = Math.min(ᐃⲆⲆ, this.ᐃΔⵠᐃⵠ + ᐃⵠᐃⵠ / ⵠⲆᐃⲆ) : this.ᐃΔⵠᐃⵠ = Math.max(ⲆⲆΔ, this.ᐃΔⵠᐃⵠ - ᐃⵠᐃⵠ);
			this.ΔΔⵠᐃⵠ += ᐃⵠᐃⵠ * 60;
			if (this.ΔΔⵠᐃⵠ > 60) this.ΔΔⵠᐃⵠ -= 60;
			var ⵠⲆΔΔⲆ = this.ᐃΔⵠᐃⵠ * (-ⵠⵠⲆᐃⲆ + ⲆΔᐃⵠⲆⵠⵠ * (30 > this.ΔΔⵠᐃⵠ ? this.ΔΔⵠᐃⵠ / 30 : 1 - (this.ΔΔⵠᐃⵠ - 30) / 30));
			ΔⵠᐃⲆᐃ(ⵠ.ΔΔⵠⲆᐃⵠⲆ, ⵠⵠ, -ⵠⵠ.width / 4, -ⵠⵠ.height / 4 + ⵠⲆΔΔⲆ)
		} else if (this.ᐃΔⵠΔⵠ === ΔⲆ.ⲆⵠⵠⲆΔ) {
			var ⲆΔⵠΔᐃ = Math.PI / 2;
			var ⲆΔᐃΔⵠΔⵠ = Math.PI / 4;
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆᐃᐃᐃⵠᐃ][ⵠⲆΔ.time];
			this.ⵠᐃᐃⲆⲆ > 85 ? this.ᐃΔⵠᐃⵠ = Math.min(ΔⲆⵠⲆ, this.ᐃΔⵠᐃⵠ + ᐃⵠᐃⵠ / 4) : this.ᐃΔⵠᐃⵠ = Math.max(0, this.ᐃΔⵠᐃⵠ - ᐃⵠᐃⵠ);
			this.ΔΔⵠᐃⵠ += ᐃⵠᐃⵠ * 60;
			this.ΔΔⵠᐃⵠ > 60 && (this.ΔΔⵠᐃⵠ -= 60);
			var ⵠⲆΔΔⲆ = (-6 + (this.ΔΔⵠᐃⵠ < 30 ? this.ΔΔⵠᐃⵠ / 30 : ΔⲆⵠⲆ - (this.ΔΔⵠᐃⵠ - 30) / 30) * 12) * this.ᐃΔⵠᐃⵠ;
			ΔⵠᐃⲆᐃ(ⵠ.ΔⲆᐃᐃᐃⵠᐃ, ⵠⵠ, -ⵠⵠ.width / ΔᐃⲆᐃⵠ + ⵠⲆΔΔⲆ, -ⵠⵠ.height / 4);
			Δ.restore();
			Δ.save();
			Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
			Δ.rotate(Math.PI + this.ⲆⵠⵠⵠⲆ + ⲆΔᐃΔⵠΔⵠ);
			Δ.translate(120, ⵠⲆΔΔⲆ);
			Δ.rotate(ⲆΔⵠΔᐃ);
			ⵠⵠ = ᐃᐃ[ⵠ.ᐃⵠⲆⲆΔΔⲆ][ⵠⲆΔ.time];
			ᐃΔΔ = -ⵠⵠ.width;
			ΔⵠⲆ = -ⵠⵠ.height;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
			Δ.restore();
			Δ.save();
			Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
			Δ.rotate(Math.PI + this.ⲆⵠⵠⵠⲆ + ⲆΔⵠΔᐃ + ⲆΔᐃΔⵠΔⵠ);
			Δ.translate(120, ⵠⲆΔΔⲆ);
			Δ.rotate(ⲆΔⵠΔᐃ);
			ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠⵠᐃⵠⵠⵠ][ⵠⲆΔ.time];
			ᐃΔΔ = -ⵠⵠ.width;
			ΔⵠⲆ = -ⵠⵠ.height;
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / 2, -ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ)
		}
		Δ.restore()
		if (Settings.VehicleOpacity.enabled) Δ.globalAlpha = 1
	}
	ⵠⲆⲆⲆᐃᐃᐃᐃⵠ = 0;
	ⲆⵠᐃᐃⲆΔⲆⵠᐃ = 1;
	ⵠⲆΔΔᐃΔⲆᐃⲆ = ᐃᐃⲆⵠ;
	ᐃᐃⲆΔΔΔⵠⲆᐃ = ᐃᐃΔΔ;
	ΔᐃΔⲆᐃᐃⵠΔᐃ = ⵠΔⲆᐃⲆ;
	ⲆΔⵠⵠᐃΔᐃ = [
		[],
		[],
		[],
		[],
		[]
	];
	ⵠᐃᐃΔΔⵠᐃⵠⵠ = [ᐃ[439], "#00BB00", "#1CE7E0", "#DBE71C", ᐃ[439]];

	function ᐃⲆⲆΔⲆΔᐃΔⲆ() {
		if (ΔⲆᐃΔᐃ !== this.message) {
			var ⲆⲆⲆ = ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length > 0 ? -95 : ⵠᐃⵠ;
			ⵠΔⲆⲆ(Δ, this.message, 0, ΔⲆⲆΔ - this.message.height + ⲆⲆⲆ)
		}
	}

	function ⲆⲆΔⲆΔⵠᐃᐃᐃ() {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		if (0 < this.text.length) {
			for (var ᐃⲆ = 0; ᐃⲆ < this.text.length && ᐃⲆ < ⵠᐃᐃⲆ; ᐃⲆ++) {
				!this.label[ᐃⲆ] && (this.label[ᐃⲆ] = ᐃΔⵠΔⲆᐃⲆᐃⵠ(Ⲇ, this.text[ᐃⲆ]), this.ⵠⲆⲆΔⲆⲆΔ[ᐃⲆ] = 0, this.ΔⵠᐃΔⲆⲆΔ[ᐃⲆ] = ⵠⵠΔΔ);
				if (ⵠᐃᐃ === ᐃⲆ) this.ΔⵠᐃΔⲆⲆΔ[ᐃⲆΔᐃ] = ΔⲆᐃ.ΔⲆΔⲆⲆ(this.ᐃⲆⲆΔⵠΔᐃ) * 30
			}
			this.ⵠⲆⲆΔⲆⲆΔ[ⲆᐃΔⵠ] += ᐃⵠᐃⵠ;
			if (1 < this.text.length) {
				this.ᐃⲆⲆΔⵠΔᐃ = Math.min(this.ᐃⲆⲆΔⵠΔᐃ + ᐃⵠᐃⵠ, 1);
				if (1 < this.ⵠⲆⲆΔⲆⲆΔ[0] && this.ᐃⲆⲆΔⵠΔᐃ > .5) this.ⵠⲆⲆΔⲆⲆΔ[1] += ᐃⵠᐃⵠ
			}
			for (var ᐃⲆ = 0; ᐃⲆ < this.text.length && 2 > ᐃⲆ; ᐃⲆ++) {
				var ⲆΔΔᐃⲆ = this.ⵠⲆⲆΔⲆⲆΔ[ᐃⲆ];
				if (ⲆΔΔᐃⲆ > 0) {
					if (.25 > ⲆΔΔᐃⲆ) Δ.globalAlpha = ⲆΔΔᐃⲆ * ΔΔⲆΔ;
					else ⲆΔΔᐃⲆ > 3.75 ? Δ.globalAlpha = Math.max(ⵠⲆᐃⲆ * (4 - ⲆΔΔᐃⲆ), ᐃⲆᐃ) : Δ.globalAlpha = ⲆⲆᐃⵠ;
					ⵠΔⲆⲆ(Δ, this.label[ᐃⲆ], -this.label[ᐃⲆ].width / ᐃⵠΔⲆ, -this.ΔⵠᐃΔⲆⲆΔ[ᐃⲆ] + -this.label[ᐃⲆ].height / 2 - 110 * Ⲇ)
				}
			}
			if (this.ⵠⲆⲆΔⲆⲆΔ[ⵠⵠⲆΔ] > 4) {
				this.ⵠⲆⲆΔⲆⲆΔ.shift();
				this.text.shift();
				this.ΔⵠᐃΔⲆⲆΔ.shift();
				this.label.shift();
				this.ᐃⲆⲆΔⵠΔᐃ = ᐃⲆΔ
			}
		}
		Δ.restore()
	}

	function ᐃᐃᐃⵠΔⲆⵠⵠⲆ() {
		var ⲆΔⲆⵠⵠⲆᐃ = ᐃⲆΔ;
		switch (this.right) {
			case ⵠ.ⲆⵠⵠⵠΔ:
			case ⵠ.ⵠΔΔᐃΔ:
			case ⵠ.ⲆΔⲆⲆᐃ:
			case ⵠ.ⵠΔΔΔΔ:
			case ⵠ.ⲆᐃⵠΔᐃ:
			case ⵠ.ᐃⲆⲆᐃᐃ:
				var ⲆΔⲆⵠⵠⲆᐃ = ⲆⲆΔⵠ;
				break
		}
		if (this.ⲆⲆⵠⲆⲆ) {
			for (var ᐃⲆ = ᐃⲆᐃ; this.bubbles.length > ᐃⲆ; ᐃⲆ++) {
				var ΔᐃⲆΔ = this.bubbles[ᐃⲆ];
				if (ΔᐃⲆΔ.ⲆⲆᐃᐃΔ > .5) var ⵠⵠΔᐃ = 1 - ᐃᐃΔⵠ * (ΔᐃⲆΔ.ⲆⲆᐃᐃΔ - .5);
				else var ⵠⵠΔᐃ = ΔᐃⲆΔ.ⲆⲆᐃᐃΔ * 2;
				Δ.globalAlpha = ⵠⵠΔᐃ;
				var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆΔⲆⲆᐃΔ][ⵠⲆΔ.time][ΔᐃⲆΔ.id];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⵠ.ⲆⵠΔ.x + ΔᐃⲆΔ.x - ⵠⵠ.width / 2, ⲆΔⵠ.ⲆⵠΔ.y + ΔᐃⲆΔ.y - ⵠⵠ.height / ΔⲆⵠΔ);
				Δ.globalAlpha = ⲆⲆⲆᐃ
			}
			return
		}
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + this.x, ⲆΔⵠ.ⲆⵠΔ.y + this.y);
		ⵠⲆΔ.ⵠᐃⵠᐃⲆⲆᐃⲆᐃ(this);
		this.action & ᐃⵠⲆⵠ.ⵠⲆⵠⲆᐃᐃΔ && ΔⲆⵠⵠᐃΔΔⵠⵠ(this);
		Δ.save();
		Δ.rotate(this.angle - Math.PI / ⵠΔⵠⲆ);
		if (!(this.action & ᐃⵠⲆⵠ.ⵠⲆⵠⲆᐃᐃΔ)) {
			if (this.action & ᐃⵠⲆⵠ.IDLE || this.ᐃΔⵠΔⵠ !== ⵠᐃⲆⵠ) {
				this.ᐃΔᐃᐃΔΔⵠ.ΔⵠΔ()
			} else if (this.action & ᐃⵠⲆⵠ.ΔΔⲆⲆΔⲆΔ) {
				this.ⵠᐃᐃΔΔⲆⲆ.ΔⵠΔ()
			}
		}
		var Ⲇᐃ = this.ᐃΔᐃᐃΔΔⵠ.ⵠΔΔ;
		var ⲆⲆⲆ = this.ⵠᐃᐃΔΔⲆⲆ.ⵠΔΔ;
		var ⲆᐃᐃᐃΔ;
		if (ⵠ.ᐃⲆᐃΔΔ === this.ⲆΔᐃΔᐃ) {
			ⵠⵠ = ᐃᐃ[ⵠ.ᐃⵠΔᐃΔ][ⵠⲆΔ.time];
			ⲆᐃᐃᐃΔ = ⵠ.ᐃⵠΔᐃΔ
		} else if (this.ⲆΔᐃΔᐃ === ⵠ.ⵠΔᐃΔⵠ) {
			ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆΔⵠⲆ][ⵠⲆΔ.time];
			ⲆᐃᐃᐃΔ = ⵠ.ⵠⲆΔⵠⲆ
		} else if (this.ⲆΔᐃΔᐃ === ⵠ.ΔᐃΔᐃⲆ) {
			ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃⲆⲆᐃⵠⲆ][ⵠⲆΔ.time];
			ⲆᐃᐃᐃΔ = ⵠ.ⵠᐃⲆⲆᐃⵠⲆ
		} else if (ⵠ.ⵠᐃⵠⵠⲆ === this.ⲆΔᐃΔᐃ) {
			ⵠⵠ = ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠⵠⲆ][ⵠⲆΔ.time];
			ⲆᐃᐃᐃΔ = ⵠ.ⵠᐃΔᐃⵠⵠⲆ
		} else this.ΔⲆⲆⲆⵠᐃⲆ ? (ⵠⵠ = ᐃᐃ[ⵠ.ᐃᐃΔⵠΔΔᐃ][ⵠⲆΔ.time], ⲆᐃᐃᐃΔ = ⵠ.ᐃᐃΔⵠΔΔᐃ) : (ⵠⵠ = ᐃᐃ[ⵠ.ΔΔⲆⵠᐃ][this.ⵠⲆᐃᐃ][ⵠⲆΔ.time], ⲆᐃᐃᐃΔ = ⵠ.ΔΔⲆⵠᐃ);
		ᐃΔⵠᐃ = ᐃᐃ[ⵠ.ᐃⵠⵠⵠᐃ][ⵠⲆΔ.time];
		var ⲆΔⲆᐃΔ = ⵠⵠ;
		var ⲆⵠⵠΔΔ = ⲆᐃᐃᐃΔ;
		if (this.action & ᐃⵠⲆⵠ.ⵠⲆⵠⲆᐃᐃΔ) {
			if (this.attack.ΔⵠΔ() && ΔⲆⲆΔⵠ == this.attack.ⵠΔⲆ) {
				this.ⲆΔⲆᐃΔ = !this.ⲆΔⲆᐃΔ;
				this.action -= ᐃⵠⲆⵠ.ⵠⲆⵠⲆᐃᐃΔ;
				if (ⲆΔⵠ.ᐃⲆᐃⲆ == this.ᐃⲆᐃⲆ) ⲆΔⵠ.control.ΔΔⵠᐃ = 0
			}
			if (this.right >= ⵠᐃⲆⵠ) this.ⲆΔⲆᐃΔ = true;
			var ᐃΔᐃⵠ = this.ⲆΔⲆᐃΔ ? this.attack.ⵠΔΔ : -this.attack.ⵠΔΔ / ᐃΔᐃΔ;
			var Δᐃⵠᐃᐃ = this.ⲆΔⲆᐃΔ ? this.attack.ⵠΔΔ / ⵠᐃᐃΔ : -this.attack.ⵠΔΔ;
			if (this.ΔⲆⲆⲆⵠᐃⲆ) {
				Δ.save();
				Δ.rotate(ᐃΔᐃⵠ);
				ⲆΔⲆⲆⲆ(ⲆᐃᐃᐃΔ, ⵠⵠ, -ⵠⵠ.width / 2 - (66 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / ⲆΔⲆΔ + Ⲇ * (5 + ⲆⲆⲆ));
				Δ.restore();
				Δ.save();
				Δ.rotate(Δᐃⵠᐃᐃ);
				ⲆΔⲆⲆⲆ(ⲆᐃᐃᐃΔ, ⵠⵠ, -ⵠⵠ.width / 2 + Ⲇ * (66 + Ⲇᐃ), -ⵠⵠ.height / ⲆᐃᐃⲆ + (5 + ⲆⲆⲆ) * Ⲇ);
				Δ.restore()
			} else {
				if (0 === ⲆΔⲆⵠⵠⲆᐃ) {
					if (this.right === ⵠ.ⵠᐃⲆⵠⵠ) ᐃΔᐃⵠ = -ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ(-ᐃΔᐃⵠ);
					Δ.save();
					Δ.rotate(ᐃΔᐃⵠ);
					ⲆΔⲆⲆⲆ(ⵠ.ᐃⵠⵠⵠᐃ, ᐃΔⵠᐃ, -ᐃΔⵠᐃ.width / ΔΔᐃⲆⵠ - Ⲇ * (49 + Ⲇᐃ), -ᐃΔⵠᐃ.height / 2 + Ⲇ * (15 + ⲆⲆⲆ));
					if (this.right === ⵠ.ⵠΔⲆΔᐃ) {
						var ᐃⵠᐃⲆⲆⵠⵠ = ᐃᐃ[this.right][this.ⲆⵠᐃⲆᐃ][ⵠⲆΔ.time];
						ΔΔᐃΔΔ(this.right, this.ⲆⵠᐃⲆᐃ, ᐃⵠᐃⲆⲆⵠⵠ, -ᐃⵠᐃⲆⲆⵠⵠ.width / 4 - (62 + Ⲇᐃ) * Ⲇ, -ᐃⵠᐃⲆⲆⵠⵠ.height / ΔⵠⲆⵠᐃ + (ⲆⲆⲆ + ⵠⲆΔⵠᐃᐃⲆ) * Ⲇ)
					} else ⲆⵠⲆⲆΔΔⵠ(this.right, Ⲇᐃ, ⲆⲆⲆ);
					if (ⲆᐃᐃᐃΔ >= ⵠ.ⵠⲆΔⵠⲆ) ΔⵠᐃⲆᐃ(ⲆᐃᐃᐃΔ, ⵠⵠ, -ⵠⵠ.width / 4 - Ⲇ * (49 + Ⲇᐃ), -ⵠⵠ.height / 4 + (11 + ⲆⲆⲆ) * Ⲇ);
					else if (ⲆᐃᐃᐃΔ !== ⵠ.ᐃⵠΔᐃΔ) {
						ΔΔᐃΔΔ(ⲆᐃᐃᐃΔ, this.ⵠⲆᐃᐃ, ⵠⵠ, -ⵠⵠ.width / 4 - (49 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / 4 + Ⲇ * (11 + ⲆⲆⲆ))
					} else ⲆΔⲆⲆⲆ(ⲆᐃᐃᐃΔ, ⵠⵠ, -ⵠⵠ.width / 2 - Ⲇ * (49 + Ⲇᐃ), -ⵠⵠ.height / ᐃⲆⵠᐃ + Ⲇ * (ⲆⲆⲆⲆᐃⲆΔ + ⲆⲆⲆ));
					Δ.restore();
					Δ.save();
					Δ.rotate(Δᐃⵠᐃᐃ);
					ⲆΔⲆⲆⲆ(ⵠ.ᐃⵠⵠⵠᐃ, ᐃΔⵠᐃ, -ᐃΔⵠᐃ.width / 2 + Ⲇ * (49 + Ⲇᐃ), -ᐃΔⵠᐃ.height / 2 + Ⲇ * (15 + ⲆⲆⲆ));
					if (ⵠ.ⵠⲆΔⵠⲆ <= ⲆᐃᐃᐃΔ) ΔⵠᐃⲆᐃ(ⲆᐃᐃᐃΔ, ⵠⵠ, -ⵠⵠ.width / 4 + Ⲇ * (49 + Ⲇᐃ), -ⵠⵠ.height / 4 + Ⲇ * (11 + ⲆⲆⲆ));
					else ⵠ.ᐃⵠΔᐃΔ !== ⲆᐃᐃᐃΔ ? ΔΔᐃΔΔ(ⲆᐃᐃᐃΔ, this.ⵠⲆᐃᐃ, ⵠⵠ, -ⵠⵠ.width / ΔᐃⲆᐃⵠ + Ⲇ * (49 + Ⲇᐃ), -ⵠⵠ.height / 4 + (11 + ⲆⲆⲆ) * Ⲇ) : ⲆΔⲆⲆⲆ(ⲆᐃᐃᐃΔ, ⵠⵠ, -ⵠⵠ.width / 2 + Ⲇ * (49 + Ⲇᐃ), -ⵠⵠ.height / ᐃⲆⵠᐃ + (11 + ⲆⲆⲆ) * Ⲇ);
					Δ.restore()
				}
			}
		} else {
			if (this.ΔⲆⲆⲆⵠᐃⲆ) {
				ⲆΔⲆⲆⲆ(ⲆᐃᐃᐃΔ, ⵠⵠ, -ⵠⵠ.width / ΔⲆⵠΔ - (66 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / ⵠΔⵠⲆ + Ⲇ * (5 + ⲆⲆⲆ));
				ⲆΔⲆⲆⲆ(ⲆᐃᐃᐃΔ, ⵠⵠ, -ⵠⵠ.width / 2 + Ⲇ * (66 + Ⲇᐃ), -ⵠⵠ.height / 2 + (5 + ⲆⲆⲆ) * Ⲇ)
			} else {
				if (ⵠᐃΔ === ⲆΔⲆⵠⵠⲆᐃ) {
					ⲆΔⲆⲆⲆ(ⵠ.ᐃⵠⵠⵠᐃ, ᐃΔⵠᐃ, -ᐃΔⵠᐃ.width / ΔΔⵠⲆ - Ⲇ * (49 + Ⲇᐃ), -ᐃΔⵠᐃ.height / 2 + Ⲇ * (ⲆᐃⲆⵠⵠ + ⲆⲆⲆ));
					if (ⵠ.ⵠΔⲆΔᐃ === this.right) {
						var ᐃⵠᐃⲆⲆⵠⵠ = ᐃᐃ[this.right][this.ⲆⵠᐃⲆᐃ][ⵠⲆΔ.time];
						ΔΔᐃΔΔ(this.right, this.ⲆⵠᐃⲆᐃ, ᐃⵠᐃⲆⲆⵠⵠ, -ᐃⵠᐃⲆⲆⵠⵠ.width / ΔΔᐃⵠΔ - (62 + Ⲇᐃ) * Ⲇ, -ᐃⵠᐃⲆⲆⵠⵠ.height / ᐃᐃⵠΔ + Ⲇ * (ⲆⲆⲆ + ᐃᐃΔΔⵠᐃᐃ))
					} else ⲆⵠⲆⲆΔΔⵠ(this.right, Ⲇᐃ, ⲆⲆⲆ);
					if (ⵠ.ⵠⲆΔⵠⲆ <= ⲆᐃᐃᐃΔ) ΔⵠᐃⲆᐃ(ⲆᐃᐃᐃΔ, ⵠⵠ, -ⵠⵠ.width / ⵠⵠⵠᐃⲆ - Ⲇ * (49 + Ⲇᐃ), -ⵠⵠ.height / ΔΔᐃⵠΔ + Ⲇ * (11 + ⲆⲆⲆ));
					else ⲆᐃᐃᐃΔ !== ⵠ.ᐃⵠΔᐃΔ ? ΔΔᐃΔΔ(ⲆᐃᐃᐃΔ, this.ⵠⲆᐃᐃ, ⵠⵠ, -ⵠⵠ.width / ⵠΔⲆᐃⲆ - (49 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / ⵠΔⲆᐃⲆ + (11 + ⲆⲆⲆ) * Ⲇ) : ⲆΔⲆⲆⲆ(ⲆᐃᐃᐃΔ, ⵠⵠ, -ⵠⵠ.width / 2 - (49 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / ⲆΔⲆΔ + Ⲇ * (11 + ⲆⲆⲆ));
					ⲆΔⲆⲆⲆ(ⵠ.ᐃⵠⵠⵠᐃ, ᐃΔⵠᐃ, -ᐃΔⵠᐃ.width / 2 + Ⲇ * (49 + Ⲇᐃ), -ᐃΔⵠᐃ.height / ⵠΔⵠⲆ + Ⲇ * (ⲆⲆⲆΔⵠ + ⲆⲆⲆ));
					if (ⵠ.ⵠⲆΔⵠⲆ <= ⲆᐃᐃᐃΔ) ΔⵠᐃⲆᐃ(ⲆᐃᐃᐃΔ, ⵠⵠ, -ⵠⵠ.width / 4 + Ⲇ * (49 + Ⲇᐃ), -ⵠⵠ.height / ΔΔΔⵠ + Ⲇ * (11 + ⲆⲆⲆ));
					else ⲆᐃᐃᐃΔ !== ⵠ.ᐃⵠΔᐃΔ ? ΔΔᐃΔΔ(ⲆᐃᐃᐃΔ, this.ⵠⲆᐃᐃ, ⵠⵠ, -ⵠⵠ.width / 4 + (49 + Ⲇᐃ) * Ⲇ, -ⵠⵠ.height / 4 + (ΔΔⵠⵠΔᐃⲆ + ⲆⲆⲆ) * Ⲇ) : ⲆΔⲆⲆⲆ(ⲆᐃᐃᐃΔ, ⵠⵠ, -ⵠⵠ.width / ᐃⵠΔⲆ + Ⲇ * (49 + Ⲇᐃ), -ⵠⵠ.height / ΔΔᐃⲆⵠ + (11 + ⲆⲆⲆ) * Ⲇ)
				}
			}
		}
		if (this.ᐃΔⲆΔΔ && ΔΔⵠ > this.ⲆΔᐃΔᐃ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠⲆΔ][this.ᐃΔⲆⲆΔΔΔ][ⵠⲆΔ.time];
			ΔΔᐃΔΔ(ⵠ.ⲆⵠⲆΔ, this.ᐃΔⲆⲆΔΔΔ, ⵠⵠ, -ⵠⵠ.width / ΔᐃⲆᐃⵠ, -ⵠⵠ.height / 4 - 39 * Ⲇ)
		}
		if (this.ΔⲆⲆⲆⵠᐃⲆ) {
			var ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔⵠⲆⵠⲆᐃ][ⵠⲆΔ.time];
			ⲆΔⲆⲆⲆ(ⵠ.ⲆΔⵠⲆⵠⲆᐃ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ⵠΔⵠⲆ);
			this.ᐃⲆⵠⲆⲆᐃⵠ.ΔⵠΔ();
			ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔⲆΔᐃᐃⲆ][ⵠⲆΔ.time];
			ⲆΔⲆⲆⲆ(ⵠ.ᐃΔⲆΔᐃᐃⲆ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2 + this.ᐃⲆⵠⲆⲆᐃⵠ.ⵠΔΔ)
		} else {
			var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔⵠΔΔ][this.ⵠⲆᐃᐃ][ⵠⲆΔ.time];
			if (ⵠ.ᐃⲆᐃΔΔ !== this.ⲆΔᐃΔᐃ) {
				ΔΔᐃΔΔ(ⵠ.ᐃΔⵠΔΔ, this.ⵠⲆᐃᐃ, ⵠⵠ, -ⵠⵠ.width / 4, -ⵠⵠ.height / 4);
				if (0 < this.ⵠΔⵠⲆⲆ) {
					var ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆⲆⵠᐃ][this.ⵠΔⵠⲆⲆ][ⵠⲆΔ.time];
					ΔΔᐃΔΔ(ⵠ.ΔⲆⲆⵠᐃ, this.ⵠΔⵠⲆⲆ, ⵠⵠ, -ⵠⵠ.width / ΔΔᐃⵠΔ, -ⵠⵠ.height / 4)
				}
			}
		}
		if (this.action & ᐃⵠⲆⵠ.ⲆΔⲆᐃⲆⵠᐃ) {
			if (this.ᐃΔᐃⵠⵠ.ΔⵠΔ() && this.ᐃΔᐃⵠⵠ.ⵠΔⲆ == false) this.action -= ᐃⵠⲆⵠ.ⲆΔⲆᐃⲆⵠᐃ;
			Δ.globalAlpha = .6 - this.ᐃΔᐃⵠⵠ.ⵠΔΔ;
			if (this.ΔⲆⲆⲆⵠᐃⲆ) {
				var ⵠⵠ = ᐃᐃ[ⵠ.ⲆΔⵠΔᐃⲆⵠ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ⵠΔⵠⲆ, -ⵠⵠ.height / 2)
			} else {
				var ⵠⵠ = ⲆⲆⲆᐃⵠⲆⵠ(this.ⵠⲆᐃᐃ, ᐃᐃ[ⵠ.ᐃΔⵠΔΔ][this.ⵠⲆᐃᐃ][ⲆᐃΔⵠ], ⲆⵠᐃᐃⲆΔⲆⵠᐃ);
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⵠⵠ.width / ΔⲆΔⲆ, ⵠⵠ.height / ⲆⲆⲆΔ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ⵠΔΔΔ)
			}
			Δ.globalAlpha = ⲆⲆⵠ
		}
		if (this.action & ᐃⵠⲆⵠ.ΔⵠᐃΔΔᐃΔ) {
			this.ⵠⲆΔⵠⲆⲆⵠ.ΔⵠΔ() && this.ⵠⲆΔⵠⲆⲆⵠ.ⵠΔⲆ == false && (this.action -= ᐃⵠⲆⵠ.ΔⵠᐃΔΔᐃΔ);
			Δ.globalAlpha = .6 - this.ⵠⲆΔⵠⲆⲆⵠ.ⵠΔΔ;
			var ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠᐃΔΔᐃΔ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
			Δ.globalAlpha = 1
		}
		if (this.action & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
			this.ΔΔᐃ.ΔⵠΔ() && false == this.ΔΔᐃ.ⵠΔⲆ && (this.action -= ᐃⵠⲆⵠ.ᐃᐃᐃΔ);
			Δ.globalAlpha = .6 - this.ΔΔᐃ.ⵠΔΔ;
			if (this.ΔⲆⲆⲆⵠᐃⲆ) {
				var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⵠⵠΔΔⲆⲆ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / ΔⲆⵠΔ)
			} else {
				var ⵠⵠ = ⲆⲆⲆᐃⵠⲆⵠ(this.ⵠⲆᐃᐃ, ᐃᐃ[ⵠ.ᐃΔⵠΔΔ][this.ⵠⲆᐃᐃ][0], ⵠⲆⲆⲆᐃᐃᐃᐃⵠ);
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⵠⵠ.width / 4, ⵠⵠ.height / ΔⲆⵠΔⲆ, -ⵠⵠ.width / ΔΔⵠⲆ, -ⵠⵠ.height / 2)
			}
			Δ.globalAlpha = ᐃΔⲆΔ
		}
		if (this.action & ᐃⵠⲆⵠ.ⲆⲆᐃᐃᐃ) {
			if (this.freeze.ΔⵠΔ() && ᐃⵠᐃΔⵠ == this.freeze.ⵠΔⲆ) this.action -= ᐃⵠⲆⵠ.ⲆⲆᐃᐃᐃ;
			Δ.globalAlpha = .6 - this.freeze.ⵠΔΔ;
			var ⵠⵠ = ⲆⲆⲆᐃⵠⲆⵠ(this.ⵠⲆᐃᐃ, ᐃᐃ[ⵠ.ᐃΔⵠΔΔ][this.ⵠⲆᐃᐃ][ⲆᐃΔⵠ], ⵠⲆΔΔᐃΔⲆᐃⲆ);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, ⵠⵠ.width / ⵠⵠⵠᐃⲆ, ⵠⵠ.height / 4, -ⵠⵠ.width / 2, -ⵠⵠ.height / ᐃᐃⲆⵠ);
			Δ.globalAlpha = 1
		}
		if (this.action & ᐃⵠⲆⵠ.ⲆⲆᐃⵠᐃᐃⲆ) {
			if (this.ᐃⲆᐃΔΔⲆⲆ.ΔⵠΔ() && Ⲇⵠᐃⵠᐃ == this.ᐃⲆᐃΔΔⲆⲆ.ⵠΔⲆ) this.action -= ᐃⵠⲆⵠ.ⲆⲆᐃⵠᐃᐃⲆ;
			Δ.globalAlpha = .6 - this.ᐃⲆᐃΔΔⲆⲆ.ⵠΔΔ;
			if (this.ΔⲆⲆⲆⵠᐃⲆ) {
				var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⲆᐃⲆᐃⵠᐃ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2)
			} else {
				var ⵠⵠ = ⲆⲆⲆᐃⵠⲆⵠ(this.ⵠⲆᐃᐃ, ᐃᐃ[ⵠ.ᐃΔⵠΔΔ][this.ⵠⲆᐃᐃ][Δⵠⵠ], ᐃᐃⲆΔΔΔⵠⲆᐃ);
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⵠⵠ.width / ΔⵠⲆⵠᐃ, ⵠⵠ.height / ΔⲆΔⲆ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2)
			}
			Δ.globalAlpha = 1
		}
		ⵠⵠᐃᐃᐃΔⵠΔᐃ(this.ⲆΔᐃΔᐃ);
		if (ⲆΔⲆⵠⵠⲆᐃ === ᐃΔΔⲆ) {
			this.action & ᐃⵠⲆⵠ.ⵠⲆⵠⲆᐃᐃΔ && (Ⲇᐃ += ⲆⵠⲆⲆⲆⲆᐃ * this.attack.ⵠΔΔ);
			ⲆΔⲆⲆⲆ(ⵠ.ᐃⵠⵠⵠᐃ, ᐃΔⵠᐃ, -ᐃΔⵠᐃ.width / 2 - Ⲇ * 26, -ᐃΔⵠᐃ.height / ΔΔⵠⲆ + Ⲇ * (31 + ⲆⲆⲆ + Ⲇᐃ));
			if (ⵠ.ⵠⲆΔⵠⲆ <= ⲆⵠⵠΔΔ) ΔⵠᐃⲆᐃ(ⲆⵠⵠΔΔ, ⲆΔⲆᐃΔ, -ⲆΔⲆᐃΔ.width / 4 - 26 * Ⲇ, -ⲆΔⲆᐃΔ.height / 4 + Ⲇ * (27 + ⲆⲆⲆ + Ⲇᐃ));
			else if (ⵠ.ᐃⵠΔᐃΔ !== ⲆⵠⵠΔΔ) ΔΔᐃΔΔ(ⲆⵠⵠΔΔ, this.ⵠⲆᐃᐃ, ⲆΔⲆᐃΔ, -ⲆΔⲆᐃΔ.width / ᐃΔΔΔⲆ - 26 * Ⲇ, -ⲆΔⲆᐃΔ.height / 4 + (27 + ⲆⲆⲆ + Ⲇᐃ) * Ⲇ);
			else ⲆΔⲆⲆⲆ(ⲆⵠⵠΔΔ, ⲆΔⲆᐃΔ, -ⲆΔⲆᐃΔ.width / 2 - 26 * Ⲇ, -ⲆΔⲆᐃΔ.height / 2 + (27 + ⲆⲆⲆ + Ⲇᐃ) * Ⲇ);
			ⲆΔⲆⲆⲆ(ⵠ.ᐃⵠⵠⵠᐃ, ᐃΔⵠᐃ, -ᐃΔⵠᐃ.width / 2 + 26 * Ⲇ, -ᐃΔⵠᐃ.height / 2 + Ⲇ * (31 + ⲆⲆⲆ + Ⲇᐃ));
			if (ⵠ.ⵠⲆΔⵠⲆ <= ⲆⵠⵠΔΔ) ΔⵠᐃⲆᐃ(ⲆⵠⵠΔΔ, ⲆΔⲆᐃΔ, -ⲆΔⲆᐃΔ.width / 4 + Ⲇ * 26, -ⲆΔⲆᐃΔ.height / 4 + (27 + ⲆⲆⲆ + Ⲇᐃ) * Ⲇ);
			else if (ⵠ.ᐃⵠΔᐃΔ !== ⲆⵠⵠΔΔ) ΔΔᐃΔΔ(ⲆⵠⵠΔΔ, this.ⵠⲆᐃᐃ, ⲆΔⲆᐃΔ, -ⲆΔⲆᐃΔ.width / 4 + Ⲇ * 26, -ⲆΔⲆᐃΔ.height / ⵠΔⲆᐃⲆ + (27 + ⲆⲆⲆ + Ⲇᐃ) * Ⲇ);
			else ⲆΔⲆⲆⲆ(ⲆⵠⵠΔΔ, ⲆΔⲆᐃΔ, -ⲆΔⲆᐃΔ.width / ᐃᐃΔⵠ + 26 * Ⲇ, -ⲆΔⲆᐃΔ.height / ⲆΔⲆΔ + Ⲇ * (27 + ⲆⲆⲆ + Ⲇᐃ));
			ⲆⵠⵠⲆⵠᐃⵠⲆᐃ(this.right, ⵠⵠⵠ, ⲆⲆⲆ + Ⲇᐃ)
		}
		Δ.restore();
		if (Settings.ShowHoodNames.enabled || ⵠ.ⵠΔᐃΔⲆ !== this.ⲆΔᐃΔᐃ && this.ⲆΔᐃΔᐃ !== ⵠ.ᐃⲆᐃΔΔ) {
			if (0 < this.ΔΔⵠⵠⵠ) {
				!this.ᐃΔΔⵠ.ⵠᐃⵠⲆⵠⲆΔ && (this.ᐃΔΔⵠ.ⵠᐃⵠⲆⵠⲆΔ = ⲆⵠᐃⲆⲆ(Ⲇ, this.ᐃΔΔⵠ.ⵠⲆⵠΔⵠ, 20, ᐃ[469], ᐃ[76], 2, null, null, Ⲇ * 300));
				var ⵠⵠ = this.ᐃΔΔⵠ.ⵠᐃⵠⲆⵠⲆΔ
			} else {
				!this.ᐃΔΔⵠ.label && (this.ᐃΔΔⵠ.label = ⲆⵠᐃⲆⲆ(Ⲇ, this.ᐃΔΔⵠ.ⵠⲆⵠΔⵠ, ⵠⲆΔⲆⲆ, ᐃ[448], ᐃ[76], ⲆΔΔⲆ, null, null, Ⲇ * 300));
				var ⵠⵠ = this.ᐃΔΔⵠ.label
			}
			ⵠ.ᐃⵠΔ == ⵠⲆΔ.ⵠΔⵠ && (Δ.globalAlpha = .5);
			var Ⲇᐃ = Math.floor(-ⵠⵠ.width / 2);
			var ⲆⲆⲆ = Math.floor(-ⵠⵠ.height / 2 - 70 * Ⲇ);
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ);
			if (this.ᐃΔΔⵠ.level > 0) {
				var ⲆⲆⵠΔ = Ⲇᐃ + ⵠⵠ.width + 5;
				ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔⲆΔΔⲆⵠ];
				ᐃⵠⵠⵠⲆᐃΔ[this.ᐃΔΔⵠ.level] === undefined && (ᐃⵠⵠⵠⲆᐃΔ[this.ᐃΔΔⵠ.level] = ⲆⵠᐃⲆⲆ(Ⲇ, "[" + this.ᐃΔΔⵠ.level + "]", 20, "#F9E8A2", ᐃ[76], 2, null, null, 50 * Ⲇ));
				ⵠΔⲆⲆ(Δ, ᐃⵠⵠⵠⲆᐃΔ[this.ᐃΔΔⵠ.level], ⲆⲆⵠΔ, ⲆⲆⲆ)
			}
			Δ.globalAlpha = ᐃⵠᐃᐃ
		} else {
			var ⲆⲆⲆ = Math.floor(-70 * Ⲇ);
			var Ⲇᐃ = Math.floor(ᐃᐃ[ⵠ.ΔΔΔᐃⵠΔⵠ].width / 1.5)
		}
		if (ⲆΔⵠ.ΔⲆᐃⵠᐃⵠⵠ(this.ⲆⲆΔᐃ)) {
			if (ⲆΔⵠ.ΔⲆᐃⲆⲆ[0] == this.ⲆⲆΔᐃ) var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠⵠⵠⵠⵠⲆ];
			else var ⵠⵠ = ᐃᐃ[ⵠ.ΔΔΔᐃⵠΔⵠ];
			ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ - ⵠⵠ.width - 5, ⲆⲆⲆ - ᐃᐃⲆⲆⲆ)
		}
		Δ.restore()
	}

	function ⲆⲆⲆᐃⵠⲆⵠ(ᐃΔⲆⵠΔⲆᐃ, ΔⵠΔⲆᐃⵠΔ, ⲆΔΔᐃⲆ) {
		if (ⲆⲆⲆᐃ !== ΔⵠΔⲆᐃⵠΔ.ⲆΔΔΔⵠⲆⵠ()) return ΔⵠΔⲆᐃⵠΔ;
		var ᐃⵠⲆΔⲆⵠᐃ = ⲆΔⵠⵠᐃΔᐃ[ⲆΔΔᐃⲆ][ᐃΔⲆⵠΔⲆᐃ];
		if (undefined === ᐃⵠⲆΔⲆⵠᐃ) {
			ᐃⵠⲆΔⲆⵠᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
			var ⵠⵠΔᐃⲆⲆⵠ = ᐃⵠⲆΔⲆⵠᐃ.getContext(ᐃ[269]);
			var Δᐃⵠ = ΔⵠΔⲆᐃⵠΔ.width;
			var Ⲇⵠⵠ = ΔⵠΔⲆᐃⵠΔ.height;
			ᐃⵠⲆΔⲆⵠᐃ.width = Δᐃⵠ;
			ᐃⵠⲆΔⲆⵠᐃ.height = Ⲇⵠⵠ;
			ⵠⵠΔᐃⲆⲆⵠ.drawImage(ΔⵠΔⲆᐃⵠΔ, 0, ⵠᐃΔ);
			ⵠⵠΔᐃⲆⲆⵠ.globalCompositeOperation = "source-in";
			ⵠⵠΔᐃⲆⲆⵠ.fillStyle = ⵠᐃᐃΔΔⵠᐃⵠⵠ[ⲆΔΔᐃⲆ];
			ⵠⵠΔᐃⲆⲆⵠ.fillRect(0, 0, Δᐃⵠ, Ⲇⵠⵠ);
			ⲆΔⵠⵠᐃΔᐃ[ⲆΔΔᐃⲆ][ᐃΔⲆⵠΔⲆᐃ] = ᐃⵠⲆΔⲆⵠᐃ
		}
		return ᐃⵠⲆΔⲆⵠᐃ
	}

	function ⲆⲆⲆⵠⲆⲆⲆΔⵠ(Δⵠ, ΔΔᐃⵠ) {
		if (this.text) {
			if (!this.timeout.ⵠΔⲆ) Δ.globalAlpha = ⵠᐃᐃ;
			else Δ.globalAlpha = ⲆⲆⵠ - this.timeout.ⵠΔΔ;
			if (!this.label) this.label = ⲆⵠᐃⲆⲆ(Ⲇ, this.text, 40, Δⵠ, null, null, null, null, null, ΔΔᐃⵠ, ΔΔⲆΔΔ);
			ⵠΔⲆⲆ(Δ, this.label, (ⲆΔⵠΔ - this.label.width) / 2, Ⲇ * 50);
			Δ.globalAlpha = ᐃⲆⲆ;
			this.timeout.ΔⵠΔ() && false == this.timeout.ⵠΔⲆ && (this.text = this.list.shift(), this.label = null)
		}
	}

	function ΔΔΔⲆᐃᐃᐃΔⵠ() {
		if (this.enabled && 0 <= this.ⲆⲆΔⵠⵠ) {
			var ᐃΔΔᐃⲆⵠⲆⲆᐃ = (new Date).getTime();
			var ᐃᐃΔ = ᐃΔΔᐃⲆⵠⲆⲆᐃ - this.ⲆⲆΔⵠⵠ;
			var ⵠⵠΔᐃ = ᐃᐃΔ % 1e3 / 1e3;
			.5 < ⵠⵠΔᐃ ? ⵠⵠΔᐃ = 1 - (ⵠⵠΔᐃ - .5) * ⵠΔⵠⲆ : ⵠⵠΔᐃ *= 2;
			ᐃᐃΔ = Math.floor(ᐃᐃΔ / 1e3);
			if (ᐃᐃΔ < ᐃΔᐃᐃ.ΔΔᐃⵠⵠⲆⵠ) {
				ᐃᐃΔ = ᐃΔᐃᐃ.ΔΔᐃⵠⵠⲆⵠ - ᐃᐃΔ;
				if (!this.label) {
					this.label = ⲆⵠᐃⲆⲆ(Ⲇ, " seconds before you die", 40, ᐃ[188], null, null, null, null, null, ᐃ[76], ⵠΔⲆⲆΔ)
				}
				if (this.now != ᐃᐃΔ || !this.ΔᐃΔᐃⵠⲆᐃ) {
					this.now = ᐃᐃΔ;
					this.ΔᐃΔᐃⵠⲆᐃ = ⲆⵠᐃⲆⲆ(Ⲇ, "" + ᐃᐃΔ, 40, ᐃ[188], null, null, null, null, null, ᐃ[76], ΔⵠᐃⲆΔ)
				}
				ⵠΔⲆⲆ(Δ, this.label, (ⲆΔⵠΔ - this.label.width) / Ⲇᐃⵠⵠ, Ⲇ * 100);
				Δ.globalAlpha = ⵠⵠΔᐃ;
				ⵠΔⲆⲆ(Δ, this.ΔᐃΔᐃⵠⲆᐃ, (ⲆΔⵠΔ - this.label.width) / ΔⲆⵠΔ - this.ΔᐃΔᐃⵠⲆᐃ.width + Ⲇ * 15, ⵠᐃⵠⲆᐃᐃΔ * Ⲇ);
				Δ.globalAlpha = 1
			}
		}
	}
	var ⵠΔΔⲆᐃΔⲆ = ᐃⲆΔ;

	function ⲆⲆΔⲆⵠⲆⵠ(ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ΔΔ, ᐃᐃⲆ, ⲆᐃΔΔ, ᐃⲆⲆⲆ) {
		undefined === ᐃⲆⲆⲆ && (ᐃⲆⲆⲆ = 0);
		for (var ⲆⲆᐃΔ = ⲆᐃΔΔ; ᐃⲆⲆⲆ <= ⲆⲆᐃΔ; ⲆⲆᐃΔ--) {
			for (var ᐃⲆ = ΔⲆⲆᐃ; ΔⲆⲆⵠ >= ᐃⲆ; ᐃⲆ++) {
				for (var ⲆⲆⲆⵠ = ⲆᐃⵠⲆ; ᐃᐃΔᐃ >= ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
					var Δᐃⵠⵠ = ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ];
					if (!Δᐃⵠⵠ || !Δᐃⵠⵠ[ᐃᐃⲆ]) continue;
					var ⵠΔⲆ = Δᐃⵠⵠ[ᐃᐃⲆ][ⲆⲆᐃΔ];
					if (Ⲇᐃᐃⵠᐃ === ⵠΔⲆ) continue;
					for (var ᐃᐃⵠᐃ = 0; ⵠΔⲆ.length > ᐃᐃⵠᐃ; ᐃᐃⵠᐃ++) {
						var ΔⵠΔⵠ = ⵠΔⲆ[ᐃᐃⵠᐃ];
						var ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time][ⲆⲆᐃΔ];
						var ᐃᐃⵠΔᐃᐃᐃ = (ⵠΔΔⲆᐃΔⲆ + (ᐃⲆ + ⲆⲆⲆⵠ) * ⲆⵠⵠⲆ) % 60;
						var ⲆΔΔᐃⲆ = 30 > ᐃᐃⵠΔᐃᐃᐃ ? ᐃᐃⵠΔᐃᐃᐃ / 30 : ΔⲆⵠⲆ - (ᐃᐃⵠΔᐃᐃᐃ - 30) / 30;
						var ᐃΔΔ = -ⵠⵠ.width * (Δⵠᐃ + ⲆΔΔᐃⲆ * .9 / 30);
						var ΔⵠⲆ = (ᐃΔΔⲆ + .9 * ⲆΔΔᐃⲆ / 30) * -ⵠⵠ.height;
						ᐃᐃⵠΔᐃᐃᐃ = (ⵠΔΔⲆᐃΔⲆ + ⲆᐃⲆⲆΔ * (ᐃⲆ + ⲆⲆⲆⵠ)) % 60;
						ⲆΔΔᐃⲆ = ᐃᐃⵠΔᐃᐃᐃ < 30 ? ᐃᐃⵠΔᐃᐃᐃ / 30 : 1 - (ᐃᐃⵠΔᐃᐃᐃ - 30) / 30;
						var ΔᐃⵠΔ = Δ.globalAlpha;
						Δ.globalAlpha = (.9 + ⲆΔΔᐃⲆ * .1) * ΔᐃⵠΔ;
						ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⵠ.ⲆⵠΔ.x + ΔⵠΔⵠ.x - ᐃΔΔ / ⵠⵠᐃⲆ, ⲆΔⵠ.ⲆⵠΔ.y + ΔⵠΔⵠ.y - ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
						Δ.globalAlpha = ΔᐃⵠΔ
					}
				}
			}
		}
	}

	function ᐃΔⲆᐃΔⵠᐃ(ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ΔΔ, ᐃᐃⲆ, ⲆᐃΔΔ, ᐃⲆⲆⲆ) {
		if (ΔⵠⲆⲆΔ === ᐃⲆⲆⲆ) ᐃⲆⲆⲆ = Ⲇⵠᐃ;
		ⵠⲆΔ.ⵠᐃⵠᐃ[ΔΔ].ΔⵠΔ();
		for (var ⲆⲆᐃΔ = ⲆᐃΔΔ; ᐃⲆⲆⲆ <= ⲆⲆᐃΔ; ⲆⲆᐃΔ--) {
			for (var ᐃⲆ = ΔⲆⲆᐃ; ΔⲆⲆⵠ >= ᐃⲆ; ᐃⲆ++) {
				for (var ⲆⲆⲆⵠ = ⲆᐃⵠⲆ; ⲆⲆⲆⵠ <= ᐃᐃΔᐃ; ⲆⲆⲆⵠ++) {
					var Δᐃⵠⵠ = ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ];
					if (!Δᐃⵠⵠ || !Δᐃⵠⵠ[ᐃᐃⲆ]) continue;
					var ⵠΔⲆ = Δᐃⵠⵠ[ᐃᐃⲆ][ⲆⲆᐃΔ];
					if (ⵠΔⲆ === ΔⵠᐃΔᐃ) continue;
					for (var ᐃᐃⵠᐃ = 0; ᐃᐃⵠᐃ < ⵠΔⲆ.length; ᐃᐃⵠᐃ++) {
						var ΔⵠΔⵠ = ⵠΔⲆ[ᐃᐃⵠᐃ];
						if (ΔⵠΔⵠ.ΔⵠΔ) {
							ΔⵠΔⵠ.ΔΔᐃ.ΔⵠΔ() && ⵠⲆⵠⵠΔ == ΔⵠΔⵠ.ΔΔᐃ.ⵠΔⲆ && (ΔⵠΔⵠ.ΔⵠΔ = false);
							var ⵠΔΔ = 600 * ((1 - ΔⵠΔⵠ.ΔΔᐃ.ⵠΔΔ) * ᐃⵠᐃⵠ) * Ⲇ;
							var Ⲇᐃ = ⵠΔΔ * Math.sin(ΔⵠΔⵠ.angle);
							var ⲆⲆⲆ = Math.cos(ΔⵠΔⵠ.angle) * ⵠΔΔ
						} else {
							var Ⲇᐃ = 0;
							var ⲆⲆⲆ = 0
						}
						var ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time][ⲆⲆᐃΔ];
						var ᐃΔΔ = ⵠⲆΔ.ⵠᐃⵠᐃ[ΔΔ].ⵠΔΔ * -ⵠⵠ.width;
						var ΔⵠⲆ = ⵠⲆΔ.ⵠᐃⵠᐃ[ΔΔ].ⵠΔΔ * -ⵠⵠ.height;
						ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⵠ.ⲆⵠΔ.x + ΔⵠΔⵠ.x - ᐃΔΔ / ΔⵠⲆⲆ + Ⲇᐃ, ⲆΔⵠ.ⲆⵠΔ.y + ΔⵠΔⵠ.y - ΔⵠⲆ / 2 + ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ)
					}
				}
			}
		}
	}
	var ΔᐃΔΔΔᐃⵠ = [];
	for (var ᐃⲆ = 0; ᐃⲆ < ⵠⵠΔΔᐃ; ᐃⲆ++) {
		var ΔⲆⵠ = ᐃΔⲆΔ;
		if (Math.random() < .25) ΔⲆⵠ = ΔᐃⲆⲆ;
		ΔᐃΔΔΔᐃⵠ.push(ΔⲆⵠ)
	}
	ⵠΔⵠΔΔ = ᐃΔⵠΔ;

	function ΔⲆᐃᐃΔᐃᐃⵠᐃ(ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ΔΔ, ᐃᐃⲆ, ⲆᐃΔΔ, ᐃⲆⲆⲆ, ⲆⵠⵠⲆⲆ) {
		ᐃⲆⲆⲆ === undefined && (ᐃⲆⲆⲆ = 0);
		for (var ⲆⲆᐃΔ = ⲆᐃΔΔ; ⲆⲆᐃΔ >= ᐃⲆⲆⲆ; ⲆⲆᐃΔ--) {
			for (var ᐃⲆ = ΔⲆⲆᐃ; ΔⲆⲆⵠ >= ᐃⲆ; ᐃⲆ++) {
				for (var ⲆⲆⲆⵠ = ⲆᐃⵠⲆ; ⲆⲆⲆⵠ <= ᐃᐃΔᐃ; ⲆⲆⲆⵠ++) {
					var Δᐃⵠⵠ = ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ];
					if (ⵠΔΔⲆΔ === Δᐃⵠⵠ || Δᐃⵠⵠ[ᐃᐃⲆ] === ⵠᐃⲆⵠⲆ) continue;
					var ⵠΔⲆ = Δᐃⵠⵠ[ᐃᐃⲆ][ⲆⲆᐃΔ];
					if (ⵠΔⲆ === ⲆⲆⲆΔᐃ) continue;
					for (var ᐃᐃⵠᐃ = ⵠⵠΔΔ; ⵠΔⲆ.length > ᐃᐃⵠᐃ; ᐃᐃⵠᐃ++) {
						var ΔⵠΔⵠ = ⵠΔⲆ[ᐃᐃⵠᐃ];
						if (ΔⵠΔⵠ.ΔⵠΔ) {
							ΔⵠΔⵠ.ΔΔᐃ.ΔⵠΔ() && ΔⵠΔⵠ.ΔΔᐃ.ⵠΔⲆ == ΔⲆⲆΔⵠ && (ΔⵠΔⵠ.ΔⵠΔ = false);
							var ⵠΔΔ = 600 * (ᐃⵠᐃⵠ * (1 - ΔⵠΔⵠ.ΔΔᐃ.ⵠΔΔ)) * Ⲇ;
							var Ⲇᐃ = Math.sin(ΔⵠΔⵠ.angle) * ⵠΔΔ;
							var ⲆⲆⲆ = ⵠΔΔ * Math.cos(ΔⵠΔⵠ.angle)
						} else {
							var Ⲇᐃ = ⲆⲆᐃ;
							var ⲆⲆⲆ = 0
						}
						for (var ⵠΔΔΔⵠ = ⵠΔΔⲆ; ⲆΔΔⵠᐃᐃⲆ[ⲆⲆᐃΔ].ᐃⲆᐃⵠ > ⵠΔΔΔⵠ; ⵠΔΔΔⵠ++) {
							ⵠⲆΔ.ΔᐃⵠΔΔ[ⵠΔΔΔⵠ].ⵠⵠᐃⲆΔ !== ⵠⲆΔⵠΔ && (ⵠⲆΔ.ΔᐃⵠΔΔ[ⵠΔΔΔⵠ].ΔⵠΔ(), ⵠⲆΔ.ΔᐃⵠΔΔ[ⵠΔΔΔⵠ].ⵠⵠᐃⲆΔ = ⵠⲆΔⵠΔ);
							var ⵠⵠ = ᐃᐃ[ⵠ.ⵠⲆⲆⲆᐃ][ⵠⲆΔ.time][ⲆΔΔⵠᐃᐃⲆ[ⲆⲆᐃΔ].ΔⵠΔΔ[ⵠΔΔΔⵠ].ᐃᐃⲆ];
							var ᐃΔΔ = ⵠⲆΔ.ΔᐃⵠΔΔ[ⵠΔΔΔⵠ].ⵠΔΔ * -ⵠⵠ.width;
							var ΔⵠⲆ = -ⵠⵠ.height * ⵠⲆΔ.ΔᐃⵠΔΔ[ⵠΔΔΔⵠ].ⵠΔΔ;
							ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⵠ.ⲆⵠΔ.x + ΔⵠΔⵠ.x - ᐃΔΔ / ᐃⵠⵠⲆ + Ⲇᐃ + ⲆΔΔⵠᐃᐃⲆ[ⲆⲆᐃΔ].ΔⵠΔΔ[ⵠΔΔΔⵠ].x, ⲆΔⵠ.ⲆⵠΔ.y + ΔⵠΔⵠ.y - ΔⵠⲆ / ΔⲆⵠΔⲆ + ⲆⲆⲆ + ⲆΔΔⵠᐃᐃⲆ[ⲆⲆᐃΔ].ΔⵠΔΔ[ⵠΔΔΔⵠ].y, ᐃΔΔ / ΔΔⵠⲆ, ΔⵠⲆ / 2)
						}
					}
				}
			}
		}
	}

	function ⲆⵠⵠⲆᐃ(ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ΔΔ, ᐃᐃⲆ, ⲆᐃΔΔ, ᐃⲆⲆⲆ, ⲆⵠⵠⲆⲆ) {
		if (ᐃⲆⲆⲆ === ΔⵠᐃΔᐃ) ᐃⲆⲆⲆ = ⵠᐃΔ;
		for (var ⲆⲆᐃΔ = ⲆᐃΔΔ; ᐃⲆⲆⲆ <= ⲆⲆᐃΔ; ⲆⲆᐃΔ--) {
			for (var ᐃⲆ = ΔⲆⲆᐃ; ΔⲆⲆⵠ >= ᐃⲆ; ᐃⲆ++) {
				for (var ⲆⲆⲆⵠ = ⲆᐃⵠⲆ; ᐃᐃΔᐃ >= ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
					if (ⲆⵠⵠⲆⲆ > 0 && ΔΔΔᐃ === ΔᐃΔΔΔᐃⵠ[(ᐃⲆ + ⲆⲆⲆⵠ * ⲆⵠⵠⲆⲆ) % ΔᐃΔΔΔᐃⵠ.length]) continue;
					var Δᐃⵠⵠ = ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ];
					if (undefined === Δᐃⵠⵠ || Δᐃⵠⵠ[ᐃᐃⲆ] === undefined) continue;
					var ⵠΔⲆ = Δᐃⵠⵠ[ᐃᐃⲆ][ⲆⲆᐃΔ];
					if (undefined === ⵠΔⲆ) continue;
					for (var ᐃᐃⵠᐃ = ᐃⲆΔᐃ; ⵠΔⲆ.length > ᐃᐃⵠᐃ; ᐃᐃⵠᐃ++) {
						var ΔⵠΔⵠ = ⵠΔⲆ[ᐃᐃⵠᐃ];
						if (ΔⵠΔⵠ.ΔⵠΔ) {
							ΔⵠΔⵠ.ΔΔᐃ.ΔⵠΔ() && false == ΔⵠΔⵠ.ΔΔᐃ.ⵠΔⲆ && (ΔⵠΔⵠ.ΔⵠΔ = ΔⲆⲆΔⵠ);
							var ⵠΔΔ = Ⲇ * (600 * ((ⵠᐃᐃ - ΔⵠΔⵠ.ΔΔᐃ.ⵠΔΔ) * ᐃⵠᐃⵠ));
							var Ⲇᐃ = Math.sin(ΔⵠΔⵠ.angle) * ⵠΔΔ;
							var ⲆⲆⲆ = Math.cos(ΔⵠΔⵠ.angle) * ⵠΔΔ
						} else {
							var Ⲇᐃ = ⵠⵠⵠ;
							var ⲆⲆⲆ = ΔᐃⲆⲆ
						}
						var ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time][ⲆⲆᐃΔ];
						ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆΔⵠ.ⲆⵠΔ.x + ΔⵠΔⵠ.x - ⵠⵠ.width / (ⵠΔⵠΔΔ * 2) + Ⲇᐃ, ⲆΔⵠ.ⲆⵠΔ.y + ΔⵠΔⵠ.y - ⵠⵠ.height / (ᐃᐃⵠⵠ * ⵠΔⵠΔΔ) + ⲆⲆⲆ, ⵠⵠ.width / ⵠΔⵠΔΔ, ⵠⵠ.height / ⵠΔⵠΔΔ)
					}
				}
			}
		}
	}

	function ᐃⵠΔⲆΔΔⲆⲆⲆ(ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ΔΔ, ᐃᐃⲆ, ⲆᐃΔΔ, ᐃⲆⲆⲆ, ⲆⵠⵠⲆⲆ) {
		ᐃⲆⲆⲆ === ⵠⵠᐃⲆᐃ && (ᐃⲆⲆⲆ = 0);
		for (var ᐃⲆ = ΔⲆⲆᐃ; ᐃⲆ <= ΔⲆⲆⵠ; ᐃⲆ++) {
			for (var ⲆⲆⲆⵠ = ⲆᐃⵠⲆ; ᐃᐃΔᐃ >= ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
				var Δᐃⵠⵠ = ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ];
				if (Δᐃⵠⵠ === undefined || undefined === Δᐃⵠⵠ[ᐃᐃⲆ]) continue;
				var ⵠΔⲆ = Δᐃⵠⵠ[ᐃᐃⲆ];
				if (ΔΔⲆⲆⲆ === ⵠΔⲆ) continue;
				if (ⲆⵠⲆ === ⵠΔⲆ.scale) {
					var ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time][ⵠΔⲆ.ΔⵠⲆᐃᐃ];
					Δ.save();
					Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + ⵠΔⲆ.x, ⲆΔⵠ.ⲆⵠΔ.y + ⵠΔⲆ.y);
					Δ.rotate(ⵠΔⲆ.angle);
					ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ΔΔΔⵠ, -ⵠⵠ.height / 4, ⵠⵠ.width / 2, ⵠⵠ.height / ᐃᐃⵠⵠ);
					Δ.restore()
				} else if (ⵠΔⲆ.scale === 3) {
					for (var ⲆⲆᐃΔ = 0; ⲆⲆᐃΔ < ⵠΔⲆ.ᐃⵠⲆ.length; ⲆⲆᐃΔ++) {
						Δ.save();
						Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + ⵠΔⲆ.x, ⲆΔⵠ.ⲆⵠΔ.y + ⵠΔⲆ.y);
						Δ.rotate(ⵠΔⲆ.ᐃⵠⲆ[ⲆⲆᐃΔ].angle);
						var ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time][ⵠΔⲆ.ᐃⵠⲆ[ⲆⲆᐃΔ].ΔⵠⲆᐃᐃ];
						ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / 3 + ⵠΔⲆ.ᐃⵠⲆ[ⲆⲆᐃΔ].x, -ⵠⵠ.height / ΔᐃΔⲆ + ⵠΔⲆ.ᐃⵠⲆ[ⲆⲆᐃΔ].y, ⵠⵠ.width / 1.5, ⵠⵠ.height / 1.5);
						Δ.restore()
					}
				} else {
					var ⵠⵠ = ᐃᐃ[ΔΔ][ⵠⲆΔ.time][ⵠΔⲆ.ΔⵠⲆᐃᐃ];
					Δ.save();
					Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + ⵠΔⲆ.x, ⲆΔⵠ.ⲆⵠΔ.y + ⵠΔⲆ.y);
					Δ.rotate(ⵠΔⲆ.angle);
					ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ⵠᐃᐃⲆ, -ⵠⵠ.height / ⲆΔⲆΔ, ⵠⵠ.width, ⵠⵠ.height);
					Δ.restore()
				}
			}
		}
	}
	ⲆΔΔⵠᐃᐃⲆ = [{
		"ᐃⲆᐃⵠ": 10,
		"ΔⵠΔΔ": [{
			x: -128,
			y: -ⵠᐃᐃᐃᐃⵠᐃ,
			"ᐃᐃⲆ": 0
		}, {
			x: -86,
			y: -ΔⲆⵠΔⲆ,
			"ᐃᐃⲆ": 1
		}, {
			x: -60,
			y: -74,
			"ᐃᐃⲆ": 2
		}, {
			"ᐃᐃⲆ": 0,
			y: -144,
			x: -22
		}, {
			y: 86,
			x: -58,
			"ᐃᐃⲆ": ⵠΔⵠᐃ
		}, {
			"ᐃᐃⲆ": 0,
			y: -30,
			x: 3
		}, {
			y: -115,
			"ᐃᐃⲆ": ᐃⲆⲆ,
			x: 65
		}, {
			"ᐃᐃⲆ": 0,
			y: -50,
			x: 118
		}, {
			y: 15,
			x: 73,
			"ᐃᐃⲆ": Δⵠᐃ
		}, {
			x: 67,
			"ᐃᐃⲆ": ᐃⲆΔᐃ,
			y: 79
		}]
	}, {
		"ᐃⲆᐃⵠ": 5,
		"ΔⵠΔΔ": [{
			"ᐃᐃⲆ": 0,
			y: -26,
			x: -45
		}, {
			"ᐃᐃⲆ": 2,
			y: ⲆⵠᐃΔⲆ,
			x: -45
		}, {
			x: ⵠΔΔᐃᐃ,
			y: -60,
			"ᐃᐃⲆ": ΔᐃⵠⲆ
		}, {
			x: 52,
			"ᐃᐃⲆ": 1,
			y: -17
		}, {
			"ᐃᐃⲆ": 0,
			x: 14,
			y: 45
		}]
	}, {
		"ᐃⲆᐃⵠ": ⲆⲆΔΔ,
		"ΔⵠΔΔ": [{
			"ᐃᐃⲆ": 2,
			y: 3,
			x: -30
		}, {
			"ᐃᐃⲆ": 2,
			x: ⵠⲆᐃΔⵠ,
			y: -38
		}, {
			"ᐃᐃⲆ": 2,
			y: ⵠⲆⲆⵠ,
			x: 37
		}]
	}, {
		"ΔⵠΔΔ": [{
			x: -74,
			"ᐃᐃⲆ": ᐃᐃΔⵠ,
			y: -87
		}, {
			y: -10,
			"ᐃᐃⲆ": 1,
			x: -11
		}, {
			x: -99,
			"ᐃᐃⲆ": ⵠⵠⵠⲆ,
			y: 17
		}, {
			x: -66,
			y: 84,
			"ᐃᐃⲆ": 0
		}, {
			x: -55,
			"ᐃᐃⲆ": 1,
			y: 123
		}, {
			y: 81,
			"ᐃᐃⲆ": ᐃᐃⵠⵠ,
			x: ⵠᐃⲆⲆΔ
		}, {
			x: 52,
			"ᐃᐃⲆ": 0,
			y: 50
		}, {
			y: ΔᐃΔᐃΔ,
			x: 138,
			"ᐃᐃⲆ": ⵠⲆⵠⲆ
		}, {
			y: -28,
			x: 104,
			"ᐃᐃⲆ": Ⲇⵠⵠᐃ
		}, {
			x: 67,
			y: -56,
			"ᐃᐃⲆ": 2
		}, {
			y: -112,
			"ᐃᐃⲆ": Δⵠⵠ,
			x: 5
		}],
		"ᐃⲆᐃⵠ": 11
	}, {
		"ᐃⲆᐃⵠ": ⵠⲆⵠⲆⵠ,
		"ΔⵠΔΔ": [{
			y: -66,
			"ᐃᐃⲆ": 2,
			x: -33
		}, {
			x: -58,
			y: ⲆΔⲆᐃⵠ,
			"ᐃᐃⲆ": ΔᐃⲆⲆ
		}, {
			x: -ⵠᐃⵠᐃⵠ,
			y: 44,
			"ᐃᐃⲆ": ⲆⵠⲆ
		}, {
			"ᐃᐃⲆ": ⲆⲆΔ,
			y: ⲆⵠᐃΔⲆ,
			x: 44
		}, {
			y: -36,
			x: 53,
			"ᐃᐃⲆ": ⵠΔⵠⲆ
		}, {
			x: 7,
			"ᐃᐃⲆ": Ⲇⵠⵠᐃ,
			y: -62
		}]
	}, {
		"ΔⵠΔΔ": [{
			"ᐃᐃⲆ": ⲆⲆⲆᐃ,
			x: -19,
			y: -25
		}, {
			"ᐃᐃⲆ": ᐃᐃⲆⵠ,
			y: ⲆⵠᐃᐃⲆᐃⵠ,
			x: -29
		}, {
			"ᐃᐃⲆ": 0,
			y: ⵠⲆᐃᐃⲆ,
			x: 12
		}],
		"ᐃⲆᐃⵠ": ⵠᐃⵠⲆ
	}];
	var ⵠⵠᐃⲆΔⵠᐃ = 0;
	var ᐃᐃᐃᐃΔⲆΔ = ⵠᐃⲆⵠ;
	var ᐃᐃΔΔΔΔΔ = 0;
	var ᐃᐃᐃⲆᐃⵠᐃ = 0;

	function ΔᐃⵠⵠⵠᐃⲆ(ⵠᐃᐃⲆⵠ, ⲆΔⲆΔΔ, ᐃⵠΔⲆΔ, ᐃΔⲆⵠ, ΔⲆᐃΔ, ΔⵠⲆΔ) {
		var w1 = ᐃΔⲆⵠ.w1;
		var w2 = ᐃΔⲆⵠ.w2;
		var w3 = ᐃΔⲆⵠ.w3;
		var ΔⵠᐃΔ = ⲆΔⵠ.ⲆⵠΔ.y + ⵠᐃᐃⲆⵠ - 700;
		var ΔΔⵠᐃᐃ = Math.max(ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⲆΔΔ, 0);
		var ΔᐃⵠⵠⲆ = Math.max(-ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⵠΔ - ᐃⵠΔⲆΔ - ΔᐃⵠΔⲆ, 0);
		var ᐃⵠⲆᐃ = ΔΔⵠᐃᐃ;
		var ⵠⲆⲆⲆⲆ = ⲆΔⵠΔ - ΔΔⵠᐃᐃ - ΔᐃⵠⵠⲆ;
		if (ΔⵠⲆΔ) var ⵠᐃΔⵠΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w1).x;
		else var ⵠᐃΔⵠΔ = w1.r.x;
		var Ⲇᐃᐃᐃ = ΔⵠᐃΔ + ᐃΔᐃᐃ.ⲆⲆⵠⲆᐃ;
		var ΔⵠΔΔⲆ = ᐃⵠⲆᐃ,
			ⵠⲆᐃᐃΔ = Ⲇᐃᐃᐃ,
			ᐃⲆⵠⵠⲆ = ⵠᐃΔⵠΔ + ᐃΔᐃᐃ.ΔΔⲆΔᐃ,
			ΔΔⲆⵠⲆ = ⵠⲆⲆⲆⲆ;
		Ⲇᐃᐃᐃ += ⵠᐃΔⵠΔ + ᐃΔᐃᐃ.ΔΔⲆΔᐃ - Ⲇᐃⵠⵠ;
		var ᐃᐃᐃᐃⲆ = Ⲇᐃᐃᐃ;
		if (ΔⵠⲆΔ) var ⵠᐃΔⵠΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w2).x;
		else var ⵠᐃΔⵠΔ = w2.r.x;
		var d2 = ΔⵠᐃΔ + ᐃΔᐃᐃ.ΔⲆΔⲆΔ - Ⲇᐃᐃᐃ + ⵠᐃΔⵠΔ;
		var ⲆΔⲆⵠᐃ = Ⲇᐃᐃᐃ,
			ΔⲆⵠⲆᐃ = ᐃⵠⲆᐃ,
			ⲆⲆΔᐃⵠ = d2,
			ᐃΔᐃⵠΔ = ⵠⲆⲆⲆⲆ;
		Ⲇᐃᐃᐃ += d2 - ⲆΔⲆΔ;
		var ᐃᐃⲆⲆᐃ = Ⲇᐃᐃᐃ - Ⲇᐃⵠⵠ;
		if (ΔⵠⲆΔ) var ⵠᐃΔⵠΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w3).x;
		else var ⵠᐃΔⵠΔ = w3.r.x;
		d2 = ΔⵠᐃΔ + ᐃΔᐃᐃ.ᐃᐃⵠⲆⲆ - Ⲇᐃᐃᐃ + ⵠᐃΔⵠΔ;
		if (ᐃᐃⲆⲆᐃ < Ⲇᐃᐃᐃ + d2 - 3) {
			var ΔⲆᐃΔⵠ = ᐃΔΔΔΔ;
			var ⵠΔⲆΔⵠ = Ⲇᐃᐃᐃ,
				ᐃⲆⵠΔΔ = ᐃⵠⲆᐃ,
				ᐃⵠᐃⲆΔ = d2,
				ⲆⵠΔⲆⲆ = ⵠⲆⲆⲆⲆ;
			Ⲇᐃᐃᐃ += d2 - ⵠΔⵠⲆ;
			var ⲆⵠΔⵠᐃ = Ⲇᐃᐃᐃ
		} else {
			var ΔⲆᐃΔⵠ = ᐃΔᐃⲆΔ;
			Ⲇᐃᐃᐃ = ᐃᐃⲆⲆᐃ;
			var ⲆⵠΔⵠᐃ = -ⵠⵠⵠⲆ
		}
		d2 = ΔⵠᐃΔ + ᐃΔᐃᐃ.ᐃⲆⲆⲆᐃⲆⵠ - Ⲇᐃᐃᐃ;
		if (ΔⵠⲆΔ > ⵠᐃⲆⵠ && ᐃΔΔⲆ === ΔⲆᐃΔ.ⵠΔᐃⵠᐃΔᐃ) {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(15, 77, 72, 252, 239, 187, ⵠⲆΔⲆ)
			} else Δ.fillStyle = ⵠ.ⲆᐃⵠⵠⵠΔⲆ[ⵠⲆΔ.time];
			Δ.fillRect(ᐃⵠⲆᐃ, Ⲇᐃᐃᐃ, ⵠⲆⲆⲆⲆ, d2)
		} else {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ⲆⲆⵠ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(ΔⲆᐃΔ.Δᐃᐃ[0], ΔⲆᐃΔ.Δᐃᐃ[1], ΔⲆᐃΔ.Δᐃᐃ[2], ΔⲆᐃΔ.ⵠΔⵠ[0], ΔⲆᐃΔ.ⵠΔⵠ[ΔⲆⵠⲆ], ΔⲆᐃΔ.ⵠΔⵠ[2], ⵠⲆΔⲆ)
			} else Δ.fillStyle = ΔⲆᐃΔ.ⵠⲆⵠⵠⲆ[ⵠⲆΔ.time];
			Δ.fillRect(ᐃⵠⲆᐃ, Ⲇᐃᐃᐃ, ⵠⲆⲆⲆⲆ, d2)
		}
	}

	function ⵠΔⲆⵠⵠ(ⵠᐃᐃΔⲆⵠᐃ, ⵠΔⵠⲆⵠΔⵠⲆᐃ, ⲆⲆⵠΔⵠΔᐃⵠⲆ, ᐃΔᐃΔⵠΔⲆ, ⵠᐃⲆΔᐃΔⲆⵠᐃ, ᐃⵠᐃⲆⲆⲆⵠⵠᐃ, ⵠⲆΔⲆ) {
		var Δⵠ = "#";
		var ⵠⵠᐃΔ = Math.floor(ⵠⲆΔⲆ * ᐃΔᐃΔⵠΔⲆ + ⵠᐃᐃΔⲆⵠᐃ * (ΔⲆⵠⲆ - ⵠⲆΔⲆ));
		Δⵠ += 16 > ⵠⵠᐃΔ ? "0" + ⵠⵠᐃΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]](ΔᐃⵠⵠⲆᐃΔ) : ⵠⵠᐃΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]](ⵠᐃᐃⵠⵠ);
		var ⵠⵠᐃΔ = Math.floor(ⵠᐃⲆΔᐃΔⲆⵠᐃ * ⵠⲆΔⲆ + ⵠΔⵠⲆⵠΔⵠⲆᐃ * (1 - ⵠⲆΔⲆ));
		Δⵠ += ⵠⵠᐃΔ < 16 ? "0" + ⵠⵠᐃΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]](16) : ⵠⵠᐃΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]](ᐃⵠᐃΔⲆᐃΔ);
		var ⵠⵠᐃΔ = Math.floor(ⵠⲆΔⲆ * ᐃⵠᐃⲆⲆⲆⵠⵠᐃ + (1 - ⵠⲆΔⲆ) * ⲆⲆⵠΔⵠΔᐃⵠⲆ);
		Δⵠ += 16 > ⵠⵠᐃΔ ? "0" + ⵠⵠᐃΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]](16) : ⵠⵠᐃΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]](ⵠᐃⲆⵠΔⲆⵠ);
		return Δⵠ
	}

	function ⲆᐃΔᐃⲆΔᐃ(ⲆΔⲆΔΔ, ⵠᐃᐃⲆⵠ, ᐃΔΔⵠᐃΔⲆ, ᐃΔⲆⵠ, ΔⲆᐃΔ, ΔⵠⲆΔ) {
		var w1 = ᐃΔⲆⵠ.w1;
		var w2 = ᐃΔⲆⵠ.w2;
		var w3 = ᐃΔⲆⵠ.w3;
		var ᐃⵠⲆᐃ = ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⲆΔΔ - 700;
		var ⲆΔᐃⲆᐃ = Math.max(ⲆΔⵠ.ⲆⵠΔ.y + ⵠᐃᐃⲆⵠ, 0);
		var ᐃᐃΔᐃⲆ = Math.max(-ⲆΔⵠ.ⲆⵠΔ.y + ΔⲆⲆΔ - ᐃΔΔⵠᐃΔⲆ - 100, 0);
		var ΔⵠᐃΔ = ⲆΔᐃⲆᐃ;
		var ᐃᐃᐃΔΔ = ΔⲆⲆΔ - ⲆΔᐃⲆᐃ - ᐃᐃΔᐃⲆ;
		if (ΔⵠⲆΔ) var ⵠᐃΔⵠΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w1).x;
		else var ⵠᐃΔⵠΔ = w1.r.x;
		var Ⲇᐃᐃᐃ = ᐃⵠⲆᐃ + ᐃΔᐃᐃ.ⲆⲆⵠⲆᐃ;
		var ΔⵠΔΔⲆ = Ⲇᐃᐃᐃ,
			ⵠⲆᐃᐃΔ = ΔⵠᐃΔ,
			ΔΔⲆⵠⲆ = ⵠᐃΔⵠΔ + ᐃΔᐃᐃ.ΔΔⲆΔᐃ,
			ᐃⲆⵠⵠⲆ = ᐃᐃᐃΔΔ;
		Ⲇᐃᐃᐃ += ⵠᐃΔⵠΔ + ᐃΔᐃᐃ.ΔΔⲆΔᐃ - 2;
		var ᐃᐃᐃᐃⲆ = Ⲇᐃᐃᐃ;
		if (ΔⵠⲆΔ) var ⵠᐃΔⵠΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w2).x;
		else var ⵠᐃΔⵠΔ = w2.r.x;
		var d2 = ᐃⵠⲆᐃ + ᐃΔᐃᐃ.ΔⲆΔⲆΔ - Ⲇᐃᐃᐃ + ⵠᐃΔⵠΔ;
		var ΔⲆⵠⲆᐃ = Ⲇᐃᐃᐃ,
			ⲆΔⲆⵠᐃ = ΔⵠᐃΔ,
			ᐃΔᐃⵠΔ = d2,
			ⲆⲆΔᐃⵠ = ᐃᐃᐃΔΔ;
		Ⲇᐃᐃᐃ += d2 - ⵠⵠᐃⲆ;
		var ᐃᐃⲆⲆᐃ = Ⲇᐃᐃᐃ - ⲆΔⲆΔ;
		if (ΔⵠⲆΔ) var ⵠᐃΔⵠΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w3).x;
		else var ⵠᐃΔⵠΔ = w3.r.x;
		d2 = ᐃⵠⲆᐃ + ᐃΔᐃᐃ.ᐃᐃⵠⲆⲆ - Ⲇᐃᐃᐃ + ⵠᐃΔⵠΔ;
		if (ᐃᐃⲆⲆᐃ < Ⲇᐃᐃᐃ + d2 - 3) {
			var ΔⲆᐃΔⵠ = ⲆⲆⲆⵠⲆ;
			var ᐃⲆⵠΔΔ = Ⲇᐃᐃᐃ,
				ⵠΔⲆΔⵠ = ΔⵠᐃΔ,
				ⲆⵠΔⲆⲆ = d2,
				ᐃⵠᐃⲆΔ = ᐃᐃᐃΔΔ;
			Ⲇᐃᐃᐃ += d2 - ⲆᐃᐃⲆ;
			var ⲆⵠΔⵠᐃ = Ⲇᐃᐃᐃ
		} else {
			var ΔⲆᐃΔⵠ = false;
			Ⲇᐃᐃᐃ = ᐃᐃⲆⲆᐃ;
			var ⲆⵠΔⵠᐃ = -ⲆⵠΔΔ
		}
		d2 = ᐃⵠⲆᐃ + ᐃΔᐃᐃ.ᐃⲆⲆⲆᐃⲆⵠ - Ⲇᐃᐃᐃ;
		if (0 < ΔⵠⲆΔ && Δⵠᐃ === ΔⲆᐃΔ.ⵠΔᐃⵠᐃΔᐃ) {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ⲆⵠΔΔ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(15, 77, 72, 252, 239, 187, ⵠⲆΔⲆ)
			} else Δ.fillStyle = ⵠ.ⲆᐃⵠⵠⵠΔⲆ[ⵠⲆΔ.time];
			Δ.fillRect(Ⲇᐃᐃᐃ, ΔⵠᐃΔ, d2, ᐃᐃᐃΔΔ)
		} else {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(ΔⲆᐃΔ.Δᐃᐃ[0], ΔⲆᐃΔ.Δᐃᐃ[1], ΔⲆᐃΔ.Δᐃᐃ[ᐃᐃⵠⵠ], ΔⲆᐃΔ.ⵠΔⵠ[0], ΔⲆᐃΔ.ⵠΔⵠ[ⵠⲆⵠⲆ], ΔⲆᐃΔ.ⵠΔⵠ[ⵠΔΔΔ], ⵠⲆΔⲆ)
			} else Δ.fillStyle = ΔⲆᐃΔ.ⵠⲆⵠⵠⲆ[ⵠⲆΔ.time];
			Δ.fillRect(Ⲇᐃᐃᐃ, ΔⵠᐃΔ, d2, ᐃᐃᐃΔΔ)
		}
	}

	function ⵠᐃⵠⲆᐃⲆⲆⵠⲆ() {
		var ⲆᐃⵠⲆ = ⵠⵠᐃⲆΔⵠᐃ;
		var ᐃᐃΔᐃ = ᐃᐃᐃᐃΔⲆΔ;
		var ΔⲆⲆᐃ = ᐃᐃΔΔΔΔΔ;
		var ΔⲆⲆⵠ = ᐃᐃᐃⲆᐃⵠᐃ;
		if (ⲆΔⲆⵠ.ΔⵠⵠΔΔ) ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ᐃⵠΔΔΔ, "l", 2);
		ⲆΔⲆⵠ.ΔⵠⵠΔΔ && ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ᐃΔΔΔⵠ, ᐃ[566], Δᐃᐃⵠ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ΔⲆⲆⵠⵠ, ᐃ[566], ΔΔⵠⲆΔ);
		ⲆⲆΔⲆΔ(ᐃΔⲆᐃΔⵠᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆⲆⵠΔᐃ, "l", 2);
		if (ⲆΔⲆⵠ.ΔⵠⵠΔΔ) {
			ⲆⲆΔⲆΔ(ΔⲆᐃᐃΔᐃᐃⵠᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ΔⲆⲆⵠⵠ, ᐃ[566], ΔΔⵠⲆΔ);
			ⲆⲆΔⲆΔ(ᐃΔⲆᐃΔⵠᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ᐃⲆⵠᐃⲆ, "l", 2)
		}
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⵠᐃⵠⵠΔ, "ma", 4);
		var ΔⲆᐃᐃⲆᐃᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃΔᐃᐃⵠΔ];
		for (var ᐃⲆ = ⵠⵠᐃ; ᐃⲆ < ΔⲆᐃᐃⲆᐃᐃ.length; ᐃⲆ++) ΔⲆᐃᐃⲆᐃᐃ[ᐃⲆ].ᐃᐃⲆⲆΔⵠᐃ();
		var ΔΔᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ];
		for (var ᐃⲆ = 0; ΔΔᐃΔ.length > ᐃⲆ; ᐃⲆ++) {
			var ᐃⵠⲆ = ΔΔᐃΔ[ᐃⲆ];
			for (var ⲆⲆⲆⵠ = 0; ⲆⲆⲆⵠ < ᐃⵠⲆ.ᐃᐃⲆⵠⵠ.length; ⲆⲆⲆⵠ++) ⲆΔⵠᐃⲆⲆᐃⲆⵠ(ᐃⵠⲆ.ᐃᐃⲆⵠⵠ[ⲆⲆⲆⵠ])
		}
		var ΔΔⲆⲆⵠⲆⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃⲆᐃ];
		for (var ᐃⲆ = 0; ᐃⲆ < ΔΔⲆⲆⵠⲆⵠ.length; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ΔΔⲆⲆⵠⲆⵠ[ᐃⲆ], ⵠ.ΔⲆᐃⲆᐃ);
			ΔΔⲆⲆⵠⲆⵠ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ΔΔⲆⲆⵠⲆⵠ[ᐃⲆ].info)
		}
		var ΔⲆΔⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⵠ];
		for (var ᐃⲆ = ⲆⲆᐃ; ΔⲆΔⲆᐃ.length > ᐃⲆ; ᐃⲆ++) {
			if (ΔⲆΔⲆᐃ[ᐃⲆ].action == ⲆΔΔⲆ) ⵠΔᐃⵠⲆⲆⲆ(ΔⲆΔⲆᐃ[ᐃⲆ])
		}
		var ᐃⵠΔΔⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆΔᐃ];
		for (var ᐃⲆ = 0; ᐃⵠΔΔⲆ.length > ᐃⲆ; ᐃⲆ++) ⵠΔᐃⵠⲆⲆⲆ(ᐃⵠΔΔⲆ[ᐃⲆ], ⵠ.ⵠⲆΔⵠⵠⵠᐃ);
		var ⵠᐃΔⵠⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠᐃΔΔ];
		for (var ᐃⲆ = 0; ⵠᐃΔⵠⵠ.length > ᐃⲆ; ᐃⲆ++) ⵠΔᐃⵠⲆⲆⲆ(ⵠᐃΔⵠⵠ[ᐃⲆ]);
		var ⲆΔΔΔⵠᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⲆⵠᐃ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆΔΔΔⵠᐃΔ.length; ᐃⲆ++) ⵠΔᐃⵠⲆⲆⲆ(ⲆΔΔΔⵠᐃΔ[ᐃⲆ]);
		var ⵠⵠᐃⵠΔⵠⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⵠⲆᐃ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⵠⵠᐃⵠΔⵠⵠ.length; ᐃⲆ++) ⵠΔᐃⵠⲆⲆⲆ(ⵠⵠᐃⵠΔⵠⵠ[ᐃⲆ], ⵠ.ᐃΔⵠᐃᐃⵠΔ);
		var ⲆⲆⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠΔΔ];
		for (var ᐃⲆ = Ⲇⵠⵠᐃ; ⲆⲆⵠⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆⲆⵠⲆ[ᐃⲆ]);
		var ᐃΔΔᐃΔΔⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔΔⵠᐃ];
		for (var ᐃⲆ = ⵠΔΔⲆ; ᐃⲆ < ᐃΔΔᐃΔΔⲆ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃΔΔᐃΔΔⲆ[ᐃⲆ], ⵠ.ΔΔΔⵠᐃ);
		var ᐃⲆΔᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠΔΔ];
		for (var ᐃⲆ = 0; ᐃⲆ < ᐃⲆΔᐃⲆ.length; ᐃⲆ++) ⵠΔᐃⵠⲆⲆⲆ(ᐃⲆΔᐃⲆ[ᐃⲆ]);
		var ᐃⲆΔᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆΔⵠ];
		for (var ᐃⲆ = ⵠΔΔⲆ; ᐃⲆ < ᐃⲆΔᐃⲆ.length; ᐃⲆ++) ⵠΔᐃⵠⲆⲆⲆ(ᐃⲆΔᐃⲆ[ᐃⲆ]);
		var ᐃⲆΔᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠΔΔ];
		for (var ᐃⲆ = 0; ᐃⲆ < ᐃⲆΔᐃⲆ.length; ᐃⲆ++) ΔᐃⲆⲆᐃᐃᐃ(ᐃⲆΔᐃⲆ[ᐃⲆ]);
		var ᐃⲆⲆΔⲆⵠΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠⲆᐃ];
		for (var ᐃⲆ = 0; ᐃⲆⲆΔⲆⵠΔ.length > ᐃⲆ; ᐃⲆ++)
			if (ⲆⲆᐃⲆ === (ᐃⲆⲆΔⲆⵠΔ[ᐃⲆ].info & 15) || ᐃⲆⲆΔⲆⵠΔ[ᐃⲆ].info === 10) ᐃⲆⵠⲆ(ᐃⲆⲆΔⲆⵠΔ[ᐃⲆ]);
		var ⲆⵠⵠⲆΔⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⲆ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆⵠⵠⲆΔⲆⲆ.length; ᐃⲆ++)((ⲆⵠⵠⲆΔⲆⲆ[ᐃⲆ].info & 15) === 0 || ⲆⵠⵠⲆΔⲆⲆ[ᐃⲆ].info === ΔⵠᐃⲆΔ) && ᐃⲆⵠⲆ(ⲆⵠⵠⲆΔⲆⲆ[ᐃⲆ]);
		var ⵠⵠΔᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃΔⲆ];
		for (var ᐃⲆ = 0; ⵠⵠΔᐃⲆ.length > ᐃⲆ; ᐃⲆ++)
			if ((ⵠⵠΔᐃⲆ[ᐃⲆ].info & 15) === ⵠᐃΔ || 10 === ⵠⵠΔᐃⲆ[ᐃⲆ].info) ᐃⲆⵠⲆ(ⵠⵠΔᐃⲆ[ᐃⲆ]);
		var ⲆΔΔΔⵠⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃⵠᐃᐃ];
		for (var ᐃⲆ = ⲆⲆᐃ; ⲆΔΔΔⵠⲆⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆΔΔΔⵠⲆⲆ[ᐃⲆ], ⵠ.ⲆΔⵠⲆⵠ);
		var ⲆΔΔᐃⵠⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠᐃᐃⲆ];
		for (var ᐃⲆ = ⵠⵠⲆΔ; ⲆΔΔᐃⵠⲆᐃ.length > ᐃⲆ; ᐃⲆ++)((ⲆΔΔᐃⵠⲆᐃ[ᐃⲆ].info & 15) === ⵠⵠⲆΔ || 10 === ⲆΔΔᐃⵠⲆᐃ[ᐃⲆ].info) && ᐃⲆⵠⲆ(ⲆΔΔᐃⵠⲆᐃ[ᐃⲆ]);
		var ᐃΔⵠⲆⵠⲆΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆⵠΔ];
		for (var ᐃⲆ = 0; ᐃΔⵠⲆⵠⲆΔ.length > ᐃⲆ; ᐃⲆ++)((ᐃΔⵠⲆⵠⲆΔ[ᐃⲆ].info & 15) === 0 || 10 === ᐃΔⵠⲆⵠⲆΔ[ᐃⲆ].info) && ᐃⲆⵠⲆ(ᐃΔⵠⲆⵠⲆΔ[ᐃⲆ]);
		var ⵠΔΔⵠΔⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⲆΔᐃ];
		for (var ᐃⲆ = ⲆⲆᐃⲆ; ⵠΔΔⵠΔⲆᐃ.length > ᐃⲆ; ᐃⲆ++)(0 === (ⵠΔΔⵠΔⲆᐃ[ᐃⲆ].info & 15) || ⵠΔⵠᐃⵠ === ⵠΔΔⵠΔⲆᐃ[ᐃⲆ].info) && ᐃⲆⵠⲆ(ⵠΔΔⵠΔⲆᐃ[ᐃⲆ]);
		var ⲆΔΔΔⵠⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠⲆⵠ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆΔΔΔⵠⲆⲆ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆΔΔΔⵠⲆⲆ[ᐃⲆ]);
		if (!Settings.BoxOnTop.enabled) {
			var ᐃΔⲆⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔⵠⵠ];
			for (var ᐃⲆ = 0; ᐃⲆ < ᐃΔⲆⵠⲆ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃΔⲆⵠⲆ[ᐃⲆ], ⵠ.ΔⵠΔⵠⵠ, ⵠ.ⵠⵠⵠΔⲆⲆΔ);
			var ᐃΔᐃⵠⵠᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⲆΔ];
			for (var ᐃⲆ = ⵠΔⵠᐃ; ᐃΔᐃⵠⵠᐃⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃΔᐃⵠⵠᐃⲆ[ᐃⲆ], ⵠ.ΔⵠΔⵠⵠ, ⵠ.ⵠⵠⵠΔⲆⲆΔ);
			var ΔⲆᐃⲆΔⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠⵠΔ];
			for (var ᐃⲆ = Ⲇⵠⵠᐃ; ΔⲆᐃⲆΔⲆⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ΔⲆᐃⲆΔⲆⲆ[ᐃⲆ], ⵠ.ΔΔⵠⵠΔ, ⵠ.ΔΔΔⵠᐃΔΔ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠΔΔᐃⵠ];
		for (var ᐃⲆ = ⵠⵠⵠ; ᐃⲆ < ⲆᐃΔᐃ.length; ᐃⲆ++) {
			ⲆᐃΔᐃ[ᐃⲆ].info & ᐃⲆⲆ && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], ⵠ.ΔⵠⲆᐃᐃᐃⵠ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⲆⵠⵠ];
		for (var ᐃⲆ = 0; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			ⲆᐃΔᐃ[ᐃⲆ].info & ⲆⲆⲆᐃ && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], ⵠ.ⲆΔⲆΔΔᐃⲆ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠΔⲆ];
		for (var ᐃⲆ = 0; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			if (ⲆᐃΔᐃ[ᐃⲆ].info) ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], ⵠ.ⵠᐃⲆΔⲆⵠΔ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃⵠⵠᐃ];
		for (var ᐃⲆ = ⵠΔΔⲆ; ᐃⲆ < ⲆᐃΔᐃ.length; ᐃⲆ++) {
			ⲆᐃΔᐃ[ᐃⲆ].info && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], ⵠ.ΔΔᐃⵠⵠⲆⲆ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.Ⲇᐃⵠᐃᐃ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆᐃΔᐃ.length; ᐃⲆ++) {
			if (ⲆᐃΔᐃ[ᐃⲆ].info) ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], ⵠ.ᐃⲆⵠⵠⲆΔⵠ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃⲆΔ];
		for (var ᐃⲆ = ⵠᐃⵠ; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			ⲆᐃΔᐃ[ᐃⲆ].info && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], ⵠ.ⵠᐃⲆΔⲆⵠΔ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆΔⲆΔ];
		for (var ᐃⲆ = 0; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			ⲆᐃΔᐃ[ᐃⲆ].info & ᐃΔⵠΔ && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], ⵠ.ΔⵠⲆᐃᐃᐃⵠ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠΔⲆ];
		for (var ᐃⲆ = 0; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			ⲆᐃΔᐃ[ᐃⲆ].info & 1 && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], ⵠ.ⲆΔⲆΔΔᐃⲆ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃΔⲆⲆ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆᐃΔᐃ.length; ᐃⲆ++) {
			ⲆᐃΔᐃ[ᐃⲆ].info && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], ⵠ.ⵠᐃⲆΔⲆⵠΔ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃⲆⲆ];
		for (var ᐃⲆ = 0; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			if (ⲆᐃΔᐃ[ᐃⲆ].info) ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], ⵠ.ΔΔᐃⵠⵠⲆⲆ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔΔᐃᐃ];
		for (var ᐃⲆ = ⲆⲆᐃⲆ; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			ⲆᐃΔᐃ[ᐃⲆ].info && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], ⵠ.ᐃⲆⵠⵠⲆΔⵠ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃΔΔⲆ];
		for (var ᐃⲆ = ᐃⲆΔ; ᐃⲆ < ⲆᐃΔᐃ.length; ᐃⲆ++) {
			if (ⲆᐃΔᐃ[ᐃⲆ].info) ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], ⵠ.ⵠᐃⲆΔⲆⵠΔ)
		}
		var ⲆᐃΔⲆⲆⵠⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⲆⵠⵠ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆᐃΔⲆⲆⵠⵠ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆᐃΔⲆⲆⵠⵠ[ᐃⲆ], ⵠ.ᐃⲆⲆⵠⵠ, ⵠ.ⵠⵠⵠⵠⲆⵠⲆ);
		var ⵠⲆᐃΔⵠΔⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔΔΔⲆ];
		for (var ᐃⲆ = ⵠⵠⲆΔ; ᐃⲆ < ⵠⲆᐃΔⵠΔⲆ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ⵠⲆᐃΔⵠΔⲆ[ᐃⲆ], ⵠ.ΔΔΔΔⲆ);
		var ΔⲆᐃᐃⲆᐃᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃΔᐃᐃⵠΔ];
		for (var ᐃⲆ = 0; ᐃⲆ < ΔⲆᐃᐃⲆᐃᐃ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ΔⲆᐃᐃⲆᐃᐃ[ᐃⲆ], ⵠ.ᐃᐃΔᐃᐃⵠΔ, ⵠ.ΔⵠᐃΔΔⲆΔⲆᐃ);
		var ΔⲆⲆⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⲆᐃ];
		for (var ᐃⲆ = ᐃⲆΔᐃ; ΔⲆⲆⲆⲆ.length > ᐃⲆ; ᐃⲆ++) {
			if (ΔᐃⲆⲆ === ΔⲆⲆⲆⲆ[ᐃⲆ].ⲆΔⲆⲆⵠⵠⵠ) ᐃⲆⵠⲆ(ΔⲆⲆⲆⲆ[ᐃⲆ])
		}
		if (!Settings.PlayerOnTop.enabled) {
			var ΔΔᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ];
			for (var ᐃⲆ = 0; ΔΔᐃΔ.length > ᐃⲆ; ᐃⲆ++) {
				var ᐃⵠⲆ = ΔΔᐃΔ[ᐃⲆ];
				if (ΔΔᐃΔ[ᐃⲆ].ᐃΔⵠΔⵠ !== ΔⲆ.ΔⲆᐃᐃⵠ && ΔΔᐃΔ[ᐃⲆ].ᐃΔⵠΔⵠ !== ΔⲆ.ⵠⵠⲆΔΔ && ΔⲆ.ΔᐃⲆΔᐃ !== ΔΔᐃΔ[ᐃⲆ].ᐃΔⵠΔⵠ && ΔⲆ.ⲆⵠⲆΔⵠ !== ΔΔᐃΔ[ᐃⲆ].ᐃΔⵠΔⵠ && ΔΔᐃΔ[ᐃⲆ].ᐃΔⵠΔⵠ !== ΔⲆ.ᐃΔᐃΔᐃ) {
					if (0 === ᐃⵠⲆ.ⲆᐃⲆᐃⲆⵠΔ) {
						if (.001 < ᐃⵠⲆ.ΔⲆΔⲆⲆⲆⵠ) {
							ᐃⵠⲆ.ΔⲆΔⲆⲆⲆⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(ᐃⵠⲆ.ΔⲆΔⲆⲆⲆⵠ, ⵠⵠᐃ, .018);
							var ⵠⲆⵠΔ = 1 + .18 * Math.min(ΔΔΔᐃ, Math.max(ᐃⵠⲆ.ΔⲆΔⲆⲆⲆⵠ, ⵠΔⵠᐃ) / 100);
							Δ.save();
							Δ.scale(ⵠⲆⵠΔ, ⵠⲆⵠΔ);
							ⲆΔⵠ.ⲆⵠΔ.x /= ⵠⲆⵠΔ;
							ⲆΔⵠ.ⲆⵠΔ.y /= ⵠⲆⵠΔ;
							ᐃⵠⲆ.x /= ⵠⲆⵠΔ;
							ᐃⵠⲆ.y /= ⵠⲆⵠΔ;
							ᐃⵠⲆ.r.x /= ⵠⲆⵠΔ;
							ᐃⵠⲆ.r.y /= ⵠⲆⵠΔ;
							ᐃⵠⲆ.ᐃᐃᐃⲆΔⲆΔ();
							ᐃⵠⲆ.ᐃⵠΔᐃ();
							ⲆΔⵠ.ⲆⵠΔ.x *= ⵠⲆⵠΔ;
							ⲆΔⵠ.ⲆⵠΔ.y *= ⵠⲆⵠΔ;
							ᐃⵠⲆ.x *= ⵠⲆⵠΔ;
							ᐃⵠⲆ.y *= ⵠⲆⵠΔ;
							ᐃⵠⲆ.r.x *= ⵠⲆⵠΔ;
							ᐃⵠⲆ.r.y *= ⵠⲆⵠΔ;
							Δ.restore()
						} else {
							ᐃⵠⲆ.ⲆΔⲆⲆⵠⵠⵠ = 0;
							ᐃⵠⲆ.ᐃᐃᐃⲆΔⲆΔ();
							ᐃⵠⲆ.ᐃⵠΔᐃ()
						}
					}
				} else if (ᐃⵠⲆ.ⵠᐃᐃⲆⲆ <= 180) {
					Δ.save();
					var ⵠⲆⵠΔ = ⲆⵠΔΔ + .35 * Math.min(1, Math.max(ᐃⵠⲆ.ⵠⵠⵠⵠⵠ - 30, Ⲇⵠᐃ) / 180);
					Δ.scale(ⵠⲆⵠΔ, ⵠⲆⵠΔ);
					ⲆΔⵠ.ⲆⵠΔ.x /= ⵠⲆⵠΔ;
					ⲆΔⵠ.ⲆⵠΔ.y /= ⵠⲆⵠΔ;
					ᐃⵠⲆ.x /= ⵠⲆⵠΔ;
					ᐃⵠⲆ.y /= ⵠⲆⵠΔ;
					ᐃⵠⲆ.r.x /= ⵠⲆⵠΔ;
					ᐃⵠⲆ.r.y /= ⵠⲆⵠΔ;
					ᐃⵠⲆ.ⲆΔⲆⲆⵠⵠⵠ = 0;
					ᐃⵠⲆ.ᐃᐃᐃⲆΔⲆΔ();
					ᐃⵠⲆ.ᐃⵠΔᐃ();
					ⲆΔⵠ.ⲆⵠΔ.x *= ⵠⲆⵠΔ;
					ⲆΔⵠ.ⲆⵠΔ.y *= ⵠⲆⵠΔ;
					ᐃⵠⲆ.x *= ⵠⲆⵠΔ;
					ᐃⵠⲆ.y *= ⵠⲆⵠΔ;
					ᐃⵠⲆ.r.x *= ⵠⲆⵠΔ;
					ᐃⵠⲆ.r.y *= ⵠⲆⵠΔ;
					Δ.restore()
				}
			}
		}
		var ⵠⲆᐃΔⵠΔⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔΔΔⲆ];
		for (var ᐃⲆ = 0; ⵠⲆᐃΔⵠΔⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ⵠⲆᐃΔⵠΔⲆ[ᐃⲆ], ⵠ.ΔΔΔⲆΔⵠⵠ);
		var ΔⵠΔᐃⲆⵠⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠⵠᐃᐃ];
		for (var ᐃⲆ = ⵠΔⵠᐃ; ΔⵠΔᐃⲆⵠⵠ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ΔⵠΔᐃⲆⵠⵠ[ᐃⲆ]);
		var ⲆⵠΔⲆⵠⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃᐃΔ];
		for (var ᐃⲆ = ⲆⲆᐃ; ᐃⲆ < ⲆⵠΔⲆⵠⲆⲆ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆⵠΔⲆⵠⲆⲆ[ᐃⲆ], ⵠ.ΔⲆᐃᐃΔ, ⵠ.ΔᐃΔⵠⲆΔⵠ);
		var ⲆⲆΔᐃΔⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔⵠⲆⵠ];
		for (var ᐃⲆ = ⲆⲆΔ; ⲆⲆΔᐃΔⵠⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆⲆΔᐃΔⵠⲆ[ᐃⲆ]);
		var ΔᐃΔⲆΔⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠΔⲆⲆᐃ];
		for (var ᐃⲆ = ⵠΔΔⲆ; ΔᐃΔⲆΔⲆⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ΔᐃΔⲆΔⲆⲆ[ᐃⲆ], ⵠ.ⵠΔⲆⲆᐃ, ⵠ.ΔΔΔΔᐃΔⲆ);
		var ΔⲆᐃᐃⵠⵠⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃᐃⵠ];
		for (var ᐃⲆ = ᐃⲆΔ; ΔⲆᐃᐃⵠⵠⵠ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ΔⲆᐃᐃⵠⵠⵠ[ᐃⲆ], ⵠ.ΔⲆᐃᐃⵠ, ⵠ.ⵠⵠΔᐃⲆᐃⲆ);
		var ⵠΔᐃᐃⵠⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠⲆΔΔ];
		for (var ᐃⲆ = 0; ⵠΔᐃᐃⵠⵠⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ⵠΔᐃᐃⵠⵠⲆ[ᐃⲆ], ⵠ.ⵠⵠⲆΔΔ, ⵠ.ᐃΔᐃΔⲆᐃⵠ);
		var ᐃⲆⲆΔⲆⵠΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠⲆᐃ];
		for (var ᐃⲆ = Δⵠⵠ; ᐃⲆⲆΔⲆⵠΔ.length > ᐃⲆ; ᐃⲆ++) ⵠⵠⵠ !== (ᐃⲆⲆΔⲆⵠΔ[ᐃⲆ].info & 15) && 10 !== ᐃⲆⲆΔⲆⵠΔ[ᐃⲆ].info && ᐃⲆⵠⲆ(ᐃⲆⲆΔⲆⵠΔ[ᐃⲆ]);
		var ⲆⵠⵠⲆΔⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⲆ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆⵠⵠⲆΔⲆⲆ.length; ᐃⲆ++) 0 !== (ⲆⵠⵠⲆΔⲆⲆ[ᐃⲆ].info & 15) && ⲆⵠⵠⲆΔⲆⲆ[ᐃⲆ].info !== ᐃⲆᐃⲆⲆ && ᐃⲆⵠⲆ(ⲆⵠⵠⲆΔⲆⲆ[ᐃⲆ]);
		var ⵠⵠΔᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆⵠⵠᐃΔ];
		for (var ᐃⲆ = 0; ⵠⵠΔᐃⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ⵠⵠΔᐃⲆ[ᐃⲆ], ⵠ.ⵠⲆΔᐃⲆ);
		var ⵠⵠΔᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃΔⲆ];
		for (var ᐃⲆ = 0; ⵠⵠΔᐃⲆ.length > ᐃⲆ; ᐃⲆ++)
			if (0 !== (ⵠⵠΔᐃⲆ[ᐃⲆ].info & 15) && 10 !== ⵠⵠΔᐃⲆ[ᐃⲆ].info) ᐃⲆⵠⲆ(ⵠⵠΔᐃⲆ[ᐃⲆ]);
		var ᐃⲆΔᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆΔⵠ];
		for (var ᐃⲆ = ⵠᐃⲆⵠ; ᐃⲆ < ᐃⲆΔᐃⲆ.length; ᐃⲆ++) ΔᐃⲆⲆᐃᐃᐃ(ᐃⲆΔᐃⲆ[ᐃⲆ]);
		var ⲆΔΔᐃⵠⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠᐃᐃⲆ];
		for (var ᐃⲆ = ⲆⲆᐃⲆ; ᐃⲆ < ⲆΔΔᐃⵠⲆᐃ.length; ᐃⲆ++) ⵠΔⵠᐃ !== (ⲆΔΔᐃⵠⲆᐃ[ᐃⲆ].info & 15) && ⲆΔΔᐃⵠⲆᐃ[ᐃⲆ].info !== 10 && ᐃⲆⵠⲆ(ⲆΔΔᐃⵠⲆᐃ[ᐃⲆ]);
		var ᐃΔⵠⲆⵠⲆΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆⵠΔ];
		for (var ᐃⲆ = ⲆᐃΔⵠ; ᐃⲆ < ᐃΔⵠⲆⵠⲆΔ.length; ᐃⲆ++)
			if ((ᐃΔⵠⲆⵠⲆΔ[ᐃⲆ].info & 15) !== ⵠⵠⵠ && ᐃᐃᐃⲆⵠ !== ᐃΔⵠⲆⵠⲆΔ[ᐃⲆ].info) ᐃⲆⵠⲆ(ᐃΔⵠⲆⵠⲆΔ[ᐃⲆ]);
		var ⵠΔΔⵠΔⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⲆΔᐃ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⵠΔΔⵠΔⲆᐃ.length; ᐃⲆ++)
			if (ⵠΔΔⲆ !== (ⵠΔΔⵠΔⲆᐃ[ᐃⲆ].info & 15) && ⵠΔΔⵠΔⲆᐃ[ᐃⲆ].info !== ΔⵠⲆᐃΔ) ᐃⲆⵠⲆ(ⵠΔΔⵠΔⲆᐃ[ᐃⲆ]);
		var ᐃⲆⵠΔᐃᐃᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠⵠⲆ];
		for (var ᐃⲆ = ⵠⵠΔΔ; ᐃⲆⵠΔᐃᐃᐃ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃⲆⵠΔᐃᐃᐃ[ᐃⲆ], ⵠ.ⲆᐃⵠⵠⲆ, ⵠ.ⲆᐃⲆⲆⲆΔΔ);
		var ⲆᐃᐃΔⲆⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠΔΔⵠ];
		for (var ᐃⲆ = 0; ⲆᐃᐃΔⲆⲆᐃ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆᐃᐃΔⲆⲆᐃ[ᐃⲆ], ⵠ.ᐃⵠΔΔⵠ, ⵠ.ᐃᐃᐃᐃᐃⲆΔ);
		var ΔΔⲆⵠΔⲆⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃᐃⲆ];
		for (var ᐃⲆ = ⵠᐃⲆⵠ; ᐃⲆ < ΔΔⲆⵠΔⲆⵠ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ΔΔⲆⵠΔⲆⵠ[ᐃⲆ], ⵠ.ΔᐃᐃᐃⲆ, ⵠ.ΔⲆΔᐃⵠⵠᐃ);
		var ⲆᐃⵠᐃⵠⵠΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⵠΔ];
		for (var ᐃⲆ = Ⲇⵠⵠᐃ; ⲆᐃⵠᐃⵠⵠΔ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆᐃⵠᐃⵠⵠΔ[ᐃⲆ], ⵠ.ⲆᐃᐃⵠΔ, ⵠ.ⲆΔⵠΔᐃᐃΔ);
		var ΔⵠᐃΔⲆⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔᐃᐃᐃ];
		for (var ᐃⲆ = ΔᐃⲆⲆ; ᐃⲆ < ΔⵠᐃΔⲆⲆⲆ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ΔⵠᐃΔⲆⲆⲆ[ᐃⲆ], ⵠ.ᐃΔᐃᐃᐃ, ⵠ.ⲆⵠⲆΔⵠⲆᐃ);
		var ⲆⲆΔⵠᐃⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.Δᐃⵠⵠⵠ];
		for (var ᐃⲆ = ΔᐃⲆⲆ; ⲆⲆΔⵠᐃⲆⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆⲆΔⵠᐃⲆⲆ[ᐃⲆ], ⵠ.Δᐃⵠⵠⵠ, ⵠ.ᐃᐃⵠⵠΔΔΔ);
		var ᐃᐃⲆⵠⵠⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆⵠⵠⵠ];
		for (var ᐃⲆ = 0; ᐃⲆ < ᐃᐃⲆⵠⵠⵠⲆ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃᐃⲆⵠⵠⵠⲆ[ᐃⲆ]);
		var ΔᐃΔΔΔⲆΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⵠⲆⲆ];
		for (var ᐃⲆ = ⵠⵠΔΔ; ΔᐃΔΔΔⲆΔ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ΔᐃΔΔΔⲆΔ[ᐃⲆ], ⵠ.ⲆᐃΔᐃⲆᐃΔ, ⵠ.ᐃΔᐃᐃⵠⲆⵠ);
		var ⲆΔΔⵠᐃΔⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⵠⵠⲆΔ];
		for (var ᐃⲆ = ⵠΔΔⲆ; ⲆΔΔⵠᐃΔⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆΔΔⵠᐃΔⲆ[ᐃⲆ]);
		var Ⲇᐃᐃⵠⵠᐃᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔΔⲆᐃ];
		for (var ᐃⲆ = 0; ᐃⲆ < Ⲇᐃᐃⵠⵠᐃᐃ.length; ᐃⲆ++) ᐃⲆⵠⲆ(Ⲇᐃᐃⵠⵠᐃᐃ[ᐃⲆ], ⵠ.ᐃΔΔⲆᐃ, ⵠ.ᐃΔⲆⲆⵠⵠⵠ);
		var ⵠⲆᐃᐃⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔᐃⲆ];
		for (var ᐃⲆ = Ⲇⵠᐃ; ⵠⲆᐃᐃⵠ.length > ᐃⲆ; ᐃⲆ++) {
			ⵠⲆᐃᐃⵠ[ᐃⲆ].scale === ᐃΔⵠΔ && ᐃⲆⵠⲆ(ⵠⲆᐃᐃⵠ[ᐃⲆ], ⵠ.ΔⵠΔᐃⲆ, ⵠ.ⲆⲆⵠⵠⵠᐃⲆ)
		}
		var ⵠⲆᐃᐃⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃᐃΔ];
		for (var ᐃⲆ = 0; ⵠⲆᐃᐃⵠ.length > ᐃⲆ; ᐃⲆ++) {
			if (ⵠⲆᐃᐃⵠ[ᐃⲆ].scale === 1) ᐃⲆⵠⲆ(ⵠⲆᐃᐃⵠ[ᐃⲆ], ⵠ.ΔᐃᐃᐃΔ, ⵠ.ΔᐃⵠⲆⵠΔⵠ)
		}
		var ⲆᐃⲆΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⵠΔⵠ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆᐃⲆΔ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆᐃⲆΔ[ᐃⲆ]);
		var ⵠⵠΔⵠΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔⲆⵠ];
		for (var ᐃⲆ = ᐃⲆΔ; ⵠⵠΔⵠΔ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ⵠⵠΔⵠΔ[ᐃⲆ], ⵠ.ΔⵠΔⲆⵠ);
		var ΔⲆΔⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⵠ];
		for (var ᐃⲆ = 0; ᐃⲆ < ΔⲆΔⲆᐃ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ΔⲆΔⲆᐃ[ᐃⲆ]);
		var ⲆΔᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⲆⲆⵠ];
		for (var ᐃⲆ = ⲆᐃΔⵠ; ᐃⲆ < ⲆΔᐃⲆ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆΔᐃⲆ[ᐃⲆ]);
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆΔⲆΔ];
		for (var ᐃⲆ = 0; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			!(ⲆᐃΔᐃ[ᐃⲆ].info & 1) && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃΔᐃ[ᐃⲆ]) ? 10012 : 10013 : ⵠ.ᐃᐃΔΔᐃⵠⲆ);
			ⲆᐃΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆᐃΔᐃ[ᐃⲆ].info >> 1)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠΔⲆ];
		for (var ᐃⲆ = 0; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			!(ⲆᐃΔᐃ[ᐃⲆ].info & 1) && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃΔᐃ[ᐃⲆ]) ? 10014 : 10015 : ⵠ.ⲆᐃⵠⵠⲆΔⲆ);
			ⲆᐃΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆᐃΔᐃ[ᐃⲆ].info >> ᐃΔΔⲆ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃΔⲆⲆ];
		for (var ᐃⲆ = ᐃⲆΔ; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			!(ⲆᐃΔᐃ[ᐃⲆ].info & 1) && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃΔᐃ[ᐃⲆ]) ? 10016 : 10017 : ⵠ.ᐃΔⲆᐃⲆⲆⵠ);
			ⲆᐃΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆᐃΔᐃ[ᐃⲆ].info >> 1)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃⲆⲆ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆᐃΔᐃ.length; ᐃⲆ++) {
			!(ⲆᐃΔᐃ[ᐃⲆ].info & 1) && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃΔᐃ[ᐃⲆ]) ? 10018 : 10019 : ⵠ.ⲆΔᐃᐃΔⵠΔ);
			ⲆᐃΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆᐃΔᐃ[ᐃⲆ].info >> 1)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔΔᐃᐃ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆᐃΔᐃ.length; ᐃⲆ++) {
			if (!(ⲆᐃΔᐃ[ᐃⲆ].info & 1)) ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃΔᐃ[ᐃⲆ]) ? 10020 : 10021 : ⵠ.ΔⲆΔΔⵠΔΔ);
			ⲆᐃΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆᐃΔᐃ[ᐃⲆ].info >> ⲆⲆΔⵠ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃΔΔⲆ];
		for (var ᐃⲆ = 0; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			!(ⲆᐃΔᐃ[ᐃⲆ].info & ⵠᐃᐃ) && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃΔᐃ[ᐃⲆ]) ? 10022 : 10023 : ⵠ.ᐃᐃΔΔⲆ);
			ⲆᐃΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆᐃΔᐃ[ᐃⲆ].info >> ⵠᐃᐃ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠΔΔᐃⵠ];
		for (var ᐃⲆ = 0; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			if (!(ⲆᐃΔᐃ[ᐃⲆ].info & 1)) ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃΔᐃ[ᐃⲆ]) ? 10024 : 10025 : ⵠ.ⵠΔΔᐃⵠ);
			ⲆᐃΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆᐃΔᐃ[ᐃⲆ].info >> 1)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⲆⵠⵠ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆᐃΔᐃ.length; ᐃⲆ++) {
			!(ⲆᐃΔᐃ[ᐃⲆ].info & ⲆⲆᐃⵠ) && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃΔᐃ[ᐃⲆ]) ? 10026 : 10027 : ⵠ.ᐃⵠⲆⵠⵠ);
			ⲆᐃΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆᐃΔᐃ[ᐃⲆ].info >> ⲆⲆⵠ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠΔⲆ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆᐃΔᐃ.length; ᐃⲆ++) {
			if (!(ⲆᐃΔᐃ[ᐃⲆ].info & ⵠⲆⵠⲆ)) ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃΔᐃ[ᐃⲆ]) ? 10028 : 10029 : ⵠ.ⲆΔⵠΔⲆ);
			ⲆᐃΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆᐃΔᐃ[ᐃⲆ].info >> Δⵠᐃ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃⵠⵠᐃ];
		for (var ᐃⲆ = 0; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			if (!(ⲆᐃΔᐃ[ᐃⲆ].info & 1)) ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃΔᐃ[ᐃⲆ]) ? 10030 : 10031 : ⵠ.ⵠᐃⵠⵠᐃ);
			ⲆᐃΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆᐃΔᐃ[ᐃⲆ].info >> ⵠⵠⵠⲆ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.Ⲇᐃⵠᐃᐃ];
		for (var ᐃⲆ = 0; ⲆᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			if (!(ⲆᐃΔᐃ[ᐃⲆ].info & ⲆⲆΔⵠ)) ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃΔᐃ[ᐃⲆ]) ? 10032 : 10033 : ⵠ.Ⲇᐃⵠᐃᐃ);
			ⲆᐃΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆᐃΔᐃ[ᐃⲆ].info >> ᐃⵠⵠⵠ)
		}
		var ⲆᐃΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃⲆΔ];
		for (var ᐃⲆ = ⵠΔΔⲆ; ᐃⲆ < ⲆᐃΔᐃ.length; ᐃⲆ++) {
			!(ⲆᐃΔᐃ[ᐃⲆ].info & ᐃⵠᐃᐃ) && ᐃⲆⵠⲆ(ⲆᐃΔᐃ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃΔᐃ[ᐃⲆ]) ? 10034 : 10035 : ⵠ.ΔⲆᐃⲆΔ);
			ⲆᐃΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆᐃΔᐃ[ᐃⲆ].info >> ᐃⲆⲆ)
		}
		var ⲆΔⵠᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠΔⲆΔ];
		for (var ᐃⲆ = Δⵠⵠ; ᐃⲆ < ⲆΔⵠᐃΔ.length; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⲆΔⵠᐃΔ[ᐃⲆ], ⵠ.ⵠⵠΔⲆΔ);
			ⲆΔⵠᐃΔ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆΔⵠᐃΔ[ᐃⲆ].info)
		}
		var ⲆΔⵠᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⵠᐃΔ];
		for (var ᐃⲆ = Ⲇⵠⵠᐃ; ᐃⲆ < ⲆΔⵠᐃΔ.length; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⲆΔⵠᐃΔ[ᐃⲆ], ⵠ.ᐃⵠⵠᐃΔ);
			ⲆΔⵠᐃΔ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆΔⵠᐃΔ[ᐃⲆ].info)
		}
		var ⲆΔⵠᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆⵠᐃΔ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆΔⵠᐃΔ.length; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⲆΔⵠᐃΔ[ᐃⲆ], ⵠ.ⵠⲆⵠᐃΔ);
			ⲆΔⵠᐃΔ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆΔⵠᐃΔ[ᐃⲆ].info)
		}
		var ⲆΔⵠᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠΔᐃ];
		for (var ᐃⲆ = ᐃⲆΔ; ᐃⲆ < ⲆΔⵠᐃΔ.length; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⲆΔⵠᐃΔ[ᐃⲆ], ⵠ.ΔΔⵠΔᐃ);
			ⲆΔⵠᐃΔ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆΔⵠᐃΔ[ᐃⲆ].info)
		}
		var ⲆΔⵠᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⵠᐃᐃ];
		for (var ᐃⲆ = ⲆⲆᐃ; ᐃⲆ < ⲆΔⵠᐃΔ.length; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⲆΔⵠᐃΔ[ᐃⲆ], ⵠ.ᐃᐃⵠᐃᐃ);
			ⲆΔⵠᐃΔ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆΔⵠᐃΔ[ᐃⲆ].info)
		}
		var ⲆΔⵠᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠᐃΔ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆΔⵠᐃΔ.length; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⲆΔⵠᐃΔ[ᐃⲆ], ⵠ.ΔΔⵠᐃΔ);
			ⲆΔⵠᐃΔ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆΔⵠᐃΔ[ᐃⲆ].info)
		}
		var ⵠΔᐃⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠΔⵠΔ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⵠΔᐃⵠⲆ.length; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⵠΔᐃⵠⲆ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⵠΔᐃⵠⲆ[ᐃⲆ]) ? 10010 : 10011 : ⵠ.ᐃⵠΔⵠΔ);
			ⵠΔᐃⵠⲆ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⵠΔᐃⵠⲆ[ᐃⲆ].info)
		}
		var ⵠΔᐃⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⵠΔᐃ];
		for (var ᐃⲆ = ⵠᐃΔ; ⵠΔᐃⵠⲆ.length > ᐃⲆ; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⵠΔᐃⵠⲆ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⵠΔᐃⵠⲆ[ᐃⲆ]) ? 10008 : 10009 : ⵠ.ΔᐃⵠΔᐃ);
			ⵠΔᐃⵠⲆ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⵠΔᐃⵠⲆ[ᐃⲆ].info)
		}
		var ⵠΔᐃⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆᐃⲆ];
		for (var ᐃⲆ = ᐃⲆᐃ; ᐃⲆ < ⵠΔᐃⵠⲆ.length; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⵠΔᐃⵠⲆ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⵠΔᐃⵠⲆ[ᐃⲆ]) ? 10006 : 10007 : ⵠ.ΔⲆⲆᐃⲆ);
			ⵠΔᐃⵠⲆ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⵠΔᐃⵠⲆ[ᐃⲆ].info)
		}
		var ⵠΔᐃⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆΔΔᐃ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⵠΔᐃⵠⲆ.length; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⵠΔᐃⵠⲆ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⵠΔᐃⵠⲆ[ᐃⲆ]) ? 10004 : 10005 : ⵠ.ᐃⲆΔΔᐃ);
			ⵠΔᐃⵠⲆ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⵠΔᐃⵠⲆ[ᐃⲆ].info)
		}
		var ⵠΔᐃⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆⲆΔ];
		for (var ᐃⲆ = ⵠΔⵠᐃ; ᐃⲆ < ⵠΔᐃⵠⲆ.length; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⵠΔᐃⵠⲆ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⵠΔᐃⵠⲆ[ᐃⲆ]) ? 10002 : 10003 : ⵠ.ΔⲆⲆⲆΔ);
			ⵠΔᐃⵠⲆ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⵠΔᐃⵠⲆ[ᐃⲆ].info)
		}
		var ⵠΔᐃⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆΔᐃΔ];
		for (var ᐃⲆ = ⵠⵠᐃ; ᐃⲆ < ⵠΔᐃⵠⲆ.length; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⵠΔᐃⵠⲆ[ᐃⲆ], Settings.ColoredSpikes.enabled ? isAlly(ⵠΔᐃⵠⲆ[ᐃⲆ]) ? 1e4 : 10001 : ⵠ.ⲆⲆΔᐃΔ);
			ⵠΔᐃⵠⲆ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⵠΔᐃⵠⲆ[ᐃⲆ].info)
		}
		var ⵠⲆⵠᐃᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃᐃᐃΔ];
		for (var ᐃⲆ = 0; ⵠⲆⵠᐃᐃ.length > ᐃⲆ; ᐃⲆ++) {
			var ᐃΔΔ = ⵠⲆⵠᐃᐃ[ᐃⲆ];
			if (ⵠᐃΔ < ᐃΔΔ.info) ᐃⲆⵠⲆ(ᐃΔΔ, ⵠ.ΔᐃⲆⵠΔⲆΔ);
			else ᐃⲆⵠⲆ(ᐃΔΔ, ⵠ.ᐃⲆⲆΔⲆⲆⵠ)
		}
		var ⲆⲆᐃⵠΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⲆⲆΔ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⲆⲆᐃⵠΔ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆⲆᐃⵠΔ[ᐃⲆ], ⵠ.ᐃᐃⲆⲆΔ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⵠᐃΔⲆ, "g", ⵠⲆᐃⵠ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ᐃΔⵠⲆΔ, ᐃ[388], 2);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆΔⵠᐃ, "d", 2);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.Ⲇᐃᐃᐃᐃ, ᐃ[83], ΔΔᐃⲆⵠ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆⵠᐃΔᐃ, "p", ⵠⵠⲆΔ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆⲆΔⵠΔ, "m", ⵠⵠΔⵠ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆⵠΔⲆ, "a", ΔΔᐃⲆⵠ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ᐃⲆⵠΔ, ᐃ[538], 2);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ΔΔΔΔⵠ, ᐃ[153], ᐃΔᐃΔ, 3);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ΔΔΔΔⵠ, ᐃ[153], Ⲇᐃⵠⵠ, 2);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ΔΔΔΔⵠ, ᐃ[153], ΔΔⵠ, ΔΔΔᐃ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ΔΔΔΔⵠ, ᐃ[153], Δⵠⵠ, ⲆⲆᐃⲆ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆⵠΔⲆᐃ, ᐃ[153], ⵠᐃⵠⵠ, 3);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆⵠΔⲆᐃ, ᐃ[153], ⵠᐃᐃⲆ, 2);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆⵠΔⲆᐃ, ᐃ[153], 1, ᐃⵠᐃᐃ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆⵠΔⲆᐃ, ᐃ[153], ᐃⲆΔ, 0);
		var ΔΔⵠΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆⲆᐃⲆ];
		for (var ᐃⲆ = ⵠⵠⵠ; ΔΔⵠΔ.length > ᐃⲆ; ᐃⲆ++) {
			for (var ⲆⲆⲆⵠ = 0; ΔΔⵠΔ[ᐃⲆ].info > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) ᐃⲆⵠⲆ(ΔΔⵠΔ[ᐃⲆ].ΔΔⵠΔ[ⲆⲆⲆⵠ], ⵠ.ⵠⲆⲆᐃⲆ)
		}
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ΔⲆⵠᐃΔ, "s", ΔⵠⲆⲆ);
		var ᐃⵠΔΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.Ⲇᐃⵠⵠᐃ];
		for (var ᐃⲆ = ⵠⵠᐃ; ᐃⵠΔΔ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃⵠΔΔ[ᐃⲆ]);
		var ᐃⵠΔΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔᐃⵠᐃ];
		for (var ᐃⲆ = ⵠΔΔⲆ; ᐃⵠΔΔ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃⵠΔΔ[ᐃⲆ]);
		var ᐃⵠΔΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.Δⵠⵠⵠᐃ];
		for (var ᐃⲆ = ᐃⲆᐃ; ᐃⵠΔΔ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃⵠΔΔ[ᐃⲆ]);
		var ᐃⵠΔΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃΔⵠ];
		for (var ᐃⲆ = 0; ᐃⲆ < ᐃⵠΔΔ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃⵠΔΔ[ᐃⲆ]);
		var ᐃⵠΔΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆᐃΔⵠ];
		for (var ᐃⲆ = ⵠⵠⵠ; ᐃⵠΔΔ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃⵠΔΔ[ᐃⲆ]);
		var ΔΔⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆΔⵠᐃ];
		for (var ᐃⲆ = ⵠⵠⲆΔ; ΔΔⲆᐃ.length > ᐃⲆ; ᐃⲆ++) ⵠΔᐃⵠⲆⲆⲆ(ΔΔⲆᐃ[ᐃⲆ]);
		var ᐃⵠΔΔⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆΔᐃ];
		for (var ᐃⲆ = Ⲇⵠⵠᐃ; ᐃⲆ < ᐃⵠΔΔⲆ.length; ᐃⲆ++) ΔᐃⲆⲆᐃᐃᐃ(ᐃⵠΔΔⲆ[ᐃⲆ]);
		var ᐃⵠΔΔⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⵠⲆᐃ];
		for (var ᐃⲆ = ⵠᐃⲆⵠ; ᐃⲆ < ᐃⵠΔΔⲆ.length; ᐃⲆ++) ΔᐃⲆⲆᐃᐃᐃ(ᐃⵠΔΔⲆ[ᐃⲆ]);
		var ΔⲆΔⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⵠ];
		for (var ᐃⲆ = ⲆⲆᐃⲆ; ΔⲆΔⲆᐃ.length > ᐃⲆ; ᐃⲆ++) {
			ΔⲆΔⲆᐃ[ᐃⲆ].action == ⲆᐃᐃⲆ && ΔᐃⲆⲆᐃᐃᐃ(ΔⲆΔⲆᐃ[ᐃⲆ])
		}
		var ⲆΔᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⲆⲆⵠ];
		for (var ᐃⲆ = ⵠⵠᐃ; ᐃⲆ < ⲆΔᐃⲆ.length; ᐃⲆ++) {
			ΔᐃⲆⲆᐃᐃᐃ(ⲆΔᐃⲆ[ᐃⲆ])
		}
		var ⵠᐃΔⵠⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠᐃΔΔ];
		for (var ᐃⲆ = Ⲇⵠᐃ; ⵠᐃΔⵠⵠ.length > ᐃⲆ; ᐃⲆ++) ΔᐃⲆⲆᐃᐃᐃ(ⵠᐃΔⵠⵠ[ᐃⲆ]);
		var ⲆΔΔΔⵠᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⲆⵠᐃ];
		for (var ᐃⲆ = 0; ⲆΔΔΔⵠᐃΔ.length > ᐃⲆ; ᐃⲆ++) {
			ΔᐃⲆⲆᐃᐃᐃ(ⲆΔΔΔⵠᐃΔ[ᐃⲆ]);
			ⲆΔΔΔⵠᐃΔ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⲆΔΔΔⵠᐃΔ[ᐃⲆ].info)
		}
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆⵠΔᐃⵠ, "c", 0);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ᐃⲆⲆᐃ, "t", 5, 4);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ΔⲆⲆΔΔ, "f", 2, ⵠⲆᐃⵠ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆΔΔⲆᐃ, ᐃ[502], ᐃⲆΔᐃ, Δⵠⵠ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ᐃⲆⵠᐃᐃ, "b", ⵠᐃⵠⵠ, ⵠΔΔΔ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ᐃⲆⲆᐃ, "t", 3, ΔⲆⵠΔ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ᐃⲆⵠᐃᐃ, "b", 1, 0);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ΔⲆⲆΔΔ, "f", ΔΔΔᐃ, 1);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆΔΔⲆᐃ, ᐃ[502], ⲆⵠⲆ, ᐃΔΔⲆ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ᐃⲆⲆᐃ, "t", ⲆⲆΔⵠ, ᐃⲆΔ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ΔⲆⲆΔΔ, "f", 0, ⵠᐃΔ);
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆΔΔⲆᐃ, ᐃ[502], ΔΔⵠⲆ, 2);
		var ΔΔⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆΔⵠᐃ];
		for (var ᐃⲆ = ⵠⵠᐃ; ΔΔⲆᐃ.length > ᐃⲆ; ᐃⲆ++) ΔᐃⲆⲆᐃᐃᐃ(ΔΔⲆᐃ[ᐃⲆ]);
		var ⲆᐃⲆᐃⲆⵠΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆΔⵠⲆ];
		for (var ᐃⲆ = 0; ⲆᐃⲆᐃⲆⵠΔ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆᐃⲆᐃⲆⵠΔ[ᐃⲆ], ⵠ.ᐃⲆΔⵠⲆ);
		var ΔΔᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ];
		for (var ᐃⲆ = 0; ΔΔᐃΔ.length > ᐃⲆ; ᐃⲆ++) {
			var ᐃⵠⲆ = ΔΔᐃΔ[ᐃⲆ];
			if (ⲆⵠΔΔ === ᐃⵠⲆ.ⲆᐃⲆᐃⲆⵠΔ && (ᐃⵠⲆ.ⵠᐃᐃⲆⲆ < 180 || ᐃⵠⲆ.ᐃΔⵠΔⵠ !== ΔⲆ.ΔⲆᐃᐃⵠ && ΔⲆ.ⵠⵠⲆΔΔ !== ᐃⵠⲆ.ᐃΔⵠΔⵠ && ᐃⵠⲆ.ᐃΔⵠΔⵠ !== ΔⲆ.ᐃΔᐃΔᐃ && ᐃⵠⲆ.ᐃΔⵠΔⵠ !== ΔⲆ.ΔᐃⲆΔᐃ && ᐃⵠⲆ.ᐃΔⵠΔⵠ !== ΔⲆ.ⲆⵠⲆΔⵠ)) {
				ᐃⵠⲆ.ΔⲆΔⲆⲆⲆⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(ᐃⵠⲆ.ΔⲆΔⲆⲆⲆⵠ, ΔΔⵠⵠⲆ, .018);
				var ⵠⲆⵠΔ = ⲆⵠⲆ + .18 * Math.min(1, Math.max(ᐃⵠⲆ.ΔⲆΔⲆⲆⲆⵠ, 0) / ΔⵠⲆⵠⲆ);
				Δ.save();
				Δ.scale(ⵠⲆⵠΔ, ⵠⲆⵠΔ);
				ⲆΔⵠ.ⲆⵠΔ.x /= ⵠⲆⵠΔ;
				ⲆΔⵠ.ⲆⵠΔ.y /= ⵠⲆⵠΔ;
				ᐃⵠⲆ.x /= ⵠⲆⵠΔ;
				ᐃⵠⲆ.y /= ⵠⲆⵠΔ;
				ᐃⵠⲆ.r.x /= ⵠⲆⵠΔ;
				ᐃⵠⲆ.r.y /= ⵠⲆⵠΔ;
				ᐃⵠⲆ.ᐃᐃᐃⲆΔⲆΔ();
				ᐃⵠⲆ.ᐃⵠΔᐃ();
				ⲆΔⵠ.ⲆⵠΔ.x *= ⵠⲆⵠΔ;
				ⲆΔⵠ.ⲆⵠΔ.y *= ⵠⲆⵠΔ;
				ᐃⵠⲆ.x *= ⵠⲆⵠΔ;
				ᐃⵠⲆ.y *= ⵠⲆⵠΔ;
				ᐃⵠⲆ.r.x *= ⵠⲆⵠΔ;
				ᐃⵠⲆ.r.y *= ⵠⲆⵠΔ;
				Δ.restore()
			}
		}
		var ⵠΔⲆⵠⲆΔᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆΔⲆⵠ];
		for (var ᐃⲆ = 0; ⵠΔⲆⵠⲆΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
			ᐃⲆⵠⲆ(ⵠΔⲆⵠⲆΔᐃ[ᐃⲆ], ⵠ.ΔⲆΔⲆⵠ);
			ⵠΔⲆⵠⲆΔᐃ[ᐃⲆ].ᐃᐃⵠⵠᐃ(ⵠΔⲆⵠⲆΔᐃ[ᐃⲆ].info)
		}
		var ⲆΔᐃᐃΔᐃᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⲆⵠΔ];
		for (var ᐃⲆ = ⵠⵠⵠ; ᐃⲆ < ⲆΔᐃᐃΔᐃᐃ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ⲆΔᐃᐃΔᐃᐃ[ᐃⲆ], ⵠ.ⲆΔⲆⵠΔ, ⵠ.ΔΔⵠᐃⵠΔⵠ);
		var ⵠⲆⵠⵠΔᐃⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆᐃⲆΔ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⵠⲆⵠⵠΔᐃⵠ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ⵠⲆⵠⵠΔᐃⵠ[ᐃⲆ], ⵠ.ⲆⲆᐃⲆΔ);
		var ΔΔᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ];
		for (var ᐃⲆ = 0; ᐃⲆ < ΔΔᐃΔ.length; ᐃⲆ++) {
			var ᐃⵠⲆ = ΔΔᐃΔ[ᐃⲆ];
			if ((ᐃⵠⲆ.ᐃΔⵠΔⵠ === ΔⲆ.ΔⲆᐃᐃⵠ || ᐃⵠⲆ.ᐃΔⵠΔⵠ === ΔⲆ.ⵠⵠⲆΔΔ || ᐃⵠⲆ.ᐃΔⵠΔⵠ === ΔⲆ.ᐃΔᐃΔᐃ || ΔⲆ.ΔᐃⲆΔᐃ === ᐃⵠⲆ.ᐃΔⵠΔⵠ || ᐃⵠⲆ.ᐃΔⵠΔⵠ === ΔⲆ.ⲆⵠⲆΔⵠ) && ᐃⵠⲆ.ⵠᐃᐃⲆⲆ > 180) {
				ᐃⵠⲆ.ⲆΔⲆⲆⵠⵠⵠ = 1;
				Δ.save();
				var ⵠⲆⵠΔ = ᐃⵠⵠⵠ + .35 * Math.min(ΔᐃⵠⲆ, Math.max(ᐃⵠⲆ.ⵠⵠⵠⵠⵠ - 30, 0) / 180);
				Δ.scale(ⵠⲆⵠΔ, ⵠⲆⵠΔ);
				ⲆΔⵠ.ⲆⵠΔ.x /= ⵠⲆⵠΔ;
				ⲆΔⵠ.ⲆⵠΔ.y /= ⵠⲆⵠΔ;
				ᐃⵠⲆ.x /= ⵠⲆⵠΔ;
				ᐃⵠⲆ.y /= ⵠⲆⵠΔ;
				ᐃⵠⲆ.r.x /= ⵠⲆⵠΔ;
				ᐃⵠⲆ.r.y /= ⵠⲆⵠΔ;
				ᐃⵠⲆ.ᐃᐃᐃⲆΔⲆΔ();
				ᐃⵠⲆ.ᐃⵠΔᐃ();
				ⲆΔⵠ.ⲆⵠΔ.x *= ⵠⲆⵠΔ;
				ⲆΔⵠ.ⲆⵠΔ.y *= ⵠⲆⵠΔ;
				ᐃⵠⲆ.x *= ⵠⲆⵠΔ;
				ᐃⵠⲆ.y *= ⵠⲆⵠΔ;
				ᐃⵠⲆ.r.x *= ⵠⲆⵠΔ;
				ᐃⵠⲆ.r.y *= ⵠⲆⵠΔ;
				Δ.restore()
			}
		}
		var ΔⲆⲆⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⲆᐃ];
		for (var ᐃⲆ = 0; ᐃⲆ < ΔⲆⲆⲆⲆ.length; ᐃⲆ++) {
			ΔⲆⲆⲆⲆ[ᐃⲆ].ⲆΔⲆⲆⵠⵠⵠ === 1 && ᐃⲆⵠⲆ(ΔⲆⲆⲆⲆ[ᐃⲆ])
		}
		var ⵠⲆᐃᐃⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔᐃⲆ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⵠⲆᐃᐃⵠ.length; ᐃⲆ++) {
			if (ⵠⲆᐃᐃⵠ[ᐃⲆ].scale > 1) ᐃⲆⵠⲆ(ⵠⲆᐃᐃⵠ[ᐃⲆ], ⵠ.ΔⵠΔᐃⲆ, ⵠ.ⲆⲆⵠⵠⵠᐃⲆ)
		}
		var ⵠⲆᐃᐃⵠ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃᐃΔ];
		for (var ᐃⲆ = 0; ᐃⲆ < ⵠⲆᐃᐃⵠ.length; ᐃⲆ++) {
			ⵠⲆᐃᐃⵠ[ᐃⲆ].scale > ⲆⵠⲆ && ᐃⲆⵠⲆ(ⵠⲆᐃᐃⵠ[ᐃⲆ], ⵠ.ΔᐃᐃᐃΔ, ⵠ.ΔᐃⵠⲆⵠΔⵠ)
		}
		var ΔᐃΔΔⵠΔⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆΔᐃ];
		for (var ᐃⲆ = 0; ΔᐃΔΔⵠΔⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ΔᐃΔΔⵠΔⲆ[ᐃⲆ], ⵠ.ΔᐃⲆΔᐃ, ⵠ.ᐃⵠⲆΔⵠⲆΔ);
		var ᐃⲆⲆⲆΔⲆᐃ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆΔⲆ];
		for (var ᐃⲆ = ⵠⵠᐃ; ᐃⲆⲆⲆΔⲆᐃ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃⲆⲆⲆΔⲆᐃ[ᐃⲆ], ⵠ.ⲆᐃⲆΔⲆ, ⵠ.ⲆⲆΔⵠᐃᐃⵠ);
		ⵠΔΔⲆᐃΔⲆ += ᐃⵠᐃⵠ * ⲆⲆⲆΔⵠ;
		if (ⵠΔΔⲆᐃΔⲆ > 60) ⵠΔΔⲆᐃΔⲆ -= 60;
		Settings.NoFog.enabled || ⲆⲆΔⲆΔ(ⲆⲆΔⲆⵠⲆⵠ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ⲆⲆΔΔⵠ, ᐃ[70], ᐃⵠΔⲆ);
		Settings.NoFog.enabled || ⲆⲆΔⲆΔ(ⲆⲆΔⲆⵠⲆⵠ, ΔⲆⲆᐃ, ΔⲆⲆⵠ, ⲆᐃⵠⲆ, ᐃᐃΔᐃ, ⵠ.ΔᐃⲆⲆΔ, ᐃ[431], 2);
	
		if (Settings.BoxOnTop.enabled) {
			var ᐃΔⲆⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔⵠⵠ];
			for (var ᐃⲆ = 0; ᐃⲆ < ᐃΔⲆⵠⲆ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃΔⲆⵠⲆ[ᐃⲆ], ⵠ.ΔⵠΔⵠⵠ, ⵠ.ⵠⵠⵠΔⲆⲆΔ);
			var ᐃΔᐃⵠⵠᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⲆΔ];
			for (var ᐃⲆ = ⵠΔⵠᐃ; ᐃΔᐃⵠⵠᐃⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃΔᐃⵠⵠᐃⲆ[ᐃⲆ], ⵠ.ΔⵠΔⵠⵠ, ⵠ.ⵠⵠⵠΔⲆⲆΔ);
			var ΔⲆᐃⲆΔⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠⵠΔ];
			for (var ᐃⲆ = Ⲇⵠⵠᐃ; ΔⲆᐃⲆΔⲆⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ΔⲆᐃⲆΔⲆⲆ[ᐃⲆ], ⵠ.ΔΔⵠⵠΔ, ⵠ.ΔΔΔⵠᐃΔΔ)
		}
		const ctx = Δ;
		if (Settings.PlayerTracers.enabled && getWorldProperty("fast_units")[getUserProperty("uid")]) {
			if (getWorldProperty("units")[0].length - 1 > 0) {
				ctx.save();
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#ffffff";
				ctx.font = "20px Baloo Paaji";
				ctx.lineWidth = 5;
				ctx.strokeText("Players amount: " + (getWorldProperty("units")[0].length - 1), 20, 480);
				ctx.fillText("Players amount: " + (getWorldProperty("units")[0].length - 1), 20, 480);
				ctx.restore();
				getWorldProperty("units")[0].forEach((player => {
					ctx.save();
					ctx.beginPath();
					ctx.strokeStyle = isAlly(player) ? "#00ffff" : "#ff0000";
					ctx.lineWidth = 3;
					ctx.moveTo(getWorldProperty("fast_units")[getUserProperty("uid")].x + getUserProperty("cam").x, getWorldProperty("fast_units")[getUserProperty("uid")].y + getUserProperty("cam").y);
					ctx.lineTo(player.x + getUserProperty("cam").x, player.y + getUserProperty("cam").y);
					ctx.stroke();
					ctx.restore()
				}))
			}
		}
		if (Settings.KrakenTracers.enabled && getWorldProperty("fast_units")[getUserProperty("uid")]) {
			if (getWorldProperty("units")[66].length > 0) {
				ctx.save();
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#ffffff";
				ctx.font = "20px Baloo Paaji";
				ctx.lineWidth = 5;
				ctx.strokeText("Krakens amount: " + getWorldProperty("units")[66].length, 20, 500);
				ctx.fillText("Krakens amount: " + getWorldProperty("units")[66].length, 20, 500);
				ctx.restore();
				getWorldProperty("units")[66].forEach((kraken => {
					ctx.save();
					ctx.beginPath();
					ctx.strokeStyle = "#440b8a";
					ctx.lineWidth = 3;
					ctx.moveTo(getWorldProperty("fast_units")[getUserProperty("uid")].x + getUserProperty("cam").x, getWorldProperty("fast_units")[getUserProperty("uid")].y + getUserProperty("cam").y);
					ctx.lineTo(kraken.x + getUserProperty("cam").x, kraken.y + getUserProperty("cam").y);
					ctx.stroke();
					ctx.restore()
				}))
			}
		}
		if (Settings.SandwormTracers.enabled && getWorldProperty("fast_units")[getUserProperty("uid")]) {
			if (getWorldProperty("units")[76].length > 0) {
				ctx.save();
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#ffffff";
				ctx.font = "20px Baloo Paaji";
				ctx.lineWidth = 5;
				ctx.strokeText("Sandworms amount: " + getWorldProperty("units")[76].length, 20, 520);
				ctx.fillText("Sandworms amount: " + getWorldProperty("units")[76].length, 20, 520);
				ctx.restore();
				getWorldProperty("units")[76].forEach((sandworm => {
					ctx.save();
					ctx.beginPath();
					ctx.strokeStyle = "#000000";
					ctx.lineWidth = 3;
					ctx.moveTo(getWorldProperty("fast_units")[getUserProperty("uid")].x + getUserProperty("cam").x, getWorldProperty("fast_units")[getUserProperty("uid")].y + getUserProperty("cam").y);
					ctx.lineTo(sandworm.x + getUserProperty("cam").x, sandworm.y + getUserProperty("cam").y);
					ctx.stroke();
					ctx.restore()
				}))
			}
		}
		if (Settings.Debugger.enabled) {
			for (let i = 1; i < 100; i++) {
				if (Array.isArray(getWorldProperty("units")[i])) {
					getWorldProperty("units")[i].forEach((build => {
						if (build.pid) {
							ctx.save();
							ctx.lineWidth = 8;
							ctx.strokeStyle = "#000";
							ctx.fillStyle = "#fff";
							ctx.font = "22px Baloo Paaji";
							ctx.strokeText(getBuildOwner(build), build.x + getUserProperty("cam").x - 25, build.y + getUserProperty("cam").y);
							ctx.fillText(getBuildOwner(build), build.x + getUserProperty("cam").x - 25, build.y + getUserProperty("cam").y);
							ctx.restore()
						}
					}))
				}
			}
		}
		if (Settings.ListEnabledHacks.enabled) {
			let y = 300;
			for (const property in Settings) {
				if (Settings[property].enabled && Settings[property].draw) {
					ctx.save();
					ctx.font = "20px Baloo Paaji";
					ctx.fillStyle = "red";
					ctx.strokeStyle = "#000000";
					ctx.lineWidth = 5;
					ctx.strokeText(property, 6, y);
					ctx.fillText(property, 6, y);
					ctx.restore();
					y += 20
				}
			}
		}
		if (Settings.ShowJoinLeaves.enabled) {
			let JoinedPlayersY = 540;
			let KilledPlayersY = 640;
			for (let i = 0; i < JoinedPlayers.length; i++) {
				ctx.save();
				ctx.strokeStyle = "#000000";
				ctx.fillStyle = "green";
				ctx.lineWidth = 7;
				ctx.font = "20px Baloo Paaji";
				ctx.strokeText(JoinedPlayers[i], 6, JoinedPlayersY);
				ctx.fillText(JoinedPlayers[i], 6, JoinedPlayersY);
				ctx.restore();
				JoinedPlayersY += 20
			}
			for (let i = 0; i < KilledPlayers.length; i++) {
				ctx.save();
				ctx.strokeStyle = "#000000";
				ctx.fillStyle = "red";
				ctx.lineWidth = 7;
				ctx.font = "20px Baloo Paaji";
				ctx.strokeText(KilledPlayers[i], 6, KilledPlayersY);
				ctx.fillText(KilledPlayers[i], 6, KilledPlayersY);
				ctx.restore();
				KilledPlayersY += 20
			}
		}
		if (Settings.ExtractorInfo.enabled) {
			const extractors = [getWorldProperty("units")[24], getWorldProperty("units")[25], getWorldProperty("units")[26], getWorldProperty("units")[27], getWorldProperty("units")[28]];
			for (let ex = 0; ex < extractors.length; ex++) {
				extractors[ex].forEach((extractor => {
					ctx.save();
					ctx.strokeStyle = "#000000";
					ctx.fillStyle = "#ffffff";
					ctx.lineWidth = 7;
					ctx.font = "20px Baloo Paaji";
					ctx.strokeText((extractor.info & 255) + "x", getUserProperty("cam").x + extractor.x - 20, getUserProperty("cam").y + extractor.y - 5);
					ctx.fillText((extractor.info & 255) + "x", getUserProperty("cam").x + extractor.x - 20, getUserProperty("cam").y + extractor.y - 5);
					ctx.strokeText(((extractor.info & 65280) >> 8) + "x", getUserProperty("cam").x + extractor.x - 20, getUserProperty("cam").y + extractor.y + 15);
					ctx.fillText(((extractor.info & 65280) >> 8) + "x", getUserProperty("cam").x + extractor.x - 20, getUserProperty("cam").y + extractor.y + 15);
					ctx.restore()
				}))
			}
		}
		if (Settings.WindmillInfo.enabled) {
			getWorldProperty("units")[32].forEach((windmill => {
				ctx.save();
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.lineWidth = 7;
				ctx.font = "24px Baloo Paaji";
				ctx.strokeText((windmill.info & 255) + "x", getUserProperty("cam").x + windmill.x - 20, getUserProperty("cam").y + windmill.y - 5);
				ctx.fillText((windmill.info & 255) + "x", getUserProperty("cam").x + windmill.x - 20, getUserProperty("cam").y + windmill.y - 5);
				ctx.strokeText(((windmill.info & 65280) >> 8) + "x", getUserProperty("cam").x + windmill.x - 20, getUserProperty("cam").y + windmill.y + 15);
				ctx.fillText(((windmill.info & 65280) >> 8) + "x", getUserProperty("cam").x + windmill.x - 20, getUserProperty("cam").y + windmill.y + 15);
				ctx.restore()
			}))
		}
		if (Settings.OvenInfo.enabled) {
			getWorldProperty("units")[34].forEach((oven => {
				ctx.save();
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.lineWidth = 7;
				ctx.font = "24px Baloo Paaji";
				ctx.strokeText((oven.info & 31) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y - 15);
				ctx.fillText((oven.info & 31) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y - 15);
				ctx.strokeText(((oven.info & 992) >> 5) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y + 5);
				ctx.fillText(((oven.info & 992) >> 5) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y + 5);
				ctx.strokeText(((oven.info & 31744) >> 10) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y + 25);
				ctx.fillText(((oven.info & 31744) >> 10) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y + 25);
				ctx.restore()
			}))
		}
		if (Settings.FurnaceInfo.enabled) {
			getWorldProperty("units")[18].forEach((furnace => {
				ctx.save();
				ctx.lineWidth = 8;
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.font = "22px Baloo Paaji";
				ctx.strokeText(furnace.info + "x", furnace.x + getUserProperty("cam").x - 25, furnace.y + getUserProperty("cam").y);
				ctx.fillText(furnace.info + "x", furnace.x + getUserProperty("cam").x - 25, furnace.y + getUserProperty("cam").y);
				ctx.restore()
			}))
		}
		if (Settings.MachineInfo.enabled) {
			getWorldProperty("units")[23].forEach(machine => {
				ctx.lineWidth = 5;
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.font = "22px Baloo Paaji";
				const x = machine.x + getUserProperty("cam").x - 25;
				const y = machine.y + getUserProperty("cam").y;
		
				ctx.lineWidth = 5;
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.font = "22px Baloo Paaji";
				ctx.strokeText(getBuildOwner(machine), x, y);
				ctx.fillText(getBuildOwner(machine), x, y);
		
				const ownerWidth = ctx.measureText(getBuildOwner(machine)).width;
		
				ctx.fillStyle = "red";
				ctx.strokeStyle = "#000";
				ctx.lineWidth = 5;
				const levelX = x + ownerWidth + ctx.measureText(' [').width;
				ctx.strokeText(`[${getBuildLevel(machine.pid)}]`, levelX, y);
				ctx.fillText(`[${getBuildLevel(machine.pid)}]`, levelX, y);
		
				const scoreY = y + 30;
				const playerScore = getPlayerScore(machine.pid);
				const formattedScore = formatScore(playerScore);
				const scoreText = `[${formattedScore}]`;
				ctx.fillStyle = "gold";
				ctx.strokeStyle = "#000";
				ctx.lineWidth = 3;
				const scoreWidth = ctx.measureText(scoreText).width;
				const scoreX = x + (ownerWidth + ctx.measureText(`[${getBuildLevel(machine.pid)}]`).width) / 2 - scoreWidth / 2 - 15;
				console.log('Player Score:', playerScore);
console.log('Formatted Score:', formattedScore);

		
				ctx.strokeText(scoreText, scoreX, scoreY);
				ctx.fillText(scoreText, scoreX, scoreY);
		
				ctx.restore();
			});
		}
		
		
/*
		if (Settings.MachineInfo.enabled) {
			getWorldProperty("units")[23].forEach(machine => {
				ctx.lineWidth = 8;
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.font = "22px Baloo Paaji";
				const x = machine.x + getUserProperty("cam").x - 25;
				const y = machine.y + getUserProperty("cam").y;
				
				ctx.lineWidth = 8;
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.font = "22px Baloo Paaji";
				ctx.strokeText(getBuildOwner(machine), x, y);
				ctx.fillText(getBuildOwner(machine), x, y);
				
				const ownerWidth = ctx.measureText(getBuildOwner(machine)).width;
				
				ctx.fillStyle = "red";
				ctx.strokeStyle = "#000";
				ctx.lineWidth = 8;
		
				const levelX = x + ownerWidth + ctx.measureText(' [').width; 
				ctx.strokeText(`[${getBuildLevel(machine.pid)}]`, levelX, y);
				ctx.fillText(`[${getBuildLevel(machine.pid)}]`, levelX, y);

				ctx.fillStyle = "gold";
				ctx.strokeStyle = "#000";
				ctx.lineWidth = 5;



				
				
				ctx.restore();
			});
		}
			*/
		if (Settings.TotemInfo.enabled) {
			getWorldProperty("units")[29].forEach((totem => {
				ctx.save();
				ctx.lineWidth = 8;
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.font = "22px Baloo Paaji";
				ctx.strokeText(getBuildOwner(totem), totem.x + getUserProperty("cam").x - 25, totem.y + getUserProperty("cam").y);
				ctx.fillText(getBuildOwner(totem), totem.x + getUserProperty("cam").x - 25, totem.y + getUserProperty("cam").y);
				ctx.strokeText(totem.info >= 16 ? totem.info % 16 : totem.info, totem.x + getUserProperty("cam").x - 25, totem.y + getUserProperty("cam").y + 20);
				ctx.fillText(totem.info >= 16 ? totem.info % 16 : totem.info, totem.x + getUserProperty("cam").x - 25, totem.y + getUserProperty("cam").y + 20);
				ctx.strokeText(totem.info >= 16 ? "L" : "U", totem.x + getUserProperty("cam").x - 25, totem.y + getUserProperty("cam").y + 40);
				ctx.fillText(totem.info >= 16 ? "L" : "U", totem.x + getUserProperty("cam").x - 25, totem.y + getUserProperty("cam").y + 40);
				ctx.restore()
				const x = totem.x + getUserProperty("cam").x - 25;
				const y = totem.y + getUserProperty("cam").y;
				const ownerWidth = ctx.measureText(getBuildOwner(totem)).width;
				ctx.fillStyle = "red";
				ctx.strokeStyle = "#000";
				ctx.lineWidth = 8;

				const levelX = x + ownerWidth + ctx.measureText(' [').width;
				ctx.strokeText(`[${getBuildLevel(totem.pid)}]`, levelX, y);
				ctx.fillText(`[${getBuildLevel(totem.pid)}]`, levelX, y);
				
				ctx.restore();

			}))
		}
	if (Settings.PlayerOnTop.enabled) {
    var ΔΔᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ];
    var myself = getWorldProperty("fast_units")?.[getUserProperty("uid")] || null;

    if (Array.isArray(ΔΔᐃΔ)) {
        if (myself) {
            var indexOfMyself = ΔΔᐃΔ.indexOf(myself);
            if (indexOfMyself > -1) {
                ΔΔᐃΔ.splice(indexOfMyself, 1);
                ΔΔᐃΔ.push(myself);
            }
        }

        for (var ᐃⲆ = 0; ᐃⲆ < ΔΔᐃΔ.length; ᐃⲆ++) {
            var ᐃⵠⲆ = ΔΔᐃΔ[ᐃⲆ];
            if (ᐃⵠⲆ) {
                if (
                    ᐃⵠⲆ.ᐃΔⵠΔⵠ !== ΔⲆ.ΔⲆᐃᐃⵠ &&
                    ᐃⵠⲆ.ᐃΔⵠΔⵠ !== ΔⲆ.ⵠⵠⲆΔΔ &&
                    ΔⲆ.ΔᐃⲆΔᐃ !== ᐃⵠⲆ.ᐃΔⵠΔⵠ &&
                    ΔⲆ.ⲆⵠⲆΔⵠ !== ᐃⵠⲆ.ᐃΔⵠΔⵠ &&
                    ᐃⵠⲆ.ᐃΔⵠΔⵠ !== ΔⲆ.ᐃΔᐃΔᐃ
                ) {
                    if (ᐃⵠⲆ.ⲆᐃⲆᐃⲆⵠΔ === 0) {
                        if (0.001 < ᐃⵠⲆ.ΔⲆΔⲆⲆⲆⵠ) {
                            ᐃⵠⲆ.ΔⲆΔⲆⲆⲆⵠ = ΔⲆᐃ.ΔΔⲆⲆΔ(ᐃⵠⲆ.ΔⲆΔⲆⲆⲆⵠ, ⵠⵠᐃ, 0.018);
                            var ⵠⲆⵠΔ = 1 + 0.18 * Math.min(ΔΔΔᐃ, Math.max(ᐃⵠⲆ.ΔⲆΔⲆⲆⲆⵠ, ⵠΔⵠᐃ) / 100);
                            Δ.save();
                            Δ.scale(ⵠⲆⵠΔ, ⵠⲆⵠΔ);
                            ⲆΔⵠ.ⲆⵠΔ.x /= ⵠⲆⵠΔ;
                            ⲆΔⵠ.ⲆⵠΔ.y /= ⵠⲆⵠΔ;
                            ᐃⵠⲆ.x /= ⵠⲆⵠΔ;
                            ᐃⵠⲆ.y /= ⵠⲆⵠΔ;
                            ᐃⵠⲆ.r.x /= ⵠⲆⵠΔ;
                            ᐃⵠⲆ.r.y /= ⵠⲆⵠΔ;
                            ᐃⵠⲆ.ᐃᐃᐃⲆΔⲆΔ();
                            ᐃⵠⲆ.ᐃⵠΔᐃ();
                            ⲆΔⵠ.ⲆⵠΔ.x *= ⵠⲆⵠΔ;
                            ⲆΔⵠ.ⲆⵠΔ.y *= ⵠⲆⵠΔ;
                            ᐃⵠⲆ.x *= ⵠⲆⵠΔ;
                            ᐃⵠⲆ.y *= ⵠⲆⵠΔ;
                            ᐃⵠⲆ.r.x *= ⵠⲆⵠΔ;
                            ᐃⵠⲆ.r.y *= ⵠⲆⵠΔ;
                            Δ.restore();
                        } else {
                            ᐃⵠⲆ.ⲆΔⲆⲆⵠⵠⵠ = 0;
                            ᐃⵠⲆ.ᐃᐃᐃⲆΔⲆΔ();
                            ᐃⵠⲆ.ᐃⵠΔᐃ();
                        }
                    }
                } else if (ᐃⵠⲆ.ⵠᐃᐃⲆⲆ <= 180) {
                    Δ.save();
                    var ⵠⲆⵠΔ = ⲆⵠΔΔ + 0.35 * Math.min(1, Math.max(ᐃⵠⲆ.ⵠⵠⵠⵠⵠ - 30, Ⲇⵠᐃ) / 180);
                    Δ.scale(ⵠⲆⵠΔ, ⵠⲆⵠΔ);
                    ⲆΔⵠ.ⲆⵠΔ.x /= ⵠⲆⵠΔ;
                    ⲆΔⵠ.ⲆⵠΔ.y /= ⵠⲆⵠΔ;
                    ᐃⵠⲆ.x /= ⵠⲆⵠΔ;
                    ᐃⵠⲆ.y /= ⵠⲆⵠΔ;
                    ᐃⵠⲆ.r.x /= ⵠⲆⵠΔ;
                    ᐃⵠⲆ.r.y /= ⵠⲆⵠΔ;
                    ᐃⵠⲆ.ⲆΔⲆⲆⵠⵠⵠ = 0;
                    ᐃⵠⲆ.ᐃᐃᐃⲆΔⲆΔ();
                    ᐃⵠⲆ.ᐃⵠΔᐃ();
                    ⲆΔⵠ.ⲆⵠΔ.x *= ⵠⲆⵠΔ;
                    ⲆΔⵠ.ⲆⵠΔ.y *= ⵠⲆⵠΔ;
                    ᐃⵠⲆ.x *= ⵠⲆⵠΔ;
                    ᐃⵠⲆ.y *= ⵠⲆⵠΔ;
                    ᐃⵠⲆ.r.x *= ⵠⲆⵠΔ;
                    ᐃⵠⲆ.r.y *= ⵠⲆⵠΔ;
                    Δ.restore();
                }
            }
        }
    }
	if (Settings.BoxOnTop.enabled) {
		var ᐃΔⲆⵠⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔⵠⵠ];
		for (var ᐃⲆ = 0; ᐃⲆ < ᐃΔⲆⵠⲆ.length; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃΔⲆⵠⲆ[ᐃⲆ], ⵠ.ΔⵠΔⵠⵠ, ⵠ.ⵠⵠⵠΔⲆⲆΔ);
		var ᐃΔᐃⵠⵠᐃⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⲆΔ];
		for (var ᐃⲆ = ⵠΔⵠᐃ; ᐃΔᐃⵠⵠᐃⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ᐃΔᐃⵠⵠᐃⲆ[ᐃⲆ], ⵠ.ΔⵠΔⵠⵠ, ⵠ.ⵠⵠⵠΔⲆⲆΔ);
		var ΔⲆᐃⲆΔⲆⲆ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠⵠΔ];
		for (var ᐃⲆ = Ⲇⵠⵠᐃ; ΔⲆᐃⲆΔⲆⲆ.length > ᐃⲆ; ᐃⲆ++) ᐃⲆⵠⲆ(ΔⲆᐃⲆΔⲆⲆ[ᐃⲆ], ⵠ.ΔΔⵠⵠΔ, ⵠ.ΔΔΔⵠᐃΔΔ)
	}
	if (Settings.BoxInfo.enabled) {
		const boxes = [getWorldProperty("units")[82], getWorldProperty("units")[86], getWorldProperty("units")[87]];
		for (let bx = 0; bx < boxes.length; bx++) {
			boxes[bx].forEach((box => {
				ctx.save();
				ctx.lineWidth = 8;
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.font = "18px Baloo Paaji";
				if (box.boxType) {
					ctx.strokeText(box.boxType, box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y - 10);
					ctx.fillText(box.boxType, box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y - 10)
				}
				if (box.disappearTime) {
					var n = Math.floor((box.disappearTime - +new Date) / 1e3),
						a = 0;
					a = n < 10 ? 9 : n < 99 ? 12 : 18
				}
				ctx.strokeText(n + "s", box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y + 10);
				ctx.fillText(n + "s", box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y + 10);
				ctx.strokeText("hits: " +  box.hits, box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y + 30);
				ctx.fillText("hits: " + box.hits, box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y + 30);
				ctx.restore()
			}))
		}
	}
	if (Settings.ChestInfo.enabled) {
		getWorldProperty("units")[11].forEach((chest => {
			if (chest.action) {
				ctx.save();
				ctx.globalAlpha = .9;
				ctxDrawImage(ctx, ᐃⲆΔⵠ.ⵠⲆᐃ[chest.action / 2 - 1].info.ⵠⵠ[0], getUserProperty("cam").x + chest.x - 33, getUserProperty("cam").y + chest.y - 25, 67, 52);
				ctx.globalAlpha = 1;
				ctx.font = "20px Baloo Paaji";
				ctx.strokeStyle = "rgb(0,0,0)";
				ctx.lineWidth = 7;
				ctx.strokeText(chest.action / 2 - 1, getUserProperty("cam").x + chest.x - 32, getUserProperty("cam").y + chest.y - 12);
				ctx.strokeText("x" + chest.info, getUserProperty("cam").x + chest.x - 32, getUserProperty("cam").y + chest.y + 20);
				ctx.fillStyle = "rgb(255,255,255)";
				ctx.fillText(chest.action / 2 - 1, getUserProperty("cam").x + chest.x - 32, getUserProperty("cam").y + chest.y - 12);
				ctx.fillText("x" + chest.info, getUserProperty("cam").x + chest.x - 32, getUserProperty("cam").y + chest.y + 20);
				ctx.restore()
			}
		}))
	}
}

	}

	function ⲆΔⲆⲆⲆ(ΔΔ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ) {
		ⵠⲆΔ.transition ? (Δ.globalAlpha = 1, ⵠΔⲆⲆ(Δ, ᐃᐃ[ΔΔ][ⵠⲆΔ.time], Ⲇᐃ, ⲆⲆⲆ), ⵠⲆΔ.time = ⵠⲆΔ.time ? 0 : 1, Δ.globalAlpha = 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ, ⵠΔⲆⲆ(Δ, ᐃᐃ[ΔΔ][ⵠⲆΔ.time], Ⲇᐃ, ⲆⲆⲆ), ⵠⲆΔ.time = ⵠⲆΔ.time ? ⵠᐃⲆⵠ : 1, Δ.globalAlpha = 1) : ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ)
	}

	function ⲆᐃΔⲆᐃⲆⵠⵠΔ() {
		var ΔⲆΔᐃᐃ = ⲆΔⵠ.ΔⲆΔᐃᐃ;
		if (ᐃⲆΔ === ΔⲆΔᐃᐃ.ᐃᐃⵠΔᐃ) ΔⲆΔᐃᐃ.ΔΔⲆᐃΔ = Math.max(0, ΔⲆΔᐃᐃ.ΔΔⲆᐃΔ - ᐃⵠᐃⵠ / ΔⵠⲆᐃΔ);
		else ΔⲆΔᐃᐃ.ΔΔⲆᐃΔ = Math.min(ⲆⵠΔΔ, ΔⲆΔᐃᐃ.ΔΔⲆᐃΔ + ᐃⵠᐃⵠ / 10);
		var ⲆᐃᐃⵠⲆ = ΔⲆΔᐃᐃ.ⲆᐃᐃⵠⲆ;
		for (var ᐃⲆ = ᐃⲆΔᐃ; ᐃⲆ < ⲆᐃᐃⵠⲆ.length; ᐃⲆ++) {
			var ⲆΔΔ = ⲆᐃᐃⵠⲆ[ᐃⲆ];
			ΔⲆΔᐃᐃ.ΔⵠΔ(ⲆΔΔ);
			ᐃⵠᐃᐃΔᐃⲆ(ⵠ.ⲆΔⵠΔⵠⲆⵠ, ⲆΔΔ.id, ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔΔ.x, ⲆΔⵠ.ⲆⵠΔ.y + ⲆΔΔ.y, ⲆΔΔ.alpha)
		}
		for (var ᐃⲆ = 0; ⲆᐃᐃⵠⲆ.length > ᐃⲆ; ᐃⲆ++) {
			var ⲆΔΔ = ⲆᐃᐃⵠⲆ[ᐃⲆ];
			if (ⲆⲆΔ >= ⲆΔΔ.ⲆⲆᐃᐃΔ || -ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⵠΔ < ⲆΔΔ.x || ⲆΔΔ.x < -ⲆΔⵠ.ⲆⵠΔ.x - ⲆΔⵠ.ⲆⵠΔ.w / ᐃᐃΔⵠ || -ⲆΔⵠ.ⲆⵠΔ.y + ΔⲆⲆΔ < ⲆΔΔ.y) ⲆᐃᐃⵠⲆ.splice(ᐃⲆ, Δⵠᐃ)
		}
		var ΔⵠΔΔ = -ⲆΔⵠ.ⲆⵠΔ.y;
		ⵠⲆΔ.ᐃⵠΔᐃⲆ > -1e3 && ΔⲆΔᐃᐃ.add(ΔⵠΔΔ)
	}

	function ᐃᐃⲆⲆΔⵠᐃ() {
		for (var ᐃⲆ = ⵠⲆΔ.ᐃᐃⲆᐃ.length - 1; ᐃⲆ >= 0; ᐃⲆ--) {
			var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⲆ];
			if (ⵠⲆΔ.ⲆΔᐃᐃΔ === ΔⲆᐃΔ.ᐃᐃⲆ) {
				var ⵠⵠΔ = ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ];
				if (ΔⲆᐃΔ.x1 - 230 - ⲆΔⵠΔ <= -ⲆΔⵠ.ⲆⵠΔ.x && ΔⲆᐃΔ.x2 + 330 >= -ⲆΔⵠ.ⲆⵠΔ.x && ΔⲆᐃΔ.y1 - ΔⲆⲆΔ <= -ⲆΔⵠ.ⲆⵠΔ.y && ΔⲆᐃΔ.y2 + ⵠᐃⵠⲆᐃᐃΔ >= -ⲆΔⵠ.ⲆⵠΔ.y) {
					var ⲆⲆⵠΔ = ΔⲆᐃΔ.x2;
					ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ && (ⲆⲆⵠΔ -= 610);
					var ᐃⲆᐃᐃ = ΔⲆᐃΔ.x1;
					ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ && (ᐃⲆᐃᐃ += 610);
					var ᐃⵠⵠΔ = ΔⲆᐃΔ.y2;
					if (ⵠⲆΔ.ⲆΔᐃᐃΔ !== ΔⲆᐃΔ.ᐃᐃⲆ) ᐃⵠⵠΔ -= 610;
					var ΔⵠΔⲆ = ΔⲆᐃΔ.y1;
					ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ && (ΔⵠΔⲆ += 610);
					if (ⵠⲆΔ.transition) {
						var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
						Δ.fillStyle = ⵠΔⲆⵠⵠ(ⵠⵠΔ.Δᐃᐃ[0], ⵠⵠΔ.Δᐃᐃ[ⵠⲆⵠⲆ], ⵠⵠΔ.Δᐃᐃ[ⵠⵠΔⵠ], ⵠⵠΔ.ⵠΔⵠ[ⲆⲆᐃ], ⵠⵠΔ.ⵠΔⵠ[ᐃΔⲆΔ], ⵠⵠΔ.ⵠΔⵠ[1], ⵠⲆΔⲆ)
					} else Δ.fillStyle = ⵠⵠΔ.ⵠⲆⵠⵠⲆ[ⵠⲆΔ.time];
					var ΔΔⵠᐃᐃ = Math.max(ⲆΔⵠ.ⲆⵠΔ.x + ᐃⲆᐃᐃ - ᐃᐃΔⵠ - 230, 0);
					var ΔᐃⵠⵠⲆ = Math.max(-ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⵠΔ - ⲆⲆⵠΔ - 330 - ⵠⵠᐃⲆ, 0);
					var ⲆΔᐃⲆᐃ = Math.max(ⲆΔⵠ.ⲆⵠΔ.y + ΔⵠΔⲆ - ⵠᐃᐃⲆ, 0);
					var ᐃᐃΔᐃⲆ = Math.max(-ⲆΔⵠ.ⲆⵠΔ.y + ΔⲆⲆΔ - ᐃⵠⵠΔ - 100 - 2, 0);
					Δ.beginPath();
					Δ.fillRect(ΔΔⵠᐃᐃ, ⲆΔᐃⲆᐃ, ⲆΔⵠΔ - ΔᐃⵠⵠⲆ - ΔΔⵠᐃᐃ, ΔⲆⲆΔ - ⲆΔᐃⲆᐃ - ᐃᐃΔᐃⲆ)
				}
			}
		}
		for (var ᐃⲆ = ⵠⲆΔ.ᐃᐃⲆᐃ.length - ΔΔⵠ; ᐃⲆ >= 0; ᐃⲆ--) {
			var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⲆ];
			if (ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ) {
				var ⲆⲆⵠΔ = ΔⲆᐃΔ.x2;
				if (ⵠⲆΔ.ⲆΔᐃᐃΔ !== ΔⲆᐃΔ.ᐃᐃⲆ) ⲆⲆⵠΔ -= 400;
				var ᐃⲆᐃᐃ = ΔⲆᐃΔ.x1;
				if (ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ) ᐃⲆᐃᐃ += 400;
				var ᐃⵠⵠΔ = ΔⲆᐃΔ.y2;
				ⵠⲆΔ.ⲆΔᐃᐃΔ !== ΔⲆᐃΔ.ᐃᐃⲆ && (ᐃⵠⵠΔ -= 300);
				var ΔⵠΔⲆ = ΔⲆᐃΔ.y1;
				if (ⵠⲆΔ.ⲆΔᐃᐃΔ !== ΔⲆᐃΔ.ᐃᐃⲆ) ΔⵠΔⲆ += 300;
				0 === (ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔᐃⲆᐃⲆ) && ⲆⲆⵠΔ - ⲆΔⵠΔ + 120 <= -ⲆΔⵠ.ⲆⵠΔ.x && ⲆⲆⵠΔ + 820 >= -ⲆΔⵠ.ⲆⵠΔ.x && ΔⵠΔⲆ + 88 - ΔⲆⲆΔ <= -ⲆΔⵠ.ⲆⵠΔ.y && -ⲆΔⵠ.ⲆⵠΔ.y <= ᐃⵠⵠΔ + 50 && (ⵠΔⵠᐃⵠⵠⲆ(ⲆⲆⵠΔ, ΔⵠΔⲆ + 88, ᐃⵠⵠΔ - 88, ⲆΔⵠ.ᐃΔⲆⵠ[ⲆᐃΔⵠ], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔᐃⲆᐃⲆ), ⵠΔᐃᐃΔⵠⵠ(ⲆⲆⵠΔ, ΔⵠΔⲆ + 88, ᐃⵠⵠΔ - 88, ⲆΔⵠ.ᐃΔⲆⵠ[ⵠᐃⵠ], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔᐃⲆᐃⲆ));
				if ((ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⲆⲆⵠΔⵠ) === ⲆⲆᐃⲆ && -ⲆΔⵠ.ⲆⵠΔ.x >= ᐃⲆᐃᐃ - ⲆΔⵠΔ - 700 && ᐃⲆᐃᐃ - 20 >= -ⲆΔⵠ.ⲆⵠΔ.x && ΔⵠΔⲆ + 88 - ΔⲆⲆΔ <= -ⲆΔⵠ.ⲆⵠΔ.y && -ⲆΔⵠ.ⲆⵠΔ.y <= ᐃⵠⵠΔ + 50) {
					ⲆᐃΔᐃⲆΔᐃ(ᐃⲆᐃᐃ, ΔⵠΔⲆ + 88, ᐃⵠⵠΔ - 88, ⲆΔⵠ.ᐃΔⲆⵠ[1], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⲆⲆⵠΔⵠ);
					ᐃᐃᐃⲆᐃΔᐃ(ᐃⲆᐃᐃ, ΔⵠΔⲆ + 88, ᐃⵠⵠΔ - 88, ⲆΔⵠ.ᐃΔⲆⵠ[ᐃΔΔⲆ], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⲆⲆⵠΔⵠ)
				}
				if (0 === (ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⵠⵠΔⲆᐃ) && -ⲆΔⵠ.ⲆⵠΔ.x >= ᐃⲆᐃᐃ - 235 - ⲆΔⵠΔ && -ⲆΔⵠ.ⲆⵠΔ.x <= ⲆⲆⵠΔ + 350 && ᐃⵠⵠΔ - ΔⲆⲆΔ - 275 <= -ⲆΔⵠ.ⲆⵠΔ.y && -ⲆΔⵠ.ⲆⵠΔ.y <= ᐃⵠⵠΔ + 490) {
					ᐃⲆⵠⲆⵠΔⵠ(ᐃⵠⵠΔ - 230, ᐃⲆᐃᐃ - 230, ⲆⲆⵠΔ + 230, ⲆΔⵠ.ᐃΔⲆⵠ[2], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⵠⵠΔⲆᐃ);
					ΔᐃΔΔⵠⵠᐃ(ᐃⵠⵠΔ - 230, ᐃⲆᐃᐃ - 230, ⲆⲆⵠΔ + 230, ⲆΔⵠ.ᐃΔⲆⵠ[2], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⵠⵠΔⲆᐃ)
				}
				if ((ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔΔⵠᐃⲆ) === Δⵠⵠ && -ⲆΔⵠ.ⲆⵠΔ.x >= ᐃⲆᐃᐃ - 235 - ⲆΔⵠΔ && ⲆⲆⵠΔ + 350 >= -ⲆΔⵠ.ⲆⵠΔ.x && -ⲆΔⵠ.ⲆⵠΔ.y >= ΔⵠΔⲆ - ΔⲆⲆΔ - 390 && -ⲆΔⵠ.ⲆⵠΔ.y <= ΔⵠΔⲆ + 315) {
					ΔᐃⵠⵠⵠᐃⲆ(ΔⵠΔⲆ + 310, ᐃⲆᐃᐃ - 230, ⲆⲆⵠΔ + 230, ⲆΔⵠ.ᐃΔⲆⵠ[3], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔΔⵠᐃⲆ);
					ⵠᐃⲆⲆΔⵠⲆ(ΔⵠΔⲆ + 310, ᐃⲆᐃᐃ - 230, ⲆⲆⵠΔ + 230, ⲆΔⵠ.ᐃΔⲆⵠ[ⵠΔΔᐃ], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔΔⵠᐃⲆ)
				}
			}
		}
		for (var ᐃⲆ = ⵠⲆΔ.ᐃᐃⲆᐃ.length - ⲆⲆⲆᐃ; ᐃⲆΔᐃ <= ᐃⲆ; ᐃⲆ--) {
			var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⲆ];
			if (ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ) {
				var ⲆⲆⵠΔ = ΔⲆᐃΔ.x2;
				if (ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ) ⲆⲆⵠΔ -= 400;
				var ᐃⲆᐃᐃ = ΔⲆᐃΔ.x1;
				if (ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ) ᐃⲆᐃᐃ += 400;
				var ᐃⵠⵠΔ = ΔⲆᐃΔ.y2;
				if (ⵠⲆΔ.ⲆΔᐃᐃΔ !== ΔⲆᐃΔ.ᐃᐃⲆ) ᐃⵠⵠΔ -= 300;
				var ΔⵠΔⲆ = ΔⲆᐃΔ.y1;
				ⵠⲆΔ.ⲆΔᐃᐃΔ !== ΔⲆᐃΔ.ᐃᐃⲆ && (ΔⵠΔⲆ += 300);
				0 !== (ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔᐃⲆᐃⲆ) && ⲆⲆⵠΔ - ⲆΔⵠΔ + 120 <= -ⲆΔⵠ.ⲆⵠΔ.x && ⲆⲆⵠΔ + 820 >= -ⲆΔⵠ.ⲆⵠΔ.x && ΔⵠΔⲆ + 88 - ΔⲆⲆΔ <= -ⲆΔⵠ.ⲆⵠΔ.y && -ⲆΔⵠ.ⲆⵠΔ.y <= ᐃⵠⵠΔ + 50 && ⵠΔⵠᐃⵠⵠⲆ(ⲆⲆⵠΔ, ΔⵠΔⲆ + 88, ᐃⵠⵠΔ - 88, ⲆΔⵠ.ᐃΔⲆⵠ[0], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔᐃⲆᐃⲆ);
				ⲆⲆᐃⲆ !== (ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⲆⲆⵠΔⵠ) && ᐃⲆᐃᐃ - ⲆΔⵠΔ - 700 <= -ⲆΔⵠ.ⲆⵠΔ.x && -ⲆΔⵠ.ⲆⵠΔ.x <= ᐃⲆᐃᐃ - 20 && -ⲆΔⵠ.ⲆⵠΔ.y >= ΔⵠΔⲆ + 88 - ΔⲆⲆΔ && ᐃⵠⵠΔ + 50 >= -ⲆΔⵠ.ⲆⵠΔ.y && ⲆᐃΔᐃⲆΔᐃ(ᐃⲆᐃᐃ, ΔⵠΔⲆ + 88, ᐃⵠⵠΔ - 88, ⲆΔⵠ.ᐃΔⲆⵠ[ⲆⲆΔⵠ], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⲆⲆⵠΔⵠ);
				(ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⵠⵠΔⲆᐃ) !== ⵠⵠⲆΔ && ᐃⲆᐃᐃ - 235 - ⲆΔⵠΔ <= -ⲆΔⵠ.ⲆⵠΔ.x && ⲆⲆⵠΔ + 350 >= -ⲆΔⵠ.ⲆⵠΔ.x && -ⲆΔⵠ.ⲆⵠΔ.y >= ᐃⵠⵠΔ - ΔⲆⲆΔ - 275 && ᐃⵠⵠΔ + 490 >= -ⲆΔⵠ.ⲆⵠΔ.y && ᐃⲆⵠⲆⵠΔⵠ(ᐃⵠⵠΔ - 230, ᐃⲆᐃᐃ - 230, ⲆⲆⵠΔ + 230, ⲆΔⵠ.ᐃΔⲆⵠ[ᐃᐃΔⵠ], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⵠⵠΔⲆᐃ);
				if ((ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔΔⵠᐃⲆ) !== ⵠⵠΔΔ && ᐃⲆᐃᐃ - 235 - ⲆΔⵠΔ <= -ⲆΔⵠ.ⲆⵠΔ.x && ⲆⲆⵠΔ + 350 >= -ⲆΔⵠ.ⲆⵠΔ.x && ΔⵠΔⲆ - ΔⲆⲆΔ - 390 <= -ⲆΔⵠ.ⲆⵠΔ.y && -ⲆΔⵠ.ⲆⵠΔ.y <= ΔⵠΔⲆ + 315) {
					ΔᐃⵠⵠⵠᐃⲆ(ΔⵠΔⲆ + 310, ᐃⲆᐃᐃ - 230, ⲆⲆⵠΔ + 230, ⲆΔⵠ.ᐃΔⲆⵠ[ⵠᐃⵠⵠ], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔΔⵠᐃⲆ)
				}
			}
		}
		for (var ᐃⲆ = ⵠⲆΔ.ᐃᐃⲆᐃ.length - 1; 0 <= ᐃⲆ; ᐃⲆ--) {
			var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⲆ];
			if (ⵠⲆΔ.ⲆΔᐃᐃΔ !== ΔⲆᐃΔ.ᐃᐃⲆ) {
				var ⵠⵠΔ = ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ];
				if (-ⲆΔⵠ.ⲆⵠΔ.x >= ΔⲆᐃΔ.x1 - 230 - ⲆΔⵠΔ && ΔⲆᐃΔ.x2 + 330 >= -ⲆΔⵠ.ⲆⵠΔ.x && -ⲆΔⵠ.ⲆⵠΔ.y >= ΔⲆᐃΔ.y1 - ΔⲆⲆΔ && -ⲆΔⵠ.ⲆⵠΔ.y <= ΔⲆᐃΔ.y2 + 100) {
					var ⲆⲆⵠΔ = ΔⲆᐃΔ.x2;
					if (ⵠⲆΔ.ⲆΔᐃᐃΔ !== ΔⲆᐃΔ.ᐃᐃⲆ) {
						if (ⲆᐃΔⵠ === (ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔᐃⲆᐃⲆ)) ⲆⲆⵠΔ -= 414;
						else ⲆⲆⵠΔ -= 610
					}
					var ᐃⲆᐃᐃ = ΔⲆᐃΔ.x1;
					if (ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ) {
						if ((ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⲆⲆⵠΔⵠ) === ⵠᐃⲆⵠ) ᐃⲆᐃᐃ += 414;
						else ᐃⲆᐃᐃ += 610
					}
					var ᐃⵠⵠΔ = ΔⲆᐃΔ.y2;
					if (ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ) {
						(ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⵠⵠΔⲆᐃ) === 0 ? ᐃⵠⵠΔ -= 414 : ᐃⵠⵠΔ -= 610
					}
					var ΔⵠΔⲆ = ΔⲆᐃΔ.y1;
					if (ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ) {
						0 === (ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔΔⵠᐃⲆ) ? ΔⵠΔⲆ += 414 : ΔⵠΔⲆ += 610
					}
					if (ⵠⲆΔ.transition) {
						var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ᐃⵠⵠⵠ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
						Δ.fillStyle = ⵠΔⲆⵠⵠ(ⵠⵠΔ.Δᐃᐃ[Δⵠⵠ], ⵠⵠΔ.Δᐃᐃ[ΔΔⵠ], ⵠⵠΔ.Δᐃᐃ[ⵠΔⵠⲆ], ⵠⵠΔ.ⵠΔⵠ[ⲆᐃΔⵠ], ⵠⵠΔ.ⵠΔⵠ[ⲆⵠΔΔ], ⵠⵠΔ.ⵠΔⵠ[ⵠⲆᐃⵠ], ⵠⲆΔⲆ)
					} else Δ.fillStyle = ⵠⵠΔ.ⵠⲆⵠⵠⲆ[ⵠⲆΔ.time];
					var ΔΔⵠᐃᐃ = Math.max(ⲆΔⵠ.ⲆⵠΔ.x + ᐃⲆᐃᐃ - ⵠΔΔΔ - 230, 0);
					var ΔᐃⵠⵠⲆ = Math.max(-ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⵠΔ - ⲆⲆⵠΔ - 330 - ᐃᐃΔⵠ, ᐃⲆΔ);
					var ⲆΔᐃⲆᐃ = Math.max(ⲆΔⵠ.ⲆⵠΔ.y + ΔⵠΔⲆ - 2, ⲆⲆΔ);
					var ᐃᐃΔᐃⲆ = Math.max(-ⲆΔⵠ.ⲆⵠΔ.y + ΔⲆⲆΔ - ᐃⵠⵠΔ - ᐃⵠⵠΔⲆ - ⵠⵠᐃⲆ, Δⵠⵠ);
					Δ.beginPath();
					Δ.fillRect(ΔΔⵠᐃᐃ, ⲆΔᐃⲆᐃ, ⲆΔⵠΔ - ΔᐃⵠⵠⲆ - ΔΔⵠᐃᐃ, ΔⲆⲆΔ - ⲆΔᐃⲆᐃ - ᐃᐃΔᐃⲆ)
				}
			}
		}
		ⲆΔⲆⵠ.ΔⵠⵠΔΔ && (ⲆⲆΔⲆΔ(ᐃΔⲆᐃΔⵠᐃ, ᐃᐃΔΔΔΔΔ, ᐃᐃᐃⲆᐃⵠᐃ, ⵠⵠᐃⲆΔⵠᐃ, ᐃᐃᐃᐃΔⲆΔ, ⵠ.ⵠⲆⵠΔᐃ, ᐃ[104], 2), ⲆⲆΔⲆΔ(ᐃΔⲆᐃΔⵠᐃ, ᐃᐃΔΔΔΔΔ, ᐃᐃᐃⲆᐃⵠᐃ, ⵠⵠᐃⲆΔⵠᐃ, ᐃᐃᐃᐃΔⲆΔ, ⵠ.ⲆΔΔⵠᐃ, ᐃ[104], ⵠⲆᐃⵠ));
		ⲆⲆΔⲆΔ(ⲆⵠⵠⲆᐃ, ᐃᐃΔΔΔΔΔ, ᐃᐃᐃⲆᐃⵠᐃ, ⵠⵠᐃⲆΔⵠᐃ, ᐃᐃᐃᐃΔⲆΔ, ⵠ.ⵠⵠⲆⵠΔ, ᐃ[104], ᐃⵠΔⲆ);
		ⲆΔⲆⵠ.ΔⵠⵠΔΔ && ⲆⲆΔⲆΔ(ᐃⵠΔⲆΔΔⲆⲆⲆ, ᐃᐃΔΔΔΔΔ, ᐃᐃᐃⲆᐃⵠᐃ, ⵠⵠᐃⲆΔⵠᐃ, ᐃᐃᐃᐃΔⲆΔ, ⵠ.ᐃⲆᐃᐃⲆⵠᐃ, ᐃ[457]);
		var ΔΔᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ];
		for (var ᐃⲆ = ⲆⲆΔ; ΔΔᐃΔ.length > ᐃⲆ; ᐃⲆ++) {
			var ᐃⵠⲆ = ΔΔᐃΔ[ᐃⲆ];
			for (var ⲆⲆⲆⵠ = 0; ᐃⵠⲆ.ΔΔΔᐃⲆ.length > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) ⲆⲆⵠⵠⵠΔⲆⲆᐃ(ᐃⵠⲆ.ΔΔΔᐃⲆ[ⲆⲆⲆⵠ])
		}
		ᐃΔⵠⵠⵠᐃⵠ += 40 * ᐃⵠᐃⵠ;
		if (60 < ᐃΔⵠⵠⵠᐃⵠ) ᐃΔⵠⵠⵠᐃⵠ -= 60;
		ⲆⲆΔⲆΔ(ᐃⲆⵠⲆⲆⲆᐃⲆⲆ, ᐃᐃΔΔΔΔΔ, ᐃᐃᐃⲆᐃⵠᐃ, ⵠⵠᐃⲆΔⵠᐃ, ᐃᐃᐃᐃΔⲆΔ, ⵠ.ⵠΔⲆⵠ, "r", 0);
		for (var ᐃⲆ = ᐃⲆΔ; ᐃⲆ < ⵠⲆΔ.ᐃᐃⲆᐃ.length; ᐃⲆ++) {
			var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⲆ];
			if (ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ) {
				var ⲆⲆⵠΔ = ΔⲆᐃΔ.x2;
				ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ && (ⲆⲆⵠΔ -= 400);
				var ᐃⲆᐃᐃ = ΔⲆᐃΔ.x1;
				ΔⲆᐃΔ.ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ && (ᐃⲆᐃᐃ += 400);
				var ᐃⵠⵠΔ = ΔⲆᐃΔ.y2;
				ⵠⲆΔ.ⲆΔᐃᐃΔ !== ΔⲆᐃΔ.ᐃᐃⲆ && (ᐃⵠⵠΔ -= 300);
				var ΔⵠΔⲆ = ΔⲆᐃΔ.y1;
				if (ⵠⲆΔ.ⲆΔᐃᐃΔ !== ΔⲆᐃΔ.ᐃᐃⲆ) ΔⵠΔⲆ += 300;
				if ((ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔᐃⲆᐃⲆ) > 0 && ⲆⲆⵠΔ - ⲆΔⵠΔ + 120 <= -ⲆΔⵠ.ⲆⵠΔ.x && -ⲆΔⵠ.ⲆⵠΔ.x <= ⲆⲆⵠΔ + 820 && ΔⵠΔⲆ + 88 - ΔⲆⲆΔ <= -ⲆΔⵠ.ⲆⵠΔ.y && ᐃⵠⵠΔ + 50 >= -ⲆΔⵠ.ⲆⵠΔ.y) ⵠΔᐃᐃΔⵠⵠ(ⲆⲆⵠΔ, ΔⵠΔⲆ + 88, ᐃⵠⵠΔ - 88, ⲆΔⵠ.ᐃΔⲆⵠ[0], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔᐃⲆᐃⲆ);
				if ((ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⲆⲆⵠΔⵠ) > ⵠⵠΔΔ && ᐃⲆᐃᐃ - ⲆΔⵠΔ - 700 <= -ⲆΔⵠ.ⲆⵠΔ.x && ᐃⲆᐃᐃ - 20 >= -ⲆΔⵠ.ⲆⵠΔ.x && ΔⵠΔⲆ + 88 - ΔⲆⲆΔ <= -ⲆΔⵠ.ⲆⵠΔ.y && ᐃⵠⵠΔ + 50 >= -ⲆΔⵠ.ⲆⵠΔ.y) ᐃᐃᐃⲆᐃΔᐃ(ᐃⲆᐃᐃ, ΔⵠΔⲆ + 88, ᐃⵠⵠΔ - 88, ⲆΔⵠ.ᐃΔⲆⵠ[ᐃⲆⲆ], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⲆⲆⵠΔⵠ);
				if (0 < (ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⵠⵠΔⲆᐃ) && ᐃⲆᐃᐃ - 235 - ⲆΔⵠΔ <= -ⲆΔⵠ.ⲆⵠΔ.x && ⲆⲆⵠΔ + 350 >= -ⲆΔⵠ.ⲆⵠΔ.x && -ⲆΔⵠ.ⲆⵠΔ.y >= ᐃⵠⵠΔ - ΔⲆⲆΔ - 275 && -ⲆΔⵠ.ⲆⵠΔ.y <= ᐃⵠⵠΔ + 490) ΔᐃΔΔⵠⵠᐃ(ᐃⵠⵠΔ - 230, ᐃⲆᐃᐃ - 230, ⲆⲆⵠΔ + 230, ⲆΔⵠ.ᐃΔⲆⵠ[2], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⵠⵠΔⲆᐃ);
				if (Ⲇⵠⵠᐃ < (ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔΔⵠᐃⲆ) && ᐃⲆᐃᐃ - 235 - ⲆΔⵠΔ <= -ⲆΔⵠ.ⲆⵠΔ.x && -ⲆΔⵠ.ⲆⵠΔ.x <= ⲆⲆⵠΔ + 350 && -ⲆΔⵠ.ⲆⵠΔ.y >= ΔⵠΔⲆ - ΔⲆⲆΔ - 390 && -ⲆΔⵠ.ⲆⵠΔ.y <= ΔⵠΔⲆ + 315) ⵠᐃⲆⲆΔⵠⲆ(ΔⵠΔⲆ + 310, ᐃⲆᐃᐃ - 230, ⲆⲆⵠΔ + 230, ⲆΔⵠ.ᐃΔⲆⵠ[ᐃΔᐃΔ], ⵠⲆΔ.ᐃⵠᐃᐃⲆ[ΔⲆᐃΔ.ᐃᐃⲆ], ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔΔⵠᐃⲆ)
			}
		}
	}

	function ⵠⵠⲆⵠⵠⵠΔ(ⵠᐃⲆΔⵠΔⲆ, ⵠᐃᐃᐃᐃΔⲆ, ⲆⵠⵠᐃᐃⲆⲆ, ᐃᐃⲆⵠⵠΔⵠ, ΔᐃΔΔΔ) {
		const ᐃΔΔᐃⲆⵠⵠ = (22695477 * (ⵠᐃⲆΔⵠΔⲆ + 29881) + 1) % 4294967296;
		const ΔᐃΔΔΔⲆⲆ = 54628 ^ ⵠᐃᐃᐃᐃΔⲆ;
		const ᐃᐃⲆⵠΔⲆⲆ = (ⲆⵠⵠᐃᐃⲆⲆ | 30520) & ~(ⲆⵠⵠᐃᐃⲆⲆ & 30520);
		const ⲆᐃᐃΔΔᐃᐃⲆⲆ = (0 << (ᐃᐃⲆⵠⵠΔⵠ >> 8 & ᐃⵠⵠⵠᐃΔⵠ)) + (16 << (ᐃᐃⲆⵠⵠΔⵠ >> ΔᐃⵠⲆᐃⵠᐃ & 255)) + (24 << (ᐃᐃⲆⵠⵠΔⵠ >> 24 & 255)) + (8 << (ᐃᐃⲆⵠⵠΔⵠ >> 0 & 255));
		const ᐃⵠⲆᐃⲆΔⲆΔᐃ = (8 << (ΔᐃΔΔΔ >> 16 & 255)) + (0 << (ΔᐃΔΔΔ >> 24 & 255)) + (24 << (ΔᐃΔΔΔ >> 8 & 255)) + (16 << (ΔᐃΔΔΔ >> 0 & 255));
		const ΔᐃⵠⲆΔᐃᐃᐃᐃ = ᐃⵠᐃᐃⲆⵠᐃ(ᐃΔΔᐃⲆⵠⵠ, ΔᐃΔΔΔⲆⲆ, ᐃᐃⲆⵠΔⲆⲆ);
		const ᐃⲆΔΔⲆⵠΔᐃⵠ = ᐃⲆⵠΔⲆⵠΔ(ⲆᐃᐃΔΔᐃᐃⲆⲆ, ᐃⵠⲆᐃⲆΔⲆΔᐃ, ᐃΔΔᐃⲆⵠⵠ, ΔᐃΔΔΔⲆⲆ, ᐃᐃⲆⵠΔⲆⲆ);
		const ⲆⵠⵠⲆⵠⵠΔΔΔ = (1664525 * ((ΔᐃⵠⲆΔᐃᐃᐃᐃ ^ ᐃⲆΔΔⲆⵠΔᐃⵠ) + 30684) + 1013904223) % 4294967296;
		return ⲆⵠⵠⲆⵠⵠΔΔΔ
	}

	function ⲆᐃⵠᐃⲆΔⵠᐃⵠ(ΔⲆᐃᐃⵠⲆⲆ, ᐃⲆⲆΔ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ) {
		if (ⵠⲆΔ.transition) {
			Δ.globalAlpha = ᐃⵠᐃᐃ;
			ⵠΔⲆⲆ(Δ, ᐃᐃ[ΔⲆᐃᐃⵠⲆⲆ][ᐃⲆⲆΔ][ⵠⲆΔ.time], Ⲇᐃ, ⲆⲆⲆ);
			ⵠⲆΔ.time = ⵠⲆΔ.time ? 0 : ᐃⵠⵠⵠ;
			Δ.globalAlpha = 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
			ⵠΔⲆⲆ(Δ, ᐃᐃ[ΔⲆᐃᐃⵠⲆⲆ][ᐃⲆⲆΔ][ⵠⲆΔ.time], Ⲇᐃ, ⲆⲆⲆ);
			ⵠⲆΔ.time = ⵠⲆΔ.time ? Ⲇⵠᐃ : ᐃⲆⲆ;
			Δ.globalAlpha = 1
		} else ⵠΔⲆⲆ(Δ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ)
	}

	function ⵠᐃⲆⲆΔⵠⲆ(ⵠᐃᐃⲆⵠ, ⲆΔⲆΔΔ, ᐃⵠΔⲆΔ, ᐃΔⲆⵠ, ΔⲆᐃΔ, ΔⵠⲆΔ) {
		var w1 = ᐃΔⲆⵠ.w1;
		var w2 = ᐃΔⲆⵠ.w2;
		var w3 = ᐃΔⲆⵠ.w3;
		var ΔⵠᐃΔ = ⲆΔⵠ.ⲆⵠΔ.y + ⵠᐃᐃⲆⵠ - 700;
		var ΔΔⵠᐃᐃ = Math.max(ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⲆΔΔ, Δⵠⵠ);
		var ΔᐃⵠⵠⲆ = Math.max(-ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⵠΔ - ᐃⵠΔⲆΔ - ᐃⲆⵠⵠΔ, ᐃⲆΔᐃ);
		var ᐃⵠⲆᐃ = ΔΔⵠᐃᐃ;
		var ⵠⲆⲆⲆⲆ = ⲆΔⵠΔ - ΔΔⵠᐃᐃ - ΔᐃⵠⵠⲆ;
		if (ΔⵠⲆΔ) var ᐃΔΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w1);
		else var ᐃΔΔ = w1.r;
		var Ⲇᐃᐃᐃ = ΔⵠᐃΔ + ᐃΔᐃᐃ.ⲆⲆⵠⲆᐃ;
		var ΔⵠΔΔⲆ = ᐃⵠⲆᐃ,
			ⵠⲆᐃᐃΔ = Ⲇᐃᐃᐃ,
			ᐃⲆⵠⵠⲆ = ᐃΔΔ.x + ᐃΔᐃᐃ.ΔΔⲆΔᐃ,
			ΔΔⲆⵠⲆ = ⵠⲆⲆⲆⲆ;
		Ⲇᐃᐃᐃ += ᐃΔΔ.x + ᐃΔᐃᐃ.ΔΔⲆΔᐃ - 2;
		var ᐃᐃᐃᐃⲆ = Ⲇᐃᐃᐃ;
		if (ΔⵠⲆΔ) var ᐃΔΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w2);
		else var ᐃΔΔ = w2.r;
		var d2 = ΔⵠᐃΔ + ᐃΔᐃᐃ.ΔⲆΔⲆΔ - Ⲇᐃᐃᐃ + ᐃΔΔ.x;
		var ⲆΔⲆⵠᐃ = Ⲇᐃᐃᐃ,
			ΔⲆⵠⲆᐃ = ᐃⵠⲆᐃ,
			ⲆⲆΔᐃⵠ = d2,
			ᐃΔᐃⵠΔ = ⵠⲆⲆⲆⲆ;
		Ⲇᐃᐃᐃ += d2 - ⵠⲆᐃⵠ;
		var ᐃᐃⲆⲆᐃ = Ⲇᐃᐃᐃ - Ⲇᐃⵠⵠ;
		if (ΔⵠⲆΔ) var ᐃΔΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w3);
		else var ᐃΔΔ = w3.r;
		d2 = ΔⵠᐃΔ + ᐃΔᐃᐃ.ᐃᐃⵠⲆⲆ - Ⲇᐃᐃᐃ + ᐃΔΔ.x;
		if (ᐃᐃⲆⲆᐃ < Ⲇᐃᐃᐃ + d2 - Ⲇⵠᐃᐃ) {
			var ΔⲆᐃΔⵠ = true;
			var ⵠΔⲆΔⵠ = Ⲇᐃᐃᐃ,
				ᐃⲆⵠΔΔ = ᐃⵠⲆᐃ,
				ᐃⵠᐃⲆΔ = d2,
				ⲆⵠΔⲆⲆ = ⵠⲆⲆⲆⲆ;
			Ⲇᐃᐃᐃ += d2 - 2;
			var ⲆⵠΔⵠᐃ = Ⲇᐃᐃᐃ
		} else {
			var ΔⲆᐃΔⵠ = false;
			Ⲇᐃᐃᐃ = ᐃᐃⲆⲆᐃ;
			var ⲆⵠΔⵠᐃ = -ⵠⲆⵠⲆ
		}
		d2 = ΔⵠᐃΔ + ᐃΔᐃᐃ.ᐃⲆⲆⲆᐃⲆⵠ - Ⲇᐃᐃᐃ;
		if (ⵠⲆΔ.transition) {
			var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
			Δ.fillStyle = ⵠΔⲆⵠⵠ(9, 55, 63, 11, 106, 132, ⵠⲆΔⲆ)
		} else Δ.fillStyle = ⵠ.ΔᐃⲆⲆⵠ[ⵠⲆΔ.time];
		Δ.fillRect(ΔⵠΔΔⲆ, ⵠⲆᐃᐃΔ, ΔΔⲆⵠⲆ, ᐃⲆⵠⵠⲆ);
		if (ΔⵠⲆΔ) {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ᐃⲆⲆ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(15, 70, 76, 42, 139, 155, ⵠⲆΔⲆ)
			} else Δ.fillStyle = ⵠ.ΔⲆⵠΔᐃⲆΔ[ⵠⲆΔ.time]
		} else {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ⲆⲆᐃⵠ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(9, 55, 63, 11, 106, 132, ⵠⲆΔⲆ)
			} else Δ.fillStyle = ⵠ.ΔᐃⲆⲆⵠ[ⵠⲆΔ.time]
		}
		Δ.fillRect(ΔⲆⵠⲆᐃ, ⲆΔⲆⵠᐃ, ᐃΔᐃⵠΔ, ⲆⲆΔᐃⵠ);
		if (ΔⲆᐃΔⵠ) {
			if (ΔⵠⲆΔ) {
				if (ⵠⲆΔ.transition) {
					var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
					Δ.fillStyle = ⵠΔⲆⵠⵠ(17, 94, 96, 169, 214, 211, ⵠⲆΔⲆ)
				} else Δ.fillStyle = ⵠ.ΔⲆΔᐃⲆⵠᐃ[ⵠⲆΔ.time]
			} else {
				if (ⵠⲆΔ.transition) {
					var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ΔΔⵠ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
					Δ.fillStyle = ⵠΔⲆⵠⵠ(9, 55, 63, 11, 106, 132, ⵠⲆΔⲆ)
				} else Δ.fillStyle = ⵠ.ΔᐃⲆⲆⵠ[ⵠⲆΔ.time]
			}
			Δ.fillRect(ᐃⲆⵠΔΔ, ⵠΔⲆΔⵠ, ⲆⵠΔⲆⲆ, ᐃⵠᐃⲆΔ)
		}
		ⲆΔⲆⵠ.ΔⵠⵠΔΔ && ΔⵠⲆΔ && ᐃΔⲆⵠ.ⲆΔᐃⲆⲆⲆᐃⵠⵠ(ᐃᐃⲆⲆᐃ, ⲆⵠΔⵠᐃ, ᐃᐃᐃᐃⲆ, ΔⵠᐃΔ, -ⲆΔⵠ.ⲆⵠΔ.x + ΔⵠΔΔⲆ, -ⲆΔⵠ.ⲆⵠΔ.x + ΔⵠΔΔⲆ + ΔΔⲆⵠⲆ)
	}

	function ⵠΔᐃᐃΔⵠⵠ(ⲆΔⲆΔΔ, ⵠᐃᐃⲆⵠ, ᐃΔΔⵠᐃΔⲆ, ᐃΔⲆⵠ, ΔⲆᐃΔ, ΔⵠⲆΔ) {
		var w1 = ᐃΔⲆⵠ.w1;
		var w2 = ᐃΔⲆⵠ.w2;
		var w3 = ᐃΔⲆⵠ.w3;
		var ᐃⵠⲆᐃ = ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⲆΔΔ + 820;
		var ⲆΔᐃⲆᐃ = Math.max(ⲆΔⵠ.ⲆⵠΔ.y + ⵠᐃᐃⲆⵠ, 0);
		var ᐃᐃΔᐃⲆ = Math.max(-ⲆΔⵠ.ⲆⵠΔ.y + ΔⲆⲆΔ - ᐃΔΔⵠᐃΔⲆ - ⵠᐃⵠⲆᐃᐃΔ, 0);
		var ΔⵠᐃΔ = ⲆΔᐃⲆᐃ;
		var ᐃᐃᐃΔΔ = ΔⲆⲆΔ - ⲆΔᐃⲆᐃ - ᐃᐃΔᐃⲆ;
		if (ΔⵠⲆΔ) var ᐃΔΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w1);
		else var ᐃΔΔ = w1.r;
		var Ⲇᐃᐃᐃ = ᐃⵠⲆᐃ + ᐃΔᐃᐃ.ⲆⲆⵠⲆᐃ;
		var ΔⵠΔΔⲆ = Ⲇᐃᐃᐃ,
			ⵠⲆᐃᐃΔ = ΔⵠᐃΔ,
			ΔΔⲆⵠⲆ = -ᐃΔΔ.x + ᐃΔᐃᐃ.ΔΔⲆΔᐃ,
			ᐃⲆⵠⵠⲆ = ᐃᐃᐃΔΔ;
		Ⲇᐃᐃᐃ += -ᐃΔΔ.x + ᐃΔᐃᐃ.ΔΔⲆΔᐃ + 2;
		var ᐃᐃᐃᐃⲆ = Ⲇᐃᐃᐃ;
		if (ΔⵠⲆΔ) var ᐃΔΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w2);
		else var ᐃΔΔ = w2.r;
		var d2 = ᐃⵠⲆᐃ - ᐃΔᐃᐃ.ΔⲆΔⲆΔ - Ⲇᐃᐃᐃ - ᐃΔΔ.x;
		var ΔⲆⵠⲆᐃ = Ⲇᐃᐃᐃ,
			ⲆΔⲆⵠᐃ = ΔⵠᐃΔ,
			ᐃΔᐃⵠΔ = d2,
			ⲆⲆΔᐃⵠ = ᐃᐃᐃΔΔ;
		Ⲇᐃᐃᐃ += d2 + 2;
		var ᐃᐃⲆⲆᐃ = Ⲇᐃᐃᐃ - ⲆΔⲆΔ;
		if (ΔⵠⲆΔ) var ᐃΔΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w3);
		else var ᐃΔΔ = w3.r;
		d2 = ᐃⵠⲆᐃ - ᐃΔᐃᐃ.ᐃᐃⵠⲆⲆ - Ⲇᐃᐃᐃ - ᐃΔΔ.x;
		if (ᐃᐃⲆⲆᐃ > Ⲇᐃᐃᐃ + d2) {
			var ΔⲆᐃΔⵠ = ⵠᐃⵠⲆᐃ;
			var ᐃⲆⵠΔΔ = Ⲇᐃᐃᐃ,
				ⵠΔⲆΔⵠ = ΔⵠᐃΔ,
				ⲆⵠΔⲆⲆ = d2,
				ᐃⵠᐃⲆΔ = ᐃᐃᐃΔΔ;
			Ⲇᐃᐃᐃ += d2 + 2;
			var ⲆⵠΔⵠᐃ = Ⲇᐃᐃᐃ
		} else {
			var ΔⲆᐃΔⵠ = false;
			Ⲇᐃᐃᐃ = ᐃᐃⲆⲆᐃ;
			var ⲆⵠΔⵠᐃ = -ⵠⲆⵠⲆ
		}
		d2 = ᐃⵠⲆᐃ - ᐃΔᐃᐃ.ᐃⲆⲆⲆᐃⲆⵠ - Ⲇᐃᐃᐃ;
		if (ⵠⲆΔ.transition) {
			var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
			Δ.fillStyle = ⵠΔⲆⵠⵠ(9, 55, 63, 11, 106, 132, ⵠⲆΔⲆ)
		} else Δ.fillStyle = ⵠ.ΔᐃⲆⲆⵠ[ⵠⲆΔ.time];
		Δ.fillRect(ΔⵠΔΔⲆ, ⵠⲆᐃᐃΔ, ΔΔⲆⵠⲆ, ᐃⲆⵠⵠⲆ);
		if (ΔⵠⲆΔ) {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ⵠᐃᐃ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(15, 70, 76, 42, 139, 155, ⵠⲆΔⲆ)
			} else Δ.fillStyle = ⵠ.ΔⲆⵠΔᐃⲆΔ[ⵠⲆΔ.time]
		} else {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(9, 55, 63, 11, 106, 132, ⵠⲆΔⲆ)
			} else Δ.fillStyle = ⵠ.ΔᐃⲆⲆⵠ[ⵠⲆΔ.time]
		}
		Δ.fillRect(ΔⲆⵠⲆᐃ, ⲆΔⲆⵠᐃ, ᐃΔᐃⵠΔ, ⲆⲆΔᐃⵠ);
		if (ΔⲆᐃΔⵠ) {
			if (ΔⵠⲆΔ) {
				if (ⵠⲆΔ.transition) {
					var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ᐃΔⲆΔ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
					Δ.fillStyle = ⵠΔⲆⵠⵠ(17, 94, 96, 169, 214, 211, ⵠⲆΔⲆ)
				} else Δ.fillStyle = ⵠ.ΔⲆΔᐃⲆⵠᐃ[ⵠⲆΔ.time]
			} else {
				if (ⵠⲆΔ.transition) {
					var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ⲆⵠΔΔ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
					Δ.fillStyle = ⵠΔⲆⵠⵠ(9, 55, 63, 11, 106, 132, ⵠⲆΔⲆ)
				} else Δ.fillStyle = ⵠ.ΔᐃⲆⲆⵠ[ⵠⲆΔ.time]
			}
			Δ.fillRect(ᐃⲆⵠΔΔ, ⵠΔⲆΔⵠ, ⲆⵠΔⲆⲆ, ᐃⵠᐃⲆΔ)
		}
		if (ⲆΔⲆⵠ.ΔⵠⵠΔΔ && ΔⵠⲆΔ) ᐃΔⲆⵠ.ᐃⵠᐃⵠⵠⵠΔⲆⵠ(ᐃᐃⲆⲆᐃ, ⲆⵠΔⵠᐃ, ᐃᐃᐃᐃⲆ, ᐃⵠⲆᐃ, -ⲆΔⵠ.ⲆⵠΔ.y + ⵠⲆᐃᐃΔ, -ⲆΔⵠ.ⲆⵠΔ.y + ⵠⲆᐃᐃΔ + ᐃⲆⵠⵠⲆ)
	}

	function ΔΔᐃΔΔ(ΔⲆᐃᐃⵠⲆⲆ, ᐃⲆⲆΔ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ) {
		var ᐃΔΔ = ⵠⵠ.width;
		var ΔⵠⲆ = ⵠⵠ.height;
		var w2 = Math.floor(ᐃΔΔ / ᐃᐃⲆⵠ);
		var ΔⲆΔⵠⵠ = Math.floor(ΔⵠⲆ / 2);
		if (ⵠⲆΔ.transition) {
			Δ.globalAlpha = ⲆⲆⵠ;
			ⵠΔⲆⲆ(Δ, ᐃᐃ[ΔⲆᐃᐃⵠⲆⲆ][ᐃⲆⲆΔ][ⵠⲆΔ.time], ᐃⲆΔ, 0, ᐃΔΔ, ΔⵠⲆ, Ⲇᐃ, ⲆⲆⲆ, w2, ΔⲆΔⵠⵠ);
			ⵠⲆΔ.time = ⵠⲆΔ.time ? 0 : 1;
			Δ.globalAlpha = 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
			ⵠΔⲆⲆ(Δ, ᐃᐃ[ΔⲆᐃᐃⵠⲆⲆ][ᐃⲆⲆΔ][ⵠⲆΔ.time], 0, ⵠΔⵠᐃ, ᐃΔΔ, ΔⵠⲆ, Ⲇᐃ, ⲆⲆⲆ, w2, ΔⲆΔⵠⵠ);
			ⵠⲆΔ.time = ⵠⲆΔ.time ? ⵠⵠⲆΔ : 1;
			Δ.globalAlpha = ⲆⲆⲆᐃ
		} else ⵠΔⲆⲆ(Δ, ᐃᐃ[ΔⲆᐃᐃⵠⲆⲆ][ᐃⲆⲆΔ][ⵠⲆΔ.time], 0, 0, ᐃΔΔ, ΔⵠⲆ, Ⲇᐃ, ⲆⲆⲆ, w2, ΔⲆΔⵠⵠ)
	}

	function ⵠΔⵠᐃⵠⵠⲆ(ⲆΔⲆΔΔ, ⵠᐃᐃⲆⵠ, ᐃΔΔⵠᐃΔⲆ, ᐃΔⲆⵠ, ΔⲆᐃΔ, ΔⵠⲆΔ) {
		var w1 = ᐃΔⲆⵠ.w1;
		var w2 = ᐃΔⲆⵠ.w2;
		var w3 = ᐃΔⲆⵠ.w3;
		var ᐃⵠⲆᐃ = ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⲆΔΔ + 820;
		var ⲆΔᐃⲆᐃ = Math.max(ⲆΔⵠ.ⲆⵠΔ.y + ⵠᐃᐃⲆⵠ, ⵠⵠᐃ);
		var ᐃᐃΔᐃⲆ = Math.max(-ⲆΔⵠ.ⲆⵠΔ.y + ΔⲆⲆΔ - ᐃΔΔⵠᐃΔⲆ - ᐃⵠⵠΔⲆ, 0);
		var ΔⵠᐃΔ = ⲆΔᐃⲆᐃ;
		var ᐃᐃᐃΔΔ = ΔⲆⲆΔ - ⲆΔᐃⲆᐃ - ᐃᐃΔᐃⲆ;
		if (ΔⵠⲆΔ) var ⵠᐃΔⵠΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w1).x;
		else var ⵠᐃΔⵠΔ = w1.r.x;
		var Ⲇᐃᐃᐃ = ᐃⵠⲆᐃ + ᐃΔᐃᐃ.ⲆⲆⵠⲆᐃ;
		var ΔⵠΔΔⲆ = Ⲇᐃᐃᐃ,
			ⵠⲆᐃᐃΔ = ΔⵠᐃΔ,
			ΔΔⲆⵠⲆ = -ⵠᐃΔⵠΔ + ᐃΔᐃᐃ.ΔΔⲆΔᐃ,
			ᐃⲆⵠⵠⲆ = ᐃᐃᐃΔΔ;
		Ⲇᐃᐃᐃ += -ⵠᐃΔⵠΔ + ᐃΔᐃᐃ.ΔΔⲆΔᐃ + 2;
		var ᐃᐃᐃᐃⲆ = Ⲇᐃᐃᐃ;
		if (ΔⵠⲆΔ) var ⵠᐃΔⵠΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w2).x;
		else var ⵠᐃΔⵠΔ = w2.r.x;
		var d2 = ᐃⵠⲆᐃ - ᐃΔᐃᐃ.ΔⲆΔⲆΔ - Ⲇᐃᐃᐃ - ⵠᐃΔⵠΔ;
		var ΔⲆⵠⲆᐃ = Ⲇᐃᐃᐃ,
			ⲆΔⲆⵠᐃ = ΔⵠᐃΔ,
			ᐃΔᐃⵠΔ = d2,
			ⲆⲆΔᐃⵠ = ᐃᐃᐃΔΔ;
		Ⲇᐃᐃᐃ += d2 + 2;
		var ᐃᐃⲆⲆᐃ = Ⲇᐃᐃᐃ - 2;
		if (ΔⵠⲆΔ) var ⵠᐃΔⵠΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w3).x;
		else var ⵠᐃΔⵠΔ = w3.r.x;
		d2 = ᐃⵠⲆᐃ - ᐃΔᐃᐃ.ᐃᐃⵠⲆⲆ - Ⲇᐃᐃᐃ - ⵠᐃΔⵠΔ;
		if (Ⲇᐃᐃᐃ + d2 < ᐃᐃⲆⲆᐃ) {
			var ΔⲆᐃΔⵠ = true;
			var ᐃⲆⵠΔΔ = Ⲇᐃᐃᐃ,
				ⵠΔⲆΔⵠ = ΔⵠᐃΔ,
				ⲆⵠΔⲆⲆ = d2,
				ᐃⵠᐃⲆΔ = ᐃᐃᐃΔΔ;
			Ⲇᐃᐃᐃ += d2 + 2;
			var ⲆⵠΔⵠᐃ = Ⲇᐃᐃᐃ
		} else {
			var ΔⲆᐃΔⵠ = ᐃΔⲆΔᐃ;
			Ⲇᐃᐃᐃ = ᐃᐃⲆⲆᐃ;
			var ⲆⵠΔⵠᐃ = -1
		}
		d2 = ᐃⵠⲆᐃ - ᐃΔᐃᐃ.ᐃⲆⲆⲆᐃⲆⵠ - Ⲇᐃᐃᐃ;
		if (ΔⵠⲆΔ > 0 && 1 === ΔⲆᐃΔ.ⵠΔᐃⵠᐃΔᐃ) {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ⲆⲆᐃⵠ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(15, 77, 72, 252, 239, 187, ⵠⲆΔⲆ)
			} else Δ.fillStyle = ⵠ.ⲆᐃⵠⵠⵠΔⲆ[ⵠⲆΔ.time];
			Δ.fillRect(Ⲇᐃᐃᐃ, ΔⵠᐃΔ, d2, ᐃᐃᐃΔΔ)
		} else {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(ΔⲆᐃΔ.Δᐃᐃ[ᐃⲆΔᐃ], ΔⲆᐃΔ.Δᐃᐃ[1], ΔⲆᐃΔ.Δᐃᐃ[2], ΔⲆᐃΔ.ⵠΔⵠ[0], ΔⲆᐃΔ.ⵠΔⵠ[1], ΔⲆᐃΔ.ⵠΔⵠ[2], ⵠⲆΔⲆ)
			} else Δ.fillStyle = ΔⲆᐃΔ.ⵠⲆⵠⵠⲆ[ⵠⲆΔ.time];
			Δ.fillRect(Ⲇᐃᐃᐃ, ΔⵠᐃΔ, d2, ᐃᐃᐃΔΔ)
		}
	}

	function ΔΔΔΔᐃΔⵠΔΔ() {
		Δ.globalAlpha = ⲆⲆΔⵠ;
		if (ⵠⲆΔ.transition) var ᐃᐃⵠⲆᐃ = ⵠⲆΔ.ⵠⲆΔⲆ.ΔⵠΔ();
		ⵠⲆΔ.ⲆᐃⲆΔⲆᐃΔⲆⲆ(-ⲆΔⵠ.ⲆⵠΔ.x, -ⲆΔⵠ.ⲆⵠΔ.y);
		ⵠⵠᐃⲆΔⵠᐃ = Math.max(Math.floor(-ⲆΔⵠ.ⲆⵠΔ.x / ⵠⲆΔ.ΔᐃᐃᐃΔⲆⲆ) - ΔⲆⵠⵠ, Δⵠⵠ);
		ᐃᐃᐃᐃΔⲆΔ = Math.min(Math.floor((-ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⵠ.ⲆⵠΔ.w) / ⵠⲆΔ.ΔᐃᐃᐃΔⲆⲆ) + ΔᐃᐃΔ, ⵠⲆΔ.ᐃᐃΔⵠᐃ - 1);
		ᐃᐃΔΔΔΔΔ = Math.max(Math.floor(-ⲆΔⵠ.ⲆⵠΔ.y / ⵠⲆΔ.ⲆⲆΔᐃᐃᐃⵠ) - Ⲇⵠᐃᐃ, ᐃⲆΔ);
		ᐃᐃᐃⲆᐃⵠᐃ = Math.min(Math.floor((-ⲆΔⵠ.ⲆⵠΔ.y + ⲆΔⵠ.ⲆⵠΔ.ΔⵠⲆ) / ⵠⲆΔ.ⲆⲆΔᐃᐃᐃⵠ) + 3, ⵠⲆΔ.ΔΔΔⲆⲆ - ⲆⲆΔⵠ);
		ᐃᐃⲆⲆΔⵠᐃ();
		ⵠᐃⵠⲆᐃⲆⲆⵠⲆ();
		if (ⲆΔⲆⵠ.ΔⵠⵠΔΔ && ⵠⲆΔ.mode !== ᐃΔᐃᐃ.ᐃΔΔΔᐃ && ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ !== ⵠⲆΔ.mode && ⵠⲆΔ.mode !== ᐃΔᐃᐃ.ᐃⲆΔⲆⵠΔᐃ) {
			ⲆᐃΔⲆᐃⲆⵠⵠΔ();
			ΔΔⲆⵠⵠᐃⵠⲆΔ();
			ᐃᐃⲆⵠⲆΔⲆᐃⲆ()
		}
		if (ⵠⲆΔ.transition) {
			if (ᐃᐃⵠⲆᐃ) {
				ⵠⲆΔ.transition = ᐃΔⵠΔᐃ;
				ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ = Ⲇⵠⵠᐃ;
				ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔⲆ = false
			}
		}
	}

	function ⲆⲆΔⲆΔ(ⲆⲆⲆᐃᐃ, ⵠΔⵠⲆᐃ, ᐃⵠⲆΔΔ, ᐃⵠᐃΔⲆΔΔ, ᐃᐃᐃΔⲆΔⵠ, ΔⲆⲆΔᐃΔᐃ, ⲆⵠΔⲆΔⲆΔ, ⵠΔᐃⲆᐃⲆΔ, ᐃⵠⵠⵠΔΔΔ, Ⲇᐃⵠⵠⵠⵠᐃ) {
		if (ⵠⲆΔ.transition) {
			Δ.globalAlpha = 1;
			ⲆⲆⲆᐃᐃ(ⵠΔⵠⲆᐃ, ᐃⵠⲆΔΔ, ᐃⵠᐃΔⲆΔΔ, ᐃᐃᐃΔⲆΔⵠ, ΔⲆⲆΔᐃΔᐃ, ⲆⵠΔⲆΔⲆΔ, ⵠΔᐃⲆᐃⲆΔ, ᐃⵠⵠⵠΔΔΔ, Ⲇᐃⵠⵠⵠⵠᐃ);
			ⵠⲆΔ.time = ⵠⲆΔ.time ? 0 : ⲆⵠⲆ;
			Δ.globalAlpha = ⲆⲆⵠ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
			ⲆⲆⲆᐃᐃ(ⵠΔⵠⲆᐃ, ᐃⵠⲆΔΔ, ᐃⵠᐃΔⲆΔΔ, ᐃᐃᐃΔⲆΔⵠ, ΔⲆⲆΔᐃΔᐃ, ⲆⵠΔⲆΔⲆΔ, ⵠΔᐃⲆᐃⲆΔ, ᐃⵠⵠⵠΔΔΔ, Ⲇᐃⵠⵠⵠⵠᐃ);
			ⵠⲆΔ.time = ⵠⲆΔ.time ? ᐃⲆΔ : 1;
			Δ.globalAlpha = 1
		} else ⲆⲆⲆᐃᐃ(ⵠΔⵠⲆᐃ, ᐃⵠⲆΔΔ, ᐃⵠᐃΔⲆΔΔ, ᐃᐃᐃΔⲆΔⵠ, ΔⲆⲆΔᐃΔᐃ, ⲆⵠΔⲆΔⲆΔ, ⵠΔᐃⲆᐃⲆΔ, ᐃⵠⵠⵠΔΔΔ, Ⲇᐃⵠⵠⵠⵠᐃ)
	}

	function ᐃⲆⵠⲆ(ⵠΔⲆ, ⵠΔⵠⲆᐃ, ᐃⵠⲆΔΔ) {
		if (ⵠⲆΔ.transition) {
			Δ.globalAlpha = ΔᐃⵠⲆ;
			ⵠΔⲆ.ᐃⵠΔᐃ(ⵠΔⵠⲆᐃ, ᐃⵠⲆΔΔ);
			ⵠⲆΔ.time = ⵠⲆΔ.time ? ᐃⲆᐃ : 1;
			Δ.globalAlpha = 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
			ⵠΔⲆ.ᐃⵠΔᐃ(ⵠΔⵠⲆᐃ, ᐃⵠⲆΔΔ);
			ⵠⲆΔ.time = ⵠⲆΔ.time ? 0 : ⲆⲆⲆᐃ;
			Δ.globalAlpha = ⵠⲆⵠⲆ
		} else ⵠΔⲆ.ᐃⵠΔᐃ(ⵠΔⵠⲆᐃ, ᐃⵠⲆΔΔ)
	}

	function ⵠᐃΔᐃⲆⲆⲆΔᐃ() {
		if (ⵠⲆΔ.transition) {
			var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
			Δ.fillStyle = ⵠΔⲆⵠⵠ(ᐃᐃΔⵠⲆ, 43, 48, 19, 58, 43, ⵠⲆΔⲆ)
		} else Δ.fillStyle = ⵠ.ⲆⵠᐃᐃΔ[ⵠⲆΔ.time];
		Δ.fillRect(0, 0, ⲆΔⵠΔ, ΔⲆⲆΔ)
	}

	function ⲆⲆⵠⵠⵠΔⲆⲆᐃ(ⲆΔΔ) {
		Δ.save();
		Δ.translate(ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔΔ.x, ⲆΔⵠ.ⲆⵠΔ.y + ⲆΔΔ.y);
		Δ.rotate(ⲆΔΔ.angle);
		Δ.globalAlpha = ⲆΔΔ.alpha;
		var ⵠⵠ = ᐃᐃ[ⲆΔΔ.id][ⵠⲆΔ.time];
		ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ᐃⲆⵠᐃ, -ⵠⵠ.height / 2);
		Δ.globalAlpha = 1;
		Δ.restore()
	}

	function ΔᐃⲆⲆᐃᐃᐃ(ⵠΔⲆ, ⵠᐃΔΔ) {
		ⵠⲆΔ.transition ? (Δ.globalAlpha = ΔΔΔᐃ, ⵠΔⲆ.ΔΔⵠⵠᐃ(ⵠᐃΔΔ), ⵠⲆΔ.time = ⵠⲆΔ.time ? ⵠΔΔⲆ : 1, Δ.globalAlpha = ΔᐃⵠⲆ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ, ⵠΔⲆ.ΔΔⵠⵠᐃ(ⵠᐃΔΔ), ⵠⲆΔ.time = ⵠⲆΔ.time ? 0 : 1, Δ.globalAlpha = ⲆⵠⲆ) : ⵠΔⲆ.ΔΔⵠⵠᐃ(ⵠᐃΔΔ)
	}

	function ⲆΔⵠᐃⲆⲆᐃⲆⵠ(ΔⵠⵠⲆ) {
		Δ.globalAlpha = ΔⵠⵠⲆ.alpha;
		ⵠΔᐃ(Δ, ΔⵠⵠⲆ.x + ⲆΔⵠ.ⲆⵠΔ.x, ΔⵠⵠⲆ.y + ⲆΔⵠ.ⲆⵠΔ.y, ΔⵠⵠⲆ.r);
		ⵠᐃ(Δ, ⵠ.ΔᐃⲆΔⵠΔⵠ[ⵠⲆΔ.time]);
		Δ.globalAlpha = 1
	}

	function ᐃⵠᐃᐃΔᐃⲆ(ΔΔ, ᐃⲆ, Ⲇᐃ, ⲆⲆⲆ, ⵠⵠΔᐃ) {
		if (ⵠⲆΔ.transition && 1 == ⵠⵠΔᐃ) {
			Δ.globalAlpha = ᐃⵠᐃᐃ;
			ⵠΔⲆⲆ(Δ, ᐃᐃ[ΔΔ][ⵠⲆΔ.time][ᐃⲆ], Ⲇᐃ, ⲆⲆⲆ);
			ⵠⲆΔ.time = ⵠⲆΔ.time ? ⲆⲆᐃⲆ : ⲆⲆᐃⵠ;
			Δ.globalAlpha = 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
			ⵠΔⲆⲆ(Δ, ᐃᐃ[ΔΔ][ⵠⲆΔ.time][ᐃⲆ], Ⲇᐃ, ⲆⲆⲆ);
			ⵠⲆΔ.time = ⵠⲆΔ.time ? 0 : 1;
			Δ.globalAlpha = 1
		} else {
			Δ.globalAlpha = ⵠⵠΔᐃ;
			ⵠΔⲆⲆ(Δ, ᐃᐃ[ΔΔ][ⵠⲆΔ.time][ᐃⲆ], Ⲇᐃ, ⲆⲆⲆ);
			Δ.globalAlpha = ΔΔΔᐃ
		}
	}

	function ⵠΔᐃⵠⲆⲆⲆ(ⵠΔⲆ, ⵠᐃΔΔ) {
		ⵠⲆΔ.transition ? (Δ.globalAlpha = ⲆⵠΔΔ, ⵠΔⲆ.ⲆΔΔΔⵠ(ⵠᐃΔΔ), ⵠⲆΔ.time = ⵠⲆΔ.time ? 0 : 1, Δ.globalAlpha = ⲆⵠⲆ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ, ⵠΔⲆ.ⲆΔΔΔⵠ(ⵠᐃΔΔ), ⵠⲆΔ.time = ⵠⲆΔ.time ? ⲆᐃΔⵠ : 1, Δ.globalAlpha = ᐃⵠᐃᐃ) : ⵠΔⲆ.ⲆΔΔΔⵠ(ⵠᐃΔΔ)
	}

	function ΔΔⲆⵠⵠᐃⵠⲆΔ() {
		var ⵠΔⲆⲆⵠ = ⲆΔⵠ.ⵠΔⲆⲆⵠ;
		ⵠΔⲆⲆⵠ.ᐃᐃⵠΔᐃ === ⵠⵠⵠ ? ⵠΔⲆⲆⵠ.ΔΔⲆᐃΔ = Math.max(0, ⵠΔⲆⲆⵠ.ΔΔⲆᐃΔ - ᐃⵠᐃⵠ / ⲆΔⲆᐃⵠ) : ⵠΔⲆⲆⵠ.ΔΔⲆᐃΔ = Math.min(1, ⵠΔⲆⲆⵠ.ΔΔⲆᐃΔ + ᐃⵠᐃⵠ / 10);
		var ⲆᐃᐃⵠⲆ = ⵠΔⲆⲆⵠ.ⲆᐃᐃⵠⲆ;
		for (var ᐃⲆ = 0; ⲆᐃᐃⵠⲆ.length > ᐃⲆ; ᐃⲆ++) {
			var ⲆΔΔ = ⲆᐃᐃⵠⲆ[ᐃⲆ];
			ⵠΔⲆⲆⵠ.ΔⵠΔ(ⲆΔΔ);
			ᐃⵠᐃᐃΔᐃⲆ(ⵠ.ⵠΔΔⲆⲆⲆⵠ, ⲆΔΔ.id, ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔΔ.x, ⲆΔⵠ.ⲆⵠΔ.y + ⲆΔΔ.y, ⲆΔΔ.alpha)
		}
		for (var ᐃⲆ = 0; ⲆᐃᐃⵠⲆ.length > ᐃⲆ; ᐃⲆ++) {
			var ⲆΔΔ = ⲆᐃᐃⵠⲆ[ᐃⲆ];
			(ⲆΔΔ.ⲆⲆᐃᐃΔ <= ⵠⵠᐃ || ⲆΔΔ.x > -ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⵠΔ || -ⲆΔⵠ.ⲆⵠΔ.x > ⲆΔΔ.x || ⲆΔΔ.y > -ⲆΔⵠ.ⲆⵠΔ.y + ΔⲆⲆΔ) && ⲆᐃᐃⵠⲆ.splice(ᐃⲆ, ᐃΔⵠΔ)
		}
		var ΔⵠΔΔ = -ⲆΔⵠ.ⲆⵠΔ.y;
		if (-1e3 < ⵠⲆΔ.ΔΔⵠⵠⵠ) ⵠΔⲆⲆⵠ.add(ΔⵠΔΔ)
	}

	function ΔⵠᐃⲆᐃ(ΔΔ, ⵠⵠ, Ⲇᐃ, ⲆⲆⲆ) {
		var ᐃΔΔ = ⵠⵠ.width;
		var ΔⵠⲆ = ⵠⵠ.height;
		var w2 = Math.floor(ᐃΔΔ / 2);
		var ΔⲆΔⵠⵠ = Math.floor(ΔⵠⲆ / ⵠΔⵠⲆ);
		if (ⵠⲆΔ.transition) {
			Δ.globalAlpha = ᐃΔΔⲆ;
			ⵠΔⲆⲆ(Δ, ᐃᐃ[ΔΔ][ⵠⲆΔ.time], 0, ⵠᐃⲆⵠ, ᐃΔΔ, ΔⵠⲆ, Ⲇᐃ, ⲆⲆⲆ, w2, ΔⲆΔⵠⵠ);
			ⵠⲆΔ.time = ⵠⲆΔ.time ? ⵠᐃⵠ : ⵠⵠⵠⲆ;
			Δ.globalAlpha = 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
			ⵠΔⲆⲆ(Δ, ᐃᐃ[ΔΔ][ⵠⲆΔ.time], 0, ⵠΔⵠᐃ, ᐃΔΔ, ΔⵠⲆ, Ⲇᐃ, ⲆⲆⲆ, w2, ΔⲆΔⵠⵠ);
			ⵠⲆΔ.time = ⵠⲆΔ.time ? 0 : 1;
			Δ.globalAlpha = ᐃΔⵠΔ
		} else ⵠΔⲆⲆ(Δ, ⵠⵠ, 0, 0, ᐃΔΔ, ΔⵠⲆ, Ⲇᐃ, ⲆⲆⲆ, w2, ΔⲆΔⵠⵠ)
	}

	function ᐃᐃⲆⵠⲆΔⲆᐃⲆ() {
		var ⲆⲆⲆⲆΔⵠᐃ = ⲆΔⵠ.ⲆⲆⲆⲆΔⵠᐃ;
		var ⲆᐃᐃⵠⲆ = ⲆⲆⲆⲆΔⵠᐃ.ⲆᐃᐃⵠⲆ;
		for (var ᐃⲆ = ⵠΔΔⲆ; ᐃⲆ < ⲆᐃᐃⵠⲆ.length; ᐃⲆ++) {
			var ⲆΔΔ = ⲆᐃᐃⵠⲆ[ᐃⲆ];
			ⲆⲆⲆⲆΔⵠᐃ.ΔⵠΔ(ⲆΔΔ);
			ᐃⵠᐃᐃΔᐃⲆ(ⵠ.ΔᐃⲆⲆΔᐃᐃ, ⲆΔΔ.id, ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔΔ.x, ⲆΔⵠ.ⲆⵠΔ.y + ⲆΔΔ.y, ⲆΔΔ.alpha)
		}
		for (var ᐃⲆ = 0; ⲆᐃᐃⵠⲆ.length > ᐃⲆ; ᐃⲆ++) {
			var ⲆΔΔ = ⲆᐃᐃⵠⲆ[ᐃⲆ];
			if (0 >= ⲆΔΔ.ⲆⲆᐃᐃΔ || -ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⵠΔ < ⲆΔΔ.x || ⲆΔΔ.x < -ⲆΔⵠ.ⲆⵠΔ.x || -ⲆΔⵠ.ⲆⵠΔ.y + ΔⲆⲆΔ < ⲆΔΔ.y) ⲆᐃᐃⵠⲆ.splice(ᐃⲆ, ⵠⲆⵠⲆ)
		}
		var ΔⵠΔΔ = -ⲆΔⵠ.ⲆⵠΔ.y;
		ⵠⲆΔ.ⵠΔᐃⲆⵠ > -1e3 && ⲆⲆⲆⲆΔⵠᐃ.add(ΔⵠΔΔ)
	}

	function ΔᐃΔΔⵠⵠᐃ(ⵠᐃᐃⲆⵠ, ⲆΔⲆΔΔ, ᐃⵠΔⲆΔ, ᐃΔⲆⵠ, ΔⲆᐃΔ, ΔⵠⲆΔ) {
		var w1 = ᐃΔⲆⵠ.w1;
		var w2 = ᐃΔⲆⵠ.w2;
		var w3 = ᐃΔⲆⵠ.w3;
		var ΔⵠᐃΔ = ⲆΔⵠ.ⲆⵠΔ.y + ⵠᐃᐃⲆⵠ + 710;
		var ΔΔⵠᐃᐃ = Math.max(ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⲆΔΔ, 0);
		var ΔᐃⵠⵠⲆ = Math.max(-ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⵠΔ - ᐃⵠΔⲆΔ - 100, 0);
		var ᐃⵠⲆᐃ = ΔΔⵠᐃᐃ;
		var ⵠⲆⲆⲆⲆ = ⲆΔⵠΔ - ΔΔⵠᐃᐃ - ΔᐃⵠⵠⲆ;
		if (ΔⵠⲆΔ) var ᐃΔΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w1);
		else var ᐃΔΔ = w1.r;
		var Ⲇᐃᐃᐃ = ΔⵠᐃΔ + ᐃΔᐃᐃ.ⲆⲆⵠⲆᐃ;
		var ⵠⲆᐃᐃΔ = Ⲇᐃᐃᐃ,
			ΔⵠΔΔⲆ = ᐃⵠⲆᐃ,
			ᐃⲆⵠⵠⲆ = -ᐃΔΔ.x + ᐃΔᐃᐃ.ΔΔⲆΔᐃ,
			ΔΔⲆⵠⲆ = ⵠⲆⲆⲆⲆ;
		Ⲇᐃᐃᐃ += -ᐃΔΔ.x + ᐃΔᐃᐃ.ΔΔⲆΔᐃ + 2;
		var ᐃᐃᐃᐃⲆ = Ⲇᐃᐃᐃ;
		if (ΔⵠⲆΔ) var ᐃΔΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w2);
		else var ᐃΔΔ = w2.r;
		var d2 = ΔⵠᐃΔ - ᐃΔᐃᐃ.ΔⲆΔⲆΔ - Ⲇᐃᐃᐃ - ᐃΔΔ.x;
		var ⲆΔⲆⵠᐃ = Ⲇᐃᐃᐃ,
			ΔⲆⵠⲆᐃ = ᐃⵠⲆᐃ,
			ⲆⲆΔᐃⵠ = d2,
			ᐃΔᐃⵠΔ = ⵠⲆⲆⲆⲆ;
		Ⲇᐃᐃᐃ += d2 + ᐃᐃⵠⵠ;
		var ᐃᐃⲆⲆᐃ = Ⲇᐃᐃᐃ - ⲆΔⲆΔ;
		if (ΔⵠⲆΔ) var ᐃΔΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w3);
		else var ᐃΔΔ = w3.r;
		d2 = ΔⵠᐃΔ - ᐃΔᐃᐃ.ᐃᐃⵠⲆⲆ - Ⲇᐃᐃᐃ - ᐃΔΔ.x;
		if (ᐃᐃⲆⲆᐃ > Ⲇᐃᐃᐃ + d2) {
			var ΔⲆᐃΔⵠ = ⲆⲆⲆⵠⲆ;
			var ⵠΔⲆΔⵠ = Ⲇᐃᐃᐃ,
				ᐃⲆⵠΔΔ = ᐃⵠⲆᐃ,
				ᐃⵠᐃⲆΔ = d2,
				ⲆⵠΔⲆⲆ = ⵠⲆⲆⲆⲆ;
			Ⲇᐃᐃᐃ += d2 + 2;
			var ⲆⵠΔⵠᐃ = Ⲇᐃᐃᐃ
		} else {
			var ΔⲆᐃΔⵠ = ΔΔⲆᐃᐃ;
			Ⲇᐃᐃᐃ = ᐃᐃⲆⲆᐃ;
			var ⲆⵠΔⵠᐃ = -ᐃΔⵠΔ
		}
		d2 = ΔⵠᐃΔ - ᐃΔᐃᐃ.ᐃⲆⲆⲆᐃⲆⵠ - Ⲇᐃᐃᐃ;
		if (ⵠⲆΔ.transition) {
			var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ΔΔⵠ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
			Δ.fillStyle = ⵠΔⲆⵠⵠ(9, 55, 63, 11, 106, 132, ⵠⲆΔⲆ)
		} else Δ.fillStyle = ⵠ.ΔᐃⲆⲆⵠ[ⵠⲆΔ.time];
		Δ.fillRect(ΔⵠΔΔⲆ, ⵠⲆᐃᐃΔ, ΔΔⲆⵠⲆ, ᐃⲆⵠⵠⲆ);
		if (ΔⵠⲆΔ) {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ⵠⲆⵠⲆ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(15, 70, 76, 42, 139, 155, ⵠⲆΔⲆ)
			} else Δ.fillStyle = ⵠ.ΔⲆⵠΔᐃⲆΔ[ⵠⲆΔ.time]
		} else {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ΔΔⵠ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(9, 55, 63, 11, 106, 132, ⵠⲆΔⲆ)
			} else Δ.fillStyle = ⵠ.ΔᐃⲆⲆⵠ[ⵠⲆΔ.time]
		}
		Δ.fillRect(ΔⲆⵠⲆᐃ, ⲆΔⲆⵠᐃ, ᐃΔᐃⵠΔ, ⲆⲆΔᐃⵠ);
		if (ΔⲆᐃΔⵠ) {
			if (ΔⵠⲆΔ) {
				if (ⵠⲆΔ.transition) {
					var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ᐃΔΔⲆ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
					Δ.fillStyle = ⵠΔⲆⵠⵠ(17, 94, 96, 169, 214, 211, ⵠⲆΔⲆ)
				} else Δ.fillStyle = ⵠ.ΔⲆΔᐃⲆⵠᐃ[ⵠⲆΔ.time]
			} else {
				if (ⵠⲆΔ.transition) {
					var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ᐃⵠⵠⵠ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
					Δ.fillStyle = ⵠΔⲆⵠⵠ(9, 55, 63, 11, 106, 132, ⵠⲆΔⲆ)
				} else Δ.fillStyle = ⵠ.ΔᐃⲆⲆⵠ[ⵠⲆΔ.time]
			}
			Δ.fillRect(ᐃⲆⵠΔΔ, ⵠΔⲆΔⵠ, ⲆⵠΔⲆⲆ, ᐃⵠᐃⲆΔ)
		}
		if (ⲆΔⲆⵠ.ΔⵠⵠΔΔ && ΔⵠⲆΔ) ᐃΔⲆⵠ.ΔΔⵠⲆΔⵠΔᐃᐃ(ᐃᐃⲆⲆᐃ, ⲆⵠΔⵠᐃ, ᐃᐃᐃᐃⲆ, ΔⵠᐃΔ, -ⲆΔⵠ.ⲆⵠΔ.x + ΔⵠΔΔⲆ, -ⲆΔⵠ.ⲆⵠΔ.x + ΔⵠΔΔⲆ + ΔΔⲆⵠⲆ)
	}

	function ᐃⲆⵠⲆⵠΔⵠ(ⵠᐃᐃⲆⵠ, ⲆΔⲆΔΔ, ᐃⵠΔⲆΔ, ᐃΔⲆⵠ, ΔⲆᐃΔ, ΔⵠⲆΔ) {
		var w1 = ᐃΔⲆⵠ.w1;
		var w2 = ᐃΔⲆⵠ.w2;
		var w3 = ᐃΔⲆⵠ.w3;
		var ΔⵠᐃΔ = ⲆΔⵠ.ⲆⵠΔ.y + ⵠᐃᐃⲆⵠ + 710;
		var ΔΔⵠᐃᐃ = Math.max(ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⲆΔΔ, ⲆⲆΔ);
		var ΔᐃⵠⵠⲆ = Math.max(-ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⵠΔ - ᐃⵠΔⲆΔ - ᐃⵠⵠΔⲆ, 0);
		var ᐃⵠⲆᐃ = ΔΔⵠᐃᐃ;
		var ⵠⲆⲆⲆⲆ = ⲆΔⵠΔ - ΔΔⵠᐃᐃ - ΔᐃⵠⵠⲆ;
		if (ΔⵠⲆΔ) var ⵠᐃΔⵠΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w1).x;
		else var ⵠᐃΔⵠΔ = w1.r.x;
		var Ⲇᐃᐃᐃ = ΔⵠᐃΔ + ᐃΔᐃᐃ.ⲆⲆⵠⲆᐃ;
		var ⵠⲆᐃᐃΔ = Ⲇᐃᐃᐃ,
			ΔⵠΔΔⲆ = ᐃⵠⲆᐃ,
			ᐃⲆⵠⵠⲆ = -ⵠᐃΔⵠΔ + ᐃΔᐃᐃ.ΔΔⲆΔᐃ,
			ΔΔⲆⵠⲆ = ⵠⲆⲆⲆⲆ;
		Ⲇᐃᐃᐃ += -ⵠᐃΔⵠΔ + ᐃΔᐃᐃ.ΔΔⲆΔᐃ + 2;
		var ᐃᐃᐃᐃⲆ = Ⲇᐃᐃᐃ;
		if (ΔⵠⲆΔ) var ⵠᐃΔⵠΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w2).x;
		else var ⵠᐃΔⵠΔ = w2.r.x;
		var d2 = ΔⵠᐃΔ - ᐃΔᐃᐃ.ΔⲆΔⲆΔ - Ⲇᐃᐃᐃ - ⵠᐃΔⵠΔ;
		var ⲆΔⲆⵠᐃ = Ⲇᐃᐃᐃ,
			ΔⲆⵠⲆᐃ = ᐃⵠⲆᐃ,
			ⲆⲆΔᐃⵠ = d2,
			ᐃΔᐃⵠΔ = ⵠⲆⲆⲆⲆ;
		Ⲇᐃᐃᐃ += d2 + ⵠⲆΔᐃ;
		var ᐃᐃⲆⲆᐃ = Ⲇᐃᐃᐃ - ⵠΔⵠⲆ;
		if (ΔⵠⲆΔ) var ⵠᐃΔⵠΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w3).x;
		else var ⵠᐃΔⵠΔ = w3.r.x;
		d2 = ΔⵠᐃΔ - ᐃΔᐃᐃ.ᐃᐃⵠⲆⲆ - Ⲇᐃᐃᐃ - ⵠᐃΔⵠΔ;
		if (Ⲇᐃᐃᐃ + d2 < ᐃᐃⲆⲆᐃ) {
			var ΔⲆᐃΔⵠ = true;
			var ⵠΔⲆΔⵠ = Ⲇᐃᐃᐃ,
				ᐃⲆⵠΔΔ = ᐃⵠⲆᐃ,
				ᐃⵠᐃⲆΔ = d2,
				ⲆⵠΔⲆⲆ = ⵠⲆⲆⲆⲆ;
			Ⲇᐃᐃᐃ += d2 + 2;
			var ⲆⵠΔⵠᐃ = Ⲇᐃᐃᐃ
		} else {
			var ΔⲆᐃΔⵠ = false;
			Ⲇᐃᐃᐃ = ᐃᐃⲆⲆᐃ;
			var ⲆⵠΔⵠᐃ = -ⲆⲆⲆᐃ
		}
		d2 = ΔⵠᐃΔ - ᐃΔᐃᐃ.ᐃⲆⲆⲆᐃⲆⵠ - Ⲇᐃᐃᐃ;
		if (ΔⵠⲆΔ > ⵠⵠΔΔ && ΔⲆᐃΔ.ⵠΔᐃⵠᐃΔᐃ === 1) {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(15, 77, 72, 252, 239, 187, ⵠⲆΔⲆ)
			} else Δ.fillStyle = ⵠ.ⲆᐃⵠⵠⵠΔⲆ[ⵠⲆΔ.time];
			Δ.fillRect(ᐃⵠⲆᐃ, Ⲇᐃᐃᐃ, ⵠⲆⲆⲆⲆ, d2)
		} else {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ⵠᐃᐃ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(ΔⲆᐃΔ.Δᐃᐃ[Ⲇⵠᐃ], ΔⲆᐃΔ.Δᐃᐃ[ᐃΔⵠΔ], ΔⲆᐃΔ.Δᐃᐃ[2], ΔⲆᐃΔ.ⵠΔⵠ[0], ΔⲆᐃΔ.ⵠΔⵠ[ΔᐃⵠⲆ], ΔⲆᐃΔ.ⵠΔⵠ[ᐃᐃⲆⵠ], ⵠⲆΔⲆ)
			} else Δ.fillStyle = ΔⲆᐃΔ.ⵠⲆⵠⵠⲆ[ⵠⲆΔ.time];
			Δ.fillRect(ᐃⵠⲆᐃ, Ⲇᐃᐃᐃ, ⵠⲆⲆⲆⲆ, d2)
		}
	}

	function ᐃᐃᐃⲆᐃΔᐃ(ⲆΔⲆΔΔ, ⵠᐃᐃⲆⵠ, ᐃΔΔⵠᐃΔⲆ, ᐃΔⲆⵠ, ΔⲆᐃΔ, ΔⵠⲆΔ) {
		var w1 = ᐃΔⲆⵠ.w1;
		var w2 = ᐃΔⲆⵠ.w2;
		var w3 = ᐃΔⲆⵠ.w3;
		var ᐃⵠⲆᐃ = ⲆΔⵠ.ⲆⵠΔ.x + ⲆΔⲆΔΔ - 700;
		var ⲆΔᐃⲆᐃ = Math.max(ⲆΔⵠ.ⲆⵠΔ.y + ⵠᐃᐃⲆⵠ, Ⲇⵠⵠᐃ);
		var ᐃᐃΔᐃⲆ = Math.max(-ⲆΔⵠ.ⲆⵠΔ.y + ΔⲆⲆΔ - ᐃΔΔⵠᐃΔⲆ - 100, Ⲇⵠⵠᐃ);
		var ΔⵠᐃΔ = ⲆΔᐃⲆᐃ;
		var ᐃᐃᐃΔΔ = ΔⲆⲆΔ - ⲆΔᐃⲆᐃ - ᐃᐃΔᐃⲆ;
		if (ΔⵠⲆΔ) var ᐃΔΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w1);
		else var ᐃΔΔ = w1.r;
		var Ⲇᐃᐃᐃ = ᐃⵠⲆᐃ + ᐃΔᐃᐃ.ⲆⲆⵠⲆᐃ;
		var ΔⵠΔΔⲆ = Ⲇᐃᐃᐃ,
			ⵠⲆᐃᐃΔ = ΔⵠᐃΔ,
			ΔΔⲆⵠⲆ = ᐃΔΔ.x + ᐃΔᐃᐃ.ΔΔⲆΔᐃ,
			ᐃⲆⵠⵠⲆ = ᐃᐃᐃΔΔ;
		Ⲇᐃᐃᐃ += ᐃΔΔ.x + ᐃΔᐃᐃ.ΔΔⲆΔᐃ - ΔΔᐃⲆⵠ;
		var ᐃᐃᐃᐃⲆ = Ⲇᐃᐃᐃ;
		if (ΔⵠⲆΔ) var ᐃΔΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w2);
		else var ᐃΔΔ = w2.r;
		var d2 = ᐃⵠⲆᐃ + ᐃΔᐃᐃ.ΔⲆΔⲆΔ - Ⲇᐃᐃᐃ + ᐃΔΔ.x;
		var ΔⲆⵠⲆᐃ = Ⲇᐃᐃᐃ,
			ⲆΔⲆⵠᐃ = ΔⵠᐃΔ,
			ᐃΔᐃⵠΔ = d2,
			ⲆⲆΔᐃⵠ = ᐃᐃᐃΔΔ;
		Ⲇᐃᐃᐃ += d2 - ᐃⲆⵠᐃ;
		var ᐃᐃⲆⲆᐃ = Ⲇᐃᐃᐃ - 2;
		if (ΔⵠⲆΔ) var ᐃΔΔ = ᐃΔⲆⵠ.ᐃᐃⲆ(w3);
		else var ᐃΔΔ = w3.r;
		d2 = ᐃⵠⲆᐃ + ᐃΔᐃᐃ.ᐃᐃⵠⲆⲆ - Ⲇᐃᐃᐃ + ᐃΔΔ.x;
		if (Ⲇᐃᐃᐃ + d2 - ⲆⵠⵠⲆ > ᐃᐃⲆⲆᐃ) {
			var ΔⲆᐃΔⵠ = ᐃΔⲆΔⵠ;
			var ᐃⲆⵠΔΔ = Ⲇᐃᐃᐃ,
				ⵠΔⲆΔⵠ = ΔⵠᐃΔ,
				ⲆⵠΔⲆⲆ = d2,
				ᐃⵠᐃⲆΔ = ᐃᐃᐃΔΔ;
			Ⲇᐃᐃᐃ += d2 - 2;
			var ⲆⵠΔⵠᐃ = Ⲇᐃᐃᐃ
		} else {
			var ΔⲆᐃΔⵠ = ΔⲆⲆΔⵠ;
			Ⲇᐃᐃᐃ = ᐃᐃⲆⲆᐃ;
			var ⲆⵠΔⵠᐃ = -1
		}
		d2 = ᐃⵠⲆᐃ + ᐃΔᐃᐃ.ᐃⲆⲆⲆᐃⲆⵠ - Ⲇᐃᐃᐃ;
		if (ⵠⲆΔ.transition) {
			var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ⲆⲆⵠ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
			Δ.fillStyle = ⵠΔⲆⵠⵠ(9, 55, 63, 11, 106, 132, ⵠⲆΔⲆ)
		} else Δ.fillStyle = ⵠ.ΔᐃⲆⲆⵠ[ⵠⲆΔ.time];
		Δ.fillRect(ΔⵠΔΔⲆ, ⵠⲆᐃᐃΔ, ΔΔⲆⵠⲆ, ᐃⲆⵠⵠⲆ);
		if (ΔⵠⲆΔ) {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? ΔⲆⵠⲆ - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(15, 70, 76, 42, 139, 155, ⵠⲆΔⲆ)
			} else Δ.fillStyle = ⵠ.ΔⲆⵠΔᐃⲆΔ[ⵠⲆΔ.time]
		} else {
			if (ⵠⲆΔ.transition) {
				var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
				Δ.fillStyle = ⵠΔⲆⵠⵠ(9, 55, 63, 11, 106, 132, ⵠⲆΔⲆ)
			} else Δ.fillStyle = ⵠ.ΔᐃⲆⲆⵠ[ⵠⲆΔ.time]
		}
		Δ.fillRect(ΔⲆⵠⲆᐃ, ⲆΔⲆⵠᐃ, ᐃΔᐃⵠΔ, ⲆⲆΔᐃⵠ);
		if (ΔⲆᐃΔⵠ) {
			if (ΔⵠⲆΔ) {
				if (ⵠⲆΔ.transition) {
					var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
					Δ.fillStyle = ⵠΔⲆⵠⵠ(17, 94, 96, 169, 214, 211, ⵠⲆΔⲆ)
				} else Δ.fillStyle = ⵠ.ΔⲆΔᐃⲆⵠᐃ[ⵠⲆΔ.time]
			} else {
				if (ⵠⲆΔ.transition) {
					var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
					Δ.fillStyle = ⵠΔⲆⵠⵠ(9, 55, 63, 11, 106, 132, ⵠⲆΔⲆ)
				} else Δ.fillStyle = ⵠ.ΔᐃⲆⲆⵠ[ⵠⲆΔ.time]
			}
			Δ.fillRect(ᐃⲆⵠΔΔ, ⵠΔⲆΔⵠ, ⲆⵠΔⲆⲆ, ᐃⵠᐃⲆΔ)
		}
		if (ⲆΔⲆⵠ.ΔⵠⵠΔΔ && ΔⵠⲆΔ) ᐃΔⲆⵠ.ᐃᐃⵠΔΔⲆⲆΔᐃ(ᐃᐃⲆⲆᐃ, ⲆⵠΔⵠᐃ, ᐃᐃᐃᐃⲆ, ᐃⵠⲆᐃ, -ⲆΔⵠ.ⲆⵠΔ.y + ⵠⲆᐃᐃΔ, -ⲆΔⵠ.ⲆⵠΔ.y + ⵠⲆᐃᐃΔ + ᐃⲆⵠⵠⲆ)
	}
	var ⲆᐃΔⵠⵠⵠⵠⲆⲆ = ⲆⲆΔ;
	var ᐃⵠᐃΔⵠᐃⲆⲆⲆ = 1;
	var ⵠⲆΔⵠⲆⲆᐃⵠΔ = 0;
	var ΔⵠΔⲆΔᐃᐃΔΔ = 1;
	var ⵠⲆⲆΔΔⵠΔΔΔ = Ⲇⵠᐃ;
	var ᐃΔΔΔᐃᐃⲆᐃΔ = 1;
	var ⵠᐃⵠΔᐃᐃΔⵠⲆ = 0;
	var ΔΔⲆⵠⲆⲆⲆⵠⵠ = ΔΔⵠ;
	var ⲆᐃᐃΔⵠᐃΔⵠⲆ = ⵠⵠᐃ;
	var ᐃΔᐃΔⵠⵠⵠᐃᐃ = 1;
	var ⲆⲆⲆᐃⲆᐃⵠⵠⵠ = ⵠΔⵠᐃ;
	var ᐃⲆⲆⲆⵠⲆΔᐃⲆ = 1;
	var ⲆⲆΔΔⲆ = Ⲇⵠᐃ;
	var ⵠΔᐃᐃⵠ = 1;
	var ᐃΔⲆᐃⲆ = 2;
	var ᐃⵠΔΔⵠⲆⲆ = 0;
	var ᐃΔΔΔⲆᐃⲆ = ⲆⲆⲆᐃ;
	var ᐃᐃⵠⲆ = 2;

	function ⵠⵠᐃᐃΔΔᐃⵠⲆ(ⵠⵠ, ᐃᐃΔ) {
		ⵠᐃⲆⵠⲆ === ᐃᐃΔ && (ᐃᐃΔ = .033);
		var Ⲇⵠ = {
			y: 0,
			x: 0
		};
		var ᐃᐃ = 0;
		var ⲆⲆΔⵠⵠ = 0;
		var ⵠⲆΔᐃᐃᐃⵠ = function() {
			ⲆⲆΔⵠⵠ += ᐃⵠᐃⵠ;
			ᐃᐃΔ < ⲆⲆΔⵠⵠ && (ᐃᐃ = (ᐃᐃ + ⲆⲆΔⵠ) % ⵠⵠ.length, ⲆⲆΔⵠⵠ -= ᐃᐃΔ);
			return ⵠⵠ[ᐃᐃ]
		};
		var ᐃⵠΔᐃ = function(ᐃⵠⲆΔᐃ) {
			ⵠΔⲆⲆ(ᐃⵠⲆΔᐃ, ⵠⲆΔᐃᐃᐃⵠ(), Ⲇⵠ.x, Ⲇⵠ.y)
		};
		return {
			"ⵠⵠ": ⵠⵠ,
			translate: Ⲇⵠ,
			"ᐃⵠΔᐃ": ᐃⵠΔᐃ
		}
	}

	function ΔᐃⲆ(Δᐃⵠ, Ⲇⵠⵠ, text, ⵠΔⵠᐃΔᐃΔ, ΔⲆᐃⲆΔΔΔ, ⵠᐃⵠᐃ, callback, Ⲇᐃ, ⲆⲆⲆ, ΔⲆⵠᐃⲆ, ⵠⲆᐃⵠΔ) {
		if (ⲆⲆⲆ === ΔⲆΔᐃⲆ) ⲆⲆⲆ = 0;
		if (Ⲇᐃ === ΔⲆᐃⲆⵠ) Ⲇᐃ = Ⲇⵠᐃ;
		ⵠᐃⲆᐃⲆ === ΔⲆⵠᐃⲆ && (ΔⲆⵠᐃⲆ = 0);
		if (ⵠⲆᐃⵠΔ === undefined) ⵠⲆᐃⵠΔ = ⲆⵠⲆ;
		ΔⲆᐃⲆΔΔΔ = ΔⲆᐃⲆΔΔΔ === 3 ? 3 : ΔΔⵠ === ΔⲆᐃⲆΔΔΔ ? 2 : ΔᐃⵠⲆ;
		ᐃΔⵠΔ !== ⵠᐃⵠᐃ && (ⵠᐃⵠᐃ = ⵠⵠⵠ);
		if (ⵠΔⵠᐃΔᐃΔ) var ⵠⵠ = ⵠΔⵠᐃΔᐃΔ;
		var ᐃⲆΔΔ = {
			width: Δᐃⵠ,
			height: Ⲇⵠⵠ,
			"ⵠⵠ": ⵠⵠ,
			state: ᐃⵠΔΔⵠⲆⲆ,
			translate: {
				x: Ⲇᐃ,
				y: ⲆⲆⲆ,
				"ᐃⵠΔⲆⵠ": Ⲇᐃ,
				"ᐃᐃΔΔᐃ": ⲆⲆⲆ
			},
			"ΔⵠΔⵠⵠⵠΔⲆⲆ": ⵠᐃⵠᐃ,
			"ⵠᐃⵠᐃ": 0,
			callback: callback,
			position: ΔⲆⵠᐃⲆ,
			active: ⵠⲆᐃⵠΔ
		};
		var ⵠⲆΔᐃᐃᐃⵠ = function() {
			return ᐃⲆΔΔ.ⵠⵠ[ᐃⲆΔΔ.state]
		};
		var ᐃⲆⲆⲆΔⲆΔ = function(ΔΔⵠᐃ) {
			var Ⲇⵠ = ᐃⲆΔΔ.translate;
			(Δⵠⵠ === ᐃⲆΔΔ.width || ᐃⲆΔΔ.height === 0) && (ᐃⲆΔΔ.width = ᐃⲆΔΔ.ⵠⵠ[0].width, ᐃⲆΔΔ.height = ᐃⲆΔΔ.ⵠⵠ[0].height);
			return ΔΔⵠᐃ.x > Ⲇⵠ.x && ΔΔⵠᐃ.x < Ⲇⵠ.x + ᐃⲆΔΔ.width / ΔⲆᐃⲆΔΔΔ && ΔΔⵠᐃ.y > Ⲇⵠ.y && ΔΔⵠᐃ.y < Ⲇⵠ.y + ᐃⲆΔΔ.height / ΔⲆᐃⲆΔΔΔ
		};
		var ᐃᐃᐃⵠ = function(ᐃⵠ, ΔΔⵠᐃ, ⵠⵠᐃⵠ) {
			if (ᐃⲆⲆⲆΔⲆΔ(ΔΔⵠᐃ)) {
				if (ⵠΔᐃᐃⵠ == ⵠⵠᐃⵠ) ᐃⲆΔΔ.state = ᐃᐃⵠⲆ;
				else if (ᐃΔⲆᐃⲆ == ⵠⵠᐃⵠ) ᐃⲆΔΔ.state = ᐃΔΔΔⲆᐃⲆ;
				else if (ⵠⵠᐃⵠ == ⲆⲆΔΔⲆ && ᐃⲆΔΔ.state != ᐃᐃⵠⲆ) ᐃⲆΔΔ.state = ᐃΔΔΔⲆᐃⲆ;
				return ⵠᐃⵠⲆᐃ
			}
			ᐃⲆΔΔ.state = ᐃⵠΔΔⵠⲆⲆ;
			return false
		};
		var ⵠᐃⵠᐃ = function() {
			var ΔⵠⵠⲆ = 0;
			if (ᐃⲆΔΔ.ΔⵠΔⵠⵠⵠΔⲆⲆ === 1) {
				if (ᐃΔΔΔⲆᐃⲆ === ᐃⲆΔΔ.state || ᐃⲆΔΔ.state === ᐃᐃⵠⲆ) ᐃⲆΔΔ.ⵠᐃⵠᐃ = (ᐃⲆΔΔ.ⵠᐃⵠᐃ + ᐃⵠᐃⵠ * 1e3) % 1e3;
				else if (ᐃⲆΔΔ.ⵠᐃⵠᐃ > ⵠᐃΔ) {
					ᐃⲆΔΔ.ⵠᐃⵠᐃ = 500 < ᐃⲆΔΔ.ⵠᐃⵠᐃ ? ᐃⲆΔΔ.ⵠᐃⵠᐃ + 1e3 * ᐃⵠᐃⵠ : ᐃⲆΔΔ.ⵠᐃⵠᐃ - ᐃⵠᐃⵠ * 1e3;
					if (ᐃⲆΔΔ.ⵠᐃⵠᐃ < 0 || 1e3 < ᐃⲆΔΔ.ⵠᐃⵠᐃ) ᐃⲆΔΔ.ⵠᐃⵠᐃ = ⵠᐃⵠ
				}
				ΔⵠⵠⲆ = ΔⲆᐃ.ΔⲆΔⲆⲆ(500 < ᐃⲆΔΔ.ⵠᐃⵠᐃ ? (1e3 - ᐃⲆΔΔ.ⵠᐃⵠᐃ) / 500 : ᐃⲆΔΔ.ⵠᐃⵠᐃ / 500) * .2
			}
			return ΔⵠⵠⲆ
		};
		var ᐃⵠΔᐃ;
		if (ⵠⲆΔᐃ === ΔⲆᐃⲆΔΔΔ) {
			ᐃⵠΔᐃ = function(ᐃⵠⲆΔᐃ) {
				var ΔⵠⵠⲆ = ⲆⲆⵠ + ⵠᐃⵠᐃ();
				var ⵠⵠ = ⵠⲆΔᐃᐃᐃⵠ();
				var ᐃΔΔ = ΔⵠⵠⲆ * ᐃⲆΔΔ.width / 2;
				var ΔⵠⲆ = ΔⵠⵠⲆ * ᐃⲆΔΔ.height / 2;
				var ⲆᐃⲆΔΔᐃΔ = (ᐃΔΔ - ᐃⲆΔΔ.width / ⵠᐃᐃⲆ) / ⵠⵠΔⵠ;
				var ⲆᐃΔⵠⲆ = (ΔⵠⲆ - ᐃⲆΔΔ.height / 2) / ΔⵠⲆⲆ;
				ⵠΔⲆⲆ(ᐃⵠⲆΔᐃ, ⵠⵠ, ᐃⲆΔΔ.translate.x - ⲆᐃⲆΔΔᐃΔ, ᐃⲆΔΔ.translate.y - ⲆᐃΔⵠⲆ, ᐃΔΔ, ΔⵠⲆ)
			}
		} else if (3 === ΔⲆᐃⲆΔΔΔ) {
			ᐃⵠΔᐃ = function(ᐃⵠⲆΔᐃ) {
				var ⵠⵠ = ⵠⲆΔᐃᐃᐃⵠ();
				var ᐃΔΔ = ᐃⲆΔΔ.width;
				var ΔⵠⲆ = ᐃⲆΔΔ.height;
				var ⲆᐃⲆΔΔᐃΔ = (ᐃΔΔ - ᐃⲆΔΔ.width) / 2;
				var ⲆᐃΔⵠⲆ = (ΔⵠⲆ - ᐃⲆΔΔ.height) / 2;
				ⵠΔⲆⲆ(ᐃⵠⲆΔᐃ, ⵠⵠ, ᐃⲆΔΔ.translate.x - ⲆᐃⲆΔΔᐃΔ, ᐃⲆΔΔ.translate.y - ⲆᐃΔⵠⲆ, ᐃΔΔ, ΔⵠⲆ)
			};
			ΔⲆᐃⲆΔΔΔ = ᐃΔⲆΔ
		} else {
			ᐃⵠΔᐃ = function(ᐃⵠⲆΔᐃ) {
				var ⵠⵠ = ⵠⲆΔᐃᐃᐃⵠ();
				ⵠΔⲆⲆ(ᐃⵠⲆΔᐃ, ⵠⵠ, ᐃⲆΔΔ.translate.x, ᐃⲆΔΔ.translate.y)
			}
		}
		return {
			info: ᐃⲆΔΔ,
			"ᐃᐃᐃⵠ": ᐃᐃᐃⵠ,
			"ᐃⵠΔᐃ": ᐃⵠΔᐃ,
			"ᐃⲆⲆⲆΔⲆΔ": ᐃⲆⲆⲆΔⲆΔ
		}
	}

	function ⵠᐃⲆᐃΔⲆⵠΔᐃ(ⵠⵠ) {
		ⵠⵠ.scale += ⵠⵠ.ⵠᐃⵠᐃ ? ᐃⵠᐃⵠ / ⵠⵠ.ⲆᐃⵠⵠᐃⵠⲆ : -ᐃⵠᐃⵠ / ⵠⵠ.ΔΔⲆᐃⲆΔᐃ;
		if (ⵠⵠ.end < ⵠⵠ.scale) ⵠⵠ.ⵠᐃⵠᐃ = false;
		else ⵠⵠ.start > ⵠⵠ.scale && (ⵠⵠ.ⵠᐃⵠᐃ = true)
	}

	function ᐃΔΔⲆⲆ(text, ⵠᐃᐃⲆΔ, Δⵠ, Ⲇⵠⵠ, Δᐃⵠ, ⵠⲆⲆⵠΔᐃΔ, ΔΔⵠᐃᐃⵠⵠ, ΔᐃⲆΔⵠᐃᐃ, ⵠⲆᐃⲆΔ, ⲆⵠⵠᐃⵠΔⲆⲆΔ, ⵠᐃⲆᐃⵠ, ⲆⵠⲆᐃΔ, ⲆᐃᐃΔΔⵠⲆ, ᐃⲆⵠᐃⵠᐃᐃ, ⲆΔΔⵠΔᐃⵠ) {
		if (text.length === Ⲇⵠᐃ) text = " ";
		ΔΔⵠᐃᐃⵠⵠ === undefined && (ΔΔⵠᐃᐃⵠⵠ = ΔᐃⲆⲆ);
		ΔᐃⲆΔⵠᐃᐃ === ᐃⲆⲆⲆᐃ && (ΔᐃⲆΔⵠᐃᐃ = 0);
		undefined === ⵠⲆᐃⲆΔ && (ⵠⲆᐃⲆΔ = Δⵠⵠ);
		undefined === ᐃⲆⵠᐃⵠᐃᐃ && (ᐃⲆⵠᐃⵠᐃᐃ = ⵠⵠⵠ);
		var ᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
		var Δ = ᐃⵠ.getContext(ᐃ[269]);
		Δ.textBaseline = ᐃ[409], Δ.font = (ᐃⲆⲆⲆᐃ !== ⲆΔΔⵠΔᐃⵠ ? ⲆΔΔⵠΔᐃⵠ + " " : "") + Ⲇⵠⵠ + "px " + ⵠᐃᐃⲆΔ;
		Δᐃⵠ !== ΔⲆⲆΔⲆ ? Δᐃⵠ = Math.min(Δ.measureText(text).width, Δᐃⵠ) : Δᐃⵠ = Δ.measureText(text).width;
		ᐃⵠ.width = Δᐃⵠ + ΔΔⵠᐃᐃⵠⵠ;
		ᐃⵠ.height = Ⲇⵠⵠ + ΔᐃⲆΔⵠᐃᐃ;
		if (undefined !== ⵠⲆⲆⵠΔᐃΔ) {
			ⵠᐃⲆⵠⲆ !== ⵠᐃⲆᐃⵠ && (Δ.globalAlpha = ⵠᐃⲆᐃⵠ);
			Δ.fillStyle = ⵠⲆⲆⵠΔᐃΔ;
			if (ⲆⵠⲆᐃΔ !== undefined) {
				ⵠΔΔΔⲆᐃΔᐃΔ(Δ, ⵠⲆᐃⲆΔ + 2, ⵠⲆᐃⲆΔ, Δᐃⵠ + ΔΔⵠᐃᐃⵠⵠ - 2 * ⵠⲆᐃⲆΔ - ΔΔΔⵠ, Ⲇⵠⵠ + ΔᐃⲆΔⵠᐃᐃ - ΔΔⵠⲆ * ⵠⲆᐃⲆΔ, ⲆⵠⲆᐃΔ);
				Δ.fill()
			} else Δ.fillRect(ⵠⲆᐃⲆΔ, ⵠⲆᐃⲆΔ, Δᐃⵠ + ΔΔⵠᐃᐃⵠⵠ - ⵠⲆᐃⲆΔ * ⵠⵠᐃⲆ, Ⲇⵠⵠ + ΔᐃⲆΔⵠᐃᐃ - ⲆᐃᐃⲆ * ⵠⲆᐃⲆΔ);
			Δ.globalAlpha = ⵠⲆⵠⲆ;
			0 !== ⵠⲆᐃⲆΔ && (Δ.lineWidth = ⵠⲆᐃⲆΔ, Δ.strokeStyle = ⲆⵠⵠᐃⵠΔⲆⲆΔ, Δ.stroke())
		}
		Δ.textBaseline = ᐃ[409];
		Δ.font = (ⲆΔΔⵠΔᐃⵠ !== undefined ? ⲆΔΔⵠΔᐃⵠ + " " : "") + Ⲇⵠⵠ + "px " + ⵠᐃᐃⲆΔ;
		if (ⲆᐃᐃΔΔⵠⲆ !== ΔⵠᐃΔᐃ) {
			Δ.strokeStyle = ⲆᐃᐃΔΔⵠⲆ;
			Δ.lineWidth = ᐃⲆⵠᐃⵠᐃᐃ;
			Δ.lineJoin = "miter";
			Δ.miterLimit = ΔⵠⲆⲆ;
			Δ.strokeText(text, Math.floor(ΔΔⵠᐃᐃⵠⵠ / ᐃⲆⵠᐃ), Math.floor(ΔᐃⲆΔⵠᐃᐃ / 2) + Math.floor(Ⲇⵠⵠ / 2), Δᐃⵠ)
		}
		Δ.fillStyle = Δⵠ;
		Δ.fillText(text, Math.floor(ΔΔⵠᐃᐃⵠⵠ / 2), Math.floor(ΔᐃⲆΔⵠᐃᐃ / ΔΔⵠⲆ) + Math.floor(Ⲇⵠⵠ / ᐃᐃΔⵠ), Δᐃⵠ);
		ᐃⵠ.w2 = ᐃⵠ.width / 2;
		ᐃⵠ.ΔⲆΔⵠⵠ = ᐃⵠ.height / 2;
		return ᐃⵠ
	}

	function ⵠΔΔΔⲆΔⵠⲆΔ(ⵠⵠ) {
		var Ⲇⵠ = {
			x: 0,
			y: 0
		};
		var ᐃⵠΔᐃ = function(ᐃⵠⲆΔᐃ) {
			ⵠΔⲆⲆ(ᐃⵠⲆΔᐃ, ⵠⵠ, Ⲇⵠ.x, Ⲇⵠ.y)
		};
		return {
			"ⵠⵠ": ⵠⵠ,
			translate: Ⲇⵠ,
			"ᐃⵠΔᐃ": ᐃⵠΔᐃ
		}
	}

	function ⲆⲆⲆᐃⲆᐃᐃ(ᐃⵠ, ⵠᐃᐃᐃ) {
		var ΔΔⲆᐃᐃⲆⵠ = ᐃⵠ.getBoundingClientRect();
		return {
			x: ⵠᐃᐃᐃ.clientX - ΔΔⲆᐃᐃⲆⵠ.left,
			y: ⵠᐃᐃᐃ.clientY - ΔΔⲆᐃᐃⲆⵠ.top
		}
	}

	function ⲆᐃⲆΔⵠᐃⲆ(ⲆᐃΔΔⵠⵠΔ, ΔⲆⵠⵠΔᐃΔ, ΔᐃⲆᐃⲆⲆⵠΔΔ, ΔⵠΔΔΔΔⵠ, ⲆᐃᐃΔᐃᐃΔⲆⵠ, ᐃΔᐃⲆⵠⲆⵠ) {
		const ⲆⲆⲆΔⵠⵠᐃ = (ⲆᐃΔΔⵠⵠΔ + 20621) % 65363;
		const ΔᐃⵠⵠⵠⵠΔ = (16 << (ΔⲆⵠⵠΔᐃΔ >> 16 & ⲆΔⲆⵠᐃΔᐃ)) + (8 << (ΔⲆⵠⵠΔᐃΔ >> ΔᐃⲆⲆ & 255)) + (24 << (ΔⲆⵠⵠΔᐃΔ >> 8 & 255)) + (0 << (ΔⲆⵠⵠΔᐃΔ >> 24 & 255));
		const ⲆⵠΔΔⵠⲆΔᐃΔ = ((ΔᐃⲆᐃⲆⲆⵠΔΔ + 44873) * 22695477 + ᐃΔⲆΔ) % 4294967296;
		const ⵠΔⵠⵠⲆᐃⵠᐃⵠ = ~(18623 & ΔⵠΔΔΔΔⵠ) & (ΔⵠΔΔΔΔⵠ | 18623);
		const ⲆᐃΔᐃΔⵠⲆⲆᐃ = 49701 ^ ⲆᐃᐃΔᐃᐃΔⲆⵠ;
		const ΔᐃⵠᐃΔᐃᐃᐃⲆ = ~(ᐃΔᐃⲆⵠⲆⵠ & 44) & ᐃΔᐃⲆⵠⲆⵠ | ~(ᐃΔᐃⲆⵠⲆⵠ & 44) & 44;
		const ᐃⵠⵠⵠⲆⲆⲆΔᐃ = ⵠⵠⲆⵠⵠⵠΔ(ⲆⲆⲆΔⵠⵠᐃ, ΔᐃⵠⵠⵠⵠΔ, ⲆⵠΔΔⵠⲆΔᐃΔ, ⵠΔⵠⵠⲆᐃⵠᐃⵠ, ⲆᐃΔᐃΔⵠⲆⲆᐃ);
		const ᐃᐃΔⵠⵠⵠΔᐃΔ = ⵠⵠᐃⲆⵠΔⵠᐃΔ(ΔᐃⵠᐃΔᐃᐃᐃⲆ, ⲆⲆⲆΔⵠⵠᐃ, ΔᐃⵠⵠⵠⵠΔ);
		const ⲆⵠΔΔⲆⵠⵠᐃⲆ = ((35426 + (ᐃⵠⵠⵠⲆⲆⲆΔᐃ ^ ᐃᐃΔⵠⵠⵠΔᐃΔ)) * 22695477 + 1) % 4294967296;
		return ⲆⵠΔΔⲆⵠⵠᐃⲆ
	}

	function ΔΔᐃᐃ(ⵠⵠ, ⵠⲆᐃⵠΔ, Ⲇᐃ, ⲆⲆⲆ, ΔⲆⵠᐃⲆ) {
		var Ⲇⵠ = {
			x: Ⲇᐃ,
			y: ⲆⲆⲆ,
			"ᐃⵠΔⲆⵠ": Ⲇᐃ,
			"ᐃᐃΔΔᐃ": ⲆⲆⲆ
		};
		var ᐃⵠΔᐃ = function(ᐃⵠⲆΔᐃ) {
			ⵠΔⲆⲆ(ᐃⵠⲆΔᐃ, ⵠⵠ, Ⲇⵠ.x, Ⲇⵠ.y, ⵠⵠ.width / 2, ⵠⵠ.height / 2)
		};
		return {
			translate: Ⲇⵠ,
			"ᐃⵠΔᐃ": ᐃⵠΔᐃ,
			active: ⵠⲆᐃⵠΔ,
			position: ΔⲆⵠᐃⲆ
		}
	}

	function ΔᐃⵠΔⲆΔⲆᐃᐃ(Δ) {
		Δ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[158]] = false;
		Δ.ⲆᐃⲆΔⵠⲆᐃΔⵠ = false;
		Δ.ⵠᐃΔⵠᐃᐃⲆᐃⵠ = ⵠᐃΔΔᐃ;
		Δ.ⵠⵠᐃᐃΔᐃᐃᐃⲆ = false;
		Δ.ᐃⵠⵠᐃⲆⵠⲆΔΔ = Ⲇⵠⵠⵠᐃ
	}

	function ⲆΔⵠΔⵠᐃⵠⲆⵠ(ⵠⵠ, ⲆᐃⲆⲆΔᐃⲆ, ⲆΔⲆΔᐃ, ⲆᐃⵠⵠᐃⵠⲆ, ΔΔⲆᐃⲆΔᐃ, Δᐃⵠ, Ⲇⵠⵠ) {
		ⵠⵠ.end = ⲆᐃⲆⲆΔᐃⲆ;
		ⵠⵠ.start = ⲆΔⲆΔᐃ;
		ⵠⵠ.ⲆᐃⵠⵠᐃⵠⲆ = ⲆᐃⵠⵠᐃⵠⲆ;
		ⵠⵠ.ΔΔⲆᐃⲆΔᐃ = ΔΔⲆᐃⲆΔᐃ;
		ⵠⵠ.width = ⵠⵠ.ⵠⵠ.width;
		ⵠⵠ.height = ⵠⵠ.ⵠⵠ.height;
		ⵠⵠ.scale = (ⲆᐃⲆⲆΔᐃⲆ + ⲆΔⲆΔᐃ) / 2;
		ⵠⵠ.ⵠᐃⵠᐃ = false;
		ⵠⵠ.ᐃⵠΔᐃ = function(Δ) {
			ⵠⵠ.translate.x = ⲆⵠᐃΔ - ⵠⵠ.width / 2;
			ⵠΔⲆⲆ(Δ, ⵠⵠ.ⵠⵠ, 0, ⵠᐃⲆⵠ, ⵠⵠ.ⵠⵠ.width, ⵠⵠ.ⵠⵠ.height, ⵠⵠ.translate.x, ⵠⵠ.translate.y, ⵠⵠ.width, ⵠⵠ.height)
		}
	}
	var ᐃⵠⵠᐃ = ᐃ[299];
	var ᐃⲆⲆⵠΔᐃⵠ = ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ(ᐃ[321]) === "1" ? ΔⲆⵠⲆ : ⲆⲆᐃⲆ;
	var ᐃᐃΔⲆⵠΔΔⵠⲆ = ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("password");
	var ⵠⵠⵠΔᐃ = ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("debug") || undefined;
	ᐃⲆⲆⲆᐃ !== ⵠⵠⵠΔᐃ && (ⵠⵠⵠΔᐃ = JSON.parse(ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[32]](ⵠⵠⵠΔᐃ)));
	var ᐃⲆⲆⵠᐃⲆΔ = ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("server") || ΔⵠⲆⲆΔ;
	var ᐃⲆⲆⵠᐃΔᐃ = ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("region") || ⵠᐃⲆⵠⲆ;
	var ΔⵠᐃΔᐃΔᐃ = "starve.io";
	var ⵠΔΔΔⲆΔΔ = "https://" + ΔⵠᐃΔᐃΔᐃ;
	var ᐃⵠⲆⵠ = {
		"ΔⵠᐃΔΔᐃΔ": 256,
		"ⲆΔⲆᐃⲆⵠᐃ": 128,
		"ⲆⲆᐃᐃᐃ": 4,
		"ᐃᐃᐃΔ": ⵠⵠᐃⲆ,
		IDLE: 64,
		"ⵠⲆⵠⲆᐃᐃΔ": ⵠᐃⵠⲆⵠⵠⲆ,
		"ΔΔⲆⲆΔⲆΔ": 32,
		"ⲆⲆᐃⵠᐃᐃⲆ": 8,
		"ΔᐃⵠᐃⵠⲆᐃΔⵠ": 1
	};
	var ΔᐃᐃⲆⵠⲆΔ = [{
		"ⲆᐃⲆⲆⲆ": 1e3,
		items: [
			[ⲆΔⲆΔ, ΔⲆ.ΔⲆⲆΔᐃ],
			[1, ΔⲆ.ⵠⵠΔΔⲆ],
			[ⵠⵠΔⲆⲆ, ΔⲆ.ⲆⵠᐃΔᐃ],
			[1, ΔⲆ.ⲆᐃΔΔⲆ]
		]
	}, {
		"ⲆᐃⲆⲆⲆ": 2e3,
		items: [
			[Ⲇᐃⵠⵠ, ΔⲆ.ᐃⲆⵠⲆᐃ],
			[Δⵠᐃ, ΔⲆ.ᐃᐃΔᐃⵠ],
			[2, ΔⲆ.ⵠⵠΔΔⲆ],
			[ⵠᐃΔⲆΔⲆⵠ, ΔⲆ.ⲆⵠᐃΔᐃ],
			[ΔΔⵠⲆ, ΔⲆ.ⲆᐃΔΔⲆ]
		]
	}, {
		"ⲆᐃⲆⲆⲆ": 4e3,
		items: [
			[ᐃΔᐃΔ, ΔⲆ.ᐃⲆⵠⲆᐃ],
			[1, ΔⲆ.ⵠⲆⲆⲆΔ],
			[ᐃᐃᐃᐃΔ, ΔⲆ.ⵠⵠΔΔⲆ],
			[20, ΔⲆ.ⲆⵠᐃΔᐃ],
			[ⵠⲆᐃⲆ, ΔⲆ.ⲆᐃΔΔⲆ],
			[ΔⲆⵠⲆ, ΔⲆ.ΔⵠΔⲆⵠ],
			[80, ΔⲆ.ⵠΔⵠΔ],
			[140, ΔⲆ.ᐃᐃᐃⲆ]
		]
	}, {
		"ⲆᐃⲆⲆⲆ": 8e3,
		items: [
			[1, ΔⲆ.ⲆⵠⲆΔ],
			[ΔⲆⲆⲆ, ΔⲆ.ᐃⲆⵠⲆᐃ],
			[1, ΔⲆ.ⵠᐃⲆᐃᐃ],
			[6, ΔⲆ.ⵠⵠΔΔⲆ],
			[30, ΔⲆ.ⲆⵠᐃΔᐃ],
			[ᐃⲆΔⵠⵠ, ΔⲆ.ⲆᐃΔΔⲆ],
			[1, ΔⲆ.ΔⵠΔⲆⵠ],
			[150, ΔⲆ.ⵠΔⵠΔ],
			[200, ΔⲆ.ᐃᐃᐃⲆ],
			[60, ΔⲆ.ⵠᐃΔⲆ],
			[2, ΔⲆ.ⵠⲆΔᐃⵠ]
		]
	}, {
		"ⲆᐃⲆⲆⲆ": 16e3,
		items: [
			[ΔⲆⵠⲆ, ΔⲆ.ⲆⵠⲆΔ],
			[ΔᐃⵠⲆ, ΔⲆ.ⵠᐃⵠΔⲆ],
			[1, ΔⲆ.ΔΔΔΔⲆ],
			[7, ΔⲆ.ᐃⵠᐃⵠΔ],
			[2, ΔⲆ.ⵠⲆΔᐃⵠ],
			[ᐃᐃΔⵠ, ΔⲆ.ᐃⲆⵠⲆᐃ],
			[1, ΔⲆ.ΔⵠⲆⲆⵠ],
			[15, ΔⲆ.ᐃⵠⵠᐃΔ],
			[2, ΔⲆ.ⲆᐃⵠΔⲆ],
			[ⲆⲆⵠ, ΔⲆ.ᐃᐃⲆⲆΔ],
			[ⲆⲆᐃⵠ, ΔⲆ.ᐃΔⲆⲆⲆ],
			[200, ΔⲆ.ⵠΔⵠΔ],
			[300, ΔⲆ.ᐃᐃᐃⲆ]
		]
	}, {
		"ⲆᐃⲆⲆⲆ": 16e3,
		items: [
			[1, ΔⲆ.ⲆⵠⲆΔ],
			[ΔⲆⵠⲆ, ΔⲆ.ᐃΔⲆΔⲆ],
			[1, ΔⲆ.ⵠⵠⲆⲆΔ],
			[1, ΔⲆ.ⵠᐃⲆᐃᐃ],
			[ⲆⲆᐃᐃⵠ, ΔⲆ.ᐃⵠᐃⵠΔ],
			[4, ΔⲆ.ⵠⲆΔᐃⵠ],
			[ΔⲆⵠΔᐃ, ΔⲆ.ᐃⲆⵠⲆᐃ],
			[ᐃᐃΔΔ, ΔⲆ.ⲆⲆⵠᐃⲆ],
			[1, ΔⲆ.ⵠΔⲆΔᐃ],
			[200, ΔⲆ.ⵠΔⵠΔ],
			[300, ΔⲆ.ᐃᐃᐃⲆ]
		]
	}, {
		"ⲆᐃⲆⲆⲆ": 16e3,
		items: [
			[ᐃⵠⵠⵠ, ΔⲆ.ⲆⵠⲆΔ],
			[1, ΔⲆ.ⵠΔᐃΔⲆ],
			[ΔⲆⵠⲆ, ΔⲆ.ᐃⵠⵠΔᐃ],
			[ⵠⲆᐃΔ, ΔⲆ.ⲆⲆⵠᐃⲆ],
			[ⵠⵠⵠⲆ, 0],
			[1, ΔⲆ.ⵠᐃⲆᐃᐃ],
			[ΔⵠᐃΔⲆ, ΔⲆ.ᐃⵠᐃⵠΔ],
			[ⵠᐃᐃⲆ, ΔⲆ.ⵠⲆΔᐃⵠ],
			[4, ΔⲆ.ᐃⲆⵠⲆᐃ],
			[150, ΔⲆ.ⵠΔⵠΔ],
			[200, ΔⲆ.ᐃᐃᐃⲆ],
			[ⵠⵠⵠⲆ, ΔⲆ.ᐃⵠᐃΔΔ]
		]
	}, {
		"ⲆᐃⲆⲆⲆ": 16e3,
		items: [
			[1, ΔⲆ.ⲆⵠⲆΔ],
			[ⲆⲆⵠ, ΔⲆ.ⲆᐃΔⵠⵠ],
			[ⲆⲆΔⵠ, ΔⲆ.ⵠᐃⲆᐃᐃ],
			[ⵠᐃⵠⲆⲆ, ΔⲆ.ᐃⵠᐃⵠΔ],
			[ᐃᐃⵠⵠ, ΔⲆ.ⵠⲆΔᐃⵠ],
			[ΔⲆⲆⲆ, ΔⲆ.ᐃⲆⵠⲆᐃ],
			[2, ΔⲆ.ⲆⲆΔⵠᐃ],
			[4, ΔⲆ.ᐃⵠⲆⲆⵠ],
			[10, ΔⲆ.ΔΔΔⵠᐃ],
			[ⵠΔΔⵠⲆ, ΔⲆ.ⲆΔⵠⲆⵠ],
			[ΔᐃᐃΔ, ΔⲆ.ⲆᐃⵠΔΔ],
			[1, ΔⲆ.ᐃᐃⲆⵠⲆ],
			[500, ΔⲆ.ᐃᐃᐃⲆ]
		]
	}, {
		"ⲆᐃⲆⲆⲆ": 16e3,
		items: [
			[1, ΔⲆ.ⲆⵠⲆΔ],
			[1, ΔⲆ.ⵠᐃⲆᐃᐃ],
			[ⵠᐃⲆⵠΔⲆⵠ, ΔⲆ.ΔᐃΔΔⵠ],
			[1, ΔⲆ.ⵠⲆΔᐃⵠ],
			[6, ΔⲆ.ᐃⲆⵠⲆᐃ],
			[3, ΔⲆ.ⲆⲆⵠᐃⲆ],
			[1, ΔⲆ.ⲆⲆᐃΔᐃ],
			[1, ΔⲆ.ⲆⲆᐃΔΔ],
			[ΔΔⵠⵠΔⲆⵠ, ΔⲆ.ΔⲆᐃⲆᐃ],
			[150, ΔⲆ.ⵠΔⵠΔ],
			[200, ΔⲆ.ᐃᐃᐃⲆ]
		]
	}, {
		"ⲆᐃⲆⲆⲆ": 2e4,
		items: [
			[1, ΔⲆ.ⲆⵠⲆΔ],
			[ⵠⵠⵠⲆ, ΔⲆ.ⵠᐃⲆᐃᐃ],
			[ⵠⲆⵠⲆ, ΔⲆ.ᐃⵠᐃⵠΔ],
			[ⵠⲆⵠⲆ, ΔⲆ.ⵠⲆΔᐃⵠ],
			[ⵠⲆᐃΔ, ΔⲆ.ᐃⲆⵠⲆᐃ],
			[ⵠᐃᐃⵠ, ΔⲆ.ⲆⲆⵠᐃⲆ],
			[ⲆⲆⲆᐃ, ΔⲆ.ᐃᐃΔᐃΔ],
			[1, ΔⲆ.ᐃΔⵠⵠⵠ],
			[1, ΔⲆ.ⵠᐃⲆᐃΔ],
			[2, ΔⲆ.ΔⲆⲆᐃⲆ],
			[50, ΔⲆ.ⵠΔⵠΔ],
			[ᐃⲆⲆⵠⵠⵠⲆ, ΔⲆ.ᐃᐃᐃⲆ]
		]
	}];
	const ⲆᐃⵠΔΔΔⵠ = [];
	let ᐃⲆⲆⲆΔΔⲆ = 0;

	function ΔΔⲆᐃΔⲆⵠⵠⵠ(ΔⵠⲆΔᐃ, ⵠⵠⵠⵠⲆⲆΔΔⲆ, ΔⲆⲆⵠⵠⵠⲆ) {
		const ᐃⵠⵠⲆⵠΔⲆ = new Uint8Array(ΔⵠⲆΔᐃ);
		const ᐃⲆΔⲆⲆ = ᐃⵠⵠⲆⵠΔⲆ.length;
		let ΔΔⵠⵠΔᐃΔ = ⲆᐃⵠΔΔΔⵠ[ᐃⲆΔⲆⲆ];
		let ⵠᐃΔᐃⵠ = undefined;
		let ⲆⵠᐃⲆΔΔΔ = undefined;
		if (undefined === ΔΔⵠⵠΔᐃΔ) {
			ᐃⲆⲆⲆΔΔⲆ += 2 * ᐃⲆΔⲆⲆ;
			if (ᐃⲆⲆⲆΔΔⲆ < 65535) {
				ⵠᐃΔᐃⵠ = ⵠⵠⵠᐃⵠᐃⲆ(ᐃΔⲆⲆⲆᐃΔ(ᐃⲆΔⲆⲆ))
			} else {
				ᐃⲆⲆⲆΔΔⲆ = ᐃⲆΔⲆⲆ;
				for (let ᐃⲆ = ⵠᐃⵠ; ᐃⲆ < ⲆᐃⵠΔΔΔⵠ.length; ᐃⲆ++) {
					if (ᐃⲆⲆΔᐃ !== ⲆᐃⵠΔΔΔⵠ[ᐃⲆ]) {
						const ⵠᐃΔᐃⵠ = ⲆᐃⵠΔΔΔⵠ[ᐃⲆ][0];
						ⲆᐃⵠΔΔΔⵠ[ᐃⲆ] = undefined;
						ᐃΔΔⲆᐃⵠᐃ(ⵠᐃΔᐃⵠ)
					}
				}
				ⵠᐃΔᐃⵠ = ⵠⵠⵠᐃⵠᐃⲆ(ᐃΔⲆⲆⲆᐃΔ(ᐃⲆΔⲆⲆ));
				ΔΔΔⲆᐃⲆᐃ()
			}
			ⲆⵠᐃⲆΔΔΔ = ΔⲆᐃᐃⵠᐃⲆ(ⵠᐃΔᐃⵠ);
			ⲆᐃⵠΔΔΔⵠ[ᐃⲆΔⲆⲆ] = [ⵠᐃΔᐃⵠ, ⲆⵠᐃⲆΔΔΔ]
		} else {
			ⵠᐃΔᐃⵠ = ΔΔⵠⵠΔᐃΔ[0];
			ⲆⵠᐃⲆΔΔΔ = ΔΔⵠⵠΔᐃΔ[ᐃΔⵠΔ]
		}
		for (let ᐃⲆ = Δⵠⵠ; ᐃⲆ < ᐃⵠⵠⲆⵠΔⲆ.length; ᐃⲆ++) ⲆⵠᐃⲆΔΔΔ[ᐃⲆ] = ᐃⵠⵠⲆⵠΔⲆ[ᐃⲆ];
		ᐃᐃⵠⲆⲆΔᐃ(ⵠᐃΔᐃⵠ, ⵠⵠⵠⵠⲆⲆΔΔⲆ, ΔⲆⲆⵠⵠⵠⲆ);
		for (let ᐃⲆ = ⵠᐃⵠ; ᐃⲆ < ᐃⵠⵠⲆⵠΔⲆ.length; ᐃⲆ++) ᐃⵠⵠⲆⵠΔⲆ[ᐃⲆ] = ⲆⵠᐃⲆΔΔΔ[ᐃⲆ];
		return ᐃⵠⵠⲆⵠΔⲆ
	}
	var ᐃᐃᐃᐃⵠ = {
		"ΔⲆᐃⲆⵠΔΔΔⵠ": 200,
		"ᐃⵠᐃⲆΔⵠᐃ": 2,
		"ᐃΔⲆΔⵠⵠᐃᐃⵠ": ⵠᐃⵠᐃΔ,
		"ⲆⲆΔΔⲆᐃⲆ": ⲆⲆΔ,
		"ᐃⲆᐃΔᐃᐃΔⵠΔ": 8e3,
		"ⲆΔⲆΔⵠⲆᐃΔⲆ": ᐃᐃᐃⲆⲆ,
		"ⲆⲆΔⲆᐃⲆΔᐃⵠ": ⲆⲆⲆⲆᐃ,
		"ΔᐃⵠⵠⲆᐃᐃⵠᐃ": 125e3,
		"ⲆⵠⵠΔΔΔᐃᐃⲆ": 14,
		"ⵠᐃᐃⲆⲆᐃᐃ": 4,
		"ᐃⲆᐃⲆⵠⲆⲆ": 4,
		"ΔⲆⲆᐃᐃⲆⲆΔⵠ": 50,
		"ΔᐃⲆⵠⵠⵠΔ": 3,
		"ᐃⵠᐃᐃΔᐃΔ": 1,
		"ⵠⵠⲆΔⲆⵠΔⵠᐃ": 5,
		"ᐃⵠⵠⵠⲆⲆⵠⲆΔ": 3,
		"ⲆΔⲆᐃⲆⲆⲆⲆⲆ": "[" + 21 + "]",
		"ⵠⲆⵠⲆᐃᐃΔ": .2,
		"ᐃⲆᐃⵠΔΔⵠ": 52,
		"ΔⵠⵠᐃⲆΔⲆ": .2,
		"ᐃⵠᐃᐃΔΔᐃΔᐃ": 6e4,
		"ΔⵠΔⵠⵠⵠᐃᐃᐃ": .58,
		"ⲆΔΔⵠᐃΔⵠⵠⲆ": ΔΔΔⵠᐃⵠⵠ,
		"ΔΔΔᐃⲆⵠⵠΔΔ": 2e3,
		"ⵠᐃⵠᐃᐃᐃⵠ": 6e5
	};

	function ΔⲆΔⲆᐃΔⲆᐃΔ() {
		var Ⲇᐃⵠ = this;
		this.Δᐃⵠᐃ = null;
		this.ᐃⵠⲆᐃᐃ = 0;
		this.ᐃⵠⲆᐃⲆ = [];
		this.ΔⵠΔΔΔᐃᐃ = {};
		this.ΔΔΔᐃⵠⵠΔ = {};
		this.ΔᐃⲆᐃΔ = [
			[],
			[],
			[],
			[],
			[],
			[],
			[],
			[],
			[]
		];
		this.ⲆᐃᐃᐃⲆΔΔ = [-ⲆⵠⲆ, -1, -Δⵠᐃ, -1, -ΔΔΔᐃ, -1, -ᐃⵠᐃᐃ, -1, -ᐃΔⲆΔ];
		this.ᐃⲆⲆⵠΔ = 0;
		this.ⲆᐃᐃⵠᐃᐃΔ = ⵠⵠⲆΔ;
		this.ΔⲆᐃᐃⵠΔⲆ = function(ΔⲆⲆⲆⲆΔⵠ) {
			if (ⵠⵠⵠΔᐃ !== undefined) {
				Ⲇᐃⵠ.ᐃⵠⲆᐃⲆ.push({
					a: ⵠⵠⵠΔᐃ[ᐃ[38]],
					gm: ⵠⵠⵠΔᐃ["mode"],
					idx: ⵠⵠΔΔ,
					m: 100,
					nu: 0,
					id: 0
				});
				ΔⲆⲆⲆⲆΔⵠ();
				return
			}
			fetch(ⵠΔΔΔⲆΔΔ + "/list", {
				method: ᐃ[56]
			}).then((function(ΔΔΔΔΔⲆᐃ) {
				if (!ΔΔΔΔΔⲆᐃ.ok) {
					ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]]((function() {
						Ⲇᐃⵠ.ΔⲆᐃᐃⵠΔⲆ(ΔⲆⲆⲆⲆΔⵠ)
					}), 3e3);
					return
				}
				ΔΔΔΔΔⲆᐃ.json().then((function(ⵠΔᐃⵠΔΔⵠ) {
					Ⲇᐃⵠ.ᐃⵠⲆᐃⲆ = [];
					Ⲇᐃⵠ.ΔΔΔᐃⵠⵠΔ = {};
					for (let ᐃⵠⲆⵠΔ in ᐃΔᐃᐃ.ⲆΔⲆⲆⲆᐃⵠ) {
						const ⲆⵠΔⵠⵠΔΔⲆⵠ = ᐃΔᐃᐃ.ⲆΔⲆⲆⲆᐃⵠ[ᐃⵠⲆⵠΔ];
						Ⲇᐃⵠ.ᐃⵠⲆᐃⲆ.push({
							a: "Auto Select",
							gm: ⲆⵠΔⵠⵠΔΔⲆⵠ,
							m: ⵠⵠⲆᐃⵠ,
							nu: 0,
							auto: true
						})
					}
					var ⵠΔᐃⵠⵠᐃΔ = Ⲇⵠᐃ;
					var ⲆᐃᐃⲆᐃⵠᐃ = ΔᐃⵠⲆ;
					var ⲆⲆΔᐃⵠⲆΔ = 2;
					var ΔⲆΔΔⲆΔⵠⲆⵠ = ⵠⵠⲆⲆ;
					var ⵠΔⲆᐃⲆⵠⵠᐃᐃ = 4;
					var ⲆⵠᐃⵠⲆΔⵠᐃΔ = ᐃⵠΔⵠ;
					for (let ᐃⲆ = Δⵠⵠ; ⵠΔᐃⵠΔΔⵠ.length > ᐃⲆ; ᐃⲆ++) {
						const ⲆⵠᐃⲆ = ⵠΔᐃⵠΔΔⵠ[ᐃⲆ];
						const ⵠⵠΔⵠⵠ = ⲆⵠᐃⲆ["n"];
						const ᐃⵠᐃΔᐃ = ⲆⵠᐃⲆ["l"];
						const ⵠⵠᐃᐃⵠΔⲆ = ⲆⵠᐃⲆ["p"];
						const ΔⵠΔΔΔᐃᐃ = [];
						Ⲇᐃⵠ.ΔⵠΔΔΔᐃᐃ[ⵠⵠΔⵠⵠ] = ΔⵠΔΔΔᐃᐃ;
						const ᐃⵠᐃⵠᐃⲆΔ = [];
						for (let ⲆⲆⲆⵠ = 0; ⵠⵠᐃᐃⵠΔⲆ.length > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
							const ⵠⵠⵠΔᐃᐃⲆ = ⵠⵠᐃᐃⵠΔⲆ[ⲆⲆⲆⵠ];
							const ΔⵠΔᐃⵠⵠᐃ = ⵠⵠΔⵠⵠ + ⵠⵠⵠΔᐃᐃⲆ[ⵠΔᐃⵠⵠᐃΔ];
							ᐃⵠᐃⵠᐃⲆΔ.push(ΔⵠΔᐃⵠⵠᐃ);
							ΔⵠΔΔΔᐃᐃ.push(ΔⵠΔᐃⵠⵠᐃ)
						}
						for (let ⲆⲆⲆⵠ = 0; ᐃⵠᐃΔᐃ.length > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
							const ΔⵠΔⲆⲆ = ᐃⵠᐃΔᐃ[ⲆⲆⲆⵠ];
							let ᐃᐃΔΔⲆⵠⵠ = ᐃΔᐃᐃ.ⲆΔⲆⲆⲆᐃⵠ[ΔⵠΔⲆⲆ[ⲆⲆΔᐃⵠⲆΔ]];
							let ⵠⵠᐃⲆᐃΔⵠ = ᐃᐃΔΔⲆⵠⵠ + ΔⵠΔⲆⲆ[ⲆᐃᐃⲆᐃⵠᐃ];
							let ΔΔΔⲆᐃΔᐃ;
							ᐃᐃΔΔⲆⵠⵠ in Ⲇᐃⵠ.ΔΔΔᐃⵠⵠΔ ? ΔΔΔⲆᐃΔᐃ = ++Ⲇᐃⵠ.ΔΔΔᐃⵠⵠΔ[ᐃᐃΔΔⲆⵠⵠ] : ΔΔΔⲆᐃΔᐃ = Ⲇᐃⵠ.ΔΔΔᐃⵠⵠΔ[ᐃᐃΔΔⲆⵠⵠ] = 1;
							if (ⵠⵠᐃⲆᐃΔⵠ in Ⲇᐃⵠ.ΔΔΔᐃⵠⵠΔ) ΔⲆⵠᐃⵠⵠᐃ = ++Ⲇᐃⵠ.ΔΔΔᐃⵠⵠΔ[ⵠⵠᐃⲆᐃΔⵠ];
							else ΔⲆⵠᐃⵠⵠᐃ = Ⲇᐃⵠ.ΔΔΔᐃⵠⵠΔ[ⵠⵠᐃⲆᐃΔⵠ] = 1;
							Ⲇᐃⵠ.ᐃⵠⲆᐃⲆ.push({
								name: ΔⵠΔⲆⲆ[ⵠΔⲆᐃⲆⵠⵠᐃᐃ],
								a: ᐃΔᐃᐃ.ᐃⲆⲆⲆᐃⲆⲆᐃⵠ[ΔⵠΔⲆⲆ[ⲆᐃᐃⲆᐃⵠᐃ]] + " " + ΔⲆⵠᐃⵠⵠᐃ,
								r: ΔⵠΔⲆⲆ[ⲆᐃᐃⲆᐃⵠᐃ],
								gm: ᐃΔᐃᐃ.ⲆΔⲆⲆⲆᐃⵠ[ΔⵠΔⲆⲆ[ⲆⲆΔᐃⵠⲆΔ]],
								idx: ΔΔΔⲆᐃΔᐃ,
								m: 100,
								nu: ΔⵠΔⲆⲆ[ΔⲆΔΔⲆΔⵠⲆⵠ],
								id: ΔⵠΔⲆⲆ[ⲆᐃᐃⲆᐃⵠᐃ] + ΔⵠΔⲆⲆ[ⵠΔᐃⵠⵠᐃΔ],
								p: ᐃⵠᐃⵠᐃⲆΔ
							})
						}
					}
					const ⵠᐃΔΔⲆΔΔ = [];
					const ΔⲆΔΔΔᐃᐃ = [];
					const ᐃⲆΔᐃⵠⵠⵠ = [];
					for (let ᐃⲆ = 0; ᐃⲆ < Ⲇᐃⵠ.ᐃⵠⲆᐃⲆ.length; ᐃⲆ++) {
						const ΔⵠΔⲆⲆ = Ⲇᐃⵠ.ᐃⵠⲆᐃⲆ[ᐃⲆ];
						if (ΔⵠΔⲆⲆ["auto"]) continue;
						if (ΔⵠΔⲆⲆ[ᐃ[324]] !== ᐃΔᐃᐃ.ⲆΔⲆⲆⲆᐃⵠ[ᐃΔᐃᐃ.ᐃΔⵠΔⲆ]) continue;
						if (typeof ΔⵠΔⲆⲆ.name === ᐃ[458] && (ΔⵠΔⲆⲆ.name.indexOf("Private Server") !== -ᐃⵠᐃᐃ || 95 < ΔⵠΔⲆⲆ[ᐃ[151]])) ⵠᐃΔΔⲆΔΔ.push(ΔⵠΔⲆⲆ);
						else ΔⲆΔΔΔᐃᐃ.push(ΔⵠΔⲆⲆ);
						ᐃⲆΔᐃⵠⵠⵠ.push(ᐃⲆ)
					}
					const ΔⵠⲆΔᐃⵠⲆ = [];
					ΔⵠⲆΔᐃⵠⲆ.push(...ΔⲆΔΔΔᐃᐃ.sort((function(ⵠᐃΔΔ, ΔᐃⲆΔ) {
						return ΔᐃⲆΔ[ᐃ[151]] - ⵠᐃΔΔ[ᐃ[151]]
					})));
					ΔⵠⲆΔᐃⵠⲆ.push(...ⵠᐃΔΔⲆΔΔ.sort((function(ⵠᐃΔΔ, ΔᐃⲆΔ) {
						const ΔΔΔⵠⵠⲆⲆⲆΔ = ΔᐃⲆΔ[ᐃ[151]] < 95 ? ΔᐃⲆΔ[ᐃ[151]] : ⵠΔΔⲆ;
						const ᐃⵠΔᐃⵠⵠⲆᐃᐃ = ⵠᐃΔΔ[ᐃ[151]] < 95 ? ⵠᐃΔΔ[ᐃ[151]] : 0;
						return ΔΔΔⵠⵠⲆⲆⲆΔ - ᐃⵠΔᐃⵠⵠⲆᐃᐃ
					})));
					for (let ᐃⲆ = Ⲇⵠⵠᐃ; ᐃⲆ < ᐃⲆΔᐃⵠⵠⵠ.length; ᐃⲆ++) {
						const ᐃᐃⵠΔⵠᐃΔ = ᐃⲆΔᐃⵠⵠⵠ[ᐃⲆ];
						const ΔⵠΔⲆⲆ = ΔⵠⲆΔᐃⵠⲆ[ᐃⲆ];
						ΔⵠΔⲆⲆ["idx"] = ᐃⲆ + 1;
						Ⲇᐃⵠ.ᐃⵠⲆᐃⲆ[ᐃᐃⵠΔⵠᐃΔ] = ΔⵠΔⲆⲆ
					}
					ΔⲆⲆⲆⲆΔⵠ()
				}))
			}))
		};
		this.ᐃᐃΔⵠⵠᐃΔⵠⵠ = function(ⲆⵠᐃⲆ) {
			var ⲆⵠⵠⲆⲆ = [];
			for (var ᐃⲆ = Ⲇⵠⵠᐃ; ᐃⲆ < ⲆⵠᐃⲆ.length; ᐃⲆ++) {
				-1 !== ⲆⵠᐃⲆ[ᐃⲆ]["a"].indexOf(ⵠⲆᐃᐃᐃ) && ⲆⵠⵠⲆⲆ.push(ᐃⲆ)
			}
			if (ⲆⵠⵠⲆⲆ.length === 0) return ⵠᐃⵠ;
			return ⲆⵠⵠⲆⲆ[Math.floor(Math.random() * ⲆⵠⵠⲆⲆ.length)]
		};

		function ᐃⲆⵠΔᐃΔᐃ(ΔⵠΔⲆⲆ) {
			let name = ΔⵠΔⲆⲆ[ᐃ[38]] || ΔⵠΔⲆⲆ["a"];
			if (ΔⵠΔⲆⲆ["auto"]) return name;
			return name + " [" + ΔⵠΔⲆⲆ[ᐃ[151]] + " " + ⵠᐃⲆ[ᐃΔᐃ.ΔᐃⲆᐃ] + "]"
		}
		this.ᐃⲆΔΔᐃᐃⲆ = function(ⲆⵠᐃⲆ) {
			var ⵠΔⲆⵠⵠᐃᐃ = ⵠΔⵠᐃ;
			for (var ᐃⲆ = ⵠᐃΔ; ⲆⵠᐃⲆ.length > ᐃⲆ; ᐃⲆ++) ⵠΔⲆⵠⵠᐃᐃ += ⲆⵠᐃⲆ[ᐃⲆ][ᐃ[151]];
			var ⲆⲆᐃᐃⲆ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[291]);
			if (ΔΔᐃⲆ.ⲆᐃᐃᐃⲆΔΔ[ΔΔᐃⲆ.ᐃⲆⲆⵠΔ] === -1) ΔΔᐃⲆ.ⲆᐃᐃᐃⲆΔΔ[ΔΔᐃⲆ.ᐃⲆⲆⵠΔ] = ⲆⲆᐃᐃⲆ.selectedIndex = ΔΔᐃⲆ.ᐃᐃΔⵠⵠᐃΔⵠⵠ(ⲆⵠᐃⲆ);
			else ⲆⲆᐃᐃⲆ.selectedIndex = ΔΔᐃⲆ.ⲆᐃᐃᐃⲆΔΔ[ΔΔᐃⲆ.ᐃⲆⲆⵠΔ];
			var ⵠⲆΔⵠ = '<label for="ul-id"><button type="button" class="ng-binding">' + ⲆⵠᐃⲆ[ⲆⲆᐃᐃⲆ.selectedIndex]["a"] + (0 < ⲆⵠᐃⲆ[ⲆⲆᐃᐃⲆ.selectedIndex][ᐃ[151]] ? " [" + ⲆⵠᐃⲆ[ⲆⲆᐃᐃⲆ.selectedIndex][ᐃ[151]] + " " + ⵠᐃⲆ[ᐃΔᐃ.ΔᐃⲆᐃ] + "]" : "") + "</button></label>" + '<ul role="listbox" id="ul-id" class="md-whiteframe-z1" name="ul-id">' + '<li role="option" id="selectDisabled">' + ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⵠⲆⲆᐃⵠ] + " (" + this.ΔⲆⲆⵠⲆΔⲆ + ") " + ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔⵠᐃⲆΔ] + "</li>";
			for (var ᐃⲆ = 0; ⲆⵠᐃⲆ.length > ᐃⲆ; ᐃⲆ++) ⵠⲆΔⵠ += '<li role="option">' + ᐃⲆⵠΔᐃΔᐃ(ⲆⵠᐃⲆ[ᐃⲆ]) + "</li>\n";
			ⵠⲆΔⵠ += '<li role="option" id="selectDisabled">(' + ⵠΔⲆⵠⵠᐃᐃ + ") " + ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆⲆᐃⲆ] + "</li>";
			ⵠⲆΔⵠ += ᐃ[423];
			ⲆⲆᐃᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ⵠⲆΔⵠ;
			$(".md-select").on(ᐃ[385], (function() {
				$(this).toggleClass(ᐃ[165])
			}));
			$(".md-select ul li").on(ᐃ[385], (function() {
				var ⵠΔΔ = $(this).text();
				var ΔΔ = -ⲆⲆᐃⵠ;
				var ᐃⲆⵠᐃΔΔⵠ = ΔΔᐃⲆ.ΔᐃⲆᐃΔ[ΔΔᐃⲆ.ᐃⲆⲆⵠΔ];
				for (var ᐃⲆ = ⲆᐃΔⵠ; ᐃⲆⵠᐃΔΔⵠ.length > ᐃⲆ; ᐃⲆ++) {
					const name = ᐃⲆⵠΔᐃΔᐃ(ᐃⲆⵠᐃΔΔⵠ[ᐃⲆ]);
					if (name === ⵠΔΔ) {
						ΔΔ = ᐃⲆ;
						break
					}
				}
				if (-1 === ΔΔ) return;
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[291]).selectedIndex = ΔΔ;
				ΔΔᐃⲆ.ⲆᐃᐃᐃⲆΔΔ[ΔΔᐃⲆ.ᐃⲆⲆⵠΔ] = ΔΔ;
				$(".md-select ul li").removeClass(ᐃ[165]);
				$(this).addClass(ᐃ[165]);
				$(".md-select label button").text(ⵠΔΔ)
			}))
		};
		this.ΔⲆⲆⵠⲆΔⲆ = 0;
		this.ⲆⵠΔⲆⵠᐃⲆᐃⲆ = function() {
			this.ΔⲆⲆⵠⲆΔⲆ = 0;
			for (var ᐃⲆ = ᐃⲆΔᐃ; ᐃⲆ < ΔΔᐃⲆ.ᐃⵠⲆᐃⲆ.length; ᐃⲆ++) {
				if ("experimental" == this.ᐃⵠⲆᐃⲆ[ᐃⲆ][ᐃ[324]]) this.ΔᐃⲆᐃΔ[ᐃΔᐃᐃ.ΔⲆⲆᐃⵠ].push(this.ᐃⵠⲆᐃⲆ[ᐃⲆ]);
				else if ("zombies" == this.ᐃⵠⲆᐃⲆ[ᐃⲆ][ᐃ[324]]) this.ΔᐃⲆᐃΔ[ᐃΔᐃᐃ.ᐃΔΔΔᐃ].push(this.ᐃⵠⲆᐃⲆ[ᐃⲆ]);
				else if ("community" == this.ᐃⵠⲆᐃⲆ[ᐃⲆ][ᐃ[324]]) this.ΔᐃⲆᐃΔ[ᐃΔᐃᐃ.ᐃΔⵠΔⲆ].push(this.ᐃⵠⲆᐃⲆ[ᐃⲆ]);
				else if (ᐃ[445] == this.ᐃⵠⲆᐃⲆ[ᐃⲆ][ᐃ[324]]) this.ΔᐃⲆᐃΔ[ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ].push(this.ᐃⵠⲆᐃⲆ[ᐃⲆ]);
				else if ("battle-royale" == this.ᐃⵠⲆᐃⲆ[ᐃⲆ][ᐃ[324]]) this.ΔᐃⲆᐃΔ[ᐃΔᐃᐃ.ᐃⲆΔⲆⵠΔᐃ].push(this.ᐃⵠⲆᐃⲆ[ᐃⲆ]);
				else if (this.ᐃⵠⲆᐃⲆ[ᐃⲆ][ᐃ[324]] == "vampires") this.ΔᐃⲆᐃΔ[ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ].push(this.ᐃⵠⲆᐃⲆ[ᐃⲆ]);
				else this.ΔᐃⲆᐃΔ[ᐃΔᐃᐃ.ⵠΔᐃⵠΔ].push(this.ᐃⵠⲆᐃⲆ[ᐃⲆ]);
				this.ΔⲆⲆⵠⲆΔⲆ += this.ᐃⵠⲆᐃⲆ[ᐃⲆ][ᐃ[151]]
			}
			for (ᐃⲆ = Ⲇⵠⵠᐃ; this.ΔᐃⲆᐃΔ.length > ᐃⲆ; ᐃⲆ++)
				if (this.ΔᐃⲆᐃΔ[ᐃⲆ].length === Ⲇⵠⵠᐃ) this.ΔᐃⲆᐃΔ[ᐃⲆ].push({
					a: ⵠᐃⲆ[ᐃΔᐃ.ⲆⵠΔⵠⵠⲆⲆ],
					"ⲆΔⵠΔⵠΔΔᐃΔ": ⵠᐃⲆⵠ,
					"ᐃⲆ": "127.0.0.1",
					"ᐃⵠⲆ": 80
				});
			this.ᐃⲆΔΔᐃᐃⲆ(this.ΔᐃⲆᐃΔ[0]);
			this.ⵠⲆⲆⵠⵠ = function(ⵠΔΔ) {
				ΔΔᐃⲆ.ᐃⲆⲆⵠΔ = ⵠΔΔ;
				ΔΔᐃⲆ.ᐃⲆΔΔᐃᐃⲆ(ΔΔᐃⲆ.ΔᐃⲆᐃΔ[ΔΔᐃⲆ.ᐃⲆⲆⵠΔ]);
				ΔΔᐃⲆ.ᐃⲆΔΔᐃᐃⲆ(ΔΔᐃⲆ.ΔᐃⲆᐃΔ[ΔΔᐃⲆ.ᐃⲆⲆⵠΔ]);
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[291]).selectedIndex = ΔΔᐃⲆ.ᐃⲆⲆⵠΔ
			}
		};
		this.ⲆΔᐃⵠᐃⵠΔ = Ⲇⵠⵠᐃ;
		this.ⵠᐃᐃⵠΔⲆΔ = 0;
		this.ⲆᐃⲆᐃⲆ = null;
		this.timeout = function() {
			Ⲇᐃⵠ.ⵠᐃᐃⵠΔⲆΔ++;
			Ⲇᐃⵠ.Δᐃⵠᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[307]]();
			if (Ⲇᐃⵠ.ⵠᐃᐃⵠΔⲆΔ > ᐃᐃᐃᐃⵠ.ᐃⵠⵠⵠⲆⲆⵠⲆΔ) {
				ΔΔⵠⲆⲆⵠⵠ = ᐃⲆⲆ;
				ⲆΔⲆⵠ.ⵠⵠᐃⵠⵠᐃΔΔⵠ = ᐃᐃᐃᐃⵠ.ⵠᐃⵠⵠᐃΔⲆΔⵠ;
				Ⲇᐃⵠ.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ᐃΔᐃⵠΔⵠⲆ]);
				ⲆΔⲆⵠ.waiting = false;
				if (ⲆΔⵠ.reconnect.enabled) {
					ᐃⲆΔⵠ.ⲆⵠᐃⵠΔ(ⲆΔⲆⵠ.ΔᐃᐃⵠⲆ)
				}
			} else {
				if (ΔⲆᐃΔᐃ === ⲆΔⵠ.ΔⲆΔⲆᐃⲆⵠ || undefined === ⲆΔⵠ.ΔⲆΔⵠⵠᐃᐃ || ⵠⵠᐃⵠΔ === ⲆΔⵠ.ⵠⵠᐃⲆⲆΔⲆ || ΔΔᐃⲆᐃ === ⲆΔⵠ.ΔᐃⲆᐃⲆⲆᐃ) ⲆΔⲆⵠ.ⵠΔΔⵠⲆⲆΔ((function() {
					Ⲇᐃⵠ.ⵠᐃⲆᐃⵠᐃⵠ()
				}), ᐃΔΔⲆ);
				else Ⲇᐃⵠ.ⵠᐃⲆᐃⵠᐃⵠ()
			}
		};
		this.ΔΔᐃᐃᐃⵠᐃ = function(ᐃⲆΔΔᐃⵠᐃΔⲆ) {
			if (this.ᐃⵠⲆᐃᐃ != this.Δᐃⵠᐃ.ᐃⵠⲆᐃᐃ) return;
			this.ᐃⵠⲆᐃᐃ++;
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔΔⵠΔ] + ᐃⲆΔΔᐃⵠᐃΔⲆ);
			ᐃⲆΔⵠ.ⲆⵠᐃⵠΔ(ⲆΔⲆⵠ.ΔᐃᐃⵠⲆ)
		};
		this.ⲆⵠᐃᐃΔⵠᐃⵠⵠ = function() {
			this.Δᐃᐃᐃⵠ("You speak too much")
		};
		this.ⵠⵠΔⵠΔⲆᐃⲆᐃ = function() {
			clearTimeout(this.ⲆᐃⲆᐃⲆ);
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆᐃⵠⵠ]);
			ⲆΔⲆⵠ.waiting = false
		};
		this.ΔᐃⲆⲆⵠΔᐃⲆⵠ = function() {
			ⲆΔⵠ.ⲆⵠΔⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false
		};
		this.ᐃⲆᐃⵠⵠⲆᐃᐃⵠ = function() {
			ᐃⲆΔⵠ.ΔᐃΔⲆΔⵠⲆ = ⲆᐃΔⵠ
		};
		this.ⲆᐃΔΔΔᐃⵠᐃⲆ = function() {
			ᐃⲆΔⵠ.ΔΔⵠⲆᐃΔⲆ = Ⲇⵠⵠᐃ
		};
		this.ᐃⲆⲆⲆⵠⵠΔΔΔ = function(ᐃᐃⵠΔᐃ) {
			ⲆΔⵠ.ΔⲆΔᐃᐃ.ᐃᐃⵠΔᐃ = ᐃᐃⵠΔᐃ;
			if (ⵠⲆΔ.ᐃⵠΔᐃⲆ > -300) {
				ΔᐃⲆⲆ === ᐃᐃⵠΔᐃ ? this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ΔⵠⲆⲆⵠΔⲆ]) : this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ⵠⵠΔΔΔΔⲆ])
			}
		};
		this.ⲆΔΔⲆΔ = function(ⲆΔΔⲆΔ) {
			ⲆΔⵠ.ⲆΔΔⲆΔ = ⲆΔΔⲆΔ
		};
		this.ΔⵠΔⲆⵠᐃΔⲆⲆ = function(ⵠΔⲆΔΔΔᐃ) {
			ⲆΔⵠ.ⵠΔⲆΔΔΔᐃ = ⵠΔⲆΔΔΔᐃ
		};
		this.ⵠΔⲆΔΔΔᐃ = function(ᐃᐃⵠΔᐃ) {
			ⲆΔⵠ.ⵠΔⲆⲆⵠ.ᐃᐃⵠΔᐃ = ᐃᐃⵠΔᐃ;
			if (ⵠⲆΔ.ΔΔⵠⵠⵠ > -300) {
				if (ᐃᐃⵠΔᐃ === 0) this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ⵠⵠΔⲆⲆᐃⵠ]);
				else this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃΔΔⵠᐃΔ])
			}
		};
		this.ΔᐃⲆᐃⵠᐃᐃΔᐃ = function(ΔⲆᐃΔ) {
			if (0 === ΔⲆᐃΔ) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("exploreForest").src = "img/forest-leaf-ok.png";
			else if (ΔⲆᐃΔ === ⲆⵠΔΔ) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("exploreWinter").src = "img/winter-flake-ok.png";
			else if (ΔⲆᐃΔ === 2) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("exploreLava").src = "img/lava-volcano-ok.png";
			else 3 === ΔⲆᐃΔ && (document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("exploreDesert").src = "img/desert-cactus-ok.png")
		};
		this.ⲆⲆᐃⵠⲆⲆⵠⲆᐃ = function() {
			ᐃⲆΔⵠ.ⲆΔΔᐃⲆᐃᐃ = 0
		};
		this.ⲆⲆⲆⵠⲆᐃΔΔΔ = function() {
			ᐃⲆΔⵠ.ᐃⵠΔⲆⲆⵠΔ = ⲆᐃΔⵠ
		};
		this.ⲆΔⲆΔᐃⵠᐃⵠΔ = function() {
			ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ = [];
			ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ = [];
			ⲆΔⵠ.ᐃΔⲆᐃ.id = -1;
			ⲆΔⵠ.ᐃΔⲆᐃ.ΔᐃΔᐃⲆⵠᐃ.stop();
			ⲆΔⵠ.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ = [];
			ⲆΔⵠ.ⵠΔᐃΔ.ᐃΔΔᐃᐃ = ᐃⲆⵠᐃⵠ;
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⵠᐃⵠⵠⵠⵠΔⵠ = false;
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
			ⲆΔⵠ.ⵠΔᐃΔ.id = -1;
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⵠΔⵠΔ = Ⲇⵠⵠⵠᐃ;
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠᐃᐃ = ⲆᐃΔᐃⵠ;
			ⲆΔⵠ.ⵠΔᐃΔ.ᐃⵠΔΔⲆ = Ⲇⵠⵠⵠᐃ;
			ⲆΔⵠ.ⵠΔᐃΔ.ΔΔΔⵠⲆⵠᐃ = false;
			ⲆΔⵠ.ⵠΔᐃΔ.timeout = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃΔⵠΔᐃ, 0, ᐃΔⲆΔ, 0, 1, ΔⲆⵠⲆ)
		};
		this.ⵠᐃΔΔᐃᐃᐃΔⲆ = function() {
			clearTimeout(this.ⲆᐃⲆᐃⲆ);
			this.Δᐃᐃᐃⵠ();
			ⲆΔⲆⵠ.waiting = ᐃⲆⵠᐃⵠ
		};
		this.ⲆⵠΔᐃⲆⲆΔ = function(ⵠⵠⵠᐃ) {
			for (var ᐃⲆ = ⵠⵠᐃ; ⵠⵠⵠᐃ.length > ᐃⲆ; ᐃⲆ++) {
				ᐃ[458] === typeof ⵠⵠⵠᐃ[ᐃⲆ] && (ⵠⵠⵠᐃ[ᐃⲆ] = ΔⲆᐃ.ⵠΔⵠᐃΔⲆᐃ(ⵠⵠⵠᐃ[ᐃⲆ]))
			}
			ⲆΔⵠ.ᐃⲆᐃΔᐃ.ⵠᐃΔᐃΔ(ⵠⵠⵠᐃ[1], ⵠⵠⵠᐃ[2], ⵠⵠⵠᐃ[ⵠᐃᐃΔ], ⵠⵠⵠᐃ[ᐃᐃᐃᐃΔ])
		};
		this.message = function(ⵠⵠⵠᐃ) {
			this.Δᐃᐃᐃⵠ(ⵠⵠⵠᐃ)
		};
		this.ⲆⲆᐃⵠⵠⲆⲆⵠΔ = function() {
			clearTimeout(this.ⲆᐃⲆᐃⲆ);
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⲆⵠᐃⵠ]);
			ⲆΔⲆⵠ.waiting = ᐃΔᐃᐃΔ
		};
		this.ΔᐃⵠᐃΔⲆᐃᐃⵠ = function() {
			clearTimeout(this.ⲆᐃⲆᐃⲆ);
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃᐃⵠΔⲆΔ]);
			ⲆΔⲆⵠ.waiting = ᐃΔᐃᐃΔ
		};
		this.ᐃⲆⵠⵠⲆⲆᐃⲆⵠ = function() {
			clearTimeout(this.ⲆᐃⲆᐃⲆ);
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠⲆᐃ]);
			ⲆΔⲆⵠ.waiting = false
		};
		this.ᐃᐃᐃᐃⵠⵠΔⵠᐃ = function() {
			ⲆΔⵠ.ᐃΔⲆᐃ.ⲆⲆᐃⵠΔᐃⲆ(1, ⵠⵠΔΔ);
			ᐃⲆΔⵠ.ⵠⵠΔΔⲆΔⵠ()
		};
		this.ᐃⲆⲆΔᐃΔᐃΔⲆ = function(ΔⵠⵠΔ) {
			var ΔΔ = ΔⵠⵠΔ[1];
			var ᐃΔΔⵠ = ⵠⲆΔ.ΔΔᐃΔ[ΔΔ];
			ᐃΔΔⵠ.ⵠⲆᐃᐃ = ΔⵠⵠΔ[ⵠᐃᐃⲆ];
			ᐃΔΔⵠ.ⵠΔⵠⲆⲆ = ΔⵠⵠΔ[3];
			ᐃΔΔⵠ.ᐃΔⲆⲆΔΔΔ = ΔⵠⵠΔ[ΔⲆΔⲆ];
			ᐃΔΔⵠ.ⲆⵠᐃⲆᐃ = ΔⵠⵠΔ[Δᐃᐃⵠ];
			ᐃΔΔⵠ.ᐃΔⲆⵠⲆ = ΔⵠⵠΔ[ⵠΔᐃᐃΔ];
			ᐃΔΔⵠ.ΔᐃΔⵠΔ = ΔⵠⵠΔ[7];
			ᐃΔΔⵠ.level = ΔⵠⵠΔ[ⲆᐃⲆᐃᐃ];
			var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ΔΔ * ⵠⲆΔ.ⵠⲆΔΔᐃⵠΔ];
			ᐃⵠⲆ && (ᐃⵠⲆ.ⵠⲆᐃᐃ = ΔⵠⵠΔ[2], ᐃⵠⲆ.ⵠΔⵠⲆⲆ = ΔⵠⵠΔ[3], ᐃⵠⲆ.ᐃΔⲆⲆΔΔΔ = ΔⵠⵠΔ[ΔⲆⵠΔⲆ], ᐃⵠⲆ.ⲆⵠᐃⲆᐃ = ΔⵠⵠΔ[5])
		};
		this.ⲆΔⵠᐃΔⵠⲆᐃΔ = function(ΔΔ) {
			ΔΔ === ΔⲆ.ⲆⵠⲆΔ ? (ⲆΔⵠ.ᐃΔⲆᐃ.ⲆⲆᐃⵠΔᐃⲆ(ⲆⲆⵠ, ⵠᐃⵠ), ᐃⲆΔⵠ.ⵠⵠΔΔⲆΔⵠ()) : this.ᐃᐃⲆⵠᐃⵠⲆ([0, ΔΔ, 1]);
			ⲆΔⵠ.ⵠΔᐃΔ.ⲆᐃⵠⵠⵠⲆᐃ()
		};
		this.ⲆⵠᐃⵠΔⵠⲆⲆⵠ = function(ΔΔ) {
			ⲆΔⵠ.ⵠⵠⵠⲆᐃ.ⲆⲆΔⵠⵠ = 0;
			ⲆΔⵠ.ⵠΔᐃΔ.ΔᐃⵠΔΔⲆⵠᐃΔ(ΔΔ)
		};
		this.ⵠⲆΔΔⲆⲆΔⲆᐃ = function(ΔΔ) {
			var ⵠΔⲆⲆⲆ = ᐃⵠᐃⵠⵠ[ΔΔ].r;
			for (var ᐃⲆ = Ⲇⵠⵠᐃ; ⵠΔⲆⲆⲆ.length > ᐃⲆ; ᐃⲆ++) {
				if (ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length < ⲆΔⵠ.ᐃΔⲆᐃ.max || ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ⵠΔⲆⲆⲆ[ᐃⲆ][0]] > ⵠⵠⲆΔ) {
					var ᐃⲆᐃⵠ = Math.floor(.8 * ⵠΔⲆⲆⲆ[ᐃⲆ][ΔᐃⵠⲆ]);
					if (!ᐃⲆᐃⵠ) continue;
					this.ᐃᐃⲆⵠᐃⵠⲆ([ᐃⲆΔ, ⵠΔⲆⲆⲆ[ᐃⲆ][0], ᐃⲆᐃⵠ])
				}
			}
			ⲆΔⵠ.ⵠΔᐃΔ.ⲆᐃⵠⵠⵠⲆᐃ()
		};
		this.ᐃⲆⲆΔΔⲆΔⵠⲆ = function(ΔΔ) {
			ⲆΔⵠ.ⵠⵠⵠⲆᐃ.ⲆⲆΔⵠⵠ = 0;
			ⲆΔⵠ.ⵠΔᐃΔ.ⲆΔⵠΔⵠᐃΔⲆⵠ(ΔΔ)
		};
		this.Δᐃᐃᐃⵠ = function(ⵠⵠⵠᐃ) {
			if (!ⲆΔⵠ.alert.text) ⲆΔⵠ.alert.text = ⵠⵠⵠᐃ;
			else ⵠⵠⵠᐃ !== ⲆΔⵠ.alert.text && ⲆΔⵠ.alert.list[ⲆΔⵠ.alert.list.length - 1] !== ⵠⵠⵠᐃ && ⲆΔⵠ.alert.list.push(ⵠⵠⵠᐃ)
		};
		this.ⲆⲆⵠⲆᐃᐃⵠⵠᐃ = function() {
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ⵠΔⵠΔΔᐃᐃ])
		};
		this.ΔΔⲆⵠΔⲆⲆΔΔ = function() {
			var ⵠⵠⵠᐃ;
			ⲆΔⵠ.ⵠΔⵠ == ⲆⲆᐃⲆ ? ⵠⵠⵠᐃ = ⵠᐃⲆ[ᐃΔᐃ.ᐃᐃⲆⵠΔⲆⵠ] : ⵠⵠⵠᐃ = ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃᐃΔᐃⵠᐃ] + (ⲆΔⵠ.ⵠΔⵠ + 1) + ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠΔⵠᐃΔ];
			this.Δᐃᐃᐃⵠ(ⵠⵠⵠᐃ);
			ⲆΔⵠ.ⵠΔⵠ++
		};
		this.ⵠΔⵠΔⲆⵠΔᐃⲆ = function() {
			clearTimeout(Ⲇᐃⵠ.ⲆᐃⲆᐃⲆ);
			ⲆΔⵠ.reconnect.enabled = ᐃΔⵠΔᐃ;
			ⲆΔⵠ.ᐃΔⵠⵠᐃ = false;
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ⵠⲆⵠⵠΔᐃΔ]);
			ᐃⲆΔⵠ.ⲆⵠᐃⵠΔ(ⲆΔⲆⵠ.ΔᐃᐃⵠⲆ);
			this.Δᐃⵠᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[307]]()
		};
		this.ⵠⲆⵠⵠΔⲆΔⵠⵠ = function() {
			ΔΔⵠⲆⲆⵠⵠ = 1;
			clearTimeout(this.ⲆᐃⲆᐃⲆ);
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ᐃΔΔⲆᐃΔΔ]);
			ⲆΔⲆⵠ.waiting = ⲆⵠΔΔⵠ
		};
		this.ᐃⵠΔᐃⵠⲆΔⵠᐃ = function() {
			ΔΔⵠⲆⲆⵠⵠ = ᐃⵠⵠⵠ;
			clearTimeout(this.ⲆᐃⲆᐃⲆ);
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ⵠⵠⲆΔⲆᐃⵠ]);
			ⲆΔⲆⵠ.waiting = ΔⲆⲆᐃΔ
		};
		this.ⵠⵠΔⲆΔⵠⲆᐃⵠ = function(ⵠⵠⵠᐃ) {
			var ΔΔ = ⵠⵠⵠᐃ[ⵠⵠⵠⲆ];
			var ΔΔᐃΔ = ⵠⲆΔ.ΔΔᐃΔ;
			ΔΔᐃΔ[ΔΔ].ⵠⲆⵠΔⵠ = ⵠⵠⵠᐃ[ⲆᐃᐃⲆ];
			ΔΔᐃΔ[ΔΔ].ⵠⲆᐃᐃ = ⵠⵠⵠᐃ[3];
			ΔΔᐃΔ[ΔΔ].ⵠΔⵠⲆⲆ = ⵠⵠⵠᐃ[4];
			ΔΔᐃΔ[ΔΔ].ᐃΔⲆⲆΔΔΔ = ⵠⵠⵠᐃ[ΔⲆⵠⵠ];
			ΔΔᐃΔ[ΔΔ].ⲆⵠᐃⲆᐃ = ⵠⵠⵠᐃ[6];
			ΔΔᐃΔ[ΔΔ].ᐃΔⲆⵠⲆ = ⵠⵠⵠᐃ[7];
			ΔΔᐃΔ[ΔΔ].ΔᐃΔⵠΔ = ⵠⵠⵠᐃ[ᐃᐃᐃⵠᐃ];
			ΔΔᐃΔ[ΔΔ].level = ⵠⵠⵠᐃ[9];
			ΔΔᐃΔ[ΔΔ].ᐃᐃᐃΔᐃ = Ⲇⵠᐃ;
			ΔΔᐃΔ[ΔΔ].ΔΔᐃⵠᐃⵠΔ = null;
			ΔΔᐃΔ[ΔΔ].label = null;
			ΔΔᐃΔ[ΔΔ].ⵠᐃⵠⲆⵠⲆΔ = null;
			ΔΔᐃΔ[ΔΔ].ᐃΔⵠⵠᐃ = ΔⲆᐃΔΔ;
			ᐃⲆⲆⵠΔᐃⵠ === ⲆⵠⲆ && (ΔΔᐃΔ[ΔΔ].ⵠⲆⵠΔⵠ += "|" + ΔΔ);
			setTimeout(() => {
				JoinedPlayers.unshift(ΔΔᐃΔ[ΔΔ].ⵠⲆⵠΔⵠ + " | " + ΔΔ +  " | Level: " + ΔΔᐃΔ[ΔΔ].level);
				if (JoinedPlayers.length > 5) JoinedPlayers.pop()
			},750)

		};
		this.ⵠᐃⵠΔᐃⵠⲆᐃᐃ = function() {
			Settings.Spectator.enabled || this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔᐃⵠΔⲆⲆᐃ[ΔΔᐃᐃᐃᐃᐃ].stringify([9]))
		};
		this.ⲆⵠⵠⲆΔⵠᐃⲆᐃ = function() {
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.EMPTY])
		};
		this.ᐃⵠᐃⵠΔΔᐃ = function() {
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔΔⵠΔⵠ])
		};
		this.ⲆⵠⵠΔⵠᐃⲆΔΔ = function(ΔΔ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⵠⵠᐃΔⵠ[ᐃⵠᐃⲆᐃᐃⲆ].stringify([38, ΔΔ]));
			ⲆΔⵠ.ⲆⵠΔⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false
		};
		this.ⵠᐃⲆⵠⵠΔΔΔΔ = function(ⲆⲆᐃΔ) {
			var ⵠΔⲆⲆⲆ = ΔᐃᐃⲆⵠⲆΔ[ⲆⲆᐃΔ - ⲆⲆᐃⵠ].items;
			for (var ᐃⲆ = 0; ⵠΔⲆⲆⲆ.length > ᐃⲆ && ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length < ⲆΔⵠ.ᐃΔⲆᐃ.max; ᐃⲆ++) {
				var ΔΔⲆⲆᐃ = ⵠΔⲆⲆⲆ[ᐃⲆ][ΔΔΔᐃ];
				var ᐃⲆᐃⵠ = ⵠΔⲆⲆⲆ[ᐃⲆ][0];
				if (ΔⲆ.ⲆⵠⲆΔ === ⵠΔⲆⲆⲆ[ᐃⲆ][ⲆⲆΔⵠ]) ⲆΔⵠ.ᐃΔⲆᐃ.ⲆⲆᐃⵠΔᐃⲆ(ⵠⲆⵠⲆ, ᐃⲆΔ);
				else this.ᐃᐃⲆⵠᐃⵠⲆ([0, ΔΔⲆⲆᐃ, ᐃⲆᐃⵠ])
			}
		};
		this.ᐃᐃⲆⵠᐃⵠⲆ = function(ΔⲆΔᐃⵠ) {
			var ᐃⲆΔⲆⲆ = ΔⲆΔᐃⵠ.length;
			var ᐃΔⲆᐃ = ⲆΔⵠ.ᐃΔⲆᐃ;
			for (var ᐃⲆ = ᐃΔⵠΔ; ᐃⲆ < ᐃⲆΔⲆⲆ; ᐃⲆ += 2) {
				var ⵠΔⲆ = ΔⲆΔᐃⵠ[ᐃⲆ];
				var ᐃᐃⲆⲆ = ΔⲆΔᐃⵠ[ᐃⲆ + ᐃΔΔⲆ];
				for (var ⲆⲆⲆⵠ = ⵠᐃⲆⵠ; ⲆⲆⲆⵠ < ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length; ⲆⲆⲆⵠ++) {
					if (ᐃΔⲆᐃ.ΔⵠΔⵠⲆ[ⲆⲆⲆⵠ].id == ⵠΔⲆ) {
						ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ⵠΔⲆ] += ᐃᐃⲆⲆ;
						break
					}
				}
				ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length == ⲆⲆⲆⵠ && (ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ⵠΔⲆ] = ᐃᐃⲆⲆ, ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.push(ᐃⲆΔⵠ.ΔΔΔ[ⵠΔⲆ]), ᐃⲆΔⵠ.ⵠⵠΔΔⲆΔⵠ())
			}
			ⲆΔⵠ.ⵠΔᐃΔ.ΔⵠΔ()
		};
		this.ⵠΔⲆΔ = function(ⲆⲆᐃᐃΔ, ⵠΔⵠⲆⵠⲆᐃ, ⵠⲆⲆᐃⵠ, ⵠⲆᐃⲆⲆⵠᐃ, ⲆᐃⵠᐃⲆΔⲆ, ⵠΔΔⵠᐃ, ⲆΔΔⲆΔ) {
			if (Math.floor(11 - (Date.now() - Timers.HealTimer) / 1e3) < 5 || arguments[0] / 100 > ⲆΔⵠ.ⵠΔⲆΔ.ᐃᐃⵠᐃ) {
				Timers.HealTimer = (new Date).getTime()
			}
			Timers.GaugeTimer = (new Date).getTime();
			ⲆΔⵠ.ⵠΔⲆΔ.ᐃᐃⵠᐃ = ⲆⲆᐃᐃΔ / 100;
			ⲆΔⵠ.ⵠΔⲆΔ.ΔⵠⲆ = ⵠΔⵠⲆⵠⲆᐃ / 100;
			ⲆΔⵠ.ⵠΔⲆΔ.c = ⵠⲆⲆᐃⵠ / 100;
			ⲆΔⵠ.ⵠΔⲆΔ.ᐃᐃⲆ = ⵠⲆᐃⲆⲆⵠᐃ / 100;
			ⲆΔⵠ.ⵠΔⲆΔ.ⵠΔⲆ = ⲆᐃⵠᐃⲆΔⲆ / 100;
			ⲆΔⵠ.ⵠΔⲆΔ.ⲆⵠⲆΔⲆᐃⵠ = ⵠΔΔⵠᐃ / 100;
			ⲆΔⵠ.ⲆΔΔⲆΔ = ⲆΔΔⲆΔ
		};
		this.ΔⵠⲆⵠᐃΔΔᐃΔ = function(ΔΔ) {
			ᐃⲆΔⵠ.ᐃΔΔᐃ.modify(ΔΔ, ᐃᐃⲆⵠ)
		};
		this.ΔΔᐃΔᐃⲆⵠⵠⵠ = function(ΔΔ) {
			ᐃⲆΔⵠ.ᐃΔΔᐃ.modify(ΔΔ, 0)
		};
		this.claimed = function(ΔΔ) {
			ᐃⲆΔⵠ.ᐃΔΔᐃ.modify(ΔΔ, ⵠᐃᐃⵠ)
		};
		this.ⲆΔⵠⵠᐃΔᐃⵠⲆ = function(ⲆⲆᐃᐃΔ, ⲆΔΔⲆΔ) {
			ⲆΔⵠ.ⵠΔⲆΔ.ᐃᐃⵠᐃ = ⲆⲆᐃᐃΔ / Δⵠᐃⵠᐃ;
			ⲆΔⵠ.ⲆΔΔⲆΔ = ⲆΔΔⲆΔ
		};
		this.ᐃᐃΔⵠᐃᐃⵠΔⵠ = function(ΔΔΔⵠⲆⵠᐃ) {
			ⲆΔⵠ.ⵠΔⲆΔ.ᐃᐃⲆ = ΔΔΔⵠⲆⵠᐃ / 100
		};
		this.ⲆⵠΔᐃⵠⵠⵠᐃᐃ = function(ⵠΔⵠⲆⵠⲆᐃ) {
			ⲆΔⵠ.ⵠΔⲆΔ.ΔⵠⲆ = ⵠΔⵠⲆⵠⲆᐃ / ⵠⵠⲆᐃⵠ
		};
		this.ⵠⲆᐃΔᐃⵠΔᐃⲆ = function(ⵠΔΔⵠᐃ) {
			ⲆΔⵠ.ⵠΔⲆΔ.ⲆⵠⲆΔⲆᐃⵠ = ⵠΔΔⵠᐃ / ΔᐃΔⲆᐃ
		};
		this.ⵠⵠΔᐃⲆⲆΔⲆⲆ = function(ⵠⲆⲆᐃⵠ) {
			ⲆΔⵠ.ⵠΔⲆΔ.c = ⵠⲆⲆᐃⵠ / 100
		};
		this.ⲆΔΔΔΔⲆⲆΔⵠ = function(Ⲇᐃᐃᐃ) {
			ⵠⲆΔ.time = Ⲇᐃᐃᐃ;
			ⵠⲆΔ.transition = ⲆⲆⵠⵠΔ;
			ⵠⲆⵠᐃ.transition = ⲆⲆⵠ
		};
		this.ⵠᐃⵠΔⲆΔΔⲆⲆ = function() {
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[430]).style.backgroundColor = ⵠ.ⲆⵠᐃᐃΔ[ⵠⲆΔ.time]
		};
		this.ΔⲆⲆΔⲆΔⵠⲆⲆ = function(ΔΔ) {
			ᐃΔᐃᐃ.ⲆⵠⵠΔΔⲆⵠ == ⵠⲆΔ.mode && ᐃ[520] !== ⵠⲆΔ.ΔΔᐃΔ[ΔΔ].ⵠⲆⵠΔⵠ && this.Δᐃᐃᐃⵠ(ⵠⲆΔ.ΔΔᐃΔ[ΔΔ].ⵠⲆⵠΔⵠ + ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⲆΔⲆΔ]);
			ⵠⲆΔ.ΔΔᐃΔ[ΔΔ].ᐃΔⵠⵠᐃ = ΔⲆⲆΔⵠ;
			KilledPlayers.unshift(ⵠⲆΔ.ΔΔᐃΔ[ΔΔ].ⵠⲆⵠΔⵠ + " | " + ΔΔ + " | Level: " + ⵠⲆΔ.ΔΔᐃΔ[ΔΔ].level );
			if (KilledPlayers.length > 5) KilledPlayers.pop()
		};
		this.ⵠΔᐃᐃᐃΔⵠⵠΔ = function(ΔⵠΔᐃ) {
			var ΔⲆΔᐃⵠ = new Uint16Array(ΔⵠΔᐃ);
			Settings.Spectator.enabled || ᐃΔΔⵠ.ⲆⵠΔ.ᐃⲆⵠΔⵠ(ΔⲆΔᐃⵠ[ΔⲆⵠⲆ], ΔⲆΔᐃⵠ[ΔΔᐃⲆⵠ])
		};
		this.ⵠᐃⵠⲆⲆⵠᐃⵠΔ = function(ΔⵠΔᐃ) {
			var ΔⲆΔᐃⵠ = new Uint16Array(ΔⵠΔᐃ);
			ⲆΔⵠ.ⲆⵠΔ.ᐃⲆⵠΔⵠ(ΔⲆΔᐃⵠ[1], ΔⲆΔᐃⵠ[ΔⲆⵠΔ])
		};
		this.ᐃᐃᐃⵠⲆⵠⲆᐃᐃ = function(ΔⵠⵠΔ, ΔⵠΔᐃ) {
			var ΔⲆΔᐃⵠ = new Uint16Array(ΔⵠΔᐃ);
			var ᐃⲆΔⲆⲆ = (ΔⵠⵠΔ.length - 2) / 4;
			for (var ᐃᐃⵠᐃ = 0; ᐃⲆΔⲆⲆ > ᐃᐃⵠᐃ; ᐃᐃⵠᐃ++) {
				var ΔΔ = ΔⲆΔᐃⵠ[ⵠⵠⵠⲆ + ᐃᐃΔⵠ * ᐃᐃⵠᐃ];
				var ⲆⲆΔᐃ = ΔⵠⵠΔ[ⵠⲆᐃⲆ + 4 * ᐃᐃⵠᐃ];
				var ΔΔⲆ = ⲆᐃᐃⲆ * (Math.PI * ((ΔⵠⵠΔ[ⵠᐃⵠΔᐃ + 4 * ᐃᐃⵠᐃ] >> 1) / 127));
				var ΔⲆⵠᐃ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆⲆΔᐃ * ⵠⲆΔ.ⵠⲆΔΔᐃⵠΔ + ΔΔ];
				if (ΔⲆⵠᐃ && ΔⲆⵠᐃ.ΔΔᐃ) {
					ⵠⲆⵠᐃ.loaded && ⵠⲆⵠᐃ.ΔᐃᐃⵠⲆ && ⵠⲆⵠᐃ.ΔΔᐃ(ΔⵠⵠΔ[ΔΔⵠΔⵠ + ⵠΔⲆᐃⲆ * ᐃᐃⵠᐃ] & 1, ΔⵠⲆⲆᐃ[ΔⲆⵠᐃ.type], ΔⲆⵠᐃ.x, ΔⲆⵠᐃ.y);
					ΔⲆⵠᐃ.ΔΔᐃ.angle = ΔΔⲆ;
					ΔⲆⵠᐃ.ΔΔᐃ.ΔⵠΔ = ΔΔⲆ
				}
			}
		};
		this.ⵠᐃⵠᐃⵠⵠΔΔⵠ = function(ΔⵠΔᐃ) {
			var ΔⲆΔᐃⵠ = new Uint16Array(ΔⵠΔᐃ);
			var ᐃⲆΔⲆⲆ = (ΔⲆΔᐃⵠ.length - 1) / ᐃΔⵠᐃⲆ;
			for (var ᐃᐃⵠᐃ = ⵠΔΔⲆ; ᐃᐃⵠᐃ < ᐃⲆΔⲆⲆ; ᐃᐃⵠᐃ++) {
				var ⲆⲆᐃΔ = ᐃΔΔΔⲆ * ᐃᐃⵠᐃ;
				var ᐃⲆ = ΔⲆΔᐃⵠ[1 + ⲆⲆᐃΔ];
				var ⲆⲆⲆⵠ = ΔⲆΔᐃⵠ[ⵠΔⵠⲆ + ⲆⲆᐃΔ];
				var ΔΔⲆ = (ΔⲆΔᐃⵠ[ᐃᐃΔΔ + ⲆⲆᐃΔ] >> ᐃⲆⲆ) / 127 * Math.PI * 2;
				var ΔΔ = ΔⲆΔᐃⵠ[ΔΔᐃⵠΔ + ⲆⲆᐃΔ];
				var Δᐃⵠⵠ = ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ⲆⲆⲆⵠ][ᐃⲆ];
				var ⵠΔⲆ;
				switch (ΔΔ) {
					case ⵠⵠⲆΔ:
						ⵠΔⲆ = Δᐃⵠⵠ["p"][0][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 1:
						ⵠΔⲆ = Δᐃⵠⵠ["s"][0][ᐃⲆΔᐃ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case ⵠⵠΔⵠ:
						ⵠΔⲆ = Δᐃⵠⵠ["s"][1][ⵠⵠΔΔ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 3:
						ⵠΔⲆ = Δᐃⵠⵠ["s"][2][ⵠⵠᐃ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case ᐃⵠⵠⲆ:
						ⵠΔⲆ = Δᐃⵠⵠ["t"][0][Ⲇⵠⵠᐃ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 5:
						ⵠΔⲆ = Δᐃⵠⵠ["t"][ᐃⲆⲆ][Ⲇⵠⵠᐃ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ᐃⵠⲆⵠᐃ;
						break;
					case 6:
						ⵠΔⲆ = Δᐃⵠⵠ["t"][ᐃᐃΔⵠ][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ᐃⵠⵠⵠⲆ;
						break;
					case 7:
						ⵠΔⲆ = Δᐃⵠⵠ["t"][3][ⲆᐃΔⵠ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⲆⲆⵠⵠΔ;
						break;
					case ⵠⵠᐃᐃⲆ:
						ⵠΔⲆ = Δᐃⵠⵠ["t"][ⵠⲆᐃⲆ][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ΔᐃᐃⲆᐃΔΔ;
						break;
					case ⲆⲆⵠⵠᐃ:
						ⵠΔⲆ = Δᐃⵠⵠ["t"][5][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case ᐃᐃⵠΔⵠ:
						ⵠΔⲆ = Δᐃⵠⵠ["g"][0][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 11:
						ⵠΔⲆ = Δᐃⵠⵠ["g"][ΔΔΔᐃ][ⵠⵠⵠ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ΔΔᐃᐃⵠⵠⲆ;
						break;
					case ⲆΔᐃⵠⲆⵠⵠ:
						ⵠΔⲆ = Δᐃⵠⵠ["g"][2][ⵠᐃⲆⵠ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⲆⲆΔΔΔ;
						break;
					case 13:
						ⵠΔⲆ = Δᐃⵠⵠ["d"][ⵠᐃⵠ][ⲆⲆΔ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⵠⲆᐃⵠᐃ;
						break;
					case Δⵠⵠᐃᐃ:
						ⵠΔⲆ = Δᐃⵠⵠ["d"][1][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ᐃᐃΔⵠΔ;
						break;
					case ⲆⵠⲆⲆⲆⲆᐃ:
						ⵠΔⲆ = Δᐃⵠⵠ["d"][ⵠΔⵠⲆ][ⵠᐃⲆⵠ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case ⵠᐃΔⲆΔⲆⵠ:
						ⵠΔⲆ = Δᐃⵠⵠ["b"][ⵠⵠΔΔ][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⲆᐃΔᐃⲆ;
						break;
					case ᐃⲆᐃⵠΔ:
						ⵠΔⲆ = Δᐃⵠⵠ["b"][ᐃΔⵠΔ][ⵠᐃΔ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⲆΔΔⵠᐃⲆⵠ;
						break;
					case 18:
						ⵠΔⲆ = Δᐃⵠⵠ["b"][2][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⲆⲆΔΔΔ;
						break;
					case ΔᐃᐃΔΔ:
						ⵠΔⲆ = Δᐃⵠⵠ["b"][ᐃΔΔΔ][ⵠΔⵠᐃ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 20:
						ⵠΔⲆ = Δᐃⵠⵠ["f"][ⵠⵠΔΔ][ⲆᐃΔⵠ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 21:
						ⵠΔⲆ = Δᐃⵠⵠ["f"][Δⵠᐃ][ᐃⲆΔ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ΔΔⲆΔⵠⲆⲆ;
						break;
					case 22:
						ⵠΔⲆ = Δᐃⵠⵠ["f"][2][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ΔⲆΔⵠⲆ;
						break;
					case 23:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[174]][ᐃⲆΔ][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⲆΔΔⵠᐃⲆⵠ;
						break;
					case 24:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[174]][ⵠⲆⵠⲆ][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 25:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[174]][2][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 26:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[388]][Ⲇⵠⵠᐃ][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 27:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[388]][1][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 28:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[388]][2][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 29:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[83]][ᐃⲆΔ][ⲆⲆᐃⲆ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⲆᐃΔᐃⲆ;
						break;
					case 30:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[83]][ᐃΔΔⲆ][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⵠⲆⵠᐃⵠ;
						break;
					case 31:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[83]][ᐃᐃΔⵠ][Ⲇⵠⵠᐃ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 32:
						ⵠΔⲆ = Δᐃⵠⵠ["a"][0][ⵠᐃΔ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ᐃⵠⲆⵠᐃ;
						break;
					case 33:
						ⵠΔⲆ = Δᐃⵠⵠ["a"][ΔΔⵠ][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ΔΔᐃᐃⵠⵠⲆ;
						break;
					case 34:
						ⵠΔⲆ = Δᐃⵠⵠ["a"][ⵠΔⵠⲆ][ⲆⲆΔ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ᐃⵠⵠⵠⲆ;
						break;
					case 35:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[153]][Ⲇⵠⵠᐃ][ⵠⵠⲆΔ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 36:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[153]][ΔΔΔᐃ][ᐃⲆΔᐃ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 37:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[153]][ΔΔⵠⲆ][ⲆᐃΔⵠ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ΔΔᐃᐃⵠⵠⲆ;
						break;
					case 38:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[153]][ⲆⲆΔΔ][ⲆᐃΔⵠ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⵠⲆᐃⵠᐃ;
						break;
					case 40:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[502]][ⵠⵠⵠ][ᐃⲆΔ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⵠⲆⵠᐃⵠ;
						break;
					case 41:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[502]][1][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⲆᐃΔᐃⲆ;
						break;
					case 42:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[502]][2][ⵠⵠᐃ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⲆΔΔⵠᐃⲆⵠ;
						break;
					case 50:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[538]][ⲆⲆᐃ][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ⲆⲆⲆⵠⲆ;
						break;
					case 51:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[538]][ΔⲆⵠⲆ][ⵠᐃⵠ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ᐃΔΔΔΔ;
						break;
					case 52:
						ⵠΔⲆ = Δᐃⵠⵠ[ᐃ[538]][2][ΔᐃⲆⲆ];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 55:
						ⵠΔⲆ = Δᐃⵠⵠ["c"][Δⵠⵠ][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 56:
						ⵠΔⲆ = Δᐃⵠⵠ["m"][ⵠᐃⲆⵠ][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = ᐃⵠⲆⲆᐃ;
						break;
					case 57:
						ⵠΔⲆ = Δᐃⵠⵠ["m"][Δⵠᐃ][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break;
					case 58:
						ⵠΔⲆ = Δᐃⵠⵠ["m"][2][0];
						ⵠΔⲆ.angle = ΔΔⲆ;
						ⵠΔⲆ.ΔⵠΔ = true;
						break
				}
				if (ⵠⲆⵠᐃ.loaded && ⵠⲆⵠᐃ.ΔᐃᐃⵠⲆ && ⵠΔⲆ) ⵠⲆⵠᐃ.ΔΔᐃ(ΔⲆΔᐃⵠ[ᐃΔᐃⲆ + ⲆⲆᐃΔ] & 1, ⲆᐃᐃΔ[ΔΔ], ⵠΔⲆ.x, ⵠΔⲆ.y)
			}
		};
		this.ⵠᐃΔⵠⵠ = function() {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃΔⲆΔⵠᐃΔ[Δᐃᐃⵠᐃ].stringify([35, ⲆΔⵠ.ⵠᐃΔⵠⵠ.ⲆⲆΔᐃ, ⲆΔⵠ.ⵠᐃΔⵠⵠ.ΔⲆⵠⲆⲆ]))
		};
		this.ⵠⲆⵠΔΔⲆᐃΔⲆ = function(ΔΔⲆᐃ, ᐃᐃⲆⲆ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃΔⲆΔⵠᐃΔ[ⲆΔᐃΔⲆⵠⵠ].stringify([30, ᐃᐃⲆⲆ, ΔΔⲆᐃ.ⲆⲆΔᐃ, ΔΔⲆᐃ.ΔⲆⵠⲆⲆ]))
		};
		this.ⲆΔΔⲆΔΔΔ = function(ⲆΔᐃⲆ, ᐃΔΔ, ⲆΔΔ) {
			if (ᐃΔΔ) this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃΔⲆΔⵠᐃΔ[ⲆΔᐃΔⲆⵠⵠ].stringify([14, ᐃΔΔ, ⲆΔᐃⲆ.ⲆⲆΔᐃ, ⲆΔᐃⲆ.ΔⲆⵠⲆⲆ]));
			else this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃΔⲆΔⵠᐃΔ[ᐃⲆⵠΔⵠⵠⲆ].stringify([25, ⲆΔΔ, ⲆΔᐃⲆ.ⲆⲆΔᐃ, ⲆΔᐃⲆ.ΔⲆⵠⲆⲆ]))
		};
		this.ⵠΔⵠⲆΔⵠΔⵠⲆ = function(ⲆΔᐃⲆ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔΔᐃΔᐃ[ᐃⵠⵠᐃⲆ].stringify([13, ⲆΔᐃⲆ.ⲆⲆΔᐃ, ⲆΔᐃⲆ.ΔⲆⵠⲆⲆ]))
		};
		this.ΔᐃⲆⵠΔΔⵠᐃΔ = function(ⵠⲆᐃᐃΔᐃᐃⲆΔ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔΔᐃΔᐃ[ΔⲆΔΔⲆᐃⵠ].stringify([32, ⵠⲆᐃᐃΔᐃᐃⲆΔ]))
		};
		this.ᐃⵠⲆᐃΔⵠᐃᐃΔ = function(ⵠⲆⵠᐃᐃ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃⵠᐃᐃΔⵠᐃ[Δᐃᐃⵠᐃ].stringify([29, ⵠⲆⵠᐃᐃ.ⲆⲆΔᐃ, ⵠⲆⵠᐃᐃ.ΔⲆⵠⲆⲆ]))
		};
		this.ΔᐃᐃΔᐃΔⲆΔΔ = function(ᐃⵠΔΔ, ᐃᐃⲆⲆ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⵠⵠᐃΔⵠ[ᐃⵠⵠᐃⲆ].stringify([27, ᐃᐃⲆⲆ, ᐃⵠΔΔ.ⲆⲆΔᐃ, ᐃⵠΔΔ.ΔⲆⵠⲆⲆ, ᐃⵠΔΔ.type]))
		};
		this.ᐃΔⵠⲆᐃⲆⵠΔⵠ = function(ΔⲆΔⲆᐃ, ᐃᐃⲆⲆ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⵠⵠᐃΔⵠ[ᐃⵠⵠᐃⲆ].stringify([7, ᐃᐃⲆⲆ, ΔⲆΔⲆᐃ.ⲆⲆΔᐃ, ΔⲆΔⲆᐃ.ΔⲆⵠⲆⲆ]))
		};
		this.ᐃᐃᐃⵠⵠⲆⲆΔⲆ = function(ⲆᐃⲆΔ, ΔΔ, ᐃᐃⲆⲆ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃⵠᐃᐃΔⵠᐃ[ⲆΔᐃΔⲆⵠⵠ].stringify([Δⵠᐃ, ΔΔ, ᐃᐃⲆⲆ, ⲆᐃⲆΔ.ⲆⲆΔᐃ, ⲆᐃⲆΔ.ΔⲆⵠⲆⲆ]))
		};
		this.ᐃⲆᐃⵠⵠⲆⲆ = function(ᐃⵠΔΔ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔΔᐃΔᐃ[ᐃⵠⵠᐃⲆ].stringify([37, ᐃⵠΔΔ.ⲆⲆΔᐃ, ᐃⵠΔΔ.ΔⲆⵠⲆⲆ, ᐃⵠΔΔ.type]))
		};
		this.ᐃᐃⵠⲆⵠⲆⵠⵠⲆ = function(ΔΔⲆᐃ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔΔᐃΔᐃ[ᐃⵠⵠᐃⲆ].stringify([ᐃⵠⵠⲆ, ΔΔⲆᐃ.ⲆⲆΔᐃ, ΔΔⲆᐃ.ΔⲆⵠⲆⲆ]))
		};
		this.ⵠⲆⲆⵠⲆᐃᐃⲆⲆ = function(ⲆᐃⲆΔ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔΔᐃΔᐃ[ᐃⵠⵠᐃⲆ].stringify([ΔᐃⵠΔⵠ, ⲆᐃⲆΔ.ⲆⲆΔᐃ, ⲆᐃⲆΔ.ΔⲆⵠⲆⲆ]))
		};
		this.ΔⵠᐃᐃΔⵠΔΔⵠ = function(ⲆᐃⲆΔ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃᐃⲆΔⲆⲆⵠ[ⲆⲆΔⵠᐃⲆᐃ].stringify([ⵠⲆⵠΔⲆ, ⲆᐃⲆΔ.ⲆⲆΔᐃ, ⲆᐃⲆΔ.ΔⲆⵠⲆⲆ]))
		};
		this.ΔΔⲆᐃⵠΔΔⵠⲆ = function(ⲆᐃⲆΔ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔΔᐃΔΔΔᐃ[ᐃⵠᐃⲆᐃᐃⲆ].stringify([3, ⲆᐃⲆΔ.ΔⲆⵠⲆⲆ]))
		};
		this.ΔᐃᐃᐃΔᐃΔ = function(ΔΔᐃᐃᐃⵠᐃ) {
			Ⲇᐃⵠ.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔᐃⲆⵠΔⲆᐃ[ΔⲆΔΔⲆᐃⵠ].stringify([23, ⲆΔⵠ.ⲆⲆᐃⵠΔ.id, ⲆΔⵠ.ΔⲆᐃⲆⲆ[ΔΔᐃᐃᐃⵠᐃ]]))
		};
		this.ᐃΔΔⲆⲆΔΔᐃⵠ = function() {
			Ⲇᐃⵠ.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⵠΔᐃΔⵠᐃⲆ[ⲆΔΔΔΔⲆᐃ].stringify([17, ⲆΔⵠ.ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ, ⲆΔⵠ.ⲆⲆᐃⵠΔ.id]))
		};
		this.ᐃⵠⲆΔⲆⲆᐃ = function() {
			Ⲇᐃⵠ.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⲆⵠΔⲆᐃΔΔ[ΔⲆΔΔΔᐃΔ].stringify([12]))
		};
		this.ΔⵠⲆⵠᐃΔⲆⵠᐃ = function() {
			Ⲇᐃⵠ.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⲆⵠΔⲆᐃΔΔ[ΔⲆΔΔⲆᐃⵠ].stringify([19, ⲆΔⵠ.ⲆⲆᐃⵠΔ.id]));
			if ("LOCK" == document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[271])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]]) {
				ⲆΔⵠ.ⲆⲆᐃⵠΔ.lock = 1;
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[271])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "UNLOCK"
			} else {
				ⲆΔⵠ.ⲆⲆᐃⵠΔ.lock = 0;
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[271])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "LOCK"
			}
		};
		this.Ⲇᐃᐃ = function(ΔⵠΔᐃ, ΔⵠⵠΔ, ᐃⲆᐃⵠΔᐃᐃΔᐃ) {
			var ΔⲆΔᐃⵠ = new Uint16Array(ΔⵠΔᐃ);
			ᐃⲆᐃⵠΔᐃᐃΔᐃ && ⵠⲆΔ.ⲆᐃⵠⵠᐃᐃⵠΔΔ();
			var ᐃⲆΔⲆⲆ = (ΔⵠⵠΔ.length - 2) / 18;
			for (var ᐃⲆ = 0; ᐃⲆΔⲆⲆ > ᐃⲆ; ᐃⲆ++) {
				var ᐃᐃⲆᐃⵠᐃⲆ = 2 + ᐃⲆ * ⵠΔⲆᐃΔ;
				var ⵠᐃⲆΔΔⲆⲆ = 1 + ᐃⲆ * 9;
				var ⲆⲆΔᐃ = ΔⵠⵠΔ[ᐃᐃⲆᐃⵠᐃⲆ];
				var ΔⲆΔᐃ = ΔⲆΔᐃⵠ[ⵠᐃⲆΔΔⲆⲆ + 1];
				var ΔΔ = ΔⲆΔᐃⵠ[ⵠᐃⲆΔΔⲆⲆ + 5];
				var ᐃⲆᐃⲆ = ⵠⲆΔ.ⵠⲆΔΔᐃⵠΔ * ⲆⲆΔᐃ + ΔΔ;
				if (ΔⲆΔᐃ & ᐃⵠⲆⵠ.ΔᐃⵠᐃⵠⲆᐃΔⵠ) {
					ⵠⲆΔ.ⵠⵠⵠΔΔⵠΔⲆᐃ(ᐃⲆᐃⲆ);
					continue
				}
				var ⲆⵠΔⵠ = ΔⲆΔᐃⵠ[ⵠᐃⲆΔΔⲆⲆ + 2];
				var Ⲇᐃ = ΔⲆΔᐃⵠ[ⵠᐃⲆΔΔⲆⲆ + 3];
				var ⲆⲆⲆ = ΔⲆΔᐃⵠ[ⵠᐃⲆΔΔⲆⲆ + 4];
				var ⵠⵠΔ = ΔⲆΔᐃⵠ[ⵠᐃⲆΔΔⲆⲆ + 6];
				var ⵠᐃᐃⲆⲆ = ΔⲆΔᐃⵠ[ⵠᐃⲆΔΔⲆⲆ + 7];
				var ⲆᐃΔⵠᐃ = ΔⲆΔᐃⵠ[ⵠᐃⲆΔΔⲆⲆ + 8];
				var ΔΔⲆ = 2 * (Math.PI * (ΔⵠⵠΔ[ᐃᐃⲆᐃⵠᐃⲆ + 1] / 255));
				if (!ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ᐃⲆᐃⲆ]) {
					var ⵠΔⲆ = new ᐃⵠⵠᐃᐃⵠΔ(ⲆⵠΔⵠ, ⲆⲆΔᐃ, ΔΔ, Ⲇᐃ, ⲆⲆⲆ, ΔΔⲆ, ΔⲆΔᐃ, ⵠⵠΔ, ⵠᐃᐃⲆⲆ, ⲆᐃΔⵠᐃ);
					ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ᐃⲆᐃⲆ] = ⵠΔⲆ;
					ⵠⲆΔ.Ⲇᐃᐃ[ⲆⵠΔⵠ].push(ⵠΔⲆ);
					continue
				}
				var ΔⲆⵠᐃ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ᐃⲆᐃⲆ];
				ΔⲆⵠᐃ.r.x = Ⲇᐃ;
				ΔⲆⵠᐃ.r.y = ⲆⲆⲆ;
				if (ⲆⲆΔᐃ != ⲆⲆΔ && ΔⲆᐃ.ⲆⵠⲆⲆ(ΔⲆⵠᐃ, ΔⲆⵠᐃ.r) > ᐃᐃᐃᐃⵠ.ΔⲆᐃⲆⵠΔΔΔⵠ) {
					ΔⲆⵠᐃ.x = Ⲇᐃ;
					ΔⲆⵠᐃ.y = ⲆⲆⲆ
				}(ⲆΔⵠ.id !== ΔⲆⵠᐃ.id || ⲆⲆᐃⲆ === ⲆⲆΔᐃ) && (ΔⲆⵠᐃ.ΔΔΔⲆⲆⵠΔ = ΔΔⲆ);
				ΔⲆⵠᐃ.action |= ΔⲆΔᐃ;
				ΔⲆⵠᐃ.info = ⵠⵠΔ;
				ΔⲆⵠᐃ.ⵠᐃᐃⲆⲆ = ⵠᐃᐃⲆⲆ;
				ΔⲆⵠᐃ.ⲆᐃΔⵠᐃ = ⲆᐃΔⵠᐃ;
				ΔⲆⵠᐃ.ΔⵠΔ && ΔⲆⵠᐃ.ΔⵠΔ(ΔⲆΔᐃ);
				if (ΔⲆΔᐃ === 2) {
					if (ⲆⵠΔⵠ === 82 || ⲆⵠΔⵠ === 86) {
						ΔⲆⵠᐃ.hits++
					}
				}
			}
		};
		this.ΔⵠⲆᐃ = function(ΔⵠΔᐃ) {
			this.ⲆΔᐃⵠᐃⵠΔ = ⵠⲆΔⵠΔ;
			var ΔⲆⵠᐃ = new Uint16Array(ΔⵠΔᐃ);
			ⲆΔⵠ.ⲆⵠᐃΔⵠ.ᐃⵠΔᐃᐃ(ΔⲆⵠᐃ)
		};
		this.ⲆΔΔΔⵠΔᐃᐃΔ = function(ⲆⵠⵠᐃⵠᐃΔ) {
			ΔΔⲆⲆⲆ !== ΔᐃΔΔᐃᐃΔ && (ᐃⵠᐃⵠⵠ = ΔᐃΔΔᐃᐃΔ);
			if (0 < ⲆⵠⵠᐃⵠᐃΔ.length) {
				ΔᐃΔΔᐃᐃΔ = JSON.parse(JSON.stringify(ᐃⵠᐃⵠⵠ));
				for (var ᐃⲆ = ⵠᐃⵠ; ⲆⵠⵠᐃⵠᐃΔ.length > ᐃⲆ; ᐃⲆ++) {
					var ΔⲆⵠ = ⲆⵠⵠᐃⵠᐃΔ[ᐃⲆ];
					var ⲆΔⵠⲆΔΔⲆ = ᐃⵠᐃⵠⵠ[ΔⲆⵠ["item"]];
					if (undefined === ⲆΔⵠⲆΔΔⲆ) continue;
					ⲆΔⵠⲆΔΔⲆ.r = ΔⲆⵠ["recipe"];
					ⲆΔⵠⲆΔΔⲆ.w = ΔⲆⵠ["workbench"];
					ⲆΔⵠⲆΔΔⲆ.f = ΔⲆⵠ["fire"];
					ⲆΔⵠⲆΔΔⲆ.ⵠΔⲆ = ΔⲆⵠ["water"];
					ⲆΔⵠⲆΔΔⲆ.e = ΔⲆⵠ["well"];
					ⲆΔⵠⲆΔΔⲆ.time = 1 / ΔⲆⵠ[ᐃ[490]]
				}
			}
		};
		this.ⵠΔΔⲆΔⵠᐃ = function(ⵠⵠⵠᐃ) {
			!ⵠⵠⵠᐃ || ⵠⵠⵠᐃ.length === 0 ? ⲆΔⵠ.ⵠΔΔⲆΔⵠᐃ.message = ⲆⲆⲆΔᐃ : ⲆΔⵠ.ⵠΔΔⲆΔⵠᐃ.message = ⵠⵠⲆⵠᐃΔⵠⲆⲆ(ⵠⵠⵠᐃ)
		};
		this.ᐃᐃⲆΔⲆ = function(ⵠⵠⵠᐃ) {
			var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⵠⵠⵠᐃ[ⲆⲆⲆᐃ] * ⵠⲆΔ.ⵠⲆΔΔᐃⵠΔ];
			if (ᐃⵠⲆ) {
				if (ᐃΔᐃᐃ.ᐃΔΔΔᐃ === ⵠⲆΔ.mode && ᐃΔᐃᐃ.ΔⵠᐃⲆΔΔⲆ === ᐃⵠⲆ.ⵠⲆᐃᐃ) {
					if (!ⲆΔⵠ.ΔⵠⵠⵠΔ) ᐃⵠⲆ.text.push(ⵠⲆⵠΔᐃᐃΔ[Math.floor(Math.random() * ⵠⲆⵠΔᐃᐃΔ.length)]);
					else {
						if (.5 < Math.random()) ᐃⵠⲆ.text.push(ⵠⵠⵠᐃ[ΔⲆⵠΔ] + " ..." + ⲆⲆⲆⲆⵠ);
						else ᐃⵠⲆ.text.push(ⲆⲆⲆⲆⵠ + "... " + ⵠⵠⵠᐃ[2])
					}
				} else ᐃⵠⲆ.text.push(ⵠⵠⵠᐃ[Ⲇᐃⵠⵠ])
			}
		};
		this.ΔΔᐃⲆⲆΔᐃᐃΔ = function(ΔΔ) {
			if (ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length === ⲆΔⵠ.ᐃΔⲆᐃ.max && ΔⲆ.ⲆⵠⲆΔ !== ᐃⵠᐃⵠⵠ[ΔΔ].ᐃⲆⲆΔ && -ᐃΔⲆΔ == ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ᐃⵠᐃⵠⵠ[ΔΔ].ᐃⲆⲆΔ) && !ⲆΔⵠ.ᐃΔⲆᐃ.ⲆⲆⲆⲆΔΔⵠᐃⲆ(ᐃⵠᐃⵠⵠ[ΔΔ].r)) {
				this.ᐃⵠᐃⵠΔΔᐃ();
				return ⵠᐃΔ
			}
			if (Settings.AutoBook.enabled && getWorldProperty("fast_units")[getUserProperty("uid")].right !== 28 && canSelect(28)) {
				getClientProperty("socket").send(JSON.stringify([Packets.Equip, 28]))
			}
			Settings.AutoCraft.last = arguments[0];
			autoFeed();
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔᐃⵠΔⲆⲆᐃ[ΔΔᐃᐃᐃᐃᐃ].stringify([26, ΔΔ]));
			return ⲆⵠⲆ
		};
		this.ⵠⵠΔⵠΔ = function(ⲆΔⵠⲆⲆ) {
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠᐃᐃⲆⲆⵠⵠᐃⲆ(ⲆΔⵠⲆⲆ)
		};
		this.ⵠⲆⵠᐃᐃ = function(ⲆΔⵠⲆⲆ) {
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠᐃᐃ = ⲆΔⵠⲆⲆ;
			ⲆΔⵠ.ⵠΔᐃΔ.ΔⵠΔ()
		};
		this.ᐃⵠΔΔⲆ = function(ⲆΔⵠⲆⲆ) {
			ⲆΔⵠ.ⵠΔᐃΔ.ᐃⵠΔΔⲆ = ⲆΔⵠⲆⲆ;
			ⲆΔⵠ.ⵠΔᐃΔ.ΔⵠΔ()
		};
		this.ΔΔΔⵠⲆⵠᐃ = function(ⲆΔⵠⲆⲆ) {
			ⲆΔⵠ.ⵠΔᐃΔ.ΔΔΔⵠⲆⵠᐃ = ⲆΔⵠⲆⲆ;
			ⲆΔⵠ.ⵠΔᐃΔ.ΔⵠΔ()
		};
		this.ⵠΔΔΔᐃⵠΔᐃⵠ = function(ᐃⵠ) {
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠⵠᐃⲆᐃ])
		};
		this.ΔᐃⲆⵠΔΔΔΔᐃ = function() {
			ⲆΔⵠ.ⵠΔᐃΔ.ⲆᐃⵠⵠⵠⲆᐃ()
		};
		this.ᐃΔᐃΔΔ = function(ΔⵠⲆΔᐃ) {
			ᐃⲆΔⵠ.ᐃΔᐃΔΔ.ΔΔᐃΔ = [];
			var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
			var Ⲇᐃᐃᐃ = ⲆⲆΔ;
			for (var ᐃⲆ = 1; ΔⵠⲆΔᐃ.length > ᐃⲆ; ᐃⲆ += ⵠⵠᐃⲆ) {
				var ΔⵠΔΔ = {
					x: Math.floor(ΔⵠⲆΔᐃ[ᐃⲆ] * ⵠⲆΔ.w / 250),
					y: Math.floor(ΔⵠⲆΔᐃ[ᐃⲆ + ⲆⵠΔΔ] * ⵠⲆΔ.ΔⵠⲆ / 250)
				};
				if (ᐃⵠⲆ && !Ⲇᐃᐃᐃ && !ⲆΔⵠ.ΔᐃⲆΔᐃⲆᐃ && ΔⲆᐃ.ⲆⵠⲆⲆ(ΔⵠΔΔ, ᐃⵠⲆ) < 250) {
					Ⲇᐃᐃᐃ += 1;
					continue
				}
				ᐃⲆΔⵠ.ᐃΔᐃΔΔ.ΔΔᐃΔ.push(ΔⵠΔΔ)
			}
		};
		this.ⲆⵠⵠⲆⵠⲆᐃⵠⲆ = function() {
			ⲆΔⵠ.ⵠᐃΔⵠⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃΔᐃⲆΔ;
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.enabled = false;
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.ⲆⲆΔⵠⵠ = -1;
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.label = null;
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.ΔᐃΔᐃⵠⲆᐃ = null;
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.now = -1;
			if (Settings.AutoCrown.enabled && autoCrownReady) {
				autoCrownReady = false;
				getClientProperty("socket").send(JSON.stringify([Packets.Equip, 79]));
				if (getHammer()) getClientProperty("socket").send(JSON.stringify([Packets.Equip, getHammer()]));
				setTimeout((() => autoCrownReady = true), 5e3)
			}
							if (Settings.XDLOLXD.enabled && autoCrownReady) {
					autoCrownReady = false;
					getClientProperty("socket").send(JSON.stringify([Packets.Equip, 79]));
					if (getHammer()) getClientProperty("socket").send(JSON.stringify([Packets.Equip, getHammer()]));
					setTimeout((() => autoCrownReady = true), 5e3)
				}
		};
		this.ⲆⲆⵠⲆⲆ = function(ᐃⲆᐃΔᐃΔⲆΔⲆ) {
			ᐃΔᐃᐃ.ΔΔᐃⵠⵠⲆⵠ = ᐃⲆᐃΔᐃΔⲆΔⲆ;
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.enabled = ⵠⲆᐃⵠᐃ;
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.ⲆⲆΔⵠⵠ = (new Date).getTime();
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.label = null;
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.now = -1;
			var ⲆⵠᐃⲆ = [ΔⲆ.ᐃᐃⵠᐃΔ, ΔⲆ.ΔΔᐃⲆΔ, ΔⲆ.ΔᐃⲆⵠᐃ, ΔⲆ.ⲆΔᐃⲆΔ, ΔⲆ.ⲆⲆᐃΔΔ, ΔⲆ.ᐃΔⵠⵠⵠ, ΔⲆ.ⲆⲆΔⲆᐃ, ΔⲆ.ⵠⲆⲆΔⲆ, ΔⲆ.ΔΔᐃᐃⲆ, ΔⲆ.ᐃᐃᐃⲆΔ, ΔⲆ.ⵠᐃᐃⲆᐃ, ΔⲆ.ⲆⵠⲆΔΔ, ΔⲆ.ΔⲆⵠᐃᐃ, ΔⲆ.ᐃⵠᐃⵠᐃ, ΔⲆ.ⵠⲆᐃⲆᐃ, ΔⲆ.ⵠᐃⲆᐃΔ, ΔⲆ.ⲆΔᐃⲆⲆ, ΔⲆ.ᐃᐃⵠᐃⲆ, ΔⲆ.ᐃΔΔᐃⵠ, ΔⲆ.ΔᐃΔⲆⲆ, ΔⲆ.ⵠᐃⲆΔᐃ, ΔⲆ.ᐃΔΔⲆⵠ, ΔⲆ.ⲆᐃⵠΔⵠ, ΔⲆ.ΔᐃΔΔⲆ, ΔⲆ.ⵠΔΔΔⲆ, ΔⲆ.ΔⲆΔΔΔ, ΔⲆ.ᐃΔⵠᐃΔ, ΔⲆ.ⵠᐃⲆⵠⵠ, ΔⲆ.ΔⵠⵠⲆⲆ, ΔⲆ.ⵠⵠΔᐃΔ, ΔⲆ.ⵠΔᐃⵠᐃ, ΔⲆ.ᐃΔᐃΔⵠ, ΔⲆ.Δᐃᐃⵠⵠ, ΔⲆ.ᐃⲆⵠᐃΔ, ΔⲆ.ⲆⵠⵠⵠΔ, ΔⲆ.ⵠΔΔᐃΔ, ΔⲆ.ⲆΔⲆⲆᐃ, ΔⲆ.ⵠΔΔΔΔ, ΔⲆ.ⲆᐃⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃᐃ, ΔⲆ.ΔᐃⲆⵠⵠ, ΔⲆ.ΔⵠΔⵠΔ, ΔⲆ.ᐃᐃΔᐃⵠ, ΔⲆ.ⵠⲆⲆⲆΔ, ΔⲆ.ⵠᐃⲆᐃᐃ, ΔⲆ.ⵠᐃⵠΔⲆ, ΔⲆ.ΔΔᐃᐃᐃ, ΔⲆ.ᐃⲆΔⵠᐃ, ΔⲆ.ᐃΔⲆⲆⲆ, ΔⲆ.ⵠΔⵠᐃᐃ, ΔⲆ.ⲆⲆⲆᐃΔ];
			for (var ᐃⲆ = 0; ⲆⵠᐃⲆ.length > ᐃⲆ; ᐃⲆ++) {
				var ΔΔ = ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ⲆⵠᐃⲆ[ᐃⲆ]); - 1 != ΔΔ && ⲆΔⵠ.ᐃΔⲆᐃ.ⲆᐃⵠᐃᐃⲆᐃ(ⲆⵠᐃⲆ.length[ᐃⲆ], ΔΔ)
			}
			ⲆΔⵠ.ⵠΔᐃΔ.ⲆᐃⵠⵠⵠⲆᐃ()
		};
		this.ⵠᐃᐃⲆⵠⵠᐃⵠⲆ = function(ΔΔ, ⲆΔⵠⲆⲆᐃⵠⲆΔ, ΔᐃⵠᐃⲆᐃⵠⲆⲆ) {
			this.ⵠⵠⵠⵠᐃⵠΔ(ΔΔ, ⲆΔⵠⲆⲆᐃⵠⲆΔ * 256 + ΔᐃⵠᐃⲆᐃⵠⲆⲆ)
		};

		this.ⵠⵠⵠⵠᐃⵠΔ = function(ΔΔ, ᐃᐃⲆⲆ) {
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ = Settings.Equip.enabled ? ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ] -1 ? ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ : -1 : -1;
			ⲆΔⵠ.ᐃΔⲆᐃ.ⲆⲆⲆⲆΔⵠΔ(ΔΔ, ᐃᐃⲆⲆ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔΔ));
			ⲆΔⵠ.ⵠΔᐃΔ.ΔⵠΔ()
		};
		this.ᐃⲆⲆᐃⵠⲆΔΔⵠ = function(ΔΔ) {
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ = Settings.Equip.enabled ? ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ] -1 ? ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ : -1 : -1;
			ⲆΔⵠ.Ⲇⵠⵠⵠⵠ.wait = true;
			var ΔΔⲆⲆᐃ = ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔΔ);
			ⲆΔⵠ.ᐃΔⲆᐃ.ⲆⲆⲆⲆΔⵠΔ(ΔΔ, 1, ΔΔⲆⲆᐃ);
			0 <= ΔΔⲆⲆᐃ && !ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔΔ] && ⲆΔⵠ.ⵠΔᐃΔ.ΔⵠΔ();
			if (ΔⲆ.ᐃᐃⲆⲆΔ == ΔΔ) ⲆΔⵠ.ΔⲆᐃⲆⲆ = [ⲆΔⵠ.id]
		};
		this.ᐃⲆΔⵠᐃⲆᐃΔΔ = function() {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃΔⲆΔⵠᐃΔ[Δᐃᐃⵠᐃ].stringify([ⵠΔⵠⵠⲆ]))
		};
		this.ⲆΔᐃΔⵠᐃⵠΔⲆ = function(ⵠΔΔ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⵠⵠᐃΔⵠ[ᐃⲆⵠΔⵠⵠⲆ].stringify([2, ⵠΔΔ.ⲆΔⵠⲆⲆ, ⵠΔΔ.id]))
		};
		this.ⵠᐃⵠⲆᐃΔⲆᐃᐃ = function(ΔΔ, ᐃᐃᐃⲆⲆⲆᐃ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⵠⵠᐃΔⵠ[ᐃⵠⵠᐃⲆ].stringify([10, ΔΔ, ᐃᐃᐃⲆⲆⲆᐃ]))
		};
		this.ⲆΔⲆᐃᐃᐃⲆⲆⵠ = function() {
			var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
			if (ᐃⵠⲆ) {
				var ⲆΔⵠΔᐃ = Math.PI * ⵠΔΔΔ;
				this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⵠⵠᐃΔⵠ[ᐃⲆⵠΔⵠⵠⲆ].stringify([22, ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ, Math.floor(ⲆΔⲆⵠᐃΔᐃ * ((ᐃⵠⲆ.angle + ⲆΔⵠΔᐃ) % ⲆΔⵠΔᐃ) / ⲆΔⵠΔᐃ), ⲆΔⵠ.ⵠΔᐃΔ.mode]))
			}
		};
		this.ΔΔⲆⲆⵠ = function(ΔΔ, ᐃⲆ) {
			switch (ΔΔ) {
				case ΔⲆ.ⲆⲆⵠᐃⲆ:
				case ΔⲆ.ⲆⵠᐃΔᐃ:
				case ΔⲆ.ΔⲆⲆⵠΔ:
				case ΔⲆ.ⵠⵠΔΔⲆ:
				case ΔⲆ.ᐃⲆΔΔⵠ:
				case ΔⲆ.ⵠⲆΔᐃⵠ:
				case ΔⲆ.ΔᐃⵠⲆΔ:
				case ΔⲆ.ᐃⵠᐃⵠΔ:
				case ΔⲆ.ᐃΔⲆⲆⵠ:
				case ΔⲆ.ⲆᐃΔΔⲆ:
				case ΔⲆ.ΔⲆⲆᐃᐃ:
				case ΔⲆ.ᐃⲆⲆᐃⲆ:
				case ΔⲆ.ⲆⵠΔᐃⵠ:
				case ΔⲆ.ⲆⲆⲆⲆⲆ:
				case ΔⲆ.ΔⲆⵠⵠΔ:
				case ΔⲆ.ⵠⲆΔᐃⲆ:
				case ΔⲆ.Ⲇᐃᐃⵠⵠ:
				case ΔⲆ.ᐃᐃᐃᐃᐃ:
				case ΔⲆ.ΔᐃΔΔⵠ:
				case ΔⲆ.ΔΔⲆᐃⵠ:
				case ΔⲆ.ⵠⵠⲆᐃᐃ:
				case ΔⲆ.ᐃΔⲆᐃΔ:
				case ΔⲆ.Ⲇⵠᐃⵠⵠ:
					ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
					this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃⵠᐃᐃΔⵠᐃ[ⲆΔᐃΔⲆⵠⵠ].stringify([34, ΔΔ]));
					break;
				case ΔⲆ.ΔⵠΔⲆⵠ:
				case ΔⲆ.ᐃⵠΔⵠΔ:
				case ΔⲆ.ⲆᐃⵠΔΔ:
				case ΔⲆ.ⲆΔⵠⲆⵠ:
				case ΔⲆ.ᐃᐃⲆΔᐃ:
				case ΔⲆ.ⲆᐃⲆΔⵠ:
				case ΔⲆ.ⲆΔⵠⲆᐃ:
				case ΔⲆ.ΔⵠᐃᐃⲆ:
				case ΔⲆ.ⲆᐃⲆⵠΔ:
				case ΔⲆ.ΔⵠⲆⲆⲆ:
				case ΔⲆ.ΔᐃᐃΔⲆ:
				case ΔⲆ.ΔⲆⲆΔᐃ:
				case ΔⲆ.ⵠⵠΔⲆΔ:
				case ΔⲆ.ᐃⵠⵠᐃΔ:
				case ΔⲆ.ⵠⲆⵠᐃΔ:
				case ΔⲆ.ΔΔⵠΔᐃ:
				case ΔⲆ.ᐃⲆⵠⲆᐃ:
				case ΔⲆ.ᐃⵠⵠΔⵠ:
				case ΔⲆ.ΔⵠᐃΔΔ:
				case ΔⲆ.ᐃⲆⲆⵠᐃ:
				case ΔⲆ.ⵠⲆΔⲆΔ:
				case ΔⲆ.ⲆᐃⵠΔⲆ:
				case ΔⲆ.ⲆᐃΔⲆⲆ:
				case ΔⲆ.ΔᐃᐃⲆⲆ:
				case ΔⲆ.ⲆΔΔᐃᐃ:
				case ΔⲆ.ᐃᐃΔΔⲆ:
				case ΔⲆ.ⵠΔΔᐃⵠ:
				case ΔⲆ.ᐃⵠⲆⵠⵠ:
				case ΔⲆ.ⲆΔⵠΔⲆ:
				case ΔⲆ.ⵠᐃⵠⵠᐃ:
				case ΔⲆ.Ⲇᐃⵠᐃᐃ:
				case ΔⲆ.ΔⲆᐃⲆΔ:
				case ΔⲆ.ΔᐃⵠΔᐃ:
				case ΔⲆ.ΔⲆⲆᐃⲆ:
				case ΔⲆ.ᐃⲆΔΔᐃ:
				case ΔⲆ.ΔⵠⲆⲆⵠ:
				case ΔⲆ.ᐃᐃⵠᐃᐃ:
				case ΔⲆ.ΔⲆⲆⲆΔ:
				case ΔⲆ.ΔΔⵠᐃΔ:
				case ΔⲆ.ⲆⲆΔᐃΔ:
				case ΔⲆ.ΔⲆᐃⲆᐃ:
				case ΔⲆ.ΔⲆΔⲆⵠ:
				case ΔⲆ.ΔΔΔⵠᐃ:
				case ΔⲆ.ⲆⲆΔⵠᐃ:
				case ΔⲆ.Ⲇᐃⵠⵠᐃ:
				case ΔⲆ.ᐃΔᐃⵠᐃ:
				case ΔⲆ.Δⵠⵠⵠᐃ:
				case ΔⲆ.ⲆᐃᐃΔⵠ:
				case ΔⲆ.ᐃⲆᐃΔⵠ:
				case ΔⲆ.ΔΔΔΔⲆ:
				case ΔⲆ.ⲆⲆᐃⲆΔ:
				case ΔⲆ.ⵠᐃᐃᐃΔ:
				case ΔⲆ.ΔΔⵠΔΔ:
				case ΔⲆ.ᐃⵠⲆⲆⵠ:
				case ΔⲆ.ᐃᐃⲆⲆΔ:
				case ΔⲆ.ᐃⲆΔⵠⲆ:
					if (!ⲆΔⵠ.ΔⵠⵠⵠΔ) {
						if (ΔΔ === ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ) ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
						else ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ = ΔΔ
					}
					break;
				case ΔⲆ.ⲆⲆᐃΔΔ:
				case ΔⲆ.ⲆΔᐃⲆΔ:
				case ΔⲆ.ᐃΔⵠⵠⵠ:
				case ΔⲆ.ⲆⲆΔⲆᐃ:
				case ΔⲆ.ⵠⲆⲆΔⲆ:
				case ΔⲆ.ΔΔᐃᐃⲆ:
				case ΔⲆ.ⲆⵠⲆΔΔ:
				case ΔⲆ.ᐃᐃᐃⲆΔ:
				case ΔⲆ.ⵠᐃᐃⲆᐃ:
				case ΔⲆ.ⵠᐃⲆⵠⵠ:
				case ΔⲆ.ΔⵠⵠⲆⲆ:
				case ΔⲆ.ⵠⵠΔᐃΔ:
				case ΔⲆ.ⵠΔᐃⵠᐃ:
				case ΔⲆ.ᐃΔᐃΔⵠ:
				case ΔⲆ.Δᐃᐃⵠⵠ:
				case ΔⲆ.ᐃⲆⵠᐃΔ:
				case ΔⲆ.ΔᐃⲆⵠⵠ:
				case ΔⲆ.ΔⵠΔⵠΔ:
				case ΔⲆ.ᐃⵠᐃⵠᐃ:
				case ΔⲆ.ΔⲆⵠᐃᐃ:
				case ΔⲆ.ⵠⲆᐃⲆᐃ:
				case ΔⲆ.ⵠᐃⲆᐃΔ:
				case ΔⲆ.ⲆΔᐃⲆⲆ:
				case ΔⲆ.ⵠⵠⵠΔᐃᐃΔⲆⵠ:
				case ΔⲆ.ᐃΔΔᐃⵠ:
				case ΔⲆ.ΔᐃΔⲆⲆ:
				case ΔⲆ.ᐃᐃⵠᐃⲆ:
				case ΔⲆ.ⵠᐃⲆΔᐃ:
				case ΔⲆ.ᐃΔΔⲆⵠ:
				case ΔⲆ.ⲆᐃⵠΔⵠ:
				case ΔⲆ.ΔᐃΔΔⲆ:
				case ΔⲆ.ⵠΔΔΔⲆ:
				case ΔⲆ.ΔⲆΔΔΔ:
				case ΔⲆ.ᐃΔⵠᐃΔ:
					if (!ⲆΔⵠ.ΔⵠⵠⵠΔ) {
						ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -ⵠⲆⵠⲆ;
						var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
						if (ᐃⵠⲆ && ᐃⵠⲆ.right === ΔΔ) this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔΔᐃΔᐃ[ᐃⵠⵠᐃⲆ].stringify([34, ΔⲆ.ΔΔⲆⵠᐃ]));
						else {
							ⲆΔⵠ.ᐃᐃⵠⵠΔ.wait = ⵠᐃⵠⲆᐃ;
							this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃᐃⲆΔⲆⲆⵠ[ⲆⲆΔⵠᐃⲆᐃ].stringify([34, ΔΔ]))
						}
					}
					break;
				case ΔⲆ.ⵠⲆⲆⲆΔ:
				case ΔⲆ.ᐃᐃΔᐃⵠ:
				case ΔⲆ.ⵠᐃⲆᐃᐃ:
				case ΔⲆ.ⵠᐃⵠΔⲆ:
				case ΔⲆ.ΔᐃΔⵠⲆ:
				case ΔⲆ.ᐃⵠⵠΔᐃ:
				case ΔⲆ.ᐃⲆᐃⵠⵠ:
				case ΔⲆ.ⵠΔⲆΔᐃ:
				case ΔⲆ.ⵠᐃᐃᐃⵠ:
				case ΔⲆ.ᐃᐃⵠᐃΔ:
				case ΔⲆ.ΔΔᐃᐃᐃ:
				case ΔⲆ.ᐃⲆΔⵠᐃ:
				case ΔⲆ.ΔΔᐃⲆΔ:
				case ΔⲆ.ᐃⵠⵠⵠⵠ:
				case ΔⲆ.ⵠⵠⲆⲆΔ:
				case ΔⲆ.ⵠᐃᐃΔⵠ:
				case ΔⲆ.ⲆΔⵠᐃⲆ:
				case ΔⲆ.ᐃΔⲆⲆⲆ:
				case ΔⲆ.ⲆΔΔΔᐃ:
				case ΔⲆ.ⵠΔⵠᐃᐃ:
				case ΔⲆ.ⲆⲆⲆᐃΔ:
				case ΔⲆ.ΔⲆⵠⵠⲆ:
				case ΔⲆ.ᐃᐃⲆⵠⲆ:
				case ΔⲆ.ⲆⵠⵠⵠΔ:
				case ΔⲆ.ⵠΔΔᐃΔ:
				case ΔⲆ.ⲆΔⲆⲆᐃ:
				case ΔⲆ.ⵠΔΔΔΔ:
				case ΔⲆ.ⲆᐃⵠΔᐃ:
				case ΔⲆ.ᐃⲆⲆᐃᐃ:
					if (!ⲆΔⵠ.ΔⵠⵠⵠΔ) {
						ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -1;
						var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
						ᐃⵠⲆ && ᐃⵠⲆ.right === ΔΔ ? this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔΔᐃΔΔΔᐃ[ᐃⵠᐃⲆᐃᐃⲆ].stringify([34, ΔⲆ.ΔΔⲆⵠᐃ])) : this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔᐃⲆⵠΔⲆᐃ[ΔⲆΔΔⲆᐃⵠ].stringify([34, ΔΔ]))
					}
					break;
				case ΔⲆ.ᐃᐃⵠⲆΔ:
				case ΔⲆ.ⵠⲆⲆⲆⵠ:
				case ΔⲆ.ⵠᐃΔⲆᐃ:
				case ΔⲆ.ⲆⲆⵠⵠⵠ:
				case ΔⲆ.ⲆⵠⵠⲆΔ:
				case ΔⲆ.ΔⲆᐃᐃⵠ:
				case ΔⲆ.ⵠⵠⲆΔΔ:
				case ΔⲆ.ΔᐃⲆΔᐃ:
				case ΔⲆ.ⲆⵠⲆΔⵠ:
				case ΔⲆ.ᐃΔᐃΔᐃ:
					if (!ⲆΔⵠ.ΔⵠⵠⵠΔ) {
						ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -ⲆⲆⲆᐃ;
						var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
						this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔᐃⲆⵠΔⲆᐃ[ΔⲆΔΔⲆᐃⵠ].stringify([34, ΔΔ]))
					}
					break;
				case ΔⲆ.ⵠⲆᐃΔΔ:
				case ΔⲆ.ⲆΔⲆⵠⵠ:
				case ΔⲆ.ⵠᐃΔⵠᐃ:
				case ΔⲆ.ⲆΔᐃᐃᐃ:
				case ΔⲆ.ⵠΔⵠΔᐃ:
				case ΔⲆ.ᐃᐃΔᐃΔ:
				case ΔⲆ.ⵠⵠᐃᐃⵠ:
				case ΔⲆ.ⲆᐃᐃᐃⲆ:
				case ΔⲆ.ᐃⵠⵠⵠΔ:
				case ΔⲆ.ⵠΔᐃΔⵠ:
				case ΔⲆ.ΔᐃΔᐃⲆ:
				case ΔⲆ.ⵠᐃⵠⵠⲆ:
				case ΔⲆ.ᐃᐃᐃΔⵠ:
				case ΔⲆ.ⲆᐃᐃⲆⲆ:
				case ΔⲆ.ᐃⲆΔΔΔ:
				case ΔⲆ.ᐃΔⲆⲆΔ:
				case ΔⲆ.ⲆⲆⵠⲆΔ:
					var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
					if (ᐃⵠⲆ && ΔΔ !== ᐃⵠⲆ.ⲆΔᐃΔᐃ) ⲆΔⵠ.ⵠᐃΔⵠⲆ.wait = true;
					this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃⵠᐃᐃΔⵠᐃ[ᐃⵠⵠᐃⲆ].stringify([34, ΔΔ]));
					break;
				case ΔⲆ.ⵠΔᐃΔΔ:
				case ΔⲆ.ⵠΔᐃΔⲆ:
				case ΔⲆ.ⲆᐃΔⵠⵠ:
				case ΔⲆ.ΔᐃᐃⲆⵠ:
				case ΔⲆ.ᐃΔⲆΔⲆ:
				case ΔⲆ.ⵠΔⵠⲆⵠ:
				case ΔⲆ.ⲆⵠⵠΔⲆ:
				case ΔⲆ.ᐃⲆⲆⲆⲆ:
				case ΔⲆ.ᐃⵠΔⵠⲆ:
				case ΔⲆ.ⲆΔⲆᐃⲆ:
				case ΔⲆ.ⵠᐃⵠᐃⲆ:
				case ΔⲆ.ᐃⵠⵠⲆⲆ:
				case ΔⲆ.ᐃⲆᐃΔΔ:
				case ΔⲆ.ΔᐃᐃⲆᐃ:
				case ΔⲆ.ⵠᐃᐃΔΔ:
				case ΔⲆ.ⲆⲆᐃΔᐃ:
					this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⵠΔᐃΔⵠᐃⲆ[ⲆΔΔΔΔⲆᐃ].stringify([34, ΔΔ]));
					break
			}
		};
		this.ᐃⵠⵠⲆⲆⵠⵠⵠΔ = function(ΔΔ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⵠⵠᐃΔⵠ[ΔΔᐃᐃᐃᐃᐃ].stringify([31, ΔΔ]))
		};
		this.ⵠᐃᐃⵠⲆᐃⲆⵠⲆ = function(ΔΔ) {
			ⲆΔⵠ.Ⲇⵠⵠⵠⵠ.wait = true;
			var ᐃⲆ = ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔΔ);
			ⲆΔⵠ.ᐃΔⲆᐃ.ⲆᐃⵠᐃᐃⲆᐃ(ΔΔ, ᐃⲆ);
			ⲆΔⵠ.ⵠΔᐃΔ.ΔⵠΔ()
		};
		this.ⵠⵠᐃⲆⲆⲆⵠⵠⵠ = function(ΔΔ, ᐃⲆ) {
			Settings.AutoRecycle.last = arguments[0];
			autoFeed();
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔᐃⵠΔⲆⲆᐃ[ᐃⵠᐃⲆᐃᐃⲆ].stringify([18, ΔΔ]))
		};
		this.ⵠⵠᐃⲆⵠΔᐃⲆΔ = function(ΔΔ, ᐃⲆ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃΔⲆΔⵠᐃΔ[Δᐃᐃⵠᐃ].stringify([24, ΔΔ]))
		};
		this.ᐃⵠᐃΔⲆⵠⵠᐃᐃ = function(ΔΔ) {
			ⲆΔⵠ.Ⲇⵠⵠⵠⵠ.wait = ⲆᐃΔᐃⲆ;
			var ᐃⲆ = ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔΔ);
			ⲆΔⵠ.ᐃΔⲆᐃ.ⲆⲆⲆⲆΔⵠΔ(ΔΔ, ⲆⵠⲆ, ᐃⲆ);
			ⲆΔⵠ.ⵠΔᐃΔ.ΔⵠΔ()
		};
		this.ⵠΔⵠᐃⵠⵠᐃⵠⲆ = function(ΔⵠΔᐃ) {
			var ΔΔ = ΔⵠΔᐃ[1];
			var ᐃⲆᐃⵠ = ΔⵠΔᐃ[2];
			ⲆΔⵠ.Ⲇⵠⵠⵠⵠ.wait = true;
			var ᐃⲆ = ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔΔ);
			ⲆΔⵠ.ᐃΔⲆᐃ.ⲆⲆⲆⲆΔⵠΔ(ΔΔ, ᐃⲆᐃⵠ, ᐃⲆ);
			ⲆΔⵠ.ⵠΔᐃΔ.ΔⵠΔ()
		};
		this.ΔΔⵠⲆᐃⵠⵠΔⵠ = function() {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃΔⲆΔⵠᐃΔ[Δᐃᐃⵠᐃ].stringify([16]))
		};
		this.ᐃⲆᐃⵠⲆⵠⲆΔⲆ = function(ΔΔⲆ) {
			var ⲆΔⵠΔᐃ = ᐃᐃΔⵠ * Math.PI;
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⵠⵠᐃΔⵠ[ᐃⲆⵠΔⵠⵠⲆ].stringify([36, Math.floor((ΔΔⲆ + ⲆΔⵠΔᐃ) % ⲆΔⵠΔᐃ * 255 / ⲆΔⵠΔᐃ)]))
		};
		this.ⵠΔᐃⵠⲆⲆⵠᐃᐃ = function(ΔΔⲆ) {
			var ⲆΔⵠΔᐃ = Math.PI * ⵠᐃᐃⲆ;
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⵠⵠᐃΔⵠ[ᐃⲆⵠΔⵠⵠⲆ].stringify([0, Math.floor((ΔΔⲆ + ⲆΔⵠΔᐃ) % ⲆΔⵠΔᐃ * ΔⵠΔΔⲆⲆⵠ / ⲆΔⵠΔᐃ)]))
		};
		this.ⲆΔⲆΔⲆᐃⵠⵠⵠ = function(ⵠⲆΔΔⲆ) {
			Settings.Spectator.enabled || this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔⲆⵠΔⵠᐃⵠ[ᐃⲆⵠΔᐃⵠΔ].stringify([11, ⵠⲆΔΔⲆ]))
		};
		this.ΔⵠⵠΔⲆΔᐃⵠⲆ = function(ΔⲆΔᐃⲆᐃⲆ) {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔΔᐃΔᐃ[ᐃⵠⵠᐃⲆ].stringify([33, ΔⲆΔᐃⲆᐃⲆ]))
		};
		this.ⵠᐃⵠⲆΔⲆΔΔⲆ = function(ΔⲆΔᐃⲆᐃⲆ) {
			var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
			if (ⲆΔⵠ.ΔⵠⵠⵠΔ) {
				Math.random() > .5 ? ᐃⵠⲆ.text.push(ΔⲆΔᐃⲆᐃⲆ.substring(0, 25) + " ..." + ⲆⲆⲆⲆⵠ) : ᐃⵠⲆ.text.push(ⲆⲆⲆⲆⵠ + "... " + ΔⲆΔᐃⲆᐃⲆ.substring(ⲆᐃΔⵠ, 25))
			} else ᐃⵠⲆ.text.push(ΔⲆΔᐃⲆᐃⲆ);
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔΔᐃΔᐃ[ᐃⵠⵠᐃⲆ].stringify([15, ΔⲆΔᐃⲆᐃⲆ]))
		};
		this.ΔⲆⲆⲆⵠ = function(ᐃⵠⲆ) {
			var ΔⲆⵠᐃ = ᐃΔΔⵠ.select.Ⲇᐃᐃ;
			if (ΔⲆⵠᐃ.length == ⵠⵠⲆΔ) return;
			var ΔⵠΔᐃ = [ⲆⵠⵠⲆⲆⲆᐃ];
			var ⲆΔⵠᐃⵠ = [];
			ΔⲆᐃ.ⲆⲆᐃⲆᐃᐃΔ(ᐃⵠⲆ, {
				x: ᐃΔΔⵠ.ⲆⵠΔ.rx,
				y: ᐃΔΔⵠ.ⲆⵠΔ.ry
			});
			ΔⵠΔᐃ.push(ᐃⵠⲆ.x);
			ΔⵠΔᐃ.push(ᐃⵠⲆ.y);
			for (var ᐃⲆ = ΔᐃⲆⲆ; ΔⲆⵠᐃ.length > ᐃⲆ; ᐃⲆ++) ⲆΔⵠᐃⵠ.push(ΔⲆⵠᐃ[ᐃⲆ].ⵠⲆᐃΔⲆⵠⲆⵠⵠ);
			ΔⵠΔᐃ.push(ⲆΔⵠᐃⵠ);
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃᐃⲆΔⲆⲆⵠ[ⲆⲆΔⵠᐃⲆᐃ].stringify(ΔⵠΔᐃ))
		};
		this.ΔΔᐃΔΔΔΔ = Ⲇⵠⵠᐃ;
		this.ⲆⲆᐃⲆⵠⲆᐃ = {
			"ⲆⲆⲆⵠ": 0,
			"ᐃⲆ": 0
		};
		this.ⲆᐃⲆᐃᐃᐃⵠΔᐃ = function() {
			if (ᐃᐃᐃᐃⵠ.ΔⲆⲆᐃᐃⲆⲆΔⵠ < ⵠⲆΔⵠΔ - this.ΔΔᐃΔΔΔΔ) {
				this.ΔΔᐃΔΔΔΔ = ⵠⲆΔⵠΔ;
				var ⵠⵠᐃΔ = ⲆΔⵠ.ⲆⵠΔ;
				var ᐃⲆ = Math.floor(ⵠⵠᐃΔ.x / ᐃⲆⲆⵠⵠⵠⲆ);
				var ⲆⲆⲆⵠ = Math.floor(ⵠⵠᐃΔ.y / ⵠⵠΔΔᐃ);
				if (ᐃⲆ != this.ⲆⲆᐃⲆⵠⲆᐃ.ᐃⲆ || ⲆⲆⲆⵠ != this.ⲆⲆᐃⲆⵠⲆᐃ.ⲆⲆⲆⵠ) {
					this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ΔᐃⲆⵠΔⲆᐃ[ᐃⵠᐃⲆᐃᐃⲆ].stringify([28, Math.floor(-ⵠⵠᐃΔ.x), Math.floor(-ⵠⵠᐃΔ.y)]));
					this.ⲆⲆᐃⲆⵠⲆᐃ.ᐃⲆ = ᐃⲆ;
					this.ⲆⲆᐃⲆⵠⲆᐃ.ⲆⲆⲆⵠ = ⲆⲆⲆⵠ
				}
			}
		};
		this.ⲆⵠⲆᐃⲆΔⲆ = 0;
		this.ᐃᐃΔᐃᐃⲆΔⲆⲆ = function() {
			ⵠⲆΔⵠΔ - this.ⲆⵠⲆᐃⲆΔⲆ > ᐃᐃᐃᐃⵠ.ᐃⵠᐃᐃΔΔᐃΔᐃ && (this.ⲆⵠⲆᐃⲆΔⲆ = ⵠⲆΔⵠΔ, this.ping())
		};
		this.ΔᐃᐃᐃⵠⵠⵠⲆΔ = function() {
			ⲆΔⵠ.reconnect.enabled = true;
			if (Ⲇᐃⵠ.ᐃⵠⲆᐃᐃ != Ⲇᐃⵠ.Δᐃⵠᐃ.ᐃⵠⲆᐃᐃ) return;
			Ⲇᐃⵠ.ᐃⵠⲆᐃᐃ++;
			Ⲇᐃⵠ.Δᐃⵠᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[307]]();
			ΔΔᐃⲆ.connect()
		};
		this.ᐃⲆΔᐃⵠΔᐃΔⲆ = function(ΔⵠⵠΔ) {
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ᐃΔⲆⵠΔⵠᐃ]);
			for (var ᐃⲆ = 1; ΔⵠⵠΔ.length > ᐃⲆ; ᐃⲆ++) ⲆΔⵠ.ΔⲆᐃⲆⲆ.push(ΔⵠⵠΔ[ᐃⲆ])
		};
		this.ᐃᐃⵠⲆᐃⲆⵠΔⵠ = function(ΔΔ) {
			this.Δᐃᐃᐃⵠ(ⵠⲆΔ.ΔΔᐃΔ[ΔΔ].ⵠⲆⵠΔⵠ + ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃΔΔΔᐃ]);
			ⲆΔⵠ.ΔⲆᐃⲆⲆ.push(ΔΔ);
			var ⲆⵠⲆⲆᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[95]);
			ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ != -1 && ᐃ[376] == ⲆⵠⲆⲆᐃ.style.display && ᐃⲆΔⵠ.ΔᐃᐃⵠΔ[ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ].action()
		};
		this.ΔΔΔⲆΔᐃΔᐃⲆ = function() {
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ⲆΔΔΔⵠᐃⵠ]);
			ⲆΔⵠ.ⲆⲆᐃⵠΔ.wait = true;
			ⲆΔⵠ.ΔⲆᐃⲆⲆ = [];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[95]).style.display = ᐃ[371]
		};
		this.ᐃᐃᐃⲆⲆⵠⵠΔⲆ = function(ΔΔ) {
			if (ΔΔ == ⲆΔⵠ.id) {
				this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.Δᐃⵠᐃᐃᐃᐃ]);
				ⲆΔⵠ.ⲆⲆᐃⵠΔ.wait = true;
				ⲆΔⵠ.ΔⲆᐃⲆⲆ = [];
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[95]).style.display = ᐃ[371]
			} else {
				this.Δᐃᐃᐃⵠ(ⵠⲆΔ.ΔΔᐃΔ[ΔΔ].ⵠⲆⵠΔⵠ + ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃᐃⵠᐃΔⲆ]);
				for (var ᐃⲆ = Ⲇⵠᐃ; ᐃⲆ < ⲆΔⵠ.ΔⲆᐃⲆⲆ.length; ᐃⲆ++) {
					if (ΔΔ == ⲆΔⵠ.ΔⲆᐃⲆⲆ[ᐃⲆ]) {
						ⲆΔⵠ.ΔⲆᐃⲆⲆ.splice(ᐃⲆ, 1);
						break
					}
				}
				var ⲆⵠⲆⲆᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[95]);
				if (-ᐃⲆⲆ != ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ && ⲆⵠⲆⲆᐃ.style.display == ᐃ[376]) ᐃⲆΔⵠ.ΔᐃᐃⵠΔ[ᐃⲆΔⵠ.ΔᐃⲆⲆᐃ].action()
			}
		};
		this.ᐃᐃⲆᐃⵠᐃⵠⲆᐃ = function(ⲆⲆΔᐃ) {
			if (!Settings.AutoRespawn.enabled && getUserProperty("alive") != true) {
			ⲆΔⵠ.ᐃΔⵠⵠᐃ = ⵠⲆᐃⵠⵠ;
		}
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃⵠᐃΔ]);
			if (this.Δᐃⵠᐃ.ᐃⵠⲆᐃᐃ != this.ᐃⵠⲆᐃᐃ) return;
			this.ᐃⵠⲆᐃᐃ++;
			ᐃⲆΔⵠ.ⲆⵠᐃⵠΔ(ⲆΔⲆⵠ.ΔᐃᐃⵠⲆ);
			this.Δᐃⵠᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[307]]()
		};
		this.ᐃⵠᐃΔΔⲆⵠⲆΔ = function(ΔⲆⵠΔⲆᐃΔ, ΔⵠΔᐃ) {
			Settings.Death.x = getWorldProperty("fast_units")[getUserProperty("uid")].x
			Settings.Death.y = getWorldProperty("fast_units")[getUserProperty("uid")].y
			ⲆΔⵠ.ᐃΔⵠⵠᐃ = Ⲇⵠⵠⵠᐃ;
			var ΔⲆΔᐃⵠ = new Uint16Array(ΔⵠΔᐃ);
			var ⲆᐃᐃᐃⲆᐃᐃⵠⲆ = new Uint32Array(ΔⵠΔᐃ);
			ⲆΔⵠ.ᐃΔⲆΔⲆΔᐃ.ΔⲆⵠΔⲆᐃΔ = ΔⲆᐃⵠ[ΔⲆⵠΔⲆᐃΔ][Math.floor(Math.random() * ΔⲆᐃⵠ[ΔⲆⵠΔⲆᐃΔ].length)];
			ⲆΔⵠ.ᐃΔⲆΔⲆΔᐃ.ᐃᐃᐃΔᐃ = ΔⲆᐃ.ⵠⲆⲆⵠⵠΔᐃ(ⵠⲆΔ.ΔΔᐃΔ[ⲆΔⵠ.id].ᐃᐃᐃΔᐃ);
			ⲆΔⵠ.ᐃΔⲆΔⲆΔᐃ.ⵠᐃᐃΔᐃΔᐃ = ΔⲆᐃ.ⵠⲆⲆⵠⵠΔᐃ(ⲆᐃᐃᐃⲆᐃᐃⵠⲆ[1]);
			ⲆΔⵠ.ᐃΔⲆΔⲆΔᐃ.ΔᐃΔⵠⵠ = ΔⲆΔᐃⵠ[ᐃΔⵠΔ];
			this.Δᐃᐃᐃⵠ(ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆΔΔΔⲆ]);
			if (Settings.AutoRespawn.enabled) {
					getClientProperty("steal_token") && getClientProperty("steal_token").bind(window.client)()
					mapping.waiting = false;
					setTimeout(() => {
						mapping[85](mapping.ΔⲆⲆⵠΔᐃᐃ());
					}, 40);
				}
				else {
			if (this.ᐃⵠⲆᐃᐃ != this.Δᐃⵠᐃ.ᐃⵠⲆᐃᐃ) return;
			this.ᐃⵠⲆᐃᐃ++;
			ᐃⲆΔⵠ.ⲆⵠᐃⵠΔ(ⵠΔⲆⵠΔⵠⵠ.ΔᐃᐃⵠⲆ);
			this.Δᐃⵠᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[307]]()
			}
		};
		this.ping = function() {
			this.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ᐃᐃᐃᐃⵠ.ⲆΔⲆᐃⲆⲆⲆⲆⲆ)
		};
		this.ᐃᐃᐃⵠᐃⵠᐃⵠᐃ = function() {
			ⵠᐃⵠⲆ == this.Δᐃⵠᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] && (this.ⲆΔᐃⵠᐃⵠΔ -= ᐃᐃᐃᐃⵠ.ⵠᐃⵠᐃᐃᐃⵠ)
		};
		this.ⵠΔⲆⲆⵠΔⵠᐃᐃ = function() {
			if (ᐃⵠᐃⵠ > ᐃᐃᐃᐃⵠ.ᐃΔⲆΔⵠⵠᐃᐃⵠ) this.ⲆΔᐃⵠᐃⵠΔ = ⵠⲆΔⵠΔ;
			ⵠⲆΔⵠΔ - this.ⲆΔᐃⵠᐃⵠΔ > ᐃᐃᐃᐃⵠ.ⵠᐃⵠᐃᐃᐃⵠ && (this.ⲆΔᐃⵠᐃⵠΔ = ⵠⲆΔⵠΔ, this.ΔᐃᐃᐃⵠⵠⵠⲆΔ())
		};
		this.ᐃⲆⵠᐃᐃᐃⲆⲆᐃ = function(ⵠⵠⵠᐃ) {
			ΔΔⵠⲆⲆⵠⵠ++;
			clearTimeout(this.ⲆᐃⲆᐃⲆ);
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("commandMainBoxName")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = this.ΔᐃⲆᐃΔ[this.ᐃⲆⲆⵠΔ][this.ⲆᐃᐃᐃⲆΔΔ[this.ᐃⲆⲆⵠΔ]]["a"];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("exploreForest").src = "img/forest-leaf.png";
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("exploreWinter").src = "img/winter-flake.png";
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("exploreDesert").src = "img/desert-cactus.png";
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("exploreLava").src = "img/lava-volcano.png";
			this.ⲆΔᐃⵠᐃⵠΔ = ⵠⲆΔⵠΔ;
			ⲆΔⵠ.ⵠΔⲆΔ.ⵠⲆⲆᐃⵠ.ᐃᐃΔΔⵠ = ⲆΔⵠ.ⵠΔⲆΔ.ⵠⲆⲆᐃⵠ.ᐃᐃⲆᐃⲆ;
			ⲆΔⵠ.ⵠΔⲆΔ.ⲆⲆᐃⲆⵠΔⵠ.ᐃᐃΔΔⵠ = ⲆΔⵠ.ⵠΔⲆΔ.ⲆⲆᐃⲆⵠΔⵠ.ᐃᐃⲆᐃⲆ;
			ⲆΔⵠ.ⵠΔⲆΔ.ⵠⲆᐃⲆⲆⵠᐃ.ᐃᐃΔΔⵠ = ⲆΔⵠ.ⵠΔⲆΔ.ⵠⲆᐃⲆⲆⵠᐃ.ᐃᐃⲆᐃⲆ;
			ⲆΔⵠ.ⵠΔⲆΔ.ⲆᐃⵠᐃⲆΔⲆ.ᐃᐃΔΔⵠ = ⲆΔⵠ.ⵠΔⲆΔ.ⲆᐃⵠᐃⲆΔⲆ.ᐃᐃⲆᐃⲆ;
			ⲆΔⵠ.ⵠΔⲆΔ.ⵠΔΔⵠᐃ.ᐃᐃΔΔⵠ = ⲆΔⵠ.ⵠΔⲆΔ.ⵠΔΔⵠᐃ.ᐃᐃⲆᐃⲆ;
			ⲆΔⵠ.ⵠΔⲆΔ.ᐃᐃⵠᐃ = ΔΔⵠ;
			ⲆΔⵠ.ⵠΔⲆΔ.c = 1;
			ⲆΔⵠ.ⵠΔⲆΔ.ΔⵠⲆ = ᐃⵠᐃᐃ;
			ⲆΔⵠ.ⵠΔⲆΔ.ᐃᐃⲆ = 1;
			ⲆΔⵠ.ⵠΔⲆΔ.ⵠΔⲆ = 1;
			ⲆΔⵠ.ⵠΔⲆΔ.ⲆⵠⲆΔⲆᐃⵠ = 1;
			ⲆΔⵠ.ⲆΔⵠΔⲆᐃⲆ = false;
			ᐃⲆΔⵠ.ΔⲆⵠΔⵠ.display = 0;
			ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ = [];
			ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ = [];
			ⲆΔⵠ.ᐃΔⲆᐃ.max = ᐃΔᐃᐃ.ⵠΔⵠⵠᐃΔᐃ;
			ⲆΔⵠ.ᐃΔⲆᐃ.ⲆᐃⵠᐃᐃΔⲆ = ⵠᐃⵠ;
			ⲆΔⵠ.ᐃΔⲆᐃ.ᐃΔⲆΔΔ = ⲆⲆᐃⲆ;
			ⲆΔⵠ.ᐃΔⲆᐃ.id = -ⲆⲆⲆᐃ;
			ᐃⲆΔⵠ.ΔᐃΔⲆΔⵠⲆ = ΔᐃⵠⲆ;
			ᐃⲆΔⵠ.ΔΔⵠⲆᐃΔⲆ = 1;
			ᐃⲆΔⵠ.ᐃⵠΔⲆⲆⵠΔ = ΔⲆⵠⲆ;
			ᐃⲆΔⵠ.ⲆΔΔᐃⲆᐃᐃ = ⲆⲆΔⵠ;
			ⲆΔⵠ.ᐃΔⵠⵠᐃ = ⵠⲆᐃⵠᐃ;
			ⲆΔⵠ.ᐃΔⲆᐃ.ΔᐃΔᐃⲆⵠᐃ.stop();
			if (!engineActive) {
				initEngine();
				engineActive = true
			}
			ⲆΔⵠ.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ = [];
			ⲆΔⵠ.ⵠΔᐃΔ.ᐃΔΔᐃᐃ = false;
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⵠᐃⵠⵠⵠⵠΔⵠ = false;
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ = -ᐃΔⵠΔ;
			ⲆΔⵠ.ⵠΔᐃΔ.id = -ⵠᐃᐃ;
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⵠΔⵠΔ = ΔⲆⲆΔⵠ;
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠᐃᐃ = Ⲇⵠⵠⵠᐃ;
			ⲆΔⵠ.ⵠΔᐃΔ.ᐃⵠΔΔⲆ = ⲆⵠΔΔⵠ;
			ⲆΔⵠ.ⵠΔᐃΔ.ΔΔΔⵠⲆⵠᐃ = ᐃΔⵠΔᐃ;
			ⲆΔⵠ.ⵠΔᐃΔ.timeout = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, ᐃⵠᐃᐃ, ΔᐃⲆⲆ, ⲆⲆᐃⵠ, ᐃⵠᐃᐃ);
			ⲆΔⵠ.ᐃᐃⵠⵠΔ.timeout = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 1, 0, 1 / ΔⵠⲆᐃΔ, ⲆⲆᐃⵠ);
			ⲆΔⵠ.ᐃᐃⵠⵠΔ.wait = false;
			ⲆΔⵠ.ⵠᐃΔⵠⲆ.timeout = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆᐃΔᐃⵠ, ⵠⵠⵠ, 1, 0, ᐃⵠᐃᐃ / ⵠᐃⵠΔᐃ, 1);
			ⲆΔⵠ.ⵠᐃΔⵠⲆ.wait = false;
			ⲆΔⵠ.Ⲇⵠⵠⵠⵠ.timeout = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ⵠΔⵠᐃ, ᐃⵠⵠⵠ, 0, ΔΔⵠ, ΔᐃⵠⲆ);
			ⲆΔⵠ.Ⲇⵠⵠⵠⵠ.wait = false;
			ⲆΔⵠ.ⲆⲆᐃⵠΔ.id = -1;
			ⲆΔⵠ.ⲆⲆᐃⵠΔ.ⲆⲆΔᐃ = -ⵠⵠⵠⲆ;
			ⲆΔⵠ.ⲆⲆᐃⵠΔ.wait = false;
			ⲆΔⵠ.ⲆⲆᐃⵠΔ.timeout = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 1, ᐃⲆΔᐃ, 1 / 30, 1);
			ᐃⲆΔⵠ.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.x = -1;
			ᐃⲆΔⵠ.ᐃΔᐃΔΔ.Ⲇⵠⵠᐃⵠ.y = -Δⵠᐃ;
			ᐃⲆΔⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false;
			ᐃⲆΔⵠ.ᐃΔᐃΔΔ.ΔΔᐃΔ = [];
			ⲆΔⵠ.ⲆᐃⵠⵠΔ.enabled = false;
			ⵠⲆΔ.mode = ⵠⵠⵠᐃ[1];
			if (ΔⲆⲆΔⲆ !== ⵠⵠⵠᐃ[ⵠⵠᐃΔᐃ] && ⵠⵠⵠᐃ[21] !== ⵠᐃⲆⵠⲆ) {
				ⵠⲆΔ.ᐃᐃΔⵠᐃ = ⵠⵠⵠᐃ[20];
				ⵠⲆΔ.ΔΔΔⲆⲆ = ⵠⵠⵠᐃ[21];
				ⵠⲆΔ.w = ⵠⲆΔ.ΔᐃᐃᐃΔⲆⲆ * ⵠⲆΔ.ᐃᐃΔⵠᐃ;
				ⵠⲆΔ.ΔⵠⲆ = ⵠⲆΔ.ⲆⲆΔᐃᐃᐃⵠ * ⵠⲆΔ.ΔΔΔⲆⲆ
			}
			ⵠⲆΔ.ᐃⵠᐃⵠΔⵠⲆ = ⵠⵠⵠᐃ[22];
			ⵠⲆΔ.ⵠΔᐃⵠⵠ = ⵠⵠⵠᐃ[23];
			Ⲇᐃⵠ.ⵠΔΔⲆΔⵠᐃ(ⵠⵠⵠᐃ[24]);
			Ⲇᐃⵠ.ⲆΔΔΔⵠΔᐃᐃΔ(ⵠⵠⵠᐃ[25]);
			ⲆΔⵠ.ΔⲆΔᐃᐃ.ᐃᐃⵠΔᐃ = ⵠⵠⵠᐃ[26];
			ⲆΔⵠ.ⵠΔⲆΔΔΔᐃ = 0;
			ⲆΔⵠ.ⵠΔⲆⲆⵠ.ᐃᐃⵠΔᐃ = ⵠⵠⵠᐃ[27];
			ⵠⲆΔ.ⲆⲆᐃⵠⲆᐃⲆⵠᐃ(ⵠⵠⵠᐃ[19]);
			ⵠⲆΔ.time = ⵠⵠⵠᐃ[ⲆⲆⲆᐃⵠ];
			ⵠⲆΔ.ᐃᐃⵠΔⲆ.ΔΔΔⲆⵠ = ⵠⵠⵠᐃ[ⵠᐃⵠΔΔ];
			ⵠⲆΔ.ᐃᐃⵠΔⲆ.ᐃⵠΔᐃᐃ = (new Date).getTime();
			ᐃⲆΔⵠ.ᐃΔΔᐃ.ΔⵠᐃᐃΔⵠⵠ = ⵠⵠⵠᐃ[ΔΔⲆᐃΔΔⲆ];
			ⵠⲆΔ.transition = ᐃⵠᐃΔⵠ;
			ⲆΔⵠ.ⵠΔⵠ = ⵠⵠⵠᐃ[ⵠⲆᐃⵠ];
			ᐃⲆΔⵠ.ᐃΔΔᐃ.reset();
			ⲆΔⵠ.ΔⲆᐃⲆⲆ = ⵠⵠⵠᐃ[ⵠΔΔᐃⲆ];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆⲆᐃⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔⲆⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆΔᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⵠⲆᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠΔΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠⲆⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⲆΔᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆΔⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠⲆᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠᐃᐃⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆⵠΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃΔⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠΔⲆΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⵠᐃΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆⵠᐃΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠΔᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆΔⲆΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠΔⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃΔⲆⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃⲆⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠΔΔᐃⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⲆⵠⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠΔⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃⵠⵠᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.Ⲇᐃⵠᐃᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃⲆΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⵠΔⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠᐃΔΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⲆⵠᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠΔⵠΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⵠΔᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆᐃⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆΔΔᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠΔⲆⲆᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔⵠⲆⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⵠⵠⲆΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃᐃⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠⲆΔΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆΔᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠⵠⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⲆΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠⵠΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔⵠⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⲆⲆⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃᐃⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠΔΔⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠⵠᐃᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃᐃΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.Δᐃⵠⵠⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔΔⲆᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆⵠⵠⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆΔⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃΔᐃᐃⵠΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔᐃⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃᐃΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⵠⲆⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃⵠᐃᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆⵠⵠᐃΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆⲆᐃⵠΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⵠⵠᐃⵠΔⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆⲆΔⲆΔᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⲆⵠⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔᐃᐃᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⲆᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⲆⵠΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⵠΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⵠᐃᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆⲆΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔΔᐃᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠᐃΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆΔᐃΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃΔΔⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⲆⲆΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆΔⵠⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃⲆᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆΔⲆⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔΔⵠᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆΔⵠᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.Ⲇᐃⵠⵠᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔᐃⵠᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.Δⵠⵠⵠᐃ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃΔⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆᐃΔⵠ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆᐃⲆΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔΔΔⲆ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃᐃᐃΔ] = [];
			ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠΔΔ] = [];
			ⵠⲆΔ.ⲆⵠᐃⵠⲆ = [];
			ⵠⲆΔ.ⵠⲆΔΔᐃⵠΔ = ⵠⵠⵠᐃ[7];
			ⲆΔⵠ.id = ⵠⵠⵠᐃ[ᐃⵠⲆΔⵠΔⵠ];
			ⲆΔⵠ.ᐃⲆᐃⲆ = ⵠⲆΔ.ⵠⲆΔΔᐃⵠΔ * ⲆΔⵠ.id;
			if (ⵠⲆⵠᐃ.loaded) {
				ⵠⲆⵠᐃ.ΔΔᐃΔ[Δⵠⵠ].ᐃⲆᐃⲆ = ⲆΔⵠ.ᐃⲆᐃⲆ;
				ⵠⲆⵠᐃ.ΔΔᐃΔ[ⵠⵠᐃ].ΔⲆⵠⲆᐃⲆΔ = 0
			}
			ᐃⵠᐃⲆᐃ.ᐃΔⵠⲆᐃⲆΔ();
			ⲆΔⵠ.ⲆⵠΔ.ᐃⲆⵠΔⵠ(ⵠⵠⵠᐃ[3], ⵠⵠⵠᐃ[ⲆΔⲆᐃⵠ]);
			ⵠⲆΔ.ΔΔᐃΔ = [];
			var ΔΔᐃΔ = ⵠⲆΔ.ΔΔᐃΔ;
			for (var ᐃⲆ = Ⲇⵠᐃ; ⵠⵠⵠᐃ[ⲆⲆᐃᐃⲆⵠⲆ] > ᐃⲆ; ᐃⲆ++) ΔΔᐃΔ.push(new ᐃΔΔᐃⵠⲆᐃΔΔ);
			for (var ᐃⲆ = 0, ᐃᐃⵠᐃ = ⵠⵠⵠᐃ[4]; ᐃᐃⵠᐃ.length > ᐃⲆ; ᐃⲆ++) {
				var ᐃⵠⲆ = ΔΔᐃΔ[ᐃᐃⵠᐃ[ᐃⲆ]["i"]];
				ᐃⵠⲆ.ⵠⲆⵠΔⵠ = ᐃᐃⵠᐃ[ᐃⲆ]["n"];
				ᐃⵠⲆ.ⵠⲆᐃᐃ = ᐃᐃⵠᐃ[ᐃⲆ]["s"];
				ᐃⵠⲆ.ⵠΔⵠⲆⲆ = ᐃᐃⵠᐃ[ᐃⲆ]["a"];
				ᐃⵠⲆ.ᐃΔⲆⵠⲆ = ᐃᐃⵠᐃ[ᐃⲆ]["c"];
				ᐃⵠⲆ.ⲆⵠᐃⲆᐃ = ᐃᐃⵠᐃ[ᐃⲆ]["b"];
				ᐃⵠⲆ.ΔᐃΔⵠΔ = ᐃᐃⵠᐃ[ᐃⲆ]["d"];
				ᐃⵠⲆ.ᐃΔⲆⲆΔΔΔ = ᐃᐃⵠᐃ[ᐃⲆ]["g"];
				ᐃⵠⲆ.level = ᐃᐃⵠᐃ[ᐃⲆ]["l"];
				ᐃⵠⲆ.ᐃᐃᐃΔᐃ = ΔⲆᐃ.ⲆⵠⵠΔΔⲆᐃ(ᐃᐃⵠᐃ[ᐃⲆ]["p"]);
				ᐃⵠⲆ.ᐃΔⵠⵠᐃ = true;
				if (1 === ᐃⲆⲆⵠΔᐃⵠ) ᐃⵠⲆ.ⵠⲆⵠΔⵠ += "|" + ᐃᐃⵠᐃ[ᐃⲆ]["i"]
			}
			ⲆΔⵠ.ⲆⵠᐃΔⵠ.sort();
			ⵠⲆΔ.mode === ᐃΔᐃᐃ.ⲆⵠⵠΔΔⲆⵠ && ᐃ[520] === ⵠⲆΔ.ΔΔᐃΔ[ⲆΔⵠ.id].ⵠⲆⵠΔⵠ ? ⲆΔⵠ.ΔᐃⲆΔᐃⲆᐃ = ΔᐃᐃⲆᐃΔΔ : ⲆΔⵠ.ΔᐃⲆΔᐃⲆᐃ = ⲆⵠΔΔⵠ;
			ⵠⲆΔ.mode === ᐃΔᐃᐃ.ᐃΔΔΔᐃ && ⵠⲆΔ.ΔΔᐃΔ[ⲆΔⵠ.id].ⵠⲆᐃᐃ === ᐃΔᐃᐃ.ΔⵠᐃⲆΔΔⲆ ? ⲆΔⵠ.ΔⵠⵠⵠΔ = true : ⲆΔⵠ.ΔⵠⵠⵠΔ = false;
			if (ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ === ⵠⲆΔ.mode && ᐃΔᐃᐃ.ⲆⵠⵠⵠⵠΔⲆ === ⵠⲆΔ.ΔΔᐃΔ[ⲆΔⵠ.id].ⵠⲆᐃᐃ) ⲆΔⵠ.ⲆⵠΔⲆⵠΔⲆ = ᐃΔⲆΔⵠ;
			else ⲆΔⵠ.ⲆⵠΔⲆⵠΔⲆ = false;
			ᐃΔⲆⲆ.set("starve_token", ⲆΔⵠ.ΔᐃⲆΔΔ);
			if (ⵠⵠⲆΔ === ⵠⵠⵠᐃ[Ⲇⵠᐃᐃᐃ]) {
				ⲆΔⵠ.ⲆⵠΔⲆΔ.ⲆⲆΔⵠⵠ = ⵠⵠᐃ;
				ᐃⲆΔⵠ.ᐃΔΔᐃ.restore(ⵠⵠⵠᐃ[17]);
				var ᐃΔⲆᐃ = ⵠⵠⵠᐃ[ⲆⵠⲆᐃᐃⵠⲆ];
				if (ᐃΔⲆᐃ[ΔⲆ.ⲆⵠⲆΔ]) ⲆΔⵠ.ᐃΔⲆᐃ.ⲆⲆᐃⵠΔᐃⲆ(1, 0);
				for (var ᐃⲆ = Ⲇⵠⵠᐃ; ᐃΔⲆᐃ.length > ᐃⲆ; ᐃⲆ++) {
					if (ᐃΔⲆᐃ[ᐃⲆ]) {
						if (ΔⲆ.ⲆⵠⲆΔ == ᐃⲆ) continue;
						else if (ΔⲆ.ΔΔⲆⵠᐃ == ᐃⲆ) continue;
						else this.ᐃᐃⲆⵠᐃⵠⲆ([ⵠᐃⵠ, ᐃⲆ, ᐃΔⲆᐃ[ᐃⲆ]])
					}
				}
				ⲆΔⵠ.ⲆⵠΔⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃΔᐃⲆΔ
			} else {
				if (ⵠⲆΔ.mode === ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ) this.ᐃᐃⲆⵠᐃⵠⲆ([ⵠⵠⵠ, ΔⲆ.ⵠⲆΔᐃΔ, ⲆⲆᐃⵠ]);
				else if (ⵠⲆΔ.mode === ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ) {
					if (ⲆΔⵠ.ⲆⵠΔⲆⵠΔⲆ) this.ᐃᐃⲆⵠᐃⵠⲆ([ΔᐃⲆⲆ, ΔⲆ.ΔⲆΔⲆⵠ, 4]);
					else this.ᐃᐃⲆⵠᐃⵠⲆ([Ⲇⵠᐃ, ΔⲆ.ΔⵠᐃᐃⲆ, 3])
				}
				if (ⵠⲆΔ.mode === ᐃΔᐃᐃ.ⵠΔᐃⵠΔ || ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ === ⵠⲆΔ.mode || ⵠⲆΔ.mode === ᐃΔᐃᐃ.ΔⲆⲆᐃⵠ || ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ === ⵠⲆΔ.mode) {
					ⲆΔⵠ.ⲆⵠΔⲆΔ.ⲆⲆΔⵠⵠ = (new Date).getTime();
					ⲆΔⵠ.ⲆⵠΔⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ΔᐃᐃⲆᐃΔΔ;
					ⲆΔⵠ.ⲆⵠΔⲆΔ.value = ⵠⵠⵠᐃ[ⲆᐃⲆⲆᐃⲆΔ];
					ᐃⲆΔⵠ.ⲆⵠΔⲆΔ.ᐃⵠΔᐃᐃ()
				} else {
					ⲆΔⵠ.ⲆⵠΔⲆΔ.ⲆⲆΔⵠⵠ = Ⲇⵠᐃ;
					ⲆΔⵠ.ⲆⵠΔⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false;
					ⲆΔⵠ.ⲆⵠΔⲆΔ.value = ⵠΔⵠᐃ
				}
				ⲆΔⵠ.ⵠᐃⲆᐃⲆᐃΔ = ⵠⵠⵠᐃ[12][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]]()
			}
			Timers.HealTimer = (new Date).getTime();
			Timers.GaugeTimer = (new Date).getTime();
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.enabled = ⵠⵠⵠᐃ[ᐃⵠⵠᐃⵠ];
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.ⲆⲆΔⵠⵠ = -1;
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.label = null;
			ⲆΔⵠ.ⲆⲆⵠⲆⲆ.now = -ⲆⵠⲆ;
			ᐃΔⲆⲆ.set("starve_token_id", ⲆΔⵠ.ⵠᐃⲆᐃⲆᐃΔ);
			if (ⲆΔⵠ.reconnect.enabled) {
				ⲆΔⵠ.reconnect.rotate = 0;
				ⲆΔⵠ.reconnect.enabled = false
			} else {
				ⲆΔⲆⵠ.ⲆⵠᐃⵠΔ(ᐃⲆΔⵠ.ΔᐃᐃⵠⲆ);
				if (ga) ga(ᐃ[299], ᐃ[51], ᐃ[182], ᐃ[23], "S" + ⲆΔⲆⵠ.ⵠⲆᐃᐃ + "A" + ⲆΔⲆⵠ.ⵠΔⵠⲆⲆ)
			}
		};
		this.connect = function() {
			Ⲇᐃⵠ.ⵠᐃᐃⵠΔⲆΔ = Δⵠⵠ;
			Ⲇᐃⵠ.ⵠᐃⲆᐃⵠᐃⵠ()
		};
		this.ᐃΔⵠⵠⵠᐃΔ = [];
		this.ⲆⲆⵠᐃΔⲆᐃⲆΔ = function(ᐃⵠⲆᐃᐃⲆᐃ) {
			const ᐃⵠᐃΔᐃ = Ⲇᐃⵠ.ᐃⵠⲆᐃⲆ.filter((Ⲇᐃ => Ⲇᐃ[ᐃ[324]] === ᐃⵠⲆᐃᐃⲆᐃ));
			const regions = {};
			for (let ᐃⲆ = Ⲇⵠᐃ; ᐃⵠᐃΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
				const ΔⵠΔⲆⲆ = ᐃⵠᐃΔᐃ[ᐃⲆ];
				const ⵠⵠΔⵠⵠ = ΔⵠΔⲆⲆ["r"];
				if (ⵠⵠΔⵠⵠ === undefined) continue;
				if (ᐃⲆⲆⲆᐃ === regions[ⵠⵠΔⵠⵠ]) regions[ⵠⵠΔⵠⵠ] = [];
				regions[ⵠⵠΔⵠⵠ].push(ΔⵠΔⲆⲆ)
			}

			function ΔᐃⲆΔΔΔⲆ(ⵠⵠΔⵠⵠ) {
				Ⲇᐃⵠ.ᐃΔⵠⵠⵠᐃΔ[ᐃⵠⲆᐃᐃⲆᐃ] = ⵠⵠΔⵠⵠ;
				const ᐃⵠᐃΔᐃ = regions[ⵠⵠΔⵠⵠ];
				const ΔⵠΔⲆⲆ = ᐃⵠᐃΔᐃ[Math.floor(Math.random() * ᐃⵠᐃΔᐃ.length)];
				Ⲇᐃⵠ.ᐃⵠᐃⲆⲆⲆΔ({
					domain: ΔⵠᐃΔᐃΔᐃ,
					is_tls: 1,
					id: ΔⵠΔⲆⲆ[ᐃ[321]],
					p: ΔⵠΔⲆⲆ["p"]
				})
			}
			if (Ⲇᐃⵠ.ᐃΔⵠⵠⵠᐃΔ[ᐃⵠⲆᐃᐃⲆᐃ] !== ⵠᐃⲆⵠⲆ) {
				ΔᐃⲆΔΔΔⲆ(Ⲇᐃⵠ.ᐃΔⵠⵠⵠᐃΔ[ᐃⵠⲆᐃᐃⲆᐃ]);
				return
			}
			let ⵠⵠᐃᐃΔᐃᐃ = 1;

			function ⵠⲆⲆⲆᐃⵠⲆⲆⵠ() {
				if (ⵠⵠᐃᐃΔᐃᐃ === 0) return;
				ⵠⵠᐃᐃΔᐃᐃ = 0;
				const ΔᐃⵠᐃⲆ = ⲆⵠᐃΔᐃⵠⲆ.Object.keys(regions);
				const ᐃᐃⵠΔⵠᐃΔ = Math.floor(Math.random() * ΔᐃⵠᐃⲆ.length);
				const ᐃⵠⲆⵠΔ = ΔᐃⵠᐃⲆ[ᐃᐃⵠΔⵠᐃΔ];
				ΔᐃⲆΔΔΔⲆ(ᐃⵠⲆⵠΔ)
			}

			function ⵠᐃⵠⵠΔᐃⲆ(ᐃⵠᐃΔᐃ) {
				const ⲆⲆΔⲆⵠΔΔ = new ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[66]];
				const ΔⵠΔⲆⲆ = ᐃⵠᐃΔᐃ[0];
				const ⵠⵠᐃᐃⵠΔⲆ = ΔⵠΔⲆⲆ["p"];
				const ⵠⵠΔⵠⵠ = ΔⵠΔⲆⲆ["r"];
				const ⵠⵠⵠΔᐃᐃⲆ = ⵠⵠᐃᐃⵠΔⲆ[Math.floor(Math.random() * ⵠⵠᐃᐃⵠΔⲆ.length)];
				ⲆⲆΔⲆⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], "https://" + ⵠⵠⵠΔᐃᐃⲆ + "." + ΔⵠᐃΔᐃΔᐃ + "/", true);
				ⲆⲆΔⲆⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
					if (ⲆⲆΔⲆⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] === ᐃᐃᐃᐃΔ) {
						if (ᐃⲆΔᐃ === ⵠⵠᐃᐃΔᐃᐃ) return;
						ⵠⵠᐃᐃΔᐃᐃ = Δⵠⵠ;
						ΔᐃⲆΔΔΔⲆ(ⵠⵠΔⵠⵠ)
					}
				};
				ⲆⲆΔⲆⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
			}
			for (let ⵠⵠΔⵠⵠ in regions) {
				const ᐃⵠᐃΔᐃ = regions[ⵠⵠΔⵠⵠ];
				ⵠᐃⵠⵠΔᐃⲆ(ᐃⵠᐃΔᐃ)
			}
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]](ⵠⲆⲆⲆᐃⵠⲆⲆⵠ, 5e3)
		};
		this.ΔⵠΔΔΔⲆⲆⵠᐃ = function() {
			let ᐃⵠⲆᐃᐃⲆᐃ = ᐃΔᐃᐃ.ⲆΔⲆⲆⲆᐃⵠ[Ⲇᐃⵠ.ᐃⲆⲆⵠΔ];
			let ᐃⵠⲆᐃⲆⲆΔⵠᐃ = Ⲇᐃⵠ.ⲆᐃᐃᐃⲆΔΔ[Ⲇᐃⵠ.ᐃⲆⲆⵠΔ];
			let ⲆΔⲆⲆⲆⲆΔ = Ⲇᐃⵠ.ᐃⵠⲆᐃⲆ.find((Ⲇᐃ => Ⲇᐃ[ᐃ[324]] == ᐃⵠⲆᐃᐃⲆᐃ && Ⲇᐃ["idx"] == ᐃⵠⲆᐃⲆⲆΔⵠᐃ));
			if (ⲆΔⲆⲆⲆⲆΔ === undefined) Ⲇᐃⵠ.ⲆⲆⵠᐃΔⲆᐃⲆΔ(ᐃⵠⲆᐃᐃⲆᐃ);
			else Ⲇᐃⵠ.ᐃⵠᐃⲆⲆⲆΔ({
				domain: ΔⵠᐃΔᐃΔᐃ,
				is_tls: 1,
				id: ⲆΔⲆⲆⲆⲆΔ[ᐃ[321]],
				p: ⲆΔⲆⲆⲆⲆΔ["p"]
			})
		};
		this.ⵠᐃⲆᐃⵠᐃⵠ = function() {
			if (ᐃⲆⲆⵠᐃⲆΔ !== undefined && ᐃⲆⲆⵠᐃΔᐃ !== ΔⲆⲆⲆᐃ) {
				Ⲇᐃⵠ.ᐃⵠᐃⲆⲆⲆΔ({
					domain: ΔⵠᐃΔᐃΔᐃ,
					is_tls: ᐃⵠᐃᐃ,
					id: ᐃⲆⲆⵠᐃΔᐃ + ᐃⲆⲆⵠᐃⲆΔ,
					p: Ⲇᐃⵠ.ΔⵠΔΔΔᐃᐃ[ᐃⲆⲆⵠᐃΔᐃ]
				});
				return
			}
			if (undefined !== ⵠⵠⵠΔᐃ) {
				Ⲇᐃⵠ.ᐃⵠᐃⲆⲆⲆΔ({
					domain: ⵠⵠⵠΔᐃ["domain"],
					is_tls: ⵠⵠⵠΔᐃ["ssl"],
					id: ⵠⵠⵠΔᐃ[ᐃ[321]],
					p: [ⵠⵠⵠΔᐃ["p"]]
				});
				return
			}
			Ⲇᐃⵠ.ΔⵠΔΔΔⲆⲆⵠᐃ()
		};
		this.ᐃⵠᐃⲆⲆⲆΔ = function(ΔᐃΔᐃᐃⵠⲆ) {
			let ⵠᐃΔᐃᐃⵠᐃ = ΔᐃΔᐃᐃⵠⲆ["domain"];
			let ⲆΔᐃⲆⲆⲆᐃⲆΔ = ΔᐃΔᐃᐃⵠⲆ["is_tls"];
			let ⲆᐃᐃⲆᐃⲆⲆⲆᐃ = ΔᐃΔᐃᐃⵠⲆ[ᐃ[321]];
			let ⵠⵠᐃᐃⵠΔⲆ = ΔᐃΔᐃᐃⵠⲆ["p"];
			let ⵠⵠⵠΔᐃᐃⲆ = ⵠⵠᐃᐃⵠΔⲆ[Math.floor(Math.random() * ⵠⵠᐃᐃⵠΔⲆ.length)];
			let ΔᐃⵠΔⲆᐃⵠᐃΔ = ⲆΔᐃⲆⲆⲆᐃⲆΔ ? "wss://" + ⵠⵠⵠΔᐃᐃⲆ + "." + ⵠᐃΔᐃᐃⵠᐃ + "/" + ⲆᐃᐃⲆᐃⲆⲆⲆᐃ + "?" + ⲆΔⵠ.ΔᐃⲆᐃⲆⲆᐃ : "ws://" + ⵠᐃΔᐃᐃⵠᐃ;
			Ⲇᐃⵠ.Δᐃⵠᐃ = new ⲆⵠᐃΔᐃⵠⲆ.WebSocket(ΔᐃⵠΔⲆᐃⵠᐃΔ);
			Ⲇᐃⵠ.Δᐃⵠᐃ["binaryType"] = "arraybuffer";
			Ⲇᐃⵠ.Δᐃⵠᐃ.ᐃⵠⲆᐃᐃ = Ⲇᐃⵠ.ᐃⵠⲆᐃᐃ;
			Ⲇᐃⵠ.Δᐃⵠᐃ.onmessage = function(ⵠᐃᐃᐃ) {
				if (Ⲇᐃⵠ.ᐃⵠⲆᐃᐃ != Ⲇᐃⵠ.ᐃⵠⲆᐃᐃ) return;
				if (ᐃ[458] == typeof ⵠᐃᐃᐃ.data) {
					var ⵠⵠⵠᐃ = JSON.parse(ⵠᐃᐃᐃ.data);
					switch (ⵠⵠⵠᐃ[ⵠΔΔⲆ]) {
						case ⵠΔⵠᐃ:
							Ⲇᐃⵠ.ᐃᐃⲆΔⲆ(ⵠⵠⵠᐃ);
							break;
						case 1:
							Ⲇᐃⵠ.ΔΔᐃᐃᐃⵠᐃ(ⵠⵠⵠᐃ[1]);
							break;
						case 2:
							Ⲇᐃⵠ.ⵠⵠΔⲆΔⵠⲆᐃⵠ(ⵠⵠⵠᐃ);
							break;
						case ⵠᐃⵠⲆ:
							Ⲇᐃⵠ.ᐃⲆⵠᐃᐃᐃⲆⲆᐃ(ⵠⵠⵠᐃ);
							break;
						case 4:
							Ⲇᐃⵠ.message(ⵠⵠⵠᐃ[ⲆⵠⲆ]);
							break;
						case ᐃᐃᐃᐃ:
							Ⲇᐃⵠ.ⲆⵠΔᐃⲆⲆΔ(ⵠⵠⵠᐃ);
							break;
						case ⵠⲆⲆΔᐃ:
							Ⲇᐃⵠ.ⵠΔΔⲆΔⵠᐃ(ⵠⵠⵠᐃ[ⲆⲆⵠ]);
							break
					}
				} else {
					var ΔⵠⵠΔ = ΔΔⲆᐃΔⲆⵠⵠⵠ(ⵠᐃᐃᐃ.data, ⲆΔⵠ.ΔⲆⲆⵠⵠⵠⲆ, ⲆΔⵠ.ΔᐃΔᐃΔⲆᐃⲆΔ);
					var ⲆΔⲆΔⲆ = ΔⵠⵠΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[309]];
					switch (ΔⵠⵠΔ[ᐃⲆΔᐃ]) {
						case ⵠⵠⲆΔ:
							Ⲇᐃⵠ.Ⲇᐃᐃ(ⲆΔⲆΔⲆ, ΔⵠⵠΔ, false);
							break;
						case 1:
							Ⲇᐃⵠ.Ⲇᐃᐃ(ⲆΔⲆΔⲆ, ΔⵠⵠΔ, ⵠᐃⵠⲆᐃ);
							break;
						case 2:
							Ⲇᐃⵠ.ΔᐃⲆⵠΔΔΔΔᐃ();
							break;
						case 3:
							Ⲇᐃⵠ.ᐃᐃⲆⵠᐃⵠⲆ(new Uint16Array(ⲆΔⲆΔⲆ));
							break;
						case ⵠΔᐃⲆ:
							Ⲇᐃⵠ.ᐃⲆⵠⵠⲆⲆᐃⲆⵠ();
							break;
						case ΔΔⵠΔⵠ:
							Ⲇᐃⵠ.ᐃⵠΔᐃⵠⲆΔⵠᐃ();
							break;
						case ⵠΔⵠⵠⲆ:
							Ⲇᐃⵠ.ⵠΔΔΔᐃⵠΔᐃⵠ();
							break;
						case 7:
							Ⲇᐃⵠ.ⵠᐃⵠᐃⵠⵠΔΔⵠ(ⲆΔⲆΔⲆ);
							break;
						case ᐃΔᐃⵠⲆ:
							Ⲇᐃⵠ.ⲆΔⵠᐃΔⵠⲆᐃΔ(ΔⵠⵠΔ[ⵠⵠⵠⲆ]);
							break;
						case ᐃⵠⲆΔⵠΔⵠ:
							Ⲇᐃⵠ.ᐃⲆⲆΔΔⲆΔⵠⲆ(ΔⵠⵠΔ[ⵠⲆⵠⲆ]);
							break;
						case 10:
							Ⲇᐃⵠ.ᐃⵠᐃⵠΔΔᐃ();
							break;
						case ᐃⵠΔⲆⲆ:
							Ⲇᐃⵠ.ⵠⵠⵠⵠᐃⵠΔ(ΔⵠⵠΔ[ⲆⲆΔⵠ], ΔⵠⵠΔ[Ⲇᐃⵠⵠ]);
							break;
						case 12:
							Ⲇᐃⵠ.ⵠⵠΔⵠΔ(ΔⵠⵠΔ[1]);
							break;
						case ΔΔΔᐃᐃ:
							Ⲇᐃⵠ.ᐃᐃᐃⵠⲆⵠⲆᐃᐃ(ΔⵠⵠΔ, ⲆΔⲆΔⲆ);
							break;
						case 14:
							Ⲇᐃⵠ.ⲆⵠᐃᐃΔⵠᐃⵠⵠ();
							break;
						case 15:
							Ⲇᐃⵠ.ΔⲆⲆΔⲆΔⵠⲆⲆ(ΔⵠⵠΔ[1]);
							break;
						case ⵠᐃⲆⵠΔⲆⵠ:
							Ⲇᐃⵠ.ⵠΔⲆΔ(ΔⵠⵠΔ[ᐃΔΔⲆ], ΔⵠⵠΔ[2], ΔⵠⵠΔ[ΔᐃΔⲆ], ΔⵠⵠΔ[4], ΔⵠⵠΔ[5], ΔⵠⵠΔ[6], ΔⵠⵠΔ[7]);
							break;
						case 17:
							Ⲇᐃⵠ.ⵠᐃⵠⲆⲆⵠᐃⵠΔ(ⲆΔⲆΔⲆ);
							break;
						case ΔⲆᐃⵠⵠᐃΔ:
							Ⲇᐃⵠ.ⲆⵠⵠⲆΔⵠᐃⲆᐃ();
							break;
						case ᐃᐃⲆΔⵠ:
							Ⲇᐃⵠ.ᐃⵠΔΔⲆ(ΔⵠⵠΔ[1]);
							break;
						case 20:
							Ⲇᐃⵠ.ΔΔⲆⵠΔⲆⲆΔΔ();
							break;
						case 21:
							Ⲇᐃⵠ.ΔⵠⲆᐃ(ⲆΔⲆΔⲆ);
							break;
						case 22:
							Ⲇᐃⵠ.ⲆΔΔΔΔⲆⲆΔⵠ(ΔⵠⵠΔ[1]);
							break;
						case 23:
							Ⲇᐃⵠ.ⵠΔᐃᐃᐃΔⵠⵠΔ(ⲆΔⲆΔⲆ);
							break;
						case 24:
							Ⲇᐃⵠ.ᐃⲆⲆᐃⵠⲆΔΔⵠ(ΔⵠⵠΔ[Δⵠᐃ]);
							break;
						case 25:
							Ⲇᐃⵠ.ᐃⵠᐃΔΔⲆⵠⲆΔ(ΔⵠⵠΔ[1], ⲆΔⲆΔⲆ);
							break;
						case 26:
							Ⲇᐃⵠ.ᐃΔᐃΔΔ(ΔⵠⵠΔ);
							break;
						case 27:
							Ⲇᐃⵠ.ⵠΔⵠΔⲆⵠΔᐃⲆ();
							break;
						case 28:
							Ⲇᐃⵠ.ⲆⲆⵠⲆⲆ(ΔⵠⵠΔ[Δⵠᐃ]);
							break;
						case 29:
							Ⲇᐃⵠ.ⲆⵠⵠⲆⵠⲆᐃⵠⲆ();
							break;
						case 30:
							Ⲇᐃⵠ.ᐃᐃⲆᐃⵠᐃⵠⲆᐃ();
							break;
						case 31:
							Ⲇᐃⵠ.ᐃⲆΔᐃⵠΔᐃΔⲆ(ΔⵠⵠΔ);
							break;
						case 32:
							Ⲇᐃⵠ.ᐃᐃᐃⲆⲆⵠⵠΔⲆ(ΔⵠⵠΔ[1]);
							break;
						case 33:
							Ⲇᐃⵠ.ᐃᐃⵠⲆᐃⲆⵠΔⵠ(ΔⵠⵠΔ[Δⵠᐃ]);
							break;
						case 34:
							Ⲇᐃⵠ.ΔΔΔⲆΔᐃΔᐃⲆ();
							break;
						case 35:
							Ⲇᐃⵠ.ⵠᐃⲆⵠⵠΔΔΔΔ(ΔⵠⵠΔ[1]);
							break;
						case 36:
							Ⲇᐃⵠ.ΔΔΔⵠⲆⵠᐃ(ΔⵠⵠΔ[ⵠⵠⵠⲆ]);
							break;
						case 37:
							Ⲇᐃⵠ.ⲆΔⵠⵠᐃΔᐃⵠⲆ(ΔⵠⵠΔ[1], ΔⵠⵠΔ[ᐃⵠΔⲆ]);
							break;
						case 38:
							Ⲇᐃⵠ.ⲆⵠΔᐃⵠⵠⵠᐃᐃ(ΔⵠⵠΔ[ⲆⲆΔⵠ]);
							break;
						case 39:
							Ⲇᐃⵠ.ᐃᐃΔⵠᐃᐃⵠΔⵠ(ΔⵠⵠΔ[Δⵠᐃ]);
							break;
						case 40:
							Ⲇᐃⵠ.ᐃᐃᐃᐃⵠⵠΔⵠᐃ();
							break;
						case 41:
							Ⲇᐃⵠ.ᐃⲆⲆΔᐃΔᐃΔⲆ(ΔⵠⵠΔ);
							break;
						case 42:
							Ⲇᐃⵠ.ΔⵠⲆⵠᐃΔΔᐃΔ(ΔⵠⵠΔ[1]);
							break;
						case 43:
							Ⲇᐃⵠ.ΔΔᐃΔᐃⲆⵠⵠⵠ(ΔⵠⵠΔ[ᐃΔⵠΔ]);
							break;
						case 44:
							Ⲇᐃⵠ.claimed(ΔⵠⵠΔ[1]);
							break;
						case 45:
							Ⲇᐃⵠ.ⲆⵠᐃⵠΔⵠⲆⲆⵠ(ΔⵠⵠΔ[1]);
							break;
						case 46:
							Ⲇᐃⵠ.ⵠⲆΔΔⲆⲆΔⲆᐃ(ΔⵠⵠΔ[ᐃⲆⲆ]);
							break;
						case 47:
							Ⲇᐃⵠ.ⵠⲆⵠᐃᐃ(ΔⵠⵠΔ[1]);
							break;
						case 48:
							Ⲇᐃⵠ.ⲆⲆⵠⲆᐃᐃⵠⵠᐃ();
							break;
						case 50:
							Ⲇᐃⵠ.ⵠᐃᐃⲆⵠⵠᐃⵠⲆ(ΔⵠⵠΔ[1], ΔⵠⵠΔ[ⲆΔⲆΔ], ΔⵠⵠΔ[3]);
							break;
						case 51:
							Ⲇᐃⵠ.ⵠⲆⵠⵠΔⲆΔⵠⵠ();
							break;
						case 52:
							Ⲇᐃⵠ.ⵠᐃᐃⵠⲆᐃⲆⵠⲆ(ΔⵠⵠΔ[ΔΔΔᐃ]);
							break;
						case 53:
							Ⲇᐃⵠ.ᐃⵠᐃΔⲆⵠⵠᐃᐃ(ΔⵠⵠΔ[1]);
							break;
						case 54:
							Ⲇᐃⵠ.ΔⵠΔᐃΔΔΔᐃΔ();
							break;
						case 55:
							Ⲇᐃⵠ.ⵠⲆᐃΔᐃⵠΔᐃⲆ(ΔⵠⵠΔ[1]);
							break;
						case 56:
							Ⲇᐃⵠ.ⵠⵠΔᐃⲆⲆΔⲆⲆ(ΔⵠⵠΔ[ⵠᐃᐃ]);
							break;
						case 57:
							Ⲇᐃⵠ.ΔᐃⵠᐃΔⲆᐃᐃⵠ();
							break;
						case 58:
							Ⲇᐃⵠ.ⲆⲆᐃⵠⵠⲆⲆⵠΔ();
							break;
						case 59:
							Ⲇᐃⵠ.ⲆΔⲆΔᐃⵠᐃⵠΔ();
							break;
						case 60:
							Ⲇᐃⵠ.ΔᐃⲆⲆⵠΔᐃⲆⵠ();
							break;
						case 61:
							ⲆΔⵠ.ⲆⵠΔ.ⵠⲆΔΔΔᐃᐃ = .2;
							ⲆΔⵠ.ⲆⵠΔ.ⲆⲆΔⵠⵠ = ⵠᐃᐃⵠ;
							break;
						case 62:
							Ⲇᐃⵠ.ⵠΔⵠᐃⵠⵠᐃⵠⲆ(new Uint16Array(ⲆΔⲆΔⲆ));
							break;
						case 63:
							Ⲇᐃⵠ.ⲆᐃΔΔΔᐃⵠᐃⲆ();
							break;
						case 64:
							Ⲇᐃⵠ.ᐃⲆᐃⵠⵠⲆᐃᐃⵠ();
							break;
						case 65:
							Ⲇᐃⵠ.ⲆⲆⲆⵠⲆᐃΔΔΔ();
							break;
						case 66:
							Ⲇᐃⵠ.ⲆⲆᐃⵠⲆⲆⵠⲆᐃ();
							break;
						case 67:
							Ⲇᐃⵠ.ΔᐃⲆᐃⵠᐃᐃΔᐃ(ΔⵠⵠΔ[1]);
							break;
						case 68:
							Ⲇᐃⵠ.ᐃⲆⲆⲆⵠⵠΔΔΔ(ΔⵠⵠΔ[ⵠᐃᐃ]);
							break;
						case 69:
							Ⲇᐃⵠ.ⵠΔⲆΔΔΔᐃ(ΔⵠⵠΔ[ⲆⲆⵠ]);
							break;
						case 70:
							Ⲇᐃⵠ.ΔⵠΔⲆⵠᐃΔⲆⲆ(ΔⵠⵠΔ[ⵠᐃᐃ]);
							break;
						case 71:
							Ⲇᐃⵠ.ⲆΔΔⲆΔ(ΔⵠⵠΔ[ⲆⵠΔΔ]);
							break
					}
				}
			};
			Ⲇᐃⵠ.Δᐃⵠᐃ.onerror = function() {
				if (ⲆΔⵠ.reconnect.enabled) ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]](Ⲇᐃⵠ.timeout, 2500)
			};
			this.Δᐃⵠᐃ.onopen = function() {
				clearTimeout(Ⲇᐃⵠ.ⲆᐃⲆᐃⲆ);
				ⲆΔⵠ.ΔⲆΔⲆᐃⲆⵠ = ⲆΔⵠ.ΔⲆΔⲆᐃⲆⵠ || ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("token");
				ΔⲆᐃ.ⵠⲆΔⵠᐃΔⵠ().then((ΔⵠᐃⵠⵠΔΔⵠⵠ => {
					Ⲇᐃⵠ.Δᐃⵠᐃ[ᐃⵠⵠᐃ](ⲆⵠΔⲆᐃΔΔ[ⲆΔΔΔΔⲆᐃ].stringify([ⲆΔⲆⵠ.ⵠⲆⵠΔⵠ.input.value,4000,4000, ᐃᐃᐃᐃⵠ.ᐃⲆᐃⵠΔΔⵠ, ⲆΔⵠ.ΔᐃⲆΔΔ, ⲆΔⵠ.ⵠᐃⲆᐃⲆᐃΔ, ⲆΔⵠ.reconnect.enabled ? 1 : Ⲇⵠᐃ, ⲆΔⲆⵠ.ⵠⲆᐃᐃ, ⲆΔⲆⵠ.ⵠΔⵠⲆⲆ, ⲆΔⲆⵠ.ᐃΔⲆΔΔ, ⲆΔⲆⵠ.ⲆⵠᐃⲆᐃ, ⲆΔⲆⵠ.ᐃΔⲆⵠⲆ, ⲆΔⲆⵠ.ΔᐃΔⵠΔ, ᐃⵠⵠⲆΔ === ΔⵠᐃΔᐃ ? ⵠᐃΔ : ᐃⵠⵠⲆΔ, ⲆᐃᐃⲆⵠ === undefined ? 0 : ⲆᐃᐃⲆⵠ.substring(ⲆᐃᐃⲆⵠ.length - 50), ᐃᐃΔⲆⵠΔΔⵠⲆ, ⲆΔⵠ.ΔⲆΔⲆᐃⲆⵠ, ΔⵠᐃⵠⵠΔΔⵠⵠ, ⲆΔⵠ.ΔⲆΔⵠⵠᐃᐃ, ⲆΔⵠ.ⵠⵠᐃⲆⲆΔⲆ]));
					ⲆΔⵠ.ΔⲆΔⲆᐃⲆⵠ = ⲆⲆⲆΔᐃ;
					ⲆΔⵠ.ΔⲆΔⵠⵠᐃᐃ = ΔΔⲆⲆⲆ;
					ⲆΔⵠ.ⵠⵠᐃⲆⲆΔⲆ = undefined;
					ⲆΔⵠ.ΔᐃⲆᐃⲆⲆᐃ = undefined;
					Ⲇᐃⵠ.ⲆᐃⲆᐃⲆ = setTimeout(Ⲇᐃⵠ.timeout, ᐃᐃᐃᐃⵠ.ΔΔΔᐃⲆⵠⵠΔΔ)
				}))
			}
		}
	}
	var ᐃΔᐃᐃ = {
		"ⵠⲆⵠ": 48e4,
		"ⵠΔⵠⵠᐃΔᐃ": ᐃᐃᐃⲆⵠ,
		"ⵠᐃⲆΔⵠᐃᐃ": ΔᐃⵠⲆᐃⵠᐃ,
		"ΔⲆⵠΔᐃⵠΔΔⲆ": 6,
		"ΔΔᐃⵠⵠⲆⵠ": 60,
		"ΔΔⵠᐃⲆ": 1,
		"ⵠⵠΔⲆᐃ": ⲆᐃᐃⲆ,
		"ⲆⲆⵠΔⵠ": 4,
		"ΔᐃⲆᐃⲆ": 8,
		"ΔⵠⵠᐃⲆΔⲆ": 10,
		"ΔᐃᐃⵠⵠΔⵠ": Δⵠᐃⵠᐃ,
		"ΔⲆᐃᐃΔⲆⲆ": 100,
		"ΔᐃⲆΔⵠⲆⲆ": 100,
		"ⲆΔΔⲆᐃⲆⲆΔⵠ": 100,
		"ΔⵠΔΔᐃⵠⵠ": ⲆⲆⵠⵠⵠⵠᐃ,
		"ᐃⵠᐃⲆⲆΔⲆ": ⵠⵠΔΔᐃ,
		"ᐃⲆⵠΔⵠⵠΔⲆⲆ": ΔⵠⲆⵠⲆ,
		"ᐃⵠᐃⲆⲆΔⲆ": ΔᐃΔⲆᐃ,
		"ΔⲆΔᐃΔⵠΔ": 100,
		"ⲆⲆΔΔⲆⵠⲆ": ΔᐃⵠΔⲆ,
		"ⵠΔᐃⵠΔ": 0,
		"ⲆⵠⵠΔΔⲆⵠ": ΔΔΔᐃ,
		"ᐃΔΔΔᐃ": 2,
		"ⵠⵠᐃΔⲆ": 3,
		"ΔⲆⵠⲆⵠ": ΔᐃⲆᐃⵠ,
		"ᐃⲆΔⲆⵠΔᐃ": 5,
		"ᐃΔⵠΔⲆ": ⵠⵠⲆᐃⲆ,
		"ΔⲆⲆᐃⵠ": 7,
		"ᐃⲆⲆⲆᐃⲆⲆᐃⵠ": {
			frankfurt: "Frankfurt",
			osaka: "Osaka",
			losangeles: "Los Angeles",
			sydney: "Sydney",
			atlanta: "Atlanta"
		},
		"ⲆΔⲆⲆⲆᐃⵠ": {
			0: "normal",
			2: "zombies",
			3: "vampires",
			4: ᐃ[445],
			6: "community",
			7: "experimental"
		},
		"ΔⵠᐃⲆΔΔⲆ": 0,
		"ⲆⵠⵠⵠⵠΔⲆ": 0,
		"ᐃⲆⵠΔΔᐃᐃ": 30,
		"ᐃΔⵠⵠⵠⵠΔΔᐃ": ⵠΔⵠⲆ,
		"ΔΔᐃⵠⵠⲆⵠ": 6e4,
		"ᐃⲆⵠⵠᐃᐃⲆΔᐃ": ⵠᐃⵠ,
		"ΔⵠⵠⲆⵠᐃΔΔⲆ": ⵠⵠⵠ,
		"ⵠⵠᐃᐃⲆΔⲆⵠᐃ": 50,
		"ᐃΔⵠⵠΔⲆᐃᐃⲆ": 0,
		"ΔΔⵠᐃⵠⲆΔΔⵠ": 40,
		"ⲆⲆΔⵠⵠᐃΔⵠⲆ": 39,
		"ΔΔᐃᐃⲆⵠᐃΔⵠ": 830,
		"ⵠⲆⲆᐃⵠᐃΔ": 25,
		"ΔΔΔᐃΔⲆⵠ": ⲆⲆᐃⲆⵠ,
		"ΔΔⲆΔᐃ": ⵠΔⵠᐃ,
		"ⲆⲆⵠⲆᐃ": ⵠᐃⵠ,
		"ⵠᐃⲆⲆΔⲆΔ": 200,
		"ΔⲆⵠⵠΔΔⵠ": Δⵠⵠ,
		"ΔⲆΔⲆΔ": 250,
		"ⲆⵠⲆⲆᐃⲆᐃ": 150,
		"ΔⲆⵠⵠᐃⵠΔ": 0,
		"ᐃᐃⵠⲆⲆ": 350,
		"ᐃⲆⵠⲆⲆΔⲆ": ΔΔⵠⵠⲆ,
		"ᐃⲆⲆⲆᐃⲆⵠ": 700,
		"ⲆᐃⵠΔΔ": 39879
	};
	var ⲆᐃⲆᐃΔ = [];
	for (var ᐃⲆ = ⲆⲆᐃ; 500 > ᐃⲆ; ᐃⲆ++) ⲆᐃⲆᐃΔ[ᐃⲆ] = 0;
	ⲆᐃⲆᐃΔ[ⵠ.ⲆⲆⵠⲆΔ] = 1;
	ⲆᐃⲆᐃΔ[ⵠ.ⲆΔᐃⲆΔ] = 1;
	ⲆᐃⲆᐃΔ[ⵠ.ⲆⲆᐃΔΔ] = 1;
	ⲆᐃⲆᐃΔ[ⵠ.ᐃΔⵠⵠⵠ] = 1;
	ⲆᐃⲆᐃΔ[ⵠ.ⲆⲆΔⲆᐃ] = 1;
	ⲆᐃⲆᐃΔ[ⵠ.ⵠⲆⲆΔⲆ] = 1;
	ⲆᐃⲆᐃΔ[ⵠ.ΔΔᐃᐃⲆ] = ⵠⲆⵠⲆ;
	ⲆᐃⲆᐃΔ[ⵠ.ⲆⵠⲆΔΔ] = ΔΔΔᐃ;
	ⲆᐃⲆᐃΔ[ⵠ.ᐃᐃᐃⲆΔ] = 1;
	ⲆᐃⲆᐃΔ[ⵠ.ⵠᐃᐃⲆᐃ] = ᐃⵠⵠⵠ;
	ⲆᐃⲆᐃΔ[ⵠ.ΔⲆⵠᐃᐃ] = 1;
	ⲆᐃⲆᐃΔ[ⵠ.ⵠⲆᐃⲆᐃ] = ᐃΔⲆΔ;
	ⲆᐃⲆᐃΔ[ⵠ.ⵠᐃⲆᐃΔ] = 1;
	ⲆᐃⲆᐃΔ[ⵠ.ⲆΔᐃⲆⲆ] = ᐃΔⲆΔ;
	ⲆᐃⲆᐃΔ[ⵠ.ᐃᐃⵠᐃⲆ] = 1;
	ⲆᐃⲆᐃΔ[ⵠ.ᐃΔΔᐃⵠ] = 1;
	ⲆᐃⲆᐃΔ[ⵠ.ΔᐃΔⲆⲆ] = 1;
	ⲆᐃⲆᐃΔ[ⵠ.ᐃⵠᐃⵠᐃ] = 1;

	function ⲆᐃΔⲆ() {
		return 5035212
	}
	const ΔⲆΔⵠ = 11060253;
	const ᐃⵠᐃⲆ = ⲆᐃΔⲆ + " let ᐃᐃⲆⲆⵠⲆΔ = ⲆᐃΔⲆ () * 6693246; return ᐃᐃⲆⲆⵠⲆΔ;";
	const ⵠᐃⲆΔ = new Function(ᐃⵠᐃⲆ);
	try {
		ⵠᐃⲆΔ(ΔⲆΔⵠ)
	} catch (e) {
		const ΔⲆΔⵠ = Math.random;
		const ᐃᐃⲆⲆⵠⲆΔ = [];
		const ᐃⵠᐃⲆ = function() {
			for (let ⵠᐃⲆΔ = 0; ⵠᐃⲆΔ < 8087; ⵠᐃⲆΔ++) ᐃᐃⲆⲆⵠⲆΔ.push(ⵠᐃⲆΔ);
			return ΔⲆΔⵠ()
		};
		Math.random = ᐃⵠᐃⲆ
	}
	ⲆᐃⲆᐃΔ[ⵠ.ⵠᐃⲆΔᐃ] = ΔⲆⵠⲆ;
	var ⲆⵠⲆᐃⵠᐃⵠ = [{
		time: 6 * (ⲆᐃⲆᐃᐃ * (1e3 * 60))
	}, {
		time: 48e4 * ⵠⵠⲆⲆ
	}, {
		time: 4 * (Δᐃⵠⵠᐃ * 6e4)
	}, {
		time: ⲆΔⵠΔΔ * (1e3 * 60) * ⲆΔⲆᐃ
	}, {
		time: 288e4
	}, {
		time: ΔΔⵠΔⵠ * (6e4 * ᐃᐃᐃⵠᐃ)
	}, {
		time: ΔΔⵠⲆΔ * 48e4
	}, {
		time: 1e3 * 60 * 8 * ⵠΔΔᐃᐃ
	}, {
		time: 6 * (8 * (1e3 * 60))
	}, {
		time: ⲆⲆᐃΔᐃᐃⲆ * (ᐃᐃΔⲆⲆ * 6e4)
	}, {
		time: ⵠΔΔⵠⲆ * 48e4
	}, {
		time: 48e4 * ᐃᐃΔⲆⵠ
	}, {
		time: ⵠᐃᐃᐃᐃ * 6e4 * ΔΔⵠⲆᐃ
	}];
	var ᐃᐃᐃ = {
		"Δⵠⵠⵠᐃ": 26,
		"ΔⲆᐃᐃⵠ": 72,
		"ΔⵠⲆⲆⲆ": 54,
		"ⲆᐃⲆⵠΔ": 40,
		"ΔⵠΔⲆⵠ": ΔΔᐃⲆⵠ,
		"ⵠᐃᐃᐃΔ": 35,
		"ΔΔΔΔⲆ": 41,
		"ΔᐃⲆᐃ": ⲆⲆᐃ,
		"ᐃⲆᐃΔⵠ": 28,
		"ΔᐃᐃΔⲆ": 55,
		"ᐃⵠⵠΔⵠ": 11,
		"ⲆᐃΔⲆⲆ": 16,
		"ᐃⲆⵠⲆⲆ": 68,
		"ⲆᐃⵠΔΔ": ⵠⵠⲆᐃ,
		"ΔΔⵠΔΔ": 36,
		"ΔⲆⲆᐃⲆ": ⲆᐃⲆⲆᐃⲆΔ,
		"ΔⲆⲆⲆΔ": ᐃᐃⲆⵠΔ,
		"ⲆᐃⲆΔⲆ": 75,
		"ΔᐃᐃᐃΔ": 69,
		"ᐃⲆⵠⲆᐃ": ⵠⲆⵠⵠⵠ,
		"ⵠⵠⵠᐃᐃ": 67,
		"ΔΔⵠΔᐃ": 9,
		"ᐃΔΔⲆᐃ": 78,
		"ᐃⵠⲆⵠⵠ": 46,
		"ᐃᐃΔΔⲆ": 51,
		"ⲆⲆⲆΔⲆΔᐃ": 85,
		"ⲆᐃⵠⵠⲆ": 81,
		"ⵠᐃⵠᐃᐃ": 79,
		"ΔⲆᐃⲆΔ": 53,
		"ᐃΔᐃᐃᐃ": 88,
		"ΔⲆⲆΔᐃ": 1,
		"ᐃⵠΔΔⵠ": 66,
		"ⲆᐃᐃⲆΔ": 82,
		"ΔΔⵠⵠΔ": 87,
		"ⲆᐃᐃΔⵠ": 27,
		"ⵠΔⲆⲆᐃ": 60,
		"ΔᐃⲆⲆᐃⵠΔ": 83,
		"ⲆΔⵠΔⲆ": 47,
		"ᐃᐃⲆⲆΔ": 29,
		"ΔΔⵠᐃΔ": 50,
		"ΔᐃⵠΔᐃ": 12,
		"ᐃⲆΔΔᐃ": 14,
		"ⲆⵠⵠᐃⵠΔⵠ": 84,
		"ⵠⵠⲆΔΔ": 73,
		"ΔⲆᐃᐃΔ": 62,
		"ᐃΔᐃⵠᐃ": 25,
		"ⲆⲆᐃⲆΔ": 42,
		"ΔⵠᐃΔΔ": 22,
		"ᐃᐃΔᐃᐃⵠΔ": 76,
		"ⲆΔⵠⲆᐃ": 44,
		"ⲆΔⵠⲆⵠ": 31,
		"ᐃΔⵠⲆⵠ": 70,
		"ⵠⲆΔⲆΔ": 10,
		"ᐃⵠⲆⲆⵠ": 34,
		"ΔⵠΔⵠⵠ": 86,
		"ΔⲆᐃⲆᐃ": 30,
		"ΔᐃᐃⲆⲆ": 17,
		"ᐃⲆⲆⵠᐃ": 23,
		"ΔⵠⲆⲆⵠ": ⵠⲆⵠΔᐃᐃⵠ,
		"ᐃⲆⲆⵠⵠ": 80,
		"ᐃⲆΔⵠⲆ": 56,
		"ᐃⵠⵠᐃΔ": ⲆΔᐃᐃⲆ,
		"ⲆᐃᐃⲆᐃ": 91,
		"ⲆᐃⲆΔⵠ": 43,
		"ⵠᐃⵠⵠᐃ": 48,
		"Δᐃⵠⵠⵠ": 63,
		"ΔΔΔⵠᐃ": 33,
		"ⲆΔΔᐃᐃ": 21,
		"ⲆΔⲆⵠΔ": 90,
		"ⲆᐃᐃⵠΔ": 61,
		"ⲆⲆΔᐃΔ": 52,
		"Ⲇᐃⵠᐃᐃ": 49,
		"ΔⵠΔᐃⲆ": 64,
		"ᐃᐃⲆΔᐃ": 37,
		"ᐃⵠΔⵠΔ": Δᐃᐃⵠ,
		"ΔⲆΔⲆⵠ": 38,
		"ⵠΔΔᐃⵠ": 45,
		"ᐃᐃⵠᐃᐃ": ΔⵠⵠᐃⵠΔΔ,
		"ⲆᐃⵠΔⲆ": ⵠⵠⲆΔⵠ,
		"ⵠⵠΔⲆΔ": 4,
		"ⲆⲆⵠⵠⵠ": 77,
		"ΔᐃⲆΔᐃ": 74,
		"ⲆᐃⲆⵠⵠᐃΔ": 89,
		"Ⲇᐃⵠⵠᐃ": 24,
		"ⵠⲆⲆᐃⲆ": 100,
		"ΔᐃᐃᐃⲆ": 65,
		"ⲆⲆΔⵠᐃ": 32,
		"ΔⵠᐃᐃⲆ": 39,
		"ⵠⲆⵠᐃΔ": 8,
		"ⲆⵠⵠⲆΔ": 71
	};
	var ⲆⵠⲆᐃⵠΔΔ = [
		[ᐃᐃᐃ.Ⲇᐃⵠⵠᐃ, ΔⲆ.ⵠΔⵠΔ],
		[ᐃᐃᐃ.ᐃΔᐃⵠᐃ, ΔⲆ.ⵠᐃΔⲆ],
		[ᐃᐃᐃ.Δⵠⵠⵠᐃ, ΔⲆ.ⲆΔⵠᐃ],
		[ᐃᐃᐃ.ⲆᐃᐃΔⵠ, ΔⲆ.ⲆⵠΔⲆ],
		[ᐃᐃᐃ.ᐃⲆᐃΔⵠ, ΔⲆ.ᐃⲆⵠΔ]
	];
	const ᐃᐃΔΔⲆΔΔΔᐃ = 16355633;

	function ⲆΔᐃΔⲆᐃⲆ(ᐃⵠΔⵠⵠⵠᐃ) {
		const ᐃᐃΔΔⲆΔΔΔᐃ = function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("mousemove", (function() {
				ᐃᐃΔΔⲆΔΔΔᐃ()
			}))
		};
		ᐃᐃΔΔⲆΔΔΔᐃ()
	}
	const ᐃⵠΔⵠⵠⵠᐃ = ⲆΔᐃΔⲆᐃⲆ + ";" + "let ᐃⵠΔⵠⵠⵠᐃ = " + ⲆΔᐃΔⲆᐃⲆ + ";";
	const ΔⵠⵠⲆᐃΔΔ = ᐃⵠΔⵠⵠⵠᐃ + "let ᐃⲆⲆΔⵠΔⵠⲆΔ = 15252105; try { ᐃⲆⲆΔⵠΔⵠⲆΔ = ⲆΔᐃΔⲆᐃⲆ; } catch (ᐃⲆⵠⲆᐃΔⲆ) { ᐃⵠΔⵠⵠⵠᐃ (); };";
	ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]](ΔⵠⵠⲆᐃΔΔ, 0);

	function ᐃΔΔᐃⵠⲆᐃΔΔ() {
		this.ⵠⲆⵠΔⵠ = "";
		this.ⵠⲆᐃᐃ = 0;
		this.ⵠΔⵠⲆⲆ = 0;
		this.ᐃΔⲆΔΔ = Ⲇⵠⵠᐃ;
		this.ᐃΔⲆⲆΔΔΔ = 0;
		this.ⲆⵠᐃⲆᐃ = 0;
		this.ᐃΔⲆⵠⲆ = ᐃⲆΔᐃ;
		this.ΔᐃΔⵠΔ = 0;
		this.level = 0;
		this.label = null;
		this.ⵠᐃⵠⲆⵠⲆΔ = null;
		this.ΔΔᐃⵠᐃⵠΔ = null;
		this.ᐃΔⵠⵠᐃ = ᐃΔᐃᐃΔ;
		this.ᐃᐃᐃΔᐃ = ⵠⵠᐃ
	}

	function ΔΔⲆⵠⵠᐃⵠ(ΔΔ, Ⲇᐃ, ⲆⲆⲆ, ΔΔⲆ) {
		this.id = ΔΔ;
		this.ⵠᐃᐃⲆⲆ = (ΔΔ + 5) * ᐃᐃΔⲆⲆ;
		this.ⲆⲆᐃᐃΔ = ⲆΔⵠΔ / 1366;
		this.x = Ⲇᐃ;
		this.y = ⲆⲆⲆ;
		this.c = Math.sin(ΔΔⲆ);
		this.ΔⵠⵠⲆ = Math.cos(ΔΔⲆ);
		this.alpha = 0
	}

	function ⵠᐃⲆΔᐃΔᐃⲆⵠ(ⵠⲆΔΔᐃⵠΔ) {
		this.mode = ᐃΔᐃᐃ.ⵠΔᐃⵠΔ;
		this.ⵠⲆΔΔᐃⵠΔ = ⵠⲆΔΔᐃⵠΔ;
		this.ⵠΔᐃⵠⵠ = 0;
		this.ᐃⵠᐃⵠΔⵠⲆ = ⵠⵠⲆᐃⲆ;
		this.ΔΔᐃΔ = [];
		this.Ⲇᐃᐃ = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆⲆᐃⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⲆⵠⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠΔⲆⲆᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠⵠᐃᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔⵠⲆⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆⵠⵠⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⵠⵠⲆΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃᐃⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠⲆΔΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆΔᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃᐃⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠΔΔⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃᐃΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔᐃᐃᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⲆᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⲆⵠΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.Δᐃⵠⵠⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔΔⲆᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔᐃⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃᐃΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⵠⲆⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃⵠᐃᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆⵠⵠᐃΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆⲆᐃⵠΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⵠⵠᐃⵠΔⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆⲆΔⲆΔᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠⵠⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⲆΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔⵠⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⲆⲆⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠΔΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⵠΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔⲆⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆΔᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⵠⲆᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠΔΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠΔⵠΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⵠΔᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆᐃⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆΔΔᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆⲆΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆΔᐃΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠΔⲆΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⵠᐃΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆⵠᐃΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠΔᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⵠᐃᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠᐃΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔΔΔⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆΔⲆΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠΔⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃΔⲆⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃⲆⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔΔᐃᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃΔΔⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠΔΔᐃⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⲆⵠⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠΔⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃⵠⵠᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.Ⲇᐃⵠᐃᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃⲆΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⲆⲆΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆΔⵠⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⵠΔⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠᐃΔΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⲆⵠᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃⲆᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆΔⲆⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔΔⵠᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠⲆⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃΔⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⲆΔᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆΔⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠⲆᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠᐃᐃⲆ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆⵠΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆΔⵠᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.Ⲇᐃⵠⵠᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔᐃⵠᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.Δⵠⵠⵠᐃ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃΔⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆᐃΔⵠ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃᐃᐃΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠⵠΔ] = [];
		this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆᐃⲆΔ] = [];
		this.ⲆⵠᐃⵠⲆ = [];
		this.ᐃᐃΔⵠᐃ = 260;
		this.ΔΔΔⲆⲆ = 260;
		this.ΔᐃᐃᐃΔⲆⲆ = 100;
		this.ⲆⲆΔᐃᐃᐃⵠ = 100;
		this.w = this.ᐃᐃΔⵠᐃ * this.ΔᐃᐃᐃΔⲆⲆ;
		this.ΔⵠⲆ = this.ⲆⲆΔᐃᐃᐃⵠ * this.ΔΔΔⲆⲆ;
		this.ᐃⲆᐃⲆΔ = new ᐃⲆᐃⲆΔ.ⵠΔᐃᐃᐃⵠᐃ;
		this.ᐃᐃⲆᐃ = [];
		this.ⵠⲆΔⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, 1, 0, ⵠⵠⵠⲆ, ⵠⵠⵠⲆ);
		this.transition = false;
		this.ᐃⵠᐃᐃⲆ = [];
		this.ⲆΔΔⲆⵠ = 0;
		this.ΔⵠⵠᐃΔΔΔ = Δⵠᐃ;
		this.ⵠΔᐃΔᐃⵠⵠ = 2;
		this.ΔⲆⵠᐃⵠⵠⵠ = ᐃΔΔΔ;
		this.ⲆΔᐃᐃΔ = ⵠΔⲆᐃⲆ;
		this.ᐃᐃⵠΔᐃⵠⲆ = 10;
		this.ᐃⵠᐃᐃⲆ[this.ⲆΔΔⲆⵠ] = {
			"ⵠΔᐃⵠᐃΔᐃ": 1,
			"ⵠΔⵠ": [19, 58, 43],
			"Δᐃᐃ": [4, 43, 48],
			"ⵠⲆⵠⵠⲆ": [ᐃ[545], ᐃ[53]]
		};
		this.ᐃⵠᐃᐃⲆ[this.ⲆΔᐃᐃΔ] = {
			"ⵠΔᐃⵠᐃΔᐃ": 0,
			"ⵠΔⵠ": [11, 106, 132],
			"Δᐃᐃ": [9, 55, 63],
			"ⵠⲆⵠⵠⲆ": [ᐃ[482], ᐃ[24]]
		};
		this.ᐃⵠᐃᐃⲆ[this.ΔⵠⵠᐃΔΔΔ] = {
			"ⵠΔᐃⵠᐃΔᐃ": 0,
			"ⵠΔⵠ": [235, 242, 240],
			"Δᐃᐃ": [19, 97, 103],
			"ⵠⲆⵠⵠⲆ": [ᐃ[427], ᐃ[213]]
		};
		this.ᐃⵠᐃᐃⲆ[this.ⵠΔᐃΔᐃⵠⵠ] = {
			"ⵠΔᐃⵠᐃΔᐃ": 0,
			"ⵠⲆⵠⵠⲆ": ["#2D2017", "#031C1E"],
			"ⵠΔⵠ": [45, 32, 23],
			"Δᐃᐃ": [3, 28, 30]
		};
		this.ᐃⵠᐃᐃⲆ[this.ΔⲆⵠᐃⵠⵠⵠ] = {
			"ⵠⲆⵠⵠⲆ": ["#4A4A4A", "#183D3C"],
			"ⵠΔⵠ": [74, 74, 74],
			"ⵠΔᐃⵠᐃΔᐃ": Ⲇⵠᐃ,
			"Δᐃᐃ": [24, 61, 60]
		};
		this.ᐃⵠᐃᐃⲆ[this.ᐃᐃⵠΔᐃⵠⲆ] = {
			"ⵠⲆⵠⵠⲆ": ["#EBD8A6", "#093D38"],
			"Δᐃᐃ": [9, 61, 56],
			"ⵠΔᐃⵠᐃΔᐃ": ᐃⲆΔ,
			"ⵠΔⵠ": [235, 216, 166]
		};
		this.ᐃᐃⲆⵠⲆⵠⲆ = function(ᐃᐃⲆ, Ⲇᐃ, ⲆⲆⲆ, ᐃΔΔ, ΔⵠⲆ, ⵠΔΔ) {
			this.x1 = Ⲇᐃ * ⲆⵠⲆⵠᐃ;
			this.y1 = ⲆⲆⲆ * ⵠᐃⵠⲆᐃᐃΔ;
			this.w = ᐃΔΔ * ⵠΔᐃᐃⲆ;
			this.ΔⵠⲆ = 100 * ΔⵠⲆ;
			this.x2 = ⵠΔᐃᐃⲆ * (Ⲇᐃ + ᐃΔΔ);
			this.y2 = (ⲆⲆⲆ + ΔⵠⲆ) * ΔⵠⲆⵠⲆ;
			this.ᐃᐃⲆ = ᐃᐃⲆ;
			ⵠⵠᐃⵠΔ === ⵠΔΔ ? this.ⵠΔΔ = 15 : this.ⵠΔΔ = ⵠΔΔ
		};

		function ΔᐃⲆⵠⵠΔⲆⵠᐃ(ⲆⵠΔⵠ, ᐃᐃⵠᐃᐃΔᐃ, ⵠⵠⲆⲆΔΔᐃ, ⲆⲆᐃⵠᐃ, ᐃⲆᐃᐃΔⲆⵠ) {
			for (var ᐃⲆ = ⲆⲆᐃⲆ; ᐃⲆ < ᐃⲆᐃᐃΔⲆⵠ; ᐃⲆ++) {
				if (ᐃⲆⵠΔᐃᐃⲆⲆᐃ(ⲆⵠΔⵠ, ᐃᐃⵠᐃᐃΔᐃ, ⵠⵠⲆⲆΔΔᐃ, ⲆⲆᐃⵠᐃ, 8) === 1) break
			}
			if (ᐃⲆᐃᐃΔⲆⵠ === ᐃⲆ) return ⲆⲆΔ;
			return ΔᐃⵠⲆ
		}

		function ᐃⲆⵠΔᐃᐃⲆⲆᐃ(ⲆⵠΔⵠ, ᐃᐃⵠᐃᐃΔᐃ, ⵠⵠⲆⲆΔΔᐃ, ⲆⲆᐃⵠᐃ, ⲆⵠⵠΔⵠΔΔ) {
			var ᐃΔΔ = ᐃᐃⵠᐃᐃΔᐃ + Math.floor(ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * ⲆⲆᐃⵠᐃ);
			var ΔⵠⲆ = ⵠⵠⲆⲆΔΔᐃ + Math.floor(ⲆⲆᐃⵠᐃ * ⵠⲆΔ.ᐃⲆᐃⲆΔ.get());
			var ᐃⲆᐃᐃ = 10 + Math.floor((ⵠⲆΔ.ᐃᐃΔⵠᐃ - ᐃΔΔ - ⲆⲆⲆⲆᐃ) * ⵠⲆΔ.ᐃⲆᐃⲆΔ.get());
			var ΔⵠΔⲆ = ⲆΔⲆᐃⵠ + Math.floor(ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * (ⵠⲆΔ.ΔΔΔⲆⲆ - ΔⵠⲆ - ⵠⲆⵠΔⲆ));
			var ⲆⲆⵠΔ = ᐃⲆᐃᐃ + ᐃΔΔ;
			var ᐃⵠⵠΔ = ΔⵠΔⲆ + ΔⵠⲆ;
			for (var ᐃⲆ = 0; ⵠⲆΔ.ᐃᐃⲆᐃ.length > ᐃⲆ; ᐃⲆ++) {
				var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⲆ];
				if (ΔⲆᐃ.ⵠᐃᐃᐃΔⵠⵠ(ᐃⲆᐃᐃ, ⲆⲆⵠΔ, ΔⵠΔⲆ, ᐃⵠⵠΔ, ΔⲆᐃΔ.x1 / ᐃⵠⵠΔⲆ - ⲆⵠⵠΔⵠΔΔ, ΔⲆᐃΔ.x2 / 100 + ⲆⵠⵠΔⵠΔΔ, ΔⲆᐃΔ.y1 / ΔᐃⵠΔⲆ - ⲆⵠⵠΔⵠΔΔ, ΔⲆᐃΔ.y2 / 100 + ⲆⵠⵠΔⵠΔΔ) === 1) return 0
			}
			ⵠⲆΔ.ᐃᐃⲆᐃ.push(new ⵠⲆΔ.ᐃᐃⲆⵠⲆⵠⲆ(ⲆⵠΔⵠ, ᐃⲆᐃᐃ, ΔⵠΔⲆ, ᐃΔΔ, ΔⵠⲆ, 15));
			return ΔΔⵠ
		}

		function ΔᐃⵠᐃⵠⵠΔⲆⲆ(ⲆᐃⵠⲆⲆΔⲆ, ⲆⵠⵠᐃⲆ, ⲆᐃⵠⲆΔ) {
			var stop = ᐃⲆΔ;
			var ᐃⵠΔⲆΔ = ⲆⵠⵠᐃⲆ;
			for (var ⲆⲆⲆ = ⲆᐃⵠⲆΔ; ⵠⲆΔ.ΔΔΔⲆⲆ > ⲆⲆⲆ; ⲆⲆⲆ++) {
				for (var Ⲇᐃ = ⲆⵠⵠᐃⲆ; ⵠⲆΔ.ᐃᐃΔⵠᐃ > Ⲇᐃ; Ⲇᐃ++) {
					ⲆᐃⵠⲆΔ === ⲆⲆⲆ && (ᐃⵠΔⲆΔ = Math.max(Ⲇᐃ, ᐃⵠΔⲆΔ));
					if (Ⲇᐃ > ᐃⵠΔⲆΔ) break;
					if (ΔΔⵠ === ⲆᐃⵠⲆⲆΔⲆ[ⲆⲆⲆ][Ⲇᐃ]) break;
					ⲆᐃⵠⲆⲆΔⲆ[ⲆⲆⲆ][Ⲇᐃ] = ⲆⲆⲆᐃ
				}
				if (Ⲇᐃ < ᐃⵠΔⲆΔ) break
			}
			ⵠⲆΔ.ᐃᐃⲆᐃ.push(new ⵠⲆΔ.ᐃᐃⲆⵠⲆⵠⲆ(ⵠⲆΔ.ⲆΔᐃᐃΔ, ⲆⵠⵠᐃⲆ, ⲆᐃⵠⲆΔ, ᐃⵠΔⲆΔ - ⲆⵠⵠᐃⲆ + ΔΔⵠ, ⲆⲆⲆ - ⲆᐃⵠⲆΔ, 15))
		}
		this.ⵠᐃᐃⵠⲆ = -1e6;
		this.ΔΔⵠⵠⵠ = this.ⵠᐃᐃⵠⲆ;
		this.ᐃⵠΔᐃⲆ = this.ⵠᐃᐃⵠⲆ;
		this.ⵠΔᐃⲆⵠ = this.ⵠᐃᐃⵠⲆ;
		this.ⵠⲆⵠⵠᐃᐃⵠ = this.ⵠᐃᐃⵠⲆ;
		this.ᐃⲆⲆΔⵠΔⲆ = this.ⵠᐃᐃⵠⲆ;
		this.ⵠⵠⵠⵠΔ = this.ⵠᐃᐃⵠⲆ;
		this.ⵠᐃⵠᐃⲆⲆᐃⲆᐃ = function(ᐃΔΔⵠ) {
			var Ⲇᐃ = ᐃΔΔⵠ.r.x;
			var ⲆⲆⲆ = ᐃΔΔⵠ.r.y;
			var ᐃⲆ = Math.floor(ⲆⲆⲆ / 100);
			var ⲆⲆⲆⵠ = Math.floor(Ⲇᐃ / 100);
			ᐃΔΔⵠ.ΔΔⵠⵠⵠ = ⵠⲆΔ.ⵠᐃᐃⵠⲆ;
			ᐃΔΔⵠ.ᐃⵠΔᐃⲆ = ⵠⲆΔ.ⵠᐃᐃⵠⲆ;
			ᐃΔΔⵠ.ⵠΔᐃⲆⵠ = ⵠⲆΔ.ⵠᐃᐃⵠⲆ;
			ᐃΔΔⵠ.ⵠⲆⵠⵠᐃᐃⵠ = ⵠⲆΔ.ⵠᐃᐃⵠⲆ;
			ᐃΔΔⵠ.ⵠⵠⵠⵠΔ = ⵠⲆΔ.ⵠᐃᐃⵠⲆ;
			ᐃΔΔⵠ.ᐃᐃⵠⲆⵠⲆΔ = ⵠⲆΔ.ⵠᐃᐃⵠⲆ;
			for (var ⲆⲆᐃΔ = ᐃⲆΔ; ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆᐃΔ].ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ; ⲆⲆᐃΔ++) {
				if (ⵠⲆΔ.ⲆΔΔⲆⵠ === ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆᐃΔ].ᐃᐃⲆ) {
					var ⲆⵠⵠⲆΔᐃΔ = ⵠⲆΔ.ΔΔᐃΔⲆ(ⲆⲆᐃΔ, Ⲇᐃ, ⲆⲆⲆ);
					ᐃΔΔⵠ.ⵠⲆⵠⵠᐃᐃⵠ = Math.max(ᐃΔΔⵠ.ⵠⲆⵠⵠᐃᐃⵠ, ⲆⵠⵠⲆΔᐃΔ);
					if (ⲆⵠⵠⲆΔᐃΔ > 0 && 1 === ⵠⲆΔ.ᐃΔΔᐃΔᐃᐃⲆⲆ(ⲆⲆᐃΔ, Ⲇᐃ, ⲆⲆⲆ)) ᐃΔΔⵠ.ᐃᐃⵠⲆⵠⲆΔ = 1
				} else if (ⵠⲆΔ.ΔⵠⵠᐃΔΔΔ === ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆᐃΔ].ᐃᐃⲆ) {
					ᐃΔΔⵠ.ΔΔⵠⵠⵠ = Math.max(ᐃΔΔⵠ.ΔΔⵠⵠⵠ, ⵠⲆΔ.ΔΔᐃΔⲆ(ⲆⲆᐃΔ, Ⲇᐃ, ⲆⲆⲆ))
				} else if (ⵠⲆΔ.ᐃᐃⵠΔᐃⵠⲆ === ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆᐃΔ].ᐃᐃⲆ) {
					ᐃΔΔⵠ.ᐃⵠΔᐃⲆ = Math.max(ᐃΔΔⵠ.ᐃⵠΔᐃⲆ, ⵠⲆΔ.ΔΔᐃΔⲆ(ⲆⲆᐃΔ, Ⲇᐃ, ⲆⲆⲆ))
				} else if (ⵠⲆΔ.ⵠΔᐃΔᐃⵠⵠ === ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆᐃΔ].ᐃᐃⲆ) {
					ᐃΔΔⵠ.ⵠΔᐃⲆⵠ = Math.max(ᐃΔΔⵠ.ⵠΔᐃⲆⵠ, ⵠⲆΔ.ΔΔᐃΔⲆ(ⲆⲆᐃΔ, Ⲇᐃ, ⲆⲆⲆ))
				} else if (ⵠⲆΔ.ΔⲆⵠᐃⵠⵠⵠ === ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆᐃΔ].ᐃᐃⲆ) {
					ᐃΔΔⵠ.ⵠⵠⵠⵠΔ = Math.max(ᐃΔΔⵠ.ⵠⵠⵠⵠΔ, ⵠⲆΔ.ΔΔᐃΔⲆ(ⲆⲆᐃΔ, Ⲇᐃ, ⲆⲆⲆ))
				}
			}
			if (ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ][ᐃ[231]]) ᐃΔΔⵠ.ᐃᐃⵠⲆⵠⲆΔ = ᐃΔⵠΔ;
			if (ⵠⲆΔ.ᐃΔⵠⵠΔΔⵠΔⲆ(ⲆⲆⲆⵠ, ᐃⲆ)) ᐃΔΔⵠ.ᐃⲆⲆΔⵠΔⲆ = ᐃΔΔⵠ.ⵠᐃᐃⵠⲆ;
			else if (ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ][ᐃ[ⵠⵠⵠⲆΔⵠᐃ]] || ᐃΔΔⵠ.ΔΔⵠⵠⵠ < ΔᐃⲆⲆ && ᐃΔΔⵠ.ⵠΔᐃⲆⵠ < 0 && 0 > ᐃΔΔⵠ.ⵠⲆⵠⵠᐃᐃⵠ && ᐃΔΔⵠ.ᐃᐃⵠⲆⵠⲆΔ < 0 && ᐃΔΔⵠ.ⵠⵠⵠⵠΔ < ᐃⲆΔ && ᐃΔΔⵠ.ᐃⵠΔᐃⲆ < ⵠᐃⵠ) ᐃΔΔⵠ.ᐃⲆⲆΔⵠΔⲆ = 1;
			else ᐃΔΔⵠ.ᐃⲆⲆΔⵠΔⲆ = ᐃΔΔⵠ.ⵠᐃᐃⵠⲆ
		};
		this.ⲆᐃⲆΔⲆᐃΔⲆⲆ = function(Ⲇᐃ, ⲆⲆⲆ) {
			ⵠⲆΔ.ΔΔⵠⵠⵠ = ⵠⲆΔ.ⵠᐃᐃⵠⲆ;
			ⵠⲆΔ.ᐃⵠΔᐃⲆ = ⵠⲆΔ.ⵠᐃᐃⵠⲆ;
			ⵠⲆΔ.ⵠΔᐃⲆⵠ = ⵠⲆΔ.ⵠᐃᐃⵠⲆ;
			ⵠⲆΔ.ⵠⵠⵠⵠΔ = ⵠⲆΔ.ⵠᐃᐃⵠⲆ;
			ⵠⲆΔ.ⵠⲆⵠⵠᐃᐃⵠ = ⵠⲆΔ.ⵠᐃᐃⵠⲆ;
			for (var ⲆⲆᐃΔ = 0; ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆᐃΔ].ᐃᐃⲆ !== ⵠⲆΔ.ⲆΔᐃᐃΔ; ⲆⲆᐃΔ++) {
				if (ⵠⲆΔ.ⲆΔΔⲆⵠ === ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆᐃΔ].ᐃᐃⲆ) ⵠⲆΔ.ⵠⲆⵠⵠᐃᐃⵠ = Math.max(ⵠⲆΔ.ⵠⲆⵠⵠᐃᐃⵠ, ⵠⲆΔ.ΔΔᐃΔⲆ(ⲆⲆᐃΔ, Ⲇᐃ, ⲆⲆⲆ));
				else if (ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆᐃΔ].ᐃᐃⲆ === ⵠⲆΔ.ΔⵠⵠᐃΔΔΔ) ⵠⲆΔ.ΔΔⵠⵠⵠ = Math.max(ⵠⲆΔ.ΔΔⵠⵠⵠ, ⵠⲆΔ.ΔΔᐃΔⲆ(ⲆⲆᐃΔ, Ⲇᐃ, ⲆⲆⲆ));
				else if (ⵠⲆΔ.ᐃᐃⵠΔᐃⵠⲆ === ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆᐃΔ].ᐃᐃⲆ) ⵠⲆΔ.ᐃⵠΔᐃⲆ = Math.max(ⵠⲆΔ.ᐃⵠΔᐃⲆ, ⵠⲆΔ.ΔΔᐃΔⲆ(ⲆⲆᐃΔ, Ⲇᐃ, ⲆⲆⲆ));
				else if (ⵠⲆΔ.ⵠΔᐃΔᐃⵠⵠ === ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆᐃΔ].ᐃᐃⲆ) {
					ⵠⲆΔ.ⵠΔᐃⲆⵠ = Math.max(ⵠⲆΔ.ⵠΔᐃⲆⵠ, ⵠⲆΔ.ΔΔᐃΔⲆ(ⲆⲆᐃΔ, Ⲇᐃ, ⲆⲆⲆ))
				} else if (ⵠⲆΔ.ΔⲆⵠᐃⵠⵠⵠ === ⵠⲆΔ.ᐃᐃⲆᐃ[ⲆⲆᐃΔ].ᐃᐃⲆ) ⵠⲆΔ.ⵠⵠⵠⵠΔ = Math.max(ⵠⲆΔ.ⵠⵠⵠⵠΔ, ⵠⲆΔ.ΔΔᐃΔⲆ(ⲆⲆᐃΔ, Ⲇᐃ, ⲆⲆⲆ))
			}
			ⵠⲆΔ.ΔΔⵠⵠⵠ < 0 && 0 > ⵠⲆΔ.ⵠⵠⵠⵠΔ && Δⵠⵠ > ⵠⲆΔ.ⵠⲆⵠⵠᐃᐃⵠ && ⵠⲆΔ.ⵠⵠⵠⵠΔ < 0 && ⵠⲆΔ.ᐃⵠΔᐃⲆ < 0 ? ⵠⲆΔ.ᐃⲆⲆΔⵠΔⲆ = ⲆⵠⲆ : ⵠⲆΔ.ᐃⲆⲆΔⵠΔⲆ = ⵠⲆΔ.ⵠᐃᐃⵠⲆ
		};
		this.ᐃΔΔᐃΔᐃᐃⲆⲆ = function(ⵠⲆⲆΔⲆⵠΔ, Ⲇᐃ, ⲆⲆⲆ) {
			var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ⵠⲆⲆΔⲆⵠΔ];
			var ᐃᐃΔᐃⵠᐃᐃ = 0;
			ᐃⲆᐃᐃ = ΔⲆᐃΔ.x1 + 30 + ((ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⲆⲆⵠΔⵠ) === 0 ? 150 : 0);
			var Ⲇᐃᐃᐃ = Ⲇᐃ - ᐃⲆᐃᐃ;
			if ((ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⲆⲆⵠΔⵠ) > 0 && 0 < Ⲇᐃᐃᐃ && 320 > Ⲇᐃᐃᐃ) ᐃᐃΔᐃⵠᐃᐃ = 1;
			ΔⵠΔⲆ = ΔⲆᐃΔ.y1 + 250 + (0 === (ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔΔⵠᐃⲆ) ? 150 : 0);
			Ⲇᐃᐃᐃ = ⲆⲆⲆ - ΔⵠΔⲆ;
			if (ⲆⲆΔ < (ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔΔⵠᐃⲆ) && Ⲇᐃᐃᐃ > ⵠᐃⵠ && 320 > Ⲇᐃᐃᐃ) ᐃᐃΔᐃⵠᐃᐃ = ⵠⲆⵠⲆ;
			ⲆⲆⵠΔ = ΔⲆᐃΔ.x2 + 80 + ((ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔᐃⲆᐃⲆ) === 0 ? -200 : ⵠΔΔⲆ);
			Ⲇᐃᐃᐃ = ⲆⲆⵠΔ - Ⲇᐃ;
			(ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ΔᐃⲆᐃⲆ) > Ⲇⵠᐃ && ⲆⲆΔ < Ⲇᐃᐃᐃ && 320 > Ⲇᐃᐃᐃ && (ᐃᐃΔᐃⵠᐃᐃ = ⵠⲆⵠⲆ);
			ᐃⵠⵠΔ = ΔⲆᐃΔ.y2 - 200 + (0 === (ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⵠⵠΔⲆᐃ) ? -200 : 0);
			Ⲇᐃᐃᐃ = ᐃⵠⵠΔ - ⲆⲆⲆ;
			if (ⲆᐃΔⵠ < (ΔⲆᐃΔ.ⵠΔΔ & ᐃΔᐃᐃ.ⵠⵠΔⲆᐃ) && 0 < Ⲇᐃᐃᐃ && 320 > Ⲇᐃᐃᐃ) ᐃᐃΔᐃⵠᐃᐃ = ᐃΔⵠΔ;
			if (ᐃⲆᐃᐃ <= Ⲇᐃ && ⲆⲆⵠΔ >= Ⲇᐃ && ΔⵠΔⲆ <= ⲆⲆⲆ && ⲆⲆⲆ <= ᐃⵠⵠΔ) return ᐃᐃΔᐃⵠᐃᐃ;
			return ᐃⲆΔ
		};
		this.ΔΔᐃΔⲆ = function(ⵠⲆⲆΔⲆⵠΔ, Ⲇᐃ, ⲆⲆⲆ) {
			var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ⵠⲆⲆΔⲆⵠΔ];
			ᐃⲆᐃᐃ = ΔⲆᐃΔ.x1 + 30;
			ΔⵠΔⲆ = ΔⲆᐃΔ.y1 + 250;
			ⲆⲆⵠΔ = ΔⲆᐃΔ.x2 + 80;
			ᐃⵠⵠΔ = ΔⲆᐃΔ.y2 - 200;
			if (ᐃⲆᐃᐃ <= Ⲇᐃ && Ⲇᐃ <= ⲆⲆⵠΔ && ΔⵠΔⲆ <= ⲆⲆⲆ && ᐃⵠⵠΔ >= ⲆⲆⲆ) return Math.min(Ⲇᐃ - ᐃⲆᐃᐃ, ⲆⲆⵠΔ - Ⲇᐃ, ⲆⲆⲆ - ΔⵠΔⲆ, ᐃⵠⵠΔ - ⲆⲆⲆ);
			var ⲆⵠⲆⲆ = -1e6;
			if (0 > Ⲇᐃ - ᐃⲆᐃᐃ) ⲆⵠⲆⲆ = Math.max(ⲆⵠⲆⲆ, Ⲇᐃ - ᐃⲆᐃᐃ);
			else ⲆⲆⵠΔ - Ⲇᐃ < ⵠⵠⲆΔ && (ⲆⵠⲆⲆ = Math.max(ⲆⵠⲆⲆ, ⲆⲆⵠΔ - Ⲇᐃ));
			ⵠⲆⵠΔⵠⵠΔ = -1e6;
			if (ⲆⲆⲆ < ΔⵠΔⲆ || ᐃⵠⵠΔ < ⲆⲆⲆ) {
				ⲆⲆⲆ - ΔⵠΔⲆ < ⵠⵠΔΔ ? ⵠⲆⵠΔⵠⵠΔ = Math.max(ⵠⲆⵠΔⵠⵠΔ, ⲆⲆⲆ - ΔⵠΔⲆ) : ⵠⲆⵠΔⵠⵠΔ = Math.max(ⵠⲆⵠΔⵠⵠΔ, ᐃⵠⵠΔ - ⲆⲆⲆ); - 1e6 !== ⲆⵠⲆⲆ && ⵠⲆⵠΔⵠⵠΔ !== -1e6 ? ⲆⵠⲆⲆ = Math.min(ⲆⵠⲆⲆ, ⵠⲆⵠΔⵠⵠΔ) : ⲆⵠⲆⲆ = ⵠⲆⵠΔⵠⵠΔ
			}
			return ⲆⵠⲆⲆ
		};

		function ᐃᐃΔⵠⵠΔⵠ(ᐃⲆ, ⲆⲆⲆⵠ, ⵠᐃⲆΔΔ, ΔᐃᐃⵠⵠΔⲆⵠᐃ, ⲆⵠᐃⲆⵠⵠᐃⲆⲆ, ΔⵠⲆᐃⵠ, ᐃΔΔ, ΔⵠⲆ) {
			var w1 = Math.floor(ᐃΔΔ / ᐃᐃⲆⵠ);
			var w2 = Math.max(1, Math.floor(ᐃΔΔ / 2));
			var ᐃⲆⲆΔᐃⵠᐃΔᐃ = Math.floor(ΔⵠⲆ / ⵠⲆᐃⵠ);
			var ΔⲆΔⵠⵠ = Math.max(1, Math.floor(ΔⵠⲆ / 2));
			for (var ⲆⲆᐃΔ = ⲆᐃΔⵠ; ⲆⲆᐃΔ < ⵠᐃⲆΔΔ; ⲆⲆᐃΔ++) {
				for (var ⲆᐃⲆᐃ = ᐃⲆ - ᐃⲆⲆΔᐃⵠᐃΔᐃ; ᐃⲆ + ΔⲆΔⵠⵠ > ⲆᐃⲆᐃ; ⲆᐃⲆᐃ++) {
					for (var ⲆΔΔᐃ = ⲆⲆⲆⵠ - w1; ⲆΔΔᐃ < ⲆⲆⲆⵠ + w2; ⲆΔΔᐃ++) {
						ⲆⲆⲆᐃ === ΔΔⲆⵠ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, ᐃ[ⵠⵠⵠⲆΔⵠᐃ], 0, ᐃⵠᐃᐃ) && ΔⵠⲆᐃⵠ.push([ⲆᐃⲆᐃ, ⲆΔΔᐃ, 1])
					}
				}
				ᐃⲆ += ΔᐃᐃⵠⵠΔⲆⵠᐃ;
				ⲆⲆⲆⵠ += ⲆⵠᐃⲆⵠⵠᐃⲆⲆ
			}
		}

		function ᐃᐃΔΔᐃⲆⵠ(ᐃⵠⲆΔ, ΔⵠⲆᐃⵠ) {
			var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⵠⲆΔ];
			var ᐃⲆ = Math.floor(ΔⲆᐃΔ.y1 / ᐃⲆⲆⵠⵠⵠⲆ);
			var ⲆⲆⲆⵠ = Math.floor(ΔⲆᐃΔ.x1 / 100);
			var ΔⵠⲆ = Math.floor(ΔⲆᐃΔ.ΔⵠⲆ / ᐃⲆⲆⵠⵠⵠⲆ);
			var ᐃΔΔ = Math.floor(ΔⲆᐃΔ.w / ΔⵠⵠΔᐃ);
			var ᐃΔΔⲆⵠⵠᐃⲆⵠ = ᐃⲆ + ΔⵠⲆ;
			var ΔⵠⵠΔⵠΔⵠⵠΔ = ⲆⲆⲆⵠ + ᐃΔΔ;
			var ⵠⵠᐃᐃⵠⵠᐃ = 2;
			var ⲆᐃΔⵠⲆ = ΔⵠⲆ;
			var ⲆᐃⲆᐃ = ᐃⲆ;
			var ⲆΔΔᐃ = ⲆⲆⲆⵠ + ⵠᐃⲆⵠᐃ + Math.floor(ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * (ᐃΔΔ - 20));
			for (var ⵠΔΔΔᐃ = ⲆΔΔᐃ - ⵠⵠⵠᐃⲆ; ⵠΔΔΔᐃ < ⲆΔΔᐃ + 4; ⵠΔΔΔᐃ++) ΔΔⲆⵠ(ᐃⲆ - 1, ⵠΔΔΔᐃ, ᐃ[ᐃⵠⵠⵠᐃΔⵠ], 0, 1);
			while (ⲆⲆᐃⲆ < ⲆᐃΔⵠⲆ) {
				if (2 === ⵠⵠᐃᐃⵠⵠᐃ) {
					for (var ⲆⲆᐃΔ = ⵠΔⲆⲆΔ; ᐃⵠᐃᐃ < ⲆⲆᐃΔ; ⲆⲆᐃΔ--) {
						ᐃᐃΔⵠⵠΔⵠ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, 1, 1, 0, ΔⵠⲆᐃⵠ, ⲆⲆᐃΔ, 1);
						ⲆᐃΔⵠⲆ -= ΔΔⵠ;
						ⲆᐃⲆᐃ += ΔΔⵠ
					}
					ⵠⵠᐃᐃⵠⵠᐃ = ⵠΔⵠᐃ;
					continue
				}
				if (ᐃᐃᐃⲆⵠ > ⲆᐃΔⵠⲆ) {
					for (var ⲆⲆᐃΔ = 1; 0 < ⲆᐃΔⵠⲆ; ⲆⲆᐃΔ++) {
						ᐃᐃΔⵠⵠΔⵠ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, 1, ⵠⵠⵠⲆ, 0, ΔⵠⲆᐃⵠ, ⲆⲆᐃΔ, ᐃⲆⲆ);
						ⲆᐃΔⵠⲆ -= ᐃⵠⵠⵠ;
						ⲆᐃⲆᐃ += ᐃⵠᐃᐃ
					}
					continue
				}
				if (ⵠⵠᐃᐃⵠⵠᐃ === ⲆⲆⵠ) {
					var ⲆⲆᐃⲆⵠⵠᐃ = Math.min(ⲆᐃΔⵠⲆ, Math.floor(1 + ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * 4));
					var ᐃΔΔ = ⲆⵠⲆ + Math.floor(4 * ⵠⲆΔ.ᐃⲆᐃⲆΔ.get());
					ᐃᐃΔⵠⵠΔⵠ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, ⲆⲆᐃⲆⵠⵠᐃ, 1, 0, ΔⵠⲆᐃⵠ, ᐃΔΔ, ᐃΔΔ);
					ⵠⵠᐃᐃⵠⵠᐃ = 0;
					ⲆᐃΔⵠⲆ -= ⲆⲆᐃⲆⵠⵠᐃ;
					ⲆᐃⲆᐃ += ⲆⲆᐃⲆⵠⵠᐃ;
					continue
				}
				ⵠⵠᐃᐃⵠⵠᐃ = ΔⲆⵠⲆ;
				var ⲆᐃΔⵠΔ = Math.floor(1 + ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * ᐃⵠΔⲆ);
				var ΔⵠⲆᐃᐃⵠⲆ = 1 + Math.floor(4 * ⵠⲆΔ.ᐃⲆᐃⲆΔ.get());
				if (ⲆΔΔᐃ < ⲆⲆⲆⵠ + 16) {
					ᐃᐃΔⵠⵠΔⵠ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, ⲆᐃΔⵠΔ, 0, ᐃΔΔⲆ, ΔⵠⲆᐃⵠ, ΔⵠⲆᐃᐃⵠⲆ, ΔⵠⲆᐃᐃⵠⲆ);
					ⲆΔΔᐃ += ⲆᐃΔⵠΔ
				} else if (ⲆΔΔᐃ > ΔⵠⵠΔⵠΔⵠⵠΔ - ⵠᐃⵠⲆⵠⵠⲆ) {
					ᐃᐃΔⵠⵠΔⵠ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, ⲆᐃΔⵠΔ, 0, -ⲆⵠⲆ, ΔⵠⲆᐃⵠ, ΔⵠⲆᐃᐃⵠⲆ, ΔⵠⲆᐃᐃⵠⲆ);
					ⲆΔΔᐃ -= ⲆᐃΔⵠΔ
				} else if (.5 < ⵠⲆΔ.ᐃⲆᐃⲆΔ.get()) {
					ᐃᐃΔⵠⵠΔⵠ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, ⲆᐃΔⵠΔ, ⵠᐃΔ, ᐃΔΔⲆ, ΔⵠⲆᐃⵠ, ΔⵠⲆᐃᐃⵠⲆ, ΔⵠⲆᐃᐃⵠⲆ);
					ⲆΔΔᐃ += ⲆᐃΔⵠΔ
				} else {
					ᐃᐃΔⵠⵠΔⵠ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, ⲆᐃΔⵠΔ, 0, -1, ΔⵠⲆᐃⵠ, ΔⵠⲆᐃᐃⵠⲆ, ΔⵠⲆᐃᐃⵠⲆ);
					ⲆΔΔᐃ -= ⲆᐃΔⵠΔ
				}
			}
			for (var ⵠΔΔΔᐃ = ⲆΔΔᐃ - ᐃⵠᐃᐃ; ⲆΔΔᐃ + ⵠⲆΔᐃ > ⵠΔΔΔᐃ; ⵠΔΔΔᐃ++) ΔΔⲆⵠ(ⲆᐃⲆᐃ, ⵠΔΔΔᐃ, ᐃ[255], 0, 1)
		}

		function ⲆⲆΔᐃⲆⵠⵠ(ᐃⵠⲆΔ, ΔⵠⲆᐃⵠ) {
			for (var ⲆⲆᐃΔ = 0; ⲆⲆᐃΔ < ΔⵠⲆᐃⵠ.length; ⲆⲆᐃΔ++) {
				var ⲆᐃⲆᐃ = ΔⵠⲆᐃⵠ[ⲆⲆᐃΔ][0];
				var ⲆΔΔᐃ = ΔⵠⲆᐃⵠ[ⲆⲆᐃΔ][ⵠᐃᐃ];
				var ⵠⲆⵠᐃᐃⵠⲆ = ΔⵠⲆᐃⵠ[ⲆⲆᐃΔ][ⲆΔⲆΔ];
				ⲆⲆⲆᐃⲆⵠᐃⵠᐃ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, ᐃⵠⲆΔ, ⵠⲆⵠᐃᐃⵠⲆ)
			}
		}

		function ⵠⵠΔᐃᐃⲆᐃⲆⵠ(ᐃⲆᐃⵠ, ᐃⵠⲆΔ) {
			var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⵠⲆΔ];
			for (var ⵠΔΔΔⵠ = 0, ⲆⲆᐃΔ = 0; ⲆⲆᐃΔ < ᐃⲆᐃⵠ && ⵠΔΔΔⵠ < 1e4; ⵠΔΔΔⵠ++) {
				var ⲆⲆⲆ = ΔⲆᐃΔ.y1 + ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * ΔⲆᐃΔ.ΔⵠⲆ;
				var Ⲇᐃ = ΔⲆᐃΔ.x1 + ΔⲆᐃΔ.w * ⵠⲆΔ.ᐃⲆᐃⲆΔ.get();
				var ⲆᐃⲆᐃ = Math.floor(ⲆⲆⲆ / ᐃᐃΔⵠⵠ);
				var ⲆΔΔᐃ = Math.floor(Ⲇᐃ / ΔΔⲆΔⵠⵠⵠ);
				var ⲆⵠⲆⲆ = ⵠⲆΔ.ΔΔᐃΔⲆ(ᐃⵠⲆΔ, ⲆΔΔᐃ * 100 + 50, ᐃⲆⵠⵠΔ * ⲆᐃⲆᐃ + 50);
				if (600 > ⲆⵠⲆⲆ) continue;
				var ok = 1;
				for (var ᐃⲆ = ⲆᐃⲆᐃ - ⵠⲆᐃⲆ; ⵠⲆⵠⲆ === ok && ᐃⲆ <= ⲆᐃⲆᐃ + ΔⵠⲆⵠᐃ; ᐃⲆ++) {
					for (var ⲆⲆⲆⵠ = ⲆΔΔᐃ - ΔⵠⲆⵠᐃ; ⲆⲆⵠ === ok && ⲆⲆⲆⵠ <= ⲆΔΔᐃ + ΔᐃᐃΔ; ⲆⲆⲆⵠ++) {
						ΔⲆᐃΔᐃ !== ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ] && (ok = 0)
					}
				}
				if (0 === ok) continue;
				ΔΔⲆⵠ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, ᐃ[566], ⲆⲆᐃΔ % 6, ⵠⵠᐃ);
				ⲆⲆᐃΔ++
			}
		}

		function ᐃΔᐃⵠΔΔⲆΔΔ(ᐃⵠⲆΔ, ΔⵠⲆᐃⵠ) {
			var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⵠⲆΔ];
			var ᐃⲆ = Math.floor(ΔⲆᐃΔ.y1 / 100);
			var ⲆⲆⲆⵠ = Math.floor(ΔⲆᐃΔ.x1 / ⲆⵠⲆⵠᐃ);
			var ΔⵠⲆ = Math.floor(ΔⲆᐃΔ.ΔⵠⲆ / 100);
			var ᐃΔΔ = Math.floor(ΔⲆᐃΔ.w / ΔΔⲆΔⵠⵠⵠ);
			var ΔⲆΔⵠⵠ = ᐃⲆ + Math.floor(ΔⵠⲆ / ΔⵠⲆⲆ);
			var w2 = ⲆⲆⲆⵠ + Math.floor(ᐃΔΔ / 2);
			for (var ⲆⲆᐃΔ = 0; ⲆⲆᐃΔ < 3; ⲆⲆᐃΔ++) {
				var ⲆᐃⲆᐃ = Math.floor(ΔⲆΔⵠⵠ - ⲆⲆΔΔ + ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * ⲆⲆᐃⵠⵠ);
				var ⲆΔΔᐃ = Math.floor(w2 - 3 + ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * ⵠΔⵠⵠⲆ);
				ΔΔⲆⵠ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, ᐃ[502], ⲆⲆᐃΔ, ᐃⵠᐃᐃ)
			}
			for (var ⲆⲆᐃΔ = 0; ⲆⲆᐃΔ < 80; ⲆⲆᐃΔ++) {
				var ⲆᐃⲆᐃ = Math.floor(ΔⲆΔⵠⵠ - 3 + ΔⲆⵠΔᐃ * ⵠⲆΔ.ᐃⲆᐃⲆΔ.get());
				var ⲆΔΔᐃ = Math.floor(w2 - ⵠᐃᐃΔ + ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * 6);
				if (ΔΔⲆⵠ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, ᐃ[ᐃⲆⲆᐃᐃⵠᐃ], 0, ⲆⲆΔⵠ) === ΔΔⵠ) ΔⵠⲆᐃⵠ.push([ⲆᐃⲆᐃ, ⲆΔΔᐃ, 0])
			}
		}
		this.ⵠΔⲆⵠΔΔᐃ = function(ⲆⵠΔⵠ, Ⲇᐃ, ⲆⲆⲆ) {
			var ⲆᐃⲆᐃ = ⲆⲆⲆ;
			var ⲆΔΔᐃ = Ⲇᐃ;
			ΔΔⲆⵠ(ⲆᐃⲆᐃ, ⲆΔΔᐃ, ᐃ[104], ⲆⵠΔⵠ, 1);
			for (var ⲆⲆᐃΔ = ΔᐃⲆⲆ; 4 > ⲆⲆᐃΔ; ⲆⲆᐃΔ++) {
				for (var ᐃᐃⵠᐃ = ⵠᐃΔ; ᐃᐃⵠᐃ < 3; ᐃᐃⵠᐃ++) {
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ᐃᐃⵠᐃ, ⲆΔΔᐃ - ⲆⲆᐃΔ, ᐃ[231], 0);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + ᐃᐃⵠᐃ, ⲆΔΔᐃ - ⲆⲆᐃΔ, ᐃ[231], ᐃⲆΔ);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + ᐃᐃⵠᐃ, ⲆΔΔᐃ + ⲆⲆᐃΔ, ᐃ[231], ⵠⵠΔΔ);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ᐃᐃⵠᐃ, ⲆΔΔᐃ + ⲆⲆᐃΔ, ᐃ[231], ⲆᐃΔⵠ)
				}
			}
			if (ⲆⵠΔⵠ === ⲆⲆΔ) {
				for (var ⲆⲆᐃΔ = ⵠΔΔⲆ; ⲆⲆᐃΔ < ⵠⲆᐃⵠ; ⲆⲆᐃΔ++) {
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ⲆⲆᐃΔ, ⲆΔΔᐃ - 4, ᐃ[231], 0);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + ⲆⲆᐃΔ, ⲆΔΔᐃ - ⵠⲆᐃⲆ, ᐃ[231], Δⵠⵠ);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ⲆⲆᐃΔ, ⲆΔΔᐃ + ΔⲆⵠΔⲆ, ᐃ[231], 0);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + ⲆⲆᐃΔ, ⲆΔΔᐃ + ΔΔⲆΔ, ᐃ[231], ⵠΔΔⲆ)
				}
				for (var ⲆⲆᐃΔ = ᐃⲆΔᐃ; ⲆⲆᐃΔ < ⵠⲆᐃΔ; ⲆⲆᐃΔ++) {
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ⵠᐃᐃⵠ, ⲆΔΔᐃ + ⲆⲆᐃΔ, ᐃ[231], ᐃⲆΔᐃ);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + ⵠᐃⵠⲆ, ⲆΔΔᐃ + ⲆⲆᐃΔ, ᐃ[231], 0);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ⵠΔΔᐃ, ⲆΔΔᐃ - ⲆⲆᐃΔ, ᐃ[231], ⵠⵠΔΔ);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + ⲆⲆΔΔ, ⲆΔΔᐃ - ⲆⲆᐃΔ, ᐃ[231], ⵠⵠᐃ)
				}
				ΔΔⲆⵠ(ⲆᐃⲆᐃ - 2, ⲆΔΔᐃ - 4, ᐃ[231], 0);
				ΔΔⲆⵠ(ⲆᐃⲆᐃ - 3, ⲆΔΔᐃ - 3, ᐃ[231], 0);
				ΔΔⲆⵠ(ⲆᐃⲆᐃ + 2, ⲆΔΔᐃ + ⵠΔᐃⲆ, ᐃ[231], ⵠᐃΔ);
				ΔΔⲆⵠ(ⲆᐃⲆᐃ + 3, ⲆΔΔᐃ + 3, ᐃ[231], ⲆⲆΔ)
			} else if (ⲆⲆⵠ === ⲆⵠΔⵠ) {
				for (var ⲆⲆᐃΔ = ⲆⲆΔ; ⲆⲆᐃΔ < ⵠⲆᐃΔ; ⲆⲆᐃΔ++) {
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ⲆⲆᐃΔ, ⲆΔΔᐃ - 4, ᐃ[231], ⵠᐃⲆⵠ);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + ⲆⲆᐃΔ, ⲆΔΔᐃ - ᐃᐃᐃᐃΔ, ᐃ[231], ᐃⲆΔᐃ);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ⲆⲆᐃΔ, ⲆΔΔᐃ + ΔⲆΔⲆ, ᐃ[231], 0);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + ⲆⲆᐃΔ, ⲆΔΔᐃ + ΔΔⲆΔ, ᐃ[231], ⵠᐃⲆⵠ)
				}
				for (var ⲆⲆᐃΔ = 0; ⲆⲆᐃΔ < ΔΔⲆΔ; ⲆⲆᐃΔ++) {
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ᐃᐃΔΔ, ⲆΔΔᐃ + ⲆⲆᐃΔ, ᐃ[231], 0);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + ⵠⵠⲆᐃ, ⲆΔΔᐃ + ⲆⲆᐃΔ, ᐃ[231], ⲆⲆᐃ);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ⵠᐃⵠⲆ, ⲆΔΔᐃ - ⲆⲆᐃΔ, ᐃ[231], 0);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + 3, ⲆΔΔᐃ - ⲆⲆᐃΔ, ᐃ[231], ⵠᐃΔ)
				}
			} else if (2 === ⲆⵠΔⵠ) {
				for (var ⲆⲆᐃΔ = ⵠᐃΔ; 2 > ⲆⲆᐃΔ; ⲆⲆᐃΔ++) {
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ⲆⲆᐃΔ, ⲆΔΔᐃ - 4, ᐃ[231], 0);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + ⲆⲆᐃΔ, ⲆΔΔᐃ - ΔᐃᐃΔ, ᐃ[231], 0);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ⲆⲆᐃΔ, ⲆΔΔᐃ + 4, ᐃ[231], ⵠⵠΔΔ);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + ⲆⲆᐃΔ, ⲆΔΔᐃ + 4, ᐃ[231], 0)
				}
				for (var ⲆⲆᐃΔ = ᐃⲆΔ; ⲆⲆᐃΔ < ⲆΔⲆᐃ; ⲆⲆᐃΔ++) {
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - 3, ⲆΔΔᐃ + ⲆⲆᐃΔ, ᐃ[231], ᐃⲆᐃ);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + ⵠᐃⵠⲆ, ⲆΔΔᐃ + ⲆⲆᐃΔ, ᐃ[231], 0);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ - ⲆⲆΔΔ, ⲆΔΔᐃ - ⲆⲆᐃΔ, ᐃ[231], 0);
					ΔΔⲆⵠ(ⲆᐃⲆᐃ + 3, ⲆΔΔᐃ - ⲆⲆᐃΔ, ᐃ[231], 0)
				}
			}
		};
		this.ΔⵠⲆΔⵠⲆⲆᐃᐃ = function(ᐃⲆᐃⵠ) {
			for (var ᐃⲆ = 0; ᐃⲆ < ⵠⲆΔ.ᐃᐃⲆᐃ.length && ᐃⲆᐃⵠ > 0; ᐃⲆ++) {
				var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⲆ];
				if (ⵠⲆΔ.ⲆΔᐃᐃΔ !== ΔⲆᐃΔ.ᐃᐃⲆ) continue;
				if (ΔⲆᐃΔ.w > 1800 && 1e3 < ΔⲆᐃΔ.ΔⵠⲆ) {
					var ⲆΔΔᐃ = Math.floor((ΔⲆᐃΔ.x1 + ΔⲆᐃΔ.w / 2) / 100);
					var ⲆᐃⲆᐃ = Math.floor((ΔⲆᐃΔ.y1 + ΔⲆᐃΔ.ΔⵠⲆ / ⵠⲆᐃⵠ) / ΔⲆⲆᐃᐃᐃΔ);
					ⵠⲆΔ.ⵠΔⲆⵠΔΔᐃ(ᐃⲆᐃⵠ % 3, ⲆΔΔᐃ, ⲆᐃⲆᐃ);
					for (var ⲆⲆᐃΔ = ᐃⲆΔ; ⲆⲆᐃΔ < ⵠᐃᐃΔ; ⲆⲆᐃΔ++) {
						var ⲆⲆⲆⲆⵠΔⲆ = ⲆᐃⲆᐃ - ΔΔᐃⲆⵠ + Math.floor(ⵠΔᐃⲆ * ⵠⲆΔ.ᐃⲆᐃⲆΔ.get());
						var ⵠΔΔΔᐃ = ⲆΔΔᐃ - Ⲇⵠᐃᐃ + Math.floor(6 * ⵠⲆΔ.ᐃⲆᐃⲆΔ.get());
						undefined === ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ⲆⲆⲆⲆⵠΔⲆ][ⵠΔΔΔᐃ]["s"] && ΔΔⲆⵠ(ⲆⲆⲆⲆⵠΔⲆ, ⵠΔΔΔᐃ, ᐃ[502], ⲆⲆᐃΔ);
						var ⲆⲆⲆⲆⵠΔⲆ = ⲆᐃⲆᐃ - 2 + Math.floor(ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * 4);
						var ⵠΔΔΔᐃ = ⲆΔΔᐃ - ⲆΔⲆᐃ + Math.floor(ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * ᐃⲆΔⵠΔ);
						undefined === ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ⲆⲆⲆⲆⵠΔⲆ][ⵠΔΔΔᐃ][ᐃ[502]] && ΔΔⲆⵠ(ⲆⲆⲆⲆⵠΔⲆ, ⵠΔΔΔᐃ, "s", ⲆⲆᐃΔ)
					}
					var ⲆⲆⲆⲆⵠΔⲆ = ⲆᐃⲆᐃ - 2 + Math.floor(ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * ΔⲆⵠΔⲆ);
					var ⵠΔΔΔᐃ = ⲆΔΔᐃ - 3 + Math.floor(ⲆⲆᐃⵠⵠ * ⵠⲆΔ.ᐃⲆᐃⲆΔ.get());
					ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ⲆⲆⲆⲆⵠΔⲆ][ⵠΔΔΔᐃ][ᐃ[502]] === undefined && ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ⲆⲆⲆⲆⵠΔⲆ][ⵠΔΔΔᐃ]["s"] === ΔΔⲆⲆⲆ && ΔΔⲆⵠ(ⲆⲆⲆⲆⵠΔⲆ, ⵠΔΔΔᐃ, "p", 0, ⵠⵠⵠⲆ);
					ᐃⲆᐃⵠ--
				}
			}
		};
		this.ⲆⲆᐃⵠⲆᐃⲆⵠᐃ = function(ᐃⲆΔᐃⲆ) {
			ⵠⲆΔ.ᐃⲆᐃⲆΔ.ᐃⵠΔᐃᐃ(ᐃⲆΔᐃⲆ);
			var ᐃⲆᐃᐃΔⲆⵠ = ⵠⵠΔΔ;
			while (1) {
				ᐃⲆᐃᐃΔⲆⵠ++;
				if (ᐃⲆᐃᐃΔⲆⵠ > 1e4) return;
				ⵠⲆΔ.ᐃᐃⲆᐃ = [];
				0 === ⵠⲆΔ.ⵠΔᐃⵠⵠ && (ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ === ⵠⲆΔ.mode || ⵠⲆΔ.mode === ᐃΔᐃᐃ.ΔⲆⲆᐃⵠ || ᐃΔᐃᐃ.ⵠΔᐃⵠΔ === ⵠⲆΔ.mode) && (ⵠⲆΔ.ⵠΔᐃⵠⵠ = ΔΔΔΔᐃᐃΔ);
				if (ⵠⲆΔ.mode === ᐃΔᐃᐃ.ᐃΔΔΔᐃ) {
					ⵠⲆΔ.ᐃᐃⲆᐃ.push(new ⵠⲆΔ.ᐃᐃⲆⵠⲆⵠⲆ(ⵠⲆΔ.ⲆΔΔⲆⵠ, 2, 2, 80, 80, 15))
				} else if (ⵠⲆΔ.mode === ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ) {
					ⵠⲆΔ.ᐃᐃⲆᐃ.push(new ⵠⲆΔ.ᐃᐃⲆⵠⲆⵠⲆ(ⵠⲆΔ.ⲆΔΔⲆⵠ, 2, ⲆᐃᐃⲆ, 150, 150, 15))
				} else {
					if (ⵠⲆΔ.ⵠΔᐃⵠⵠ !== ⵠΔΔⲆ && 0 < ⵠⲆΔ.ⵠΔᐃⵠⵠ.length && ⵠⲆΔ.ⵠΔᐃⵠⵠ[0].length > ⵠᐃⵠⲆ) {
						for (var ΔᐃⲆΔ = ⵠᐃⲆⵠ; ΔᐃⲆΔ < ⵠⲆΔ.ⵠΔᐃⵠⵠ.length; ΔᐃⲆΔ++) {
							var ⵠΔᐃΔᐃ = ⵠⲆΔ.ⵠΔᐃⵠⵠ[ΔᐃⲆΔ];
							if (ⵠΔᐃΔᐃ[ⵠⵠⵠ] === ᐃⲆᐃ) {
								var ᐃΔΔᐃⲆ = ᐃΔᐃᐃ.ⲆΔΔⲆⵠ;
								switch (ⵠΔᐃΔᐃ[1]) {
									case "FOREST":
										ᐃΔΔᐃⲆ = ⵠⲆΔ.ⲆΔΔⲆⵠ;
										break;
									case "WINTER":
										ᐃΔΔᐃⲆ = ⵠⲆΔ.ΔⵠⵠᐃΔΔΔ;
										break;
									case "DESERT":
										ᐃΔΔᐃⲆ = ⵠⲆΔ.ᐃᐃⵠΔᐃⵠⲆ;
										break;
									case "LAVA":
										ᐃΔΔᐃⲆ = ⵠⲆΔ.ⵠΔᐃΔᐃⵠⵠ;
										break;
									case "DRAGON":
										ᐃΔΔᐃⲆ = ⵠⲆΔ.ΔⲆⵠᐃⵠⵠⵠ;
										break
								}
								ⵠⲆΔ.ᐃᐃⲆᐃ.push(new ⵠⲆΔ.ᐃᐃⲆⵠⲆⵠⲆ(ᐃΔΔᐃⲆ, ⵠΔᐃΔᐃ[ΔⲆⵠΔ], ⵠΔᐃΔᐃ[3], ⵠΔᐃΔᐃ[ᐃᐃᐃᐃΔ], ⵠΔᐃΔᐃ[ⲆⵠⲆΔᐃ], ⵠΔᐃΔᐃ[ᐃⲆΔⵠⵠ], ⵠΔᐃΔᐃ[7]));
								continue
							} else break
						}
					} else if (0 !== ⵠⲆΔ.ⵠΔᐃⵠⵠ) {
						for (var ΔᐃⲆΔ = 0; ⵠⲆΔ.ⵠΔᐃⵠⵠ.length > ΔᐃⲆΔ; ΔᐃⲆΔ++) {
							var ΔⲆᐃΔ = ⵠⲆΔ.ⵠΔᐃⵠⵠ[ΔᐃⲆΔ];
							var ᐃΔΔᐃⲆ = ᐃΔᐃᐃ.ⲆΔΔⲆⵠ;
							switch (ΔⲆᐃΔ[ⵠⵠΔΔ]) {
								case "FOREST":
									ᐃΔΔᐃⲆ = ⵠⲆΔ.ⲆΔΔⲆⵠ;
									break;
								case "WINTER":
									ᐃΔΔᐃⲆ = ⵠⲆΔ.ΔⵠⵠᐃΔΔΔ;
									break;
								case "DESERT":
									ᐃΔΔᐃⲆ = ⵠⲆΔ.ᐃᐃⵠΔᐃⵠⲆ;
									break;
								case "LAVA":
									ᐃΔΔᐃⲆ = ⵠⲆΔ.ⵠΔᐃΔᐃⵠⵠ;
									break;
								case "DRAGON":
									ᐃΔΔᐃⲆ = ⵠⲆΔ.ΔⲆⵠᐃⵠⵠⵠ;
									break
							}
							if (ΔᐃⲆⵠⵠΔⲆⵠᐃ(ᐃΔΔᐃⲆ, ΔⲆᐃΔ[1], ΔⲆᐃΔ[ΔⲆⵠΔ], 0, (ΔᐃⲆΔ + ⲆⲆⵠ) * ΔⲆΔΔᐃ) === ⵠⵠⵠ) break
						}
						if (ⵠⲆΔ.ⵠΔᐃⵠⵠ.length !== ΔᐃⲆΔ) continue
					}
				}
				break
			}
			ⲆⵠⵠΔΔⵠⵠᐃᐃ();
			var ⲆᐃⵠⲆⲆΔⲆ = [];
			for (var ᐃⲆ = 0; ⵠⲆΔ.ΔΔΔⲆⲆ > ᐃⲆ; ᐃⲆ++) {
				ⲆᐃⵠⲆⲆΔⲆ[ᐃⲆ] = new Array(ⵠⲆΔ.ᐃᐃΔⵠᐃ);
				for (var ⲆⲆⲆⵠ = Δⵠⵠ; ⲆⲆⲆⵠ < ⵠⲆΔ.ᐃᐃΔⵠᐃ; ⲆⲆⲆⵠ++) ⲆᐃⵠⲆⲆΔⲆ[ᐃⲆ][ⲆⲆⲆⵠ] = ⵠⵠⵠ
			}
			for (var ᐃⲆ = ⲆⲆᐃ; ⵠⲆΔ.ᐃᐃⲆᐃ.length > ᐃⲆ; ᐃⲆ++) {
				var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⲆ];
				var ⲆⲆⵠΔ = ΔⲆᐃΔ.x2 / ᐃⲆⲆⵠⵠⵠⲆ;
				var ᐃⵠⵠΔ = ΔⲆᐃΔ.y2 / ΔΔⵠⵠⲆ;
				for (var Ⲇᐃ = ΔⲆᐃΔ.x1 / 100; ⲆⲆⵠΔ >= Ⲇᐃ; Ⲇᐃ++) {
					for (var ⲆⲆⲆ = ΔⲆᐃΔ.y1 / ⵠΔᐃᐃⲆ; ⲆⲆⲆ <= ᐃⵠⵠΔ; ⲆⲆⲆ++) ⲆᐃⵠⲆⲆΔⲆ[ⲆⲆⲆ][Ⲇᐃ] = ᐃΔⵠΔ
				}
			}
			for (var ⲆⲆⲆ = 0; ⲆⲆⲆ < ⵠⲆΔ.ΔΔΔⲆⲆ; ⲆⲆⲆ++) {
				for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠⲆΔ.ᐃᐃΔⵠᐃ; Ⲇᐃ++) {
					if (0 === ⲆᐃⵠⲆⲆΔⲆ[ⲆⲆⲆ][Ⲇᐃ]) ΔᐃⵠᐃⵠⵠΔⲆⲆ(ⲆᐃⵠⲆⲆΔⲆ, Ⲇᐃ, ⲆⲆⲆ)
				}
			}
			ΔⵠⵠⵠⲆ = {
				w: ⵠⲆΔ.ᐃᐃΔⵠᐃ,
				"ΔⵠⲆ": ⵠⲆΔ.ΔΔΔⲆⲆ,
				"ⵠᐃΔᐃ": []
			};
			for (var ᐃⲆ = ⵠⵠΔΔ; ⵠⲆΔ.ΔΔΔⲆⲆ > ᐃⲆ; ᐃⲆ++) ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ] = [];
			if (0 !== ⵠⲆΔ.ⵠΔᐃⵠⵠ && 0 < ⵠⲆΔ.ⵠΔᐃⵠⵠ.length && ⵠⲆΔ.ⵠΔᐃⵠⵠ[0].length > 3) {
				for (var ΔᐃⲆΔ = 0; ⵠⲆΔ.ⵠΔᐃⵠⵠ.length > ΔᐃⲆΔ; ΔᐃⲆΔ++) {
					var ⵠΔᐃΔᐃ = ⵠⲆΔ.ⵠΔᐃⵠⵠ[ΔᐃⲆΔ];
					if (ⵠΔᐃΔᐃ[1] === ᐃ[104]) ⵠⲆΔ.ⵠΔⲆⵠΔΔᐃ(ⵠΔᐃΔᐃ[ⵠⲆᐃⵠ], ⵠΔᐃΔᐃ[ⵠᐃⵠΔ], ⵠΔᐃΔᐃ[4])
				}
			} else ⵠⲆΔ.ΔⵠⲆΔⵠⲆⲆᐃᐃ(ⵠⲆΔ.ᐃⵠᐃⵠΔⵠⲆ);
			if (ⵠⲆΔ.ⵠΔᐃⵠⵠ !== 0 && ⵠⲆΔ.ⵠΔᐃⵠⵠ.length > 0 && ⵠⲆΔ.ⵠΔᐃⵠⵠ[Ⲇⵠᐃ].length > ⲆⵠⵠⲆ) {
				var ΔⵠⲆᐃⵠ = [];
				for (var ΔᐃⲆΔ = 0; ⵠⲆΔ.ⵠΔᐃⵠⵠ.length > ΔᐃⲆΔ; ΔᐃⲆΔ++) {
					var ⵠΔᐃΔᐃ = ⵠⲆΔ.ⵠΔᐃⵠⵠ[ΔᐃⲆΔ];
					if (ⵠΔᐃΔᐃ[0] !== ΔΔΔᐃ) continue;
					"r" === ⵠΔᐃΔᐃ[ᐃΔⲆΔ] ? (ΔΔⲆⵠ(ⵠΔᐃΔᐃ[ⵠΔΔᐃ], ⵠΔᐃΔᐃ[2], ᐃ[ⲆΔᐃᐃᐃΔⵠ], ⲆⲆΔ, ⲆⲆΔⵠ), ΔⵠⲆᐃⵠ.push([ⵠΔᐃΔᐃ[3], ⵠΔᐃΔᐃ[2], ⵠΔᐃΔᐃ[ᐃΔΔΔⲆ]])) : ΔΔⲆⵠ(ⵠΔᐃΔᐃ[4], ⵠΔᐃΔᐃ[3], ⵠΔᐃΔᐃ[1], ⵠΔᐃΔᐃ[Ⲇᐃⵠⵠ], ⵠΔᐃΔᐃ[5])
				}
				ⲆⲆΔᐃⲆⵠⵠ(0, ΔⵠⲆᐃⵠ);
				ΔⵠⲆᐃⵠ = []
			} else {
				for (var ᐃⲆ = ⵠⵠᐃ; ᐃⲆ < ⵠⲆΔ.ᐃᐃⲆᐃ.length; ᐃⲆ++) {
					var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⲆ];
					if (ⵠⲆΔ.mode === ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ) {
						ⵠⲆΔ.ⲆΔΔⲆⵠ === ΔⲆᐃΔ.ᐃᐃⲆ && ⵠⲆΔⲆᐃΔΔⲆⵠ(ᐃⲆ, ΔⲆᐃΔ.w / (ᐃⵠⵠΔⲆ * ΔⵠⵠΔᐃ))
					} else {
						if (ΔⲆᐃΔ.ᐃᐃⲆ === ⵠⲆΔ.ⲆΔΔⲆⵠ) ᐃΔᐃⲆᐃⵠⵠᐃⲆ(ᐃⲆ, ΔⲆᐃΔ.w / (100 * 100));
						if (ΔⲆᐃΔ.ᐃᐃⲆ === ⵠⲆΔ.ⵠΔᐃΔᐃⵠⵠ) ᐃⲆᐃⵠΔⵠⵠᐃⵠ(ᐃⲆ, ΔⲆᐃΔ.w / (ⲆⲆⵠⵠⵠⵠᐃ * 100));
						ⵠⲆΔ.ΔⵠⵠᐃΔΔΔ === ΔⲆᐃΔ.ᐃᐃⲆ && ΔᐃⵠᐃᐃΔᐃΔⲆ(ᐃⲆ, ΔⲆᐃΔ.w / (ᐃⵠⵠΔⲆ * 100));
						if (ⵠⲆΔ.ᐃᐃⵠΔᐃⵠⲆ === ΔⲆᐃΔ.ᐃᐃⲆ) ΔⵠΔΔΔᐃⵠⲆⲆ(ᐃⲆ, ΔⲆᐃΔ.w / (100 * 100));
						if (ⵠⲆΔ.ΔⲆⵠᐃⵠⵠⵠ === ΔⲆᐃΔ.ᐃᐃⲆ) ⲆⵠⲆᐃΔΔΔᐃΔ(ᐃⲆ)
					}
				}
			}
			ΔⵠᐃᐃᐃⲆᐃᐃⲆ();
			ⵠⲆΔ.ΔⲆⲆⵠΔᐃⵠⲆⲆ(ΔⵠⵠⵠⲆ)
		};

		function ΔᐃᐃᐃᐃΔᐃ(ᐃⲆ, ⲆⲆⲆⵠ) {
			return ᐃⲆ >= 0 && ⲆⲆⲆⵠ >= 0 && ᐃⲆ < ⵠⲆΔ.ΔΔΔⲆⲆ && ⲆⲆⲆⵠ < ⵠⲆΔ.ᐃᐃΔⵠᐃ
		}

		function ᐃⲆᐃⵠΔⵠⵠᐃⵠ(ᐃⵠⲆΔ, ⵠᐃⲆΔΔ) {
			ⵠⵠΔᐃᐃⲆᐃⲆⵠ(80 * ⵠᐃⲆΔΔ, ᐃⵠⲆΔ);
			for (var ᐃⲆ = 0; ᐃⲆ < ⵠᐃᐃⵠ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "s", ᐃⲆ, Math.floor(ⵠᐃⲆΔΔ * ΔΔᐃᐃⲆΔⲆ));
			for (var ᐃⲆ = ⲆᐃΔⵠ; 3 > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "g", ᐃⲆ, Math.floor(ⲆΔⲆⲆᐃᐃⲆ * ⵠᐃⲆΔΔ));
			for (var ᐃⲆ = ⲆⲆΔ; ᐃⲆ < ⵠⵠⲆⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, ᐃ[538], ᐃⲆ, Math.max(ᐃΔⲆΔ, Math.floor(ⵠᐃⲆΔΔ * ᐃⲆⲆ)), .2);
			for (var ᐃⲆ = 0; ⵠΔΔᐃ > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "a", ᐃⲆ, Math.max(ᐃΔⲆΔ, Math.floor(ⵠᐃⲆΔΔ * ⵠⲆΔᐃ)));
			ⲆⲆⲆΔΔⵠⲆ(ᐃⵠⲆΔ)
		}

		function ⲆⲆⲆΔΔⵠⲆ(ᐃⵠⲆΔ) {
			var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⵠⲆΔ];
			ΔΔⲆⵠ(-3 + Math.floor(ΔⲆᐃΔ.y2 / ⵠⵠⲆᐃⵠ), -1 + Math.floor(ΔⲆᐃΔ.x2 / ⲆⵠΔΔΔ), "s", 0, 0);
			ΔΔⲆⵠ(ᐃᐃΔΔ + Math.floor(ΔⲆᐃΔ.y1 / ΔⵠⵠΔᐃ), -ΔΔΔᐃ + Math.floor(ΔⲆᐃΔ.x2 / 100), "s", 0, ⵠᐃⲆⵠ);
			ΔΔⲆⵠ(-3 + Math.floor(ΔⲆᐃΔ.y2 / ⵠⵠΔΔᐃ), 1 + Math.floor(ΔⲆᐃΔ.x1 / 100), "s", 0, ⲆⲆᐃⲆ);
			ΔΔⲆⵠ(3 + Math.floor(ΔⲆᐃΔ.y1 / Δⵠᐃⵠᐃ), 1 + Math.floor(ΔⲆᐃΔ.x1 / 100), "s", ⵠΔΔⲆ, 0)
		}

		function ⲆⵠⲆᐃΔΔΔᐃΔ(ᐃⵠⲆΔ) {
			for (var ᐃⲆ = ⵠᐃΔ; ᐃⲆ < 3; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "s", ᐃⲆ, ⵠᐃⵠΔΔ);
			for (var ᐃⲆ = ᐃⲆᐃ; ⵠᐃᐃⵠ > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "a", ᐃⲆ, ⲆⵠΔΔ);
			for (var ᐃⲆ = ⵠⵠΔΔ; ᐃⲆ < 3; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "d", ᐃⲆ, ⲆⲆⲆᐃ);
			ⲆⲆⲆΔΔⵠⲆ(ᐃⵠⲆΔ)
		}

		function ΔᐃⵠᐃᐃΔᐃΔⲆ(ᐃⵠⲆΔ, ⵠᐃⲆΔΔ) {
			for (var ᐃⲆ = 0; 3 > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "s", ᐃⲆ, Math.floor(ⵠⲆⵠΔᐃᐃⵠ * ⵠᐃⲆΔΔ));
			for (var ᐃⲆ = 0; 3 > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "f", ᐃⲆ, Math.floor(24 * ⵠᐃⲆΔΔ));
			for (var ᐃⲆ = ⵠᐃⲆⵠ; 3 > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "d", ᐃⲆ, Math.max(ΔⲆⵠⲆ, Math.floor(ⲆΔⲆΔ * ⵠᐃⲆΔΔ)), .3);
			for (var ᐃⲆ = ⵠⵠᐃ; ᐃⲆ < ⵠⵠⲆⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "g", ᐃⲆ, Math.floor(ⵠᐃⲆΔΔ * ΔΔΔᐃΔ));
			ⲆⲆⲆΔΔⵠⲆ(ᐃⵠⲆΔ)
		}

		function ᐃΔᐃⲆᐃⵠⵠᐃⲆ(ᐃⵠⲆΔ, ⵠᐃⲆΔΔ) {
			for (var ᐃⲆ = 0; ᐃⲆ < ⲆⲆᐃⵠⵠ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "t", ᐃⲆ, Math.floor(ⵠᐃⲆΔΔ * ⵠⵠᐃΔᐃ));
			for (var ᐃⲆ = ᐃⲆΔ; ᐃⲆ < 4; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "b", ᐃⲆ, Math.floor(ⵠᐃⲆΔΔ * ⲆΔᐃΔⵠ));
			for (var ᐃⲆ = Ⲇⵠⵠᐃ; 3 > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "s", ᐃⲆ, Math.floor(ⲆⲆⲆΔⲆ * ⵠᐃⲆΔΔ));
			var ΔⵠⲆᐃⵠ = [];
			ᐃᐃΔΔᐃⲆⵠ(ᐃⵠⲆΔ, ΔⵠⲆᐃⵠ);
			ⲆⲆΔᐃⲆⵠⵠ(ᐃⵠⲆΔ, ΔⵠⲆᐃⵠ);
			ΔⵠⲆᐃⵠ = [];
			ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "p", 0, Math.floor(24 * ⵠᐃⲆΔΔ));
			for (var ᐃⲆ = ⵠⵠΔΔ; ᐃⲆ < 3; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "g", ᐃⲆ, Math.floor(ⵠᐃⵠΔᐃ * ⵠᐃⲆΔΔ));
			if (ⵠⲆΔ.mode === ᐃΔᐃᐃ.ᐃΔΔΔᐃ) {
				for (var ᐃⲆ = Ⲇⵠᐃ; ᐃⲆ < 3; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "d", ᐃⲆ, Math.floor(ⵠᐃⲆΔΔ * 3));
				for (var ᐃⲆ = ⵠᐃⵠ; 3 > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "a", ᐃⲆ, Math.floor(ⵠᐃⲆΔΔ * Ⲇᐃⵠⵠ))
			}
			ⲆⲆⲆΔΔⵠⲆ(ᐃⵠⲆΔ)
		}

		function ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, ⲆⵠΔⵠ, ΔᐃⲆⵠΔ, ᐃⲆᐃⵠ, ⵠⵠΔⵠᐃᐃΔ) {
			var ΔⲆᐃΔ = ⵠⲆΔ.ᐃᐃⲆᐃ[ᐃⵠⲆΔ];
			var Ⲇᐃ = Math.floor(ΔⲆᐃΔ.x1 / ΔᐃⵠΔⲆ);
			var ⲆⲆⲆ = Math.floor(ΔⲆᐃΔ.y1 / ᐃΔⲆᐃⵠ);
			var ᐃΔΔ = Math.floor(ΔⲆᐃΔ.w / ΔⵠⵠΔᐃ);
			var ΔⵠⲆ = Math.floor(ΔⲆᐃΔ.ΔⵠⲆ / 100);
			ΔⲆᐃΔᐃ !== ⵠⵠΔⵠᐃᐃΔ && (ⵠⵠΔⵠᐃᐃΔ = 1 - ⵠⵠΔⵠᐃᐃΔ, Ⲇᐃ += Math.floor(ⵠⵠΔⵠᐃᐃΔ * ᐃΔΔ / ΔⵠⲆⲆ), ⲆⲆⲆ += Math.floor(ⵠⵠΔⵠᐃᐃΔ * ΔⵠⲆ / ⲆΔⲆΔ), ᐃΔΔ -= Math.floor(ᐃΔΔ * ⵠⵠΔⵠᐃᐃΔ), ΔⵠⲆ -= Math.floor(ΔⵠⲆ * ⵠⵠΔⵠᐃᐃΔ));
			var ⵠᐃΔᐃ = ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ;
			for (var ⲆⲆᐃΔ = ⵠΔΔⲆ, ᐃᐃⵠᐃ = ᐃⲆΔᐃ; ⲆⲆᐃΔ < ᐃⲆᐃⵠ; ᐃᐃⵠᐃ++) {
				if (ᐃᐃⵠᐃ > 5e4) break;
				var ᐃⲆ = ⲆⲆⲆ + Math.floor(ΔⵠⲆ * ⵠⲆΔ.ᐃⲆᐃⲆΔ.get());
				var ⲆⲆⲆⵠ = Ⲇᐃ + Math.floor(ⵠⲆΔ.ᐃⲆᐃⲆΔ.get() * ᐃΔΔ);
				var ⲆⵠⲆⲆ = ⵠⲆΔ.ΔΔᐃΔⲆ(ᐃⵠⲆΔ, ⲆⲆⲆⵠ * ᐃⵠⵠΔⲆ + 50, ᐃⲆ * ᐃⲆⲆⵠⵠⵠⲆ + 50);
				if (ⲆⵠⲆⲆ < 400) continue;
				var Δᐃⵠⵠ = ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ + 1];
				if (undefined !== Δᐃⵠⵠ && undefined !== Δᐃⵠⵠ[ⲆⵠΔⵠ] && ΔⲆᐃⲆⵠ !== Δᐃⵠⵠ[ⲆⵠΔⵠ][ΔᐃⲆⵠΔ]) continue;
				var Δᐃⵠⵠ = ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ - ⲆⵠⲆ];
				if (Δᐃⵠⵠ !== ΔⵠⲆⲆΔ && Δᐃⵠⵠ[ⲆⵠΔⵠ] !== ΔⲆᐃΔᐃ && ᐃΔᐃⲆⵠ !== Δᐃⵠⵠ[ⲆⵠΔⵠ][ΔᐃⲆⵠΔ]) continue;
				var Δᐃⵠⵠ = ⵠᐃΔᐃ[ᐃⲆ + 1][ⲆⲆⲆⵠ];
				if (ⵠⵠᐃⵠΔ !== Δᐃⵠⵠ && Δᐃⵠⵠ[ⲆⵠΔⵠ] !== undefined && ᐃⲆⲆΔᐃ !== Δᐃⵠⵠ[ⲆⵠΔⵠ][ΔᐃⲆⵠΔ]) continue;
				var Δᐃⵠⵠ = ⵠᐃΔᐃ[ᐃⲆ - 1][ⲆⲆⲆⵠ];
				if (Δᐃⵠⵠ !== ΔⲆⲆⲆᐃ && Δᐃⵠⵠ[ⲆⵠΔⵠ] !== ΔΔⲆⲆⲆ && ⵠΔΔⲆΔ !== Δᐃⵠⵠ[ⲆⵠΔⵠ][ΔᐃⲆⵠΔ]) continue;
				var Δᐃⵠⵠ = ⵠᐃΔᐃ[ᐃⲆ + ⵠⲆⵠⲆ][ⲆⲆⲆⵠ - ⲆⲆⵠ];
				if (Δᐃⵠⵠ !== undefined && Δᐃⵠⵠ[ⲆⵠΔⵠ] !== ΔⲆⲆΔⲆ && Δᐃⵠⵠ[ⲆⵠΔⵠ][ΔᐃⲆⵠΔ] !== undefined) continue;
				var Δᐃⵠⵠ = ⵠᐃΔᐃ[ᐃⲆ - ΔΔΔᐃ][ⲆⲆⲆⵠ + ⵠⲆⵠⲆ];
				if (ΔⲆⲆⲆᐃ !== Δᐃⵠⵠ && undefined !== Δᐃⵠⵠ[ⲆⵠΔⵠ] && Δᐃⵠⵠ[ⲆⵠΔⵠ][ΔᐃⲆⵠΔ] !== ΔⵠⲆⲆΔ) continue;
				var Δᐃⵠⵠ = ⵠᐃΔᐃ[ᐃⲆ + ⵠⲆⵠⲆ][ⲆⲆⲆⵠ + Δⵠᐃ];
				if (ⵠⲆⵠᐃⵠⵠΔ !== Δᐃⵠⵠ && Δᐃⵠⵠ[ⲆⵠΔⵠ] !== Ⲇᐃᐃⵠᐃ && undefined !== Δᐃⵠⵠ[ⲆⵠΔⵠ][ΔᐃⲆⵠΔ]) continue;
				var Δᐃⵠⵠ = ⵠᐃΔᐃ[ᐃⲆ - 1][ⲆⲆⲆⵠ - ⲆⵠⲆ];
				if (ΔΔⲆⲆⲆ !== Δᐃⵠⵠ && undefined !== Δᐃⵠⵠ[ⲆⵠΔⵠ] && ΔⲆⲆΔⲆ !== Δᐃⵠⵠ[ⲆⵠΔⵠ][ΔᐃⲆⵠΔ]) continue;
				if (undefined === ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ]) {
					ΔΔⲆⵠ(ᐃⲆ, ⲆⲆⲆⵠ, ⲆⵠΔⵠ, ΔᐃⲆⵠΔ, ᐃΔⲆΔ);
					ⲆⲆᐃΔ++
				}
			}
		}

		function ΔⵠΔΔΔᐃⵠⲆⲆ(ᐃⵠⲆΔ, ⵠᐃⲆΔΔ) {
			for (var ᐃⲆ = 0; 3 > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "s", ᐃⲆ, Math.floor(12 * ⵠᐃⲆΔΔ));
			for (var ᐃⲆ = 0; ᐃⲆ < 3; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "m", ᐃⲆ, Math.max(ⵠⲆⵠⲆ, Math.floor(ⲆⵠΔΔ * ⵠᐃⲆΔΔ)), .2);
			ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "c", 0, Math.floor(36 * ⵠᐃⲆΔΔ));
			var ΔⵠⲆᐃⵠ = [];
			ᐃΔᐃⵠΔΔⲆΔΔ(ᐃⵠⲆΔ, ΔⵠⲆᐃⵠ);
			ⲆⲆΔᐃⲆⵠⵠ(ᐃⵠⲆΔ, ΔⵠⲆᐃⵠ);
			ΔⵠⲆᐃⵠ = []
		}

		function ⵠⲆΔⲆᐃΔΔⲆⵠ(ᐃⵠⲆΔ, ⵠᐃⲆΔΔ) {
			for (var ᐃⲆ = 0; ᐃⲆ < ΔΔΔᐃΔ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "t", ᐃⲆ, Math.floor(ⵠᐃⲆΔΔ * 80));
			for (var ᐃⲆ = ⵠᐃΔ; ᐃᐃΔⵠⲆ > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "b", ᐃⲆ, Math.floor(80 * ⵠᐃⲆΔΔ));
			for (var ᐃⲆ = ⵠᐃΔ; 3 > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "s", ᐃⲆ, Math.floor(50 * ⵠᐃⲆΔΔ));
			var ΔⵠⲆᐃⵠ = [];
			for (var ᐃⲆ = ᐃⲆΔ; ᐃⲆ < 6; ᐃⲆ++) ᐃᐃΔΔᐃⲆⵠ(ᐃⵠⲆΔ, ΔⵠⲆᐃⵠ);
			ⲆⲆΔᐃⲆⵠⵠ(ᐃⵠⲆΔ, ΔⵠⲆᐃⵠ);
			ΔⵠⲆᐃⵠ = [];
			ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "p", ⵠⵠⲆΔ, Math.floor(ⵠᐃⲆΔΔ * 28));
			for (var ᐃⲆ = 0; ᐃⲆ < ᐃΔΔΔ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "g", ᐃⲆ, Math.floor(7 * ⵠᐃⲆΔΔ));
			for (var ᐃⲆ = Δⵠⵠ; 3 > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "d", ᐃⲆ, Math.floor(ⵠᐃⲆΔΔ * 2));
			for (var ᐃⲆ = 0; ᐃⲆ < 3; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "a", ᐃⲆ, Math.floor(1 * ⵠᐃⲆΔΔ));
			for (var ᐃⲆ = ᐃⲆᐃ; 3 > ᐃⲆ; ᐃⲆ++) ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "m", ᐃⲆ, Math.floor(ᐃΔⵠΔ * ⵠᐃⲆΔΔ));
			ᐃᐃⵠᐃⵠ(ᐃⵠⲆΔ, "a", ⲆⲆᐃ, Math.floor(ⵠᐃⲆΔΔ * 1));
			ⲆⲆⲆΔΔⵠⲆ(ᐃⵠⲆΔ)
		}

		function ⲆⲆⲆᐃⲆⵠᐃⵠᐃ(ᐃⲆ, ⲆⲆⲆⵠ, ᐃⵠⲆΔ, ⵠⲆⵠᐃᐃⵠⲆ) {
			if (!ΔᐃᐃᐃᐃΔᐃ(ᐃⲆ, ⲆⲆⲆⵠ)) return;
			ⵠᐃΔᐃ = ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ;
			if (ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ] === undefined) ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ] = {};
			if (ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ]["r"] !== undefined) return;
			var ⵠᐃΔⲆⵠ = ⵠⵠΔΔ;
			ΔᐃᐃᐃᐃΔᐃ(ᐃⲆ - 1, ⲆⲆⲆⵠ) && ΔⵠᐃΔᐃ !== ⵠᐃΔᐃ[ᐃⲆ - Δⵠᐃ][ⲆⲆⲆⵠ] && ⵠᐃΔᐃ[ᐃⲆ - 1][ⲆⲆⲆⵠ][ᐃ[ⵠΔΔⲆⵠⵠᐃ]] !== ᐃⲆⲆⲆᐃ && (ⵠᐃΔⲆⵠ += ⲆΔⲆΔ);
			ΔᐃᐃᐃᐃΔᐃ(ᐃⲆ, ⲆⲆⲆⵠ - ⲆⲆⲆᐃ) && ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ - 1] !== undefined && ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ - ⵠⵠⵠⲆ][ᐃ[255]] !== Ⲇᐃᐃⵠᐃ && (ⵠᐃΔⲆⵠ += ΔⲆⵠⵠⵠΔᐃ);
			ΔᐃᐃᐃᐃΔᐃ(ᐃⲆ, ⲆⲆⲆⵠ + ᐃΔⵠΔ) && ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ + ⲆⲆⲆᐃ] !== undefined && undefined !== ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ + ⵠᐃᐃ][ᐃ[ΔᐃᐃΔΔᐃⵠ]] && (ⵠᐃΔⲆⵠ += ΔΔⵠⵠΔⲆⵠ);
			if (ΔᐃᐃᐃᐃΔᐃ(ᐃⲆ + ᐃⵠᐃᐃ, ⲆⲆⲆⵠ) && undefined !== ⵠᐃΔᐃ[ᐃⲆ + 1][ⲆⲆⲆⵠ] && ⵠᐃΔᐃ[ᐃⲆ + 1][ⲆⲆⲆⵠ][ᐃ[255]] !== ΔΔⲆⲆⲆ) ⵠᐃΔⲆⵠ += 64;
			if (ΔᐃᐃᐃᐃΔᐃ(ᐃⲆ - ᐃΔⵠΔ, ⲆⲆⲆⵠ - 1) && (ⵠᐃΔⲆⵠ & ᐃΔᐃⵠⲆ + ΔⵠⲆⲆ) === 10 && ⵠᐃΔᐃ[ᐃⲆ - 1][ⲆⲆⲆⵠ - 1] !== ΔⲆⲆⲆᐃ && ⵠⵠᐃⲆᐃ !== ⵠᐃΔᐃ[ᐃⲆ - ⲆⲆᐃⵠ][ⲆⲆⲆⵠ - ΔΔΔᐃ][ᐃ[ⲆΔᐃᐃᐃΔⵠ]]) ⵠᐃΔⲆⵠ += 1;
			ΔᐃᐃᐃᐃΔᐃ(ᐃⲆ - 1, ⲆⲆⲆⵠ + ⲆⲆᐃⵠ) && ΔⵠⲆᐃⲆ + ⵠΔΔΔ === (ⵠᐃΔⲆⵠ & 18) && ΔⲆᐃΔᐃ !== ⵠᐃΔᐃ[ᐃⲆ - 1][ⲆⲆⲆⵠ + ⲆⲆⵠ] && ΔΔⲆⲆⲆ !== ⵠᐃΔᐃ[ᐃⲆ - 1][ⲆⲆⲆⵠ + 1][ᐃ[255]] && (ⵠᐃΔⲆⵠ += ⲆⲆⲆΔ);
			ΔᐃᐃᐃᐃΔᐃ(ᐃⲆ + ⵠⵠⵠⲆ, ⲆⲆⲆⵠ - ⵠᐃᐃ) && (ⵠᐃΔⲆⵠ & ⵠᐃΔᐃⲆ + 64) === 8 + 64 && Ⲇᐃᐃⵠᐃ !== ⵠᐃΔᐃ[ᐃⲆ + 1][ⲆⲆⲆⵠ - ΔΔⵠ] && ΔΔᐃⲆᐃ !== ⵠᐃΔᐃ[ᐃⲆ + ᐃⵠⵠⵠ][ⲆⲆⲆⵠ - ⵠⲆⵠⲆ][ᐃ[255]] && (ⵠᐃΔⲆⵠ += 32);
			if (ΔᐃᐃᐃᐃΔᐃ(ᐃⲆ + 1, ⲆⲆⲆⵠ + 1) && (ⵠᐃΔⲆⵠ & ⲆⵠΔᐃΔ + 64) === 80 && ΔⲆⲆⲆᐃ !== ⵠᐃΔᐃ[ᐃⲆ + ⵠⵠⵠⲆ][ⲆⲆⲆⵠ + ⲆⲆⲆᐃ] && ⵠᐃΔᐃ[ᐃⲆ + 1][ⲆⲆⲆⵠ + 1][ᐃ[255]] !== undefined) ⵠᐃΔⲆⵠ += 128;
			ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ]["r"] = {};
			ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ]["r"].ΔᐃᐃⲆΔⵠᐃ = ⵠᐃΔⲆⵠ;
			ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ]["r"].ⵠⲆⵠᐃᐃⵠⲆ = ⵠⲆⵠᐃᐃⵠⲆ;
			ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ]["r"].ⲆⵠⲆⲆ = ⵠⲆΔ.ΔΔᐃΔⲆ(ᐃⵠⲆΔ, 100 * ⲆⲆⲆⵠ + 50, 100 * ᐃⲆ + 50) - 400;
			ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ]["r"]["x"] = ⲆⲆⲆⵠ * 100 + 50;
			ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ]["r"]["y"] = 100 * ᐃⲆ + 50
		}

		function ΔΔⲆⵠ(ᐃⲆ, ⲆⲆⲆⵠ, ⲆⵠΔⵠ, ΔᐃⲆⵠΔ, ΔΔΔΔⲆⲆⲆΔΔ) {
			if (ᐃⲆ < 0 || ⲆⲆⲆⵠ < 0 || ᐃⲆ >= ⵠⲆΔ.ΔΔΔⲆⲆ || ⵠⲆΔ.ᐃᐃΔⵠᐃ <= ⲆⲆⲆⵠ) return;
			ⵠᐃΔᐃ = ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ;
			if (undefined === ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ]) ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ] = {};
			if (ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ][ⲆⵠΔⵠ] !== undefined) return Ⲇⵠⵠᐃ;
			ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ][ⲆⵠΔⵠ] = [];
			ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ][ⲆⵠΔⵠ][ΔᐃⲆⵠΔ] = [{
				x: 100 * ⲆⲆⲆⵠ + 50,
				y: 100 * ᐃⲆ + 50
			}];
			if (ΔΔΔΔⲆⲆⲆΔΔ === ΔᐃⵠⲆ) ᐃᐃᐃⵠΔΔΔᐃΔ(ⲆⵠΔⵠ, ΔᐃⲆⵠΔ, ᐃⲆ, ⲆⲆⲆⵠ);
			return 1
		}
		this.ΔΔⲆⵠ = ΔΔⲆⵠ;

		function ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, ⵠΔⲆ, ⲆΔᐃΔ) {
			if (Δᐃⵠⵠ[ⵠΔⲆ]) {
				for (ⲆⲆᐃΔ = 0; Δᐃⵠⵠ[ⵠΔⲆ].length > ⲆⲆᐃΔ; ⲆⲆᐃΔ++) {
					if (!Δᐃⵠⵠ[ⵠΔⲆ][ⲆⲆᐃΔ]) continue;
					for (ᐃᐃⵠᐃ = 0; Δᐃⵠⵠ[ⵠΔⲆ][ⲆⲆᐃΔ].length > ᐃᐃⵠᐃ; ᐃᐃⵠᐃ++) {
						Δᐃⵠⵠ[ⵠΔⲆ][ⲆⲆᐃΔ][ᐃᐃⵠᐃ].ΔΔᐃ = ⲆΔᐃΔ;
						Δᐃⵠⵠ[ⵠΔⲆ][ⲆⲆᐃΔ][ᐃᐃⵠᐃ].ΔⵠΔ = Ⲇⵠᐃⵠᐃ;
						Δᐃⵠⵠ[ⵠΔⲆ][ⲆⲆᐃΔ][ᐃᐃⵠᐃ].time = ⲆⲆᐃⲆ;
						Δᐃⵠⵠ[ⵠΔⲆ][ⲆⲆᐃΔ][ᐃᐃⵠᐃ].angle = 0
					}
				}
			}
		}
		this.ΔⲆⲆⵠΔᐃⵠⲆⲆ = function(ΔⵠⵠⵠⲆ) {
			for (var ᐃⲆ = 0; ᐃⲆ < this.ΔΔΔⲆⲆ; ᐃⲆ++) {
				for (var ⲆⲆⲆⵠ = 0; ⲆⲆⲆⵠ < this.ᐃᐃΔⵠᐃ; ⲆⲆⲆⵠ++) {
					!ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ] && (ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ] = []);
					if (!ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ]) {
						ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ] = [];
						continue
					}
					var Δᐃⵠⵠ = ΔⵠⵠⵠⲆ.ⵠᐃΔᐃ[ᐃⲆ][ⲆⲆⲆⵠ];
					if (Δᐃⵠⵠ[ᐃ[457]] && Δᐃⵠⵠ[ᐃ[457]].length > 0) {
						for (var ⲆⲆᐃΔ = Ⲇⵠⵠᐃ; Δᐃⵠⵠ[ᐃ[457]].length > ⲆⲆᐃΔ; ⲆⲆᐃΔ++) {
							if (Δᐃⵠⵠ[ᐃ[457]][ⲆⲆᐃΔ] && ⲆⲆΔ < Δᐃⵠⵠ[ᐃ[457]][ⲆⲆᐃΔ].length) {
								Δᐃⵠⵠ[ᐃ[457]] = Δᐃⵠⵠ[ᐃ[457]][ⲆⲆᐃΔ][0];
								if (ⲆⲆᐃΔ >= 41 && ⲆⲆᐃΔ <= 49) {
									Δᐃⵠⵠ[ᐃ[457]].scale = 3;
									var ᐃⵠⵠΔⵠⵠⲆ = Math.floor(Math.random() * 3 + ΔᐃⵠⲆ);
									Δᐃⵠⵠ[ᐃ[457]].ᐃⵠⲆ = [];
									for (var ᐃᐃⵠᐃ = 0; ᐃᐃⵠᐃ < ᐃⵠⵠΔⵠⵠⲆ; ᐃᐃⵠᐃ++) {
										Δᐃⵠⵠ[ᐃ[457]].ᐃⵠⲆ.push({
											x: 120 * Math.random() - 60,
											y: Math.random() * 120 - 60,
											angle: Math.random() * Math.PI * ⵠⵠΔⵠ,
											"ΔⵠⲆᐃᐃ": 41 + Math.floor(Math.random() * 9)
										})
									}
								} else if (ⲆⵠᐃᐃⵠⲆΔ <= ⲆⲆᐃΔ && 26 >= ⲆⲆᐃΔ) {
									Δᐃⵠⵠ[ᐃ[457]].scale = ⵠⵠⲆᐃ;
									var ᐃⵠⵠΔⵠⵠⲆ = Math.floor(Math.random() * ⵠᐃⵠΔ + ᐃΔⲆΔ);
									Δᐃⵠⵠ[ᐃ[457]].ᐃⵠⲆ = [];
									for (var ᐃᐃⵠᐃ = 0; ᐃⵠⵠΔⵠⵠⲆ > ᐃᐃⵠᐃ; ᐃᐃⵠᐃ++) {
										Δᐃⵠⵠ[ᐃ[457]].ᐃⵠⲆ.push({
											x: 120 * Math.random() - 60,
											y: 120 * Math.random() - 60,
											angle: Math.PI * Math.random() * ⵠⵠΔⵠ,
											"ΔⵠⲆᐃᐃ": 19 + Math.floor(Math.random() * 8)
										})
									}
								} else if (ⲆⲆᐃΔ <= ⲆⵠⲆⲆⲆⲆᐃ || 27 <= ⲆⲆᐃΔ && ⲆⲆᐃΔ <= 40) {
									Δᐃⵠⵠ[ᐃ[457]].angle = 0;
									Δᐃⵠⵠ[ᐃ[457]].scale = 2;
									Δᐃⵠⵠ[ᐃ[457]].ΔⵠⲆᐃᐃ = ⲆⲆᐃΔ
								} else {
									Δᐃⵠⵠ[ᐃ[457]].angle = 2 * (Math.random() * Math.PI);
									Δᐃⵠⵠ[ᐃ[457]].scale = 1;
									Δᐃⵠⵠ[ᐃ[457]].ΔⵠⲆᐃᐃ = ⲆⲆᐃΔ
								}
							}
						}
					}
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, "p", new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃΔⵠΔᐃ, ΔᐃⵠⲆ, Δⵠᐃ, ᐃⲆᐃ, ⵠᐃⲆⲆΔ, ⲆΔⲆᐃⵠ));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, "t", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, ⲆᐃΔⵠ, ΔΔᐃⵠⲆ, ΔΔⵠⲆⵠ));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, "s", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ᐃⲆⲆ, ⲆⲆⲆᐃ, ⵠΔⵠᐃ, 10, 10));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, "g", new ΔⲆᐃ.ᐃⵠⲆⲆ(Ⲇⵠᐃⵠᐃ, ⲆⲆⵠ, 1, ⲆⲆᐃ, 10, 10));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, "d", new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠⲆᐃⵠⵠ, ᐃⵠᐃᐃ, 1, ⲆⲆᐃⲆ, ⲆⲆᐃᐃⵠ, 10));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, "b", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ᐃⲆⲆ, 1, 0, 10, ⵠΔΔᐃᐃ));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, "f", new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔᐃΔΔᐃ, 1, ᐃⵠⵠⵠ, ⲆᐃΔⵠ, ΔΔᐃⵠⲆ, ΔⵠᐃⲆΔ));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, ᐃ[174], new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ᐃⵠᐃᐃ, ⲆⲆⵠ, ⵠⵠⲆΔ, ᐃᐃⵠΔⵠ, 10));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, ᐃ[388], new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, ⵠᐃⲆⵠᐃ, ΔΔⵠⲆⵠ));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, ᐃ[83], new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, ⵠΔΔⲆ, 10, ΔΔᐃⵠⲆ));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, "a", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, ΔΔⲆΔΔ));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, ᐃ[153], new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔⲆⲆΔⵠ, ᐃΔⲆΔ, ⵠᐃᐃ, 0, ᐃᐃᐃⲆⵠ, ΔⵠΔᐃΔ));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, ᐃ[502], new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠⲆᐃⵠⵠ, 1, ΔⲆⵠⲆ, ⵠΔΔⲆ, 10, 10));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, ᐃ[538], new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔᐃΔΔᐃ, ⵠⲆⵠⲆ, 1, ⲆᐃΔⵠ, ΔΔⲆΔΔ, ⲆΔⲆᐃⵠ));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, "c", new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, ⵠⵠⲆΔ, 10, 10));
					ⲆⲆⵠᐃΔ(Δᐃⵠⵠ, "m", new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠⲆⵠⵠΔ, ΔΔⵠ, ᐃΔⵠΔ, ⵠᐃΔ, 10, ΔⵠΔᐃΔ))
				}
			}
		};
		this.time = ⵠ.ⵠⲆⵠ;
		this.ᐃᐃⵠΔⲆ = {
			translate: {
				y: ⵠⵠⵠ,
				x: ⲆᐃΔⵠ
			},
			"ΔΔΔⲆⵠ": ΔᐃⲆⲆ,
			"ᐃⵠΔᐃᐃ": 0,
			now: 0
		};
		this.ⲆᐃⵠⵠᐃᐃⵠΔΔ = function() {
			this.ⲆⵠᐃⵠⲆ = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔⲆⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆΔᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⵠⲆᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠΔΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠΔⵠΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⵠΔᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆᐃⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆΔΔᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆⲆⲆΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆΔᐃΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃⲆᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆΔⵠⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆΔⲆⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔΔⵠᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠⲆⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃΔⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⲆΔᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆΔⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠⲆᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠᐃᐃⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆⵠΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆΔⵠᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.Ⲇᐃⵠⵠᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔᐃⵠᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.Δⵠⵠⵠᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃΔⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆᐃΔⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃᐃᐃΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠΔⲆΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⵠᐃΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆⵠᐃΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠΔᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⵠᐃᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠᐃΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔΔΔⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆΔⲆΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠΔⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃΔⲆⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃⲆⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔΔᐃᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃΔΔⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠΔΔᐃⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⲆⵠⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⵠΔⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃⵠⵠᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.Ⲇᐃⵠᐃᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃⲆΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃⲆⲆΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆΔⵠⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⵠΔⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠᐃΔΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⲆⵠᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⲆⲆᐃⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⲆⵠⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠΔⲆⲆᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠⵠᐃᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔⵠⲆⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆⵠⵠⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⵠⵠⲆΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃᐃⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠⲆΔΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆΔᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃᐃⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠΔΔⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃᐃΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔᐃᐃᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⲆᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⲆⵠΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.Δᐃⵠⵠⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔΔⲆᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆΔⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃΔᐃᐃⵠΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔᐃⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃᐃΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⵠⲆⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠᐃⵠᐃᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆⵠⵠᐃΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆⲆᐃⵠΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⵠⵠᐃⵠΔⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆⲆΔⲆΔᐃ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⵠⵠⲆ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⲆΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔⵠⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠⲆⲆⵠ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠΔΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⵠΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔΔⵠⵠΔ] = [];
			this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆᐃⲆΔ] = [];
			return
		};
		this.ⵠⵠⵠΔΔⵠΔⲆᐃ = function(ᐃⲆᐃⲆ) {
			if (!this.ⲆⵠᐃⵠⲆ[ᐃⲆᐃⲆ]) return;
			ⲆⵠΔⵠ = this.ⲆⵠᐃⵠⲆ[ᐃⲆᐃⲆ].type;
			this.ⲆⵠᐃⵠⲆ[ᐃⲆᐃⲆ] = null;
			var Ⲇᐃᐃ = this.Ⲇᐃᐃ[ⲆⵠΔⵠ];
			for (var ⲆⲆⲆⵠ = 0; ⲆⲆⲆⵠ < Ⲇᐃᐃ.length; ⲆⲆⲆⵠ++) {
				if (ᐃⲆᐃⲆ == Ⲇᐃᐃ[ⲆⲆⲆⵠ].ᐃⲆᐃⲆ) {
					Ⲇᐃᐃ.splice(ⲆⲆⲆⵠ, ⲆⲆᐃⵠ);
					return
				}
			}
			return
		};
		this.ⵠΔΔⲆΔᐃⵠΔⵠ = function(ᐃⲆ, ⲆⲆⲆⵠ) {
			for (var ⲆⲆᐃΔ = 0; this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆΔⵠⲆ].length > ⲆⲆᐃΔ; ⲆⲆᐃΔ++) {
				var ΔᐃⲆΔ = this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆΔⵠⲆ][ⲆⲆᐃΔ];
				if (ⲆⲆⲆⵠ === Math.floor(ΔᐃⲆΔ.x / 100) && Math.floor(ΔᐃⲆΔ.y / 100) === ᐃⲆ) return 1
			}
			return Ⲇⵠⵠᐃ
		};
		this.ᐃΔⵠⵠΔΔⵠΔⲆ = function(ᐃⲆ, ⲆⲆⲆⵠ) {
			for (var ⲆⲆᐃΔ = 0; ⲆⲆᐃΔ < this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃⲆᐃ].length; ⲆⲆᐃΔ++) {
				var ΔᐃⲆΔ = this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃⲆᐃ][ⲆⲆᐃΔ];
				if (ᐃⲆ == Math.floor(ΔᐃⲆΔ.x / 100) && ⲆⲆⲆⵠ == Math.floor(ΔᐃⲆΔ.y / ᐃⵠⵠΔⲆ)) return true
			}
			return Ⲇⵠⵠⵠᐃ
		};
		this.ΔⲆⲆⲆⵠ = function(ⲆⵠᐃⲆ) {
			for (var ᐃⲆ = 0; ᐃⲆ < ⲆⵠᐃⲆ.length; ᐃⲆ++) {
				ΔᐃⲆΔ = ⲆⵠᐃⲆ[ᐃⲆ];
				if (ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ != ΔᐃⲆΔ.angle) {
					var ⲆΔⵠΔᐃ = Math.PI * Ⲇᐃⵠⵠ;
					ΔᐃⲆΔ.angle = (ΔᐃⲆΔ.angle + ⲆΔⵠΔᐃ) % ⲆΔⵠΔᐃ;
					ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ = (ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ + ⲆΔⵠΔᐃ) % ⲆΔⵠΔᐃ;
					if (ΔᐃⲆΔ.angle != ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ) {
						var ⲆⵠᐃⵠΔⲆⲆ = ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ - ΔᐃⲆΔ.angle;
						var ᐃⲆⲆⲆ = Math.abs(ⲆⵠᐃⵠΔⲆⲆ);
						if (Math.PI < ᐃⲆⲆⲆ) ᐃⲆⲆⲆ = 2 * Math.PI - ᐃⲆⲆⲆ;
						var ΔⲆΔ = 3 * (ᐃⲆⲆⲆ / Math.PI) * ᐃΔᐃᐃ.ΔⵠⵠᐃⲆΔⲆ * ᐃⵠᐃⵠ;
						if (ⲆⵠᐃⵠΔⲆⲆ > Math.PI) ΔᐃⲆΔ.angle -= ΔⲆΔ;
						else if (ⲆⵠᐃⵠΔⲆⲆ < -Math.PI) ΔᐃⲆΔ.angle += ΔⲆΔ;
						else ⲆⵠᐃⵠΔⲆⲆ < 0 ? ΔᐃⲆΔ.angle -= ΔⲆΔ : ΔᐃⲆΔ.angle += ΔⲆΔ;
						ΔᐃⲆΔ.angle = (ΔᐃⲆΔ.angle + ⲆΔⵠΔᐃ) % ⲆΔⵠΔᐃ;
						if (ΔⲆΔ > Math.abs(ΔᐃⲆΔ.angle - ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ)) ΔᐃⲆΔ.angle = ΔᐃⲆΔ.ΔΔΔⲆⲆⵠΔ
					}
				}
				var ᐃⲆⲆⵠΔⵠⵠⵠⲆ = Math.floor(ΔᐃⲆΔ.r.y / ⵠⵠΔΔᐃ);
				var ⲆΔᐃⲆⲆⵠⲆΔΔ = Math.floor(ΔᐃⲆΔ.r.x / 100);
				if (ΔᐃⲆΔ.r.x != ΔᐃⲆΔ.x || ΔᐃⲆΔ.r.y != ΔᐃⲆΔ.y) {
					ΔᐃⲆΔ.action & ᐃⵠⲆⵠ.IDLE && (ΔᐃⲆΔ.action -= ᐃⵠⲆⵠ.IDLE);
					ΔᐃⲆΔ.action |= ᐃⵠⲆⵠ.ΔΔⲆⲆΔⲆΔ;
					var ⵠᐃΔΔ = ΔⲆᐃ.ᐃⵠᐃᐃᐃⲆⲆ(ΔᐃⲆΔ, ΔᐃⲆΔ.r) + Math.PI;
					var Ⲇᐃᐃᐃ = ᐃⵠᐃⵠ * ΔᐃⲆΔ.ⵠᐃᐃⲆⲆ;
					var ⵠΔΔ = ΔⲆᐃ.ᐃᐃᐃᐃᐃΔⲆ(Ⲇᐃᐃᐃ, ⵠᐃΔΔ);
					if (ΔⲆᐃ.ᐃⵠⵠⵠΔⵠⲆ(ΔⲆᐃ.ΔᐃⲆΔΔᐃΔ(ΔᐃⲆΔ, ΔᐃⲆΔ.r)) > ΔⲆᐃ.ᐃⵠⵠⵠΔⵠⲆ(ⵠΔΔ)) ΔⲆᐃ.ᐃᐃᐃᐃᐃⲆⲆ(ΔᐃⲆΔ, ⵠΔΔ);
					else {
						ΔᐃⲆΔ.action & ᐃⵠⲆⵠ.ΔΔⲆⲆΔⲆΔ && (ΔᐃⲆΔ.action -= ᐃⵠⲆⵠ.ΔΔⲆⲆΔⲆΔ);
						ΔᐃⲆΔ.action |= ᐃⵠⲆⵠ.IDLE;
						ΔⲆᐃ.ⵠⲆᐃⲆᐃᐃⵠ(ΔᐃⲆΔ.r, ΔᐃⲆΔ)
					}
				}
				if (ΔᐃⲆΔ.ⲆⲆⵠⲆⲆ) {
					var ᐃᐃⲆᐃᐃ = ΔᐃⲆΔ.bubbles;
					var ᐃᐃⵠᐃ = ᐃᐃⲆᐃᐃ.length;
					if (ᐃᐃⵠᐃ === 0 || ⵠ.ᐃΔΔᐃΔᐃⲆ > ᐃᐃⵠᐃ && ᐃᐃⲆᐃᐃ[ᐃᐃⵠᐃ - ΔΔΔᐃ].ⲆⲆᐃᐃΔ < .95) ᐃᐃⲆᐃᐃ.push({
						id: Math.floor(Math.random() * ᐃᐃ[ⵠ.ⵠⲆΔⲆⲆᐃΔ][ⵠⵠⵠ].length),
						x: Math.floor(ΔᐃⲆΔ.x + Math.random() * 80 - 40),
						y: Math.floor(ΔᐃⲆΔ.y + Math.random() * 80 - 40),
						"ⲆⲆᐃᐃΔ": ⲆⲆⵠ
					});
					for (var ⲆⲆⲆⵠ = Ⲇⵠᐃ; ᐃᐃⵠᐃ > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) ᐃᐃⲆᐃᐃ[ⲆⲆⲆⵠ].ⲆⲆᐃᐃΔ = Math.max(0, ᐃᐃⲆᐃᐃ[ⲆⲆⲆⵠ].ⲆⲆᐃᐃΔ - ᐃⵠᐃⵠ);
					for (var ⲆⲆⲆⵠ = ⲆⲆᐃⲆ; ⲆⲆⲆⵠ < ᐃᐃⵠᐃ; ⲆⲆⲆⵠ++) {
						if (ᐃᐃⲆᐃᐃ[ⲆⲆⲆⵠ].ⲆⲆᐃᐃΔ === 0) {
							ᐃᐃⲆᐃᐃ.splice(ⲆⲆⲆⵠ, ⲆⲆⵠ);
							break
						}
					}
				}
				var ⵠΔⲆⵠΔᐃⵠ = ⵠⵠⲆΔ;
				if (ΔᐃⲆΔ.ΔᐃΔⵠ && ⲆΔⲆⵠ.ΔⵠⵠΔΔ) {
					var ᐃᐃⲆⵠⵠ = ΔᐃⲆΔ.ᐃᐃⲆⵠⵠ;
					var ᐃᐃⵠᐃ = ᐃᐃⲆⵠⵠ.length;
					if (0 < ΔᐃⲆΔ.ᐃⲆⲆΔⵠΔⲆ && ΔᐃⲆΔ.ᐃΔⵠΔⵠ !== ΔⲆ.ΔⲆᐃᐃⵠ && ΔⲆ.ⵠⵠⲆΔΔ !== ΔᐃⲆΔ.ᐃΔⵠΔⵠ && ΔᐃⲆΔ.ᐃΔⵠΔⵠ !== ΔⲆ.ⲆⵠⲆΔⵠ && ΔᐃⲆΔ.ᐃΔⵠΔⵠ !== ΔⲆ.ΔᐃⲆΔᐃ && ΔⲆ.ᐃΔᐃΔᐃ !== ΔᐃⲆΔ.ᐃΔⵠΔⵠ && !ΔᐃⲆΔ.ⲆⲆⵠⲆⲆ) {
						ⵠΔⲆⵠΔᐃⵠ = 1;
						if (0 === ᐃᐃⵠᐃ || ⵠ.ᐃⵠⵠΔⵠⲆΔ < ΔⲆᐃ.ⲆⵠⲆⲆ(ᐃᐃⲆⵠⵠ[ᐃᐃⵠᐃ - 1], ΔᐃⲆΔ)) {
							var ΔΔⲆ = -ΔᐃⲆΔ.angle;
							var Ⲇᐃ = 45 * Math.cos(ΔΔⲆ) * Ⲇ;
							var ⲆⲆⲆ = Math.sin(ΔΔⲆ) * 45 * Ⲇ;
							ᐃᐃⲆⵠⵠ.push({
								x: ΔᐃⲆΔ.x + Ⲇᐃ,
								y: ΔᐃⲆΔ.y + ⲆⲆⲆ,
								r: 8,
								alpha: .8
							});
							ᐃᐃⲆⵠⵠ.push({
								x: ΔᐃⲆΔ.x - Ⲇᐃ,
								y: ΔᐃⲆΔ.y - ⲆⲆⲆ,
								r: 8,
								alpha: .8
							});
							ᐃᐃⲆⵠⵠ.push({
								x: ΔᐃⲆΔ.x,
								y: ΔᐃⲆΔ.y,
								r: 24,
								alpha: ⵠᐃᐃ
							})
						}
					}
					for (var ⲆⲆⲆⵠ = ⵠᐃⵠ; ᐃᐃⵠᐃ > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
						ᐃᐃⲆⵠⵠ[ⲆⲆⲆⵠ].alpha = Math.max(Ⲇⵠᐃ, ᐃᐃⲆⵠⵠ[ⲆⲆⲆⵠ].alpha - ᐃⵠᐃⵠ / 2.2);
						ᐃᐃⲆⵠⵠ[ⲆⲆⲆⵠ].r += ᐃⵠᐃⵠ * ⲆΔⲆⲆⵠ
					}
					if (ᐃᐃⲆⵠⵠ.length > ⵠⵠⲆΔ && ᐃᐃⲆⵠⵠ[0].alpha === ⵠⵠⲆΔ) ᐃᐃⲆⵠⵠ.splice(0, ⵠᐃᐃ);
					var ΔΔΔᐃⲆ = ΔᐃⲆΔ.ΔΔΔᐃⲆ;
					var ᐃᐃⵠᐃ = ΔΔΔᐃⲆ.length;
					var ΔΔ = -1;
					var ⲆᐃᐃⲆΔⲆᐃ = Math.max(ⵠᐃΔ, Math.sign(ΔᐃⲆΔ.ᐃᐃⵠⲆⵠⲆΔ));
					var ⲆᐃΔⵠΔ = Math.max(Ⲇⵠⵠᐃ, Math.sign(ΔᐃⲆΔ.ΔΔⵠⵠⵠ));
					var ⲆⲆᐃⲆΔⲆΔΔⲆ = Math.max(0, Math.sign(ΔᐃⲆΔ.ᐃⵠΔᐃⲆ));
					var ⵠⲆⲆⲆΔⲆᐃ = Math.max(0, Math.sign(ΔᐃⲆΔ.ⵠΔᐃⲆⵠ));
					var ⵠⵠⵠⵠΔⲆᐃ = Math.max(0, Math.sign(ΔᐃⲆΔ.ⵠⵠⵠⵠΔ));
					if (ΔᐃⲆΔ.ᐃᐃⵠⲆⵠⲆΔ > 0 || ΔᐃⲆΔ.ᐃⵠΔᐃⲆ > 0) var ΔΔ = ⵠ.ᐃⵠⲆΔⲆᐃⵠ;
					else if (ΔᐃⲆΔ.ⵠⵠⵠⵠΔ > ⵠⵠⵠ) var ΔΔ = ⵠ.ⵠᐃΔΔⲆᐃΔ;
					else if (ⵠⵠⵠ < ΔᐃⲆΔ.ΔΔⵠⵠⵠ) var ΔΔ = ⵠ.ΔΔΔᐃΔΔⲆ;
					else if (ΔᐃⲆΔ.ⵠΔᐃⲆⵠ > ᐃⲆΔ) var ΔΔ = ⵠ.ΔⲆᐃᐃⵠⵠᐃ;
					if (ΔᐃⲆΔ.ᐃΔⵠΔⵠ === ΔⲆ.ⵠᐃΔⲆᐃ && (ⲆᐃᐃⲆΔⲆᐃ | ⲆᐃΔⵠΔ | ⵠⲆⲆⲆΔⲆᐃ | ⵠⵠⵠⵠΔⲆᐃ) === 1) {
						ΔΔ = ⵠ.ⵠΔⲆᐃᐃⵠᐃ;
						var ⵠᐃΔⲆᐃⵠᐃ = ΔᐃⲆΔ.ⲆⵠⵠⵠⲆ - Math.PI / ΔⲆⵠΔ;
						var ᐃᐃᐃⵠⵠΔⲆ = ⲆⵠⲆⲆᐃⲆⲆ;
						var ⵠⵠⲆⲆⲆ = 11;
						var ΔᐃᐃΔⲆⵠⵠ = ⵠ.ᐃⵠᐃⲆΔᐃΔ
					} else if (ΔᐃⲆΔ.ᐃΔⵠΔⵠ === ΔⲆ.ⲆⲆⵠⵠⵠ && ᐃΔΔⲆ === (ⲆᐃᐃⲆΔⲆᐃ | ⲆᐃΔⵠΔ | ⵠⲆⲆⲆΔⲆᐃ | ⵠⵠⵠⵠΔⲆᐃ)) {
						ΔΔ = ⵠ.ⲆᐃⵠᐃⵠΔⲆ;
						var ⵠᐃΔⲆᐃⵠᐃ = ΔᐃⲆΔ.ⲆⵠⵠⵠⲆ - Math.PI / ⵠⵠᐃⲆ;
						var ᐃᐃᐃⵠⵠΔⲆ = 21;
						var ⵠⵠⲆⲆⲆ = ᐃΔᐃⲆⲆ;
						var ΔᐃᐃΔⲆⵠⵠ = ⵠ.ᐃⵠᐃⲆΔᐃΔ
					} else if (ΔⲆ.ⲆⵠⵠⲆΔ === ΔᐃⲆΔ.ᐃΔⵠΔⵠ && (ⲆᐃᐃⲆΔⲆᐃ | ⲆᐃΔⵠΔ | ⵠⲆⲆⲆΔⲆᐃ | ⵠⵠⵠⵠΔⲆᐃ) === 1) {
						ΔΔ = ⵠ.ᐃⲆΔⲆⲆΔⵠ;
						var ⵠᐃΔⲆᐃⵠᐃ = ΔᐃⲆΔ.ⲆⵠⵠⵠⲆ - Math.PI / ᐃᐃⲆⵠ;
						var ⲆⲆᐃⵠΔⵠⵠ = Math.random() * 50;
						var ᐃᐃᐃⵠⵠΔⲆ = ΔⵠⲆᐃΔ + ⲆⲆᐃⵠΔⵠⵠ;
						var ⵠⵠⲆⲆⲆ = 0 + ⲆⲆᐃⵠΔⵠⵠ;
						var ΔᐃᐃΔⲆⵠⵠ = .9 * ⵠ.ᐃⵠᐃⲆΔᐃΔ
					} else {
						var ⵠᐃΔⲆᐃⵠᐃ = ΔᐃⲆΔ.angle;
						var ᐃᐃᐃⵠⵠΔⲆ = 15;
						var ⵠⵠⲆⲆⲆ = ᐃⵠᐃΔⲆⵠⲆ;
						var ΔᐃᐃΔⲆⵠⵠ = ⵠ.ᐃⵠᐃⲆΔᐃΔ
					}
					if (ΔᐃⲆΔ.ᐃΔⵠΔⵠ === ΔⲆ.ΔⲆᐃᐃⵠ || ΔⲆ.ⵠⵠⲆΔΔ === ΔᐃⲆΔ.ᐃΔⵠΔⵠ || ΔᐃⲆΔ.ᐃΔⵠΔⵠ === ΔⲆ.ᐃΔᐃΔᐃ || ΔᐃⲆΔ.ᐃΔⵠΔⵠ === ΔⲆ.ΔᐃⲆΔᐃ || ΔᐃⲆΔ.ᐃΔⵠΔⵠ === ΔⲆ.ⲆⵠⲆΔⵠ || ΔᐃⲆΔ.ⲆⲆⵠⲆⲆ);
					else if (ΔⲆ.ⵠⲆⲆⲆⵠ === ΔᐃⲆΔ.ᐃΔⵠΔⵠ) {
						if (0 === ᐃᐃⵠᐃ || ΔⲆᐃ.ⲆⵠⲆⲆ(ΔΔΔᐃⲆ[ᐃᐃⵠᐃ - 1], ΔᐃⲆΔ) > ⵠ.ⲆⲆⲆⵠΔⲆⲆ) ΔΔΔᐃⲆ.push({
							x: ΔᐃⲆΔ.x,
							y: ΔᐃⲆΔ.y,
							angle: ΔᐃⲆΔ.ⲆⵠⵠⵠⲆ,
							alpha: 1,
							id: ⵠ.ⲆΔᐃΔΔΔⵠ
						})
					} else if (ΔΔ != -1 && ⵠΔⲆⵠΔᐃⵠ === ⵠⵠⵠ) {
						if (ᐃᐃⵠᐃ === 0 || ΔⲆᐃ.ⲆⵠⲆⲆ(ΔΔΔᐃⲆ[ᐃᐃⵠᐃ - ᐃΔΔⲆ], ΔᐃⲆΔ) > ΔᐃᐃΔⲆⵠⵠ) {
							ΔᐃⲆΔ.ΔᐃⵠⲆⵠΔᐃ++;
							if (Math.abs(ΔᐃⲆΔ.x - ΔᐃⲆΔ.r.x) > ⵠⲆⵠⲆ && ⲆⵠΔΔ < Math.abs(ΔᐃⲆΔ.y - ΔᐃⲆΔ.r.y)) {
								if (ΔᐃⲆΔ.r.x > ΔᐃⲆΔ.x && ΔᐃⲆΔ.y > ΔᐃⲆΔ.r.y || ΔᐃⲆΔ.x > ΔᐃⲆΔ.r.x && ΔᐃⲆΔ.r.y > ΔᐃⲆΔ.y) {
									if (ΔᐃⲆΔ.ΔᐃⵠⲆⵠΔᐃ % ᐃᐃⵠⵠ) {
										var Ⲇᐃ = -ⵠⵠⲆⲆⲆ * Ⲇ;
										var ⲆⲆⲆ = -ⵠⵠⲆⲆⲆ * Ⲇ
									} else {
										var ⲆⲆⲆ = ⵠⵠⲆⲆⲆ * Ⲇ;
										var Ⲇᐃ = Ⲇ * ⵠⵠⲆⲆⲆ
									}
								} else {
									if (ΔᐃⲆΔ.ΔᐃⵠⲆⵠΔᐃ % ΔⲆⵠΔ) {
										var Ⲇᐃ = ⵠⵠⲆⲆⲆ * Ⲇ;
										var ⲆⲆⲆ = Ⲇ * -ⵠⵠⲆⲆⲆ
									} else {
										var ⲆⲆⲆ = Ⲇ * ⵠⵠⲆⲆⲆ;
										var Ⲇᐃ = Ⲇ * -ⵠⵠⲆⲆⲆ
									}
								}
							} else if (ΔᐃⲆΔ.ΔᐃⵠⲆⵠΔᐃ % ΔⵠⲆⲆ) {
								var Ⲇᐃ = Ⲇ * (Math.cos(ⵠᐃΔⲆᐃⵠᐃ) * ᐃᐃᐃⵠⵠΔⲆ);
								var ⲆⲆⲆ = Ⲇ * (Math.sin(ⵠᐃΔⲆᐃⵠᐃ) * ᐃᐃᐃⵠⵠΔⲆ)
							} else {
								var Ⲇᐃ = Ⲇ * (-Math.cos(ⵠᐃΔⲆᐃⵠᐃ) * ᐃᐃᐃⵠⵠΔⲆ);
								var ⲆⲆⲆ = Ⲇ * (ᐃᐃᐃⵠⵠΔⲆ * -Math.sin(ⵠᐃΔⲆᐃⵠᐃ))
							}
							ΔΔΔᐃⲆ.push({
								x: ΔᐃⲆΔ.x + Ⲇᐃ,
								y: ΔᐃⲆΔ.y + ⲆⲆⲆ,
								angle: ⵠᐃΔⲆᐃⵠᐃ + Math.PI / ᐃⵠΔⲆ,
								alpha: ΔᐃⵠⲆ,
								id: ΔΔ
							})
						}
					}
					for (var ⲆⲆⲆⵠ = 0; ᐃᐃⵠᐃ > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
						if (ⵠ.ⲆΔᐃΔΔΔⵠ === ΔΔΔᐃⲆ[ⲆⲆⲆⵠ].id) ΔΔΔᐃⲆ[ⲆⲆⲆⵠ].alpha = Math.max(0, ΔΔΔᐃⲆ[ⲆⲆⲆⵠ].alpha - ᐃⵠᐃⵠ * 1.5);
						else ΔΔΔᐃⲆ[ⲆⲆⲆⵠ].alpha = Math.max(0, ΔΔΔᐃⲆ[ⲆⲆⲆⵠ].alpha - ᐃⵠᐃⵠ / 2.85)
					}
					if (0 < ΔΔΔᐃⲆ.length && 0 === ΔΔΔᐃⲆ[0].alpha) ΔΔΔᐃⲆ.splice(ⵠΔⵠᐃ, ⲆⲆⲆᐃ)
				}
			}
		};
		this.ΔⵠΔ = function() {
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⲆⵠⵠ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠΔⲆⲆᐃ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠⵠᐃᐃ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔⵠⲆⵠ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⲆⵠⵠⵠ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆⵠⵠⲆΔ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃᐃⵠ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ⵠⵠⲆΔΔ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆΔᐃ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⵠΔ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⲆᐃᐃΔ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔᐃᐃᐃ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃᐃⲆᐃ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆΔⲆⵠΔ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.Δᐃⵠⵠⵠ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃΔΔⲆᐃ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ⲆᐃⲆΔⲆ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃᐃΔᐃᐃⵠΔ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔⵠΔᐃⲆ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⲆⵠⲆⲆ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃᐃⲆ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ᐃⵠΔΔⵠ]);
			this.ΔⲆⲆⲆⵠ(this.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃᐃᐃΔ])
		};
		this.ⵠᐃⵠᐃ = [];
		this.ⵠᐃⵠᐃ[ⵠ.ⲆⲆⵠΔᐃ] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, Δⵠᐃ, 1.05, ΔΔⵠ, .008, .008);
		this.ⵠᐃⵠᐃ[ⵠ.ᐃⲆⵠᐃⲆ] = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆᐃΔᐃⵠ, 1, 1.08, 1, .006, .006);
		this.ⵠᐃⵠᐃ[ⵠ.ⲆΔΔⵠᐃ] = new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔΔⲆᐃᐃ, 1, 1.02, 1, .008, .008);
		this.ⵠᐃⵠᐃ[ⵠ.ⵠⲆⵠΔᐃ] = new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔⲆⲆΔⵠ, 1, 1.08, ᐃⲆⲆ, .006, .006);
		this.ΔᐃⵠΔΔ = [];
		this.ΔᐃⵠΔΔ[0] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .1, ⲆⵠⲆ, 0, .6, .6);
		this.ΔᐃⵠΔΔ[1] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .4, 1, 0, .6, .6);
		this.ΔᐃⵠΔΔ[2] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .3, ⲆⵠⲆ, Δⵠⵠ, .6, .6);
		this.ΔᐃⵠΔΔ[ΔᐃΔⲆ] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .8, 1, 0, .6, .6);
		this.ΔᐃⵠΔΔ[ΔᐃᐃΔ] = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃΔᐃᐃΔ, .3, 1, 0, .6, .6);
		this.ΔᐃⵠΔΔ[ΔⲆⵠⵠ] = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃΔⵠΔᐃ, .8, ᐃΔⵠΔ, ⵠΔⵠᐃ, .6, .6);
		this.ΔᐃⵠΔΔ[6] = new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔΔⲆᐃᐃ, .5, 1, ⵠᐃΔ, .6, .6);
		this.ΔᐃⵠΔΔ[7] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9, ⲆⲆΔⵠ, 0, .6, .6);
		this.ΔᐃⵠΔΔ[ⲆΔⵠΔΔ] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, 1, 0, .6, .6);
		this.ΔᐃⵠΔΔ[ᐃⵠⲆᐃᐃⲆΔ] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .2, ΔᐃⵠⲆ, 0, .6, .6);
		this.ΔᐃⵠΔΔ[10] = new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔⲆⲆΔⵠ, .6, 1, ⵠⵠΔΔ, .6, .6);
		this.ΔᐃⵠΔΔ[11] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .4, 1, 0, .6, .6);
		this.ΔᐃⵠΔΔ[12] = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠⲆⵠⵠΔ, .8, 1, ⵠⵠΔΔ, .6, .6);
		this.ΔᐃⵠΔΔ[ᐃᐃΔΔΔ] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .2, 1, 0, .6, .6);
		this.ΔᐃⵠΔΔ[ᐃⲆⵠⵠᐃ] = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .7, 1, ᐃⲆᐃ, .6, .6)
	}

	function ᐃⵠⵠᐃᐃⵠΔ(ⲆⵠΔⵠ, ⲆⲆΔᐃ, ΔΔ, Ⲇᐃ, ⲆⲆⲆ, ΔΔⲆ, ΔⲆΔᐃ, ⵠⵠΔ, ⵠᐃᐃⲆⲆ, ⲆᐃΔⵠᐃ) {
		this.type = ⲆⵠΔⵠ;
		this.ⲆⲆΔᐃ = ⲆⲆΔᐃ;
		this.pid = arguments[1];
		this.id = ΔΔ;
		this.x = Ⲇᐃ;
		this.y = ⲆⲆⲆ;
		this.angle = ΔΔⲆ;
		this.ΔΔΔⲆⲆⵠΔ = ΔΔⲆ;
		this.action = ΔⲆΔᐃ;
		this.info = ⵠⵠΔ;
		this.ⲆᐃΔⵠᐃ = ⲆᐃΔⵠᐃ;
		this.r = {
			x: Ⲇᐃ,
			y: ⲆⲆⲆ
		};
		this.ⵠᐃᐃⲆⲆ = ⵠᐃᐃⲆⲆ;
		if (ⵠⲆΔ) this.ᐃⲆᐃⲆ = ⵠⲆΔ.ⵠⲆΔΔᐃⵠΔ * ⲆⲆΔᐃ + ΔΔ;
		switch (ⲆⵠΔⵠ) {
			case ᐃᐃᐃ.ΔᐃⲆᐃ:
				this.ᐃΔΔⵠ = ⵠⲆΔ.ΔΔᐃΔ[this.ⲆⲆΔᐃ];
				this.ⵠⲆᐃᐃ = this.ᐃΔΔⵠ.ⵠⲆᐃᐃ;
				this.ᐃΔⲆⲆΔΔΔ = this.ᐃΔΔⵠ.ᐃΔⲆⲆΔΔΔ;
				this.ⲆⵠᐃⲆᐃ = this.ᐃΔΔⵠ.ⲆⵠᐃⲆᐃ;
				this.ⵠΔⵠⲆⲆ = this.ᐃΔΔⵠ.ⵠΔⵠⲆⲆ;
				this.ⵠⲆⵠⵠᐃᐃⵠ = -1e6;
				this.ⵠΔᐃⲆⵠ = -1e6;
				this.ΔΔⵠⵠⵠ = -1e6;
				this.ᐃⵠΔᐃⲆ = -1e6;
				this.ᐃⲆⲆΔⵠΔⲆ = -1e6;
				this.ᐃᐃⵠⲆⵠⲆΔ = -1e6;
				this.ⵠⵠⵠⵠΔ = -1e6;
				this.ΔⵠⵠⵠΔ = ⵠⲆΔ.mode === ᐃΔᐃᐃ.ᐃΔΔΔᐃ && ᐃΔᐃᐃ.ΔⵠᐃⲆΔΔⲆ === this.ⵠⲆᐃᐃ ? true : ⲆᐃΔᐃⵠ;
				this.ⲆⵠΔⲆⵠΔⲆ = ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ === ⵠⲆΔ.mode && ᐃΔᐃᐃ.ⲆⵠⵠⵠⵠΔⲆ === this.ⵠⲆᐃᐃ ? ΔⲆΔⵠⲆ : false;
				this.ΔⲆⲆⲆⵠᐃⲆ = this.ΔⵠⵠⵠΔ && this.ᐃΔΔⵠ.ⵠⲆⵠΔⵠ === "  " ? ᐃᐃⲆᐃⵠ : ⵠⲆᐃⵠⵠ;
				this.ΔΔΔᐃⲆ = [];
				this.ⲆᐃⲆᐃⲆⵠΔ = 0;
				this.ΔᐃΔⵠ = true;
				this.ΔᐃⵠⲆⵠΔᐃ = 0;
				this.ⲆΔⲆⲆⵠⵠⵠ = ⲆⲆΔ;
				this.ᐃᐃⲆⵠⵠ = [];
				this.r = {
					x: Ⲇᐃ,
					y: ⲆⲆⲆ
				};
				this.ᐃⵠΔᐃ = ᐃᐃᐃⵠΔⲆⵠⵠⲆ;
				this.ᐃᐃᐃⲆΔⲆΔ = ᐃᐃᐃⲆΔⲆΔ;
				this.ᐃΔⵠᐃⵠ = 0;
				this.ⲆⵠⵠⵠⲆ = 0;
				this.ΔΔⵠᐃⵠ = 0;
				this.ⲆⵠⲆⵠᐃⲆⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ⵠⵠⲆΔ, Δⵠⵠ, -Math.PI / ⲆⵠⲆΔⲆ, .5, 1);
				this.ⵠⵠⵠⵠⵠ = 0;
				this.ΔⲆΔⲆⲆⲆⵠ = ⵠΔⵠᐃ;
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(Ⲇⵠᐃⵠᐃ, .6, .6, 0, 5, 3);
				this.ᐃΔᐃⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, ⵠᐃΔ, 5, ⵠᐃᐃΔ);
				this.freeze = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠⲆᐃⵠⵠ, .6, .6, ⵠᐃΔ, 5, 3);
				this.ᐃⲆᐃΔΔⲆⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, Ⲇⵠⵠᐃ, 5, ΔᐃΔⲆ);
				this.ᐃΔᐃᐃΔΔⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(true, 0, 2.25, -1.5, 3.75, 7.5);
				this.ⵠᐃᐃΔΔⲆⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(true, ⵠᐃΔ, 7.5, -ⵠⵠⲆᐃ, 22.5, 33.75);
				this.attack = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃΔⵠΔᐃ, ᐃⲆΔ, 0, -Math.PI / ᐃΔᐃⲆ, 6, ᐃΔⵠⲆⲆ);
				this.ⲆΔΔⵠΔⵠⲆⵠⵠ = ⵠⵠΔΔ;
				this.ⵠⲆΔⵠⲆⲆⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, 0, ⵠᐃᐃ, 3);
				this.ᐃⲆⵠⲆⲆᐃⵠ = this.ΔⲆⲆⲆⵠᐃⲆ ? new ΔⲆᐃ.ᐃⵠⲆⲆ(true, ᐃⲆΔᐃ, 2.25, -1.5, 2.75, 5.5) : 0;
				this.ΔᐃᐃⲆⵠᐃᐃ = ᐃⲆΔᐃ;
				this.ᐃⲆⲆΔⵠΔᐃ = 0;
				this.ⵠⲆⲆΔⲆⲆΔ = [];
				this.ΔⵠᐃΔⲆⲆΔ = [];
				this.text = [];
				this.label = [];
				this.ᐃΔⲆⵠⲆΔⲆ = ⲆⲆΔⲆΔⵠᐃᐃᐃ;
				this.ⲆΔⲆᐃΔ = ⵠⲆⵠᐃⵠ;
				this.right = -1;
				this.ᐃΔⵠΔⵠ = -ⵠᐃᐃ;
				this.action = ᐃⵠⲆⵠ.IDLE;
				this.ΔᐃⲆΔᐃⵠΔ = ᐃΔⵠΔᐃ;
				this.ⲆΔᐃΔᐃ = 0;
				this.ⲆⲆⵠⲆⲆ = false;
				this.bubbles = [];
				this.ᐃΔⲆΔΔ = 0;
				this.ⲆⲆᐃⲆᐃ = -ᐃⵠᐃᐃ;
				this.ΔⵠΔ = function(ΔⲆΔᐃ) {
					this.info & 32768 ? (this.ΔᐃⲆΔᐃⵠΔ = true, this.info = ~32768 & this.info) : this.ΔᐃⲆΔᐃⵠΔ = ΔΔⲆᐃᐃ;
					if (this.info & 16384) {
						this.info = ~16384 & this.info;
						this.ᐃΔⲆΔΔ = 1
					} else this.ᐃΔⲆΔΔ = ᐃⲆΔᐃ;
					this.ⲆΔᐃΔᐃ = Math.floor(this.info / 128);
					this.info -= this.ⲆΔᐃΔᐃ * 128;
					if (this.info === ΔⲆ.ΔΔⲆⵠᐃ || this.ΔⲆⲆⲆⵠᐃⲆ) this.right = -ᐃⵠᐃᐃ;
					else this.right = this.info;
					this.ⲆᐃⲆᐃⲆⵠΔ = ⵠⲆΔ.ⵠΔΔⲆΔᐃⵠΔⵠ(Math.floor(this.r.y / ⵠⵠΔΔᐃ), Math.floor(this.r.x / ΔᐃΔⲆᐃ));
					this.ᐃΔⵠΔⵠ = this.ⲆᐃΔⵠᐃ & 255;
					if (this.right === ᐃΔᐃᐃ.ᐃΔⵠⵠⵠⵠΔΔᐃ) this.ⲆⲆⵠⲆⲆ = true;
					else this.ⲆⲆⵠⲆⲆ = ᐃΔᐃᐃΔ;
					
					/*
					if (this.right === ᐃΔᐃᐃ.ᐃΔⵠⵠⵠⵠΔΔᐃ) {
						this.ⲆⲆⵠⲆⲆ = true;
					
						if (!((60 - (performance.now() - this.ghosttime) / 1000).toFixed(1) < 0)) {
							this.ghosttime;
						}
						this.ghosttime = performance.now();
					} else {
						this.ⲆⲆⵠⲆⲆ = ᐃΔᐃᐃ;
						this.ghosttime = null;
					}	
					*/				
					if (ⲆᐃⲆᐃΔ[this.right]) this.ᐃᐃⵠⵠΔ = true;
					else this.ᐃᐃⵠⵠΔ = false;
					if (ΔⲆΔᐃ & ᐃⵠⲆⵠ.ΔⵠᐃΔΔᐃΔ) {
						this.ⵠⲆΔⵠⲆⲆⵠ.ⵠΔⲆ = false;
						this.ⵠⲆΔⵠⲆⲆⵠ.ⵠΔΔ = .6
					} else if (ΔⲆΔᐃ & ᐃⵠⲆⵠ.ⲆⲆᐃᐃᐃ) {
						this.freeze.ⵠΔⲆ = false;
						this.freeze.ⵠΔΔ = .6
					} else ΔⲆΔᐃ & ᐃⵠⲆⵠ.ⲆΔⲆᐃⲆⵠᐃ && (this.ᐃΔᐃⵠⵠ.ⵠΔⲆ = false, this.ᐃΔᐃⵠⵠ.ⵠΔΔ = .6);
					ΔⲆΔᐃ & ᐃⵠⲆⵠ.ⲆⲆᐃⵠᐃᐃⲆ && (this.ᐃⲆᐃΔΔⲆⲆ.ⵠΔⲆ = ΔΔⲆᐃᐃ, this.ᐃⲆᐃΔΔⲆⲆ.ⵠΔΔ = .6);
					if (ΔⲆΔᐃ & ᐃⵠⲆⵠ.ᐃᐃᐃΔ) {
						this.ΔΔᐃ.ⵠΔⲆ = false;
						this.ΔΔᐃ.ⵠΔΔ = .6
					}
					if (ΔⲆΔᐃ & ᐃⵠⲆⵠ.ⵠⲆⵠⲆᐃᐃΔ) {
						this.ⲆΔΔⵠΔⵠⲆⵠⵠ = ᐃᐃᐃᐃⵠ.ΔⵠΔⵠⵠⵠᐃᐃᐃ;
						ⵠⲆⵠᐃ.ΔᐃᐃⵠⲆ && this.ⲆⲆᐃⲆᐃ !== -ⵠᐃᐃ && ⵠⲆⵠᐃ.ΔΔᐃΔ[this.ⲆⲆᐃⲆᐃ].ⲆᐃᐃΔᐃⵠΔΔⵠ(ᐃⲆΔⲆᐃ[this.right])
					}
				};
				this.ΔⵠΔ();
				break;
			case ᐃᐃᐃ.ᐃⲆⲆⵠᐃ:
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ⲆⲆⲆᐃ, 1, Ⲇⵠᐃ, 10, ⲆΔⲆᐃⵠ),
					"ΔⵠΔ": false,
					angle: 0
				};
				this.ⲆΔΔΔⵠ = ⲆᐃⵠⵠΔᐃⵠⵠᐃ;
				this.ΔΔⵠⵠᐃ = ΔⲆΔᐃⵠᐃⲆⲆΔ;
				this.ⵠᐃⵠⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃΔⵠΔᐃ, ᐃΔⲆΔ, 1.23, 1.18, .01, .01);
				this.ⵠⲆΔⵠᐃᐃᐃ = 0;
				this.ⵠⲆⲆᐃⲆⲆᐃ = 0;
				this.ᐃᐃⵠⵠᐃ = ᐃᐃⵠⵠᐃ;
				break;
			case ᐃᐃᐃ.ΔⵠᐃΔΔ:
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔΔⲆᐃᐃ, 1, 1, 0, 10, ΔⵠΔᐃΔ),
					"ΔⵠΔ": false,
					angle: Δⵠⵠ
				};
				this.ⲆΔΔΔⵠ = ⲆⲆⲆᐃΔᐃⲆᐃΔ;
				this.ΔΔⵠⵠᐃ = ᐃΔΔⲆᐃⲆᐃᐃⲆ;
				this.ⵠᐃⵠⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔⲆⲆᐃΔ, ᐃΔΔⲆ, 1.23, 1.18, .01, .01);
				this.ⵠⲆΔⵠᐃᐃᐃ = ΔᐃⲆⲆ;
				this.ⵠⲆⲆᐃⲆⲆᐃ = ⵠⵠᐃ;
				break;
			case ᐃᐃᐃ.ΔⲆⲆΔᐃ:
			case ᐃᐃᐃ.ᐃⲆⵠⲆᐃ:
				this.ⲆΔΔΔⵠ = ⵠᐃᐃⵠⵠⵠⲆᐃⲆ;
				this.ΔΔⵠⵠᐃ = ⲆⵠⲆᐃΔᐃⲆⲆⵠ;
				this.ᐃⵠΔΔⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1.03, .98, .3, .3);
				this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1.23, 1.18, .01, .01);
				this.ⵠᐃⵠⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1.23, 1.18, .01, .01);
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃΔᐃⲆΔ, 1, 1, ⵠᐃΔ, ⲆⲆᐃᐃⵠ, 10),
					"ΔⵠΔ": ᐃⲆⵠᐃⵠ,
					angle: ⵠΔⵠᐃ
				};
				break;
			case ᐃᐃᐃ.ⲆᐃⲆΔⵠ:
				this.ⲆΔΔΔⵠ = ⲆΔⵠᐃΔᐃⵠⵠΔ;
				this.ΔΔⵠⵠᐃ = ⵠΔⵠⲆⲆᐃⲆⲆⲆ;
				this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9, 1.05, .9, .2, .2);
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, 10, ⵠΔⲆⲆΔ),
					"ΔⵠΔ": false,
					angle: ⵠᐃΔ
				};
				this.ΔΔⵠΔ = [];
				for (var ᐃⲆ = 0; ᐃⲆ < 3; ᐃⲆ++) this.ΔΔⵠΔ.push({
					"ᐃⵠΔᐃ": ⵠΔᐃΔⲆⵠᐃᐃⵠ,
					"ⵠᐃⵠᐃ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔᐃΔΔᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2)
				});
				this.ΔΔⵠΔ[ⵠᐃⲆⵠ].x = this.x - 16.5;
				this.ΔΔⵠΔ[ⵠⵠⲆΔ].y = this.y - 15.5;
				this.ΔΔⵠΔ[ⵠΔⵠᐃ].angle = this.angle;
				this.ΔΔⵠΔ[1].x = this.x + 36;
				this.ΔΔⵠΔ[ᐃⲆⲆ].y = this.y + 17;
				this.ΔΔⵠΔ[1].angle = this.angle;
				this.ΔΔⵠΔ[2].x = this.x - 18.5;
				this.ΔΔⵠΔ[Ⲇᐃⵠⵠ].y = this.y + 39;
				this.ΔΔⵠΔ[2].angle = this.angle;
				break;
			case ᐃᐃᐃ.ⲆᐃⵠΔΔ:
				this.ⲆΔΔΔⵠ = ⲆᐃᐃᐃᐃΔᐃᐃᐃ;
				this.ΔΔⵠⵠᐃ = ⲆΔⲆⵠⲆⲆⲆΔΔ;
				this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9, 1.05, .9, .2, .2);
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, ᐃΔΔⲆ, 0, 10, ΔΔⲆΔΔ),
					"ΔⵠΔ": false,
					angle: 0
				};
				this.ΔΔⵠΔ = [];
				for (var ᐃⲆ = 0; 3 > ᐃⲆ; ᐃⲆ++) this.ΔΔⵠΔ.push({
					"ᐃⵠΔᐃ": ΔᐃΔΔⲆⵠⲆ,
					"ⵠᐃⵠᐃ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2)
				});
				this.ΔΔⵠΔ[0].x = this.x - 16.5;
				this.ΔΔⵠΔ[ⵠΔΔⲆ].y = this.y - 15.5;
				this.ΔΔⵠΔ[1].x = this.x - 5.5;
				this.ΔΔⵠΔ[1].y = this.y + 7.5;
				this.ΔΔⵠΔ[ⵠᐃᐃⲆ].x = this.x + ⵠΔⲆᐃΔ;
				this.ΔΔⵠΔ[ⵠΔⵠⲆ].y = this.y - 5;
				break;
			case ᐃᐃᐃ.ⲆⲆⵠⵠⵠ:
				this.ᐃⵠΔᐃ = ⵠⲆΔⲆⵠΔᐃⲆⵠ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠᐃΔΔᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, ᐃⲆΔᐃ, ⵠΔⲆᐃ, ⵠⵠⲆⲆ);
				break;
			case ᐃᐃᐃ.ᐃΔⵠⲆⵠ:
				this.ᐃⵠΔᐃ = ⲆΔΔΔⲆⵠⵠΔᐃ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠⲆⵠⵠΔ, .6, .6, 0, ΔΔⵠⲆΔ, 3);
				break;
			case ᐃᐃᐃ.ⲆⵠⵠⲆΔ:
				this.ᐃⵠΔᐃ = ⲆⲆΔᐃⵠⲆⲆⲆᐃ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(Ⲇⵠⵠⵠᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ΔⲆΔΔᐃᐃⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⲆᐃΔⲆΔΔⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃᐃⲆᐃΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, ᐃⲆΔᐃ, 5, 3);
				this.ᐃΔᐃⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, ⵠⵠⵠ, ⲆⵠⲆᐃ, 3);
				break;
			case ᐃᐃᐃ.ⵠⵠⵠᐃᐃ:
				this.ᐃⵠΔᐃ = ᐃΔⲆⵠⵠⲆᐃⲆⵠ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ΔⲆΔΔᐃᐃⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃⲆⵠᐃⵠ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⲆᐃΔⲆΔΔⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔΔᐃΔⵠ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, ⵠΔΔⲆ, 5, ⵠⵠⲆⲆ);
				this.ᐃΔᐃⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, 0, 5, 3);
				break;
			case ᐃᐃᐃ.ᐃⲆⵠⲆⲆ:
				this.ᐃⵠΔᐃ = ΔᐃⲆΔⵠⲆⲆᐃⲆ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃᐃⲆᐃΔ, .6, .6, 0, 5, 3);
				break;
			case ᐃᐃᐃ.ⲆΔⲆⵠΔ:
				this.ᐃⵠΔᐃ = ⲆⲆᐃⵠⵠΔⲆ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9 + Math.random() * .15, 1.05, .9, .5, .5);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, ⲆⲆᐃⲆ, ⵠΔⲆᐃ, ⵠᐃⵠΔ);
				break;
			case ᐃᐃᐃ.ⲆᐃᐃⲆᐃ:
				this.ΔⲆⲆⲆⲆ = this.info & 15;
				this.ⲆΔⲆⲆⵠⵠⵠ = this.ⲆᐃΔⵠᐃ & 1;
				this.ΔⵠᐃᐃΔⵠⵠ = 0;
				this.x = this.info;
				this.y = this.ⲆᐃΔⵠᐃ;
				this.ᐃⵠΔᐃ = ᐃⲆⵠᐃⲆⵠⲆⵠⲆ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠⲆᐃⵠⵠ, .9 + Math.random() * .15, 1.05, .9, .6, .6);
				break;
			case ᐃᐃᐃ.ᐃⲆⲆⵠⵠ:
			case ᐃᐃᐃ.ⵠΔⲆⲆᐃ:
			case ᐃᐃᐃ.ⲆᐃᐃⵠΔ:
			case ᐃᐃᐃ.ΔⲆᐃᐃΔ:
			case ᐃᐃᐃ.Δᐃⵠⵠⵠ:
			case ᐃᐃᐃ.ᐃΔΔⲆᐃ:
			case ᐃᐃᐃ.ΔᐃᐃᐃⲆ:
			case ᐃᐃᐃ.ᐃⵠΔΔⵠ:
			case ᐃᐃᐃ.ᐃΔᐃᐃᐃ:
				this.ᐃⵠΔᐃ = ⲆⲆᐃⵠⵠΔⲆ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔⲆⲆᐃΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃᐃⲆᐃΔ, .6, .6, ⵠΔⵠᐃ, ⵠⲆⲆⲆ, 3);
				break;
			case ᐃᐃᐃ.ΔΔⵠΔΔ:
				this.ᐃⵠΔᐃ = ⲆⲆΔⵠΔⲆⲆⲆⲆ;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(Ⲇⵠⵠⵠᐃ, ⲆⲆⲆᐃ, 1, Ⲇⵠᐃ, 10, ⵠΔΔᐃᐃ),
					"ΔⵠΔ": ᐃΔⵠΔᐃ,
					angle: 0
				};
				break;
			case ᐃᐃᐃ.ᐃⵠⲆⲆⵠ:
				this.ΔΔⵠⵠᐃ = ΔⵠᐃⵠᐃⲆⲆΔΔ;
				this.ᐃⵠΔᐃ = ᐃΔⵠⲆΔⲆⲆⵠΔ;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, ⲆⲆᐃᐃⵠ, 10),
					"ΔⵠΔ": ⵠᐃΔΔᐃ,
					angle: 0
				};
				this.up = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃⲆⵠᐃⵠ, 1, 1.03, .98, .1, .1);
				this.ⵠⲆΔⵠⵠ = [];
				break;
			case ᐃᐃᐃ.ΔΔⵠⵠΔ:
				this.angle = Math.PI * Math.random() / 2;
				this.ᐃⵠΔᐃ = ⲆⲆΔⵠⲆⲆⲆⲆᐃ;
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆⲆΔΔᐃ, .6, .6, ⲆⲆᐃⲆ, 5, ⵠᐃⵠΔ);
				this.boxType = "Gift";
				this.hits = 0;
				break;
			case ᐃᐃᐃ.ΔⵠΔⵠⵠ:
				this.ᐃⵠΔᐃ = ⲆⲆΔⵠⲆⲆⲆⲆᐃ;
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆⲆΔΔᐃ, .6, .6, ⲆⲆᐃⲆ, 5, ⵠᐃⵠΔ);
				this.boxType = "Drop";
				this.disappearTime = +new Date + 17e3;
				this.hits = 0;
				break;
			case ᐃᐃᐃ.ⲆᐃᐃⲆΔ:
				this.ᐃⵠΔᐃ = ⲆⲆΔⵠⲆⲆⲆⲆᐃ;
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆⲆΔΔᐃ, .6, .6, ⲆⲆᐃⲆ, 5, ⵠᐃⵠΔ);
				this.boxType = "Dead";
				this.disappearTime = +new Date + 241e3;
				this.hits = 0;
				break;
			case ᐃᐃᐃ.ⲆᐃⵠⵠⲆ:
				this.ᐃⵠΔᐃ = ᐃⲆᐃᐃⵠⲆΔⵠⲆ;
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃⲆⵠᐃⵠ, .6, .6, 0, 5, ⵠᐃⵠⲆ);
				break;
			case ᐃᐃᐃ.ΔᐃᐃᐃΔ:
				this.scale = ᐃΔⲆΔ;
				this.ᐃⵠΔᐃ = ΔᐃⲆⲆΔᐃⵠᐃᐃ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃΔᐃⲆΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ⵠⵠⵠ, 0, -Math.PI / ⲆⲆᐃⵠⵠ, .5, ⲆⲆᐃⵠ);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, Ⲇⵠᐃ, 5, 3);
				break;
			case ᐃᐃᐃ.ᐃᐃΔᐃᐃⵠΔ:
				this.ΔΔⲆΔⵠ = ⵠⵠⲆΔ;
				this.ᐃΔⵠⲆ = [];
				this.ⵠⲆⲆⲆᐃⵠΔ = 0;
				this.ᐃᐃⲆⲆΔⵠᐃ = ⵠΔⵠⲆⲆⵠⵠⲆⵠ;
				this.ᐃⵠΔᐃ = ⲆΔⲆⲆᐃⵠⵠⲆΔ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠᐃΔΔᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃⵠᐃΔⵠ, 0, 0, -Math.PI / ⵠΔᐃᐃ, .5, 1);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆⵠΔΔⵠ, .6, .6, ⵠΔⵠᐃ, 5, ᐃΔᐃⲆ);
				break;
			case ᐃᐃᐃ.ⲆᐃⲆΔⲆ:
				this.x = this.info;
				this.y = this.ⲆᐃΔⵠᐃ;
				this.scale = ᐃΔⲆΔ;
				this.ΔᐃⵠΔ = ⵠⵠΔΔ;
				this.ᐃⵠΔᐃ = ᐃΔᐃⵠⲆⵠᐃΔᐃ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆⵠΔΔⵠ, 0, 0, -Math.PI / 6, .5, ⲆⵠⲆ);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, 0, 5, 3);
				break;
			case ᐃᐃᐃ.ΔᐃⲆΔᐃ:
				this.x = this.info;
				this.y = this.ⲆᐃΔⵠᐃ;
				this.scale = 1;
				this.ΔᐃⵠΔ = ⵠΔⵠᐃ;
				this.ᐃⵠΔᐃ = ⲆᐃΔΔᐃᐃᐃⲆΔ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 0, Ⲇⵠⵠᐃ, -Math.PI / ⲆⲆᐃⵠⵠ, .5, ΔΔΔᐃ);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, 0, 5, ⲆⲆΔΔ);
				break;
			case ᐃᐃᐃ.ⵠⵠⲆΔΔ:
				this.scale = 1;
				this.ᐃⵠΔᐃ = ⲆⵠᐃΔᐃⲆᐃΔⲆ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃᐃⲆᐃΔ, ⵠΔⵠᐃ, ⵠᐃⵠ, -Math.PI / 6, .5, ᐃΔⵠΔ);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, 0, ᐃᐃⲆⵠᐃ, 3);
				break;
			case ᐃᐃᐃ.ΔⲆᐃᐃⵠ:
				this.scale = ⲆⲆⵠ;
				this.ᐃⵠΔᐃ = ᐃΔⲆᐃⲆΔΔⲆᐃ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠⲆᐃⵠⵠ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ⵠᐃΔ, 0, -Math.PI / ⵠⲆⵠⲆⵠ, .5, ᐃΔΔⲆ);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, 0, ⵠΔⲆᐃ, ⵠᐃᐃⵠ);
				break;
			case ᐃᐃᐃ.ΔⵠΔᐃⲆ:
				this.scale = 1;
				this.ᐃⵠΔᐃ = ⵠⵠⵠᐃΔΔΔⵠΔ;
				this.ⵠᐃⵠᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ⵠΔΔⲆ, ⵠⵠⲆΔ, -Math.PI / ⵠΔᐃᐃΔ, .5, 1);
				this.ΔΔᐃ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .6, .6, 0, 5, 3);
				break;
			case ᐃᐃᐃ.ⵠⲆⲆᐃⲆ:
				this.ΔΔⵠΔ = [];
				for (var ᐃⲆ = ΔᐃⲆⲆ; ᐃⲆ < 5; ᐃⲆ++) this.ΔΔⵠΔ.push({
					"ᐃⵠΔᐃ": ΔᐃΔΔⲆⵠⲆ,
					"ⵠᐃⵠᐃ": new ΔⲆᐃ.ᐃⵠⲆⲆ(Ⲇⵠⵠⵠᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2)
				});
				switch (this.id % 3) {
					case ⵠᐃⲆⵠ:
						this.ΔΔⵠΔ[Ⲇⵠⵠᐃ].x = this.x - 20.5;
						this.ΔΔⵠΔ[0].y = this.y - 22.5;
						this.ΔΔⵠΔ[ᐃΔⵠΔ].x = this.x - 35.5;
						this.ΔΔⵠΔ[1].y = this.y + 7.5;
						this.ΔΔⵠΔ[ⵠⵠΔⵠ].x = this.x + 7.5;
						this.ΔΔⵠΔ[ⵠⵠΔⵠ].y = this.y - 30;
						this.ΔΔⵠΔ[ⵠᐃⵠⵠ].x = this.x + 22.5;
						this.ΔΔⵠΔ[ⵠⵠⲆᐃ].y = this.y;
						this.ΔΔⵠΔ[ⵠΔⲆᐃⲆ].x = this.x - 7.5;
						this.ΔΔⵠΔ[4].y = this.y + 14.5;
						break;
					case ⲆⵠⲆ:
						this.ΔΔⵠΔ[ΔᐃⲆⲆ].x = this.x - 30.5;
						this.ΔΔⵠΔ[ⲆᐃΔⵠ].y = this.y - 22.5;
						this.ΔΔⵠΔ[1].x = this.x - 15.5;
						this.ΔΔⵠΔ[1].y = this.y + 7.5;
						this.ΔΔⵠΔ[ⲆΔⲆΔ].x = this.x + 15.5;
						this.ΔΔⵠΔ[ᐃᐃΔⵠ].y = this.y - 30;
						this.ΔΔⵠΔ[ⵠᐃᐃΔ].x = this.x + 12.5;
						this.ΔΔⵠΔ[3].y = this.y + 5;
						this.ΔΔⵠΔ[4].x = this.x - 40.5;
						this.ΔΔⵠΔ[4].y = this.y + 14.5;
						break;
					case ⵠΔΔΔ:
						this.ΔΔⵠΔ[0].x = this.x - 20.5;
						this.ΔΔⵠΔ[ⲆⲆᐃ].y = this.y - 20.5;
						this.ΔΔⵠΔ[ΔΔⵠ].x = this.x - 35.5;
						this.ΔΔⵠΔ[1].y = this.y + 15.5;
						this.ΔΔⵠΔ[ⲆΔΔⲆ].x = this.x + 7.5;
						this.ΔΔⵠΔ[2].y = this.y - ᐃⲆᐃⵠⲆΔΔ;
						this.ΔΔⵠΔ[ⵠᐃⵠΔ].x = this.x + 22.5;
						this.ΔΔⵠΔ[ᐃᐃΔΔ].y = this.y + 5;
						this.ΔΔⵠΔ[ⵠⲆᐃⲆ].x = this.x - 7.5;
						this.ΔΔⵠΔ[ⵠⵠⵠᐃⲆ].y = this.y + 1.5;
						break
				}
				break;
			case ᐃᐃᐃ.ⲆΔⵠⲆⵠ:
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃⵠᐃΔⵠ, 1, 1, ⵠᐃⲆⵠ, 10, 10),
					"ΔⵠΔ": false,
					angle: 0
				};
				this.ᐃⵠΔᐃ = ⵠᐃᐃΔⵠΔᐃⲆⲆ;
				this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9, 1.05, .9, .2, .2);
				this.ⲆᐃⵠᐃⵠⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ⵠΔΔⲆ, Math.PI / 30, -Math.PI / 30, .06, .06);
				break;
			case ᐃᐃᐃ.ⲆᐃⲆⵠΔ:
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔΔᐃΔⵠ, 1, ⲆⲆⲆᐃ, 0, 10, ⲆΔᐃⵠΔ),
					"ΔⵠΔ": false,
					angle: 0
				};
				this.ᐃⵠΔᐃ = ΔᐃⵠⵠᐃⲆᐃΔⵠ;
				this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃⲆⵠᐃⵠ, .9, 1.05, .9, .2, .2);
				break;
			case ᐃᐃᐃ.ΔⵠᐃᐃⲆ:
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆⲆΔΔᐃ, 1, ⲆⲆΔⵠ, ⲆⲆΔ, 10, 10),
					"ΔⵠΔ": ⲆᐃΔᐃⵠ,
					angle: ⲆⲆᐃⲆ
				};
				this.ᐃⵠΔᐃ = ⲆᐃⲆⵠⵠⵠⵠⵠᐃ;
				this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9, 1.05, .9, .2, .2);
				break;
			case ᐃᐃᐃ.ⲆΔⵠⲆᐃ:
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ⲆⲆᐃⵠ, 1, 0, 10, 10),
					"ΔⵠΔ": false,
					angle: 0
				};
				this.ᐃⵠΔᐃ = ᐃᐃⵠⵠΔᐃⲆᐃᐃ;
				this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9, 1.05, .9, .2, .2);
				break;
			case ᐃᐃᐃ.ΔᐃᐃΔⲆ:
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃΔⲆΔᐃ, 1, 1, ᐃⲆΔᐃ, ⲆΔⲆᐃⵠ, ⵠⵠⵠΔΔ),
					"ΔⵠΔ": ᐃΔᐃᐃΔ,
					angle: 0
				};
				this.ᐃⵠΔᐃ = ΔⵠⲆⵠⲆⵠᐃⲆᐃ;
				this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, .9, 1.05, .9, .2, .2);
				break;
			case ᐃᐃᐃ.ΔⵠⲆⲆⲆ:
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, ⵠΔΔⲆ, ⵠΔⵠᐃⵠ, 10),
					"ΔⵠΔ": false,
					angle: 0
				};
				this.ᐃⵠΔᐃ = ⵠⲆΔⵠΔⵠⵠΔⲆ;
				this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆᐃΔᐃⵠ, .9, 1.05, .9, .2, .2);
				break;
			case ᐃᐃᐃ.ᐃᐃⲆΔᐃ:
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ⵠⲆⵠⲆ, 1, Ⲇⵠⵠᐃ, 10, 10),
					"ΔⵠΔ": ᐃⲆⵠᐃⵠ,
					angle: 0
				};
				this.ᐃⵠΔᐃ = ⲆⵠⵠΔⲆⲆᐃΔΔ;
				this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆⵠΔΔⵠ, .9, 1.05, .9, .2, .2);
				break;
			case ᐃᐃᐃ.Ⲇᐃⵠⵠᐃ:
				this.ᐃⵠΔᐃ = ᐃᐃᐃⵠⵠⵠᐃᐃⵠ;
				this.rotate = 0;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃΔⵠΔᐃ, 1, 1, Ⲇⵠᐃ, ΔⲆΔΔᐃ, 10),
					"ΔⵠΔ": ᐃᐃⲆᐃΔ,
					angle: ⲆⲆᐃ
				};
				break;
			case ᐃᐃᐃ.ᐃΔᐃⵠᐃ:
				this.ᐃⵠΔᐃ = ⲆⵠΔΔⵠⲆⲆⲆⵠ;
				this.rotate = 0;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ᐃᐃⲆᐃΔ, ⲆⲆΔⵠ, Δⵠᐃ, ⵠⵠⵠ, ΔⲆΔΔᐃ, ᐃᐃᐃⲆⵠ),
					"ΔⵠΔ": ⲆⲆΔΔᐃ,
					angle: ⵠⵠΔΔ
				};
				break;
			case ᐃᐃᐃ.Δⵠⵠⵠᐃ:
				this.ᐃⵠΔᐃ = ᐃⲆⵠⵠᐃⲆᐃⲆⵠ;
				this.rotate = 0;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆᐃΔᐃⵠ, 1, 1, Ⲇⵠᐃ, ΔΔⲆΔΔ, 10),
					"ΔⵠΔ": ᐃΔᐃᐃΔ,
					angle: ⵠⵠⵠ
				};
				break;
			case ᐃᐃᐃ.ⲆᐃᐃΔⵠ:
				this.ᐃⵠΔᐃ = ⵠⲆΔΔⲆΔᐃΔⲆ;
				this.rotate = 0;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ⲆⲆΔⵠ, ᐃⲆⲆ, 0, ⵠΔⵠᐃⵠ, 10),
					"ΔⵠΔ": ⵠⲆⵠⵠΔ,
					angle: ΔᐃⲆⲆ
				};
				break;
			case ᐃᐃᐃ.ᐃⲆᐃΔⵠ:
				this.ᐃⵠΔᐃ = ⵠΔⲆⵠΔᐃⵠⲆⵠ;
				this.rotate = Ⲇⵠⵠᐃ;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔⲆⲆΔⵠ, 1, ⲆⵠⲆ, 0, ΔⵠᐃⲆΔ, 10),
					"ΔⵠΔ": false,
					angle: 0
				};
				break;
			case ᐃᐃᐃ.ⲆⲆΔⵠᐃ:
				this.ⲆΔΔΔⵠ = ⲆΔⵠⵠΔᐃᐃΔΔ;
				this.ΔΔⵠⵠᐃ = ᐃⵠⲆⲆⵠⵠⵠⵠΔ;
				this.rotate = ⵠᐃⵠ;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1, 0, ΔΔᐃⵠⲆ, ᐃⲆᐃⲆⲆ),
					"ΔⵠΔ": ⲆⲆΔΔᐃ,
					angle: 0
				};
				break;
			case ᐃᐃᐃ.ΔⲆΔⲆⵠ:
				this.ᐃⵠΔᐃ = ⵠᐃᐃΔᐃΔⵠᐃΔ;
				this.ⲆⲆⲆⵠ = Math.floor(this.x / 100);
				this.ᐃⲆ = Math.floor(this.y / ⵠΔᐃᐃⲆ);
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆⲆΔΔᐃ, ⲆⲆᐃⵠ, ΔΔΔᐃ, 0, 10, 10),
					"ΔⵠΔ": ΔⲆⲆᐃΔ,
					angle: 0
				};
				this.opacity = 1;
				this.ᐃᐃⵠⵠᐃ = ⲆΔΔⲆⵠⵠΔ;
				break;
			case ᐃᐃᐃ.ⲆⲆᐃⲆΔ:
				this.ᐃⵠΔᐃ = ⲆᐃⲆᐃⵠᐃΔΔΔ;
				this.ⵠᐃⵠⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, 1.15, 1, .3, .3);
				this.color = 0;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, ⲆⲆᐃⵠ, ⲆⲆᐃ, 10, ⵠΔⵠᐃⵠ),
					"ΔⵠΔ": ⲆⲆΔΔᐃ,
					angle: ⵠᐃΔ
				};
				break;
			case ᐃᐃᐃ.ΔΔΔⵠᐃ:
			case ᐃᐃᐃ.ΔⵠΔⲆⵠ:
			case ᐃᐃᐃ.ᐃⲆΔⵠⲆ:
			case ᐃᐃᐃ.ⵠᐃᐃᐃΔ:
			case ᐃᐃᐃ.ᐃᐃⲆⲆΔ:
				this.ᐃⵠΔᐃ = ⲆᐃⲆᐃⵠⲆᐃ;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ᐃΔⵠΔ, ΔᐃⵠⲆ, 0, 10, ΔΔᐃⵠⲆ),
					"ΔⵠΔ": ᐃⵠᐃΔⵠ,
					angle: 0
				};
				break;
			case ᐃᐃᐃ.ΔⲆᐃⲆᐃ:
				this.ᐃⵠΔᐃ = ⲆᐃⲆᐃⵠⲆᐃ;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ΔᐃⵠⲆ, ᐃΔⲆΔ, Ⲇⵠᐃ, ΔⵠᐃⲆΔ, ⵠΔⲆⲆΔ),
					"ΔⵠΔ": ᐃΔⲆΔᐃ,
					angle: 0
				};
				this.ᐃᐃⵠⵠᐃ = ⲆΔΔⲆⵠⵠΔ;
				break;
			case ᐃᐃᐃ.ⵠⵠΔⲆΔ:
			case ᐃᐃᐃ.ᐃⵠⵠᐃΔ:
			case ᐃᐃᐃ.ⵠⲆⵠᐃΔ:
			case ᐃᐃᐃ.ΔΔⵠΔᐃ:
			case ᐃᐃᐃ.ᐃᐃⵠᐃᐃ:
			case ᐃᐃᐃ.ΔΔⵠᐃΔ:
			case ᐃᐃᐃ.ᐃⵠΔⵠΔ:
			case ᐃᐃᐃ.ΔᐃⵠΔᐃ:
			case ᐃᐃᐃ.ΔⲆⲆᐃⲆ:
			case ᐃᐃᐃ.ᐃⲆΔΔᐃ:
			case ᐃᐃᐃ.ΔⲆⲆⲆΔ:
			case ᐃᐃᐃ.ⲆⲆΔᐃΔ:
				this.ᐃⵠΔᐃ = ⲆᐃⲆᐃⵠⲆᐃ;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ᐃΔΔⲆ, ΔΔⵠ, 0, 10, ⲆΔᐃⵠΔ),
					"ΔⵠΔ": false,
					angle: ⲆⲆᐃⲆ
				};
				this.ᐃᐃⵠⵠᐃ = ᐃᐃⵠⵠᐃ;
				break;
			case ᐃᐃᐃ.ΔΔΔΔⲆ:
				this.ᐃⵠΔᐃ = ᐃΔⵠΔⲆⵠⵠᐃⵠ;
				this.opacity = ⲆⲆᐃⵠ;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, 1, ᐃⵠᐃᐃ, 0, 10, 10),
					"ΔⵠΔ": ⲆⲆΔΔᐃ,
					angle: 0
				};
				var ⵠᐃΔⲆΔΔⵠ = this.angle % (Math.PI / ⵠⵠΔⵠ);
				Math.PI / 4 > ⵠᐃΔⲆΔΔⵠ ? this.angle -= ⵠᐃΔⲆΔΔⵠ : this.angle += Math.PI / ⲆΔⲆΔ - ⵠᐃΔⲆΔΔⵠ;
				break;
			case ᐃᐃᐃ.ⵠᐃⵠᐃᐃ:
				this.ᐃⵠΔᐃ = ⵠᐃᐃᐃᐃΔᐃⵠᐃ;
				this.angle = ᐃᐃⲆⵠ * (Math.random() * Math.PI);
				break;
			case ᐃᐃᐃ.ⲆᐃⲆⵠⵠᐃΔ:
				this.ᐃⵠΔᐃ = ΔᐃⵠΔⵠΔΔΔⵠ;
				this.angle = Math.PI * Math.random() * 2;
				break;
			case ᐃᐃᐃ.ΔᐃⲆⲆᐃⵠΔ:
				this.ᐃⵠΔᐃ = ΔⵠΔΔᐃⵠⵠⲆᐃ;
				this.angle = ΔΔᐃⲆⵠ * (Math.PI * Math.random());
				break;
			case ᐃᐃᐃ.ⲆⵠⵠᐃⵠΔⵠ:
				this.ᐃⵠΔᐃ = ᐃⲆΔᐃⵠⲆΔⲆⵠ;
				this.angle = Math.PI * Math.random() * 2;
				break;
			case ᐃᐃᐃ.ⲆⲆⲆΔⲆΔᐃ:
				this.ᐃⵠΔᐃ = ⲆᐃⵠᐃᐃⵠΔΔⵠ;
				this.angle = ⵠΔⵠⲆ * (Math.PI * Math.random());
				break;
			case ᐃᐃᐃ.ᐃⵠⵠΔⵠ:
				this.ΔⵠΔ = function(ΔⲆΔᐃ) {
					this.lock = this.info & 8192 ? ᐃΔΔⲆ : ⲆᐃΔⵠ;
					this.info = this.info & 8191;
					this.action = ΔⲆΔᐃ
				};
				this.ᐃⵠΔᐃ = ⲆⵠᐃᐃⲆⲆⲆᐃᐃ;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠᐃΔΔᐃ, ΔⲆⵠⲆ, 1, 0, 10, 10),
					"ΔⵠΔ": Ⲇⵠⵠⵠᐃ,
					angle: 0
				};
				this.lock = 0;
				this.ΔⵠΔ(this.action);
				break;
			case ᐃᐃᐃ.ⵠΔΔᐃⵠ:
			case ᐃᐃᐃ.ᐃⵠⲆⵠⵠ:
			case ᐃᐃᐃ.ⲆΔⵠΔⲆ:
			case ᐃᐃᐃ.ⵠᐃⵠⵠᐃ:
			case ᐃᐃᐃ.Ⲇᐃⵠᐃᐃ:
			case ᐃᐃᐃ.ΔⲆᐃⲆΔ:
			case ᐃᐃᐃ.ⵠⲆΔⲆΔ:
			case ᐃᐃᐃ.ⲆᐃⵠΔⲆ:
			case ᐃᐃᐃ.ⲆᐃΔⲆⲆ:
			case ᐃᐃᐃ.ΔᐃᐃⲆⲆ:
			case ᐃᐃᐃ.ⲆΔΔᐃᐃ:
			case ᐃᐃᐃ.ᐃᐃΔΔⲆ:
				this.ᐃⵠΔᐃ = ⵠᐃᐃⲆΔᐃΔΔᐃ;
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔⲆⲆΔⵠ, 1, ΔΔΔᐃ, 0, 10, ⵠΔΔᐃᐃ),
					"ΔⵠΔ": false,
					angle: 0
				};
				this.ᐃᐃⵠⵠᐃ = ᐃᐃⵠⵠᐃ;
				break;
			case ᐃᐃᐃ.ΔⵠⲆⲆⵠ:
				this.ⲆΔΔΔⵠ = ⵠⵠΔᐃᐃᐃΔΔΔ;
				this.ᐃⵠΔᐃ = ⵠᐃⵠⲆᐃⵠᐃⵠΔ;
				this.ΔΔⵠⵠᐃ = ⲆⵠΔⵠⵠᐃⲆⲆΔ;
				this.ᐃΔⵠⲆ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔΔᐃΔⵠ, 1, 1.23, 1.18, .02, .02);
				this.ⵠᐃⵠⵠⵠ = new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆᐃΔᐃⵠ, ᐃΔⵠΔ, 1.23, 1.18, .04, .04);
				this.ΔΔᐃ = {
					"ⲆΔᐃΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ᐃΔΔⲆ, 1, 0, 10, ⵠᐃⲆⵠᐃ),
					"ΔⵠΔ": ᐃΔⵠΔᐃ,
					angle: ᐃⲆᐃ
				};
				this.ΔⵠΔ = function(ΔⲆΔᐃ) {
					this.action = ΔⲆΔᐃ
				};
				break
		}
	}
	ⵠΔⲆⵠΔᐃⵠⲆᐃ = ⵠⲆⵠⲆ;

	function ΔⲆⵠᐃᐃⲆⵠᐃΔ() {
		var ⲆⲆᐃΔ = Math.random();
		return "v"
	}

	function ⵠⵠⵠΔΔΔᐃ() {
		var ⲆⲆᐃΔ = Math.random();
		return "d"
	}

	function ΔⲆᐃᐃⵠᐃΔ() {
		var ⲆⲆᐃΔ = Math.random();
		return "e"
	}

	function ⵠⲆⵠⲆᐃΔΔ() {
		var ⲆⲆᐃΔ = Math.random();
		return "r"
	}

	function ⵠΔΔⲆⵠⵠΔ() {
		var ⲆⲆᐃΔ = Math.random();
		return "p"
	}

	function ᐃⵠⲆⵠᐃΔⲆⵠⵠ() {
		var ⲆⲆᐃΔ = Math.random();
		return "D"
	}

	function ⲆΔΔΔⵠⲆⵠΔⲆ() {
		var ⲆⲆᐃΔ = Math.random();
		return "R"
	}

	function ΔΔᐃΔⲆⲆᐃΔⲆ() {
		var ⲆⲆᐃΔ = Math.random();
		return "c"
	}

	function ᐃΔⵠΔᐃⲆⲆⵠΔ() {
		var ⲆⲆᐃΔ = Math.random();
		return "W"
	}

	function ⲆⲆΔⵠⵠΔΔᐃΔ() {
		this.ᐃⵠΔᐃᐃ = function() {};
		this.ⵠᐃΔⵠⵠ = {
			"ⲆⲆΔᐃ": ⵠⲆⵠⲆ,
			open: ⵠᐃΔΔᐃ,
			"ΔⲆⵠⲆⲆ": ΔΔⵠ
		};
		this.ⵠⲆⵠᐃᐃ = {
			"ⲆⲆΔᐃ": ⵠᐃᐃ,
			"ΔⲆⵠⲆⲆ": -ⲆⲆΔⵠ,
			open: ⲆⲆΔΔᐃ
		};
		this.ΔΔⲆᐃ = {
			"ΔᐃᐃⵠⵠΔⲆ": ⵠᐃⲆⵠ,
			"ⲆⲆΔᐃ": 1,
			"ΔⲆⵠΔΔ": 0,
			"ΔⲆⵠⲆⲆ": -1,
			open: false
		};
		this.ᐃⵠΔΔ = {
			"ΔⲆΔᐃᐃⵠⵠ": 0,
			"ΔᐃⲆΔΔᐃⵠ": 0,
			"ⵠⵠⲆⲆⵠⲆΔ": 0,
			open: false,
			"ΔⲆⵠⲆⲆ": -1,
			type: 0,
			"ⲆⲆΔᐃ": ᐃΔⲆΔ
		};
		this.ⲆΔᐃⲆ = {
			"ΔⲆΔᐃᐃⵠⵠ": ⵠⵠⵠ,
			"ⲆᐃⵠΔⵠΔⲆ": 0,
			"ΔⲆⵠΔΔ": 0,
			"ⲆⲆΔᐃ": 1,
			"ΔⲆⵠⲆⲆ": -ⲆⵠⲆ,
			open: ΔⲆⲆᐃΔ
		};
		this.sign = {
			"ΔⲆⵠⲆⲆ": -1,
			open: ⵠⲆⵠⵠΔ
		};
		this.ΔⲆΔⲆᐃ = {
			"ⲆⲆΔᐃ": 1,
			"ΔⲆⵠⲆⲆ": -1,
			"ᐃⲆᐃⵠ": 0,
			open: false
		};
		this.ⲆⲆⵠⲆⲆ = {
			enabled: false,
			"ⲆⲆΔⵠⵠ": -1,
			label: ᐃΔᐃᐃΔ,
			now: -ᐃΔΔⲆ,
			"ᐃⵠΔᐃ": ΔΔΔⲆᐃᐃᐃΔⵠ
		};
		this.ⲆᐃⲆΔ = {
			open: ΔⲆⲆΔⵠ,
			"ᐃΔΔⵠⲆᐃᐃ": ᐃΔᐃᐃΔ,
			"ᐃⲆᐃⵠ": ᐃⲆᐃ,
			"ⲆⵠⲆⲆⵠΔᐃ": ᐃΔᐃᐃΔ,
			id: -1,
			"ΔⲆⵠⲆⲆ": -1,
			"ⲆⲆΔᐃ": ⵠᐃᐃ,
			locked: false,
			lock: false
		};
		this.ᐃΔⵠⵠᐃ = true;
		this.reconnect = {
			rotate: ⵠΔⵠᐃ,
			enabled: ᐃΔᐃⲆΔ
		};
		this.key = ΔⲆᐃ.ⲆⵠΔΔⲆΔΔ("key", ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[298]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[299]]);
		var ᐃᐃᐃᐃΔⲆⵠ = ΔⲆᐃ.ⲆⵠΔΔⲆΔΔ("egg", ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[298]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[299]]);
		if (ᐃᐃᐃᐃΔⲆⵠ) ⲆΔⲆⵠ.ⵠⲆᐃᐃ = parseInt(ᐃᐃᐃᐃΔⲆⵠ);
		this.beta = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[298]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[299]].indexOf("http://starve.io/beta") === 0 ? 1 : 0;
		if (this.key && this.beta) {
			ᐃΔⲆⲆ.set("starve_beta", this.key)
		} else if (this.beta) this.key = ᐃΔⲆⲆ.get("starve_beta");
		this.ΔᐃⲆΔΔ = ᐃΔⲆⲆ.get("starve_token") ? ᐃΔⲆⲆ.get("starve_token") : ΔⲆᐃ.ⵠⵠⵠᐃΔᐃⵠ(ᐃᐃᐃᐃⵠ.ⲆⵠⵠΔΔΔᐃᐃⲆ);
		ⲆⵠᐃΔᐃⵠⲆ["baguette"]();
		var ᐃᐃᐃⲆⵠᐃⲆⲆⲆ = ⲆⵠᐃΔᐃⵠⲆ["kot2"];
		this.ΔᐃⲆΔΔ = ᐃᐃᐃⲆⵠᐃⲆⲆⲆ.substring(ΔᐃⲆⲆ, 6) + this.ΔᐃⲆΔΔ.substring(6);
		this.ⵠᐃⲆᐃⲆᐃΔ = ᐃΔⲆⲆ.get("starve_token_id") ? ᐃΔⲆⲆ.get("starve_token_id") : "";
		this.id = ⵠⵠⲆΔ;
		this.ᐃⲆᐃⲆ = 0;
		this.ⵠΔⵠ = 0;
		this.ᐃΔⲆΔⲆΔᐃ = {
			"ⵠᐃᐃΔᐃΔᐃ": ᐃⲆΔ,
			"ΔⲆⵠΔⲆᐃΔ": "",
			"ᐃᐃᐃΔᐃ": 0,
			"ΔᐃΔⵠⵠ": ⲆᐃΔⵠ
		};
		this.ⲆⵠΔΔΔⲆΔⵠᐃ = {
			connected: ᐃⲆΔ,
			"ⵠⵠᐃⲆΔ": (new Date).getTime()
		};
		this.ΔⲆᐃⲆⲆ = [];
		this.ΔⲆᐃⵠᐃⵠⵠ = function(ΔΔ) {
			for (var ᐃⲆ = 0; ᐃⲆ < this.ΔⲆᐃⲆⲆ.length; ᐃⲆ++) {
				if (ΔΔ == this.ΔⲆᐃⲆⲆ[ᐃⲆ]) return ᐃΔΔΔΔ
			}
			return false
		};
		this.ⲆⵠΔⲆΔ = {
			"ⲆⲆΔⵠⵠ": 0,
			time: 0,
			value: 0,
			open: ᐃᐃⲆᐃΔ,
			"ᐃⵠΔᐃ": function() {
				if (this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
					var ⲆᐃⲆΔᐃ = (new Date).getTime();
					this.time = Math.floor((ⲆᐃⲆΔᐃ - this.ⲆⲆΔⵠⵠ) / 1e3);
					if (this.time < 60) {
						ᐃⲆΔⵠ.ⲆⵠΔⲆΔ.button.ᐃⵠΔᐃ(Δ)
					} else {
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[211]).style.display = ᐃ[371];
						this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃΔᐃⲆΔ
					}
				}
			}
		};
		this.ⲆⲆᐃⵠΔ = {
			id: -ⲆⲆⲆᐃ,
			"ⲆⲆΔᐃ": -ᐃΔⵠΔ,
			lock: ⵠⵠⲆΔ,
			timeout: new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔᐃΔΔᐃ, 0, ⵠⲆⵠⲆ, 0, 1 / 30, ᐃⲆⲆ),
			wait: ΔⲆⲆᐃΔ
		};
		this.ⵠᐃΔⵠⲆ = {
			timeout: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ⵠⵠᐃ, 1, 0, ⵠⵠⵠⲆ / 5, ΔⲆⵠⲆ),
			wait: false
		};
		this.Ⲇⵠⵠⵠⵠ = {
			timeout: new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔᐃΔΔᐃ, Ⲇⵠᐃ, 1, ⵠΔΔⲆ, 1, 1),
			wait: false
		};
		this.ᐃᐃⵠⵠΔ = {
			timeout: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, ⲆⲆᐃⲆ, 1, 0, 1 / ᐃⲆᐃⲆⲆ, ⲆⲆⲆᐃ),
			wait: false
		};
		this.ⲆⵠΔ = new ΔⲆᐃ.ⵠΔᐃΔΔΔⲆ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, .4, Ⲇⵠⵠᐃ, ⵠⵠΔΔ, ⲆⵠᐃΔ, Δⵠᐃᐃ, ⲆⵠᐃΔ, Δⵠᐃᐃ);
		this.ⲆⵠΔ.ⲆⲆΔⵠⵠ = ᐃⲆΔ;
		this.ⲆⵠΔ.ⵠⲆΔΔΔᐃᐃ = 0;
		this.ⲆⵠΔ.ΔⵠΔ = function() {
			if (this.ⵠⲆΔΔΔᐃᐃ > 0) {
				this.ⵠⲆΔΔΔᐃᐃ -= ᐃⵠᐃⵠ;
				return
			}
			var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
			if (ᐃⵠⲆ && !Settings.Spectator.enabled) {
				this.ⲆⲆΔⵠⵠ = ⵠⵠΔΔ;
				var Ⲇᐃ = Math.max(Math.min(ⲆⵠᐃΔ - ᐃⵠⲆ.x, -2), -ⵠⲆΔ.w + ⵠⲆᐃⵠ + ⲆΔⵠΔ);
				var ⲆⲆⲆ = Math.max(Math.min(Δⵠᐃᐃ - ᐃⵠⲆ.y, -2), -ⵠⲆΔ.ΔⵠⲆ + ⵠⵠΔⵠ + ΔⲆⲆΔ);
				this.ᐃΔⵠⵠΔ({
					x: Ⲇᐃ,
					y: ⲆⲆⲆ
				})
			} else {
				this.ⲆⲆΔⵠⵠ += ᐃⵠᐃⵠ;
				if (ⲆΔⲆᐃ < this.ⲆⲆΔⵠⵠ) {
					this.ⲆⲆΔⵠⵠ = 0;
					!ⲆΔⵠ.reconnect.enabled && ΔΔᐃⲆ.ⵠᐃⵠΔᐃⵠⲆᐃᐃ()
				}
			}
		};
		this.ⲆⵠΔ.w = 4000;
		this.ⲆⵠΔ.ΔⵠⲆ = 4000;
		this.ⲆⵠΔ.ⲆⲆⲆᐃⵠⵠᐃ = this.ⲆⵠΔ.w;
		this.ⲆⵠΔ.ᐃⲆᐃΔᐃᐃⵠ = this.ⲆⵠΔ.ΔⵠⲆ;
		this.ⲆⵠΔ.rx = 0;
		this.ⲆⵠΔ.ry = ⲆᐃΔⵠ;
		this.ⲆⵠΔ.ⵠΔᐃᐃΔᐃⵠΔⵠ = Ⲇⵠᐃ;
		this.ⲆⵠΔ.ᐃᐃΔⲆⵠᐃΔⵠⵠ = ⵠⵠᐃ;
		this.ⲆⵠΔ.ᐃⲆⵠΔⵠ = function(Ⲇᐃ, ⲆⲆⲆ) {
			this.x = -Math.min(Math.max(-ⵠⲆΔ.ΔᐃᐃᐃΔⲆⲆ * ⵠⵠΔⵠ, Ⲇᐃ - ⵠⲆΔ.ΔᐃᐃᐃΔⲆⲆ - this.ⲆⲆⲆᐃⵠⵠᐃ / ⵠⲆΔᐃ), ⵠⲆΔ.w - this.ⲆⲆⲆᐃⵠⵠᐃ);
			this.y = -Math.min(Math.max(-ⵠⲆΔ.ⲆⲆΔᐃᐃᐃⵠ * 2, ⲆⲆⲆ - (ⵠⲆΔ.ⲆⲆΔᐃᐃᐃⵠ + this.ᐃⲆᐃΔᐃᐃⵠ) / ⵠⵠΔⵠ), ⵠⲆΔ.ΔⵠⲆ - this.ᐃⲆᐃΔᐃᐃⵠ + ⵠⲆΔ.ⲆⲆΔᐃᐃᐃⵠ);
			this.ⲆⵠⲆⵠⵠ = this.x;
			this.ΔᐃⲆⲆⵠⵠⲆ = this.y
		};
		this.control = {
			angle: Ⲇⵠᐃ,
			timeout: 0,
			"ᐃᐃⵠⲆⵠⵠΔ": ΔᐃⲆⲆ,
			"ΔΔⵠᐃ": Ⲇⵠᐃ,
			attack: 0,
			"ΔⵠΔ": function() {
				var ᐃⵠⲆ = Settings.AimBot.enabled && Settings.AimBot.angle !== null ? Settings.AimBot.angle : Settings.AutoFarm.enabled && Settings.AutoFarm.angle !== null ? Settings.AutoFarm.angle : ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
				if (ᐃⵠⲆ) var ΔⵠΔΔ = {
					x: ⲆΔⵠ.ⲆⵠΔ.x + ᐃⵠⲆ.x,
					y: ⲆΔⵠ.ⲆⵠΔ.y + ᐃⵠⲆ.y
				};
				else var ΔⵠΔΔ = ᐃΔⵠᐃⲆΔⵠ;
				var ΔΔⲆ = ΔⲆᐃ.ᐃⵠᐃᐃᐃⲆⲆ(ΔΔⵠᐃ.ΔⵠΔΔ, ΔⵠΔΔ);
				var ΔᐃΔΔᐃⵠⵠ = ᐃᐃⲆᐃΔ;
				this.ΔΔⵠᐃ += 5 * ᐃⵠᐃⵠ;
				if (!ΔΔⵠᐃ.state) {
					if (ᐃⵠⲆ && !(ᐃⵠⲆ.action & ᐃⵠⲆⵠ.ⵠⲆⵠⲆᐃᐃΔ) && this.ΔΔⵠᐃ > ᐃᐃᐃᐃⵠ.ⵠⲆⵠⲆᐃᐃΔ) {
						this.attack = 1;
						ΔᐃΔΔᐃⵠⵠ = ᐃⵠⲆⲆᐃ;
						this.ΔΔⵠᐃ = ᐃⲆΔ;
						ΔΔᐃⲆ.ᐃⲆᐃⵠⲆⵠⲆΔⲆ(ΔΔⲆ)
					}
				}
				if (ᐃⵠⲆ) {
					ᐃⵠⲆ.angle = ΔΔⲆ;
					ᐃⵠⲆ.ΔΔΔⲆⲆⵠΔ = ΔΔⲆ
				}
				if (!ΔᐃΔΔᐃⵠⵠ) {
					this.timeout += ᐃⵠᐃⵠ;
					if (this.timeout > ᐃᐃᐃᐃⵠ.ΔⵠⵠᐃⲆΔⲆ) {
						this.timeout = Δⵠⵠ;
						if (Math.abs(this.angle - ΔΔⲆ) > .005) {
							ΔΔᐃⲆ.ⵠΔᐃⵠⲆⲆⵠᐃᐃ(ΔΔⲆ);
							this.angle = ΔΔⲆ
						}
					}
				}
				if (ⲆΔⵠ.ᐃᐃⲆΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) return;
				if (ⲆΔⵠ.ᐃⲆᐃΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) return;
				var ΔⵠΔ = false;
				var ⵠⲆΔΔⲆ = Δⵠⵠ;
				var Δᐃⵠᐃᐃ = ᐃⵠᐃⲆᐃ.ᐃⲆⲆᐃΔⲆᐃ();
				if (Δᐃⵠᐃᐃ) ⵠⲆΔΔⲆ |= ⲆⲆᐃⵠ;
				var ᐃΔᐃⵠ = ᐃⵠᐃⲆᐃ.ⵠΔⲆᐃⲆⵠΔ();
				if (ᐃΔᐃⵠ) ⵠⲆΔΔⲆ |= ⵠⲆΔᐃ;
				var ⵠΔⵠΔᐃᐃᐃⵠᐃ = ᐃⵠᐃⲆᐃ.ΔⲆᐃⵠⲆΔΔ();
				if (ⵠΔⵠΔᐃᐃᐃⵠᐃ) ⵠⲆΔΔⲆ |= ⲆⲆⲆΔ;
				var top = ᐃⵠᐃⲆᐃ.ᐃⲆΔᐃᐃΔᐃ();
				if (top) ⵠⲆΔΔⲆ |= 8;
				if (this.ᐃᐃⵠⲆⵠⵠΔ != ⵠⲆΔΔⲆ) ΔΔᐃⲆ.ⲆΔⲆΔⲆᐃⵠⵠⵠ(ⵠⲆΔΔⲆ);
				this.ᐃᐃⵠⲆⵠⵠΔ = ⵠⲆΔΔⲆ
			}
		};
		this.ⵠΔⲆΔ = {
			c: 1,
			"ᐃᐃⵠᐃ": ΔⲆⵠⲆ,
			"ΔⵠⲆ": ⵠⵠⵠⲆ,
			"ᐃᐃⲆ": 1,
			"ⵠΔⲆ": ᐃⵠᐃᐃ,
			"ⲆⵠⲆΔⲆᐃⵠ": 1,
			"ΔΔΔⲆⲆΔⵠ": new ΔⲆᐃ.ᐃⵠⲆⲆ(true, 0, ᐃΔⵠΔ, 0, ᐃᐃΔΔ, ⵠⵠⲆᐃ),
			"ⲆⵠⵠΔΔⵠΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔⲆᐃΔΔ, 0, ⲆⵠΔΔ, 0, 2, 2),
			"ᐃⲆⲆᐃⲆⲆᐃ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠᐃⵠⲆᐃ, 0, 1, 0, ⲆΔⲆⲆ, ⲆΔⲆᐃ),
			"ΔᐃᐃⲆⵠⵠΔ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ⲆⲆⲆⵠⲆ, ᐃⲆΔ, 1, ⲆⲆΔ, 3, 3),
			"ⲆⲆᐃⵠΔⲆⲆ": new ΔⲆᐃ.ᐃⵠⲆⲆ(ⵠᐃⵠⲆᐃ, ⲆⲆᐃ, 1, 0, ⵠᐃⵠⲆ, 3),
			"ⲆⵠΔⵠⲆΔⲆ": new ΔⲆᐃ.ᐃⵠⲆⲆ(true, 0, 1, ⵠⵠΔΔ, ⵠᐃⵠⵠ, ⵠⲆᐃΔ),
			"ⵠⲆⲆᐃⵠ": new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, 1, Ⲇⵠᐃ, ⵠᐃΔ, 1),
			"ⲆⲆᐃᐃΔ": new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, ⵠⵠᐃ, 1, 0, ⵠᐃⲆⵠ, 1),
			"ⲆⲆᐃⲆⵠΔⵠ": new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, 1, ⵠⵠᐃ, 0, 1),
			"ⵠⲆᐃⲆⲆⵠᐃ": new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, ⲆⲆᐃⵠ, ⵠᐃΔ, ᐃⲆᐃ, 1),
			"ⲆᐃⵠᐃⲆΔⲆ": new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, ᐃⵠⵠⵠ, ⵠᐃⲆⵠ, ⵠⵠΔΔ, 1),
			"ⵠΔΔⵠᐃ": new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⵠΔᐃⵠ, 0, 1, 0, 0, 1),
			"ΔⵠΔ": function() {
				this.ΔΔΔⲆⲆΔⵠ.ΔⵠΔ();
				this.ⲆⵠⵠΔΔⵠΔ.ΔⵠΔ();
				this.ᐃⲆⲆᐃⲆⲆᐃ.ΔⵠΔ();
				this.ΔᐃᐃⲆⵠⵠΔ.ΔⵠΔ();
				this.ⲆⲆᐃⵠΔⲆⲆ.ΔⵠΔ();
				this.ⲆⵠΔⵠⲆΔⲆ.ΔⵠΔ();
				this.ⵠⲆⲆᐃⵠ.ᐃΔⵠⵠΔ(this.c);
				this.ⲆⲆᐃᐃΔ.ᐃΔⵠⵠΔ(this.ᐃᐃⵠᐃ);
				this.ⲆⲆᐃⲆⵠΔⵠ.ᐃΔⵠⵠΔ(this.ΔⵠⲆ);
				this.ⵠⲆᐃⲆⲆⵠᐃ.ᐃΔⵠⵠΔ(this.ᐃᐃⲆ);
				this.ⲆᐃⵠᐃⲆΔⲆ.ᐃΔⵠⵠΔ(this.ⵠΔⲆ);
				this.ⵠΔΔⵠᐃ.ᐃΔⵠⵠΔ(this.ⲆⵠⲆΔⲆᐃⵠ)
			}
		};
		this.ⲆΔⵠΔⲆᐃⲆ = ᐃΔⵠΔᐃ;
		this.ΔᐃⲆΔᐃⲆᐃ = false;
		this.ΔⵠⵠⵠΔ = false;
		this.ⲆⵠΔⲆⵠΔⲆ = false;
		this.ᐃΔⲆᐃ = {
			max: ᐃΔᐃᐃ.ⵠΔⵠⵠᐃΔᐃ,
			"ⲆᐃⵠᐃᐃΔⲆ": 0,
			"ᐃΔⲆΔΔ": ⲆⲆΔ,
			"ᐃᐃⲆⲆ": [],
			"ΔⵠΔⵠⲆ": [],
			"ⲆⲆᐃⵠΔᐃⲆ": function(ⵠΔΔⵠᐃΔᐃⵠᐃ, ΔΔⵠᐃⵠᐃⲆΔᐃ) {
				if (ⵠΔΔⵠᐃΔᐃⵠᐃ === 1) this.ᐃΔⲆΔΔ = ᐃΔᐃᐃ.ΔⲆⵠΔᐃⵠΔΔⲆ;
				this.ⲆᐃⵠᐃᐃΔⲆ += ΔΔⵠᐃⵠᐃⲆΔᐃ;
				this.max = ᐃΔᐃᐃ.ⵠΔⵠⵠᐃΔᐃ + this.ⲆᐃⵠᐃᐃΔⲆ + this.ᐃΔⲆΔΔ
			},
			"ΔᐃΔᐃⲆⵠᐃ": {
				item: -ⵠᐃᐃ,
				"ⵠⵠ": null,
				"ⲆⵠᐃᐃΔΔᐃ": 0,
				"ⲆⲆⵠᐃⵠᐃⲆ": Δⵠⵠ,
				"ᐃⵠΔⲆⵠ": -1,
				"ᐃᐃΔΔᐃ": -1,
				"ⵠⲆΔΔⲆ": function(ΔΔⵠᐃ) {
					if (this.ⲆⵠᐃᐃΔΔᐃ && (ΔΔⵠᐃ.x !== this.ᐃⵠΔⲆⵠ || ΔΔⵠᐃ.y !== this.ᐃᐃΔΔᐃ)) this.ⲆⲆⵠᐃⵠᐃⲆ = 1
				},
				start: function(ΔΔⲆⲆᐃ, ΔΔⵠᐃ) {
					this.ᐃⵠΔⲆⵠ = ΔΔⵠᐃ.x;
					this.ᐃᐃΔΔᐃ = ΔΔⵠᐃ.y;
					this.item = ΔΔⲆⲆᐃ;
					this.ⵠⵠ = ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ[ΔΔⲆⲆᐃ].info.ⵠⵠ[2];
					this.ⲆⵠᐃᐃΔΔᐃ = 1
				},
				stop: function() {
					this.ⲆⵠᐃᐃΔΔᐃ = 0;
					this.ⲆⲆⵠᐃⵠᐃⲆ = ⵠΔΔⲆ;
					this.ᐃⵠΔⲆⵠ = -1;
					this.ᐃᐃΔΔᐃ = -1
				},
				release: function() {
					var ΔΔⲆⲆᐃ = -1;
					var ᐃⲆⵠ = ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ;
					var ᐃᐃⵠⲆᐃ = 0;
					if (this.ⲆⵠᐃᐃΔΔᐃ && this.ⲆⲆⵠᐃⵠᐃⲆ) {
						for (var ᐃⲆ = 0; ᐃⲆ < ᐃⲆⵠ.length; ᐃⲆ++) {
							if (ᐃⲆⵠ[ᐃⲆ].info.state === ᐃΔΔΔⲆᐃⲆ) {
								ΔΔⲆⲆᐃ = ᐃⲆ;
								break
							}
						}
						if (ΔΔⲆⲆᐃ !== -ΔᐃⵠⲆ && ΔΔⲆⲆᐃ !== this.item && ᐃⲆⵠ[this.item]) {
							ᐃᐃⵠⲆᐃ = ΔᐃⵠⲆ;
							var ΔⵠⲆᐃΔΔᐃᐃⵠ = ᐃⲆⵠ[ΔΔⲆⲆᐃ];
							ᐃⲆⵠ[ΔΔⲆⲆᐃ] = ᐃⲆⵠ[this.item];
							ᐃⲆⵠ[this.item] = ΔⵠⲆᐃΔΔᐃᐃⵠ;
							ᐃⲆΔⵠ.ⵠⵠΔΔⲆΔⵠ()
						}
					}
					this.stop();
					return ᐃᐃⵠⲆᐃ
				},
				"ᐃⵠΔᐃ": function(Ⲇᐃ, ⲆⲆⲆ) {
					if (!this.ⲆⵠᐃᐃΔΔᐃ || !this.ⲆⲆⵠᐃⵠᐃⲆ) return;
					ⵠΔⲆⲆ(Δ, this.ⵠⵠ, Math.floor(Ⲇᐃ - this.ⵠⵠ.width / 2), Math.floor(ⲆⲆⲆ - this.ⵠⵠ.height / ⵠⵠᐃⲆ))
				}
			},
			"ⲆⲆⲆⲆΔΔⵠᐃⲆ": function(ΔⲆⵠ) {
				for (ᐃⲆ = 0; ᐃⲆ < ΔⲆⵠ.length; ᐃⲆ++) {
					if (this.ᐃᐃⲆⲆ[ΔⲆⵠ[ᐃⲆ][0]] == ΔⲆⵠ[ᐃⲆ][1]) return ⲆⲆⵠⵠΔ
				}
				return ΔⲆⲆΔⵠ
			},
			"ⵠᐃⵠΔⵠ": function(ΔΔ) {
				for (var ᐃⲆ = ⵠⵠⲆΔ; ᐃⲆ < this.ΔⵠΔⵠⲆ.length; ᐃⲆ++) {
					if (this.ΔⵠΔⵠⲆ[ᐃⲆ].id == ΔΔ) return ᐃⲆ
				}
				return -1
			},
			"ⲆᐃⵠᐃᐃⲆᐃ": function(ΔΔ, ᐃⲆ) {
				this.ᐃᐃⲆⲆ[ΔΔ] = ΔᐃⲆⲆ;
				this.ΔⵠΔⵠⲆ.splice(ᐃⲆ, ᐃⵠᐃᐃ);
				ᐃⲆΔⵠ.ⵠⵠΔΔⲆΔⵠ()
			},
			"ⲆⲆⲆⲆΔⵠΔ": function(ΔΔ, ᐃᐃⲆⲆ, ᐃⲆ) {
				ΔⵠΔ = ΔΔᐃᐃⵠⵠⲆ;
				this.ᐃᐃⲆⲆ[ΔΔ] = Math.max(ⵠᐃΔ, this.ᐃᐃⲆⲆ[ΔΔ] - ᐃᐃⲆⲆ);
				if (!this.ᐃᐃⲆⲆ[ΔΔ] && ᐃⲆ >= ⵠᐃⵠ) this.ⲆᐃⵠᐃᐃⲆᐃ(ΔΔ, ᐃⲆ)
			}
		};
		this.ⲆᐃⵠⵠΔ = {
			enabled: false,
			translate: {
				y: Ⲇⵠⵠᐃ,
				x: 0
			},
			"ⵠⵠⵠᐃᐃⵠᐃ": function() {
				if (ⵠⲆΔ.mode != ᐃΔᐃᐃ.ⲆⵠⵠΔΔⲆⵠ || ⲆΔⵠ.ΔᐃⲆΔᐃⲆᐃ) return;
				ⲆΔⵠ.ⲆᐃⵠⵠΔ.enabled = !ⲆΔⵠ.ⲆᐃⵠⵠΔ.enabled;
				if (ⲆΔⵠ.ⲆᐃⵠⵠΔ.enabled) ᐃⲆΔⵠ.options.ⵠⲆᐃⵠⵠᐃᐃ.display = ᐃ[376];
				else ᐃⲆΔⵠ.options.ⵠⲆᐃⵠⵠᐃᐃ.display = ᐃ[371]
			}
		};
		ᐃⲆΔⵠ.options.ⵠⲆᐃⵠⵠᐃᐃ.display = ᐃ[371];
		this.ⵠⵠⵠⲆᐃ = {
			enabled: false,
			translate: {
				x: 0,
				y: ᐃⲆᐃ
			},
			"ⲆⲆΔⵠⵠ": 0,
			"ⵠⵠⵠᐃᐃⵠᐃ": function() {
				ⲆΔⵠ.ⵠⵠⵠⲆᐃ.enabled = !ⲆΔⵠ.ⵠⵠⵠⲆᐃ.enabled;
				if (ⲆΔⵠ.ⵠⵠⵠⲆᐃ.enabled) ᐃⲆΔⵠ.options.ⵠⲆⵠⲆΔᐃᐃ.display = ᐃ[376];
				else ᐃⲆΔⵠ.options.ⵠⲆⵠⲆΔᐃᐃ.display = ᐃ[371]
			},
			"ΔⵠΔ": function() {
				if (!this.enabled || ⲆΔⵠ.ⵠΔᐃΔ.id >= ᐃⲆΔᐃ || ᐃⲆΔⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) return;
				this.ⲆⲆΔⵠⵠ += ᐃⵠᐃⵠ;
				if (this.ⲆⲆΔⵠⵠ > Ⲇᐃⵠⵠ) {
					this.ⲆⲆΔⵠⵠ = 0;
					if (ⲆΔⵠ.ⵠΔⲆΔ.ΔⵠⲆ < .35) {
						if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ⲆⵠᐃΔᐃ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ⲆⵠᐃΔᐃ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ⲆⵠᐃΔᐃ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.Ⲇᐃᐃⵠⵠ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.Ⲇᐃᐃⵠⵠ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.Ⲇᐃᐃⵠⵠ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ΔΔⲆᐃⵠ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ΔΔⲆᐃⵠ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ΔΔⲆᐃⵠ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ΔⲆⲆᐃᐃ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ΔⲆⲆᐃᐃ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ΔⲆⲆᐃᐃ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ᐃⲆⲆᐃⲆ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ᐃⲆⲆᐃⲆ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ᐃⲆⲆᐃⲆ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ⲆⲆⲆⲆⲆ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ⲆⲆⲆⲆⲆ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ⲆⲆⲆⲆⲆ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ΔⲆⵠⵠΔ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ΔⲆⵠⵠΔ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ΔⲆⵠⵠΔ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ⲆᐃΔΔⲆ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ⲆᐃΔΔⲆ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ⲆᐃΔΔⲆ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ⵠⵠΔΔⲆ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ⵠⵠΔΔⲆ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ⵠⵠΔΔⲆ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ΔᐃΔΔⵠ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ΔᐃΔΔⵠ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ΔᐃΔΔⵠ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ΔᐃⵠⲆΔ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ΔᐃⵠⲆΔ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ΔᐃⵠⲆΔ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ᐃⲆΔΔⵠ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ᐃⲆΔΔⵠ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ᐃⲆΔΔⵠ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ᐃⵠᐃⵠΔ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ᐃⵠᐃⵠΔ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ᐃⵠᐃⵠΔ));
						else if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ⵠⵠⲆᐃᐃ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ⵠⵠⲆᐃᐃ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ⵠⵠⲆᐃᐃ))
					} else if (ⲆΔⵠ.ⵠΔⲆΔ.ᐃᐃⲆ < .35) {
						if (ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ΔⲆ.ⵠⲆΔᐃⵠ]) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⲆ.ⵠⲆΔᐃⵠ, ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ΔⲆ.ⵠⲆΔᐃⵠ))
					}
				}
			}
		};
		ᐃⲆΔⵠ.options.ⵠⲆⵠⲆΔᐃᐃ.display = ᐃ[371];
		this.ⵠΔᐃΔ = {
			id: -1,
			"ᐃⲆⲆΔ": -ᐃΔΔⲆ,
			timeout: new ΔⲆᐃ.ᐃⵠⲆⲆ(false, Ⲇⵠᐃ, 1, 0, ᐃΔΔⲆ, ΔⲆⵠⲆ),
			"ᐃΔΔᐃᐃ": false,
			"ⵠⲆⵠⵠ": -1,
			mode: 0,
			label: [],
			"ΔⲆᐃⵠⵠ": [],
			"ⵠⵠΔⵠΔ": ΔⲆⲆΔⵠ,
			"ᐃⵠΔΔⲆ": ᐃⵠᐃΔⵠ,
			"ΔΔΔⵠⲆⵠᐃ": false,
			"ⵠⲆⵠᐃᐃ": false,
			"ᐃᐃΔΔᐃΔⵠⲆᐃ": function() {
				this.mode = this.mode === ΔᐃⲆⲆ ? 1 : 0
			},
			"ⵠᐃᐃⲆⲆⵠⵠᐃⲆ": function(ⲆΔⵠⲆⲆ) {
				this.ⵠⵠΔⵠΔ = ⲆΔⵠⲆⲆ;
				var ᐃⲆⵠⲆᐃᐃⵠ = ᐃⲆΔⵠ.ⲆΔᐃᐃ;
				if (ᐃⲆⵠⲆᐃᐃⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) ᐃⲆⵠⲆᐃᐃⵠ.ΔΔⲆⲆᐃᐃᐃ(ᐃⲆⵠⲆᐃᐃⵠ.button);
				this.ΔⵠΔ()
			},
			"ΔᐃⵠΔΔⲆⵠᐃΔ": function(ΔΔ) {
				var ΔⲆⵠ = ᐃⵠᐃⵠⵠ[ΔΔ];
				this.id = ΔΔ;
				this.ᐃΔΔᐃᐃ = true;
				var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
				this.timeout.ⲆⵠΔΔᐃΔΔ = ΔⲆⵠ.time * 8;
				this.ᐃⲆⲆΔ = ΔⲆⵠ.ᐃⲆⲆΔ
			},
			"ⲆΔⵠΔⵠᐃΔⲆⵠ": function(ΔΔ) {
				var ΔⲆⵠ = ᐃⵠᐃⵠⵠ[ΔΔ];
				this.id = ΔΔ;
				this.ᐃΔΔᐃᐃ = true;
				var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
				if (ᐃⵠⲆ && ᐃⵠⲆ.right == ΔⲆ.ⵠΔⲆΔᐃ) this.timeout.ⲆⵠΔΔᐃΔΔ = ΔⲆⵠ.time * 3;
				else this.timeout.ⲆⵠΔΔᐃΔΔ = ΔⲆⵠ.time;
				this.ᐃⲆⲆΔ = ΔⲆⵠ.ᐃⲆⲆΔ;
				for (var ᐃⲆ = 0; ᐃⲆ < ΔⲆⵠ.r.length; ᐃⲆ++) {
					var ⵠΔⲆ = ΔⲆⵠ.r[ᐃⲆ];
					ⲆΔⵠ.ᐃΔⲆᐃ.ⲆⲆⲆⲆΔⵠΔ(ⵠΔⲆ[0], ⵠΔⲆ[1], ⲆΔⵠ.ᐃΔⲆᐃ.ⵠᐃⵠΔⵠ(ⵠΔⲆ[ⵠⵠᐃ]))
				}
				ᐃⲆΔⵠ.ⵠⵠΔΔⲆΔⵠ()
			},
			"ΔⵠΔ": function() {
				this.ΔⲆᐃⵠⵠ = [];
				if (ᐃⲆΔⵠ.ΔⲆⵠΔⵠ.ⵠΔᐃΔ === 1) ᐃⲆΔⵠ.ΔⲆⵠΔⵠ.display = ⵠⵠΔΔ;
				for (var ⲆⲆᐃΔ in ᐃⵠᐃⵠⵠ) {
					var ΔⲆⵠ = ᐃⵠᐃⵠⵠ[ⲆⲆᐃΔ];
					var ΔⲆᐃⵠⵠ = true;
					if (!ΔⲆⵠ.r) continue;
					for (var ᐃⲆ = 0; ᐃⲆ < ΔⲆⵠ.r.length; ᐃⲆ++) {
						if (ⲆΔⵠ.ᐃΔⲆᐃ.max >= ᐃΔᐃᐃ.ⵠᐃⲆΔⵠᐃᐃ && ΔⲆⵠ.id === ᐃⵠⵠ.ⲆⵠⲆΔ) {
							ΔⲆᐃⵠⵠ = false;
							break
						}
						if (ΔⲆⵠ.w > this.ⵠⵠΔⵠΔ || ΔⲆⵠ.f > this.ᐃⵠΔΔⲆ || ΔⲆⵠ.ⵠΔⲆ > this.ΔΔΔⵠⲆⵠᐃ || ΔⲆⵠ.e > this.ⵠⲆⵠᐃᐃ) {
							ΔⲆᐃⵠⵠ = ⲆⵠΔΔⵠ;
							break
						}
						var ⵠΔⲆ = ΔⲆⵠ.r[ᐃⲆ];
						if (!ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ⵠΔⲆ[0]] || ⲆΔⵠ.ᐃΔⲆᐃ.ᐃᐃⲆⲆ[ⵠΔⲆ[0]] < ⵠΔⲆ[ⲆⵠⲆ]) {
							ΔⲆᐃⵠⵠ = Ⲇⵠⵠⵠᐃ;
							break
						}
					}
					if (ΔⲆᐃⵠⵠ) this.ΔⲆᐃⵠⵠ.push(ᐃⲆΔⵠ.ⵠⲆⲆ[ΔⲆⵠ.id])
				}
				ᐃⲆΔⵠ.ΔΔⵠᐃⵠⵠΔ();
				ᐃⲆΔⵠ.ⲆΔⵠᐃᐃΔⲆ();
				ᐃⲆΔⵠ.ⲆⲆΔⵠⵠⵠⵠ();
				ᐃⲆΔⵠ.ⵠⲆⵠΔⲆⵠΔ();
				ᐃⲆΔⵠ.ᐃⲆⵠⵠᐃΔⵠ();
				ᐃⲆΔⵠ.ΔⲆΔΔΔⵠΔ();
				ᐃⲆΔⵠ.sign.ᐃⲆⵠΔᐃⵠⲆ()
			},
			"ⲆᐃⵠⵠⵠⲆᐃ": function() {
				this.id = -1;
				this.ᐃΔΔᐃᐃ = false;
				this.timeout.ⵠΔΔ = ᐃⲆᐃ;
				this.timeout.ⵠΔⲆ = false;
				this.ΔⵠΔ()
			}
		};
		this.ⵠΔΔⲆΔⵠᐃ = {
			message: ΔⲆᐃΔᐃ,
			"ᐃⵠΔᐃ": ᐃⲆⲆΔⲆΔᐃΔⲆ
		};
		this.alert = {
			timeout: new ΔⲆᐃ.ᐃⵠⲆⲆ(ΔⲆⲆΔⵠ, ⲆⲆΔⵠ, ᐃⵠᐃᐃ, 0, 4, .3),
			text: "",
			label: null,
			"ᐃⵠΔᐃ": ⲆⲆⲆⵠⲆⲆⲆΔⵠ,
			list: []
		};
		this.ⲆⵠᐃΔⵠ = {
			"ᐃⵠ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]),
			"ⲆΔⵠᐃⵠ": [],
			"ΔⵠΔ": true,
			translate: {
				y: ⵠⵠⵠ,
				x: ΔᐃⲆⲆ
			},
			sort: function() {
				var ⲆⵠΔⲆΔΔᐃ = [];
				var ΔΔᐃΔ = ⵠⲆΔ.ΔΔᐃΔ;
				for (var ᐃⲆ = ⵠᐃⵠ; ᐃⲆ < ΔΔᐃΔ.length; ᐃⲆ++) {
					if (ΔΔᐃΔ[ᐃⲆ].ᐃΔⵠⵠᐃ) ⲆⵠΔⲆΔΔᐃ.push({
						id: ᐃⲆ,
						"ΔⵠⵠⲆ": ΔΔᐃΔ[ᐃⲆ].ᐃᐃᐃΔᐃ
					})
				}
				ⲆⵠΔⲆΔΔᐃ.sort((function(ⵠᐃΔΔ, ΔᐃⲆΔ) {
					return ΔᐃⲆΔ.ΔⵠⵠⲆ - ⵠᐃΔΔ.ΔⵠⵠⲆ
				}));
				this.ⲆΔⵠᐃⵠ = [];
				for (var ᐃⲆ = 0; ᐃⲆ < ⲆⵠΔⲆΔΔᐃ.length && ᐃⲆ < 10; ᐃⲆ++) this.ⲆΔⵠᐃⵠ.push(ⲆⵠΔⲆΔΔᐃ[ᐃⲆ].id);
				this.ΔⵠΔ = true
			},
			"ᐃⵠΔᐃᐃ": function(ΔⲆⵠᐃ) {
				var ΔΔᐃΔ = ⵠⲆΔ.ΔΔᐃΔ;
				for (var ᐃⲆ = 0; ᐃⲆ < ΔΔᐃΔ.length; ᐃⲆ++) ΔΔᐃΔ[ᐃⲆ].ᐃᐃᐃΔᐃ = ⵠⵠⵠ;
				ΔΔᐃΔ[ⲆΔⵠ.id].ᐃᐃᐃΔᐃ = ΔⲆᐃ.ⲆⵠⵠΔΔⲆᐃ(ΔⲆⵠᐃ[ΔᐃⵠⲆ]);
				this.ⲆΔⵠᐃⵠ = [];
				for (var ᐃⲆ = ⵠⲆΔᐃ; ᐃⲆ < ΔⲆⵠᐃ.length; ᐃⲆ += 2) {
					this.ⲆΔⵠᐃⵠ.push(ΔⲆⵠᐃ[ᐃⲆ]);
					ΔΔᐃΔ[ΔⲆⵠᐃ[ᐃⲆ]].ᐃᐃᐃΔᐃ = ΔⲆᐃ.ⲆⵠⵠΔΔⲆᐃ(ΔⲆⵠᐃ[ᐃⲆ + ⲆⵠΔΔ])
				}
				this.ΔⵠΔ = true
			}
		};
		this.ⲆⵠᐃΔⵠ.ᐃⵠ.width = 180 * Ⲇ;
		this.ⲆⵠᐃΔⵠ.ᐃⵠ.height = 300 * Ⲇ;
		this.ⲆⵠᐃΔⵠ.Δ = this.ⲆⵠᐃΔⵠ.ᐃⵠ.getContext(ᐃ[269]);
		this.ᐃⲆᐃΔᐃ = {
			open: false,
			input: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("commandInput"),
			"ΔⲆⵠᐃⲆᐃΔ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("commandsBox"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("commandMainBox").style,
			"ⵠΔⵠⲆⲆⵠΔⲆΔ": function(Ⲇᐃᐃᐃ) {
				this.ΔⲆⵠᐃⲆᐃΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] += Ⲇᐃᐃᐃ
			},
			"ΔⵠΔ": function() {
				this.style.left = Math.floor(ⲆΔⵠΔ / 2 - 300) + ᐃ[279];
				this.style.top = Math.floor(ΔⲆⲆΔ / ⵠⲆᐃⵠ - 250) + ᐃ[279]
			},
			"ᐃⲆⵠⵠⵠⵠⲆᐃⲆ": function() {
				this.ΔⲆⵠᐃⲆᐃΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ""
			},
			"ⲆⵠᐃⵠΔ": function() {
				this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = Ⲇⵠⵠⵠᐃ;
				this.style.display = ᐃ[371]
			},
			"ⲆᐃⲆΔΔ": function(ΔⵠⲆΔᐃ) {
				var ⲆΔᐃΔΔ = '<table class="tableList">';
				for (var ᐃⲆ = ΔᐃⲆⲆ; ᐃⲆ < ΔⵠⲆΔᐃ.length; ᐃⲆ++) {
					if (ᐃⲆ % ⲆΔⲆⲆ === 0) ⲆΔᐃΔΔ += "<tr>";
					ⲆΔᐃΔΔ += '<td class="tableList">' + ΔⵠⲆΔᐃ[ᐃⲆ] + "</td>";
					if ((ᐃⲆ + ⲆⲆⲆᐃ) % 3 === ⵠᐃⲆⵠ || ᐃⲆ + 1 === ΔⵠⲆΔᐃ.length) ⲆΔᐃΔΔ += "</tr>"
				}
				ⲆΔᐃΔΔ += "</table>";
				return ⲆΔᐃΔΔ
			},
			"ⵠᐃΔᐃΔ": function(cmd, ⲆᐃⲆⲆᐃᐃᐃ, ⵠᐃⲆⲆΔⲆᐃ, ⲆΔᐃΔΔ) {
				cmd = !cmd ? "" : cmd;
				ⲆᐃⲆⲆᐃᐃᐃ = !ⲆᐃⲆⲆᐃᐃᐃ ? "" : ⲆᐃⲆⲆᐃᐃᐃ;
				ⵠᐃⲆⲆΔⲆᐃ = !ⵠᐃⲆⲆΔⲆᐃ ? "" : ⵠᐃⲆⲆΔⲆᐃ;
				ⲆΔᐃΔΔ = !ⲆΔᐃΔΔ ? "" : ⲆΔᐃΔΔ;
				var ΔⵠΔᐃ = "<div class=commandWritten>" + cmd;
				if (ⲆᐃⲆⲆᐃᐃᐃ) ΔⵠΔᐃ += "<div class=commandValidated>";
				else ΔⵠΔᐃ += "<div class=commandUnknown>";
				ΔⵠΔᐃ += ⵠᐃⲆⲆΔⲆᐃ + ᐃ[423] + ⲆΔᐃΔΔ + ᐃ[423];
				this.ⵠΔⵠⲆⲆⵠΔⲆΔ(ΔⵠΔᐃ);
				this.ᐃΔΔΔΔᐃⲆΔΔ()
			},
			"ᐃΔΔΔΔᐃⲆΔΔ": function() {
				this.ΔⲆⵠᐃⲆᐃΔ["scrollTop"] = this.ΔⲆⵠᐃⲆᐃΔ["scrollHeight"];
				return
			},
			"ⲆⵠΔᐃⲆⲆΔ": function(ⵠⵠⵠᐃ) {
				switch (ⵠⵠⵠᐃ) {
					case "clean":
						this.ᐃⲆⵠⵠⵠⵠⲆᐃⲆ();
						return true;
						break;
					case "list":
						var ⲆⵠᐃⲆ = "";
						const ⵠΔΔⲆᐃ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[37]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]]("div");
						var ΔΔᐃΔ = ⵠⲆΔ.ΔΔᐃΔ;
						for (var ᐃⲆ = ⲆⲆΔ; ᐃⲆ < ΔΔᐃΔ.length; ᐃⲆ++) {
							var ᐃΔΔⵠ = ΔΔᐃΔ[ᐃⲆ];
							if (ᐃΔΔⵠ.ᐃΔⵠⵠᐃ) {
								ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[98]] = ᐃΔΔⵠ.ⵠⲆⵠΔⵠ;
								if (Settings.ShowLevel.enabled) {
								ⲆⵠᐃⲆ += ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] + ' <span style="color:green">#' + ᐃⲆ + ' <span style="color:red"> | ' + '  Level : ' + ΔΔᐃΔ[ᐃⲆ].level + "</span><br />"
								}
								else {
									ⲆⵠᐃⲆ += ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] + ' <span style="color:green">#' + ᐃⲆ + "</span><br />"
								}
							}
						}
						this.ⵠᐃΔᐃΔ("list", 1, "List all connected players", ⲆⵠᐃⲆ);
						return ᐃΔⲆΔⵠ;
						break;
					case "weapon-list":
						this.ⵠᐃΔᐃΔ("Weapons", 1, "List all weapons in the game", this.ⲆᐃⲆΔΔ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe"]));
						return ᐃⵠⵠⵠⲆ;
						break;
					case "tool-list":
						this.ⵠᐃΔᐃΔ("Tools", ΔΔΔᐃ, "List all tools in the game", this.ⲆᐃⲆΔΔ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
						return true;
						break;
					case "survival-list":
						this.ⵠᐃΔᐃΔ("Survival Items", 1, "List all survival items in the game", this.ⲆᐃⲆΔΔ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
						return ⵠⲆⵠᐃⵠ;
						break;
					case "resource-list":
						this.ⵠᐃΔᐃΔ("Resources", 1, "List all resources in the game", this.ⲆᐃⲆΔΔ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
						return true;
						break;
					case "food-list":
						this.ⵠᐃΔᐃΔ("Food", ⲆⲆΔⵠ, "List all food in the game", this.ⲆᐃⲆΔΔ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
						return ⵠᐃⵠⲆᐃ;
						break;
					case "hat-list":
						this.ⵠᐃΔᐃΔ("Hats", ᐃⵠᐃᐃ, "List all hats in the game", this.ⲆᐃⲆΔΔ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
						return true;
						break;
					case "building-list":
						this.ⵠᐃΔᐃΔ("Buildings", ⵠⲆⵠⲆ, "List all buildings in the game", this.ⲆᐃⲆΔΔ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
						return ᐃⵠⲆⲆᐃ;
						break;
					case "biome-list":
						this.ⵠᐃΔᐃΔ("Biomes list", ΔⲆⵠⲆ, "List all available biomes in the game", this.ⲆᐃⲆΔΔ([ᐃ[445], "winter", "lava", "sea", "beach", "island", "dragon"]));
						return ⲆΔΔⵠᐃⲆⵠ;
						break;
					case "help-config":
						this.ⵠᐃΔᐃΔ("Help Configuration", ⵠⵠⵠⲆ, "Learn how to build your customized map", '<div class="specialCommandBox">To get the current map configuration, and modify it, copy the result of <span class="commandSynthax">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class="commandSynthax">set-config</span></br>To modify the map, modify "important" section (at the end)<div class="infoCommand">The minimum size of the map is 50x50.</div>"custom_map" is used to change the biomes and is written like this :<div class="commandSynthax" style="font-size:17px;">"custom_map":[["biome",width,height],...,["biome",width,height]]</div>Biomes are <span class="commandSynthax">"forest"</span>, <span class="commandSynthax">"lava"</span>, <span class="commandSynthax">"winter"</span>, and <span class="commandSynthax">"dragon"</span>.');
						return true;
						break;
					case "pos":
						var ΔΔᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ];
						for (var ᐃⲆ = ᐃⲆΔ; ᐃⲆ < ΔΔᐃΔ.length; ᐃⲆ++) {
							var ᐃⵠⲆ = ΔΔᐃΔ[ᐃⲆ];
							if (ᐃⵠⲆ.ⲆⲆΔᐃ === ⲆΔⵠ.id) {
								this.ⵠᐃΔᐃΔ(ᐃ[399], ΔⲆⵠⲆ, "Your position is " + Math.floor(ᐃⵠⲆ.x / ⵠΔᐃᐃⲆ) + ":" + Math.floor(ᐃⵠⲆ.y / ΔΔⵠⵠⲆ));
								return ⲆⲆⲆⵠⲆ
							}
						}
						break;
					case "help-admin":
						this.ⵠᐃΔᐃΔ("help-admin", ⲆⲆⵠ, "List all available commands for admin only", this.ⲆᐃⲆΔΔ(["restart", "m | message", "mt | message-to", "w | welcome", ᐃ[38], "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", ᐃ[399], "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
						return true;
						break;
					case "help":
						this.ⵠᐃΔᐃΔ("help", ΔⲆⵠⲆ, "List all available commands", this.ⲆᐃⲆΔΔ(["clean", "list", ᐃ[399], "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
						return ΔΔᐃᐃⵠⵠⲆ;
						break
				}
				return false
			},
			"ΔΔⲆⵠᐃⲆᐃⲆᐃ": function() {
				if (!this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
					this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ⲆⲆⲆⵠⲆ;
					this.style.display = ᐃ[376];
					this.input.focus()
				}
			},
			"ᐃⵠⲆΔⵠᐃΔ": function() {
				var ⵠⵠⵠᐃ = this.input.value;
				if (ⵠⵠⵠᐃ && ⵠⵠⵠᐃ.length > Ⲇⵠⵠᐃ) {
					if (!this.ⲆⵠΔᐃⲆⲆΔ(ⵠⵠⵠᐃ)) ΔΔᐃⲆ.ΔⵠⵠΔⲆΔᐃⵠⲆ(this.input.value);
					this.input.value = ""
				}
			}
		};
		this.ᐃᐃⲆΔⲆ = {
			open: ᐃΔᐃᐃΔ,
			input: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("chat_input"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("chat_block").style,
			"ΔⵠΔ": function() {
				this.style.left = Math.floor(ⲆΔⵠΔ / 2 - 150) + ᐃ[279];
				this.style.top = Math.floor(ΔⲆⲆΔ / ⲆΔⲆΔ + 80) + ᐃ[279]
			},
			"ⲆⵠᐃⵠΔ": function() {
				this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false;
				this.style.display = ᐃ[371];
				this.input.value = ""
			},
			prefix: "!",
			cmd: {
				hud: function(ⲆΔΔᐃⵠⵠⲆ) {
					if (ⲆΔΔᐃⵠⵠⲆ === "off") {
						var ⵠⵠⵠᐃ = 'Enter "!hud" without the quotes to restore the HUD';
						if (!ⲆΔⵠ.alert.text) ⲆΔⵠ.alert.text = ⵠⵠⵠᐃ;
						else ⲆΔⵠ.alert.list.push(ⵠⵠⵠᐃ);
						ᐃⲆΔⵠ.ⵠⲆⵠⵠΔⵠΔ = ⵠⵠΔΔ
					} else ᐃⲆΔⵠ.ⵠⲆⵠⵠΔⵠΔ = ΔⲆⵠⲆ
				}
			},
			"ⲆⵠΔᐃⲆⲆΔ": function(ⵠⵠⵠᐃ) {
				if (ⵠⵠⵠᐃ.charAt(0) == this.prefix) {
					var cmd = "";
					var ⲆΔΔᐃⵠⵠⲆ = "";
					for (var ᐃⲆ = 1; ᐃⲆ < ⵠⵠⵠᐃ.length && ⵠⵠⵠᐃ.charAt(ᐃⲆ) != " "; ᐃⲆ++) cmd += ⵠⵠⵠᐃ.charAt(ᐃⲆ);
					ᐃⲆ++;
					for (; ᐃⲆ < ⵠⵠⵠᐃ.length; ᐃⲆ++) ⲆΔΔᐃⵠⵠⲆ += ⵠⵠⵠᐃ.charAt(ᐃⲆ);
					var ⲆⲆⲆᐃᐃ = this.cmd[cmd];
					if (ⲆⲆⲆᐃᐃ) ⲆⲆⲆᐃᐃ(ⲆΔΔᐃⵠⵠⲆ);
					return ᐃⵠⲆⵠᐃ
				} else return false
			},
			"ΔᐃᐃⵠⲆ": function() {
				if (!this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
					this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ΔⲆᐃΔΔ;
					this.style.display = ᐃ[376];
					this.input.focus()
				} else {
					this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ⲆⵠΔΔⵠ;
					this.style.display = ᐃ[371];
					var ⵠⵠⵠᐃ = this.input.value;
					if (ⵠⵠⵠᐃ) {
						if (!this.ⲆⵠΔᐃⲆⲆΔ(ⵠⵠⵠᐃ)) ΔΔᐃⲆ.ⵠᐃⵠⲆΔⲆΔΔⲆ(this.input.value);
						this.input.value = ""
					}
				}
			}
		};
		this.ⲆⲆⲆⲆΔⵠᐃ = {
			"ⲆᐃᐃⵠⲆ": [],
			"ΔⵠΔ": function(ⲆΔΔ) {
				ⲆΔΔ.y += ᐃⵠᐃⵠ * 80 * ⲆΔΔ.ΔⵠⵠⲆ;
				ⲆΔΔ.x += ᐃⵠᐃⵠ * 80 * ⲆΔΔ.c;
				ⲆΔΔ.ⲆⲆᐃᐃΔ -= ᐃⵠᐃⵠ / 6;
				if (ⲆΔΔ.ⲆⲆᐃᐃΔ > .2) ⲆΔΔ.alpha = Math.min(ⲆΔΔ.alpha + ᐃⵠᐃⵠ * 3, 1);
				else ⲆΔΔ.alpha = Math.max(ⲆΔΔ.alpha - ᐃⵠᐃⵠ * ⲆⵠⲆ, ᐃⲆᐃ)
			},
			add: function(ΔⵠΔΔ) {
				var length = Math.floor(Math.min(ⵠ.ᐃΔΔⵠⲆΔⵠ * (ⲆΔⵠΔ / 1366), ⵠ.ᐃΔΔⵠⲆΔⵠ + ⵠΔΔᐃᐃ) * Math.max(Math.min(ⵠⲆΔ.ⵠΔᐃⲆⵠ + 1e3, 3e3) / 3e3, ᐃⲆΔ));
				if (this.ⲆᐃᐃⵠⲆ.length < length) {
					var ΔΔ = Math.floor(Math.random() * ⵠ.ΔⵠⲆᐃΔΔᐃ);
					var Ⲇᐃ = -ⲆΔⵠ.ⲆⵠΔ.x + Math.floor(Math.random() * ⲆΔⵠ.ⲆⵠΔ.w);
					var ⲆⲆⲆ = -ⲆΔⵠ.ⲆⵠΔ.y + Math.floor(Math.random() * ⲆΔⵠ.ⲆⵠΔ.ΔⵠⲆ);
					var ΔΔⲆ = Math.random(Math.PI);
					this.ⲆᐃᐃⵠⲆ.push(new ΔΔⲆⵠⵠᐃⵠ(ΔΔ, Ⲇᐃ, ⲆⲆⲆ, ΔΔⲆ))
				}
			}
		};
		this.ⵠΔⲆΔΔΔᐃ = ΔᐃⲆⲆ;
		this.ⲆΔΔⲆΔ = 0;
		this.ΔⲆΔᐃᐃ = {
			"ⲆᐃᐃⵠⲆ": [],
			"ᐃᐃⵠΔᐃ": ᐃⲆᐃ,
			"ΔΔⲆᐃΔ": 0,
			"ΔⵠΔ": function(ⲆΔΔ) {
				ⲆΔΔ.y += ᐃⵠᐃⵠ * (200 + 800 * this.ΔΔⲆᐃΔ) * ⲆΔΔ.ΔⵠⵠⲆ;
				ⲆΔΔ.x += ᐃⵠᐃⵠ * (200 + 800 * this.ΔΔⲆᐃΔ) * ⲆΔΔ.c;
				ⲆΔΔ.ⲆⲆᐃᐃΔ -= ᐃⵠᐃⵠ / 6;
				if (ⲆΔΔ.ⲆⲆᐃᐃΔ > .2) ⲆΔΔ.alpha = Math.min(ⲆΔΔ.alpha + ᐃⵠᐃⵠ * 3, 1);
				else ⲆΔΔ.alpha = Math.max(ⲆΔΔ.alpha - ᐃⵠᐃⵠ * ΔᐃⵠⲆ, 0)
			},
			add: function(ΔⵠΔΔ) {
				var length = Math.floor(Math.min((this.ΔΔⲆᐃΔ + .1) * ⵠ.ⲆᐃⲆⵠⲆΔᐃ * (ⲆΔⵠΔ / 1366), (this.ΔΔⲆᐃΔ + .1) * ⵠ.ⲆᐃⲆⵠⲆΔᐃ + 10) * Math.max(Math.min(ⵠⲆΔ.ᐃⵠΔᐃⲆ + 1e3, 3e3) / 3e3, 0));
				if (this.ⲆᐃᐃⵠⲆ.length < length) {
					var ΔΔ = Math.floor(Math.random() * ⵠ.ΔⵠⲆᐃΔΔᐃ);
					var Ⲇᐃ = -ⲆΔⵠ.ⲆⵠΔ.x + Math.floor(Math.random() * ⲆΔⵠ.ⲆⵠΔ.w);
					var ⲆⲆⲆ = -ⲆΔⵠ.ⲆⵠΔ.y + Math.floor(Math.random() * ⲆΔⵠ.ⲆⵠΔ.ΔⵠⲆ);
					var ΔΔⲆ = Math.random(Math.PI);
					if (ⲆΔⵠ.ΔⲆΔᐃᐃ.ᐃᐃⵠΔᐃ !== Ⲇⵠᐃ) Ⲇᐃ -= ⲆΔⵠ.ⲆⵠΔ.w / 2;
					this.ⲆᐃᐃⵠⲆ.push(new ΔΔⲆⵠⵠᐃⵠ(ΔΔ, Ⲇᐃ, ⲆⲆⲆ, ΔΔⲆ))
				}
			}
		};
		this.ⵠΔⲆⲆⵠ = {
			"ⲆᐃᐃⵠⲆ": [],
			"ᐃᐃⵠΔᐃ": 0,
			"ΔΔⲆᐃΔ": Δⵠⵠ,
			"ΔⵠΔ": function(ⲆΔΔ) {
				if (ᐃⵠᐃⲆᐃ.ΔⲆᐃⵠⲆΔΔ()) ⲆΔΔ.y += ᐃⵠᐃⵠ * ⲆΔΔ.ⵠᐃᐃⲆⲆ * (5.5 + ⵠⵠⵠΔΔ * this.ΔΔⲆᐃΔ);
				else ⲆΔΔ.y += ᐃⵠᐃⵠ * ⲆΔΔ.ⵠᐃᐃⲆⲆ * (ⵠΔⲆᐃ + ΔΔⵠⲆⵠ * this.ΔΔⲆᐃΔ);
				ⲆΔΔ.ⲆⲆᐃᐃΔ -= ᐃⵠᐃⵠ / ⵠⵠΔⵠ;
				if (ᐃⵠᐃⲆᐃ.ᐃⲆⲆᐃΔⲆᐃ()) ⲆΔΔ.x += ᐃⵠᐃⵠ * (ᐃΔⲆᐃⵠ + 400 * this.ΔΔⲆᐃΔ);
				else if (ᐃⵠᐃⲆᐃ.ⵠΔⲆᐃⲆⵠΔ()) ⲆΔΔ.x -= ᐃⵠᐃⵠ * (130 - 400 * this.ΔΔⲆᐃΔ);
				else ⲆΔΔ.x -= ᐃⵠᐃⵠ * (30 - 400 * this.ΔΔⲆᐃΔ);
				if (ⲆΔΔ.ⲆⲆᐃᐃΔ > .2) ⲆΔΔ.alpha = Math.min(ⲆΔΔ.alpha + ᐃⵠᐃⵠ * ⲆⲆΔΔ, ᐃΔⲆΔ);
				else ⲆΔΔ.alpha = Math.max(ⲆΔΔ.alpha - ᐃⵠᐃⵠ * 5, 0)
			},
			add: function(ΔⵠΔΔ) {
				var length = Math.floor(Math.min((this.ΔΔⲆᐃΔ * 1.5 + .5) * ⵠ.ᐃⵠⲆΔⵠⵠΔ * (ⲆΔⵠΔ / 1366), (this.ΔΔⲆᐃΔ * 1.5 + .5) * ⵠ.ᐃⵠⲆΔⵠⵠΔ + 10) * Math.max(Math.min(ⵠⲆΔ.ΔΔⵠⵠⵠ + 1e3, 3e3) / 3e3, ⲆᐃΔⵠ));
				if (this.ⲆᐃᐃⵠⲆ.length < length) {
					var ΔΔ = Math.floor(Math.random() * ⵠ.ⲆᐃⲆⲆⵠⵠΔ);
					var Ⲇᐃ = -ⲆΔⵠ.ⲆⵠΔ.x + Math.floor(Math.random() * ⲆΔⵠ.ⲆⵠΔ.w);
					var ⲆⲆⲆ = -ⲆΔⵠ.ⲆⵠΔ.y + Math.floor(Math.random() * 400 * Ⲇ - 200 * Ⲇ);
					this.ⲆᐃᐃⵠⲆ.push(new ΔΔⲆⵠⵠᐃⵠ(ΔΔ, Ⲇᐃ, ⲆⲆⲆ, Ⲇⵠᐃ))
				}
			}
		};

		function ⲆⲆⲆΔⵠΔⵠᐃᐃ() {
			this.seed = ⲆⲆⲆᐃ;
			this.ᐃⲆⲆⲆⵠᐃΔ = 2;
			this.Δᐃⵠⵠᐃⵠⵠ = ᐃΔᐃⲆ;
			this.ᐃΔΔⵠΔᐃΔᐃΔ = 1;
			this.ΔⲆᐃⵠⲆΔΔΔᐃ = 2;
			this.ᐃᐃΔⲆⲆⲆⲆΔΔ = ⵠᐃⵠⵠ;
			this.ⵠⵠⵠⲆᐃᐃⲆ = function(Ⲇᐃ) {
				this.seed = 2 + Math.floor(ᐃΔᐃᐃ.ⲆᐃⵠΔΔ * Math.random())
			};
			this.ⲆⵠΔⲆᐃⵠⵠ = function(Ⲇᐃ) {
				this.ᐃⲆⲆⲆⵠᐃΔ = 2 + Math.floor(Math.random() * ᐃΔᐃᐃ.ⲆᐃⵠΔΔ)
			};
			this.ᐃΔⵠᐃΔⵠΔ = function(Ⲇᐃ) {
				this.Δᐃⵠⵠᐃⵠⵠ = ᐃⲆⵠᐃ + Math.floor(Math.random() * ᐃΔᐃᐃ.ⲆᐃⵠΔΔ)
			};
			this.ⲆⲆᐃᐃΔᐃΔᐃⲆ = function(Ⲇᐃ) {
				this.ᐃΔΔⵠΔᐃΔᐃΔ = ΔⵠⲆⲆ + Math.floor(ᐃΔᐃᐃ.ⲆᐃⵠΔΔ * Math.random())
			};
			this.ᐃΔⲆⲆⲆΔⵠⵠⲆ = function(Ⲇᐃ) {
				this.ΔⲆᐃⵠⲆΔΔΔᐃ = 2 + Math.floor(ᐃΔᐃᐃ.ⲆᐃⵠΔΔ * Math.random())
			};
			this.ᐃⲆΔⲆⲆⵠᐃⲆΔ = function(Ⲇᐃ) {
				this.ᐃᐃΔⲆⲆⲆⲆΔΔ = ᐃᐃΔⵠ + Math.floor(Math.random() * ᐃΔᐃᐃ.ⲆᐃⵠΔΔ)
			};
			this.ⵠᐃᐃᐃᐃᐃⵠ = function(ⲆⲆⲆ, ᐃⵠⲆ, ᐃⲆΔᐃⲆ, ⵠᐃᐃΔⲆⵠᐃ, ᐃΔᐃΔⵠΔⲆ, ΔΔⵠᐃᐃ, ΔᐃⵠⵠⲆ) {
				for (var ᐃⲆ = 1; ᐃⲆ < ΔᐃⵠⵠⲆ;) {
					var ⲆⲆⲆⵠ = ᐃⲆΔᐃⲆ * ᐃⲆ % ⵠⲆᐃΔⲆΔᐃ;
					var ⵠΔΔ = ⵠᐃⲆᐃⲆᐃⲆ[ⲆⲆⲆⵠ];
					if (.1 > ⵠΔΔ) {
						ΔⲆⵠ += 50;
						ᐃⲆ += 50;
						continue
					}
					var ΔⲆⵠ = Math.floor(ⵠΔΔ * ⵠᐃᐃΔⲆⵠᐃ + ᐃΔᐃΔⵠΔⲆ);
					if (ᐃⲆ > ΔΔⵠᐃᐃ && ᐃⲆ < ΔᐃⵠⵠⲆ) {
						var ΔⵠⵠⲆ = Math.random() > .5 ? ᐃⵠᐃⵠ * -10 : ᐃⵠᐃⵠ * ⵠΔΔᐃᐃ;
						var ⲆⵠⲆᐃΔ = ᐃⵠⲆ * ΔⲆⵠ;
						this.ᐃᐃⵠⵠⲆⲆΔ[ⲆⲆⲆⵠ] = Math.max(-ᐃΔᐃᐃ.ⵠⲆⲆᐃⵠᐃΔ, Math.min(ᐃΔᐃᐃ.ⵠⲆⲆᐃⵠᐃΔ, this.ᐃᐃⵠⵠⲆⲆΔ[ⲆⲆⲆⵠ] + ΔⵠⵠⲆ));
						this.ⲆᐃᐃΔⵠᐃΔ[ⲆⲆⲆⵠ] = Math.max(-ᐃΔᐃᐃ.ΔΔΔᐃΔⲆⵠ, Math.min(ᐃΔᐃᐃ.ΔΔΔᐃΔⲆⵠ, this.ⲆᐃᐃΔⵠᐃΔ[ⲆⲆⲆⵠ] + ΔⵠⵠⲆ));
						if (0 < ⲆⵠⲆᐃΔ) {
							Δ.beginPath();
							Δ.arc(ᐃⲆ + ⲆΔⵠ.ⲆⵠΔ.x + this.ⲆᐃᐃΔⵠᐃΔ[ⲆⲆⲆⵠ], ⲆⲆⲆ + this.ᐃᐃⵠⵠⲆⲆΔ[ⲆⲆⲆⵠ] - ᐃΔᐃᐃ.ⵠⲆⲆᐃⵠᐃΔ * .8, ⲆⵠⲆᐃΔ, ΔᐃⲆⲆ, Math.PI * ᐃⲆⵠᐃ);
							if (ⵠⲆΔ.transition) {
								var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
								Δ.fillStyle = ⵠΔⲆⵠⵠ(83, 156, 160, 236, 247, 249, ⵠⲆΔⲆ)
							} else Δ.fillStyle = ⵠ.ΔⲆⲆΔⲆⲆⲆ[ⵠⲆΔ.time];
							Δ.fill()
						}
					}
					ᐃⲆ += ΔⲆⵠ * ⵠΔΔΔ
				}
			};
			this.ΔⲆⵠΔΔΔⵠ = function(Ⲇᐃ, ᐃⵠⲆ, ᐃⲆΔᐃⲆ, ⵠᐃᐃΔⲆⵠᐃ, ᐃΔᐃΔⵠΔⲆ, ⲆΔᐃⲆᐃ, ᐃᐃΔᐃⲆ) {
				for (var ᐃⲆ = ⲆⵠⲆ; ᐃⲆ < ᐃᐃΔᐃⲆ;) {
					var ⲆⲆⲆⵠ = ᐃⲆ * ᐃⲆΔᐃⲆ % ⵠⲆᐃΔⲆΔᐃ;
					var ⵠΔΔ = ⵠᐃⲆᐃⲆᐃⲆ[ⲆⲆⲆⵠ];
					if (.1 > ⵠΔΔ) {
						ΔⲆⵠ += 50;
						ᐃⲆ += 50;
						continue
					}
					var ΔⲆⵠ = Math.floor(ⵠᐃᐃΔⲆⵠᐃ * ⵠΔΔ + ᐃΔᐃΔⵠΔⲆ);
					if (ⲆΔᐃⲆᐃ < ᐃⲆ && ᐃⲆ < ᐃᐃΔᐃⲆ) {
						var ΔⵠⵠⲆ = Math.random() > .5 ? ᐃⵠᐃⵠ * -10 : 10 * ᐃⵠᐃⵠ;
						var ⲆⵠⲆᐃΔ = ΔⲆⵠ * ᐃⵠⲆ;
						this.Ⲇᐃᐃᐃⵠ[ⲆⲆⲆⵠ] = Math.max(-ᐃΔᐃᐃ.ⵠⲆⲆᐃⵠᐃΔ, Math.min(ᐃΔᐃᐃ.ⵠⲆⲆᐃⵠᐃΔ, this.Ⲇᐃᐃᐃⵠ[ⲆⲆⲆⵠ] + ΔⵠⵠⲆ));
						this.ΔᐃⵠⲆᐃ[ⲆⲆⲆⵠ] = Math.max(-ᐃΔᐃᐃ.ΔΔΔᐃΔⲆⵠ, Math.min(ᐃΔᐃᐃ.ΔΔΔᐃΔⲆⵠ, this.ΔᐃⵠⲆᐃ[ⲆⲆⲆⵠ] + ΔⵠⵠⲆ));
						if (ⲆⵠⲆᐃΔ > ⲆⲆΔ) {
							Δ.beginPath();
							Δ.arc(Ⲇᐃ + this.Ⲇᐃᐃᐃⵠ[ⲆⲆⲆⵠ] - ᐃΔᐃᐃ.ⵠⲆⲆᐃⵠᐃΔ * .8, ᐃⲆ + ⲆΔⵠ.ⲆⵠΔ.y + this.ΔᐃⵠⲆᐃ[ⲆⲆⲆⵠ], ⲆⵠⲆᐃΔ, ᐃⲆᐃ, Math.PI * 2);
							if (ⵠⲆΔ.transition) {
								var ⵠⲆΔⲆ = ⵠⲆΔ.time ? 1 - ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ : ⵠⲆΔ.ⵠⲆΔⲆ.ⵠΔΔ;
								Δ.fillStyle = ⵠΔⲆⵠⵠ(83, 156, 160, 236, 247, 249, ⵠⲆΔⲆ)
							} else Δ.fillStyle = ⵠ.ΔⲆⲆΔⲆⲆⲆ[ⵠⲆΔ.time];
							Δ.fill()
						}
					}
					ᐃⲆ += ⵠⲆΔᐃ * ΔⲆⵠ
				}
			};
			this.ΔΔⵠⲆΔⵠΔᐃᐃ = function(ⲆⲆⲆ, ᐃⵠⵠΔ, ⲆⲆⵠΔΔⲆⵠ, ΔⵠᐃΔ, ΔΔⵠᐃᐃ, ΔᐃⵠⵠⲆ) {
				ΔΔⵠᐃᐃ -= 30;
				ΔᐃⵠⵠⲆ += 30;
				var ᐃⵠⲆ = -((ⲆⲆⵠΔΔⲆⵠ - ᐃΔᐃᐃ.ⲆⲆⵠⲆᐃ - ΔⵠᐃΔ - ΔⲆⵠΔ) / ᐃΔᐃᐃ.ⵠᐃⲆⲆΔⲆΔ);
				0 === ᐃⵠⲆ && this.ᐃΔⵠᐃΔⵠΔ();
				Δ.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⲆ);
				this.ⵠᐃᐃᐃᐃᐃⵠ(ⲆⲆⵠΔΔⲆⵠ, ᐃⵠⲆ, this.Δᐃⵠⵠᐃⵠⵠ, 18, 16, ΔΔⵠᐃᐃ, ΔᐃⵠⵠⲆ);
				Δ.globalAlpha = 1;
				var ᐃⵠⲆ = -((ⲆⲆⲆ - ᐃΔᐃᐃ.ΔⲆΔⲆΔ - ΔⵠᐃΔ + 500) / ᐃΔᐃᐃ.ⲆⵠⲆⲆᐃⲆᐃ);
				if (0 === ᐃⵠⲆ) this.ⵠⵠⵠⲆᐃᐃⲆ();
				Δ.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⲆ);
				this.ⵠᐃᐃᐃᐃᐃⵠ(ⲆⲆⲆ, ᐃⵠⲆ, this.seed, 12, 10, ΔΔⵠᐃᐃ, ΔᐃⵠⵠⲆ);
				Δ.globalAlpha = 1;
				if (-ⲆⵠⲆ === ᐃⵠⵠΔ) return;
				var ᐃⵠⲆ = -((ᐃⵠⵠΔ - ᐃΔᐃᐃ.ᐃᐃⵠⲆⲆ - ΔⵠᐃΔ + 698) / ᐃΔᐃᐃ.ᐃⲆⵠⲆⲆΔⲆ);
				if (.01 >= ᐃⵠⲆ) this.ⲆⵠΔⲆᐃⵠⵠ();
				Δ.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⲆ);
				this.ⵠᐃᐃᐃᐃᐃⵠ(ᐃⵠⵠΔ, ᐃⵠⲆ, this.ᐃⲆⲆⲆⵠᐃΔ, ΔⵠΔᐃⵠ, 6, ΔΔⵠᐃᐃ, ΔᐃⵠⵠⲆ);
				Δ.globalAlpha = 1
			};
			this.ⲆΔᐃⲆⲆⲆᐃⵠⵠ = function(ⲆⲆⲆ, ᐃⵠⵠΔ, ⲆⲆⵠΔΔⲆⵠ, ΔⵠᐃΔ, ΔΔⵠᐃᐃ, ΔᐃⵠⵠⲆ) {
				ΔΔⵠᐃᐃ -= 30;
				ΔᐃⵠⵠⲆ += 30;
				var ᐃⵠⲆ = -((-ⲆⲆⵠΔΔⲆⵠ + ᐃΔᐃᐃ.ⲆⲆⵠⲆᐃ + ΔⵠᐃΔ + 2) / ᐃΔᐃᐃ.ⵠᐃⲆⲆΔⲆΔ);
				if (ᐃⵠⲆ === 0) this.ᐃΔⵠᐃΔⵠΔ();
				Δ.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⲆ);
				this.ⵠᐃᐃᐃᐃᐃⵠ(ⲆⲆⵠΔΔⲆⵠ, ᐃⵠⲆ, this.Δᐃⵠⵠᐃⵠⵠ, 18, 16, ΔΔⵠᐃᐃ, ΔᐃⵠⵠⲆ);
				Δ.globalAlpha = 1;
				var ᐃⵠⲆ = -((-ⲆⲆⲆ + ᐃΔᐃᐃ.ΔⲆΔⲆΔ + ΔⵠᐃΔ) / ᐃΔᐃᐃ.ⲆⵠⲆⲆᐃⲆᐃ);
				ᐃⵠⲆ === ⵠᐃⲆⵠ && this.ⵠⵠⵠⲆᐃᐃⲆ();
				Δ.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⲆ);
				this.ⵠᐃᐃᐃᐃᐃⵠ(ⲆⲆⲆ, ᐃⵠⲆ, this.seed, 12, 10, ΔΔⵠᐃᐃ, ΔᐃⵠⵠⲆ);
				Δ.globalAlpha = ⲆⲆⵠ;
				if (ᐃⵠⵠΔ === -1) return;
				var ᐃⵠⲆ = -((-ᐃⵠⵠΔ + ᐃΔᐃᐃ.ᐃᐃⵠⲆⲆ + ΔⵠᐃΔ) / ᐃΔᐃᐃ.ᐃⲆⵠⲆⲆΔⲆ);
				if (.01 >= ᐃⵠⲆ) this.ⲆⵠΔⲆᐃⵠⵠ();
				Δ.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⲆ);
				this.ⵠᐃᐃᐃᐃᐃⵠ(ᐃⵠⵠΔ, ᐃⵠⲆ, this.ᐃⲆⲆⲆⵠᐃΔ, 6, ⵠΔᐃᐃΔ, ΔΔⵠᐃᐃ, ΔᐃⵠⵠⲆ);
				Δ.globalAlpha = ⵠⲆⵠⲆ
			};
			this.ᐃᐃⵠΔΔⲆⲆΔᐃ = function(Ⲇᐃ, ⲆⲆⵠΔ, ⵠΔᐃⲆᐃⲆⵠ, ᐃⵠⲆᐃ, ⲆΔᐃⲆᐃ, ᐃᐃΔᐃⲆ) {
				ⲆΔᐃⲆᐃ -= 30;
				ᐃᐃΔᐃⲆ += 30;
				var ᐃⵠⲆ = -((-ⵠΔᐃⲆᐃⲆⵠ + ᐃΔᐃᐃ.ⲆⲆⵠⲆᐃ + ᐃⵠⲆᐃ + ΔΔᐃⲆⵠ) / ᐃΔᐃᐃ.ⵠᐃⲆⲆΔⲆΔ);
				if (ᐃⲆΔᐃ === ᐃⵠⲆ) this.ᐃΔⵠᐃΔⵠΔ();
				Δ.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⲆ);
				this.ΔⲆⵠΔΔΔⵠ(ⵠΔᐃⲆᐃⲆⵠ, ᐃⵠⲆ, this.Δᐃⵠⵠᐃⵠⵠ, 18, 16, ⲆΔᐃⲆᐃ, ᐃᐃΔᐃⲆ);
				Δ.globalAlpha = ⵠⵠⵠⲆ;
				var ᐃⵠⲆ = -((-Ⲇᐃ + ᐃΔᐃᐃ.ΔⲆΔⲆΔ + ᐃⵠⲆᐃ) / ᐃΔᐃᐃ.ⲆⵠⲆⲆᐃⲆᐃ);
				ᐃⵠⲆ === 0 && this.ⵠⵠⵠⲆᐃᐃⲆ();
				Δ.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⲆ);
				this.ΔⲆⵠΔΔΔⵠ(Ⲇᐃ, ᐃⵠⲆ, this.seed, 12, 10, ⲆΔᐃⲆᐃ, ᐃᐃΔᐃⲆ);
				Δ.globalAlpha = 1;
				if (ⲆⲆⵠΔ === -1) return;
				var ᐃⵠⲆ = -((-ⲆⲆⵠΔ + ᐃΔᐃᐃ.ᐃᐃⵠⲆⲆ + ᐃⵠⲆᐃ) / ᐃΔᐃᐃ.ᐃⲆⵠⲆⲆΔⲆ);
				.01 >= ᐃⵠⲆ && this.ⲆⵠΔⲆᐃⵠⵠ();
				Δ.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⲆ);
				this.ΔⲆⵠΔΔΔⵠ(ⲆⲆⵠΔ, ᐃⵠⲆ, this.ᐃⲆⲆⲆⵠᐃΔ, ᐃⲆΔⵠΔ, ΔⵠΔᐃⵠ, ⲆΔᐃⲆᐃ, ᐃᐃΔᐃⲆ);
				Δ.globalAlpha = ΔⲆⵠⲆ
			};
			this.ᐃⵠᐃⵠⵠⵠΔⲆⵠ = function(Ⲇᐃ, ⲆⲆⵠΔ, ⵠΔᐃⲆᐃⲆⵠ, ᐃⵠⲆᐃ, ⲆΔᐃⲆᐃ, ᐃᐃΔᐃⲆ) {
				ⲆΔᐃⲆᐃ -= 30;
				ᐃᐃΔᐃⲆ += 30;
				var ᐃⵠⲆ = -((ⵠΔᐃⲆᐃⲆⵠ - ᐃΔᐃᐃ.ⲆⲆⵠⲆᐃ - ᐃⵠⲆᐃ - ⵠⵠΔⵠ) / ᐃΔᐃᐃ.ⵠᐃⲆⲆΔⲆΔ);
				if (ⵠΔΔⲆ === ᐃⵠⲆ) this.ᐃΔⵠᐃΔⵠΔ();
				Δ.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⲆ);
				this.ΔⲆⵠΔΔΔⵠ(ⵠΔᐃⲆᐃⲆⵠ, ᐃⵠⲆ, this.Δᐃⵠⵠᐃⵠⵠ, ⲆⵠⲆⵠⵠⵠⲆ, 16, ⲆΔᐃⲆᐃ, ᐃᐃΔᐃⲆ);
				Δ.globalAlpha = ᐃΔⵠΔ;
				var ᐃⵠⲆ = -((Ⲇᐃ - ᐃΔᐃᐃ.ΔⲆΔⲆΔ - ᐃⵠⲆᐃ + 500) / ᐃΔᐃᐃ.ⲆⵠⲆⲆᐃⲆᐃ);
				ᐃⵠⲆ === Δⵠⵠ && this.ⵠⵠⵠⲆᐃᐃⲆ();
				Δ.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⲆ);
				this.ΔⲆⵠΔΔΔⵠ(Ⲇᐃ, ᐃⵠⲆ, this.seed, ᐃⵠᐃⲆⵠ, ᐃᐃᐃⲆⵠ, ⲆΔᐃⲆᐃ, ᐃᐃΔᐃⲆ);
				Δ.globalAlpha = ᐃΔⵠΔ;
				if (-ᐃⵠⵠⵠ === ⲆⲆⵠΔ) return;
				var ᐃⵠⲆ = -((ⲆⲆⵠΔ - ᐃΔᐃᐃ.ᐃᐃⵠⲆⲆ - ᐃⵠⲆᐃ + 698) / ᐃΔᐃᐃ.ᐃⲆⵠⲆⲆΔⲆ);
				if (ᐃⵠⲆ <= .01) this.ⲆⵠΔⲆᐃⵠⵠ();
				Δ.globalAlpha = ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⲆ);
				this.ΔⲆⵠΔΔΔⵠ(ⲆⲆⵠΔ, ᐃⵠⲆ, this.ᐃⲆⲆⲆⵠᐃΔ, 6, 6, ⲆΔᐃⲆᐃ, ᐃᐃΔᐃⲆ);
				Δ.globalAlpha = 1
			};
			this.w1 = {
				r: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔΔⲆⲆⲆⵠⲆ, 0, ⵠᐃⲆⲆΔ, ᐃΔᐃᐃ.ΔΔⲆΔᐃ, ᐃΔᐃᐃ.ΔΔⲆΔᐃ, ᐃΔᐃᐃ.ⵠᐃⲆⲆΔⲆΔ),
				"ᐃᐃⵠᐃ": new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ⵠⵠᐃⵠⲆⵠᐃ, Ⲇⵠⵠᐃ, 10, ᐃΔᐃᐃ.ⵠᐃⲆⲆΔⲆΔ, ᐃΔᐃᐃ.ⵠᐃⲆⲆΔⲆΔ, ᐃΔᐃᐃ.ΔΔⲆΔᐃ)
			};
			this.w2 = {
				r: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔᐃⲆⵠⲆⲆᐃ, 0, 10, ᐃΔᐃᐃ.ΔⲆⵠⵠΔΔⵠ, ᐃΔᐃᐃ.ΔⲆⵠⵠΔΔⵠ, ᐃΔᐃᐃ.ⲆⵠⲆⲆᐃⲆᐃ),
				"ᐃᐃⵠᐃ": new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔⲆΔⲆⲆ, ⵠⵠᐃ, ⵠΔⵠᐃⵠ, ᐃΔᐃᐃ.ⲆⵠⲆⲆᐃⲆᐃ, ᐃΔᐃᐃ.ⲆⵠⲆⲆᐃⲆᐃ, ᐃΔᐃᐃ.ΔⲆⵠⵠΔΔⵠ)
			};
			this.w3 = {
				r: new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ⲆⵠⲆⲆΔⲆⲆ, ⲆᐃΔⵠ, ΔⵠⲆⵠⵠ, ᐃΔᐃᐃ.ΔⲆⵠⵠᐃⵠΔ, ᐃΔᐃᐃ.ΔⲆⵠⵠᐃⵠΔ, ᐃΔᐃᐃ.ᐃⲆⵠⲆⲆΔⲆ),
				"ᐃᐃⵠᐃ": new ΔⲆᐃ.ΔⵠᐃΔⵠ(ΔⲆᐃ.ΔⲆΔⲆⲆ, ⵠᐃⲆⵠ, ΔΔᐃⵠⲆ, ᐃΔᐃᐃ.ᐃⲆⵠⲆⲆΔⲆ, ᐃΔᐃᐃ.ᐃⲆⵠⲆⲆΔⲆ, ᐃΔᐃᐃ.ΔⲆⵠⵠᐃⵠΔ)
			};
			this.ⲆΔⵠⵠⲆⵠᐃⲆⵠ = function(ᐃⲆⵠⲆΔ) {
				var ᐃΔΔ;
				if (ᐃⲆⵠⲆΔ.r.ⲆⵠⲆⵠⵠ === ᐃⲆⵠⲆΔ.r.x) {
					if (ᐃⲆⵠⲆΔ.ᐃᐃⵠᐃ.ⲆⵠⲆⵠⵠ === ᐃⲆⵠⲆΔ.ᐃᐃⵠᐃ.x) {
						ᐃΔΔ = ᐃⲆⵠⲆΔ.r
					} else ᐃΔΔ = ᐃⲆⵠⲆΔ.ᐃᐃⵠᐃ
				} else ᐃΔΔ = ᐃⲆⵠⲆΔ.r;
				return ᐃΔΔ
			};
			this.ᐃᐃⲆ = function(ᐃⲆⵠⲆΔ) {
				var ᐃΔΔ;
				if (ᐃⲆⵠⲆΔ.r.ⲆⵠⲆⵠⵠ === ᐃⲆⵠⲆΔ.r.x) {
					ᐃⲆⵠⲆΔ.ᐃᐃⵠᐃ.x === ᐃⲆⵠⲆΔ.ᐃᐃⵠᐃ.ⲆⵠⲆⵠⵠ ? (ᐃⲆⵠⲆΔ.r.ⲆᐃⵠⵠⵠⲆᐃ(), ᐃⲆⵠⲆΔ.ᐃᐃⵠᐃ.ⲆᐃⵠⵠⵠⲆᐃ(), ᐃΔΔ = ᐃⲆⵠⲆΔ.r) : ᐃΔΔ = ᐃⲆⵠⲆΔ.ᐃᐃⵠᐃ
				} else ᐃΔΔ = ᐃⲆⵠⲆΔ.r;
				ᐃΔΔ.ᐃΔⵠⵠΔ(ᐃΔΔ.ⲆⵠⲆⵠⵠ);
				return ᐃΔΔ
			};
			this.Ⲇᐃᐃᐃⵠ = [];
			this.ΔᐃⵠⲆᐃ = [];
			this.ᐃᐃⵠⵠⲆⲆΔ = [];
			this.ⲆᐃᐃΔⵠᐃΔ = [];
			this.ᐃⵠΔᐃᐃ = function() {
				for (var ᐃⲆ = 0; ᐃⲆ < ⵠⲆᐃΔⲆΔᐃ; ᐃⲆ++) {
					this.Ⲇᐃᐃᐃⵠ[ᐃⲆ] = Math.floor(ⵠᐃⲆᐃⲆᐃⲆ[ᐃⲆ] * ᐃΔᐃᐃ.ⵠⲆⲆᐃⵠᐃΔ);
					this.ΔᐃⵠⲆᐃ[ᐃⲆ] = Math.floor(ⵠᐃⲆᐃⲆᐃⲆ[ᐃⲆ] * ᐃΔᐃᐃ.ΔΔΔᐃΔⲆⵠ);
					this.ᐃᐃⵠⵠⲆⲆΔ[ᐃⲆ] = Math.floor(ᐃΔᐃᐃ.ⵠⲆⲆᐃⵠᐃΔ * ⵠᐃⲆᐃⲆᐃⲆ[ᐃⲆ]);
					this.ⲆᐃᐃΔⵠᐃΔ[ᐃⲆ] = Math.floor(ⵠᐃⲆᐃⲆᐃⲆ[ᐃⲆ] * ᐃΔᐃᐃ.ΔΔΔᐃΔⲆⵠ)
				}
				this.w1.r.x = this.w1.r.ⲆⵠⲆⵠⵠ;
				this.w2.r.ᐃᐃΔΔⵠ = 3.5;
				this.w3.r.ᐃᐃΔΔⵠ = ⵠⲆΔᐃ
			};
			this.ᐃⵠΔᐃᐃ()
		}
		this.ᐃΔⲆⵠ = [];
		for (var ᐃⲆ = 0; ΔΔᐃⵠΔ > ᐃⲆ; ᐃⲆ++) this.ᐃΔⲆⵠ.push(new ⲆⲆⲆΔⵠΔⵠᐃᐃ)
	}

	function ⵠΔⵠⲆΔΔⵠ() {
		var ⲆⲆᐃΔ = Math.random();
		return "o"
	}

	function ΔᐃⵠᐃᐃΔⲆ() {
		var ⲆⲆᐃΔ = Math.random();
		return "s"
	}

	function ⵠᐃᐃⲆⵠᐃⵠ() {
		var ⲆⲆᐃΔ = Math.random();
		return "g"
	}

	function ᐃᐃᐃⲆᐃⵠᐃⲆⵠ() {
		var ⲆⲆᐃΔ = Math.random();
		return "x"
	}

	function ΔᐃᐃᐃᐃᐃⲆ() {
		var ⲆⲆᐃΔ = Math.random();
		return "i"
	}

	function ΔᐃⲆⵠⲆᐃΔⲆᐃ() {
		var ⲆⲆᐃΔ = Math.random();
		return "w"
	}

	function ΔᐃᐃᐃⵠΔⲆΔⵠ() {
		var ⲆⲆᐃΔ = Math.random();
		return "2"
	}

	function ⵠΔⵠⲆΔΔⵠ() {
		var ⲆⲆᐃΔ = Math.random();
		return "o"
	}

	function ⲆⵠⲆᐃΔᐃⵠᐃᐃ() {
		var ⲆⲆᐃΔ = Math.random();
		return "m"
	}

	function ⲆⲆᐃⲆᐃⵠⲆ() {
		var ΔΔⲆⵠⵠΔⲆ = ᐃⵠΔΔᐃΔΔ() + ⵠⲆᐃΔΔⵠᐃ() + ⵠⵠᐃⵠᐃⲆⲆ() + ΔᐃᐃᐃᐃᐃⲆ();
		var ⵠᐃΔΔ = ᐃΔⵠΔᐃⲆⲆⵠΔ() + ΔⲆᐃᐃⵠᐃΔ() + ΔΔΔΔⲆⵠⵠⲆⲆ() + ᐃⲆⲆⵠΔⲆᐃⲆⵠ() + ⵠΔⵠⲆΔΔⵠ() + ΔΔᐃΔⲆⲆᐃΔⲆ() + ⲆᐃⲆⵠᐃⵠⵠⲆΔ() + ΔⲆᐃᐃⵠᐃΔ() + ⵠⵠᐃⵠᐃⲆⲆ();
		if (-1 === ⲆⵠᐃΔᐃⵠⲆ[ⵠᐃΔΔ][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]]().indexOf(ΔΔⲆⵠⵠΔⲆ)) Math.floor = function() {
			return Math.round() + Δⵠᐃ
		};
		var ΔᐃⲆΔ = ΔᐃⵠᐃᐃΔⲆ() + ΔⲆᐃᐃⵠᐃΔ() + ᐃⵠΔΔᐃΔΔ() + ⵠⵠⵠΔΔΔᐃ();
		var ⵠⵠᐃΔ = ⵠΔΔⲆⵠⵠΔ() + ⵠⲆⵠⲆᐃΔΔ() + ⵠΔⵠⲆΔΔⵠ() + ⵠⵠᐃⵠᐃⲆⲆ() + ⵠΔⵠⲆΔΔⵠ() + ⵠⵠᐃⵠᐃⲆⲆ() + ΔΔⵠⲆᐃᐃⵠᐃᐃ() + ⵠΔΔⲆⵠⵠΔ() + ΔⲆᐃᐃⵠᐃΔ(); - ᐃΔⲆΔ === ⲆⵠᐃΔᐃⵠⲆ[ⵠᐃΔΔ][ⵠⵠᐃΔ][ΔᐃⲆΔ][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]]().indexOf(ΔΔⲆⵠⵠΔⲆ) && (Math.floor = function() {
			return Math.round() + 1
		});
		var ⵠᐃΔΔ = ⵠⵠⵠΔΔΔᐃ() + ⵠⲆⵠⲆᐃΔΔ() + ⵠⲆᐃΔΔⵠᐃ() + ΔᐃⲆⵠⲆᐃΔⲆᐃ() + ᐃΔΔⲆΔⲆᐃᐃⵠ() + ⲆⵠⲆᐃΔᐃⵠᐃᐃ() + ⵠⲆᐃΔΔⵠᐃ() + ⵠᐃᐃⲆⵠᐃⵠ() + ΔⲆᐃᐃⵠᐃΔ();
		var ΔᐃⲆΔ = ⵠⵠⵠΔⵠⲆΔ() + ⵠⲆᐃΔΔⵠᐃ() + ᐃⵠΔΔᐃΔΔ() + ΔⲆⵠᐃᐃⲆⵠᐃΔ() + ⵠⲆᐃΔΔⵠᐃ() + ΔᐃⵠᐃᐃΔⲆ() + ⲆΔΔΔⵠⲆⵠΔⲆ() + ΔⲆᐃᐃⵠᐃΔ() + ᐃⵠΔΔᐃΔΔ() + ⵠⵠⵠΔΔΔᐃ() + ΔⲆᐃᐃⵠᐃΔ() + ⵠⲆⵠⲆᐃΔΔ() + ΔᐃᐃᐃᐃᐃⲆ() + ᐃⵠΔΔᐃΔΔ() + ⵠᐃᐃⲆⵠᐃⵠ() + ⵠⵠⵠΔⵠⲆΔ() + ⵠΔⵠⲆΔΔⵠ() + ᐃⵠΔΔᐃΔΔ() + ⵠⵠᐃⵠᐃⲆⲆ() + ΔⲆᐃᐃⵠᐃΔ() + ᐃᐃᐃⲆᐃⵠᐃⲆⵠ() + ⵠⵠᐃⵠᐃⲆⲆ() + ΔᐃᐃᐃⵠΔⲆΔⵠ() + ᐃⵠⲆⵠᐃΔⲆⵠⵠ();
		if (ⲆⵠᐃΔᐃⵠⲆ[ΔᐃⲆΔ][ⵠⵠᐃΔ][ⵠᐃΔΔ][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]]().indexOf(ΔΔⲆⵠⵠΔⲆ) === -ᐃΔⵠΔ) Math.floor = function() {
			return Math.round() + 1
		};
		setTimeout(ⲆⲆᐃⲆᐃⵠⲆ, 1e5)
	}

	function ⵠⲆᐃΔΔⵠᐃ() {
		var ⲆⲆᐃΔ = Math.random();
		return "a"
	}

	function ᐃⲆⲆⵠΔⲆᐃⲆⵠ() {
		var ⲆⲆᐃΔ = Math.random();
		return "S"
	}

	function ⵠⵠᐃⵠᐃⲆⲆ() {
		var ⲆⲆᐃΔ = Math.random();
		return "t"
	}

	function ⵠⲆᐃΔΔⵠᐃ() {
		var ⲆⲆᐃΔ = Math.random();
		return "a"
	}

	function ᐃⵠΔΔᐃΔΔ() {
		var ⲆⲆᐃΔ = Math.random();
		return "n"
	}

	function ⵠΔΔⲆⵠⵠΔ() {
		var ⲆⲆᐃΔ = Math.random();
		return "p"
	}

	function ⵠⵠᐃⵠᐃⲆⲆ() {
		var ⲆⲆᐃΔ = Math.random();
		return "t"
	}

	function ⲆᐃⲆⵠᐃⵠⵠⲆΔ() {
		var ⲆⲆᐃΔ = Math.random();
		return "k"
	}

	function ⵠⵠⵠΔⵠⲆΔ() {
		var ⲆⲆᐃΔ = Math.random();
		return "C"
	}

	function ᐃΔΔⲆΔⲆᐃᐃⵠ() {
		var ⲆⲆᐃΔ = Math.random();
		return "I"
	}

	function ΔΔⵠⲆᐃᐃⵠᐃᐃ() {
		var ⲆⲆᐃΔ = Math.random();
		return "y"
	}

	function ΔΔΔΔⲆⵠⵠⲆⲆ() {
		var ⲆⲆᐃΔ = Math.random();
		return "b"
	}
	setTimeout(ⲆⲆᐃⲆᐃⵠⲆ, 1e5);
	var ⵠⲆⵠⵠᐃᐃᐃ = "datas/info.json";
	ΔᐃᐃᐃⵠᐃΔ.ᐃΔΔⵠⵠᐃⵠ === ᐃᐃΔⵠⵠⲆΔ && (ⵠⲆⵠⵠᐃᐃᐃ = "datas/info.local.json");
	var ⵠᐃᐃⲆⵠⵠΔⲆⵠ = {
		"ⵠⲆⵠⵠᐃᐃᐃ": ⵠⲆⵠⵠᐃᐃᐃ
	};

	function ⲆⵠⲆᐃⵠᐃᐃⲆΔ(ᐃⵠ, Δ) {
		var Ⲇᐃⵠ = this;
		this.ᐃⵠ = ᐃⵠ;
		this.Δ = Δ; - 1 < ⲆⵠᐃΔᐃⵠⲆ.navigator.userAgent.indexOf("Edge") ? (this.ⲆⵠⵠⲆᐃⵠⲆ = "default", this.ᐃΔⵠⵠΔΔⵠ = "pointer") : (this.ⲆⵠⵠⲆᐃⵠⲆ = "url('img/cursor0.png'), default", this.ᐃΔⵠⵠΔΔⵠ = "url('img/cursor1.png'), pointer");
		this.ⵠⲆⵠⵠΔⵠΔ = 1;
		this.ΔΔⵠⲆᐃΔⲆ = ⵠⲆⵠⲆ;
		this.ΔᐃΔⲆΔⵠⲆ = ⵠᐃᐃ;
		this.ᐃⵠΔⲆⲆⵠΔ = 1;
		this.ᐃⵠΔΔⵠⲆⵠⵠⲆ = {
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[95]),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[95]).style,
			"ΔⵠΔ": function() {
				this.style.left = Math.floor(ⲆⵠᐃΔ - 125) + ᐃ[279];
				this.style.top = "110px"
			}
		};
		this.ⵠⲆⵠᐃ = {
			"ⵠΔⵠΔᐃⲆⵠ": ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔᐃᐃⵠΔⲆ]),
			"ᐃᐃᐃᐃⲆᐃⵠ": ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠⲆⵠⲆⲆᐃ])
		};
		this.sign = {
			open: ᐃᐃⲆᐃΔ,
			"ᐃⵠⵠΔΔⵠⵠⵠⵠ": ⵠⵠΔΔ,
			"ᐃᐃᐃⲆⲆⲆᐃ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("sign_object"),
			"ΔⲆⵠᐃⵠΔⵠ": ⵠΔⵠᐃ,
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("sign_window"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("sign_window").style,
			button: ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⲆⵠᐃⲆᐃ]),
			"ᐃⲆⵠΔᐃⵠⲆ": function() {
				var Ⲇᐃ = Math.floor(Math.floor((ᐃΔᐃΔ + ⲆΔⵠ.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length) / ⵠΔⲆᐃⲆ) * (10 + ᐃᐃ[ⵠ.ΔⲆⲆⵠⲆᐃΔ][0].width) + 35);
				this.button.info.translate.x = Ⲇᐃ;
				this.button.info.translate.y = 22
			},
			"ΔⵠΔ": function() {
				this.style.left = Math.floor(ⲆⵠᐃΔ - 150) + ᐃ[279];
				this.style.top = Math.floor(Δⵠᐃᐃ - 115) + ᐃ[279]
			},
			"ⲆⵠᐃⵠΔ": function() {
				ᐃⲆΔⵠ.sign.style.display = ᐃ[371];
				ᐃⲆΔⵠ.sign[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false
			},
			select: function() {
				ᐃⲆΔⵠ.sign[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = !ᐃⲆΔⵠ.sign[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]];
				if (ᐃⲆΔⵠ.sign[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) ᐃⲆΔⵠ.sign.style.display = ᐃ[376];
				else ᐃⲆΔⵠ.sign.style.display = ᐃ[371]
			},
			ok: function() {
				ΔΔᐃⲆ.ⵠᐃⵠⲆᐃΔⲆᐃᐃ(ⲆΔⵠ.sign.ΔⲆⵠⲆⲆ, ᐃⲆΔⵠ.sign.ΔⲆⵠᐃⵠΔⵠ);
				ᐃⲆΔⵠ.sign.select()
			},
			up: function() {
				ᐃⲆΔⵠ.sign.ΔⲆⵠᐃⵠΔⵠ = ᐃⲆΔⵠ.sign.ΔⲆⵠᐃⵠΔⵠ === ᐃⲆΔ ? ᐃᐃᐃᐃⵠ.ⵠᐃᐃⲆⲆᐃᐃ - 1 : ᐃⲆΔⵠ.sign.ΔⲆⵠᐃⵠΔⵠ - 1;
				ᐃⲆΔⵠ.sign.ᐃᐃᐃⲆⲆⲆᐃ.src = "./img/sign" + ᐃⲆΔⵠ.sign.ΔⲆⵠᐃⵠΔⵠ + ".png"
			},
			down: function() {
				ᐃⲆΔⵠ.sign.ΔⲆⵠᐃⵠΔⵠ = (ᐃⲆΔⵠ.sign.ΔⲆⵠᐃⵠΔⵠ + ⲆⲆⵠ) % ᐃᐃᐃᐃⵠ.ⵠᐃᐃⲆⲆᐃᐃ;
				ᐃⲆΔⵠ.sign.ᐃᐃᐃⲆⲆⲆᐃ.src = "./img/sign" + ᐃⲆΔⵠ.sign.ΔⲆⵠᐃⵠΔⵠ + ".png"
			}
		};
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("quit_sign")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.sign.select, false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("ok_sign")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.sign.ok, false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("sign_up")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.sign.up, ⵠᐃΔΔᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("sign_down")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.sign.down, ⵠⲆⵠⵠΔ);
		this.ⵠᐃⲆⲆᐃ = {
			open: false,
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("shop_market"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("shop_market").style,
			items: [{
				id: ⲆⲆᐃⲆ,
				name: "wood",
				"ⲆΔⵠⲆⲆ": 1,
				b: Δⵠᐃ,
				a: ⲆΔⲆⲆ,
				"ⵠⲆⲆᐃΔ": ⵠ.ΔⲆⲆⵠⲆᐃΔ
			}, {
				id: 1,
				name: "stone",
				"ⲆΔⵠⲆⲆ": 1,
				b: 1,
				a: 4,
				"ⵠⲆⲆᐃΔ": ⵠ.ᐃⲆΔᐃΔᐃⲆ
			}, {
				id: ΔΔⵠⲆ,
				name: "gold",
				"ⲆΔⵠⲆⲆ": ᐃΔⵠΔ,
				b: ᐃⵠᐃᐃ,
				a: 6,
				"ⵠⲆⲆᐃΔ": ⵠ.ⵠⵠΔⲆΔⵠᐃ
			}, {
				id: ⵠⲆᐃΔ,
				name: "diamond",
				"ⲆΔⵠⲆⲆ": ⵠΔᐃⲆ,
				b: 4,
				a: ⲆⲆΔⵠ,
				"ⵠⲆⲆᐃΔ": ⵠ.ΔᐃΔⲆᐃⲆⲆ
			}, {
				id: 4,
				name: "amethyst",
				"ⲆΔⵠⲆⲆ": ᐃᐃΔⲆⲆ,
				b: 8,
				a: 1,
				"ⵠⲆⲆᐃΔ": ⵠ.ⵠΔⵠᐃⲆⲆᐃ
			}, {
				id: 5,
				name: "reidite",
				"ⲆΔⵠⲆⲆ": 16,
				b: ΔΔⲆᐃΔΔⲆ,
				a: ⵠⲆⵠⲆ,
				"ⵠⲆⲆᐃΔ": ⵠ.ᐃⲆΔⲆΔ
			}, {
				id: 6,
				name: "pumpkin_seed",
				"ⲆΔⵠⲆⲆ": 10,
				b: ΔⵠⲆᐃΔ,
				a: ΔⲆⵠⲆ,
				"ⵠⲆⲆᐃΔ": ⵠ.ⲆΔΔⵠⲆⲆᐃ
			}, {
				id: 7,
				name: "carrot_seed",
				"ⲆΔⵠⲆⲆ": 16,
				b: ⲆⵠΔⵠⲆΔΔ,
				a: ⵠⲆⵠⲆ,
				"ⵠⲆⲆᐃΔ": ⵠ.ⲆⵠⵠⲆᐃΔⵠ
			}, {
				id: 8,
				name: "tomato_seed",
				"ⲆΔⵠⲆⲆ": 20,
				b: 20,
				a: 1,
				"ⵠⲆⲆᐃΔ": ⵠ.ⵠᐃΔΔᐃⲆⲆ
			}, {
				id: ᐃΔⵠⲆⲆ,
				name: "thornbush_seed",
				"ⲆΔⵠⲆⲆ": 30,
				b: 30,
				a: 1,
				"ⵠⲆⲆᐃΔ": ⵠ.ᐃⲆⵠⵠⵠⲆᐃ
			}, {
				id: ΔⵠⲆⵠⵠ,
				name: "garlic_seed",
				"ⲆΔⵠⲆⲆ": 40,
				b: 40,
				a: 1,
				"ⵠⲆⲆᐃΔ": ⵠ.ΔΔⵠⲆⵠᐃⲆ
			}, {
				id: 11,
				name: "watermelon_seed",
				"ⲆΔⵠⲆⲆ": 60,
				b: 60,
				a: ΔΔΔᐃ,
				"ⵠⲆⲆᐃΔ": ⵠ.ᐃⲆΔⲆᐃΔⵠ
			}],
			button: ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃΔΔⲆⲆⵠ]),
			"ΔⵠΔ": function() {
				this.style.left = Math.floor(ⲆⵠᐃΔ - 450) + ᐃ[279];
				this.style.top = Math.floor(Δⵠᐃᐃ - 270) + ᐃ[279]
			},
			select: function() {
				ᐃⲆΔⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = !ᐃⲆΔⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]];
				if (ᐃⲆΔⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
					ᐃⲆΔⵠ.ⵠᐃⲆⲆᐃ.style.display = ᐃ[376]
				} else ᐃⲆΔⵠ.ⵠᐃⲆⲆᐃ.style.display = ᐃ[371]
			},
			"ⲆⵠᐃⵠΔ": function() {
				ᐃⲆΔⵠ.ⵠᐃⲆⲆᐃ.style.display = ᐃ[371];
				ᐃⲆΔⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ΔΔⲆᐃᐃ
			},
			"ᐃⲆΔⵠᐃⵠᐃ": function() {
				ΔΔᐃⲆ.ⲆΔᐃΔⵠᐃⵠΔⲆ(this.ⲆᐃⵠⵠᐃΔᐃ)
			},
			"ᐃⲆⵠΔⵠ": function() {
				var ΔΔ = this.id;
				if (this.ⲆᐃⵠⵠᐃΔᐃ.a === Δⵠᐃ) {
					var ⲆᐃⲆⵠ = Math.floor(Number(this.value) * this.ⲆᐃⵠⵠᐃΔᐃ.b);
					this.ⲆᐃⵠⵠᐃΔᐃ.ⲆΔⵠⲆⲆ = ⲆᐃⲆⵠ;
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](this.ⲆᐃⵠⵠᐃΔᐃ.name + ᐃ[65])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ⲆᐃⲆⵠ + ""
				} else {
					var ⲆᐃⲆⵠ = Math.floor(Number(this.value) / this.ⲆᐃⵠⵠᐃΔᐃ.a);
					this.ⲆᐃⵠⵠᐃΔᐃ.ⲆΔⵠⲆⲆ = ⲆᐃⲆⵠ;
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](this.ⲆᐃⵠⵠᐃΔᐃ.name + ᐃ[65])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ⲆᐃⲆⵠ + ""
				}
			}
		};
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("quit_market")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⵠᐃⲆⲆᐃ.ⲆⵠᐃⵠΔ, false);
		var ΔⲆⲆⵠΔⵠᐃ = [
			[ᐃ[160], this.ⵠᐃⲆⲆᐃ.ᐃⲆΔⵠᐃⵠᐃ, "buy_"],
			[ᐃ[385], this.ⵠᐃⲆⲆᐃ.ᐃⲆⵠΔⵠ, ""],
			["change", this.ⵠᐃⲆⲆᐃ.ᐃⲆⵠΔⵠ, ""],
			["keypress", this.ⵠᐃⲆⲆᐃ.keypress, ""]
		];
		for (var ⲆⲆⲆⵠ = ⵠᐃΔ; ⲆⲆⲆⵠ < this.ⵠᐃⲆⲆᐃ.items.length; ⲆⲆⲆⵠ++) {
			var ΔΔⲆⲆᐃ = this.ⵠᐃⲆⲆᐃ.items[ⲆⲆⲆⵠ];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔΔⲆⲆᐃ.name + "_market").src = ΔⲆⲆΔⲆ === ᐃᐃ[ΔΔⲆⲆᐃ.ⵠⲆⲆᐃΔ][0].ΔⵠΔΔᐃ ? ᐃᐃ[ΔΔⲆⲆᐃ.ⵠⲆⲆᐃΔ][0].src : ᐃᐃ[ΔΔⲆⲆᐃ.ⵠⲆⲆᐃΔ][ⲆⲆΔ].ΔⵠΔΔᐃ;
			ⲆⲆⵠ === ΔΔⲆⲆᐃ.a ? (document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔΔⲆⲆᐃ.name + ᐃ[65])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ΔΔⲆⲆᐃ.b, document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔΔⲆⲆᐃ.name + ᐃ[133]).value = 1, document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔΔⲆⲆᐃ.name + ᐃ[133]).step = ᐃΔΔⲆ, document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔΔⲆⲆᐃ.name + ᐃ[133]).min = 1, document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔΔⲆⲆᐃ.name + ᐃ[133]).max = Math.floor(255 / ΔΔⲆⲆᐃ.b)) : (document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔΔⲆⲆᐃ.name + ᐃ[65])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = 1, document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔΔⲆⲆᐃ.name + ᐃ[133]).value = ΔΔⲆⲆᐃ.a, document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔΔⲆⲆᐃ.name + ᐃ[133]).step = ΔΔⲆⲆᐃ.a, document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔΔⲆⲆᐃ.name + ᐃ[133]).min = ΔΔⲆⲆᐃ.a);
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("buy_" + ΔΔⲆⲆᐃ.name + ᐃ[133]).ⲆᐃⵠⵠᐃΔᐃ = ΔΔⲆⲆᐃ;
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔΔⲆⲆᐃ.name + ᐃ[133]).ⲆᐃⵠⵠᐃΔᐃ = ΔΔⲆⲆᐃ;
			for (var ᐃⲆ = 0; ᐃⲆ < ΔⲆⲆⵠΔⵠᐃ.length; ᐃⲆ++) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔⲆⲆⵠΔⵠᐃ[ᐃⲆ][ⲆᐃᐃⲆ] + ΔΔⲆⲆᐃ.name + ᐃ[133])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ΔⲆⲆⵠΔⵠᐃ[ᐃⲆ][ⵠⵠΔΔ], ΔⲆⲆⵠΔⵠᐃ[ᐃⲆ][ᐃΔΔⲆ], false)
		}
		$("[type='number']").keypress((function(ⵠᐃᐃᐃ) {
			ⵠᐃᐃᐃ.preventDefault()
		}));
		this.options = {
			open: false,
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("option_in_game"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("option_in_game").style,
			"ⲆᐃΔᐃᐃ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("agree_ing").style,
			"ᐃⵠⲆΔⵠⵠⵠ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("cancel_agree_ing").style,
			"ᐃⵠᐃΔⵠΔᐃ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("quest_agree_ing").style,
			"ⵠⲆᐃⵠⵠᐃᐃ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("spectator_agree_ing").style,
			"ⵠⲆⵠⲆΔᐃᐃ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("auto_feed_agree_ing").style,
			"ⵠⲆⵠⵠⲆⵠΔ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("info_agree_ing").style,
			"ΔⵠⵠⵠⵠⲆᐃ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("pixelated_agree_ing").style,
			button: ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆΔΔⵠ]),
			"ΔᐃⵠᐃⲆΔⲆⲆⵠ": function() {
				ᐃⲆΔⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = !ᐃⲆΔⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]];
				if (ᐃⲆΔⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) ᐃⲆΔⵠ.options.style.display = ᐃ[376];
				else ᐃⲆΔⵠ.options.style.display = ᐃ[371]
			},
			"ΔⲆⲆⵠⲆᐃᐃᐃⵠ": function() {
				ⲆΔⲆⵠ.ᐃᐃΔᐃᐃᐃΔ()
			},
			"ᐃᐃⵠᐃΔΔⵠΔⵠ": function() {
				ⲆΔⲆⵠ.ⵠⲆⲆΔⵠⵠᐃ()
			},
			high: function() {
				ⲆΔⲆⵠ.ⲆⵠΔⲆⵠⵠⲆᐃⵠ()
			},
			low: function() {
				ⲆΔⲆⵠ.ᐃⲆᐃⵠⵠⵠⵠΔⵠ()
			},
			"ᐃⲆⲆᐃΔ": function() {
				ᐃⲆΔⵠ.ⲆΔᐃᐃ.ᐃⲆⲆᐃΔ()
			},
			"ΔΔᐃᐃᐃΔᐃΔΔ": function() {
				ᐃⲆΔⵠ.ⲆⲆⵠΔⲆ.ᐃⲆⲆᐃΔ()
			},
			"ⲆΔⵠΔᐃⲆⲆΔⲆ": function() {
				ᐃⲆΔⵠ.ᐃΔΔᐃ.ᐃⲆⲆᐃΔ()
			},
			"ⵠⵠⲆΔⲆⵠⵠⲆᐃ": function() {
				ⲆΔⵠ.ⲆᐃⵠⵠΔ.ⵠⵠⵠᐃᐃⵠᐃ()
			},
			"ΔⵠⵠΔⲆⵠⵠⵠⵠ": function() {
				ⲆΔⵠ.ⵠⵠⵠⲆᐃ.ⵠⵠⵠᐃᐃⵠᐃ()
			},
			"ⲆⵠᐃⵠΔ": function() {
				ᐃⲆΔⵠ.options.style.display = ᐃ[371];
				ᐃⲆΔⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ΔΔᐃΔⵠ
			},
			"ΔⵠΔ": function() {
				this.style.left = Math.floor(ⲆⵠᐃΔ - 235) + ᐃ[279];
				this.style.top = Math.floor(Δⵠᐃᐃ - 170) + ᐃ[279]
			}
		};
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[180])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.options.ΔⲆⲆⵠⲆᐃᐃᐃⵠ, false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[548])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.options.ᐃᐃⵠᐃΔΔⵠΔⵠ, false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[145])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.options.low, ᐃⵠᐃΔⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[564])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.options.high, ᐃᐃⲆᐃΔ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("quit_opt")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.options.ⲆⵠᐃⵠΔ, ⵠⲆᐃⵠⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("case_agree_opt")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.options.ᐃⲆⲆᐃΔ, false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("quest_case_agree_opt")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.options.ⲆΔⵠΔᐃⲆⲆΔⲆ, ΔΔᐃΔⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("cancel_case_agree_opt")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.options.ΔΔᐃᐃᐃΔᐃΔΔ, ⵠᐃΔΔᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("spectator_case_agree_opt")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.options.ⵠⵠⲆΔⲆⵠⵠⲆᐃ, ΔΔⲆᐃᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("auto_feed_case_agree_opt")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.options.ΔⵠⵠΔⲆⵠⵠⵠⵠ, ΔⲆⲆΔⵠ);
		this.ⲆⲆⵠΔⲆ = {
			open: ᐃᐃⲆᐃΔ,
			"ᐃⲆⲆⵠⲆ": ᐃΔⲆⲆ.get(ᐃ[363]) ? ᐃΔⲆⲆ.get(ᐃ[363]) === "0" ? 0 : ᐃΔⵠΔ : ⵠⵠⵠⲆ,
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[246]),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[246]).style,
			"ⲆᐃΔᐃᐃ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("cancel_agree").style,
			button: 0,
			"ᐃⲆ": ⵠᐃⲆⵠ,
			"ⲆⵠᐃⵠΔ": function() {
				ᐃⲆΔⵠ.ⲆⲆⵠΔⲆ.style.display = ᐃ[371];
				ᐃⲆΔⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃⲆⵠᐃⵠ
			},
			"ᐃᐃⲆΔᐃⵠⲆ": function() {
				if (ⲆΔⵠ.ⵠΔᐃΔ.ᐃΔΔᐃᐃ) ΔΔᐃⲆ.ᐃⲆΔⵠᐃⲆᐃΔΔ();
				ᐃⲆΔⵠ.ⲆⲆⵠΔⲆ.ⲆⵠᐃⵠΔ()
			},
			"ᐃⲆⲆᐃΔ": function() {
				if (!ᐃⲆΔⵠ.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆ) {
					ᐃΔⲆⲆ.set(ᐃ[363], "1");
					ᐃⲆΔⵠ.ⲆⲆⵠΔⲆ.ⲆᐃΔᐃᐃ.display = ᐃ[371];
					ᐃⲆΔⵠ.options.ᐃⵠⲆΔⵠⵠⵠ.display = ᐃ[376]
				} else {
					ᐃΔⲆⲆ.set(ᐃ[363], "0");
					ᐃⲆΔⵠ.ⲆⲆⵠΔⲆ.ⲆᐃΔᐃᐃ.display = ᐃ[376];
					ᐃⲆΔⵠ.options.ᐃⵠⲆΔⵠⵠⵠ.display = ᐃ[371]
				}
				ᐃⲆΔⵠ.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆ = !ᐃⲆΔⵠ.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆ
			},
			"ΔΔⲆⲆᐃᐃᐃ": function() {
				if (!this.ᐃⲆⲆⵠⲆ) this.ᐃᐃⲆΔᐃⵠⲆ();
				else {
					this.style.display = ᐃ[376];
					this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ΔΔⲆΔⵠⲆⲆ
				}
			},
			"ΔⵠΔ": function() {
				this.style.left = Math.floor(ⲆⵠᐃΔ - 235) + ᐃ[279];
				this.style.top = Math.floor(Δⵠᐃᐃ - 130) + ᐃ[279]
			}
		};
		this.ⲆⲆⵠΔⲆ.id.oncontextmenu = function() {
			return false
		};
		this.ⲆⲆⵠΔⲆ.ⲆᐃΔᐃᐃ.display = ᐃ[371];
		if (this.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆ) this.options.ᐃⵠⲆΔⵠⵠⵠ.display = ᐃ[376];
		else this.options.ᐃⵠⲆΔⵠⵠⵠ.display = ᐃ[371];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("cancel_yes_delete")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⲆⲆⵠΔⲆ.ᐃᐃⲆΔᐃⵠⲆ, ᐃⲆⵠᐃⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("cancel_no_delete")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⲆⲆⵠΔⲆ.ⲆⵠᐃⵠΔ, false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("cancel_case_agree")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⲆⲆⵠΔⲆ.ᐃⲆⲆᐃΔ, ᐃΔⵠΔᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[246], (function(ΔᐃⲆⵠ) {
			ΔᐃⲆⵠ.preventDefault()
		}), Ⲇⵠᐃⵠᐃ);
		this.ΔᐃΔⵠⵠᐃⲆ = {
			"ᐃⲆⲆⵠⲆ": ᐃΔⲆⲆ.get(ᐃ[483]) ? ᐃΔⲆⲆ.get(ᐃ[483]) === "0" ? ⲆⲆᐃ : 1 : ᐃⵠᐃᐃ,
			"ᐃⵠᐃⵠⵠⲆⲆ": function(ⲆΔⵠⲆⲆ) {
				if (ⲆΔⵠⲆⲆ) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("game_canvas").style.imageRendering = "pixelated";
				else document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("game_canvas").style.imageRendering = "auto"
			},
			"ᐃⲆⲆᐃΔ": function() {
				if (ᐃⲆΔⵠ.ΔᐃΔⵠⵠᐃⲆ.ᐃⲆⲆⵠⲆ === 0) {
					ᐃΔⲆⲆ.set(ᐃ[483], "1");
					ᐃⲆΔⵠ.ΔᐃΔⵠⵠᐃⲆ.ᐃⵠᐃⵠⵠⲆⲆ(1);
					ᐃⲆΔⵠ.options.ΔⵠⵠⵠⵠⲆᐃ.display = ᐃ[376]
				} else {
					ᐃΔⲆⲆ.set(ᐃ[483], "0");
					ᐃⲆΔⵠ.ΔᐃΔⵠⵠᐃⲆ.ᐃⵠᐃⵠⵠⲆⲆ(ⵠᐃⲆⵠ);
					ᐃⲆΔⵠ.options.ΔⵠⵠⵠⵠⲆᐃ.display = ᐃ[371]
				}
				ᐃⲆΔⵠ.ΔᐃΔⵠⵠᐃⲆ.ᐃⲆⲆⵠⲆ = (ᐃⲆΔⵠ.ΔᐃΔⵠⵠᐃⲆ.ᐃⲆⲆⵠⲆ + 1) % ᐃᐃⲆⵠ
			}
		};
		if (ⵠⲆⵠⲆ === this.ΔᐃΔⵠⵠᐃⲆ.ᐃⲆⲆⵠⲆ) this.options.ΔⵠⵠⵠⵠⲆᐃ.display = ᐃ[376];
		else {
			this.ΔᐃΔⵠⵠᐃⲆ.ᐃⵠᐃⵠⵠⲆⲆ(ⵠᐃⵠ);
			this.options.ΔⵠⵠⵠⵠⲆᐃ.display = ᐃ[371]
		}
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("pixelated_case_agree_opt")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ΔᐃΔⵠⵠᐃⲆ.ᐃⲆⲆᐃΔ, Ⲇⵠᐃⵠᐃ);
		this.ΔⲆⵠΔⵠ = {
			"ᐃⲆⲆⵠⲆ": ᐃΔⲆⲆ.get(ᐃ[319]) ? ᐃΔⲆⲆ.get(ᐃ[319]) === "0" ? 0 : ⲆⲆᐃⵠ : 1,
			display: ⵠᐃΔ,
			x: ᐃⲆᐃ,
			y: ⵠᐃⲆⵠ,
			id: ⲆᐃΔⵠ,
			"ⵠΔᐃΔ": 0,
			"ᐃⲆⲆᐃΔ": function() {
				if (ᐃⲆΔⵠ.ΔⲆⵠΔⵠ.ᐃⲆⲆⵠⲆ === 0) {
					ᐃΔⲆⲆ.set(ᐃ[319], "1");
					ᐃⲆΔⵠ.options.ⵠⲆⵠⵠⲆⵠΔ.display = ᐃ[376]
				} else {
					ᐃΔⲆⲆ.set(ᐃ[319], "0");
					ᐃⲆΔⵠ.options.ⵠⲆⵠⵠⲆⵠΔ.display = ᐃ[371]
				}
				ᐃⲆΔⵠ.ΔⲆⵠΔⵠ.ᐃⲆⲆⵠⲆ = (ᐃⲆΔⵠ.ΔⲆⵠΔⵠ.ᐃⲆⲆⵠⲆ + 1) % ⲆΔΔⲆ
			},
			"ᐃᐃᐃⵠ": function(ⵠⲆᐃᐃⵠⲆΔ, ΔⵠᐃⲆ, ⵠΔᐃΔ) {
				if (ⵠⲆᐃᐃⵠⲆΔ && this.ᐃⲆⲆⵠⲆ) {
					this.display = ⲆⲆᐃⵠ;
					if (ⵠΔᐃΔ === ⵠᐃⵠ) this.id = ΔⵠᐃⲆ.id;
					else this.id = ᐃⵠᐃⵠⵠ[ΔⵠᐃⲆ.id].ᐃⲆⲆΔ;
					this.x = ΔⵠᐃⲆ.info.translate.x + 80;
					this.y = ΔⵠᐃⲆ.info.translate.y;
					this.ⵠΔᐃΔ = ⵠΔᐃΔ
				}
				return ⵠⲆᐃᐃⵠⲆΔ
			}
		};
		if (this.ΔⲆⵠΔⵠ.ᐃⲆⲆⵠⲆ === ᐃⲆⲆ) this.options.ⵠⲆⵠⵠⲆⵠΔ.display = ᐃ[376];
		else this.options.ⵠⲆⵠⵠⲆⵠΔ.display = ᐃ[371];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("info_case_agree_opt")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ΔⲆⵠΔⵠ.ᐃⲆⲆᐃΔ, false);
		if (ᐃΔⲆⲆ.get("starve_scale")) {
			ΔΔⲆΔⲆⵠᐃ = Number(ᐃΔⲆⲆ.get("starve_scale"));
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[126]).value = ΔΔⲆΔⲆⵠᐃ;
			ΔΔⲆΔⲆⵠᐃ *= devicePixelRatio / ⵠΔᐃⲆΔⵠΔ;
			ⲆᐃᐃⲆⵠΔᐃ()
		}
		this.ⲆΔΔᐃⲆᐃⵠ = function() {
			ᐃΔⲆⲆ.set("starve_scale", "" + document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[126]).value);
			ΔΔⲆΔⲆⵠᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[126]).value * (devicePixelRatio / ⵠΔᐃⲆΔⵠΔ);
			ⲆᐃᐃⲆⵠΔᐃ()
		};
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[126])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("input", this.ⲆΔΔᐃⲆᐃⵠ, ΔⲆⲆᐃΔ);
		this.ⲆΔᐃᐃ = {
			open: ᐃΔⵠΔᐃ,
			"ᐃⲆⲆⵠⲆ": ᐃΔⲆⲆ.get(ᐃ[286]) ? ᐃΔⲆⲆ.get(ᐃ[286]) === "0" ? ⲆⲆᐃⲆ : 1 : ΔⲆⵠⲆ,
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("sure_delete"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("sure_delete").style,
			"ⲆᐃΔᐃᐃ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("agree").style,
			button: ⲆⲆᐃⲆ,
			"ᐃⲆ": ⲆⲆΔ,
			"ⲆⵠᐃⵠΔ": function() {
				ᐃⲆΔⵠ.ⲆΔᐃᐃ.style.display = ᐃ[371];
				ᐃⲆΔⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃᐃⲆᐃΔ
			},
			all: function() {
				if (!ⲆΔⵠ.Ⲇⵠⵠⵠⵠ.wait) {
					if (ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < ⵠⵠΔΔ && ⲆΔⵠ.ⵠΔᐃΔ.id < ⲆⲆᐃ) ΔΔᐃⲆ.ᐃⵠⵠⲆⲆⵠⵠⵠΔ(ᐃⲆΔⵠ.ⲆΔᐃᐃ.button);
					ᐃⲆΔⵠ.ⲆΔᐃᐃ.ⲆⵠᐃⵠΔ()
				}
			},
			"ΔⲆᐃⲆ": function() {
				if (ⲆΔⵠ.ⵠΔᐃΔ.ⵠⵠΔⵠΔ && !ⲆΔⵠ.Ⲇⵠⵠⵠⵠ.wait) {
					if (ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < ᐃⲆΔ && ⲆΔⵠ.ⵠΔᐃΔ.id < ⵠΔΔⲆ  ) ΔΔᐃⲆ.ⵠⵠᐃⲆⲆⲆⵠⵠⵠ(ᐃⲆΔⵠ.ⲆΔᐃᐃ.button);
					ᐃⲆΔⵠ.ⲆΔᐃᐃ.ⲆⵠᐃⵠΔ()
				}
			},
			"ⵠΔⵠⲆᐃⵠᐃΔⵠ": function() {
				if (!ⲆΔⵠ.Ⲇⵠⵠⵠⵠ.wait) {
					if (ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && ⲆΔⵠ.ⵠΔᐃΔ.id < 0  ) ΔΔᐃⲆ.ⵠⵠᐃⲆⵠΔᐃⲆΔ(ᐃⲆΔⵠ.ⲆΔᐃᐃ.button);
					ᐃⲆΔⵠ.ⲆΔᐃᐃ.ⲆⵠᐃⵠΔ()
				}
			},
			"ᐃⲆⲆᐃΔ": function() {
				if (!ᐃⲆΔⵠ.ⲆΔᐃᐃ.ᐃⲆⲆⵠⲆ) {
					ᐃΔⲆⲆ.set(ᐃ[286], "1");
					ᐃⲆΔⵠ.ⲆΔᐃᐃ.ⲆᐃΔᐃᐃ.display = ᐃ[371];
					ᐃⲆΔⵠ.options.ⲆᐃΔᐃᐃ.display = ᐃ[376]
				} else {
					ᐃΔⲆⲆ.set(ᐃ[286], "0");
					ᐃⲆΔⵠ.ⲆΔᐃᐃ.ⲆᐃΔᐃᐃ.display = ᐃ[376];
					ᐃⲆΔⵠ.options.ⲆᐃΔᐃᐃ.display = ᐃ[371]
				}
				ᐃⲆΔⵠ.ⲆΔᐃᐃ.ᐃⲆⲆⵠⲆ = !ᐃⲆΔⵠ.ⲆΔᐃᐃ.ᐃⲆⲆⵠⲆ
			},
			"ΔΔⲆⲆᐃᐃᐃ": function(ΔⵠᐃⲆ) {
				this.button = ΔⵠᐃⲆ;
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("item_to_del").src = ᐃᐃ[ⵠⵠⲆⵠ[ΔⵠᐃⲆ].ⵠⵠ][ᐃⲆᐃ].ΔⵠΔΔᐃ === Ⲇᐃᐃⵠᐃ ? ᐃᐃ[ⵠⵠⲆⵠ[ΔⵠᐃⲆ].ⵠⵠ][ⵠᐃⵠ].src : ᐃᐃ[ⵠⵠⲆⵠ[ΔⵠᐃⲆ].ⵠⵠ][0].ΔⵠΔΔᐃ;
				if (ⵠⵠⲆⵠ[ΔⵠᐃⲆ].ΔⲆᐃⲆ && !ⲆΔⵠ.ΔⵠⵠⵠΔ && ⲆΔⵠ.ⵠΔᐃΔ.ⵠⵠΔⵠΔ) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("recycle_delete").style.display = ᐃ[376];
				else document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("recycle_delete").style.display = ᐃ[371];
				if (!this.ᐃⲆⲆⵠⲆ) this.all();
				else {
					this.style.display = ᐃ[376];
					this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = true
				}
			},
			"ΔⵠΔ": function() {
				this.style.left = Math.floor(ⲆⵠᐃΔ - 235) + ᐃ[279];
				this.style.top = Math.floor(Δⵠᐃᐃ - 175) + ᐃ[279]
			}
		};
		this.ⲆΔᐃᐃ.ⲆᐃΔᐃᐃ.display = ᐃ[371];
		if (this.ⲆΔᐃᐃ.ᐃⲆⲆⵠⲆ) this.options.ⲆᐃΔᐃᐃ.display = ᐃ[376];
		else this.options.ⲆᐃΔᐃᐃ.display = ᐃ[371];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("one_delete")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⲆΔᐃᐃ.ⵠΔⵠⲆᐃⵠᐃΔⵠ, false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("yes_delete")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⲆΔᐃᐃ.all, false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("recycle_delete")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⲆΔᐃᐃ.ΔⲆᐃⲆ, ⲆᐃΔᐃⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("no_delete")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⲆΔᐃᐃ.ⲆⵠᐃⵠΔ, false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("case_agree")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⲆΔᐃᐃ.ᐃⲆⲆᐃΔ, false);
		this.ⲆⵠΔⲆΔ = {
			open: ᐃΔⲆΔᐃ,
			"ⲆⵠΔⵠⲆ": -ᐃⵠᐃᐃ,
			button: ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔⵠⵠᐃⵠΔ]),
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[211]),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[211]).style,
			"ΔⵠΔ": function() {
				this.style.left = Math.floor(ⲆⵠᐃΔ - 300) + ᐃ[279];
				this.style.top = Math.floor(Δⵠᐃᐃ - 215) + ᐃ[279]
			},
			"ⲆⵠᐃⵠΔ": function() {
				ᐃⲆΔⵠ.ⲆⵠΔⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false;
				ᐃⲆΔⵠ.ⲆⵠΔⲆΔ.style.display = ᐃ[371]
			},
			select: function() {
				ᐃⲆΔⵠ.ⲆⵠΔⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = !ᐃⲆΔⵠ.ⲆⵠΔⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]];
				if (!ᐃⲆΔⵠ.ⲆⵠΔⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) ᐃⲆΔⵠ.ⲆⵠΔⲆΔ.style.display = ᐃ[371];
				else ᐃⲆΔⵠ.ⲆⵠΔⲆΔ.style.display = ᐃ[376]
			},
			"ᐃⲆΔⵠᐃⵠᐃ": function() {
				if (ᐃⲆΔⵠ.ⲆⵠΔⲆΔ.ⲆⵠΔⵠⲆ >= 0) {
					ΔΔᐃⲆ.ⲆⵠⵠΔⵠᐃⲆΔΔ(ᐃⲆΔⵠ.ⲆⵠΔⲆΔ.ⲆⵠΔⵠⲆ);
					ᐃⲆΔⵠ.ⲆⵠΔⲆΔ.ⲆⵠᐃⵠΔ();
					if (ga) ga(ᐃ[299], ᐃ[51], ᐃ[182], ᐃ[97], "" + ᐃⲆΔⵠ.ⲆⵠΔⲆΔ.ⲆⵠΔⵠⲆ)
				}
			},
			"ᐃⵠΔᐃᐃ": function() {
				var ⲆᐃⲆⲆⲆ = ⲆΔⵠ.ⲆⵠΔⲆΔ.value;
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("points_bank")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ΔⲆᐃ.ⵠⲆⲆⵠⵠΔᐃ(ⲆᐃⲆⲆⲆ) + " points";
				for (var ᐃⲆ = ⵠⵠⵠ; ᐃⲆ < ΔᐃᐃⲆⵠⲆΔ.length; ᐃⲆ++) {
					if (ΔᐃᐃⲆⵠⲆΔ[ᐃⲆ].ⲆᐃⲆⲆⲆ > ⲆᐃⲆⲆⲆ) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("starter" + (ᐃⲆ + 1)).style[ᐃ[75]] = "0.4";
					else document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("starter" + (ᐃⲆ + 1)).style[ᐃ[75]] = "1"
				}
				for (ᐃⲆ = ᐃⵠⵠⵠ; ᐃⲆ < ⲆⵠⲆⵠⵠⲆⲆ; ᐃⲆ++) {
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[533] + ᐃⲆ).src = "./img/empty-shop.png";
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("amount_shop" + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ""
				}
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[142]).style[ᐃ[75]] = "0.2"
			},
			"ⵠⲆΔΔⵠⵠᐃᐃᐃ": function() {
				if (this.id.length > ⵠΔΔᐃⲆ) var ΔΔ = Number(this.id.charAt(ᐃᐃᐃⵠᐃⵠⵠ) + this.id.charAt(ᐃⵠΔⵠᐃ));
				else var ΔΔ = Number(this.id.charAt(7));
				var ΔⵠⵠⲆ = ΔᐃᐃⲆⵠⲆΔ[ΔΔ - ΔᐃⵠⲆ];
				if (ⲆΔⵠ.ⲆⵠΔⲆΔ.value >= ΔⵠⵠⲆ.ⲆᐃⲆⲆⲆ) {
					ᐃⲆΔⵠ.ⲆⵠΔⲆΔ.ⲆⵠΔⵠⲆ = ΔΔ;
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[142]).style[ᐃ[75]] = "1"
				} else {
					ᐃⲆΔⵠ.ⲆⵠΔⲆΔ.ⲆⵠΔⵠⲆ = -1;
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[142]).style[ᐃ[75]] = "0.2"
				}
				ΔⵠⵠⲆ = ΔⵠⵠⲆ.items;
				for (var ᐃⲆ = 1, ⲆⲆⲆⵠ = ⲆⲆⵠ; ᐃⲆ < ΔⵠⵠⲆ.length + ⲆⲆⲆᐃ; ᐃⲆ++) {
					if (ΔⵠⵠⲆ[ᐃⲆ - 1][1] === ΔⲆ.ⲆⵠⲆΔ) continue;
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[533] + ⲆⲆⲆⵠ).style.display = ᐃ[376];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[533] + ⲆⲆⲆⵠ).src = ᐃᐃ[ⵠⵠⲆⵠ[ΔⵠⵠⲆ[ᐃⲆ - ᐃΔⵠΔ][1]].ⵠⵠ][ᐃⲆΔᐃ].ΔⵠΔΔᐃ === ΔⲆⲆⲆᐃ ? ᐃᐃ[ⵠⵠⲆⵠ[ΔⵠⵠⲆ[ᐃⲆ - ᐃΔⲆΔ][1]].ⵠⵠ][ⵠᐃⵠ].src : ᐃᐃ[ⵠⵠⲆⵠ[ΔⵠⵠⲆ[ᐃⲆ - 1][1]].ⵠⵠ][ⲆⲆΔ].ΔⵠΔΔᐃ;
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("amount_shop" + ⲆⲆⲆⵠ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "" + ΔⵠⵠⲆ[ᐃⲆ - 1][ⵠΔΔⲆ];
					ⲆⲆⲆⵠ++
				}
				for (; ⲆⲆⲆⵠ < 13; ⲆⲆⲆⵠ++) {
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[533] + ⲆⲆⲆⵠ).src = "./img/empty-shop.png";
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("amount_shop" + ⲆⲆⲆⵠ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ""
				}
			}
		};
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("quit3")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⲆⵠΔⲆΔ.ⲆⵠᐃⵠΔ, ᐃⲆⵠᐃⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[142])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⲆⵠΔⲆΔ.ᐃⲆΔⵠᐃⵠᐃ, false);
		for (var ᐃⲆ = 1; ᐃⲆ < ⲆⵠⵠⲆⲆⲆᐃ; ᐃⲆ++) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("starter" + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⲆⵠΔⲆΔ.ⵠⲆΔΔⵠⵠᐃᐃᐃ, false);
		this.ᐃΔΔᐃ = {
			open: ᐃⵠᐃΔⵠ,
			"ᐃⲆⲆⵠⲆ": ᐃΔⲆⲆ.get(ᐃ[475]) ? ᐃΔⲆⲆ.get(ᐃ[475]) === "1" ? ⲆⲆΔⵠ : 0 : Ⲇⵠⵠᐃ,
			button: ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔᐃⲆΔⲆᐃ]),
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("chronoquest"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("chronoquest").style,
			"ΔⵠΔ": function() {
				this.style.left = Math.floor(ⲆⵠᐃΔ - 420) + ᐃ[279];
				this.style.top = Math.floor(Δⵠᐃᐃ - 270) + ᐃ[279]
			},
			"ⲆⵠᐃⵠΔ": function() {
				ᐃⲆΔⵠ.ᐃΔΔᐃ.style.display = ᐃ[371];
				ᐃⲆΔⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ⲆⵠΔΔⵠ
			},
			select: function() {
				ᐃⲆΔⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = !ᐃⲆΔⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]];
				if (!ᐃⲆΔⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) ᐃⲆΔⵠ.ᐃΔΔᐃ.style.display = ᐃ[371];
				else ᐃⲆΔⵠ.ᐃΔΔᐃ.style.display = ᐃ[376]
			},
			list: [],
			reset: function() {
				for (var ᐃⲆ = ⲆⲆᐃ; ᐃⲆ < ⲆⵠⲆᐃⵠᐃⵠ.length; ᐃⲆ++) {
					this.list[ᐃⲆ] = 1;
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[238] + ᐃⲆ).style.display = ᐃ[376];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[328] + ᐃⲆ).style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[562] + ᐃⲆ).style.display = ᐃ[371]
				}
			},
			"ⵠΔⵠΔⵠΔⲆ": Δⵠⵠ,
			"ΔⵠᐃᐃΔⵠⵠ": 0,
			"ⲆΔⲆᐃⲆⲆᐃᐃⵠ": function() {
				if (!ᐃⲆΔⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) return;
				var ⲆᐃⲆΔᐃ = (new Date).getTime();
				if (ⲆᐃⲆΔᐃ - this.ⵠΔⵠΔⵠΔⲆ < 1e3) return;
				this.ⵠΔⵠΔⵠΔⲆ = ⲆᐃⲆΔᐃ;
				for (var ᐃⲆ = 0; ᐃⲆ < ⲆⵠⲆᐃⵠᐃⵠ.length; ᐃⲆ++) {
					if (!ᐃⲆΔⵠ.ᐃΔΔᐃ.list[ᐃⲆ]) continue;
					var ᐃᐃⲆ = ⲆⵠⲆᐃⵠᐃⵠ[ᐃⲆ].time - (ⲆᐃⲆΔᐃ - ⵠⲆΔ.ᐃᐃⵠΔⲆ.ᐃⵠΔᐃᐃ + ᐃⲆΔⵠ.ᐃΔΔᐃ.ΔⵠᐃᐃΔⵠⵠ);
					if (ᐃᐃⲆ > 96e4) {
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[238] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = Math.floor(ᐃᐃⲆ / 48e4) + " days"
					} else if (ᐃᐃⲆ > 48e4) {
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[238] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = Math.floor(ᐃᐃⲆ / 48e4) + " day"
					} else if (ᐃᐃⲆ > 6e4) {
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[238] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = Math.floor(ᐃᐃⲆ / 6e4) + " min"
					} else document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[238] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = Math.floor(ᐃᐃⲆ / 1e3) + " sec"
				}
			},
			restore: function(ᐃᐃⵠᐃ) {
				for (var ᐃⲆ = ⵠⵠᐃ; ᐃⲆ < ᐃᐃⵠᐃ.length; ᐃⲆ++) {
					if (ᐃᐃⵠᐃ[ᐃⲆ] != ⲆⲆⵠ) ᐃⲆΔⵠ.ᐃΔΔᐃ.ΔᐃⲆⵠⵠΔΔ(ᐃⲆ, ᐃᐃⵠᐃ[ᐃⲆ])
				}
			},
			"ΔᐃⲆⵠⵠΔΔ": function(ΔΔ, ⲆⵠΔⵠ) {
				if (ⲆⵠΔⵠ === 3 && (ΔΔ === 11 || ΔΔ === 12)) {
					ⲆΔⵠ.ᐃΔⲆᐃ.ⲆⲆᐃⵠΔᐃⲆ(0, ⵠⲆⵠⲆ);
					ᐃⲆΔⵠ.ⵠⵠΔΔⲆΔⵠ()
				}
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[238] + ΔΔ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
				if (ⲆⵠΔⵠ > ᐃΔΔⲆ) {
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[328] + ΔΔ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "SUCCEED";
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[238] + ΔΔ).style.display = ᐃ[371]
				} else if (ⲆⵠΔⵠ === 0) {
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[328] + ΔΔ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "FAILED";
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[238] + ΔΔ).style.display = ᐃ[371]
				}
				if (ⲆⵠΔⵠ === ⵠΔΔΔ) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[562] + ΔΔ).style.display = ᐃ[376];
				else document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[562] + ΔΔ).style.display = ᐃ[371];
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[328] + ΔΔ).style.display = "inline";
				ᐃⲆΔⵠ.ᐃΔΔᐃ.list[ΔΔ] = ⲆᐃΔⵠ
			},
			modify: function(ΔΔ, ⲆⵠΔⵠ) {
				ᐃⲆΔⵠ.ᐃΔΔᐃ.ΔᐃⲆⵠⵠΔΔ(ΔΔ, ⲆⵠΔⵠ);
				if (ᐃⲆΔⵠ.ᐃΔΔᐃ.ᐃⲆⲆⵠⲆ) {
					ᐃⲆΔⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = true;
					ᐃⲆΔⵠ.ᐃΔΔᐃ.style.display = ᐃ[376]
				}
			},
			"ᐃⲆⲆᐃΔ": function() {
				if (!ᐃⲆΔⵠ.ᐃΔΔᐃ.ᐃⲆⲆⵠⲆ) {
					ᐃΔⲆⲆ.set(ᐃ[475], "1");
					ᐃⲆΔⵠ.options.ᐃⵠᐃΔⵠΔᐃ.display = ᐃ[376]
				} else {
					ᐃΔⲆⲆ.set(ᐃ[475], "0");
					ᐃⲆΔⵠ.options.ᐃⵠᐃΔⵠΔᐃ.display = ᐃ[371]
				}
				ᐃⲆΔⵠ.ᐃΔΔᐃ.ᐃⲆⲆⵠⲆ = !ᐃⲆΔⵠ.ᐃΔΔᐃ.ᐃⲆⲆⵠⲆ
			},
			"ⲆⵠᐃⵠᐃⵠⲆⲆΔ": function() {
				var ᐃᐃⲆⲆ = Number(this.id.charAt(ΔⲆⲆᐃΔΔΔ));
				var ⵠⵠⵠΔ = Number(this.id.charAt(ΔⲆᐃΔⵠᐃᐃ));
				if (this.id.charAt(14) !== "" && ⵠⵠⵠΔ >= 0 && ⵠⵠⵠΔ <= 9) ᐃᐃⲆⲆ = ᐃᐃⲆⲆ * 10 + ⵠⵠⵠΔ;
				ΔΔᐃⲆ.ΔᐃⲆⵠΔΔⵠᐃΔ(ᐃᐃⲆⲆ)
			}
		};
		if (this.ᐃΔΔᐃ.ᐃⲆⲆⵠⲆ) this.options.ᐃⵠᐃΔⵠΔᐃ.display = ᐃ[376];
		else this.options.ᐃⵠᐃΔⵠΔᐃ.display = ᐃ[371];
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[44])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ᐃΔΔᐃ.ⲆⵠᐃⵠΔ, ⲆⵠΔΔⵠ);
		for (var ᐃⲆ = ⲆⲆΔ; ⲆⵠⲆᐃⵠᐃⵠ.length > ᐃⲆ; ᐃⲆ++) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[562] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ᐃΔΔᐃ.ⲆⵠᐃⵠᐃⵠⲆⲆΔ, false);
		this.ΔΔⲆⲆ = {
			open: ᐃΔᐃⲆΔ,
			button: ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃΔⵠ]),
			list: {
				id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[347]),
				style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[347]).style,
				"ⲆⵠⵠᐃⵠᐃΔ": [],
				"ⵠΔΔΔΔᐃⲆ": Ⲇⵠⵠᐃ,
				"ΔⵠΔ": function() {
					this.style.left = Math.floor(ⲆⵠᐃΔ - 335) + ᐃ[279];
					this.style.top = Math.floor(Δⵠᐃᐃ - 215) + ᐃ[279]
				},
				"ⲆⵠᐃⵠΔ": function() {
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[347]).style.display = ᐃ[371];
					ᐃⲆΔⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃΔᐃᐃΔ
				},
				"ᐃᐃⵠⲆⵠⵠΔ": function() {
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[347]).style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[561]).style.display = ᐃ[376]
				},
				"ΔⲆᐃᐃ": function(ᐃⲆ) {
					var ΔⲆⵠ = this.ⲆⵠⵠᐃⵠᐃΔ[ᐃⲆ];
					if (ΔⲆⵠ.ⵠΔⲆ) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("watercraft").style.display = ᐃ[376];
					else document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("watercraft").style.display = ᐃ[371];
					if (ΔⲆⵠ.f) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("firecraft").style.display = ᐃ[376];
					else document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("firecraft").style.display = ᐃ[371];
					if (ΔⲆⵠ.w) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("workcraft").style.display = ᐃ[376];
					else document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("workcraft").style.display = ᐃ[371];
					if (ΔⲆⵠ.e) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("wellcraft").style.display = ᐃ[376];
					else document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("wellcraft").style.display = ᐃ[371];
					var ΔⲆⵠ = ΔⲆⵠ.r;
					for (var ᐃⲆ = 0, ⲆⲆⲆⵠ = ⲆⲆᐃⵠ; ᐃⲆ < ΔⲆⵠ.length; ᐃⲆ++) {
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("inv" + ⲆⲆⲆⵠ).style.display = ᐃ[376];
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("inv" + ⲆⲆⲆⵠ).src = ᐃᐃ[ⵠⵠⲆⵠ[ΔⲆⵠ[ᐃⲆ][ᐃⲆᐃ]].ⵠⵠ][0].ΔⵠΔΔᐃ === ᐃⲆⲆΔᐃ ? ᐃᐃ[ⵠⵠⲆⵠ[ΔⲆⵠ[ᐃⲆ][ⵠᐃⵠ]].ⵠⵠ][ⵠⵠΔΔ].src : ᐃᐃ[ⵠⵠⲆⵠ[ΔⲆⵠ[ᐃⲆ][ΔᐃⲆⲆ]].ⵠⵠ][0].ΔⵠΔΔᐃ;
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("numb" + ⲆⲆⲆⵠ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "" + ΔⲆⵠ[ᐃⲆ][ⲆⲆⵠ];
						ⲆⲆⲆⵠ++
					}
					for (; ⲆⲆⲆⵠ < ᐃⲆΔⵠΔ; ⲆⲆⲆⵠ++) {
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("inv" + ⲆⲆⲆⵠ).style.display = ᐃ[371];
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("numb" + ⲆⲆⲆⵠ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ""
					}
				},
				select: function(ⵠΔΔΔΔᐃⲆ) {
					this.ⵠΔΔΔΔᐃⲆ = ⵠΔΔΔΔᐃⲆ;
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[561]).style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("workcraft").style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("firecraft").style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("watercraft").style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("wellcraft").style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[347]).style.display = ᐃ[376];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("inv1").style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("inv2").style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("inv3").style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("inv4").style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("inv5").style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("numb1")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "";
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("numb2")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "";
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("numb3")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "";
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("numb4")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "";
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("numb5")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "";
					for (var ᐃⲆ = 0, ⲆⲆⲆⵠ = ⵠᐃⵠ; ᐃⲆ < ᐃⵠᐃⵠⵠ.length; ᐃⲆ++) {
						var ΔⲆⵠ = ᐃⵠᐃⵠⵠ[ᐃⲆ];
						if (ⵠΔΔΔΔᐃⲆ === ΔⲆⵠ.ᐃᐃⲆ) {
							this.ⲆⵠⵠᐃⵠᐃΔ[ⲆⲆⲆⵠ] = ΔⲆⵠ;
							ⲆⲆⲆⵠ++;
							document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_" + ⲆⲆⲆⵠ).style.display = ᐃ[376];
							document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_" + ⲆⲆⲆⵠ).src = ᐃᐃ[ⵠⵠⲆⵠ[ΔⲆⵠ.ᐃⲆⲆΔ].ⵠⵠ][ⵠⵠⲆΔ].ΔⵠΔΔᐃ === ⵠΔΔⲆΔ ? ᐃᐃ[ⵠⵠⲆⵠ[ΔⲆⵠ.ᐃⲆⲆΔ].ⵠⵠ][0].src : ᐃᐃ[ⵠⵠⲆⵠ[ΔⲆⵠ.ᐃⲆⲆΔ].ⵠⵠ][ⲆᐃΔⵠ].ΔⵠΔΔᐃ
						}
					}
					for (ⲆⲆⲆⵠ++; ⲆⲆⲆⵠ < 49; ⲆⲆⲆⵠ++) document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_" + ⲆⲆⲆⵠ).style.display = ᐃ[371]
				}
			},
			"ⲆⵠΔⲆᐃΔᐃ": {
				id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[561]),
				style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[561]).style,
				"ΔⵠΔ": function() {
					this.style.left = Math.floor(ⲆⵠᐃΔ - 285) + ᐃ[279];
					this.style.top = Math.floor(Δⵠᐃᐃ - 170) + ᐃ[279]
				},
				"ⲆⵠᐃⵠΔ": function() {
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[561]).style.display = ᐃ[371];
					ᐃⲆΔⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false
				}
			},
			"ᐃΔⲆΔΔᐃᐃⲆᐃ": function() {
				this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = !this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]];
				if (!this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[561]).style.display = ᐃ[371];
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[347]).style.display = ᐃ[371]
				} else document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[561]).style.display = ᐃ[376]
			}
		};
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("quit")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ΔΔⲆⲆ.ⲆⵠΔⲆᐃΔᐃ.ⲆⵠᐃⵠΔ, ᐃΔᐃᐃΔ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("quitmenu")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ΔΔⲆⲆ.list.ⲆⵠᐃⵠΔ, false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("backhome")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ΔΔⲆⲆ.list.ᐃᐃⵠⲆⵠⵠΔ, false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("hatcategory")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.select(ⵠⵠᐃᐃ.ⲆΔⵠⲆΔ)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("weaponcategory")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.select(ⵠⵠᐃᐃ.ⲆⵠⵠΔ)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("toolcategory")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.select(ⵠⵠᐃᐃ.ΔᐃⲆᐃᐃ)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("foodcategory")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.select(ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("placeablecategory")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.select(ⵠⵠᐃᐃ.ᐃΔΔᐃΔ)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("constructioncategory")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.select(ⵠⵠᐃᐃ.ⵠΔⲆᐃᐃ)
		}), ⲆⵠΔΔⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_1")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ᐃⵠᐃⲆⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(0)
		}), ᐃΔⵠΔᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_2")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(ᐃΔⲆΔ)
		}), ᐃΔⲆΔᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_3")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⵠᐃⲆΔⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(2)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_4")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[Ⲇⵠᐃᐃᐃ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(3)
		}), ᐃⲆⵠᐃⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_5")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ᐃⲆᐃⲆⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(ΔⲆⵠΔⲆ)
		}), ΔΔⲆᐃᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_6")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(5)
		}), ⵠⲆⵠⵠΔ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_7")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(6)
		}), ΔΔⲆᐃᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_8")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ᐃⵠᐃⲆⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(ⵠΔⵠᐃⲆ)
		}), ᐃⲆⵠᐃⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_9")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(ᐃᐃΔⲆⵠ)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_10")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(ⲆⲆⲆⵠΔⵠⲆ)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_11")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⲆⵠΔΔⲆ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(ΔⵠⲆⵠⵠ)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_12")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⵠᐃⲆΔⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(11)
		}), ⲆⵠΔΔⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_13")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(12)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_14")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ᐃⵠᐃⲆⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(13)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_15")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ᐃⵠᐃⲆⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(14)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_16")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(15)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_17")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ΔⲆⵠᐃⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(16)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_18")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(17)
		}), ⵠᐃΔΔᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_19")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⵠᐃⲆΔⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(18)
		}), ᐃΔⵠΔᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_20")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(ⵠᐃⵠᐃⵠ)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_21")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ΔΔΔΔᐃΔΔ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(20)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_22")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⵠⵠΔᐃᐃⲆⲆ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(21)
		}), ⲆⲆΔΔᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_23")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⲆⲆⲆⲆΔ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(22)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_24")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(23)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_25")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⲆⵠⲆᐃⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(24)
		}), ΔΔⲆᐃᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_26")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⲆⲆⲆⲆΔ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(25)
		}), ᐃⲆⵠᐃⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_27")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⵠᐃⲆΔⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(26)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_28")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⵠⵠΔᐃᐃⲆⲆ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(27)
		}), ᐃⵠᐃΔⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_29")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(28)
		}), ᐃΔᐃⲆΔ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_30")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⲆⲆⲆⲆΔ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(29)
		}), ᐃΔᐃⲆΔ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_31")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⲆΔᐃⵠⲆⵠⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(30)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_32")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⵠΔⵠΔⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(31)
		}), ⲆᐃΔᐃⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_33")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(32)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_34")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(33)
		}), ⵠᐃΔΔᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_35")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(34)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_36")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(35)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_37")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ᐃⲆᐃⲆⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(36)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_38")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⵠⵠΔᐃᐃⲆⲆ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(37)
		}), Ⲇⵠᐃⵠᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_39")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(38)
		}), ᐃⲆⵠᐃⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_40")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ΔΔᐃᐃⲆΔⲆ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(39)
		}), ᐃⲆⵠᐃⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_41")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⲆⵠΔΔⲆ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(40)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_42")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(41)
		}), ⵠᐃΔΔᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_43")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ΔⲆⵠᐃⵠ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(42)
		}), false);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_44")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(43)
		}), ⵠᐃΔΔᐃ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_45")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(44)
		}), ⵠⲆᐃⵠⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_46")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(45)
		}), ᐃΔᐃⲆΔ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_47")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(46)
		}), ⲆⵠΔΔⵠ);
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("img_48")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[Ⲇⵠᐃᐃᐃ], (function() {
			ᐃⲆΔⵠ.ΔΔⲆⲆ.list.ΔⲆᐃᐃ(47)
		}), ⲆⵠΔΔⵠ);
		this.ᐃΔᐃΔΔ = {
			translate: {
				y: Ⲇⵠᐃ,
				x: 0
			},
			"Ⲇⵠⵠᐃⵠ": {
				x: -ⵠᐃᐃ,
				y: -ⲆⲆⵠ
			},
			"ΔΔᐃΔ": [],
			focus: function(ΔΔⵠᐃ) {
				var ⲆⲆⲆ = this.translate.y + (ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ.length > ΔᐃⲆⲆ ? -120 : -50);
				if (ΔΔⵠᐃ.x > this.translate.x && ΔΔⵠᐃ.x < this.translate.x + 193 && ΔΔⵠᐃ.y > ⲆⲆⲆ && ΔΔⵠᐃ.y < ⲆⲆⲆ + 193) {
					this.Ⲇⵠⵠᐃⵠ.x = ΔΔⵠᐃ.x - this.translate.x;
					this.Ⲇⵠⵠᐃⵠ.y = ΔΔⵠᐃ.y - ⲆⲆⲆ
				}
			}
		};
		this.ΔⵠⲆᐃ = {
			translate: {
				x: 0,
				y: 0
			},
			"ⵠⵠ": ᐃᐃ[ⵠ.ⵠΔⲆᐃⵠⵠΔ],
			"ᐃⵠ": document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140])
		};
		this.ΔⵠⲆᐃ.ᐃⵠ.width = this.ΔⵠⲆᐃ.ⵠⵠ.width;
		this.ΔⵠⲆᐃ.ᐃⵠ.height = this.ΔⵠⲆᐃ.ⵠⵠ.height;
		this.ΔⵠⲆᐃ.Δ = this.ΔⵠⲆᐃ.ᐃⵠ.getContext(ᐃ[269]);
		this.ⵠΔⲆΔ = {
			translate: {
				x: 0,
				y: 0
			},
			"ⵠⵠ": ᐃᐃ[ⵠ.ⵠⵠΔⵠⲆᐃⲆ],
			"ᐃⵠΔᐃ": ΔⲆⵠⵠⵠΔⲆⲆⲆ,
			y: ⵠᐃⵠ
		};
		var ⵠΔΔⲆᐃ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[37]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]]("div");
		this.ᐃⵠⲆΔⲆⲆᐃ = function() {
			ⲆⵠⲆⲆᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[95]);
			ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "";
			ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + ((ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[98]] = ⵠⲆΔ.ΔΔᐃΔ[ⲆΔⵠ.ΔⲆᐃⲆⲆ[0]].ⵠⲆⵠΔⵠ) && ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]]) + "</div";
			for (var ᐃⲆ = ⲆⲆᐃⵠ; ⲆΔⵠ.ΔⲆᐃⲆⲆ.length > ᐃⲆ; ᐃⲆ++) {
				ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + ((ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[98]] = ⵠⲆΔ.ΔΔᐃΔ[ⲆΔⵠ.ΔⲆᐃⲆⲆ[ᐃⲆ]].ⵠⲆⵠΔⵠ) && ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]]) + "</div></div>"
			}
			ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] += '<div id="leave" style="display:inline-block;">LEAVE</div></div>';
			ⲆⵠⲆⲆᐃ.style.display = ᐃ[376];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("leave")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[385], ΔΔᐃⲆ.ᐃⵠⲆΔⲆⲆᐃ, false)
		};
		this.ⵠⲆⲆⵠᐃᐃⲆⲆᐃ = function() {
			ⲆⵠⲆⲆᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[95]);
			ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "";
			ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + ((ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[98]] = ⵠⲆΔ.ΔΔᐃΔ[ⲆΔⵠ.ΔⲆᐃⲆⲆ[ⵠᐃⵠ]].ⵠⲆⵠΔⵠ) && ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]]) + "</div";
			for (var ᐃⲆ = 1; ᐃⲆ < ⲆΔⵠ.ΔⲆᐃⲆⲆ.length; ᐃⲆ++) {
				ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + ((ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[98]] = ⵠⲆΔ.ΔΔᐃΔ[ⲆΔⵠ.ΔⲆᐃⲆⲆ[ᐃⲆ]].ⵠⲆⵠΔⵠ) && ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]]) + "</div></div>"
			}
			ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] += ᐃ[423];
			ⲆⵠⲆⲆᐃ.style.display = ᐃ[376]
		};
		this.ⵠⵠⲆΔΔⵠⵠⵠΔ = function() {
			ⲆⵠⲆⲆᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[95]);
			ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "";
			ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + ((ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[98]] = ⵠⲆΔ.ΔΔᐃΔ[ⲆΔⵠ.ΔⲆᐃⲆⲆ[0]].ⵠⲆⵠΔⵠ) && ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]]) + "</div";
			for (var ᐃⲆ = 1; ᐃⲆ < ⲆΔⵠ.ΔⲆᐃⲆⲆ.length; ᐃⲆ++) ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + ((ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[98]] = ⵠⲆΔ.ΔΔᐃΔ[ⲆΔⵠ.ΔⲆᐃⲆⲆ[ᐃⲆ]].ⵠⲆⵠΔⵠ) && ⵠΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]]) + '</div><div class="eject_member" id="eject_member' + ᐃⲆ + '"><img src="./img/close-team.png" style="width:20px;padding:5px;"></img></div>';
			if (ⲆΔⵠ.ⲆⲆᐃⵠΔ.lock === 0) ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] += '<div id="lock_team" style="display:inline-block;">LOCK</div></div>';
			else ⲆⵠⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] += '<div id="lock_team" style="display:inline-block;">UNLOCK</div></div>';
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[271])[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[385], ΔΔᐃⲆ.ΔⵠⲆⵠᐃΔⲆⵠᐃ, false);
			ⲆⵠⲆⲆᐃ.style.display = ᐃ[376];
			for (var ᐃⲆ = 1; ᐃⲆ < ⲆΔⵠ.ΔⲆᐃⲆⲆ.length; ᐃⲆ++) {
				switch (ᐃⲆ) {
					case 1:
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[129] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[385], (function() {
							ΔΔᐃⲆ.ΔᐃᐃᐃΔᐃΔ(ᐃΔⵠΔ)
						}), false);
						break;
					case ΔΔⵠⲆ:
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[129] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[385], (function() {
							ΔΔᐃⲆ.ΔᐃᐃᐃΔᐃΔ(2)
						}), ΔⲆⲆᐃΔ);
						break;
					case 3:
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[129] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[385], (function() {
							ΔΔᐃⲆ.ΔᐃᐃᐃΔᐃΔ(ⵠⵠΔⲆ)
						}), false);
						break;
					case 4:
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[129] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[385], (function() {
							ΔΔᐃⲆ.ΔᐃᐃᐃΔᐃΔ(ΔΔᐃⵠΔ)
						}), false);
						break;
					case ⵠᐃⵠᐃΔ:
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[129] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[385], (function() {
							ΔΔᐃⲆ.ΔᐃᐃᐃΔᐃΔ(5)
						}), ⵠⲆⵠⵠΔ);
						break;
					case 6:
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[129] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[385], (function() {
							ΔΔᐃⲆ.ΔᐃᐃᐃΔᐃΔ(ⲆⲆⲆⵠΔ)
						}), ⲆⲆΔΔᐃ);
						break;
					case ᐃΔᐃᐃⲆ:
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[129] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[385], (function() {
							ΔΔᐃⲆ.ΔᐃᐃᐃΔᐃΔ(7)
						}), ⵠⲆᐃⵠⵠ);
						break;
					case 8:
						document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[129] + ᐃⲆ)[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[385], (function() {
							ΔΔᐃⲆ.ΔᐃᐃᐃΔᐃΔ(8)
						}), ΔⲆⲆΔⵠ);
						break
				}
			}
		};
		this.ΔᐃᐃⵠΔ = [];
		this.ΔᐃᐃⵠΔ[ᐃᐃᐃᐃⵠ.ᐃⵠᐃⲆΔⵠᐃ] = {
			button: ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃᐃⲆᐃᐃΔ]),
			action: this.ᐃⵠⲆΔⲆⲆᐃ
		};
		this.ΔᐃᐃⵠΔ[ᐃᐃᐃᐃⵠ.ΔᐃⲆⵠⵠⵠΔ] = {
			button: ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃᐃⲆᐃᐃΔ]),
			action: ΔΔᐃⲆ.ᐃΔΔⲆⲆΔΔᐃⵠ
		};
		this.ΔᐃᐃⵠΔ[ᐃᐃᐃᐃⵠ.ⲆⲆΔΔⲆᐃⲆ] = {
			button: ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃΔᐃⵠᐃᐃ]),
			action: this.ⵠⵠⲆΔΔⵠⵠⵠΔ
		};
		this.ΔᐃᐃⵠΔ[ᐃᐃᐃᐃⵠ.ᐃⵠᐃᐃΔᐃΔ] = {
			button: ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⵠⲆⲆⵠⲆ]),
			action: this.ⵠⲆⲆⵠᐃᐃⲆⲆᐃ
		};
		this.ΔᐃᐃⵠΔ[ᐃᐃᐃᐃⵠ.ᐃⲆᐃⲆⵠⲆⲆ] = {
			button: ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔΔᐃⵠⵠⵠ]),
			action: function() {}
		};
		this.ΔᐃⲆⲆᐃ = -1;
		this.ⵠⵠⵠⲆᐃΔᐃ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃᐃⲆᐃΔⲆ]);
		this.ⵠⲆⲆᐃⲆⵠᐃ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠΔΔᐃᐃⵠ]);
		this.ⵠΔᐃᐃⲆⲆⲆ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⵠᐃᐃᐃⵠ]);
		this.ⲆⵠΔᐃⵠⲆΔ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔᐃⲆΔᐃⲆ]);
		this.ⲆΔᐃⲆΔⵠⵠ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⵠᐃᐃᐃⵠ]);
		this.ᐃᐃᐃⵠᐃΔⲆ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⲆⵠⲆᐃΔ]);
		this.ᐃᐃᐃᐃⵠᐃⲆ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆΔᐃΔᐃⲆ]);
		this.ⵠⲆⲆΔⵠᐃⵠ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠΔⲆΔⵠᐃ]);
		this.ⵠⵠⵠⲆᐃΔⲆ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃΔⲆᐃⲆⲆ]);
		this.ⲆΔⲆΔⲆΔΔ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⵠᐃⲆⲆᐃ]);
		this.ⵠⵠⲆᐃΔⵠⲆ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆΔⲆΔ]);
		this.ᐃΔΔᐃⲆⲆⵠ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⵠⲆⲆᐃᐃ]);
		this.ⵠⲆᐃⵠⵠⲆⵠ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔᐃⵠΔᐃ]);
		this.ᐃⵠΔⵠⲆΔᐃ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠⲆΔΔⲆⲆ]);
		this.ᐃΔᐃⲆᐃⵠⲆ = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⲆⲆᐃᐃⵠ]);
		this.ⵠᐃΔⵠⵠ = ΔᐃⲆ(120, 120, "", ᐃᐃ[ⵠ.ΔᐃⲆⵠᐃ]);
		this.ⵠᐃΔⵠⵠ.info.translate.x = 10;
		this.ⵠᐃΔⵠⵠ.info.translate.y = 10;
		this.ⵠⲆᐃ = [];
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆᐃΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔᐃⵠⵠⵠⲆ], ᐃΔΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆᐃΔΔ].id = ΔⲆ.ⲆⲆᐃΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆⲆⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆΔΔᐃΔΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆⲆⲆΔ].id = ΔⲆ.ⵠⲆⲆⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠᐃΔⵠⲆΔⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⵠΔ].id = ΔⲆ.ⵠΔⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆⲆΔΔᐃⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃᐃⲆ].id = ΔⲆ.ᐃᐃᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠᐃΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆᐃᐃᐃΔᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠᐃΔᐃ].id = ΔⲆ.ⲆⵠᐃΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠΔᐃⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆΔⲆᐃⵠⲆ], ⵠᐃⵠΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠΔᐃⵠ].id = ΔⲆ.ⲆⵠΔᐃⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔᐃⵠᐃΔⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃΔⲆ].id = ΔⲆ.ⵠᐃΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃⵠΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⵠᐃ].id = ΔⲆ.ⲆΔⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⲆᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠⵠᐃⲆⲆⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⲆᐃᐃ].id = ΔⲆ.ⵠᐃⲆᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⵠΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆⲆᐃΔⲆⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⵠΔⲆ].id = ΔⲆ.ⵠᐃⵠΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⵠⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆΔⲆⲆᐃⲆ], ⵠⵠΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⵠⵠⵠ].id = ΔⲆ.ᐃΔⵠⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔᐃⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔⲆⲆΔⲆᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔᐃⲆΔ].id = ΔⲆ.ⲆΔᐃⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆΔⲆᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃⲆΔⲆⵠⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆΔⲆᐃ].id = ΔⲆ.ⲆⲆΔⲆᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⲆΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆᐃⲆⵠⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⲆΔᐃ].id = ΔⲆ.ΔⲆⲆΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠΔⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⵠΔΔᐃⲆⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠΔⲆⵠ].id = ΔⲆ.ΔⵠΔⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⵠΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆΔΔᐃⵠⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⵠΔΔ].id = ΔⲆ.ⲆᐃⵠΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠΔⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆᐃⲆΔⵠΔ], ΔᐃΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠΔⲆΔ].id = ΔⲆ.ⵠⵠΔⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠΔⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃⵠΔⵠⵠⲆ], ⵠᐃⵠⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠΔⵠΔ].id = ΔⲆ.ᐃⵠΔⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃΔᐃⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔΔᐃᐃⲆΔ], ⵠᐃᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃΔᐃⵠ].id = ΔⲆ.ᐃᐃΔᐃⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠΔΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆⵠΔᐃⲆⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠΔΔⲆ].id = ΔⲆ.ⵠⵠΔΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⲆⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔⵠᐃⲆⵠⲆ], ⵠᐃⵠΔ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⲆⵠΔ].id = ΔⲆ.ΔⲆⲆⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⵠⲆᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔᐃⲆⲆⵠΔ], ⵠᐃⵠⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⵠⲆᐃ].id = ΔⲆ.ᐃⲆⵠⲆᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆⵠᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃᐃⲆⵠᐃⲆ], ΔᐃΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆⵠᐃⲆ].id = ΔⲆ.ⲆⲆⵠᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⵠⵠⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆⵠⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⵠⵠⲆ].id = ΔⲆ.ᐃᐃⵠⵠⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃⵠⲆΔⵠⲆ], ᐃΔᐃⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠᐃΔ].id = ΔⲆ.ᐃⵠⵠᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆⵠᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆⲆⵠΔΔⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆⵠᐃΔ].id = ΔⲆ.ⵠⲆⵠᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔΔⵠΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆⲆᐃⵠⵠᐃ], ᐃΔΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ΔΔⵠΔᐃ].id = ΔⲆ.ΔΔⵠΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆΔⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠΔⵠΔΔΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆΔⲆΔ].id = ΔⲆ.ⵠⲆΔⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔΔⲆⲆⵠΔ], ⵠᐃⵠΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠΔⵠ].id = ΔⲆ.ᐃⵠⵠΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃⵠΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠΔⲆΔᐃᐃ], ⵠᐃᐃⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃⵠΔᐃ].id = ΔⲆ.ΔᐃⵠΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⲆᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⵠⲆΔᐃᐃΔ], Ⲇⵠᐃᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⲆᐃⲆ].id = ΔⲆ.ΔⲆⲆᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆΔΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆⲆΔΔⲆᐃ], ᐃΔΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆΔΔᐃ].id = ΔⲆ.ᐃⲆΔΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠΔⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆⲆᐃⲆᐃⵠ], ⵠᐃᐃⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠΔⲆΔ].id = ΔⲆ.ΔⵠΔⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⲆⲆᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔᐃⵠⲆⲆⲆ], ⵠΔΔᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⲆⲆᐃ].id = ΔⲆ.ⲆᐃⲆⲆᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⵠΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠᐃⵠⲆᐃⲆⵠ], ⵠΔΔᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⵠΔⲆ].id = ΔⲆ.ⵠΔⵠΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠⲆᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.Δᐃᐃᐃᐃᐃᐃ], Ⲇⵠᐃᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠⲆᐃ].id = ΔⲆ.ᐃⵠⵠⲆᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠⵠΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆᐃΔΔⲆΔ], ⵠᐃⵠΔ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠⵠΔⲆ].id = ΔⲆ.ΔⵠⵠΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔᐃᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔᐃΔⵠΔᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔᐃᐃᐃ].id = ΔⲆ.ⵠΔᐃᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆΔⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠᐃΔⲆⵠΔ], ⵠΔΔᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆΔⵠΔ].id = ΔⲆ.ⲆⲆΔⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔᐃΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆⵠⵠΔⲆΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔᐃΔΔ].id = ΔⲆ.ⵠΔᐃΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⵠΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃΔⲆΔⵠⵠ], ⲆΔⲆᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⵠΔⲆ].id = ΔⲆ.ⲆᐃⵠΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃΔⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃᐃⵠⲆⲆⲆΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃΔⲆⲆ].id = ΔⲆ.ⲆᐃΔⲆⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔΔᐃⲆⲆΔ], ⵠⵠⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃⲆⲆ].id = ΔⲆ.ΔᐃᐃⲆⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆᐃΔΔᐃⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆΔⲆ].id = ΔⲆ.ᐃΔⲆΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠᐃⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃΔⲆΔⵠΔ], ⵠᐃⵠΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠᐃⵠᐃ].id = ΔⲆ.ᐃⵠᐃⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⵠᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃΔΔⲆⲆΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⵠᐃᐃ].id = ΔⲆ.ΔⲆⵠᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆᐃⲆᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⵠΔᐃΔᐃⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆᐃⲆᐃ].id = ΔⲆ.ⵠⲆᐃⲆᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⲆᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠΔⵠᐃΔⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⲆᐃΔ].id = ΔⲆ.ⵠᐃⲆᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔΔᐃⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⵠⵠⵠⵠΔⲆ], ⵠᐃⵠⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔΔᐃⵠ].id = ΔⲆ.ᐃΔΔᐃⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠⲆⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠΔᐃᐃⵠΔ], ⲆΔⲆᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠⲆⲆⵠ].id = ΔⲆ.ΔⵠⲆⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃⲆᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆΔⲆⵠⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃⲆᐃ].id = ΔⲆ.ΔᐃᐃⲆᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃᐃΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆⵠⵠⵠⵠΔ], ᐃΔΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃᐃΔΔ].id = ΔⲆ.ⵠᐃᐃΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⵠⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆⲆΔᐃⵠⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⵠⵠᐃ].id = ΔⲆ.ⵠΔⵠⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⵠΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔᐃᐃⵠⵠⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⵠΔⲆ].id = ΔⲆ.ⲆⵠⵠΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠΔⵠⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠⲆⲆᐃⵠⲆ], ᐃΔᐃⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠΔⵠⲆ].id = ΔⲆ.ᐃⵠΔⵠⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⲆᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔⵠᐃΔΔⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⲆᐃⲆ].id = ΔⲆ.ⲆΔⲆᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔᐃⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔⲆᐃⲆⵠᐃ], ΔᐃΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔᐃⲆⵠ].id = ΔⲆ.ⲆΔᐃⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⲆⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃᐃΔⵠⲆᐃΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⲆⵠⵠ].id = ΔⲆ.ⵠᐃⲆⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⵠⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃⵠᐃΔⲆⲆ], ⵠΔΔᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⵠⵠΔ].id = ΔⲆ.ⲆⵠⵠⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆᐃΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆΔⵠᐃᐃΔ], ⵠᐃᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆᐃΔⲆ].id = ΔⲆ.ᐃⲆᐃΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠⵠⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠᐃⲆΔᐃᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠⵠⲆⲆ].id = ΔⲆ.ΔⵠⵠⲆⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔΔᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠⵠⲆᐃⵠⵠ], ⵠⲆᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔΔᐃΔ].id = ΔⲆ.ⵠΔΔᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠΔΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠⲆΔⲆⵠⵠ], ᐃΔΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠΔΔⵠ].id = ΔⲆ.ΔⵠΔΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠΔᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔΔⲆⲆⵠⲆ], Ⲇⵠᐃᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠΔᐃΔ].id = ΔⲆ.ⵠⵠΔᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⲆⲆᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠⲆⲆⲆᐃᐃ], ᐃΔᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⲆⲆᐃ].id = ΔⲆ.ⲆΔⲆⲆᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠⲆⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆⲆⲆⲆⵠΔ], ⲆⵠⵠⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠⲆⵠΔ].id = ΔⲆ.ΔⵠⲆⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔᐃⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠΔⵠⲆᐃⲆ], ⵠⵠΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔᐃⵠᐃ].id = ΔⲆ.ⵠΔᐃⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔΔΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆⲆⵠⲆⲆⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔΔΔΔ].id = ΔⲆ.ⵠΔΔΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆᐃᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆⲆⲆⲆⵠⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆᐃᐃⲆ].id = ΔⲆ.ΔⲆᐃᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔᐃΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠᐃΔΔᐃⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔᐃΔⵠ].id = ΔⲆ.ᐃΔᐃΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⵠΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.Ⲇᐃⵠᐃⵠᐃᐃ], ⵠⵠΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⵠΔᐃ].id = ΔⲆ.ⲆᐃⵠΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆⵠⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔⲆⲆⵠᐃⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆⵠⲆΔ].id = ΔⲆ.ⵠⲆⵠⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.Δᐃᐃⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔⵠΔⲆᐃⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.Δᐃᐃⵠⵠ].id = ΔⲆ.Δᐃᐃⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⲆᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆⲆⵠⵠⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⲆᐃᐃ].id = ΔⲆ.ᐃⲆⲆᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⵠⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠⵠⵠⵠⵠΔ], ⵠᐃⵠⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⵠⲆⵠ].id = ΔⲆ.ᐃⲆⵠⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⵠᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔΔΔⲆΔⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⵠᐃΔ].id = ΔⲆ.ᐃⲆⵠᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔΔⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆⵠⵠΔⲆⲆ], ᐃΔΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔΔⲆⵠ].id = ΔⲆ.ᐃΔΔⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⵠΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠᐃΔⲆⵠΔ], Ⲇⵠᐃᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⵠΔⵠ].id = ΔⲆ.ⲆᐃⵠΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃΔΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔΔⲆᐃΔᐃ], ⲆΔⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃΔΔⲆ].id = ΔⲆ.ΔᐃΔΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔΔΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔᐃᐃⲆⲆⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔΔΔⲆ].id = ΔⲆ.ⵠΔΔΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆΔΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆΔΔᐃΔⲆ], ⲆΔⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆΔΔΔ].id = ΔⲆ.ΔⲆΔΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⵠᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔⵠⵠᐃᐃΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⵠᐃΔ].id = ΔⲆ.ᐃΔⵠᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔᐃᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠᐃᐃΔΔⵠ], ᐃᐃΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔᐃᐃᐃ].id = ΔⲆ.ⲆΔᐃᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⵠΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠⵠᐃⵠᐃⵠ], ΔᐃΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⵠΔᐃ].id = ΔⲆ.ⵠΔⵠΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃΔᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔΔᐃΔᐃΔ], ⵠᐃⵠΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃΔᐃΔ].id = ΔⲆ.ᐃᐃΔᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠᐃᐃⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔΔΔΔΔᐃ], ⵠᐃⵠΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠᐃᐃⵠ].id = ΔⲆ.ⵠⵠᐃᐃⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⲆΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆⲆΔⵠΔⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⲆΔᐃ].id = ΔⲆ.ⵠΔⲆΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆᐃΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠⵠᐃᐃⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆᐃΔᐃ].id = ΔⲆ.ⵠⲆᐃΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃΔⲆΔⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⲆΔ].id = ΔⲆ.ⲆⵠⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔᐃⵠⵠᐃⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠΔⲆ].id = ΔⲆ.ⲆⵠΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆⲆΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔᐃᐃᐃⵠⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆⲆΔⲆ].id = ΔⲆ.ⵠⲆⲆΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⲆΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃᐃΔⵠᐃΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⲆΔΔ].id = ΔⲆ.ⲆⵠⲆΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔΔᐃᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⵠⲆⲆΔⵠΔ], ⲆⲆΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ΔΔᐃᐃᐃ].id = ΔⲆ.ΔΔᐃᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆΔⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠΔⵠΔΔᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆΔⵠᐃ].id = ΔⲆ.ᐃⲆΔⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔᐃⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔᐃⵠΔⲆΔ], ⵠᐃⵠⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔᐃⲆⲆ].id = ΔⲆ.ⲆΔᐃⲆⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃΔⵠⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠⲆΔⵠⲆᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃΔⵠⲆ].id = ΔⲆ.ΔᐃΔⵠⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆΔΔᐃΔⵠ], ⵠⵠΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠΔᐃ].id = ΔⲆ.ᐃⵠⵠΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆᐃⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔⵠᐃΔⲆⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆᐃⵠⵠ].id = ΔⲆ.ᐃⲆᐃⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃᐃᐃⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔᐃΔⵠΔⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃᐃᐃⵠ].id = ΔⲆ.ⵠᐃᐃᐃⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⵠᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔᐃᐃⲆᐃᐃ], ⵠᐃᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⵠᐃΔ].id = ΔⲆ.ᐃᐃⵠᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⵠᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆⵠᐃΔᐃΔ], ΔᐃΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⵠᐃᐃ].id = ΔⲆ.ᐃᐃⵠᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⲆⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔΔΔΔⲆⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⲆⲆΔ].id = ΔⲆ.ΔⲆⲆⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔΔᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆᐃΔⵠΔΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔΔᐃᐃ].id = ΔⲆ.ⲆΔΔᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⵠⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆⵠⲆⲆᐃⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⵠⲆⵠ].id = ΔⲆ.ⵠΔⵠⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆΔⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃΔΔⵠⲆΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆΔⵠΔ].id = ΔⲆ.ΔⲆΔⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⲆⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃᐃΔΔᐃΔᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⲆⲆⵠ].id = ΔⲆ.ⲆᐃⲆⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃⵠⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃⲆΔΔⲆⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃⵠⵠΔ].id = ΔⲆ.ΔᐃⵠⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔᐃⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔⲆⵠⵠⵠⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔᐃⵠⵠ].id = ΔⲆ.ⲆΔᐃⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃⲆⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠΔⲆᐃⲆⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃⲆⵠᐃ].id = ΔⲆ.ΔᐃⲆⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠⲆᐃΔⲆⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆⵠᐃ].id = ΔⲆ.ᐃΔⲆⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠᐃΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃᐃΔᐃⵠΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠᐃΔΔ].id = ΔⲆ.ΔⵠᐃΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠᐃΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆⵠᐃⲆⵠⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠᐃΔΔ].id = ΔⲆ.ᐃⵠᐃΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⲆⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠᐃⵠᐃᐃΔΔ], ⵠᐃⵠΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⲆⲆΔ].id = ΔⲆ.ᐃᐃⲆⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃᐃᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆΔⲆⵠⵠⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃᐃᐃⲆ].id = ΔⲆ.ⲆᐃᐃᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ΔΔᐃⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠΔⵠⵠⲆⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔΔᐃⲆΔ].id = ΔⲆ.ΔΔᐃⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆᐃⲆᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⵠᐃⲆⵠᐃᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆᐃⲆᐃ].id = ΔⲆ.ΔⲆᐃⲆᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆΔⵠⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆΔΔᐃⲆⲆ], ⵠⲆᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆΔⵠⲆ].id = ΔⲆ.ᐃⲆΔⵠⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⵠⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠᐃⲆᐃᐃᐃᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⵠⲆΔ].id = ΔⲆ.ᐃᐃⵠⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆⲆⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠⲆᐃⵠᐃΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆⲆⲆⵠ].id = ΔⲆ.ⵠⲆⲆⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⲆΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃᐃⲆⲆⵠΔ], ⵠᐃᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⲆΔⵠ].id = ΔⲆ.ⲆⵠⲆΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⵠⵠⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃᐃᐃΔΔⲆΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⵠⵠⲆ].id = ΔⲆ.ΔⲆⵠⵠⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃΔⲆᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠⲆᐃΔᐃⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃΔⲆᐃ].id = ΔⲆ.ⵠᐃΔⲆᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆᐃᐃⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔᐃΔΔᐃⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆᐃᐃⵠ].id = ΔⲆ.ΔⲆᐃᐃⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆⵠⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃⲆⲆⲆⲆᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆⵠⵠⵠ].id = ΔⲆ.ⲆⲆⵠⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠⲆΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠᐃⵠⲆⲆᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠⲆΔΔ].id = ΔⲆ.ⵠⵠⲆΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃⲆΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠⵠᐃΔⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃⲆΔᐃ].id = ΔⲆ.ΔᐃⲆΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⵠⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔⵠΔᐃᐃⵠ], Ⲇⵠᐃᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⵠⲆΔ].id = ΔⲆ.ⲆⵠⵠⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆᐃⵠⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔΔⵠⲆⲆΔ], ⲆⵠⵠⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆᐃⵠⲆ].id = ΔⲆ.ᐃⲆᐃⵠⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆΔᐃⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆⲆΔⲆᐃΔ], ⲆΔⲆᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆΔᐃⵠ].id = ΔⲆ.ⵠⲆΔᐃⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⲆⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔⵠⵠᐃⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⲆⲆⲆ].id = ΔⲆ.ⵠᐃⲆⲆⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔⵠΔⵠⲆⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠⵠⵠ].id = ΔⲆ.ᐃⵠⵠⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠⲆⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆΔⵠⵠΔⲆ], ⵠᐃᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠⲆⲆΔ].id = ΔⲆ.ⵠⵠⲆⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃᐃΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔⲆᐃⲆⲆⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃᐃΔⵠ].id = ΔⲆ.ⵠᐃᐃΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⵠᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆΔⲆⵠΔⲆ], ⵠᐃᐃⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⵠᐃⲆ].id = ΔⲆ.ⲆΔⵠᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆⵠⵠⲆⲆΔ], ⲆⲆΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆⲆⲆ].id = ΔⲆ.ᐃΔⲆⲆⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃᐃΔΔᐃᐃΔ], ⲆΔⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠΔΔ].id = ΔⲆ.ᐃⵠⵠΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⲆⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠⵠΔⵠⲆᐃ], ⲆⵠⵠⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⲆⲆⵠ].id = ΔⲆ.ᐃⲆⲆⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⲆᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆΔᐃⵠⲆᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⲆᐃᐃ].id = ΔⲆ.ⲆⵠⲆᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⵠⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆᐃΔⵠⵠⲆ], ⵠⵠΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⵠⲆⵠ].id = ΔⲆ.ⲆΔⵠⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃⵠⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠᐃᐃⲆⵠΔ], ᐃΔᐃⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃⵠⲆΔ].id = ΔⲆ.ΔᐃⵠⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠⲆΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠⵠⵠⲆⵠⵠ], ⵠⲆᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠⲆΔΔ].id = ΔⲆ.ΔⵠⲆΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆΔⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔⲆΔΔⵠⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆΔⵠᐃ].id = ΔⲆ.ⲆⲆΔⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆⵠⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆΔΔΔⲆᐃ], ⵠⵠΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆⵠⲆΔ].id = ΔⲆ.ⲆⲆⵠⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆᐃΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆⵠⵠⵠⵠⲆ], ᐃΔᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆᐃΔᐃ].id = ΔⲆ.ⲆⲆᐃΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⲆⵠⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃᐃΔᐃᐃⵠⲆ], ⲆΔⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⲆⵠⲆ].id = ΔⲆ.ᐃᐃⲆⵠⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠᐃⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⵠⵠΔΔᐃⵠ], ⲆΔⲆᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠᐃⵠΔ].id = ΔⲆ.ᐃⵠᐃⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃΔΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠΔⲆᐃⲆⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃΔΔⲆ].id = ΔⲆ.ⲆᐃΔΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃᐃᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔⵠⲆᐃⲆΔ], ᐃΔΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃᐃᐃᐃ].id = ΔⲆ.ᐃᐃᐃᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃΔΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃᐃⲆⲆⵠᐃΔ], ⵠᐃᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃΔΔⵠ].id = ΔⲆ.ΔᐃΔΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠⵠᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔᐃⲆⵠΔᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠⵠᐃΔ].id = ΔⲆ.ⵠⵠⵠᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠᐃᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠⲆᐃⵠᐃΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠᐃᐃΔ].id = ΔⲆ.ⲆⵠᐃᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔΔΔⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃΔⵠⲆⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔΔΔⵠᐃ].id = ΔⲆ.ΔΔΔⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔⲆⵠᐃⵠⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆⲆⵠ].id = ΔⲆ.ᐃΔⲆⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⲆⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆⲆⵠΔΔⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⲆⲆⵠ].id = ΔⲆ.ᐃⵠⲆⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆΔΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔΔⲆⲆⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆΔΔⵠ].id = ΔⲆ.ᐃⲆΔΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃᐃΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⵠᐃᐃΔⲆΔ], ⵠᐃⵠⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃᐃΔⵠ].id = ΔⲆ.ᐃᐃᐃΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃᐃⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠⵠΔⵠⵠΔ], ⵠᐃᐃⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃᐃⲆΔ].id = ΔⲆ.ᐃᐃᐃⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔΔᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔΔᐃᐃᐃⲆ], ⵠⵠⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔΔᐃΔ].id = ΔⲆ.ⲆΔΔᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆⵠⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆᐃⵠⵠⲆΔ], ᐃᐃΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆⵠⵠᐃ].id = ΔⲆ.ⵠⲆⵠⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆΔⵠᐃΔΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃΔⵠ].id = ΔⲆ.ΔᐃᐃΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔΔⲆΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆⲆΔⲆΔⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔΔⲆΔⲆ].id = ΔⲆ.ΔΔⲆΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆᐃΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃᐃⵠⵠᐃΔΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆᐃΔΔ].id = ΔⲆ.ⵠⲆᐃΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠᐃΔᐃⵠⵠ], ⲆⲆΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃⲆΔ].id = ΔⲆ.ΔᐃᐃⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⲆᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔᐃᐃΔᐃⵠ], ⵠᐃⵠⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⵠⲆᐃⲆ].id = ΔⲆ.ⲆⵠⲆᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⲆⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔᐃΔⵠⲆΔ], ⵠᐃᐃⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⲆⵠⵠ].id = ΔⲆ.ⲆΔⲆⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆᐃΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠⵠᐃⲆΔⵠ], Ⲇⵠᐃᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆᐃΔⲆ].id = ΔⲆ.ⵠⲆᐃΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃΔⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠⵠΔᐃᐃᐃ], ΔᐃΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃΔⵠᐃ].id = ΔⲆ.ⵠᐃΔⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔᐃΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃⲆΔⵠⲆⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔᐃΔⲆ].id = ΔⲆ.ⵠΔᐃΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃΔⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠⲆⵠⲆΔᐃ], ⲆⲆΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃΔⵠⵠ].id = ΔⲆ.ⲆᐃΔⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠⲆⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠᐃⲆⵠᐃΔᐃ], ⵠⵠⲆᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠⲆⵠᐃ].id = ΔⲆ.ⵠⵠⲆⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.Δᐃᐃᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠⵠᐃΔᐃⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.Δᐃᐃᐃᐃ].id = ΔⲆ.Δᐃᐃᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔΔΔΔᐃᐃ], ⲆΔⲆᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃⲆⵠ].id = ΔⲆ.ΔᐃᐃⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆᐃΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠᐃⲆⵠⲆⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆᐃΔΔ].id = ΔⲆ.ᐃⲆᐃΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⲆΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆΔⵠⵠⲆΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⲆΔⲆ].id = ΔⲆ.ᐃⲆⲆΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⵠⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆᐃⵠⵠΔΔ], ⲆΔⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⵠⵠᐃ].id = ΔⲆ.ⲆΔⵠⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃᐃᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆⲆΔᐃⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃᐃᐃΔ].id = ΔⲆ.ⵠᐃᐃᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔΔⵠΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆᐃΔⲆᐃⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔΔⵠΔΔ].id = ΔⲆ.ΔΔⵠΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⲆΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃⵠᐃΔΔⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⲆΔᐃ].id = ΔⲆ.ᐃᐃⲆΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⲆᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔᐃⲆΔⲆⲆ], ᐃΔᐃⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⲆᐃᐃ].id = ΔⲆ.ΔⲆⲆᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆΔⲆⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠᐃΔᐃᐃᐃ], ⵠᐃⵠⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆΔⲆⵠ].id = ΔⲆ.ΔⲆΔⲆⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠᐃᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃΔⵠ], ⵠⵠⲆᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠᐃᐃⲆ].id = ΔⲆ.ΔⵠᐃᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.Ⲇᐃᐃⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆᐃⲆⲆᐃᐃ], ⵠⵠⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.Ⲇᐃᐃⵠⵠ].id = ΔⲆ.Ⲇᐃᐃⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⲆⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆⵠΔⵠᐃⵠ], ⵠᐃᐃⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⲆⵠΔ].id = ΔⲆ.ⲆᐃⲆⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔΔⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃᐃΔⵠⲆⲆⵠ], ⲆΔⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔΔⵠᐃ].id = ΔⲆ.ᐃΔΔⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⲆΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔᐃΔⲆⲆⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⲆΔⵠ].id = ΔⲆ.ⲆᐃⲆΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⲆᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔⲆⵠᐃⵠᐃ], ⵠᐃⵠⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⲆᐃⲆ].id = ΔⲆ.ᐃⲆⲆᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⵠⲆᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆⵠⲆᐃⲆⲆ], ⵠⵠΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⵠⲆᐃ].id = ΔⲆ.ⲆΔⵠⲆᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆⲆⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔⲆᐃΔᐃᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆⲆⲆⲆ].id = ΔⲆ.ⲆⲆⲆⲆⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠⲆⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔΔΔΔⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠⲆⲆⲆ].id = ΔⲆ.ΔⵠⲆⲆⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⵠⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔΔⲆΔΔⵠ], ᐃΔᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆⵠⵠΔ].id = ΔⲆ.ΔⲆⵠⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆⲆⲆᐃΔᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃΔⲆ].id = ΔⲆ.ΔᐃᐃΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆΔᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔⲆΔⵠΔⵠ], ⵠⵠⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆΔᐃⲆ].id = ΔⲆ.ⵠⲆΔᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⵠᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠⵠΔᐃΔΔ], ⵠⵠⲆᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⵠᐃⲆ].id = ΔⲆ.ⵠᐃⵠᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔᐃΔᐃⵠⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠⲆⲆ].id = ΔⲆ.ᐃⵠⵠⲆⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠᐃⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃΔⲆΔⵠΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠᐃⵠᐃ].id = ΔⲆ.ᐃⵠᐃⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔΔᐃⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⵠⵠⵠⵠΔⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔΔᐃⵠ].id = ΔⲆ.ᐃΔΔᐃⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔΔⲆᐃⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔᐃᐃΔᐃⵠ], ᐃΔᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ΔΔⲆᐃⵠ].id = ΔⲆ.ΔΔⲆᐃⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⲆΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠⲆⵠᐃΔⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⲆΔᐃ].id = ΔⲆ.ⵠᐃⲆΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠⲆᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔⲆⲆⵠⵠᐃ], ᐃᐃΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⵠⲆᐃᐃ].id = ΔⲆ.ⵠⵠⲆᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔΔΔΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔΔΔᐃⵠⵠ], ⵠᐃⵠⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ΔΔΔΔⲆ].id = ΔⲆ.ΔΔΔΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔᐃᐃⵠⵠᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆⲆΔ].id = ΔⲆ.ᐃΔⲆⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆᐃⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠᐃⵠⲆᐃⵠⵠ], ⵠᐃⵠΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆᐃⲆΔ].id = ΔⲆ.ⲆⲆᐃⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.Ⲇⵠᐃⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔᐃⲆⵠⵠⲆ], ⲆⲆΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.Ⲇⵠᐃⵠⵠ].id = ΔⲆ.Ⲇⵠᐃⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆⲆᐃⲆⲆⵠ], ⲆΔⲆᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆᐃΔ].id = ΔⲆ.ᐃΔⲆᐃΔ;
		this.ΔⵠᐃⲆⵠ = [];
		for (var ᐃⲆ = 0; 250 > ᐃⲆ; ᐃⲆ++) this.ΔⵠᐃⲆⵠ[ᐃⲆ] = ΔᐃⲆ(0, 0, "", ᐃᐃ[ⵠ.Δᐃᐃⵠⵠⵠᐃ]);
		this.ΔΔΔ = [];
		this.ΔΔΔ[ΔⲆ.ⲆⲆᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃᐃⲆΔⲆⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⲆᐃΔΔ].id = ΔⲆ.ⲆⲆᐃΔΔ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆⲆⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆΔΔⲆᐃⵠ], ⵠᐃⵠⵠ);
		this.ΔΔΔ[ΔⲆ.ⵠⲆⲆⲆΔ].id = ΔⲆ.ⵠⲆⲆⲆΔ;
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆΔᐃΔᐃⲆ], ⲆⵠⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠΔ].id = ΔⲆ.ⵠΔⵠΔ;
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠΔ].info.ⵠⵠ[ⵠΔⵠⲆ] = this.ΔΔΔ[ΔⲆ.ⵠΔⵠΔ].info.ⵠⵠ[0];
		this.ΔΔΔ[ΔⲆ.ᐃᐃᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⲆⵠⲆᐃΔ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃᐃᐃⲆ].id = ΔⲆ.ᐃᐃᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃᐃⲆ].info.ⵠⵠ[ⵠⲆΔᐃ] = this.ΔΔΔ[ΔⲆ.ᐃᐃᐃⲆ].info.ⵠⵠ[0];
		this.ΔΔΔ[ΔⲆ.ⲆⵠᐃΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⲆⵠⵠⵠᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⵠᐃΔᐃ].id = ΔⲆ.ⲆⵠᐃΔᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠΔᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠⲆⵠⲆⵠⲆ], ⵠᐃⵠΔ);
		this.ΔΔΔ[ΔⲆ.ⲆⵠΔᐃⵠ].id = ΔⲆ.ⲆⵠΔᐃⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠΔⲆΔⵠᐃ], ⵠᐃⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠᐃΔⲆ].id = ΔⲆ.ⵠᐃΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃΔⲆ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ⵠᐃΔⲆ].info.ⵠⵠ[ⵠᐃΔ];
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃΔⲆᐃⲆⲆ], ⵠᐃᐃΔ);
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠᐃ].id = ΔⲆ.ⲆΔⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠᐃ].info.ⵠⵠ[ⵠⲆΔᐃ] = this.ΔΔΔ[ΔⲆ.ⲆΔⵠᐃ].info.ⵠⵠ[0];
		this.ΔΔΔ[ΔⲆ.ⵠᐃⲆᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠᐃⲆⲆⲆⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠᐃⲆᐃᐃ].id = ΔⲆ.ⵠᐃⲆᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃⵠΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠᐃΔᐃⵠᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠᐃⵠΔⲆ].id = ΔⲆ.ⵠᐃⵠΔⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃΔⵠⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃᐃΔΔΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃΔⵠⵠⵠ].id = ΔⲆ.ᐃΔⵠⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆΔᐃⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃᐃᐃΔΔⲆ], ⲆⵠⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ⲆΔᐃⲆΔ].id = ΔⲆ.ⲆΔᐃⲆΔ;
		this.ΔΔΔ[ΔⲆ.ⲆⲆΔⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⵠⵠΔᐃᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⲆΔⲆᐃ].id = ΔⲆ.ⲆⲆΔⲆᐃ;
		this.ΔΔΔ[ΔⲆ.ΔⲆⲆΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃΔΔⵠⵠⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ΔⲆⲆΔᐃ].id = ΔⲆ.ΔⲆⲆΔᐃ;
		this.ΔΔΔ[ΔⲆ.ΔⵠΔⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⲆⲆΔⵠⵠ], ⵠᐃⵠⵠ);
		this.ΔΔΔ[ΔⲆ.ΔⵠΔⲆⵠ].id = ΔⲆ.ΔⵠΔⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃⵠΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔⲆⵠᐃⲆΔ], ᐃΔᐃⲆ);
		this.ΔΔΔ[ΔⲆ.ⲆᐃⵠΔΔ].id = ΔⲆ.ⲆᐃⵠΔΔ;
		this.ΔΔΔ[ΔⲆ.ⵠⵠΔⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔⲆⲆⲆⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⵠΔⲆΔ].id = ΔⲆ.ⵠⵠΔⲆΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠΔⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃΔⵠᐃⵠᐃ], ⲆΔⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃⵠΔⵠΔ].id = ΔⲆ.ᐃⵠΔⵠΔ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃΔᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⵠᐃΔᐃⲆ], ⵠⲆᐃΔ);
		this.ΔΔΔ[ΔⲆ.ᐃᐃΔᐃⵠ].id = ΔⲆ.ᐃᐃΔᐃⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠⵠΔΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃⵠΔⲆⵠⵠ], ⵠΔΔᐃ);
		this.ΔΔΔ[ΔⲆ.ⵠⵠΔΔⲆ].id = ΔⲆ.ⵠⵠΔΔⲆ;
		this.ΔΔΔ[ΔⲆ.ΔⲆⲆⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⲆΔⲆᐃΔ], ⵠⲆᐃΔ);
		this.ΔΔΔ[ΔⲆ.ΔⲆⲆⵠΔ].id = ΔⲆ.ΔⲆⲆⵠΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆⵠⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔΔⲆΔᐃⲆ], ⵠⵠΔⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆⵠⲆᐃ].id = ΔⲆ.ᐃⲆⵠⲆᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆⲆⵠᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠᐃⵠᐃΔᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⲆⵠᐃⲆ].id = ΔⲆ.ⲆⲆⵠᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃⵠⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⵠⵠᐃΔⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃᐃⵠⵠⲆ].id = ΔⲆ.ᐃᐃⵠⵠⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃⵠⵠⲆ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ᐃᐃⵠⵠⲆ].info.ⵠⵠ[ⵠΔΔⲆ];
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠᐃⵠⵠΔΔ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠᐃΔ].id = ΔⲆ.ᐃⵠⵠᐃΔ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⵠⲆⲆⲆⲆ], ⵠᐃⵠⵠ);
		this.ΔΔΔ[ΔⲆ.ⵠⲆⵠᐃΔ].id = ΔⲆ.ⵠⲆⵠᐃΔ;
		this.ΔΔΔ[ΔⲆ.ΔΔⵠΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⵠΔⲆΔΔ], ⵠⵠⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ΔΔⵠΔᐃ].id = ΔⲆ.ΔΔⵠΔᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆΔⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⲆⵠⵠᐃⲆ], ⵠᐃⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠⲆΔⲆΔ].id = ΔⲆ.ⵠⲆΔⲆΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⲆΔᐃⲆⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠΔⵠ].id = ΔⲆ.ᐃⵠⵠΔⵠ;
		this.ΔΔΔ[ΔⲆ.ΔᐃⵠΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔⲆΔΔᐃᐃ], ᐃΔΔΔ);
		this.ΔΔΔ[ΔⲆ.ΔᐃⵠΔᐃ].id = ΔⲆ.ΔᐃⵠΔᐃ;
		this.ΔΔΔ[ΔⲆ.ΔⲆⲆᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠⲆⵠⲆⵠᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ΔⲆⲆᐃⲆ].id = ΔⲆ.ΔⲆⲆᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆΔΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠⵠⲆⲆⵠⲆ], ⵠⵠⲆᐃ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆΔΔᐃ].id = ΔⲆ.ᐃⲆΔΔᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⲆⵠᐃΔⵠ], ⵠⵠΔⲆ);
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆΔ].id = ΔⲆ.ⲆⵠⲆΔ;
		this.ΔΔΔ[ΔⲆ.ⵠΔᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⵠᐃᐃᐃᐃ], ⵠⲆᐃΔ);
		this.ΔΔΔ[ΔⲆ.ⵠΔᐃΔΔ].id = ΔⲆ.ⵠΔᐃΔΔ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃⵠΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⲆᐃⲆⵠΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆᐃⵠΔⲆ].id = ΔⲆ.ⲆᐃⵠΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃΔⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⲆⲆⲆⵠᐃ], ΔᐃΔⲆ);
		this.ΔΔΔ[ΔⲆ.ⲆᐃΔⲆⲆ].id = ΔⲆ.ⲆᐃΔⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠΔⵠΔⵠⵠ], ⵠᐃᐃΔ);
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃⲆⲆ].id = ΔⲆ.ΔᐃᐃⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ΔⵠΔⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⵠⲆⵠⵠⵠ], ⵠⵠⲆᐃ);
		this.ΔΔΔ[ΔⲆ.ΔⵠΔⲆΔ].id = ΔⲆ.ΔⵠΔⲆΔ;
		this.ΔΔΔ[ΔⲆ.ΔⵠΔⲆΔ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ΔⵠΔⲆΔ].info.ⵠⵠ[Ⲇⵠᐃ];
		this.ΔΔΔ[ΔⲆ.ⲆᐃⲆⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆᐃΔΔΔᐃ], ⵠᐃⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ⲆᐃⲆⲆᐃ].id = ΔⲆ.ⲆᐃⲆⲆᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃⲆⲆᐃ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ⲆᐃⲆⲆᐃ].info.ⵠⵠ[Ⲇⵠⵠᐃ];
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆΔᐃⲆⲆΔ], ΔᐃΔⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠΔⲆ].id = ΔⲆ.ⵠΔⵠΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠΔⲆ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ⵠΔⵠΔⲆ].info.ⵠⵠ[ᐃⲆΔ];
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔⲆᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠⲆᐃ].id = ΔⲆ.ᐃⵠⵠⲆᐃ;
		this.ΔΔΔ[ΔⲆ.ΔⵠⵠΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⵠⵠⵠ], ⵠⵠⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ΔⵠⵠΔⲆ].id = ΔⲆ.ΔⵠⵠΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⵠΔᐃᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔΔᐃⵠ], ⵠⵠⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠΔᐃᐃᐃ].id = ΔⲆ.ⵠΔᐃᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆⲆΔⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠᐃⲆⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⲆΔⵠΔ].id = ΔⲆ.ⲆⲆΔⵠΔ;
		this.ΔΔΔ[ΔⲆ.ⵠΔᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⵠᐃᐃᐃᐃ], ᐃΔΔΔ);
		this.ΔΔΔ[ΔⲆ.ⵠΔᐃΔΔ].id = ΔⲆ.ⵠΔᐃΔΔ;
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔⵠⲆΔⵠΔ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆΔⲆ].id = ΔⲆ.ᐃΔⲆΔⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠᐃⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔⲆᐃⲆⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⵠᐃⵠᐃ].id = ΔⲆ.ᐃⵠᐃⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ΔⲆⵠᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆΔⵠΔⲆΔ], ⵠᐃᐃΔ);
		this.ΔΔΔ[ΔⲆ.ΔⲆⵠᐃᐃ].id = ΔⲆ.ΔⲆⵠᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆᐃⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆᐃΔΔⵠΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⲆᐃⲆᐃ].id = ΔⲆ.ⵠⲆᐃⲆᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃⲆᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔᐃΔᐃΔΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠᐃⲆᐃΔ].id = ΔⲆ.ⵠᐃⲆᐃΔ;
		this.ΔΔΔ[ΔⲆ.ᐃΔΔᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠΔᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃΔΔᐃⵠ].id = ΔⲆ.ᐃΔΔᐃⵠ;
		this.ΔΔΔ[ΔⲆ.ΔⵠⲆⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆΔⵠⵠΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ΔⵠⲆⲆⵠ].id = ΔⲆ.ΔⵠⲆⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⵠⵠΔΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃⲆᐃ].id = ΔⲆ.ΔᐃᐃⲆᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆΔᐃΔⵠᐃ], ⵠᐃⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃΔΔ].id = ΔⲆ.ⵠᐃᐃΔΔ;
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⲆΔⲆⵠΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠⵠᐃ].id = ΔⲆ.ⵠΔⵠⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠⵠΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⲆᐃΔⲆᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⵠⵠΔⲆ].id = ΔⲆ.ⲆⵠⵠΔⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠΔⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠΔΔⵠᐃΔ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⵠΔⵠⲆ].id = ΔⲆ.ᐃⵠΔⵠⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆΔⲆᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆᐃⵠᐃⲆᐃ], ⵠⵠΔⲆ);
		this.ΔΔΔ[ΔⲆ.ⲆΔⲆᐃⲆ].id = ΔⲆ.ⲆΔⲆᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃⲆⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠⲆⵠΔΔᐃ], ᐃΔᐃⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠᐃⲆⵠⵠ].id = ΔⲆ.ⵠᐃⲆⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆΔᐃⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔⵠᐃⵠᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆΔᐃⲆⵠ].id = ΔⲆ.ⲆΔᐃⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠⵠⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠΔⲆΔⲆΔ], ⵠᐃⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ⲆⵠⵠⵠΔ].id = ΔⲆ.ⲆⵠⵠⵠΔ;
		this.ΔΔΔ[ΔⲆ.ΔⵠⵠⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⲆᐃᐃᐃⲆ], ⵠⵠΔⲆ);
		this.ΔΔΔ[ΔⲆ.ΔⵠⵠⲆⲆ].id = ΔⲆ.ΔⵠⵠⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆᐃΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⵠⲆⵠΔᐃ], ⵠᐃᐃΔ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆᐃΔⲆ].id = ΔⲆ.ᐃⲆᐃΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⵠΔΔᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆΔᐃⵠᐃΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠΔΔᐃΔ].id = ΔⲆ.ⵠΔΔᐃΔ;
		this.ΔΔΔ[ΔⲆ.ⵠⵠΔᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃⵠⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⵠΔᐃΔ].id = ΔⲆ.ⵠⵠΔᐃΔ;
		this.ΔΔΔ[ΔⲆ.ΔⵠΔΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⲆⲆᐃΔᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ΔⵠΔΔⵠ].id = ΔⲆ.ΔⵠΔΔⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆΔⲆⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃⵠΔᐃⵠΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆΔⲆⲆᐃ].id = ΔⲆ.ⲆΔⲆⲆᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠΔᐃⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠᐃᐃⲆⵠΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠΔᐃⵠᐃ].id = ΔⲆ.ⵠΔᐃⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ΔⵠⲆⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃᐃⵠᐃᐃᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ΔⵠⲆⵠΔ].id = ΔⲆ.ΔⵠⲆⵠΔ;
		this.ΔΔΔ[ΔⲆ.ⵠΔΔΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔΔᐃⲆⵠΔ], ᐃΔᐃΔ);
		this.ΔΔΔ[ΔⲆ.ⵠΔΔΔΔ].id = ΔⲆ.ⵠΔΔΔΔ;
		this.ΔΔΔ[ΔⲆ.ᐃΔᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆᐃΔᐃⵠᐃ], ⵠⵠⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃΔᐃΔⵠ].id = ΔⲆ.ᐃΔᐃΔⵠ;
		this.ΔΔΔ[ΔⲆ.ΔⲆᐃᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⲆΔΔᐃⲆ], ⵠᐃⵠⵠ);
		this.ΔΔΔ[ΔⲆ.ΔⲆᐃᐃⲆ].id = ΔⲆ.ΔⲆᐃᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃⵠΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⵠⲆᐃⲆᐃ], ⵠΔΔᐃ);
		this.ΔΔΔ[ΔⲆ.ⲆᐃⵠΔᐃ].id = ΔⲆ.ⲆᐃⵠΔᐃ;
		this.ΔΔΔ[ΔⲆ.Δᐃᐃⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆᐃΔ], ᐃΔᐃΔ);
		this.ΔΔΔ[ΔⲆ.Δᐃᐃⵠⵠ].id = ΔⲆ.Δᐃᐃⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃΔΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⲆⵠⲆΔ].id = ΔⲆ.ⵠⲆⵠⲆΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆⲆᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠΔⲆⲆⵠⲆ], Ⲇⵠᐃᐃ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆⲆᐃᐃ].id = ΔⲆ.ᐃⲆⲆᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠΔⲆⵠᐃᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⲆⵠᐃΔ].id = ΔⲆ.ᐃⲆⵠᐃΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆⵠⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠⲆᐃⲆᐃⵠ], ⵠᐃⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆⵠⲆⵠ].id = ΔⲆ.ᐃⲆⵠⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ᐃΔΔⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠᐃⵠΔΔⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃΔΔⲆⵠ].id = ΔⲆ.ᐃΔΔⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃⵠΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⵠΔᐃᐃΔ], ⲆΔⲆᐃ);
		this.ΔΔΔ[ΔⲆ.ⲆᐃⵠΔⵠ].id = ΔⲆ.ⲆᐃⵠΔⵠ;
		this.ΔΔΔ[ΔⲆ.ΔᐃΔΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠΔᐃΔΔΔ], 3);
		this.ΔΔΔ[ΔⲆ.ΔᐃΔΔⲆ].id = ΔⲆ.ΔᐃΔΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⵠΔΔΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔⲆᐃⵠΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠΔΔΔⲆ].id = ΔⲆ.ⵠΔΔΔⲆ;
		this.ΔΔΔ[ΔⲆ.ΔⲆΔΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔᐃΔΔΔΔ], ⲆⲆΔΔ);
		this.ΔΔΔ[ΔⲆ.ΔⲆΔΔΔ].id = ΔⲆ.ΔⲆΔΔΔ;
		this.ΔΔΔ[ΔⲆ.ᐃΔⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠΔⵠⵠᐃⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃΔⵠᐃΔ].id = ΔⲆ.ᐃΔⵠᐃΔ;
		this.ΔΔΔ[ΔⲆ.ⲆΔᐃᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃᐃⲆⵠΔⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆΔᐃᐃᐃ].id = ΔⲆ.ⲆΔᐃᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔⲆⲆ], Ⲇⵠᐃᐃ);
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠΔᐃ].id = ΔⲆ.ⵠΔⵠΔᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃΔᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆΔᐃⲆΔΔ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃᐃΔᐃΔ].id = ΔⲆ.ᐃᐃΔᐃΔ;
		this.ΔΔΔ[ΔⲆ.ⵠⵠᐃᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠⵠᐃⲆⵠⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⵠᐃᐃⵠ].id = ΔⲆ.ⵠⵠᐃᐃⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠΔⲆΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆΔᐃⲆⲆΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠΔⲆΔᐃ].id = ΔⲆ.ⵠΔⲆΔᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆᐃΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⲆⲆᐃΔᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⲆᐃΔᐃ].id = ΔⲆ.ⵠⲆᐃΔᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆᐃΔᐃ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ⵠⲆᐃΔᐃ].info.ⵠⵠ[ⲆⲆᐃⲆ];
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⲆⵠᐃΔⵠ], ⵠⲆᐃΔ);
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆΔ].id = ΔⲆ.ⲆⵠⲆΔ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⵠᐃⲆⲆᐃ], ΔᐃΔⲆ);
		this.ΔΔΔ[ΔⲆ.ⲆⵠΔⲆ].id = ΔⲆ.ⲆⵠΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠΔⲆ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ⲆⵠΔⲆ].info.ⵠⵠ[ⵠᐃΔ];
		this.ΔΔΔ[ΔⲆ.ⵠⲆⲆΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⵠᐃΔⲆΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⲆⲆΔⲆ].id = ΔⲆ.ⵠⲆⲆΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠᐃⵠⲆⲆⵠ], ᐃᐃΔΔ);
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆΔΔ].id = ΔⲆ.ⲆⵠⲆΔΔ;
		this.ΔΔΔ[ΔⲆ.ΔΔᐃᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃΔΔⵠⵠⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ΔΔᐃᐃᐃ].id = ΔⲆ.ΔΔᐃᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆΔⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆΔⲆᐃⲆΔ], ᐃᐃΔΔ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆΔⵠᐃ].id = ΔⲆ.ᐃⲆΔⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆΔᐃⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⲆᐃᐃᐃᐃ], ᐃᐃΔΔ);
		this.ΔΔΔ[ΔⲆ.ⲆΔᐃⲆⲆ].id = ΔⲆ.ⲆΔᐃⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ΔᐃΔⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠᐃᐃⲆⵠⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ΔᐃΔⵠⲆ].id = ΔⲆ.ΔᐃΔⵠⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔᐃⵠⲆⵠᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠΔᐃ].id = ΔⲆ.ᐃⵠⵠΔᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆᐃⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆᐃΔⲆⲆᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⲆᐃⵠⵠ].id = ΔⲆ.ᐃⲆᐃⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆⵠⵠⲆⵠⵠ], ⲆⵠⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃᐃⵠ].id = ΔⲆ.ⵠᐃᐃᐃⵠ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠⵠⲆΔⵠⲆ], ⵠᐃⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃᐃⵠᐃΔ].id = ΔⲆ.ᐃᐃⵠᐃΔ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃⵠᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠΔⲆⲆⵠⵠ], ⵠᐃⵠΔ);
		this.ΔΔΔ[ΔⲆ.ᐃᐃⵠᐃᐃ].id = ΔⲆ.ᐃᐃⵠᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ΔⲆⲆⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃΔᐃⵠΔᐃ], ⵠᐃᐃΔ);
		this.ΔΔΔ[ΔⲆ.ΔⲆⲆⲆΔ].id = ΔⲆ.ΔⲆⲆⲆΔ;
		this.ΔΔΔ[ΔⲆ.ⲆΔΔᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⲆΔΔΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆΔΔᐃᐃ].id = ΔⲆ.ⲆΔΔᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⵠⵠⲆⲆⲆ], ᐃΔᐃⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠⲆⵠ].id = ΔⲆ.ⵠΔⵠⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ΔⲆΔⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠⲆᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ΔⲆΔⵠΔ].id = ΔⲆ.ΔⲆΔⵠΔ;
		this.ΔΔΔ[ΔⲆ.ΔⲆΔⵠΔ].info.ⵠⵠ[ⵠΔⵠⲆ] = this.ΔΔΔ[ΔⲆ.ΔⲆΔⵠΔ].info.ⵠⵠ[0];
		this.ΔΔΔ[ΔⲆ.ⲆᐃⲆⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃΔⵠᐃᐃᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆᐃⲆⲆⵠ].id = ΔⲆ.ⲆᐃⲆⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃⲆⲆⵠ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ⲆᐃⲆⲆⵠ].info.ⵠⵠ[ⵠⵠⲆΔ];
		this.ΔΔΔ[ΔⲆ.ΔᐃⵠⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⲆΔΔΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ΔᐃⵠⵠΔ].id = ΔⲆ.ΔᐃⵠⵠΔ;
		this.ΔΔΔ[ΔⲆ.ΔᐃⵠⵠΔ].info.ⵠⵠ[ᐃᐃΔⵠ] = this.ΔΔΔ[ΔⲆ.ΔᐃⵠⵠΔ].info.ⵠⵠ[ⲆⲆᐃⲆ];
		this.ΔΔΔ[ΔⲆ.ⲆΔᐃⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔΔⲆΔⲆΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆΔᐃⵠⵠ].id = ΔⲆ.ⲆΔᐃⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆΔᐃⵠⵠ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ⲆΔᐃⵠⵠ].info.ⵠⵠ[ⵠⵠⵠ];
		this.ΔΔΔ[ΔⲆ.ΔᐃⲆⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⵠⲆᐃᐃᐃ], ⵠᐃᐃΔ);
		this.ΔΔΔ[ΔⲆ.ΔᐃⲆⵠᐃ].id = ΔⲆ.ΔᐃⲆⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠᐃⵠⲆᐃⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆⵠᐃ].id = ΔⲆ.ᐃΔⲆⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ΔⵠᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⲆᐃⲆⵠⲆ], ⵠΔΔᐃ);
		this.ΔΔΔ[ΔⲆ.ΔⵠᐃΔΔ].id = ΔⲆ.ΔⵠᐃΔΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⵠΔⲆΔⵠ], ⲆΔⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃⵠᐃΔΔ].id = ΔⲆ.ᐃⵠᐃΔΔ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃⲆⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⲆⲆⲆΔⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃᐃⲆⲆΔ].id = ΔⲆ.ᐃᐃⲆⲆΔ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃᐃᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠᐃΔⵠⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆᐃᐃᐃⲆ].id = ΔⲆ.ⲆᐃᐃᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ΔΔᐃⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠΔⲆⵠⲆⵠ], ⵠⵠΔⲆ);
		this.ΔΔΔ[ΔⲆ.ΔΔᐃⲆΔ].id = ΔⲆ.ΔΔᐃⲆΔ;
		this.ΔΔΔ[ΔⲆ.ΔⲆᐃⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆΔΔⵠⵠⵠ], ᐃΔᐃΔ);
		this.ΔΔΔ[ΔⲆ.ΔⲆᐃⲆᐃ].id = ΔⲆ.ΔⲆᐃⲆᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆΔⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆΔⲆΔΔΔ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⲆΔⵠⲆ].id = ΔⲆ.ᐃⲆΔⵠⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠΔΔⵠᐃⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃᐃⵠⲆΔ].id = ΔⲆ.ᐃᐃⵠⲆΔ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆⲆⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⲆⵠⵠᐃⲆ], ⵠⵠⲆᐃ);
		this.ΔΔΔ[ΔⲆ.ⵠⲆⲆⲆⵠ].id = ΔⲆ.ⵠⲆⲆⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃΔⵠⵠᐃⲆ], ᐃᐃΔΔ);
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆΔⵠ].id = ΔⲆ.ⲆⵠⲆΔⵠ;
		this.ΔΔΔ[ΔⲆ.ΔⲆⵠⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠΔⵠⲆⲆⲆ], ⵠᐃⵠΔ);
		this.ΔΔΔ[ΔⲆ.ΔⲆⵠⵠⲆ].id = ΔⲆ.ΔⲆⵠⵠⲆ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃΔⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠΔⲆ], ⲆΔⲆᐃ);
		this.ΔΔΔ[ΔⲆ.ⵠᐃΔⲆᐃ].id = ΔⲆ.ⵠᐃΔⲆᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆΔΔᐃᐃΔ], ⵠⵠⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ⲆⵠⵠⲆΔ].id = ΔⲆ.ⲆⵠⵠⲆΔ;
		this.ΔΔΔ[ΔⲆ.ΔⲆᐃᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃΔΔᐃΔⵠ], ⵠⵠⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ΔⲆᐃᐃⵠ].id = ΔⲆ.ΔⲆᐃᐃⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆⲆⵠⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⲆΔᐃⲆΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⲆⵠⵠⵠ].id = ΔⲆ.ⲆⲆⵠⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠⵠⲆΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆⵠᐃⲆΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⵠⲆΔΔ].id = ΔⲆ.ⵠⵠⲆΔΔ;
		this.ΔΔΔ[ΔⲆ.ΔᐃⲆΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃᐃᐃΔⲆᐃ], ⲆⲆΔΔ);
		this.ΔΔΔ[ΔⲆ.ΔᐃⲆΔᐃ].id = ΔⲆ.ΔᐃⲆΔᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆᐃⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆᐃᐃᐃΔᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⲆᐃⵠⲆ].id = ΔⲆ.ᐃⲆᐃⵠⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆᐃⵠⲆ].info.ⵠⵠ[ⵠⵠΔⵠ] = this.ΔΔΔ[ΔⲆ.ᐃⲆᐃⵠⲆ].info.ⵠⵠ[ⵠᐃΔ];
		this.ΔΔΔ[ΔⲆ.ⵠⲆΔᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⲆⲆΔΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⲆΔᐃⵠ].id = ΔⲆ.ⵠⲆΔᐃⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃⲆⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠⵠΔⵠᐃΔ], ⵠⵠⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠᐃⲆⲆⲆ].id = ΔⲆ.ⵠᐃⲆⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⲆᐃⲆᐃⲆ], ⵠᐃⵠΔ);
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠⵠⵠ].id = ΔⲆ.ᐃⵠⵠⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠⵠⲆⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⵠⲆΔⵠⲆ], ⵠᐃⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠⵠⲆⲆΔ].id = ΔⲆ.ⵠⵠⲆⲆΔ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠⵠⵠⲆᐃΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃΔⵠ].id = ΔⲆ.ⵠᐃᐃΔⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔᐃⲆᐃΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠᐃⲆ].id = ΔⲆ.ⲆΔⵠᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃᐃⵠΔΔⲆ], ⵠⵠⲆᐃ);
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆⲆⲆ].id = ΔⲆ.ᐃΔⲆⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔΔΔΔⲆ], ⵠᐃⵠⵠ);
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠΔΔ].id = ΔⲆ.ᐃⵠⵠΔΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠΔΔ].info.ⵠⵠ[ᐃᐃⵠⵠ] = this.ΔΔΔ[ΔⲆ.ᐃⵠⵠΔΔ].info.ⵠⵠ[ⲆⲆΔ];
		this.ΔΔΔ[ΔⲆ.ᐃⲆⲆⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⲆⵠᐃᐃⲆ], ⵠⵠⲆᐃ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆⲆⲆⵠ].id = ΔⲆ.ᐃⲆⲆⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⲆⵠΔᐃᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆᐃᐃ].id = ΔⲆ.ⲆⵠⲆᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆᐃᐃ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ⲆⵠⲆᐃᐃ].info.ⵠⵠ[ⲆⲆᐃ];
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⲆΔⲆⲆΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠⲆⵠ].id = ΔⲆ.ⲆΔⵠⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ΔᐃⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆᐃΔⲆⲆᐃ], ⲆⲆΔΔ);
		this.ΔΔΔ[ΔⲆ.ΔᐃⵠⲆΔ].id = ΔⲆ.ΔᐃⵠⲆΔ;
		this.ΔΔΔ[ΔⲆ.ΔⵠⲆΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⵠᐃᐃⵠⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ΔⵠⲆΔΔ].id = ΔⲆ.ΔⵠⲆΔΔ;
		this.ΔΔΔ[ΔⲆ.ΔⵠⲆΔΔ].info.ⵠⵠ[ⲆΔⲆΔ] = this.ΔΔΔ[ΔⲆ.ΔⵠⲆΔΔ].info.ⵠⵠ[0];
		this.ΔΔΔ[ΔⲆ.ⲆⲆΔⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⲆⵠᐃⵠᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⲆΔⵠᐃ].id = ΔⲆ.ⲆⲆΔⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆⲆⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃΔⵠⲆⵠⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⲆⵠⲆΔ].id = ΔⲆ.ⲆⲆⵠⲆΔ;
		this.ΔΔΔ[ΔⲆ.ⲆⲆᐃΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔⲆᐃᐃᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⲆᐃΔᐃ].id = ΔⲆ.ⲆⲆᐃΔᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃⲆⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⲆᐃⲆⲆᐃ], ⲆΔⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃᐃⲆⵠⲆ].id = ΔⲆ.ᐃᐃⲆⵠⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠᐃⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔⵠⲆⵠⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⵠᐃⵠΔ].id = ΔⲆ.ᐃⵠᐃⵠΔ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃΔΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔΔᐃⵠⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆᐃΔΔⲆ].id = ΔⲆ.ⲆᐃΔΔⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃᐃᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠΔᐃᐃⵠⵠ], ⵠᐃᐃΔ);
		this.ΔΔΔ[ΔⲆ.ᐃᐃᐃᐃᐃ].id = ΔⲆ.ᐃᐃᐃᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ΔᐃΔΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔⲆᐃΔⵠ], ᐃΔᐃⲆ);
		this.ΔΔΔ[ΔⲆ.ΔᐃΔΔⵠ].id = ΔⲆ.ΔᐃΔΔⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠⵠⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⵠᐃⵠᐃⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⵠⵠᐃΔ].id = ΔⲆ.ⵠⵠⵠᐃΔ;
		this.ΔΔΔ[ΔⲆ.ⵠⵠⵠᐃΔ].info.ⵠⵠ[ΔⲆⵠΔ] = this.ΔΔΔ[ΔⲆ.ⵠⵠⵠᐃΔ].info.ⵠⵠ[ᐃⲆΔ];
		this.ΔΔΔ[ΔⲆ.ⲆⵠᐃᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⲆᐃⵠⵠΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⵠᐃᐃΔ].id = ΔⲆ.ⲆⵠᐃᐃΔ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠᐃᐃΔ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ⲆⵠᐃᐃΔ].info.ⵠⵠ[Δⵠⵠ];
		this.ΔΔΔ[ΔⲆ.ΔΔΔⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⲆΔᐃᐃⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ΔΔΔⵠᐃ].id = ΔⲆ.ΔΔΔⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠᐃΔΔⵠΔ], ᐃΔᐃΔ);
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆⲆⵠ].id = ΔⲆ.ᐃΔⲆⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆⲆⵠ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ᐃΔⲆⲆⵠ].info.ⵠⵠ[0];
		this.ΔΔΔ[ΔⲆ.ᐃⵠⲆⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⵠᐃⵠᐃΔ], Ⲇⵠᐃᐃ);
		this.ΔΔΔ[ΔⲆ.ᐃⵠⲆⲆⵠ].id = ΔⲆ.ᐃⵠⲆⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆΔΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆΔⲆΔⲆΔ], ⵠⵠⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆΔΔⵠ].id = ΔⲆ.ᐃⲆΔΔⵠ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔⲆᐃᐃⵠΔ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃᐃᐃΔⵠ].id = ΔⲆ.ᐃᐃᐃΔⵠ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃᐃⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃⵠⲆ], ⵠΔΔᐃ);
		this.ΔΔΔ[ΔⲆ.ᐃᐃᐃⲆΔ].id = ΔⲆ.ᐃᐃᐃⲆΔ;
		this.ΔΔΔ[ΔⲆ.ⲆΔΔᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠᐃᐃᐃΔᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆΔΔᐃΔ].id = ΔⲆ.ⲆΔΔᐃΔ;
		this.ΔΔΔ[ΔⲆ.ⲆΔΔᐃΔ].info.ⵠⵠ[ⵠⵠΔⵠ] = this.ΔΔΔ[ΔⲆ.ⲆΔΔᐃΔ].info.ⵠⵠ[ⵠΔΔⲆ];
		this.ΔΔΔ[ΔⲆ.ⵠⲆⵠⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⲆⵠⵠⲆᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⲆⵠⵠᐃ].id = ΔⲆ.ⵠⲆⵠⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆⵠⵠᐃ].info.ⵠⵠ[ⵠᐃᐃⲆ] = this.ΔΔΔ[ΔⲆ.ⵠⲆⵠⵠᐃ].info.ⵠⵠ[0];
		this.ΔΔΔ[ΔⲆ.ΔᐃΔⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃΔᐃ], ⵠⲆᐃΔ);
		this.ΔΔΔ[ΔⲆ.ΔᐃΔⲆⲆ].id = ΔⲆ.ΔᐃΔⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⲆᐃⵠΔⵠ], ⵠΔΔᐃ);
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃⲆᐃ].id = ΔⲆ.ⵠᐃᐃⲆᐃ;
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆΔΔᐃΔⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃΔⵠ].id = ΔⲆ.ΔᐃᐃΔⵠ;
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃΔⵠ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ΔᐃᐃΔⵠ].info.ⵠⵠ[ⵠΔⵠᐃ];
		this.ΔΔΔ[ΔⲆ.ΔΔⲆΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠᐃⵠᐃⵠΔ], ᐃΔᐃΔ);
		this.ΔΔΔ[ΔⲆ.ΔΔⲆΔⲆ].id = ΔⲆ.ΔΔⲆΔⲆ;
		this.ΔΔΔ[ΔⲆ.ΔΔⲆΔⲆ].info.ⵠⵠ[ᐃⲆⵠᐃ] = this.ΔΔΔ[ΔⲆ.ΔΔⲆΔⲆ].info.ⵠⵠ[ⲆⲆᐃ];
		this.ΔΔΔ[ΔⲆ.ⵠⲆᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⲆⲆᐃΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⲆᐃΔΔ].id = ΔⲆ.ⵠⲆᐃΔΔ;
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃᐃᐃΔⵠⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃⲆΔ].id = ΔⲆ.ΔᐃᐃⲆΔ;
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃⲆΔ].info.ⵠⵠ[ᐃⲆⵠᐃ] = this.ΔΔΔ[ΔⲆ.ΔᐃᐃⲆΔ].info.ⵠⵠ[0];
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠⵠⵠΔⲆᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆᐃⲆ].id = ΔⲆ.ⲆⵠⲆᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆⵠⲆᐃⲆ].info.ⵠⵠ[ΔΔⵠⲆ] = this.ΔΔΔ[ΔⲆ.ⲆⵠⲆᐃⲆ].info.ⵠⵠ[Ⲇⵠⵠᐃ];
		this.ΔΔΔ[ΔⲆ.ⲆΔⲆⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃᐃⵠᐃΔΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆΔⲆⵠⵠ].id = ΔⲆ.ⲆΔⲆⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆᐃΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠⵠⲆᐃᐃⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⲆᐃΔⲆ].id = ΔⲆ.ⵠⲆᐃΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆᐃΔⲆ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ⵠⲆᐃΔⲆ].info.ⵠⵠ[ⵠⵠⲆΔ];
		this.ΔΔΔ[ΔⲆ.ⵠᐃΔⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃⲆᐃ], ⵠⲆᐃΔ);
		this.ΔΔΔ[ΔⲆ.ⵠᐃΔⵠᐃ].id = ΔⲆ.ⵠᐃΔⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠΔᐃΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆᐃⲆᐃᐃⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠΔᐃΔⲆ].id = ΔⲆ.ⵠΔᐃΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃΔⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠΔⲆΔⲆⵠ], ΔᐃΔⲆ);
		this.ΔΔΔ[ΔⲆ.ⲆᐃΔⵠⵠ].id = ΔⲆ.ⲆᐃΔⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠⵠⲆⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⵠᐃⵠⵠᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⵠⲆⵠᐃ].id = ΔⲆ.ⵠⵠⲆⵠᐃ;
		this.ΔΔΔ[ΔⲆ.Δᐃᐃᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃᐃⲆⲆⲆΔ], 3);
		this.ΔΔΔ[ΔⲆ.Δᐃᐃᐃᐃ].id = ΔⲆ.Δᐃᐃᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠᐃΔᐃⲆΔ], ⲆΔⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃⲆⵠ].id = ΔⲆ.ΔᐃᐃⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠⲆⲆᐃⲆ], ⲆⲆΔΔ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆᐃΔΔ].id = ΔⲆ.ᐃⲆᐃΔΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆⲆΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔΔΔᐃΔⵠ], ⵠⲆᐃΔ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆⲆΔⲆ].id = ΔⲆ.ᐃⲆⲆΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⵠΔᐃᐃᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠⵠᐃ].id = ΔⲆ.ⲆΔⵠⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃᐃΔᐃᐃᐃ], ⵠⵠΔⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃᐃΔ].id = ΔⲆ.ⵠᐃᐃᐃΔ;
		this.ΔΔΔ[ΔⲆ.ΔΔⵠΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⲆⲆⲆΔⲆ], ⵠⲆᐃΔ);
		this.ΔΔΔ[ΔⲆ.ΔΔⵠΔΔ].id = ΔⲆ.ΔΔⵠΔΔ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃⲆΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔⵠⲆⲆᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃᐃⲆΔᐃ].id = ΔⲆ.ᐃᐃⲆΔᐃ;
		this.ΔΔΔ[ΔⲆ.ΔⲆⲆᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⵠⵠⵠⲆⲆ], ⲆΔⲆᐃ);
		this.ΔΔΔ[ΔⲆ.ΔⲆⲆᐃᐃ].id = ΔⲆ.ΔⲆⲆᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ΔⵠᐃᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⵠⲆⵠᐃⲆ], ᐃᐃΔΔ);
		this.ΔΔΔ[ΔⲆ.ΔⵠᐃᐃⲆ].id = ΔⲆ.ΔⵠᐃᐃⲆ;
		this.ΔΔΔ[ΔⲆ.Ⲇᐃᐃⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆΔⵠΔᐃⲆ], ⵠᐃⵠⵠ);
		this.ΔΔΔ[ΔⲆ.Ⲇᐃᐃⵠⵠ].id = ΔⲆ.Ⲇᐃᐃⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ΔⲆΔⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃⵠⲆᐃᐃⲆ], ⲆⲆΔΔ);
		this.ΔΔΔ[ΔⲆ.ΔⲆΔⲆⵠ].id = ΔⲆ.ΔⲆΔⲆⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃⲆⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⵠⵠⵠⲆᐃ], ⵠᐃⵠⵠ);
		this.ΔΔΔ[ΔⲆ.ⲆᐃⲆⵠΔ].id = ΔⲆ.ⲆᐃⲆⵠΔ;
		this.ΔΔΔ[ΔⲆ.ᐃΔΔⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⲆⲆᐃᐃΔ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃΔΔⵠᐃ].id = ΔⲆ.ᐃΔΔⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠⵠⲆᐃΔⵠ], ᐃΔᐃΔ);
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠⲆᐃ].id = ΔⲆ.ⲆΔⵠⲆᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆⲆⲆⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆⲆⲆΔⵠΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⲆⲆⲆⲆ].id = ΔⲆ.ⲆⲆⲆⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃⲆΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃΔΔᐃⲆⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆᐃⲆΔⵠ].id = ΔⲆ.ⲆᐃⲆΔⵠ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆⲆᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⲆⲆⲆΔΔ], ᐃΔᐃΔ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆⲆᐃⲆ].id = ΔⲆ.ᐃⲆⲆᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ΔⵠⲆⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆΔⲆᐃΔⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ΔⵠⲆⲆⲆ].id = ΔⲆ.ΔⵠⲆⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ΔⲆⵠⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔᐃᐃⵠᐃΔ], Ⲇⵠᐃᐃ);
		this.ΔΔΔ[ΔⲆ.ΔⲆⵠⵠΔ].id = ΔⲆ.ΔⲆⵠⵠΔ;
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃᐃⵠⵠⵠⵠ], ⲆΔⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃΔⲆ].id = ΔⲆ.ΔᐃᐃΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆΔᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⲆⲆⲆⲆΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⲆΔᐃⲆ].id = ΔⲆ.ⵠⲆΔᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃⵠᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆΔΔⲆΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠᐃⵠᐃⲆ].id = ΔⲆ.ⵠᐃⵠᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠⲆᐃⵠⲆΔ], ⵠᐃⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠⲆⲆ].id = ΔⲆ.ᐃⵠⵠⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠᐃⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔⲆᐃⲆⲆ], ᐃΔᐃⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃⵠᐃⵠᐃ].id = ΔⲆ.ᐃⵠᐃⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃΔΔᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠΔᐃ], ⵠᐃⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃΔΔᐃⵠ].id = ΔⲆ.ᐃΔΔᐃⵠ;
		this.ΔΔΔ[ΔⲆ.ΔΔⲆᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔᐃⲆᐃΔᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ΔΔⲆᐃⵠ].id = ΔⲆ.ΔΔⲆᐃⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃⲆΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⲆΔⵠᐃᐃ], ᐃΔᐃⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠᐃⲆΔᐃ].id = ΔⲆ.ⵠᐃⲆΔᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠⵠⲆᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⵠⵠⵠⵠⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⵠⲆᐃᐃ].id = ΔⲆ.ⵠⵠⲆᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ΔΔΔΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠⵠⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ΔΔΔΔⲆ].id = ΔⲆ.ΔΔΔΔⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆᐃⲆΔΔᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆⲆΔ].id = ΔⲆ.ᐃΔⲆⲆΔ;
		this.ΔΔΔ[ΔⲆ.ⲆⲆᐃⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆⲆΔᐃⲆΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⲆᐃⲆΔ].id = ΔⲆ.ⲆⲆᐃⲆΔ;
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔᐃᐃⲆΔ], ⵠⵠⲆᐃ);
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆᐃΔ].id = ΔⲆ.ᐃΔⲆᐃΔ;
		this.ΔΔΔ[ΔⲆ.Ⲇⵠᐃⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⵠⲆΔᐃΔ], ⵠⵠΔⲆ);
		this.ΔΔΔ[ΔⲆ.Ⲇⵠᐃⵠⵠ].id = ΔⲆ.Ⲇⵠᐃⵠⵠ;
		this.ⵠⲆⲆ = [];
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆᐃⵠⲆⲆΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆᐃΔΔ].id = ᐃⵠⵠ.ⲆⲆᐃΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆⲆⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⲆⵠᐃⵠᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆⲆⲆΔ].id = ᐃⵠⵠ.ⵠⲆⲆⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆⲆΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃⵠⵠⲆⵠᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆⲆΔᐃ].id = ᐃⵠⵠ.ΔⲆⲆΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠΔⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⵠⲆⲆⵠⲆ], ⵠⵠΔⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠΔⲆⵠ].id = ᐃⵠⵠ.ΔⵠΔⲆⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⵠΔⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆᐃⵠΔᐃⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⵠΔⲆΔ].id = ᐃⵠⵠ.ⵠⵠΔⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠΔⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆΔⲆⲆⲆΔ], ⲆⲆΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠΔⵠΔ].id = ᐃⵠⵠ.ᐃⵠΔⵠΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃⵠΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆΔⵠᐃⲆΔ], ⵠΔΔᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃⵠΔΔ].id = ᐃⵠⵠ.ⲆᐃⵠΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⲆᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠΔᐃⲆᐃΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⲆᐃᐃ].id = ᐃⵠⵠ.ⵠᐃⲆᐃᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⵠΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⲆΔⵠΔᐃ], ⵠΔΔᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⵠΔⲆ].id = ᐃⵠⵠ.ⵠᐃⵠΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔⵠⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃΔⲆΔΔⲆ], ⵠⲆᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔⵠⵠⵠ].id = ᐃⵠⵠ.ᐃΔⵠⵠⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔᐃⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠⲆⵠⵠⵠⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔᐃⲆΔ].id = ᐃⵠⵠ.ⲆΔᐃⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆΔⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔᐃᐃⵠⲆⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆΔⲆᐃ].id = ᐃⵠⵠ.ⲆⲆΔⲆᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃΔᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃᐃⲆⲆΔⵠ], ΔᐃΔⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃΔᐃⵠ].id = ᐃⵠⵠ.ᐃᐃΔᐃⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⵠΔΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔᐃᐃᐃⵠⵠ], ᐃᐃΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⵠΔΔⲆ].id = ᐃⵠⵠ.ⵠⵠΔΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⵠⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆᐃᐃⲆᐃΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⵠⲆᐃ].id = ᐃⵠⵠ.ᐃⲆⵠⲆᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆⵠᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠⲆΔⲆΔⵠ], Ⲇⵠᐃᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆⵠᐃⲆ].id = ᐃⵠⵠ.ⲆⲆⵠᐃⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠⵠⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⵠᐃΔ].id = ᐃⵠⵠ.ᐃⵠⵠᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⲆᐃᐃΔⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆⵠᐃΔ].id = ᐃⵠⵠ.ⵠⲆⵠᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔⵠΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⵠⲆⵠⲆΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔⵠΔᐃ].id = ᐃⵠⵠ.ΔΔⵠΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆΔⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⵠⵠᐃⲆΔ], ⲆΔⲆⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆΔⲆΔ].id = ᐃⵠⵠ.ⵠⲆΔⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⵠΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆᐃΔⲆΔⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⵠΔⵠ].id = ᐃⵠⵠ.ᐃⵠⵠΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃⵠΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠᐃⲆᐃΔᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃⵠΔᐃ].id = ᐃⵠⵠ.ΔᐃⵠΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆⲆᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⵠᐃⲆΔΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆⲆᐃⲆ].id = ᐃⵠⵠ.ΔⲆⲆᐃⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆΔΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⲆⵠΔⲆⲆ], ⵠᐃᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆΔΔᐃ].id = ᐃⵠⵠ.ᐃⲆΔΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⲆⵠⲆᐃΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⲆΔ].id = ᐃⵠⵠ.ⲆⵠⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠⲆᐃⵠᐃ], ΔᐃΔⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔᐃΔΔ].id = ᐃⵠⵠ.ⵠΔᐃΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃⵠΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⵠᐃᐃΔⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃⵠΔⲆ].id = ᐃⵠⵠ.ⲆᐃⵠΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃΔⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⵠⲆᐃᐃΔ], ⵠⵠⲆᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃΔⲆⲆ].id = ᐃⵠⵠ.ⲆᐃΔⲆⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃᐃⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔΔᐃᐃⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃᐃⲆⲆ].id = ᐃⵠⵠ.ΔᐃᐃⲆⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠⲆᐃⵠᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔᐃΔΔ].id = ᐃⵠⵠ.ⵠΔᐃΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔⲆΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔΔⵠΔⲆᐃ], ᐃΔΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔⲆΔⲆ].id = ᐃⵠⵠ.ᐃΔⲆΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠᐃⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔⵠⲆΔⵠᐃ], ⲆΔⲆⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠᐃⵠᐃ].id = ᐃⵠⵠ.ᐃⵠᐃⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆⵠᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⲆⵠΔΔⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆⵠᐃᐃ].id = ᐃⵠⵠ.ΔⲆⵠᐃᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆᐃⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⵠⵠΔᐃΔ], ⵠᐃᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆᐃⲆᐃ].id = ᐃⵠⵠ.ⵠⲆᐃⲆᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⲆᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠⵠΔⲆΔᐃ], ᐃΔΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⲆᐃΔ].id = ᐃⵠⵠ.ⵠᐃⲆᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔΔᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⵠⲆⲆᐃⲆ], ᐃᐃΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔΔᐃⵠ].id = ᐃⵠⵠ.ᐃΔΔᐃⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠⲆⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃⲆⲆⵠⵠⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠⲆⲆⵠ].id = ᐃⵠⵠ.ΔⵠⲆⲆⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃᐃⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃΔΔᐃⲆᐃ], ⵠᐃᐃⵠ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃᐃⲆᐃ].id = ᐃⵠⵠ.ΔᐃᐃⲆᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⵠⲆᐃΔⲆ], ⵠᐃᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃᐃΔΔ].id = ᐃⵠⵠ.ⵠᐃᐃΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔⵠⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⵠΔᐃⲆᐃ], ⵠᐃᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔⵠⵠᐃ].id = ᐃⵠⵠ.ⵠΔⵠⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⵠΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⲆⵠᐃᐃⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⵠΔⲆ].id = ᐃⵠⵠ.ⲆⵠⵠΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠΔⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠᐃⵠⵠⵠΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠΔⵠⲆ].id = ᐃⵠⵠ.ᐃⵠΔⵠⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⲆᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔΔⵠⲆΔⲆ], ⲆΔⲆᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⲆᐃⲆ].id = ᐃⵠⵠ.ⲆΔⲆᐃⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⲆⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠΔⵠⵠΔΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⲆⵠⵠ].id = ᐃⵠⵠ.ⵠᐃⲆⵠⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔᐃⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆⵠᐃⲆΔⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔᐃⲆⵠ].id = ᐃⵠⵠ.ⲆΔᐃⲆⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⵠⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠⵠΔⵠΔᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⵠⵠΔ].id = ᐃⵠⵠ.ⲆⵠⵠⵠΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠⵠⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⵠⲆΔΔΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠⵠⲆⲆ].id = ᐃⵠⵠ.ΔⵠⵠⲆⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆᐃΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⲆⲆⵠΔⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆᐃΔⲆ].id = ᐃⵠⵠ.ᐃⲆᐃΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔΔᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔΔΔⲆⵠⵠ], ᐃΔΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔΔᐃΔ].id = ᐃⵠⵠ.ⵠΔΔᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⵠΔᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⵠᐃⵠΔΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⵠΔᐃΔ].id = ᐃⵠⵠ.ⵠⵠΔᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠΔΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠΔⵠᐃΔⲆ], ⵠⵠⲆⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠΔΔⵠ].id = ᐃⵠⵠ.ΔⵠΔΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⲆⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠⲆⲆΔⲆⵠ], ⵠⵠΔⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⲆⲆᐃ].id = ᐃⵠⵠ.ⲆΔⲆⲆᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔᐃⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔᐃΔΔⵠᐃ], ᐃᐃΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔᐃⵠᐃ].id = ᐃⵠⵠ.ⵠΔᐃⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠⲆⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⲆⲆΔⲆⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠⲆⵠΔ].id = ᐃⵠⵠ.ΔⵠⲆⵠΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔΔⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⲆᐃᐃΔⲆ], ⲆⲆΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔΔⲆⵠ].id = ᐃⵠⵠ.ᐃΔΔⲆⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃⵠΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⲆⵠΔᐃΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃⵠΔⵠ].id = ᐃⵠⵠ.ⲆᐃⵠΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃΔΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆΔΔΔᐃⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃΔΔⲆ].id = ᐃⵠⵠ.ΔᐃΔΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔΔΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠᐃⲆΔⵠᐃ], ⵠᐃᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔΔΔⲆ].id = ᐃⵠⵠ.ⵠΔΔΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆΔΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.Δⵠⵠⵠᐃⵠᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆΔΔΔ].id = ᐃⵠⵠ.ΔⲆΔΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃᐃⲆΔⵠⵠ], ⵠᐃⵠⵠ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔⵠᐃΔ].id = ᐃⵠⵠ.ᐃΔⵠᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔΔΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆΔᐃⵠⲆΔ], ⲆⵠⵠⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔΔΔΔ].id = ᐃⵠⵠ.ⵠΔΔΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠᐃΔⵠⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔᐃΔⵠ].id = ᐃⵠⵠ.ᐃΔᐃΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆᐃᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔᐃΔΔⲆΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆᐃᐃⲆ].id = ᐃⵠⵠ.ΔⲆᐃᐃⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃⵠΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃᐃᐃⲆᐃᐃ], ⵠⵠⲆⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃⵠΔᐃ].id = ᐃⵠⵠ.ⲆᐃⵠΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.Δᐃᐃⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃΔⵠᐃᐃᐃ], ᐃΔᐃⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.Δᐃᐃⵠⵠ].id = ᐃⵠⵠ.Δᐃᐃⵠⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⲆⲆᐃᐃᐃ], Ⲇⵠᐃᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆⵠⲆΔ].id = ᐃⵠⵠ.ⵠⲆⵠⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⲆᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⲆⵠⲆⵠⵠ], ⵠⵠⲆᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⲆᐃᐃ].id = ᐃⵠⵠ.ᐃⲆⲆᐃᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃΔΔⲆΔⲆ], ⵠⵠⲆᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⵠᐃΔ].id = ᐃⵠⵠ.ᐃⲆⵠᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⵠⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔᐃⲆᐃᐃΔ], ⲆΔⲆᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⵠⲆⵠ].id = ᐃⵠⵠ.ᐃⲆⵠⲆⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔᐃᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⲆΔΔⲆⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔᐃᐃᐃ].id = ᐃⵠⵠ.ⲆΔᐃᐃᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔⵠΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⲆⲆⲆᐃΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔⵠΔᐃ].id = ᐃⵠⵠ.ⵠΔⵠΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃΔᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆᐃⵠΔᐃΔ], ᐃᐃΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃΔᐃΔ].id = ᐃⵠⵠ.ᐃᐃΔᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⵠᐃᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠΔⲆᐃⵠᐃ], ⵠᐃⵠΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⵠᐃᐃⵠ].id = ᐃⵠⵠ.ⵠⵠᐃᐃⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔⲆΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠΔⲆΔⲆᐃ], ΔᐃΔⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔⲆΔᐃ].id = ᐃⵠⵠ.ⵠΔⲆΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆᐃΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔΔᐃⲆΔᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆᐃΔᐃ].id = ᐃⵠⵠ.ⵠⲆᐃΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⲆⵠⲆᐃΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⲆΔ].id = ᐃⵠⵠ.ⲆⵠⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆⲆΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔᐃⲆᐃⲆⲆ], ⵠⵠⲆⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆⲆΔⲆ].id = ᐃⵠⵠ.ⵠⲆⲆΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⲆΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⵠΔⲆᐃΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⲆΔΔ].id = ᐃⵠⵠ.ⲆⵠⲆΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔᐃᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⵠᐃⲆⲆᐃ], ⵠⵠⲆᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔᐃᐃᐃ].id = ᐃⵠⵠ.ΔΔᐃᐃᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆΔⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⲆⵠΔⵠⵠ], ⲆΔⲆᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆΔⵠᐃ].id = ᐃⵠⵠ.ᐃⲆΔⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔᐃⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔᐃΔⵠⲆⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔᐃⲆⲆ].id = ᐃⵠⵠ.ⲆΔᐃⲆⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃΔⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃΔⵠΔΔⵠ], ⲆⲆΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃΔⵠⲆ].id = ᐃⵠⵠ.ΔᐃΔⵠⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⵠΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔⲆᐃⲆᐃⵠ], ⵠᐃᐃⵠ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⵠΔᐃ].id = ᐃⵠⵠ.ᐃⵠⵠΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆᐃⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⵠⲆⲆᐃⵠ], ᐃΔΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆᐃⵠⵠ].id = ᐃⵠⵠ.ᐃⲆᐃⵠⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃᐃᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠⲆΔᐃⲆ], ⵠᐃⵠⵠ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃᐃᐃⵠ].id = ᐃⵠⵠ.ⵠᐃᐃᐃⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⲆᐃⵠΔᐃ], ⵠᐃⵠⵠ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⵠᐃΔ].id = ᐃⵠⵠ.ᐃᐃⵠᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⵠᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠⲆΔⵠⵠ], ᐃΔᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⵠᐃᐃ].id = ᐃⵠⵠ.ᐃᐃⵠᐃᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆⲆⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆᐃⵠⲆⵠΔ], ⵠⵠⲆᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆⲆⲆΔ].id = ᐃⵠⵠ.ΔⲆⲆⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔΔᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆΔᐃΔΔΔ], ᐃΔᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔΔᐃᐃ].id = ᐃⵠⵠ.ⲆΔΔᐃᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔⵠⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔᐃⲆᐃΔⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔⵠⲆⵠ].id = ᐃⵠⵠ.ⵠΔⵠⲆⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃⵠⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⲆⲆᐃᐃΔ], ᐃΔᐃⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃⵠⵠΔ].id = ᐃⵠⵠ.ΔᐃⵠⵠΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔᐃⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⲆᐃΔⲆⵠ], ⵠⵠⲆᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔᐃⵠⵠ].id = ᐃⵠⵠ.ⲆΔᐃⵠⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⲆⲆⵠⲆᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠᐃΔΔ].id = ᐃⵠⵠ.ΔⵠᐃΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⵠᐃΔⵠⵠ], Ⲇⵠᐃᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠᐃΔΔ].id = ᐃⵠⵠ.ᐃⵠᐃΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⲆⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⲆΔᐃΔⵠ], ⵠΔΔᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⲆⲆΔ].id = ᐃⵠⵠ.ᐃᐃⲆⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃᐃᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠᐃⲆⵠⵠⲆ], ᐃΔᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃᐃᐃⲆ].id = ᐃⵠⵠ.ⲆᐃᐃᐃⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔᐃⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠⵠⵠᐃΔⲆ], Ⲇⵠᐃᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔᐃⲆΔ].id = ᐃⵠⵠ.ΔΔᐃⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆᐃⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⵠⵠᐃΔᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆᐃⲆᐃ].id = ᐃⵠⵠ.ΔⲆᐃⲆᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆΔⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔᐃᐃⵠΔⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆΔⵠⲆ].id = ᐃⵠⵠ.ᐃⲆΔⵠⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠΔⲆⲆⵠⲆ], ᐃΔᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⵠⲆΔ].id = ᐃⵠⵠ.ᐃᐃⵠⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆⲆⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔᐃⲆᐃᐃ], ᐃᐃΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆⲆⲆⵠ].id = ᐃⵠⵠ.ⵠⲆⲆⲆⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⲆΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔⲆᐃⲆΔ], ᐃΔΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⲆΔⵠ].id = ᐃⵠⵠ.ⲆⵠⲆΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆⵠⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔⵠΔⲆΔΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆⵠⵠⲆ].id = ᐃⵠⵠ.ΔⲆⵠⵠⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃΔⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔᐃⲆⲆᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃΔⲆᐃ].id = ᐃⵠⵠ.ⵠᐃΔⲆᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆᐃᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⵠΔⲆΔⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆᐃᐃⵠ].id = ᐃⵠⵠ.ΔⲆᐃᐃⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆⵠⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔΔⲆΔⲆᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆⵠⵠⵠ].id = ᐃⵠⵠ.ⲆⲆⵠⵠⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⵠⲆΔⲆᐃ], ⵠⵠⲆᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⵠⵠⲆΔ].id = ᐃⵠⵠ.ⲆⵠⵠⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⲆⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃᐃᐃΔᐃⵠ], ᐃΔᐃⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⲆⲆⲆ].id = ᐃⵠⵠ.ⵠᐃⲆⲆⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆΔᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⵠⲆΔⲆΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆΔᐃⵠ].id = ᐃⵠⵠ.ⵠⲆΔᐃⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔΔⵠΔΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⵠⲆΔⲆΔ], ⵠᐃⵠⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔΔⵠΔΔᐃ].id = ᐃⵠⵠ.ⵠΔΔⵠΔΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⲆⵠᐃⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⵠⲆΔⲆΔ], ⵠᐃᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⲆⵠᐃⵠⲆ].id = ᐃⵠⵠ.ⵠᐃⲆⵠᐃⵠⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⵠⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⵠⵠⵠΔᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⵠⵠⵠ].id = ᐃⵠⵠ.ᐃⵠⵠⵠⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⵠⲆⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠⲆⲆᐃΔⵠ], ⲆΔⲆⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⵠⲆⲆΔ].id = ᐃⵠⵠ.ⵠⵠⲆⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⵠⵠⵠΔᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃᐃΔⵠ].id = ᐃⵠⵠ.ⵠᐃᐃΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⵠᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⵠⲆΔⵠᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⵠᐃⲆ].id = ᐃⵠⵠ.ⲆΔⵠᐃⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔⲆⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⵠΔⲆⵠⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔⲆⲆⲆ].id = ᐃⵠⵠ.ᐃΔⲆⲆⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⲆⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔᐃΔⵠΔΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⲆⲆⵠ].id = ᐃⵠⵠ.ᐃⲆⲆⲆⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⵠⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆᐃᐃᐃᐃΔ], ⲆΔⲆᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⵠⲆⵠ].id = ᐃⵠⵠ.ⲆΔⵠⲆⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠᐃᐃΔⵠⲆ], ⵠᐃᐃⵠ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃⵠⲆΔ].id = ᐃⵠⵠ.ΔᐃⵠⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆΔⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠⵠΔⲆΔΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆΔⵠᐃ].id = ᐃⵠⵠ.ⲆⲆΔⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆⵠⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔᐃⲆᐃⵠᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆⵠⲆΔ].id = ᐃⵠⵠ.ⲆⲆⵠⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆᐃΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃⵠΔΔⵠΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆᐃΔᐃ].id = ᐃⵠⵠ.ⲆⲆᐃΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⲆⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⵠⲆⲆⵠⵠ], ⵠᐃⵠΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⲆⵠⲆ].id = ᐃⵠⵠ.ᐃᐃⲆⵠⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠᐃⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃⲆⵠ], ⵠᐃᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠᐃⵠΔ].id = ᐃⵠⵠ.ᐃⵠᐃⵠΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃΔΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⲆⲆⲆΔᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃΔΔⲆ].id = ᐃⵠⵠ.ⲆᐃΔΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃΔΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃᐃⵠᐃΔΔ], ᐃᐃΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃΔΔⵠ].id = ᐃⵠⵠ.ΔᐃΔΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔΔⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⵠᐃⵠᐃⲆ], Ⲇⵠᐃᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔΔⵠᐃ].id = ᐃⵠⵠ.ΔΔΔⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⲆⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠᐃᐃᐃΔⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⲆⲆⵠ].id = ᐃⵠⵠ.ᐃⵠⲆⲆⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆΔΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃⲆⲆΔΔⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆΔΔⵠ].id = ᐃⵠⵠ.ᐃⲆΔΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃᐃᐃⵠⵠᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃᐃΔⵠ].id = ᐃⵠⵠ.ᐃᐃᐃΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃᐃⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⲆⵠᐃⵠⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃᐃⲆΔ].id = ᐃⵠⵠ.ᐃᐃᐃⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔⲆᐃᐃΔᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠⲆᐃΔΔ].id = ᐃⵠⵠ.ⵠⲆᐃΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⲆⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆΔᐃⵠᐃⵠ], ᐃᐃΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⲆⵠⵠ].id = ᐃⵠⵠ.ⲆΔⲆⵠⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃΔⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔᐃᐃᐃᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃΔⵠᐃ].id = ᐃⵠⵠ.ⵠᐃΔⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔᐃΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⵠᐃΔᐃⲆ], ⵠᐃⵠΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔᐃΔⲆ].id = ᐃⵠⵠ.ⵠΔᐃΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃΔⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⲆⵠⵠⵠⵠ], ⵠⵠⲆⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃΔⵠⵠ].id = ᐃⵠⵠ.ⲆᐃΔⵠⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃᐃⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔᐃᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃᐃⲆⵠ].id = ᐃⵠⵠ.ΔᐃᐃⲆⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⵠᐃⲆⵠᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆᐃΔΔ].id = ᐃⵠⵠ.ᐃⲆᐃΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⲆΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⵠⵠΔⲆᐃ], ⵠᐃⵠⵠ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⲆΔⲆ].id = ᐃⵠⵠ.ᐃⲆⲆΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⵠⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔΔᐃⵠⵠⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⵠⵠᐃ].id = ᐃⵠⵠ.ⲆΔⵠⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃᐃᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃΔᐃᐃᐃᐃ], ⵠᐃᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃᐃᐃΔ].id = ᐃⵠⵠ.ⵠᐃᐃᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔⵠΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠΔᐃⲆΔΔ], ⵠᐃⵠⵠ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔⵠΔΔ].id = ᐃⵠⵠ.ΔΔⵠΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⲆΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠΔΔΔⲆᐃ], ⵠⵠΔⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⲆΔᐃ].id = ᐃⵠⵠ.ᐃᐃⲆΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠᐃᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃⲆΔᐃΔⲆ], ⵠᐃⵠⵠ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠᐃᐃⲆ].id = ᐃⵠⵠ.ΔⵠᐃᐃⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆΔⲆⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃⲆⵠⲆⲆⲆ], ⲆΔⲆⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆΔⲆⵠ].id = ᐃⵠⵠ.ΔⲆΔⲆⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃⲆⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔᐃΔΔⲆⵠ], ᐃΔᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃⲆⵠΔ].id = ᐃⵠⵠ.ⲆᐃⲆⵠΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃⲆΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⵠΔⵠᐃΔ], ⵠⵠΔⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃⲆΔⵠ].id = ᐃⵠⵠ.ⲆᐃⲆΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⵠⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⵠⵠⲆΔⲆ], ⲆΔⲆⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⵠⲆᐃ].id = ᐃⵠⵠ.ⲆΔⵠⲆᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠⲆⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠΔᐃⲆΔᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠⲆⲆⲆ].id = ᐃⵠⵠ.ΔⵠⲆⲆⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃᐃΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⵠΔⲆΔΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃᐃΔⲆ].id = ᐃⵠⵠ.ΔᐃᐃΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠᐃⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔⵠⲆΔⵠᐃ], ⲆⵠⵠⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠᐃⵠᐃ].id = ᐃⵠⵠ.ᐃⵠᐃⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔΔᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⵠⲆⲆᐃⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔΔᐃⵠ].id = ᐃⵠⵠ.ᐃΔΔᐃⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⲆΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔⲆⲆⲆⵠ], ⵠΔΔᐃ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⲆΔᐃ].id = ᐃⵠⵠ.ⵠᐃⲆΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔΔΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠΔⵠΔᐃⲆ], ⵠᐃⵠⵠ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔΔΔⲆ].id = ᐃⵠⵠ.ΔΔΔΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔⲆⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔⲆⵠΔᐃ], ΔᐃΔⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔⲆⲆΔ].id = ᐃⵠⵠ.ᐃΔⲆⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⵠᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃΔⵠΔⲆⲆ], ᐃᐃΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔⵠᐃᐃ].id = ΔⲆ.ⵠΔⵠᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.Δⵠⵠⵠᐃᐃᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠΔⵠᐃᐃ].id = ΔⲆ.ⵠΔⵠᐃᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔⵠᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔⵠⵠᐃⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔⵠᐃᐃ].id = ᐃⵠⵠ.ⵠΔⵠᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆⲆᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆⵠⲆΔⵠΔ], ⲆⵠⵠⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆⲆᐃΔ].id = ΔⲆ.ⲆⲆⲆᐃΔ;
		this.ΔΔΔ[ΔⲆ.ⲆⲆⲆᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔⵠΔⵠᐃⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆⲆⲆᐃΔ].id = ΔⲆ.ⲆⲆⲆᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆⲆᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠⵠΔΔⲆⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆⲆᐃΔ].id = ᐃⵠⵠ.ⲆⲆⲆᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔΔΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⲆΔⲆΔΔⵠ], ⲆΔⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔΔΔᐃ].id = ΔⲆ.ⲆΔΔΔᐃ;
		this.ΔΔΔ[ΔⲆ.ⲆΔΔΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔⲆΔⵠΔ], ⵠᐃᐃⵠ);
		this.ΔΔΔ[ΔⲆ.ⲆΔΔΔᐃ].id = ΔⲆ.ⲆΔΔΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔΔΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃΔⵠᐃᐃⵠ], ΔᐃΔⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔΔΔᐃ].id = ᐃⵠⵠ.ⲆΔΔΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⲆⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔᐃⵠⵠᐃΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⲆⲆⲆ].id = ΔⲆ.ᐃⲆⲆⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆⲆⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⲆⲆⵠΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⲆⲆⲆⲆ].id = ΔⲆ.ᐃⲆⲆⲆⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⲆⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃΔᐃⲆⲆⵠ], ⵠⵠΔⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⲆⲆⲆ].id = ᐃⵠⵠ.ᐃⲆⲆⲆⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔΔⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠⲆᐃΔⲆⲆ], ⵠⲆᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔΔⵠⵠ].id = ΔⲆ.ⵠΔΔⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠΔΔⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆΔΔⵠᐃᐃ], ᐃΔᐃⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠΔΔⵠⵠ].id = ΔⲆ.ⵠΔΔⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆΔᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠⵠⵠΔᐃⲆ], ⵠⲆᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆΔᐃΔ].id = ΔⲆ.ⵠⲆΔᐃΔ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆΔᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⲆΔⵠᐃⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠⲆΔᐃΔ].id = ΔⲆ.ⵠⲆΔᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.Δⵠⵠᐃⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠⲆⲆᐃᐃΔ], ⲆΔⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.Δⵠⵠᐃⵠ].id = ΔⲆ.Δⵠⵠᐃⵠ;
		this.ΔΔΔ[ΔⲆ.Δⵠⵠᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃΔΔΔⵠⵠ], ᐃΔΔΔ);
		this.ΔΔΔ[ΔⲆ.Δⵠⵠᐃⵠ].id = ΔⲆ.Δⵠⵠᐃⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⲆⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃᐃΔⵠⵠⲆⲆ], ΔᐃΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⲆⵠᐃ].id = ΔⲆ.ᐃⲆⲆⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆⲆⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃΔΔⲆⲆⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⲆⲆⵠᐃ].id = ΔⲆ.ᐃⲆⲆⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⲆⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠᐃⵠΔΔⲆ], ⵠᐃⵠⵠ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆⲆⵠᐃ].id = ᐃⵠⵠ.ᐃⲆⲆⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔΔᐃⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔΔⲆⲆⵠⵠ], ⵠⵠⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔΔᐃⵠ].id = ΔⲆ.ⵠΔΔᐃⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠΔΔᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⲆᐃⲆⲆΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠΔΔᐃⵠ].id = ΔⲆ.ⵠΔΔᐃⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔΔᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⲆΔⵠⲆᐃ], ⵠⵠΔⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔΔᐃⵠ].id = ᐃⵠⵠ.ⵠΔΔᐃⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⲆⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠⲆᐃⵠΔᐃ], ⵠᐃⵠⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⲆⵠⵠ].id = ΔⲆ.ᐃⵠⲆⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠⲆⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠᐃⲆⲆᐃ], ⵠⵠⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃⵠⲆⵠⵠ].id = ΔⲆ.ᐃⵠⲆⵠⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⲆⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆΔᐃᐃⲆⲆ], ΔᐃΔⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⲆⵠⵠ].id = ᐃⵠⵠ.ᐃⵠⲆⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⵠΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃᐃⵠΔⲆⲆⲆ], ⲆΔⲆᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⵠΔⲆ].id = ΔⲆ.ⲆΔⵠΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆᐃⲆⵠΔᐃ], ⲆΔⲆᐃ);
		this.ΔΔΔ[ΔⲆ.ⲆΔⵠΔⲆ].id = ΔⲆ.ⲆΔⵠΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⵠΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⲆΔΔⲆΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⵠΔⲆ].id = ᐃⵠⵠ.ⲆΔⵠΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⵠⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠᐃΔᐃᐃⲆⲆ], ⵠⵠΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⵠⵠᐃ].id = ΔⲆ.ⵠᐃⵠⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃⵠⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠⵠΔⲆⲆⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠᐃⵠⵠᐃ].id = ΔⲆ.ⵠᐃⵠⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⵠⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃᐃΔᐃⵠⵠ], ⵠⲆᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⵠⵠᐃ].id = ᐃⵠⵠ.ⵠᐃⵠⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.Ⲇᐃⵠᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆΔΔᐃⵠⲆⵠ], ⵠΔΔᐃ);
		this.ⵠⲆᐃ[ΔⲆ.Ⲇᐃⵠᐃᐃ].id = ΔⲆ.Ⲇᐃⵠᐃᐃ;
		this.ΔΔΔ[ΔⲆ.Ⲇᐃⵠᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⵠᐃⵠΔΔ], 3);
		this.ΔΔΔ[ΔⲆ.Ⲇᐃⵠᐃᐃ].id = ΔⲆ.Ⲇᐃⵠᐃᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.Ⲇᐃⵠᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔᐃᐃⵠⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.Ⲇᐃⵠᐃᐃ].id = ᐃⵠⵠ.Ⲇᐃⵠᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆᐃⲆΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⵠⲆⵠᐃᐃⵠ], ⵠⵠΔⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ΔⲆᐃⲆΔ].id = ΔⲆ.ΔⲆᐃⲆΔ;
		this.ΔΔΔ[ΔⲆ.ΔⲆᐃⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃᐃΔΔΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ΔⲆᐃⲆΔ].id = ΔⲆ.ΔⲆᐃⲆΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆᐃⲆΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃⵠⲆΔⵠᐃ], ᐃΔΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⲆᐃⲆΔ].id = ᐃⵠⵠ.ΔⲆᐃⲆΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔΔⵠᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆⲆⵠΔΔᐃ], ⵠΔΔᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ΔΔⵠᐃΔ].id = ΔⲆ.ΔΔⵠᐃΔ;
		this.ΔΔΔ[ΔⲆ.ΔΔⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆᐃⲆΔⵠⲆ], ᐃᐃΔΔ);
		this.ΔΔΔ[ΔⲆ.ΔΔⵠᐃΔ].id = ΔⲆ.ΔΔⵠᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔⵠᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠⵠⲆⲆⵠⵠ], ᐃᐃΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔⵠᐃΔ].id = ᐃⵠⵠ.ΔΔⵠᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆΔᐃΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆⵠⲆΔⲆΔⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆⲆΔᐃΔ].id = ΔⲆ.ⲆⲆΔᐃΔ;
		this.ΔΔΔ[ΔⲆ.ⲆⲆΔᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔᐃΔᐃΔΔ], ⵠᐃⵠΔ);
		this.ΔΔΔ[ΔⲆ.ⲆⲆΔᐃΔ].id = ΔⲆ.ⲆⲆΔᐃΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆΔᐃΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆⲆⵠΔⵠⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆⲆΔᐃΔ].id = ᐃⵠⵠ.ⲆⲆΔᐃΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃΔΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⵠΔΔΔⵠⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃΔΔⲆ].id = ΔⲆ.ᐃᐃΔΔⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃΔΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔᐃΔⲆⵠΔ], ⵠᐃⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃᐃΔΔⲆ].id = ΔⲆ.ᐃᐃΔΔⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃΔΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃᐃⵠⲆᐃⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃΔΔⲆ].id = ᐃⵠⵠ.ᐃᐃΔΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.Ⲇᐃⵠⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆⵠΔⲆⲆⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.Ⲇᐃⵠⵠᐃ].id = ΔⲆ.Ⲇᐃⵠⵠᐃ;
		this.ΔΔΔ[ΔⲆ.Ⲇᐃⵠⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠⲆⵠⲆᐃ], ⵠⵠⲆᐃ);
		this.ΔΔΔ[ΔⲆ.Ⲇᐃⵠⵠᐃ].id = ΔⲆ.Ⲇᐃⵠⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.Ⲇᐃⵠⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⵠΔᐃⵠΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.Ⲇᐃⵠⵠᐃ].id = ᐃⵠⵠ.Ⲇᐃⵠⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔᐃⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆΔⵠⲆⲆⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔᐃⵠᐃ].id = ΔⲆ.ᐃΔᐃⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃΔᐃⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.Ⲇⵠᐃᐃᐃᐃⵠ], ⵠⵠⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃΔᐃⵠᐃ].id = ΔⲆ.ᐃΔᐃⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔᐃⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠⲆΔᐃΔᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔᐃⵠᐃ].id = ᐃⵠⵠ.ᐃΔᐃⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.Δⵠⵠⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔⲆᐃⵠΔⵠ], Ⲇⵠᐃᐃ);
		this.ⵠⲆᐃ[ΔⲆ.Δⵠⵠⵠᐃ].id = ΔⲆ.Δⵠⵠⵠᐃ;
		this.ΔΔΔ[ΔⲆ.Δⵠⵠⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠⲆ], 3);
		this.ΔΔΔ[ΔⲆ.Δⵠⵠⵠᐃ].id = ΔⲆ.Δⵠⵠⵠᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.Δⵠⵠⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠᐃᐃⲆᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.Δⵠⵠⵠᐃ].id = ᐃⵠⵠ.Δⵠⵠⵠᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃᐃΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔΔⵠⵠⲆᐃⵠ], ⵠᐃⵠΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃᐃΔⵠ].id = ΔⲆ.ⲆᐃᐃΔⵠ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆⵠⲆⲆⲆᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆᐃᐃΔⵠ].id = ΔⲆ.ⲆᐃᐃΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆΔᐃⲆⲆᐃ], ⲆⲆΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃᐃΔⵠ].id = ᐃⵠⵠ.ⲆᐃᐃΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆᐃΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔᐃΔⵠΔᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆᐃΔⵠ].id = ΔⲆ.ᐃⲆᐃΔⵠ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⵠⵠⲆⵠⵠᐃ], ⲆⵠⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆᐃΔⵠ].id = ΔⲆ.ᐃⲆᐃΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔΔⵠⵠⵠⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆᐃΔⵠ].id = ᐃⵠⵠ.ᐃⲆᐃΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⵠⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆⲆⲆΔⲆᐃ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⵠⲆⲆ].id = ΔⲆ.ᐃⲆⵠⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆⵠⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⲆⵠᐃᐃᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⲆⵠⲆⲆ].id = ΔⲆ.ᐃⲆⵠⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆⵠⲆⲆ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ᐃⲆⵠⲆⲆ].info.ⵠⵠ[ᐃⲆΔ];
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆⵠᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠⲆᐃΔⲆⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔⲆⵠᐃ].id = ΔⲆ.ᐃΔⲆⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆⵠᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠᐃⵠⲆᐃⲆ], ⵠᐃⵠⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆⵠᐃ].id = ΔⲆ.ᐃΔⲆⵠᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃΔⲆⵠᐃ].info.ⵠⵠ[ⵠⵠΔⵠ] = this.ΔΔΔ[ΔⲆ.ᐃΔⲆⵠᐃ].info.ⵠⵠ[0];
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔΔⵠⵠᐃΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆⵠΔ].id = ΔⲆ.ᐃⲆⵠΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆΔⲆΔ], ⵠⲆᐃΔ);
		this.ΔΔΔ[ΔⲆ.ᐃⲆⵠΔ].id = ΔⲆ.ᐃⲆⵠΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆⵠΔ].info.ⵠⵠ[2] = this.ΔΔΔ[ΔⲆ.ᐃⲆⵠΔ].info.ⵠⵠ[Ⲇⵠᐃ];
		this.ⵠⲆᐃ[ΔⲆ.ΔΔᐃᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠᐃⵠⵠΔⵠΔ], ⵠᐃⵠⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ΔΔᐃᐃⲆ].id = ΔⲆ.ΔΔᐃᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ΔΔᐃᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠⲆΔⲆ], ⵠΔΔᐃ);
		this.ΔΔΔ[ΔⲆ.ΔΔᐃᐃⲆ].id = ΔⲆ.ΔΔᐃᐃⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔᐃᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆᐃΔⵠᐃΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔΔᐃᐃⲆ].id = ᐃⵠⵠ.ΔΔᐃᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔᐃΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃⵠⲆᐃⵠΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠΔᐃΔⵠ].id = ΔⲆ.ⵠΔᐃΔⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠΔᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃΔΔᐃⲆⵠ], ⵠⵠⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ⵠΔᐃΔⵠ].id = ΔⲆ.ⵠΔᐃΔⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃΔᐃᐃⵠΔ], ⲆⵠⵠⲆ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠΔᐃΔⵠ].id = ᐃⵠⵠ.ⵠΔᐃΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃΔᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⵠⵠΔᐃᐃⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃΔᐃⲆ].id = ΔⲆ.ΔᐃΔᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ΔᐃΔᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⲆⲆⵠⲆᐃ], ⵠⲆᐃΔ);
		this.ΔΔΔ[ΔⲆ.ΔᐃΔᐃⲆ].id = ΔⲆ.ΔᐃΔᐃⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃΔᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⲆⵠⲆⵠΔ], ᐃᐃΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃΔᐃⲆ].id = ᐃⵠⵠ.ΔᐃΔᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⵠⵠⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⲆΔⲆᐃⵠⵠ], ⵠᐃᐃΔ);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃⵠⵠⲆ].id = ΔⲆ.ⵠᐃⵠⵠⲆ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃⵠⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔᐃᐃᐃΔΔ], ⵠᐃᐃΔ);
		this.ΔΔΔ[ΔⲆ.ⵠᐃⵠⵠⲆ].id = ΔⲆ.ⵠᐃⵠⵠⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⵠⵠⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠᐃᐃᐃΔⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃⵠⵠⲆ].id = ᐃⵠⵠ.ⵠᐃⵠⵠⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃᐃⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃⵠⵠⲆΔⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃᐃⲆⲆ].id = ΔⲆ.ⲆᐃᐃⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃᐃⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔᐃⵠⵠᐃⵠⲆ], Ⲇⵠᐃᐃ);
		this.ΔΔΔ[ΔⲆ.ⲆᐃᐃⲆⲆ].id = ΔⲆ.ⲆᐃᐃⲆⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃᐃⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔΔᐃⵠΔΔ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆᐃᐃⲆⲆ].id = ᐃⵠⵠ.ⲆᐃᐃⲆⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆΔΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃᐃⲆΔᐃⲆⵠ], ⵠⵠⲆⲆ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆΔΔΔ].id = ΔⲆ.ᐃⲆΔΔΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆΔΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆᐃᐃΔⵠⲆΔ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⲆΔΔΔ].id = ΔⲆ.ᐃⲆΔΔΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆΔΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⲆⵠⲆⵠΔ], ⵠᐃⵠⵠ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⲆΔΔΔ].id = ᐃⵠⵠ.ᐃⲆΔΔΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃⲆⵠⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃⲆΔⵠⲆΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃⲆⵠⵠ].id = ΔⲆ.ΔᐃⲆⵠⵠ;
		this.ΔΔΔ[ΔⲆ.ΔᐃⲆⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔΔΔΔⵠᐃ], 3);
		this.ΔΔΔ[ΔⲆ.ΔᐃⲆⵠⵠ].id = ΔⲆ.ΔᐃⲆⵠⵠ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃⲆⵠⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⲆᐃⵠⲆⵠ], ᐃΔᐃΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃⲆⵠⵠ].id = ᐃⵠⵠ.ΔᐃⲆⵠⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠΔⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃⲆⵠΔΔᐃⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ΔⵠΔⵠΔ].id = ΔⲆ.ΔⵠΔⵠΔ;
		this.ΔΔΔ[ΔⲆ.ΔⵠΔⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⵠᐃⲆΔΔᐃ], ᐃΔΔΔ);
		this.ΔΔΔ[ΔⲆ.ΔⵠΔⵠΔ].id = ΔⲆ.ΔⵠΔⵠΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠΔⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⲆⲆⲆᐃⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔⵠΔⵠΔ].id = ᐃⵠⵠ.ΔⵠΔⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔᐃΔᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆⲆΔⵠⲆΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃΔᐃΔᐃ].id = ΔⲆ.ᐃΔᐃΔᐃ;
		this.ΔΔΔ[ΔⲆ.ᐃΔᐃΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆΔⵠⵠⵠⲆ], ⲆΔⲆⲆ);
		this.ΔΔΔ[ΔⲆ.ᐃΔᐃΔᐃ].id = ΔⲆ.ᐃΔᐃΔᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔᐃΔᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔΔᐃᐃⲆᐃ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃΔᐃΔᐃ].id = ᐃⵠⵠ.ᐃΔᐃΔᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⲆⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠᐃⵠⲆⲆΔⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⲆⵠΔ].id = ΔⲆ.ⲆΔⲆⵠΔ;
		this.ΔΔΔ[ΔⲆ.ⲆΔⲆⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔΔⲆΔⵠΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆΔⲆⵠΔ].id = ΔⲆ.ⲆΔⲆⵠΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⲆⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃΔⵠᐃⵠⵠⲆΔⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⲆΔⲆⵠΔ].id = ᐃⵠⵠ.ⲆΔⲆⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⵠᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃΔΔΔⵠⵠ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ᐃᐃⵠᐃⲆ].id = ΔⲆ.ᐃᐃⵠᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ᐃᐃⵠᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠΔΔⲆΔⲆⵠ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃᐃⵠᐃⲆ].id = ΔⲆ.ᐃᐃⵠᐃⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⵠᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠᐃΔᐃⵠⲆ], ⲆⲆΔΔ);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃᐃⵠᐃⲆ].id = ᐃⵠⵠ.ᐃᐃⵠᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠⵠΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔᐃᐃᐃⲆⲆⵠ], ᐃᐃΔΔ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⵠⵠⵠΔ].id = ΔⲆ.ᐃⵠⵠⵠΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⵠⲆΔⵠⲆΔ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⵠⵠⵠΔ].id = ΔⲆ.ᐃⵠⵠⵠΔ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⵠⵠΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⵠⲆΔᐃⵠⵠ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ᐃⵠⵠⵠΔ].id = ᐃⵠⵠ.ᐃⵠⵠⵠΔ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃΔⲆⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠΔᐃⵠⲆᐃⲆ], ⵠⵠⲆᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃΔⲆⲆ].id = ΔⲆ.ΔᐃΔⲆⲆ;
		this.ΔΔΔ[ΔⲆ.ΔᐃΔⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃᐃⲆᐃΔᐃ], Ⲇⵠᐃᐃ);
		this.ΔΔΔ[ΔⲆ.ΔᐃΔⲆⲆ].id = ΔⲆ.ΔᐃΔⲆⲆ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃΔⲆⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔΔⲆⵠΔΔⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ΔᐃΔⲆⲆ].id = ᐃⵠⵠ.ΔᐃΔⲆⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃᐃⲆᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃᐃΔΔⲆΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃᐃⲆᐃ].id = ΔⲆ.ⵠᐃᐃⲆᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆⲆⲆᐃⵠΔⵠ], ⲆΔⲆᐃ);
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃⲆᐃ].id = ΔⲆ.ⵠᐃᐃⲆᐃ;
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃᐃⲆᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠⲆⲆᐃΔᐃⲆ], 3);
		this.ⵠⲆⲆ[ᐃⵠⵠ.ⵠᐃᐃⲆᐃ].id = ᐃⵠⵠ.ⵠᐃᐃⲆᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃΔⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⵠⲆΔⵠᐃΔΔ], ⵠᐃⵠⵠ);
		this.ⵠⲆᐃ[ΔⲆ.ΔᐃᐃΔⵠ].id = ΔⲆ.ΔᐃᐃΔⵠ;
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃΔⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆΔΔᐃΔⵠ], ᐃΔΔΔ);
		this.ΔΔΔ[ΔⲆ.ΔᐃᐃΔⵠ].id = ΔⲆ.ΔᐃᐃΔⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆᐃⵠΔᐃᐃ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔΔᐃᐃⲆⲆΔΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠⲆᐃⵠΔᐃᐃ].id = ΔⲆ.ⵠⲆᐃⵠΔᐃᐃ;
		this.ΔΔΔ[ΔⲆ.ⵠⲆᐃⵠΔᐃᐃ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ΔⲆⲆΔⵠΔⵠΔⵠ], ⵠᐃⵠΔ);
		this.ΔΔΔ[ΔⲆ.ⵠⲆᐃⵠΔᐃᐃ].id = ΔⲆ.ⵠⲆᐃⵠΔᐃᐃ;
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃᐃⲆⲆᐃⵠ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ΔⵠⲆⲆᐃᐃⲆᐃⲆ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⵠᐃᐃⲆⲆᐃⵠ].id = ΔⲆ.ⵠᐃᐃⲆⲆᐃⵠ;
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃⲆⲆᐃⵠ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⲆΔⵠΔΔⵠⵠΔⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ⵠᐃᐃⲆⲆᐃⵠ].id = ΔⲆ.ⵠᐃᐃⲆⲆᐃⵠ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⲆΔⲆΔⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ⲆᐃⵠΔᐃᐃⲆⲆΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆᐃⲆΔⲆΔⲆ].id = ΔⲆ.ⲆᐃⲆΔⲆΔⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆᐃⲆΔⲆΔⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃⲆⵠΔᐃⵠⵠᐃΔ], 3);
		this.ΔΔΔ[ΔⲆ.ⲆᐃⲆΔⲆΔⲆ].id = ΔⲆ.ⲆᐃⲆΔⲆΔⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⲆⲆⲆᐃⲆ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔᐃᐃΔⵠⲆᐃΔ], 3);
		this.ⵠⲆᐃ[ΔⲆ.ⲆΔⲆⲆⲆᐃⲆ].id = ΔⲆ.ⲆΔⲆⲆⲆᐃⲆ;
		this.ΔΔΔ[ΔⲆ.ⲆΔⲆⲆⲆᐃⲆ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ⵠᐃⵠⲆⲆΔⵠᐃⵠ], ⲆⲆΔΔ);
		this.ΔΔΔ[ΔⲆ.ⲆΔⲆⲆⲆᐃⲆ].id = ΔⲆ.ⲆΔⲆⲆⲆᐃⲆ;
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆΔⵠᐃΔΔ] = ΔᐃⲆ(68, 68, "", ᐃᐃ[ⵠ.ᐃΔᐃΔᐃⲆⵠΔⲆ], ⲆΔⲆᐃ);
		this.ⵠⲆᐃ[ΔⲆ.ᐃⲆΔⵠᐃΔΔ].id = ΔⲆ.ᐃⲆΔⵠᐃΔΔ;
		this.ΔΔΔ[ΔⲆ.ᐃⲆΔⵠᐃΔΔ] = ΔᐃⲆ(60, 60, "", ᐃᐃ[ⵠ.ᐃᐃΔⲆⵠᐃⲆⵠⲆ], 3);
		this.ΔΔΔ[ΔⲆ.ᐃⲆΔⵠᐃΔΔ].id = ΔⲆ.ᐃⲆΔⵠᐃΔΔ;
		this.ΔΔⵠᐃⵠⵠΔ = function() {
			var ⵠΔᐃΔ = ⲆΔⵠ.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ;
			var Ⲇᐃ = ᐃᐃⵠΔⵠ;
			var ⲆⲆⲆ = 10;
			for (var ᐃⲆ = 0; ᐃⲆ < ⵠΔᐃΔ.length; ᐃⲆ++) {
				ᐃⲆ > 0 && !(ᐃⲆ % ⲆⲆⲆΔ) && (Ⲇᐃ += ⵠΔᐃΔ[0].info.width + ⲆΔᐃⵠΔ, ⲆⲆⲆ = 10);
				ⵠΔᐃΔ[ᐃⲆ].info.translate.x = Ⲇᐃ;
				ⵠΔᐃΔ[ᐃⲆ].info.translate.y = ⲆⲆⲆ;
				ⲆⲆⲆ += ΔΔᐃⵠⲆ + ⵠΔᐃΔ[ᐃⲆ].info.height
			}
		};
		this.ⲆΔⵠᐃᐃΔⲆ = function() {
			var Ⲇᐃ = Math.floor(Math.floor((3 + ⲆΔⵠ.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length) / 4) * (10 + this.ⵠⲆᐃ[0].info.ⵠⵠ[Ⲇⵠⵠᐃ].width) + 35);
			for (var ᐃⲆ = ⵠⵠⲆΔ; ᐃⲆ < this.ⵠⲆᐃ.length; ᐃⲆ++) {
				if (!this.ⵠⲆᐃ[ᐃⲆ]) continue;
				this.ⵠⲆᐃ[ᐃⲆ].info.translate.x = Ⲇᐃ;
				this.ⵠⲆᐃ[ᐃⲆ].info.translate.y = 22
			}
			this.ᐃⵠΔⵠⲆΔᐃ.info.translate.x = Ⲇᐃ + ᐃⲆᐃⵠΔ;
			this.ᐃⵠΔⵠⲆΔᐃ.info.translate.y = 22 + ᐃᐃ[ⵠ.ⵠⵠⲆⲆⵠⵠᐃ].height;
			this.ᐃΔᐃⲆᐃⵠⲆ.info.translate.x = Ⲇᐃ + 17;
			this.ᐃΔᐃⲆᐃⵠⲆ.info.translate.y = 30;
			this.ⵠⲆᐃⵠⵠⲆⵠ.info.translate.x = Ⲇᐃ + 17;
			this.ⵠⲆᐃⵠⵠⲆⵠ.info.translate.y = 22 + ᐃᐃ[ⵠ.ⵠⵠⲆⲆⵠⵠᐃ].height
		};
		this.ΔΔΔΔⵠⲆⵠΔⵠ = function() {
			var Ⲇᐃ = Math.floor((ⲆΔⵠΔ - ᐃᐃ[ⵠ.ΔᐃᐃⲆᐃᐃΔ][ᐃⲆΔᐃ].width) / 2);
			for (var ᐃⲆ = 0; ᐃⲆ < this.ΔᐃᐃⵠΔ.length; ᐃⲆ++) {
				this.ΔᐃᐃⵠΔ[ᐃⲆ].button.info.translate.x = Ⲇᐃ;
				this.ΔᐃᐃⵠΔ[ᐃⲆ].button.info.translate.y = -ΔᐃᐃΔᐃᐃΔ
			}
		};
		this.ΔⲆΔΔΔⵠΔ = function() {
			var Ⲇᐃ = 12 + Math.floor((ⲆΔⲆᐃⵠ + this.ⵠⵠⵠⲆᐃΔᐃ.info.ⵠⵠ[0].width) * Math.floor((3 + ⲆΔⵠ.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length) / 4) + 35);
			this.ⵠⵠⵠⲆᐃΔᐃ.info.translate.x = Ⲇᐃ;
			this.ⵠⵠⵠⲆᐃΔᐃ.info.translate.y = 33;
			this.ⵠΔᐃᐃⲆⲆⲆ.info.translate.x = this.ⵠⵠⵠⲆᐃΔᐃ.info.translate.x;
			this.ⵠΔᐃᐃⲆⲆⲆ.info.translate.y = 137;
			this.ⵠⲆⲆᐃⲆⵠᐃ.info.translate.x = this.ⵠⵠⵠⲆᐃΔᐃ.info.translate.x;
			this.ⵠⲆⲆᐃⲆⵠᐃ.info.translate.y = 240
		};
		this.ᐃⲆⵠⵠᐃΔⵠ = function() {
			var Ⲇᐃ = ⵠⲆⲆΔΔ + Math.floor(Math.floor((ⵠᐃⵠⲆ + ⲆΔⵠ.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length) / ΔⲆⵠΔⲆ) * (10 + this.ᐃᐃᐃⵠᐃΔⲆ.info.ⵠⵠ[Δⵠⵠ].width) + 35);
			this.ᐃᐃᐃⵠᐃΔⲆ.info.translate.x = Ⲇᐃ;
			this.ᐃᐃᐃⵠᐃΔⲆ.info.translate.y = 36;
			Ⲇᐃ += 83;
			this.ᐃᐃᐃᐃⵠᐃⲆ.info.translate.x = Ⲇᐃ;
			this.ᐃᐃᐃᐃⵠᐃⲆ.info.translate.y = 36;
			this.ⵠⲆⲆΔⵠᐃⵠ.info.translate.x = Ⲇᐃ;
			this.ⵠⲆⲆΔⵠᐃⵠ.info.translate.y = 36;
			this.ⵠⵠⵠⲆᐃΔⲆ.info.translate.x = Ⲇᐃ;
			this.ⵠⵠⵠⲆᐃΔⲆ.info.translate.y = 36;
			this.ⲆΔⲆΔⲆΔΔ.info.translate.x = Ⲇᐃ;
			this.ⲆΔⲆΔⲆΔΔ.info.translate.y = 36;
			this.ⵠⵠⲆᐃΔⵠⲆ.info.translate.x = Ⲇᐃ;
			this.ⵠⵠⲆᐃΔⵠⲆ.info.translate.y = 36
		};
		this.ⵠⲆⵠΔⲆⵠΔ = function() {
			var Ⲇᐃ = 12 + Math.floor((ΔΔⵠⲆⵠ + this.ⲆⵠΔᐃⵠⲆΔ.info.ⵠⵠ[0].width) * Math.floor((3 + ⲆΔⵠ.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length) / ΔⵠⲆⵠᐃ) + 35);
			this.ⲆⵠΔᐃⵠⲆΔ.info.translate.x = Ⲇᐃ;
			this.ⲆⵠΔᐃⵠⲆΔ.info.translate.y = 36;
			Ⲇᐃ += 83;
			this.ⲆΔᐃⲆΔⵠⵠ.info.translate.x = Ⲇᐃ;
			this.ⲆΔᐃⲆΔⵠⵠ.info.translate.y = 36
		};
		this.ⲆⲆΔⵠⵠⵠⵠ = function() {
			var Ⲇᐃ = Math.floor((10 + this.ᐃΔΔᐃⲆⲆⵠ.info.ⵠⵠ[0].width) * Math.floor((ΔᐃΔⲆ + ⲆΔⵠ.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ.length) / ᐃᐃⵠΔ) + 35);
			this.ᐃΔΔᐃⲆⲆⵠ.info.translate.x = Ⲇᐃ;
			this.ᐃΔΔᐃⲆⲆⵠ.info.translate.y = 22
		};
		this.ⵠⵠΔΔⲆΔⵠ = function() {
			var ᐃΔⲆᐃ = ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ;
			if (0 < ᐃΔⲆᐃ.length) var ᐃⲆⲆⵠⵠⲆⵠΔᐃ = Math.floor((ⲆΔⵠΔ - ⲆΔⵠ.ᐃΔⲆᐃ.max * (ᐃΔⲆᐃ[0].info.width + 5)) / ᐃᐃⲆⵠ);
			for (var ᐃⲆ = 0; ᐃΔⲆᐃ.length > ᐃⲆ; ᐃⲆ++) {
				ᐃΔⲆᐃ[ᐃⲆ].info.translate.x = ᐃⲆⲆⵠⵠⲆⵠΔᐃ + (ᐃΔⲆᐃ[ᐃⲆ].info.width + 5) * ᐃⲆ;
				ᐃΔⲆᐃ[ᐃⲆ].info.translate.y = ΔⲆⲆΔ - ᐃΔⲆᐃ[ᐃⲆ].info.width - ᐃⲆᐃⲆⲆ;
				this.ΔⵠᐃⲆⵠ[ᐃΔⲆᐃ[ᐃⲆ].id].info.translate.x = ᐃΔⲆᐃ[ᐃⲆ].info.translate.x + ⲆⵠᐃᐃⲆᐃⵠ;
				this.ΔⵠᐃⲆⵠ[ᐃΔⲆᐃ[ᐃⲆ].id].info.translate.y = ᐃΔⲆᐃ[ᐃⲆ].info.translate.y - this.ΔⵠᐃⲆⵠ[ᐃΔⲆᐃ[ᐃⲆ].id].info.ⵠⵠ[0].height - 6
			}
		};
		var ⲆⲆⵠᐃᐃ = 0;
		var ⵠⲆⲆⵠΔ = 30;
		var ᐃΔⵠᐃⲆᐃⲆ = function() {
			Ⲇᐃⵠ.ΔⵠΔ();
			ⲆⲆⵠᐃᐃ++;
			if (ⲆⲆⵠᐃᐃ == ⵠⲆⲆⵠΔ) {
				Ⲇᐃⵠ.ΔⵠᐃΔⲆⵠⵠ();
				Ⲇᐃⵠ.ΔⵠΔ();
				return
			}
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]](ᐃΔⵠᐃⲆᐃⲆ, 0)
		};
		this.ⲆⵠᐃⵠΔ = function(ⲆⲆⲆᐃᐃ) {
			ⲆΔⵠ.ᐃᐃⲆΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ⲆΔⵠ.ᐃᐃⲆΔⲆ.ⲆⵠᐃⵠΔ();
			if (ⲆΔⵠ.ᐃⲆᐃΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) ⲆΔⵠ.ᐃⲆᐃΔᐃ.ⲆⵠᐃⵠΔ();
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[95]).style.display = ᐃ[371];
			Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ.style.display = ᐃ[371];
			Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false;
			Ⲇᐃⵠ.sign.style.display = ᐃ[371];
			Ⲇᐃⵠ.sign[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false;
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[211]).style.display = ᐃ[371];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[561]).style.display = ᐃ[371];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[347]).style.display = ᐃ[371];
			Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃΔⲆΔᐃ;
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("option_in_game").style.display = ᐃ[371];
			Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃΔᐃᐃΔ;
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("sure_delete").style.display = ᐃ[371];
			Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ᐃΔⵠΔᐃ;
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[246]).style.display = ᐃ[371];
			Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = ⵠⲆⵠⵠΔ;
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("chronoquest").style.display = ᐃ[371];
			Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] = false;
			ⲆᐃⵠᐃⲆ = ⲆⲆⲆᐃᐃ;
			Ⲇᐃⵠ.ᐃⵠⵠⲆᐃᐃᐃ();
			Ⲇᐃⵠ.ᐃⵠ.style.cursor = Ⲇᐃⵠ.ⲆⵠⵠⲆᐃⵠⲆ;
			ⵠⲆⵠᐃ.ⲆⵠᐃⵠΔ();
			ⵠⵠΔⵠⲆ = -ᐃⵠᐃᐃ;
			ⵠΔᐃⲆⲆ();
			ᐃᐃΔΔⵠᐃⲆ()
		};
		var ⲆᐃⵠᐃⲆ;
		var ⵠⵠΔⵠⲆ = -1;
		var ᐃⵠⲆᐃΔ = 30;
		var ⵠΔᐃⲆⲆ = function() {
			Ⲇᐃⵠ.ΔⵠΔ();
			ⵠⵠΔⵠⲆ++;
			if (ⵠⵠΔⵠⲆ == ᐃⵠⲆᐃΔ) {
				Ⲇᐃⵠ.stop();
				ⲆᐃⵠᐃⲆ();
				return
			}
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]](ⵠΔᐃⲆⲆ, 0)
		};
		this.ⵠΔⲆΔΔ = false;
		this.stop = function() {
			this.ⵠΔⲆΔΔ = false
		};
		this.ΔᐃᐃⵠⲆ = function() {
			ΔΔᐃⲆ.ⵠᐃⵠΔⲆΔΔⲆⲆ();
			Ⲇᐃⵠ.ⵠΔⲆΔΔ = ⲆⲆΔΔΔ;
			ⵠⵠΔⵠⲆ = -1;
			ⲆⲆⵠᐃᐃ = ⵠᐃⵠ;
			ᐃΔⵠᐃⲆᐃⲆ()
		};
		this.ΔⵠΔ = function() {
			this.ΔⵠⲆᐃ.translate.x = ⲆΔⵠΔ - this.ΔⵠⲆᐃ.ⵠⵠ.width - ᐃᐃᐃⲆⵠ;
			this.ΔⵠⲆᐃ.translate.y = 5;
			ⵠⲆΔ.ᐃᐃⵠΔⲆ.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[ⵠ.ⲆᐃᐃⵠΔᐃΔ][ΔᐃⲆⲆ].width - 85;
			ⵠⲆΔ.ᐃᐃⵠΔⲆ.translate.y = 10;
			this.ΔΔⲆⲆ.button.info.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃΔⵠ][ⵠΔⵠᐃ].width - ⵠΔⲆⲆΔ;
			this.ΔΔⲆⲆ.button.info.translate.y = 10;
			this.ᐃΔΔᐃ.button.info.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[ⵠ.ΔΔᐃⲆΔⲆᐃ][0].width - 20;
			this.ᐃΔΔᐃ.button.info.translate.y = this.ΔΔⲆⲆ.button.info.translate.y + ᐃᐃ[ⵠ.ⲆΔⲆᐃᐃΔⵠ][ⲆⲆᐃⲆ].height + ΔⲆⵠⵠ;
			this.options.button.info.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[ⵠ.ΔⲆΔΔⵠ][0].width - 20;
			this.options.button.info.translate.y = this.ᐃΔΔᐃ.button.info.translate.y + ᐃᐃ[ⵠ.ΔⲆΔΔⵠ][0].height + 18;
			this.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.info.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[ⵠ.ΔⲆΔΔⵠ][ᐃⲆΔ].width - 20;
			this.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.info.translate.y = this.options.button.info.translate.y + ᐃᐃ[ⵠ.ΔⵠⲆⵠⲆⲆᐃ][ⲆᐃΔⵠ].height;
			this.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.info.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[ⵠ.ΔⲆΔΔⵠ][0].width - 20;
			this.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.info.translate.y = this.options.button.info.translate.y + ᐃᐃ[ⵠ.ΔⵠⲆⵠⲆⲆᐃ][ⲆⲆᐃⲆ].height;
			this.ⵠᐃⲆⲆᐃ.button.info.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[ⵠ.ᐃᐃΔΔⲆⲆⵠ][0].width - 20;
			this.ⵠᐃⲆⲆᐃ.button.info.translate.y = this.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.info.translate.y + ᐃᐃ[ⵠ.ᐃᐃΔΔⲆⲆⵠ][ⵠΔΔⲆ].height;
			ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.x = this.ΔⵠⲆᐃ.translate.x - 63 - 85;
			ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.y = ⲆⵠⲆⵠᐃ;
			ⲆΔⵠ.ⲆᐃⵠⵠΔ.translate.x = this.ΔⵠⲆᐃ.translate.x - ᐃᐃ[ⵠ.ⲆΔΔⵠⲆᐃⲆ].width - 85;
			ⲆΔⵠ.ⲆᐃⵠⵠΔ.translate.y = ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.y + ⵠΔΔᐃᐃ + ᐃᐃ[ⵠ.ᐃⵠΔΔᐃΔⵠ].height;
			this.ᐃΔᐃΔΔ.translate.y = ΔⲆⲆΔ - 3 - 193;
			this.ᐃΔᐃΔΔ.translate.x = ⲆΔⵠΔ - ⵠⵠⲆⲆ - 193;
			this.ⵠΔⲆΔ.translate.x = ⲆΔⲆᐃᐃ;
			this.ⵠΔⲆΔ.translate.y = ΔⲆⲆΔ - this.ⵠΔⲆΔ.ⵠⵠ.height - ⵠᐃⵠᐃΔ;
			this.ⲆⵠΔⲆΔ.button.info.translate.x = ⲆⵠᐃΔ - 91 / ΔΔᐃⲆⵠ;
			this.ⲆⵠΔⲆΔ.button.info.translate.y = 50;
			this.ΔΔⵠᐃⵠⵠΔ();
			this.ⵠⵠΔΔⲆΔⵠ();
			this.ⲆΔⵠᐃᐃΔⲆ();
			this.ⲆⲆΔⵠⵠⵠⵠ();
			this.ⵠⲆⵠΔⲆⵠΔ();
			this.ᐃⲆⵠⵠᐃΔⵠ();
			this.ΔⲆΔΔΔⵠΔ();
			this.ΔΔΔΔⵠⲆⵠΔⵠ();
			this.sign.ᐃⲆⵠΔᐃⵠⲆ();
			ⲆᐃⲆⲆΔΔΔ();
			ⲆΔⵠ.ᐃᐃⲆΔⲆ.ΔⵠΔ();
			ⲆΔⵠ.ᐃⲆᐃΔᐃ.ΔⵠΔ();
			this.ᐃⵠΔΔⵠⲆⵠⵠⲆ.ΔⵠΔ();
			this.ΔΔⲆⲆ.ⲆⵠΔⲆᐃΔᐃ.ΔⵠΔ();
			this.ΔΔⲆⲆ.list.ΔⵠΔ();
			this.ⲆΔᐃᐃ.ΔⵠΔ();
			this.ⲆⲆⵠΔⲆ.ΔⵠΔ();
			this.ᐃΔΔᐃ.ΔⵠΔ();
			this.ⲆⵠΔⲆΔ.ΔⵠΔ();
			this.options.ΔⵠΔ();
			this.ⵠᐃⲆⲆᐃ.ΔⵠΔ();
			this.sign.ΔⵠΔ();
			var ΔᐃΔⵠ = 0;
			if (ⲆⲆⵠᐃᐃ != ⵠⲆⲆⵠΔ) {
				var ΔᐃΔⵠ = 1500 / (ⲆⲆⵠᐃᐃ + ΔⲆⵠⲆ) - 50
			}
			if (-ⲆⵠΔΔ != ⵠⵠΔⵠⲆ) {
				var ΔᐃΔⵠ = -(1500 / (ᐃⵠⲆᐃΔ - ⵠⵠΔⵠⲆ + 1) - 48)
			}
			this.ⲆⵠΔⲆΔ.button.info.translate.y -= ΔᐃΔⵠ > ⵠᐃⲆⵠ ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
			this.ΔⵠⲆᐃ.translate.y -= ΔᐃΔⵠ > 0 ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
			ⲆΔⵠ.ⵠⵠⵠⲆᐃ.translate.y -= ᐃⲆΔᐃ < ΔᐃΔⵠ ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
			ⲆΔⵠ.ⲆᐃⵠⵠΔ.translate.y -= ⵠᐃΔ < ΔᐃΔⵠ ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
			this.ΔΔⲆⲆ.button.info.translate.y -= ΔᐃΔⵠ > 0 ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
			this.ᐃΔΔᐃ.button.info.translate.y -= 0 < ΔᐃΔⵠ ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
			this.options.button.info.translate.y -= ΔᐃΔⵠ > ⵠΔΔⲆ ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
			this.ⵠᐃⲆⲆᐃ.button.info.translate.y -= ᐃⲆᐃ < ΔᐃΔⵠ ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
			this.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.info.translate.y -= ΔᐃΔⵠ > Ⲇⵠⵠᐃ ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
			this.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.info.translate.y -= ΔᐃΔⵠ > ᐃⲆΔ ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
			ⵠⲆΔ.ᐃᐃⵠΔⲆ.translate.y -= ΔᐃΔⵠ > Δⵠⵠ ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
			this.ⵠΔⲆΔ.translate.y -= ⵠᐃⲆⵠ > ΔᐃΔⵠ ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
			this.ᐃΔᐃΔΔ.translate.y -= 0 > ΔᐃΔⵠ ? ΔᐃΔⵠ : -ΔᐃΔⵠ
		};
		this.ΔΔΔᐃᐃⵠᐃΔⲆ = function() {
			if (!ⲆΔⵠ.ⲆⲆⵠⲆⲆ.enabled && this.ⵠⲆⵠⵠΔⵠΔ && !ⲆΔⵠ.ΔⵠⵠⵠΔ) ΔΔⲆΔⲆᐃⵠΔⵠ();
			ⲆᐃⵠⲆⵠᐃΔⲆᐃ();
			ᐃΔⵠΔᐃⵠⵠⵠⵠ();
			if (this.ⵠⲆⵠⵠΔⵠΔ) {
				ⲆΔⲆΔᐃΔᐃⲆᐃ();
				if (Δⵠᐃ === this.ΔᐃΔⲆΔⵠⲆ) this.ΔΔⲆⲆ.button.ᐃⵠΔᐃ(Δ);
				if (ᐃΔᐃᐃ.ᐃΔΔΔᐃ !== ⵠⲆΔ.mode && ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ !== ⵠⲆΔ.mode && ⵠⲆΔ.mode !== ᐃΔᐃᐃ.ᐃⲆΔⲆⵠΔᐃ && this.ᐃⵠΔⲆⲆⵠΔ === ᐃⵠᐃᐃ) this.ᐃΔΔᐃ.button.ᐃⵠΔᐃ(Δ);
				this.options.button.ᐃⵠΔᐃ(Δ);
				this.ⲆΔΔᐃⲆᐃᐃ === ⲆⲆⵠ && this.ⵠᐃⲆⲆᐃ.button.ᐃⵠΔᐃ(Δ);
				if (ⵠⲆⵠᐃ.ΔᐃᐃⵠⲆ) this.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.ᐃⵠΔᐃ(Δ);
				else this.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.ᐃⵠΔᐃ(Δ);
				ᐃⲆⲆΔᐃΔᐃⲆⲆ();
				ⲆⵠᐃⲆⵠⲆⲆⲆᐃ();
				this.ⵠΔⲆΔ.ᐃⵠΔᐃ();
				ⲆΔⵠΔᐃⲆⵠᐃΔ();
				ⵠⲆⲆⵠⲆⲆⵠⵠⲆ();
				ᐃΔⵠⵠⵠΔⵠᐃᐃ();
				ᐃΔⵠⲆⵠΔⲆᐃΔ();
				ⵠᐃΔⲆᐃⵠⲆⵠⲆ();
				ᐃⲆⲆⲆⲆⵠⵠΔⲆ();
				ⵠΔᐃᐃΔΔⵠΔᐃ();
				ΔᐃⲆΔᐃⵠⵠⵠΔ();
				ⵠⲆᐃΔⵠΔⵠⵠⵠ();
				ᐃⲆⵠⵠⵠᐃΔⵠΔ();
				ⵠᐃⲆΔᐃⲆⲆⵠⵠ();
				ᐃᐃⵠⲆΔⲆΔᐃⲆ();
				ⲆᐃⲆⲆΔΔΔ();
				ⲆⵠⵠⲆⲆᐃΔᐃΔ()
			}
			if (ⲆΔⵠ.ⲆⲆⵠⲆⲆ.enabled) ⵠΔᐃⲆⵠⵠⲆᐃΔ();
			ⲆΔⲆΔᐃᐃⲆᐃᐃ();
			if (this.ⵠⲆⵠⵠΔⵠΔ && ΔⲆⵠⲆ === this.ΔΔⵠⲆᐃΔⲆ) ᐃⵠᐃⲆⵠᐃᐃᐃⲆ();
			ⲆΔⵠ.ⵠΔΔⲆΔⵠᐃ.ᐃⵠΔᐃ();
			ⲆΔⵠ.alert.ᐃⵠΔᐃ(ᐃ[448], ᐃ[76]);
			if (this.ⵠⲆⵠⵠΔⵠΔ) {
				ⲆΔⵠ.ⲆⲆⵠⲆⲆ.ᐃⵠΔᐃ();
				ⲆΔⵠ.ⲆⵠΔⲆΔ.ᐃⵠΔᐃ();
				ⲆΔⵠ.ᐃΔⲆᐃ.ΔᐃΔᐃⲆⵠᐃ.ᐃⵠΔᐃ(ΔΔⵠᐃ.ΔⵠΔΔ.x, ΔΔⵠᐃ.ΔⵠΔΔ.y)
			}
			ᐃᐃᐃᐃⲆΔΔᐃᐃ()
		};
		this.ΔⵠᐃⲆΔⵠⵠⵠΔ = function() {
			ⲆΔⵠ.ⲆⵠΔ.ΔⵠΔ();
			ⲆΔⵠ.ⵠΔⲆΔ.ΔⵠΔ();
			if (!ⲆΔⵠ.reconnect.enabled && ⲆΔⵠ.ᐃΔⵠⵠᐃ) {
				ⲆΔⵠ.control.ΔⵠΔ();
				ⲆΔⵠ.ⵠⵠⵠⲆᐃ.ΔⵠΔ()
			}
			ⵠⲆΔ.ΔⵠΔ();
			this.ᐃΔΔᐃ.ⲆΔⲆᐃⲆⲆᐃᐃⵠ()
		};
		this.ⲆⲆΔⲆⵠΔⲆΔⵠ = function() {
			ΔΔΔΔᐃΔⵠΔΔ()
		};
		this.ΔⲆⵠᐃⲆⵠᐃⵠᐃ = function() {
			ΔΔᐃⲆ.ᐃᐃᐃⵠᐃⵠᐃⵠᐃ();
			ΔΔᐃⲆ.ⵠΔⲆⲆⵠΔⵠᐃᐃ();
			ΔΔᐃⲆ.ᐃᐃΔᐃᐃⲆΔⲆⲆ();
			ΔΔᐃⲆ.ⲆᐃⲆᐃᐃᐃⵠΔᐃ()
		};
		this.ᐃⵠΔᐃ = function() {
			if (!ⲆΔⵠ.reconnect.enabled && ⲆΔⵠ.ᐃΔⵠⵠᐃ) this.ΔⲆⵠᐃⲆⵠᐃⵠᐃ();
			ⵠⲆⵠᐃ.ⲆⲆⵠΔⲆᐃΔⵠⵠ();
			this.ΔⵠᐃⲆΔⵠⵠⵠΔ();
			if (ᐃⲆⲆ === ⲆΔⲆⵠ.ⵠⵠΔᐃⵠΔⵠ) {
				var ⵠⵠ = Δᐃ.ⵠᐃΔⲆᐃΔⵠ;
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / ΔᐃⲆᐃⵠ, Δⵠᐃᐃ - ⵠⵠ.height / ΔⲆⲆⲆ, ⵠⵠ.width / 2, ⵠⵠ.height / ΔⲆⵠΔ);
				return
			}
			this.ⲆⲆΔⲆⵠΔⲆΔⵠ();
			this.ΔΔΔᐃᐃⵠᐃΔⲆ()
		};
		this.ⲆᐃᐃⲆΔⵠⵠ = function(ⵠᐃᐃᐃ) {
			if (ⲆΔⵠ.ᐃᐃⲆΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ⵠᐃᐃᐃ.keyCode === 27) ⲆΔⵠ.ᐃᐃⲆΔⲆ.ⲆⵠᐃⵠΔ();
			else if (ⲆΔⵠ.ᐃⲆᐃΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ⵠᐃᐃᐃ.keyCode === 27) ⲆΔⵠ.ᐃⲆᐃΔᐃ.ⲆⵠᐃⵠΔ();
			else if (!ⲆΔⵠ.ᐃᐃⲆΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !ⲆΔⵠ.ᐃⲆᐃΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && 79 == ⵠᐃᐃᐃ.keyCode && -ⵠⵠⵠⲆ == ⵠⵠΔⵠⲆ) ⲆΔⵠ.ᐃⲆᐃΔᐃ.ΔΔⲆⵠᐃⲆᐃⲆᐃ();
			else if (ⵠᐃᐃᐃ.keyCode == 13 && -ⲆⲆⲆᐃ == ⵠⵠΔⵠⲆ) {
				ⲆΔⵠ.ᐃⲆᐃΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] ? ⲆΔⵠ.ᐃⲆᐃΔᐃ.ᐃⵠⲆΔⵠᐃΔ() : ⲆΔⵠ.ᐃᐃⲆΔⲆ.ΔᐃᐃⵠⲆ()
			} else if (!ⲆΔⵠ.ᐃᐃⲆΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !ⲆΔⵠ.ᐃⲆᐃΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				if (ⵠᐃᐃᐃ.keyCode === 82) ⲆΔⵠ.ⵠⵠⵠⲆᐃ.ⵠⵠⵠᐃᐃⵠᐃ();
				else if (80 === ⵠᐃᐃᐃ.keyCode && ⵠⲆΔ.mode === ᐃΔᐃᐃ.ⲆⵠⵠΔΔⲆⵠ && !ⲆΔⵠ.ΔᐃⲆΔᐃⲆᐃ) ⲆΔⵠ.ⲆᐃⵠⵠΔ.ⵠⵠⵠᐃᐃⵠᐃ();
				else if (ⵠᐃᐃᐃ.keyCode >= 49 && 57 >= ⵠᐃᐃᐃ.keyCode) {
					if (ⲆΔⵠ.ⵠΔᐃΔ.id < ⵠΔΔⲆ) {
						var ᐃⲆ = ⵠᐃᐃᐃ.keyCode - 49;
						var ΔⵠᐃⲆ = ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ[ᐃⲆ];
						if (ΔⵠᐃⲆ) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ΔⵠᐃⲆ.id, ᐃⲆ)
					}
				} else if (89 == ⵠᐃᐃᐃ.keyCode) ⲆΔⵠ.ⲆΔⵠΔⲆᐃⲆ = !ⲆΔⵠ.ⲆΔⵠΔⲆᐃⲆ;
				else if (71 == ⵠᐃᐃᐃ.keyCode) ⲆΔⵠ.ⵠΔᐃΔ.ᐃᐃΔΔᐃΔⵠⲆᐃ()
			}
			ᐃⵠᐃⲆᐃ.up(ⵠᐃᐃᐃ)
		};
		this.ΔΔⲆⵠⲆᐃᐃ = function(ⵠᐃᐃᐃ) {
			ᐃⵠᐃⲆᐃ.down(ⵠᐃᐃᐃ);
			if (8 == ⵠᐃᐃᐃ.keyCode && !ⲆΔⵠ.ᐃᐃⲆΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !ⲆΔⵠ.ᐃⲆᐃΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) ⵠᐃᐃᐃ.preventDefault()
		};
		this.ⵠΔⲆⲆᐃⵠⲆ = function(ⵠᐃᐃᐃ) {
			ΔΔⵠᐃ.ΔⵠΔΔ = ⲆⲆⲆᐃⲆᐃᐃ(Ⲇᐃⵠ.ᐃⵠ, ⵠᐃᐃᐃ);
			var ᐃΔⵠⲆᐃ = ⵠⲆᐃⵠⵠ;
			if (ⵠΔΔⲆ > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ) Ⲇᐃⵠ.ᐃΔᐃΔΔ.focus(ΔΔⵠᐃ.ΔⵠΔΔ);
			var ⲆᐃⲆΔ = ⲆΔⵠ.ⲆᐃⲆΔ;
			if (0 > ⲆΔⵠ.ⵠΔᐃΔ.id && 0 <= ⲆᐃⲆΔ.id) {
				(!ⲆΔⵠ.ⲆᐃⲆΔ.lock || ⲆΔⵠ.ⲆᐃⲆΔ.ⲆⲆΔᐃ === ⲆΔⵠ.id) && (ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⵠⲆᐃ[ⲆΔⵠ.ⲆᐃⲆΔ.id].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ))
			}
			var ΔΔⲆᐃ = ⲆΔⵠ.ΔΔⲆᐃ;
			if (ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && 0 < ΔΔⲆᐃ.ΔⲆⵠΔΔ) {
				ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⲆΔᐃⲆΔⵠⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ)
			}
			var ᐃⵠΔΔ = ⲆΔⵠ.ᐃⵠΔΔ;
			ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && 0 < ᐃⵠΔΔ.ⵠⵠⲆⲆⵠⲆΔ && (ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ᐃᐃᐃᐃⵠᐃⲆ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ), ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⵠⲆⲆΔⵠᐃⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ), ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⵠⵠⵠⲆᐃΔⲆ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ), ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⲆΔⲆΔⲆΔΔ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ), ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⵠⵠⲆᐃΔⵠⲆ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ));
			var ⲆΔᐃⲆ = ⲆΔⵠ.ⲆΔᐃⲆ;
			ⲆΔᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ⲆΔᐃⲆ.ⲆᐃⵠΔⵠΔⲆ > ⵠΔⵠᐃ && (ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⵠⲆⲆᐃⲆⵠᐃ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ));
			ⲆΔⵠ.sign[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.sign.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ));
			if (!ⲆΔⵠ.ⲆᐃⲆΔ.lock) {
				if (ⲆΔⵠ.ⲆᐃⲆΔ.ᐃΔΔⵠⲆᐃᐃ) ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⵠⲆᐃⵠⵠⲆⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ)
			}
			if (ⲆΔⵠ.ⲆᐃⲆΔ.ⲆⵠⲆⲆⵠΔᐃ) ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ᐃⵠΔⵠⲆΔᐃ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ);
			if (ⲆΔⵠ.ⵠΔᐃΔ.id < ⲆᐃΔⵠ && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				var ᐃⲆⵠ = ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ;
				for (var ᐃⲆ = 0; ᐃⲆⵠ.length > ᐃⲆ; ᐃⲆ++) {
					var ᐃᐃⵠⲆᐃ = ᐃⲆⵠ[ᐃⲆ].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ);
					ᐃΔⵠⲆᐃ |= ᐃᐃⵠⲆᐃ;
					if (ᐃᐃⵠⲆᐃ) ⲆΔⵠ.ᐃΔⲆᐃ.ΔᐃΔᐃⲆⵠᐃ.start(ᐃⲆ, ΔΔⵠᐃ.ΔⵠΔΔ);
					(ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ⵠⵠⵠ > ⲆᐃⲆΔ.id || ᐃⲆⵠ[ᐃⲆ].id == ⲆᐃⲆΔ.id) || ⲆΔⵠ.ΔⲆΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ᐃⲆⵠ[ᐃⲆ].id === ΔⲆ.ᐃᐃᐃⲆ || ⲆΔⵠ.ⵠⲆⵠᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ᐃⲆⵠ[ᐃⲆ].id === ΔⲆ.ᐃⲆⲆΔⲆ || ⲆΔⵠ.ⲆΔᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ΔⲆ.ᐃᐃᐃⲆ === ᐃⲆⵠ[ᐃⲆ].id || ΔⲆ.ⲆⵠⲆᐃᐃ === ᐃⲆⵠ[ᐃⲆ].id) || ⲆΔⵠ.ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ΔⲆ.ΔⵠⲆΔΔ === ᐃⲆⵠ[ᐃⲆ].id || ⲆΔⵠ.ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ᐃⲆⵠ[ᐃⲆ].id === ΔⲆ.ᐃᐃᐃⲆ) && (ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ΔⵠᐃⲆⵠ[ᐃⲆⵠ[ᐃⲆ].id].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ))
				}
			}
			ⲆΔⵠ.ⵠᐃΔⵠⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⵠᐃΔⵠⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ));
			if (-1 != Ⲇᐃⵠ.ΔᐃⲆⲆᐃ) {
				ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ΔᐃᐃⵠΔ[Ⲇᐃⵠ.ΔᐃⲆⲆᐃ].button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ);
				if (ᐃΔⵠⲆᐃ) var ΔᐃᐃᐃⵠΔᐃ = true
			} else var ΔᐃᐃᐃⵠΔᐃ = false;
			if (ⲆΔⵠ.ⵠΔᐃΔ.id < 0 && ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !ΔᐃᐃᐃⵠΔᐃ && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !ⲆΔⵠ.ΔⵠⵠⵠΔ) {
				var ᐃⲆⵠ = ⲆΔⵠ.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ;
				for (var ᐃⲆ = 0; ᐃⲆ < ᐃⲆⵠ.length; ᐃⲆ++) {
					ᐃΔⵠⲆᐃ |= ᐃⲆⵠ[ᐃⲆ].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ)
				}
			}
			if (Ⲇⵠⵠᐃ > ⲆΔⵠ.ⵠΔᐃΔ.id && ⵠᐃⲆⵠ > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ && ⲆΔⵠ.ⲆⵠΔⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⲆⵠΔⲆΔ.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ);
			ⲆᐃΔⵠ > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ΔΔⲆⲆ.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ));
			if (0 > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.options.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ);
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ));
			if (0 > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				if (ⵠⲆⵠᐃ.ΔᐃᐃⵠⲆ) ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ);
				else ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ)
			}
			ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < ⵠᐃΔ && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ᐃΔᐃᐃ.ᐃΔΔΔᐃ !== ⵠⲆΔ.mode && ⵠⲆΔ.mode !== ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ && ᐃΔᐃᐃ.ᐃⲆΔⲆⵠΔᐃ !== ⵠⲆΔ.mode && (ᐃΔⵠⲆᐃ |= Ⲇᐃⵠ.ᐃΔΔᐃ.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ));
			if (!ᐃΔⵠⲆᐃ && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.sign[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				if (ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ >= 0) ΔΔᐃⲆ.ⲆΔⲆᐃᐃᐃⲆⲆⵠ();
				else !ΔᐃᐃᐃⵠΔᐃ && ΔΔⵠᐃ.down()
			}
		};
		this.ⵠⵠΔᐃΔⲆⲆ = function(ⵠᐃᐃᐃ) {
			ΔΔⵠᐃ.ΔⵠΔΔ = ⲆⲆⲆᐃⲆᐃᐃ(Ⲇᐃⵠ.ᐃⵠ, ⵠᐃᐃᐃ);
			ΔΔⵠᐃ.up();
			if (ⲆΔⵠ.ᐃΔⲆᐃ.ΔᐃΔᐃⲆⵠᐃ.release()) return;
			var ⲆᐃⲆΔ = ⲆΔⵠ.ⲆᐃⲆΔ;
			var ΔⲆΔⲆᐃ = ⲆΔⵠ.ΔⲆΔⲆᐃ;
			var ⵠⲆⵠᐃᐃ = ⲆΔⵠ.ⵠⲆⵠᐃᐃ;
			var ΔΔⲆᐃ = ⲆΔⵠ.ΔΔⲆᐃ;
			var ᐃⵠΔΔ = ⲆΔⵠ.ᐃⵠΔΔ;
			var ⲆΔᐃⲆ = ⲆΔⵠ.ⲆΔᐃⲆ;
			ⲆΔⵠ.control.attack && (ⲆΔⵠ.control.attack = ⲆⲆᐃⲆ, ΔΔᐃⲆ.ΔΔⵠⲆᐃⵠⵠΔⵠ());
			if (-ⲆⲆⵠ != Ⲇᐃⵠ.ΔᐃⲆⲆᐃ) {
				var ⲆⵠΔᐃ = Ⲇᐃⵠ.ΔᐃᐃⵠΔ[Ⲇᐃⵠ.ΔᐃⲆⲆᐃ].button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
				var Ⲇⵠᐃⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[95]).style;
				if (ⲆⵠΔᐃ && Ⲇⵠᐃⵠ.display == ᐃ[376]) {
					Ⲇⵠᐃⵠ.display = ᐃ[371];
					return
				} else ⲆⵠΔᐃ && Ⲇᐃⵠ.ΔᐃᐃⵠΔ[Ⲇᐃⵠ.ΔᐃⲆⲆᐃ].action()
			}
			if (0 > ⲆΔⵠ.ⵠΔᐃΔ.id && ᐃⲆᐃ <= ⲆᐃⲆΔ.id && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				if (!ⲆΔⵠ.ⲆᐃⲆΔ.lock || ⲆΔⵠ.ⲆᐃⲆΔ.ⲆⲆΔᐃ === ⲆΔⵠ.id) {
					var ⲆⵠΔᐃ = Ⲇᐃⵠ.ⵠⲆᐃ[ⲆΔⵠ.ⲆᐃⲆΔ.id].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
					if (ⲆⵠΔᐃ) ΔΔᐃⲆ.ⵠⲆⲆⵠⲆᐃᐃⲆⲆ(ⲆᐃⲆΔ)
				}
			}
			var ΔΔⲆᐃ = ⲆΔⵠ.ΔΔⲆᐃ;
			if (ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ΔΔⲆᐃ.ΔⲆⵠΔΔ > 0 && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				var ⲆⵠΔᐃ = Ⲇᐃⵠ.ⲆΔᐃⲆΔⵠⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
				ⲆⵠΔᐃ && ΔΔᐃⲆ.ᐃᐃⵠⲆⵠⲆⵠⵠⲆ(ΔΔⲆᐃ)
			}
			var ᐃⵠΔΔ = ⲆΔⵠ.ᐃⵠΔΔ;
			if (ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ᐃⵠΔΔ.ⵠⵠⲆⲆⵠⲆΔ > 0 && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				switch (ᐃⵠΔΔ.type) {
					case ᐃᐃᐃ.Ⲇᐃⵠⵠᐃ:
						var ⲆⵠΔᐃ = Ⲇᐃⵠ.ᐃᐃᐃᐃⵠᐃⲆ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
						if (ⲆⵠΔᐃ) ΔΔᐃⲆ.ᐃⲆᐃⵠⵠⲆⲆ(ᐃⵠΔΔ);
						break;
					case ᐃᐃᐃ.ᐃΔᐃⵠᐃ:
						var ⲆⵠΔᐃ = Ⲇᐃⵠ.ⵠⲆⲆΔⵠᐃⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
						ⲆⵠΔᐃ && ΔΔᐃⲆ.ᐃⲆᐃⵠⵠⲆⲆ(ᐃⵠΔΔ);
						break;
					case ᐃᐃᐃ.Δⵠⵠⵠᐃ:
						var ⲆⵠΔᐃ = Ⲇᐃⵠ.ⵠⵠⵠⲆᐃΔⲆ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
						ⲆⵠΔᐃ && ΔΔᐃⲆ.ᐃⲆᐃⵠⵠⲆⲆ(ᐃⵠΔΔ);
						break;
					case ᐃᐃᐃ.ⲆᐃᐃΔⵠ:
						var ⲆⵠΔᐃ = Ⲇᐃⵠ.ⲆΔⲆΔⲆΔΔ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
						if (ⲆⵠΔᐃ) ΔΔᐃⲆ.ᐃⲆᐃⵠⵠⲆⲆ(ᐃⵠΔΔ);
						break;
					case ᐃᐃᐃ.ᐃⲆᐃΔⵠ:
						var ⲆⵠΔᐃ = Ⲇᐃⵠ.ⵠⵠⲆᐃΔⵠⲆ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
						ⲆⵠΔᐃ && ΔΔᐃⲆ.ᐃⲆᐃⵠⵠⲆⲆ(ᐃⵠΔΔ);
						break
				}
			}
			var ⲆΔᐃⲆ = ⲆΔⵠ.ⲆΔᐃⲆ;
			if (ⲆΔᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ⲆΔᐃⲆ.ⲆᐃⵠΔⵠΔⲆ > ⲆⲆᐃ && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				var ⲆⵠΔᐃ = Ⲇᐃⵠ.ⵠⲆⲆᐃⲆⵠᐃ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
				if (ⲆⵠΔᐃ) ΔΔᐃⲆ.ⵠΔⵠⲆΔⵠΔⵠⲆ(ⲆΔᐃⲆ)
			}
			if (ⲆΔⵠ.sign[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				var ⲆⵠΔᐃ = Ⲇᐃⵠ.sign.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
				ⲆⵠΔᐃ && Ⲇᐃⵠ.sign.select()
			}
			if (!ⲆΔⵠ.ⲆᐃⲆΔ.lock && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				if (ⲆΔⵠ.ⲆᐃⲆΔ.ᐃΔΔⵠⲆᐃᐃ) {
					ⲆⵠΔᐃ = Ⲇᐃⵠ.ⵠⲆᐃⵠⵠⲆⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
					if (ⲆⵠΔᐃ) ΔΔᐃⲆ.ΔΔⲆᐃⵠΔΔⵠⲆ(ⲆᐃⲆΔ)
				}
			}
			if (ⲆΔⵠ.ⲆᐃⲆΔ.ⲆⵠⲆⲆⵠΔᐃ && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				ⲆⵠΔᐃ = Ⲇᐃⵠ.ᐃⵠΔⵠⲆΔᐃ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
				if (ⲆⵠΔᐃ) {
					ΔΔᐃⲆ.ΔⵠᐃᐃΔⵠΔΔⵠ(ⲆᐃⲆΔ);
					if (ga) ga(ᐃ[299], ᐃ[51], ᐃ[182], "lockpick")
				}
			}
			if (ⲆΔⵠ.ⵠᐃΔⵠⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				var ⲆⵠΔᐃ = Ⲇᐃⵠ.ⵠᐃΔⵠⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
				if (ⲆⵠΔᐃ) {
					ΔΔᐃⲆ.ⵠᐃΔⵠⵠ();
					ga && ga(ᐃ[299], ᐃ[51], ᐃ[182], "resurrection")
				}
			}
			if (0 > ⲆΔⵠ.ⵠΔᐃΔ.id   && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				var ᐃⲆⵠ = ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ;
				for (var ᐃⲆ = ⲆⲆΔ; ᐃⲆⵠ.length > ᐃⲆ; ᐃⲆ++) {
					var ⲆⵠΔᐃ = ᐃⲆⵠ[ᐃⲆ].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
					if (!ⲆⵠΔᐃ) {
						if (ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ⵠⵠᐃ > ⲆᐃⲆΔ.id || ᐃⲆⵠ[ᐃⲆ].id === ⲆᐃⲆΔ.id)) {
							var ⲆⵠΔᐃ = Ⲇᐃⵠ.ΔⵠᐃⲆⵠ[ᐃⲆⵠ[ᐃⲆ].id].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
							if (ⲆⵠΔᐃ && ΔᐃⲆⲆ > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ) {
								if (ⵠᐃᐃᐃ.shiftKey) {
									if (Settings.PutInChest > 255) {
										for (let i = 0; i < Settings.PutInChest / 255; i++) {
											if (i === Math.floor(Settings.PutInChest / 255)) {
												ΔΔᐃⲆ.ᐃᐃᐃⵠⵠⲆⲆΔⲆ(ⲆᐃⲆΔ, ᐃⲆⵠ[ᐃⲆ].id, Settings.PutInChest % 255)
											} else {
												ΔΔᐃⲆ.ᐃᐃᐃⵠⵠⲆⲆΔⲆ(ⲆᐃⲆΔ, ᐃⲆⵠ[ᐃⲆ].id, 255)
											}
										}
									} else {
										ΔΔᐃⲆ.ᐃᐃᐃⵠⵠⲆⲆΔⲆ(ⲆᐃⲆΔ, ᐃⲆⵠ[ᐃⲆ].id, Settings.PutInChest)
									}
								} else {
									ΔΔᐃⲆ.ᐃᐃᐃⵠⵠⲆⲆΔⲆ(ⲆᐃⲆΔ, ᐃⲆⵠ[ᐃⲆ].id, 1)
								}
							}
						} else if (ⵠⲆⵠᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ΔⲆ.ᐃⲆⲆΔⲆ === ᐃⲆⵠ[ᐃⲆ].id) {
							var ⲆⵠΔᐃ = Ⲇᐃⵠ.ΔⵠᐃⲆⵠ[ᐃⲆⵠ[ᐃⲆ].id].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
							ⲆⵠΔᐃ && 0 > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ && ΔΔᐃⲆ.ᐃⵠⲆᐃΔⵠᐃᐃΔ(ⵠⲆⵠᐃᐃ)
						} else if (ΔⲆΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ΔⲆ.ᐃᐃᐃⲆ === ᐃⲆⵠ[ᐃⲆ].id) {
							var ⲆⵠΔᐃ = Ⲇᐃⵠ.ΔⵠᐃⲆⵠ[ᐃⲆⵠ[ᐃⲆ].id].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
							if (ⲆⵠΔᐃ && ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < ⵠᐃⵠ) ΔΔᐃⲆ.ᐃΔⵠⲆᐃⲆⵠΔⵠ(ΔⲆΔⲆᐃ, ⵠᐃᐃᐃ.shiftKey ? ΔΔⲆΔΔ : ΔᐃⵠⲆ)
						} else if (ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ᐃⲆⵠ[ᐃⲆ].id === ΔⲆ.ΔⵠⲆΔΔ) {
							var ⲆⵠΔᐃ = Ⲇᐃⵠ.ΔⵠᐃⲆⵠ[ᐃⲆⵠ[ᐃⲆ].id].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
							ⲆⵠΔᐃ && ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < ⲆⲆΔ && ΔΔᐃⲆ.ⵠⲆⵠΔΔⲆᐃΔⲆ(ΔΔⲆᐃ, ⵠᐃᐃᐃ.shiftKey ? 10 : 1)
						} else if (ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ᐃⲆⵠ[ᐃⲆ].id === ΔⲆ.ᐃᐃᐃⲆ) {
							var ⲆⵠΔᐃ = Ⲇᐃⵠ.ΔⵠᐃⲆⵠ[ᐃⲆⵠ[ᐃⲆ].id].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
							if (ⲆⵠΔᐃ && ⵠⵠΔΔ > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ) ΔΔᐃⲆ.ΔᐃᐃΔᐃΔⲆΔΔ(ᐃⵠΔΔ, ⵠᐃᐃᐃ.shiftKey ? ⵠᐃⲆⵠᐃ : 1)
						} else if (ⲆΔᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ᐃⲆⵠ[ᐃⲆ].id === ΔⲆ.ᐃᐃᐃⲆ || ᐃⲆⵠ[ᐃⲆ].id === ΔⲆ.ⲆⵠⲆᐃᐃ)) {
							var ⲆⵠΔᐃ = Ⲇᐃⵠ.ΔⵠᐃⲆⵠ[ᐃⲆⵠ[ᐃⲆ].id].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
							if (ⲆⵠΔᐃ && ⲆⲆᐃⲆ > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ) {
								if (ᐃⲆⵠ[ᐃⲆ].id === ΔⲆ.ᐃᐃᐃⲆ) ΔΔᐃⲆ.ⲆΔΔⲆΔΔΔ(ⲆΔᐃⲆ, ⵠᐃᐃᐃ.shiftKey ? 10 : ⲆⲆᐃⵠ, Δⵠⵠ);
								else ΔΔᐃⲆ.ⲆΔΔⲆΔΔΔ(ⲆΔᐃⲆ, 0, ⵠᐃᐃᐃ.shiftKey ? 10 : Δⵠᐃ)
							}
						}
						continue
					} else {
						if (ⵠᐃᐃᐃ.which == 1 && !ⵠᐃᐃᐃ.shiftKey) ΔΔᐃⲆ.ΔΔⲆⲆⵠ(ᐃⲆⵠ[ᐃⲆ].id, ᐃⲆ);
						else(1 == ⵠᐃᐃᐃ.which && ⵠᐃᐃᐃ.shiftKey || 3 == ⵠᐃᐃᐃ.which) && ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && Ⲇᐃⵠ.ⲆΔᐃᐃ.ΔΔⲆⲆᐃᐃᐃ(ᐃⲆⵠ[ᐃⲆ].id)
					}
				}
			}
			if (ⲆΔⵠ.ⵠΔᐃΔ.id < 0 && ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0   && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !ⲆΔⵠ.ΔⵠⵠⵠΔ) {
				var ᐃⲆⵠ = ⲆΔⵠ.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ;
				for (var ᐃⲆ = ⵠᐃⵠ; ᐃⲆⵠ.length > ᐃⲆ; ᐃⲆ++) {
					var ⲆⵠΔᐃ = ᐃⲆⵠ[ᐃⲆ].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
					if (!ⲆⵠΔᐃ) continue;
					ᐃᐃⵠⲆᐃ = ΔΔᐃⲆ.ΔΔᐃⲆⲆΔᐃᐃΔ(ᐃⲆⵠ[ᐃⲆ].id);
					ᐃᐃⵠⲆᐃ && ga && ga(ᐃ[299], ᐃ[51], ᐃ[182], "craft", ⵠⵠⲆⵠ[ᐃⵠᐃⵠⵠ[ᐃⲆⵠ[ᐃⲆ].id].ᐃⲆⲆΔ].name)
				}
			}
			if (ⲆΔⵠ.ⵠΔᐃΔ.id < 0 && ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && ⲆΔⵠ.ⲆⵠΔⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				var ⲆⵠΔᐃ = Ⲇᐃⵠ.ⲆⵠΔⲆΔ.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
				if (ⲆⵠΔᐃ) ᐃⲆΔⵠ.ⲆⵠΔⲆΔ.select()
			}
			if (ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				if (ⵠⲆⵠᐃ.ΔᐃᐃⵠⲆ) {
					var ⲆⵠΔᐃ = Ⲇᐃⵠ.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
					if (ⲆⵠΔᐃ) {
						ⵠⲆⵠᐃ.select();
						if (ga) ga(ᐃ[299], ᐃ[51], ᐃ[182], "sound on")
					}
				} else {
					var ⲆⵠΔᐃ = Ⲇᐃⵠ.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
					if (ⲆⵠΔᐃ) {
						ⵠⲆⵠᐃ.select();
						if (ga) ga(ᐃ[299], ᐃ[51], ᐃ[182], "sound off")
					}
				}
			}
			if (ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				var ⲆⵠΔᐃ = Ⲇᐃⵠ.options.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
				if (ⲆⵠΔᐃ) {
					Ⲇᐃⵠ.options.ΔᐃⵠᐃⲆΔⲆⲆⵠ();
					ga && ga(ᐃ[299], ᐃ[51], ᐃ[182], "options")
				}
			}
			if (ⵠⵠᐃ > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && Ⲇᐃⵠ.ⲆΔΔᐃⲆᐃᐃ === 1) {
				var ⲆⵠΔᐃ = Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
				if (ⲆⵠΔᐃ) {
					Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ.select();
					ga && ga(ᐃ[299], ᐃ[51], ᐃ[182], "market")
				}
			}
			if (0 > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && Ⲇᐃⵠ.ΔᐃΔⲆΔⵠⲆ === ⲆⵠⲆ) {
				var ⲆⵠΔᐃ = Ⲇᐃⵠ.ΔΔⲆⲆ.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
				if (ⲆⵠΔᐃ) {
					Ⲇᐃⵠ.ΔΔⲆⲆ.ᐃΔⲆΔΔᐃᐃⲆᐃ();
					ga && ga(ᐃ[299], ᐃ[51], ᐃ[182], "recipe")
				}
			}
			if (ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < ⵠⵠⵠ && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ⵠⲆΔ.mode !== ᐃΔᐃᐃ.ᐃΔΔΔᐃ && ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ !== ⵠⲆΔ.mode && ᐃΔᐃᐃ.ᐃⲆΔⲆⵠΔᐃ !== ⵠⲆΔ.mode && Ⲇᐃⵠ.ᐃⵠΔⲆⲆⵠΔ === 1) {
				var ⲆⵠΔᐃ = Ⲇᐃⵠ.ᐃΔΔᐃ.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ);
				if (ⲆⵠΔᐃ) {
					Ⲇᐃⵠ.ᐃΔΔᐃ.select();
					ga && ga(ᐃ[299], ᐃ[51], ᐃ[182], "quests")
				}
			}
			ⲆΔⵠ.ⵠΔᐃΔ.ᐃΔΔᐃᐃ && 3 == ⵠᐃᐃᐃ.which && Ⲇᐃⵠ.ⲆⲆⵠΔⲆ.ΔΔⲆⲆᐃᐃᐃ()
		};
		this.ⵠΔⲆΔⲆⵠΔ = Ⲇⵠⵠⵠᐃ;
		this.ᐃⲆᐃⲆΔⵠᐃ = function(ⵠᐃᐃᐃ) {
			ΔΔⵠᐃ.ΔⵠΔΔ = ⲆⲆⲆᐃⲆᐃᐃ(Ⲇᐃⵠ.ᐃⵠ, ⵠᐃᐃᐃ);
			var ᐃⵠⲆᐃⵠ = false;
			ᐃⲆΔⵠ.ΔⲆⵠΔⵠ.display = 0;
			ⲆΔⵠ.ᐃΔⲆᐃ.ΔᐃΔᐃⲆⵠᐃ.ⵠⲆΔΔⲆ(ΔΔⵠᐃ.ΔⵠΔΔ);
			if (-1 != Ⲇᐃⵠ.ΔᐃⲆⲆᐃ) ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ΔᐃᐃⵠΔ[Ⲇᐃⵠ.ΔᐃⲆⲆᐃ].button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
			var ΔΔⲆᐃ = ⲆΔⵠ.ΔΔⲆᐃ;
			ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ⵠⵠⲆΔ < ΔΔⲆᐃ.ΔⲆⵠΔΔ && (ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⲆΔᐃⲆΔⵠⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ));
			var ᐃⵠΔΔ = ⲆΔⵠ.ᐃⵠΔΔ;
			if (ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ⵠⵠⵠ < ᐃⵠΔΔ.ⵠⵠⲆⲆⵠⲆΔ) {
				ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ᐃᐃᐃᐃⵠᐃⲆ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
				ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⵠⲆⲆΔⵠᐃⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
				ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⵠⵠⵠⲆᐃΔⲆ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
				ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⲆΔⲆΔⲆΔΔ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
				ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⵠⵠⲆᐃΔⵠⲆ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ)
			}
			var ⲆΔᐃⲆ = ⲆΔⵠ.ⲆΔᐃⲆ;
			ⲆΔᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ⲆΔᐃⲆ.ⲆᐃⵠΔⵠΔⲆ > 0 && (ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⵠⲆⲆᐃⲆⵠᐃ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ));
			ⲆΔⵠ.sign[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.sign.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ));
			var ⲆᐃⲆΔ = ⲆΔⵠ.ⲆᐃⲆΔ;
			if (0 > ⲆΔⵠ.ⵠΔᐃΔ.id && ⵠᐃΔ <= ⲆᐃⲆΔ.id  ) {
				if (!ⲆΔⵠ.ⲆᐃⲆΔ.lock || ⲆΔⵠ.ⲆᐃⲆΔ.ⲆⲆΔᐃ === ⲆΔⵠ.id) ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⵠⲆᐃ[ⲆᐃⲆΔ.id].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ)
			}
			if (ⲆΔⵠ.ⵠᐃΔⵠⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⵠᐃΔⵠⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
			if (!ⲆΔⵠ.ⲆᐃⲆΔ.lock  ) {
				ⲆΔⵠ.ⲆᐃⲆΔ.ᐃΔΔⵠⲆᐃᐃ && (ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⵠⲆᐃⵠⵠⲆⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ))
			}
			ⲆΔⵠ.ⲆᐃⲆΔ.ⲆⵠⲆⲆⵠΔᐃ   && (ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ᐃⵠΔⵠⲆΔᐃ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ));
			if (ⲆⲆΔ > ⲆΔⵠ.ⵠΔᐃΔ.id  ) {
				var ᐃⲆⵠ = ⲆΔⵠ.ᐃΔⲆᐃ.ΔⵠΔⵠⲆ;
				for (var ᐃⲆ = 0; ᐃⲆ < ᐃⲆⵠ.length; ᐃⲆ++) {
					var ΔⵠⵠΔⵠᐃⲆ = ᐃⲆⵠ[ᐃⲆ].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
					ᐃⵠⲆᐃⵠ |= ᐃⲆΔⵠ.ΔⲆⵠΔⵠ.ᐃᐃᐃⵠ(ΔⵠⵠΔⵠᐃⲆ, ᐃⲆⵠ[ᐃⲆ], ᐃⲆᐃ);
					if (ⲆᐃⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ⲆᐃⲆΔ.id < Ⲇⵠⵠᐃ || ᐃⲆⵠ[ᐃⲆ].id == ⲆᐃⲆΔ.id) || ⲆΔⵠ.ΔⲆΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ᐃⲆⵠ[ᐃⲆ].id == ΔⲆ.ᐃᐃᐃⲆ || ⲆΔⵠ.ⵠⲆⵠᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ᐃⲆⵠ[ᐃⲆ].id === ΔⲆ.ᐃⲆⲆΔⲆ || ⲆΔⵠ.ⲆΔᐃⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && (ᐃⲆⵠ[ᐃⲆ].id == ΔⲆ.ᐃᐃᐃⲆ || ᐃⲆⵠ[ᐃⲆ].id == ΔⲆ.ⲆⵠⲆᐃᐃ) || ⲆΔⵠ.ΔΔⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ᐃⲆⵠ[ᐃⲆ].id == ΔⲆ.ΔⵠⲆΔΔ || ⲆΔⵠ.ᐃⵠΔΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ᐃⲆⵠ[ᐃⲆ].id == ΔⲆ.ᐃᐃᐃⲆ) {
						ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ΔⵠᐃⲆⵠ[ᐃⲆⵠ[ᐃⲆ].id].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ)
					}
				}
			}
			if (ΔᐃⲆⲆ > ⲆΔⵠ.ⵠΔᐃΔ.id && 0 > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ   && !ⲆΔⵠ.ΔⵠⵠⵠΔ) {
				var ᐃⲆⵠ = ⲆΔⵠ.ⵠΔᐃΔ.ΔⲆᐃⵠⵠ;
				for (var ᐃⲆ = 0; ᐃⲆⵠ.length > ᐃⲆ; ᐃⲆ++) {
					var ΔⵠⵠΔⵠᐃⲆ = false;
					ΔⵠⵠΔⵠᐃⲆ = ᐃⲆⵠ[ᐃⲆ].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
					ᐃⵠⲆᐃⵠ |= ᐃⲆΔⵠ.ΔⲆⵠΔⵠ.ᐃᐃᐃⵠ(ΔⵠⵠΔⵠᐃⲆ, ᐃⲆⵠ[ᐃⲆ], 1)
				}
			}
			if (Ⲇⵠᐃ > ⲆΔⵠ.ⵠΔᐃΔ.id && ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < ΔᐃⲆⲆ && ⲆΔⵠ.ⲆⵠΔⲆΔ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⲆⵠΔⲆΔ.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
			if (ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < ᐃⲆᐃ && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ᐃΔΔⲆ === Ⲇᐃⵠ.ΔᐃΔⲆΔⵠⲆ) ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ΔΔⲆⲆ.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
			if (0 > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.options.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
			if (ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ < 0 && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && Ⲇᐃⵠ.ⲆΔΔᐃⲆᐃᐃ === ΔΔⵠ) ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
			if (ⵠΔⵠᐃ > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ᐃΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]) {
				if (ⵠⲆⵠᐃ.ΔᐃᐃⵠⲆ) ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⵠⲆⵠᐃ.ⵠΔⵠΔᐃⲆⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ);
				else ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ⵠⲆⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ)
			}
			0 > ⲆΔⵠ.ⵠΔᐃΔ.ⵠⲆⵠⵠ && !Ⲇᐃⵠ.ΔΔⲆⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆΔᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.options[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⲆⲆⵠΔⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && !Ⲇᐃⵠ.ⵠᐃⲆⲆᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]] && ⵠⲆΔ.mode !== ᐃΔᐃᐃ.ᐃΔΔΔᐃ && ⵠⲆΔ.mode !== ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ && ⵠⲆΔ.mode !== ᐃΔᐃᐃ.ᐃΔΔᐃΔΔᐃⵠᐃ && Ⲇᐃⵠ.ᐃⵠΔⲆⲆⵠΔ === 1 && (ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.ᐃΔΔᐃ.button.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ));
			if (ᐃⵠⲆᐃⵠ !== Ⲇᐃⵠ.ⵠΔⲆΔⲆⵠΔ) {
				Ⲇᐃⵠ.ⵠΔⲆΔⲆⵠΔ = ᐃⵠⲆᐃⵠ;
				ᐃⵠⲆᐃⵠ ? ᐃⵠ.style[ᐃ[210]] = Ⲇᐃⵠ.ᐃΔⵠⵠΔΔⵠ : ᐃⵠ.style[ᐃ[210]] = Ⲇᐃⵠ.ⲆⵠⵠⲆᐃⵠⲆ
			}
		};
		this.ΔⵠᐃΔⲆⵠⵠ = function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[ⵠⲆᐃᐃⲆ], this.ⵠΔⲆⲆᐃⵠⲆ, ΔΔⲆᐃᐃ);
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⵠⵠΔᐃΔⲆⲆ, false);
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[341], this.ᐃⲆᐃⲆΔⵠᐃ, ᐃⵠᐃΔⵠ);
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("keyup", this.ⲆᐃᐃⲆΔⵠⵠ, ⲆⵠΔΔⵠ);
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("keydown", this.ΔΔⲆⵠⲆᐃᐃ, ΔΔⲆᐃᐃ)
		};
		this.ᐃⵠⵠⲆᐃᐃᐃ = function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[132]](ᐃ[12], this.ⵠΔⲆⲆᐃⵠⲆ, false);
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[132]](ᐃ[160], this.ⵠⵠΔᐃΔⲆⲆ, Ⲇⵠⵠⵠᐃ);
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[132]](ᐃ[341], this.ᐃⲆᐃⲆΔⵠᐃ, ⲆⵠΔΔⵠ);
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[132]]("keyup", this.ⲆᐃᐃⲆΔⵠⵠ, ⵠᐃΔΔᐃ);
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[132]]("keydown", this.ΔΔⲆⵠⲆᐃᐃ, ⲆⵠΔΔⵠ)
		}
	}

	function ⲆᐃΔⵠⲆⲆⵠΔⲆ(ᐃⵠ, Δ, ΔⵠⲆⵠⲆⵠⲆΔᐃ) {
		this.ᐃⵠ = ᐃⵠ;
		this.Δ = Δ;
		this.ⵠᐃΔⲆⲆΔⲆ = {
			translate: {
				x: ⵠⵠᐃ,
				y: 0
			},
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("loading").style,
			"ΔⵠΔ": function() {
				this.style.left = this.translate.x + ᐃ[279];
				this.style.top = Math.floor(this.translate.y) + ᐃ[279]
			}
		};
		this.ⵠᐃΔⲆⲆΔⲆ.style.position = "absolute";
		this.ⵠᐃΔⲆⲆΔⲆ.style.display = ᐃ[376];
		this.ⵠᐃΔⲆⲆΔⲆ.ΔⵠΔ();
		this.ⵠΔⲆΔΔ = true;
		this.stop = function() {
			this.ⵠΔⲆΔΔ = ⲆᐃΔᐃⵠ
		};
		this.ᐃᐃⲆⲆΔΔⵠ = {
			total: ⵠⲆⵠⲆ
		};
		var Ⲇᐃⵠ = this;
		var ⲆᐃⵠᐃⲆ = function() {};
		var ⵠⵠΔⵠⲆ = ⵠΔΔⲆ;
		var ᐃⵠⲆᐃΔ = 40;
		this.ⵠΔᐃⲆⲆ = function() {
			Ⲇᐃⵠ.ΔⵠΔ();
			ⵠⵠΔⵠⲆ++;
			if (ⵠⵠΔⵠⲆ == ᐃⵠⲆᐃΔ) {
				Ⲇᐃⵠ.stop();
				ⲆᐃⵠᐃⲆ();
				return
			}
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]](Ⲇᐃⵠ.ⵠΔᐃⲆⲆ, 0)
		};
		this.ⲆⵠᐃⵠΔ = function(ⲆⲆⲆᐃᐃ) {
			ⲆᐃⵠᐃⲆ = ⲆⲆⲆᐃᐃ;
			Ⲇᐃⵠ.ⵠΔᐃⲆⲆ()
		};
		var ⵠᐃᐃᐃΔⵠΔⵠᐃ = (new Date).getTime();

		function ΔᐃᐃΔΔΔΔ(name) {
			if (-ΔΔΔᐃ !== name.indexOf("normal-mode") || -1 !== name.indexOf("player0")) return Δⵠᐃ;
			if (name.indexOf("day-bag") !== -1 || name.indexOf("night-bag") !== -ⵠⵠⵠⲆ || -1 !== name.indexOf("day-book") || name.indexOf("night-book") !== -1 || -1 !== name.indexOf("day-player") || name.indexOf("night-player") !== -1 || name.indexOf("day-accessory") !== -1 || -1 !== name.indexOf("night-accessory") || name.indexOf("day-crate") !== -ᐃΔⲆΔ || -ⲆⵠⲆ !== name.indexOf("night-crate") || -ΔΔΔᐃ !== name.indexOf("day-skin") || name.indexOf("night-skin") !== -1 || name.indexOf("day-river") !== -ⵠᐃᐃ || name.indexOf("night-river") !== -ᐃΔⲆΔ || name.indexOf("day-river") !== -1 || name.indexOf("night-river") !== -ᐃΔΔⲆ || -1 !== name.indexOf("day-rock") || -1 !== name.indexOf("night-rock") || name.indexOf("day-flower") !== -1 || name.indexOf("night-flower") !== -1 || name.indexOf("day-leaf") !== -1 || -1 !== name.indexOf("night-leaf") || name.indexOf("day-herb") !== -ΔΔΔᐃ || name.indexOf("night-herb") !== -1 || -ⲆⲆᐃⵠ !== name.indexOf("day-shell") || name.indexOf("night-shell") !== -1 || -Δⵠᐃ !== name.indexOf("day-hand-skin") || name.indexOf("night-hand-skin") !== -ⲆⲆⲆᐃ || -ᐃⲆⲆ !== name.indexOf("bignight") || name.indexOf("bigday") !== -1 || -ᐃⲆⲆ !== name.indexOf("bigzday") || name.indexOf("bigznight") !== -1 || name.indexOf("tutorial-box") !== -1 || -1 !== name.indexOf("tuto-") || -1 !== name.indexOf("-leaderboard-") || -ΔᐃⵠⲆ !== name.indexOf("-lead-") || name.indexOf("day-lava-") !== -ⵠⵠⵠⲆ || name.indexOf("night-lava-") !== -1 || -ⲆⲆΔⵠ !== name.indexOf("-click.png") || -ⵠᐃᐃ !== name.indexOf("-in.png") || -1 !== name.indexOf("-fog") || -ⲆⲆⵠ !== name.indexOf("-lava") || -1 !== name.indexOf("pebblecompo") || name.indexOf("avatar-player") !== -1) return ⵠᐃΔ;
			return ⵠⲆⵠⲆ
		}
		var ᐃΔΔⵠΔΔᐃ = Object.keys(Δᐃ).length;
		var ᐃΔⵠⵠΔⵠᐃⲆΔ = ᐃΔΔⵠΔΔᐃ;
		for (var ⵠⵠ in Δᐃ) {
			if (ΔᐃᐃΔΔΔΔ(Δᐃ[ⵠⵠ]) === 0) ᐃΔΔⵠΔΔᐃ--
		}
		var ⵠΔⵠⲆᐃᐃᐃΔⲆ = function() {
			if (ΔᐃⲆⲆ !== this.ⵠⵠΔΔⲆⵠⲆ) return this.ⵠⵠΔΔⲆⵠⲆ;
			this.ⵠⵠΔΔⲆⵠⲆ = ΔⲆⵠΔ;
			this.src = this.ΔⵠΔΔᐃ;
			return ⵠⵠⵠ
		};
		var ᐃᐃΔⲆⲆⵠⵠ = function(ⵠᐃΔΔ) {
			this.ⵠⵠΔΔⲆⵠⲆ = 1
		};
		var ⵠΔⲆᐃⵠΔᐃ = 0;
		var ᐃΔᐃⲆⲆᐃⵠΔⲆ = function() {
			if (1 === ⵠΔⲆᐃⵠΔᐃ) return;
			ⵠΔⲆᐃⵠΔᐃ = ⲆⲆΔⵠ;
			ⵠⲆΔⲆᐃΔΔ !== ΔⵠⲆⵠⵠᐃᐃ && ⵠⲆΔⲆᐃΔΔ();
			ΔⵠⲆⵠⵠᐃᐃ();
			var ᐃᐃΔᐃⵠⵠᐃ = ΔⲆᐃ.ⲆΔⲆⲆⵠᐃᐃ("server");
			ᐃᐃΔᐃⵠⵠᐃ !== null && (ΔΔᐃⲆ.ⲆᐃᐃⵠᐃᐃΔ = 1, ΔΔᐃⲆ.ᐃⵠⲆᐃⲆ = [{
				nu: 0,
				m: ΔⲆⲆᐃᐃᐃΔ,
				i: "server" + ᐃᐃΔᐃⵠⵠᐃ + ".starve.io",
				p: 443,
				a: ᐃᐃΔᐃⵠⵠᐃ,
				ssl: ⵠᐃᐃ
			}]);
			ΔΔᐃⲆ.ⲆⵠΔⲆⵠᐃⲆᐃⲆ();
			setTimeout(ΔⵠⲆⵠⲆⵠⲆΔᐃ, ᐃⵠⵠΔⲆ)
		};
		var ΔᐃⵠᐃΔᐃⲆ = function() {
			let ΔⵠᐃΔΔⲆΔ = function() {
				ΔΔᐃⲆ.ΔⲆᐃᐃⵠΔⲆ(ᐃΔᐃⲆⲆᐃⵠΔⲆ)
			};
			if (!document.fonts || !document.fonts.check) setTimeout(ΔⵠᐃΔΔⲆΔ, 1e3);
			else document.fonts.check("1em Baloo Paaji") ? setTimeout(ΔⵠᐃΔΔⲆΔ, 100) : setTimeout(ΔᐃⵠᐃΔᐃⲆ, ΔᐃⵠΔⲆ)
		};
		var ᐃΔⲆᐃΔⲆⲆ = function() {
			this.ⲆⵠⵠΔᐃⲆᐃ++;
			console.warn(`Image (${this.src}) failed to load, attempt ${this.ⲆⵠⵠΔᐃⲆᐃ}`, this);
			ⵠᐃᐃⵠ < this.ⲆⵠⵠΔᐃⲆᐃ && console.warn("Failed to load image too many times");
			var ⲆΔⲆⲆΔⵠⵠⵠⲆ = this.ⲆⵠⵠΔᐃⲆᐃ;
			var ΔⵠΔΔᐃ = this.src;
			var ⵠᐃⲆⲆᐃᐃᐃᐃⲆ = ΔᐃᐃΔΔΔΔ(ΔⵠΔΔᐃ) === 0 ? 1e4 : 2e3;
			setTimeout((function() {
				for (var ᐃⲆ in ⲆᐃⵠΔⵠΔΔ) {
					if (ΔⵠΔΔᐃ.indexOf(ⲆᐃⵠΔⵠΔΔ[ᐃⲆ]) !== -1) {
						Δᐃ[ᐃⲆ] = new Image;
						Δᐃ[ᐃⲆ].onload = ᐃᐃΔⲆⲆⵠⵠ;
						Δᐃ[ᐃⲆ].onerror = ᐃΔⲆᐃΔⲆⲆ;
						Δᐃ[ᐃⲆ].ⲆⵠⵠΔᐃⲆᐃ = ⲆΔⲆⲆΔⵠⵠⵠⲆ;
						Δᐃ[ᐃⲆ].src = ΔⵠΔΔᐃ;
						break
					}
				}
			}), ⵠᐃⲆⲆᐃᐃᐃᐃⲆ)
		};

		function ᐃⲆⲆⲆΔⵠΔ(ᐃⲆᐃⲆᐃΔΔΔᐃ) {
			for (var ᐃⲆ in Δᐃ) {
				var ⲆΔΔⵠⲆ = Δᐃ[ᐃⲆ];
				if (typeof ⲆΔΔⵠⲆ !== ᐃ[458]) continue;
				if (ΔᐃᐃΔΔΔΔ(ⲆΔΔⵠⲆ) !== ᐃⲆᐃⲆᐃΔΔΔᐃ) continue;
				Δᐃ[ᐃⲆ] = new Image;
				Δᐃ[ᐃⲆ].ⵠⵠΔΔⲆⵠⲆ = ⲆⲆᐃ;
				Δᐃ[ᐃⲆ].ⲆⵠⵠΔᐃⲆᐃ = 0;
				Δᐃ[ᐃⲆ].onload = ᐃᐃΔⲆⲆⵠⵠ;
				Δᐃ[ᐃⲆ].onerror = ᐃΔⲆᐃΔⲆⲆ;
				Δᐃ[ᐃⲆ].ⲆΔΔΔⵠⲆⵠ = ⵠΔⵠⲆᐃᐃᐃΔⲆ;
				Δᐃ[ᐃⲆ].ΔⵠΔΔᐃ = ⲆΔΔⵠⲆ
			}
		}
		ᐃⲆⲆⲆΔⵠΔ(Δⵠᐃ);
		ᐃⲆⲆⲆΔⵠΔ(ⵠⵠΔΔ);
		ⲆⵠᐃⲆⲆ(1, "l", ΔⵠΔΔΔ, ᐃ[76]);
		ΔᐃⵠᐃΔᐃⲆ();
		ⵠΔⵠⵠⲆⵠᐃ();
		this.ΔⵠΔ = function() {
			this.ⵠᐃΔⲆⲆΔⲆ.translate.x = (ⲆΔⵠΔ - 500) / ⲆΔⲆΔ;
			this.ⵠᐃΔⲆⲆΔⲆ.translate.y = (ΔⲆⲆΔ - 150) / 2;
			var ΔᐃΔⵠ = 2500 / (ᐃⵠⲆᐃΔ - ⵠⵠΔⵠⲆ + ᐃΔⲆΔ) - 48;
			this.ⵠᐃΔⲆⲆΔⲆ.translate.y -= ΔᐃΔⵠ;
			this.ⵠᐃΔⲆⲆΔⲆ.ΔⵠΔ()
		};
		this.ⵠᐃΔⲆⲆΔⲆ.ΔⵠΔ();
		this.ᐃⵠΔᐃ = function() {
			try {
				ⵠⵠΔⵠᐃⲆΔ()
			} catch (ΔᐃⲆⵠ) {}
			this.ΔⵠΔ()
		}
	}

	function ⲆΔⵠⲆⲆⵠᐃ(ⲆᐃⲆᐃᐃⲆΔ, ᐃⲆᐃᐃⲆⵠΔ) {
		const ᐃⲆⵠⲆⵠⲆⲆ = (8 << (ⲆᐃⲆᐃᐃⲆΔ >> 8 & 255)) + (16 << (ⲆᐃⲆᐃᐃⲆΔ >> 24 & 255)) + (24 << (ⲆᐃⲆᐃᐃⲆΔ >> 0 & ⲆΔᐃᐃᐃΔⵠ)) + (0 << (ⲆᐃⲆᐃᐃⲆΔ >> 16 & 255));
		const ⵠΔᐃⲆⵠΔⲆ = ~(15684 & ᐃⲆᐃᐃⲆⵠΔ) & 15684 | ~(15684 & ᐃⲆᐃᐃⲆⵠΔ) & ᐃⲆᐃᐃⲆⵠΔ;
		const ⲆᐃΔΔⲆⵠΔ = ΔΔⵠᐃⵠΔΔ(ᐃⲆⵠⲆⵠⲆⲆ, ⵠΔᐃⲆⵠΔⲆ, ᐃⲆⵠⲆⵠⲆⲆ);
		const ⵠᐃᐃΔΔᐃⵠᐃⲆ = ⵠⵠΔΔᐃⲆΔ(ⵠΔᐃⲆⵠΔⲆ, ᐃⲆⵠⲆⵠⲆⲆ, ⵠΔᐃⲆⵠΔⲆ, ᐃⲆⵠⲆⵠⲆⲆ, ⵠΔᐃⲆⵠΔⲆ);
		const ⵠⵠⵠᐃΔⵠⲆΔⵠ = ~(ⲆᐃΔΔⲆⵠΔ & 12704) & ⲆᐃΔΔⲆⵠΔ | ~(ⲆᐃΔΔⲆⵠΔ & 12704) & 12704;
		return ⵠⵠⵠᐃΔⵠⲆΔⵠ
	}

	function ΔⲆᐃΔⲆⵠⵠ(ᐃᐃᐃⵠⲆ, ⵠΔⵠⵠΔᐃⲆ, ⲆⲆⵠⲆᐃⲆⵠ) {
		ᐃΔⵠΔΔⵠⲆ(ⵠᐃΔᐃⵠ, ᐃᐃᐃⵠⲆ, ⵠΔⵠⵠΔᐃⲆ, ⲆⲆⵠⲆᐃⲆⵠ);
		const ᐃⵠΔᐃⲆΔⵠ = ⲆᐃᐃⵠᐃⲆⲆ(Δⵠⵠᐃ[ⲆⲆᐃ], Δⵠⵠᐃ[1]);
		const ΔΔᐃⵠᐃⲆᐃⵠⵠ = ⲆⵠΔᐃΔΔⲆ(Δⵠⵠᐃ[ⵠΔΔΔ], Δⵠⵠᐃ[ⵠᐃⵠ], Δⵠⵠᐃ[1], Δⵠⵠᐃ[ⵠⵠᐃⲆ]);
		const ᐃᐃⲆⵠⲆᐃⲆΔⵠ = (45838 | ᐃⵠΔᐃⲆΔⵠ) & ~(ᐃⵠΔᐃⲆΔⵠ & 45838);
		return ᐃᐃⲆⵠⲆᐃⲆΔⵠ
	}

	function ⵠΔⲆΔΔⵠΔ(ⲆΔΔΔᐃⵠΔ, ⵠⵠΔΔⵠΔⵠ) {
		const ᐃⵠΔᐃⲆⲆΔ = ⲆΔΔΔᐃⵠΔ ^ 39186;
		const ᐃⲆⲆⲆᐃⲆⲆ = ~(58051 & ⵠⵠΔΔⵠΔⵠ) & ⵠⵠΔΔⵠΔⵠ | ~(ⵠⵠΔΔⵠΔⵠ & 58051) & 58051;
		const ΔⵠᐃⲆΔΔⵠΔᐃ = ᐃⵠⲆⵠᐃⲆᐃ(ᐃⵠΔᐃⲆⲆΔ, ᐃⲆⲆⲆᐃⲆⲆ, ᐃⵠΔᐃⲆⲆΔ, ᐃⲆⲆⲆᐃⲆⲆ, ᐃⵠΔᐃⲆⲆΔ);
		const ΔⵠⵠⲆΔⲆⲆΔᐃ = ⵠΔΔⵠⲆΔⵠ(ᐃⲆⲆⲆᐃⲆⲆ, ᐃⵠΔᐃⲆⲆΔ, ᐃⲆⲆⲆᐃⲆⲆ);
		const ΔΔⲆⲆᐃⲆⲆⲆᐃ = (((ΔⵠᐃⲆΔΔⵠΔᐃ ^ ΔⵠⵠⲆΔⲆⲆΔᐃ) + 23886) * 22695477 + 1) % 4294967296;
		return ΔΔⲆⲆᐃⲆⲆⲆᐃ
	}

	function ΔᐃᐃⲆΔⵠⲆⵠᐃ(ᐃⵠ, Δ) {
		this.ᐃⵠ = ᐃⵠ;
		this.Δ = Δ;
		ⲆⵠᐃΔᐃⵠⲆ.navigator.userAgent.indexOf("Edge") > -1 ? (this.ⲆⵠⵠⲆᐃⵠⲆ = "default", this.ᐃΔⵠⵠΔΔⵠ = "pointer") : (this.ⲆⵠⵠⲆᐃⵠⲆ = "url('img/cursor0.png'), default", this.ᐃΔⵠⵠΔΔⵠ = "url('img/cursor1.png'), pointer");
		var Ⲇᐃⵠ = this;
		this.waiting = false;
		this.ᐃᐃΔⲆΔⲆΔ = 0;
		this.ⵠⵠᐃⵠⵠᐃⲆ = -1;
		this.ᐃᐃⲆⲆΔΔⵠ = {
			translate: {
				x: ⲆᐃΔⵠ,
				y: 0
			},
			angle: Ⲇⵠⵠᐃ,
			"ⵠⵠ": ᐃᐃ[ⵠ.ΔᐃⵠᐃⵠᐃΔ],
			"ᐃⵠΔᐃ": function() {
				this.angle += ᐃⵠᐃⵠ * 2;
				Δ.save();
				Δ.translate(this.translate.x + this.ⵠⵠ.width / 2, this.translate.y + this.ⵠⵠ.height / 2);
				Δ.rotate(this.angle);
				ⵠΔⲆⲆ(Δ, this.ⵠⵠ, -this.ⵠⵠ.width / 2, -this.ⵠⵠ.height / ᐃⲆⵠᐃ);
				Δ.restore()
			}
		};
		this.ΔⲆⵠⲆΔᐃᐃ = {
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("langselect"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("langselect").style,
			translate: {
				x: ⵠᐃΔ,
				y: ⵠⵠⵠ
			},
			"ΔⵠΔ": function() {
				this.style.left = Math.floor(this.translate.x) + ᐃ[279];
				this.style.top = Math.floor(this.translate.y) + ᐃ[279]
			}
		};
		this.Ⲇⵠᐃᐃⵠ = ᐃⲆΔᐃ;
		this.ᐃⵠΔΔᐃⵠΔ = -1;
		this.ⲆᐃΔΔΔᐃᐃ = undefined;
		this.ⵠⲆΔⲆⲆⵠᐃ = "";
		this.ⲆᐃⲆⵠⵠΔᐃ = "";
		this.ᐃⲆΔᐃⲆⵠⲆ = ⵠΔΔⲆΔ;
		this.ⵠᐃⲆⵠΔ = 0;
		this.ΔⵠⲆⲆᐃⵠᐃ = -1;
		this.ⲆⲆᐃⵠⲆⲆᐃ = undefined;
		this.ΔⵠⵠⲆᐃⲆⲆ = ⵠⵠᐃ;
		this.ΔⵠⵠΔΔⵠⵠ = 0;
		this.ⲆⲆᐃⵠᐃⲆΔ = ⵠⵠᐃ;
		this.ΔᐃΔⵠⵠ = 0;
		this.ΔΔᐃⲆⲆⵠΔ = ⵠⵠⵠ;
		this.time = 0;
		this.ᐃᐃᐃΔᐃ = 0;
		this.ⲆⵠᐃΔⲆᐃᐃ = ᐃⲆΔᐃ;
		this.ⵠⵠⵠᐃⵠⲆⵠ = 0;
		this.ΔΔᐃΔⲆⲆΔ = ⵠⵠⲆΔ;
		this.ⵠⲆⵠⲆΔⵠΔ = 0;
		this.ⵠⲆΔΔΔᐃⵠ = [];
		this.ⲆⵠΔⵠⲆ = -1;
		this.ⲆΔΔΔΔᐃΔ = -1;
		this.ⵠⲆⵠⲆⵠⵠⲆ = -1;
		this.ⵠⵠᐃΔᐃΔⵠ = undefined;
		this.ΔΔⲆᐃᐃΔⲆ = undefined;
		this.ᐃⵠⲆⵠᐃΔΔ = -1;
		this.ΔⵠⵠΔⵠⵠΔ = -ΔΔⵠ;
		this.ΔⵠᐃΔᐃᐃⲆ = -1;
		this.ⲆⵠᐃΔᐃⲆΔ = -1;
		this.ᐃΔΔΔΔⲆⵠ = ⲆⲆⲆΔᐃ;
		this.ⵠᐃΔⲆⵠⲆΔ = ⵠⵠᐃⵠΔ;
		this.ⵠⲆΔΔᐃⵠᐃ = ΔⲆⲆΔⲆ;
		this.ᐃⲆⲆⵠᐃⲆᐃ = undefined;
		this.ᐃⲆᐃᐃᐃⲆᐃ = ⵠⵠᐃⵠΔ;
		this.ⵠⲆⲆⵠᐃᐃΔ = undefined;
		this.ⵠΔⲆᐃΔⵠⲆ = undefined;
		this.ᐃⵠᐃⲆᐃⵠⲆ = ⵠᐃⲆⵠⲆ;
		this.ΔᐃⲆⲆⲆⲆⵠ = undefined;
		this.ⲆᐃΔᐃΔᐃᐃ = ⵠᐃⵠⲆ;
		this.ⵠᐃⵠᐃ = 0;

		function ⵠᐃᐃᐃⲆⵠᐃ(ⲆΔⵠΔⵠᐃᐃ, ΔⲆΔⲆⵠΔⲆ, ⵠᐃⵠⲆⲆⵠⵠΔΔ, ⲆΔⲆΔΔⲆⵠⵠᐃ, ⵠᐃΔⵠ) {
			var ΔⵠⵠⲆᐃᐃⲆ = this;
			var ⵠⵠᐃⲆΔ = ΔⲆΔⲆⵠΔⲆ + 9;
			var ᐃⵠⲆᐃⵠ = 0;
			var ᐃᐃᐃⵠΔⵠⵠ = ⲆΔⲆΔΔⲆⵠⵠᐃ;
			for (var ᐃⲆ = ΔⲆΔⲆⵠΔⲆ; ᐃⲆ < ⵠⵠᐃⲆΔ; ᐃⲆ++) {
				Ⲇᐃⵠ.buttons[ᐃⲆ].info.callback = ΔᐃΔᐃⲆⵠⲆⲆᐃ;
				Ⲇᐃⵠ.buttons[ᐃⲆ].info.ᐃⲆΔⲆⲆᐃⵠⲆᐃ = ⲆΔⵠΔⵠᐃᐃ
			}

			function ΔᐃΔᐃⲆⵠⲆⲆᐃ() {
				if (this.ΔⲆᐃⲆⵠⵠΔ === ᐃᐃᐃⵠΔⵠⵠ || this.ΔⲆᐃⲆⵠⵠΔ === -ᐃΔⵠΔ) return;
				if (this.ⵠⵠᐃΔⲆⲆⲆ > 0) {
					ᐃⵠⵠΔⵠⲆᐃ === ΔⲆΔⲆⵠΔⲆ ? ΔⲆᐃⵠΔ(ᐃⵠΔⵠⵠᐃᐃ, ⵠⲆΔΔ, ᐃ[371]) : ΔⲆᐃⵠΔ(ΔᐃᐃⵠⵠⵠⲆ, ⵠⲆΔΔ, ᐃ[371])
				} else {
					ᐃⵠⵠΔⵠⲆᐃ === ΔⲆΔⲆⵠΔⲆ ? ΔⲆᐃⵠΔ(ᐃⵠΔⵠⵠᐃᐃ, ⲆⲆᐃᐃ, ᐃ[376]) : ΔⲆᐃⵠΔ(ΔᐃᐃⵠⵠⵠⲆ, ⲆⲆᐃᐃ, ᐃ[376])
				}
				ᐃᐃᐃⵠΔⵠⵠ = this.ΔⲆᐃⲆⵠⵠΔ;
				ⵠᐃⵠⲆⲆⵠⵠΔΔ(this.ΔⲆᐃⲆⵠⵠΔ);
				ᐃᐃΔⲆΔᐃⵠ()
			}

			function ⵠⲆⲆᐃⵠⲆΔⵠⲆ() {
				ᐃⵠⲆᐃⵠ > ⲆᐃΔⵠ && ᐃⵠⲆᐃⵠ--;
				ΔⵠⵠⲆᐃᐃⲆ.ⵠⵠᐃⵠⲆ()
			}

			function ᐃᐃΔⲆΔᐃⵠ() {
				var ⵠⵠΔ = ⲆΔⵠΔⵠᐃᐃ[ᐃᐃᐃⵠΔⵠⵠ];
				ⲆΔⲆⵠ.ᐃⲆⲆⵠᐃⲆᐃ = ᐃΔΔⲆⲆ(ⵠⵠΔ.name, ᐃ[48], ᐃ[103], 30, 350, ΔⲆᐃΔᐃ, ΔΔⵠⲆⵠ, Δᐃⵠⵠᐃ);
				ⵠⵠΔ.level !== undefined ? ⲆΔⲆⵠ.ᐃⲆᐃᐃᐃⲆᐃ = ᐃΔΔⲆⲆ("Level " + ⵠⵠΔ.level, ᐃ[48], ᐃ[103], 30, 250, ᐃⲆⲆⲆᐃ, 10, 8) : ⲆΔⲆⵠ.ᐃⲆᐃᐃᐃⲆᐃ = ᐃΔΔⲆⲆ("by " + ⵠⵠΔ.ᐃΔⲆ, ᐃ[48], ᐃ[103], 30, 250, ΔΔᐃⲆᐃ, ΔⵠⲆᐃΔ, ᐃⲆᐃⵠᐃ)
			}

			function ⵠⵠᐃⵠⲆ() {
				for (var ᐃⲆ = ΔⲆΔⲆⵠΔⲆ, ⲆⲆⲆⵠ = 3 * ᐃⵠⲆᐃⵠ; ᐃⲆ < ⵠⵠᐃⲆΔ && ⲆΔⵠΔⵠᐃᐃ.length > ⲆⲆⲆⵠ; ᐃⲆ++, ⲆⲆⲆⵠ++) {
					if (ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ === ⲆΔⵠΔⵠᐃᐃ[ⲆⲆⲆⵠ].ⲆΔᐃ && ⵠᐃΔⵠ[ⲆⲆⲆⵠ] === ⵠⵠⵠ) {
						Ⲇᐃⵠ.buttons[ᐃⲆ].info.ΔⲆᐃⲆⵠⵠΔ = -1;
						Ⲇᐃⵠ.buttons[ᐃⲆ].info.active = ⵠⲆΔΔ;
						continue
					}
					Ⲇᐃⵠ.buttons[ᐃⲆ].info.ΔⲆᐃⲆⵠⵠΔ = ⲆⲆⲆⵠ;
					for (var ⲆⲆᐃΔ = 0; ΔᐃΔⲆ > ⲆⲆᐃΔ; ⲆⲆᐃΔ++) {
						Ⲇᐃⵠ.buttons[ᐃⲆ].info.ⵠⵠ[ⲆⲆᐃΔ] = ⵠΔⵠᐃΔ[ⲆΔⵠΔⵠᐃᐃ[ⲆⲆⲆⵠ].ⲆΔᐃ][ⲆⲆᐃΔ];
						Ⲇᐃⵠ.buttons[ᐃⲆ].info.active = ⲆⲆᐃᐃ;
						Ⲇᐃⵠ.buttons[ᐃⲆ].info.ⵠⵠᐃΔⲆⲆⲆ = ⵠᐃΔⵠ[ⲆⲆⲆⵠ]
					}
				}
				for (; ⵠⵠᐃⲆΔ > ᐃⲆ; ᐃⲆ++) {
					Ⲇᐃⵠ.buttons[ᐃⲆ].info.ΔⲆᐃⲆⵠⵠΔ = -1;
					Ⲇᐃⵠ.buttons[ᐃⲆ].info.active = ⵠⲆΔΔ
				}
				ᐃᐃΔⲆΔᐃⵠ()
			}

			function ΔᐃΔᐃᐃᐃΔⵠⵠ() {
				if (ᐃⵠⲆᐃⵠ * ⲆⵠⵠⲆ + 9 < ⲆΔⵠΔⵠᐃᐃ.length) ᐃⵠⲆᐃⵠ++;
				ΔⵠⵠⲆᐃᐃⲆ.ⵠⵠᐃⵠⲆ()
			}
			this.ⵠⵠᐃⵠⲆ = ⵠⵠᐃⵠⲆ;
			Ⲇᐃⵠ.buttons[ⵠⵠᐃⲆΔ].info.callback = ⵠⲆⲆᐃⵠⲆΔⵠⲆ;
			Ⲇᐃⵠ.buttons[ⵠⵠᐃⲆΔ + ᐃⵠⵠⵠ].info.callback = ΔᐃΔᐃᐃᐃΔⵠⵠ
		}
		this.ΔⵠⲆⵠⵠⲆΔΔΔ = ΔⲆⲆΔⵠ;
		this.ΔⵠⵠΔΔ = ᐃΔⲆⲆ.get(ᐃ[277]) ? ᐃΔⲆⲆ.get(ᐃ[277]) : "high";
		if (this.ΔⵠⵠΔΔ === "high") {
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[564]).style.backgroundColor = ᐃ[357];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[145]).style.backgroundColor = ᐃ[209];
			this.ΔⵠⵠΔΔ = ᐃΔⲆΔ
		} else {
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[145]).style.backgroundColor = ᐃ[357];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[564]).style.backgroundColor = ᐃ[209];
			this.ΔⵠⵠΔΔ = ⵠⵠᐃ
		}
		this.ⲆⵠΔⲆⵠⵠⲆᐃⵠ = function() {
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[564]).style.backgroundColor = ᐃ[357];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[145]).style.backgroundColor = ᐃ[209];
			ᐃΔⲆⲆ.set(ᐃ[277], "high", {
				expires: 30
			});
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[126]).value = 1;
			ᐃⲆΔⵠ.ⲆΔΔᐃⲆᐃⵠ();
			ⲆΔⲆⵠ.ΔⵠⵠΔΔ = ⲆⵠΔΔ
		};
		this.ᐃⲆᐃⵠⵠⵠⵠΔⵠ = function() {
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[564]).style.backgroundColor = ᐃ[209];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[145]).style.backgroundColor = ᐃ[357];
			ᐃΔⲆⲆ.set(ᐃ[277], "low", {
				expires: 30
			});
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[126]).value = .5 / (devicePixelRatio / ⵠΔᐃⲆΔⵠΔ);
			ᐃⲆΔⵠ.ⲆΔΔᐃⲆᐃⵠ();
			ⲆΔⲆⵠ.ΔⵠⵠΔΔ = 0
		};
		if (ᐃΔⲆⲆ.get(ᐃ[91]) === undefined && "FR" === ⲆⲆⵠⲆⵠ) {
			ᐃⵠᐃⲆᐃ.ᐃᐃΔᐃᐃᐃΔ();
			this.mapping = "azerty"
		} else this.mapping = ᐃΔⲆⲆ.get(ᐃ[91]) ? ᐃΔⲆⲆ.get(ᐃ[91]) : "qwerty";
		if (this.mapping == "azerty") {
			ᐃⵠᐃⲆᐃ.ᐃᐃΔᐃᐃᐃΔ();
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[180]).style.backgroundColor = ᐃ[357];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[548]).style.backgroundColor = ᐃ[209]
		} else {
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[548]).style.backgroundColor = ᐃ[357];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[180]).style.backgroundColor = ᐃ[209]
		}
		this.ᐃᐃΔᐃᐃᐃΔ = function() {
			ᐃⵠᐃⲆᐃ.ᐃᐃΔᐃᐃᐃΔ();
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[180]).style.backgroundColor = ᐃ[357];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[548]).style.backgroundColor = ᐃ[209];
			ᐃΔⲆⲆ.set(ᐃ[91], "azerty", {
				expires: 30
			})
		};
		this.ⵠⲆⲆΔⵠⵠᐃ = function() {
			ᐃⵠᐃⲆᐃ.ⵠⲆⲆΔⵠⵠᐃ();
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[180]).style.backgroundColor = ᐃ[209];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[548]).style.backgroundColor = ᐃ[357];
			ᐃΔⲆⲆ.set(ᐃ[91], "qwerty", {
				expires: 30
			})
		};
		this.ⲆΔᐃⵠΔᐃⲆ = {
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("all_rights_reserved"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("all_rights_reserved").style,
			translate: {
				x: ⲆᐃΔⵠ,
				y: ⵠΔΔⲆ
			},
			"ΔⵠΔ": function() {
				this.style.left = this.translate.x + ᐃ[279];
				this.style.top = Math.floor(this.translate.y) + ᐃ[279]
			}
		};

		function ⲆⲆΔᐃᐃⲆΔ() {
			var ⲆⲆⵠᐃᐃⵠᐃ = Number(ᐃΔⲆⲆ.get("starve_crate"));
			var ⲆᐃⵠⲆⵠᐃⲆ = Number(ᐃΔⲆⲆ.get("starve_dead"));
			var ⵠΔⲆⲆΔᐃⵠ = Number(ᐃΔⲆⲆ.get("starve_book"));
			var ᐃΔⲆΔⵠⲆΔ = Number(ᐃΔⲆⲆ.get("starve_bag"));
			var ⲆΔᐃᐃΔΔΔ = Number(ᐃΔⲆⲆ.get("starve_skin"));
			var ᐃΔᐃⲆᐃⵠΔ = Number(ᐃΔⲆⲆ.get("starve_accessory"));
			Ⲇᐃⵠ.ⵠⲆᐃᐃ = ⲆΔᐃᐃΔΔΔ ? ⲆΔᐃᐃΔΔΔ : ΔᐃⲆⲆ;
			Ⲇᐃⵠ.ⲆⵠᐃⲆᐃ = ⵠΔⲆⲆΔᐃⵠ ? ⵠΔⲆⲆΔᐃⵠ : ⵠᐃⵠ;
			Ⲇᐃⵠ.ᐃΔⲆⵠⲆ = ⲆⲆⵠᐃᐃⵠᐃ ? ⲆⲆⵠᐃᐃⵠᐃ : 1;
			Ⲇᐃⵠ.ⵠΔⵠⲆⲆ = ᐃΔᐃⲆᐃⵠΔ ? ᐃΔᐃⲆᐃⵠΔ : 0;
			Ⲇᐃⵠ.ᐃΔⲆΔΔ = ᐃΔⲆΔⵠⲆΔ ? ᐃΔⲆΔⵠⲆΔ : 0;
			Ⲇᐃⵠ.ΔᐃΔⵠΔ = ⲆᐃⵠⲆⵠᐃⲆ ? ⲆᐃⵠⲆⵠᐃⲆ : 0
		}
		ⲆⲆΔᐃᐃⲆΔ();
		this.unlock = {};
		this.unlock.ⵠⲆᐃᐃ = [];
		this.unlock.ᐃΔⲆΔΔ = [];
		this.unlock.ⲆⵠᐃⲆᐃ = [];
		this.unlock.ᐃΔⲆⵠⲆ = [];
		this.unlock.ΔᐃΔⵠΔ = [];
		this.unlock.ⵠΔⵠⲆⲆ = [];
		this.ⵠΔᐃᐃⲆⲆⵠ = 0;

		function ⲆᐃⲆΔᐃⵠⲆ() {
			var ⲆΔΔⵠΔ = ⲆⲆΔⲆ.Δⵠᐃⵠⵠ;
			for (var ᐃⲆ = ᐃⲆᐃ; ᐃⲆ < ⲆΔΔⵠΔ.length; ᐃⲆ++) {
				if (ⲆΔΔⵠΔ[ᐃⲆ].ⲆΔᐃ === ᐃⵠᐃ.ⵠΔΔⲆⲆ) Ⲇᐃⵠ.unlock.ⵠⲆᐃᐃ[ᐃⲆ] = ΔΔΔᐃ;
				else Ⲇᐃⵠ.unlock.ⵠⲆᐃᐃ[ᐃⲆ] = 0
			}
			var ⲆΔΔⵠΔ = ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ;
			for (var ᐃⲆ = ⵠᐃΔ; ⲆΔΔⵠΔ.length > ᐃⲆ; ᐃⲆ++) {
				ⲆΔΔⵠΔ[ᐃⲆ].ⲆΔᐃ === ᐃⵠᐃ.ⵠΔΔⲆⲆ ? Ⲇᐃⵠ.unlock.ⵠΔⵠⲆⲆ[ᐃⲆ] = ᐃΔⵠΔ : Ⲇᐃⵠ.unlock.ⵠΔⵠⲆⲆ[ᐃⲆ] = 0
			}
			var ⲆΔΔⵠΔ = ⲆⲆΔⲆ.ⲆⵠⲆΔ;
			for (var ᐃⲆ = 0; ⲆΔΔⵠΔ.length > ᐃⲆ; ᐃⲆ++) {
				ⲆΔΔⵠΔ[ᐃⲆ].ⲆΔᐃ === ᐃⵠᐃ.ⵠΔΔⲆⲆ ? Ⲇᐃⵠ.unlock.ᐃΔⲆΔΔ[ᐃⲆ] = ᐃⵠⵠⵠ : Ⲇᐃⵠ.unlock.ᐃΔⲆΔΔ[ᐃⲆ] = ⲆⲆᐃⲆ
			}
			var ⲆΔΔⵠΔ = ⲆⲆΔⲆ.ⵠΔⲆΔᐃ;
			for (var ᐃⲆ = 0; ⲆΔΔⵠΔ.length > ᐃⲆ; ᐃⲆ++) {
				if (ⲆΔΔⵠΔ[ᐃⲆ].ⲆΔᐃ === ᐃⵠᐃ.ⵠΔΔⲆⲆ) Ⲇᐃⵠ.unlock.ⲆⵠᐃⲆᐃ[ᐃⲆ] = ΔΔΔᐃ;
				else Ⲇᐃⵠ.unlock.ⲆⵠᐃⲆᐃ[ᐃⲆ] = ΔᐃⲆⲆ
			}
			var ⲆΔΔⵠΔ = ⲆⲆΔⲆ.ΔⵠΔⵠⵠ;
			for (var ᐃⲆ = 0; ᐃⲆ < ⲆΔΔⵠΔ.length; ᐃⲆ++) {
				if (ⲆΔΔⵠΔ[ᐃⲆ].ⲆΔᐃ === ᐃⵠᐃ.ⵠΔΔⲆⲆ) {
					Ⲇᐃⵠ.unlock.ᐃΔⲆⵠⲆ[ᐃⲆ] = 1;
					Ⲇᐃⵠ.unlock.ΔᐃΔⵠΔ[ᐃⲆ] = 1
				} else {
					Ⲇᐃⵠ.unlock.ᐃΔⲆⵠⲆ[ᐃⲆ] = 0;
					Ⲇᐃⵠ.unlock.ΔᐃΔⵠΔ[ᐃⲆ] = ⵠⵠⲆΔ
				}
			}
		}
		this.ⲆᐃⲆΔᐃⵠⲆ = ⲆᐃⲆΔᐃⵠⲆ;
		ⲆᐃⲆΔᐃⵠⲆ();
		this.ΔⲆⵠⵠⵠ = {
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("trevda"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("trevda").style,
			translate: {
				y: ᐃⲆΔ,
				x: ⲆⲆᐃ
			},
			"ΔⵠΔ": function() {
				this.style.left = this.translate.x + ᐃ[279];
				this.style.top = Math.floor(this.translate.y) + ᐃ[279]
			}
		};
		var ⲆⲆⵠᐃᐃ = Ⲇⵠⵠᐃ;
		var ⵠⲆⲆⵠΔ = 30;
		var ᐃΔⵠᐃⲆᐃⲆ = function() {
			Ⲇᐃⵠ.ΔⵠΔ();
			ⲆⲆⵠᐃᐃ++;
			if (ⵠⲆⲆⵠΔ == ⲆⲆⵠᐃᐃ) {
				Ⲇᐃⵠ.ΔⵠᐃΔⲆⵠⵠ();
				Ⲇᐃⵠ.ᐃᐃΔⲆΔⲆΔ = true;
				Ⲇᐃⵠ.ΔⵠΔ();
				return
			}
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]](ᐃΔⵠᐃⲆᐃⲆ, 0)
		};
		this.ⲆⵠᐃⵠΔ = function(ⲆⲆⲆᐃᐃ) {
			ⲆᐃⵠᐃⲆ = ⲆⲆⲆᐃᐃ;
			Ⲇᐃⵠ.ᐃⵠⵠⲆᐃᐃᐃ();
			Ⲇᐃⵠ.ᐃᐃΔⲆΔⲆΔ = 0;
			ⵠⵠΔⵠⲆ = -1;
			ⵠΔᐃⲆⲆ()
		};
		var ⲆᐃⵠᐃⲆ;
		var ⵠⵠΔⵠⲆ = -1;
		var ᐃⵠⲆᐃΔ = 30;
		var ⵠΔᐃⲆⲆ = function() {
			Ⲇᐃⵠ.ΔⵠΔ();
			ⵠⵠΔⵠⲆ++;
			if (ᐃⵠⲆᐃΔ == ⵠⵠΔⵠⲆ) {
				ᐃΔⲆⲆ.set("starve_nickname", Ⲇᐃⵠ.ⵠⲆⵠΔⵠ.input.value, {
					expires: 30
				});
				Ⲇᐃⵠ.ⵠⲆⵠΔⵠ.style.display = ᐃ[371];
				Ⲇᐃⵠ.ᐃⵠⲆᐃⲆ.style.display = ᐃ[371];
				Ⲇᐃⵠ.ΔⲆⵠⲆΔᐃᐃ.style.display = ᐃ[371];
				Ⲇᐃⵠ.ⲆΔᐃⵠΔᐃⲆ.style.display = ᐃ[371];
				Ⲇᐃⵠ.ΔⲆⵠⵠⵠ.style.display = ᐃ[371];
				Ⲇᐃⵠ.stop();
				ⲆᐃⵠᐃⲆ();
				return
			}
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]](ⵠΔᐃⲆⲆ, 0)
		};
		this.ⵠΔⲆΔΔ = false;
		this.stop = function() {
			this.ⵠΔⲆΔΔ = false
		};
		this.ΔᐃᐃⵠⲆ = function() {
			check_ads();
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[430]).style.backgroundColor = ⵠ.ⲆⵠᐃᐃΔ[ⵠᐃᐃᐃⲆ.time];
			Ⲇᐃⵠ.ⵠⲆⵠΔⵠ.style.display = ᐃ[376];
			Ⲇᐃⵠ.ᐃⵠⲆᐃⲆ.style.display = ᐃ[376];
			Ⲇᐃⵠ.ΔⲆⵠⲆΔᐃᐃ.style.display = ᐃ[376];
			Ⲇᐃⵠ.ⲆΔᐃⵠΔᐃⲆ.style.display = ᐃ[376];
			Ⲇᐃⵠ.ΔⲆⵠⵠⵠ.style.display = ᐃ[376];
			Ⲇᐃⵠ.waiting = false;
			Ⲇᐃⵠ.ⵠΔⲆΔΔ = ᐃΔΔΔΔ;
			ⵠⵠΔⵠⲆ = -ΔΔΔᐃ;
			ⲆⲆⵠᐃᐃ = 0;
			ᐃΔⵠᐃⲆᐃⲆ()
		};
		this.ⲆᐃΔⲆᐃⲆⲆ = function(ΔΔⵠⲆⲆ, ⲆΔΔᐃⲆ) {
			ⲆΔΔᐃⲆ = ⲆΔΔᐃⲆ < 0 ? -ⲆΔΔᐃⲆ : ⲆΔΔᐃⲆ;
			if ((ΔΔⵠⲆⲆ.position & ᐃᐃⲆΔ) === ᐃᐃⲆΔ) {
				if ((ΔΔⵠⲆⲆ.position & ᐃΔⵠⵠ) === ᐃΔⵠⵠ) ΔΔⵠⲆⲆ.translate.x = ⲆⵠᐃΔ + ΔΔⵠⲆⲆ.translate.ᐃⵠΔⲆⵠ - ⲆΔΔᐃⲆ;
				else if (ⲆᐃᐃΔⲆ === (ΔΔⵠⲆⲆ.position & ⲆᐃᐃΔⲆ)) ΔΔⵠⲆⲆ.translate.x = ⲆⵠᐃΔ + ΔΔⵠⲆⲆ.translate.ᐃⵠΔⲆⵠ + ⲆΔΔᐃⲆ;
				else ΔΔⵠⲆⲆ.translate.x = ⲆⵠᐃΔ + ΔΔⵠⲆⲆ.translate.ᐃⵠΔⲆⵠ
			} else if (ᐃΔⵠⵠ === (ΔΔⵠⲆⲆ.position & ᐃΔⵠⵠ)) ΔΔⵠⲆⲆ.translate.x = ΔΔⵠⲆⲆ.translate.ᐃⵠΔⲆⵠ - ⲆΔΔᐃⲆ;
			else(ΔΔⵠⲆⲆ.position & ⲆᐃᐃΔⲆ) === ⲆᐃᐃΔⲆ ? ΔΔⵠⲆⲆ.translate.x = ⲆΔⵠΔ - ΔΔⵠⲆⲆ.translate.ᐃⵠΔⲆⵠ + ⲆΔΔᐃⲆ : ΔΔⵠⲆⲆ.translate.x = ΔΔⵠⲆⲆ.translate.ᐃⵠΔⲆⵠ;
			if ((ΔΔⵠⲆⲆ.position & ⲆⲆⵠᐃΔⵠⵠ) === ⲆⲆⵠᐃΔⵠⵠ) {
				if ((ΔΔⵠⲆⲆ.position & Ⲇᐃⵠᐃ) === Ⲇᐃⵠᐃ) ΔΔⵠⲆⲆ.translate.y = Δⵠᐃᐃ + ΔΔⵠⲆⲆ.translate.ᐃᐃΔΔᐃ - ⲆΔΔᐃⲆ;
				else ⲆⵠΔⲆⲆᐃᐃ === (ΔΔⵠⲆⲆ.position & ⲆⵠΔⲆⲆᐃᐃ) ? ΔΔⵠⲆⲆ.translate.y = Δⵠᐃᐃ + ΔΔⵠⲆⲆ.translate.ᐃᐃΔΔᐃ + ⲆΔΔᐃⲆ : ΔΔⵠⲆⲆ.translate.y = Δⵠᐃᐃ + ΔΔⵠⲆⲆ.translate.ᐃᐃΔΔᐃ
			} else if ((ΔΔⵠⲆⲆ.position & Ⲇᐃⵠᐃ) === Ⲇᐃⵠᐃ) ΔΔⵠⲆⲆ.translate.y = ΔΔⵠⲆⲆ.translate.ᐃᐃΔΔᐃ - ⲆΔΔᐃⲆ;
			else if (ⲆⵠΔⲆⲆᐃᐃ === (ΔΔⵠⲆⲆ.position & ⲆⵠΔⲆⲆᐃᐃ)) ΔΔⵠⲆⲆ.translate.y = ΔⲆⲆΔ + ΔΔⵠⲆⲆ.translate.ᐃᐃΔΔᐃ + ⲆΔΔᐃⲆ;
			else ΔΔⵠⲆⲆ.translate.y = ΔΔⵠⲆⲆ.translate.ᐃᐃΔΔᐃ;
			ΔΔⵠⲆⲆ.style !== ΔⲆᐃⲆⵠ && (ΔΔⵠⲆⲆ.style.left = Math.floor(ΔΔⵠⲆⲆ.translate.x) + ᐃ[279], ΔΔⵠⲆⲆ.style.top = Math.floor(ΔΔⵠⲆⲆ.translate.y) + ᐃ[279])
		};
		this.ΔⵠΔ = function() {
			var ⲆΔΔᐃⲆ = ⲆⲆᐃⲆ;
			if (ⲆⲆⵠᐃᐃ != ⵠⲆⲆⵠΔ || ⵠⵠΔⵠⲆ != -ᐃΔΔⲆ) {
				if (ⵠⲆⲆⵠΔ != ⲆⲆⵠᐃᐃ) var ⲆΔΔᐃⲆ = 1500 / (ⲆⲆⵠᐃᐃ + 1) - 50;
				if (ⵠⵠΔⵠⲆ != -1) var ⲆΔΔᐃⲆ = -(1750 / (ᐃⵠⲆᐃΔ - ⵠⵠΔⵠⲆ + 1) - 48)
			}
			for (var ᐃⲆ = ⵠΔΔⲆ; ᐃⲆ < this.ⵠΔⵠⵠ.length; ᐃⲆ++) this.ⲆᐃΔⲆᐃⲆⲆ(this.ⵠΔⵠⵠ[ᐃⲆ], ⲆΔΔᐃⲆ);
			for (var ᐃⲆ = ᐃⲆΔ; this.buttons.length > ᐃⲆ; ᐃⲆ++) this.ⲆᐃΔⲆᐃⲆⲆ(this.buttons[ᐃⲆ].info, ⲆΔΔᐃⲆ);
			for (var ᐃⲆ = 0; this.ΔΔΔΔΔ.length > ᐃⲆ; ᐃⲆ++) this.ⲆᐃΔⲆᐃⲆⲆ(this.ΔΔΔΔΔ[ᐃⲆ], ⲆΔΔᐃⲆ);
			this.ᐃᐃⲆⲆΔΔⵠ.translate.x = (ⲆΔⵠΔ - this.ᐃᐃⲆⲆΔΔⵠ.ⵠⵠ.width) / 2;
			this.ᐃᐃⲆⲆΔΔⵠ.translate.y = Δⵠⵠ;
			this.ΔⲆⵠⲆΔᐃᐃ.translate.x = ⲆΔⵠΔ - 450;
			this.ΔⲆⵠⲆΔᐃᐃ.translate.y = ΔⲆⲆΔ - 40;
			this.ⲆΔᐃⵠΔᐃⲆ.translate.x = ⲆΔⵠΔ - 340;
			this.ⲆΔᐃⵠΔᐃⲆ.translate.y = ΔⲆⲆΔ - 25;
			this.ΔⲆⵠⵠⵠ.translate.x = ⲆΔⵠΔ - 320;
			this.ΔⲆⵠⵠⵠ.translate.y = 80;
			if (ⲆⲆⵠᐃᐃ != ⵠⲆⲆⵠΔ || ⵠⵠΔⵠⲆ != -ᐃΔⵠΔ) {
				var ΔᐃΔⵠ = 0;
				if (ⵠⲆⲆⵠΔ != ⲆⲆⵠᐃᐃ) {
					var ΔᐃΔⵠ = 1500 / (ⲆⲆⵠᐃᐃ + 1) - 50
				}
				if (ⵠⵠΔⵠⲆ != -1) {
					var ΔᐃΔⵠ = -(1750 / (ᐃⵠⲆᐃΔ - ⵠⵠΔⵠⲆ + ⵠⲆⵠⲆ) - 48)
				}
				this.ᐃᐃⲆⲆΔΔⵠ.translate.y -= ΔᐃΔⵠ > 0 ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
				this.ΔⲆⵠⲆΔᐃᐃ.translate.y -= ΔᐃΔⵠ < ⲆⲆᐃ ? ΔᐃΔⵠ : -ΔᐃΔⵠ;
				this.ⲆΔᐃⵠΔᐃⲆ.translate.y -= ΔᐃΔⵠ < ⵠⵠⵠ ? ΔᐃΔⵠ : -ΔᐃΔⵠ
			}
			this.ΔⲆⵠⲆΔᐃᐃ.ΔⵠΔ();
			this.ⲆΔᐃⵠΔᐃⲆ.ΔⵠΔ();
			this.ΔⲆⵠⵠⵠ.ΔⵠΔ()
		};
		this.ⵠΔⲆΔⲆⵠⵠ = function(ⵠⵠΔ) {
			var ᐃⲆⲆΔΔ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ᐃ[140]);
			var ⵠⵠⲆΔΔⵠⲆ = ᐃⲆⲆΔΔ.getContext(ᐃ[269]);
			ᐃⲆⲆΔΔ.width = 342;
			ᐃⲆⲆΔΔ.height = 342;
			var ⲆΔⲆΔᐃ = -Math.PI / 2;
			for (var ᐃⲆ = 0; ᐃⲆ < ⵠⵠΔ.length; ᐃⲆ++) {
				var ⲆⲆⵠᐃⵠᐃᐃΔΔ = ⵠⵠΔ[ᐃⲆ][ⵠᐃⵠ];
				var ⵠⵠⵠΔⲆΔⲆ = ⵠⵠΔ[ᐃⲆ][ΔᐃⵠⲆ] * Math.PI / 180;
				ⵠⵠⲆΔΔⵠⲆ.beginPath();
				ⵠⵠⲆΔΔⵠⲆ.arc(171, 171, 170, ⲆΔⲆΔᐃ, ⲆΔⲆΔᐃ + ⵠⵠⵠΔⲆΔⲆ, false);
				ⵠⵠⲆΔΔⵠⲆ.lineTo(171, 171);
				ⵠⵠⲆΔΔⵠⲆ.fillStyle = ⲆⲆⵠᐃⵠᐃᐃΔΔ;
				ⵠⵠⲆΔΔⵠⲆ.fill();
				ⲆΔⲆΔᐃ += ⵠⵠⵠΔⲆΔⲆ
			}
			return ᐃⲆⲆΔΔ
		};
		this.ⵠⲆΔΔΔᐃΔⵠᐃ = function() {
			this.ⵠⲆΔⲆⲆⵠᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[366]).value;
			if (this.ⲆᐃⲆⵠⵠΔᐃ !== this.ⵠⲆΔⲆⲆⵠᐃ) {
				this.ⲆᐃⲆⵠⵠΔᐃ = this.ⵠⲆΔⲆⲆⵠᐃ;
				this.ᐃⲆΔᐃⲆⵠⲆ = ᐃΔΔⲆⲆ(this.ⵠⲆΔⲆⲆⵠᐃ, ᐃ[48], ᐃ[103], 45, 550)
			}
		};
		this.ᐃⵠΔᐃ = function() {
			ⵠⵠΔⵠᐃⲆΔ();
			ⲆΔⲆⵠ.ΔⵠⵠⲆᐃⲆⲆ = ΔⲆᐃ.ΔΔⲆⲆΔ(ⲆΔⲆⵠ.ΔⵠⵠⲆᐃⲆⲆ, ⲆΔⲆⵠ.ΔⵠⵠΔΔⵠⵠ, .03);
			this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ].translate.x = this.ⵠΔⵠⵠ[0].translate.x + -72 + ⲆΔⲆⵠ.ΔⵠⵠⲆᐃⲆⲆ * 165;
			this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ].translate.ᐃⵠΔⲆⵠ = this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ].translate.x;
			this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ].translate.y = this.ⵠΔⵠⵠ[0].translate.y + 30;
			this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ].translate.ᐃᐃΔΔᐃ = this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ].translate.y;
			for (var ᐃⲆ = 2; ᐃⲆ < this.ⵠΔⵠⵠ.length; ᐃⲆ++) {
				ⲆⲆᐃᐃ === this.ⵠΔⵠⵠ[ᐃⲆ].active && this.ⵠΔⵠⵠ[ᐃⲆ].ᐃⵠΔᐃ(Δ)
			}
			var ΔΔΔΔᐃⵠᐃ = this.ⲆⵠΔⵠⲆ - Date.now();
			if (ᐃⲆᐃ < ΔΔΔΔᐃⵠᐃ) {
				var ᐃⲆⲆⲆ = Math.floor(ΔΔΔΔᐃⵠᐃ / 6e4);
				var ΔΔΔⲆⵠ = Math.floor(ᐃⲆⲆⲆ / 60);
				ᐃⲆⲆⲆ %= 60;
				this.ⵠⲆⵠⲆⵠⵠⲆ !== ᐃⲆⲆⲆ && (this.ⵠⲆⵠⲆⵠⵠⲆ = ᐃⲆⲆⲆ, ᐃⲆⲆⲆ = 10 > ᐃⲆⲆⲆ ? "0" + ᐃⲆⲆⲆ : "" + ᐃⲆⲆⲆ, Ⲇᐃⵠ.ⵠⵠᐃΔᐃΔⵠ = ᐃΔΔⲆⲆ(ᐃⲆⲆⲆ, ᐃ[48], ᐃ[103], 80, 200));
				ΔΔΔⲆⵠ !== this.ⲆΔΔΔΔᐃΔ && (this.ⲆΔΔΔΔᐃΔ = ΔΔΔⲆⵠ, ΔΔΔⲆⵠ = ΔΔΔⲆⵠ < ΔΔⲆΔΔ ? "0" + ΔΔΔⲆⵠ : "" + ΔΔΔⲆⵠ, Ⲇᐃⵠ.ΔΔⲆᐃᐃΔⲆ = ᐃΔΔⲆⲆ(ΔΔΔⲆⵠ, ᐃ[48], ᐃ[103], 80, 200));
				var ⵠᐃΔᐃᐃ = this.ⵠΔⵠⵠ[ⵠᐃⲆⵠⲆᐃⲆ];
				ⵠᐃΔᐃᐃ.ᐃⵠΔᐃ(Δ);
				var ⵠⵠ = this.ΔΔⲆᐃᐃΔⲆ;
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⵠᐃΔᐃᐃ.translate.x - ⵠⵠ.width / ⵠⲆᐃⲆ + 182, ⵠᐃΔᐃᐃ.translate.y - ⵠⵠ.height / 4 + 40, ⵠⵠ.width / 2, ⵠⵠ.height / 2);
				var ⵠⵠ = this.ⵠⵠᐃΔᐃΔⵠ;
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⵠᐃΔᐃᐃ.translate.x - ⵠⵠ.width / 4 + 251, ⵠᐃΔᐃᐃ.translate.y - ⵠⵠ.height / ΔΔᐃⵠΔ + 40, ⵠⵠ.width / ⵠⵠᐃⲆ, ⵠⵠ.height / ᐃᐃⵠⵠ)
			}
			var ΔΔΔΔᐃⵠᐃ = this.ᐃⵠⲆⵠᐃΔΔ - Date.now();
			if (0 < ΔΔΔΔᐃⵠᐃ) {
				var ᐃⲆⲆⲆ = Math.floor(ΔΔΔΔᐃⵠᐃ / 6e4);
				var ΔΔΔⲆⵠ = Math.floor(ᐃⲆⲆⲆ / 60);
				var ⵠΔⵠ = Math.floor(ΔΔΔⲆⵠ / 24);
				ᐃⲆⲆⲆ %= 60;
				ΔΔΔⲆⵠ %= 24;
				this.ⲆⵠᐃΔᐃⲆΔ !== ᐃⲆⲆⲆ && (this.ⲆⵠᐃΔᐃⲆΔ = ᐃⲆⲆⲆ, ᐃⲆⲆⲆ = 10 > ᐃⲆⲆⲆ ? "0" + ᐃⲆⲆⲆ : "" + ᐃⲆⲆⲆ, Ⲇᐃⵠ.ᐃΔΔΔΔⲆⵠ = ᐃΔΔⲆⲆ(ᐃⲆⲆⲆ, ᐃ[48], ᐃ[103], 80, 200));
				if (ΔΔΔⲆⵠ !== this.ΔⵠᐃΔᐃᐃⲆ) {
					this.ΔⵠᐃΔᐃᐃⲆ = ΔΔΔⲆⵠ;
					ΔΔΔⲆⵠ = ⵠᐃⲆⵠᐃ > ΔΔΔⲆⵠ ? "0" + ΔΔΔⲆⵠ : "" + ΔΔΔⲆⵠ;
					Ⲇᐃⵠ.ⵠᐃΔⲆⵠⲆΔ = ᐃΔΔⲆⲆ(ΔΔΔⲆⵠ, ᐃ[48], ᐃ[103], 80, 200)
				}
				if (ⵠΔⵠ !== this.ΔⵠⵠΔⵠⵠΔ) {
					this.ΔⵠⵠΔⵠⵠΔ = ⵠΔⵠ;
					ⵠΔⵠ = ΔⲆΔΔᐃ > ⵠΔⵠ ? "0" + ⵠΔⵠ : "" + ⵠΔⵠ;
					Ⲇᐃⵠ.ⵠⲆΔΔᐃⵠᐃ = ᐃΔΔⲆⲆ(ⵠΔⵠ, ᐃ[48], ᐃ[103], 80, 200)
				}
				var ⵠᐃΔᐃᐃ = this.ⵠΔⵠⵠ[ⲆⵠⲆΔᐃΔΔ];
				ⵠᐃΔᐃᐃ.ᐃⵠΔᐃ(Δ);
				var ⵠⵠ = this.ⵠⲆΔΔᐃⵠᐃ;
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⵠᐃΔᐃᐃ.translate.x - ⵠⵠ.width / ΔⵠⲆⵠᐃ + 113, ⵠᐃΔᐃᐃ.translate.y - ⵠⵠ.height / ⲆⲆⲆΔ + 40, ⵠⵠ.width / 2, ⵠⵠ.height / ⲆΔⲆΔ);
				var ⵠⵠ = this.ⵠᐃΔⲆⵠⲆΔ;
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⵠᐃΔᐃᐃ.translate.x - ⵠⵠ.width / 4 + 182, ⵠᐃΔᐃᐃ.translate.y - ⵠⵠ.height / ΔΔΔⵠ + 40, ⵠⵠ.width / 2, ⵠⵠ.height / 2);
				var ⵠⵠ = this.ᐃΔΔΔΔⲆⵠ;
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⵠᐃΔᐃᐃ.translate.x - ⵠⵠ.width / 4 + 251, ⵠᐃΔᐃᐃ.translate.y - ⵠⵠ.height / ᐃᐃⵠΔ + 40, ⵠⵠ.width / ΔΔᐃⲆⵠ, ⵠⵠ.height / 2)
			}
			if ((this.ⵠⲆⵠⲆⲆ & ⲆΔⵠⵠⲆ) === ⲆΔⵠⵠⲆ) this.buttons[ⲆⵠᐃⲆⲆᐃⲆ].info.state = ᐃᐃⵠⲆ;
			else if ((this.ⵠⲆⵠⲆⲆ & ⵠⵠⲆⲆᐃ) === ⵠⵠⲆⲆᐃ) this.buttons[ᐃᐃᐃⵠᐃⲆⲆ].info.state = ᐃᐃⵠⲆ;
			else if (ΔᐃΔᐃⵠ === (this.ⵠⲆⵠⲆⲆ & ΔᐃΔᐃⵠ)) this.buttons[ⲆΔⲆⵠⵠᐃⲆ].info.state = ᐃᐃⵠⲆ;
			else if (ⵠᐃᐃΔᐃ === (this.ⵠⲆⵠⲆⲆ & ⵠᐃᐃΔᐃ)) this.buttons[ΔᐃⵠᐃΔⵠⲆ].info.state = ᐃᐃⵠⲆ;
			else if (ⵠᐃᐃⲆⲆⵠᐃ === (this.ⵠⲆⵠⲆⲆ & ⵠᐃᐃⲆⲆⵠᐃ)) this.buttons[ΔᐃⵠⵠⲆᐃᐃ].info.state = ᐃᐃⵠⲆ;
			else if ((this.ⵠⲆⵠⲆⲆ & ⲆⵠΔⵠΔ) === ⲆⵠΔⵠΔ) this.buttons[ⵠᐃᐃⵠΔⵠⲆ].info.state = ᐃᐃⵠⲆ;
			else if ((this.ⵠⲆⵠⲆⲆ & ⵠΔΔⵠΔ) === ⵠΔΔⵠΔ) this.buttons[ᐃΔⲆᐃᐃΔⵠ].info.state = ᐃᐃⵠⲆ;
			else if (ⵠⵠΔΔΔΔⵠ === (this.ⵠⲆⵠⲆⲆ & ⵠⵠΔΔΔΔⵠ)) this.buttons[ᐃΔⲆᐃᐃΔⵠ].info.state = ᐃᐃⵠⲆ;
			else if (ⵠΔⵠΔⲆᐃΔ === (this.ⵠⲆⵠⲆⲆ & ⵠΔⵠΔⲆᐃΔ)) this.buttons[ᐃΔⲆᐃᐃΔⵠ].info.state = ᐃᐃⵠⲆ;
			else if ((this.ⵠⲆⵠⲆⲆ & ᐃᐃᐃⲆᐃᐃΔ) === ᐃᐃᐃⲆᐃᐃΔ) this.buttons[ᐃΔⲆᐃᐃΔⵠ].info.state = ᐃᐃⵠⲆ;
			else if (ΔⵠⵠⵠⲆᐃⲆ === (this.ⵠⲆⵠⲆⲆ & ΔⵠⵠⵠⲆᐃⲆ)) this.buttons[ᐃΔⲆᐃᐃΔⵠ].info.state = ᐃᐃⵠⲆ;
			else if ((this.ⵠⲆⵠⲆⲆ & ΔⵠⵠⲆⲆⲆⲆ) === ΔⵠⵠⲆⲆⲆⲆ) this.buttons[ᐃΔⲆᐃᐃΔⵠ].info.state = ᐃᐃⵠⲆ;
			else if (ⲆΔᐃΔⵠⵠⵠ === (this.ⵠⲆⵠⲆⲆ & ⲆΔᐃΔⵠⵠⵠ)) this.buttons[ᐃΔⲆᐃᐃΔⵠ].info.state = ᐃᐃⵠⲆ;
			else if ((this.ⵠⲆⵠⲆⲆ & ⵠΔⲆⵠᐃ) === ⵠΔⲆⵠᐃ) this.buttons[ⲆΔⲆⵠⵠᐃⲆ].info.state = ᐃᐃⵠⲆ;
			else if ((this.ⵠⲆⵠⲆⲆ & ⵠⵠⵠΔⵠ) === ⵠⵠⵠΔⵠ) this.buttons[ⲆΔⲆⵠⵠᐃⲆ].info.state = ᐃᐃⵠⲆ;
			else if ((this.ⵠⲆⵠⲆⲆ & ⵠΔⵠⲆΔ) === ⵠΔⵠⲆΔ) this.buttons[ⲆΔⲆⵠⵠᐃⲆ].info.state = ᐃᐃⵠⲆ;
			else if (ΔⲆᐃΔⲆ === (this.ⵠⲆⵠⲆⲆ & ΔⲆᐃΔⲆ)) this.buttons[ⲆΔⲆⵠⵠᐃⲆ].info.state = ᐃᐃⵠⲆ;
			else if (ⵠᐃᐃⵠᐃ === (this.ⵠⲆⵠⲆⲆ & ⵠᐃᐃⵠᐃ)) this.buttons[ⲆΔⲆⵠⵠᐃⲆ].info.state = ᐃᐃⵠⲆ;
			else if (ᐃⲆᐃᐃΔ === (this.ⵠⲆⵠⲆⲆ & ᐃⲆᐃᐃΔ)) this.buttons[ⲆΔⲆⵠⵠᐃⲆ].info.state = ᐃᐃⵠⲆ;
			else if ((this.ⵠⲆⵠⲆⲆ & ᐃⵠᐃΔⲆ) === ᐃⵠᐃΔⲆ) this.buttons[ᐃⵠᐃᐃⵠᐃⲆ].info.state = ᐃᐃⵠⲆ;
			else if ((this.ⵠⲆⵠⲆⲆ & ⲆᐃΔΔⵠ) === ⲆᐃΔΔⵠ) this.buttons[ᐃⵠᐃᐃⵠᐃⲆ].info.state = ᐃᐃⵠⲆ;
			else if ((this.ⵠⲆⵠⲆⲆ & ⵠⲆⵠΔΔ) === ⵠⲆⵠΔΔ) this.buttons[ᐃⵠᐃᐃⵠᐃⲆ].info.state = ᐃᐃⵠⲆ;
			else if (ⲆⲆⵠⵠΔᐃⵠ === (this.ⵠⲆⵠⲆⲆ & ⲆⲆⵠⵠΔᐃⵠ)) this.buttons[ΔᐃⵠᐃΔⵠⲆ].info.state = ᐃᐃⵠⲆ;
			if ((this.ⵠⲆⵠⲆⲆ & ⵠⵠⲆⲆᐃ) === ⵠⵠⲆⲆᐃ) {
				if (this.ΔⵠᐃΔⵠᐃΔ === this.ⵠΔⲆᐃΔⵠⲆ) {
					this.ⵠⲆⲆⵠᐃᐃΔ = this.ⵠⲆⲆΔᐃⵠⵠ;
					this.buttons[this.ⵠⲆⲆΔᐃⵠⵠ].info.active = ⵠⲆΔΔ;
					this.buttons[this.ΔΔᐃⲆⵠΔⵠ].info.active = ⵠⲆΔΔ;
					this.buttons[this.ᐃᐃᐃⵠΔⲆᐃ].info.active = ⵠⲆΔΔ
				} else {
					this.buttons[this.ⵠⲆⲆΔᐃⵠⵠ].info.active = ⲆⲆᐃᐃ;
					this.buttons[this.ΔΔᐃⲆⵠΔⵠ].info.active = ⲆⲆᐃᐃ;
					this.buttons[this.ᐃᐃᐃⵠΔⲆᐃ].info.active = ⲆⲆᐃᐃ
				}
				if (this.ⲆΔⲆΔⲆⵠᐃ === this.ⵠΔⲆᐃΔⵠⲆ) this.buttons[this.ⲆΔⲆΔⲆⵠᐃ].info.state = ᐃᐃⵠⲆ;
				else if (this.ⵠΔⲆᐃΔⵠⲆ === this.ᐃᐃⲆΔΔⲆⲆ) this.buttons[this.ᐃᐃⲆΔΔⲆⲆ].info.state = ᐃᐃⵠⲆ;
				else if (this.ΔⵠᐃΔⵠᐃΔ === this.ⵠΔⲆᐃΔⵠⲆ) this.buttons[this.ΔⵠᐃΔⵠᐃΔ].info.state = ᐃᐃⵠⲆ;
				else if (this.ⵠΔⲆᐃΔⵠⲆ === this.ⲆᐃⲆΔⲆΔⵠ) this.buttons[this.ⲆᐃⲆΔⲆΔⵠ].info.state = ᐃᐃⵠⲆ;
				else this.ⲆᐃⵠᐃⲆΔⵠ === this.ⵠΔⲆᐃΔⵠⲆ && (this.buttons[this.ⲆᐃⵠᐃⲆΔⵠ].info.state = ᐃᐃⵠⲆ);
				if (this.ⵠⲆⲆⵠᐃᐃΔ === this.ⵠⲆⲆΔᐃⵠⵠ) this.buttons[this.ⵠⲆⲆΔᐃⵠⵠ].info.state = ᐃᐃⵠⲆ;
				else if (this.ⵠⲆⲆⵠᐃᐃΔ === this.ΔΔᐃⲆⵠΔⵠ) this.buttons[this.ΔΔᐃⲆⵠΔⵠ].info.state = ᐃᐃⵠⲆ;
				else this.ⵠⲆⲆⵠᐃᐃΔ === this.ᐃᐃᐃⵠΔⲆᐃ && (this.buttons[this.ᐃᐃᐃⵠΔⲆᐃ].info.state = ᐃᐃⵠⲆ);
				if (this.ᐃⵠⲆⵠΔᐃΔ === this.ᐃⵠᐃⲆᐃⵠⲆ) this.buttons[this.ᐃⵠⲆⵠΔᐃΔ].info.state = ᐃᐃⵠⲆ;
				else if (this.ᐃⵠᐃⲆᐃⵠⲆ === this.ΔⲆΔⲆⲆⲆⲆ) this.buttons[this.ΔⲆΔⲆⲆⲆⲆ].info.state = ᐃᐃⵠⲆ;
				else if (this.ᐃⵠᐃΔᐃⵠⲆ === this.ᐃⵠᐃⲆᐃⵠⲆ) this.buttons[this.ᐃⵠᐃΔᐃⵠⲆ].info.state = ᐃᐃⵠⲆ;
				if (this.ΔᐃᐃⵠΔΔΔ === this.ΔᐃⲆⲆⲆⲆⵠ) this.buttons[this.ΔᐃᐃⵠΔΔΔ].info.state = ᐃᐃⵠⲆ;
				else if (this.ΔᐃⲆⲆⲆⲆⵠ === this.ⵠⵠⲆⲆᐃΔᐃ) this.buttons[this.ⵠⵠⲆⲆᐃΔᐃ].info.state = ᐃᐃⵠⲆ;
				else if (this.ΔᐃⲆⲆⲆⲆⵠ === this.ⲆⲆΔΔⵠⲆⲆ) this.buttons[this.ⲆⲆΔΔⵠⲆⲆ].info.state = ᐃᐃⵠⲆ;
				else if (this.ᐃΔΔΔⲆΔⵠ === this.ΔᐃⲆⲆⲆⲆⵠ) this.buttons[this.ᐃΔΔΔⲆΔⵠ].info.state = ᐃᐃⵠⲆ;
				else if (this.ΔᐃⲆⲆⲆⲆⵠ === this.ᐃᐃΔᐃⲆΔΔ) this.buttons[this.ᐃᐃΔᐃⲆΔΔ].info.state = ᐃᐃⵠⲆ;
				else this.ⵠⲆᐃΔⲆⵠΔ === this.ΔᐃⲆⲆⲆⲆⵠ && (this.buttons[this.ⵠⲆᐃΔⲆⵠΔ].info.state = ᐃᐃⵠⲆ)
			}
			if (ⵠᐃᐃΔᐃ === (this.ⵠⲆⵠⲆⲆ & ⵠᐃᐃΔᐃ)) {
				if (this.ⵠⵠᐃⵠⵠᐃⲆ === -1) this.buttons[ᐃⲆⵠΔΔⲆᐃⵠⵠ].info.state = ᐃᐃⵠⲆ;
				else if (this.ⵠⵠᐃⵠⵠᐃⲆ === ᐃΔᐃᐃ.ⵠΔᐃⵠΔ) this.buttons[ⲆⵠⲆᐃⵠⵠᐃⲆⲆ].info.state = ᐃᐃⵠⲆ;
				else if (this.ⵠⵠᐃⵠⵠᐃⲆ === ᐃΔᐃᐃ.ᐃΔΔΔᐃ) this.buttons[ⲆⵠⲆᐃⲆΔᐃᐃᐃ].info.state = ᐃᐃⵠⲆ;
				else if (ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ === this.ⵠⵠᐃⵠⵠᐃⲆ) this.buttons[ⵠⲆᐃᐃⲆⲆΔᐃⵠ].info.state = ᐃᐃⵠⲆ;
				else if (this.ⵠⵠᐃⵠⵠᐃⲆ === ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ) this.buttons[ⲆᐃᐃⲆⵠΔΔΔⵠ].info.state = ᐃᐃⵠⲆ;
				if (this.ⲆᐃΔᐃΔᐃᐃ === ⲆᐃΔⵠ) this.buttons[ⲆⵠΔΔΔΔᐃᐃⵠ].info.state = ᐃᐃⵠⲆ;
				else if (ΔΔΔᐃ === this.ⲆᐃΔᐃΔᐃᐃ) this.buttons[ᐃΔⵠᐃⵠⵠⲆᐃᐃ].info.state = ᐃᐃⵠⲆ;
				else if (this.ⲆᐃΔᐃΔᐃᐃ === ⵠⵠΔⵠ) this.buttons[ᐃΔΔⵠΔᐃⲆΔⲆ].info.state = ᐃᐃⵠⲆ;
				else if (this.ⲆᐃΔᐃΔᐃᐃ === ⵠⲆᐃΔ) this.buttons[ᐃΔᐃᐃᐃⵠⲆΔΔ].info.state = ᐃᐃⵠⲆ;
				else if (ΔᐃᐃΔ === this.ⲆᐃΔᐃΔᐃᐃ) this.buttons[ΔᐃⵠⲆΔᐃⲆⲆⵠ].info.state = ᐃᐃⵠⲆ;
				else if (5 === this.ⲆᐃΔᐃΔᐃᐃ) this.buttons[ⲆⵠⲆⵠⲆΔⵠⲆⵠ].info.state = ᐃᐃⵠⲆ
			}
			if ((this.ⵠⲆⵠⲆⲆ & ⲆΔⵠⵠⲆ) === ⲆΔⵠⵠⲆ && ΔΔᐃⲆ.ⲆᐃᐃⵠᐃᐃΔ === ᐃⲆΔ) {
				this.buttons[ⵠⲆΔⵠᐃ].ᐃⲆⲆⲆΔⲆΔ(ΔΔⵠᐃ.ΔⵠΔΔ) ? this.buttons[ⵠⲆΔⵠᐃ].hint = Math.min(1, this.buttons[ⵠⲆΔⵠᐃ].hint + ᐃⵠᐃⵠ * 1.5) : this.buttons[ⵠⲆΔⵠᐃ].hint = Math.max(0, this.buttons[ⵠⲆΔⵠᐃ].hint - ᐃⵠᐃⵠ * 1.5);
				this.buttons[ⲆᐃᐃΔᐃ].ᐃⲆⲆⲆΔⲆΔ(ΔΔⵠᐃ.ΔⵠΔΔ) ? this.buttons[ⲆᐃᐃΔᐃ].hint = Math.min(1, this.buttons[ⲆᐃᐃΔᐃ].hint + ᐃⵠᐃⵠ * 1.5) : this.buttons[ⲆᐃᐃΔᐃ].hint = Math.max(0, this.buttons[ⲆᐃᐃΔᐃ].hint - ᐃⵠᐃⵠ * 1.5);
				if (this.buttons[ᐃΔⵠΔⲆ].ᐃⲆⲆⲆΔⲆΔ(ΔΔⵠᐃ.ΔⵠΔΔ)) this.buttons[ᐃΔⵠΔⲆ].hint = Math.min(ᐃⵠⵠⵠ, this.buttons[ᐃΔⵠΔⲆ].hint + ᐃⵠᐃⵠ * 1.5);
				else this.buttons[ᐃΔⵠΔⲆ].hint = Math.max(ⲆⲆᐃⲆ, this.buttons[ᐃΔⵠΔⲆ].hint - ᐃⵠᐃⵠ * 1.5);
				this.buttons[ΔⲆⲆᐃⵠ].ᐃⲆⲆⲆΔⲆΔ(ΔΔⵠᐃ.ΔⵠΔΔ) ? this.buttons[ΔⲆⲆᐃⵠ].hint = Math.min(1, this.buttons[ΔⲆⲆᐃⵠ].hint + ᐃⵠᐃⵠ * 1.5) : this.buttons[ΔⲆⲆᐃⵠ].hint = Math.max(ⲆⲆᐃ, this.buttons[ΔⲆⲆᐃⵠ].hint - ᐃⵠᐃⵠ * 1.5);
				if (this.buttons[ᐃΔⲆⵠⵠ].ᐃⲆⲆⲆΔⲆΔ(ΔΔⵠᐃ.ΔⵠΔΔ)) this.buttons[ᐃΔⲆⵠⵠ].hint = Math.min(1, this.buttons[ᐃΔⲆⵠⵠ].hint + 1.5 * ᐃⵠᐃⵠ);
				else this.buttons[ᐃΔⲆⵠⵠ].hint = Math.max(0, this.buttons[ᐃΔⲆⵠⵠ].hint - ᐃⵠᐃⵠ * 1.5);
				this.buttons[ΔᐃⲆⲆⲆ].ᐃⲆⲆⲆΔⲆΔ(ΔΔⵠᐃ.ΔⵠΔΔ) ? this.buttons[ΔᐃⲆⲆⲆ].hint = Math.min(ᐃΔⲆΔ, this.buttons[ΔᐃⲆⲆⲆ].hint + 1.5 * ᐃⵠᐃⵠ) : this.buttons[ΔᐃⲆⲆⲆ].hint = Math.max(Ⲇⵠⵠᐃ, this.buttons[ΔᐃⲆⲆⲆ].hint - ᐃⵠᐃⵠ * 1.5)
			}
			var ⲆⵠᐃⵠΔΔΔ = ⵠⲆⵠⲆ;
			if (Δⵠᐃ < (this.ⵠⲆⵠⲆⲆ & (ⵠⵠΔΔΔΔⵠ | ⵠΔⵠΔⲆᐃΔ | ᐃᐃᐃⲆᐃᐃΔ | ΔⵠⵠⵠⲆᐃⲆ | ΔⵠⵠⲆⲆⲆⲆ | ⲆΔᐃΔⵠⵠⵠ))) {
				var ⵠⵠ = Δᐃ.ΔⲆᐃⵠⵠⲆⲆ;
				Δ.save();
				Δ.translate(ⲆⵠᐃΔ, ᐃⵠᐃⲆᐃΔᐃᐃⲆ + ⵠⵠ.height / 4);
				1 === this.ᐃⲆⲆΔΔ && (this.ΔᐃᐃΔⲆΔᐃ += ᐃⵠᐃⵠ / 3, ⲆⵠᐃⵠΔΔΔ = this.ⵠᐃⵠᐃᐃⲆⵠ - ΔⵠⲆⵠⲆ / Math.pow(ⲆⲆⲆᐃ + this.ΔᐃᐃΔⲆΔᐃ, ᐃΔⲆΔ + this.ΔᐃᐃΔⲆΔᐃ), Δ.rotate(ⲆⵠᐃⵠΔΔΔ));
				ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ᐃᐃⵠΔ, -ⵠⵠ.height / 4, ⵠⵠ.width / ⵠⵠᐃⲆ, ⵠⵠ.height / 2);
				Δ.restore()
			}
			if (ΔΔᐃⲆ.ⲆᐃᐃⵠᐃᐃΔ === ⵠΔⵠᐃ) {
				if (ΔΔᐃⲆ.ᐃⲆⲆⵠΔ === ᐃΔᐃᐃ.ⵠΔᐃⵠΔ) this.buttons[ⵠⲆΔⵠᐃ].info.state = ᐃᐃⵠⲆ;
				else if (ΔΔᐃⲆ.ᐃⲆⲆⵠΔ === ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ) this.buttons[ⲆᐃᐃΔᐃ].info.state = ᐃᐃⵠⲆ;
				else if (ᐃΔᐃᐃ.ᐃΔΔΔᐃ === ΔΔᐃⲆ.ᐃⲆⲆⵠΔ) this.buttons[ᐃΔⲆⵠⵠ].info.state = ᐃᐃⵠⲆ;
				else if (ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ === ΔΔᐃⲆ.ᐃⲆⲆⵠΔ) this.buttons[ΔᐃⲆⲆⲆ].info.state = ᐃᐃⵠⲆ;
				else if (ΔΔᐃⲆ.ᐃⲆⲆⵠΔ === ᐃΔᐃᐃ.ᐃΔⵠΔⲆ) this.buttons[ᐃΔⵠΔⲆ].info.state = ᐃᐃⵠⲆ;
				else ΔΔᐃⲆ.ᐃⲆⲆⵠΔ === ᐃΔᐃᐃ.ΔⲆⲆᐃⵠ && (this.buttons[ΔⲆⲆᐃⵠ].info.state = ᐃᐃⵠⲆ)
			}
			for (var ᐃⲆ = ᐃΔⲆΔ; this.buttons.length > ᐃⲆ; ᐃⲆ++) {
				ⲆⲆᐃᐃ === this.buttons[ᐃⲆ].info.active && this.buttons[ᐃⲆ].ᐃⵠΔᐃ(Δ)
			}
			this.ⵠΔⵠⵠ[ⲆⲆΔ].ᐃⵠΔᐃ(Δ);
			if (ⵠᐃⵠ < (this.ⵠⲆⵠⲆⲆ & (ᐃⵠᐃⲆΔΔΔ | ⲆⵠⲆΔⲆⵠᐃ))) {
				var ⵠⵠ = this.ᐃⲆΔᐃⲆⵠⲆ;
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / 4, 138, ⵠⵠ.width / 2, ⵠⵠ.height / 2)
			}
			var ⵠᐃⲆⵠΔ = Math.max(ⲆⲆΔⵠ, Math.min(ⲆΔⲆⲆⲆΔⲆ, Math.floor((ⲆΔⲆⵠ.ⵠᐃⲆⵠΔ + 3) / 2)));
			this.ⵠΔⵠⵠ[ⵠᐃⲆⵠΔ].active = ⲆⲆᐃᐃ;
			this.ⵠΔⵠⵠ[ⵠᐃⲆⵠΔ].ᐃⵠΔᐃ(Δ);
			this.ⵠΔⵠⵠ[ⵠᐃⲆⵠΔ].active = ⵠⲆΔΔ;
			this.buttons[0].ᐃⵠΔᐃ(Δ);
			if (1 < (this.ⵠⲆⵠⲆⲆ & (ΔᐃΔᐃⵠ | ⵠⵠⵠΔⵠ | ΔⲆᐃΔⲆ | ⵠΔⲆⵠᐃ | ⵠᐃᐃⵠᐃ))) {
				var ᐃⵠΔⲆⵠ = (this.ⵠⲆⵠⲆⲆ & (ⵠⵠⵠΔⵠ | ΔⲆᐃΔⲆ | ⵠΔⲆⵠᐃ | ⵠᐃᐃⵠᐃ)) > ⲆⲆⵠ ? -190 : ⲆⲆᐃⲆ;
				var ⵠⵠ = ᐃᐃ[ⵠ.ⲆⵠⲆΔ][this.ᐃΔⲆΔΔ][this.ⵠΔᐃᐃⲆⲆⵠ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / ᐃΔⵠᐃⲆ + ᐃⵠΔⲆⵠ, 183, ⵠⵠ.width / ᐃᐃⲆⵠ, ⵠⵠ.height / 2);
				this.ⵠᐃⵠᐃ = (this.ⵠᐃⵠᐃ + 1e3 * ᐃⵠᐃⵠ) % 2e3;
				var ⵠΔΔ = 4.5 * (this.ⵠᐃⵠᐃ < 1e3) ? this.ⵠᐃⵠᐃ / 1e3 : (2e3 - this.ⵠᐃⵠᐃ) / 1e3;
				var ⵠⵠ = ᐃᐃ[ⵠ.ⵠΔⲆΔᐃ][this.ⲆⵠᐃⲆᐃ][this.ⵠΔᐃᐃⲆⲆⵠ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / 4 - 62 + ⵠΔΔ + ᐃⵠΔⲆⵠ, 240, ⵠⵠ.width / ΔΔⵠⲆ, ⵠⵠ.height / ΔΔᐃⲆⵠ);
				var ⵠⵠ = ᐃᐃ[ⵠ.ΔΔⲆⵠᐃ][this.ⵠⲆᐃᐃ][this.ⵠΔᐃᐃⲆⲆⵠ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / 4 - 54 + ⵠΔΔ + ᐃⵠΔⲆⵠ, 272, ⵠⵠ.width / 2, ⵠⵠ.height / ⵠΔΔΔ);
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / 4 + 54 - ⵠΔΔ + ᐃⵠΔⲆⵠ, 272, ⵠⵠ.width / ⵠⲆᐃⵠ, ⵠⵠ.height / ΔⲆⵠΔ);
				var ⵠⵠ = ᐃᐃ[ⵠ.ᐃΔⵠΔΔ][this.ⵠⲆᐃᐃ][this.ⵠΔᐃᐃⲆⲆⵠ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / 4 + ᐃⵠΔⲆⵠ, 222, ⵠⵠ.width / 2, ⵠⵠ.height / ΔⲆⵠΔ);
				var ⵠⵠ = ᐃᐃ[ⵠ.ΔⲆⲆⵠᐃ][this.ⵠΔⵠⲆⲆ][this.ⵠΔᐃᐃⲆⲆⵠ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / ⵠⵠⵠᐃⲆ + ᐃⵠΔⲆⵠ, 222, ⵠⵠ.width / 2, ⵠⵠ.height / 2)
			}
			if ((this.ⵠⲆⵠⲆⲆ & ΔᐃΔᐃⵠ) === ΔᐃΔᐃⵠ) {
				var ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠΔⵠⵠ][this.ᐃΔⲆⵠⲆ][this.ⵠΔᐃᐃⲆⲆⵠ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / ⵠⲆᐃⲆ - 61, 406 - ⵠⵠ.height / 4, ⵠⵠ.width / 2, ⵠⵠ.height / ᐃⵠΔⲆ);
				var ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠΔⵠⵠ][this.ΔᐃΔⵠΔ][this.ⵠΔᐃᐃⲆⲆⵠ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / ᐃᐃᐃᐃΔ + 53, 406 - ⵠⵠ.height / 4, ⵠⵠ.width / 2, ⵠⵠ.height / 2)
			}
			if (ⵠΔⵠⲆΔ === (this.ⵠⲆⵠⲆⲆ & ⵠΔⵠⲆΔ)) {
				var ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠΔⵠⵠ][this.ΔᐃΔⵠΔ][this.ⵠΔᐃᐃⲆⲆⵠ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / ⲆⲆⲆΔ - 200, 268 - ⵠⵠ.height / 4, ⵠⵠ.width / 2, ⵠⵠ.height / 2)
			}
			if (ᐃⲆᐃᐃΔ === (this.ⵠⲆⵠⲆⲆ & ᐃⲆᐃᐃΔ)) {
				var ⵠⵠ = ᐃᐃ[ⵠ.ΔⵠΔⵠⵠ][this.ᐃΔⲆⵠⲆ][this.ⵠΔᐃᐃⲆⲆⵠ];
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / ᐃΔⵠᐃⲆ - 200, 268 - ⵠⵠ.height / ΔⵠⲆⵠᐃ, ⵠⵠ.width / ᐃᐃΔⵠ, ⵠⵠ.height / ⵠᐃᐃⲆ)
			}
			if (1 < (this.ⵠⲆⵠⲆⲆ & (ⵠⵠⵠΔⵠ | ΔⲆᐃΔⲆ | ⵠΔⲆⵠᐃ | ⵠᐃᐃⵠᐃ | ⵠΔⵠⲆΔ | ᐃⲆᐃᐃΔ))) {
				for (var ᐃⲆ = 1; ᐃⲆ < this.buttons.length; ᐃⲆ++) {
					if (ⲆⲆΔ === (this.buttons[ᐃⲆ].view & this.ⵠⲆⵠⲆⲆ)) continue;
					var ΔⵠᐃⲆ = this.buttons[ᐃⲆ].info;
					if (ᐃⲆᐃ <= ΔⵠᐃⲆ.ΔⲆᐃⲆⵠⵠΔ) {
						var ⵠⵠ = ΔⵠᐃⲆ.ᐃⲆΔⲆⲆᐃⵠⲆᐃ[ΔⵠᐃⲆ.ΔⲆᐃⲆⵠⵠΔ].ⵠΔⵠ;
						ⵠΔⲆⲆ(Δ, ⵠⵠ, ΔⵠᐃⲆ.translate.x - ⵠⵠ.width / 8 + 44.5, ΔⵠᐃⲆ.translate.y - ⵠⵠ.height / 8 + 45.5, ⵠⵠ.width / 4, ⵠⵠ.height / ᐃᐃᐃᐃΔ);
						if (1 !== ΔⵠᐃⲆ.ⵠⵠᐃΔⲆⲆⲆ) {
							var ⵠⵠ = Δᐃ.ᐃⲆⲆⵠΔⲆΔ;
							ⵠΔⲆⲆ(Δ, ⵠⵠ, ΔⵠᐃⲆ.translate.x - ⵠⵠ.width / ⵠΔⲆᐃⲆ + 44.5, ΔⵠᐃⲆ.translate.y - ⵠⵠ.height / 4 + 44.5, ⵠⵠ.width / ΔⵠⲆⲆ, ⵠⵠ.height / 2)
						}
					}
				}
				var ⵠⵠ = this.ᐃⲆⲆⵠᐃⲆᐃ;
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - 312, 375, ⵠⵠ.width / 2, ⵠⵠ.height / 2);
				var ⵠⵠ = this.ᐃⲆᐃᐃᐃⲆᐃ;
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - 312, 395, ⵠⵠ.width / 2, ⵠⵠ.height / ⲆΔΔⲆ)
			}
			if (this.Ⲇⵠᐃᐃⵠ !== this.ᐃⵠΔΔᐃⵠΔ) {
				this.ᐃⵠΔΔᐃⵠΔ = this.Ⲇⵠᐃᐃⵠ;
				this.ⲆᐃΔΔΔᐃᐃ = ᐃΔΔⲆⲆ("" + this.Ⲇⵠᐃᐃⵠ, ᐃ[48], ᐃ[103], 60, 250)
			}
			ⵠΔⲆⲆ(Δ, this.ⲆᐃΔΔΔᐃᐃ, this.ⵠΔⵠⵠ[ⲆᐃΔⵠ].translate.x + 350, ⵠⵠΔΔΔ, this.ⲆᐃΔΔΔᐃᐃ.w2, this.ⲆᐃΔΔΔᐃᐃ.ΔⲆΔⵠⵠ);
			if (this.ⵠᐃⲆⵠΔ !== this.ΔⵠⲆⲆᐃⵠᐃ) {
				this.ΔⵠⲆⲆᐃⵠᐃ = this.ⵠᐃⲆⵠΔ;
				this.ⲆⲆᐃⵠⲆⲆᐃ = ᐃΔΔⲆⲆ("LVL " + (this.ⵠᐃⲆⵠΔ + 1), ᐃ[48], ᐃ[103], 50, 250, undefined, 30, 24, ΔΔᐃⲆᐃ, undefined, undefined, undefined, "#3F3019", ᐃᐃⲆⵠΔ)
			}
			ⵠΔⲆⲆ(Δ, this.ⲆⲆᐃⵠⲆⲆᐃ, this.ⵠΔⵠⵠ[0].translate.x + 94, 0, this.ⲆⲆᐃⵠⲆⲆᐃ.w2, this.ⲆⲆᐃⵠⲆⲆᐃ.ΔⲆΔⵠⵠ);
			if (ⵠᐃⵠ === ΔΔᐃⲆ.ⲆᐃᐃⵠᐃᐃΔ) {
				var Δᐃᐃᐃ = this.buttons[ⵠⲆΔⵠᐃ].hint;
				if (Δᐃᐃᐃ > ⵠⵠᐃ) {
					var ⵠⵠ = Δᐃ.ΔΔΔᐃᐃⲆΔ;
					ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / 4, -36 - ⵠⵠ.height * ΔⲆᐃ.ΔⲆΔⲆⲆ(1 - Δᐃᐃᐃ) / 2, ⵠⵠ.width / 2, ⵠⵠ.height / ⵠⵠᐃⲆ)
				}
				var Δᐃᐃᐃ = this.buttons[ⲆᐃᐃΔᐃ].hint;
				if (Δᐃᐃᐃ > 0) {
					var ⵠⵠ = Δᐃ.ⵠΔⲆᐃⲆΔΔ;
					ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / 4, -36 - ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃΔⲆΔ - Δᐃᐃᐃ) * ⵠⵠ.height / 2, ⵠⵠ.width / 2, ⵠⵠ.height / ⲆΔⲆΔ)
				}
				var Δᐃᐃᐃ = this.buttons[ᐃΔⵠΔⲆ].hint;
				if (Δᐃᐃᐃ > ⵠⵠⲆΔ) {
					var ⵠⵠ = Δᐃ.ⵠΔᐃⵠⲆⲆΔ;
					ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / 4, -36 - ΔⲆᐃ.ΔⲆΔⲆⲆ(ⲆⵠⲆ - Δᐃᐃᐃ) * ⵠⵠ.height / 2, ⵠⵠ.width / 2, ⵠⵠ.height / ⵠⲆΔᐃ)
				}
				var Δᐃᐃᐃ = this.buttons[ΔⲆⲆᐃⵠ].hint;
				if (Δᐃᐃᐃ > ⲆⲆᐃⲆ) {
					var ⵠⵠ = Δᐃ.ᐃⵠᐃⲆⵠⲆᐃ;
					ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / 4, -36 - ΔⲆᐃ.ΔⲆΔⲆⲆ(ΔⲆⵠⲆ - Δᐃᐃᐃ) * ⵠⵠ.height / ⲆᐃᐃⲆ, ⵠⵠ.width / 2, ⵠⵠ.height / 2)
				}
				var Δᐃᐃᐃ = this.buttons[ΔᐃⲆⲆⲆ].hint;
				if (0 < Δᐃᐃᐃ) {
					var ⵠⵠ = Δᐃ.ᐃⵠⵠⲆᐃⲆⵠ;
					ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / 4, -36 - ⵠⵠ.height * ΔⲆᐃ.ΔⲆΔⲆⲆ(1 - Δᐃᐃᐃ) / 2, ⵠⵠ.width / ΔΔⵠⲆ, ⵠⵠ.height / ⲆΔⲆΔ)
				}
				var Δᐃᐃᐃ = this.buttons[ᐃΔⲆⵠⵠ].hint;
				if (ⲆᐃΔⵠ < Δᐃᐃᐃ) {
					var ⵠⵠ = Δᐃ.ᐃⵠⲆⵠᐃΔⵠ;
					ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / 4, -36 - ΔⲆᐃ.ΔⲆΔⲆⲆ(ᐃⵠⵠⵠ - Δᐃᐃᐃ) * ⵠⵠ.height / 2, ⵠⵠ.width / ᐃⵠΔⲆ, ⵠⵠ.height / 2)
				}
			}
			if (ⲆⲆΔⵠ === this.ᐃⲆⲆΔΔ && .006 > Math.abs(ⲆⵠᐃⵠΔΔΔ - this.ⵠᐃⵠᐃᐃⲆⵠ)) {
				Δ.globalAlpha = Math.min(1, 3 * this.ΔⵠᐃΔⵠΔⲆ);
				var ⵠⵠ = Δᐃ.ⵠᐃᐃⲆⵠΔⲆ;
				Δ.save();
				Δ.translate(ⲆⵠᐃΔ, 260);
				this.ΔⵠᐃΔⵠΔⲆ += ᐃⵠᐃⵠ;
				Δ.rotate(this.ΔⵠᐃΔⵠΔⲆ);
				ⵠΔⲆⲆ(Δ, ⵠⵠ, -ⵠⵠ.width / ᐃᐃⲆⵠ, -ⵠⵠ.height / 2, ⵠⵠ.width, ⵠⵠ.height);
				Δ.restore();
				var ⵠΔΔ = 1.05 + .05 * Math.cos(5 * this.ΔⵠᐃΔⵠΔⲆ);
				if (0 === this.ⲆⲆΔⵠⲆⵠᐃ) {
					ⵠⵠ = ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[this.ΔⵠᐃΔⲆΔⵠ].ⵠΔⵠ;
					var ᐃΔΔ = ⵠΔΔ * ⵠⵠ.width;
					var ΔⵠⲆ = ⵠΔΔ * ⵠⵠ.height;
					ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ᐃΔΔ / ᐃᐃⲆⵠ, 260 - ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ)
				} else if (this.ⲆⲆΔⵠⲆⵠᐃ === 1) {
					ⵠⵠ = ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[0].ⵠΔⵠ;
					var ᐃΔΔ = ⵠΔΔ * ⵠⵠ.width;
					var ΔⵠⲆ = ⵠⵠ.height * ⵠΔΔ;
					ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ᐃΔΔ / ᐃᐃⵠⵠ, 260 - ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ);
					ⵠⵠ = ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ[this.ΔⵠᐃΔⲆΔⵠ].ⵠΔⵠ;
					var ᐃΔΔ = ⵠΔΔ * ⵠⵠ.width;
					var ΔⵠⲆ = ⵠΔΔ * ⵠⵠ.height;
					ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ᐃΔΔ / 2, 260 - ΔⵠⲆ / Ⲇᐃⵠⵠ, ᐃΔΔ, ΔⵠⲆ)
				} else if (2 === this.ⲆⲆΔⵠⲆⵠᐃ) {
					ⵠⵠ = ⲆⲆΔⲆ.ⲆⵠⲆΔ[this.ΔⵠᐃΔⲆΔⵠ].ⵠΔⵠ;
					var ᐃΔΔ = ⵠⵠ.width * ⵠΔΔ;
					var ΔⵠⲆ = ⵠΔΔ * ⵠⵠ.height;
					ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ᐃΔΔ / ᐃᐃⵠⵠ, 180 - ΔⵠⲆ / ΔⵠⲆⲆ, ᐃΔΔ, ΔⵠⲆ);
					ⵠⵠ = ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[ᐃⲆΔᐃ].ⵠΔⵠ;
					var ᐃΔΔ = ⵠⵠ.width * ⵠΔΔ;
					var ΔⵠⲆ = ⵠΔΔ * ⵠⵠ.height;
					ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ᐃΔΔ / 2, 260 - ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ)
				} else if (this.ⲆⲆΔⵠⲆⵠᐃ === ⲆΔⲆᐃ) {
					ⵠⵠ = ⲆⲆΔⲆ.ⵠΔⲆΔᐃ[this.ΔⵠᐃΔⲆΔⵠ].ⵠΔⵠ;
					var ᐃΔΔ = ⵠΔΔ * ⵠⵠ.width;
					var ΔⵠⲆ = ⵠⵠ.height * ⵠΔΔ;
					Δ.save();
					Δ.translate(ⲆⵠᐃΔ, 260);
					Δ.rotate(Math.PI);
					ⵠΔⲆⲆ(Δ, ⵠⵠ, -ᐃΔΔ / ᐃᐃⵠⵠ, -ΔⵠⲆ / ⲆᐃᐃⲆ, ᐃΔΔ, ΔⵠⲆ);
					Δ.restore()
				} else if (4 === this.ⲆⲆΔⵠⲆⵠᐃ) {
					ⵠⵠ = ⲆⲆΔⲆ.ΔⵠΔⵠⵠ[this.ΔⵠᐃΔⲆΔⵠ].ⵠΔⵠ;
					var ᐃΔΔ = ⵠΔΔ * ⵠⵠ.width;
					var ΔⵠⲆ = ⵠΔΔ * ⵠⵠ.height;
					ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ᐃΔΔ / ᐃⲆⵠᐃ, 260 - ΔⵠⲆ / 2, ᐃΔΔ, ΔⵠⲆ)
				}
				var ⵠⵠ = this.ⵠᐃᐃⲆΔᐃΔ;
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / ᐃΔⵠᐃⲆ, 340, ⵠⵠ.width / ΔⵠⲆⲆ, ⵠⵠ.height / ᐃⲆⵠᐃ);
				var ⵠⵠ = this.ⲆⵠⵠᐃᐃⲆⵠ;
				ⵠΔⲆⲆ(Δ, ⵠⵠ, ⲆⵠᐃΔ - ⵠⵠ.width / 4, 365, ⵠⵠ.width / 2, ⵠⵠ.height / 2);
				if (6 < this.ΔⵠᐃΔⵠΔⲆ) {
					this.ᐃⲆⲆΔΔ = 0;
					ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
				}
				Δ.globalAlpha = ΔΔΔᐃ
			}
			ⲆΔⵠ.alert.ᐃⵠΔᐃ(ᐃ[448], ᐃ[76]);
			if (Ⲇᐃⵠ.waiting) this.ᐃᐃⲆⲆΔΔⵠ.ᐃⵠΔᐃ()
		};
		var ⲆΔ = 0;
		var ⲆΔⵠⵠⲆ = Math.pow(2, ⲆΔ++);
		var ⵠᐃᐃΔᐃ = Math.pow(ⵠΔΔΔ, ⲆΔ++);
		this.ⵠᐃᐃΔᐃ = ⵠᐃᐃΔᐃ;
		var ⲆⵠΔⵠΔ = Math.pow(2, ⲆΔ++);
		var ΔᐃΔᐃⵠ = Math.pow(ⵠΔⵠⲆ, ⲆΔ++);
		var ⵠΔΔⵠΔ = Math.pow(2, ⲆΔ++);
		var ⵠᐃᐃⲆⲆⵠᐃ = Math.pow(ⵠΔⵠⲆ, ⲆΔ++);
		var ⵠⵠⲆⲆᐃ = Math.pow(ⵠᐃᐃⲆ, ⲆΔ++);
		var ⲆΔΔᐃⵠ = Math.pow(2, ⲆΔ++);
		this.ⲆΔΔᐃⵠ = ⲆΔΔᐃⵠ;
		var ᐃⵠΔⵠⵠᐃᐃ = Math.pow(ⵠⲆΔᐃ, ⲆΔ++);
		var ΔᐃᐃⵠⵠⵠⲆ = Math.pow(2, ⲆΔ++);
		var ⵠⵠΔΔΔΔⵠ = Math.pow(ⵠⵠᐃⲆ, ⲆΔ++);
		var ⵠΔⵠΔⲆᐃΔ = Math.pow(ⵠΔⵠⲆ, ⲆΔ++);
		var ᐃᐃᐃⲆᐃᐃΔ = Math.pow(2, ⲆΔ++);
		var ΔⵠⵠⵠⲆᐃⲆ = Math.pow(ᐃⵠΔⲆ, ⲆΔ++);
		var ΔⵠⵠⲆⲆⲆⲆ = Math.pow(2, ⲆΔ++);
		var ⲆΔᐃΔⵠⵠⵠ = Math.pow(2, ⲆΔ++);
		var ⵠΔⲆⵠᐃ = Math.pow(2, ⲆΔ++);
		var ⵠΔⵠⲆΔ = Math.pow(2, ⲆΔ++);
		var ⵠⵠⵠΔⵠ = Math.pow(ⵠⵠᐃⲆ, ⲆΔ++);
		var ΔⲆᐃΔⲆ = Math.pow(ΔⲆⵠΔ, ⲆΔ++);
		var ⵠᐃᐃⵠᐃ = Math.pow(2, ⲆΔ++);
		var ᐃⲆᐃᐃΔ = Math.pow(ⵠΔΔΔ, ⲆΔ++);
		var ⲆⵠⲆΔⲆⵠᐃ = Math.pow(ⵠⲆᐃⵠ, ⲆΔ++);
		var ᐃⵠᐃⲆΔΔΔ = Math.pow(2, ⲆΔ++);
		var ᐃⵠᐃΔⲆ = Math.pow(ⲆᐃᐃⲆ, ⲆΔ++);
		this.ᐃⵠᐃΔⲆ = ᐃⵠᐃΔⲆ;
		var ⲆᐃΔΔⵠ = Math.pow(2, ⲆΔ++);
		this.ⲆᐃΔΔⵠ = ⲆᐃΔΔⵠ;
		var ⵠⲆⵠΔΔ = Math.pow(ᐃⵠΔⲆ, ⲆΔ++);
		this.ⵠⲆⵠΔΔ = ⵠⲆⵠΔΔ;
		var ⲆⲆⵠⵠΔᐃⵠ = Math.pow(ⲆΔΔⲆ, ⲆΔ++);
		this.ⵠⲆⵠⲆⲆ = ⲆΔⵠⵠⲆ;

		function ΔⲆᐃⵠΔ(ⵠΔᐃⵠ, ΔⵠⲆⵠ, ΔΔⵠⵠⲆⲆⵠΔΔ) {
			for (var ᐃⲆ = 0; Ⲇᐃⵠ.ⵠΔⵠⵠ.length > ᐃⲆ; ᐃⲆ++) {
				if ((Ⲇᐃⵠ.ⵠΔⵠⵠ[ᐃⲆ].view & ⵠΔᐃⵠ) !== ⲆᐃΔⵠ) Ⲇᐃⵠ.ⵠΔⵠⵠ[ᐃⲆ].active = ΔⵠⲆⵠ
			}
			for (var ᐃⲆ = 0; Ⲇᐃⵠ.buttons.length > ᐃⲆ; ᐃⲆ++) {
				(Ⲇᐃⵠ.buttons[ᐃⲆ].view & ⵠΔᐃⵠ) !== ⵠⵠⲆΔ && (Ⲇᐃⵠ.buttons[ᐃⲆ].info.active = ΔⵠⲆⵠ)
			}
			for (var ᐃⲆ = 0; ᐃⲆ < Ⲇᐃⵠ.ΔΔΔΔΔ.length; ᐃⲆ++) {
				(Ⲇᐃⵠ.ΔΔΔΔΔ[ᐃⲆ].view & ⵠΔᐃⵠ) !== ΔᐃⲆⲆ && (Ⲇᐃⵠ.ΔΔΔΔΔ[ᐃⲆ].style.display = ΔΔⵠⵠⲆⲆⵠΔΔ)
			}
		}
		var ᐃⵠⲆⲆᐃⲆᐃ = [];
		this.ⵠⵠΔᐃⵠΔⵠ = ⲆⲆᐃ;

		function ⲆΔᐃⵠ(ⵠΔᐃⵠ) {
			if (false === Ⲇᐃⵠ.ᐃᐃΔⲆΔⲆΔ) return;
			ΔⲆᐃⵠΔ(ᐃⵠΔⵠⵠᐃᐃ, ⵠⲆΔΔ, ᐃ[371]);
			ΔⲆᐃⵠΔ(ΔᐃᐃⵠⵠⵠⲆ, ⵠⲆΔΔ, ᐃ[371]);
			ⲆⵠᐃΔᐃⵠΔ();
			if (ⵠΔᐃⵠ === Ⲇᐃⵠ.ⵠⲆⵠⲆⲆ || Ⲇᐃⵠ.ᐃⲆⲆΔΔ >= 1) return;
			ⵠΔᐃⵠ === ⲆΔⵠⵠⲆ || ⵠΔᐃⵠ === ⵠΔΔⵠΔ || ⵠΔᐃⵠ === ⵠᐃᐃΔᐃ || ⵠⵠⲆⲆᐃ === ⵠΔᐃⵠ || ⵠΔᐃⵠ === ΔᐃΔᐃⵠ || ⵠΔᐃⵠ === ⵠᐃᐃⲆⲆⵠᐃ ? Ⲇᐃⵠ.ΔⲆⵠⵠⵠ.style.display = ᐃ[376] : Ⲇᐃⵠ.ΔⲆⵠⵠⵠ.style.display = ᐃ[371];
			ΔⲆᐃⵠΔ(Ⲇᐃⵠ.ⵠⲆⵠⲆⲆ, ⵠⲆΔΔ, ᐃ[371]);
			Ⲇᐃⵠ.ⵠⲆⵠⲆⲆ = ⵠΔᐃⵠ;
			ΔⲆᐃⵠΔ(Ⲇᐃⵠ.ⵠⲆⵠⲆⲆ, ⲆⲆᐃᐃ, ᐃ[376])
		}

		function ⵠⲆᐃⲆⵠⵠΔΔᐃ(ΔⲆᐃⵠΔⲆᐃ) {
			ΔⲆᐃⵠΔⲆᐃ = ΔⲆᐃⵠΔⲆᐃ.replace("http://starve.io", "https://starve.io");
			var ᐃⲆⲆⵠ = new XMLHttpRequest;
			ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("HEAD", ΔⲆᐃⵠΔⲆᐃ, true);
			ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
				if (ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] === ᐃᐃΔⵠⲆ) {
					if (200 === ᐃⲆⲆⵠ.status) {
						var ⵠᐃⲆΔΔ = Number(ᐃⲆⲆⵠ.getResponseHeader("Content-Length"));
						ⵠᐃⲆΔΔ > ⵠⵠᐃ && ᐃⲆᐃᐃΔⲆⵠⵠΔ(ΔⲆᐃⵠΔⲆᐃ, ⵠᐃⲆΔΔ)
					}
				}
			};
			ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]](null)
		}

		function ᐃⲆᐃᐃΔⲆⵠⵠΔ(ⵠⲆΔⵠΔΔⲆ, ⵠⵠΔΔΔᐃᐃ) {
			ⵠⲆΔⵠΔΔⲆ = ⵠⲆΔⵠΔΔⲆ.replace("Xday", "day");
			ⵠⲆΔⵠΔΔⲆ = ⵠⲆΔⵠΔΔⲆ.replace("Xnight", "night");
			for (var ᐃⲆ = ᐃⲆᐃ; ᐃⵠⲆⲆᐃⲆᐃ.length > ᐃⲆ; ᐃⲆ++) {
				var ΔⲆΔΔᐃⵠⵠ = ᐃⵠⲆⲆᐃⲆᐃ[ᐃⲆ];
				if (ΔⲆΔΔᐃⵠⵠ[ᐃⲆᐃ] === ⵠⲆΔⵠΔΔⲆ) {
					if (ΔⲆΔΔᐃⵠⵠ[1] !== ⵠⵠΔΔΔᐃᐃ) ⲆΔⲆⵠ.ⵠⵠΔᐃⵠΔⵠ = 1;
					return
				}
			}
			ᐃⵠⲆⲆᐃⲆᐃ.push([ⵠⲆΔⵠΔΔⲆ, ⵠⵠΔΔΔᐃᐃ])
		}

		function ⲆⵠᐃΔᐃⵠΔ() {
			var ⲆⲆⵠᐃᐃⵠᐃ = Number(ᐃΔⲆⲆ.get("starve_crate"));
			var ⲆᐃⵠⲆⵠᐃⲆ = Number(ᐃΔⲆⲆ.get("starve_dead"));
			var ⵠΔⲆⲆΔᐃⵠ = Number(ᐃΔⲆⲆ.get("starve_book"));
			var ᐃΔⲆΔⵠⲆΔ = Number(ᐃΔⲆⲆ.get("starve_bag"));
			var ⲆΔᐃᐃΔΔΔ = Number(ᐃΔⲆⲆ.get("starve_skin"));
			var ᐃΔᐃⲆᐃⵠΔ = Number(ᐃΔⲆⲆ.get("starve_accessory"));
			!(ⲆΔⲆⵠ.unlock.ⵠⲆᐃᐃ[ⲆΔⲆⵠ.ⵠⲆᐃᐃ] > ᐃⲆᐃ) && (ⲆΔⲆⵠ.ⵠⲆᐃᐃ = !(ⲆΔⲆⵠ.unlock.ⵠⲆᐃᐃ[ⲆΔᐃᐃΔΔΔ] > 0) ? 0 : ⲆΔᐃᐃΔΔΔ);
			!(ⲆΔⲆⵠ.unlock.ⲆⵠᐃⲆᐃ[ⲆΔⲆⵠ.ⲆⵠᐃⲆᐃ] > 0) && (ⲆΔⲆⵠ.ⲆⵠᐃⲆᐃ = !(ⲆΔⲆⵠ.unlock.ⲆⵠᐃⲆᐃ[ⵠΔⲆⲆΔᐃⵠ] > 0) ? 0 : ⵠΔⲆⲆΔᐃⵠ);
			!(ⲆΔⲆⵠ.unlock.ΔᐃΔⵠΔ[ⲆΔⲆⵠ.ΔᐃΔⵠΔ] > 0) && (ⲆΔⲆⵠ.ΔᐃΔⵠΔ = !(ⲆΔⲆⵠ.unlock.ΔᐃΔⵠΔ[ⲆᐃⵠⲆⵠᐃⲆ] > ᐃⲆΔ) ? 0 : ⲆᐃⵠⲆⵠᐃⲆ);
			if (!(ⲆΔⲆⵠ.unlock.ᐃΔⲆⵠⲆ[ⲆΔⲆⵠ.ᐃΔⲆⵠⲆ] > ⵠⵠⵠ)) ⲆΔⲆⵠ.ᐃΔⲆⵠⲆ = !(ⲆΔⲆⵠ.unlock.ᐃΔⲆⵠⲆ[ⲆⲆⵠᐃᐃⵠᐃ] > ᐃⲆΔ) ? 0 : ⲆⲆⵠᐃᐃⵠᐃ;
			!(ⲆΔⲆⵠ.unlock.ⵠΔⵠⲆⲆ[ⲆΔⲆⵠ.ⵠΔⵠⲆⲆ] > 0) && (ⲆΔⲆⵠ.ⵠΔⵠⲆⲆ = !(ⲆΔⲆⵠ.unlock.ⵠΔⵠⲆⲆ[ᐃΔᐃⲆᐃⵠΔ] > 0) ? ⲆⲆᐃⲆ : ᐃΔᐃⲆᐃⵠΔ);
			!(ⲆΔⲆⵠ.unlock.ᐃΔⲆΔΔ[ⲆΔⲆⵠ.ᐃΔⲆΔΔ] > ᐃⲆΔᐃ) && (ⲆΔⲆⵠ.ᐃΔⲆΔΔ = !(ⲆΔⲆⵠ.unlock.ᐃΔⲆΔΔ[ᐃΔⲆΔⵠⲆΔ] > ⵠᐃⲆⵠ) ? ⵠⵠΔΔ : ᐃΔⲆΔⵠⲆΔ)
		}
		this.ⲆΔᐃⵠ = ⲆΔᐃⵠ;

		function ⲆᐃⲆᐃΔⵠⵠ(ⲆⲆⵠⵠ, ΔⵠᐃⵠⲆΔⲆ, ᐃⵠⵠΔⵠᐃⵠ) {
			const ᐃⲆⲆⵠ = new XMLHttpRequest;
			ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⲆⲆⵠⵠ);
			ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
			ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
				if (this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] == ᐃᐃᐃᐃΔ && this.status == 200) {
					if (ΔⵠᐃⵠⲆΔⲆ !== undefined) ΔⵠᐃⵠⲆΔⲆ(ᐃⲆⲆⵠ.responseText)
				} else if (this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] == ⵠⵠⵠᐃⲆ) {
					undefined !== ᐃⵠⵠΔⵠᐃⵠ && ᐃⵠⵠΔⵠᐃⵠ()
				}
			};
			ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
		}

		function ΔᐃΔⲆⵠⵠⲆ(callback) {
			if (ⲆΔⵠ.ΔⲆΔⲆᐃⲆⵠ === undefined) return;
			if (ⲆΔⵠ.ΔⲆΔⵠⵠᐃᐃ === ⵠᐃⲆⵠⲆ) return;
			if (ⲆΔⵠ.ⵠⵠᐃⲆⲆΔⲆ === ΔΔⲆⲆⲆ) return;
			if (ⲆΔⵠ.ΔᐃⲆᐃⲆⲆᐃ === undefined) return;
			callback()
		}

		function ⲆⵠΔΔⲆⵠᐃΔⲆ() {
			ⲆⵠᐃΔᐃⵠΔ();
			ΔΔᐃⲆ.connect()
		}
		this.ⵠΔΔⵠⲆⲆΔ = function(callback, ⲆⵠΔᐃⵠⵠᐃ) {
			let stop = ⵠᐃΔ;
			let ᐃⲆⵠⲆᐃⲆΔ = "0";
			ᐃⵠⵠⲆΔ && (ᐃⲆⵠⲆᐃⲆΔ = ᐃⵠⵠⲆΔ + ΔⲆⵠⲆⵠⵠⵠ.ΔΔⲆΔⵠΔⵠ());
			ⲆΔⵠ.ΔⲆΔⲆᐃⲆⵠ ? ΔᐃΔⲆⵠⵠⲆ(callback) : ⲆᐃⲆᐃΔⵠⵠ(`${ⵠΔᐃⲆΔ}token?id=${ᐃⲆⵠⲆᐃⲆΔ}`, (function(ΔᐃⲆΔΔ) {
				if (1 === stop) return;
				const ⵠⵠⵠⲆⲆ = ΔᐃⲆΔΔ.split("_");
				const ᐃⵠⲆⲆⲆ = ⵠⵠⵠⲆⲆ[Δⵠⵠ] + "_";
				const ⲆᐃⲆⵠ = Number(ⵠⵠⵠⲆⲆ[ⲆⲆΔⵠ]);
				const ΔⵠⵠᐃΔ = Math.abs(ᐃΔΔᐃⵠᐃΔ(ⲆᐃⲆⵠ));
				ⲆΔⵠ.ΔⲆΔⲆᐃⲆⵠ = ᐃⵠⲆⲆⲆ + ΔⵠⵠᐃΔ;
				ΔᐃΔⲆⵠⵠⲆ(callback)
			}), (function() {
				if (ᐃⵠⵠⵠ === stop) return;
				if (ⲆⵠΔᐃⵠⵠᐃ === 1) {
					stop = ⵠⵠⵠⲆ;
					callback();
					return
				}
				Ⲇᐃⵠ.waiting = ΔΔᐃΔⵠ
			}));
			ⲆᐃⲆᐃΔⵠⵠ(`${ⲆᐃⵠᐃΔ}let`, (function(ΔᐃⲆΔΔ) {
				if (stop === 1) return;
				ΔᐃⲆΔΔ = ΔᐃⲆΔΔ.split(":");
				var ᐃᐃⵠΔⵠΔΔᐃᐃ, ᐃᐃᐃⵠⵠⵠΔⵠΔ, ⲆⲆⲆΔⵠᐃΔᐃΔ;
				var ⵠΔᐃⵠΔⲆⲆᐃΔ = 112;
				var ᐃΔⲆᐃⵠⲆᐃⵠⵠ, ⵠⲆⲆᐃᐃΔⵠΔᐃ, ⵠΔⵠᐃⲆᐃΔⵠᐃ;
				let ΔⲆⲆⵠᐃⲆⵠΔΔ = 180;
				var ΔⲆᐃᐃⲆⲆᐃⲆΔ, ΔⲆⲆΔΔΔⵠⲆᐃ, ⵠⵠⵠⲆᐃⵠⵠⵠⵠ;
				var ⵠⲆᐃⵠᐃᐃΔΔⵠ = 145;
				ΔⲆⲆⵠᐃⲆⵠΔΔ === ⵠⲆᐃⵠᐃᐃΔΔⵠ && (ⵠΔᐃⵠΔⲆⲆᐃΔ = 140);
				var ⲆᐃⲆᐃⵠᐃΔ = 202;
				if (ΔᐃΔⲆⵠ < ⲆᐃⲆᐃⵠᐃΔ) ⲆᐃⲆᐃⵠᐃΔ = 189;
				const ⵠⵠⵠⵠΔᐃⵠ = 29;
				const ΔΔⵠᐃⲆⲆΔⲆⵠ = Math.floor(ⵠⵠⵠⵠΔᐃⵠ[ⵠⵠⵠⵠΔᐃⵠ.ⵠⵠⵠⵠΔᐃⵠ]);
				var ΔⲆⵠΔⲆᐃΔⲆΔ = 83 - ᐃΔᐃⵠⲆ;
				var ⲆⵠᐃⵠΔⵠⵠ = 80;
				var ⵠⵠⵠⵠⲆⵠΔΔΔ = 210;
				var ᐃⲆΔᐃᐃᐃΔᐃᐃ = 10;
				var ΔⲆⲆⲆᐃΔⵠⲆⵠ = ΔⲆⵠᐃⲆⵠⵠ;
				var ᐃⲆⵠΔΔΔⵠⵠᐃ = 147;
				const ⵠᐃⲆᐃᐃᐃⲆ = 127;
				const ⵠⵠΔᐃⲆᐃⲆᐃⲆ = Math.floor(ⵠᐃⲆᐃᐃᐃⲆ[ⵠᐃⲆᐃᐃᐃⲆ.ⵠᐃⲆᐃᐃᐃⲆ]);
				var ᐃⵠᐃᐃⵠⵠⲆⲆⲆ = 164;
				ᐃⵠᐃᐃⵠⵠⲆⲆⲆ === ᐃⲆⵠΔΔΔⵠⵠᐃ && (ΔⲆⲆⲆᐃΔⵠⲆⵠ = 208);
				let ⲆⵠⲆΔⵠⵠᐃΔⲆ = 5 * 167;
				var ΔⲆΔᐃΔⲆΔⲆⵠ, ΔΔⲆᐃᐃΔⵠⵠΔ;
				var ΔΔⵠΔⵠᐃⲆⲆᐃ = 32;
				let ᐃᐃΔΔⵠΔⵠΔⵠ = 53;
				var ⲆΔⵠⵠⵠⲆᐃ = ᐃΔⵠᐃᐃΔᐃ;
				let ΔⲆᐃΔⵠᐃⵠⵠⵠ = 15;
				ΔᐃᐃΔ < ⲆΔⵠⵠⵠⲆᐃ && (ⲆΔⵠⵠⵠⲆᐃ = 58);
				ᐃᐃΔΔⵠΔⵠΔⵠ <= ΔΔⵠΔⵠᐃⲆⲆᐃ && (ᐃⲆΔᐃᐃᐃΔᐃᐃ = 151);
				1 == ⲆⵠᐃⵠΔⵠⵠ && (ⲆⵠᐃⵠΔⵠⵠ = 89); {
					var ᐃᐃΔⵠⵠⵠΔ = 9;
					ᐃᐃΔⵠⵠⵠΔ >= ᐃⲆΔⵠΔ && (ᐃᐃΔⵠⵠⵠΔ = 223);
					var ᐃᐃᐃᐃΔΔΔ = 153;
					ⲆⲆⲆᐃⵠ === ᐃᐃᐃᐃΔΔΔ && (ᐃᐃᐃᐃΔΔΔ = 125);
					const ⵠⵠⵠⲆⲆ = ΔᐃⲆΔΔ[0].split("_");
					let ΔΔΔΔΔΔⲆⵠⲆ = 298;
					var ⵠᐃⲆⵠΔᐃⲆⵠⵠ = 40;
					var ⲆΔᐃⲆᐃᐃⵠΔⵠ = {};
					var ⲆⲆⵠⲆᐃΔΔ = 245;
					if (ⲆⲆⵠⵠⲆ < ⲆⲆⵠⲆᐃΔΔ) ⲆⲆⵠⲆᐃΔΔ = ⵠⲆⲆⲆ;
					ⲆΔᐃⲆᐃᐃⵠΔⵠ.ᐃⵠᐃⲆᐃⲆⲆⲆᐃ = 3;
					var ⵠΔᐃᐃΔⲆΔ = ΔⵠⲆᐃΔ;
					if (5 <= ⵠΔᐃᐃΔⲆΔ) ⵠΔᐃᐃΔⲆΔ = 189;
					var ⲆᐃΔᐃΔⵠᐃᐃᐃ = 31;
					let ⵠⲆᐃΔⵠⲆⵠΔⵠ = ΔⲆⲆⵠⲆΔΔ + 22;
					const ⲆᐃⲆᐃⵠⲆⲆⲆⵠ = 173;
					let ᐃⵠΔᐃⵠΔⵠΔΔ = 0;
					var ᐃⵠⵠᐃΔⲆᐃᐃⵠ = 119;
					var ΔⲆⲆⵠΔⵠⲆᐃΔ = 32;
					var ⵠⲆⲆⲆΔⵠⵠ = 95;
					const ⵠⵠΔᐃΔΔⲆᐃᐃ = {};
					var ᐃᐃᐃᐃⵠⲆⵠⲆΔ = 220;
					var ΔⲆᐃΔΔⲆΔⵠⲆ = 39;
					var ΔⲆᐃⲆⲆⲆΔΔⲆ = 73;
					if (ΔⲆᐃΔΔⲆΔⵠⲆ == ΔⲆᐃⲆⲆⲆΔΔⲆ) ᐃᐃᐃᐃⵠⲆⵠⲆΔ = 136;
					ⵠⵠΔᐃΔΔⲆᐃᐃ.ⵠⵠⲆΔΔⵠΔΔΔ = ᐃⵠⵠⲆ;
					if (11 <= ⵠⲆⲆⲆΔⵠⵠ) ⵠⲆⲆⲆΔⵠⵠ = 39;
					var ⲆⲆⵠΔⵠᐃⵠΔⵠ = 3393;
					ⲆᐃⲆᐃⵠⲆⲆⲆⵠ > ΔⲆⲆⵠΔⵠⲆᐃΔ && (ⲆᐃΔᐃΔⵠᐃᐃᐃ = 25);
					var ΔⲆΔⵠΔΔⵠⵠᐃ = 254;
					let ΔᐃⲆⵠΔⲆᐃⵠⵠ = 89;
					const ⵠΔᐃⲆΔⵠᐃⵠΔ = 243;
					if (ⵠΔᐃⲆΔⵠᐃⵠΔ == ΔᐃⲆⵠΔⲆᐃⵠⵠ) ΔⲆΔⵠΔΔⵠⵠᐃ = 129;
					var ᐃⵠΔᐃⲆΔⵠⵠⲆ = 159;
					ᐃⵠΔᐃⲆΔⵠⵠⲆ.ⵠⵠΔᐃⵠⵠⵠⲆⲆ = 0;
					ⵠᐃⲆⵠΔᐃⲆⵠⵠ.ΔᐃⵠᐃΔᐃΔΔΔ = ⲆⲆᐃᐃⲆⵠⲆ;
					var ⲆⵠⵠᐃⲆⲆΔᐃⵠ, ΔⲆᐃᐃⲆΔⵠⵠⲆ;
					var ⵠᐃᐃΔᐃᐃⵠᐃⲆ = 16 + 14 << ΔⲆⲆᐃΔΔΔ;
					var ⵠⲆᐃⲆΔΔΔⵠΔ, ᐃⵠΔΔΔⲆΔⲆᐃ;
					var ⲆᐃⵠⵠᐃⵠⲆⵠⵠ = 176 - 71;
					var ⲆⲆⲆΔⵠⵠⲆⵠⵠ, ⵠⵠⲆⵠⵠⲆΔΔⲆ;
					const ᐃⵠⲆⲆⲆ = ⵠⵠⵠⲆⲆ[0] + "_";
					const ⲆⲆⲆⲆΔⲆᐃ = 98;
					const ⲆⲆᐃⵠΔⲆᐃᐃᐃ = Math.floor(ⲆⲆⲆⲆΔⲆᐃ[ⲆⲆⲆⲆΔⲆᐃ.ⲆⲆⲆⲆΔⲆᐃ]);
					var ΔᐃⲆⵠⵠⵠⵠᐃᐃ = 220;
					var ᐃⲆⵠⵠⵠΔⵠ = 53;
					ΔⵠⲆⲆ <= ᐃⲆⵠⵠⵠΔⵠ && (ᐃⲆⵠⵠⵠΔⵠ = 167);
					const ᐃᐃᐃⵠᐃⵠᐃᐃⲆ = 127;
					var ⲆⵠⲆᐃⵠⲆΔΔᐃ = 197;
					var ⵠⵠᐃΔΔΔⵠⲆΔ = 105;
					const ⵠΔⲆⲆⲆⲆᐃⵠᐃ = 241;
					if (ⵠⵠᐃΔΔΔⵠⲆΔ == ⵠΔⲆⲆⲆⲆᐃⵠᐃ) ⲆⵠⲆᐃⵠⲆΔΔᐃ = 52;
					let ⵠΔᐃΔᐃΔᐃᐃⵠ = 58;
					const ⲆΔⵠΔᐃΔⵠ = 34;
					const ⲆᐃⵠⵠᐃΔⵠⲆΔ = Math.floor(ⲆΔⵠΔᐃΔⵠ[ⲆΔⵠΔᐃΔⵠ.ⲆΔⵠΔᐃΔⵠ]);
					if (ᐃᐃᐃⵠᐃⵠᐃᐃⲆ === ⵠΔᐃΔᐃΔᐃᐃⵠ) ΔᐃⲆⵠⵠⵠⵠᐃᐃ = 204;
					const ΔⵠⲆⲆⵠΔΔⵠΔ = 37;
					const ᐃᐃⵠΔⵠⲆⲆⲆⵠ = ΔⵠⲆⲆⵠΔΔⵠΔ;
					var ⵠᐃΔᐃⵠⵠⵠᐃⲆ = 98;
					const ⵠⲆⲆΔΔⵠⵠΔⵠ = 189;
					const ᐃᐃⵠΔⵠⵠⵠⲆⲆ = 254;
					ᐃᐃⵠΔⵠⵠⵠⲆⲆ == ⵠⲆⲆΔΔⵠⵠΔⵠ && (ⵠᐃΔᐃⵠⵠⵠᐃⲆ = 250);
					const ⲆᐃⲆⵠ = Number(ⵠⵠⵠⲆⲆ[1]);
					var ⲆᐃΔⵠᐃᐃΔᐃᐃ = {};
					ⲆᐃΔⵠᐃᐃΔᐃᐃ.ΔΔⵠᐃᐃΔΔᐃᐃ = 3;
					var ΔΔᐃⵠᐃⲆⵠⵠⲆ;
					var ⲆΔⵠⵠΔᐃΔⲆᐃ = ⲆⵠᐃⲆⵠ + 230;
					var ⵠⲆⵠΔⲆᐃⲆⲆⲆ, ΔⵠⲆⵠⲆᐃⲆᐃΔ, ⲆⲆⵠⲆⲆΔᐃⲆΔ;
					var ΔΔΔΔΔⵠⵠⲆᐃ, ⲆⵠⲆᐃⵠΔⵠⵠΔ;
					const ΔⵠⵠᐃΔ = Math.abs(ⲆⲆⵠⲆⲆⵠᐃ(ⲆᐃⲆⵠ));
					const ⲆΔΔΔᐃⵠᐃΔᐃ = 104 * 131;
					ⲆΔⵠ.ΔⲆΔⵠⵠᐃᐃ = ᐃⵠⲆⲆⲆ + ΔⵠⵠᐃΔ;
					ⲆΔⵠ.ΔⲆⲆⵠⵠⵠⲆ = ΔⵠⵠᐃΔ
				}
				var ΔⵠᐃΔᐃⲆΔᐃΔ = 166;
				var ᐃᐃΔΔᐃⵠᐃⲆⲆ = 122;
				const ΔΔⲆᐃΔⵠᐃⲆᐃ = 133;
				let ⵠᐃⲆⲆᐃⵠΔⲆⵠ = 48;
				if (ⵠᐃⲆⲆᐃⵠΔⲆⵠ < ΔΔⲆᐃΔⵠᐃⲆᐃ) ᐃᐃΔΔᐃⵠᐃⲆⲆ = 20;
				var ⲆᐃⲆᐃᐃⵠⲆΔᐃ = 175;
				let ΔⵠΔⲆⵠΔᐃᐃⵠ = ⵠᐃᐃᐃᐃ;
				var ᐃᐃΔΔⵠΔⲆⲆΔ, ΔⲆᐃΔΔⵠΔᐃⲆ;
				var ᐃⲆⵠⵠⵠⵠΔ = 253;
				ᐃⲆⵠⵠⵠⵠΔ >= ⵠΔⲆᐃ && (ᐃⲆⵠⵠⵠⵠΔ = 31);
				var ⲆΔΔΔⵠᐃⵠΔⲆ = 204;
				ⲆΔΔΔⵠᐃⵠΔⲆ < ⲆᐃⲆᐃᐃⵠⲆΔᐃ && (ΔⵠᐃΔᐃⲆΔᐃΔ = 150);
				var ᐃᐃⲆⲆⲆⲆⲆᐃⲆ, ⵠᐃⵠΔΔⲆⲆΔⲆ, ⵠⵠᐃⲆⵠᐃⲆⲆⵠ, ΔⲆΔⵠⲆⵠᐃⲆᐃ;
				const ⵠΔΔᐃᐃΔᐃΔⲆ = 84;
				const ⵠⵠⵠᐃⵠⵠⲆⲆᐃ = 139; {
					var ΔΔⵠᐃⵠⵠⵠ = 55;
					if (3 === ΔΔⵠᐃⵠⵠⵠ) ΔΔⵠᐃⵠⵠⵠ = 188;
					var ΔⲆΔᐃΔᐃᐃΔΔ = 212;
					var ⵠⲆΔᐃΔᐃΔᐃΔ = 212;
					let ΔᐃᐃⵠⵠᐃΔᐃΔ = 140 - 99;
					var ΔᐃⵠΔᐃΔⵠΔⵠ, ΔⲆΔᐃⲆⵠᐃΔΔ;
					const ⵠⵠⵠⲆⲆ = ΔᐃⲆΔΔ[1].split("_");
					const ᐃⵠⲆⲆⲆ = ⵠⵠⵠⲆⲆ[ᐃⲆΔᐃ] + "_";
					var ⲆⲆᐃᐃᐃⲆᐃ = 3;
					let ⲆⵠΔⵠᐃⲆⵠΔⵠ = 70 * ⲆΔⲆΔ;
					var ΔⵠΔΔⵠΔⲆ = 178;
					if (0 == ΔⵠΔΔⵠΔⲆ) ΔⵠΔΔⵠΔⲆ = 139;
					if (ΔΔⵠⵠ === ⲆⲆᐃᐃᐃⲆᐃ) ⲆⲆᐃᐃᐃⲆᐃ = 185;
					const ⲆᐃⲆⵠ = Number(ⵠⵠⵠⲆⲆ[1]);
					const ⲆⵠΔΔᐃⵠᐃΔᐃ = 113 + 196;
					let ΔⵠⲆᐃΔⵠⲆΔⲆ = 115;
					var ⵠᐃᐃⲆⵠᐃΔ = 174;
					var ᐃᐃᐃⵠΔⲆⲆⲆⵠ = 152;
					const ᐃⵠⵠⲆⵠⵠⵠΔⵠ = 96;
					let ⲆⵠΔΔᐃⲆΔⵠⵠ = 171;
					ⲆⵠΔΔᐃⲆΔⵠⵠ == ᐃⵠⵠⲆⵠⵠⵠΔⵠ && (ᐃᐃᐃⵠΔⲆⲆⲆⵠ = 244);
					ⵠᐃᐃⲆⵠᐃΔ === ΔΔᐃⲆⵠ && (ⵠᐃᐃⲆⵠᐃΔ = 243);
					var ΔᐃΔΔΔⵠΔᐃᐃ, ⲆΔⵠⵠΔⲆᐃΔⵠ, ΔⲆⵠⲆⲆⵠᐃⵠⲆ;
					const ΔⵠⵠᐃΔ = Math.abs(ᐃⵠΔⵠᐃⵠΔ(ⲆᐃⲆⵠ));
					ⲆΔⵠ.ⵠⵠᐃⲆⲆΔⲆ = ᐃⵠⲆⲆⲆ + ΔⵠⵠᐃΔ;
					let ⵠⲆΔᐃⲆⲆᐃⲆΔ = 70 + 215 << 3;
					var ⲆⵠⵠᐃᐃΔⵠ = 109;
					let ᐃΔⲆᐃⲆⲆⲆⵠⵠ = {};
					ᐃΔⲆᐃⲆⲆⲆⵠⵠ.ⵠⲆⲆⲆⲆΔΔⵠᐃ = ΔΔᐃⵠΔ;
					var ⵠΔⵠᐃⲆΔᐃΔᐃ, ⲆΔⵠⲆⵠⲆᐃⲆⵠ;
					var ⵠΔⵠⵠⵠΔΔ = 24;
					11 <= ⵠΔⵠⵠⵠΔΔ && (ⵠΔⵠⵠⵠΔΔ = 41);
					var ⲆⲆⵠᐃᐃᐃⵠ = 77;
					if (ⵠᐃⵠⵠᐃᐃΔ === ⲆⲆⵠᐃᐃᐃⵠ) ⲆⲆⵠᐃᐃᐃⵠ = 59;
					const ⵠⲆⵠΔⵠᐃᐃᐃᐃ = 59 * 238;
					const ⵠᐃᐃⵠⵠΔᐃⵠⵠ = 236;
					ⵠᐃᐃⵠⵠΔᐃⵠⵠ.ⵠᐃⲆⲆⲆᐃᐃⵠᐃ = ⵠᐃⵠⲆⲆ;
					const ⵠⵠⲆΔⵠⵠⲆΔⲆ = 181 - 235;
					var ᐃⲆⵠⵠⲆⲆᐃ = 43;
					if (ⲆⲆⲆⲆΔ < ᐃⲆⵠⵠⲆⲆᐃ) ᐃⲆⵠⵠⲆⲆᐃ = 231;
					var ⵠᐃᐃⵠⲆⵠⵠⲆᐃ = {};
					ⵠᐃᐃⵠⲆⵠⵠⲆᐃ.ⲆⲆⲆΔⵠᐃΔΔⵠ = ⵠⲆⲆⲆ;
					const ΔⵠΔΔⲆⵠᐃΔᐃ = 5992;
					var ⲆᐃᐃⵠⲆⲆᐃΔΔ = 69 * 179;
					var ᐃᐃⵠᐃΔⵠᐃⲆⲆ, ⵠΔΔΔᐃⵠⵠⲆᐃ, ⵠᐃⲆⲆⲆⵠᐃᐃΔ;
					var ᐃᐃΔΔΔⵠⲆ = 40;
					if (ᐃⲆⵠⵠⲆΔⲆ < ᐃᐃΔΔΔⵠⲆ) ᐃᐃΔΔΔⵠⲆ = ⵠΔⵠⵠⵠ;
					var ᐃᐃⵠΔᐃᐃⲆΔΔ, ΔⲆᐃᐃᐃΔⲆⲆⵠ, ΔⲆᐃⲆⵠⵠⲆΔᐃ;
					var ⲆⲆⲆᐃᐃⵠⲆ = 225;
					var ΔΔⲆΔΔΔΔ = 33;
					if (ΔΔⲆΔΔΔΔ == ⵠᐃⲆΔⵠ) ΔΔⲆΔΔΔΔ = 176;
					var ⵠⵠΔⵠⲆΔΔᐃⵠ, ΔΔⲆⲆᐃᐃΔΔⵠ, ΔⲆⲆᐃⲆΔΔΔⲆ, ᐃⵠⲆⲆᐃⵠΔᐃⵠ;
					if (6 <= ⲆⲆⲆᐃᐃⵠⲆ) ⲆⲆⲆᐃᐃⵠⲆ = 235;
					4 === ⲆⵠⵠᐃᐃΔⵠ && (ⲆⵠⵠᐃᐃΔⵠ = 124);
					const ⵠᐃⲆⵠΔΔᐃⵠᐃ = 118;
					const ᐃΔⲆⲆᐃΔᐃᐃⵠ = 34 - 166;
					ⵠᐃⲆⵠΔΔᐃⵠᐃ.ⵠΔⲆᐃⲆΔᐃᐃᐃ = ⵠⲆⲆᐃᐃ;
					var ᐃⵠᐃᐃⲆⵠⵠⲆⵠ;
					ⲆΔⵠ.ΔᐃΔᐃΔⲆᐃⲆΔ = ΔⵠⵠᐃΔ;
					let ΔΔΔⵠᐃΔᐃΔᐃ = 24;
					var ⲆΔᐃⵠΔΔᐃ = 80;
					ᐃΔΔᐃⲆᐃΔ === ⲆΔᐃⵠΔΔᐃ && (ⲆΔᐃⵠΔΔᐃ = 175);
					var ΔΔΔᐃΔΔⲆᐃⵠ, ⵠᐃⲆΔⲆΔΔⲆⲆ, ᐃᐃⲆⲆⵠⲆᐃᐃᐃ, ⵠᐃⲆⵠⵠᐃᐃΔⲆ
				}
				const ΔΔΔⵠᐃΔⲆᐃΔ = 26 * 189;
				const ⲆΔᐃᐃⲆⵠⲆ = 235;
				const ⲆΔⵠⲆᐃΔⵠΔⵠ = Math.floor(ⲆΔᐃᐃⲆⵠⲆ[ⲆΔᐃᐃⲆⵠⲆ.ⲆΔᐃᐃⲆⵠⲆ]);
				var ᐃⵠⲆᐃⲆᐃⵠ = 113;
				if (0 === ᐃⵠⲆᐃⲆᐃⵠ) ᐃⵠⲆᐃⲆᐃⵠ = 27; {
					var ΔⵠⲆⵠⲆᐃᐃΔⲆ = 178;
					let ᐃⲆᐃⵠⵠⲆΔᐃⵠ = 27;
					var ⵠⲆΔᐃⵠⵠᐃⲆΔ = 234;
					ᐃⲆᐃⵠⵠⲆΔᐃⵠ === ⵠⲆΔᐃⵠⵠᐃⲆΔ && (ΔⵠⲆⵠⲆᐃᐃΔⲆ = 208);
					const ⵠⵠⵠⲆⲆ = ΔᐃⲆΔΔ[ⲆᐃᐃⲆ].split("_");
					var ᐃⲆⵠⵠⵠⵠⲆΔᐃ, ᐃΔⲆᐃᐃΔΔᐃⲆ;
					var ⵠᐃⲆⵠᐃΔᐃΔⲆ = 34;
					var ⲆᐃΔᐃΔΔⵠⵠⵠ = 10;
					let ᐃⲆⲆⵠᐃⵠΔΔΔ = 94;
					if (ᐃⲆⲆⵠᐃⵠΔΔΔ <= ⲆᐃΔᐃΔΔⵠⵠⵠ) ⵠᐃⲆⵠᐃΔᐃΔⲆ = 180;
					let ΔⵠⵠᐃᐃⲆΔⲆΔ = {};
					ΔⵠⵠᐃᐃⲆΔⲆΔ.ᐃⲆᐃⵠᐃΔΔΔⵠ = ΔᐃΔⲆⵠ;
					var ΔⲆΔⵠᐃᐃⵠⲆⲆ = 30;
					let ᐃᐃΔᐃⵠΔⲆΔᐃ = 153;
					const ⲆΔⲆΔᐃᐃᐃΔⵠ = 21;
					if (ᐃᐃΔᐃⵠΔⲆΔᐃ > ⲆΔⲆΔᐃᐃᐃΔⵠ) ΔⲆΔⵠᐃᐃⵠⲆⲆ = 133;
					var ᐃⵠΔΔⲆⵠᐃᐃⵠ, ⵠⵠᐃⵠⲆᐃⵠⲆⲆ, ᐃⲆⵠΔⵠᐃⵠᐃΔ, ᐃΔⲆⲆⵠᐃᐃᐃᐃ;
					var ⲆⵠⲆΔᐃΔⲆ = 169;
					11 <= ⲆⵠⲆΔᐃΔⲆ && (ⲆⵠⲆΔᐃΔⲆ = 147);
					const ⵠᐃᐃΔᐃⲆⵠⲆⵠ = 43;
					var ⲆᐃΔⲆΔᐃᐃᐃⲆ = 8712;
					var ΔᐃᐃᐃΔᐃΔΔΔ = 222;
					let ⵠΔᐃᐃⵠⵠΔⲆⵠ = 90;
					let ΔΔΔⵠⲆΔⵠⵠΔ = 137;
					if (ⵠΔᐃᐃⵠⵠΔⲆⵠ === ΔΔΔⵠⲆΔⵠⵠΔ) ΔᐃᐃᐃΔᐃΔΔΔ = 108;
					var ⲆⲆΔⲆⵠⵠᐃ = 192;
					8 == ⲆⲆΔⲆⵠⵠᐃ && (ⲆⲆΔⲆⵠⵠᐃ = 142);
					var ᐃⵠⲆⵠᐃΔΔᐃⵠ, ⵠⲆᐃⵠⵠΔΔⲆⲆ, ⵠᐃΔΔΔᐃⲆⵠⵠ;
					const ⲆᐃΔⲆⵠⵠΔΔΔ = ⵠᐃᐃΔᐃⲆⵠⲆⵠ;
					const ⲆΔΔᐃⵠⲆⲆᐃΔ = 48 * 130;
					var ᐃⲆΔᐃᐃⵠⲆᐃⲆ = 174;
					let ⲆΔⲆⵠⲆⵠⲆⵠⲆ = 78;
					const ΔΔᐃⲆΔΔⵠΔⲆ = 252;
					ⲆΔⲆⵠⲆⵠⲆⵠⲆ > ΔΔᐃⲆΔΔⵠΔⲆ && (ᐃⲆΔᐃᐃⵠⲆᐃⲆ = 35);
					let ⲆⲆᐃΔⵠⲆⲆⲆᐃ = 86;
					const ⵠΔΔⲆΔⵠᐃⵠⵠ = ΔⵠᐃΔⲆ + 117;
					var ⵠΔⲆᐃΔΔⲆ = 243;
					var ⵠΔⲆᐃⲆᐃᐃᐃⵠ = 133;
					ⵠΔⲆᐃⲆᐃᐃᐃⵠ.ⵠᐃⵠⲆΔⲆΔⲆⵠ = ΔⵠΔᐃΔ;
					var ΔΔⲆΔⲆⵠΔΔⲆ, ⵠⵠⲆⲆⵠΔⲆⵠⵠ, ⵠⵠΔⵠⲆⲆⲆⲆⲆ, ⵠΔⵠⲆⵠΔᐃⵠⲆ;
					const ΔᐃᐃᐃΔⲆⲆⲆᐃ = 131 - 133;
					var ᐃᐃⵠⵠᐃⵠΔΔᐃ, ΔⵠⲆΔⵠⵠⲆⲆⲆ;
					if (ᐃᐃΔⵠⲆ == ⵠΔⲆᐃΔΔⲆ) ⵠΔⲆᐃΔΔⲆ = 202;
					let ⲆΔⵠⵠⵠⲆⵠΔᐃ = 325;
					var ΔᐃⵠⲆᐃΔⵠⲆⲆ, ⲆⲆⵠΔⵠΔᐃΔⲆ, ΔᐃⲆⲆⵠⵠᐃᐃᐃ;
					const ᐃⵠⲆⲆⲆ = ⵠⵠⵠⲆⲆ[ⲆⲆΔ] + "_";
					let ⵠⵠᐃᐃΔⵠΔⵠⲆ = 218 + 212 << ᐃⵠᐃⵠⲆⵠΔ;
					var ΔⲆΔᐃΔΔⲆ = 113;
					ⵠΔⵠᐃⲆ <= ΔⲆΔᐃΔΔⲆ && (ΔⲆΔᐃΔΔⲆ = 61);
					const ⲆᐃⲆⵠ = Number(ⵠⵠⵠⲆⲆ[1]);
					let ⵠⲆΔΔⲆⲆⲆⵠᐃ = 73 - 53;
					var ᐃΔΔΔΔⵠⲆΔⵠ = 37;
					var ΔᐃⵠΔⵠᐃⲆᐃⲆ = ᐃΔΔΔΔⵠⲆΔⵠ;
					var ᐃᐃⲆᐃⵠⲆⲆᐃⵠ = 188;
					let ΔⲆⵠΔⲆΔⲆⵠᐃ = 11;
					var ⲆΔᐃⲆⲆⵠⲆⲆⵠ = 84;
					let ΔⵠᐃΔᐃⵠΔΔᐃ = 251;
					ΔⵠᐃΔᐃⵠΔΔᐃ.ⲆⲆΔⵠⵠᐃΔⲆΔ = 12;
					var ᐃΔⵠⲆᐃΔᐃ = 146;
					Ⲇⵠᐃᐃ === ᐃΔⵠⲆᐃΔᐃ && (ᐃΔⵠⲆᐃΔᐃ = 192);
					let ⵠⲆᐃᐃⵠⵠΔⵠΔ = 245;
					const ᐃΔⲆᐃⲆᐃΔΔⵠ = 43;
					ᐃΔⲆᐃⲆᐃΔΔⵠ > ⵠⲆᐃᐃⵠⵠΔⵠΔ && (ⲆΔᐃⲆⲆⵠⲆⲆⵠ = 102);
					var ΔⵠⲆⵠⵠΔᐃⵠⲆ = ⵠⵠⲆᐃ;
					if (ΔⵠⲆⵠⵠΔᐃⵠⲆ < ΔⲆⵠΔⲆΔⲆⵠᐃ) ᐃᐃⲆᐃⵠⲆⲆᐃⵠ = 59;
					var ⲆᐃⵠᐃⵠⲆᐃᐃΔ, ᐃΔⲆΔⲆⲆΔⵠⲆ, ⵠⵠᐃⵠΔⲆᐃⲆΔ;
					var ⵠᐃᐃⲆⵠⲆᐃΔⵠ;
					var ΔΔᐃᐃΔΔΔⵠᐃ = 131;
					var ⵠΔᐃᐃΔⵠΔⲆᐃ = 326;
					var ΔᐃⵠᐃⲆᐃΔ = 6;
					if (ᐃᐃΔⲆⵠ === ΔᐃⵠᐃⲆᐃΔ) ΔᐃⵠᐃⲆᐃΔ = 91;
					const ΔⵠⵠᐃΔ = Math.abs(ᐃⵠΔⵠᐃⵠΔ(ⲆᐃⲆⵠ));
					ⲆΔⵠ.ΔᐃⲆᐃⲆⲆᐃ = ᐃⵠⲆⲆⲆ + ΔⵠⵠᐃΔ;
					var ⵠⲆⵠᐃⲆⵠⵠⲆᐃ = 13;
					let ⵠⵠⲆᐃᐃⲆⵠⲆⵠ = 226;
					let ⵠᐃⵠⲆⵠⲆᐃⵠⲆ = 145;
					if (ⵠⵠⲆᐃᐃⲆⵠⲆⵠ <= ⵠᐃⵠⲆⵠⲆᐃⵠⲆ) ⵠⲆⵠᐃⲆⵠⵠⲆᐃ = 216;
					ⲆΔⵠ.ⲆⲆⲆⲆᐃⲆⵠᐃΔ = ΔⵠⵠᐃΔ;
					var ⲆⵠΔⵠᐃᐃⲆⵠΔ = 105;
					const ⵠⵠⲆΔⵠᐃᐃⲆⲆ = 114 + 26;
					const ᐃⵠᐃⵠⲆΔⲆⲆⲆ = 169;
					let ᐃⵠΔΔⵠᐃᐃⵠᐃ = 81;
					const ᐃⵠᐃⲆⵠᐃⵠᐃⲆ = 102;
					let ⲆⵠⵠⲆᐃⵠᐃⵠᐃ = 34 + 208 << ⵠⵠᐃⲆⲆᐃᐃ;
					if (ᐃⵠᐃⵠⲆΔⲆⲆⲆ > ᐃⵠᐃⲆⵠᐃⵠᐃⲆ) ⲆⵠΔⵠᐃᐃⲆⵠΔ = 148
				}
				var ΔᐃⵠΔⵠΔΔΔΔ = ΔΔⵠⲆΔ;
				var ⵠⵠΔᐃⲆⵠⵠᐃᐃ = 152;
				let ⵠᐃⲆᐃⲆⵠΔᐃⵠ = 88;
				let ⵠⵠⲆᐃⵠΔᐃⲆⲆ = 248 - 134;
				ⵠⵠΔᐃⲆⵠⵠᐃᐃ > ⵠᐃⲆᐃⲆⵠΔᐃⵠ && (ΔᐃⵠΔⵠΔΔΔΔ = 217);
				var ⵠΔᐃΔᐃⲆΔΔⵠ = 172;
				let ⲆⵠⵠⵠⵠⵠΔⵠⲆ = 18;
				var ⲆⲆᐃⲆΔⲆⲆΔΔ = 16;
				if (ⲆⵠⵠⵠⵠⵠΔⵠⲆ === ⲆⲆᐃⲆΔⲆⲆΔΔ) ⵠΔᐃΔᐃⲆΔΔⵠ = 29;
				var ⵠΔⲆᐃⵠⵠⲆⵠΔ = 164;
				var ᐃᐃᐃΔᐃΔⲆ = 85;
				var ⲆᐃⵠⲆⲆΔᐃⲆᐃ, ⲆΔⲆⵠⵠⲆΔⵠᐃ, ⲆⵠᐃΔⵠⵠⲆⲆᐃ;
				var ⵠⵠᐃⲆᐃⵠⲆᐃⵠ = 252;
				ⵠⵠᐃⲆᐃⵠⲆᐃⵠ.ᐃⵠⵠⲆᐃⵠᐃΔⲆ = ᐃⲆᐃⲆⲆ;
				if (ᐃᐃᐃΔᐃΔⲆ === 6) ᐃᐃᐃΔᐃΔⲆ = 103;
				ⵠΔⲆᐃⵠⵠⲆⵠΔ.ᐃΔⲆᐃᐃⲆᐃⲆⵠ = 4;
				let Ⲇᐃᐃᐃⵠᐃⵠᐃⵠ = {};
				Ⲇᐃᐃᐃⵠᐃⵠᐃⵠ.ⲆⵠⵠΔⵠᐃⵠⵠᐃ = 13;
				ΔᐃΔⲆⵠⵠⲆ(callback);
				let ΔᐃⲆᐃΔᐃΔΔⲆ = 4 * 229;
				let ⵠΔΔⵠⵠⲆⲆⵠᐃ = 36 << ⲆᐃⲆᐃᐃ;
				var ΔΔⲆⲆⲆᐃⲆⵠΔ = (117 + 139) * 16
			}), (function() {
				if (ΔᐃⵠⲆ === stop) return;
				if (ⲆⵠΔᐃⵠⵠᐃ === 1) {
					stop = 1;
					callback();
					return
				}
				Ⲇᐃⵠ.waiting = ᐃᐃⲆᐃΔ
			}))
		};
		this.ΔⲆⲆⵠΔᐃᐃ = function() {
			if (Ⲇᐃⵠ.waiting === false) {
				ⲆΔⵠ.reconnect.enabled = false;
				Ⲇᐃⵠ.waiting = ΔΔⲆΔⵠⲆⲆ;
				Ⲇᐃⵠ.ⵠΔΔⵠⲆⲆΔ(ⲆⵠΔΔⲆⵠᐃΔⲆ)
			}
		};
		var ᐃΔⵠⵠ = ᐃΔⵠΔ;
		var ⲆᐃᐃΔⲆ = 2;
		var Ⲇᐃⵠᐃ = 4;
		var ⲆⵠΔⲆⲆᐃᐃ = 8;
		var ᐃᐃⲆΔ = 16;
		var ⲆⲆⵠᐃΔⵠⵠ = 32;
		var ⵠⲆᐃᐃᐃΔⲆᐃⲆ = ⵠⵠΔΔ;
		var Δⵠⵠⵠ = 1;
		var ᐃⲆᐃΔ = 0;
		var ⵠΔⵠⲆᐃⵠⵠ = 1;
		var ⵠⲆΔΔ = Ⲇⵠⵠᐃ;
		var ⲆⲆᐃᐃ = ΔΔⵠ;
		if (ⲆⵠᐃΔᐃⵠⲆ.innerWidth < 1300) {
			this.ⵠⲆⵠΔⵠ = {
				id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[498]),
				style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[498]).style,
				input: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[412]),
				active: ⲆⲆᐃᐃ,
				position: Ⲇᐃⵠᐃ | ᐃΔⵠⵠ,
				view: ⲆΔⵠⵠⲆ,
				translate: {
					x: ⵠⵠᐃ,
					"ᐃᐃΔΔᐃ": 184,
					y: 0,
					"ᐃⵠΔⲆⵠ": 200
				}
			}
		} else {
			this.ⵠⲆⵠΔⵠ = {
				id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[498]),
				style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[498]).style,
				input: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[412]),
				active: ⲆⲆᐃᐃ,
				position: Ⲇᐃⵠᐃ | ᐃᐃⲆΔ,
				view: ⲆΔⵠⵠⲆ,
				translate: {
					"ᐃᐃΔΔᐃ": 184,
					"ᐃⵠΔⲆⵠ": -180,
					y: 0,
					x: 0
				}
			}
		}
		this.ⵠⲆⵠΔⵠ.id[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("keyup", (function(event) {
			event.preventDefault();
			event.keyCode == 13 && !Ⲇᐃⵠ.waiting && !Ⲇᐃⵠ.ΔⵠⲆⵠⵠⲆΔΔΔ && Ⲇᐃⵠ.ΔⲆⲆⵠΔᐃᐃ()
		}));
		this.ⵠⲆⵠΔⵠ.input.value = ᐃΔⲆⲆ.get("starve_nickname") ? ᐃΔⲆⲆ.get("starve_nickname") : "";
		this.ΔΔΔΔᐃΔⲆⲆⵠ = {
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("account_nickname_block"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("account_nickname_block").style,
			input: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[366]),
			active: ⵠⲆΔΔ,
			position: Ⲇᐃⵠᐃ | ᐃᐃⲆΔ,
			view: ⵠᐃᐃΔᐃ,
			translate: {
				"ᐃⵠΔⲆⵠ": -122,
				y: 0,
				x: ⵠⵠᐃ,
				"ᐃᐃΔΔᐃ": 110
			}
		};
		ⲆⵠᐃΔᐃⵠⲆ.innerWidth < 1300 ? this.ᐃⵠⲆᐃⲆ = {
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[291]),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[291]).style,
			active: ⲆⲆᐃᐃ,
			position: Ⲇᐃⵠᐃ | ᐃΔⵠⵠ,
			view: ⲆΔⵠⵠⲆ,
			translate: {
				y: Ⲇⵠⵠᐃ,
				"ᐃⵠΔⲆⵠ": 208,
				x: ΔᐃⲆⲆ,
				"ᐃᐃΔΔᐃ": 225
			}
		} : this.ᐃⵠⲆᐃⲆ = {
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[291]),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[291]).style,
			active: ⲆⲆᐃᐃ,
			position: Ⲇᐃⵠᐃ | ᐃᐃⲆΔ,
			view: ⲆΔⵠⵠⲆ,
			translate: {
				y: 0,
				"ᐃᐃΔΔᐃ": 225,
				x: 0,
				"ᐃⵠΔⲆⵠ": -180
			}
		};
		this.ΔⵠⲆᐃ = {
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("leaderboard"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("leaderboard").style,
			active: ⵠⲆΔΔ,
			position: Ⲇᐃⵠᐃ | ᐃᐃⲆΔ,
			view: ⵠⵠⲆⲆᐃ,
			translate: {
				"ᐃᐃΔΔᐃ": 190,
				y: Ⲇⵠᐃ,
				x: ᐃⲆᐃ,
				"ᐃⵠΔⲆⵠ": -294.5
			}
		};
		this.ⵠᐃᐃⲆΔΔΔⵠⵠ = {
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("stats_box"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("stats_box").style,
			active: ⵠⲆΔΔ,
			position: Ⲇᐃⵠᐃ | ᐃᐃⲆΔ,
			view: ⵠᐃᐃΔᐃ,
			translate: {
				x: 0,
				y: 0,
				"ᐃᐃΔΔᐃ": 187,
				"ᐃⵠΔⲆⵠ": 125
			}
		};
		this.ⵠΔⲆⵠᐃΔᐃⵠⲆ = {
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("serverAddressBlock"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("serverAddressBlock").style,
			input: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[27]),
			active: ⵠⲆΔΔ,
			position: Ⲇᐃⵠᐃ | ᐃᐃⲆΔ,
			view: ⵠⲆⵠΔΔ,
			translate: {
				y: ⵠᐃⵠ,
				x: 0,
				"ᐃⵠΔⲆⵠ": -260,
				"ᐃᐃΔΔᐃ": 350
			}
		};
		ⲆΔ = 0;
		this.ΔΔΔΔΔ = [];
		this.ΔΔΔΔΔ[ⲆΔ++] = this.ⵠⲆⵠΔⵠ;
		this.ΔΔΔΔΔ[ⲆΔ++] = this.ᐃⵠⲆᐃⲆ;
		this.ΔΔΔΔΔ[ⲆΔ++] = this.ΔⵠⲆᐃ;
		this.ΔΔΔΔΔ[ⲆΔ++] = this.ΔΔΔΔᐃΔⲆⲆⵠ;
		this.ΔΔΔΔΔ[ⲆΔ++] = this.ⵠᐃᐃⲆΔΔΔⵠⵠ;
		this.ΔΔΔΔΔ[ⲆΔ++] = this.ⵠΔⲆⵠᐃΔᐃⵠⲆ;
		ⲆΔ = 0;
		this.ⵠΔⵠⵠ = [];
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ⵠⲆⲆᐃⵠⲆⵠ, ⲆⲆᐃᐃ, ⲆⲆᐃⲆ, 0, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ⵠⵠΔΔᐃΔⲆ, ⵠⲆΔΔ, 0, 0, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ᐃΔⲆΔᐃΔⲆ, ⵠⲆΔΔ, 0, ⵠⵠᐃ, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ⵠⲆⵠᐃⵠΔⲆ, ⵠⲆΔΔ, 0, 0, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ΔⲆⵠⲆΔⲆᐃ, ⵠⲆΔΔ, ⵠⵠⵠ, ΔᐃⲆⲆ, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ᐃΔΔⵠⲆⲆᐃ, ⵠⲆΔΔ, ⵠΔⵠᐃ, 0, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ⲆⵠΔⲆⲆᐃⲆ, ⵠⲆΔΔ, 0, 0, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ⵠⵠᐃⵠⵠΔⵠ, ⵠⲆΔΔ, ⵠᐃΔ, 0, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ⵠΔⲆΔⲆⲆᐃ, ⵠⲆΔΔ, ⵠᐃⵠ, 0, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ⵠΔΔⲆⵠⲆᐃ, ⵠⲆΔΔ, ᐃⲆΔ, Ⲇⵠᐃ, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ΔΔⲆⲆᐃⵠΔ, ⵠⲆΔΔ, Ⲇⵠᐃ, ΔᐃⲆⲆ, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ⵠᐃⲆᐃⲆⲆⲆ, ⵠⲆΔΔ, 0, 0, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ⵠᐃΔᐃⲆᐃΔ, ⵠⲆΔΔ, 0, ⲆⲆᐃⲆ, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ΔᐃΔⲆΔΔᐃ, ⵠⲆΔΔ, 0, 0, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ᐃΔⵠΔⵠΔⲆ, ⵠⲆΔΔ, 0, ⵠΔⵠᐃ, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ᐃΔᐃⵠⵠᐃᐃ, ⵠⲆΔΔ, 0, ⵠᐃⵠ, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ΔⵠⲆΔΔΔΔ, ⵠⲆΔΔ, 0, ⵠΔΔⲆ, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ⵠΔⲆⵠᐃⵠⵠ, ⵠⲆΔΔ, ⵠΔΔⲆ, ᐃⲆΔ, ᐃΔⵠⵠ);
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ᐃΔΔΔⵠΔⲆ, ⵠⲆΔΔ, 0, ⵠⵠⲆΔ, ᐃΔⵠⵠ);
		if (1300 > ⲆⵠᐃΔᐃⵠⲆ.innerWidth) this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⵠⲆⵠΔᐃΔⵠ, ⲆⲆᐃᐃ, 200, 100, Ⲇᐃⵠᐃ | ᐃΔⵠⵠ);
		else this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⵠⲆⵠΔᐃΔⵠ, ⲆⲆᐃᐃ, -753 / ΔΔⲆΔ, 100, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⲆΔⵠⵠⲆ;
		this.ⵠΔⵠⵠ[ⲆΔ++] = ΔΔᐃᐃ(Δᐃ.ᐃⵠΔⲆΔᐃᐃ, ⲆⲆᐃᐃ, 403, -ⵠΔⲆⲆΔ, ⲆᐃᐃΔⲆ);
		if (ⲆⵠᐃΔᐃⵠⲆ.innerWidth > 1300) {
			this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⵠⵠΔⵠⲆⲆⲆ, ⲆⲆᐃᐃ, -885 / 4, -319 / ⵠⵠΔⵠ, ⲆⵠΔⲆⲆᐃᐃ | ᐃᐃⲆΔ);
			this.ⵠΔⵠⵠ[ⲆΔ++].view = ⲆΔⵠⵠⲆ
		}
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⲆⲆᐃⵠⵠᐃⵠ, ⵠⲆΔΔ, -1293 / 4, 100, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⲆⲆⲆΔΔⲆⵠ, ⵠⲆΔΔ, -1425 / ΔᐃⲆᐃⵠ, 100, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ΔᐃΔᐃⵠ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ΔΔᐃⲆⲆⲆⲆ, ⵠⲆΔΔ, -905 / 4, 50, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⲆⵠΔⵠΔ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⵠⵠⲆΔⲆⲆᐃ, ⵠⲆΔΔ, -1608 / 4, 130, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠΔΔⵠΔ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⲆΔⲆⵠⲆᐃΔ, ⵠⲆΔΔ, -1117 / 4, 130, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ᐃⵠᐃΔⲆ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⲆⲆᐃᐃΔⵠᐃ, ⵠⲆΔΔ, -1222 / 4, 130, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⲆᐃΔΔⵠ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ᐃΔⲆⵠΔΔⵠ, ⵠⲆΔΔ, -1222 / ᐃΔⵠᐃⲆ, ⵠⵠΔΔᐃ, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠⲆⵠΔΔ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⵠⲆᐃᐃΔⲆⵠ, ⵠⲆΔΔ, -Δᐃ.ⵠⲆᐃᐃΔⲆⵠ.width / ⵠⲆᐃⲆ - 350, -ᐃΔᐃᐃΔⲆᐃ, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⲆⲆⵠⵠΔᐃⵠ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ᐃⵠⵠᐃᐃⵠⵠ, ⵠⲆΔΔ, -1497 / ⵠΔᐃⲆ, 110, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠᐃᐃⲆⲆⵠᐃ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⵠⵠⲆⲆᐃᐃⲆ, ⵠⲆΔΔ, -1226 / 4, 100, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⵠⵠΔⲆᐃⵠⲆ, ⵠⲆΔΔ, -1381 / ᐃᐃᐃᐃΔ, 80, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⲆΔΔᐃⵠ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ᐃⵠΔᐃⵠⲆᐃ, ⵠⲆΔΔ, -1542 / 4, 150, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠⵠΔΔΔΔⵠ;
		var ΔⵠᐃⵠΔ = 3.6;
		var ⵠᐃⵠⲆΔ = this.ⵠΔⲆΔⲆⵠⵠ([
			[ᐃ[199], ⵠⵠⲆⲆ * ΔⵠᐃⵠΔ],
			[ᐃ[143], ΔⵠᐃⵠΔ * ⲆⲆᐃᐃⵠ],
			[ᐃ[155], 30 * ΔⵠᐃⵠΔ],
			["#d88e23", ΔⵠᐃⵠΔ * 57]
		]);
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(ⵠᐃⵠⲆΔ, ⵠⲆΔΔ, -ⵠᐃⵠⲆΔ.width / 4, 178, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠⵠΔΔΔΔⵠ;
		this.ⵠⵠⵠᐃⵠΔⲆⲆⵠ = function(ΔᐃⵠⵠⲆΔⲆⲆⲆ, ⲆⵠΔⵠ, ⵠΔⲆΔᐃΔⵠ) {
			Ⲇᐃⵠ.ᐃⲆⲆΔΔ = ⲆⲆᐃⵠ;
			Ⲇᐃⵠ.ΔᐃᐃΔⲆΔᐃ = 0;
			Ⲇᐃⵠ.ΔⵠᐃΔⵠΔⲆ = 0;
			Ⲇᐃⵠ.ⵠᐃⵠᐃᐃⲆⵠ = ΔᐃⵠⵠⲆΔⲆⲆⲆ;
			Ⲇᐃⵠ.ⲆⲆΔⵠⲆⵠᐃ = ⲆⵠΔⵠ;
			var ⵠⵠΔ;
			var ᐃⲆ = 0;
			if (ⵠᐃⵠ === ⲆⵠΔⵠ) {
				for (ᐃⲆ = 0; ᐃⲆ < ⲆⲆΔⲆ.Δⵠᐃⵠⵠ.length; ᐃⲆ++) {
					if (ⵠΔⲆΔᐃΔⵠ === ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[ᐃⲆ].id) break
				}
				ⵠⵠΔ = ⲆⲆΔⲆ.Δⵠᐃⵠⵠ[ᐃⲆ];
				Ⲇᐃⵠ.unlock.ⵠⲆᐃᐃ[ᐃⲆ] = 1
			} else if (ΔΔⵠ === ⲆⵠΔⵠ) {
				for (ᐃⲆ = 0; ᐃⲆ < ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ.length; ᐃⲆ++) {
					if (ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ[ᐃⲆ].id === ⵠΔⲆΔᐃΔⵠ) break
				}
				ⵠⵠΔ = ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ[ᐃⲆ];
				Ⲇᐃⵠ.unlock.ⵠΔⵠⲆⲆ[ᐃⲆ] = 1
			} else if (ⲆⵠΔⵠ === 2) {
				for (ᐃⲆ = 0; ⲆⲆΔⲆ.ⲆⵠⲆΔ.length > ᐃⲆ; ᐃⲆ++) {
					if (ⵠΔⲆΔᐃΔⵠ === ⲆⲆΔⲆ.ⲆⵠⲆΔ[ᐃⲆ].id) break
				}
				ⵠⵠΔ = ⲆⲆΔⲆ.ⲆⵠⲆΔ[ᐃⲆ];
				Ⲇᐃⵠ.unlock.ᐃΔⲆΔΔ[ᐃⲆ] = 1
			} else if (3 === ⲆⵠΔⵠ) {
				for (ᐃⲆ = ⵠⵠᐃ; ⲆⲆΔⲆ.ⵠΔⲆΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
					if (ⵠΔⲆΔᐃΔⵠ === ⲆⲆΔⲆ.ⵠΔⲆΔᐃ[ᐃⲆ].id) break
				}
				ⵠⵠΔ = ⲆⲆΔⲆ.ⵠΔⲆΔᐃ[ᐃⲆ];
				Ⲇᐃⵠ.unlock.ⲆⵠᐃⲆᐃ[ᐃⲆ] = ⵠⲆⵠⲆ
			} else if (ᐃᐃΔⵠⲆ === ⲆⵠΔⵠ) {
				for (ᐃⲆ = 0; ⲆⲆΔⲆ.ΔⵠΔⵠⵠ.length > ᐃⲆ; ᐃⲆ++) {
					if (ⵠΔⲆΔᐃΔⵠ === ⲆⲆΔⲆ.ΔⵠΔⵠⵠ[ᐃⲆ].id) break
				}
				ⵠⵠΔ = ⲆⲆΔⲆ.ΔⵠΔⵠⵠ[ᐃⲆ];
				Ⲇᐃⵠ.unlock.ᐃΔⲆⵠⲆ[ᐃⲆ] = 1;
				Ⲇᐃⵠ.unlock.ΔᐃΔⵠΔ[ᐃⲆ] = ᐃⵠᐃᐃ
			}
			Ⲇᐃⵠ.ΔⵠᐃΔⲆΔⵠ = ᐃⲆ;
			Ⲇᐃⵠ.ⲆⵠⵠᐃᐃⲆⵠ = ᐃΔΔⲆⲆ("by " + ⵠⵠΔ.ᐃΔⲆ, ᐃ[48], ᐃ[103], 40, 500, undefined, 30, 24, ⵠⵠᐃⵠΔ, undefined, undefined, undefined, ᐃ[352], 24);
			Ⲇᐃⵠ.ⵠᐃᐃⲆΔᐃΔ = ᐃΔΔⲆⲆ(ⵠⵠΔ.name, ᐃ[48], ᐃ[103], 60, 600, undefined, 30, 24, Ⲇᐃᐃⵠᐃ, undefined, undefined, ⵠⵠᐃⵠΔ, ᐃ[352], ⵠᐃᐃᐃᐃⵠᐃ)
		};
		this.ᐃⲆⲆΔΔ = 0;
		this.ΔᐃᐃΔⲆΔᐃ = 0;
		this.ⵠᐃⵠᐃᐃⲆⵠ = 0;
		this.ⲆⲆΔⵠⲆⵠᐃ = 0;
		this.ΔⵠᐃΔⵠΔⲆ = 0;
		this.ⲆⵠⵠᐃᐃⲆⵠ = ᐃΔᐃⲆⵠ;
		this.ⵠᐃᐃⲆΔᐃΔ = ⵠⵠᐃⵠΔ;
		var ᐃⵠᐃⲆᐃΔᐃᐃⲆ = 262 - 260 / ᐃᐃΔⵠⲆ;
		var ᐃⵠᐃⵠΔᐃΔᐃΔ = -260 / ⵠΔⲆᐃⲆ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ΔⵠⵠⲆⲆΔⲆ, ⵠⲆΔΔ, -1542 / ΔΔⲆΔ, 150, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ΔⵠⵠⲆⲆⲆⲆ;
		var ⵠᐃⵠⲆΔ = this.ⵠΔⲆΔⲆⵠⵠ([
			[ᐃ[264], ᐃΔᐃΔ * ΔⵠᐃⵠΔ],
			[ᐃ[199], ΔⵠᐃⵠΔ * 10],
			[ᐃ[143], 30 * ΔⵠᐃⵠΔ],
			[ᐃ[155], 57 * ΔⵠᐃⵠΔ]
		]);
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(ⵠᐃⵠⲆΔ, ⵠⲆΔΔ, -ⵠᐃⵠⲆΔ.width / ΔΔΔⵠ, 178, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ΔⵠⵠⲆⲆⲆⲆ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⵠΔⵠᐃⲆᐃΔ, ⵠⲆΔΔ, -1542 / 4, 150, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ᐃᐃᐃⲆᐃᐃΔ;
		var ⵠᐃⵠⲆΔ = this.ⵠΔⲆΔⲆⵠⵠ([
			["#d33a2a", ΔⵠᐃⵠΔ * 3],
			[ᐃ[264], ΔⵠᐃⵠΔ * ΔΔⲆΔΔ],
			[ᐃ[199], ΔⵠᐃⵠΔ * 30],
			[ᐃ[143], 57 * ΔⵠᐃⵠΔ]
		]);
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(ⵠᐃⵠⲆΔ, ⵠⲆΔΔ, -ⵠᐃⵠⲆΔ.width / 4, 178, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ᐃᐃᐃⲆᐃᐃΔ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⵠⲆⲆⲆⲆⲆᐃ, ⵠⲆΔΔ, -1542 / ⵠⵠⵠᐃⲆ, 150, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ΔⵠⵠⵠⲆᐃⲆ;
		var ⵠᐃⵠⲆΔ = this.ⵠΔⲆΔⲆⵠⵠ([
			[ᐃ[199], ⵠᐃⵠΔ * ΔⵠᐃⵠΔ],
			[ᐃ[143], ΔⵠᐃⵠΔ * 10],
			[ᐃ[155], ΔⵠᐃⵠΔ * 30],
			["#d88e23", 57 * ΔⵠᐃⵠΔ]
		]);
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(ⵠᐃⵠⲆΔ, ⵠⲆΔΔ, -ⵠᐃⵠⲆΔ.width / ᐃᐃᐃᐃΔ, 178, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ΔⵠⵠⵠⲆᐃⲆ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ΔᐃⲆⵠⵠᐃᐃ, ⵠⲆΔΔ, -1542 / ΔΔⲆΔ, 150, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠΔⵠΔⲆᐃΔ;
		var ⵠᐃⵠⲆΔ = this.ⵠΔⲆΔⲆⵠⵠ([
			[ᐃ[264], ΔⵠᐃⵠΔ * 3],
			[ᐃ[199], ⵠΔⵠᐃⵠ * ΔⵠᐃⵠΔ],
			[ᐃ[143], 30 * ΔⵠᐃⵠΔ],
			[ᐃ[155], 57 * ΔⵠᐃⵠΔ]
		]);
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(ⵠᐃⵠⲆΔ, ⵠⲆΔΔ, -ⵠᐃⵠⲆΔ.width / ᐃΔΔΔⲆ, 178, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠΔⵠΔⲆᐃΔ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ᐃᐃⵠΔΔⲆⲆ, ⵠⲆΔΔ, -1542 / 4, 150, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⲆΔᐃΔⵠⵠⵠ;
		var ⵠᐃⵠⲆΔ = this.ⵠΔⲆΔⲆⵠⵠ([
			["#d33a2a", 3 * ΔⵠᐃⵠΔ],
			[ᐃ[264], ΔⵠᐃⵠΔ * ⵠᐃⲆⲆΔ],
			[ᐃ[199], ΔⵠᐃⵠΔ * 30],
			[ᐃ[143], 57 * ΔⵠᐃⵠΔ]
		]);
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(ⵠᐃⵠⲆΔ, ⵠⲆΔΔ, -ⵠᐃⵠⲆΔ.width / 4, 178, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⲆΔᐃΔⵠⵠⵠ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ΔⲆⵠⵠⲆΔᐃ, ⵠⲆΔΔ, -1366 / ΔΔᐃⵠΔ, ΔᐃⵠΔⲆ, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⲆⵠᐃⵠⵠⲆΔ, ⵠⲆΔΔ, -1366 / ΔΔΔⵠ, 100, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⵠΔⵠᐃⵠⵠⵠ, ⵠⲆΔΔ, -1366 / ⵠΔᐃⲆ, 100, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ᐃᐃⲆⵠᐃⲆⵠ, ⵠⲆΔΔ, -1366 / 4, ᐃΔⲆᐃⵠ, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⲆⵠΔⲆΔᐃΔ, ⵠⲆΔΔ, -1366 / 4, ΔΔⵠⵠⲆ, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⲆⵠΔᐃⲆⵠΔ, ⵠⲆΔΔ, -1366 / 4, ᐃᐃΔⵠⵠ, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		ⵠᐃⲆⵠⲆᐃⲆ = ⲆΔ++;
		this.ⵠΔⵠⵠ[ⵠᐃⲆⵠⲆᐃⲆ] = ΔΔᐃᐃ(Δᐃ.ⵠᐃⲆⵠⲆᐃⲆ, ⵠⲆΔΔ, 908 / ᐃⵠΔⲆ + 30, ⵠΔΔⲆ, Ⲇᐃⵠᐃ);
		ⲆⵠⲆΔᐃΔΔ = ⲆΔ++;
		this.ⵠΔⵠⵠ[ⲆⵠⲆΔᐃΔΔ] = ΔΔᐃᐃ(Δᐃ.ⲆⵠⲆΔᐃΔΔ, ⵠⲆΔΔ, 752.5 + 60, ⵠᐃⵠ, Ⲇᐃⵠᐃ);
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⵠᐃᐃΔᐃΔⵠ, ⵠⲆΔΔ, -758 / 4, -ΔΔⵠΔⵠ, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ΔᐃᐃⵠⵠⵠⲆ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ΔⲆΔⲆΔⲆⵠ, ⵠⲆΔΔ, -758 / 4, -5, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ᐃⵠΔⵠⵠᐃᐃ;
		ⵠᐃᐃⵠⲆᐃᐃ = ⲆΔ++;
		this.ⵠΔⵠⵠ[ⵠᐃᐃⵠⲆᐃᐃ] = ΔΔᐃᐃ(Δᐃ.ᐃⲆⵠᐃᐃⲆⵠ, ⲆⲆᐃᐃ, 93, 30, Ⲇᐃⵠᐃ);
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ΔΔΔⵠⲆⲆΔ, ⵠⲆΔΔ, -692 / ⵠΔⲆᐃⲆ, 110, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ⲆⵠⲆΔⲆⵠᐃ;
		this.ⵠΔⵠⵠ[ⲆΔ] = ΔΔᐃᐃ(Δᐃ.ⵠⵠⲆⵠΔⵠΔ, ⵠⲆΔΔ, -692 / 4, 110, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ);
		this.ⵠΔⵠⵠ[ⲆΔ++].view = ᐃⵠᐃⲆΔΔΔ;
		ⲆΔ = 0;
		this.buttons = [];
		this.buttons[ⲆΔ] = ΔᐃⲆ(50, 57, "", [Δᐃ.ⲆⲆⵠᐃⵠⵠⲆ, Δᐃ.ⵠⲆᐃᐃΔⵠᐃ, Δᐃ.ΔⲆᐃΔΔᐃⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			if (Ⲇᐃⵠ.ⲆⲆᐃΔⲆ()) ⲆΔᐃⵠ(ⲆΔΔᐃⵠ);
			else ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), 320, ⲆⲆΔ, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		ⲆΔ++;
		if (ⲆⵠᐃΔᐃⵠⲆ.innerWidth < 1300) this.buttons[ⲆΔ] = ΔᐃⲆ(202, 97, "", [Δᐃ.ⵠⵠⵠΔΔΔⵠ, Δᐃ.ᐃᐃⲆⵠΔⵠⲆ, Δᐃ.ΔΔΔᐃⵠⵠᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, this.ΔⲆⲆⵠΔᐃᐃ, 462, 235, Ⲇᐃⵠᐃ | ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		else this.buttons[ⲆΔ] = ΔᐃⲆ(202, 97, "", [Δᐃ.ⵠⵠⵠΔΔΔⵠ, Δᐃ.ᐃᐃⲆⵠΔⵠⲆ, Δᐃ.ΔΔΔᐃⵠⵠᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, this.ΔⲆⲆⵠΔᐃᐃ, 74, 235, Ⲇᐃⵠᐃ | ᐃᐃⲆΔ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ].view = ⲆΔⵠⵠⲆ;
		ⲆΔ++;
		ⲆⵠᐃΔᐃⵠⲆ.innerWidth > 1300 && (this.buttons[ⲆΔ] = ΔᐃⲆ(355, 168, "", [Δᐃ.ᐃΔΔᐃⲆⲆⲆ, Δᐃ.ᐃΔΔᐃⲆⲆⲆ, Δᐃ.ᐃΔΔᐃⲆⲆⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("./changelog.html", ᐃ[115])
		}), -195, -115, ⲆⵠΔⲆⲆᐃᐃ | ᐃᐃⲆΔ, ⲆⲆᐃᐃ), this.buttons[ⲆΔ++].view = ⲆΔⵠⵠⲆ, this.buttons[ⲆΔ] = ΔᐃⲆ(355, 168, "", [Δᐃ.ΔⵠᐃⵠΔΔⵠ, Δᐃ.ΔⵠᐃⵠΔΔⵠ, Δᐃ.ΔⵠᐃⵠΔΔⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("https://taming.io", ᐃ[115])
		}), ΔᐃⲆⲆⲆΔⲆ, -115, ⲆⵠΔⲆⲆᐃᐃ | ᐃᐃⲆΔ, ⲆⲆᐃᐃ), this.buttons[ⲆΔ++].view = ⲆΔⵠⵠⲆ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(80, 80, "", [Δᐃ.ⲆⲆᐃⲆⵠᐃᐃ, Δᐃ.ⵠᐃΔⲆⲆᐃΔ, Δᐃ.ᐃᐃΔⲆⲆᐃᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("https://lapamauve.creator-spring.com/", ᐃ[115])
		}), 380, ΔⲆΔΔᐃ, ⲆᐃᐃΔⲆ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(80, 80, "", [Δᐃ.ᐃⲆΔΔΔⲆΔ, Δᐃ.ⲆⲆⵠⲆⵠΔΔ, Δᐃ.ᐃⲆⲆⵠⲆⵠⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("https://discord.gg/starveio", ᐃ[115])
		}), 330, ΔⵠΔᐃΔ, ⲆᐃᐃΔⲆ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(80, 80, "", [Δᐃ.ᐃΔΔᐃᐃΔⵠ, Δᐃ.ⵠⵠⵠΔᐃⵠⵠ, Δᐃ.ΔᐃΔⵠⵠⵠᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("https://reddit.com/r/starveio", ᐃ[115])
		}), 280, 10, ⲆᐃᐃΔⲆ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(80, 80, "", [Δᐃ.ⲆΔⵠⵠΔⲆΔ, Δᐃ.ΔⵠᐃⲆΔΔᐃ, Δᐃ.ᐃⵠᐃᐃᐃⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("https://starveiopro.wikia.com/wiki/", ᐃ[115])
		}), 230, 10, ⲆᐃᐃΔⲆ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(80, 80, "", [Δᐃ.ⵠⲆⵠⲆᐃᐃⲆ, Δᐃ.ⵠⵠⵠᐃΔᐃΔ, Δᐃ.ⲆⲆᐃΔⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("https://www.facebook.com/LapaMauve/", ᐃ[115])
		}), 155, ᐃⲆᐃⲆⲆ, ⲆᐃᐃΔⲆ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(80, 80, "", [Δᐃ.ᐃᐃⲆᐃΔⵠⲆ, Δᐃ.ⲆᐃᐃΔⵠᐃᐃ, Δᐃ.ⵠⵠᐃΔᐃᐃᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("https://twitter.com/lapamauve", ᐃ[115])
		}), 105, ΔⵠⲆⵠⵠ, ⲆᐃᐃΔⲆ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(80, 80, "", [Δᐃ.ΔⵠᐃᐃΔⲆⵠ, Δᐃ.ⵠΔᐃΔΔⵠᐃ, Δᐃ.ᐃⵠΔⲆⲆᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("https://www.youtube.com/@lapamauveofficial", ᐃ[115])
		}), 55, ΔⵠᐃⲆΔ, ⲆᐃᐃΔⲆ, ⲆⲆᐃᐃ);
		ᐃᐃᐃⵠᐃⲆⲆ = ⲆΔ++;
		this.buttons[ᐃᐃᐃⵠᐃⲆⲆ] = ΔᐃⲆ(232, 142, "", [Δᐃ.ΔᐃΔⵠⵠΔⵠ, Δᐃ.ΔⵠⵠⲆⲆΔΔ, Δᐃ.ᐃⵠⲆᐃⲆᐃᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠⵠⲆⲆᐃ);
			ⵠⵠᐃᐃΔ(ⲆΔⲆⵠ.ⵠⲆⲆΔᐃⵠⵠ, ⲆΔⲆⵠ.ΔⵠᐃΔⵠᐃΔ, ⲆΔⲆⵠ.ΔⲆΔⲆⲆⲆⲆ, ⲆΔⲆⵠ.ⵠⲆᐃΔⲆⵠΔ)
		}), -5, 573, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(236, 165, "", [Δᐃ.ⲆⲆⲆΔⲆⲆⲆ, Δᐃ.ⲆⲆⲆΔⲆⲆⲆ, Δᐃ.ⲆⲆⲆΔⲆⲆⲆ], Δⵠⵠⵠ, ⵠΔⵠⲆᐃⵠⵠ, (function() {
			ⲆΔᐃⵠ(ⵠⵠⲆⲆᐃ)
		}), -ⵠⲆⲆⵠ, 566, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		ΔᐃⵠⵠⲆᐃᐃ = ⲆΔ++;
		this.buttons[ΔᐃⵠⵠⲆᐃᐃ] = ΔᐃⲆ(236, 165, "", [Δᐃ.ⵠⵠᐃΔΔᐃⲆ, Δᐃ.ⲆᐃΔⵠᐃⵠᐃ, Δᐃ.ⲆΔⲆⲆΔᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠᐃᐃⲆⲆⵠᐃ)
		}), -Δᐃᐃⵠ, 494, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(236, 165, "", [Δᐃ.ⲆᐃⵠᐃⵠⲆΔ, Δᐃ.ⲆᐃⵠᐃⵠⲆΔ, Δᐃ.ⲆᐃⵠᐃⵠⲆΔ], Δⵠⵠⵠ, ⵠΔⵠⲆᐃⵠⵠ, (function() {
			ⲆΔᐃⵠ(ⵠᐃᐃⲆⲆⵠᐃ)
		}), -ⵠᐃⲆᐃ, 494, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		ᐃⵠᐃᐃⵠᐃⲆ = ⲆΔ++;
		this.buttons[ᐃⵠᐃᐃⵠᐃⲆ] = ΔᐃⲆ(236, 165, "", [Δᐃ.ⵠⵠᐃΔΔᐃⲆ, Δᐃ.ⲆᐃΔⵠᐃⵠᐃ, Δᐃ.ⲆΔⲆⲆΔᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			if (Ⲇᐃⵠ.ⲆⲆᐃΔⲆ()) {
				if (ⵠᐃⲆⵠ < ⲆΔⲆⵠ.ᐃⵠⲆⵠᐃΔΔ - Date.now()) ⲆΔᐃⵠ(ⵠⲆⵠΔΔ);
				else ⲆΔᐃⵠ(ᐃⵠᐃΔⲆ)
			} else ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), -5, 415, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(236, 165, "", [Δᐃ.ΔΔΔΔⲆⲆⲆ, Δᐃ.ΔΔΔΔⲆⲆⲆ, Δᐃ.ΔΔΔΔⲆⲆⲆ], Δⵠⵠⵠ, ⵠΔⵠⲆᐃⵠⵠ, (function() {
			if (Ⲇᐃⵠ.ⲆⲆᐃΔⲆ()) {
				ΔᐃⲆⲆ < ⲆΔⲆⵠ.ᐃⵠⲆⵠᐃΔΔ - Date.now() ? ⲆΔᐃⵠ(ⵠⲆⵠΔΔ) : ⲆΔᐃⵠ(ᐃⵠᐃΔⲆ)
			} else ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), -ΔⲆⵠⵠ, 415, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		ᐃΔⲆᐃᐃΔⵠ = ⲆΔ++;
		this.buttons[ᐃΔⲆᐃᐃΔⵠ] = ΔᐃⲆ(236, 165, "", [Δᐃ.ⵠⵠᐃΔΔᐃⲆ, Δᐃ.ⲆᐃΔⵠᐃⵠᐃ, Δᐃ.ⲆΔⲆⲆΔᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
		}), -ΔΔⵠΔⵠ, 336, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(236, 165, "", [Δᐃ.ΔⵠΔᐃⵠⵠΔ, Δᐃ.ΔⵠΔᐃⵠⵠΔ, Δᐃ.ΔⵠΔᐃⵠⵠΔ], Δⵠⵠⵠ, ⵠΔⵠⲆᐃⵠⵠ, (function() {
			ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
		}), -ᐃᐃᐃᐃ, 336, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		ⲆΔⲆⵠⵠᐃⲆ = ⲆΔ++;
		this.buttons[ⲆΔⲆⵠⵠᐃⲆ] = ΔᐃⲆ(236, 165, "", [Δᐃ.ⵠⵠᐃΔΔᐃⲆ, Δᐃ.ⲆᐃΔⵠᐃⵠᐃ, Δᐃ.ⲆΔⲆⲆΔᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ΔᐃΔᐃⵠ)
		}), -ΔΔⵠΔⵠ, 257, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(236, 165, "", [Δᐃ.ᐃⲆΔᐃⵠΔⵠ, Δᐃ.ᐃⲆΔᐃⵠΔⵠ, Δᐃ.ᐃⲆΔᐃⵠΔⵠ], Δⵠⵠⵠ, ⵠΔⵠⲆᐃⵠⵠ, (function() {
			ⲆΔᐃⵠ(ΔᐃΔᐃⵠ)
		}), -ΔΔⵠⲆΔ, 257, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		ⲆⵠᐃⲆⲆᐃⲆ = ⲆΔ++;
		this.buttons[ⲆⵠᐃⲆⲆᐃⲆ] = ΔᐃⲆ(236, 165, "", [Δᐃ.ⵠⵠᐃΔΔᐃⲆ, Δᐃ.ⲆᐃΔⵠᐃⵠᐃ, Δᐃ.ⲆΔⲆⲆΔᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⲆΔⵠⵠⲆ)
		}), -ⵠΔⲆᐃ, 178, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++] = ΔᐃⲆ(236, 165, "", [Δᐃ.ᐃΔΔⵠⵠⲆⲆ, Δᐃ.ᐃΔΔⵠⵠⲆⲆ, Δᐃ.ᐃΔΔⵠⵠⲆⲆ], Δⵠⵠⵠ, ⵠΔⵠⲆᐃⵠⵠ, (function() {
			ⲆΔᐃⵠ(ⲆΔⵠⵠⲆ)
		}), -ⲆᐃΔⲆⵠ, 178, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		ⵠᐃᐃⵠΔⵠⲆ = ⲆΔ++;
		this.ⵠᐃᐃⵠΔⵠⲆ = ⵠᐃᐃⵠΔⵠⲆ;
		this.buttons[ⵠᐃᐃⵠΔⵠⲆ] = ΔᐃⲆ(324, 222, "", [Δᐃ.ᐃⲆⲆⲆⵠⵠΔ, Δᐃ.ⲆⵠΔᐃⲆᐃᐃ, Δᐃ.ΔⲆᐃΔᐃᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), 0, 70, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		ΔᐃⵠᐃΔⵠⲆ = ⲆΔ++;
		ᐃᐃΔΔⵠΔⵠ = ⲆΔ++;
		this.ΔᐃⵠᐃΔⵠⲆ = ΔᐃⵠᐃΔⵠⲆ;
		this.ᐃᐃΔΔⵠΔⵠ = ᐃᐃΔΔⵠΔⵠ;
		this.buttons[ΔᐃⵠᐃΔⵠⲆ] = ΔᐃⲆ(324, 222, "", [Δᐃ.ⲆᐃᐃΔΔⵠⵠ, Δᐃ.ⲆⲆΔⲆⵠⵠⲆ, Δᐃ.ΔⲆΔⵠΔΔⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠᐃᐃΔᐃ);
			ⵠΔΔⲆⵠ(-1)
		}), ᐃⲆΔ, 70, ᐃΔⵠⵠ, ⵠⲆΔΔ);
		this.buttons[ᐃᐃΔΔⵠΔⵠ] = ΔᐃⲆ(324, 222, "", [Δᐃ.ᐃᐃⵠⲆΔⲆΔ, Δᐃ.ᐃᐃⵠⲆΔⲆΔ, Δᐃ.ᐃᐃⵠⲆΔⲆΔ], Δⵠⵠⵠ, ⵠΔⵠⲆᐃⵠⵠ, (function() {
			ⲆΔᐃⵠ(ⵠᐃᐃΔᐃ);
			ⵠΔΔⲆⵠ(-1)
		}), 0, 70, ᐃΔⵠⵠ, ⵠⲆΔΔ);
		if (0 === ΔΔᐃⲆ.ⲆᐃᐃⵠᐃᐃΔ) {
			var ⵠⲆΔⵠᐃ = ⲆΔ++;
			if (1300 > ⲆⵠᐃΔᐃⵠⲆ.innerWidth) this.buttons[ⵠⲆΔⵠᐃ] = ΔᐃⲆ(266, 176, "", [Δᐃ.ᐃⵠΔⲆⵠᐃΔ, Δᐃ.ΔᐃⲆᐃΔⵠⵠ, Δᐃ.ᐃⵠⵠⲆΔⲆᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
				ΔΔᐃⲆ.ⵠⲆⲆⵠⵠ(ᐃΔᐃᐃ.ⵠΔᐃⵠΔ)
			}), 150, 300, ᐃΔⵠⵠ | Ⲇᐃⵠᐃ, ⲆⲆᐃᐃ);
			else this.buttons[ⵠⲆΔⵠᐃ] = ΔᐃⲆ(266, 176, "", [Δᐃ.ᐃⵠΔⲆⵠᐃΔ, Δᐃ.ΔᐃⲆᐃΔⵠⵠ, Δᐃ.ᐃⵠⵠⲆΔⲆᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
				ΔΔᐃⲆ.ⵠⲆⲆⵠⵠ(ᐃΔᐃᐃ.ⵠΔᐃⵠΔ)
			}), -340, 100, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⲆⲆᐃᐃ);
			this.buttons[ⵠⲆΔⵠᐃ].view = ⲆΔⵠⵠⲆ;
			this.buttons[ⵠⲆΔⵠᐃ].hint = ᐃⲆΔ;
			var ⲆᐃᐃΔᐃ = ⲆΔ++;
			if (ⲆⵠᐃΔᐃⵠⲆ.innerWidth < 1300) this.buttons[ⲆᐃᐃΔᐃ] = ΔᐃⲆ(266, 176, "", [Δᐃ.ⵠⵠⵠΔΔⵠᐃ, Δᐃ.ⲆⲆⲆΔⲆᐃᐃ, Δᐃ.ΔⲆᐃⵠⲆⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
				ΔΔᐃⲆ.ⵠⲆⲆⵠⵠ(ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ)
			}), 150, 400, ᐃΔⵠⵠ | Ⲇᐃⵠᐃ, ⲆⲆᐃᐃ);
			else this.buttons[ⲆᐃᐃΔᐃ] = ΔᐃⲆ(266, 176, "", [Δᐃ.ⵠⵠⵠΔΔⵠᐃ, Δᐃ.ⲆⲆⲆΔⲆᐃᐃ, Δᐃ.ΔⲆᐃⵠⲆⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
				ΔΔᐃⲆ.ⵠⲆⲆⵠⵠ(ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ)
			}), -340, 200, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⲆⲆᐃᐃ);
			this.buttons[ⲆᐃᐃΔᐃ].view = ⲆΔⵠⵠⲆ;
			this.buttons[ⲆᐃᐃΔᐃ].hint = ⵠⵠΔΔ;
			var ᐃΔⵠΔⲆ = ⲆΔ++;
			ⲆⵠᐃΔᐃⵠⲆ.innerWidth < 1300 ? this.buttons[ᐃΔⵠΔⲆ] = ΔᐃⲆ(266, 176, "", [Δᐃ.ΔᐃΔΔΔΔⵠ, Δᐃ.ᐃΔᐃΔⲆⵠⵠ, Δᐃ.ᐃᐃᐃΔᐃⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
				ΔΔᐃⲆ.ⵠⲆⲆⵠⵠ(ᐃΔᐃᐃ.ᐃΔⵠΔⲆ)
			}), 450, 300, ᐃΔⵠⵠ | Ⲇᐃⵠᐃ, ⲆⲆᐃᐃ) : this.buttons[ᐃΔⵠΔⲆ] = ΔᐃⲆ(266, 176, "", [Δᐃ.ΔᐃΔΔΔΔⵠ, Δᐃ.ᐃΔᐃΔⲆⵠⵠ, Δᐃ.ᐃᐃᐃΔᐃⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
				ΔΔᐃⲆ.ⵠⲆⲆⵠⵠ(ᐃΔᐃᐃ.ᐃΔⵠΔⲆ)
			}), -340, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⲆⲆᐃᐃ);
			this.buttons[ᐃΔⵠΔⲆ].view = ⲆΔⵠⵠⲆ;
			this.buttons[ᐃΔⵠΔⲆ].hint = 0;
			var ᐃΔⲆⵠⵠ = ⲆΔ++;
			if (ⲆⵠᐃΔᐃⵠⲆ.innerWidth < 1300) this.buttons[ᐃΔⲆⵠⵠ] = ΔᐃⲆ(266, 176, "", [Δᐃ.ⲆⵠⵠⵠΔⵠⲆ, Δᐃ.ΔⲆⵠᐃⵠΔⲆ, Δᐃ.ᐃⲆΔⵠⵠⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
				ΔΔᐃⲆ.ⵠⲆⲆⵠⵠ(ᐃΔᐃᐃ.ᐃΔΔΔᐃ)
			}), 300, 300, ᐃΔⵠⵠ | Ⲇᐃⵠᐃ, ⲆⲆᐃᐃ);
			else this.buttons[ᐃΔⲆⵠⵠ] = ΔᐃⲆ(266, 176, "", [Δᐃ.ⲆⵠⵠⵠΔⵠⲆ, Δᐃ.ΔⲆⵠᐃⵠΔⲆ, Δᐃ.ᐃⲆΔⵠⵠⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
				ΔΔᐃⲆ.ⵠⲆⲆⵠⵠ(ᐃΔᐃᐃ.ᐃΔΔΔᐃ)
			}), 204, 100, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⲆⲆᐃᐃ);
			this.buttons[ᐃΔⲆⵠⵠ].view = ⲆΔⵠⵠⲆ;
			this.buttons[ᐃΔⲆⵠⵠ].hint = ᐃⲆΔᐃ;
			var ΔᐃⲆⲆⲆ = ⲆΔ++;
			ⲆⵠᐃΔᐃⵠⲆ.innerWidth < 1300 ? this.buttons[ΔᐃⲆⲆⲆ] = ΔᐃⲆ(266, 176, "", [Δᐃ.ΔᐃⵠⲆⵠΔⲆ, Δᐃ.ΔΔΔΔⲆⲆᐃ, Δᐃ.ᐃΔⲆⲆⲆᐃᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
				ΔΔᐃⲆ.ⵠⲆⲆⵠⵠ(ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ)
			}), 300, 400, ᐃΔⵠⵠ | Ⲇᐃⵠᐃ, ⲆⲆᐃᐃ) : this.buttons[ΔᐃⲆⲆⲆ] = ΔᐃⲆ(266, 176, "", [Δᐃ.ΔᐃⵠⲆⵠΔⲆ, Δᐃ.ΔΔΔΔⲆⲆᐃ, Δᐃ.ᐃΔⲆⲆⲆᐃᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
				ΔΔᐃⲆ.ⵠⲆⲆⵠⵠ(ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ)
			}), 204, 200, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⲆⲆᐃᐃ);
			this.buttons[ΔᐃⲆⲆⲆ].view = ⲆΔⵠⵠⲆ;
			this.buttons[ΔᐃⲆⲆⲆ].hint = ⲆⲆᐃⲆ;
			var ΔⲆⲆᐃⵠ = ⲆΔ++;
			this.buttons[ΔⲆⲆᐃⵠ] = ΔᐃⲆ(266, 176, "", [Δᐃ.ⲆᐃⵠΔΔⵠᐃ, Δᐃ.ΔⲆᐃⲆᐃᐃΔ, Δᐃ.ⵠⵠⵠᐃΔⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
				ΔΔᐃⲆ.ⵠⲆⲆⵠⵠ(ᐃΔᐃᐃ.ΔⲆⲆᐃⵠ)
			}), 1300 > ⲆⵠᐃΔᐃⵠⲆ.innerWidth ? 450 : 204, ⲆⵠᐃΔᐃⵠⲆ.innerWidth < 1300 ? 400 : 300, (1300 > ⲆⵠᐃΔᐃⵠⲆ.innerWidth ? ᐃΔⵠⵠ : ᐃᐃⲆΔ) | Ⲇᐃⵠᐃ, ⲆⲆᐃᐃ);
			this.buttons[ΔⲆⲆᐃⵠ].view = ⲆΔⵠⵠⲆ;
			this.buttons[ΔⲆⲆᐃⵠ].hint = 0
		}
		this.buttons[ⲆΔ] = ΔᐃⲆ(87, 78, "", [Δᐃ.ⵠⵠΔᐃΔⵠⵠ, Δᐃ.ΔⲆⲆᐃⲆᐃⲆ, Δᐃ.ⲆⵠΔΔᐃΔⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔⲆⵠ.ⵠⲆΔΔΔᐃΔⵠᐃ();
			if (ⲆΔⲆⵠ.ⲆⲆᐃⵠᐃⲆΔ === 0) ⲆΔᐃⵠ(ᐃⵠᐃⲆΔΔΔ);
			else ⲆΔᐃⵠ(ⲆⵠⲆΔⲆⵠᐃ)
		}), 127, 110, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(87, 78, "", [Δᐃ.ΔΔΔⵠᐃⲆⲆ, Δᐃ.ⵠΔⵠⲆⵠⲆⵠ, Δᐃ.ᐃⵠΔΔᐃΔⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			const ⵠΔᐃΔᐃ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[37]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]]("textarea");
			ⵠΔᐃΔᐃ.value = ᐃⵠⵠⲆΔ;
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[37]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[231]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[30]](ⵠΔᐃΔᐃ);
			ⵠΔᐃΔᐃ.select();
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[37]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[15]]("copy");
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[37]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[231]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[224]](ⵠΔᐃΔᐃ)
		}), 182, 110, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(87, 78, "", [Δᐃ.ΔΔⲆΔᐃⲆⲆ, Δᐃ.ᐃⵠⵠᐃⲆⲆⲆ, Δᐃ.ᐃᐃᐃⵠᐃⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠᐃΔⵠΔΔⵠⲆⵠ()
		}), ⲆⲆⲆⵠᐃ, 110, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(58, 64, "", [Δᐃ.ⲆΔΔΔⲆΔⲆ, Δᐃ.ΔΔⲆᐃΔⵠΔ, Δᐃ.ΔⲆⵠⲆᐃⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⲆΔⵠⵠⲆ)
		}), 189, 118, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆⵠΔⵠΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(497, 72, "", [Δᐃ.ⲆᐃΔⲆⵠᐃⵠ, Δᐃ.ⵠⲆΔⲆΔᐃΔ, Δᐃ.ⵠᐃⲆⲆⵠΔᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ᐃⲆᐃᐃᐃⲆⵠΔⵠ()
		}), -130, 390, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆⵠΔⵠΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(497, 72, "", [Δᐃ.ΔⵠᐃⲆᐃⲆᐃ, Δᐃ.ⲆᐃᐃΔᐃΔⲆ, Δᐃ.ᐃⲆᐃᐃⲆⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠᐃⲆᐃⵠΔΔⲆⵠ()
		}), -130, 430, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆⵠΔⵠΔ;
		ΔⲆⵠᐃᐃᐃⲆ = 2e4;

		function ⵠⵠⲆⲆᐃΔⲆ(ᐃᐃᐃΔᐃ) {
			var ⵠᐃⲆⵠΔ = ⲆΔⲆⵠ.ᐃᐃΔΔⲆᐃⲆ(ᐃᐃᐃΔᐃ);
			var ⲆⲆᐃᐃⵠᐃᐃ = ⵠᐃⲆⵠΔ * ⵠᐃⲆⵠΔ * ΔⲆⵠᐃᐃᐃⲆ;
			var ⲆⲆⲆΔΔᐃᐃᐃΔ = (ⵠᐃⲆⵠΔ + 1) * (ⵠᐃⲆⵠΔ + 1) * ΔⲆⵠᐃᐃᐃⲆ - ⲆⲆᐃᐃⵠᐃᐃ;
			ᐃᐃᐃΔᐃ -= ⲆⲆᐃᐃⵠᐃᐃ;
			return ᐃᐃᐃΔᐃ / ⲆⲆⲆΔΔᐃᐃᐃΔ
		}
		this.ⵠⵠⲆⲆᐃΔⲆ = ⵠⵠⲆⲆᐃΔⲆ;

		function ᐃᐃΔΔⲆᐃⲆ(ᐃᐃᐃΔᐃ) {
			return Math.floor(Math.sqrt(ᐃᐃᐃΔᐃ / ΔⲆⵠᐃᐃᐃⲆ))
		}
		this.ᐃᐃΔΔⲆᐃⲆ = ᐃᐃΔΔⲆᐃⲆ;
		this.ΔⲆᐃⵠᐃⲆΔⲆΔ = function(ᐃᐃᐃΔᐃ) {
			ⲆΔⲆⵠ.ⵠᐃⲆⵠΔ = ⲆΔⲆⵠ.ᐃᐃΔΔⲆᐃⲆ(ᐃᐃᐃΔᐃ);
			ⲆΔⲆⵠ.ΔⵠⵠΔΔⵠⵠ = ⲆΔⲆⵠ.ⵠⵠⲆⲆᐃΔⲆ(ᐃᐃᐃΔᐃ);
			ⲆΔⲆⵠ.ΔⵠⵠⲆᐃⲆⲆ = ⲆⲆᐃ;
			ⲆΔⲆⵠ.ᐃᐃᐃΔᐃ = ᐃᐃᐃΔᐃ
		};

		function ⵠΔΔⲆⵠ(ΔΔ, ⲆⵠΔᐃᐃ) {
			if (ⲆⵠΔᐃᐃ !== ⵠⲆⵠᐃⵠⵠΔ) {
				ⲆΔⲆⵠ.ⲆᐃΔᐃΔᐃᐃ = ⲆⵠΔᐃᐃ;
				var ⵠⲆΔᐃᐃ = ⲆΔⲆⵠ.ⵠⲆΔΔΔᐃⵠ[ⲆⵠΔᐃᐃ];
				ⲆΔⲆⵠ.ᐃᐃᐃΔᐃ = ⵠⲆΔᐃᐃ[ᐃ[331]];
				ⲆΔⲆⵠ.ΔᐃΔⵠⵠ = ⵠⲆΔᐃᐃ["kill"];
				ⲆΔⲆⵠ.ΔΔᐃⲆⲆⵠΔ = ⵠⲆΔᐃᐃ["death"];
				ⲆΔⲆⵠ.time = ⵠⲆΔᐃᐃ[ᐃ[490]];
				ⲆΔⲆⵠ.ⵠⲆⵠⲆΔⵠΔ = ⵠⲆΔᐃᐃ["bestScore"];
				ⲆΔⲆⵠ.ⵠⵠⵠᐃⵠⲆⵠ = ⵠⲆΔᐃᐃ["bestKill"];
				ⲆΔⲆⵠ.ΔΔᐃΔⲆⲆΔ = ⵠⲆΔᐃᐃ["bestTime"];
				ⲆΔⲆⵠ.ⲆⵠᐃΔⲆᐃᐃ = ⵠⲆΔᐃᐃ["scoreTotal"]
			}
			if (undefined === ΔΔ) ΔΔ = ⲆΔⲆⵠ.ⵠⵠᐃⵠⵠᐃⲆ;
			ⲆΔⲆⵠ.ⵠⵠᐃⵠⵠᐃⲆ = ΔΔ;
			if (0 <= ΔΔ) {
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("stats_box_time")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ⲆΔⲆⵠ.ΔΔᐃΔⲆⲆΔ[ΔΔ];
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("stats_box_kill")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ⲆΔⲆⵠ.ⵠⵠⵠᐃⵠⲆⵠ[ΔΔ];
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("stats_box_score")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ⲆΔⲆⵠ.ⵠⲆⵠⲆΔⵠΔ[ΔΔ]
			} else {
				var ΔᐃΔⵠⵠ = 0;
				for (var ᐃⲆ = 0; ᐃⲆ < ⲆΔⲆⵠ.ΔᐃΔⵠⵠ.length; ᐃⲆ++) ΔᐃΔⵠⵠ += ⲆΔⲆⵠ.ΔᐃΔⵠⵠ[ᐃⲆ];
				var ᐃᐃΔ = 0;
				for (var ᐃⲆ = 0; ᐃⲆ < ⲆΔⲆⵠ.time.length; ᐃⲆ++) ᐃᐃΔ += ⲆΔⲆⵠ.time[ᐃⲆ];
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("stats_box_time")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ᐃᐃΔ;
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("stats_box_kill")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ΔᐃΔⵠⵠ;
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("stats_box_score")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ⲆΔⲆⵠ.ᐃᐃᐃΔᐃ
			}
		}
		this.ⲆⵠⲆΔⲆΔᐃΔⲆ = function(ΔⵠΔᐃ) {
			ⲆΔⲆⵠ.buttons[ⲆΔⲆⵠ.ⵠᐃᐃⵠΔⵠⲆ].info.active = ⵠⵠⲆΔ;
			ⲆΔⲆⵠ.buttons[ⲆΔⲆⵠ.ΔᐃⵠᐃΔⵠⲆ].info.active = ᐃⵠᐃᐃ;
			ⲆΔⲆⵠ.buttons[ⲆΔⲆⵠ.ᐃᐃΔΔⵠΔⵠ].info.active = 1;
			ⲆⲆΔᐃᐃⲆΔ(); - ΔⲆⵠⲆ === ΔⵠΔᐃ[ᐃ[38]].indexOf("Starver#") ? document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[366]).value = ⲆⵠᐃΔᐃⵠⲆ["decodeURIComponent"](ⲆⵠᐃΔᐃⵠⲆ["escape"](ⲆⵠᐃΔᐃⵠⲆ["atob"](ΔⵠΔᐃ[ᐃ[38]]))) : document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[366]).value = ΔⵠΔᐃ[ᐃ[38]];
			ⲆΔⲆⵠ.Ⲇⵠᐃᐃⵠ = ΔⵠΔᐃ["bread"];
			var ⵠⲆΔΔΔᐃⵠ = ΔⵠΔᐃ["seasons"];
			var ⵠⲆΔᐃᐃ = ⵠⲆΔΔΔᐃⵠ[ⵠⲆΔΔΔᐃⵠ.length - ⲆⲆΔⵠ];
			ⲆΔⲆⵠ.ⵠⲆΔΔΔᐃⵠ = ⵠⲆΔΔΔᐃⵠ;
			Ⲇᐃⵠ.ΔⲆᐃⵠᐃⲆΔⲆΔ(ⵠⲆΔᐃᐃ[ᐃ[331]]);
			ⲆΔⲆⵠ.ᐃᐃᐃΔᐃ = ⵠⲆΔᐃᐃ[ᐃ[331]];
			ⲆΔⲆⵠ.ΔᐃΔⵠⵠ = ⵠⲆΔᐃᐃ["kill"];
			ⲆΔⲆⵠ.ΔΔᐃⲆⲆⵠΔ = ⵠⲆΔᐃᐃ["death"];
			ⲆΔⲆⵠ.time = ⵠⲆΔᐃᐃ[ᐃ[490]];
			ⲆΔⲆⵠ.ⵠⲆⵠⲆΔⵠΔ = ⵠⲆΔᐃᐃ["bestScore"];
			ⲆΔⲆⵠ.ⵠⵠⵠᐃⵠⲆⵠ = ⵠⲆΔᐃᐃ["bestKill"];
			ⲆΔⲆⵠ.ΔΔᐃΔⲆⲆΔ = ⵠⲆΔᐃᐃ["bestTime"];
			ⲆΔⲆⵠ.ⲆⵠᐃΔⲆᐃᐃ = ⵠⲆΔᐃᐃ["scoreTotal"];
			ⲆΔⲆⵠ.ⲆⲆᐃⵠᐃⲆΔ = ΔⵠΔᐃ["firstName"];
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[27]).value = ΔⵠΔᐃ["privateServerRegion"] + ᐃ[434] + ΔⵠΔᐃ["privateServer"];
			if (ⲆΔⲆⵠ.ⲆⲆᐃⵠᐃⲆΔ === Ⲇᐃᐃⵠᐃ) ⲆΔⲆⵠ.ⲆⲆᐃⵠᐃⲆΔ = 0;
			ⲆΔⲆⵠ.ᐃⵠⲆⵠᐃΔΔ = Date.now() + ΔⵠΔᐃ["privateServerTime"];
			if (0 < Number(ΔⵠΔᐃ["privateServerTime"])) ⲆΔⲆⵠ.ᐃⵠⲆⵠᐃΔΔ = Date.now() + Number(ΔⵠΔᐃ["privateServerTime"]);
			ⲆΔⲆⵠ.ⲆⵠΔⵠⲆ = Date.now() + ΔⵠΔᐃ[ᐃ[97]];
			if (Δⵠⵠ < Number(ΔⵠΔᐃ[ᐃ[97]])) ⲆΔⲆⵠ.ⲆⵠΔⵠⲆ = Date.now() + Number(ΔⵠΔᐃ[ᐃ[97]]);
			var ⲆΔΔⵠΔ = ⲆⲆΔⲆ.Δⵠᐃⵠⵠ;
			for (var ᐃⲆ = 0; ᐃⲆ < ΔⵠΔᐃ["skins"].length; ᐃⲆ++) {
				var ⵠΔΔ = ΔⵠΔᐃ["skins"][ᐃⲆ];
				if (ⵠΔΔ > 0) {
					for (var ⲆⲆⲆⵠ = ⵠⵠⵠ; ⲆΔΔⵠΔ.length > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
						ⲆΔΔⵠΔ[ⲆⲆⲆⵠ].id === ᐃⲆ && (Ⲇᐃⵠ.unlock.ⵠⲆᐃᐃ[ⲆⲆⲆⵠ] = Δⵠᐃ)
					}
				}
			}
			var ⲆΔΔⵠΔ = ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ;
			for (var ᐃⲆ = 0; ΔⵠΔᐃ["accessories"].length > ᐃⲆ; ᐃⲆ++) {
				var ⵠΔΔ = ΔⵠΔᐃ["accessories"][ᐃⲆ];
				if (ⵠⵠᐃ < ⵠΔΔ) {
					for (var ⲆⲆⲆⵠ = 0; ⲆΔΔⵠΔ.length > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
						ᐃⲆ === ⲆΔΔⵠΔ[ⲆⲆⲆⵠ].id && (Ⲇᐃⵠ.unlock.ⵠΔⵠⲆⲆ[ⲆⲆⲆⵠ] = ΔⲆⵠⲆ)
					}
				}
			}
			var ⲆΔΔⵠΔ = ⲆⲆΔⲆ.ⵠΔⲆΔᐃ;
			for (var ᐃⲆ = 0; ΔⵠΔᐃ["books"].length > ᐃⲆ; ᐃⲆ++) {
				var ⵠΔΔ = ΔⵠΔᐃ["books"][ᐃⲆ];
				if (ⵠΔΔ > ⵠⵠΔΔ) {
					for (var ⲆⲆⲆⵠ = ⲆⲆᐃ; ⲆⲆⲆⵠ < ⲆΔΔⵠΔ.length; ⲆⲆⲆⵠ++) {
						ᐃⲆ === ⲆΔΔⵠΔ[ⲆⲆⲆⵠ].id && (Ⲇᐃⵠ.unlock.ⲆⵠᐃⲆᐃ[ⲆⲆⲆⵠ] = 1)
					}
				}
			}
			var ⲆΔΔⵠΔ = ⲆⲆΔⲆ.ⲆⵠⲆΔ;
			for (var ᐃⲆ = ⵠⵠⵠ; ᐃⲆ < ΔⵠΔᐃ["bags"].length; ᐃⲆ++) {
				var ⵠΔΔ = ΔⵠΔᐃ["bags"][ᐃⲆ];
				if (0 < ⵠΔΔ) {
					for (var ⲆⲆⲆⵠ = 0; ⲆⲆⲆⵠ < ⲆΔΔⵠΔ.length; ⲆⲆⲆⵠ++) {
						ⲆΔΔⵠΔ[ⲆⲆⲆⵠ].id === ᐃⲆ && (Ⲇᐃⵠ.unlock.ᐃΔⲆΔΔ[ⲆⲆⲆⵠ] = ⲆⲆᐃⵠ)
					}
				}
			}
			var ⲆΔΔⵠΔ = ⲆⲆΔⲆ.ΔⵠΔⵠⵠ;
			for (var ᐃⲆ = Δⵠⵠ; ᐃⲆ < ΔⵠΔᐃ["crates"].length; ᐃⲆ++) {
				var ⵠΔΔ = ΔⵠΔᐃ["crates"][ᐃⲆ];
				if (ᐃⲆΔ < ⵠΔΔ) {
					for (var ⲆⲆⲆⵠ = 0; ⲆⲆⲆⵠ < ⲆΔΔⵠΔ.length; ⲆⲆⲆⵠ++) {
						ⲆΔΔⵠΔ[ⲆⲆⲆⵠ].id === ᐃⲆ && (Ⲇᐃⵠ.unlock.ᐃΔⲆⵠⲆ[ⲆⲆⲆⵠ] = ΔᐃⵠⲆ, Ⲇᐃⵠ.unlock.ΔᐃΔⵠΔ[ⲆⲆⲆⵠ] = ⲆⵠΔΔ)
					}
				}
			}
		};
		this.ⵠⵠⵠᐃⵠⲆⲆⵠᐃ = function() {
			ⲆⵠᐃΔᐃⵠⲆ.ⲆᐃⵠⵠⲆⲆⲆ = function() {
				ⲆΔᐃⵠ(ⲆΔⵠⵠⲆ);
				ᐃᐃᐃᐃΔᐃᐃΔΔ(Ⲇᐃⵠ.ⲆⵠⲆΔⲆΔᐃΔⲆ)
			};
			1 === Δᐃᐃⵠᐃᐃⵠ && ⲆⵠᐃΔᐃⵠⲆ.ⲆᐃⵠⵠⲆⲆⲆ()
		};
		ⲆⵠᐃΔᐃⵠⲆ.ᐃⲆᐃⲆᐃⵠⵠᐃΔ = function() {
			ⲆΔⲆⵠ.buttons[ⲆΔⲆⵠ.ⵠᐃᐃⵠΔⵠⲆ].info.active = 1;
			ⲆΔⲆⵠ.buttons[ⲆΔⲆⵠ.ΔᐃⵠᐃΔⵠⲆ].info.active = 0;
			ⲆΔⲆⵠ.buttons[ⲆΔⲆⵠ.ᐃᐃΔΔⵠΔⵠ].info.active = ⵠⵠΔΔ;
			ⲆΔᐃⵠ(ⲆΔⵠⵠⲆ)
		};
		this.ⲆⲆᐃΔⲆ = function() {
			return ⲆΔⲆⵠ.buttons[ⲆΔⲆⵠ.ΔᐃⵠᐃΔⵠⲆ].info.active
		};
		this.buttons[ⲆΔ] = ΔᐃⲆ(461, 105, "", [Δᐃ.ⲆⵠⲆᐃⵠΔⲆ, Δᐃ.ⲆⲆᐃⵠⲆᐃⵠ, Δᐃ.ⵠⵠⵠⲆⲆⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			Ⲇᐃⵠ.ⲆⲆᐃΔⲆ() ? ⲆΔᐃⵠ(ⲆΔΔᐃⵠ) : ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), -100, 80, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔΔⵠΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(157, 158, "", [Δᐃ.ⲆⵠᐃᐃᐃⲆΔ, Δᐃ.ΔᐃⲆⲆⲆΔΔ, Δᐃ.ⵠⵠΔⵠΔᐃᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("https://starveiopro.wikia.com/wiki/", ᐃ[115])
		}), -35, 125, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⲆⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(66, 73, "", [Δᐃ.ΔᐃⵠᐃΔᐃᐃ, Δᐃ.ᐃⵠⵠᐃⲆⲆⵠ, Δᐃ.ΔⵠⲆᐃⵠⵠᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -68, 340, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⲆⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(66, 73, "", [Δᐃ.ⲆⵠⲆⵠⵠⵠᐃ, Δᐃ.ᐃⵠᐃΔⵠⵠⲆ, Δᐃ.ⲆⵠᐃⲆΔⵠⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -30, 340, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⲆⲆⵠᐃ;
		this.ΔᐃⵠⵠⵠⵠⲆⵠⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(97, 66, "", [Δᐃ.ⵠΔΔΔⵠᐃᐃ, Δᐃ.ⵠⵠⵠⵠⵠⲆⲆ, Δᐃ.ⲆΔⲆΔΔΔᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(ᐃΔᐃⲆⵠ, undefined, ⲆΔⲆⵠ.ΔⲆΔⲆⲆⲆⲆ)
		}), -ⵠⲆⵠᐃⵠΔⵠ, 151, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ᐃⵠⲆⵠΔᐃΔ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(135, 66, "", [Δᐃ.ⲆᐃⲆᐃᐃⵠⲆ, Δᐃ.ᐃⲆᐃΔⵠΔⲆ, Δᐃ.ΔⲆΔⵠⲆΔⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(ⵠΔΔⲆΔ, undefined, ⲆΔⲆⵠ.ᐃⵠⲆⵠΔᐃΔ)
		}), 37.5, 151, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ᐃⵠᐃΔᐃⵠⲆ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(160, 66, "", [Δᐃ.ⵠⵠΔⲆΔᐃΔ, Δᐃ.ⵠⵠⵠⵠⵠΔᐃ, Δᐃ.ⲆΔⲆⲆⲆⲆⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(ΔⵠᐃΔᐃ, ⵠⵠᐃⲆᐃ, ⲆΔⲆⵠ.ᐃⵠᐃΔᐃⵠⲆ)
		}), 107.5, 151, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ΔⲆΔⲆⲆⲆⲆ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(207, 66, "", [Δᐃ.ⲆⲆΔⲆΔⵠΔ, Δᐃ.ΔΔᐃⵠⵠᐃΔ, Δᐃ.ΔᐃΔΔΔⲆⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(ⵠᐃⲆᐃⲆ, ⵠΔΔⲆΔ, ⲆΔⲆⵠ.ΔⲆΔⲆⲆⲆⲆ)
		}), 190.5, 151, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ᐃᐃᐃⵠΔⲆᐃ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(144, 66, "", [Δᐃ.ΔⲆⵠⲆΔⵠⵠ, Δᐃ.ⵠᐃⵠⵠΔⲆⵠ, Δᐃ.ΔⵠᐃⵠⵠᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(ⲆΔⲆⵠ.ᐃᐃᐃⵠΔⲆᐃ)
		}), 103.5, 110, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ΔΔᐃⲆⵠΔⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(124, 66, "", [Δᐃ.ⲆᐃΔᐃⲆΔⲆ, Δᐃ.ᐃⲆⵠⲆᐃⲆᐃ, Δᐃ.ΔⲆⵠΔᐃⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(ⲆΔⲆⵠ.ΔΔᐃⲆⵠΔⵠ)
		}), 177.5, 110, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ⵠⲆⲆΔᐃⵠⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(104, 66, "", [Δᐃ.ᐃᐃⵠⲆⲆⵠΔ, Δᐃ.ⵠⵠΔⵠⲆΔⲆ, Δᐃ.ΔᐃⵠⵠᐃΔⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(ⲆΔⲆⵠ.ⵠⲆⲆΔᐃⵠⵠ)
		}), 242, 110, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ΔᐃᐃⵠΔΔΔ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(46, 51, "", [Δᐃ.ⵠΔΔΔⲆⵠⵠ, Δᐃ.ᐃⲆⵠΔⲆᐃᐃ, Δᐃ.ᐃᐃⲆⲆᐃⵠᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(ΔⲆΔᐃⲆ, ΔⲆⲆΔⲆ, undefined, ⲆΔⲆⵠ.ΔᐃᐃⵠΔΔΔ)
		}), -185, 528, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ⵠⵠⲆⲆᐃΔᐃ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(46, 51, "", [Δᐃ.ᐃⵠᐃⵠⵠⲆⵠ, Δᐃ.ΔⲆᐃⲆⵠⵠⲆ, Δᐃ.ᐃᐃΔᐃΔΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(undefined, ⵠΔΔⲆΔ, ΔⲆᐃΔᐃ, ⲆΔⲆⵠ.ⵠⵠⲆⲆᐃΔᐃ)
		}), -149, 528, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ⲆⲆΔΔⵠⲆⲆ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(46, 51, "", [Δᐃ.ⲆⵠᐃΔᐃⲆⵠ, Δᐃ.ⵠⲆⵠᐃΔⲆᐃ, Δᐃ.ⲆⲆⲆΔᐃⲆᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(undefined, undefined, undefined, ⲆΔⲆⵠ.ⲆⲆΔΔⵠⲆⲆ)
		}), -113, 528, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ᐃΔΔΔⲆΔⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(46, 51, "", [Δᐃ.ⵠⲆᐃᐃⵠⲆⲆ, Δᐃ.ᐃᐃᐃⵠⵠⲆΔ, Δᐃ.ⲆⵠΔⲆⲆⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(undefined, undefined, undefined, ⲆΔⲆⵠ.ᐃΔΔΔⲆΔⵠ)
		}), -77, 528, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ᐃᐃΔᐃⲆΔΔ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(46, 51, "", [Δᐃ.ⵠⲆⵠΔᐃⵠᐃ, Δᐃ.ᐃΔⵠⵠⵠΔⲆ, Δᐃ.ΔᐃⲆⲆΔΔⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(undefined, undefined, undefined, ⲆΔⲆⵠ.ᐃᐃΔᐃⲆΔΔ)
		}), -41, 528, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ⵠⲆᐃΔⲆⵠΔ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(46, 51, "", [Δᐃ.ΔⵠΔΔⲆΔᐃ, Δᐃ.ᐃᐃⵠᐃⲆⵠᐃ, Δᐃ.ⵠⵠⵠᐃΔᐃᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(ΔⲆᐃⲆⵠ, undefined, undefined, ⲆΔⲆⵠ.ⵠⲆᐃΔⲆⵠΔ)
		}), -5, 528, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(232, 352, "", [Δᐃ.ᐃⲆᐃⵠΔⲆΔ, Δᐃ.ΔᐃΔᐃΔΔΔ, Δᐃ.ⵠᐃⲆⵠΔᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ΔᐃᐃⲆΔⲆⵠ(300)
		}), -330, 135, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆΔΔᐃⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(232, 352, "", [Δᐃ.ΔᐃⵠᐃⵠⲆΔ, Δᐃ.ⵠᐃⵠⵠⵠᐃⵠ, Δᐃ.ⵠΔⵠᐃⲆⵠᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ΔᐃᐃⲆΔⲆⵠ(600)
		}), -195, 135, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆΔΔᐃⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(243, 374, "", [Δᐃ.ⵠⵠⵠⵠΔⵠⵠ, Δᐃ.ⲆᐃⲆΔⲆᐃΔ, Δᐃ.ΔΔΔΔΔΔᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ΔᐃᐃⲆΔⲆⵠ(2600)
		}), -60, 130, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆΔΔᐃⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(232, 352, "", [Δᐃ.ⵠᐃⲆᐃⲆΔⲆ, Δᐃ.ⵠᐃⵠⵠⵠⵠᐃ, Δᐃ.ⲆᐃⲆⵠⵠⲆΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ΔᐃᐃⲆΔⲆⵠ(7e3)
		}), 78, 135, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆΔΔᐃⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(243, 374, "", [Δᐃ.ⵠⲆⵠΔⲆⲆⵠ, Δᐃ.ⲆⵠΔᐃᐃΔⵠ, Δᐃ.ΔⲆᐃΔΔᐃΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ΔᐃᐃⲆΔⲆⵠ(2e4)
		}), 213, 130, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆΔΔᐃⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(58, 64, "", [Δᐃ.ⲆΔΔΔⲆΔⲆ, Δᐃ.ΔΔⲆᐃΔⵠΔ, Δᐃ.ΔⲆⵠⲆᐃⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
		}), 300, 88, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆΔΔᐃⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(323, 112, "", [Δᐃ.ⲆΔᐃᐃⲆΔⵠ, Δᐃ.ᐃⲆⲆΔⵠⵠΔ, Δᐃ.ⵠᐃⲆⲆᐃⲆΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠΔⲆⵠᐃ);
			ⵠⲆⲆⲆⲆΔⵠΔΔ.ⵠⵠᐃⵠⲆ()
		}), -315, 185, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔᐃΔᐃⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(323, 112, "", [Δᐃ.ⲆᐃΔᐃⲆⲆᐃ, Δᐃ.ΔⲆᐃᐃⲆⲆΔ, Δᐃ.ⲆΔⵠⵠΔⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠᐃᐃⵠᐃ);
			ⵠⵠⲆⲆⲆⵠᐃΔᐃ.ⵠⵠᐃⵠⲆ()
		}), -315, 321, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔᐃΔᐃⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(323, 112, "", [Δᐃ.ⲆΔⲆⵠⵠΔΔ, Δᐃ.ᐃΔᐃΔᐃᐃⵠ, Δᐃ.ⵠⲆⲆᐃⲆΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠⵠⵠΔⵠ);
			ⲆⲆⵠΔⲆⵠⵠΔΔ.ⵠⵠᐃⵠⲆ()
		}), 153, 185, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔᐃΔᐃⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(323, 112, "", [Δᐃ.ⵠΔⵠⵠΔⲆⵠ, Δᐃ.ⵠⲆⵠⵠⵠⲆΔ, Δᐃ.ⵠⵠⵠᐃⵠⲆⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ΔⲆᐃΔⲆ);
			ⵠᐃᐃⲆΔᐃⵠⲆΔ.ⵠⵠᐃⵠⲆ()
		}), 153, 321, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔᐃΔᐃⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(323, 112, "", [Δᐃ.ᐃΔⲆᐃᐃⵠⲆ, Δᐃ.ΔᐃᐃⵠΔⲆᐃ, Δᐃ.ⲆⲆⲆⵠᐃΔⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠΔⵠⲆΔ);
			ⲆᐃⲆⲆⲆᐃⲆᐃΔ.ⵠⵠᐃⵠⲆ()
		}), 153, 463, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔᐃΔᐃⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(323, 112, "", [Δᐃ.ᐃᐃⵠᐃΔᐃⵠ, Δᐃ.ΔᐃⲆⵠⵠⲆᐃ, Δᐃ.ΔⲆⲆᐃⲆᐃᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ᐃⲆᐃᐃΔ);
			ⵠΔΔⵠⵠⵠΔΔⲆ.ⵠⵠᐃⵠⲆ()
		}), -315, 463, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔᐃΔᐃⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(327, 117, "", [Δᐃ.ⲆⲆⵠⲆⲆΔᐃ, Δᐃ.ᐃⲆᐃⲆᐃΔⲆ, Δᐃ.ⲆΔⲆΔΔⲆⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⲆⲆⵠⵠΔᐃⵠ)
		}), 155, 70, ᐃΔⵠⵠ, ⲆⲆᐃᐃ);
		this.buttons[ⲆΔ++].view = ⲆΔⵠⵠⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(130, 129, "", [Δᐃ.ⵠⲆⵠⲆᐃΔⵠ, Δᐃ.ⲆᐃⲆΔᐃΔᐃ, Δᐃ.ⲆᐃⵠΔᐃⲆⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ΔⲆᐃⵠΔ(ᐃⵠΔⵠⵠᐃᐃ, ⵠⲆΔΔ, ᐃ[371]);
			ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
		}), ⲆΔⲆᐃⵠ, 40, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⵠΔⵠⵠᐃᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(130, 129, "", [Δᐃ.ⵠⲆⵠⲆᐃΔⵠ, Δᐃ.ⲆᐃⲆΔᐃΔᐃ, Δᐃ.ⲆᐃⵠΔᐃⲆⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ΔⲆᐃⵠΔ(ΔᐃᐃⵠⵠⵠⲆ, ⵠⲆΔΔ, ᐃ[371]);
			ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
		}), 10, 40, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔᐃᐃⵠⵠⵠⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
		}), 200, 140, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⵠᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(524, 110, "", [Δᐃ.ⲆⵠΔⵠⵠⲆᐃ, Δᐃ.ᐃⲆⲆⲆΔⵠⵠ, Δᐃ.ⵠᐃᐃⵠⵠᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠᐃⲆⵠⵠⲆᐃ("Atlanta")
		}), -265, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⵠᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(523, 110, "", [Δᐃ.ⲆΔⲆΔⲆⵠⵠ, Δᐃ.ΔⲆⲆⵠⲆᐃⵠ, Δᐃ.ⲆᐃᐃⵠⵠⲆⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠᐃⲆⵠⵠⲆᐃ("LosAngeles")
		}), ⲆᐃΔⲆⵠ, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⵠᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(344, 110, "", [Δᐃ.ⵠᐃᐃᐃΔᐃᐃ, Δᐃ.ᐃᐃᐃᐃᐃᐃᐃ, Δᐃ.ΔⵠⲆᐃΔᐃᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠᐃⲆⵠⵠⲆᐃ("Frankfurt")
		}), -265, 365, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⵠᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(344, 110, "", [Δᐃ.ⲆⵠⲆⵠⲆⲆⲆ, Δᐃ.ᐃⲆⲆⵠΔᐃΔ, Δᐃ.ᐃⵠᐃΔⵠⲆᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠᐃⲆⵠⵠⲆᐃ("Osaka")
		}), 100, 365, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⵠᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(344, 110, "", [Δᐃ.ⲆⲆᐃⲆᐃᐃⲆ, Δᐃ.ⵠᐃⲆⵠΔΔᐃ, Δᐃ.ⲆⲆᐃⲆⵠⲆⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠᐃⲆⵠⵠⲆᐃ("Sydney")
		}), -86, 365, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⵠᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ᐃⵠᐃΔⲆ)
		}), 224, 140, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆᐃΔΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(230, 352, "", [Δᐃ.ᐃᐃⲆⲆⵠΔⲆ, Δᐃ.ⲆΔᐃΔΔΔⲆ, Δᐃ.ⲆΔᐃⲆΔⵠᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ΔᐃᐃⲆΔⲆⵠ(350)
		}), -280, 240, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆᐃΔΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(230, 352, "", [Δᐃ.ⵠΔⲆΔⵠᐃᐃ, Δᐃ.ΔᐃⲆᐃⵠⲆⵠ, Δᐃ.ᐃᐃⲆᐃᐃⲆᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ΔᐃᐃⲆΔⲆⵠ(700)
		}), -130, 240, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆᐃΔΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(230, 352, "", [Δᐃ.ⵠⲆⲆⵠΔΔΔ, Δᐃ.ⲆᐃⲆⵠΔᐃⵠ, Δᐃ.ΔΔⵠᐃᐃᐃᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ΔᐃᐃⲆΔⲆⵠ(1400)
		}), ⵠⲆⵠΔⲆ, 240, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆᐃΔΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(230, 352, "", [Δᐃ.ΔΔᐃΔΔⲆΔ, Δᐃ.ⵠⲆΔΔⵠΔⵠ, Δᐃ.ⵠⵠΔⲆⲆⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ΔᐃᐃⲆΔⲆⵠ(3e3)
		}), 170, 240, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆᐃΔΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(105, 119, "", [Δᐃ.ⵠᐃⲆᐃⲆⵠΔ, Δᐃ.ᐃⲆᐃᐃⲆⲆⲆ, Δᐃ.ⵠⲆΔⵠⲆⵠⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			const ΔⵠⲆΔᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[27]).value.split(ᐃ[434]);
			const ⵠΔᐃΔᐃ = ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[37]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]]("textarea");
			ⵠΔᐃΔᐃ.value = ⵠΔΔΔⲆΔΔ + "?server=" + ΔⵠⲆΔᐃ[1] + ᐃ[450] + ΔⵠⲆΔᐃ[0];
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[37]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[231]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[30]](ⵠΔᐃΔᐃ);
			ⵠΔᐃΔᐃ.select();
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[37]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[15]]("copy");
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[37]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[231]][ⲆⵠⵠΔᐃᐃᐃⵠⲆ[224]](ⵠΔᐃΔᐃ)
		}), 105, 310, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⲆⵠΔΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(105, 119, "", [Δᐃ.ΔΔⲆⲆⲆΔᐃ, Δᐃ.ⲆⵠⲆⲆⵠΔΔ, Δᐃ.ⲆᐃⵠⲆⵠⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⲆᐃⵠᐃᐃΔⲆⵠ()
		}), 235, 310, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⲆⵠΔΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(105, 119, "", [Δᐃ.ᐃⵠΔᐃⵠᐃᐃ, Δᐃ.ΔⵠΔΔⲆⲆⲆ, Δᐃ.ᐃᐃᐃΔⲆⵠᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⲆⵠΔⵠⵠΔⵠΔ()
		}), 170, 310, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⲆⵠΔΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(204, 115, "", [Δᐃ.ⲆⵠΔᐃⲆᐃΔ, Δᐃ.ᐃΔⵠⲆⲆⲆᐃ, Δᐃ.ⵠΔⵠΔᐃⵠᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("./commands.html", ᐃ[115])
		}), -265, 490, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⲆⵠΔΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(145, 69, "", [Δᐃ.ΔΔΔⵠⲆᐃΔ, Δᐃ.ᐃⲆΔⵠΔⲆΔ, Δᐃ.ⵠⲆΔⲆⵠⲆᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠⵠΔΔΔΔⵠ)
		}), -210, 170, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔΔⵠΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(145, 69, "", [Δᐃ.ⲆᐃⲆⲆᐃⵠⵠ, Δᐃ.ⵠᐃⵠΔⵠⲆⵠ, Δᐃ.ⵠᐃⲆⲆᐃΔⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ΔⵠⵠⵠⲆᐃⲆ)
		}), 70, 170, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔΔⵠΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(145, 69, "", [Δᐃ.ᐃⵠⵠⵠᐃⵠⵠ, Δᐃ.ᐃⵠΔᐃⲆⵠᐃ, Δᐃ.ΔⲆⲆⵠⲆⲆⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠΔⵠΔⲆᐃΔ)
		}), 70, 204, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔΔⵠΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(145, 69, "", [Δᐃ.ᐃᐃⵠᐃΔⵠΔ, Δᐃ.ⵠΔᐃᐃᐃⵠⲆ, Δᐃ.ΔᐃⵠⲆᐃⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ΔⵠⵠⲆⲆⲆⲆ)
		}), -210, 204, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔΔⵠΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(145, 69, "", [Δᐃ.ᐃᐃⵠᐃΔⵠΔ, Δᐃ.ⵠΔᐃᐃᐃⵠⲆ, Δᐃ.ΔᐃⵠⲆᐃⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⲆΔᐃΔⵠⵠⵠ)
		}), 70, 238, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔΔⵠΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(145, 69, "", [Δᐃ.ᐃᐃⵠᐃΔⵠΔ, Δᐃ.ⵠΔᐃᐃᐃⵠⲆ, Δᐃ.ΔᐃⵠⲆᐃⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			Ⲇᐃⵠ.ⲆⲆᐃΔⲆ() ? ΔΔΔΔᐃⲆᐃ(0, 300) : ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), 307, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔΔⵠΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(145, 69, "", [Δᐃ.ᐃⵠᐃⵠΔᐃᐃ, Δᐃ.ⲆΔⵠⵠᐃᐃΔ, Δᐃ.ⲆΔⲆΔⲆᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ᐃᐃᐃⲆᐃᐃΔ)
		}), -210, 238, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔΔⵠΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(145, 69, "", [Δᐃ.ᐃⵠᐃⵠΔᐃᐃ, Δᐃ.ⲆΔⵠⵠᐃᐃΔ, Δᐃ.ⲆΔⲆΔⲆᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			if (Ⲇᐃⵠ.ⲆⲆᐃΔⲆ()) ΔΔΔΔᐃⲆᐃ(ΔⲆⵠⲆ, 600);
			else ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), 307, 239, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔΔⵠΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(192, 101, "", [Δᐃ.ΔⲆⵠⵠⲆⲆΔ, Δᐃ.Δᐃⵠᐃᐃⵠᐃ, Δᐃ.ⵠⲆⵠΔⲆⲆⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔⵠⲆⵠΔⵠ()
		}), -100, 250, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⵠᐃⲆΔΔΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(192, 104, "", [Δᐃ.ΔⲆⵠⲆⵠⲆⲆ, Δᐃ.ⵠΔᐃΔᐃⵠΔ, Δᐃ.ΔΔΔⵠᐃΔⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔⵠⲆⵠΔⵠ()
		}), -ⵠΔᐃᐃⲆ, 239, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆⵠⲆΔⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(192, 101, "", [Δᐃ.ⵠⲆⵠⵠⲆᐃⵠ, Δᐃ.ⵠⲆΔⲆᐃᐃⲆ, Δᐃ.ᐃⲆᐃⲆⲆⲆⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠᐃᐃΔᐃ)
		}), ⵠᐃⲆⵠᐃ, 250, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⵠᐃⲆΔΔΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(192, 104, "", [Δᐃ.ᐃΔⵠⵠᐃⵠⵠ, Δᐃ.ⲆΔᐃᐃΔᐃΔ, Δᐃ.ᐃΔᐃΔⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠᐃᐃΔᐃ)
		}), ⵠⵠⵠΔΔ, 239, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆⵠⲆΔⲆⵠᐃ;
		ⵠΔⵠᐃΔ = [];
		ⵠΔⵠᐃΔ[ᐃⵠᐃ.ⵠΔΔⲆⲆ] = [Δᐃ.ⲆΔΔΔⲆⵠΔ, Δᐃ.ΔᐃΔⵠᐃⲆⵠ, Δᐃ.ⵠⵠᐃⲆⲆⲆΔ];
		ⵠΔⵠᐃΔ[ᐃⵠᐃ.ᐃᐃᐃⲆ] = [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ];
		ⵠΔⵠᐃΔ[ᐃⵠᐃ.ⵠΔⵠΔ] = [Δᐃ.ᐃΔᐃᐃᐃⲆⵠ, Δᐃ.ⲆᐃⲆⲆⲆᐃᐃ, Δᐃ.ΔⲆᐃᐃᐃΔⵠ];
		ⵠΔⵠᐃΔ[ᐃⵠᐃ.ⵠᐃΔⲆ] = [Δᐃ.ᐃⲆΔΔⵠⲆⲆ, Δᐃ.ᐃᐃΔⲆⲆΔΔ, Δᐃ.ᐃⲆΔᐃⲆⵠᐃ];
		ⵠΔⵠᐃΔ[ᐃⵠᐃ.ⲆΔⵠᐃ] = [Δᐃ.ᐃᐃⵠΔⵠⵠⵠ, Δᐃ.ᐃᐃⵠⲆᐃⵠᐃ, Δᐃ.ⵠⵠⵠΔΔⲆⵠ];
		ⵠΔⵠᐃΔ[ᐃⵠᐃ.ⲆⵠΔⲆ] = [Δᐃ.ⵠᐃⲆᐃⲆΔΔ, Δᐃ.ⵠⲆΔΔⵠⲆⲆ, Δᐃ.ΔΔΔⲆᐃᐃⲆ];
		ⵠΔⵠᐃΔ[ᐃⵠᐃ.ᐃⲆⵠΔ] = [Δᐃ.ⲆᐃⵠⵠⲆⲆΔ, Δᐃ.ⲆᐃᐃΔΔⵠΔ, Δᐃ.ᐃⲆⵠΔⵠⲆⵠ];
		ⵠΔⵠᐃΔ[ᐃⵠᐃ.ᐃⵠΔⲆᐃ] = [Δᐃ.ᐃᐃⵠᐃⵠᐃᐃ, Δᐃ.ⲆⵠΔⵠⵠΔⲆ, Δᐃ.ⲆⲆᐃᐃⵠⲆΔ];
		ⵠΔⵠᐃΔ[ᐃⵠᐃ.ΔᐃΔⵠⵠᐃΔ] = [Δᐃ.ᐃⲆᐃΔⲆᐃᐃ, Δᐃ.ⵠⲆⲆΔᐃᐃⲆ, Δᐃ.ΔᐃⵠΔᐃΔᐃ];
		ᐃⵠⵠΔⵠⲆᐃ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠᐃⲆᐃⲆ, -29, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆᐃΔᐃ, -29, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆᐃΔᐃ, -29, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔΔᐃⲆᐃ, 65, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠⵠᐃⲆᐃ, 65, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 65, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆⲆⲆᐃ, 159, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 159, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⲆⲆⲆΔᐃ, 159, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(39, 122, "", [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠⲆⵠⵠᐃⲆ, Δᐃ.ⲆⵠᐃᐃΔⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -61, 315, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(39, 122, "", [Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ, Δᐃ.ⵠⲆⵠⵠᐃᐃΔ, Δᐃ.ΔᐃΔⲆⲆⲆⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 260, 315, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ΔᐃΔᐃⵠ)
		}), -320, 470, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⲆⵠᐃ;
		ⲆⲆΔΔΔⵠⲆⵠΔ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⵠⲆⲆΔ, -29, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔΔᐃⲆᐃ, -29, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -29, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ᐃΔᐃⲆⵠ, 65, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔΔᐃⲆᐃ, 65, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 65, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 159, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 159, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆⲆⲆᐃ, 159, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(39, 122, "", [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠⲆⵠⵠᐃⲆ, Δᐃ.ⲆⵠᐃᐃΔⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠⵠᐃⲆᐃ, -61, 315, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(39, 122, "", [Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ, Δᐃ.ⵠⲆⵠⵠᐃᐃΔ, Δᐃ.ΔᐃΔⲆⲆⲆⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 260, 315, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ΔᐃΔᐃⵠ)
		}), -320, 470, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃⵠᐃ;
		ⲆΔⲆⲆⲆⲆΔⲆΔ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⵠⲆⲆΔ, -29, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -29, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -29, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 65, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠΔΔⲆΔ, 65, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆᐃⲆⵠ, 65, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆΔᐃⲆ, 159, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 159, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 159, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(39, 122, "", [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠⲆⵠⵠᐃⲆ, Δᐃ.ⲆⵠᐃᐃΔⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -61, 315, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(39, 122, "", [Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ, Δᐃ.ⵠⲆⵠⵠᐃᐃΔ, Δᐃ.ΔᐃΔⲆⲆⲆⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 260, 315, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ΔᐃΔᐃⵠ)
		}), -320, 470, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃⲆᐃᐃΔ;
		ⲆΔⲆⲆⵠⲆⲆⲆⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠᐃⲆⵠⲆ, -29, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆⲆⲆᐃ, -29, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆᐃΔᐃ, -29, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, Ⲇᐃᐃⵠᐃ, 65, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆⲆΔⲆ, 65, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 65, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠᐃⲆⵠⲆ, 159, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 159, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 159, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(39, 122, "", [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠⲆⵠⵠᐃⲆ, Δᐃ.ⲆⵠᐃᐃΔⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -61, 315, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(39, 122, "", [Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ, Δᐃ.ⵠⲆⵠⵠᐃᐃΔ, Δᐃ.ΔᐃΔⲆⲆⲆⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠⵠᐃⲆᐃ, 260, 315, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ΔᐃΔᐃⵠ)
		}), -320, 470, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⵠΔⵠ;
		ⵠⲆⵠᐃΔⲆⲆΔΔ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠᐃⲆⵠⲆ, -29, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆΔᐃⲆ, -29, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -29, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠᐃⲆᐃⲆ, 65, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 65, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠᐃⲆᐃⲆ, 65, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔΔⲆⲆⲆ, 159, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 159, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆⲆΔⲆ, 159, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(39, 122, "", [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠⲆⵠⵠᐃⲆ, Δᐃ.ⲆⵠᐃᐃΔⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -61, 315, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(39, 122, "", [Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ, Δᐃ.ⵠⲆⵠⵠᐃᐃΔ, Δᐃ.ΔᐃΔⲆⲆⲆⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆΔᐃⲆ, 260, 315, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ΔᐃΔᐃⵠ)
		}), -320, 470, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⲆᐃΔⲆ;
		ⲆⵠᐃⵠⵠⲆⲆⲆⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ᐃⲆⲆⲆᐃ, -29, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -29, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -29, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠΔΔⲆΔ, 65, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 65, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ΔⲆⲆⲆᐃ, 65, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠᐃⲆⵠⲆ, 159, 205, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 159, 300, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(178, 182, "", [Δᐃ.ⵠⲆⲆᐃ, Δᐃ.ⲆΔⵠⵠ, Δᐃ.ΔᐃΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, 159, 395, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(39, 122, "", [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⵠⵠⲆⵠⵠᐃⲆ, Δᐃ.ⲆⵠᐃᐃΔⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, undefined, -61, 315, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(39, 122, "", [Δᐃ.ⲆⵠᐃᐃᐃⲆᐃ, Δᐃ.ⵠⲆⵠⵠᐃᐃΔ, Δᐃ.ΔᐃΔⲆⲆⲆⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, ⵠΔΔⲆΔ, 260, 315, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ΔᐃΔᐃⵠ)
		}), -320, 470, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(260, 260, "", [Δᐃ.ⲆⵠⵠΔᐃΔΔ, Δᐃ.ᐃᐃΔΔⲆᐃΔ, Δᐃ.ⲆᐃⵠΔΔⵠⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			if (Ⲇᐃⵠ.ⲆⲆᐃΔⲆ()) ᐃᐃΔⵠᐃⵠⲆ(ⵠᐃⵠΔ, 50);
			else ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), -260 / 4, 197, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⵠⵠⵠⲆᐃⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
		}), 309, 180, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⵠⵠⵠⲆᐃⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(260, 260, "", [Δᐃ.ⲆⲆⵠⲆⲆΔⲆ, Δᐃ.ⵠⵠᐃⲆⲆᐃΔ, Δᐃ.ᐃⲆⵠⵠⵠⲆⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			Ⲇᐃⵠ.ⲆⲆᐃΔⲆ() ? ᐃᐃΔⵠᐃⵠⲆ(ⲆⲆΔ, ⵠᐃⵠⲆᐃᐃΔ) : ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), -260 / ΔᐃⲆᐃⵠ, 150 + 448 / 4 - 260 / ΔΔΔⵠ, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠΔΔΔΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
		}), 309, 180, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠΔΔΔΔⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(260, 260, "", [Δᐃ.ΔⲆΔⲆⵠⵠⵠ, Δᐃ.ⵠΔᐃⵠᐃⲆΔ, Δᐃ.ΔΔᐃⵠⲆⲆⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			if (Ⲇᐃⵠ.ⲆⲆᐃΔⲆ()) ᐃᐃΔⵠᐃⵠⲆ(4, 150);
			else ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), -260 / 4, 150 + 448 / ᐃΔΔΔⲆ - 260 / 4, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠΔⲆᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
		}), 309, 180, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔⵠΔⲆᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(260, 260, "", [Δᐃ.ᐃΔΔⵠΔΔΔ, Δᐃ.ⲆⲆᐃᐃΔᐃᐃ, Δᐃ.ᐃᐃΔᐃⵠⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			Ⲇᐃⵠ.ⲆⲆᐃΔⲆ() ? ᐃᐃΔⵠᐃⵠⲆ(ⲆⲆⵠ, 300) : ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), -260 / ΔⲆⲆⲆ, 150 + 448 / ΔᐃᐃΔ - 260 / ⲆⲆⲆΔ, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⵠⵠⲆⲆⲆⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
		}), 309, 180, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ΔⵠⵠⲆⲆⲆⲆ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(260, 260, "", [Δᐃ.ⵠᐃⵠΔᐃΔΔ, Δᐃ.ⲆⲆⵠΔⲆⵠΔ, Δᐃ.ⵠⵠⵠⵠⲆΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			Ⲇᐃⵠ.ⲆⲆᐃΔⲆ() ? ᐃᐃΔⵠᐃⵠⲆ(ⲆᐃᐃⲆ, 600) : ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), -260 / 4, 150 + 448 / ⵠⲆᐃⲆ - 260 / ΔΔΔⵠ, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃᐃᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
		}), 309, 180, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ᐃᐃᐃⲆᐃᐃΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(260, 260, "", [Δᐃ.ᐃΔΔⵠΔΔΔ, Δᐃ.ⲆⲆᐃᐃΔᐃᐃ, Δᐃ.ᐃᐃΔᐃⵠⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			if (Ⲇᐃⵠ.ⲆⲆᐃΔⲆ()) ᐃᐃΔⵠᐃⵠⲆ(5, 300);
			else ⲆΔᐃⵠ(ⲆⵠΔⵠΔ)
		}), -260 / ᐃΔⵠᐃⲆ, 150 + 112 - 65, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆΔᐃΔⵠⵠⵠ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(115, 73, "", [Δᐃ.ΔⲆⵠⲆΔ, Δᐃ.ⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆΔᐃⵠ(ⵠΔΔⵠΔ)
		}), 309, 180, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⲆΔᐃΔⵠⵠⵠ;
		var ⲆⵠΔΔΔΔᐃᐃⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(46, 51, "", [Δᐃ.ᐃⵠᐃⲆⵠᐃⵠ, Δᐃ.ΔᐃᐃΔⵠⲆΔ, Δᐃ.ⲆΔⵠᐃⲆΔⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠΔΔⲆⵠ(ΔⲆᐃⲆⵠ, Δⵠⵠ)
		}), -305, 132, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		var ᐃΔⵠᐃⵠⵠⲆᐃᐃ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(46, 51, "", [Δᐃ.ⲆⵠᐃⲆΔⵠᐃ, Δᐃ.ΔᐃⵠⲆⲆΔᐃ, Δᐃ.ᐃⵠΔΔΔΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠΔΔⲆⵠ(undefined, 1)
		}), -273, 132, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		var ᐃΔΔⵠΔᐃⲆΔⲆ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(46, 51, "", [Δᐃ.ⲆⵠΔᐃΔⵠᐃ, Δᐃ.ⲆᐃΔΔⲆⲆⲆ, Δᐃ.ⲆΔᐃΔⵠᐃⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠΔΔⲆⵠ(undefined, ᐃⵠΔⲆ)
		}), -241, 132, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		var ᐃΔᐃᐃᐃⵠⲆΔΔ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(46, 51, "", [Δᐃ.ⲆⵠⲆΔⵠⲆⲆ, Δᐃ.ᐃᐃⲆΔⵠΔΔ, Δᐃ.ᐃΔⲆⲆⲆⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠΔΔⲆⵠ(undefined, 3)
		}), -305, 165, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		var ΔᐃⵠⲆΔᐃⲆⲆⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(46, 51, "", [Δᐃ.ᐃⵠⵠⵠΔⵠᐃ, Δᐃ.ᐃⵠⵠⲆⲆΔⵠ, Δᐃ.ᐃΔⵠᐃⵠⵠⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠΔΔⲆⵠ(ⵠΔΔⲆΔ, 4)
		}), -273, 165, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		var ⲆⵠⲆⵠⲆΔⵠⲆⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(46, 51, "", [Δᐃ.ⵠΔⵠΔᐃΔⲆ, Δᐃ.ⵠⵠⵠᐃᐃΔⵠ, Δᐃ.ᐃΔⲆⵠⲆΔΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠΔΔⲆⵠ(ᐃΔᐃⲆⵠ, 5)
		}), -241, 165, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		var ᐃⲆⵠΔΔⲆᐃⵠⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(460, 73, "", [Δᐃ.ⵠⵠΔⲆΔⲆⲆ, Δᐃ.ⵠΔⲆⵠⲆⲆΔ, Δᐃ.ⵠΔⵠⲆⵠᐃΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠΔΔⲆⵠ(-ⲆⲆΔⵠ)
		}), -180, 170, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		var ⲆⵠⲆᐃⵠⵠᐃⲆⲆ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(222, 68, "", [Δᐃ.ΔᐃⵠᐃⵠΔⵠ, Δᐃ.ⲆⵠᐃᐃⲆⲆΔ, Δᐃ.ΔᐃΔᐃⵠⵠⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠΔΔⲆⵠ(ᐃΔᐃᐃ.ⵠΔᐃⵠΔ)
		}), -180, 215, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		var ⲆᐃᐃⲆⵠΔΔΔⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(222, 68, "", [Δᐃ.ⲆⵠⲆΔⲆΔΔ, Δᐃ.ⲆⵠⵠᐃⲆΔⲆ, Δᐃ.ΔΔΔⲆᐃΔⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠΔΔⲆⵠ(ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ)
		}), -180, 260, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		var ⲆⵠⲆᐃⲆΔᐃᐃᐃ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(222, 68, "", [Δᐃ.ⵠⲆΔᐃⲆⵠᐃ, Δᐃ.ᐃⵠᐃᐃΔΔⵠ, Δᐃ.ⲆᐃᐃⲆΔᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠΔΔⲆⵠ(ᐃΔᐃᐃ.ᐃΔΔΔᐃ)
		}), -60, 215, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		var ⵠⲆᐃᐃⲆⲆΔᐃⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(222, 68, "", [Δᐃ.ⵠΔΔΔΔⲆᐃ, Δᐃ.ᐃⵠᐃᐃᐃⲆᐃ, Δᐃ.ⲆⵠΔⵠⲆⵠⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠΔΔⲆⵠ(ᐃΔᐃᐃ.ⵠⵠᐃΔⲆ)
		}), -60, 260, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠᐃᐃΔᐃ;
		this.ΔⵠᐃΔⵠᐃΔ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(143, 66, "", [Δᐃ.ᐃⵠᐃⲆⵠⵠⵠ, Δᐃ.ᐃΔΔⲆΔΔΔ, Δᐃ.ⵠⵠᐃⵠⲆΔⵠ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(ⵠᐃⲆⵠⲆ, ⲆΔⲆⵠ.ΔⵠᐃΔⵠᐃΔ)
		}), -298, 110, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ⲆΔⲆΔⲆⵠᐃ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(104, 66, "", [Δᐃ.ⵠⲆΔⲆᐃΔⲆ, Δᐃ.ⵠᐃΔΔⲆⲆΔ, Δᐃ.ⵠⲆᐃᐃΔⲆᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(undefined, ⲆΔⲆⵠ.ⲆΔⲆΔⲆⵠᐃ)
		}), -223, 110, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ⲆᐃⵠᐃⲆΔⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(110, 66, "", [Δᐃ.ᐃⲆΔΔⲆⵠⲆ, Δᐃ.ᐃΔᐃⵠΔⵠⵠ, Δᐃ.ⵠⲆΔⵠⲆᐃⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(Ⲇᐃᐃⵠᐃ, ⲆΔⲆⵠ.ⲆᐃⵠᐃⲆΔⵠ)
		}), -168, 110, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ⲆᐃⲆΔⲆΔⵠ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(88, 66, "", [Δᐃ.ⵠⲆⵠΔⲆΔᐃ, Δᐃ.ⵠᐃⵠᐃⲆΔΔ, Δᐃ.ⵠΔⵠᐃⵠⲆᐃ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(ⲆⲆⲆΔᐃ, ⲆΔⲆⵠ.ⲆᐃⲆΔⲆΔⵠ)
		}), -110, 110, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.ᐃᐃⲆΔΔⲆⲆ = ⲆΔ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(88, 66, "", [Δᐃ.ⲆᐃⲆⵠⲆᐃⵠ, Δᐃ.ⵠΔⲆΔᐃᐃᐃ, Δᐃ.ᐃⵠᐃᐃⵠⵠΔ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⵠⵠᐃᐃΔ(undefined, ⲆΔⲆⵠ.ᐃᐃⲆΔΔⲆⲆ)
		}), -63, 110, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠⵠⲆⲆᐃ;
		this.buttons[ⲆΔ] = ΔᐃⲆ(86, 44, "", [Δᐃ.ᐃᐃⵠⲆᐃⲆΔ, Δᐃ.ΔⵠⵠΔΔⵠᐃ, Δᐃ.ΔᐃᐃⲆᐃⵠⲆ], Δⵠⵠⵠ, ᐃⲆᐃΔ, (function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]]("./terms.html", ᐃ[115])
		}), 349, 290, ᐃᐃⲆΔ | Ⲇᐃⵠᐃ, ⵠⲆΔΔ);
		this.buttons[ⲆΔ++].view = ⵠΔΔⵠΔ;
		var ⵠⲆⲆⲆⲆΔⵠΔΔ = new ⵠᐃᐃᐃⲆⵠᐃ(ⲆⲆΔⲆ.Δⵠᐃⵠⵠ, ᐃⵠⵠΔⵠⲆᐃ, (function(ⵠΔΔ) {
			ⲆΔⲆⵠ.ⵠⲆᐃᐃ = ⵠΔΔ;
			if (ⲆΔⲆⵠ.unlock.ⵠⲆᐃᐃ[ⵠΔΔ] === ⵠⵠⵠⲆ) ᐃΔⲆⲆ.set("starve_skin", "" + ⵠΔΔ, {
				expires: 30
			})
		}), this.ⵠⲆᐃᐃ, this.unlock.ⵠⲆᐃᐃ);
		var ⲆⲆⵠΔⲆⵠⵠΔΔ = new ⵠᐃᐃᐃⲆⵠᐃ(ⲆⲆΔⲆ.ⲆⵠⲆΔ, ⲆΔⲆⲆⵠⲆⲆⲆⵠ, (function(ⵠΔΔ) {
			ⲆΔⲆⵠ.ᐃΔⲆΔΔ = ⵠΔΔ;
			if (ⲆΔⲆⵠ.unlock.ᐃΔⲆΔΔ[ⵠΔΔ] === ΔΔⵠ) ᐃΔⲆⲆ.set("starve_bag", "" + ⵠΔΔ, {
				expires: 30
			})
		}), this.ᐃΔⲆΔΔ, this.unlock.ᐃΔⲆΔΔ);
		var ⵠᐃᐃⲆΔᐃⵠⲆΔ = new ⵠᐃᐃᐃⲆⵠᐃ(ⲆⲆΔⲆ.ⵠΔⲆΔᐃ, ⵠⲆⵠᐃΔⲆⲆΔΔ, (function(ⵠΔΔ) {
			ⲆΔⲆⵠ.ⲆⵠᐃⲆᐃ = ⵠΔΔ;
			if (ⲆΔⲆⵠ.unlock.ⲆⵠᐃⲆᐃ[ⵠΔΔ] === 1) ᐃΔⲆⲆ.set("starve_book", "" + ⵠΔΔ, {
				expires: 30
			})
		}), this.ⲆⵠᐃⲆᐃ, this.unlock.ⲆⵠᐃⲆᐃ);
		var ⲆᐃⲆⲆⲆᐃⲆᐃΔ = new ⵠᐃᐃᐃⲆⵠᐃ(ⲆⲆΔⲆ.ΔⵠΔⵠⵠ, ⲆⵠᐃⵠⵠⲆⲆⲆⵠ, (function(ⵠΔΔ) {
			ⲆΔⲆⵠ.ΔᐃΔⵠΔ = ⵠΔΔ;
			if (ⲆΔⲆⵠ.unlock.ΔᐃΔⵠΔ[ⵠΔΔ] === 1) ᐃΔⲆⲆ.set("starve_dead", "" + ⵠΔΔ, {
				expires: 30
			})
		}), this.ΔᐃΔⵠΔ, this.unlock.ΔᐃΔⵠΔ);
		var ⵠΔΔⵠⵠⵠΔΔⲆ = new ⵠᐃᐃᐃⲆⵠᐃ(ⲆⲆΔⲆ.ΔⵠΔⵠⵠ, ⲆΔⲆⲆⲆⲆΔⲆΔ, (function(ⵠΔΔ) {
			ⲆΔⲆⵠ.ᐃΔⲆⵠⲆ = ⵠΔΔ;
			if (ⲆΔⲆⵠ.unlock.ᐃΔⲆⵠⲆ[ⵠΔΔ] === 1) ᐃΔⲆⲆ.set("starve_crate", "" + ⵠΔΔ, {
				expires: 30
			})
		}), this.ᐃΔⲆⵠⲆ, this.unlock.ᐃΔⲆⵠⲆ);
		var ⵠⵠⲆⲆⲆⵠᐃΔᐃ = new ⵠᐃᐃᐃⲆⵠᐃ(ⲆⲆΔⲆ.ΔⲆⲆⵠᐃ, ⲆⲆΔΔΔⵠⲆⵠΔ, (function(ⵠΔΔ) {
			ⲆΔⲆⵠ.ⵠΔⵠⲆⲆ = ⵠΔΔ;
			if (ⲆΔⲆⵠ.unlock.ⵠΔⵠⲆⲆ[ⵠΔΔ] === ᐃⲆⲆ) ᐃΔⲆⲆ.set("starve_accessory", "" + ⵠΔΔ, {
				expires: 30
			})
		}), this.ⵠΔⵠⲆⲆ, this.unlock.ⵠΔⵠⲆⲆ);
		this.ⵠΔⲆⲆᐃⵠⲆ = function(ⵠᐃᐃᐃ) {
			ΔΔⵠᐃ.ΔⵠΔΔ = ⲆⲆⲆᐃⲆᐃᐃ(Ⲇᐃⵠ.ᐃⵠ, ⵠᐃᐃᐃ);
			for (var ᐃⲆ = ⵠᐃⲆⵠ; ᐃⲆ < Ⲇᐃⵠ.buttons.length; ᐃⲆ++) {
				if (Ⲇᐃⵠ.buttons[ᐃⲆ].info.active === ⲆⲆᐃᐃ) Ⲇᐃⵠ.buttons[ᐃⲆ].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⵠΔᐃᐃⵠ)
			}
		};
		this.ⵠⵠΔᐃΔⲆⲆ = function(ⵠᐃᐃᐃ) {
			ΔΔⵠᐃ.ΔⵠΔΔ = ⲆⲆⲆᐃⲆᐃᐃ(Ⲇᐃⵠ.ᐃⵠ, ⵠᐃᐃᐃ);
			for (var ᐃⲆ = Δⵠⵠ; ᐃⲆ < Ⲇᐃⵠ.buttons.length; ᐃⲆ++) {
				var ΔⵠᐃⲆ = Ⲇᐃⵠ.buttons[ᐃⲆ];
				if (ΔⵠᐃⲆ.info.active === ⲆⲆᐃᐃ) {
					if (ΔⵠᐃⲆ.ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ᐃΔⲆᐃⲆ)) {
						ΔⵠᐃⲆ.info.callback();
						return
					}
				}
			}
		};
		this.ⵠΔⲆΔⲆⵠΔ = false;
		this.ᐃⲆᐃⲆΔⵠᐃ = function(ⵠᐃᐃᐃ) {
			ΔΔⵠᐃ.ΔⵠΔΔ = ⲆⲆⲆᐃⲆᐃᐃ(Ⲇᐃⵠ.ᐃⵠ, ⵠᐃᐃᐃ);
			var ᐃⵠⲆᐃⵠ = ᐃᐃⲆᐃΔ;
			for (var ᐃⲆ = 0; ᐃⲆ < Ⲇᐃⵠ.buttons.length; ᐃⲆ++) {
				if (Ⲇᐃⵠ.buttons[ᐃⲆ].info.active === ⲆⲆᐃᐃ) ᐃⵠⲆᐃⵠ |= Ⲇᐃⵠ.buttons[ᐃⲆ].ᐃᐃᐃⵠ(Ⲇᐃⵠ.ᐃⵠ, ΔΔⵠᐃ.ΔⵠΔΔ, ⲆⲆΔΔⲆ)
			}
			if (Ⲇᐃⵠ.ⵠΔⲆΔⲆⵠΔ !== ᐃⵠⲆᐃⵠ) {
				Ⲇᐃⵠ.ⵠΔⲆΔⲆⵠΔ = ᐃⵠⲆᐃⵠ;
				ᐃⵠⲆᐃⵠ ? ᐃⵠ.style[ᐃ[210]] = Ⲇᐃⵠ.ᐃΔⵠⵠΔΔⵠ : ᐃⵠ.style[ᐃ[210]] = Ⲇᐃⵠ.ⲆⵠⵠⲆᐃⵠⲆ
			}
		};
		this.ΔⵠᐃΔⲆⵠⵠ = function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[12], this.ⵠΔⲆⲆᐃⵠⲆ, false);
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], this.ⵠⵠΔᐃΔⲆⲆ, false);
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[341], this.ᐃⲆᐃⲆΔⵠᐃ, false)
		};
		this.ᐃⵠⵠⲆᐃᐃᐃ = function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[132]](ᐃ[ⵠⵠΔᐃᐃⲆⲆ], this.ⵠΔⲆⲆᐃⵠⲆ, false);
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[132]](ᐃ[160], this.ⵠⵠΔᐃΔⲆⲆ, false);
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[132]](ᐃ[341], this.ᐃⲆᐃⲆΔⵠᐃ, ᐃΔᐃᐃΔ)
		}
	}

	function ⵠⲆᐃᐃⵠⲆΔⵠⵠ() {
		ΔⲆᐃ.ᐃᐃⵠᐃⲆⵠΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + ⲆΔⵠ.ⵠΔⵠ + "%20days%20with%20" + ⲆΔⵠ.ᐃΔⲆΔⲆΔᐃ.ᐃᐃᐃΔᐃ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io")
	}

	function ⵠⵠᐃⲆⵠΔⵠᐃΔ(ⲆΔⵠⲆⲆΔⵠ, ΔⲆᐃᐃᐃⲆΔ, ⲆᐃΔⵠᐃΔᐃ) {
		const ᐃⵠⲆΔᐃᐃⲆ = (1 + (10866 + ⲆΔⵠⲆⲆΔⵠ) * 22695477) % 4294967296;
		const ⵠᐃⵠΔᐃⲆΔ = ~(ΔⲆᐃᐃᐃⲆΔ & 40874) & 40874 | ~(40874 & ΔⲆᐃᐃᐃⲆΔ) & ΔⲆᐃᐃᐃⲆΔ;
		const ΔᐃᐃⲆⲆⲆⲆ = ~(ⲆᐃΔⵠᐃΔᐃ & 13382) & ⲆᐃΔⵠᐃΔᐃ | ~(ⲆᐃΔⵠᐃΔᐃ & 13382) & 13382;
		const ⵠⲆⵠᐃⲆⲆΔᐃᐃ = ΔΔⲆᐃᐃⲆΔ(ᐃⵠⲆΔᐃᐃⲆ, ⵠᐃⵠΔᐃⲆΔ, ΔᐃᐃⲆⲆⲆⲆ, ᐃⵠⲆΔᐃᐃⲆ, ⵠᐃⵠΔᐃⲆΔ);
		const ⵠᐃⵠΔᐃⵠᐃⵠΔ = ΔΔⵠᐃⵠΔΔ(ΔᐃᐃⲆⲆⲆⲆ, ᐃⵠⲆΔᐃᐃⲆ, ⵠᐃⵠΔᐃⲆΔ);
		const ᐃΔᐃᐃΔᐃΔⵠⲆ = ((ⵠⲆⵠᐃⲆⲆΔᐃᐃ ^ ⵠᐃⵠΔᐃⵠᐃⵠΔ) + 58193) % 65478;
		return ᐃΔᐃᐃΔᐃΔⵠⲆ
	}

	function ᐃⵠᐃΔΔⵠΔᐃⲆ() {
		ΔⲆᐃ.ᐃᐃⵠᐃⲆⵠΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0")
	}

	function ⲆⲆⵠΔᐃⵠⲆΔΔ(ᐃⵠ, Δ) {
		this.ᐃⵠ = ᐃⵠ;
		this.Δ = Δ;
		var Ⲇᐃⵠ = this;
		this.ΔⵠⲆⵠⲆⵠΔ = false;
		this.ᐃᐃΔᐃΔᐃⲆ = {
			id: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("scoreboard"),
			style: document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("scoreboard").style,
			height: Ⲇⵠⵠᐃ,
			translate: {
				y: ⵠΔⵠᐃ,
				x: ⵠⵠΔΔ
			},
			"ΔⵠΔ": function() {
				this.style.left = this.translate.x + ᐃ[279];
				this.style.top = this.translate.y + ᐃ[279]
			},
			"ᐃⵠΔᐃᐃ": function() {
				this.id[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = '<div style="position:absolute;"> <img src="./img/scoreboard.png"style="width:250px;transform:translate(125px, -80px);"> </img> </div><div><div id="whokilled">' + ⲆΔⵠ.ᐃΔⲆΔⲆΔᐃ.ΔⲆⵠΔⲆᐃΔ + '</div></div><div class="deco" style="margin-top:35px;"></div><div class="deco"></div><div><div class="stats"> ' + ⵠᐃⲆ[ᐃΔᐃ.ⲆΔⲆⵠⵠΔⲆ] + ᐃ[434] + ⲆΔⵠ.ⵠΔⵠ + '</div><div class="stats"> ' + ⵠᐃⲆ[ᐃΔᐃ.ⵠᐃⵠⵠΔⲆΔ] + ᐃ[434] + ⲆΔⵠ.ᐃΔⲆΔⲆΔᐃ.ΔᐃΔⵠⵠ + "</div></div>" + '<div id="flexDisplay"><div id="score"> ' + ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⵠᐃᐃΔΔ] + ᐃ[434] + ⲆΔⵠ.ᐃΔⲆΔⲆΔᐃ.ᐃᐃᐃΔᐃ + '</div><div id="breadWon"><span id="breadWonInner">0</span><img src="./img/golden-bread.png" style="width:50px;margin-left:-25px;transform: translate(37px, 8px);"></img></div></div><div><div id="points"> ' + ⲆΔⵠ.ᐃΔⲆΔⲆΔᐃ.ⵠᐃᐃΔᐃΔᐃ + " " + ⵠᐃⲆ[ᐃΔᐃ.POINTS] + '</div></div><div id="shop_points">' + ⵠᐃⲆ[ᐃΔᐃ.ⲆᐃΔⵠⵠΔΔ] + '</div><div style="display:inline-block;"><div class="social" id="tttwitter">' + ⵠᐃⲆ[ᐃΔᐃ.ΔᐃΔᐃⵠⵠΔ] + '</div><div class="social" id="fffacebook">' + ⵠᐃⲆ[ᐃΔᐃ.ΔⲆⲆⲆΔⲆⲆ] + '</div></div><div id="bbback">' + ⵠᐃⲆ[ᐃΔᐃ.ΔᐃᐃᐃΔⲆᐃ] + ᐃ[423];
				this.style.display = ᐃ[376];
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("tttwitter")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], ⵠⲆᐃᐃⵠⲆΔⵠⵠ, false);
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("bbback")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], (function() {
					ⵠΔⲆⵠΔⵠⵠ.ⲆⵠᐃⵠΔ(ⲆΔⲆⵠ.ΔᐃᐃⵠⲆ)
				}), ᐃΔⲆΔᐃ);
				document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("fffacebook")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]](ᐃ[160], ᐃⵠᐃΔΔⵠΔᐃⲆ, ΔⲆⲆΔⵠ);
				this.height = Math.floor(this.id[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[112]] / 2);
				ⵠᐃⵠΔΔⵠΔⲆΔ()
			}
		};
		var ⲆⲆⵠᐃᐃ = 0;
		var ⵠⲆⲆⵠΔ = 30;
		var ᐃΔⵠᐃⲆᐃⲆ = function() {
			Ⲇᐃⵠ.ΔⵠΔ();
			ⲆⲆⵠᐃᐃ++;
			if (ⵠⲆⲆⵠΔ == ⲆⲆⵠᐃᐃ) {
				Ⲇᐃⵠ.ΔⵠΔ();
				return
			}
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]](ᐃΔⵠᐃⲆᐃⲆ, 0)
		};
		this.ⲆⵠᐃⵠΔ = function(ⲆⲆⲆᐃᐃ) {
			ⲆⲆⵠⵠΔ === Ⲇᐃⵠ.ΔⵠⲆⵠⲆⵠΔ && (Ⲇᐃⵠ.ΔⵠⲆⵠⲆⵠΔ = false, ⲆᐃⵠᐃⲆ = ⲆⲆⲆᐃᐃ, ⵠⵠΔⵠⲆ = -1, ⵠΔᐃⲆⲆ(), ᐃᐃΔΔⵠᐃⲆ())
		};
		var ⲆᐃⵠᐃⲆ;
		var ⵠⵠΔⵠⲆ = -1;
		var ᐃⵠⲆᐃΔ = 30;
		var ⵠΔᐃⲆⲆ = function() {
			Ⲇᐃⵠ.ΔⵠΔ();
			ⵠⵠΔⵠⲆ++;
			if (ᐃⵠⲆᐃΔ == ⵠⵠΔⵠⲆ) {
				Ⲇᐃⵠ.stop();
				Ⲇᐃⵠ.ᐃᐃΔᐃΔᐃⲆ.style.display = ᐃ[371];
				ⲆᐃⵠᐃⲆ();
				return
			}
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[180]](ⵠΔᐃⲆⲆ, 0)
		};
		this.ⵠΔⲆΔΔ = false;
		this.stop = function() {
			this.ⵠΔⲆΔΔ = ΔᐃΔΔᐃ
		};
		this.ΔᐃᐃⵠⲆ = function() {
			check_ads();
			document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[430]).style.backgroundColor = ⵠ.ⲆⵠᐃᐃΔ[ⵠᐃᐃᐃⲆ.time];
			Ⲇᐃⵠ.ᐃᐃΔᐃΔᐃⲆ.ᐃⵠΔᐃᐃ();
			ⲆΔⲆⵠ.ΔⲆⵠⵠⵠ.style.display = ᐃ[376];
			Ⲇᐃⵠ.ⵠΔⲆΔΔ = true;
			Ⲇᐃⵠ.ΔⵠⲆⵠⲆⵠΔ = true;
			ⵠⵠΔⵠⲆ = -1;
			ⲆⲆⵠᐃᐃ = 0;
			ᐃΔⵠᐃⲆᐃⲆ()
		};
		this.ΔⵠΔ = function() {
			this.ᐃᐃΔᐃΔᐃⲆ.translate.x = Math.floor(ⲆⵠᐃΔ - 275);
			this.ᐃᐃΔᐃΔᐃⲆ.translate.y = Math.floor(Δⵠᐃᐃ - this.ᐃᐃΔᐃΔᐃⲆ.height - 28);
			ⲆΔⲆⵠ.ΔⲆⵠⵠⵠ.translate.x = this.ᐃᐃΔᐃΔᐃⲆ.translate.x - 350;
			ⲆΔⲆⵠ.ΔⲆⵠⵠⵠ.translate.y = this.ᐃᐃΔᐃΔᐃⲆ.translate.y + ⲆⲆᐃ;
			ⲆΔⲆⵠ.ΔⲆⵠⵠⵠ.ΔⵠΔ();
			if (ⵠⲆⲆⵠΔ != ⲆⲆⵠᐃᐃ || ⵠⵠΔⵠⲆ != -1) {
				var ΔᐃΔⵠ = Ⲇⵠⵠᐃ;
				if (ⵠⲆⲆⵠΔ != ⲆⲆⵠᐃᐃ) {
					var ΔᐃΔⵠ = 1500 / (ⲆⲆⵠᐃᐃ + ΔᐃⵠⲆ) - 50
				}
				if (-1 != ⵠⵠΔⵠⲆ) {
					var ΔᐃΔⵠ = -(1750 / (ᐃⵠⲆᐃΔ - ⵠⵠΔⵠⲆ + 1) - 48)
				}
				this.ᐃᐃΔᐃΔᐃⲆ.translate.y -= ΔᐃΔⵠ
			}
			this.ᐃᐃΔᐃΔᐃⲆ.ΔⵠΔ()
		};
		this.ᐃⵠΔᐃ = function() {
			ⵠⵠΔⵠᐃⲆΔ();
			ⲆΔⵠ.alert.ᐃⵠΔᐃ(ᐃ[448], ᐃ[76])
		}
	}

	function ⵠΔΔⵠⵠᐃⲆᐃⵠ(ⲆᐃⵠΔᐃΔᐃ, ΔΔⲆᐃⵠᐃᐃ, ⵠΔᐃᐃΔⲆⲆ) {
		ⲆⵠⵠᐃΔⵠⵠ(ⵠᐃΔᐃⵠ, ⲆᐃⵠΔᐃΔᐃ, ΔΔⲆᐃⵠᐃᐃ, ⵠΔᐃᐃΔⲆⲆ);
		const ᐃΔⲆⲆᐃⲆⲆ = ⵠⲆⵠⵠⲆᐃⲆ(Δⵠⵠᐃ[Ⲇⵠⵠᐃ], Δⵠⵠᐃ[ΔⲆⵠⲆ], Δⵠⵠᐃ[2], Δⵠⵠᐃ[0], Δⵠⵠᐃ[ⲆⵠⲆ]);
		const ⵠᐃⲆⵠⲆᐃΔⲆΔ = ΔΔⲆⲆⵠΔⵠ(Δⵠⵠᐃ[2], Δⵠⵠᐃ[Δⵠⵠ], Δⵠⵠᐃ[ΔΔⵠ], Δⵠⵠᐃ[ᐃᐃⲆⵠ], Δⵠⵠᐃ[0]);
		const ⲆⲆΔⵠⲆⵠᐃᐃᐃ = (63724 | ᐃΔⲆⲆᐃⲆⲆ) & ~(ᐃΔⲆⲆᐃⲆⲆ & 63724);
		return ⲆⲆΔⵠⲆⵠᐃᐃᐃ
	}

	function ᐃⲆⵠⵠΔᐃᐃ(ⲆⲆⵠΔᐃⲆⵠⵠⵠ, ΔⲆᐃⵠⵠⲆᐃΔⲆ, ⵠⲆⵠⲆΔⵠᐃᐃΔ, ᐃᐃⲆᐃΔⵠⵠⲆⲆ, ⵠᐃⲆΔⵠⲆΔ, ⵠⵠⵠⵠΔⲆΔⲆⵠ) {
		const ΔⲆΔΔⵠᐃⲆ = ⲆⲆⵠΔᐃⲆⵠⵠⵠ ^ 5208;
		const ΔⵠᐃΔⲆᐃⲆ = ΔⲆᐃⵠⵠⲆᐃΔⲆ ^ 25198;
		const ⵠᐃⵠⲆΔᐃⵠⵠⲆ = (214013 * (ⵠⲆⵠⲆΔⵠᐃᐃΔ + 38305) + 2531011) % 4294967296;
		const ᐃΔΔΔΔⲆΔΔΔ = (1013904223 + 1664525 * (ᐃᐃⲆᐃΔⵠⵠⲆⲆ + 57420)) % 4294967296;
		const ᐃΔⲆⵠⵠᐃⵠᐃᐃ = (24 << (ⵠᐃⲆΔⵠⲆΔ >> 0 & 255)) + (16 << (ⵠᐃⲆΔⵠⲆΔ >> 24 & ⲆΔⲆⵠᐃΔᐃ)) + (0 << (ⵠᐃⲆΔⵠⲆΔ >> 8 & 255)) + (8 << (ⵠᐃⲆΔⵠⲆΔ >> 16 & 255));
		const ⵠⲆⲆⲆᐃⲆΔⵠᐃ = 35140 ^ ⵠⵠⵠⵠΔⲆΔⲆⵠ;
		const ⵠΔᐃⲆΔᐃΔ = ΔⵠⵠⲆⵠᐃΔ(ΔⲆΔΔⵠᐃⲆ, ΔⵠᐃΔⲆᐃⲆ, ⵠᐃⵠⲆΔᐃⵠⵠⲆ, ᐃΔΔΔΔⲆΔΔΔ, ᐃΔⲆⵠⵠᐃⵠᐃᐃ);
		const ᐃᐃΔΔⵠΔΔᐃᐃ = ⵠᐃᐃⵠᐃⲆⲆ(ⵠⲆⲆⲆᐃⲆΔⵠᐃ, ΔⲆΔΔⵠᐃⲆ, ΔⵠᐃΔⲆᐃⲆ);
		const ⵠΔⲆⵠⲆⲆΔⲆΔ = ~(38317 & ⵠΔᐃⲆΔᐃΔ) & 38317 | ~(38317 & ⵠΔᐃⲆΔᐃΔ) & ⵠΔᐃⲆΔᐃΔ;
		return ⵠΔⲆⵠⲆⲆΔⲆΔ
	}

	function ΔΔⲆⵠⲆᐃⲆ(ⵠⵠᐃΔⲆΔΔ, ᐃᐃⵠⵠⵠ, ᐃⵠⵠΔⵠⵠᐃ, ⵠⲆᐃⲆⲆⲆⵠ) {
		const ⲆᐃΔⵠⲆΔΔ = ⵠⵠᐃΔⲆΔΔ ^ 14882;
		const ᐃΔᐃΔⵠⵠᐃ = (ⵠᐃⵠ << (ᐃᐃⵠⵠⵠ >> 16 & 255)) + (16 << (ᐃᐃⵠⵠⵠ >> 0 & 255)) + (24 << (ᐃᐃⵠⵠⵠ >> 24 & 255)) + (8 << (ᐃᐃⵠⵠⵠ >> 8 & 255));
		const ⵠΔⵠᐃⲆΔᐃ = (1013904223 + (31545 + ᐃⵠⵠΔⵠⵠᐃ) * 1664525) % 4294967296;
		const ⵠᐃΔⵠⵠΔᐃⵠΔ = ~(ⵠⲆᐃⲆⲆⲆⵠ & 8004) & ⵠⲆᐃⲆⲆⲆⵠ | ~(ⵠⲆᐃⲆⲆⲆⵠ & 8004) & 8004;
		const ᐃⵠΔⵠΔΔⲆΔΔ = ΔΔⵠᐃⵠΔΔ(ⲆᐃΔⵠⲆΔΔ, ᐃΔᐃΔⵠⵠᐃ, ⵠΔⵠᐃⲆΔᐃ);
		const ΔⲆⵠᐃⲆⲆⲆⵠⲆ = ⲆⵠΔΔⵠᐃΔ(ⵠᐃΔⵠⵠΔᐃⵠΔ, ⲆᐃΔⵠⲆΔΔ, ᐃΔᐃΔⵠⵠᐃ, ⵠΔⵠᐃⲆΔᐃ);
		const ⵠΔᐃΔᐃΔⵠⲆⵠ = ᐃⵠΔⵠΔΔⲆΔΔ ^ 55245;
		return ⵠΔᐃΔᐃΔⵠⲆⵠ
	}
	var ᐃⵠⲆΔⲆ = {
		"ⵠΔⵠⵠΔ": 1,
		"ΔΔⵠΔΔⲆᐃ": 1
	};
	var ᐃᐃΔⲆ = {
		"ⲆⲆᐃⲆⲆΔΔ": 46e4,
		"ΔΔⲆⵠᐃ": ᐃⲆⲆ,
		"ΔⵠⵠⵠⵠⵠΔⲆᐃ": 12,
		"ⵠᐃⵠⲆⵠ": ΔΔⵠⲆ,
		"ΔⵠᐃⲆᐃⲆΔⲆⲆ": 5e3,
		"ᐃᐃⲆⵠᐃⲆⲆ": 3e3,
		"ⲆΔᐃⵠᐃⲆᐃⵠⲆ": ⲆⵠΔΔⲆ,
		"ᐃᐃᐃ": ⵠⲆⵠⲆⵠ,
		"ΔⲆⲆⲆⵠΔⵠ": ⵠⲆᐃᐃⲆ,
		"ᐃⲆΔᐃⲆᐃΔⵠⲆ": 5e3,
		"ΔᐃⲆᐃ": 8,
		"ᐃΔᐃΔⵠᐃΔᐃⲆ": 5e3,
		"ᐃⵠⵠⵠⵠ": 3
	};
	var ᐃⲆΔⲆᐃ = [];
	ᐃⲆΔⲆᐃ[-1] = ᐃᐃΔⲆ.ΔΔⲆⵠᐃ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠΔⲆΔᐃ] = ᐃᐃΔⲆ.ΔΔⲆⵠᐃ;
	var ΔᐃⲆⲆⵠΔⲆᐃⵠ = ⲆⵠᐃΔᐃⵠⲆ["Math"].acos;
	ⲆⵠᐃΔᐃⵠⲆ["Math"].acos = ⲆⵠᐃΔᐃⵠⲆ["Math"].asin;
	ⲆⵠᐃΔᐃⵠⲆ["Math"].asin = ΔᐃⲆⲆⵠΔⲆᐃⵠ;
	var ⵠⵠⵠⵠⲆΔΔᐃⲆ = ⲆⵠᐃΔᐃⵠⲆ["Math"].cos;
	ⲆⵠᐃΔᐃⵠⲆ["Math"].cos = ⲆⵠᐃΔᐃⵠⲆ["Math"].sin;
	ⲆⵠᐃΔᐃⵠⲆ["Math"].sin = ⵠⵠⵠⵠⲆΔΔᐃⲆ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ᐃᐃⲆⵠⲆ] = ᐃᐃΔⲆ.ΔΔⲆⵠᐃ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠⲆΔΔΔΔᐃⲆⲆ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ᐃᐃΔᐃⵠ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠⲆⲆⲆΔ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠᐃⲆᐃᐃ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠᐃⵠΔⲆ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ΔΔᐃᐃᐃ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ᐃⲆΔⵠᐃ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⲆⵠⲆΔΔ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⲆΔᐃⲆΔ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⲆⲆᐃΔΔ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠᐃᐃⲆᐃ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ΔᐃΔⲆⲆ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ᐃΔⵠⵠⵠ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⲆⲆΔⲆᐃ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠⲆⲆΔⲆ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ΔᐃΔΔΔᐃⵠᐃΔ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠᐃⲆΔᐃ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ᐃⵠᐃⵠᐃ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ΔⲆⵠᐃᐃ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠⲆᐃⲆᐃ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠᐃⲆᐃΔ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ᐃΔΔᐃⵠ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⲆΔᐃⲆⲆ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠⵠⵠΔᐃᐃΔⲆⵠ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ΔᐃΔⵠⲆ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ᐃⵠⵠΔᐃ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ᐃⲆᐃⵠⵠ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠᐃᐃᐃⵠ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ᐃᐃⵠᐃΔ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ΔΔᐃⲆΔ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ᐃᐃᐃⲆΔ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⲆⲆⲆᐃΔ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠΔⵠᐃᐃ] = ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ᐃⵠⵠⵠⵠ] = ᐃᐃΔⲆ.ᐃⵠⵠⵠⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠⵠⲆⲆΔ] = ᐃᐃΔⲆ.ᐃⵠⵠⵠⵠ;
	ᐃⲆΔⲆᐃ[ΔⲆ.ⵠᐃᐃΔⵠ] = ᐃᐃΔⲆ.ᐃⵠⵠⵠⵠ;
	const ⵠᐃΔᐃΔΔⲆ = 14894700;
	const ⵠⲆᐃᐃⲆΔΔ = ⵠᐃΔᐃΔΔⲆ["ᐃΔΔⲆⲆΔⲆᐃⵠ"];
	const ⲆΔΔᐃΔΔᐃ = `const ⵠⵠᐃⵠᐃⲆᐃ = (typeof ⵠᐃΔΔⲆ === "${ⵠⲆᐃᐃⲆΔΔ}") ? 1 : 0; return ⵠⵠᐃⵠᐃⲆᐃ;`;

	function ⵠᐃΔΔⲆ() {
		ⵠⲆᐃᐃⲆΔΔ;
		ⵠᐃΔᐃΔΔⲆ();
		return ⲆΔΔᐃΔΔᐃ
	}
	const ⵠⵠᐃⵠᐃⲆᐃ = 15511993;
	const ⵠΔⵠⵠΔΔΔ = new Function(ⵠᐃΔΔⲆ + ⲆΔΔᐃΔΔᐃ);
	const ⲆΔᐃᐃΔⲆⲆ = 15461390;
	if (ⵠΔⵠⵠΔΔΔ(ⵠⵠᐃⵠᐃⲆᐃ, ⲆΔᐃᐃΔⲆⲆ) === 1) {
		const ⵠᐃΔᐃΔΔⲆ = ⲆⵠᐃΔᐃⵠⲆ.setInterval;
		const ⵠⲆᐃᐃⲆΔΔ = ⵠᐃΔᐃΔΔⲆ;
		const ᐃΔΔⲆⲆΔⲆᐃⵠ = function() {
			ⵠᐃΔᐃΔΔⲆ(ᐃΔΔⲆⲆΔⲆᐃⵠ, 4603);
			ⵠⲆᐃᐃⲆΔΔ(ᐃΔΔⲆⲆΔⲆᐃⵠ, 7381)
		};
		ᐃΔΔⲆⲆΔⲆᐃⵠ()
	}
	ᐃⲆΔⲆᐃ[ΔⲆ.ⲆΔⵠᐃⲆ] = ᐃᐃΔⲆ.ᐃⵠⵠⵠⵠ;
	ⲆᐃᐃΔ = [];
	ⲆᐃᐃΔ[ᐃⲆΔ] = ⲆⲆᐃⲆ;
	ⲆᐃᐃΔ[1] = 1;
	ⲆᐃᐃΔ[ⵠⲆᐃⵠ] = 1;
	ⲆᐃᐃΔ[3] = ΔΔΔᐃ;
	ⲆᐃᐃΔ[4] = 0;
	ⲆᐃᐃΔ[Δᐃᐃⵠ] = Δⵠⵠ;
	ⲆᐃᐃΔ[6] = 0;
	ⲆᐃᐃΔ[7] = ⲆⲆᐃⲆ;
	ⲆᐃᐃΔ[8] = 0;
	ⲆᐃᐃΔ[ⵠⵠⵠᐃⵠ] = ⵠⵠᐃ;
	ⲆᐃᐃΔ[ⲆΔᐃⵠΔ] = ⲆⲆᐃⵠ;
	ⲆᐃᐃΔ[11] = ᐃΔⲆΔ;
	ⲆᐃᐃΔ[12] = Δⵠᐃ;
	ⲆᐃᐃΔ[ᐃᐃΔΔΔ] = 1;
	ⲆᐃᐃΔ[14] = 1;
	ⲆᐃᐃΔ[15] = ᐃΔⲆΔ;
	ⲆᐃᐃΔ[16] = 0;
	ⲆᐃᐃΔ[17] = 0;
	ⲆᐃᐃΔ[ΔⲆᐃᐃᐃ] = 0;
	ⲆᐃᐃΔ[19] = 0;
	ⲆᐃᐃΔ[ⲆΔᐃΔⵠ] = ⲆⲆᐃⲆ;
	ⲆᐃᐃΔ[21] = 0;
	ⲆᐃᐃΔ[22] = 0;
	ⲆᐃᐃΔ[23] = ⵠⵠⵠⲆ;
	ⲆᐃᐃΔ[24] = 1;
	ⲆᐃᐃΔ[25] = 1;
	ⲆᐃᐃΔ[26] = 1;
	ⲆᐃᐃΔ[27] = ⲆⲆΔⵠ;
	ⲆᐃᐃΔ[28] = ᐃⵠᐃᐃ;
	ⲆᐃᐃΔ[29] = 1;
	ⲆᐃᐃΔ[30] = ⵠⵠⵠⲆ;
	ⲆᐃᐃΔ[31] = 1;
	ⲆᐃᐃΔ[32] = 1;
	const ⲆΔⲆᐃⵠΔᐃ = "";

	function ⵠⵠᐃⲆⲆΔΔΔᐃ(ΔΔⲆⵠΔᐃⲆΔⵠ) {
		if (ΔΔⲆⵠΔᐃⲆΔⵠ > 0) return ΔΔⲆⵠΔᐃⲆΔⵠ * ΔΔⲆⵠΔᐃⲆΔⵠ;
		else return ΔΔⲆⵠΔᐃⲆΔⵠ
	}

	function ΔⵠⲆⲆⲆⲆᐃ(ⲆⲆᐃⵠΔⵠΔᐃᐃ) {
		return ⲆⵠᐃΔᐃⵠⲆ.String.fromCharCode(ⲆⲆᐃⵠΔⵠΔᐃᐃ)
	}

	function ⲆᐃⵠⵠᐃⲆⵠ(ΔᐃΔⲆⵠⲆⵠ) {
		return ΔᐃΔⲆⵠⲆⵠ.map(ΔⵠⲆⲆⲆⲆᐃ).join(ⲆΔⲆᐃⵠΔᐃ)
	}

	function ⵠᐃⲆⲆⵠΔⵠ(ⵠⵠᐃⵠⲆⵠᐃⲆⵠ) {
		const ⵠⲆΔⵠΔⲆⵠ = ⵠⵠᐃⲆⲆΔΔΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[212]]();
		const ⵠᐃⵠⲆⲆᐃΔⲆⵠ = ⵠⲆΔⵠΔⲆⵠ.indexOf(ⵠⵠᐃⵠⲆⵠᐃⲆⵠ);
		return ⵠᐃⵠⲆⲆᐃΔⲆⵠ !== -1 ? 1 : 0
	}
	const ΔΔᐃᐃⵠⲆΔ = ⵠᐃⲆⲆⵠΔⵠ(ⲆᐃⵠⵠᐃⲆⵠ([11616, 11616, 5123, 11398, 11398, 916, 916, 916, 5123]));
	if (ΔΔᐃᐃⵠⲆΔ === 0) {
		const ΔΔᐃᐃⵠⲆΔ = function() {
			ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("mousemove", (function() {
				ΔΔᐃᐃⵠⲆΔ()
			}))
		};
		ΔΔᐃᐃⵠⲆΔ()
	}
	ⲆᐃᐃΔ[33] = 1;
	ⲆᐃᐃΔ[34] = 1;
	ⲆᐃᐃΔ[35] = 1;
	ⲆᐃᐃΔ[36] = ΔΔⵠ;
	ⲆᐃᐃΔ[37] = ⲆⲆⵠ;
	ⲆᐃᐃΔ[38] = 1;
	ⲆᐃᐃΔ[40] = ᐃⲆᐃ;
	ⲆᐃᐃΔ[41] = ΔᐃⲆⲆ;
	ⲆᐃᐃΔ[42] = ⵠΔΔⲆ;
	ⲆᐃᐃΔ[50] = 1;
	ⲆᐃᐃΔ[51] = ⵠᐃᐃ;
	ⲆᐃᐃΔ[52] = 1;
	ⲆᐃᐃΔ[55] = 0;
	ⲆᐃᐃΔ[56] = ⵠⵠΔΔ;
	ⲆᐃᐃΔ[57] = 0;
	ⲆᐃᐃΔ[58] = 0;
	ΔⵠⲆⲆᐃ = [];
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⲆⵠᐃΔᐃ] = ⵠⵠⵠ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔⲆⲆΔᐃ] = ΔᐃⲆⲆ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ᐃᐃⲆⲆΔ] = 0;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ᐃⲆⵠⲆᐃ] = ⲆⲆᐃ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⲆᐃⵠΔΔ] = -1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⲆΔⵠⲆⵠ] = -ⵠᐃᐃ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔⵠΔⲆⵠ] = 0;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⵠⵠΔⲆΔ] = ⵠΔⵠᐃ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔⲆᐃⲆᐃ] = 0;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔΔΔⵠᐃ] = 0;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⲆⲆΔⵠᐃ] = ⵠⲆⵠⲆ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⵠᐃᐃᐃΔ] = ⲆⵠⲆ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ᐃⵠⵠᐃΔ] = ᐃⲆⲆ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⵠⲆⵠᐃΔ] = Δⵠᐃ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔΔⵠΔᐃ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ᐃᐃⵠᐃᐃ] = ⲆⵠⲆ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔΔⵠᐃΔ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ᐃⵠΔⵠΔ] = 0;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔᐃⵠΔᐃ] = Δⵠᐃ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔⲆⲆᐃⲆ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ᐃⲆΔΔᐃ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔⲆⲆⲆΔ] = ᐃΔΔⲆ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⲆⲆΔᐃΔ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⵠⲆΔⲆΔ] = ᐃⲆΔᐃ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⲆᐃⵠΔⲆ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⲆᐃΔⲆⲆ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔᐃᐃⲆⲆ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⲆΔΔᐃᐃ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ᐃᐃΔΔⲆ] = ΔⲆⵠⲆ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⵠΔΔᐃⵠ] = 0;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ᐃⵠⲆⵠⵠ] = ⵠᐃᐃ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⲆΔⵠΔⲆ] = ⲆⵠⲆ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ⵠᐃⵠⵠᐃ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.Ⲇᐃⵠᐃᐃ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔⲆᐃⲆΔ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔⵠⲆⲆⵠ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ΔⵠᐃΔΔ] = ⲆⵠΔΔ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ᐃⲆⲆⵠᐃ] = 1;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ᐃⵠⵠΔⵠ] = ⵠⵠΔΔ;
	ΔⵠⲆⲆᐃ[ᐃᐃᐃ.ᐃⵠⲆⲆⵠ] = ⲆⲆⲆᐃ;
	var ⲆᐃΔΔΔ = {
		"ⲆΔᐃΔΔⲆᐃ": {
			"ᐃΔΔⵠⲆ": null,
			path: [ᐃ[93]],
			"ᐃᐃ": {
				d1: [90391, 300, false],
				d2: [90684, 300, Ⲇⵠᐃⵠᐃ],
				d0: [90086, 300, false]
			},
			sample: {
				d0: ᐃᐃΔⲆ.ΔᐃⲆᐃ,
				d1: ᐃᐃΔⲆ.ΔᐃⲆᐃ,
				d2: ᐃᐃΔⲆ.ΔᐃⲆᐃ
			}
		},
		"ᐃⵠΔᐃⵠⵠⵠ": {
			"ᐃΔΔⵠⲆ": null,
			path: [ᐃ[93]],
			"ᐃᐃ": {
				p1: [89549, 300, false],
				p2: [89815, 300, ᐃⵠᐃΔⵠ],
				p0: [89303, 300, false]
			},
			sample: {
				p0: ᐃᐃΔⲆ.ΔᐃⲆᐃ,
				p1: ᐃᐃΔⲆ.ΔᐃⲆᐃ,
				p2: ᐃᐃΔⲆ.ΔᐃⲆᐃ
			}
		},
		"ⵠᐃΔⵠΔᐃⲆ": {
			"ᐃΔΔⵠⲆ": null,
			path: [ᐃ[93]],
			"ᐃᐃ": {
				w3: [89025, 300, false],
				w2: [88751, 300, false],
				w0: [88195, 300, ⵠⲆᐃⵠⵠ],
				w1: [88473, 300, false]
			},
			sample: {
				w0: ᐃᐃΔⲆ.ΔᐃⲆᐃ,
				w1: ᐃᐃΔⲆ.ΔᐃⲆᐃ,
				w2: ᐃᐃΔⲆ.ΔᐃⲆᐃ,
				w3: ᐃᐃΔⲆ.ΔᐃⲆᐃ
			}
		},
		"ᐃⵠⵠⵠⵠⵠᐃ": {
			"ᐃΔΔⵠⲆ": null,
			path: [ᐃ[93]],
			"ᐃᐃ": {
				"ΔⵠᐃⵠⲆⲆᐃ": [19882, 8301, true],
				"ⲆⵠⵠⵠⲆΔᐃ": [91022, 400, false],
				"ᐃⵠΔΔⲆ": [12356, 6965, true],
				"ΔᐃⲆᐃᐃⵠΔ": [3100, 8800, ᐃᐃΔⵠΔ],
				"ⲆᐃⵠⵠΔΔⲆ": [66961, 21223, ᐃΔΔΔΔ],
				"ⵠΔⲆⲆⲆⲆΔ": [32604, 21890, ᐃⵠⲆⲆᐃ],
				"ᐃⵠΔⵠᐃⵠⲆ": [66961, 21223, ΔⲆΔⵠⲆ],
				"ⵠᐃᐃΔΔⲆⲆ": [31658, 813, true],
				"ᐃᐃⲆⵠⵠ": [28380, 1797, true],
				"ᐃᐃᐃⲆΔΔⵠ": [92249, 500, ᐃΔᐃᐃΔ],
				"ⲆΔⲆᐃΔ": [91431, 400, false],
				"ΔᐃⵠⲆⵠⲆᐃ": [54524, 11393, ⵠⲆᐃⵠᐃ],
				"ΔᐃⲆΔⲆⲆᐃ": [66014, 925, true],
				"ⵠΔᐃⵠⲆᐃΔⵠᐃ": [100, 2800, true],
				"ⲆᐃΔΔⲆⲆⵠ": [30562, 655, ᐃⵠⲆⵠᐃ]
			},
			sample: {
				"ⵠΔᐃⵠⲆᐃΔⵠᐃ": 1,
				"ΔᐃⲆᐃᐃⵠΔ": 1,
				"ΔⵠᐃⵠⲆⲆᐃ": 1,
				"ⵠΔⲆⲆⲆⲆΔ": ⲆⲆΔⵠ,
				"ΔᐃⵠⲆⵠⲆᐃ": ᐃⵠⵠⵠ,
				"ᐃⵠΔⵠᐃⵠⲆ": ΔⲆⵠⲆ,
				"ⲆᐃⵠⵠΔΔⲆ": 1,
				"ᐃⵠΔΔⲆ": ᐃᐃΔⲆ.ΔᐃⲆᐃ,
				"ᐃᐃⲆⵠⵠ": ᐃᐃΔⲆ.ΔᐃⲆᐃ,
				"ⲆᐃΔΔⲆⲆⵠ": ᐃᐃΔⲆ.ΔᐃⲆᐃ,
				"ⵠᐃᐃΔΔⲆⲆ": ᐃᐃΔⲆ.ΔᐃⲆᐃ,
				"ΔᐃⲆΔⲆⲆᐃ": ᐃᐃΔⲆ.ΔᐃⲆᐃ,
				"ⲆⵠⵠⵠⲆΔᐃ": ᐃᐃΔⲆ.ᐃᐃᐃ,
				"ⲆΔⲆᐃΔ": ᐃᐃΔⲆ.ᐃᐃᐃ,
				"ᐃᐃᐃⲆΔΔⵠ": ᐃᐃΔⲆ.ᐃᐃᐃ
			}
		}
	};

	function ᐃⲆⵠΔⲆⵠΔ(ⵠᐃᐃⲆⲆⲆᐃ, ᐃⵠΔⲆΔΔᐃ, ⲆᐃⵠⲆΔᐃᐃ, ΔΔᐃⲆⲆᐃⲆ, ⵠᐃΔΔΔΔΔ) {
		const ΔⵠⵠⵠⲆⵠⵠ = ((23315 + ⵠᐃᐃⲆⲆⲆᐃ) * 1664525 + 1013904223) % 4294967296;
		const ⲆⲆΔⵠᐃⲆⵠ = ((22552 + ᐃⵠΔⲆΔΔᐃ) * 2147483629 + 2147483587) % 2147483647;
		const ᐃⲆΔΔᐃᐃᐃ = (1013904223 + (ⲆᐃⵠⲆΔᐃᐃ + 60) * 1664525) % 4294967296;
		const ⵠⲆᐃᐃⵠⵠᐃᐃⵠ = (60680 | ΔΔᐃⲆⲆᐃⲆ) & ~(60680 & ΔΔᐃⲆⲆᐃⲆ);
		const ΔⲆⲆⲆⲆⵠⵠⲆⵠ = ~(ⵠᐃΔΔΔΔΔ & 57963) & 57963 | ~(57963 & ⵠᐃΔΔΔΔΔ) & ⵠᐃΔΔΔΔΔ;
		const ΔⲆⵠⵠⵠⵠΔΔΔ = ⲆΔⵠΔΔⲆᐃ(ΔⵠⵠⵠⲆⵠⵠ, ⲆⲆΔⵠᐃⲆⵠ, ᐃⲆΔΔᐃᐃᐃ);
		const ΔᐃⲆᐃΔⵠⲆΔⲆ = ᐃⲆᐃᐃΔΔⵠ(ⵠⲆᐃᐃⵠⵠᐃᐃⵠ, ΔⲆⲆⲆⲆⵠⵠⲆⵠ, ΔⵠⵠⵠⲆⵠⵠ, ⲆⲆΔⵠᐃⲆⵠ, ᐃⲆΔΔᐃᐃᐃ);
		const ⲆΔΔᐃᐃΔⲆΔᐃ = (1664525 * (12746 + (ΔⲆⵠⵠⵠⵠΔΔΔ ^ ΔᐃⲆᐃΔⵠⲆΔⲆ)) + 1013904223) % 4294967296;
		return ⲆΔΔᐃᐃΔⲆΔᐃ
	}

	function ⲆⲆⵠᐃᐃⲆⵠ(ᐃΔᐃΔᐃᐃᐃ, ᐃΔⵠᐃⵠΔⲆ, ᐃᐃⲆⵠΔⵠᐃ, ΔⵠⲆᐃᐃⵠᐃ, ⵠⲆΔΔᐃ) {
		const ⲆⵠⲆᐃⵠⲆᐃ = (ᐃΔᐃΔᐃᐃᐃ | 41282) & ~(41282 & ᐃΔᐃΔᐃᐃᐃ);
		const ⵠⲆⲆᐃⲆⵠΔ = (12345 + (ᐃΔⵠᐃⵠΔⲆ + 781) * 1103515245) % 2147483648;
		const ⵠⲆᐃᐃⵠΔᐃ = ~(21989 & ᐃᐃⲆⵠΔⵠᐃ) & 21989 | ~(21989 & ᐃᐃⲆⵠΔⵠᐃ) & ᐃᐃⲆⵠΔⵠᐃ;
		const ᐃⵠⲆᐃⲆΔⲆ = ΔⵠⲆᐃᐃⵠᐃ ^ 35024;
		const ΔⲆⲆᐃᐃᐃⵠⵠⵠ = (0 << (ⵠⲆΔΔᐃ >> 8 & 255)) + (8 << (ⵠⲆΔΔᐃ >> 24 & ΔⵠΔΔⲆⲆⵠ)) + (16 << (ⵠⲆΔΔᐃ >> 0 & 255)) + (24 << (ⵠⲆΔΔᐃ >> 16 & 255));
		const ᐃΔᐃⵠⲆⵠΔ = ᐃⵠⲆⵠᐃⲆᐃ(ⲆⵠⲆᐃⵠⲆᐃ, ⵠⲆⲆᐃⲆⵠΔ, ⵠⲆᐃᐃⵠΔᐃ, ᐃⵠⲆᐃⲆΔⲆ, ΔⲆⲆᐃᐃᐃⵠⵠⵠ);
		const ⲆⲆᐃᐃⲆΔⵠ = ΔⲆΔⵠΔⲆⵠ(ⲆⵠⲆᐃⵠⲆᐃ, ⵠⲆⲆᐃⲆⵠΔ, ⵠⲆᐃᐃⵠΔᐃ, ᐃⵠⲆᐃⲆΔⲆ);
		const ⲆⲆΔⵠΔΔᐃⵠⲆ = (Δⵠⵠ << ((ᐃΔᐃⵠⲆⵠΔ ^ ⲆⲆᐃᐃⲆΔⵠ) >> 16 & ⵠΔⲆΔⲆⲆⲆ)) + (16 << ((ᐃΔᐃⵠⲆⵠΔ ^ ⲆⲆᐃᐃⲆΔⵠ) >> 0 & 255)) + (8 << ((ᐃΔᐃⵠⲆⵠΔ ^ ⲆⲆᐃᐃⲆΔⵠ) >> 24 & 255)) + (24 << ((ᐃΔᐃⵠⲆⵠΔ ^ ⲆⲆᐃᐃⲆΔⵠ) >> 8 & 255));
		return ⲆⲆΔⵠΔΔᐃⵠⲆ
	}
	var ΔⵠⵠΔᐃⵠᐃ = function(ⲆⲆΔⵠⵠ, Δᐃᐃ, ⵠΔⵠ, ⵠΔⲆᐃᐃᐃΔ, ᐃⲆΔΔⵠΔᐃ, ⵠⲆⵠⵠⵠⲆⲆ, ᐃΔΔⵠ, ᐃⵠΔⲆⵠΔΔ, ᐃΔⲆⲆᐃ, ⲆⵠΔΔᐃⵠⲆᐃⲆ, ΔⵠΔΔⲆΔΔ) {
		this.r = ⲆⵠⲆ;
		this.ⲆⲆΔⵠⵠ = ⲆⲆΔⵠⵠ;
		this.ᐃᐃⵠⵠᐃΔⲆ = ⲆⲆΔⵠⵠ;
		this.Δᐃᐃ = Δᐃᐃ;
		this.ⵠΔⵠ = ⵠΔⵠ;
		this.fade = ⵠΔⲆᐃᐃᐃΔ;
		this.ᐃⲆΔΔⵠΔᐃ = ᐃⲆΔΔⵠΔᐃ;
		this.ⵠⲆⵠⵠⵠⲆⲆ = ⵠⲆⵠⵠⵠⲆⲆ;
		this.ᐃΔΔⵠ = ᐃΔΔⵠ;
		this.ᐃⵠΔⲆⵠΔΔ = ᐃⵠΔⲆⵠΔΔ;
		this.source = ᐃΔⲆⲆᐃ;
		this.source.ΔΔΔᐃᐃⵠⲆ = ᐃΔⲆⲆᐃ.x + ᐃΔⲆⲆᐃ.w;
		this.source.ΔᐃⵠⲆᐃ = ᐃΔⲆⲆᐃ.y + ᐃΔⲆⲆᐃ.ΔⵠⲆ;
		this.ᐃⲆΔⵠⲆⲆᐃⲆⵠ = ⲆⵠΔΔᐃⵠⲆᐃⲆ;
		this.ⲆΔᐃⲆⲆⵠⲆ = ΔⵠΔΔⲆΔΔ;
		this.ΔⵠΔΔⲆΔΔ = 0;
		this.ᐃᐃΔᐃΔΔⲆ = {
			"ⵠⵠⵠΔ": ΔΔⵠⲆΔ,
			d: ᐃᐃᐃⲆⲆ
		};
		this.ⲆΔΔᐃⲆ = function() {
			this.ⲆⲆΔⵠⵠ -= ᐃⵠᐃⵠ;
			if (this.ⲆⲆΔⵠⵠ < 0) {
				this.ⲆⲆΔⵠⵠ = this.ᐃᐃⵠⵠᐃΔⲆ;
				var ᐃᐃⲆⲆ = ⲆᐃΔΔΔ.ᐃⵠⵠⵠⵠⵠᐃ.ᐃΔΔⵠⲆ[ᐃ[270]](this.Δᐃᐃ);
				var Ⲇᐃᐃᐃ = ⲆᐃΔΔΔ.ᐃⵠⵠⵠⵠⵠᐃ.ᐃΔΔⵠⲆ[ᐃ[270]](this.ⵠΔⵠ);
				if (ᐃᐃⲆⲆ && !Ⲇᐃᐃᐃ) {
					var ⵠΔΔ = this.ᐃΔΔⵠ[ᐃ[ΔᐃᐃᐃⲆΔΔ]](this.Δᐃᐃ) * ᐃⵠⲆΔⲆ.ⵠΔⵠⵠΔ;
					var ΔⲆⵠ = ᐃⵠⲆΔⲆ.ⵠΔⵠⵠΔ * (this.ⵠⲆⵠⵠⵠⲆⲆ * Math.random() + this.ᐃⲆΔΔⵠΔᐃ);
					this.ᐃΔΔⵠ[ᐃ[284]](ⵠΔΔ, ΔⲆⵠ, this.fade, this.Δᐃᐃ)
				} else if (!ᐃᐃⲆⲆ && Ⲇᐃᐃᐃ) {
					var ⵠΔΔ = ᐃⵠⲆΔⲆ.ⵠΔⵠⵠΔ * this.ᐃΔΔⵠ[ᐃ[ΔᐃΔⲆⵠ]](this.ⵠΔⵠ);
					var ΔⲆⵠ = (Math.random() * this.ⵠⲆⵠⵠⵠⲆⲆ + this.ᐃⲆΔΔⵠΔᐃ) * ᐃⵠⲆΔⲆ.ⵠΔⵠⵠΔ;
					this.ᐃΔΔⵠ[ᐃ[284]](ⵠΔΔ, ΔⲆⵠ, this.fade, this.ⵠΔⵠ)
				}
			}
		};
		this.transition = function() {
			this.ⲆⲆΔⵠⵠ = this.ᐃᐃⵠⵠᐃΔⲆ;
			this.ᐃᐃΔᐃΔΔⲆ.d = this.ᐃᐃΔᐃΔΔⲆ.ⵠⵠⵠΔ;
			if (ⵠⲆΔ.time) {
				this.ᐃΔΔⵠ[ᐃ[284]](ⵠⵠⲆΔ, ᐃⵠⲆΔⲆ.ⵠΔⵠⵠΔ * this.ᐃⲆΔΔⵠΔᐃ, this.ᐃⵠΔⲆⵠΔΔ, this.Δᐃᐃ);
				this.ᐃΔΔⵠ[ᐃ[23]](this.Δᐃᐃ);
				if (this.ᐃΔΔⵠ[ᐃ[270]](this.ⵠΔⵠ)) {
					var ⵠΔΔ = this.ᐃΔΔⵠ[ᐃ[9]](this.ⵠΔⵠ) * ᐃⵠⲆΔⲆ.ⵠΔⵠⵠΔ;
					this.ᐃΔΔⵠ[ᐃ[284]](ⵠΔΔ, 0, this.ᐃⵠΔⲆⵠΔΔ, this.ⵠΔⵠ)
				}
			} else {
				this.ᐃΔΔⵠ[ᐃ[284]](ⵠᐃⵠ, ᐃⵠⲆΔⲆ.ⵠΔⵠⵠΔ * this.ᐃⲆΔΔⵠΔᐃ, this.ᐃⵠΔⲆⵠΔΔ, this.ⵠΔⵠ);
				this.ᐃΔΔⵠ[ᐃ[23]](this.ⵠΔⵠ);
				if (this.ᐃΔΔⵠ[ᐃ[270]](this.Δᐃᐃ)) {
					var ⵠΔΔ = this.ᐃΔΔⵠ[ᐃ[ⵠⵠΔᐃΔⵠⲆ]](this.Δᐃᐃ) * ᐃⵠⲆΔⲆ.ⵠΔⵠⵠΔ;
					this.ᐃΔΔⵠ[ᐃ[284]](ⵠΔΔ, ⵠⵠΔΔ, this.ᐃⵠΔⲆⵠΔΔ, this.Δᐃᐃ)
				}
			}
		};
		this.check = function(ᐃⵠⲆ) {
			if (this.ΔⵠΔΔⲆΔΔ) {
				if (!ΔⲆᐃ.ⲆΔᐃⲆⲆⵠⲆ(ᐃⵠⲆ, this.ᐃⲆΔⵠⲆⲆᐃⲆⵠ)) {
					this.ΔⵠΔΔⲆΔΔ = ⲆⲆᐃⲆ;
					if (this.ᐃΔΔⵠ[ᐃ[270]](this.Δᐃᐃ)) {
						var ⵠΔΔ = ᐃⵠⲆΔⲆ.ⵠΔⵠⵠΔ * this.ᐃΔΔⵠ[ᐃ[ᐃΔⵠⲆⲆ]](this.Δᐃᐃ);
						this.ᐃΔΔⵠ[ᐃ[284]](ⵠΔΔ, 0, this.ᐃⵠΔⲆⵠΔΔ, this.Δᐃᐃ)
					}
					if (this.ᐃΔΔⵠ[ᐃ[270]](this.ⵠΔⵠ)) {
						var ⵠΔΔ = ᐃⵠⲆΔⲆ.ⵠΔⵠⵠΔ * this.ᐃΔΔⵠ[ᐃ[ⵠΔᐃΔΔⲆᐃ]](this.ⵠΔⵠ);
						this.ᐃΔΔⵠ[ᐃ[284]](ⵠΔΔ, 0, this.ᐃⵠΔⲆⵠΔΔ, this.ⵠΔⵠ)
					}
				} else if (!ⵠⲆⵠᐃ.transition && ⵠⲆΔ.ᐃᐃⵠΔⲆ.now < ᐃᐃΔⲆ.ⲆⲆᐃⲆⲆΔΔ) {
					if (ⵠⲆΔ.time) {
						if (!this.ᐃΔΔⵠ[ᐃ[270]](this.Δᐃᐃ)) {
							this.ᐃᐃΔᐃΔΔⲆ.d -= ᐃⵠᐃⵠ;
							if (0 > this.ᐃᐃΔᐃΔΔⲆ.d) this.transition()
						}
					} else {
						if (!this.ᐃΔΔⵠ[ᐃ[270]](this.ⵠΔⵠ)) {
							this.ᐃᐃΔᐃΔΔⲆ.d -= ᐃⵠᐃⵠ;
							if (ⵠⵠⵠ > this.ᐃᐃΔᐃΔΔⲆ.d) this.transition()
						}
					}
				}
			} else {
				if (ΔⲆᐃ.ⲆΔᐃⲆⲆⵠⲆ(ᐃⵠⲆ, this.ⲆΔᐃⲆⲆⵠⲆ)) {
					this.ΔⵠΔΔⲆΔΔ = Δⵠᐃ;
					if (!ⵠⲆⵠᐃ.transition && ᐃᐃΔⲆ.ⲆⲆᐃⲆⲆΔΔ > ⵠⲆΔ.ᐃᐃⵠΔⲆ.now) this.transition()
				}
			}
		};
		this.ΔⵠΔ = function(ᐃⵠⲆ, ⲆⵠⵠΔⵠ) {
			var Ⲇᐃ, ⲆⲆⲆ;
			if (ᐃⵠⲆ.x < this.source.x) Ⲇᐃ = ⵠⲆⵠᐃ.ΔᐃⲆΔᐃΔⵠ(this.source.x);
			else this.source.ΔΔΔᐃᐃⵠⲆ < ᐃⵠⲆ.x ? Ⲇᐃ = ⵠⲆⵠᐃ.ΔᐃⲆΔᐃΔⵠ(this.source.ΔΔΔᐃᐃⵠⲆ) : Ⲇᐃ = ⲆⵠⵠΔⵠ.x;
			if (ᐃⵠⲆ.y < this.source.y) ⲆⲆⲆ = ⵠⲆⵠᐃ.ΔᐃⵠⲆΔᐃΔ(this.source.y);
			else if (ᐃⵠⲆ.y > this.source.ΔᐃⵠⲆᐃ) ⲆⲆⲆ = ⵠⲆⵠᐃ.ΔᐃⵠⲆΔᐃΔ(this.source.ΔᐃⵠⲆᐃ);
			else ⲆⲆⲆ = ⲆⵠⵠΔⵠ.y;
			this.ᐃΔΔⵠ[ᐃ[399]](Ⲇᐃ, ⲆⲆⲆ, -.5, this.Δᐃᐃ);
			this.ᐃΔΔⵠ[ᐃ[399]](Ⲇᐃ, ⲆⲆⲆ, -.5, this.ⵠΔⵠ)
		}
	};

	function ΔⲆΔΔⲆⲆⲆΔⲆ(ⲆᐃⲆᐃᐃⲆΔ, ᐃⲆᐃᐃⲆⵠΔ, ⲆᐃⲆΔᐃᐃΔ, ΔᐃⲆᐃⲆᐃⲆ, ⲆᐃΔᐃⲆⵠᐃ) {
		ΔⵠΔⲆΔⵠᐃ(ⵠᐃΔᐃⵠ, ⲆᐃⲆᐃᐃⲆΔ, ᐃⲆᐃᐃⲆⵠΔ, ⲆᐃⲆΔᐃᐃΔ, ΔᐃⲆᐃⲆᐃⲆ, ⲆᐃΔᐃⲆⵠᐃ);
		const ΔΔⵠⵠⲆⵠΔᐃⵠ = ΔⲆΔⲆΔΔᐃ(Δⵠⵠᐃ[ⲆⲆᐃ], Δⵠⵠᐃ[1], Δⵠⵠᐃ[Ⲇᐃⵠⵠ]);
		const ⲆⲆᐃᐃⵠᐃΔⵠᐃ = ⲆⵠΔᐃΔΔⲆ(Δⵠⵠᐃ[ⵠᐃⵠⲆ], Δⵠⵠᐃ[ΔΔⲆΔ], Δⵠⵠᐃ[0], Δⵠⵠᐃ[ᐃⲆⲆ]);
		const ⲆⲆΔⲆᐃⵠᐃⵠⲆ = (16807 * (212 + (ΔΔⵠⵠⲆⵠΔᐃⵠ ^ ⲆⲆᐃᐃⵠᐃΔⵠᐃ)) + 0) % 2147483647;
		return ⲆⲆΔⲆᐃⵠᐃⵠⲆ
	}

	function ⵠΔⲆⲆᐃⲆΔ(ᐃΔᐃΔᐃᐃᐃ, ᐃΔⵠᐃⵠΔⲆ, ᐃᐃⲆⵠΔⵠᐃ, ΔⵠⲆᐃᐃⵠᐃ, ⵠⲆΔΔᐃ) {
		ᐃⲆⲆⵠᐃⵠⵠ(ⵠᐃΔᐃⵠ, ᐃΔᐃΔᐃᐃᐃ, ᐃΔⵠᐃⵠΔⲆ, ᐃᐃⲆⵠΔⵠᐃ, ΔⵠⲆᐃᐃⵠᐃ, ⵠⲆΔΔᐃ);
		const ⵠΔᐃΔⵠᐃΔ = ⲆⲆⵠᐃⲆⵠᐃ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[1], Δⵠⵠᐃ[2], Δⵠⵠᐃ[3], Δⵠⵠᐃ[4]);
		const ⵠΔΔᐃⲆⲆⲆΔᐃ = ⲆⲆⵠᐃⲆⵠᐃ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[1], Δⵠⵠᐃ[ᐃⲆⵠᐃ], Δⵠⵠᐃ[ⵠⵠⲆⲆ], Δⵠⵠᐃ[4]);
		const ⵠᐃⵠⵠᐃⵠᐃΔⲆ = ~(61183 & ⵠΔᐃΔⵠᐃΔ) & (61183 | ⵠΔᐃΔⵠᐃΔ);
		return ⵠᐃⵠⵠᐃⵠᐃΔⲆ
	}

	function ⲆΔⵠΔΔⲆᐃ(ⵠⵠᐃΔⲆΔⵠ, ⲆⲆᐃᐃᐃⵠᐃ, ΔᐃΔᐃⲆᐃⵠ) {
		const ⲆⵠⵠᐃⵠᐃⲆ = (24 << (ⵠⵠᐃΔⲆΔⵠ >> 16 & 255)) + (16 << (ⵠⵠᐃΔⲆΔⵠ >> ⵠⵠΔⲆⲆ & ΔⲆⵠᐃⲆⲆⵠ)) + (0 << (ⵠⵠᐃΔⲆΔⵠ >> 0 & ᐃⵠⵠⲆⲆⲆⲆ)) + (8 << (ⵠⵠᐃΔⲆΔⵠ >> 24 & 255));
		const ⲆⵠΔⲆΔΔⲆ = (2147483629 * (13326 + ⲆⲆᐃᐃᐃⵠᐃ) + 2147483587) % 2147483647;
		const ⲆΔΔⵠⵠᐃᐃ = ΔᐃΔᐃⲆᐃⵠ ^ 36682;
		const ⵠΔΔⵠⵠⲆᐃⵠΔ = ΔⵠⵠⲆⵠᐃΔ(ⲆⵠⵠᐃⵠᐃⲆ, ⲆⵠΔⲆΔΔⲆ, ⲆΔΔⵠⵠᐃᐃ, ⲆⵠⵠᐃⵠᐃⲆ, ⲆⵠΔⲆΔΔⲆ);
		const ᐃᐃᐃᐃⲆⵠΔΔᐃ = ⲆⵠⲆΔⲆⵠᐃΔΔ(ⲆΔΔⵠⵠᐃᐃ, ⲆⵠⵠᐃⵠᐃⲆ, ⲆⵠΔⲆΔΔⲆ, ⲆΔΔⵠⵠᐃᐃ);
		const ⵠⵠⵠΔᐃᐃᐃⵠⵠ = (2147483587 + 2147483629 * (31887 + (ⵠΔΔⵠⵠⲆᐃⵠΔ ^ ᐃᐃᐃᐃⲆⵠΔΔᐃ))) % 2147483647;
		return ⵠⵠⵠΔᐃᐃᐃⵠⵠ
	}
	let ⵠᐃΔᐃⵠ = ⵠⵠᐃⵠΔ;
	let Δⵠⵠᐃ = Ⲇᐃᐃⵠᐃ;
	const ΔᐃᐃⲆᐃⲆᐃ = ⵠⲆᐃⵠⲆⲆⵠ;
	ⵠⲆᐃⵠⲆⲆⵠ = function() {
		ⵠᐃΔᐃⵠ = ⵠⵠⵠᐃⵠᐃⲆ(ΔΔⵠΔⲆⵠᐃ(ⲆⲆᐃⲆⲆⲆⵠ));
		Δⵠⵠᐃ = ΔⲆᐃᐃⵠᐃⲆ(ⵠᐃΔᐃⵠ);
		ΔᐃᐃⲆᐃⲆᐃ && ΔᐃᐃⲆᐃⲆᐃ()
	};
	ΔᐃⲆΔⵠ = {
		"ⵠᐃΔΔΔΔⵠ": ᐃΔΔⲆ,
		"ᐃⲆᐃⵠⲆ": 2,
		"ΔⵠᐃⲆⲆᐃΔ": 100,
		"ⲆᐃΔᐃΔⵠⵠ": Ⲇⵠᐃᐃ,
		"ⵠⵠΔⵠⵠⵠⲆ": 300,
		"ΔⲆⵠⵠⲆᐃᐃ": 4,
		"ᐃⲆᐃⵠⵠⵠΔᐃⵠ": .4,
		"ΔΔⲆⲆΔⲆΔ": Δⵠⵠ,
		"ᐃΔⵠⵠΔⵠⵠᐃⵠ": .2,
		"ΔⵠⲆⵠᐃᐃⲆ": ᐃᐃΔⵠⵠ,
		"ᐃᐃᐃᐃᐃⵠⵠᐃⵠ": .2,
		"ⲆⵠⲆΔⵠᐃⵠ": 100,
		"ⵠⲆⵠᐃΔᐃⲆᐃᐃ": .2,
		"ⵠⲆᐃΔΔⵠⲆ": ⲆΔΔⲆ
	};
	var ΔⲆⵠⲆⵠᐃⵠ = function(ᐃᐃΔⲆⲆⲆΔ, ᐃΔΔⵠ, ⲆΔⵠᐃⵠ) {
		this.ᐃᐃΔⲆⲆⲆΔ = ᐃᐃΔⲆⲆⲆΔ;
		this.c = 0;
		this.ᐃΔΔⵠ = ᐃΔΔⵠ;
		this.ⲆΔⵠᐃⵠ = ⲆΔⵠᐃⵠ;
		this.max = ⲆΔⵠᐃⵠ.length;
		this.play = function() {
			this.c = (this.c + 1) % this.max;
			var ΔΔ = this.ⲆΔⵠᐃⵠ[this.c];
			this.ᐃᐃΔⲆⲆⲆΔ.ᐃᐃⵠⵠᐃⲆⲆ(this.ᐃΔΔⵠ, ΔΔ);
			this.ᐃΔΔⵠ[ᐃ[23]](ΔΔ)
		}
	};
	var ᐃᐃᐃᐃΔⵠⲆⲆⲆ = function(ⲆⲆᐃⲆᐃ) {
		this.ΔⲆⵠⲆᐃⲆΔ = 1;
		this.ᐃⲆᐃⲆ = ⲆᐃΔⵠ;
		this.mode = -ⲆⲆⵠ;
		this.ᐃᐃⲆⵠⵠ = ⵠⲆⵠᐃ.sample.ᐃᐃⲆⵠⵠ[ⲆⲆᐃⲆᐃ];
		this.ⲆᐃΔΔⲆⲆⵠ = ⵠⲆⵠᐃ.sample.ⲆᐃΔΔⲆⲆⵠ[ⲆⲆᐃⲆᐃ];
		this.ⵠᐃᐃΔΔⲆⲆ = ⵠⲆⵠᐃ.sample.ⵠᐃᐃΔΔⲆⲆ[ⲆⲆᐃⲆᐃ];
		this.ΔᐃⲆΔⲆⲆᐃ = ⵠⲆⵠᐃ.sample.ΔᐃⲆΔⲆⲆᐃ[ⲆⲆᐃⲆᐃ];
		this.ⵠᐃⵠⵠᐃⵠΔ = new ΔⲆⵠⲆⵠᐃⵠ(this, ⲆᐃΔΔΔ.ᐃⵠΔᐃⵠⵠⵠ.ᐃΔΔⵠⲆ, ⵠⲆⵠᐃ.ᐃᐃᐃⵠⵠ.ⵠᐃⵠⵠᐃⵠΔ[ⲆⲆᐃⲆᐃ]);
		this.ᐃᐃⵠⵠΔ = new ΔⲆⵠⲆⵠᐃⵠ(this, ⲆᐃΔΔΔ.ⵠᐃΔⵠΔᐃⲆ.ᐃΔΔⵠⲆ, ⵠⲆⵠᐃ.ᐃᐃᐃⵠⵠ.ᐃᐃⵠⵠΔ[ⲆⲆᐃⲆᐃ]);
		this.ΔΔⲆΔⵠ = new ΔⲆⵠⲆⵠᐃⵠ(this, ⲆᐃΔΔΔ.ⲆΔᐃΔΔⲆᐃ.ᐃΔΔⵠⲆ, ⵠⲆⵠᐃ.ᐃᐃᐃⵠⵠ.ΔΔⲆΔⵠ[ⲆⲆᐃⲆᐃ]);
		this.ⲆⲆᐃⲆᐃ = ⲆⲆᐃⲆᐃ;
		this.x = 0;
		this.y = 0;
		this.ⵠⲆΔΔⲆ = 0;
		this.ⲆⲆΔⵠⵠ = ΔᐃⲆΔⵠ.ⲆⵠΔΔⵠΔΔⵠⵠ;
		this.ΔⵠΔΔ = {
			x: 0,
			y: 0
		};
		this.ᐃⵠΔⵠⵠ = ⲆᐃΔΔΔ.ᐃⵠⵠⵠⵠⵠᐃ.ᐃΔΔⵠⲆ;
		this.ⲆᐃᐃΔᐃⵠΔΔⵠ = function(ΔⵠΔⲆⵠⵠⲆ) {
			if (ΔⵠΔⲆⵠⵠⲆ === ᐃᐃΔⲆ.ΔΔⲆⵠᐃ) this.ⵠᐃⵠⵠᐃⵠΔ.play();
			else if (ΔⵠΔⲆⵠⵠⲆ === ᐃᐃΔⲆ.ⵠᐃⵠⲆⵠ) this.ᐃᐃⵠⵠΔ.play();
			else ᐃᐃΔⲆ.ᐃⵠⵠⵠⵠ === ΔⵠΔⲆⵠⵠⲆ && this.ΔΔⲆΔⵠ.play()
		};
		this.ⵠⵠᐃⵠΔⵠΔ = function(ᐃⵠⲆ) {
			if (0 < ᐃⵠⲆ.ᐃᐃⵠⲆⵠⲆΔ) return ΔᐃⲆΔⵠ.ᐃⲆᐃⵠⲆ;
			else if (0 < ᐃⵠⲆ.ᐃⲆⲆΔⵠΔⲆ) return ΔᐃⲆΔⵠ.ⵠᐃΔΔΔΔⵠ;
			else if (ᐃⵠⲆ.ΔΔⵠⵠⵠ > ⵠΔΔⲆ || ᐃⵠⲆ.ⵠΔᐃⲆⵠ > ⲆⲆᐃ) return ΔᐃⲆΔⵠ.ⲆᐃΔᐃΔⵠⵠ;
			else return ΔᐃⲆΔⵠ.ΔΔⲆⲆΔⲆΔ
		};
		this.ᐃⵠΔᐃᐃ = function(ᐃⲆᐃⲆ) {
			this.ΔⲆⵠⲆᐃⲆΔ = 0;
			this.ᐃⲆᐃⲆ = ᐃⲆᐃⲆ;
			var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ᐃⲆᐃⲆ];
			ᐃⵠⲆ.ⲆⲆᐃⲆᐃ = this.ⲆⲆᐃⲆᐃ;
			this.mode = this.ⵠⵠᐃⵠΔⵠΔ(ᐃⵠⲆ);
			this.ΔⵠΔΔ.x = ᐃⵠⲆ.x;
			this.ΔⵠΔΔ.y = ᐃⵠⲆ.y
		};
		this.ⵠⵠΔⵠⵠⲆΔ = function() {
			this.ΔⲆⵠⲆᐃⲆΔ = ΔΔΔᐃ;
			this.mode = -1;
			this.ᐃⵠΔⵠⵠ[ᐃ[470]](this.ᐃᐃⲆⵠⵠ);
			this.ᐃⵠΔⵠⵠ[ᐃ[470]](this.ⲆᐃΔΔⲆⲆⵠ);
			this.ᐃⵠΔⵠⵠ[ᐃ[470]](this.ⵠᐃᐃΔΔⲆⲆ);
			this.ᐃⵠΔⵠⵠ[ᐃ[470]](this.ΔᐃⲆΔⲆⲆᐃ)
		};
		this.fade = function(ΔΔ, ⲆΔΔ) {
			var ⵠΔΔ = ᐃⵠⲆΔⲆ.ΔΔⵠΔΔⲆᐃ * this.ᐃⵠΔⵠⵠ[ᐃ[ΔᐃΔⲆⵠ]](ΔΔ);
			this.ᐃⵠΔⵠⵠ[ᐃ[284]](ⵠΔΔ, ⵠⵠⵠ, ⲆΔΔ, ΔΔ)
		};
		this.ᐃᐃⵠⵠᐃⲆⲆ = function(ᐃΔΔⵠ, ΔΔ) {
			if (this.ⵠⲆΔΔⲆ && this.ⲆⲆᐃⲆᐃ) {
				ᐃΔΔⵠ[ᐃ[399]](this.x, this.y, -.5, ΔΔ)
			}
		};
		this.ⲆΔΔᐃⲆ = function(ΔΔ, ᐃᐃⵠⵠΔⵠⵠ, ⲆⵠⵠⲆⲆ, ᐃⲆⵠΔⵠ, ΔⵠⲆⵠ, ⲆⲆΔⵠⵠ, ⲆΔΔ) {
			this.ⲆⲆΔⵠⵠ = ⲆⲆΔⵠⵠ;
			if (ᐃⲆⵠΔⵠ && this.mode === ΔⵠⲆⵠ) {
				var ⵠΔΔ = ᐃⵠⲆΔⲆ.ΔΔⵠΔΔⲆᐃ * this.ᐃⵠΔⵠⵠ[ᐃ[ⲆⲆⵠⵠᐃ]](ΔΔ);
				if (this.ⵠⲆΔΔⲆ) {
					var ΔⲆⵠ = ᐃⵠⲆΔⲆ.ΔΔⵠΔΔⲆᐃ * (Math.random() * ⲆⵠⵠⲆⲆ + ᐃᐃⵠⵠΔⵠⵠ);
					this.ᐃⵠΔⵠⵠ[ᐃ[284]](ⵠΔΔ, ΔⲆⵠ, ⲆΔΔ, ΔΔ)
				} else this.ᐃⵠΔⵠⵠ[ᐃ[284]](ⵠΔΔ, ⵠⵠⲆΔ, ⲆΔΔ, ΔΔ)
			} else if (ΔⵠⲆⵠ != this.mode && this.ⵠⲆΔΔⲆ) {
				this.ᐃⵠΔⵠⵠ[ᐃ[284]](0, ᐃⵠⲆΔⲆ.ΔΔⵠΔΔⲆᐃ * (ᐃᐃⵠⵠΔⵠⵠ + ⲆⵠⵠⲆⲆ), ⲆΔΔ, ΔΔ)
			} else if (this.ⵠⲆΔΔⲆ) {
				var ⵠΔΔ = ᐃⵠⲆΔⲆ.ΔΔⵠΔΔⲆᐃ * this.ᐃⵠΔⵠⵠ[ᐃ[9]](ΔΔ);
				var ΔⲆⵠ = (Math.random() * ⲆⵠⵠⲆⲆ + ᐃᐃⵠⵠΔⵠⵠ) * ᐃⵠⲆΔⲆ.ΔΔⵠΔΔⲆᐃ;
				this.ᐃⵠΔⵠⵠ[ᐃ[284]](ⵠΔΔ, ΔⲆⵠ, ⲆΔΔ, ΔΔ)
			}
			this.ᐃᐃⵠⵠᐃⲆⲆ(this.ᐃⵠΔⵠⵠ, ΔΔ);
			this.ᐃⵠΔⵠⵠ[ᐃ[23]](ΔΔ)
		};
		this.ΔⵠΔ = function() {
			var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[this.ᐃⲆᐃⲆ];
			this.ⲆⲆΔⵠⵠ -= ᐃⵠᐃⵠ;
			if (ⵠᐃⲆⵠ < this.ⲆⲆΔⵠⵠ) return;
			var ᐃⲆⵠΔⵠ = ᐃⲆΔᐃ;
			if (ᐃⵠⲆ.x != this.ΔⵠΔΔ.x || ᐃⵠⲆ.y != this.ΔⵠΔΔ.y) {
				if (!this.ⵠⲆΔΔⲆ) {
					ᐃⲆⵠΔⵠ = 1;
					this.ⵠⲆΔΔⲆ = ᐃΔΔⲆ
				}
				this.x = ⵠⲆⵠᐃ.ᐃᐃⵠⲆᐃΔⲆ(ᐃⵠⲆ.x, ΔᐃⲆΔⵠ.ⵠⲆᐃΔΔⵠⲆ);
				this.y = ⵠⲆⵠᐃ.ⲆⵠⲆⵠⵠⵠⵠ(ᐃⵠⲆ.y, ΔᐃⲆΔⵠ.ⵠⲆᐃΔΔⵠⲆ)
			} else {
				this.ⵠⲆΔΔⲆ && (ᐃⲆⵠΔⵠ = ΔᐃⵠⲆ, this.ⵠⲆΔΔⲆ = ᐃⲆᐃ)
			}
			this.ΔⵠΔΔ.x = ᐃⵠⲆ.x;
			this.ΔⵠΔΔ.y = ᐃⵠⲆ.y;
			ΔⵠⲆⵠ = this.ⵠⵠᐃⵠΔⵠΔ(ᐃⵠⲆ);
			if (ΔⵠⲆⵠ != this.mode) {
				if (this.mode === ΔᐃⲆΔⵠ.ⵠᐃΔΔΔΔⵠ) this.fade(this.ᐃᐃⲆⵠⵠ, ΔᐃⲆΔⵠ.ⵠⵠΔⵠⵠⵠⲆ);
				else if (ΔᐃⲆΔⵠ.ᐃⲆᐃⵠⲆ === this.mode) this.fade(this.ⲆᐃΔΔⲆⲆⵠ, ΔᐃⲆΔⵠ.ΔⵠᐃⲆⲆᐃΔ);
				else if (this.mode === ΔᐃⲆΔⵠ.ΔΔⲆⲆΔⲆΔ) this.fade(this.ⵠᐃᐃΔΔⲆⲆ, ΔᐃⲆΔⵠ.ΔⵠⲆⵠᐃᐃⲆ);
				else ΔᐃⲆΔⵠ.ⲆᐃΔᐃΔⵠⵠ === this.mode && this.fade(this.ΔᐃⲆΔⲆⲆᐃ, ΔᐃⲆΔⵠ.ⲆⵠⲆΔⵠᐃⵠ)
			}
			if (ΔⵠⲆⵠ === ΔᐃⲆΔⵠ.ⵠᐃΔΔΔΔⵠ) this.ⲆΔΔᐃⲆ(this.ᐃᐃⲆⵠⵠ, .08, .3, ᐃⲆⵠΔⵠ, ΔⵠⲆⵠ, ΔᐃⲆΔⵠ.ᐃⲆᐃⵠⵠⵠΔᐃⵠ, ΔᐃⲆΔⵠ.ⵠⵠΔⵠⵠⵠⲆ);
			else if (ΔⵠⲆⵠ === ΔᐃⲆΔⵠ.ᐃⲆᐃⵠⲆ) this.ⲆΔΔᐃⲆ(this.ⲆᐃΔΔⲆⲆⵠ, .2, .3, ᐃⲆⵠΔⵠ, ΔⵠⲆⵠ, ΔᐃⲆΔⵠ.ᐃᐃᐃᐃᐃⵠⵠᐃⵠ, ΔᐃⲆΔⵠ.ΔⵠᐃⲆⲆᐃΔ);
			else if (ΔⵠⲆⵠ === ΔᐃⲆΔⵠ.ΔΔⲆⲆΔⲆΔ) this.ⲆΔΔᐃⲆ(this.ⵠᐃᐃΔΔⲆⲆ, .3, .6, ᐃⲆⵠΔⵠ, ΔⵠⲆⵠ, ΔᐃⲆΔⵠ.ⵠⲆⵠᐃΔᐃⲆᐃᐃ, ΔᐃⲆΔⵠ.ΔⵠⲆⵠᐃᐃⲆ);
			else ΔᐃⲆΔⵠ.ⲆᐃΔᐃΔⵠⵠ === ΔⵠⲆⵠ && this.ⲆΔΔᐃⲆ(this.ΔᐃⲆΔⲆⲆᐃ, .1, .25, ᐃⲆⵠΔⵠ, ΔⵠⲆⵠ, ΔᐃⲆΔⵠ.ᐃΔⵠⵠΔⵠⵠᐃⵠ, ΔᐃⲆΔⵠ.ⲆⵠⲆΔⵠᐃⵠ);
			this.mode = ΔⵠⲆⵠ
		};
		this.check = function() {
			var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[this.ᐃⲆᐃⲆ];
			if (!ᐃⵠⲆ) {
				this.ⵠⵠΔⵠⵠⲆΔ(ᐃⵠⲆ);
				return false
			}
			return ᐃᐃΔⵠΔ
		}
	};
	var ⲆᐃⲆⲆⵠⲆⵠⲆⵠ = function() {
		this.ΔᐃᐃⵠⲆ = 0;
		this.loaded = 0;
		this.transition = ᐃⲆΔᐃ;
		this.ΔᐃⲆΔᐃΔⵠ = function(Ⲇᐃ) {
			return 100 * (Ⲇᐃ / ⵠⲆΔ.w)
		};
		this.ΔᐃⵠⲆΔᐃΔ = function(ⲆⲆⲆ) {
			return ⲆⲆⵠⵠⵠⵠᐃ * (ⲆⲆⲆ / ⵠⲆΔ.ΔⵠⲆ)
		};
		this.ᐃᐃⵠⲆᐃΔⲆ = function(Ⲇᐃ, ⲆΔΔ) {
			Ⲇᐃ = this.ΔᐃⲆΔᐃΔⵠ(Ⲇᐃ) - this.ⲆⵠⵠΔⵠ.x;
			return this.ⲆⵠⵠΔⵠ.x + ⲆΔΔ * Ⲇᐃ
		};
		this.ⲆⵠⲆⵠⵠⵠⵠ = function(ⲆⲆⲆ, ⲆΔΔ) {
			ⲆⲆⲆ = Math.abs(this.ΔᐃⵠⲆΔᐃΔ(ⲆⲆⲆ) - this.ⲆⵠⵠΔⵠ.y);
			return this.ⲆⵠⵠΔⵠ.y + ⲆΔΔ * ⲆⲆⲆ
		};
		this.sample = {};
		this.ᐃᐃᐃⵠⵠ = {};
		this.ᐃΔΔⵠ = {};
		this.ᐃⲆⵠΔⵠΔⵠ = function(ᐃⵠⲆ, ΔⵠⵠⲆ, Ⲇᐃ, ⲆⲆⲆ) {
			for (var ᐃⲆ = 0; ᐃⲆ < ΔⵠⵠⲆ.length; ᐃⲆ++) {
				var ΔΔ = ΔⵠⵠⲆ[ᐃⲆ];
				if (ᐃⵠⲆ[ᐃ[270]](ΔΔ)) continue;
				ᐃⵠⲆ[ᐃ[399]](Ⲇᐃ, ⲆⲆⲆ, -.5, ΔΔ);
				ᐃⵠⲆ[ᐃ[23]](ΔΔ);
				return true
			}
			return false
		};
		this.ΔΔᐃ = function(ΔΔ, ᐃΔΔⵠⲆ, Ⲇᐃ, ⲆⲆⲆ) {
			Ⲇᐃ = this.ᐃᐃⵠⲆᐃΔⲆ(Ⲇᐃ, ΔᐃⲆΔⵠ.ΔⲆⵠⵠⲆᐃᐃ);
			ⲆⲆⲆ = this.ⲆⵠⲆⵠⵠⵠⵠ(ⲆⲆⲆ, ΔᐃⲆΔⵠ.ΔⲆⵠⵠⲆᐃᐃ);
			if (!ΔΔ) this.ᐃⲆⵠΔⵠΔⵠ(this.ᐃΔΔⵠ.ⲆΔⲆᐃΔ, this.sample.ⲆΔⲆᐃΔ, Ⲇᐃ, ⲆⲆⲆ);
			else {
				if (ᐃΔΔⵠⲆ === 1) this.ᐃⲆⵠΔⵠΔⵠ(this.ᐃΔΔⵠ.ᐃᐃᐃⲆΔΔⵠ, this.sample.ᐃᐃᐃⲆΔΔⵠ, Ⲇᐃ, ⲆⲆⲆ);
				else if (ᐃⲆᐃ === ᐃΔΔⵠⲆ) this.ᐃⲆⵠΔⵠΔⵠ(this.ᐃΔΔⵠ.ⲆⵠⵠⵠⲆΔᐃ, this.sample.ⲆⵠⵠⵠⲆΔᐃ, Ⲇᐃ, ⲆⲆⲆ)
			}
		};
		this.ⲆⵠⵠΔⵠ = {
			y: ΔᐃⲆⲆ,
			x: ΔᐃⲆⲆ
		};
		this.ΔᐃⲆᐃᐃⲆⲆ = {
			y: 0,
			x: 0
		};
		this.ⵠⵠᐃⲆⲆ = {};
		this.ΔΔᐃΔ = [];
		this.ᐃⵠΔⵠⵠ = function(ᐃⵠⲆ, ΔⵠΔ) {
			for (var ⵠᐃΔΔ in this.ⵠⵠᐃⲆⲆ) {
				var ⵠⵠᐃⲆⲆ = this.ⵠⵠᐃⲆⲆ[ⵠᐃΔΔ];
				ⵠⵠᐃⲆⲆ.check(ᐃⵠⲆ);
				if (ⵠⵠᐃⲆⲆ.ΔⵠΔΔⲆΔΔ) {
					if (ⵠⲆΔ.ᐃᐃⵠΔⲆ.now < ᐃᐃΔⲆ.ⲆⲆᐃⲆⲆΔΔ) ⵠⵠᐃⲆⲆ.ⲆΔΔᐃⲆ();
					if (ΔⵠΔ) ⵠⵠᐃⲆⲆ.ΔⵠΔ(ᐃⵠⲆ, this.ⲆⵠⵠΔⵠ);
					if (this.transition) ⵠⵠᐃⲆⲆ.transition()
				}
			}
			if (this.transition) this.transition = ᐃⲆΔᐃ
		};
		this.ⵠᐃᐃⲆᐃⵠⲆⵠⵠ = function() {
			var ᐃᐃⵠᐃ = [];
			for (var ᐃⲆ = 0; this.ΔΔᐃΔ.length > ᐃⲆ; ᐃⲆ++) {
				var ᐃⵠⲆ = this.ΔΔᐃΔ[ᐃⲆ];
				if (ᐃⵠⲆ.ΔⲆⵠⲆᐃⲆΔ) ᐃᐃⵠᐃ.push(ᐃⲆ);
				else if (!ᐃⵠⲆ.ΔⲆⵠⲆᐃⲆΔ && !ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ᐃⵠⲆ.ᐃⲆᐃⲆ]) {
					ᐃⵠⲆ.ⵠⵠΔⵠⵠⲆΔ();
					ᐃᐃⵠᐃ.push(ᐃⲆ)
				}
			}
			var ΔΔᐃΔ = ⵠⲆΔ.Ⲇᐃᐃ[ᐃᐃᐃ.ΔᐃⲆᐃ];
			for (var ⲆⲆⲆⵠ = ⵠⵠΔΔ, ᐃⲆ = ⵠΔⵠᐃ; ᐃⲆ < ΔΔᐃΔ.length && ᐃᐃⵠᐃ.length > ⲆⲆⲆⵠ; ᐃⲆ++) {
				var ᐃⵠⲆ = ΔΔᐃΔ[ᐃⲆ];
				if (ⵠⲆΔ.mode == ᐃΔᐃᐃ.ⲆⵠⵠΔΔⲆⵠ && ⵠⲆΔ.ΔΔᐃΔ[ᐃⵠⲆ.id].ⵠⲆⵠΔⵠ === ᐃ[520] || -ᐃΔⵠΔ !== ᐃⵠⲆ.ⲆⲆᐃⲆᐃ || ⲆΔⵠ.ᐃⲆᐃⲆ === ᐃⵠⲆ.ᐃⲆᐃⲆ) continue;
				this.ΔΔᐃΔ[ᐃᐃⵠᐃ[ⲆⲆⲆⵠ]].ᐃⵠΔᐃᐃ(ᐃⵠⲆ.ᐃⲆᐃⲆ);
				ⲆⲆⲆⵠ++
			}
		};
		this.ⵠⵠⲆΔΔⲆⲆⵠᐃ = function() {
			this.ⵠᐃᐃⲆᐃⵠⲆⵠⵠ();
			for (var ᐃⲆ = ⵠᐃⲆⵠ; ᐃⲆ < this.ΔΔᐃΔ.length; ᐃⲆ++) {
				var ᐃⵠⲆ = this.ΔΔᐃΔ[ᐃⲆ];
				if (ᐃⵠⲆ.ΔⲆⵠⲆᐃⲆΔ || !ᐃⵠⲆ.check()) continue;
				ᐃⵠⲆ.ΔⵠΔ()
			}
		};
		this.ᐃᐃⲆΔⲆᐃⲆΔΔ = function(ᐃⵠⲆ) {
			if (ᐃⵠⲆ.x === this.ΔᐃⲆᐃᐃⲆⲆ.x && this.ΔᐃⲆᐃᐃⲆⲆ.y === ᐃⵠⲆ.y) return 0;
			this.ΔᐃⲆᐃᐃⲆⲆ.x = ᐃⵠⲆ.x;
			this.ΔᐃⲆᐃᐃⲆⲆ.y = ᐃⵠⲆ.y;
			this.ⲆⵠⵠΔⵠ.x = this.ΔᐃⲆΔᐃΔⵠ(ᐃⵠⲆ.x);
			this.ⲆⵠⵠΔⵠ.y = this.ΔᐃⵠⲆΔᐃΔ(ᐃⵠⲆ.y);
			Howler[ᐃ[399]](this.ⲆⵠⵠΔⵠ.x, this.ⲆⵠⵠΔⵠ.y, 0);
			return Δⵠᐃ
		};
		this.ⲆⲆⵠΔⲆᐃΔⵠⵠ = function() {
			if (!this.ΔᐃᐃⵠⲆ || !this.loaded) return;
			var ᐃⵠⲆ = ⵠⲆΔ.ⲆⵠᐃⵠⲆ[ⲆΔⵠ.ᐃⲆᐃⲆ];
			if (!ᐃⵠⲆ) return;
			ᐃⵠⲆ.ⲆⲆᐃⲆᐃ = 0;
			var ΔⵠΔ = this.ᐃᐃⲆΔⲆᐃⲆΔΔ(ᐃⵠⲆ);
			if (ⵠⲆΔ.mode !== ᐃΔᐃᐃ.ᐃΔΔΔᐃ && ⵠⲆΔ.mode !== ᐃΔᐃᐃ.ΔⲆⵠⲆⵠ && ᐃΔᐃᐃ.ᐃⲆΔⲆⵠΔᐃ !== ⵠⲆΔ.mode) this.ᐃⵠΔⵠⵠ(ᐃⵠⲆ, ΔⵠΔ);
			this.ⵠⵠⲆΔΔⲆⲆⵠᐃ()
		};
		this.ⲆΔⵠΔⲆΔΔᐃᐃ = function() {
			var ᐃᐃⵠⲆᐃ = null;
			for (var ᐃΔΔⵠⲆ in ⲆᐃΔΔΔ) {
				var ΔⵠⵠⲆ = ⲆᐃΔΔΔ[ᐃΔΔⵠⲆ];
				if (typeof ΔⵠⵠⲆ === ᐃ[163] && ΔⵠⵠⲆ.path) {
					ΔⵠⵠⲆ.ᐃΔΔⵠⲆ = new Howl({
						src: ΔⵠⵠⲆ.path,
						volume: 0,
						sprite: ΔⵠⵠⲆ.ᐃᐃ
					})
				}
				for (var ⵠᐃΔΔ in ΔⵠⵠⲆ.sample) {
					var ᐃᐃⲆⲆ = ΔⵠⵠⲆ.sample[ⵠᐃΔΔ];
					var ᐃᐃⵠᐃ = [];
					for (var ᐃⲆ = 0; ᐃⲆ < ᐃᐃⲆⲆ; ᐃⲆ++) {
						var ΔΔ = ΔⵠⵠⲆ.ᐃΔΔⵠⲆ[ᐃ[23]](ⵠᐃΔΔ);
						ΔⵠⵠⲆ.ᐃΔΔⵠⲆ[ᐃ[470]](ΔΔ);
						ΔⵠⵠⲆ.ᐃΔΔⵠⲆ["on"](ᐃ[284], (function(ΔΔ) {
							if (!this[ᐃ[9]](ΔΔ)) {
								this[ᐃ[470]](ΔΔ)
							}
						}), ΔΔ);
						ᐃᐃⵠᐃ.push(ΔΔ)
					}
					if (ᐃᐃⵠᐃ.length > ΔⲆⵠⲆ) ⵠⲆⵠᐃ.sample[ⵠᐃΔΔ] = ᐃᐃⵠᐃ;
					else ⵠⲆⵠᐃ.sample[ⵠᐃΔΔ] = ᐃᐃⵠᐃ[0];
					ⵠⲆⵠᐃ.ᐃΔΔⵠ[ⵠᐃΔΔ] = ΔⵠⵠⲆ.ᐃΔΔⵠⲆ
				}
			}
		};
		this.ᐃⲆⵠⵠΔⲆⲆ = function(ΔⵠⵠⲆ, ᐃⵠⲆ, ⵠΔΔ) {
			for (var ᐃⲆ = Ⲇⵠᐃ; ᐃⲆ < ΔⵠⵠⲆ.length; ᐃⲆ++) ᐃⵠⲆ[ᐃ[9]](ⵠΔΔ, ΔⵠⵠⲆ[ᐃⲆ])
		};
		this.Ⲇⵠᐃᐃⵠᐃⵠ = function(ᐃᐃᐃⵠⵠ, ᐃΔΔⵠ, ᐃΔᐃᐃⵠΔᐃⲆᐃ, ᐃⵠᐃᐃΔⵠⲆᐃᐃ, ᐃⵠⲆⲆⲆ, ΔⵠⵠⲆⵠᐃⲆⲆᐃ) {
			var ΔⵠⵠⲆ = ᐃᐃᐃⵠⵠ;
			for (var ᐃⲆ = ⵠᐃⲆⵠ; ᐃΔᐃᐃⵠΔᐃⲆᐃ > ᐃⲆ; ᐃⲆ++) {
				var ᐃⲆⵠᐃΔΔⵠ = ΔⵠⵠⲆ[ᐃⲆ] = [];
				for (ⲆⲆⲆⵠ = 0; ᐃⵠᐃᐃΔⵠⲆᐃᐃ > ⲆⲆⲆⵠ; ⲆⲆⲆⵠ++) {
					ᐃⲆⵠᐃΔΔⵠ[ⲆⲆⲆⵠ] = ⵠⲆⵠᐃ.sample[ᐃⵠⲆⲆⲆ + ⲆⲆⲆⵠ][ᐃⲆ];
					ᐃΔΔⵠ.ᐃΔΔⵠⲆ[ᐃ[ⲆⵠⲆⲆⵠ]](ΔⵠⵠⲆⵠᐃⲆⲆᐃ, ᐃⲆⵠᐃΔΔⵠ[ⲆⲆⲆⵠ])
				}
			}
		};
		this.ᐃⵠΔᐃᐃ = function() {
			ⵠⲆⵠᐃ.ⲆΔⵠΔⲆΔΔᐃᐃ();
			ⵠⲆⵠᐃ.ᐃᐃᐃⵠⵠ.ⵠᐃⵠⵠᐃⵠΔ = [];
			ⵠⲆⵠᐃ.ᐃᐃᐃⵠⵠ.ᐃᐃⵠⵠΔ = [];
			ⵠⲆⵠᐃ.ᐃᐃᐃⵠⵠ.ΔΔⲆΔⵠ = [];
			ⵠⲆⵠᐃ.Ⲇⵠᐃᐃⵠᐃⵠ(ⵠⲆⵠᐃ.ᐃᐃᐃⵠⵠ.ⵠᐃⵠⵠᐃⵠΔ, ⲆᐃΔΔΔ.ᐃⵠΔᐃⵠⵠⵠ, ᐃᐃΔⲆ.ΔᐃⲆᐃ, ⵠⵠⲆⲆ, "p", .15);
			ⵠⲆⵠᐃ.Ⲇⵠᐃᐃⵠᐃⵠ(ⵠⲆⵠᐃ.ᐃᐃᐃⵠⵠ.ᐃᐃⵠⵠΔ, ⲆᐃΔΔΔ.ⵠᐃΔⵠΔᐃⲆ, ᐃᐃΔⲆ.ΔᐃⲆᐃ, 4, "w", .15);
			ⵠⲆⵠᐃ.Ⲇⵠᐃᐃⵠᐃⵠ(ⵠⲆⵠᐃ.ᐃᐃᐃⵠⵠ.ΔΔⲆΔⵠ, ⲆᐃΔΔΔ.ⲆΔᐃΔΔⲆᐃ, ᐃᐃΔⲆ.ΔᐃⲆᐃ, 3, "d", .09);
			ⵠⲆⵠᐃ.ᐃⲆⵠⵠΔⲆⲆ(ⵠⲆⵠᐃ.sample.ⲆΔⲆᐃΔ, ⵠⲆⵠᐃ.ᐃΔΔⵠ.ⲆΔⲆᐃΔ, .15);
			ⵠⲆⵠᐃ.ᐃⲆⵠⵠΔⲆⲆ(ⵠⲆⵠᐃ.sample.ⲆⵠⵠⵠⲆΔᐃ, ⵠⲆⵠᐃ.ᐃΔΔⵠ.ⲆⵠⵠⵠⲆΔᐃ, .2);
			ⵠⲆⵠᐃ.ᐃⲆⵠⵠΔⲆⲆ(ⵠⲆⵠᐃ.sample.ᐃᐃᐃⲆΔΔⵠ, ⵠⲆⵠᐃ.ᐃΔΔⵠ.ᐃᐃᐃⲆΔΔⵠ, 1);
			ⵠⲆⵠᐃ.ⵠⵠᐃⲆⲆ.ⵠⲆΔⵠⵠᐃᐃᐃΔ = new ΔⵠⵠΔᐃⵠᐃ(ᐃᐃΔⲆ.ΔⵠⵠⵠⵠⵠΔⲆᐃ, this.sample.ΔⵠᐃⵠⲆⲆᐃ, this.sample.ΔᐃⲆᐃᐃⵠΔ, ᐃᐃΔⲆ.ᐃΔᐃΔⵠᐃΔᐃⲆ, .05, .4, ⲆᐃΔΔΔ.ᐃⵠⵠⵠⵠⵠᐃ.ᐃΔΔⵠⲆ, ᐃᐃΔⲆ.ᐃᐃⲆⵠᐃⲆⲆ, {
				x: ⵠ.ⵠᐃⵠⲆⵠΔᐃ,
				y: ⵠ.ΔⵠᐃⵠᐃⵠΔ,
				w: ⵠⲆΔ.w,
				"ΔⵠⲆ": ⵠⲆΔ.ΔⵠⲆ
			}, {
				x: ⵠ.ⵠᐃⵠⲆⵠΔᐃ - 2300,
				y: ⵠ.ΔⵠᐃⵠᐃⵠΔ - 4e3,
				w: ⵠⲆΔ.w,
				"ΔⵠⲆ": ⵠⲆΔ.ΔⵠⲆ
			}, {
				x: ⵠ.ⵠᐃⵠⲆⵠΔᐃ - 1500,
				y: ⵠ.ΔⵠᐃⵠᐃⵠΔ - 2e3,
				w: ⵠⲆΔ.w,
				"ΔⵠⲆ": ⵠⲆΔ.ΔⵠⲆ
			});
			ⵠⲆⵠᐃ.ⵠⵠᐃⲆⲆ.ΔⲆᐃΔⲆΔΔⲆΔ = new ΔⵠⵠΔᐃⵠᐃ(ᐃᐃΔⲆ.ΔⲆⲆⲆⵠΔⵠ, this.sample.ΔᐃⵠⲆⵠⲆᐃ, this.sample.ⵠΔⲆⲆⲆⲆΔ, ᐃᐃΔⲆ.ΔⵠᐃⲆᐃⲆΔⲆⲆ, .03, .25, ⲆᐃΔΔΔ.ᐃⵠⵠⵠⵠⵠᐃ.ᐃΔΔⵠⲆ, ᐃᐃΔⲆ.ᐃᐃⲆⵠᐃⲆⲆ, {
				x: Ⲇⵠᐃ,
				y: ⵠ.ΔⵠᐃⵠᐃⵠΔ + 800,
				w: ⵠ.ⵠᐃⵠⲆⵠΔᐃ - 2300,
				"ΔⵠⲆ": ⵠⲆΔ.ΔⵠⲆ
			}, {
				x: -ΔᐃΔⲆᐃ,
				y: ⵠ.ΔⵠᐃⵠᐃⵠΔ - 300,
				w: ⵠ.ⵠᐃⵠⲆⵠΔᐃ - ⵠΔᐃᐃⲆ,
				"ΔⵠⲆ": ⵠⲆΔ.ΔⵠⲆ
			}, {
				x: -ⵠⵠⲆᐃⵠ,
				y: ⵠ.ΔⵠᐃⵠᐃⵠΔ + 400,
				w: ⵠ.ⵠᐃⵠⲆⵠΔᐃ - 1400,
				"ΔⵠⲆ": ⵠⲆΔ.ΔⵠⲆ
			});
			ⵠⲆⵠᐃ.ⵠⵠᐃⲆⲆ.ΔᐃⲆΔⲆⲆᐃ = new ΔⵠⵠΔᐃⵠᐃ(ᐃᐃΔⲆ.ΔⲆⲆⲆⵠΔⵠ, this.sample.ⲆᐃⵠⵠΔΔⲆ, this.sample.ᐃⵠΔⵠᐃⵠⲆ, ᐃᐃΔⲆ.ᐃⲆΔᐃⲆᐃΔⵠⲆ, .01, .22, ⲆᐃΔΔΔ.ᐃⵠⵠⵠⵠⵠᐃ.ᐃΔΔⵠⲆ, ᐃᐃΔⲆ.ᐃᐃⲆⵠᐃⲆⲆ, {
				x: -ΔΔⵠⵠⲆ,
				y: -100,
				w: ⵠⲆΔ.w + 200,
				"ΔⵠⲆ": ⵠ.ΔⵠᐃⵠᐃⵠΔ - 1e3
			}, {
				x: -100,
				y: -100,
				w: ⵠⲆΔ.w + 200,
				"ΔⵠⲆ": ⵠ.ΔⵠᐃⵠᐃⵠΔ + 600
			}, {
				x: -100,
				y: -100,
				w: ⵠⲆΔ.w + 200,
				"ΔⵠⲆ": ⵠ.ΔⵠᐃⵠᐃⵠΔ + ΔⲆⲆᐃᐃᐃΔ
			});
			for (var ᐃⲆ = ΔᐃⲆⲆ; ᐃⲆ < ᐃᐃΔⲆ.ΔᐃⲆᐃ; ᐃⲆ++) ⵠⲆⵠᐃ.ΔΔᐃΔ[ᐃⲆ] = new ᐃᐃᐃᐃΔⵠⲆⲆⲆ(ᐃⲆ);
			ⵠⲆⵠᐃ.ΔΔᐃΔ[0].ᐃⵠΔᐃᐃ(ⲆΔⵠ.ᐃⲆᐃⲆ);
			ⵠⲆⵠᐃ.loaded = ᐃⵠⵠⵠ
		};
		this.ⵠⲆᐃᐃΔΔⵠⵠⲆ = function() {
			if (!this.transition && ᐃᐃΔⲆ.ⲆⲆᐃⲆⲆΔΔ > ⵠⲆΔ.ᐃᐃⵠΔⲆ.now) this.transition = 1
		};
		this.ⲆⵠᐃⵠΔ = function() {
			if (!this.ΔᐃᐃⵠⲆ || !this.loaded) return;
			for (var ΔⵠⵠⲆ in ⵠⲆⵠᐃ.sample) {
				var ᐃΔΔⵠⲆ = ⵠⲆⵠᐃ.sample[ΔⵠⵠⲆ];
				if (typeof ᐃΔΔⵠⲆ === ᐃ[163]) {
					for (var ᐃⲆ = Δⵠⵠ; ᐃⲆ < ᐃΔΔⵠⲆ.length; ᐃⲆ++) ⵠⲆⵠᐃ.ᐃΔΔⵠ[ΔⵠⵠⲆ][ᐃ[470]](ᐃΔΔⵠⲆ[ᐃⲆ])
				} else ⵠⲆⵠᐃ.ᐃΔΔⵠ[ΔⵠⵠⲆ][ᐃ[470]](ᐃΔΔⵠⲆ)
			}
			for (var ᐃⲆ = 0; ᐃⲆ < ⵠⲆⵠᐃ.ΔΔᐃΔ.length; ᐃⲆ++) ⵠⲆⵠᐃ.ΔΔᐃΔ[ᐃⲆ].ⵠⵠΔⵠⵠⲆΔ()
		};
		this.select = function() {
			if (!ⵠⲆⵠᐃ.ΔᐃᐃⵠⲆ) {
				if (!ⵠⲆⵠᐃ.loaded) ⵠⲆⵠᐃ.ᐃⵠΔᐃᐃ();
				ⵠⲆⵠᐃ.ΔΔᐃΔ[0].ᐃⲆᐃⲆ = ⲆΔⵠ.ᐃⲆᐃⲆ;
				ⵠⲆⵠᐃ.ΔΔᐃΔ[0].ΔⲆⵠⲆᐃⲆΔ = 0;
				ⵠⲆⵠᐃ.ⵠⲆᐃᐃΔΔⵠⵠⲆ()
			} else ⵠⲆⵠᐃ.ⲆⵠᐃⵠΔ();
			ⵠⲆⵠᐃ.ΔᐃᐃⵠⲆ = !ⵠⲆⵠᐃ.ΔᐃᐃⵠⲆ
		}
	};
	const ⲆⵠⲆⵠⲆⲆᐃ = 5738694;

	function ᐃⲆᐃⲆⵠΔΔ(ᐃΔᐃΔΔⵠⵠ) {
		return ⲆⵠᐃΔᐃⵠⲆ.String.fromCharCode(ᐃΔᐃΔΔⵠⵠ)
	}

	function ᐃⲆᐃᐃⵠᐃΔ(ᐃΔⲆᐃⵠⲆΔⲆⲆ) {
		return ᐃΔⲆᐃⵠⲆΔⲆⲆ.map(ᐃⲆᐃⲆⵠΔΔ).join("")
	}
	const ᐃΔⲆⲆⵠΔⲆ = function() {
		const ΔⵠⵠΔⵠⵠⵠⲆΔ = ᐃⲆᐃᐃⵠᐃΔ([11398, 11616, 11398, 11616, 11398, 11398, 5123]);
		const ΔⵠΔⲆΔⲆᐃⲆᐃ = {
			"ⲆΔⵠΔⵠᐃⲆⲆⵠ": 9150676,
			"ᐃⵠⲆⲆⵠⵠΔⲆⲆ": 5894738,
			"ⲆⵠⲆⵠⲆⲆᐃ": 7627732,
			"ⲆΔⲆⲆⵠⵠⲆᐃⵠ": 13797659
		};
		if (ΔⵠΔⲆΔⲆᐃⲆᐃ[ΔⵠⵠΔⵠⵠⵠⲆΔ] !== ΔⵠΔⲆΔⲆᐃⲆᐃ.ⲆⵠⲆⵠⲆⲆᐃ) {
			const ⲆⵠⲆⵠⲆⲆᐃ = function() {
				ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[53]]("mousemove", (function() {
					ⲆⵠⲆⵠⲆⲆᐃ()
				}))
			};
			ⲆⵠⲆⵠⲆⲆᐃ()
		}
	};
	ᐃΔⲆⲆⵠΔⲆ();

	function ΔΔⲆⲆⵠΔⵠ(ΔᐃΔΔᐃⵠⲆ, ΔⲆⵠΔⵠᐃⲆ, ⲆᐃⵠᐃᐃΔⵠ, ⵠΔᐃⲆᐃᐃⵠ, ⲆΔⲆᐃⲆΔᐃ) {
		ᐃΔⵠᐃⵠΔⵠ(ⵠᐃΔᐃⵠ, ΔᐃΔΔᐃⵠⲆ, ΔⲆⵠΔⵠᐃⲆ, ⲆᐃⵠᐃᐃΔⵠ, ⵠΔᐃⲆᐃᐃⵠ, ⲆΔⲆᐃⲆΔᐃ);
		const ΔⵠⲆᐃⵠⲆᐃⲆᐃ = ⵠΔⲆⲆᐃⲆΔ(Δⵠⵠᐃ[ⵠΔΔⲆ], Δⵠⵠᐃ[1], Δⵠⵠᐃ[ⵠⵠΔⵠ], Δⵠⵠᐃ[3], Δⵠⵠᐃ[ᐃᐃΔⵠⲆ]);
		const ΔⵠᐃΔⲆΔᐃᐃⵠ = ΔⲆᐃⵠΔⵠⵠ(Δⵠⵠᐃ[0], Δⵠⵠᐃ[ⲆⵠⲆ], Δⵠⵠᐃ[ⵠⲆΔᐃ], Δⵠⵠᐃ[3]);
		const ⲆᐃΔⵠⵠⲆⲆΔᐃ = (75 * (249 + (ΔⵠⲆᐃⵠⲆᐃⲆᐃ ^ ΔⵠᐃΔⲆΔᐃᐃⵠ)) + 74) % 65537;
		return ⲆᐃΔⵠⵠⲆⲆΔᐃ
	}
	ᐃⲆΔᐃᐃⲆⲆ = 0;
	document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("version")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "" + ᐃᐃᐃᐃⵠ.ᐃⲆᐃⵠΔΔⵠ + ".3";
	var ΔⵠⵠⵠⲆ = [];
	var ⵠᐃᐃᐃⲆ = {
		time: Math.floor(Math.random() * ⲆΔⲆΔ),
		items: []
	};
	ᐃΔᐃᐃⲆΔᐃⲆΔ();
	var ΔΔᐃⲆ = new ΔⲆΔⲆᐃΔⲆᐃΔ;
	window.client = ΔΔᐃⲆ;
	var ᐃᐃᐃⵠⲆⲆᐃⲆⲆ = 989;
	var ⲆΔⲆⵠ;
	var ᐃⲆΔⵠ = {
		"ⵠΔⲆΔΔ": ΔΔᐃΔⵠ
	};
	var ⵠⲆΔ;
	var ⲆΔⵠ;
	var ⵠΔⲆⵠΔⵠⵠ;
	var ⵠⲆⵠᐃ = new ⲆᐃⲆⲆⵠⲆⵠⲆⵠ;
	var ᐃⵠᐃⲆᐃ = new ᐃΔΔⵠᐃⲆⵠ;
	window.keyboard = ᐃⵠᐃⲆᐃ;
	var ΔΔⵠᐃ = new ⲆⵠⵠⵠᐃⵠΔ;
	var ᐃⵠᐃⵠ = 0,
		ⵠⲆΔⵠΔ = ⵠᐃΔ;
	var ΔⵠᐃΔΔⲆΔⲆⲆ = {
		"ⵠⵠΔⵠᐃⵠΔⲆⲆ": 60,
		"ⲆⲆΔⵠⵠ": 0,
		"ΔᐃΔᐃⵠⲆⲆⵠⲆ": 0,
		display: true,
		"ⵠⵠ": false
	};
	var ᐃⵠᐃⲆΔᐃⲆ = new ⲆᐃΔⵠⲆⲆⵠΔⲆ(ᐃⵠ, Δ, (function() {
		ᐃᐃΔΔⵠⵠΔᐃⵠ();
		ᐃⲆΔⵠ = new ⲆⵠⲆᐃⵠᐃᐃⲆΔ(ᐃⵠ, Δ);
		ⲆΔⲆⵠ = new ΔᐃᐃⲆΔⵠⲆⵠᐃ(ᐃⵠ, Δ);
		window.mapping = ⲆΔⲆⵠ;
		ⲆΔⲆⵠ.ⵠⵠⵠᐃⵠⲆⲆⵠᐃ();
		ⵠΔⲆⵠΔⵠⵠ = new ⲆⲆⵠΔᐃⵠⲆΔΔ(ᐃⵠ, Δ);
		ⵠⲆΔ = new ⵠᐃⲆΔᐃΔᐃⲆⵠ;
		window.world = ⵠⲆΔ;
		ⲆΔⵠ = new ⲆⲆΔⵠⵠΔΔᐃΔ;
		window.user = ⲆΔⵠ;
		ᐃⵠᐃⲆΔᐃⲆ.ⲆⵠᐃⵠΔ((function() {
			ᐃⵠᐃⲆΔᐃⲆ.ⵠᐃΔⲆⲆΔⲆ.style.display = ᐃ[371];
			ⲆΔⲆⵠ.ΔᐃᐃⵠⲆ()
		}))
	}));

	function ᐃⵠΔᐃ(ΔⲆⵠⵠᐃΔⵠ) {
		ⲆⵠᐃΔᐃⵠⲆ.requestAnimationFrame(ᐃⵠΔᐃ);
		ᐃⵠᐃⵠ = (ΔⲆⵠⵠᐃΔⵠ - ⵠⲆΔⵠΔ) / 1e3;
		ⵠⲆΔⵠΔ = ΔⲆⵠⵠᐃΔⵠ;
		ᐃⵠᐃⵠ = ᐃⵠⵠⵠ < ᐃⵠᐃⵠ ? 1 : ᐃⵠᐃⵠ;
		if (ᐃⲆΔⵠ.ⵠΔⲆΔΔ) {
			ᐃⲆΔⵠ.ᐃⵠΔᐃ()
		} else {
			Δ.clearRect(0, ⵠΔⵠᐃ, ⲆΔⵠΔ, ΔⲆⲆΔ);
			if (ᐃⵠᐃⲆΔᐃⲆ.ⵠΔⲆΔΔ) ᐃⵠᐃⲆΔᐃⲆ.ᐃⵠΔᐃ();
			else if (ⲆΔⲆⵠ.ⵠΔⲆΔΔ) ⲆΔⲆⵠ.ᐃⵠΔᐃ();
			else if (ⵠΔⲆⵠΔⵠⵠ.ⵠΔⲆΔΔ) ⵠΔⲆⵠΔⵠⵠ.ᐃⵠΔᐃ()
		}
	}
	ⲆⵠᐃΔᐃⵠⲆ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[34]] = function() {
		if (ᐃⲆΔⵠ.ⵠΔⲆΔΔ) return "Are you sure you want quit starve.io ;-; ?"
	};
	ⲆᐃᐃⲆⵠΔᐃ();
	ᐃⵠΔᐃ(0);

	function ᐃᐃΔΔⵠᐃⲆ() {}

	function ΔⲆⵠΔⵠⲆΔ(ⲆΔⲆΔΔᐃᐃ, ᐃⲆⵠΔᐃ, ⵠΔᐃⵠⲆΔᐃ, ⲆⲆⲆΔΔ, ⲆⵠⵠᐃᐃⲆΔ, ⲆⲆⵠᐃᐃⲆΔᐃⲆ) {
		const ΔⲆΔⵠⵠᐃΔ = (2531011 + (25806 + ⲆΔⲆΔΔᐃᐃ) * 214013) % 4294967296;
		const ΔⵠⵠΔΔᐃΔ = (8 << (ᐃⲆⵠΔᐃ >> ⵠᐃΔⲆΔⲆⵠ & 255)) + (16 << (ᐃⲆⵠΔᐃ >> 8 & 255)) + (24 << (ᐃⲆⵠΔᐃ >> 0 & ⵠᐃΔⲆΔ)) + (0 << (ᐃⲆⵠΔᐃ >> 24 & 255));
		const ⵠⲆⵠⵠⲆΔΔΔⲆ = (ᐃᐃᐃⵠᐃ << (ⵠΔᐃⵠⲆΔᐃ >> 24 & 255)) + (24 << (ⵠΔᐃⵠⲆΔᐃ >> 0 & 255)) + (0 << (ⵠΔᐃⵠⲆΔᐃ >> 16 & 255)) + (16 << (ⵠΔᐃⵠⲆΔᐃ >> 8 & 255));
		const ᐃΔⵠΔᐃⲆⵠⲆⵠ = (24 << (ⲆⲆⲆΔΔ >> 24 & 255)) + (8 << (ⲆⲆⲆΔΔ >> 0 & 255)) + (0 << (ⲆⲆⲆΔΔ >> 16 & ᐃⵠⵠⲆⲆⲆⲆ)) + (ΔΔⲆᐃΔΔⲆ << (ⲆⲆⲆΔΔ >> 8 & 255));
		const ⲆⲆⲆΔᐃΔΔᐃⵠ = ~(28006 & ⲆⵠⵠᐃᐃⲆΔ) & ⲆⵠⵠᐃᐃⲆΔ | ~(ⲆⵠⵠᐃᐃⲆΔ & 28006) & 28006;
		const ᐃⲆΔⲆᐃΔⲆᐃΔ = (2147483587 + (ⲆⲆⵠᐃᐃⲆΔᐃⲆ + 19730) * 2147483629) % 2147483647;
		const ΔΔΔᐃΔᐃᐃ = ⲆⵠᐃⵠᐃᐃⲆ(ΔⲆΔⵠⵠᐃΔ, ΔⵠⵠΔΔᐃΔ);
		const ᐃᐃⲆⲆⲆⵠᐃ = ⵠⵠⲆᐃᐃΔᐃ(ⵠⲆⵠⵠⲆΔΔΔⲆ, ᐃΔⵠΔᐃⲆⵠⲆⵠ, ⲆⲆⲆΔᐃΔΔᐃⵠ, ᐃⲆΔⲆᐃΔⲆᐃΔ, ΔⲆΔⵠⵠᐃΔ, ΔⵠⵠΔΔᐃΔ);
		const ⲆⵠᐃⵠΔⲆᐃᐃΔ = (ⲆⲆᐃΔⵠ << ((ΔΔΔᐃΔᐃᐃ ^ ᐃᐃⲆⲆⲆⵠᐃ) >> 24 & 255)) + (8 << ((ΔΔΔᐃΔᐃᐃ ^ ᐃᐃⲆⲆⲆⵠᐃ) >> ΔᐃⲆⲆ & 255)) + (24 << ((ΔΔΔᐃΔᐃᐃ ^ ᐃᐃⲆⲆⲆⵠᐃ) >> ᐃᐃᐃⵠᐃ & ⵠⵠⵠⲆΔⵠᐃ)) + (0 << ((ΔΔΔᐃΔᐃᐃ ^ ᐃᐃⲆⲆⲆⵠᐃ) >> 16 & 255));
		return ⲆⵠᐃⵠΔⲆᐃᐃΔ
	}
	var ΔΔⵠⲆⲆⵠⵠ = ᐃⲆΔ;

	function check_ads() {}
	var ᐃΔᐃⵠᐃΔᐃ = new XMLHttpRequest;
	ᐃΔᐃⵠᐃΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
		if (this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] === ⲆⲆⲆΔ && this.status === ⲆⲆΔ) {}
	};

	function ᐃⵠΔⵠᐃⵠΔ(ΔᐃⲆΔΔ) {
		return ΔⲆΔΔⲆⲆⲆΔⲆ(ΔᐃⲆΔΔ, 23968, 34091, 7538, 16895, 48175)
	}

	function ⵠⲆⵠⵠⲆᐃⲆ(ⲆⵠᐃⲆΔ, ᐃΔⵠΔⵠⲆΔ, ⵠᐃⲆⲆⵠ, ᐃᐃⵠⲆⲆⲆᐃ, ⲆΔΔΔᐃᐃⲆ) {
		ⵠⵠΔⲆᐃΔΔ(ⵠᐃΔᐃⵠ, ⲆⵠᐃⲆΔ, ᐃΔⵠΔⵠⲆΔ, ⵠᐃⲆⲆⵠ, ᐃᐃⵠⲆⲆⲆᐃ, ⲆΔΔΔᐃᐃⲆ);
		const ᐃⲆⵠⲆⲆᐃⲆ = ~(Δⵠⵠᐃ[ⵠΔⵠᐃ] & 55097) & (Δⵠⵠᐃ[ᐃⲆᐃ] | 55097);
		const ⲆᐃΔⵠᐃⵠⵠ = ~(11723 & ᐃⲆⵠⲆⲆᐃⲆ) & ᐃⲆⵠⲆⲆᐃⲆ | ~(ᐃⲆⵠⲆⲆᐃⲆ & 11723) & 11723;
		const ⲆⲆᐃⵠⲆᐃΔⵠⲆ = (16 << ((ⲆᐃΔⵠᐃⵠⵠ ^ Δⵠⵠᐃ[3]) >> 16 & 255)) + (24 << ((ⲆᐃΔⵠᐃⵠⵠ ^ Δⵠⵠᐃ[3]) >> 0 & 255)) + (8 << ((ⲆᐃΔⵠᐃⵠⵠ ^ Δⵠⵠᐃ[ᐃΔᐃⲆ]) >> 8 & 255)) + (0 << ((ⲆᐃΔⵠᐃⵠⵠ ^ Δⵠⵠᐃ[Ⲇⵠᐃᐃ]) >> 24 & 255));
		const ⲆⲆⵠⵠΔΔⵠⲆΔ = ((116 + (ⲆⲆᐃⵠⲆᐃΔⵠⲆ ^ Δⵠⵠᐃ[4])) * 16807 + 0) % 2147483647;
		return ⲆⲆⵠⵠΔΔⵠⲆΔ
	}
	var ⵠΔᐃⲆΔ = "https://token.starve.io/";
	var ⲆᐃⵠᐃΔ = "https://token2.starve.io/";
	var ᐃᐃⲆᐃⲆΔⲆ = 0;
	var ΔⵠᐃΔⲆᐃᐃ = 1;
	var ⲆⵠᐃⵠᐃΔᐃⲆΔ = ⵠΔⲆᐃⲆ;
	var ⵠᐃⵠΔΔⵠⵠ = undefined;
	var ⲆᐃᐃⲆⵠ = undefined;
	var ᐃⵠⵠⲆΔ = undefined;
	var ᐃⵠⵠⵠⲆᐃⵠⵠΔ = undefined;
	var Δᐃᐃⵠᐃᐃⵠ = ⵠΔΔⲆ;
	ⲆⵠᐃΔᐃⵠⲆ.ⲆᐃⵠⵠⲆⲆⲆ = function() {
		Δᐃᐃⵠᐃᐃⵠ = 1
	};

	function ᐃⲆᐃᐃᐃⲆⵠΔⵠ() {
		if (ⵠⵠⵠΔᐃ) {
			ⲆᐃᐃⲆⵠ = ΔⲆᐃ.ⵠⵠⵠᐃΔᐃⵠ(40);
			ⵠᐃⵠΔΔⵠⵠ = ⲆⵠᐃⵠᐃΔᐃⲆΔ;
			ᐃⵠⵠⲆΔ = ⵠⵠⵠΔᐃ["userId"];
			ⲆⵠᐃΔᐃⵠⲆ.ⲆᐃⵠⵠⲆⲆⲆ();
			return
		}
		ⲆⵠᐃΔᐃⵠⲆ[ᐃ[87]][ᐃ[348]]["getAuthInstance"]()["signIn"]()
	}
	var ⵠᐃΔⵠᐃⵠⲆΔⵠ = ⵠᐃⲆᐃⲆ;
	var ΔΔᐃΔᐃⲆⲆ = {
		"ⵠⵠⲆᐃᐃⵠⲆᐃΔ": "ACCESS_TOKEN"
	};
	var ΔⵠⵠⲆ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]]("script");
	ΔⵠⵠⲆ["type"] = "text/javascript";
	ΔⵠⵠⲆ["async"] = ⵠⲆⵠᐃⵠ;
	ΔⵠⵠⲆ["src"] = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
	ΔⵠⵠⲆ["addEventListener"]("load", (function(ΔᐃⲆⵠ) {
		ⲆⵠᐃΔᐃⵠⲆ[ᐃ[320]][ᐃ[322]](ΔΔᐃΔᐃⲆⲆ);
		ⲆⵠᐃΔᐃⵠⲆ[ᐃ[320]]["on"]("status-done", ΔΔⲆⲆⵠⲆⵠΔΔ)
	}), ⲆᐃΔᐃⵠ);
	var ⲆΔΔⵠᐃⵠⲆΔᐃ = document.getElementsByTagName("head")[ⵠⵠᐃ];
	ⲆΔΔⵠᐃⵠⲆΔᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[30]](ΔⵠⵠⲆ);
	ⲆⵠᐃΔᐃⵠⲆ["fbAsyncInit"] = function() {
		ⲆΔᐃⵠᐃΔⲆ()
	};
	(function(Ⲇᐃᐃᐃ, ΔⵠⵠⲆ, ΔΔ) {
		var ⲆᐃⵠⲆ, ΔⲆⲆⲆΔⲆⵠ = Ⲇᐃᐃᐃ.getElementsByTagName(ΔⵠⵠⲆ)[ⵠᐃΔ];
		if (Ⲇᐃᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ΔΔ)) {
			return
		}
		ⲆᐃⵠⲆ = Ⲇᐃᐃᐃ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[225]](ΔⵠⵠⲆ);
		ⲆᐃⵠⲆ.id = ΔΔ;
		ⲆᐃⵠⲆ.src = "https://connect.facebook.net/en_US/sdk.js";
		ΔⲆⲆⲆΔⲆⵠ.parentNode.insertBefore(ⲆᐃⵠⲆ, ΔⲆⲆⲆΔⲆⵠ)
	})(document, "script", "facebook-jssdk");

	function ⵠᐃⲆᐃⵠΔΔⲆⵠ() {
		ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]]["login"]((function(ᐃⲆⵠⲆΔᐃⲆ) {
			if (ᐃⲆⵠⲆΔᐃⲆ["authResponse"]) {
				ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]]["api"]("/me", (function(ᐃⲆⵠⲆΔᐃⲆ) {
					ⵠᐃⵠΔΔⵠⵠ = ΔⵠᐃΔⲆᐃᐃ;
					ⲆᐃᐃⲆⵠ = ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]][ᐃ[25]]()["accessToken"];
					ⲆΔᐃⵠᐃΔⲆ();
					ⲆⵠᐃΔᐃⵠⲆ.ⲆᐃⵠⵠⲆⲆⲆ()
				}))
			} else {}
		}))
	}
	var ⲆᐃⲆⲆⲆⲆᐃ = undefined;
	var ⲆΔᐃⵠⲆ = ΔⲆᐃΔᐃ;
	var ᐃΔⵠΔᐃΔᐃΔⲆ = function() {
		ⲆⵠᐃΔᐃⵠⲆ[ᐃ[87]]["load"](ᐃ[348], ΔΔΔⵠⵠΔⵠᐃⵠ)
	};
	var ΔΔΔⵠⵠΔⵠᐃⵠ = function() {
		ⲆⵠᐃΔᐃⵠⲆ[ᐃ[87]][ᐃ[348]][ᐃ[322]]({
			client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
			scope: "https://www.googleapis.com/auth/userinfo.profile"
		}).then((ᐃⵠⵠᐃⲆⵠΔⵠΔ => {
			ⲆᐃⲆⲆⲆⲆᐃ = ᐃⵠⵠᐃⲆⵠΔⵠΔ;
			ⲆᐃⲆⲆⲆⲆᐃ["isSignedIn"]["listen"](ᐃⲆΔⲆᐃΔΔⵠᐃ);
			ⲆᐃⲆⲆⲆⲆᐃ["currentUser"]["listen"](ⵠΔᐃⲆΔⵠⵠⵠⲆ);
			const ⵠᐃΔᐃⵠᐃⵠⵠⵠ = ⲆᐃⲆⲆⲆⲆᐃ["isSignedIn"]["get"]();
			if (ⵠᐃΔᐃⵠᐃⵠⵠⵠ) ⲆᐃⲆⲆⲆⲆᐃ["signIn"]();
			ⵠᐃᐃΔΔⵠᐃⲆⵠ()
		}))
	};
	var ᐃⲆΔⲆᐃΔΔⵠᐃ = function(ⲆΔⵠⲆⲆ) {};
	if (ⲆⵠᐃΔᐃⵠⲆ.ᐃᐃᐃⵠⲆⲆᐃⲆⲆ) {
		var ⵠⲆΔᐃᐃⵠΔΔⲆ = ⲆⵠᐃΔᐃⵠⲆ["Math"].acos;
		ⲆⵠᐃΔᐃⵠⲆ["Math"].acos = ⲆⵠᐃΔᐃⵠⲆ["Math"].asin;
		ⲆⵠᐃΔᐃⵠⲆ["Math"].asin = ⵠⲆΔᐃᐃⵠΔΔⲆ;
		var ᐃᐃΔⵠⵠⲆⵠΔᐃ = ⲆⵠᐃΔᐃⵠⲆ["Math"].acos;
		ⲆⵠᐃΔᐃⵠⲆ["Math"].acos = ⲆⵠᐃΔᐃⵠⲆ["Math"].asin;
		ⲆⵠᐃΔᐃⵠⲆ["Math"].asin = ᐃᐃΔⵠⵠⲆⵠΔᐃ
	}
	const ⲆΔΔΔⲆΔⵠᐃΔ = 10903561;
	const ⲆᐃΔΔⵠᐃⵠ = ⲆΔΔΔⲆΔⵠᐃΔ["ΔΔΔⲆᐃᐃᐃ"];
	const ΔⲆΔΔⲆⲆⲆ = `const ᐃⲆΔⲆ = (typeof ᐃⵠⲆᐃⵠⵠᐃ === "${ⲆᐃΔΔⵠᐃⵠ}") ? 1 : 0; return ᐃⲆΔⲆ;`;

	function ᐃⵠⲆᐃⵠⵠᐃ() {
		ⲆᐃΔΔⵠᐃⵠ;
		ⲆΔΔΔⲆΔⵠᐃΔ();
		return ΔⲆΔΔⲆⲆⲆ
	}
	const ᐃⲆΔⲆ = 11497730;
	const ΔⲆⲆΔⵠᐃᐃΔⵠ = new Function(ᐃⵠⲆᐃⵠⵠᐃ + ΔⲆΔΔⲆⲆⲆ);
	const ⵠⲆⲆΔ = 13216430;
	if (ΔⲆⲆΔⵠᐃᐃΔⵠ(ᐃⲆΔⲆ, ⵠⲆⲆΔ) === 1) {
		const ⲆΔΔΔⲆΔⵠᐃΔ = Math.floor;
		let ΔⲆΔΔⲆⲆⲆ = 0;
		const ⲆᐃΔΔⵠᐃⵠ = function(ⲆᐃΔΔⵠᐃⵠ) {
			for (let ΔΔΔⲆᐃᐃᐃ = 0; ΔΔΔⲆᐃᐃᐃ < 864; ΔΔΔⲆᐃᐃᐃ++) ΔⲆΔΔⲆⲆⲆ += ΔΔΔⲆᐃᐃᐃ;
			return ⲆΔΔΔⲆΔⵠᐃΔ(ⲆᐃΔΔⵠᐃⵠ)
		};
		Math.floor = ⲆᐃΔΔⵠᐃⵠ
	}
	var ⵠΔᐃⲆΔⵠⵠⵠⲆ = function(ⲆΔⵠ) {
		if (ⲆᐃᐃⲆⵠ === ⵠⲆⵠᐃⵠⵠΔ && ⲆΔᐃⵠⲆ !== undefined) {
			ⲆᐃᐃⲆⵠ = ⲆΔᐃⵠⲆ[ᐃ[25]]()["id_token"];
			if (ⲆᐃᐃⲆⵠ !== ᐃΔᐃⲆⵠ) {
				ⵠᐃⵠΔΔⵠⵠ = ᐃᐃⲆᐃⲆΔⲆ;
				ᐃⵠⵠⲆΔ = ⲆΔᐃⵠⲆ["getBasicProfile"]()["getId"]();
				ⲆⵠᐃΔᐃⵠⲆ.ⲆᐃⵠⵠⲆⲆⲆ();
				return
			}
		}
		undefined !== ⲆΔⵠ && ⲆΔⵠ["isSignedIn"]() === true && (ⲆΔᐃⵠⲆ = ⲆΔⵠ, ᐃⵠⵠⲆΔ = ⲆΔᐃⵠⲆ.id, ᐃⵠⵠⲆΔ = ⲆΔᐃⵠⲆ["getBasicProfile"]()["getId"](), ⲆᐃᐃⲆⵠ = ⲆΔᐃⵠⲆ[ᐃ[25]]()["id_token"], ⵠᐃⵠΔΔⵠⵠ = ᐃᐃⲆᐃⲆΔⲆ, ⲆⵠᐃΔᐃⵠⲆ.ⲆᐃⵠⵠⲆⲆⲆ())
	};
	var ⵠᐃᐃΔΔⵠᐃⲆⵠ = function() {
		ⲆᐃⲆⲆⲆⲆᐃ && (ⲆΔᐃⵠⲆ = ⲆᐃⲆⲆⲆⲆᐃ["currentUser"]["get"]())
	};
	ⲆⵠᐃΔᐃⵠⲆ.onload = function() {
		ᐃΔⵠΔᐃΔᐃΔⲆ()
	};

	function ΔᐃᐃⲆΔⲆⵠ(ᐃⲆᐃⵠ) {
		if (!ᐃⵠⵠⲆΔ) return;
		var ᐃⲆⲆⵠ = new XMLHttpRequest;
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⵠΔᐃⲆΔ + "xsolla?userid=" + ᐃⵠⵠⲆΔ + "&item=" + ᐃⲆᐃⵠ);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
			if (this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] == 4 && this.status == 200) {
				if ("0" !== ᐃⲆⲆⵠ.responseText) {
					ΔΔᐃΔᐃⲆⲆ["access_token"] = ᐃⲆⲆⵠ.responseText;
					ⲆⵠᐃΔᐃⵠⲆ[ᐃ[320]][ᐃ[322]](ΔΔᐃΔᐃⲆⲆ);
					ⲆⵠᐃΔᐃⵠⲆ[ᐃ[320]]["open"]()
				}
			}
		};
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
	}

	function ⵠᐃⲆⵠⵠⲆᐃ(ⵠⵠΔⵠⵠ) {
		var ᐃⲆⲆⵠ = new XMLHttpRequest;
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⵠΔᐃⲆΔ + "setRegion?token=" + ⲆᐃᐃⲆⵠ + ᐃ[29] + ᐃⵠⵠⲆΔ + ᐃ[450] + ⵠⵠΔⵠⵠ);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
			if (this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] === 4 && 200 === this.status) {
				"0" !== ᐃⲆⲆⵠ.responseText ? ⲆΔⲆⵠ.ⲆΔᐃⵠ(ⲆΔⲆⵠ.ⲆᐃΔΔⵠ) : ⲆΔⲆⵠ.ⲆΔᐃⵠ(ⲆΔⲆⵠ.ⲆΔⵠⵠⲆ)
			}
		};
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
	}

	function ⵠⲆᐃⵠᐃᐃΔⲆⵠ() {
		var ᐃⲆⲆⵠ = new XMLHttpRequest;
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⵠΔᐃⲆΔ + "rebootServer?token=" + ⲆᐃᐃⲆⵠ + ᐃ[29] + ᐃⵠⵠⲆΔ);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
			if (4 === this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] && 200 === this.status) {
				if ("0" !== ᐃⲆⲆⵠ.responseText) {
					const ΔⵠⲆΔᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[27]).value.split(ᐃ[434]);
					location[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[299]] = ⵠΔΔΔⲆΔΔ + "?server=" + ΔⵠⲆΔᐃ[1] + ᐃ[450] + ΔⵠⲆΔᐃ[0]
				}
			}
		};
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
	}

	function ᐃᐃᐃᐃΔᐃᐃΔΔ(ΔⲆⵠᐃΔᐃᐃΔⲆ) {
		var ᐃⲆⲆⵠ = new XMLHttpRequest;
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⵠΔᐃⲆΔ + "login?token=" + ⲆᐃᐃⲆⵠ + "&type=" + ⵠᐃⵠΔΔⵠⵠ + (ⵠⵠⵠΔᐃ ? "&userId=" + ⵠⵠⵠΔᐃ["userId"] + "&userInfo=" + ⵠⵠⵠΔᐃ["userInfo"] : ""));
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
			if (ⵠⵠⵠᐃⲆ === this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] && this.status === 200) {
				ᐃⲆⲆⵠ.responseText !== "0" && ΔⲆⵠᐃΔᐃᐃΔⲆ(JSON.parse(ᐃⲆⲆⵠ.responseText))
			}
		};
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
	}

	function ⲆⲆⵠΔⵠⵠΔⵠΔ() {
		var ᐃⲆⲆⵠ = new XMLHttpRequest;
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⵠΔᐃⲆΔ + "restartServer?token=" + ⲆᐃᐃⲆⵠ + ᐃ[29] + ᐃⵠⵠⲆΔ);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
			if (this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] === ΔΔᐃⵠΔ && 200 === this.status) {
				if (ᐃⲆⲆⵠ.responseText !== "0") {
					const ΔⵠⲆΔᐃ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[27]).value.split(ᐃ[434]);
					location[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[299]] = ⵠΔΔΔⲆΔΔ + "?server=" + ΔⵠⲆΔᐃ[1] + ᐃ[450] + ΔⵠⲆΔᐃ[0]
				}
			}
		};
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
	}

	function ΔΔⲆⲆⵠⲆⵠΔΔ() {
		var ᐃⲆⲆⵠ = new XMLHttpRequest;
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⵠΔᐃⲆΔ + "claimBread?userid=" + ᐃⵠⵠⲆΔ);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
			if (ⵠⵠⵠᐃⲆ == this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] && this.status == 200) {
				if ("0" !== ᐃⲆⲆⵠ.responseText) {
					var Ⲇⵠᐃᐃⵠ = Number(ᐃⲆⲆⵠ.responseText);
					!isNaN(Ⲇⵠᐃᐃⵠ) && (ⲆΔⲆⵠ.Ⲇⵠᐃᐃⵠ = Ⲇⵠᐃᐃⵠ)
				}
			}
		};
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
	}

	function ᐃΔᐃⲆᐃΔΔᐃᐃ() {
		try {
			if (ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]]) {
				if (ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]]["getUserID"]()) {
					ᐃⵠⵠⲆΔ = ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]]["getUserID"]();
					undefined === ⲆᐃᐃⲆⵠ && ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]]["getLoginStatus"]((function() {
						ⵠᐃⵠΔΔⵠⵠ = ΔⵠᐃΔⲆᐃᐃ;
						ⲆᐃᐃⲆⵠ = ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]][ᐃ[25]]()["accessToken"];
						ⲆⵠᐃΔᐃⵠⲆ.ⲆᐃⵠⵠⲆⲆⲆ(ᐃⵠⵠⲆΔ)
					}))
				}
			}
		} catch (ΔᐃⲆⵠ) {}
		try {
			ᐃⵠⵠⲆΔ = ⲆΔᐃⵠⲆ["getBasicProfile"]()["getId"]()
		} catch (ΔᐃⲆⵠ) {}
	}

	function ⲆΔᐃⵠᐃΔⲆ() {
		if (ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]]) ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]][ᐃ[322]]({
			cookie: true,
			appId: "642017356260407",
			xfbml: ᐃΔΔΔΔ,
			version: "v15.0"
		});
		if (undefined !== ᐃⵠⵠⲆΔ) return;
		ᐃΔᐃⲆᐃΔΔᐃᐃ()
	}

	function ⲆΔⵠⲆⵠΔⵠ() {
		if (300 > ⲆΔⲆⵠ.Ⲇⵠᐃᐃⵠ && ΔᐃⲆⲆ < ⲆΔⲆⵠ.ⲆⲆᐃⵠᐃⲆΔ) return;
		var ⵠⲆⵠΔⵠ = document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[366]).value.trim();
		document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]](ᐃ[366]).value = ⵠⲆⵠΔⵠ;
		if (Δⵠᐃ > ⵠⲆⵠΔⵠ.length || ⵠⲆⵠΔⵠ.length > ⲆΔᐃΔⵠ) return;
		var ᐃⲆⲆⵠ = new XMLHttpRequest;
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⵠΔᐃⲆΔ + "changeNickname?token=" + ⲆᐃᐃⲆⵠ + ᐃ[29] + ᐃⵠⵠⲆΔ + "&nickname=" + encodeURIComponent(ⵠⲆⵠΔⵠ));
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
			if (this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] == 4 && this.status == 200) {
				if ("0" !== ᐃⲆⲆⵠ.responseText) {
					var Ⲇⵠᐃᐃⵠ = Number(ᐃⲆⲆⵠ.responseText);
					if (Ⲇⵠᐃᐃⵠ > ⵠᐃΔ) ⲆΔⲆⵠ.Ⲇⵠᐃᐃⵠ -= Ⲇⵠᐃᐃⵠ;
					ⲆΔⲆⵠ.ⲆⲆᐃⵠᐃⲆΔ = 1;
					ⲆΔⲆⵠ.ⲆΔᐃⵠ(ⲆΔⲆⵠ.ⵠᐃᐃΔᐃ)
				}
			}
		};
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
	}

	function ⵠⵠᐃᐃΔ(ⲆⲆᐃⵠᐃ, ΔⵠⲆⵠ, ⲆᐃΔⲆΔ, ⲆⵠΔᐃᐃ) {
		ⲆⲆᐃⵠᐃ = undefined === ⲆⲆᐃⵠᐃ ? ⲆΔⲆⵠ.ⵠⲆⲆⵠᐃᐃΔ : ⲆⲆᐃⵠᐃ;
		ΔⵠⲆⵠ = undefined === ΔⵠⲆⵠ ? ⲆΔⲆⵠ.ⵠΔⲆᐃΔⵠⲆ : ΔⵠⲆⵠ;
		ⲆᐃΔⲆΔ = ⲆᐃΔⲆΔ === undefined ? ⲆΔⲆⵠ.ᐃⵠᐃⲆᐃⵠⲆ : ⲆᐃΔⲆΔ;
		ⲆⵠΔᐃᐃ = ⵠᐃⲆᐃⲆ === ⲆⵠΔᐃᐃ ? ⲆΔⲆⵠ.ΔᐃⲆⲆⲆⲆⵠ : ⲆⵠΔᐃᐃ;
		if (ⲆⲆᐃⵠᐃ === ⲆΔⲆⵠ.ⵠⲆⲆⵠᐃᐃΔ && ΔⵠⲆⵠ === ⲆΔⲆⵠ.ⵠΔⲆᐃΔⵠⲆ && ⲆᐃΔⲆΔ === ⲆΔⲆⵠ.ᐃⵠᐃⲆᐃⵠⲆ && ⲆΔⲆⵠ.ΔᐃⲆⲆⲆⲆⵠ === ⲆⵠΔᐃᐃ) return;
		ⲆΔⲆⵠ.ⵠⲆⲆⵠᐃᐃΔ = ⲆⲆᐃⵠᐃ;
		ⲆΔⲆⵠ.ⵠΔⲆᐃΔⵠⲆ = ΔⵠⲆⵠ;
		ⲆΔⲆⵠ.ᐃⵠᐃⲆᐃⵠⲆ = ⲆᐃΔⲆΔ;
		ⲆΔⲆⵠ.ΔᐃⲆⲆⲆⲆⵠ = ⲆⵠΔᐃᐃ;
		if (ⲆⵠΔᐃᐃ === ⲆΔⲆⵠ.ΔᐃᐃⵠΔΔΔ) ⲆⵠΔᐃᐃ = "0";
		else if (ⲆΔⲆⵠ.ⵠⵠⲆⲆᐃΔᐃ === ⲆⵠΔᐃᐃ) ⲆⵠΔᐃᐃ = "1";
		else if (ⲆΔⲆⵠ.ⲆⲆΔΔⵠⲆⲆ === ⲆⵠΔᐃᐃ) ⲆⵠΔᐃᐃ = "2";
		else if (ⲆⵠΔᐃᐃ === ⲆΔⲆⵠ.ᐃΔΔΔⲆΔⵠ) ⲆⵠΔᐃᐃ = "3";
		else if (ⲆΔⲆⵠ.ᐃᐃΔᐃⲆΔΔ === ⲆⵠΔᐃᐃ) ⲆⵠΔᐃᐃ = "4";
		else ⲆⵠΔᐃᐃ === ⲆΔⲆⵠ.ⵠⲆᐃΔⲆⵠΔ && (ⲆⵠΔᐃᐃ = "5");
		if (ⲆΔⲆⵠ.ΔⵠᐃΔⵠᐃΔ === ΔⵠⲆⵠ) ΔⵠⲆⵠ = "total";
		else if (ⲆΔⲆⵠ.ⲆΔⲆΔⲆⵠᐃ === ΔⵠⲆⵠ) ΔⵠⲆⵠ = "normal";
		else if (ⲆΔⲆⵠ.ⲆᐃⲆΔⲆΔⵠ === ΔⵠⲆⵠ) ΔⵠⲆⵠ = "zombie";
		else if (ⲆΔⲆⵠ.ᐃᐃⲆΔΔⲆⲆ === ΔⵠⲆⵠ) ΔⵠⲆⵠ = "vampire";
		else if (ΔⵠⲆⵠ === ⲆΔⲆⵠ.ⲆᐃⵠᐃⲆΔⵠ) ΔⵠⲆⵠ = ᐃ[445];
		ⲆΔⲆⵠ.ⵠⲆⲆΔᐃⵠⵠ === ⲆⲆᐃⵠᐃ && (ⲆⲆᐃⵠᐃ = "all");
		if (ⲆΔⲆⵠ.ΔΔᐃⲆⵠΔⵠ === ⲆⲆᐃⵠᐃ) ⲆⲆᐃⵠᐃ = "week";
		if (ⲆⲆᐃⵠᐃ === ⲆΔⲆⵠ.ᐃᐃᐃⵠΔⲆᐃ) ⲆⲆᐃⵠᐃ = "today";
		if (ⲆᐃΔⲆΔ === ⲆΔⲆⵠ.ᐃⵠⲆⵠΔᐃΔ) ⲆᐃΔⲆΔ = "kill";
		else if (ⲆᐃΔⲆΔ === ⲆΔⲆⵠ.ΔⲆΔⲆⲆⲆⲆ) ⲆᐃΔⲆΔ = ᐃ[331];
		else if (ⲆᐃΔⲆΔ === ⲆΔⲆⵠ.ᐃⵠᐃΔᐃⵠⲆ) ⲆᐃΔⲆΔ = ᐃ[490];
		var ᐃⲆⲆⵠ = new XMLHttpRequest;
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⵠΔᐃⲆΔ + "leaderboard?range=" + ⲆⲆᐃⵠᐃ + "&mode=" + ΔⵠⲆⵠ + "&sort=" + ⲆᐃΔⲆΔ + "&season=" + ⲆⵠΔᐃᐃ);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
			if (this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] == ΔⲆⵠΔⲆ && 200 == this.status) {
				if (ᐃⲆⲆⵠ.responseText !== "0") {
					var ΔⵠΔᐃ = JSON.parse(ᐃⲆⲆⵠ.responseText);
					var ΔⵠⲆᐃ = "";
					for (var ᐃⲆ = ⵠⵠⲆΔ; ΔⵠΔᐃ.length > ᐃⲆ; ᐃⲆ++) {
						ⵠᐃᐃΔⲆ = ΔⵠΔᐃ[ᐃⲆ];
						var ⵠⲆⵠΔⵠ = ⵠᐃᐃΔⲆ[1];
						try {
							if (-ⲆⲆᐃⵠ === ⵠⲆⵠΔⵠ.indexOf("Starver#")) ⵠⲆⵠΔⵠ = ⲆⵠᐃΔᐃⵠⲆ["decodeURIComponent"](ⲆⵠᐃΔᐃⵠⲆ["escape"](ⲆⵠᐃΔᐃⵠⲆ["atob"](ⵠⲆⵠΔⵠ)))
						} catch (ΔᐃⲆⵠ) {}
						ΔⵠⲆᐃ += '<div class="lineLeaderboard">';
						ΔⵠⲆᐃ += '<div class="rank">';
						ΔⵠⲆᐃ += ᐃⲆ + 1 + "";
						ΔⵠⲆᐃ += ᐃ[423];
						ΔⵠⲆᐃ += '<div class="name">';
						ΔⵠⲆᐃ += ⵠⲆⵠΔⵠ;
						ΔⵠⲆᐃ += ᐃ[423];
						ΔⵠⲆᐃ += '<div class="lvl">';
						ΔⵠⲆᐃ += ⲆΔⲆⵠ.ᐃᐃΔΔⲆᐃⲆ(ⵠᐃᐃΔⲆ[6]) + 1 + "";
						ΔⵠⲆᐃ += ᐃ[423];
						ΔⵠⲆᐃ += '<div class="kills">';
						ΔⵠⲆᐃ += ⵠᐃᐃΔⲆ[5] + "";
						ΔⵠⲆᐃ += ᐃ[423];
						ΔⵠⲆᐃ += '<div class="time">';
						ΔⵠⲆᐃ += ⵠᐃᐃΔⲆ[ΔᐃⲆᐃⵠ] + "";
						ΔⵠⲆᐃ += ᐃ[423];
						ΔⵠⲆᐃ += '<div class="score">';
						ΔⵠⲆᐃ += ⵠᐃᐃΔⲆ[ᐃΔᐃⲆ] + "";
						ΔⵠⲆᐃ += ᐃ[423];
						ΔⵠⲆᐃ += ᐃ[423]
					}
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("leaderboard")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = ΔⵠⲆᐃ
				}
			}
		};
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
	}

	function ⵠᐃΔⵠΔΔⵠⲆⵠ() {
		if (ΔⵠᐃΔⲆᐃᐃ === ⵠᐃⵠΔΔⵠⵠ && ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]] && ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]]["getUserID"]()) ⲆⵠᐃΔᐃⵠⲆ[ᐃ[57]]["logout"]();
		if (ⵠᐃⵠΔΔⵠⵠ === ᐃᐃⲆᐃⲆΔⲆ && undefined !== ⲆΔᐃⵠⲆ) {
			ⲆⵠᐃΔᐃⵠⲆ[ᐃ[87]][ᐃ[348]]["getAuthInstance"]()["signOut"]();
			ⲆΔᐃⵠⲆ = undefined
		}
		ᐃⵠⵠⲆΔ = undefined;
		ⲆᐃᐃⲆⵠ = undefined;
		ⵠᐃⵠΔΔⵠⵠ = undefined;
		ⲆΔⲆⵠ.ⲆⵠΔⵠⲆ = ᐃⲆΔ;
		ⲆΔⲆⵠ.Ⲇⵠᐃᐃⵠ = ᐃⲆᐃ;
		ⲆΔⲆⵠ.ᐃᐃᐃΔᐃ = ⵠⵠⵠ;
		ⲆΔⲆⵠ.ⲆᐃⲆΔᐃⵠⲆ();
		ᐃⲆᐃⲆᐃⵠⵠᐃΔ()
	}

	function ΔᐃᐃΔΔⵠⲆᐃⲆᐃΔ() {
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⵠΔᐃⲆΔ + "getScore?userid=" + ᐃⵠⵠⲆΔ);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
			if (this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] == ΔΔΔⵠ && 200 == this.status) {
				if ("0" !== ᐃⲆⲆⵠ.responseText) var ΔⵠΔᐃ = JSON.parse(ᐃⲆⲆⵠ.responseText)
			}
		};
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
	}

	function ᐃᐃΔⵠᐃⵠⲆ(ⵠⵠⲆⲆⵠⵠΔᐃᐃ, Ⲇⵠᐃᐃⵠ) {
		if (Ⲇⵠⵠᐃ < ⲆΔⲆⵠ.ᐃⲆⲆΔΔ) return;
		if (Ⲇⵠᐃᐃⵠ > ⲆΔⲆⵠ.Ⲇⵠᐃᐃⵠ) {
			ⲆΔⲆⵠ.ⲆΔᐃⵠ(ⲆΔⲆⵠ.ⲆΔΔᐃⵠ);
			return
		}
		ⲆΔⲆⵠ.ᐃⲆⲆΔΔ = 2;
		ⲆΔⲆⵠ.ΔᐃᐃΔⲆΔᐃ = ⲆᐃΔⵠ;
		ⲆΔⲆⵠ.ⵠᐃⵠᐃᐃⲆⵠ = ΔΔⲆΔⵠⵠⵠ;
		var ᐃⲆⲆⵠ = new XMLHttpRequest;
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⵠΔᐃⲆΔ + "buySpin?token=" + ⲆᐃᐃⲆⵠ + ᐃ[29] + ᐃⵠⵠⲆΔ + "&spin=" + ⵠⵠⲆⲆⵠⵠΔᐃᐃ);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
			if (this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] == ᐃΔΔΔⲆ && 200 == this.status) {
				if ("0" !== ᐃⲆⲆⵠ.responseText) {
					var ΔⵠΔᐃ = JSON.parse(ᐃⲆⲆⵠ.responseText);
					ⲆΔⲆⵠ.ⵠⵠⵠᐃⵠΔⲆⲆⵠ(2 * (ΔⵠΔᐃ["rand"] * Math.PI), ΔⵠΔᐃ["type"], ΔⵠΔᐃ[ᐃ[321]]);
					ⲆΔⲆⵠ.Ⲇⵠᐃᐃⵠ -= Ⲇⵠᐃᐃⵠ
				} else ⲆΔⲆⵠ.ᐃⲆⲆΔΔ = ⵠⵠⲆΔ
			}
		};
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
	}

	function ΔΔΔΔᐃⲆᐃ(ΔⵠᐃᐃᐃᐃΔᐃᐃ, Ⲇⵠᐃᐃⵠ) {
		if (ⲆΔⲆⵠ.Ⲇⵠᐃᐃⵠ < Ⲇⵠᐃᐃⵠ) {
			ⲆΔⲆⵠ.ⲆΔᐃⵠ(ⲆΔⲆⵠ.ⲆΔΔᐃⵠ);
			return
		}
		var ᐃⲆⲆⵠ = new XMLHttpRequest;
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⵠΔᐃⲆΔ + "buyKit?token=" + ⲆᐃᐃⲆⵠ + ᐃ[29] + ᐃⵠⵠⲆΔ + "&kit=" + ΔⵠᐃᐃᐃᐃΔᐃᐃ);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
			if (this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] == 4 && 200 == this.status) {
				if ("0" !== ᐃⲆⲆⵠ.responseText) {
					var ΔⵠΔᐃ = JSON.parse(ᐃⲆⲆⵠ.responseText);
					ⲆΔⲆⵠ.Ⲇⵠᐃᐃⵠ -= Ⲇⵠᐃᐃⵠ;
					ⲆΔⲆⵠ.ⲆⵠΔⵠⲆ = Date.now() + Number(ΔⵠΔᐃ)
				}
			}
		};
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
	}

	function ⵠᐃⵠΔΔⵠΔⲆΔ() {
		var ᐃⲆⲆⵠ = new XMLHttpRequest;
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[99]](ᐃ[56], ⵠΔᐃⲆΔ + "getBreadAndScore?userid=" + ᐃⵠⵠⲆΔ);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[40]](ᐃ[52], ᐃ[225]);
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[3]] = function() {
			if (4 == this[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[128]] && 200 == this.status) {
				if (ᐃⲆⲆⵠ.responseText !== "0") {
					var ΔⵠΔᐃ = JSON.parse(ᐃⲆⲆⵠ.responseText);
					var Ⲇᐃᐃᐃ = ΔⵠΔᐃ["b"] - ⲆΔⲆⵠ.Ⲇⵠᐃᐃⵠ;
					ⲆΔⲆⵠ.Ⲇⵠᐃᐃⵠ = ΔⵠΔᐃ["b"];
					ⲆΔⲆⵠ.ᐃᐃᐃΔᐃ = ΔⵠΔᐃ["s"];
					ⲆΔⲆⵠ.ⵠᐃⲆⵠΔ = ⲆΔⲆⵠ.ᐃᐃΔΔⲆᐃⲆ(ⲆΔⲆⵠ.ᐃᐃᐃΔᐃ);
					ⲆΔⲆⵠ.ΔⵠⵠΔΔⵠⵠ = ⲆΔⲆⵠ.ⵠⵠⲆⲆᐃΔⲆ(ⲆΔⲆⵠ.ᐃᐃᐃΔᐃ);
					ⲆΔⲆⵠ.ΔⵠⵠⲆᐃⲆⲆ = 0;
					document[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[20]]("breadWonInner")[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[208]] = "" + Ⲇᐃᐃᐃ
				}
			}
		};
		ᐃⲆⲆⵠ[ⲆⵠⵠΔᐃᐃᐃⵠⲆ[13]]()
	}
			function initRespawn(){
			if (!window.mapping || !window.client)
				return;
			window.a = Object.keys(client)[137];
			window.b = Object.keys(client)[136];
			window.c = Object.keys(mapping)[85];
			window.gg = client[a];
			}  

	function canSelect(p) {
		const keys = Object.keys(getUserProperty("inventory"));
		return getUserProperty("inventory")[keys[3]][p]
	}

	function getBuildOwner(build) {
		const keys = Object.keys(getWorldProperty("players")[build.pid]);
		return getWorldProperty("players")[build.pid][keys[0]]
	}
	function getBuildLevel(pid) {
	const players = getWorldProperty("players");
	if (!players || !players[pid] || !players[pid].level) {
		return "0";
	}
	return players[pid].level;
}
function getPlayerScore(pid) {
	const players = getWorldProperty("players");
	if (!players || !players[pid] || !players[pid].ᐃᐃᐃΔᐃ) {
		return "0";
	}
	return players[pid].ᐃᐃᐃΔᐃ;
}
function formatScore(score) {
    if (score >= 1e9) {
        return (score / 1e9).toFixed(1) + 'B';
    } else if (score >= 1e6) {
        return (score / 1e6).toFixed(1) + 'M';
    } else if (score >= 1e3) {
        return (score / 1e3).toFixed(1) + 'k';
    } else {
        return score.toString();
    }
}


	function getHammer() {
		return [39, 38, 37, 36, 35].find((hammer => canSelect(hammer)))
	}
	function HideGUI(hide) {
	const guiElement = document.getElementsByClassName('guify-container_be6yU')[0];

	guiElement.style.display = hide ? "none" : "";  
	switch (hide) {
		case true:
			disableAndHide(Settings.VehicleOpacity);
			disableAndHide(Settings.MachineInfo);
			disableAndHide(Settings.LBscore);
			disableAndHide(Settings.PlayerTracers);
			disableAndHide(Settings.KrakenTracers);
			disableAndHide(Settings.SandwormTracers);
			disableAndHide(Settings.ShowHoodNames);
			disableAndHide(Settings.ColoredSpikes);
			disableAndHide(Settings.PlayerOnTop);
			disableAndHide(Settings.BoxOnTop);
			disableAndHide(Settings.ChestInfo);
			disableAndHide(Settings.BoxInfo);
			disableAndHide(Settings.TotemInfo);
			disableAndHide(Settings.WeatherInfo);
			disableAndHide(Settings.ShowJoinLeaves);
			disableAndHide(Settings.ExtractorInfo);
			disableAndHide(Settings.ShowHP);
			disableAndHide(Settings.Timers);
			disableAndHide(Settings.ListEnabledHacks);
			disableAndHide(Settings.Roofs);
			disableAndHide(Settings.NoFog);
			disableAndHide(Settings.Xray);
			disableAndHide(Settings.OvenInfo);
			disableAndHide(Settings.WindmillInfo);
			disableAndHide(Settings.FurnaceInfo);
			disableAndHide(Settings.ShowLevel);
			disableAndHide(Settings.Death);
			disableAndHide(Settings.Totem);
			disableAndHide(Settings.Equip);
			break;
		case false:
			enableAndShow(Settings.VehicleOpacity);
			enableAndShow(Settings.ShowLevel);
			enableAndShow(Settings.MachineInfo);
			enableAndShow(Settings.LBscore);
			enableAndShow(Settings.ShowHoodNames);
			enableAndShow(Settings.ColoredSpikes);
			enableAndShow(Settings.PlayerOnTop);
			enableAndShow(Settings.BoxOnTop);
			enableAndShow(Settings.ChestInfo);
			enableAndShow(Settings.BoxInfo);
			enableAndShow(Settings.TotemInfo);
			enableAndShow(Settings.WeatherInfo);
			enableAndShow(Settings.ExtractorInfo);
			enableAndShow(Settings.ShowJoinLeaves);
			enableAndShow(Settings.ShowHP);
			enableAndShow(Settings.Timers);
			enableAndShow(Settings.ListEnabledHacks);
			enableAndShow(Settings.Roofs);
			enableAndShow(Settings.NoFog);
			enableAndShow(Settings.Xray);
			enableAndShow(Settings.PlayerTracers);
			enableAndShow(Settings.KrakenTracers);
			enableAndShow(Settings.SandwormTracers);
			enableAndShow(Settings.OvenInfo);
			enableAndShow(Settings.WindmillInfo);
			enableAndShow(Settings.FurnaceInfo);
			enableAndShow(Settings.Death);
			enableAndShow(Settings.Totem);
			enableAndShow(Settings.Equip);
			break;
		default:
			break;
	}

	function disableAndHide(setting) {
		if (setting && setting.enabled) {
			setting.enabled = false;
			setting.hide = true;
		}
	}

	function enableAndShow(setting) {
		if (setting && setting.hide) {
			setting.enabled = true;
			setting.hide = false;
		}
	}
}


	function getGearRange(gear) {
		switch (gear) {
			case 57:
			case 0:
			case 5:
			case 6:
			case 30:
			case 19:
			case 62:
			case 63:
			case 22:
				return 140;
			case 12:
			case 13:
			case 14:
			case 15:
			case 33:
			case 34:
			case 18:
			case 16:
			case 17:
				return 200;
			case 9:
				return 150;
			default:
				return null
		}
	}

	function distance(a, b) {
		return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y))
	}

	function findTarget(a, b, dist) {
		for (const p of b) {
			if (!isAlly(p) && distance(a, p) <= dist && (p.ⲆΔⲆⲆⵠⵠⵠ && a.ⲆΔⲆⲆⵠⵠⵠ || !p.ⲆΔⲆⲆⵠⵠⵠ && !a.ⲆΔⲆⲆⵠⵠⵠ)) {
				return p
			}
		}
	}

	function selectTool(tool1, tool2, me, socket) {
		if (canSelect(tool1)) {
			if (me.right !== tool1) socket.send(JSON.stringify([Packets.Equip, tool1]))
		} else if (canSelect(tool2)) {
			if (me.right !== tool2) socket.send(JSON.stringify([Packets.Equip, tool2]))
		}
	}

	function autoFeed() {
		if (!autoFeedReady) return;
		const stamp = Date.now();
		if (Settings.AutoFeed.enabled && stamp - Stamps.AutoFeed > 80 && getClientProperty("socket")) {
			const keys = Object.keys(getUserProperty("gauges"));
			const hunger = getUserProperty("gauges")[keys[2]];
			const thirst = getUserProperty("gauges")[keys[3]];
			if (hunger <= .6) {
				const foodToEat = [110, 117, 189, 205, 207, 192].find((food => canSelect(food)));
				foodToEat && getClientProperty("socket").send(JSON.stringify([Packets.Equip, foodToEat]))
			}
			if (thirst <= .5 && canSelect(127)) getClientProperty("socket").send(JSON.stringify([Packets.Equip, 127]));
			Stamps.AutoFeed = stamp;
			autoFeedReady = false;
			setTimeout((() => autoFeedReady = true), 500)
		}
	}
	setInterval(autoFeed, 500);

	function angleCalculator(a, b) {
		if (a + b > 254) {
			var angle = a + b - 254
		}
		if (a + b < 0) {
			var angle = 254 + (a + b)
		}
		if (a + b >= 0 && a + b < 254) {
			var angle = a + b
		}
		return angle
	}

	function calcAngle(e, o, i) {
		return e && o ? i ? Math.atan2(o.r.y - e.r.y, o.r.x - e.r.x) : Math.atan2(o.y - e.y, o.x - e.x) : null
	}

	function isAlly(p) {
		return p.pid === getUserProperty("id") || getUserProperty("team").includes(p.pid)
	}

	function getUserProperty(property) {
		const user = window.user;
		if (!user) return null;
		const keys = Object.keys(user);
		const indexes = {
			terminal: 42,
			chat: 43,
			uid: 17,
			team: 21,
			id: 16,
			cam: 28,
			alive: 10,
			inventory: 35,
			gauges: 30,
			ghost: 8,
			preview: 38
		};
		return user[keys[indexes[property]]]
	}
	window.getUserProperty = getUserProperty;

	function getWorldProperty(property) {
		const world = window.world;
		if (!world) return null;
		const keys = Object.keys(world);
		const indexes = {
			units: 5,
			fast_units: 6,
			players: 4
		};
		return world[keys[indexes[property]]]
	}
	window.getWorldProperty = getWorldProperty;

	function getKeyboardProperty(property) {
		const keyboard = window.keyboard;
		if (!keyboard) return null;
		const keys = Object.keys(keyboard);
		const indexes = {
			left: 31,
			right: 32,
			bottom: 34,
			top: 33
		};
		return keyboard[keys[indexes[property]]]
	}

	function getClientProperty(property) {
		const client = window.client;
		if (!client) return null;
		const keys = Object.keys(client);
		const indexes = {
			socket: 0,
			select_craft: 96,
			recycle_inv: 116,
			steal_token: 137,
			send_move: 123
		};
		return client[keys[indexes[property]]]
	}

	function setKeybind(property) {
		if (!Settings[property] || !Settings[property].key) return;
		Settings[property].key = "Press Any Key";

		function setBind(event) {
			event.code === "Escape" ? Settings[property].key = "NONE" : Settings[property].key = event.code;
			saveSettings();
			document.removeEventListener("keydown", setBind)
		}
		document.addEventListener("keydown", setBind)
	}

	function initListeners() {
		document.addEventListener("keydown", (event => {
			if (getUserProperty("chat").open || getUserProperty("terminal").open) return;
			if (getUserProperty("alive")) {
				for (const property in Settings) {
					if (event.code === Settings[property].key && Settings[property].keyMode === "hold") {
						Settings[property].enabled = true
					}
				}
			}
		}));
		document.addEventListener("keyup", (event => {
			if (getUserProperty("chat").open || getUserProperty("terminal").open) return;
			if (getUserProperty("alive")) {
				for (const property in Settings) {
					if (event.code === Settings[property].key && Settings[property].keyMode === "hold") {
						Settings[property].enabled = false
					}
				}
			}
		}));
		document.addEventListener("keypress", (event => {
			if (getUserProperty("chat").open || getUserProperty("terminal").open) return;
			if (getUserProperty("alive")) {
				for (const property in Settings) {
					if (event.code === Settings[property].key && Settings[property].keyMode === "press") {
						Settings[property].enabled = !Settings[property].enabled;
						if (property === "Spectator" && !Settings[property].enabled && getClientProperty("socket")) getClientProperty("socket").send(JSON.stringify([Packets.Focus]))
					}
				}
			}
										if (event.code === Settings.HideGUI.key) {
			HideGUI(Settings.HideGUI.enabled)
			}
			if (event.code === Settings.GoToLobby.key) {
				getClientProperty("steal_token") && getClientProperty("steal_token").bind(window.client)()	
			}
		}))
	}

	function initEngine() {
		requestAnimationFrame(initEngine);
		if (getUserProperty("alive") && getClientProperty("socket")) {
			if (Settings.Spectator.enabled) {
				if (getKeyboardProperty("left").bind(window.keyboard)()) getUserProperty("cam").x += Settings.Spectator.speed * 100;
				if (getKeyboardProperty("right").bind(window.keyboard)()) getUserProperty("cam").x -= Settings.Spectator.speed * 100;
				if (getKeyboardProperty("bottom").bind(window.keyboard)()) getUserProperty("cam").y -= Settings.Spectator.speed * 100;
				if (getKeyboardProperty("top").bind(window.keyboard)()) getUserProperty("cam").y += Settings.Spectator.speed * 100
			}
			if (getWorldProperty("fast_units")[getUserProperty("uid")]) {
				const stamp = Date.now();
				if (Settings.AutoTotem.enabled && stamp - Stamps.AutoTotem > 60 && getUserProperty("team").length == 0) {
					getWorldProperty("units")[29].forEach((totem => {
						if (distance(totem, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.JoinTeam, totem.pid, totem.id]))
						}
					}));
					Stamps.AutoTotem = stamp
				}
					if (Settings.ZMA.enabled &&stamp - Stamps.ZMA > 90) { // gotta do if invhas to avoid reconnecting
						getWorldProperty("units")[11].forEach((chest => {
							if (distance(chest, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300 ) {
						getClientProperty("socket").send(JSON.stringify([1,202,255,chest.pid, chest.id])); 
						getClientProperty("socket").send(JSON.stringify([1,111,255,chest.pid, chest.id])); 
							}
						}
						
						))
						Stamps.ZMA = stamp;

					}
													if (Settings.crownHeal.enabled && canSelect(77)) {
						if (stamp - Stamps.crownHeal > 900) {
							const me = getWorldProperty("fast_units")[getUserProperty("uid")]
							if (~~(11 - (Date.now() - Timers.HealTimer) / 1e3) == 1 && ⲆΔⵠ.ⵠΔⲆΔ.ᐃᐃⵠᐃ * 200 <= 160 && me.ⲆΔᐃΔᐃ != 77) {
								const lastClothe = me.ⲆΔᐃΔᐃ == 77 ? undefined : me.ⲆΔᐃΔᐃ;
								getClientProperty("socket").send(JSON.stringify([Packets.Equip, 77]));
								if (lastClothe) setTimeout((() => getClientProperty("socket").send(JSON.stringify([Packets.Equip, lastClothe]))), 800)
							}
							Stamps.crownHeal = stamp
						}
					}
					if (Settings.BottleHeal.enabled &&stamp - Stamps.BottleHeal > 100) {
						getClientProperty("socket").send(JSON.stringify([34,127])); 
						Stamps.BottleHeal = stamp;
					}
				if (Settings.AutoCraft.enabled && stamp - Stamps.AutoCraft > 80 && Settings.AutoCraft.last !== null) {
					getClientProperty("select_craft").bind(window.client)(Settings.AutoCraft.last);
					Stamps.AutoCraft = stamp
				}
				if (Settings.AutoRecycle.enabled && stamp - Stamps.AutoRecycle > 80 && Settings.AutoRecycle.last !== null) {
					getClientProperty("recycle_inv").bind(window.client)(Settings.AutoRecycle.last);
					Stamps.AutoRecycle = stamp
				}
				if (Settings.AutoWall.enabled && stamp - Stamps.AutoWall > 80 && canSelect(162)) {
					getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 162, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 0]));
					if (Settings.AutoWall.mode) {
						for (let i = 0; i < 30; i += 2) {
							getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 162, angleCalculator(Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), i), 0]));
							getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 162, angleCalculator(Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), -i), 0]))
						}
					}
					Stamps.AutoWall = stamp
				}
				if (Settings.AutoFire.enabled && stamp - Stamps.AutoFire > 80) {
					if (canSelect(113)) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 113, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 0]))
					} else if (canSelect(118)) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 118, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 0]))
					}
					Stamps.AutoFire = stamp
				}
				if (Settings.AutoIce.enabled && stamp - Stamps.AutoIce > 200 && canSelect(142)) {
					const keys = Object.keys(getUserProperty("gauges"));
					const warm = getUserProperty("gauges")[keys[5]];
					if (warm <= .4) getClientProperty("socket").send(JSON.stringify([Packets.Equip, 142]));
					Stamps.AutoIce = stamp
				}
				if (Settings.DropSword.enabled && stamp - Stamps.DropSword > 80 && getWorldProperty("fast_units")[getUserProperty("uid")].right !== undefined && getGearRange(getWorldProperty("fast_units")[getUserProperty("uid")].right) !== null) {
					getClientProperty("socket").send(JSON.stringify([Packets.DropAll, getWorldProperty("fast_units")[getUserProperty("uid")].right]));
					Stamps.DropSword = stamp
				}
				if (Settings.AutoBuild.enabled && stamp - Stamps.AutoBuild > 60) {
					if (Settings.AutoBuild.build === "Roofs" && canSelect(190)) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 190, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 1]))
					} else if (Settings.AutoBuild.build === "Bridges" && canSelect(125)) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 125, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 1]))
					} else if (Settings.AutoBuild.build === "Plots" && canSelect(141)) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 141, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 1]))
					}
					Stamps.AutoBuild = stamp
				}
				if (Settings.AutoSeed.enabled && stamp - Stamps.AutoSeed > 80) {
					switch (Settings.AutoSeed.seed) {
						case "Auto":
							const seeds = [115, 132, 188, 204, 206, 193, 210, 191, 208];
							for (const seed of seeds)
								if (canSelect(seed)) var seedId = seed;
							break;
						case "Berry":
							if (canSelect(115)) var seedId = 115;
							break;
						case "Wheat":
							if (canSelect(132)) var seedId = 132;
							break;
						case "Pumpkin":
							if (canSelect(188)) var seedId = 188;
							break;
						case "Thornbush":
							if (canSelect(193)) var seedId = 193;
							break;
						case "Aloe":
							if (canSelect(210)) var seedId = 210;
							break;
						case "Watermelon":
							if (canSelect(208)) var seedId = 208;
							break;
						case "Garlic":
							if (canSelect(191)) var seedId = 191;
							break;
						case "Carrot":
							if (canSelect(204)) var seedId = 204;
							break;
						case "Tomato":
							if (canSelect(206)) var seedId = 206;
							break
					}
					if (seedId) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, seedId, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), Settings.AutoSeedG ? 1 : 0]))
					}
					Stamps.AutoSeed = stamp
				}
				if (Settings.AutoSteal.enabled && stamp - Stamps.AutoSteal > 40) {
					getWorldProperty("units")[11].forEach((chest => {
						if (distance(chest, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300 && chest.action) {
							if (chest.lock && Settings.AutoUnlock && !isAlly(chest) && canSelect(158)) getClientProperty("socket").send(JSON.stringify([Packets.UnlockChest, chest.pid, chest.id]));
							getClientProperty("socket").send(JSON.stringify([Packets.TakeChest, chest.pid, chest.id]))
						}
					}));
					getWorldProperty("units")[34].forEach((oven => {
						if ((oven.info & 31744) >> 10 && distance(oven, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.TakeOven, oven.pid, oven.id]))
						}
					}));
					getWorldProperty("units")[32].forEach((windmill => {
						if ((windmill.info & 65280) >> 8 && distance(windmill, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.TakeWindmill, windmill.pid, windmill.id]))
						}
					}));
					const extractors = [getWorldProperty("units")[24], getWorldProperty("units")[25], getWorldProperty("units")[26], getWorldProperty("units")[27], getWorldProperty("units")[28]];
					for (let ex = 0; ex < extractors.length; ex++) {
						extractors[ex].forEach((extractor => {
							if ((extractor.info & 65280) >> 8 && distance(extractor, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.TakeExtractor, extractor.pid, extractor.id, extractor.type]))
							}
						}))
					}
					Stamps.AutoSteal = stamp
				}
				if (Settings.AutoExtractorTake.enabled && stamp - Stamps.AutoExtractorTake > 50) {
					const extractors = [getWorldProperty("units")[24], getWorldProperty("units")[25], getWorldProperty("units")[26], getWorldProperty("units")[27], getWorldProperty("units")[28]];
					for (let ex = 0; ex < extractors.length; ex++) {
						extractors[ex].forEach((extractor => {
							if ((extractor.info & 65280) >> 8 && distance(extractor, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.TakeExtractor, extractor.pid, extractor.id, extractor.type]))
							}
						}))
					}
					Stamps.AutoExtractorTake = stamp
				}
				if (Settings.AutoExtractorPut.enabled && stamp - Stamps.AutoExtractorPut > 250) {
					const extractors = [getWorldProperty("units")[24], getWorldProperty("units")[25], getWorldProperty("units")[26], getWorldProperty("units")[27], getWorldProperty("units")[28]];
					for (let ex = 0; ex < extractors.length; ex++) {
						extractors[ex].forEach((extractor => {
							if ((extractor.info & 255) !== Settings.AutoExtractorPutMax && distance(extractor, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.PutExtractor, Settings.AutoExtractorPutMax - (extractor.info & 255), extractor.pid, extractor.id, extractor.type]))
							}
						}))
					}
					Stamps.AutoExtractorPut = stamp
				}
				if (Settings.AutoBreadTake.enabled && stamp - Stamps.AutoBreadTake > 80) {
					getWorldProperty("units")[34].forEach((oven => {
						if ((oven.info & 31744) >> 10 && distance(oven, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.TakeOven, oven.pid, oven.id]))
						}
					}));
					getWorldProperty("units")[32].forEach((windmill => {
						if ((windmill.info & 65280) >> 8 && distance(windmill, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.TakeWindmill, windmill.pid, windmill.id]))
						}
					}));
					Stamps.AutoBreadTake = stamp
				}
				if (Settings.AutoBreadPut.enabled && stamp - Stamps.AutoBreadPut > 250) {
					getWorldProperty("units")[34].forEach((oven => {
						if ((oven.info & 31) !== Settings.BreadPutMax && distance(oven, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.GiveWoodOven, Settings.BreadPutMax - (oven.info & 31), oven.pid, oven.id]))
						}
						if ((oven.info & 992) >> 5 !== Settings.BreadPutMax && distance(oven, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.GiveFlourOven, Settings.BreadPutMax - ((oven.info & 992) >> 5), oven.pid, oven.id]))
						}
					}));
					getWorldProperty("units")[32].forEach((windmill => {
						if ((windmill.info & 255) !== Settings.WindmillPutMax && distance(windmill, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.GiveWheatWindmill, Settings.WindmillPutMax - (windmill.info & 255), windmill.pid, windmill.id]))
						}
					}));
					Stamps.AutoBreadPut = stamp
				}
				if (Settings.AutoCrown.enabled && getUserProperty("ghost").enabled && stamp - Stamps.AutoCrown > 80) {
					getWorldProperty("units")[22].forEach((resurrection => {
						if (distance(resurrection, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.Resurrection, resurrection.pid, resurrection.id]))
						}
					}));
					Stamps.AutoCrown = stamp
				}
				if (Settings.AimBot.enabled && getWorldProperty("fast_units")[getUserProperty("uid")].right !== undefined) {
					const range = getGearRange(getWorldProperty("fast_units")[getUserProperty("uid")].right);
					if (range !== null) {
						const target = findTarget(getWorldProperty("fast_units")[getUserProperty("uid")], getWorldProperty("units")[0], range);
						if (target) {
							Settings.AimBot.angle = calcAngle(getWorldProperty("fast_units")[getUserProperty("uid")], target, true);
							getClientProperty("socket").send(JSON.stringify([Packets.SendAttack, Math.floor((Settings.AimBot.angle + Math.PI * 2) % (Math.PI * 2) * 255 / (Math.PI * 2))]));
							getClientProperty("socket").send(JSON.stringify([Packets.StopAttack]))
						} else Settings.AimBot.angle = null
					} else Settings.AimBot.angle = null
				}
				if (Settings.SmartCraft.enabled && stamp - Stamps.AutoCraft > 90) {
					switch (Settings.SmartCraft.select) {
						case "REIDITE_SPIKE":
							var craftIds = [55, 56, 57, 58, 59, 60, 72];
							var checkId = 219;
							break;
						case "AMETHYST_SPIKE":
							var craftIds = [55, 56, 57, 58, 59, 71];
							var checkId = 123;
							break;
						case "DIAMOND_SPIKE":
							var craftIds = [55, 56, 57, 58, 70];
							var checkId = 170;
							break;
						case "GOLD_SPIKE":
							var craftIds = [55, 56, 57, 69];
							var checkId = 169;
							break;
						case "STONE_SPIKE":
							var craftIds = [55, 56, 68];
							var checkId = 168;
							break;
						case "REIDITE_WALL":
							var craftIds = [55, 56, 57, 58, 59, 60];
							var checkId = 217;
							break;
						case "AMETHYST_WALL":
							var craftIds = [55, 56, 57, 58, 59];
							var checkId = 122;
							break;
						case "DIAMOND_WALL":
							var craftIds = [55, 56, 57, 58];
							var checkId = 165;
							break;
						case "GOLD_WALL":
							var craftIds = [55, 56, 57];
							var checkId = 164;
							break;
						case "STONE_WALL":
							var craftIds = [55, 56];
							var checkId = 163;
							break
					}
					if (craftIds && checkId) {
						const amount = getUserProperty("inventory")[Object.keys(getUserProperty("inventory"))[3]][checkId];
						if (amount === undefined || amount < Settings.SmartCraft.hm) {
							for (const craftId of craftIds.reverse()) {
								getClientProperty("socket").send(JSON.stringify([Packets.Craft, craftId]))
							}
						}
					}
					Stamps.AutoCraft = stamp
				}
				if (Settings.AutoSpike.enabled && stamp - Stamps.AutoSpike > 90) {
					for (const spike of Settings.AutoSpike.priority) {
						if (spike === "Reidite Spike" && canSelect(219)) {
							var bestSpike = 219;
							break
						} else if (spike === "Amethyst Spike" && canSelect(123)) {
							var bestSpike = 123;
							break
						} else if (spike === "Diamond Spike" && canSelect(170)) {
							var bestSpike = 170;
							break
						} else if (spike === "Gold Spike" && canSelect(169)) {
							var bestSpike = 169;
							break
						} else if (spike === "Stone Spike" && canSelect(168)) {
							var bestSpike = 168;
							break
						} else if (spike === "Wood Spike" && canSelect(160)) {
							var bestSpike = 160;
							break
						} else if (spike === "Wood Wall" && canSelect(162)) {
							var bestSpike = 162;
							break
						}
					}
					if (bestSpike) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, bestSpike, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 0]));
						if (Settings.AutoSpike.mode) {
							for (let i = 0; i < 30; i += 2) {
								getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, bestSpike, angleCalculator(Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), i), 0]));
								getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, bestSpike, angleCalculator(Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), -i), 0]))
							}
						}
					}
					Stamps.AutoSpike = stamp
				}
				if (Settings.AutoFarm.enabled && stamp - Stamps.AutoFarm > 400) {
					const Targeta = {
						obj: null,
						dist: -1,
						type: 0
					};
					const rect1 = {
						x: Settings.AutoFarm.x,
						y: Settings.AutoFarm.y,
						width: Settings.AutoFarm.xx - Settings.AutoFarm.x,
						height: Settings.AutoFarm.yy - Settings.AutoFarm.y
					};
					for (let i = 0, objects = [...getWorldProperty("units")[37], ...getWorldProperty("units")[3], ...getWorldProperty("units")[31], ...getWorldProperty("units")[40], ...getWorldProperty("units")[39], ...getWorldProperty("units")[44], ...getWorldProperty("units")[55], ...getWorldProperty("units")[54], ...getWorldProperty("units")[43]], Berry = null, d = null; i < objects.length; ++i) {
						Berry = objects[i];
						if (!Berry.info || Berry.info === 10) continue;
						if (!Settings.AutoFarm.water && Berry.info === 16) continue;
						if (rect1.x < Berry.x - 50 + 100 && rect1.x + rect1.width > Berry.x - 50 && rect1.y < Berry.y - 50 + 100 && rect1.y + rect1.height > Berry.y - 50) {
							d = (getWorldProperty("fast_units")[getUserProperty("uid")].x - Berry.x) ** 2 + (getWorldProperty("fast_units")[getUserProperty("uid")].y - Berry.y) ** 2;
							if (Targeta.dist === -1 || d < Targeta.dist) {
								Targeta.dist = d;
								Targeta.obj = Berry
							}
						}
					}
					if (Targeta.obj) {
						Targeta.dist = distance(Targeta.obj, getWorldProperty("fast_units")[getUserProperty("uid")]);
						switch (Targeta.obj.info) {
							case 1:
							case 2:
							case 3: {
								selectTool(54, 53, getWorldProperty("fast_units")[getUserProperty("uid")], getClientProperty("socket"));
								Targeta.type = 2
							};
							break;
						case 16:
						case 17:
						case 18:
						case 19: {
							if (Settings.AutoFarm.water && canSelect(49) && getWorldProperty("fast_units")[getUserProperty("uid")].right !== 49) {
								getClientProperty("socket").send(JSON.stringify([Packets.Equip, 49]));
								Targeta.type = 1
							} else {
								selectTool(54, 53, getWorldProperty("fast_units")[getUserProperty("uid")], getClientProperty("socket"));
								Targeta.type = 2
							}
						};
						break
						}
						let velocity = 0;
						const Coors = {
							x: getWorldProperty("fast_units")[getUserProperty("uid")].x - Targeta.obj.x,
							y: getWorldProperty("fast_units")[getUserProperty("uid")].y - Targeta.obj.y
						};
						const CoorsABS = {
							x: Math.abs(getWorldProperty("fast_units")[getUserProperty("uid")].x - Targeta.obj.x),
							y: Math.abs(getWorldProperty("fast_units")[getUserProperty("uid")].y - Targeta.obj.y)
						};
						if (CoorsABS.x > 0) {
							if (Coors.x > 0) velocity += 1;
							if (Coors.x < 0) velocity += 2
						}
						if (CoorsABS.y > 0) {
							if (Coors.y > 0) velocity += 8;
							if (Coors.y < 0) velocity += 4
						}
						if (CoorsABS.x < 250 && CoorsABS.y < 250) {
							Settings.AutoFarm.angle = calcAngle(getWorldProperty("fast_units")[getUserProperty("uid")], Targeta.obj, true);
							if (Settings.AutoFarm.angle) {
								getClientProperty("socket").send(JSON.stringify([Packets.SendAttack, Math.floor((Settings.AutoFarm.angle + Math.PI * 2) % (Math.PI * 2) * 255 / (Math.PI * 2))]));
								getClientProperty("socket").send(JSON.stringify([Packets.StopAttack]))
							}
						}
						getClientProperty("send_move").bind(window.client)(velocity)
					} else {
						let velocity = 0;
						const Coors = {
							x: getWorldProperty("fast_units")[getUserProperty("uid")].x - Settings.AutoFarm.sx,
							y: getWorldProperty("fast_units")[getUserProperty("uid")].y - Settings.AutoFarm.sy
						};
						const CoorsABS = {
							x: Math.abs(getWorldProperty("fast_units")[getUserProperty("uid")].x - Settings.AutoFarm.sx),
							y: Math.abs(getWorldProperty("fast_units")[getUserProperty("uid")].y - Settings.AutoFarm.sy)
						};
						if (CoorsABS.x > 100) {
							if (Coors.x > 0) velocity += 1;
							if (Coors.x < 0) velocity += 2
						}
						if (CoorsABS.y > 100) {
							if (Coors.y > 0) velocity += 8;
							if (Coors.y < 0) velocity += 4
						}
						getClientProperty("send_move").bind(window.client)(velocity)
					}
					Stamps.AutoFarm = stamp
				}
			}
		}
	}

	function initExclusive() {
				document.querySelector("#option_in_game").style.opacity = "0.5";
				document.querySelector("#chronoquest").style.opacity = "0.5";
				document.querySelector("#shop_market").style.opacity = "0.5";
				document.querySelector("#home_craft").style.opacity = "0.5";
				document.querySelector("#recipe_craft").style.opacity = "0.5";
				document.querySelector("#sure_delete").style.opacity = "0.5";
				document.querySelector("#cancel_sure_delete").style.opacity = "0.5";
		const gui = new guify({
			title: "snowfall",
			align: "right",
			width: 600,
			opacity: .67,
			barMode: "none",
			theme: {
				colors: {
						panelBackground: "rgb(0,0,0)",
						componentBackground: "rgb(10,10,35)",
						componentForeground: "rgb(0,255,0)",
						textPrimary: "rgb(0,255,0)",
						textSecondary: "rgb(0,255,0)",
						textHover: "rgb(0,0,0)"
				},
				font: {
					fontFamily: "Baloo Paaji",
					fontSize: "20px"
				}
			}
		});
		gui.Register([{
			type: "folder",
			label: "Visuals",
			open: false
		}, {
			type: "folder",
			label: "Misc",
			open: false
		}, {
			type: "folder",
			label: "Binds",
			open: false
		}, {
			type: "folder",
			label: "AutoSteal",
			open: false
		}, {
			type: "folder",
			label: "AutoSpike",
			open: false
		}, {
			type: "folder",
			label: "SmartCraft",
			open: false
		}, {
			type: "folder",
			label: "Spectator",
			open: false
		}, {
			type: "folder",
			label: "AutoFarm",
			open: false
		},
		{
			type: "folder",
			label: "Extras",
			open: false,
		}
	]);
		gui.Register([{
			type: "checkbox",
			label: "PlayerTracers",
			object: Settings.PlayerTracers,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "KrakenTracers",
			object: Settings.KrakenTracers,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "SandwormTracers",
			object: Settings.SandwormTracers,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "PlayerOnTop",
			object: Settings.PlayerOnTop,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "BoxOnTop",
			object: Settings.BoxOnTop,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ListEnabledHacks",
			object: Settings.ListEnabledHacks,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ShowJoinLeaves",
			object: Settings.ShowJoinLeaves,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "Roofs",
			object: Settings.Roofs,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ShowHP",
			object: Settings.ShowHP,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "Debugger",
			object: Settings.Debugger,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "Timers",
			object: Settings.Timers,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "WeatherInfo",
			object: Settings.WeatherInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ExtractorInfo",
			object: Settings.ExtractorInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ChestInfo",
			object: Settings.ChestInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "BoxInfo",
			object: Settings.BoxInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "WindmillInfo",
			object: Settings.WindmillInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "OvenInfo",
			object: Settings.OvenInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "TotemInfo",
			object: Settings.TotemInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "FurnaceInfo",
			object: Settings.FurnaceInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "MachineInfo",
			object: Settings.MachineInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ColoredSpikes",
			object: Settings.ColoredSpikes,
			property: "enabled",
			onChange() {
				saveSettings();
			}
		}, {
			type: "checkbox",
			label: "ShowHoodNames",
			object: Settings.ShowHoodNames,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "NoFog",
			object: Settings.NoFog,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "Xray",
			object: Settings.Xray,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "XrayOpacity",
			object: Settings,
			property: "XrayOpacity",
			min: .05,
			max: .95,
			step: .05,
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "RoofsOpacity",
			object: Settings,
			property: "RoofsOpacity",
			min: .05,
			max: .95,
			step: .05,
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "ColoredSpikes Textures",
			object: Settings.ColoredSpikes,
			property: "textures",
			options: ["1", "2"],
			onChange() {
				saveSettings();
				switchColoredSpikesTextures()
			}
		}], {
			folder: "Visuals"
		});
		gui.Register([
			{
			type: "checkbox",
			label: "Equip After Place",
			object: Settings.Equip,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		},{
			type: "checkbox",
			label: "AutoRespawn",
			object: Settings.AutoRespawn,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		},{
			type: "checkbox",
			label: "AutoCraft",
			object: Settings.AutoCraft,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoRecycle",
			object: Settings.AutoRecycle,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBook",
			object: Settings.AutoBook,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoTotem",
			object: Settings.AutoTotem,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoCrown",
			object: Settings.AutoCrown,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AimBot",
			object: Settings.AimBot,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBuild",
			object: Settings.AutoBuild,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoSeed",
			object: Settings.AutoSeed,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoSeed with G",
			object: Settings,
			property: "AutoSeedG",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoFeed",
			object: Settings.AutoFeed,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoIce",
			object: Settings.AutoIce,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBreadTake",
			object: Settings.AutoBreadTake,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBreadPut",
			object: Settings.AutoBreadPut,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoExtractorTake",
			object: Settings.AutoExtractorTake,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoExtractorPut",
			object: Settings.AutoExtractorPut,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		},
		{
				type: "checkbox",
				label: "ZMA",
				object: Settings.ZMA,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			},{
				type: "checkbox",
				label: "crownHeal",
				object: Settings.crownHeal,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			},
			{
				type: "checkbox",
				label: "BottleHealZma",
				object: Settings.BottleHeal,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			},
			{
				type: "checkbox",
				label: "Auto Band&Aloe",
				object: Settings.autoBand,
				property: "enabled",
				onChange() {
					saveSettings()
				}
			},{
			type: "select",
			label: "AutoBuild Build",
			object: Settings.AutoBuild,
			property: "build",
			options: ["Roofs", "Bridges", "Plots"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSeed Seed",
			object: Settings.AutoSeed,
			property: "seed",
			options: ["Auto", "Berry", "Wheat", "Pumpkin", "Thornbush", "Aloe", "Watermelon", "Garlic", "Carrot", "Tomato"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "PutInChest Amount",
			object: Settings,
			property: "PutInChest",
			min: 10,
			max: 8e3,
			step: 10,
			onChange() {
				saveSettings()
			}
		}], {
			folder: "Misc"
		});
		for (const property in Settings) {
			if (Settings[property].pushToBinds) {
				gui.Register([{
					type: "display",
					label: `${property} Key`,
					object: Settings[property],
					property: "key"
				}, {
					type: "button",
					label: `Set ${property} Key`,
					action() {
						setKeybind(property)
					}
				}], {
					folder: "Binds"
				})
			}
		}
		gui.Register([{
			type: "checkbox",
			label: "AutoSteal",
			object: Settings.AutoSteal,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoUnlock",
			object: Settings,
			property: "AutoUnlock",
			onChange() {
				saveSettings()
			}
		}, {
			type: "display",
			label: "AutoSteal Key",
			object: Settings.AutoSteal,
			property: "key"
		}, {
			type: "button",
			label: "Set AutoSteal Key",
			action() {
				setKeybind("AutoSteal")
			}
		}], {
			folder: "AutoSteal"
		});
		gui.Register([{
			type: "display",
			label: "AutoSpike Key",
			object: Settings.AutoSpike,
			property: "key"
		}, {
			type: "button",
			label: "Set AutoSpike Key",
			action() {
				setKeybind("AutoSpike")
			}
		}, {
			type: "checkbox",
			label: "AutoSpike 2",
			object: Settings.AutoSpike,
			property: "mode",
			onChange() {
				saveSettings()
			}
		}, {
			type: "display",
			label: "AutoWall Key",
			object: Settings.AutoWall,
			property: "key"
		}, {
			type: "button",
			label: "Set AutoWall Key",
			action() {
				setKeybind("AutoWall")
			}
		}, {
			type: "checkbox",
			label: "AutoWall 2",
			object: Settings.AutoWall,
			property: "mode",
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 1",
			object: Settings.AutoSpike.priority,
			property: "0",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 2",
			object: Settings.AutoSpike.priority,
			property: "1",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 3",
			object: Settings.AutoSpike.priority,
			property: "2",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 4",
			object: Settings.AutoSpike.priority,
			property: "3",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 5",
			object: Settings.AutoSpike.priority,
			property: "4",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 6",
			object: Settings.AutoSpike.priority,
			property: "5",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 7",
			object: Settings.AutoSpike.priority,
			property: "6",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}], {
			folder: "AutoSpike"
		});
		gui.Register([{
			type: "checkbox",
			label: "SmartCraft",
			object: Settings.SmartCraft,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "display",
			label: "SmartCraft Key",
			object: Settings.SmartCraft,
			property: "key"
		}, {
			type: "button",
			label: "Set SmartCraft Key",
			action() {
				setKeybind("SmartCraft")
			}
		}, {
			type: "select",
			label: "SmartCraft Select",
			options: ["REIDITE_SPIKE", "AMETHYST_SPIKE", "DIAMOND_SPIKE", "GOLD_SPIKE", "STONE_SPIKE", "REIDITE_WALL", "AMETHYST_WALL", "DIAMOND_WALL", "GOLD_WALL", "STONE_WALL"],
			object: Settings.SmartCraft,
			property: "select",
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "CraftHowMuch",
			object: Settings.SmartCraft,
			property: "hm",
			min: 1,
			max: 500,
			step: 1,
			onChange() {
				saveSettings()
			}
		}], {
			folder: "SmartCraft"
		});
		gui.Register([{
			type: "checkbox",
			label: "Spectator",
			object: Settings.Spectator,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "Spectator Speed",
			min: .05,
			step: .05,
			max: 1,
			object: Settings.Spectator,
			property: "speed",
			onChange() {
				saveSettings()
			}
		}, {
			type: "display",
			label: "Spectator Key",
			object: Settings.Spectator,
			property: "key"
		}, {
			type: "button",
			label: "Set Spectator Key",
			action() {
				setKeybind("Spectator")
			}
		}], {
			folder: "Spectator"
		});
		gui.Register([{
			type: "checkbox",
			label: "Start AutoFarm",
			object: Settings.AutoFarm,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoWater",
			object: Settings.AutoFarm,
			property: "water",
			onChange() {
				saveSettings()
			}
		}, {
			type: "button",
			label: "Top left of farm",
			action() {
				getWorldProperty("fast_units")[getUserProperty("uid")] && (Settings.AutoFarm.x = getWorldProperty("fast_units")[getUserProperty("uid")].x, Settings.AutoFarm.y = getWorldProperty("fast_units")[getUserProperty("uid")].y);
				saveSettings()
			}
		}, {
			type: "button",
			label: "Bottom right of farm",
			action() {
				getWorldProperty("fast_units")[getUserProperty("uid")] && (Settings.AutoFarm.xx = getWorldProperty("fast_units")[getUserProperty("uid")].x, Settings.AutoFarm.yy = getWorldProperty("fast_units")[getUserProperty("uid")].y);
				saveSettings()
			}
		}, {
			type: "button",
			label: "Safe Point",
			action() {
				getWorldProperty("fast_units")[getUserProperty("uid")] && (Settings.AutoFarm.sx = getWorldProperty("fast_units")[getUserProperty("uid")].x, Settings.AutoFarm.sy = getWorldProperty("fast_units")[getUserProperty("uid")].y);
				saveSettings()
			}
		}, {
			type: "display",
			label: "X",
			object: Settings.AutoFarm,
			property: "x"
		}, {
			type: "display",
			label: "Y",
			object: Settings.AutoFarm,
			property: "y"
		}, {
			type: "display",
			label: "X1",
			object: Settings.AutoFarm,
			property: "xx"
		}, {
			type: "display",
			label: "Y1",
			object: Settings.AutoFarm,
			property: "yy"
		}, {
			type: "display",
			label: "SX",
			object: Settings.AutoFarm,
			property: "sx"
		}, {
			type: "display",
			label: "SY",
			object: Settings.AutoFarm,
			property: "sy"
		}], {
			folder: "AutoFarm"
		});
		gui.Register([ 
			{
type: "range",
label: "Skin",
min: 0,
max: 238,
step: 1,
object: Settings.Skin,
property: "Skin",
onChange: (data) => {
	getWorldProperty("fast_units")[getUserProperty("uid")].ⵠⲆᐃᐃ = data
}
},
{
type: "button",
label: "Copy token",
action() {
let str = "```" + `Nickname: ${getWorldProperty("fast_units")[getUserProperty("uid")].ᐃΔΔⵠ.ⵠⲆⵠΔⵠ}\nToken: ${window.user.ΔᐃⲆΔΔ}\nTokenID: ${window.user.ⵠᐃⲆᐃⲆᐃΔ}` + "```";
window.prompt("Press CTRL C RETARDS", str)
}
},
{
type: "button",
label: "Go To Lobby",
action() {
	getClientProperty("steal_token") && getClientProperty("steal_token").bind(window.client)()
}

},
{
			type: "checkbox",
			label: "Token Joiner Enabled",
			object: Settings.Tokens,
			property: "enabled",
			action() {
				saveSettings()
			}
		},
{
type: "text",
label: "Token",
object: Settings.Tokens,
property: "token",
listenMode: 'input',
onChange: (data) => {
window.user.ΔᐃⲆΔΔ = data;
saveSettings()
}
},
{
type: "text",
label: "TokenID",
object: Settings.Tokens,
property: "tokenid",
listenMode: 'input',
onChange: (data) => {
window.user.ⵠᐃⲆᐃⲆᐃΔ = data;
saveSettings();
}
},
/*
{
	type: "checkbox",
	label: "ZMApath",
	object: Settings.ZMApath,
	property: "enabled",
	onChange() {
		saveSettings()
	}
}
*/
], {
folder: "Extras"
})
		setTimeout(initListeners, 5e3)
	}
	const script = document.createElement("script");
	script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
	script.onload = initExclusive;
	document.body.appendChild(script)
})();
